// export def_base_size , def_west_nations , def_east_nations ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , respawning_time_min , respawning_time_max , siberite_bomb_Delay ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Position_Nations ; export depot_def , breastworks_def , labs_def , factory_def , start_def , extra_oil_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function prepare_deposits ; var list , un , deposits ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
// list := GetListOfResourcesInArea ( west_side ) ^ GetListOfResourcesInArea ( east_side ) ;
   6: LD_ADDR_VAR 0 2
  10: PUSH
  11: LD_INT 8
  13: PPUSH
  14: CALL_OW 442
  18: PUSH
  19: LD_INT 9
  21: PPUSH
  22: CALL_OW 442
  26: ADD
  27: ST_TO_ADDR
// for un = 1 to ( list div 3 ) do
  28: LD_ADDR_VAR 0 3
  32: PUSH
  33: DOUBLE
  34: LD_INT 1
  36: DEC
  37: ST_TO_ADDR
  38: LD_VAR 0 2
  42: PUSH
  43: LD_INT 3
  45: DIV
  46: PUSH
  47: FOR_TO
  48: IFFALSE 94
// RemoveDepositXY ( list [ un * 3 - 2 ] , list [ un * 3 - 1 ] ) ;
  50: LD_VAR 0 2
  54: PUSH
  55: LD_VAR 0 3
  59: PUSH
  60: LD_INT 3
  62: MUL
  63: PUSH
  64: LD_INT 2
  66: MINUS
  67: ARRAY
  68: PPUSH
  69: LD_VAR 0 2
  73: PUSH
  74: LD_VAR 0 3
  78: PUSH
  79: LD_INT 3
  81: MUL
  82: PUSH
  83: LD_INT 1
  85: MINUS
  86: ARRAY
  87: PPUSH
  88: CALL_OW 63
  92: GO 47
  94: POP
  95: POP
// deposits := [ [ 40 , 49 , mat_oil ] , [ 40 , 68 , mat_oil ] , [ 9 , 3 , mat_siberit ] , [ 61 , 116 , mat_siberit ] , [ 177 , 46 , mat_oil ] , [ 185 , 71 , mat_oil ] , [ 157 , 3 , mat_siberit ] , [ 213 , 116 , mat_siberit ] ] ;
  96: LD_ADDR_VAR 0 4
 100: PUSH
 101: LD_INT 40
 103: PUSH
 104: LD_INT 49
 106: PUSH
 107: LD_INT 2
 109: PUSH
 110: EMPTY
 111: LIST
 112: LIST
 113: LIST
 114: PUSH
 115: LD_INT 40
 117: PUSH
 118: LD_INT 68
 120: PUSH
 121: LD_INT 2
 123: PUSH
 124: EMPTY
 125: LIST
 126: LIST
 127: LIST
 128: PUSH
 129: LD_INT 9
 131: PUSH
 132: LD_INT 3
 134: PUSH
 135: LD_INT 3
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: LIST
 142: PUSH
 143: LD_INT 61
 145: PUSH
 146: LD_INT 116
 148: PUSH
 149: LD_INT 3
 151: PUSH
 152: EMPTY
 153: LIST
 154: LIST
 155: LIST
 156: PUSH
 157: LD_INT 177
 159: PUSH
 160: LD_INT 46
 162: PUSH
 163: LD_INT 2
 165: PUSH
 166: EMPTY
 167: LIST
 168: LIST
 169: LIST
 170: PUSH
 171: LD_INT 185
 173: PUSH
 174: LD_INT 71
 176: PUSH
 177: LD_INT 2
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: LIST
 184: PUSH
 185: LD_INT 157
 187: PUSH
 188: LD_INT 3
 190: PUSH
 191: LD_INT 3
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: PUSH
 199: LD_INT 213
 201: PUSH
 202: LD_INT 116
 204: PUSH
 205: LD_INT 3
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: PUSH
 213: EMPTY
 214: LIST
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: ST_TO_ADDR
// for un in deposits do
 223: LD_ADDR_VAR 0 3
 227: PUSH
 228: LD_VAR 0 4
 232: PUSH
 233: FOR_IN
 234: IFFALSE 269
// CreateDepositXY ( un [ 1 ] , un [ 2 ] , un [ 3 ] ) ;
 236: LD_VAR 0 3
 240: PUSH
 241: LD_INT 1
 243: ARRAY
 244: PPUSH
 245: LD_VAR 0 3
 249: PUSH
 250: LD_INT 2
 252: ARRAY
 253: PPUSH
 254: LD_VAR 0 3
 258: PUSH
 259: LD_INT 3
 261: ARRAY
 262: PPUSH
 263: CALL_OW 62
 267: GO 233
 269: POP
 270: POP
// end ;
 271: LD_VAR 0 1
 275: RET
// function init_map ; var i ; begin
 276: LD_INT 0
 278: PPUSH
 279: PPUSH
// prepare_deposits ;
 280: CALL 0 0 0
// extra_oil_deposits_locations := [ [ 29 , 3 ] , [ 82 , 115 ] , [ 134 , 3 ] , [ 192 , 116 ] ] ;
 284: LD_ADDR_EXP 27
 288: PUSH
 289: LD_INT 29
 291: PUSH
 292: LD_INT 3
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: PUSH
 299: LD_INT 82
 301: PUSH
 302: LD_INT 115
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: PUSH
 309: LD_INT 134
 311: PUSH
 312: LD_INT 3
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: PUSH
 319: LD_INT 192
 321: PUSH
 322: LD_INT 116
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: LIST
 333: LIST
 334: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 62 , 60 ] , [ 157 , 60 ] ] ;
 335: LD_ADDR_EXP 28
 339: PUSH
 340: LD_INT 62
 342: PUSH
 343: LD_INT 60
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: PUSH
 350: LD_INT 157
 352: PUSH
 353: LD_INT 60
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: ST_TO_ADDR
// depot_def := [ [ 35 , 34 , 0 ] , [ 56 , 86 , 2 ] , [ 158 , 34 , 5 ] , [ 185 , 86 , 3 ] ] ;
 364: LD_ADDR_EXP 22
 368: PUSH
 369: LD_INT 35
 371: PUSH
 372: LD_INT 34
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: EMPTY
 379: LIST
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 56
 385: PUSH
 386: LD_INT 86
 388: PUSH
 389: LD_INT 2
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: LIST
 396: PUSH
 397: LD_INT 158
 399: PUSH
 400: LD_INT 34
 402: PUSH
 403: LD_INT 5
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: LD_INT 185
 413: PUSH
 414: LD_INT 86
 416: PUSH
 417: LD_INT 3
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: LIST
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: LIST
 429: LIST
 430: ST_TO_ADDR
// labs_def := [ [ 19 , 28 , 1 ] , [ 49 , 92 , 1 ] , [ 166 , 23 , 4 ] , [ 205 , 97 , 4 ] ] ;
 431: LD_ADDR_EXP 24
 435: PUSH
 436: LD_INT 19
 438: PUSH
 439: LD_INT 28
 441: PUSH
 442: LD_INT 1
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PUSH
 450: LD_INT 49
 452: PUSH
 453: LD_INT 92
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 166
 466: PUSH
 467: LD_INT 23
 469: PUSH
 470: LD_INT 4
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: LIST
 477: PUSH
 478: LD_INT 205
 480: PUSH
 481: LD_INT 97
 483: PUSH
 484: LD_INT 4
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: ST_TO_ADDR
// factory_def := [ [ 26 , 16 , 2 ] , [ 64 , 103 , 0 ] , [ 154 , 18 , 3 ] , [ 190 , 103 , 5 ] ] ;
 498: LD_ADDR_EXP 25
 502: PUSH
 503: LD_INT 26
 505: PUSH
 506: LD_INT 16
 508: PUSH
 509: LD_INT 2
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: LIST
 516: PUSH
 517: LD_INT 64
 519: PUSH
 520: LD_INT 103
 522: PUSH
 523: LD_INT 0
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 154
 533: PUSH
 534: LD_INT 18
 536: PUSH
 537: LD_INT 3
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_INT 190
 547: PUSH
 548: LD_INT 103
 550: PUSH
 551: LD_INT 5
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: LIST
 558: PUSH
 559: EMPTY
 560: LIST
 561: LIST
 562: LIST
 563: LIST
 564: ST_TO_ADDR
// start_def := [ [ 35 , 26 ] , [ 65 , 94 ] , [ 150 , 26 ] , [ 185 , 94 ] ] ;
 565: LD_ADDR_EXP 26
 569: PUSH
 570: LD_INT 35
 572: PUSH
 573: LD_INT 26
 575: PUSH
 576: EMPTY
 577: LIST
 578: LIST
 579: PUSH
 580: LD_INT 65
 582: PUSH
 583: LD_INT 94
 585: PUSH
 586: EMPTY
 587: LIST
 588: LIST
 589: PUSH
 590: LD_INT 150
 592: PUSH
 593: LD_INT 26
 595: PUSH
 596: EMPTY
 597: LIST
 598: LIST
 599: PUSH
 600: LD_INT 185
 602: PUSH
 603: LD_INT 94
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: ST_TO_ADDR
// breastworks_def := [ [ [ 44 , 18 , 4 ] , [ 47 , 51 , 5 ] , [ 35 , 8 , 4 ] , [ 50 , 38 , 5 ] ] , [ [ 81 , 97 , 4 ] , [ 54 , 71 , 3 ] , [ 81 , 110 , 5 ] , [ 66 , 82 , 3 ] ] , [ [ 136 , 20 , 1 ] , [ 164 , 48 , 1 ] , [ 130 , 8 , 1 ] , [ 147 , 37 , 0 ] ] , [ [ 181 , 103 , 1 ] , [ 178 , 72 , 1 ] , [ 186 , 112 , 1 ] , [ 172 , 82 , 2 ] ] ] ;
 616: LD_ADDR_EXP 23
 620: PUSH
 621: LD_INT 44
 623: PUSH
 624: LD_INT 18
 626: PUSH
 627: LD_INT 4
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: LIST
 634: PUSH
 635: LD_INT 47
 637: PUSH
 638: LD_INT 51
 640: PUSH
 641: LD_INT 5
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PUSH
 649: LD_INT 35
 651: PUSH
 652: LD_INT 8
 654: PUSH
 655: LD_INT 4
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: LIST
 662: PUSH
 663: LD_INT 50
 665: PUSH
 666: LD_INT 38
 668: PUSH
 669: LD_INT 5
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: LIST
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: PUSH
 683: LD_INT 81
 685: PUSH
 686: LD_INT 97
 688: PUSH
 689: LD_INT 4
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: PUSH
 697: LD_INT 54
 699: PUSH
 700: LD_INT 71
 702: PUSH
 703: LD_INT 3
 705: PUSH
 706: EMPTY
 707: LIST
 708: LIST
 709: LIST
 710: PUSH
 711: LD_INT 81
 713: PUSH
 714: LD_INT 110
 716: PUSH
 717: LD_INT 5
 719: PUSH
 720: EMPTY
 721: LIST
 722: LIST
 723: LIST
 724: PUSH
 725: LD_INT 66
 727: PUSH
 728: LD_INT 82
 730: PUSH
 731: LD_INT 3
 733: PUSH
 734: EMPTY
 735: LIST
 736: LIST
 737: LIST
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: LIST
 743: LIST
 744: PUSH
 745: LD_INT 136
 747: PUSH
 748: LD_INT 20
 750: PUSH
 751: LD_INT 1
 753: PUSH
 754: EMPTY
 755: LIST
 756: LIST
 757: LIST
 758: PUSH
 759: LD_INT 164
 761: PUSH
 762: LD_INT 48
 764: PUSH
 765: LD_INT 1
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: LIST
 772: PUSH
 773: LD_INT 130
 775: PUSH
 776: LD_INT 8
 778: PUSH
 779: LD_INT 1
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PUSH
 787: LD_INT 147
 789: PUSH
 790: LD_INT 37
 792: PUSH
 793: LD_INT 0
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: LIST
 800: PUSH
 801: EMPTY
 802: LIST
 803: LIST
 804: LIST
 805: LIST
 806: PUSH
 807: LD_INT 181
 809: PUSH
 810: LD_INT 103
 812: PUSH
 813: LD_INT 1
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: LIST
 820: PUSH
 821: LD_INT 178
 823: PUSH
 824: LD_INT 72
 826: PUSH
 827: LD_INT 1
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: LIST
 834: PUSH
 835: LD_INT 186
 837: PUSH
 838: LD_INT 112
 840: PUSH
 841: LD_INT 1
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: LIST
 848: PUSH
 849: LD_INT 172
 851: PUSH
 852: LD_INT 82
 854: PUSH
 855: LD_INT 2
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: LIST
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: LIST
 873: LIST
 874: ST_TO_ADDR
// if def_extra_oil_deposits then
 875: LD_EXP 63
 879: IFFALSE 923
// for i in extra_oil_deposits_locations do
 881: LD_ADDR_VAR 0 2
 885: PUSH
 886: LD_EXP 27
 890: PUSH
 891: FOR_IN
 892: IFFALSE 921
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
 894: LD_VAR 0 2
 898: PUSH
 899: LD_INT 1
 901: ARRAY
 902: PPUSH
 903: LD_VAR 0 2
 907: PUSH
 908: LD_INT 2
 910: ARRAY
 911: PPUSH
 912: LD_INT 2
 914: PPUSH
 915: CALL_OW 62
 919: GO 891
 921: POP
 922: POP
// if def_extra_sib_deposits then
 923: LD_EXP 64
 927: IFFALSE 971
// for i in extra_sib_deposits_locations do
 929: LD_ADDR_VAR 0 2
 933: PUSH
 934: LD_EXP 28
 938: PUSH
 939: FOR_IN
 940: IFFALSE 969
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 2
 958: ARRAY
 959: PPUSH
 960: LD_INT 3
 962: PPUSH
 963: CALL_OW 62
 967: GO 939
 969: POP
 970: POP
// end ;
 971: LD_VAR 0 1
 975: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
 976: LD_INT 0
 978: PPUSH
 979: PPUSH
 980: PPUSH
 981: PPUSH
 982: PPUSH
 983: PPUSH
 984: PPUSH
 985: PPUSH
 986: PPUSH
// if Multiplayer then
 987: LD_OWVAR 4
 991: IFFALSE 1055
// begin Game_Type = mp_game_type ;
 993: LD_ADDR_EXP 56
 997: PUSH
 998: LD_OWVAR 6
1002: ST_TO_ADDR
// Your_Side := mp_player_side ;
1003: LD_ADDR_OWVAR 2
1007: PUSH
1008: LD_OWVAR 7
1012: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
1013: LD_ADDR_EXP 18
1017: PUSH
1018: LD_OWVAR 17
1022: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
1023: LD_ADDR_EXP 16
1027: PUSH
1028: LD_OWVAR 15
1032: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
1033: LD_ADDR_EXP 19
1037: PUSH
1038: LD_OWVAR 16
1042: ST_TO_ADDR
// Teams = mp_teams ;
1043: LD_ADDR_EXP 17
1047: PUSH
1048: LD_OWVAR 12
1052: ST_TO_ADDR
// end else
1053: GO 1195
// begin Game_Type = 12 ;
1055: LD_ADDR_EXP 56
1059: PUSH
1060: LD_INT 12
1062: ST_TO_ADDR
// Your_Side = 4 ;
1063: LD_ADDR_OWVAR 2
1067: PUSH
1068: LD_INT 4
1070: ST_TO_ADDR
// Side_Positions = [ 1 , 0 , 0 , 0 , 0 , 0 , 0 , 3 ] ;
1071: LD_ADDR_EXP 18
1075: PUSH
1076: LD_INT 1
1078: PUSH
1079: LD_INT 0
1081: PUSH
1082: LD_INT 0
1084: PUSH
1085: LD_INT 0
1087: PUSH
1088: LD_INT 0
1090: PUSH
1091: LD_INT 0
1093: PUSH
1094: LD_INT 0
1096: PUSH
1097: LD_INT 3
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: LIST
1106: LIST
1107: LIST
1108: LIST
1109: ST_TO_ADDR
// Side_Teams = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
1110: LD_ADDR_EXP 16
1114: PUSH
1115: LD_INT 0
1117: PUSH
1118: LD_INT 0
1120: PUSH
1121: LD_INT 0
1123: PUSH
1124: LD_INT 0
1126: PUSH
1127: LD_INT 0
1129: PUSH
1130: LD_INT 0
1132: PUSH
1133: LD_INT 0
1135: PUSH
1136: LD_INT 0
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: LIST
1148: ST_TO_ADDR
// Side_Nations = [ 3 , 0 , 0 , 0 , 0 , 0 , 0 , 1 ] ;
1149: LD_ADDR_EXP 19
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: LD_INT 0
1159: PUSH
1160: LD_INT 0
1162: PUSH
1163: LD_INT 0
1165: PUSH
1166: LD_INT 0
1168: PUSH
1169: LD_INT 0
1171: PUSH
1172: LD_INT 0
1174: PUSH
1175: LD_INT 1
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: LIST
1186: LIST
1187: ST_TO_ADDR
// Teams = [ ] ;
1188: LD_ADDR_EXP 17
1192: PUSH
1193: EMPTY
1194: ST_TO_ADDR
// end ; for i := 1 to 8 do
1195: LD_ADDR_VAR 0 8
1199: PUSH
1200: DOUBLE
1201: LD_INT 1
1203: DEC
1204: ST_TO_ADDR
1205: LD_INT 8
1207: PUSH
1208: FOR_TO
1209: IFFALSE 1296
// if Multiplayer_GetPlayerIsSpec ( i ) then
1211: LD_VAR 0 8
1215: PPUSH
1216: CALL_OW 530
1220: IFFALSE 1294
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
1222: LD_ADDR_EXP 18
1226: PUSH
1227: LD_EXP 18
1231: PPUSH
1232: LD_VAR 0 8
1236: PPUSH
1237: LD_INT 0
1239: PPUSH
1240: CALL_OW 1
1244: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
1245: LD_ADDR_EXP 17
1249: PUSH
1250: LD_EXP 17
1254: PPUSH
1255: LD_EXP 16
1259: PUSH
1260: LD_VAR 0 8
1264: ARRAY
1265: PPUSH
1266: LD_EXP 17
1270: PUSH
1271: LD_EXP 16
1275: PUSH
1276: LD_VAR 0 8
1280: ARRAY
1281: ARRAY
1282: PUSH
1283: LD_VAR 0 8
1287: DIFF
1288: PPUSH
1289: CALL_OW 1
1293: ST_TO_ADDR
// end ;
1294: GO 1208
1296: POP
1297: POP
// if Multiplayer then
1298: LD_OWVAR 4
1302: IFFALSE 1527
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
1304: LD_ADDR_EXP 58
1308: PUSH
1309: LD_INT 0
1311: PPUSH
1312: CALL_OW 426
1316: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
1317: LD_ADDR_EXP 59
1321: PUSH
1322: LD_INT 1
1324: PPUSH
1325: CALL_OW 426
1329: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
1330: LD_ADDR_EXP 60
1334: PUSH
1335: LD_INT 2
1337: PPUSH
1338: CALL_OW 426
1342: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
1343: LD_ADDR_EXP 61
1347: PUSH
1348: LD_INT 3
1350: PPUSH
1351: CALL_OW 426
1355: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
1356: LD_ADDR_EXP 62
1360: PUSH
1361: LD_INT 4
1363: PPUSH
1364: CALL_OW 426
1368: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
1369: LD_ADDR_EXP 63
1373: PUSH
1374: LD_INT 5
1376: PPUSH
1377: CALL_OW 426
1381: ST_TO_ADDR
// def_extra_sib_deposits = GetMultiplayerSetting ( 6 ) ;
1382: LD_ADDR_EXP 64
1386: PUSH
1387: LD_INT 6
1389: PPUSH
1390: CALL_OW 426
1394: ST_TO_ADDR
// def_base_size = GetMultiplayerSetting ( 7 ) ;
1395: LD_ADDR_EXP 1
1399: PUSH
1400: LD_INT 7
1402: PPUSH
1403: CALL_OW 426
1407: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
1408: LD_ADDR_EXP 65
1412: PUSH
1413: LD_INT 10
1415: PPUSH
1416: CALL_OW 426
1420: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
1421: LD_ADDR_EXP 66
1425: PUSH
1426: LD_INT 11
1428: PPUSH
1429: CALL_OW 426
1433: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
1434: LD_ADDR_EXP 67
1438: PUSH
1439: LD_INT 12
1441: PPUSH
1442: CALL_OW 426
1446: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
1447: LD_ADDR_EXP 69
1451: PUSH
1452: LD_INT 13
1454: PPUSH
1455: CALL_OW 426
1459: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
1460: LD_ADDR_EXP 68
1464: PUSH
1465: LD_INT 14
1467: PPUSH
1468: CALL_OW 426
1472: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
1473: LD_ADDR_EXP 70
1477: PUSH
1478: LD_INT 15
1480: PPUSH
1481: CALL_OW 426
1485: ST_TO_ADDR
// def_west_nations = GetMultiplayerSetting ( 21 ) ;
1486: LD_ADDR_EXP 2
1490: PUSH
1491: LD_INT 21
1493: PPUSH
1494: CALL_OW 426
1498: ST_TO_ADDR
// def_east_nations = GetMultiplayerSetting ( 22 ) ;
1499: LD_ADDR_EXP 3
1503: PUSH
1504: LD_INT 22
1506: PPUSH
1507: CALL_OW 426
1511: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 23 ) ;
1512: LD_ADDR_VAR 0 9
1516: PUSH
1517: LD_INT 23
1519: PPUSH
1520: CALL_OW 426
1524: ST_TO_ADDR
// end else
1525: GO 1667
// begin randomize ;
1527: CALL_OW 10
// def_base_level = 3 ;
1531: LD_ADDR_EXP 58
1535: PUSH
1536: LD_INT 3
1538: ST_TO_ADDR
// def_amount_of_people = 1 ;
1539: LD_ADDR_EXP 59
1543: PUSH
1544: LD_INT 1
1546: ST_TO_ADDR
// def_skill_level = 1 ;
1547: LD_ADDR_EXP 60
1551: PUSH
1552: LD_INT 1
1554: ST_TO_ADDR
// def_starting_resources = 2 ;
1555: LD_ADDR_EXP 61
1559: PUSH
1560: LD_INT 2
1562: ST_TO_ADDR
// def_shipments_density = 1 ;
1563: LD_ADDR_EXP 62
1567: PUSH
1568: LD_INT 1
1570: ST_TO_ADDR
// def_extra_oil_deposits = 1 ;
1571: LD_ADDR_EXP 63
1575: PUSH
1576: LD_INT 1
1578: ST_TO_ADDR
// def_extra_sib_deposits = 1 ;
1579: LD_ADDR_EXP 64
1583: PUSH
1584: LD_INT 1
1586: ST_TO_ADDR
// def_base_size = 2 ;
1587: LD_ADDR_EXP 1
1591: PUSH
1592: LD_INT 2
1594: ST_TO_ADDR
// def_shared_vision = 1 ;
1595: LD_ADDR_EXP 65
1599: PUSH
1600: LD_INT 1
1602: ST_TO_ADDR
// def_morale_flags = 1 ;
1603: LD_ADDR_EXP 66
1607: PUSH
1608: LD_INT 1
1610: ST_TO_ADDR
// def_siberite_detection = 1 ;
1611: LD_ADDR_EXP 67
1615: PUSH
1616: LD_INT 1
1618: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
1619: LD_ADDR_EXP 69
1623: PUSH
1624: LD_INT 3
1626: ST_TO_ADDR
// def_people_respawning = 2 ;
1627: LD_ADDR_EXP 68
1631: PUSH
1632: LD_INT 2
1634: ST_TO_ADDR
// def_siberite_bomb = 0 ;
1635: LD_ADDR_EXP 70
1639: PUSH
1640: LD_INT 0
1642: ST_TO_ADDR
// def_west_nations = 0 ;
1643: LD_ADDR_EXP 2
1647: PUSH
1648: LD_INT 0
1650: ST_TO_ADDR
// def_east_nations = 2 ;
1651: LD_ADDR_EXP 3
1655: PUSH
1656: LD_INT 2
1658: ST_TO_ADDR
// tech_level = 4 ;
1659: LD_ADDR_VAR 0 9
1663: PUSH
1664: LD_INT 4
1666: ST_TO_ADDR
// end ; InitGameRules ;
1667: CALL 15912 0 0
// if def_game_rules = 0 then
1671: LD_EXP 57
1675: PUSH
1676: LD_INT 0
1678: EQUAL
1679: IFFALSE 1706
// begin if isSGUI then
1681: LD_OWVAR 83
1685: IFFALSE 1693
// setMpTechs ( ) else
1687: CALL 19362 0 0
1691: GO 1706
// begin SetMpTechLevel ( tech_level + 1 ) ;
1693: LD_VAR 0 9
1697: PUSH
1698: LD_INT 1
1700: PLUS
1701: PPUSH
1702: CALL 19509 0 1
// end ; end ; if not def_base_level then
1706: LD_EXP 58
1710: NOT
1711: IFFALSE 1721
// def_base_size := 0 ;
1713: LD_ADDR_EXP 1
1717: PUSH
1718: LD_INT 0
1720: ST_TO_ADDR
// is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1721: LD_ADDR_EXP 4
1725: PUSH
1726: LD_INT 0
1728: PUSH
1729: LD_INT 1
1731: PUSH
1732: LD_INT 1
1734: PUSH
1735: LD_INT 1
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: PUSH
1744: LD_EXP 58
1748: PUSH
1749: LD_INT 1
1751: PLUS
1752: ARRAY
1753: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
1754: LD_ADDR_EXP 5
1758: PUSH
1759: LD_INT 0
1761: PUSH
1762: LD_INT 0
1764: PUSH
1765: LD_INT 2
1767: PUSH
1768: LD_INT 4
1770: PUSH
1771: EMPTY
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: PUSH
1777: LD_EXP 58
1781: PUSH
1782: LD_INT 1
1784: PLUS
1785: ARRAY
1786: ST_TO_ADDR
// number_of_people = [ 5 , 7 , 9 , 11 ] [ def_amount_of_people + 1 ] ;
1787: LD_ADDR_EXP 6
1791: PUSH
1792: LD_INT 5
1794: PUSH
1795: LD_INT 7
1797: PUSH
1798: LD_INT 9
1800: PUSH
1801: LD_INT 11
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: PUSH
1810: LD_EXP 59
1814: PUSH
1815: LD_INT 1
1817: PLUS
1818: ARRAY
1819: ST_TO_ADDR
// skill_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1820: LD_ADDR_EXP 7
1824: PUSH
1825: LD_INT 2
1827: PUSH
1828: LD_INT 3
1830: PUSH
1831: LD_INT 4
1833: PUSH
1834: LD_INT 5
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: LIST
1841: LIST
1842: PUSH
1843: LD_EXP 60
1847: PUSH
1848: LD_INT 1
1850: PLUS
1851: ARRAY
1852: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1853: LD_ADDR_EXP 9
1857: PUSH
1858: LD_INT 0
1860: PUSH
1861: LD_INT 0
1863: PUSH
1864: LD_INT 0
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: LIST
1871: PUSH
1872: LD_INT 30
1874: PUSH
1875: LD_INT 0
1877: PUSH
1878: LD_INT 0
1880: PUSH
1881: EMPTY
1882: LIST
1883: LIST
1884: LIST
1885: PUSH
1886: LD_INT 50
1888: PUSH
1889: LD_INT 20
1891: PUSH
1892: LD_INT 0
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: LIST
1899: PUSH
1900: LD_INT 80
1902: PUSH
1903: LD_INT 40
1905: PUSH
1906: LD_INT 20
1908: PUSH
1909: EMPTY
1910: LIST
1911: LIST
1912: LIST
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: PUSH
1920: LD_EXP 61
1924: PUSH
1925: LD_INT 1
1927: PLUS
1928: ARRAY
1929: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1930: LD_ADDR_EXP 8
1934: PUSH
1935: LD_INT 10
1937: PUSH
1938: EMPTY
1939: LIST
1940: PUSH
1941: LD_INT 7
1943: PUSH
1944: LD_INT 14
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: PUSH
1951: LD_INT 6
1953: PUSH
1954: LD_INT 12
1956: PUSH
1957: LD_INT 18
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: LIST
1964: PUSH
1965: LD_INT 5
1967: PUSH
1968: LD_INT 10
1970: PUSH
1971: LD_INT 15
1973: PUSH
1974: LD_INT 20
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: PUSH
1989: LD_EXP 61
1993: PUSH
1994: LD_INT 1
1996: PLUS
1997: ARRAY
1998: ST_TO_ADDR
// shipments_density = [ 18 , 25 , 35 ] [ def_shipments_density + 1 ] ;
1999: LD_ADDR_EXP 10
2003: PUSH
2004: LD_INT 18
2006: PUSH
2007: LD_INT 25
2009: PUSH
2010: LD_INT 35
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: LIST
2017: PUSH
2018: LD_EXP 62
2022: PUSH
2023: LD_INT 1
2025: PLUS
2026: ARRAY
2027: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
2028: LD_ADDR_EXP 12
2032: PUSH
2033: LD_INT 0
2035: PUSH
2036: LD_INT 3
2038: PUSH
2039: LD_INT 6
2041: PUSH
2042: LD_INT 9
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: PUSH
2051: LD_EXP 69
2055: PUSH
2056: LD_INT 1
2058: PLUS
2059: ARRAY
2060: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
2061: LD_ADDR_EXP 13
2065: PUSH
2066: LD_INT 0
2068: PUSH
2069: LD_INT 8400
2071: PUSH
2072: LD_INT 1750
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: LIST
2079: PUSH
2080: LD_EXP 68
2084: PUSH
2085: LD_INT 1
2087: PLUS
2088: ARRAY
2089: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
2090: LD_ADDR_EXP 14
2094: PUSH
2095: LD_INT 0
2097: PUSH
2098: LD_INT 21000
2100: PUSH
2101: LD_INT 4200
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: LIST
2108: PUSH
2109: LD_EXP 68
2113: PUSH
2114: LD_INT 1
2116: PLUS
2117: ARRAY
2118: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
2119: LD_ADDR_EXP 15
2123: PUSH
2124: LD_INT 0
2126: PUSH
2127: LD_INT 1
2129: PUSH
2130: LD_INT 63000
2132: PUSH
2133: LD_INT 126000
2135: PUSH
2136: LD_INT 189000
2138: PUSH
2139: LD_INT 252000
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: PUSH
2150: LD_EXP 70
2154: PUSH
2155: LD_INT 1
2157: PLUS
2158: ARRAY
2159: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
2160: LD_ADDR_EXP 11
2164: PUSH
2165: LD_INT 1
2167: NEG
2168: PUSH
2169: LD_INT 350
2171: PUSH
2172: LD_INT 700
2174: PUSH
2175: LD_INT 1400
2177: PUSH
2178: LD_INT 0
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: LIST
2187: PUSH
2188: LD_EXP 66
2192: PUSH
2193: LD_INT 1
2195: PLUS
2196: ARRAY
2197: ST_TO_ADDR
// battle_flags_id = [ ] ;
2198: LD_ADDR_EXP 29
2202: PUSH
2203: EMPTY
2204: ST_TO_ADDR
// if not def_builduptime then
2205: LD_EXP 71
2209: NOT
2210: IFFALSE 2215
// disable ( 600 ) ;
2212: LD_INT 600
2214: DISABLE_MARKED
// end ;
2215: LD_VAR 0 1
2219: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2220: LD_INT 0
2222: PPUSH
2223: PPUSH
2224: PPUSH
// Team_Game := 1 ;
2225: LD_ADDR_EXP 20
2229: PUSH
2230: LD_INT 1
2232: ST_TO_ADDR
// if not Team_Game then
2233: LD_EXP 20
2237: NOT
2238: IFFALSE 2336
// begin for i = 1 to 8 do
2240: LD_ADDR_VAR 0 2
2244: PUSH
2245: DOUBLE
2246: LD_INT 1
2248: DEC
2249: ST_TO_ADDR
2250: LD_INT 8
2252: PUSH
2253: FOR_TO
2254: IFFALSE 2332
// for j = 1 to 8 do
2256: LD_ADDR_VAR 0 3
2260: PUSH
2261: DOUBLE
2262: LD_INT 1
2264: DEC
2265: ST_TO_ADDR
2266: LD_INT 8
2268: PUSH
2269: FOR_TO
2270: IFFALSE 2328
// if i <> j then
2272: LD_VAR 0 2
2276: PUSH
2277: LD_VAR 0 3
2281: NONEQUAL
2282: IFFALSE 2306
// SetAttitude ( i , j , att_neutral , true ) else
2284: LD_VAR 0 2
2288: PPUSH
2289: LD_VAR 0 3
2293: PPUSH
2294: LD_INT 0
2296: PPUSH
2297: LD_INT 1
2299: PPUSH
2300: CALL_OW 80
2304: GO 2326
// SetAttitude ( i , j , att_friend , true ) ;
2306: LD_VAR 0 2
2310: PPUSH
2311: LD_VAR 0 3
2315: PPUSH
2316: LD_INT 1
2318: PPUSH
2319: LD_INT 1
2321: PPUSH
2322: CALL_OW 80
2326: GO 2269
2328: POP
2329: POP
2330: GO 2253
2332: POP
2333: POP
// end else
2334: GO 2511
// begin if def_shared_vision then
2336: LD_EXP 65
2340: IFFALSE 2405
// begin for i in Teams do
2342: LD_ADDR_VAR 0 2
2346: PUSH
2347: LD_EXP 17
2351: PUSH
2352: FOR_IN
2353: IFFALSE 2403
// for j = 2 to i do
2355: LD_ADDR_VAR 0 3
2359: PUSH
2360: DOUBLE
2361: LD_INT 2
2363: DEC
2364: ST_TO_ADDR
2365: LD_VAR 0 2
2369: PUSH
2370: FOR_TO
2371: IFFALSE 2399
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2373: LD_VAR 0 2
2377: PUSH
2378: LD_VAR 0 3
2382: ARRAY
2383: PPUSH
2384: LD_VAR 0 2
2388: PUSH
2389: LD_INT 1
2391: ARRAY
2392: PPUSH
2393: CALL_OW 343
2397: GO 2370
2399: POP
2400: POP
2401: GO 2352
2403: POP
2404: POP
// end ; for i = 1 to 8 do
2405: LD_ADDR_VAR 0 2
2409: PUSH
2410: DOUBLE
2411: LD_INT 1
2413: DEC
2414: ST_TO_ADDR
2415: LD_INT 8
2417: PUSH
2418: FOR_TO
2419: IFFALSE 2509
// for j = 1 to 8 do
2421: LD_ADDR_VAR 0 3
2425: PUSH
2426: DOUBLE
2427: LD_INT 1
2429: DEC
2430: ST_TO_ADDR
2431: LD_INT 8
2433: PUSH
2434: FOR_TO
2435: IFFALSE 2505
// if Side_Teams [ i ] = Side_Teams [ j ] then
2437: LD_EXP 16
2441: PUSH
2442: LD_VAR 0 2
2446: ARRAY
2447: PUSH
2448: LD_EXP 16
2452: PUSH
2453: LD_VAR 0 3
2457: ARRAY
2458: EQUAL
2459: IFFALSE 2483
// SetAttitude ( i , j , att_friend , true ) else
2461: LD_VAR 0 2
2465: PPUSH
2466: LD_VAR 0 3
2470: PPUSH
2471: LD_INT 1
2473: PPUSH
2474: LD_INT 1
2476: PPUSH
2477: CALL_OW 80
2481: GO 2503
// SetAttitude ( i , j , att_enemy , true ) ;
2483: LD_VAR 0 2
2487: PPUSH
2488: LD_VAR 0 3
2492: PPUSH
2493: LD_INT 2
2495: PPUSH
2496: LD_INT 1
2498: PPUSH
2499: CALL_OW 80
2503: GO 2434
2505: POP
2506: POP
2507: GO 2418
2509: POP
2510: POP
// end ; end ;
2511: LD_VAR 0 1
2515: RET
// function prepare_people ( count , cl , x , y , r ) ; var i , j , un ; begin
2516: LD_INT 0
2518: PPUSH
2519: PPUSH
2520: PPUSH
2521: PPUSH
// result := [ ] ;
2522: LD_ADDR_VAR 0 6
2526: PUSH
2527: EMPTY
2528: ST_TO_ADDR
// for i := 1 to count do
2529: LD_ADDR_VAR 0 7
2533: PUSH
2534: DOUBLE
2535: LD_INT 1
2537: DEC
2538: ST_TO_ADDR
2539: LD_VAR 0 1
2543: PUSH
2544: FOR_TO
2545: IFFALSE 2941
// begin uc_direction := Rand ( 0 , 5 ) ;
2547: LD_ADDR_OWVAR 24
2551: PUSH
2552: LD_INT 0
2554: PPUSH
2555: LD_INT 5
2557: PPUSH
2558: CALL_OW 12
2562: ST_TO_ADDR
// if commander then
2563: LD_LOC 1
2567: IFFALSE 2676
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2569: LD_ADDR_OWVAR 26
2573: PUSH
2574: LD_OWVAR 19
2578: PUSH
2579: LD_OWVAR 20
2583: ARRAY
2584: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2585: LD_INT 1
2587: PPUSH
2588: LD_INT 2
2590: PPUSH
2591: CALL_OW 12
2595: PPUSH
2596: LD_VAR 0 2
2600: PPUSH
2601: LD_EXP 7
2605: PUSH
2606: LD_INT 2
2608: PLUS
2609: PPUSH
2610: CALL_OW 380
// hc_importance := 105 ;
2614: LD_ADDR_OWVAR 32
2618: PUSH
2619: LD_INT 105
2621: ST_TO_ADDR
// commander := false ;
2622: LD_ADDR_LOC 1
2626: PUSH
2627: LD_INT 0
2629: ST_TO_ADDR
// if Multiplayer then
2630: LD_OWVAR 4
2634: IFFALSE 2674
// begin hc_gallery := MULTIAVATARS ;
2636: LD_ADDR_OWVAR 33
2640: PUSH
2641: LD_STRING MULTIAVATARS
2643: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2644: LD_ADDR_OWVAR 34
2648: PUSH
2649: LD_OWVAR 20
2653: PPUSH
2654: CALL_OW 525
2658: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2659: LD_ADDR_OWVAR 27
2663: PUSH
2664: LD_OWVAR 20
2668: PPUSH
2669: CALL_OW 526
2673: ST_TO_ADDR
// end ; end else
2674: GO 2739
// begin hc_name :=  ;
2676: LD_ADDR_OWVAR 26
2680: PUSH
2681: LD_STRING 
2683: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2684: LD_INT 1
2686: PPUSH
2687: LD_INT 2
2689: PPUSH
2690: CALL_OW 12
2694: PPUSH
2695: LD_VAR 0 2
2699: PPUSH
2700: LD_EXP 7
2704: PPUSH
2705: CALL_OW 380
// hc_importance := 0 ;
2709: LD_ADDR_OWVAR 32
2713: PUSH
2714: LD_INT 0
2716: ST_TO_ADDR
// if Multiplayer then
2717: LD_OWVAR 4
2721: IFFALSE 2739
// begin hc_gallery :=  ;
2723: LD_ADDR_OWVAR 33
2727: PUSH
2728: LD_STRING 
2730: ST_TO_ADDR
// hc_face_number := 0 ;
2731: LD_ADDR_OWVAR 34
2735: PUSH
2736: LD_INT 0
2738: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2739: LD_ADDR_VAR 0 9
2743: PUSH
2744: CALL_OW 44
2748: ST_TO_ADDR
// if global_defined then
2749: LD_LOC 3
2753: IFFALSE 2893
// begin if ( cl = class_soldier ) then
2755: LD_VAR 0 2
2759: PUSH
2760: LD_INT 1
2762: EQUAL
2763: IFFALSE 2783
// j := i + soldiers_created else
2765: LD_ADDR_VAR 0 8
2769: PUSH
2770: LD_VAR 0 7
2774: PUSH
2775: LD_LOC 4
2779: PLUS
2780: ST_TO_ADDR
2781: GO 2793
// j := i ;
2783: LD_ADDR_VAR 0 8
2787: PUSH
2788: LD_VAR 0 7
2792: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2793: LD_LOC 2
2797: PUSH
2798: LD_VAR 0 2
2802: ARRAY
2803: PUSH
2804: LD_VAR 0 8
2808: ARRAY
2809: PPUSH
2810: LD_VAR 0 9
2814: PPUSH
2815: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2819: LD_VAR 0 9
2823: PPUSH
2824: LD_INT 2
2826: PPUSH
2827: LD_LOC 2
2831: PUSH
2832: LD_VAR 0 2
2836: ARRAY
2837: PUSH
2838: LD_VAR 0 8
2842: ARRAY
2843: PPUSH
2844: LD_INT 2
2846: PPUSH
2847: CALL_OW 260
2851: PPUSH
2852: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2856: LD_VAR 0 9
2860: PPUSH
2861: LD_INT 1
2863: PPUSH
2864: LD_LOC 2
2868: PUSH
2869: LD_VAR 0 2
2873: ARRAY
2874: PUSH
2875: LD_VAR 0 8
2879: ARRAY
2880: PPUSH
2881: LD_INT 1
2883: PPUSH
2884: CALL_OW 260
2888: PPUSH
2889: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2893: LD_VAR 0 9
2897: PPUSH
2898: LD_VAR 0 3
2902: PPUSH
2903: LD_VAR 0 4
2907: PPUSH
2908: LD_VAR 0 5
2912: PPUSH
2913: LD_INT 0
2915: PPUSH
2916: CALL_OW 50
// result := result ^ [ un ] ;
2920: LD_ADDR_VAR 0 6
2924: PUSH
2925: LD_VAR 0 6
2929: PUSH
2930: LD_VAR 0 9
2934: PUSH
2935: EMPTY
2936: LIST
2937: ADD
2938: ST_TO_ADDR
// end ;
2939: GO 2544
2941: POP
2942: POP
// if not global_defined then
2943: LD_LOC 3
2947: NOT
2948: IFFALSE 3026
// if ( global_units >= cl ) then
2950: LD_LOC 2
2954: PUSH
2955: LD_VAR 0 2
2959: GREATEREQUAL
2960: IFFALSE 3001
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2962: LD_ADDR_LOC 2
2966: PUSH
2967: LD_LOC 2
2971: PPUSH
2972: LD_VAR 0 2
2976: PPUSH
2977: LD_LOC 2
2981: PUSH
2982: LD_VAR 0 2
2986: ARRAY
2987: PUSH
2988: LD_VAR 0 6
2992: ADD
2993: PPUSH
2994: CALL_OW 1
2998: ST_TO_ADDR
2999: GO 3026
// global_units := Replace ( global_units , cl , result ) ;
3001: LD_ADDR_LOC 2
3005: PUSH
3006: LD_LOC 2
3010: PPUSH
3011: LD_VAR 0 2
3015: PPUSH
3016: LD_VAR 0 6
3020: PPUSH
3021: CALL_OW 1
3025: ST_TO_ADDR
// end ;
3026: LD_VAR 0 6
3030: RET
// function prepare_side ( side , pos , nation ) ; var x , y , dir , i , r , sol , br , dep ; begin
3031: LD_INT 0
3033: PPUSH
3034: PPUSH
3035: PPUSH
3036: PPUSH
3037: PPUSH
3038: PPUSH
3039: PPUSH
3040: PPUSH
3041: PPUSH
// uc_nation := nation ;
3042: LD_ADDR_OWVAR 21
3046: PUSH
3047: LD_VAR 0 3
3051: ST_TO_ADDR
// uc_side := side ;
3052: LD_ADDR_OWVAR 20
3056: PUSH
3057: LD_VAR 0 1
3061: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3062: LD_ADDR_VAR 0 5
3066: PUSH
3067: LD_EXP 22
3071: PUSH
3072: LD_VAR 0 2
3076: ARRAY
3077: PUSH
3078: LD_INT 1
3080: ARRAY
3081: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3082: LD_ADDR_VAR 0 6
3086: PUSH
3087: LD_EXP 22
3091: PUSH
3092: LD_VAR 0 2
3096: ARRAY
3097: PUSH
3098: LD_INT 2
3100: ARRAY
3101: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3102: LD_ADDR_VAR 0 7
3106: PUSH
3107: LD_EXP 22
3111: PUSH
3112: LD_VAR 0 2
3116: ARRAY
3117: PUSH
3118: LD_INT 3
3120: ARRAY
3121: ST_TO_ADDR
// if is_depot then
3122: LD_EXP 4
3126: IFFALSE 3259
// begin bc_type = b_depot ;
3128: LD_ADDR_OWVAR 42
3132: PUSH
3133: LD_INT 0
3135: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3136: LD_ADDR_VAR 0 12
3140: PUSH
3141: LD_VAR 0 5
3145: PPUSH
3146: LD_VAR 0 6
3150: PPUSH
3151: LD_VAR 0 7
3155: PPUSH
3156: CALL_OW 47
3160: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3161: LD_VAR 0 12
3165: PPUSH
3166: LD_STRING @
3168: PUSH
3169: LD_VAR 0 1
3173: STR
3174: PPUSH
3175: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3179: LD_VAR 0 12
3183: PPUSH
3184: CALL_OW 274
3188: PPUSH
3189: LD_INT 1
3191: PPUSH
3192: LD_EXP 9
3196: PUSH
3197: LD_INT 1
3199: ARRAY
3200: PPUSH
3201: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3205: LD_VAR 0 12
3209: PPUSH
3210: CALL_OW 274
3214: PPUSH
3215: LD_INT 2
3217: PPUSH
3218: LD_EXP 9
3222: PUSH
3223: LD_INT 2
3225: ARRAY
3226: PPUSH
3227: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3231: LD_VAR 0 12
3235: PPUSH
3236: CALL_OW 274
3240: PPUSH
3241: LD_INT 3
3243: PPUSH
3244: LD_EXP 9
3248: PUSH
3249: LD_INT 3
3251: ARRAY
3252: PPUSH
3253: CALL_OW 277
// end else
3257: GO 3403
// begin for i := 1 to 3 do
3259: LD_ADDR_VAR 0 8
3263: PUSH
3264: DOUBLE
3265: LD_INT 1
3267: DEC
3268: ST_TO_ADDR
3269: LD_INT 3
3271: PUSH
3272: FOR_TO
3273: IFFALSE 3401
// begin r := starting_resources [ i ] ;
3275: LD_ADDR_VAR 0 9
3279: PUSH
3280: LD_EXP 9
3284: PUSH
3285: LD_VAR 0 8
3289: ARRAY
3290: ST_TO_ADDR
// while r >= 10 do
3291: LD_VAR 0 9
3295: PUSH
3296: LD_INT 10
3298: GREATEREQUAL
3299: IFFALSE 3399
// if r > 50 then
3301: LD_VAR 0 9
3305: PUSH
3306: LD_INT 50
3308: GREATER
3309: IFFALSE 3355
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3311: LD_VAR 0 8
3315: PPUSH
3316: LD_INT 5
3318: PPUSH
3319: LD_VAR 0 5
3323: PPUSH
3324: LD_VAR 0 6
3328: PPUSH
3329: LD_INT 4
3331: PPUSH
3332: LD_INT 0
3334: PPUSH
3335: CALL_OW 60
// r := r - 50 ;
3339: LD_ADDR_VAR 0 9
3343: PUSH
3344: LD_VAR 0 9
3348: PUSH
3349: LD_INT 50
3351: MINUS
3352: ST_TO_ADDR
// end else
3353: GO 3397
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3355: LD_VAR 0 8
3359: PPUSH
3360: LD_VAR 0 9
3364: PUSH
3365: LD_INT 10
3367: DIV
3368: PPUSH
3369: LD_VAR 0 5
3373: PPUSH
3374: LD_VAR 0 6
3378: PPUSH
3379: LD_INT 4
3381: PPUSH
3382: LD_INT 0
3384: PPUSH
3385: CALL_OW 60
// r := 0 ;
3389: LD_ADDR_VAR 0 9
3393: PUSH
3394: LD_INT 0
3396: ST_TO_ADDR
// end ;
3397: GO 3291
// end ;
3399: GO 3272
3401: POP
3402: POP
// end ; if def_base_size > 0 then
3403: LD_EXP 1
3407: PUSH
3408: LD_INT 0
3410: GREATER
3411: IFFALSE 3486
// begin bc_kind1 := b_lab_basic ;
3413: LD_ADDR_OWVAR 44
3417: PUSH
3418: LD_INT 9
3420: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
3421: LD_ADDR_OWVAR 45
3425: PUSH
3426: LD_INT 9
3428: ST_TO_ADDR
// bc_type := b_lab ;
3429: LD_ADDR_OWVAR 42
3433: PUSH
3434: LD_INT 6
3436: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( labs_def [ pos ] [ 1 ] , labs_def [ pos ] [ 2 ] , labs_def [ pos ] [ 3 ] ) ;
3437: LD_EXP 24
3441: PUSH
3442: LD_VAR 0 2
3446: ARRAY
3447: PUSH
3448: LD_INT 1
3450: ARRAY
3451: PPUSH
3452: LD_EXP 24
3456: PUSH
3457: LD_VAR 0 2
3461: ARRAY
3462: PUSH
3463: LD_INT 2
3465: ARRAY
3466: PPUSH
3467: LD_EXP 24
3471: PUSH
3472: LD_VAR 0 2
3476: ARRAY
3477: PUSH
3478: LD_INT 3
3480: ARRAY
3481: PPUSH
3482: CALL_OW 47
// end ; if def_base_size > 1 then
3486: LD_EXP 1
3490: PUSH
3491: LD_INT 1
3493: GREATER
3494: IFFALSE 3553
// begin bc_type := b_workshop ;
3496: LD_ADDR_OWVAR 42
3500: PUSH
3501: LD_INT 2
3503: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( factory_def [ pos ] [ 1 ] , factory_def [ pos ] [ 2 ] , factory_def [ pos ] [ 3 ] ) ;
3504: LD_EXP 25
3508: PUSH
3509: LD_VAR 0 2
3513: ARRAY
3514: PUSH
3515: LD_INT 1
3517: ARRAY
3518: PPUSH
3519: LD_EXP 25
3523: PUSH
3524: LD_VAR 0 2
3528: ARRAY
3529: PUSH
3530: LD_INT 2
3532: ARRAY
3533: PPUSH
3534: LD_EXP 25
3538: PUSH
3539: LD_VAR 0 2
3543: ARRAY
3544: PUSH
3545: LD_INT 3
3547: ARRAY
3548: PPUSH
3549: CALL_OW 47
// end ; for r in starting_crates do
3553: LD_ADDR_VAR 0 9
3557: PUSH
3558: LD_EXP 8
3562: PUSH
3563: FOR_IN
3564: IFFALSE 3596
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3566: LD_INT 1
3568: PPUSH
3569: LD_INT 5
3571: PPUSH
3572: LD_VAR 0 5
3576: PPUSH
3577: LD_VAR 0 6
3581: PPUSH
3582: LD_VAR 0 9
3586: PPUSH
3587: LD_INT 0
3589: PPUSH
3590: CALL_OW 60
3594: GO 3563
3596: POP
3597: POP
// if def_morale_flags then
3598: LD_EXP 66
3602: IFFALSE 3741
// begin x := start_def [ pos ] [ 1 ] ;
3604: LD_ADDR_VAR 0 5
3608: PUSH
3609: LD_EXP 26
3613: PUSH
3614: LD_VAR 0 2
3618: ARRAY
3619: PUSH
3620: LD_INT 1
3622: ARRAY
3623: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3624: LD_ADDR_VAR 0 6
3628: PUSH
3629: LD_EXP 26
3633: PUSH
3634: LD_VAR 0 2
3638: ARRAY
3639: PUSH
3640: LD_INT 2
3642: ARRAY
3643: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3644: LD_VAR 0 5
3648: PPUSH
3649: LD_VAR 0 6
3653: PPUSH
3654: LD_INT 12
3656: PPUSH
3657: LD_INT 2
3659: PPUSH
3660: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3664: LD_ADDR_EXP 29
3668: PUSH
3669: LD_EXP 29
3673: PUSH
3674: LD_VAR 0 1
3678: PPUSH
3679: LD_VAR 0 5
3683: PPUSH
3684: LD_VAR 0 6
3688: PPUSH
3689: LD_INT 1
3691: PUSH
3692: LD_INT 100
3694: PUSH
3695: EMPTY
3696: LIST
3697: LIST
3698: PUSH
3699: LD_INT 2
3701: PUSH
3702: LD_INT 50
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: PUSH
3709: LD_INT 3
3711: PUSH
3712: LD_INT 20
3714: PUSH
3715: EMPTY
3716: LIST
3717: LIST
3718: PUSH
3719: LD_INT 20
3721: PUSH
3722: LD_INT 100
3724: PUSH
3725: EMPTY
3726: LIST
3727: LIST
3728: PUSH
3729: EMPTY
3730: LIST
3731: LIST
3732: LIST
3733: LIST
3734: PPUSH
3735: CALL_OW 418
3739: ADD
3740: ST_TO_ADDR
// end ; commander := true ;
3741: LD_ADDR_LOC 1
3745: PUSH
3746: LD_INT 1
3748: ST_TO_ADDR
// soldiers_created := 0 ;
3749: LD_ADDR_LOC 4
3753: PUSH
3754: LD_INT 0
3756: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3757: LD_ADDR_VAR 0 8
3761: PUSH
3762: DOUBLE
3763: LD_INT 1
3765: DEC
3766: ST_TO_ADDR
3767: LD_EXP 5
3771: PUSH
3772: FOR_TO
3773: IFFALSE 4015
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3775: LD_ADDR_VAR 0 5
3779: PUSH
3780: LD_EXP 23
3784: PUSH
3785: LD_VAR 0 2
3789: ARRAY
3790: PUSH
3791: LD_VAR 0 8
3795: ARRAY
3796: PUSH
3797: LD_INT 1
3799: ARRAY
3800: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3801: LD_ADDR_VAR 0 6
3805: PUSH
3806: LD_EXP 23
3810: PUSH
3811: LD_VAR 0 2
3815: ARRAY
3816: PUSH
3817: LD_VAR 0 8
3821: ARRAY
3822: PUSH
3823: LD_INT 2
3825: ARRAY
3826: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3827: LD_ADDR_VAR 0 7
3831: PUSH
3832: LD_EXP 23
3836: PUSH
3837: LD_VAR 0 2
3841: ARRAY
3842: PUSH
3843: LD_VAR 0 8
3847: ARRAY
3848: PUSH
3849: LD_INT 3
3851: ARRAY
3852: ST_TO_ADDR
// if i < 4 then
3853: LD_VAR 0 8
3857: PUSH
3858: LD_INT 4
3860: LESS
3861: IFFALSE 3873
// bc_type := b_breastwork else
3863: LD_ADDR_OWVAR 42
3867: PUSH
3868: LD_INT 31
3870: ST_TO_ADDR
3871: GO 3881
// bc_type := b_armoury ;
3873: LD_ADDR_OWVAR 42
3877: PUSH
3878: LD_INT 4
3880: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3881: LD_ADDR_VAR 0 11
3885: PUSH
3886: LD_VAR 0 5
3890: PPUSH
3891: LD_VAR 0 6
3895: PPUSH
3896: LD_VAR 0 7
3900: PPUSH
3901: CALL_OW 47
3905: ST_TO_ADDR
// x := ShiftX ( x , dir , 2 ) ;
3906: LD_ADDR_VAR 0 5
3910: PUSH
3911: LD_VAR 0 5
3915: PPUSH
3916: LD_VAR 0 7
3920: PPUSH
3921: LD_INT 2
3923: PPUSH
3924: CALL_OW 272
3928: ST_TO_ADDR
// y := ShiftY ( y , dir , 2 ) ;
3929: LD_ADDR_VAR 0 6
3933: PUSH
3934: LD_VAR 0 6
3938: PPUSH
3939: LD_VAR 0 7
3943: PPUSH
3944: LD_INT 2
3946: PPUSH
3947: CALL_OW 273
3951: ST_TO_ADDR
// sol := prepare_people ( 1 , class_soldier , x , y , 0 ) [ 1 ] ;
3952: LD_ADDR_VAR 0 10
3956: PUSH
3957: LD_INT 1
3959: PPUSH
3960: LD_INT 1
3962: PPUSH
3963: LD_VAR 0 5
3967: PPUSH
3968: LD_VAR 0 6
3972: PPUSH
3973: LD_INT 0
3975: PPUSH
3976: CALL 2516 0 5
3980: PUSH
3981: LD_INT 1
3983: ARRAY
3984: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
3985: LD_ADDR_LOC 4
3989: PUSH
3990: LD_LOC 4
3994: PUSH
3995: LD_INT 1
3997: PLUS
3998: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
3999: LD_VAR 0 10
4003: PPUSH
4004: LD_VAR 0 11
4008: PPUSH
4009: CALL_OW 120
// end ;
4013: GO 3772
4015: POP
4016: POP
// x := start_def [ pos ] [ 1 ] ;
4017: LD_ADDR_VAR 0 5
4021: PUSH
4022: LD_EXP 26
4026: PUSH
4027: LD_VAR 0 2
4031: ARRAY
4032: PUSH
4033: LD_INT 1
4035: ARRAY
4036: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4037: LD_ADDR_VAR 0 6
4041: PUSH
4042: LD_EXP 26
4046: PUSH
4047: LD_VAR 0 2
4051: ARRAY
4052: PUSH
4053: LD_INT 2
4055: ARRAY
4056: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 ) ;
4057: LD_LOC 8
4061: PUSH
4062: LD_EXP 5
4066: MINUS
4067: PPUSH
4068: LD_INT 1
4070: PPUSH
4071: LD_VAR 0 5
4075: PPUSH
4076: LD_VAR 0 6
4080: PPUSH
4081: LD_INT 5
4083: PPUSH
4084: CALL 2516 0 5
// prepare_people ( neng , class_engineer , x , y , 5 ) ;
4088: LD_LOC 5
4092: PPUSH
4093: LD_INT 2
4095: PPUSH
4096: LD_VAR 0 5
4100: PPUSH
4101: LD_VAR 0 6
4105: PPUSH
4106: LD_INT 5
4108: PPUSH
4109: CALL 2516 0 5
// prepare_people ( nmech , class_mechanic , x , y , 5 ) ;
4113: LD_LOC 7
4117: PPUSH
4118: LD_INT 3
4120: PPUSH
4121: LD_VAR 0 5
4125: PPUSH
4126: LD_VAR 0 6
4130: PPUSH
4131: LD_INT 5
4133: PPUSH
4134: CALL 2516 0 5
// prepare_people ( nsci , class_scientistic , x , y , 5 ) ;
4138: LD_LOC 6
4142: PPUSH
4143: LD_INT 4
4145: PPUSH
4146: LD_VAR 0 5
4150: PPUSH
4151: LD_VAR 0 6
4155: PPUSH
4156: LD_INT 5
4158: PPUSH
4159: CALL 2516 0 5
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4163: LD_EXP 67
4167: PUSH
4168: LD_INT 20
4170: PPUSH
4171: LD_VAR 0 1
4175: PPUSH
4176: CALL_OW 321
4180: PUSH
4181: LD_INT 1
4183: EQUAL
4184: AND
4185: IFFALSE 4202
// SetTech ( tech_SibDet , side , state_researched ) ;
4187: LD_INT 20
4189: PPUSH
4190: LD_VAR 0 1
4194: PPUSH
4195: LD_INT 2
4197: PPUSH
4198: CALL_OW 322
// if def_siberite_bomb = 1 then
4202: LD_EXP 70
4206: PUSH
4207: LD_INT 1
4209: EQUAL
4210: IFFALSE 4244
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4212: LD_INT 25
4214: PPUSH
4215: LD_VAR 0 1
4219: PPUSH
4220: LD_INT 1
4222: PPUSH
4223: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4227: LD_INT 73
4229: PPUSH
4230: LD_VAR 0 1
4234: PPUSH
4235: LD_INT 1
4237: PPUSH
4238: CALL_OW 322
// end else
4242: GO 4274
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4244: LD_INT 25
4246: PPUSH
4247: LD_VAR 0 1
4251: PPUSH
4252: LD_INT 0
4254: PPUSH
4255: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4259: LD_INT 73
4261: PPUSH
4262: LD_VAR 0 1
4266: PPUSH
4267: LD_INT 0
4269: PPUSH
4270: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4274: LD_INT 24
4276: PPUSH
4277: LD_VAR 0 1
4281: PPUSH
4282: LD_INT 0
4284: PPUSH
4285: CALL_OW 322
// global_defined := true ;
4289: LD_ADDR_LOC 3
4293: PUSH
4294: LD_INT 1
4296: ST_TO_ADDR
// end ;
4297: LD_VAR 0 4
4301: RET
// every 0 0$1 do
4302: GO 4304
4304: DISABLE
// if ( def_siberite_bomb > 1 ) then
4305: LD_EXP 70
4309: PUSH
4310: LD_INT 1
4312: GREATER
4313: IFFALSE 4328
// begin wait ( siberite_bomb_Delay ) ;
4315: LD_EXP 15
4319: PPUSH
4320: CALL_OW 67
// EnableSibFiss ;
4324: CALL 4329 0 0
// end ;
4328: END
// function EnableSibFiss ; var i ; begin
4329: LD_INT 0
4331: PPUSH
4332: PPUSH
// for i := 1 to 8 do
4333: LD_ADDR_VAR 0 2
4337: PUSH
4338: DOUBLE
4339: LD_INT 1
4341: DEC
4342: ST_TO_ADDR
4343: LD_INT 8
4345: PUSH
4346: FOR_TO
4347: IFFALSE 4393
// if Side_Positions [ i ] then
4349: LD_EXP 18
4353: PUSH
4354: LD_VAR 0 2
4358: ARRAY
4359: IFFALSE 4391
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4361: LD_INT 25
4363: PPUSH
4364: LD_VAR 0 2
4368: PPUSH
4369: LD_INT 1
4371: PPUSH
4372: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4376: LD_INT 73
4378: PPUSH
4379: LD_VAR 0 2
4383: PPUSH
4384: LD_INT 1
4386: PPUSH
4387: CALL_OW 322
// end ;
4391: GO 4346
4393: POP
4394: POP
// end ;
4395: LD_VAR 0 1
4399: RET
// function prepare_sides ; var i , orig , pos ; begin
4400: LD_INT 0
4402: PPUSH
4403: PPUSH
4404: PPUSH
4405: PPUSH
// global_units := [ ] ;
4406: LD_ADDR_LOC 2
4410: PUSH
4411: EMPTY
4412: ST_TO_ADDR
// global_defined := false ;
4413: LD_ADDR_LOC 3
4417: PUSH
4418: LD_INT 0
4420: ST_TO_ADDR
// CountClassMembers ;
4421: CALL 4940 0 0
// for i := 1 to 8 do
4425: LD_ADDR_VAR 0 2
4429: PUSH
4430: DOUBLE
4431: LD_INT 1
4433: DEC
4434: ST_TO_ADDR
4435: LD_INT 8
4437: PUSH
4438: FOR_TO
4439: IFFALSE 4639
// if Side_Positions [ i ] then
4441: LD_EXP 18
4445: PUSH
4446: LD_VAR 0 2
4450: ARRAY
4451: IFFALSE 4637
// begin pos := Side_Positions [ i ] ;
4453: LD_ADDR_VAR 0 4
4457: PUSH
4458: LD_EXP 18
4462: PUSH
4463: LD_VAR 0 2
4467: ARRAY
4468: ST_TO_ADDR
// if Game_Type in [ 2 , 12 ] then
4469: LD_EXP 56
4473: PUSH
4474: LD_INT 2
4476: PUSH
4477: LD_INT 12
4479: PUSH
4480: EMPTY
4481: LIST
4482: LIST
4483: IN
4484: IFFALSE 4612
// begin if Game_Type = 12 then
4486: LD_EXP 56
4490: PUSH
4491: LD_INT 12
4493: EQUAL
4494: IFFALSE 4556
// begin prepare_side ( i , pos , Position_Nations [ pos ] ) ;
4496: LD_VAR 0 2
4500: PPUSH
4501: LD_VAR 0 4
4505: PPUSH
4506: LD_EXP 21
4510: PUSH
4511: LD_VAR 0 4
4515: ARRAY
4516: PPUSH
4517: CALL 3031 0 3
// prepare_side ( i , pos + 1 , Position_Nations [ pos + 1 ] ) end else
4521: LD_VAR 0 2
4525: PPUSH
4526: LD_VAR 0 4
4530: PUSH
4531: LD_INT 1
4533: PLUS
4534: PPUSH
4535: LD_EXP 21
4539: PUSH
4540: LD_VAR 0 4
4544: PUSH
4545: LD_INT 1
4547: PLUS
4548: ARRAY
4549: PPUSH
4550: CALL 3031 0 3
4554: GO 4610
// begin prepare_side ( i , pos , Side_Nations [ i ] ) ;
4556: LD_VAR 0 2
4560: PPUSH
4561: LD_VAR 0 4
4565: PPUSH
4566: LD_EXP 19
4570: PUSH
4571: LD_VAR 0 2
4575: ARRAY
4576: PPUSH
4577: CALL 3031 0 3
// prepare_side ( i , pos + 1 , Side_Nations [ i ] ) ;
4581: LD_VAR 0 2
4585: PPUSH
4586: LD_VAR 0 4
4590: PUSH
4591: LD_INT 1
4593: PLUS
4594: PPUSH
4595: LD_EXP 19
4599: PUSH
4600: LD_VAR 0 2
4604: ARRAY
4605: PPUSH
4606: CALL 3031 0 3
// end ; end else
4610: GO 4637
// prepare_side ( i , pos , Side_Nations [ i ] ) ;
4612: LD_VAR 0 2
4616: PPUSH
4617: LD_VAR 0 4
4621: PPUSH
4622: LD_EXP 19
4626: PUSH
4627: LD_VAR 0 2
4631: ARRAY
4632: PPUSH
4633: CALL 3031 0 3
// end ;
4637: GO 4438
4639: POP
4640: POP
// end ;
4641: LD_VAR 0 1
4645: RET
// function Modify_Nations ; var list , west , east , i ; begin
4646: LD_INT 0
4648: PPUSH
4649: PPUSH
4650: PPUSH
4651: PPUSH
4652: PPUSH
// list := [ ] ;
4653: LD_ADDR_VAR 0 2
4657: PUSH
4658: EMPTY
4659: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
4660: LD_ADDR_VAR 0 5
4664: PUSH
4665: DOUBLE
4666: LD_INT 1
4668: DEC
4669: ST_TO_ADDR
4670: LD_EXP 18
4674: PUSH
4675: LD_INT 0
4677: PLUS
4678: PUSH
4679: FOR_TO
4680: IFFALSE 4898
// if side_positions [ i ] = 1 then
4682: LD_EXP 18
4686: PUSH
4687: LD_VAR 0 5
4691: ARRAY
4692: PUSH
4693: LD_INT 1
4695: EQUAL
4696: IFFALSE 4790
// case side_nations [ i ] of 1 :
4698: LD_EXP 19
4702: PUSH
4703: LD_VAR 0 5
4707: ARRAY
4708: PUSH
4709: LD_INT 1
4711: DOUBLE
4712: EQUAL
4713: IFTRUE 4717
4715: GO 4735
4717: POP
// west := [ 1 , 2 ] ; 2 :
4718: LD_ADDR_VAR 0 3
4722: PUSH
4723: LD_INT 1
4725: PUSH
4726: LD_INT 2
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: ST_TO_ADDR
4733: GO 4788
4735: LD_INT 2
4737: DOUBLE
4738: EQUAL
4739: IFTRUE 4743
4741: GO 4761
4743: POP
// west := [ 2 , 3 ] ; 3 :
4744: LD_ADDR_VAR 0 3
4748: PUSH
4749: LD_INT 2
4751: PUSH
4752: LD_INT 3
4754: PUSH
4755: EMPTY
4756: LIST
4757: LIST
4758: ST_TO_ADDR
4759: GO 4788
4761: LD_INT 3
4763: DOUBLE
4764: EQUAL
4765: IFTRUE 4769
4767: GO 4787
4769: POP
// west := [ 3 , 1 ] ; end else
4770: LD_ADDR_VAR 0 3
4774: PUSH
4775: LD_INT 3
4777: PUSH
4778: LD_INT 1
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: ST_TO_ADDR
4785: GO 4788
4787: POP
4788: GO 4896
// if side_positions [ i ] = 3 then
4790: LD_EXP 18
4794: PUSH
4795: LD_VAR 0 5
4799: ARRAY
4800: PUSH
4801: LD_INT 3
4803: EQUAL
4804: IFFALSE 4896
// case side_nations [ i ] of 1 :
4806: LD_EXP 19
4810: PUSH
4811: LD_VAR 0 5
4815: ARRAY
4816: PUSH
4817: LD_INT 1
4819: DOUBLE
4820: EQUAL
4821: IFTRUE 4825
4823: GO 4843
4825: POP
// east := [ 1 , 2 ] ; 2 :
4826: LD_ADDR_VAR 0 4
4830: PUSH
4831: LD_INT 1
4833: PUSH
4834: LD_INT 2
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: ST_TO_ADDR
4841: GO 4896
4843: LD_INT 2
4845: DOUBLE
4846: EQUAL
4847: IFTRUE 4851
4849: GO 4869
4851: POP
// east := [ 2 , 3 ] ; 3 :
4852: LD_ADDR_VAR 0 4
4856: PUSH
4857: LD_INT 2
4859: PUSH
4860: LD_INT 3
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: ST_TO_ADDR
4867: GO 4896
4869: LD_INT 3
4871: DOUBLE
4872: EQUAL
4873: IFTRUE 4877
4875: GO 4895
4877: POP
// east := [ 3 , 1 ] ; end ;
4878: LD_ADDR_VAR 0 4
4882: PUSH
4883: LD_INT 3
4885: PUSH
4886: LD_INT 1
4888: PUSH
4889: EMPTY
4890: LIST
4891: LIST
4892: ST_TO_ADDR
4893: GO 4896
4895: POP
4896: GO 4679
4898: POP
4899: POP
// Position_Nations := west ^ east ^ [ 0 , 0 , 0 , 0 ] ;
4900: LD_ADDR_EXP 21
4904: PUSH
4905: LD_VAR 0 3
4909: PUSH
4910: LD_VAR 0 4
4914: ADD
4915: PUSH
4916: LD_INT 0
4918: PUSH
4919: LD_INT 0
4921: PUSH
4922: LD_INT 0
4924: PUSH
4925: LD_INT 0
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: ADD
4934: ST_TO_ADDR
// end ;
4935: LD_VAR 0 1
4939: RET
// function CountClassMembers ; var Mode ; begin
4940: LD_INT 0
4942: PPUSH
4943: PPUSH
// if No_Mechs then
4944: LD_EXP 72
4948: IFFALSE 4960
// Mode := 2 else
4950: LD_ADDR_VAR 0 2
4954: PUSH
4955: LD_INT 2
4957: ST_TO_ADDR
4958: GO 4968
// Mode := 1 ;
4960: LD_ADDR_VAR 0 2
4964: PUSH
4965: LD_INT 1
4967: ST_TO_ADDR
// neng := number_of_people ;
4968: LD_ADDR_LOC 5
4972: PUSH
4973: LD_EXP 6
4977: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4978: LD_ADDR_LOC 8
4982: PUSH
4983: LD_LOC 5
4987: PUSH
4988: LD_INT 4
4990: PUSH
4991: LD_INT 3
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: PUSH
4998: LD_VAR 0 2
5002: ARRAY
5003: DIV
5004: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
5005: LD_LOC 8
5009: PUSH
5010: LD_EXP 5
5014: LESS
5015: IFFALSE 5027
// nsol := number_of_breastworks ;
5017: LD_ADDR_LOC 8
5021: PUSH
5022: LD_EXP 5
5026: ST_TO_ADDR
// neng := neng - nsol ;
5027: LD_ADDR_LOC 5
5031: PUSH
5032: LD_LOC 5
5036: PUSH
5037: LD_LOC 8
5041: MINUS
5042: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
5043: LD_ADDR_LOC 6
5047: PUSH
5048: LD_LOC 5
5052: PUSH
5053: LD_INT 3
5055: PUSH
5056: LD_INT 2
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: PUSH
5063: LD_VAR 0 2
5067: ARRAY
5068: DIV
5069: ST_TO_ADDR
// if ( nsci < 1 ) then
5070: LD_LOC 6
5074: PUSH
5075: LD_INT 1
5077: LESS
5078: IFFALSE 5088
// nsci := 1 ;
5080: LD_ADDR_LOC 6
5084: PUSH
5085: LD_INT 1
5087: ST_TO_ADDR
// neng := neng - nsci ;
5088: LD_ADDR_LOC 5
5092: PUSH
5093: LD_LOC 5
5097: PUSH
5098: LD_LOC 6
5102: MINUS
5103: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5104: LD_ADDR_LOC 7
5108: PUSH
5109: LD_LOC 5
5113: PUSH
5114: LD_INT 2
5116: DIV
5117: PUSH
5118: LD_INT 0
5120: PUSH
5121: EMPTY
5122: LIST
5123: LIST
5124: PUSH
5125: LD_VAR 0 2
5129: ARRAY
5130: ST_TO_ADDR
// neng := neng - nmech ;
5131: LD_ADDR_LOC 5
5135: PUSH
5136: LD_LOC 5
5140: PUSH
5141: LD_LOC 7
5145: MINUS
5146: ST_TO_ADDR
// if ( neng < 1 ) then
5147: LD_LOC 5
5151: PUSH
5152: LD_INT 1
5154: LESS
5155: IFFALSE 5165
// neng := 1 ;
5157: LD_ADDR_LOC 5
5161: PUSH
5162: LD_INT 1
5164: ST_TO_ADDR
// end ;
5165: LD_VAR 0 1
5169: RET
// function Init_Win_Condition ; begin
5170: LD_INT 0
5172: PPUSH
// disable ( 98 ) ;
5173: LD_INT 98
5175: DISABLE_MARKED
// disable ( 99 ) ;
5176: LD_INT 99
5178: DISABLE_MARKED
// if Team_Game then
5179: LD_EXP 20
5183: IFFALSE 5190
// enable ( 98 ) else
5185: LD_INT 98
5187: ENABLE_MARKED
5188: GO 5193
// enable ( 99 ) ;
5190: LD_INT 99
5192: ENABLE_MARKED
// end ;
5193: LD_VAR 0 1
5197: RET
// starting begin DE_Triggers ;
5198: CALL 8651 0 0
// mp_selectmsg := true ;
5202: LD_ADDR_OWVAR 13
5206: PUSH
5207: LD_INT 1
5209: ST_TO_ADDR
// if ( game_type <> 1 ) and ( game_type <> 3 ) then
5210: LD_EXP 56
5214: PUSH
5215: LD_INT 1
5217: NONEQUAL
5218: PUSH
5219: LD_EXP 56
5223: PUSH
5224: LD_INT 3
5226: NONEQUAL
5227: AND
5228: IFFALSE 5234
// read_multiplayer_and_game_parameters ;
5230: CALL 976 0 0
// case Game_Type of 1 , 3 :
5234: LD_EXP 56
5238: PUSH
5239: LD_INT 1
5241: DOUBLE
5242: EQUAL
5243: IFTRUE 5253
5245: LD_INT 3
5247: DOUBLE
5248: EQUAL
5249: IFTRUE 5253
5251: GO 5265
5253: POP
// begin enable ( 19 ) ;
5254: LD_INT 19
5256: ENABLE_MARKED
// starting_ctf ;
5257: CALL 9290 0 0
// exit ;
5261: GO 5426
// end ; 12 :
5263: GO 5281
5265: LD_INT 12
5267: DOUBLE
5268: EQUAL
5269: IFTRUE 5273
5271: GO 5280
5273: POP
// Modify_Nations ; end ;
5274: CALL 4646 0 0
5278: GO 5281
5280: POP
// enable ( 55 ) ;
5281: LD_INT 55
5283: ENABLE_MARKED
// init_map ;
5284: CALL 276 0 0
// set_shared_visions_and_alliances ;
5288: CALL 2220 0 0
// prepare_sides ;
5292: CALL 4400 0 0
// InitLimits ;
5296: CALL 18044 0 0
// ShowTimer ;
5300: CALL 18981 0 0
// init_shipments ;
5304: CALL 5427 0 0
// init_respawn ;
5308: CALL 5931 0 0
// InitApeman ;
5312: CALL 7466 0 0
// music_nat := Side_Nations [ your_side ] ;
5316: LD_ADDR_OWVAR 71
5320: PUSH
5321: LD_EXP 19
5325: PUSH
5326: LD_OWVAR 2
5330: ARRAY
5331: ST_TO_ADDR
// if IAmSpec then
5332: CALL_OW 531
5336: IFFALSE 5372
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
5338: LD_INT 0
5340: PPUSH
5341: LD_INT 0
5343: PPUSH
5344: LD_OWVAR 2
5348: PPUSH
5349: LD_INT 32767
5351: NEG
5352: PPUSH
5353: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
5357: LD_INT 104
5359: PPUSH
5360: LD_INT 69
5362: PPUSH
5363: CALL_OW 86
// enable ( 400 ) ;
5367: LD_INT 400
5369: ENABLE_MARKED
// end else
5370: GO 5426
// begin ResetFog ;
5372: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5376: LD_EXP 26
5380: PUSH
5381: LD_EXP 18
5385: PUSH
5386: LD_OWVAR 2
5390: ARRAY
5391: ARRAY
5392: PUSH
5393: LD_INT 1
5395: ARRAY
5396: PPUSH
5397: LD_EXP 26
5401: PUSH
5402: LD_EXP 18
5406: PUSH
5407: LD_OWVAR 2
5411: ARRAY
5412: ARRAY
5413: PUSH
5414: LD_INT 2
5416: ARRAY
5417: PPUSH
5418: CALL_OW 86
// Init_Win_Condition ;
5422: CALL 5170 0 0
// end ; end ; end_of_file
5426: END
// var shipment , tictac ; export function init_shipments ; begin
5427: LD_INT 0
5429: PPUSH
// shipment := Rand ( 0 , 1 ) ;
5430: LD_ADDR_LOC 9
5434: PUSH
5435: LD_INT 0
5437: PPUSH
5438: LD_INT 1
5440: PPUSH
5441: CALL_OW 12
5445: ST_TO_ADDR
// tictac := 0 ;
5446: LD_ADDR_LOC 10
5450: PUSH
5451: LD_INT 0
5453: ST_TO_ADDR
// end ;
5454: LD_VAR 0 1
5458: RET
// every 0 0$5 + 0 0$1.1 marked 55 do var d ;
5459: GO 5461
5461: DISABLE
5462: LD_INT 0
5464: PPUSH
// begin case tick of 1 .. 1 1$0 :
5465: LD_OWVAR 1
5469: PUSH
5470: LD_INT 1
5472: DOUBLE
5473: GREATEREQUAL
5474: IFFALSE 5482
5476: LD_INT 2100
5478: DOUBLE
5479: LESSEQUAL
5480: IFTRUE 5484
5482: GO 5495
5484: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5485: LD_ADDR_VAR 0 1
5489: PUSH
5490: LD_INT 150
5492: ST_TO_ADDR
5493: GO 5678
5495: LD_INT 2100
5497: PUSH
5498: LD_INT 1
5500: PLUS
5501: DOUBLE
5502: GREATEREQUAL
5503: IFFALSE 5511
5505: LD_INT 10500
5507: DOUBLE
5508: LESSEQUAL
5509: IFTRUE 5513
5511: GO 5524
5513: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5514: LD_ADDR_VAR 0 1
5518: PUSH
5519: LD_INT 100
5521: ST_TO_ADDR
5522: GO 5678
5524: LD_INT 10500
5526: PUSH
5527: LD_INT 1
5529: PLUS
5530: DOUBLE
5531: GREATEREQUAL
5532: IFFALSE 5540
5534: LD_INT 21000
5536: DOUBLE
5537: LESSEQUAL
5538: IFTRUE 5542
5540: GO 5553
5542: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5543: LD_ADDR_VAR 0 1
5547: PUSH
5548: LD_INT 90
5550: ST_TO_ADDR
5551: GO 5678
5553: LD_INT 21000
5555: PUSH
5556: LD_INT 1
5558: PLUS
5559: DOUBLE
5560: GREATEREQUAL
5561: IFFALSE 5569
5563: LD_INT 42000
5565: DOUBLE
5566: LESSEQUAL
5567: IFTRUE 5571
5569: GO 5582
5571: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5572: LD_ADDR_VAR 0 1
5576: PUSH
5577: LD_INT 70
5579: ST_TO_ADDR
5580: GO 5678
5582: LD_INT 42000
5584: PUSH
5585: LD_INT 1
5587: PLUS
5588: DOUBLE
5589: GREATEREQUAL
5590: IFFALSE 5598
5592: LD_INT 63000
5594: DOUBLE
5595: LESSEQUAL
5596: IFTRUE 5600
5598: GO 5611
5600: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5601: LD_ADDR_VAR 0 1
5605: PUSH
5606: LD_INT 60
5608: ST_TO_ADDR
5609: GO 5678
5611: LD_INT 63000
5613: PUSH
5614: LD_INT 1
5616: PLUS
5617: DOUBLE
5618: GREATEREQUAL
5619: IFFALSE 5627
5621: LD_INT 105000
5623: DOUBLE
5624: LESSEQUAL
5625: IFTRUE 5629
5627: GO 5640
5629: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5630: LD_ADDR_VAR 0 1
5634: PUSH
5635: LD_INT 35
5637: ST_TO_ADDR
5638: GO 5678
5640: LD_INT 105000
5642: PUSH
5643: LD_INT 1
5645: PLUS
5646: DOUBLE
5647: GREATEREQUAL
5648: IFFALSE 5656
5650: LD_INT 630000
5652: DOUBLE
5653: LESSEQUAL
5654: IFTRUE 5658
5656: GO 5669
5658: POP
// d := 20 ; else
5659: LD_ADDR_VAR 0 1
5663: PUSH
5664: LD_INT 20
5666: ST_TO_ADDR
5667: GO 5678
5669: POP
// d := 0 ; end ;
5670: LD_ADDR_VAR 0 1
5674: PUSH
5675: LD_INT 0
5677: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5678: LD_INT 1
5680: PPUSH
5681: LD_INT 10000
5683: PPUSH
5684: CALL_OW 12
5688: PUSH
5689: LD_VAR 0 1
5693: PUSH
5694: LD_EXP 10
5698: MUL
5699: LESSEQUAL
5700: IFFALSE 5754
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5702: LD_INT 1
5704: PPUSH
5705: LD_INT 140
5707: PPUSH
5708: CALL_OW 12
5712: PPUSH
5713: CALL_OW 67
// shipment := ( shipment + 1 ) mod 2 ;
5717: LD_ADDR_LOC 9
5721: PUSH
5722: LD_LOC 9
5726: PUSH
5727: LD_INT 1
5729: PLUS
5730: PUSH
5731: LD_INT 2
5733: MOD
5734: ST_TO_ADDR
// CreateCratesArea ( 5 , west_side + shipment , true ) ;
5735: LD_INT 5
5737: PPUSH
5738: LD_INT 8
5740: PUSH
5741: LD_LOC 9
5745: PLUS
5746: PPUSH
5747: LD_INT 1
5749: PPUSH
5750: CALL_OW 55
// end ; enable ;
5754: ENABLE
// end ;
5755: PPOPN 1
5757: END
// every 0 0$10 trigger TICK > ( ( 2 2$0 * tictac ) + tictac * ( 1 1$30 - shipments_density * ( 0 0$2 ) ) ) marked 55 do var i , amount , is_in ;
5758: LD_OWVAR 1
5762: PUSH
5763: LD_INT 4200
5765: PUSH
5766: LD_LOC 10
5770: MUL
5771: PUSH
5772: LD_LOC 10
5776: PUSH
5777: LD_INT 3150
5779: PUSH
5780: LD_EXP 10
5784: PUSH
5785: LD_INT 70
5787: MUL
5788: MINUS
5789: MUL
5790: PLUS
5791: GREATER
5792: IFFALSE 5928
5794: GO 5796
5796: DISABLE
5797: LD_INT 0
5799: PPUSH
5800: PPUSH
5801: PPUSH
// begin tictac := tictac + 1 ;
5802: LD_ADDR_LOC 10
5806: PUSH
5807: LD_LOC 10
5811: PUSH
5812: LD_INT 1
5814: PLUS
5815: ST_TO_ADDR
// amount := Rand ( 3 , 5 ) ;
5816: LD_ADDR_VAR 0 2
5820: PUSH
5821: LD_INT 3
5823: PPUSH
5824: LD_INT 5
5826: PPUSH
5827: CALL_OW 12
5831: ST_TO_ADDR
// for i = 0 to 3 do
5832: LD_ADDR_VAR 0 1
5836: PUSH
5837: DOUBLE
5838: LD_INT 0
5840: DEC
5841: ST_TO_ADDR
5842: LD_INT 3
5844: PUSH
5845: FOR_TO
5846: IFFALSE 5925
// begin is_in := GetResourceArea ( west_side + i , mat_cans ) ;
5848: LD_ADDR_VAR 0 3
5852: PUSH
5853: LD_INT 8
5855: PUSH
5856: LD_VAR 0 1
5860: PLUS
5861: PPUSH
5862: LD_INT 1
5864: PPUSH
5865: CALL_OW 287
5869: ST_TO_ADDR
// if ( is_in < 500 ) or ( Rand ( 1 , 10 ) > ( is_in div 100 ) ) then
5870: LD_VAR 0 3
5874: PUSH
5875: LD_INT 500
5877: LESS
5878: PUSH
5879: LD_INT 1
5881: PPUSH
5882: LD_INT 10
5884: PPUSH
5885: CALL_OW 12
5889: PUSH
5890: LD_VAR 0 3
5894: PUSH
5895: LD_INT 100
5897: DIV
5898: GREATER
5899: OR
5900: IFFALSE 5923
// CreateCratesArea ( amount , nw + i , true ) ;
5902: LD_VAR 0 2
5906: PPUSH
5907: LD_INT 12
5909: PUSH
5910: LD_VAR 0 1
5914: PLUS
5915: PPUSH
5916: LD_INT 1
5918: PPUSH
5919: CALL_OW 55
// end ;
5923: GO 5845
5925: POP
5926: POP
// enable ;
5927: ENABLE
// end ; end_of_file
5928: PPOPN 3
5930: END
// var respawn_queue , nation_queue ; export function init_respawn ; begin
5931: LD_INT 0
5933: PPUSH
// if not def_people_respawning then
5934: LD_EXP 68
5938: NOT
5939: IFFALSE 5943
// exit ;
5941: GO 6046
// respawn_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5943: LD_ADDR_LOC 11
5947: PUSH
5948: LD_INT 0
5950: PUSH
5951: LD_INT 0
5953: PUSH
5954: LD_INT 0
5956: PUSH
5957: LD_INT 0
5959: PUSH
5960: LD_INT 0
5962: PUSH
5963: LD_INT 0
5965: PUSH
5966: LD_INT 0
5968: PUSH
5969: LD_INT 0
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: ST_TO_ADDR
// nation_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5982: LD_ADDR_LOC 12
5986: PUSH
5987: LD_INT 0
5989: PUSH
5990: LD_INT 0
5992: PUSH
5993: LD_INT 0
5995: PUSH
5996: LD_INT 0
5998: PUSH
5999: LD_INT 0
6001: PUSH
6002: LD_INT 0
6004: PUSH
6005: LD_INT 0
6007: PUSH
6008: LD_INT 0
6010: PUSH
6011: EMPTY
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: ST_TO_ADDR
// if Game_Type in [ 2 , 12 ] then
6021: LD_EXP 56
6025: PUSH
6026: LD_INT 2
6028: PUSH
6029: LD_INT 12
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: IN
6036: IFFALSE 6043
// enable ( 41 ) else
6038: LD_INT 41
6040: ENABLE_MARKED
6041: GO 6046
// enable ( 40 ) ;
6043: LD_INT 40
6045: ENABLE_MARKED
// end ;
6046: LD_VAR 0 1
6050: RET
// every 0 0$10 marked 40 do var list , time , side ;
6051: GO 6053
6053: DISABLE
6054: LD_INT 0
6056: PPUSH
6057: PPUSH
6058: PPUSH
// begin for side = 1 to Side_Positions do
6059: LD_ADDR_VAR 0 3
6063: PUSH
6064: DOUBLE
6065: LD_INT 1
6067: DEC
6068: ST_TO_ADDR
6069: LD_EXP 18
6073: PUSH
6074: FOR_TO
6075: IFFALSE 6252
// if Side_Positions [ side ] then
6077: LD_EXP 18
6081: PUSH
6082: LD_VAR 0 3
6086: ARRAY
6087: IFFALSE 6250
// begin list := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6089: LD_ADDR_VAR 0 1
6093: PUSH
6094: LD_INT 22
6096: PUSH
6097: LD_VAR 0 3
6101: PUSH
6102: EMPTY
6103: LIST
6104: LIST
6105: PUSH
6106: LD_INT 21
6108: PUSH
6109: LD_INT 1
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: PUSH
6116: LD_INT 3
6118: PUSH
6119: LD_INT 23
6121: PUSH
6122: LD_INT 0
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: PPUSH
6135: CALL_OW 69
6139: ST_TO_ADDR
// if ( list < number_of_people ) and ( not respawn_queue [ side ] ) then
6140: LD_VAR 0 1
6144: PUSH
6145: LD_EXP 6
6149: LESS
6150: PUSH
6151: LD_LOC 11
6155: PUSH
6156: LD_VAR 0 3
6160: ARRAY
6161: NOT
6162: AND
6163: IFFALSE 6190
// respawn_queue := Replace ( respawn_queue , side , TICK ) ;
6165: LD_ADDR_LOC 11
6169: PUSH
6170: LD_LOC 11
6174: PPUSH
6175: LD_VAR 0 3
6179: PPUSH
6180: LD_OWVAR 1
6184: PPUSH
6185: CALL_OW 1
6189: ST_TO_ADDR
// time := TICK - respawn_queue [ side ] ;
6190: LD_ADDR_VAR 0 2
6194: PUSH
6195: LD_OWVAR 1
6199: PUSH
6200: LD_LOC 11
6204: PUSH
6205: LD_VAR 0 3
6209: ARRAY
6210: MINUS
6211: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6212: LD_LOC 11
6216: PUSH
6217: LD_VAR 0 3
6221: ARRAY
6222: PUSH
6223: LD_VAR 0 2
6227: PUSH
6228: LD_EXP 13
6232: GREATER
6233: AND
6234: IFFALSE 6250
// respawn_character ( side , time ) ;
6236: LD_VAR 0 3
6240: PPUSH
6241: LD_VAR 0 2
6245: PPUSH
6246: CALL 6258 0 2
// end ;
6250: GO 6074
6252: POP
6253: POP
// enable ;
6254: ENABLE
// end ;
6255: PPOPN 3
6257: END
// function respawn_character ( side , time ) ; var dep ; begin
6258: LD_INT 0
6260: PPUSH
6261: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6262: LD_INT 0
6264: PPUSH
6265: LD_INT 1
6267: PPUSH
6268: CALL_OW 12
6272: PUSH
6273: LD_VAR 0 2
6277: PUSH
6278: LD_EXP 14
6282: LESS
6283: AND
6284: IFFALSE 6288
// exit ;
6286: GO 6495
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6288: LD_ADDR_VAR 0 4
6292: PUSH
6293: LD_INT 22
6295: PUSH
6296: LD_VAR 0 1
6300: PUSH
6301: EMPTY
6302: LIST
6303: LIST
6304: PUSH
6305: LD_INT 2
6307: PUSH
6308: LD_INT 30
6310: PUSH
6311: LD_INT 0
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: PUSH
6318: LD_INT 30
6320: PUSH
6321: LD_INT 1
6323: PUSH
6324: EMPTY
6325: LIST
6326: LIST
6327: PUSH
6328: EMPTY
6329: LIST
6330: LIST
6331: LIST
6332: PUSH
6333: LD_INT 50
6335: PUSH
6336: EMPTY
6337: LIST
6338: PUSH
6339: EMPTY
6340: LIST
6341: LIST
6342: LIST
6343: PPUSH
6344: CALL_OW 69
6348: ST_TO_ADDR
// if not dep then
6349: LD_VAR 0 4
6353: NOT
6354: IFFALSE 6360
// exit else
6356: GO 6495
6358: GO 6384
// dep := dep [ Rand ( 1 , dep ) ] ;
6360: LD_ADDR_VAR 0 4
6364: PUSH
6365: LD_VAR 0 4
6369: PUSH
6370: LD_INT 1
6372: PPUSH
6373: LD_VAR 0 4
6377: PPUSH
6378: CALL_OW 12
6382: ARRAY
6383: ST_TO_ADDR
// uc_side := side ;
6384: LD_ADDR_OWVAR 20
6388: PUSH
6389: LD_VAR 0 1
6393: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6394: LD_ADDR_OWVAR 21
6398: PUSH
6399: LD_EXP 19
6403: PUSH
6404: LD_VAR 0 1
6408: ARRAY
6409: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6410: LD_INT 0
6412: PPUSH
6413: LD_INT 0
6415: PPUSH
6416: LD_EXP 7
6420: PUSH
6421: LD_INT 2
6423: DIV
6424: PPUSH
6425: CALL_OW 380
// hc_importance := 0 ;
6429: LD_ADDR_OWVAR 32
6433: PUSH
6434: LD_INT 0
6436: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
6437: CALL_OW 44
6441: PPUSH
6442: LD_VAR 0 4
6446: PPUSH
6447: CALL_OW 250
6451: PPUSH
6452: LD_VAR 0 4
6456: PPUSH
6457: CALL_OW 251
6461: PPUSH
6462: LD_INT 10
6464: PPUSH
6465: LD_INT 1
6467: PPUSH
6468: CALL_OW 50
// respawn_queue := Replace ( respawn_queue , side , 0 ) ;
6472: LD_ADDR_LOC 11
6476: PUSH
6477: LD_LOC 11
6481: PPUSH
6482: LD_VAR 0 1
6486: PPUSH
6487: LD_INT 0
6489: PPUSH
6490: CALL_OW 1
6494: ST_TO_ADDR
// end ;
6495: LD_VAR 0 3
6499: RET
// every 0 0$10 marked 41 do var i , list , time , nation , side , limit ;
6500: GO 6502
6502: DISABLE
6503: LD_INT 0
6505: PPUSH
6506: PPUSH
6507: PPUSH
6508: PPUSH
6509: PPUSH
6510: PPUSH
// begin if Game_Type = 12 then
6511: LD_EXP 56
6515: PUSH
6516: LD_INT 12
6518: EQUAL
6519: IFFALSE 6533
// limit := number_of_people else
6521: LD_ADDR_VAR 0 6
6525: PUSH
6526: LD_EXP 6
6530: ST_TO_ADDR
6531: GO 6547
// limit := 2 * number_of_people ;
6533: LD_ADDR_VAR 0 6
6537: PUSH
6538: LD_INT 2
6540: PUSH
6541: LD_EXP 6
6545: MUL
6546: ST_TO_ADDR
// for i = 1 to 4 do
6547: LD_ADDR_VAR 0 1
6551: PUSH
6552: DOUBLE
6553: LD_INT 1
6555: DEC
6556: ST_TO_ADDR
6557: LD_INT 4
6559: PUSH
6560: FOR_TO
6561: IFFALSE 6853
// begin side := GetSidePositions ( [ 1 , 1 , 3 , 3 ] [ i ] ) ;
6563: LD_ADDR_VAR 0 5
6567: PUSH
6568: LD_INT 1
6570: PUSH
6571: LD_INT 1
6573: PUSH
6574: LD_INT 3
6576: PUSH
6577: LD_INT 3
6579: PUSH
6580: EMPTY
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: PUSH
6586: LD_VAR 0 1
6590: ARRAY
6591: PPUSH
6592: CALL 7195 0 1
6596: ST_TO_ADDR
// if Game_Type = 12 then
6597: LD_EXP 56
6601: PUSH
6602: LD_INT 12
6604: EQUAL
6605: IFFALSE 6625
// nation := Position_Nations [ i ] else
6607: LD_ADDR_VAR 0 4
6611: PUSH
6612: LD_EXP 21
6616: PUSH
6617: LD_VAR 0 1
6621: ARRAY
6622: ST_TO_ADDR
6623: GO 6641
// nation := Side_Nations [ side ] ;
6625: LD_ADDR_VAR 0 4
6629: PUSH
6630: LD_EXP 19
6634: PUSH
6635: LD_VAR 0 5
6639: ARRAY
6640: ST_TO_ADDR
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_nation , nation ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6641: LD_ADDR_VAR 0 2
6645: PUSH
6646: LD_INT 22
6648: PUSH
6649: LD_VAR 0 5
6653: PUSH
6654: EMPTY
6655: LIST
6656: LIST
6657: PUSH
6658: LD_INT 23
6660: PUSH
6661: LD_VAR 0 4
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: PUSH
6670: LD_INT 21
6672: PUSH
6673: LD_INT 1
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: PUSH
6680: LD_INT 3
6682: PUSH
6683: LD_INT 23
6685: PUSH
6686: LD_INT 0
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: PPUSH
6700: CALL_OW 69
6704: ST_TO_ADDR
// if ( list < limit ) and ( not respawn_queue [ side ] ) then
6705: LD_VAR 0 2
6709: PUSH
6710: LD_VAR 0 6
6714: LESS
6715: PUSH
6716: LD_LOC 11
6720: PUSH
6721: LD_VAR 0 5
6725: ARRAY
6726: NOT
6727: AND
6728: IFFALSE 6780
// begin respawn_queue = Replace ( respawn_queue , side , TICK ) ;
6730: LD_ADDR_LOC 11
6734: PUSH
6735: LD_LOC 11
6739: PPUSH
6740: LD_VAR 0 5
6744: PPUSH
6745: LD_OWVAR 1
6749: PPUSH
6750: CALL_OW 1
6754: ST_TO_ADDR
// nation_queue = Replace ( nation_queue , side , nation ) ;
6755: LD_ADDR_LOC 12
6759: PUSH
6760: LD_LOC 12
6764: PPUSH
6765: LD_VAR 0 5
6769: PPUSH
6770: LD_VAR 0 4
6774: PPUSH
6775: CALL_OW 1
6779: ST_TO_ADDR
// end ; time := TICK - respawn_queue [ side ] ;
6780: LD_ADDR_VAR 0 3
6784: PUSH
6785: LD_OWVAR 1
6789: PUSH
6790: LD_LOC 11
6794: PUSH
6795: LD_VAR 0 5
6799: ARRAY
6800: MINUS
6801: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6802: LD_LOC 11
6806: PUSH
6807: LD_VAR 0 5
6811: ARRAY
6812: PUSH
6813: LD_VAR 0 3
6817: PUSH
6818: LD_EXP 13
6822: GREATER
6823: AND
6824: IFFALSE 6851
// respawn_character_nation ( side , time , nation_queue [ side ] ) ;
6826: LD_VAR 0 5
6830: PPUSH
6831: LD_VAR 0 3
6835: PPUSH
6836: LD_LOC 12
6840: PUSH
6841: LD_VAR 0 5
6845: ARRAY
6846: PPUSH
6847: CALL 6859 0 3
// end ;
6851: GO 6560
6853: POP
6854: POP
// enable ;
6855: ENABLE
// end ;
6856: PPOPN 6
6858: END
// function respawn_character_nation ( side , time , nation ) ; var dep ; begin
6859: LD_INT 0
6861: PPUSH
6862: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6863: LD_INT 0
6865: PPUSH
6866: LD_INT 1
6868: PPUSH
6869: CALL_OW 12
6873: PUSH
6874: LD_VAR 0 2
6878: PUSH
6879: LD_EXP 14
6883: LESS
6884: AND
6885: IFFALSE 6889
// exit ;
6887: GO 7190
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_nation , nation ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6889: LD_ADDR_VAR 0 5
6893: PUSH
6894: LD_INT 22
6896: PUSH
6897: LD_VAR 0 1
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: PUSH
6906: LD_INT 23
6908: PUSH
6909: LD_VAR 0 3
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: PUSH
6918: LD_INT 2
6920: PUSH
6921: LD_INT 30
6923: PUSH
6924: LD_INT 0
6926: PUSH
6927: EMPTY
6928: LIST
6929: LIST
6930: PUSH
6931: LD_INT 30
6933: PUSH
6934: LD_INT 1
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: LIST
6945: PUSH
6946: LD_INT 50
6948: PUSH
6949: EMPTY
6950: LIST
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: PPUSH
6958: CALL_OW 69
6962: ST_TO_ADDR
// if not dep then
6963: LD_VAR 0 5
6967: NOT
6968: IFFALSE 7031
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6970: LD_ADDR_VAR 0 5
6974: PUSH
6975: LD_INT 22
6977: PUSH
6978: LD_VAR 0 1
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PUSH
6987: LD_INT 2
6989: PUSH
6990: LD_INT 30
6992: PUSH
6993: LD_INT 0
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PUSH
7000: LD_INT 30
7002: PUSH
7003: LD_INT 1
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: LIST
7014: PUSH
7015: LD_INT 50
7017: PUSH
7018: EMPTY
7019: LIST
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: LIST
7025: PPUSH
7026: CALL_OW 69
7030: ST_TO_ADDR
// if not dep then
7031: LD_VAR 0 5
7035: NOT
7036: IFFALSE 7042
// exit else
7038: GO 7190
7040: GO 7066
// dep := dep [ Rand ( 1 , dep ) ] ;
7042: LD_ADDR_VAR 0 5
7046: PUSH
7047: LD_VAR 0 5
7051: PUSH
7052: LD_INT 1
7054: PPUSH
7055: LD_VAR 0 5
7059: PPUSH
7060: CALL_OW 12
7064: ARRAY
7065: ST_TO_ADDR
// uc_side := side ;
7066: LD_ADDR_OWVAR 20
7070: PUSH
7071: LD_VAR 0 1
7075: ST_TO_ADDR
// uc_nation := nation ;
7076: LD_ADDR_OWVAR 21
7080: PUSH
7081: LD_VAR 0 3
7085: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level ) ;
7086: LD_INT 0
7088: PPUSH
7089: LD_INT 0
7091: PPUSH
7092: LD_EXP 7
7096: PPUSH
7097: CALL_OW 380
// hc_importance := 0 ;
7101: LD_ADDR_OWVAR 32
7105: PUSH
7106: LD_INT 0
7108: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
7109: CALL_OW 44
7113: PPUSH
7114: LD_VAR 0 5
7118: PPUSH
7119: CALL_OW 250
7123: PPUSH
7124: LD_VAR 0 5
7128: PPUSH
7129: CALL_OW 251
7133: PPUSH
7134: LD_INT 10
7136: PPUSH
7137: LD_INT 1
7139: PPUSH
7140: CALL_OW 50
// respawn_queue := Replace ( respawn_queue , side , 0 ) ;
7144: LD_ADDR_LOC 11
7148: PUSH
7149: LD_LOC 11
7153: PPUSH
7154: LD_VAR 0 1
7158: PPUSH
7159: LD_INT 0
7161: PPUSH
7162: CALL_OW 1
7166: ST_TO_ADDR
// nation_queue := Replace ( nation_queue , side , 0 ) ;
7167: LD_ADDR_LOC 12
7171: PUSH
7172: LD_LOC 12
7176: PPUSH
7177: LD_VAR 0 1
7181: PPUSH
7182: LD_INT 0
7184: PPUSH
7185: CALL_OW 1
7189: ST_TO_ADDR
// end ;
7190: LD_VAR 0 4
7194: RET
// function GetSidePositions ( i ) ; var un , side ; begin
7195: LD_INT 0
7197: PPUSH
7198: PPUSH
7199: PPUSH
// side := false ;
7200: LD_ADDR_VAR 0 4
7204: PUSH
7205: LD_INT 0
7207: ST_TO_ADDR
// for un = 1 to Side_Positions do
7208: LD_ADDR_VAR 0 3
7212: PUSH
7213: DOUBLE
7214: LD_INT 1
7216: DEC
7217: ST_TO_ADDR
7218: LD_EXP 18
7222: PUSH
7223: FOR_TO
7224: IFFALSE 7258
// if Side_Positions [ un ] = i then
7226: LD_EXP 18
7230: PUSH
7231: LD_VAR 0 3
7235: ARRAY
7236: PUSH
7237: LD_VAR 0 1
7241: EQUAL
7242: IFFALSE 7256
// begin side := un ;
7244: LD_ADDR_VAR 0 4
7248: PUSH
7249: LD_VAR 0 3
7253: ST_TO_ADDR
// break ;
7254: GO 7258
// end ;
7256: GO 7223
7258: POP
7259: POP
// result := side ;
7260: LD_ADDR_VAR 0 2
7264: PUSH
7265: LD_VAR 0 4
7269: ST_TO_ADDR
// end ; end_of_file
7270: LD_VAR 0 2
7274: RET
// every 20 20$00 trigger apemanNumber do
7275: LD_EXP 30
7279: IFFALSE 7312
7281: GO 7283
7283: DISABLE
// begin enable ;
7284: ENABLE
// if apeLevel >= 8 then
7285: LD_EXP 35
7289: PUSH
7290: LD_INT 8
7292: GREATEREQUAL
7293: IFFALSE 7298
// disable else
7295: DISABLE
7296: GO 7312
// apeLevel := apeLevel + 1 ;
7298: LD_ADDR_EXP 35
7302: PUSH
7303: LD_EXP 35
7307: PUSH
7308: LD_INT 1
7310: PLUS
7311: ST_TO_ADDR
// end ;
7312: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
7313: LD_EXP 30
7317: PUSH
7318: LD_EXP 31
7322: LESS
7323: IFFALSE 7463
7325: GO 7327
7327: DISABLE
7328: LD_INT 0
7330: PPUSH
7331: PPUSH
7332: PPUSH
7333: PPUSH
// begin enable ;
7334: ENABLE
// for i := 1 to apemanPos do
7335: LD_ADDR_VAR 0 1
7339: PUSH
7340: DOUBLE
7341: LD_INT 1
7343: DEC
7344: ST_TO_ADDR
7345: LD_EXP 33
7349: PUSH
7350: FOR_TO
7351: IFFALSE 7461
// begin if apemanPlayerCount [ i ] then
7353: LD_EXP 34
7357: PUSH
7358: LD_VAR 0 1
7362: ARRAY
7363: IFFALSE 7459
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
7365: LD_EXP 34
7369: PUSH
7370: LD_VAR 0 1
7374: ARRAY
7375: PUSH
7376: LD_EXP 33
7380: PUSH
7381: LD_VAR 0 1
7385: ARRAY
7386: GREATER
7387: IFFALSE 7459
// begin ape := PrepareApeman ;
7389: LD_ADDR_VAR 0 2
7393: PUSH
7394: CALL 7958 0 0
7398: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
7399: LD_VAR 0 2
7403: PPUSH
7404: LD_EXP 36
7408: PUSH
7409: LD_VAR 0 1
7413: ARRAY
7414: PPUSH
7415: LD_INT 0
7417: PPUSH
7418: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
7422: LD_ADDR_EXP 33
7426: PUSH
7427: LD_EXP 33
7431: PPUSH
7432: LD_VAR 0 1
7436: PPUSH
7437: LD_EXP 33
7441: PUSH
7442: LD_VAR 0 1
7446: ARRAY
7447: PUSH
7448: LD_VAR 0 2
7452: UNION
7453: PPUSH
7454: CALL_OW 1
7458: ST_TO_ADDR
// end ; end ; end ;
7459: GO 7350
7461: POP
7462: POP
// end ;
7463: PPOPN 4
7465: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
7466: LD_INT 0
7468: PPUSH
7469: PPUSH
7470: PPUSH
7471: PPUSH
7472: PPUSH
7473: PPUSH
7474: PPUSH
// playersAmount := 0 ;
7475: LD_ADDR_VAR 0 3
7479: PUSH
7480: LD_INT 0
7482: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea ] ;
7483: LD_ADDR_VAR 0 7
7487: PUSH
7488: LD_INT 18
7490: PUSH
7491: LD_INT 19
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7498: LD_ADDR_EXP 36
7502: PUSH
7503: LD_INT 0
7505: PUSH
7506: LD_INT 0
7508: PUSH
7509: LD_INT 0
7511: PUSH
7512: LD_INT 0
7514: PUSH
7515: LD_INT 0
7517: PUSH
7518: LD_INT 0
7520: PUSH
7521: LD_INT 0
7523: PUSH
7524: LD_INT 0
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: ST_TO_ADDR
// for j = 1 to Side_Positions do
7537: LD_ADDR_VAR 0 4
7541: PUSH
7542: DOUBLE
7543: LD_INT 1
7545: DEC
7546: ST_TO_ADDR
7547: LD_EXP 18
7551: PUSH
7552: FOR_TO
7553: IFFALSE 7620
// if Side_Positions [ j ] then
7555: LD_EXP 18
7559: PUSH
7560: LD_VAR 0 4
7564: ARRAY
7565: IFFALSE 7618
// begin playersAmount := playersAmount + 1 ;
7567: LD_ADDR_VAR 0 3
7571: PUSH
7572: LD_VAR 0 3
7576: PUSH
7577: LD_INT 1
7579: PLUS
7580: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
7581: LD_ADDR_EXP 36
7585: PUSH
7586: LD_EXP 36
7590: PPUSH
7591: LD_VAR 0 4
7595: PPUSH
7596: LD_VAR 0 7
7600: PUSH
7601: LD_EXP 18
7605: PUSH
7606: LD_VAR 0 4
7610: ARRAY
7611: ARRAY
7612: PPUSH
7613: CALL_OW 1
7617: ST_TO_ADDR
// end ;
7618: GO 7552
7620: POP
7621: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
7622: LD_ADDR_EXP 32
7626: PUSH
7627: LD_INT 3
7629: PUSH
7630: LD_EXP 12
7634: MUL
7635: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
7636: LD_ADDR_EXP 30
7640: PUSH
7641: LD_VAR 0 3
7645: PUSH
7646: LD_EXP 32
7650: MUL
7651: ST_TO_ADDR
// apemanLimit := apemanNumber ;
7652: LD_ADDR_EXP 31
7656: PUSH
7657: LD_EXP 30
7661: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7662: LD_ADDR_EXP 33
7666: PUSH
7667: LD_INT 0
7669: PUSH
7670: LD_INT 0
7672: PUSH
7673: LD_INT 0
7675: PUSH
7676: LD_INT 0
7678: PUSH
7679: LD_INT 0
7681: PUSH
7682: LD_INT 0
7684: PUSH
7685: LD_INT 0
7687: PUSH
7688: LD_INT 0
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: LIST
7698: LIST
7699: LIST
7700: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7701: LD_ADDR_EXP 34
7705: PUSH
7706: LD_INT 0
7708: PUSH
7709: LD_INT 0
7711: PUSH
7712: LD_INT 0
7714: PUSH
7715: LD_INT 0
7717: PUSH
7718: LD_INT 0
7720: PUSH
7721: LD_INT 0
7723: PUSH
7724: LD_INT 0
7726: PUSH
7727: LD_INT 0
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: ST_TO_ADDR
// apeLevel := 1 ;
7740: LD_ADDR_EXP 35
7744: PUSH
7745: LD_INT 1
7747: ST_TO_ADDR
// if not apemanNumber then
7748: LD_EXP 30
7752: NOT
7753: IFFALSE 7757
// exit ;
7755: GO 7953
// for i := 1 to apemanPerPlayer do
7757: LD_ADDR_VAR 0 2
7761: PUSH
7762: DOUBLE
7763: LD_INT 1
7765: DEC
7766: ST_TO_ADDR
7767: LD_EXP 32
7771: PUSH
7772: FOR_TO
7773: IFFALSE 7951
// begin for j := 1 to Side_Positions do
7775: LD_ADDR_VAR 0 4
7779: PUSH
7780: DOUBLE
7781: LD_INT 1
7783: DEC
7784: ST_TO_ADDR
7785: LD_EXP 18
7789: PUSH
7790: FOR_TO
7791: IFFALSE 7947
// if Side_Positions [ j ] then
7793: LD_EXP 18
7797: PUSH
7798: LD_VAR 0 4
7802: ARRAY
7803: IFFALSE 7945
// begin pos := Side_Positions [ j ] ;
7805: LD_ADDR_VAR 0 6
7809: PUSH
7810: LD_EXP 18
7814: PUSH
7815: LD_VAR 0 4
7819: ARRAY
7820: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
7821: LD_ADDR_EXP 34
7825: PUSH
7826: LD_EXP 34
7830: PPUSH
7831: LD_VAR 0 4
7835: PPUSH
7836: LD_EXP 34
7840: PUSH
7841: LD_VAR 0 4
7845: ARRAY
7846: PUSH
7847: LD_INT 1
7849: PLUS
7850: PPUSH
7851: CALL_OW 1
7855: ST_TO_ADDR
// ape := PrepareApeman ;
7856: LD_ADDR_VAR 0 5
7860: PUSH
7861: CALL 7958 0 0
7865: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
7866: LD_ADDR_EXP 33
7870: PUSH
7871: LD_EXP 33
7875: PPUSH
7876: LD_VAR 0 4
7880: PPUSH
7881: LD_EXP 33
7885: PUSH
7886: LD_VAR 0 4
7890: ARRAY
7891: PPUSH
7892: LD_EXP 33
7896: PUSH
7897: LD_VAR 0 4
7901: ARRAY
7902: PUSH
7903: LD_INT 1
7905: PLUS
7906: PPUSH
7907: LD_VAR 0 5
7911: PPUSH
7912: CALL_OW 1
7916: PPUSH
7917: CALL_OW 1
7921: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
7922: LD_VAR 0 5
7926: PPUSH
7927: LD_EXP 36
7931: PUSH
7932: LD_VAR 0 4
7936: ARRAY
7937: PPUSH
7938: LD_INT 0
7940: PPUSH
7941: CALL_OW 49
// end ;
7945: GO 7790
7947: POP
7948: POP
// end ;
7949: GO 7772
7951: POP
7952: POP
// end ;
7953: LD_VAR 0 1
7957: RET
// export function PrepareApeman ; var bonus ; begin
7958: LD_INT 0
7960: PPUSH
7961: PPUSH
// uc_side := 0 ;
7962: LD_ADDR_OWVAR 20
7966: PUSH
7967: LD_INT 0
7969: ST_TO_ADDR
// uc_nation := 0 ;
7970: LD_ADDR_OWVAR 21
7974: PUSH
7975: LD_INT 0
7977: ST_TO_ADDR
// InitHc ;
7978: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
7982: LD_ADDR_VAR 0 2
7986: PUSH
7987: LD_INT 1
7989: NEG
7990: PUSH
7991: LD_INT 0
7993: PUSH
7994: LD_INT 1
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: LIST
8001: PUSH
8002: LD_OWVAR 1
8006: PUSH
8007: LD_INT 3
8009: MOD
8010: PUSH
8011: LD_INT 1
8013: PLUS
8014: ARRAY
8015: ST_TO_ADDR
// hc_class := class_apeman ;
8016: LD_ADDR_OWVAR 28
8020: PUSH
8021: LD_INT 12
8023: ST_TO_ADDR
// hc_gallery :=  ;
8024: LD_ADDR_OWVAR 33
8028: PUSH
8029: LD_STRING 
8031: ST_TO_ADDR
// hc_name :=  ;
8032: LD_ADDR_OWVAR 26
8036: PUSH
8037: LD_STRING 
8039: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
8040: LD_ADDR_OWVAR 31
8044: PUSH
8045: LD_EXP 35
8049: PUSH
8050: LD_VAR 0 2
8054: PLUS
8055: PUSH
8056: LD_EXP 35
8060: PUSH
8061: LD_VAR 0 2
8065: PLUS
8066: PUSH
8067: LD_EXP 35
8071: PUSH
8072: LD_VAR 0 2
8076: PLUS
8077: PUSH
8078: LD_EXP 35
8082: PUSH
8083: LD_VAR 0 2
8087: PLUS
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
8095: LD_ADDR_OWVAR 35
8099: PUSH
8100: LD_INT 10
8102: PUSH
8103: LD_VAR 0 2
8107: MUL
8108: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
8109: LD_ADDR_OWVAR 29
8113: PUSH
8114: LD_INT 12
8116: PUSH
8117: LD_INT 10
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: ST_TO_ADDR
// result := CreateHuman ;
8124: LD_ADDR_VAR 0 1
8128: PUSH
8129: CALL_OW 44
8133: ST_TO_ADDR
// end ;
8134: LD_VAR 0 1
8138: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
8139: LD_INT 0
8141: PPUSH
8142: PPUSH
8143: PPUSH
// if not ape then
8144: LD_VAR 0 1
8148: NOT
8149: IFFALSE 8153
// exit ;
8151: GO 8278
// side := GetSide ( ape ) ;
8153: LD_ADDR_VAR 0 3
8157: PUSH
8158: LD_VAR 0 1
8162: PPUSH
8163: CALL_OW 255
8167: ST_TO_ADDR
// if not side then
8168: LD_VAR 0 3
8172: NOT
8173: IFFALSE 8227
// begin for i = 1 to apemanPos do
8175: LD_ADDR_VAR 0 4
8179: PUSH
8180: DOUBLE
8181: LD_INT 1
8183: DEC
8184: ST_TO_ADDR
8185: LD_EXP 33
8189: PUSH
8190: FOR_TO
8191: IFFALSE 8225
// if ape in apemanPos [ i ] then
8193: LD_VAR 0 1
8197: PUSH
8198: LD_EXP 33
8202: PUSH
8203: LD_VAR 0 4
8207: ARRAY
8208: IN
8209: IFFALSE 8223
// begin side := i ;
8211: LD_ADDR_VAR 0 3
8215: PUSH
8216: LD_VAR 0 4
8220: ST_TO_ADDR
// break ;
8221: GO 8225
// end ;
8223: GO 8190
8225: POP
8226: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
8227: LD_ADDR_EXP 33
8231: PUSH
8232: LD_EXP 33
8236: PPUSH
8237: LD_VAR 0 3
8241: PPUSH
8242: LD_EXP 33
8246: PUSH
8247: LD_VAR 0 3
8251: ARRAY
8252: PUSH
8253: LD_VAR 0 1
8257: DIFF
8258: PPUSH
8259: CALL_OW 1
8263: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
8264: LD_ADDR_EXP 30
8268: PUSH
8269: LD_EXP 30
8273: PUSH
8274: LD_INT 1
8276: MINUS
8277: ST_TO_ADDR
// end ; end_of_file
8278: LD_VAR 0 2
8282: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
8283: LD_VAR 0 1
8287: PPUSH
8288: CALL_OW 266
8292: PUSH
8293: LD_INT 0
8295: PUSH
8296: LD_INT 1
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: IN
8303: IFFALSE 8328
// SetBName ( b , @ & GetSide ( b ) ) ;
8305: LD_VAR 0 1
8309: PPUSH
8310: LD_STRING @
8312: PUSH
8313: LD_VAR 0 1
8317: PPUSH
8318: CALL_OW 255
8322: STR
8323: PPUSH
8324: CALL_OW 500
// if def_game_rules then
8328: LD_EXP 57
8332: IFFALSE 8369
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
8334: LD_VAR 0 1
8338: PPUSH
8339: LD_VAR 0 1
8343: PPUSH
8344: CALL_OW 266
8348: PPUSH
8349: LD_VAR 0 1
8353: PPUSH
8354: CALL_OW 255
8358: PPUSH
8359: LD_INT 0
8361: PPUSH
8362: LD_INT 1
8364: PPUSH
8365: CALL 18445 0 5
// end ;
8369: PPOPN 2
8371: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
8372: LD_VAR 0 1
8376: PPUSH
8377: CALL_OW 266
8381: PUSH
8382: LD_INT 0
8384: PUSH
8385: LD_INT 1
8387: PUSH
8388: EMPTY
8389: LIST
8390: LIST
8391: IN
8392: IFFALSE 8417
// SetBName ( b , @ & GetSide ( b ) ) ;
8394: LD_VAR 0 1
8398: PPUSH
8399: LD_STRING @
8401: PUSH
8402: LD_VAR 0 1
8406: PPUSH
8407: CALL_OW 255
8411: STR
8412: PPUSH
8413: CALL_OW 500
// if def_game_rules then
8417: LD_EXP 57
8421: IFFALSE 8460
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
8423: LD_VAR 0 1
8427: PPUSH
8428: LD_VAR 0 1
8432: PPUSH
8433: CALL_OW 266
8437: PPUSH
8438: LD_VAR 0 1
8442: PPUSH
8443: CALL_OW 255
8447: PPUSH
8448: LD_VAR 0 2
8452: PPUSH
8453: LD_INT 1
8455: PPUSH
8456: CALL 18445 0 5
// end ;
8460: PPOPN 3
8462: END
// on VehicleConstructed ( veh , fac ) do var side ;
8463: LD_INT 0
8465: PPUSH
// begin if GetControl ( veh ) = control_apeman then
8466: LD_VAR 0 1
8470: PPUSH
8471: CALL_OW 263
8475: PUSH
8476: LD_INT 5
8478: EQUAL
8479: IFFALSE 8621
// begin side := GetSide ( veh ) ;
8481: LD_ADDR_VAR 0 3
8485: PUSH
8486: LD_VAR 0 1
8490: PPUSH
8491: CALL_OW 255
8495: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
8496: LD_ADDR_EXP 33
8500: PUSH
8501: LD_EXP 33
8505: PPUSH
8506: LD_VAR 0 3
8510: PPUSH
8511: LD_EXP 33
8515: PUSH
8516: LD_VAR 0 3
8520: ARRAY
8521: PPUSH
8522: LD_INT 52
8524: PUSH
8525: EMPTY
8526: LIST
8527: PPUSH
8528: CALL_OW 72
8532: PUSH
8533: LD_INT 22
8535: PUSH
8536: LD_VAR 0 3
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: PUSH
8545: LD_INT 2
8547: PUSH
8548: LD_INT 33
8550: PUSH
8551: LD_INT 5
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: PUSH
8558: LD_INT 25
8560: PUSH
8561: LD_INT 12
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: PUSH
8568: LD_INT 25
8570: PUSH
8571: LD_INT 15
8573: PUSH
8574: EMPTY
8575: LIST
8576: LIST
8577: PUSH
8578: LD_INT 25
8580: PUSH
8581: LD_INT 16
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: PUSH
8588: LD_INT 25
8590: PUSH
8591: LD_INT 17
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: PUSH
8598: EMPTY
8599: LIST
8600: LIST
8601: LIST
8602: LIST
8603: LIST
8604: LIST
8605: PUSH
8606: EMPTY
8607: LIST
8608: LIST
8609: PPUSH
8610: CALL_OW 69
8614: UNION
8615: PPUSH
8616: CALL_OW 1
8620: ST_TO_ADDR
// end ; end ;
8621: PPOPN 3
8623: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
8624: LD_VAR 0 1
8628: PPUSH
8629: LD_VAR 0 2
8633: PPUSH
8634: LD_VAR 0 3
8638: PPUSH
8639: LD_OWVAR 2
8643: PPUSH
8644: CALL 19123 0 4
8648: PPOPN 3
8650: END
// export function DE_Triggers ; begin
8651: LD_INT 0
8653: PPUSH
// disable ( 01 ) ;
8654: LD_INT 1
8656: DISABLE_MARKED
// disable ( 02 ) ;
8657: LD_INT 2
8659: DISABLE_MARKED
// disable ( 03 ) ;
8660: LD_INT 3
8662: DISABLE_MARKED
// disable ( 04 ) ;
8663: LD_INT 4
8665: DISABLE_MARKED
// disable ( 05 ) ;
8666: LD_INT 5
8668: DISABLE_MARKED
// disable ( 06 ) ;
8669: LD_INT 6
8671: DISABLE_MARKED
// disable ( 07 ) ;
8672: LD_INT 7
8674: DISABLE_MARKED
// disable ( 10 ) ;
8675: LD_INT 10
8677: DISABLE_MARKED
// disable ( 11 ) ;
8678: LD_INT 11
8680: DISABLE_MARKED
// disable ( 12 ) ;
8681: LD_INT 12
8683: DISABLE_MARKED
// disable ( 13 ) ;
8684: LD_INT 13
8686: DISABLE_MARKED
// disable ( 19 ) ;
8687: LD_INT 19
8689: DISABLE_MARKED
// disable ( 40 ) ;
8690: LD_INT 40
8692: DISABLE_MARKED
// disable ( 41 ) ;
8693: LD_INT 41
8695: DISABLE_MARKED
// disable ( 98 ) ;
8696: LD_INT 98
8698: DISABLE_MARKED
// disable ( 99 ) ;
8699: LD_INT 99
8701: DISABLE_MARKED
// disable ( 55 ) ;
8702: LD_INT 55
8704: DISABLE_MARKED
// disable ( 400 ) ;
8705: LD_INT 400
8707: DISABLE_MARKED
// disable ( 401 ) ;
8708: LD_INT 401
8710: DISABLE_MARKED
// end ; end_of_file
8711: LD_VAR 0 1
8715: RET
// function CanWinLoose ; begin
8716: LD_INT 0
8718: PPUSH
// Result := true ;
8719: LD_ADDR_VAR 0 1
8723: PUSH
8724: LD_INT 1
8726: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8727: CALL_OW 518
8731: PUSH
8732: CALL_OW 519
8736: PUSH
8737: LD_INT 0
8739: GREATER
8740: AND
8741: IFFALSE 8751
// Result := false ;
8743: LD_ADDR_VAR 0 1
8747: PUSH
8748: LD_INT 0
8750: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8751: CALL_OW 531
8755: PUSH
8756: CALL_OW 519
8760: PUSH
8761: LD_INT 1
8763: GREATER
8764: AND
8765: IFFALSE 8775
// Result := false ;
8767: LD_ADDR_VAR 0 1
8771: PUSH
8772: LD_INT 0
8774: ST_TO_ADDR
// end ;
8775: LD_VAR 0 1
8779: RET
// function HasPower ( i ) ; begin
8780: LD_INT 0
8782: PPUSH
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8783: LD_ADDR_VAR 0 2
8787: PUSH
8788: LD_INT 22
8790: PUSH
8791: LD_VAR 0 1
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: PUSH
8800: LD_INT 2
8802: PUSH
8803: LD_INT 21
8805: PUSH
8806: LD_INT 1
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: PUSH
8813: LD_INT 30
8815: PUSH
8816: LD_INT 0
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: PUSH
8823: LD_INT 30
8825: PUSH
8826: LD_INT 1
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: PUSH
8833: EMPTY
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PPUSH
8843: CALL_OW 69
8847: ST_TO_ADDR
// end ;
8848: LD_VAR 0 2
8852: RET
// function AlliedSides ( i , j ) ; begin
8853: LD_INT 0
8855: PPUSH
// Result := false ;
8856: LD_ADDR_VAR 0 3
8860: PUSH
8861: LD_INT 0
8863: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8864: LD_VAR 0 1
8868: PPUSH
8869: LD_VAR 0 2
8873: PPUSH
8874: CALL_OW 81
8878: PUSH
8879: LD_INT 1
8881: EQUAL
8882: PUSH
8883: LD_VAR 0 2
8887: PPUSH
8888: LD_VAR 0 1
8892: PPUSH
8893: CALL_OW 81
8897: PUSH
8898: LD_INT 1
8900: EQUAL
8901: AND
8902: PUSH
8903: LD_VAR 0 1
8907: PPUSH
8908: CALL_OW 83
8912: AND
8913: PUSH
8914: LD_VAR 0 2
8918: PPUSH
8919: CALL_OW 83
8923: AND
8924: IFFALSE 8934
// Result := true ;
8926: LD_ADDR_VAR 0 3
8930: PUSH
8931: LD_INT 1
8933: ST_TO_ADDR
// end ;
8934: LD_VAR 0 3
8938: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
8939: CALL 8716 0 0
8943: IFFALSE 8952
8945: GO 8947
8947: DISABLE
// YouLostInMultiplayer ;
8948: CALL_OW 107
8952: END
// every 0 0$3 trigger CanWinLoose marked 401 do
8953: CALL 8716 0 0
8957: IFFALSE 8981
8959: GO 8961
8961: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
8962: LD_EXP 19
8966: PUSH
8967: LD_OWVAR 2
8971: ARRAY
8972: PPUSH
8973: CALL 19165 0 1
// YouWinInMultiplayer ;
8977: CALL_OW 106
// end ;
8981: END
// every 0 0$3 marked 98 do var i , CanWin ;
8982: GO 8984
8984: DISABLE
8985: LD_INT 0
8987: PPUSH
8988: PPUSH
// begin if not HasPower ( your_side ) then
8989: LD_OWVAR 2
8993: PPUSH
8994: CALL 8780 0 1
8998: NOT
8999: IFFALSE 9010
// begin Multiplayer_Loose_Message ;
9001: CALL_OW 521
// enable ( 400 ) ;
9005: LD_INT 400
9007: ENABLE_MARKED
// end else
9008: GO 9143
// begin CanWin := true ;
9010: LD_ADDR_VAR 0 2
9014: PUSH
9015: LD_INT 1
9017: ST_TO_ADDR
// for i := 1 to 8 do
9018: LD_ADDR_VAR 0 1
9022: PUSH
9023: DOUBLE
9024: LD_INT 1
9026: DEC
9027: ST_TO_ADDR
9028: LD_INT 8
9030: PUSH
9031: FOR_TO
9032: IFFALSE 9129
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9034: LD_EXP 18
9038: PUSH
9039: LD_VAR 0 1
9043: ARRAY
9044: PUSH
9045: LD_VAR 0 1
9049: PPUSH
9050: CALL_OW 108
9054: AND
9055: PUSH
9056: LD_VAR 0 1
9060: PUSH
9061: LD_OWVAR 2
9065: NONEQUAL
9066: AND
9067: IFFALSE 9127
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
9069: LD_EXP 16
9073: PUSH
9074: LD_VAR 0 1
9078: ARRAY
9079: NOT
9080: PUSH
9081: LD_EXP 16
9085: PUSH
9086: LD_VAR 0 1
9090: ARRAY
9091: PUSH
9092: LD_EXP 16
9096: PUSH
9097: LD_OWVAR 2
9101: ARRAY
9102: NONEQUAL
9103: OR
9104: IFFALSE 9127
// if HasPower ( i ) then
9106: LD_VAR 0 1
9110: PPUSH
9111: CALL 8780 0 1
9115: IFFALSE 9127
// begin CanWin := false ;
9117: LD_ADDR_VAR 0 2
9121: PUSH
9122: LD_INT 0
9124: ST_TO_ADDR
// break ;
9125: GO 9129
// end ;
9127: GO 9031
9129: POP
9130: POP
// if CanWin then
9131: LD_VAR 0 2
9135: IFFALSE 9142
// enable ( 401 ) else
9137: LD_INT 401
9139: ENABLE_MARKED
9140: GO 9143
// enable ;
9142: ENABLE
// end ; end ;
9143: PPOPN 2
9145: END
// every 0 0$3 marked 99 do var i , CanWin ;
9146: GO 9148
9148: DISABLE
9149: LD_INT 0
9151: PPUSH
9152: PPUSH
// begin if not HasPower ( your_side ) then
9153: LD_OWVAR 2
9157: PPUSH
9158: CALL 8780 0 1
9162: NOT
9163: IFFALSE 9174
// begin Multiplayer_Loose_Message ;
9165: CALL_OW 521
// enable ( 400 ) ;
9169: LD_INT 400
9171: ENABLE_MARKED
// end else
9172: GO 9287
// begin CanWin := true ;
9174: LD_ADDR_VAR 0 2
9178: PUSH
9179: LD_INT 1
9181: ST_TO_ADDR
// for i := 1 to 8 do
9182: LD_ADDR_VAR 0 1
9186: PUSH
9187: DOUBLE
9188: LD_INT 1
9190: DEC
9191: ST_TO_ADDR
9192: LD_INT 8
9194: PUSH
9195: FOR_TO
9196: IFFALSE 9273
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9198: LD_EXP 18
9202: PUSH
9203: LD_VAR 0 1
9207: ARRAY
9208: PUSH
9209: LD_VAR 0 1
9213: PPUSH
9214: CALL_OW 108
9218: AND
9219: PUSH
9220: LD_VAR 0 1
9224: PUSH
9225: LD_OWVAR 2
9229: NONEQUAL
9230: AND
9231: IFFALSE 9271
// if not AlliedSides ( i , your_side ) then
9233: LD_VAR 0 1
9237: PPUSH
9238: LD_OWVAR 2
9242: PPUSH
9243: CALL 8853 0 2
9247: NOT
9248: IFFALSE 9271
// if HasPower ( i ) then
9250: LD_VAR 0 1
9254: PPUSH
9255: CALL 8780 0 1
9259: IFFALSE 9271
// begin CanWin := false ;
9261: LD_ADDR_VAR 0 2
9265: PUSH
9266: LD_INT 0
9268: ST_TO_ADDR
// break ;
9269: GO 9273
// end ;
9271: GO 9195
9273: POP
9274: POP
// if CanWin then
9275: LD_VAR 0 2
9279: IFFALSE 9286
// enable ( 401 ) else
9281: LD_INT 401
9283: ENABLE_MARKED
9284: GO 9287
// enable ;
9286: ENABLE
// end ; end ; end_of_file
9287: PPOPN 2
9289: END
// var time ; export lidi , krabice , opoce ; export cper , cperiode ; var depot1 , depot2 ; var vlajka1 , vlajka2 ; export depotpositions , areas ; var podvozky , zbrane ; export pos1side , pos2side ; var pos1base , pos2base ; var left_score , right_score ; export debug , ctf ; export mp_sides_teams_ , mp_sides_nations_ , mp_sides_positions_ , mp_sides_players_counts_ ; var cft_01 , cft_02 , cft_03 , cft_04 , cft_05 , cft_06 , cft_07 ; export nonctf_10 , nonctf_11 , nonctf_12 , nonctf_13 ; var stmp , stmp2 , cl ; export function starting_ctf ; begin
9290: LD_INT 0
9292: PPUSH
// cft_01 = 01 ;
9293: LD_ADDR_LOC 24
9297: PUSH
9298: LD_INT 1
9300: ST_TO_ADDR
// cft_02 = 02 ;
9301: LD_ADDR_LOC 25
9305: PUSH
9306: LD_INT 2
9308: ST_TO_ADDR
// cft_03 = 03 ;
9309: LD_ADDR_LOC 26
9313: PUSH
9314: LD_INT 3
9316: ST_TO_ADDR
// cft_04 = 04 ;
9317: LD_ADDR_LOC 27
9321: PUSH
9322: LD_INT 4
9324: ST_TO_ADDR
// cft_05 = 05 ;
9325: LD_ADDR_LOC 28
9329: PUSH
9330: LD_INT 5
9332: ST_TO_ADDR
// cft_06 = 06 ;
9333: LD_ADDR_LOC 29
9337: PUSH
9338: LD_INT 6
9340: ST_TO_ADDR
// cft_07 = 07 ;
9341: LD_ADDR_LOC 30
9345: PUSH
9346: LD_INT 7
9348: ST_TO_ADDR
// nonctf_10 = 10 ;
9349: LD_ADDR_EXP 52
9353: PUSH
9354: LD_INT 10
9356: ST_TO_ADDR
// nonctf_11 = 11 ;
9357: LD_ADDR_EXP 53
9361: PUSH
9362: LD_INT 11
9364: ST_TO_ADDR
// nonctf_12 = 12 ;
9365: LD_ADDR_EXP 54
9369: PUSH
9370: LD_INT 12
9372: ST_TO_ADDR
// nonctf_13 = 13 ;
9373: LD_ADDR_EXP 55
9377: PUSH
9378: LD_INT 13
9380: ST_TO_ADDR
// disable ( cft_01 ) ;
9381: LD_LOC 24
9385: DISABLE_MARKED
// disable ( cft_02 ) ;
9386: LD_LOC 25
9390: DISABLE_MARKED
// disable ( cft_03 ) ;
9391: LD_LOC 26
9395: DISABLE_MARKED
// disable ( cft_04 ) ;
9396: LD_LOC 27
9400: DISABLE_MARKED
// disable ( cft_05 ) ;
9401: LD_LOC 28
9405: DISABLE_MARKED
// disable ( cft_06 ) ;
9406: LD_LOC 29
9410: DISABLE_MARKED
// disable ( cft_07 ) ;
9411: LD_LOC 30
9415: DISABLE_MARKED
// disable ( nonctf_10 ) ;
9416: LD_EXP 52
9420: DISABLE_MARKED
// disable ( nonctf_11 ) ;
9421: LD_EXP 53
9425: DISABLE_MARKED
// disable ( nonctf_12 ) ;
9426: LD_EXP 54
9430: DISABLE_MARKED
// disable ( nonctf_13 ) ;
9431: LD_EXP 55
9435: DISABLE_MARKED
// debug = false ;
9436: LD_ADDR_EXP 46
9440: PUSH
9441: LD_INT 0
9443: ST_TO_ADDR
// if not multiplayer then
9444: LD_OWVAR 4
9448: NOT
9449: IFFALSE 9609
// begin mp_sides_teams_ = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9451: LD_ADDR_EXP 48
9455: PUSH
9456: LD_INT 0
9458: PUSH
9459: LD_INT 0
9461: PUSH
9462: LD_INT 0
9464: PUSH
9465: LD_INT 0
9467: PUSH
9468: LD_INT 0
9470: PUSH
9471: LD_INT 0
9473: PUSH
9474: LD_INT 0
9476: PUSH
9477: LD_INT 0
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: ST_TO_ADDR
// mp_sides_nations_ = [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9490: LD_ADDR_EXP 49
9494: PUSH
9495: LD_INT 1
9497: PUSH
9498: LD_INT 2
9500: PUSH
9501: LD_INT 0
9503: PUSH
9504: LD_INT 0
9506: PUSH
9507: LD_INT 0
9509: PUSH
9510: LD_INT 0
9512: PUSH
9513: LD_INT 0
9515: PUSH
9516: LD_INT 0
9518: PUSH
9519: EMPTY
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: ST_TO_ADDR
// mp_sides_positions_ = [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9529: LD_ADDR_EXP 50
9533: PUSH
9534: LD_INT 1
9536: PUSH
9537: LD_INT 2
9539: PUSH
9540: LD_INT 0
9542: PUSH
9543: LD_INT 0
9545: PUSH
9546: LD_INT 0
9548: PUSH
9549: LD_INT 0
9551: PUSH
9552: LD_INT 0
9554: PUSH
9555: LD_INT 0
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: ST_TO_ADDR
// mp_sides_players_counts_ = [ 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9568: LD_ADDR_EXP 51
9572: PUSH
9573: LD_INT 1
9575: PUSH
9576: LD_INT 1
9578: PUSH
9579: LD_INT 0
9581: PUSH
9582: LD_INT 0
9584: PUSH
9585: LD_INT 0
9587: PUSH
9588: LD_INT 0
9590: PUSH
9591: LD_INT 0
9593: PUSH
9594: LD_INT 0
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: ST_TO_ADDR
// end else
9607: GO 9649
// begin mp_sides_teams_ = mp_sides_teams ;
9609: LD_ADDR_EXP 48
9613: PUSH
9614: LD_OWVAR 15
9618: ST_TO_ADDR
// mp_sides_nations_ = mp_sides_nations ;
9619: LD_ADDR_EXP 49
9623: PUSH
9624: LD_OWVAR 16
9628: ST_TO_ADDR
// mp_sides_positions_ = mp_sides_positions ;
9629: LD_ADDR_EXP 50
9633: PUSH
9634: LD_OWVAR 17
9638: ST_TO_ADDR
// mp_sides_players_counts_ = mp_sides_players_counts ;
9639: LD_ADDR_EXP 51
9643: PUSH
9644: LD_OWVAR 18
9648: ST_TO_ADDR
// end ; if debug then
9649: LD_EXP 46
9653: IFFALSE 9735
// begin debuglog ( [ side , your_side ] ) ;
9655: LD_STRING side
9657: PUSH
9658: LD_OWVAR 2
9662: PUSH
9663: EMPTY
9664: LIST
9665: LIST
9666: PPUSH
9667: CALL_OW 359
// debuglog ( [ teams , mp_sides_teams_ ] ) ;
9671: LD_STRING teams
9673: PUSH
9674: LD_EXP 48
9678: PUSH
9679: EMPTY
9680: LIST
9681: LIST
9682: PPUSH
9683: CALL_OW 359
// debuglog ( [ nations , mp_sides_nations_ ] ) ;
9687: LD_STRING nations
9689: PUSH
9690: LD_EXP 49
9694: PUSH
9695: EMPTY
9696: LIST
9697: LIST
9698: PPUSH
9699: CALL_OW 359
// debuglog ( [ positions , mp_sides_positions_ ] ) ;
9703: LD_STRING positions
9705: PUSH
9706: LD_EXP 50
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: PPUSH
9715: CALL_OW 359
// debuglog ( [ pl. counts , mp_sides_players_counts_ ] ) ;
9719: LD_STRING pl. counts
9721: PUSH
9722: LD_EXP 51
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: PPUSH
9731: CALL_OW 359
// end ; depotpositions = [ [ 34 , 60 , 1 ] , [ 185 , 60 , 4 ] ] ;
9735: LD_ADDR_EXP 42
9739: PUSH
9740: LD_INT 34
9742: PUSH
9743: LD_INT 60
9745: PUSH
9746: LD_INT 1
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: LIST
9753: PUSH
9754: LD_INT 185
9756: PUSH
9757: LD_INT 60
9759: PUSH
9760: LD_INT 4
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: ST_TO_ADDR
// areas = [ vlevo , vpravo ] ;
9772: LD_ADDR_EXP 43
9776: PUSH
9777: LD_INT 2
9779: PUSH
9780: LD_INT 3
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: ST_TO_ADDR
// if mp_game_type = 3 then
9787: LD_OWVAR 6
9791: PUSH
9792: LD_INT 3
9794: EQUAL
9795: IFFALSE 9803
// begin other_game ;
9797: CALL 12875 0 0
// exit ;
9801: GO 11251
// end ; ctf = true ;
9803: LD_ADDR_EXP 47
9807: PUSH
9808: LD_INT 1
9810: ST_TO_ADDR
// enable ( cft_01 ) ;
9811: LD_LOC 24
9815: ENABLE_MARKED
// enable ( cft_02 ) ;
9816: LD_LOC 25
9820: ENABLE_MARKED
// enable ( cft_05 ) ;
9821: LD_LOC 28
9825: ENABLE_MARKED
// enable ( cft_06 ) ;
9826: LD_LOC 29
9830: ENABLE_MARKED
// enable ( cft_07 ) ;
9831: LD_LOC 30
9835: ENABLE_MARKED
// podvozky = [ us_medium_wheeled , ar_medium_trike , ru_medium_wheeled ] ;
9836: LD_ADDR_LOC 18
9840: PUSH
9841: LD_INT 2
9843: PUSH
9844: LD_INT 13
9846: PUSH
9847: LD_INT 21
9849: PUSH
9850: EMPTY
9851: LIST
9852: LIST
9853: LIST
9854: ST_TO_ADDR
// zbrane = [ us_cargo_bay , ar_cargo_bay , ru_cargo_bay ] ;
9855: LD_ADDR_LOC 19
9859: PUSH
9860: LD_INT 12
9862: PUSH
9863: LD_INT 32
9865: PUSH
9866: LD_INT 51
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: LIST
9873: ST_TO_ADDR
// left_score = 0 ;
9874: LD_ADDR_LOC 22
9878: PUSH
9879: LD_INT 0
9881: ST_TO_ADDR
// right_score = 0 ;
9882: LD_ADDR_LOC 23
9886: PUSH
9887: LD_INT 0
9889: ST_TO_ADDR
// if multiplayer then
9890: LD_OWVAR 4
9894: IFFALSE 9950
// begin lidi = getmultiplayersetting ( 1 ) ;
9896: LD_ADDR_EXP 37
9900: PUSH
9901: LD_INT 1
9903: PPUSH
9904: CALL_OW 426
9908: ST_TO_ADDR
// krabice = getmultiplayersetting ( 2 ) ;
9909: LD_ADDR_EXP 38
9913: PUSH
9914: LD_INT 2
9916: PPUSH
9917: CALL_OW 426
9921: ST_TO_ADDR
// opoce = getmultiplayersetting ( 3 ) ;
9922: LD_ADDR_EXP 39
9926: PUSH
9927: LD_INT 3
9929: PPUSH
9930: CALL_OW 426
9934: ST_TO_ADDR
// time = getmultiplayersetting ( 4 ) ;
9935: LD_ADDR_LOC 13
9939: PUSH
9940: LD_INT 4
9942: PPUSH
9943: CALL_OW 426
9947: ST_TO_ADDR
// end else
9948: GO 9982
// begin lidi = 1 ;
9950: LD_ADDR_EXP 37
9954: PUSH
9955: LD_INT 1
9957: ST_TO_ADDR
// krabice = 1 ;
9958: LD_ADDR_EXP 38
9962: PUSH
9963: LD_INT 1
9965: ST_TO_ADDR
// opoce = 3 ;
9966: LD_ADDR_EXP 39
9970: PUSH
9971: LD_INT 3
9973: ST_TO_ADDR
// time = 2 ;
9974: LD_ADDR_LOC 13
9978: PUSH
9979: LD_INT 2
9981: ST_TO_ADDR
// end ; case lidi of 0 :
9982: LD_EXP 37
9986: PUSH
9987: LD_INT 0
9989: DOUBLE
9990: EQUAL
9991: IFTRUE 9995
9993: GO 10006
9995: POP
// lidi = 9 ; 1 :
9996: LD_ADDR_EXP 37
10000: PUSH
10001: LD_INT 9
10003: ST_TO_ADDR
10004: GO 10083
10006: LD_INT 1
10008: DOUBLE
10009: EQUAL
10010: IFTRUE 10014
10012: GO 10025
10014: POP
// lidi = 13 ; 2 :
10015: LD_ADDR_EXP 37
10019: PUSH
10020: LD_INT 13
10022: ST_TO_ADDR
10023: GO 10083
10025: LD_INT 2
10027: DOUBLE
10028: EQUAL
10029: IFTRUE 10033
10031: GO 10044
10033: POP
// lidi = 19 ; 3 :
10034: LD_ADDR_EXP 37
10038: PUSH
10039: LD_INT 19
10041: ST_TO_ADDR
10042: GO 10083
10044: LD_INT 3
10046: DOUBLE
10047: EQUAL
10048: IFTRUE 10052
10050: GO 10063
10052: POP
// lidi = 23 ; 4 :
10053: LD_ADDR_EXP 37
10057: PUSH
10058: LD_INT 23
10060: ST_TO_ADDR
10061: GO 10083
10063: LD_INT 4
10065: DOUBLE
10066: EQUAL
10067: IFTRUE 10071
10069: GO 10082
10071: POP
// lidi = 29 ; end ;
10072: LD_ADDR_EXP 37
10076: PUSH
10077: LD_INT 29
10079: ST_TO_ADDR
10080: GO 10083
10082: POP
// case krabice of 0 :
10083: LD_EXP 38
10087: PUSH
10088: LD_INT 0
10090: DOUBLE
10091: EQUAL
10092: IFTRUE 10096
10094: GO 10107
10096: POP
// cperiode = 1 1$30 ; 1 :
10097: LD_ADDR_EXP 41
10101: PUSH
10102: LD_INT 3150
10104: ST_TO_ADDR
10105: GO 10146
10107: LD_INT 1
10109: DOUBLE
10110: EQUAL
10111: IFTRUE 10115
10113: GO 10126
10115: POP
// cperiode = 1 1$00 ; 2 :
10116: LD_ADDR_EXP 41
10120: PUSH
10121: LD_INT 2100
10123: ST_TO_ADDR
10124: GO 10146
10126: LD_INT 2
10128: DOUBLE
10129: EQUAL
10130: IFTRUE 10134
10132: GO 10145
10134: POP
// cperiode = 0 0$30 ; end ;
10135: LD_ADDR_EXP 41
10139: PUSH
10140: LD_INT 1050
10142: ST_TO_ADDR
10143: GO 10146
10145: POP
// cper = 0 0$10 ;
10146: LD_ADDR_EXP 40
10150: PUSH
10151: LD_INT 350
10153: ST_TO_ADDR
// case opoce of 0 :
10154: LD_EXP 39
10158: PUSH
10159: LD_INT 0
10161: DOUBLE
10162: EQUAL
10163: IFTRUE 10167
10165: GO 10178
10167: POP
// opoce = 0 ; 1 :
10168: LD_ADDR_EXP 39
10172: PUSH
10173: LD_INT 0
10175: ST_TO_ADDR
10176: GO 10293
10178: LD_INT 1
10180: DOUBLE
10181: EQUAL
10182: IFTRUE 10186
10184: GO 10197
10186: POP
// opoce = 3 ; 2 :
10187: LD_ADDR_EXP 39
10191: PUSH
10192: LD_INT 3
10194: ST_TO_ADDR
10195: GO 10293
10197: LD_INT 2
10199: DOUBLE
10200: EQUAL
10201: IFTRUE 10205
10203: GO 10216
10205: POP
// opoce = 7 ; 3 :
10206: LD_ADDR_EXP 39
10210: PUSH
10211: LD_INT 7
10213: ST_TO_ADDR
10214: GO 10293
10216: LD_INT 3
10218: DOUBLE
10219: EQUAL
10220: IFTRUE 10224
10222: GO 10235
10224: POP
// opoce = 11 ; 4 :
10225: LD_ADDR_EXP 39
10229: PUSH
10230: LD_INT 11
10232: ST_TO_ADDR
10233: GO 10293
10235: LD_INT 4
10237: DOUBLE
10238: EQUAL
10239: IFTRUE 10243
10241: GO 10254
10243: POP
// opoce = 15 ; 5 :
10244: LD_ADDR_EXP 39
10248: PUSH
10249: LD_INT 15
10251: ST_TO_ADDR
10252: GO 10293
10254: LD_INT 5
10256: DOUBLE
10257: EQUAL
10258: IFTRUE 10262
10260: GO 10273
10262: POP
// opoce = 19 ; 6 :
10263: LD_ADDR_EXP 39
10267: PUSH
10268: LD_INT 19
10270: ST_TO_ADDR
10271: GO 10293
10273: LD_INT 6
10275: DOUBLE
10276: EQUAL
10277: IFTRUE 10281
10279: GO 10292
10281: POP
// opoce = 23 ; end ;
10282: LD_ADDR_EXP 39
10286: PUSH
10287: LD_INT 23
10289: ST_TO_ADDR
10290: GO 10293
10292: POP
// case time of 0 :
10293: LD_LOC 13
10297: PUSH
10298: LD_INT 0
10300: DOUBLE
10301: EQUAL
10302: IFTRUE 10306
10304: GO 10321
10306: POP
// time = 30 * 60 ; 1 :
10307: LD_ADDR_LOC 13
10311: PUSH
10312: LD_INT 30
10314: PUSH
10315: LD_INT 60
10317: MUL
10318: ST_TO_ADDR
10319: GO 10437
10321: LD_INT 1
10323: DOUBLE
10324: EQUAL
10325: IFTRUE 10329
10327: GO 10344
10329: POP
// time = 40 * 60 ; 2 :
10330: LD_ADDR_LOC 13
10334: PUSH
10335: LD_INT 40
10337: PUSH
10338: LD_INT 60
10340: MUL
10341: ST_TO_ADDR
10342: GO 10437
10344: LD_INT 2
10346: DOUBLE
10347: EQUAL
10348: IFTRUE 10352
10350: GO 10367
10352: POP
// time = 50 * 60 ; 3 :
10353: LD_ADDR_LOC 13
10357: PUSH
10358: LD_INT 50
10360: PUSH
10361: LD_INT 60
10363: MUL
10364: ST_TO_ADDR
10365: GO 10437
10367: LD_INT 3
10369: DOUBLE
10370: EQUAL
10371: IFTRUE 10375
10373: GO 10390
10375: POP
// time = 60 * 60 ; 4 :
10376: LD_ADDR_LOC 13
10380: PUSH
10381: LD_INT 60
10383: PUSH
10384: LD_INT 60
10386: MUL
10387: ST_TO_ADDR
10388: GO 10437
10390: LD_INT 4
10392: DOUBLE
10393: EQUAL
10394: IFTRUE 10398
10396: GO 10413
10398: POP
// time = 90 * 60 ; 5 :
10399: LD_ADDR_LOC 13
10403: PUSH
10404: LD_INT 90
10406: PUSH
10407: LD_INT 60
10409: MUL
10410: ST_TO_ADDR
10411: GO 10437
10413: LD_INT 5
10415: DOUBLE
10416: EQUAL
10417: IFTRUE 10421
10419: GO 10436
10421: POP
// time = 120 * 60 ; end ;
10422: LD_ADDR_LOC 13
10426: PUSH
10427: LD_INT 120
10429: PUSH
10430: LD_INT 60
10432: MUL
10433: ST_TO_ADDR
10434: GO 10437
10436: POP
// enable ( cft_03 ) ;
10437: LD_LOC 26
10441: ENABLE_MARKED
// refresh ;
10442: CALL 11256 0 0
// for stmp = 1 to 8 do
10446: LD_ADDR_LOC 31
10450: PUSH
10451: DOUBLE
10452: LD_INT 1
10454: DEC
10455: ST_TO_ADDR
10456: LD_INT 8
10458: PUSH
10459: FOR_TO
10460: IFFALSE 10829
// if mp_sides_nations_ [ stmp ] then
10462: LD_EXP 49
10466: PUSH
10467: LD_LOC 31
10471: ARRAY
10472: IFFALSE 10827
// begin if mp_sides_positions_ [ stmp ] = 1 then
10474: LD_EXP 50
10478: PUSH
10479: LD_LOC 31
10483: ARRAY
10484: PUSH
10485: LD_INT 1
10487: EQUAL
10488: IFFALSE 10502
// pos1side = stmp else
10490: LD_ADDR_EXP 44
10494: PUSH
10495: LD_LOC 31
10499: ST_TO_ADDR
10500: GO 10512
// pos2side = stmp ;
10502: LD_ADDR_EXP 45
10506: PUSH
10507: LD_LOC 31
10511: ST_TO_ADDR
// uc_side = stmp ;
10512: LD_ADDR_OWVAR 20
10516: PUSH
10517: LD_LOC 31
10521: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ stmp ] ;
10522: LD_ADDR_OWVAR 21
10526: PUSH
10527: LD_EXP 49
10531: PUSH
10532: LD_LOC 31
10536: ARRAY
10537: ST_TO_ADDR
// bc_type = b_depot ;
10538: LD_ADDR_OWVAR 42
10542: PUSH
10543: LD_INT 0
10545: ST_TO_ADDR
// bc_level = 1 ;
10546: LD_ADDR_OWVAR 43
10550: PUSH
10551: LD_INT 1
10553: ST_TO_ADDR
// createandplacebuildingxyd ( depotpositions [ mp_sides_positions_ [ stmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 2 ] , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 3 ] ) ;
10554: LD_EXP 42
10558: PUSH
10559: LD_EXP 50
10563: PUSH
10564: LD_LOC 31
10568: ARRAY
10569: ARRAY
10570: PUSH
10571: LD_INT 1
10573: ARRAY
10574: PPUSH
10575: LD_EXP 42
10579: PUSH
10580: LD_EXP 50
10584: PUSH
10585: LD_LOC 31
10589: ARRAY
10590: ARRAY
10591: PUSH
10592: LD_INT 2
10594: ARRAY
10595: PPUSH
10596: LD_EXP 42
10600: PUSH
10601: LD_EXP 50
10605: PUSH
10606: LD_LOC 31
10610: ARRAY
10611: ARRAY
10612: PUSH
10613: LD_INT 3
10615: ARRAY
10616: PPUSH
10617: CALL_OW 47
// setbattleflag ( stmp , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 2 ] , [ [ bfo_defend_bonus_human , 150 ] , [ bfo_defend_bonus_vehicle , 10 ] , [ bfo_defend_bonus_building , 0 ] , [ bfo_range , 17 ] , [ bfo_height , 100 ] ] ) ;
10621: LD_LOC 31
10625: PPUSH
10626: LD_EXP 42
10630: PUSH
10631: LD_EXP 50
10635: PUSH
10636: LD_LOC 31
10640: ARRAY
10641: ARRAY
10642: PUSH
10643: LD_INT 1
10645: ARRAY
10646: PPUSH
10647: LD_EXP 42
10651: PUSH
10652: LD_EXP 50
10656: PUSH
10657: LD_LOC 31
10661: ARRAY
10662: ARRAY
10663: PUSH
10664: LD_INT 2
10666: ARRAY
10667: PPUSH
10668: LD_INT 1
10670: PUSH
10671: LD_INT 150
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PUSH
10678: LD_INT 2
10680: PUSH
10681: LD_INT 10
10683: PUSH
10684: EMPTY
10685: LIST
10686: LIST
10687: PUSH
10688: LD_INT 3
10690: PUSH
10691: LD_INT 0
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: PUSH
10698: LD_INT 10
10700: PUSH
10701: LD_INT 17
10703: PUSH
10704: EMPTY
10705: LIST
10706: LIST
10707: PUSH
10708: LD_INT 20
10710: PUSH
10711: LD_INT 100
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: PPUSH
10725: CALL_OW 418
// cl = class_engineer ;
10729: LD_ADDR_LOC 33
10733: PUSH
10734: LD_INT 2
10736: ST_TO_ADDR
// for stmp2 = 1 to lidi do
10737: LD_ADDR_LOC 32
10741: PUSH
10742: DOUBLE
10743: LD_INT 1
10745: DEC
10746: ST_TO_ADDR
10747: LD_EXP 37
10751: PUSH
10752: FOR_TO
10753: IFFALSE 10825
// begin if stmp2 >= lidi / 2 then
10755: LD_LOC 32
10759: PUSH
10760: LD_EXP 37
10764: PUSH
10765: LD_INT 2
10767: DIVREAL
10768: GREATEREQUAL
10769: IFFALSE 10779
// cl = class_soldier ;
10771: LD_ADDR_LOC 33
10775: PUSH
10776: LD_INT 1
10778: ST_TO_ADDR
// preparehuman ( 0 , cl , 1 ) ;
10779: LD_INT 0
10781: PPUSH
10782: LD_LOC 33
10786: PPUSH
10787: LD_INT 1
10789: PPUSH
10790: CALL_OW 380
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ stmp ] ] , false ) ;
10794: CALL_OW 44
10798: PPUSH
10799: LD_EXP 43
10803: PUSH
10804: LD_EXP 50
10808: PUSH
10809: LD_LOC 31
10813: ARRAY
10814: ARRAY
10815: PPUSH
10816: LD_INT 0
10818: PPUSH
10819: CALL_OW 49
// end ;
10823: GO 10752
10825: POP
10826: POP
// end ;
10827: GO 10459
10829: POP
10830: POP
// depot1 = filterunitsinarea ( vlevo , [ [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
10831: LD_ADDR_LOC 14
10835: PUSH
10836: LD_INT 2
10838: PPUSH
10839: LD_INT 21
10841: PUSH
10842: LD_INT 3
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PUSH
10849: LD_INT 30
10851: PUSH
10852: LD_INT 0
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: PPUSH
10863: CALL_OW 70
10867: PUSH
10868: LD_INT 1
10870: ARRAY
10871: ST_TO_ADDR
// depot2 = filterunitsinarea ( vpravo , [ [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
10872: LD_ADDR_LOC 15
10876: PUSH
10877: LD_INT 3
10879: PPUSH
10880: LD_INT 21
10882: PUSH
10883: LD_INT 3
10885: PUSH
10886: EMPTY
10887: LIST
10888: LIST
10889: PUSH
10890: LD_INT 30
10892: PUSH
10893: LD_INT 0
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: PPUSH
10904: CALL_OW 70
10908: PUSH
10909: LD_INT 1
10911: ARRAY
10912: ST_TO_ADDR
// pos1base = getbase ( depot1 ) ;
10913: LD_ADDR_LOC 20
10917: PUSH
10918: LD_LOC 14
10922: PPUSH
10923: CALL_OW 274
10927: ST_TO_ADDR
// pos2base = getbase ( depot2 ) ;
10928: LD_ADDR_LOC 21
10932: PUSH
10933: LD_LOC 15
10937: PPUSH
10938: CALL_OW 274
10942: ST_TO_ADDR
// uc_side = 0 ;
10943: LD_ADDR_OWVAR 20
10947: PUSH
10948: LD_INT 0
10950: ST_TO_ADDR
// uc_nation = nation_nature ;
10951: LD_ADDR_OWVAR 21
10955: PUSH
10956: LD_INT 0
10958: ST_TO_ADDR
// for stmp = 1 to opoce do
10959: LD_ADDR_LOC 31
10963: PUSH
10964: DOUBLE
10965: LD_INT 1
10967: DEC
10968: ST_TO_ADDR
10969: LD_EXP 39
10973: PUSH
10974: FOR_TO
10975: IFFALSE 11007
// begin preparehuman ( 0 , class_apeman , 0 ) ;
10977: LD_INT 0
10979: PPUSH
10980: LD_INT 12
10982: PPUSH
10983: LD_INT 0
10985: PPUSH
10986: CALL_OW 380
// placeunitarea ( createhuman , les , false ) ;
10990: CALL_OW 44
10994: PPUSH
10995: LD_INT 4
10997: PPUSH
10998: LD_INT 0
11000: PPUSH
11001: CALL_OW 49
// end ;
11005: GO 10974
11007: POP
11008: POP
// uc_side = pos2side ;
11009: LD_ADDR_OWVAR 20
11013: PUSH
11014: LD_EXP 45
11018: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos2side ] ;
11019: LD_ADDR_OWVAR 21
11023: PUSH
11024: LD_EXP 49
11028: PUSH
11029: LD_EXP 45
11033: ARRAY
11034: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11035: LD_ADDR_OWVAR 37
11039: PUSH
11040: LD_LOC 18
11044: PUSH
11045: LD_OWVAR 21
11049: ARRAY
11050: ST_TO_ADDR
// vc_control = control_manual ;
11051: LD_ADDR_OWVAR 38
11055: PUSH
11056: LD_INT 1
11058: ST_TO_ADDR
// vc_engine = engine_siberite ;
11059: LD_ADDR_OWVAR 39
11063: PUSH
11064: LD_INT 3
11066: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
11067: LD_ADDR_OWVAR 40
11071: PUSH
11072: LD_LOC 19
11076: PUSH
11077: LD_OWVAR 21
11081: ARRAY
11082: ST_TO_ADDR
// vlajka1 = createvehicle ;
11083: LD_ADDR_LOC 16
11087: PUSH
11088: CALL_OW 45
11092: ST_TO_ADDR
// placeunitxy ( vlajka1 , 76 , 60 , false ) ;
11093: LD_LOC 16
11097: PPUSH
11098: LD_INT 76
11100: PPUSH
11101: LD_INT 60
11103: PPUSH
11104: LD_INT 0
11106: PPUSH
11107: CALL_OW 48
// uc_side = pos1side ;
11111: LD_ADDR_OWVAR 20
11115: PUSH
11116: LD_EXP 44
11120: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos1side ] ;
11121: LD_ADDR_OWVAR 21
11125: PUSH
11126: LD_EXP 49
11130: PUSH
11131: LD_EXP 44
11135: ARRAY
11136: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11137: LD_ADDR_OWVAR 37
11141: PUSH
11142: LD_LOC 18
11146: PUSH
11147: LD_OWVAR 21
11151: ARRAY
11152: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
11153: LD_ADDR_OWVAR 40
11157: PUSH
11158: LD_LOC 19
11162: PUSH
11163: LD_OWVAR 21
11167: ARRAY
11168: ST_TO_ADDR
// vlajka2 = createvehicle ;
11169: LD_ADDR_LOC 17
11173: PUSH
11174: CALL_OW 45
11178: ST_TO_ADDR
// placeunitxy ( vlajka2 , 143 , 60 , false ) ;
11179: LD_LOC 17
11183: PPUSH
11184: LD_INT 143
11186: PPUSH
11187: LD_INT 60
11189: PPUSH
11190: LD_INT 0
11192: PPUSH
11193: CALL_OW 48
// case mp_sides_positions_ [ your_side ] of 1 :
11197: LD_EXP 50
11201: PUSH
11202: LD_OWVAR 2
11206: ARRAY
11207: PUSH
11208: LD_INT 1
11210: DOUBLE
11211: EQUAL
11212: IFTRUE 11216
11214: GO 11229
11216: POP
// centernowonxy ( 44 , 60 ) ; 2 :
11217: LD_INT 44
11219: PPUSH
11220: LD_INT 60
11222: PPUSH
11223: CALL_OW 86
11227: GO 11251
11229: LD_INT 2
11231: DOUBLE
11232: EQUAL
11233: IFTRUE 11237
11235: GO 11250
11237: POP
// centernowonxy ( 175 , 60 ) ; end ;
11238: LD_INT 175
11240: PPUSH
11241: LD_INT 60
11243: PPUSH
11244: CALL_OW 86
11248: GO 11251
11250: POP
// end ;
11251: LD_VAR 0 1
11255: RET
// function refresh ; var tmp , tmp1 , tmp2 , tmp3 , tmp4 ; begin
11256: LD_INT 0
11258: PPUSH
11259: PPUSH
11260: PPUSH
11261: PPUSH
11262: PPUSH
11263: PPUSH
// tmp = time div 60 ;
11264: LD_ADDR_VAR 0 2
11268: PUSH
11269: LD_LOC 13
11273: PUSH
11274: LD_INT 60
11276: DIV
11277: ST_TO_ADDR
// if tmp < 10 then
11278: LD_VAR 0 2
11282: PUSH
11283: LD_INT 10
11285: LESS
11286: IFFALSE 11304
// tmp1 = 0 & tmp else
11288: LD_ADDR_VAR 0 3
11292: PUSH
11293: LD_STRING 0
11295: PUSH
11296: LD_VAR 0 2
11300: STR
11301: ST_TO_ADDR
11302: GO 11318
// tmp1 =  & tmp ;
11304: LD_ADDR_VAR 0 3
11308: PUSH
11309: LD_STRING 
11311: PUSH
11312: LD_VAR 0 2
11316: STR
11317: ST_TO_ADDR
// tmp = time mod 60 ;
11318: LD_ADDR_VAR 0 2
11322: PUSH
11323: LD_LOC 13
11327: PUSH
11328: LD_INT 60
11330: MOD
11331: ST_TO_ADDR
// if tmp < 10 then
11332: LD_VAR 0 2
11336: PUSH
11337: LD_INT 10
11339: LESS
11340: IFFALSE 11358
// tmp2 = 0 & tmp else
11342: LD_ADDR_VAR 0 4
11346: PUSH
11347: LD_STRING 0
11349: PUSH
11350: LD_VAR 0 2
11354: STR
11355: ST_TO_ADDR
11356: GO 11372
// tmp2 =  & tmp ;
11358: LD_ADDR_VAR 0 4
11362: PUSH
11363: LD_STRING 
11365: PUSH
11366: LD_VAR 0 2
11370: STR
11371: ST_TO_ADDR
// if left_score < 10 then
11372: LD_LOC 22
11376: PUSH
11377: LD_INT 10
11379: LESS
11380: IFFALSE 11398
// tmp3 = 0 & left_score else
11382: LD_ADDR_VAR 0 5
11386: PUSH
11387: LD_STRING 0
11389: PUSH
11390: LD_LOC 22
11394: STR
11395: ST_TO_ADDR
11396: GO 11412
// tmp3 =  & left_score ;
11398: LD_ADDR_VAR 0 5
11402: PUSH
11403: LD_STRING 
11405: PUSH
11406: LD_LOC 22
11410: STR
11411: ST_TO_ADDR
// if right_score < 10 then
11412: LD_LOC 23
11416: PUSH
11417: LD_INT 10
11419: LESS
11420: IFFALSE 11438
// tmp4 = 0 & right_score else
11422: LD_ADDR_VAR 0 6
11426: PUSH
11427: LD_STRING 0
11429: PUSH
11430: LD_LOC 23
11434: STR
11435: ST_TO_ADDR
11436: GO 11452
// tmp4 =  & right_score ;
11438: LD_ADDR_VAR 0 6
11442: PUSH
11443: LD_STRING 
11445: PUSH
11446: LD_LOC 23
11450: STR
11451: ST_TO_ADDR
// display_strings = [ Score:  & tmp3 &  to  & tmp4 , Time left:  & tmp1 & : & tmp2 ] ;
11452: LD_ADDR_OWVAR 47
11456: PUSH
11457: LD_STRING Score: 
11459: PUSH
11460: LD_VAR 0 5
11464: STR
11465: PUSH
11466: LD_STRING  to 
11468: STR
11469: PUSH
11470: LD_VAR 0 6
11474: STR
11475: PUSH
11476: LD_STRING Time left: 
11478: PUSH
11479: LD_VAR 0 3
11483: STR
11484: PUSH
11485: LD_STRING :
11487: STR
11488: PUSH
11489: LD_VAR 0 4
11493: STR
11494: PUSH
11495: EMPTY
11496: LIST
11497: LIST
11498: ST_TO_ADDR
// end ;
11499: LD_VAR 0 1
11503: RET
// every 0 0$1 marked 03 do
11504: GO 11506
11506: DISABLE
// begin time = time - 1 ;
11507: LD_ADDR_LOC 13
11511: PUSH
11512: LD_LOC 13
11516: PUSH
11517: LD_INT 1
11519: MINUS
11520: ST_TO_ADDR
// refresh ;
11521: CALL 11256 0 0
// if not time then
11525: LD_LOC 13
11529: NOT
11530: IFFALSE 11596
// if mp_sides_positions_ [ your_side ] = 1 then
11532: LD_EXP 50
11536: PUSH
11537: LD_OWVAR 2
11541: ARRAY
11542: PUSH
11543: LD_INT 1
11545: EQUAL
11546: IFFALSE 11572
// if left_score >= right_score then
11548: LD_LOC 22
11552: PUSH
11553: LD_LOC 23
11557: GREATEREQUAL
11558: IFFALSE 11566
// youwininmultiplayer else
11560: CALL_OW 106
11564: GO 11570
// youlostinmultiplayer else
11566: CALL_OW 107
11570: GO 11594
// if right_score >= left_score then
11572: LD_LOC 23
11576: PUSH
11577: LD_LOC 22
11581: GREATEREQUAL
11582: IFFALSE 11590
// youwininmultiplayer else
11584: CALL_OW 106
11588: GO 11594
// youlostinmultiplayer else
11590: CALL_OW 107
11594: GO 11597
// enable ;
11596: ENABLE
// end ;
11597: END
// every 0 0$10 marked 19 do
11598: GO 11600
11600: DISABLE
// begin cper = cper - 0 0$10 ;
11601: LD_ADDR_EXP 40
11605: PUSH
11606: LD_EXP 40
11610: PUSH
11611: LD_INT 350
11613: MINUS
11614: ST_TO_ADDR
// if cper = 0 then
11615: LD_EXP 40
11619: PUSH
11620: LD_INT 0
11622: EQUAL
11623: IFFALSE 11661
// begin createcratesarea ( 5 , vlevoex , true ) ;
11625: LD_INT 5
11627: PPUSH
11628: LD_INT 5
11630: PPUSH
11631: LD_INT 1
11633: PPUSH
11634: CALL_OW 55
// createcratesarea ( 5 , vpravoex , true ) ;
11638: LD_INT 5
11640: PPUSH
11641: LD_INT 6
11643: PPUSH
11644: LD_INT 1
11646: PPUSH
11647: CALL_OW 55
// cper = cperiode ;
11651: LD_ADDR_EXP 40
11655: PUSH
11656: LD_EXP 41
11660: ST_TO_ADDR
// end ; enable ;
11661: ENABLE
// end ;
11662: END
// every 5 trigger getlives ( depot1 ) < 500 marked 01 do
11663: LD_LOC 14
11667: PPUSH
11668: CALL_OW 256
11672: PUSH
11673: LD_INT 500
11675: LESS
11676: IFFALSE 11694
11678: GO 11680
11680: DISABLE
// begin setlives ( depot1 , 750 ) ;
11681: LD_LOC 14
11685: PPUSH
11686: LD_INT 750
11688: PPUSH
11689: CALL_OW 234
// enable ;
11693: ENABLE
// end ;
11694: END
// every 5 trigger getlives ( depot2 ) < 500 marked 02 do
11695: LD_LOC 15
11699: PPUSH
11700: CALL_OW 256
11704: PUSH
11705: LD_INT 500
11707: LESS
11708: IFFALSE 11726
11710: GO 11712
11712: DISABLE
// begin setlives ( depot2 , 750 ) ;
11713: LD_LOC 15
11717: PPUSH
11718: LD_INT 750
11720: PPUSH
11721: CALL_OW 234
// enable ;
11725: ENABLE
// end ;
11726: END
// on unitdestroyed ( un ) do var radius ;
11727: LD_INT 0
11729: PPUSH
// begin if GetClass ( un ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
11730: LD_VAR 0 1
11734: PPUSH
11735: CALL_OW 257
11739: PUSH
11740: LD_INT 12
11742: PUSH
11743: LD_INT 15
11745: PUSH
11746: LD_INT 17
11748: PUSH
11749: LD_INT 16
11751: PUSH
11752: EMPTY
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: IN
11758: PUSH
11759: LD_VAR 0 1
11763: PPUSH
11764: CALL_OW 263
11768: PUSH
11769: LD_INT 5
11771: EQUAL
11772: OR
11773: IFFALSE 11784
// ApeKilled ( un ) ;
11775: LD_VAR 0 1
11779: PPUSH
11780: CALL 8139 0 1
// if mp_game_type <> 1 then
11784: LD_OWVAR 6
11788: PUSH
11789: LD_INT 1
11791: NONEQUAL
11792: IFFALSE 11796
// exit ;
11794: GO 12090
// if un = vlajka1 then
11796: LD_VAR 0 1
11800: PUSH
11801: LD_LOC 16
11805: EQUAL
11806: IFFALSE 11944
// begin uc_side = pos2side ;
11808: LD_ADDR_OWVAR 20
11812: PUSH
11813: LD_EXP 45
11817: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos2side ] ;
11818: LD_ADDR_OWVAR 21
11822: PUSH
11823: LD_EXP 49
11827: PUSH
11828: LD_EXP 45
11832: ARRAY
11833: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11834: LD_ADDR_OWVAR 37
11838: PUSH
11839: LD_LOC 18
11843: PUSH
11844: LD_OWVAR 21
11848: ARRAY
11849: ST_TO_ADDR
// vc_control = control_manual ;
11850: LD_ADDR_OWVAR 38
11854: PUSH
11855: LD_INT 1
11857: ST_TO_ADDR
// vc_engine = engine_siberite ;
11858: LD_ADDR_OWVAR 39
11862: PUSH
11863: LD_INT 3
11865: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
11866: LD_ADDR_OWVAR 40
11870: PUSH
11871: LD_LOC 19
11875: PUSH
11876: LD_OWVAR 21
11880: ARRAY
11881: ST_TO_ADDR
// vlajka1 = createvehicle ;
11882: LD_ADDR_LOC 16
11886: PUSH
11887: CALL_OW 45
11891: ST_TO_ADDR
// radius = 2 ;
11892: LD_ADDR_VAR 0 2
11896: PUSH
11897: LD_INT 2
11899: ST_TO_ADDR
// while not placeunitxyr ( vlajka1 , 76 , 60 , radius , false ) do
11900: LD_LOC 16
11904: PPUSH
11905: LD_INT 76
11907: PPUSH
11908: LD_INT 60
11910: PPUSH
11911: LD_VAR 0 2
11915: PPUSH
11916: LD_INT 0
11918: PPUSH
11919: CALL_OW 50
11923: NOT
11924: IFFALSE 11942
// radius = radius + 1 ;
11926: LD_ADDR_VAR 0 2
11930: PUSH
11931: LD_VAR 0 2
11935: PUSH
11936: LD_INT 1
11938: PLUS
11939: ST_TO_ADDR
11940: GO 11900
// end else
11942: GO 12090
// if un = vlajka2 then
11944: LD_VAR 0 1
11948: PUSH
11949: LD_LOC 17
11953: EQUAL
11954: IFFALSE 12090
// begin uc_side = pos1side ;
11956: LD_ADDR_OWVAR 20
11960: PUSH
11961: LD_EXP 44
11965: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos1side ] ;
11966: LD_ADDR_OWVAR 21
11970: PUSH
11971: LD_EXP 49
11975: PUSH
11976: LD_EXP 44
11980: ARRAY
11981: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11982: LD_ADDR_OWVAR 37
11986: PUSH
11987: LD_LOC 18
11991: PUSH
11992: LD_OWVAR 21
11996: ARRAY
11997: ST_TO_ADDR
// vc_control = control_manual ;
11998: LD_ADDR_OWVAR 38
12002: PUSH
12003: LD_INT 1
12005: ST_TO_ADDR
// vc_engine = engine_siberite ;
12006: LD_ADDR_OWVAR 39
12010: PUSH
12011: LD_INT 3
12013: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
12014: LD_ADDR_OWVAR 40
12018: PUSH
12019: LD_LOC 19
12023: PUSH
12024: LD_OWVAR 21
12028: ARRAY
12029: ST_TO_ADDR
// vlajka2 = createvehicle ;
12030: LD_ADDR_LOC 17
12034: PUSH
12035: CALL_OW 45
12039: ST_TO_ADDR
// radius = 2 ;
12040: LD_ADDR_VAR 0 2
12044: PUSH
12045: LD_INT 2
12047: ST_TO_ADDR
// while not placeunitxyr ( vlajka2 , 143 , 60 , radius , false ) do
12048: LD_LOC 17
12052: PPUSH
12053: LD_INT 143
12055: PPUSH
12056: LD_INT 60
12058: PPUSH
12059: LD_VAR 0 2
12063: PPUSH
12064: LD_INT 0
12066: PPUSH
12067: CALL_OW 50
12071: NOT
12072: IFFALSE 12090
// radius = radius + 1 ;
12074: LD_ADDR_VAR 0 2
12078: PUSH
12079: LD_VAR 0 2
12083: PUSH
12084: LD_INT 1
12086: PLUS
12087: ST_TO_ADDR
12088: GO 12048
// end ; end ;
12090: PPOPN 2
12092: END
// on vehiclecaptured ( vehnew , vehold , origside , hum ) marked 05 do var radius ;
12093: LD_INT 0
12095: PPUSH
// if ( vehold = vlajka1 ) then
12096: LD_VAR 0 2
12100: PUSH
12101: LD_LOC 16
12105: EQUAL
12106: IFFALSE 12259
// begin vlajka1 = vehnew ;
12108: LD_ADDR_LOC 16
12112: PUSH
12113: LD_VAR 0 1
12117: ST_TO_ADDR
// comexitvehicle ( vlajka1 ) ;
12118: LD_LOC 16
12122: PPUSH
12123: CALL_OW 121
// while isdrivenby ( vlajka1 ) do
12127: LD_LOC 16
12131: PPUSH
12132: CALL_OW 311
12136: IFFALSE 12147
// wait ( 2 ) ;
12138: LD_INT 2
12140: PPUSH
12141: CALL_OW 67
12145: GO 12127
// if getdistunitxy ( vlajka1 , 76 , 60 ) > 4 then
12147: LD_LOC 16
12151: PPUSH
12152: LD_INT 76
12154: PPUSH
12155: LD_INT 60
12157: PPUSH
12158: CALL_OW 297
12162: PUSH
12163: LD_INT 4
12165: GREATER
12166: IFFALSE 12243
// begin removeunit ( vlajka1 ) ;
12168: LD_LOC 16
12172: PPUSH
12173: CALL_OW 64
// setside ( vlajka1 , origside ) ;
12177: LD_LOC 16
12181: PPUSH
12182: LD_VAR 0 3
12186: PPUSH
12187: CALL_OW 235
// radius = 2 ;
12191: LD_ADDR_VAR 0 5
12195: PUSH
12196: LD_INT 2
12198: ST_TO_ADDR
// while not placeunitxyr ( vlajka1 , 76 , 60 , radius , false ) do
12199: LD_LOC 16
12203: PPUSH
12204: LD_INT 76
12206: PPUSH
12207: LD_INT 60
12209: PPUSH
12210: LD_VAR 0 5
12214: PPUSH
12215: LD_INT 0
12217: PPUSH
12218: CALL_OW 50
12222: NOT
12223: IFFALSE 12241
// radius = radius + 1 ;
12225: LD_ADDR_VAR 0 5
12229: PUSH
12230: LD_VAR 0 5
12234: PUSH
12235: LD_INT 1
12237: PLUS
12238: ST_TO_ADDR
12239: GO 12199
// end else
12241: GO 12257
// setside ( vlajka1 , origside ) ;
12243: LD_LOC 16
12247: PPUSH
12248: LD_VAR 0 3
12252: PPUSH
12253: CALL_OW 235
// end else
12257: GO 12420
// if ( vehold = vlajka2 ) then
12259: LD_VAR 0 2
12263: PUSH
12264: LD_LOC 17
12268: EQUAL
12269: IFFALSE 12420
// begin vlajka2 = vehnew ;
12271: LD_ADDR_LOC 17
12275: PUSH
12276: LD_VAR 0 1
12280: ST_TO_ADDR
// comexitvehicle ( vlajka2 ) ;
12281: LD_LOC 17
12285: PPUSH
12286: CALL_OW 121
// while isdrivenby ( vlajka2 ) do
12290: LD_LOC 17
12294: PPUSH
12295: CALL_OW 311
12299: IFFALSE 12310
// wait ( 2 ) ;
12301: LD_INT 2
12303: PPUSH
12304: CALL_OW 67
12308: GO 12290
// if getdistunitxy ( vlajka2 , 143 , 60 ) > 4 then
12310: LD_LOC 17
12314: PPUSH
12315: LD_INT 143
12317: PPUSH
12318: LD_INT 60
12320: PPUSH
12321: CALL_OW 297
12325: PUSH
12326: LD_INT 4
12328: GREATER
12329: IFFALSE 12406
// begin removeunit ( vlajka2 ) ;
12331: LD_LOC 17
12335: PPUSH
12336: CALL_OW 64
// setside ( vlajka2 , origside ) ;
12340: LD_LOC 17
12344: PPUSH
12345: LD_VAR 0 3
12349: PPUSH
12350: CALL_OW 235
// radius = 2 ;
12354: LD_ADDR_VAR 0 5
12358: PUSH
12359: LD_INT 2
12361: ST_TO_ADDR
// while not placeunitxyr ( vlajka2 , 143 , 60 , radius , false ) do
12362: LD_LOC 17
12366: PPUSH
12367: LD_INT 143
12369: PPUSH
12370: LD_INT 60
12372: PPUSH
12373: LD_VAR 0 5
12377: PPUSH
12378: LD_INT 0
12380: PPUSH
12381: CALL_OW 50
12385: NOT
12386: IFFALSE 12404
// radius = radius + 1 ;
12388: LD_ADDR_VAR 0 5
12392: PUSH
12393: LD_VAR 0 5
12397: PUSH
12398: LD_INT 1
12400: PLUS
12401: ST_TO_ADDR
12402: GO 12362
// end else
12404: GO 12420
// setside ( vlajka2 , origside ) ;
12406: LD_LOC 17
12410: PPUSH
12411: LD_VAR 0 3
12415: PPUSH
12416: CALL_OW 235
// end ;
12420: PPOPN 5
12422: END
// every 10 + 1 trigger getdistunitxy ( vlajka1 , 185 , 60 ) < 6 marked 06 do var radius , tmp ;
12423: LD_LOC 16
12427: PPUSH
12428: LD_INT 185
12430: PPUSH
12431: LD_INT 60
12433: PPUSH
12434: CALL_OW 297
12438: PUSH
12439: LD_INT 6
12441: LESS
12442: IFFALSE 12646
12444: GO 12446
12446: DISABLE
12447: LD_INT 0
12449: PPUSH
12450: PPUSH
// begin right_score = right_score + 1 ;
12451: LD_ADDR_LOC 23
12455: PUSH
12456: LD_LOC 23
12460: PUSH
12461: LD_INT 1
12463: PLUS
12464: ST_TO_ADDR
// refresh ;
12465: CALL 11256 0 0
// comexitvehicle ( vlajka1 ) ;
12469: LD_LOC 16
12473: PPUSH
12474: CALL_OW 121
// while isdrivenby ( vlajka1 ) do
12478: LD_LOC 16
12482: PPUSH
12483: CALL_OW 311
12487: IFFALSE 12498
// wait ( 2 ) ;
12489: LD_INT 2
12491: PPUSH
12492: CALL_OW 67
12496: GO 12478
// removeunit ( vlajka1 ) ;
12498: LD_LOC 16
12502: PPUSH
12503: CALL_OW 64
// for radius in [ mat_cans , mat_oil , mat_siberit ] do
12507: LD_ADDR_VAR 0 1
12511: PUSH
12512: LD_INT 1
12514: PUSH
12515: LD_INT 2
12517: PUSH
12518: LD_INT 3
12520: PUSH
12521: EMPTY
12522: LIST
12523: LIST
12524: LIST
12525: PUSH
12526: FOR_IN
12527: IFFALSE 12593
// begin tmp = getcargo ( vlajka1 , radius ) ;
12529: LD_ADDR_VAR 0 2
12533: PUSH
12534: LD_LOC 16
12538: PPUSH
12539: LD_VAR 0 1
12543: PPUSH
12544: CALL_OW 289
12548: ST_TO_ADDR
// if tmp then
12549: LD_VAR 0 2
12553: IFFALSE 12591
// begin addresourcetype ( pos2base , radius , tmp ) ;
12555: LD_LOC 21
12559: PPUSH
12560: LD_VAR 0 1
12564: PPUSH
12565: LD_VAR 0 2
12569: PPUSH
12570: CALL_OW 276
// setcargo ( vlajka1 , radius , 0 ) ;
12574: LD_LOC 16
12578: PPUSH
12579: LD_VAR 0 1
12583: PPUSH
12584: LD_INT 0
12586: PPUSH
12587: CALL_OW 290
// end ; end ;
12591: GO 12526
12593: POP
12594: POP
// radius = 2 ;
12595: LD_ADDR_VAR 0 1
12599: PUSH
12600: LD_INT 2
12602: ST_TO_ADDR
// while not placeunitxyr ( vlajka1 , 76 , 60 , radius , false ) do
12603: LD_LOC 16
12607: PPUSH
12608: LD_INT 76
12610: PPUSH
12611: LD_INT 60
12613: PPUSH
12614: LD_VAR 0 1
12618: PPUSH
12619: LD_INT 0
12621: PPUSH
12622: CALL_OW 50
12626: NOT
12627: IFFALSE 12645
// radius = radius + 1 ;
12629: LD_ADDR_VAR 0 1
12633: PUSH
12634: LD_VAR 0 1
12638: PUSH
12639: LD_INT 1
12641: PLUS
12642: ST_TO_ADDR
12643: GO 12603
// enable ;
12645: ENABLE
// end ;
12646: PPOPN 2
12648: END
// every 10 trigger getdistunitxy ( vlajka2 , 34 , 60 ) < 6 marked 07 do var radius , tmp ;
12649: LD_LOC 17
12653: PPUSH
12654: LD_INT 34
12656: PPUSH
12657: LD_INT 60
12659: PPUSH
12660: CALL_OW 297
12664: PUSH
12665: LD_INT 6
12667: LESS
12668: IFFALSE 12872
12670: GO 12672
12672: DISABLE
12673: LD_INT 0
12675: PPUSH
12676: PPUSH
// begin left_score = left_score + 1 ;
12677: LD_ADDR_LOC 22
12681: PUSH
12682: LD_LOC 22
12686: PUSH
12687: LD_INT 1
12689: PLUS
12690: ST_TO_ADDR
// refresh ;
12691: CALL 11256 0 0
// comexitvehicle ( vlajka2 ) ;
12695: LD_LOC 17
12699: PPUSH
12700: CALL_OW 121
// while isdrivenby ( vlajka2 ) do
12704: LD_LOC 17
12708: PPUSH
12709: CALL_OW 311
12713: IFFALSE 12724
// wait ( 2 ) ;
12715: LD_INT 2
12717: PPUSH
12718: CALL_OW 67
12722: GO 12704
// removeunit ( vlajka2 ) ;
12724: LD_LOC 17
12728: PPUSH
12729: CALL_OW 64
// for radius in [ mat_cans , mat_oil , mat_siberit ] do
12733: LD_ADDR_VAR 0 1
12737: PUSH
12738: LD_INT 1
12740: PUSH
12741: LD_INT 2
12743: PUSH
12744: LD_INT 3
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: LIST
12751: PUSH
12752: FOR_IN
12753: IFFALSE 12819
// begin tmp = getcargo ( vlajka2 , radius ) ;
12755: LD_ADDR_VAR 0 2
12759: PUSH
12760: LD_LOC 17
12764: PPUSH
12765: LD_VAR 0 1
12769: PPUSH
12770: CALL_OW 289
12774: ST_TO_ADDR
// if tmp then
12775: LD_VAR 0 2
12779: IFFALSE 12817
// begin addresourcetype ( pos1base , radius , tmp ) ;
12781: LD_LOC 20
12785: PPUSH
12786: LD_VAR 0 1
12790: PPUSH
12791: LD_VAR 0 2
12795: PPUSH
12796: CALL_OW 276
// setcargo ( vlajka2 , radius , 0 ) ;
12800: LD_LOC 17
12804: PPUSH
12805: LD_VAR 0 1
12809: PPUSH
12810: LD_INT 0
12812: PPUSH
12813: CALL_OW 290
// end ; end ;
12817: GO 12752
12819: POP
12820: POP
// radius = 2 ;
12821: LD_ADDR_VAR 0 1
12825: PUSH
12826: LD_INT 2
12828: ST_TO_ADDR
// while not placeunitxyr ( vlajka2 , 143 , 60 , radius , false ) do
12829: LD_LOC 17
12833: PPUSH
12834: LD_INT 143
12836: PPUSH
12837: LD_INT 60
12839: PPUSH
12840: LD_VAR 0 1
12844: PPUSH
12845: LD_INT 0
12847: PPUSH
12848: CALL_OW 50
12852: NOT
12853: IFFALSE 12871
// radius = radius + 1 ;
12855: LD_ADDR_VAR 0 1
12859: PUSH
12860: LD_VAR 0 1
12864: PUSH
12865: LD_INT 1
12867: PLUS
12868: ST_TO_ADDR
12869: GO 12829
// enable ;
12871: ENABLE
// end ; end_of_file
12872: PPOPN 2
12874: END
// var zakladna , skilly , start_res , extra_oil , extra_sib , zakl_plus , batt_fl , sib_det , people_resp , siberitofka ; var fortpos , areasdiff , directions ; var resp_cnt1 , resp_cnt2 ; export function other_game ; var tmp , tmp2 , tmp3 , cl ; begin
12875: LD_INT 0
12877: PPUSH
12878: PPUSH
12879: PPUSH
12880: PPUSH
12881: PPUSH
// ctf = false ;
12882: LD_ADDR_EXP 47
12886: PUSH
12887: LD_INT 0
12889: ST_TO_ADDR
// resp_cnt1 = 0 ;
12890: LD_ADDR_LOC 47
12894: PUSH
12895: LD_INT 0
12897: ST_TO_ADDR
// resp_cnt2 = 0 ;
12898: LD_ADDR_LOC 48
12902: PUSH
12903: LD_INT 0
12905: ST_TO_ADDR
// enable ( nonctf_13 ) ;
12906: LD_EXP 55
12910: ENABLE_MARKED
// for tmp = 1 to 8 do
12911: LD_ADDR_VAR 0 2
12915: PUSH
12916: DOUBLE
12917: LD_INT 1
12919: DEC
12920: ST_TO_ADDR
12921: LD_INT 8
12923: PUSH
12924: FOR_TO
12925: IFFALSE 12986
// begin setrestrict ( b_depot , tmp , state_enabled ) ;
12927: LD_INT 0
12929: PPUSH
12930: LD_VAR 0 2
12934: PPUSH
12935: LD_INT 1
12937: PPUSH
12938: CALL_OW 324
// if sib_det then
12942: LD_LOC 41
12946: IFFALSE 12963
// settech ( tech_sibdet , tmp , state_researched ) ;
12948: LD_INT 20
12950: PPUSH
12951: LD_VAR 0 2
12955: PPUSH
12956: LD_INT 2
12958: PPUSH
12959: CALL_OW 322
// if siberitofka then
12963: LD_LOC 43
12967: IFFALSE 12984
// settech ( tech_sibfiss , tmp , state_enabled ) ;
12969: LD_INT 25
12971: PPUSH
12972: LD_VAR 0 2
12976: PPUSH
12977: LD_INT 1
12979: PPUSH
12980: CALL_OW 322
// end ;
12984: GO 12924
12986: POP
12987: POP
// if multiplayer then
12988: LD_OWVAR 4
12992: IFFALSE 13165
// begin zakladna = getmultiplayersetting ( 0 ) ;
12994: LD_ADDR_LOC 34
12998: PUSH
12999: LD_INT 0
13001: PPUSH
13002: CALL_OW 426
13006: ST_TO_ADDR
// lidi = getmultiplayersetting ( 1 ) ;
13007: LD_ADDR_EXP 37
13011: PUSH
13012: LD_INT 1
13014: PPUSH
13015: CALL_OW 426
13019: ST_TO_ADDR
// skilly = getmultiplayersetting ( 2 ) ;
13020: LD_ADDR_LOC 35
13024: PUSH
13025: LD_INT 2
13027: PPUSH
13028: CALL_OW 426
13032: ST_TO_ADDR
// start_res = getmultiplayersetting ( 3 ) ;
13033: LD_ADDR_LOC 36
13037: PUSH
13038: LD_INT 3
13040: PPUSH
13041: CALL_OW 426
13045: ST_TO_ADDR
// krabice = getmultiplayersetting ( 4 ) ;
13046: LD_ADDR_EXP 38
13050: PUSH
13051: LD_INT 4
13053: PPUSH
13054: CALL_OW 426
13058: ST_TO_ADDR
// extra_oil = getmultiplayersetting ( 5 ) ;
13059: LD_ADDR_LOC 37
13063: PUSH
13064: LD_INT 5
13066: PPUSH
13067: CALL_OW 426
13071: ST_TO_ADDR
// extra_sib = getmultiplayersetting ( 6 ) ;
13072: LD_ADDR_LOC 38
13076: PUSH
13077: LD_INT 6
13079: PPUSH
13080: CALL_OW 426
13084: ST_TO_ADDR
// zakl_plus = getmultiplayersetting ( 7 ) ;
13085: LD_ADDR_LOC 39
13089: PUSH
13090: LD_INT 7
13092: PPUSH
13093: CALL_OW 426
13097: ST_TO_ADDR
// batt_fl = getmultiplayersetting ( 11 ) ;
13098: LD_ADDR_LOC 40
13102: PUSH
13103: LD_INT 11
13105: PPUSH
13106: CALL_OW 426
13110: ST_TO_ADDR
// sib_det = getmultiplayersetting ( 12 ) ;
13111: LD_ADDR_LOC 41
13115: PUSH
13116: LD_INT 12
13118: PPUSH
13119: CALL_OW 426
13123: ST_TO_ADDR
// opoce = getmultiplayersetting ( 13 ) ;
13124: LD_ADDR_EXP 39
13128: PUSH
13129: LD_INT 13
13131: PPUSH
13132: CALL_OW 426
13136: ST_TO_ADDR
// people_resp = getmultiplayersetting ( 14 ) ;
13137: LD_ADDR_LOC 42
13141: PUSH
13142: LD_INT 14
13144: PPUSH
13145: CALL_OW 426
13149: ST_TO_ADDR
// siberitofka = getmultiplayersetting ( 15 ) ;
13150: LD_ADDR_LOC 43
13154: PUSH
13155: LD_INT 15
13157: PPUSH
13158: CALL_OW 426
13162: ST_TO_ADDR
// end else
13163: GO 13269
// begin zakladna = 1 ;
13165: LD_ADDR_LOC 34
13169: PUSH
13170: LD_INT 1
13172: ST_TO_ADDR
// lidi = 1 ;
13173: LD_ADDR_EXP 37
13177: PUSH
13178: LD_INT 1
13180: ST_TO_ADDR
// skilly = 1 ;
13181: LD_ADDR_LOC 35
13185: PUSH
13186: LD_INT 1
13188: ST_TO_ADDR
// start_res = 2 ;
13189: LD_ADDR_LOC 36
13193: PUSH
13194: LD_INT 2
13196: ST_TO_ADDR
// krabice = 1 ;
13197: LD_ADDR_EXP 38
13201: PUSH
13202: LD_INT 1
13204: ST_TO_ADDR
// extra_oil = 1 ;
13205: LD_ADDR_LOC 37
13209: PUSH
13210: LD_INT 1
13212: ST_TO_ADDR
// extra_sib = 1 ;
13213: LD_ADDR_LOC 38
13217: PUSH
13218: LD_INT 1
13220: ST_TO_ADDR
// zakl_plus = 2 ;
13221: LD_ADDR_LOC 39
13225: PUSH
13226: LD_INT 2
13228: ST_TO_ADDR
// batt_fl = 0 ;
13229: LD_ADDR_LOC 40
13233: PUSH
13234: LD_INT 0
13236: ST_TO_ADDR
// sib_det = 0 ;
13237: LD_ADDR_LOC 41
13241: PUSH
13242: LD_INT 0
13244: ST_TO_ADDR
// opoce = 3 ;
13245: LD_ADDR_EXP 39
13249: PUSH
13250: LD_INT 3
13252: ST_TO_ADDR
// people_resp = 0 ;
13253: LD_ADDR_LOC 42
13257: PUSH
13258: LD_INT 0
13260: ST_TO_ADDR
// siberitofka = 0 ;
13261: LD_ADDR_LOC 43
13265: PUSH
13266: LD_INT 0
13268: ST_TO_ADDR
// end ; if people_resp then
13269: LD_LOC 42
13273: IFFALSE 13290
// begin enable ( nonctf_10 ) ;
13275: LD_EXP 52
13279: ENABLE_MARKED
// enable ( nonctf_11 ) ;
13280: LD_EXP 53
13284: ENABLE_MARKED
// enable ( nonctf_12 ) ;
13285: LD_EXP 54
13289: ENABLE_MARKED
// end ; if people_resp = 1 then
13290: LD_LOC 42
13294: PUSH
13295: LD_INT 1
13297: EQUAL
13298: IFFALSE 13308
// people_resp = 3 ;
13300: LD_ADDR_LOC 42
13304: PUSH
13305: LD_INT 3
13307: ST_TO_ADDR
// if people_resp = 2 then
13308: LD_LOC 42
13312: PUSH
13313: LD_INT 2
13315: EQUAL
13316: IFFALSE 13326
// people_resp = 1 ;
13318: LD_ADDR_LOC 42
13322: PUSH
13323: LD_INT 1
13325: ST_TO_ADDR
// case lidi of 0 :
13326: LD_EXP 37
13330: PUSH
13331: LD_INT 0
13333: DOUBLE
13334: EQUAL
13335: IFTRUE 13339
13337: GO 13350
13339: POP
// lidi = 9 ; 1 :
13340: LD_ADDR_EXP 37
13344: PUSH
13345: LD_INT 9
13347: ST_TO_ADDR
13348: GO 13427
13350: LD_INT 1
13352: DOUBLE
13353: EQUAL
13354: IFTRUE 13358
13356: GO 13369
13358: POP
// lidi = 13 ; 2 :
13359: LD_ADDR_EXP 37
13363: PUSH
13364: LD_INT 13
13366: ST_TO_ADDR
13367: GO 13427
13369: LD_INT 2
13371: DOUBLE
13372: EQUAL
13373: IFTRUE 13377
13375: GO 13388
13377: POP
// lidi = 19 ; 3 :
13378: LD_ADDR_EXP 37
13382: PUSH
13383: LD_INT 19
13385: ST_TO_ADDR
13386: GO 13427
13388: LD_INT 3
13390: DOUBLE
13391: EQUAL
13392: IFTRUE 13396
13394: GO 13407
13396: POP
// lidi = 23 ; 4 :
13397: LD_ADDR_EXP 37
13401: PUSH
13402: LD_INT 23
13404: ST_TO_ADDR
13405: GO 13427
13407: LD_INT 4
13409: DOUBLE
13410: EQUAL
13411: IFTRUE 13415
13413: GO 13426
13415: POP
// lidi = 29 ; end ;
13416: LD_ADDR_EXP 37
13420: PUSH
13421: LD_INT 29
13423: ST_TO_ADDR
13424: GO 13427
13426: POP
// skilly = skilly + 1 ;
13427: LD_ADDR_LOC 35
13431: PUSH
13432: LD_LOC 35
13436: PUSH
13437: LD_INT 1
13439: PLUS
13440: ST_TO_ADDR
// case start_res of 0 :
13441: LD_LOC 36
13445: PUSH
13446: LD_INT 0
13448: DOUBLE
13449: EQUAL
13450: IFTRUE 13454
13452: GO 13465
13454: POP
// start_res = 0 ; 1 :
13455: LD_ADDR_LOC 36
13459: PUSH
13460: LD_INT 0
13462: ST_TO_ADDR
13463: GO 13523
13465: LD_INT 1
13467: DOUBLE
13468: EQUAL
13469: IFTRUE 13473
13471: GO 13484
13473: POP
// start_res = 50 ; 2 :
13474: LD_ADDR_LOC 36
13478: PUSH
13479: LD_INT 50
13481: ST_TO_ADDR
13482: GO 13523
13484: LD_INT 2
13486: DOUBLE
13487: EQUAL
13488: IFTRUE 13492
13490: GO 13503
13492: POP
// start_res = 100 ; 3 :
13493: LD_ADDR_LOC 36
13497: PUSH
13498: LD_INT 100
13500: ST_TO_ADDR
13501: GO 13523
13503: LD_INT 3
13505: DOUBLE
13506: EQUAL
13507: IFTRUE 13511
13509: GO 13522
13511: POP
// start_res = 200 ; end ;
13512: LD_ADDR_LOC 36
13516: PUSH
13517: LD_INT 200
13519: ST_TO_ADDR
13520: GO 13523
13522: POP
// case krabice of 0 :
13523: LD_EXP 38
13527: PUSH
13528: LD_INT 0
13530: DOUBLE
13531: EQUAL
13532: IFTRUE 13536
13534: GO 13547
13536: POP
// cperiode = 1 1$30 ; 1 :
13537: LD_ADDR_EXP 41
13541: PUSH
13542: LD_INT 3150
13544: ST_TO_ADDR
13545: GO 13586
13547: LD_INT 1
13549: DOUBLE
13550: EQUAL
13551: IFTRUE 13555
13553: GO 13566
13555: POP
// cperiode = 1 1$00 ; 2 :
13556: LD_ADDR_EXP 41
13560: PUSH
13561: LD_INT 2100
13563: ST_TO_ADDR
13564: GO 13586
13566: LD_INT 2
13568: DOUBLE
13569: EQUAL
13570: IFTRUE 13574
13572: GO 13585
13574: POP
// cperiode = 0 0$30 ; end ;
13575: LD_ADDR_EXP 41
13579: PUSH
13580: LD_INT 1050
13582: ST_TO_ADDR
13583: GO 13586
13585: POP
// case opoce of 0 :
13586: LD_EXP 39
13590: PUSH
13591: LD_INT 0
13593: DOUBLE
13594: EQUAL
13595: IFTRUE 13599
13597: GO 13610
13599: POP
// opoce = 0 ; 1 :
13600: LD_ADDR_EXP 39
13604: PUSH
13605: LD_INT 0
13607: ST_TO_ADDR
13608: GO 13725
13610: LD_INT 1
13612: DOUBLE
13613: EQUAL
13614: IFTRUE 13618
13616: GO 13629
13618: POP
// opoce = 3 ; 2 :
13619: LD_ADDR_EXP 39
13623: PUSH
13624: LD_INT 3
13626: ST_TO_ADDR
13627: GO 13725
13629: LD_INT 2
13631: DOUBLE
13632: EQUAL
13633: IFTRUE 13637
13635: GO 13648
13637: POP
// opoce = 7 ; 3 :
13638: LD_ADDR_EXP 39
13642: PUSH
13643: LD_INT 7
13645: ST_TO_ADDR
13646: GO 13725
13648: LD_INT 3
13650: DOUBLE
13651: EQUAL
13652: IFTRUE 13656
13654: GO 13667
13656: POP
// opoce = 11 ; 4 :
13657: LD_ADDR_EXP 39
13661: PUSH
13662: LD_INT 11
13664: ST_TO_ADDR
13665: GO 13725
13667: LD_INT 4
13669: DOUBLE
13670: EQUAL
13671: IFTRUE 13675
13673: GO 13686
13675: POP
// opoce = 15 ; 5 :
13676: LD_ADDR_EXP 39
13680: PUSH
13681: LD_INT 15
13683: ST_TO_ADDR
13684: GO 13725
13686: LD_INT 5
13688: DOUBLE
13689: EQUAL
13690: IFTRUE 13694
13692: GO 13705
13694: POP
// opoce = 19 ; 6 :
13695: LD_ADDR_EXP 39
13699: PUSH
13700: LD_INT 19
13702: ST_TO_ADDR
13703: GO 13725
13705: LD_INT 6
13707: DOUBLE
13708: EQUAL
13709: IFTRUE 13713
13711: GO 13724
13713: POP
// opoce = 23 ; end ;
13714: LD_ADDR_EXP 39
13718: PUSH
13719: LD_INT 23
13721: ST_TO_ADDR
13722: GO 13725
13724: POP
// fortpos = [ [ [ 46 , 53 , 4 ] , [ 51 , 62 , 4 ] ] , [ [ 167 , 53 , 1 ] , [ 173 , 64 , 1 ] ] ] ;
13725: LD_ADDR_LOC 44
13729: PUSH
13730: LD_INT 46
13732: PUSH
13733: LD_INT 53
13735: PUSH
13736: LD_INT 4
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: LIST
13743: PUSH
13744: LD_INT 51
13746: PUSH
13747: LD_INT 62
13749: PUSH
13750: LD_INT 4
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: LIST
13757: PUSH
13758: EMPTY
13759: LIST
13760: LIST
13761: PUSH
13762: LD_INT 167
13764: PUSH
13765: LD_INT 53
13767: PUSH
13768: LD_INT 1
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: LIST
13775: PUSH
13776: LD_INT 173
13778: PUSH
13779: LD_INT 64
13781: PUSH
13782: LD_INT 1
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: LIST
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: ST_TO_ADDR
// areasdiff = [ vlevodiff , vpravodiff ] ;
13798: LD_ADDR_LOC 45
13802: PUSH
13803: LD_INT 16
13805: PUSH
13806: LD_INT 17
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: ST_TO_ADDR
// directions = [ 4 , 1 ] ;
13813: LD_ADDR_LOC 46
13817: PUSH
13818: LD_INT 4
13820: PUSH
13821: LD_INT 1
13823: PUSH
13824: EMPTY
13825: LIST
13826: LIST
13827: ST_TO_ADDR
// for tmp = 1 to 8 do
13828: LD_ADDR_VAR 0 2
13832: PUSH
13833: DOUBLE
13834: LD_INT 1
13836: DEC
13837: ST_TO_ADDR
13838: LD_INT 8
13840: PUSH
13841: FOR_TO
13842: IFFALSE 15011
// if mp_sides_nations_ [ tmp ] then
13844: LD_EXP 49
13848: PUSH
13849: LD_VAR 0 2
13853: ARRAY
13854: IFFALSE 15009
// begin if mp_sides_positions_ [ tmp ] = 1 then
13856: LD_EXP 50
13860: PUSH
13861: LD_VAR 0 2
13865: ARRAY
13866: PUSH
13867: LD_INT 1
13869: EQUAL
13870: IFFALSE 13884
// pos1side = tmp else
13872: LD_ADDR_EXP 44
13876: PUSH
13877: LD_VAR 0 2
13881: ST_TO_ADDR
13882: GO 13894
// pos2side = tmp ;
13884: LD_ADDR_EXP 45
13888: PUSH
13889: LD_VAR 0 2
13893: ST_TO_ADDR
// uc_side = tmp ;
13894: LD_ADDR_OWVAR 20
13898: PUSH
13899: LD_VAR 0 2
13903: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ tmp ] ;
13904: LD_ADDR_OWVAR 21
13908: PUSH
13909: LD_EXP 49
13913: PUSH
13914: LD_VAR 0 2
13918: ARRAY
13919: ST_TO_ADDR
// bc_type = b_depot ;
13920: LD_ADDR_OWVAR 42
13924: PUSH
13925: LD_INT 0
13927: ST_TO_ADDR
// bc_level = 1 ;
13928: LD_ADDR_OWVAR 43
13932: PUSH
13933: LD_INT 1
13935: ST_TO_ADDR
// tmp2 = createandplacebuildingxyd ( depotpositions [ mp_sides_positions_ [ tmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 2 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 3 ] ) ;
13936: LD_ADDR_VAR 0 3
13940: PUSH
13941: LD_EXP 42
13945: PUSH
13946: LD_EXP 50
13950: PUSH
13951: LD_VAR 0 2
13955: ARRAY
13956: ARRAY
13957: PUSH
13958: LD_INT 1
13960: ARRAY
13961: PPUSH
13962: LD_EXP 42
13966: PUSH
13967: LD_EXP 50
13971: PUSH
13972: LD_VAR 0 2
13976: ARRAY
13977: ARRAY
13978: PUSH
13979: LD_INT 2
13981: ARRAY
13982: PPUSH
13983: LD_EXP 42
13987: PUSH
13988: LD_EXP 50
13992: PUSH
13993: LD_VAR 0 2
13997: ARRAY
13998: ARRAY
13999: PUSH
14000: LD_INT 3
14002: ARRAY
14003: PPUSH
14004: CALL_OW 47
14008: ST_TO_ADDR
// if batt_fl then
14009: LD_LOC 40
14013: IFFALSE 14123
// setbattleflag ( tmp , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 2 ] , [ [ bfo_defend_bonus_human , 80 ] , [ bfo_defend_bonus_vehicle , 40 ] , [ bfo_defend_bonus_building , 0 ] , [ bfo_range , 17 ] , [ bfo_height , 100 ] ] ) ;
14015: LD_VAR 0 2
14019: PPUSH
14020: LD_EXP 42
14024: PUSH
14025: LD_EXP 50
14029: PUSH
14030: LD_VAR 0 2
14034: ARRAY
14035: ARRAY
14036: PUSH
14037: LD_INT 1
14039: ARRAY
14040: PPUSH
14041: LD_EXP 42
14045: PUSH
14046: LD_EXP 50
14050: PUSH
14051: LD_VAR 0 2
14055: ARRAY
14056: ARRAY
14057: PUSH
14058: LD_INT 2
14060: ARRAY
14061: PPUSH
14062: LD_INT 1
14064: PUSH
14065: LD_INT 80
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: PUSH
14072: LD_INT 2
14074: PUSH
14075: LD_INT 40
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: PUSH
14082: LD_INT 3
14084: PUSH
14085: LD_INT 0
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: PUSH
14092: LD_INT 10
14094: PUSH
14095: LD_INT 17
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: PUSH
14102: LD_INT 20
14104: PUSH
14105: LD_INT 100
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: PPUSH
14119: CALL_OW 418
// if zakladna then
14123: LD_LOC 34
14127: IFFALSE 14295
// begin bc_type = b_breastwork ;
14129: LD_ADDR_OWVAR 42
14133: PUSH
14134: LD_INT 31
14136: ST_TO_ADDR
// createandplacebuildingxyd ( fortpos [ mp_sides_positions_ [ tmp ] ] [ 1 ] [ 1 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 1 ] [ 2 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 1 ] [ 3 ] ) ;
14137: LD_LOC 44
14141: PUSH
14142: LD_EXP 50
14146: PUSH
14147: LD_VAR 0 2
14151: ARRAY
14152: ARRAY
14153: PUSH
14154: LD_INT 1
14156: ARRAY
14157: PUSH
14158: LD_INT 1
14160: ARRAY
14161: PPUSH
14162: LD_LOC 44
14166: PUSH
14167: LD_EXP 50
14171: PUSH
14172: LD_VAR 0 2
14176: ARRAY
14177: ARRAY
14178: PUSH
14179: LD_INT 1
14181: ARRAY
14182: PUSH
14183: LD_INT 2
14185: ARRAY
14186: PPUSH
14187: LD_LOC 44
14191: PUSH
14192: LD_EXP 50
14196: PUSH
14197: LD_VAR 0 2
14201: ARRAY
14202: ARRAY
14203: PUSH
14204: LD_INT 1
14206: ARRAY
14207: PUSH
14208: LD_INT 3
14210: ARRAY
14211: PPUSH
14212: CALL_OW 47
// createandplacebuildingxyd ( fortpos [ mp_sides_positions_ [ tmp ] ] [ 2 ] [ 1 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 2 ] [ 2 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 2 ] [ 3 ] ) ;
14216: LD_LOC 44
14220: PUSH
14221: LD_EXP 50
14225: PUSH
14226: LD_VAR 0 2
14230: ARRAY
14231: ARRAY
14232: PUSH
14233: LD_INT 2
14235: ARRAY
14236: PUSH
14237: LD_INT 1
14239: ARRAY
14240: PPUSH
14241: LD_LOC 44
14245: PUSH
14246: LD_EXP 50
14250: PUSH
14251: LD_VAR 0 2
14255: ARRAY
14256: ARRAY
14257: PUSH
14258: LD_INT 2
14260: ARRAY
14261: PUSH
14262: LD_INT 2
14264: ARRAY
14265: PPUSH
14266: LD_LOC 44
14270: PUSH
14271: LD_EXP 50
14275: PUSH
14276: LD_VAR 0 2
14280: ARRAY
14281: ARRAY
14282: PUSH
14283: LD_INT 2
14285: ARRAY
14286: PUSH
14287: LD_INT 3
14289: ARRAY
14290: PPUSH
14291: CALL_OW 47
// end ; addresourcetype ( getbase ( tmp2 ) , mat_cans , start_res ) ;
14295: LD_VAR 0 3
14299: PPUSH
14300: CALL_OW 274
14304: PPUSH
14305: LD_INT 1
14307: PPUSH
14308: LD_LOC 36
14312: PPUSH
14313: CALL_OW 276
// if extra_oil then
14317: LD_LOC 37
14321: IFFALSE 14413
// begin tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14323: LD_ADDR_VAR 0 3
14327: PUSH
14328: LD_LOC 45
14332: PUSH
14333: LD_EXP 50
14337: PUSH
14338: LD_VAR 0 2
14342: ARRAY
14343: ARRAY
14344: PPUSH
14345: LD_INT 0
14347: PPUSH
14348: CALL_OW 16
14352: ST_TO_ADDR
// while not createdepositxy ( tmp2 [ 1 ] , tmp2 [ 2 ] , mat_oil ) do
14353: LD_VAR 0 3
14357: PUSH
14358: LD_INT 1
14360: ARRAY
14361: PPUSH
14362: LD_VAR 0 3
14366: PUSH
14367: LD_INT 2
14369: ARRAY
14370: PPUSH
14371: LD_INT 2
14373: PPUSH
14374: CALL_OW 62
14378: NOT
14379: IFFALSE 14413
// tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14381: LD_ADDR_VAR 0 3
14385: PUSH
14386: LD_LOC 45
14390: PUSH
14391: LD_EXP 50
14395: PUSH
14396: LD_VAR 0 2
14400: ARRAY
14401: ARRAY
14402: PPUSH
14403: LD_INT 0
14405: PPUSH
14406: CALL_OW 16
14410: ST_TO_ADDR
14411: GO 14353
// end ; if extra_sib then
14413: LD_LOC 38
14417: IFFALSE 14509
// begin tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14419: LD_ADDR_VAR 0 3
14423: PUSH
14424: LD_LOC 45
14428: PUSH
14429: LD_EXP 50
14433: PUSH
14434: LD_VAR 0 2
14438: ARRAY
14439: ARRAY
14440: PPUSH
14441: LD_INT 0
14443: PPUSH
14444: CALL_OW 16
14448: ST_TO_ADDR
// while not createdepositxy ( tmp2 [ 1 ] , tmp2 [ 2 ] , mat_siberit ) do
14449: LD_VAR 0 3
14453: PUSH
14454: LD_INT 1
14456: ARRAY
14457: PPUSH
14458: LD_VAR 0 3
14462: PUSH
14463: LD_INT 2
14465: ARRAY
14466: PPUSH
14467: LD_INT 3
14469: PPUSH
14470: CALL_OW 62
14474: NOT
14475: IFFALSE 14509
// tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14477: LD_ADDR_VAR 0 3
14481: PUSH
14482: LD_LOC 45
14486: PUSH
14487: LD_EXP 50
14491: PUSH
14492: LD_VAR 0 2
14496: ARRAY
14497: ARRAY
14498: PPUSH
14499: LD_INT 0
14501: PPUSH
14502: CALL_OW 16
14506: ST_TO_ADDR
14507: GO 14449
// end ; if zakl_plus > 0 then
14509: LD_LOC 39
14513: PUSH
14514: LD_INT 0
14516: GREATER
14517: IFFALSE 14777
// begin bc_type = b_lab ;
14519: LD_ADDR_OWVAR 42
14523: PUSH
14524: LD_INT 6
14526: ST_TO_ADDR
// uc_direction = directions [ mp_sides_positions_ [ tmp ] ] ;
14527: LD_ADDR_OWVAR 24
14531: PUSH
14532: LD_LOC 46
14536: PUSH
14537: LD_EXP 50
14541: PUSH
14542: LD_VAR 0 2
14546: ARRAY
14547: ARRAY
14548: ST_TO_ADDR
// tmp3 = createbuilding ;
14549: LD_ADDR_VAR 0 4
14553: PUSH
14554: CALL_OW 46
14558: ST_TO_ADDR
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14559: LD_ADDR_VAR 0 3
14563: PUSH
14564: LD_EXP 43
14568: PUSH
14569: LD_EXP 50
14573: PUSH
14574: LD_VAR 0 2
14578: ARRAY
14579: ARRAY
14580: PPUSH
14581: LD_INT 0
14583: PPUSH
14584: CALL_OW 16
14588: ST_TO_ADDR
// while not placeunitxy ( tmp3 , tmp2 [ 1 ] , tmp2 [ 2 ] , false ) do
14589: LD_VAR 0 4
14593: PPUSH
14594: LD_VAR 0 3
14598: PUSH
14599: LD_INT 1
14601: ARRAY
14602: PPUSH
14603: LD_VAR 0 3
14607: PUSH
14608: LD_INT 2
14610: ARRAY
14611: PPUSH
14612: LD_INT 0
14614: PPUSH
14615: CALL_OW 48
14619: NOT
14620: IFFALSE 14654
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14622: LD_ADDR_VAR 0 3
14626: PUSH
14627: LD_EXP 43
14631: PUSH
14632: LD_EXP 50
14636: PUSH
14637: LD_VAR 0 2
14641: ARRAY
14642: ARRAY
14643: PPUSH
14644: LD_INT 0
14646: PPUSH
14647: CALL_OW 16
14651: ST_TO_ADDR
14652: GO 14589
// if zakl_plus > 1 then
14654: LD_LOC 39
14658: PUSH
14659: LD_INT 1
14661: GREATER
14662: IFFALSE 14777
// begin bc_type = b_workshop ;
14664: LD_ADDR_OWVAR 42
14668: PUSH
14669: LD_INT 2
14671: ST_TO_ADDR
// tmp3 = createbuilding ;
14672: LD_ADDR_VAR 0 4
14676: PUSH
14677: CALL_OW 46
14681: ST_TO_ADDR
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14682: LD_ADDR_VAR 0 3
14686: PUSH
14687: LD_EXP 43
14691: PUSH
14692: LD_EXP 50
14696: PUSH
14697: LD_VAR 0 2
14701: ARRAY
14702: ARRAY
14703: PPUSH
14704: LD_INT 0
14706: PPUSH
14707: CALL_OW 16
14711: ST_TO_ADDR
// while not placeunitxy ( tmp3 , tmp2 [ 1 ] , tmp2 [ 2 ] , false ) do
14712: LD_VAR 0 4
14716: PPUSH
14717: LD_VAR 0 3
14721: PUSH
14722: LD_INT 1
14724: ARRAY
14725: PPUSH
14726: LD_VAR 0 3
14730: PUSH
14731: LD_INT 2
14733: ARRAY
14734: PPUSH
14735: LD_INT 0
14737: PPUSH
14738: CALL_OW 48
14742: NOT
14743: IFFALSE 14777
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14745: LD_ADDR_VAR 0 3
14749: PUSH
14750: LD_EXP 43
14754: PUSH
14755: LD_EXP 50
14759: PUSH
14760: LD_VAR 0 2
14764: ARRAY
14765: ARRAY
14766: PPUSH
14767: LD_INT 0
14769: PPUSH
14770: CALL_OW 16
14774: ST_TO_ADDR
14775: GO 14712
// end ; end ; if batt_fl then
14777: LD_LOC 40
14781: IFFALSE 14891
// setbattleflag ( tmp , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 2 ] , [ [ bfo_defend_bonus_human , 80 ] , [ bfo_defend_bonus_vehicle , 40 ] , [ bfo_defend_bonus_building , 0 ] , [ bfo_range , 17 ] , [ bfo_height , 100 ] ] ) ;
14783: LD_VAR 0 2
14787: PPUSH
14788: LD_EXP 42
14792: PUSH
14793: LD_EXP 50
14797: PUSH
14798: LD_VAR 0 2
14802: ARRAY
14803: ARRAY
14804: PUSH
14805: LD_INT 1
14807: ARRAY
14808: PPUSH
14809: LD_EXP 42
14813: PUSH
14814: LD_EXP 50
14818: PUSH
14819: LD_VAR 0 2
14823: ARRAY
14824: ARRAY
14825: PUSH
14826: LD_INT 2
14828: ARRAY
14829: PPUSH
14830: LD_INT 1
14832: PUSH
14833: LD_INT 80
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: PUSH
14840: LD_INT 2
14842: PUSH
14843: LD_INT 40
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: PUSH
14850: LD_INT 3
14852: PUSH
14853: LD_INT 0
14855: PUSH
14856: EMPTY
14857: LIST
14858: LIST
14859: PUSH
14860: LD_INT 10
14862: PUSH
14863: LD_INT 17
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PUSH
14870: LD_INT 20
14872: PUSH
14873: LD_INT 100
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: PPUSH
14887: CALL_OW 418
// cl = class_scientistic ;
14891: LD_ADDR_VAR 0 5
14895: PUSH
14896: LD_INT 4
14898: ST_TO_ADDR
// for tmp2 = 1 to lidi do
14899: LD_ADDR_VAR 0 3
14903: PUSH
14904: DOUBLE
14905: LD_INT 1
14907: DEC
14908: ST_TO_ADDR
14909: LD_EXP 37
14913: PUSH
14914: FOR_TO
14915: IFFALSE 15007
// begin if tmp2 >= lidi / 2 then
14917: LD_VAR 0 3
14921: PUSH
14922: LD_EXP 37
14926: PUSH
14927: LD_INT 2
14929: DIVREAL
14930: GREATEREQUAL
14931: IFFALSE 14941
// cl = class_soldier ;
14933: LD_ADDR_VAR 0 5
14937: PUSH
14938: LD_INT 1
14940: ST_TO_ADDR
// preparehuman ( 0 , cl , skilly ) ;
14941: LD_INT 0
14943: PPUSH
14944: LD_VAR 0 5
14948: PPUSH
14949: LD_LOC 35
14953: PPUSH
14954: CALL_OW 380
// if tmp2 = 1 then
14958: LD_VAR 0 3
14962: PUSH
14963: LD_INT 1
14965: EQUAL
14966: IFFALSE 14976
// cl = class_engineer ;
14968: LD_ADDR_VAR 0 5
14972: PUSH
14973: LD_INT 2
14975: ST_TO_ADDR
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14976: CALL_OW 44
14980: PPUSH
14981: LD_EXP 43
14985: PUSH
14986: LD_EXP 50
14990: PUSH
14991: LD_VAR 0 2
14995: ARRAY
14996: ARRAY
14997: PPUSH
14998: LD_INT 0
15000: PPUSH
15001: CALL_OW 49
// end ;
15005: GO 14914
15007: POP
15008: POP
// end ;
15009: GO 13841
15011: POP
15012: POP
// uc_side = 0 ;
15013: LD_ADDR_OWVAR 20
15017: PUSH
15018: LD_INT 0
15020: ST_TO_ADDR
// uc_nation = nation_nature ;
15021: LD_ADDR_OWVAR 21
15025: PUSH
15026: LD_INT 0
15028: ST_TO_ADDR
// for tmp = 1 to opoce do
15029: LD_ADDR_VAR 0 2
15033: PUSH
15034: DOUBLE
15035: LD_INT 1
15037: DEC
15038: ST_TO_ADDR
15039: LD_EXP 39
15043: PUSH
15044: FOR_TO
15045: IFFALSE 15077
// begin preparehuman ( 0 , class_apeman , 0 ) ;
15047: LD_INT 0
15049: PPUSH
15050: LD_INT 12
15052: PPUSH
15053: LD_INT 0
15055: PPUSH
15056: CALL_OW 380
// placeunitarea ( createhuman , les , false ) ;
15060: CALL_OW 44
15064: PPUSH
15065: LD_INT 4
15067: PPUSH
15068: LD_INT 0
15070: PPUSH
15071: CALL_OW 49
// end ;
15075: GO 15044
15077: POP
15078: POP
// case mp_sides_positions_ [ your_side ] of 1 :
15079: LD_EXP 50
15083: PUSH
15084: LD_OWVAR 2
15088: ARRAY
15089: PUSH
15090: LD_INT 1
15092: DOUBLE
15093: EQUAL
15094: IFTRUE 15098
15096: GO 15111
15098: POP
// centernowonxy ( 44 , 60 ) ; 2 :
15099: LD_INT 44
15101: PPUSH
15102: LD_INT 60
15104: PPUSH
15105: CALL_OW 86
15109: GO 15133
15111: LD_INT 2
15113: DOUBLE
15114: EQUAL
15115: IFTRUE 15119
15117: GO 15132
15119: POP
// centernowonxy ( 175 , 60 ) ; end ;
15120: LD_INT 175
15122: PPUSH
15123: LD_INT 60
15125: PPUSH
15126: CALL_OW 86
15130: GO 15133
15132: POP
// end ;
15133: LD_VAR 0 1
15137: RET
// on humandestroyed ( un , side , nat , x , y , dir , sex , cl ) marked 10 do if mp_sides_positions_ [ side ] = 1 then
15138: LD_EXP 50
15142: PUSH
15143: LD_VAR 0 2
15147: ARRAY
15148: PUSH
15149: LD_INT 1
15151: EQUAL
15152: IFFALSE 15170
// resp_cnt1 = resp_cnt1 + 1 else
15154: LD_ADDR_LOC 47
15158: PUSH
15159: LD_LOC 47
15163: PUSH
15164: LD_INT 1
15166: PLUS
15167: ST_TO_ADDR
15168: GO 15184
// resp_cnt2 = resp_cnt2 + 1 ;
15170: LD_ADDR_LOC 48
15174: PUSH
15175: LD_LOC 48
15179: PUSH
15180: LD_INT 1
15182: PLUS
15183: ST_TO_ADDR
15184: PPOPN 8
15186: END
// every 0 0$30 trigger resp_cnt1 >= people_resp marked 11 do
15187: LD_LOC 47
15191: PUSH
15192: LD_LOC 42
15196: GREATEREQUAL
15197: IFFALSE 15350
15199: GO 15201
15201: DISABLE
// begin resp_cnt1 = resp_cnt1 - people_resp ;
15202: LD_ADDR_LOC 47
15206: PUSH
15207: LD_LOC 47
15211: PUSH
15212: LD_LOC 42
15216: MINUS
15217: ST_TO_ADDR
// if not filterallunits ( [ [ f_side , pos1side ] , [ f_or , [ f_btype , b_depot ] , [ f_class , class_engineer ] ] ] ) then
15218: LD_INT 22
15220: PUSH
15221: LD_EXP 44
15225: PUSH
15226: EMPTY
15227: LIST
15228: LIST
15229: PUSH
15230: LD_INT 2
15232: PUSH
15233: LD_INT 30
15235: PUSH
15236: LD_INT 0
15238: PUSH
15239: EMPTY
15240: LIST
15241: LIST
15242: PUSH
15243: LD_INT 25
15245: PUSH
15246: LD_INT 2
15248: PUSH
15249: EMPTY
15250: LIST
15251: LIST
15252: PUSH
15253: EMPTY
15254: LIST
15255: LIST
15256: LIST
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: PPUSH
15262: CALL_OW 69
15266: NOT
15267: IFFALSE 15272
// begin enable ;
15269: ENABLE
// exit ;
15270: GO 15350
// end ; uc_side = pos1side ;
15272: LD_ADDR_OWVAR 20
15276: PUSH
15277: LD_EXP 44
15281: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos1side ] ;
15282: LD_ADDR_OWVAR 21
15286: PUSH
15287: LD_EXP 49
15291: PUSH
15292: LD_EXP 44
15296: ARRAY
15297: ST_TO_ADDR
// preparehuman ( 0 , class_soldier , skilly ) ;
15298: LD_INT 0
15300: PPUSH
15301: LD_INT 1
15303: PPUSH
15304: LD_LOC 35
15308: PPUSH
15309: CALL_OW 380
// wait ( 0 0$10 ) ;
15313: LD_INT 350
15315: PPUSH
15316: CALL_OW 67
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ pos1side ] ] , true ) ;
15320: CALL_OW 44
15324: PPUSH
15325: LD_EXP 43
15329: PUSH
15330: LD_EXP 50
15334: PUSH
15335: LD_EXP 44
15339: ARRAY
15340: ARRAY
15341: PPUSH
15342: LD_INT 1
15344: PPUSH
15345: CALL_OW 49
// enable ;
15349: ENABLE
// end ;
15350: END
// every 0 0$30 trigger resp_cnt2 >= people_resp marked 12 do
15351: LD_LOC 48
15355: PUSH
15356: LD_LOC 42
15360: GREATEREQUAL
15361: IFFALSE 15514
15363: GO 15365
15365: DISABLE
// begin resp_cnt2 = resp_cnt2 - people_resp ;
15366: LD_ADDR_LOC 48
15370: PUSH
15371: LD_LOC 48
15375: PUSH
15376: LD_LOC 42
15380: MINUS
15381: ST_TO_ADDR
// if not filterallunits ( [ [ f_side , pos2side ] , [ f_or , [ f_btype , b_depot ] , [ f_class , class_engineer ] ] ] ) then
15382: LD_INT 22
15384: PUSH
15385: LD_EXP 45
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: PUSH
15394: LD_INT 2
15396: PUSH
15397: LD_INT 30
15399: PUSH
15400: LD_INT 0
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: PUSH
15407: LD_INT 25
15409: PUSH
15410: LD_INT 2
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: LIST
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: PPUSH
15426: CALL_OW 69
15430: NOT
15431: IFFALSE 15436
// begin enable ;
15433: ENABLE
// exit ;
15434: GO 15514
// end ; uc_side = pos2side ;
15436: LD_ADDR_OWVAR 20
15440: PUSH
15441: LD_EXP 45
15445: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos2side ] ;
15446: LD_ADDR_OWVAR 21
15450: PUSH
15451: LD_EXP 49
15455: PUSH
15456: LD_EXP 45
15460: ARRAY
15461: ST_TO_ADDR
// preparehuman ( 0 , class_soldier , skilly ) ;
15462: LD_INT 0
15464: PPUSH
15465: LD_INT 1
15467: PPUSH
15468: LD_LOC 35
15472: PPUSH
15473: CALL_OW 380
// wait ( 0 0$10 ) ;
15477: LD_INT 350
15479: PPUSH
15480: CALL_OW 67
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ pos2side ] ] , true ) ;
15484: CALL_OW 44
15488: PPUSH
15489: LD_EXP 43
15493: PUSH
15494: LD_EXP 50
15498: PUSH
15499: LD_EXP 45
15503: ARRAY
15504: ARRAY
15505: PPUSH
15506: LD_INT 1
15508: PPUSH
15509: CALL_OW 49
// enable ;
15513: ENABLE
// end ;
15514: END
// every 0 0$1 marked 13 do
15515: GO 15517
15517: DISABLE
// begin if not filterallunits ( [ [ f_side , pos1side ] , [ f_type , unit_human ] ] ) then
15518: LD_INT 22
15520: PUSH
15521: LD_EXP 44
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: PUSH
15530: LD_INT 21
15532: PUSH
15533: LD_INT 1
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: PPUSH
15544: CALL_OW 69
15548: NOT
15549: IFFALSE 15573
// if pos1side = your_side then
15551: LD_EXP 44
15555: PUSH
15556: LD_OWVAR 2
15560: EQUAL
15561: IFFALSE 15569
// youlostinmultiplayer else
15563: CALL_OW 107
15567: GO 15573
// youwininmultiplayer ;
15569: CALL_OW 106
// if not filterallunits ( [ [ f_side , pos2side ] , [ f_type , unit_human ] ] ) then
15573: LD_INT 22
15575: PUSH
15576: LD_EXP 45
15580: PUSH
15581: EMPTY
15582: LIST
15583: LIST
15584: PUSH
15585: LD_INT 21
15587: PUSH
15588: LD_INT 1
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: PUSH
15595: EMPTY
15596: LIST
15597: LIST
15598: PPUSH
15599: CALL_OW 69
15603: NOT
15604: IFFALSE 15628
// if pos2side = your_side then
15606: LD_EXP 45
15610: PUSH
15611: LD_OWVAR 2
15615: EQUAL
15616: IFFALSE 15624
// youlostinmultiplayer else
15618: CALL_OW 107
15622: GO 15628
// youwininmultiplayer ;
15624: CALL_OW 106
// end ; end_of_file
15628: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
15629: LD_INT 0
15631: PPUSH
15632: PPUSH
// for un in battle_flags_id do
15633: LD_ADDR_VAR 0 2
15637: PUSH
15638: LD_EXP 29
15642: PUSH
15643: FOR_IN
15644: IFFALSE 15719
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
15646: LD_VAR 0 2
15650: PPUSH
15651: LD_INT 1
15653: PUSH
15654: LD_LOC 49
15658: PUSH
15659: EMPTY
15660: LIST
15661: LIST
15662: PUSH
15663: LD_INT 2
15665: PUSH
15666: LD_LOC 49
15670: PUSH
15671: LD_INT 2
15673: DIV
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PUSH
15679: LD_INT 3
15681: PUSH
15682: LD_LOC 49
15686: PUSH
15687: LD_INT 5
15689: DIV
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: PUSH
15695: LD_INT 20
15697: PUSH
15698: LD_LOC 49
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: PPUSH
15713: CALL_OW 423
15717: GO 15643
15719: POP
15720: POP
// end ;
15721: LD_VAR 0 1
15725: RET
// every 0 0$0.1 marked 55 do var un ;
15726: GO 15728
15728: DISABLE
15729: LD_INT 0
15731: PPUSH
// begin if not def_morale_flags then
15732: LD_EXP 66
15736: NOT
15737: IFFALSE 15741
// exit ;
15739: GO 15818
// if not morale_decreasing_time then
15741: LD_EXP 11
15745: NOT
15746: IFFALSE 15750
// exit ;
15748: GO 15818
// strength = 100 ;
15750: LD_ADDR_LOC 49
15754: PUSH
15755: LD_INT 100
15757: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
15758: LD_EXP 11
15762: PPUSH
15763: CALL_OW 67
// strength := strength - 1 ;
15767: LD_ADDR_LOC 49
15771: PUSH
15772: LD_LOC 49
15776: PUSH
15777: LD_INT 1
15779: MINUS
15780: ST_TO_ADDR
// Update_Flags ;
15781: CALL 15629 0 0
// until not strength ;
15785: LD_LOC 49
15789: NOT
15790: IFFALSE 15758
// for un in battle_flags_id do
15792: LD_ADDR_VAR 0 1
15796: PUSH
15797: LD_EXP 29
15801: PUSH
15802: FOR_IN
15803: IFFALSE 15816
// KillBattleFlag ( un ) ;
15805: LD_VAR 0 1
15809: PPUSH
15810: CALL_OW 419
15814: GO 15802
15816: POP
15817: POP
// end ; end_of_file
15818: PPOPN 1
15820: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
15821: LD_INT 0
15823: PPUSH
15824: PPUSH
// if ( not IAmSpec ) then
15825: CALL_OW 531
15829: NOT
15830: IFFALSE 15846
// Result := Limits_Info ^  ;
15832: LD_ADDR_VAR 0 1
15836: PUSH
15837: LD_LOC 61
15841: PUSH
15842: LD_STRING 
15844: ADD
15845: ST_TO_ADDR
// for i := 1 to 8 do
15846: LD_ADDR_VAR 0 2
15850: PUSH
15851: DOUBLE
15852: LD_INT 1
15854: DEC
15855: ST_TO_ADDR
15856: LD_INT 8
15858: PUSH
15859: FOR_TO
15860: IFFALSE 15905
// if Cheaters [ i ] then
15862: LD_LOC 62
15866: PUSH
15867: LD_VAR 0 2
15871: ARRAY
15872: IFFALSE 15903
// Result := Result ^ [ #Cheater , i , i ] ;
15874: LD_ADDR_VAR 0 1
15878: PUSH
15879: LD_VAR 0 1
15883: PUSH
15884: LD_STRING #Cheater
15886: PUSH
15887: LD_VAR 0 2
15891: PUSH
15892: LD_VAR 0 2
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: LIST
15901: ADD
15902: ST_TO_ADDR
15903: GO 15859
15905: POP
15906: POP
// end ;
15907: LD_VAR 0 1
15911: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
15912: LD_INT 0
15914: PPUSH
15915: PPUSH
15916: PPUSH
15917: PPUSH
15918: PPUSH
// case Game_Type of 10 :
15919: LD_EXP 56
15923: PUSH
15924: LD_INT 10
15926: DOUBLE
15927: EQUAL
15928: IFTRUE 15932
15930: GO 15943
15932: POP
// def_game_rules := 1 ; 11 :
15933: LD_ADDR_EXP 57
15937: PUSH
15938: LD_INT 1
15940: ST_TO_ADDR
15941: GO 15963
15943: LD_INT 11
15945: DOUBLE
15946: EQUAL
15947: IFTRUE 15951
15949: GO 15962
15951: POP
// def_game_rules := 3 ; end ;
15952: LD_ADDR_EXP 57
15956: PUSH
15957: LD_INT 3
15959: ST_TO_ADDR
15960: GO 15963
15962: POP
// case def_game_rules of 0 :
15963: LD_EXP 57
15967: PUSH
15968: LD_INT 0
15970: DOUBLE
15971: EQUAL
15972: IFTRUE 15976
15974: GO 15981
15976: POP
// exit ; 1 :
15977: GO 18039
15979: GO 17939
15981: LD_INT 1
15983: DOUBLE
15984: EQUAL
15985: IFTRUE 15989
15987: GO 16205
15989: POP
// begin def_base_level := 2 ;
15990: LD_ADDR_EXP 58
15994: PUSH
15995: LD_INT 2
15997: ST_TO_ADDR
// def_amount_of_people := 2 ;
15998: LD_ADDR_EXP 59
16002: PUSH
16003: LD_INT 2
16005: ST_TO_ADDR
// def_skill_level := 1 ;
16006: LD_ADDR_EXP 60
16010: PUSH
16011: LD_INT 1
16013: ST_TO_ADDR
// def_starting_resources := 2 ;
16014: LD_ADDR_EXP 61
16018: PUSH
16019: LD_INT 2
16021: ST_TO_ADDR
// def_shipments_density := 1 ;
16022: LD_ADDR_EXP 62
16026: PUSH
16027: LD_INT 1
16029: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
16030: LD_ADDR_EXP 63
16034: PUSH
16035: LD_INT 0
16037: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
16038: LD_ADDR_EXP 64
16042: PUSH
16043: LD_INT 1
16045: ST_TO_ADDR
// def_shared_vision := 1 ;
16046: LD_ADDR_EXP 65
16050: PUSH
16051: LD_INT 1
16053: ST_TO_ADDR
// def_morale_flags := 3 ;
16054: LD_ADDR_EXP 66
16058: PUSH
16059: LD_INT 3
16061: ST_TO_ADDR
// def_siberite_detection := 1 ;
16062: LD_ADDR_EXP 67
16066: PUSH
16067: LD_INT 1
16069: ST_TO_ADDR
// def_people_respawning := 1 ;
16070: LD_ADDR_EXP 68
16074: PUSH
16075: LD_INT 1
16077: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
16078: LD_ADDR_EXP 69
16082: PUSH
16083: LD_INT 1
16085: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16086: LD_ADDR_EXP 70
16090: PUSH
16091: LD_INT 0
16093: ST_TO_ADDR
// def_builduptime := 2 ;
16094: LD_ADDR_EXP 71
16098: PUSH
16099: LD_INT 2
16101: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
16102: LD_ADDR_VAR 0 2
16106: PUSH
16107: EMPTY
16108: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
16109: LD_ADDR_VAR 0 3
16113: PUSH
16114: EMPTY
16115: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16116: LD_ADDR_LOC 56
16120: PUSH
16121: EMPTY
16122: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16123: LD_ADDR_LOC 57
16127: PUSH
16128: EMPTY
16129: ST_TO_ADDR
// Banned_Controls := [ ] ;
16130: LD_ADDR_LOC 58
16134: PUSH
16135: EMPTY
16136: ST_TO_ADDR
// Banned_Engines := [ ] ;
16137: LD_ADDR_LOC 59
16141: PUSH
16142: EMPTY
16143: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
16144: LD_ADDR_LOC 54
16148: PUSH
16149: LD_INT 37
16151: PUSH
16152: EMPTY
16153: LIST
16154: PUSH
16155: LD_INT 4
16157: PUSH
16158: LD_INT 5
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PUSH
16165: LD_INT 31
16167: PUSH
16168: LD_INT 32
16170: PUSH
16171: LD_INT 33
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: LIST
16178: PUSH
16179: EMPTY
16180: LIST
16181: LIST
16182: LIST
16183: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
16184: LD_ADDR_LOC 55
16188: PUSH
16189: LD_INT 2
16191: PUSH
16192: LD_INT 2
16194: PUSH
16195: LD_INT 4
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: LIST
16202: ST_TO_ADDR
// end ; 2 :
16203: GO 17939
16205: LD_INT 2
16207: DOUBLE
16208: EQUAL
16209: IFTRUE 16213
16211: GO 16422
16213: POP
// begin def_base_level := 1 ;
16214: LD_ADDR_EXP 58
16218: PUSH
16219: LD_INT 1
16221: ST_TO_ADDR
// def_amount_of_people := 2 ;
16222: LD_ADDR_EXP 59
16226: PUSH
16227: LD_INT 2
16229: ST_TO_ADDR
// def_skill_level := 3 ;
16230: LD_ADDR_EXP 60
16234: PUSH
16235: LD_INT 3
16237: ST_TO_ADDR
// def_starting_resources := 3 ;
16238: LD_ADDR_EXP 61
16242: PUSH
16243: LD_INT 3
16245: ST_TO_ADDR
// def_shipments_density := 2 ;
16246: LD_ADDR_EXP 62
16250: PUSH
16251: LD_INT 2
16253: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
16254: LD_ADDR_EXP 63
16258: PUSH
16259: LD_INT 1
16261: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
16262: LD_ADDR_EXP 64
16266: PUSH
16267: LD_INT 2
16269: ST_TO_ADDR
// def_shared_vision := 1 ;
16270: LD_ADDR_EXP 65
16274: PUSH
16275: LD_INT 1
16277: ST_TO_ADDR
// def_morale_flags := 0 ;
16278: LD_ADDR_EXP 66
16282: PUSH
16283: LD_INT 0
16285: ST_TO_ADDR
// def_siberite_detection := 1 ;
16286: LD_ADDR_EXP 67
16290: PUSH
16291: LD_INT 1
16293: ST_TO_ADDR
// def_people_respawning := 0 ;
16294: LD_ADDR_EXP 68
16298: PUSH
16299: LD_INT 0
16301: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
16302: LD_ADDR_EXP 69
16306: PUSH
16307: LD_INT 0
16309: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16310: LD_ADDR_EXP 70
16314: PUSH
16315: LD_INT 0
16317: ST_TO_ADDR
// def_builduptime := 2 ;
16318: LD_ADDR_EXP 71
16322: PUSH
16323: LD_INT 2
16325: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
16326: LD_ADDR_VAR 0 2
16330: PUSH
16331: LD_INT 1
16333: PUSH
16334: EMPTY
16335: LIST
16336: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
16337: LD_ADDR_VAR 0 3
16341: PUSH
16342: EMPTY
16343: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16344: LD_ADDR_LOC 56
16348: PUSH
16349: EMPTY
16350: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16351: LD_ADDR_LOC 57
16355: PUSH
16356: EMPTY
16357: ST_TO_ADDR
// Banned_Controls := [ ] ;
16358: LD_ADDR_LOC 58
16362: PUSH
16363: EMPTY
16364: ST_TO_ADDR
// Banned_Engines := [ ] ;
16365: LD_ADDR_LOC 59
16369: PUSH
16370: EMPTY
16371: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
16372: LD_ADDR_LOC 54
16376: PUSH
16377: LD_INT 4
16379: PUSH
16380: LD_INT 5
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PUSH
16387: LD_INT 31
16389: PUSH
16390: LD_INT 32
16392: PUSH
16393: LD_INT 33
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: LIST
16400: PUSH
16401: EMPTY
16402: LIST
16403: LIST
16404: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
16405: LD_ADDR_LOC 55
16409: PUSH
16410: LD_INT 1
16412: PUSH
16413: LD_INT 2
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: ST_TO_ADDR
// end ; 3 :
16420: GO 17939
16422: LD_INT 3
16424: DOUBLE
16425: EQUAL
16426: IFTRUE 16430
16428: GO 16673
16430: POP
// begin def_base_level := 1 ;
16431: LD_ADDR_EXP 58
16435: PUSH
16436: LD_INT 1
16438: ST_TO_ADDR
// def_amount_of_people := 2 ;
16439: LD_ADDR_EXP 59
16443: PUSH
16444: LD_INT 2
16446: ST_TO_ADDR
// def_skill_level := 3 ;
16447: LD_ADDR_EXP 60
16451: PUSH
16452: LD_INT 3
16454: ST_TO_ADDR
// def_starting_resources := 3 ;
16455: LD_ADDR_EXP 61
16459: PUSH
16460: LD_INT 3
16462: ST_TO_ADDR
// def_shipments_density := 1 ;
16463: LD_ADDR_EXP 62
16467: PUSH
16468: LD_INT 1
16470: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
16471: LD_ADDR_EXP 63
16475: PUSH
16476: LD_INT 0
16478: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
16479: LD_ADDR_EXP 64
16483: PUSH
16484: LD_INT 1
16486: ST_TO_ADDR
// def_shared_vision := 1 ;
16487: LD_ADDR_EXP 65
16491: PUSH
16492: LD_INT 1
16494: ST_TO_ADDR
// def_morale_flags := 0 ;
16495: LD_ADDR_EXP 66
16499: PUSH
16500: LD_INT 0
16502: ST_TO_ADDR
// def_siberite_detection := 1 ;
16503: LD_ADDR_EXP 67
16507: PUSH
16508: LD_INT 1
16510: ST_TO_ADDR
// def_people_respawning := 0 ;
16511: LD_ADDR_EXP 68
16515: PUSH
16516: LD_INT 0
16518: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
16519: LD_ADDR_EXP 69
16523: PUSH
16524: LD_INT 2
16526: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16527: LD_ADDR_EXP 70
16531: PUSH
16532: LD_INT 0
16534: ST_TO_ADDR
// def_builduptime := 1 ;
16535: LD_ADDR_EXP 71
16539: PUSH
16540: LD_INT 1
16542: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
16543: LD_ADDR_VAR 0 2
16547: PUSH
16548: LD_INT 23
16550: PUSH
16551: EMPTY
16552: LIST
16553: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
16554: LD_ADDR_VAR 0 3
16558: PUSH
16559: LD_INT 2
16561: PUSH
16562: LD_INT 37
16564: PUSH
16565: LD_INT 32
16567: PUSH
16568: LD_INT 33
16570: PUSH
16571: LD_INT 36
16573: PUSH
16574: LD_INT 16
16576: PUSH
16577: LD_INT 23
16579: PUSH
16580: LD_INT 21
16582: PUSH
16583: LD_INT 18
16585: PUSH
16586: LD_INT 22
16588: PUSH
16589: LD_INT 20
16591: PUSH
16592: LD_INT 19
16594: PUSH
16595: LD_INT 25
16597: PUSH
16598: LD_INT 17
16600: PUSH
16601: LD_INT 24
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16621: LD_ADDR_LOC 56
16625: PUSH
16626: EMPTY
16627: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16628: LD_ADDR_LOC 57
16632: PUSH
16633: EMPTY
16634: ST_TO_ADDR
// Banned_Controls := [ ] ;
16635: LD_ADDR_LOC 58
16639: PUSH
16640: EMPTY
16641: ST_TO_ADDR
// Banned_Engines := [ ] ;
16642: LD_ADDR_LOC 59
16646: PUSH
16647: EMPTY
16648: ST_TO_ADDR
// Restricted_Builds := [ ] ;
16649: LD_ADDR_LOC 54
16653: PUSH
16654: EMPTY
16655: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
16656: LD_ADDR_LOC 55
16660: PUSH
16661: EMPTY
16662: ST_TO_ADDR
// No_Mechs := true ;
16663: LD_ADDR_EXP 72
16667: PUSH
16668: LD_INT 1
16670: ST_TO_ADDR
// end ; 4 :
16671: GO 17939
16673: LD_INT 4
16675: DOUBLE
16676: EQUAL
16677: IFTRUE 16681
16679: GO 16856
16681: POP
// begin def_base_level := 1 ;
16682: LD_ADDR_EXP 58
16686: PUSH
16687: LD_INT 1
16689: ST_TO_ADDR
// def_amount_of_people := 2 ;
16690: LD_ADDR_EXP 59
16694: PUSH
16695: LD_INT 2
16697: ST_TO_ADDR
// def_skill_level := 3 ;
16698: LD_ADDR_EXP 60
16702: PUSH
16703: LD_INT 3
16705: ST_TO_ADDR
// def_starting_resources := 3 ;
16706: LD_ADDR_EXP 61
16710: PUSH
16711: LD_INT 3
16713: ST_TO_ADDR
// def_shipments_density := 2 ;
16714: LD_ADDR_EXP 62
16718: PUSH
16719: LD_INT 2
16721: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
16722: LD_ADDR_EXP 63
16726: PUSH
16727: LD_INT 1
16729: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
16730: LD_ADDR_EXP 64
16734: PUSH
16735: LD_INT 2
16737: ST_TO_ADDR
// def_shared_vision := 1 ;
16738: LD_ADDR_EXP 65
16742: PUSH
16743: LD_INT 1
16745: ST_TO_ADDR
// def_morale_flags := 0 ;
16746: LD_ADDR_EXP 66
16750: PUSH
16751: LD_INT 0
16753: ST_TO_ADDR
// def_siberite_detection := 1 ;
16754: LD_ADDR_EXP 67
16758: PUSH
16759: LD_INT 1
16761: ST_TO_ADDR
// def_people_respawning := 0 ;
16762: LD_ADDR_EXP 68
16766: PUSH
16767: LD_INT 0
16769: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
16770: LD_ADDR_EXP 69
16774: PUSH
16775: LD_INT 0
16777: ST_TO_ADDR
// def_siberite_bomb := 1 ;
16778: LD_ADDR_EXP 70
16782: PUSH
16783: LD_INT 1
16785: ST_TO_ADDR
// def_builduptime := 3 ;
16786: LD_ADDR_EXP 71
16790: PUSH
16791: LD_INT 3
16793: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
16794: LD_ADDR_VAR 0 2
16798: PUSH
16799: LD_INT 1
16801: PUSH
16802: EMPTY
16803: LIST
16804: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
16805: LD_ADDR_VAR 0 3
16809: PUSH
16810: EMPTY
16811: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16812: LD_ADDR_LOC 56
16816: PUSH
16817: EMPTY
16818: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16819: LD_ADDR_LOC 57
16823: PUSH
16824: EMPTY
16825: ST_TO_ADDR
// Banned_Controls := [ ] ;
16826: LD_ADDR_LOC 58
16830: PUSH
16831: EMPTY
16832: ST_TO_ADDR
// Banned_Engines := [ ] ;
16833: LD_ADDR_LOC 59
16837: PUSH
16838: EMPTY
16839: ST_TO_ADDR
// Restricted_Builds := [ ] ;
16840: LD_ADDR_LOC 54
16844: PUSH
16845: EMPTY
16846: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
16847: LD_ADDR_LOC 55
16851: PUSH
16852: EMPTY
16853: ST_TO_ADDR
// end ; 5 :
16854: GO 17939
16856: LD_INT 5
16858: DOUBLE
16859: EQUAL
16860: IFTRUE 16864
16862: GO 17113
16864: POP
// begin def_base_level := 0 ;
16865: LD_ADDR_EXP 58
16869: PUSH
16870: LD_INT 0
16872: ST_TO_ADDR
// def_amount_of_people := 0 ;
16873: LD_ADDR_EXP 59
16877: PUSH
16878: LD_INT 0
16880: ST_TO_ADDR
// def_skill_level := 0 ;
16881: LD_ADDR_EXP 60
16885: PUSH
16886: LD_INT 0
16888: ST_TO_ADDR
// def_starting_resources := 0 ;
16889: LD_ADDR_EXP 61
16893: PUSH
16894: LD_INT 0
16896: ST_TO_ADDR
// def_shipments_density := 0 ;
16897: LD_ADDR_EXP 62
16901: PUSH
16902: LD_INT 0
16904: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
16905: LD_ADDR_EXP 63
16909: PUSH
16910: LD_INT 0
16912: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
16913: LD_ADDR_EXP 64
16917: PUSH
16918: LD_INT 0
16920: ST_TO_ADDR
// def_shared_vision := 1 ;
16921: LD_ADDR_EXP 65
16925: PUSH
16926: LD_INT 1
16928: ST_TO_ADDR
// def_morale_flags := 0 ;
16929: LD_ADDR_EXP 66
16933: PUSH
16934: LD_INT 0
16936: ST_TO_ADDR
// def_siberite_detection := 0 ;
16937: LD_ADDR_EXP 67
16941: PUSH
16942: LD_INT 0
16944: ST_TO_ADDR
// def_people_respawning := 1 ;
16945: LD_ADDR_EXP 68
16949: PUSH
16950: LD_INT 1
16952: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
16953: LD_ADDR_EXP 69
16957: PUSH
16958: LD_INT 1
16960: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16961: LD_ADDR_EXP 70
16965: PUSH
16966: LD_INT 0
16968: ST_TO_ADDR
// def_builduptime := 0 ;
16969: LD_ADDR_EXP 71
16973: PUSH
16974: LD_INT 0
16976: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
16977: LD_ADDR_VAR 0 2
16981: PUSH
16982: LD_INT 10
16984: PUSH
16985: LD_INT 3
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
16992: LD_ADDR_VAR 0 3
16996: PUSH
16997: LD_INT 12
16999: PUSH
17000: LD_INT 11
17002: PUSH
17003: LD_INT 14
17005: PUSH
17006: LD_INT 13
17008: PUSH
17009: LD_INT 5
17011: PUSH
17012: LD_INT 24
17014: PUSH
17015: LD_INT 21
17017: PUSH
17018: LD_INT 33
17020: PUSH
17021: LD_INT 36
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
17035: LD_ADDR_LOC 56
17039: PUSH
17040: LD_INT 31
17042: PUSH
17043: EMPTY
17044: LIST
17045: ST_TO_ADDR
// Banned_Chassis := [ ] ;
17046: LD_ADDR_LOC 57
17050: PUSH
17051: EMPTY
17052: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
17053: LD_ADDR_LOC 58
17057: PUSH
17058: LD_INT 2
17060: PUSH
17061: EMPTY
17062: LIST
17063: ST_TO_ADDR
// Banned_Engines := [ ] ;
17064: LD_ADDR_LOC 59
17068: PUSH
17069: EMPTY
17070: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
17071: LD_ADDR_LOC 54
17075: PUSH
17076: LD_INT 4
17078: PUSH
17079: EMPTY
17080: LIST
17081: PUSH
17082: LD_INT 31
17084: PUSH
17085: LD_INT 32
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: PUSH
17092: EMPTY
17093: LIST
17094: LIST
17095: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
17096: LD_ADDR_LOC 55
17100: PUSH
17101: LD_INT 1
17103: PUSH
17104: LD_INT 1
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: ST_TO_ADDR
// end ; 6 :
17111: GO 17939
17113: LD_INT 6
17115: DOUBLE
17116: EQUAL
17117: IFTRUE 17121
17119: GO 17324
17121: POP
// begin def_base_level := 1 ;
17122: LD_ADDR_EXP 58
17126: PUSH
17127: LD_INT 1
17129: ST_TO_ADDR
// def_amount_of_people := 2 ;
17130: LD_ADDR_EXP 59
17134: PUSH
17135: LD_INT 2
17137: ST_TO_ADDR
// def_skill_level := 3 ;
17138: LD_ADDR_EXP 60
17142: PUSH
17143: LD_INT 3
17145: ST_TO_ADDR
// def_starting_resources := 3 ;
17146: LD_ADDR_EXP 61
17150: PUSH
17151: LD_INT 3
17153: ST_TO_ADDR
// def_shipments_density := 1 ;
17154: LD_ADDR_EXP 62
17158: PUSH
17159: LD_INT 1
17161: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
17162: LD_ADDR_EXP 63
17166: PUSH
17167: LD_INT 0
17169: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
17170: LD_ADDR_EXP 64
17174: PUSH
17175: LD_INT 1
17177: ST_TO_ADDR
// def_shared_vision := 1 ;
17178: LD_ADDR_EXP 65
17182: PUSH
17183: LD_INT 1
17185: ST_TO_ADDR
// def_morale_flags := 0 ;
17186: LD_ADDR_EXP 66
17190: PUSH
17191: LD_INT 0
17193: ST_TO_ADDR
// def_siberite_detection := 1 ;
17194: LD_ADDR_EXP 67
17198: PUSH
17199: LD_INT 1
17201: ST_TO_ADDR
// def_people_respawning := 2 ;
17202: LD_ADDR_EXP 68
17206: PUSH
17207: LD_INT 2
17209: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
17210: LD_ADDR_EXP 69
17214: PUSH
17215: LD_INT 1
17217: ST_TO_ADDR
// def_siberite_bomb := 0 ;
17218: LD_ADDR_EXP 70
17222: PUSH
17223: LD_INT 0
17225: ST_TO_ADDR
// def_builduptime := 1 ;
17226: LD_ADDR_EXP 71
17230: PUSH
17231: LD_INT 1
17233: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
17234: LD_ADDR_VAR 0 2
17238: PUSH
17239: LD_INT 23
17241: PUSH
17242: EMPTY
17243: LIST
17244: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
17245: LD_ADDR_VAR 0 3
17249: PUSH
17250: LD_INT 2
17252: PUSH
17253: LD_INT 37
17255: PUSH
17256: LD_INT 31
17258: PUSH
17259: LD_INT 32
17261: PUSH
17262: LD_INT 33
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: ST_TO_ADDR
// Banned_Weapons := [ ] ;
17272: LD_ADDR_LOC 56
17276: PUSH
17277: EMPTY
17278: ST_TO_ADDR
// Banned_Chassis := [ ] ;
17279: LD_ADDR_LOC 57
17283: PUSH
17284: EMPTY
17285: ST_TO_ADDR
// Banned_Controls := [ ] ;
17286: LD_ADDR_LOC 58
17290: PUSH
17291: EMPTY
17292: ST_TO_ADDR
// Banned_Engines := [ ] ;
17293: LD_ADDR_LOC 59
17297: PUSH
17298: EMPTY
17299: ST_TO_ADDR
// Restricted_Builds := [ ] ;
17300: LD_ADDR_LOC 54
17304: PUSH
17305: EMPTY
17306: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
17307: LD_ADDR_LOC 55
17311: PUSH
17312: EMPTY
17313: ST_TO_ADDR
// No_Mechs := true ;
17314: LD_ADDR_EXP 72
17318: PUSH
17319: LD_INT 1
17321: ST_TO_ADDR
// end ; 7 :
17322: GO 17939
17324: LD_INT 7
17326: DOUBLE
17327: EQUAL
17328: IFTRUE 17332
17330: GO 17530
17332: POP
// begin def_base_level := 1 ;
17333: LD_ADDR_EXP 58
17337: PUSH
17338: LD_INT 1
17340: ST_TO_ADDR
// def_amount_of_people := 2 ;
17341: LD_ADDR_EXP 59
17345: PUSH
17346: LD_INT 2
17348: ST_TO_ADDR
// def_skill_level := 3 ;
17349: LD_ADDR_EXP 60
17353: PUSH
17354: LD_INT 3
17356: ST_TO_ADDR
// def_starting_resources := 3 ;
17357: LD_ADDR_EXP 61
17361: PUSH
17362: LD_INT 3
17364: ST_TO_ADDR
// def_shipments_density := 1 ;
17365: LD_ADDR_EXP 62
17369: PUSH
17370: LD_INT 1
17372: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
17373: LD_ADDR_EXP 63
17377: PUSH
17378: LD_INT 1
17380: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
17381: LD_ADDR_EXP 64
17385: PUSH
17386: LD_INT 2
17388: ST_TO_ADDR
// def_shared_vision := 1 ;
17389: LD_ADDR_EXP 65
17393: PUSH
17394: LD_INT 1
17396: ST_TO_ADDR
// def_morale_flags := 0 ;
17397: LD_ADDR_EXP 66
17401: PUSH
17402: LD_INT 0
17404: ST_TO_ADDR
// def_siberite_detection := 1 ;
17405: LD_ADDR_EXP 67
17409: PUSH
17410: LD_INT 1
17412: ST_TO_ADDR
// def_people_respawning := 0 ;
17413: LD_ADDR_EXP 68
17417: PUSH
17418: LD_INT 0
17420: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
17421: LD_ADDR_EXP 69
17425: PUSH
17426: LD_INT 1
17428: ST_TO_ADDR
// def_siberite_bomb := 0 ;
17429: LD_ADDR_EXP 70
17433: PUSH
17434: LD_INT 0
17436: ST_TO_ADDR
// def_builduptime := 3 ;
17437: LD_ADDR_EXP 71
17441: PUSH
17442: LD_INT 3
17444: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
17445: LD_ADDR_VAR 0 2
17449: PUSH
17450: LD_INT 23
17452: PUSH
17453: EMPTY
17454: LIST
17455: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
17456: LD_ADDR_VAR 0 3
17460: PUSH
17461: LD_INT 37
17463: PUSH
17464: EMPTY
17465: LIST
17466: ST_TO_ADDR
// Banned_Weapons := [ ] ;
17467: LD_ADDR_LOC 56
17471: PUSH
17472: EMPTY
17473: ST_TO_ADDR
// Banned_Chassis := [ ] ;
17474: LD_ADDR_LOC 57
17478: PUSH
17479: EMPTY
17480: ST_TO_ADDR
// Banned_Controls := [ ] ;
17481: LD_ADDR_LOC 58
17485: PUSH
17486: EMPTY
17487: ST_TO_ADDR
// Banned_Engines := [ ] ;
17488: LD_ADDR_LOC 59
17492: PUSH
17493: EMPTY
17494: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
17495: LD_ADDR_LOC 54
17499: PUSH
17500: LD_INT 31
17502: PUSH
17503: LD_INT 32
17505: PUSH
17506: LD_INT 33
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: LIST
17513: PUSH
17514: EMPTY
17515: LIST
17516: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
17517: LD_ADDR_LOC 55
17521: PUSH
17522: LD_INT 10
17524: PUSH
17525: EMPTY
17526: LIST
17527: ST_TO_ADDR
// end ; 8 :
17528: GO 17939
17530: LD_INT 8
17532: DOUBLE
17533: EQUAL
17534: IFTRUE 17538
17536: GO 17938
17538: POP
// begin def_base_level := 0 ;
17539: LD_ADDR_EXP 58
17543: PUSH
17544: LD_INT 0
17546: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
17547: LD_ADDR_EXP 59
17551: PUSH
17552: LD_INT 0
17554: PPUSH
17555: LD_INT 1
17557: PPUSH
17558: CALL_OW 12
17562: ST_TO_ADDR
// def_skill_level := 0 ;
17563: LD_ADDR_EXP 60
17567: PUSH
17568: LD_INT 0
17570: ST_TO_ADDR
// def_starting_resources := 2 ;
17571: LD_ADDR_EXP 61
17575: PUSH
17576: LD_INT 2
17578: ST_TO_ADDR
// def_shipments_density := 1 ;
17579: LD_ADDR_EXP 62
17583: PUSH
17584: LD_INT 1
17586: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
17587: LD_ADDR_EXP 63
17591: PUSH
17592: LD_INT 0
17594: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
17595: LD_ADDR_EXP 64
17599: PUSH
17600: LD_INT 0
17602: ST_TO_ADDR
// def_shared_vision := 1 ;
17603: LD_ADDR_EXP 65
17607: PUSH
17608: LD_INT 1
17610: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
17611: LD_ADDR_EXP 66
17615: PUSH
17616: LD_INT 0
17618: PPUSH
17619: LD_INT 2
17621: PPUSH
17622: CALL_OW 12
17626: ST_TO_ADDR
// def_siberite_detection := 0 ;
17627: LD_ADDR_EXP 67
17631: PUSH
17632: LD_INT 0
17634: ST_TO_ADDR
// def_people_respawning := 0 ;
17635: LD_ADDR_EXP 68
17639: PUSH
17640: LD_INT 0
17642: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
17643: LD_ADDR_EXP 69
17647: PUSH
17648: LD_INT 2
17650: ST_TO_ADDR
// def_siberite_bomb := 0 ;
17651: LD_ADDR_EXP 70
17655: PUSH
17656: LD_INT 0
17658: ST_TO_ADDR
// def_builduptime := 0 ;
17659: LD_ADDR_EXP 71
17663: PUSH
17664: LD_INT 0
17666: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
17667: LD_ADDR_VAR 0 2
17671: PUSH
17672: LD_INT 23
17674: PUSH
17675: LD_INT 20
17677: PUSH
17678: LD_INT 40
17680: PUSH
17681: LD_INT 47
17683: PUSH
17684: LD_INT 46
17686: PUSH
17687: LD_INT 39
17689: PUSH
17690: LD_INT 71
17692: PUSH
17693: LD_INT 34
17695: PUSH
17696: LD_INT 41
17698: PUSH
17699: LD_INT 44
17701: PUSH
17702: LD_INT 17
17704: PUSH
17705: LD_INT 16
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
17722: LD_ADDR_VAR 0 3
17726: PUSH
17727: LD_INT 37
17729: PUSH
17730: LD_INT 5
17732: PUSH
17733: LD_INT 13
17735: PUSH
17736: LD_INT 34
17738: PUSH
17739: LD_INT 12
17741: PUSH
17742: LD_INT 15
17744: PUSH
17745: LD_INT 11
17747: PUSH
17748: LD_INT 14
17750: PUSH
17751: LD_INT 29
17753: PUSH
17754: LD_INT 30
17756: PUSH
17757: LD_INT 28
17759: PUSH
17760: LD_INT 24
17762: PUSH
17763: LD_INT 25
17765: PUSH
17766: LD_INT 20
17768: PUSH
17769: LD_INT 21
17771: PUSH
17772: LD_INT 22
17774: PUSH
17775: LD_INT 36
17777: PUSH
17778: EMPTY
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: ST_TO_ADDR
// Banned_Weapons := [ ] ;
17797: LD_ADDR_LOC 56
17801: PUSH
17802: EMPTY
17803: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
17804: LD_ADDR_LOC 57
17808: PUSH
17809: LD_INT 14
17811: PUSH
17812: EMPTY
17813: LIST
17814: ST_TO_ADDR
// Banned_Controls := [ ] ;
17815: LD_ADDR_LOC 58
17819: PUSH
17820: EMPTY
17821: ST_TO_ADDR
// Banned_Engines := [ ] ;
17822: LD_ADDR_LOC 59
17826: PUSH
17827: EMPTY
17828: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
17829: LD_ADDR_LOC 54
17833: PUSH
17834: LD_INT 31
17836: PUSH
17837: LD_INT 32
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PUSH
17844: LD_INT 4
17846: PUSH
17847: EMPTY
17848: LIST
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
17854: LD_ADDR_LOC 55
17858: PUSH
17859: LD_INT 2
17861: PUSH
17862: LD_INT 1
17864: PUSH
17865: EMPTY
17866: LIST
17867: LIST
17868: ST_TO_ADDR
// for i := 1 to 8 do
17869: LD_ADDR_VAR 0 4
17873: PUSH
17874: DOUBLE
17875: LD_INT 1
17877: DEC
17878: ST_TO_ADDR
17879: LD_INT 8
17881: PUSH
17882: FOR_TO
17883: IFFALSE 17934
// if ( Side_Nations [ i ] = 3 ) then
17885: LD_EXP 19
17889: PUSH
17890: LD_VAR 0 4
17894: ARRAY
17895: PUSH
17896: LD_INT 3
17898: EQUAL
17899: IFFALSE 17932
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
17901: LD_ADDR_EXP 19
17905: PUSH
17906: LD_EXP 19
17910: PPUSH
17911: LD_VAR 0 4
17915: PPUSH
17916: LD_INT 1
17918: PPUSH
17919: LD_INT 2
17921: PPUSH
17922: CALL_OW 12
17926: PPUSH
17927: CALL_OW 1
17931: ST_TO_ADDR
17932: GO 17882
17934: POP
17935: POP
// end ; end ;
17936: GO 17939
17938: POP
// for i := 1 to 8 do
17939: LD_ADDR_VAR 0 4
17943: PUSH
17944: DOUBLE
17945: LD_INT 1
17947: DEC
17948: ST_TO_ADDR
17949: LD_INT 8
17951: PUSH
17952: FOR_TO
17953: IFFALSE 18037
// if Side_Positions [ i ] then
17955: LD_EXP 18
17959: PUSH
17960: LD_VAR 0 4
17964: ARRAY
17965: IFFALSE 18035
// begin for j in Unavailable_Techs do
17967: LD_ADDR_VAR 0 5
17971: PUSH
17972: LD_VAR 0 2
17976: PUSH
17977: FOR_IN
17978: IFFALSE 17999
// SetTech ( j , i , 0 ) ;
17980: LD_VAR 0 5
17984: PPUSH
17985: LD_VAR 0 4
17989: PPUSH
17990: LD_INT 0
17992: PPUSH
17993: CALL_OW 322
17997: GO 17977
17999: POP
18000: POP
// for j in Unavailable_Builds do
18001: LD_ADDR_VAR 0 5
18005: PUSH
18006: LD_VAR 0 3
18010: PUSH
18011: FOR_IN
18012: IFFALSE 18033
// SetRestrict ( j , i , 0 ) ;
18014: LD_VAR 0 5
18018: PPUSH
18019: LD_VAR 0 4
18023: PPUSH
18024: LD_INT 0
18026: PPUSH
18027: CALL_OW 324
18031: GO 18011
18033: POP
18034: POP
// end ;
18035: GO 17952
18037: POP
18038: POP
// end ;
18039: LD_VAR 0 1
18043: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
18044: LD_INT 0
18046: PPUSH
18047: PPUSH
18048: PPUSH
18049: PPUSH
18050: PPUSH
18051: PPUSH
18052: PPUSH
// for i := 1 to Restricted_Builds do
18053: LD_ADDR_VAR 0 2
18057: PUSH
18058: DOUBLE
18059: LD_INT 1
18061: DEC
18062: ST_TO_ADDR
18063: LD_LOC 54
18067: PUSH
18068: FOR_TO
18069: IFFALSE 18379
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
18071: LD_LOC 54
18075: PUSH
18076: LD_VAR 0 2
18080: ARRAY
18081: PUSH
18082: LD_INT 1
18084: ARRAY
18085: PUSH
18086: LD_INT 31
18088: DOUBLE
18089: EQUAL
18090: IFTRUE 18106
18092: LD_INT 32
18094: DOUBLE
18095: EQUAL
18096: IFTRUE 18106
18098: LD_INT 33
18100: DOUBLE
18101: EQUAL
18102: IFTRUE 18106
18104: GO 18117
18106: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
18107: LD_ADDR_VAR 0 6
18111: PUSH
18112: LD_STRING #Turrets
18114: ST_TO_ADDR
18115: GO 18162
18117: LD_INT 4
18119: DOUBLE
18120: EQUAL
18121: IFTRUE 18131
18123: LD_INT 5
18125: DOUBLE
18126: EQUAL
18127: IFTRUE 18131
18129: GO 18142
18131: POP
// btype := #Armouries ; b_Behemoth :
18132: LD_ADDR_VAR 0 6
18136: PUSH
18137: LD_STRING #Armouries
18139: ST_TO_ADDR
18140: GO 18162
18142: LD_INT 37
18144: DOUBLE
18145: EQUAL
18146: IFTRUE 18150
18148: GO 18161
18150: POP
// btype := #Behemoths ; end ;
18151: LD_ADDR_VAR 0 6
18155: PUSH
18156: LD_STRING #Behemoths
18158: ST_TO_ADDR
18159: GO 18162
18161: POP
// list := [ ] ;
18162: LD_ADDR_VAR 0 7
18166: PUSH
18167: EMPTY
18168: ST_TO_ADDR
// for j := 1 to 8 do
18169: LD_ADDR_VAR 0 3
18173: PUSH
18174: DOUBLE
18175: LD_INT 1
18177: DEC
18178: ST_TO_ADDR
18179: LD_INT 8
18181: PUSH
18182: FOR_TO
18183: IFFALSE 18276
// if Side_Positions [ j ] then
18185: LD_EXP 18
18189: PUSH
18190: LD_VAR 0 3
18194: ARRAY
18195: IFFALSE 18274
// begin amount := 0 ;
18197: LD_ADDR_VAR 0 5
18201: PUSH
18202: LD_INT 0
18204: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
18205: LD_ADDR_VAR 0 4
18209: PUSH
18210: LD_LOC 54
18214: PUSH
18215: LD_VAR 0 2
18219: ARRAY
18220: PUSH
18221: FOR_IN
18222: IFFALSE 18270
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
18224: LD_ADDR_VAR 0 5
18228: PUSH
18229: LD_VAR 0 5
18233: PUSH
18234: LD_INT 22
18236: PUSH
18237: LD_VAR 0 3
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PUSH
18246: LD_INT 30
18248: PUSH
18249: LD_VAR 0 4
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: PPUSH
18262: CALL_OW 69
18266: PLUS
18267: ST_TO_ADDR
18268: GO 18221
18270: POP
18271: POP
// break ;
18272: GO 18276
// end ;
18274: GO 18182
18276: POP
18277: POP
// list := [ ] ;
18278: LD_ADDR_VAR 0 7
18282: PUSH
18283: EMPTY
18284: ST_TO_ADDR
// for j := 1 to 8 do
18285: LD_ADDR_VAR 0 3
18289: PUSH
18290: DOUBLE
18291: LD_INT 1
18293: DEC
18294: ST_TO_ADDR
18295: LD_INT 8
18297: PUSH
18298: FOR_TO
18299: IFFALSE 18319
// list := list ^ amount ;
18301: LD_ADDR_VAR 0 7
18305: PUSH
18306: LD_VAR 0 7
18310: PUSH
18311: LD_VAR 0 5
18315: ADD
18316: ST_TO_ADDR
18317: GO 18298
18319: POP
18320: POP
// Already_Built := Already_Built ^ [ list ] ;
18321: LD_ADDR_LOC 60
18325: PUSH
18326: LD_LOC 60
18330: PUSH
18331: LD_VAR 0 7
18335: PUSH
18336: EMPTY
18337: LIST
18338: ADD
18339: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
18340: LD_ADDR_LOC 61
18344: PUSH
18345: LD_LOC 61
18349: PUSH
18350: LD_VAR 0 6
18354: PUSH
18355: LD_VAR 0 5
18359: PUSH
18360: LD_LOC 55
18364: PUSH
18365: LD_VAR 0 2
18369: ARRAY
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: LIST
18375: ADD
18376: ST_TO_ADDR
// end ;
18377: GO 18068
18379: POP
18380: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
18381: LD_ADDR_LOC 62
18385: PUSH
18386: LD_INT 0
18388: PUSH
18389: LD_INT 0
18391: PUSH
18392: LD_INT 0
18394: PUSH
18395: LD_INT 0
18397: PUSH
18398: LD_INT 0
18400: PUSH
18401: LD_INT 0
18403: PUSH
18404: LD_INT 0
18406: PUSH
18407: LD_INT 0
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: ST_TO_ADDR
// if Limits_Info then
18420: LD_LOC 61
18424: IFFALSE 18440
// Limits_Info := #Limits ^ Limits_Info ;
18426: LD_ADDR_LOC 61
18430: PUSH
18431: LD_STRING #Limits
18433: PUSH
18434: LD_LOC 61
18438: ADD
18439: ST_TO_ADDR
// end ;
18440: LD_VAR 0 1
18444: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
18445: LD_INT 0
18447: PPUSH
18448: PPUSH
18449: PPUSH
18450: PPUSH
// for i := 1 to Restricted_Builds do
18451: LD_ADDR_VAR 0 7
18455: PUSH
18456: DOUBLE
18457: LD_INT 1
18459: DEC
18460: ST_TO_ADDR
18461: LD_LOC 54
18465: PUSH
18466: FOR_TO
18467: IFFALSE 18890
// if BType in Restricted_Builds [ i ] then
18469: LD_VAR 0 2
18473: PUSH
18474: LD_LOC 54
18478: PUSH
18479: LD_VAR 0 7
18483: ARRAY
18484: IN
18485: IFFALSE 18888
// begin if old_side then
18487: LD_VAR 0 4
18491: IFFALSE 18617
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
18493: LD_LOC 60
18497: PUSH
18498: LD_VAR 0 7
18502: ARRAY
18503: PUSH
18504: LD_VAR 0 3
18508: ARRAY
18509: PUSH
18510: LD_VAR 0 5
18514: PLUS
18515: PUSH
18516: LD_LOC 55
18520: PUSH
18521: LD_VAR 0 7
18525: ARRAY
18526: GREATER
18527: IFFALSE 18553
// begin SetSide ( un , old_side ) ;
18529: LD_VAR 0 1
18533: PPUSH
18534: LD_VAR 0 4
18538: PPUSH
18539: CALL_OW 235
// count := 0 ;
18543: LD_ADDR_VAR 0 5
18547: PUSH
18548: LD_INT 0
18550: ST_TO_ADDR
// end else
18551: GO 18617
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
18553: LD_ADDR_LOC 60
18557: PUSH
18558: LD_LOC 60
18562: PPUSH
18563: LD_VAR 0 7
18567: PPUSH
18568: LD_LOC 60
18572: PUSH
18573: LD_VAR 0 7
18577: ARRAY
18578: PPUSH
18579: LD_VAR 0 4
18583: PPUSH
18584: LD_LOC 60
18588: PUSH
18589: LD_VAR 0 7
18593: ARRAY
18594: PUSH
18595: LD_VAR 0 4
18599: ARRAY
18600: PUSH
18601: LD_VAR 0 5
18605: MINUS
18606: PPUSH
18607: CALL_OW 1
18611: PPUSH
18612: CALL_OW 1
18616: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
18617: LD_ADDR_LOC 60
18621: PUSH
18622: LD_LOC 60
18626: PPUSH
18627: LD_VAR 0 7
18631: PPUSH
18632: LD_LOC 60
18636: PUSH
18637: LD_VAR 0 7
18641: ARRAY
18642: PPUSH
18643: LD_VAR 0 3
18647: PPUSH
18648: LD_LOC 60
18652: PUSH
18653: LD_VAR 0 7
18657: ARRAY
18658: PUSH
18659: LD_VAR 0 3
18663: ARRAY
18664: PUSH
18665: LD_VAR 0 5
18669: PLUS
18670: PPUSH
18671: CALL_OW 1
18675: PPUSH
18676: CALL_OW 1
18680: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
18681: LD_VAR 0 5
18685: PUSH
18686: LD_INT 0
18688: NONEQUAL
18689: PUSH
18690: LD_VAR 0 3
18694: PUSH
18695: LD_OWVAR 2
18699: EQUAL
18700: AND
18701: IFFALSE 18744
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
18703: LD_ADDR_LOC 61
18707: PUSH
18708: LD_LOC 61
18712: PPUSH
18713: LD_INT 3
18715: PUSH
18716: LD_VAR 0 7
18720: MUL
18721: PPUSH
18722: LD_LOC 60
18726: PUSH
18727: LD_VAR 0 7
18731: ARRAY
18732: PUSH
18733: LD_VAR 0 3
18737: ARRAY
18738: PPUSH
18739: CALL_OW 1
18743: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
18744: LD_LOC 60
18748: PUSH
18749: LD_VAR 0 7
18753: ARRAY
18754: PUSH
18755: LD_VAR 0 3
18759: ARRAY
18760: PUSH
18761: LD_LOC 55
18765: PUSH
18766: LD_VAR 0 7
18770: ARRAY
18771: GREATER
18772: IFFALSE 18799
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
18774: LD_ADDR_LOC 62
18778: PUSH
18779: LD_LOC 62
18783: PPUSH
18784: LD_VAR 0 3
18788: PPUSH
18789: LD_INT 1
18791: PPUSH
18792: CALL_OW 1
18796: ST_TO_ADDR
// end else
18797: GO 18886
// begin for j := 1 to Restricted_Builds do
18799: LD_ADDR_VAR 0 8
18803: PUSH
18804: DOUBLE
18805: LD_INT 1
18807: DEC
18808: ST_TO_ADDR
18809: LD_LOC 54
18813: PUSH
18814: FOR_TO
18815: IFFALSE 18859
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
18817: LD_LOC 60
18821: PUSH
18822: LD_VAR 0 8
18826: ARRAY
18827: PUSH
18828: LD_VAR 0 3
18832: ARRAY
18833: PUSH
18834: LD_LOC 55
18838: PUSH
18839: LD_VAR 0 8
18843: ARRAY
18844: GREATER
18845: IFFALSE 18857
// begin Is_Cheater := true ;
18847: LD_ADDR_VAR 0 9
18851: PUSH
18852: LD_INT 1
18854: ST_TO_ADDR
// break ;
18855: GO 18859
// end ;
18857: GO 18814
18859: POP
18860: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
18861: LD_ADDR_LOC 62
18865: PUSH
18866: LD_LOC 62
18870: PPUSH
18871: LD_VAR 0 3
18875: PPUSH
18876: LD_VAR 0 9
18880: PPUSH
18881: CALL_OW 1
18885: ST_TO_ADDR
// end ; break ;
18886: GO 18890
// end ;
18888: GO 18466
18890: POP
18891: POP
// end ;
18892: LD_VAR 0 6
18896: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
18897: LD_VAR 0 5
18901: PUSH
18902: LD_LOC 56
18906: IN
18907: PUSH
18908: LD_VAR 0 2
18912: PUSH
18913: LD_LOC 57
18917: IN
18918: OR
18919: PUSH
18920: LD_VAR 0 4
18924: PUSH
18925: LD_LOC 58
18929: IN
18930: OR
18931: PUSH
18932: LD_VAR 0 3
18936: PUSH
18937: LD_LOC 59
18941: IN
18942: OR
18943: IFFALSE 18954
// ComCancel ( factory ) ;
18945: LD_VAR 0 1
18949: PPUSH
18950: CALL_OW 127
// end ;
18954: PPOPN 5
18956: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
18957: LD_VAR 0 2
18961: PUSH
18962: LD_LOC 56
18966: IN
18967: IFFALSE 18978
// ComCancel ( building ) ;
18969: LD_VAR 0 1
18973: PPUSH
18974: CALL_OW 127
// end ; end_of_file
18978: PPOPN 2
18980: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
18981: LD_INT 0
18983: PPUSH
18984: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
18985: LD_ADDR_VAR 0 2
18989: PUSH
18990: LD_STRING #Multi1x1-Time
18992: PUSH
18993: LD_OWVAR 1
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
19002: LD_INT 0
19004: PUSH
19005: LD_EXP 15
19009: PUSH
19010: LD_OWVAR 1
19014: MINUS
19015: LESSEQUAL
19016: IFFALSE 19047
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
19018: LD_ADDR_VAR 0 2
19022: PUSH
19023: LD_VAR 0 2
19027: PUSH
19028: LD_STRING #allowedsibbomb
19030: PUSH
19031: LD_EXP 15
19035: PUSH
19036: LD_OWVAR 1
19040: MINUS
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: ADD
19046: ST_TO_ADDR
// if ( ExtraStrings ) then
19047: LD_EXP 73
19051: IFFALSE 19073
// AllStrings := AllStrings ^  ^ ExtraStrings ;
19053: LD_ADDR_VAR 0 2
19057: PUSH
19058: LD_VAR 0 2
19062: PUSH
19063: LD_STRING 
19065: ADD
19066: PUSH
19067: LD_EXP 73
19071: ADD
19072: ST_TO_ADDR
// if ( LimitsStrings ) then
19073: CALL 15821 0 0
19077: IFFALSE 19099
// AllStrings := AllStrings ^  ^ LimitsStrings ;
19079: LD_ADDR_VAR 0 2
19083: PUSH
19084: LD_VAR 0 2
19088: PUSH
19089: LD_STRING 
19091: ADD
19092: PUSH
19093: CALL 15821 0 0
19097: ADD
19098: ST_TO_ADDR
// Display_Strings := AllStrings ;
19099: LD_ADDR_OWVAR 47
19103: PUSH
19104: LD_VAR 0 2
19108: ST_TO_ADDR
// end ;
19109: LD_VAR 0 1
19113: RET
// every 0 0$1 do
19114: GO 19116
19116: DISABLE
// begin ShowTimer ;
19117: CALL 18981 0 0
// enable ;
19121: ENABLE
// end ; end_of_file
19122: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
19123: LD_INT 0
19125: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
19126: LD_VAR 0 1
19130: PPUSH
19131: CALL_OW 255
19135: PUSH
19136: LD_VAR 0 4
19140: EQUAL
19141: IFFALSE 19160
// begin SetAchievement ( ACH_RAD ) ;
19143: LD_STRING ACH_RAD
19145: PPUSH
19146: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
19150: LD_STRING ACH_NL
19152: PPUSH
19153: LD_INT 1
19155: PPUSH
19156: CALL_OW 564
// end end ;
19160: LD_VAR 0 5
19164: RET
// export function SA_Win ( side ) ; begin
19165: LD_INT 0
19167: PPUSH
// case side of 1 :
19168: LD_VAR 0 1
19172: PUSH
19173: LD_INT 1
19175: DOUBLE
19176: EQUAL
19177: IFTRUE 19181
19179: GO 19194
19181: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
19182: LD_STRING ACH_AH
19184: PPUSH
19185: LD_INT 1
19187: PPUSH
19188: CALL_OW 564
19192: GO 19357
19194: LD_INT 2
19196: DOUBLE
19197: EQUAL
19198: IFTRUE 19202
19200: GO 19215
19202: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
19203: LD_STRING ACH_E
19205: PPUSH
19206: LD_INT 1
19208: PPUSH
19209: CALL_OW 564
19213: GO 19357
19215: LD_INT 3
19217: DOUBLE
19218: EQUAL
19219: IFTRUE 19223
19221: GO 19236
19223: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
19224: LD_STRING ACH_OOL
19226: PPUSH
19227: LD_INT 1
19229: PPUSH
19230: CALL_OW 564
19234: GO 19357
19236: LD_INT 1
19238: PUSH
19239: LD_INT 2
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: DOUBLE
19246: EQUAL
19247: IFTRUE 19251
19249: GO 19276
19251: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
19252: LD_STRING ACH_AH
19254: PPUSH
19255: LD_REAL  5.00000000000000E-0001
19258: PPUSH
19259: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
19263: LD_STRING ACH_E
19265: PPUSH
19266: LD_REAL  5.00000000000000E-0001
19269: PPUSH
19270: CALL_OW 564
// end ; [ 2 , 3 ] :
19274: GO 19357
19276: LD_INT 2
19278: PUSH
19279: LD_INT 3
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: DOUBLE
19286: EQUAL
19287: IFTRUE 19291
19289: GO 19316
19291: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
19292: LD_STRING ACH_OOL
19294: PPUSH
19295: LD_REAL  5.00000000000000E-0001
19298: PPUSH
19299: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
19303: LD_STRING ACH_E
19305: PPUSH
19306: LD_REAL  5.00000000000000E-0001
19309: PPUSH
19310: CALL_OW 564
// end ; [ 3 , 1 ] :
19314: GO 19357
19316: LD_INT 3
19318: PUSH
19319: LD_INT 1
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: DOUBLE
19326: EQUAL
19327: IFTRUE 19331
19329: GO 19356
19331: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
19332: LD_STRING ACH_AH
19334: PPUSH
19335: LD_REAL  5.00000000000000E-0001
19338: PPUSH
19339: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
19343: LD_STRING ACH_OOL
19345: PPUSH
19346: LD_REAL  5.00000000000000E-0001
19349: PPUSH
19350: CALL_OW 564
// end ; end ;
19354: GO 19357
19356: POP
// end ; end_of_file
19357: LD_VAR 0 2
19361: RET
// export function SetMpTechs ( ) ; var side , i ; begin
19362: LD_INT 0
19364: PPUSH
19365: PPUSH
19366: PPUSH
// for side = 1 to 8 do
19367: LD_ADDR_VAR 0 2
19371: PUSH
19372: DOUBLE
19373: LD_INT 1
19375: DEC
19376: ST_TO_ADDR
19377: LD_INT 8
19379: PUSH
19380: FOR_TO
19381: IFFALSE 19502
// begin for i = 1 to 72 do
19383: LD_ADDR_VAR 0 3
19387: PUSH
19388: DOUBLE
19389: LD_INT 1
19391: DEC
19392: ST_TO_ADDR
19393: LD_INT 72
19395: PUSH
19396: FOR_TO
19397: IFFALSE 19428
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
19399: LD_VAR 0 3
19403: PPUSH
19404: LD_VAR 0 2
19408: PPUSH
19409: LD_INT 0
19411: PPUSH
19412: LD_VAR 0 3
19416: PPUSH
19417: CALL_OW 565
19421: PPUSH
19422: CALL_OW 322
19426: GO 19396
19428: POP
19429: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
19430: LD_INT 73
19432: PPUSH
19433: LD_VAR 0 2
19437: PPUSH
19438: LD_INT 0
19440: PPUSH
19441: LD_INT 25
19443: PPUSH
19444: CALL_OW 565
19448: PPUSH
19449: CALL_OW 322
// for i = 0 to 40 do
19453: LD_ADDR_VAR 0 3
19457: PUSH
19458: DOUBLE
19459: LD_INT 0
19461: DEC
19462: ST_TO_ADDR
19463: LD_INT 40
19465: PUSH
19466: FOR_TO
19467: IFFALSE 19498
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
19469: LD_VAR 0 3
19473: PPUSH
19474: LD_VAR 0 2
19478: PPUSH
19479: LD_INT 1
19481: PPUSH
19482: LD_VAR 0 3
19486: PPUSH
19487: CALL_OW 565
19491: PPUSH
19492: CALL_OW 324
19496: GO 19466
19498: POP
19499: POP
// end ;
19500: GO 19380
19502: POP
19503: POP
// end ;
19504: LD_VAR 0 1
19508: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
19509: LD_INT 0
19511: PPUSH
19512: PPUSH
19513: PPUSH
// for side = 1 to 8 do
19514: LD_ADDR_VAR 0 3
19518: PUSH
19519: DOUBLE
19520: LD_INT 1
19522: DEC
19523: ST_TO_ADDR
19524: LD_INT 8
19526: PUSH
19527: FOR_TO
19528: IFFALSE 23524
// begin for i = 1 to 73 do
19530: LD_ADDR_VAR 0 4
19534: PUSH
19535: DOUBLE
19536: LD_INT 1
19538: DEC
19539: ST_TO_ADDR
19540: LD_INT 73
19542: PUSH
19543: FOR_TO
19544: IFFALSE 19565
// SetTech ( i , side , state_disabled ) ;
19546: LD_VAR 0 4
19550: PPUSH
19551: LD_VAR 0 3
19555: PPUSH
19556: LD_INT 0
19558: PPUSH
19559: CALL_OW 322
19563: GO 19543
19565: POP
19566: POP
// for i = 0 to 40 do
19567: LD_ADDR_VAR 0 4
19571: PUSH
19572: DOUBLE
19573: LD_INT 0
19575: DEC
19576: ST_TO_ADDR
19577: LD_INT 40
19579: PUSH
19580: FOR_TO
19581: IFFALSE 19602
// SetRestrict ( i , side , false ) ;
19583: LD_VAR 0 4
19587: PPUSH
19588: LD_VAR 0 3
19592: PPUSH
19593: LD_INT 0
19595: PPUSH
19596: CALL_OW 324
19600: GO 19580
19602: POP
19603: POP
// case level of 1 :
19604: LD_VAR 0 1
19608: PUSH
19609: LD_INT 1
19611: DOUBLE
19612: EQUAL
19613: IFTRUE 19617
19615: GO 19770
19617: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19618: LD_INT 35
19620: PPUSH
19621: LD_VAR 0 3
19625: PPUSH
19626: LD_INT 1
19628: PPUSH
19629: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19633: LD_INT 45
19635: PPUSH
19636: LD_VAR 0 3
19640: PPUSH
19641: LD_INT 1
19643: PPUSH
19644: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19648: LD_INT 46
19650: PPUSH
19651: LD_VAR 0 3
19655: PPUSH
19656: LD_INT 1
19658: PPUSH
19659: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19663: LD_INT 47
19665: PPUSH
19666: LD_VAR 0 3
19670: PPUSH
19671: LD_INT 1
19673: PPUSH
19674: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
19678: LD_INT 0
19680: PPUSH
19681: LD_VAR 0 3
19685: PPUSH
19686: LD_INT 1
19688: PPUSH
19689: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
19693: LD_INT 2
19695: PPUSH
19696: LD_VAR 0 3
19700: PPUSH
19701: LD_INT 1
19703: PPUSH
19704: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
19708: LD_INT 4
19710: PPUSH
19711: LD_VAR 0 3
19715: PPUSH
19716: LD_INT 1
19718: PPUSH
19719: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
19723: LD_INT 6
19725: PPUSH
19726: LD_VAR 0 3
19730: PPUSH
19731: LD_INT 1
19733: PPUSH
19734: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
19738: LD_INT 29
19740: PPUSH
19741: LD_VAR 0 3
19745: PPUSH
19746: LD_INT 1
19748: PPUSH
19749: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
19753: LD_INT 31
19755: PPUSH
19756: LD_VAR 0 3
19760: PPUSH
19761: LD_INT 1
19763: PPUSH
19764: CALL_OW 324
// end ; 2 :
19768: GO 23522
19770: LD_INT 2
19772: DOUBLE
19773: EQUAL
19774: IFTRUE 19778
19776: GO 19976
19778: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19779: LD_INT 35
19781: PPUSH
19782: LD_VAR 0 3
19786: PPUSH
19787: LD_INT 1
19789: PPUSH
19790: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19794: LD_INT 45
19796: PPUSH
19797: LD_VAR 0 3
19801: PPUSH
19802: LD_INT 1
19804: PPUSH
19805: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19809: LD_INT 46
19811: PPUSH
19812: LD_VAR 0 3
19816: PPUSH
19817: LD_INT 1
19819: PPUSH
19820: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19824: LD_INT 47
19826: PPUSH
19827: LD_VAR 0 3
19831: PPUSH
19832: LD_INT 1
19834: PPUSH
19835: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
19839: LD_INT 1
19841: PPUSH
19842: LD_VAR 0 3
19846: PPUSH
19847: LD_INT 1
19849: PPUSH
19850: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
19854: LD_INT 2
19856: PPUSH
19857: LD_VAR 0 3
19861: PPUSH
19862: LD_INT 1
19864: PPUSH
19865: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
19869: LD_INT 11
19871: PPUSH
19872: LD_VAR 0 3
19876: PPUSH
19877: LD_INT 1
19879: PPUSH
19880: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
19884: LD_INT 0
19886: PPUSH
19887: LD_VAR 0 3
19891: PPUSH
19892: LD_INT 1
19894: PPUSH
19895: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
19899: LD_INT 2
19901: PPUSH
19902: LD_VAR 0 3
19906: PPUSH
19907: LD_INT 1
19909: PPUSH
19910: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
19914: LD_INT 4
19916: PPUSH
19917: LD_VAR 0 3
19921: PPUSH
19922: LD_INT 1
19924: PPUSH
19925: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
19929: LD_INT 6
19931: PPUSH
19932: LD_VAR 0 3
19936: PPUSH
19937: LD_INT 1
19939: PPUSH
19940: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
19944: LD_INT 29
19946: PPUSH
19947: LD_VAR 0 3
19951: PPUSH
19952: LD_INT 1
19954: PPUSH
19955: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
19959: LD_INT 31
19961: PPUSH
19962: LD_VAR 0 3
19966: PPUSH
19967: LD_INT 1
19969: PPUSH
19970: CALL_OW 324
// end ; 3 :
19974: GO 23522
19976: LD_INT 3
19978: DOUBLE
19979: EQUAL
19980: IFTRUE 19984
19982: GO 20437
19984: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19985: LD_INT 35
19987: PPUSH
19988: LD_VAR 0 3
19992: PPUSH
19993: LD_INT 1
19995: PPUSH
19996: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
20000: LD_INT 45
20002: PPUSH
20003: LD_VAR 0 3
20007: PPUSH
20008: LD_INT 1
20010: PPUSH
20011: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
20015: LD_INT 46
20017: PPUSH
20018: LD_VAR 0 3
20022: PPUSH
20023: LD_INT 1
20025: PPUSH
20026: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
20030: LD_INT 47
20032: PPUSH
20033: LD_VAR 0 3
20037: PPUSH
20038: LD_INT 1
20040: PPUSH
20041: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
20045: LD_INT 1
20047: PPUSH
20048: LD_VAR 0 3
20052: PPUSH
20053: LD_INT 1
20055: PPUSH
20056: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
20060: LD_INT 2
20062: PPUSH
20063: LD_VAR 0 3
20067: PPUSH
20068: LD_INT 1
20070: PPUSH
20071: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
20075: LD_INT 11
20077: PPUSH
20078: LD_VAR 0 3
20082: PPUSH
20083: LD_INT 1
20085: PPUSH
20086: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
20090: LD_INT 48
20092: PPUSH
20093: LD_VAR 0 3
20097: PPUSH
20098: LD_INT 1
20100: PPUSH
20101: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
20105: LD_INT 69
20107: PPUSH
20108: LD_VAR 0 3
20112: PPUSH
20113: LD_INT 1
20115: PPUSH
20116: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
20120: LD_INT 39
20122: PPUSH
20123: LD_VAR 0 3
20127: PPUSH
20128: LD_INT 1
20130: PPUSH
20131: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
20135: LD_INT 43
20137: PPUSH
20138: LD_VAR 0 3
20142: PPUSH
20143: LD_INT 1
20145: PPUSH
20146: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
20150: LD_INT 51
20152: PPUSH
20153: LD_VAR 0 3
20157: PPUSH
20158: LD_INT 1
20160: PPUSH
20161: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
20165: LD_INT 6
20167: PPUSH
20168: LD_VAR 0 3
20172: PPUSH
20173: LD_INT 1
20175: PPUSH
20176: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
20180: LD_INT 0
20182: PPUSH
20183: LD_VAR 0 3
20187: PPUSH
20188: LD_INT 1
20190: PPUSH
20191: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
20195: LD_INT 2
20197: PPUSH
20198: LD_VAR 0 3
20202: PPUSH
20203: LD_INT 1
20205: PPUSH
20206: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
20210: LD_INT 3
20212: PPUSH
20213: LD_VAR 0 3
20217: PPUSH
20218: LD_INT 1
20220: PPUSH
20221: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
20225: LD_INT 4
20227: PPUSH
20228: LD_VAR 0 3
20232: PPUSH
20233: LD_INT 1
20235: PPUSH
20236: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
20240: LD_INT 6
20242: PPUSH
20243: LD_VAR 0 3
20247: PPUSH
20248: LD_INT 1
20250: PPUSH
20251: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
20255: LD_INT 7
20257: PPUSH
20258: LD_VAR 0 3
20262: PPUSH
20263: LD_INT 1
20265: PPUSH
20266: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
20270: LD_INT 8
20272: PPUSH
20273: LD_VAR 0 3
20277: PPUSH
20278: LD_INT 1
20280: PPUSH
20281: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
20285: LD_INT 10
20287: PPUSH
20288: LD_VAR 0 3
20292: PPUSH
20293: LD_INT 1
20295: PPUSH
20296: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
20300: LD_INT 15
20302: PPUSH
20303: LD_VAR 0 3
20307: PPUSH
20308: LD_INT 1
20310: PPUSH
20311: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
20315: LD_INT 16
20317: PPUSH
20318: LD_VAR 0 3
20322: PPUSH
20323: LD_INT 1
20325: PPUSH
20326: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
20330: LD_INT 17
20332: PPUSH
20333: LD_VAR 0 3
20337: PPUSH
20338: LD_INT 1
20340: PPUSH
20341: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
20345: LD_INT 20
20347: PPUSH
20348: LD_VAR 0 3
20352: PPUSH
20353: LD_INT 1
20355: PPUSH
20356: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
20360: LD_INT 26
20362: PPUSH
20363: LD_VAR 0 3
20367: PPUSH
20368: LD_INT 1
20370: PPUSH
20371: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
20375: LD_INT 27
20377: PPUSH
20378: LD_VAR 0 3
20382: PPUSH
20383: LD_INT 1
20385: PPUSH
20386: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
20390: LD_INT 29
20392: PPUSH
20393: LD_VAR 0 3
20397: PPUSH
20398: LD_INT 1
20400: PPUSH
20401: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
20405: LD_INT 31
20407: PPUSH
20408: LD_VAR 0 3
20412: PPUSH
20413: LD_INT 1
20415: PPUSH
20416: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
20420: LD_INT 32
20422: PPUSH
20423: LD_VAR 0 3
20427: PPUSH
20428: LD_INT 1
20430: PPUSH
20431: CALL_OW 324
// end ; 4 :
20435: GO 23522
20437: LD_INT 4
20439: DOUBLE
20440: EQUAL
20441: IFTRUE 20445
20443: GO 21393
20445: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
20446: LD_INT 35
20448: PPUSH
20449: LD_VAR 0 3
20453: PPUSH
20454: LD_INT 1
20456: PPUSH
20457: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
20461: LD_INT 45
20463: PPUSH
20464: LD_VAR 0 3
20468: PPUSH
20469: LD_INT 1
20471: PPUSH
20472: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
20476: LD_INT 46
20478: PPUSH
20479: LD_VAR 0 3
20483: PPUSH
20484: LD_INT 1
20486: PPUSH
20487: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
20491: LD_INT 47
20493: PPUSH
20494: LD_VAR 0 3
20498: PPUSH
20499: LD_INT 1
20501: PPUSH
20502: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
20506: LD_INT 1
20508: PPUSH
20509: LD_VAR 0 3
20513: PPUSH
20514: LD_INT 1
20516: PPUSH
20517: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
20521: LD_INT 2
20523: PPUSH
20524: LD_VAR 0 3
20528: PPUSH
20529: LD_INT 1
20531: PPUSH
20532: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
20536: LD_INT 11
20538: PPUSH
20539: LD_VAR 0 3
20543: PPUSH
20544: LD_INT 1
20546: PPUSH
20547: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
20551: LD_INT 20
20553: PPUSH
20554: LD_VAR 0 3
20558: PPUSH
20559: LD_INT 1
20561: PPUSH
20562: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
20566: LD_INT 48
20568: PPUSH
20569: LD_VAR 0 3
20573: PPUSH
20574: LD_INT 1
20576: PPUSH
20577: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
20581: LD_INT 49
20583: PPUSH
20584: LD_VAR 0 3
20588: PPUSH
20589: LD_INT 1
20591: PPUSH
20592: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
20596: LD_INT 69
20598: PPUSH
20599: LD_VAR 0 3
20603: PPUSH
20604: LD_INT 1
20606: PPUSH
20607: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
20611: LD_INT 39
20613: PPUSH
20614: LD_VAR 0 3
20618: PPUSH
20619: LD_INT 1
20621: PPUSH
20622: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
20626: LD_INT 34
20628: PPUSH
20629: LD_VAR 0 3
20633: PPUSH
20634: LD_INT 1
20636: PPUSH
20637: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
20641: LD_INT 42
20643: PPUSH
20644: LD_VAR 0 3
20648: PPUSH
20649: LD_INT 1
20651: PPUSH
20652: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
20656: LD_INT 44
20658: PPUSH
20659: LD_VAR 0 3
20663: PPUSH
20664: LD_INT 1
20666: PPUSH
20667: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
20671: LD_INT 41
20673: PPUSH
20674: LD_VAR 0 3
20678: PPUSH
20679: LD_INT 1
20681: PPUSH
20682: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
20686: LD_INT 43
20688: PPUSH
20689: LD_VAR 0 3
20693: PPUSH
20694: LD_INT 1
20696: PPUSH
20697: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
20701: LD_INT 70
20703: PPUSH
20704: LD_VAR 0 3
20708: PPUSH
20709: LD_INT 1
20711: PPUSH
20712: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
20716: LD_INT 51
20718: PPUSH
20719: LD_VAR 0 3
20723: PPUSH
20724: LD_INT 1
20726: PPUSH
20727: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
20731: LD_INT 52
20733: PPUSH
20734: LD_VAR 0 3
20738: PPUSH
20739: LD_INT 1
20741: PPUSH
20742: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
20746: LD_INT 6
20748: PPUSH
20749: LD_VAR 0 3
20753: PPUSH
20754: LD_INT 1
20756: PPUSH
20757: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
20761: LD_INT 15
20763: PPUSH
20764: LD_VAR 0 3
20768: PPUSH
20769: LD_INT 1
20771: PPUSH
20772: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
20776: LD_INT 7
20778: PPUSH
20779: LD_VAR 0 3
20783: PPUSH
20784: LD_INT 1
20786: PPUSH
20787: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
20791: LD_INT 12
20793: PPUSH
20794: LD_VAR 0 3
20798: PPUSH
20799: LD_INT 1
20801: PPUSH
20802: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
20806: LD_INT 18
20808: PPUSH
20809: LD_VAR 0 3
20813: PPUSH
20814: LD_INT 1
20816: PPUSH
20817: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
20821: LD_INT 60
20823: PPUSH
20824: LD_VAR 0 3
20828: PPUSH
20829: LD_INT 1
20831: PPUSH
20832: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
20836: LD_INT 9
20838: PPUSH
20839: LD_VAR 0 3
20843: PPUSH
20844: LD_INT 1
20846: PPUSH
20847: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
20851: LD_INT 30
20853: PPUSH
20854: LD_VAR 0 3
20858: PPUSH
20859: LD_INT 1
20861: PPUSH
20862: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
20866: LD_INT 37
20868: PPUSH
20869: LD_VAR 0 3
20873: PPUSH
20874: LD_INT 1
20876: PPUSH
20877: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
20881: LD_INT 5
20883: PPUSH
20884: LD_VAR 0 3
20888: PPUSH
20889: LD_INT 1
20891: PPUSH
20892: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
20896: LD_INT 66
20898: PPUSH
20899: LD_VAR 0 3
20903: PPUSH
20904: LD_INT 1
20906: PPUSH
20907: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
20911: LD_INT 21
20913: PPUSH
20914: LD_VAR 0 3
20918: PPUSH
20919: LD_INT 1
20921: PPUSH
20922: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
20926: LD_INT 22
20928: PPUSH
20929: LD_VAR 0 3
20933: PPUSH
20934: LD_INT 1
20936: PPUSH
20937: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
20941: LD_INT 54
20943: PPUSH
20944: LD_VAR 0 3
20948: PPUSH
20949: LD_INT 1
20951: PPUSH
20952: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
20956: LD_INT 0
20958: PPUSH
20959: LD_VAR 0 3
20963: PPUSH
20964: LD_INT 1
20966: PPUSH
20967: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
20971: LD_INT 1
20973: PPUSH
20974: LD_VAR 0 3
20978: PPUSH
20979: LD_INT 1
20981: PPUSH
20982: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
20986: LD_INT 2
20988: PPUSH
20989: LD_VAR 0 3
20993: PPUSH
20994: LD_INT 1
20996: PPUSH
20997: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
21001: LD_INT 3
21003: PPUSH
21004: LD_VAR 0 3
21008: PPUSH
21009: LD_INT 1
21011: PPUSH
21012: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
21016: LD_INT 4
21018: PPUSH
21019: LD_VAR 0 3
21023: PPUSH
21024: LD_INT 1
21026: PPUSH
21027: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
21031: LD_INT 5
21033: PPUSH
21034: LD_VAR 0 3
21038: PPUSH
21039: LD_INT 1
21041: PPUSH
21042: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
21046: LD_INT 6
21048: PPUSH
21049: LD_VAR 0 3
21053: PPUSH
21054: LD_INT 1
21056: PPUSH
21057: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
21061: LD_INT 7
21063: PPUSH
21064: LD_VAR 0 3
21068: PPUSH
21069: LD_INT 1
21071: PPUSH
21072: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
21076: LD_INT 8
21078: PPUSH
21079: LD_VAR 0 3
21083: PPUSH
21084: LD_INT 1
21086: PPUSH
21087: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
21091: LD_INT 10
21093: PPUSH
21094: LD_VAR 0 3
21098: PPUSH
21099: LD_INT 1
21101: PPUSH
21102: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
21106: LD_INT 11
21108: PPUSH
21109: LD_VAR 0 3
21113: PPUSH
21114: LD_INT 1
21116: PPUSH
21117: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
21121: LD_INT 12
21123: PPUSH
21124: LD_VAR 0 3
21128: PPUSH
21129: LD_INT 1
21131: PPUSH
21132: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
21136: LD_INT 13
21138: PPUSH
21139: LD_VAR 0 3
21143: PPUSH
21144: LD_INT 1
21146: PPUSH
21147: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
21151: LD_INT 14
21153: PPUSH
21154: LD_VAR 0 3
21158: PPUSH
21159: LD_INT 1
21161: PPUSH
21162: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
21166: LD_INT 15
21168: PPUSH
21169: LD_VAR 0 3
21173: PPUSH
21174: LD_INT 1
21176: PPUSH
21177: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
21181: LD_INT 16
21183: PPUSH
21184: LD_VAR 0 3
21188: PPUSH
21189: LD_INT 1
21191: PPUSH
21192: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
21196: LD_INT 17
21198: PPUSH
21199: LD_VAR 0 3
21203: PPUSH
21204: LD_INT 1
21206: PPUSH
21207: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
21211: LD_INT 19
21213: PPUSH
21214: LD_VAR 0 3
21218: PPUSH
21219: LD_INT 1
21221: PPUSH
21222: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
21226: LD_INT 20
21228: PPUSH
21229: LD_VAR 0 3
21233: PPUSH
21234: LD_INT 1
21236: PPUSH
21237: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
21241: LD_INT 21
21243: PPUSH
21244: LD_VAR 0 3
21248: PPUSH
21249: LD_INT 1
21251: PPUSH
21252: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
21256: LD_INT 23
21258: PPUSH
21259: LD_VAR 0 3
21263: PPUSH
21264: LD_INT 1
21266: PPUSH
21267: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
21271: LD_INT 26
21273: PPUSH
21274: LD_VAR 0 3
21278: PPUSH
21279: LD_INT 1
21281: PPUSH
21282: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
21286: LD_INT 27
21288: PPUSH
21289: LD_VAR 0 3
21293: PPUSH
21294: LD_INT 1
21296: PPUSH
21297: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
21301: LD_INT 28
21303: PPUSH
21304: LD_VAR 0 3
21308: PPUSH
21309: LD_INT 1
21311: PPUSH
21312: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
21316: LD_INT 29
21318: PPUSH
21319: LD_VAR 0 3
21323: PPUSH
21324: LD_INT 1
21326: PPUSH
21327: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
21331: LD_INT 30
21333: PPUSH
21334: LD_VAR 0 3
21338: PPUSH
21339: LD_INT 1
21341: PPUSH
21342: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
21346: LD_INT 31
21348: PPUSH
21349: LD_VAR 0 3
21353: PPUSH
21354: LD_INT 1
21356: PPUSH
21357: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
21361: LD_INT 32
21363: PPUSH
21364: LD_VAR 0 3
21368: PPUSH
21369: LD_INT 1
21371: PPUSH
21372: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
21376: LD_INT 36
21378: PPUSH
21379: LD_VAR 0 3
21383: PPUSH
21384: LD_INT 1
21386: PPUSH
21387: CALL_OW 324
// end ; 5 :
21391: GO 23522
21393: LD_INT 5
21395: DOUBLE
21396: EQUAL
21397: IFTRUE 21401
21399: GO 22514
21401: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
21402: LD_INT 35
21404: PPUSH
21405: LD_VAR 0 3
21409: PPUSH
21410: LD_INT 1
21412: PPUSH
21413: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
21417: LD_INT 45
21419: PPUSH
21420: LD_VAR 0 3
21424: PPUSH
21425: LD_INT 1
21427: PPUSH
21428: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
21432: LD_INT 46
21434: PPUSH
21435: LD_VAR 0 3
21439: PPUSH
21440: LD_INT 1
21442: PPUSH
21443: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
21447: LD_INT 47
21449: PPUSH
21450: LD_VAR 0 3
21454: PPUSH
21455: LD_INT 1
21457: PPUSH
21458: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
21462: LD_INT 1
21464: PPUSH
21465: LD_VAR 0 3
21469: PPUSH
21470: LD_INT 1
21472: PPUSH
21473: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
21477: LD_INT 2
21479: PPUSH
21480: LD_VAR 0 3
21484: PPUSH
21485: LD_INT 1
21487: PPUSH
21488: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
21492: LD_INT 11
21494: PPUSH
21495: LD_VAR 0 3
21499: PPUSH
21500: LD_INT 1
21502: PPUSH
21503: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
21507: LD_INT 20
21509: PPUSH
21510: LD_VAR 0 3
21514: PPUSH
21515: LD_INT 1
21517: PPUSH
21518: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
21522: LD_INT 48
21524: PPUSH
21525: LD_VAR 0 3
21529: PPUSH
21530: LD_INT 1
21532: PPUSH
21533: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
21537: LD_INT 49
21539: PPUSH
21540: LD_VAR 0 3
21544: PPUSH
21545: LD_INT 1
21547: PPUSH
21548: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
21552: LD_INT 69
21554: PPUSH
21555: LD_VAR 0 3
21559: PPUSH
21560: LD_INT 1
21562: PPUSH
21563: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
21567: LD_INT 39
21569: PPUSH
21570: LD_VAR 0 3
21574: PPUSH
21575: LD_INT 1
21577: PPUSH
21578: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
21582: LD_INT 34
21584: PPUSH
21585: LD_VAR 0 3
21589: PPUSH
21590: LD_INT 1
21592: PPUSH
21593: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
21597: LD_INT 42
21599: PPUSH
21600: LD_VAR 0 3
21604: PPUSH
21605: LD_INT 1
21607: PPUSH
21608: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
21612: LD_INT 44
21614: PPUSH
21615: LD_VAR 0 3
21619: PPUSH
21620: LD_INT 1
21622: PPUSH
21623: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
21627: LD_INT 41
21629: PPUSH
21630: LD_VAR 0 3
21634: PPUSH
21635: LD_INT 1
21637: PPUSH
21638: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
21642: LD_INT 40
21644: PPUSH
21645: LD_VAR 0 3
21649: PPUSH
21650: LD_INT 1
21652: PPUSH
21653: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
21657: LD_INT 43
21659: PPUSH
21660: LD_VAR 0 3
21664: PPUSH
21665: LD_INT 1
21667: PPUSH
21668: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
21672: LD_INT 70
21674: PPUSH
21675: LD_VAR 0 3
21679: PPUSH
21680: LD_INT 1
21682: PPUSH
21683: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
21687: LD_INT 51
21689: PPUSH
21690: LD_VAR 0 3
21694: PPUSH
21695: LD_INT 1
21697: PPUSH
21698: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
21702: LD_INT 52
21704: PPUSH
21705: LD_VAR 0 3
21709: PPUSH
21710: LD_INT 1
21712: PPUSH
21713: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
21717: LD_INT 6
21719: PPUSH
21720: LD_VAR 0 3
21724: PPUSH
21725: LD_INT 1
21727: PPUSH
21728: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
21732: LD_INT 15
21734: PPUSH
21735: LD_VAR 0 3
21739: PPUSH
21740: LD_INT 1
21742: PPUSH
21743: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
21747: LD_INT 7
21749: PPUSH
21750: LD_VAR 0 3
21754: PPUSH
21755: LD_INT 1
21757: PPUSH
21758: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
21762: LD_INT 12
21764: PPUSH
21765: LD_VAR 0 3
21769: PPUSH
21770: LD_INT 1
21772: PPUSH
21773: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
21777: LD_INT 17
21779: PPUSH
21780: LD_VAR 0 3
21784: PPUSH
21785: LD_INT 1
21787: PPUSH
21788: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
21792: LD_INT 18
21794: PPUSH
21795: LD_VAR 0 3
21799: PPUSH
21800: LD_INT 1
21802: PPUSH
21803: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
21807: LD_INT 60
21809: PPUSH
21810: LD_VAR 0 3
21814: PPUSH
21815: LD_INT 1
21817: PPUSH
21818: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
21822: LD_INT 32
21824: PPUSH
21825: LD_VAR 0 3
21829: PPUSH
21830: LD_INT 1
21832: PPUSH
21833: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
21837: LD_INT 9
21839: PPUSH
21840: LD_VAR 0 3
21844: PPUSH
21845: LD_INT 1
21847: PPUSH
21848: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
21852: LD_INT 57
21854: PPUSH
21855: LD_VAR 0 3
21859: PPUSH
21860: LD_INT 1
21862: PPUSH
21863: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
21867: LD_INT 30
21869: PPUSH
21870: LD_VAR 0 3
21874: PPUSH
21875: LD_INT 1
21877: PPUSH
21878: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
21882: LD_INT 37
21884: PPUSH
21885: LD_VAR 0 3
21889: PPUSH
21890: LD_INT 1
21892: PPUSH
21893: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
21897: LD_INT 63
21899: PPUSH
21900: LD_VAR 0 3
21904: PPUSH
21905: LD_INT 1
21907: PPUSH
21908: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
21912: LD_INT 3
21914: PPUSH
21915: LD_VAR 0 3
21919: PPUSH
21920: LD_INT 1
21922: PPUSH
21923: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
21927: LD_INT 4
21929: PPUSH
21930: LD_VAR 0 3
21934: PPUSH
21935: LD_INT 1
21937: PPUSH
21938: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
21942: LD_INT 5
21944: PPUSH
21945: LD_VAR 0 3
21949: PPUSH
21950: LD_INT 1
21952: PPUSH
21953: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
21957: LD_INT 66
21959: PPUSH
21960: LD_VAR 0 3
21964: PPUSH
21965: LD_INT 1
21967: PPUSH
21968: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
21972: LD_INT 21
21974: PPUSH
21975: LD_VAR 0 3
21979: PPUSH
21980: LD_INT 1
21982: PPUSH
21983: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
21987: LD_INT 22
21989: PPUSH
21990: LD_VAR 0 3
21994: PPUSH
21995: LD_INT 1
21997: PPUSH
21998: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
22002: LD_INT 19
22004: PPUSH
22005: LD_VAR 0 3
22009: PPUSH
22010: LD_INT 1
22012: PPUSH
22013: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
22017: LD_INT 54
22019: PPUSH
22020: LD_VAR 0 3
22024: PPUSH
22025: LD_INT 1
22027: PPUSH
22028: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
22032: LD_INT 55
22034: PPUSH
22035: LD_VAR 0 3
22039: PPUSH
22040: LD_INT 1
22042: PPUSH
22043: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22047: LD_INT 0
22049: PPUSH
22050: LD_VAR 0 3
22054: PPUSH
22055: LD_INT 1
22057: PPUSH
22058: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
22062: LD_INT 1
22064: PPUSH
22065: LD_VAR 0 3
22069: PPUSH
22070: LD_INT 1
22072: PPUSH
22073: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22077: LD_INT 2
22079: PPUSH
22080: LD_VAR 0 3
22084: PPUSH
22085: LD_INT 1
22087: PPUSH
22088: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
22092: LD_INT 3
22094: PPUSH
22095: LD_VAR 0 3
22099: PPUSH
22100: LD_INT 1
22102: PPUSH
22103: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22107: LD_INT 4
22109: PPUSH
22110: LD_VAR 0 3
22114: PPUSH
22115: LD_INT 1
22117: PPUSH
22118: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
22122: LD_INT 5
22124: PPUSH
22125: LD_VAR 0 3
22129: PPUSH
22130: LD_INT 1
22132: PPUSH
22133: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22137: LD_INT 6
22139: PPUSH
22140: LD_VAR 0 3
22144: PPUSH
22145: LD_INT 1
22147: PPUSH
22148: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
22152: LD_INT 7
22154: PPUSH
22155: LD_VAR 0 3
22159: PPUSH
22160: LD_INT 1
22162: PPUSH
22163: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
22167: LD_INT 8
22169: PPUSH
22170: LD_VAR 0 3
22174: PPUSH
22175: LD_INT 1
22177: PPUSH
22178: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
22182: LD_INT 10
22184: PPUSH
22185: LD_VAR 0 3
22189: PPUSH
22190: LD_INT 1
22192: PPUSH
22193: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
22197: LD_INT 11
22199: PPUSH
22200: LD_VAR 0 3
22204: PPUSH
22205: LD_INT 1
22207: PPUSH
22208: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
22212: LD_INT 12
22214: PPUSH
22215: LD_VAR 0 3
22219: PPUSH
22220: LD_INT 1
22222: PPUSH
22223: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
22227: LD_INT 13
22229: PPUSH
22230: LD_VAR 0 3
22234: PPUSH
22235: LD_INT 1
22237: PPUSH
22238: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
22242: LD_INT 14
22244: PPUSH
22245: LD_VAR 0 3
22249: PPUSH
22250: LD_INT 1
22252: PPUSH
22253: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
22257: LD_INT 15
22259: PPUSH
22260: LD_VAR 0 3
22264: PPUSH
22265: LD_INT 1
22267: PPUSH
22268: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
22272: LD_INT 16
22274: PPUSH
22275: LD_VAR 0 3
22279: PPUSH
22280: LD_INT 1
22282: PPUSH
22283: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
22287: LD_INT 17
22289: PPUSH
22290: LD_VAR 0 3
22294: PPUSH
22295: LD_INT 1
22297: PPUSH
22298: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
22302: LD_INT 18
22304: PPUSH
22305: LD_VAR 0 3
22309: PPUSH
22310: LD_INT 1
22312: PPUSH
22313: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
22317: LD_INT 19
22319: PPUSH
22320: LD_VAR 0 3
22324: PPUSH
22325: LD_INT 1
22327: PPUSH
22328: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
22332: LD_INT 20
22334: PPUSH
22335: LD_VAR 0 3
22339: PPUSH
22340: LD_INT 1
22342: PPUSH
22343: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
22347: LD_INT 21
22349: PPUSH
22350: LD_VAR 0 3
22354: PPUSH
22355: LD_INT 1
22357: PPUSH
22358: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
22362: LD_INT 23
22364: PPUSH
22365: LD_VAR 0 3
22369: PPUSH
22370: LD_INT 1
22372: PPUSH
22373: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
22377: LD_INT 26
22379: PPUSH
22380: LD_VAR 0 3
22384: PPUSH
22385: LD_INT 1
22387: PPUSH
22388: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
22392: LD_INT 27
22394: PPUSH
22395: LD_VAR 0 3
22399: PPUSH
22400: LD_INT 1
22402: PPUSH
22403: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
22407: LD_INT 28
22409: PPUSH
22410: LD_VAR 0 3
22414: PPUSH
22415: LD_INT 1
22417: PPUSH
22418: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22422: LD_INT 29
22424: PPUSH
22425: LD_VAR 0 3
22429: PPUSH
22430: LD_INT 1
22432: PPUSH
22433: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
22437: LD_INT 30
22439: PPUSH
22440: LD_VAR 0 3
22444: PPUSH
22445: LD_INT 1
22447: PPUSH
22448: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22452: LD_INT 31
22454: PPUSH
22455: LD_VAR 0 3
22459: PPUSH
22460: LD_INT 1
22462: PPUSH
22463: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
22467: LD_INT 32
22469: PPUSH
22470: LD_VAR 0 3
22474: PPUSH
22475: LD_INT 1
22477: PPUSH
22478: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
22482: LD_INT 33
22484: PPUSH
22485: LD_VAR 0 3
22489: PPUSH
22490: LD_INT 1
22492: PPUSH
22493: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
22497: LD_INT 36
22499: PPUSH
22500: LD_VAR 0 3
22504: PPUSH
22505: LD_INT 1
22507: PPUSH
22508: CALL_OW 324
// end ; 6 :
22512: GO 23522
22514: LD_INT 6
22516: DOUBLE
22517: EQUAL
22518: IFTRUE 22522
22520: GO 23447
22522: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22523: LD_INT 35
22525: PPUSH
22526: LD_VAR 0 3
22530: PPUSH
22531: LD_INT 1
22533: PPUSH
22534: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22538: LD_INT 45
22540: PPUSH
22541: LD_VAR 0 3
22545: PPUSH
22546: LD_INT 1
22548: PPUSH
22549: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22553: LD_INT 46
22555: PPUSH
22556: LD_VAR 0 3
22560: PPUSH
22561: LD_INT 1
22563: PPUSH
22564: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22568: LD_INT 47
22570: PPUSH
22571: LD_VAR 0 3
22575: PPUSH
22576: LD_INT 1
22578: PPUSH
22579: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22583: LD_INT 1
22585: PPUSH
22586: LD_VAR 0 3
22590: PPUSH
22591: LD_INT 1
22593: PPUSH
22594: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22598: LD_INT 2
22600: PPUSH
22601: LD_VAR 0 3
22605: PPUSH
22606: LD_INT 1
22608: PPUSH
22609: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22613: LD_INT 11
22615: PPUSH
22616: LD_VAR 0 3
22620: PPUSH
22621: LD_INT 1
22623: PPUSH
22624: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
22628: LD_INT 20
22630: PPUSH
22631: LD_VAR 0 3
22635: PPUSH
22636: LD_INT 1
22638: PPUSH
22639: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
22643: LD_INT 48
22645: PPUSH
22646: LD_VAR 0 3
22650: PPUSH
22651: LD_INT 1
22653: PPUSH
22654: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
22658: LD_INT 49
22660: PPUSH
22661: LD_VAR 0 3
22665: PPUSH
22666: LD_INT 1
22668: PPUSH
22669: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
22673: LD_INT 50
22675: PPUSH
22676: LD_VAR 0 3
22680: PPUSH
22681: LD_INT 1
22683: PPUSH
22684: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
22688: LD_INT 69
22690: PPUSH
22691: LD_VAR 0 3
22695: PPUSH
22696: LD_INT 1
22698: PPUSH
22699: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
22703: LD_INT 39
22705: PPUSH
22706: LD_VAR 0 3
22710: PPUSH
22711: LD_INT 1
22713: PPUSH
22714: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
22718: LD_INT 34
22720: PPUSH
22721: LD_VAR 0 3
22725: PPUSH
22726: LD_INT 1
22728: PPUSH
22729: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
22733: LD_INT 42
22735: PPUSH
22736: LD_VAR 0 3
22740: PPUSH
22741: LD_INT 1
22743: PPUSH
22744: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
22748: LD_INT 44
22750: PPUSH
22751: LD_VAR 0 3
22755: PPUSH
22756: LD_INT 1
22758: PPUSH
22759: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
22763: LD_INT 41
22765: PPUSH
22766: LD_VAR 0 3
22770: PPUSH
22771: LD_INT 1
22773: PPUSH
22774: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
22778: LD_INT 13
22780: PPUSH
22781: LD_VAR 0 3
22785: PPUSH
22786: LD_INT 1
22788: PPUSH
22789: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
22793: LD_INT 40
22795: PPUSH
22796: LD_VAR 0 3
22800: PPUSH
22801: LD_INT 1
22803: PPUSH
22804: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
22808: LD_INT 43
22810: PPUSH
22811: LD_VAR 0 3
22815: PPUSH
22816: LD_INT 1
22818: PPUSH
22819: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
22823: LD_INT 70
22825: PPUSH
22826: LD_VAR 0 3
22830: PPUSH
22831: LD_INT 1
22833: PPUSH
22834: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
22838: LD_INT 23
22840: PPUSH
22841: LD_VAR 0 3
22845: PPUSH
22846: LD_INT 1
22848: PPUSH
22849: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
22853: LD_INT 51
22855: PPUSH
22856: LD_VAR 0 3
22860: PPUSH
22861: LD_INT 1
22863: PPUSH
22864: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
22868: LD_INT 52
22870: PPUSH
22871: LD_VAR 0 3
22875: PPUSH
22876: LD_INT 1
22878: PPUSH
22879: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
22883: LD_INT 6
22885: PPUSH
22886: LD_VAR 0 3
22890: PPUSH
22891: LD_INT 1
22893: PPUSH
22894: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
22898: LD_INT 15
22900: PPUSH
22901: LD_VAR 0 3
22905: PPUSH
22906: LD_INT 1
22908: PPUSH
22909: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
22913: LD_INT 7
22915: PPUSH
22916: LD_VAR 0 3
22920: PPUSH
22921: LD_INT 1
22923: PPUSH
22924: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
22928: LD_INT 12
22930: PPUSH
22931: LD_VAR 0 3
22935: PPUSH
22936: LD_INT 1
22938: PPUSH
22939: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
22943: LD_INT 10
22945: PPUSH
22946: LD_VAR 0 3
22950: PPUSH
22951: LD_INT 1
22953: PPUSH
22954: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
22958: LD_INT 17
22960: PPUSH
22961: LD_VAR 0 3
22965: PPUSH
22966: LD_INT 1
22968: PPUSH
22969: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
22973: LD_INT 18
22975: PPUSH
22976: LD_VAR 0 3
22980: PPUSH
22981: LD_INT 1
22983: PPUSH
22984: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
22988: LD_INT 60
22990: PPUSH
22991: LD_VAR 0 3
22995: PPUSH
22996: LD_INT 1
22998: PPUSH
22999: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
23003: LD_INT 61
23005: PPUSH
23006: LD_VAR 0 3
23010: PPUSH
23011: LD_INT 1
23013: PPUSH
23014: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
23018: LD_INT 32
23020: PPUSH
23021: LD_VAR 0 3
23025: PPUSH
23026: LD_INT 1
23028: PPUSH
23029: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
23033: LD_INT 27
23035: PPUSH
23036: LD_VAR 0 3
23040: PPUSH
23041: LD_INT 1
23043: PPUSH
23044: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
23048: LD_INT 36
23050: PPUSH
23051: LD_VAR 0 3
23055: PPUSH
23056: LD_INT 1
23058: PPUSH
23059: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
23063: LD_INT 33
23065: PPUSH
23066: LD_VAR 0 3
23070: PPUSH
23071: LD_INT 1
23073: PPUSH
23074: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
23078: LD_INT 9
23080: PPUSH
23081: LD_VAR 0 3
23085: PPUSH
23086: LD_INT 1
23088: PPUSH
23089: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
23093: LD_INT 38
23095: PPUSH
23096: LD_VAR 0 3
23100: PPUSH
23101: LD_INT 1
23103: PPUSH
23104: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
23108: LD_INT 57
23110: PPUSH
23111: LD_VAR 0 3
23115: PPUSH
23116: LD_INT 1
23118: PPUSH
23119: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
23123: LD_INT 58
23125: PPUSH
23126: LD_VAR 0 3
23130: PPUSH
23131: LD_INT 1
23133: PPUSH
23134: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
23138: LD_INT 28
23140: PPUSH
23141: LD_VAR 0 3
23145: PPUSH
23146: LD_INT 1
23148: PPUSH
23149: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
23153: LD_INT 29
23155: PPUSH
23156: LD_VAR 0 3
23160: PPUSH
23161: LD_INT 1
23163: PPUSH
23164: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
23168: LD_INT 30
23170: PPUSH
23171: LD_VAR 0 3
23175: PPUSH
23176: LD_INT 1
23178: PPUSH
23179: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
23183: LD_INT 37
23185: PPUSH
23186: LD_VAR 0 3
23190: PPUSH
23191: LD_INT 1
23193: PPUSH
23194: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
23198: LD_INT 63
23200: PPUSH
23201: LD_VAR 0 3
23205: PPUSH
23206: LD_INT 1
23208: PPUSH
23209: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
23213: LD_INT 64
23215: PPUSH
23216: LD_VAR 0 3
23220: PPUSH
23221: LD_INT 1
23223: PPUSH
23224: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
23228: LD_INT 3
23230: PPUSH
23231: LD_VAR 0 3
23235: PPUSH
23236: LD_INT 1
23238: PPUSH
23239: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
23243: LD_INT 4
23245: PPUSH
23246: LD_VAR 0 3
23250: PPUSH
23251: LD_INT 1
23253: PPUSH
23254: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
23258: LD_INT 5
23260: PPUSH
23261: LD_VAR 0 3
23265: PPUSH
23266: LD_INT 1
23268: PPUSH
23269: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
23273: LD_INT 8
23275: PPUSH
23276: LD_VAR 0 3
23280: PPUSH
23281: LD_INT 1
23283: PPUSH
23284: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
23288: LD_INT 66
23290: PPUSH
23291: LD_VAR 0 3
23295: PPUSH
23296: LD_INT 1
23298: PPUSH
23299: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
23303: LD_INT 67
23305: PPUSH
23306: LD_VAR 0 3
23310: PPUSH
23311: LD_INT 1
23313: PPUSH
23314: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
23318: LD_INT 21
23320: PPUSH
23321: LD_VAR 0 3
23325: PPUSH
23326: LD_INT 1
23328: PPUSH
23329: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
23333: LD_INT 22
23335: PPUSH
23336: LD_VAR 0 3
23340: PPUSH
23341: LD_INT 1
23343: PPUSH
23344: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
23348: LD_INT 19
23350: PPUSH
23351: LD_VAR 0 3
23355: PPUSH
23356: LD_INT 1
23358: PPUSH
23359: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
23363: LD_INT 26
23365: PPUSH
23366: LD_VAR 0 3
23370: PPUSH
23371: LD_INT 1
23373: PPUSH
23374: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
23378: LD_INT 54
23380: PPUSH
23381: LD_VAR 0 3
23385: PPUSH
23386: LD_INT 1
23388: PPUSH
23389: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
23393: LD_INT 55
23395: PPUSH
23396: LD_VAR 0 3
23400: PPUSH
23401: LD_INT 1
23403: PPUSH
23404: CALL_OW 322
// for i = 0 to 39 do
23408: LD_ADDR_VAR 0 4
23412: PUSH
23413: DOUBLE
23414: LD_INT 0
23416: DEC
23417: ST_TO_ADDR
23418: LD_INT 39
23420: PUSH
23421: FOR_TO
23422: IFFALSE 23443
// SetRestrict ( i , side , true ) ;
23424: LD_VAR 0 4
23428: PPUSH
23429: LD_VAR 0 3
23433: PPUSH
23434: LD_INT 1
23436: PPUSH
23437: CALL_OW 324
23441: GO 23421
23443: POP
23444: POP
// end ; else
23445: GO 23522
23447: POP
// begin for i = 1 to 73 do
23448: LD_ADDR_VAR 0 4
23452: PUSH
23453: DOUBLE
23454: LD_INT 1
23456: DEC
23457: ST_TO_ADDR
23458: LD_INT 73
23460: PUSH
23461: FOR_TO
23462: IFFALSE 23483
// SetTech ( i , side , state_enabled ) ;
23464: LD_VAR 0 4
23468: PPUSH
23469: LD_VAR 0 3
23473: PPUSH
23474: LD_INT 1
23476: PPUSH
23477: CALL_OW 322
23481: GO 23461
23483: POP
23484: POP
// for i = 0 to 39 do
23485: LD_ADDR_VAR 0 4
23489: PUSH
23490: DOUBLE
23491: LD_INT 0
23493: DEC
23494: ST_TO_ADDR
23495: LD_INT 39
23497: PUSH
23498: FOR_TO
23499: IFFALSE 23520
// SetRestrict ( i , side , true ) ;
23501: LD_VAR 0 4
23505: PPUSH
23506: LD_VAR 0 3
23510: PPUSH
23511: LD_INT 1
23513: PPUSH
23514: CALL_OW 324
23518: GO 23498
23520: POP
23521: POP
// end ; end ; end ;
23522: GO 19527
23524: POP
23525: POP
// end ;
23526: LD_VAR 0 2
23530: RET
