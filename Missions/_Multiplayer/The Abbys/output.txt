// export def_base_size , def_west_nations , def_east_nations ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , respawning_time_min , respawning_time_max , siberite_bomb_Delay ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Position_Nations ; export depot_def , breastworks_def , labs_def , factory_def , start_def , extra_oil_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function prepare_deposits ; var list , un , deposits ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
// list := GetListOfResourcesInArea ( west_side ) ^ GetListOfResourcesInArea ( east_side ) ;
   6: LD_ADDR_VAR 0 2
  10: PUSH
  11: LD_INT 8
  13: PPUSH
  14: CALL_OW 442
  18: PUSH
  19: LD_INT 9
  21: PPUSH
  22: CALL_OW 442
  26: ADD
  27: ST_TO_ADDR
// for un = 1 to ( list div 3 ) do
  28: LD_ADDR_VAR 0 3
  32: PUSH
  33: DOUBLE
  34: LD_INT 1
  36: DEC
  37: ST_TO_ADDR
  38: LD_VAR 0 2
  42: PUSH
  43: LD_INT 3
  45: DIV
  46: PUSH
  47: FOR_TO
  48: IFFALSE 94
// RemoveDepositXY ( list [ un * 3 - 2 ] , list [ un * 3 - 1 ] ) ;
  50: LD_VAR 0 2
  54: PUSH
  55: LD_VAR 0 3
  59: PUSH
  60: LD_INT 3
  62: MUL
  63: PUSH
  64: LD_INT 2
  66: MINUS
  67: ARRAY
  68: PPUSH
  69: LD_VAR 0 2
  73: PUSH
  74: LD_VAR 0 3
  78: PUSH
  79: LD_INT 3
  81: MUL
  82: PUSH
  83: LD_INT 1
  85: MINUS
  86: ARRAY
  87: PPUSH
  88: CALL_OW 63
  92: GO 47
  94: POP
  95: POP
// deposits := [ [ 40 , 49 , mat_oil ] , [ 40 , 68 , mat_oil ] , [ 9 , 3 , mat_siberit ] , [ 61 , 116 , mat_siberit ] , [ 177 , 46 , mat_oil ] , [ 185 , 71 , mat_oil ] , [ 157 , 3 , mat_siberit ] , [ 213 , 116 , mat_siberit ] ] ;
  96: LD_ADDR_VAR 0 4
 100: PUSH
 101: LD_INT 40
 103: PUSH
 104: LD_INT 49
 106: PUSH
 107: LD_INT 2
 109: PUSH
 110: EMPTY
 111: LIST
 112: LIST
 113: LIST
 114: PUSH
 115: LD_INT 40
 117: PUSH
 118: LD_INT 68
 120: PUSH
 121: LD_INT 2
 123: PUSH
 124: EMPTY
 125: LIST
 126: LIST
 127: LIST
 128: PUSH
 129: LD_INT 9
 131: PUSH
 132: LD_INT 3
 134: PUSH
 135: LD_INT 3
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: LIST
 142: PUSH
 143: LD_INT 61
 145: PUSH
 146: LD_INT 116
 148: PUSH
 149: LD_INT 3
 151: PUSH
 152: EMPTY
 153: LIST
 154: LIST
 155: LIST
 156: PUSH
 157: LD_INT 177
 159: PUSH
 160: LD_INT 46
 162: PUSH
 163: LD_INT 2
 165: PUSH
 166: EMPTY
 167: LIST
 168: LIST
 169: LIST
 170: PUSH
 171: LD_INT 185
 173: PUSH
 174: LD_INT 71
 176: PUSH
 177: LD_INT 2
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: LIST
 184: PUSH
 185: LD_INT 157
 187: PUSH
 188: LD_INT 3
 190: PUSH
 191: LD_INT 3
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: PUSH
 199: LD_INT 213
 201: PUSH
 202: LD_INT 116
 204: PUSH
 205: LD_INT 3
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: PUSH
 213: EMPTY
 214: LIST
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: ST_TO_ADDR
// for un in deposits do
 223: LD_ADDR_VAR 0 3
 227: PUSH
 228: LD_VAR 0 4
 232: PUSH
 233: FOR_IN
 234: IFFALSE 269
// CreateDepositXY ( un [ 1 ] , un [ 2 ] , un [ 3 ] ) ;
 236: LD_VAR 0 3
 240: PUSH
 241: LD_INT 1
 243: ARRAY
 244: PPUSH
 245: LD_VAR 0 3
 249: PUSH
 250: LD_INT 2
 252: ARRAY
 253: PPUSH
 254: LD_VAR 0 3
 258: PUSH
 259: LD_INT 3
 261: ARRAY
 262: PPUSH
 263: CALL_OW 62
 267: GO 233
 269: POP
 270: POP
// end ;
 271: LD_VAR 0 1
 275: RET
// function init_map ; var i ; begin
 276: LD_INT 0
 278: PPUSH
 279: PPUSH
// prepare_deposits ;
 280: CALL 0 0 0
// extra_oil_deposits_locations := [ [ 29 , 3 ] , [ 82 , 115 ] , [ 134 , 3 ] , [ 192 , 116 ] ] ;
 284: LD_ADDR_EXP 27
 288: PUSH
 289: LD_INT 29
 291: PUSH
 292: LD_INT 3
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: PUSH
 299: LD_INT 82
 301: PUSH
 302: LD_INT 115
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: PUSH
 309: LD_INT 134
 311: PUSH
 312: LD_INT 3
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: PUSH
 319: LD_INT 192
 321: PUSH
 322: LD_INT 116
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: LIST
 333: LIST
 334: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 62 , 60 ] , [ 157 , 60 ] ] ;
 335: LD_ADDR_EXP 28
 339: PUSH
 340: LD_INT 62
 342: PUSH
 343: LD_INT 60
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: PUSH
 350: LD_INT 157
 352: PUSH
 353: LD_INT 60
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: ST_TO_ADDR
// depot_def := [ [ 35 , 34 , 0 ] , [ 56 , 86 , 2 ] , [ 158 , 34 , 5 ] , [ 185 , 86 , 3 ] ] ;
 364: LD_ADDR_EXP 22
 368: PUSH
 369: LD_INT 35
 371: PUSH
 372: LD_INT 34
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: EMPTY
 379: LIST
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 56
 385: PUSH
 386: LD_INT 86
 388: PUSH
 389: LD_INT 2
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: LIST
 396: PUSH
 397: LD_INT 158
 399: PUSH
 400: LD_INT 34
 402: PUSH
 403: LD_INT 5
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: LD_INT 185
 413: PUSH
 414: LD_INT 86
 416: PUSH
 417: LD_INT 3
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: LIST
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: LIST
 429: LIST
 430: ST_TO_ADDR
// labs_def := [ [ 19 , 28 , 1 ] , [ 49 , 92 , 1 ] , [ 166 , 23 , 4 ] , [ 205 , 97 , 4 ] ] ;
 431: LD_ADDR_EXP 24
 435: PUSH
 436: LD_INT 19
 438: PUSH
 439: LD_INT 28
 441: PUSH
 442: LD_INT 1
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PUSH
 450: LD_INT 49
 452: PUSH
 453: LD_INT 92
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 166
 466: PUSH
 467: LD_INT 23
 469: PUSH
 470: LD_INT 4
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: LIST
 477: PUSH
 478: LD_INT 205
 480: PUSH
 481: LD_INT 97
 483: PUSH
 484: LD_INT 4
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: ST_TO_ADDR
// factory_def := [ [ 26 , 16 , 2 ] , [ 64 , 103 , 0 ] , [ 154 , 18 , 3 ] , [ 190 , 103 , 5 ] ] ;
 498: LD_ADDR_EXP 25
 502: PUSH
 503: LD_INT 26
 505: PUSH
 506: LD_INT 16
 508: PUSH
 509: LD_INT 2
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: LIST
 516: PUSH
 517: LD_INT 64
 519: PUSH
 520: LD_INT 103
 522: PUSH
 523: LD_INT 0
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 154
 533: PUSH
 534: LD_INT 18
 536: PUSH
 537: LD_INT 3
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_INT 190
 547: PUSH
 548: LD_INT 103
 550: PUSH
 551: LD_INT 5
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: LIST
 558: PUSH
 559: EMPTY
 560: LIST
 561: LIST
 562: LIST
 563: LIST
 564: ST_TO_ADDR
// start_def := [ [ 35 , 26 ] , [ 65 , 94 ] , [ 150 , 26 ] , [ 185 , 94 ] ] ;
 565: LD_ADDR_EXP 26
 569: PUSH
 570: LD_INT 35
 572: PUSH
 573: LD_INT 26
 575: PUSH
 576: EMPTY
 577: LIST
 578: LIST
 579: PUSH
 580: LD_INT 65
 582: PUSH
 583: LD_INT 94
 585: PUSH
 586: EMPTY
 587: LIST
 588: LIST
 589: PUSH
 590: LD_INT 150
 592: PUSH
 593: LD_INT 26
 595: PUSH
 596: EMPTY
 597: LIST
 598: LIST
 599: PUSH
 600: LD_INT 185
 602: PUSH
 603: LD_INT 94
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: ST_TO_ADDR
// breastworks_def := [ [ [ 44 , 18 , 4 ] , [ 47 , 51 , 5 ] , [ 35 , 8 , 4 ] , [ 50 , 38 , 5 ] ] , [ [ 81 , 97 , 4 ] , [ 54 , 71 , 3 ] , [ 81 , 110 , 5 ] , [ 66 , 82 , 3 ] ] , [ [ 136 , 20 , 1 ] , [ 164 , 48 , 1 ] , [ 130 , 8 , 1 ] , [ 147 , 37 , 0 ] ] , [ [ 181 , 103 , 1 ] , [ 178 , 72 , 1 ] , [ 186 , 112 , 1 ] , [ 172 , 82 , 2 ] ] ] ;
 616: LD_ADDR_EXP 23
 620: PUSH
 621: LD_INT 44
 623: PUSH
 624: LD_INT 18
 626: PUSH
 627: LD_INT 4
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: LIST
 634: PUSH
 635: LD_INT 47
 637: PUSH
 638: LD_INT 51
 640: PUSH
 641: LD_INT 5
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PUSH
 649: LD_INT 35
 651: PUSH
 652: LD_INT 8
 654: PUSH
 655: LD_INT 4
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: LIST
 662: PUSH
 663: LD_INT 50
 665: PUSH
 666: LD_INT 38
 668: PUSH
 669: LD_INT 5
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: LIST
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: PUSH
 683: LD_INT 81
 685: PUSH
 686: LD_INT 97
 688: PUSH
 689: LD_INT 4
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: PUSH
 697: LD_INT 54
 699: PUSH
 700: LD_INT 71
 702: PUSH
 703: LD_INT 3
 705: PUSH
 706: EMPTY
 707: LIST
 708: LIST
 709: LIST
 710: PUSH
 711: LD_INT 81
 713: PUSH
 714: LD_INT 110
 716: PUSH
 717: LD_INT 5
 719: PUSH
 720: EMPTY
 721: LIST
 722: LIST
 723: LIST
 724: PUSH
 725: LD_INT 66
 727: PUSH
 728: LD_INT 82
 730: PUSH
 731: LD_INT 3
 733: PUSH
 734: EMPTY
 735: LIST
 736: LIST
 737: LIST
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: LIST
 743: LIST
 744: PUSH
 745: LD_INT 136
 747: PUSH
 748: LD_INT 20
 750: PUSH
 751: LD_INT 1
 753: PUSH
 754: EMPTY
 755: LIST
 756: LIST
 757: LIST
 758: PUSH
 759: LD_INT 164
 761: PUSH
 762: LD_INT 48
 764: PUSH
 765: LD_INT 1
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: LIST
 772: PUSH
 773: LD_INT 130
 775: PUSH
 776: LD_INT 8
 778: PUSH
 779: LD_INT 1
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PUSH
 787: LD_INT 147
 789: PUSH
 790: LD_INT 37
 792: PUSH
 793: LD_INT 0
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: LIST
 800: PUSH
 801: EMPTY
 802: LIST
 803: LIST
 804: LIST
 805: LIST
 806: PUSH
 807: LD_INT 181
 809: PUSH
 810: LD_INT 103
 812: PUSH
 813: LD_INT 1
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: LIST
 820: PUSH
 821: LD_INT 178
 823: PUSH
 824: LD_INT 72
 826: PUSH
 827: LD_INT 1
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: LIST
 834: PUSH
 835: LD_INT 186
 837: PUSH
 838: LD_INT 112
 840: PUSH
 841: LD_INT 1
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: LIST
 848: PUSH
 849: LD_INT 172
 851: PUSH
 852: LD_INT 82
 854: PUSH
 855: LD_INT 2
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: LIST
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: LIST
 873: LIST
 874: ST_TO_ADDR
// if def_extra_oil_deposits then
 875: LD_EXP 63
 879: IFFALSE 923
// for i in extra_oil_deposits_locations do
 881: LD_ADDR_VAR 0 2
 885: PUSH
 886: LD_EXP 27
 890: PUSH
 891: FOR_IN
 892: IFFALSE 921
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
 894: LD_VAR 0 2
 898: PUSH
 899: LD_INT 1
 901: ARRAY
 902: PPUSH
 903: LD_VAR 0 2
 907: PUSH
 908: LD_INT 2
 910: ARRAY
 911: PPUSH
 912: LD_INT 2
 914: PPUSH
 915: CALL_OW 62
 919: GO 891
 921: POP
 922: POP
// if def_extra_sib_deposits then
 923: LD_EXP 64
 927: IFFALSE 971
// for i in extra_sib_deposits_locations do
 929: LD_ADDR_VAR 0 2
 933: PUSH
 934: LD_EXP 28
 938: PUSH
 939: FOR_IN
 940: IFFALSE 969
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 2
 958: ARRAY
 959: PPUSH
 960: LD_INT 3
 962: PPUSH
 963: CALL_OW 62
 967: GO 939
 969: POP
 970: POP
// end ;
 971: LD_VAR 0 1
 975: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
 976: LD_INT 0
 978: PPUSH
 979: PPUSH
 980: PPUSH
 981: PPUSH
 982: PPUSH
 983: PPUSH
 984: PPUSH
 985: PPUSH
 986: PPUSH
// if Multiplayer then
 987: LD_OWVAR 4
 991: IFFALSE 1055
// begin Game_Type = mp_game_type ;
 993: LD_ADDR_EXP 56
 997: PUSH
 998: LD_OWVAR 6
1002: ST_TO_ADDR
// Your_Side := mp_player_side ;
1003: LD_ADDR_OWVAR 2
1007: PUSH
1008: LD_OWVAR 7
1012: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
1013: LD_ADDR_EXP 18
1017: PUSH
1018: LD_OWVAR 17
1022: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
1023: LD_ADDR_EXP 16
1027: PUSH
1028: LD_OWVAR 15
1032: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
1033: LD_ADDR_EXP 19
1037: PUSH
1038: LD_OWVAR 16
1042: ST_TO_ADDR
// Teams = mp_teams ;
1043: LD_ADDR_EXP 17
1047: PUSH
1048: LD_OWVAR 12
1052: ST_TO_ADDR
// end else
1053: GO 1217
// begin Game_Type = 4 ;
1055: LD_ADDR_EXP 56
1059: PUSH
1060: LD_INT 4
1062: ST_TO_ADDR
// Your_Side = 1 ;
1063: LD_ADDR_OWVAR 2
1067: PUSH
1068: LD_INT 1
1070: ST_TO_ADDR
// Side_Positions = [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
1071: LD_ADDR_EXP 18
1075: PUSH
1076: LD_INT 1
1078: PUSH
1079: LD_INT 2
1081: PUSH
1082: LD_INT 3
1084: PUSH
1085: LD_INT 4
1087: PUSH
1088: LD_INT 0
1090: PUSH
1091: LD_INT 0
1093: PUSH
1094: LD_INT 0
1096: PUSH
1097: LD_INT 0
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: LIST
1106: LIST
1107: LIST
1108: LIST
1109: ST_TO_ADDR
// Side_Teams = [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
1110: LD_ADDR_EXP 16
1114: PUSH
1115: LD_INT 1
1117: PUSH
1118: LD_INT 1
1120: PUSH
1121: LD_INT 2
1123: PUSH
1124: LD_INT 2
1126: PUSH
1127: LD_INT 0
1129: PUSH
1130: LD_INT 0
1132: PUSH
1133: LD_INT 0
1135: PUSH
1136: LD_INT 0
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: LIST
1148: ST_TO_ADDR
// Side_Nations = [ 3 , 2 , 1 , 2 , 0 , 0 , 0 , 0 ] ;
1149: LD_ADDR_EXP 19
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: LD_INT 2
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: LD_INT 2
1165: PUSH
1166: LD_INT 0
1168: PUSH
1169: LD_INT 0
1171: PUSH
1172: LD_INT 0
1174: PUSH
1175: LD_INT 0
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: LIST
1186: LIST
1187: ST_TO_ADDR
// Teams = [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
1188: LD_ADDR_EXP 17
1192: PUSH
1193: LD_INT 1
1195: PUSH
1196: LD_INT 2
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PUSH
1203: LD_INT 3
1205: PUSH
1206: LD_INT 4
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: ST_TO_ADDR
// end ; if Multiplayer then
1217: LD_OWVAR 4
1221: IFFALSE 1446
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
1223: LD_ADDR_EXP 58
1227: PUSH
1228: LD_INT 0
1230: PPUSH
1231: CALL_OW 426
1235: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
1236: LD_ADDR_EXP 59
1240: PUSH
1241: LD_INT 1
1243: PPUSH
1244: CALL_OW 426
1248: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
1249: LD_ADDR_EXP 60
1253: PUSH
1254: LD_INT 2
1256: PPUSH
1257: CALL_OW 426
1261: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
1262: LD_ADDR_EXP 61
1266: PUSH
1267: LD_INT 3
1269: PPUSH
1270: CALL_OW 426
1274: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
1275: LD_ADDR_EXP 62
1279: PUSH
1280: LD_INT 4
1282: PPUSH
1283: CALL_OW 426
1287: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
1288: LD_ADDR_EXP 63
1292: PUSH
1293: LD_INT 5
1295: PPUSH
1296: CALL_OW 426
1300: ST_TO_ADDR
// def_extra_sib_deposits = GetMultiplayerSetting ( 6 ) ;
1301: LD_ADDR_EXP 64
1305: PUSH
1306: LD_INT 6
1308: PPUSH
1309: CALL_OW 426
1313: ST_TO_ADDR
// def_base_size = GetMultiplayerSetting ( 7 ) ;
1314: LD_ADDR_EXP 1
1318: PUSH
1319: LD_INT 7
1321: PPUSH
1322: CALL_OW 426
1326: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
1327: LD_ADDR_EXP 65
1331: PUSH
1332: LD_INT 10
1334: PPUSH
1335: CALL_OW 426
1339: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
1340: LD_ADDR_EXP 66
1344: PUSH
1345: LD_INT 11
1347: PPUSH
1348: CALL_OW 426
1352: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
1353: LD_ADDR_EXP 67
1357: PUSH
1358: LD_INT 12
1360: PPUSH
1361: CALL_OW 426
1365: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
1366: LD_ADDR_EXP 69
1370: PUSH
1371: LD_INT 13
1373: PPUSH
1374: CALL_OW 426
1378: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
1379: LD_ADDR_EXP 68
1383: PUSH
1384: LD_INT 14
1386: PPUSH
1387: CALL_OW 426
1391: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
1392: LD_ADDR_EXP 70
1396: PUSH
1397: LD_INT 15
1399: PPUSH
1400: CALL_OW 426
1404: ST_TO_ADDR
// def_west_nations = GetMultiplayerSetting ( 21 ) ;
1405: LD_ADDR_EXP 2
1409: PUSH
1410: LD_INT 21
1412: PPUSH
1413: CALL_OW 426
1417: ST_TO_ADDR
// def_east_nations = GetMultiplayerSetting ( 22 ) ;
1418: LD_ADDR_EXP 3
1422: PUSH
1423: LD_INT 22
1425: PPUSH
1426: CALL_OW 426
1430: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 23 ) ;
1431: LD_ADDR_VAR 0 9
1435: PUSH
1436: LD_INT 23
1438: PPUSH
1439: CALL_OW 426
1443: ST_TO_ADDR
// end else
1444: GO 1586
// begin randomize ;
1446: CALL_OW 10
// def_base_level = 3 ;
1450: LD_ADDR_EXP 58
1454: PUSH
1455: LD_INT 3
1457: ST_TO_ADDR
// def_amount_of_people = 1 ;
1458: LD_ADDR_EXP 59
1462: PUSH
1463: LD_INT 1
1465: ST_TO_ADDR
// def_skill_level = 1 ;
1466: LD_ADDR_EXP 60
1470: PUSH
1471: LD_INT 1
1473: ST_TO_ADDR
// def_starting_resources = 2 ;
1474: LD_ADDR_EXP 61
1478: PUSH
1479: LD_INT 2
1481: ST_TO_ADDR
// def_shipments_density = 1 ;
1482: LD_ADDR_EXP 62
1486: PUSH
1487: LD_INT 1
1489: ST_TO_ADDR
// def_extra_oil_deposits = 1 ;
1490: LD_ADDR_EXP 63
1494: PUSH
1495: LD_INT 1
1497: ST_TO_ADDR
// def_extra_sib_deposits = 1 ;
1498: LD_ADDR_EXP 64
1502: PUSH
1503: LD_INT 1
1505: ST_TO_ADDR
// def_base_size = 2 ;
1506: LD_ADDR_EXP 1
1510: PUSH
1511: LD_INT 2
1513: ST_TO_ADDR
// def_shared_vision = 1 ;
1514: LD_ADDR_EXP 65
1518: PUSH
1519: LD_INT 1
1521: ST_TO_ADDR
// def_morale_flags = 1 ;
1522: LD_ADDR_EXP 66
1526: PUSH
1527: LD_INT 1
1529: ST_TO_ADDR
// def_siberite_detection = 1 ;
1530: LD_ADDR_EXP 67
1534: PUSH
1535: LD_INT 1
1537: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
1538: LD_ADDR_EXP 69
1542: PUSH
1543: LD_INT 3
1545: ST_TO_ADDR
// def_people_respawning = 2 ;
1546: LD_ADDR_EXP 68
1550: PUSH
1551: LD_INT 2
1553: ST_TO_ADDR
// def_siberite_bomb = 0 ;
1554: LD_ADDR_EXP 70
1558: PUSH
1559: LD_INT 0
1561: ST_TO_ADDR
// def_west_nations = 0 ;
1562: LD_ADDR_EXP 2
1566: PUSH
1567: LD_INT 0
1569: ST_TO_ADDR
// def_east_nations = 2 ;
1570: LD_ADDR_EXP 3
1574: PUSH
1575: LD_INT 2
1577: ST_TO_ADDR
// tech_level = 4 ;
1578: LD_ADDR_VAR 0 9
1582: PUSH
1583: LD_INT 4
1585: ST_TO_ADDR
// end ; InitGameRules ;
1586: CALL 15911 0 0
// if def_game_rules = 0 then
1590: LD_EXP 57
1594: PUSH
1595: LD_INT 0
1597: EQUAL
1598: IFFALSE 1625
// begin if isSGUI then
1600: LD_OWVAR 83
1604: IFFALSE 1612
// setMpTechs ( ) else
1606: CALL 19361 0 0
1610: GO 1625
// begin SetMpTechLevel ( tech_level + 1 ) ;
1612: LD_VAR 0 9
1616: PUSH
1617: LD_INT 1
1619: PLUS
1620: PPUSH
1621: CALL 19508 0 1
// end ; end ; if not def_base_level then
1625: LD_EXP 58
1629: NOT
1630: IFFALSE 1640
// def_base_size := 0 ;
1632: LD_ADDR_EXP 1
1636: PUSH
1637: LD_INT 0
1639: ST_TO_ADDR
// is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1640: LD_ADDR_EXP 4
1644: PUSH
1645: LD_INT 0
1647: PUSH
1648: LD_INT 1
1650: PUSH
1651: LD_INT 1
1653: PUSH
1654: LD_INT 1
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: PUSH
1663: LD_EXP 58
1667: PUSH
1668: LD_INT 1
1670: PLUS
1671: ARRAY
1672: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
1673: LD_ADDR_EXP 5
1677: PUSH
1678: LD_INT 0
1680: PUSH
1681: LD_INT 0
1683: PUSH
1684: LD_INT 2
1686: PUSH
1687: LD_INT 4
1689: PUSH
1690: EMPTY
1691: LIST
1692: LIST
1693: LIST
1694: LIST
1695: PUSH
1696: LD_EXP 58
1700: PUSH
1701: LD_INT 1
1703: PLUS
1704: ARRAY
1705: ST_TO_ADDR
// if Game_Type <> 4 then
1706: LD_EXP 56
1710: PUSH
1711: LD_INT 4
1713: NONEQUAL
1714: IFFALSE 1751
// number_of_people = [ 5 , 7 , 9 , 11 ] [ def_amount_of_people + 1 ] else
1716: LD_ADDR_EXP 6
1720: PUSH
1721: LD_INT 5
1723: PUSH
1724: LD_INT 7
1726: PUSH
1727: LD_INT 9
1729: PUSH
1730: LD_INT 11
1732: PUSH
1733: EMPTY
1734: LIST
1735: LIST
1736: LIST
1737: LIST
1738: PUSH
1739: LD_EXP 59
1743: PUSH
1744: LD_INT 1
1746: PLUS
1747: ARRAY
1748: ST_TO_ADDR
1749: GO 1784
// number_of_people = [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
1751: LD_ADDR_EXP 6
1755: PUSH
1756: LD_INT 9
1758: PUSH
1759: LD_INT 12
1761: PUSH
1762: LD_INT 15
1764: PUSH
1765: LD_INT 24
1767: PUSH
1768: EMPTY
1769: LIST
1770: LIST
1771: LIST
1772: LIST
1773: PUSH
1774: LD_EXP 59
1778: PUSH
1779: LD_INT 1
1781: PLUS
1782: ARRAY
1783: ST_TO_ADDR
// skill_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1784: LD_ADDR_EXP 7
1788: PUSH
1789: LD_INT 2
1791: PUSH
1792: LD_INT 3
1794: PUSH
1795: LD_INT 4
1797: PUSH
1798: LD_INT 5
1800: PUSH
1801: EMPTY
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: PUSH
1807: LD_EXP 60
1811: PUSH
1812: LD_INT 1
1814: PLUS
1815: ARRAY
1816: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1817: LD_ADDR_EXP 9
1821: PUSH
1822: LD_INT 0
1824: PUSH
1825: LD_INT 0
1827: PUSH
1828: LD_INT 0
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: LIST
1835: PUSH
1836: LD_INT 30
1838: PUSH
1839: LD_INT 0
1841: PUSH
1842: LD_INT 0
1844: PUSH
1845: EMPTY
1846: LIST
1847: LIST
1848: LIST
1849: PUSH
1850: LD_INT 50
1852: PUSH
1853: LD_INT 20
1855: PUSH
1856: LD_INT 0
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: LIST
1863: PUSH
1864: LD_INT 80
1866: PUSH
1867: LD_INT 40
1869: PUSH
1870: LD_INT 20
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: LIST
1882: LIST
1883: PUSH
1884: LD_EXP 61
1888: PUSH
1889: LD_INT 1
1891: PLUS
1892: ARRAY
1893: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1894: LD_ADDR_EXP 8
1898: PUSH
1899: LD_INT 10
1901: PUSH
1902: EMPTY
1903: LIST
1904: PUSH
1905: LD_INT 7
1907: PUSH
1908: LD_INT 14
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: PUSH
1915: LD_INT 6
1917: PUSH
1918: LD_INT 12
1920: PUSH
1921: LD_INT 18
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: LIST
1928: PUSH
1929: LD_INT 5
1931: PUSH
1932: LD_INT 10
1934: PUSH
1935: LD_INT 15
1937: PUSH
1938: LD_INT 20
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: LD_EXP 61
1957: PUSH
1958: LD_INT 1
1960: PLUS
1961: ARRAY
1962: ST_TO_ADDR
// shipments_density = [ 18 , 25 , 35 ] [ def_shipments_density + 1 ] ;
1963: LD_ADDR_EXP 10
1967: PUSH
1968: LD_INT 18
1970: PUSH
1971: LD_INT 25
1973: PUSH
1974: LD_INT 35
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: LIST
1981: PUSH
1982: LD_EXP 62
1986: PUSH
1987: LD_INT 1
1989: PLUS
1990: ARRAY
1991: ST_TO_ADDR
// amount_of_apemen := [ 0 , 2 , 4 , 6 ] [ def_amount_of_apemen + 1 ] ;
1992: LD_ADDR_EXP 12
1996: PUSH
1997: LD_INT 0
1999: PUSH
2000: LD_INT 2
2002: PUSH
2003: LD_INT 4
2005: PUSH
2006: LD_INT 6
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: PUSH
2015: LD_EXP 69
2019: PUSH
2020: LD_INT 1
2022: PLUS
2023: ARRAY
2024: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
2025: LD_ADDR_EXP 13
2029: PUSH
2030: LD_INT 0
2032: PUSH
2033: LD_INT 8400
2035: PUSH
2036: LD_INT 1750
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: LIST
2043: PUSH
2044: LD_EXP 68
2048: PUSH
2049: LD_INT 1
2051: PLUS
2052: ARRAY
2053: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
2054: LD_ADDR_EXP 14
2058: PUSH
2059: LD_INT 0
2061: PUSH
2062: LD_INT 21000
2064: PUSH
2065: LD_INT 4200
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: LIST
2072: PUSH
2073: LD_EXP 68
2077: PUSH
2078: LD_INT 1
2080: PLUS
2081: ARRAY
2082: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
2083: LD_ADDR_EXP 15
2087: PUSH
2088: LD_INT 0
2090: PUSH
2091: LD_INT 1
2093: PUSH
2094: LD_INT 63000
2096: PUSH
2097: LD_INT 126000
2099: PUSH
2100: LD_INT 189000
2102: PUSH
2103: LD_INT 252000
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: PUSH
2114: LD_EXP 70
2118: PUSH
2119: LD_INT 1
2121: PLUS
2122: ARRAY
2123: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
2124: LD_ADDR_EXP 11
2128: PUSH
2129: LD_INT 1
2131: NEG
2132: PUSH
2133: LD_INT 350
2135: PUSH
2136: LD_INT 700
2138: PUSH
2139: LD_INT 1400
2141: PUSH
2142: LD_INT 0
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: LIST
2149: LIST
2150: LIST
2151: PUSH
2152: LD_EXP 66
2156: PUSH
2157: LD_INT 1
2159: PLUS
2160: ARRAY
2161: ST_TO_ADDR
// battle_flags_id = [ ] ;
2162: LD_ADDR_EXP 29
2166: PUSH
2167: EMPTY
2168: ST_TO_ADDR
// if not def_builduptime then
2169: LD_EXP 71
2173: NOT
2174: IFFALSE 2179
// disable ( 600 ) ;
2176: LD_INT 600
2178: DISABLE_MARKED
// end ;
2179: LD_VAR 0 1
2183: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2184: LD_INT 0
2186: PPUSH
2187: PPUSH
2188: PPUSH
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
2189: LD_ADDR_EXP 20
2193: PUSH
2194: LD_EXP 16
2198: PUSH
2199: LD_INT 0
2201: PUSH
2202: EMPTY
2203: LIST
2204: DIFF
2205: PUSH
2206: LD_INT 1
2208: GREATER
2209: ST_TO_ADDR
// if not Team_Game then
2210: LD_EXP 20
2214: NOT
2215: IFFALSE 2313
// begin for i = 1 to 8 do
2217: LD_ADDR_VAR 0 2
2221: PUSH
2222: DOUBLE
2223: LD_INT 1
2225: DEC
2226: ST_TO_ADDR
2227: LD_INT 8
2229: PUSH
2230: FOR_TO
2231: IFFALSE 2309
// for j = 1 to 8 do
2233: LD_ADDR_VAR 0 3
2237: PUSH
2238: DOUBLE
2239: LD_INT 1
2241: DEC
2242: ST_TO_ADDR
2243: LD_INT 8
2245: PUSH
2246: FOR_TO
2247: IFFALSE 2305
// if i <> j then
2249: LD_VAR 0 2
2253: PUSH
2254: LD_VAR 0 3
2258: NONEQUAL
2259: IFFALSE 2283
// SetAttitude ( i , j , att_neutral , true ) else
2261: LD_VAR 0 2
2265: PPUSH
2266: LD_VAR 0 3
2270: PPUSH
2271: LD_INT 0
2273: PPUSH
2274: LD_INT 1
2276: PPUSH
2277: CALL_OW 80
2281: GO 2303
// SetAttitude ( i , j , att_friend , true ) ;
2283: LD_VAR 0 2
2287: PPUSH
2288: LD_VAR 0 3
2292: PPUSH
2293: LD_INT 1
2295: PPUSH
2296: LD_INT 1
2298: PPUSH
2299: CALL_OW 80
2303: GO 2246
2305: POP
2306: POP
2307: GO 2230
2309: POP
2310: POP
// end else
2311: GO 2488
// begin if def_shared_vision then
2313: LD_EXP 65
2317: IFFALSE 2382
// begin for i in Teams do
2319: LD_ADDR_VAR 0 2
2323: PUSH
2324: LD_EXP 17
2328: PUSH
2329: FOR_IN
2330: IFFALSE 2380
// for j = 2 to i do
2332: LD_ADDR_VAR 0 3
2336: PUSH
2337: DOUBLE
2338: LD_INT 2
2340: DEC
2341: ST_TO_ADDR
2342: LD_VAR 0 2
2346: PUSH
2347: FOR_TO
2348: IFFALSE 2376
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2350: LD_VAR 0 2
2354: PUSH
2355: LD_VAR 0 3
2359: ARRAY
2360: PPUSH
2361: LD_VAR 0 2
2365: PUSH
2366: LD_INT 1
2368: ARRAY
2369: PPUSH
2370: CALL_OW 343
2374: GO 2347
2376: POP
2377: POP
2378: GO 2329
2380: POP
2381: POP
// end ; for i = 1 to 8 do
2382: LD_ADDR_VAR 0 2
2386: PUSH
2387: DOUBLE
2388: LD_INT 1
2390: DEC
2391: ST_TO_ADDR
2392: LD_INT 8
2394: PUSH
2395: FOR_TO
2396: IFFALSE 2486
// for j = 1 to 8 do
2398: LD_ADDR_VAR 0 3
2402: PUSH
2403: DOUBLE
2404: LD_INT 1
2406: DEC
2407: ST_TO_ADDR
2408: LD_INT 8
2410: PUSH
2411: FOR_TO
2412: IFFALSE 2482
// if Side_Teams [ i ] = Side_Teams [ j ] then
2414: LD_EXP 16
2418: PUSH
2419: LD_VAR 0 2
2423: ARRAY
2424: PUSH
2425: LD_EXP 16
2429: PUSH
2430: LD_VAR 0 3
2434: ARRAY
2435: EQUAL
2436: IFFALSE 2460
// SetAttitude ( i , j , att_friend , true ) else
2438: LD_VAR 0 2
2442: PPUSH
2443: LD_VAR 0 3
2447: PPUSH
2448: LD_INT 1
2450: PPUSH
2451: LD_INT 1
2453: PPUSH
2454: CALL_OW 80
2458: GO 2480
// SetAttitude ( i , j , att_enemy , true ) ;
2460: LD_VAR 0 2
2464: PPUSH
2465: LD_VAR 0 3
2469: PPUSH
2470: LD_INT 2
2472: PPUSH
2473: LD_INT 1
2475: PPUSH
2476: CALL_OW 80
2480: GO 2411
2482: POP
2483: POP
2484: GO 2395
2486: POP
2487: POP
// end ; end ;
2488: LD_VAR 0 1
2492: RET
// function prepare_people ( count , cl , x , y , r ) ; var i , j , un ; begin
2493: LD_INT 0
2495: PPUSH
2496: PPUSH
2497: PPUSH
2498: PPUSH
// result := [ ] ;
2499: LD_ADDR_VAR 0 6
2503: PUSH
2504: EMPTY
2505: ST_TO_ADDR
// for i := 1 to count do
2506: LD_ADDR_VAR 0 7
2510: PUSH
2511: DOUBLE
2512: LD_INT 1
2514: DEC
2515: ST_TO_ADDR
2516: LD_VAR 0 1
2520: PUSH
2521: FOR_TO
2522: IFFALSE 2918
// begin uc_direction := Rand ( 0 , 5 ) ;
2524: LD_ADDR_OWVAR 24
2528: PUSH
2529: LD_INT 0
2531: PPUSH
2532: LD_INT 5
2534: PPUSH
2535: CALL_OW 12
2539: ST_TO_ADDR
// if commander then
2540: LD_LOC 1
2544: IFFALSE 2653
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2546: LD_ADDR_OWVAR 26
2550: PUSH
2551: LD_OWVAR 19
2555: PUSH
2556: LD_OWVAR 20
2560: ARRAY
2561: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2562: LD_INT 1
2564: PPUSH
2565: LD_INT 2
2567: PPUSH
2568: CALL_OW 12
2572: PPUSH
2573: LD_VAR 0 2
2577: PPUSH
2578: LD_EXP 7
2582: PUSH
2583: LD_INT 2
2585: PLUS
2586: PPUSH
2587: CALL_OW 380
// hc_importance := 105 ;
2591: LD_ADDR_OWVAR 32
2595: PUSH
2596: LD_INT 105
2598: ST_TO_ADDR
// commander := false ;
2599: LD_ADDR_LOC 1
2603: PUSH
2604: LD_INT 0
2606: ST_TO_ADDR
// if Multiplayer then
2607: LD_OWVAR 4
2611: IFFALSE 2651
// begin hc_gallery := MULTIAVATARS ;
2613: LD_ADDR_OWVAR 33
2617: PUSH
2618: LD_STRING MULTIAVATARS
2620: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2621: LD_ADDR_OWVAR 34
2625: PUSH
2626: LD_OWVAR 20
2630: PPUSH
2631: CALL_OW 525
2635: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2636: LD_ADDR_OWVAR 27
2640: PUSH
2641: LD_OWVAR 20
2645: PPUSH
2646: CALL_OW 526
2650: ST_TO_ADDR
// end ; end else
2651: GO 2716
// begin hc_name :=  ;
2653: LD_ADDR_OWVAR 26
2657: PUSH
2658: LD_STRING 
2660: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2661: LD_INT 1
2663: PPUSH
2664: LD_INT 2
2666: PPUSH
2667: CALL_OW 12
2671: PPUSH
2672: LD_VAR 0 2
2676: PPUSH
2677: LD_EXP 7
2681: PPUSH
2682: CALL_OW 380
// hc_importance := 0 ;
2686: LD_ADDR_OWVAR 32
2690: PUSH
2691: LD_INT 0
2693: ST_TO_ADDR
// if Multiplayer then
2694: LD_OWVAR 4
2698: IFFALSE 2716
// begin hc_gallery :=  ;
2700: LD_ADDR_OWVAR 33
2704: PUSH
2705: LD_STRING 
2707: ST_TO_ADDR
// hc_face_number := 0 ;
2708: LD_ADDR_OWVAR 34
2712: PUSH
2713: LD_INT 0
2715: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2716: LD_ADDR_VAR 0 9
2720: PUSH
2721: CALL_OW 44
2725: ST_TO_ADDR
// if global_defined then
2726: LD_LOC 3
2730: IFFALSE 2870
// begin if ( cl = class_soldier ) then
2732: LD_VAR 0 2
2736: PUSH
2737: LD_INT 1
2739: EQUAL
2740: IFFALSE 2760
// j := i + soldiers_created else
2742: LD_ADDR_VAR 0 8
2746: PUSH
2747: LD_VAR 0 7
2751: PUSH
2752: LD_LOC 4
2756: PLUS
2757: ST_TO_ADDR
2758: GO 2770
// j := i ;
2760: LD_ADDR_VAR 0 8
2764: PUSH
2765: LD_VAR 0 7
2769: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2770: LD_LOC 2
2774: PUSH
2775: LD_VAR 0 2
2779: ARRAY
2780: PUSH
2781: LD_VAR 0 8
2785: ARRAY
2786: PPUSH
2787: LD_VAR 0 9
2791: PPUSH
2792: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2796: LD_VAR 0 9
2800: PPUSH
2801: LD_INT 2
2803: PPUSH
2804: LD_LOC 2
2808: PUSH
2809: LD_VAR 0 2
2813: ARRAY
2814: PUSH
2815: LD_VAR 0 8
2819: ARRAY
2820: PPUSH
2821: LD_INT 2
2823: PPUSH
2824: CALL_OW 260
2828: PPUSH
2829: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2833: LD_VAR 0 9
2837: PPUSH
2838: LD_INT 1
2840: PPUSH
2841: LD_LOC 2
2845: PUSH
2846: LD_VAR 0 2
2850: ARRAY
2851: PUSH
2852: LD_VAR 0 8
2856: ARRAY
2857: PPUSH
2858: LD_INT 1
2860: PPUSH
2861: CALL_OW 260
2865: PPUSH
2866: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2870: LD_VAR 0 9
2874: PPUSH
2875: LD_VAR 0 3
2879: PPUSH
2880: LD_VAR 0 4
2884: PPUSH
2885: LD_VAR 0 5
2889: PPUSH
2890: LD_INT 0
2892: PPUSH
2893: CALL_OW 50
// result := result ^ [ un ] ;
2897: LD_ADDR_VAR 0 6
2901: PUSH
2902: LD_VAR 0 6
2906: PUSH
2907: LD_VAR 0 9
2911: PUSH
2912: EMPTY
2913: LIST
2914: ADD
2915: ST_TO_ADDR
// end ;
2916: GO 2521
2918: POP
2919: POP
// if not global_defined then
2920: LD_LOC 3
2924: NOT
2925: IFFALSE 3003
// if ( global_units >= cl ) then
2927: LD_LOC 2
2931: PUSH
2932: LD_VAR 0 2
2936: GREATEREQUAL
2937: IFFALSE 2978
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2939: LD_ADDR_LOC 2
2943: PUSH
2944: LD_LOC 2
2948: PPUSH
2949: LD_VAR 0 2
2953: PPUSH
2954: LD_LOC 2
2958: PUSH
2959: LD_VAR 0 2
2963: ARRAY
2964: PUSH
2965: LD_VAR 0 6
2969: ADD
2970: PPUSH
2971: CALL_OW 1
2975: ST_TO_ADDR
2976: GO 3003
// global_units := Replace ( global_units , cl , result ) ;
2978: LD_ADDR_LOC 2
2982: PUSH
2983: LD_LOC 2
2987: PPUSH
2988: LD_VAR 0 2
2992: PPUSH
2993: LD_VAR 0 6
2997: PPUSH
2998: CALL_OW 1
3002: ST_TO_ADDR
// end ;
3003: LD_VAR 0 6
3007: RET
// function prepare_side ( side , pos , nation ) ; var x , y , dir , i , r , sol , br , dep ; begin
3008: LD_INT 0
3010: PPUSH
3011: PPUSH
3012: PPUSH
3013: PPUSH
3014: PPUSH
3015: PPUSH
3016: PPUSH
3017: PPUSH
3018: PPUSH
// if side in [ 0 , 9 ] then
3019: LD_VAR 0 1
3023: PUSH
3024: LD_INT 0
3026: PUSH
3027: LD_INT 9
3029: PUSH
3030: EMPTY
3031: LIST
3032: LIST
3033: IN
3034: IFFALSE 3038
// exit ;
3036: GO 4293
// uc_nation := nation ;
3038: LD_ADDR_OWVAR 21
3042: PUSH
3043: LD_VAR 0 3
3047: ST_TO_ADDR
// uc_side := side ;
3048: LD_ADDR_OWVAR 20
3052: PUSH
3053: LD_VAR 0 1
3057: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3058: LD_ADDR_VAR 0 5
3062: PUSH
3063: LD_EXP 22
3067: PUSH
3068: LD_VAR 0 2
3072: ARRAY
3073: PUSH
3074: LD_INT 1
3076: ARRAY
3077: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3078: LD_ADDR_VAR 0 6
3082: PUSH
3083: LD_EXP 22
3087: PUSH
3088: LD_VAR 0 2
3092: ARRAY
3093: PUSH
3094: LD_INT 2
3096: ARRAY
3097: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3098: LD_ADDR_VAR 0 7
3102: PUSH
3103: LD_EXP 22
3107: PUSH
3108: LD_VAR 0 2
3112: ARRAY
3113: PUSH
3114: LD_INT 3
3116: ARRAY
3117: ST_TO_ADDR
// if is_depot then
3118: LD_EXP 4
3122: IFFALSE 3255
// begin bc_type = b_depot ;
3124: LD_ADDR_OWVAR 42
3128: PUSH
3129: LD_INT 0
3131: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3132: LD_ADDR_VAR 0 12
3136: PUSH
3137: LD_VAR 0 5
3141: PPUSH
3142: LD_VAR 0 6
3146: PPUSH
3147: LD_VAR 0 7
3151: PPUSH
3152: CALL_OW 47
3156: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3157: LD_VAR 0 12
3161: PPUSH
3162: LD_STRING @
3164: PUSH
3165: LD_VAR 0 1
3169: STR
3170: PPUSH
3171: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3175: LD_VAR 0 12
3179: PPUSH
3180: CALL_OW 274
3184: PPUSH
3185: LD_INT 1
3187: PPUSH
3188: LD_EXP 9
3192: PUSH
3193: LD_INT 1
3195: ARRAY
3196: PPUSH
3197: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3201: LD_VAR 0 12
3205: PPUSH
3206: CALL_OW 274
3210: PPUSH
3211: LD_INT 2
3213: PPUSH
3214: LD_EXP 9
3218: PUSH
3219: LD_INT 2
3221: ARRAY
3222: PPUSH
3223: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3227: LD_VAR 0 12
3231: PPUSH
3232: CALL_OW 274
3236: PPUSH
3237: LD_INT 3
3239: PPUSH
3240: LD_EXP 9
3244: PUSH
3245: LD_INT 3
3247: ARRAY
3248: PPUSH
3249: CALL_OW 277
// end else
3253: GO 3399
// begin for i := 1 to 3 do
3255: LD_ADDR_VAR 0 8
3259: PUSH
3260: DOUBLE
3261: LD_INT 1
3263: DEC
3264: ST_TO_ADDR
3265: LD_INT 3
3267: PUSH
3268: FOR_TO
3269: IFFALSE 3397
// begin r := starting_resources [ i ] ;
3271: LD_ADDR_VAR 0 9
3275: PUSH
3276: LD_EXP 9
3280: PUSH
3281: LD_VAR 0 8
3285: ARRAY
3286: ST_TO_ADDR
// while r >= 10 do
3287: LD_VAR 0 9
3291: PUSH
3292: LD_INT 10
3294: GREATEREQUAL
3295: IFFALSE 3395
// if r > 50 then
3297: LD_VAR 0 9
3301: PUSH
3302: LD_INT 50
3304: GREATER
3305: IFFALSE 3351
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3307: LD_VAR 0 8
3311: PPUSH
3312: LD_INT 5
3314: PPUSH
3315: LD_VAR 0 5
3319: PPUSH
3320: LD_VAR 0 6
3324: PPUSH
3325: LD_INT 4
3327: PPUSH
3328: LD_INT 0
3330: PPUSH
3331: CALL_OW 60
// r := r - 50 ;
3335: LD_ADDR_VAR 0 9
3339: PUSH
3340: LD_VAR 0 9
3344: PUSH
3345: LD_INT 50
3347: MINUS
3348: ST_TO_ADDR
// end else
3349: GO 3393
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3351: LD_VAR 0 8
3355: PPUSH
3356: LD_VAR 0 9
3360: PUSH
3361: LD_INT 10
3363: DIV
3364: PPUSH
3365: LD_VAR 0 5
3369: PPUSH
3370: LD_VAR 0 6
3374: PPUSH
3375: LD_INT 4
3377: PPUSH
3378: LD_INT 0
3380: PPUSH
3381: CALL_OW 60
// r := 0 ;
3385: LD_ADDR_VAR 0 9
3389: PUSH
3390: LD_INT 0
3392: ST_TO_ADDR
// end ;
3393: GO 3287
// end ;
3395: GO 3268
3397: POP
3398: POP
// end ; if def_base_size > 0 then
3399: LD_EXP 1
3403: PUSH
3404: LD_INT 0
3406: GREATER
3407: IFFALSE 3482
// begin bc_kind1 := b_lab_basic ;
3409: LD_ADDR_OWVAR 44
3413: PUSH
3414: LD_INT 9
3416: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
3417: LD_ADDR_OWVAR 45
3421: PUSH
3422: LD_INT 9
3424: ST_TO_ADDR
// bc_type := b_lab ;
3425: LD_ADDR_OWVAR 42
3429: PUSH
3430: LD_INT 6
3432: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( labs_def [ pos ] [ 1 ] , labs_def [ pos ] [ 2 ] , labs_def [ pos ] [ 3 ] ) ;
3433: LD_EXP 24
3437: PUSH
3438: LD_VAR 0 2
3442: ARRAY
3443: PUSH
3444: LD_INT 1
3446: ARRAY
3447: PPUSH
3448: LD_EXP 24
3452: PUSH
3453: LD_VAR 0 2
3457: ARRAY
3458: PUSH
3459: LD_INT 2
3461: ARRAY
3462: PPUSH
3463: LD_EXP 24
3467: PUSH
3468: LD_VAR 0 2
3472: ARRAY
3473: PUSH
3474: LD_INT 3
3476: ARRAY
3477: PPUSH
3478: CALL_OW 47
// end ; if def_base_size > 1 then
3482: LD_EXP 1
3486: PUSH
3487: LD_INT 1
3489: GREATER
3490: IFFALSE 3549
// begin bc_type := b_workshop ;
3492: LD_ADDR_OWVAR 42
3496: PUSH
3497: LD_INT 2
3499: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( factory_def [ pos ] [ 1 ] , factory_def [ pos ] [ 2 ] , factory_def [ pos ] [ 3 ] ) ;
3500: LD_EXP 25
3504: PUSH
3505: LD_VAR 0 2
3509: ARRAY
3510: PUSH
3511: LD_INT 1
3513: ARRAY
3514: PPUSH
3515: LD_EXP 25
3519: PUSH
3520: LD_VAR 0 2
3524: ARRAY
3525: PUSH
3526: LD_INT 2
3528: ARRAY
3529: PPUSH
3530: LD_EXP 25
3534: PUSH
3535: LD_VAR 0 2
3539: ARRAY
3540: PUSH
3541: LD_INT 3
3543: ARRAY
3544: PPUSH
3545: CALL_OW 47
// end ; for r in starting_crates do
3549: LD_ADDR_VAR 0 9
3553: PUSH
3554: LD_EXP 8
3558: PUSH
3559: FOR_IN
3560: IFFALSE 3592
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3562: LD_INT 1
3564: PPUSH
3565: LD_INT 5
3567: PPUSH
3568: LD_VAR 0 5
3572: PPUSH
3573: LD_VAR 0 6
3577: PPUSH
3578: LD_VAR 0 9
3582: PPUSH
3583: LD_INT 0
3585: PPUSH
3586: CALL_OW 60
3590: GO 3559
3592: POP
3593: POP
// if def_morale_flags then
3594: LD_EXP 66
3598: IFFALSE 3737
// begin x := start_def [ pos ] [ 1 ] ;
3600: LD_ADDR_VAR 0 5
3604: PUSH
3605: LD_EXP 26
3609: PUSH
3610: LD_VAR 0 2
3614: ARRAY
3615: PUSH
3616: LD_INT 1
3618: ARRAY
3619: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3620: LD_ADDR_VAR 0 6
3624: PUSH
3625: LD_EXP 26
3629: PUSH
3630: LD_VAR 0 2
3634: ARRAY
3635: PUSH
3636: LD_INT 2
3638: ARRAY
3639: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3640: LD_VAR 0 5
3644: PPUSH
3645: LD_VAR 0 6
3649: PPUSH
3650: LD_INT 12
3652: PPUSH
3653: LD_INT 2
3655: PPUSH
3656: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3660: LD_ADDR_EXP 29
3664: PUSH
3665: LD_EXP 29
3669: PUSH
3670: LD_VAR 0 1
3674: PPUSH
3675: LD_VAR 0 5
3679: PPUSH
3680: LD_VAR 0 6
3684: PPUSH
3685: LD_INT 1
3687: PUSH
3688: LD_INT 100
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: PUSH
3695: LD_INT 2
3697: PUSH
3698: LD_INT 50
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: PUSH
3705: LD_INT 3
3707: PUSH
3708: LD_INT 20
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: PUSH
3715: LD_INT 20
3717: PUSH
3718: LD_INT 100
3720: PUSH
3721: EMPTY
3722: LIST
3723: LIST
3724: PUSH
3725: EMPTY
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: PPUSH
3731: CALL_OW 418
3735: ADD
3736: ST_TO_ADDR
// end ; commander := true ;
3737: LD_ADDR_LOC 1
3741: PUSH
3742: LD_INT 1
3744: ST_TO_ADDR
// soldiers_created := 0 ;
3745: LD_ADDR_LOC 4
3749: PUSH
3750: LD_INT 0
3752: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3753: LD_ADDR_VAR 0 8
3757: PUSH
3758: DOUBLE
3759: LD_INT 1
3761: DEC
3762: ST_TO_ADDR
3763: LD_EXP 5
3767: PUSH
3768: FOR_TO
3769: IFFALSE 4011
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3771: LD_ADDR_VAR 0 5
3775: PUSH
3776: LD_EXP 23
3780: PUSH
3781: LD_VAR 0 2
3785: ARRAY
3786: PUSH
3787: LD_VAR 0 8
3791: ARRAY
3792: PUSH
3793: LD_INT 1
3795: ARRAY
3796: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3797: LD_ADDR_VAR 0 6
3801: PUSH
3802: LD_EXP 23
3806: PUSH
3807: LD_VAR 0 2
3811: ARRAY
3812: PUSH
3813: LD_VAR 0 8
3817: ARRAY
3818: PUSH
3819: LD_INT 2
3821: ARRAY
3822: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3823: LD_ADDR_VAR 0 7
3827: PUSH
3828: LD_EXP 23
3832: PUSH
3833: LD_VAR 0 2
3837: ARRAY
3838: PUSH
3839: LD_VAR 0 8
3843: ARRAY
3844: PUSH
3845: LD_INT 3
3847: ARRAY
3848: ST_TO_ADDR
// if i < 4 then
3849: LD_VAR 0 8
3853: PUSH
3854: LD_INT 4
3856: LESS
3857: IFFALSE 3869
// bc_type := b_breastwork else
3859: LD_ADDR_OWVAR 42
3863: PUSH
3864: LD_INT 31
3866: ST_TO_ADDR
3867: GO 3877
// bc_type := b_armoury ;
3869: LD_ADDR_OWVAR 42
3873: PUSH
3874: LD_INT 4
3876: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3877: LD_ADDR_VAR 0 11
3881: PUSH
3882: LD_VAR 0 5
3886: PPUSH
3887: LD_VAR 0 6
3891: PPUSH
3892: LD_VAR 0 7
3896: PPUSH
3897: CALL_OW 47
3901: ST_TO_ADDR
// x := ShiftX ( x , dir , 2 ) ;
3902: LD_ADDR_VAR 0 5
3906: PUSH
3907: LD_VAR 0 5
3911: PPUSH
3912: LD_VAR 0 7
3916: PPUSH
3917: LD_INT 2
3919: PPUSH
3920: CALL_OW 272
3924: ST_TO_ADDR
// y := ShiftY ( y , dir , 2 ) ;
3925: LD_ADDR_VAR 0 6
3929: PUSH
3930: LD_VAR 0 6
3934: PPUSH
3935: LD_VAR 0 7
3939: PPUSH
3940: LD_INT 2
3942: PPUSH
3943: CALL_OW 273
3947: ST_TO_ADDR
// sol := prepare_people ( 1 , class_soldier , x , y , 0 ) [ 1 ] ;
3948: LD_ADDR_VAR 0 10
3952: PUSH
3953: LD_INT 1
3955: PPUSH
3956: LD_INT 1
3958: PPUSH
3959: LD_VAR 0 5
3963: PPUSH
3964: LD_VAR 0 6
3968: PPUSH
3969: LD_INT 0
3971: PPUSH
3972: CALL 2493 0 5
3976: PUSH
3977: LD_INT 1
3979: ARRAY
3980: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
3981: LD_ADDR_LOC 4
3985: PUSH
3986: LD_LOC 4
3990: PUSH
3991: LD_INT 1
3993: PLUS
3994: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
3995: LD_VAR 0 10
3999: PPUSH
4000: LD_VAR 0 11
4004: PPUSH
4005: CALL_OW 120
// end ;
4009: GO 3768
4011: POP
4012: POP
// x := start_def [ pos ] [ 1 ] ;
4013: LD_ADDR_VAR 0 5
4017: PUSH
4018: LD_EXP 26
4022: PUSH
4023: LD_VAR 0 2
4027: ARRAY
4028: PUSH
4029: LD_INT 1
4031: ARRAY
4032: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4033: LD_ADDR_VAR 0 6
4037: PUSH
4038: LD_EXP 26
4042: PUSH
4043: LD_VAR 0 2
4047: ARRAY
4048: PUSH
4049: LD_INT 2
4051: ARRAY
4052: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 ) ;
4053: LD_LOC 8
4057: PUSH
4058: LD_EXP 5
4062: MINUS
4063: PPUSH
4064: LD_INT 1
4066: PPUSH
4067: LD_VAR 0 5
4071: PPUSH
4072: LD_VAR 0 6
4076: PPUSH
4077: LD_INT 5
4079: PPUSH
4080: CALL 2493 0 5
// prepare_people ( neng , class_engineer , x , y , 5 ) ;
4084: LD_LOC 5
4088: PPUSH
4089: LD_INT 2
4091: PPUSH
4092: LD_VAR 0 5
4096: PPUSH
4097: LD_VAR 0 6
4101: PPUSH
4102: LD_INT 5
4104: PPUSH
4105: CALL 2493 0 5
// prepare_people ( nmech , class_mechanic , x , y , 5 ) ;
4109: LD_LOC 7
4113: PPUSH
4114: LD_INT 3
4116: PPUSH
4117: LD_VAR 0 5
4121: PPUSH
4122: LD_VAR 0 6
4126: PPUSH
4127: LD_INT 5
4129: PPUSH
4130: CALL 2493 0 5
// prepare_people ( nsci , class_scientistic , x , y , 5 ) ;
4134: LD_LOC 6
4138: PPUSH
4139: LD_INT 4
4141: PPUSH
4142: LD_VAR 0 5
4146: PPUSH
4147: LD_VAR 0 6
4151: PPUSH
4152: LD_INT 5
4154: PPUSH
4155: CALL 2493 0 5
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4159: LD_EXP 67
4163: PUSH
4164: LD_INT 20
4166: PPUSH
4167: LD_VAR 0 1
4171: PPUSH
4172: CALL_OW 321
4176: PUSH
4177: LD_INT 1
4179: EQUAL
4180: AND
4181: IFFALSE 4198
// SetTech ( tech_SibDet , side , state_researched ) ;
4183: LD_INT 20
4185: PPUSH
4186: LD_VAR 0 1
4190: PPUSH
4191: LD_INT 2
4193: PPUSH
4194: CALL_OW 322
// if def_siberite_bomb = 1 then
4198: LD_EXP 70
4202: PUSH
4203: LD_INT 1
4205: EQUAL
4206: IFFALSE 4240
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4208: LD_INT 25
4210: PPUSH
4211: LD_VAR 0 1
4215: PPUSH
4216: LD_INT 1
4218: PPUSH
4219: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4223: LD_INT 73
4225: PPUSH
4226: LD_VAR 0 1
4230: PPUSH
4231: LD_INT 1
4233: PPUSH
4234: CALL_OW 322
// end else
4238: GO 4270
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4240: LD_INT 25
4242: PPUSH
4243: LD_VAR 0 1
4247: PPUSH
4248: LD_INT 0
4250: PPUSH
4251: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4255: LD_INT 73
4257: PPUSH
4258: LD_VAR 0 1
4262: PPUSH
4263: LD_INT 0
4265: PPUSH
4266: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4270: LD_INT 24
4272: PPUSH
4273: LD_VAR 0 1
4277: PPUSH
4278: LD_INT 0
4280: PPUSH
4281: CALL_OW 322
// global_defined := true ;
4285: LD_ADDR_LOC 3
4289: PUSH
4290: LD_INT 1
4292: ST_TO_ADDR
// end ;
4293: LD_VAR 0 4
4297: RET
// every 0 0$1 do
4298: GO 4300
4300: DISABLE
// if ( def_siberite_bomb > 1 ) then
4301: LD_EXP 70
4305: PUSH
4306: LD_INT 1
4308: GREATER
4309: IFFALSE 4324
// begin wait ( siberite_bomb_Delay ) ;
4311: LD_EXP 15
4315: PPUSH
4316: CALL_OW 67
// EnableSibFiss ;
4320: CALL 4325 0 0
// end ;
4324: END
// function EnableSibFiss ; var i ; begin
4325: LD_INT 0
4327: PPUSH
4328: PPUSH
// for i := 1 to 8 do
4329: LD_ADDR_VAR 0 2
4333: PUSH
4334: DOUBLE
4335: LD_INT 1
4337: DEC
4338: ST_TO_ADDR
4339: LD_INT 8
4341: PUSH
4342: FOR_TO
4343: IFFALSE 4389
// if Side_Positions [ i ] then
4345: LD_EXP 18
4349: PUSH
4350: LD_VAR 0 2
4354: ARRAY
4355: IFFALSE 4387
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4357: LD_INT 25
4359: PPUSH
4360: LD_VAR 0 2
4364: PPUSH
4365: LD_INT 1
4367: PPUSH
4368: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4372: LD_INT 73
4374: PPUSH
4375: LD_VAR 0 2
4379: PPUSH
4380: LD_INT 1
4382: PPUSH
4383: CALL_OW 322
// end ;
4387: GO 4342
4389: POP
4390: POP
// end ;
4391: LD_VAR 0 1
4395: RET
// function prepare_sides ; var i , orig , pos ; begin
4396: LD_INT 0
4398: PPUSH
4399: PPUSH
4400: PPUSH
4401: PPUSH
// global_units := [ ] ;
4402: LD_ADDR_LOC 2
4406: PUSH
4407: EMPTY
4408: ST_TO_ADDR
// global_defined := false ;
4409: LD_ADDR_LOC 3
4413: PUSH
4414: LD_INT 0
4416: ST_TO_ADDR
// CountClassMembers ;
4417: CALL 4936 0 0
// for i := 1 to 8 do
4421: LD_ADDR_VAR 0 2
4425: PUSH
4426: DOUBLE
4427: LD_INT 1
4429: DEC
4430: ST_TO_ADDR
4431: LD_INT 8
4433: PUSH
4434: FOR_TO
4435: IFFALSE 4635
// if Side_Positions [ i ] then
4437: LD_EXP 18
4441: PUSH
4442: LD_VAR 0 2
4446: ARRAY
4447: IFFALSE 4633
// begin pos := Side_Positions [ i ] ;
4449: LD_ADDR_VAR 0 4
4453: PUSH
4454: LD_EXP 18
4458: PUSH
4459: LD_VAR 0 2
4463: ARRAY
4464: ST_TO_ADDR
// if Game_Type in [ 2 , 12 ] then
4465: LD_EXP 56
4469: PUSH
4470: LD_INT 2
4472: PUSH
4473: LD_INT 12
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: IN
4480: IFFALSE 4608
// begin if Game_Type = 12 then
4482: LD_EXP 56
4486: PUSH
4487: LD_INT 12
4489: EQUAL
4490: IFFALSE 4552
// begin prepare_side ( i , pos , Position_Nations [ pos ] ) ;
4492: LD_VAR 0 2
4496: PPUSH
4497: LD_VAR 0 4
4501: PPUSH
4502: LD_EXP 21
4506: PUSH
4507: LD_VAR 0 4
4511: ARRAY
4512: PPUSH
4513: CALL 3008 0 3
// prepare_side ( i , pos + 1 , Position_Nations [ pos + 1 ] ) end else
4517: LD_VAR 0 2
4521: PPUSH
4522: LD_VAR 0 4
4526: PUSH
4527: LD_INT 1
4529: PLUS
4530: PPUSH
4531: LD_EXP 21
4535: PUSH
4536: LD_VAR 0 4
4540: PUSH
4541: LD_INT 1
4543: PLUS
4544: ARRAY
4545: PPUSH
4546: CALL 3008 0 3
4550: GO 4606
// begin prepare_side ( i , pos , Side_Nations [ i ] ) ;
4552: LD_VAR 0 2
4556: PPUSH
4557: LD_VAR 0 4
4561: PPUSH
4562: LD_EXP 19
4566: PUSH
4567: LD_VAR 0 2
4571: ARRAY
4572: PPUSH
4573: CALL 3008 0 3
// prepare_side ( i , pos + 1 , Side_Nations [ i ] ) ;
4577: LD_VAR 0 2
4581: PPUSH
4582: LD_VAR 0 4
4586: PUSH
4587: LD_INT 1
4589: PLUS
4590: PPUSH
4591: LD_EXP 19
4595: PUSH
4596: LD_VAR 0 2
4600: ARRAY
4601: PPUSH
4602: CALL 3008 0 3
// end ; end else
4606: GO 4633
// prepare_side ( i , pos , Side_Nations [ i ] ) ;
4608: LD_VAR 0 2
4612: PPUSH
4613: LD_VAR 0 4
4617: PPUSH
4618: LD_EXP 19
4622: PUSH
4623: LD_VAR 0 2
4627: ARRAY
4628: PPUSH
4629: CALL 3008 0 3
// end ;
4633: GO 4434
4635: POP
4636: POP
// end ;
4637: LD_VAR 0 1
4641: RET
// function Modify_Nations ; var list , west , east , i ; begin
4642: LD_INT 0
4644: PPUSH
4645: PPUSH
4646: PPUSH
4647: PPUSH
4648: PPUSH
// list := [ ] ;
4649: LD_ADDR_VAR 0 2
4653: PUSH
4654: EMPTY
4655: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
4656: LD_ADDR_VAR 0 5
4660: PUSH
4661: DOUBLE
4662: LD_INT 1
4664: DEC
4665: ST_TO_ADDR
4666: LD_EXP 18
4670: PUSH
4671: LD_INT 0
4673: PLUS
4674: PUSH
4675: FOR_TO
4676: IFFALSE 4894
// if side_positions [ i ] = 1 then
4678: LD_EXP 18
4682: PUSH
4683: LD_VAR 0 5
4687: ARRAY
4688: PUSH
4689: LD_INT 1
4691: EQUAL
4692: IFFALSE 4786
// case side_nations [ i ] of 1 :
4694: LD_EXP 19
4698: PUSH
4699: LD_VAR 0 5
4703: ARRAY
4704: PUSH
4705: LD_INT 1
4707: DOUBLE
4708: EQUAL
4709: IFTRUE 4713
4711: GO 4731
4713: POP
// west := [ 1 , 2 ] ; 2 :
4714: LD_ADDR_VAR 0 3
4718: PUSH
4719: LD_INT 1
4721: PUSH
4722: LD_INT 2
4724: PUSH
4725: EMPTY
4726: LIST
4727: LIST
4728: ST_TO_ADDR
4729: GO 4784
4731: LD_INT 2
4733: DOUBLE
4734: EQUAL
4735: IFTRUE 4739
4737: GO 4757
4739: POP
// west := [ 2 , 3 ] ; 3 :
4740: LD_ADDR_VAR 0 3
4744: PUSH
4745: LD_INT 2
4747: PUSH
4748: LD_INT 3
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: ST_TO_ADDR
4755: GO 4784
4757: LD_INT 3
4759: DOUBLE
4760: EQUAL
4761: IFTRUE 4765
4763: GO 4783
4765: POP
// west := [ 3 , 1 ] ; end else
4766: LD_ADDR_VAR 0 3
4770: PUSH
4771: LD_INT 3
4773: PUSH
4774: LD_INT 1
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: ST_TO_ADDR
4781: GO 4784
4783: POP
4784: GO 4892
// if side_positions [ i ] = 3 then
4786: LD_EXP 18
4790: PUSH
4791: LD_VAR 0 5
4795: ARRAY
4796: PUSH
4797: LD_INT 3
4799: EQUAL
4800: IFFALSE 4892
// case side_nations [ i ] of 1 :
4802: LD_EXP 19
4806: PUSH
4807: LD_VAR 0 5
4811: ARRAY
4812: PUSH
4813: LD_INT 1
4815: DOUBLE
4816: EQUAL
4817: IFTRUE 4821
4819: GO 4839
4821: POP
// east := [ 1 , 2 ] ; 2 :
4822: LD_ADDR_VAR 0 4
4826: PUSH
4827: LD_INT 1
4829: PUSH
4830: LD_INT 2
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: ST_TO_ADDR
4837: GO 4892
4839: LD_INT 2
4841: DOUBLE
4842: EQUAL
4843: IFTRUE 4847
4845: GO 4865
4847: POP
// east := [ 2 , 3 ] ; 3 :
4848: LD_ADDR_VAR 0 4
4852: PUSH
4853: LD_INT 2
4855: PUSH
4856: LD_INT 3
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: ST_TO_ADDR
4863: GO 4892
4865: LD_INT 3
4867: DOUBLE
4868: EQUAL
4869: IFTRUE 4873
4871: GO 4891
4873: POP
// east := [ 3 , 1 ] ; end ;
4874: LD_ADDR_VAR 0 4
4878: PUSH
4879: LD_INT 3
4881: PUSH
4882: LD_INT 1
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: ST_TO_ADDR
4889: GO 4892
4891: POP
4892: GO 4675
4894: POP
4895: POP
// Position_Nations := west ^ east ^ [ 0 , 0 , 0 , 0 ] ;
4896: LD_ADDR_EXP 21
4900: PUSH
4901: LD_VAR 0 3
4905: PUSH
4906: LD_VAR 0 4
4910: ADD
4911: PUSH
4912: LD_INT 0
4914: PUSH
4915: LD_INT 0
4917: PUSH
4918: LD_INT 0
4920: PUSH
4921: LD_INT 0
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: ADD
4930: ST_TO_ADDR
// end ;
4931: LD_VAR 0 1
4935: RET
// function CountClassMembers ; var Mode ; begin
4936: LD_INT 0
4938: PPUSH
4939: PPUSH
// if No_Mechs then
4940: LD_EXP 72
4944: IFFALSE 4956
// Mode := 2 else
4946: LD_ADDR_VAR 0 2
4950: PUSH
4951: LD_INT 2
4953: ST_TO_ADDR
4954: GO 4964
// Mode := 1 ;
4956: LD_ADDR_VAR 0 2
4960: PUSH
4961: LD_INT 1
4963: ST_TO_ADDR
// neng := number_of_people ;
4964: LD_ADDR_LOC 5
4968: PUSH
4969: LD_EXP 6
4973: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4974: LD_ADDR_LOC 8
4978: PUSH
4979: LD_LOC 5
4983: PUSH
4984: LD_INT 4
4986: PUSH
4987: LD_INT 3
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: PUSH
4994: LD_VAR 0 2
4998: ARRAY
4999: DIV
5000: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
5001: LD_LOC 8
5005: PUSH
5006: LD_EXP 5
5010: LESS
5011: IFFALSE 5023
// nsol := number_of_breastworks ;
5013: LD_ADDR_LOC 8
5017: PUSH
5018: LD_EXP 5
5022: ST_TO_ADDR
// neng := neng - nsol ;
5023: LD_ADDR_LOC 5
5027: PUSH
5028: LD_LOC 5
5032: PUSH
5033: LD_LOC 8
5037: MINUS
5038: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
5039: LD_ADDR_LOC 6
5043: PUSH
5044: LD_LOC 5
5048: PUSH
5049: LD_INT 3
5051: PUSH
5052: LD_INT 2
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PUSH
5059: LD_VAR 0 2
5063: ARRAY
5064: DIV
5065: ST_TO_ADDR
// if ( nsci < 1 ) then
5066: LD_LOC 6
5070: PUSH
5071: LD_INT 1
5073: LESS
5074: IFFALSE 5084
// nsci := 1 ;
5076: LD_ADDR_LOC 6
5080: PUSH
5081: LD_INT 1
5083: ST_TO_ADDR
// neng := neng - nsci ;
5084: LD_ADDR_LOC 5
5088: PUSH
5089: LD_LOC 5
5093: PUSH
5094: LD_LOC 6
5098: MINUS
5099: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5100: LD_ADDR_LOC 7
5104: PUSH
5105: LD_LOC 5
5109: PUSH
5110: LD_INT 2
5112: DIV
5113: PUSH
5114: LD_INT 0
5116: PUSH
5117: EMPTY
5118: LIST
5119: LIST
5120: PUSH
5121: LD_VAR 0 2
5125: ARRAY
5126: ST_TO_ADDR
// neng := neng - nmech ;
5127: LD_ADDR_LOC 5
5131: PUSH
5132: LD_LOC 5
5136: PUSH
5137: LD_LOC 7
5141: MINUS
5142: ST_TO_ADDR
// if ( neng < 1 ) then
5143: LD_LOC 5
5147: PUSH
5148: LD_INT 1
5150: LESS
5151: IFFALSE 5161
// neng := 1 ;
5153: LD_ADDR_LOC 5
5157: PUSH
5158: LD_INT 1
5160: ST_TO_ADDR
// end ;
5161: LD_VAR 0 1
5165: RET
// function Init_Win_Condition ; begin
5166: LD_INT 0
5168: PPUSH
// disable ( 98 ) ;
5169: LD_INT 98
5171: DISABLE_MARKED
// disable ( 99 ) ;
5172: LD_INT 99
5174: DISABLE_MARKED
// if Team_Game then
5175: LD_EXP 20
5179: IFFALSE 5186
// enable ( 98 ) else
5181: LD_INT 98
5183: ENABLE_MARKED
5184: GO 5189
// enable ( 99 ) ;
5186: LD_INT 99
5188: ENABLE_MARKED
// end ;
5189: LD_VAR 0 1
5193: RET
// starting begin DE_Triggers ;
5194: CALL 8650 0 0
// mp_selectmsg := true ;
5198: LD_ADDR_OWVAR 13
5202: PUSH
5203: LD_INT 1
5205: ST_TO_ADDR
// if ( game_type <> 1 ) and ( game_type <> 3 ) then
5206: LD_EXP 56
5210: PUSH
5211: LD_INT 1
5213: NONEQUAL
5214: PUSH
5215: LD_EXP 56
5219: PUSH
5220: LD_INT 3
5222: NONEQUAL
5223: AND
5224: IFFALSE 5230
// read_multiplayer_and_game_parameters ;
5226: CALL 976 0 0
// case Game_Type of 1 , 3 :
5230: LD_EXP 56
5234: PUSH
5235: LD_INT 1
5237: DOUBLE
5238: EQUAL
5239: IFTRUE 5249
5241: LD_INT 3
5243: DOUBLE
5244: EQUAL
5245: IFTRUE 5249
5247: GO 5261
5249: POP
// begin enable ( 19 ) ;
5250: LD_INT 19
5252: ENABLE_MARKED
// starting_ctf ;
5253: CALL 9289 0 0
// exit ;
5257: GO 5429
// end ; 12 :
5259: GO 5277
5261: LD_INT 12
5263: DOUBLE
5264: EQUAL
5265: IFTRUE 5269
5267: GO 5276
5269: POP
// Modify_Nations ; end ;
5270: CALL 4642 0 0
5274: GO 5277
5276: POP
// enable ( 55 ) ;
5277: LD_INT 55
5279: ENABLE_MARKED
// AnimateTrees ( true ) ;
5280: LD_INT 1
5282: PPUSH
5283: CALL_OW 573
// init_map ;
5287: CALL 276 0 0
// set_shared_visions_and_alliances ;
5291: CALL 2184 0 0
// prepare_sides ;
5295: CALL 4396 0 0
// InitLimits ;
5299: CALL 18043 0 0
// ShowTimer ;
5303: CALL 18980 0 0
// init_shipments ;
5307: CALL 5430 0 0
// init_respawn ;
5311: CALL 5934 0 0
// InitApeman ;
5315: CALL 7469 0 0
// music_nat := Side_Nations [ your_side ] ;
5319: LD_ADDR_OWVAR 71
5323: PUSH
5324: LD_EXP 19
5328: PUSH
5329: LD_OWVAR 2
5333: ARRAY
5334: ST_TO_ADDR
// if IAmSpec then
5335: CALL_OW 531
5339: IFFALSE 5375
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
5341: LD_INT 0
5343: PPUSH
5344: LD_INT 0
5346: PPUSH
5347: LD_OWVAR 2
5351: PPUSH
5352: LD_INT 32767
5354: NEG
5355: PPUSH
5356: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
5360: LD_INT 104
5362: PPUSH
5363: LD_INT 69
5365: PPUSH
5366: CALL_OW 86
// enable ( 400 ) ;
5370: LD_INT 400
5372: ENABLE_MARKED
// end else
5373: GO 5429
// begin ResetFog ;
5375: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5379: LD_EXP 26
5383: PUSH
5384: LD_EXP 18
5388: PUSH
5389: LD_OWVAR 2
5393: ARRAY
5394: ARRAY
5395: PUSH
5396: LD_INT 1
5398: ARRAY
5399: PPUSH
5400: LD_EXP 26
5404: PUSH
5405: LD_EXP 18
5409: PUSH
5410: LD_OWVAR 2
5414: ARRAY
5415: ARRAY
5416: PUSH
5417: LD_INT 2
5419: ARRAY
5420: PPUSH
5421: CALL_OW 86
// Init_Win_Condition ;
5425: CALL 5166 0 0
// end ; end ; end_of_file
5429: END
// var shipment , tictac ; export function init_shipments ; begin
5430: LD_INT 0
5432: PPUSH
// shipment := Rand ( 0 , 1 ) ;
5433: LD_ADDR_LOC 9
5437: PUSH
5438: LD_INT 0
5440: PPUSH
5441: LD_INT 1
5443: PPUSH
5444: CALL_OW 12
5448: ST_TO_ADDR
// tictac := 0 ;
5449: LD_ADDR_LOC 10
5453: PUSH
5454: LD_INT 0
5456: ST_TO_ADDR
// end ;
5457: LD_VAR 0 1
5461: RET
// every 0 0$5 + 0 0$1.1 marked 55 do var d ;
5462: GO 5464
5464: DISABLE
5465: LD_INT 0
5467: PPUSH
// begin case tick of 1 .. 1 1$0 :
5468: LD_OWVAR 1
5472: PUSH
5473: LD_INT 1
5475: DOUBLE
5476: GREATEREQUAL
5477: IFFALSE 5485
5479: LD_INT 2100
5481: DOUBLE
5482: LESSEQUAL
5483: IFTRUE 5487
5485: GO 5498
5487: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5488: LD_ADDR_VAR 0 1
5492: PUSH
5493: LD_INT 150
5495: ST_TO_ADDR
5496: GO 5681
5498: LD_INT 2100
5500: PUSH
5501: LD_INT 1
5503: PLUS
5504: DOUBLE
5505: GREATEREQUAL
5506: IFFALSE 5514
5508: LD_INT 10500
5510: DOUBLE
5511: LESSEQUAL
5512: IFTRUE 5516
5514: GO 5527
5516: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5517: LD_ADDR_VAR 0 1
5521: PUSH
5522: LD_INT 100
5524: ST_TO_ADDR
5525: GO 5681
5527: LD_INT 10500
5529: PUSH
5530: LD_INT 1
5532: PLUS
5533: DOUBLE
5534: GREATEREQUAL
5535: IFFALSE 5543
5537: LD_INT 21000
5539: DOUBLE
5540: LESSEQUAL
5541: IFTRUE 5545
5543: GO 5556
5545: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5546: LD_ADDR_VAR 0 1
5550: PUSH
5551: LD_INT 90
5553: ST_TO_ADDR
5554: GO 5681
5556: LD_INT 21000
5558: PUSH
5559: LD_INT 1
5561: PLUS
5562: DOUBLE
5563: GREATEREQUAL
5564: IFFALSE 5572
5566: LD_INT 42000
5568: DOUBLE
5569: LESSEQUAL
5570: IFTRUE 5574
5572: GO 5585
5574: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5575: LD_ADDR_VAR 0 1
5579: PUSH
5580: LD_INT 70
5582: ST_TO_ADDR
5583: GO 5681
5585: LD_INT 42000
5587: PUSH
5588: LD_INT 1
5590: PLUS
5591: DOUBLE
5592: GREATEREQUAL
5593: IFFALSE 5601
5595: LD_INT 63000
5597: DOUBLE
5598: LESSEQUAL
5599: IFTRUE 5603
5601: GO 5614
5603: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5604: LD_ADDR_VAR 0 1
5608: PUSH
5609: LD_INT 60
5611: ST_TO_ADDR
5612: GO 5681
5614: LD_INT 63000
5616: PUSH
5617: LD_INT 1
5619: PLUS
5620: DOUBLE
5621: GREATEREQUAL
5622: IFFALSE 5630
5624: LD_INT 105000
5626: DOUBLE
5627: LESSEQUAL
5628: IFTRUE 5632
5630: GO 5643
5632: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5633: LD_ADDR_VAR 0 1
5637: PUSH
5638: LD_INT 35
5640: ST_TO_ADDR
5641: GO 5681
5643: LD_INT 105000
5645: PUSH
5646: LD_INT 1
5648: PLUS
5649: DOUBLE
5650: GREATEREQUAL
5651: IFFALSE 5659
5653: LD_INT 630000
5655: DOUBLE
5656: LESSEQUAL
5657: IFTRUE 5661
5659: GO 5672
5661: POP
// d := 20 ; else
5662: LD_ADDR_VAR 0 1
5666: PUSH
5667: LD_INT 20
5669: ST_TO_ADDR
5670: GO 5681
5672: POP
// d := 0 ; end ;
5673: LD_ADDR_VAR 0 1
5677: PUSH
5678: LD_INT 0
5680: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5681: LD_INT 1
5683: PPUSH
5684: LD_INT 10000
5686: PPUSH
5687: CALL_OW 12
5691: PUSH
5692: LD_VAR 0 1
5696: PUSH
5697: LD_EXP 10
5701: MUL
5702: LESSEQUAL
5703: IFFALSE 5757
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5705: LD_INT 1
5707: PPUSH
5708: LD_INT 140
5710: PPUSH
5711: CALL_OW 12
5715: PPUSH
5716: CALL_OW 67
// shipment := ( shipment + 1 ) mod 2 ;
5720: LD_ADDR_LOC 9
5724: PUSH
5725: LD_LOC 9
5729: PUSH
5730: LD_INT 1
5732: PLUS
5733: PUSH
5734: LD_INT 2
5736: MOD
5737: ST_TO_ADDR
// CreateCratesArea ( 5 , west_side + shipment , true ) ;
5738: LD_INT 5
5740: PPUSH
5741: LD_INT 8
5743: PUSH
5744: LD_LOC 9
5748: PLUS
5749: PPUSH
5750: LD_INT 1
5752: PPUSH
5753: CALL_OW 55
// end ; enable ;
5757: ENABLE
// end ;
5758: PPOPN 1
5760: END
// every 0 0$10 trigger TICK > ( ( 2 2$0 * tictac ) + tictac * ( 1 1$30 - shipments_density * ( 0 0$2 ) ) ) marked 55 do var i , amount , is_in ;
5761: LD_OWVAR 1
5765: PUSH
5766: LD_INT 4200
5768: PUSH
5769: LD_LOC 10
5773: MUL
5774: PUSH
5775: LD_LOC 10
5779: PUSH
5780: LD_INT 3150
5782: PUSH
5783: LD_EXP 10
5787: PUSH
5788: LD_INT 70
5790: MUL
5791: MINUS
5792: MUL
5793: PLUS
5794: GREATER
5795: IFFALSE 5931
5797: GO 5799
5799: DISABLE
5800: LD_INT 0
5802: PPUSH
5803: PPUSH
5804: PPUSH
// begin tictac := tictac + 1 ;
5805: LD_ADDR_LOC 10
5809: PUSH
5810: LD_LOC 10
5814: PUSH
5815: LD_INT 1
5817: PLUS
5818: ST_TO_ADDR
// amount := Rand ( 3 , 5 ) ;
5819: LD_ADDR_VAR 0 2
5823: PUSH
5824: LD_INT 3
5826: PPUSH
5827: LD_INT 5
5829: PPUSH
5830: CALL_OW 12
5834: ST_TO_ADDR
// for i = 0 to 3 do
5835: LD_ADDR_VAR 0 1
5839: PUSH
5840: DOUBLE
5841: LD_INT 0
5843: DEC
5844: ST_TO_ADDR
5845: LD_INT 3
5847: PUSH
5848: FOR_TO
5849: IFFALSE 5928
// begin is_in := GetResourceArea ( west_side + i , mat_cans ) ;
5851: LD_ADDR_VAR 0 3
5855: PUSH
5856: LD_INT 8
5858: PUSH
5859: LD_VAR 0 1
5863: PLUS
5864: PPUSH
5865: LD_INT 1
5867: PPUSH
5868: CALL_OW 287
5872: ST_TO_ADDR
// if ( is_in < 500 ) or ( Rand ( 1 , 10 ) > ( is_in div 100 ) ) then
5873: LD_VAR 0 3
5877: PUSH
5878: LD_INT 500
5880: LESS
5881: PUSH
5882: LD_INT 1
5884: PPUSH
5885: LD_INT 10
5887: PPUSH
5888: CALL_OW 12
5892: PUSH
5893: LD_VAR 0 3
5897: PUSH
5898: LD_INT 100
5900: DIV
5901: GREATER
5902: OR
5903: IFFALSE 5926
// CreateCratesArea ( amount , nw + i , true ) ;
5905: LD_VAR 0 2
5909: PPUSH
5910: LD_INT 12
5912: PUSH
5913: LD_VAR 0 1
5917: PLUS
5918: PPUSH
5919: LD_INT 1
5921: PPUSH
5922: CALL_OW 55
// end ;
5926: GO 5848
5928: POP
5929: POP
// enable ;
5930: ENABLE
// end ; end_of_file
5931: PPOPN 3
5933: END
// var respawn_queue , nation_queue ; export function init_respawn ; begin
5934: LD_INT 0
5936: PPUSH
// if not def_people_respawning then
5937: LD_EXP 68
5941: NOT
5942: IFFALSE 5946
// exit ;
5944: GO 6049
// respawn_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5946: LD_ADDR_LOC 11
5950: PUSH
5951: LD_INT 0
5953: PUSH
5954: LD_INT 0
5956: PUSH
5957: LD_INT 0
5959: PUSH
5960: LD_INT 0
5962: PUSH
5963: LD_INT 0
5965: PUSH
5966: LD_INT 0
5968: PUSH
5969: LD_INT 0
5971: PUSH
5972: LD_INT 0
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: ST_TO_ADDR
// nation_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5985: LD_ADDR_LOC 12
5989: PUSH
5990: LD_INT 0
5992: PUSH
5993: LD_INT 0
5995: PUSH
5996: LD_INT 0
5998: PUSH
5999: LD_INT 0
6001: PUSH
6002: LD_INT 0
6004: PUSH
6005: LD_INT 0
6007: PUSH
6008: LD_INT 0
6010: PUSH
6011: LD_INT 0
6013: PUSH
6014: EMPTY
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: ST_TO_ADDR
// if Game_Type in [ 2 , 12 ] then
6024: LD_EXP 56
6028: PUSH
6029: LD_INT 2
6031: PUSH
6032: LD_INT 12
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: IN
6039: IFFALSE 6046
// enable ( 41 ) else
6041: LD_INT 41
6043: ENABLE_MARKED
6044: GO 6049
// enable ( 40 ) ;
6046: LD_INT 40
6048: ENABLE_MARKED
// end ;
6049: LD_VAR 0 1
6053: RET
// every 0 0$10 marked 40 do var list , time , side ;
6054: GO 6056
6056: DISABLE
6057: LD_INT 0
6059: PPUSH
6060: PPUSH
6061: PPUSH
// begin for side = 1 to Side_Positions do
6062: LD_ADDR_VAR 0 3
6066: PUSH
6067: DOUBLE
6068: LD_INT 1
6070: DEC
6071: ST_TO_ADDR
6072: LD_EXP 18
6076: PUSH
6077: FOR_TO
6078: IFFALSE 6255
// if Side_Positions [ side ] then
6080: LD_EXP 18
6084: PUSH
6085: LD_VAR 0 3
6089: ARRAY
6090: IFFALSE 6253
// begin list := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6092: LD_ADDR_VAR 0 1
6096: PUSH
6097: LD_INT 22
6099: PUSH
6100: LD_VAR 0 3
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: PUSH
6109: LD_INT 21
6111: PUSH
6112: LD_INT 1
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: PUSH
6119: LD_INT 3
6121: PUSH
6122: LD_INT 23
6124: PUSH
6125: LD_INT 0
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: PUSH
6132: EMPTY
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: PPUSH
6138: CALL_OW 69
6142: ST_TO_ADDR
// if ( list < number_of_people ) and ( not respawn_queue [ side ] ) then
6143: LD_VAR 0 1
6147: PUSH
6148: LD_EXP 6
6152: LESS
6153: PUSH
6154: LD_LOC 11
6158: PUSH
6159: LD_VAR 0 3
6163: ARRAY
6164: NOT
6165: AND
6166: IFFALSE 6193
// respawn_queue := Replace ( respawn_queue , side , TICK ) ;
6168: LD_ADDR_LOC 11
6172: PUSH
6173: LD_LOC 11
6177: PPUSH
6178: LD_VAR 0 3
6182: PPUSH
6183: LD_OWVAR 1
6187: PPUSH
6188: CALL_OW 1
6192: ST_TO_ADDR
// time := TICK - respawn_queue [ side ] ;
6193: LD_ADDR_VAR 0 2
6197: PUSH
6198: LD_OWVAR 1
6202: PUSH
6203: LD_LOC 11
6207: PUSH
6208: LD_VAR 0 3
6212: ARRAY
6213: MINUS
6214: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6215: LD_LOC 11
6219: PUSH
6220: LD_VAR 0 3
6224: ARRAY
6225: PUSH
6226: LD_VAR 0 2
6230: PUSH
6231: LD_EXP 13
6235: GREATER
6236: AND
6237: IFFALSE 6253
// respawn_character ( side , time ) ;
6239: LD_VAR 0 3
6243: PPUSH
6244: LD_VAR 0 2
6248: PPUSH
6249: CALL 6261 0 2
// end ;
6253: GO 6077
6255: POP
6256: POP
// enable ;
6257: ENABLE
// end ;
6258: PPOPN 3
6260: END
// function respawn_character ( side , time ) ; var dep ; begin
6261: LD_INT 0
6263: PPUSH
6264: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6265: LD_INT 0
6267: PPUSH
6268: LD_INT 1
6270: PPUSH
6271: CALL_OW 12
6275: PUSH
6276: LD_VAR 0 2
6280: PUSH
6281: LD_EXP 14
6285: LESS
6286: AND
6287: IFFALSE 6291
// exit ;
6289: GO 6498
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6291: LD_ADDR_VAR 0 4
6295: PUSH
6296: LD_INT 22
6298: PUSH
6299: LD_VAR 0 1
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: PUSH
6308: LD_INT 2
6310: PUSH
6311: LD_INT 30
6313: PUSH
6314: LD_INT 0
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: PUSH
6321: LD_INT 30
6323: PUSH
6324: LD_INT 1
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: LIST
6335: PUSH
6336: LD_INT 50
6338: PUSH
6339: EMPTY
6340: LIST
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: LIST
6346: PPUSH
6347: CALL_OW 69
6351: ST_TO_ADDR
// if not dep then
6352: LD_VAR 0 4
6356: NOT
6357: IFFALSE 6363
// exit else
6359: GO 6498
6361: GO 6387
// dep := dep [ Rand ( 1 , dep ) ] ;
6363: LD_ADDR_VAR 0 4
6367: PUSH
6368: LD_VAR 0 4
6372: PUSH
6373: LD_INT 1
6375: PPUSH
6376: LD_VAR 0 4
6380: PPUSH
6381: CALL_OW 12
6385: ARRAY
6386: ST_TO_ADDR
// uc_side := side ;
6387: LD_ADDR_OWVAR 20
6391: PUSH
6392: LD_VAR 0 1
6396: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6397: LD_ADDR_OWVAR 21
6401: PUSH
6402: LD_EXP 19
6406: PUSH
6407: LD_VAR 0 1
6411: ARRAY
6412: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6413: LD_INT 0
6415: PPUSH
6416: LD_INT 0
6418: PPUSH
6419: LD_EXP 7
6423: PUSH
6424: LD_INT 2
6426: DIV
6427: PPUSH
6428: CALL_OW 380
// hc_importance := 0 ;
6432: LD_ADDR_OWVAR 32
6436: PUSH
6437: LD_INT 0
6439: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
6440: CALL_OW 44
6444: PPUSH
6445: LD_VAR 0 4
6449: PPUSH
6450: CALL_OW 250
6454: PPUSH
6455: LD_VAR 0 4
6459: PPUSH
6460: CALL_OW 251
6464: PPUSH
6465: LD_INT 10
6467: PPUSH
6468: LD_INT 1
6470: PPUSH
6471: CALL_OW 50
// respawn_queue := Replace ( respawn_queue , side , 0 ) ;
6475: LD_ADDR_LOC 11
6479: PUSH
6480: LD_LOC 11
6484: PPUSH
6485: LD_VAR 0 1
6489: PPUSH
6490: LD_INT 0
6492: PPUSH
6493: CALL_OW 1
6497: ST_TO_ADDR
// end ;
6498: LD_VAR 0 3
6502: RET
// every 0 0$10 marked 41 do var i , list , time , nation , side , limit ;
6503: GO 6505
6505: DISABLE
6506: LD_INT 0
6508: PPUSH
6509: PPUSH
6510: PPUSH
6511: PPUSH
6512: PPUSH
6513: PPUSH
// begin if Game_Type = 12 then
6514: LD_EXP 56
6518: PUSH
6519: LD_INT 12
6521: EQUAL
6522: IFFALSE 6536
// limit := number_of_people else
6524: LD_ADDR_VAR 0 6
6528: PUSH
6529: LD_EXP 6
6533: ST_TO_ADDR
6534: GO 6550
// limit := 2 * number_of_people ;
6536: LD_ADDR_VAR 0 6
6540: PUSH
6541: LD_INT 2
6543: PUSH
6544: LD_EXP 6
6548: MUL
6549: ST_TO_ADDR
// for i = 1 to 4 do
6550: LD_ADDR_VAR 0 1
6554: PUSH
6555: DOUBLE
6556: LD_INT 1
6558: DEC
6559: ST_TO_ADDR
6560: LD_INT 4
6562: PUSH
6563: FOR_TO
6564: IFFALSE 6856
// begin side := GetSidePositions ( [ 1 , 1 , 3 , 3 ] [ i ] ) ;
6566: LD_ADDR_VAR 0 5
6570: PUSH
6571: LD_INT 1
6573: PUSH
6574: LD_INT 1
6576: PUSH
6577: LD_INT 3
6579: PUSH
6580: LD_INT 3
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: PUSH
6589: LD_VAR 0 1
6593: ARRAY
6594: PPUSH
6595: CALL 7198 0 1
6599: ST_TO_ADDR
// if Game_Type = 12 then
6600: LD_EXP 56
6604: PUSH
6605: LD_INT 12
6607: EQUAL
6608: IFFALSE 6628
// nation := Position_Nations [ i ] else
6610: LD_ADDR_VAR 0 4
6614: PUSH
6615: LD_EXP 21
6619: PUSH
6620: LD_VAR 0 1
6624: ARRAY
6625: ST_TO_ADDR
6626: GO 6644
// nation := Side_Nations [ side ] ;
6628: LD_ADDR_VAR 0 4
6632: PUSH
6633: LD_EXP 19
6637: PUSH
6638: LD_VAR 0 5
6642: ARRAY
6643: ST_TO_ADDR
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_nation , nation ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6644: LD_ADDR_VAR 0 2
6648: PUSH
6649: LD_INT 22
6651: PUSH
6652: LD_VAR 0 5
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: PUSH
6661: LD_INT 23
6663: PUSH
6664: LD_VAR 0 4
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PUSH
6673: LD_INT 21
6675: PUSH
6676: LD_INT 1
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: PUSH
6683: LD_INT 3
6685: PUSH
6686: LD_INT 23
6688: PUSH
6689: LD_INT 0
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: PPUSH
6703: CALL_OW 69
6707: ST_TO_ADDR
// if ( list < limit ) and ( not respawn_queue [ side ] ) then
6708: LD_VAR 0 2
6712: PUSH
6713: LD_VAR 0 6
6717: LESS
6718: PUSH
6719: LD_LOC 11
6723: PUSH
6724: LD_VAR 0 5
6728: ARRAY
6729: NOT
6730: AND
6731: IFFALSE 6783
// begin respawn_queue = Replace ( respawn_queue , side , TICK ) ;
6733: LD_ADDR_LOC 11
6737: PUSH
6738: LD_LOC 11
6742: PPUSH
6743: LD_VAR 0 5
6747: PPUSH
6748: LD_OWVAR 1
6752: PPUSH
6753: CALL_OW 1
6757: ST_TO_ADDR
// nation_queue = Replace ( nation_queue , side , nation ) ;
6758: LD_ADDR_LOC 12
6762: PUSH
6763: LD_LOC 12
6767: PPUSH
6768: LD_VAR 0 5
6772: PPUSH
6773: LD_VAR 0 4
6777: PPUSH
6778: CALL_OW 1
6782: ST_TO_ADDR
// end ; time := TICK - respawn_queue [ side ] ;
6783: LD_ADDR_VAR 0 3
6787: PUSH
6788: LD_OWVAR 1
6792: PUSH
6793: LD_LOC 11
6797: PUSH
6798: LD_VAR 0 5
6802: ARRAY
6803: MINUS
6804: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6805: LD_LOC 11
6809: PUSH
6810: LD_VAR 0 5
6814: ARRAY
6815: PUSH
6816: LD_VAR 0 3
6820: PUSH
6821: LD_EXP 13
6825: GREATER
6826: AND
6827: IFFALSE 6854
// respawn_character_nation ( side , time , nation_queue [ side ] ) ;
6829: LD_VAR 0 5
6833: PPUSH
6834: LD_VAR 0 3
6838: PPUSH
6839: LD_LOC 12
6843: PUSH
6844: LD_VAR 0 5
6848: ARRAY
6849: PPUSH
6850: CALL 6862 0 3
// end ;
6854: GO 6563
6856: POP
6857: POP
// enable ;
6858: ENABLE
// end ;
6859: PPOPN 6
6861: END
// function respawn_character_nation ( side , time , nation ) ; var dep ; begin
6862: LD_INT 0
6864: PPUSH
6865: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6866: LD_INT 0
6868: PPUSH
6869: LD_INT 1
6871: PPUSH
6872: CALL_OW 12
6876: PUSH
6877: LD_VAR 0 2
6881: PUSH
6882: LD_EXP 14
6886: LESS
6887: AND
6888: IFFALSE 6892
// exit ;
6890: GO 7193
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_nation , nation ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6892: LD_ADDR_VAR 0 5
6896: PUSH
6897: LD_INT 22
6899: PUSH
6900: LD_VAR 0 1
6904: PUSH
6905: EMPTY
6906: LIST
6907: LIST
6908: PUSH
6909: LD_INT 23
6911: PUSH
6912: LD_VAR 0 3
6916: PUSH
6917: EMPTY
6918: LIST
6919: LIST
6920: PUSH
6921: LD_INT 2
6923: PUSH
6924: LD_INT 30
6926: PUSH
6927: LD_INT 0
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: PUSH
6934: LD_INT 30
6936: PUSH
6937: LD_INT 1
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: LIST
6948: PUSH
6949: LD_INT 50
6951: PUSH
6952: EMPTY
6953: LIST
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: PPUSH
6961: CALL_OW 69
6965: ST_TO_ADDR
// if not dep then
6966: LD_VAR 0 5
6970: NOT
6971: IFFALSE 7034
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6973: LD_ADDR_VAR 0 5
6977: PUSH
6978: LD_INT 22
6980: PUSH
6981: LD_VAR 0 1
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: LD_INT 2
6992: PUSH
6993: LD_INT 30
6995: PUSH
6996: LD_INT 0
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: LD_INT 30
7005: PUSH
7006: LD_INT 1
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: LIST
7017: PUSH
7018: LD_INT 50
7020: PUSH
7021: EMPTY
7022: LIST
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: LIST
7028: PPUSH
7029: CALL_OW 69
7033: ST_TO_ADDR
// if not dep then
7034: LD_VAR 0 5
7038: NOT
7039: IFFALSE 7045
// exit else
7041: GO 7193
7043: GO 7069
// dep := dep [ Rand ( 1 , dep ) ] ;
7045: LD_ADDR_VAR 0 5
7049: PUSH
7050: LD_VAR 0 5
7054: PUSH
7055: LD_INT 1
7057: PPUSH
7058: LD_VAR 0 5
7062: PPUSH
7063: CALL_OW 12
7067: ARRAY
7068: ST_TO_ADDR
// uc_side := side ;
7069: LD_ADDR_OWVAR 20
7073: PUSH
7074: LD_VAR 0 1
7078: ST_TO_ADDR
// uc_nation := nation ;
7079: LD_ADDR_OWVAR 21
7083: PUSH
7084: LD_VAR 0 3
7088: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level ) ;
7089: LD_INT 0
7091: PPUSH
7092: LD_INT 0
7094: PPUSH
7095: LD_EXP 7
7099: PPUSH
7100: CALL_OW 380
// hc_importance := 0 ;
7104: LD_ADDR_OWVAR 32
7108: PUSH
7109: LD_INT 0
7111: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
7112: CALL_OW 44
7116: PPUSH
7117: LD_VAR 0 5
7121: PPUSH
7122: CALL_OW 250
7126: PPUSH
7127: LD_VAR 0 5
7131: PPUSH
7132: CALL_OW 251
7136: PPUSH
7137: LD_INT 10
7139: PPUSH
7140: LD_INT 1
7142: PPUSH
7143: CALL_OW 50
// respawn_queue := Replace ( respawn_queue , side , 0 ) ;
7147: LD_ADDR_LOC 11
7151: PUSH
7152: LD_LOC 11
7156: PPUSH
7157: LD_VAR 0 1
7161: PPUSH
7162: LD_INT 0
7164: PPUSH
7165: CALL_OW 1
7169: ST_TO_ADDR
// nation_queue := Replace ( nation_queue , side , 0 ) ;
7170: LD_ADDR_LOC 12
7174: PUSH
7175: LD_LOC 12
7179: PPUSH
7180: LD_VAR 0 1
7184: PPUSH
7185: LD_INT 0
7187: PPUSH
7188: CALL_OW 1
7192: ST_TO_ADDR
// end ;
7193: LD_VAR 0 4
7197: RET
// function GetSidePositions ( i ) ; var un , side ; begin
7198: LD_INT 0
7200: PPUSH
7201: PPUSH
7202: PPUSH
// side := false ;
7203: LD_ADDR_VAR 0 4
7207: PUSH
7208: LD_INT 0
7210: ST_TO_ADDR
// for un = 1 to Side_Positions do
7211: LD_ADDR_VAR 0 3
7215: PUSH
7216: DOUBLE
7217: LD_INT 1
7219: DEC
7220: ST_TO_ADDR
7221: LD_EXP 18
7225: PUSH
7226: FOR_TO
7227: IFFALSE 7261
// if Side_Positions [ un ] = i then
7229: LD_EXP 18
7233: PUSH
7234: LD_VAR 0 3
7238: ARRAY
7239: PUSH
7240: LD_VAR 0 1
7244: EQUAL
7245: IFFALSE 7259
// begin side := un ;
7247: LD_ADDR_VAR 0 4
7251: PUSH
7252: LD_VAR 0 3
7256: ST_TO_ADDR
// break ;
7257: GO 7261
// end ;
7259: GO 7226
7261: POP
7262: POP
// result := side ;
7263: LD_ADDR_VAR 0 2
7267: PUSH
7268: LD_VAR 0 4
7272: ST_TO_ADDR
// end ; end_of_file
7273: LD_VAR 0 2
7277: RET
// every 20 20$00 trigger apemanNumber do
7278: LD_EXP 30
7282: IFFALSE 7315
7284: GO 7286
7286: DISABLE
// begin enable ;
7287: ENABLE
// if apeLevel >= 8 then
7288: LD_EXP 35
7292: PUSH
7293: LD_INT 8
7295: GREATEREQUAL
7296: IFFALSE 7301
// disable else
7298: DISABLE
7299: GO 7315
// apeLevel := apeLevel + 1 ;
7301: LD_ADDR_EXP 35
7305: PUSH
7306: LD_EXP 35
7310: PUSH
7311: LD_INT 1
7313: PLUS
7314: ST_TO_ADDR
// end ;
7315: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
7316: LD_EXP 30
7320: PUSH
7321: LD_EXP 31
7325: LESS
7326: IFFALSE 7466
7328: GO 7330
7330: DISABLE
7331: LD_INT 0
7333: PPUSH
7334: PPUSH
7335: PPUSH
7336: PPUSH
// begin enable ;
7337: ENABLE
// for i := 1 to apemanPos do
7338: LD_ADDR_VAR 0 1
7342: PUSH
7343: DOUBLE
7344: LD_INT 1
7346: DEC
7347: ST_TO_ADDR
7348: LD_EXP 33
7352: PUSH
7353: FOR_TO
7354: IFFALSE 7464
// begin if apemanPlayerCount [ i ] then
7356: LD_EXP 34
7360: PUSH
7361: LD_VAR 0 1
7365: ARRAY
7366: IFFALSE 7462
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
7368: LD_EXP 34
7372: PUSH
7373: LD_VAR 0 1
7377: ARRAY
7378: PUSH
7379: LD_EXP 33
7383: PUSH
7384: LD_VAR 0 1
7388: ARRAY
7389: GREATER
7390: IFFALSE 7462
// begin ape := PrepareApeman ;
7392: LD_ADDR_VAR 0 2
7396: PUSH
7397: CALL 7969 0 0
7401: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
7402: LD_VAR 0 2
7406: PPUSH
7407: LD_EXP 36
7411: PUSH
7412: LD_VAR 0 1
7416: ARRAY
7417: PPUSH
7418: LD_INT 0
7420: PPUSH
7421: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
7425: LD_ADDR_EXP 33
7429: PUSH
7430: LD_EXP 33
7434: PPUSH
7435: LD_VAR 0 1
7439: PPUSH
7440: LD_EXP 33
7444: PUSH
7445: LD_VAR 0 1
7449: ARRAY
7450: PUSH
7451: LD_VAR 0 2
7455: UNION
7456: PPUSH
7457: CALL_OW 1
7461: ST_TO_ADDR
// end ; end ; end ;
7462: GO 7353
7464: POP
7465: POP
// end ;
7466: PPOPN 4
7468: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
7469: LD_INT 0
7471: PPUSH
7472: PPUSH
7473: PPUSH
7474: PPUSH
7475: PPUSH
7476: PPUSH
7477: PPUSH
// playersAmount := 0 ;
7478: LD_ADDR_VAR 0 3
7482: PUSH
7483: LD_INT 0
7485: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base1ApeArea , Base2ApeArea , ] ;
7486: LD_ADDR_VAR 0 7
7490: PUSH
7491: LD_INT 18
7493: PUSH
7494: LD_INT 19
7496: PUSH
7497: LD_INT 18
7499: PUSH
7500: LD_INT 19
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7509: LD_ADDR_EXP 36
7513: PUSH
7514: LD_INT 0
7516: PUSH
7517: LD_INT 0
7519: PUSH
7520: LD_INT 0
7522: PUSH
7523: LD_INT 0
7525: PUSH
7526: LD_INT 0
7528: PUSH
7529: LD_INT 0
7531: PUSH
7532: LD_INT 0
7534: PUSH
7535: LD_INT 0
7537: PUSH
7538: EMPTY
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: ST_TO_ADDR
// for j = 1 to Side_Positions do
7548: LD_ADDR_VAR 0 4
7552: PUSH
7553: DOUBLE
7554: LD_INT 1
7556: DEC
7557: ST_TO_ADDR
7558: LD_EXP 18
7562: PUSH
7563: FOR_TO
7564: IFFALSE 7631
// if Side_Positions [ j ] then
7566: LD_EXP 18
7570: PUSH
7571: LD_VAR 0 4
7575: ARRAY
7576: IFFALSE 7629
// begin playersAmount := playersAmount + 1 ;
7578: LD_ADDR_VAR 0 3
7582: PUSH
7583: LD_VAR 0 3
7587: PUSH
7588: LD_INT 1
7590: PLUS
7591: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
7592: LD_ADDR_EXP 36
7596: PUSH
7597: LD_EXP 36
7601: PPUSH
7602: LD_VAR 0 4
7606: PPUSH
7607: LD_VAR 0 7
7611: PUSH
7612: LD_EXP 18
7616: PUSH
7617: LD_VAR 0 4
7621: ARRAY
7622: ARRAY
7623: PPUSH
7624: CALL_OW 1
7628: ST_TO_ADDR
// end ;
7629: GO 7563
7631: POP
7632: POP
// apemanPerPlayer := 2 * amount_of_apemen ;
7633: LD_ADDR_EXP 32
7637: PUSH
7638: LD_INT 2
7640: PUSH
7641: LD_EXP 12
7645: MUL
7646: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
7647: LD_ADDR_EXP 30
7651: PUSH
7652: LD_VAR 0 3
7656: PUSH
7657: LD_EXP 32
7661: MUL
7662: ST_TO_ADDR
// apemanLimit := apemanNumber ;
7663: LD_ADDR_EXP 31
7667: PUSH
7668: LD_EXP 30
7672: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7673: LD_ADDR_EXP 33
7677: PUSH
7678: LD_INT 0
7680: PUSH
7681: LD_INT 0
7683: PUSH
7684: LD_INT 0
7686: PUSH
7687: LD_INT 0
7689: PUSH
7690: LD_INT 0
7692: PUSH
7693: LD_INT 0
7695: PUSH
7696: LD_INT 0
7698: PUSH
7699: LD_INT 0
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7712: LD_ADDR_EXP 34
7716: PUSH
7717: LD_INT 0
7719: PUSH
7720: LD_INT 0
7722: PUSH
7723: LD_INT 0
7725: PUSH
7726: LD_INT 0
7728: PUSH
7729: LD_INT 0
7731: PUSH
7732: LD_INT 0
7734: PUSH
7735: LD_INT 0
7737: PUSH
7738: LD_INT 0
7740: PUSH
7741: EMPTY
7742: LIST
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: ST_TO_ADDR
// apeLevel := 1 ;
7751: LD_ADDR_EXP 35
7755: PUSH
7756: LD_INT 1
7758: ST_TO_ADDR
// if not apemanNumber then
7759: LD_EXP 30
7763: NOT
7764: IFFALSE 7768
// exit ;
7766: GO 7964
// for i := 1 to apemanPerPlayer do
7768: LD_ADDR_VAR 0 2
7772: PUSH
7773: DOUBLE
7774: LD_INT 1
7776: DEC
7777: ST_TO_ADDR
7778: LD_EXP 32
7782: PUSH
7783: FOR_TO
7784: IFFALSE 7962
// begin for j := 1 to Side_Positions do
7786: LD_ADDR_VAR 0 4
7790: PUSH
7791: DOUBLE
7792: LD_INT 1
7794: DEC
7795: ST_TO_ADDR
7796: LD_EXP 18
7800: PUSH
7801: FOR_TO
7802: IFFALSE 7958
// if Side_Positions [ j ] then
7804: LD_EXP 18
7808: PUSH
7809: LD_VAR 0 4
7813: ARRAY
7814: IFFALSE 7956
// begin pos := Side_Positions [ j ] ;
7816: LD_ADDR_VAR 0 6
7820: PUSH
7821: LD_EXP 18
7825: PUSH
7826: LD_VAR 0 4
7830: ARRAY
7831: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
7832: LD_ADDR_EXP 34
7836: PUSH
7837: LD_EXP 34
7841: PPUSH
7842: LD_VAR 0 4
7846: PPUSH
7847: LD_EXP 34
7851: PUSH
7852: LD_VAR 0 4
7856: ARRAY
7857: PUSH
7858: LD_INT 1
7860: PLUS
7861: PPUSH
7862: CALL_OW 1
7866: ST_TO_ADDR
// ape := PrepareApeman ;
7867: LD_ADDR_VAR 0 5
7871: PUSH
7872: CALL 7969 0 0
7876: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
7877: LD_ADDR_EXP 33
7881: PUSH
7882: LD_EXP 33
7886: PPUSH
7887: LD_VAR 0 4
7891: PPUSH
7892: LD_EXP 33
7896: PUSH
7897: LD_VAR 0 4
7901: ARRAY
7902: PPUSH
7903: LD_EXP 33
7907: PUSH
7908: LD_VAR 0 4
7912: ARRAY
7913: PUSH
7914: LD_INT 1
7916: PLUS
7917: PPUSH
7918: LD_VAR 0 5
7922: PPUSH
7923: CALL_OW 1
7927: PPUSH
7928: CALL_OW 1
7932: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
7933: LD_VAR 0 5
7937: PPUSH
7938: LD_EXP 36
7942: PUSH
7943: LD_VAR 0 4
7947: ARRAY
7948: PPUSH
7949: LD_INT 0
7951: PPUSH
7952: CALL_OW 49
// end ;
7956: GO 7801
7958: POP
7959: POP
// end ;
7960: GO 7783
7962: POP
7963: POP
// end ;
7964: LD_VAR 0 1
7968: RET
// export function PrepareApeman ; var bonus ; begin
7969: LD_INT 0
7971: PPUSH
7972: PPUSH
// uc_side := 0 ;
7973: LD_ADDR_OWVAR 20
7977: PUSH
7978: LD_INT 0
7980: ST_TO_ADDR
// uc_nation := 0 ;
7981: LD_ADDR_OWVAR 21
7985: PUSH
7986: LD_INT 0
7988: ST_TO_ADDR
// InitHc ;
7989: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
7993: LD_ADDR_VAR 0 2
7997: PUSH
7998: LD_INT 1
8000: NEG
8001: PUSH
8002: LD_INT 0
8004: PUSH
8005: LD_INT 1
8007: PUSH
8008: EMPTY
8009: LIST
8010: LIST
8011: LIST
8012: PUSH
8013: LD_INT 25
8015: PUSH
8016: LD_INT 12
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: PPUSH
8023: CALL_OW 69
8027: PUSH
8028: LD_INT 3
8030: MOD
8031: PUSH
8032: LD_INT 1
8034: PLUS
8035: ARRAY
8036: ST_TO_ADDR
// hc_class := class_apeman ;
8037: LD_ADDR_OWVAR 28
8041: PUSH
8042: LD_INT 12
8044: ST_TO_ADDR
// hc_gallery :=  ;
8045: LD_ADDR_OWVAR 33
8049: PUSH
8050: LD_STRING 
8052: ST_TO_ADDR
// hc_name :=  ;
8053: LD_ADDR_OWVAR 26
8057: PUSH
8058: LD_STRING 
8060: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
8061: LD_ADDR_OWVAR 31
8065: PUSH
8066: LD_EXP 35
8070: PUSH
8071: LD_VAR 0 2
8075: PLUS
8076: PUSH
8077: LD_EXP 35
8081: PUSH
8082: LD_VAR 0 2
8086: PLUS
8087: PUSH
8088: LD_EXP 35
8092: PUSH
8093: LD_VAR 0 2
8097: PLUS
8098: PUSH
8099: LD_EXP 35
8103: PUSH
8104: LD_VAR 0 2
8108: PLUS
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
8116: LD_ADDR_OWVAR 35
8120: PUSH
8121: LD_INT 10
8123: PUSH
8124: LD_VAR 0 2
8128: MUL
8129: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8130: LD_ADDR_OWVAR 29
8134: PUSH
8135: LD_INT 12
8137: PUSH
8138: LD_INT 12
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: ST_TO_ADDR
// result := CreateHuman ;
8145: LD_ADDR_VAR 0 1
8149: PUSH
8150: CALL_OW 44
8154: ST_TO_ADDR
// end ;
8155: LD_VAR 0 1
8159: RET
// export function ApeKilled ( ape ) ; var s , i ; begin
8160: LD_INT 0
8162: PPUSH
8163: PPUSH
8164: PPUSH
// if not ape then
8165: LD_VAR 0 1
8169: NOT
8170: IFFALSE 8174
// exit ;
8172: GO 8277
// for i = 1 to apemanPos do
8174: LD_ADDR_VAR 0 4
8178: PUSH
8179: DOUBLE
8180: LD_INT 1
8182: DEC
8183: ST_TO_ADDR
8184: LD_EXP 33
8188: PUSH
8189: FOR_TO
8190: IFFALSE 8224
// if ape in apemanPos [ i ] then
8192: LD_VAR 0 1
8196: PUSH
8197: LD_EXP 33
8201: PUSH
8202: LD_VAR 0 4
8206: ARRAY
8207: IN
8208: IFFALSE 8222
// begin s := i ;
8210: LD_ADDR_VAR 0 3
8214: PUSH
8215: LD_VAR 0 4
8219: ST_TO_ADDR
// break ;
8220: GO 8224
// end ;
8222: GO 8189
8224: POP
8225: POP
// apemanPos := Replace ( apemanPos , s , apemanPos [ s ] diff ape ) ;
8226: LD_ADDR_EXP 33
8230: PUSH
8231: LD_EXP 33
8235: PPUSH
8236: LD_VAR 0 3
8240: PPUSH
8241: LD_EXP 33
8245: PUSH
8246: LD_VAR 0 3
8250: ARRAY
8251: PUSH
8252: LD_VAR 0 1
8256: DIFF
8257: PPUSH
8258: CALL_OW 1
8262: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
8263: LD_ADDR_EXP 30
8267: PUSH
8268: LD_EXP 30
8272: PUSH
8273: LD_INT 1
8275: MINUS
8276: ST_TO_ADDR
// end ; end_of_file
8277: LD_VAR 0 2
8281: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
8282: LD_VAR 0 1
8286: PPUSH
8287: CALL_OW 266
8291: PUSH
8292: LD_INT 0
8294: PUSH
8295: LD_INT 1
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: IN
8302: IFFALSE 8327
// SetBName ( b , @ & GetSide ( b ) ) ;
8304: LD_VAR 0 1
8308: PPUSH
8309: LD_STRING @
8311: PUSH
8312: LD_VAR 0 1
8316: PPUSH
8317: CALL_OW 255
8321: STR
8322: PPUSH
8323: CALL_OW 500
// if def_game_rules then
8327: LD_EXP 57
8331: IFFALSE 8368
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
8333: LD_VAR 0 1
8337: PPUSH
8338: LD_VAR 0 1
8342: PPUSH
8343: CALL_OW 266
8347: PPUSH
8348: LD_VAR 0 1
8352: PPUSH
8353: CALL_OW 255
8357: PPUSH
8358: LD_INT 0
8360: PPUSH
8361: LD_INT 1
8363: PPUSH
8364: CALL 18444 0 5
// end ;
8368: PPOPN 2
8370: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
8371: LD_VAR 0 1
8375: PPUSH
8376: CALL_OW 266
8380: PUSH
8381: LD_INT 0
8383: PUSH
8384: LD_INT 1
8386: PUSH
8387: EMPTY
8388: LIST
8389: LIST
8390: IN
8391: IFFALSE 8416
// SetBName ( b , @ & GetSide ( b ) ) ;
8393: LD_VAR 0 1
8397: PPUSH
8398: LD_STRING @
8400: PUSH
8401: LD_VAR 0 1
8405: PPUSH
8406: CALL_OW 255
8410: STR
8411: PPUSH
8412: CALL_OW 500
// if def_game_rules then
8416: LD_EXP 57
8420: IFFALSE 8459
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
8422: LD_VAR 0 1
8426: PPUSH
8427: LD_VAR 0 1
8431: PPUSH
8432: CALL_OW 266
8436: PPUSH
8437: LD_VAR 0 1
8441: PPUSH
8442: CALL_OW 255
8446: PPUSH
8447: LD_VAR 0 2
8451: PPUSH
8452: LD_INT 1
8454: PPUSH
8455: CALL 18444 0 5
// end ;
8459: PPOPN 3
8461: END
// on VehicleConstructed ( veh , fac ) do var side ;
8462: LD_INT 0
8464: PPUSH
// begin if GetControl ( veh ) = control_apeman then
8465: LD_VAR 0 1
8469: PPUSH
8470: CALL_OW 263
8474: PUSH
8475: LD_INT 5
8477: EQUAL
8478: IFFALSE 8620
// begin side := GetSide ( veh ) ;
8480: LD_ADDR_VAR 0 3
8484: PUSH
8485: LD_VAR 0 1
8489: PPUSH
8490: CALL_OW 255
8494: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
8495: LD_ADDR_EXP 33
8499: PUSH
8500: LD_EXP 33
8504: PPUSH
8505: LD_VAR 0 3
8509: PPUSH
8510: LD_EXP 33
8514: PUSH
8515: LD_VAR 0 3
8519: ARRAY
8520: PPUSH
8521: LD_INT 52
8523: PUSH
8524: EMPTY
8525: LIST
8526: PPUSH
8527: CALL_OW 72
8531: PUSH
8532: LD_INT 22
8534: PUSH
8535: LD_VAR 0 3
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: PUSH
8544: LD_INT 2
8546: PUSH
8547: LD_INT 33
8549: PUSH
8550: LD_INT 5
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: PUSH
8557: LD_INT 25
8559: PUSH
8560: LD_INT 12
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: LD_INT 25
8569: PUSH
8570: LD_INT 15
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: PUSH
8577: LD_INT 25
8579: PUSH
8580: LD_INT 16
8582: PUSH
8583: EMPTY
8584: LIST
8585: LIST
8586: PUSH
8587: LD_INT 25
8589: PUSH
8590: LD_INT 17
8592: PUSH
8593: EMPTY
8594: LIST
8595: LIST
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: LIST
8601: LIST
8602: LIST
8603: LIST
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: PPUSH
8609: CALL_OW 69
8613: UNION
8614: PPUSH
8615: CALL_OW 1
8619: ST_TO_ADDR
// end ; end ;
8620: PPOPN 3
8622: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
8623: LD_VAR 0 1
8627: PPUSH
8628: LD_VAR 0 2
8632: PPUSH
8633: LD_VAR 0 3
8637: PPUSH
8638: LD_OWVAR 2
8642: PPUSH
8643: CALL 19122 0 4
8647: PPOPN 3
8649: END
// export function DE_Triggers ; begin
8650: LD_INT 0
8652: PPUSH
// disable ( 01 ) ;
8653: LD_INT 1
8655: DISABLE_MARKED
// disable ( 02 ) ;
8656: LD_INT 2
8658: DISABLE_MARKED
// disable ( 03 ) ;
8659: LD_INT 3
8661: DISABLE_MARKED
// disable ( 04 ) ;
8662: LD_INT 4
8664: DISABLE_MARKED
// disable ( 05 ) ;
8665: LD_INT 5
8667: DISABLE_MARKED
// disable ( 06 ) ;
8668: LD_INT 6
8670: DISABLE_MARKED
// disable ( 07 ) ;
8671: LD_INT 7
8673: DISABLE_MARKED
// disable ( 10 ) ;
8674: LD_INT 10
8676: DISABLE_MARKED
// disable ( 11 ) ;
8677: LD_INT 11
8679: DISABLE_MARKED
// disable ( 12 ) ;
8680: LD_INT 12
8682: DISABLE_MARKED
// disable ( 13 ) ;
8683: LD_INT 13
8685: DISABLE_MARKED
// disable ( 19 ) ;
8686: LD_INT 19
8688: DISABLE_MARKED
// disable ( 40 ) ;
8689: LD_INT 40
8691: DISABLE_MARKED
// disable ( 41 ) ;
8692: LD_INT 41
8694: DISABLE_MARKED
// disable ( 98 ) ;
8695: LD_INT 98
8697: DISABLE_MARKED
// disable ( 99 ) ;
8698: LD_INT 99
8700: DISABLE_MARKED
// disable ( 55 ) ;
8701: LD_INT 55
8703: DISABLE_MARKED
// disable ( 400 ) ;
8704: LD_INT 400
8706: DISABLE_MARKED
// disable ( 401 ) ;
8707: LD_INT 401
8709: DISABLE_MARKED
// end ; end_of_file
8710: LD_VAR 0 1
8714: RET
// function CanWinLoose ; begin
8715: LD_INT 0
8717: PPUSH
// Result := true ;
8718: LD_ADDR_VAR 0 1
8722: PUSH
8723: LD_INT 1
8725: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8726: CALL_OW 518
8730: PUSH
8731: CALL_OW 519
8735: PUSH
8736: LD_INT 0
8738: GREATER
8739: AND
8740: IFFALSE 8750
// Result := false ;
8742: LD_ADDR_VAR 0 1
8746: PUSH
8747: LD_INT 0
8749: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8750: CALL_OW 531
8754: PUSH
8755: CALL_OW 519
8759: PUSH
8760: LD_INT 1
8762: GREATER
8763: AND
8764: IFFALSE 8774
// Result := false ;
8766: LD_ADDR_VAR 0 1
8770: PUSH
8771: LD_INT 0
8773: ST_TO_ADDR
// end ;
8774: LD_VAR 0 1
8778: RET
// function HasPower ( i ) ; begin
8779: LD_INT 0
8781: PPUSH
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8782: LD_ADDR_VAR 0 2
8786: PUSH
8787: LD_INT 22
8789: PUSH
8790: LD_VAR 0 1
8794: PUSH
8795: EMPTY
8796: LIST
8797: LIST
8798: PUSH
8799: LD_INT 2
8801: PUSH
8802: LD_INT 21
8804: PUSH
8805: LD_INT 1
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: PUSH
8812: LD_INT 30
8814: PUSH
8815: LD_INT 0
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: PUSH
8822: LD_INT 30
8824: PUSH
8825: LD_INT 1
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: PUSH
8832: EMPTY
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: PPUSH
8842: CALL_OW 69
8846: ST_TO_ADDR
// end ;
8847: LD_VAR 0 2
8851: RET
// function AlliedSides ( i , j ) ; begin
8852: LD_INT 0
8854: PPUSH
// Result := false ;
8855: LD_ADDR_VAR 0 3
8859: PUSH
8860: LD_INT 0
8862: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8863: LD_VAR 0 1
8867: PPUSH
8868: LD_VAR 0 2
8872: PPUSH
8873: CALL_OW 81
8877: PUSH
8878: LD_INT 1
8880: EQUAL
8881: PUSH
8882: LD_VAR 0 2
8886: PPUSH
8887: LD_VAR 0 1
8891: PPUSH
8892: CALL_OW 81
8896: PUSH
8897: LD_INT 1
8899: EQUAL
8900: AND
8901: PUSH
8902: LD_VAR 0 1
8906: PPUSH
8907: CALL_OW 83
8911: AND
8912: PUSH
8913: LD_VAR 0 2
8917: PPUSH
8918: CALL_OW 83
8922: AND
8923: IFFALSE 8933
// Result := true ;
8925: LD_ADDR_VAR 0 3
8929: PUSH
8930: LD_INT 1
8932: ST_TO_ADDR
// end ;
8933: LD_VAR 0 3
8937: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
8938: CALL 8715 0 0
8942: IFFALSE 8951
8944: GO 8946
8946: DISABLE
// YouLostInMultiplayer ;
8947: CALL_OW 107
8951: END
// every 0 0$3 trigger CanWinLoose marked 401 do
8952: CALL 8715 0 0
8956: IFFALSE 8980
8958: GO 8960
8960: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
8961: LD_EXP 19
8965: PUSH
8966: LD_OWVAR 2
8970: ARRAY
8971: PPUSH
8972: CALL 19164 0 1
// YouWinInMultiplayer ;
8976: CALL_OW 106
// end ;
8980: END
// every 0 0$3 marked 98 do var i , CanWin ;
8981: GO 8983
8983: DISABLE
8984: LD_INT 0
8986: PPUSH
8987: PPUSH
// begin if not HasPower ( your_side ) then
8988: LD_OWVAR 2
8992: PPUSH
8993: CALL 8779 0 1
8997: NOT
8998: IFFALSE 9009
// begin Multiplayer_Loose_Message ;
9000: CALL_OW 521
// enable ( 400 ) ;
9004: LD_INT 400
9006: ENABLE_MARKED
// end else
9007: GO 9142
// begin CanWin := true ;
9009: LD_ADDR_VAR 0 2
9013: PUSH
9014: LD_INT 1
9016: ST_TO_ADDR
// for i := 1 to 8 do
9017: LD_ADDR_VAR 0 1
9021: PUSH
9022: DOUBLE
9023: LD_INT 1
9025: DEC
9026: ST_TO_ADDR
9027: LD_INT 8
9029: PUSH
9030: FOR_TO
9031: IFFALSE 9128
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9033: LD_EXP 18
9037: PUSH
9038: LD_VAR 0 1
9042: ARRAY
9043: PUSH
9044: LD_VAR 0 1
9048: PPUSH
9049: CALL_OW 108
9053: AND
9054: PUSH
9055: LD_VAR 0 1
9059: PUSH
9060: LD_OWVAR 2
9064: NONEQUAL
9065: AND
9066: IFFALSE 9126
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
9068: LD_EXP 16
9072: PUSH
9073: LD_VAR 0 1
9077: ARRAY
9078: NOT
9079: PUSH
9080: LD_EXP 16
9084: PUSH
9085: LD_VAR 0 1
9089: ARRAY
9090: PUSH
9091: LD_EXP 16
9095: PUSH
9096: LD_OWVAR 2
9100: ARRAY
9101: NONEQUAL
9102: OR
9103: IFFALSE 9126
// if HasPower ( i ) then
9105: LD_VAR 0 1
9109: PPUSH
9110: CALL 8779 0 1
9114: IFFALSE 9126
// begin CanWin := false ;
9116: LD_ADDR_VAR 0 2
9120: PUSH
9121: LD_INT 0
9123: ST_TO_ADDR
// break ;
9124: GO 9128
// end ;
9126: GO 9030
9128: POP
9129: POP
// if CanWin then
9130: LD_VAR 0 2
9134: IFFALSE 9141
// enable ( 401 ) else
9136: LD_INT 401
9138: ENABLE_MARKED
9139: GO 9142
// enable ;
9141: ENABLE
// end ; end ;
9142: PPOPN 2
9144: END
// every 0 0$3 marked 99 do var i , CanWin ;
9145: GO 9147
9147: DISABLE
9148: LD_INT 0
9150: PPUSH
9151: PPUSH
// begin if not HasPower ( your_side ) then
9152: LD_OWVAR 2
9156: PPUSH
9157: CALL 8779 0 1
9161: NOT
9162: IFFALSE 9173
// begin Multiplayer_Loose_Message ;
9164: CALL_OW 521
// enable ( 400 ) ;
9168: LD_INT 400
9170: ENABLE_MARKED
// end else
9171: GO 9286
// begin CanWin := true ;
9173: LD_ADDR_VAR 0 2
9177: PUSH
9178: LD_INT 1
9180: ST_TO_ADDR
// for i := 1 to 8 do
9181: LD_ADDR_VAR 0 1
9185: PUSH
9186: DOUBLE
9187: LD_INT 1
9189: DEC
9190: ST_TO_ADDR
9191: LD_INT 8
9193: PUSH
9194: FOR_TO
9195: IFFALSE 9272
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9197: LD_EXP 18
9201: PUSH
9202: LD_VAR 0 1
9206: ARRAY
9207: PUSH
9208: LD_VAR 0 1
9212: PPUSH
9213: CALL_OW 108
9217: AND
9218: PUSH
9219: LD_VAR 0 1
9223: PUSH
9224: LD_OWVAR 2
9228: NONEQUAL
9229: AND
9230: IFFALSE 9270
// if not AlliedSides ( i , your_side ) then
9232: LD_VAR 0 1
9236: PPUSH
9237: LD_OWVAR 2
9241: PPUSH
9242: CALL 8852 0 2
9246: NOT
9247: IFFALSE 9270
// if HasPower ( i ) then
9249: LD_VAR 0 1
9253: PPUSH
9254: CALL 8779 0 1
9258: IFFALSE 9270
// begin CanWin := false ;
9260: LD_ADDR_VAR 0 2
9264: PUSH
9265: LD_INT 0
9267: ST_TO_ADDR
// break ;
9268: GO 9272
// end ;
9270: GO 9194
9272: POP
9273: POP
// if CanWin then
9274: LD_VAR 0 2
9278: IFFALSE 9285
// enable ( 401 ) else
9280: LD_INT 401
9282: ENABLE_MARKED
9283: GO 9286
// enable ;
9285: ENABLE
// end ; end ; end_of_file
9286: PPOPN 2
9288: END
// var time ; export lidi , krabice , opoce ; export cper , cperiode ; var depot1 , depot2 ; var vlajka1 , vlajka2 ; export depotpositions , areas ; var podvozky , zbrane ; export pos1side , pos2side ; var pos1base , pos2base ; var left_score , right_score ; export debug , ctf ; export mp_sides_teams_ , mp_sides_nations_ , mp_sides_positions_ , mp_sides_players_counts_ ; var cft_01 , cft_02 , cft_03 , cft_04 , cft_05 , cft_06 , cft_07 ; export nonctf_10 , nonctf_11 , nonctf_12 , nonctf_13 ; var stmp , stmp2 , cl ; export function starting_ctf ; begin
9289: LD_INT 0
9291: PPUSH
// cft_01 = 01 ;
9292: LD_ADDR_LOC 24
9296: PUSH
9297: LD_INT 1
9299: ST_TO_ADDR
// cft_02 = 02 ;
9300: LD_ADDR_LOC 25
9304: PUSH
9305: LD_INT 2
9307: ST_TO_ADDR
// cft_03 = 03 ;
9308: LD_ADDR_LOC 26
9312: PUSH
9313: LD_INT 3
9315: ST_TO_ADDR
// cft_04 = 04 ;
9316: LD_ADDR_LOC 27
9320: PUSH
9321: LD_INT 4
9323: ST_TO_ADDR
// cft_05 = 05 ;
9324: LD_ADDR_LOC 28
9328: PUSH
9329: LD_INT 5
9331: ST_TO_ADDR
// cft_06 = 06 ;
9332: LD_ADDR_LOC 29
9336: PUSH
9337: LD_INT 6
9339: ST_TO_ADDR
// cft_07 = 07 ;
9340: LD_ADDR_LOC 30
9344: PUSH
9345: LD_INT 7
9347: ST_TO_ADDR
// nonctf_10 = 10 ;
9348: LD_ADDR_EXP 52
9352: PUSH
9353: LD_INT 10
9355: ST_TO_ADDR
// nonctf_11 = 11 ;
9356: LD_ADDR_EXP 53
9360: PUSH
9361: LD_INT 11
9363: ST_TO_ADDR
// nonctf_12 = 12 ;
9364: LD_ADDR_EXP 54
9368: PUSH
9369: LD_INT 12
9371: ST_TO_ADDR
// nonctf_13 = 13 ;
9372: LD_ADDR_EXP 55
9376: PUSH
9377: LD_INT 13
9379: ST_TO_ADDR
// disable ( cft_01 ) ;
9380: LD_LOC 24
9384: DISABLE_MARKED
// disable ( cft_02 ) ;
9385: LD_LOC 25
9389: DISABLE_MARKED
// disable ( cft_03 ) ;
9390: LD_LOC 26
9394: DISABLE_MARKED
// disable ( cft_04 ) ;
9395: LD_LOC 27
9399: DISABLE_MARKED
// disable ( cft_05 ) ;
9400: LD_LOC 28
9404: DISABLE_MARKED
// disable ( cft_06 ) ;
9405: LD_LOC 29
9409: DISABLE_MARKED
// disable ( cft_07 ) ;
9410: LD_LOC 30
9414: DISABLE_MARKED
// disable ( nonctf_10 ) ;
9415: LD_EXP 52
9419: DISABLE_MARKED
// disable ( nonctf_11 ) ;
9420: LD_EXP 53
9424: DISABLE_MARKED
// disable ( nonctf_12 ) ;
9425: LD_EXP 54
9429: DISABLE_MARKED
// disable ( nonctf_13 ) ;
9430: LD_EXP 55
9434: DISABLE_MARKED
// debug = false ;
9435: LD_ADDR_EXP 46
9439: PUSH
9440: LD_INT 0
9442: ST_TO_ADDR
// if not multiplayer then
9443: LD_OWVAR 4
9447: NOT
9448: IFFALSE 9608
// begin mp_sides_teams_ = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9450: LD_ADDR_EXP 48
9454: PUSH
9455: LD_INT 0
9457: PUSH
9458: LD_INT 0
9460: PUSH
9461: LD_INT 0
9463: PUSH
9464: LD_INT 0
9466: PUSH
9467: LD_INT 0
9469: PUSH
9470: LD_INT 0
9472: PUSH
9473: LD_INT 0
9475: PUSH
9476: LD_INT 0
9478: PUSH
9479: EMPTY
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: ST_TO_ADDR
// mp_sides_nations_ = [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9489: LD_ADDR_EXP 49
9493: PUSH
9494: LD_INT 1
9496: PUSH
9497: LD_INT 2
9499: PUSH
9500: LD_INT 0
9502: PUSH
9503: LD_INT 0
9505: PUSH
9506: LD_INT 0
9508: PUSH
9509: LD_INT 0
9511: PUSH
9512: LD_INT 0
9514: PUSH
9515: LD_INT 0
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: ST_TO_ADDR
// mp_sides_positions_ = [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9528: LD_ADDR_EXP 50
9532: PUSH
9533: LD_INT 1
9535: PUSH
9536: LD_INT 2
9538: PUSH
9539: LD_INT 0
9541: PUSH
9542: LD_INT 0
9544: PUSH
9545: LD_INT 0
9547: PUSH
9548: LD_INT 0
9550: PUSH
9551: LD_INT 0
9553: PUSH
9554: LD_INT 0
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: ST_TO_ADDR
// mp_sides_players_counts_ = [ 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9567: LD_ADDR_EXP 51
9571: PUSH
9572: LD_INT 1
9574: PUSH
9575: LD_INT 1
9577: PUSH
9578: LD_INT 0
9580: PUSH
9581: LD_INT 0
9583: PUSH
9584: LD_INT 0
9586: PUSH
9587: LD_INT 0
9589: PUSH
9590: LD_INT 0
9592: PUSH
9593: LD_INT 0
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: ST_TO_ADDR
// end else
9606: GO 9648
// begin mp_sides_teams_ = mp_sides_teams ;
9608: LD_ADDR_EXP 48
9612: PUSH
9613: LD_OWVAR 15
9617: ST_TO_ADDR
// mp_sides_nations_ = mp_sides_nations ;
9618: LD_ADDR_EXP 49
9622: PUSH
9623: LD_OWVAR 16
9627: ST_TO_ADDR
// mp_sides_positions_ = mp_sides_positions ;
9628: LD_ADDR_EXP 50
9632: PUSH
9633: LD_OWVAR 17
9637: ST_TO_ADDR
// mp_sides_players_counts_ = mp_sides_players_counts ;
9638: LD_ADDR_EXP 51
9642: PUSH
9643: LD_OWVAR 18
9647: ST_TO_ADDR
// end ; if debug then
9648: LD_EXP 46
9652: IFFALSE 9734
// begin debuglog ( [ side , your_side ] ) ;
9654: LD_STRING side
9656: PUSH
9657: LD_OWVAR 2
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: PPUSH
9666: CALL_OW 359
// debuglog ( [ teams , mp_sides_teams_ ] ) ;
9670: LD_STRING teams
9672: PUSH
9673: LD_EXP 48
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: PPUSH
9682: CALL_OW 359
// debuglog ( [ nations , mp_sides_nations_ ] ) ;
9686: LD_STRING nations
9688: PUSH
9689: LD_EXP 49
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: PPUSH
9698: CALL_OW 359
// debuglog ( [ positions , mp_sides_positions_ ] ) ;
9702: LD_STRING positions
9704: PUSH
9705: LD_EXP 50
9709: PUSH
9710: EMPTY
9711: LIST
9712: LIST
9713: PPUSH
9714: CALL_OW 359
// debuglog ( [ pl. counts , mp_sides_players_counts_ ] ) ;
9718: LD_STRING pl. counts
9720: PUSH
9721: LD_EXP 51
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: PPUSH
9730: CALL_OW 359
// end ; depotpositions = [ [ 34 , 60 , 1 ] , [ 185 , 60 , 4 ] ] ;
9734: LD_ADDR_EXP 42
9738: PUSH
9739: LD_INT 34
9741: PUSH
9742: LD_INT 60
9744: PUSH
9745: LD_INT 1
9747: PUSH
9748: EMPTY
9749: LIST
9750: LIST
9751: LIST
9752: PUSH
9753: LD_INT 185
9755: PUSH
9756: LD_INT 60
9758: PUSH
9759: LD_INT 4
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: LIST
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: ST_TO_ADDR
// areas = [ vlevo , vpravo ] ;
9771: LD_ADDR_EXP 43
9775: PUSH
9776: LD_INT 2
9778: PUSH
9779: LD_INT 3
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: ST_TO_ADDR
// if mp_game_type = 3 then
9786: LD_OWVAR 6
9790: PUSH
9791: LD_INT 3
9793: EQUAL
9794: IFFALSE 9802
// begin other_game ;
9796: CALL 12874 0 0
// exit ;
9800: GO 11250
// end ; ctf = true ;
9802: LD_ADDR_EXP 47
9806: PUSH
9807: LD_INT 1
9809: ST_TO_ADDR
// enable ( cft_01 ) ;
9810: LD_LOC 24
9814: ENABLE_MARKED
// enable ( cft_02 ) ;
9815: LD_LOC 25
9819: ENABLE_MARKED
// enable ( cft_05 ) ;
9820: LD_LOC 28
9824: ENABLE_MARKED
// enable ( cft_06 ) ;
9825: LD_LOC 29
9829: ENABLE_MARKED
// enable ( cft_07 ) ;
9830: LD_LOC 30
9834: ENABLE_MARKED
// podvozky = [ us_medium_wheeled , ar_medium_trike , ru_medium_wheeled ] ;
9835: LD_ADDR_LOC 18
9839: PUSH
9840: LD_INT 2
9842: PUSH
9843: LD_INT 13
9845: PUSH
9846: LD_INT 21
9848: PUSH
9849: EMPTY
9850: LIST
9851: LIST
9852: LIST
9853: ST_TO_ADDR
// zbrane = [ us_cargo_bay , ar_cargo_bay , ru_cargo_bay ] ;
9854: LD_ADDR_LOC 19
9858: PUSH
9859: LD_INT 12
9861: PUSH
9862: LD_INT 32
9864: PUSH
9865: LD_INT 51
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: LIST
9872: ST_TO_ADDR
// left_score = 0 ;
9873: LD_ADDR_LOC 22
9877: PUSH
9878: LD_INT 0
9880: ST_TO_ADDR
// right_score = 0 ;
9881: LD_ADDR_LOC 23
9885: PUSH
9886: LD_INT 0
9888: ST_TO_ADDR
// if multiplayer then
9889: LD_OWVAR 4
9893: IFFALSE 9949
// begin lidi = getmultiplayersetting ( 1 ) ;
9895: LD_ADDR_EXP 37
9899: PUSH
9900: LD_INT 1
9902: PPUSH
9903: CALL_OW 426
9907: ST_TO_ADDR
// krabice = getmultiplayersetting ( 2 ) ;
9908: LD_ADDR_EXP 38
9912: PUSH
9913: LD_INT 2
9915: PPUSH
9916: CALL_OW 426
9920: ST_TO_ADDR
// opoce = getmultiplayersetting ( 3 ) ;
9921: LD_ADDR_EXP 39
9925: PUSH
9926: LD_INT 3
9928: PPUSH
9929: CALL_OW 426
9933: ST_TO_ADDR
// time = getmultiplayersetting ( 4 ) ;
9934: LD_ADDR_LOC 13
9938: PUSH
9939: LD_INT 4
9941: PPUSH
9942: CALL_OW 426
9946: ST_TO_ADDR
// end else
9947: GO 9981
// begin lidi = 1 ;
9949: LD_ADDR_EXP 37
9953: PUSH
9954: LD_INT 1
9956: ST_TO_ADDR
// krabice = 1 ;
9957: LD_ADDR_EXP 38
9961: PUSH
9962: LD_INT 1
9964: ST_TO_ADDR
// opoce = 3 ;
9965: LD_ADDR_EXP 39
9969: PUSH
9970: LD_INT 3
9972: ST_TO_ADDR
// time = 2 ;
9973: LD_ADDR_LOC 13
9977: PUSH
9978: LD_INT 2
9980: ST_TO_ADDR
// end ; case lidi of 0 :
9981: LD_EXP 37
9985: PUSH
9986: LD_INT 0
9988: DOUBLE
9989: EQUAL
9990: IFTRUE 9994
9992: GO 10005
9994: POP
// lidi = 9 ; 1 :
9995: LD_ADDR_EXP 37
9999: PUSH
10000: LD_INT 9
10002: ST_TO_ADDR
10003: GO 10082
10005: LD_INT 1
10007: DOUBLE
10008: EQUAL
10009: IFTRUE 10013
10011: GO 10024
10013: POP
// lidi = 13 ; 2 :
10014: LD_ADDR_EXP 37
10018: PUSH
10019: LD_INT 13
10021: ST_TO_ADDR
10022: GO 10082
10024: LD_INT 2
10026: DOUBLE
10027: EQUAL
10028: IFTRUE 10032
10030: GO 10043
10032: POP
// lidi = 19 ; 3 :
10033: LD_ADDR_EXP 37
10037: PUSH
10038: LD_INT 19
10040: ST_TO_ADDR
10041: GO 10082
10043: LD_INT 3
10045: DOUBLE
10046: EQUAL
10047: IFTRUE 10051
10049: GO 10062
10051: POP
// lidi = 23 ; 4 :
10052: LD_ADDR_EXP 37
10056: PUSH
10057: LD_INT 23
10059: ST_TO_ADDR
10060: GO 10082
10062: LD_INT 4
10064: DOUBLE
10065: EQUAL
10066: IFTRUE 10070
10068: GO 10081
10070: POP
// lidi = 29 ; end ;
10071: LD_ADDR_EXP 37
10075: PUSH
10076: LD_INT 29
10078: ST_TO_ADDR
10079: GO 10082
10081: POP
// case krabice of 0 :
10082: LD_EXP 38
10086: PUSH
10087: LD_INT 0
10089: DOUBLE
10090: EQUAL
10091: IFTRUE 10095
10093: GO 10106
10095: POP
// cperiode = 1 1$30 ; 1 :
10096: LD_ADDR_EXP 41
10100: PUSH
10101: LD_INT 3150
10103: ST_TO_ADDR
10104: GO 10145
10106: LD_INT 1
10108: DOUBLE
10109: EQUAL
10110: IFTRUE 10114
10112: GO 10125
10114: POP
// cperiode = 1 1$00 ; 2 :
10115: LD_ADDR_EXP 41
10119: PUSH
10120: LD_INT 2100
10122: ST_TO_ADDR
10123: GO 10145
10125: LD_INT 2
10127: DOUBLE
10128: EQUAL
10129: IFTRUE 10133
10131: GO 10144
10133: POP
// cperiode = 0 0$30 ; end ;
10134: LD_ADDR_EXP 41
10138: PUSH
10139: LD_INT 1050
10141: ST_TO_ADDR
10142: GO 10145
10144: POP
// cper = 0 0$10 ;
10145: LD_ADDR_EXP 40
10149: PUSH
10150: LD_INT 350
10152: ST_TO_ADDR
// case opoce of 0 :
10153: LD_EXP 39
10157: PUSH
10158: LD_INT 0
10160: DOUBLE
10161: EQUAL
10162: IFTRUE 10166
10164: GO 10177
10166: POP
// opoce = 0 ; 1 :
10167: LD_ADDR_EXP 39
10171: PUSH
10172: LD_INT 0
10174: ST_TO_ADDR
10175: GO 10292
10177: LD_INT 1
10179: DOUBLE
10180: EQUAL
10181: IFTRUE 10185
10183: GO 10196
10185: POP
// opoce = 3 ; 2 :
10186: LD_ADDR_EXP 39
10190: PUSH
10191: LD_INT 3
10193: ST_TO_ADDR
10194: GO 10292
10196: LD_INT 2
10198: DOUBLE
10199: EQUAL
10200: IFTRUE 10204
10202: GO 10215
10204: POP
// opoce = 7 ; 3 :
10205: LD_ADDR_EXP 39
10209: PUSH
10210: LD_INT 7
10212: ST_TO_ADDR
10213: GO 10292
10215: LD_INT 3
10217: DOUBLE
10218: EQUAL
10219: IFTRUE 10223
10221: GO 10234
10223: POP
// opoce = 11 ; 4 :
10224: LD_ADDR_EXP 39
10228: PUSH
10229: LD_INT 11
10231: ST_TO_ADDR
10232: GO 10292
10234: LD_INT 4
10236: DOUBLE
10237: EQUAL
10238: IFTRUE 10242
10240: GO 10253
10242: POP
// opoce = 15 ; 5 :
10243: LD_ADDR_EXP 39
10247: PUSH
10248: LD_INT 15
10250: ST_TO_ADDR
10251: GO 10292
10253: LD_INT 5
10255: DOUBLE
10256: EQUAL
10257: IFTRUE 10261
10259: GO 10272
10261: POP
// opoce = 19 ; 6 :
10262: LD_ADDR_EXP 39
10266: PUSH
10267: LD_INT 19
10269: ST_TO_ADDR
10270: GO 10292
10272: LD_INT 6
10274: DOUBLE
10275: EQUAL
10276: IFTRUE 10280
10278: GO 10291
10280: POP
// opoce = 23 ; end ;
10281: LD_ADDR_EXP 39
10285: PUSH
10286: LD_INT 23
10288: ST_TO_ADDR
10289: GO 10292
10291: POP
// case time of 0 :
10292: LD_LOC 13
10296: PUSH
10297: LD_INT 0
10299: DOUBLE
10300: EQUAL
10301: IFTRUE 10305
10303: GO 10320
10305: POP
// time = 30 * 60 ; 1 :
10306: LD_ADDR_LOC 13
10310: PUSH
10311: LD_INT 30
10313: PUSH
10314: LD_INT 60
10316: MUL
10317: ST_TO_ADDR
10318: GO 10436
10320: LD_INT 1
10322: DOUBLE
10323: EQUAL
10324: IFTRUE 10328
10326: GO 10343
10328: POP
// time = 40 * 60 ; 2 :
10329: LD_ADDR_LOC 13
10333: PUSH
10334: LD_INT 40
10336: PUSH
10337: LD_INT 60
10339: MUL
10340: ST_TO_ADDR
10341: GO 10436
10343: LD_INT 2
10345: DOUBLE
10346: EQUAL
10347: IFTRUE 10351
10349: GO 10366
10351: POP
// time = 50 * 60 ; 3 :
10352: LD_ADDR_LOC 13
10356: PUSH
10357: LD_INT 50
10359: PUSH
10360: LD_INT 60
10362: MUL
10363: ST_TO_ADDR
10364: GO 10436
10366: LD_INT 3
10368: DOUBLE
10369: EQUAL
10370: IFTRUE 10374
10372: GO 10389
10374: POP
// time = 60 * 60 ; 4 :
10375: LD_ADDR_LOC 13
10379: PUSH
10380: LD_INT 60
10382: PUSH
10383: LD_INT 60
10385: MUL
10386: ST_TO_ADDR
10387: GO 10436
10389: LD_INT 4
10391: DOUBLE
10392: EQUAL
10393: IFTRUE 10397
10395: GO 10412
10397: POP
// time = 90 * 60 ; 5 :
10398: LD_ADDR_LOC 13
10402: PUSH
10403: LD_INT 90
10405: PUSH
10406: LD_INT 60
10408: MUL
10409: ST_TO_ADDR
10410: GO 10436
10412: LD_INT 5
10414: DOUBLE
10415: EQUAL
10416: IFTRUE 10420
10418: GO 10435
10420: POP
// time = 120 * 60 ; end ;
10421: LD_ADDR_LOC 13
10425: PUSH
10426: LD_INT 120
10428: PUSH
10429: LD_INT 60
10431: MUL
10432: ST_TO_ADDR
10433: GO 10436
10435: POP
// enable ( cft_03 ) ;
10436: LD_LOC 26
10440: ENABLE_MARKED
// refresh ;
10441: CALL 11255 0 0
// for stmp = 1 to 8 do
10445: LD_ADDR_LOC 31
10449: PUSH
10450: DOUBLE
10451: LD_INT 1
10453: DEC
10454: ST_TO_ADDR
10455: LD_INT 8
10457: PUSH
10458: FOR_TO
10459: IFFALSE 10828
// if mp_sides_nations_ [ stmp ] then
10461: LD_EXP 49
10465: PUSH
10466: LD_LOC 31
10470: ARRAY
10471: IFFALSE 10826
// begin if mp_sides_positions_ [ stmp ] = 1 then
10473: LD_EXP 50
10477: PUSH
10478: LD_LOC 31
10482: ARRAY
10483: PUSH
10484: LD_INT 1
10486: EQUAL
10487: IFFALSE 10501
// pos1side = stmp else
10489: LD_ADDR_EXP 44
10493: PUSH
10494: LD_LOC 31
10498: ST_TO_ADDR
10499: GO 10511
// pos2side = stmp ;
10501: LD_ADDR_EXP 45
10505: PUSH
10506: LD_LOC 31
10510: ST_TO_ADDR
// uc_side = stmp ;
10511: LD_ADDR_OWVAR 20
10515: PUSH
10516: LD_LOC 31
10520: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ stmp ] ;
10521: LD_ADDR_OWVAR 21
10525: PUSH
10526: LD_EXP 49
10530: PUSH
10531: LD_LOC 31
10535: ARRAY
10536: ST_TO_ADDR
// bc_type = b_depot ;
10537: LD_ADDR_OWVAR 42
10541: PUSH
10542: LD_INT 0
10544: ST_TO_ADDR
// bc_level = 1 ;
10545: LD_ADDR_OWVAR 43
10549: PUSH
10550: LD_INT 1
10552: ST_TO_ADDR
// createandplacebuildingxyd ( depotpositions [ mp_sides_positions_ [ stmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 2 ] , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 3 ] ) ;
10553: LD_EXP 42
10557: PUSH
10558: LD_EXP 50
10562: PUSH
10563: LD_LOC 31
10567: ARRAY
10568: ARRAY
10569: PUSH
10570: LD_INT 1
10572: ARRAY
10573: PPUSH
10574: LD_EXP 42
10578: PUSH
10579: LD_EXP 50
10583: PUSH
10584: LD_LOC 31
10588: ARRAY
10589: ARRAY
10590: PUSH
10591: LD_INT 2
10593: ARRAY
10594: PPUSH
10595: LD_EXP 42
10599: PUSH
10600: LD_EXP 50
10604: PUSH
10605: LD_LOC 31
10609: ARRAY
10610: ARRAY
10611: PUSH
10612: LD_INT 3
10614: ARRAY
10615: PPUSH
10616: CALL_OW 47
// setbattleflag ( stmp , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 2 ] , [ [ bfo_defend_bonus_human , 150 ] , [ bfo_defend_bonus_vehicle , 10 ] , [ bfo_defend_bonus_building , 0 ] , [ bfo_range , 17 ] , [ bfo_height , 100 ] ] ) ;
10620: LD_LOC 31
10624: PPUSH
10625: LD_EXP 42
10629: PUSH
10630: LD_EXP 50
10634: PUSH
10635: LD_LOC 31
10639: ARRAY
10640: ARRAY
10641: PUSH
10642: LD_INT 1
10644: ARRAY
10645: PPUSH
10646: LD_EXP 42
10650: PUSH
10651: LD_EXP 50
10655: PUSH
10656: LD_LOC 31
10660: ARRAY
10661: ARRAY
10662: PUSH
10663: LD_INT 2
10665: ARRAY
10666: PPUSH
10667: LD_INT 1
10669: PUSH
10670: LD_INT 150
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: PUSH
10677: LD_INT 2
10679: PUSH
10680: LD_INT 10
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: PUSH
10687: LD_INT 3
10689: PUSH
10690: LD_INT 0
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PUSH
10697: LD_INT 10
10699: PUSH
10700: LD_INT 17
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: PUSH
10707: LD_INT 20
10709: PUSH
10710: LD_INT 100
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: PPUSH
10724: CALL_OW 418
// cl = class_engineer ;
10728: LD_ADDR_LOC 33
10732: PUSH
10733: LD_INT 2
10735: ST_TO_ADDR
// for stmp2 = 1 to lidi do
10736: LD_ADDR_LOC 32
10740: PUSH
10741: DOUBLE
10742: LD_INT 1
10744: DEC
10745: ST_TO_ADDR
10746: LD_EXP 37
10750: PUSH
10751: FOR_TO
10752: IFFALSE 10824
// begin if stmp2 >= lidi / 2 then
10754: LD_LOC 32
10758: PUSH
10759: LD_EXP 37
10763: PUSH
10764: LD_INT 2
10766: DIVREAL
10767: GREATEREQUAL
10768: IFFALSE 10778
// cl = class_soldier ;
10770: LD_ADDR_LOC 33
10774: PUSH
10775: LD_INT 1
10777: ST_TO_ADDR
// preparehuman ( 0 , cl , 1 ) ;
10778: LD_INT 0
10780: PPUSH
10781: LD_LOC 33
10785: PPUSH
10786: LD_INT 1
10788: PPUSH
10789: CALL_OW 380
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ stmp ] ] , false ) ;
10793: CALL_OW 44
10797: PPUSH
10798: LD_EXP 43
10802: PUSH
10803: LD_EXP 50
10807: PUSH
10808: LD_LOC 31
10812: ARRAY
10813: ARRAY
10814: PPUSH
10815: LD_INT 0
10817: PPUSH
10818: CALL_OW 49
// end ;
10822: GO 10751
10824: POP
10825: POP
// end ;
10826: GO 10458
10828: POP
10829: POP
// depot1 = filterunitsinarea ( vlevo , [ [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
10830: LD_ADDR_LOC 14
10834: PUSH
10835: LD_INT 2
10837: PPUSH
10838: LD_INT 21
10840: PUSH
10841: LD_INT 3
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: PUSH
10848: LD_INT 30
10850: PUSH
10851: LD_INT 0
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: PUSH
10858: EMPTY
10859: LIST
10860: LIST
10861: PPUSH
10862: CALL_OW 70
10866: PUSH
10867: LD_INT 1
10869: ARRAY
10870: ST_TO_ADDR
// depot2 = filterunitsinarea ( vpravo , [ [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
10871: LD_ADDR_LOC 15
10875: PUSH
10876: LD_INT 3
10878: PPUSH
10879: LD_INT 21
10881: PUSH
10882: LD_INT 3
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: PUSH
10889: LD_INT 30
10891: PUSH
10892: LD_INT 0
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PPUSH
10903: CALL_OW 70
10907: PUSH
10908: LD_INT 1
10910: ARRAY
10911: ST_TO_ADDR
// pos1base = getbase ( depot1 ) ;
10912: LD_ADDR_LOC 20
10916: PUSH
10917: LD_LOC 14
10921: PPUSH
10922: CALL_OW 274
10926: ST_TO_ADDR
// pos2base = getbase ( depot2 ) ;
10927: LD_ADDR_LOC 21
10931: PUSH
10932: LD_LOC 15
10936: PPUSH
10937: CALL_OW 274
10941: ST_TO_ADDR
// uc_side = 0 ;
10942: LD_ADDR_OWVAR 20
10946: PUSH
10947: LD_INT 0
10949: ST_TO_ADDR
// uc_nation = nation_nature ;
10950: LD_ADDR_OWVAR 21
10954: PUSH
10955: LD_INT 0
10957: ST_TO_ADDR
// for stmp = 1 to opoce do
10958: LD_ADDR_LOC 31
10962: PUSH
10963: DOUBLE
10964: LD_INT 1
10966: DEC
10967: ST_TO_ADDR
10968: LD_EXP 39
10972: PUSH
10973: FOR_TO
10974: IFFALSE 11006
// begin preparehuman ( 0 , class_apeman , 0 ) ;
10976: LD_INT 0
10978: PPUSH
10979: LD_INT 12
10981: PPUSH
10982: LD_INT 0
10984: PPUSH
10985: CALL_OW 380
// placeunitarea ( createhuman , les , false ) ;
10989: CALL_OW 44
10993: PPUSH
10994: LD_INT 4
10996: PPUSH
10997: LD_INT 0
10999: PPUSH
11000: CALL_OW 49
// end ;
11004: GO 10973
11006: POP
11007: POP
// uc_side = pos2side ;
11008: LD_ADDR_OWVAR 20
11012: PUSH
11013: LD_EXP 45
11017: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos2side ] ;
11018: LD_ADDR_OWVAR 21
11022: PUSH
11023: LD_EXP 49
11027: PUSH
11028: LD_EXP 45
11032: ARRAY
11033: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11034: LD_ADDR_OWVAR 37
11038: PUSH
11039: LD_LOC 18
11043: PUSH
11044: LD_OWVAR 21
11048: ARRAY
11049: ST_TO_ADDR
// vc_control = control_manual ;
11050: LD_ADDR_OWVAR 38
11054: PUSH
11055: LD_INT 1
11057: ST_TO_ADDR
// vc_engine = engine_siberite ;
11058: LD_ADDR_OWVAR 39
11062: PUSH
11063: LD_INT 3
11065: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
11066: LD_ADDR_OWVAR 40
11070: PUSH
11071: LD_LOC 19
11075: PUSH
11076: LD_OWVAR 21
11080: ARRAY
11081: ST_TO_ADDR
// vlajka1 = createvehicle ;
11082: LD_ADDR_LOC 16
11086: PUSH
11087: CALL_OW 45
11091: ST_TO_ADDR
// placeunitxy ( vlajka1 , 76 , 60 , false ) ;
11092: LD_LOC 16
11096: PPUSH
11097: LD_INT 76
11099: PPUSH
11100: LD_INT 60
11102: PPUSH
11103: LD_INT 0
11105: PPUSH
11106: CALL_OW 48
// uc_side = pos1side ;
11110: LD_ADDR_OWVAR 20
11114: PUSH
11115: LD_EXP 44
11119: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos1side ] ;
11120: LD_ADDR_OWVAR 21
11124: PUSH
11125: LD_EXP 49
11129: PUSH
11130: LD_EXP 44
11134: ARRAY
11135: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11136: LD_ADDR_OWVAR 37
11140: PUSH
11141: LD_LOC 18
11145: PUSH
11146: LD_OWVAR 21
11150: ARRAY
11151: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
11152: LD_ADDR_OWVAR 40
11156: PUSH
11157: LD_LOC 19
11161: PUSH
11162: LD_OWVAR 21
11166: ARRAY
11167: ST_TO_ADDR
// vlajka2 = createvehicle ;
11168: LD_ADDR_LOC 17
11172: PUSH
11173: CALL_OW 45
11177: ST_TO_ADDR
// placeunitxy ( vlajka2 , 143 , 60 , false ) ;
11178: LD_LOC 17
11182: PPUSH
11183: LD_INT 143
11185: PPUSH
11186: LD_INT 60
11188: PPUSH
11189: LD_INT 0
11191: PPUSH
11192: CALL_OW 48
// case mp_sides_positions_ [ your_side ] of 1 :
11196: LD_EXP 50
11200: PUSH
11201: LD_OWVAR 2
11205: ARRAY
11206: PUSH
11207: LD_INT 1
11209: DOUBLE
11210: EQUAL
11211: IFTRUE 11215
11213: GO 11228
11215: POP
// centernowonxy ( 44 , 60 ) ; 2 :
11216: LD_INT 44
11218: PPUSH
11219: LD_INT 60
11221: PPUSH
11222: CALL_OW 86
11226: GO 11250
11228: LD_INT 2
11230: DOUBLE
11231: EQUAL
11232: IFTRUE 11236
11234: GO 11249
11236: POP
// centernowonxy ( 175 , 60 ) ; end ;
11237: LD_INT 175
11239: PPUSH
11240: LD_INT 60
11242: PPUSH
11243: CALL_OW 86
11247: GO 11250
11249: POP
// end ;
11250: LD_VAR 0 1
11254: RET
// function refresh ; var tmp , tmp1 , tmp2 , tmp3 , tmp4 ; begin
11255: LD_INT 0
11257: PPUSH
11258: PPUSH
11259: PPUSH
11260: PPUSH
11261: PPUSH
11262: PPUSH
// tmp = time div 60 ;
11263: LD_ADDR_VAR 0 2
11267: PUSH
11268: LD_LOC 13
11272: PUSH
11273: LD_INT 60
11275: DIV
11276: ST_TO_ADDR
// if tmp < 10 then
11277: LD_VAR 0 2
11281: PUSH
11282: LD_INT 10
11284: LESS
11285: IFFALSE 11303
// tmp1 = 0 & tmp else
11287: LD_ADDR_VAR 0 3
11291: PUSH
11292: LD_STRING 0
11294: PUSH
11295: LD_VAR 0 2
11299: STR
11300: ST_TO_ADDR
11301: GO 11317
// tmp1 =  & tmp ;
11303: LD_ADDR_VAR 0 3
11307: PUSH
11308: LD_STRING 
11310: PUSH
11311: LD_VAR 0 2
11315: STR
11316: ST_TO_ADDR
// tmp = time mod 60 ;
11317: LD_ADDR_VAR 0 2
11321: PUSH
11322: LD_LOC 13
11326: PUSH
11327: LD_INT 60
11329: MOD
11330: ST_TO_ADDR
// if tmp < 10 then
11331: LD_VAR 0 2
11335: PUSH
11336: LD_INT 10
11338: LESS
11339: IFFALSE 11357
// tmp2 = 0 & tmp else
11341: LD_ADDR_VAR 0 4
11345: PUSH
11346: LD_STRING 0
11348: PUSH
11349: LD_VAR 0 2
11353: STR
11354: ST_TO_ADDR
11355: GO 11371
// tmp2 =  & tmp ;
11357: LD_ADDR_VAR 0 4
11361: PUSH
11362: LD_STRING 
11364: PUSH
11365: LD_VAR 0 2
11369: STR
11370: ST_TO_ADDR
// if left_score < 10 then
11371: LD_LOC 22
11375: PUSH
11376: LD_INT 10
11378: LESS
11379: IFFALSE 11397
// tmp3 = 0 & left_score else
11381: LD_ADDR_VAR 0 5
11385: PUSH
11386: LD_STRING 0
11388: PUSH
11389: LD_LOC 22
11393: STR
11394: ST_TO_ADDR
11395: GO 11411
// tmp3 =  & left_score ;
11397: LD_ADDR_VAR 0 5
11401: PUSH
11402: LD_STRING 
11404: PUSH
11405: LD_LOC 22
11409: STR
11410: ST_TO_ADDR
// if right_score < 10 then
11411: LD_LOC 23
11415: PUSH
11416: LD_INT 10
11418: LESS
11419: IFFALSE 11437
// tmp4 = 0 & right_score else
11421: LD_ADDR_VAR 0 6
11425: PUSH
11426: LD_STRING 0
11428: PUSH
11429: LD_LOC 23
11433: STR
11434: ST_TO_ADDR
11435: GO 11451
// tmp4 =  & right_score ;
11437: LD_ADDR_VAR 0 6
11441: PUSH
11442: LD_STRING 
11444: PUSH
11445: LD_LOC 23
11449: STR
11450: ST_TO_ADDR
// display_strings = [ Score:  & tmp3 &  to  & tmp4 , Time left:  & tmp1 & : & tmp2 ] ;
11451: LD_ADDR_OWVAR 47
11455: PUSH
11456: LD_STRING Score: 
11458: PUSH
11459: LD_VAR 0 5
11463: STR
11464: PUSH
11465: LD_STRING  to 
11467: STR
11468: PUSH
11469: LD_VAR 0 6
11473: STR
11474: PUSH
11475: LD_STRING Time left: 
11477: PUSH
11478: LD_VAR 0 3
11482: STR
11483: PUSH
11484: LD_STRING :
11486: STR
11487: PUSH
11488: LD_VAR 0 4
11492: STR
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: ST_TO_ADDR
// end ;
11498: LD_VAR 0 1
11502: RET
// every 0 0$1 marked 03 do
11503: GO 11505
11505: DISABLE
// begin time = time - 1 ;
11506: LD_ADDR_LOC 13
11510: PUSH
11511: LD_LOC 13
11515: PUSH
11516: LD_INT 1
11518: MINUS
11519: ST_TO_ADDR
// refresh ;
11520: CALL 11255 0 0
// if not time then
11524: LD_LOC 13
11528: NOT
11529: IFFALSE 11595
// if mp_sides_positions_ [ your_side ] = 1 then
11531: LD_EXP 50
11535: PUSH
11536: LD_OWVAR 2
11540: ARRAY
11541: PUSH
11542: LD_INT 1
11544: EQUAL
11545: IFFALSE 11571
// if left_score >= right_score then
11547: LD_LOC 22
11551: PUSH
11552: LD_LOC 23
11556: GREATEREQUAL
11557: IFFALSE 11565
// youwininmultiplayer else
11559: CALL_OW 106
11563: GO 11569
// youlostinmultiplayer else
11565: CALL_OW 107
11569: GO 11593
// if right_score >= left_score then
11571: LD_LOC 23
11575: PUSH
11576: LD_LOC 22
11580: GREATEREQUAL
11581: IFFALSE 11589
// youwininmultiplayer else
11583: CALL_OW 106
11587: GO 11593
// youlostinmultiplayer else
11589: CALL_OW 107
11593: GO 11596
// enable ;
11595: ENABLE
// end ;
11596: END
// every 0 0$10 marked 19 do
11597: GO 11599
11599: DISABLE
// begin cper = cper - 0 0$10 ;
11600: LD_ADDR_EXP 40
11604: PUSH
11605: LD_EXP 40
11609: PUSH
11610: LD_INT 350
11612: MINUS
11613: ST_TO_ADDR
// if cper = 0 then
11614: LD_EXP 40
11618: PUSH
11619: LD_INT 0
11621: EQUAL
11622: IFFALSE 11660
// begin createcratesarea ( 5 , vlevoex , true ) ;
11624: LD_INT 5
11626: PPUSH
11627: LD_INT 5
11629: PPUSH
11630: LD_INT 1
11632: PPUSH
11633: CALL_OW 55
// createcratesarea ( 5 , vpravoex , true ) ;
11637: LD_INT 5
11639: PPUSH
11640: LD_INT 6
11642: PPUSH
11643: LD_INT 1
11645: PPUSH
11646: CALL_OW 55
// cper = cperiode ;
11650: LD_ADDR_EXP 40
11654: PUSH
11655: LD_EXP 41
11659: ST_TO_ADDR
// end ; enable ;
11660: ENABLE
// end ;
11661: END
// every 5 trigger getlives ( depot1 ) < 500 marked 01 do
11662: LD_LOC 14
11666: PPUSH
11667: CALL_OW 256
11671: PUSH
11672: LD_INT 500
11674: LESS
11675: IFFALSE 11693
11677: GO 11679
11679: DISABLE
// begin setlives ( depot1 , 750 ) ;
11680: LD_LOC 14
11684: PPUSH
11685: LD_INT 750
11687: PPUSH
11688: CALL_OW 234
// enable ;
11692: ENABLE
// end ;
11693: END
// every 5 trigger getlives ( depot2 ) < 500 marked 02 do
11694: LD_LOC 15
11698: PPUSH
11699: CALL_OW 256
11703: PUSH
11704: LD_INT 500
11706: LESS
11707: IFFALSE 11725
11709: GO 11711
11711: DISABLE
// begin setlives ( depot2 , 750 ) ;
11712: LD_LOC 15
11716: PPUSH
11717: LD_INT 750
11719: PPUSH
11720: CALL_OW 234
// enable ;
11724: ENABLE
// end ;
11725: END
// on unitdestroyed ( un ) do var radius ;
11726: LD_INT 0
11728: PPUSH
// begin if GetClass ( un ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
11729: LD_VAR 0 1
11733: PPUSH
11734: CALL_OW 257
11738: PUSH
11739: LD_INT 12
11741: PUSH
11742: LD_INT 15
11744: PUSH
11745: LD_INT 17
11747: PUSH
11748: LD_INT 16
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: IN
11757: PUSH
11758: LD_VAR 0 1
11762: PPUSH
11763: CALL_OW 263
11767: PUSH
11768: LD_INT 5
11770: EQUAL
11771: OR
11772: IFFALSE 11783
// ApeKilled ( un ) ;
11774: LD_VAR 0 1
11778: PPUSH
11779: CALL 8160 0 1
// if mp_game_type <> 1 then
11783: LD_OWVAR 6
11787: PUSH
11788: LD_INT 1
11790: NONEQUAL
11791: IFFALSE 11795
// exit ;
11793: GO 12089
// if un = vlajka1 then
11795: LD_VAR 0 1
11799: PUSH
11800: LD_LOC 16
11804: EQUAL
11805: IFFALSE 11943
// begin uc_side = pos2side ;
11807: LD_ADDR_OWVAR 20
11811: PUSH
11812: LD_EXP 45
11816: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos2side ] ;
11817: LD_ADDR_OWVAR 21
11821: PUSH
11822: LD_EXP 49
11826: PUSH
11827: LD_EXP 45
11831: ARRAY
11832: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11833: LD_ADDR_OWVAR 37
11837: PUSH
11838: LD_LOC 18
11842: PUSH
11843: LD_OWVAR 21
11847: ARRAY
11848: ST_TO_ADDR
// vc_control = control_manual ;
11849: LD_ADDR_OWVAR 38
11853: PUSH
11854: LD_INT 1
11856: ST_TO_ADDR
// vc_engine = engine_siberite ;
11857: LD_ADDR_OWVAR 39
11861: PUSH
11862: LD_INT 3
11864: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
11865: LD_ADDR_OWVAR 40
11869: PUSH
11870: LD_LOC 19
11874: PUSH
11875: LD_OWVAR 21
11879: ARRAY
11880: ST_TO_ADDR
// vlajka1 = createvehicle ;
11881: LD_ADDR_LOC 16
11885: PUSH
11886: CALL_OW 45
11890: ST_TO_ADDR
// radius = 2 ;
11891: LD_ADDR_VAR 0 2
11895: PUSH
11896: LD_INT 2
11898: ST_TO_ADDR
// while not placeunitxyr ( vlajka1 , 76 , 60 , radius , false ) do
11899: LD_LOC 16
11903: PPUSH
11904: LD_INT 76
11906: PPUSH
11907: LD_INT 60
11909: PPUSH
11910: LD_VAR 0 2
11914: PPUSH
11915: LD_INT 0
11917: PPUSH
11918: CALL_OW 50
11922: NOT
11923: IFFALSE 11941
// radius = radius + 1 ;
11925: LD_ADDR_VAR 0 2
11929: PUSH
11930: LD_VAR 0 2
11934: PUSH
11935: LD_INT 1
11937: PLUS
11938: ST_TO_ADDR
11939: GO 11899
// end else
11941: GO 12089
// if un = vlajka2 then
11943: LD_VAR 0 1
11947: PUSH
11948: LD_LOC 17
11952: EQUAL
11953: IFFALSE 12089
// begin uc_side = pos1side ;
11955: LD_ADDR_OWVAR 20
11959: PUSH
11960: LD_EXP 44
11964: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos1side ] ;
11965: LD_ADDR_OWVAR 21
11969: PUSH
11970: LD_EXP 49
11974: PUSH
11975: LD_EXP 44
11979: ARRAY
11980: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11981: LD_ADDR_OWVAR 37
11985: PUSH
11986: LD_LOC 18
11990: PUSH
11991: LD_OWVAR 21
11995: ARRAY
11996: ST_TO_ADDR
// vc_control = control_manual ;
11997: LD_ADDR_OWVAR 38
12001: PUSH
12002: LD_INT 1
12004: ST_TO_ADDR
// vc_engine = engine_siberite ;
12005: LD_ADDR_OWVAR 39
12009: PUSH
12010: LD_INT 3
12012: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
12013: LD_ADDR_OWVAR 40
12017: PUSH
12018: LD_LOC 19
12022: PUSH
12023: LD_OWVAR 21
12027: ARRAY
12028: ST_TO_ADDR
// vlajka2 = createvehicle ;
12029: LD_ADDR_LOC 17
12033: PUSH
12034: CALL_OW 45
12038: ST_TO_ADDR
// radius = 2 ;
12039: LD_ADDR_VAR 0 2
12043: PUSH
12044: LD_INT 2
12046: ST_TO_ADDR
// while not placeunitxyr ( vlajka2 , 143 , 60 , radius , false ) do
12047: LD_LOC 17
12051: PPUSH
12052: LD_INT 143
12054: PPUSH
12055: LD_INT 60
12057: PPUSH
12058: LD_VAR 0 2
12062: PPUSH
12063: LD_INT 0
12065: PPUSH
12066: CALL_OW 50
12070: NOT
12071: IFFALSE 12089
// radius = radius + 1 ;
12073: LD_ADDR_VAR 0 2
12077: PUSH
12078: LD_VAR 0 2
12082: PUSH
12083: LD_INT 1
12085: PLUS
12086: ST_TO_ADDR
12087: GO 12047
// end ; end ;
12089: PPOPN 2
12091: END
// on vehiclecaptured ( vehnew , vehold , origside , hum ) marked 05 do var radius ;
12092: LD_INT 0
12094: PPUSH
// if ( vehold = vlajka1 ) then
12095: LD_VAR 0 2
12099: PUSH
12100: LD_LOC 16
12104: EQUAL
12105: IFFALSE 12258
// begin vlajka1 = vehnew ;
12107: LD_ADDR_LOC 16
12111: PUSH
12112: LD_VAR 0 1
12116: ST_TO_ADDR
// comexitvehicle ( vlajka1 ) ;
12117: LD_LOC 16
12121: PPUSH
12122: CALL_OW 121
// while isdrivenby ( vlajka1 ) do
12126: LD_LOC 16
12130: PPUSH
12131: CALL_OW 311
12135: IFFALSE 12146
// wait ( 2 ) ;
12137: LD_INT 2
12139: PPUSH
12140: CALL_OW 67
12144: GO 12126
// if getdistunitxy ( vlajka1 , 76 , 60 ) > 4 then
12146: LD_LOC 16
12150: PPUSH
12151: LD_INT 76
12153: PPUSH
12154: LD_INT 60
12156: PPUSH
12157: CALL_OW 297
12161: PUSH
12162: LD_INT 4
12164: GREATER
12165: IFFALSE 12242
// begin removeunit ( vlajka1 ) ;
12167: LD_LOC 16
12171: PPUSH
12172: CALL_OW 64
// setside ( vlajka1 , origside ) ;
12176: LD_LOC 16
12180: PPUSH
12181: LD_VAR 0 3
12185: PPUSH
12186: CALL_OW 235
// radius = 2 ;
12190: LD_ADDR_VAR 0 5
12194: PUSH
12195: LD_INT 2
12197: ST_TO_ADDR
// while not placeunitxyr ( vlajka1 , 76 , 60 , radius , false ) do
12198: LD_LOC 16
12202: PPUSH
12203: LD_INT 76
12205: PPUSH
12206: LD_INT 60
12208: PPUSH
12209: LD_VAR 0 5
12213: PPUSH
12214: LD_INT 0
12216: PPUSH
12217: CALL_OW 50
12221: NOT
12222: IFFALSE 12240
// radius = radius + 1 ;
12224: LD_ADDR_VAR 0 5
12228: PUSH
12229: LD_VAR 0 5
12233: PUSH
12234: LD_INT 1
12236: PLUS
12237: ST_TO_ADDR
12238: GO 12198
// end else
12240: GO 12256
// setside ( vlajka1 , origside ) ;
12242: LD_LOC 16
12246: PPUSH
12247: LD_VAR 0 3
12251: PPUSH
12252: CALL_OW 235
// end else
12256: GO 12419
// if ( vehold = vlajka2 ) then
12258: LD_VAR 0 2
12262: PUSH
12263: LD_LOC 17
12267: EQUAL
12268: IFFALSE 12419
// begin vlajka2 = vehnew ;
12270: LD_ADDR_LOC 17
12274: PUSH
12275: LD_VAR 0 1
12279: ST_TO_ADDR
// comexitvehicle ( vlajka2 ) ;
12280: LD_LOC 17
12284: PPUSH
12285: CALL_OW 121
// while isdrivenby ( vlajka2 ) do
12289: LD_LOC 17
12293: PPUSH
12294: CALL_OW 311
12298: IFFALSE 12309
// wait ( 2 ) ;
12300: LD_INT 2
12302: PPUSH
12303: CALL_OW 67
12307: GO 12289
// if getdistunitxy ( vlajka2 , 143 , 60 ) > 4 then
12309: LD_LOC 17
12313: PPUSH
12314: LD_INT 143
12316: PPUSH
12317: LD_INT 60
12319: PPUSH
12320: CALL_OW 297
12324: PUSH
12325: LD_INT 4
12327: GREATER
12328: IFFALSE 12405
// begin removeunit ( vlajka2 ) ;
12330: LD_LOC 17
12334: PPUSH
12335: CALL_OW 64
// setside ( vlajka2 , origside ) ;
12339: LD_LOC 17
12343: PPUSH
12344: LD_VAR 0 3
12348: PPUSH
12349: CALL_OW 235
// radius = 2 ;
12353: LD_ADDR_VAR 0 5
12357: PUSH
12358: LD_INT 2
12360: ST_TO_ADDR
// while not placeunitxyr ( vlajka2 , 143 , 60 , radius , false ) do
12361: LD_LOC 17
12365: PPUSH
12366: LD_INT 143
12368: PPUSH
12369: LD_INT 60
12371: PPUSH
12372: LD_VAR 0 5
12376: PPUSH
12377: LD_INT 0
12379: PPUSH
12380: CALL_OW 50
12384: NOT
12385: IFFALSE 12403
// radius = radius + 1 ;
12387: LD_ADDR_VAR 0 5
12391: PUSH
12392: LD_VAR 0 5
12396: PUSH
12397: LD_INT 1
12399: PLUS
12400: ST_TO_ADDR
12401: GO 12361
// end else
12403: GO 12419
// setside ( vlajka2 , origside ) ;
12405: LD_LOC 17
12409: PPUSH
12410: LD_VAR 0 3
12414: PPUSH
12415: CALL_OW 235
// end ;
12419: PPOPN 5
12421: END
// every 10 + 1 trigger getdistunitxy ( vlajka1 , 185 , 60 ) < 6 marked 06 do var radius , tmp ;
12422: LD_LOC 16
12426: PPUSH
12427: LD_INT 185
12429: PPUSH
12430: LD_INT 60
12432: PPUSH
12433: CALL_OW 297
12437: PUSH
12438: LD_INT 6
12440: LESS
12441: IFFALSE 12645
12443: GO 12445
12445: DISABLE
12446: LD_INT 0
12448: PPUSH
12449: PPUSH
// begin right_score = right_score + 1 ;
12450: LD_ADDR_LOC 23
12454: PUSH
12455: LD_LOC 23
12459: PUSH
12460: LD_INT 1
12462: PLUS
12463: ST_TO_ADDR
// refresh ;
12464: CALL 11255 0 0
// comexitvehicle ( vlajka1 ) ;
12468: LD_LOC 16
12472: PPUSH
12473: CALL_OW 121
// while isdrivenby ( vlajka1 ) do
12477: LD_LOC 16
12481: PPUSH
12482: CALL_OW 311
12486: IFFALSE 12497
// wait ( 2 ) ;
12488: LD_INT 2
12490: PPUSH
12491: CALL_OW 67
12495: GO 12477
// removeunit ( vlajka1 ) ;
12497: LD_LOC 16
12501: PPUSH
12502: CALL_OW 64
// for radius in [ mat_cans , mat_oil , mat_siberit ] do
12506: LD_ADDR_VAR 0 1
12510: PUSH
12511: LD_INT 1
12513: PUSH
12514: LD_INT 2
12516: PUSH
12517: LD_INT 3
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: LIST
12524: PUSH
12525: FOR_IN
12526: IFFALSE 12592
// begin tmp = getcargo ( vlajka1 , radius ) ;
12528: LD_ADDR_VAR 0 2
12532: PUSH
12533: LD_LOC 16
12537: PPUSH
12538: LD_VAR 0 1
12542: PPUSH
12543: CALL_OW 289
12547: ST_TO_ADDR
// if tmp then
12548: LD_VAR 0 2
12552: IFFALSE 12590
// begin addresourcetype ( pos2base , radius , tmp ) ;
12554: LD_LOC 21
12558: PPUSH
12559: LD_VAR 0 1
12563: PPUSH
12564: LD_VAR 0 2
12568: PPUSH
12569: CALL_OW 276
// setcargo ( vlajka1 , radius , 0 ) ;
12573: LD_LOC 16
12577: PPUSH
12578: LD_VAR 0 1
12582: PPUSH
12583: LD_INT 0
12585: PPUSH
12586: CALL_OW 290
// end ; end ;
12590: GO 12525
12592: POP
12593: POP
// radius = 2 ;
12594: LD_ADDR_VAR 0 1
12598: PUSH
12599: LD_INT 2
12601: ST_TO_ADDR
// while not placeunitxyr ( vlajka1 , 76 , 60 , radius , false ) do
12602: LD_LOC 16
12606: PPUSH
12607: LD_INT 76
12609: PPUSH
12610: LD_INT 60
12612: PPUSH
12613: LD_VAR 0 1
12617: PPUSH
12618: LD_INT 0
12620: PPUSH
12621: CALL_OW 50
12625: NOT
12626: IFFALSE 12644
// radius = radius + 1 ;
12628: LD_ADDR_VAR 0 1
12632: PUSH
12633: LD_VAR 0 1
12637: PUSH
12638: LD_INT 1
12640: PLUS
12641: ST_TO_ADDR
12642: GO 12602
// enable ;
12644: ENABLE
// end ;
12645: PPOPN 2
12647: END
// every 10 trigger getdistunitxy ( vlajka2 , 34 , 60 ) < 6 marked 07 do var radius , tmp ;
12648: LD_LOC 17
12652: PPUSH
12653: LD_INT 34
12655: PPUSH
12656: LD_INT 60
12658: PPUSH
12659: CALL_OW 297
12663: PUSH
12664: LD_INT 6
12666: LESS
12667: IFFALSE 12871
12669: GO 12671
12671: DISABLE
12672: LD_INT 0
12674: PPUSH
12675: PPUSH
// begin left_score = left_score + 1 ;
12676: LD_ADDR_LOC 22
12680: PUSH
12681: LD_LOC 22
12685: PUSH
12686: LD_INT 1
12688: PLUS
12689: ST_TO_ADDR
// refresh ;
12690: CALL 11255 0 0
// comexitvehicle ( vlajka2 ) ;
12694: LD_LOC 17
12698: PPUSH
12699: CALL_OW 121
// while isdrivenby ( vlajka2 ) do
12703: LD_LOC 17
12707: PPUSH
12708: CALL_OW 311
12712: IFFALSE 12723
// wait ( 2 ) ;
12714: LD_INT 2
12716: PPUSH
12717: CALL_OW 67
12721: GO 12703
// removeunit ( vlajka2 ) ;
12723: LD_LOC 17
12727: PPUSH
12728: CALL_OW 64
// for radius in [ mat_cans , mat_oil , mat_siberit ] do
12732: LD_ADDR_VAR 0 1
12736: PUSH
12737: LD_INT 1
12739: PUSH
12740: LD_INT 2
12742: PUSH
12743: LD_INT 3
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: LIST
12750: PUSH
12751: FOR_IN
12752: IFFALSE 12818
// begin tmp = getcargo ( vlajka2 , radius ) ;
12754: LD_ADDR_VAR 0 2
12758: PUSH
12759: LD_LOC 17
12763: PPUSH
12764: LD_VAR 0 1
12768: PPUSH
12769: CALL_OW 289
12773: ST_TO_ADDR
// if tmp then
12774: LD_VAR 0 2
12778: IFFALSE 12816
// begin addresourcetype ( pos1base , radius , tmp ) ;
12780: LD_LOC 20
12784: PPUSH
12785: LD_VAR 0 1
12789: PPUSH
12790: LD_VAR 0 2
12794: PPUSH
12795: CALL_OW 276
// setcargo ( vlajka2 , radius , 0 ) ;
12799: LD_LOC 17
12803: PPUSH
12804: LD_VAR 0 1
12808: PPUSH
12809: LD_INT 0
12811: PPUSH
12812: CALL_OW 290
// end ; end ;
12816: GO 12751
12818: POP
12819: POP
// radius = 2 ;
12820: LD_ADDR_VAR 0 1
12824: PUSH
12825: LD_INT 2
12827: ST_TO_ADDR
// while not placeunitxyr ( vlajka2 , 143 , 60 , radius , false ) do
12828: LD_LOC 17
12832: PPUSH
12833: LD_INT 143
12835: PPUSH
12836: LD_INT 60
12838: PPUSH
12839: LD_VAR 0 1
12843: PPUSH
12844: LD_INT 0
12846: PPUSH
12847: CALL_OW 50
12851: NOT
12852: IFFALSE 12870
// radius = radius + 1 ;
12854: LD_ADDR_VAR 0 1
12858: PUSH
12859: LD_VAR 0 1
12863: PUSH
12864: LD_INT 1
12866: PLUS
12867: ST_TO_ADDR
12868: GO 12828
// enable ;
12870: ENABLE
// end ; end_of_file
12871: PPOPN 2
12873: END
// var zakladna , skilly , start_res , extra_oil , extra_sib , zakl_plus , batt_fl , sib_det , people_resp , siberitofka ; var fortpos , areasdiff , directions ; var resp_cnt1 , resp_cnt2 ; export function other_game ; var tmp , tmp2 , tmp3 , cl ; begin
12874: LD_INT 0
12876: PPUSH
12877: PPUSH
12878: PPUSH
12879: PPUSH
12880: PPUSH
// ctf = false ;
12881: LD_ADDR_EXP 47
12885: PUSH
12886: LD_INT 0
12888: ST_TO_ADDR
// resp_cnt1 = 0 ;
12889: LD_ADDR_LOC 47
12893: PUSH
12894: LD_INT 0
12896: ST_TO_ADDR
// resp_cnt2 = 0 ;
12897: LD_ADDR_LOC 48
12901: PUSH
12902: LD_INT 0
12904: ST_TO_ADDR
// enable ( nonctf_13 ) ;
12905: LD_EXP 55
12909: ENABLE_MARKED
// for tmp = 1 to 8 do
12910: LD_ADDR_VAR 0 2
12914: PUSH
12915: DOUBLE
12916: LD_INT 1
12918: DEC
12919: ST_TO_ADDR
12920: LD_INT 8
12922: PUSH
12923: FOR_TO
12924: IFFALSE 12985
// begin setrestrict ( b_depot , tmp , state_enabled ) ;
12926: LD_INT 0
12928: PPUSH
12929: LD_VAR 0 2
12933: PPUSH
12934: LD_INT 1
12936: PPUSH
12937: CALL_OW 324
// if sib_det then
12941: LD_LOC 41
12945: IFFALSE 12962
// settech ( tech_sibdet , tmp , state_researched ) ;
12947: LD_INT 20
12949: PPUSH
12950: LD_VAR 0 2
12954: PPUSH
12955: LD_INT 2
12957: PPUSH
12958: CALL_OW 322
// if siberitofka then
12962: LD_LOC 43
12966: IFFALSE 12983
// settech ( tech_sibfiss , tmp , state_enabled ) ;
12968: LD_INT 25
12970: PPUSH
12971: LD_VAR 0 2
12975: PPUSH
12976: LD_INT 1
12978: PPUSH
12979: CALL_OW 322
// end ;
12983: GO 12923
12985: POP
12986: POP
// if multiplayer then
12987: LD_OWVAR 4
12991: IFFALSE 13164
// begin zakladna = getmultiplayersetting ( 0 ) ;
12993: LD_ADDR_LOC 34
12997: PUSH
12998: LD_INT 0
13000: PPUSH
13001: CALL_OW 426
13005: ST_TO_ADDR
// lidi = getmultiplayersetting ( 1 ) ;
13006: LD_ADDR_EXP 37
13010: PUSH
13011: LD_INT 1
13013: PPUSH
13014: CALL_OW 426
13018: ST_TO_ADDR
// skilly = getmultiplayersetting ( 2 ) ;
13019: LD_ADDR_LOC 35
13023: PUSH
13024: LD_INT 2
13026: PPUSH
13027: CALL_OW 426
13031: ST_TO_ADDR
// start_res = getmultiplayersetting ( 3 ) ;
13032: LD_ADDR_LOC 36
13036: PUSH
13037: LD_INT 3
13039: PPUSH
13040: CALL_OW 426
13044: ST_TO_ADDR
// krabice = getmultiplayersetting ( 4 ) ;
13045: LD_ADDR_EXP 38
13049: PUSH
13050: LD_INT 4
13052: PPUSH
13053: CALL_OW 426
13057: ST_TO_ADDR
// extra_oil = getmultiplayersetting ( 5 ) ;
13058: LD_ADDR_LOC 37
13062: PUSH
13063: LD_INT 5
13065: PPUSH
13066: CALL_OW 426
13070: ST_TO_ADDR
// extra_sib = getmultiplayersetting ( 6 ) ;
13071: LD_ADDR_LOC 38
13075: PUSH
13076: LD_INT 6
13078: PPUSH
13079: CALL_OW 426
13083: ST_TO_ADDR
// zakl_plus = getmultiplayersetting ( 7 ) ;
13084: LD_ADDR_LOC 39
13088: PUSH
13089: LD_INT 7
13091: PPUSH
13092: CALL_OW 426
13096: ST_TO_ADDR
// batt_fl = getmultiplayersetting ( 11 ) ;
13097: LD_ADDR_LOC 40
13101: PUSH
13102: LD_INT 11
13104: PPUSH
13105: CALL_OW 426
13109: ST_TO_ADDR
// sib_det = getmultiplayersetting ( 12 ) ;
13110: LD_ADDR_LOC 41
13114: PUSH
13115: LD_INT 12
13117: PPUSH
13118: CALL_OW 426
13122: ST_TO_ADDR
// opoce = getmultiplayersetting ( 13 ) ;
13123: LD_ADDR_EXP 39
13127: PUSH
13128: LD_INT 13
13130: PPUSH
13131: CALL_OW 426
13135: ST_TO_ADDR
// people_resp = getmultiplayersetting ( 14 ) ;
13136: LD_ADDR_LOC 42
13140: PUSH
13141: LD_INT 14
13143: PPUSH
13144: CALL_OW 426
13148: ST_TO_ADDR
// siberitofka = getmultiplayersetting ( 15 ) ;
13149: LD_ADDR_LOC 43
13153: PUSH
13154: LD_INT 15
13156: PPUSH
13157: CALL_OW 426
13161: ST_TO_ADDR
// end else
13162: GO 13268
// begin zakladna = 1 ;
13164: LD_ADDR_LOC 34
13168: PUSH
13169: LD_INT 1
13171: ST_TO_ADDR
// lidi = 1 ;
13172: LD_ADDR_EXP 37
13176: PUSH
13177: LD_INT 1
13179: ST_TO_ADDR
// skilly = 1 ;
13180: LD_ADDR_LOC 35
13184: PUSH
13185: LD_INT 1
13187: ST_TO_ADDR
// start_res = 2 ;
13188: LD_ADDR_LOC 36
13192: PUSH
13193: LD_INT 2
13195: ST_TO_ADDR
// krabice = 1 ;
13196: LD_ADDR_EXP 38
13200: PUSH
13201: LD_INT 1
13203: ST_TO_ADDR
// extra_oil = 1 ;
13204: LD_ADDR_LOC 37
13208: PUSH
13209: LD_INT 1
13211: ST_TO_ADDR
// extra_sib = 1 ;
13212: LD_ADDR_LOC 38
13216: PUSH
13217: LD_INT 1
13219: ST_TO_ADDR
// zakl_plus = 2 ;
13220: LD_ADDR_LOC 39
13224: PUSH
13225: LD_INT 2
13227: ST_TO_ADDR
// batt_fl = 0 ;
13228: LD_ADDR_LOC 40
13232: PUSH
13233: LD_INT 0
13235: ST_TO_ADDR
// sib_det = 0 ;
13236: LD_ADDR_LOC 41
13240: PUSH
13241: LD_INT 0
13243: ST_TO_ADDR
// opoce = 3 ;
13244: LD_ADDR_EXP 39
13248: PUSH
13249: LD_INT 3
13251: ST_TO_ADDR
// people_resp = 0 ;
13252: LD_ADDR_LOC 42
13256: PUSH
13257: LD_INT 0
13259: ST_TO_ADDR
// siberitofka = 0 ;
13260: LD_ADDR_LOC 43
13264: PUSH
13265: LD_INT 0
13267: ST_TO_ADDR
// end ; if people_resp then
13268: LD_LOC 42
13272: IFFALSE 13289
// begin enable ( nonctf_10 ) ;
13274: LD_EXP 52
13278: ENABLE_MARKED
// enable ( nonctf_11 ) ;
13279: LD_EXP 53
13283: ENABLE_MARKED
// enable ( nonctf_12 ) ;
13284: LD_EXP 54
13288: ENABLE_MARKED
// end ; if people_resp = 1 then
13289: LD_LOC 42
13293: PUSH
13294: LD_INT 1
13296: EQUAL
13297: IFFALSE 13307
// people_resp = 3 ;
13299: LD_ADDR_LOC 42
13303: PUSH
13304: LD_INT 3
13306: ST_TO_ADDR
// if people_resp = 2 then
13307: LD_LOC 42
13311: PUSH
13312: LD_INT 2
13314: EQUAL
13315: IFFALSE 13325
// people_resp = 1 ;
13317: LD_ADDR_LOC 42
13321: PUSH
13322: LD_INT 1
13324: ST_TO_ADDR
// case lidi of 0 :
13325: LD_EXP 37
13329: PUSH
13330: LD_INT 0
13332: DOUBLE
13333: EQUAL
13334: IFTRUE 13338
13336: GO 13349
13338: POP
// lidi = 9 ; 1 :
13339: LD_ADDR_EXP 37
13343: PUSH
13344: LD_INT 9
13346: ST_TO_ADDR
13347: GO 13426
13349: LD_INT 1
13351: DOUBLE
13352: EQUAL
13353: IFTRUE 13357
13355: GO 13368
13357: POP
// lidi = 13 ; 2 :
13358: LD_ADDR_EXP 37
13362: PUSH
13363: LD_INT 13
13365: ST_TO_ADDR
13366: GO 13426
13368: LD_INT 2
13370: DOUBLE
13371: EQUAL
13372: IFTRUE 13376
13374: GO 13387
13376: POP
// lidi = 19 ; 3 :
13377: LD_ADDR_EXP 37
13381: PUSH
13382: LD_INT 19
13384: ST_TO_ADDR
13385: GO 13426
13387: LD_INT 3
13389: DOUBLE
13390: EQUAL
13391: IFTRUE 13395
13393: GO 13406
13395: POP
// lidi = 23 ; 4 :
13396: LD_ADDR_EXP 37
13400: PUSH
13401: LD_INT 23
13403: ST_TO_ADDR
13404: GO 13426
13406: LD_INT 4
13408: DOUBLE
13409: EQUAL
13410: IFTRUE 13414
13412: GO 13425
13414: POP
// lidi = 29 ; end ;
13415: LD_ADDR_EXP 37
13419: PUSH
13420: LD_INT 29
13422: ST_TO_ADDR
13423: GO 13426
13425: POP
// skilly = skilly + 1 ;
13426: LD_ADDR_LOC 35
13430: PUSH
13431: LD_LOC 35
13435: PUSH
13436: LD_INT 1
13438: PLUS
13439: ST_TO_ADDR
// case start_res of 0 :
13440: LD_LOC 36
13444: PUSH
13445: LD_INT 0
13447: DOUBLE
13448: EQUAL
13449: IFTRUE 13453
13451: GO 13464
13453: POP
// start_res = 0 ; 1 :
13454: LD_ADDR_LOC 36
13458: PUSH
13459: LD_INT 0
13461: ST_TO_ADDR
13462: GO 13522
13464: LD_INT 1
13466: DOUBLE
13467: EQUAL
13468: IFTRUE 13472
13470: GO 13483
13472: POP
// start_res = 50 ; 2 :
13473: LD_ADDR_LOC 36
13477: PUSH
13478: LD_INT 50
13480: ST_TO_ADDR
13481: GO 13522
13483: LD_INT 2
13485: DOUBLE
13486: EQUAL
13487: IFTRUE 13491
13489: GO 13502
13491: POP
// start_res = 100 ; 3 :
13492: LD_ADDR_LOC 36
13496: PUSH
13497: LD_INT 100
13499: ST_TO_ADDR
13500: GO 13522
13502: LD_INT 3
13504: DOUBLE
13505: EQUAL
13506: IFTRUE 13510
13508: GO 13521
13510: POP
// start_res = 200 ; end ;
13511: LD_ADDR_LOC 36
13515: PUSH
13516: LD_INT 200
13518: ST_TO_ADDR
13519: GO 13522
13521: POP
// case krabice of 0 :
13522: LD_EXP 38
13526: PUSH
13527: LD_INT 0
13529: DOUBLE
13530: EQUAL
13531: IFTRUE 13535
13533: GO 13546
13535: POP
// cperiode = 1 1$30 ; 1 :
13536: LD_ADDR_EXP 41
13540: PUSH
13541: LD_INT 3150
13543: ST_TO_ADDR
13544: GO 13585
13546: LD_INT 1
13548: DOUBLE
13549: EQUAL
13550: IFTRUE 13554
13552: GO 13565
13554: POP
// cperiode = 1 1$00 ; 2 :
13555: LD_ADDR_EXP 41
13559: PUSH
13560: LD_INT 2100
13562: ST_TO_ADDR
13563: GO 13585
13565: LD_INT 2
13567: DOUBLE
13568: EQUAL
13569: IFTRUE 13573
13571: GO 13584
13573: POP
// cperiode = 0 0$30 ; end ;
13574: LD_ADDR_EXP 41
13578: PUSH
13579: LD_INT 1050
13581: ST_TO_ADDR
13582: GO 13585
13584: POP
// case opoce of 0 :
13585: LD_EXP 39
13589: PUSH
13590: LD_INT 0
13592: DOUBLE
13593: EQUAL
13594: IFTRUE 13598
13596: GO 13609
13598: POP
// opoce = 0 ; 1 :
13599: LD_ADDR_EXP 39
13603: PUSH
13604: LD_INT 0
13606: ST_TO_ADDR
13607: GO 13724
13609: LD_INT 1
13611: DOUBLE
13612: EQUAL
13613: IFTRUE 13617
13615: GO 13628
13617: POP
// opoce = 3 ; 2 :
13618: LD_ADDR_EXP 39
13622: PUSH
13623: LD_INT 3
13625: ST_TO_ADDR
13626: GO 13724
13628: LD_INT 2
13630: DOUBLE
13631: EQUAL
13632: IFTRUE 13636
13634: GO 13647
13636: POP
// opoce = 7 ; 3 :
13637: LD_ADDR_EXP 39
13641: PUSH
13642: LD_INT 7
13644: ST_TO_ADDR
13645: GO 13724
13647: LD_INT 3
13649: DOUBLE
13650: EQUAL
13651: IFTRUE 13655
13653: GO 13666
13655: POP
// opoce = 11 ; 4 :
13656: LD_ADDR_EXP 39
13660: PUSH
13661: LD_INT 11
13663: ST_TO_ADDR
13664: GO 13724
13666: LD_INT 4
13668: DOUBLE
13669: EQUAL
13670: IFTRUE 13674
13672: GO 13685
13674: POP
// opoce = 15 ; 5 :
13675: LD_ADDR_EXP 39
13679: PUSH
13680: LD_INT 15
13682: ST_TO_ADDR
13683: GO 13724
13685: LD_INT 5
13687: DOUBLE
13688: EQUAL
13689: IFTRUE 13693
13691: GO 13704
13693: POP
// opoce = 19 ; 6 :
13694: LD_ADDR_EXP 39
13698: PUSH
13699: LD_INT 19
13701: ST_TO_ADDR
13702: GO 13724
13704: LD_INT 6
13706: DOUBLE
13707: EQUAL
13708: IFTRUE 13712
13710: GO 13723
13712: POP
// opoce = 23 ; end ;
13713: LD_ADDR_EXP 39
13717: PUSH
13718: LD_INT 23
13720: ST_TO_ADDR
13721: GO 13724
13723: POP
// fortpos = [ [ [ 46 , 53 , 4 ] , [ 51 , 62 , 4 ] ] , [ [ 167 , 53 , 1 ] , [ 173 , 64 , 1 ] ] ] ;
13724: LD_ADDR_LOC 44
13728: PUSH
13729: LD_INT 46
13731: PUSH
13732: LD_INT 53
13734: PUSH
13735: LD_INT 4
13737: PUSH
13738: EMPTY
13739: LIST
13740: LIST
13741: LIST
13742: PUSH
13743: LD_INT 51
13745: PUSH
13746: LD_INT 62
13748: PUSH
13749: LD_INT 4
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: LIST
13756: PUSH
13757: EMPTY
13758: LIST
13759: LIST
13760: PUSH
13761: LD_INT 167
13763: PUSH
13764: LD_INT 53
13766: PUSH
13767: LD_INT 1
13769: PUSH
13770: EMPTY
13771: LIST
13772: LIST
13773: LIST
13774: PUSH
13775: LD_INT 173
13777: PUSH
13778: LD_INT 64
13780: PUSH
13781: LD_INT 1
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: LIST
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: ST_TO_ADDR
// areasdiff = [ vlevodiff , vpravodiff ] ;
13797: LD_ADDR_LOC 45
13801: PUSH
13802: LD_INT 16
13804: PUSH
13805: LD_INT 17
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: ST_TO_ADDR
// directions = [ 4 , 1 ] ;
13812: LD_ADDR_LOC 46
13816: PUSH
13817: LD_INT 4
13819: PUSH
13820: LD_INT 1
13822: PUSH
13823: EMPTY
13824: LIST
13825: LIST
13826: ST_TO_ADDR
// for tmp = 1 to 8 do
13827: LD_ADDR_VAR 0 2
13831: PUSH
13832: DOUBLE
13833: LD_INT 1
13835: DEC
13836: ST_TO_ADDR
13837: LD_INT 8
13839: PUSH
13840: FOR_TO
13841: IFFALSE 15010
// if mp_sides_nations_ [ tmp ] then
13843: LD_EXP 49
13847: PUSH
13848: LD_VAR 0 2
13852: ARRAY
13853: IFFALSE 15008
// begin if mp_sides_positions_ [ tmp ] = 1 then
13855: LD_EXP 50
13859: PUSH
13860: LD_VAR 0 2
13864: ARRAY
13865: PUSH
13866: LD_INT 1
13868: EQUAL
13869: IFFALSE 13883
// pos1side = tmp else
13871: LD_ADDR_EXP 44
13875: PUSH
13876: LD_VAR 0 2
13880: ST_TO_ADDR
13881: GO 13893
// pos2side = tmp ;
13883: LD_ADDR_EXP 45
13887: PUSH
13888: LD_VAR 0 2
13892: ST_TO_ADDR
// uc_side = tmp ;
13893: LD_ADDR_OWVAR 20
13897: PUSH
13898: LD_VAR 0 2
13902: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ tmp ] ;
13903: LD_ADDR_OWVAR 21
13907: PUSH
13908: LD_EXP 49
13912: PUSH
13913: LD_VAR 0 2
13917: ARRAY
13918: ST_TO_ADDR
// bc_type = b_depot ;
13919: LD_ADDR_OWVAR 42
13923: PUSH
13924: LD_INT 0
13926: ST_TO_ADDR
// bc_level = 1 ;
13927: LD_ADDR_OWVAR 43
13931: PUSH
13932: LD_INT 1
13934: ST_TO_ADDR
// tmp2 = createandplacebuildingxyd ( depotpositions [ mp_sides_positions_ [ tmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 2 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 3 ] ) ;
13935: LD_ADDR_VAR 0 3
13939: PUSH
13940: LD_EXP 42
13944: PUSH
13945: LD_EXP 50
13949: PUSH
13950: LD_VAR 0 2
13954: ARRAY
13955: ARRAY
13956: PUSH
13957: LD_INT 1
13959: ARRAY
13960: PPUSH
13961: LD_EXP 42
13965: PUSH
13966: LD_EXP 50
13970: PUSH
13971: LD_VAR 0 2
13975: ARRAY
13976: ARRAY
13977: PUSH
13978: LD_INT 2
13980: ARRAY
13981: PPUSH
13982: LD_EXP 42
13986: PUSH
13987: LD_EXP 50
13991: PUSH
13992: LD_VAR 0 2
13996: ARRAY
13997: ARRAY
13998: PUSH
13999: LD_INT 3
14001: ARRAY
14002: PPUSH
14003: CALL_OW 47
14007: ST_TO_ADDR
// if batt_fl then
14008: LD_LOC 40
14012: IFFALSE 14122
// setbattleflag ( tmp , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 2 ] , [ [ bfo_defend_bonus_human , 80 ] , [ bfo_defend_bonus_vehicle , 40 ] , [ bfo_defend_bonus_building , 0 ] , [ bfo_range , 17 ] , [ bfo_height , 100 ] ] ) ;
14014: LD_VAR 0 2
14018: PPUSH
14019: LD_EXP 42
14023: PUSH
14024: LD_EXP 50
14028: PUSH
14029: LD_VAR 0 2
14033: ARRAY
14034: ARRAY
14035: PUSH
14036: LD_INT 1
14038: ARRAY
14039: PPUSH
14040: LD_EXP 42
14044: PUSH
14045: LD_EXP 50
14049: PUSH
14050: LD_VAR 0 2
14054: ARRAY
14055: ARRAY
14056: PUSH
14057: LD_INT 2
14059: ARRAY
14060: PPUSH
14061: LD_INT 1
14063: PUSH
14064: LD_INT 80
14066: PUSH
14067: EMPTY
14068: LIST
14069: LIST
14070: PUSH
14071: LD_INT 2
14073: PUSH
14074: LD_INT 40
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: PUSH
14081: LD_INT 3
14083: PUSH
14084: LD_INT 0
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: PUSH
14091: LD_INT 10
14093: PUSH
14094: LD_INT 17
14096: PUSH
14097: EMPTY
14098: LIST
14099: LIST
14100: PUSH
14101: LD_INT 20
14103: PUSH
14104: LD_INT 100
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: PUSH
14111: EMPTY
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: PPUSH
14118: CALL_OW 418
// if zakladna then
14122: LD_LOC 34
14126: IFFALSE 14294
// begin bc_type = b_breastwork ;
14128: LD_ADDR_OWVAR 42
14132: PUSH
14133: LD_INT 31
14135: ST_TO_ADDR
// createandplacebuildingxyd ( fortpos [ mp_sides_positions_ [ tmp ] ] [ 1 ] [ 1 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 1 ] [ 2 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 1 ] [ 3 ] ) ;
14136: LD_LOC 44
14140: PUSH
14141: LD_EXP 50
14145: PUSH
14146: LD_VAR 0 2
14150: ARRAY
14151: ARRAY
14152: PUSH
14153: LD_INT 1
14155: ARRAY
14156: PUSH
14157: LD_INT 1
14159: ARRAY
14160: PPUSH
14161: LD_LOC 44
14165: PUSH
14166: LD_EXP 50
14170: PUSH
14171: LD_VAR 0 2
14175: ARRAY
14176: ARRAY
14177: PUSH
14178: LD_INT 1
14180: ARRAY
14181: PUSH
14182: LD_INT 2
14184: ARRAY
14185: PPUSH
14186: LD_LOC 44
14190: PUSH
14191: LD_EXP 50
14195: PUSH
14196: LD_VAR 0 2
14200: ARRAY
14201: ARRAY
14202: PUSH
14203: LD_INT 1
14205: ARRAY
14206: PUSH
14207: LD_INT 3
14209: ARRAY
14210: PPUSH
14211: CALL_OW 47
// createandplacebuildingxyd ( fortpos [ mp_sides_positions_ [ tmp ] ] [ 2 ] [ 1 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 2 ] [ 2 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 2 ] [ 3 ] ) ;
14215: LD_LOC 44
14219: PUSH
14220: LD_EXP 50
14224: PUSH
14225: LD_VAR 0 2
14229: ARRAY
14230: ARRAY
14231: PUSH
14232: LD_INT 2
14234: ARRAY
14235: PUSH
14236: LD_INT 1
14238: ARRAY
14239: PPUSH
14240: LD_LOC 44
14244: PUSH
14245: LD_EXP 50
14249: PUSH
14250: LD_VAR 0 2
14254: ARRAY
14255: ARRAY
14256: PUSH
14257: LD_INT 2
14259: ARRAY
14260: PUSH
14261: LD_INT 2
14263: ARRAY
14264: PPUSH
14265: LD_LOC 44
14269: PUSH
14270: LD_EXP 50
14274: PUSH
14275: LD_VAR 0 2
14279: ARRAY
14280: ARRAY
14281: PUSH
14282: LD_INT 2
14284: ARRAY
14285: PUSH
14286: LD_INT 3
14288: ARRAY
14289: PPUSH
14290: CALL_OW 47
// end ; addresourcetype ( getbase ( tmp2 ) , mat_cans , start_res ) ;
14294: LD_VAR 0 3
14298: PPUSH
14299: CALL_OW 274
14303: PPUSH
14304: LD_INT 1
14306: PPUSH
14307: LD_LOC 36
14311: PPUSH
14312: CALL_OW 276
// if extra_oil then
14316: LD_LOC 37
14320: IFFALSE 14412
// begin tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14322: LD_ADDR_VAR 0 3
14326: PUSH
14327: LD_LOC 45
14331: PUSH
14332: LD_EXP 50
14336: PUSH
14337: LD_VAR 0 2
14341: ARRAY
14342: ARRAY
14343: PPUSH
14344: LD_INT 0
14346: PPUSH
14347: CALL_OW 16
14351: ST_TO_ADDR
// while not createdepositxy ( tmp2 [ 1 ] , tmp2 [ 2 ] , mat_oil ) do
14352: LD_VAR 0 3
14356: PUSH
14357: LD_INT 1
14359: ARRAY
14360: PPUSH
14361: LD_VAR 0 3
14365: PUSH
14366: LD_INT 2
14368: ARRAY
14369: PPUSH
14370: LD_INT 2
14372: PPUSH
14373: CALL_OW 62
14377: NOT
14378: IFFALSE 14412
// tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14380: LD_ADDR_VAR 0 3
14384: PUSH
14385: LD_LOC 45
14389: PUSH
14390: LD_EXP 50
14394: PUSH
14395: LD_VAR 0 2
14399: ARRAY
14400: ARRAY
14401: PPUSH
14402: LD_INT 0
14404: PPUSH
14405: CALL_OW 16
14409: ST_TO_ADDR
14410: GO 14352
// end ; if extra_sib then
14412: LD_LOC 38
14416: IFFALSE 14508
// begin tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14418: LD_ADDR_VAR 0 3
14422: PUSH
14423: LD_LOC 45
14427: PUSH
14428: LD_EXP 50
14432: PUSH
14433: LD_VAR 0 2
14437: ARRAY
14438: ARRAY
14439: PPUSH
14440: LD_INT 0
14442: PPUSH
14443: CALL_OW 16
14447: ST_TO_ADDR
// while not createdepositxy ( tmp2 [ 1 ] , tmp2 [ 2 ] , mat_siberit ) do
14448: LD_VAR 0 3
14452: PUSH
14453: LD_INT 1
14455: ARRAY
14456: PPUSH
14457: LD_VAR 0 3
14461: PUSH
14462: LD_INT 2
14464: ARRAY
14465: PPUSH
14466: LD_INT 3
14468: PPUSH
14469: CALL_OW 62
14473: NOT
14474: IFFALSE 14508
// tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14476: LD_ADDR_VAR 0 3
14480: PUSH
14481: LD_LOC 45
14485: PUSH
14486: LD_EXP 50
14490: PUSH
14491: LD_VAR 0 2
14495: ARRAY
14496: ARRAY
14497: PPUSH
14498: LD_INT 0
14500: PPUSH
14501: CALL_OW 16
14505: ST_TO_ADDR
14506: GO 14448
// end ; if zakl_plus > 0 then
14508: LD_LOC 39
14512: PUSH
14513: LD_INT 0
14515: GREATER
14516: IFFALSE 14776
// begin bc_type = b_lab ;
14518: LD_ADDR_OWVAR 42
14522: PUSH
14523: LD_INT 6
14525: ST_TO_ADDR
// uc_direction = directions [ mp_sides_positions_ [ tmp ] ] ;
14526: LD_ADDR_OWVAR 24
14530: PUSH
14531: LD_LOC 46
14535: PUSH
14536: LD_EXP 50
14540: PUSH
14541: LD_VAR 0 2
14545: ARRAY
14546: ARRAY
14547: ST_TO_ADDR
// tmp3 = createbuilding ;
14548: LD_ADDR_VAR 0 4
14552: PUSH
14553: CALL_OW 46
14557: ST_TO_ADDR
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14558: LD_ADDR_VAR 0 3
14562: PUSH
14563: LD_EXP 43
14567: PUSH
14568: LD_EXP 50
14572: PUSH
14573: LD_VAR 0 2
14577: ARRAY
14578: ARRAY
14579: PPUSH
14580: LD_INT 0
14582: PPUSH
14583: CALL_OW 16
14587: ST_TO_ADDR
// while not placeunitxy ( tmp3 , tmp2 [ 1 ] , tmp2 [ 2 ] , false ) do
14588: LD_VAR 0 4
14592: PPUSH
14593: LD_VAR 0 3
14597: PUSH
14598: LD_INT 1
14600: ARRAY
14601: PPUSH
14602: LD_VAR 0 3
14606: PUSH
14607: LD_INT 2
14609: ARRAY
14610: PPUSH
14611: LD_INT 0
14613: PPUSH
14614: CALL_OW 48
14618: NOT
14619: IFFALSE 14653
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14621: LD_ADDR_VAR 0 3
14625: PUSH
14626: LD_EXP 43
14630: PUSH
14631: LD_EXP 50
14635: PUSH
14636: LD_VAR 0 2
14640: ARRAY
14641: ARRAY
14642: PPUSH
14643: LD_INT 0
14645: PPUSH
14646: CALL_OW 16
14650: ST_TO_ADDR
14651: GO 14588
// if zakl_plus > 1 then
14653: LD_LOC 39
14657: PUSH
14658: LD_INT 1
14660: GREATER
14661: IFFALSE 14776
// begin bc_type = b_workshop ;
14663: LD_ADDR_OWVAR 42
14667: PUSH
14668: LD_INT 2
14670: ST_TO_ADDR
// tmp3 = createbuilding ;
14671: LD_ADDR_VAR 0 4
14675: PUSH
14676: CALL_OW 46
14680: ST_TO_ADDR
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14681: LD_ADDR_VAR 0 3
14685: PUSH
14686: LD_EXP 43
14690: PUSH
14691: LD_EXP 50
14695: PUSH
14696: LD_VAR 0 2
14700: ARRAY
14701: ARRAY
14702: PPUSH
14703: LD_INT 0
14705: PPUSH
14706: CALL_OW 16
14710: ST_TO_ADDR
// while not placeunitxy ( tmp3 , tmp2 [ 1 ] , tmp2 [ 2 ] , false ) do
14711: LD_VAR 0 4
14715: PPUSH
14716: LD_VAR 0 3
14720: PUSH
14721: LD_INT 1
14723: ARRAY
14724: PPUSH
14725: LD_VAR 0 3
14729: PUSH
14730: LD_INT 2
14732: ARRAY
14733: PPUSH
14734: LD_INT 0
14736: PPUSH
14737: CALL_OW 48
14741: NOT
14742: IFFALSE 14776
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14744: LD_ADDR_VAR 0 3
14748: PUSH
14749: LD_EXP 43
14753: PUSH
14754: LD_EXP 50
14758: PUSH
14759: LD_VAR 0 2
14763: ARRAY
14764: ARRAY
14765: PPUSH
14766: LD_INT 0
14768: PPUSH
14769: CALL_OW 16
14773: ST_TO_ADDR
14774: GO 14711
// end ; end ; if batt_fl then
14776: LD_LOC 40
14780: IFFALSE 14890
// setbattleflag ( tmp , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 2 ] , [ [ bfo_defend_bonus_human , 80 ] , [ bfo_defend_bonus_vehicle , 40 ] , [ bfo_defend_bonus_building , 0 ] , [ bfo_range , 17 ] , [ bfo_height , 100 ] ] ) ;
14782: LD_VAR 0 2
14786: PPUSH
14787: LD_EXP 42
14791: PUSH
14792: LD_EXP 50
14796: PUSH
14797: LD_VAR 0 2
14801: ARRAY
14802: ARRAY
14803: PUSH
14804: LD_INT 1
14806: ARRAY
14807: PPUSH
14808: LD_EXP 42
14812: PUSH
14813: LD_EXP 50
14817: PUSH
14818: LD_VAR 0 2
14822: ARRAY
14823: ARRAY
14824: PUSH
14825: LD_INT 2
14827: ARRAY
14828: PPUSH
14829: LD_INT 1
14831: PUSH
14832: LD_INT 80
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: PUSH
14839: LD_INT 2
14841: PUSH
14842: LD_INT 40
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PUSH
14849: LD_INT 3
14851: PUSH
14852: LD_INT 0
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PUSH
14859: LD_INT 10
14861: PUSH
14862: LD_INT 17
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: PUSH
14869: LD_INT 20
14871: PUSH
14872: LD_INT 100
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: PPUSH
14886: CALL_OW 418
// cl = class_scientistic ;
14890: LD_ADDR_VAR 0 5
14894: PUSH
14895: LD_INT 4
14897: ST_TO_ADDR
// for tmp2 = 1 to lidi do
14898: LD_ADDR_VAR 0 3
14902: PUSH
14903: DOUBLE
14904: LD_INT 1
14906: DEC
14907: ST_TO_ADDR
14908: LD_EXP 37
14912: PUSH
14913: FOR_TO
14914: IFFALSE 15006
// begin if tmp2 >= lidi / 2 then
14916: LD_VAR 0 3
14920: PUSH
14921: LD_EXP 37
14925: PUSH
14926: LD_INT 2
14928: DIVREAL
14929: GREATEREQUAL
14930: IFFALSE 14940
// cl = class_soldier ;
14932: LD_ADDR_VAR 0 5
14936: PUSH
14937: LD_INT 1
14939: ST_TO_ADDR
// preparehuman ( 0 , cl , skilly ) ;
14940: LD_INT 0
14942: PPUSH
14943: LD_VAR 0 5
14947: PPUSH
14948: LD_LOC 35
14952: PPUSH
14953: CALL_OW 380
// if tmp2 = 1 then
14957: LD_VAR 0 3
14961: PUSH
14962: LD_INT 1
14964: EQUAL
14965: IFFALSE 14975
// cl = class_engineer ;
14967: LD_ADDR_VAR 0 5
14971: PUSH
14972: LD_INT 2
14974: ST_TO_ADDR
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14975: CALL_OW 44
14979: PPUSH
14980: LD_EXP 43
14984: PUSH
14985: LD_EXP 50
14989: PUSH
14990: LD_VAR 0 2
14994: ARRAY
14995: ARRAY
14996: PPUSH
14997: LD_INT 0
14999: PPUSH
15000: CALL_OW 49
// end ;
15004: GO 14913
15006: POP
15007: POP
// end ;
15008: GO 13840
15010: POP
15011: POP
// uc_side = 0 ;
15012: LD_ADDR_OWVAR 20
15016: PUSH
15017: LD_INT 0
15019: ST_TO_ADDR
// uc_nation = nation_nature ;
15020: LD_ADDR_OWVAR 21
15024: PUSH
15025: LD_INT 0
15027: ST_TO_ADDR
// for tmp = 1 to opoce do
15028: LD_ADDR_VAR 0 2
15032: PUSH
15033: DOUBLE
15034: LD_INT 1
15036: DEC
15037: ST_TO_ADDR
15038: LD_EXP 39
15042: PUSH
15043: FOR_TO
15044: IFFALSE 15076
// begin preparehuman ( 0 , class_apeman , 0 ) ;
15046: LD_INT 0
15048: PPUSH
15049: LD_INT 12
15051: PPUSH
15052: LD_INT 0
15054: PPUSH
15055: CALL_OW 380
// placeunitarea ( createhuman , les , false ) ;
15059: CALL_OW 44
15063: PPUSH
15064: LD_INT 4
15066: PPUSH
15067: LD_INT 0
15069: PPUSH
15070: CALL_OW 49
// end ;
15074: GO 15043
15076: POP
15077: POP
// case mp_sides_positions_ [ your_side ] of 1 :
15078: LD_EXP 50
15082: PUSH
15083: LD_OWVAR 2
15087: ARRAY
15088: PUSH
15089: LD_INT 1
15091: DOUBLE
15092: EQUAL
15093: IFTRUE 15097
15095: GO 15110
15097: POP
// centernowonxy ( 44 , 60 ) ; 2 :
15098: LD_INT 44
15100: PPUSH
15101: LD_INT 60
15103: PPUSH
15104: CALL_OW 86
15108: GO 15132
15110: LD_INT 2
15112: DOUBLE
15113: EQUAL
15114: IFTRUE 15118
15116: GO 15131
15118: POP
// centernowonxy ( 175 , 60 ) ; end ;
15119: LD_INT 175
15121: PPUSH
15122: LD_INT 60
15124: PPUSH
15125: CALL_OW 86
15129: GO 15132
15131: POP
// end ;
15132: LD_VAR 0 1
15136: RET
// on humandestroyed ( un , side , nat , x , y , dir , sex , cl ) marked 10 do if mp_sides_positions_ [ side ] = 1 then
15137: LD_EXP 50
15141: PUSH
15142: LD_VAR 0 2
15146: ARRAY
15147: PUSH
15148: LD_INT 1
15150: EQUAL
15151: IFFALSE 15169
// resp_cnt1 = resp_cnt1 + 1 else
15153: LD_ADDR_LOC 47
15157: PUSH
15158: LD_LOC 47
15162: PUSH
15163: LD_INT 1
15165: PLUS
15166: ST_TO_ADDR
15167: GO 15183
// resp_cnt2 = resp_cnt2 + 1 ;
15169: LD_ADDR_LOC 48
15173: PUSH
15174: LD_LOC 48
15178: PUSH
15179: LD_INT 1
15181: PLUS
15182: ST_TO_ADDR
15183: PPOPN 8
15185: END
// every 0 0$30 trigger resp_cnt1 >= people_resp marked 11 do
15186: LD_LOC 47
15190: PUSH
15191: LD_LOC 42
15195: GREATEREQUAL
15196: IFFALSE 15349
15198: GO 15200
15200: DISABLE
// begin resp_cnt1 = resp_cnt1 - people_resp ;
15201: LD_ADDR_LOC 47
15205: PUSH
15206: LD_LOC 47
15210: PUSH
15211: LD_LOC 42
15215: MINUS
15216: ST_TO_ADDR
// if not filterallunits ( [ [ f_side , pos1side ] , [ f_or , [ f_btype , b_depot ] , [ f_class , class_engineer ] ] ] ) then
15217: LD_INT 22
15219: PUSH
15220: LD_EXP 44
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: PUSH
15229: LD_INT 2
15231: PUSH
15232: LD_INT 30
15234: PUSH
15235: LD_INT 0
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: PUSH
15242: LD_INT 25
15244: PUSH
15245: LD_INT 2
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: PUSH
15252: EMPTY
15253: LIST
15254: LIST
15255: LIST
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PPUSH
15261: CALL_OW 69
15265: NOT
15266: IFFALSE 15271
// begin enable ;
15268: ENABLE
// exit ;
15269: GO 15349
// end ; uc_side = pos1side ;
15271: LD_ADDR_OWVAR 20
15275: PUSH
15276: LD_EXP 44
15280: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos1side ] ;
15281: LD_ADDR_OWVAR 21
15285: PUSH
15286: LD_EXP 49
15290: PUSH
15291: LD_EXP 44
15295: ARRAY
15296: ST_TO_ADDR
// preparehuman ( 0 , class_soldier , skilly ) ;
15297: LD_INT 0
15299: PPUSH
15300: LD_INT 1
15302: PPUSH
15303: LD_LOC 35
15307: PPUSH
15308: CALL_OW 380
// wait ( 0 0$10 ) ;
15312: LD_INT 350
15314: PPUSH
15315: CALL_OW 67
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ pos1side ] ] , true ) ;
15319: CALL_OW 44
15323: PPUSH
15324: LD_EXP 43
15328: PUSH
15329: LD_EXP 50
15333: PUSH
15334: LD_EXP 44
15338: ARRAY
15339: ARRAY
15340: PPUSH
15341: LD_INT 1
15343: PPUSH
15344: CALL_OW 49
// enable ;
15348: ENABLE
// end ;
15349: END
// every 0 0$30 trigger resp_cnt2 >= people_resp marked 12 do
15350: LD_LOC 48
15354: PUSH
15355: LD_LOC 42
15359: GREATEREQUAL
15360: IFFALSE 15513
15362: GO 15364
15364: DISABLE
// begin resp_cnt2 = resp_cnt2 - people_resp ;
15365: LD_ADDR_LOC 48
15369: PUSH
15370: LD_LOC 48
15374: PUSH
15375: LD_LOC 42
15379: MINUS
15380: ST_TO_ADDR
// if not filterallunits ( [ [ f_side , pos2side ] , [ f_or , [ f_btype , b_depot ] , [ f_class , class_engineer ] ] ] ) then
15381: LD_INT 22
15383: PUSH
15384: LD_EXP 45
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: PUSH
15393: LD_INT 2
15395: PUSH
15396: LD_INT 30
15398: PUSH
15399: LD_INT 0
15401: PUSH
15402: EMPTY
15403: LIST
15404: LIST
15405: PUSH
15406: LD_INT 25
15408: PUSH
15409: LD_INT 2
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: LIST
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: PPUSH
15425: CALL_OW 69
15429: NOT
15430: IFFALSE 15435
// begin enable ;
15432: ENABLE
// exit ;
15433: GO 15513
// end ; uc_side = pos2side ;
15435: LD_ADDR_OWVAR 20
15439: PUSH
15440: LD_EXP 45
15444: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos2side ] ;
15445: LD_ADDR_OWVAR 21
15449: PUSH
15450: LD_EXP 49
15454: PUSH
15455: LD_EXP 45
15459: ARRAY
15460: ST_TO_ADDR
// preparehuman ( 0 , class_soldier , skilly ) ;
15461: LD_INT 0
15463: PPUSH
15464: LD_INT 1
15466: PPUSH
15467: LD_LOC 35
15471: PPUSH
15472: CALL_OW 380
// wait ( 0 0$10 ) ;
15476: LD_INT 350
15478: PPUSH
15479: CALL_OW 67
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ pos2side ] ] , true ) ;
15483: CALL_OW 44
15487: PPUSH
15488: LD_EXP 43
15492: PUSH
15493: LD_EXP 50
15497: PUSH
15498: LD_EXP 45
15502: ARRAY
15503: ARRAY
15504: PPUSH
15505: LD_INT 1
15507: PPUSH
15508: CALL_OW 49
// enable ;
15512: ENABLE
// end ;
15513: END
// every 0 0$1 marked 13 do
15514: GO 15516
15516: DISABLE
// begin if not filterallunits ( [ [ f_side , pos1side ] , [ f_type , unit_human ] ] ) then
15517: LD_INT 22
15519: PUSH
15520: LD_EXP 44
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: PUSH
15529: LD_INT 21
15531: PUSH
15532: LD_INT 1
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: PUSH
15539: EMPTY
15540: LIST
15541: LIST
15542: PPUSH
15543: CALL_OW 69
15547: NOT
15548: IFFALSE 15572
// if pos1side = your_side then
15550: LD_EXP 44
15554: PUSH
15555: LD_OWVAR 2
15559: EQUAL
15560: IFFALSE 15568
// youlostinmultiplayer else
15562: CALL_OW 107
15566: GO 15572
// youwininmultiplayer ;
15568: CALL_OW 106
// if not filterallunits ( [ [ f_side , pos2side ] , [ f_type , unit_human ] ] ) then
15572: LD_INT 22
15574: PUSH
15575: LD_EXP 45
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: PUSH
15584: LD_INT 21
15586: PUSH
15587: LD_INT 1
15589: PUSH
15590: EMPTY
15591: LIST
15592: LIST
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: PPUSH
15598: CALL_OW 69
15602: NOT
15603: IFFALSE 15627
// if pos2side = your_side then
15605: LD_EXP 45
15609: PUSH
15610: LD_OWVAR 2
15614: EQUAL
15615: IFFALSE 15623
// youlostinmultiplayer else
15617: CALL_OW 107
15621: GO 15627
// youwininmultiplayer ;
15623: CALL_OW 106
// end ; end_of_file
15627: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
15628: LD_INT 0
15630: PPUSH
15631: PPUSH
// for un in battle_flags_id do
15632: LD_ADDR_VAR 0 2
15636: PUSH
15637: LD_EXP 29
15641: PUSH
15642: FOR_IN
15643: IFFALSE 15718
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
15645: LD_VAR 0 2
15649: PPUSH
15650: LD_INT 1
15652: PUSH
15653: LD_LOC 49
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: PUSH
15662: LD_INT 2
15664: PUSH
15665: LD_LOC 49
15669: PUSH
15670: LD_INT 2
15672: DIV
15673: PUSH
15674: EMPTY
15675: LIST
15676: LIST
15677: PUSH
15678: LD_INT 3
15680: PUSH
15681: LD_LOC 49
15685: PUSH
15686: LD_INT 5
15688: DIV
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: PUSH
15694: LD_INT 20
15696: PUSH
15697: LD_LOC 49
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: PPUSH
15712: CALL_OW 423
15716: GO 15642
15718: POP
15719: POP
// end ;
15720: LD_VAR 0 1
15724: RET
// every 0 0$0.1 marked 55 do var un ;
15725: GO 15727
15727: DISABLE
15728: LD_INT 0
15730: PPUSH
// begin if not def_morale_flags then
15731: LD_EXP 66
15735: NOT
15736: IFFALSE 15740
// exit ;
15738: GO 15817
// if not morale_decreasing_time then
15740: LD_EXP 11
15744: NOT
15745: IFFALSE 15749
// exit ;
15747: GO 15817
// strength = 100 ;
15749: LD_ADDR_LOC 49
15753: PUSH
15754: LD_INT 100
15756: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
15757: LD_EXP 11
15761: PPUSH
15762: CALL_OW 67
// strength := strength - 1 ;
15766: LD_ADDR_LOC 49
15770: PUSH
15771: LD_LOC 49
15775: PUSH
15776: LD_INT 1
15778: MINUS
15779: ST_TO_ADDR
// Update_Flags ;
15780: CALL 15628 0 0
// until not strength ;
15784: LD_LOC 49
15788: NOT
15789: IFFALSE 15757
// for un in battle_flags_id do
15791: LD_ADDR_VAR 0 1
15795: PUSH
15796: LD_EXP 29
15800: PUSH
15801: FOR_IN
15802: IFFALSE 15815
// KillBattleFlag ( un ) ;
15804: LD_VAR 0 1
15808: PPUSH
15809: CALL_OW 419
15813: GO 15801
15815: POP
15816: POP
// end ; end_of_file
15817: PPOPN 1
15819: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
15820: LD_INT 0
15822: PPUSH
15823: PPUSH
// if ( not IAmSpec ) then
15824: CALL_OW 531
15828: NOT
15829: IFFALSE 15845
// Result := Limits_Info ^  ;
15831: LD_ADDR_VAR 0 1
15835: PUSH
15836: LD_LOC 61
15840: PUSH
15841: LD_STRING 
15843: ADD
15844: ST_TO_ADDR
// for i := 1 to 8 do
15845: LD_ADDR_VAR 0 2
15849: PUSH
15850: DOUBLE
15851: LD_INT 1
15853: DEC
15854: ST_TO_ADDR
15855: LD_INT 8
15857: PUSH
15858: FOR_TO
15859: IFFALSE 15904
// if Cheaters [ i ] then
15861: LD_LOC 62
15865: PUSH
15866: LD_VAR 0 2
15870: ARRAY
15871: IFFALSE 15902
// Result := Result ^ [ #Cheater , i , i ] ;
15873: LD_ADDR_VAR 0 1
15877: PUSH
15878: LD_VAR 0 1
15882: PUSH
15883: LD_STRING #Cheater
15885: PUSH
15886: LD_VAR 0 2
15890: PUSH
15891: LD_VAR 0 2
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: LIST
15900: ADD
15901: ST_TO_ADDR
15902: GO 15858
15904: POP
15905: POP
// end ;
15906: LD_VAR 0 1
15910: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
15911: LD_INT 0
15913: PPUSH
15914: PPUSH
15915: PPUSH
15916: PPUSH
15917: PPUSH
// case Game_Type of 10 :
15918: LD_EXP 56
15922: PUSH
15923: LD_INT 10
15925: DOUBLE
15926: EQUAL
15927: IFTRUE 15931
15929: GO 15942
15931: POP
// def_game_rules := 1 ; 11 :
15932: LD_ADDR_EXP 57
15936: PUSH
15937: LD_INT 1
15939: ST_TO_ADDR
15940: GO 15962
15942: LD_INT 11
15944: DOUBLE
15945: EQUAL
15946: IFTRUE 15950
15948: GO 15961
15950: POP
// def_game_rules := 3 ; end ;
15951: LD_ADDR_EXP 57
15955: PUSH
15956: LD_INT 3
15958: ST_TO_ADDR
15959: GO 15962
15961: POP
// case def_game_rules of 0 :
15962: LD_EXP 57
15966: PUSH
15967: LD_INT 0
15969: DOUBLE
15970: EQUAL
15971: IFTRUE 15975
15973: GO 15980
15975: POP
// exit ; 1 :
15976: GO 18038
15978: GO 17938
15980: LD_INT 1
15982: DOUBLE
15983: EQUAL
15984: IFTRUE 15988
15986: GO 16204
15988: POP
// begin def_base_level := 2 ;
15989: LD_ADDR_EXP 58
15993: PUSH
15994: LD_INT 2
15996: ST_TO_ADDR
// def_amount_of_people := 2 ;
15997: LD_ADDR_EXP 59
16001: PUSH
16002: LD_INT 2
16004: ST_TO_ADDR
// def_skill_level := 1 ;
16005: LD_ADDR_EXP 60
16009: PUSH
16010: LD_INT 1
16012: ST_TO_ADDR
// def_starting_resources := 2 ;
16013: LD_ADDR_EXP 61
16017: PUSH
16018: LD_INT 2
16020: ST_TO_ADDR
// def_shipments_density := 1 ;
16021: LD_ADDR_EXP 62
16025: PUSH
16026: LD_INT 1
16028: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
16029: LD_ADDR_EXP 63
16033: PUSH
16034: LD_INT 0
16036: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
16037: LD_ADDR_EXP 64
16041: PUSH
16042: LD_INT 1
16044: ST_TO_ADDR
// def_shared_vision := 1 ;
16045: LD_ADDR_EXP 65
16049: PUSH
16050: LD_INT 1
16052: ST_TO_ADDR
// def_morale_flags := 3 ;
16053: LD_ADDR_EXP 66
16057: PUSH
16058: LD_INT 3
16060: ST_TO_ADDR
// def_siberite_detection := 1 ;
16061: LD_ADDR_EXP 67
16065: PUSH
16066: LD_INT 1
16068: ST_TO_ADDR
// def_people_respawning := 1 ;
16069: LD_ADDR_EXP 68
16073: PUSH
16074: LD_INT 1
16076: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
16077: LD_ADDR_EXP 69
16081: PUSH
16082: LD_INT 1
16084: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16085: LD_ADDR_EXP 70
16089: PUSH
16090: LD_INT 0
16092: ST_TO_ADDR
// def_builduptime := 2 ;
16093: LD_ADDR_EXP 71
16097: PUSH
16098: LD_INT 2
16100: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
16101: LD_ADDR_VAR 0 2
16105: PUSH
16106: EMPTY
16107: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
16108: LD_ADDR_VAR 0 3
16112: PUSH
16113: EMPTY
16114: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16115: LD_ADDR_LOC 56
16119: PUSH
16120: EMPTY
16121: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16122: LD_ADDR_LOC 57
16126: PUSH
16127: EMPTY
16128: ST_TO_ADDR
// Banned_Controls := [ ] ;
16129: LD_ADDR_LOC 58
16133: PUSH
16134: EMPTY
16135: ST_TO_ADDR
// Banned_Engines := [ ] ;
16136: LD_ADDR_LOC 59
16140: PUSH
16141: EMPTY
16142: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
16143: LD_ADDR_LOC 54
16147: PUSH
16148: LD_INT 37
16150: PUSH
16151: EMPTY
16152: LIST
16153: PUSH
16154: LD_INT 4
16156: PUSH
16157: LD_INT 5
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: PUSH
16164: LD_INT 31
16166: PUSH
16167: LD_INT 32
16169: PUSH
16170: LD_INT 33
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: LIST
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: LIST
16182: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
16183: LD_ADDR_LOC 55
16187: PUSH
16188: LD_INT 2
16190: PUSH
16191: LD_INT 2
16193: PUSH
16194: LD_INT 4
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: LIST
16201: ST_TO_ADDR
// end ; 2 :
16202: GO 17938
16204: LD_INT 2
16206: DOUBLE
16207: EQUAL
16208: IFTRUE 16212
16210: GO 16421
16212: POP
// begin def_base_level := 1 ;
16213: LD_ADDR_EXP 58
16217: PUSH
16218: LD_INT 1
16220: ST_TO_ADDR
// def_amount_of_people := 2 ;
16221: LD_ADDR_EXP 59
16225: PUSH
16226: LD_INT 2
16228: ST_TO_ADDR
// def_skill_level := 3 ;
16229: LD_ADDR_EXP 60
16233: PUSH
16234: LD_INT 3
16236: ST_TO_ADDR
// def_starting_resources := 3 ;
16237: LD_ADDR_EXP 61
16241: PUSH
16242: LD_INT 3
16244: ST_TO_ADDR
// def_shipments_density := 2 ;
16245: LD_ADDR_EXP 62
16249: PUSH
16250: LD_INT 2
16252: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
16253: LD_ADDR_EXP 63
16257: PUSH
16258: LD_INT 1
16260: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
16261: LD_ADDR_EXP 64
16265: PUSH
16266: LD_INT 2
16268: ST_TO_ADDR
// def_shared_vision := 1 ;
16269: LD_ADDR_EXP 65
16273: PUSH
16274: LD_INT 1
16276: ST_TO_ADDR
// def_morale_flags := 0 ;
16277: LD_ADDR_EXP 66
16281: PUSH
16282: LD_INT 0
16284: ST_TO_ADDR
// def_siberite_detection := 1 ;
16285: LD_ADDR_EXP 67
16289: PUSH
16290: LD_INT 1
16292: ST_TO_ADDR
// def_people_respawning := 0 ;
16293: LD_ADDR_EXP 68
16297: PUSH
16298: LD_INT 0
16300: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
16301: LD_ADDR_EXP 69
16305: PUSH
16306: LD_INT 0
16308: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16309: LD_ADDR_EXP 70
16313: PUSH
16314: LD_INT 0
16316: ST_TO_ADDR
// def_builduptime := 2 ;
16317: LD_ADDR_EXP 71
16321: PUSH
16322: LD_INT 2
16324: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
16325: LD_ADDR_VAR 0 2
16329: PUSH
16330: LD_INT 1
16332: PUSH
16333: EMPTY
16334: LIST
16335: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
16336: LD_ADDR_VAR 0 3
16340: PUSH
16341: EMPTY
16342: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16343: LD_ADDR_LOC 56
16347: PUSH
16348: EMPTY
16349: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16350: LD_ADDR_LOC 57
16354: PUSH
16355: EMPTY
16356: ST_TO_ADDR
// Banned_Controls := [ ] ;
16357: LD_ADDR_LOC 58
16361: PUSH
16362: EMPTY
16363: ST_TO_ADDR
// Banned_Engines := [ ] ;
16364: LD_ADDR_LOC 59
16368: PUSH
16369: EMPTY
16370: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
16371: LD_ADDR_LOC 54
16375: PUSH
16376: LD_INT 4
16378: PUSH
16379: LD_INT 5
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: PUSH
16386: LD_INT 31
16388: PUSH
16389: LD_INT 32
16391: PUSH
16392: LD_INT 33
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: LIST
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
16404: LD_ADDR_LOC 55
16408: PUSH
16409: LD_INT 1
16411: PUSH
16412: LD_INT 2
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: ST_TO_ADDR
// end ; 3 :
16419: GO 17938
16421: LD_INT 3
16423: DOUBLE
16424: EQUAL
16425: IFTRUE 16429
16427: GO 16672
16429: POP
// begin def_base_level := 1 ;
16430: LD_ADDR_EXP 58
16434: PUSH
16435: LD_INT 1
16437: ST_TO_ADDR
// def_amount_of_people := 2 ;
16438: LD_ADDR_EXP 59
16442: PUSH
16443: LD_INT 2
16445: ST_TO_ADDR
// def_skill_level := 3 ;
16446: LD_ADDR_EXP 60
16450: PUSH
16451: LD_INT 3
16453: ST_TO_ADDR
// def_starting_resources := 3 ;
16454: LD_ADDR_EXP 61
16458: PUSH
16459: LD_INT 3
16461: ST_TO_ADDR
// def_shipments_density := 1 ;
16462: LD_ADDR_EXP 62
16466: PUSH
16467: LD_INT 1
16469: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
16470: LD_ADDR_EXP 63
16474: PUSH
16475: LD_INT 0
16477: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
16478: LD_ADDR_EXP 64
16482: PUSH
16483: LD_INT 1
16485: ST_TO_ADDR
// def_shared_vision := 1 ;
16486: LD_ADDR_EXP 65
16490: PUSH
16491: LD_INT 1
16493: ST_TO_ADDR
// def_morale_flags := 0 ;
16494: LD_ADDR_EXP 66
16498: PUSH
16499: LD_INT 0
16501: ST_TO_ADDR
// def_siberite_detection := 1 ;
16502: LD_ADDR_EXP 67
16506: PUSH
16507: LD_INT 1
16509: ST_TO_ADDR
// def_people_respawning := 0 ;
16510: LD_ADDR_EXP 68
16514: PUSH
16515: LD_INT 0
16517: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
16518: LD_ADDR_EXP 69
16522: PUSH
16523: LD_INT 2
16525: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16526: LD_ADDR_EXP 70
16530: PUSH
16531: LD_INT 0
16533: ST_TO_ADDR
// def_builduptime := 1 ;
16534: LD_ADDR_EXP 71
16538: PUSH
16539: LD_INT 1
16541: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
16542: LD_ADDR_VAR 0 2
16546: PUSH
16547: LD_INT 23
16549: PUSH
16550: EMPTY
16551: LIST
16552: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
16553: LD_ADDR_VAR 0 3
16557: PUSH
16558: LD_INT 2
16560: PUSH
16561: LD_INT 37
16563: PUSH
16564: LD_INT 32
16566: PUSH
16567: LD_INT 33
16569: PUSH
16570: LD_INT 36
16572: PUSH
16573: LD_INT 16
16575: PUSH
16576: LD_INT 23
16578: PUSH
16579: LD_INT 21
16581: PUSH
16582: LD_INT 18
16584: PUSH
16585: LD_INT 22
16587: PUSH
16588: LD_INT 20
16590: PUSH
16591: LD_INT 19
16593: PUSH
16594: LD_INT 25
16596: PUSH
16597: LD_INT 17
16599: PUSH
16600: LD_INT 24
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16620: LD_ADDR_LOC 56
16624: PUSH
16625: EMPTY
16626: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16627: LD_ADDR_LOC 57
16631: PUSH
16632: EMPTY
16633: ST_TO_ADDR
// Banned_Controls := [ ] ;
16634: LD_ADDR_LOC 58
16638: PUSH
16639: EMPTY
16640: ST_TO_ADDR
// Banned_Engines := [ ] ;
16641: LD_ADDR_LOC 59
16645: PUSH
16646: EMPTY
16647: ST_TO_ADDR
// Restricted_Builds := [ ] ;
16648: LD_ADDR_LOC 54
16652: PUSH
16653: EMPTY
16654: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
16655: LD_ADDR_LOC 55
16659: PUSH
16660: EMPTY
16661: ST_TO_ADDR
// No_Mechs := true ;
16662: LD_ADDR_EXP 72
16666: PUSH
16667: LD_INT 1
16669: ST_TO_ADDR
// end ; 4 :
16670: GO 17938
16672: LD_INT 4
16674: DOUBLE
16675: EQUAL
16676: IFTRUE 16680
16678: GO 16855
16680: POP
// begin def_base_level := 1 ;
16681: LD_ADDR_EXP 58
16685: PUSH
16686: LD_INT 1
16688: ST_TO_ADDR
// def_amount_of_people := 2 ;
16689: LD_ADDR_EXP 59
16693: PUSH
16694: LD_INT 2
16696: ST_TO_ADDR
// def_skill_level := 3 ;
16697: LD_ADDR_EXP 60
16701: PUSH
16702: LD_INT 3
16704: ST_TO_ADDR
// def_starting_resources := 3 ;
16705: LD_ADDR_EXP 61
16709: PUSH
16710: LD_INT 3
16712: ST_TO_ADDR
// def_shipments_density := 2 ;
16713: LD_ADDR_EXP 62
16717: PUSH
16718: LD_INT 2
16720: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
16721: LD_ADDR_EXP 63
16725: PUSH
16726: LD_INT 1
16728: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
16729: LD_ADDR_EXP 64
16733: PUSH
16734: LD_INT 2
16736: ST_TO_ADDR
// def_shared_vision := 1 ;
16737: LD_ADDR_EXP 65
16741: PUSH
16742: LD_INT 1
16744: ST_TO_ADDR
// def_morale_flags := 0 ;
16745: LD_ADDR_EXP 66
16749: PUSH
16750: LD_INT 0
16752: ST_TO_ADDR
// def_siberite_detection := 1 ;
16753: LD_ADDR_EXP 67
16757: PUSH
16758: LD_INT 1
16760: ST_TO_ADDR
// def_people_respawning := 0 ;
16761: LD_ADDR_EXP 68
16765: PUSH
16766: LD_INT 0
16768: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
16769: LD_ADDR_EXP 69
16773: PUSH
16774: LD_INT 0
16776: ST_TO_ADDR
// def_siberite_bomb := 1 ;
16777: LD_ADDR_EXP 70
16781: PUSH
16782: LD_INT 1
16784: ST_TO_ADDR
// def_builduptime := 3 ;
16785: LD_ADDR_EXP 71
16789: PUSH
16790: LD_INT 3
16792: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
16793: LD_ADDR_VAR 0 2
16797: PUSH
16798: LD_INT 1
16800: PUSH
16801: EMPTY
16802: LIST
16803: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
16804: LD_ADDR_VAR 0 3
16808: PUSH
16809: EMPTY
16810: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16811: LD_ADDR_LOC 56
16815: PUSH
16816: EMPTY
16817: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16818: LD_ADDR_LOC 57
16822: PUSH
16823: EMPTY
16824: ST_TO_ADDR
// Banned_Controls := [ ] ;
16825: LD_ADDR_LOC 58
16829: PUSH
16830: EMPTY
16831: ST_TO_ADDR
// Banned_Engines := [ ] ;
16832: LD_ADDR_LOC 59
16836: PUSH
16837: EMPTY
16838: ST_TO_ADDR
// Restricted_Builds := [ ] ;
16839: LD_ADDR_LOC 54
16843: PUSH
16844: EMPTY
16845: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
16846: LD_ADDR_LOC 55
16850: PUSH
16851: EMPTY
16852: ST_TO_ADDR
// end ; 5 :
16853: GO 17938
16855: LD_INT 5
16857: DOUBLE
16858: EQUAL
16859: IFTRUE 16863
16861: GO 17112
16863: POP
// begin def_base_level := 0 ;
16864: LD_ADDR_EXP 58
16868: PUSH
16869: LD_INT 0
16871: ST_TO_ADDR
// def_amount_of_people := 0 ;
16872: LD_ADDR_EXP 59
16876: PUSH
16877: LD_INT 0
16879: ST_TO_ADDR
// def_skill_level := 0 ;
16880: LD_ADDR_EXP 60
16884: PUSH
16885: LD_INT 0
16887: ST_TO_ADDR
// def_starting_resources := 0 ;
16888: LD_ADDR_EXP 61
16892: PUSH
16893: LD_INT 0
16895: ST_TO_ADDR
// def_shipments_density := 0 ;
16896: LD_ADDR_EXP 62
16900: PUSH
16901: LD_INT 0
16903: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
16904: LD_ADDR_EXP 63
16908: PUSH
16909: LD_INT 0
16911: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
16912: LD_ADDR_EXP 64
16916: PUSH
16917: LD_INT 0
16919: ST_TO_ADDR
// def_shared_vision := 1 ;
16920: LD_ADDR_EXP 65
16924: PUSH
16925: LD_INT 1
16927: ST_TO_ADDR
// def_morale_flags := 0 ;
16928: LD_ADDR_EXP 66
16932: PUSH
16933: LD_INT 0
16935: ST_TO_ADDR
// def_siberite_detection := 0 ;
16936: LD_ADDR_EXP 67
16940: PUSH
16941: LD_INT 0
16943: ST_TO_ADDR
// def_people_respawning := 1 ;
16944: LD_ADDR_EXP 68
16948: PUSH
16949: LD_INT 1
16951: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
16952: LD_ADDR_EXP 69
16956: PUSH
16957: LD_INT 1
16959: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16960: LD_ADDR_EXP 70
16964: PUSH
16965: LD_INT 0
16967: ST_TO_ADDR
// def_builduptime := 0 ;
16968: LD_ADDR_EXP 71
16972: PUSH
16973: LD_INT 0
16975: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
16976: LD_ADDR_VAR 0 2
16980: PUSH
16981: LD_INT 10
16983: PUSH
16984: LD_INT 3
16986: PUSH
16987: EMPTY
16988: LIST
16989: LIST
16990: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
16991: LD_ADDR_VAR 0 3
16995: PUSH
16996: LD_INT 12
16998: PUSH
16999: LD_INT 11
17001: PUSH
17002: LD_INT 14
17004: PUSH
17005: LD_INT 13
17007: PUSH
17008: LD_INT 5
17010: PUSH
17011: LD_INT 24
17013: PUSH
17014: LD_INT 21
17016: PUSH
17017: LD_INT 33
17019: PUSH
17020: LD_INT 36
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
17034: LD_ADDR_LOC 56
17038: PUSH
17039: LD_INT 31
17041: PUSH
17042: EMPTY
17043: LIST
17044: ST_TO_ADDR
// Banned_Chassis := [ ] ;
17045: LD_ADDR_LOC 57
17049: PUSH
17050: EMPTY
17051: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
17052: LD_ADDR_LOC 58
17056: PUSH
17057: LD_INT 2
17059: PUSH
17060: EMPTY
17061: LIST
17062: ST_TO_ADDR
// Banned_Engines := [ ] ;
17063: LD_ADDR_LOC 59
17067: PUSH
17068: EMPTY
17069: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
17070: LD_ADDR_LOC 54
17074: PUSH
17075: LD_INT 4
17077: PUSH
17078: EMPTY
17079: LIST
17080: PUSH
17081: LD_INT 31
17083: PUSH
17084: LD_INT 32
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
17095: LD_ADDR_LOC 55
17099: PUSH
17100: LD_INT 1
17102: PUSH
17103: LD_INT 1
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: ST_TO_ADDR
// end ; 6 :
17110: GO 17938
17112: LD_INT 6
17114: DOUBLE
17115: EQUAL
17116: IFTRUE 17120
17118: GO 17323
17120: POP
// begin def_base_level := 1 ;
17121: LD_ADDR_EXP 58
17125: PUSH
17126: LD_INT 1
17128: ST_TO_ADDR
// def_amount_of_people := 2 ;
17129: LD_ADDR_EXP 59
17133: PUSH
17134: LD_INT 2
17136: ST_TO_ADDR
// def_skill_level := 3 ;
17137: LD_ADDR_EXP 60
17141: PUSH
17142: LD_INT 3
17144: ST_TO_ADDR
// def_starting_resources := 3 ;
17145: LD_ADDR_EXP 61
17149: PUSH
17150: LD_INT 3
17152: ST_TO_ADDR
// def_shipments_density := 1 ;
17153: LD_ADDR_EXP 62
17157: PUSH
17158: LD_INT 1
17160: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
17161: LD_ADDR_EXP 63
17165: PUSH
17166: LD_INT 0
17168: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
17169: LD_ADDR_EXP 64
17173: PUSH
17174: LD_INT 1
17176: ST_TO_ADDR
// def_shared_vision := 1 ;
17177: LD_ADDR_EXP 65
17181: PUSH
17182: LD_INT 1
17184: ST_TO_ADDR
// def_morale_flags := 0 ;
17185: LD_ADDR_EXP 66
17189: PUSH
17190: LD_INT 0
17192: ST_TO_ADDR
// def_siberite_detection := 1 ;
17193: LD_ADDR_EXP 67
17197: PUSH
17198: LD_INT 1
17200: ST_TO_ADDR
// def_people_respawning := 2 ;
17201: LD_ADDR_EXP 68
17205: PUSH
17206: LD_INT 2
17208: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
17209: LD_ADDR_EXP 69
17213: PUSH
17214: LD_INT 1
17216: ST_TO_ADDR
// def_siberite_bomb := 0 ;
17217: LD_ADDR_EXP 70
17221: PUSH
17222: LD_INT 0
17224: ST_TO_ADDR
// def_builduptime := 1 ;
17225: LD_ADDR_EXP 71
17229: PUSH
17230: LD_INT 1
17232: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
17233: LD_ADDR_VAR 0 2
17237: PUSH
17238: LD_INT 23
17240: PUSH
17241: EMPTY
17242: LIST
17243: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
17244: LD_ADDR_VAR 0 3
17248: PUSH
17249: LD_INT 2
17251: PUSH
17252: LD_INT 37
17254: PUSH
17255: LD_INT 31
17257: PUSH
17258: LD_INT 32
17260: PUSH
17261: LD_INT 33
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: ST_TO_ADDR
// Banned_Weapons := [ ] ;
17271: LD_ADDR_LOC 56
17275: PUSH
17276: EMPTY
17277: ST_TO_ADDR
// Banned_Chassis := [ ] ;
17278: LD_ADDR_LOC 57
17282: PUSH
17283: EMPTY
17284: ST_TO_ADDR
// Banned_Controls := [ ] ;
17285: LD_ADDR_LOC 58
17289: PUSH
17290: EMPTY
17291: ST_TO_ADDR
// Banned_Engines := [ ] ;
17292: LD_ADDR_LOC 59
17296: PUSH
17297: EMPTY
17298: ST_TO_ADDR
// Restricted_Builds := [ ] ;
17299: LD_ADDR_LOC 54
17303: PUSH
17304: EMPTY
17305: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
17306: LD_ADDR_LOC 55
17310: PUSH
17311: EMPTY
17312: ST_TO_ADDR
// No_Mechs := true ;
17313: LD_ADDR_EXP 72
17317: PUSH
17318: LD_INT 1
17320: ST_TO_ADDR
// end ; 7 :
17321: GO 17938
17323: LD_INT 7
17325: DOUBLE
17326: EQUAL
17327: IFTRUE 17331
17329: GO 17529
17331: POP
// begin def_base_level := 1 ;
17332: LD_ADDR_EXP 58
17336: PUSH
17337: LD_INT 1
17339: ST_TO_ADDR
// def_amount_of_people := 2 ;
17340: LD_ADDR_EXP 59
17344: PUSH
17345: LD_INT 2
17347: ST_TO_ADDR
// def_skill_level := 3 ;
17348: LD_ADDR_EXP 60
17352: PUSH
17353: LD_INT 3
17355: ST_TO_ADDR
// def_starting_resources := 3 ;
17356: LD_ADDR_EXP 61
17360: PUSH
17361: LD_INT 3
17363: ST_TO_ADDR
// def_shipments_density := 1 ;
17364: LD_ADDR_EXP 62
17368: PUSH
17369: LD_INT 1
17371: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
17372: LD_ADDR_EXP 63
17376: PUSH
17377: LD_INT 1
17379: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
17380: LD_ADDR_EXP 64
17384: PUSH
17385: LD_INT 2
17387: ST_TO_ADDR
// def_shared_vision := 1 ;
17388: LD_ADDR_EXP 65
17392: PUSH
17393: LD_INT 1
17395: ST_TO_ADDR
// def_morale_flags := 0 ;
17396: LD_ADDR_EXP 66
17400: PUSH
17401: LD_INT 0
17403: ST_TO_ADDR
// def_siberite_detection := 1 ;
17404: LD_ADDR_EXP 67
17408: PUSH
17409: LD_INT 1
17411: ST_TO_ADDR
// def_people_respawning := 0 ;
17412: LD_ADDR_EXP 68
17416: PUSH
17417: LD_INT 0
17419: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
17420: LD_ADDR_EXP 69
17424: PUSH
17425: LD_INT 1
17427: ST_TO_ADDR
// def_siberite_bomb := 0 ;
17428: LD_ADDR_EXP 70
17432: PUSH
17433: LD_INT 0
17435: ST_TO_ADDR
// def_builduptime := 3 ;
17436: LD_ADDR_EXP 71
17440: PUSH
17441: LD_INT 3
17443: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
17444: LD_ADDR_VAR 0 2
17448: PUSH
17449: LD_INT 23
17451: PUSH
17452: EMPTY
17453: LIST
17454: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
17455: LD_ADDR_VAR 0 3
17459: PUSH
17460: LD_INT 37
17462: PUSH
17463: EMPTY
17464: LIST
17465: ST_TO_ADDR
// Banned_Weapons := [ ] ;
17466: LD_ADDR_LOC 56
17470: PUSH
17471: EMPTY
17472: ST_TO_ADDR
// Banned_Chassis := [ ] ;
17473: LD_ADDR_LOC 57
17477: PUSH
17478: EMPTY
17479: ST_TO_ADDR
// Banned_Controls := [ ] ;
17480: LD_ADDR_LOC 58
17484: PUSH
17485: EMPTY
17486: ST_TO_ADDR
// Banned_Engines := [ ] ;
17487: LD_ADDR_LOC 59
17491: PUSH
17492: EMPTY
17493: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
17494: LD_ADDR_LOC 54
17498: PUSH
17499: LD_INT 31
17501: PUSH
17502: LD_INT 32
17504: PUSH
17505: LD_INT 33
17507: PUSH
17508: EMPTY
17509: LIST
17510: LIST
17511: LIST
17512: PUSH
17513: EMPTY
17514: LIST
17515: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
17516: LD_ADDR_LOC 55
17520: PUSH
17521: LD_INT 10
17523: PUSH
17524: EMPTY
17525: LIST
17526: ST_TO_ADDR
// end ; 8 :
17527: GO 17938
17529: LD_INT 8
17531: DOUBLE
17532: EQUAL
17533: IFTRUE 17537
17535: GO 17937
17537: POP
// begin def_base_level := 0 ;
17538: LD_ADDR_EXP 58
17542: PUSH
17543: LD_INT 0
17545: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
17546: LD_ADDR_EXP 59
17550: PUSH
17551: LD_INT 0
17553: PPUSH
17554: LD_INT 1
17556: PPUSH
17557: CALL_OW 12
17561: ST_TO_ADDR
// def_skill_level := 0 ;
17562: LD_ADDR_EXP 60
17566: PUSH
17567: LD_INT 0
17569: ST_TO_ADDR
// def_starting_resources := 2 ;
17570: LD_ADDR_EXP 61
17574: PUSH
17575: LD_INT 2
17577: ST_TO_ADDR
// def_shipments_density := 1 ;
17578: LD_ADDR_EXP 62
17582: PUSH
17583: LD_INT 1
17585: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
17586: LD_ADDR_EXP 63
17590: PUSH
17591: LD_INT 0
17593: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
17594: LD_ADDR_EXP 64
17598: PUSH
17599: LD_INT 0
17601: ST_TO_ADDR
// def_shared_vision := 1 ;
17602: LD_ADDR_EXP 65
17606: PUSH
17607: LD_INT 1
17609: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
17610: LD_ADDR_EXP 66
17614: PUSH
17615: LD_INT 0
17617: PPUSH
17618: LD_INT 2
17620: PPUSH
17621: CALL_OW 12
17625: ST_TO_ADDR
// def_siberite_detection := 0 ;
17626: LD_ADDR_EXP 67
17630: PUSH
17631: LD_INT 0
17633: ST_TO_ADDR
// def_people_respawning := 0 ;
17634: LD_ADDR_EXP 68
17638: PUSH
17639: LD_INT 0
17641: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
17642: LD_ADDR_EXP 69
17646: PUSH
17647: LD_INT 2
17649: ST_TO_ADDR
// def_siberite_bomb := 0 ;
17650: LD_ADDR_EXP 70
17654: PUSH
17655: LD_INT 0
17657: ST_TO_ADDR
// def_builduptime := 0 ;
17658: LD_ADDR_EXP 71
17662: PUSH
17663: LD_INT 0
17665: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
17666: LD_ADDR_VAR 0 2
17670: PUSH
17671: LD_INT 23
17673: PUSH
17674: LD_INT 20
17676: PUSH
17677: LD_INT 40
17679: PUSH
17680: LD_INT 47
17682: PUSH
17683: LD_INT 46
17685: PUSH
17686: LD_INT 39
17688: PUSH
17689: LD_INT 71
17691: PUSH
17692: LD_INT 34
17694: PUSH
17695: LD_INT 41
17697: PUSH
17698: LD_INT 44
17700: PUSH
17701: LD_INT 17
17703: PUSH
17704: LD_INT 16
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
17721: LD_ADDR_VAR 0 3
17725: PUSH
17726: LD_INT 37
17728: PUSH
17729: LD_INT 5
17731: PUSH
17732: LD_INT 13
17734: PUSH
17735: LD_INT 34
17737: PUSH
17738: LD_INT 12
17740: PUSH
17741: LD_INT 15
17743: PUSH
17744: LD_INT 11
17746: PUSH
17747: LD_INT 14
17749: PUSH
17750: LD_INT 29
17752: PUSH
17753: LD_INT 30
17755: PUSH
17756: LD_INT 28
17758: PUSH
17759: LD_INT 24
17761: PUSH
17762: LD_INT 25
17764: PUSH
17765: LD_INT 20
17767: PUSH
17768: LD_INT 21
17770: PUSH
17771: LD_INT 22
17773: PUSH
17774: LD_INT 36
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: ST_TO_ADDR
// Banned_Weapons := [ ] ;
17796: LD_ADDR_LOC 56
17800: PUSH
17801: EMPTY
17802: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
17803: LD_ADDR_LOC 57
17807: PUSH
17808: LD_INT 14
17810: PUSH
17811: EMPTY
17812: LIST
17813: ST_TO_ADDR
// Banned_Controls := [ ] ;
17814: LD_ADDR_LOC 58
17818: PUSH
17819: EMPTY
17820: ST_TO_ADDR
// Banned_Engines := [ ] ;
17821: LD_ADDR_LOC 59
17825: PUSH
17826: EMPTY
17827: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
17828: LD_ADDR_LOC 54
17832: PUSH
17833: LD_INT 31
17835: PUSH
17836: LD_INT 32
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: LD_INT 4
17845: PUSH
17846: EMPTY
17847: LIST
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
17853: LD_ADDR_LOC 55
17857: PUSH
17858: LD_INT 2
17860: PUSH
17861: LD_INT 1
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: ST_TO_ADDR
// for i := 1 to 8 do
17868: LD_ADDR_VAR 0 4
17872: PUSH
17873: DOUBLE
17874: LD_INT 1
17876: DEC
17877: ST_TO_ADDR
17878: LD_INT 8
17880: PUSH
17881: FOR_TO
17882: IFFALSE 17933
// if ( Side_Nations [ i ] = 3 ) then
17884: LD_EXP 19
17888: PUSH
17889: LD_VAR 0 4
17893: ARRAY
17894: PUSH
17895: LD_INT 3
17897: EQUAL
17898: IFFALSE 17931
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
17900: LD_ADDR_EXP 19
17904: PUSH
17905: LD_EXP 19
17909: PPUSH
17910: LD_VAR 0 4
17914: PPUSH
17915: LD_INT 1
17917: PPUSH
17918: LD_INT 2
17920: PPUSH
17921: CALL_OW 12
17925: PPUSH
17926: CALL_OW 1
17930: ST_TO_ADDR
17931: GO 17881
17933: POP
17934: POP
// end ; end ;
17935: GO 17938
17937: POP
// for i := 1 to 8 do
17938: LD_ADDR_VAR 0 4
17942: PUSH
17943: DOUBLE
17944: LD_INT 1
17946: DEC
17947: ST_TO_ADDR
17948: LD_INT 8
17950: PUSH
17951: FOR_TO
17952: IFFALSE 18036
// if Side_Positions [ i ] then
17954: LD_EXP 18
17958: PUSH
17959: LD_VAR 0 4
17963: ARRAY
17964: IFFALSE 18034
// begin for j in Unavailable_Techs do
17966: LD_ADDR_VAR 0 5
17970: PUSH
17971: LD_VAR 0 2
17975: PUSH
17976: FOR_IN
17977: IFFALSE 17998
// SetTech ( j , i , 0 ) ;
17979: LD_VAR 0 5
17983: PPUSH
17984: LD_VAR 0 4
17988: PPUSH
17989: LD_INT 0
17991: PPUSH
17992: CALL_OW 322
17996: GO 17976
17998: POP
17999: POP
// for j in Unavailable_Builds do
18000: LD_ADDR_VAR 0 5
18004: PUSH
18005: LD_VAR 0 3
18009: PUSH
18010: FOR_IN
18011: IFFALSE 18032
// SetRestrict ( j , i , 0 ) ;
18013: LD_VAR 0 5
18017: PPUSH
18018: LD_VAR 0 4
18022: PPUSH
18023: LD_INT 0
18025: PPUSH
18026: CALL_OW 324
18030: GO 18010
18032: POP
18033: POP
// end ;
18034: GO 17951
18036: POP
18037: POP
// end ;
18038: LD_VAR 0 1
18042: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
18043: LD_INT 0
18045: PPUSH
18046: PPUSH
18047: PPUSH
18048: PPUSH
18049: PPUSH
18050: PPUSH
18051: PPUSH
// for i := 1 to Restricted_Builds do
18052: LD_ADDR_VAR 0 2
18056: PUSH
18057: DOUBLE
18058: LD_INT 1
18060: DEC
18061: ST_TO_ADDR
18062: LD_LOC 54
18066: PUSH
18067: FOR_TO
18068: IFFALSE 18378
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
18070: LD_LOC 54
18074: PUSH
18075: LD_VAR 0 2
18079: ARRAY
18080: PUSH
18081: LD_INT 1
18083: ARRAY
18084: PUSH
18085: LD_INT 31
18087: DOUBLE
18088: EQUAL
18089: IFTRUE 18105
18091: LD_INT 32
18093: DOUBLE
18094: EQUAL
18095: IFTRUE 18105
18097: LD_INT 33
18099: DOUBLE
18100: EQUAL
18101: IFTRUE 18105
18103: GO 18116
18105: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
18106: LD_ADDR_VAR 0 6
18110: PUSH
18111: LD_STRING #Turrets
18113: ST_TO_ADDR
18114: GO 18161
18116: LD_INT 4
18118: DOUBLE
18119: EQUAL
18120: IFTRUE 18130
18122: LD_INT 5
18124: DOUBLE
18125: EQUAL
18126: IFTRUE 18130
18128: GO 18141
18130: POP
// btype := #Armouries ; b_Behemoth :
18131: LD_ADDR_VAR 0 6
18135: PUSH
18136: LD_STRING #Armouries
18138: ST_TO_ADDR
18139: GO 18161
18141: LD_INT 37
18143: DOUBLE
18144: EQUAL
18145: IFTRUE 18149
18147: GO 18160
18149: POP
// btype := #Behemoths ; end ;
18150: LD_ADDR_VAR 0 6
18154: PUSH
18155: LD_STRING #Behemoths
18157: ST_TO_ADDR
18158: GO 18161
18160: POP
// list := [ ] ;
18161: LD_ADDR_VAR 0 7
18165: PUSH
18166: EMPTY
18167: ST_TO_ADDR
// for j := 1 to 8 do
18168: LD_ADDR_VAR 0 3
18172: PUSH
18173: DOUBLE
18174: LD_INT 1
18176: DEC
18177: ST_TO_ADDR
18178: LD_INT 8
18180: PUSH
18181: FOR_TO
18182: IFFALSE 18275
// if Side_Positions [ j ] then
18184: LD_EXP 18
18188: PUSH
18189: LD_VAR 0 3
18193: ARRAY
18194: IFFALSE 18273
// begin amount := 0 ;
18196: LD_ADDR_VAR 0 5
18200: PUSH
18201: LD_INT 0
18203: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
18204: LD_ADDR_VAR 0 4
18208: PUSH
18209: LD_LOC 54
18213: PUSH
18214: LD_VAR 0 2
18218: ARRAY
18219: PUSH
18220: FOR_IN
18221: IFFALSE 18269
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
18223: LD_ADDR_VAR 0 5
18227: PUSH
18228: LD_VAR 0 5
18232: PUSH
18233: LD_INT 22
18235: PUSH
18236: LD_VAR 0 3
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: PUSH
18245: LD_INT 30
18247: PUSH
18248: LD_VAR 0 4
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PPUSH
18261: CALL_OW 69
18265: PLUS
18266: ST_TO_ADDR
18267: GO 18220
18269: POP
18270: POP
// break ;
18271: GO 18275
// end ;
18273: GO 18181
18275: POP
18276: POP
// list := [ ] ;
18277: LD_ADDR_VAR 0 7
18281: PUSH
18282: EMPTY
18283: ST_TO_ADDR
// for j := 1 to 8 do
18284: LD_ADDR_VAR 0 3
18288: PUSH
18289: DOUBLE
18290: LD_INT 1
18292: DEC
18293: ST_TO_ADDR
18294: LD_INT 8
18296: PUSH
18297: FOR_TO
18298: IFFALSE 18318
// list := list ^ amount ;
18300: LD_ADDR_VAR 0 7
18304: PUSH
18305: LD_VAR 0 7
18309: PUSH
18310: LD_VAR 0 5
18314: ADD
18315: ST_TO_ADDR
18316: GO 18297
18318: POP
18319: POP
// Already_Built := Already_Built ^ [ list ] ;
18320: LD_ADDR_LOC 60
18324: PUSH
18325: LD_LOC 60
18329: PUSH
18330: LD_VAR 0 7
18334: PUSH
18335: EMPTY
18336: LIST
18337: ADD
18338: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
18339: LD_ADDR_LOC 61
18343: PUSH
18344: LD_LOC 61
18348: PUSH
18349: LD_VAR 0 6
18353: PUSH
18354: LD_VAR 0 5
18358: PUSH
18359: LD_LOC 55
18363: PUSH
18364: LD_VAR 0 2
18368: ARRAY
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: LIST
18374: ADD
18375: ST_TO_ADDR
// end ;
18376: GO 18067
18378: POP
18379: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
18380: LD_ADDR_LOC 62
18384: PUSH
18385: LD_INT 0
18387: PUSH
18388: LD_INT 0
18390: PUSH
18391: LD_INT 0
18393: PUSH
18394: LD_INT 0
18396: PUSH
18397: LD_INT 0
18399: PUSH
18400: LD_INT 0
18402: PUSH
18403: LD_INT 0
18405: PUSH
18406: LD_INT 0
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: ST_TO_ADDR
// if Limits_Info then
18419: LD_LOC 61
18423: IFFALSE 18439
// Limits_Info := #Limits ^ Limits_Info ;
18425: LD_ADDR_LOC 61
18429: PUSH
18430: LD_STRING #Limits
18432: PUSH
18433: LD_LOC 61
18437: ADD
18438: ST_TO_ADDR
// end ;
18439: LD_VAR 0 1
18443: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
18444: LD_INT 0
18446: PPUSH
18447: PPUSH
18448: PPUSH
18449: PPUSH
// for i := 1 to Restricted_Builds do
18450: LD_ADDR_VAR 0 7
18454: PUSH
18455: DOUBLE
18456: LD_INT 1
18458: DEC
18459: ST_TO_ADDR
18460: LD_LOC 54
18464: PUSH
18465: FOR_TO
18466: IFFALSE 18889
// if BType in Restricted_Builds [ i ] then
18468: LD_VAR 0 2
18472: PUSH
18473: LD_LOC 54
18477: PUSH
18478: LD_VAR 0 7
18482: ARRAY
18483: IN
18484: IFFALSE 18887
// begin if old_side then
18486: LD_VAR 0 4
18490: IFFALSE 18616
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
18492: LD_LOC 60
18496: PUSH
18497: LD_VAR 0 7
18501: ARRAY
18502: PUSH
18503: LD_VAR 0 3
18507: ARRAY
18508: PUSH
18509: LD_VAR 0 5
18513: PLUS
18514: PUSH
18515: LD_LOC 55
18519: PUSH
18520: LD_VAR 0 7
18524: ARRAY
18525: GREATER
18526: IFFALSE 18552
// begin SetSide ( un , old_side ) ;
18528: LD_VAR 0 1
18532: PPUSH
18533: LD_VAR 0 4
18537: PPUSH
18538: CALL_OW 235
// count := 0 ;
18542: LD_ADDR_VAR 0 5
18546: PUSH
18547: LD_INT 0
18549: ST_TO_ADDR
// end else
18550: GO 18616
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
18552: LD_ADDR_LOC 60
18556: PUSH
18557: LD_LOC 60
18561: PPUSH
18562: LD_VAR 0 7
18566: PPUSH
18567: LD_LOC 60
18571: PUSH
18572: LD_VAR 0 7
18576: ARRAY
18577: PPUSH
18578: LD_VAR 0 4
18582: PPUSH
18583: LD_LOC 60
18587: PUSH
18588: LD_VAR 0 7
18592: ARRAY
18593: PUSH
18594: LD_VAR 0 4
18598: ARRAY
18599: PUSH
18600: LD_VAR 0 5
18604: MINUS
18605: PPUSH
18606: CALL_OW 1
18610: PPUSH
18611: CALL_OW 1
18615: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
18616: LD_ADDR_LOC 60
18620: PUSH
18621: LD_LOC 60
18625: PPUSH
18626: LD_VAR 0 7
18630: PPUSH
18631: LD_LOC 60
18635: PUSH
18636: LD_VAR 0 7
18640: ARRAY
18641: PPUSH
18642: LD_VAR 0 3
18646: PPUSH
18647: LD_LOC 60
18651: PUSH
18652: LD_VAR 0 7
18656: ARRAY
18657: PUSH
18658: LD_VAR 0 3
18662: ARRAY
18663: PUSH
18664: LD_VAR 0 5
18668: PLUS
18669: PPUSH
18670: CALL_OW 1
18674: PPUSH
18675: CALL_OW 1
18679: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
18680: LD_VAR 0 5
18684: PUSH
18685: LD_INT 0
18687: NONEQUAL
18688: PUSH
18689: LD_VAR 0 3
18693: PUSH
18694: LD_OWVAR 2
18698: EQUAL
18699: AND
18700: IFFALSE 18743
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
18702: LD_ADDR_LOC 61
18706: PUSH
18707: LD_LOC 61
18711: PPUSH
18712: LD_INT 3
18714: PUSH
18715: LD_VAR 0 7
18719: MUL
18720: PPUSH
18721: LD_LOC 60
18725: PUSH
18726: LD_VAR 0 7
18730: ARRAY
18731: PUSH
18732: LD_VAR 0 3
18736: ARRAY
18737: PPUSH
18738: CALL_OW 1
18742: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
18743: LD_LOC 60
18747: PUSH
18748: LD_VAR 0 7
18752: ARRAY
18753: PUSH
18754: LD_VAR 0 3
18758: ARRAY
18759: PUSH
18760: LD_LOC 55
18764: PUSH
18765: LD_VAR 0 7
18769: ARRAY
18770: GREATER
18771: IFFALSE 18798
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
18773: LD_ADDR_LOC 62
18777: PUSH
18778: LD_LOC 62
18782: PPUSH
18783: LD_VAR 0 3
18787: PPUSH
18788: LD_INT 1
18790: PPUSH
18791: CALL_OW 1
18795: ST_TO_ADDR
// end else
18796: GO 18885
// begin for j := 1 to Restricted_Builds do
18798: LD_ADDR_VAR 0 8
18802: PUSH
18803: DOUBLE
18804: LD_INT 1
18806: DEC
18807: ST_TO_ADDR
18808: LD_LOC 54
18812: PUSH
18813: FOR_TO
18814: IFFALSE 18858
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
18816: LD_LOC 60
18820: PUSH
18821: LD_VAR 0 8
18825: ARRAY
18826: PUSH
18827: LD_VAR 0 3
18831: ARRAY
18832: PUSH
18833: LD_LOC 55
18837: PUSH
18838: LD_VAR 0 8
18842: ARRAY
18843: GREATER
18844: IFFALSE 18856
// begin Is_Cheater := true ;
18846: LD_ADDR_VAR 0 9
18850: PUSH
18851: LD_INT 1
18853: ST_TO_ADDR
// break ;
18854: GO 18858
// end ;
18856: GO 18813
18858: POP
18859: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
18860: LD_ADDR_LOC 62
18864: PUSH
18865: LD_LOC 62
18869: PPUSH
18870: LD_VAR 0 3
18874: PPUSH
18875: LD_VAR 0 9
18879: PPUSH
18880: CALL_OW 1
18884: ST_TO_ADDR
// end ; break ;
18885: GO 18889
// end ;
18887: GO 18465
18889: POP
18890: POP
// end ;
18891: LD_VAR 0 6
18895: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
18896: LD_VAR 0 5
18900: PUSH
18901: LD_LOC 56
18905: IN
18906: PUSH
18907: LD_VAR 0 2
18911: PUSH
18912: LD_LOC 57
18916: IN
18917: OR
18918: PUSH
18919: LD_VAR 0 4
18923: PUSH
18924: LD_LOC 58
18928: IN
18929: OR
18930: PUSH
18931: LD_VAR 0 3
18935: PUSH
18936: LD_LOC 59
18940: IN
18941: OR
18942: IFFALSE 18953
// ComCancel ( factory ) ;
18944: LD_VAR 0 1
18948: PPUSH
18949: CALL_OW 127
// end ;
18953: PPOPN 5
18955: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
18956: LD_VAR 0 2
18960: PUSH
18961: LD_LOC 56
18965: IN
18966: IFFALSE 18977
// ComCancel ( building ) ;
18968: LD_VAR 0 1
18972: PPUSH
18973: CALL_OW 127
// end ; end_of_file
18977: PPOPN 2
18979: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
18980: LD_INT 0
18982: PPUSH
18983: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
18984: LD_ADDR_VAR 0 2
18988: PUSH
18989: LD_STRING #Multi1x1-Time
18991: PUSH
18992: LD_OWVAR 1
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
19001: LD_INT 0
19003: PUSH
19004: LD_EXP 15
19008: PUSH
19009: LD_OWVAR 1
19013: MINUS
19014: LESSEQUAL
19015: IFFALSE 19046
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
19017: LD_ADDR_VAR 0 2
19021: PUSH
19022: LD_VAR 0 2
19026: PUSH
19027: LD_STRING #allowedsibbomb
19029: PUSH
19030: LD_EXP 15
19034: PUSH
19035: LD_OWVAR 1
19039: MINUS
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: ADD
19045: ST_TO_ADDR
// if ( ExtraStrings ) then
19046: LD_EXP 73
19050: IFFALSE 19072
// AllStrings := AllStrings ^  ^ ExtraStrings ;
19052: LD_ADDR_VAR 0 2
19056: PUSH
19057: LD_VAR 0 2
19061: PUSH
19062: LD_STRING 
19064: ADD
19065: PUSH
19066: LD_EXP 73
19070: ADD
19071: ST_TO_ADDR
// if ( LimitsStrings ) then
19072: CALL 15820 0 0
19076: IFFALSE 19098
// AllStrings := AllStrings ^  ^ LimitsStrings ;
19078: LD_ADDR_VAR 0 2
19082: PUSH
19083: LD_VAR 0 2
19087: PUSH
19088: LD_STRING 
19090: ADD
19091: PUSH
19092: CALL 15820 0 0
19096: ADD
19097: ST_TO_ADDR
// Display_Strings := AllStrings ;
19098: LD_ADDR_OWVAR 47
19102: PUSH
19103: LD_VAR 0 2
19107: ST_TO_ADDR
// end ;
19108: LD_VAR 0 1
19112: RET
// every 0 0$1 do
19113: GO 19115
19115: DISABLE
// begin ShowTimer ;
19116: CALL 18980 0 0
// enable ;
19120: ENABLE
// end ; end_of_file
19121: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
19122: LD_INT 0
19124: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
19125: LD_VAR 0 1
19129: PPUSH
19130: CALL_OW 255
19134: PUSH
19135: LD_VAR 0 4
19139: EQUAL
19140: IFFALSE 19159
// begin SetAchievement ( ACH_RAD ) ;
19142: LD_STRING ACH_RAD
19144: PPUSH
19145: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
19149: LD_STRING ACH_NL
19151: PPUSH
19152: LD_INT 1
19154: PPUSH
19155: CALL_OW 564
// end end ;
19159: LD_VAR 0 5
19163: RET
// export function SA_Win ( side ) ; begin
19164: LD_INT 0
19166: PPUSH
// case side of 1 :
19167: LD_VAR 0 1
19171: PUSH
19172: LD_INT 1
19174: DOUBLE
19175: EQUAL
19176: IFTRUE 19180
19178: GO 19193
19180: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
19181: LD_STRING ACH_AH
19183: PPUSH
19184: LD_INT 1
19186: PPUSH
19187: CALL_OW 564
19191: GO 19356
19193: LD_INT 2
19195: DOUBLE
19196: EQUAL
19197: IFTRUE 19201
19199: GO 19214
19201: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
19202: LD_STRING ACH_E
19204: PPUSH
19205: LD_INT 1
19207: PPUSH
19208: CALL_OW 564
19212: GO 19356
19214: LD_INT 3
19216: DOUBLE
19217: EQUAL
19218: IFTRUE 19222
19220: GO 19235
19222: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
19223: LD_STRING ACH_OOL
19225: PPUSH
19226: LD_INT 1
19228: PPUSH
19229: CALL_OW 564
19233: GO 19356
19235: LD_INT 1
19237: PUSH
19238: LD_INT 2
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: DOUBLE
19245: EQUAL
19246: IFTRUE 19250
19248: GO 19275
19250: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
19251: LD_STRING ACH_AH
19253: PPUSH
19254: LD_REAL  5.00000000000000E-0001
19257: PPUSH
19258: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
19262: LD_STRING ACH_E
19264: PPUSH
19265: LD_REAL  5.00000000000000E-0001
19268: PPUSH
19269: CALL_OW 564
// end ; [ 2 , 3 ] :
19273: GO 19356
19275: LD_INT 2
19277: PUSH
19278: LD_INT 3
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: DOUBLE
19285: EQUAL
19286: IFTRUE 19290
19288: GO 19315
19290: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
19291: LD_STRING ACH_OOL
19293: PPUSH
19294: LD_REAL  5.00000000000000E-0001
19297: PPUSH
19298: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
19302: LD_STRING ACH_E
19304: PPUSH
19305: LD_REAL  5.00000000000000E-0001
19308: PPUSH
19309: CALL_OW 564
// end ; [ 3 , 1 ] :
19313: GO 19356
19315: LD_INT 3
19317: PUSH
19318: LD_INT 1
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: DOUBLE
19325: EQUAL
19326: IFTRUE 19330
19328: GO 19355
19330: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
19331: LD_STRING ACH_AH
19333: PPUSH
19334: LD_REAL  5.00000000000000E-0001
19337: PPUSH
19338: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
19342: LD_STRING ACH_OOL
19344: PPUSH
19345: LD_REAL  5.00000000000000E-0001
19348: PPUSH
19349: CALL_OW 564
// end ; end ;
19353: GO 19356
19355: POP
// end ; end_of_file
19356: LD_VAR 0 2
19360: RET
// export function SetMpTechs ( ) ; var side , i ; begin
19361: LD_INT 0
19363: PPUSH
19364: PPUSH
19365: PPUSH
// for side = 1 to 8 do
19366: LD_ADDR_VAR 0 2
19370: PUSH
19371: DOUBLE
19372: LD_INT 1
19374: DEC
19375: ST_TO_ADDR
19376: LD_INT 8
19378: PUSH
19379: FOR_TO
19380: IFFALSE 19501
// begin for i = 1 to 72 do
19382: LD_ADDR_VAR 0 3
19386: PUSH
19387: DOUBLE
19388: LD_INT 1
19390: DEC
19391: ST_TO_ADDR
19392: LD_INT 72
19394: PUSH
19395: FOR_TO
19396: IFFALSE 19427
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
19398: LD_VAR 0 3
19402: PPUSH
19403: LD_VAR 0 2
19407: PPUSH
19408: LD_INT 0
19410: PPUSH
19411: LD_VAR 0 3
19415: PPUSH
19416: CALL_OW 565
19420: PPUSH
19421: CALL_OW 322
19425: GO 19395
19427: POP
19428: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
19429: LD_INT 73
19431: PPUSH
19432: LD_VAR 0 2
19436: PPUSH
19437: LD_INT 0
19439: PPUSH
19440: LD_INT 25
19442: PPUSH
19443: CALL_OW 565
19447: PPUSH
19448: CALL_OW 322
// for i = 0 to 40 do
19452: LD_ADDR_VAR 0 3
19456: PUSH
19457: DOUBLE
19458: LD_INT 0
19460: DEC
19461: ST_TO_ADDR
19462: LD_INT 40
19464: PUSH
19465: FOR_TO
19466: IFFALSE 19497
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
19468: LD_VAR 0 3
19472: PPUSH
19473: LD_VAR 0 2
19477: PPUSH
19478: LD_INT 1
19480: PPUSH
19481: LD_VAR 0 3
19485: PPUSH
19486: CALL_OW 565
19490: PPUSH
19491: CALL_OW 324
19495: GO 19465
19497: POP
19498: POP
// end ;
19499: GO 19379
19501: POP
19502: POP
// end ;
19503: LD_VAR 0 1
19507: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
19508: LD_INT 0
19510: PPUSH
19511: PPUSH
19512: PPUSH
// for side = 1 to 8 do
19513: LD_ADDR_VAR 0 3
19517: PUSH
19518: DOUBLE
19519: LD_INT 1
19521: DEC
19522: ST_TO_ADDR
19523: LD_INT 8
19525: PUSH
19526: FOR_TO
19527: IFFALSE 23523
// begin for i = 1 to 73 do
19529: LD_ADDR_VAR 0 4
19533: PUSH
19534: DOUBLE
19535: LD_INT 1
19537: DEC
19538: ST_TO_ADDR
19539: LD_INT 73
19541: PUSH
19542: FOR_TO
19543: IFFALSE 19564
// SetTech ( i , side , state_disabled ) ;
19545: LD_VAR 0 4
19549: PPUSH
19550: LD_VAR 0 3
19554: PPUSH
19555: LD_INT 0
19557: PPUSH
19558: CALL_OW 322
19562: GO 19542
19564: POP
19565: POP
// for i = 0 to 40 do
19566: LD_ADDR_VAR 0 4
19570: PUSH
19571: DOUBLE
19572: LD_INT 0
19574: DEC
19575: ST_TO_ADDR
19576: LD_INT 40
19578: PUSH
19579: FOR_TO
19580: IFFALSE 19601
// SetRestrict ( i , side , false ) ;
19582: LD_VAR 0 4
19586: PPUSH
19587: LD_VAR 0 3
19591: PPUSH
19592: LD_INT 0
19594: PPUSH
19595: CALL_OW 324
19599: GO 19579
19601: POP
19602: POP
// case level of 1 :
19603: LD_VAR 0 1
19607: PUSH
19608: LD_INT 1
19610: DOUBLE
19611: EQUAL
19612: IFTRUE 19616
19614: GO 19769
19616: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19617: LD_INT 35
19619: PPUSH
19620: LD_VAR 0 3
19624: PPUSH
19625: LD_INT 1
19627: PPUSH
19628: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19632: LD_INT 45
19634: PPUSH
19635: LD_VAR 0 3
19639: PPUSH
19640: LD_INT 1
19642: PPUSH
19643: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19647: LD_INT 46
19649: PPUSH
19650: LD_VAR 0 3
19654: PPUSH
19655: LD_INT 1
19657: PPUSH
19658: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19662: LD_INT 47
19664: PPUSH
19665: LD_VAR 0 3
19669: PPUSH
19670: LD_INT 1
19672: PPUSH
19673: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
19677: LD_INT 0
19679: PPUSH
19680: LD_VAR 0 3
19684: PPUSH
19685: LD_INT 1
19687: PPUSH
19688: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
19692: LD_INT 2
19694: PPUSH
19695: LD_VAR 0 3
19699: PPUSH
19700: LD_INT 1
19702: PPUSH
19703: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
19707: LD_INT 4
19709: PPUSH
19710: LD_VAR 0 3
19714: PPUSH
19715: LD_INT 1
19717: PPUSH
19718: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
19722: LD_INT 6
19724: PPUSH
19725: LD_VAR 0 3
19729: PPUSH
19730: LD_INT 1
19732: PPUSH
19733: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
19737: LD_INT 29
19739: PPUSH
19740: LD_VAR 0 3
19744: PPUSH
19745: LD_INT 1
19747: PPUSH
19748: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
19752: LD_INT 31
19754: PPUSH
19755: LD_VAR 0 3
19759: PPUSH
19760: LD_INT 1
19762: PPUSH
19763: CALL_OW 324
// end ; 2 :
19767: GO 23521
19769: LD_INT 2
19771: DOUBLE
19772: EQUAL
19773: IFTRUE 19777
19775: GO 19975
19777: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19778: LD_INT 35
19780: PPUSH
19781: LD_VAR 0 3
19785: PPUSH
19786: LD_INT 1
19788: PPUSH
19789: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19793: LD_INT 45
19795: PPUSH
19796: LD_VAR 0 3
19800: PPUSH
19801: LD_INT 1
19803: PPUSH
19804: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19808: LD_INT 46
19810: PPUSH
19811: LD_VAR 0 3
19815: PPUSH
19816: LD_INT 1
19818: PPUSH
19819: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19823: LD_INT 47
19825: PPUSH
19826: LD_VAR 0 3
19830: PPUSH
19831: LD_INT 1
19833: PPUSH
19834: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
19838: LD_INT 1
19840: PPUSH
19841: LD_VAR 0 3
19845: PPUSH
19846: LD_INT 1
19848: PPUSH
19849: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
19853: LD_INT 2
19855: PPUSH
19856: LD_VAR 0 3
19860: PPUSH
19861: LD_INT 1
19863: PPUSH
19864: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
19868: LD_INT 11
19870: PPUSH
19871: LD_VAR 0 3
19875: PPUSH
19876: LD_INT 1
19878: PPUSH
19879: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
19883: LD_INT 0
19885: PPUSH
19886: LD_VAR 0 3
19890: PPUSH
19891: LD_INT 1
19893: PPUSH
19894: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
19898: LD_INT 2
19900: PPUSH
19901: LD_VAR 0 3
19905: PPUSH
19906: LD_INT 1
19908: PPUSH
19909: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
19913: LD_INT 4
19915: PPUSH
19916: LD_VAR 0 3
19920: PPUSH
19921: LD_INT 1
19923: PPUSH
19924: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
19928: LD_INT 6
19930: PPUSH
19931: LD_VAR 0 3
19935: PPUSH
19936: LD_INT 1
19938: PPUSH
19939: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
19943: LD_INT 29
19945: PPUSH
19946: LD_VAR 0 3
19950: PPUSH
19951: LD_INT 1
19953: PPUSH
19954: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
19958: LD_INT 31
19960: PPUSH
19961: LD_VAR 0 3
19965: PPUSH
19966: LD_INT 1
19968: PPUSH
19969: CALL_OW 324
// end ; 3 :
19973: GO 23521
19975: LD_INT 3
19977: DOUBLE
19978: EQUAL
19979: IFTRUE 19983
19981: GO 20436
19983: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19984: LD_INT 35
19986: PPUSH
19987: LD_VAR 0 3
19991: PPUSH
19992: LD_INT 1
19994: PPUSH
19995: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19999: LD_INT 45
20001: PPUSH
20002: LD_VAR 0 3
20006: PPUSH
20007: LD_INT 1
20009: PPUSH
20010: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
20014: LD_INT 46
20016: PPUSH
20017: LD_VAR 0 3
20021: PPUSH
20022: LD_INT 1
20024: PPUSH
20025: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
20029: LD_INT 47
20031: PPUSH
20032: LD_VAR 0 3
20036: PPUSH
20037: LD_INT 1
20039: PPUSH
20040: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
20044: LD_INT 1
20046: PPUSH
20047: LD_VAR 0 3
20051: PPUSH
20052: LD_INT 1
20054: PPUSH
20055: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
20059: LD_INT 2
20061: PPUSH
20062: LD_VAR 0 3
20066: PPUSH
20067: LD_INT 1
20069: PPUSH
20070: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
20074: LD_INT 11
20076: PPUSH
20077: LD_VAR 0 3
20081: PPUSH
20082: LD_INT 1
20084: PPUSH
20085: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
20089: LD_INT 48
20091: PPUSH
20092: LD_VAR 0 3
20096: PPUSH
20097: LD_INT 1
20099: PPUSH
20100: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
20104: LD_INT 69
20106: PPUSH
20107: LD_VAR 0 3
20111: PPUSH
20112: LD_INT 1
20114: PPUSH
20115: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
20119: LD_INT 39
20121: PPUSH
20122: LD_VAR 0 3
20126: PPUSH
20127: LD_INT 1
20129: PPUSH
20130: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
20134: LD_INT 43
20136: PPUSH
20137: LD_VAR 0 3
20141: PPUSH
20142: LD_INT 1
20144: PPUSH
20145: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
20149: LD_INT 51
20151: PPUSH
20152: LD_VAR 0 3
20156: PPUSH
20157: LD_INT 1
20159: PPUSH
20160: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
20164: LD_INT 6
20166: PPUSH
20167: LD_VAR 0 3
20171: PPUSH
20172: LD_INT 1
20174: PPUSH
20175: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
20179: LD_INT 0
20181: PPUSH
20182: LD_VAR 0 3
20186: PPUSH
20187: LD_INT 1
20189: PPUSH
20190: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
20194: LD_INT 2
20196: PPUSH
20197: LD_VAR 0 3
20201: PPUSH
20202: LD_INT 1
20204: PPUSH
20205: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
20209: LD_INT 3
20211: PPUSH
20212: LD_VAR 0 3
20216: PPUSH
20217: LD_INT 1
20219: PPUSH
20220: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
20224: LD_INT 4
20226: PPUSH
20227: LD_VAR 0 3
20231: PPUSH
20232: LD_INT 1
20234: PPUSH
20235: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
20239: LD_INT 6
20241: PPUSH
20242: LD_VAR 0 3
20246: PPUSH
20247: LD_INT 1
20249: PPUSH
20250: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
20254: LD_INT 7
20256: PPUSH
20257: LD_VAR 0 3
20261: PPUSH
20262: LD_INT 1
20264: PPUSH
20265: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
20269: LD_INT 8
20271: PPUSH
20272: LD_VAR 0 3
20276: PPUSH
20277: LD_INT 1
20279: PPUSH
20280: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
20284: LD_INT 10
20286: PPUSH
20287: LD_VAR 0 3
20291: PPUSH
20292: LD_INT 1
20294: PPUSH
20295: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
20299: LD_INT 15
20301: PPUSH
20302: LD_VAR 0 3
20306: PPUSH
20307: LD_INT 1
20309: PPUSH
20310: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
20314: LD_INT 16
20316: PPUSH
20317: LD_VAR 0 3
20321: PPUSH
20322: LD_INT 1
20324: PPUSH
20325: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
20329: LD_INT 17
20331: PPUSH
20332: LD_VAR 0 3
20336: PPUSH
20337: LD_INT 1
20339: PPUSH
20340: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
20344: LD_INT 20
20346: PPUSH
20347: LD_VAR 0 3
20351: PPUSH
20352: LD_INT 1
20354: PPUSH
20355: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
20359: LD_INT 26
20361: PPUSH
20362: LD_VAR 0 3
20366: PPUSH
20367: LD_INT 1
20369: PPUSH
20370: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
20374: LD_INT 27
20376: PPUSH
20377: LD_VAR 0 3
20381: PPUSH
20382: LD_INT 1
20384: PPUSH
20385: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
20389: LD_INT 29
20391: PPUSH
20392: LD_VAR 0 3
20396: PPUSH
20397: LD_INT 1
20399: PPUSH
20400: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
20404: LD_INT 31
20406: PPUSH
20407: LD_VAR 0 3
20411: PPUSH
20412: LD_INT 1
20414: PPUSH
20415: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
20419: LD_INT 32
20421: PPUSH
20422: LD_VAR 0 3
20426: PPUSH
20427: LD_INT 1
20429: PPUSH
20430: CALL_OW 324
// end ; 4 :
20434: GO 23521
20436: LD_INT 4
20438: DOUBLE
20439: EQUAL
20440: IFTRUE 20444
20442: GO 21392
20444: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
20445: LD_INT 35
20447: PPUSH
20448: LD_VAR 0 3
20452: PPUSH
20453: LD_INT 1
20455: PPUSH
20456: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
20460: LD_INT 45
20462: PPUSH
20463: LD_VAR 0 3
20467: PPUSH
20468: LD_INT 1
20470: PPUSH
20471: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
20475: LD_INT 46
20477: PPUSH
20478: LD_VAR 0 3
20482: PPUSH
20483: LD_INT 1
20485: PPUSH
20486: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
20490: LD_INT 47
20492: PPUSH
20493: LD_VAR 0 3
20497: PPUSH
20498: LD_INT 1
20500: PPUSH
20501: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
20505: LD_INT 1
20507: PPUSH
20508: LD_VAR 0 3
20512: PPUSH
20513: LD_INT 1
20515: PPUSH
20516: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
20520: LD_INT 2
20522: PPUSH
20523: LD_VAR 0 3
20527: PPUSH
20528: LD_INT 1
20530: PPUSH
20531: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
20535: LD_INT 11
20537: PPUSH
20538: LD_VAR 0 3
20542: PPUSH
20543: LD_INT 1
20545: PPUSH
20546: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
20550: LD_INT 20
20552: PPUSH
20553: LD_VAR 0 3
20557: PPUSH
20558: LD_INT 1
20560: PPUSH
20561: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
20565: LD_INT 48
20567: PPUSH
20568: LD_VAR 0 3
20572: PPUSH
20573: LD_INT 1
20575: PPUSH
20576: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
20580: LD_INT 49
20582: PPUSH
20583: LD_VAR 0 3
20587: PPUSH
20588: LD_INT 1
20590: PPUSH
20591: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
20595: LD_INT 69
20597: PPUSH
20598: LD_VAR 0 3
20602: PPUSH
20603: LD_INT 1
20605: PPUSH
20606: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
20610: LD_INT 39
20612: PPUSH
20613: LD_VAR 0 3
20617: PPUSH
20618: LD_INT 1
20620: PPUSH
20621: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
20625: LD_INT 34
20627: PPUSH
20628: LD_VAR 0 3
20632: PPUSH
20633: LD_INT 1
20635: PPUSH
20636: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
20640: LD_INT 42
20642: PPUSH
20643: LD_VAR 0 3
20647: PPUSH
20648: LD_INT 1
20650: PPUSH
20651: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
20655: LD_INT 44
20657: PPUSH
20658: LD_VAR 0 3
20662: PPUSH
20663: LD_INT 1
20665: PPUSH
20666: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
20670: LD_INT 41
20672: PPUSH
20673: LD_VAR 0 3
20677: PPUSH
20678: LD_INT 1
20680: PPUSH
20681: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
20685: LD_INT 43
20687: PPUSH
20688: LD_VAR 0 3
20692: PPUSH
20693: LD_INT 1
20695: PPUSH
20696: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
20700: LD_INT 70
20702: PPUSH
20703: LD_VAR 0 3
20707: PPUSH
20708: LD_INT 1
20710: PPUSH
20711: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
20715: LD_INT 51
20717: PPUSH
20718: LD_VAR 0 3
20722: PPUSH
20723: LD_INT 1
20725: PPUSH
20726: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
20730: LD_INT 52
20732: PPUSH
20733: LD_VAR 0 3
20737: PPUSH
20738: LD_INT 1
20740: PPUSH
20741: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
20745: LD_INT 6
20747: PPUSH
20748: LD_VAR 0 3
20752: PPUSH
20753: LD_INT 1
20755: PPUSH
20756: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
20760: LD_INT 15
20762: PPUSH
20763: LD_VAR 0 3
20767: PPUSH
20768: LD_INT 1
20770: PPUSH
20771: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
20775: LD_INT 7
20777: PPUSH
20778: LD_VAR 0 3
20782: PPUSH
20783: LD_INT 1
20785: PPUSH
20786: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
20790: LD_INT 12
20792: PPUSH
20793: LD_VAR 0 3
20797: PPUSH
20798: LD_INT 1
20800: PPUSH
20801: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
20805: LD_INT 18
20807: PPUSH
20808: LD_VAR 0 3
20812: PPUSH
20813: LD_INT 1
20815: PPUSH
20816: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
20820: LD_INT 60
20822: PPUSH
20823: LD_VAR 0 3
20827: PPUSH
20828: LD_INT 1
20830: PPUSH
20831: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
20835: LD_INT 9
20837: PPUSH
20838: LD_VAR 0 3
20842: PPUSH
20843: LD_INT 1
20845: PPUSH
20846: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
20850: LD_INT 30
20852: PPUSH
20853: LD_VAR 0 3
20857: PPUSH
20858: LD_INT 1
20860: PPUSH
20861: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
20865: LD_INT 37
20867: PPUSH
20868: LD_VAR 0 3
20872: PPUSH
20873: LD_INT 1
20875: PPUSH
20876: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
20880: LD_INT 5
20882: PPUSH
20883: LD_VAR 0 3
20887: PPUSH
20888: LD_INT 1
20890: PPUSH
20891: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
20895: LD_INT 66
20897: PPUSH
20898: LD_VAR 0 3
20902: PPUSH
20903: LD_INT 1
20905: PPUSH
20906: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
20910: LD_INT 21
20912: PPUSH
20913: LD_VAR 0 3
20917: PPUSH
20918: LD_INT 1
20920: PPUSH
20921: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
20925: LD_INT 22
20927: PPUSH
20928: LD_VAR 0 3
20932: PPUSH
20933: LD_INT 1
20935: PPUSH
20936: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
20940: LD_INT 54
20942: PPUSH
20943: LD_VAR 0 3
20947: PPUSH
20948: LD_INT 1
20950: PPUSH
20951: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
20955: LD_INT 0
20957: PPUSH
20958: LD_VAR 0 3
20962: PPUSH
20963: LD_INT 1
20965: PPUSH
20966: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
20970: LD_INT 1
20972: PPUSH
20973: LD_VAR 0 3
20977: PPUSH
20978: LD_INT 1
20980: PPUSH
20981: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
20985: LD_INT 2
20987: PPUSH
20988: LD_VAR 0 3
20992: PPUSH
20993: LD_INT 1
20995: PPUSH
20996: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
21000: LD_INT 3
21002: PPUSH
21003: LD_VAR 0 3
21007: PPUSH
21008: LD_INT 1
21010: PPUSH
21011: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
21015: LD_INT 4
21017: PPUSH
21018: LD_VAR 0 3
21022: PPUSH
21023: LD_INT 1
21025: PPUSH
21026: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
21030: LD_INT 5
21032: PPUSH
21033: LD_VAR 0 3
21037: PPUSH
21038: LD_INT 1
21040: PPUSH
21041: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
21045: LD_INT 6
21047: PPUSH
21048: LD_VAR 0 3
21052: PPUSH
21053: LD_INT 1
21055: PPUSH
21056: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
21060: LD_INT 7
21062: PPUSH
21063: LD_VAR 0 3
21067: PPUSH
21068: LD_INT 1
21070: PPUSH
21071: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
21075: LD_INT 8
21077: PPUSH
21078: LD_VAR 0 3
21082: PPUSH
21083: LD_INT 1
21085: PPUSH
21086: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
21090: LD_INT 10
21092: PPUSH
21093: LD_VAR 0 3
21097: PPUSH
21098: LD_INT 1
21100: PPUSH
21101: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
21105: LD_INT 11
21107: PPUSH
21108: LD_VAR 0 3
21112: PPUSH
21113: LD_INT 1
21115: PPUSH
21116: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
21120: LD_INT 12
21122: PPUSH
21123: LD_VAR 0 3
21127: PPUSH
21128: LD_INT 1
21130: PPUSH
21131: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
21135: LD_INT 13
21137: PPUSH
21138: LD_VAR 0 3
21142: PPUSH
21143: LD_INT 1
21145: PPUSH
21146: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
21150: LD_INT 14
21152: PPUSH
21153: LD_VAR 0 3
21157: PPUSH
21158: LD_INT 1
21160: PPUSH
21161: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
21165: LD_INT 15
21167: PPUSH
21168: LD_VAR 0 3
21172: PPUSH
21173: LD_INT 1
21175: PPUSH
21176: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
21180: LD_INT 16
21182: PPUSH
21183: LD_VAR 0 3
21187: PPUSH
21188: LD_INT 1
21190: PPUSH
21191: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
21195: LD_INT 17
21197: PPUSH
21198: LD_VAR 0 3
21202: PPUSH
21203: LD_INT 1
21205: PPUSH
21206: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
21210: LD_INT 19
21212: PPUSH
21213: LD_VAR 0 3
21217: PPUSH
21218: LD_INT 1
21220: PPUSH
21221: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
21225: LD_INT 20
21227: PPUSH
21228: LD_VAR 0 3
21232: PPUSH
21233: LD_INT 1
21235: PPUSH
21236: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
21240: LD_INT 21
21242: PPUSH
21243: LD_VAR 0 3
21247: PPUSH
21248: LD_INT 1
21250: PPUSH
21251: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
21255: LD_INT 23
21257: PPUSH
21258: LD_VAR 0 3
21262: PPUSH
21263: LD_INT 1
21265: PPUSH
21266: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
21270: LD_INT 26
21272: PPUSH
21273: LD_VAR 0 3
21277: PPUSH
21278: LD_INT 1
21280: PPUSH
21281: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
21285: LD_INT 27
21287: PPUSH
21288: LD_VAR 0 3
21292: PPUSH
21293: LD_INT 1
21295: PPUSH
21296: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
21300: LD_INT 28
21302: PPUSH
21303: LD_VAR 0 3
21307: PPUSH
21308: LD_INT 1
21310: PPUSH
21311: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
21315: LD_INT 29
21317: PPUSH
21318: LD_VAR 0 3
21322: PPUSH
21323: LD_INT 1
21325: PPUSH
21326: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
21330: LD_INT 30
21332: PPUSH
21333: LD_VAR 0 3
21337: PPUSH
21338: LD_INT 1
21340: PPUSH
21341: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
21345: LD_INT 31
21347: PPUSH
21348: LD_VAR 0 3
21352: PPUSH
21353: LD_INT 1
21355: PPUSH
21356: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
21360: LD_INT 32
21362: PPUSH
21363: LD_VAR 0 3
21367: PPUSH
21368: LD_INT 1
21370: PPUSH
21371: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
21375: LD_INT 36
21377: PPUSH
21378: LD_VAR 0 3
21382: PPUSH
21383: LD_INT 1
21385: PPUSH
21386: CALL_OW 324
// end ; 5 :
21390: GO 23521
21392: LD_INT 5
21394: DOUBLE
21395: EQUAL
21396: IFTRUE 21400
21398: GO 22513
21400: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
21401: LD_INT 35
21403: PPUSH
21404: LD_VAR 0 3
21408: PPUSH
21409: LD_INT 1
21411: PPUSH
21412: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
21416: LD_INT 45
21418: PPUSH
21419: LD_VAR 0 3
21423: PPUSH
21424: LD_INT 1
21426: PPUSH
21427: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
21431: LD_INT 46
21433: PPUSH
21434: LD_VAR 0 3
21438: PPUSH
21439: LD_INT 1
21441: PPUSH
21442: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
21446: LD_INT 47
21448: PPUSH
21449: LD_VAR 0 3
21453: PPUSH
21454: LD_INT 1
21456: PPUSH
21457: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
21461: LD_INT 1
21463: PPUSH
21464: LD_VAR 0 3
21468: PPUSH
21469: LD_INT 1
21471: PPUSH
21472: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
21476: LD_INT 2
21478: PPUSH
21479: LD_VAR 0 3
21483: PPUSH
21484: LD_INT 1
21486: PPUSH
21487: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
21491: LD_INT 11
21493: PPUSH
21494: LD_VAR 0 3
21498: PPUSH
21499: LD_INT 1
21501: PPUSH
21502: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
21506: LD_INT 20
21508: PPUSH
21509: LD_VAR 0 3
21513: PPUSH
21514: LD_INT 1
21516: PPUSH
21517: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
21521: LD_INT 48
21523: PPUSH
21524: LD_VAR 0 3
21528: PPUSH
21529: LD_INT 1
21531: PPUSH
21532: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
21536: LD_INT 49
21538: PPUSH
21539: LD_VAR 0 3
21543: PPUSH
21544: LD_INT 1
21546: PPUSH
21547: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
21551: LD_INT 69
21553: PPUSH
21554: LD_VAR 0 3
21558: PPUSH
21559: LD_INT 1
21561: PPUSH
21562: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
21566: LD_INT 39
21568: PPUSH
21569: LD_VAR 0 3
21573: PPUSH
21574: LD_INT 1
21576: PPUSH
21577: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
21581: LD_INT 34
21583: PPUSH
21584: LD_VAR 0 3
21588: PPUSH
21589: LD_INT 1
21591: PPUSH
21592: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
21596: LD_INT 42
21598: PPUSH
21599: LD_VAR 0 3
21603: PPUSH
21604: LD_INT 1
21606: PPUSH
21607: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
21611: LD_INT 44
21613: PPUSH
21614: LD_VAR 0 3
21618: PPUSH
21619: LD_INT 1
21621: PPUSH
21622: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
21626: LD_INT 41
21628: PPUSH
21629: LD_VAR 0 3
21633: PPUSH
21634: LD_INT 1
21636: PPUSH
21637: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
21641: LD_INT 40
21643: PPUSH
21644: LD_VAR 0 3
21648: PPUSH
21649: LD_INT 1
21651: PPUSH
21652: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
21656: LD_INT 43
21658: PPUSH
21659: LD_VAR 0 3
21663: PPUSH
21664: LD_INT 1
21666: PPUSH
21667: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
21671: LD_INT 70
21673: PPUSH
21674: LD_VAR 0 3
21678: PPUSH
21679: LD_INT 1
21681: PPUSH
21682: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
21686: LD_INT 51
21688: PPUSH
21689: LD_VAR 0 3
21693: PPUSH
21694: LD_INT 1
21696: PPUSH
21697: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
21701: LD_INT 52
21703: PPUSH
21704: LD_VAR 0 3
21708: PPUSH
21709: LD_INT 1
21711: PPUSH
21712: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
21716: LD_INT 6
21718: PPUSH
21719: LD_VAR 0 3
21723: PPUSH
21724: LD_INT 1
21726: PPUSH
21727: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
21731: LD_INT 15
21733: PPUSH
21734: LD_VAR 0 3
21738: PPUSH
21739: LD_INT 1
21741: PPUSH
21742: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
21746: LD_INT 7
21748: PPUSH
21749: LD_VAR 0 3
21753: PPUSH
21754: LD_INT 1
21756: PPUSH
21757: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
21761: LD_INT 12
21763: PPUSH
21764: LD_VAR 0 3
21768: PPUSH
21769: LD_INT 1
21771: PPUSH
21772: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
21776: LD_INT 17
21778: PPUSH
21779: LD_VAR 0 3
21783: PPUSH
21784: LD_INT 1
21786: PPUSH
21787: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
21791: LD_INT 18
21793: PPUSH
21794: LD_VAR 0 3
21798: PPUSH
21799: LD_INT 1
21801: PPUSH
21802: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
21806: LD_INT 60
21808: PPUSH
21809: LD_VAR 0 3
21813: PPUSH
21814: LD_INT 1
21816: PPUSH
21817: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
21821: LD_INT 32
21823: PPUSH
21824: LD_VAR 0 3
21828: PPUSH
21829: LD_INT 1
21831: PPUSH
21832: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
21836: LD_INT 9
21838: PPUSH
21839: LD_VAR 0 3
21843: PPUSH
21844: LD_INT 1
21846: PPUSH
21847: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
21851: LD_INT 57
21853: PPUSH
21854: LD_VAR 0 3
21858: PPUSH
21859: LD_INT 1
21861: PPUSH
21862: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
21866: LD_INT 30
21868: PPUSH
21869: LD_VAR 0 3
21873: PPUSH
21874: LD_INT 1
21876: PPUSH
21877: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
21881: LD_INT 37
21883: PPUSH
21884: LD_VAR 0 3
21888: PPUSH
21889: LD_INT 1
21891: PPUSH
21892: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
21896: LD_INT 63
21898: PPUSH
21899: LD_VAR 0 3
21903: PPUSH
21904: LD_INT 1
21906: PPUSH
21907: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
21911: LD_INT 3
21913: PPUSH
21914: LD_VAR 0 3
21918: PPUSH
21919: LD_INT 1
21921: PPUSH
21922: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
21926: LD_INT 4
21928: PPUSH
21929: LD_VAR 0 3
21933: PPUSH
21934: LD_INT 1
21936: PPUSH
21937: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
21941: LD_INT 5
21943: PPUSH
21944: LD_VAR 0 3
21948: PPUSH
21949: LD_INT 1
21951: PPUSH
21952: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
21956: LD_INT 66
21958: PPUSH
21959: LD_VAR 0 3
21963: PPUSH
21964: LD_INT 1
21966: PPUSH
21967: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
21971: LD_INT 21
21973: PPUSH
21974: LD_VAR 0 3
21978: PPUSH
21979: LD_INT 1
21981: PPUSH
21982: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
21986: LD_INT 22
21988: PPUSH
21989: LD_VAR 0 3
21993: PPUSH
21994: LD_INT 1
21996: PPUSH
21997: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
22001: LD_INT 19
22003: PPUSH
22004: LD_VAR 0 3
22008: PPUSH
22009: LD_INT 1
22011: PPUSH
22012: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
22016: LD_INT 54
22018: PPUSH
22019: LD_VAR 0 3
22023: PPUSH
22024: LD_INT 1
22026: PPUSH
22027: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
22031: LD_INT 55
22033: PPUSH
22034: LD_VAR 0 3
22038: PPUSH
22039: LD_INT 1
22041: PPUSH
22042: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22046: LD_INT 0
22048: PPUSH
22049: LD_VAR 0 3
22053: PPUSH
22054: LD_INT 1
22056: PPUSH
22057: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
22061: LD_INT 1
22063: PPUSH
22064: LD_VAR 0 3
22068: PPUSH
22069: LD_INT 1
22071: PPUSH
22072: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22076: LD_INT 2
22078: PPUSH
22079: LD_VAR 0 3
22083: PPUSH
22084: LD_INT 1
22086: PPUSH
22087: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
22091: LD_INT 3
22093: PPUSH
22094: LD_VAR 0 3
22098: PPUSH
22099: LD_INT 1
22101: PPUSH
22102: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22106: LD_INT 4
22108: PPUSH
22109: LD_VAR 0 3
22113: PPUSH
22114: LD_INT 1
22116: PPUSH
22117: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
22121: LD_INT 5
22123: PPUSH
22124: LD_VAR 0 3
22128: PPUSH
22129: LD_INT 1
22131: PPUSH
22132: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22136: LD_INT 6
22138: PPUSH
22139: LD_VAR 0 3
22143: PPUSH
22144: LD_INT 1
22146: PPUSH
22147: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
22151: LD_INT 7
22153: PPUSH
22154: LD_VAR 0 3
22158: PPUSH
22159: LD_INT 1
22161: PPUSH
22162: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
22166: LD_INT 8
22168: PPUSH
22169: LD_VAR 0 3
22173: PPUSH
22174: LD_INT 1
22176: PPUSH
22177: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
22181: LD_INT 10
22183: PPUSH
22184: LD_VAR 0 3
22188: PPUSH
22189: LD_INT 1
22191: PPUSH
22192: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
22196: LD_INT 11
22198: PPUSH
22199: LD_VAR 0 3
22203: PPUSH
22204: LD_INT 1
22206: PPUSH
22207: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
22211: LD_INT 12
22213: PPUSH
22214: LD_VAR 0 3
22218: PPUSH
22219: LD_INT 1
22221: PPUSH
22222: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
22226: LD_INT 13
22228: PPUSH
22229: LD_VAR 0 3
22233: PPUSH
22234: LD_INT 1
22236: PPUSH
22237: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
22241: LD_INT 14
22243: PPUSH
22244: LD_VAR 0 3
22248: PPUSH
22249: LD_INT 1
22251: PPUSH
22252: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
22256: LD_INT 15
22258: PPUSH
22259: LD_VAR 0 3
22263: PPUSH
22264: LD_INT 1
22266: PPUSH
22267: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
22271: LD_INT 16
22273: PPUSH
22274: LD_VAR 0 3
22278: PPUSH
22279: LD_INT 1
22281: PPUSH
22282: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
22286: LD_INT 17
22288: PPUSH
22289: LD_VAR 0 3
22293: PPUSH
22294: LD_INT 1
22296: PPUSH
22297: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
22301: LD_INT 18
22303: PPUSH
22304: LD_VAR 0 3
22308: PPUSH
22309: LD_INT 1
22311: PPUSH
22312: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
22316: LD_INT 19
22318: PPUSH
22319: LD_VAR 0 3
22323: PPUSH
22324: LD_INT 1
22326: PPUSH
22327: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
22331: LD_INT 20
22333: PPUSH
22334: LD_VAR 0 3
22338: PPUSH
22339: LD_INT 1
22341: PPUSH
22342: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
22346: LD_INT 21
22348: PPUSH
22349: LD_VAR 0 3
22353: PPUSH
22354: LD_INT 1
22356: PPUSH
22357: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
22361: LD_INT 23
22363: PPUSH
22364: LD_VAR 0 3
22368: PPUSH
22369: LD_INT 1
22371: PPUSH
22372: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
22376: LD_INT 26
22378: PPUSH
22379: LD_VAR 0 3
22383: PPUSH
22384: LD_INT 1
22386: PPUSH
22387: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
22391: LD_INT 27
22393: PPUSH
22394: LD_VAR 0 3
22398: PPUSH
22399: LD_INT 1
22401: PPUSH
22402: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
22406: LD_INT 28
22408: PPUSH
22409: LD_VAR 0 3
22413: PPUSH
22414: LD_INT 1
22416: PPUSH
22417: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22421: LD_INT 29
22423: PPUSH
22424: LD_VAR 0 3
22428: PPUSH
22429: LD_INT 1
22431: PPUSH
22432: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
22436: LD_INT 30
22438: PPUSH
22439: LD_VAR 0 3
22443: PPUSH
22444: LD_INT 1
22446: PPUSH
22447: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22451: LD_INT 31
22453: PPUSH
22454: LD_VAR 0 3
22458: PPUSH
22459: LD_INT 1
22461: PPUSH
22462: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
22466: LD_INT 32
22468: PPUSH
22469: LD_VAR 0 3
22473: PPUSH
22474: LD_INT 1
22476: PPUSH
22477: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
22481: LD_INT 33
22483: PPUSH
22484: LD_VAR 0 3
22488: PPUSH
22489: LD_INT 1
22491: PPUSH
22492: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
22496: LD_INT 36
22498: PPUSH
22499: LD_VAR 0 3
22503: PPUSH
22504: LD_INT 1
22506: PPUSH
22507: CALL_OW 324
// end ; 6 :
22511: GO 23521
22513: LD_INT 6
22515: DOUBLE
22516: EQUAL
22517: IFTRUE 22521
22519: GO 23446
22521: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22522: LD_INT 35
22524: PPUSH
22525: LD_VAR 0 3
22529: PPUSH
22530: LD_INT 1
22532: PPUSH
22533: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22537: LD_INT 45
22539: PPUSH
22540: LD_VAR 0 3
22544: PPUSH
22545: LD_INT 1
22547: PPUSH
22548: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22552: LD_INT 46
22554: PPUSH
22555: LD_VAR 0 3
22559: PPUSH
22560: LD_INT 1
22562: PPUSH
22563: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22567: LD_INT 47
22569: PPUSH
22570: LD_VAR 0 3
22574: PPUSH
22575: LD_INT 1
22577: PPUSH
22578: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22582: LD_INT 1
22584: PPUSH
22585: LD_VAR 0 3
22589: PPUSH
22590: LD_INT 1
22592: PPUSH
22593: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22597: LD_INT 2
22599: PPUSH
22600: LD_VAR 0 3
22604: PPUSH
22605: LD_INT 1
22607: PPUSH
22608: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22612: LD_INT 11
22614: PPUSH
22615: LD_VAR 0 3
22619: PPUSH
22620: LD_INT 1
22622: PPUSH
22623: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
22627: LD_INT 20
22629: PPUSH
22630: LD_VAR 0 3
22634: PPUSH
22635: LD_INT 1
22637: PPUSH
22638: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
22642: LD_INT 48
22644: PPUSH
22645: LD_VAR 0 3
22649: PPUSH
22650: LD_INT 1
22652: PPUSH
22653: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
22657: LD_INT 49
22659: PPUSH
22660: LD_VAR 0 3
22664: PPUSH
22665: LD_INT 1
22667: PPUSH
22668: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
22672: LD_INT 50
22674: PPUSH
22675: LD_VAR 0 3
22679: PPUSH
22680: LD_INT 1
22682: PPUSH
22683: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
22687: LD_INT 69
22689: PPUSH
22690: LD_VAR 0 3
22694: PPUSH
22695: LD_INT 1
22697: PPUSH
22698: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
22702: LD_INT 39
22704: PPUSH
22705: LD_VAR 0 3
22709: PPUSH
22710: LD_INT 1
22712: PPUSH
22713: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
22717: LD_INT 34
22719: PPUSH
22720: LD_VAR 0 3
22724: PPUSH
22725: LD_INT 1
22727: PPUSH
22728: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
22732: LD_INT 42
22734: PPUSH
22735: LD_VAR 0 3
22739: PPUSH
22740: LD_INT 1
22742: PPUSH
22743: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
22747: LD_INT 44
22749: PPUSH
22750: LD_VAR 0 3
22754: PPUSH
22755: LD_INT 1
22757: PPUSH
22758: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
22762: LD_INT 41
22764: PPUSH
22765: LD_VAR 0 3
22769: PPUSH
22770: LD_INT 1
22772: PPUSH
22773: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
22777: LD_INT 13
22779: PPUSH
22780: LD_VAR 0 3
22784: PPUSH
22785: LD_INT 1
22787: PPUSH
22788: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
22792: LD_INT 40
22794: PPUSH
22795: LD_VAR 0 3
22799: PPUSH
22800: LD_INT 1
22802: PPUSH
22803: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
22807: LD_INT 43
22809: PPUSH
22810: LD_VAR 0 3
22814: PPUSH
22815: LD_INT 1
22817: PPUSH
22818: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
22822: LD_INT 70
22824: PPUSH
22825: LD_VAR 0 3
22829: PPUSH
22830: LD_INT 1
22832: PPUSH
22833: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
22837: LD_INT 23
22839: PPUSH
22840: LD_VAR 0 3
22844: PPUSH
22845: LD_INT 1
22847: PPUSH
22848: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
22852: LD_INT 51
22854: PPUSH
22855: LD_VAR 0 3
22859: PPUSH
22860: LD_INT 1
22862: PPUSH
22863: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
22867: LD_INT 52
22869: PPUSH
22870: LD_VAR 0 3
22874: PPUSH
22875: LD_INT 1
22877: PPUSH
22878: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
22882: LD_INT 6
22884: PPUSH
22885: LD_VAR 0 3
22889: PPUSH
22890: LD_INT 1
22892: PPUSH
22893: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
22897: LD_INT 15
22899: PPUSH
22900: LD_VAR 0 3
22904: PPUSH
22905: LD_INT 1
22907: PPUSH
22908: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
22912: LD_INT 7
22914: PPUSH
22915: LD_VAR 0 3
22919: PPUSH
22920: LD_INT 1
22922: PPUSH
22923: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
22927: LD_INT 12
22929: PPUSH
22930: LD_VAR 0 3
22934: PPUSH
22935: LD_INT 1
22937: PPUSH
22938: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
22942: LD_INT 10
22944: PPUSH
22945: LD_VAR 0 3
22949: PPUSH
22950: LD_INT 1
22952: PPUSH
22953: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
22957: LD_INT 17
22959: PPUSH
22960: LD_VAR 0 3
22964: PPUSH
22965: LD_INT 1
22967: PPUSH
22968: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
22972: LD_INT 18
22974: PPUSH
22975: LD_VAR 0 3
22979: PPUSH
22980: LD_INT 1
22982: PPUSH
22983: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
22987: LD_INT 60
22989: PPUSH
22990: LD_VAR 0 3
22994: PPUSH
22995: LD_INT 1
22997: PPUSH
22998: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
23002: LD_INT 61
23004: PPUSH
23005: LD_VAR 0 3
23009: PPUSH
23010: LD_INT 1
23012: PPUSH
23013: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
23017: LD_INT 32
23019: PPUSH
23020: LD_VAR 0 3
23024: PPUSH
23025: LD_INT 1
23027: PPUSH
23028: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
23032: LD_INT 27
23034: PPUSH
23035: LD_VAR 0 3
23039: PPUSH
23040: LD_INT 1
23042: PPUSH
23043: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
23047: LD_INT 36
23049: PPUSH
23050: LD_VAR 0 3
23054: PPUSH
23055: LD_INT 1
23057: PPUSH
23058: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
23062: LD_INT 33
23064: PPUSH
23065: LD_VAR 0 3
23069: PPUSH
23070: LD_INT 1
23072: PPUSH
23073: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
23077: LD_INT 9
23079: PPUSH
23080: LD_VAR 0 3
23084: PPUSH
23085: LD_INT 1
23087: PPUSH
23088: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
23092: LD_INT 38
23094: PPUSH
23095: LD_VAR 0 3
23099: PPUSH
23100: LD_INT 1
23102: PPUSH
23103: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
23107: LD_INT 57
23109: PPUSH
23110: LD_VAR 0 3
23114: PPUSH
23115: LD_INT 1
23117: PPUSH
23118: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
23122: LD_INT 58
23124: PPUSH
23125: LD_VAR 0 3
23129: PPUSH
23130: LD_INT 1
23132: PPUSH
23133: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
23137: LD_INT 28
23139: PPUSH
23140: LD_VAR 0 3
23144: PPUSH
23145: LD_INT 1
23147: PPUSH
23148: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
23152: LD_INT 29
23154: PPUSH
23155: LD_VAR 0 3
23159: PPUSH
23160: LD_INT 1
23162: PPUSH
23163: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
23167: LD_INT 30
23169: PPUSH
23170: LD_VAR 0 3
23174: PPUSH
23175: LD_INT 1
23177: PPUSH
23178: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
23182: LD_INT 37
23184: PPUSH
23185: LD_VAR 0 3
23189: PPUSH
23190: LD_INT 1
23192: PPUSH
23193: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
23197: LD_INT 63
23199: PPUSH
23200: LD_VAR 0 3
23204: PPUSH
23205: LD_INT 1
23207: PPUSH
23208: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
23212: LD_INT 64
23214: PPUSH
23215: LD_VAR 0 3
23219: PPUSH
23220: LD_INT 1
23222: PPUSH
23223: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
23227: LD_INT 3
23229: PPUSH
23230: LD_VAR 0 3
23234: PPUSH
23235: LD_INT 1
23237: PPUSH
23238: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
23242: LD_INT 4
23244: PPUSH
23245: LD_VAR 0 3
23249: PPUSH
23250: LD_INT 1
23252: PPUSH
23253: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
23257: LD_INT 5
23259: PPUSH
23260: LD_VAR 0 3
23264: PPUSH
23265: LD_INT 1
23267: PPUSH
23268: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
23272: LD_INT 8
23274: PPUSH
23275: LD_VAR 0 3
23279: PPUSH
23280: LD_INT 1
23282: PPUSH
23283: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
23287: LD_INT 66
23289: PPUSH
23290: LD_VAR 0 3
23294: PPUSH
23295: LD_INT 1
23297: PPUSH
23298: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
23302: LD_INT 67
23304: PPUSH
23305: LD_VAR 0 3
23309: PPUSH
23310: LD_INT 1
23312: PPUSH
23313: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
23317: LD_INT 21
23319: PPUSH
23320: LD_VAR 0 3
23324: PPUSH
23325: LD_INT 1
23327: PPUSH
23328: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
23332: LD_INT 22
23334: PPUSH
23335: LD_VAR 0 3
23339: PPUSH
23340: LD_INT 1
23342: PPUSH
23343: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
23347: LD_INT 19
23349: PPUSH
23350: LD_VAR 0 3
23354: PPUSH
23355: LD_INT 1
23357: PPUSH
23358: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
23362: LD_INT 26
23364: PPUSH
23365: LD_VAR 0 3
23369: PPUSH
23370: LD_INT 1
23372: PPUSH
23373: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
23377: LD_INT 54
23379: PPUSH
23380: LD_VAR 0 3
23384: PPUSH
23385: LD_INT 1
23387: PPUSH
23388: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
23392: LD_INT 55
23394: PPUSH
23395: LD_VAR 0 3
23399: PPUSH
23400: LD_INT 1
23402: PPUSH
23403: CALL_OW 322
// for i = 0 to 39 do
23407: LD_ADDR_VAR 0 4
23411: PUSH
23412: DOUBLE
23413: LD_INT 0
23415: DEC
23416: ST_TO_ADDR
23417: LD_INT 39
23419: PUSH
23420: FOR_TO
23421: IFFALSE 23442
// SetRestrict ( i , side , true ) ;
23423: LD_VAR 0 4
23427: PPUSH
23428: LD_VAR 0 3
23432: PPUSH
23433: LD_INT 1
23435: PPUSH
23436: CALL_OW 324
23440: GO 23420
23442: POP
23443: POP
// end ; else
23444: GO 23521
23446: POP
// begin for i = 1 to 73 do
23447: LD_ADDR_VAR 0 4
23451: PUSH
23452: DOUBLE
23453: LD_INT 1
23455: DEC
23456: ST_TO_ADDR
23457: LD_INT 73
23459: PUSH
23460: FOR_TO
23461: IFFALSE 23482
// SetTech ( i , side , state_enabled ) ;
23463: LD_VAR 0 4
23467: PPUSH
23468: LD_VAR 0 3
23472: PPUSH
23473: LD_INT 1
23475: PPUSH
23476: CALL_OW 322
23480: GO 23460
23482: POP
23483: POP
// for i = 0 to 39 do
23484: LD_ADDR_VAR 0 4
23488: PUSH
23489: DOUBLE
23490: LD_INT 0
23492: DEC
23493: ST_TO_ADDR
23494: LD_INT 39
23496: PUSH
23497: FOR_TO
23498: IFFALSE 23519
// SetRestrict ( i , side , true ) ;
23500: LD_VAR 0 4
23504: PPUSH
23505: LD_VAR 0 3
23509: PPUSH
23510: LD_INT 1
23512: PPUSH
23513: CALL_OW 324
23517: GO 23497
23519: POP
23520: POP
// end ; end ; end ;
23521: GO 19526
23523: POP
23524: POP
// end ; end_of_file
23525: LD_VAR 0 2
23529: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
23530: LD_INT 0
23532: PPUSH
23533: PPUSH
23534: PPUSH
23535: PPUSH
23536: PPUSH
23537: PPUSH
23538: PPUSH
23539: PPUSH
23540: PPUSH
// for i := 1 to 8 do
23541: LD_ADDR_VAR 0 2
23545: PUSH
23546: DOUBLE
23547: LD_INT 1
23549: DEC
23550: ST_TO_ADDR
23551: LD_INT 8
23553: PUSH
23554: FOR_TO
23555: IFFALSE 23939
// begin if Side_Positions [ i ] then
23557: LD_EXP 18
23561: PUSH
23562: LD_VAR 0 2
23566: ARRAY
23567: IFFALSE 23937
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
23569: LD_ADDR_VAR 0 7
23573: PUSH
23574: LD_INT 22
23576: PUSH
23577: LD_VAR 0 2
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 21
23588: PUSH
23589: LD_INT 1
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: PPUSH
23600: CALL_OW 69
23604: PUSH
23605: LD_INT 0
23607: PLUS
23608: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23609: LD_ADDR_VAR 0 9
23613: PUSH
23614: LD_INT 22
23616: PUSH
23617: LD_VAR 0 2
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 2
23628: PUSH
23629: LD_INT 30
23631: PUSH
23632: LD_INT 0
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PUSH
23639: LD_INT 30
23641: PUSH
23642: LD_INT 1
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: LIST
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PPUSH
23658: CALL_OW 69
23662: ST_TO_ADDR
// crates := 0 ;
23663: LD_ADDR_VAR 0 4
23667: PUSH
23668: LD_INT 0
23670: ST_TO_ADDR
// oil := 0 ;
23671: LD_ADDR_VAR 0 5
23675: PUSH
23676: LD_INT 0
23678: ST_TO_ADDR
// sib := 0 ;
23679: LD_ADDR_VAR 0 6
23683: PUSH
23684: LD_INT 0
23686: ST_TO_ADDR
// if bases then
23687: LD_VAR 0 9
23691: IFFALSE 23797
// begin for j in bases do
23693: LD_ADDR_VAR 0 3
23697: PUSH
23698: LD_VAR 0 9
23702: PUSH
23703: FOR_IN
23704: IFFALSE 23795
// begin base := GetBase ( j ) ;
23706: LD_ADDR_VAR 0 8
23710: PUSH
23711: LD_VAR 0 3
23715: PPUSH
23716: CALL_OW 274
23720: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
23721: LD_ADDR_VAR 0 4
23725: PUSH
23726: LD_VAR 0 4
23730: PUSH
23731: LD_VAR 0 8
23735: PPUSH
23736: LD_INT 1
23738: PPUSH
23739: CALL_OW 275
23743: PLUS
23744: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
23745: LD_ADDR_VAR 0 5
23749: PUSH
23750: LD_VAR 0 5
23754: PUSH
23755: LD_VAR 0 8
23759: PPUSH
23760: LD_INT 2
23762: PPUSH
23763: CALL_OW 275
23767: PLUS
23768: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
23769: LD_ADDR_VAR 0 6
23773: PUSH
23774: LD_VAR 0 6
23778: PUSH
23779: LD_VAR 0 8
23783: PPUSH
23784: LD_INT 3
23786: PPUSH
23787: CALL_OW 275
23791: PLUS
23792: ST_TO_ADDR
// end ;
23793: GO 23703
23795: POP
23796: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
23797: LD_STRING setSpecText(
23799: PUSH
23800: LD_VAR 0 2
23804: STR
23805: PUSH
23806: LD_STRING ,
23808: STR
23809: PUSH
23810: LD_INT 2
23812: STR
23813: PUSH
23814: LD_STRING ,
23816: STR
23817: PUSH
23818: LD_VAR 0 4
23822: STR
23823: PUSH
23824: LD_STRING )
23826: STR
23827: PPUSH
23828: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
23832: LD_STRING setSpecText(
23834: PUSH
23835: LD_VAR 0 2
23839: STR
23840: PUSH
23841: LD_STRING ,
23843: STR
23844: PUSH
23845: LD_INT 3
23847: STR
23848: PUSH
23849: LD_STRING ,
23851: STR
23852: PUSH
23853: LD_VAR 0 5
23857: STR
23858: PUSH
23859: LD_STRING )
23861: STR
23862: PPUSH
23863: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
23867: LD_STRING setSpecText(
23869: PUSH
23870: LD_VAR 0 2
23874: STR
23875: PUSH
23876: LD_STRING ,
23878: STR
23879: PUSH
23880: LD_INT 4
23882: STR
23883: PUSH
23884: LD_STRING ,
23886: STR
23887: PUSH
23888: LD_VAR 0 6
23892: STR
23893: PUSH
23894: LD_STRING )
23896: STR
23897: PPUSH
23898: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
23902: LD_STRING setSpecText(
23904: PUSH
23905: LD_VAR 0 2
23909: STR
23910: PUSH
23911: LD_STRING ,
23913: STR
23914: PUSH
23915: LD_INT 5
23917: STR
23918: PUSH
23919: LD_STRING ,
23921: STR
23922: PUSH
23923: LD_VAR 0 7
23927: STR
23928: PUSH
23929: LD_STRING )
23931: STR
23932: PPUSH
23933: CALL_OW 559
// end ; end ;
23937: GO 23554
23939: POP
23940: POP
// end ;
23941: LD_VAR 0 1
23945: RET
// every 0 0$1 do
23946: GO 23948
23948: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
23949: LD_STRING setSpecLogoNumber(
23951: PUSH
23952: LD_INT 2
23954: STR
23955: PUSH
23956: LD_STRING ,
23958: STR
23959: PUSH
23960: LD_INT 1
23962: STR
23963: PUSH
23964: LD_STRING )
23966: STR
23967: PPUSH
23968: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
23972: LD_STRING setSpecLogoNumber(
23974: PUSH
23975: LD_INT 3
23977: STR
23978: PUSH
23979: LD_STRING ,
23981: STR
23982: PUSH
23983: LD_INT 2
23985: STR
23986: PUSH
23987: LD_STRING )
23989: STR
23990: PPUSH
23991: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
23995: LD_STRING setSpecLogoNumber(
23997: PUSH
23998: LD_INT 4
24000: STR
24001: PUSH
24002: LD_STRING ,
24004: STR
24005: PUSH
24006: LD_INT 3
24008: STR
24009: PUSH
24010: LD_STRING )
24012: STR
24013: PPUSH
24014: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
24018: LD_STRING setSpecLogoNumber(
24020: PUSH
24021: LD_INT 5
24023: STR
24024: PUSH
24025: LD_STRING ,
24027: STR
24028: PUSH
24029: LD_INT 4
24031: STR
24032: PUSH
24033: LD_STRING )
24035: STR
24036: PPUSH
24037: CALL_OW 559
// end ;
24041: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
24042: LD_INT 2
24044: PUSH
24045: LD_INT 30
24047: PUSH
24048: LD_INT 0
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: PUSH
24055: LD_INT 30
24057: PUSH
24058: LD_INT 1
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: LIST
24069: PPUSH
24070: CALL_OW 69
24074: IFFALSE 24084
24076: GO 24078
24078: DISABLE
// begin enable ;
24079: ENABLE
// UpdateSpectatorBar ;
24080: CALL 23530 0 0
// end ;
24084: END
