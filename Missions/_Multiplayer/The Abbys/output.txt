// export def_base_size , def_west_nations , def_east_nations ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , respawning_time_min , respawning_time_max , siberite_bomb_Delay ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Position_Nations ; export depot_def , breastworks_def , labs_def , factory_def , start_def , extra_oil_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function prepare_deposits ; var list , un , deposits ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
// list := GetListOfResourcesInArea ( west_side ) ^ GetListOfResourcesInArea ( east_side ) ;
   6: LD_ADDR_VAR 0 2
  10: PUSH
  11: LD_INT 8
  13: PPUSH
  14: CALL_OW 442
  18: PUSH
  19: LD_INT 9
  21: PPUSH
  22: CALL_OW 442
  26: ADD
  27: ST_TO_ADDR
// for un = 1 to ( list div 3 ) do
  28: LD_ADDR_VAR 0 3
  32: PUSH
  33: DOUBLE
  34: LD_INT 1
  36: DEC
  37: ST_TO_ADDR
  38: LD_VAR 0 2
  42: PUSH
  43: LD_INT 3
  45: DIV
  46: PUSH
  47: FOR_TO
  48: IFFALSE 94
// RemoveDepositXY ( list [ un * 3 - 2 ] , list [ un * 3 - 1 ] ) ;
  50: LD_VAR 0 2
  54: PUSH
  55: LD_VAR 0 3
  59: PUSH
  60: LD_INT 3
  62: MUL
  63: PUSH
  64: LD_INT 2
  66: MINUS
  67: ARRAY
  68: PPUSH
  69: LD_VAR 0 2
  73: PUSH
  74: LD_VAR 0 3
  78: PUSH
  79: LD_INT 3
  81: MUL
  82: PUSH
  83: LD_INT 1
  85: MINUS
  86: ARRAY
  87: PPUSH
  88: CALL_OW 63
  92: GO 47
  94: POP
  95: POP
// deposits := [ [ 40 , 49 , mat_oil ] , [ 40 , 68 , mat_oil ] , [ 9 , 3 , mat_siberit ] , [ 61 , 116 , mat_siberit ] , [ 177 , 46 , mat_oil ] , [ 185 , 71 , mat_oil ] , [ 157 , 3 , mat_siberit ] , [ 213 , 116 , mat_siberit ] ] ;
  96: LD_ADDR_VAR 0 4
 100: PUSH
 101: LD_INT 40
 103: PUSH
 104: LD_INT 49
 106: PUSH
 107: LD_INT 2
 109: PUSH
 110: EMPTY
 111: LIST
 112: LIST
 113: LIST
 114: PUSH
 115: LD_INT 40
 117: PUSH
 118: LD_INT 68
 120: PUSH
 121: LD_INT 2
 123: PUSH
 124: EMPTY
 125: LIST
 126: LIST
 127: LIST
 128: PUSH
 129: LD_INT 9
 131: PUSH
 132: LD_INT 3
 134: PUSH
 135: LD_INT 3
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: LIST
 142: PUSH
 143: LD_INT 61
 145: PUSH
 146: LD_INT 116
 148: PUSH
 149: LD_INT 3
 151: PUSH
 152: EMPTY
 153: LIST
 154: LIST
 155: LIST
 156: PUSH
 157: LD_INT 177
 159: PUSH
 160: LD_INT 46
 162: PUSH
 163: LD_INT 2
 165: PUSH
 166: EMPTY
 167: LIST
 168: LIST
 169: LIST
 170: PUSH
 171: LD_INT 185
 173: PUSH
 174: LD_INT 71
 176: PUSH
 177: LD_INT 2
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: LIST
 184: PUSH
 185: LD_INT 157
 187: PUSH
 188: LD_INT 3
 190: PUSH
 191: LD_INT 3
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: PUSH
 199: LD_INT 213
 201: PUSH
 202: LD_INT 116
 204: PUSH
 205: LD_INT 3
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: PUSH
 213: EMPTY
 214: LIST
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: ST_TO_ADDR
// for un in deposits do
 223: LD_ADDR_VAR 0 3
 227: PUSH
 228: LD_VAR 0 4
 232: PUSH
 233: FOR_IN
 234: IFFALSE 269
// CreateDepositXY ( un [ 1 ] , un [ 2 ] , un [ 3 ] ) ;
 236: LD_VAR 0 3
 240: PUSH
 241: LD_INT 1
 243: ARRAY
 244: PPUSH
 245: LD_VAR 0 3
 249: PUSH
 250: LD_INT 2
 252: ARRAY
 253: PPUSH
 254: LD_VAR 0 3
 258: PUSH
 259: LD_INT 3
 261: ARRAY
 262: PPUSH
 263: CALL_OW 62
 267: GO 233
 269: POP
 270: POP
// end ;
 271: LD_VAR 0 1
 275: RET
// function init_map ; var i ; begin
 276: LD_INT 0
 278: PPUSH
 279: PPUSH
// prepare_deposits ;
 280: CALL 0 0 0
// extra_oil_deposits_locations := [ [ 29 , 3 ] , [ 82 , 115 ] , [ 134 , 3 ] , [ 192 , 116 ] ] ;
 284: LD_ADDR_EXP 27
 288: PUSH
 289: LD_INT 29
 291: PUSH
 292: LD_INT 3
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: PUSH
 299: LD_INT 82
 301: PUSH
 302: LD_INT 115
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: PUSH
 309: LD_INT 134
 311: PUSH
 312: LD_INT 3
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: PUSH
 319: LD_INT 192
 321: PUSH
 322: LD_INT 116
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: LIST
 333: LIST
 334: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 62 , 60 ] , [ 157 , 60 ] ] ;
 335: LD_ADDR_EXP 28
 339: PUSH
 340: LD_INT 62
 342: PUSH
 343: LD_INT 60
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: PUSH
 350: LD_INT 157
 352: PUSH
 353: LD_INT 60
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: ST_TO_ADDR
// depot_def := [ [ 35 , 34 , 0 ] , [ 56 , 86 , 2 ] , [ 158 , 34 , 5 ] , [ 185 , 86 , 3 ] ] ;
 364: LD_ADDR_EXP 22
 368: PUSH
 369: LD_INT 35
 371: PUSH
 372: LD_INT 34
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: EMPTY
 379: LIST
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 56
 385: PUSH
 386: LD_INT 86
 388: PUSH
 389: LD_INT 2
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: LIST
 396: PUSH
 397: LD_INT 158
 399: PUSH
 400: LD_INT 34
 402: PUSH
 403: LD_INT 5
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: LD_INT 185
 413: PUSH
 414: LD_INT 86
 416: PUSH
 417: LD_INT 3
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: LIST
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: LIST
 429: LIST
 430: ST_TO_ADDR
// labs_def := [ [ 19 , 28 , 1 ] , [ 49 , 92 , 1 ] , [ 166 , 23 , 4 ] , [ 205 , 97 , 4 ] ] ;
 431: LD_ADDR_EXP 24
 435: PUSH
 436: LD_INT 19
 438: PUSH
 439: LD_INT 28
 441: PUSH
 442: LD_INT 1
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PUSH
 450: LD_INT 49
 452: PUSH
 453: LD_INT 92
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 166
 466: PUSH
 467: LD_INT 23
 469: PUSH
 470: LD_INT 4
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: LIST
 477: PUSH
 478: LD_INT 205
 480: PUSH
 481: LD_INT 97
 483: PUSH
 484: LD_INT 4
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: ST_TO_ADDR
// factory_def := [ [ 26 , 16 , 2 ] , [ 64 , 103 , 0 ] , [ 154 , 18 , 3 ] , [ 190 , 103 , 5 ] ] ;
 498: LD_ADDR_EXP 25
 502: PUSH
 503: LD_INT 26
 505: PUSH
 506: LD_INT 16
 508: PUSH
 509: LD_INT 2
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: LIST
 516: PUSH
 517: LD_INT 64
 519: PUSH
 520: LD_INT 103
 522: PUSH
 523: LD_INT 0
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 154
 533: PUSH
 534: LD_INT 18
 536: PUSH
 537: LD_INT 3
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_INT 190
 547: PUSH
 548: LD_INT 103
 550: PUSH
 551: LD_INT 5
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: LIST
 558: PUSH
 559: EMPTY
 560: LIST
 561: LIST
 562: LIST
 563: LIST
 564: ST_TO_ADDR
// start_def := [ [ 35 , 26 ] , [ 65 , 94 ] , [ 150 , 26 ] , [ 185 , 94 ] ] ;
 565: LD_ADDR_EXP 26
 569: PUSH
 570: LD_INT 35
 572: PUSH
 573: LD_INT 26
 575: PUSH
 576: EMPTY
 577: LIST
 578: LIST
 579: PUSH
 580: LD_INT 65
 582: PUSH
 583: LD_INT 94
 585: PUSH
 586: EMPTY
 587: LIST
 588: LIST
 589: PUSH
 590: LD_INT 150
 592: PUSH
 593: LD_INT 26
 595: PUSH
 596: EMPTY
 597: LIST
 598: LIST
 599: PUSH
 600: LD_INT 185
 602: PUSH
 603: LD_INT 94
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: ST_TO_ADDR
// breastworks_def := [ [ [ 44 , 18 , 4 ] , [ 47 , 51 , 5 ] , [ 35 , 8 , 4 ] , [ 50 , 38 , 5 ] ] , [ [ 81 , 97 , 4 ] , [ 54 , 71 , 3 ] , [ 81 , 110 , 5 ] , [ 66 , 82 , 3 ] ] , [ [ 136 , 20 , 1 ] , [ 164 , 48 , 1 ] , [ 130 , 8 , 1 ] , [ 147 , 37 , 0 ] ] , [ [ 181 , 103 , 1 ] , [ 178 , 72 , 1 ] , [ 186 , 112 , 1 ] , [ 172 , 82 , 2 ] ] ] ;
 616: LD_ADDR_EXP 23
 620: PUSH
 621: LD_INT 44
 623: PUSH
 624: LD_INT 18
 626: PUSH
 627: LD_INT 4
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: LIST
 634: PUSH
 635: LD_INT 47
 637: PUSH
 638: LD_INT 51
 640: PUSH
 641: LD_INT 5
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PUSH
 649: LD_INT 35
 651: PUSH
 652: LD_INT 8
 654: PUSH
 655: LD_INT 4
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: LIST
 662: PUSH
 663: LD_INT 50
 665: PUSH
 666: LD_INT 38
 668: PUSH
 669: LD_INT 5
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: LIST
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: PUSH
 683: LD_INT 81
 685: PUSH
 686: LD_INT 97
 688: PUSH
 689: LD_INT 4
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: PUSH
 697: LD_INT 54
 699: PUSH
 700: LD_INT 71
 702: PUSH
 703: LD_INT 3
 705: PUSH
 706: EMPTY
 707: LIST
 708: LIST
 709: LIST
 710: PUSH
 711: LD_INT 81
 713: PUSH
 714: LD_INT 110
 716: PUSH
 717: LD_INT 5
 719: PUSH
 720: EMPTY
 721: LIST
 722: LIST
 723: LIST
 724: PUSH
 725: LD_INT 66
 727: PUSH
 728: LD_INT 82
 730: PUSH
 731: LD_INT 3
 733: PUSH
 734: EMPTY
 735: LIST
 736: LIST
 737: LIST
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: LIST
 743: LIST
 744: PUSH
 745: LD_INT 136
 747: PUSH
 748: LD_INT 20
 750: PUSH
 751: LD_INT 1
 753: PUSH
 754: EMPTY
 755: LIST
 756: LIST
 757: LIST
 758: PUSH
 759: LD_INT 164
 761: PUSH
 762: LD_INT 48
 764: PUSH
 765: LD_INT 1
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: LIST
 772: PUSH
 773: LD_INT 130
 775: PUSH
 776: LD_INT 8
 778: PUSH
 779: LD_INT 1
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PUSH
 787: LD_INT 147
 789: PUSH
 790: LD_INT 37
 792: PUSH
 793: LD_INT 0
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: LIST
 800: PUSH
 801: EMPTY
 802: LIST
 803: LIST
 804: LIST
 805: LIST
 806: PUSH
 807: LD_INT 181
 809: PUSH
 810: LD_INT 103
 812: PUSH
 813: LD_INT 1
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: LIST
 820: PUSH
 821: LD_INT 178
 823: PUSH
 824: LD_INT 72
 826: PUSH
 827: LD_INT 1
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: LIST
 834: PUSH
 835: LD_INT 186
 837: PUSH
 838: LD_INT 112
 840: PUSH
 841: LD_INT 1
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: LIST
 848: PUSH
 849: LD_INT 172
 851: PUSH
 852: LD_INT 82
 854: PUSH
 855: LD_INT 2
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: LIST
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: LIST
 873: LIST
 874: ST_TO_ADDR
// if def_extra_oil_deposits then
 875: LD_EXP 63
 879: IFFALSE 923
// for i in extra_oil_deposits_locations do
 881: LD_ADDR_VAR 0 2
 885: PUSH
 886: LD_EXP 27
 890: PUSH
 891: FOR_IN
 892: IFFALSE 921
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
 894: LD_VAR 0 2
 898: PUSH
 899: LD_INT 1
 901: ARRAY
 902: PPUSH
 903: LD_VAR 0 2
 907: PUSH
 908: LD_INT 2
 910: ARRAY
 911: PPUSH
 912: LD_INT 2
 914: PPUSH
 915: CALL_OW 62
 919: GO 891
 921: POP
 922: POP
// if def_extra_sib_deposits then
 923: LD_EXP 64
 927: IFFALSE 971
// for i in extra_sib_deposits_locations do
 929: LD_ADDR_VAR 0 2
 933: PUSH
 934: LD_EXP 28
 938: PUSH
 939: FOR_IN
 940: IFFALSE 969
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 2
 958: ARRAY
 959: PPUSH
 960: LD_INT 3
 962: PPUSH
 963: CALL_OW 62
 967: GO 939
 969: POP
 970: POP
// end ;
 971: LD_VAR 0 1
 975: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
 976: LD_INT 0
 978: PPUSH
 979: PPUSH
 980: PPUSH
 981: PPUSH
 982: PPUSH
 983: PPUSH
 984: PPUSH
 985: PPUSH
 986: PPUSH
// if Multiplayer then
 987: LD_OWVAR 4
 991: IFFALSE 1055
// begin Game_Type = mp_game_type ;
 993: LD_ADDR_EXP 56
 997: PUSH
 998: LD_OWVAR 6
1002: ST_TO_ADDR
// Your_Side := mp_player_side ;
1003: LD_ADDR_OWVAR 2
1007: PUSH
1008: LD_OWVAR 7
1012: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
1013: LD_ADDR_EXP 18
1017: PUSH
1018: LD_OWVAR 17
1022: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
1023: LD_ADDR_EXP 16
1027: PUSH
1028: LD_OWVAR 15
1032: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
1033: LD_ADDR_EXP 19
1037: PUSH
1038: LD_OWVAR 16
1042: ST_TO_ADDR
// Teams = mp_teams ;
1043: LD_ADDR_EXP 17
1047: PUSH
1048: LD_OWVAR 12
1052: ST_TO_ADDR
// end else
1053: GO 1195
// begin Game_Type = 12 ;
1055: LD_ADDR_EXP 56
1059: PUSH
1060: LD_INT 12
1062: ST_TO_ADDR
// Your_Side = 4 ;
1063: LD_ADDR_OWVAR 2
1067: PUSH
1068: LD_INT 4
1070: ST_TO_ADDR
// Side_Positions = [ 1 , 0 , 0 , 0 , 0 , 0 , 0 , 3 ] ;
1071: LD_ADDR_EXP 18
1075: PUSH
1076: LD_INT 1
1078: PUSH
1079: LD_INT 0
1081: PUSH
1082: LD_INT 0
1084: PUSH
1085: LD_INT 0
1087: PUSH
1088: LD_INT 0
1090: PUSH
1091: LD_INT 0
1093: PUSH
1094: LD_INT 0
1096: PUSH
1097: LD_INT 3
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: LIST
1106: LIST
1107: LIST
1108: LIST
1109: ST_TO_ADDR
// Side_Teams = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
1110: LD_ADDR_EXP 16
1114: PUSH
1115: LD_INT 0
1117: PUSH
1118: LD_INT 0
1120: PUSH
1121: LD_INT 0
1123: PUSH
1124: LD_INT 0
1126: PUSH
1127: LD_INT 0
1129: PUSH
1130: LD_INT 0
1132: PUSH
1133: LD_INT 0
1135: PUSH
1136: LD_INT 0
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: LIST
1148: ST_TO_ADDR
// Side_Nations = [ 3 , 0 , 0 , 0 , 0 , 0 , 0 , 1 ] ;
1149: LD_ADDR_EXP 19
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: LD_INT 0
1159: PUSH
1160: LD_INT 0
1162: PUSH
1163: LD_INT 0
1165: PUSH
1166: LD_INT 0
1168: PUSH
1169: LD_INT 0
1171: PUSH
1172: LD_INT 0
1174: PUSH
1175: LD_INT 1
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: LIST
1186: LIST
1187: ST_TO_ADDR
// Teams = [ ] ;
1188: LD_ADDR_EXP 17
1192: PUSH
1193: EMPTY
1194: ST_TO_ADDR
// end ; for i := 1 to 8 do
1195: LD_ADDR_VAR 0 8
1199: PUSH
1200: DOUBLE
1201: LD_INT 1
1203: DEC
1204: ST_TO_ADDR
1205: LD_INT 8
1207: PUSH
1208: FOR_TO
1209: IFFALSE 1296
// if Multiplayer_GetPlayerIsSpec ( i ) then
1211: LD_VAR 0 8
1215: PPUSH
1216: CALL_OW 530
1220: IFFALSE 1294
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
1222: LD_ADDR_EXP 18
1226: PUSH
1227: LD_EXP 18
1231: PPUSH
1232: LD_VAR 0 8
1236: PPUSH
1237: LD_INT 0
1239: PPUSH
1240: CALL_OW 1
1244: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
1245: LD_ADDR_EXP 17
1249: PUSH
1250: LD_EXP 17
1254: PPUSH
1255: LD_EXP 16
1259: PUSH
1260: LD_VAR 0 8
1264: ARRAY
1265: PPUSH
1266: LD_EXP 17
1270: PUSH
1271: LD_EXP 16
1275: PUSH
1276: LD_VAR 0 8
1280: ARRAY
1281: ARRAY
1282: PUSH
1283: LD_VAR 0 8
1287: DIFF
1288: PPUSH
1289: CALL_OW 1
1293: ST_TO_ADDR
// end ;
1294: GO 1208
1296: POP
1297: POP
// if Multiplayer then
1298: LD_OWVAR 4
1302: IFFALSE 1527
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
1304: LD_ADDR_EXP 58
1308: PUSH
1309: LD_INT 0
1311: PPUSH
1312: CALL_OW 426
1316: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
1317: LD_ADDR_EXP 59
1321: PUSH
1322: LD_INT 1
1324: PPUSH
1325: CALL_OW 426
1329: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
1330: LD_ADDR_EXP 60
1334: PUSH
1335: LD_INT 2
1337: PPUSH
1338: CALL_OW 426
1342: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
1343: LD_ADDR_EXP 61
1347: PUSH
1348: LD_INT 3
1350: PPUSH
1351: CALL_OW 426
1355: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
1356: LD_ADDR_EXP 62
1360: PUSH
1361: LD_INT 4
1363: PPUSH
1364: CALL_OW 426
1368: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
1369: LD_ADDR_EXP 63
1373: PUSH
1374: LD_INT 5
1376: PPUSH
1377: CALL_OW 426
1381: ST_TO_ADDR
// def_extra_sib_deposits = GetMultiplayerSetting ( 6 ) ;
1382: LD_ADDR_EXP 64
1386: PUSH
1387: LD_INT 6
1389: PPUSH
1390: CALL_OW 426
1394: ST_TO_ADDR
// def_base_size = GetMultiplayerSetting ( 7 ) ;
1395: LD_ADDR_EXP 1
1399: PUSH
1400: LD_INT 7
1402: PPUSH
1403: CALL_OW 426
1407: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
1408: LD_ADDR_EXP 65
1412: PUSH
1413: LD_INT 10
1415: PPUSH
1416: CALL_OW 426
1420: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
1421: LD_ADDR_EXP 66
1425: PUSH
1426: LD_INT 11
1428: PPUSH
1429: CALL_OW 426
1433: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
1434: LD_ADDR_EXP 67
1438: PUSH
1439: LD_INT 12
1441: PPUSH
1442: CALL_OW 426
1446: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
1447: LD_ADDR_EXP 69
1451: PUSH
1452: LD_INT 13
1454: PPUSH
1455: CALL_OW 426
1459: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
1460: LD_ADDR_EXP 68
1464: PUSH
1465: LD_INT 14
1467: PPUSH
1468: CALL_OW 426
1472: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
1473: LD_ADDR_EXP 70
1477: PUSH
1478: LD_INT 15
1480: PPUSH
1481: CALL_OW 426
1485: ST_TO_ADDR
// def_west_nations = GetMultiplayerSetting ( 21 ) ;
1486: LD_ADDR_EXP 2
1490: PUSH
1491: LD_INT 21
1493: PPUSH
1494: CALL_OW 426
1498: ST_TO_ADDR
// def_east_nations = GetMultiplayerSetting ( 22 ) ;
1499: LD_ADDR_EXP 3
1503: PUSH
1504: LD_INT 22
1506: PPUSH
1507: CALL_OW 426
1511: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 23 ) ;
1512: LD_ADDR_VAR 0 9
1516: PUSH
1517: LD_INT 23
1519: PPUSH
1520: CALL_OW 426
1524: ST_TO_ADDR
// end else
1525: GO 1667
// begin randomize ;
1527: CALL_OW 10
// def_base_level = 3 ;
1531: LD_ADDR_EXP 58
1535: PUSH
1536: LD_INT 3
1538: ST_TO_ADDR
// def_amount_of_people = 1 ;
1539: LD_ADDR_EXP 59
1543: PUSH
1544: LD_INT 1
1546: ST_TO_ADDR
// def_skill_level = 1 ;
1547: LD_ADDR_EXP 60
1551: PUSH
1552: LD_INT 1
1554: ST_TO_ADDR
// def_starting_resources = 2 ;
1555: LD_ADDR_EXP 61
1559: PUSH
1560: LD_INT 2
1562: ST_TO_ADDR
// def_shipments_density = 1 ;
1563: LD_ADDR_EXP 62
1567: PUSH
1568: LD_INT 1
1570: ST_TO_ADDR
// def_extra_oil_deposits = 1 ;
1571: LD_ADDR_EXP 63
1575: PUSH
1576: LD_INT 1
1578: ST_TO_ADDR
// def_extra_sib_deposits = 1 ;
1579: LD_ADDR_EXP 64
1583: PUSH
1584: LD_INT 1
1586: ST_TO_ADDR
// def_base_size = 2 ;
1587: LD_ADDR_EXP 1
1591: PUSH
1592: LD_INT 2
1594: ST_TO_ADDR
// def_shared_vision = 1 ;
1595: LD_ADDR_EXP 65
1599: PUSH
1600: LD_INT 1
1602: ST_TO_ADDR
// def_morale_flags = 1 ;
1603: LD_ADDR_EXP 66
1607: PUSH
1608: LD_INT 1
1610: ST_TO_ADDR
// def_siberite_detection = 1 ;
1611: LD_ADDR_EXP 67
1615: PUSH
1616: LD_INT 1
1618: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
1619: LD_ADDR_EXP 69
1623: PUSH
1624: LD_INT 3
1626: ST_TO_ADDR
// def_people_respawning = 2 ;
1627: LD_ADDR_EXP 68
1631: PUSH
1632: LD_INT 2
1634: ST_TO_ADDR
// def_siberite_bomb = 0 ;
1635: LD_ADDR_EXP 70
1639: PUSH
1640: LD_INT 0
1642: ST_TO_ADDR
// def_west_nations = 0 ;
1643: LD_ADDR_EXP 2
1647: PUSH
1648: LD_INT 0
1650: ST_TO_ADDR
// def_east_nations = 2 ;
1651: LD_ADDR_EXP 3
1655: PUSH
1656: LD_INT 2
1658: ST_TO_ADDR
// tech_level = 4 ;
1659: LD_ADDR_VAR 0 9
1663: PUSH
1664: LD_INT 4
1666: ST_TO_ADDR
// end ; InitGameRules ;
1667: CALL 15959 0 0
// if def_game_rules = 0 then
1671: LD_EXP 57
1675: PUSH
1676: LD_INT 0
1678: EQUAL
1679: IFFALSE 1706
// begin if isSGUI then
1681: LD_OWVAR 83
1685: IFFALSE 1693
// setMpTechs ( ) else
1687: CALL 19409 0 0
1691: GO 1706
// begin SetMpTechLevel ( tech_level + 1 ) ;
1693: LD_VAR 0 9
1697: PUSH
1698: LD_INT 1
1700: PLUS
1701: PPUSH
1702: CALL 19556 0 1
// end ; end ; if not def_base_level then
1706: LD_EXP 58
1710: NOT
1711: IFFALSE 1721
// def_base_size := 0 ;
1713: LD_ADDR_EXP 1
1717: PUSH
1718: LD_INT 0
1720: ST_TO_ADDR
// is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1721: LD_ADDR_EXP 4
1725: PUSH
1726: LD_INT 0
1728: PUSH
1729: LD_INT 1
1731: PUSH
1732: LD_INT 1
1734: PUSH
1735: LD_INT 1
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: PUSH
1744: LD_EXP 58
1748: PUSH
1749: LD_INT 1
1751: PLUS
1752: ARRAY
1753: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
1754: LD_ADDR_EXP 5
1758: PUSH
1759: LD_INT 0
1761: PUSH
1762: LD_INT 0
1764: PUSH
1765: LD_INT 2
1767: PUSH
1768: LD_INT 4
1770: PUSH
1771: EMPTY
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: PUSH
1777: LD_EXP 58
1781: PUSH
1782: LD_INT 1
1784: PLUS
1785: ARRAY
1786: ST_TO_ADDR
// number_of_people = [ 5 , 7 , 9 , 11 ] [ def_amount_of_people + 1 ] ;
1787: LD_ADDR_EXP 6
1791: PUSH
1792: LD_INT 5
1794: PUSH
1795: LD_INT 7
1797: PUSH
1798: LD_INT 9
1800: PUSH
1801: LD_INT 11
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: PUSH
1810: LD_EXP 59
1814: PUSH
1815: LD_INT 1
1817: PLUS
1818: ARRAY
1819: ST_TO_ADDR
// skill_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1820: LD_ADDR_EXP 7
1824: PUSH
1825: LD_INT 2
1827: PUSH
1828: LD_INT 3
1830: PUSH
1831: LD_INT 4
1833: PUSH
1834: LD_INT 5
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: LIST
1841: LIST
1842: PUSH
1843: LD_EXP 60
1847: PUSH
1848: LD_INT 1
1850: PLUS
1851: ARRAY
1852: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1853: LD_ADDR_EXP 9
1857: PUSH
1858: LD_INT 0
1860: PUSH
1861: LD_INT 0
1863: PUSH
1864: LD_INT 0
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: LIST
1871: PUSH
1872: LD_INT 30
1874: PUSH
1875: LD_INT 0
1877: PUSH
1878: LD_INT 0
1880: PUSH
1881: EMPTY
1882: LIST
1883: LIST
1884: LIST
1885: PUSH
1886: LD_INT 50
1888: PUSH
1889: LD_INT 20
1891: PUSH
1892: LD_INT 0
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: LIST
1899: PUSH
1900: LD_INT 80
1902: PUSH
1903: LD_INT 40
1905: PUSH
1906: LD_INT 20
1908: PUSH
1909: EMPTY
1910: LIST
1911: LIST
1912: LIST
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: PUSH
1920: LD_EXP 61
1924: PUSH
1925: LD_INT 1
1927: PLUS
1928: ARRAY
1929: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1930: LD_ADDR_EXP 8
1934: PUSH
1935: LD_INT 10
1937: PUSH
1938: EMPTY
1939: LIST
1940: PUSH
1941: LD_INT 7
1943: PUSH
1944: LD_INT 14
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: PUSH
1951: LD_INT 6
1953: PUSH
1954: LD_INT 12
1956: PUSH
1957: LD_INT 18
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: LIST
1964: PUSH
1965: LD_INT 5
1967: PUSH
1968: LD_INT 10
1970: PUSH
1971: LD_INT 15
1973: PUSH
1974: LD_INT 20
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: PUSH
1989: LD_EXP 61
1993: PUSH
1994: LD_INT 1
1996: PLUS
1997: ARRAY
1998: ST_TO_ADDR
// shipments_density = [ 18 , 25 , 35 ] [ def_shipments_density + 1 ] ;
1999: LD_ADDR_EXP 10
2003: PUSH
2004: LD_INT 18
2006: PUSH
2007: LD_INT 25
2009: PUSH
2010: LD_INT 35
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: LIST
2017: PUSH
2018: LD_EXP 62
2022: PUSH
2023: LD_INT 1
2025: PLUS
2026: ARRAY
2027: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
2028: LD_ADDR_EXP 12
2032: PUSH
2033: LD_INT 0
2035: PUSH
2036: LD_INT 3
2038: PUSH
2039: LD_INT 6
2041: PUSH
2042: LD_INT 9
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: PUSH
2051: LD_EXP 69
2055: PUSH
2056: LD_INT 1
2058: PLUS
2059: ARRAY
2060: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
2061: LD_ADDR_EXP 13
2065: PUSH
2066: LD_INT 0
2068: PUSH
2069: LD_INT 8400
2071: PUSH
2072: LD_INT 1750
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: LIST
2079: PUSH
2080: LD_EXP 68
2084: PUSH
2085: LD_INT 1
2087: PLUS
2088: ARRAY
2089: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
2090: LD_ADDR_EXP 14
2094: PUSH
2095: LD_INT 0
2097: PUSH
2098: LD_INT 21000
2100: PUSH
2101: LD_INT 4200
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: LIST
2108: PUSH
2109: LD_EXP 68
2113: PUSH
2114: LD_INT 1
2116: PLUS
2117: ARRAY
2118: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
2119: LD_ADDR_EXP 15
2123: PUSH
2124: LD_INT 0
2126: PUSH
2127: LD_INT 1
2129: PUSH
2130: LD_INT 63000
2132: PUSH
2133: LD_INT 126000
2135: PUSH
2136: LD_INT 189000
2138: PUSH
2139: LD_INT 252000
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: PUSH
2150: LD_EXP 70
2154: PUSH
2155: LD_INT 1
2157: PLUS
2158: ARRAY
2159: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
2160: LD_ADDR_EXP 11
2164: PUSH
2165: LD_INT 1
2167: NEG
2168: PUSH
2169: LD_INT 350
2171: PUSH
2172: LD_INT 700
2174: PUSH
2175: LD_INT 1400
2177: PUSH
2178: LD_INT 0
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: LIST
2187: PUSH
2188: LD_EXP 66
2192: PUSH
2193: LD_INT 1
2195: PLUS
2196: ARRAY
2197: ST_TO_ADDR
// battle_flags_id = [ ] ;
2198: LD_ADDR_EXP 29
2202: PUSH
2203: EMPTY
2204: ST_TO_ADDR
// if not def_builduptime then
2205: LD_EXP 71
2209: NOT
2210: IFFALSE 2215
// disable ( 600 ) ;
2212: LD_INT 600
2214: DISABLE_MARKED
// end ;
2215: LD_VAR 0 1
2219: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2220: LD_INT 0
2222: PPUSH
2223: PPUSH
2224: PPUSH
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
2225: LD_ADDR_EXP 20
2229: PUSH
2230: LD_EXP 16
2234: PUSH
2235: LD_INT 0
2237: PUSH
2238: EMPTY
2239: LIST
2240: DIFF
2241: PUSH
2242: LD_INT 1
2244: GREATER
2245: ST_TO_ADDR
// if not Team_Game then
2246: LD_EXP 20
2250: NOT
2251: IFFALSE 2349
// begin for i = 1 to 8 do
2253: LD_ADDR_VAR 0 2
2257: PUSH
2258: DOUBLE
2259: LD_INT 1
2261: DEC
2262: ST_TO_ADDR
2263: LD_INT 8
2265: PUSH
2266: FOR_TO
2267: IFFALSE 2345
// for j = 1 to 8 do
2269: LD_ADDR_VAR 0 3
2273: PUSH
2274: DOUBLE
2275: LD_INT 1
2277: DEC
2278: ST_TO_ADDR
2279: LD_INT 8
2281: PUSH
2282: FOR_TO
2283: IFFALSE 2341
// if i <> j then
2285: LD_VAR 0 2
2289: PUSH
2290: LD_VAR 0 3
2294: NONEQUAL
2295: IFFALSE 2319
// SetAttitude ( i , j , att_neutral , true ) else
2297: LD_VAR 0 2
2301: PPUSH
2302: LD_VAR 0 3
2306: PPUSH
2307: LD_INT 0
2309: PPUSH
2310: LD_INT 1
2312: PPUSH
2313: CALL_OW 80
2317: GO 2339
// SetAttitude ( i , j , att_friend , true ) ;
2319: LD_VAR 0 2
2323: PPUSH
2324: LD_VAR 0 3
2328: PPUSH
2329: LD_INT 1
2331: PPUSH
2332: LD_INT 1
2334: PPUSH
2335: CALL_OW 80
2339: GO 2282
2341: POP
2342: POP
2343: GO 2266
2345: POP
2346: POP
// end else
2347: GO 2524
// begin if def_shared_vision then
2349: LD_EXP 65
2353: IFFALSE 2418
// begin for i in Teams do
2355: LD_ADDR_VAR 0 2
2359: PUSH
2360: LD_EXP 17
2364: PUSH
2365: FOR_IN
2366: IFFALSE 2416
// for j = 2 to i do
2368: LD_ADDR_VAR 0 3
2372: PUSH
2373: DOUBLE
2374: LD_INT 2
2376: DEC
2377: ST_TO_ADDR
2378: LD_VAR 0 2
2382: PUSH
2383: FOR_TO
2384: IFFALSE 2412
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2386: LD_VAR 0 2
2390: PUSH
2391: LD_VAR 0 3
2395: ARRAY
2396: PPUSH
2397: LD_VAR 0 2
2401: PUSH
2402: LD_INT 1
2404: ARRAY
2405: PPUSH
2406: CALL_OW 343
2410: GO 2383
2412: POP
2413: POP
2414: GO 2365
2416: POP
2417: POP
// end ; for i = 1 to 8 do
2418: LD_ADDR_VAR 0 2
2422: PUSH
2423: DOUBLE
2424: LD_INT 1
2426: DEC
2427: ST_TO_ADDR
2428: LD_INT 8
2430: PUSH
2431: FOR_TO
2432: IFFALSE 2522
// for j = 1 to 8 do
2434: LD_ADDR_VAR 0 3
2438: PUSH
2439: DOUBLE
2440: LD_INT 1
2442: DEC
2443: ST_TO_ADDR
2444: LD_INT 8
2446: PUSH
2447: FOR_TO
2448: IFFALSE 2518
// if Side_Teams [ i ] = Side_Teams [ j ] then
2450: LD_EXP 16
2454: PUSH
2455: LD_VAR 0 2
2459: ARRAY
2460: PUSH
2461: LD_EXP 16
2465: PUSH
2466: LD_VAR 0 3
2470: ARRAY
2471: EQUAL
2472: IFFALSE 2496
// SetAttitude ( i , j , att_friend , true ) else
2474: LD_VAR 0 2
2478: PPUSH
2479: LD_VAR 0 3
2483: PPUSH
2484: LD_INT 1
2486: PPUSH
2487: LD_INT 1
2489: PPUSH
2490: CALL_OW 80
2494: GO 2516
// SetAttitude ( i , j , att_enemy , true ) ;
2496: LD_VAR 0 2
2500: PPUSH
2501: LD_VAR 0 3
2505: PPUSH
2506: LD_INT 2
2508: PPUSH
2509: LD_INT 1
2511: PPUSH
2512: CALL_OW 80
2516: GO 2447
2518: POP
2519: POP
2520: GO 2431
2522: POP
2523: POP
// end ; end ;
2524: LD_VAR 0 1
2528: RET
// function prepare_people ( count , cl , x , y , r ) ; var i , j , un ; begin
2529: LD_INT 0
2531: PPUSH
2532: PPUSH
2533: PPUSH
2534: PPUSH
// result := [ ] ;
2535: LD_ADDR_VAR 0 6
2539: PUSH
2540: EMPTY
2541: ST_TO_ADDR
// for i := 1 to count do
2542: LD_ADDR_VAR 0 7
2546: PUSH
2547: DOUBLE
2548: LD_INT 1
2550: DEC
2551: ST_TO_ADDR
2552: LD_VAR 0 1
2556: PUSH
2557: FOR_TO
2558: IFFALSE 2954
// begin uc_direction := Rand ( 0 , 5 ) ;
2560: LD_ADDR_OWVAR 24
2564: PUSH
2565: LD_INT 0
2567: PPUSH
2568: LD_INT 5
2570: PPUSH
2571: CALL_OW 12
2575: ST_TO_ADDR
// if commander then
2576: LD_LOC 1
2580: IFFALSE 2689
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2582: LD_ADDR_OWVAR 26
2586: PUSH
2587: LD_OWVAR 19
2591: PUSH
2592: LD_OWVAR 20
2596: ARRAY
2597: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2598: LD_INT 1
2600: PPUSH
2601: LD_INT 2
2603: PPUSH
2604: CALL_OW 12
2608: PPUSH
2609: LD_VAR 0 2
2613: PPUSH
2614: LD_EXP 7
2618: PUSH
2619: LD_INT 2
2621: PLUS
2622: PPUSH
2623: CALL_OW 380
// hc_importance := 105 ;
2627: LD_ADDR_OWVAR 32
2631: PUSH
2632: LD_INT 105
2634: ST_TO_ADDR
// commander := false ;
2635: LD_ADDR_LOC 1
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if Multiplayer then
2643: LD_OWVAR 4
2647: IFFALSE 2687
// begin hc_gallery := MULTIAVATARS ;
2649: LD_ADDR_OWVAR 33
2653: PUSH
2654: LD_STRING MULTIAVATARS
2656: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2657: LD_ADDR_OWVAR 34
2661: PUSH
2662: LD_OWVAR 20
2666: PPUSH
2667: CALL_OW 525
2671: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2672: LD_ADDR_OWVAR 27
2676: PUSH
2677: LD_OWVAR 20
2681: PPUSH
2682: CALL_OW 526
2686: ST_TO_ADDR
// end ; end else
2687: GO 2752
// begin hc_name :=  ;
2689: LD_ADDR_OWVAR 26
2693: PUSH
2694: LD_STRING 
2696: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2697: LD_INT 1
2699: PPUSH
2700: LD_INT 2
2702: PPUSH
2703: CALL_OW 12
2707: PPUSH
2708: LD_VAR 0 2
2712: PPUSH
2713: LD_EXP 7
2717: PPUSH
2718: CALL_OW 380
// hc_importance := 0 ;
2722: LD_ADDR_OWVAR 32
2726: PUSH
2727: LD_INT 0
2729: ST_TO_ADDR
// if Multiplayer then
2730: LD_OWVAR 4
2734: IFFALSE 2752
// begin hc_gallery :=  ;
2736: LD_ADDR_OWVAR 33
2740: PUSH
2741: LD_STRING 
2743: ST_TO_ADDR
// hc_face_number := 0 ;
2744: LD_ADDR_OWVAR 34
2748: PUSH
2749: LD_INT 0
2751: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2752: LD_ADDR_VAR 0 9
2756: PUSH
2757: CALL_OW 44
2761: ST_TO_ADDR
// if global_defined then
2762: LD_LOC 3
2766: IFFALSE 2906
// begin if ( cl = class_soldier ) then
2768: LD_VAR 0 2
2772: PUSH
2773: LD_INT 1
2775: EQUAL
2776: IFFALSE 2796
// j := i + soldiers_created else
2778: LD_ADDR_VAR 0 8
2782: PUSH
2783: LD_VAR 0 7
2787: PUSH
2788: LD_LOC 4
2792: PLUS
2793: ST_TO_ADDR
2794: GO 2806
// j := i ;
2796: LD_ADDR_VAR 0 8
2800: PUSH
2801: LD_VAR 0 7
2805: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2806: LD_LOC 2
2810: PUSH
2811: LD_VAR 0 2
2815: ARRAY
2816: PUSH
2817: LD_VAR 0 8
2821: ARRAY
2822: PPUSH
2823: LD_VAR 0 9
2827: PPUSH
2828: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2832: LD_VAR 0 9
2836: PPUSH
2837: LD_INT 2
2839: PPUSH
2840: LD_LOC 2
2844: PUSH
2845: LD_VAR 0 2
2849: ARRAY
2850: PUSH
2851: LD_VAR 0 8
2855: ARRAY
2856: PPUSH
2857: LD_INT 2
2859: PPUSH
2860: CALL_OW 260
2864: PPUSH
2865: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2869: LD_VAR 0 9
2873: PPUSH
2874: LD_INT 1
2876: PPUSH
2877: LD_LOC 2
2881: PUSH
2882: LD_VAR 0 2
2886: ARRAY
2887: PUSH
2888: LD_VAR 0 8
2892: ARRAY
2893: PPUSH
2894: LD_INT 1
2896: PPUSH
2897: CALL_OW 260
2901: PPUSH
2902: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2906: LD_VAR 0 9
2910: PPUSH
2911: LD_VAR 0 3
2915: PPUSH
2916: LD_VAR 0 4
2920: PPUSH
2921: LD_VAR 0 5
2925: PPUSH
2926: LD_INT 0
2928: PPUSH
2929: CALL_OW 50
// result := result ^ [ un ] ;
2933: LD_ADDR_VAR 0 6
2937: PUSH
2938: LD_VAR 0 6
2942: PUSH
2943: LD_VAR 0 9
2947: PUSH
2948: EMPTY
2949: LIST
2950: ADD
2951: ST_TO_ADDR
// end ;
2952: GO 2557
2954: POP
2955: POP
// if not global_defined then
2956: LD_LOC 3
2960: NOT
2961: IFFALSE 3039
// if ( global_units >= cl ) then
2963: LD_LOC 2
2967: PUSH
2968: LD_VAR 0 2
2972: GREATEREQUAL
2973: IFFALSE 3014
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2975: LD_ADDR_LOC 2
2979: PUSH
2980: LD_LOC 2
2984: PPUSH
2985: LD_VAR 0 2
2989: PPUSH
2990: LD_LOC 2
2994: PUSH
2995: LD_VAR 0 2
2999: ARRAY
3000: PUSH
3001: LD_VAR 0 6
3005: ADD
3006: PPUSH
3007: CALL_OW 1
3011: ST_TO_ADDR
3012: GO 3039
// global_units := Replace ( global_units , cl , result ) ;
3014: LD_ADDR_LOC 2
3018: PUSH
3019: LD_LOC 2
3023: PPUSH
3024: LD_VAR 0 2
3028: PPUSH
3029: LD_VAR 0 6
3033: PPUSH
3034: CALL_OW 1
3038: ST_TO_ADDR
// end ;
3039: LD_VAR 0 6
3043: RET
// function prepare_side ( side , pos , nation ) ; var x , y , dir , i , r , sol , br , dep ; begin
3044: LD_INT 0
3046: PPUSH
3047: PPUSH
3048: PPUSH
3049: PPUSH
3050: PPUSH
3051: PPUSH
3052: PPUSH
3053: PPUSH
3054: PPUSH
// if side in [ 0 , 9 ] then
3055: LD_VAR 0 1
3059: PUSH
3060: LD_INT 0
3062: PUSH
3063: LD_INT 9
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: IN
3070: IFFALSE 3074
// exit ;
3072: GO 4329
// uc_nation := nation ;
3074: LD_ADDR_OWVAR 21
3078: PUSH
3079: LD_VAR 0 3
3083: ST_TO_ADDR
// uc_side := side ;
3084: LD_ADDR_OWVAR 20
3088: PUSH
3089: LD_VAR 0 1
3093: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3094: LD_ADDR_VAR 0 5
3098: PUSH
3099: LD_EXP 22
3103: PUSH
3104: LD_VAR 0 2
3108: ARRAY
3109: PUSH
3110: LD_INT 1
3112: ARRAY
3113: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3114: LD_ADDR_VAR 0 6
3118: PUSH
3119: LD_EXP 22
3123: PUSH
3124: LD_VAR 0 2
3128: ARRAY
3129: PUSH
3130: LD_INT 2
3132: ARRAY
3133: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3134: LD_ADDR_VAR 0 7
3138: PUSH
3139: LD_EXP 22
3143: PUSH
3144: LD_VAR 0 2
3148: ARRAY
3149: PUSH
3150: LD_INT 3
3152: ARRAY
3153: ST_TO_ADDR
// if is_depot then
3154: LD_EXP 4
3158: IFFALSE 3291
// begin bc_type = b_depot ;
3160: LD_ADDR_OWVAR 42
3164: PUSH
3165: LD_INT 0
3167: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3168: LD_ADDR_VAR 0 12
3172: PUSH
3173: LD_VAR 0 5
3177: PPUSH
3178: LD_VAR 0 6
3182: PPUSH
3183: LD_VAR 0 7
3187: PPUSH
3188: CALL_OW 47
3192: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3193: LD_VAR 0 12
3197: PPUSH
3198: LD_STRING @
3200: PUSH
3201: LD_VAR 0 1
3205: STR
3206: PPUSH
3207: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3211: LD_VAR 0 12
3215: PPUSH
3216: CALL_OW 274
3220: PPUSH
3221: LD_INT 1
3223: PPUSH
3224: LD_EXP 9
3228: PUSH
3229: LD_INT 1
3231: ARRAY
3232: PPUSH
3233: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3237: LD_VAR 0 12
3241: PPUSH
3242: CALL_OW 274
3246: PPUSH
3247: LD_INT 2
3249: PPUSH
3250: LD_EXP 9
3254: PUSH
3255: LD_INT 2
3257: ARRAY
3258: PPUSH
3259: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3263: LD_VAR 0 12
3267: PPUSH
3268: CALL_OW 274
3272: PPUSH
3273: LD_INT 3
3275: PPUSH
3276: LD_EXP 9
3280: PUSH
3281: LD_INT 3
3283: ARRAY
3284: PPUSH
3285: CALL_OW 277
// end else
3289: GO 3435
// begin for i := 1 to 3 do
3291: LD_ADDR_VAR 0 8
3295: PUSH
3296: DOUBLE
3297: LD_INT 1
3299: DEC
3300: ST_TO_ADDR
3301: LD_INT 3
3303: PUSH
3304: FOR_TO
3305: IFFALSE 3433
// begin r := starting_resources [ i ] ;
3307: LD_ADDR_VAR 0 9
3311: PUSH
3312: LD_EXP 9
3316: PUSH
3317: LD_VAR 0 8
3321: ARRAY
3322: ST_TO_ADDR
// while r >= 10 do
3323: LD_VAR 0 9
3327: PUSH
3328: LD_INT 10
3330: GREATEREQUAL
3331: IFFALSE 3431
// if r > 50 then
3333: LD_VAR 0 9
3337: PUSH
3338: LD_INT 50
3340: GREATER
3341: IFFALSE 3387
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3343: LD_VAR 0 8
3347: PPUSH
3348: LD_INT 5
3350: PPUSH
3351: LD_VAR 0 5
3355: PPUSH
3356: LD_VAR 0 6
3360: PPUSH
3361: LD_INT 4
3363: PPUSH
3364: LD_INT 0
3366: PPUSH
3367: CALL_OW 60
// r := r - 50 ;
3371: LD_ADDR_VAR 0 9
3375: PUSH
3376: LD_VAR 0 9
3380: PUSH
3381: LD_INT 50
3383: MINUS
3384: ST_TO_ADDR
// end else
3385: GO 3429
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3387: LD_VAR 0 8
3391: PPUSH
3392: LD_VAR 0 9
3396: PUSH
3397: LD_INT 10
3399: DIV
3400: PPUSH
3401: LD_VAR 0 5
3405: PPUSH
3406: LD_VAR 0 6
3410: PPUSH
3411: LD_INT 4
3413: PPUSH
3414: LD_INT 0
3416: PPUSH
3417: CALL_OW 60
// r := 0 ;
3421: LD_ADDR_VAR 0 9
3425: PUSH
3426: LD_INT 0
3428: ST_TO_ADDR
// end ;
3429: GO 3323
// end ;
3431: GO 3304
3433: POP
3434: POP
// end ; if def_base_size > 0 then
3435: LD_EXP 1
3439: PUSH
3440: LD_INT 0
3442: GREATER
3443: IFFALSE 3518
// begin bc_kind1 := b_lab_basic ;
3445: LD_ADDR_OWVAR 44
3449: PUSH
3450: LD_INT 9
3452: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
3453: LD_ADDR_OWVAR 45
3457: PUSH
3458: LD_INT 9
3460: ST_TO_ADDR
// bc_type := b_lab ;
3461: LD_ADDR_OWVAR 42
3465: PUSH
3466: LD_INT 6
3468: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( labs_def [ pos ] [ 1 ] , labs_def [ pos ] [ 2 ] , labs_def [ pos ] [ 3 ] ) ;
3469: LD_EXP 24
3473: PUSH
3474: LD_VAR 0 2
3478: ARRAY
3479: PUSH
3480: LD_INT 1
3482: ARRAY
3483: PPUSH
3484: LD_EXP 24
3488: PUSH
3489: LD_VAR 0 2
3493: ARRAY
3494: PUSH
3495: LD_INT 2
3497: ARRAY
3498: PPUSH
3499: LD_EXP 24
3503: PUSH
3504: LD_VAR 0 2
3508: ARRAY
3509: PUSH
3510: LD_INT 3
3512: ARRAY
3513: PPUSH
3514: CALL_OW 47
// end ; if def_base_size > 1 then
3518: LD_EXP 1
3522: PUSH
3523: LD_INT 1
3525: GREATER
3526: IFFALSE 3585
// begin bc_type := b_workshop ;
3528: LD_ADDR_OWVAR 42
3532: PUSH
3533: LD_INT 2
3535: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( factory_def [ pos ] [ 1 ] , factory_def [ pos ] [ 2 ] , factory_def [ pos ] [ 3 ] ) ;
3536: LD_EXP 25
3540: PUSH
3541: LD_VAR 0 2
3545: ARRAY
3546: PUSH
3547: LD_INT 1
3549: ARRAY
3550: PPUSH
3551: LD_EXP 25
3555: PUSH
3556: LD_VAR 0 2
3560: ARRAY
3561: PUSH
3562: LD_INT 2
3564: ARRAY
3565: PPUSH
3566: LD_EXP 25
3570: PUSH
3571: LD_VAR 0 2
3575: ARRAY
3576: PUSH
3577: LD_INT 3
3579: ARRAY
3580: PPUSH
3581: CALL_OW 47
// end ; for r in starting_crates do
3585: LD_ADDR_VAR 0 9
3589: PUSH
3590: LD_EXP 8
3594: PUSH
3595: FOR_IN
3596: IFFALSE 3628
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3598: LD_INT 1
3600: PPUSH
3601: LD_INT 5
3603: PPUSH
3604: LD_VAR 0 5
3608: PPUSH
3609: LD_VAR 0 6
3613: PPUSH
3614: LD_VAR 0 9
3618: PPUSH
3619: LD_INT 0
3621: PPUSH
3622: CALL_OW 60
3626: GO 3595
3628: POP
3629: POP
// if def_morale_flags then
3630: LD_EXP 66
3634: IFFALSE 3773
// begin x := start_def [ pos ] [ 1 ] ;
3636: LD_ADDR_VAR 0 5
3640: PUSH
3641: LD_EXP 26
3645: PUSH
3646: LD_VAR 0 2
3650: ARRAY
3651: PUSH
3652: LD_INT 1
3654: ARRAY
3655: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3656: LD_ADDR_VAR 0 6
3660: PUSH
3661: LD_EXP 26
3665: PUSH
3666: LD_VAR 0 2
3670: ARRAY
3671: PUSH
3672: LD_INT 2
3674: ARRAY
3675: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3676: LD_VAR 0 5
3680: PPUSH
3681: LD_VAR 0 6
3685: PPUSH
3686: LD_INT 12
3688: PPUSH
3689: LD_INT 2
3691: PPUSH
3692: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3696: LD_ADDR_EXP 29
3700: PUSH
3701: LD_EXP 29
3705: PUSH
3706: LD_VAR 0 1
3710: PPUSH
3711: LD_VAR 0 5
3715: PPUSH
3716: LD_VAR 0 6
3720: PPUSH
3721: LD_INT 1
3723: PUSH
3724: LD_INT 100
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: PUSH
3731: LD_INT 2
3733: PUSH
3734: LD_INT 50
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: PUSH
3741: LD_INT 3
3743: PUSH
3744: LD_INT 20
3746: PUSH
3747: EMPTY
3748: LIST
3749: LIST
3750: PUSH
3751: LD_INT 20
3753: PUSH
3754: LD_INT 100
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: LIST
3765: LIST
3766: PPUSH
3767: CALL_OW 418
3771: ADD
3772: ST_TO_ADDR
// end ; commander := true ;
3773: LD_ADDR_LOC 1
3777: PUSH
3778: LD_INT 1
3780: ST_TO_ADDR
// soldiers_created := 0 ;
3781: LD_ADDR_LOC 4
3785: PUSH
3786: LD_INT 0
3788: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3789: LD_ADDR_VAR 0 8
3793: PUSH
3794: DOUBLE
3795: LD_INT 1
3797: DEC
3798: ST_TO_ADDR
3799: LD_EXP 5
3803: PUSH
3804: FOR_TO
3805: IFFALSE 4047
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3807: LD_ADDR_VAR 0 5
3811: PUSH
3812: LD_EXP 23
3816: PUSH
3817: LD_VAR 0 2
3821: ARRAY
3822: PUSH
3823: LD_VAR 0 8
3827: ARRAY
3828: PUSH
3829: LD_INT 1
3831: ARRAY
3832: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3833: LD_ADDR_VAR 0 6
3837: PUSH
3838: LD_EXP 23
3842: PUSH
3843: LD_VAR 0 2
3847: ARRAY
3848: PUSH
3849: LD_VAR 0 8
3853: ARRAY
3854: PUSH
3855: LD_INT 2
3857: ARRAY
3858: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3859: LD_ADDR_VAR 0 7
3863: PUSH
3864: LD_EXP 23
3868: PUSH
3869: LD_VAR 0 2
3873: ARRAY
3874: PUSH
3875: LD_VAR 0 8
3879: ARRAY
3880: PUSH
3881: LD_INT 3
3883: ARRAY
3884: ST_TO_ADDR
// if i < 4 then
3885: LD_VAR 0 8
3889: PUSH
3890: LD_INT 4
3892: LESS
3893: IFFALSE 3905
// bc_type := b_breastwork else
3895: LD_ADDR_OWVAR 42
3899: PUSH
3900: LD_INT 31
3902: ST_TO_ADDR
3903: GO 3913
// bc_type := b_armoury ;
3905: LD_ADDR_OWVAR 42
3909: PUSH
3910: LD_INT 4
3912: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3913: LD_ADDR_VAR 0 11
3917: PUSH
3918: LD_VAR 0 5
3922: PPUSH
3923: LD_VAR 0 6
3927: PPUSH
3928: LD_VAR 0 7
3932: PPUSH
3933: CALL_OW 47
3937: ST_TO_ADDR
// x := ShiftX ( x , dir , 2 ) ;
3938: LD_ADDR_VAR 0 5
3942: PUSH
3943: LD_VAR 0 5
3947: PPUSH
3948: LD_VAR 0 7
3952: PPUSH
3953: LD_INT 2
3955: PPUSH
3956: CALL_OW 272
3960: ST_TO_ADDR
// y := ShiftY ( y , dir , 2 ) ;
3961: LD_ADDR_VAR 0 6
3965: PUSH
3966: LD_VAR 0 6
3970: PPUSH
3971: LD_VAR 0 7
3975: PPUSH
3976: LD_INT 2
3978: PPUSH
3979: CALL_OW 273
3983: ST_TO_ADDR
// sol := prepare_people ( 1 , class_soldier , x , y , 0 ) [ 1 ] ;
3984: LD_ADDR_VAR 0 10
3988: PUSH
3989: LD_INT 1
3991: PPUSH
3992: LD_INT 1
3994: PPUSH
3995: LD_VAR 0 5
3999: PPUSH
4000: LD_VAR 0 6
4004: PPUSH
4005: LD_INT 0
4007: PPUSH
4008: CALL 2529 0 5
4012: PUSH
4013: LD_INT 1
4015: ARRAY
4016: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
4017: LD_ADDR_LOC 4
4021: PUSH
4022: LD_LOC 4
4026: PUSH
4027: LD_INT 1
4029: PLUS
4030: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
4031: LD_VAR 0 10
4035: PPUSH
4036: LD_VAR 0 11
4040: PPUSH
4041: CALL_OW 120
// end ;
4045: GO 3804
4047: POP
4048: POP
// x := start_def [ pos ] [ 1 ] ;
4049: LD_ADDR_VAR 0 5
4053: PUSH
4054: LD_EXP 26
4058: PUSH
4059: LD_VAR 0 2
4063: ARRAY
4064: PUSH
4065: LD_INT 1
4067: ARRAY
4068: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4069: LD_ADDR_VAR 0 6
4073: PUSH
4074: LD_EXP 26
4078: PUSH
4079: LD_VAR 0 2
4083: ARRAY
4084: PUSH
4085: LD_INT 2
4087: ARRAY
4088: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 ) ;
4089: LD_LOC 8
4093: PUSH
4094: LD_EXP 5
4098: MINUS
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_VAR 0 5
4107: PPUSH
4108: LD_VAR 0 6
4112: PPUSH
4113: LD_INT 5
4115: PPUSH
4116: CALL 2529 0 5
// prepare_people ( neng , class_engineer , x , y , 5 ) ;
4120: LD_LOC 5
4124: PPUSH
4125: LD_INT 2
4127: PPUSH
4128: LD_VAR 0 5
4132: PPUSH
4133: LD_VAR 0 6
4137: PPUSH
4138: LD_INT 5
4140: PPUSH
4141: CALL 2529 0 5
// prepare_people ( nmech , class_mechanic , x , y , 5 ) ;
4145: LD_LOC 7
4149: PPUSH
4150: LD_INT 3
4152: PPUSH
4153: LD_VAR 0 5
4157: PPUSH
4158: LD_VAR 0 6
4162: PPUSH
4163: LD_INT 5
4165: PPUSH
4166: CALL 2529 0 5
// prepare_people ( nsci , class_scientistic , x , y , 5 ) ;
4170: LD_LOC 6
4174: PPUSH
4175: LD_INT 4
4177: PPUSH
4178: LD_VAR 0 5
4182: PPUSH
4183: LD_VAR 0 6
4187: PPUSH
4188: LD_INT 5
4190: PPUSH
4191: CALL 2529 0 5
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4195: LD_EXP 67
4199: PUSH
4200: LD_INT 20
4202: PPUSH
4203: LD_VAR 0 1
4207: PPUSH
4208: CALL_OW 321
4212: PUSH
4213: LD_INT 1
4215: EQUAL
4216: AND
4217: IFFALSE 4234
// SetTech ( tech_SibDet , side , state_researched ) ;
4219: LD_INT 20
4221: PPUSH
4222: LD_VAR 0 1
4226: PPUSH
4227: LD_INT 2
4229: PPUSH
4230: CALL_OW 322
// if def_siberite_bomb = 1 then
4234: LD_EXP 70
4238: PUSH
4239: LD_INT 1
4241: EQUAL
4242: IFFALSE 4276
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4244: LD_INT 25
4246: PPUSH
4247: LD_VAR 0 1
4251: PPUSH
4252: LD_INT 1
4254: PPUSH
4255: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4259: LD_INT 73
4261: PPUSH
4262: LD_VAR 0 1
4266: PPUSH
4267: LD_INT 1
4269: PPUSH
4270: CALL_OW 322
// end else
4274: GO 4306
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4276: LD_INT 25
4278: PPUSH
4279: LD_VAR 0 1
4283: PPUSH
4284: LD_INT 0
4286: PPUSH
4287: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4291: LD_INT 73
4293: PPUSH
4294: LD_VAR 0 1
4298: PPUSH
4299: LD_INT 0
4301: PPUSH
4302: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4306: LD_INT 24
4308: PPUSH
4309: LD_VAR 0 1
4313: PPUSH
4314: LD_INT 0
4316: PPUSH
4317: CALL_OW 322
// global_defined := true ;
4321: LD_ADDR_LOC 3
4325: PUSH
4326: LD_INT 1
4328: ST_TO_ADDR
// end ;
4329: LD_VAR 0 4
4333: RET
// every 0 0$1 do
4334: GO 4336
4336: DISABLE
// if ( def_siberite_bomb > 1 ) then
4337: LD_EXP 70
4341: PUSH
4342: LD_INT 1
4344: GREATER
4345: IFFALSE 4360
// begin wait ( siberite_bomb_Delay ) ;
4347: LD_EXP 15
4351: PPUSH
4352: CALL_OW 67
// EnableSibFiss ;
4356: CALL 4361 0 0
// end ;
4360: END
// function EnableSibFiss ; var i ; begin
4361: LD_INT 0
4363: PPUSH
4364: PPUSH
// for i := 1 to 8 do
4365: LD_ADDR_VAR 0 2
4369: PUSH
4370: DOUBLE
4371: LD_INT 1
4373: DEC
4374: ST_TO_ADDR
4375: LD_INT 8
4377: PUSH
4378: FOR_TO
4379: IFFALSE 4425
// if Side_Positions [ i ] then
4381: LD_EXP 18
4385: PUSH
4386: LD_VAR 0 2
4390: ARRAY
4391: IFFALSE 4423
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4393: LD_INT 25
4395: PPUSH
4396: LD_VAR 0 2
4400: PPUSH
4401: LD_INT 1
4403: PPUSH
4404: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4408: LD_INT 73
4410: PPUSH
4411: LD_VAR 0 2
4415: PPUSH
4416: LD_INT 1
4418: PPUSH
4419: CALL_OW 322
// end ;
4423: GO 4378
4425: POP
4426: POP
// end ;
4427: LD_VAR 0 1
4431: RET
// function prepare_sides ; var i , orig , pos ; begin
4432: LD_INT 0
4434: PPUSH
4435: PPUSH
4436: PPUSH
4437: PPUSH
// global_units := [ ] ;
4438: LD_ADDR_LOC 2
4442: PUSH
4443: EMPTY
4444: ST_TO_ADDR
// global_defined := false ;
4445: LD_ADDR_LOC 3
4449: PUSH
4450: LD_INT 0
4452: ST_TO_ADDR
// CountClassMembers ;
4453: CALL 4972 0 0
// for i := 1 to 8 do
4457: LD_ADDR_VAR 0 2
4461: PUSH
4462: DOUBLE
4463: LD_INT 1
4465: DEC
4466: ST_TO_ADDR
4467: LD_INT 8
4469: PUSH
4470: FOR_TO
4471: IFFALSE 4671
// if Side_Positions [ i ] then
4473: LD_EXP 18
4477: PUSH
4478: LD_VAR 0 2
4482: ARRAY
4483: IFFALSE 4669
// begin pos := Side_Positions [ i ] ;
4485: LD_ADDR_VAR 0 4
4489: PUSH
4490: LD_EXP 18
4494: PUSH
4495: LD_VAR 0 2
4499: ARRAY
4500: ST_TO_ADDR
// if Game_Type in [ 2 , 12 ] then
4501: LD_EXP 56
4505: PUSH
4506: LD_INT 2
4508: PUSH
4509: LD_INT 12
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: IN
4516: IFFALSE 4644
// begin if Game_Type = 12 then
4518: LD_EXP 56
4522: PUSH
4523: LD_INT 12
4525: EQUAL
4526: IFFALSE 4588
// begin prepare_side ( i , pos , Position_Nations [ pos ] ) ;
4528: LD_VAR 0 2
4532: PPUSH
4533: LD_VAR 0 4
4537: PPUSH
4538: LD_EXP 21
4542: PUSH
4543: LD_VAR 0 4
4547: ARRAY
4548: PPUSH
4549: CALL 3044 0 3
// prepare_side ( i , pos + 1 , Position_Nations [ pos + 1 ] ) end else
4553: LD_VAR 0 2
4557: PPUSH
4558: LD_VAR 0 4
4562: PUSH
4563: LD_INT 1
4565: PLUS
4566: PPUSH
4567: LD_EXP 21
4571: PUSH
4572: LD_VAR 0 4
4576: PUSH
4577: LD_INT 1
4579: PLUS
4580: ARRAY
4581: PPUSH
4582: CALL 3044 0 3
4586: GO 4642
// begin prepare_side ( i , pos , Side_Nations [ i ] ) ;
4588: LD_VAR 0 2
4592: PPUSH
4593: LD_VAR 0 4
4597: PPUSH
4598: LD_EXP 19
4602: PUSH
4603: LD_VAR 0 2
4607: ARRAY
4608: PPUSH
4609: CALL 3044 0 3
// prepare_side ( i , pos + 1 , Side_Nations [ i ] ) ;
4613: LD_VAR 0 2
4617: PPUSH
4618: LD_VAR 0 4
4622: PUSH
4623: LD_INT 1
4625: PLUS
4626: PPUSH
4627: LD_EXP 19
4631: PUSH
4632: LD_VAR 0 2
4636: ARRAY
4637: PPUSH
4638: CALL 3044 0 3
// end ; end else
4642: GO 4669
// prepare_side ( i , pos , Side_Nations [ i ] ) ;
4644: LD_VAR 0 2
4648: PPUSH
4649: LD_VAR 0 4
4653: PPUSH
4654: LD_EXP 19
4658: PUSH
4659: LD_VAR 0 2
4663: ARRAY
4664: PPUSH
4665: CALL 3044 0 3
// end ;
4669: GO 4470
4671: POP
4672: POP
// end ;
4673: LD_VAR 0 1
4677: RET
// function Modify_Nations ; var list , west , east , i ; begin
4678: LD_INT 0
4680: PPUSH
4681: PPUSH
4682: PPUSH
4683: PPUSH
4684: PPUSH
// list := [ ] ;
4685: LD_ADDR_VAR 0 2
4689: PUSH
4690: EMPTY
4691: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
4692: LD_ADDR_VAR 0 5
4696: PUSH
4697: DOUBLE
4698: LD_INT 1
4700: DEC
4701: ST_TO_ADDR
4702: LD_EXP 18
4706: PUSH
4707: LD_INT 0
4709: PLUS
4710: PUSH
4711: FOR_TO
4712: IFFALSE 4930
// if side_positions [ i ] = 1 then
4714: LD_EXP 18
4718: PUSH
4719: LD_VAR 0 5
4723: ARRAY
4724: PUSH
4725: LD_INT 1
4727: EQUAL
4728: IFFALSE 4822
// case side_nations [ i ] of 1 :
4730: LD_EXP 19
4734: PUSH
4735: LD_VAR 0 5
4739: ARRAY
4740: PUSH
4741: LD_INT 1
4743: DOUBLE
4744: EQUAL
4745: IFTRUE 4749
4747: GO 4767
4749: POP
// west := [ 1 , 2 ] ; 2 :
4750: LD_ADDR_VAR 0 3
4754: PUSH
4755: LD_INT 1
4757: PUSH
4758: LD_INT 2
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: ST_TO_ADDR
4765: GO 4820
4767: LD_INT 2
4769: DOUBLE
4770: EQUAL
4771: IFTRUE 4775
4773: GO 4793
4775: POP
// west := [ 2 , 3 ] ; 3 :
4776: LD_ADDR_VAR 0 3
4780: PUSH
4781: LD_INT 2
4783: PUSH
4784: LD_INT 3
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: ST_TO_ADDR
4791: GO 4820
4793: LD_INT 3
4795: DOUBLE
4796: EQUAL
4797: IFTRUE 4801
4799: GO 4819
4801: POP
// west := [ 3 , 1 ] ; end else
4802: LD_ADDR_VAR 0 3
4806: PUSH
4807: LD_INT 3
4809: PUSH
4810: LD_INT 1
4812: PUSH
4813: EMPTY
4814: LIST
4815: LIST
4816: ST_TO_ADDR
4817: GO 4820
4819: POP
4820: GO 4928
// if side_positions [ i ] = 3 then
4822: LD_EXP 18
4826: PUSH
4827: LD_VAR 0 5
4831: ARRAY
4832: PUSH
4833: LD_INT 3
4835: EQUAL
4836: IFFALSE 4928
// case side_nations [ i ] of 1 :
4838: LD_EXP 19
4842: PUSH
4843: LD_VAR 0 5
4847: ARRAY
4848: PUSH
4849: LD_INT 1
4851: DOUBLE
4852: EQUAL
4853: IFTRUE 4857
4855: GO 4875
4857: POP
// east := [ 1 , 2 ] ; 2 :
4858: LD_ADDR_VAR 0 4
4862: PUSH
4863: LD_INT 1
4865: PUSH
4866: LD_INT 2
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: ST_TO_ADDR
4873: GO 4928
4875: LD_INT 2
4877: DOUBLE
4878: EQUAL
4879: IFTRUE 4883
4881: GO 4901
4883: POP
// east := [ 2 , 3 ] ; 3 :
4884: LD_ADDR_VAR 0 4
4888: PUSH
4889: LD_INT 2
4891: PUSH
4892: LD_INT 3
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: ST_TO_ADDR
4899: GO 4928
4901: LD_INT 3
4903: DOUBLE
4904: EQUAL
4905: IFTRUE 4909
4907: GO 4927
4909: POP
// east := [ 3 , 1 ] ; end ;
4910: LD_ADDR_VAR 0 4
4914: PUSH
4915: LD_INT 3
4917: PUSH
4918: LD_INT 1
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: ST_TO_ADDR
4925: GO 4928
4927: POP
4928: GO 4711
4930: POP
4931: POP
// Position_Nations := west ^ east ^ [ 0 , 0 , 0 , 0 ] ;
4932: LD_ADDR_EXP 21
4936: PUSH
4937: LD_VAR 0 3
4941: PUSH
4942: LD_VAR 0 4
4946: ADD
4947: PUSH
4948: LD_INT 0
4950: PUSH
4951: LD_INT 0
4953: PUSH
4954: LD_INT 0
4956: PUSH
4957: LD_INT 0
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: LIST
4964: LIST
4965: ADD
4966: ST_TO_ADDR
// end ;
4967: LD_VAR 0 1
4971: RET
// function CountClassMembers ; var Mode ; begin
4972: LD_INT 0
4974: PPUSH
4975: PPUSH
// if No_Mechs then
4976: LD_EXP 72
4980: IFFALSE 4992
// Mode := 2 else
4982: LD_ADDR_VAR 0 2
4986: PUSH
4987: LD_INT 2
4989: ST_TO_ADDR
4990: GO 5000
// Mode := 1 ;
4992: LD_ADDR_VAR 0 2
4996: PUSH
4997: LD_INT 1
4999: ST_TO_ADDR
// neng := number_of_people ;
5000: LD_ADDR_LOC 5
5004: PUSH
5005: LD_EXP 6
5009: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
5010: LD_ADDR_LOC 8
5014: PUSH
5015: LD_LOC 5
5019: PUSH
5020: LD_INT 4
5022: PUSH
5023: LD_INT 3
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PUSH
5030: LD_VAR 0 2
5034: ARRAY
5035: DIV
5036: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
5037: LD_LOC 8
5041: PUSH
5042: LD_EXP 5
5046: LESS
5047: IFFALSE 5059
// nsol := number_of_breastworks ;
5049: LD_ADDR_LOC 8
5053: PUSH
5054: LD_EXP 5
5058: ST_TO_ADDR
// neng := neng - nsol ;
5059: LD_ADDR_LOC 5
5063: PUSH
5064: LD_LOC 5
5068: PUSH
5069: LD_LOC 8
5073: MINUS
5074: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
5075: LD_ADDR_LOC 6
5079: PUSH
5080: LD_LOC 5
5084: PUSH
5085: LD_INT 3
5087: PUSH
5088: LD_INT 2
5090: PUSH
5091: EMPTY
5092: LIST
5093: LIST
5094: PUSH
5095: LD_VAR 0 2
5099: ARRAY
5100: DIV
5101: ST_TO_ADDR
// if ( nsci < 1 ) then
5102: LD_LOC 6
5106: PUSH
5107: LD_INT 1
5109: LESS
5110: IFFALSE 5120
// nsci := 1 ;
5112: LD_ADDR_LOC 6
5116: PUSH
5117: LD_INT 1
5119: ST_TO_ADDR
// neng := neng - nsci ;
5120: LD_ADDR_LOC 5
5124: PUSH
5125: LD_LOC 5
5129: PUSH
5130: LD_LOC 6
5134: MINUS
5135: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5136: LD_ADDR_LOC 7
5140: PUSH
5141: LD_LOC 5
5145: PUSH
5146: LD_INT 2
5148: DIV
5149: PUSH
5150: LD_INT 0
5152: PUSH
5153: EMPTY
5154: LIST
5155: LIST
5156: PUSH
5157: LD_VAR 0 2
5161: ARRAY
5162: ST_TO_ADDR
// neng := neng - nmech ;
5163: LD_ADDR_LOC 5
5167: PUSH
5168: LD_LOC 5
5172: PUSH
5173: LD_LOC 7
5177: MINUS
5178: ST_TO_ADDR
// if ( neng < 1 ) then
5179: LD_LOC 5
5183: PUSH
5184: LD_INT 1
5186: LESS
5187: IFFALSE 5197
// neng := 1 ;
5189: LD_ADDR_LOC 5
5193: PUSH
5194: LD_INT 1
5196: ST_TO_ADDR
// end ;
5197: LD_VAR 0 1
5201: RET
// function Init_Win_Condition ; begin
5202: LD_INT 0
5204: PPUSH
// disable ( 98 ) ;
5205: LD_INT 98
5207: DISABLE_MARKED
// disable ( 99 ) ;
5208: LD_INT 99
5210: DISABLE_MARKED
// if Team_Game then
5211: LD_EXP 20
5215: IFFALSE 5222
// enable ( 98 ) else
5217: LD_INT 98
5219: ENABLE_MARKED
5220: GO 5225
// enable ( 99 ) ;
5222: LD_INT 99
5224: ENABLE_MARKED
// end ;
5225: LD_VAR 0 1
5229: RET
// starting begin DE_Triggers ;
5230: CALL 8698 0 0
// mp_selectmsg := true ;
5234: LD_ADDR_OWVAR 13
5238: PUSH
5239: LD_INT 1
5241: ST_TO_ADDR
// if ( game_type <> 1 ) and ( game_type <> 3 ) then
5242: LD_EXP 56
5246: PUSH
5247: LD_INT 1
5249: NONEQUAL
5250: PUSH
5251: LD_EXP 56
5255: PUSH
5256: LD_INT 3
5258: NONEQUAL
5259: AND
5260: IFFALSE 5266
// read_multiplayer_and_game_parameters ;
5262: CALL 976 0 0
// case Game_Type of 1 , 3 :
5266: LD_EXP 56
5270: PUSH
5271: LD_INT 1
5273: DOUBLE
5274: EQUAL
5275: IFTRUE 5285
5277: LD_INT 3
5279: DOUBLE
5280: EQUAL
5281: IFTRUE 5285
5283: GO 5297
5285: POP
// begin enable ( 19 ) ;
5286: LD_INT 19
5288: ENABLE_MARKED
// starting_ctf ;
5289: CALL 9337 0 0
// exit ;
5293: GO 5465
// end ; 12 :
5295: GO 5313
5297: LD_INT 12
5299: DOUBLE
5300: EQUAL
5301: IFTRUE 5305
5303: GO 5312
5305: POP
// Modify_Nations ; end ;
5306: CALL 4678 0 0
5310: GO 5313
5312: POP
// enable ( 55 ) ;
5313: LD_INT 55
5315: ENABLE_MARKED
// AnimateTrees ( true ) ;
5316: LD_INT 1
5318: PPUSH
5319: CALL_OW 573
// init_map ;
5323: CALL 276 0 0
// set_shared_visions_and_alliances ;
5327: CALL 2220 0 0
// prepare_sides ;
5331: CALL 4432 0 0
// InitLimits ;
5335: CALL 18091 0 0
// ShowTimer ;
5339: CALL 19028 0 0
// init_shipments ;
5343: CALL 5466 0 0
// init_respawn ;
5347: CALL 5970 0 0
// InitApeman ;
5351: CALL 7505 0 0
// music_nat := Side_Nations [ your_side ] ;
5355: LD_ADDR_OWVAR 71
5359: PUSH
5360: LD_EXP 19
5364: PUSH
5365: LD_OWVAR 2
5369: ARRAY
5370: ST_TO_ADDR
// if IAmSpec then
5371: CALL_OW 531
5375: IFFALSE 5411
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
5377: LD_INT 0
5379: PPUSH
5380: LD_INT 0
5382: PPUSH
5383: LD_OWVAR 2
5387: PPUSH
5388: LD_INT 32767
5390: NEG
5391: PPUSH
5392: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
5396: LD_INT 104
5398: PPUSH
5399: LD_INT 69
5401: PPUSH
5402: CALL_OW 86
// enable ( 400 ) ;
5406: LD_INT 400
5408: ENABLE_MARKED
// end else
5409: GO 5465
// begin ResetFog ;
5411: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5415: LD_EXP 26
5419: PUSH
5420: LD_EXP 18
5424: PUSH
5425: LD_OWVAR 2
5429: ARRAY
5430: ARRAY
5431: PUSH
5432: LD_INT 1
5434: ARRAY
5435: PPUSH
5436: LD_EXP 26
5440: PUSH
5441: LD_EXP 18
5445: PUSH
5446: LD_OWVAR 2
5450: ARRAY
5451: ARRAY
5452: PUSH
5453: LD_INT 2
5455: ARRAY
5456: PPUSH
5457: CALL_OW 86
// Init_Win_Condition ;
5461: CALL 5202 0 0
// end ; end ; end_of_file
5465: END
// var shipment , tictac ; export function init_shipments ; begin
5466: LD_INT 0
5468: PPUSH
// shipment := Rand ( 0 , 1 ) ;
5469: LD_ADDR_LOC 9
5473: PUSH
5474: LD_INT 0
5476: PPUSH
5477: LD_INT 1
5479: PPUSH
5480: CALL_OW 12
5484: ST_TO_ADDR
// tictac := 0 ;
5485: LD_ADDR_LOC 10
5489: PUSH
5490: LD_INT 0
5492: ST_TO_ADDR
// end ;
5493: LD_VAR 0 1
5497: RET
// every 0 0$5 + 0 0$1.1 marked 55 do var d ;
5498: GO 5500
5500: DISABLE
5501: LD_INT 0
5503: PPUSH
// begin case tick of 1 .. 1 1$0 :
5504: LD_OWVAR 1
5508: PUSH
5509: LD_INT 1
5511: DOUBLE
5512: GREATEREQUAL
5513: IFFALSE 5521
5515: LD_INT 2100
5517: DOUBLE
5518: LESSEQUAL
5519: IFTRUE 5523
5521: GO 5534
5523: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5524: LD_ADDR_VAR 0 1
5528: PUSH
5529: LD_INT 150
5531: ST_TO_ADDR
5532: GO 5717
5534: LD_INT 2100
5536: PUSH
5537: LD_INT 1
5539: PLUS
5540: DOUBLE
5541: GREATEREQUAL
5542: IFFALSE 5550
5544: LD_INT 10500
5546: DOUBLE
5547: LESSEQUAL
5548: IFTRUE 5552
5550: GO 5563
5552: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5553: LD_ADDR_VAR 0 1
5557: PUSH
5558: LD_INT 100
5560: ST_TO_ADDR
5561: GO 5717
5563: LD_INT 10500
5565: PUSH
5566: LD_INT 1
5568: PLUS
5569: DOUBLE
5570: GREATEREQUAL
5571: IFFALSE 5579
5573: LD_INT 21000
5575: DOUBLE
5576: LESSEQUAL
5577: IFTRUE 5581
5579: GO 5592
5581: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5582: LD_ADDR_VAR 0 1
5586: PUSH
5587: LD_INT 90
5589: ST_TO_ADDR
5590: GO 5717
5592: LD_INT 21000
5594: PUSH
5595: LD_INT 1
5597: PLUS
5598: DOUBLE
5599: GREATEREQUAL
5600: IFFALSE 5608
5602: LD_INT 42000
5604: DOUBLE
5605: LESSEQUAL
5606: IFTRUE 5610
5608: GO 5621
5610: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5611: LD_ADDR_VAR 0 1
5615: PUSH
5616: LD_INT 70
5618: ST_TO_ADDR
5619: GO 5717
5621: LD_INT 42000
5623: PUSH
5624: LD_INT 1
5626: PLUS
5627: DOUBLE
5628: GREATEREQUAL
5629: IFFALSE 5637
5631: LD_INT 63000
5633: DOUBLE
5634: LESSEQUAL
5635: IFTRUE 5639
5637: GO 5650
5639: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5640: LD_ADDR_VAR 0 1
5644: PUSH
5645: LD_INT 60
5647: ST_TO_ADDR
5648: GO 5717
5650: LD_INT 63000
5652: PUSH
5653: LD_INT 1
5655: PLUS
5656: DOUBLE
5657: GREATEREQUAL
5658: IFFALSE 5666
5660: LD_INT 105000
5662: DOUBLE
5663: LESSEQUAL
5664: IFTRUE 5668
5666: GO 5679
5668: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5669: LD_ADDR_VAR 0 1
5673: PUSH
5674: LD_INT 35
5676: ST_TO_ADDR
5677: GO 5717
5679: LD_INT 105000
5681: PUSH
5682: LD_INT 1
5684: PLUS
5685: DOUBLE
5686: GREATEREQUAL
5687: IFFALSE 5695
5689: LD_INT 630000
5691: DOUBLE
5692: LESSEQUAL
5693: IFTRUE 5697
5695: GO 5708
5697: POP
// d := 20 ; else
5698: LD_ADDR_VAR 0 1
5702: PUSH
5703: LD_INT 20
5705: ST_TO_ADDR
5706: GO 5717
5708: POP
// d := 0 ; end ;
5709: LD_ADDR_VAR 0 1
5713: PUSH
5714: LD_INT 0
5716: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5717: LD_INT 1
5719: PPUSH
5720: LD_INT 10000
5722: PPUSH
5723: CALL_OW 12
5727: PUSH
5728: LD_VAR 0 1
5732: PUSH
5733: LD_EXP 10
5737: MUL
5738: LESSEQUAL
5739: IFFALSE 5793
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5741: LD_INT 1
5743: PPUSH
5744: LD_INT 140
5746: PPUSH
5747: CALL_OW 12
5751: PPUSH
5752: CALL_OW 67
// shipment := ( shipment + 1 ) mod 2 ;
5756: LD_ADDR_LOC 9
5760: PUSH
5761: LD_LOC 9
5765: PUSH
5766: LD_INT 1
5768: PLUS
5769: PUSH
5770: LD_INT 2
5772: MOD
5773: ST_TO_ADDR
// CreateCratesArea ( 5 , west_side + shipment , true ) ;
5774: LD_INT 5
5776: PPUSH
5777: LD_INT 8
5779: PUSH
5780: LD_LOC 9
5784: PLUS
5785: PPUSH
5786: LD_INT 1
5788: PPUSH
5789: CALL_OW 55
// end ; enable ;
5793: ENABLE
// end ;
5794: PPOPN 1
5796: END
// every 0 0$10 trigger TICK > ( ( 2 2$0 * tictac ) + tictac * ( 1 1$30 - shipments_density * ( 0 0$2 ) ) ) marked 55 do var i , amount , is_in ;
5797: LD_OWVAR 1
5801: PUSH
5802: LD_INT 4200
5804: PUSH
5805: LD_LOC 10
5809: MUL
5810: PUSH
5811: LD_LOC 10
5815: PUSH
5816: LD_INT 3150
5818: PUSH
5819: LD_EXP 10
5823: PUSH
5824: LD_INT 70
5826: MUL
5827: MINUS
5828: MUL
5829: PLUS
5830: GREATER
5831: IFFALSE 5967
5833: GO 5835
5835: DISABLE
5836: LD_INT 0
5838: PPUSH
5839: PPUSH
5840: PPUSH
// begin tictac := tictac + 1 ;
5841: LD_ADDR_LOC 10
5845: PUSH
5846: LD_LOC 10
5850: PUSH
5851: LD_INT 1
5853: PLUS
5854: ST_TO_ADDR
// amount := Rand ( 3 , 5 ) ;
5855: LD_ADDR_VAR 0 2
5859: PUSH
5860: LD_INT 3
5862: PPUSH
5863: LD_INT 5
5865: PPUSH
5866: CALL_OW 12
5870: ST_TO_ADDR
// for i = 0 to 3 do
5871: LD_ADDR_VAR 0 1
5875: PUSH
5876: DOUBLE
5877: LD_INT 0
5879: DEC
5880: ST_TO_ADDR
5881: LD_INT 3
5883: PUSH
5884: FOR_TO
5885: IFFALSE 5964
// begin is_in := GetResourceArea ( west_side + i , mat_cans ) ;
5887: LD_ADDR_VAR 0 3
5891: PUSH
5892: LD_INT 8
5894: PUSH
5895: LD_VAR 0 1
5899: PLUS
5900: PPUSH
5901: LD_INT 1
5903: PPUSH
5904: CALL_OW 287
5908: ST_TO_ADDR
// if ( is_in < 500 ) or ( Rand ( 1 , 10 ) > ( is_in div 100 ) ) then
5909: LD_VAR 0 3
5913: PUSH
5914: LD_INT 500
5916: LESS
5917: PUSH
5918: LD_INT 1
5920: PPUSH
5921: LD_INT 10
5923: PPUSH
5924: CALL_OW 12
5928: PUSH
5929: LD_VAR 0 3
5933: PUSH
5934: LD_INT 100
5936: DIV
5937: GREATER
5938: OR
5939: IFFALSE 5962
// CreateCratesArea ( amount , nw + i , true ) ;
5941: LD_VAR 0 2
5945: PPUSH
5946: LD_INT 12
5948: PUSH
5949: LD_VAR 0 1
5953: PLUS
5954: PPUSH
5955: LD_INT 1
5957: PPUSH
5958: CALL_OW 55
// end ;
5962: GO 5884
5964: POP
5965: POP
// enable ;
5966: ENABLE
// end ; end_of_file
5967: PPOPN 3
5969: END
// var respawn_queue , nation_queue ; export function init_respawn ; begin
5970: LD_INT 0
5972: PPUSH
// if not def_people_respawning then
5973: LD_EXP 68
5977: NOT
5978: IFFALSE 5982
// exit ;
5980: GO 6085
// respawn_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5982: LD_ADDR_LOC 11
5986: PUSH
5987: LD_INT 0
5989: PUSH
5990: LD_INT 0
5992: PUSH
5993: LD_INT 0
5995: PUSH
5996: LD_INT 0
5998: PUSH
5999: LD_INT 0
6001: PUSH
6002: LD_INT 0
6004: PUSH
6005: LD_INT 0
6007: PUSH
6008: LD_INT 0
6010: PUSH
6011: EMPTY
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: ST_TO_ADDR
// nation_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6021: LD_ADDR_LOC 12
6025: PUSH
6026: LD_INT 0
6028: PUSH
6029: LD_INT 0
6031: PUSH
6032: LD_INT 0
6034: PUSH
6035: LD_INT 0
6037: PUSH
6038: LD_INT 0
6040: PUSH
6041: LD_INT 0
6043: PUSH
6044: LD_INT 0
6046: PUSH
6047: LD_INT 0
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: ST_TO_ADDR
// if Game_Type in [ 2 , 12 ] then
6060: LD_EXP 56
6064: PUSH
6065: LD_INT 2
6067: PUSH
6068: LD_INT 12
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: IN
6075: IFFALSE 6082
// enable ( 41 ) else
6077: LD_INT 41
6079: ENABLE_MARKED
6080: GO 6085
// enable ( 40 ) ;
6082: LD_INT 40
6084: ENABLE_MARKED
// end ;
6085: LD_VAR 0 1
6089: RET
// every 0 0$10 marked 40 do var list , time , side ;
6090: GO 6092
6092: DISABLE
6093: LD_INT 0
6095: PPUSH
6096: PPUSH
6097: PPUSH
// begin for side = 1 to Side_Positions do
6098: LD_ADDR_VAR 0 3
6102: PUSH
6103: DOUBLE
6104: LD_INT 1
6106: DEC
6107: ST_TO_ADDR
6108: LD_EXP 18
6112: PUSH
6113: FOR_TO
6114: IFFALSE 6291
// if Side_Positions [ side ] then
6116: LD_EXP 18
6120: PUSH
6121: LD_VAR 0 3
6125: ARRAY
6126: IFFALSE 6289
// begin list := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6128: LD_ADDR_VAR 0 1
6132: PUSH
6133: LD_INT 22
6135: PUSH
6136: LD_VAR 0 3
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: PUSH
6145: LD_INT 21
6147: PUSH
6148: LD_INT 1
6150: PUSH
6151: EMPTY
6152: LIST
6153: LIST
6154: PUSH
6155: LD_INT 3
6157: PUSH
6158: LD_INT 23
6160: PUSH
6161: LD_INT 0
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PUSH
6168: EMPTY
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: PPUSH
6174: CALL_OW 69
6178: ST_TO_ADDR
// if ( list < number_of_people ) and ( not respawn_queue [ side ] ) then
6179: LD_VAR 0 1
6183: PUSH
6184: LD_EXP 6
6188: LESS
6189: PUSH
6190: LD_LOC 11
6194: PUSH
6195: LD_VAR 0 3
6199: ARRAY
6200: NOT
6201: AND
6202: IFFALSE 6229
// respawn_queue := Replace ( respawn_queue , side , TICK ) ;
6204: LD_ADDR_LOC 11
6208: PUSH
6209: LD_LOC 11
6213: PPUSH
6214: LD_VAR 0 3
6218: PPUSH
6219: LD_OWVAR 1
6223: PPUSH
6224: CALL_OW 1
6228: ST_TO_ADDR
// time := TICK - respawn_queue [ side ] ;
6229: LD_ADDR_VAR 0 2
6233: PUSH
6234: LD_OWVAR 1
6238: PUSH
6239: LD_LOC 11
6243: PUSH
6244: LD_VAR 0 3
6248: ARRAY
6249: MINUS
6250: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6251: LD_LOC 11
6255: PUSH
6256: LD_VAR 0 3
6260: ARRAY
6261: PUSH
6262: LD_VAR 0 2
6266: PUSH
6267: LD_EXP 13
6271: GREATER
6272: AND
6273: IFFALSE 6289
// respawn_character ( side , time ) ;
6275: LD_VAR 0 3
6279: PPUSH
6280: LD_VAR 0 2
6284: PPUSH
6285: CALL 6297 0 2
// end ;
6289: GO 6113
6291: POP
6292: POP
// enable ;
6293: ENABLE
// end ;
6294: PPOPN 3
6296: END
// function respawn_character ( side , time ) ; var dep ; begin
6297: LD_INT 0
6299: PPUSH
6300: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6301: LD_INT 0
6303: PPUSH
6304: LD_INT 1
6306: PPUSH
6307: CALL_OW 12
6311: PUSH
6312: LD_VAR 0 2
6316: PUSH
6317: LD_EXP 14
6321: LESS
6322: AND
6323: IFFALSE 6327
// exit ;
6325: GO 6534
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6327: LD_ADDR_VAR 0 4
6331: PUSH
6332: LD_INT 22
6334: PUSH
6335: LD_VAR 0 1
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: PUSH
6344: LD_INT 2
6346: PUSH
6347: LD_INT 30
6349: PUSH
6350: LD_INT 0
6352: PUSH
6353: EMPTY
6354: LIST
6355: LIST
6356: PUSH
6357: LD_INT 30
6359: PUSH
6360: LD_INT 1
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 50
6374: PUSH
6375: EMPTY
6376: LIST
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: LIST
6382: PPUSH
6383: CALL_OW 69
6387: ST_TO_ADDR
// if not dep then
6388: LD_VAR 0 4
6392: NOT
6393: IFFALSE 6399
// exit else
6395: GO 6534
6397: GO 6423
// dep := dep [ Rand ( 1 , dep ) ] ;
6399: LD_ADDR_VAR 0 4
6403: PUSH
6404: LD_VAR 0 4
6408: PUSH
6409: LD_INT 1
6411: PPUSH
6412: LD_VAR 0 4
6416: PPUSH
6417: CALL_OW 12
6421: ARRAY
6422: ST_TO_ADDR
// uc_side := side ;
6423: LD_ADDR_OWVAR 20
6427: PUSH
6428: LD_VAR 0 1
6432: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6433: LD_ADDR_OWVAR 21
6437: PUSH
6438: LD_EXP 19
6442: PUSH
6443: LD_VAR 0 1
6447: ARRAY
6448: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6449: LD_INT 0
6451: PPUSH
6452: LD_INT 0
6454: PPUSH
6455: LD_EXP 7
6459: PUSH
6460: LD_INT 2
6462: DIV
6463: PPUSH
6464: CALL_OW 380
// hc_importance := 0 ;
6468: LD_ADDR_OWVAR 32
6472: PUSH
6473: LD_INT 0
6475: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
6476: CALL_OW 44
6480: PPUSH
6481: LD_VAR 0 4
6485: PPUSH
6486: CALL_OW 250
6490: PPUSH
6491: LD_VAR 0 4
6495: PPUSH
6496: CALL_OW 251
6500: PPUSH
6501: LD_INT 10
6503: PPUSH
6504: LD_INT 1
6506: PPUSH
6507: CALL_OW 50
// respawn_queue := Replace ( respawn_queue , side , 0 ) ;
6511: LD_ADDR_LOC 11
6515: PUSH
6516: LD_LOC 11
6520: PPUSH
6521: LD_VAR 0 1
6525: PPUSH
6526: LD_INT 0
6528: PPUSH
6529: CALL_OW 1
6533: ST_TO_ADDR
// end ;
6534: LD_VAR 0 3
6538: RET
// every 0 0$10 marked 41 do var i , list , time , nation , side , limit ;
6539: GO 6541
6541: DISABLE
6542: LD_INT 0
6544: PPUSH
6545: PPUSH
6546: PPUSH
6547: PPUSH
6548: PPUSH
6549: PPUSH
// begin if Game_Type = 12 then
6550: LD_EXP 56
6554: PUSH
6555: LD_INT 12
6557: EQUAL
6558: IFFALSE 6572
// limit := number_of_people else
6560: LD_ADDR_VAR 0 6
6564: PUSH
6565: LD_EXP 6
6569: ST_TO_ADDR
6570: GO 6586
// limit := 2 * number_of_people ;
6572: LD_ADDR_VAR 0 6
6576: PUSH
6577: LD_INT 2
6579: PUSH
6580: LD_EXP 6
6584: MUL
6585: ST_TO_ADDR
// for i = 1 to 4 do
6586: LD_ADDR_VAR 0 1
6590: PUSH
6591: DOUBLE
6592: LD_INT 1
6594: DEC
6595: ST_TO_ADDR
6596: LD_INT 4
6598: PUSH
6599: FOR_TO
6600: IFFALSE 6892
// begin side := GetSidePositions ( [ 1 , 1 , 3 , 3 ] [ i ] ) ;
6602: LD_ADDR_VAR 0 5
6606: PUSH
6607: LD_INT 1
6609: PUSH
6610: LD_INT 1
6612: PUSH
6613: LD_INT 3
6615: PUSH
6616: LD_INT 3
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: PUSH
6625: LD_VAR 0 1
6629: ARRAY
6630: PPUSH
6631: CALL 7234 0 1
6635: ST_TO_ADDR
// if Game_Type = 12 then
6636: LD_EXP 56
6640: PUSH
6641: LD_INT 12
6643: EQUAL
6644: IFFALSE 6664
// nation := Position_Nations [ i ] else
6646: LD_ADDR_VAR 0 4
6650: PUSH
6651: LD_EXP 21
6655: PUSH
6656: LD_VAR 0 1
6660: ARRAY
6661: ST_TO_ADDR
6662: GO 6680
// nation := Side_Nations [ side ] ;
6664: LD_ADDR_VAR 0 4
6668: PUSH
6669: LD_EXP 19
6673: PUSH
6674: LD_VAR 0 5
6678: ARRAY
6679: ST_TO_ADDR
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_nation , nation ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6680: LD_ADDR_VAR 0 2
6684: PUSH
6685: LD_INT 22
6687: PUSH
6688: LD_VAR 0 5
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: PUSH
6697: LD_INT 23
6699: PUSH
6700: LD_VAR 0 4
6704: PUSH
6705: EMPTY
6706: LIST
6707: LIST
6708: PUSH
6709: LD_INT 21
6711: PUSH
6712: LD_INT 1
6714: PUSH
6715: EMPTY
6716: LIST
6717: LIST
6718: PUSH
6719: LD_INT 3
6721: PUSH
6722: LD_INT 23
6724: PUSH
6725: LD_INT 0
6727: PUSH
6728: EMPTY
6729: LIST
6730: LIST
6731: PUSH
6732: EMPTY
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: PPUSH
6739: CALL_OW 69
6743: ST_TO_ADDR
// if ( list < limit ) and ( not respawn_queue [ side ] ) then
6744: LD_VAR 0 2
6748: PUSH
6749: LD_VAR 0 6
6753: LESS
6754: PUSH
6755: LD_LOC 11
6759: PUSH
6760: LD_VAR 0 5
6764: ARRAY
6765: NOT
6766: AND
6767: IFFALSE 6819
// begin respawn_queue = Replace ( respawn_queue , side , TICK ) ;
6769: LD_ADDR_LOC 11
6773: PUSH
6774: LD_LOC 11
6778: PPUSH
6779: LD_VAR 0 5
6783: PPUSH
6784: LD_OWVAR 1
6788: PPUSH
6789: CALL_OW 1
6793: ST_TO_ADDR
// nation_queue = Replace ( nation_queue , side , nation ) ;
6794: LD_ADDR_LOC 12
6798: PUSH
6799: LD_LOC 12
6803: PPUSH
6804: LD_VAR 0 5
6808: PPUSH
6809: LD_VAR 0 4
6813: PPUSH
6814: CALL_OW 1
6818: ST_TO_ADDR
// end ; time := TICK - respawn_queue [ side ] ;
6819: LD_ADDR_VAR 0 3
6823: PUSH
6824: LD_OWVAR 1
6828: PUSH
6829: LD_LOC 11
6833: PUSH
6834: LD_VAR 0 5
6838: ARRAY
6839: MINUS
6840: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6841: LD_LOC 11
6845: PUSH
6846: LD_VAR 0 5
6850: ARRAY
6851: PUSH
6852: LD_VAR 0 3
6856: PUSH
6857: LD_EXP 13
6861: GREATER
6862: AND
6863: IFFALSE 6890
// respawn_character_nation ( side , time , nation_queue [ side ] ) ;
6865: LD_VAR 0 5
6869: PPUSH
6870: LD_VAR 0 3
6874: PPUSH
6875: LD_LOC 12
6879: PUSH
6880: LD_VAR 0 5
6884: ARRAY
6885: PPUSH
6886: CALL 6898 0 3
// end ;
6890: GO 6599
6892: POP
6893: POP
// enable ;
6894: ENABLE
// end ;
6895: PPOPN 6
6897: END
// function respawn_character_nation ( side , time , nation ) ; var dep ; begin
6898: LD_INT 0
6900: PPUSH
6901: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6902: LD_INT 0
6904: PPUSH
6905: LD_INT 1
6907: PPUSH
6908: CALL_OW 12
6912: PUSH
6913: LD_VAR 0 2
6917: PUSH
6918: LD_EXP 14
6922: LESS
6923: AND
6924: IFFALSE 6928
// exit ;
6926: GO 7229
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_nation , nation ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6928: LD_ADDR_VAR 0 5
6932: PUSH
6933: LD_INT 22
6935: PUSH
6936: LD_VAR 0 1
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: PUSH
6945: LD_INT 23
6947: PUSH
6948: LD_VAR 0 3
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PUSH
6957: LD_INT 2
6959: PUSH
6960: LD_INT 30
6962: PUSH
6963: LD_INT 0
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: LD_INT 30
6972: PUSH
6973: LD_INT 1
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: LIST
6984: PUSH
6985: LD_INT 50
6987: PUSH
6988: EMPTY
6989: LIST
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: PPUSH
6997: CALL_OW 69
7001: ST_TO_ADDR
// if not dep then
7002: LD_VAR 0 5
7006: NOT
7007: IFFALSE 7070
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
7009: LD_ADDR_VAR 0 5
7013: PUSH
7014: LD_INT 22
7016: PUSH
7017: LD_VAR 0 1
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: PUSH
7026: LD_INT 2
7028: PUSH
7029: LD_INT 30
7031: PUSH
7032: LD_INT 0
7034: PUSH
7035: EMPTY
7036: LIST
7037: LIST
7038: PUSH
7039: LD_INT 30
7041: PUSH
7042: LD_INT 1
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: LIST
7053: PUSH
7054: LD_INT 50
7056: PUSH
7057: EMPTY
7058: LIST
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: LIST
7064: PPUSH
7065: CALL_OW 69
7069: ST_TO_ADDR
// if not dep then
7070: LD_VAR 0 5
7074: NOT
7075: IFFALSE 7081
// exit else
7077: GO 7229
7079: GO 7105
// dep := dep [ Rand ( 1 , dep ) ] ;
7081: LD_ADDR_VAR 0 5
7085: PUSH
7086: LD_VAR 0 5
7090: PUSH
7091: LD_INT 1
7093: PPUSH
7094: LD_VAR 0 5
7098: PPUSH
7099: CALL_OW 12
7103: ARRAY
7104: ST_TO_ADDR
// uc_side := side ;
7105: LD_ADDR_OWVAR 20
7109: PUSH
7110: LD_VAR 0 1
7114: ST_TO_ADDR
// uc_nation := nation ;
7115: LD_ADDR_OWVAR 21
7119: PUSH
7120: LD_VAR 0 3
7124: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level ) ;
7125: LD_INT 0
7127: PPUSH
7128: LD_INT 0
7130: PPUSH
7131: LD_EXP 7
7135: PPUSH
7136: CALL_OW 380
// hc_importance := 0 ;
7140: LD_ADDR_OWVAR 32
7144: PUSH
7145: LD_INT 0
7147: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
7148: CALL_OW 44
7152: PPUSH
7153: LD_VAR 0 5
7157: PPUSH
7158: CALL_OW 250
7162: PPUSH
7163: LD_VAR 0 5
7167: PPUSH
7168: CALL_OW 251
7172: PPUSH
7173: LD_INT 10
7175: PPUSH
7176: LD_INT 1
7178: PPUSH
7179: CALL_OW 50
// respawn_queue := Replace ( respawn_queue , side , 0 ) ;
7183: LD_ADDR_LOC 11
7187: PUSH
7188: LD_LOC 11
7192: PPUSH
7193: LD_VAR 0 1
7197: PPUSH
7198: LD_INT 0
7200: PPUSH
7201: CALL_OW 1
7205: ST_TO_ADDR
// nation_queue := Replace ( nation_queue , side , 0 ) ;
7206: LD_ADDR_LOC 12
7210: PUSH
7211: LD_LOC 12
7215: PPUSH
7216: LD_VAR 0 1
7220: PPUSH
7221: LD_INT 0
7223: PPUSH
7224: CALL_OW 1
7228: ST_TO_ADDR
// end ;
7229: LD_VAR 0 4
7233: RET
// function GetSidePositions ( i ) ; var un , side ; begin
7234: LD_INT 0
7236: PPUSH
7237: PPUSH
7238: PPUSH
// side := false ;
7239: LD_ADDR_VAR 0 4
7243: PUSH
7244: LD_INT 0
7246: ST_TO_ADDR
// for un = 1 to Side_Positions do
7247: LD_ADDR_VAR 0 3
7251: PUSH
7252: DOUBLE
7253: LD_INT 1
7255: DEC
7256: ST_TO_ADDR
7257: LD_EXP 18
7261: PUSH
7262: FOR_TO
7263: IFFALSE 7297
// if Side_Positions [ un ] = i then
7265: LD_EXP 18
7269: PUSH
7270: LD_VAR 0 3
7274: ARRAY
7275: PUSH
7276: LD_VAR 0 1
7280: EQUAL
7281: IFFALSE 7295
// begin side := un ;
7283: LD_ADDR_VAR 0 4
7287: PUSH
7288: LD_VAR 0 3
7292: ST_TO_ADDR
// break ;
7293: GO 7297
// end ;
7295: GO 7262
7297: POP
7298: POP
// result := side ;
7299: LD_ADDR_VAR 0 2
7303: PUSH
7304: LD_VAR 0 4
7308: ST_TO_ADDR
// end ; end_of_file
7309: LD_VAR 0 2
7313: RET
// every 20 20$00 trigger apemanNumber do
7314: LD_EXP 30
7318: IFFALSE 7351
7320: GO 7322
7322: DISABLE
// begin enable ;
7323: ENABLE
// if apeLevel >= 8 then
7324: LD_EXP 35
7328: PUSH
7329: LD_INT 8
7331: GREATEREQUAL
7332: IFFALSE 7337
// disable else
7334: DISABLE
7335: GO 7351
// apeLevel := apeLevel + 1 ;
7337: LD_ADDR_EXP 35
7341: PUSH
7342: LD_EXP 35
7346: PUSH
7347: LD_INT 1
7349: PLUS
7350: ST_TO_ADDR
// end ;
7351: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
7352: LD_EXP 30
7356: PUSH
7357: LD_EXP 31
7361: LESS
7362: IFFALSE 7502
7364: GO 7366
7366: DISABLE
7367: LD_INT 0
7369: PPUSH
7370: PPUSH
7371: PPUSH
7372: PPUSH
// begin enable ;
7373: ENABLE
// for i := 1 to apemanPos do
7374: LD_ADDR_VAR 0 1
7378: PUSH
7379: DOUBLE
7380: LD_INT 1
7382: DEC
7383: ST_TO_ADDR
7384: LD_EXP 33
7388: PUSH
7389: FOR_TO
7390: IFFALSE 7500
// begin if apemanPlayerCount [ i ] then
7392: LD_EXP 34
7396: PUSH
7397: LD_VAR 0 1
7401: ARRAY
7402: IFFALSE 7498
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
7404: LD_EXP 34
7408: PUSH
7409: LD_VAR 0 1
7413: ARRAY
7414: PUSH
7415: LD_EXP 33
7419: PUSH
7420: LD_VAR 0 1
7424: ARRAY
7425: GREATER
7426: IFFALSE 7498
// begin ape := PrepareApeman ;
7428: LD_ADDR_VAR 0 2
7432: PUSH
7433: CALL 8005 0 0
7437: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
7438: LD_VAR 0 2
7442: PPUSH
7443: LD_EXP 36
7447: PUSH
7448: LD_VAR 0 1
7452: ARRAY
7453: PPUSH
7454: LD_INT 0
7456: PPUSH
7457: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
7461: LD_ADDR_EXP 33
7465: PUSH
7466: LD_EXP 33
7470: PPUSH
7471: LD_VAR 0 1
7475: PPUSH
7476: LD_EXP 33
7480: PUSH
7481: LD_VAR 0 1
7485: ARRAY
7486: PUSH
7487: LD_VAR 0 2
7491: UNION
7492: PPUSH
7493: CALL_OW 1
7497: ST_TO_ADDR
// end ; end ; end ;
7498: GO 7389
7500: POP
7501: POP
// end ;
7502: PPOPN 4
7504: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
7505: LD_INT 0
7507: PPUSH
7508: PPUSH
7509: PPUSH
7510: PPUSH
7511: PPUSH
7512: PPUSH
7513: PPUSH
// playersAmount := 0 ;
7514: LD_ADDR_VAR 0 3
7518: PUSH
7519: LD_INT 0
7521: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base2ApeArea , Base1ApeArea ] ;
7522: LD_ADDR_VAR 0 7
7526: PUSH
7527: LD_INT 18
7529: PUSH
7530: LD_INT 19
7532: PUSH
7533: LD_INT 19
7535: PUSH
7536: LD_INT 18
7538: PUSH
7539: EMPTY
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7545: LD_ADDR_EXP 36
7549: PUSH
7550: LD_INT 0
7552: PUSH
7553: LD_INT 0
7555: PUSH
7556: LD_INT 0
7558: PUSH
7559: LD_INT 0
7561: PUSH
7562: LD_INT 0
7564: PUSH
7565: LD_INT 0
7567: PUSH
7568: LD_INT 0
7570: PUSH
7571: LD_INT 0
7573: PUSH
7574: EMPTY
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: ST_TO_ADDR
// for j = 1 to Side_Positions do
7584: LD_ADDR_VAR 0 4
7588: PUSH
7589: DOUBLE
7590: LD_INT 1
7592: DEC
7593: ST_TO_ADDR
7594: LD_EXP 18
7598: PUSH
7599: FOR_TO
7600: IFFALSE 7667
// if Side_Positions [ j ] then
7602: LD_EXP 18
7606: PUSH
7607: LD_VAR 0 4
7611: ARRAY
7612: IFFALSE 7665
// begin playersAmount := playersAmount + 1 ;
7614: LD_ADDR_VAR 0 3
7618: PUSH
7619: LD_VAR 0 3
7623: PUSH
7624: LD_INT 1
7626: PLUS
7627: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
7628: LD_ADDR_EXP 36
7632: PUSH
7633: LD_EXP 36
7637: PPUSH
7638: LD_VAR 0 4
7642: PPUSH
7643: LD_VAR 0 7
7647: PUSH
7648: LD_EXP 18
7652: PUSH
7653: LD_VAR 0 4
7657: ARRAY
7658: ARRAY
7659: PPUSH
7660: CALL_OW 1
7664: ST_TO_ADDR
// end ;
7665: GO 7599
7667: POP
7668: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
7669: LD_ADDR_EXP 32
7673: PUSH
7674: LD_INT 3
7676: PUSH
7677: LD_EXP 12
7681: MUL
7682: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
7683: LD_ADDR_EXP 30
7687: PUSH
7688: LD_VAR 0 3
7692: PUSH
7693: LD_EXP 32
7697: MUL
7698: ST_TO_ADDR
// apemanLimit := apemanNumber ;
7699: LD_ADDR_EXP 31
7703: PUSH
7704: LD_EXP 30
7708: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7709: LD_ADDR_EXP 33
7713: PUSH
7714: LD_INT 0
7716: PUSH
7717: LD_INT 0
7719: PUSH
7720: LD_INT 0
7722: PUSH
7723: LD_INT 0
7725: PUSH
7726: LD_INT 0
7728: PUSH
7729: LD_INT 0
7731: PUSH
7732: LD_INT 0
7734: PUSH
7735: LD_INT 0
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7748: LD_ADDR_EXP 34
7752: PUSH
7753: LD_INT 0
7755: PUSH
7756: LD_INT 0
7758: PUSH
7759: LD_INT 0
7761: PUSH
7762: LD_INT 0
7764: PUSH
7765: LD_INT 0
7767: PUSH
7768: LD_INT 0
7770: PUSH
7771: LD_INT 0
7773: PUSH
7774: LD_INT 0
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: ST_TO_ADDR
// apeLevel := 1 ;
7787: LD_ADDR_EXP 35
7791: PUSH
7792: LD_INT 1
7794: ST_TO_ADDR
// if not apemanNumber then
7795: LD_EXP 30
7799: NOT
7800: IFFALSE 7804
// exit ;
7802: GO 8000
// for i := 1 to apemanPerPlayer do
7804: LD_ADDR_VAR 0 2
7808: PUSH
7809: DOUBLE
7810: LD_INT 1
7812: DEC
7813: ST_TO_ADDR
7814: LD_EXP 32
7818: PUSH
7819: FOR_TO
7820: IFFALSE 7998
// begin for j := 1 to Side_Positions do
7822: LD_ADDR_VAR 0 4
7826: PUSH
7827: DOUBLE
7828: LD_INT 1
7830: DEC
7831: ST_TO_ADDR
7832: LD_EXP 18
7836: PUSH
7837: FOR_TO
7838: IFFALSE 7994
// if Side_Positions [ j ] then
7840: LD_EXP 18
7844: PUSH
7845: LD_VAR 0 4
7849: ARRAY
7850: IFFALSE 7992
// begin pos := Side_Positions [ j ] ;
7852: LD_ADDR_VAR 0 6
7856: PUSH
7857: LD_EXP 18
7861: PUSH
7862: LD_VAR 0 4
7866: ARRAY
7867: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
7868: LD_ADDR_EXP 34
7872: PUSH
7873: LD_EXP 34
7877: PPUSH
7878: LD_VAR 0 4
7882: PPUSH
7883: LD_EXP 34
7887: PUSH
7888: LD_VAR 0 4
7892: ARRAY
7893: PUSH
7894: LD_INT 1
7896: PLUS
7897: PPUSH
7898: CALL_OW 1
7902: ST_TO_ADDR
// ape := PrepareApeman ;
7903: LD_ADDR_VAR 0 5
7907: PUSH
7908: CALL 8005 0 0
7912: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
7913: LD_ADDR_EXP 33
7917: PUSH
7918: LD_EXP 33
7922: PPUSH
7923: LD_VAR 0 4
7927: PPUSH
7928: LD_EXP 33
7932: PUSH
7933: LD_VAR 0 4
7937: ARRAY
7938: PPUSH
7939: LD_EXP 33
7943: PUSH
7944: LD_VAR 0 4
7948: ARRAY
7949: PUSH
7950: LD_INT 1
7952: PLUS
7953: PPUSH
7954: LD_VAR 0 5
7958: PPUSH
7959: CALL_OW 1
7963: PPUSH
7964: CALL_OW 1
7968: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
7969: LD_VAR 0 5
7973: PPUSH
7974: LD_EXP 36
7978: PUSH
7979: LD_VAR 0 4
7983: ARRAY
7984: PPUSH
7985: LD_INT 0
7987: PPUSH
7988: CALL_OW 49
// end ;
7992: GO 7837
7994: POP
7995: POP
// end ;
7996: GO 7819
7998: POP
7999: POP
// end ;
8000: LD_VAR 0 1
8004: RET
// export function PrepareApeman ; var bonus ; begin
8005: LD_INT 0
8007: PPUSH
8008: PPUSH
// uc_side := 0 ;
8009: LD_ADDR_OWVAR 20
8013: PUSH
8014: LD_INT 0
8016: ST_TO_ADDR
// uc_nation := 0 ;
8017: LD_ADDR_OWVAR 21
8021: PUSH
8022: LD_INT 0
8024: ST_TO_ADDR
// InitHc ;
8025: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
8029: LD_ADDR_VAR 0 2
8033: PUSH
8034: LD_INT 1
8036: NEG
8037: PUSH
8038: LD_INT 0
8040: PUSH
8041: LD_INT 1
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: LIST
8048: PUSH
8049: LD_OWVAR 1
8053: PUSH
8054: LD_INT 3
8056: MOD
8057: PUSH
8058: LD_INT 1
8060: PLUS
8061: ARRAY
8062: ST_TO_ADDR
// hc_class := class_apeman ;
8063: LD_ADDR_OWVAR 28
8067: PUSH
8068: LD_INT 12
8070: ST_TO_ADDR
// hc_gallery :=  ;
8071: LD_ADDR_OWVAR 33
8075: PUSH
8076: LD_STRING 
8078: ST_TO_ADDR
// hc_name :=  ;
8079: LD_ADDR_OWVAR 26
8083: PUSH
8084: LD_STRING 
8086: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
8087: LD_ADDR_OWVAR 31
8091: PUSH
8092: LD_EXP 35
8096: PUSH
8097: LD_VAR 0 2
8101: PLUS
8102: PUSH
8103: LD_EXP 35
8107: PUSH
8108: LD_VAR 0 2
8112: PLUS
8113: PUSH
8114: LD_EXP 35
8118: PUSH
8119: LD_VAR 0 2
8123: PLUS
8124: PUSH
8125: LD_EXP 35
8129: PUSH
8130: LD_VAR 0 2
8134: PLUS
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
8142: LD_ADDR_OWVAR 35
8146: PUSH
8147: LD_INT 10
8149: PUSH
8150: LD_VAR 0 2
8154: MUL
8155: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
8156: LD_ADDR_OWVAR 29
8160: PUSH
8161: LD_INT 12
8163: PUSH
8164: LD_INT 10
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: ST_TO_ADDR
// result := CreateHuman ;
8171: LD_ADDR_VAR 0 1
8175: PUSH
8176: CALL_OW 44
8180: ST_TO_ADDR
// end ;
8181: LD_VAR 0 1
8185: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
8186: LD_INT 0
8188: PPUSH
8189: PPUSH
8190: PPUSH
// if not ape then
8191: LD_VAR 0 1
8195: NOT
8196: IFFALSE 8200
// exit ;
8198: GO 8325
// side := GetSide ( ape ) ;
8200: LD_ADDR_VAR 0 3
8204: PUSH
8205: LD_VAR 0 1
8209: PPUSH
8210: CALL_OW 255
8214: ST_TO_ADDR
// if not side then
8215: LD_VAR 0 3
8219: NOT
8220: IFFALSE 8274
// begin for i = 1 to apemanPos do
8222: LD_ADDR_VAR 0 4
8226: PUSH
8227: DOUBLE
8228: LD_INT 1
8230: DEC
8231: ST_TO_ADDR
8232: LD_EXP 33
8236: PUSH
8237: FOR_TO
8238: IFFALSE 8272
// if ape in apemanPos [ i ] then
8240: LD_VAR 0 1
8244: PUSH
8245: LD_EXP 33
8249: PUSH
8250: LD_VAR 0 4
8254: ARRAY
8255: IN
8256: IFFALSE 8270
// begin side := i ;
8258: LD_ADDR_VAR 0 3
8262: PUSH
8263: LD_VAR 0 4
8267: ST_TO_ADDR
// break ;
8268: GO 8272
// end ;
8270: GO 8237
8272: POP
8273: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
8274: LD_ADDR_EXP 33
8278: PUSH
8279: LD_EXP 33
8283: PPUSH
8284: LD_VAR 0 3
8288: PPUSH
8289: LD_EXP 33
8293: PUSH
8294: LD_VAR 0 3
8298: ARRAY
8299: PUSH
8300: LD_VAR 0 1
8304: DIFF
8305: PPUSH
8306: CALL_OW 1
8310: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
8311: LD_ADDR_EXP 30
8315: PUSH
8316: LD_EXP 30
8320: PUSH
8321: LD_INT 1
8323: MINUS
8324: ST_TO_ADDR
// end ; end_of_file
8325: LD_VAR 0 2
8329: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
8330: LD_VAR 0 1
8334: PPUSH
8335: CALL_OW 266
8339: PUSH
8340: LD_INT 0
8342: PUSH
8343: LD_INT 1
8345: PUSH
8346: EMPTY
8347: LIST
8348: LIST
8349: IN
8350: IFFALSE 8375
// SetBName ( b , @ & GetSide ( b ) ) ;
8352: LD_VAR 0 1
8356: PPUSH
8357: LD_STRING @
8359: PUSH
8360: LD_VAR 0 1
8364: PPUSH
8365: CALL_OW 255
8369: STR
8370: PPUSH
8371: CALL_OW 500
// if def_game_rules then
8375: LD_EXP 57
8379: IFFALSE 8416
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
8381: LD_VAR 0 1
8385: PPUSH
8386: LD_VAR 0 1
8390: PPUSH
8391: CALL_OW 266
8395: PPUSH
8396: LD_VAR 0 1
8400: PPUSH
8401: CALL_OW 255
8405: PPUSH
8406: LD_INT 0
8408: PPUSH
8409: LD_INT 1
8411: PPUSH
8412: CALL 18492 0 5
// end ;
8416: PPOPN 2
8418: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
8419: LD_VAR 0 1
8423: PPUSH
8424: CALL_OW 266
8428: PUSH
8429: LD_INT 0
8431: PUSH
8432: LD_INT 1
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: IN
8439: IFFALSE 8464
// SetBName ( b , @ & GetSide ( b ) ) ;
8441: LD_VAR 0 1
8445: PPUSH
8446: LD_STRING @
8448: PUSH
8449: LD_VAR 0 1
8453: PPUSH
8454: CALL_OW 255
8458: STR
8459: PPUSH
8460: CALL_OW 500
// if def_game_rules then
8464: LD_EXP 57
8468: IFFALSE 8507
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
8470: LD_VAR 0 1
8474: PPUSH
8475: LD_VAR 0 1
8479: PPUSH
8480: CALL_OW 266
8484: PPUSH
8485: LD_VAR 0 1
8489: PPUSH
8490: CALL_OW 255
8494: PPUSH
8495: LD_VAR 0 2
8499: PPUSH
8500: LD_INT 1
8502: PPUSH
8503: CALL 18492 0 5
// end ;
8507: PPOPN 3
8509: END
// on VehicleConstructed ( veh , fac ) do var side ;
8510: LD_INT 0
8512: PPUSH
// begin if GetControl ( veh ) = control_apeman then
8513: LD_VAR 0 1
8517: PPUSH
8518: CALL_OW 263
8522: PUSH
8523: LD_INT 5
8525: EQUAL
8526: IFFALSE 8668
// begin side := GetSide ( veh ) ;
8528: LD_ADDR_VAR 0 3
8532: PUSH
8533: LD_VAR 0 1
8537: PPUSH
8538: CALL_OW 255
8542: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
8543: LD_ADDR_EXP 33
8547: PUSH
8548: LD_EXP 33
8552: PPUSH
8553: LD_VAR 0 3
8557: PPUSH
8558: LD_EXP 33
8562: PUSH
8563: LD_VAR 0 3
8567: ARRAY
8568: PPUSH
8569: LD_INT 52
8571: PUSH
8572: EMPTY
8573: LIST
8574: PPUSH
8575: CALL_OW 72
8579: PUSH
8580: LD_INT 22
8582: PUSH
8583: LD_VAR 0 3
8587: PUSH
8588: EMPTY
8589: LIST
8590: LIST
8591: PUSH
8592: LD_INT 2
8594: PUSH
8595: LD_INT 33
8597: PUSH
8598: LD_INT 5
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: PUSH
8605: LD_INT 25
8607: PUSH
8608: LD_INT 12
8610: PUSH
8611: EMPTY
8612: LIST
8613: LIST
8614: PUSH
8615: LD_INT 25
8617: PUSH
8618: LD_INT 15
8620: PUSH
8621: EMPTY
8622: LIST
8623: LIST
8624: PUSH
8625: LD_INT 25
8627: PUSH
8628: LD_INT 16
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: PUSH
8635: LD_INT 25
8637: PUSH
8638: LD_INT 17
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: PUSH
8653: EMPTY
8654: LIST
8655: LIST
8656: PPUSH
8657: CALL_OW 69
8661: UNION
8662: PPUSH
8663: CALL_OW 1
8667: ST_TO_ADDR
// end ; end ;
8668: PPOPN 3
8670: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
8671: LD_VAR 0 1
8675: PPUSH
8676: LD_VAR 0 2
8680: PPUSH
8681: LD_VAR 0 3
8685: PPUSH
8686: LD_OWVAR 2
8690: PPUSH
8691: CALL 19170 0 4
8695: PPOPN 3
8697: END
// export function DE_Triggers ; begin
8698: LD_INT 0
8700: PPUSH
// disable ( 01 ) ;
8701: LD_INT 1
8703: DISABLE_MARKED
// disable ( 02 ) ;
8704: LD_INT 2
8706: DISABLE_MARKED
// disable ( 03 ) ;
8707: LD_INT 3
8709: DISABLE_MARKED
// disable ( 04 ) ;
8710: LD_INT 4
8712: DISABLE_MARKED
// disable ( 05 ) ;
8713: LD_INT 5
8715: DISABLE_MARKED
// disable ( 06 ) ;
8716: LD_INT 6
8718: DISABLE_MARKED
// disable ( 07 ) ;
8719: LD_INT 7
8721: DISABLE_MARKED
// disable ( 10 ) ;
8722: LD_INT 10
8724: DISABLE_MARKED
// disable ( 11 ) ;
8725: LD_INT 11
8727: DISABLE_MARKED
// disable ( 12 ) ;
8728: LD_INT 12
8730: DISABLE_MARKED
// disable ( 13 ) ;
8731: LD_INT 13
8733: DISABLE_MARKED
// disable ( 19 ) ;
8734: LD_INT 19
8736: DISABLE_MARKED
// disable ( 40 ) ;
8737: LD_INT 40
8739: DISABLE_MARKED
// disable ( 41 ) ;
8740: LD_INT 41
8742: DISABLE_MARKED
// disable ( 98 ) ;
8743: LD_INT 98
8745: DISABLE_MARKED
// disable ( 99 ) ;
8746: LD_INT 99
8748: DISABLE_MARKED
// disable ( 55 ) ;
8749: LD_INT 55
8751: DISABLE_MARKED
// disable ( 400 ) ;
8752: LD_INT 400
8754: DISABLE_MARKED
// disable ( 401 ) ;
8755: LD_INT 401
8757: DISABLE_MARKED
// end ; end_of_file
8758: LD_VAR 0 1
8762: RET
// function CanWinLoose ; begin
8763: LD_INT 0
8765: PPUSH
// Result := true ;
8766: LD_ADDR_VAR 0 1
8770: PUSH
8771: LD_INT 1
8773: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8774: CALL_OW 518
8778: PUSH
8779: CALL_OW 519
8783: PUSH
8784: LD_INT 0
8786: GREATER
8787: AND
8788: IFFALSE 8798
// Result := false ;
8790: LD_ADDR_VAR 0 1
8794: PUSH
8795: LD_INT 0
8797: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8798: CALL_OW 531
8802: PUSH
8803: CALL_OW 519
8807: PUSH
8808: LD_INT 1
8810: GREATER
8811: AND
8812: IFFALSE 8822
// Result := false ;
8814: LD_ADDR_VAR 0 1
8818: PUSH
8819: LD_INT 0
8821: ST_TO_ADDR
// end ;
8822: LD_VAR 0 1
8826: RET
// function HasPower ( i ) ; begin
8827: LD_INT 0
8829: PPUSH
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8830: LD_ADDR_VAR 0 2
8834: PUSH
8835: LD_INT 22
8837: PUSH
8838: LD_VAR 0 1
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: PUSH
8847: LD_INT 2
8849: PUSH
8850: LD_INT 21
8852: PUSH
8853: LD_INT 1
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: PUSH
8860: LD_INT 30
8862: PUSH
8863: LD_INT 0
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: PUSH
8870: LD_INT 30
8872: PUSH
8873: LD_INT 1
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: PUSH
8880: EMPTY
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PPUSH
8890: CALL_OW 69
8894: ST_TO_ADDR
// end ;
8895: LD_VAR 0 2
8899: RET
// function AlliedSides ( i , j ) ; begin
8900: LD_INT 0
8902: PPUSH
// Result := false ;
8903: LD_ADDR_VAR 0 3
8907: PUSH
8908: LD_INT 0
8910: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8911: LD_VAR 0 1
8915: PPUSH
8916: LD_VAR 0 2
8920: PPUSH
8921: CALL_OW 81
8925: PUSH
8926: LD_INT 1
8928: EQUAL
8929: PUSH
8930: LD_VAR 0 2
8934: PPUSH
8935: LD_VAR 0 1
8939: PPUSH
8940: CALL_OW 81
8944: PUSH
8945: LD_INT 1
8947: EQUAL
8948: AND
8949: PUSH
8950: LD_VAR 0 1
8954: PPUSH
8955: CALL_OW 83
8959: AND
8960: PUSH
8961: LD_VAR 0 2
8965: PPUSH
8966: CALL_OW 83
8970: AND
8971: IFFALSE 8981
// Result := true ;
8973: LD_ADDR_VAR 0 3
8977: PUSH
8978: LD_INT 1
8980: ST_TO_ADDR
// end ;
8981: LD_VAR 0 3
8985: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
8986: CALL 8763 0 0
8990: IFFALSE 8999
8992: GO 8994
8994: DISABLE
// YouLostInMultiplayer ;
8995: CALL_OW 107
8999: END
// every 0 0$3 trigger CanWinLoose marked 401 do
9000: CALL 8763 0 0
9004: IFFALSE 9028
9006: GO 9008
9008: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
9009: LD_EXP 19
9013: PUSH
9014: LD_OWVAR 2
9018: ARRAY
9019: PPUSH
9020: CALL 19212 0 1
// YouWinInMultiplayer ;
9024: CALL_OW 106
// end ;
9028: END
// every 0 0$3 marked 98 do var i , CanWin ;
9029: GO 9031
9031: DISABLE
9032: LD_INT 0
9034: PPUSH
9035: PPUSH
// begin if not HasPower ( your_side ) then
9036: LD_OWVAR 2
9040: PPUSH
9041: CALL 8827 0 1
9045: NOT
9046: IFFALSE 9057
// begin Multiplayer_Loose_Message ;
9048: CALL_OW 521
// enable ( 400 ) ;
9052: LD_INT 400
9054: ENABLE_MARKED
// end else
9055: GO 9190
// begin CanWin := true ;
9057: LD_ADDR_VAR 0 2
9061: PUSH
9062: LD_INT 1
9064: ST_TO_ADDR
// for i := 1 to 8 do
9065: LD_ADDR_VAR 0 1
9069: PUSH
9070: DOUBLE
9071: LD_INT 1
9073: DEC
9074: ST_TO_ADDR
9075: LD_INT 8
9077: PUSH
9078: FOR_TO
9079: IFFALSE 9176
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9081: LD_EXP 18
9085: PUSH
9086: LD_VAR 0 1
9090: ARRAY
9091: PUSH
9092: LD_VAR 0 1
9096: PPUSH
9097: CALL_OW 108
9101: AND
9102: PUSH
9103: LD_VAR 0 1
9107: PUSH
9108: LD_OWVAR 2
9112: NONEQUAL
9113: AND
9114: IFFALSE 9174
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
9116: LD_EXP 16
9120: PUSH
9121: LD_VAR 0 1
9125: ARRAY
9126: NOT
9127: PUSH
9128: LD_EXP 16
9132: PUSH
9133: LD_VAR 0 1
9137: ARRAY
9138: PUSH
9139: LD_EXP 16
9143: PUSH
9144: LD_OWVAR 2
9148: ARRAY
9149: NONEQUAL
9150: OR
9151: IFFALSE 9174
// if HasPower ( i ) then
9153: LD_VAR 0 1
9157: PPUSH
9158: CALL 8827 0 1
9162: IFFALSE 9174
// begin CanWin := false ;
9164: LD_ADDR_VAR 0 2
9168: PUSH
9169: LD_INT 0
9171: ST_TO_ADDR
// break ;
9172: GO 9176
// end ;
9174: GO 9078
9176: POP
9177: POP
// if CanWin then
9178: LD_VAR 0 2
9182: IFFALSE 9189
// enable ( 401 ) else
9184: LD_INT 401
9186: ENABLE_MARKED
9187: GO 9190
// enable ;
9189: ENABLE
// end ; end ;
9190: PPOPN 2
9192: END
// every 0 0$3 marked 99 do var i , CanWin ;
9193: GO 9195
9195: DISABLE
9196: LD_INT 0
9198: PPUSH
9199: PPUSH
// begin if not HasPower ( your_side ) then
9200: LD_OWVAR 2
9204: PPUSH
9205: CALL 8827 0 1
9209: NOT
9210: IFFALSE 9221
// begin Multiplayer_Loose_Message ;
9212: CALL_OW 521
// enable ( 400 ) ;
9216: LD_INT 400
9218: ENABLE_MARKED
// end else
9219: GO 9334
// begin CanWin := true ;
9221: LD_ADDR_VAR 0 2
9225: PUSH
9226: LD_INT 1
9228: ST_TO_ADDR
// for i := 1 to 8 do
9229: LD_ADDR_VAR 0 1
9233: PUSH
9234: DOUBLE
9235: LD_INT 1
9237: DEC
9238: ST_TO_ADDR
9239: LD_INT 8
9241: PUSH
9242: FOR_TO
9243: IFFALSE 9320
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9245: LD_EXP 18
9249: PUSH
9250: LD_VAR 0 1
9254: ARRAY
9255: PUSH
9256: LD_VAR 0 1
9260: PPUSH
9261: CALL_OW 108
9265: AND
9266: PUSH
9267: LD_VAR 0 1
9271: PUSH
9272: LD_OWVAR 2
9276: NONEQUAL
9277: AND
9278: IFFALSE 9318
// if not AlliedSides ( i , your_side ) then
9280: LD_VAR 0 1
9284: PPUSH
9285: LD_OWVAR 2
9289: PPUSH
9290: CALL 8900 0 2
9294: NOT
9295: IFFALSE 9318
// if HasPower ( i ) then
9297: LD_VAR 0 1
9301: PPUSH
9302: CALL 8827 0 1
9306: IFFALSE 9318
// begin CanWin := false ;
9308: LD_ADDR_VAR 0 2
9312: PUSH
9313: LD_INT 0
9315: ST_TO_ADDR
// break ;
9316: GO 9320
// end ;
9318: GO 9242
9320: POP
9321: POP
// if CanWin then
9322: LD_VAR 0 2
9326: IFFALSE 9333
// enable ( 401 ) else
9328: LD_INT 401
9330: ENABLE_MARKED
9331: GO 9334
// enable ;
9333: ENABLE
// end ; end ; end_of_file
9334: PPOPN 2
9336: END
// var time ; export lidi , krabice , opoce ; export cper , cperiode ; var depot1 , depot2 ; var vlajka1 , vlajka2 ; export depotpositions , areas ; var podvozky , zbrane ; export pos1side , pos2side ; var pos1base , pos2base ; var left_score , right_score ; export debug , ctf ; export mp_sides_teams_ , mp_sides_nations_ , mp_sides_positions_ , mp_sides_players_counts_ ; var cft_01 , cft_02 , cft_03 , cft_04 , cft_05 , cft_06 , cft_07 ; export nonctf_10 , nonctf_11 , nonctf_12 , nonctf_13 ; var stmp , stmp2 , cl ; export function starting_ctf ; begin
9337: LD_INT 0
9339: PPUSH
// cft_01 = 01 ;
9340: LD_ADDR_LOC 24
9344: PUSH
9345: LD_INT 1
9347: ST_TO_ADDR
// cft_02 = 02 ;
9348: LD_ADDR_LOC 25
9352: PUSH
9353: LD_INT 2
9355: ST_TO_ADDR
// cft_03 = 03 ;
9356: LD_ADDR_LOC 26
9360: PUSH
9361: LD_INT 3
9363: ST_TO_ADDR
// cft_04 = 04 ;
9364: LD_ADDR_LOC 27
9368: PUSH
9369: LD_INT 4
9371: ST_TO_ADDR
// cft_05 = 05 ;
9372: LD_ADDR_LOC 28
9376: PUSH
9377: LD_INT 5
9379: ST_TO_ADDR
// cft_06 = 06 ;
9380: LD_ADDR_LOC 29
9384: PUSH
9385: LD_INT 6
9387: ST_TO_ADDR
// cft_07 = 07 ;
9388: LD_ADDR_LOC 30
9392: PUSH
9393: LD_INT 7
9395: ST_TO_ADDR
// nonctf_10 = 10 ;
9396: LD_ADDR_EXP 52
9400: PUSH
9401: LD_INT 10
9403: ST_TO_ADDR
// nonctf_11 = 11 ;
9404: LD_ADDR_EXP 53
9408: PUSH
9409: LD_INT 11
9411: ST_TO_ADDR
// nonctf_12 = 12 ;
9412: LD_ADDR_EXP 54
9416: PUSH
9417: LD_INT 12
9419: ST_TO_ADDR
// nonctf_13 = 13 ;
9420: LD_ADDR_EXP 55
9424: PUSH
9425: LD_INT 13
9427: ST_TO_ADDR
// disable ( cft_01 ) ;
9428: LD_LOC 24
9432: DISABLE_MARKED
// disable ( cft_02 ) ;
9433: LD_LOC 25
9437: DISABLE_MARKED
// disable ( cft_03 ) ;
9438: LD_LOC 26
9442: DISABLE_MARKED
// disable ( cft_04 ) ;
9443: LD_LOC 27
9447: DISABLE_MARKED
// disable ( cft_05 ) ;
9448: LD_LOC 28
9452: DISABLE_MARKED
// disable ( cft_06 ) ;
9453: LD_LOC 29
9457: DISABLE_MARKED
// disable ( cft_07 ) ;
9458: LD_LOC 30
9462: DISABLE_MARKED
// disable ( nonctf_10 ) ;
9463: LD_EXP 52
9467: DISABLE_MARKED
// disable ( nonctf_11 ) ;
9468: LD_EXP 53
9472: DISABLE_MARKED
// disable ( nonctf_12 ) ;
9473: LD_EXP 54
9477: DISABLE_MARKED
// disable ( nonctf_13 ) ;
9478: LD_EXP 55
9482: DISABLE_MARKED
// debug = false ;
9483: LD_ADDR_EXP 46
9487: PUSH
9488: LD_INT 0
9490: ST_TO_ADDR
// if not multiplayer then
9491: LD_OWVAR 4
9495: NOT
9496: IFFALSE 9656
// begin mp_sides_teams_ = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9498: LD_ADDR_EXP 48
9502: PUSH
9503: LD_INT 0
9505: PUSH
9506: LD_INT 0
9508: PUSH
9509: LD_INT 0
9511: PUSH
9512: LD_INT 0
9514: PUSH
9515: LD_INT 0
9517: PUSH
9518: LD_INT 0
9520: PUSH
9521: LD_INT 0
9523: PUSH
9524: LD_INT 0
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: ST_TO_ADDR
// mp_sides_nations_ = [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9537: LD_ADDR_EXP 49
9541: PUSH
9542: LD_INT 1
9544: PUSH
9545: LD_INT 2
9547: PUSH
9548: LD_INT 0
9550: PUSH
9551: LD_INT 0
9553: PUSH
9554: LD_INT 0
9556: PUSH
9557: LD_INT 0
9559: PUSH
9560: LD_INT 0
9562: PUSH
9563: LD_INT 0
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: ST_TO_ADDR
// mp_sides_positions_ = [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9576: LD_ADDR_EXP 50
9580: PUSH
9581: LD_INT 1
9583: PUSH
9584: LD_INT 2
9586: PUSH
9587: LD_INT 0
9589: PUSH
9590: LD_INT 0
9592: PUSH
9593: LD_INT 0
9595: PUSH
9596: LD_INT 0
9598: PUSH
9599: LD_INT 0
9601: PUSH
9602: LD_INT 0
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: ST_TO_ADDR
// mp_sides_players_counts_ = [ 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9615: LD_ADDR_EXP 51
9619: PUSH
9620: LD_INT 1
9622: PUSH
9623: LD_INT 1
9625: PUSH
9626: LD_INT 0
9628: PUSH
9629: LD_INT 0
9631: PUSH
9632: LD_INT 0
9634: PUSH
9635: LD_INT 0
9637: PUSH
9638: LD_INT 0
9640: PUSH
9641: LD_INT 0
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: ST_TO_ADDR
// end else
9654: GO 9696
// begin mp_sides_teams_ = mp_sides_teams ;
9656: LD_ADDR_EXP 48
9660: PUSH
9661: LD_OWVAR 15
9665: ST_TO_ADDR
// mp_sides_nations_ = mp_sides_nations ;
9666: LD_ADDR_EXP 49
9670: PUSH
9671: LD_OWVAR 16
9675: ST_TO_ADDR
// mp_sides_positions_ = mp_sides_positions ;
9676: LD_ADDR_EXP 50
9680: PUSH
9681: LD_OWVAR 17
9685: ST_TO_ADDR
// mp_sides_players_counts_ = mp_sides_players_counts ;
9686: LD_ADDR_EXP 51
9690: PUSH
9691: LD_OWVAR 18
9695: ST_TO_ADDR
// end ; if debug then
9696: LD_EXP 46
9700: IFFALSE 9782
// begin debuglog ( [ side , your_side ] ) ;
9702: LD_STRING side
9704: PUSH
9705: LD_OWVAR 2
9709: PUSH
9710: EMPTY
9711: LIST
9712: LIST
9713: PPUSH
9714: CALL_OW 359
// debuglog ( [ teams , mp_sides_teams_ ] ) ;
9718: LD_STRING teams
9720: PUSH
9721: LD_EXP 48
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: PPUSH
9730: CALL_OW 359
// debuglog ( [ nations , mp_sides_nations_ ] ) ;
9734: LD_STRING nations
9736: PUSH
9737: LD_EXP 49
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PPUSH
9746: CALL_OW 359
// debuglog ( [ positions , mp_sides_positions_ ] ) ;
9750: LD_STRING positions
9752: PUSH
9753: LD_EXP 50
9757: PUSH
9758: EMPTY
9759: LIST
9760: LIST
9761: PPUSH
9762: CALL_OW 359
// debuglog ( [ pl. counts , mp_sides_players_counts_ ] ) ;
9766: LD_STRING pl. counts
9768: PUSH
9769: LD_EXP 51
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: PPUSH
9778: CALL_OW 359
// end ; depotpositions = [ [ 34 , 60 , 1 ] , [ 185 , 60 , 4 ] ] ;
9782: LD_ADDR_EXP 42
9786: PUSH
9787: LD_INT 34
9789: PUSH
9790: LD_INT 60
9792: PUSH
9793: LD_INT 1
9795: PUSH
9796: EMPTY
9797: LIST
9798: LIST
9799: LIST
9800: PUSH
9801: LD_INT 185
9803: PUSH
9804: LD_INT 60
9806: PUSH
9807: LD_INT 4
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: LIST
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: ST_TO_ADDR
// areas = [ vlevo , vpravo ] ;
9819: LD_ADDR_EXP 43
9823: PUSH
9824: LD_INT 2
9826: PUSH
9827: LD_INT 3
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: ST_TO_ADDR
// if mp_game_type = 3 then
9834: LD_OWVAR 6
9838: PUSH
9839: LD_INT 3
9841: EQUAL
9842: IFFALSE 9850
// begin other_game ;
9844: CALL 12922 0 0
// exit ;
9848: GO 11298
// end ; ctf = true ;
9850: LD_ADDR_EXP 47
9854: PUSH
9855: LD_INT 1
9857: ST_TO_ADDR
// enable ( cft_01 ) ;
9858: LD_LOC 24
9862: ENABLE_MARKED
// enable ( cft_02 ) ;
9863: LD_LOC 25
9867: ENABLE_MARKED
// enable ( cft_05 ) ;
9868: LD_LOC 28
9872: ENABLE_MARKED
// enable ( cft_06 ) ;
9873: LD_LOC 29
9877: ENABLE_MARKED
// enable ( cft_07 ) ;
9878: LD_LOC 30
9882: ENABLE_MARKED
// podvozky = [ us_medium_wheeled , ar_medium_trike , ru_medium_wheeled ] ;
9883: LD_ADDR_LOC 18
9887: PUSH
9888: LD_INT 2
9890: PUSH
9891: LD_INT 13
9893: PUSH
9894: LD_INT 21
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: LIST
9901: ST_TO_ADDR
// zbrane = [ us_cargo_bay , ar_cargo_bay , ru_cargo_bay ] ;
9902: LD_ADDR_LOC 19
9906: PUSH
9907: LD_INT 12
9909: PUSH
9910: LD_INT 32
9912: PUSH
9913: LD_INT 51
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: LIST
9920: ST_TO_ADDR
// left_score = 0 ;
9921: LD_ADDR_LOC 22
9925: PUSH
9926: LD_INT 0
9928: ST_TO_ADDR
// right_score = 0 ;
9929: LD_ADDR_LOC 23
9933: PUSH
9934: LD_INT 0
9936: ST_TO_ADDR
// if multiplayer then
9937: LD_OWVAR 4
9941: IFFALSE 9997
// begin lidi = getmultiplayersetting ( 1 ) ;
9943: LD_ADDR_EXP 37
9947: PUSH
9948: LD_INT 1
9950: PPUSH
9951: CALL_OW 426
9955: ST_TO_ADDR
// krabice = getmultiplayersetting ( 2 ) ;
9956: LD_ADDR_EXP 38
9960: PUSH
9961: LD_INT 2
9963: PPUSH
9964: CALL_OW 426
9968: ST_TO_ADDR
// opoce = getmultiplayersetting ( 3 ) ;
9969: LD_ADDR_EXP 39
9973: PUSH
9974: LD_INT 3
9976: PPUSH
9977: CALL_OW 426
9981: ST_TO_ADDR
// time = getmultiplayersetting ( 4 ) ;
9982: LD_ADDR_LOC 13
9986: PUSH
9987: LD_INT 4
9989: PPUSH
9990: CALL_OW 426
9994: ST_TO_ADDR
// end else
9995: GO 10029
// begin lidi = 1 ;
9997: LD_ADDR_EXP 37
10001: PUSH
10002: LD_INT 1
10004: ST_TO_ADDR
// krabice = 1 ;
10005: LD_ADDR_EXP 38
10009: PUSH
10010: LD_INT 1
10012: ST_TO_ADDR
// opoce = 3 ;
10013: LD_ADDR_EXP 39
10017: PUSH
10018: LD_INT 3
10020: ST_TO_ADDR
// time = 2 ;
10021: LD_ADDR_LOC 13
10025: PUSH
10026: LD_INT 2
10028: ST_TO_ADDR
// end ; case lidi of 0 :
10029: LD_EXP 37
10033: PUSH
10034: LD_INT 0
10036: DOUBLE
10037: EQUAL
10038: IFTRUE 10042
10040: GO 10053
10042: POP
// lidi = 9 ; 1 :
10043: LD_ADDR_EXP 37
10047: PUSH
10048: LD_INT 9
10050: ST_TO_ADDR
10051: GO 10130
10053: LD_INT 1
10055: DOUBLE
10056: EQUAL
10057: IFTRUE 10061
10059: GO 10072
10061: POP
// lidi = 13 ; 2 :
10062: LD_ADDR_EXP 37
10066: PUSH
10067: LD_INT 13
10069: ST_TO_ADDR
10070: GO 10130
10072: LD_INT 2
10074: DOUBLE
10075: EQUAL
10076: IFTRUE 10080
10078: GO 10091
10080: POP
// lidi = 19 ; 3 :
10081: LD_ADDR_EXP 37
10085: PUSH
10086: LD_INT 19
10088: ST_TO_ADDR
10089: GO 10130
10091: LD_INT 3
10093: DOUBLE
10094: EQUAL
10095: IFTRUE 10099
10097: GO 10110
10099: POP
// lidi = 23 ; 4 :
10100: LD_ADDR_EXP 37
10104: PUSH
10105: LD_INT 23
10107: ST_TO_ADDR
10108: GO 10130
10110: LD_INT 4
10112: DOUBLE
10113: EQUAL
10114: IFTRUE 10118
10116: GO 10129
10118: POP
// lidi = 29 ; end ;
10119: LD_ADDR_EXP 37
10123: PUSH
10124: LD_INT 29
10126: ST_TO_ADDR
10127: GO 10130
10129: POP
// case krabice of 0 :
10130: LD_EXP 38
10134: PUSH
10135: LD_INT 0
10137: DOUBLE
10138: EQUAL
10139: IFTRUE 10143
10141: GO 10154
10143: POP
// cperiode = 1 1$30 ; 1 :
10144: LD_ADDR_EXP 41
10148: PUSH
10149: LD_INT 3150
10151: ST_TO_ADDR
10152: GO 10193
10154: LD_INT 1
10156: DOUBLE
10157: EQUAL
10158: IFTRUE 10162
10160: GO 10173
10162: POP
// cperiode = 1 1$00 ; 2 :
10163: LD_ADDR_EXP 41
10167: PUSH
10168: LD_INT 2100
10170: ST_TO_ADDR
10171: GO 10193
10173: LD_INT 2
10175: DOUBLE
10176: EQUAL
10177: IFTRUE 10181
10179: GO 10192
10181: POP
// cperiode = 0 0$30 ; end ;
10182: LD_ADDR_EXP 41
10186: PUSH
10187: LD_INT 1050
10189: ST_TO_ADDR
10190: GO 10193
10192: POP
// cper = 0 0$10 ;
10193: LD_ADDR_EXP 40
10197: PUSH
10198: LD_INT 350
10200: ST_TO_ADDR
// case opoce of 0 :
10201: LD_EXP 39
10205: PUSH
10206: LD_INT 0
10208: DOUBLE
10209: EQUAL
10210: IFTRUE 10214
10212: GO 10225
10214: POP
// opoce = 0 ; 1 :
10215: LD_ADDR_EXP 39
10219: PUSH
10220: LD_INT 0
10222: ST_TO_ADDR
10223: GO 10340
10225: LD_INT 1
10227: DOUBLE
10228: EQUAL
10229: IFTRUE 10233
10231: GO 10244
10233: POP
// opoce = 3 ; 2 :
10234: LD_ADDR_EXP 39
10238: PUSH
10239: LD_INT 3
10241: ST_TO_ADDR
10242: GO 10340
10244: LD_INT 2
10246: DOUBLE
10247: EQUAL
10248: IFTRUE 10252
10250: GO 10263
10252: POP
// opoce = 7 ; 3 :
10253: LD_ADDR_EXP 39
10257: PUSH
10258: LD_INT 7
10260: ST_TO_ADDR
10261: GO 10340
10263: LD_INT 3
10265: DOUBLE
10266: EQUAL
10267: IFTRUE 10271
10269: GO 10282
10271: POP
// opoce = 11 ; 4 :
10272: LD_ADDR_EXP 39
10276: PUSH
10277: LD_INT 11
10279: ST_TO_ADDR
10280: GO 10340
10282: LD_INT 4
10284: DOUBLE
10285: EQUAL
10286: IFTRUE 10290
10288: GO 10301
10290: POP
// opoce = 15 ; 5 :
10291: LD_ADDR_EXP 39
10295: PUSH
10296: LD_INT 15
10298: ST_TO_ADDR
10299: GO 10340
10301: LD_INT 5
10303: DOUBLE
10304: EQUAL
10305: IFTRUE 10309
10307: GO 10320
10309: POP
// opoce = 19 ; 6 :
10310: LD_ADDR_EXP 39
10314: PUSH
10315: LD_INT 19
10317: ST_TO_ADDR
10318: GO 10340
10320: LD_INT 6
10322: DOUBLE
10323: EQUAL
10324: IFTRUE 10328
10326: GO 10339
10328: POP
// opoce = 23 ; end ;
10329: LD_ADDR_EXP 39
10333: PUSH
10334: LD_INT 23
10336: ST_TO_ADDR
10337: GO 10340
10339: POP
// case time of 0 :
10340: LD_LOC 13
10344: PUSH
10345: LD_INT 0
10347: DOUBLE
10348: EQUAL
10349: IFTRUE 10353
10351: GO 10368
10353: POP
// time = 30 * 60 ; 1 :
10354: LD_ADDR_LOC 13
10358: PUSH
10359: LD_INT 30
10361: PUSH
10362: LD_INT 60
10364: MUL
10365: ST_TO_ADDR
10366: GO 10484
10368: LD_INT 1
10370: DOUBLE
10371: EQUAL
10372: IFTRUE 10376
10374: GO 10391
10376: POP
// time = 40 * 60 ; 2 :
10377: LD_ADDR_LOC 13
10381: PUSH
10382: LD_INT 40
10384: PUSH
10385: LD_INT 60
10387: MUL
10388: ST_TO_ADDR
10389: GO 10484
10391: LD_INT 2
10393: DOUBLE
10394: EQUAL
10395: IFTRUE 10399
10397: GO 10414
10399: POP
// time = 50 * 60 ; 3 :
10400: LD_ADDR_LOC 13
10404: PUSH
10405: LD_INT 50
10407: PUSH
10408: LD_INT 60
10410: MUL
10411: ST_TO_ADDR
10412: GO 10484
10414: LD_INT 3
10416: DOUBLE
10417: EQUAL
10418: IFTRUE 10422
10420: GO 10437
10422: POP
// time = 60 * 60 ; 4 :
10423: LD_ADDR_LOC 13
10427: PUSH
10428: LD_INT 60
10430: PUSH
10431: LD_INT 60
10433: MUL
10434: ST_TO_ADDR
10435: GO 10484
10437: LD_INT 4
10439: DOUBLE
10440: EQUAL
10441: IFTRUE 10445
10443: GO 10460
10445: POP
// time = 90 * 60 ; 5 :
10446: LD_ADDR_LOC 13
10450: PUSH
10451: LD_INT 90
10453: PUSH
10454: LD_INT 60
10456: MUL
10457: ST_TO_ADDR
10458: GO 10484
10460: LD_INT 5
10462: DOUBLE
10463: EQUAL
10464: IFTRUE 10468
10466: GO 10483
10468: POP
// time = 120 * 60 ; end ;
10469: LD_ADDR_LOC 13
10473: PUSH
10474: LD_INT 120
10476: PUSH
10477: LD_INT 60
10479: MUL
10480: ST_TO_ADDR
10481: GO 10484
10483: POP
// enable ( cft_03 ) ;
10484: LD_LOC 26
10488: ENABLE_MARKED
// refresh ;
10489: CALL 11303 0 0
// for stmp = 1 to 8 do
10493: LD_ADDR_LOC 31
10497: PUSH
10498: DOUBLE
10499: LD_INT 1
10501: DEC
10502: ST_TO_ADDR
10503: LD_INT 8
10505: PUSH
10506: FOR_TO
10507: IFFALSE 10876
// if mp_sides_nations_ [ stmp ] then
10509: LD_EXP 49
10513: PUSH
10514: LD_LOC 31
10518: ARRAY
10519: IFFALSE 10874
// begin if mp_sides_positions_ [ stmp ] = 1 then
10521: LD_EXP 50
10525: PUSH
10526: LD_LOC 31
10530: ARRAY
10531: PUSH
10532: LD_INT 1
10534: EQUAL
10535: IFFALSE 10549
// pos1side = stmp else
10537: LD_ADDR_EXP 44
10541: PUSH
10542: LD_LOC 31
10546: ST_TO_ADDR
10547: GO 10559
// pos2side = stmp ;
10549: LD_ADDR_EXP 45
10553: PUSH
10554: LD_LOC 31
10558: ST_TO_ADDR
// uc_side = stmp ;
10559: LD_ADDR_OWVAR 20
10563: PUSH
10564: LD_LOC 31
10568: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ stmp ] ;
10569: LD_ADDR_OWVAR 21
10573: PUSH
10574: LD_EXP 49
10578: PUSH
10579: LD_LOC 31
10583: ARRAY
10584: ST_TO_ADDR
// bc_type = b_depot ;
10585: LD_ADDR_OWVAR 42
10589: PUSH
10590: LD_INT 0
10592: ST_TO_ADDR
// bc_level = 1 ;
10593: LD_ADDR_OWVAR 43
10597: PUSH
10598: LD_INT 1
10600: ST_TO_ADDR
// createandplacebuildingxyd ( depotpositions [ mp_sides_positions_ [ stmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 2 ] , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 3 ] ) ;
10601: LD_EXP 42
10605: PUSH
10606: LD_EXP 50
10610: PUSH
10611: LD_LOC 31
10615: ARRAY
10616: ARRAY
10617: PUSH
10618: LD_INT 1
10620: ARRAY
10621: PPUSH
10622: LD_EXP 42
10626: PUSH
10627: LD_EXP 50
10631: PUSH
10632: LD_LOC 31
10636: ARRAY
10637: ARRAY
10638: PUSH
10639: LD_INT 2
10641: ARRAY
10642: PPUSH
10643: LD_EXP 42
10647: PUSH
10648: LD_EXP 50
10652: PUSH
10653: LD_LOC 31
10657: ARRAY
10658: ARRAY
10659: PUSH
10660: LD_INT 3
10662: ARRAY
10663: PPUSH
10664: CALL_OW 47
// setbattleflag ( stmp , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 2 ] , [ [ bfo_defend_bonus_human , 150 ] , [ bfo_defend_bonus_vehicle , 10 ] , [ bfo_defend_bonus_building , 0 ] , [ bfo_range , 17 ] , [ bfo_height , 100 ] ] ) ;
10668: LD_LOC 31
10672: PPUSH
10673: LD_EXP 42
10677: PUSH
10678: LD_EXP 50
10682: PUSH
10683: LD_LOC 31
10687: ARRAY
10688: ARRAY
10689: PUSH
10690: LD_INT 1
10692: ARRAY
10693: PPUSH
10694: LD_EXP 42
10698: PUSH
10699: LD_EXP 50
10703: PUSH
10704: LD_LOC 31
10708: ARRAY
10709: ARRAY
10710: PUSH
10711: LD_INT 2
10713: ARRAY
10714: PPUSH
10715: LD_INT 1
10717: PUSH
10718: LD_INT 150
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: PUSH
10725: LD_INT 2
10727: PUSH
10728: LD_INT 10
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: PUSH
10735: LD_INT 3
10737: PUSH
10738: LD_INT 0
10740: PUSH
10741: EMPTY
10742: LIST
10743: LIST
10744: PUSH
10745: LD_INT 10
10747: PUSH
10748: LD_INT 17
10750: PUSH
10751: EMPTY
10752: LIST
10753: LIST
10754: PUSH
10755: LD_INT 20
10757: PUSH
10758: LD_INT 100
10760: PUSH
10761: EMPTY
10762: LIST
10763: LIST
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: PPUSH
10772: CALL_OW 418
// cl = class_engineer ;
10776: LD_ADDR_LOC 33
10780: PUSH
10781: LD_INT 2
10783: ST_TO_ADDR
// for stmp2 = 1 to lidi do
10784: LD_ADDR_LOC 32
10788: PUSH
10789: DOUBLE
10790: LD_INT 1
10792: DEC
10793: ST_TO_ADDR
10794: LD_EXP 37
10798: PUSH
10799: FOR_TO
10800: IFFALSE 10872
// begin if stmp2 >= lidi / 2 then
10802: LD_LOC 32
10806: PUSH
10807: LD_EXP 37
10811: PUSH
10812: LD_INT 2
10814: DIVREAL
10815: GREATEREQUAL
10816: IFFALSE 10826
// cl = class_soldier ;
10818: LD_ADDR_LOC 33
10822: PUSH
10823: LD_INT 1
10825: ST_TO_ADDR
// preparehuman ( 0 , cl , 1 ) ;
10826: LD_INT 0
10828: PPUSH
10829: LD_LOC 33
10833: PPUSH
10834: LD_INT 1
10836: PPUSH
10837: CALL_OW 380
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ stmp ] ] , false ) ;
10841: CALL_OW 44
10845: PPUSH
10846: LD_EXP 43
10850: PUSH
10851: LD_EXP 50
10855: PUSH
10856: LD_LOC 31
10860: ARRAY
10861: ARRAY
10862: PPUSH
10863: LD_INT 0
10865: PPUSH
10866: CALL_OW 49
// end ;
10870: GO 10799
10872: POP
10873: POP
// end ;
10874: GO 10506
10876: POP
10877: POP
// depot1 = filterunitsinarea ( vlevo , [ [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
10878: LD_ADDR_LOC 14
10882: PUSH
10883: LD_INT 2
10885: PPUSH
10886: LD_INT 21
10888: PUSH
10889: LD_INT 3
10891: PUSH
10892: EMPTY
10893: LIST
10894: LIST
10895: PUSH
10896: LD_INT 30
10898: PUSH
10899: LD_INT 0
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: PUSH
10906: EMPTY
10907: LIST
10908: LIST
10909: PPUSH
10910: CALL_OW 70
10914: PUSH
10915: LD_INT 1
10917: ARRAY
10918: ST_TO_ADDR
// depot2 = filterunitsinarea ( vpravo , [ [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
10919: LD_ADDR_LOC 15
10923: PUSH
10924: LD_INT 3
10926: PPUSH
10927: LD_INT 21
10929: PUSH
10930: LD_INT 3
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: PUSH
10937: LD_INT 30
10939: PUSH
10940: LD_INT 0
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: PPUSH
10951: CALL_OW 70
10955: PUSH
10956: LD_INT 1
10958: ARRAY
10959: ST_TO_ADDR
// pos1base = getbase ( depot1 ) ;
10960: LD_ADDR_LOC 20
10964: PUSH
10965: LD_LOC 14
10969: PPUSH
10970: CALL_OW 274
10974: ST_TO_ADDR
// pos2base = getbase ( depot2 ) ;
10975: LD_ADDR_LOC 21
10979: PUSH
10980: LD_LOC 15
10984: PPUSH
10985: CALL_OW 274
10989: ST_TO_ADDR
// uc_side = 0 ;
10990: LD_ADDR_OWVAR 20
10994: PUSH
10995: LD_INT 0
10997: ST_TO_ADDR
// uc_nation = nation_nature ;
10998: LD_ADDR_OWVAR 21
11002: PUSH
11003: LD_INT 0
11005: ST_TO_ADDR
// for stmp = 1 to opoce do
11006: LD_ADDR_LOC 31
11010: PUSH
11011: DOUBLE
11012: LD_INT 1
11014: DEC
11015: ST_TO_ADDR
11016: LD_EXP 39
11020: PUSH
11021: FOR_TO
11022: IFFALSE 11054
// begin preparehuman ( 0 , class_apeman , 0 ) ;
11024: LD_INT 0
11026: PPUSH
11027: LD_INT 12
11029: PPUSH
11030: LD_INT 0
11032: PPUSH
11033: CALL_OW 380
// placeunitarea ( createhuman , les , false ) ;
11037: CALL_OW 44
11041: PPUSH
11042: LD_INT 4
11044: PPUSH
11045: LD_INT 0
11047: PPUSH
11048: CALL_OW 49
// end ;
11052: GO 11021
11054: POP
11055: POP
// uc_side = pos2side ;
11056: LD_ADDR_OWVAR 20
11060: PUSH
11061: LD_EXP 45
11065: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos2side ] ;
11066: LD_ADDR_OWVAR 21
11070: PUSH
11071: LD_EXP 49
11075: PUSH
11076: LD_EXP 45
11080: ARRAY
11081: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11082: LD_ADDR_OWVAR 37
11086: PUSH
11087: LD_LOC 18
11091: PUSH
11092: LD_OWVAR 21
11096: ARRAY
11097: ST_TO_ADDR
// vc_control = control_manual ;
11098: LD_ADDR_OWVAR 38
11102: PUSH
11103: LD_INT 1
11105: ST_TO_ADDR
// vc_engine = engine_siberite ;
11106: LD_ADDR_OWVAR 39
11110: PUSH
11111: LD_INT 3
11113: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
11114: LD_ADDR_OWVAR 40
11118: PUSH
11119: LD_LOC 19
11123: PUSH
11124: LD_OWVAR 21
11128: ARRAY
11129: ST_TO_ADDR
// vlajka1 = createvehicle ;
11130: LD_ADDR_LOC 16
11134: PUSH
11135: CALL_OW 45
11139: ST_TO_ADDR
// placeunitxy ( vlajka1 , 76 , 60 , false ) ;
11140: LD_LOC 16
11144: PPUSH
11145: LD_INT 76
11147: PPUSH
11148: LD_INT 60
11150: PPUSH
11151: LD_INT 0
11153: PPUSH
11154: CALL_OW 48
// uc_side = pos1side ;
11158: LD_ADDR_OWVAR 20
11162: PUSH
11163: LD_EXP 44
11167: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos1side ] ;
11168: LD_ADDR_OWVAR 21
11172: PUSH
11173: LD_EXP 49
11177: PUSH
11178: LD_EXP 44
11182: ARRAY
11183: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11184: LD_ADDR_OWVAR 37
11188: PUSH
11189: LD_LOC 18
11193: PUSH
11194: LD_OWVAR 21
11198: ARRAY
11199: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
11200: LD_ADDR_OWVAR 40
11204: PUSH
11205: LD_LOC 19
11209: PUSH
11210: LD_OWVAR 21
11214: ARRAY
11215: ST_TO_ADDR
// vlajka2 = createvehicle ;
11216: LD_ADDR_LOC 17
11220: PUSH
11221: CALL_OW 45
11225: ST_TO_ADDR
// placeunitxy ( vlajka2 , 143 , 60 , false ) ;
11226: LD_LOC 17
11230: PPUSH
11231: LD_INT 143
11233: PPUSH
11234: LD_INT 60
11236: PPUSH
11237: LD_INT 0
11239: PPUSH
11240: CALL_OW 48
// case mp_sides_positions_ [ your_side ] of 1 :
11244: LD_EXP 50
11248: PUSH
11249: LD_OWVAR 2
11253: ARRAY
11254: PUSH
11255: LD_INT 1
11257: DOUBLE
11258: EQUAL
11259: IFTRUE 11263
11261: GO 11276
11263: POP
// centernowonxy ( 44 , 60 ) ; 2 :
11264: LD_INT 44
11266: PPUSH
11267: LD_INT 60
11269: PPUSH
11270: CALL_OW 86
11274: GO 11298
11276: LD_INT 2
11278: DOUBLE
11279: EQUAL
11280: IFTRUE 11284
11282: GO 11297
11284: POP
// centernowonxy ( 175 , 60 ) ; end ;
11285: LD_INT 175
11287: PPUSH
11288: LD_INT 60
11290: PPUSH
11291: CALL_OW 86
11295: GO 11298
11297: POP
// end ;
11298: LD_VAR 0 1
11302: RET
// function refresh ; var tmp , tmp1 , tmp2 , tmp3 , tmp4 ; begin
11303: LD_INT 0
11305: PPUSH
11306: PPUSH
11307: PPUSH
11308: PPUSH
11309: PPUSH
11310: PPUSH
// tmp = time div 60 ;
11311: LD_ADDR_VAR 0 2
11315: PUSH
11316: LD_LOC 13
11320: PUSH
11321: LD_INT 60
11323: DIV
11324: ST_TO_ADDR
// if tmp < 10 then
11325: LD_VAR 0 2
11329: PUSH
11330: LD_INT 10
11332: LESS
11333: IFFALSE 11351
// tmp1 = 0 & tmp else
11335: LD_ADDR_VAR 0 3
11339: PUSH
11340: LD_STRING 0
11342: PUSH
11343: LD_VAR 0 2
11347: STR
11348: ST_TO_ADDR
11349: GO 11365
// tmp1 =  & tmp ;
11351: LD_ADDR_VAR 0 3
11355: PUSH
11356: LD_STRING 
11358: PUSH
11359: LD_VAR 0 2
11363: STR
11364: ST_TO_ADDR
// tmp = time mod 60 ;
11365: LD_ADDR_VAR 0 2
11369: PUSH
11370: LD_LOC 13
11374: PUSH
11375: LD_INT 60
11377: MOD
11378: ST_TO_ADDR
// if tmp < 10 then
11379: LD_VAR 0 2
11383: PUSH
11384: LD_INT 10
11386: LESS
11387: IFFALSE 11405
// tmp2 = 0 & tmp else
11389: LD_ADDR_VAR 0 4
11393: PUSH
11394: LD_STRING 0
11396: PUSH
11397: LD_VAR 0 2
11401: STR
11402: ST_TO_ADDR
11403: GO 11419
// tmp2 =  & tmp ;
11405: LD_ADDR_VAR 0 4
11409: PUSH
11410: LD_STRING 
11412: PUSH
11413: LD_VAR 0 2
11417: STR
11418: ST_TO_ADDR
// if left_score < 10 then
11419: LD_LOC 22
11423: PUSH
11424: LD_INT 10
11426: LESS
11427: IFFALSE 11445
// tmp3 = 0 & left_score else
11429: LD_ADDR_VAR 0 5
11433: PUSH
11434: LD_STRING 0
11436: PUSH
11437: LD_LOC 22
11441: STR
11442: ST_TO_ADDR
11443: GO 11459
// tmp3 =  & left_score ;
11445: LD_ADDR_VAR 0 5
11449: PUSH
11450: LD_STRING 
11452: PUSH
11453: LD_LOC 22
11457: STR
11458: ST_TO_ADDR
// if right_score < 10 then
11459: LD_LOC 23
11463: PUSH
11464: LD_INT 10
11466: LESS
11467: IFFALSE 11485
// tmp4 = 0 & right_score else
11469: LD_ADDR_VAR 0 6
11473: PUSH
11474: LD_STRING 0
11476: PUSH
11477: LD_LOC 23
11481: STR
11482: ST_TO_ADDR
11483: GO 11499
// tmp4 =  & right_score ;
11485: LD_ADDR_VAR 0 6
11489: PUSH
11490: LD_STRING 
11492: PUSH
11493: LD_LOC 23
11497: STR
11498: ST_TO_ADDR
// display_strings = [ Score:  & tmp3 &  to  & tmp4 , Time left:  & tmp1 & : & tmp2 ] ;
11499: LD_ADDR_OWVAR 47
11503: PUSH
11504: LD_STRING Score: 
11506: PUSH
11507: LD_VAR 0 5
11511: STR
11512: PUSH
11513: LD_STRING  to 
11515: STR
11516: PUSH
11517: LD_VAR 0 6
11521: STR
11522: PUSH
11523: LD_STRING Time left: 
11525: PUSH
11526: LD_VAR 0 3
11530: STR
11531: PUSH
11532: LD_STRING :
11534: STR
11535: PUSH
11536: LD_VAR 0 4
11540: STR
11541: PUSH
11542: EMPTY
11543: LIST
11544: LIST
11545: ST_TO_ADDR
// end ;
11546: LD_VAR 0 1
11550: RET
// every 0 0$1 marked 03 do
11551: GO 11553
11553: DISABLE
// begin time = time - 1 ;
11554: LD_ADDR_LOC 13
11558: PUSH
11559: LD_LOC 13
11563: PUSH
11564: LD_INT 1
11566: MINUS
11567: ST_TO_ADDR
// refresh ;
11568: CALL 11303 0 0
// if not time then
11572: LD_LOC 13
11576: NOT
11577: IFFALSE 11643
// if mp_sides_positions_ [ your_side ] = 1 then
11579: LD_EXP 50
11583: PUSH
11584: LD_OWVAR 2
11588: ARRAY
11589: PUSH
11590: LD_INT 1
11592: EQUAL
11593: IFFALSE 11619
// if left_score >= right_score then
11595: LD_LOC 22
11599: PUSH
11600: LD_LOC 23
11604: GREATEREQUAL
11605: IFFALSE 11613
// youwininmultiplayer else
11607: CALL_OW 106
11611: GO 11617
// youlostinmultiplayer else
11613: CALL_OW 107
11617: GO 11641
// if right_score >= left_score then
11619: LD_LOC 23
11623: PUSH
11624: LD_LOC 22
11628: GREATEREQUAL
11629: IFFALSE 11637
// youwininmultiplayer else
11631: CALL_OW 106
11635: GO 11641
// youlostinmultiplayer else
11637: CALL_OW 107
11641: GO 11644
// enable ;
11643: ENABLE
// end ;
11644: END
// every 0 0$10 marked 19 do
11645: GO 11647
11647: DISABLE
// begin cper = cper - 0 0$10 ;
11648: LD_ADDR_EXP 40
11652: PUSH
11653: LD_EXP 40
11657: PUSH
11658: LD_INT 350
11660: MINUS
11661: ST_TO_ADDR
// if cper = 0 then
11662: LD_EXP 40
11666: PUSH
11667: LD_INT 0
11669: EQUAL
11670: IFFALSE 11708
// begin createcratesarea ( 5 , vlevoex , true ) ;
11672: LD_INT 5
11674: PPUSH
11675: LD_INT 5
11677: PPUSH
11678: LD_INT 1
11680: PPUSH
11681: CALL_OW 55
// createcratesarea ( 5 , vpravoex , true ) ;
11685: LD_INT 5
11687: PPUSH
11688: LD_INT 6
11690: PPUSH
11691: LD_INT 1
11693: PPUSH
11694: CALL_OW 55
// cper = cperiode ;
11698: LD_ADDR_EXP 40
11702: PUSH
11703: LD_EXP 41
11707: ST_TO_ADDR
// end ; enable ;
11708: ENABLE
// end ;
11709: END
// every 5 trigger getlives ( depot1 ) < 500 marked 01 do
11710: LD_LOC 14
11714: PPUSH
11715: CALL_OW 256
11719: PUSH
11720: LD_INT 500
11722: LESS
11723: IFFALSE 11741
11725: GO 11727
11727: DISABLE
// begin setlives ( depot1 , 750 ) ;
11728: LD_LOC 14
11732: PPUSH
11733: LD_INT 750
11735: PPUSH
11736: CALL_OW 234
// enable ;
11740: ENABLE
// end ;
11741: END
// every 5 trigger getlives ( depot2 ) < 500 marked 02 do
11742: LD_LOC 15
11746: PPUSH
11747: CALL_OW 256
11751: PUSH
11752: LD_INT 500
11754: LESS
11755: IFFALSE 11773
11757: GO 11759
11759: DISABLE
// begin setlives ( depot2 , 750 ) ;
11760: LD_LOC 15
11764: PPUSH
11765: LD_INT 750
11767: PPUSH
11768: CALL_OW 234
// enable ;
11772: ENABLE
// end ;
11773: END
// on unitdestroyed ( un ) do var radius ;
11774: LD_INT 0
11776: PPUSH
// begin if GetClass ( un ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
11777: LD_VAR 0 1
11781: PPUSH
11782: CALL_OW 257
11786: PUSH
11787: LD_INT 12
11789: PUSH
11790: LD_INT 15
11792: PUSH
11793: LD_INT 17
11795: PUSH
11796: LD_INT 16
11798: PUSH
11799: EMPTY
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: IN
11805: PUSH
11806: LD_VAR 0 1
11810: PPUSH
11811: CALL_OW 263
11815: PUSH
11816: LD_INT 5
11818: EQUAL
11819: OR
11820: IFFALSE 11831
// ApeKilled ( un ) ;
11822: LD_VAR 0 1
11826: PPUSH
11827: CALL 8186 0 1
// if mp_game_type <> 1 then
11831: LD_OWVAR 6
11835: PUSH
11836: LD_INT 1
11838: NONEQUAL
11839: IFFALSE 11843
// exit ;
11841: GO 12137
// if un = vlajka1 then
11843: LD_VAR 0 1
11847: PUSH
11848: LD_LOC 16
11852: EQUAL
11853: IFFALSE 11991
// begin uc_side = pos2side ;
11855: LD_ADDR_OWVAR 20
11859: PUSH
11860: LD_EXP 45
11864: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos2side ] ;
11865: LD_ADDR_OWVAR 21
11869: PUSH
11870: LD_EXP 49
11874: PUSH
11875: LD_EXP 45
11879: ARRAY
11880: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11881: LD_ADDR_OWVAR 37
11885: PUSH
11886: LD_LOC 18
11890: PUSH
11891: LD_OWVAR 21
11895: ARRAY
11896: ST_TO_ADDR
// vc_control = control_manual ;
11897: LD_ADDR_OWVAR 38
11901: PUSH
11902: LD_INT 1
11904: ST_TO_ADDR
// vc_engine = engine_siberite ;
11905: LD_ADDR_OWVAR 39
11909: PUSH
11910: LD_INT 3
11912: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
11913: LD_ADDR_OWVAR 40
11917: PUSH
11918: LD_LOC 19
11922: PUSH
11923: LD_OWVAR 21
11927: ARRAY
11928: ST_TO_ADDR
// vlajka1 = createvehicle ;
11929: LD_ADDR_LOC 16
11933: PUSH
11934: CALL_OW 45
11938: ST_TO_ADDR
// radius = 2 ;
11939: LD_ADDR_VAR 0 2
11943: PUSH
11944: LD_INT 2
11946: ST_TO_ADDR
// while not placeunitxyr ( vlajka1 , 76 , 60 , radius , false ) do
11947: LD_LOC 16
11951: PPUSH
11952: LD_INT 76
11954: PPUSH
11955: LD_INT 60
11957: PPUSH
11958: LD_VAR 0 2
11962: PPUSH
11963: LD_INT 0
11965: PPUSH
11966: CALL_OW 50
11970: NOT
11971: IFFALSE 11989
// radius = radius + 1 ;
11973: LD_ADDR_VAR 0 2
11977: PUSH
11978: LD_VAR 0 2
11982: PUSH
11983: LD_INT 1
11985: PLUS
11986: ST_TO_ADDR
11987: GO 11947
// end else
11989: GO 12137
// if un = vlajka2 then
11991: LD_VAR 0 1
11995: PUSH
11996: LD_LOC 17
12000: EQUAL
12001: IFFALSE 12137
// begin uc_side = pos1side ;
12003: LD_ADDR_OWVAR 20
12007: PUSH
12008: LD_EXP 44
12012: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos1side ] ;
12013: LD_ADDR_OWVAR 21
12017: PUSH
12018: LD_EXP 49
12022: PUSH
12023: LD_EXP 44
12027: ARRAY
12028: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
12029: LD_ADDR_OWVAR 37
12033: PUSH
12034: LD_LOC 18
12038: PUSH
12039: LD_OWVAR 21
12043: ARRAY
12044: ST_TO_ADDR
// vc_control = control_manual ;
12045: LD_ADDR_OWVAR 38
12049: PUSH
12050: LD_INT 1
12052: ST_TO_ADDR
// vc_engine = engine_siberite ;
12053: LD_ADDR_OWVAR 39
12057: PUSH
12058: LD_INT 3
12060: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
12061: LD_ADDR_OWVAR 40
12065: PUSH
12066: LD_LOC 19
12070: PUSH
12071: LD_OWVAR 21
12075: ARRAY
12076: ST_TO_ADDR
// vlajka2 = createvehicle ;
12077: LD_ADDR_LOC 17
12081: PUSH
12082: CALL_OW 45
12086: ST_TO_ADDR
// radius = 2 ;
12087: LD_ADDR_VAR 0 2
12091: PUSH
12092: LD_INT 2
12094: ST_TO_ADDR
// while not placeunitxyr ( vlajka2 , 143 , 60 , radius , false ) do
12095: LD_LOC 17
12099: PPUSH
12100: LD_INT 143
12102: PPUSH
12103: LD_INT 60
12105: PPUSH
12106: LD_VAR 0 2
12110: PPUSH
12111: LD_INT 0
12113: PPUSH
12114: CALL_OW 50
12118: NOT
12119: IFFALSE 12137
// radius = radius + 1 ;
12121: LD_ADDR_VAR 0 2
12125: PUSH
12126: LD_VAR 0 2
12130: PUSH
12131: LD_INT 1
12133: PLUS
12134: ST_TO_ADDR
12135: GO 12095
// end ; end ;
12137: PPOPN 2
12139: END
// on vehiclecaptured ( vehnew , vehold , origside , hum ) marked 05 do var radius ;
12140: LD_INT 0
12142: PPUSH
// if ( vehold = vlajka1 ) then
12143: LD_VAR 0 2
12147: PUSH
12148: LD_LOC 16
12152: EQUAL
12153: IFFALSE 12306
// begin vlajka1 = vehnew ;
12155: LD_ADDR_LOC 16
12159: PUSH
12160: LD_VAR 0 1
12164: ST_TO_ADDR
// comexitvehicle ( vlajka1 ) ;
12165: LD_LOC 16
12169: PPUSH
12170: CALL_OW 121
// while isdrivenby ( vlajka1 ) do
12174: LD_LOC 16
12178: PPUSH
12179: CALL_OW 311
12183: IFFALSE 12194
// wait ( 2 ) ;
12185: LD_INT 2
12187: PPUSH
12188: CALL_OW 67
12192: GO 12174
// if getdistunitxy ( vlajka1 , 76 , 60 ) > 4 then
12194: LD_LOC 16
12198: PPUSH
12199: LD_INT 76
12201: PPUSH
12202: LD_INT 60
12204: PPUSH
12205: CALL_OW 297
12209: PUSH
12210: LD_INT 4
12212: GREATER
12213: IFFALSE 12290
// begin removeunit ( vlajka1 ) ;
12215: LD_LOC 16
12219: PPUSH
12220: CALL_OW 64
// setside ( vlajka1 , origside ) ;
12224: LD_LOC 16
12228: PPUSH
12229: LD_VAR 0 3
12233: PPUSH
12234: CALL_OW 235
// radius = 2 ;
12238: LD_ADDR_VAR 0 5
12242: PUSH
12243: LD_INT 2
12245: ST_TO_ADDR
// while not placeunitxyr ( vlajka1 , 76 , 60 , radius , false ) do
12246: LD_LOC 16
12250: PPUSH
12251: LD_INT 76
12253: PPUSH
12254: LD_INT 60
12256: PPUSH
12257: LD_VAR 0 5
12261: PPUSH
12262: LD_INT 0
12264: PPUSH
12265: CALL_OW 50
12269: NOT
12270: IFFALSE 12288
// radius = radius + 1 ;
12272: LD_ADDR_VAR 0 5
12276: PUSH
12277: LD_VAR 0 5
12281: PUSH
12282: LD_INT 1
12284: PLUS
12285: ST_TO_ADDR
12286: GO 12246
// end else
12288: GO 12304
// setside ( vlajka1 , origside ) ;
12290: LD_LOC 16
12294: PPUSH
12295: LD_VAR 0 3
12299: PPUSH
12300: CALL_OW 235
// end else
12304: GO 12467
// if ( vehold = vlajka2 ) then
12306: LD_VAR 0 2
12310: PUSH
12311: LD_LOC 17
12315: EQUAL
12316: IFFALSE 12467
// begin vlajka2 = vehnew ;
12318: LD_ADDR_LOC 17
12322: PUSH
12323: LD_VAR 0 1
12327: ST_TO_ADDR
// comexitvehicle ( vlajka2 ) ;
12328: LD_LOC 17
12332: PPUSH
12333: CALL_OW 121
// while isdrivenby ( vlajka2 ) do
12337: LD_LOC 17
12341: PPUSH
12342: CALL_OW 311
12346: IFFALSE 12357
// wait ( 2 ) ;
12348: LD_INT 2
12350: PPUSH
12351: CALL_OW 67
12355: GO 12337
// if getdistunitxy ( vlajka2 , 143 , 60 ) > 4 then
12357: LD_LOC 17
12361: PPUSH
12362: LD_INT 143
12364: PPUSH
12365: LD_INT 60
12367: PPUSH
12368: CALL_OW 297
12372: PUSH
12373: LD_INT 4
12375: GREATER
12376: IFFALSE 12453
// begin removeunit ( vlajka2 ) ;
12378: LD_LOC 17
12382: PPUSH
12383: CALL_OW 64
// setside ( vlajka2 , origside ) ;
12387: LD_LOC 17
12391: PPUSH
12392: LD_VAR 0 3
12396: PPUSH
12397: CALL_OW 235
// radius = 2 ;
12401: LD_ADDR_VAR 0 5
12405: PUSH
12406: LD_INT 2
12408: ST_TO_ADDR
// while not placeunitxyr ( vlajka2 , 143 , 60 , radius , false ) do
12409: LD_LOC 17
12413: PPUSH
12414: LD_INT 143
12416: PPUSH
12417: LD_INT 60
12419: PPUSH
12420: LD_VAR 0 5
12424: PPUSH
12425: LD_INT 0
12427: PPUSH
12428: CALL_OW 50
12432: NOT
12433: IFFALSE 12451
// radius = radius + 1 ;
12435: LD_ADDR_VAR 0 5
12439: PUSH
12440: LD_VAR 0 5
12444: PUSH
12445: LD_INT 1
12447: PLUS
12448: ST_TO_ADDR
12449: GO 12409
// end else
12451: GO 12467
// setside ( vlajka2 , origside ) ;
12453: LD_LOC 17
12457: PPUSH
12458: LD_VAR 0 3
12462: PPUSH
12463: CALL_OW 235
// end ;
12467: PPOPN 5
12469: END
// every 10 + 1 trigger getdistunitxy ( vlajka1 , 185 , 60 ) < 6 marked 06 do var radius , tmp ;
12470: LD_LOC 16
12474: PPUSH
12475: LD_INT 185
12477: PPUSH
12478: LD_INT 60
12480: PPUSH
12481: CALL_OW 297
12485: PUSH
12486: LD_INT 6
12488: LESS
12489: IFFALSE 12693
12491: GO 12493
12493: DISABLE
12494: LD_INT 0
12496: PPUSH
12497: PPUSH
// begin right_score = right_score + 1 ;
12498: LD_ADDR_LOC 23
12502: PUSH
12503: LD_LOC 23
12507: PUSH
12508: LD_INT 1
12510: PLUS
12511: ST_TO_ADDR
// refresh ;
12512: CALL 11303 0 0
// comexitvehicle ( vlajka1 ) ;
12516: LD_LOC 16
12520: PPUSH
12521: CALL_OW 121
// while isdrivenby ( vlajka1 ) do
12525: LD_LOC 16
12529: PPUSH
12530: CALL_OW 311
12534: IFFALSE 12545
// wait ( 2 ) ;
12536: LD_INT 2
12538: PPUSH
12539: CALL_OW 67
12543: GO 12525
// removeunit ( vlajka1 ) ;
12545: LD_LOC 16
12549: PPUSH
12550: CALL_OW 64
// for radius in [ mat_cans , mat_oil , mat_siberit ] do
12554: LD_ADDR_VAR 0 1
12558: PUSH
12559: LD_INT 1
12561: PUSH
12562: LD_INT 2
12564: PUSH
12565: LD_INT 3
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: LIST
12572: PUSH
12573: FOR_IN
12574: IFFALSE 12640
// begin tmp = getcargo ( vlajka1 , radius ) ;
12576: LD_ADDR_VAR 0 2
12580: PUSH
12581: LD_LOC 16
12585: PPUSH
12586: LD_VAR 0 1
12590: PPUSH
12591: CALL_OW 289
12595: ST_TO_ADDR
// if tmp then
12596: LD_VAR 0 2
12600: IFFALSE 12638
// begin addresourcetype ( pos2base , radius , tmp ) ;
12602: LD_LOC 21
12606: PPUSH
12607: LD_VAR 0 1
12611: PPUSH
12612: LD_VAR 0 2
12616: PPUSH
12617: CALL_OW 276
// setcargo ( vlajka1 , radius , 0 ) ;
12621: LD_LOC 16
12625: PPUSH
12626: LD_VAR 0 1
12630: PPUSH
12631: LD_INT 0
12633: PPUSH
12634: CALL_OW 290
// end ; end ;
12638: GO 12573
12640: POP
12641: POP
// radius = 2 ;
12642: LD_ADDR_VAR 0 1
12646: PUSH
12647: LD_INT 2
12649: ST_TO_ADDR
// while not placeunitxyr ( vlajka1 , 76 , 60 , radius , false ) do
12650: LD_LOC 16
12654: PPUSH
12655: LD_INT 76
12657: PPUSH
12658: LD_INT 60
12660: PPUSH
12661: LD_VAR 0 1
12665: PPUSH
12666: LD_INT 0
12668: PPUSH
12669: CALL_OW 50
12673: NOT
12674: IFFALSE 12692
// radius = radius + 1 ;
12676: LD_ADDR_VAR 0 1
12680: PUSH
12681: LD_VAR 0 1
12685: PUSH
12686: LD_INT 1
12688: PLUS
12689: ST_TO_ADDR
12690: GO 12650
// enable ;
12692: ENABLE
// end ;
12693: PPOPN 2
12695: END
// every 10 trigger getdistunitxy ( vlajka2 , 34 , 60 ) < 6 marked 07 do var radius , tmp ;
12696: LD_LOC 17
12700: PPUSH
12701: LD_INT 34
12703: PPUSH
12704: LD_INT 60
12706: PPUSH
12707: CALL_OW 297
12711: PUSH
12712: LD_INT 6
12714: LESS
12715: IFFALSE 12919
12717: GO 12719
12719: DISABLE
12720: LD_INT 0
12722: PPUSH
12723: PPUSH
// begin left_score = left_score + 1 ;
12724: LD_ADDR_LOC 22
12728: PUSH
12729: LD_LOC 22
12733: PUSH
12734: LD_INT 1
12736: PLUS
12737: ST_TO_ADDR
// refresh ;
12738: CALL 11303 0 0
// comexitvehicle ( vlajka2 ) ;
12742: LD_LOC 17
12746: PPUSH
12747: CALL_OW 121
// while isdrivenby ( vlajka2 ) do
12751: LD_LOC 17
12755: PPUSH
12756: CALL_OW 311
12760: IFFALSE 12771
// wait ( 2 ) ;
12762: LD_INT 2
12764: PPUSH
12765: CALL_OW 67
12769: GO 12751
// removeunit ( vlajka2 ) ;
12771: LD_LOC 17
12775: PPUSH
12776: CALL_OW 64
// for radius in [ mat_cans , mat_oil , mat_siberit ] do
12780: LD_ADDR_VAR 0 1
12784: PUSH
12785: LD_INT 1
12787: PUSH
12788: LD_INT 2
12790: PUSH
12791: LD_INT 3
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: LIST
12798: PUSH
12799: FOR_IN
12800: IFFALSE 12866
// begin tmp = getcargo ( vlajka2 , radius ) ;
12802: LD_ADDR_VAR 0 2
12806: PUSH
12807: LD_LOC 17
12811: PPUSH
12812: LD_VAR 0 1
12816: PPUSH
12817: CALL_OW 289
12821: ST_TO_ADDR
// if tmp then
12822: LD_VAR 0 2
12826: IFFALSE 12864
// begin addresourcetype ( pos1base , radius , tmp ) ;
12828: LD_LOC 20
12832: PPUSH
12833: LD_VAR 0 1
12837: PPUSH
12838: LD_VAR 0 2
12842: PPUSH
12843: CALL_OW 276
// setcargo ( vlajka2 , radius , 0 ) ;
12847: LD_LOC 17
12851: PPUSH
12852: LD_VAR 0 1
12856: PPUSH
12857: LD_INT 0
12859: PPUSH
12860: CALL_OW 290
// end ; end ;
12864: GO 12799
12866: POP
12867: POP
// radius = 2 ;
12868: LD_ADDR_VAR 0 1
12872: PUSH
12873: LD_INT 2
12875: ST_TO_ADDR
// while not placeunitxyr ( vlajka2 , 143 , 60 , radius , false ) do
12876: LD_LOC 17
12880: PPUSH
12881: LD_INT 143
12883: PPUSH
12884: LD_INT 60
12886: PPUSH
12887: LD_VAR 0 1
12891: PPUSH
12892: LD_INT 0
12894: PPUSH
12895: CALL_OW 50
12899: NOT
12900: IFFALSE 12918
// radius = radius + 1 ;
12902: LD_ADDR_VAR 0 1
12906: PUSH
12907: LD_VAR 0 1
12911: PUSH
12912: LD_INT 1
12914: PLUS
12915: ST_TO_ADDR
12916: GO 12876
// enable ;
12918: ENABLE
// end ; end_of_file
12919: PPOPN 2
12921: END
// var zakladna , skilly , start_res , extra_oil , extra_sib , zakl_plus , batt_fl , sib_det , people_resp , siberitofka ; var fortpos , areasdiff , directions ; var resp_cnt1 , resp_cnt2 ; export function other_game ; var tmp , tmp2 , tmp3 , cl ; begin
12922: LD_INT 0
12924: PPUSH
12925: PPUSH
12926: PPUSH
12927: PPUSH
12928: PPUSH
// ctf = false ;
12929: LD_ADDR_EXP 47
12933: PUSH
12934: LD_INT 0
12936: ST_TO_ADDR
// resp_cnt1 = 0 ;
12937: LD_ADDR_LOC 47
12941: PUSH
12942: LD_INT 0
12944: ST_TO_ADDR
// resp_cnt2 = 0 ;
12945: LD_ADDR_LOC 48
12949: PUSH
12950: LD_INT 0
12952: ST_TO_ADDR
// enable ( nonctf_13 ) ;
12953: LD_EXP 55
12957: ENABLE_MARKED
// for tmp = 1 to 8 do
12958: LD_ADDR_VAR 0 2
12962: PUSH
12963: DOUBLE
12964: LD_INT 1
12966: DEC
12967: ST_TO_ADDR
12968: LD_INT 8
12970: PUSH
12971: FOR_TO
12972: IFFALSE 13033
// begin setrestrict ( b_depot , tmp , state_enabled ) ;
12974: LD_INT 0
12976: PPUSH
12977: LD_VAR 0 2
12981: PPUSH
12982: LD_INT 1
12984: PPUSH
12985: CALL_OW 324
// if sib_det then
12989: LD_LOC 41
12993: IFFALSE 13010
// settech ( tech_sibdet , tmp , state_researched ) ;
12995: LD_INT 20
12997: PPUSH
12998: LD_VAR 0 2
13002: PPUSH
13003: LD_INT 2
13005: PPUSH
13006: CALL_OW 322
// if siberitofka then
13010: LD_LOC 43
13014: IFFALSE 13031
// settech ( tech_sibfiss , tmp , state_enabled ) ;
13016: LD_INT 25
13018: PPUSH
13019: LD_VAR 0 2
13023: PPUSH
13024: LD_INT 1
13026: PPUSH
13027: CALL_OW 322
// end ;
13031: GO 12971
13033: POP
13034: POP
// if multiplayer then
13035: LD_OWVAR 4
13039: IFFALSE 13212
// begin zakladna = getmultiplayersetting ( 0 ) ;
13041: LD_ADDR_LOC 34
13045: PUSH
13046: LD_INT 0
13048: PPUSH
13049: CALL_OW 426
13053: ST_TO_ADDR
// lidi = getmultiplayersetting ( 1 ) ;
13054: LD_ADDR_EXP 37
13058: PUSH
13059: LD_INT 1
13061: PPUSH
13062: CALL_OW 426
13066: ST_TO_ADDR
// skilly = getmultiplayersetting ( 2 ) ;
13067: LD_ADDR_LOC 35
13071: PUSH
13072: LD_INT 2
13074: PPUSH
13075: CALL_OW 426
13079: ST_TO_ADDR
// start_res = getmultiplayersetting ( 3 ) ;
13080: LD_ADDR_LOC 36
13084: PUSH
13085: LD_INT 3
13087: PPUSH
13088: CALL_OW 426
13092: ST_TO_ADDR
// krabice = getmultiplayersetting ( 4 ) ;
13093: LD_ADDR_EXP 38
13097: PUSH
13098: LD_INT 4
13100: PPUSH
13101: CALL_OW 426
13105: ST_TO_ADDR
// extra_oil = getmultiplayersetting ( 5 ) ;
13106: LD_ADDR_LOC 37
13110: PUSH
13111: LD_INT 5
13113: PPUSH
13114: CALL_OW 426
13118: ST_TO_ADDR
// extra_sib = getmultiplayersetting ( 6 ) ;
13119: LD_ADDR_LOC 38
13123: PUSH
13124: LD_INT 6
13126: PPUSH
13127: CALL_OW 426
13131: ST_TO_ADDR
// zakl_plus = getmultiplayersetting ( 7 ) ;
13132: LD_ADDR_LOC 39
13136: PUSH
13137: LD_INT 7
13139: PPUSH
13140: CALL_OW 426
13144: ST_TO_ADDR
// batt_fl = getmultiplayersetting ( 11 ) ;
13145: LD_ADDR_LOC 40
13149: PUSH
13150: LD_INT 11
13152: PPUSH
13153: CALL_OW 426
13157: ST_TO_ADDR
// sib_det = getmultiplayersetting ( 12 ) ;
13158: LD_ADDR_LOC 41
13162: PUSH
13163: LD_INT 12
13165: PPUSH
13166: CALL_OW 426
13170: ST_TO_ADDR
// opoce = getmultiplayersetting ( 13 ) ;
13171: LD_ADDR_EXP 39
13175: PUSH
13176: LD_INT 13
13178: PPUSH
13179: CALL_OW 426
13183: ST_TO_ADDR
// people_resp = getmultiplayersetting ( 14 ) ;
13184: LD_ADDR_LOC 42
13188: PUSH
13189: LD_INT 14
13191: PPUSH
13192: CALL_OW 426
13196: ST_TO_ADDR
// siberitofka = getmultiplayersetting ( 15 ) ;
13197: LD_ADDR_LOC 43
13201: PUSH
13202: LD_INT 15
13204: PPUSH
13205: CALL_OW 426
13209: ST_TO_ADDR
// end else
13210: GO 13316
// begin zakladna = 1 ;
13212: LD_ADDR_LOC 34
13216: PUSH
13217: LD_INT 1
13219: ST_TO_ADDR
// lidi = 1 ;
13220: LD_ADDR_EXP 37
13224: PUSH
13225: LD_INT 1
13227: ST_TO_ADDR
// skilly = 1 ;
13228: LD_ADDR_LOC 35
13232: PUSH
13233: LD_INT 1
13235: ST_TO_ADDR
// start_res = 2 ;
13236: LD_ADDR_LOC 36
13240: PUSH
13241: LD_INT 2
13243: ST_TO_ADDR
// krabice = 1 ;
13244: LD_ADDR_EXP 38
13248: PUSH
13249: LD_INT 1
13251: ST_TO_ADDR
// extra_oil = 1 ;
13252: LD_ADDR_LOC 37
13256: PUSH
13257: LD_INT 1
13259: ST_TO_ADDR
// extra_sib = 1 ;
13260: LD_ADDR_LOC 38
13264: PUSH
13265: LD_INT 1
13267: ST_TO_ADDR
// zakl_plus = 2 ;
13268: LD_ADDR_LOC 39
13272: PUSH
13273: LD_INT 2
13275: ST_TO_ADDR
// batt_fl = 0 ;
13276: LD_ADDR_LOC 40
13280: PUSH
13281: LD_INT 0
13283: ST_TO_ADDR
// sib_det = 0 ;
13284: LD_ADDR_LOC 41
13288: PUSH
13289: LD_INT 0
13291: ST_TO_ADDR
// opoce = 3 ;
13292: LD_ADDR_EXP 39
13296: PUSH
13297: LD_INT 3
13299: ST_TO_ADDR
// people_resp = 0 ;
13300: LD_ADDR_LOC 42
13304: PUSH
13305: LD_INT 0
13307: ST_TO_ADDR
// siberitofka = 0 ;
13308: LD_ADDR_LOC 43
13312: PUSH
13313: LD_INT 0
13315: ST_TO_ADDR
// end ; if people_resp then
13316: LD_LOC 42
13320: IFFALSE 13337
// begin enable ( nonctf_10 ) ;
13322: LD_EXP 52
13326: ENABLE_MARKED
// enable ( nonctf_11 ) ;
13327: LD_EXP 53
13331: ENABLE_MARKED
// enable ( nonctf_12 ) ;
13332: LD_EXP 54
13336: ENABLE_MARKED
// end ; if people_resp = 1 then
13337: LD_LOC 42
13341: PUSH
13342: LD_INT 1
13344: EQUAL
13345: IFFALSE 13355
// people_resp = 3 ;
13347: LD_ADDR_LOC 42
13351: PUSH
13352: LD_INT 3
13354: ST_TO_ADDR
// if people_resp = 2 then
13355: LD_LOC 42
13359: PUSH
13360: LD_INT 2
13362: EQUAL
13363: IFFALSE 13373
// people_resp = 1 ;
13365: LD_ADDR_LOC 42
13369: PUSH
13370: LD_INT 1
13372: ST_TO_ADDR
// case lidi of 0 :
13373: LD_EXP 37
13377: PUSH
13378: LD_INT 0
13380: DOUBLE
13381: EQUAL
13382: IFTRUE 13386
13384: GO 13397
13386: POP
// lidi = 9 ; 1 :
13387: LD_ADDR_EXP 37
13391: PUSH
13392: LD_INT 9
13394: ST_TO_ADDR
13395: GO 13474
13397: LD_INT 1
13399: DOUBLE
13400: EQUAL
13401: IFTRUE 13405
13403: GO 13416
13405: POP
// lidi = 13 ; 2 :
13406: LD_ADDR_EXP 37
13410: PUSH
13411: LD_INT 13
13413: ST_TO_ADDR
13414: GO 13474
13416: LD_INT 2
13418: DOUBLE
13419: EQUAL
13420: IFTRUE 13424
13422: GO 13435
13424: POP
// lidi = 19 ; 3 :
13425: LD_ADDR_EXP 37
13429: PUSH
13430: LD_INT 19
13432: ST_TO_ADDR
13433: GO 13474
13435: LD_INT 3
13437: DOUBLE
13438: EQUAL
13439: IFTRUE 13443
13441: GO 13454
13443: POP
// lidi = 23 ; 4 :
13444: LD_ADDR_EXP 37
13448: PUSH
13449: LD_INT 23
13451: ST_TO_ADDR
13452: GO 13474
13454: LD_INT 4
13456: DOUBLE
13457: EQUAL
13458: IFTRUE 13462
13460: GO 13473
13462: POP
// lidi = 29 ; end ;
13463: LD_ADDR_EXP 37
13467: PUSH
13468: LD_INT 29
13470: ST_TO_ADDR
13471: GO 13474
13473: POP
// skilly = skilly + 1 ;
13474: LD_ADDR_LOC 35
13478: PUSH
13479: LD_LOC 35
13483: PUSH
13484: LD_INT 1
13486: PLUS
13487: ST_TO_ADDR
// case start_res of 0 :
13488: LD_LOC 36
13492: PUSH
13493: LD_INT 0
13495: DOUBLE
13496: EQUAL
13497: IFTRUE 13501
13499: GO 13512
13501: POP
// start_res = 0 ; 1 :
13502: LD_ADDR_LOC 36
13506: PUSH
13507: LD_INT 0
13509: ST_TO_ADDR
13510: GO 13570
13512: LD_INT 1
13514: DOUBLE
13515: EQUAL
13516: IFTRUE 13520
13518: GO 13531
13520: POP
// start_res = 50 ; 2 :
13521: LD_ADDR_LOC 36
13525: PUSH
13526: LD_INT 50
13528: ST_TO_ADDR
13529: GO 13570
13531: LD_INT 2
13533: DOUBLE
13534: EQUAL
13535: IFTRUE 13539
13537: GO 13550
13539: POP
// start_res = 100 ; 3 :
13540: LD_ADDR_LOC 36
13544: PUSH
13545: LD_INT 100
13547: ST_TO_ADDR
13548: GO 13570
13550: LD_INT 3
13552: DOUBLE
13553: EQUAL
13554: IFTRUE 13558
13556: GO 13569
13558: POP
// start_res = 200 ; end ;
13559: LD_ADDR_LOC 36
13563: PUSH
13564: LD_INT 200
13566: ST_TO_ADDR
13567: GO 13570
13569: POP
// case krabice of 0 :
13570: LD_EXP 38
13574: PUSH
13575: LD_INT 0
13577: DOUBLE
13578: EQUAL
13579: IFTRUE 13583
13581: GO 13594
13583: POP
// cperiode = 1 1$30 ; 1 :
13584: LD_ADDR_EXP 41
13588: PUSH
13589: LD_INT 3150
13591: ST_TO_ADDR
13592: GO 13633
13594: LD_INT 1
13596: DOUBLE
13597: EQUAL
13598: IFTRUE 13602
13600: GO 13613
13602: POP
// cperiode = 1 1$00 ; 2 :
13603: LD_ADDR_EXP 41
13607: PUSH
13608: LD_INT 2100
13610: ST_TO_ADDR
13611: GO 13633
13613: LD_INT 2
13615: DOUBLE
13616: EQUAL
13617: IFTRUE 13621
13619: GO 13632
13621: POP
// cperiode = 0 0$30 ; end ;
13622: LD_ADDR_EXP 41
13626: PUSH
13627: LD_INT 1050
13629: ST_TO_ADDR
13630: GO 13633
13632: POP
// case opoce of 0 :
13633: LD_EXP 39
13637: PUSH
13638: LD_INT 0
13640: DOUBLE
13641: EQUAL
13642: IFTRUE 13646
13644: GO 13657
13646: POP
// opoce = 0 ; 1 :
13647: LD_ADDR_EXP 39
13651: PUSH
13652: LD_INT 0
13654: ST_TO_ADDR
13655: GO 13772
13657: LD_INT 1
13659: DOUBLE
13660: EQUAL
13661: IFTRUE 13665
13663: GO 13676
13665: POP
// opoce = 3 ; 2 :
13666: LD_ADDR_EXP 39
13670: PUSH
13671: LD_INT 3
13673: ST_TO_ADDR
13674: GO 13772
13676: LD_INT 2
13678: DOUBLE
13679: EQUAL
13680: IFTRUE 13684
13682: GO 13695
13684: POP
// opoce = 7 ; 3 :
13685: LD_ADDR_EXP 39
13689: PUSH
13690: LD_INT 7
13692: ST_TO_ADDR
13693: GO 13772
13695: LD_INT 3
13697: DOUBLE
13698: EQUAL
13699: IFTRUE 13703
13701: GO 13714
13703: POP
// opoce = 11 ; 4 :
13704: LD_ADDR_EXP 39
13708: PUSH
13709: LD_INT 11
13711: ST_TO_ADDR
13712: GO 13772
13714: LD_INT 4
13716: DOUBLE
13717: EQUAL
13718: IFTRUE 13722
13720: GO 13733
13722: POP
// opoce = 15 ; 5 :
13723: LD_ADDR_EXP 39
13727: PUSH
13728: LD_INT 15
13730: ST_TO_ADDR
13731: GO 13772
13733: LD_INT 5
13735: DOUBLE
13736: EQUAL
13737: IFTRUE 13741
13739: GO 13752
13741: POP
// opoce = 19 ; 6 :
13742: LD_ADDR_EXP 39
13746: PUSH
13747: LD_INT 19
13749: ST_TO_ADDR
13750: GO 13772
13752: LD_INT 6
13754: DOUBLE
13755: EQUAL
13756: IFTRUE 13760
13758: GO 13771
13760: POP
// opoce = 23 ; end ;
13761: LD_ADDR_EXP 39
13765: PUSH
13766: LD_INT 23
13768: ST_TO_ADDR
13769: GO 13772
13771: POP
// fortpos = [ [ [ 46 , 53 , 4 ] , [ 51 , 62 , 4 ] ] , [ [ 167 , 53 , 1 ] , [ 173 , 64 , 1 ] ] ] ;
13772: LD_ADDR_LOC 44
13776: PUSH
13777: LD_INT 46
13779: PUSH
13780: LD_INT 53
13782: PUSH
13783: LD_INT 4
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: LIST
13790: PUSH
13791: LD_INT 51
13793: PUSH
13794: LD_INT 62
13796: PUSH
13797: LD_INT 4
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: LIST
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: PUSH
13809: LD_INT 167
13811: PUSH
13812: LD_INT 53
13814: PUSH
13815: LD_INT 1
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: LIST
13822: PUSH
13823: LD_INT 173
13825: PUSH
13826: LD_INT 64
13828: PUSH
13829: LD_INT 1
13831: PUSH
13832: EMPTY
13833: LIST
13834: LIST
13835: LIST
13836: PUSH
13837: EMPTY
13838: LIST
13839: LIST
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: ST_TO_ADDR
// areasdiff = [ vlevodiff , vpravodiff ] ;
13845: LD_ADDR_LOC 45
13849: PUSH
13850: LD_INT 16
13852: PUSH
13853: LD_INT 17
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: ST_TO_ADDR
// directions = [ 4 , 1 ] ;
13860: LD_ADDR_LOC 46
13864: PUSH
13865: LD_INT 4
13867: PUSH
13868: LD_INT 1
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: ST_TO_ADDR
// for tmp = 1 to 8 do
13875: LD_ADDR_VAR 0 2
13879: PUSH
13880: DOUBLE
13881: LD_INT 1
13883: DEC
13884: ST_TO_ADDR
13885: LD_INT 8
13887: PUSH
13888: FOR_TO
13889: IFFALSE 15058
// if mp_sides_nations_ [ tmp ] then
13891: LD_EXP 49
13895: PUSH
13896: LD_VAR 0 2
13900: ARRAY
13901: IFFALSE 15056
// begin if mp_sides_positions_ [ tmp ] = 1 then
13903: LD_EXP 50
13907: PUSH
13908: LD_VAR 0 2
13912: ARRAY
13913: PUSH
13914: LD_INT 1
13916: EQUAL
13917: IFFALSE 13931
// pos1side = tmp else
13919: LD_ADDR_EXP 44
13923: PUSH
13924: LD_VAR 0 2
13928: ST_TO_ADDR
13929: GO 13941
// pos2side = tmp ;
13931: LD_ADDR_EXP 45
13935: PUSH
13936: LD_VAR 0 2
13940: ST_TO_ADDR
// uc_side = tmp ;
13941: LD_ADDR_OWVAR 20
13945: PUSH
13946: LD_VAR 0 2
13950: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ tmp ] ;
13951: LD_ADDR_OWVAR 21
13955: PUSH
13956: LD_EXP 49
13960: PUSH
13961: LD_VAR 0 2
13965: ARRAY
13966: ST_TO_ADDR
// bc_type = b_depot ;
13967: LD_ADDR_OWVAR 42
13971: PUSH
13972: LD_INT 0
13974: ST_TO_ADDR
// bc_level = 1 ;
13975: LD_ADDR_OWVAR 43
13979: PUSH
13980: LD_INT 1
13982: ST_TO_ADDR
// tmp2 = createandplacebuildingxyd ( depotpositions [ mp_sides_positions_ [ tmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 2 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 3 ] ) ;
13983: LD_ADDR_VAR 0 3
13987: PUSH
13988: LD_EXP 42
13992: PUSH
13993: LD_EXP 50
13997: PUSH
13998: LD_VAR 0 2
14002: ARRAY
14003: ARRAY
14004: PUSH
14005: LD_INT 1
14007: ARRAY
14008: PPUSH
14009: LD_EXP 42
14013: PUSH
14014: LD_EXP 50
14018: PUSH
14019: LD_VAR 0 2
14023: ARRAY
14024: ARRAY
14025: PUSH
14026: LD_INT 2
14028: ARRAY
14029: PPUSH
14030: LD_EXP 42
14034: PUSH
14035: LD_EXP 50
14039: PUSH
14040: LD_VAR 0 2
14044: ARRAY
14045: ARRAY
14046: PUSH
14047: LD_INT 3
14049: ARRAY
14050: PPUSH
14051: CALL_OW 47
14055: ST_TO_ADDR
// if batt_fl then
14056: LD_LOC 40
14060: IFFALSE 14170
// setbattleflag ( tmp , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 2 ] , [ [ bfo_defend_bonus_human , 80 ] , [ bfo_defend_bonus_vehicle , 40 ] , [ bfo_defend_bonus_building , 0 ] , [ bfo_range , 17 ] , [ bfo_height , 100 ] ] ) ;
14062: LD_VAR 0 2
14066: PPUSH
14067: LD_EXP 42
14071: PUSH
14072: LD_EXP 50
14076: PUSH
14077: LD_VAR 0 2
14081: ARRAY
14082: ARRAY
14083: PUSH
14084: LD_INT 1
14086: ARRAY
14087: PPUSH
14088: LD_EXP 42
14092: PUSH
14093: LD_EXP 50
14097: PUSH
14098: LD_VAR 0 2
14102: ARRAY
14103: ARRAY
14104: PUSH
14105: LD_INT 2
14107: ARRAY
14108: PPUSH
14109: LD_INT 1
14111: PUSH
14112: LD_INT 80
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: PUSH
14119: LD_INT 2
14121: PUSH
14122: LD_INT 40
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: PUSH
14129: LD_INT 3
14131: PUSH
14132: LD_INT 0
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PUSH
14139: LD_INT 10
14141: PUSH
14142: LD_INT 17
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: PUSH
14149: LD_INT 20
14151: PUSH
14152: LD_INT 100
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: PUSH
14159: EMPTY
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: PPUSH
14166: CALL_OW 418
// if zakladna then
14170: LD_LOC 34
14174: IFFALSE 14342
// begin bc_type = b_breastwork ;
14176: LD_ADDR_OWVAR 42
14180: PUSH
14181: LD_INT 31
14183: ST_TO_ADDR
// createandplacebuildingxyd ( fortpos [ mp_sides_positions_ [ tmp ] ] [ 1 ] [ 1 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 1 ] [ 2 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 1 ] [ 3 ] ) ;
14184: LD_LOC 44
14188: PUSH
14189: LD_EXP 50
14193: PUSH
14194: LD_VAR 0 2
14198: ARRAY
14199: ARRAY
14200: PUSH
14201: LD_INT 1
14203: ARRAY
14204: PUSH
14205: LD_INT 1
14207: ARRAY
14208: PPUSH
14209: LD_LOC 44
14213: PUSH
14214: LD_EXP 50
14218: PUSH
14219: LD_VAR 0 2
14223: ARRAY
14224: ARRAY
14225: PUSH
14226: LD_INT 1
14228: ARRAY
14229: PUSH
14230: LD_INT 2
14232: ARRAY
14233: PPUSH
14234: LD_LOC 44
14238: PUSH
14239: LD_EXP 50
14243: PUSH
14244: LD_VAR 0 2
14248: ARRAY
14249: ARRAY
14250: PUSH
14251: LD_INT 1
14253: ARRAY
14254: PUSH
14255: LD_INT 3
14257: ARRAY
14258: PPUSH
14259: CALL_OW 47
// createandplacebuildingxyd ( fortpos [ mp_sides_positions_ [ tmp ] ] [ 2 ] [ 1 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 2 ] [ 2 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 2 ] [ 3 ] ) ;
14263: LD_LOC 44
14267: PUSH
14268: LD_EXP 50
14272: PUSH
14273: LD_VAR 0 2
14277: ARRAY
14278: ARRAY
14279: PUSH
14280: LD_INT 2
14282: ARRAY
14283: PUSH
14284: LD_INT 1
14286: ARRAY
14287: PPUSH
14288: LD_LOC 44
14292: PUSH
14293: LD_EXP 50
14297: PUSH
14298: LD_VAR 0 2
14302: ARRAY
14303: ARRAY
14304: PUSH
14305: LD_INT 2
14307: ARRAY
14308: PUSH
14309: LD_INT 2
14311: ARRAY
14312: PPUSH
14313: LD_LOC 44
14317: PUSH
14318: LD_EXP 50
14322: PUSH
14323: LD_VAR 0 2
14327: ARRAY
14328: ARRAY
14329: PUSH
14330: LD_INT 2
14332: ARRAY
14333: PUSH
14334: LD_INT 3
14336: ARRAY
14337: PPUSH
14338: CALL_OW 47
// end ; addresourcetype ( getbase ( tmp2 ) , mat_cans , start_res ) ;
14342: LD_VAR 0 3
14346: PPUSH
14347: CALL_OW 274
14351: PPUSH
14352: LD_INT 1
14354: PPUSH
14355: LD_LOC 36
14359: PPUSH
14360: CALL_OW 276
// if extra_oil then
14364: LD_LOC 37
14368: IFFALSE 14460
// begin tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14370: LD_ADDR_VAR 0 3
14374: PUSH
14375: LD_LOC 45
14379: PUSH
14380: LD_EXP 50
14384: PUSH
14385: LD_VAR 0 2
14389: ARRAY
14390: ARRAY
14391: PPUSH
14392: LD_INT 0
14394: PPUSH
14395: CALL_OW 16
14399: ST_TO_ADDR
// while not createdepositxy ( tmp2 [ 1 ] , tmp2 [ 2 ] , mat_oil ) do
14400: LD_VAR 0 3
14404: PUSH
14405: LD_INT 1
14407: ARRAY
14408: PPUSH
14409: LD_VAR 0 3
14413: PUSH
14414: LD_INT 2
14416: ARRAY
14417: PPUSH
14418: LD_INT 2
14420: PPUSH
14421: CALL_OW 62
14425: NOT
14426: IFFALSE 14460
// tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14428: LD_ADDR_VAR 0 3
14432: PUSH
14433: LD_LOC 45
14437: PUSH
14438: LD_EXP 50
14442: PUSH
14443: LD_VAR 0 2
14447: ARRAY
14448: ARRAY
14449: PPUSH
14450: LD_INT 0
14452: PPUSH
14453: CALL_OW 16
14457: ST_TO_ADDR
14458: GO 14400
// end ; if extra_sib then
14460: LD_LOC 38
14464: IFFALSE 14556
// begin tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14466: LD_ADDR_VAR 0 3
14470: PUSH
14471: LD_LOC 45
14475: PUSH
14476: LD_EXP 50
14480: PUSH
14481: LD_VAR 0 2
14485: ARRAY
14486: ARRAY
14487: PPUSH
14488: LD_INT 0
14490: PPUSH
14491: CALL_OW 16
14495: ST_TO_ADDR
// while not createdepositxy ( tmp2 [ 1 ] , tmp2 [ 2 ] , mat_siberit ) do
14496: LD_VAR 0 3
14500: PUSH
14501: LD_INT 1
14503: ARRAY
14504: PPUSH
14505: LD_VAR 0 3
14509: PUSH
14510: LD_INT 2
14512: ARRAY
14513: PPUSH
14514: LD_INT 3
14516: PPUSH
14517: CALL_OW 62
14521: NOT
14522: IFFALSE 14556
// tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14524: LD_ADDR_VAR 0 3
14528: PUSH
14529: LD_LOC 45
14533: PUSH
14534: LD_EXP 50
14538: PUSH
14539: LD_VAR 0 2
14543: ARRAY
14544: ARRAY
14545: PPUSH
14546: LD_INT 0
14548: PPUSH
14549: CALL_OW 16
14553: ST_TO_ADDR
14554: GO 14496
// end ; if zakl_plus > 0 then
14556: LD_LOC 39
14560: PUSH
14561: LD_INT 0
14563: GREATER
14564: IFFALSE 14824
// begin bc_type = b_lab ;
14566: LD_ADDR_OWVAR 42
14570: PUSH
14571: LD_INT 6
14573: ST_TO_ADDR
// uc_direction = directions [ mp_sides_positions_ [ tmp ] ] ;
14574: LD_ADDR_OWVAR 24
14578: PUSH
14579: LD_LOC 46
14583: PUSH
14584: LD_EXP 50
14588: PUSH
14589: LD_VAR 0 2
14593: ARRAY
14594: ARRAY
14595: ST_TO_ADDR
// tmp3 = createbuilding ;
14596: LD_ADDR_VAR 0 4
14600: PUSH
14601: CALL_OW 46
14605: ST_TO_ADDR
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14606: LD_ADDR_VAR 0 3
14610: PUSH
14611: LD_EXP 43
14615: PUSH
14616: LD_EXP 50
14620: PUSH
14621: LD_VAR 0 2
14625: ARRAY
14626: ARRAY
14627: PPUSH
14628: LD_INT 0
14630: PPUSH
14631: CALL_OW 16
14635: ST_TO_ADDR
// while not placeunitxy ( tmp3 , tmp2 [ 1 ] , tmp2 [ 2 ] , false ) do
14636: LD_VAR 0 4
14640: PPUSH
14641: LD_VAR 0 3
14645: PUSH
14646: LD_INT 1
14648: ARRAY
14649: PPUSH
14650: LD_VAR 0 3
14654: PUSH
14655: LD_INT 2
14657: ARRAY
14658: PPUSH
14659: LD_INT 0
14661: PPUSH
14662: CALL_OW 48
14666: NOT
14667: IFFALSE 14701
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14669: LD_ADDR_VAR 0 3
14673: PUSH
14674: LD_EXP 43
14678: PUSH
14679: LD_EXP 50
14683: PUSH
14684: LD_VAR 0 2
14688: ARRAY
14689: ARRAY
14690: PPUSH
14691: LD_INT 0
14693: PPUSH
14694: CALL_OW 16
14698: ST_TO_ADDR
14699: GO 14636
// if zakl_plus > 1 then
14701: LD_LOC 39
14705: PUSH
14706: LD_INT 1
14708: GREATER
14709: IFFALSE 14824
// begin bc_type = b_workshop ;
14711: LD_ADDR_OWVAR 42
14715: PUSH
14716: LD_INT 2
14718: ST_TO_ADDR
// tmp3 = createbuilding ;
14719: LD_ADDR_VAR 0 4
14723: PUSH
14724: CALL_OW 46
14728: ST_TO_ADDR
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14729: LD_ADDR_VAR 0 3
14733: PUSH
14734: LD_EXP 43
14738: PUSH
14739: LD_EXP 50
14743: PUSH
14744: LD_VAR 0 2
14748: ARRAY
14749: ARRAY
14750: PPUSH
14751: LD_INT 0
14753: PPUSH
14754: CALL_OW 16
14758: ST_TO_ADDR
// while not placeunitxy ( tmp3 , tmp2 [ 1 ] , tmp2 [ 2 ] , false ) do
14759: LD_VAR 0 4
14763: PPUSH
14764: LD_VAR 0 3
14768: PUSH
14769: LD_INT 1
14771: ARRAY
14772: PPUSH
14773: LD_VAR 0 3
14777: PUSH
14778: LD_INT 2
14780: ARRAY
14781: PPUSH
14782: LD_INT 0
14784: PPUSH
14785: CALL_OW 48
14789: NOT
14790: IFFALSE 14824
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14792: LD_ADDR_VAR 0 3
14796: PUSH
14797: LD_EXP 43
14801: PUSH
14802: LD_EXP 50
14806: PUSH
14807: LD_VAR 0 2
14811: ARRAY
14812: ARRAY
14813: PPUSH
14814: LD_INT 0
14816: PPUSH
14817: CALL_OW 16
14821: ST_TO_ADDR
14822: GO 14759
// end ; end ; if batt_fl then
14824: LD_LOC 40
14828: IFFALSE 14938
// setbattleflag ( tmp , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 2 ] , [ [ bfo_defend_bonus_human , 80 ] , [ bfo_defend_bonus_vehicle , 40 ] , [ bfo_defend_bonus_building , 0 ] , [ bfo_range , 17 ] , [ bfo_height , 100 ] ] ) ;
14830: LD_VAR 0 2
14834: PPUSH
14835: LD_EXP 42
14839: PUSH
14840: LD_EXP 50
14844: PUSH
14845: LD_VAR 0 2
14849: ARRAY
14850: ARRAY
14851: PUSH
14852: LD_INT 1
14854: ARRAY
14855: PPUSH
14856: LD_EXP 42
14860: PUSH
14861: LD_EXP 50
14865: PUSH
14866: LD_VAR 0 2
14870: ARRAY
14871: ARRAY
14872: PUSH
14873: LD_INT 2
14875: ARRAY
14876: PPUSH
14877: LD_INT 1
14879: PUSH
14880: LD_INT 80
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: PUSH
14887: LD_INT 2
14889: PUSH
14890: LD_INT 40
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: PUSH
14897: LD_INT 3
14899: PUSH
14900: LD_INT 0
14902: PUSH
14903: EMPTY
14904: LIST
14905: LIST
14906: PUSH
14907: LD_INT 10
14909: PUSH
14910: LD_INT 17
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: PUSH
14917: LD_INT 20
14919: PUSH
14920: LD_INT 100
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: PPUSH
14934: CALL_OW 418
// cl = class_scientistic ;
14938: LD_ADDR_VAR 0 5
14942: PUSH
14943: LD_INT 4
14945: ST_TO_ADDR
// for tmp2 = 1 to lidi do
14946: LD_ADDR_VAR 0 3
14950: PUSH
14951: DOUBLE
14952: LD_INT 1
14954: DEC
14955: ST_TO_ADDR
14956: LD_EXP 37
14960: PUSH
14961: FOR_TO
14962: IFFALSE 15054
// begin if tmp2 >= lidi / 2 then
14964: LD_VAR 0 3
14968: PUSH
14969: LD_EXP 37
14973: PUSH
14974: LD_INT 2
14976: DIVREAL
14977: GREATEREQUAL
14978: IFFALSE 14988
// cl = class_soldier ;
14980: LD_ADDR_VAR 0 5
14984: PUSH
14985: LD_INT 1
14987: ST_TO_ADDR
// preparehuman ( 0 , cl , skilly ) ;
14988: LD_INT 0
14990: PPUSH
14991: LD_VAR 0 5
14995: PPUSH
14996: LD_LOC 35
15000: PPUSH
15001: CALL_OW 380
// if tmp2 = 1 then
15005: LD_VAR 0 3
15009: PUSH
15010: LD_INT 1
15012: EQUAL
15013: IFFALSE 15023
// cl = class_engineer ;
15015: LD_ADDR_VAR 0 5
15019: PUSH
15020: LD_INT 2
15022: ST_TO_ADDR
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
15023: CALL_OW 44
15027: PPUSH
15028: LD_EXP 43
15032: PUSH
15033: LD_EXP 50
15037: PUSH
15038: LD_VAR 0 2
15042: ARRAY
15043: ARRAY
15044: PPUSH
15045: LD_INT 0
15047: PPUSH
15048: CALL_OW 49
// end ;
15052: GO 14961
15054: POP
15055: POP
// end ;
15056: GO 13888
15058: POP
15059: POP
// uc_side = 0 ;
15060: LD_ADDR_OWVAR 20
15064: PUSH
15065: LD_INT 0
15067: ST_TO_ADDR
// uc_nation = nation_nature ;
15068: LD_ADDR_OWVAR 21
15072: PUSH
15073: LD_INT 0
15075: ST_TO_ADDR
// for tmp = 1 to opoce do
15076: LD_ADDR_VAR 0 2
15080: PUSH
15081: DOUBLE
15082: LD_INT 1
15084: DEC
15085: ST_TO_ADDR
15086: LD_EXP 39
15090: PUSH
15091: FOR_TO
15092: IFFALSE 15124
// begin preparehuman ( 0 , class_apeman , 0 ) ;
15094: LD_INT 0
15096: PPUSH
15097: LD_INT 12
15099: PPUSH
15100: LD_INT 0
15102: PPUSH
15103: CALL_OW 380
// placeunitarea ( createhuman , les , false ) ;
15107: CALL_OW 44
15111: PPUSH
15112: LD_INT 4
15114: PPUSH
15115: LD_INT 0
15117: PPUSH
15118: CALL_OW 49
// end ;
15122: GO 15091
15124: POP
15125: POP
// case mp_sides_positions_ [ your_side ] of 1 :
15126: LD_EXP 50
15130: PUSH
15131: LD_OWVAR 2
15135: ARRAY
15136: PUSH
15137: LD_INT 1
15139: DOUBLE
15140: EQUAL
15141: IFTRUE 15145
15143: GO 15158
15145: POP
// centernowonxy ( 44 , 60 ) ; 2 :
15146: LD_INT 44
15148: PPUSH
15149: LD_INT 60
15151: PPUSH
15152: CALL_OW 86
15156: GO 15180
15158: LD_INT 2
15160: DOUBLE
15161: EQUAL
15162: IFTRUE 15166
15164: GO 15179
15166: POP
// centernowonxy ( 175 , 60 ) ; end ;
15167: LD_INT 175
15169: PPUSH
15170: LD_INT 60
15172: PPUSH
15173: CALL_OW 86
15177: GO 15180
15179: POP
// end ;
15180: LD_VAR 0 1
15184: RET
// on humandestroyed ( un , side , nat , x , y , dir , sex , cl ) marked 10 do if mp_sides_positions_ [ side ] = 1 then
15185: LD_EXP 50
15189: PUSH
15190: LD_VAR 0 2
15194: ARRAY
15195: PUSH
15196: LD_INT 1
15198: EQUAL
15199: IFFALSE 15217
// resp_cnt1 = resp_cnt1 + 1 else
15201: LD_ADDR_LOC 47
15205: PUSH
15206: LD_LOC 47
15210: PUSH
15211: LD_INT 1
15213: PLUS
15214: ST_TO_ADDR
15215: GO 15231
// resp_cnt2 = resp_cnt2 + 1 ;
15217: LD_ADDR_LOC 48
15221: PUSH
15222: LD_LOC 48
15226: PUSH
15227: LD_INT 1
15229: PLUS
15230: ST_TO_ADDR
15231: PPOPN 8
15233: END
// every 0 0$30 trigger resp_cnt1 >= people_resp marked 11 do
15234: LD_LOC 47
15238: PUSH
15239: LD_LOC 42
15243: GREATEREQUAL
15244: IFFALSE 15397
15246: GO 15248
15248: DISABLE
// begin resp_cnt1 = resp_cnt1 - people_resp ;
15249: LD_ADDR_LOC 47
15253: PUSH
15254: LD_LOC 47
15258: PUSH
15259: LD_LOC 42
15263: MINUS
15264: ST_TO_ADDR
// if not filterallunits ( [ [ f_side , pos1side ] , [ f_or , [ f_btype , b_depot ] , [ f_class , class_engineer ] ] ] ) then
15265: LD_INT 22
15267: PUSH
15268: LD_EXP 44
15272: PUSH
15273: EMPTY
15274: LIST
15275: LIST
15276: PUSH
15277: LD_INT 2
15279: PUSH
15280: LD_INT 30
15282: PUSH
15283: LD_INT 0
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: PUSH
15290: LD_INT 25
15292: PUSH
15293: LD_INT 2
15295: PUSH
15296: EMPTY
15297: LIST
15298: LIST
15299: PUSH
15300: EMPTY
15301: LIST
15302: LIST
15303: LIST
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: PPUSH
15309: CALL_OW 69
15313: NOT
15314: IFFALSE 15319
// begin enable ;
15316: ENABLE
// exit ;
15317: GO 15397
// end ; uc_side = pos1side ;
15319: LD_ADDR_OWVAR 20
15323: PUSH
15324: LD_EXP 44
15328: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos1side ] ;
15329: LD_ADDR_OWVAR 21
15333: PUSH
15334: LD_EXP 49
15338: PUSH
15339: LD_EXP 44
15343: ARRAY
15344: ST_TO_ADDR
// preparehuman ( 0 , class_soldier , skilly ) ;
15345: LD_INT 0
15347: PPUSH
15348: LD_INT 1
15350: PPUSH
15351: LD_LOC 35
15355: PPUSH
15356: CALL_OW 380
// wait ( 0 0$10 ) ;
15360: LD_INT 350
15362: PPUSH
15363: CALL_OW 67
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ pos1side ] ] , true ) ;
15367: CALL_OW 44
15371: PPUSH
15372: LD_EXP 43
15376: PUSH
15377: LD_EXP 50
15381: PUSH
15382: LD_EXP 44
15386: ARRAY
15387: ARRAY
15388: PPUSH
15389: LD_INT 1
15391: PPUSH
15392: CALL_OW 49
// enable ;
15396: ENABLE
// end ;
15397: END
// every 0 0$30 trigger resp_cnt2 >= people_resp marked 12 do
15398: LD_LOC 48
15402: PUSH
15403: LD_LOC 42
15407: GREATEREQUAL
15408: IFFALSE 15561
15410: GO 15412
15412: DISABLE
// begin resp_cnt2 = resp_cnt2 - people_resp ;
15413: LD_ADDR_LOC 48
15417: PUSH
15418: LD_LOC 48
15422: PUSH
15423: LD_LOC 42
15427: MINUS
15428: ST_TO_ADDR
// if not filterallunits ( [ [ f_side , pos2side ] , [ f_or , [ f_btype , b_depot ] , [ f_class , class_engineer ] ] ] ) then
15429: LD_INT 22
15431: PUSH
15432: LD_EXP 45
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: PUSH
15441: LD_INT 2
15443: PUSH
15444: LD_INT 30
15446: PUSH
15447: LD_INT 0
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: PUSH
15454: LD_INT 25
15456: PUSH
15457: LD_INT 2
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: LIST
15468: PUSH
15469: EMPTY
15470: LIST
15471: LIST
15472: PPUSH
15473: CALL_OW 69
15477: NOT
15478: IFFALSE 15483
// begin enable ;
15480: ENABLE
// exit ;
15481: GO 15561
// end ; uc_side = pos2side ;
15483: LD_ADDR_OWVAR 20
15487: PUSH
15488: LD_EXP 45
15492: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos2side ] ;
15493: LD_ADDR_OWVAR 21
15497: PUSH
15498: LD_EXP 49
15502: PUSH
15503: LD_EXP 45
15507: ARRAY
15508: ST_TO_ADDR
// preparehuman ( 0 , class_soldier , skilly ) ;
15509: LD_INT 0
15511: PPUSH
15512: LD_INT 1
15514: PPUSH
15515: LD_LOC 35
15519: PPUSH
15520: CALL_OW 380
// wait ( 0 0$10 ) ;
15524: LD_INT 350
15526: PPUSH
15527: CALL_OW 67
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ pos2side ] ] , true ) ;
15531: CALL_OW 44
15535: PPUSH
15536: LD_EXP 43
15540: PUSH
15541: LD_EXP 50
15545: PUSH
15546: LD_EXP 45
15550: ARRAY
15551: ARRAY
15552: PPUSH
15553: LD_INT 1
15555: PPUSH
15556: CALL_OW 49
// enable ;
15560: ENABLE
// end ;
15561: END
// every 0 0$1 marked 13 do
15562: GO 15564
15564: DISABLE
// begin if not filterallunits ( [ [ f_side , pos1side ] , [ f_type , unit_human ] ] ) then
15565: LD_INT 22
15567: PUSH
15568: LD_EXP 44
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PUSH
15577: LD_INT 21
15579: PUSH
15580: LD_INT 1
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: PPUSH
15591: CALL_OW 69
15595: NOT
15596: IFFALSE 15620
// if pos1side = your_side then
15598: LD_EXP 44
15602: PUSH
15603: LD_OWVAR 2
15607: EQUAL
15608: IFFALSE 15616
// youlostinmultiplayer else
15610: CALL_OW 107
15614: GO 15620
// youwininmultiplayer ;
15616: CALL_OW 106
// if not filterallunits ( [ [ f_side , pos2side ] , [ f_type , unit_human ] ] ) then
15620: LD_INT 22
15622: PUSH
15623: LD_EXP 45
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: PUSH
15632: LD_INT 21
15634: PUSH
15635: LD_INT 1
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PPUSH
15646: CALL_OW 69
15650: NOT
15651: IFFALSE 15675
// if pos2side = your_side then
15653: LD_EXP 45
15657: PUSH
15658: LD_OWVAR 2
15662: EQUAL
15663: IFFALSE 15671
// youlostinmultiplayer else
15665: CALL_OW 107
15669: GO 15675
// youwininmultiplayer ;
15671: CALL_OW 106
// end ; end_of_file
15675: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
15676: LD_INT 0
15678: PPUSH
15679: PPUSH
// for un in battle_flags_id do
15680: LD_ADDR_VAR 0 2
15684: PUSH
15685: LD_EXP 29
15689: PUSH
15690: FOR_IN
15691: IFFALSE 15766
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
15693: LD_VAR 0 2
15697: PPUSH
15698: LD_INT 1
15700: PUSH
15701: LD_LOC 49
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: PUSH
15710: LD_INT 2
15712: PUSH
15713: LD_LOC 49
15717: PUSH
15718: LD_INT 2
15720: DIV
15721: PUSH
15722: EMPTY
15723: LIST
15724: LIST
15725: PUSH
15726: LD_INT 3
15728: PUSH
15729: LD_LOC 49
15733: PUSH
15734: LD_INT 5
15736: DIV
15737: PUSH
15738: EMPTY
15739: LIST
15740: LIST
15741: PUSH
15742: LD_INT 20
15744: PUSH
15745: LD_LOC 49
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: PPUSH
15760: CALL_OW 423
15764: GO 15690
15766: POP
15767: POP
// end ;
15768: LD_VAR 0 1
15772: RET
// every 0 0$0.1 marked 55 do var un ;
15773: GO 15775
15775: DISABLE
15776: LD_INT 0
15778: PPUSH
// begin if not def_morale_flags then
15779: LD_EXP 66
15783: NOT
15784: IFFALSE 15788
// exit ;
15786: GO 15865
// if not morale_decreasing_time then
15788: LD_EXP 11
15792: NOT
15793: IFFALSE 15797
// exit ;
15795: GO 15865
// strength = 100 ;
15797: LD_ADDR_LOC 49
15801: PUSH
15802: LD_INT 100
15804: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
15805: LD_EXP 11
15809: PPUSH
15810: CALL_OW 67
// strength := strength - 1 ;
15814: LD_ADDR_LOC 49
15818: PUSH
15819: LD_LOC 49
15823: PUSH
15824: LD_INT 1
15826: MINUS
15827: ST_TO_ADDR
// Update_Flags ;
15828: CALL 15676 0 0
// until not strength ;
15832: LD_LOC 49
15836: NOT
15837: IFFALSE 15805
// for un in battle_flags_id do
15839: LD_ADDR_VAR 0 1
15843: PUSH
15844: LD_EXP 29
15848: PUSH
15849: FOR_IN
15850: IFFALSE 15863
// KillBattleFlag ( un ) ;
15852: LD_VAR 0 1
15856: PPUSH
15857: CALL_OW 419
15861: GO 15849
15863: POP
15864: POP
// end ; end_of_file
15865: PPOPN 1
15867: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
15868: LD_INT 0
15870: PPUSH
15871: PPUSH
// if ( not IAmSpec ) then
15872: CALL_OW 531
15876: NOT
15877: IFFALSE 15893
// Result := Limits_Info ^  ;
15879: LD_ADDR_VAR 0 1
15883: PUSH
15884: LD_LOC 61
15888: PUSH
15889: LD_STRING 
15891: ADD
15892: ST_TO_ADDR
// for i := 1 to 8 do
15893: LD_ADDR_VAR 0 2
15897: PUSH
15898: DOUBLE
15899: LD_INT 1
15901: DEC
15902: ST_TO_ADDR
15903: LD_INT 8
15905: PUSH
15906: FOR_TO
15907: IFFALSE 15952
// if Cheaters [ i ] then
15909: LD_LOC 62
15913: PUSH
15914: LD_VAR 0 2
15918: ARRAY
15919: IFFALSE 15950
// Result := Result ^ [ #Cheater , i , i ] ;
15921: LD_ADDR_VAR 0 1
15925: PUSH
15926: LD_VAR 0 1
15930: PUSH
15931: LD_STRING #Cheater
15933: PUSH
15934: LD_VAR 0 2
15938: PUSH
15939: LD_VAR 0 2
15943: PUSH
15944: EMPTY
15945: LIST
15946: LIST
15947: LIST
15948: ADD
15949: ST_TO_ADDR
15950: GO 15906
15952: POP
15953: POP
// end ;
15954: LD_VAR 0 1
15958: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
15959: LD_INT 0
15961: PPUSH
15962: PPUSH
15963: PPUSH
15964: PPUSH
15965: PPUSH
// case Game_Type of 10 :
15966: LD_EXP 56
15970: PUSH
15971: LD_INT 10
15973: DOUBLE
15974: EQUAL
15975: IFTRUE 15979
15977: GO 15990
15979: POP
// def_game_rules := 1 ; 11 :
15980: LD_ADDR_EXP 57
15984: PUSH
15985: LD_INT 1
15987: ST_TO_ADDR
15988: GO 16010
15990: LD_INT 11
15992: DOUBLE
15993: EQUAL
15994: IFTRUE 15998
15996: GO 16009
15998: POP
// def_game_rules := 3 ; end ;
15999: LD_ADDR_EXP 57
16003: PUSH
16004: LD_INT 3
16006: ST_TO_ADDR
16007: GO 16010
16009: POP
// case def_game_rules of 0 :
16010: LD_EXP 57
16014: PUSH
16015: LD_INT 0
16017: DOUBLE
16018: EQUAL
16019: IFTRUE 16023
16021: GO 16028
16023: POP
// exit ; 1 :
16024: GO 18086
16026: GO 17986
16028: LD_INT 1
16030: DOUBLE
16031: EQUAL
16032: IFTRUE 16036
16034: GO 16252
16036: POP
// begin def_base_level := 2 ;
16037: LD_ADDR_EXP 58
16041: PUSH
16042: LD_INT 2
16044: ST_TO_ADDR
// def_amount_of_people := 2 ;
16045: LD_ADDR_EXP 59
16049: PUSH
16050: LD_INT 2
16052: ST_TO_ADDR
// def_skill_level := 1 ;
16053: LD_ADDR_EXP 60
16057: PUSH
16058: LD_INT 1
16060: ST_TO_ADDR
// def_starting_resources := 2 ;
16061: LD_ADDR_EXP 61
16065: PUSH
16066: LD_INT 2
16068: ST_TO_ADDR
// def_shipments_density := 1 ;
16069: LD_ADDR_EXP 62
16073: PUSH
16074: LD_INT 1
16076: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
16077: LD_ADDR_EXP 63
16081: PUSH
16082: LD_INT 0
16084: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
16085: LD_ADDR_EXP 64
16089: PUSH
16090: LD_INT 1
16092: ST_TO_ADDR
// def_shared_vision := 1 ;
16093: LD_ADDR_EXP 65
16097: PUSH
16098: LD_INT 1
16100: ST_TO_ADDR
// def_morale_flags := 3 ;
16101: LD_ADDR_EXP 66
16105: PUSH
16106: LD_INT 3
16108: ST_TO_ADDR
// def_siberite_detection := 1 ;
16109: LD_ADDR_EXP 67
16113: PUSH
16114: LD_INT 1
16116: ST_TO_ADDR
// def_people_respawning := 1 ;
16117: LD_ADDR_EXP 68
16121: PUSH
16122: LD_INT 1
16124: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
16125: LD_ADDR_EXP 69
16129: PUSH
16130: LD_INT 1
16132: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16133: LD_ADDR_EXP 70
16137: PUSH
16138: LD_INT 0
16140: ST_TO_ADDR
// def_builduptime := 2 ;
16141: LD_ADDR_EXP 71
16145: PUSH
16146: LD_INT 2
16148: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
16149: LD_ADDR_VAR 0 2
16153: PUSH
16154: EMPTY
16155: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
16156: LD_ADDR_VAR 0 3
16160: PUSH
16161: EMPTY
16162: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16163: LD_ADDR_LOC 56
16167: PUSH
16168: EMPTY
16169: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16170: LD_ADDR_LOC 57
16174: PUSH
16175: EMPTY
16176: ST_TO_ADDR
// Banned_Controls := [ ] ;
16177: LD_ADDR_LOC 58
16181: PUSH
16182: EMPTY
16183: ST_TO_ADDR
// Banned_Engines := [ ] ;
16184: LD_ADDR_LOC 59
16188: PUSH
16189: EMPTY
16190: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
16191: LD_ADDR_LOC 54
16195: PUSH
16196: LD_INT 37
16198: PUSH
16199: EMPTY
16200: LIST
16201: PUSH
16202: LD_INT 4
16204: PUSH
16205: LD_INT 5
16207: PUSH
16208: EMPTY
16209: LIST
16210: LIST
16211: PUSH
16212: LD_INT 31
16214: PUSH
16215: LD_INT 32
16217: PUSH
16218: LD_INT 33
16220: PUSH
16221: EMPTY
16222: LIST
16223: LIST
16224: LIST
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: LIST
16230: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
16231: LD_ADDR_LOC 55
16235: PUSH
16236: LD_INT 2
16238: PUSH
16239: LD_INT 2
16241: PUSH
16242: LD_INT 4
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: LIST
16249: ST_TO_ADDR
// end ; 2 :
16250: GO 17986
16252: LD_INT 2
16254: DOUBLE
16255: EQUAL
16256: IFTRUE 16260
16258: GO 16469
16260: POP
// begin def_base_level := 1 ;
16261: LD_ADDR_EXP 58
16265: PUSH
16266: LD_INT 1
16268: ST_TO_ADDR
// def_amount_of_people := 2 ;
16269: LD_ADDR_EXP 59
16273: PUSH
16274: LD_INT 2
16276: ST_TO_ADDR
// def_skill_level := 3 ;
16277: LD_ADDR_EXP 60
16281: PUSH
16282: LD_INT 3
16284: ST_TO_ADDR
// def_starting_resources := 3 ;
16285: LD_ADDR_EXP 61
16289: PUSH
16290: LD_INT 3
16292: ST_TO_ADDR
// def_shipments_density := 2 ;
16293: LD_ADDR_EXP 62
16297: PUSH
16298: LD_INT 2
16300: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
16301: LD_ADDR_EXP 63
16305: PUSH
16306: LD_INT 1
16308: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
16309: LD_ADDR_EXP 64
16313: PUSH
16314: LD_INT 2
16316: ST_TO_ADDR
// def_shared_vision := 1 ;
16317: LD_ADDR_EXP 65
16321: PUSH
16322: LD_INT 1
16324: ST_TO_ADDR
// def_morale_flags := 0 ;
16325: LD_ADDR_EXP 66
16329: PUSH
16330: LD_INT 0
16332: ST_TO_ADDR
// def_siberite_detection := 1 ;
16333: LD_ADDR_EXP 67
16337: PUSH
16338: LD_INT 1
16340: ST_TO_ADDR
// def_people_respawning := 0 ;
16341: LD_ADDR_EXP 68
16345: PUSH
16346: LD_INT 0
16348: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
16349: LD_ADDR_EXP 69
16353: PUSH
16354: LD_INT 0
16356: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16357: LD_ADDR_EXP 70
16361: PUSH
16362: LD_INT 0
16364: ST_TO_ADDR
// def_builduptime := 2 ;
16365: LD_ADDR_EXP 71
16369: PUSH
16370: LD_INT 2
16372: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
16373: LD_ADDR_VAR 0 2
16377: PUSH
16378: LD_INT 1
16380: PUSH
16381: EMPTY
16382: LIST
16383: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
16384: LD_ADDR_VAR 0 3
16388: PUSH
16389: EMPTY
16390: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16391: LD_ADDR_LOC 56
16395: PUSH
16396: EMPTY
16397: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16398: LD_ADDR_LOC 57
16402: PUSH
16403: EMPTY
16404: ST_TO_ADDR
// Banned_Controls := [ ] ;
16405: LD_ADDR_LOC 58
16409: PUSH
16410: EMPTY
16411: ST_TO_ADDR
// Banned_Engines := [ ] ;
16412: LD_ADDR_LOC 59
16416: PUSH
16417: EMPTY
16418: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
16419: LD_ADDR_LOC 54
16423: PUSH
16424: LD_INT 4
16426: PUSH
16427: LD_INT 5
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PUSH
16434: LD_INT 31
16436: PUSH
16437: LD_INT 32
16439: PUSH
16440: LD_INT 33
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: LIST
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
16452: LD_ADDR_LOC 55
16456: PUSH
16457: LD_INT 1
16459: PUSH
16460: LD_INT 2
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: ST_TO_ADDR
// end ; 3 :
16467: GO 17986
16469: LD_INT 3
16471: DOUBLE
16472: EQUAL
16473: IFTRUE 16477
16475: GO 16720
16477: POP
// begin def_base_level := 1 ;
16478: LD_ADDR_EXP 58
16482: PUSH
16483: LD_INT 1
16485: ST_TO_ADDR
// def_amount_of_people := 2 ;
16486: LD_ADDR_EXP 59
16490: PUSH
16491: LD_INT 2
16493: ST_TO_ADDR
// def_skill_level := 3 ;
16494: LD_ADDR_EXP 60
16498: PUSH
16499: LD_INT 3
16501: ST_TO_ADDR
// def_starting_resources := 3 ;
16502: LD_ADDR_EXP 61
16506: PUSH
16507: LD_INT 3
16509: ST_TO_ADDR
// def_shipments_density := 1 ;
16510: LD_ADDR_EXP 62
16514: PUSH
16515: LD_INT 1
16517: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
16518: LD_ADDR_EXP 63
16522: PUSH
16523: LD_INT 0
16525: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
16526: LD_ADDR_EXP 64
16530: PUSH
16531: LD_INT 1
16533: ST_TO_ADDR
// def_shared_vision := 1 ;
16534: LD_ADDR_EXP 65
16538: PUSH
16539: LD_INT 1
16541: ST_TO_ADDR
// def_morale_flags := 0 ;
16542: LD_ADDR_EXP 66
16546: PUSH
16547: LD_INT 0
16549: ST_TO_ADDR
// def_siberite_detection := 1 ;
16550: LD_ADDR_EXP 67
16554: PUSH
16555: LD_INT 1
16557: ST_TO_ADDR
// def_people_respawning := 0 ;
16558: LD_ADDR_EXP 68
16562: PUSH
16563: LD_INT 0
16565: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
16566: LD_ADDR_EXP 69
16570: PUSH
16571: LD_INT 2
16573: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16574: LD_ADDR_EXP 70
16578: PUSH
16579: LD_INT 0
16581: ST_TO_ADDR
// def_builduptime := 1 ;
16582: LD_ADDR_EXP 71
16586: PUSH
16587: LD_INT 1
16589: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
16590: LD_ADDR_VAR 0 2
16594: PUSH
16595: LD_INT 23
16597: PUSH
16598: EMPTY
16599: LIST
16600: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
16601: LD_ADDR_VAR 0 3
16605: PUSH
16606: LD_INT 2
16608: PUSH
16609: LD_INT 37
16611: PUSH
16612: LD_INT 32
16614: PUSH
16615: LD_INT 33
16617: PUSH
16618: LD_INT 36
16620: PUSH
16621: LD_INT 16
16623: PUSH
16624: LD_INT 23
16626: PUSH
16627: LD_INT 21
16629: PUSH
16630: LD_INT 18
16632: PUSH
16633: LD_INT 22
16635: PUSH
16636: LD_INT 20
16638: PUSH
16639: LD_INT 19
16641: PUSH
16642: LD_INT 25
16644: PUSH
16645: LD_INT 17
16647: PUSH
16648: LD_INT 24
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16668: LD_ADDR_LOC 56
16672: PUSH
16673: EMPTY
16674: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16675: LD_ADDR_LOC 57
16679: PUSH
16680: EMPTY
16681: ST_TO_ADDR
// Banned_Controls := [ ] ;
16682: LD_ADDR_LOC 58
16686: PUSH
16687: EMPTY
16688: ST_TO_ADDR
// Banned_Engines := [ ] ;
16689: LD_ADDR_LOC 59
16693: PUSH
16694: EMPTY
16695: ST_TO_ADDR
// Restricted_Builds := [ ] ;
16696: LD_ADDR_LOC 54
16700: PUSH
16701: EMPTY
16702: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
16703: LD_ADDR_LOC 55
16707: PUSH
16708: EMPTY
16709: ST_TO_ADDR
// No_Mechs := true ;
16710: LD_ADDR_EXP 72
16714: PUSH
16715: LD_INT 1
16717: ST_TO_ADDR
// end ; 4 :
16718: GO 17986
16720: LD_INT 4
16722: DOUBLE
16723: EQUAL
16724: IFTRUE 16728
16726: GO 16903
16728: POP
// begin def_base_level := 1 ;
16729: LD_ADDR_EXP 58
16733: PUSH
16734: LD_INT 1
16736: ST_TO_ADDR
// def_amount_of_people := 2 ;
16737: LD_ADDR_EXP 59
16741: PUSH
16742: LD_INT 2
16744: ST_TO_ADDR
// def_skill_level := 3 ;
16745: LD_ADDR_EXP 60
16749: PUSH
16750: LD_INT 3
16752: ST_TO_ADDR
// def_starting_resources := 3 ;
16753: LD_ADDR_EXP 61
16757: PUSH
16758: LD_INT 3
16760: ST_TO_ADDR
// def_shipments_density := 2 ;
16761: LD_ADDR_EXP 62
16765: PUSH
16766: LD_INT 2
16768: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
16769: LD_ADDR_EXP 63
16773: PUSH
16774: LD_INT 1
16776: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
16777: LD_ADDR_EXP 64
16781: PUSH
16782: LD_INT 2
16784: ST_TO_ADDR
// def_shared_vision := 1 ;
16785: LD_ADDR_EXP 65
16789: PUSH
16790: LD_INT 1
16792: ST_TO_ADDR
// def_morale_flags := 0 ;
16793: LD_ADDR_EXP 66
16797: PUSH
16798: LD_INT 0
16800: ST_TO_ADDR
// def_siberite_detection := 1 ;
16801: LD_ADDR_EXP 67
16805: PUSH
16806: LD_INT 1
16808: ST_TO_ADDR
// def_people_respawning := 0 ;
16809: LD_ADDR_EXP 68
16813: PUSH
16814: LD_INT 0
16816: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
16817: LD_ADDR_EXP 69
16821: PUSH
16822: LD_INT 0
16824: ST_TO_ADDR
// def_siberite_bomb := 1 ;
16825: LD_ADDR_EXP 70
16829: PUSH
16830: LD_INT 1
16832: ST_TO_ADDR
// def_builduptime := 3 ;
16833: LD_ADDR_EXP 71
16837: PUSH
16838: LD_INT 3
16840: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
16841: LD_ADDR_VAR 0 2
16845: PUSH
16846: LD_INT 1
16848: PUSH
16849: EMPTY
16850: LIST
16851: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
16852: LD_ADDR_VAR 0 3
16856: PUSH
16857: EMPTY
16858: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16859: LD_ADDR_LOC 56
16863: PUSH
16864: EMPTY
16865: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16866: LD_ADDR_LOC 57
16870: PUSH
16871: EMPTY
16872: ST_TO_ADDR
// Banned_Controls := [ ] ;
16873: LD_ADDR_LOC 58
16877: PUSH
16878: EMPTY
16879: ST_TO_ADDR
// Banned_Engines := [ ] ;
16880: LD_ADDR_LOC 59
16884: PUSH
16885: EMPTY
16886: ST_TO_ADDR
// Restricted_Builds := [ ] ;
16887: LD_ADDR_LOC 54
16891: PUSH
16892: EMPTY
16893: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
16894: LD_ADDR_LOC 55
16898: PUSH
16899: EMPTY
16900: ST_TO_ADDR
// end ; 5 :
16901: GO 17986
16903: LD_INT 5
16905: DOUBLE
16906: EQUAL
16907: IFTRUE 16911
16909: GO 17160
16911: POP
// begin def_base_level := 0 ;
16912: LD_ADDR_EXP 58
16916: PUSH
16917: LD_INT 0
16919: ST_TO_ADDR
// def_amount_of_people := 0 ;
16920: LD_ADDR_EXP 59
16924: PUSH
16925: LD_INT 0
16927: ST_TO_ADDR
// def_skill_level := 0 ;
16928: LD_ADDR_EXP 60
16932: PUSH
16933: LD_INT 0
16935: ST_TO_ADDR
// def_starting_resources := 0 ;
16936: LD_ADDR_EXP 61
16940: PUSH
16941: LD_INT 0
16943: ST_TO_ADDR
// def_shipments_density := 0 ;
16944: LD_ADDR_EXP 62
16948: PUSH
16949: LD_INT 0
16951: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
16952: LD_ADDR_EXP 63
16956: PUSH
16957: LD_INT 0
16959: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
16960: LD_ADDR_EXP 64
16964: PUSH
16965: LD_INT 0
16967: ST_TO_ADDR
// def_shared_vision := 1 ;
16968: LD_ADDR_EXP 65
16972: PUSH
16973: LD_INT 1
16975: ST_TO_ADDR
// def_morale_flags := 0 ;
16976: LD_ADDR_EXP 66
16980: PUSH
16981: LD_INT 0
16983: ST_TO_ADDR
// def_siberite_detection := 0 ;
16984: LD_ADDR_EXP 67
16988: PUSH
16989: LD_INT 0
16991: ST_TO_ADDR
// def_people_respawning := 1 ;
16992: LD_ADDR_EXP 68
16996: PUSH
16997: LD_INT 1
16999: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
17000: LD_ADDR_EXP 69
17004: PUSH
17005: LD_INT 1
17007: ST_TO_ADDR
// def_siberite_bomb := 0 ;
17008: LD_ADDR_EXP 70
17012: PUSH
17013: LD_INT 0
17015: ST_TO_ADDR
// def_builduptime := 0 ;
17016: LD_ADDR_EXP 71
17020: PUSH
17021: LD_INT 0
17023: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
17024: LD_ADDR_VAR 0 2
17028: PUSH
17029: LD_INT 10
17031: PUSH
17032: LD_INT 3
17034: PUSH
17035: EMPTY
17036: LIST
17037: LIST
17038: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
17039: LD_ADDR_VAR 0 3
17043: PUSH
17044: LD_INT 12
17046: PUSH
17047: LD_INT 11
17049: PUSH
17050: LD_INT 14
17052: PUSH
17053: LD_INT 13
17055: PUSH
17056: LD_INT 5
17058: PUSH
17059: LD_INT 24
17061: PUSH
17062: LD_INT 21
17064: PUSH
17065: LD_INT 33
17067: PUSH
17068: LD_INT 36
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: LIST
17081: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
17082: LD_ADDR_LOC 56
17086: PUSH
17087: LD_INT 31
17089: PUSH
17090: EMPTY
17091: LIST
17092: ST_TO_ADDR
// Banned_Chassis := [ ] ;
17093: LD_ADDR_LOC 57
17097: PUSH
17098: EMPTY
17099: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
17100: LD_ADDR_LOC 58
17104: PUSH
17105: LD_INT 2
17107: PUSH
17108: EMPTY
17109: LIST
17110: ST_TO_ADDR
// Banned_Engines := [ ] ;
17111: LD_ADDR_LOC 59
17115: PUSH
17116: EMPTY
17117: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
17118: LD_ADDR_LOC 54
17122: PUSH
17123: LD_INT 4
17125: PUSH
17126: EMPTY
17127: LIST
17128: PUSH
17129: LD_INT 31
17131: PUSH
17132: LD_INT 32
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
17143: LD_ADDR_LOC 55
17147: PUSH
17148: LD_INT 1
17150: PUSH
17151: LD_INT 1
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: ST_TO_ADDR
// end ; 6 :
17158: GO 17986
17160: LD_INT 6
17162: DOUBLE
17163: EQUAL
17164: IFTRUE 17168
17166: GO 17371
17168: POP
// begin def_base_level := 1 ;
17169: LD_ADDR_EXP 58
17173: PUSH
17174: LD_INT 1
17176: ST_TO_ADDR
// def_amount_of_people := 2 ;
17177: LD_ADDR_EXP 59
17181: PUSH
17182: LD_INT 2
17184: ST_TO_ADDR
// def_skill_level := 3 ;
17185: LD_ADDR_EXP 60
17189: PUSH
17190: LD_INT 3
17192: ST_TO_ADDR
// def_starting_resources := 3 ;
17193: LD_ADDR_EXP 61
17197: PUSH
17198: LD_INT 3
17200: ST_TO_ADDR
// def_shipments_density := 1 ;
17201: LD_ADDR_EXP 62
17205: PUSH
17206: LD_INT 1
17208: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
17209: LD_ADDR_EXP 63
17213: PUSH
17214: LD_INT 0
17216: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
17217: LD_ADDR_EXP 64
17221: PUSH
17222: LD_INT 1
17224: ST_TO_ADDR
// def_shared_vision := 1 ;
17225: LD_ADDR_EXP 65
17229: PUSH
17230: LD_INT 1
17232: ST_TO_ADDR
// def_morale_flags := 0 ;
17233: LD_ADDR_EXP 66
17237: PUSH
17238: LD_INT 0
17240: ST_TO_ADDR
// def_siberite_detection := 1 ;
17241: LD_ADDR_EXP 67
17245: PUSH
17246: LD_INT 1
17248: ST_TO_ADDR
// def_people_respawning := 2 ;
17249: LD_ADDR_EXP 68
17253: PUSH
17254: LD_INT 2
17256: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
17257: LD_ADDR_EXP 69
17261: PUSH
17262: LD_INT 1
17264: ST_TO_ADDR
// def_siberite_bomb := 0 ;
17265: LD_ADDR_EXP 70
17269: PUSH
17270: LD_INT 0
17272: ST_TO_ADDR
// def_builduptime := 1 ;
17273: LD_ADDR_EXP 71
17277: PUSH
17278: LD_INT 1
17280: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
17281: LD_ADDR_VAR 0 2
17285: PUSH
17286: LD_INT 23
17288: PUSH
17289: EMPTY
17290: LIST
17291: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
17292: LD_ADDR_VAR 0 3
17296: PUSH
17297: LD_INT 2
17299: PUSH
17300: LD_INT 37
17302: PUSH
17303: LD_INT 31
17305: PUSH
17306: LD_INT 32
17308: PUSH
17309: LD_INT 33
17311: PUSH
17312: EMPTY
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: ST_TO_ADDR
// Banned_Weapons := [ ] ;
17319: LD_ADDR_LOC 56
17323: PUSH
17324: EMPTY
17325: ST_TO_ADDR
// Banned_Chassis := [ ] ;
17326: LD_ADDR_LOC 57
17330: PUSH
17331: EMPTY
17332: ST_TO_ADDR
// Banned_Controls := [ ] ;
17333: LD_ADDR_LOC 58
17337: PUSH
17338: EMPTY
17339: ST_TO_ADDR
// Banned_Engines := [ ] ;
17340: LD_ADDR_LOC 59
17344: PUSH
17345: EMPTY
17346: ST_TO_ADDR
// Restricted_Builds := [ ] ;
17347: LD_ADDR_LOC 54
17351: PUSH
17352: EMPTY
17353: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
17354: LD_ADDR_LOC 55
17358: PUSH
17359: EMPTY
17360: ST_TO_ADDR
// No_Mechs := true ;
17361: LD_ADDR_EXP 72
17365: PUSH
17366: LD_INT 1
17368: ST_TO_ADDR
// end ; 7 :
17369: GO 17986
17371: LD_INT 7
17373: DOUBLE
17374: EQUAL
17375: IFTRUE 17379
17377: GO 17577
17379: POP
// begin def_base_level := 1 ;
17380: LD_ADDR_EXP 58
17384: PUSH
17385: LD_INT 1
17387: ST_TO_ADDR
// def_amount_of_people := 2 ;
17388: LD_ADDR_EXP 59
17392: PUSH
17393: LD_INT 2
17395: ST_TO_ADDR
// def_skill_level := 3 ;
17396: LD_ADDR_EXP 60
17400: PUSH
17401: LD_INT 3
17403: ST_TO_ADDR
// def_starting_resources := 3 ;
17404: LD_ADDR_EXP 61
17408: PUSH
17409: LD_INT 3
17411: ST_TO_ADDR
// def_shipments_density := 1 ;
17412: LD_ADDR_EXP 62
17416: PUSH
17417: LD_INT 1
17419: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
17420: LD_ADDR_EXP 63
17424: PUSH
17425: LD_INT 1
17427: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
17428: LD_ADDR_EXP 64
17432: PUSH
17433: LD_INT 2
17435: ST_TO_ADDR
// def_shared_vision := 1 ;
17436: LD_ADDR_EXP 65
17440: PUSH
17441: LD_INT 1
17443: ST_TO_ADDR
// def_morale_flags := 0 ;
17444: LD_ADDR_EXP 66
17448: PUSH
17449: LD_INT 0
17451: ST_TO_ADDR
// def_siberite_detection := 1 ;
17452: LD_ADDR_EXP 67
17456: PUSH
17457: LD_INT 1
17459: ST_TO_ADDR
// def_people_respawning := 0 ;
17460: LD_ADDR_EXP 68
17464: PUSH
17465: LD_INT 0
17467: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
17468: LD_ADDR_EXP 69
17472: PUSH
17473: LD_INT 1
17475: ST_TO_ADDR
// def_siberite_bomb := 0 ;
17476: LD_ADDR_EXP 70
17480: PUSH
17481: LD_INT 0
17483: ST_TO_ADDR
// def_builduptime := 3 ;
17484: LD_ADDR_EXP 71
17488: PUSH
17489: LD_INT 3
17491: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
17492: LD_ADDR_VAR 0 2
17496: PUSH
17497: LD_INT 23
17499: PUSH
17500: EMPTY
17501: LIST
17502: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
17503: LD_ADDR_VAR 0 3
17507: PUSH
17508: LD_INT 37
17510: PUSH
17511: EMPTY
17512: LIST
17513: ST_TO_ADDR
// Banned_Weapons := [ ] ;
17514: LD_ADDR_LOC 56
17518: PUSH
17519: EMPTY
17520: ST_TO_ADDR
// Banned_Chassis := [ ] ;
17521: LD_ADDR_LOC 57
17525: PUSH
17526: EMPTY
17527: ST_TO_ADDR
// Banned_Controls := [ ] ;
17528: LD_ADDR_LOC 58
17532: PUSH
17533: EMPTY
17534: ST_TO_ADDR
// Banned_Engines := [ ] ;
17535: LD_ADDR_LOC 59
17539: PUSH
17540: EMPTY
17541: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
17542: LD_ADDR_LOC 54
17546: PUSH
17547: LD_INT 31
17549: PUSH
17550: LD_INT 32
17552: PUSH
17553: LD_INT 33
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: LIST
17560: PUSH
17561: EMPTY
17562: LIST
17563: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
17564: LD_ADDR_LOC 55
17568: PUSH
17569: LD_INT 10
17571: PUSH
17572: EMPTY
17573: LIST
17574: ST_TO_ADDR
// end ; 8 :
17575: GO 17986
17577: LD_INT 8
17579: DOUBLE
17580: EQUAL
17581: IFTRUE 17585
17583: GO 17985
17585: POP
// begin def_base_level := 0 ;
17586: LD_ADDR_EXP 58
17590: PUSH
17591: LD_INT 0
17593: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
17594: LD_ADDR_EXP 59
17598: PUSH
17599: LD_INT 0
17601: PPUSH
17602: LD_INT 1
17604: PPUSH
17605: CALL_OW 12
17609: ST_TO_ADDR
// def_skill_level := 0 ;
17610: LD_ADDR_EXP 60
17614: PUSH
17615: LD_INT 0
17617: ST_TO_ADDR
// def_starting_resources := 2 ;
17618: LD_ADDR_EXP 61
17622: PUSH
17623: LD_INT 2
17625: ST_TO_ADDR
// def_shipments_density := 1 ;
17626: LD_ADDR_EXP 62
17630: PUSH
17631: LD_INT 1
17633: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
17634: LD_ADDR_EXP 63
17638: PUSH
17639: LD_INT 0
17641: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
17642: LD_ADDR_EXP 64
17646: PUSH
17647: LD_INT 0
17649: ST_TO_ADDR
// def_shared_vision := 1 ;
17650: LD_ADDR_EXP 65
17654: PUSH
17655: LD_INT 1
17657: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
17658: LD_ADDR_EXP 66
17662: PUSH
17663: LD_INT 0
17665: PPUSH
17666: LD_INT 2
17668: PPUSH
17669: CALL_OW 12
17673: ST_TO_ADDR
// def_siberite_detection := 0 ;
17674: LD_ADDR_EXP 67
17678: PUSH
17679: LD_INT 0
17681: ST_TO_ADDR
// def_people_respawning := 0 ;
17682: LD_ADDR_EXP 68
17686: PUSH
17687: LD_INT 0
17689: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
17690: LD_ADDR_EXP 69
17694: PUSH
17695: LD_INT 2
17697: ST_TO_ADDR
// def_siberite_bomb := 0 ;
17698: LD_ADDR_EXP 70
17702: PUSH
17703: LD_INT 0
17705: ST_TO_ADDR
// def_builduptime := 0 ;
17706: LD_ADDR_EXP 71
17710: PUSH
17711: LD_INT 0
17713: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
17714: LD_ADDR_VAR 0 2
17718: PUSH
17719: LD_INT 23
17721: PUSH
17722: LD_INT 20
17724: PUSH
17725: LD_INT 40
17727: PUSH
17728: LD_INT 47
17730: PUSH
17731: LD_INT 46
17733: PUSH
17734: LD_INT 39
17736: PUSH
17737: LD_INT 71
17739: PUSH
17740: LD_INT 34
17742: PUSH
17743: LD_INT 41
17745: PUSH
17746: LD_INT 44
17748: PUSH
17749: LD_INT 17
17751: PUSH
17752: LD_INT 16
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
17769: LD_ADDR_VAR 0 3
17773: PUSH
17774: LD_INT 37
17776: PUSH
17777: LD_INT 5
17779: PUSH
17780: LD_INT 13
17782: PUSH
17783: LD_INT 34
17785: PUSH
17786: LD_INT 12
17788: PUSH
17789: LD_INT 15
17791: PUSH
17792: LD_INT 11
17794: PUSH
17795: LD_INT 14
17797: PUSH
17798: LD_INT 29
17800: PUSH
17801: LD_INT 30
17803: PUSH
17804: LD_INT 28
17806: PUSH
17807: LD_INT 24
17809: PUSH
17810: LD_INT 25
17812: PUSH
17813: LD_INT 20
17815: PUSH
17816: LD_INT 21
17818: PUSH
17819: LD_INT 22
17821: PUSH
17822: LD_INT 36
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: LIST
17843: ST_TO_ADDR
// Banned_Weapons := [ ] ;
17844: LD_ADDR_LOC 56
17848: PUSH
17849: EMPTY
17850: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
17851: LD_ADDR_LOC 57
17855: PUSH
17856: LD_INT 14
17858: PUSH
17859: EMPTY
17860: LIST
17861: ST_TO_ADDR
// Banned_Controls := [ ] ;
17862: LD_ADDR_LOC 58
17866: PUSH
17867: EMPTY
17868: ST_TO_ADDR
// Banned_Engines := [ ] ;
17869: LD_ADDR_LOC 59
17873: PUSH
17874: EMPTY
17875: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
17876: LD_ADDR_LOC 54
17880: PUSH
17881: LD_INT 31
17883: PUSH
17884: LD_INT 32
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: PUSH
17891: LD_INT 4
17893: PUSH
17894: EMPTY
17895: LIST
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
17901: LD_ADDR_LOC 55
17905: PUSH
17906: LD_INT 2
17908: PUSH
17909: LD_INT 1
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: ST_TO_ADDR
// for i := 1 to 8 do
17916: LD_ADDR_VAR 0 4
17920: PUSH
17921: DOUBLE
17922: LD_INT 1
17924: DEC
17925: ST_TO_ADDR
17926: LD_INT 8
17928: PUSH
17929: FOR_TO
17930: IFFALSE 17981
// if ( Side_Nations [ i ] = 3 ) then
17932: LD_EXP 19
17936: PUSH
17937: LD_VAR 0 4
17941: ARRAY
17942: PUSH
17943: LD_INT 3
17945: EQUAL
17946: IFFALSE 17979
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
17948: LD_ADDR_EXP 19
17952: PUSH
17953: LD_EXP 19
17957: PPUSH
17958: LD_VAR 0 4
17962: PPUSH
17963: LD_INT 1
17965: PPUSH
17966: LD_INT 2
17968: PPUSH
17969: CALL_OW 12
17973: PPUSH
17974: CALL_OW 1
17978: ST_TO_ADDR
17979: GO 17929
17981: POP
17982: POP
// end ; end ;
17983: GO 17986
17985: POP
// for i := 1 to 8 do
17986: LD_ADDR_VAR 0 4
17990: PUSH
17991: DOUBLE
17992: LD_INT 1
17994: DEC
17995: ST_TO_ADDR
17996: LD_INT 8
17998: PUSH
17999: FOR_TO
18000: IFFALSE 18084
// if Side_Positions [ i ] then
18002: LD_EXP 18
18006: PUSH
18007: LD_VAR 0 4
18011: ARRAY
18012: IFFALSE 18082
// begin for j in Unavailable_Techs do
18014: LD_ADDR_VAR 0 5
18018: PUSH
18019: LD_VAR 0 2
18023: PUSH
18024: FOR_IN
18025: IFFALSE 18046
// SetTech ( j , i , 0 ) ;
18027: LD_VAR 0 5
18031: PPUSH
18032: LD_VAR 0 4
18036: PPUSH
18037: LD_INT 0
18039: PPUSH
18040: CALL_OW 322
18044: GO 18024
18046: POP
18047: POP
// for j in Unavailable_Builds do
18048: LD_ADDR_VAR 0 5
18052: PUSH
18053: LD_VAR 0 3
18057: PUSH
18058: FOR_IN
18059: IFFALSE 18080
// SetRestrict ( j , i , 0 ) ;
18061: LD_VAR 0 5
18065: PPUSH
18066: LD_VAR 0 4
18070: PPUSH
18071: LD_INT 0
18073: PPUSH
18074: CALL_OW 324
18078: GO 18058
18080: POP
18081: POP
// end ;
18082: GO 17999
18084: POP
18085: POP
// end ;
18086: LD_VAR 0 1
18090: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
18091: LD_INT 0
18093: PPUSH
18094: PPUSH
18095: PPUSH
18096: PPUSH
18097: PPUSH
18098: PPUSH
18099: PPUSH
// for i := 1 to Restricted_Builds do
18100: LD_ADDR_VAR 0 2
18104: PUSH
18105: DOUBLE
18106: LD_INT 1
18108: DEC
18109: ST_TO_ADDR
18110: LD_LOC 54
18114: PUSH
18115: FOR_TO
18116: IFFALSE 18426
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
18118: LD_LOC 54
18122: PUSH
18123: LD_VAR 0 2
18127: ARRAY
18128: PUSH
18129: LD_INT 1
18131: ARRAY
18132: PUSH
18133: LD_INT 31
18135: DOUBLE
18136: EQUAL
18137: IFTRUE 18153
18139: LD_INT 32
18141: DOUBLE
18142: EQUAL
18143: IFTRUE 18153
18145: LD_INT 33
18147: DOUBLE
18148: EQUAL
18149: IFTRUE 18153
18151: GO 18164
18153: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
18154: LD_ADDR_VAR 0 6
18158: PUSH
18159: LD_STRING #Turrets
18161: ST_TO_ADDR
18162: GO 18209
18164: LD_INT 4
18166: DOUBLE
18167: EQUAL
18168: IFTRUE 18178
18170: LD_INT 5
18172: DOUBLE
18173: EQUAL
18174: IFTRUE 18178
18176: GO 18189
18178: POP
// btype := #Armouries ; b_Behemoth :
18179: LD_ADDR_VAR 0 6
18183: PUSH
18184: LD_STRING #Armouries
18186: ST_TO_ADDR
18187: GO 18209
18189: LD_INT 37
18191: DOUBLE
18192: EQUAL
18193: IFTRUE 18197
18195: GO 18208
18197: POP
// btype := #Behemoths ; end ;
18198: LD_ADDR_VAR 0 6
18202: PUSH
18203: LD_STRING #Behemoths
18205: ST_TO_ADDR
18206: GO 18209
18208: POP
// list := [ ] ;
18209: LD_ADDR_VAR 0 7
18213: PUSH
18214: EMPTY
18215: ST_TO_ADDR
// for j := 1 to 8 do
18216: LD_ADDR_VAR 0 3
18220: PUSH
18221: DOUBLE
18222: LD_INT 1
18224: DEC
18225: ST_TO_ADDR
18226: LD_INT 8
18228: PUSH
18229: FOR_TO
18230: IFFALSE 18323
// if Side_Positions [ j ] then
18232: LD_EXP 18
18236: PUSH
18237: LD_VAR 0 3
18241: ARRAY
18242: IFFALSE 18321
// begin amount := 0 ;
18244: LD_ADDR_VAR 0 5
18248: PUSH
18249: LD_INT 0
18251: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
18252: LD_ADDR_VAR 0 4
18256: PUSH
18257: LD_LOC 54
18261: PUSH
18262: LD_VAR 0 2
18266: ARRAY
18267: PUSH
18268: FOR_IN
18269: IFFALSE 18317
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
18271: LD_ADDR_VAR 0 5
18275: PUSH
18276: LD_VAR 0 5
18280: PUSH
18281: LD_INT 22
18283: PUSH
18284: LD_VAR 0 3
18288: PUSH
18289: EMPTY
18290: LIST
18291: LIST
18292: PUSH
18293: LD_INT 30
18295: PUSH
18296: LD_VAR 0 4
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PPUSH
18309: CALL_OW 69
18313: PLUS
18314: ST_TO_ADDR
18315: GO 18268
18317: POP
18318: POP
// break ;
18319: GO 18323
// end ;
18321: GO 18229
18323: POP
18324: POP
// list := [ ] ;
18325: LD_ADDR_VAR 0 7
18329: PUSH
18330: EMPTY
18331: ST_TO_ADDR
// for j := 1 to 8 do
18332: LD_ADDR_VAR 0 3
18336: PUSH
18337: DOUBLE
18338: LD_INT 1
18340: DEC
18341: ST_TO_ADDR
18342: LD_INT 8
18344: PUSH
18345: FOR_TO
18346: IFFALSE 18366
// list := list ^ amount ;
18348: LD_ADDR_VAR 0 7
18352: PUSH
18353: LD_VAR 0 7
18357: PUSH
18358: LD_VAR 0 5
18362: ADD
18363: ST_TO_ADDR
18364: GO 18345
18366: POP
18367: POP
// Already_Built := Already_Built ^ [ list ] ;
18368: LD_ADDR_LOC 60
18372: PUSH
18373: LD_LOC 60
18377: PUSH
18378: LD_VAR 0 7
18382: PUSH
18383: EMPTY
18384: LIST
18385: ADD
18386: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
18387: LD_ADDR_LOC 61
18391: PUSH
18392: LD_LOC 61
18396: PUSH
18397: LD_VAR 0 6
18401: PUSH
18402: LD_VAR 0 5
18406: PUSH
18407: LD_LOC 55
18411: PUSH
18412: LD_VAR 0 2
18416: ARRAY
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: LIST
18422: ADD
18423: ST_TO_ADDR
// end ;
18424: GO 18115
18426: POP
18427: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
18428: LD_ADDR_LOC 62
18432: PUSH
18433: LD_INT 0
18435: PUSH
18436: LD_INT 0
18438: PUSH
18439: LD_INT 0
18441: PUSH
18442: LD_INT 0
18444: PUSH
18445: LD_INT 0
18447: PUSH
18448: LD_INT 0
18450: PUSH
18451: LD_INT 0
18453: PUSH
18454: LD_INT 0
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: ST_TO_ADDR
// if Limits_Info then
18467: LD_LOC 61
18471: IFFALSE 18487
// Limits_Info := #Limits ^ Limits_Info ;
18473: LD_ADDR_LOC 61
18477: PUSH
18478: LD_STRING #Limits
18480: PUSH
18481: LD_LOC 61
18485: ADD
18486: ST_TO_ADDR
// end ;
18487: LD_VAR 0 1
18491: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
18492: LD_INT 0
18494: PPUSH
18495: PPUSH
18496: PPUSH
18497: PPUSH
// for i := 1 to Restricted_Builds do
18498: LD_ADDR_VAR 0 7
18502: PUSH
18503: DOUBLE
18504: LD_INT 1
18506: DEC
18507: ST_TO_ADDR
18508: LD_LOC 54
18512: PUSH
18513: FOR_TO
18514: IFFALSE 18937
// if BType in Restricted_Builds [ i ] then
18516: LD_VAR 0 2
18520: PUSH
18521: LD_LOC 54
18525: PUSH
18526: LD_VAR 0 7
18530: ARRAY
18531: IN
18532: IFFALSE 18935
// begin if old_side then
18534: LD_VAR 0 4
18538: IFFALSE 18664
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
18540: LD_LOC 60
18544: PUSH
18545: LD_VAR 0 7
18549: ARRAY
18550: PUSH
18551: LD_VAR 0 3
18555: ARRAY
18556: PUSH
18557: LD_VAR 0 5
18561: PLUS
18562: PUSH
18563: LD_LOC 55
18567: PUSH
18568: LD_VAR 0 7
18572: ARRAY
18573: GREATER
18574: IFFALSE 18600
// begin SetSide ( un , old_side ) ;
18576: LD_VAR 0 1
18580: PPUSH
18581: LD_VAR 0 4
18585: PPUSH
18586: CALL_OW 235
// count := 0 ;
18590: LD_ADDR_VAR 0 5
18594: PUSH
18595: LD_INT 0
18597: ST_TO_ADDR
// end else
18598: GO 18664
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
18600: LD_ADDR_LOC 60
18604: PUSH
18605: LD_LOC 60
18609: PPUSH
18610: LD_VAR 0 7
18614: PPUSH
18615: LD_LOC 60
18619: PUSH
18620: LD_VAR 0 7
18624: ARRAY
18625: PPUSH
18626: LD_VAR 0 4
18630: PPUSH
18631: LD_LOC 60
18635: PUSH
18636: LD_VAR 0 7
18640: ARRAY
18641: PUSH
18642: LD_VAR 0 4
18646: ARRAY
18647: PUSH
18648: LD_VAR 0 5
18652: MINUS
18653: PPUSH
18654: CALL_OW 1
18658: PPUSH
18659: CALL_OW 1
18663: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
18664: LD_ADDR_LOC 60
18668: PUSH
18669: LD_LOC 60
18673: PPUSH
18674: LD_VAR 0 7
18678: PPUSH
18679: LD_LOC 60
18683: PUSH
18684: LD_VAR 0 7
18688: ARRAY
18689: PPUSH
18690: LD_VAR 0 3
18694: PPUSH
18695: LD_LOC 60
18699: PUSH
18700: LD_VAR 0 7
18704: ARRAY
18705: PUSH
18706: LD_VAR 0 3
18710: ARRAY
18711: PUSH
18712: LD_VAR 0 5
18716: PLUS
18717: PPUSH
18718: CALL_OW 1
18722: PPUSH
18723: CALL_OW 1
18727: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
18728: LD_VAR 0 5
18732: PUSH
18733: LD_INT 0
18735: NONEQUAL
18736: PUSH
18737: LD_VAR 0 3
18741: PUSH
18742: LD_OWVAR 2
18746: EQUAL
18747: AND
18748: IFFALSE 18791
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
18750: LD_ADDR_LOC 61
18754: PUSH
18755: LD_LOC 61
18759: PPUSH
18760: LD_INT 3
18762: PUSH
18763: LD_VAR 0 7
18767: MUL
18768: PPUSH
18769: LD_LOC 60
18773: PUSH
18774: LD_VAR 0 7
18778: ARRAY
18779: PUSH
18780: LD_VAR 0 3
18784: ARRAY
18785: PPUSH
18786: CALL_OW 1
18790: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
18791: LD_LOC 60
18795: PUSH
18796: LD_VAR 0 7
18800: ARRAY
18801: PUSH
18802: LD_VAR 0 3
18806: ARRAY
18807: PUSH
18808: LD_LOC 55
18812: PUSH
18813: LD_VAR 0 7
18817: ARRAY
18818: GREATER
18819: IFFALSE 18846
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
18821: LD_ADDR_LOC 62
18825: PUSH
18826: LD_LOC 62
18830: PPUSH
18831: LD_VAR 0 3
18835: PPUSH
18836: LD_INT 1
18838: PPUSH
18839: CALL_OW 1
18843: ST_TO_ADDR
// end else
18844: GO 18933
// begin for j := 1 to Restricted_Builds do
18846: LD_ADDR_VAR 0 8
18850: PUSH
18851: DOUBLE
18852: LD_INT 1
18854: DEC
18855: ST_TO_ADDR
18856: LD_LOC 54
18860: PUSH
18861: FOR_TO
18862: IFFALSE 18906
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
18864: LD_LOC 60
18868: PUSH
18869: LD_VAR 0 8
18873: ARRAY
18874: PUSH
18875: LD_VAR 0 3
18879: ARRAY
18880: PUSH
18881: LD_LOC 55
18885: PUSH
18886: LD_VAR 0 8
18890: ARRAY
18891: GREATER
18892: IFFALSE 18904
// begin Is_Cheater := true ;
18894: LD_ADDR_VAR 0 9
18898: PUSH
18899: LD_INT 1
18901: ST_TO_ADDR
// break ;
18902: GO 18906
// end ;
18904: GO 18861
18906: POP
18907: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
18908: LD_ADDR_LOC 62
18912: PUSH
18913: LD_LOC 62
18917: PPUSH
18918: LD_VAR 0 3
18922: PPUSH
18923: LD_VAR 0 9
18927: PPUSH
18928: CALL_OW 1
18932: ST_TO_ADDR
// end ; break ;
18933: GO 18937
// end ;
18935: GO 18513
18937: POP
18938: POP
// end ;
18939: LD_VAR 0 6
18943: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
18944: LD_VAR 0 5
18948: PUSH
18949: LD_LOC 56
18953: IN
18954: PUSH
18955: LD_VAR 0 2
18959: PUSH
18960: LD_LOC 57
18964: IN
18965: OR
18966: PUSH
18967: LD_VAR 0 4
18971: PUSH
18972: LD_LOC 58
18976: IN
18977: OR
18978: PUSH
18979: LD_VAR 0 3
18983: PUSH
18984: LD_LOC 59
18988: IN
18989: OR
18990: IFFALSE 19001
// ComCancel ( factory ) ;
18992: LD_VAR 0 1
18996: PPUSH
18997: CALL_OW 127
// end ;
19001: PPOPN 5
19003: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
19004: LD_VAR 0 2
19008: PUSH
19009: LD_LOC 56
19013: IN
19014: IFFALSE 19025
// ComCancel ( building ) ;
19016: LD_VAR 0 1
19020: PPUSH
19021: CALL_OW 127
// end ; end_of_file
19025: PPOPN 2
19027: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
19028: LD_INT 0
19030: PPUSH
19031: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
19032: LD_ADDR_VAR 0 2
19036: PUSH
19037: LD_STRING #Multi1x1-Time
19039: PUSH
19040: LD_OWVAR 1
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
19049: LD_INT 0
19051: PUSH
19052: LD_EXP 15
19056: PUSH
19057: LD_OWVAR 1
19061: MINUS
19062: LESSEQUAL
19063: IFFALSE 19094
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
19065: LD_ADDR_VAR 0 2
19069: PUSH
19070: LD_VAR 0 2
19074: PUSH
19075: LD_STRING #allowedsibbomb
19077: PUSH
19078: LD_EXP 15
19082: PUSH
19083: LD_OWVAR 1
19087: MINUS
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: ADD
19093: ST_TO_ADDR
// if ( ExtraStrings ) then
19094: LD_EXP 73
19098: IFFALSE 19120
// AllStrings := AllStrings ^  ^ ExtraStrings ;
19100: LD_ADDR_VAR 0 2
19104: PUSH
19105: LD_VAR 0 2
19109: PUSH
19110: LD_STRING 
19112: ADD
19113: PUSH
19114: LD_EXP 73
19118: ADD
19119: ST_TO_ADDR
// if ( LimitsStrings ) then
19120: CALL 15868 0 0
19124: IFFALSE 19146
// AllStrings := AllStrings ^  ^ LimitsStrings ;
19126: LD_ADDR_VAR 0 2
19130: PUSH
19131: LD_VAR 0 2
19135: PUSH
19136: LD_STRING 
19138: ADD
19139: PUSH
19140: CALL 15868 0 0
19144: ADD
19145: ST_TO_ADDR
// Display_Strings := AllStrings ;
19146: LD_ADDR_OWVAR 47
19150: PUSH
19151: LD_VAR 0 2
19155: ST_TO_ADDR
// end ;
19156: LD_VAR 0 1
19160: RET
// every 0 0$1 do
19161: GO 19163
19163: DISABLE
// begin ShowTimer ;
19164: CALL 19028 0 0
// enable ;
19168: ENABLE
// end ; end_of_file
19169: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
19170: LD_INT 0
19172: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
19173: LD_VAR 0 1
19177: PPUSH
19178: CALL_OW 255
19182: PUSH
19183: LD_VAR 0 4
19187: EQUAL
19188: IFFALSE 19207
// begin SetAchievement ( ACH_RAD ) ;
19190: LD_STRING ACH_RAD
19192: PPUSH
19193: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
19197: LD_STRING ACH_NL
19199: PPUSH
19200: LD_INT 1
19202: PPUSH
19203: CALL_OW 564
// end end ;
19207: LD_VAR 0 5
19211: RET
// export function SA_Win ( side ) ; begin
19212: LD_INT 0
19214: PPUSH
// case side of 1 :
19215: LD_VAR 0 1
19219: PUSH
19220: LD_INT 1
19222: DOUBLE
19223: EQUAL
19224: IFTRUE 19228
19226: GO 19241
19228: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
19229: LD_STRING ACH_AH
19231: PPUSH
19232: LD_INT 1
19234: PPUSH
19235: CALL_OW 564
19239: GO 19404
19241: LD_INT 2
19243: DOUBLE
19244: EQUAL
19245: IFTRUE 19249
19247: GO 19262
19249: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
19250: LD_STRING ACH_E
19252: PPUSH
19253: LD_INT 1
19255: PPUSH
19256: CALL_OW 564
19260: GO 19404
19262: LD_INT 3
19264: DOUBLE
19265: EQUAL
19266: IFTRUE 19270
19268: GO 19283
19270: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
19271: LD_STRING ACH_OOL
19273: PPUSH
19274: LD_INT 1
19276: PPUSH
19277: CALL_OW 564
19281: GO 19404
19283: LD_INT 1
19285: PUSH
19286: LD_INT 2
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: DOUBLE
19293: EQUAL
19294: IFTRUE 19298
19296: GO 19323
19298: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
19299: LD_STRING ACH_AH
19301: PPUSH
19302: LD_REAL  5.00000000000000E-0001
19305: PPUSH
19306: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
19310: LD_STRING ACH_E
19312: PPUSH
19313: LD_REAL  5.00000000000000E-0001
19316: PPUSH
19317: CALL_OW 564
// end ; [ 2 , 3 ] :
19321: GO 19404
19323: LD_INT 2
19325: PUSH
19326: LD_INT 3
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: DOUBLE
19333: EQUAL
19334: IFTRUE 19338
19336: GO 19363
19338: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
19339: LD_STRING ACH_OOL
19341: PPUSH
19342: LD_REAL  5.00000000000000E-0001
19345: PPUSH
19346: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
19350: LD_STRING ACH_E
19352: PPUSH
19353: LD_REAL  5.00000000000000E-0001
19356: PPUSH
19357: CALL_OW 564
// end ; [ 3 , 1 ] :
19361: GO 19404
19363: LD_INT 3
19365: PUSH
19366: LD_INT 1
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: DOUBLE
19373: EQUAL
19374: IFTRUE 19378
19376: GO 19403
19378: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
19379: LD_STRING ACH_AH
19381: PPUSH
19382: LD_REAL  5.00000000000000E-0001
19385: PPUSH
19386: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
19390: LD_STRING ACH_OOL
19392: PPUSH
19393: LD_REAL  5.00000000000000E-0001
19396: PPUSH
19397: CALL_OW 564
// end ; end ;
19401: GO 19404
19403: POP
// end ; end_of_file
19404: LD_VAR 0 2
19408: RET
// export function SetMpTechs ( ) ; var side , i ; begin
19409: LD_INT 0
19411: PPUSH
19412: PPUSH
19413: PPUSH
// for side = 1 to 8 do
19414: LD_ADDR_VAR 0 2
19418: PUSH
19419: DOUBLE
19420: LD_INT 1
19422: DEC
19423: ST_TO_ADDR
19424: LD_INT 8
19426: PUSH
19427: FOR_TO
19428: IFFALSE 19549
// begin for i = 1 to 72 do
19430: LD_ADDR_VAR 0 3
19434: PUSH
19435: DOUBLE
19436: LD_INT 1
19438: DEC
19439: ST_TO_ADDR
19440: LD_INT 72
19442: PUSH
19443: FOR_TO
19444: IFFALSE 19475
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
19446: LD_VAR 0 3
19450: PPUSH
19451: LD_VAR 0 2
19455: PPUSH
19456: LD_INT 0
19458: PPUSH
19459: LD_VAR 0 3
19463: PPUSH
19464: CALL_OW 565
19468: PPUSH
19469: CALL_OW 322
19473: GO 19443
19475: POP
19476: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
19477: LD_INT 73
19479: PPUSH
19480: LD_VAR 0 2
19484: PPUSH
19485: LD_INT 0
19487: PPUSH
19488: LD_INT 25
19490: PPUSH
19491: CALL_OW 565
19495: PPUSH
19496: CALL_OW 322
// for i = 0 to 40 do
19500: LD_ADDR_VAR 0 3
19504: PUSH
19505: DOUBLE
19506: LD_INT 0
19508: DEC
19509: ST_TO_ADDR
19510: LD_INT 40
19512: PUSH
19513: FOR_TO
19514: IFFALSE 19545
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
19516: LD_VAR 0 3
19520: PPUSH
19521: LD_VAR 0 2
19525: PPUSH
19526: LD_INT 1
19528: PPUSH
19529: LD_VAR 0 3
19533: PPUSH
19534: CALL_OW 565
19538: PPUSH
19539: CALL_OW 324
19543: GO 19513
19545: POP
19546: POP
// end ;
19547: GO 19427
19549: POP
19550: POP
// end ;
19551: LD_VAR 0 1
19555: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
19556: LD_INT 0
19558: PPUSH
19559: PPUSH
19560: PPUSH
// for side = 1 to 8 do
19561: LD_ADDR_VAR 0 3
19565: PUSH
19566: DOUBLE
19567: LD_INT 1
19569: DEC
19570: ST_TO_ADDR
19571: LD_INT 8
19573: PUSH
19574: FOR_TO
19575: IFFALSE 23571
// begin for i = 1 to 73 do
19577: LD_ADDR_VAR 0 4
19581: PUSH
19582: DOUBLE
19583: LD_INT 1
19585: DEC
19586: ST_TO_ADDR
19587: LD_INT 73
19589: PUSH
19590: FOR_TO
19591: IFFALSE 19612
// SetTech ( i , side , state_disabled ) ;
19593: LD_VAR 0 4
19597: PPUSH
19598: LD_VAR 0 3
19602: PPUSH
19603: LD_INT 0
19605: PPUSH
19606: CALL_OW 322
19610: GO 19590
19612: POP
19613: POP
// for i = 0 to 40 do
19614: LD_ADDR_VAR 0 4
19618: PUSH
19619: DOUBLE
19620: LD_INT 0
19622: DEC
19623: ST_TO_ADDR
19624: LD_INT 40
19626: PUSH
19627: FOR_TO
19628: IFFALSE 19649
// SetRestrict ( i , side , false ) ;
19630: LD_VAR 0 4
19634: PPUSH
19635: LD_VAR 0 3
19639: PPUSH
19640: LD_INT 0
19642: PPUSH
19643: CALL_OW 324
19647: GO 19627
19649: POP
19650: POP
// case level of 1 :
19651: LD_VAR 0 1
19655: PUSH
19656: LD_INT 1
19658: DOUBLE
19659: EQUAL
19660: IFTRUE 19664
19662: GO 19817
19664: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19665: LD_INT 35
19667: PPUSH
19668: LD_VAR 0 3
19672: PPUSH
19673: LD_INT 1
19675: PPUSH
19676: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19680: LD_INT 45
19682: PPUSH
19683: LD_VAR 0 3
19687: PPUSH
19688: LD_INT 1
19690: PPUSH
19691: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19695: LD_INT 46
19697: PPUSH
19698: LD_VAR 0 3
19702: PPUSH
19703: LD_INT 1
19705: PPUSH
19706: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19710: LD_INT 47
19712: PPUSH
19713: LD_VAR 0 3
19717: PPUSH
19718: LD_INT 1
19720: PPUSH
19721: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
19725: LD_INT 0
19727: PPUSH
19728: LD_VAR 0 3
19732: PPUSH
19733: LD_INT 1
19735: PPUSH
19736: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
19740: LD_INT 2
19742: PPUSH
19743: LD_VAR 0 3
19747: PPUSH
19748: LD_INT 1
19750: PPUSH
19751: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
19755: LD_INT 4
19757: PPUSH
19758: LD_VAR 0 3
19762: PPUSH
19763: LD_INT 1
19765: PPUSH
19766: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
19770: LD_INT 6
19772: PPUSH
19773: LD_VAR 0 3
19777: PPUSH
19778: LD_INT 1
19780: PPUSH
19781: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
19785: LD_INT 29
19787: PPUSH
19788: LD_VAR 0 3
19792: PPUSH
19793: LD_INT 1
19795: PPUSH
19796: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
19800: LD_INT 31
19802: PPUSH
19803: LD_VAR 0 3
19807: PPUSH
19808: LD_INT 1
19810: PPUSH
19811: CALL_OW 324
// end ; 2 :
19815: GO 23569
19817: LD_INT 2
19819: DOUBLE
19820: EQUAL
19821: IFTRUE 19825
19823: GO 20023
19825: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19826: LD_INT 35
19828: PPUSH
19829: LD_VAR 0 3
19833: PPUSH
19834: LD_INT 1
19836: PPUSH
19837: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19841: LD_INT 45
19843: PPUSH
19844: LD_VAR 0 3
19848: PPUSH
19849: LD_INT 1
19851: PPUSH
19852: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19856: LD_INT 46
19858: PPUSH
19859: LD_VAR 0 3
19863: PPUSH
19864: LD_INT 1
19866: PPUSH
19867: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19871: LD_INT 47
19873: PPUSH
19874: LD_VAR 0 3
19878: PPUSH
19879: LD_INT 1
19881: PPUSH
19882: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
19886: LD_INT 1
19888: PPUSH
19889: LD_VAR 0 3
19893: PPUSH
19894: LD_INT 1
19896: PPUSH
19897: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
19901: LD_INT 2
19903: PPUSH
19904: LD_VAR 0 3
19908: PPUSH
19909: LD_INT 1
19911: PPUSH
19912: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
19916: LD_INT 11
19918: PPUSH
19919: LD_VAR 0 3
19923: PPUSH
19924: LD_INT 1
19926: PPUSH
19927: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
19931: LD_INT 0
19933: PPUSH
19934: LD_VAR 0 3
19938: PPUSH
19939: LD_INT 1
19941: PPUSH
19942: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
19946: LD_INT 2
19948: PPUSH
19949: LD_VAR 0 3
19953: PPUSH
19954: LD_INT 1
19956: PPUSH
19957: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
19961: LD_INT 4
19963: PPUSH
19964: LD_VAR 0 3
19968: PPUSH
19969: LD_INT 1
19971: PPUSH
19972: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
19976: LD_INT 6
19978: PPUSH
19979: LD_VAR 0 3
19983: PPUSH
19984: LD_INT 1
19986: PPUSH
19987: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
19991: LD_INT 29
19993: PPUSH
19994: LD_VAR 0 3
19998: PPUSH
19999: LD_INT 1
20001: PPUSH
20002: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
20006: LD_INT 31
20008: PPUSH
20009: LD_VAR 0 3
20013: PPUSH
20014: LD_INT 1
20016: PPUSH
20017: CALL_OW 324
// end ; 3 :
20021: GO 23569
20023: LD_INT 3
20025: DOUBLE
20026: EQUAL
20027: IFTRUE 20031
20029: GO 20484
20031: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
20032: LD_INT 35
20034: PPUSH
20035: LD_VAR 0 3
20039: PPUSH
20040: LD_INT 1
20042: PPUSH
20043: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
20047: LD_INT 45
20049: PPUSH
20050: LD_VAR 0 3
20054: PPUSH
20055: LD_INT 1
20057: PPUSH
20058: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
20062: LD_INT 46
20064: PPUSH
20065: LD_VAR 0 3
20069: PPUSH
20070: LD_INT 1
20072: PPUSH
20073: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
20077: LD_INT 47
20079: PPUSH
20080: LD_VAR 0 3
20084: PPUSH
20085: LD_INT 1
20087: PPUSH
20088: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
20092: LD_INT 1
20094: PPUSH
20095: LD_VAR 0 3
20099: PPUSH
20100: LD_INT 1
20102: PPUSH
20103: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
20107: LD_INT 2
20109: PPUSH
20110: LD_VAR 0 3
20114: PPUSH
20115: LD_INT 1
20117: PPUSH
20118: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
20122: LD_INT 11
20124: PPUSH
20125: LD_VAR 0 3
20129: PPUSH
20130: LD_INT 1
20132: PPUSH
20133: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
20137: LD_INT 48
20139: PPUSH
20140: LD_VAR 0 3
20144: PPUSH
20145: LD_INT 1
20147: PPUSH
20148: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
20152: LD_INT 69
20154: PPUSH
20155: LD_VAR 0 3
20159: PPUSH
20160: LD_INT 1
20162: PPUSH
20163: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
20167: LD_INT 39
20169: PPUSH
20170: LD_VAR 0 3
20174: PPUSH
20175: LD_INT 1
20177: PPUSH
20178: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
20182: LD_INT 43
20184: PPUSH
20185: LD_VAR 0 3
20189: PPUSH
20190: LD_INT 1
20192: PPUSH
20193: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
20197: LD_INT 51
20199: PPUSH
20200: LD_VAR 0 3
20204: PPUSH
20205: LD_INT 1
20207: PPUSH
20208: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
20212: LD_INT 6
20214: PPUSH
20215: LD_VAR 0 3
20219: PPUSH
20220: LD_INT 1
20222: PPUSH
20223: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
20227: LD_INT 0
20229: PPUSH
20230: LD_VAR 0 3
20234: PPUSH
20235: LD_INT 1
20237: PPUSH
20238: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
20242: LD_INT 2
20244: PPUSH
20245: LD_VAR 0 3
20249: PPUSH
20250: LD_INT 1
20252: PPUSH
20253: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
20257: LD_INT 3
20259: PPUSH
20260: LD_VAR 0 3
20264: PPUSH
20265: LD_INT 1
20267: PPUSH
20268: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
20272: LD_INT 4
20274: PPUSH
20275: LD_VAR 0 3
20279: PPUSH
20280: LD_INT 1
20282: PPUSH
20283: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
20287: LD_INT 6
20289: PPUSH
20290: LD_VAR 0 3
20294: PPUSH
20295: LD_INT 1
20297: PPUSH
20298: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
20302: LD_INT 7
20304: PPUSH
20305: LD_VAR 0 3
20309: PPUSH
20310: LD_INT 1
20312: PPUSH
20313: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
20317: LD_INT 8
20319: PPUSH
20320: LD_VAR 0 3
20324: PPUSH
20325: LD_INT 1
20327: PPUSH
20328: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
20332: LD_INT 10
20334: PPUSH
20335: LD_VAR 0 3
20339: PPUSH
20340: LD_INT 1
20342: PPUSH
20343: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
20347: LD_INT 15
20349: PPUSH
20350: LD_VAR 0 3
20354: PPUSH
20355: LD_INT 1
20357: PPUSH
20358: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
20362: LD_INT 16
20364: PPUSH
20365: LD_VAR 0 3
20369: PPUSH
20370: LD_INT 1
20372: PPUSH
20373: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
20377: LD_INT 17
20379: PPUSH
20380: LD_VAR 0 3
20384: PPUSH
20385: LD_INT 1
20387: PPUSH
20388: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
20392: LD_INT 20
20394: PPUSH
20395: LD_VAR 0 3
20399: PPUSH
20400: LD_INT 1
20402: PPUSH
20403: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
20407: LD_INT 26
20409: PPUSH
20410: LD_VAR 0 3
20414: PPUSH
20415: LD_INT 1
20417: PPUSH
20418: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
20422: LD_INT 27
20424: PPUSH
20425: LD_VAR 0 3
20429: PPUSH
20430: LD_INT 1
20432: PPUSH
20433: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
20437: LD_INT 29
20439: PPUSH
20440: LD_VAR 0 3
20444: PPUSH
20445: LD_INT 1
20447: PPUSH
20448: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
20452: LD_INT 31
20454: PPUSH
20455: LD_VAR 0 3
20459: PPUSH
20460: LD_INT 1
20462: PPUSH
20463: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
20467: LD_INT 32
20469: PPUSH
20470: LD_VAR 0 3
20474: PPUSH
20475: LD_INT 1
20477: PPUSH
20478: CALL_OW 324
// end ; 4 :
20482: GO 23569
20484: LD_INT 4
20486: DOUBLE
20487: EQUAL
20488: IFTRUE 20492
20490: GO 21440
20492: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
20493: LD_INT 35
20495: PPUSH
20496: LD_VAR 0 3
20500: PPUSH
20501: LD_INT 1
20503: PPUSH
20504: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
20508: LD_INT 45
20510: PPUSH
20511: LD_VAR 0 3
20515: PPUSH
20516: LD_INT 1
20518: PPUSH
20519: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
20523: LD_INT 46
20525: PPUSH
20526: LD_VAR 0 3
20530: PPUSH
20531: LD_INT 1
20533: PPUSH
20534: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
20538: LD_INT 47
20540: PPUSH
20541: LD_VAR 0 3
20545: PPUSH
20546: LD_INT 1
20548: PPUSH
20549: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
20553: LD_INT 1
20555: PPUSH
20556: LD_VAR 0 3
20560: PPUSH
20561: LD_INT 1
20563: PPUSH
20564: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
20568: LD_INT 2
20570: PPUSH
20571: LD_VAR 0 3
20575: PPUSH
20576: LD_INT 1
20578: PPUSH
20579: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
20583: LD_INT 11
20585: PPUSH
20586: LD_VAR 0 3
20590: PPUSH
20591: LD_INT 1
20593: PPUSH
20594: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
20598: LD_INT 20
20600: PPUSH
20601: LD_VAR 0 3
20605: PPUSH
20606: LD_INT 1
20608: PPUSH
20609: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
20613: LD_INT 48
20615: PPUSH
20616: LD_VAR 0 3
20620: PPUSH
20621: LD_INT 1
20623: PPUSH
20624: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
20628: LD_INT 49
20630: PPUSH
20631: LD_VAR 0 3
20635: PPUSH
20636: LD_INT 1
20638: PPUSH
20639: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
20643: LD_INT 69
20645: PPUSH
20646: LD_VAR 0 3
20650: PPUSH
20651: LD_INT 1
20653: PPUSH
20654: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
20658: LD_INT 39
20660: PPUSH
20661: LD_VAR 0 3
20665: PPUSH
20666: LD_INT 1
20668: PPUSH
20669: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
20673: LD_INT 34
20675: PPUSH
20676: LD_VAR 0 3
20680: PPUSH
20681: LD_INT 1
20683: PPUSH
20684: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
20688: LD_INT 42
20690: PPUSH
20691: LD_VAR 0 3
20695: PPUSH
20696: LD_INT 1
20698: PPUSH
20699: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
20703: LD_INT 44
20705: PPUSH
20706: LD_VAR 0 3
20710: PPUSH
20711: LD_INT 1
20713: PPUSH
20714: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
20718: LD_INT 41
20720: PPUSH
20721: LD_VAR 0 3
20725: PPUSH
20726: LD_INT 1
20728: PPUSH
20729: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
20733: LD_INT 43
20735: PPUSH
20736: LD_VAR 0 3
20740: PPUSH
20741: LD_INT 1
20743: PPUSH
20744: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
20748: LD_INT 70
20750: PPUSH
20751: LD_VAR 0 3
20755: PPUSH
20756: LD_INT 1
20758: PPUSH
20759: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
20763: LD_INT 51
20765: PPUSH
20766: LD_VAR 0 3
20770: PPUSH
20771: LD_INT 1
20773: PPUSH
20774: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
20778: LD_INT 52
20780: PPUSH
20781: LD_VAR 0 3
20785: PPUSH
20786: LD_INT 1
20788: PPUSH
20789: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
20793: LD_INT 6
20795: PPUSH
20796: LD_VAR 0 3
20800: PPUSH
20801: LD_INT 1
20803: PPUSH
20804: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
20808: LD_INT 15
20810: PPUSH
20811: LD_VAR 0 3
20815: PPUSH
20816: LD_INT 1
20818: PPUSH
20819: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
20823: LD_INT 7
20825: PPUSH
20826: LD_VAR 0 3
20830: PPUSH
20831: LD_INT 1
20833: PPUSH
20834: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
20838: LD_INT 12
20840: PPUSH
20841: LD_VAR 0 3
20845: PPUSH
20846: LD_INT 1
20848: PPUSH
20849: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
20853: LD_INT 18
20855: PPUSH
20856: LD_VAR 0 3
20860: PPUSH
20861: LD_INT 1
20863: PPUSH
20864: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
20868: LD_INT 60
20870: PPUSH
20871: LD_VAR 0 3
20875: PPUSH
20876: LD_INT 1
20878: PPUSH
20879: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
20883: LD_INT 9
20885: PPUSH
20886: LD_VAR 0 3
20890: PPUSH
20891: LD_INT 1
20893: PPUSH
20894: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
20898: LD_INT 30
20900: PPUSH
20901: LD_VAR 0 3
20905: PPUSH
20906: LD_INT 1
20908: PPUSH
20909: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
20913: LD_INT 37
20915: PPUSH
20916: LD_VAR 0 3
20920: PPUSH
20921: LD_INT 1
20923: PPUSH
20924: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
20928: LD_INT 5
20930: PPUSH
20931: LD_VAR 0 3
20935: PPUSH
20936: LD_INT 1
20938: PPUSH
20939: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
20943: LD_INT 66
20945: PPUSH
20946: LD_VAR 0 3
20950: PPUSH
20951: LD_INT 1
20953: PPUSH
20954: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
20958: LD_INT 21
20960: PPUSH
20961: LD_VAR 0 3
20965: PPUSH
20966: LD_INT 1
20968: PPUSH
20969: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
20973: LD_INT 22
20975: PPUSH
20976: LD_VAR 0 3
20980: PPUSH
20981: LD_INT 1
20983: PPUSH
20984: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
20988: LD_INT 54
20990: PPUSH
20991: LD_VAR 0 3
20995: PPUSH
20996: LD_INT 1
20998: PPUSH
20999: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
21003: LD_INT 0
21005: PPUSH
21006: LD_VAR 0 3
21010: PPUSH
21011: LD_INT 1
21013: PPUSH
21014: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
21018: LD_INT 1
21020: PPUSH
21021: LD_VAR 0 3
21025: PPUSH
21026: LD_INT 1
21028: PPUSH
21029: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
21033: LD_INT 2
21035: PPUSH
21036: LD_VAR 0 3
21040: PPUSH
21041: LD_INT 1
21043: PPUSH
21044: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
21048: LD_INT 3
21050: PPUSH
21051: LD_VAR 0 3
21055: PPUSH
21056: LD_INT 1
21058: PPUSH
21059: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
21063: LD_INT 4
21065: PPUSH
21066: LD_VAR 0 3
21070: PPUSH
21071: LD_INT 1
21073: PPUSH
21074: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
21078: LD_INT 5
21080: PPUSH
21081: LD_VAR 0 3
21085: PPUSH
21086: LD_INT 1
21088: PPUSH
21089: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
21093: LD_INT 6
21095: PPUSH
21096: LD_VAR 0 3
21100: PPUSH
21101: LD_INT 1
21103: PPUSH
21104: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
21108: LD_INT 7
21110: PPUSH
21111: LD_VAR 0 3
21115: PPUSH
21116: LD_INT 1
21118: PPUSH
21119: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
21123: LD_INT 8
21125: PPUSH
21126: LD_VAR 0 3
21130: PPUSH
21131: LD_INT 1
21133: PPUSH
21134: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
21138: LD_INT 10
21140: PPUSH
21141: LD_VAR 0 3
21145: PPUSH
21146: LD_INT 1
21148: PPUSH
21149: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
21153: LD_INT 11
21155: PPUSH
21156: LD_VAR 0 3
21160: PPUSH
21161: LD_INT 1
21163: PPUSH
21164: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
21168: LD_INT 12
21170: PPUSH
21171: LD_VAR 0 3
21175: PPUSH
21176: LD_INT 1
21178: PPUSH
21179: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
21183: LD_INT 13
21185: PPUSH
21186: LD_VAR 0 3
21190: PPUSH
21191: LD_INT 1
21193: PPUSH
21194: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
21198: LD_INT 14
21200: PPUSH
21201: LD_VAR 0 3
21205: PPUSH
21206: LD_INT 1
21208: PPUSH
21209: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
21213: LD_INT 15
21215: PPUSH
21216: LD_VAR 0 3
21220: PPUSH
21221: LD_INT 1
21223: PPUSH
21224: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
21228: LD_INT 16
21230: PPUSH
21231: LD_VAR 0 3
21235: PPUSH
21236: LD_INT 1
21238: PPUSH
21239: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
21243: LD_INT 17
21245: PPUSH
21246: LD_VAR 0 3
21250: PPUSH
21251: LD_INT 1
21253: PPUSH
21254: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
21258: LD_INT 19
21260: PPUSH
21261: LD_VAR 0 3
21265: PPUSH
21266: LD_INT 1
21268: PPUSH
21269: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
21273: LD_INT 20
21275: PPUSH
21276: LD_VAR 0 3
21280: PPUSH
21281: LD_INT 1
21283: PPUSH
21284: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
21288: LD_INT 21
21290: PPUSH
21291: LD_VAR 0 3
21295: PPUSH
21296: LD_INT 1
21298: PPUSH
21299: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
21303: LD_INT 23
21305: PPUSH
21306: LD_VAR 0 3
21310: PPUSH
21311: LD_INT 1
21313: PPUSH
21314: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
21318: LD_INT 26
21320: PPUSH
21321: LD_VAR 0 3
21325: PPUSH
21326: LD_INT 1
21328: PPUSH
21329: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
21333: LD_INT 27
21335: PPUSH
21336: LD_VAR 0 3
21340: PPUSH
21341: LD_INT 1
21343: PPUSH
21344: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
21348: LD_INT 28
21350: PPUSH
21351: LD_VAR 0 3
21355: PPUSH
21356: LD_INT 1
21358: PPUSH
21359: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
21363: LD_INT 29
21365: PPUSH
21366: LD_VAR 0 3
21370: PPUSH
21371: LD_INT 1
21373: PPUSH
21374: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
21378: LD_INT 30
21380: PPUSH
21381: LD_VAR 0 3
21385: PPUSH
21386: LD_INT 1
21388: PPUSH
21389: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
21393: LD_INT 31
21395: PPUSH
21396: LD_VAR 0 3
21400: PPUSH
21401: LD_INT 1
21403: PPUSH
21404: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
21408: LD_INT 32
21410: PPUSH
21411: LD_VAR 0 3
21415: PPUSH
21416: LD_INT 1
21418: PPUSH
21419: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
21423: LD_INT 36
21425: PPUSH
21426: LD_VAR 0 3
21430: PPUSH
21431: LD_INT 1
21433: PPUSH
21434: CALL_OW 324
// end ; 5 :
21438: GO 23569
21440: LD_INT 5
21442: DOUBLE
21443: EQUAL
21444: IFTRUE 21448
21446: GO 22561
21448: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
21449: LD_INT 35
21451: PPUSH
21452: LD_VAR 0 3
21456: PPUSH
21457: LD_INT 1
21459: PPUSH
21460: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
21464: LD_INT 45
21466: PPUSH
21467: LD_VAR 0 3
21471: PPUSH
21472: LD_INT 1
21474: PPUSH
21475: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
21479: LD_INT 46
21481: PPUSH
21482: LD_VAR 0 3
21486: PPUSH
21487: LD_INT 1
21489: PPUSH
21490: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
21494: LD_INT 47
21496: PPUSH
21497: LD_VAR 0 3
21501: PPUSH
21502: LD_INT 1
21504: PPUSH
21505: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
21509: LD_INT 1
21511: PPUSH
21512: LD_VAR 0 3
21516: PPUSH
21517: LD_INT 1
21519: PPUSH
21520: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
21524: LD_INT 2
21526: PPUSH
21527: LD_VAR 0 3
21531: PPUSH
21532: LD_INT 1
21534: PPUSH
21535: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
21539: LD_INT 11
21541: PPUSH
21542: LD_VAR 0 3
21546: PPUSH
21547: LD_INT 1
21549: PPUSH
21550: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
21554: LD_INT 20
21556: PPUSH
21557: LD_VAR 0 3
21561: PPUSH
21562: LD_INT 1
21564: PPUSH
21565: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
21569: LD_INT 48
21571: PPUSH
21572: LD_VAR 0 3
21576: PPUSH
21577: LD_INT 1
21579: PPUSH
21580: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
21584: LD_INT 49
21586: PPUSH
21587: LD_VAR 0 3
21591: PPUSH
21592: LD_INT 1
21594: PPUSH
21595: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
21599: LD_INT 69
21601: PPUSH
21602: LD_VAR 0 3
21606: PPUSH
21607: LD_INT 1
21609: PPUSH
21610: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
21614: LD_INT 39
21616: PPUSH
21617: LD_VAR 0 3
21621: PPUSH
21622: LD_INT 1
21624: PPUSH
21625: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
21629: LD_INT 34
21631: PPUSH
21632: LD_VAR 0 3
21636: PPUSH
21637: LD_INT 1
21639: PPUSH
21640: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
21644: LD_INT 42
21646: PPUSH
21647: LD_VAR 0 3
21651: PPUSH
21652: LD_INT 1
21654: PPUSH
21655: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
21659: LD_INT 44
21661: PPUSH
21662: LD_VAR 0 3
21666: PPUSH
21667: LD_INT 1
21669: PPUSH
21670: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
21674: LD_INT 41
21676: PPUSH
21677: LD_VAR 0 3
21681: PPUSH
21682: LD_INT 1
21684: PPUSH
21685: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
21689: LD_INT 40
21691: PPUSH
21692: LD_VAR 0 3
21696: PPUSH
21697: LD_INT 1
21699: PPUSH
21700: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
21704: LD_INT 43
21706: PPUSH
21707: LD_VAR 0 3
21711: PPUSH
21712: LD_INT 1
21714: PPUSH
21715: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
21719: LD_INT 70
21721: PPUSH
21722: LD_VAR 0 3
21726: PPUSH
21727: LD_INT 1
21729: PPUSH
21730: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
21734: LD_INT 51
21736: PPUSH
21737: LD_VAR 0 3
21741: PPUSH
21742: LD_INT 1
21744: PPUSH
21745: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
21749: LD_INT 52
21751: PPUSH
21752: LD_VAR 0 3
21756: PPUSH
21757: LD_INT 1
21759: PPUSH
21760: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
21764: LD_INT 6
21766: PPUSH
21767: LD_VAR 0 3
21771: PPUSH
21772: LD_INT 1
21774: PPUSH
21775: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
21779: LD_INT 15
21781: PPUSH
21782: LD_VAR 0 3
21786: PPUSH
21787: LD_INT 1
21789: PPUSH
21790: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
21794: LD_INT 7
21796: PPUSH
21797: LD_VAR 0 3
21801: PPUSH
21802: LD_INT 1
21804: PPUSH
21805: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
21809: LD_INT 12
21811: PPUSH
21812: LD_VAR 0 3
21816: PPUSH
21817: LD_INT 1
21819: PPUSH
21820: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
21824: LD_INT 17
21826: PPUSH
21827: LD_VAR 0 3
21831: PPUSH
21832: LD_INT 1
21834: PPUSH
21835: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
21839: LD_INT 18
21841: PPUSH
21842: LD_VAR 0 3
21846: PPUSH
21847: LD_INT 1
21849: PPUSH
21850: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
21854: LD_INT 60
21856: PPUSH
21857: LD_VAR 0 3
21861: PPUSH
21862: LD_INT 1
21864: PPUSH
21865: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
21869: LD_INT 32
21871: PPUSH
21872: LD_VAR 0 3
21876: PPUSH
21877: LD_INT 1
21879: PPUSH
21880: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
21884: LD_INT 9
21886: PPUSH
21887: LD_VAR 0 3
21891: PPUSH
21892: LD_INT 1
21894: PPUSH
21895: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
21899: LD_INT 57
21901: PPUSH
21902: LD_VAR 0 3
21906: PPUSH
21907: LD_INT 1
21909: PPUSH
21910: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
21914: LD_INT 30
21916: PPUSH
21917: LD_VAR 0 3
21921: PPUSH
21922: LD_INT 1
21924: PPUSH
21925: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
21929: LD_INT 37
21931: PPUSH
21932: LD_VAR 0 3
21936: PPUSH
21937: LD_INT 1
21939: PPUSH
21940: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
21944: LD_INT 63
21946: PPUSH
21947: LD_VAR 0 3
21951: PPUSH
21952: LD_INT 1
21954: PPUSH
21955: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
21959: LD_INT 3
21961: PPUSH
21962: LD_VAR 0 3
21966: PPUSH
21967: LD_INT 1
21969: PPUSH
21970: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
21974: LD_INT 4
21976: PPUSH
21977: LD_VAR 0 3
21981: PPUSH
21982: LD_INT 1
21984: PPUSH
21985: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
21989: LD_INT 5
21991: PPUSH
21992: LD_VAR 0 3
21996: PPUSH
21997: LD_INT 1
21999: PPUSH
22000: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
22004: LD_INT 66
22006: PPUSH
22007: LD_VAR 0 3
22011: PPUSH
22012: LD_INT 1
22014: PPUSH
22015: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
22019: LD_INT 21
22021: PPUSH
22022: LD_VAR 0 3
22026: PPUSH
22027: LD_INT 1
22029: PPUSH
22030: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
22034: LD_INT 22
22036: PPUSH
22037: LD_VAR 0 3
22041: PPUSH
22042: LD_INT 1
22044: PPUSH
22045: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
22049: LD_INT 19
22051: PPUSH
22052: LD_VAR 0 3
22056: PPUSH
22057: LD_INT 1
22059: PPUSH
22060: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
22064: LD_INT 54
22066: PPUSH
22067: LD_VAR 0 3
22071: PPUSH
22072: LD_INT 1
22074: PPUSH
22075: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
22079: LD_INT 55
22081: PPUSH
22082: LD_VAR 0 3
22086: PPUSH
22087: LD_INT 1
22089: PPUSH
22090: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22094: LD_INT 0
22096: PPUSH
22097: LD_VAR 0 3
22101: PPUSH
22102: LD_INT 1
22104: PPUSH
22105: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
22109: LD_INT 1
22111: PPUSH
22112: LD_VAR 0 3
22116: PPUSH
22117: LD_INT 1
22119: PPUSH
22120: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22124: LD_INT 2
22126: PPUSH
22127: LD_VAR 0 3
22131: PPUSH
22132: LD_INT 1
22134: PPUSH
22135: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
22139: LD_INT 3
22141: PPUSH
22142: LD_VAR 0 3
22146: PPUSH
22147: LD_INT 1
22149: PPUSH
22150: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22154: LD_INT 4
22156: PPUSH
22157: LD_VAR 0 3
22161: PPUSH
22162: LD_INT 1
22164: PPUSH
22165: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
22169: LD_INT 5
22171: PPUSH
22172: LD_VAR 0 3
22176: PPUSH
22177: LD_INT 1
22179: PPUSH
22180: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22184: LD_INT 6
22186: PPUSH
22187: LD_VAR 0 3
22191: PPUSH
22192: LD_INT 1
22194: PPUSH
22195: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
22199: LD_INT 7
22201: PPUSH
22202: LD_VAR 0 3
22206: PPUSH
22207: LD_INT 1
22209: PPUSH
22210: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
22214: LD_INT 8
22216: PPUSH
22217: LD_VAR 0 3
22221: PPUSH
22222: LD_INT 1
22224: PPUSH
22225: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
22229: LD_INT 10
22231: PPUSH
22232: LD_VAR 0 3
22236: PPUSH
22237: LD_INT 1
22239: PPUSH
22240: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
22244: LD_INT 11
22246: PPUSH
22247: LD_VAR 0 3
22251: PPUSH
22252: LD_INT 1
22254: PPUSH
22255: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
22259: LD_INT 12
22261: PPUSH
22262: LD_VAR 0 3
22266: PPUSH
22267: LD_INT 1
22269: PPUSH
22270: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
22274: LD_INT 13
22276: PPUSH
22277: LD_VAR 0 3
22281: PPUSH
22282: LD_INT 1
22284: PPUSH
22285: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
22289: LD_INT 14
22291: PPUSH
22292: LD_VAR 0 3
22296: PPUSH
22297: LD_INT 1
22299: PPUSH
22300: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
22304: LD_INT 15
22306: PPUSH
22307: LD_VAR 0 3
22311: PPUSH
22312: LD_INT 1
22314: PPUSH
22315: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
22319: LD_INT 16
22321: PPUSH
22322: LD_VAR 0 3
22326: PPUSH
22327: LD_INT 1
22329: PPUSH
22330: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
22334: LD_INT 17
22336: PPUSH
22337: LD_VAR 0 3
22341: PPUSH
22342: LD_INT 1
22344: PPUSH
22345: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
22349: LD_INT 18
22351: PPUSH
22352: LD_VAR 0 3
22356: PPUSH
22357: LD_INT 1
22359: PPUSH
22360: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
22364: LD_INT 19
22366: PPUSH
22367: LD_VAR 0 3
22371: PPUSH
22372: LD_INT 1
22374: PPUSH
22375: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
22379: LD_INT 20
22381: PPUSH
22382: LD_VAR 0 3
22386: PPUSH
22387: LD_INT 1
22389: PPUSH
22390: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
22394: LD_INT 21
22396: PPUSH
22397: LD_VAR 0 3
22401: PPUSH
22402: LD_INT 1
22404: PPUSH
22405: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
22409: LD_INT 23
22411: PPUSH
22412: LD_VAR 0 3
22416: PPUSH
22417: LD_INT 1
22419: PPUSH
22420: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
22424: LD_INT 26
22426: PPUSH
22427: LD_VAR 0 3
22431: PPUSH
22432: LD_INT 1
22434: PPUSH
22435: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
22439: LD_INT 27
22441: PPUSH
22442: LD_VAR 0 3
22446: PPUSH
22447: LD_INT 1
22449: PPUSH
22450: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
22454: LD_INT 28
22456: PPUSH
22457: LD_VAR 0 3
22461: PPUSH
22462: LD_INT 1
22464: PPUSH
22465: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22469: LD_INT 29
22471: PPUSH
22472: LD_VAR 0 3
22476: PPUSH
22477: LD_INT 1
22479: PPUSH
22480: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
22484: LD_INT 30
22486: PPUSH
22487: LD_VAR 0 3
22491: PPUSH
22492: LD_INT 1
22494: PPUSH
22495: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22499: LD_INT 31
22501: PPUSH
22502: LD_VAR 0 3
22506: PPUSH
22507: LD_INT 1
22509: PPUSH
22510: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
22514: LD_INT 32
22516: PPUSH
22517: LD_VAR 0 3
22521: PPUSH
22522: LD_INT 1
22524: PPUSH
22525: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
22529: LD_INT 33
22531: PPUSH
22532: LD_VAR 0 3
22536: PPUSH
22537: LD_INT 1
22539: PPUSH
22540: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
22544: LD_INT 36
22546: PPUSH
22547: LD_VAR 0 3
22551: PPUSH
22552: LD_INT 1
22554: PPUSH
22555: CALL_OW 324
// end ; 6 :
22559: GO 23569
22561: LD_INT 6
22563: DOUBLE
22564: EQUAL
22565: IFTRUE 22569
22567: GO 23494
22569: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22570: LD_INT 35
22572: PPUSH
22573: LD_VAR 0 3
22577: PPUSH
22578: LD_INT 1
22580: PPUSH
22581: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22585: LD_INT 45
22587: PPUSH
22588: LD_VAR 0 3
22592: PPUSH
22593: LD_INT 1
22595: PPUSH
22596: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22600: LD_INT 46
22602: PPUSH
22603: LD_VAR 0 3
22607: PPUSH
22608: LD_INT 1
22610: PPUSH
22611: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22615: LD_INT 47
22617: PPUSH
22618: LD_VAR 0 3
22622: PPUSH
22623: LD_INT 1
22625: PPUSH
22626: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22630: LD_INT 1
22632: PPUSH
22633: LD_VAR 0 3
22637: PPUSH
22638: LD_INT 1
22640: PPUSH
22641: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22645: LD_INT 2
22647: PPUSH
22648: LD_VAR 0 3
22652: PPUSH
22653: LD_INT 1
22655: PPUSH
22656: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22660: LD_INT 11
22662: PPUSH
22663: LD_VAR 0 3
22667: PPUSH
22668: LD_INT 1
22670: PPUSH
22671: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
22675: LD_INT 20
22677: PPUSH
22678: LD_VAR 0 3
22682: PPUSH
22683: LD_INT 1
22685: PPUSH
22686: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
22690: LD_INT 48
22692: PPUSH
22693: LD_VAR 0 3
22697: PPUSH
22698: LD_INT 1
22700: PPUSH
22701: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
22705: LD_INT 49
22707: PPUSH
22708: LD_VAR 0 3
22712: PPUSH
22713: LD_INT 1
22715: PPUSH
22716: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
22720: LD_INT 50
22722: PPUSH
22723: LD_VAR 0 3
22727: PPUSH
22728: LD_INT 1
22730: PPUSH
22731: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
22735: LD_INT 69
22737: PPUSH
22738: LD_VAR 0 3
22742: PPUSH
22743: LD_INT 1
22745: PPUSH
22746: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
22750: LD_INT 39
22752: PPUSH
22753: LD_VAR 0 3
22757: PPUSH
22758: LD_INT 1
22760: PPUSH
22761: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
22765: LD_INT 34
22767: PPUSH
22768: LD_VAR 0 3
22772: PPUSH
22773: LD_INT 1
22775: PPUSH
22776: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
22780: LD_INT 42
22782: PPUSH
22783: LD_VAR 0 3
22787: PPUSH
22788: LD_INT 1
22790: PPUSH
22791: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
22795: LD_INT 44
22797: PPUSH
22798: LD_VAR 0 3
22802: PPUSH
22803: LD_INT 1
22805: PPUSH
22806: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
22810: LD_INT 41
22812: PPUSH
22813: LD_VAR 0 3
22817: PPUSH
22818: LD_INT 1
22820: PPUSH
22821: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
22825: LD_INT 13
22827: PPUSH
22828: LD_VAR 0 3
22832: PPUSH
22833: LD_INT 1
22835: PPUSH
22836: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
22840: LD_INT 40
22842: PPUSH
22843: LD_VAR 0 3
22847: PPUSH
22848: LD_INT 1
22850: PPUSH
22851: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
22855: LD_INT 43
22857: PPUSH
22858: LD_VAR 0 3
22862: PPUSH
22863: LD_INT 1
22865: PPUSH
22866: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
22870: LD_INT 70
22872: PPUSH
22873: LD_VAR 0 3
22877: PPUSH
22878: LD_INT 1
22880: PPUSH
22881: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
22885: LD_INT 23
22887: PPUSH
22888: LD_VAR 0 3
22892: PPUSH
22893: LD_INT 1
22895: PPUSH
22896: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
22900: LD_INT 51
22902: PPUSH
22903: LD_VAR 0 3
22907: PPUSH
22908: LD_INT 1
22910: PPUSH
22911: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
22915: LD_INT 52
22917: PPUSH
22918: LD_VAR 0 3
22922: PPUSH
22923: LD_INT 1
22925: PPUSH
22926: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
22930: LD_INT 6
22932: PPUSH
22933: LD_VAR 0 3
22937: PPUSH
22938: LD_INT 1
22940: PPUSH
22941: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
22945: LD_INT 15
22947: PPUSH
22948: LD_VAR 0 3
22952: PPUSH
22953: LD_INT 1
22955: PPUSH
22956: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
22960: LD_INT 7
22962: PPUSH
22963: LD_VAR 0 3
22967: PPUSH
22968: LD_INT 1
22970: PPUSH
22971: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
22975: LD_INT 12
22977: PPUSH
22978: LD_VAR 0 3
22982: PPUSH
22983: LD_INT 1
22985: PPUSH
22986: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
22990: LD_INT 10
22992: PPUSH
22993: LD_VAR 0 3
22997: PPUSH
22998: LD_INT 1
23000: PPUSH
23001: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
23005: LD_INT 17
23007: PPUSH
23008: LD_VAR 0 3
23012: PPUSH
23013: LD_INT 1
23015: PPUSH
23016: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
23020: LD_INT 18
23022: PPUSH
23023: LD_VAR 0 3
23027: PPUSH
23028: LD_INT 1
23030: PPUSH
23031: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
23035: LD_INT 60
23037: PPUSH
23038: LD_VAR 0 3
23042: PPUSH
23043: LD_INT 1
23045: PPUSH
23046: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
23050: LD_INT 61
23052: PPUSH
23053: LD_VAR 0 3
23057: PPUSH
23058: LD_INT 1
23060: PPUSH
23061: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
23065: LD_INT 32
23067: PPUSH
23068: LD_VAR 0 3
23072: PPUSH
23073: LD_INT 1
23075: PPUSH
23076: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
23080: LD_INT 27
23082: PPUSH
23083: LD_VAR 0 3
23087: PPUSH
23088: LD_INT 1
23090: PPUSH
23091: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
23095: LD_INT 36
23097: PPUSH
23098: LD_VAR 0 3
23102: PPUSH
23103: LD_INT 1
23105: PPUSH
23106: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
23110: LD_INT 33
23112: PPUSH
23113: LD_VAR 0 3
23117: PPUSH
23118: LD_INT 1
23120: PPUSH
23121: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
23125: LD_INT 9
23127: PPUSH
23128: LD_VAR 0 3
23132: PPUSH
23133: LD_INT 1
23135: PPUSH
23136: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
23140: LD_INT 38
23142: PPUSH
23143: LD_VAR 0 3
23147: PPUSH
23148: LD_INT 1
23150: PPUSH
23151: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
23155: LD_INT 57
23157: PPUSH
23158: LD_VAR 0 3
23162: PPUSH
23163: LD_INT 1
23165: PPUSH
23166: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
23170: LD_INT 58
23172: PPUSH
23173: LD_VAR 0 3
23177: PPUSH
23178: LD_INT 1
23180: PPUSH
23181: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
23185: LD_INT 28
23187: PPUSH
23188: LD_VAR 0 3
23192: PPUSH
23193: LD_INT 1
23195: PPUSH
23196: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
23200: LD_INT 29
23202: PPUSH
23203: LD_VAR 0 3
23207: PPUSH
23208: LD_INT 1
23210: PPUSH
23211: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
23215: LD_INT 30
23217: PPUSH
23218: LD_VAR 0 3
23222: PPUSH
23223: LD_INT 1
23225: PPUSH
23226: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
23230: LD_INT 37
23232: PPUSH
23233: LD_VAR 0 3
23237: PPUSH
23238: LD_INT 1
23240: PPUSH
23241: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
23245: LD_INT 63
23247: PPUSH
23248: LD_VAR 0 3
23252: PPUSH
23253: LD_INT 1
23255: PPUSH
23256: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
23260: LD_INT 64
23262: PPUSH
23263: LD_VAR 0 3
23267: PPUSH
23268: LD_INT 1
23270: PPUSH
23271: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
23275: LD_INT 3
23277: PPUSH
23278: LD_VAR 0 3
23282: PPUSH
23283: LD_INT 1
23285: PPUSH
23286: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
23290: LD_INT 4
23292: PPUSH
23293: LD_VAR 0 3
23297: PPUSH
23298: LD_INT 1
23300: PPUSH
23301: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
23305: LD_INT 5
23307: PPUSH
23308: LD_VAR 0 3
23312: PPUSH
23313: LD_INT 1
23315: PPUSH
23316: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
23320: LD_INT 8
23322: PPUSH
23323: LD_VAR 0 3
23327: PPUSH
23328: LD_INT 1
23330: PPUSH
23331: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
23335: LD_INT 66
23337: PPUSH
23338: LD_VAR 0 3
23342: PPUSH
23343: LD_INT 1
23345: PPUSH
23346: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
23350: LD_INT 67
23352: PPUSH
23353: LD_VAR 0 3
23357: PPUSH
23358: LD_INT 1
23360: PPUSH
23361: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
23365: LD_INT 21
23367: PPUSH
23368: LD_VAR 0 3
23372: PPUSH
23373: LD_INT 1
23375: PPUSH
23376: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
23380: LD_INT 22
23382: PPUSH
23383: LD_VAR 0 3
23387: PPUSH
23388: LD_INT 1
23390: PPUSH
23391: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
23395: LD_INT 19
23397: PPUSH
23398: LD_VAR 0 3
23402: PPUSH
23403: LD_INT 1
23405: PPUSH
23406: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
23410: LD_INT 26
23412: PPUSH
23413: LD_VAR 0 3
23417: PPUSH
23418: LD_INT 1
23420: PPUSH
23421: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
23425: LD_INT 54
23427: PPUSH
23428: LD_VAR 0 3
23432: PPUSH
23433: LD_INT 1
23435: PPUSH
23436: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
23440: LD_INT 55
23442: PPUSH
23443: LD_VAR 0 3
23447: PPUSH
23448: LD_INT 1
23450: PPUSH
23451: CALL_OW 322
// for i = 0 to 39 do
23455: LD_ADDR_VAR 0 4
23459: PUSH
23460: DOUBLE
23461: LD_INT 0
23463: DEC
23464: ST_TO_ADDR
23465: LD_INT 39
23467: PUSH
23468: FOR_TO
23469: IFFALSE 23490
// SetRestrict ( i , side , true ) ;
23471: LD_VAR 0 4
23475: PPUSH
23476: LD_VAR 0 3
23480: PPUSH
23481: LD_INT 1
23483: PPUSH
23484: CALL_OW 324
23488: GO 23468
23490: POP
23491: POP
// end ; else
23492: GO 23569
23494: POP
// begin for i = 1 to 73 do
23495: LD_ADDR_VAR 0 4
23499: PUSH
23500: DOUBLE
23501: LD_INT 1
23503: DEC
23504: ST_TO_ADDR
23505: LD_INT 73
23507: PUSH
23508: FOR_TO
23509: IFFALSE 23530
// SetTech ( i , side , state_enabled ) ;
23511: LD_VAR 0 4
23515: PPUSH
23516: LD_VAR 0 3
23520: PPUSH
23521: LD_INT 1
23523: PPUSH
23524: CALL_OW 322
23528: GO 23508
23530: POP
23531: POP
// for i = 0 to 39 do
23532: LD_ADDR_VAR 0 4
23536: PUSH
23537: DOUBLE
23538: LD_INT 0
23540: DEC
23541: ST_TO_ADDR
23542: LD_INT 39
23544: PUSH
23545: FOR_TO
23546: IFFALSE 23567
// SetRestrict ( i , side , true ) ;
23548: LD_VAR 0 4
23552: PPUSH
23553: LD_VAR 0 3
23557: PPUSH
23558: LD_INT 1
23560: PPUSH
23561: CALL_OW 324
23565: GO 23545
23567: POP
23568: POP
// end ; end ; end ;
23569: GO 19574
23571: POP
23572: POP
// end ; end_of_file
23573: LD_VAR 0 2
23577: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
23578: LD_INT 0
23580: PPUSH
23581: PPUSH
23582: PPUSH
23583: PPUSH
23584: PPUSH
23585: PPUSH
23586: PPUSH
23587: PPUSH
23588: PPUSH
// for i := 1 to 8 do
23589: LD_ADDR_VAR 0 2
23593: PUSH
23594: DOUBLE
23595: LD_INT 1
23597: DEC
23598: ST_TO_ADDR
23599: LD_INT 8
23601: PUSH
23602: FOR_TO
23603: IFFALSE 23987
// begin if Side_Positions [ i ] then
23605: LD_EXP 18
23609: PUSH
23610: LD_VAR 0 2
23614: ARRAY
23615: IFFALSE 23985
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
23617: LD_ADDR_VAR 0 7
23621: PUSH
23622: LD_INT 22
23624: PUSH
23625: LD_VAR 0 2
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: PUSH
23634: LD_INT 21
23636: PUSH
23637: LD_INT 1
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: PPUSH
23648: CALL_OW 69
23652: PUSH
23653: LD_INT 0
23655: PLUS
23656: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23657: LD_ADDR_VAR 0 9
23661: PUSH
23662: LD_INT 22
23664: PUSH
23665: LD_VAR 0 2
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: PUSH
23674: LD_INT 2
23676: PUSH
23677: LD_INT 30
23679: PUSH
23680: LD_INT 0
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: PUSH
23687: LD_INT 30
23689: PUSH
23690: LD_INT 1
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: LIST
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PPUSH
23706: CALL_OW 69
23710: ST_TO_ADDR
// crates := 0 ;
23711: LD_ADDR_VAR 0 4
23715: PUSH
23716: LD_INT 0
23718: ST_TO_ADDR
// oil := 0 ;
23719: LD_ADDR_VAR 0 5
23723: PUSH
23724: LD_INT 0
23726: ST_TO_ADDR
// sib := 0 ;
23727: LD_ADDR_VAR 0 6
23731: PUSH
23732: LD_INT 0
23734: ST_TO_ADDR
// if bases then
23735: LD_VAR 0 9
23739: IFFALSE 23845
// begin for j in bases do
23741: LD_ADDR_VAR 0 3
23745: PUSH
23746: LD_VAR 0 9
23750: PUSH
23751: FOR_IN
23752: IFFALSE 23843
// begin base := GetBase ( j ) ;
23754: LD_ADDR_VAR 0 8
23758: PUSH
23759: LD_VAR 0 3
23763: PPUSH
23764: CALL_OW 274
23768: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
23769: LD_ADDR_VAR 0 4
23773: PUSH
23774: LD_VAR 0 4
23778: PUSH
23779: LD_VAR 0 8
23783: PPUSH
23784: LD_INT 1
23786: PPUSH
23787: CALL_OW 275
23791: PLUS
23792: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
23793: LD_ADDR_VAR 0 5
23797: PUSH
23798: LD_VAR 0 5
23802: PUSH
23803: LD_VAR 0 8
23807: PPUSH
23808: LD_INT 2
23810: PPUSH
23811: CALL_OW 275
23815: PLUS
23816: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
23817: LD_ADDR_VAR 0 6
23821: PUSH
23822: LD_VAR 0 6
23826: PUSH
23827: LD_VAR 0 8
23831: PPUSH
23832: LD_INT 3
23834: PPUSH
23835: CALL_OW 275
23839: PLUS
23840: ST_TO_ADDR
// end ;
23841: GO 23751
23843: POP
23844: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
23845: LD_STRING setSpecText(
23847: PUSH
23848: LD_VAR 0 2
23852: STR
23853: PUSH
23854: LD_STRING ,
23856: STR
23857: PUSH
23858: LD_INT 2
23860: STR
23861: PUSH
23862: LD_STRING ,
23864: STR
23865: PUSH
23866: LD_VAR 0 4
23870: STR
23871: PUSH
23872: LD_STRING )
23874: STR
23875: PPUSH
23876: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
23880: LD_STRING setSpecText(
23882: PUSH
23883: LD_VAR 0 2
23887: STR
23888: PUSH
23889: LD_STRING ,
23891: STR
23892: PUSH
23893: LD_INT 3
23895: STR
23896: PUSH
23897: LD_STRING ,
23899: STR
23900: PUSH
23901: LD_VAR 0 5
23905: STR
23906: PUSH
23907: LD_STRING )
23909: STR
23910: PPUSH
23911: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
23915: LD_STRING setSpecText(
23917: PUSH
23918: LD_VAR 0 2
23922: STR
23923: PUSH
23924: LD_STRING ,
23926: STR
23927: PUSH
23928: LD_INT 4
23930: STR
23931: PUSH
23932: LD_STRING ,
23934: STR
23935: PUSH
23936: LD_VAR 0 6
23940: STR
23941: PUSH
23942: LD_STRING )
23944: STR
23945: PPUSH
23946: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
23950: LD_STRING setSpecText(
23952: PUSH
23953: LD_VAR 0 2
23957: STR
23958: PUSH
23959: LD_STRING ,
23961: STR
23962: PUSH
23963: LD_INT 5
23965: STR
23966: PUSH
23967: LD_STRING ,
23969: STR
23970: PUSH
23971: LD_VAR 0 7
23975: STR
23976: PUSH
23977: LD_STRING )
23979: STR
23980: PPUSH
23981: CALL_OW 559
// end ; end ;
23985: GO 23602
23987: POP
23988: POP
// end ;
23989: LD_VAR 0 1
23993: RET
// every 0 0$1 do
23994: GO 23996
23996: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
23997: LD_STRING setSpecLogoNumber(
23999: PUSH
24000: LD_INT 2
24002: STR
24003: PUSH
24004: LD_STRING ,
24006: STR
24007: PUSH
24008: LD_INT 1
24010: STR
24011: PUSH
24012: LD_STRING )
24014: STR
24015: PPUSH
24016: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
24020: LD_STRING setSpecLogoNumber(
24022: PUSH
24023: LD_INT 3
24025: STR
24026: PUSH
24027: LD_STRING ,
24029: STR
24030: PUSH
24031: LD_INT 2
24033: STR
24034: PUSH
24035: LD_STRING )
24037: STR
24038: PPUSH
24039: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
24043: LD_STRING setSpecLogoNumber(
24045: PUSH
24046: LD_INT 4
24048: STR
24049: PUSH
24050: LD_STRING ,
24052: STR
24053: PUSH
24054: LD_INT 3
24056: STR
24057: PUSH
24058: LD_STRING )
24060: STR
24061: PPUSH
24062: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
24066: LD_STRING setSpecLogoNumber(
24068: PUSH
24069: LD_INT 5
24071: STR
24072: PUSH
24073: LD_STRING ,
24075: STR
24076: PUSH
24077: LD_INT 4
24079: STR
24080: PUSH
24081: LD_STRING )
24083: STR
24084: PPUSH
24085: CALL_OW 559
// end ;
24089: END
// every 20 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
24090: LD_INT 2
24092: PUSH
24093: LD_INT 30
24095: PUSH
24096: LD_INT 0
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: PUSH
24103: LD_INT 30
24105: PUSH
24106: LD_INT 1
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: PUSH
24113: EMPTY
24114: LIST
24115: LIST
24116: LIST
24117: PPUSH
24118: CALL_OW 69
24122: IFFALSE 24132
24124: GO 24126
24126: DISABLE
// begin enable ;
24127: ENABLE
// UpdateSpectatorBar ;
24128: CALL 23578 0 0
// end ;
24132: END
