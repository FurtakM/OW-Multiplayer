// export def_base_size , def_west_nations , def_east_nations ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , respawning_time_min , respawning_time_max , siberite_bomb_Delay ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Position_Nations ; export depot_def , breastworks_def , labs_def , factory_def , start_def , extra_oil_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function prepare_deposits ; var list , un , deposits ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
// list := GetListOfResourcesInArea ( west_side ) ^ GetListOfResourcesInArea ( east_side ) ;
   6: LD_ADDR_VAR 0 2
  10: PUSH
  11: LD_INT 8
  13: PPUSH
  14: CALL_OW 442
  18: PUSH
  19: LD_INT 9
  21: PPUSH
  22: CALL_OW 442
  26: ADD
  27: ST_TO_ADDR
// for un = 1 to ( list div 3 ) do
  28: LD_ADDR_VAR 0 3
  32: PUSH
  33: DOUBLE
  34: LD_INT 1
  36: DEC
  37: ST_TO_ADDR
  38: LD_VAR 0 2
  42: PUSH
  43: LD_INT 3
  45: DIV
  46: PUSH
  47: FOR_TO
  48: IFFALSE 94
// RemoveDepositXY ( list [ un * 3 - 2 ] , list [ un * 3 - 1 ] ) ;
  50: LD_VAR 0 2
  54: PUSH
  55: LD_VAR 0 3
  59: PUSH
  60: LD_INT 3
  62: MUL
  63: PUSH
  64: LD_INT 2
  66: MINUS
  67: ARRAY
  68: PPUSH
  69: LD_VAR 0 2
  73: PUSH
  74: LD_VAR 0 3
  78: PUSH
  79: LD_INT 3
  81: MUL
  82: PUSH
  83: LD_INT 1
  85: MINUS
  86: ARRAY
  87: PPUSH
  88: CALL_OW 63
  92: GO 47
  94: POP
  95: POP
// deposits := [ [ 40 , 49 , mat_oil ] , [ 40 , 68 , mat_oil ] , [ 9 , 3 , mat_siberit ] , [ 61 , 116 , mat_siberit ] , [ 177 , 46 , mat_oil ] , [ 185 , 71 , mat_oil ] , [ 157 , 3 , mat_siberit ] , [ 213 , 116 , mat_siberit ] ] ;
  96: LD_ADDR_VAR 0 4
 100: PUSH
 101: LD_INT 40
 103: PUSH
 104: LD_INT 49
 106: PUSH
 107: LD_INT 2
 109: PUSH
 110: EMPTY
 111: LIST
 112: LIST
 113: LIST
 114: PUSH
 115: LD_INT 40
 117: PUSH
 118: LD_INT 68
 120: PUSH
 121: LD_INT 2
 123: PUSH
 124: EMPTY
 125: LIST
 126: LIST
 127: LIST
 128: PUSH
 129: LD_INT 9
 131: PUSH
 132: LD_INT 3
 134: PUSH
 135: LD_INT 3
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: LIST
 142: PUSH
 143: LD_INT 61
 145: PUSH
 146: LD_INT 116
 148: PUSH
 149: LD_INT 3
 151: PUSH
 152: EMPTY
 153: LIST
 154: LIST
 155: LIST
 156: PUSH
 157: LD_INT 177
 159: PUSH
 160: LD_INT 46
 162: PUSH
 163: LD_INT 2
 165: PUSH
 166: EMPTY
 167: LIST
 168: LIST
 169: LIST
 170: PUSH
 171: LD_INT 185
 173: PUSH
 174: LD_INT 71
 176: PUSH
 177: LD_INT 2
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: LIST
 184: PUSH
 185: LD_INT 157
 187: PUSH
 188: LD_INT 3
 190: PUSH
 191: LD_INT 3
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: PUSH
 199: LD_INT 213
 201: PUSH
 202: LD_INT 116
 204: PUSH
 205: LD_INT 3
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: PUSH
 213: EMPTY
 214: LIST
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: ST_TO_ADDR
// for un in deposits do
 223: LD_ADDR_VAR 0 3
 227: PUSH
 228: LD_VAR 0 4
 232: PUSH
 233: FOR_IN
 234: IFFALSE 269
// CreateDepositXY ( un [ 1 ] , un [ 2 ] , un [ 3 ] ) ;
 236: LD_VAR 0 3
 240: PUSH
 241: LD_INT 1
 243: ARRAY
 244: PPUSH
 245: LD_VAR 0 3
 249: PUSH
 250: LD_INT 2
 252: ARRAY
 253: PPUSH
 254: LD_VAR 0 3
 258: PUSH
 259: LD_INT 3
 261: ARRAY
 262: PPUSH
 263: CALL_OW 62
 267: GO 233
 269: POP
 270: POP
// end ;
 271: LD_VAR 0 1
 275: RET
// function init_map ; var i ; begin
 276: LD_INT 0
 278: PPUSH
 279: PPUSH
// prepare_deposits ;
 280: CALL 0 0 0
// extra_oil_deposits_locations := [ [ 29 , 3 ] , [ 82 , 115 ] , [ 134 , 3 ] , [ 192 , 116 ] ] ;
 284: LD_ADDR_EXP 27
 288: PUSH
 289: LD_INT 29
 291: PUSH
 292: LD_INT 3
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: PUSH
 299: LD_INT 82
 301: PUSH
 302: LD_INT 115
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: PUSH
 309: LD_INT 134
 311: PUSH
 312: LD_INT 3
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: PUSH
 319: LD_INT 192
 321: PUSH
 322: LD_INT 116
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: LIST
 333: LIST
 334: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 62 , 60 ] , [ 157 , 60 ] ] ;
 335: LD_ADDR_EXP 28
 339: PUSH
 340: LD_INT 62
 342: PUSH
 343: LD_INT 60
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: PUSH
 350: LD_INT 157
 352: PUSH
 353: LD_INT 60
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: ST_TO_ADDR
// depot_def := [ [ 35 , 34 , 0 ] , [ 56 , 86 , 2 ] , [ 158 , 34 , 5 ] , [ 185 , 86 , 3 ] ] ;
 364: LD_ADDR_EXP 22
 368: PUSH
 369: LD_INT 35
 371: PUSH
 372: LD_INT 34
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: EMPTY
 379: LIST
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 56
 385: PUSH
 386: LD_INT 86
 388: PUSH
 389: LD_INT 2
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: LIST
 396: PUSH
 397: LD_INT 158
 399: PUSH
 400: LD_INT 34
 402: PUSH
 403: LD_INT 5
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: LD_INT 185
 413: PUSH
 414: LD_INT 86
 416: PUSH
 417: LD_INT 3
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: LIST
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: LIST
 429: LIST
 430: ST_TO_ADDR
// labs_def := [ [ 19 , 28 , 1 ] , [ 49 , 92 , 1 ] , [ 166 , 23 , 4 ] , [ 205 , 97 , 4 ] ] ;
 431: LD_ADDR_EXP 24
 435: PUSH
 436: LD_INT 19
 438: PUSH
 439: LD_INT 28
 441: PUSH
 442: LD_INT 1
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PUSH
 450: LD_INT 49
 452: PUSH
 453: LD_INT 92
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 166
 466: PUSH
 467: LD_INT 23
 469: PUSH
 470: LD_INT 4
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: LIST
 477: PUSH
 478: LD_INT 205
 480: PUSH
 481: LD_INT 97
 483: PUSH
 484: LD_INT 4
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: ST_TO_ADDR
// factory_def := [ [ 26 , 16 , 2 ] , [ 64 , 103 , 0 ] , [ 154 , 18 , 3 ] , [ 190 , 103 , 5 ] ] ;
 498: LD_ADDR_EXP 25
 502: PUSH
 503: LD_INT 26
 505: PUSH
 506: LD_INT 16
 508: PUSH
 509: LD_INT 2
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: LIST
 516: PUSH
 517: LD_INT 64
 519: PUSH
 520: LD_INT 103
 522: PUSH
 523: LD_INT 0
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 154
 533: PUSH
 534: LD_INT 18
 536: PUSH
 537: LD_INT 3
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_INT 190
 547: PUSH
 548: LD_INT 103
 550: PUSH
 551: LD_INT 5
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: LIST
 558: PUSH
 559: EMPTY
 560: LIST
 561: LIST
 562: LIST
 563: LIST
 564: ST_TO_ADDR
// start_def := [ [ 35 , 26 ] , [ 65 , 94 ] , [ 150 , 26 ] , [ 185 , 94 ] ] ;
 565: LD_ADDR_EXP 26
 569: PUSH
 570: LD_INT 35
 572: PUSH
 573: LD_INT 26
 575: PUSH
 576: EMPTY
 577: LIST
 578: LIST
 579: PUSH
 580: LD_INT 65
 582: PUSH
 583: LD_INT 94
 585: PUSH
 586: EMPTY
 587: LIST
 588: LIST
 589: PUSH
 590: LD_INT 150
 592: PUSH
 593: LD_INT 26
 595: PUSH
 596: EMPTY
 597: LIST
 598: LIST
 599: PUSH
 600: LD_INT 185
 602: PUSH
 603: LD_INT 94
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: ST_TO_ADDR
// breastworks_def := [ [ [ 44 , 18 , 4 ] , [ 47 , 51 , 5 ] , [ 35 , 8 , 4 ] , [ 50 , 38 , 5 ] ] , [ [ 81 , 97 , 4 ] , [ 54 , 71 , 3 ] , [ 81 , 110 , 5 ] , [ 66 , 82 , 3 ] ] , [ [ 136 , 20 , 1 ] , [ 164 , 48 , 1 ] , [ 130 , 8 , 1 ] , [ 147 , 37 , 0 ] ] , [ [ 181 , 103 , 1 ] , [ 178 , 72 , 1 ] , [ 186 , 112 , 1 ] , [ 172 , 82 , 2 ] ] ] ;
 616: LD_ADDR_EXP 23
 620: PUSH
 621: LD_INT 44
 623: PUSH
 624: LD_INT 18
 626: PUSH
 627: LD_INT 4
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: LIST
 634: PUSH
 635: LD_INT 47
 637: PUSH
 638: LD_INT 51
 640: PUSH
 641: LD_INT 5
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PUSH
 649: LD_INT 35
 651: PUSH
 652: LD_INT 8
 654: PUSH
 655: LD_INT 4
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: LIST
 662: PUSH
 663: LD_INT 50
 665: PUSH
 666: LD_INT 38
 668: PUSH
 669: LD_INT 5
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: LIST
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: PUSH
 683: LD_INT 81
 685: PUSH
 686: LD_INT 97
 688: PUSH
 689: LD_INT 4
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: PUSH
 697: LD_INT 54
 699: PUSH
 700: LD_INT 71
 702: PUSH
 703: LD_INT 3
 705: PUSH
 706: EMPTY
 707: LIST
 708: LIST
 709: LIST
 710: PUSH
 711: LD_INT 81
 713: PUSH
 714: LD_INT 110
 716: PUSH
 717: LD_INT 5
 719: PUSH
 720: EMPTY
 721: LIST
 722: LIST
 723: LIST
 724: PUSH
 725: LD_INT 66
 727: PUSH
 728: LD_INT 82
 730: PUSH
 731: LD_INT 3
 733: PUSH
 734: EMPTY
 735: LIST
 736: LIST
 737: LIST
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: LIST
 743: LIST
 744: PUSH
 745: LD_INT 136
 747: PUSH
 748: LD_INT 20
 750: PUSH
 751: LD_INT 1
 753: PUSH
 754: EMPTY
 755: LIST
 756: LIST
 757: LIST
 758: PUSH
 759: LD_INT 164
 761: PUSH
 762: LD_INT 48
 764: PUSH
 765: LD_INT 1
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: LIST
 772: PUSH
 773: LD_INT 130
 775: PUSH
 776: LD_INT 8
 778: PUSH
 779: LD_INT 1
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PUSH
 787: LD_INT 147
 789: PUSH
 790: LD_INT 37
 792: PUSH
 793: LD_INT 0
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: LIST
 800: PUSH
 801: EMPTY
 802: LIST
 803: LIST
 804: LIST
 805: LIST
 806: PUSH
 807: LD_INT 181
 809: PUSH
 810: LD_INT 103
 812: PUSH
 813: LD_INT 1
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: LIST
 820: PUSH
 821: LD_INT 178
 823: PUSH
 824: LD_INT 72
 826: PUSH
 827: LD_INT 1
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: LIST
 834: PUSH
 835: LD_INT 186
 837: PUSH
 838: LD_INT 112
 840: PUSH
 841: LD_INT 1
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: LIST
 848: PUSH
 849: LD_INT 172
 851: PUSH
 852: LD_INT 82
 854: PUSH
 855: LD_INT 2
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: LIST
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: LIST
 873: LIST
 874: ST_TO_ADDR
// if def_extra_oil_deposits then
 875: LD_EXP 63
 879: IFFALSE 923
// for i in extra_oil_deposits_locations do
 881: LD_ADDR_VAR 0 2
 885: PUSH
 886: LD_EXP 27
 890: PUSH
 891: FOR_IN
 892: IFFALSE 921
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
 894: LD_VAR 0 2
 898: PUSH
 899: LD_INT 1
 901: ARRAY
 902: PPUSH
 903: LD_VAR 0 2
 907: PUSH
 908: LD_INT 2
 910: ARRAY
 911: PPUSH
 912: LD_INT 2
 914: PPUSH
 915: CALL_OW 62
 919: GO 891
 921: POP
 922: POP
// if def_extra_sib_deposits then
 923: LD_EXP 64
 927: IFFALSE 971
// for i in extra_sib_deposits_locations do
 929: LD_ADDR_VAR 0 2
 933: PUSH
 934: LD_EXP 28
 938: PUSH
 939: FOR_IN
 940: IFFALSE 969
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 2
 958: ARRAY
 959: PPUSH
 960: LD_INT 3
 962: PPUSH
 963: CALL_OW 62
 967: GO 939
 969: POP
 970: POP
// end ;
 971: LD_VAR 0 1
 975: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
 976: LD_INT 0
 978: PPUSH
 979: PPUSH
 980: PPUSH
 981: PPUSH
 982: PPUSH
 983: PPUSH
 984: PPUSH
 985: PPUSH
 986: PPUSH
// if Multiplayer then
 987: LD_OWVAR 4
 991: IFFALSE 1055
// begin Game_Type = mp_game_type ;
 993: LD_ADDR_EXP 56
 997: PUSH
 998: LD_OWVAR 6
1002: ST_TO_ADDR
// Your_Side := mp_player_side ;
1003: LD_ADDR_OWVAR 2
1007: PUSH
1008: LD_OWVAR 7
1012: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
1013: LD_ADDR_EXP 18
1017: PUSH
1018: LD_OWVAR 17
1022: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
1023: LD_ADDR_EXP 16
1027: PUSH
1028: LD_OWVAR 15
1032: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
1033: LD_ADDR_EXP 19
1037: PUSH
1038: LD_OWVAR 16
1042: ST_TO_ADDR
// Teams = mp_teams ;
1043: LD_ADDR_EXP 17
1047: PUSH
1048: LD_OWVAR 12
1052: ST_TO_ADDR
// end else
1053: GO 1217
// begin Game_Type = 4 ;
1055: LD_ADDR_EXP 56
1059: PUSH
1060: LD_INT 4
1062: ST_TO_ADDR
// Your_Side = 1 ;
1063: LD_ADDR_OWVAR 2
1067: PUSH
1068: LD_INT 1
1070: ST_TO_ADDR
// Side_Positions = [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
1071: LD_ADDR_EXP 18
1075: PUSH
1076: LD_INT 1
1078: PUSH
1079: LD_INT 2
1081: PUSH
1082: LD_INT 3
1084: PUSH
1085: LD_INT 4
1087: PUSH
1088: LD_INT 0
1090: PUSH
1091: LD_INT 0
1093: PUSH
1094: LD_INT 0
1096: PUSH
1097: LD_INT 0
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: LIST
1106: LIST
1107: LIST
1108: LIST
1109: ST_TO_ADDR
// Side_Teams = [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
1110: LD_ADDR_EXP 16
1114: PUSH
1115: LD_INT 1
1117: PUSH
1118: LD_INT 1
1120: PUSH
1121: LD_INT 2
1123: PUSH
1124: LD_INT 2
1126: PUSH
1127: LD_INT 0
1129: PUSH
1130: LD_INT 0
1132: PUSH
1133: LD_INT 0
1135: PUSH
1136: LD_INT 0
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: LIST
1148: ST_TO_ADDR
// Side_Nations = [ 3 , 2 , 1 , 2 , 0 , 0 , 0 , 0 ] ;
1149: LD_ADDR_EXP 19
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: LD_INT 2
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: LD_INT 2
1165: PUSH
1166: LD_INT 0
1168: PUSH
1169: LD_INT 0
1171: PUSH
1172: LD_INT 0
1174: PUSH
1175: LD_INT 0
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: LIST
1186: LIST
1187: ST_TO_ADDR
// Teams = [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
1188: LD_ADDR_EXP 17
1192: PUSH
1193: LD_INT 1
1195: PUSH
1196: LD_INT 2
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PUSH
1203: LD_INT 3
1205: PUSH
1206: LD_INT 4
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: ST_TO_ADDR
// end ; if Multiplayer then
1217: LD_OWVAR 4
1221: IFFALSE 1446
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
1223: LD_ADDR_EXP 58
1227: PUSH
1228: LD_INT 0
1230: PPUSH
1231: CALL_OW 426
1235: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
1236: LD_ADDR_EXP 59
1240: PUSH
1241: LD_INT 1
1243: PPUSH
1244: CALL_OW 426
1248: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
1249: LD_ADDR_EXP 60
1253: PUSH
1254: LD_INT 2
1256: PPUSH
1257: CALL_OW 426
1261: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
1262: LD_ADDR_EXP 61
1266: PUSH
1267: LD_INT 3
1269: PPUSH
1270: CALL_OW 426
1274: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
1275: LD_ADDR_EXP 62
1279: PUSH
1280: LD_INT 4
1282: PPUSH
1283: CALL_OW 426
1287: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
1288: LD_ADDR_EXP 63
1292: PUSH
1293: LD_INT 5
1295: PPUSH
1296: CALL_OW 426
1300: ST_TO_ADDR
// def_extra_sib_deposits = GetMultiplayerSetting ( 6 ) ;
1301: LD_ADDR_EXP 64
1305: PUSH
1306: LD_INT 6
1308: PPUSH
1309: CALL_OW 426
1313: ST_TO_ADDR
// def_base_size = GetMultiplayerSetting ( 7 ) ;
1314: LD_ADDR_EXP 1
1318: PUSH
1319: LD_INT 7
1321: PPUSH
1322: CALL_OW 426
1326: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
1327: LD_ADDR_EXP 65
1331: PUSH
1332: LD_INT 10
1334: PPUSH
1335: CALL_OW 426
1339: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
1340: LD_ADDR_EXP 66
1344: PUSH
1345: LD_INT 11
1347: PPUSH
1348: CALL_OW 426
1352: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
1353: LD_ADDR_EXP 67
1357: PUSH
1358: LD_INT 12
1360: PPUSH
1361: CALL_OW 426
1365: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
1366: LD_ADDR_EXP 69
1370: PUSH
1371: LD_INT 13
1373: PPUSH
1374: CALL_OW 426
1378: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
1379: LD_ADDR_EXP 68
1383: PUSH
1384: LD_INT 14
1386: PPUSH
1387: CALL_OW 426
1391: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
1392: LD_ADDR_EXP 70
1396: PUSH
1397: LD_INT 15
1399: PPUSH
1400: CALL_OW 426
1404: ST_TO_ADDR
// def_west_nations = GetMultiplayerSetting ( 21 ) ;
1405: LD_ADDR_EXP 2
1409: PUSH
1410: LD_INT 21
1412: PPUSH
1413: CALL_OW 426
1417: ST_TO_ADDR
// def_east_nations = GetMultiplayerSetting ( 22 ) ;
1418: LD_ADDR_EXP 3
1422: PUSH
1423: LD_INT 22
1425: PPUSH
1426: CALL_OW 426
1430: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 23 ) ;
1431: LD_ADDR_VAR 0 9
1435: PUSH
1436: LD_INT 23
1438: PPUSH
1439: CALL_OW 426
1443: ST_TO_ADDR
// end else
1444: GO 1586
// begin randomize ;
1446: CALL_OW 10
// def_base_level = 3 ;
1450: LD_ADDR_EXP 58
1454: PUSH
1455: LD_INT 3
1457: ST_TO_ADDR
// def_amount_of_people = 1 ;
1458: LD_ADDR_EXP 59
1462: PUSH
1463: LD_INT 1
1465: ST_TO_ADDR
// def_skill_level = 1 ;
1466: LD_ADDR_EXP 60
1470: PUSH
1471: LD_INT 1
1473: ST_TO_ADDR
// def_starting_resources = 2 ;
1474: LD_ADDR_EXP 61
1478: PUSH
1479: LD_INT 2
1481: ST_TO_ADDR
// def_shipments_density = 1 ;
1482: LD_ADDR_EXP 62
1486: PUSH
1487: LD_INT 1
1489: ST_TO_ADDR
// def_extra_oil_deposits = 1 ;
1490: LD_ADDR_EXP 63
1494: PUSH
1495: LD_INT 1
1497: ST_TO_ADDR
// def_extra_sib_deposits = 1 ;
1498: LD_ADDR_EXP 64
1502: PUSH
1503: LD_INT 1
1505: ST_TO_ADDR
// def_base_size = 2 ;
1506: LD_ADDR_EXP 1
1510: PUSH
1511: LD_INT 2
1513: ST_TO_ADDR
// def_shared_vision = 1 ;
1514: LD_ADDR_EXP 65
1518: PUSH
1519: LD_INT 1
1521: ST_TO_ADDR
// def_morale_flags = 1 ;
1522: LD_ADDR_EXP 66
1526: PUSH
1527: LD_INT 1
1529: ST_TO_ADDR
// def_siberite_detection = 1 ;
1530: LD_ADDR_EXP 67
1534: PUSH
1535: LD_INT 1
1537: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
1538: LD_ADDR_EXP 69
1542: PUSH
1543: LD_INT 3
1545: ST_TO_ADDR
// def_people_respawning = 2 ;
1546: LD_ADDR_EXP 68
1550: PUSH
1551: LD_INT 2
1553: ST_TO_ADDR
// def_siberite_bomb = 0 ;
1554: LD_ADDR_EXP 70
1558: PUSH
1559: LD_INT 0
1561: ST_TO_ADDR
// def_west_nations = 0 ;
1562: LD_ADDR_EXP 2
1566: PUSH
1567: LD_INT 0
1569: ST_TO_ADDR
// def_east_nations = 2 ;
1570: LD_ADDR_EXP 3
1574: PUSH
1575: LD_INT 2
1577: ST_TO_ADDR
// tech_level = 4 ;
1578: LD_ADDR_VAR 0 9
1582: PUSH
1583: LD_INT 4
1585: ST_TO_ADDR
// end ; InitGameRules ;
1586: CALL 15933 0 0
// if def_game_rules = 0 then
1590: LD_EXP 57
1594: PUSH
1595: LD_INT 0
1597: EQUAL
1598: IFFALSE 1625
// begin if isSGUI then
1600: LD_OWVAR 83
1604: IFFALSE 1612
// setMpTechs ( ) else
1606: CALL 19383 0 0
1610: GO 1625
// begin SetMpTechLevel ( tech_level + 1 ) ;
1612: LD_VAR 0 9
1616: PUSH
1617: LD_INT 1
1619: PLUS
1620: PPUSH
1621: CALL 19530 0 1
// end ; end ; if not def_base_level then
1625: LD_EXP 58
1629: NOT
1630: IFFALSE 1640
// def_base_size := 0 ;
1632: LD_ADDR_EXP 1
1636: PUSH
1637: LD_INT 0
1639: ST_TO_ADDR
// is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1640: LD_ADDR_EXP 4
1644: PUSH
1645: LD_INT 0
1647: PUSH
1648: LD_INT 1
1650: PUSH
1651: LD_INT 1
1653: PUSH
1654: LD_INT 1
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: PUSH
1663: LD_EXP 58
1667: PUSH
1668: LD_INT 1
1670: PLUS
1671: ARRAY
1672: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
1673: LD_ADDR_EXP 5
1677: PUSH
1678: LD_INT 0
1680: PUSH
1681: LD_INT 0
1683: PUSH
1684: LD_INT 2
1686: PUSH
1687: LD_INT 4
1689: PUSH
1690: EMPTY
1691: LIST
1692: LIST
1693: LIST
1694: LIST
1695: PUSH
1696: LD_EXP 58
1700: PUSH
1701: LD_INT 1
1703: PLUS
1704: ARRAY
1705: ST_TO_ADDR
// if Game_Type <> 4 then
1706: LD_EXP 56
1710: PUSH
1711: LD_INT 4
1713: NONEQUAL
1714: IFFALSE 1751
// number_of_people = [ 5 , 7 , 9 , 11 ] [ def_amount_of_people + 1 ] else
1716: LD_ADDR_EXP 6
1720: PUSH
1721: LD_INT 5
1723: PUSH
1724: LD_INT 7
1726: PUSH
1727: LD_INT 9
1729: PUSH
1730: LD_INT 11
1732: PUSH
1733: EMPTY
1734: LIST
1735: LIST
1736: LIST
1737: LIST
1738: PUSH
1739: LD_EXP 59
1743: PUSH
1744: LD_INT 1
1746: PLUS
1747: ARRAY
1748: ST_TO_ADDR
1749: GO 1784
// number_of_people = [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
1751: LD_ADDR_EXP 6
1755: PUSH
1756: LD_INT 9
1758: PUSH
1759: LD_INT 12
1761: PUSH
1762: LD_INT 15
1764: PUSH
1765: LD_INT 24
1767: PUSH
1768: EMPTY
1769: LIST
1770: LIST
1771: LIST
1772: LIST
1773: PUSH
1774: LD_EXP 59
1778: PUSH
1779: LD_INT 1
1781: PLUS
1782: ARRAY
1783: ST_TO_ADDR
// skill_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1784: LD_ADDR_EXP 7
1788: PUSH
1789: LD_INT 2
1791: PUSH
1792: LD_INT 3
1794: PUSH
1795: LD_INT 4
1797: PUSH
1798: LD_INT 5
1800: PUSH
1801: EMPTY
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: PUSH
1807: LD_EXP 60
1811: PUSH
1812: LD_INT 1
1814: PLUS
1815: ARRAY
1816: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1817: LD_ADDR_EXP 9
1821: PUSH
1822: LD_INT 0
1824: PUSH
1825: LD_INT 0
1827: PUSH
1828: LD_INT 0
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: LIST
1835: PUSH
1836: LD_INT 30
1838: PUSH
1839: LD_INT 0
1841: PUSH
1842: LD_INT 0
1844: PUSH
1845: EMPTY
1846: LIST
1847: LIST
1848: LIST
1849: PUSH
1850: LD_INT 50
1852: PUSH
1853: LD_INT 20
1855: PUSH
1856: LD_INT 0
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: LIST
1863: PUSH
1864: LD_INT 80
1866: PUSH
1867: LD_INT 40
1869: PUSH
1870: LD_INT 20
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: LIST
1882: LIST
1883: PUSH
1884: LD_EXP 61
1888: PUSH
1889: LD_INT 1
1891: PLUS
1892: ARRAY
1893: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1894: LD_ADDR_EXP 8
1898: PUSH
1899: LD_INT 10
1901: PUSH
1902: EMPTY
1903: LIST
1904: PUSH
1905: LD_INT 7
1907: PUSH
1908: LD_INT 14
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: PUSH
1915: LD_INT 6
1917: PUSH
1918: LD_INT 12
1920: PUSH
1921: LD_INT 18
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: LIST
1928: PUSH
1929: LD_INT 5
1931: PUSH
1932: LD_INT 10
1934: PUSH
1935: LD_INT 15
1937: PUSH
1938: LD_INT 20
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: LD_EXP 61
1957: PUSH
1958: LD_INT 1
1960: PLUS
1961: ARRAY
1962: ST_TO_ADDR
// shipments_density = [ 18 , 25 , 35 ] [ def_shipments_density + 1 ] ;
1963: LD_ADDR_EXP 10
1967: PUSH
1968: LD_INT 18
1970: PUSH
1971: LD_INT 25
1973: PUSH
1974: LD_INT 35
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: LIST
1981: PUSH
1982: LD_EXP 62
1986: PUSH
1987: LD_INT 1
1989: PLUS
1990: ARRAY
1991: ST_TO_ADDR
// amount_of_apemen := [ 0 , 2 , 4 , 6 ] [ def_amount_of_apemen + 1 ] ;
1992: LD_ADDR_EXP 12
1996: PUSH
1997: LD_INT 0
1999: PUSH
2000: LD_INT 2
2002: PUSH
2003: LD_INT 4
2005: PUSH
2006: LD_INT 6
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: PUSH
2015: LD_EXP 69
2019: PUSH
2020: LD_INT 1
2022: PLUS
2023: ARRAY
2024: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
2025: LD_ADDR_EXP 13
2029: PUSH
2030: LD_INT 0
2032: PUSH
2033: LD_INT 8400
2035: PUSH
2036: LD_INT 1750
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: LIST
2043: PUSH
2044: LD_EXP 68
2048: PUSH
2049: LD_INT 1
2051: PLUS
2052: ARRAY
2053: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
2054: LD_ADDR_EXP 14
2058: PUSH
2059: LD_INT 0
2061: PUSH
2062: LD_INT 21000
2064: PUSH
2065: LD_INT 4200
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: LIST
2072: PUSH
2073: LD_EXP 68
2077: PUSH
2078: LD_INT 1
2080: PLUS
2081: ARRAY
2082: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
2083: LD_ADDR_EXP 15
2087: PUSH
2088: LD_INT 0
2090: PUSH
2091: LD_INT 1
2093: PUSH
2094: LD_INT 63000
2096: PUSH
2097: LD_INT 126000
2099: PUSH
2100: LD_INT 189000
2102: PUSH
2103: LD_INT 252000
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: PUSH
2114: LD_EXP 70
2118: PUSH
2119: LD_INT 1
2121: PLUS
2122: ARRAY
2123: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
2124: LD_ADDR_EXP 11
2128: PUSH
2129: LD_INT 1
2131: NEG
2132: PUSH
2133: LD_INT 350
2135: PUSH
2136: LD_INT 700
2138: PUSH
2139: LD_INT 1400
2141: PUSH
2142: LD_INT 0
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: LIST
2149: LIST
2150: LIST
2151: PUSH
2152: LD_EXP 66
2156: PUSH
2157: LD_INT 1
2159: PLUS
2160: ARRAY
2161: ST_TO_ADDR
// battle_flags_id = [ ] ;
2162: LD_ADDR_EXP 29
2166: PUSH
2167: EMPTY
2168: ST_TO_ADDR
// if not def_builduptime then
2169: LD_EXP 71
2173: NOT
2174: IFFALSE 2179
// disable ( 600 ) ;
2176: LD_INT 600
2178: DISABLE_MARKED
// end ;
2179: LD_VAR 0 1
2183: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2184: LD_INT 0
2186: PPUSH
2187: PPUSH
2188: PPUSH
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
2189: LD_ADDR_EXP 20
2193: PUSH
2194: LD_EXP 16
2198: PUSH
2199: LD_INT 0
2201: PUSH
2202: EMPTY
2203: LIST
2204: DIFF
2205: PUSH
2206: LD_INT 1
2208: GREATER
2209: ST_TO_ADDR
// if not Team_Game then
2210: LD_EXP 20
2214: NOT
2215: IFFALSE 2313
// begin for i = 1 to 8 do
2217: LD_ADDR_VAR 0 2
2221: PUSH
2222: DOUBLE
2223: LD_INT 1
2225: DEC
2226: ST_TO_ADDR
2227: LD_INT 8
2229: PUSH
2230: FOR_TO
2231: IFFALSE 2309
// for j = 1 to 8 do
2233: LD_ADDR_VAR 0 3
2237: PUSH
2238: DOUBLE
2239: LD_INT 1
2241: DEC
2242: ST_TO_ADDR
2243: LD_INT 8
2245: PUSH
2246: FOR_TO
2247: IFFALSE 2305
// if i <> j then
2249: LD_VAR 0 2
2253: PUSH
2254: LD_VAR 0 3
2258: NONEQUAL
2259: IFFALSE 2283
// SetAttitude ( i , j , att_neutral , true ) else
2261: LD_VAR 0 2
2265: PPUSH
2266: LD_VAR 0 3
2270: PPUSH
2271: LD_INT 0
2273: PPUSH
2274: LD_INT 1
2276: PPUSH
2277: CALL_OW 80
2281: GO 2303
// SetAttitude ( i , j , att_friend , true ) ;
2283: LD_VAR 0 2
2287: PPUSH
2288: LD_VAR 0 3
2292: PPUSH
2293: LD_INT 1
2295: PPUSH
2296: LD_INT 1
2298: PPUSH
2299: CALL_OW 80
2303: GO 2246
2305: POP
2306: POP
2307: GO 2230
2309: POP
2310: POP
// end else
2311: GO 2488
// begin if def_shared_vision then
2313: LD_EXP 65
2317: IFFALSE 2382
// begin for i in Teams do
2319: LD_ADDR_VAR 0 2
2323: PUSH
2324: LD_EXP 17
2328: PUSH
2329: FOR_IN
2330: IFFALSE 2380
// for j = 2 to i do
2332: LD_ADDR_VAR 0 3
2336: PUSH
2337: DOUBLE
2338: LD_INT 2
2340: DEC
2341: ST_TO_ADDR
2342: LD_VAR 0 2
2346: PUSH
2347: FOR_TO
2348: IFFALSE 2376
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2350: LD_VAR 0 2
2354: PUSH
2355: LD_VAR 0 3
2359: ARRAY
2360: PPUSH
2361: LD_VAR 0 2
2365: PUSH
2366: LD_INT 1
2368: ARRAY
2369: PPUSH
2370: CALL_OW 343
2374: GO 2347
2376: POP
2377: POP
2378: GO 2329
2380: POP
2381: POP
// end ; for i = 1 to 8 do
2382: LD_ADDR_VAR 0 2
2386: PUSH
2387: DOUBLE
2388: LD_INT 1
2390: DEC
2391: ST_TO_ADDR
2392: LD_INT 8
2394: PUSH
2395: FOR_TO
2396: IFFALSE 2486
// for j = 1 to 8 do
2398: LD_ADDR_VAR 0 3
2402: PUSH
2403: DOUBLE
2404: LD_INT 1
2406: DEC
2407: ST_TO_ADDR
2408: LD_INT 8
2410: PUSH
2411: FOR_TO
2412: IFFALSE 2482
// if Side_Teams [ i ] = Side_Teams [ j ] then
2414: LD_EXP 16
2418: PUSH
2419: LD_VAR 0 2
2423: ARRAY
2424: PUSH
2425: LD_EXP 16
2429: PUSH
2430: LD_VAR 0 3
2434: ARRAY
2435: EQUAL
2436: IFFALSE 2460
// SetAttitude ( i , j , att_friend , true ) else
2438: LD_VAR 0 2
2442: PPUSH
2443: LD_VAR 0 3
2447: PPUSH
2448: LD_INT 1
2450: PPUSH
2451: LD_INT 1
2453: PPUSH
2454: CALL_OW 80
2458: GO 2480
// SetAttitude ( i , j , att_enemy , true ) ;
2460: LD_VAR 0 2
2464: PPUSH
2465: LD_VAR 0 3
2469: PPUSH
2470: LD_INT 2
2472: PPUSH
2473: LD_INT 1
2475: PPUSH
2476: CALL_OW 80
2480: GO 2411
2482: POP
2483: POP
2484: GO 2395
2486: POP
2487: POP
// end ; end ;
2488: LD_VAR 0 1
2492: RET
// function prepare_people ( count , cl , x , y , r ) ; var i , j , un ; begin
2493: LD_INT 0
2495: PPUSH
2496: PPUSH
2497: PPUSH
2498: PPUSH
// result := [ ] ;
2499: LD_ADDR_VAR 0 6
2503: PUSH
2504: EMPTY
2505: ST_TO_ADDR
// for i := 1 to count do
2506: LD_ADDR_VAR 0 7
2510: PUSH
2511: DOUBLE
2512: LD_INT 1
2514: DEC
2515: ST_TO_ADDR
2516: LD_VAR 0 1
2520: PUSH
2521: FOR_TO
2522: IFFALSE 2918
// begin uc_direction := Rand ( 0 , 5 ) ;
2524: LD_ADDR_OWVAR 24
2528: PUSH
2529: LD_INT 0
2531: PPUSH
2532: LD_INT 5
2534: PPUSH
2535: CALL_OW 12
2539: ST_TO_ADDR
// if commander then
2540: LD_LOC 1
2544: IFFALSE 2653
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2546: LD_ADDR_OWVAR 26
2550: PUSH
2551: LD_OWVAR 19
2555: PUSH
2556: LD_OWVAR 20
2560: ARRAY
2561: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2562: LD_INT 1
2564: PPUSH
2565: LD_INT 2
2567: PPUSH
2568: CALL_OW 12
2572: PPUSH
2573: LD_VAR 0 2
2577: PPUSH
2578: LD_EXP 7
2582: PUSH
2583: LD_INT 2
2585: PLUS
2586: PPUSH
2587: CALL_OW 380
// hc_importance := 105 ;
2591: LD_ADDR_OWVAR 32
2595: PUSH
2596: LD_INT 105
2598: ST_TO_ADDR
// commander := false ;
2599: LD_ADDR_LOC 1
2603: PUSH
2604: LD_INT 0
2606: ST_TO_ADDR
// if Multiplayer then
2607: LD_OWVAR 4
2611: IFFALSE 2651
// begin hc_gallery := MULTIAVATARS ;
2613: LD_ADDR_OWVAR 33
2617: PUSH
2618: LD_STRING MULTIAVATARS
2620: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2621: LD_ADDR_OWVAR 34
2625: PUSH
2626: LD_OWVAR 20
2630: PPUSH
2631: CALL_OW 525
2635: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2636: LD_ADDR_OWVAR 27
2640: PUSH
2641: LD_OWVAR 20
2645: PPUSH
2646: CALL_OW 526
2650: ST_TO_ADDR
// end ; end else
2651: GO 2716
// begin hc_name :=  ;
2653: LD_ADDR_OWVAR 26
2657: PUSH
2658: LD_STRING 
2660: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2661: LD_INT 1
2663: PPUSH
2664: LD_INT 2
2666: PPUSH
2667: CALL_OW 12
2671: PPUSH
2672: LD_VAR 0 2
2676: PPUSH
2677: LD_EXP 7
2681: PPUSH
2682: CALL_OW 380
// hc_importance := 0 ;
2686: LD_ADDR_OWVAR 32
2690: PUSH
2691: LD_INT 0
2693: ST_TO_ADDR
// if Multiplayer then
2694: LD_OWVAR 4
2698: IFFALSE 2716
// begin hc_gallery :=  ;
2700: LD_ADDR_OWVAR 33
2704: PUSH
2705: LD_STRING 
2707: ST_TO_ADDR
// hc_face_number := 0 ;
2708: LD_ADDR_OWVAR 34
2712: PUSH
2713: LD_INT 0
2715: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2716: LD_ADDR_VAR 0 9
2720: PUSH
2721: CALL_OW 44
2725: ST_TO_ADDR
// if global_defined then
2726: LD_LOC 3
2730: IFFALSE 2870
// begin if ( cl = class_soldier ) then
2732: LD_VAR 0 2
2736: PUSH
2737: LD_INT 1
2739: EQUAL
2740: IFFALSE 2760
// j := i + soldiers_created else
2742: LD_ADDR_VAR 0 8
2746: PUSH
2747: LD_VAR 0 7
2751: PUSH
2752: LD_LOC 4
2756: PLUS
2757: ST_TO_ADDR
2758: GO 2770
// j := i ;
2760: LD_ADDR_VAR 0 8
2764: PUSH
2765: LD_VAR 0 7
2769: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2770: LD_LOC 2
2774: PUSH
2775: LD_VAR 0 2
2779: ARRAY
2780: PUSH
2781: LD_VAR 0 8
2785: ARRAY
2786: PPUSH
2787: LD_VAR 0 9
2791: PPUSH
2792: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2796: LD_VAR 0 9
2800: PPUSH
2801: LD_INT 2
2803: PPUSH
2804: LD_LOC 2
2808: PUSH
2809: LD_VAR 0 2
2813: ARRAY
2814: PUSH
2815: LD_VAR 0 8
2819: ARRAY
2820: PPUSH
2821: LD_INT 2
2823: PPUSH
2824: CALL_OW 260
2828: PPUSH
2829: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2833: LD_VAR 0 9
2837: PPUSH
2838: LD_INT 1
2840: PPUSH
2841: LD_LOC 2
2845: PUSH
2846: LD_VAR 0 2
2850: ARRAY
2851: PUSH
2852: LD_VAR 0 8
2856: ARRAY
2857: PPUSH
2858: LD_INT 1
2860: PPUSH
2861: CALL_OW 260
2865: PPUSH
2866: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2870: LD_VAR 0 9
2874: PPUSH
2875: LD_VAR 0 3
2879: PPUSH
2880: LD_VAR 0 4
2884: PPUSH
2885: LD_VAR 0 5
2889: PPUSH
2890: LD_INT 0
2892: PPUSH
2893: CALL_OW 50
// result := result ^ [ un ] ;
2897: LD_ADDR_VAR 0 6
2901: PUSH
2902: LD_VAR 0 6
2906: PUSH
2907: LD_VAR 0 9
2911: PUSH
2912: EMPTY
2913: LIST
2914: ADD
2915: ST_TO_ADDR
// end ;
2916: GO 2521
2918: POP
2919: POP
// if not global_defined then
2920: LD_LOC 3
2924: NOT
2925: IFFALSE 3003
// if ( global_units >= cl ) then
2927: LD_LOC 2
2931: PUSH
2932: LD_VAR 0 2
2936: GREATEREQUAL
2937: IFFALSE 2978
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2939: LD_ADDR_LOC 2
2943: PUSH
2944: LD_LOC 2
2948: PPUSH
2949: LD_VAR 0 2
2953: PPUSH
2954: LD_LOC 2
2958: PUSH
2959: LD_VAR 0 2
2963: ARRAY
2964: PUSH
2965: LD_VAR 0 6
2969: ADD
2970: PPUSH
2971: CALL_OW 1
2975: ST_TO_ADDR
2976: GO 3003
// global_units := Replace ( global_units , cl , result ) ;
2978: LD_ADDR_LOC 2
2982: PUSH
2983: LD_LOC 2
2987: PPUSH
2988: LD_VAR 0 2
2992: PPUSH
2993: LD_VAR 0 6
2997: PPUSH
2998: CALL_OW 1
3002: ST_TO_ADDR
// end ;
3003: LD_VAR 0 6
3007: RET
// function prepare_side ( side , pos , nation ) ; var x , y , dir , i , r , sol , br , dep ; begin
3008: LD_INT 0
3010: PPUSH
3011: PPUSH
3012: PPUSH
3013: PPUSH
3014: PPUSH
3015: PPUSH
3016: PPUSH
3017: PPUSH
3018: PPUSH
// if side in [ 0 , 9 ] then
3019: LD_VAR 0 1
3023: PUSH
3024: LD_INT 0
3026: PUSH
3027: LD_INT 9
3029: PUSH
3030: EMPTY
3031: LIST
3032: LIST
3033: IN
3034: IFFALSE 3038
// exit ;
3036: GO 4293
// uc_nation := nation ;
3038: LD_ADDR_OWVAR 21
3042: PUSH
3043: LD_VAR 0 3
3047: ST_TO_ADDR
// uc_side := side ;
3048: LD_ADDR_OWVAR 20
3052: PUSH
3053: LD_VAR 0 1
3057: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3058: LD_ADDR_VAR 0 5
3062: PUSH
3063: LD_EXP 22
3067: PUSH
3068: LD_VAR 0 2
3072: ARRAY
3073: PUSH
3074: LD_INT 1
3076: ARRAY
3077: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3078: LD_ADDR_VAR 0 6
3082: PUSH
3083: LD_EXP 22
3087: PUSH
3088: LD_VAR 0 2
3092: ARRAY
3093: PUSH
3094: LD_INT 2
3096: ARRAY
3097: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3098: LD_ADDR_VAR 0 7
3102: PUSH
3103: LD_EXP 22
3107: PUSH
3108: LD_VAR 0 2
3112: ARRAY
3113: PUSH
3114: LD_INT 3
3116: ARRAY
3117: ST_TO_ADDR
// if is_depot then
3118: LD_EXP 4
3122: IFFALSE 3255
// begin bc_type = b_depot ;
3124: LD_ADDR_OWVAR 42
3128: PUSH
3129: LD_INT 0
3131: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3132: LD_ADDR_VAR 0 12
3136: PUSH
3137: LD_VAR 0 5
3141: PPUSH
3142: LD_VAR 0 6
3146: PPUSH
3147: LD_VAR 0 7
3151: PPUSH
3152: CALL_OW 47
3156: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3157: LD_VAR 0 12
3161: PPUSH
3162: LD_STRING @
3164: PUSH
3165: LD_VAR 0 1
3169: STR
3170: PPUSH
3171: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3175: LD_VAR 0 12
3179: PPUSH
3180: CALL_OW 274
3184: PPUSH
3185: LD_INT 1
3187: PPUSH
3188: LD_EXP 9
3192: PUSH
3193: LD_INT 1
3195: ARRAY
3196: PPUSH
3197: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3201: LD_VAR 0 12
3205: PPUSH
3206: CALL_OW 274
3210: PPUSH
3211: LD_INT 2
3213: PPUSH
3214: LD_EXP 9
3218: PUSH
3219: LD_INT 2
3221: ARRAY
3222: PPUSH
3223: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3227: LD_VAR 0 12
3231: PPUSH
3232: CALL_OW 274
3236: PPUSH
3237: LD_INT 3
3239: PPUSH
3240: LD_EXP 9
3244: PUSH
3245: LD_INT 3
3247: ARRAY
3248: PPUSH
3249: CALL_OW 277
// end else
3253: GO 3399
// begin for i := 1 to 3 do
3255: LD_ADDR_VAR 0 8
3259: PUSH
3260: DOUBLE
3261: LD_INT 1
3263: DEC
3264: ST_TO_ADDR
3265: LD_INT 3
3267: PUSH
3268: FOR_TO
3269: IFFALSE 3397
// begin r := starting_resources [ i ] ;
3271: LD_ADDR_VAR 0 9
3275: PUSH
3276: LD_EXP 9
3280: PUSH
3281: LD_VAR 0 8
3285: ARRAY
3286: ST_TO_ADDR
// while r >= 10 do
3287: LD_VAR 0 9
3291: PUSH
3292: LD_INT 10
3294: GREATEREQUAL
3295: IFFALSE 3395
// if r > 50 then
3297: LD_VAR 0 9
3301: PUSH
3302: LD_INT 50
3304: GREATER
3305: IFFALSE 3351
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3307: LD_VAR 0 8
3311: PPUSH
3312: LD_INT 5
3314: PPUSH
3315: LD_VAR 0 5
3319: PPUSH
3320: LD_VAR 0 6
3324: PPUSH
3325: LD_INT 4
3327: PPUSH
3328: LD_INT 0
3330: PPUSH
3331: CALL_OW 60
// r := r - 50 ;
3335: LD_ADDR_VAR 0 9
3339: PUSH
3340: LD_VAR 0 9
3344: PUSH
3345: LD_INT 50
3347: MINUS
3348: ST_TO_ADDR
// end else
3349: GO 3393
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3351: LD_VAR 0 8
3355: PPUSH
3356: LD_VAR 0 9
3360: PUSH
3361: LD_INT 10
3363: DIV
3364: PPUSH
3365: LD_VAR 0 5
3369: PPUSH
3370: LD_VAR 0 6
3374: PPUSH
3375: LD_INT 4
3377: PPUSH
3378: LD_INT 0
3380: PPUSH
3381: CALL_OW 60
// r := 0 ;
3385: LD_ADDR_VAR 0 9
3389: PUSH
3390: LD_INT 0
3392: ST_TO_ADDR
// end ;
3393: GO 3287
// end ;
3395: GO 3268
3397: POP
3398: POP
// end ; if def_base_size > 0 then
3399: LD_EXP 1
3403: PUSH
3404: LD_INT 0
3406: GREATER
3407: IFFALSE 3482
// begin bc_kind1 := b_lab_basic ;
3409: LD_ADDR_OWVAR 44
3413: PUSH
3414: LD_INT 9
3416: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
3417: LD_ADDR_OWVAR 45
3421: PUSH
3422: LD_INT 9
3424: ST_TO_ADDR
// bc_type := b_lab ;
3425: LD_ADDR_OWVAR 42
3429: PUSH
3430: LD_INT 6
3432: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( labs_def [ pos ] [ 1 ] , labs_def [ pos ] [ 2 ] , labs_def [ pos ] [ 3 ] ) ;
3433: LD_EXP 24
3437: PUSH
3438: LD_VAR 0 2
3442: ARRAY
3443: PUSH
3444: LD_INT 1
3446: ARRAY
3447: PPUSH
3448: LD_EXP 24
3452: PUSH
3453: LD_VAR 0 2
3457: ARRAY
3458: PUSH
3459: LD_INT 2
3461: ARRAY
3462: PPUSH
3463: LD_EXP 24
3467: PUSH
3468: LD_VAR 0 2
3472: ARRAY
3473: PUSH
3474: LD_INT 3
3476: ARRAY
3477: PPUSH
3478: CALL_OW 47
// end ; if def_base_size > 1 then
3482: LD_EXP 1
3486: PUSH
3487: LD_INT 1
3489: GREATER
3490: IFFALSE 3549
// begin bc_type := b_workshop ;
3492: LD_ADDR_OWVAR 42
3496: PUSH
3497: LD_INT 2
3499: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( factory_def [ pos ] [ 1 ] , factory_def [ pos ] [ 2 ] , factory_def [ pos ] [ 3 ] ) ;
3500: LD_EXP 25
3504: PUSH
3505: LD_VAR 0 2
3509: ARRAY
3510: PUSH
3511: LD_INT 1
3513: ARRAY
3514: PPUSH
3515: LD_EXP 25
3519: PUSH
3520: LD_VAR 0 2
3524: ARRAY
3525: PUSH
3526: LD_INT 2
3528: ARRAY
3529: PPUSH
3530: LD_EXP 25
3534: PUSH
3535: LD_VAR 0 2
3539: ARRAY
3540: PUSH
3541: LD_INT 3
3543: ARRAY
3544: PPUSH
3545: CALL_OW 47
// end ; for r in starting_crates do
3549: LD_ADDR_VAR 0 9
3553: PUSH
3554: LD_EXP 8
3558: PUSH
3559: FOR_IN
3560: IFFALSE 3592
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3562: LD_INT 1
3564: PPUSH
3565: LD_INT 5
3567: PPUSH
3568: LD_VAR 0 5
3572: PPUSH
3573: LD_VAR 0 6
3577: PPUSH
3578: LD_VAR 0 9
3582: PPUSH
3583: LD_INT 0
3585: PPUSH
3586: CALL_OW 60
3590: GO 3559
3592: POP
3593: POP
// if def_morale_flags then
3594: LD_EXP 66
3598: IFFALSE 3737
// begin x := start_def [ pos ] [ 1 ] ;
3600: LD_ADDR_VAR 0 5
3604: PUSH
3605: LD_EXP 26
3609: PUSH
3610: LD_VAR 0 2
3614: ARRAY
3615: PUSH
3616: LD_INT 1
3618: ARRAY
3619: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3620: LD_ADDR_VAR 0 6
3624: PUSH
3625: LD_EXP 26
3629: PUSH
3630: LD_VAR 0 2
3634: ARRAY
3635: PUSH
3636: LD_INT 2
3638: ARRAY
3639: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3640: LD_VAR 0 5
3644: PPUSH
3645: LD_VAR 0 6
3649: PPUSH
3650: LD_INT 12
3652: PPUSH
3653: LD_INT 2
3655: PPUSH
3656: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3660: LD_ADDR_EXP 29
3664: PUSH
3665: LD_EXP 29
3669: PUSH
3670: LD_VAR 0 1
3674: PPUSH
3675: LD_VAR 0 5
3679: PPUSH
3680: LD_VAR 0 6
3684: PPUSH
3685: LD_INT 1
3687: PUSH
3688: LD_INT 100
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: PUSH
3695: LD_INT 2
3697: PUSH
3698: LD_INT 50
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: PUSH
3705: LD_INT 3
3707: PUSH
3708: LD_INT 20
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: PUSH
3715: LD_INT 20
3717: PUSH
3718: LD_INT 100
3720: PUSH
3721: EMPTY
3722: LIST
3723: LIST
3724: PUSH
3725: EMPTY
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: PPUSH
3731: CALL_OW 418
3735: ADD
3736: ST_TO_ADDR
// end ; commander := true ;
3737: LD_ADDR_LOC 1
3741: PUSH
3742: LD_INT 1
3744: ST_TO_ADDR
// soldiers_created := 0 ;
3745: LD_ADDR_LOC 4
3749: PUSH
3750: LD_INT 0
3752: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3753: LD_ADDR_VAR 0 8
3757: PUSH
3758: DOUBLE
3759: LD_INT 1
3761: DEC
3762: ST_TO_ADDR
3763: LD_EXP 5
3767: PUSH
3768: FOR_TO
3769: IFFALSE 4011
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3771: LD_ADDR_VAR 0 5
3775: PUSH
3776: LD_EXP 23
3780: PUSH
3781: LD_VAR 0 2
3785: ARRAY
3786: PUSH
3787: LD_VAR 0 8
3791: ARRAY
3792: PUSH
3793: LD_INT 1
3795: ARRAY
3796: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3797: LD_ADDR_VAR 0 6
3801: PUSH
3802: LD_EXP 23
3806: PUSH
3807: LD_VAR 0 2
3811: ARRAY
3812: PUSH
3813: LD_VAR 0 8
3817: ARRAY
3818: PUSH
3819: LD_INT 2
3821: ARRAY
3822: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3823: LD_ADDR_VAR 0 7
3827: PUSH
3828: LD_EXP 23
3832: PUSH
3833: LD_VAR 0 2
3837: ARRAY
3838: PUSH
3839: LD_VAR 0 8
3843: ARRAY
3844: PUSH
3845: LD_INT 3
3847: ARRAY
3848: ST_TO_ADDR
// if i < 4 then
3849: LD_VAR 0 8
3853: PUSH
3854: LD_INT 4
3856: LESS
3857: IFFALSE 3869
// bc_type := b_breastwork else
3859: LD_ADDR_OWVAR 42
3863: PUSH
3864: LD_INT 31
3866: ST_TO_ADDR
3867: GO 3877
// bc_type := b_armoury ;
3869: LD_ADDR_OWVAR 42
3873: PUSH
3874: LD_INT 4
3876: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3877: LD_ADDR_VAR 0 11
3881: PUSH
3882: LD_VAR 0 5
3886: PPUSH
3887: LD_VAR 0 6
3891: PPUSH
3892: LD_VAR 0 7
3896: PPUSH
3897: CALL_OW 47
3901: ST_TO_ADDR
// x := ShiftX ( x , dir , 2 ) ;
3902: LD_ADDR_VAR 0 5
3906: PUSH
3907: LD_VAR 0 5
3911: PPUSH
3912: LD_VAR 0 7
3916: PPUSH
3917: LD_INT 2
3919: PPUSH
3920: CALL_OW 272
3924: ST_TO_ADDR
// y := ShiftY ( y , dir , 2 ) ;
3925: LD_ADDR_VAR 0 6
3929: PUSH
3930: LD_VAR 0 6
3934: PPUSH
3935: LD_VAR 0 7
3939: PPUSH
3940: LD_INT 2
3942: PPUSH
3943: CALL_OW 273
3947: ST_TO_ADDR
// sol := prepare_people ( 1 , class_soldier , x , y , 0 ) [ 1 ] ;
3948: LD_ADDR_VAR 0 10
3952: PUSH
3953: LD_INT 1
3955: PPUSH
3956: LD_INT 1
3958: PPUSH
3959: LD_VAR 0 5
3963: PPUSH
3964: LD_VAR 0 6
3968: PPUSH
3969: LD_INT 0
3971: PPUSH
3972: CALL 2493 0 5
3976: PUSH
3977: LD_INT 1
3979: ARRAY
3980: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
3981: LD_ADDR_LOC 4
3985: PUSH
3986: LD_LOC 4
3990: PUSH
3991: LD_INT 1
3993: PLUS
3994: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
3995: LD_VAR 0 10
3999: PPUSH
4000: LD_VAR 0 11
4004: PPUSH
4005: CALL_OW 120
// end ;
4009: GO 3768
4011: POP
4012: POP
// x := start_def [ pos ] [ 1 ] ;
4013: LD_ADDR_VAR 0 5
4017: PUSH
4018: LD_EXP 26
4022: PUSH
4023: LD_VAR 0 2
4027: ARRAY
4028: PUSH
4029: LD_INT 1
4031: ARRAY
4032: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4033: LD_ADDR_VAR 0 6
4037: PUSH
4038: LD_EXP 26
4042: PUSH
4043: LD_VAR 0 2
4047: ARRAY
4048: PUSH
4049: LD_INT 2
4051: ARRAY
4052: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 ) ;
4053: LD_LOC 8
4057: PUSH
4058: LD_EXP 5
4062: MINUS
4063: PPUSH
4064: LD_INT 1
4066: PPUSH
4067: LD_VAR 0 5
4071: PPUSH
4072: LD_VAR 0 6
4076: PPUSH
4077: LD_INT 5
4079: PPUSH
4080: CALL 2493 0 5
// prepare_people ( neng , class_engineer , x , y , 5 ) ;
4084: LD_LOC 5
4088: PPUSH
4089: LD_INT 2
4091: PPUSH
4092: LD_VAR 0 5
4096: PPUSH
4097: LD_VAR 0 6
4101: PPUSH
4102: LD_INT 5
4104: PPUSH
4105: CALL 2493 0 5
// prepare_people ( nmech , class_mechanic , x , y , 5 ) ;
4109: LD_LOC 7
4113: PPUSH
4114: LD_INT 3
4116: PPUSH
4117: LD_VAR 0 5
4121: PPUSH
4122: LD_VAR 0 6
4126: PPUSH
4127: LD_INT 5
4129: PPUSH
4130: CALL 2493 0 5
// prepare_people ( nsci , class_scientistic , x , y , 5 ) ;
4134: LD_LOC 6
4138: PPUSH
4139: LD_INT 4
4141: PPUSH
4142: LD_VAR 0 5
4146: PPUSH
4147: LD_VAR 0 6
4151: PPUSH
4152: LD_INT 5
4154: PPUSH
4155: CALL 2493 0 5
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4159: LD_EXP 67
4163: PUSH
4164: LD_INT 20
4166: PPUSH
4167: LD_VAR 0 1
4171: PPUSH
4172: CALL_OW 321
4176: PUSH
4177: LD_INT 1
4179: EQUAL
4180: AND
4181: IFFALSE 4198
// SetTech ( tech_SibDet , side , state_researched ) ;
4183: LD_INT 20
4185: PPUSH
4186: LD_VAR 0 1
4190: PPUSH
4191: LD_INT 2
4193: PPUSH
4194: CALL_OW 322
// if def_siberite_bomb = 1 then
4198: LD_EXP 70
4202: PUSH
4203: LD_INT 1
4205: EQUAL
4206: IFFALSE 4240
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4208: LD_INT 25
4210: PPUSH
4211: LD_VAR 0 1
4215: PPUSH
4216: LD_INT 1
4218: PPUSH
4219: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4223: LD_INT 73
4225: PPUSH
4226: LD_VAR 0 1
4230: PPUSH
4231: LD_INT 1
4233: PPUSH
4234: CALL_OW 322
// end else
4238: GO 4270
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4240: LD_INT 25
4242: PPUSH
4243: LD_VAR 0 1
4247: PPUSH
4248: LD_INT 0
4250: PPUSH
4251: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4255: LD_INT 73
4257: PPUSH
4258: LD_VAR 0 1
4262: PPUSH
4263: LD_INT 0
4265: PPUSH
4266: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4270: LD_INT 24
4272: PPUSH
4273: LD_VAR 0 1
4277: PPUSH
4278: LD_INT 0
4280: PPUSH
4281: CALL_OW 322
// global_defined := true ;
4285: LD_ADDR_LOC 3
4289: PUSH
4290: LD_INT 1
4292: ST_TO_ADDR
// end ;
4293: LD_VAR 0 4
4297: RET
// every 0 0$1 do
4298: GO 4300
4300: DISABLE
// if ( def_siberite_bomb > 1 ) then
4301: LD_EXP 70
4305: PUSH
4306: LD_INT 1
4308: GREATER
4309: IFFALSE 4324
// begin wait ( siberite_bomb_Delay ) ;
4311: LD_EXP 15
4315: PPUSH
4316: CALL_OW 67
// EnableSibFiss ;
4320: CALL 4325 0 0
// end ;
4324: END
// function EnableSibFiss ; var i ; begin
4325: LD_INT 0
4327: PPUSH
4328: PPUSH
// for i := 1 to 8 do
4329: LD_ADDR_VAR 0 2
4333: PUSH
4334: DOUBLE
4335: LD_INT 1
4337: DEC
4338: ST_TO_ADDR
4339: LD_INT 8
4341: PUSH
4342: FOR_TO
4343: IFFALSE 4389
// if Side_Positions [ i ] then
4345: LD_EXP 18
4349: PUSH
4350: LD_VAR 0 2
4354: ARRAY
4355: IFFALSE 4387
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4357: LD_INT 25
4359: PPUSH
4360: LD_VAR 0 2
4364: PPUSH
4365: LD_INT 1
4367: PPUSH
4368: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4372: LD_INT 73
4374: PPUSH
4375: LD_VAR 0 2
4379: PPUSH
4380: LD_INT 1
4382: PPUSH
4383: CALL_OW 322
// end ;
4387: GO 4342
4389: POP
4390: POP
// end ;
4391: LD_VAR 0 1
4395: RET
// function prepare_sides ; var i , orig , pos ; begin
4396: LD_INT 0
4398: PPUSH
4399: PPUSH
4400: PPUSH
4401: PPUSH
// global_units := [ ] ;
4402: LD_ADDR_LOC 2
4406: PUSH
4407: EMPTY
4408: ST_TO_ADDR
// global_defined := false ;
4409: LD_ADDR_LOC 3
4413: PUSH
4414: LD_INT 0
4416: ST_TO_ADDR
// CountClassMembers ;
4417: CALL 4936 0 0
// for i := 1 to 8 do
4421: LD_ADDR_VAR 0 2
4425: PUSH
4426: DOUBLE
4427: LD_INT 1
4429: DEC
4430: ST_TO_ADDR
4431: LD_INT 8
4433: PUSH
4434: FOR_TO
4435: IFFALSE 4635
// if Side_Positions [ i ] then
4437: LD_EXP 18
4441: PUSH
4442: LD_VAR 0 2
4446: ARRAY
4447: IFFALSE 4633
// begin pos := Side_Positions [ i ] ;
4449: LD_ADDR_VAR 0 4
4453: PUSH
4454: LD_EXP 18
4458: PUSH
4459: LD_VAR 0 2
4463: ARRAY
4464: ST_TO_ADDR
// if Game_Type in [ 2 , 12 ] then
4465: LD_EXP 56
4469: PUSH
4470: LD_INT 2
4472: PUSH
4473: LD_INT 12
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: IN
4480: IFFALSE 4608
// begin if Game_Type = 12 then
4482: LD_EXP 56
4486: PUSH
4487: LD_INT 12
4489: EQUAL
4490: IFFALSE 4552
// begin prepare_side ( i , pos , Position_Nations [ pos ] ) ;
4492: LD_VAR 0 2
4496: PPUSH
4497: LD_VAR 0 4
4501: PPUSH
4502: LD_EXP 21
4506: PUSH
4507: LD_VAR 0 4
4511: ARRAY
4512: PPUSH
4513: CALL 3008 0 3
// prepare_side ( i , pos + 1 , Position_Nations [ pos + 1 ] ) end else
4517: LD_VAR 0 2
4521: PPUSH
4522: LD_VAR 0 4
4526: PUSH
4527: LD_INT 1
4529: PLUS
4530: PPUSH
4531: LD_EXP 21
4535: PUSH
4536: LD_VAR 0 4
4540: PUSH
4541: LD_INT 1
4543: PLUS
4544: ARRAY
4545: PPUSH
4546: CALL 3008 0 3
4550: GO 4606
// begin prepare_side ( i , pos , Side_Nations [ i ] ) ;
4552: LD_VAR 0 2
4556: PPUSH
4557: LD_VAR 0 4
4561: PPUSH
4562: LD_EXP 19
4566: PUSH
4567: LD_VAR 0 2
4571: ARRAY
4572: PPUSH
4573: CALL 3008 0 3
// prepare_side ( i , pos + 1 , Side_Nations [ i ] ) ;
4577: LD_VAR 0 2
4581: PPUSH
4582: LD_VAR 0 4
4586: PUSH
4587: LD_INT 1
4589: PLUS
4590: PPUSH
4591: LD_EXP 19
4595: PUSH
4596: LD_VAR 0 2
4600: ARRAY
4601: PPUSH
4602: CALL 3008 0 3
// end ; end else
4606: GO 4633
// prepare_side ( i , pos , Side_Nations [ i ] ) ;
4608: LD_VAR 0 2
4612: PPUSH
4613: LD_VAR 0 4
4617: PPUSH
4618: LD_EXP 19
4622: PUSH
4623: LD_VAR 0 2
4627: ARRAY
4628: PPUSH
4629: CALL 3008 0 3
// end ;
4633: GO 4434
4635: POP
4636: POP
// end ;
4637: LD_VAR 0 1
4641: RET
// function Modify_Nations ; var list , west , east , i ; begin
4642: LD_INT 0
4644: PPUSH
4645: PPUSH
4646: PPUSH
4647: PPUSH
4648: PPUSH
// list := [ ] ;
4649: LD_ADDR_VAR 0 2
4653: PUSH
4654: EMPTY
4655: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
4656: LD_ADDR_VAR 0 5
4660: PUSH
4661: DOUBLE
4662: LD_INT 1
4664: DEC
4665: ST_TO_ADDR
4666: LD_EXP 18
4670: PUSH
4671: LD_INT 0
4673: PLUS
4674: PUSH
4675: FOR_TO
4676: IFFALSE 4894
// if side_positions [ i ] = 1 then
4678: LD_EXP 18
4682: PUSH
4683: LD_VAR 0 5
4687: ARRAY
4688: PUSH
4689: LD_INT 1
4691: EQUAL
4692: IFFALSE 4786
// case side_nations [ i ] of 1 :
4694: LD_EXP 19
4698: PUSH
4699: LD_VAR 0 5
4703: ARRAY
4704: PUSH
4705: LD_INT 1
4707: DOUBLE
4708: EQUAL
4709: IFTRUE 4713
4711: GO 4731
4713: POP
// west := [ 1 , 2 ] ; 2 :
4714: LD_ADDR_VAR 0 3
4718: PUSH
4719: LD_INT 1
4721: PUSH
4722: LD_INT 2
4724: PUSH
4725: EMPTY
4726: LIST
4727: LIST
4728: ST_TO_ADDR
4729: GO 4784
4731: LD_INT 2
4733: DOUBLE
4734: EQUAL
4735: IFTRUE 4739
4737: GO 4757
4739: POP
// west := [ 2 , 3 ] ; 3 :
4740: LD_ADDR_VAR 0 3
4744: PUSH
4745: LD_INT 2
4747: PUSH
4748: LD_INT 3
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: ST_TO_ADDR
4755: GO 4784
4757: LD_INT 3
4759: DOUBLE
4760: EQUAL
4761: IFTRUE 4765
4763: GO 4783
4765: POP
// west := [ 3 , 1 ] ; end else
4766: LD_ADDR_VAR 0 3
4770: PUSH
4771: LD_INT 3
4773: PUSH
4774: LD_INT 1
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: ST_TO_ADDR
4781: GO 4784
4783: POP
4784: GO 4892
// if side_positions [ i ] = 3 then
4786: LD_EXP 18
4790: PUSH
4791: LD_VAR 0 5
4795: ARRAY
4796: PUSH
4797: LD_INT 3
4799: EQUAL
4800: IFFALSE 4892
// case side_nations [ i ] of 1 :
4802: LD_EXP 19
4806: PUSH
4807: LD_VAR 0 5
4811: ARRAY
4812: PUSH
4813: LD_INT 1
4815: DOUBLE
4816: EQUAL
4817: IFTRUE 4821
4819: GO 4839
4821: POP
// east := [ 1 , 2 ] ; 2 :
4822: LD_ADDR_VAR 0 4
4826: PUSH
4827: LD_INT 1
4829: PUSH
4830: LD_INT 2
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: ST_TO_ADDR
4837: GO 4892
4839: LD_INT 2
4841: DOUBLE
4842: EQUAL
4843: IFTRUE 4847
4845: GO 4865
4847: POP
// east := [ 2 , 3 ] ; 3 :
4848: LD_ADDR_VAR 0 4
4852: PUSH
4853: LD_INT 2
4855: PUSH
4856: LD_INT 3
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: ST_TO_ADDR
4863: GO 4892
4865: LD_INT 3
4867: DOUBLE
4868: EQUAL
4869: IFTRUE 4873
4871: GO 4891
4873: POP
// east := [ 3 , 1 ] ; end ;
4874: LD_ADDR_VAR 0 4
4878: PUSH
4879: LD_INT 3
4881: PUSH
4882: LD_INT 1
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: ST_TO_ADDR
4889: GO 4892
4891: POP
4892: GO 4675
4894: POP
4895: POP
// Position_Nations := west ^ east ^ [ 0 , 0 , 0 , 0 ] ;
4896: LD_ADDR_EXP 21
4900: PUSH
4901: LD_VAR 0 3
4905: PUSH
4906: LD_VAR 0 4
4910: ADD
4911: PUSH
4912: LD_INT 0
4914: PUSH
4915: LD_INT 0
4917: PUSH
4918: LD_INT 0
4920: PUSH
4921: LD_INT 0
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: ADD
4930: ST_TO_ADDR
// end ;
4931: LD_VAR 0 1
4935: RET
// function CountClassMembers ; var Mode ; begin
4936: LD_INT 0
4938: PPUSH
4939: PPUSH
// if No_Mechs then
4940: LD_EXP 72
4944: IFFALSE 4956
// Mode := 2 else
4946: LD_ADDR_VAR 0 2
4950: PUSH
4951: LD_INT 2
4953: ST_TO_ADDR
4954: GO 4964
// Mode := 1 ;
4956: LD_ADDR_VAR 0 2
4960: PUSH
4961: LD_INT 1
4963: ST_TO_ADDR
// neng := number_of_people ;
4964: LD_ADDR_LOC 5
4968: PUSH
4969: LD_EXP 6
4973: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4974: LD_ADDR_LOC 8
4978: PUSH
4979: LD_LOC 5
4983: PUSH
4984: LD_INT 4
4986: PUSH
4987: LD_INT 3
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: PUSH
4994: LD_VAR 0 2
4998: ARRAY
4999: DIV
5000: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
5001: LD_LOC 8
5005: PUSH
5006: LD_EXP 5
5010: LESS
5011: IFFALSE 5023
// nsol := number_of_breastworks ;
5013: LD_ADDR_LOC 8
5017: PUSH
5018: LD_EXP 5
5022: ST_TO_ADDR
// neng := neng - nsol ;
5023: LD_ADDR_LOC 5
5027: PUSH
5028: LD_LOC 5
5032: PUSH
5033: LD_LOC 8
5037: MINUS
5038: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
5039: LD_ADDR_LOC 6
5043: PUSH
5044: LD_LOC 5
5048: PUSH
5049: LD_INT 3
5051: PUSH
5052: LD_INT 2
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PUSH
5059: LD_VAR 0 2
5063: ARRAY
5064: DIV
5065: ST_TO_ADDR
// if ( nsci < 1 ) then
5066: LD_LOC 6
5070: PUSH
5071: LD_INT 1
5073: LESS
5074: IFFALSE 5084
// nsci := 1 ;
5076: LD_ADDR_LOC 6
5080: PUSH
5081: LD_INT 1
5083: ST_TO_ADDR
// neng := neng - nsci ;
5084: LD_ADDR_LOC 5
5088: PUSH
5089: LD_LOC 5
5093: PUSH
5094: LD_LOC 6
5098: MINUS
5099: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5100: LD_ADDR_LOC 7
5104: PUSH
5105: LD_LOC 5
5109: PUSH
5110: LD_INT 2
5112: DIV
5113: PUSH
5114: LD_INT 0
5116: PUSH
5117: EMPTY
5118: LIST
5119: LIST
5120: PUSH
5121: LD_VAR 0 2
5125: ARRAY
5126: ST_TO_ADDR
// neng := neng - nmech ;
5127: LD_ADDR_LOC 5
5131: PUSH
5132: LD_LOC 5
5136: PUSH
5137: LD_LOC 7
5141: MINUS
5142: ST_TO_ADDR
// if ( neng < 1 ) then
5143: LD_LOC 5
5147: PUSH
5148: LD_INT 1
5150: LESS
5151: IFFALSE 5161
// neng := 1 ;
5153: LD_ADDR_LOC 5
5157: PUSH
5158: LD_INT 1
5160: ST_TO_ADDR
// end ;
5161: LD_VAR 0 1
5165: RET
// function Init_Win_Condition ; begin
5166: LD_INT 0
5168: PPUSH
// disable ( 98 ) ;
5169: LD_INT 98
5171: DISABLE_MARKED
// disable ( 99 ) ;
5172: LD_INT 99
5174: DISABLE_MARKED
// if Team_Game then
5175: LD_EXP 20
5179: IFFALSE 5186
// enable ( 98 ) else
5181: LD_INT 98
5183: ENABLE_MARKED
5184: GO 5189
// enable ( 99 ) ;
5186: LD_INT 99
5188: ENABLE_MARKED
// end ;
5189: LD_VAR 0 1
5193: RET
// starting begin DE_Triggers ;
5194: CALL 8672 0 0
// mp_selectmsg := true ;
5198: LD_ADDR_OWVAR 13
5202: PUSH
5203: LD_INT 1
5205: ST_TO_ADDR
// if ( game_type <> 1 ) and ( game_type <> 3 ) then
5206: LD_EXP 56
5210: PUSH
5211: LD_INT 1
5213: NONEQUAL
5214: PUSH
5215: LD_EXP 56
5219: PUSH
5220: LD_INT 3
5222: NONEQUAL
5223: AND
5224: IFFALSE 5230
// read_multiplayer_and_game_parameters ;
5226: CALL 976 0 0
// case Game_Type of 1 , 3 :
5230: LD_EXP 56
5234: PUSH
5235: LD_INT 1
5237: DOUBLE
5238: EQUAL
5239: IFTRUE 5249
5241: LD_INT 3
5243: DOUBLE
5244: EQUAL
5245: IFTRUE 5249
5247: GO 5261
5249: POP
// begin enable ( 19 ) ;
5250: LD_INT 19
5252: ENABLE_MARKED
// starting_ctf ;
5253: CALL 9311 0 0
// exit ;
5257: GO 5429
// end ; 12 :
5259: GO 5277
5261: LD_INT 12
5263: DOUBLE
5264: EQUAL
5265: IFTRUE 5269
5267: GO 5276
5269: POP
// Modify_Nations ; end ;
5270: CALL 4642 0 0
5274: GO 5277
5276: POP
// enable ( 55 ) ;
5277: LD_INT 55
5279: ENABLE_MARKED
// AnimateTrees ( true ) ;
5280: LD_INT 1
5282: PPUSH
5283: CALL_OW 573
// init_map ;
5287: CALL 276 0 0
// set_shared_visions_and_alliances ;
5291: CALL 2184 0 0
// prepare_sides ;
5295: CALL 4396 0 0
// InitLimits ;
5299: CALL 18065 0 0
// ShowTimer ;
5303: CALL 19002 0 0
// init_shipments ;
5307: CALL 5430 0 0
// init_respawn ;
5311: CALL 5934 0 0
// InitApeman ;
5315: CALL 7469 0 0
// music_nat := Side_Nations [ your_side ] ;
5319: LD_ADDR_OWVAR 71
5323: PUSH
5324: LD_EXP 19
5328: PUSH
5329: LD_OWVAR 2
5333: ARRAY
5334: ST_TO_ADDR
// if IAmSpec then
5335: CALL_OW 531
5339: IFFALSE 5375
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
5341: LD_INT 0
5343: PPUSH
5344: LD_INT 0
5346: PPUSH
5347: LD_OWVAR 2
5351: PPUSH
5352: LD_INT 32767
5354: NEG
5355: PPUSH
5356: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
5360: LD_INT 104
5362: PPUSH
5363: LD_INT 69
5365: PPUSH
5366: CALL_OW 86
// enable ( 400 ) ;
5370: LD_INT 400
5372: ENABLE_MARKED
// end else
5373: GO 5429
// begin ResetFog ;
5375: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5379: LD_EXP 26
5383: PUSH
5384: LD_EXP 18
5388: PUSH
5389: LD_OWVAR 2
5393: ARRAY
5394: ARRAY
5395: PUSH
5396: LD_INT 1
5398: ARRAY
5399: PPUSH
5400: LD_EXP 26
5404: PUSH
5405: LD_EXP 18
5409: PUSH
5410: LD_OWVAR 2
5414: ARRAY
5415: ARRAY
5416: PUSH
5417: LD_INT 2
5419: ARRAY
5420: PPUSH
5421: CALL_OW 86
// Init_Win_Condition ;
5425: CALL 5166 0 0
// end ; end ; end_of_file
5429: END
// var shipment , tictac ; export function init_shipments ; begin
5430: LD_INT 0
5432: PPUSH
// shipment := Rand ( 0 , 1 ) ;
5433: LD_ADDR_LOC 9
5437: PUSH
5438: LD_INT 0
5440: PPUSH
5441: LD_INT 1
5443: PPUSH
5444: CALL_OW 12
5448: ST_TO_ADDR
// tictac := 0 ;
5449: LD_ADDR_LOC 10
5453: PUSH
5454: LD_INT 0
5456: ST_TO_ADDR
// end ;
5457: LD_VAR 0 1
5461: RET
// every 0 0$5 + 0 0$1.1 marked 55 do var d ;
5462: GO 5464
5464: DISABLE
5465: LD_INT 0
5467: PPUSH
// begin case tick of 1 .. 1 1$0 :
5468: LD_OWVAR 1
5472: PUSH
5473: LD_INT 1
5475: DOUBLE
5476: GREATEREQUAL
5477: IFFALSE 5485
5479: LD_INT 2100
5481: DOUBLE
5482: LESSEQUAL
5483: IFTRUE 5487
5485: GO 5498
5487: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5488: LD_ADDR_VAR 0 1
5492: PUSH
5493: LD_INT 150
5495: ST_TO_ADDR
5496: GO 5681
5498: LD_INT 2100
5500: PUSH
5501: LD_INT 1
5503: PLUS
5504: DOUBLE
5505: GREATEREQUAL
5506: IFFALSE 5514
5508: LD_INT 10500
5510: DOUBLE
5511: LESSEQUAL
5512: IFTRUE 5516
5514: GO 5527
5516: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5517: LD_ADDR_VAR 0 1
5521: PUSH
5522: LD_INT 100
5524: ST_TO_ADDR
5525: GO 5681
5527: LD_INT 10500
5529: PUSH
5530: LD_INT 1
5532: PLUS
5533: DOUBLE
5534: GREATEREQUAL
5535: IFFALSE 5543
5537: LD_INT 21000
5539: DOUBLE
5540: LESSEQUAL
5541: IFTRUE 5545
5543: GO 5556
5545: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5546: LD_ADDR_VAR 0 1
5550: PUSH
5551: LD_INT 90
5553: ST_TO_ADDR
5554: GO 5681
5556: LD_INT 21000
5558: PUSH
5559: LD_INT 1
5561: PLUS
5562: DOUBLE
5563: GREATEREQUAL
5564: IFFALSE 5572
5566: LD_INT 42000
5568: DOUBLE
5569: LESSEQUAL
5570: IFTRUE 5574
5572: GO 5585
5574: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5575: LD_ADDR_VAR 0 1
5579: PUSH
5580: LD_INT 70
5582: ST_TO_ADDR
5583: GO 5681
5585: LD_INT 42000
5587: PUSH
5588: LD_INT 1
5590: PLUS
5591: DOUBLE
5592: GREATEREQUAL
5593: IFFALSE 5601
5595: LD_INT 63000
5597: DOUBLE
5598: LESSEQUAL
5599: IFTRUE 5603
5601: GO 5614
5603: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5604: LD_ADDR_VAR 0 1
5608: PUSH
5609: LD_INT 60
5611: ST_TO_ADDR
5612: GO 5681
5614: LD_INT 63000
5616: PUSH
5617: LD_INT 1
5619: PLUS
5620: DOUBLE
5621: GREATEREQUAL
5622: IFFALSE 5630
5624: LD_INT 105000
5626: DOUBLE
5627: LESSEQUAL
5628: IFTRUE 5632
5630: GO 5643
5632: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5633: LD_ADDR_VAR 0 1
5637: PUSH
5638: LD_INT 35
5640: ST_TO_ADDR
5641: GO 5681
5643: LD_INT 105000
5645: PUSH
5646: LD_INT 1
5648: PLUS
5649: DOUBLE
5650: GREATEREQUAL
5651: IFFALSE 5659
5653: LD_INT 630000
5655: DOUBLE
5656: LESSEQUAL
5657: IFTRUE 5661
5659: GO 5672
5661: POP
// d := 20 ; else
5662: LD_ADDR_VAR 0 1
5666: PUSH
5667: LD_INT 20
5669: ST_TO_ADDR
5670: GO 5681
5672: POP
// d := 0 ; end ;
5673: LD_ADDR_VAR 0 1
5677: PUSH
5678: LD_INT 0
5680: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5681: LD_INT 1
5683: PPUSH
5684: LD_INT 10000
5686: PPUSH
5687: CALL_OW 12
5691: PUSH
5692: LD_VAR 0 1
5696: PUSH
5697: LD_EXP 10
5701: MUL
5702: LESSEQUAL
5703: IFFALSE 5757
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5705: LD_INT 1
5707: PPUSH
5708: LD_INT 140
5710: PPUSH
5711: CALL_OW 12
5715: PPUSH
5716: CALL_OW 67
// shipment := ( shipment + 1 ) mod 2 ;
5720: LD_ADDR_LOC 9
5724: PUSH
5725: LD_LOC 9
5729: PUSH
5730: LD_INT 1
5732: PLUS
5733: PUSH
5734: LD_INT 2
5736: MOD
5737: ST_TO_ADDR
// CreateCratesArea ( 5 , west_side + shipment , true ) ;
5738: LD_INT 5
5740: PPUSH
5741: LD_INT 8
5743: PUSH
5744: LD_LOC 9
5748: PLUS
5749: PPUSH
5750: LD_INT 1
5752: PPUSH
5753: CALL_OW 55
// end ; enable ;
5757: ENABLE
// end ;
5758: PPOPN 1
5760: END
// every 0 0$10 trigger TICK > ( ( 2 2$0 * tictac ) + tictac * ( 1 1$30 - shipments_density * ( 0 0$2 ) ) ) marked 55 do var i , amount , is_in ;
5761: LD_OWVAR 1
5765: PUSH
5766: LD_INT 4200
5768: PUSH
5769: LD_LOC 10
5773: MUL
5774: PUSH
5775: LD_LOC 10
5779: PUSH
5780: LD_INT 3150
5782: PUSH
5783: LD_EXP 10
5787: PUSH
5788: LD_INT 70
5790: MUL
5791: MINUS
5792: MUL
5793: PLUS
5794: GREATER
5795: IFFALSE 5931
5797: GO 5799
5799: DISABLE
5800: LD_INT 0
5802: PPUSH
5803: PPUSH
5804: PPUSH
// begin tictac := tictac + 1 ;
5805: LD_ADDR_LOC 10
5809: PUSH
5810: LD_LOC 10
5814: PUSH
5815: LD_INT 1
5817: PLUS
5818: ST_TO_ADDR
// amount := Rand ( 3 , 5 ) ;
5819: LD_ADDR_VAR 0 2
5823: PUSH
5824: LD_INT 3
5826: PPUSH
5827: LD_INT 5
5829: PPUSH
5830: CALL_OW 12
5834: ST_TO_ADDR
// for i = 0 to 3 do
5835: LD_ADDR_VAR 0 1
5839: PUSH
5840: DOUBLE
5841: LD_INT 0
5843: DEC
5844: ST_TO_ADDR
5845: LD_INT 3
5847: PUSH
5848: FOR_TO
5849: IFFALSE 5928
// begin is_in := GetResourceArea ( west_side + i , mat_cans ) ;
5851: LD_ADDR_VAR 0 3
5855: PUSH
5856: LD_INT 8
5858: PUSH
5859: LD_VAR 0 1
5863: PLUS
5864: PPUSH
5865: LD_INT 1
5867: PPUSH
5868: CALL_OW 287
5872: ST_TO_ADDR
// if ( is_in < 500 ) or ( Rand ( 1 , 10 ) > ( is_in div 100 ) ) then
5873: LD_VAR 0 3
5877: PUSH
5878: LD_INT 500
5880: LESS
5881: PUSH
5882: LD_INT 1
5884: PPUSH
5885: LD_INT 10
5887: PPUSH
5888: CALL_OW 12
5892: PUSH
5893: LD_VAR 0 3
5897: PUSH
5898: LD_INT 100
5900: DIV
5901: GREATER
5902: OR
5903: IFFALSE 5926
// CreateCratesArea ( amount , nw + i , true ) ;
5905: LD_VAR 0 2
5909: PPUSH
5910: LD_INT 12
5912: PUSH
5913: LD_VAR 0 1
5917: PLUS
5918: PPUSH
5919: LD_INT 1
5921: PPUSH
5922: CALL_OW 55
// end ;
5926: GO 5848
5928: POP
5929: POP
// enable ;
5930: ENABLE
// end ; end_of_file
5931: PPOPN 3
5933: END
// var respawn_queue , nation_queue ; export function init_respawn ; begin
5934: LD_INT 0
5936: PPUSH
// if not def_people_respawning then
5937: LD_EXP 68
5941: NOT
5942: IFFALSE 5946
// exit ;
5944: GO 6049
// respawn_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5946: LD_ADDR_LOC 11
5950: PUSH
5951: LD_INT 0
5953: PUSH
5954: LD_INT 0
5956: PUSH
5957: LD_INT 0
5959: PUSH
5960: LD_INT 0
5962: PUSH
5963: LD_INT 0
5965: PUSH
5966: LD_INT 0
5968: PUSH
5969: LD_INT 0
5971: PUSH
5972: LD_INT 0
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: ST_TO_ADDR
// nation_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5985: LD_ADDR_LOC 12
5989: PUSH
5990: LD_INT 0
5992: PUSH
5993: LD_INT 0
5995: PUSH
5996: LD_INT 0
5998: PUSH
5999: LD_INT 0
6001: PUSH
6002: LD_INT 0
6004: PUSH
6005: LD_INT 0
6007: PUSH
6008: LD_INT 0
6010: PUSH
6011: LD_INT 0
6013: PUSH
6014: EMPTY
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: ST_TO_ADDR
// if Game_Type in [ 2 , 12 ] then
6024: LD_EXP 56
6028: PUSH
6029: LD_INT 2
6031: PUSH
6032: LD_INT 12
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: IN
6039: IFFALSE 6046
// enable ( 41 ) else
6041: LD_INT 41
6043: ENABLE_MARKED
6044: GO 6049
// enable ( 40 ) ;
6046: LD_INT 40
6048: ENABLE_MARKED
// end ;
6049: LD_VAR 0 1
6053: RET
// every 0 0$10 marked 40 do var list , time , side ;
6054: GO 6056
6056: DISABLE
6057: LD_INT 0
6059: PPUSH
6060: PPUSH
6061: PPUSH
// begin for side = 1 to Side_Positions do
6062: LD_ADDR_VAR 0 3
6066: PUSH
6067: DOUBLE
6068: LD_INT 1
6070: DEC
6071: ST_TO_ADDR
6072: LD_EXP 18
6076: PUSH
6077: FOR_TO
6078: IFFALSE 6255
// if Side_Positions [ side ] then
6080: LD_EXP 18
6084: PUSH
6085: LD_VAR 0 3
6089: ARRAY
6090: IFFALSE 6253
// begin list := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6092: LD_ADDR_VAR 0 1
6096: PUSH
6097: LD_INT 22
6099: PUSH
6100: LD_VAR 0 3
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: PUSH
6109: LD_INT 21
6111: PUSH
6112: LD_INT 1
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: PUSH
6119: LD_INT 3
6121: PUSH
6122: LD_INT 23
6124: PUSH
6125: LD_INT 0
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: PUSH
6132: EMPTY
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: PPUSH
6138: CALL_OW 69
6142: ST_TO_ADDR
// if ( list < number_of_people ) and ( not respawn_queue [ side ] ) then
6143: LD_VAR 0 1
6147: PUSH
6148: LD_EXP 6
6152: LESS
6153: PUSH
6154: LD_LOC 11
6158: PUSH
6159: LD_VAR 0 3
6163: ARRAY
6164: NOT
6165: AND
6166: IFFALSE 6193
// respawn_queue := Replace ( respawn_queue , side , TICK ) ;
6168: LD_ADDR_LOC 11
6172: PUSH
6173: LD_LOC 11
6177: PPUSH
6178: LD_VAR 0 3
6182: PPUSH
6183: LD_OWVAR 1
6187: PPUSH
6188: CALL_OW 1
6192: ST_TO_ADDR
// time := TICK - respawn_queue [ side ] ;
6193: LD_ADDR_VAR 0 2
6197: PUSH
6198: LD_OWVAR 1
6202: PUSH
6203: LD_LOC 11
6207: PUSH
6208: LD_VAR 0 3
6212: ARRAY
6213: MINUS
6214: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6215: LD_LOC 11
6219: PUSH
6220: LD_VAR 0 3
6224: ARRAY
6225: PUSH
6226: LD_VAR 0 2
6230: PUSH
6231: LD_EXP 13
6235: GREATER
6236: AND
6237: IFFALSE 6253
// respawn_character ( side , time ) ;
6239: LD_VAR 0 3
6243: PPUSH
6244: LD_VAR 0 2
6248: PPUSH
6249: CALL 6261 0 2
// end ;
6253: GO 6077
6255: POP
6256: POP
// enable ;
6257: ENABLE
// end ;
6258: PPOPN 3
6260: END
// function respawn_character ( side , time ) ; var dep ; begin
6261: LD_INT 0
6263: PPUSH
6264: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6265: LD_INT 0
6267: PPUSH
6268: LD_INT 1
6270: PPUSH
6271: CALL_OW 12
6275: PUSH
6276: LD_VAR 0 2
6280: PUSH
6281: LD_EXP 14
6285: LESS
6286: AND
6287: IFFALSE 6291
// exit ;
6289: GO 6498
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6291: LD_ADDR_VAR 0 4
6295: PUSH
6296: LD_INT 22
6298: PUSH
6299: LD_VAR 0 1
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: PUSH
6308: LD_INT 2
6310: PUSH
6311: LD_INT 30
6313: PUSH
6314: LD_INT 0
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: PUSH
6321: LD_INT 30
6323: PUSH
6324: LD_INT 1
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: LIST
6335: PUSH
6336: LD_INT 50
6338: PUSH
6339: EMPTY
6340: LIST
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: LIST
6346: PPUSH
6347: CALL_OW 69
6351: ST_TO_ADDR
// if not dep then
6352: LD_VAR 0 4
6356: NOT
6357: IFFALSE 6363
// exit else
6359: GO 6498
6361: GO 6387
// dep := dep [ Rand ( 1 , dep ) ] ;
6363: LD_ADDR_VAR 0 4
6367: PUSH
6368: LD_VAR 0 4
6372: PUSH
6373: LD_INT 1
6375: PPUSH
6376: LD_VAR 0 4
6380: PPUSH
6381: CALL_OW 12
6385: ARRAY
6386: ST_TO_ADDR
// uc_side := side ;
6387: LD_ADDR_OWVAR 20
6391: PUSH
6392: LD_VAR 0 1
6396: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6397: LD_ADDR_OWVAR 21
6401: PUSH
6402: LD_EXP 19
6406: PUSH
6407: LD_VAR 0 1
6411: ARRAY
6412: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6413: LD_INT 0
6415: PPUSH
6416: LD_INT 0
6418: PPUSH
6419: LD_EXP 7
6423: PUSH
6424: LD_INT 2
6426: DIV
6427: PPUSH
6428: CALL_OW 380
// hc_importance := 0 ;
6432: LD_ADDR_OWVAR 32
6436: PUSH
6437: LD_INT 0
6439: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
6440: CALL_OW 44
6444: PPUSH
6445: LD_VAR 0 4
6449: PPUSH
6450: CALL_OW 250
6454: PPUSH
6455: LD_VAR 0 4
6459: PPUSH
6460: CALL_OW 251
6464: PPUSH
6465: LD_INT 10
6467: PPUSH
6468: LD_INT 1
6470: PPUSH
6471: CALL_OW 50
// respawn_queue := Replace ( respawn_queue , side , 0 ) ;
6475: LD_ADDR_LOC 11
6479: PUSH
6480: LD_LOC 11
6484: PPUSH
6485: LD_VAR 0 1
6489: PPUSH
6490: LD_INT 0
6492: PPUSH
6493: CALL_OW 1
6497: ST_TO_ADDR
// end ;
6498: LD_VAR 0 3
6502: RET
// every 0 0$10 marked 41 do var i , list , time , nation , side , limit ;
6503: GO 6505
6505: DISABLE
6506: LD_INT 0
6508: PPUSH
6509: PPUSH
6510: PPUSH
6511: PPUSH
6512: PPUSH
6513: PPUSH
// begin if Game_Type = 12 then
6514: LD_EXP 56
6518: PUSH
6519: LD_INT 12
6521: EQUAL
6522: IFFALSE 6536
// limit := number_of_people else
6524: LD_ADDR_VAR 0 6
6528: PUSH
6529: LD_EXP 6
6533: ST_TO_ADDR
6534: GO 6550
// limit := 2 * number_of_people ;
6536: LD_ADDR_VAR 0 6
6540: PUSH
6541: LD_INT 2
6543: PUSH
6544: LD_EXP 6
6548: MUL
6549: ST_TO_ADDR
// for i = 1 to 4 do
6550: LD_ADDR_VAR 0 1
6554: PUSH
6555: DOUBLE
6556: LD_INT 1
6558: DEC
6559: ST_TO_ADDR
6560: LD_INT 4
6562: PUSH
6563: FOR_TO
6564: IFFALSE 6856
// begin side := GetSidePositions ( [ 1 , 1 , 3 , 3 ] [ i ] ) ;
6566: LD_ADDR_VAR 0 5
6570: PUSH
6571: LD_INT 1
6573: PUSH
6574: LD_INT 1
6576: PUSH
6577: LD_INT 3
6579: PUSH
6580: LD_INT 3
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: PUSH
6589: LD_VAR 0 1
6593: ARRAY
6594: PPUSH
6595: CALL 7198 0 1
6599: ST_TO_ADDR
// if Game_Type = 12 then
6600: LD_EXP 56
6604: PUSH
6605: LD_INT 12
6607: EQUAL
6608: IFFALSE 6628
// nation := Position_Nations [ i ] else
6610: LD_ADDR_VAR 0 4
6614: PUSH
6615: LD_EXP 21
6619: PUSH
6620: LD_VAR 0 1
6624: ARRAY
6625: ST_TO_ADDR
6626: GO 6644
// nation := Side_Nations [ side ] ;
6628: LD_ADDR_VAR 0 4
6632: PUSH
6633: LD_EXP 19
6637: PUSH
6638: LD_VAR 0 5
6642: ARRAY
6643: ST_TO_ADDR
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_nation , nation ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6644: LD_ADDR_VAR 0 2
6648: PUSH
6649: LD_INT 22
6651: PUSH
6652: LD_VAR 0 5
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: PUSH
6661: LD_INT 23
6663: PUSH
6664: LD_VAR 0 4
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PUSH
6673: LD_INT 21
6675: PUSH
6676: LD_INT 1
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: PUSH
6683: LD_INT 3
6685: PUSH
6686: LD_INT 23
6688: PUSH
6689: LD_INT 0
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: PPUSH
6703: CALL_OW 69
6707: ST_TO_ADDR
// if ( list < limit ) and ( not respawn_queue [ side ] ) then
6708: LD_VAR 0 2
6712: PUSH
6713: LD_VAR 0 6
6717: LESS
6718: PUSH
6719: LD_LOC 11
6723: PUSH
6724: LD_VAR 0 5
6728: ARRAY
6729: NOT
6730: AND
6731: IFFALSE 6783
// begin respawn_queue = Replace ( respawn_queue , side , TICK ) ;
6733: LD_ADDR_LOC 11
6737: PUSH
6738: LD_LOC 11
6742: PPUSH
6743: LD_VAR 0 5
6747: PPUSH
6748: LD_OWVAR 1
6752: PPUSH
6753: CALL_OW 1
6757: ST_TO_ADDR
// nation_queue = Replace ( nation_queue , side , nation ) ;
6758: LD_ADDR_LOC 12
6762: PUSH
6763: LD_LOC 12
6767: PPUSH
6768: LD_VAR 0 5
6772: PPUSH
6773: LD_VAR 0 4
6777: PPUSH
6778: CALL_OW 1
6782: ST_TO_ADDR
// end ; time := TICK - respawn_queue [ side ] ;
6783: LD_ADDR_VAR 0 3
6787: PUSH
6788: LD_OWVAR 1
6792: PUSH
6793: LD_LOC 11
6797: PUSH
6798: LD_VAR 0 5
6802: ARRAY
6803: MINUS
6804: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6805: LD_LOC 11
6809: PUSH
6810: LD_VAR 0 5
6814: ARRAY
6815: PUSH
6816: LD_VAR 0 3
6820: PUSH
6821: LD_EXP 13
6825: GREATER
6826: AND
6827: IFFALSE 6854
// respawn_character_nation ( side , time , nation_queue [ side ] ) ;
6829: LD_VAR 0 5
6833: PPUSH
6834: LD_VAR 0 3
6838: PPUSH
6839: LD_LOC 12
6843: PUSH
6844: LD_VAR 0 5
6848: ARRAY
6849: PPUSH
6850: CALL 6862 0 3
// end ;
6854: GO 6563
6856: POP
6857: POP
// enable ;
6858: ENABLE
// end ;
6859: PPOPN 6
6861: END
// function respawn_character_nation ( side , time , nation ) ; var dep ; begin
6862: LD_INT 0
6864: PPUSH
6865: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6866: LD_INT 0
6868: PPUSH
6869: LD_INT 1
6871: PPUSH
6872: CALL_OW 12
6876: PUSH
6877: LD_VAR 0 2
6881: PUSH
6882: LD_EXP 14
6886: LESS
6887: AND
6888: IFFALSE 6892
// exit ;
6890: GO 7193
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_nation , nation ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6892: LD_ADDR_VAR 0 5
6896: PUSH
6897: LD_INT 22
6899: PUSH
6900: LD_VAR 0 1
6904: PUSH
6905: EMPTY
6906: LIST
6907: LIST
6908: PUSH
6909: LD_INT 23
6911: PUSH
6912: LD_VAR 0 3
6916: PUSH
6917: EMPTY
6918: LIST
6919: LIST
6920: PUSH
6921: LD_INT 2
6923: PUSH
6924: LD_INT 30
6926: PUSH
6927: LD_INT 0
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: PUSH
6934: LD_INT 30
6936: PUSH
6937: LD_INT 1
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: LIST
6948: PUSH
6949: LD_INT 50
6951: PUSH
6952: EMPTY
6953: LIST
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: PPUSH
6961: CALL_OW 69
6965: ST_TO_ADDR
// if not dep then
6966: LD_VAR 0 5
6970: NOT
6971: IFFALSE 7034
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6973: LD_ADDR_VAR 0 5
6977: PUSH
6978: LD_INT 22
6980: PUSH
6981: LD_VAR 0 1
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: LD_INT 2
6992: PUSH
6993: LD_INT 30
6995: PUSH
6996: LD_INT 0
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: LD_INT 30
7005: PUSH
7006: LD_INT 1
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: LIST
7017: PUSH
7018: LD_INT 50
7020: PUSH
7021: EMPTY
7022: LIST
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: LIST
7028: PPUSH
7029: CALL_OW 69
7033: ST_TO_ADDR
// if not dep then
7034: LD_VAR 0 5
7038: NOT
7039: IFFALSE 7045
// exit else
7041: GO 7193
7043: GO 7069
// dep := dep [ Rand ( 1 , dep ) ] ;
7045: LD_ADDR_VAR 0 5
7049: PUSH
7050: LD_VAR 0 5
7054: PUSH
7055: LD_INT 1
7057: PPUSH
7058: LD_VAR 0 5
7062: PPUSH
7063: CALL_OW 12
7067: ARRAY
7068: ST_TO_ADDR
// uc_side := side ;
7069: LD_ADDR_OWVAR 20
7073: PUSH
7074: LD_VAR 0 1
7078: ST_TO_ADDR
// uc_nation := nation ;
7079: LD_ADDR_OWVAR 21
7083: PUSH
7084: LD_VAR 0 3
7088: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level ) ;
7089: LD_INT 0
7091: PPUSH
7092: LD_INT 0
7094: PPUSH
7095: LD_EXP 7
7099: PPUSH
7100: CALL_OW 380
// hc_importance := 0 ;
7104: LD_ADDR_OWVAR 32
7108: PUSH
7109: LD_INT 0
7111: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
7112: CALL_OW 44
7116: PPUSH
7117: LD_VAR 0 5
7121: PPUSH
7122: CALL_OW 250
7126: PPUSH
7127: LD_VAR 0 5
7131: PPUSH
7132: CALL_OW 251
7136: PPUSH
7137: LD_INT 10
7139: PPUSH
7140: LD_INT 1
7142: PPUSH
7143: CALL_OW 50
// respawn_queue := Replace ( respawn_queue , side , 0 ) ;
7147: LD_ADDR_LOC 11
7151: PUSH
7152: LD_LOC 11
7156: PPUSH
7157: LD_VAR 0 1
7161: PPUSH
7162: LD_INT 0
7164: PPUSH
7165: CALL_OW 1
7169: ST_TO_ADDR
// nation_queue := Replace ( nation_queue , side , 0 ) ;
7170: LD_ADDR_LOC 12
7174: PUSH
7175: LD_LOC 12
7179: PPUSH
7180: LD_VAR 0 1
7184: PPUSH
7185: LD_INT 0
7187: PPUSH
7188: CALL_OW 1
7192: ST_TO_ADDR
// end ;
7193: LD_VAR 0 4
7197: RET
// function GetSidePositions ( i ) ; var un , side ; begin
7198: LD_INT 0
7200: PPUSH
7201: PPUSH
7202: PPUSH
// side := false ;
7203: LD_ADDR_VAR 0 4
7207: PUSH
7208: LD_INT 0
7210: ST_TO_ADDR
// for un = 1 to Side_Positions do
7211: LD_ADDR_VAR 0 3
7215: PUSH
7216: DOUBLE
7217: LD_INT 1
7219: DEC
7220: ST_TO_ADDR
7221: LD_EXP 18
7225: PUSH
7226: FOR_TO
7227: IFFALSE 7261
// if Side_Positions [ un ] = i then
7229: LD_EXP 18
7233: PUSH
7234: LD_VAR 0 3
7238: ARRAY
7239: PUSH
7240: LD_VAR 0 1
7244: EQUAL
7245: IFFALSE 7259
// begin side := un ;
7247: LD_ADDR_VAR 0 4
7251: PUSH
7252: LD_VAR 0 3
7256: ST_TO_ADDR
// break ;
7257: GO 7261
// end ;
7259: GO 7226
7261: POP
7262: POP
// result := side ;
7263: LD_ADDR_VAR 0 2
7267: PUSH
7268: LD_VAR 0 4
7272: ST_TO_ADDR
// end ; end_of_file
7273: LD_VAR 0 2
7277: RET
// every 20 20$00 trigger apemanNumber do
7278: LD_EXP 30
7282: IFFALSE 7315
7284: GO 7286
7286: DISABLE
// begin enable ;
7287: ENABLE
// if apeLevel >= 8 then
7288: LD_EXP 35
7292: PUSH
7293: LD_INT 8
7295: GREATEREQUAL
7296: IFFALSE 7301
// disable else
7298: DISABLE
7299: GO 7315
// apeLevel := apeLevel + 1 ;
7301: LD_ADDR_EXP 35
7305: PUSH
7306: LD_EXP 35
7310: PUSH
7311: LD_INT 1
7313: PLUS
7314: ST_TO_ADDR
// end ;
7315: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
7316: LD_EXP 30
7320: PUSH
7321: LD_EXP 31
7325: LESS
7326: IFFALSE 7466
7328: GO 7330
7330: DISABLE
7331: LD_INT 0
7333: PPUSH
7334: PPUSH
7335: PPUSH
7336: PPUSH
// begin enable ;
7337: ENABLE
// for i := 1 to apemanPos do
7338: LD_ADDR_VAR 0 1
7342: PUSH
7343: DOUBLE
7344: LD_INT 1
7346: DEC
7347: ST_TO_ADDR
7348: LD_EXP 33
7352: PUSH
7353: FOR_TO
7354: IFFALSE 7464
// begin if apemanPlayerCount [ i ] then
7356: LD_EXP 34
7360: PUSH
7361: LD_VAR 0 1
7365: ARRAY
7366: IFFALSE 7462
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
7368: LD_EXP 34
7372: PUSH
7373: LD_VAR 0 1
7377: ARRAY
7378: PUSH
7379: LD_EXP 33
7383: PUSH
7384: LD_VAR 0 1
7388: ARRAY
7389: GREATER
7390: IFFALSE 7462
// begin ape := PrepareApeman ;
7392: LD_ADDR_VAR 0 2
7396: PUSH
7397: CALL 7969 0 0
7401: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
7402: LD_VAR 0 2
7406: PPUSH
7407: LD_EXP 36
7411: PUSH
7412: LD_VAR 0 1
7416: ARRAY
7417: PPUSH
7418: LD_INT 0
7420: PPUSH
7421: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
7425: LD_ADDR_EXP 33
7429: PUSH
7430: LD_EXP 33
7434: PPUSH
7435: LD_VAR 0 1
7439: PPUSH
7440: LD_EXP 33
7444: PUSH
7445: LD_VAR 0 1
7449: ARRAY
7450: PUSH
7451: LD_VAR 0 2
7455: UNION
7456: PPUSH
7457: CALL_OW 1
7461: ST_TO_ADDR
// end ; end ; end ;
7462: GO 7353
7464: POP
7465: POP
// end ;
7466: PPOPN 4
7468: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
7469: LD_INT 0
7471: PPUSH
7472: PPUSH
7473: PPUSH
7474: PPUSH
7475: PPUSH
7476: PPUSH
7477: PPUSH
// playersAmount := 0 ;
7478: LD_ADDR_VAR 0 3
7482: PUSH
7483: LD_INT 0
7485: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base1ApeArea , Base2ApeArea , ] ;
7486: LD_ADDR_VAR 0 7
7490: PUSH
7491: LD_INT 18
7493: PUSH
7494: LD_INT 19
7496: PUSH
7497: LD_INT 18
7499: PUSH
7500: LD_INT 19
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7509: LD_ADDR_EXP 36
7513: PUSH
7514: LD_INT 0
7516: PUSH
7517: LD_INT 0
7519: PUSH
7520: LD_INT 0
7522: PUSH
7523: LD_INT 0
7525: PUSH
7526: LD_INT 0
7528: PUSH
7529: LD_INT 0
7531: PUSH
7532: LD_INT 0
7534: PUSH
7535: LD_INT 0
7537: PUSH
7538: EMPTY
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: ST_TO_ADDR
// for j = 1 to Side_Positions do
7548: LD_ADDR_VAR 0 4
7552: PUSH
7553: DOUBLE
7554: LD_INT 1
7556: DEC
7557: ST_TO_ADDR
7558: LD_EXP 18
7562: PUSH
7563: FOR_TO
7564: IFFALSE 7631
// if Side_Positions [ j ] then
7566: LD_EXP 18
7570: PUSH
7571: LD_VAR 0 4
7575: ARRAY
7576: IFFALSE 7629
// begin playersAmount := playersAmount + 1 ;
7578: LD_ADDR_VAR 0 3
7582: PUSH
7583: LD_VAR 0 3
7587: PUSH
7588: LD_INT 1
7590: PLUS
7591: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
7592: LD_ADDR_EXP 36
7596: PUSH
7597: LD_EXP 36
7601: PPUSH
7602: LD_VAR 0 4
7606: PPUSH
7607: LD_VAR 0 7
7611: PUSH
7612: LD_EXP 18
7616: PUSH
7617: LD_VAR 0 4
7621: ARRAY
7622: ARRAY
7623: PPUSH
7624: CALL_OW 1
7628: ST_TO_ADDR
// end ;
7629: GO 7563
7631: POP
7632: POP
// apemanPerPlayer := 2 * amount_of_apemen ;
7633: LD_ADDR_EXP 32
7637: PUSH
7638: LD_INT 2
7640: PUSH
7641: LD_EXP 12
7645: MUL
7646: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
7647: LD_ADDR_EXP 30
7651: PUSH
7652: LD_VAR 0 3
7656: PUSH
7657: LD_EXP 32
7661: MUL
7662: ST_TO_ADDR
// apemanLimit := apemanNumber ;
7663: LD_ADDR_EXP 31
7667: PUSH
7668: LD_EXP 30
7672: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7673: LD_ADDR_EXP 33
7677: PUSH
7678: LD_INT 0
7680: PUSH
7681: LD_INT 0
7683: PUSH
7684: LD_INT 0
7686: PUSH
7687: LD_INT 0
7689: PUSH
7690: LD_INT 0
7692: PUSH
7693: LD_INT 0
7695: PUSH
7696: LD_INT 0
7698: PUSH
7699: LD_INT 0
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7712: LD_ADDR_EXP 34
7716: PUSH
7717: LD_INT 0
7719: PUSH
7720: LD_INT 0
7722: PUSH
7723: LD_INT 0
7725: PUSH
7726: LD_INT 0
7728: PUSH
7729: LD_INT 0
7731: PUSH
7732: LD_INT 0
7734: PUSH
7735: LD_INT 0
7737: PUSH
7738: LD_INT 0
7740: PUSH
7741: EMPTY
7742: LIST
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: ST_TO_ADDR
// apeLevel := 1 ;
7751: LD_ADDR_EXP 35
7755: PUSH
7756: LD_INT 1
7758: ST_TO_ADDR
// if not apemanNumber then
7759: LD_EXP 30
7763: NOT
7764: IFFALSE 7768
// exit ;
7766: GO 7964
// for i := 1 to apemanPerPlayer do
7768: LD_ADDR_VAR 0 2
7772: PUSH
7773: DOUBLE
7774: LD_INT 1
7776: DEC
7777: ST_TO_ADDR
7778: LD_EXP 32
7782: PUSH
7783: FOR_TO
7784: IFFALSE 7962
// begin for j := 1 to Side_Positions do
7786: LD_ADDR_VAR 0 4
7790: PUSH
7791: DOUBLE
7792: LD_INT 1
7794: DEC
7795: ST_TO_ADDR
7796: LD_EXP 18
7800: PUSH
7801: FOR_TO
7802: IFFALSE 7958
// if Side_Positions [ j ] then
7804: LD_EXP 18
7808: PUSH
7809: LD_VAR 0 4
7813: ARRAY
7814: IFFALSE 7956
// begin pos := Side_Positions [ j ] ;
7816: LD_ADDR_VAR 0 6
7820: PUSH
7821: LD_EXP 18
7825: PUSH
7826: LD_VAR 0 4
7830: ARRAY
7831: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
7832: LD_ADDR_EXP 34
7836: PUSH
7837: LD_EXP 34
7841: PPUSH
7842: LD_VAR 0 4
7846: PPUSH
7847: LD_EXP 34
7851: PUSH
7852: LD_VAR 0 4
7856: ARRAY
7857: PUSH
7858: LD_INT 1
7860: PLUS
7861: PPUSH
7862: CALL_OW 1
7866: ST_TO_ADDR
// ape := PrepareApeman ;
7867: LD_ADDR_VAR 0 5
7871: PUSH
7872: CALL 7969 0 0
7876: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
7877: LD_ADDR_EXP 33
7881: PUSH
7882: LD_EXP 33
7886: PPUSH
7887: LD_VAR 0 4
7891: PPUSH
7892: LD_EXP 33
7896: PUSH
7897: LD_VAR 0 4
7901: ARRAY
7902: PPUSH
7903: LD_EXP 33
7907: PUSH
7908: LD_VAR 0 4
7912: ARRAY
7913: PUSH
7914: LD_INT 1
7916: PLUS
7917: PPUSH
7918: LD_VAR 0 5
7922: PPUSH
7923: CALL_OW 1
7927: PPUSH
7928: CALL_OW 1
7932: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
7933: LD_VAR 0 5
7937: PPUSH
7938: LD_EXP 36
7942: PUSH
7943: LD_VAR 0 4
7947: ARRAY
7948: PPUSH
7949: LD_INT 0
7951: PPUSH
7952: CALL_OW 49
// end ;
7956: GO 7801
7958: POP
7959: POP
// end ;
7960: GO 7783
7962: POP
7963: POP
// end ;
7964: LD_VAR 0 1
7968: RET
// export function PrepareApeman ; var bonus ; begin
7969: LD_INT 0
7971: PPUSH
7972: PPUSH
// uc_side := 0 ;
7973: LD_ADDR_OWVAR 20
7977: PUSH
7978: LD_INT 0
7980: ST_TO_ADDR
// uc_nation := 0 ;
7981: LD_ADDR_OWVAR 21
7985: PUSH
7986: LD_INT 0
7988: ST_TO_ADDR
// InitHc ;
7989: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
7993: LD_ADDR_VAR 0 2
7997: PUSH
7998: LD_INT 1
8000: NEG
8001: PUSH
8002: LD_INT 0
8004: PUSH
8005: LD_INT 1
8007: PUSH
8008: EMPTY
8009: LIST
8010: LIST
8011: LIST
8012: PUSH
8013: LD_INT 25
8015: PUSH
8016: LD_INT 12
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: PPUSH
8023: CALL_OW 69
8027: PUSH
8028: LD_INT 3
8030: MOD
8031: PUSH
8032: LD_INT 1
8034: PLUS
8035: ARRAY
8036: ST_TO_ADDR
// hc_class := class_apeman ;
8037: LD_ADDR_OWVAR 28
8041: PUSH
8042: LD_INT 12
8044: ST_TO_ADDR
// hc_gallery :=  ;
8045: LD_ADDR_OWVAR 33
8049: PUSH
8050: LD_STRING 
8052: ST_TO_ADDR
// hc_name :=  ;
8053: LD_ADDR_OWVAR 26
8057: PUSH
8058: LD_STRING 
8060: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
8061: LD_ADDR_OWVAR 31
8065: PUSH
8066: LD_EXP 35
8070: PUSH
8071: LD_VAR 0 2
8075: PLUS
8076: PUSH
8077: LD_EXP 35
8081: PUSH
8082: LD_VAR 0 2
8086: PLUS
8087: PUSH
8088: LD_EXP 35
8092: PUSH
8093: LD_VAR 0 2
8097: PLUS
8098: PUSH
8099: LD_EXP 35
8103: PUSH
8104: LD_VAR 0 2
8108: PLUS
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
8116: LD_ADDR_OWVAR 35
8120: PUSH
8121: LD_INT 10
8123: PUSH
8124: LD_VAR 0 2
8128: MUL
8129: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8130: LD_ADDR_OWVAR 29
8134: PUSH
8135: LD_INT 12
8137: PUSH
8138: LD_INT 12
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: ST_TO_ADDR
// result := CreateHuman ;
8145: LD_ADDR_VAR 0 1
8149: PUSH
8150: CALL_OW 44
8154: ST_TO_ADDR
// end ;
8155: LD_VAR 0 1
8159: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
8160: LD_INT 0
8162: PPUSH
8163: PPUSH
8164: PPUSH
// if not ape then
8165: LD_VAR 0 1
8169: NOT
8170: IFFALSE 8174
// exit ;
8172: GO 8299
// side := GetSide ( ape ) ;
8174: LD_ADDR_VAR 0 3
8178: PUSH
8179: LD_VAR 0 1
8183: PPUSH
8184: CALL_OW 255
8188: ST_TO_ADDR
// if not side then
8189: LD_VAR 0 3
8193: NOT
8194: IFFALSE 8248
// begin for i = 1 to apemanPos do
8196: LD_ADDR_VAR 0 4
8200: PUSH
8201: DOUBLE
8202: LD_INT 1
8204: DEC
8205: ST_TO_ADDR
8206: LD_EXP 33
8210: PUSH
8211: FOR_TO
8212: IFFALSE 8246
// if ape in apemanPos [ i ] then
8214: LD_VAR 0 1
8218: PUSH
8219: LD_EXP 33
8223: PUSH
8224: LD_VAR 0 4
8228: ARRAY
8229: IN
8230: IFFALSE 8244
// begin side := i ;
8232: LD_ADDR_VAR 0 3
8236: PUSH
8237: LD_VAR 0 4
8241: ST_TO_ADDR
// break ;
8242: GO 8246
// end ;
8244: GO 8211
8246: POP
8247: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
8248: LD_ADDR_EXP 33
8252: PUSH
8253: LD_EXP 33
8257: PPUSH
8258: LD_VAR 0 3
8262: PPUSH
8263: LD_EXP 33
8267: PUSH
8268: LD_VAR 0 3
8272: ARRAY
8273: PUSH
8274: LD_VAR 0 1
8278: DIFF
8279: PPUSH
8280: CALL_OW 1
8284: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
8285: LD_ADDR_EXP 30
8289: PUSH
8290: LD_EXP 30
8294: PUSH
8295: LD_INT 1
8297: MINUS
8298: ST_TO_ADDR
// end ; end_of_file
8299: LD_VAR 0 2
8303: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
8304: LD_VAR 0 1
8308: PPUSH
8309: CALL_OW 266
8313: PUSH
8314: LD_INT 0
8316: PUSH
8317: LD_INT 1
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: IN
8324: IFFALSE 8349
// SetBName ( b , @ & GetSide ( b ) ) ;
8326: LD_VAR 0 1
8330: PPUSH
8331: LD_STRING @
8333: PUSH
8334: LD_VAR 0 1
8338: PPUSH
8339: CALL_OW 255
8343: STR
8344: PPUSH
8345: CALL_OW 500
// if def_game_rules then
8349: LD_EXP 57
8353: IFFALSE 8390
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
8355: LD_VAR 0 1
8359: PPUSH
8360: LD_VAR 0 1
8364: PPUSH
8365: CALL_OW 266
8369: PPUSH
8370: LD_VAR 0 1
8374: PPUSH
8375: CALL_OW 255
8379: PPUSH
8380: LD_INT 0
8382: PPUSH
8383: LD_INT 1
8385: PPUSH
8386: CALL 18466 0 5
// end ;
8390: PPOPN 2
8392: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
8393: LD_VAR 0 1
8397: PPUSH
8398: CALL_OW 266
8402: PUSH
8403: LD_INT 0
8405: PUSH
8406: LD_INT 1
8408: PUSH
8409: EMPTY
8410: LIST
8411: LIST
8412: IN
8413: IFFALSE 8438
// SetBName ( b , @ & GetSide ( b ) ) ;
8415: LD_VAR 0 1
8419: PPUSH
8420: LD_STRING @
8422: PUSH
8423: LD_VAR 0 1
8427: PPUSH
8428: CALL_OW 255
8432: STR
8433: PPUSH
8434: CALL_OW 500
// if def_game_rules then
8438: LD_EXP 57
8442: IFFALSE 8481
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
8444: LD_VAR 0 1
8448: PPUSH
8449: LD_VAR 0 1
8453: PPUSH
8454: CALL_OW 266
8458: PPUSH
8459: LD_VAR 0 1
8463: PPUSH
8464: CALL_OW 255
8468: PPUSH
8469: LD_VAR 0 2
8473: PPUSH
8474: LD_INT 1
8476: PPUSH
8477: CALL 18466 0 5
// end ;
8481: PPOPN 3
8483: END
// on VehicleConstructed ( veh , fac ) do var side ;
8484: LD_INT 0
8486: PPUSH
// begin if GetControl ( veh ) = control_apeman then
8487: LD_VAR 0 1
8491: PPUSH
8492: CALL_OW 263
8496: PUSH
8497: LD_INT 5
8499: EQUAL
8500: IFFALSE 8642
// begin side := GetSide ( veh ) ;
8502: LD_ADDR_VAR 0 3
8506: PUSH
8507: LD_VAR 0 1
8511: PPUSH
8512: CALL_OW 255
8516: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
8517: LD_ADDR_EXP 33
8521: PUSH
8522: LD_EXP 33
8526: PPUSH
8527: LD_VAR 0 3
8531: PPUSH
8532: LD_EXP 33
8536: PUSH
8537: LD_VAR 0 3
8541: ARRAY
8542: PPUSH
8543: LD_INT 52
8545: PUSH
8546: EMPTY
8547: LIST
8548: PPUSH
8549: CALL_OW 72
8553: PUSH
8554: LD_INT 22
8556: PUSH
8557: LD_VAR 0 3
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: PUSH
8566: LD_INT 2
8568: PUSH
8569: LD_INT 33
8571: PUSH
8572: LD_INT 5
8574: PUSH
8575: EMPTY
8576: LIST
8577: LIST
8578: PUSH
8579: LD_INT 25
8581: PUSH
8582: LD_INT 12
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: PUSH
8589: LD_INT 25
8591: PUSH
8592: LD_INT 15
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: PUSH
8599: LD_INT 25
8601: PUSH
8602: LD_INT 16
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: PUSH
8609: LD_INT 25
8611: PUSH
8612: LD_INT 17
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: PUSH
8619: EMPTY
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: LIST
8626: PUSH
8627: EMPTY
8628: LIST
8629: LIST
8630: PPUSH
8631: CALL_OW 69
8635: UNION
8636: PPUSH
8637: CALL_OW 1
8641: ST_TO_ADDR
// end ; end ;
8642: PPOPN 3
8644: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
8645: LD_VAR 0 1
8649: PPUSH
8650: LD_VAR 0 2
8654: PPUSH
8655: LD_VAR 0 3
8659: PPUSH
8660: LD_OWVAR 2
8664: PPUSH
8665: CALL 19144 0 4
8669: PPOPN 3
8671: END
// export function DE_Triggers ; begin
8672: LD_INT 0
8674: PPUSH
// disable ( 01 ) ;
8675: LD_INT 1
8677: DISABLE_MARKED
// disable ( 02 ) ;
8678: LD_INT 2
8680: DISABLE_MARKED
// disable ( 03 ) ;
8681: LD_INT 3
8683: DISABLE_MARKED
// disable ( 04 ) ;
8684: LD_INT 4
8686: DISABLE_MARKED
// disable ( 05 ) ;
8687: LD_INT 5
8689: DISABLE_MARKED
// disable ( 06 ) ;
8690: LD_INT 6
8692: DISABLE_MARKED
// disable ( 07 ) ;
8693: LD_INT 7
8695: DISABLE_MARKED
// disable ( 10 ) ;
8696: LD_INT 10
8698: DISABLE_MARKED
// disable ( 11 ) ;
8699: LD_INT 11
8701: DISABLE_MARKED
// disable ( 12 ) ;
8702: LD_INT 12
8704: DISABLE_MARKED
// disable ( 13 ) ;
8705: LD_INT 13
8707: DISABLE_MARKED
// disable ( 19 ) ;
8708: LD_INT 19
8710: DISABLE_MARKED
// disable ( 40 ) ;
8711: LD_INT 40
8713: DISABLE_MARKED
// disable ( 41 ) ;
8714: LD_INT 41
8716: DISABLE_MARKED
// disable ( 98 ) ;
8717: LD_INT 98
8719: DISABLE_MARKED
// disable ( 99 ) ;
8720: LD_INT 99
8722: DISABLE_MARKED
// disable ( 55 ) ;
8723: LD_INT 55
8725: DISABLE_MARKED
// disable ( 400 ) ;
8726: LD_INT 400
8728: DISABLE_MARKED
// disable ( 401 ) ;
8729: LD_INT 401
8731: DISABLE_MARKED
// end ; end_of_file
8732: LD_VAR 0 1
8736: RET
// function CanWinLoose ; begin
8737: LD_INT 0
8739: PPUSH
// Result := true ;
8740: LD_ADDR_VAR 0 1
8744: PUSH
8745: LD_INT 1
8747: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8748: CALL_OW 518
8752: PUSH
8753: CALL_OW 519
8757: PUSH
8758: LD_INT 0
8760: GREATER
8761: AND
8762: IFFALSE 8772
// Result := false ;
8764: LD_ADDR_VAR 0 1
8768: PUSH
8769: LD_INT 0
8771: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8772: CALL_OW 531
8776: PUSH
8777: CALL_OW 519
8781: PUSH
8782: LD_INT 1
8784: GREATER
8785: AND
8786: IFFALSE 8796
// Result := false ;
8788: LD_ADDR_VAR 0 1
8792: PUSH
8793: LD_INT 0
8795: ST_TO_ADDR
// end ;
8796: LD_VAR 0 1
8800: RET
// function HasPower ( i ) ; begin
8801: LD_INT 0
8803: PPUSH
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8804: LD_ADDR_VAR 0 2
8808: PUSH
8809: LD_INT 22
8811: PUSH
8812: LD_VAR 0 1
8816: PUSH
8817: EMPTY
8818: LIST
8819: LIST
8820: PUSH
8821: LD_INT 2
8823: PUSH
8824: LD_INT 21
8826: PUSH
8827: LD_INT 1
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: PUSH
8834: LD_INT 30
8836: PUSH
8837: LD_INT 0
8839: PUSH
8840: EMPTY
8841: LIST
8842: LIST
8843: PUSH
8844: LD_INT 30
8846: PUSH
8847: LD_INT 1
8849: PUSH
8850: EMPTY
8851: LIST
8852: LIST
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: PPUSH
8864: CALL_OW 69
8868: ST_TO_ADDR
// end ;
8869: LD_VAR 0 2
8873: RET
// function AlliedSides ( i , j ) ; begin
8874: LD_INT 0
8876: PPUSH
// Result := false ;
8877: LD_ADDR_VAR 0 3
8881: PUSH
8882: LD_INT 0
8884: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8885: LD_VAR 0 1
8889: PPUSH
8890: LD_VAR 0 2
8894: PPUSH
8895: CALL_OW 81
8899: PUSH
8900: LD_INT 1
8902: EQUAL
8903: PUSH
8904: LD_VAR 0 2
8908: PPUSH
8909: LD_VAR 0 1
8913: PPUSH
8914: CALL_OW 81
8918: PUSH
8919: LD_INT 1
8921: EQUAL
8922: AND
8923: PUSH
8924: LD_VAR 0 1
8928: PPUSH
8929: CALL_OW 83
8933: AND
8934: PUSH
8935: LD_VAR 0 2
8939: PPUSH
8940: CALL_OW 83
8944: AND
8945: IFFALSE 8955
// Result := true ;
8947: LD_ADDR_VAR 0 3
8951: PUSH
8952: LD_INT 1
8954: ST_TO_ADDR
// end ;
8955: LD_VAR 0 3
8959: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
8960: CALL 8737 0 0
8964: IFFALSE 8973
8966: GO 8968
8968: DISABLE
// YouLostInMultiplayer ;
8969: CALL_OW 107
8973: END
// every 0 0$3 trigger CanWinLoose marked 401 do
8974: CALL 8737 0 0
8978: IFFALSE 9002
8980: GO 8982
8982: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
8983: LD_EXP 19
8987: PUSH
8988: LD_OWVAR 2
8992: ARRAY
8993: PPUSH
8994: CALL 19186 0 1
// YouWinInMultiplayer ;
8998: CALL_OW 106
// end ;
9002: END
// every 0 0$3 marked 98 do var i , CanWin ;
9003: GO 9005
9005: DISABLE
9006: LD_INT 0
9008: PPUSH
9009: PPUSH
// begin if not HasPower ( your_side ) then
9010: LD_OWVAR 2
9014: PPUSH
9015: CALL 8801 0 1
9019: NOT
9020: IFFALSE 9031
// begin Multiplayer_Loose_Message ;
9022: CALL_OW 521
// enable ( 400 ) ;
9026: LD_INT 400
9028: ENABLE_MARKED
// end else
9029: GO 9164
// begin CanWin := true ;
9031: LD_ADDR_VAR 0 2
9035: PUSH
9036: LD_INT 1
9038: ST_TO_ADDR
// for i := 1 to 8 do
9039: LD_ADDR_VAR 0 1
9043: PUSH
9044: DOUBLE
9045: LD_INT 1
9047: DEC
9048: ST_TO_ADDR
9049: LD_INT 8
9051: PUSH
9052: FOR_TO
9053: IFFALSE 9150
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9055: LD_EXP 18
9059: PUSH
9060: LD_VAR 0 1
9064: ARRAY
9065: PUSH
9066: LD_VAR 0 1
9070: PPUSH
9071: CALL_OW 108
9075: AND
9076: PUSH
9077: LD_VAR 0 1
9081: PUSH
9082: LD_OWVAR 2
9086: NONEQUAL
9087: AND
9088: IFFALSE 9148
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
9090: LD_EXP 16
9094: PUSH
9095: LD_VAR 0 1
9099: ARRAY
9100: NOT
9101: PUSH
9102: LD_EXP 16
9106: PUSH
9107: LD_VAR 0 1
9111: ARRAY
9112: PUSH
9113: LD_EXP 16
9117: PUSH
9118: LD_OWVAR 2
9122: ARRAY
9123: NONEQUAL
9124: OR
9125: IFFALSE 9148
// if HasPower ( i ) then
9127: LD_VAR 0 1
9131: PPUSH
9132: CALL 8801 0 1
9136: IFFALSE 9148
// begin CanWin := false ;
9138: LD_ADDR_VAR 0 2
9142: PUSH
9143: LD_INT 0
9145: ST_TO_ADDR
// break ;
9146: GO 9150
// end ;
9148: GO 9052
9150: POP
9151: POP
// if CanWin then
9152: LD_VAR 0 2
9156: IFFALSE 9163
// enable ( 401 ) else
9158: LD_INT 401
9160: ENABLE_MARKED
9161: GO 9164
// enable ;
9163: ENABLE
// end ; end ;
9164: PPOPN 2
9166: END
// every 0 0$3 marked 99 do var i , CanWin ;
9167: GO 9169
9169: DISABLE
9170: LD_INT 0
9172: PPUSH
9173: PPUSH
// begin if not HasPower ( your_side ) then
9174: LD_OWVAR 2
9178: PPUSH
9179: CALL 8801 0 1
9183: NOT
9184: IFFALSE 9195
// begin Multiplayer_Loose_Message ;
9186: CALL_OW 521
// enable ( 400 ) ;
9190: LD_INT 400
9192: ENABLE_MARKED
// end else
9193: GO 9308
// begin CanWin := true ;
9195: LD_ADDR_VAR 0 2
9199: PUSH
9200: LD_INT 1
9202: ST_TO_ADDR
// for i := 1 to 8 do
9203: LD_ADDR_VAR 0 1
9207: PUSH
9208: DOUBLE
9209: LD_INT 1
9211: DEC
9212: ST_TO_ADDR
9213: LD_INT 8
9215: PUSH
9216: FOR_TO
9217: IFFALSE 9294
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9219: LD_EXP 18
9223: PUSH
9224: LD_VAR 0 1
9228: ARRAY
9229: PUSH
9230: LD_VAR 0 1
9234: PPUSH
9235: CALL_OW 108
9239: AND
9240: PUSH
9241: LD_VAR 0 1
9245: PUSH
9246: LD_OWVAR 2
9250: NONEQUAL
9251: AND
9252: IFFALSE 9292
// if not AlliedSides ( i , your_side ) then
9254: LD_VAR 0 1
9258: PPUSH
9259: LD_OWVAR 2
9263: PPUSH
9264: CALL 8874 0 2
9268: NOT
9269: IFFALSE 9292
// if HasPower ( i ) then
9271: LD_VAR 0 1
9275: PPUSH
9276: CALL 8801 0 1
9280: IFFALSE 9292
// begin CanWin := false ;
9282: LD_ADDR_VAR 0 2
9286: PUSH
9287: LD_INT 0
9289: ST_TO_ADDR
// break ;
9290: GO 9294
// end ;
9292: GO 9216
9294: POP
9295: POP
// if CanWin then
9296: LD_VAR 0 2
9300: IFFALSE 9307
// enable ( 401 ) else
9302: LD_INT 401
9304: ENABLE_MARKED
9305: GO 9308
// enable ;
9307: ENABLE
// end ; end ; end_of_file
9308: PPOPN 2
9310: END
// var time ; export lidi , krabice , opoce ; export cper , cperiode ; var depot1 , depot2 ; var vlajka1 , vlajka2 ; export depotpositions , areas ; var podvozky , zbrane ; export pos1side , pos2side ; var pos1base , pos2base ; var left_score , right_score ; export debug , ctf ; export mp_sides_teams_ , mp_sides_nations_ , mp_sides_positions_ , mp_sides_players_counts_ ; var cft_01 , cft_02 , cft_03 , cft_04 , cft_05 , cft_06 , cft_07 ; export nonctf_10 , nonctf_11 , nonctf_12 , nonctf_13 ; var stmp , stmp2 , cl ; export function starting_ctf ; begin
9311: LD_INT 0
9313: PPUSH
// cft_01 = 01 ;
9314: LD_ADDR_LOC 24
9318: PUSH
9319: LD_INT 1
9321: ST_TO_ADDR
// cft_02 = 02 ;
9322: LD_ADDR_LOC 25
9326: PUSH
9327: LD_INT 2
9329: ST_TO_ADDR
// cft_03 = 03 ;
9330: LD_ADDR_LOC 26
9334: PUSH
9335: LD_INT 3
9337: ST_TO_ADDR
// cft_04 = 04 ;
9338: LD_ADDR_LOC 27
9342: PUSH
9343: LD_INT 4
9345: ST_TO_ADDR
// cft_05 = 05 ;
9346: LD_ADDR_LOC 28
9350: PUSH
9351: LD_INT 5
9353: ST_TO_ADDR
// cft_06 = 06 ;
9354: LD_ADDR_LOC 29
9358: PUSH
9359: LD_INT 6
9361: ST_TO_ADDR
// cft_07 = 07 ;
9362: LD_ADDR_LOC 30
9366: PUSH
9367: LD_INT 7
9369: ST_TO_ADDR
// nonctf_10 = 10 ;
9370: LD_ADDR_EXP 52
9374: PUSH
9375: LD_INT 10
9377: ST_TO_ADDR
// nonctf_11 = 11 ;
9378: LD_ADDR_EXP 53
9382: PUSH
9383: LD_INT 11
9385: ST_TO_ADDR
// nonctf_12 = 12 ;
9386: LD_ADDR_EXP 54
9390: PUSH
9391: LD_INT 12
9393: ST_TO_ADDR
// nonctf_13 = 13 ;
9394: LD_ADDR_EXP 55
9398: PUSH
9399: LD_INT 13
9401: ST_TO_ADDR
// disable ( cft_01 ) ;
9402: LD_LOC 24
9406: DISABLE_MARKED
// disable ( cft_02 ) ;
9407: LD_LOC 25
9411: DISABLE_MARKED
// disable ( cft_03 ) ;
9412: LD_LOC 26
9416: DISABLE_MARKED
// disable ( cft_04 ) ;
9417: LD_LOC 27
9421: DISABLE_MARKED
// disable ( cft_05 ) ;
9422: LD_LOC 28
9426: DISABLE_MARKED
// disable ( cft_06 ) ;
9427: LD_LOC 29
9431: DISABLE_MARKED
// disable ( cft_07 ) ;
9432: LD_LOC 30
9436: DISABLE_MARKED
// disable ( nonctf_10 ) ;
9437: LD_EXP 52
9441: DISABLE_MARKED
// disable ( nonctf_11 ) ;
9442: LD_EXP 53
9446: DISABLE_MARKED
// disable ( nonctf_12 ) ;
9447: LD_EXP 54
9451: DISABLE_MARKED
// disable ( nonctf_13 ) ;
9452: LD_EXP 55
9456: DISABLE_MARKED
// debug = false ;
9457: LD_ADDR_EXP 46
9461: PUSH
9462: LD_INT 0
9464: ST_TO_ADDR
// if not multiplayer then
9465: LD_OWVAR 4
9469: NOT
9470: IFFALSE 9630
// begin mp_sides_teams_ = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9472: LD_ADDR_EXP 48
9476: PUSH
9477: LD_INT 0
9479: PUSH
9480: LD_INT 0
9482: PUSH
9483: LD_INT 0
9485: PUSH
9486: LD_INT 0
9488: PUSH
9489: LD_INT 0
9491: PUSH
9492: LD_INT 0
9494: PUSH
9495: LD_INT 0
9497: PUSH
9498: LD_INT 0
9500: PUSH
9501: EMPTY
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: ST_TO_ADDR
// mp_sides_nations_ = [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9511: LD_ADDR_EXP 49
9515: PUSH
9516: LD_INT 1
9518: PUSH
9519: LD_INT 2
9521: PUSH
9522: LD_INT 0
9524: PUSH
9525: LD_INT 0
9527: PUSH
9528: LD_INT 0
9530: PUSH
9531: LD_INT 0
9533: PUSH
9534: LD_INT 0
9536: PUSH
9537: LD_INT 0
9539: PUSH
9540: EMPTY
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: ST_TO_ADDR
// mp_sides_positions_ = [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9550: LD_ADDR_EXP 50
9554: PUSH
9555: LD_INT 1
9557: PUSH
9558: LD_INT 2
9560: PUSH
9561: LD_INT 0
9563: PUSH
9564: LD_INT 0
9566: PUSH
9567: LD_INT 0
9569: PUSH
9570: LD_INT 0
9572: PUSH
9573: LD_INT 0
9575: PUSH
9576: LD_INT 0
9578: PUSH
9579: EMPTY
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: ST_TO_ADDR
// mp_sides_players_counts_ = [ 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9589: LD_ADDR_EXP 51
9593: PUSH
9594: LD_INT 1
9596: PUSH
9597: LD_INT 1
9599: PUSH
9600: LD_INT 0
9602: PUSH
9603: LD_INT 0
9605: PUSH
9606: LD_INT 0
9608: PUSH
9609: LD_INT 0
9611: PUSH
9612: LD_INT 0
9614: PUSH
9615: LD_INT 0
9617: PUSH
9618: EMPTY
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: ST_TO_ADDR
// end else
9628: GO 9670
// begin mp_sides_teams_ = mp_sides_teams ;
9630: LD_ADDR_EXP 48
9634: PUSH
9635: LD_OWVAR 15
9639: ST_TO_ADDR
// mp_sides_nations_ = mp_sides_nations ;
9640: LD_ADDR_EXP 49
9644: PUSH
9645: LD_OWVAR 16
9649: ST_TO_ADDR
// mp_sides_positions_ = mp_sides_positions ;
9650: LD_ADDR_EXP 50
9654: PUSH
9655: LD_OWVAR 17
9659: ST_TO_ADDR
// mp_sides_players_counts_ = mp_sides_players_counts ;
9660: LD_ADDR_EXP 51
9664: PUSH
9665: LD_OWVAR 18
9669: ST_TO_ADDR
// end ; if debug then
9670: LD_EXP 46
9674: IFFALSE 9756
// begin debuglog ( [ side , your_side ] ) ;
9676: LD_STRING side
9678: PUSH
9679: LD_OWVAR 2
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: PPUSH
9688: CALL_OW 359
// debuglog ( [ teams , mp_sides_teams_ ] ) ;
9692: LD_STRING teams
9694: PUSH
9695: LD_EXP 48
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: PPUSH
9704: CALL_OW 359
// debuglog ( [ nations , mp_sides_nations_ ] ) ;
9708: LD_STRING nations
9710: PUSH
9711: LD_EXP 49
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: PPUSH
9720: CALL_OW 359
// debuglog ( [ positions , mp_sides_positions_ ] ) ;
9724: LD_STRING positions
9726: PUSH
9727: LD_EXP 50
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: PPUSH
9736: CALL_OW 359
// debuglog ( [ pl. counts , mp_sides_players_counts_ ] ) ;
9740: LD_STRING pl. counts
9742: PUSH
9743: LD_EXP 51
9747: PUSH
9748: EMPTY
9749: LIST
9750: LIST
9751: PPUSH
9752: CALL_OW 359
// end ; depotpositions = [ [ 34 , 60 , 1 ] , [ 185 , 60 , 4 ] ] ;
9756: LD_ADDR_EXP 42
9760: PUSH
9761: LD_INT 34
9763: PUSH
9764: LD_INT 60
9766: PUSH
9767: LD_INT 1
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: LIST
9774: PUSH
9775: LD_INT 185
9777: PUSH
9778: LD_INT 60
9780: PUSH
9781: LD_INT 4
9783: PUSH
9784: EMPTY
9785: LIST
9786: LIST
9787: LIST
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: ST_TO_ADDR
// areas = [ vlevo , vpravo ] ;
9793: LD_ADDR_EXP 43
9797: PUSH
9798: LD_INT 2
9800: PUSH
9801: LD_INT 3
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: ST_TO_ADDR
// if mp_game_type = 3 then
9808: LD_OWVAR 6
9812: PUSH
9813: LD_INT 3
9815: EQUAL
9816: IFFALSE 9824
// begin other_game ;
9818: CALL 12896 0 0
// exit ;
9822: GO 11272
// end ; ctf = true ;
9824: LD_ADDR_EXP 47
9828: PUSH
9829: LD_INT 1
9831: ST_TO_ADDR
// enable ( cft_01 ) ;
9832: LD_LOC 24
9836: ENABLE_MARKED
// enable ( cft_02 ) ;
9837: LD_LOC 25
9841: ENABLE_MARKED
// enable ( cft_05 ) ;
9842: LD_LOC 28
9846: ENABLE_MARKED
// enable ( cft_06 ) ;
9847: LD_LOC 29
9851: ENABLE_MARKED
// enable ( cft_07 ) ;
9852: LD_LOC 30
9856: ENABLE_MARKED
// podvozky = [ us_medium_wheeled , ar_medium_trike , ru_medium_wheeled ] ;
9857: LD_ADDR_LOC 18
9861: PUSH
9862: LD_INT 2
9864: PUSH
9865: LD_INT 13
9867: PUSH
9868: LD_INT 21
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: LIST
9875: ST_TO_ADDR
// zbrane = [ us_cargo_bay , ar_cargo_bay , ru_cargo_bay ] ;
9876: LD_ADDR_LOC 19
9880: PUSH
9881: LD_INT 12
9883: PUSH
9884: LD_INT 32
9886: PUSH
9887: LD_INT 51
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: LIST
9894: ST_TO_ADDR
// left_score = 0 ;
9895: LD_ADDR_LOC 22
9899: PUSH
9900: LD_INT 0
9902: ST_TO_ADDR
// right_score = 0 ;
9903: LD_ADDR_LOC 23
9907: PUSH
9908: LD_INT 0
9910: ST_TO_ADDR
// if multiplayer then
9911: LD_OWVAR 4
9915: IFFALSE 9971
// begin lidi = getmultiplayersetting ( 1 ) ;
9917: LD_ADDR_EXP 37
9921: PUSH
9922: LD_INT 1
9924: PPUSH
9925: CALL_OW 426
9929: ST_TO_ADDR
// krabice = getmultiplayersetting ( 2 ) ;
9930: LD_ADDR_EXP 38
9934: PUSH
9935: LD_INT 2
9937: PPUSH
9938: CALL_OW 426
9942: ST_TO_ADDR
// opoce = getmultiplayersetting ( 3 ) ;
9943: LD_ADDR_EXP 39
9947: PUSH
9948: LD_INT 3
9950: PPUSH
9951: CALL_OW 426
9955: ST_TO_ADDR
// time = getmultiplayersetting ( 4 ) ;
9956: LD_ADDR_LOC 13
9960: PUSH
9961: LD_INT 4
9963: PPUSH
9964: CALL_OW 426
9968: ST_TO_ADDR
// end else
9969: GO 10003
// begin lidi = 1 ;
9971: LD_ADDR_EXP 37
9975: PUSH
9976: LD_INT 1
9978: ST_TO_ADDR
// krabice = 1 ;
9979: LD_ADDR_EXP 38
9983: PUSH
9984: LD_INT 1
9986: ST_TO_ADDR
// opoce = 3 ;
9987: LD_ADDR_EXP 39
9991: PUSH
9992: LD_INT 3
9994: ST_TO_ADDR
// time = 2 ;
9995: LD_ADDR_LOC 13
9999: PUSH
10000: LD_INT 2
10002: ST_TO_ADDR
// end ; case lidi of 0 :
10003: LD_EXP 37
10007: PUSH
10008: LD_INT 0
10010: DOUBLE
10011: EQUAL
10012: IFTRUE 10016
10014: GO 10027
10016: POP
// lidi = 9 ; 1 :
10017: LD_ADDR_EXP 37
10021: PUSH
10022: LD_INT 9
10024: ST_TO_ADDR
10025: GO 10104
10027: LD_INT 1
10029: DOUBLE
10030: EQUAL
10031: IFTRUE 10035
10033: GO 10046
10035: POP
// lidi = 13 ; 2 :
10036: LD_ADDR_EXP 37
10040: PUSH
10041: LD_INT 13
10043: ST_TO_ADDR
10044: GO 10104
10046: LD_INT 2
10048: DOUBLE
10049: EQUAL
10050: IFTRUE 10054
10052: GO 10065
10054: POP
// lidi = 19 ; 3 :
10055: LD_ADDR_EXP 37
10059: PUSH
10060: LD_INT 19
10062: ST_TO_ADDR
10063: GO 10104
10065: LD_INT 3
10067: DOUBLE
10068: EQUAL
10069: IFTRUE 10073
10071: GO 10084
10073: POP
// lidi = 23 ; 4 :
10074: LD_ADDR_EXP 37
10078: PUSH
10079: LD_INT 23
10081: ST_TO_ADDR
10082: GO 10104
10084: LD_INT 4
10086: DOUBLE
10087: EQUAL
10088: IFTRUE 10092
10090: GO 10103
10092: POP
// lidi = 29 ; end ;
10093: LD_ADDR_EXP 37
10097: PUSH
10098: LD_INT 29
10100: ST_TO_ADDR
10101: GO 10104
10103: POP
// case krabice of 0 :
10104: LD_EXP 38
10108: PUSH
10109: LD_INT 0
10111: DOUBLE
10112: EQUAL
10113: IFTRUE 10117
10115: GO 10128
10117: POP
// cperiode = 1 1$30 ; 1 :
10118: LD_ADDR_EXP 41
10122: PUSH
10123: LD_INT 3150
10125: ST_TO_ADDR
10126: GO 10167
10128: LD_INT 1
10130: DOUBLE
10131: EQUAL
10132: IFTRUE 10136
10134: GO 10147
10136: POP
// cperiode = 1 1$00 ; 2 :
10137: LD_ADDR_EXP 41
10141: PUSH
10142: LD_INT 2100
10144: ST_TO_ADDR
10145: GO 10167
10147: LD_INT 2
10149: DOUBLE
10150: EQUAL
10151: IFTRUE 10155
10153: GO 10166
10155: POP
// cperiode = 0 0$30 ; end ;
10156: LD_ADDR_EXP 41
10160: PUSH
10161: LD_INT 1050
10163: ST_TO_ADDR
10164: GO 10167
10166: POP
// cper = 0 0$10 ;
10167: LD_ADDR_EXP 40
10171: PUSH
10172: LD_INT 350
10174: ST_TO_ADDR
// case opoce of 0 :
10175: LD_EXP 39
10179: PUSH
10180: LD_INT 0
10182: DOUBLE
10183: EQUAL
10184: IFTRUE 10188
10186: GO 10199
10188: POP
// opoce = 0 ; 1 :
10189: LD_ADDR_EXP 39
10193: PUSH
10194: LD_INT 0
10196: ST_TO_ADDR
10197: GO 10314
10199: LD_INT 1
10201: DOUBLE
10202: EQUAL
10203: IFTRUE 10207
10205: GO 10218
10207: POP
// opoce = 3 ; 2 :
10208: LD_ADDR_EXP 39
10212: PUSH
10213: LD_INT 3
10215: ST_TO_ADDR
10216: GO 10314
10218: LD_INT 2
10220: DOUBLE
10221: EQUAL
10222: IFTRUE 10226
10224: GO 10237
10226: POP
// opoce = 7 ; 3 :
10227: LD_ADDR_EXP 39
10231: PUSH
10232: LD_INT 7
10234: ST_TO_ADDR
10235: GO 10314
10237: LD_INT 3
10239: DOUBLE
10240: EQUAL
10241: IFTRUE 10245
10243: GO 10256
10245: POP
// opoce = 11 ; 4 :
10246: LD_ADDR_EXP 39
10250: PUSH
10251: LD_INT 11
10253: ST_TO_ADDR
10254: GO 10314
10256: LD_INT 4
10258: DOUBLE
10259: EQUAL
10260: IFTRUE 10264
10262: GO 10275
10264: POP
// opoce = 15 ; 5 :
10265: LD_ADDR_EXP 39
10269: PUSH
10270: LD_INT 15
10272: ST_TO_ADDR
10273: GO 10314
10275: LD_INT 5
10277: DOUBLE
10278: EQUAL
10279: IFTRUE 10283
10281: GO 10294
10283: POP
// opoce = 19 ; 6 :
10284: LD_ADDR_EXP 39
10288: PUSH
10289: LD_INT 19
10291: ST_TO_ADDR
10292: GO 10314
10294: LD_INT 6
10296: DOUBLE
10297: EQUAL
10298: IFTRUE 10302
10300: GO 10313
10302: POP
// opoce = 23 ; end ;
10303: LD_ADDR_EXP 39
10307: PUSH
10308: LD_INT 23
10310: ST_TO_ADDR
10311: GO 10314
10313: POP
// case time of 0 :
10314: LD_LOC 13
10318: PUSH
10319: LD_INT 0
10321: DOUBLE
10322: EQUAL
10323: IFTRUE 10327
10325: GO 10342
10327: POP
// time = 30 * 60 ; 1 :
10328: LD_ADDR_LOC 13
10332: PUSH
10333: LD_INT 30
10335: PUSH
10336: LD_INT 60
10338: MUL
10339: ST_TO_ADDR
10340: GO 10458
10342: LD_INT 1
10344: DOUBLE
10345: EQUAL
10346: IFTRUE 10350
10348: GO 10365
10350: POP
// time = 40 * 60 ; 2 :
10351: LD_ADDR_LOC 13
10355: PUSH
10356: LD_INT 40
10358: PUSH
10359: LD_INT 60
10361: MUL
10362: ST_TO_ADDR
10363: GO 10458
10365: LD_INT 2
10367: DOUBLE
10368: EQUAL
10369: IFTRUE 10373
10371: GO 10388
10373: POP
// time = 50 * 60 ; 3 :
10374: LD_ADDR_LOC 13
10378: PUSH
10379: LD_INT 50
10381: PUSH
10382: LD_INT 60
10384: MUL
10385: ST_TO_ADDR
10386: GO 10458
10388: LD_INT 3
10390: DOUBLE
10391: EQUAL
10392: IFTRUE 10396
10394: GO 10411
10396: POP
// time = 60 * 60 ; 4 :
10397: LD_ADDR_LOC 13
10401: PUSH
10402: LD_INT 60
10404: PUSH
10405: LD_INT 60
10407: MUL
10408: ST_TO_ADDR
10409: GO 10458
10411: LD_INT 4
10413: DOUBLE
10414: EQUAL
10415: IFTRUE 10419
10417: GO 10434
10419: POP
// time = 90 * 60 ; 5 :
10420: LD_ADDR_LOC 13
10424: PUSH
10425: LD_INT 90
10427: PUSH
10428: LD_INT 60
10430: MUL
10431: ST_TO_ADDR
10432: GO 10458
10434: LD_INT 5
10436: DOUBLE
10437: EQUAL
10438: IFTRUE 10442
10440: GO 10457
10442: POP
// time = 120 * 60 ; end ;
10443: LD_ADDR_LOC 13
10447: PUSH
10448: LD_INT 120
10450: PUSH
10451: LD_INT 60
10453: MUL
10454: ST_TO_ADDR
10455: GO 10458
10457: POP
// enable ( cft_03 ) ;
10458: LD_LOC 26
10462: ENABLE_MARKED
// refresh ;
10463: CALL 11277 0 0
// for stmp = 1 to 8 do
10467: LD_ADDR_LOC 31
10471: PUSH
10472: DOUBLE
10473: LD_INT 1
10475: DEC
10476: ST_TO_ADDR
10477: LD_INT 8
10479: PUSH
10480: FOR_TO
10481: IFFALSE 10850
// if mp_sides_nations_ [ stmp ] then
10483: LD_EXP 49
10487: PUSH
10488: LD_LOC 31
10492: ARRAY
10493: IFFALSE 10848
// begin if mp_sides_positions_ [ stmp ] = 1 then
10495: LD_EXP 50
10499: PUSH
10500: LD_LOC 31
10504: ARRAY
10505: PUSH
10506: LD_INT 1
10508: EQUAL
10509: IFFALSE 10523
// pos1side = stmp else
10511: LD_ADDR_EXP 44
10515: PUSH
10516: LD_LOC 31
10520: ST_TO_ADDR
10521: GO 10533
// pos2side = stmp ;
10523: LD_ADDR_EXP 45
10527: PUSH
10528: LD_LOC 31
10532: ST_TO_ADDR
// uc_side = stmp ;
10533: LD_ADDR_OWVAR 20
10537: PUSH
10538: LD_LOC 31
10542: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ stmp ] ;
10543: LD_ADDR_OWVAR 21
10547: PUSH
10548: LD_EXP 49
10552: PUSH
10553: LD_LOC 31
10557: ARRAY
10558: ST_TO_ADDR
// bc_type = b_depot ;
10559: LD_ADDR_OWVAR 42
10563: PUSH
10564: LD_INT 0
10566: ST_TO_ADDR
// bc_level = 1 ;
10567: LD_ADDR_OWVAR 43
10571: PUSH
10572: LD_INT 1
10574: ST_TO_ADDR
// createandplacebuildingxyd ( depotpositions [ mp_sides_positions_ [ stmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 2 ] , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 3 ] ) ;
10575: LD_EXP 42
10579: PUSH
10580: LD_EXP 50
10584: PUSH
10585: LD_LOC 31
10589: ARRAY
10590: ARRAY
10591: PUSH
10592: LD_INT 1
10594: ARRAY
10595: PPUSH
10596: LD_EXP 42
10600: PUSH
10601: LD_EXP 50
10605: PUSH
10606: LD_LOC 31
10610: ARRAY
10611: ARRAY
10612: PUSH
10613: LD_INT 2
10615: ARRAY
10616: PPUSH
10617: LD_EXP 42
10621: PUSH
10622: LD_EXP 50
10626: PUSH
10627: LD_LOC 31
10631: ARRAY
10632: ARRAY
10633: PUSH
10634: LD_INT 3
10636: ARRAY
10637: PPUSH
10638: CALL_OW 47
// setbattleflag ( stmp , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 2 ] , [ [ bfo_defend_bonus_human , 150 ] , [ bfo_defend_bonus_vehicle , 10 ] , [ bfo_defend_bonus_building , 0 ] , [ bfo_range , 17 ] , [ bfo_height , 100 ] ] ) ;
10642: LD_LOC 31
10646: PPUSH
10647: LD_EXP 42
10651: PUSH
10652: LD_EXP 50
10656: PUSH
10657: LD_LOC 31
10661: ARRAY
10662: ARRAY
10663: PUSH
10664: LD_INT 1
10666: ARRAY
10667: PPUSH
10668: LD_EXP 42
10672: PUSH
10673: LD_EXP 50
10677: PUSH
10678: LD_LOC 31
10682: ARRAY
10683: ARRAY
10684: PUSH
10685: LD_INT 2
10687: ARRAY
10688: PPUSH
10689: LD_INT 1
10691: PUSH
10692: LD_INT 150
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PUSH
10699: LD_INT 2
10701: PUSH
10702: LD_INT 10
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: PUSH
10709: LD_INT 3
10711: PUSH
10712: LD_INT 0
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: PUSH
10719: LD_INT 10
10721: PUSH
10722: LD_INT 17
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: PUSH
10729: LD_INT 20
10731: PUSH
10732: LD_INT 100
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: PPUSH
10746: CALL_OW 418
// cl = class_engineer ;
10750: LD_ADDR_LOC 33
10754: PUSH
10755: LD_INT 2
10757: ST_TO_ADDR
// for stmp2 = 1 to lidi do
10758: LD_ADDR_LOC 32
10762: PUSH
10763: DOUBLE
10764: LD_INT 1
10766: DEC
10767: ST_TO_ADDR
10768: LD_EXP 37
10772: PUSH
10773: FOR_TO
10774: IFFALSE 10846
// begin if stmp2 >= lidi / 2 then
10776: LD_LOC 32
10780: PUSH
10781: LD_EXP 37
10785: PUSH
10786: LD_INT 2
10788: DIVREAL
10789: GREATEREQUAL
10790: IFFALSE 10800
// cl = class_soldier ;
10792: LD_ADDR_LOC 33
10796: PUSH
10797: LD_INT 1
10799: ST_TO_ADDR
// preparehuman ( 0 , cl , 1 ) ;
10800: LD_INT 0
10802: PPUSH
10803: LD_LOC 33
10807: PPUSH
10808: LD_INT 1
10810: PPUSH
10811: CALL_OW 380
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ stmp ] ] , false ) ;
10815: CALL_OW 44
10819: PPUSH
10820: LD_EXP 43
10824: PUSH
10825: LD_EXP 50
10829: PUSH
10830: LD_LOC 31
10834: ARRAY
10835: ARRAY
10836: PPUSH
10837: LD_INT 0
10839: PPUSH
10840: CALL_OW 49
// end ;
10844: GO 10773
10846: POP
10847: POP
// end ;
10848: GO 10480
10850: POP
10851: POP
// depot1 = filterunitsinarea ( vlevo , [ [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
10852: LD_ADDR_LOC 14
10856: PUSH
10857: LD_INT 2
10859: PPUSH
10860: LD_INT 21
10862: PUSH
10863: LD_INT 3
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: PUSH
10870: LD_INT 30
10872: PUSH
10873: LD_INT 0
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: PUSH
10880: EMPTY
10881: LIST
10882: LIST
10883: PPUSH
10884: CALL_OW 70
10888: PUSH
10889: LD_INT 1
10891: ARRAY
10892: ST_TO_ADDR
// depot2 = filterunitsinarea ( vpravo , [ [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
10893: LD_ADDR_LOC 15
10897: PUSH
10898: LD_INT 3
10900: PPUSH
10901: LD_INT 21
10903: PUSH
10904: LD_INT 3
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: PUSH
10911: LD_INT 30
10913: PUSH
10914: LD_INT 0
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: PPUSH
10925: CALL_OW 70
10929: PUSH
10930: LD_INT 1
10932: ARRAY
10933: ST_TO_ADDR
// pos1base = getbase ( depot1 ) ;
10934: LD_ADDR_LOC 20
10938: PUSH
10939: LD_LOC 14
10943: PPUSH
10944: CALL_OW 274
10948: ST_TO_ADDR
// pos2base = getbase ( depot2 ) ;
10949: LD_ADDR_LOC 21
10953: PUSH
10954: LD_LOC 15
10958: PPUSH
10959: CALL_OW 274
10963: ST_TO_ADDR
// uc_side = 0 ;
10964: LD_ADDR_OWVAR 20
10968: PUSH
10969: LD_INT 0
10971: ST_TO_ADDR
// uc_nation = nation_nature ;
10972: LD_ADDR_OWVAR 21
10976: PUSH
10977: LD_INT 0
10979: ST_TO_ADDR
// for stmp = 1 to opoce do
10980: LD_ADDR_LOC 31
10984: PUSH
10985: DOUBLE
10986: LD_INT 1
10988: DEC
10989: ST_TO_ADDR
10990: LD_EXP 39
10994: PUSH
10995: FOR_TO
10996: IFFALSE 11028
// begin preparehuman ( 0 , class_apeman , 0 ) ;
10998: LD_INT 0
11000: PPUSH
11001: LD_INT 12
11003: PPUSH
11004: LD_INT 0
11006: PPUSH
11007: CALL_OW 380
// placeunitarea ( createhuman , les , false ) ;
11011: CALL_OW 44
11015: PPUSH
11016: LD_INT 4
11018: PPUSH
11019: LD_INT 0
11021: PPUSH
11022: CALL_OW 49
// end ;
11026: GO 10995
11028: POP
11029: POP
// uc_side = pos2side ;
11030: LD_ADDR_OWVAR 20
11034: PUSH
11035: LD_EXP 45
11039: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos2side ] ;
11040: LD_ADDR_OWVAR 21
11044: PUSH
11045: LD_EXP 49
11049: PUSH
11050: LD_EXP 45
11054: ARRAY
11055: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11056: LD_ADDR_OWVAR 37
11060: PUSH
11061: LD_LOC 18
11065: PUSH
11066: LD_OWVAR 21
11070: ARRAY
11071: ST_TO_ADDR
// vc_control = control_manual ;
11072: LD_ADDR_OWVAR 38
11076: PUSH
11077: LD_INT 1
11079: ST_TO_ADDR
// vc_engine = engine_siberite ;
11080: LD_ADDR_OWVAR 39
11084: PUSH
11085: LD_INT 3
11087: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
11088: LD_ADDR_OWVAR 40
11092: PUSH
11093: LD_LOC 19
11097: PUSH
11098: LD_OWVAR 21
11102: ARRAY
11103: ST_TO_ADDR
// vlajka1 = createvehicle ;
11104: LD_ADDR_LOC 16
11108: PUSH
11109: CALL_OW 45
11113: ST_TO_ADDR
// placeunitxy ( vlajka1 , 76 , 60 , false ) ;
11114: LD_LOC 16
11118: PPUSH
11119: LD_INT 76
11121: PPUSH
11122: LD_INT 60
11124: PPUSH
11125: LD_INT 0
11127: PPUSH
11128: CALL_OW 48
// uc_side = pos1side ;
11132: LD_ADDR_OWVAR 20
11136: PUSH
11137: LD_EXP 44
11141: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos1side ] ;
11142: LD_ADDR_OWVAR 21
11146: PUSH
11147: LD_EXP 49
11151: PUSH
11152: LD_EXP 44
11156: ARRAY
11157: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11158: LD_ADDR_OWVAR 37
11162: PUSH
11163: LD_LOC 18
11167: PUSH
11168: LD_OWVAR 21
11172: ARRAY
11173: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
11174: LD_ADDR_OWVAR 40
11178: PUSH
11179: LD_LOC 19
11183: PUSH
11184: LD_OWVAR 21
11188: ARRAY
11189: ST_TO_ADDR
// vlajka2 = createvehicle ;
11190: LD_ADDR_LOC 17
11194: PUSH
11195: CALL_OW 45
11199: ST_TO_ADDR
// placeunitxy ( vlajka2 , 143 , 60 , false ) ;
11200: LD_LOC 17
11204: PPUSH
11205: LD_INT 143
11207: PPUSH
11208: LD_INT 60
11210: PPUSH
11211: LD_INT 0
11213: PPUSH
11214: CALL_OW 48
// case mp_sides_positions_ [ your_side ] of 1 :
11218: LD_EXP 50
11222: PUSH
11223: LD_OWVAR 2
11227: ARRAY
11228: PUSH
11229: LD_INT 1
11231: DOUBLE
11232: EQUAL
11233: IFTRUE 11237
11235: GO 11250
11237: POP
// centernowonxy ( 44 , 60 ) ; 2 :
11238: LD_INT 44
11240: PPUSH
11241: LD_INT 60
11243: PPUSH
11244: CALL_OW 86
11248: GO 11272
11250: LD_INT 2
11252: DOUBLE
11253: EQUAL
11254: IFTRUE 11258
11256: GO 11271
11258: POP
// centernowonxy ( 175 , 60 ) ; end ;
11259: LD_INT 175
11261: PPUSH
11262: LD_INT 60
11264: PPUSH
11265: CALL_OW 86
11269: GO 11272
11271: POP
// end ;
11272: LD_VAR 0 1
11276: RET
// function refresh ; var tmp , tmp1 , tmp2 , tmp3 , tmp4 ; begin
11277: LD_INT 0
11279: PPUSH
11280: PPUSH
11281: PPUSH
11282: PPUSH
11283: PPUSH
11284: PPUSH
// tmp = time div 60 ;
11285: LD_ADDR_VAR 0 2
11289: PUSH
11290: LD_LOC 13
11294: PUSH
11295: LD_INT 60
11297: DIV
11298: ST_TO_ADDR
// if tmp < 10 then
11299: LD_VAR 0 2
11303: PUSH
11304: LD_INT 10
11306: LESS
11307: IFFALSE 11325
// tmp1 = 0 & tmp else
11309: LD_ADDR_VAR 0 3
11313: PUSH
11314: LD_STRING 0
11316: PUSH
11317: LD_VAR 0 2
11321: STR
11322: ST_TO_ADDR
11323: GO 11339
// tmp1 =  & tmp ;
11325: LD_ADDR_VAR 0 3
11329: PUSH
11330: LD_STRING 
11332: PUSH
11333: LD_VAR 0 2
11337: STR
11338: ST_TO_ADDR
// tmp = time mod 60 ;
11339: LD_ADDR_VAR 0 2
11343: PUSH
11344: LD_LOC 13
11348: PUSH
11349: LD_INT 60
11351: MOD
11352: ST_TO_ADDR
// if tmp < 10 then
11353: LD_VAR 0 2
11357: PUSH
11358: LD_INT 10
11360: LESS
11361: IFFALSE 11379
// tmp2 = 0 & tmp else
11363: LD_ADDR_VAR 0 4
11367: PUSH
11368: LD_STRING 0
11370: PUSH
11371: LD_VAR 0 2
11375: STR
11376: ST_TO_ADDR
11377: GO 11393
// tmp2 =  & tmp ;
11379: LD_ADDR_VAR 0 4
11383: PUSH
11384: LD_STRING 
11386: PUSH
11387: LD_VAR 0 2
11391: STR
11392: ST_TO_ADDR
// if left_score < 10 then
11393: LD_LOC 22
11397: PUSH
11398: LD_INT 10
11400: LESS
11401: IFFALSE 11419
// tmp3 = 0 & left_score else
11403: LD_ADDR_VAR 0 5
11407: PUSH
11408: LD_STRING 0
11410: PUSH
11411: LD_LOC 22
11415: STR
11416: ST_TO_ADDR
11417: GO 11433
// tmp3 =  & left_score ;
11419: LD_ADDR_VAR 0 5
11423: PUSH
11424: LD_STRING 
11426: PUSH
11427: LD_LOC 22
11431: STR
11432: ST_TO_ADDR
// if right_score < 10 then
11433: LD_LOC 23
11437: PUSH
11438: LD_INT 10
11440: LESS
11441: IFFALSE 11459
// tmp4 = 0 & right_score else
11443: LD_ADDR_VAR 0 6
11447: PUSH
11448: LD_STRING 0
11450: PUSH
11451: LD_LOC 23
11455: STR
11456: ST_TO_ADDR
11457: GO 11473
// tmp4 =  & right_score ;
11459: LD_ADDR_VAR 0 6
11463: PUSH
11464: LD_STRING 
11466: PUSH
11467: LD_LOC 23
11471: STR
11472: ST_TO_ADDR
// display_strings = [ Score:  & tmp3 &  to  & tmp4 , Time left:  & tmp1 & : & tmp2 ] ;
11473: LD_ADDR_OWVAR 47
11477: PUSH
11478: LD_STRING Score: 
11480: PUSH
11481: LD_VAR 0 5
11485: STR
11486: PUSH
11487: LD_STRING  to 
11489: STR
11490: PUSH
11491: LD_VAR 0 6
11495: STR
11496: PUSH
11497: LD_STRING Time left: 
11499: PUSH
11500: LD_VAR 0 3
11504: STR
11505: PUSH
11506: LD_STRING :
11508: STR
11509: PUSH
11510: LD_VAR 0 4
11514: STR
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: ST_TO_ADDR
// end ;
11520: LD_VAR 0 1
11524: RET
// every 0 0$1 marked 03 do
11525: GO 11527
11527: DISABLE
// begin time = time - 1 ;
11528: LD_ADDR_LOC 13
11532: PUSH
11533: LD_LOC 13
11537: PUSH
11538: LD_INT 1
11540: MINUS
11541: ST_TO_ADDR
// refresh ;
11542: CALL 11277 0 0
// if not time then
11546: LD_LOC 13
11550: NOT
11551: IFFALSE 11617
// if mp_sides_positions_ [ your_side ] = 1 then
11553: LD_EXP 50
11557: PUSH
11558: LD_OWVAR 2
11562: ARRAY
11563: PUSH
11564: LD_INT 1
11566: EQUAL
11567: IFFALSE 11593
// if left_score >= right_score then
11569: LD_LOC 22
11573: PUSH
11574: LD_LOC 23
11578: GREATEREQUAL
11579: IFFALSE 11587
// youwininmultiplayer else
11581: CALL_OW 106
11585: GO 11591
// youlostinmultiplayer else
11587: CALL_OW 107
11591: GO 11615
// if right_score >= left_score then
11593: LD_LOC 23
11597: PUSH
11598: LD_LOC 22
11602: GREATEREQUAL
11603: IFFALSE 11611
// youwininmultiplayer else
11605: CALL_OW 106
11609: GO 11615
// youlostinmultiplayer else
11611: CALL_OW 107
11615: GO 11618
// enable ;
11617: ENABLE
// end ;
11618: END
// every 0 0$10 marked 19 do
11619: GO 11621
11621: DISABLE
// begin cper = cper - 0 0$10 ;
11622: LD_ADDR_EXP 40
11626: PUSH
11627: LD_EXP 40
11631: PUSH
11632: LD_INT 350
11634: MINUS
11635: ST_TO_ADDR
// if cper = 0 then
11636: LD_EXP 40
11640: PUSH
11641: LD_INT 0
11643: EQUAL
11644: IFFALSE 11682
// begin createcratesarea ( 5 , vlevoex , true ) ;
11646: LD_INT 5
11648: PPUSH
11649: LD_INT 5
11651: PPUSH
11652: LD_INT 1
11654: PPUSH
11655: CALL_OW 55
// createcratesarea ( 5 , vpravoex , true ) ;
11659: LD_INT 5
11661: PPUSH
11662: LD_INT 6
11664: PPUSH
11665: LD_INT 1
11667: PPUSH
11668: CALL_OW 55
// cper = cperiode ;
11672: LD_ADDR_EXP 40
11676: PUSH
11677: LD_EXP 41
11681: ST_TO_ADDR
// end ; enable ;
11682: ENABLE
// end ;
11683: END
// every 5 trigger getlives ( depot1 ) < 500 marked 01 do
11684: LD_LOC 14
11688: PPUSH
11689: CALL_OW 256
11693: PUSH
11694: LD_INT 500
11696: LESS
11697: IFFALSE 11715
11699: GO 11701
11701: DISABLE
// begin setlives ( depot1 , 750 ) ;
11702: LD_LOC 14
11706: PPUSH
11707: LD_INT 750
11709: PPUSH
11710: CALL_OW 234
// enable ;
11714: ENABLE
// end ;
11715: END
// every 5 trigger getlives ( depot2 ) < 500 marked 02 do
11716: LD_LOC 15
11720: PPUSH
11721: CALL_OW 256
11725: PUSH
11726: LD_INT 500
11728: LESS
11729: IFFALSE 11747
11731: GO 11733
11733: DISABLE
// begin setlives ( depot2 , 750 ) ;
11734: LD_LOC 15
11738: PPUSH
11739: LD_INT 750
11741: PPUSH
11742: CALL_OW 234
// enable ;
11746: ENABLE
// end ;
11747: END
// on unitdestroyed ( un ) do var radius ;
11748: LD_INT 0
11750: PPUSH
// begin if GetClass ( un ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
11751: LD_VAR 0 1
11755: PPUSH
11756: CALL_OW 257
11760: PUSH
11761: LD_INT 12
11763: PUSH
11764: LD_INT 15
11766: PUSH
11767: LD_INT 17
11769: PUSH
11770: LD_INT 16
11772: PUSH
11773: EMPTY
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: IN
11779: PUSH
11780: LD_VAR 0 1
11784: PPUSH
11785: CALL_OW 263
11789: PUSH
11790: LD_INT 5
11792: EQUAL
11793: OR
11794: IFFALSE 11805
// ApeKilled ( un ) ;
11796: LD_VAR 0 1
11800: PPUSH
11801: CALL 8160 0 1
// if mp_game_type <> 1 then
11805: LD_OWVAR 6
11809: PUSH
11810: LD_INT 1
11812: NONEQUAL
11813: IFFALSE 11817
// exit ;
11815: GO 12111
// if un = vlajka1 then
11817: LD_VAR 0 1
11821: PUSH
11822: LD_LOC 16
11826: EQUAL
11827: IFFALSE 11965
// begin uc_side = pos2side ;
11829: LD_ADDR_OWVAR 20
11833: PUSH
11834: LD_EXP 45
11838: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos2side ] ;
11839: LD_ADDR_OWVAR 21
11843: PUSH
11844: LD_EXP 49
11848: PUSH
11849: LD_EXP 45
11853: ARRAY
11854: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11855: LD_ADDR_OWVAR 37
11859: PUSH
11860: LD_LOC 18
11864: PUSH
11865: LD_OWVAR 21
11869: ARRAY
11870: ST_TO_ADDR
// vc_control = control_manual ;
11871: LD_ADDR_OWVAR 38
11875: PUSH
11876: LD_INT 1
11878: ST_TO_ADDR
// vc_engine = engine_siberite ;
11879: LD_ADDR_OWVAR 39
11883: PUSH
11884: LD_INT 3
11886: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
11887: LD_ADDR_OWVAR 40
11891: PUSH
11892: LD_LOC 19
11896: PUSH
11897: LD_OWVAR 21
11901: ARRAY
11902: ST_TO_ADDR
// vlajka1 = createvehicle ;
11903: LD_ADDR_LOC 16
11907: PUSH
11908: CALL_OW 45
11912: ST_TO_ADDR
// radius = 2 ;
11913: LD_ADDR_VAR 0 2
11917: PUSH
11918: LD_INT 2
11920: ST_TO_ADDR
// while not placeunitxyr ( vlajka1 , 76 , 60 , radius , false ) do
11921: LD_LOC 16
11925: PPUSH
11926: LD_INT 76
11928: PPUSH
11929: LD_INT 60
11931: PPUSH
11932: LD_VAR 0 2
11936: PPUSH
11937: LD_INT 0
11939: PPUSH
11940: CALL_OW 50
11944: NOT
11945: IFFALSE 11963
// radius = radius + 1 ;
11947: LD_ADDR_VAR 0 2
11951: PUSH
11952: LD_VAR 0 2
11956: PUSH
11957: LD_INT 1
11959: PLUS
11960: ST_TO_ADDR
11961: GO 11921
// end else
11963: GO 12111
// if un = vlajka2 then
11965: LD_VAR 0 1
11969: PUSH
11970: LD_LOC 17
11974: EQUAL
11975: IFFALSE 12111
// begin uc_side = pos1side ;
11977: LD_ADDR_OWVAR 20
11981: PUSH
11982: LD_EXP 44
11986: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos1side ] ;
11987: LD_ADDR_OWVAR 21
11991: PUSH
11992: LD_EXP 49
11996: PUSH
11997: LD_EXP 44
12001: ARRAY
12002: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
12003: LD_ADDR_OWVAR 37
12007: PUSH
12008: LD_LOC 18
12012: PUSH
12013: LD_OWVAR 21
12017: ARRAY
12018: ST_TO_ADDR
// vc_control = control_manual ;
12019: LD_ADDR_OWVAR 38
12023: PUSH
12024: LD_INT 1
12026: ST_TO_ADDR
// vc_engine = engine_siberite ;
12027: LD_ADDR_OWVAR 39
12031: PUSH
12032: LD_INT 3
12034: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
12035: LD_ADDR_OWVAR 40
12039: PUSH
12040: LD_LOC 19
12044: PUSH
12045: LD_OWVAR 21
12049: ARRAY
12050: ST_TO_ADDR
// vlajka2 = createvehicle ;
12051: LD_ADDR_LOC 17
12055: PUSH
12056: CALL_OW 45
12060: ST_TO_ADDR
// radius = 2 ;
12061: LD_ADDR_VAR 0 2
12065: PUSH
12066: LD_INT 2
12068: ST_TO_ADDR
// while not placeunitxyr ( vlajka2 , 143 , 60 , radius , false ) do
12069: LD_LOC 17
12073: PPUSH
12074: LD_INT 143
12076: PPUSH
12077: LD_INT 60
12079: PPUSH
12080: LD_VAR 0 2
12084: PPUSH
12085: LD_INT 0
12087: PPUSH
12088: CALL_OW 50
12092: NOT
12093: IFFALSE 12111
// radius = radius + 1 ;
12095: LD_ADDR_VAR 0 2
12099: PUSH
12100: LD_VAR 0 2
12104: PUSH
12105: LD_INT 1
12107: PLUS
12108: ST_TO_ADDR
12109: GO 12069
// end ; end ;
12111: PPOPN 2
12113: END
// on vehiclecaptured ( vehnew , vehold , origside , hum ) marked 05 do var radius ;
12114: LD_INT 0
12116: PPUSH
// if ( vehold = vlajka1 ) then
12117: LD_VAR 0 2
12121: PUSH
12122: LD_LOC 16
12126: EQUAL
12127: IFFALSE 12280
// begin vlajka1 = vehnew ;
12129: LD_ADDR_LOC 16
12133: PUSH
12134: LD_VAR 0 1
12138: ST_TO_ADDR
// comexitvehicle ( vlajka1 ) ;
12139: LD_LOC 16
12143: PPUSH
12144: CALL_OW 121
// while isdrivenby ( vlajka1 ) do
12148: LD_LOC 16
12152: PPUSH
12153: CALL_OW 311
12157: IFFALSE 12168
// wait ( 2 ) ;
12159: LD_INT 2
12161: PPUSH
12162: CALL_OW 67
12166: GO 12148
// if getdistunitxy ( vlajka1 , 76 , 60 ) > 4 then
12168: LD_LOC 16
12172: PPUSH
12173: LD_INT 76
12175: PPUSH
12176: LD_INT 60
12178: PPUSH
12179: CALL_OW 297
12183: PUSH
12184: LD_INT 4
12186: GREATER
12187: IFFALSE 12264
// begin removeunit ( vlajka1 ) ;
12189: LD_LOC 16
12193: PPUSH
12194: CALL_OW 64
// setside ( vlajka1 , origside ) ;
12198: LD_LOC 16
12202: PPUSH
12203: LD_VAR 0 3
12207: PPUSH
12208: CALL_OW 235
// radius = 2 ;
12212: LD_ADDR_VAR 0 5
12216: PUSH
12217: LD_INT 2
12219: ST_TO_ADDR
// while not placeunitxyr ( vlajka1 , 76 , 60 , radius , false ) do
12220: LD_LOC 16
12224: PPUSH
12225: LD_INT 76
12227: PPUSH
12228: LD_INT 60
12230: PPUSH
12231: LD_VAR 0 5
12235: PPUSH
12236: LD_INT 0
12238: PPUSH
12239: CALL_OW 50
12243: NOT
12244: IFFALSE 12262
// radius = radius + 1 ;
12246: LD_ADDR_VAR 0 5
12250: PUSH
12251: LD_VAR 0 5
12255: PUSH
12256: LD_INT 1
12258: PLUS
12259: ST_TO_ADDR
12260: GO 12220
// end else
12262: GO 12278
// setside ( vlajka1 , origside ) ;
12264: LD_LOC 16
12268: PPUSH
12269: LD_VAR 0 3
12273: PPUSH
12274: CALL_OW 235
// end else
12278: GO 12441
// if ( vehold = vlajka2 ) then
12280: LD_VAR 0 2
12284: PUSH
12285: LD_LOC 17
12289: EQUAL
12290: IFFALSE 12441
// begin vlajka2 = vehnew ;
12292: LD_ADDR_LOC 17
12296: PUSH
12297: LD_VAR 0 1
12301: ST_TO_ADDR
// comexitvehicle ( vlajka2 ) ;
12302: LD_LOC 17
12306: PPUSH
12307: CALL_OW 121
// while isdrivenby ( vlajka2 ) do
12311: LD_LOC 17
12315: PPUSH
12316: CALL_OW 311
12320: IFFALSE 12331
// wait ( 2 ) ;
12322: LD_INT 2
12324: PPUSH
12325: CALL_OW 67
12329: GO 12311
// if getdistunitxy ( vlajka2 , 143 , 60 ) > 4 then
12331: LD_LOC 17
12335: PPUSH
12336: LD_INT 143
12338: PPUSH
12339: LD_INT 60
12341: PPUSH
12342: CALL_OW 297
12346: PUSH
12347: LD_INT 4
12349: GREATER
12350: IFFALSE 12427
// begin removeunit ( vlajka2 ) ;
12352: LD_LOC 17
12356: PPUSH
12357: CALL_OW 64
// setside ( vlajka2 , origside ) ;
12361: LD_LOC 17
12365: PPUSH
12366: LD_VAR 0 3
12370: PPUSH
12371: CALL_OW 235
// radius = 2 ;
12375: LD_ADDR_VAR 0 5
12379: PUSH
12380: LD_INT 2
12382: ST_TO_ADDR
// while not placeunitxyr ( vlajka2 , 143 , 60 , radius , false ) do
12383: LD_LOC 17
12387: PPUSH
12388: LD_INT 143
12390: PPUSH
12391: LD_INT 60
12393: PPUSH
12394: LD_VAR 0 5
12398: PPUSH
12399: LD_INT 0
12401: PPUSH
12402: CALL_OW 50
12406: NOT
12407: IFFALSE 12425
// radius = radius + 1 ;
12409: LD_ADDR_VAR 0 5
12413: PUSH
12414: LD_VAR 0 5
12418: PUSH
12419: LD_INT 1
12421: PLUS
12422: ST_TO_ADDR
12423: GO 12383
// end else
12425: GO 12441
// setside ( vlajka2 , origside ) ;
12427: LD_LOC 17
12431: PPUSH
12432: LD_VAR 0 3
12436: PPUSH
12437: CALL_OW 235
// end ;
12441: PPOPN 5
12443: END
// every 10 + 1 trigger getdistunitxy ( vlajka1 , 185 , 60 ) < 6 marked 06 do var radius , tmp ;
12444: LD_LOC 16
12448: PPUSH
12449: LD_INT 185
12451: PPUSH
12452: LD_INT 60
12454: PPUSH
12455: CALL_OW 297
12459: PUSH
12460: LD_INT 6
12462: LESS
12463: IFFALSE 12667
12465: GO 12467
12467: DISABLE
12468: LD_INT 0
12470: PPUSH
12471: PPUSH
// begin right_score = right_score + 1 ;
12472: LD_ADDR_LOC 23
12476: PUSH
12477: LD_LOC 23
12481: PUSH
12482: LD_INT 1
12484: PLUS
12485: ST_TO_ADDR
// refresh ;
12486: CALL 11277 0 0
// comexitvehicle ( vlajka1 ) ;
12490: LD_LOC 16
12494: PPUSH
12495: CALL_OW 121
// while isdrivenby ( vlajka1 ) do
12499: LD_LOC 16
12503: PPUSH
12504: CALL_OW 311
12508: IFFALSE 12519
// wait ( 2 ) ;
12510: LD_INT 2
12512: PPUSH
12513: CALL_OW 67
12517: GO 12499
// removeunit ( vlajka1 ) ;
12519: LD_LOC 16
12523: PPUSH
12524: CALL_OW 64
// for radius in [ mat_cans , mat_oil , mat_siberit ] do
12528: LD_ADDR_VAR 0 1
12532: PUSH
12533: LD_INT 1
12535: PUSH
12536: LD_INT 2
12538: PUSH
12539: LD_INT 3
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: LIST
12546: PUSH
12547: FOR_IN
12548: IFFALSE 12614
// begin tmp = getcargo ( vlajka1 , radius ) ;
12550: LD_ADDR_VAR 0 2
12554: PUSH
12555: LD_LOC 16
12559: PPUSH
12560: LD_VAR 0 1
12564: PPUSH
12565: CALL_OW 289
12569: ST_TO_ADDR
// if tmp then
12570: LD_VAR 0 2
12574: IFFALSE 12612
// begin addresourcetype ( pos2base , radius , tmp ) ;
12576: LD_LOC 21
12580: PPUSH
12581: LD_VAR 0 1
12585: PPUSH
12586: LD_VAR 0 2
12590: PPUSH
12591: CALL_OW 276
// setcargo ( vlajka1 , radius , 0 ) ;
12595: LD_LOC 16
12599: PPUSH
12600: LD_VAR 0 1
12604: PPUSH
12605: LD_INT 0
12607: PPUSH
12608: CALL_OW 290
// end ; end ;
12612: GO 12547
12614: POP
12615: POP
// radius = 2 ;
12616: LD_ADDR_VAR 0 1
12620: PUSH
12621: LD_INT 2
12623: ST_TO_ADDR
// while not placeunitxyr ( vlajka1 , 76 , 60 , radius , false ) do
12624: LD_LOC 16
12628: PPUSH
12629: LD_INT 76
12631: PPUSH
12632: LD_INT 60
12634: PPUSH
12635: LD_VAR 0 1
12639: PPUSH
12640: LD_INT 0
12642: PPUSH
12643: CALL_OW 50
12647: NOT
12648: IFFALSE 12666
// radius = radius + 1 ;
12650: LD_ADDR_VAR 0 1
12654: PUSH
12655: LD_VAR 0 1
12659: PUSH
12660: LD_INT 1
12662: PLUS
12663: ST_TO_ADDR
12664: GO 12624
// enable ;
12666: ENABLE
// end ;
12667: PPOPN 2
12669: END
// every 10 trigger getdistunitxy ( vlajka2 , 34 , 60 ) < 6 marked 07 do var radius , tmp ;
12670: LD_LOC 17
12674: PPUSH
12675: LD_INT 34
12677: PPUSH
12678: LD_INT 60
12680: PPUSH
12681: CALL_OW 297
12685: PUSH
12686: LD_INT 6
12688: LESS
12689: IFFALSE 12893
12691: GO 12693
12693: DISABLE
12694: LD_INT 0
12696: PPUSH
12697: PPUSH
// begin left_score = left_score + 1 ;
12698: LD_ADDR_LOC 22
12702: PUSH
12703: LD_LOC 22
12707: PUSH
12708: LD_INT 1
12710: PLUS
12711: ST_TO_ADDR
// refresh ;
12712: CALL 11277 0 0
// comexitvehicle ( vlajka2 ) ;
12716: LD_LOC 17
12720: PPUSH
12721: CALL_OW 121
// while isdrivenby ( vlajka2 ) do
12725: LD_LOC 17
12729: PPUSH
12730: CALL_OW 311
12734: IFFALSE 12745
// wait ( 2 ) ;
12736: LD_INT 2
12738: PPUSH
12739: CALL_OW 67
12743: GO 12725
// removeunit ( vlajka2 ) ;
12745: LD_LOC 17
12749: PPUSH
12750: CALL_OW 64
// for radius in [ mat_cans , mat_oil , mat_siberit ] do
12754: LD_ADDR_VAR 0 1
12758: PUSH
12759: LD_INT 1
12761: PUSH
12762: LD_INT 2
12764: PUSH
12765: LD_INT 3
12767: PUSH
12768: EMPTY
12769: LIST
12770: LIST
12771: LIST
12772: PUSH
12773: FOR_IN
12774: IFFALSE 12840
// begin tmp = getcargo ( vlajka2 , radius ) ;
12776: LD_ADDR_VAR 0 2
12780: PUSH
12781: LD_LOC 17
12785: PPUSH
12786: LD_VAR 0 1
12790: PPUSH
12791: CALL_OW 289
12795: ST_TO_ADDR
// if tmp then
12796: LD_VAR 0 2
12800: IFFALSE 12838
// begin addresourcetype ( pos1base , radius , tmp ) ;
12802: LD_LOC 20
12806: PPUSH
12807: LD_VAR 0 1
12811: PPUSH
12812: LD_VAR 0 2
12816: PPUSH
12817: CALL_OW 276
// setcargo ( vlajka2 , radius , 0 ) ;
12821: LD_LOC 17
12825: PPUSH
12826: LD_VAR 0 1
12830: PPUSH
12831: LD_INT 0
12833: PPUSH
12834: CALL_OW 290
// end ; end ;
12838: GO 12773
12840: POP
12841: POP
// radius = 2 ;
12842: LD_ADDR_VAR 0 1
12846: PUSH
12847: LD_INT 2
12849: ST_TO_ADDR
// while not placeunitxyr ( vlajka2 , 143 , 60 , radius , false ) do
12850: LD_LOC 17
12854: PPUSH
12855: LD_INT 143
12857: PPUSH
12858: LD_INT 60
12860: PPUSH
12861: LD_VAR 0 1
12865: PPUSH
12866: LD_INT 0
12868: PPUSH
12869: CALL_OW 50
12873: NOT
12874: IFFALSE 12892
// radius = radius + 1 ;
12876: LD_ADDR_VAR 0 1
12880: PUSH
12881: LD_VAR 0 1
12885: PUSH
12886: LD_INT 1
12888: PLUS
12889: ST_TO_ADDR
12890: GO 12850
// enable ;
12892: ENABLE
// end ; end_of_file
12893: PPOPN 2
12895: END
// var zakladna , skilly , start_res , extra_oil , extra_sib , zakl_plus , batt_fl , sib_det , people_resp , siberitofka ; var fortpos , areasdiff , directions ; var resp_cnt1 , resp_cnt2 ; export function other_game ; var tmp , tmp2 , tmp3 , cl ; begin
12896: LD_INT 0
12898: PPUSH
12899: PPUSH
12900: PPUSH
12901: PPUSH
12902: PPUSH
// ctf = false ;
12903: LD_ADDR_EXP 47
12907: PUSH
12908: LD_INT 0
12910: ST_TO_ADDR
// resp_cnt1 = 0 ;
12911: LD_ADDR_LOC 47
12915: PUSH
12916: LD_INT 0
12918: ST_TO_ADDR
// resp_cnt2 = 0 ;
12919: LD_ADDR_LOC 48
12923: PUSH
12924: LD_INT 0
12926: ST_TO_ADDR
// enable ( nonctf_13 ) ;
12927: LD_EXP 55
12931: ENABLE_MARKED
// for tmp = 1 to 8 do
12932: LD_ADDR_VAR 0 2
12936: PUSH
12937: DOUBLE
12938: LD_INT 1
12940: DEC
12941: ST_TO_ADDR
12942: LD_INT 8
12944: PUSH
12945: FOR_TO
12946: IFFALSE 13007
// begin setrestrict ( b_depot , tmp , state_enabled ) ;
12948: LD_INT 0
12950: PPUSH
12951: LD_VAR 0 2
12955: PPUSH
12956: LD_INT 1
12958: PPUSH
12959: CALL_OW 324
// if sib_det then
12963: LD_LOC 41
12967: IFFALSE 12984
// settech ( tech_sibdet , tmp , state_researched ) ;
12969: LD_INT 20
12971: PPUSH
12972: LD_VAR 0 2
12976: PPUSH
12977: LD_INT 2
12979: PPUSH
12980: CALL_OW 322
// if siberitofka then
12984: LD_LOC 43
12988: IFFALSE 13005
// settech ( tech_sibfiss , tmp , state_enabled ) ;
12990: LD_INT 25
12992: PPUSH
12993: LD_VAR 0 2
12997: PPUSH
12998: LD_INT 1
13000: PPUSH
13001: CALL_OW 322
// end ;
13005: GO 12945
13007: POP
13008: POP
// if multiplayer then
13009: LD_OWVAR 4
13013: IFFALSE 13186
// begin zakladna = getmultiplayersetting ( 0 ) ;
13015: LD_ADDR_LOC 34
13019: PUSH
13020: LD_INT 0
13022: PPUSH
13023: CALL_OW 426
13027: ST_TO_ADDR
// lidi = getmultiplayersetting ( 1 ) ;
13028: LD_ADDR_EXP 37
13032: PUSH
13033: LD_INT 1
13035: PPUSH
13036: CALL_OW 426
13040: ST_TO_ADDR
// skilly = getmultiplayersetting ( 2 ) ;
13041: LD_ADDR_LOC 35
13045: PUSH
13046: LD_INT 2
13048: PPUSH
13049: CALL_OW 426
13053: ST_TO_ADDR
// start_res = getmultiplayersetting ( 3 ) ;
13054: LD_ADDR_LOC 36
13058: PUSH
13059: LD_INT 3
13061: PPUSH
13062: CALL_OW 426
13066: ST_TO_ADDR
// krabice = getmultiplayersetting ( 4 ) ;
13067: LD_ADDR_EXP 38
13071: PUSH
13072: LD_INT 4
13074: PPUSH
13075: CALL_OW 426
13079: ST_TO_ADDR
// extra_oil = getmultiplayersetting ( 5 ) ;
13080: LD_ADDR_LOC 37
13084: PUSH
13085: LD_INT 5
13087: PPUSH
13088: CALL_OW 426
13092: ST_TO_ADDR
// extra_sib = getmultiplayersetting ( 6 ) ;
13093: LD_ADDR_LOC 38
13097: PUSH
13098: LD_INT 6
13100: PPUSH
13101: CALL_OW 426
13105: ST_TO_ADDR
// zakl_plus = getmultiplayersetting ( 7 ) ;
13106: LD_ADDR_LOC 39
13110: PUSH
13111: LD_INT 7
13113: PPUSH
13114: CALL_OW 426
13118: ST_TO_ADDR
// batt_fl = getmultiplayersetting ( 11 ) ;
13119: LD_ADDR_LOC 40
13123: PUSH
13124: LD_INT 11
13126: PPUSH
13127: CALL_OW 426
13131: ST_TO_ADDR
// sib_det = getmultiplayersetting ( 12 ) ;
13132: LD_ADDR_LOC 41
13136: PUSH
13137: LD_INT 12
13139: PPUSH
13140: CALL_OW 426
13144: ST_TO_ADDR
// opoce = getmultiplayersetting ( 13 ) ;
13145: LD_ADDR_EXP 39
13149: PUSH
13150: LD_INT 13
13152: PPUSH
13153: CALL_OW 426
13157: ST_TO_ADDR
// people_resp = getmultiplayersetting ( 14 ) ;
13158: LD_ADDR_LOC 42
13162: PUSH
13163: LD_INT 14
13165: PPUSH
13166: CALL_OW 426
13170: ST_TO_ADDR
// siberitofka = getmultiplayersetting ( 15 ) ;
13171: LD_ADDR_LOC 43
13175: PUSH
13176: LD_INT 15
13178: PPUSH
13179: CALL_OW 426
13183: ST_TO_ADDR
// end else
13184: GO 13290
// begin zakladna = 1 ;
13186: LD_ADDR_LOC 34
13190: PUSH
13191: LD_INT 1
13193: ST_TO_ADDR
// lidi = 1 ;
13194: LD_ADDR_EXP 37
13198: PUSH
13199: LD_INT 1
13201: ST_TO_ADDR
// skilly = 1 ;
13202: LD_ADDR_LOC 35
13206: PUSH
13207: LD_INT 1
13209: ST_TO_ADDR
// start_res = 2 ;
13210: LD_ADDR_LOC 36
13214: PUSH
13215: LD_INT 2
13217: ST_TO_ADDR
// krabice = 1 ;
13218: LD_ADDR_EXP 38
13222: PUSH
13223: LD_INT 1
13225: ST_TO_ADDR
// extra_oil = 1 ;
13226: LD_ADDR_LOC 37
13230: PUSH
13231: LD_INT 1
13233: ST_TO_ADDR
// extra_sib = 1 ;
13234: LD_ADDR_LOC 38
13238: PUSH
13239: LD_INT 1
13241: ST_TO_ADDR
// zakl_plus = 2 ;
13242: LD_ADDR_LOC 39
13246: PUSH
13247: LD_INT 2
13249: ST_TO_ADDR
// batt_fl = 0 ;
13250: LD_ADDR_LOC 40
13254: PUSH
13255: LD_INT 0
13257: ST_TO_ADDR
// sib_det = 0 ;
13258: LD_ADDR_LOC 41
13262: PUSH
13263: LD_INT 0
13265: ST_TO_ADDR
// opoce = 3 ;
13266: LD_ADDR_EXP 39
13270: PUSH
13271: LD_INT 3
13273: ST_TO_ADDR
// people_resp = 0 ;
13274: LD_ADDR_LOC 42
13278: PUSH
13279: LD_INT 0
13281: ST_TO_ADDR
// siberitofka = 0 ;
13282: LD_ADDR_LOC 43
13286: PUSH
13287: LD_INT 0
13289: ST_TO_ADDR
// end ; if people_resp then
13290: LD_LOC 42
13294: IFFALSE 13311
// begin enable ( nonctf_10 ) ;
13296: LD_EXP 52
13300: ENABLE_MARKED
// enable ( nonctf_11 ) ;
13301: LD_EXP 53
13305: ENABLE_MARKED
// enable ( nonctf_12 ) ;
13306: LD_EXP 54
13310: ENABLE_MARKED
// end ; if people_resp = 1 then
13311: LD_LOC 42
13315: PUSH
13316: LD_INT 1
13318: EQUAL
13319: IFFALSE 13329
// people_resp = 3 ;
13321: LD_ADDR_LOC 42
13325: PUSH
13326: LD_INT 3
13328: ST_TO_ADDR
// if people_resp = 2 then
13329: LD_LOC 42
13333: PUSH
13334: LD_INT 2
13336: EQUAL
13337: IFFALSE 13347
// people_resp = 1 ;
13339: LD_ADDR_LOC 42
13343: PUSH
13344: LD_INT 1
13346: ST_TO_ADDR
// case lidi of 0 :
13347: LD_EXP 37
13351: PUSH
13352: LD_INT 0
13354: DOUBLE
13355: EQUAL
13356: IFTRUE 13360
13358: GO 13371
13360: POP
// lidi = 9 ; 1 :
13361: LD_ADDR_EXP 37
13365: PUSH
13366: LD_INT 9
13368: ST_TO_ADDR
13369: GO 13448
13371: LD_INT 1
13373: DOUBLE
13374: EQUAL
13375: IFTRUE 13379
13377: GO 13390
13379: POP
// lidi = 13 ; 2 :
13380: LD_ADDR_EXP 37
13384: PUSH
13385: LD_INT 13
13387: ST_TO_ADDR
13388: GO 13448
13390: LD_INT 2
13392: DOUBLE
13393: EQUAL
13394: IFTRUE 13398
13396: GO 13409
13398: POP
// lidi = 19 ; 3 :
13399: LD_ADDR_EXP 37
13403: PUSH
13404: LD_INT 19
13406: ST_TO_ADDR
13407: GO 13448
13409: LD_INT 3
13411: DOUBLE
13412: EQUAL
13413: IFTRUE 13417
13415: GO 13428
13417: POP
// lidi = 23 ; 4 :
13418: LD_ADDR_EXP 37
13422: PUSH
13423: LD_INT 23
13425: ST_TO_ADDR
13426: GO 13448
13428: LD_INT 4
13430: DOUBLE
13431: EQUAL
13432: IFTRUE 13436
13434: GO 13447
13436: POP
// lidi = 29 ; end ;
13437: LD_ADDR_EXP 37
13441: PUSH
13442: LD_INT 29
13444: ST_TO_ADDR
13445: GO 13448
13447: POP
// skilly = skilly + 1 ;
13448: LD_ADDR_LOC 35
13452: PUSH
13453: LD_LOC 35
13457: PUSH
13458: LD_INT 1
13460: PLUS
13461: ST_TO_ADDR
// case start_res of 0 :
13462: LD_LOC 36
13466: PUSH
13467: LD_INT 0
13469: DOUBLE
13470: EQUAL
13471: IFTRUE 13475
13473: GO 13486
13475: POP
// start_res = 0 ; 1 :
13476: LD_ADDR_LOC 36
13480: PUSH
13481: LD_INT 0
13483: ST_TO_ADDR
13484: GO 13544
13486: LD_INT 1
13488: DOUBLE
13489: EQUAL
13490: IFTRUE 13494
13492: GO 13505
13494: POP
// start_res = 50 ; 2 :
13495: LD_ADDR_LOC 36
13499: PUSH
13500: LD_INT 50
13502: ST_TO_ADDR
13503: GO 13544
13505: LD_INT 2
13507: DOUBLE
13508: EQUAL
13509: IFTRUE 13513
13511: GO 13524
13513: POP
// start_res = 100 ; 3 :
13514: LD_ADDR_LOC 36
13518: PUSH
13519: LD_INT 100
13521: ST_TO_ADDR
13522: GO 13544
13524: LD_INT 3
13526: DOUBLE
13527: EQUAL
13528: IFTRUE 13532
13530: GO 13543
13532: POP
// start_res = 200 ; end ;
13533: LD_ADDR_LOC 36
13537: PUSH
13538: LD_INT 200
13540: ST_TO_ADDR
13541: GO 13544
13543: POP
// case krabice of 0 :
13544: LD_EXP 38
13548: PUSH
13549: LD_INT 0
13551: DOUBLE
13552: EQUAL
13553: IFTRUE 13557
13555: GO 13568
13557: POP
// cperiode = 1 1$30 ; 1 :
13558: LD_ADDR_EXP 41
13562: PUSH
13563: LD_INT 3150
13565: ST_TO_ADDR
13566: GO 13607
13568: LD_INT 1
13570: DOUBLE
13571: EQUAL
13572: IFTRUE 13576
13574: GO 13587
13576: POP
// cperiode = 1 1$00 ; 2 :
13577: LD_ADDR_EXP 41
13581: PUSH
13582: LD_INT 2100
13584: ST_TO_ADDR
13585: GO 13607
13587: LD_INT 2
13589: DOUBLE
13590: EQUAL
13591: IFTRUE 13595
13593: GO 13606
13595: POP
// cperiode = 0 0$30 ; end ;
13596: LD_ADDR_EXP 41
13600: PUSH
13601: LD_INT 1050
13603: ST_TO_ADDR
13604: GO 13607
13606: POP
// case opoce of 0 :
13607: LD_EXP 39
13611: PUSH
13612: LD_INT 0
13614: DOUBLE
13615: EQUAL
13616: IFTRUE 13620
13618: GO 13631
13620: POP
// opoce = 0 ; 1 :
13621: LD_ADDR_EXP 39
13625: PUSH
13626: LD_INT 0
13628: ST_TO_ADDR
13629: GO 13746
13631: LD_INT 1
13633: DOUBLE
13634: EQUAL
13635: IFTRUE 13639
13637: GO 13650
13639: POP
// opoce = 3 ; 2 :
13640: LD_ADDR_EXP 39
13644: PUSH
13645: LD_INT 3
13647: ST_TO_ADDR
13648: GO 13746
13650: LD_INT 2
13652: DOUBLE
13653: EQUAL
13654: IFTRUE 13658
13656: GO 13669
13658: POP
// opoce = 7 ; 3 :
13659: LD_ADDR_EXP 39
13663: PUSH
13664: LD_INT 7
13666: ST_TO_ADDR
13667: GO 13746
13669: LD_INT 3
13671: DOUBLE
13672: EQUAL
13673: IFTRUE 13677
13675: GO 13688
13677: POP
// opoce = 11 ; 4 :
13678: LD_ADDR_EXP 39
13682: PUSH
13683: LD_INT 11
13685: ST_TO_ADDR
13686: GO 13746
13688: LD_INT 4
13690: DOUBLE
13691: EQUAL
13692: IFTRUE 13696
13694: GO 13707
13696: POP
// opoce = 15 ; 5 :
13697: LD_ADDR_EXP 39
13701: PUSH
13702: LD_INT 15
13704: ST_TO_ADDR
13705: GO 13746
13707: LD_INT 5
13709: DOUBLE
13710: EQUAL
13711: IFTRUE 13715
13713: GO 13726
13715: POP
// opoce = 19 ; 6 :
13716: LD_ADDR_EXP 39
13720: PUSH
13721: LD_INT 19
13723: ST_TO_ADDR
13724: GO 13746
13726: LD_INT 6
13728: DOUBLE
13729: EQUAL
13730: IFTRUE 13734
13732: GO 13745
13734: POP
// opoce = 23 ; end ;
13735: LD_ADDR_EXP 39
13739: PUSH
13740: LD_INT 23
13742: ST_TO_ADDR
13743: GO 13746
13745: POP
// fortpos = [ [ [ 46 , 53 , 4 ] , [ 51 , 62 , 4 ] ] , [ [ 167 , 53 , 1 ] , [ 173 , 64 , 1 ] ] ] ;
13746: LD_ADDR_LOC 44
13750: PUSH
13751: LD_INT 46
13753: PUSH
13754: LD_INT 53
13756: PUSH
13757: LD_INT 4
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: LIST
13764: PUSH
13765: LD_INT 51
13767: PUSH
13768: LD_INT 62
13770: PUSH
13771: LD_INT 4
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: LIST
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: PUSH
13783: LD_INT 167
13785: PUSH
13786: LD_INT 53
13788: PUSH
13789: LD_INT 1
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: LIST
13796: PUSH
13797: LD_INT 173
13799: PUSH
13800: LD_INT 64
13802: PUSH
13803: LD_INT 1
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: LIST
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: PUSH
13815: EMPTY
13816: LIST
13817: LIST
13818: ST_TO_ADDR
// areasdiff = [ vlevodiff , vpravodiff ] ;
13819: LD_ADDR_LOC 45
13823: PUSH
13824: LD_INT 16
13826: PUSH
13827: LD_INT 17
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: ST_TO_ADDR
// directions = [ 4 , 1 ] ;
13834: LD_ADDR_LOC 46
13838: PUSH
13839: LD_INT 4
13841: PUSH
13842: LD_INT 1
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: ST_TO_ADDR
// for tmp = 1 to 8 do
13849: LD_ADDR_VAR 0 2
13853: PUSH
13854: DOUBLE
13855: LD_INT 1
13857: DEC
13858: ST_TO_ADDR
13859: LD_INT 8
13861: PUSH
13862: FOR_TO
13863: IFFALSE 15032
// if mp_sides_nations_ [ tmp ] then
13865: LD_EXP 49
13869: PUSH
13870: LD_VAR 0 2
13874: ARRAY
13875: IFFALSE 15030
// begin if mp_sides_positions_ [ tmp ] = 1 then
13877: LD_EXP 50
13881: PUSH
13882: LD_VAR 0 2
13886: ARRAY
13887: PUSH
13888: LD_INT 1
13890: EQUAL
13891: IFFALSE 13905
// pos1side = tmp else
13893: LD_ADDR_EXP 44
13897: PUSH
13898: LD_VAR 0 2
13902: ST_TO_ADDR
13903: GO 13915
// pos2side = tmp ;
13905: LD_ADDR_EXP 45
13909: PUSH
13910: LD_VAR 0 2
13914: ST_TO_ADDR
// uc_side = tmp ;
13915: LD_ADDR_OWVAR 20
13919: PUSH
13920: LD_VAR 0 2
13924: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ tmp ] ;
13925: LD_ADDR_OWVAR 21
13929: PUSH
13930: LD_EXP 49
13934: PUSH
13935: LD_VAR 0 2
13939: ARRAY
13940: ST_TO_ADDR
// bc_type = b_depot ;
13941: LD_ADDR_OWVAR 42
13945: PUSH
13946: LD_INT 0
13948: ST_TO_ADDR
// bc_level = 1 ;
13949: LD_ADDR_OWVAR 43
13953: PUSH
13954: LD_INT 1
13956: ST_TO_ADDR
// tmp2 = createandplacebuildingxyd ( depotpositions [ mp_sides_positions_ [ tmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 2 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 3 ] ) ;
13957: LD_ADDR_VAR 0 3
13961: PUSH
13962: LD_EXP 42
13966: PUSH
13967: LD_EXP 50
13971: PUSH
13972: LD_VAR 0 2
13976: ARRAY
13977: ARRAY
13978: PUSH
13979: LD_INT 1
13981: ARRAY
13982: PPUSH
13983: LD_EXP 42
13987: PUSH
13988: LD_EXP 50
13992: PUSH
13993: LD_VAR 0 2
13997: ARRAY
13998: ARRAY
13999: PUSH
14000: LD_INT 2
14002: ARRAY
14003: PPUSH
14004: LD_EXP 42
14008: PUSH
14009: LD_EXP 50
14013: PUSH
14014: LD_VAR 0 2
14018: ARRAY
14019: ARRAY
14020: PUSH
14021: LD_INT 3
14023: ARRAY
14024: PPUSH
14025: CALL_OW 47
14029: ST_TO_ADDR
// if batt_fl then
14030: LD_LOC 40
14034: IFFALSE 14144
// setbattleflag ( tmp , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 2 ] , [ [ bfo_defend_bonus_human , 80 ] , [ bfo_defend_bonus_vehicle , 40 ] , [ bfo_defend_bonus_building , 0 ] , [ bfo_range , 17 ] , [ bfo_height , 100 ] ] ) ;
14036: LD_VAR 0 2
14040: PPUSH
14041: LD_EXP 42
14045: PUSH
14046: LD_EXP 50
14050: PUSH
14051: LD_VAR 0 2
14055: ARRAY
14056: ARRAY
14057: PUSH
14058: LD_INT 1
14060: ARRAY
14061: PPUSH
14062: LD_EXP 42
14066: PUSH
14067: LD_EXP 50
14071: PUSH
14072: LD_VAR 0 2
14076: ARRAY
14077: ARRAY
14078: PUSH
14079: LD_INT 2
14081: ARRAY
14082: PPUSH
14083: LD_INT 1
14085: PUSH
14086: LD_INT 80
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: PUSH
14093: LD_INT 2
14095: PUSH
14096: LD_INT 40
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PUSH
14103: LD_INT 3
14105: PUSH
14106: LD_INT 0
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: PUSH
14113: LD_INT 10
14115: PUSH
14116: LD_INT 17
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: PUSH
14123: LD_INT 20
14125: PUSH
14126: LD_INT 100
14128: PUSH
14129: EMPTY
14130: LIST
14131: LIST
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: PPUSH
14140: CALL_OW 418
// if zakladna then
14144: LD_LOC 34
14148: IFFALSE 14316
// begin bc_type = b_breastwork ;
14150: LD_ADDR_OWVAR 42
14154: PUSH
14155: LD_INT 31
14157: ST_TO_ADDR
// createandplacebuildingxyd ( fortpos [ mp_sides_positions_ [ tmp ] ] [ 1 ] [ 1 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 1 ] [ 2 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 1 ] [ 3 ] ) ;
14158: LD_LOC 44
14162: PUSH
14163: LD_EXP 50
14167: PUSH
14168: LD_VAR 0 2
14172: ARRAY
14173: ARRAY
14174: PUSH
14175: LD_INT 1
14177: ARRAY
14178: PUSH
14179: LD_INT 1
14181: ARRAY
14182: PPUSH
14183: LD_LOC 44
14187: PUSH
14188: LD_EXP 50
14192: PUSH
14193: LD_VAR 0 2
14197: ARRAY
14198: ARRAY
14199: PUSH
14200: LD_INT 1
14202: ARRAY
14203: PUSH
14204: LD_INT 2
14206: ARRAY
14207: PPUSH
14208: LD_LOC 44
14212: PUSH
14213: LD_EXP 50
14217: PUSH
14218: LD_VAR 0 2
14222: ARRAY
14223: ARRAY
14224: PUSH
14225: LD_INT 1
14227: ARRAY
14228: PUSH
14229: LD_INT 3
14231: ARRAY
14232: PPUSH
14233: CALL_OW 47
// createandplacebuildingxyd ( fortpos [ mp_sides_positions_ [ tmp ] ] [ 2 ] [ 1 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 2 ] [ 2 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 2 ] [ 3 ] ) ;
14237: LD_LOC 44
14241: PUSH
14242: LD_EXP 50
14246: PUSH
14247: LD_VAR 0 2
14251: ARRAY
14252: ARRAY
14253: PUSH
14254: LD_INT 2
14256: ARRAY
14257: PUSH
14258: LD_INT 1
14260: ARRAY
14261: PPUSH
14262: LD_LOC 44
14266: PUSH
14267: LD_EXP 50
14271: PUSH
14272: LD_VAR 0 2
14276: ARRAY
14277: ARRAY
14278: PUSH
14279: LD_INT 2
14281: ARRAY
14282: PUSH
14283: LD_INT 2
14285: ARRAY
14286: PPUSH
14287: LD_LOC 44
14291: PUSH
14292: LD_EXP 50
14296: PUSH
14297: LD_VAR 0 2
14301: ARRAY
14302: ARRAY
14303: PUSH
14304: LD_INT 2
14306: ARRAY
14307: PUSH
14308: LD_INT 3
14310: ARRAY
14311: PPUSH
14312: CALL_OW 47
// end ; addresourcetype ( getbase ( tmp2 ) , mat_cans , start_res ) ;
14316: LD_VAR 0 3
14320: PPUSH
14321: CALL_OW 274
14325: PPUSH
14326: LD_INT 1
14328: PPUSH
14329: LD_LOC 36
14333: PPUSH
14334: CALL_OW 276
// if extra_oil then
14338: LD_LOC 37
14342: IFFALSE 14434
// begin tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14344: LD_ADDR_VAR 0 3
14348: PUSH
14349: LD_LOC 45
14353: PUSH
14354: LD_EXP 50
14358: PUSH
14359: LD_VAR 0 2
14363: ARRAY
14364: ARRAY
14365: PPUSH
14366: LD_INT 0
14368: PPUSH
14369: CALL_OW 16
14373: ST_TO_ADDR
// while not createdepositxy ( tmp2 [ 1 ] , tmp2 [ 2 ] , mat_oil ) do
14374: LD_VAR 0 3
14378: PUSH
14379: LD_INT 1
14381: ARRAY
14382: PPUSH
14383: LD_VAR 0 3
14387: PUSH
14388: LD_INT 2
14390: ARRAY
14391: PPUSH
14392: LD_INT 2
14394: PPUSH
14395: CALL_OW 62
14399: NOT
14400: IFFALSE 14434
// tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14402: LD_ADDR_VAR 0 3
14406: PUSH
14407: LD_LOC 45
14411: PUSH
14412: LD_EXP 50
14416: PUSH
14417: LD_VAR 0 2
14421: ARRAY
14422: ARRAY
14423: PPUSH
14424: LD_INT 0
14426: PPUSH
14427: CALL_OW 16
14431: ST_TO_ADDR
14432: GO 14374
// end ; if extra_sib then
14434: LD_LOC 38
14438: IFFALSE 14530
// begin tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14440: LD_ADDR_VAR 0 3
14444: PUSH
14445: LD_LOC 45
14449: PUSH
14450: LD_EXP 50
14454: PUSH
14455: LD_VAR 0 2
14459: ARRAY
14460: ARRAY
14461: PPUSH
14462: LD_INT 0
14464: PPUSH
14465: CALL_OW 16
14469: ST_TO_ADDR
// while not createdepositxy ( tmp2 [ 1 ] , tmp2 [ 2 ] , mat_siberit ) do
14470: LD_VAR 0 3
14474: PUSH
14475: LD_INT 1
14477: ARRAY
14478: PPUSH
14479: LD_VAR 0 3
14483: PUSH
14484: LD_INT 2
14486: ARRAY
14487: PPUSH
14488: LD_INT 3
14490: PPUSH
14491: CALL_OW 62
14495: NOT
14496: IFFALSE 14530
// tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14498: LD_ADDR_VAR 0 3
14502: PUSH
14503: LD_LOC 45
14507: PUSH
14508: LD_EXP 50
14512: PUSH
14513: LD_VAR 0 2
14517: ARRAY
14518: ARRAY
14519: PPUSH
14520: LD_INT 0
14522: PPUSH
14523: CALL_OW 16
14527: ST_TO_ADDR
14528: GO 14470
// end ; if zakl_plus > 0 then
14530: LD_LOC 39
14534: PUSH
14535: LD_INT 0
14537: GREATER
14538: IFFALSE 14798
// begin bc_type = b_lab ;
14540: LD_ADDR_OWVAR 42
14544: PUSH
14545: LD_INT 6
14547: ST_TO_ADDR
// uc_direction = directions [ mp_sides_positions_ [ tmp ] ] ;
14548: LD_ADDR_OWVAR 24
14552: PUSH
14553: LD_LOC 46
14557: PUSH
14558: LD_EXP 50
14562: PUSH
14563: LD_VAR 0 2
14567: ARRAY
14568: ARRAY
14569: ST_TO_ADDR
// tmp3 = createbuilding ;
14570: LD_ADDR_VAR 0 4
14574: PUSH
14575: CALL_OW 46
14579: ST_TO_ADDR
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14580: LD_ADDR_VAR 0 3
14584: PUSH
14585: LD_EXP 43
14589: PUSH
14590: LD_EXP 50
14594: PUSH
14595: LD_VAR 0 2
14599: ARRAY
14600: ARRAY
14601: PPUSH
14602: LD_INT 0
14604: PPUSH
14605: CALL_OW 16
14609: ST_TO_ADDR
// while not placeunitxy ( tmp3 , tmp2 [ 1 ] , tmp2 [ 2 ] , false ) do
14610: LD_VAR 0 4
14614: PPUSH
14615: LD_VAR 0 3
14619: PUSH
14620: LD_INT 1
14622: ARRAY
14623: PPUSH
14624: LD_VAR 0 3
14628: PUSH
14629: LD_INT 2
14631: ARRAY
14632: PPUSH
14633: LD_INT 0
14635: PPUSH
14636: CALL_OW 48
14640: NOT
14641: IFFALSE 14675
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14643: LD_ADDR_VAR 0 3
14647: PUSH
14648: LD_EXP 43
14652: PUSH
14653: LD_EXP 50
14657: PUSH
14658: LD_VAR 0 2
14662: ARRAY
14663: ARRAY
14664: PPUSH
14665: LD_INT 0
14667: PPUSH
14668: CALL_OW 16
14672: ST_TO_ADDR
14673: GO 14610
// if zakl_plus > 1 then
14675: LD_LOC 39
14679: PUSH
14680: LD_INT 1
14682: GREATER
14683: IFFALSE 14798
// begin bc_type = b_workshop ;
14685: LD_ADDR_OWVAR 42
14689: PUSH
14690: LD_INT 2
14692: ST_TO_ADDR
// tmp3 = createbuilding ;
14693: LD_ADDR_VAR 0 4
14697: PUSH
14698: CALL_OW 46
14702: ST_TO_ADDR
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14703: LD_ADDR_VAR 0 3
14707: PUSH
14708: LD_EXP 43
14712: PUSH
14713: LD_EXP 50
14717: PUSH
14718: LD_VAR 0 2
14722: ARRAY
14723: ARRAY
14724: PPUSH
14725: LD_INT 0
14727: PPUSH
14728: CALL_OW 16
14732: ST_TO_ADDR
// while not placeunitxy ( tmp3 , tmp2 [ 1 ] , tmp2 [ 2 ] , false ) do
14733: LD_VAR 0 4
14737: PPUSH
14738: LD_VAR 0 3
14742: PUSH
14743: LD_INT 1
14745: ARRAY
14746: PPUSH
14747: LD_VAR 0 3
14751: PUSH
14752: LD_INT 2
14754: ARRAY
14755: PPUSH
14756: LD_INT 0
14758: PPUSH
14759: CALL_OW 48
14763: NOT
14764: IFFALSE 14798
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14766: LD_ADDR_VAR 0 3
14770: PUSH
14771: LD_EXP 43
14775: PUSH
14776: LD_EXP 50
14780: PUSH
14781: LD_VAR 0 2
14785: ARRAY
14786: ARRAY
14787: PPUSH
14788: LD_INT 0
14790: PPUSH
14791: CALL_OW 16
14795: ST_TO_ADDR
14796: GO 14733
// end ; end ; if batt_fl then
14798: LD_LOC 40
14802: IFFALSE 14912
// setbattleflag ( tmp , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 2 ] , [ [ bfo_defend_bonus_human , 80 ] , [ bfo_defend_bonus_vehicle , 40 ] , [ bfo_defend_bonus_building , 0 ] , [ bfo_range , 17 ] , [ bfo_height , 100 ] ] ) ;
14804: LD_VAR 0 2
14808: PPUSH
14809: LD_EXP 42
14813: PUSH
14814: LD_EXP 50
14818: PUSH
14819: LD_VAR 0 2
14823: ARRAY
14824: ARRAY
14825: PUSH
14826: LD_INT 1
14828: ARRAY
14829: PPUSH
14830: LD_EXP 42
14834: PUSH
14835: LD_EXP 50
14839: PUSH
14840: LD_VAR 0 2
14844: ARRAY
14845: ARRAY
14846: PUSH
14847: LD_INT 2
14849: ARRAY
14850: PPUSH
14851: LD_INT 1
14853: PUSH
14854: LD_INT 80
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: PUSH
14861: LD_INT 2
14863: PUSH
14864: LD_INT 40
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: LD_INT 3
14873: PUSH
14874: LD_INT 0
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: PUSH
14881: LD_INT 10
14883: PUSH
14884: LD_INT 17
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: PUSH
14891: LD_INT 20
14893: PUSH
14894: LD_INT 100
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: PUSH
14901: EMPTY
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: PPUSH
14908: CALL_OW 418
// cl = class_scientistic ;
14912: LD_ADDR_VAR 0 5
14916: PUSH
14917: LD_INT 4
14919: ST_TO_ADDR
// for tmp2 = 1 to lidi do
14920: LD_ADDR_VAR 0 3
14924: PUSH
14925: DOUBLE
14926: LD_INT 1
14928: DEC
14929: ST_TO_ADDR
14930: LD_EXP 37
14934: PUSH
14935: FOR_TO
14936: IFFALSE 15028
// begin if tmp2 >= lidi / 2 then
14938: LD_VAR 0 3
14942: PUSH
14943: LD_EXP 37
14947: PUSH
14948: LD_INT 2
14950: DIVREAL
14951: GREATEREQUAL
14952: IFFALSE 14962
// cl = class_soldier ;
14954: LD_ADDR_VAR 0 5
14958: PUSH
14959: LD_INT 1
14961: ST_TO_ADDR
// preparehuman ( 0 , cl , skilly ) ;
14962: LD_INT 0
14964: PPUSH
14965: LD_VAR 0 5
14969: PPUSH
14970: LD_LOC 35
14974: PPUSH
14975: CALL_OW 380
// if tmp2 = 1 then
14979: LD_VAR 0 3
14983: PUSH
14984: LD_INT 1
14986: EQUAL
14987: IFFALSE 14997
// cl = class_engineer ;
14989: LD_ADDR_VAR 0 5
14993: PUSH
14994: LD_INT 2
14996: ST_TO_ADDR
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14997: CALL_OW 44
15001: PPUSH
15002: LD_EXP 43
15006: PUSH
15007: LD_EXP 50
15011: PUSH
15012: LD_VAR 0 2
15016: ARRAY
15017: ARRAY
15018: PPUSH
15019: LD_INT 0
15021: PPUSH
15022: CALL_OW 49
// end ;
15026: GO 14935
15028: POP
15029: POP
// end ;
15030: GO 13862
15032: POP
15033: POP
// uc_side = 0 ;
15034: LD_ADDR_OWVAR 20
15038: PUSH
15039: LD_INT 0
15041: ST_TO_ADDR
// uc_nation = nation_nature ;
15042: LD_ADDR_OWVAR 21
15046: PUSH
15047: LD_INT 0
15049: ST_TO_ADDR
// for tmp = 1 to opoce do
15050: LD_ADDR_VAR 0 2
15054: PUSH
15055: DOUBLE
15056: LD_INT 1
15058: DEC
15059: ST_TO_ADDR
15060: LD_EXP 39
15064: PUSH
15065: FOR_TO
15066: IFFALSE 15098
// begin preparehuman ( 0 , class_apeman , 0 ) ;
15068: LD_INT 0
15070: PPUSH
15071: LD_INT 12
15073: PPUSH
15074: LD_INT 0
15076: PPUSH
15077: CALL_OW 380
// placeunitarea ( createhuman , les , false ) ;
15081: CALL_OW 44
15085: PPUSH
15086: LD_INT 4
15088: PPUSH
15089: LD_INT 0
15091: PPUSH
15092: CALL_OW 49
// end ;
15096: GO 15065
15098: POP
15099: POP
// case mp_sides_positions_ [ your_side ] of 1 :
15100: LD_EXP 50
15104: PUSH
15105: LD_OWVAR 2
15109: ARRAY
15110: PUSH
15111: LD_INT 1
15113: DOUBLE
15114: EQUAL
15115: IFTRUE 15119
15117: GO 15132
15119: POP
// centernowonxy ( 44 , 60 ) ; 2 :
15120: LD_INT 44
15122: PPUSH
15123: LD_INT 60
15125: PPUSH
15126: CALL_OW 86
15130: GO 15154
15132: LD_INT 2
15134: DOUBLE
15135: EQUAL
15136: IFTRUE 15140
15138: GO 15153
15140: POP
// centernowonxy ( 175 , 60 ) ; end ;
15141: LD_INT 175
15143: PPUSH
15144: LD_INT 60
15146: PPUSH
15147: CALL_OW 86
15151: GO 15154
15153: POP
// end ;
15154: LD_VAR 0 1
15158: RET
// on humandestroyed ( un , side , nat , x , y , dir , sex , cl ) marked 10 do if mp_sides_positions_ [ side ] = 1 then
15159: LD_EXP 50
15163: PUSH
15164: LD_VAR 0 2
15168: ARRAY
15169: PUSH
15170: LD_INT 1
15172: EQUAL
15173: IFFALSE 15191
// resp_cnt1 = resp_cnt1 + 1 else
15175: LD_ADDR_LOC 47
15179: PUSH
15180: LD_LOC 47
15184: PUSH
15185: LD_INT 1
15187: PLUS
15188: ST_TO_ADDR
15189: GO 15205
// resp_cnt2 = resp_cnt2 + 1 ;
15191: LD_ADDR_LOC 48
15195: PUSH
15196: LD_LOC 48
15200: PUSH
15201: LD_INT 1
15203: PLUS
15204: ST_TO_ADDR
15205: PPOPN 8
15207: END
// every 0 0$30 trigger resp_cnt1 >= people_resp marked 11 do
15208: LD_LOC 47
15212: PUSH
15213: LD_LOC 42
15217: GREATEREQUAL
15218: IFFALSE 15371
15220: GO 15222
15222: DISABLE
// begin resp_cnt1 = resp_cnt1 - people_resp ;
15223: LD_ADDR_LOC 47
15227: PUSH
15228: LD_LOC 47
15232: PUSH
15233: LD_LOC 42
15237: MINUS
15238: ST_TO_ADDR
// if not filterallunits ( [ [ f_side , pos1side ] , [ f_or , [ f_btype , b_depot ] , [ f_class , class_engineer ] ] ] ) then
15239: LD_INT 22
15241: PUSH
15242: LD_EXP 44
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: PUSH
15251: LD_INT 2
15253: PUSH
15254: LD_INT 30
15256: PUSH
15257: LD_INT 0
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: PUSH
15264: LD_INT 25
15266: PUSH
15267: LD_INT 2
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: LIST
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: PPUSH
15283: CALL_OW 69
15287: NOT
15288: IFFALSE 15293
// begin enable ;
15290: ENABLE
// exit ;
15291: GO 15371
// end ; uc_side = pos1side ;
15293: LD_ADDR_OWVAR 20
15297: PUSH
15298: LD_EXP 44
15302: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos1side ] ;
15303: LD_ADDR_OWVAR 21
15307: PUSH
15308: LD_EXP 49
15312: PUSH
15313: LD_EXP 44
15317: ARRAY
15318: ST_TO_ADDR
// preparehuman ( 0 , class_soldier , skilly ) ;
15319: LD_INT 0
15321: PPUSH
15322: LD_INT 1
15324: PPUSH
15325: LD_LOC 35
15329: PPUSH
15330: CALL_OW 380
// wait ( 0 0$10 ) ;
15334: LD_INT 350
15336: PPUSH
15337: CALL_OW 67
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ pos1side ] ] , true ) ;
15341: CALL_OW 44
15345: PPUSH
15346: LD_EXP 43
15350: PUSH
15351: LD_EXP 50
15355: PUSH
15356: LD_EXP 44
15360: ARRAY
15361: ARRAY
15362: PPUSH
15363: LD_INT 1
15365: PPUSH
15366: CALL_OW 49
// enable ;
15370: ENABLE
// end ;
15371: END
// every 0 0$30 trigger resp_cnt2 >= people_resp marked 12 do
15372: LD_LOC 48
15376: PUSH
15377: LD_LOC 42
15381: GREATEREQUAL
15382: IFFALSE 15535
15384: GO 15386
15386: DISABLE
// begin resp_cnt2 = resp_cnt2 - people_resp ;
15387: LD_ADDR_LOC 48
15391: PUSH
15392: LD_LOC 48
15396: PUSH
15397: LD_LOC 42
15401: MINUS
15402: ST_TO_ADDR
// if not filterallunits ( [ [ f_side , pos2side ] , [ f_or , [ f_btype , b_depot ] , [ f_class , class_engineer ] ] ] ) then
15403: LD_INT 22
15405: PUSH
15406: LD_EXP 45
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: PUSH
15415: LD_INT 2
15417: PUSH
15418: LD_INT 30
15420: PUSH
15421: LD_INT 0
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PUSH
15428: LD_INT 25
15430: PUSH
15431: LD_INT 2
15433: PUSH
15434: EMPTY
15435: LIST
15436: LIST
15437: PUSH
15438: EMPTY
15439: LIST
15440: LIST
15441: LIST
15442: PUSH
15443: EMPTY
15444: LIST
15445: LIST
15446: PPUSH
15447: CALL_OW 69
15451: NOT
15452: IFFALSE 15457
// begin enable ;
15454: ENABLE
// exit ;
15455: GO 15535
// end ; uc_side = pos2side ;
15457: LD_ADDR_OWVAR 20
15461: PUSH
15462: LD_EXP 45
15466: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos2side ] ;
15467: LD_ADDR_OWVAR 21
15471: PUSH
15472: LD_EXP 49
15476: PUSH
15477: LD_EXP 45
15481: ARRAY
15482: ST_TO_ADDR
// preparehuman ( 0 , class_soldier , skilly ) ;
15483: LD_INT 0
15485: PPUSH
15486: LD_INT 1
15488: PPUSH
15489: LD_LOC 35
15493: PPUSH
15494: CALL_OW 380
// wait ( 0 0$10 ) ;
15498: LD_INT 350
15500: PPUSH
15501: CALL_OW 67
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ pos2side ] ] , true ) ;
15505: CALL_OW 44
15509: PPUSH
15510: LD_EXP 43
15514: PUSH
15515: LD_EXP 50
15519: PUSH
15520: LD_EXP 45
15524: ARRAY
15525: ARRAY
15526: PPUSH
15527: LD_INT 1
15529: PPUSH
15530: CALL_OW 49
// enable ;
15534: ENABLE
// end ;
15535: END
// every 0 0$1 marked 13 do
15536: GO 15538
15538: DISABLE
// begin if not filterallunits ( [ [ f_side , pos1side ] , [ f_type , unit_human ] ] ) then
15539: LD_INT 22
15541: PUSH
15542: LD_EXP 44
15546: PUSH
15547: EMPTY
15548: LIST
15549: LIST
15550: PUSH
15551: LD_INT 21
15553: PUSH
15554: LD_INT 1
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: PPUSH
15565: CALL_OW 69
15569: NOT
15570: IFFALSE 15594
// if pos1side = your_side then
15572: LD_EXP 44
15576: PUSH
15577: LD_OWVAR 2
15581: EQUAL
15582: IFFALSE 15590
// youlostinmultiplayer else
15584: CALL_OW 107
15588: GO 15594
// youwininmultiplayer ;
15590: CALL_OW 106
// if not filterallunits ( [ [ f_side , pos2side ] , [ f_type , unit_human ] ] ) then
15594: LD_INT 22
15596: PUSH
15597: LD_EXP 45
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PUSH
15606: LD_INT 21
15608: PUSH
15609: LD_INT 1
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: PPUSH
15620: CALL_OW 69
15624: NOT
15625: IFFALSE 15649
// if pos2side = your_side then
15627: LD_EXP 45
15631: PUSH
15632: LD_OWVAR 2
15636: EQUAL
15637: IFFALSE 15645
// youlostinmultiplayer else
15639: CALL_OW 107
15643: GO 15649
// youwininmultiplayer ;
15645: CALL_OW 106
// end ; end_of_file
15649: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
15650: LD_INT 0
15652: PPUSH
15653: PPUSH
// for un in battle_flags_id do
15654: LD_ADDR_VAR 0 2
15658: PUSH
15659: LD_EXP 29
15663: PUSH
15664: FOR_IN
15665: IFFALSE 15740
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
15667: LD_VAR 0 2
15671: PPUSH
15672: LD_INT 1
15674: PUSH
15675: LD_LOC 49
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PUSH
15684: LD_INT 2
15686: PUSH
15687: LD_LOC 49
15691: PUSH
15692: LD_INT 2
15694: DIV
15695: PUSH
15696: EMPTY
15697: LIST
15698: LIST
15699: PUSH
15700: LD_INT 3
15702: PUSH
15703: LD_LOC 49
15707: PUSH
15708: LD_INT 5
15710: DIV
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: PUSH
15716: LD_INT 20
15718: PUSH
15719: LD_LOC 49
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: PPUSH
15734: CALL_OW 423
15738: GO 15664
15740: POP
15741: POP
// end ;
15742: LD_VAR 0 1
15746: RET
// every 0 0$0.1 marked 55 do var un ;
15747: GO 15749
15749: DISABLE
15750: LD_INT 0
15752: PPUSH
// begin if not def_morale_flags then
15753: LD_EXP 66
15757: NOT
15758: IFFALSE 15762
// exit ;
15760: GO 15839
// if not morale_decreasing_time then
15762: LD_EXP 11
15766: NOT
15767: IFFALSE 15771
// exit ;
15769: GO 15839
// strength = 100 ;
15771: LD_ADDR_LOC 49
15775: PUSH
15776: LD_INT 100
15778: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
15779: LD_EXP 11
15783: PPUSH
15784: CALL_OW 67
// strength := strength - 1 ;
15788: LD_ADDR_LOC 49
15792: PUSH
15793: LD_LOC 49
15797: PUSH
15798: LD_INT 1
15800: MINUS
15801: ST_TO_ADDR
// Update_Flags ;
15802: CALL 15650 0 0
// until not strength ;
15806: LD_LOC 49
15810: NOT
15811: IFFALSE 15779
// for un in battle_flags_id do
15813: LD_ADDR_VAR 0 1
15817: PUSH
15818: LD_EXP 29
15822: PUSH
15823: FOR_IN
15824: IFFALSE 15837
// KillBattleFlag ( un ) ;
15826: LD_VAR 0 1
15830: PPUSH
15831: CALL_OW 419
15835: GO 15823
15837: POP
15838: POP
// end ; end_of_file
15839: PPOPN 1
15841: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
15842: LD_INT 0
15844: PPUSH
15845: PPUSH
// if ( not IAmSpec ) then
15846: CALL_OW 531
15850: NOT
15851: IFFALSE 15867
// Result := Limits_Info ^  ;
15853: LD_ADDR_VAR 0 1
15857: PUSH
15858: LD_LOC 61
15862: PUSH
15863: LD_STRING 
15865: ADD
15866: ST_TO_ADDR
// for i := 1 to 8 do
15867: LD_ADDR_VAR 0 2
15871: PUSH
15872: DOUBLE
15873: LD_INT 1
15875: DEC
15876: ST_TO_ADDR
15877: LD_INT 8
15879: PUSH
15880: FOR_TO
15881: IFFALSE 15926
// if Cheaters [ i ] then
15883: LD_LOC 62
15887: PUSH
15888: LD_VAR 0 2
15892: ARRAY
15893: IFFALSE 15924
// Result := Result ^ [ #Cheater , i , i ] ;
15895: LD_ADDR_VAR 0 1
15899: PUSH
15900: LD_VAR 0 1
15904: PUSH
15905: LD_STRING #Cheater
15907: PUSH
15908: LD_VAR 0 2
15912: PUSH
15913: LD_VAR 0 2
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: LIST
15922: ADD
15923: ST_TO_ADDR
15924: GO 15880
15926: POP
15927: POP
// end ;
15928: LD_VAR 0 1
15932: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
15933: LD_INT 0
15935: PPUSH
15936: PPUSH
15937: PPUSH
15938: PPUSH
15939: PPUSH
// case Game_Type of 10 :
15940: LD_EXP 56
15944: PUSH
15945: LD_INT 10
15947: DOUBLE
15948: EQUAL
15949: IFTRUE 15953
15951: GO 15964
15953: POP
// def_game_rules := 1 ; 11 :
15954: LD_ADDR_EXP 57
15958: PUSH
15959: LD_INT 1
15961: ST_TO_ADDR
15962: GO 15984
15964: LD_INT 11
15966: DOUBLE
15967: EQUAL
15968: IFTRUE 15972
15970: GO 15983
15972: POP
// def_game_rules := 3 ; end ;
15973: LD_ADDR_EXP 57
15977: PUSH
15978: LD_INT 3
15980: ST_TO_ADDR
15981: GO 15984
15983: POP
// case def_game_rules of 0 :
15984: LD_EXP 57
15988: PUSH
15989: LD_INT 0
15991: DOUBLE
15992: EQUAL
15993: IFTRUE 15997
15995: GO 16002
15997: POP
// exit ; 1 :
15998: GO 18060
16000: GO 17960
16002: LD_INT 1
16004: DOUBLE
16005: EQUAL
16006: IFTRUE 16010
16008: GO 16226
16010: POP
// begin def_base_level := 2 ;
16011: LD_ADDR_EXP 58
16015: PUSH
16016: LD_INT 2
16018: ST_TO_ADDR
// def_amount_of_people := 2 ;
16019: LD_ADDR_EXP 59
16023: PUSH
16024: LD_INT 2
16026: ST_TO_ADDR
// def_skill_level := 1 ;
16027: LD_ADDR_EXP 60
16031: PUSH
16032: LD_INT 1
16034: ST_TO_ADDR
// def_starting_resources := 2 ;
16035: LD_ADDR_EXP 61
16039: PUSH
16040: LD_INT 2
16042: ST_TO_ADDR
// def_shipments_density := 1 ;
16043: LD_ADDR_EXP 62
16047: PUSH
16048: LD_INT 1
16050: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
16051: LD_ADDR_EXP 63
16055: PUSH
16056: LD_INT 0
16058: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
16059: LD_ADDR_EXP 64
16063: PUSH
16064: LD_INT 1
16066: ST_TO_ADDR
// def_shared_vision := 1 ;
16067: LD_ADDR_EXP 65
16071: PUSH
16072: LD_INT 1
16074: ST_TO_ADDR
// def_morale_flags := 3 ;
16075: LD_ADDR_EXP 66
16079: PUSH
16080: LD_INT 3
16082: ST_TO_ADDR
// def_siberite_detection := 1 ;
16083: LD_ADDR_EXP 67
16087: PUSH
16088: LD_INT 1
16090: ST_TO_ADDR
// def_people_respawning := 1 ;
16091: LD_ADDR_EXP 68
16095: PUSH
16096: LD_INT 1
16098: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
16099: LD_ADDR_EXP 69
16103: PUSH
16104: LD_INT 1
16106: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16107: LD_ADDR_EXP 70
16111: PUSH
16112: LD_INT 0
16114: ST_TO_ADDR
// def_builduptime := 2 ;
16115: LD_ADDR_EXP 71
16119: PUSH
16120: LD_INT 2
16122: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
16123: LD_ADDR_VAR 0 2
16127: PUSH
16128: EMPTY
16129: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
16130: LD_ADDR_VAR 0 3
16134: PUSH
16135: EMPTY
16136: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16137: LD_ADDR_LOC 56
16141: PUSH
16142: EMPTY
16143: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16144: LD_ADDR_LOC 57
16148: PUSH
16149: EMPTY
16150: ST_TO_ADDR
// Banned_Controls := [ ] ;
16151: LD_ADDR_LOC 58
16155: PUSH
16156: EMPTY
16157: ST_TO_ADDR
// Banned_Engines := [ ] ;
16158: LD_ADDR_LOC 59
16162: PUSH
16163: EMPTY
16164: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
16165: LD_ADDR_LOC 54
16169: PUSH
16170: LD_INT 37
16172: PUSH
16173: EMPTY
16174: LIST
16175: PUSH
16176: LD_INT 4
16178: PUSH
16179: LD_INT 5
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: PUSH
16186: LD_INT 31
16188: PUSH
16189: LD_INT 32
16191: PUSH
16192: LD_INT 33
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: LIST
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: LIST
16204: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
16205: LD_ADDR_LOC 55
16209: PUSH
16210: LD_INT 2
16212: PUSH
16213: LD_INT 2
16215: PUSH
16216: LD_INT 4
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: LIST
16223: ST_TO_ADDR
// end ; 2 :
16224: GO 17960
16226: LD_INT 2
16228: DOUBLE
16229: EQUAL
16230: IFTRUE 16234
16232: GO 16443
16234: POP
// begin def_base_level := 1 ;
16235: LD_ADDR_EXP 58
16239: PUSH
16240: LD_INT 1
16242: ST_TO_ADDR
// def_amount_of_people := 2 ;
16243: LD_ADDR_EXP 59
16247: PUSH
16248: LD_INT 2
16250: ST_TO_ADDR
// def_skill_level := 3 ;
16251: LD_ADDR_EXP 60
16255: PUSH
16256: LD_INT 3
16258: ST_TO_ADDR
// def_starting_resources := 3 ;
16259: LD_ADDR_EXP 61
16263: PUSH
16264: LD_INT 3
16266: ST_TO_ADDR
// def_shipments_density := 2 ;
16267: LD_ADDR_EXP 62
16271: PUSH
16272: LD_INT 2
16274: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
16275: LD_ADDR_EXP 63
16279: PUSH
16280: LD_INT 1
16282: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
16283: LD_ADDR_EXP 64
16287: PUSH
16288: LD_INT 2
16290: ST_TO_ADDR
// def_shared_vision := 1 ;
16291: LD_ADDR_EXP 65
16295: PUSH
16296: LD_INT 1
16298: ST_TO_ADDR
// def_morale_flags := 0 ;
16299: LD_ADDR_EXP 66
16303: PUSH
16304: LD_INT 0
16306: ST_TO_ADDR
// def_siberite_detection := 1 ;
16307: LD_ADDR_EXP 67
16311: PUSH
16312: LD_INT 1
16314: ST_TO_ADDR
// def_people_respawning := 0 ;
16315: LD_ADDR_EXP 68
16319: PUSH
16320: LD_INT 0
16322: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
16323: LD_ADDR_EXP 69
16327: PUSH
16328: LD_INT 0
16330: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16331: LD_ADDR_EXP 70
16335: PUSH
16336: LD_INT 0
16338: ST_TO_ADDR
// def_builduptime := 2 ;
16339: LD_ADDR_EXP 71
16343: PUSH
16344: LD_INT 2
16346: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
16347: LD_ADDR_VAR 0 2
16351: PUSH
16352: LD_INT 1
16354: PUSH
16355: EMPTY
16356: LIST
16357: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
16358: LD_ADDR_VAR 0 3
16362: PUSH
16363: EMPTY
16364: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16365: LD_ADDR_LOC 56
16369: PUSH
16370: EMPTY
16371: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16372: LD_ADDR_LOC 57
16376: PUSH
16377: EMPTY
16378: ST_TO_ADDR
// Banned_Controls := [ ] ;
16379: LD_ADDR_LOC 58
16383: PUSH
16384: EMPTY
16385: ST_TO_ADDR
// Banned_Engines := [ ] ;
16386: LD_ADDR_LOC 59
16390: PUSH
16391: EMPTY
16392: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
16393: LD_ADDR_LOC 54
16397: PUSH
16398: LD_INT 4
16400: PUSH
16401: LD_INT 5
16403: PUSH
16404: EMPTY
16405: LIST
16406: LIST
16407: PUSH
16408: LD_INT 31
16410: PUSH
16411: LD_INT 32
16413: PUSH
16414: LD_INT 33
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: LIST
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
16426: LD_ADDR_LOC 55
16430: PUSH
16431: LD_INT 1
16433: PUSH
16434: LD_INT 2
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: ST_TO_ADDR
// end ; 3 :
16441: GO 17960
16443: LD_INT 3
16445: DOUBLE
16446: EQUAL
16447: IFTRUE 16451
16449: GO 16694
16451: POP
// begin def_base_level := 1 ;
16452: LD_ADDR_EXP 58
16456: PUSH
16457: LD_INT 1
16459: ST_TO_ADDR
// def_amount_of_people := 2 ;
16460: LD_ADDR_EXP 59
16464: PUSH
16465: LD_INT 2
16467: ST_TO_ADDR
// def_skill_level := 3 ;
16468: LD_ADDR_EXP 60
16472: PUSH
16473: LD_INT 3
16475: ST_TO_ADDR
// def_starting_resources := 3 ;
16476: LD_ADDR_EXP 61
16480: PUSH
16481: LD_INT 3
16483: ST_TO_ADDR
// def_shipments_density := 1 ;
16484: LD_ADDR_EXP 62
16488: PUSH
16489: LD_INT 1
16491: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
16492: LD_ADDR_EXP 63
16496: PUSH
16497: LD_INT 0
16499: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
16500: LD_ADDR_EXP 64
16504: PUSH
16505: LD_INT 1
16507: ST_TO_ADDR
// def_shared_vision := 1 ;
16508: LD_ADDR_EXP 65
16512: PUSH
16513: LD_INT 1
16515: ST_TO_ADDR
// def_morale_flags := 0 ;
16516: LD_ADDR_EXP 66
16520: PUSH
16521: LD_INT 0
16523: ST_TO_ADDR
// def_siberite_detection := 1 ;
16524: LD_ADDR_EXP 67
16528: PUSH
16529: LD_INT 1
16531: ST_TO_ADDR
// def_people_respawning := 0 ;
16532: LD_ADDR_EXP 68
16536: PUSH
16537: LD_INT 0
16539: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
16540: LD_ADDR_EXP 69
16544: PUSH
16545: LD_INT 2
16547: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16548: LD_ADDR_EXP 70
16552: PUSH
16553: LD_INT 0
16555: ST_TO_ADDR
// def_builduptime := 1 ;
16556: LD_ADDR_EXP 71
16560: PUSH
16561: LD_INT 1
16563: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
16564: LD_ADDR_VAR 0 2
16568: PUSH
16569: LD_INT 23
16571: PUSH
16572: EMPTY
16573: LIST
16574: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
16575: LD_ADDR_VAR 0 3
16579: PUSH
16580: LD_INT 2
16582: PUSH
16583: LD_INT 37
16585: PUSH
16586: LD_INT 32
16588: PUSH
16589: LD_INT 33
16591: PUSH
16592: LD_INT 36
16594: PUSH
16595: LD_INT 16
16597: PUSH
16598: LD_INT 23
16600: PUSH
16601: LD_INT 21
16603: PUSH
16604: LD_INT 18
16606: PUSH
16607: LD_INT 22
16609: PUSH
16610: LD_INT 20
16612: PUSH
16613: LD_INT 19
16615: PUSH
16616: LD_INT 25
16618: PUSH
16619: LD_INT 17
16621: PUSH
16622: LD_INT 24
16624: PUSH
16625: EMPTY
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16642: LD_ADDR_LOC 56
16646: PUSH
16647: EMPTY
16648: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16649: LD_ADDR_LOC 57
16653: PUSH
16654: EMPTY
16655: ST_TO_ADDR
// Banned_Controls := [ ] ;
16656: LD_ADDR_LOC 58
16660: PUSH
16661: EMPTY
16662: ST_TO_ADDR
// Banned_Engines := [ ] ;
16663: LD_ADDR_LOC 59
16667: PUSH
16668: EMPTY
16669: ST_TO_ADDR
// Restricted_Builds := [ ] ;
16670: LD_ADDR_LOC 54
16674: PUSH
16675: EMPTY
16676: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
16677: LD_ADDR_LOC 55
16681: PUSH
16682: EMPTY
16683: ST_TO_ADDR
// No_Mechs := true ;
16684: LD_ADDR_EXP 72
16688: PUSH
16689: LD_INT 1
16691: ST_TO_ADDR
// end ; 4 :
16692: GO 17960
16694: LD_INT 4
16696: DOUBLE
16697: EQUAL
16698: IFTRUE 16702
16700: GO 16877
16702: POP
// begin def_base_level := 1 ;
16703: LD_ADDR_EXP 58
16707: PUSH
16708: LD_INT 1
16710: ST_TO_ADDR
// def_amount_of_people := 2 ;
16711: LD_ADDR_EXP 59
16715: PUSH
16716: LD_INT 2
16718: ST_TO_ADDR
// def_skill_level := 3 ;
16719: LD_ADDR_EXP 60
16723: PUSH
16724: LD_INT 3
16726: ST_TO_ADDR
// def_starting_resources := 3 ;
16727: LD_ADDR_EXP 61
16731: PUSH
16732: LD_INT 3
16734: ST_TO_ADDR
// def_shipments_density := 2 ;
16735: LD_ADDR_EXP 62
16739: PUSH
16740: LD_INT 2
16742: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
16743: LD_ADDR_EXP 63
16747: PUSH
16748: LD_INT 1
16750: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
16751: LD_ADDR_EXP 64
16755: PUSH
16756: LD_INT 2
16758: ST_TO_ADDR
// def_shared_vision := 1 ;
16759: LD_ADDR_EXP 65
16763: PUSH
16764: LD_INT 1
16766: ST_TO_ADDR
// def_morale_flags := 0 ;
16767: LD_ADDR_EXP 66
16771: PUSH
16772: LD_INT 0
16774: ST_TO_ADDR
// def_siberite_detection := 1 ;
16775: LD_ADDR_EXP 67
16779: PUSH
16780: LD_INT 1
16782: ST_TO_ADDR
// def_people_respawning := 0 ;
16783: LD_ADDR_EXP 68
16787: PUSH
16788: LD_INT 0
16790: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
16791: LD_ADDR_EXP 69
16795: PUSH
16796: LD_INT 0
16798: ST_TO_ADDR
// def_siberite_bomb := 1 ;
16799: LD_ADDR_EXP 70
16803: PUSH
16804: LD_INT 1
16806: ST_TO_ADDR
// def_builduptime := 3 ;
16807: LD_ADDR_EXP 71
16811: PUSH
16812: LD_INT 3
16814: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
16815: LD_ADDR_VAR 0 2
16819: PUSH
16820: LD_INT 1
16822: PUSH
16823: EMPTY
16824: LIST
16825: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
16826: LD_ADDR_VAR 0 3
16830: PUSH
16831: EMPTY
16832: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16833: LD_ADDR_LOC 56
16837: PUSH
16838: EMPTY
16839: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16840: LD_ADDR_LOC 57
16844: PUSH
16845: EMPTY
16846: ST_TO_ADDR
// Banned_Controls := [ ] ;
16847: LD_ADDR_LOC 58
16851: PUSH
16852: EMPTY
16853: ST_TO_ADDR
// Banned_Engines := [ ] ;
16854: LD_ADDR_LOC 59
16858: PUSH
16859: EMPTY
16860: ST_TO_ADDR
// Restricted_Builds := [ ] ;
16861: LD_ADDR_LOC 54
16865: PUSH
16866: EMPTY
16867: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
16868: LD_ADDR_LOC 55
16872: PUSH
16873: EMPTY
16874: ST_TO_ADDR
// end ; 5 :
16875: GO 17960
16877: LD_INT 5
16879: DOUBLE
16880: EQUAL
16881: IFTRUE 16885
16883: GO 17134
16885: POP
// begin def_base_level := 0 ;
16886: LD_ADDR_EXP 58
16890: PUSH
16891: LD_INT 0
16893: ST_TO_ADDR
// def_amount_of_people := 0 ;
16894: LD_ADDR_EXP 59
16898: PUSH
16899: LD_INT 0
16901: ST_TO_ADDR
// def_skill_level := 0 ;
16902: LD_ADDR_EXP 60
16906: PUSH
16907: LD_INT 0
16909: ST_TO_ADDR
// def_starting_resources := 0 ;
16910: LD_ADDR_EXP 61
16914: PUSH
16915: LD_INT 0
16917: ST_TO_ADDR
// def_shipments_density := 0 ;
16918: LD_ADDR_EXP 62
16922: PUSH
16923: LD_INT 0
16925: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
16926: LD_ADDR_EXP 63
16930: PUSH
16931: LD_INT 0
16933: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
16934: LD_ADDR_EXP 64
16938: PUSH
16939: LD_INT 0
16941: ST_TO_ADDR
// def_shared_vision := 1 ;
16942: LD_ADDR_EXP 65
16946: PUSH
16947: LD_INT 1
16949: ST_TO_ADDR
// def_morale_flags := 0 ;
16950: LD_ADDR_EXP 66
16954: PUSH
16955: LD_INT 0
16957: ST_TO_ADDR
// def_siberite_detection := 0 ;
16958: LD_ADDR_EXP 67
16962: PUSH
16963: LD_INT 0
16965: ST_TO_ADDR
// def_people_respawning := 1 ;
16966: LD_ADDR_EXP 68
16970: PUSH
16971: LD_INT 1
16973: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
16974: LD_ADDR_EXP 69
16978: PUSH
16979: LD_INT 1
16981: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16982: LD_ADDR_EXP 70
16986: PUSH
16987: LD_INT 0
16989: ST_TO_ADDR
// def_builduptime := 0 ;
16990: LD_ADDR_EXP 71
16994: PUSH
16995: LD_INT 0
16997: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
16998: LD_ADDR_VAR 0 2
17002: PUSH
17003: LD_INT 10
17005: PUSH
17006: LD_INT 3
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
17013: LD_ADDR_VAR 0 3
17017: PUSH
17018: LD_INT 12
17020: PUSH
17021: LD_INT 11
17023: PUSH
17024: LD_INT 14
17026: PUSH
17027: LD_INT 13
17029: PUSH
17030: LD_INT 5
17032: PUSH
17033: LD_INT 24
17035: PUSH
17036: LD_INT 21
17038: PUSH
17039: LD_INT 33
17041: PUSH
17042: LD_INT 36
17044: PUSH
17045: EMPTY
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
17056: LD_ADDR_LOC 56
17060: PUSH
17061: LD_INT 31
17063: PUSH
17064: EMPTY
17065: LIST
17066: ST_TO_ADDR
// Banned_Chassis := [ ] ;
17067: LD_ADDR_LOC 57
17071: PUSH
17072: EMPTY
17073: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
17074: LD_ADDR_LOC 58
17078: PUSH
17079: LD_INT 2
17081: PUSH
17082: EMPTY
17083: LIST
17084: ST_TO_ADDR
// Banned_Engines := [ ] ;
17085: LD_ADDR_LOC 59
17089: PUSH
17090: EMPTY
17091: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
17092: LD_ADDR_LOC 54
17096: PUSH
17097: LD_INT 4
17099: PUSH
17100: EMPTY
17101: LIST
17102: PUSH
17103: LD_INT 31
17105: PUSH
17106: LD_INT 32
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
17117: LD_ADDR_LOC 55
17121: PUSH
17122: LD_INT 1
17124: PUSH
17125: LD_INT 1
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: ST_TO_ADDR
// end ; 6 :
17132: GO 17960
17134: LD_INT 6
17136: DOUBLE
17137: EQUAL
17138: IFTRUE 17142
17140: GO 17345
17142: POP
// begin def_base_level := 1 ;
17143: LD_ADDR_EXP 58
17147: PUSH
17148: LD_INT 1
17150: ST_TO_ADDR
// def_amount_of_people := 2 ;
17151: LD_ADDR_EXP 59
17155: PUSH
17156: LD_INT 2
17158: ST_TO_ADDR
// def_skill_level := 3 ;
17159: LD_ADDR_EXP 60
17163: PUSH
17164: LD_INT 3
17166: ST_TO_ADDR
// def_starting_resources := 3 ;
17167: LD_ADDR_EXP 61
17171: PUSH
17172: LD_INT 3
17174: ST_TO_ADDR
// def_shipments_density := 1 ;
17175: LD_ADDR_EXP 62
17179: PUSH
17180: LD_INT 1
17182: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
17183: LD_ADDR_EXP 63
17187: PUSH
17188: LD_INT 0
17190: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
17191: LD_ADDR_EXP 64
17195: PUSH
17196: LD_INT 1
17198: ST_TO_ADDR
// def_shared_vision := 1 ;
17199: LD_ADDR_EXP 65
17203: PUSH
17204: LD_INT 1
17206: ST_TO_ADDR
// def_morale_flags := 0 ;
17207: LD_ADDR_EXP 66
17211: PUSH
17212: LD_INT 0
17214: ST_TO_ADDR
// def_siberite_detection := 1 ;
17215: LD_ADDR_EXP 67
17219: PUSH
17220: LD_INT 1
17222: ST_TO_ADDR
// def_people_respawning := 2 ;
17223: LD_ADDR_EXP 68
17227: PUSH
17228: LD_INT 2
17230: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
17231: LD_ADDR_EXP 69
17235: PUSH
17236: LD_INT 1
17238: ST_TO_ADDR
// def_siberite_bomb := 0 ;
17239: LD_ADDR_EXP 70
17243: PUSH
17244: LD_INT 0
17246: ST_TO_ADDR
// def_builduptime := 1 ;
17247: LD_ADDR_EXP 71
17251: PUSH
17252: LD_INT 1
17254: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
17255: LD_ADDR_VAR 0 2
17259: PUSH
17260: LD_INT 23
17262: PUSH
17263: EMPTY
17264: LIST
17265: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
17266: LD_ADDR_VAR 0 3
17270: PUSH
17271: LD_INT 2
17273: PUSH
17274: LD_INT 37
17276: PUSH
17277: LD_INT 31
17279: PUSH
17280: LD_INT 32
17282: PUSH
17283: LD_INT 33
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: ST_TO_ADDR
// Banned_Weapons := [ ] ;
17293: LD_ADDR_LOC 56
17297: PUSH
17298: EMPTY
17299: ST_TO_ADDR
// Banned_Chassis := [ ] ;
17300: LD_ADDR_LOC 57
17304: PUSH
17305: EMPTY
17306: ST_TO_ADDR
// Banned_Controls := [ ] ;
17307: LD_ADDR_LOC 58
17311: PUSH
17312: EMPTY
17313: ST_TO_ADDR
// Banned_Engines := [ ] ;
17314: LD_ADDR_LOC 59
17318: PUSH
17319: EMPTY
17320: ST_TO_ADDR
// Restricted_Builds := [ ] ;
17321: LD_ADDR_LOC 54
17325: PUSH
17326: EMPTY
17327: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
17328: LD_ADDR_LOC 55
17332: PUSH
17333: EMPTY
17334: ST_TO_ADDR
// No_Mechs := true ;
17335: LD_ADDR_EXP 72
17339: PUSH
17340: LD_INT 1
17342: ST_TO_ADDR
// end ; 7 :
17343: GO 17960
17345: LD_INT 7
17347: DOUBLE
17348: EQUAL
17349: IFTRUE 17353
17351: GO 17551
17353: POP
// begin def_base_level := 1 ;
17354: LD_ADDR_EXP 58
17358: PUSH
17359: LD_INT 1
17361: ST_TO_ADDR
// def_amount_of_people := 2 ;
17362: LD_ADDR_EXP 59
17366: PUSH
17367: LD_INT 2
17369: ST_TO_ADDR
// def_skill_level := 3 ;
17370: LD_ADDR_EXP 60
17374: PUSH
17375: LD_INT 3
17377: ST_TO_ADDR
// def_starting_resources := 3 ;
17378: LD_ADDR_EXP 61
17382: PUSH
17383: LD_INT 3
17385: ST_TO_ADDR
// def_shipments_density := 1 ;
17386: LD_ADDR_EXP 62
17390: PUSH
17391: LD_INT 1
17393: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
17394: LD_ADDR_EXP 63
17398: PUSH
17399: LD_INT 1
17401: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
17402: LD_ADDR_EXP 64
17406: PUSH
17407: LD_INT 2
17409: ST_TO_ADDR
// def_shared_vision := 1 ;
17410: LD_ADDR_EXP 65
17414: PUSH
17415: LD_INT 1
17417: ST_TO_ADDR
// def_morale_flags := 0 ;
17418: LD_ADDR_EXP 66
17422: PUSH
17423: LD_INT 0
17425: ST_TO_ADDR
// def_siberite_detection := 1 ;
17426: LD_ADDR_EXP 67
17430: PUSH
17431: LD_INT 1
17433: ST_TO_ADDR
// def_people_respawning := 0 ;
17434: LD_ADDR_EXP 68
17438: PUSH
17439: LD_INT 0
17441: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
17442: LD_ADDR_EXP 69
17446: PUSH
17447: LD_INT 1
17449: ST_TO_ADDR
// def_siberite_bomb := 0 ;
17450: LD_ADDR_EXP 70
17454: PUSH
17455: LD_INT 0
17457: ST_TO_ADDR
// def_builduptime := 3 ;
17458: LD_ADDR_EXP 71
17462: PUSH
17463: LD_INT 3
17465: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
17466: LD_ADDR_VAR 0 2
17470: PUSH
17471: LD_INT 23
17473: PUSH
17474: EMPTY
17475: LIST
17476: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
17477: LD_ADDR_VAR 0 3
17481: PUSH
17482: LD_INT 37
17484: PUSH
17485: EMPTY
17486: LIST
17487: ST_TO_ADDR
// Banned_Weapons := [ ] ;
17488: LD_ADDR_LOC 56
17492: PUSH
17493: EMPTY
17494: ST_TO_ADDR
// Banned_Chassis := [ ] ;
17495: LD_ADDR_LOC 57
17499: PUSH
17500: EMPTY
17501: ST_TO_ADDR
// Banned_Controls := [ ] ;
17502: LD_ADDR_LOC 58
17506: PUSH
17507: EMPTY
17508: ST_TO_ADDR
// Banned_Engines := [ ] ;
17509: LD_ADDR_LOC 59
17513: PUSH
17514: EMPTY
17515: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
17516: LD_ADDR_LOC 54
17520: PUSH
17521: LD_INT 31
17523: PUSH
17524: LD_INT 32
17526: PUSH
17527: LD_INT 33
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: LIST
17534: PUSH
17535: EMPTY
17536: LIST
17537: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
17538: LD_ADDR_LOC 55
17542: PUSH
17543: LD_INT 10
17545: PUSH
17546: EMPTY
17547: LIST
17548: ST_TO_ADDR
// end ; 8 :
17549: GO 17960
17551: LD_INT 8
17553: DOUBLE
17554: EQUAL
17555: IFTRUE 17559
17557: GO 17959
17559: POP
// begin def_base_level := 0 ;
17560: LD_ADDR_EXP 58
17564: PUSH
17565: LD_INT 0
17567: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
17568: LD_ADDR_EXP 59
17572: PUSH
17573: LD_INT 0
17575: PPUSH
17576: LD_INT 1
17578: PPUSH
17579: CALL_OW 12
17583: ST_TO_ADDR
// def_skill_level := 0 ;
17584: LD_ADDR_EXP 60
17588: PUSH
17589: LD_INT 0
17591: ST_TO_ADDR
// def_starting_resources := 2 ;
17592: LD_ADDR_EXP 61
17596: PUSH
17597: LD_INT 2
17599: ST_TO_ADDR
// def_shipments_density := 1 ;
17600: LD_ADDR_EXP 62
17604: PUSH
17605: LD_INT 1
17607: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
17608: LD_ADDR_EXP 63
17612: PUSH
17613: LD_INT 0
17615: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
17616: LD_ADDR_EXP 64
17620: PUSH
17621: LD_INT 0
17623: ST_TO_ADDR
// def_shared_vision := 1 ;
17624: LD_ADDR_EXP 65
17628: PUSH
17629: LD_INT 1
17631: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
17632: LD_ADDR_EXP 66
17636: PUSH
17637: LD_INT 0
17639: PPUSH
17640: LD_INT 2
17642: PPUSH
17643: CALL_OW 12
17647: ST_TO_ADDR
// def_siberite_detection := 0 ;
17648: LD_ADDR_EXP 67
17652: PUSH
17653: LD_INT 0
17655: ST_TO_ADDR
// def_people_respawning := 0 ;
17656: LD_ADDR_EXP 68
17660: PUSH
17661: LD_INT 0
17663: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
17664: LD_ADDR_EXP 69
17668: PUSH
17669: LD_INT 2
17671: ST_TO_ADDR
// def_siberite_bomb := 0 ;
17672: LD_ADDR_EXP 70
17676: PUSH
17677: LD_INT 0
17679: ST_TO_ADDR
// def_builduptime := 0 ;
17680: LD_ADDR_EXP 71
17684: PUSH
17685: LD_INT 0
17687: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
17688: LD_ADDR_VAR 0 2
17692: PUSH
17693: LD_INT 23
17695: PUSH
17696: LD_INT 20
17698: PUSH
17699: LD_INT 40
17701: PUSH
17702: LD_INT 47
17704: PUSH
17705: LD_INT 46
17707: PUSH
17708: LD_INT 39
17710: PUSH
17711: LD_INT 71
17713: PUSH
17714: LD_INT 34
17716: PUSH
17717: LD_INT 41
17719: PUSH
17720: LD_INT 44
17722: PUSH
17723: LD_INT 17
17725: PUSH
17726: LD_INT 16
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
17743: LD_ADDR_VAR 0 3
17747: PUSH
17748: LD_INT 37
17750: PUSH
17751: LD_INT 5
17753: PUSH
17754: LD_INT 13
17756: PUSH
17757: LD_INT 34
17759: PUSH
17760: LD_INT 12
17762: PUSH
17763: LD_INT 15
17765: PUSH
17766: LD_INT 11
17768: PUSH
17769: LD_INT 14
17771: PUSH
17772: LD_INT 29
17774: PUSH
17775: LD_INT 30
17777: PUSH
17778: LD_INT 28
17780: PUSH
17781: LD_INT 24
17783: PUSH
17784: LD_INT 25
17786: PUSH
17787: LD_INT 20
17789: PUSH
17790: LD_INT 21
17792: PUSH
17793: LD_INT 22
17795: PUSH
17796: LD_INT 36
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: ST_TO_ADDR
// Banned_Weapons := [ ] ;
17818: LD_ADDR_LOC 56
17822: PUSH
17823: EMPTY
17824: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
17825: LD_ADDR_LOC 57
17829: PUSH
17830: LD_INT 14
17832: PUSH
17833: EMPTY
17834: LIST
17835: ST_TO_ADDR
// Banned_Controls := [ ] ;
17836: LD_ADDR_LOC 58
17840: PUSH
17841: EMPTY
17842: ST_TO_ADDR
// Banned_Engines := [ ] ;
17843: LD_ADDR_LOC 59
17847: PUSH
17848: EMPTY
17849: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
17850: LD_ADDR_LOC 54
17854: PUSH
17855: LD_INT 31
17857: PUSH
17858: LD_INT 32
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 4
17867: PUSH
17868: EMPTY
17869: LIST
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
17875: LD_ADDR_LOC 55
17879: PUSH
17880: LD_INT 2
17882: PUSH
17883: LD_INT 1
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: ST_TO_ADDR
// for i := 1 to 8 do
17890: LD_ADDR_VAR 0 4
17894: PUSH
17895: DOUBLE
17896: LD_INT 1
17898: DEC
17899: ST_TO_ADDR
17900: LD_INT 8
17902: PUSH
17903: FOR_TO
17904: IFFALSE 17955
// if ( Side_Nations [ i ] = 3 ) then
17906: LD_EXP 19
17910: PUSH
17911: LD_VAR 0 4
17915: ARRAY
17916: PUSH
17917: LD_INT 3
17919: EQUAL
17920: IFFALSE 17953
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
17922: LD_ADDR_EXP 19
17926: PUSH
17927: LD_EXP 19
17931: PPUSH
17932: LD_VAR 0 4
17936: PPUSH
17937: LD_INT 1
17939: PPUSH
17940: LD_INT 2
17942: PPUSH
17943: CALL_OW 12
17947: PPUSH
17948: CALL_OW 1
17952: ST_TO_ADDR
17953: GO 17903
17955: POP
17956: POP
// end ; end ;
17957: GO 17960
17959: POP
// for i := 1 to 8 do
17960: LD_ADDR_VAR 0 4
17964: PUSH
17965: DOUBLE
17966: LD_INT 1
17968: DEC
17969: ST_TO_ADDR
17970: LD_INT 8
17972: PUSH
17973: FOR_TO
17974: IFFALSE 18058
// if Side_Positions [ i ] then
17976: LD_EXP 18
17980: PUSH
17981: LD_VAR 0 4
17985: ARRAY
17986: IFFALSE 18056
// begin for j in Unavailable_Techs do
17988: LD_ADDR_VAR 0 5
17992: PUSH
17993: LD_VAR 0 2
17997: PUSH
17998: FOR_IN
17999: IFFALSE 18020
// SetTech ( j , i , 0 ) ;
18001: LD_VAR 0 5
18005: PPUSH
18006: LD_VAR 0 4
18010: PPUSH
18011: LD_INT 0
18013: PPUSH
18014: CALL_OW 322
18018: GO 17998
18020: POP
18021: POP
// for j in Unavailable_Builds do
18022: LD_ADDR_VAR 0 5
18026: PUSH
18027: LD_VAR 0 3
18031: PUSH
18032: FOR_IN
18033: IFFALSE 18054
// SetRestrict ( j , i , 0 ) ;
18035: LD_VAR 0 5
18039: PPUSH
18040: LD_VAR 0 4
18044: PPUSH
18045: LD_INT 0
18047: PPUSH
18048: CALL_OW 324
18052: GO 18032
18054: POP
18055: POP
// end ;
18056: GO 17973
18058: POP
18059: POP
// end ;
18060: LD_VAR 0 1
18064: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
18065: LD_INT 0
18067: PPUSH
18068: PPUSH
18069: PPUSH
18070: PPUSH
18071: PPUSH
18072: PPUSH
18073: PPUSH
// for i := 1 to Restricted_Builds do
18074: LD_ADDR_VAR 0 2
18078: PUSH
18079: DOUBLE
18080: LD_INT 1
18082: DEC
18083: ST_TO_ADDR
18084: LD_LOC 54
18088: PUSH
18089: FOR_TO
18090: IFFALSE 18400
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
18092: LD_LOC 54
18096: PUSH
18097: LD_VAR 0 2
18101: ARRAY
18102: PUSH
18103: LD_INT 1
18105: ARRAY
18106: PUSH
18107: LD_INT 31
18109: DOUBLE
18110: EQUAL
18111: IFTRUE 18127
18113: LD_INT 32
18115: DOUBLE
18116: EQUAL
18117: IFTRUE 18127
18119: LD_INT 33
18121: DOUBLE
18122: EQUAL
18123: IFTRUE 18127
18125: GO 18138
18127: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
18128: LD_ADDR_VAR 0 6
18132: PUSH
18133: LD_STRING #Turrets
18135: ST_TO_ADDR
18136: GO 18183
18138: LD_INT 4
18140: DOUBLE
18141: EQUAL
18142: IFTRUE 18152
18144: LD_INT 5
18146: DOUBLE
18147: EQUAL
18148: IFTRUE 18152
18150: GO 18163
18152: POP
// btype := #Armouries ; b_Behemoth :
18153: LD_ADDR_VAR 0 6
18157: PUSH
18158: LD_STRING #Armouries
18160: ST_TO_ADDR
18161: GO 18183
18163: LD_INT 37
18165: DOUBLE
18166: EQUAL
18167: IFTRUE 18171
18169: GO 18182
18171: POP
// btype := #Behemoths ; end ;
18172: LD_ADDR_VAR 0 6
18176: PUSH
18177: LD_STRING #Behemoths
18179: ST_TO_ADDR
18180: GO 18183
18182: POP
// list := [ ] ;
18183: LD_ADDR_VAR 0 7
18187: PUSH
18188: EMPTY
18189: ST_TO_ADDR
// for j := 1 to 8 do
18190: LD_ADDR_VAR 0 3
18194: PUSH
18195: DOUBLE
18196: LD_INT 1
18198: DEC
18199: ST_TO_ADDR
18200: LD_INT 8
18202: PUSH
18203: FOR_TO
18204: IFFALSE 18297
// if Side_Positions [ j ] then
18206: LD_EXP 18
18210: PUSH
18211: LD_VAR 0 3
18215: ARRAY
18216: IFFALSE 18295
// begin amount := 0 ;
18218: LD_ADDR_VAR 0 5
18222: PUSH
18223: LD_INT 0
18225: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
18226: LD_ADDR_VAR 0 4
18230: PUSH
18231: LD_LOC 54
18235: PUSH
18236: LD_VAR 0 2
18240: ARRAY
18241: PUSH
18242: FOR_IN
18243: IFFALSE 18291
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
18245: LD_ADDR_VAR 0 5
18249: PUSH
18250: LD_VAR 0 5
18254: PUSH
18255: LD_INT 22
18257: PUSH
18258: LD_VAR 0 3
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 30
18269: PUSH
18270: LD_VAR 0 4
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PPUSH
18283: CALL_OW 69
18287: PLUS
18288: ST_TO_ADDR
18289: GO 18242
18291: POP
18292: POP
// break ;
18293: GO 18297
// end ;
18295: GO 18203
18297: POP
18298: POP
// list := [ ] ;
18299: LD_ADDR_VAR 0 7
18303: PUSH
18304: EMPTY
18305: ST_TO_ADDR
// for j := 1 to 8 do
18306: LD_ADDR_VAR 0 3
18310: PUSH
18311: DOUBLE
18312: LD_INT 1
18314: DEC
18315: ST_TO_ADDR
18316: LD_INT 8
18318: PUSH
18319: FOR_TO
18320: IFFALSE 18340
// list := list ^ amount ;
18322: LD_ADDR_VAR 0 7
18326: PUSH
18327: LD_VAR 0 7
18331: PUSH
18332: LD_VAR 0 5
18336: ADD
18337: ST_TO_ADDR
18338: GO 18319
18340: POP
18341: POP
// Already_Built := Already_Built ^ [ list ] ;
18342: LD_ADDR_LOC 60
18346: PUSH
18347: LD_LOC 60
18351: PUSH
18352: LD_VAR 0 7
18356: PUSH
18357: EMPTY
18358: LIST
18359: ADD
18360: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
18361: LD_ADDR_LOC 61
18365: PUSH
18366: LD_LOC 61
18370: PUSH
18371: LD_VAR 0 6
18375: PUSH
18376: LD_VAR 0 5
18380: PUSH
18381: LD_LOC 55
18385: PUSH
18386: LD_VAR 0 2
18390: ARRAY
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: LIST
18396: ADD
18397: ST_TO_ADDR
// end ;
18398: GO 18089
18400: POP
18401: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
18402: LD_ADDR_LOC 62
18406: PUSH
18407: LD_INT 0
18409: PUSH
18410: LD_INT 0
18412: PUSH
18413: LD_INT 0
18415: PUSH
18416: LD_INT 0
18418: PUSH
18419: LD_INT 0
18421: PUSH
18422: LD_INT 0
18424: PUSH
18425: LD_INT 0
18427: PUSH
18428: LD_INT 0
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: ST_TO_ADDR
// if Limits_Info then
18441: LD_LOC 61
18445: IFFALSE 18461
// Limits_Info := #Limits ^ Limits_Info ;
18447: LD_ADDR_LOC 61
18451: PUSH
18452: LD_STRING #Limits
18454: PUSH
18455: LD_LOC 61
18459: ADD
18460: ST_TO_ADDR
// end ;
18461: LD_VAR 0 1
18465: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
18466: LD_INT 0
18468: PPUSH
18469: PPUSH
18470: PPUSH
18471: PPUSH
// for i := 1 to Restricted_Builds do
18472: LD_ADDR_VAR 0 7
18476: PUSH
18477: DOUBLE
18478: LD_INT 1
18480: DEC
18481: ST_TO_ADDR
18482: LD_LOC 54
18486: PUSH
18487: FOR_TO
18488: IFFALSE 18911
// if BType in Restricted_Builds [ i ] then
18490: LD_VAR 0 2
18494: PUSH
18495: LD_LOC 54
18499: PUSH
18500: LD_VAR 0 7
18504: ARRAY
18505: IN
18506: IFFALSE 18909
// begin if old_side then
18508: LD_VAR 0 4
18512: IFFALSE 18638
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
18514: LD_LOC 60
18518: PUSH
18519: LD_VAR 0 7
18523: ARRAY
18524: PUSH
18525: LD_VAR 0 3
18529: ARRAY
18530: PUSH
18531: LD_VAR 0 5
18535: PLUS
18536: PUSH
18537: LD_LOC 55
18541: PUSH
18542: LD_VAR 0 7
18546: ARRAY
18547: GREATER
18548: IFFALSE 18574
// begin SetSide ( un , old_side ) ;
18550: LD_VAR 0 1
18554: PPUSH
18555: LD_VAR 0 4
18559: PPUSH
18560: CALL_OW 235
// count := 0 ;
18564: LD_ADDR_VAR 0 5
18568: PUSH
18569: LD_INT 0
18571: ST_TO_ADDR
// end else
18572: GO 18638
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
18574: LD_ADDR_LOC 60
18578: PUSH
18579: LD_LOC 60
18583: PPUSH
18584: LD_VAR 0 7
18588: PPUSH
18589: LD_LOC 60
18593: PUSH
18594: LD_VAR 0 7
18598: ARRAY
18599: PPUSH
18600: LD_VAR 0 4
18604: PPUSH
18605: LD_LOC 60
18609: PUSH
18610: LD_VAR 0 7
18614: ARRAY
18615: PUSH
18616: LD_VAR 0 4
18620: ARRAY
18621: PUSH
18622: LD_VAR 0 5
18626: MINUS
18627: PPUSH
18628: CALL_OW 1
18632: PPUSH
18633: CALL_OW 1
18637: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
18638: LD_ADDR_LOC 60
18642: PUSH
18643: LD_LOC 60
18647: PPUSH
18648: LD_VAR 0 7
18652: PPUSH
18653: LD_LOC 60
18657: PUSH
18658: LD_VAR 0 7
18662: ARRAY
18663: PPUSH
18664: LD_VAR 0 3
18668: PPUSH
18669: LD_LOC 60
18673: PUSH
18674: LD_VAR 0 7
18678: ARRAY
18679: PUSH
18680: LD_VAR 0 3
18684: ARRAY
18685: PUSH
18686: LD_VAR 0 5
18690: PLUS
18691: PPUSH
18692: CALL_OW 1
18696: PPUSH
18697: CALL_OW 1
18701: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
18702: LD_VAR 0 5
18706: PUSH
18707: LD_INT 0
18709: NONEQUAL
18710: PUSH
18711: LD_VAR 0 3
18715: PUSH
18716: LD_OWVAR 2
18720: EQUAL
18721: AND
18722: IFFALSE 18765
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
18724: LD_ADDR_LOC 61
18728: PUSH
18729: LD_LOC 61
18733: PPUSH
18734: LD_INT 3
18736: PUSH
18737: LD_VAR 0 7
18741: MUL
18742: PPUSH
18743: LD_LOC 60
18747: PUSH
18748: LD_VAR 0 7
18752: ARRAY
18753: PUSH
18754: LD_VAR 0 3
18758: ARRAY
18759: PPUSH
18760: CALL_OW 1
18764: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
18765: LD_LOC 60
18769: PUSH
18770: LD_VAR 0 7
18774: ARRAY
18775: PUSH
18776: LD_VAR 0 3
18780: ARRAY
18781: PUSH
18782: LD_LOC 55
18786: PUSH
18787: LD_VAR 0 7
18791: ARRAY
18792: GREATER
18793: IFFALSE 18820
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
18795: LD_ADDR_LOC 62
18799: PUSH
18800: LD_LOC 62
18804: PPUSH
18805: LD_VAR 0 3
18809: PPUSH
18810: LD_INT 1
18812: PPUSH
18813: CALL_OW 1
18817: ST_TO_ADDR
// end else
18818: GO 18907
// begin for j := 1 to Restricted_Builds do
18820: LD_ADDR_VAR 0 8
18824: PUSH
18825: DOUBLE
18826: LD_INT 1
18828: DEC
18829: ST_TO_ADDR
18830: LD_LOC 54
18834: PUSH
18835: FOR_TO
18836: IFFALSE 18880
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
18838: LD_LOC 60
18842: PUSH
18843: LD_VAR 0 8
18847: ARRAY
18848: PUSH
18849: LD_VAR 0 3
18853: ARRAY
18854: PUSH
18855: LD_LOC 55
18859: PUSH
18860: LD_VAR 0 8
18864: ARRAY
18865: GREATER
18866: IFFALSE 18878
// begin Is_Cheater := true ;
18868: LD_ADDR_VAR 0 9
18872: PUSH
18873: LD_INT 1
18875: ST_TO_ADDR
// break ;
18876: GO 18880
// end ;
18878: GO 18835
18880: POP
18881: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
18882: LD_ADDR_LOC 62
18886: PUSH
18887: LD_LOC 62
18891: PPUSH
18892: LD_VAR 0 3
18896: PPUSH
18897: LD_VAR 0 9
18901: PPUSH
18902: CALL_OW 1
18906: ST_TO_ADDR
// end ; break ;
18907: GO 18911
// end ;
18909: GO 18487
18911: POP
18912: POP
// end ;
18913: LD_VAR 0 6
18917: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
18918: LD_VAR 0 5
18922: PUSH
18923: LD_LOC 56
18927: IN
18928: PUSH
18929: LD_VAR 0 2
18933: PUSH
18934: LD_LOC 57
18938: IN
18939: OR
18940: PUSH
18941: LD_VAR 0 4
18945: PUSH
18946: LD_LOC 58
18950: IN
18951: OR
18952: PUSH
18953: LD_VAR 0 3
18957: PUSH
18958: LD_LOC 59
18962: IN
18963: OR
18964: IFFALSE 18975
// ComCancel ( factory ) ;
18966: LD_VAR 0 1
18970: PPUSH
18971: CALL_OW 127
// end ;
18975: PPOPN 5
18977: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
18978: LD_VAR 0 2
18982: PUSH
18983: LD_LOC 56
18987: IN
18988: IFFALSE 18999
// ComCancel ( building ) ;
18990: LD_VAR 0 1
18994: PPUSH
18995: CALL_OW 127
// end ; end_of_file
18999: PPOPN 2
19001: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
19002: LD_INT 0
19004: PPUSH
19005: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
19006: LD_ADDR_VAR 0 2
19010: PUSH
19011: LD_STRING #Multi1x1-Time
19013: PUSH
19014: LD_OWVAR 1
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
19023: LD_INT 0
19025: PUSH
19026: LD_EXP 15
19030: PUSH
19031: LD_OWVAR 1
19035: MINUS
19036: LESSEQUAL
19037: IFFALSE 19068
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
19039: LD_ADDR_VAR 0 2
19043: PUSH
19044: LD_VAR 0 2
19048: PUSH
19049: LD_STRING #allowedsibbomb
19051: PUSH
19052: LD_EXP 15
19056: PUSH
19057: LD_OWVAR 1
19061: MINUS
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: ADD
19067: ST_TO_ADDR
// if ( ExtraStrings ) then
19068: LD_EXP 73
19072: IFFALSE 19094
// AllStrings := AllStrings ^  ^ ExtraStrings ;
19074: LD_ADDR_VAR 0 2
19078: PUSH
19079: LD_VAR 0 2
19083: PUSH
19084: LD_STRING 
19086: ADD
19087: PUSH
19088: LD_EXP 73
19092: ADD
19093: ST_TO_ADDR
// if ( LimitsStrings ) then
19094: CALL 15842 0 0
19098: IFFALSE 19120
// AllStrings := AllStrings ^  ^ LimitsStrings ;
19100: LD_ADDR_VAR 0 2
19104: PUSH
19105: LD_VAR 0 2
19109: PUSH
19110: LD_STRING 
19112: ADD
19113: PUSH
19114: CALL 15842 0 0
19118: ADD
19119: ST_TO_ADDR
// Display_Strings := AllStrings ;
19120: LD_ADDR_OWVAR 47
19124: PUSH
19125: LD_VAR 0 2
19129: ST_TO_ADDR
// end ;
19130: LD_VAR 0 1
19134: RET
// every 0 0$1 do
19135: GO 19137
19137: DISABLE
// begin ShowTimer ;
19138: CALL 19002 0 0
// enable ;
19142: ENABLE
// end ; end_of_file
19143: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
19144: LD_INT 0
19146: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
19147: LD_VAR 0 1
19151: PPUSH
19152: CALL_OW 255
19156: PUSH
19157: LD_VAR 0 4
19161: EQUAL
19162: IFFALSE 19181
// begin SetAchievement ( ACH_RAD ) ;
19164: LD_STRING ACH_RAD
19166: PPUSH
19167: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
19171: LD_STRING ACH_NL
19173: PPUSH
19174: LD_INT 1
19176: PPUSH
19177: CALL_OW 564
// end end ;
19181: LD_VAR 0 5
19185: RET
// export function SA_Win ( side ) ; begin
19186: LD_INT 0
19188: PPUSH
// case side of 1 :
19189: LD_VAR 0 1
19193: PUSH
19194: LD_INT 1
19196: DOUBLE
19197: EQUAL
19198: IFTRUE 19202
19200: GO 19215
19202: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
19203: LD_STRING ACH_AH
19205: PPUSH
19206: LD_INT 1
19208: PPUSH
19209: CALL_OW 564
19213: GO 19378
19215: LD_INT 2
19217: DOUBLE
19218: EQUAL
19219: IFTRUE 19223
19221: GO 19236
19223: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
19224: LD_STRING ACH_E
19226: PPUSH
19227: LD_INT 1
19229: PPUSH
19230: CALL_OW 564
19234: GO 19378
19236: LD_INT 3
19238: DOUBLE
19239: EQUAL
19240: IFTRUE 19244
19242: GO 19257
19244: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
19245: LD_STRING ACH_OOL
19247: PPUSH
19248: LD_INT 1
19250: PPUSH
19251: CALL_OW 564
19255: GO 19378
19257: LD_INT 1
19259: PUSH
19260: LD_INT 2
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: DOUBLE
19267: EQUAL
19268: IFTRUE 19272
19270: GO 19297
19272: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
19273: LD_STRING ACH_AH
19275: PPUSH
19276: LD_REAL  5.00000000000000E-0001
19279: PPUSH
19280: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
19284: LD_STRING ACH_E
19286: PPUSH
19287: LD_REAL  5.00000000000000E-0001
19290: PPUSH
19291: CALL_OW 564
// end ; [ 2 , 3 ] :
19295: GO 19378
19297: LD_INT 2
19299: PUSH
19300: LD_INT 3
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: DOUBLE
19307: EQUAL
19308: IFTRUE 19312
19310: GO 19337
19312: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
19313: LD_STRING ACH_OOL
19315: PPUSH
19316: LD_REAL  5.00000000000000E-0001
19319: PPUSH
19320: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
19324: LD_STRING ACH_E
19326: PPUSH
19327: LD_REAL  5.00000000000000E-0001
19330: PPUSH
19331: CALL_OW 564
// end ; [ 3 , 1 ] :
19335: GO 19378
19337: LD_INT 3
19339: PUSH
19340: LD_INT 1
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: DOUBLE
19347: EQUAL
19348: IFTRUE 19352
19350: GO 19377
19352: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
19353: LD_STRING ACH_AH
19355: PPUSH
19356: LD_REAL  5.00000000000000E-0001
19359: PPUSH
19360: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
19364: LD_STRING ACH_OOL
19366: PPUSH
19367: LD_REAL  5.00000000000000E-0001
19370: PPUSH
19371: CALL_OW 564
// end ; end ;
19375: GO 19378
19377: POP
// end ; end_of_file
19378: LD_VAR 0 2
19382: RET
// export function SetMpTechs ( ) ; var side , i ; begin
19383: LD_INT 0
19385: PPUSH
19386: PPUSH
19387: PPUSH
// for side = 1 to 8 do
19388: LD_ADDR_VAR 0 2
19392: PUSH
19393: DOUBLE
19394: LD_INT 1
19396: DEC
19397: ST_TO_ADDR
19398: LD_INT 8
19400: PUSH
19401: FOR_TO
19402: IFFALSE 19523
// begin for i = 1 to 72 do
19404: LD_ADDR_VAR 0 3
19408: PUSH
19409: DOUBLE
19410: LD_INT 1
19412: DEC
19413: ST_TO_ADDR
19414: LD_INT 72
19416: PUSH
19417: FOR_TO
19418: IFFALSE 19449
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
19420: LD_VAR 0 3
19424: PPUSH
19425: LD_VAR 0 2
19429: PPUSH
19430: LD_INT 0
19432: PPUSH
19433: LD_VAR 0 3
19437: PPUSH
19438: CALL_OW 565
19442: PPUSH
19443: CALL_OW 322
19447: GO 19417
19449: POP
19450: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
19451: LD_INT 73
19453: PPUSH
19454: LD_VAR 0 2
19458: PPUSH
19459: LD_INT 0
19461: PPUSH
19462: LD_INT 25
19464: PPUSH
19465: CALL_OW 565
19469: PPUSH
19470: CALL_OW 322
// for i = 0 to 40 do
19474: LD_ADDR_VAR 0 3
19478: PUSH
19479: DOUBLE
19480: LD_INT 0
19482: DEC
19483: ST_TO_ADDR
19484: LD_INT 40
19486: PUSH
19487: FOR_TO
19488: IFFALSE 19519
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
19490: LD_VAR 0 3
19494: PPUSH
19495: LD_VAR 0 2
19499: PPUSH
19500: LD_INT 1
19502: PPUSH
19503: LD_VAR 0 3
19507: PPUSH
19508: CALL_OW 565
19512: PPUSH
19513: CALL_OW 324
19517: GO 19487
19519: POP
19520: POP
// end ;
19521: GO 19401
19523: POP
19524: POP
// end ;
19525: LD_VAR 0 1
19529: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
19530: LD_INT 0
19532: PPUSH
19533: PPUSH
19534: PPUSH
// for side = 1 to 8 do
19535: LD_ADDR_VAR 0 3
19539: PUSH
19540: DOUBLE
19541: LD_INT 1
19543: DEC
19544: ST_TO_ADDR
19545: LD_INT 8
19547: PUSH
19548: FOR_TO
19549: IFFALSE 23545
// begin for i = 1 to 73 do
19551: LD_ADDR_VAR 0 4
19555: PUSH
19556: DOUBLE
19557: LD_INT 1
19559: DEC
19560: ST_TO_ADDR
19561: LD_INT 73
19563: PUSH
19564: FOR_TO
19565: IFFALSE 19586
// SetTech ( i , side , state_disabled ) ;
19567: LD_VAR 0 4
19571: PPUSH
19572: LD_VAR 0 3
19576: PPUSH
19577: LD_INT 0
19579: PPUSH
19580: CALL_OW 322
19584: GO 19564
19586: POP
19587: POP
// for i = 0 to 40 do
19588: LD_ADDR_VAR 0 4
19592: PUSH
19593: DOUBLE
19594: LD_INT 0
19596: DEC
19597: ST_TO_ADDR
19598: LD_INT 40
19600: PUSH
19601: FOR_TO
19602: IFFALSE 19623
// SetRestrict ( i , side , false ) ;
19604: LD_VAR 0 4
19608: PPUSH
19609: LD_VAR 0 3
19613: PPUSH
19614: LD_INT 0
19616: PPUSH
19617: CALL_OW 324
19621: GO 19601
19623: POP
19624: POP
// case level of 1 :
19625: LD_VAR 0 1
19629: PUSH
19630: LD_INT 1
19632: DOUBLE
19633: EQUAL
19634: IFTRUE 19638
19636: GO 19791
19638: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19639: LD_INT 35
19641: PPUSH
19642: LD_VAR 0 3
19646: PPUSH
19647: LD_INT 1
19649: PPUSH
19650: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19654: LD_INT 45
19656: PPUSH
19657: LD_VAR 0 3
19661: PPUSH
19662: LD_INT 1
19664: PPUSH
19665: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19669: LD_INT 46
19671: PPUSH
19672: LD_VAR 0 3
19676: PPUSH
19677: LD_INT 1
19679: PPUSH
19680: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19684: LD_INT 47
19686: PPUSH
19687: LD_VAR 0 3
19691: PPUSH
19692: LD_INT 1
19694: PPUSH
19695: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
19699: LD_INT 0
19701: PPUSH
19702: LD_VAR 0 3
19706: PPUSH
19707: LD_INT 1
19709: PPUSH
19710: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
19714: LD_INT 2
19716: PPUSH
19717: LD_VAR 0 3
19721: PPUSH
19722: LD_INT 1
19724: PPUSH
19725: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
19729: LD_INT 4
19731: PPUSH
19732: LD_VAR 0 3
19736: PPUSH
19737: LD_INT 1
19739: PPUSH
19740: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
19744: LD_INT 6
19746: PPUSH
19747: LD_VAR 0 3
19751: PPUSH
19752: LD_INT 1
19754: PPUSH
19755: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
19759: LD_INT 29
19761: PPUSH
19762: LD_VAR 0 3
19766: PPUSH
19767: LD_INT 1
19769: PPUSH
19770: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
19774: LD_INT 31
19776: PPUSH
19777: LD_VAR 0 3
19781: PPUSH
19782: LD_INT 1
19784: PPUSH
19785: CALL_OW 324
// end ; 2 :
19789: GO 23543
19791: LD_INT 2
19793: DOUBLE
19794: EQUAL
19795: IFTRUE 19799
19797: GO 19997
19799: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19800: LD_INT 35
19802: PPUSH
19803: LD_VAR 0 3
19807: PPUSH
19808: LD_INT 1
19810: PPUSH
19811: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19815: LD_INT 45
19817: PPUSH
19818: LD_VAR 0 3
19822: PPUSH
19823: LD_INT 1
19825: PPUSH
19826: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19830: LD_INT 46
19832: PPUSH
19833: LD_VAR 0 3
19837: PPUSH
19838: LD_INT 1
19840: PPUSH
19841: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19845: LD_INT 47
19847: PPUSH
19848: LD_VAR 0 3
19852: PPUSH
19853: LD_INT 1
19855: PPUSH
19856: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
19860: LD_INT 1
19862: PPUSH
19863: LD_VAR 0 3
19867: PPUSH
19868: LD_INT 1
19870: PPUSH
19871: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
19875: LD_INT 2
19877: PPUSH
19878: LD_VAR 0 3
19882: PPUSH
19883: LD_INT 1
19885: PPUSH
19886: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
19890: LD_INT 11
19892: PPUSH
19893: LD_VAR 0 3
19897: PPUSH
19898: LD_INT 1
19900: PPUSH
19901: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
19905: LD_INT 0
19907: PPUSH
19908: LD_VAR 0 3
19912: PPUSH
19913: LD_INT 1
19915: PPUSH
19916: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
19920: LD_INT 2
19922: PPUSH
19923: LD_VAR 0 3
19927: PPUSH
19928: LD_INT 1
19930: PPUSH
19931: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
19935: LD_INT 4
19937: PPUSH
19938: LD_VAR 0 3
19942: PPUSH
19943: LD_INT 1
19945: PPUSH
19946: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
19950: LD_INT 6
19952: PPUSH
19953: LD_VAR 0 3
19957: PPUSH
19958: LD_INT 1
19960: PPUSH
19961: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
19965: LD_INT 29
19967: PPUSH
19968: LD_VAR 0 3
19972: PPUSH
19973: LD_INT 1
19975: PPUSH
19976: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
19980: LD_INT 31
19982: PPUSH
19983: LD_VAR 0 3
19987: PPUSH
19988: LD_INT 1
19990: PPUSH
19991: CALL_OW 324
// end ; 3 :
19995: GO 23543
19997: LD_INT 3
19999: DOUBLE
20000: EQUAL
20001: IFTRUE 20005
20003: GO 20458
20005: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
20006: LD_INT 35
20008: PPUSH
20009: LD_VAR 0 3
20013: PPUSH
20014: LD_INT 1
20016: PPUSH
20017: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
20021: LD_INT 45
20023: PPUSH
20024: LD_VAR 0 3
20028: PPUSH
20029: LD_INT 1
20031: PPUSH
20032: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
20036: LD_INT 46
20038: PPUSH
20039: LD_VAR 0 3
20043: PPUSH
20044: LD_INT 1
20046: PPUSH
20047: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
20051: LD_INT 47
20053: PPUSH
20054: LD_VAR 0 3
20058: PPUSH
20059: LD_INT 1
20061: PPUSH
20062: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
20066: LD_INT 1
20068: PPUSH
20069: LD_VAR 0 3
20073: PPUSH
20074: LD_INT 1
20076: PPUSH
20077: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
20081: LD_INT 2
20083: PPUSH
20084: LD_VAR 0 3
20088: PPUSH
20089: LD_INT 1
20091: PPUSH
20092: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
20096: LD_INT 11
20098: PPUSH
20099: LD_VAR 0 3
20103: PPUSH
20104: LD_INT 1
20106: PPUSH
20107: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
20111: LD_INT 48
20113: PPUSH
20114: LD_VAR 0 3
20118: PPUSH
20119: LD_INT 1
20121: PPUSH
20122: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
20126: LD_INT 69
20128: PPUSH
20129: LD_VAR 0 3
20133: PPUSH
20134: LD_INT 1
20136: PPUSH
20137: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
20141: LD_INT 39
20143: PPUSH
20144: LD_VAR 0 3
20148: PPUSH
20149: LD_INT 1
20151: PPUSH
20152: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
20156: LD_INT 43
20158: PPUSH
20159: LD_VAR 0 3
20163: PPUSH
20164: LD_INT 1
20166: PPUSH
20167: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
20171: LD_INT 51
20173: PPUSH
20174: LD_VAR 0 3
20178: PPUSH
20179: LD_INT 1
20181: PPUSH
20182: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
20186: LD_INT 6
20188: PPUSH
20189: LD_VAR 0 3
20193: PPUSH
20194: LD_INT 1
20196: PPUSH
20197: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
20201: LD_INT 0
20203: PPUSH
20204: LD_VAR 0 3
20208: PPUSH
20209: LD_INT 1
20211: PPUSH
20212: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
20216: LD_INT 2
20218: PPUSH
20219: LD_VAR 0 3
20223: PPUSH
20224: LD_INT 1
20226: PPUSH
20227: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
20231: LD_INT 3
20233: PPUSH
20234: LD_VAR 0 3
20238: PPUSH
20239: LD_INT 1
20241: PPUSH
20242: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
20246: LD_INT 4
20248: PPUSH
20249: LD_VAR 0 3
20253: PPUSH
20254: LD_INT 1
20256: PPUSH
20257: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
20261: LD_INT 6
20263: PPUSH
20264: LD_VAR 0 3
20268: PPUSH
20269: LD_INT 1
20271: PPUSH
20272: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
20276: LD_INT 7
20278: PPUSH
20279: LD_VAR 0 3
20283: PPUSH
20284: LD_INT 1
20286: PPUSH
20287: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
20291: LD_INT 8
20293: PPUSH
20294: LD_VAR 0 3
20298: PPUSH
20299: LD_INT 1
20301: PPUSH
20302: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
20306: LD_INT 10
20308: PPUSH
20309: LD_VAR 0 3
20313: PPUSH
20314: LD_INT 1
20316: PPUSH
20317: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
20321: LD_INT 15
20323: PPUSH
20324: LD_VAR 0 3
20328: PPUSH
20329: LD_INT 1
20331: PPUSH
20332: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
20336: LD_INT 16
20338: PPUSH
20339: LD_VAR 0 3
20343: PPUSH
20344: LD_INT 1
20346: PPUSH
20347: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
20351: LD_INT 17
20353: PPUSH
20354: LD_VAR 0 3
20358: PPUSH
20359: LD_INT 1
20361: PPUSH
20362: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
20366: LD_INT 20
20368: PPUSH
20369: LD_VAR 0 3
20373: PPUSH
20374: LD_INT 1
20376: PPUSH
20377: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
20381: LD_INT 26
20383: PPUSH
20384: LD_VAR 0 3
20388: PPUSH
20389: LD_INT 1
20391: PPUSH
20392: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
20396: LD_INT 27
20398: PPUSH
20399: LD_VAR 0 3
20403: PPUSH
20404: LD_INT 1
20406: PPUSH
20407: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
20411: LD_INT 29
20413: PPUSH
20414: LD_VAR 0 3
20418: PPUSH
20419: LD_INT 1
20421: PPUSH
20422: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
20426: LD_INT 31
20428: PPUSH
20429: LD_VAR 0 3
20433: PPUSH
20434: LD_INT 1
20436: PPUSH
20437: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
20441: LD_INT 32
20443: PPUSH
20444: LD_VAR 0 3
20448: PPUSH
20449: LD_INT 1
20451: PPUSH
20452: CALL_OW 324
// end ; 4 :
20456: GO 23543
20458: LD_INT 4
20460: DOUBLE
20461: EQUAL
20462: IFTRUE 20466
20464: GO 21414
20466: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
20467: LD_INT 35
20469: PPUSH
20470: LD_VAR 0 3
20474: PPUSH
20475: LD_INT 1
20477: PPUSH
20478: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
20482: LD_INT 45
20484: PPUSH
20485: LD_VAR 0 3
20489: PPUSH
20490: LD_INT 1
20492: PPUSH
20493: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
20497: LD_INT 46
20499: PPUSH
20500: LD_VAR 0 3
20504: PPUSH
20505: LD_INT 1
20507: PPUSH
20508: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
20512: LD_INT 47
20514: PPUSH
20515: LD_VAR 0 3
20519: PPUSH
20520: LD_INT 1
20522: PPUSH
20523: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
20527: LD_INT 1
20529: PPUSH
20530: LD_VAR 0 3
20534: PPUSH
20535: LD_INT 1
20537: PPUSH
20538: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
20542: LD_INT 2
20544: PPUSH
20545: LD_VAR 0 3
20549: PPUSH
20550: LD_INT 1
20552: PPUSH
20553: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
20557: LD_INT 11
20559: PPUSH
20560: LD_VAR 0 3
20564: PPUSH
20565: LD_INT 1
20567: PPUSH
20568: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
20572: LD_INT 20
20574: PPUSH
20575: LD_VAR 0 3
20579: PPUSH
20580: LD_INT 1
20582: PPUSH
20583: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
20587: LD_INT 48
20589: PPUSH
20590: LD_VAR 0 3
20594: PPUSH
20595: LD_INT 1
20597: PPUSH
20598: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
20602: LD_INT 49
20604: PPUSH
20605: LD_VAR 0 3
20609: PPUSH
20610: LD_INT 1
20612: PPUSH
20613: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
20617: LD_INT 69
20619: PPUSH
20620: LD_VAR 0 3
20624: PPUSH
20625: LD_INT 1
20627: PPUSH
20628: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
20632: LD_INT 39
20634: PPUSH
20635: LD_VAR 0 3
20639: PPUSH
20640: LD_INT 1
20642: PPUSH
20643: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
20647: LD_INT 34
20649: PPUSH
20650: LD_VAR 0 3
20654: PPUSH
20655: LD_INT 1
20657: PPUSH
20658: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
20662: LD_INT 42
20664: PPUSH
20665: LD_VAR 0 3
20669: PPUSH
20670: LD_INT 1
20672: PPUSH
20673: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
20677: LD_INT 44
20679: PPUSH
20680: LD_VAR 0 3
20684: PPUSH
20685: LD_INT 1
20687: PPUSH
20688: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
20692: LD_INT 41
20694: PPUSH
20695: LD_VAR 0 3
20699: PPUSH
20700: LD_INT 1
20702: PPUSH
20703: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
20707: LD_INT 43
20709: PPUSH
20710: LD_VAR 0 3
20714: PPUSH
20715: LD_INT 1
20717: PPUSH
20718: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
20722: LD_INT 70
20724: PPUSH
20725: LD_VAR 0 3
20729: PPUSH
20730: LD_INT 1
20732: PPUSH
20733: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
20737: LD_INT 51
20739: PPUSH
20740: LD_VAR 0 3
20744: PPUSH
20745: LD_INT 1
20747: PPUSH
20748: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
20752: LD_INT 52
20754: PPUSH
20755: LD_VAR 0 3
20759: PPUSH
20760: LD_INT 1
20762: PPUSH
20763: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
20767: LD_INT 6
20769: PPUSH
20770: LD_VAR 0 3
20774: PPUSH
20775: LD_INT 1
20777: PPUSH
20778: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
20782: LD_INT 15
20784: PPUSH
20785: LD_VAR 0 3
20789: PPUSH
20790: LD_INT 1
20792: PPUSH
20793: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
20797: LD_INT 7
20799: PPUSH
20800: LD_VAR 0 3
20804: PPUSH
20805: LD_INT 1
20807: PPUSH
20808: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
20812: LD_INT 12
20814: PPUSH
20815: LD_VAR 0 3
20819: PPUSH
20820: LD_INT 1
20822: PPUSH
20823: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
20827: LD_INT 18
20829: PPUSH
20830: LD_VAR 0 3
20834: PPUSH
20835: LD_INT 1
20837: PPUSH
20838: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
20842: LD_INT 60
20844: PPUSH
20845: LD_VAR 0 3
20849: PPUSH
20850: LD_INT 1
20852: PPUSH
20853: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
20857: LD_INT 9
20859: PPUSH
20860: LD_VAR 0 3
20864: PPUSH
20865: LD_INT 1
20867: PPUSH
20868: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
20872: LD_INT 30
20874: PPUSH
20875: LD_VAR 0 3
20879: PPUSH
20880: LD_INT 1
20882: PPUSH
20883: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
20887: LD_INT 37
20889: PPUSH
20890: LD_VAR 0 3
20894: PPUSH
20895: LD_INT 1
20897: PPUSH
20898: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
20902: LD_INT 5
20904: PPUSH
20905: LD_VAR 0 3
20909: PPUSH
20910: LD_INT 1
20912: PPUSH
20913: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
20917: LD_INT 66
20919: PPUSH
20920: LD_VAR 0 3
20924: PPUSH
20925: LD_INT 1
20927: PPUSH
20928: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
20932: LD_INT 21
20934: PPUSH
20935: LD_VAR 0 3
20939: PPUSH
20940: LD_INT 1
20942: PPUSH
20943: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
20947: LD_INT 22
20949: PPUSH
20950: LD_VAR 0 3
20954: PPUSH
20955: LD_INT 1
20957: PPUSH
20958: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
20962: LD_INT 54
20964: PPUSH
20965: LD_VAR 0 3
20969: PPUSH
20970: LD_INT 1
20972: PPUSH
20973: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
20977: LD_INT 0
20979: PPUSH
20980: LD_VAR 0 3
20984: PPUSH
20985: LD_INT 1
20987: PPUSH
20988: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
20992: LD_INT 1
20994: PPUSH
20995: LD_VAR 0 3
20999: PPUSH
21000: LD_INT 1
21002: PPUSH
21003: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
21007: LD_INT 2
21009: PPUSH
21010: LD_VAR 0 3
21014: PPUSH
21015: LD_INT 1
21017: PPUSH
21018: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
21022: LD_INT 3
21024: PPUSH
21025: LD_VAR 0 3
21029: PPUSH
21030: LD_INT 1
21032: PPUSH
21033: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
21037: LD_INT 4
21039: PPUSH
21040: LD_VAR 0 3
21044: PPUSH
21045: LD_INT 1
21047: PPUSH
21048: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
21052: LD_INT 5
21054: PPUSH
21055: LD_VAR 0 3
21059: PPUSH
21060: LD_INT 1
21062: PPUSH
21063: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
21067: LD_INT 6
21069: PPUSH
21070: LD_VAR 0 3
21074: PPUSH
21075: LD_INT 1
21077: PPUSH
21078: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
21082: LD_INT 7
21084: PPUSH
21085: LD_VAR 0 3
21089: PPUSH
21090: LD_INT 1
21092: PPUSH
21093: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
21097: LD_INT 8
21099: PPUSH
21100: LD_VAR 0 3
21104: PPUSH
21105: LD_INT 1
21107: PPUSH
21108: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
21112: LD_INT 10
21114: PPUSH
21115: LD_VAR 0 3
21119: PPUSH
21120: LD_INT 1
21122: PPUSH
21123: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
21127: LD_INT 11
21129: PPUSH
21130: LD_VAR 0 3
21134: PPUSH
21135: LD_INT 1
21137: PPUSH
21138: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
21142: LD_INT 12
21144: PPUSH
21145: LD_VAR 0 3
21149: PPUSH
21150: LD_INT 1
21152: PPUSH
21153: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
21157: LD_INT 13
21159: PPUSH
21160: LD_VAR 0 3
21164: PPUSH
21165: LD_INT 1
21167: PPUSH
21168: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
21172: LD_INT 14
21174: PPUSH
21175: LD_VAR 0 3
21179: PPUSH
21180: LD_INT 1
21182: PPUSH
21183: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
21187: LD_INT 15
21189: PPUSH
21190: LD_VAR 0 3
21194: PPUSH
21195: LD_INT 1
21197: PPUSH
21198: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
21202: LD_INT 16
21204: PPUSH
21205: LD_VAR 0 3
21209: PPUSH
21210: LD_INT 1
21212: PPUSH
21213: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
21217: LD_INT 17
21219: PPUSH
21220: LD_VAR 0 3
21224: PPUSH
21225: LD_INT 1
21227: PPUSH
21228: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
21232: LD_INT 19
21234: PPUSH
21235: LD_VAR 0 3
21239: PPUSH
21240: LD_INT 1
21242: PPUSH
21243: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
21247: LD_INT 20
21249: PPUSH
21250: LD_VAR 0 3
21254: PPUSH
21255: LD_INT 1
21257: PPUSH
21258: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
21262: LD_INT 21
21264: PPUSH
21265: LD_VAR 0 3
21269: PPUSH
21270: LD_INT 1
21272: PPUSH
21273: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
21277: LD_INT 23
21279: PPUSH
21280: LD_VAR 0 3
21284: PPUSH
21285: LD_INT 1
21287: PPUSH
21288: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
21292: LD_INT 26
21294: PPUSH
21295: LD_VAR 0 3
21299: PPUSH
21300: LD_INT 1
21302: PPUSH
21303: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
21307: LD_INT 27
21309: PPUSH
21310: LD_VAR 0 3
21314: PPUSH
21315: LD_INT 1
21317: PPUSH
21318: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
21322: LD_INT 28
21324: PPUSH
21325: LD_VAR 0 3
21329: PPUSH
21330: LD_INT 1
21332: PPUSH
21333: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
21337: LD_INT 29
21339: PPUSH
21340: LD_VAR 0 3
21344: PPUSH
21345: LD_INT 1
21347: PPUSH
21348: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
21352: LD_INT 30
21354: PPUSH
21355: LD_VAR 0 3
21359: PPUSH
21360: LD_INT 1
21362: PPUSH
21363: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
21367: LD_INT 31
21369: PPUSH
21370: LD_VAR 0 3
21374: PPUSH
21375: LD_INT 1
21377: PPUSH
21378: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
21382: LD_INT 32
21384: PPUSH
21385: LD_VAR 0 3
21389: PPUSH
21390: LD_INT 1
21392: PPUSH
21393: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
21397: LD_INT 36
21399: PPUSH
21400: LD_VAR 0 3
21404: PPUSH
21405: LD_INT 1
21407: PPUSH
21408: CALL_OW 324
// end ; 5 :
21412: GO 23543
21414: LD_INT 5
21416: DOUBLE
21417: EQUAL
21418: IFTRUE 21422
21420: GO 22535
21422: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
21423: LD_INT 35
21425: PPUSH
21426: LD_VAR 0 3
21430: PPUSH
21431: LD_INT 1
21433: PPUSH
21434: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
21438: LD_INT 45
21440: PPUSH
21441: LD_VAR 0 3
21445: PPUSH
21446: LD_INT 1
21448: PPUSH
21449: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
21453: LD_INT 46
21455: PPUSH
21456: LD_VAR 0 3
21460: PPUSH
21461: LD_INT 1
21463: PPUSH
21464: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
21468: LD_INT 47
21470: PPUSH
21471: LD_VAR 0 3
21475: PPUSH
21476: LD_INT 1
21478: PPUSH
21479: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
21483: LD_INT 1
21485: PPUSH
21486: LD_VAR 0 3
21490: PPUSH
21491: LD_INT 1
21493: PPUSH
21494: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
21498: LD_INT 2
21500: PPUSH
21501: LD_VAR 0 3
21505: PPUSH
21506: LD_INT 1
21508: PPUSH
21509: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
21513: LD_INT 11
21515: PPUSH
21516: LD_VAR 0 3
21520: PPUSH
21521: LD_INT 1
21523: PPUSH
21524: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
21528: LD_INT 20
21530: PPUSH
21531: LD_VAR 0 3
21535: PPUSH
21536: LD_INT 1
21538: PPUSH
21539: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
21543: LD_INT 48
21545: PPUSH
21546: LD_VAR 0 3
21550: PPUSH
21551: LD_INT 1
21553: PPUSH
21554: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
21558: LD_INT 49
21560: PPUSH
21561: LD_VAR 0 3
21565: PPUSH
21566: LD_INT 1
21568: PPUSH
21569: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
21573: LD_INT 69
21575: PPUSH
21576: LD_VAR 0 3
21580: PPUSH
21581: LD_INT 1
21583: PPUSH
21584: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
21588: LD_INT 39
21590: PPUSH
21591: LD_VAR 0 3
21595: PPUSH
21596: LD_INT 1
21598: PPUSH
21599: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
21603: LD_INT 34
21605: PPUSH
21606: LD_VAR 0 3
21610: PPUSH
21611: LD_INT 1
21613: PPUSH
21614: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
21618: LD_INT 42
21620: PPUSH
21621: LD_VAR 0 3
21625: PPUSH
21626: LD_INT 1
21628: PPUSH
21629: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
21633: LD_INT 44
21635: PPUSH
21636: LD_VAR 0 3
21640: PPUSH
21641: LD_INT 1
21643: PPUSH
21644: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
21648: LD_INT 41
21650: PPUSH
21651: LD_VAR 0 3
21655: PPUSH
21656: LD_INT 1
21658: PPUSH
21659: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
21663: LD_INT 40
21665: PPUSH
21666: LD_VAR 0 3
21670: PPUSH
21671: LD_INT 1
21673: PPUSH
21674: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
21678: LD_INT 43
21680: PPUSH
21681: LD_VAR 0 3
21685: PPUSH
21686: LD_INT 1
21688: PPUSH
21689: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
21693: LD_INT 70
21695: PPUSH
21696: LD_VAR 0 3
21700: PPUSH
21701: LD_INT 1
21703: PPUSH
21704: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
21708: LD_INT 51
21710: PPUSH
21711: LD_VAR 0 3
21715: PPUSH
21716: LD_INT 1
21718: PPUSH
21719: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
21723: LD_INT 52
21725: PPUSH
21726: LD_VAR 0 3
21730: PPUSH
21731: LD_INT 1
21733: PPUSH
21734: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
21738: LD_INT 6
21740: PPUSH
21741: LD_VAR 0 3
21745: PPUSH
21746: LD_INT 1
21748: PPUSH
21749: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
21753: LD_INT 15
21755: PPUSH
21756: LD_VAR 0 3
21760: PPUSH
21761: LD_INT 1
21763: PPUSH
21764: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
21768: LD_INT 7
21770: PPUSH
21771: LD_VAR 0 3
21775: PPUSH
21776: LD_INT 1
21778: PPUSH
21779: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
21783: LD_INT 12
21785: PPUSH
21786: LD_VAR 0 3
21790: PPUSH
21791: LD_INT 1
21793: PPUSH
21794: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
21798: LD_INT 17
21800: PPUSH
21801: LD_VAR 0 3
21805: PPUSH
21806: LD_INT 1
21808: PPUSH
21809: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
21813: LD_INT 18
21815: PPUSH
21816: LD_VAR 0 3
21820: PPUSH
21821: LD_INT 1
21823: PPUSH
21824: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
21828: LD_INT 60
21830: PPUSH
21831: LD_VAR 0 3
21835: PPUSH
21836: LD_INT 1
21838: PPUSH
21839: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
21843: LD_INT 32
21845: PPUSH
21846: LD_VAR 0 3
21850: PPUSH
21851: LD_INT 1
21853: PPUSH
21854: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
21858: LD_INT 9
21860: PPUSH
21861: LD_VAR 0 3
21865: PPUSH
21866: LD_INT 1
21868: PPUSH
21869: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
21873: LD_INT 57
21875: PPUSH
21876: LD_VAR 0 3
21880: PPUSH
21881: LD_INT 1
21883: PPUSH
21884: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
21888: LD_INT 30
21890: PPUSH
21891: LD_VAR 0 3
21895: PPUSH
21896: LD_INT 1
21898: PPUSH
21899: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
21903: LD_INT 37
21905: PPUSH
21906: LD_VAR 0 3
21910: PPUSH
21911: LD_INT 1
21913: PPUSH
21914: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
21918: LD_INT 63
21920: PPUSH
21921: LD_VAR 0 3
21925: PPUSH
21926: LD_INT 1
21928: PPUSH
21929: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
21933: LD_INT 3
21935: PPUSH
21936: LD_VAR 0 3
21940: PPUSH
21941: LD_INT 1
21943: PPUSH
21944: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
21948: LD_INT 4
21950: PPUSH
21951: LD_VAR 0 3
21955: PPUSH
21956: LD_INT 1
21958: PPUSH
21959: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
21963: LD_INT 5
21965: PPUSH
21966: LD_VAR 0 3
21970: PPUSH
21971: LD_INT 1
21973: PPUSH
21974: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
21978: LD_INT 66
21980: PPUSH
21981: LD_VAR 0 3
21985: PPUSH
21986: LD_INT 1
21988: PPUSH
21989: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
21993: LD_INT 21
21995: PPUSH
21996: LD_VAR 0 3
22000: PPUSH
22001: LD_INT 1
22003: PPUSH
22004: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
22008: LD_INT 22
22010: PPUSH
22011: LD_VAR 0 3
22015: PPUSH
22016: LD_INT 1
22018: PPUSH
22019: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
22023: LD_INT 19
22025: PPUSH
22026: LD_VAR 0 3
22030: PPUSH
22031: LD_INT 1
22033: PPUSH
22034: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
22038: LD_INT 54
22040: PPUSH
22041: LD_VAR 0 3
22045: PPUSH
22046: LD_INT 1
22048: PPUSH
22049: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
22053: LD_INT 55
22055: PPUSH
22056: LD_VAR 0 3
22060: PPUSH
22061: LD_INT 1
22063: PPUSH
22064: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22068: LD_INT 0
22070: PPUSH
22071: LD_VAR 0 3
22075: PPUSH
22076: LD_INT 1
22078: PPUSH
22079: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
22083: LD_INT 1
22085: PPUSH
22086: LD_VAR 0 3
22090: PPUSH
22091: LD_INT 1
22093: PPUSH
22094: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22098: LD_INT 2
22100: PPUSH
22101: LD_VAR 0 3
22105: PPUSH
22106: LD_INT 1
22108: PPUSH
22109: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
22113: LD_INT 3
22115: PPUSH
22116: LD_VAR 0 3
22120: PPUSH
22121: LD_INT 1
22123: PPUSH
22124: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22128: LD_INT 4
22130: PPUSH
22131: LD_VAR 0 3
22135: PPUSH
22136: LD_INT 1
22138: PPUSH
22139: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
22143: LD_INT 5
22145: PPUSH
22146: LD_VAR 0 3
22150: PPUSH
22151: LD_INT 1
22153: PPUSH
22154: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22158: LD_INT 6
22160: PPUSH
22161: LD_VAR 0 3
22165: PPUSH
22166: LD_INT 1
22168: PPUSH
22169: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
22173: LD_INT 7
22175: PPUSH
22176: LD_VAR 0 3
22180: PPUSH
22181: LD_INT 1
22183: PPUSH
22184: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
22188: LD_INT 8
22190: PPUSH
22191: LD_VAR 0 3
22195: PPUSH
22196: LD_INT 1
22198: PPUSH
22199: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
22203: LD_INT 10
22205: PPUSH
22206: LD_VAR 0 3
22210: PPUSH
22211: LD_INT 1
22213: PPUSH
22214: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
22218: LD_INT 11
22220: PPUSH
22221: LD_VAR 0 3
22225: PPUSH
22226: LD_INT 1
22228: PPUSH
22229: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
22233: LD_INT 12
22235: PPUSH
22236: LD_VAR 0 3
22240: PPUSH
22241: LD_INT 1
22243: PPUSH
22244: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
22248: LD_INT 13
22250: PPUSH
22251: LD_VAR 0 3
22255: PPUSH
22256: LD_INT 1
22258: PPUSH
22259: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
22263: LD_INT 14
22265: PPUSH
22266: LD_VAR 0 3
22270: PPUSH
22271: LD_INT 1
22273: PPUSH
22274: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
22278: LD_INT 15
22280: PPUSH
22281: LD_VAR 0 3
22285: PPUSH
22286: LD_INT 1
22288: PPUSH
22289: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
22293: LD_INT 16
22295: PPUSH
22296: LD_VAR 0 3
22300: PPUSH
22301: LD_INT 1
22303: PPUSH
22304: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
22308: LD_INT 17
22310: PPUSH
22311: LD_VAR 0 3
22315: PPUSH
22316: LD_INT 1
22318: PPUSH
22319: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
22323: LD_INT 18
22325: PPUSH
22326: LD_VAR 0 3
22330: PPUSH
22331: LD_INT 1
22333: PPUSH
22334: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
22338: LD_INT 19
22340: PPUSH
22341: LD_VAR 0 3
22345: PPUSH
22346: LD_INT 1
22348: PPUSH
22349: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
22353: LD_INT 20
22355: PPUSH
22356: LD_VAR 0 3
22360: PPUSH
22361: LD_INT 1
22363: PPUSH
22364: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
22368: LD_INT 21
22370: PPUSH
22371: LD_VAR 0 3
22375: PPUSH
22376: LD_INT 1
22378: PPUSH
22379: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
22383: LD_INT 23
22385: PPUSH
22386: LD_VAR 0 3
22390: PPUSH
22391: LD_INT 1
22393: PPUSH
22394: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
22398: LD_INT 26
22400: PPUSH
22401: LD_VAR 0 3
22405: PPUSH
22406: LD_INT 1
22408: PPUSH
22409: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
22413: LD_INT 27
22415: PPUSH
22416: LD_VAR 0 3
22420: PPUSH
22421: LD_INT 1
22423: PPUSH
22424: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
22428: LD_INT 28
22430: PPUSH
22431: LD_VAR 0 3
22435: PPUSH
22436: LD_INT 1
22438: PPUSH
22439: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22443: LD_INT 29
22445: PPUSH
22446: LD_VAR 0 3
22450: PPUSH
22451: LD_INT 1
22453: PPUSH
22454: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
22458: LD_INT 30
22460: PPUSH
22461: LD_VAR 0 3
22465: PPUSH
22466: LD_INT 1
22468: PPUSH
22469: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22473: LD_INT 31
22475: PPUSH
22476: LD_VAR 0 3
22480: PPUSH
22481: LD_INT 1
22483: PPUSH
22484: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
22488: LD_INT 32
22490: PPUSH
22491: LD_VAR 0 3
22495: PPUSH
22496: LD_INT 1
22498: PPUSH
22499: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
22503: LD_INT 33
22505: PPUSH
22506: LD_VAR 0 3
22510: PPUSH
22511: LD_INT 1
22513: PPUSH
22514: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
22518: LD_INT 36
22520: PPUSH
22521: LD_VAR 0 3
22525: PPUSH
22526: LD_INT 1
22528: PPUSH
22529: CALL_OW 324
// end ; 6 :
22533: GO 23543
22535: LD_INT 6
22537: DOUBLE
22538: EQUAL
22539: IFTRUE 22543
22541: GO 23468
22543: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22544: LD_INT 35
22546: PPUSH
22547: LD_VAR 0 3
22551: PPUSH
22552: LD_INT 1
22554: PPUSH
22555: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22559: LD_INT 45
22561: PPUSH
22562: LD_VAR 0 3
22566: PPUSH
22567: LD_INT 1
22569: PPUSH
22570: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22574: LD_INT 46
22576: PPUSH
22577: LD_VAR 0 3
22581: PPUSH
22582: LD_INT 1
22584: PPUSH
22585: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22589: LD_INT 47
22591: PPUSH
22592: LD_VAR 0 3
22596: PPUSH
22597: LD_INT 1
22599: PPUSH
22600: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22604: LD_INT 1
22606: PPUSH
22607: LD_VAR 0 3
22611: PPUSH
22612: LD_INT 1
22614: PPUSH
22615: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22619: LD_INT 2
22621: PPUSH
22622: LD_VAR 0 3
22626: PPUSH
22627: LD_INT 1
22629: PPUSH
22630: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22634: LD_INT 11
22636: PPUSH
22637: LD_VAR 0 3
22641: PPUSH
22642: LD_INT 1
22644: PPUSH
22645: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
22649: LD_INT 20
22651: PPUSH
22652: LD_VAR 0 3
22656: PPUSH
22657: LD_INT 1
22659: PPUSH
22660: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
22664: LD_INT 48
22666: PPUSH
22667: LD_VAR 0 3
22671: PPUSH
22672: LD_INT 1
22674: PPUSH
22675: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
22679: LD_INT 49
22681: PPUSH
22682: LD_VAR 0 3
22686: PPUSH
22687: LD_INT 1
22689: PPUSH
22690: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
22694: LD_INT 50
22696: PPUSH
22697: LD_VAR 0 3
22701: PPUSH
22702: LD_INT 1
22704: PPUSH
22705: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
22709: LD_INT 69
22711: PPUSH
22712: LD_VAR 0 3
22716: PPUSH
22717: LD_INT 1
22719: PPUSH
22720: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
22724: LD_INT 39
22726: PPUSH
22727: LD_VAR 0 3
22731: PPUSH
22732: LD_INT 1
22734: PPUSH
22735: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
22739: LD_INT 34
22741: PPUSH
22742: LD_VAR 0 3
22746: PPUSH
22747: LD_INT 1
22749: PPUSH
22750: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
22754: LD_INT 42
22756: PPUSH
22757: LD_VAR 0 3
22761: PPUSH
22762: LD_INT 1
22764: PPUSH
22765: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
22769: LD_INT 44
22771: PPUSH
22772: LD_VAR 0 3
22776: PPUSH
22777: LD_INT 1
22779: PPUSH
22780: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
22784: LD_INT 41
22786: PPUSH
22787: LD_VAR 0 3
22791: PPUSH
22792: LD_INT 1
22794: PPUSH
22795: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
22799: LD_INT 13
22801: PPUSH
22802: LD_VAR 0 3
22806: PPUSH
22807: LD_INT 1
22809: PPUSH
22810: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
22814: LD_INT 40
22816: PPUSH
22817: LD_VAR 0 3
22821: PPUSH
22822: LD_INT 1
22824: PPUSH
22825: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
22829: LD_INT 43
22831: PPUSH
22832: LD_VAR 0 3
22836: PPUSH
22837: LD_INT 1
22839: PPUSH
22840: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
22844: LD_INT 70
22846: PPUSH
22847: LD_VAR 0 3
22851: PPUSH
22852: LD_INT 1
22854: PPUSH
22855: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
22859: LD_INT 23
22861: PPUSH
22862: LD_VAR 0 3
22866: PPUSH
22867: LD_INT 1
22869: PPUSH
22870: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
22874: LD_INT 51
22876: PPUSH
22877: LD_VAR 0 3
22881: PPUSH
22882: LD_INT 1
22884: PPUSH
22885: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
22889: LD_INT 52
22891: PPUSH
22892: LD_VAR 0 3
22896: PPUSH
22897: LD_INT 1
22899: PPUSH
22900: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
22904: LD_INT 6
22906: PPUSH
22907: LD_VAR 0 3
22911: PPUSH
22912: LD_INT 1
22914: PPUSH
22915: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
22919: LD_INT 15
22921: PPUSH
22922: LD_VAR 0 3
22926: PPUSH
22927: LD_INT 1
22929: PPUSH
22930: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
22934: LD_INT 7
22936: PPUSH
22937: LD_VAR 0 3
22941: PPUSH
22942: LD_INT 1
22944: PPUSH
22945: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
22949: LD_INT 12
22951: PPUSH
22952: LD_VAR 0 3
22956: PPUSH
22957: LD_INT 1
22959: PPUSH
22960: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
22964: LD_INT 10
22966: PPUSH
22967: LD_VAR 0 3
22971: PPUSH
22972: LD_INT 1
22974: PPUSH
22975: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
22979: LD_INT 17
22981: PPUSH
22982: LD_VAR 0 3
22986: PPUSH
22987: LD_INT 1
22989: PPUSH
22990: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
22994: LD_INT 18
22996: PPUSH
22997: LD_VAR 0 3
23001: PPUSH
23002: LD_INT 1
23004: PPUSH
23005: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
23009: LD_INT 60
23011: PPUSH
23012: LD_VAR 0 3
23016: PPUSH
23017: LD_INT 1
23019: PPUSH
23020: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
23024: LD_INT 61
23026: PPUSH
23027: LD_VAR 0 3
23031: PPUSH
23032: LD_INT 1
23034: PPUSH
23035: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
23039: LD_INT 32
23041: PPUSH
23042: LD_VAR 0 3
23046: PPUSH
23047: LD_INT 1
23049: PPUSH
23050: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
23054: LD_INT 27
23056: PPUSH
23057: LD_VAR 0 3
23061: PPUSH
23062: LD_INT 1
23064: PPUSH
23065: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
23069: LD_INT 36
23071: PPUSH
23072: LD_VAR 0 3
23076: PPUSH
23077: LD_INT 1
23079: PPUSH
23080: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
23084: LD_INT 33
23086: PPUSH
23087: LD_VAR 0 3
23091: PPUSH
23092: LD_INT 1
23094: PPUSH
23095: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
23099: LD_INT 9
23101: PPUSH
23102: LD_VAR 0 3
23106: PPUSH
23107: LD_INT 1
23109: PPUSH
23110: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
23114: LD_INT 38
23116: PPUSH
23117: LD_VAR 0 3
23121: PPUSH
23122: LD_INT 1
23124: PPUSH
23125: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
23129: LD_INT 57
23131: PPUSH
23132: LD_VAR 0 3
23136: PPUSH
23137: LD_INT 1
23139: PPUSH
23140: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
23144: LD_INT 58
23146: PPUSH
23147: LD_VAR 0 3
23151: PPUSH
23152: LD_INT 1
23154: PPUSH
23155: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
23159: LD_INT 28
23161: PPUSH
23162: LD_VAR 0 3
23166: PPUSH
23167: LD_INT 1
23169: PPUSH
23170: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
23174: LD_INT 29
23176: PPUSH
23177: LD_VAR 0 3
23181: PPUSH
23182: LD_INT 1
23184: PPUSH
23185: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
23189: LD_INT 30
23191: PPUSH
23192: LD_VAR 0 3
23196: PPUSH
23197: LD_INT 1
23199: PPUSH
23200: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
23204: LD_INT 37
23206: PPUSH
23207: LD_VAR 0 3
23211: PPUSH
23212: LD_INT 1
23214: PPUSH
23215: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
23219: LD_INT 63
23221: PPUSH
23222: LD_VAR 0 3
23226: PPUSH
23227: LD_INT 1
23229: PPUSH
23230: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
23234: LD_INT 64
23236: PPUSH
23237: LD_VAR 0 3
23241: PPUSH
23242: LD_INT 1
23244: PPUSH
23245: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
23249: LD_INT 3
23251: PPUSH
23252: LD_VAR 0 3
23256: PPUSH
23257: LD_INT 1
23259: PPUSH
23260: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
23264: LD_INT 4
23266: PPUSH
23267: LD_VAR 0 3
23271: PPUSH
23272: LD_INT 1
23274: PPUSH
23275: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
23279: LD_INT 5
23281: PPUSH
23282: LD_VAR 0 3
23286: PPUSH
23287: LD_INT 1
23289: PPUSH
23290: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
23294: LD_INT 8
23296: PPUSH
23297: LD_VAR 0 3
23301: PPUSH
23302: LD_INT 1
23304: PPUSH
23305: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
23309: LD_INT 66
23311: PPUSH
23312: LD_VAR 0 3
23316: PPUSH
23317: LD_INT 1
23319: PPUSH
23320: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
23324: LD_INT 67
23326: PPUSH
23327: LD_VAR 0 3
23331: PPUSH
23332: LD_INT 1
23334: PPUSH
23335: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
23339: LD_INT 21
23341: PPUSH
23342: LD_VAR 0 3
23346: PPUSH
23347: LD_INT 1
23349: PPUSH
23350: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
23354: LD_INT 22
23356: PPUSH
23357: LD_VAR 0 3
23361: PPUSH
23362: LD_INT 1
23364: PPUSH
23365: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
23369: LD_INT 19
23371: PPUSH
23372: LD_VAR 0 3
23376: PPUSH
23377: LD_INT 1
23379: PPUSH
23380: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
23384: LD_INT 26
23386: PPUSH
23387: LD_VAR 0 3
23391: PPUSH
23392: LD_INT 1
23394: PPUSH
23395: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
23399: LD_INT 54
23401: PPUSH
23402: LD_VAR 0 3
23406: PPUSH
23407: LD_INT 1
23409: PPUSH
23410: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
23414: LD_INT 55
23416: PPUSH
23417: LD_VAR 0 3
23421: PPUSH
23422: LD_INT 1
23424: PPUSH
23425: CALL_OW 322
// for i = 0 to 39 do
23429: LD_ADDR_VAR 0 4
23433: PUSH
23434: DOUBLE
23435: LD_INT 0
23437: DEC
23438: ST_TO_ADDR
23439: LD_INT 39
23441: PUSH
23442: FOR_TO
23443: IFFALSE 23464
// SetRestrict ( i , side , true ) ;
23445: LD_VAR 0 4
23449: PPUSH
23450: LD_VAR 0 3
23454: PPUSH
23455: LD_INT 1
23457: PPUSH
23458: CALL_OW 324
23462: GO 23442
23464: POP
23465: POP
// end ; else
23466: GO 23543
23468: POP
// begin for i = 1 to 73 do
23469: LD_ADDR_VAR 0 4
23473: PUSH
23474: DOUBLE
23475: LD_INT 1
23477: DEC
23478: ST_TO_ADDR
23479: LD_INT 73
23481: PUSH
23482: FOR_TO
23483: IFFALSE 23504
// SetTech ( i , side , state_enabled ) ;
23485: LD_VAR 0 4
23489: PPUSH
23490: LD_VAR 0 3
23494: PPUSH
23495: LD_INT 1
23497: PPUSH
23498: CALL_OW 322
23502: GO 23482
23504: POP
23505: POP
// for i = 0 to 39 do
23506: LD_ADDR_VAR 0 4
23510: PUSH
23511: DOUBLE
23512: LD_INT 0
23514: DEC
23515: ST_TO_ADDR
23516: LD_INT 39
23518: PUSH
23519: FOR_TO
23520: IFFALSE 23541
// SetRestrict ( i , side , true ) ;
23522: LD_VAR 0 4
23526: PPUSH
23527: LD_VAR 0 3
23531: PPUSH
23532: LD_INT 1
23534: PPUSH
23535: CALL_OW 324
23539: GO 23519
23541: POP
23542: POP
// end ; end ; end ;
23543: GO 19548
23545: POP
23546: POP
// end ; end_of_file
23547: LD_VAR 0 2
23551: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
23552: LD_INT 0
23554: PPUSH
23555: PPUSH
23556: PPUSH
23557: PPUSH
23558: PPUSH
23559: PPUSH
23560: PPUSH
23561: PPUSH
23562: PPUSH
// for i := 1 to 8 do
23563: LD_ADDR_VAR 0 2
23567: PUSH
23568: DOUBLE
23569: LD_INT 1
23571: DEC
23572: ST_TO_ADDR
23573: LD_INT 8
23575: PUSH
23576: FOR_TO
23577: IFFALSE 23961
// begin if Side_Positions [ i ] then
23579: LD_EXP 18
23583: PUSH
23584: LD_VAR 0 2
23588: ARRAY
23589: IFFALSE 23959
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
23591: LD_ADDR_VAR 0 7
23595: PUSH
23596: LD_INT 22
23598: PUSH
23599: LD_VAR 0 2
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: LD_INT 21
23610: PUSH
23611: LD_INT 1
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PPUSH
23622: CALL_OW 69
23626: PUSH
23627: LD_INT 0
23629: PLUS
23630: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23631: LD_ADDR_VAR 0 9
23635: PUSH
23636: LD_INT 22
23638: PUSH
23639: LD_VAR 0 2
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: PUSH
23648: LD_INT 2
23650: PUSH
23651: LD_INT 30
23653: PUSH
23654: LD_INT 0
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: PUSH
23661: LD_INT 30
23663: PUSH
23664: LD_INT 1
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: LIST
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: PPUSH
23680: CALL_OW 69
23684: ST_TO_ADDR
// crates := 0 ;
23685: LD_ADDR_VAR 0 4
23689: PUSH
23690: LD_INT 0
23692: ST_TO_ADDR
// oil := 0 ;
23693: LD_ADDR_VAR 0 5
23697: PUSH
23698: LD_INT 0
23700: ST_TO_ADDR
// sib := 0 ;
23701: LD_ADDR_VAR 0 6
23705: PUSH
23706: LD_INT 0
23708: ST_TO_ADDR
// if bases then
23709: LD_VAR 0 9
23713: IFFALSE 23819
// begin for j in bases do
23715: LD_ADDR_VAR 0 3
23719: PUSH
23720: LD_VAR 0 9
23724: PUSH
23725: FOR_IN
23726: IFFALSE 23817
// begin base := GetBase ( j ) ;
23728: LD_ADDR_VAR 0 8
23732: PUSH
23733: LD_VAR 0 3
23737: PPUSH
23738: CALL_OW 274
23742: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
23743: LD_ADDR_VAR 0 4
23747: PUSH
23748: LD_VAR 0 4
23752: PUSH
23753: LD_VAR 0 8
23757: PPUSH
23758: LD_INT 1
23760: PPUSH
23761: CALL_OW 275
23765: PLUS
23766: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
23767: LD_ADDR_VAR 0 5
23771: PUSH
23772: LD_VAR 0 5
23776: PUSH
23777: LD_VAR 0 8
23781: PPUSH
23782: LD_INT 2
23784: PPUSH
23785: CALL_OW 275
23789: PLUS
23790: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
23791: LD_ADDR_VAR 0 6
23795: PUSH
23796: LD_VAR 0 6
23800: PUSH
23801: LD_VAR 0 8
23805: PPUSH
23806: LD_INT 3
23808: PPUSH
23809: CALL_OW 275
23813: PLUS
23814: ST_TO_ADDR
// end ;
23815: GO 23725
23817: POP
23818: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
23819: LD_STRING setSpecText(
23821: PUSH
23822: LD_VAR 0 2
23826: STR
23827: PUSH
23828: LD_STRING ,
23830: STR
23831: PUSH
23832: LD_INT 2
23834: STR
23835: PUSH
23836: LD_STRING ,
23838: STR
23839: PUSH
23840: LD_VAR 0 4
23844: STR
23845: PUSH
23846: LD_STRING )
23848: STR
23849: PPUSH
23850: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
23854: LD_STRING setSpecText(
23856: PUSH
23857: LD_VAR 0 2
23861: STR
23862: PUSH
23863: LD_STRING ,
23865: STR
23866: PUSH
23867: LD_INT 3
23869: STR
23870: PUSH
23871: LD_STRING ,
23873: STR
23874: PUSH
23875: LD_VAR 0 5
23879: STR
23880: PUSH
23881: LD_STRING )
23883: STR
23884: PPUSH
23885: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
23889: LD_STRING setSpecText(
23891: PUSH
23892: LD_VAR 0 2
23896: STR
23897: PUSH
23898: LD_STRING ,
23900: STR
23901: PUSH
23902: LD_INT 4
23904: STR
23905: PUSH
23906: LD_STRING ,
23908: STR
23909: PUSH
23910: LD_VAR 0 6
23914: STR
23915: PUSH
23916: LD_STRING )
23918: STR
23919: PPUSH
23920: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
23924: LD_STRING setSpecText(
23926: PUSH
23927: LD_VAR 0 2
23931: STR
23932: PUSH
23933: LD_STRING ,
23935: STR
23936: PUSH
23937: LD_INT 5
23939: STR
23940: PUSH
23941: LD_STRING ,
23943: STR
23944: PUSH
23945: LD_VAR 0 7
23949: STR
23950: PUSH
23951: LD_STRING )
23953: STR
23954: PPUSH
23955: CALL_OW 559
// end ; end ;
23959: GO 23576
23961: POP
23962: POP
// end ;
23963: LD_VAR 0 1
23967: RET
// every 0 0$1 do
23968: GO 23970
23970: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
23971: LD_STRING setSpecLogoNumber(
23973: PUSH
23974: LD_INT 2
23976: STR
23977: PUSH
23978: LD_STRING ,
23980: STR
23981: PUSH
23982: LD_INT 1
23984: STR
23985: PUSH
23986: LD_STRING )
23988: STR
23989: PPUSH
23990: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
23994: LD_STRING setSpecLogoNumber(
23996: PUSH
23997: LD_INT 3
23999: STR
24000: PUSH
24001: LD_STRING ,
24003: STR
24004: PUSH
24005: LD_INT 2
24007: STR
24008: PUSH
24009: LD_STRING )
24011: STR
24012: PPUSH
24013: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
24017: LD_STRING setSpecLogoNumber(
24019: PUSH
24020: LD_INT 4
24022: STR
24023: PUSH
24024: LD_STRING ,
24026: STR
24027: PUSH
24028: LD_INT 3
24030: STR
24031: PUSH
24032: LD_STRING )
24034: STR
24035: PPUSH
24036: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
24040: LD_STRING setSpecLogoNumber(
24042: PUSH
24043: LD_INT 5
24045: STR
24046: PUSH
24047: LD_STRING ,
24049: STR
24050: PUSH
24051: LD_INT 4
24053: STR
24054: PUSH
24055: LD_STRING )
24057: STR
24058: PPUSH
24059: CALL_OW 559
// end ;
24063: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
24064: LD_INT 2
24066: PUSH
24067: LD_INT 30
24069: PUSH
24070: LD_INT 0
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: LD_INT 30
24079: PUSH
24080: LD_INT 1
24082: PUSH
24083: EMPTY
24084: LIST
24085: LIST
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: LIST
24091: PPUSH
24092: CALL_OW 69
24096: IFFALSE 24106
24098: GO 24100
24100: DISABLE
// begin enable ;
24101: ENABLE
// UpdateSpectatorBar ;
24102: CALL 23552 0 0
// end ;
24106: END
