// export def_base_size , def_west_nations , def_east_nations ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , respawning_time_min , respawning_time_max , siberite_bomb_Delay ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Position_Nations ; export depot_def , breastworks_def , labs_def , factory_def , start_def , extra_oil_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function prepare_deposits ; var list , un , deposits ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
// list := GetListOfResourcesInArea ( west_side ) ^ GetListOfResourcesInArea ( east_side ) ;
   6: LD_ADDR_VAR 0 2
  10: PUSH
  11: LD_INT 8
  13: PPUSH
  14: CALL_OW 442
  18: PUSH
  19: LD_INT 9
  21: PPUSH
  22: CALL_OW 442
  26: ADD
  27: ST_TO_ADDR
// for un = 1 to ( list div 3 ) do
  28: LD_ADDR_VAR 0 3
  32: PUSH
  33: DOUBLE
  34: LD_INT 1
  36: DEC
  37: ST_TO_ADDR
  38: LD_VAR 0 2
  42: PUSH
  43: LD_INT 3
  45: DIV
  46: PUSH
  47: FOR_TO
  48: IFFALSE 94
// RemoveDepositXY ( list [ un * 3 - 2 ] , list [ un * 3 - 1 ] ) ;
  50: LD_VAR 0 2
  54: PUSH
  55: LD_VAR 0 3
  59: PUSH
  60: LD_INT 3
  62: MUL
  63: PUSH
  64: LD_INT 2
  66: MINUS
  67: ARRAY
  68: PPUSH
  69: LD_VAR 0 2
  73: PUSH
  74: LD_VAR 0 3
  78: PUSH
  79: LD_INT 3
  81: MUL
  82: PUSH
  83: LD_INT 1
  85: MINUS
  86: ARRAY
  87: PPUSH
  88: CALL_OW 63
  92: GO 47
  94: POP
  95: POP
// deposits := [ [ 40 , 49 , mat_oil ] , [ 40 , 68 , mat_oil ] , [ 9 , 3 , mat_siberit ] , [ 61 , 116 , mat_siberit ] , [ 177 , 46 , mat_oil ] , [ 185 , 71 , mat_oil ] , [ 157 , 3 , mat_siberit ] , [ 213 , 116 , mat_siberit ] ] ;
  96: LD_ADDR_VAR 0 4
 100: PUSH
 101: LD_INT 40
 103: PUSH
 104: LD_INT 49
 106: PUSH
 107: LD_INT 2
 109: PUSH
 110: EMPTY
 111: LIST
 112: LIST
 113: LIST
 114: PUSH
 115: LD_INT 40
 117: PUSH
 118: LD_INT 68
 120: PUSH
 121: LD_INT 2
 123: PUSH
 124: EMPTY
 125: LIST
 126: LIST
 127: LIST
 128: PUSH
 129: LD_INT 9
 131: PUSH
 132: LD_INT 3
 134: PUSH
 135: LD_INT 3
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: LIST
 142: PUSH
 143: LD_INT 61
 145: PUSH
 146: LD_INT 116
 148: PUSH
 149: LD_INT 3
 151: PUSH
 152: EMPTY
 153: LIST
 154: LIST
 155: LIST
 156: PUSH
 157: LD_INT 177
 159: PUSH
 160: LD_INT 46
 162: PUSH
 163: LD_INT 2
 165: PUSH
 166: EMPTY
 167: LIST
 168: LIST
 169: LIST
 170: PUSH
 171: LD_INT 185
 173: PUSH
 174: LD_INT 71
 176: PUSH
 177: LD_INT 2
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: LIST
 184: PUSH
 185: LD_INT 157
 187: PUSH
 188: LD_INT 3
 190: PUSH
 191: LD_INT 3
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: PUSH
 199: LD_INT 213
 201: PUSH
 202: LD_INT 116
 204: PUSH
 205: LD_INT 3
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: PUSH
 213: EMPTY
 214: LIST
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: ST_TO_ADDR
// for un in deposits do
 223: LD_ADDR_VAR 0 3
 227: PUSH
 228: LD_VAR 0 4
 232: PUSH
 233: FOR_IN
 234: IFFALSE 269
// CreateDepositXY ( un [ 1 ] , un [ 2 ] , un [ 3 ] ) ;
 236: LD_VAR 0 3
 240: PUSH
 241: LD_INT 1
 243: ARRAY
 244: PPUSH
 245: LD_VAR 0 3
 249: PUSH
 250: LD_INT 2
 252: ARRAY
 253: PPUSH
 254: LD_VAR 0 3
 258: PUSH
 259: LD_INT 3
 261: ARRAY
 262: PPUSH
 263: CALL_OW 62
 267: GO 233
 269: POP
 270: POP
// end ;
 271: LD_VAR 0 1
 275: RET
// function init_map ; var i ; begin
 276: LD_INT 0
 278: PPUSH
 279: PPUSH
// prepare_deposits ;
 280: CALL 0 0 0
// extra_oil_deposits_locations := [ [ 29 , 3 ] , [ 82 , 115 ] , [ 134 , 3 ] , [ 192 , 116 ] ] ;
 284: LD_ADDR_EXP 27
 288: PUSH
 289: LD_INT 29
 291: PUSH
 292: LD_INT 3
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: PUSH
 299: LD_INT 82
 301: PUSH
 302: LD_INT 115
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: PUSH
 309: LD_INT 134
 311: PUSH
 312: LD_INT 3
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: PUSH
 319: LD_INT 192
 321: PUSH
 322: LD_INT 116
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: LIST
 333: LIST
 334: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 62 , 60 ] , [ 157 , 60 ] ] ;
 335: LD_ADDR_EXP 28
 339: PUSH
 340: LD_INT 62
 342: PUSH
 343: LD_INT 60
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: PUSH
 350: LD_INT 157
 352: PUSH
 353: LD_INT 60
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: ST_TO_ADDR
// depot_def := [ [ 35 , 34 , 0 ] , [ 56 , 86 , 2 ] , [ 158 , 34 , 5 ] , [ 185 , 86 , 3 ] ] ;
 364: LD_ADDR_EXP 22
 368: PUSH
 369: LD_INT 35
 371: PUSH
 372: LD_INT 34
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: EMPTY
 379: LIST
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 56
 385: PUSH
 386: LD_INT 86
 388: PUSH
 389: LD_INT 2
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: LIST
 396: PUSH
 397: LD_INT 158
 399: PUSH
 400: LD_INT 34
 402: PUSH
 403: LD_INT 5
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: LD_INT 185
 413: PUSH
 414: LD_INT 86
 416: PUSH
 417: LD_INT 3
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: LIST
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: LIST
 429: LIST
 430: ST_TO_ADDR
// labs_def := [ [ 19 , 28 , 1 ] , [ 49 , 92 , 1 ] , [ 166 , 23 , 4 ] , [ 205 , 97 , 4 ] ] ;
 431: LD_ADDR_EXP 24
 435: PUSH
 436: LD_INT 19
 438: PUSH
 439: LD_INT 28
 441: PUSH
 442: LD_INT 1
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PUSH
 450: LD_INT 49
 452: PUSH
 453: LD_INT 92
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 166
 466: PUSH
 467: LD_INT 23
 469: PUSH
 470: LD_INT 4
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: LIST
 477: PUSH
 478: LD_INT 205
 480: PUSH
 481: LD_INT 97
 483: PUSH
 484: LD_INT 4
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: ST_TO_ADDR
// factory_def := [ [ 26 , 16 , 2 ] , [ 64 , 103 , 0 ] , [ 154 , 18 , 3 ] , [ 190 , 103 , 5 ] ] ;
 498: LD_ADDR_EXP 25
 502: PUSH
 503: LD_INT 26
 505: PUSH
 506: LD_INT 16
 508: PUSH
 509: LD_INT 2
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: LIST
 516: PUSH
 517: LD_INT 64
 519: PUSH
 520: LD_INT 103
 522: PUSH
 523: LD_INT 0
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 154
 533: PUSH
 534: LD_INT 18
 536: PUSH
 537: LD_INT 3
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_INT 190
 547: PUSH
 548: LD_INT 103
 550: PUSH
 551: LD_INT 5
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: LIST
 558: PUSH
 559: EMPTY
 560: LIST
 561: LIST
 562: LIST
 563: LIST
 564: ST_TO_ADDR
// start_def := [ [ 35 , 26 ] , [ 65 , 94 ] , [ 150 , 26 ] , [ 185 , 94 ] ] ;
 565: LD_ADDR_EXP 26
 569: PUSH
 570: LD_INT 35
 572: PUSH
 573: LD_INT 26
 575: PUSH
 576: EMPTY
 577: LIST
 578: LIST
 579: PUSH
 580: LD_INT 65
 582: PUSH
 583: LD_INT 94
 585: PUSH
 586: EMPTY
 587: LIST
 588: LIST
 589: PUSH
 590: LD_INT 150
 592: PUSH
 593: LD_INT 26
 595: PUSH
 596: EMPTY
 597: LIST
 598: LIST
 599: PUSH
 600: LD_INT 185
 602: PUSH
 603: LD_INT 94
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: ST_TO_ADDR
// breastworks_def := [ [ [ 44 , 18 , 4 ] , [ 47 , 51 , 5 ] , [ 35 , 8 , 4 ] , [ 50 , 38 , 5 ] ] , [ [ 81 , 97 , 4 ] , [ 54 , 71 , 3 ] , [ 81 , 110 , 5 ] , [ 66 , 82 , 3 ] ] , [ [ 136 , 20 , 1 ] , [ 164 , 48 , 1 ] , [ 130 , 8 , 1 ] , [ 147 , 37 , 0 ] ] , [ [ 181 , 103 , 1 ] , [ 178 , 72 , 1 ] , [ 186 , 112 , 1 ] , [ 172 , 82 , 2 ] ] ] ;
 616: LD_ADDR_EXP 23
 620: PUSH
 621: LD_INT 44
 623: PUSH
 624: LD_INT 18
 626: PUSH
 627: LD_INT 4
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: LIST
 634: PUSH
 635: LD_INT 47
 637: PUSH
 638: LD_INT 51
 640: PUSH
 641: LD_INT 5
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PUSH
 649: LD_INT 35
 651: PUSH
 652: LD_INT 8
 654: PUSH
 655: LD_INT 4
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: LIST
 662: PUSH
 663: LD_INT 50
 665: PUSH
 666: LD_INT 38
 668: PUSH
 669: LD_INT 5
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: LIST
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: PUSH
 683: LD_INT 81
 685: PUSH
 686: LD_INT 97
 688: PUSH
 689: LD_INT 4
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: PUSH
 697: LD_INT 54
 699: PUSH
 700: LD_INT 71
 702: PUSH
 703: LD_INT 3
 705: PUSH
 706: EMPTY
 707: LIST
 708: LIST
 709: LIST
 710: PUSH
 711: LD_INT 81
 713: PUSH
 714: LD_INT 110
 716: PUSH
 717: LD_INT 5
 719: PUSH
 720: EMPTY
 721: LIST
 722: LIST
 723: LIST
 724: PUSH
 725: LD_INT 66
 727: PUSH
 728: LD_INT 82
 730: PUSH
 731: LD_INT 3
 733: PUSH
 734: EMPTY
 735: LIST
 736: LIST
 737: LIST
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: LIST
 743: LIST
 744: PUSH
 745: LD_INT 136
 747: PUSH
 748: LD_INT 20
 750: PUSH
 751: LD_INT 1
 753: PUSH
 754: EMPTY
 755: LIST
 756: LIST
 757: LIST
 758: PUSH
 759: LD_INT 164
 761: PUSH
 762: LD_INT 48
 764: PUSH
 765: LD_INT 1
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: LIST
 772: PUSH
 773: LD_INT 130
 775: PUSH
 776: LD_INT 8
 778: PUSH
 779: LD_INT 1
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PUSH
 787: LD_INT 147
 789: PUSH
 790: LD_INT 37
 792: PUSH
 793: LD_INT 0
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: LIST
 800: PUSH
 801: EMPTY
 802: LIST
 803: LIST
 804: LIST
 805: LIST
 806: PUSH
 807: LD_INT 181
 809: PUSH
 810: LD_INT 103
 812: PUSH
 813: LD_INT 1
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: LIST
 820: PUSH
 821: LD_INT 178
 823: PUSH
 824: LD_INT 72
 826: PUSH
 827: LD_INT 1
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: LIST
 834: PUSH
 835: LD_INT 186
 837: PUSH
 838: LD_INT 112
 840: PUSH
 841: LD_INT 1
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: LIST
 848: PUSH
 849: LD_INT 172
 851: PUSH
 852: LD_INT 82
 854: PUSH
 855: LD_INT 2
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: LIST
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: LIST
 873: LIST
 874: ST_TO_ADDR
// if def_extra_oil_deposits then
 875: LD_EXP 63
 879: IFFALSE 923
// for i in extra_oil_deposits_locations do
 881: LD_ADDR_VAR 0 2
 885: PUSH
 886: LD_EXP 27
 890: PUSH
 891: FOR_IN
 892: IFFALSE 921
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
 894: LD_VAR 0 2
 898: PUSH
 899: LD_INT 1
 901: ARRAY
 902: PPUSH
 903: LD_VAR 0 2
 907: PUSH
 908: LD_INT 2
 910: ARRAY
 911: PPUSH
 912: LD_INT 2
 914: PPUSH
 915: CALL_OW 62
 919: GO 891
 921: POP
 922: POP
// if def_extra_sib_deposits then
 923: LD_EXP 64
 927: IFFALSE 971
// for i in extra_sib_deposits_locations do
 929: LD_ADDR_VAR 0 2
 933: PUSH
 934: LD_EXP 28
 938: PUSH
 939: FOR_IN
 940: IFFALSE 969
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 2
 958: ARRAY
 959: PPUSH
 960: LD_INT 3
 962: PPUSH
 963: CALL_OW 62
 967: GO 939
 969: POP
 970: POP
// end ;
 971: LD_VAR 0 1
 975: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
 976: LD_INT 0
 978: PPUSH
 979: PPUSH
 980: PPUSH
 981: PPUSH
 982: PPUSH
 983: PPUSH
 984: PPUSH
 985: PPUSH
 986: PPUSH
// if Multiplayer then
 987: LD_OWVAR 4
 991: IFFALSE 1055
// begin Game_Type = mp_game_type ;
 993: LD_ADDR_EXP 56
 997: PUSH
 998: LD_OWVAR 6
1002: ST_TO_ADDR
// Your_Side := mp_player_side ;
1003: LD_ADDR_OWVAR 2
1007: PUSH
1008: LD_OWVAR 7
1012: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
1013: LD_ADDR_EXP 18
1017: PUSH
1018: LD_OWVAR 17
1022: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
1023: LD_ADDR_EXP 16
1027: PUSH
1028: LD_OWVAR 15
1032: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
1033: LD_ADDR_EXP 19
1037: PUSH
1038: LD_OWVAR 16
1042: ST_TO_ADDR
// Teams = mp_teams ;
1043: LD_ADDR_EXP 17
1047: PUSH
1048: LD_OWVAR 12
1052: ST_TO_ADDR
// end else
1053: GO 1195
// begin Game_Type = 12 ;
1055: LD_ADDR_EXP 56
1059: PUSH
1060: LD_INT 12
1062: ST_TO_ADDR
// Your_Side = 4 ;
1063: LD_ADDR_OWVAR 2
1067: PUSH
1068: LD_INT 4
1070: ST_TO_ADDR
// Side_Positions = [ 1 , 0 , 0 , 0 , 0 , 0 , 0 , 3 ] ;
1071: LD_ADDR_EXP 18
1075: PUSH
1076: LD_INT 1
1078: PUSH
1079: LD_INT 0
1081: PUSH
1082: LD_INT 0
1084: PUSH
1085: LD_INT 0
1087: PUSH
1088: LD_INT 0
1090: PUSH
1091: LD_INT 0
1093: PUSH
1094: LD_INT 0
1096: PUSH
1097: LD_INT 3
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: LIST
1106: LIST
1107: LIST
1108: LIST
1109: ST_TO_ADDR
// Side_Teams = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
1110: LD_ADDR_EXP 16
1114: PUSH
1115: LD_INT 0
1117: PUSH
1118: LD_INT 0
1120: PUSH
1121: LD_INT 0
1123: PUSH
1124: LD_INT 0
1126: PUSH
1127: LD_INT 0
1129: PUSH
1130: LD_INT 0
1132: PUSH
1133: LD_INT 0
1135: PUSH
1136: LD_INT 0
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: LIST
1148: ST_TO_ADDR
// Side_Nations = [ 3 , 0 , 0 , 0 , 0 , 0 , 0 , 1 ] ;
1149: LD_ADDR_EXP 19
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: LD_INT 0
1159: PUSH
1160: LD_INT 0
1162: PUSH
1163: LD_INT 0
1165: PUSH
1166: LD_INT 0
1168: PUSH
1169: LD_INT 0
1171: PUSH
1172: LD_INT 0
1174: PUSH
1175: LD_INT 1
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: LIST
1186: LIST
1187: ST_TO_ADDR
// Teams = [ ] ;
1188: LD_ADDR_EXP 17
1192: PUSH
1193: EMPTY
1194: ST_TO_ADDR
// end ; for i := 1 to 8 do
1195: LD_ADDR_VAR 0 8
1199: PUSH
1200: DOUBLE
1201: LD_INT 1
1203: DEC
1204: ST_TO_ADDR
1205: LD_INT 8
1207: PUSH
1208: FOR_TO
1209: IFFALSE 1296
// if Multiplayer_GetPlayerIsSpec ( i ) then
1211: LD_VAR 0 8
1215: PPUSH
1216: CALL_OW 530
1220: IFFALSE 1294
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
1222: LD_ADDR_EXP 18
1226: PUSH
1227: LD_EXP 18
1231: PPUSH
1232: LD_VAR 0 8
1236: PPUSH
1237: LD_INT 0
1239: PPUSH
1240: CALL_OW 1
1244: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
1245: LD_ADDR_EXP 17
1249: PUSH
1250: LD_EXP 17
1254: PPUSH
1255: LD_EXP 16
1259: PUSH
1260: LD_VAR 0 8
1264: ARRAY
1265: PPUSH
1266: LD_EXP 17
1270: PUSH
1271: LD_EXP 16
1275: PUSH
1276: LD_VAR 0 8
1280: ARRAY
1281: ARRAY
1282: PUSH
1283: LD_VAR 0 8
1287: DIFF
1288: PPUSH
1289: CALL_OW 1
1293: ST_TO_ADDR
// end ;
1294: GO 1208
1296: POP
1297: POP
// if Multiplayer then
1298: LD_OWVAR 4
1302: IFFALSE 1527
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
1304: LD_ADDR_EXP 58
1308: PUSH
1309: LD_INT 0
1311: PPUSH
1312: CALL_OW 426
1316: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
1317: LD_ADDR_EXP 59
1321: PUSH
1322: LD_INT 1
1324: PPUSH
1325: CALL_OW 426
1329: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
1330: LD_ADDR_EXP 60
1334: PUSH
1335: LD_INT 2
1337: PPUSH
1338: CALL_OW 426
1342: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
1343: LD_ADDR_EXP 61
1347: PUSH
1348: LD_INT 3
1350: PPUSH
1351: CALL_OW 426
1355: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
1356: LD_ADDR_EXP 62
1360: PUSH
1361: LD_INT 4
1363: PPUSH
1364: CALL_OW 426
1368: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
1369: LD_ADDR_EXP 63
1373: PUSH
1374: LD_INT 5
1376: PPUSH
1377: CALL_OW 426
1381: ST_TO_ADDR
// def_extra_sib_deposits = GetMultiplayerSetting ( 6 ) ;
1382: LD_ADDR_EXP 64
1386: PUSH
1387: LD_INT 6
1389: PPUSH
1390: CALL_OW 426
1394: ST_TO_ADDR
// def_base_size = GetMultiplayerSetting ( 7 ) ;
1395: LD_ADDR_EXP 1
1399: PUSH
1400: LD_INT 7
1402: PPUSH
1403: CALL_OW 426
1407: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
1408: LD_ADDR_EXP 65
1412: PUSH
1413: LD_INT 10
1415: PPUSH
1416: CALL_OW 426
1420: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
1421: LD_ADDR_EXP 66
1425: PUSH
1426: LD_INT 11
1428: PPUSH
1429: CALL_OW 426
1433: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
1434: LD_ADDR_EXP 67
1438: PUSH
1439: LD_INT 12
1441: PPUSH
1442: CALL_OW 426
1446: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
1447: LD_ADDR_EXP 69
1451: PUSH
1452: LD_INT 13
1454: PPUSH
1455: CALL_OW 426
1459: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
1460: LD_ADDR_EXP 68
1464: PUSH
1465: LD_INT 14
1467: PPUSH
1468: CALL_OW 426
1472: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
1473: LD_ADDR_EXP 70
1477: PUSH
1478: LD_INT 15
1480: PPUSH
1481: CALL_OW 426
1485: ST_TO_ADDR
// def_west_nations = GetMultiplayerSetting ( 21 ) ;
1486: LD_ADDR_EXP 2
1490: PUSH
1491: LD_INT 21
1493: PPUSH
1494: CALL_OW 426
1498: ST_TO_ADDR
// def_east_nations = GetMultiplayerSetting ( 22 ) ;
1499: LD_ADDR_EXP 3
1503: PUSH
1504: LD_INT 22
1506: PPUSH
1507: CALL_OW 426
1511: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 23 ) ;
1512: LD_ADDR_VAR 0 9
1516: PUSH
1517: LD_INT 23
1519: PPUSH
1520: CALL_OW 426
1524: ST_TO_ADDR
// end else
1525: GO 1667
// begin randomize ;
1527: CALL_OW 10
// def_base_level = 3 ;
1531: LD_ADDR_EXP 58
1535: PUSH
1536: LD_INT 3
1538: ST_TO_ADDR
// def_amount_of_people = 1 ;
1539: LD_ADDR_EXP 59
1543: PUSH
1544: LD_INT 1
1546: ST_TO_ADDR
// def_skill_level = 1 ;
1547: LD_ADDR_EXP 60
1551: PUSH
1552: LD_INT 1
1554: ST_TO_ADDR
// def_starting_resources = 2 ;
1555: LD_ADDR_EXP 61
1559: PUSH
1560: LD_INT 2
1562: ST_TO_ADDR
// def_shipments_density = 1 ;
1563: LD_ADDR_EXP 62
1567: PUSH
1568: LD_INT 1
1570: ST_TO_ADDR
// def_extra_oil_deposits = 1 ;
1571: LD_ADDR_EXP 63
1575: PUSH
1576: LD_INT 1
1578: ST_TO_ADDR
// def_extra_sib_deposits = 1 ;
1579: LD_ADDR_EXP 64
1583: PUSH
1584: LD_INT 1
1586: ST_TO_ADDR
// def_base_size = 2 ;
1587: LD_ADDR_EXP 1
1591: PUSH
1592: LD_INT 2
1594: ST_TO_ADDR
// def_shared_vision = 1 ;
1595: LD_ADDR_EXP 65
1599: PUSH
1600: LD_INT 1
1602: ST_TO_ADDR
// def_morale_flags = 1 ;
1603: LD_ADDR_EXP 66
1607: PUSH
1608: LD_INT 1
1610: ST_TO_ADDR
// def_siberite_detection = 1 ;
1611: LD_ADDR_EXP 67
1615: PUSH
1616: LD_INT 1
1618: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
1619: LD_ADDR_EXP 69
1623: PUSH
1624: LD_INT 3
1626: ST_TO_ADDR
// def_people_respawning = 2 ;
1627: LD_ADDR_EXP 68
1631: PUSH
1632: LD_INT 2
1634: ST_TO_ADDR
// def_siberite_bomb = 0 ;
1635: LD_ADDR_EXP 70
1639: PUSH
1640: LD_INT 0
1642: ST_TO_ADDR
// def_west_nations = 0 ;
1643: LD_ADDR_EXP 2
1647: PUSH
1648: LD_INT 0
1650: ST_TO_ADDR
// def_east_nations = 2 ;
1651: LD_ADDR_EXP 3
1655: PUSH
1656: LD_INT 2
1658: ST_TO_ADDR
// tech_level = 4 ;
1659: LD_ADDR_VAR 0 9
1663: PUSH
1664: LD_INT 4
1666: ST_TO_ADDR
// end ; InitGameRules ;
1667: CALL 15955 0 0
// if def_game_rules = 0 then
1671: LD_EXP 57
1675: PUSH
1676: LD_INT 0
1678: EQUAL
1679: IFFALSE 1706
// begin if isSGUI then
1681: LD_OWVAR 83
1685: IFFALSE 1693
// setMpTechs ( ) else
1687: CALL 19405 0 0
1691: GO 1706
// begin SetMpTechLevel ( tech_level + 1 ) ;
1693: LD_VAR 0 9
1697: PUSH
1698: LD_INT 1
1700: PLUS
1701: PPUSH
1702: CALL 19552 0 1
// end ; end ; if not def_base_level then
1706: LD_EXP 58
1710: NOT
1711: IFFALSE 1721
// def_base_size := 0 ;
1713: LD_ADDR_EXP 1
1717: PUSH
1718: LD_INT 0
1720: ST_TO_ADDR
// is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1721: LD_ADDR_EXP 4
1725: PUSH
1726: LD_INT 0
1728: PUSH
1729: LD_INT 1
1731: PUSH
1732: LD_INT 1
1734: PUSH
1735: LD_INT 1
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: PUSH
1744: LD_EXP 58
1748: PUSH
1749: LD_INT 1
1751: PLUS
1752: ARRAY
1753: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
1754: LD_ADDR_EXP 5
1758: PUSH
1759: LD_INT 0
1761: PUSH
1762: LD_INT 0
1764: PUSH
1765: LD_INT 2
1767: PUSH
1768: LD_INT 4
1770: PUSH
1771: EMPTY
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: PUSH
1777: LD_EXP 58
1781: PUSH
1782: LD_INT 1
1784: PLUS
1785: ARRAY
1786: ST_TO_ADDR
// number_of_people = [ 5 , 7 , 9 , 11 ] [ def_amount_of_people + 1 ] ;
1787: LD_ADDR_EXP 6
1791: PUSH
1792: LD_INT 5
1794: PUSH
1795: LD_INT 7
1797: PUSH
1798: LD_INT 9
1800: PUSH
1801: LD_INT 11
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: PUSH
1810: LD_EXP 59
1814: PUSH
1815: LD_INT 1
1817: PLUS
1818: ARRAY
1819: ST_TO_ADDR
// skill_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1820: LD_ADDR_EXP 7
1824: PUSH
1825: LD_INT 2
1827: PUSH
1828: LD_INT 3
1830: PUSH
1831: LD_INT 4
1833: PUSH
1834: LD_INT 5
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: LIST
1841: LIST
1842: PUSH
1843: LD_EXP 60
1847: PUSH
1848: LD_INT 1
1850: PLUS
1851: ARRAY
1852: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1853: LD_ADDR_EXP 9
1857: PUSH
1858: LD_INT 0
1860: PUSH
1861: LD_INT 0
1863: PUSH
1864: LD_INT 0
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: LIST
1871: PUSH
1872: LD_INT 30
1874: PUSH
1875: LD_INT 0
1877: PUSH
1878: LD_INT 0
1880: PUSH
1881: EMPTY
1882: LIST
1883: LIST
1884: LIST
1885: PUSH
1886: LD_INT 50
1888: PUSH
1889: LD_INT 20
1891: PUSH
1892: LD_INT 0
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: LIST
1899: PUSH
1900: LD_INT 80
1902: PUSH
1903: LD_INT 40
1905: PUSH
1906: LD_INT 20
1908: PUSH
1909: EMPTY
1910: LIST
1911: LIST
1912: LIST
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: PUSH
1920: LD_EXP 61
1924: PUSH
1925: LD_INT 1
1927: PLUS
1928: ARRAY
1929: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1930: LD_ADDR_EXP 8
1934: PUSH
1935: LD_INT 10
1937: PUSH
1938: EMPTY
1939: LIST
1940: PUSH
1941: LD_INT 7
1943: PUSH
1944: LD_INT 14
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: PUSH
1951: LD_INT 6
1953: PUSH
1954: LD_INT 12
1956: PUSH
1957: LD_INT 18
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: LIST
1964: PUSH
1965: LD_INT 5
1967: PUSH
1968: LD_INT 10
1970: PUSH
1971: LD_INT 15
1973: PUSH
1974: LD_INT 20
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: PUSH
1989: LD_EXP 61
1993: PUSH
1994: LD_INT 1
1996: PLUS
1997: ARRAY
1998: ST_TO_ADDR
// shipments_density = [ 18 , 25 , 35 ] [ def_shipments_density + 1 ] ;
1999: LD_ADDR_EXP 10
2003: PUSH
2004: LD_INT 18
2006: PUSH
2007: LD_INT 25
2009: PUSH
2010: LD_INT 35
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: LIST
2017: PUSH
2018: LD_EXP 62
2022: PUSH
2023: LD_INT 1
2025: PLUS
2026: ARRAY
2027: ST_TO_ADDR
// amount_of_apemen := [ 0 , 2 , 4 , 6 ] [ def_amount_of_apemen + 1 ] ;
2028: LD_ADDR_EXP 12
2032: PUSH
2033: LD_INT 0
2035: PUSH
2036: LD_INT 2
2038: PUSH
2039: LD_INT 4
2041: PUSH
2042: LD_INT 6
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: PUSH
2051: LD_EXP 69
2055: PUSH
2056: LD_INT 1
2058: PLUS
2059: ARRAY
2060: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
2061: LD_ADDR_EXP 13
2065: PUSH
2066: LD_INT 0
2068: PUSH
2069: LD_INT 8400
2071: PUSH
2072: LD_INT 1750
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: LIST
2079: PUSH
2080: LD_EXP 68
2084: PUSH
2085: LD_INT 1
2087: PLUS
2088: ARRAY
2089: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
2090: LD_ADDR_EXP 14
2094: PUSH
2095: LD_INT 0
2097: PUSH
2098: LD_INT 21000
2100: PUSH
2101: LD_INT 4200
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: LIST
2108: PUSH
2109: LD_EXP 68
2113: PUSH
2114: LD_INT 1
2116: PLUS
2117: ARRAY
2118: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
2119: LD_ADDR_EXP 15
2123: PUSH
2124: LD_INT 0
2126: PUSH
2127: LD_INT 1
2129: PUSH
2130: LD_INT 63000
2132: PUSH
2133: LD_INT 126000
2135: PUSH
2136: LD_INT 189000
2138: PUSH
2139: LD_INT 252000
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: PUSH
2150: LD_EXP 70
2154: PUSH
2155: LD_INT 1
2157: PLUS
2158: ARRAY
2159: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
2160: LD_ADDR_EXP 11
2164: PUSH
2165: LD_INT 1
2167: NEG
2168: PUSH
2169: LD_INT 350
2171: PUSH
2172: LD_INT 700
2174: PUSH
2175: LD_INT 1400
2177: PUSH
2178: LD_INT 0
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: LIST
2187: PUSH
2188: LD_EXP 66
2192: PUSH
2193: LD_INT 1
2195: PLUS
2196: ARRAY
2197: ST_TO_ADDR
// battle_flags_id = [ ] ;
2198: LD_ADDR_EXP 29
2202: PUSH
2203: EMPTY
2204: ST_TO_ADDR
// if not def_builduptime then
2205: LD_EXP 71
2209: NOT
2210: IFFALSE 2215
// disable ( 600 ) ;
2212: LD_INT 600
2214: DISABLE_MARKED
// end ;
2215: LD_VAR 0 1
2219: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2220: LD_INT 0
2222: PPUSH
2223: PPUSH
2224: PPUSH
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
2225: LD_ADDR_EXP 20
2229: PUSH
2230: LD_EXP 16
2234: PUSH
2235: LD_INT 0
2237: PUSH
2238: EMPTY
2239: LIST
2240: DIFF
2241: PUSH
2242: LD_INT 1
2244: GREATER
2245: ST_TO_ADDR
// if not Team_Game then
2246: LD_EXP 20
2250: NOT
2251: IFFALSE 2349
// begin for i = 1 to 8 do
2253: LD_ADDR_VAR 0 2
2257: PUSH
2258: DOUBLE
2259: LD_INT 1
2261: DEC
2262: ST_TO_ADDR
2263: LD_INT 8
2265: PUSH
2266: FOR_TO
2267: IFFALSE 2345
// for j = 1 to 8 do
2269: LD_ADDR_VAR 0 3
2273: PUSH
2274: DOUBLE
2275: LD_INT 1
2277: DEC
2278: ST_TO_ADDR
2279: LD_INT 8
2281: PUSH
2282: FOR_TO
2283: IFFALSE 2341
// if i <> j then
2285: LD_VAR 0 2
2289: PUSH
2290: LD_VAR 0 3
2294: NONEQUAL
2295: IFFALSE 2319
// SetAttitude ( i , j , att_neutral , true ) else
2297: LD_VAR 0 2
2301: PPUSH
2302: LD_VAR 0 3
2306: PPUSH
2307: LD_INT 0
2309: PPUSH
2310: LD_INT 1
2312: PPUSH
2313: CALL_OW 80
2317: GO 2339
// SetAttitude ( i , j , att_friend , true ) ;
2319: LD_VAR 0 2
2323: PPUSH
2324: LD_VAR 0 3
2328: PPUSH
2329: LD_INT 1
2331: PPUSH
2332: LD_INT 1
2334: PPUSH
2335: CALL_OW 80
2339: GO 2282
2341: POP
2342: POP
2343: GO 2266
2345: POP
2346: POP
// end else
2347: GO 2524
// begin if def_shared_vision then
2349: LD_EXP 65
2353: IFFALSE 2418
// begin for i in Teams do
2355: LD_ADDR_VAR 0 2
2359: PUSH
2360: LD_EXP 17
2364: PUSH
2365: FOR_IN
2366: IFFALSE 2416
// for j = 2 to i do
2368: LD_ADDR_VAR 0 3
2372: PUSH
2373: DOUBLE
2374: LD_INT 2
2376: DEC
2377: ST_TO_ADDR
2378: LD_VAR 0 2
2382: PUSH
2383: FOR_TO
2384: IFFALSE 2412
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2386: LD_VAR 0 2
2390: PUSH
2391: LD_VAR 0 3
2395: ARRAY
2396: PPUSH
2397: LD_VAR 0 2
2401: PUSH
2402: LD_INT 1
2404: ARRAY
2405: PPUSH
2406: CALL_OW 343
2410: GO 2383
2412: POP
2413: POP
2414: GO 2365
2416: POP
2417: POP
// end ; for i = 1 to 8 do
2418: LD_ADDR_VAR 0 2
2422: PUSH
2423: DOUBLE
2424: LD_INT 1
2426: DEC
2427: ST_TO_ADDR
2428: LD_INT 8
2430: PUSH
2431: FOR_TO
2432: IFFALSE 2522
// for j = 1 to 8 do
2434: LD_ADDR_VAR 0 3
2438: PUSH
2439: DOUBLE
2440: LD_INT 1
2442: DEC
2443: ST_TO_ADDR
2444: LD_INT 8
2446: PUSH
2447: FOR_TO
2448: IFFALSE 2518
// if Side_Teams [ i ] = Side_Teams [ j ] then
2450: LD_EXP 16
2454: PUSH
2455: LD_VAR 0 2
2459: ARRAY
2460: PUSH
2461: LD_EXP 16
2465: PUSH
2466: LD_VAR 0 3
2470: ARRAY
2471: EQUAL
2472: IFFALSE 2496
// SetAttitude ( i , j , att_friend , true ) else
2474: LD_VAR 0 2
2478: PPUSH
2479: LD_VAR 0 3
2483: PPUSH
2484: LD_INT 1
2486: PPUSH
2487: LD_INT 1
2489: PPUSH
2490: CALL_OW 80
2494: GO 2516
// SetAttitude ( i , j , att_enemy , true ) ;
2496: LD_VAR 0 2
2500: PPUSH
2501: LD_VAR 0 3
2505: PPUSH
2506: LD_INT 2
2508: PPUSH
2509: LD_INT 1
2511: PPUSH
2512: CALL_OW 80
2516: GO 2447
2518: POP
2519: POP
2520: GO 2431
2522: POP
2523: POP
// end ; end ;
2524: LD_VAR 0 1
2528: RET
// function prepare_people ( count , cl , x , y , r ) ; var i , j , un ; begin
2529: LD_INT 0
2531: PPUSH
2532: PPUSH
2533: PPUSH
2534: PPUSH
// result := [ ] ;
2535: LD_ADDR_VAR 0 6
2539: PUSH
2540: EMPTY
2541: ST_TO_ADDR
// for i := 1 to count do
2542: LD_ADDR_VAR 0 7
2546: PUSH
2547: DOUBLE
2548: LD_INT 1
2550: DEC
2551: ST_TO_ADDR
2552: LD_VAR 0 1
2556: PUSH
2557: FOR_TO
2558: IFFALSE 2954
// begin uc_direction := Rand ( 0 , 5 ) ;
2560: LD_ADDR_OWVAR 24
2564: PUSH
2565: LD_INT 0
2567: PPUSH
2568: LD_INT 5
2570: PPUSH
2571: CALL_OW 12
2575: ST_TO_ADDR
// if commander then
2576: LD_LOC 1
2580: IFFALSE 2689
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2582: LD_ADDR_OWVAR 26
2586: PUSH
2587: LD_OWVAR 19
2591: PUSH
2592: LD_OWVAR 20
2596: ARRAY
2597: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2598: LD_INT 1
2600: PPUSH
2601: LD_INT 2
2603: PPUSH
2604: CALL_OW 12
2608: PPUSH
2609: LD_VAR 0 2
2613: PPUSH
2614: LD_EXP 7
2618: PUSH
2619: LD_INT 2
2621: PLUS
2622: PPUSH
2623: CALL_OW 380
// hc_importance := 105 ;
2627: LD_ADDR_OWVAR 32
2631: PUSH
2632: LD_INT 105
2634: ST_TO_ADDR
// commander := false ;
2635: LD_ADDR_LOC 1
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if Multiplayer then
2643: LD_OWVAR 4
2647: IFFALSE 2687
// begin hc_gallery := MULTIAVATARS ;
2649: LD_ADDR_OWVAR 33
2653: PUSH
2654: LD_STRING MULTIAVATARS
2656: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2657: LD_ADDR_OWVAR 34
2661: PUSH
2662: LD_OWVAR 20
2666: PPUSH
2667: CALL_OW 525
2671: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2672: LD_ADDR_OWVAR 27
2676: PUSH
2677: LD_OWVAR 20
2681: PPUSH
2682: CALL_OW 526
2686: ST_TO_ADDR
// end ; end else
2687: GO 2752
// begin hc_name :=  ;
2689: LD_ADDR_OWVAR 26
2693: PUSH
2694: LD_STRING 
2696: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2697: LD_INT 1
2699: PPUSH
2700: LD_INT 2
2702: PPUSH
2703: CALL_OW 12
2707: PPUSH
2708: LD_VAR 0 2
2712: PPUSH
2713: LD_EXP 7
2717: PPUSH
2718: CALL_OW 380
// hc_importance := 0 ;
2722: LD_ADDR_OWVAR 32
2726: PUSH
2727: LD_INT 0
2729: ST_TO_ADDR
// if Multiplayer then
2730: LD_OWVAR 4
2734: IFFALSE 2752
// begin hc_gallery :=  ;
2736: LD_ADDR_OWVAR 33
2740: PUSH
2741: LD_STRING 
2743: ST_TO_ADDR
// hc_face_number := 0 ;
2744: LD_ADDR_OWVAR 34
2748: PUSH
2749: LD_INT 0
2751: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2752: LD_ADDR_VAR 0 9
2756: PUSH
2757: CALL_OW 44
2761: ST_TO_ADDR
// if global_defined then
2762: LD_LOC 3
2766: IFFALSE 2906
// begin if ( cl = class_soldier ) then
2768: LD_VAR 0 2
2772: PUSH
2773: LD_INT 1
2775: EQUAL
2776: IFFALSE 2796
// j := i + soldiers_created else
2778: LD_ADDR_VAR 0 8
2782: PUSH
2783: LD_VAR 0 7
2787: PUSH
2788: LD_LOC 4
2792: PLUS
2793: ST_TO_ADDR
2794: GO 2806
// j := i ;
2796: LD_ADDR_VAR 0 8
2800: PUSH
2801: LD_VAR 0 7
2805: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2806: LD_LOC 2
2810: PUSH
2811: LD_VAR 0 2
2815: ARRAY
2816: PUSH
2817: LD_VAR 0 8
2821: ARRAY
2822: PPUSH
2823: LD_VAR 0 9
2827: PPUSH
2828: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2832: LD_VAR 0 9
2836: PPUSH
2837: LD_INT 2
2839: PPUSH
2840: LD_LOC 2
2844: PUSH
2845: LD_VAR 0 2
2849: ARRAY
2850: PUSH
2851: LD_VAR 0 8
2855: ARRAY
2856: PPUSH
2857: LD_INT 2
2859: PPUSH
2860: CALL_OW 260
2864: PPUSH
2865: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2869: LD_VAR 0 9
2873: PPUSH
2874: LD_INT 1
2876: PPUSH
2877: LD_LOC 2
2881: PUSH
2882: LD_VAR 0 2
2886: ARRAY
2887: PUSH
2888: LD_VAR 0 8
2892: ARRAY
2893: PPUSH
2894: LD_INT 1
2896: PPUSH
2897: CALL_OW 260
2901: PPUSH
2902: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2906: LD_VAR 0 9
2910: PPUSH
2911: LD_VAR 0 3
2915: PPUSH
2916: LD_VAR 0 4
2920: PPUSH
2921: LD_VAR 0 5
2925: PPUSH
2926: LD_INT 0
2928: PPUSH
2929: CALL_OW 50
// result := result ^ [ un ] ;
2933: LD_ADDR_VAR 0 6
2937: PUSH
2938: LD_VAR 0 6
2942: PUSH
2943: LD_VAR 0 9
2947: PUSH
2948: EMPTY
2949: LIST
2950: ADD
2951: ST_TO_ADDR
// end ;
2952: GO 2557
2954: POP
2955: POP
// if not global_defined then
2956: LD_LOC 3
2960: NOT
2961: IFFALSE 3039
// if ( global_units >= cl ) then
2963: LD_LOC 2
2967: PUSH
2968: LD_VAR 0 2
2972: GREATEREQUAL
2973: IFFALSE 3014
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2975: LD_ADDR_LOC 2
2979: PUSH
2980: LD_LOC 2
2984: PPUSH
2985: LD_VAR 0 2
2989: PPUSH
2990: LD_LOC 2
2994: PUSH
2995: LD_VAR 0 2
2999: ARRAY
3000: PUSH
3001: LD_VAR 0 6
3005: ADD
3006: PPUSH
3007: CALL_OW 1
3011: ST_TO_ADDR
3012: GO 3039
// global_units := Replace ( global_units , cl , result ) ;
3014: LD_ADDR_LOC 2
3018: PUSH
3019: LD_LOC 2
3023: PPUSH
3024: LD_VAR 0 2
3028: PPUSH
3029: LD_VAR 0 6
3033: PPUSH
3034: CALL_OW 1
3038: ST_TO_ADDR
// end ;
3039: LD_VAR 0 6
3043: RET
// function prepare_side ( side , pos , nation ) ; var x , y , dir , i , r , sol , br , dep ; begin
3044: LD_INT 0
3046: PPUSH
3047: PPUSH
3048: PPUSH
3049: PPUSH
3050: PPUSH
3051: PPUSH
3052: PPUSH
3053: PPUSH
3054: PPUSH
// if side in [ 0 , 9 ] then
3055: LD_VAR 0 1
3059: PUSH
3060: LD_INT 0
3062: PUSH
3063: LD_INT 9
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: IN
3070: IFFALSE 3074
// exit ;
3072: GO 4329
// uc_nation := nation ;
3074: LD_ADDR_OWVAR 21
3078: PUSH
3079: LD_VAR 0 3
3083: ST_TO_ADDR
// uc_side := side ;
3084: LD_ADDR_OWVAR 20
3088: PUSH
3089: LD_VAR 0 1
3093: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3094: LD_ADDR_VAR 0 5
3098: PUSH
3099: LD_EXP 22
3103: PUSH
3104: LD_VAR 0 2
3108: ARRAY
3109: PUSH
3110: LD_INT 1
3112: ARRAY
3113: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3114: LD_ADDR_VAR 0 6
3118: PUSH
3119: LD_EXP 22
3123: PUSH
3124: LD_VAR 0 2
3128: ARRAY
3129: PUSH
3130: LD_INT 2
3132: ARRAY
3133: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3134: LD_ADDR_VAR 0 7
3138: PUSH
3139: LD_EXP 22
3143: PUSH
3144: LD_VAR 0 2
3148: ARRAY
3149: PUSH
3150: LD_INT 3
3152: ARRAY
3153: ST_TO_ADDR
// if is_depot then
3154: LD_EXP 4
3158: IFFALSE 3291
// begin bc_type = b_depot ;
3160: LD_ADDR_OWVAR 42
3164: PUSH
3165: LD_INT 0
3167: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3168: LD_ADDR_VAR 0 12
3172: PUSH
3173: LD_VAR 0 5
3177: PPUSH
3178: LD_VAR 0 6
3182: PPUSH
3183: LD_VAR 0 7
3187: PPUSH
3188: CALL_OW 47
3192: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3193: LD_VAR 0 12
3197: PPUSH
3198: LD_STRING @
3200: PUSH
3201: LD_VAR 0 1
3205: STR
3206: PPUSH
3207: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3211: LD_VAR 0 12
3215: PPUSH
3216: CALL_OW 274
3220: PPUSH
3221: LD_INT 1
3223: PPUSH
3224: LD_EXP 9
3228: PUSH
3229: LD_INT 1
3231: ARRAY
3232: PPUSH
3233: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3237: LD_VAR 0 12
3241: PPUSH
3242: CALL_OW 274
3246: PPUSH
3247: LD_INT 2
3249: PPUSH
3250: LD_EXP 9
3254: PUSH
3255: LD_INT 2
3257: ARRAY
3258: PPUSH
3259: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3263: LD_VAR 0 12
3267: PPUSH
3268: CALL_OW 274
3272: PPUSH
3273: LD_INT 3
3275: PPUSH
3276: LD_EXP 9
3280: PUSH
3281: LD_INT 3
3283: ARRAY
3284: PPUSH
3285: CALL_OW 277
// end else
3289: GO 3435
// begin for i := 1 to 3 do
3291: LD_ADDR_VAR 0 8
3295: PUSH
3296: DOUBLE
3297: LD_INT 1
3299: DEC
3300: ST_TO_ADDR
3301: LD_INT 3
3303: PUSH
3304: FOR_TO
3305: IFFALSE 3433
// begin r := starting_resources [ i ] ;
3307: LD_ADDR_VAR 0 9
3311: PUSH
3312: LD_EXP 9
3316: PUSH
3317: LD_VAR 0 8
3321: ARRAY
3322: ST_TO_ADDR
// while r >= 10 do
3323: LD_VAR 0 9
3327: PUSH
3328: LD_INT 10
3330: GREATEREQUAL
3331: IFFALSE 3431
// if r > 50 then
3333: LD_VAR 0 9
3337: PUSH
3338: LD_INT 50
3340: GREATER
3341: IFFALSE 3387
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3343: LD_VAR 0 8
3347: PPUSH
3348: LD_INT 5
3350: PPUSH
3351: LD_VAR 0 5
3355: PPUSH
3356: LD_VAR 0 6
3360: PPUSH
3361: LD_INT 4
3363: PPUSH
3364: LD_INT 0
3366: PPUSH
3367: CALL_OW 60
// r := r - 50 ;
3371: LD_ADDR_VAR 0 9
3375: PUSH
3376: LD_VAR 0 9
3380: PUSH
3381: LD_INT 50
3383: MINUS
3384: ST_TO_ADDR
// end else
3385: GO 3429
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3387: LD_VAR 0 8
3391: PPUSH
3392: LD_VAR 0 9
3396: PUSH
3397: LD_INT 10
3399: DIV
3400: PPUSH
3401: LD_VAR 0 5
3405: PPUSH
3406: LD_VAR 0 6
3410: PPUSH
3411: LD_INT 4
3413: PPUSH
3414: LD_INT 0
3416: PPUSH
3417: CALL_OW 60
// r := 0 ;
3421: LD_ADDR_VAR 0 9
3425: PUSH
3426: LD_INT 0
3428: ST_TO_ADDR
// end ;
3429: GO 3323
// end ;
3431: GO 3304
3433: POP
3434: POP
// end ; if def_base_size > 0 then
3435: LD_EXP 1
3439: PUSH
3440: LD_INT 0
3442: GREATER
3443: IFFALSE 3518
// begin bc_kind1 := b_lab_basic ;
3445: LD_ADDR_OWVAR 44
3449: PUSH
3450: LD_INT 9
3452: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
3453: LD_ADDR_OWVAR 45
3457: PUSH
3458: LD_INT 9
3460: ST_TO_ADDR
// bc_type := b_lab ;
3461: LD_ADDR_OWVAR 42
3465: PUSH
3466: LD_INT 6
3468: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( labs_def [ pos ] [ 1 ] , labs_def [ pos ] [ 2 ] , labs_def [ pos ] [ 3 ] ) ;
3469: LD_EXP 24
3473: PUSH
3474: LD_VAR 0 2
3478: ARRAY
3479: PUSH
3480: LD_INT 1
3482: ARRAY
3483: PPUSH
3484: LD_EXP 24
3488: PUSH
3489: LD_VAR 0 2
3493: ARRAY
3494: PUSH
3495: LD_INT 2
3497: ARRAY
3498: PPUSH
3499: LD_EXP 24
3503: PUSH
3504: LD_VAR 0 2
3508: ARRAY
3509: PUSH
3510: LD_INT 3
3512: ARRAY
3513: PPUSH
3514: CALL_OW 47
// end ; if def_base_size > 1 then
3518: LD_EXP 1
3522: PUSH
3523: LD_INT 1
3525: GREATER
3526: IFFALSE 3585
// begin bc_type := b_workshop ;
3528: LD_ADDR_OWVAR 42
3532: PUSH
3533: LD_INT 2
3535: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( factory_def [ pos ] [ 1 ] , factory_def [ pos ] [ 2 ] , factory_def [ pos ] [ 3 ] ) ;
3536: LD_EXP 25
3540: PUSH
3541: LD_VAR 0 2
3545: ARRAY
3546: PUSH
3547: LD_INT 1
3549: ARRAY
3550: PPUSH
3551: LD_EXP 25
3555: PUSH
3556: LD_VAR 0 2
3560: ARRAY
3561: PUSH
3562: LD_INT 2
3564: ARRAY
3565: PPUSH
3566: LD_EXP 25
3570: PUSH
3571: LD_VAR 0 2
3575: ARRAY
3576: PUSH
3577: LD_INT 3
3579: ARRAY
3580: PPUSH
3581: CALL_OW 47
// end ; for r in starting_crates do
3585: LD_ADDR_VAR 0 9
3589: PUSH
3590: LD_EXP 8
3594: PUSH
3595: FOR_IN
3596: IFFALSE 3628
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3598: LD_INT 1
3600: PPUSH
3601: LD_INT 5
3603: PPUSH
3604: LD_VAR 0 5
3608: PPUSH
3609: LD_VAR 0 6
3613: PPUSH
3614: LD_VAR 0 9
3618: PPUSH
3619: LD_INT 0
3621: PPUSH
3622: CALL_OW 60
3626: GO 3595
3628: POP
3629: POP
// if def_morale_flags then
3630: LD_EXP 66
3634: IFFALSE 3773
// begin x := start_def [ pos ] [ 1 ] ;
3636: LD_ADDR_VAR 0 5
3640: PUSH
3641: LD_EXP 26
3645: PUSH
3646: LD_VAR 0 2
3650: ARRAY
3651: PUSH
3652: LD_INT 1
3654: ARRAY
3655: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3656: LD_ADDR_VAR 0 6
3660: PUSH
3661: LD_EXP 26
3665: PUSH
3666: LD_VAR 0 2
3670: ARRAY
3671: PUSH
3672: LD_INT 2
3674: ARRAY
3675: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3676: LD_VAR 0 5
3680: PPUSH
3681: LD_VAR 0 6
3685: PPUSH
3686: LD_INT 12
3688: PPUSH
3689: LD_INT 2
3691: PPUSH
3692: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3696: LD_ADDR_EXP 29
3700: PUSH
3701: LD_EXP 29
3705: PUSH
3706: LD_VAR 0 1
3710: PPUSH
3711: LD_VAR 0 5
3715: PPUSH
3716: LD_VAR 0 6
3720: PPUSH
3721: LD_INT 1
3723: PUSH
3724: LD_INT 100
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: PUSH
3731: LD_INT 2
3733: PUSH
3734: LD_INT 50
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: PUSH
3741: LD_INT 3
3743: PUSH
3744: LD_INT 20
3746: PUSH
3747: EMPTY
3748: LIST
3749: LIST
3750: PUSH
3751: LD_INT 20
3753: PUSH
3754: LD_INT 100
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: LIST
3765: LIST
3766: PPUSH
3767: CALL_OW 418
3771: ADD
3772: ST_TO_ADDR
// end ; commander := true ;
3773: LD_ADDR_LOC 1
3777: PUSH
3778: LD_INT 1
3780: ST_TO_ADDR
// soldiers_created := 0 ;
3781: LD_ADDR_LOC 4
3785: PUSH
3786: LD_INT 0
3788: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3789: LD_ADDR_VAR 0 8
3793: PUSH
3794: DOUBLE
3795: LD_INT 1
3797: DEC
3798: ST_TO_ADDR
3799: LD_EXP 5
3803: PUSH
3804: FOR_TO
3805: IFFALSE 4047
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3807: LD_ADDR_VAR 0 5
3811: PUSH
3812: LD_EXP 23
3816: PUSH
3817: LD_VAR 0 2
3821: ARRAY
3822: PUSH
3823: LD_VAR 0 8
3827: ARRAY
3828: PUSH
3829: LD_INT 1
3831: ARRAY
3832: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3833: LD_ADDR_VAR 0 6
3837: PUSH
3838: LD_EXP 23
3842: PUSH
3843: LD_VAR 0 2
3847: ARRAY
3848: PUSH
3849: LD_VAR 0 8
3853: ARRAY
3854: PUSH
3855: LD_INT 2
3857: ARRAY
3858: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3859: LD_ADDR_VAR 0 7
3863: PUSH
3864: LD_EXP 23
3868: PUSH
3869: LD_VAR 0 2
3873: ARRAY
3874: PUSH
3875: LD_VAR 0 8
3879: ARRAY
3880: PUSH
3881: LD_INT 3
3883: ARRAY
3884: ST_TO_ADDR
// if i < 4 then
3885: LD_VAR 0 8
3889: PUSH
3890: LD_INT 4
3892: LESS
3893: IFFALSE 3905
// bc_type := b_breastwork else
3895: LD_ADDR_OWVAR 42
3899: PUSH
3900: LD_INT 31
3902: ST_TO_ADDR
3903: GO 3913
// bc_type := b_armoury ;
3905: LD_ADDR_OWVAR 42
3909: PUSH
3910: LD_INT 4
3912: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3913: LD_ADDR_VAR 0 11
3917: PUSH
3918: LD_VAR 0 5
3922: PPUSH
3923: LD_VAR 0 6
3927: PPUSH
3928: LD_VAR 0 7
3932: PPUSH
3933: CALL_OW 47
3937: ST_TO_ADDR
// x := ShiftX ( x , dir , 2 ) ;
3938: LD_ADDR_VAR 0 5
3942: PUSH
3943: LD_VAR 0 5
3947: PPUSH
3948: LD_VAR 0 7
3952: PPUSH
3953: LD_INT 2
3955: PPUSH
3956: CALL_OW 272
3960: ST_TO_ADDR
// y := ShiftY ( y , dir , 2 ) ;
3961: LD_ADDR_VAR 0 6
3965: PUSH
3966: LD_VAR 0 6
3970: PPUSH
3971: LD_VAR 0 7
3975: PPUSH
3976: LD_INT 2
3978: PPUSH
3979: CALL_OW 273
3983: ST_TO_ADDR
// sol := prepare_people ( 1 , class_soldier , x , y , 0 ) [ 1 ] ;
3984: LD_ADDR_VAR 0 10
3988: PUSH
3989: LD_INT 1
3991: PPUSH
3992: LD_INT 1
3994: PPUSH
3995: LD_VAR 0 5
3999: PPUSH
4000: LD_VAR 0 6
4004: PPUSH
4005: LD_INT 0
4007: PPUSH
4008: CALL 2529 0 5
4012: PUSH
4013: LD_INT 1
4015: ARRAY
4016: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
4017: LD_ADDR_LOC 4
4021: PUSH
4022: LD_LOC 4
4026: PUSH
4027: LD_INT 1
4029: PLUS
4030: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
4031: LD_VAR 0 10
4035: PPUSH
4036: LD_VAR 0 11
4040: PPUSH
4041: CALL_OW 120
// end ;
4045: GO 3804
4047: POP
4048: POP
// x := start_def [ pos ] [ 1 ] ;
4049: LD_ADDR_VAR 0 5
4053: PUSH
4054: LD_EXP 26
4058: PUSH
4059: LD_VAR 0 2
4063: ARRAY
4064: PUSH
4065: LD_INT 1
4067: ARRAY
4068: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4069: LD_ADDR_VAR 0 6
4073: PUSH
4074: LD_EXP 26
4078: PUSH
4079: LD_VAR 0 2
4083: ARRAY
4084: PUSH
4085: LD_INT 2
4087: ARRAY
4088: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 ) ;
4089: LD_LOC 8
4093: PUSH
4094: LD_EXP 5
4098: MINUS
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_VAR 0 5
4107: PPUSH
4108: LD_VAR 0 6
4112: PPUSH
4113: LD_INT 5
4115: PPUSH
4116: CALL 2529 0 5
// prepare_people ( neng , class_engineer , x , y , 5 ) ;
4120: LD_LOC 5
4124: PPUSH
4125: LD_INT 2
4127: PPUSH
4128: LD_VAR 0 5
4132: PPUSH
4133: LD_VAR 0 6
4137: PPUSH
4138: LD_INT 5
4140: PPUSH
4141: CALL 2529 0 5
// prepare_people ( nmech , class_mechanic , x , y , 5 ) ;
4145: LD_LOC 7
4149: PPUSH
4150: LD_INT 3
4152: PPUSH
4153: LD_VAR 0 5
4157: PPUSH
4158: LD_VAR 0 6
4162: PPUSH
4163: LD_INT 5
4165: PPUSH
4166: CALL 2529 0 5
// prepare_people ( nsci , class_scientistic , x , y , 5 ) ;
4170: LD_LOC 6
4174: PPUSH
4175: LD_INT 4
4177: PPUSH
4178: LD_VAR 0 5
4182: PPUSH
4183: LD_VAR 0 6
4187: PPUSH
4188: LD_INT 5
4190: PPUSH
4191: CALL 2529 0 5
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4195: LD_EXP 67
4199: PUSH
4200: LD_INT 20
4202: PPUSH
4203: LD_VAR 0 1
4207: PPUSH
4208: CALL_OW 321
4212: PUSH
4213: LD_INT 1
4215: EQUAL
4216: AND
4217: IFFALSE 4234
// SetTech ( tech_SibDet , side , state_researched ) ;
4219: LD_INT 20
4221: PPUSH
4222: LD_VAR 0 1
4226: PPUSH
4227: LD_INT 2
4229: PPUSH
4230: CALL_OW 322
// if def_siberite_bomb = 1 then
4234: LD_EXP 70
4238: PUSH
4239: LD_INT 1
4241: EQUAL
4242: IFFALSE 4276
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4244: LD_INT 25
4246: PPUSH
4247: LD_VAR 0 1
4251: PPUSH
4252: LD_INT 1
4254: PPUSH
4255: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4259: LD_INT 73
4261: PPUSH
4262: LD_VAR 0 1
4266: PPUSH
4267: LD_INT 1
4269: PPUSH
4270: CALL_OW 322
// end else
4274: GO 4306
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4276: LD_INT 25
4278: PPUSH
4279: LD_VAR 0 1
4283: PPUSH
4284: LD_INT 0
4286: PPUSH
4287: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4291: LD_INT 73
4293: PPUSH
4294: LD_VAR 0 1
4298: PPUSH
4299: LD_INT 0
4301: PPUSH
4302: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4306: LD_INT 24
4308: PPUSH
4309: LD_VAR 0 1
4313: PPUSH
4314: LD_INT 0
4316: PPUSH
4317: CALL_OW 322
// global_defined := true ;
4321: LD_ADDR_LOC 3
4325: PUSH
4326: LD_INT 1
4328: ST_TO_ADDR
// end ;
4329: LD_VAR 0 4
4333: RET
// every 0 0$1 do
4334: GO 4336
4336: DISABLE
// if ( def_siberite_bomb > 1 ) then
4337: LD_EXP 70
4341: PUSH
4342: LD_INT 1
4344: GREATER
4345: IFFALSE 4360
// begin wait ( siberite_bomb_Delay ) ;
4347: LD_EXP 15
4351: PPUSH
4352: CALL_OW 67
// EnableSibFiss ;
4356: CALL 4361 0 0
// end ;
4360: END
// function EnableSibFiss ; var i ; begin
4361: LD_INT 0
4363: PPUSH
4364: PPUSH
// for i := 1 to 8 do
4365: LD_ADDR_VAR 0 2
4369: PUSH
4370: DOUBLE
4371: LD_INT 1
4373: DEC
4374: ST_TO_ADDR
4375: LD_INT 8
4377: PUSH
4378: FOR_TO
4379: IFFALSE 4425
// if Side_Positions [ i ] then
4381: LD_EXP 18
4385: PUSH
4386: LD_VAR 0 2
4390: ARRAY
4391: IFFALSE 4423
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4393: LD_INT 25
4395: PPUSH
4396: LD_VAR 0 2
4400: PPUSH
4401: LD_INT 1
4403: PPUSH
4404: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4408: LD_INT 73
4410: PPUSH
4411: LD_VAR 0 2
4415: PPUSH
4416: LD_INT 1
4418: PPUSH
4419: CALL_OW 322
// end ;
4423: GO 4378
4425: POP
4426: POP
// end ;
4427: LD_VAR 0 1
4431: RET
// function prepare_sides ; var i , orig , pos ; begin
4432: LD_INT 0
4434: PPUSH
4435: PPUSH
4436: PPUSH
4437: PPUSH
// global_units := [ ] ;
4438: LD_ADDR_LOC 2
4442: PUSH
4443: EMPTY
4444: ST_TO_ADDR
// global_defined := false ;
4445: LD_ADDR_LOC 3
4449: PUSH
4450: LD_INT 0
4452: ST_TO_ADDR
// CountClassMembers ;
4453: CALL 4972 0 0
// for i := 1 to 8 do
4457: LD_ADDR_VAR 0 2
4461: PUSH
4462: DOUBLE
4463: LD_INT 1
4465: DEC
4466: ST_TO_ADDR
4467: LD_INT 8
4469: PUSH
4470: FOR_TO
4471: IFFALSE 4671
// if Side_Positions [ i ] then
4473: LD_EXP 18
4477: PUSH
4478: LD_VAR 0 2
4482: ARRAY
4483: IFFALSE 4669
// begin pos := Side_Positions [ i ] ;
4485: LD_ADDR_VAR 0 4
4489: PUSH
4490: LD_EXP 18
4494: PUSH
4495: LD_VAR 0 2
4499: ARRAY
4500: ST_TO_ADDR
// if Game_Type in [ 2 , 12 ] then
4501: LD_EXP 56
4505: PUSH
4506: LD_INT 2
4508: PUSH
4509: LD_INT 12
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: IN
4516: IFFALSE 4644
// begin if Game_Type = 12 then
4518: LD_EXP 56
4522: PUSH
4523: LD_INT 12
4525: EQUAL
4526: IFFALSE 4588
// begin prepare_side ( i , pos , Position_Nations [ pos ] ) ;
4528: LD_VAR 0 2
4532: PPUSH
4533: LD_VAR 0 4
4537: PPUSH
4538: LD_EXP 21
4542: PUSH
4543: LD_VAR 0 4
4547: ARRAY
4548: PPUSH
4549: CALL 3044 0 3
// prepare_side ( i , pos + 1 , Position_Nations [ pos + 1 ] ) end else
4553: LD_VAR 0 2
4557: PPUSH
4558: LD_VAR 0 4
4562: PUSH
4563: LD_INT 1
4565: PLUS
4566: PPUSH
4567: LD_EXP 21
4571: PUSH
4572: LD_VAR 0 4
4576: PUSH
4577: LD_INT 1
4579: PLUS
4580: ARRAY
4581: PPUSH
4582: CALL 3044 0 3
4586: GO 4642
// begin prepare_side ( i , pos , Side_Nations [ i ] ) ;
4588: LD_VAR 0 2
4592: PPUSH
4593: LD_VAR 0 4
4597: PPUSH
4598: LD_EXP 19
4602: PUSH
4603: LD_VAR 0 2
4607: ARRAY
4608: PPUSH
4609: CALL 3044 0 3
// prepare_side ( i , pos + 1 , Side_Nations [ i ] ) ;
4613: LD_VAR 0 2
4617: PPUSH
4618: LD_VAR 0 4
4622: PUSH
4623: LD_INT 1
4625: PLUS
4626: PPUSH
4627: LD_EXP 19
4631: PUSH
4632: LD_VAR 0 2
4636: ARRAY
4637: PPUSH
4638: CALL 3044 0 3
// end ; end else
4642: GO 4669
// prepare_side ( i , pos , Side_Nations [ i ] ) ;
4644: LD_VAR 0 2
4648: PPUSH
4649: LD_VAR 0 4
4653: PPUSH
4654: LD_EXP 19
4658: PUSH
4659: LD_VAR 0 2
4663: ARRAY
4664: PPUSH
4665: CALL 3044 0 3
// end ;
4669: GO 4470
4671: POP
4672: POP
// end ;
4673: LD_VAR 0 1
4677: RET
// function Modify_Nations ; var list , west , east , i ; begin
4678: LD_INT 0
4680: PPUSH
4681: PPUSH
4682: PPUSH
4683: PPUSH
4684: PPUSH
// list := [ ] ;
4685: LD_ADDR_VAR 0 2
4689: PUSH
4690: EMPTY
4691: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
4692: LD_ADDR_VAR 0 5
4696: PUSH
4697: DOUBLE
4698: LD_INT 1
4700: DEC
4701: ST_TO_ADDR
4702: LD_EXP 18
4706: PUSH
4707: LD_INT 0
4709: PLUS
4710: PUSH
4711: FOR_TO
4712: IFFALSE 4930
// if side_positions [ i ] = 1 then
4714: LD_EXP 18
4718: PUSH
4719: LD_VAR 0 5
4723: ARRAY
4724: PUSH
4725: LD_INT 1
4727: EQUAL
4728: IFFALSE 4822
// case side_nations [ i ] of 1 :
4730: LD_EXP 19
4734: PUSH
4735: LD_VAR 0 5
4739: ARRAY
4740: PUSH
4741: LD_INT 1
4743: DOUBLE
4744: EQUAL
4745: IFTRUE 4749
4747: GO 4767
4749: POP
// west := [ 1 , 2 ] ; 2 :
4750: LD_ADDR_VAR 0 3
4754: PUSH
4755: LD_INT 1
4757: PUSH
4758: LD_INT 2
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: ST_TO_ADDR
4765: GO 4820
4767: LD_INT 2
4769: DOUBLE
4770: EQUAL
4771: IFTRUE 4775
4773: GO 4793
4775: POP
// west := [ 2 , 3 ] ; 3 :
4776: LD_ADDR_VAR 0 3
4780: PUSH
4781: LD_INT 2
4783: PUSH
4784: LD_INT 3
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: ST_TO_ADDR
4791: GO 4820
4793: LD_INT 3
4795: DOUBLE
4796: EQUAL
4797: IFTRUE 4801
4799: GO 4819
4801: POP
// west := [ 3 , 1 ] ; end else
4802: LD_ADDR_VAR 0 3
4806: PUSH
4807: LD_INT 3
4809: PUSH
4810: LD_INT 1
4812: PUSH
4813: EMPTY
4814: LIST
4815: LIST
4816: ST_TO_ADDR
4817: GO 4820
4819: POP
4820: GO 4928
// if side_positions [ i ] = 3 then
4822: LD_EXP 18
4826: PUSH
4827: LD_VAR 0 5
4831: ARRAY
4832: PUSH
4833: LD_INT 3
4835: EQUAL
4836: IFFALSE 4928
// case side_nations [ i ] of 1 :
4838: LD_EXP 19
4842: PUSH
4843: LD_VAR 0 5
4847: ARRAY
4848: PUSH
4849: LD_INT 1
4851: DOUBLE
4852: EQUAL
4853: IFTRUE 4857
4855: GO 4875
4857: POP
// east := [ 1 , 2 ] ; 2 :
4858: LD_ADDR_VAR 0 4
4862: PUSH
4863: LD_INT 1
4865: PUSH
4866: LD_INT 2
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: ST_TO_ADDR
4873: GO 4928
4875: LD_INT 2
4877: DOUBLE
4878: EQUAL
4879: IFTRUE 4883
4881: GO 4901
4883: POP
// east := [ 2 , 3 ] ; 3 :
4884: LD_ADDR_VAR 0 4
4888: PUSH
4889: LD_INT 2
4891: PUSH
4892: LD_INT 3
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: ST_TO_ADDR
4899: GO 4928
4901: LD_INT 3
4903: DOUBLE
4904: EQUAL
4905: IFTRUE 4909
4907: GO 4927
4909: POP
// east := [ 3 , 1 ] ; end ;
4910: LD_ADDR_VAR 0 4
4914: PUSH
4915: LD_INT 3
4917: PUSH
4918: LD_INT 1
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: ST_TO_ADDR
4925: GO 4928
4927: POP
4928: GO 4711
4930: POP
4931: POP
// Position_Nations := west ^ east ^ [ 0 , 0 , 0 , 0 ] ;
4932: LD_ADDR_EXP 21
4936: PUSH
4937: LD_VAR 0 3
4941: PUSH
4942: LD_VAR 0 4
4946: ADD
4947: PUSH
4948: LD_INT 0
4950: PUSH
4951: LD_INT 0
4953: PUSH
4954: LD_INT 0
4956: PUSH
4957: LD_INT 0
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: LIST
4964: LIST
4965: ADD
4966: ST_TO_ADDR
// end ;
4967: LD_VAR 0 1
4971: RET
// function CountClassMembers ; var Mode ; begin
4972: LD_INT 0
4974: PPUSH
4975: PPUSH
// if No_Mechs then
4976: LD_EXP 72
4980: IFFALSE 4992
// Mode := 2 else
4982: LD_ADDR_VAR 0 2
4986: PUSH
4987: LD_INT 2
4989: ST_TO_ADDR
4990: GO 5000
// Mode := 1 ;
4992: LD_ADDR_VAR 0 2
4996: PUSH
4997: LD_INT 1
4999: ST_TO_ADDR
// neng := number_of_people ;
5000: LD_ADDR_LOC 5
5004: PUSH
5005: LD_EXP 6
5009: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
5010: LD_ADDR_LOC 8
5014: PUSH
5015: LD_LOC 5
5019: PUSH
5020: LD_INT 4
5022: PUSH
5023: LD_INT 3
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PUSH
5030: LD_VAR 0 2
5034: ARRAY
5035: DIV
5036: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
5037: LD_LOC 8
5041: PUSH
5042: LD_EXP 5
5046: LESS
5047: IFFALSE 5059
// nsol := number_of_breastworks ;
5049: LD_ADDR_LOC 8
5053: PUSH
5054: LD_EXP 5
5058: ST_TO_ADDR
// neng := neng - nsol ;
5059: LD_ADDR_LOC 5
5063: PUSH
5064: LD_LOC 5
5068: PUSH
5069: LD_LOC 8
5073: MINUS
5074: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
5075: LD_ADDR_LOC 6
5079: PUSH
5080: LD_LOC 5
5084: PUSH
5085: LD_INT 3
5087: PUSH
5088: LD_INT 2
5090: PUSH
5091: EMPTY
5092: LIST
5093: LIST
5094: PUSH
5095: LD_VAR 0 2
5099: ARRAY
5100: DIV
5101: ST_TO_ADDR
// if ( nsci < 1 ) then
5102: LD_LOC 6
5106: PUSH
5107: LD_INT 1
5109: LESS
5110: IFFALSE 5120
// nsci := 1 ;
5112: LD_ADDR_LOC 6
5116: PUSH
5117: LD_INT 1
5119: ST_TO_ADDR
// neng := neng - nsci ;
5120: LD_ADDR_LOC 5
5124: PUSH
5125: LD_LOC 5
5129: PUSH
5130: LD_LOC 6
5134: MINUS
5135: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5136: LD_ADDR_LOC 7
5140: PUSH
5141: LD_LOC 5
5145: PUSH
5146: LD_INT 2
5148: DIV
5149: PUSH
5150: LD_INT 0
5152: PUSH
5153: EMPTY
5154: LIST
5155: LIST
5156: PUSH
5157: LD_VAR 0 2
5161: ARRAY
5162: ST_TO_ADDR
// neng := neng - nmech ;
5163: LD_ADDR_LOC 5
5167: PUSH
5168: LD_LOC 5
5172: PUSH
5173: LD_LOC 7
5177: MINUS
5178: ST_TO_ADDR
// if ( neng < 1 ) then
5179: LD_LOC 5
5183: PUSH
5184: LD_INT 1
5186: LESS
5187: IFFALSE 5197
// neng := 1 ;
5189: LD_ADDR_LOC 5
5193: PUSH
5194: LD_INT 1
5196: ST_TO_ADDR
// end ;
5197: LD_VAR 0 1
5201: RET
// function Init_Win_Condition ; begin
5202: LD_INT 0
5204: PPUSH
// disable ( 98 ) ;
5205: LD_INT 98
5207: DISABLE_MARKED
// disable ( 99 ) ;
5208: LD_INT 99
5210: DISABLE_MARKED
// if Team_Game then
5211: LD_EXP 20
5215: IFFALSE 5222
// enable ( 98 ) else
5217: LD_INT 98
5219: ENABLE_MARKED
5220: GO 5225
// enable ( 99 ) ;
5222: LD_INT 99
5224: ENABLE_MARKED
// end ;
5225: LD_VAR 0 1
5229: RET
// starting begin DE_Triggers ;
5230: CALL 8694 0 0
// mp_selectmsg := true ;
5234: LD_ADDR_OWVAR 13
5238: PUSH
5239: LD_INT 1
5241: ST_TO_ADDR
// if ( game_type <> 1 ) and ( game_type <> 3 ) then
5242: LD_EXP 56
5246: PUSH
5247: LD_INT 1
5249: NONEQUAL
5250: PUSH
5251: LD_EXP 56
5255: PUSH
5256: LD_INT 3
5258: NONEQUAL
5259: AND
5260: IFFALSE 5266
// read_multiplayer_and_game_parameters ;
5262: CALL 976 0 0
// case Game_Type of 1 , 3 :
5266: LD_EXP 56
5270: PUSH
5271: LD_INT 1
5273: DOUBLE
5274: EQUAL
5275: IFTRUE 5285
5277: LD_INT 3
5279: DOUBLE
5280: EQUAL
5281: IFTRUE 5285
5283: GO 5297
5285: POP
// begin enable ( 19 ) ;
5286: LD_INT 19
5288: ENABLE_MARKED
// starting_ctf ;
5289: CALL 9333 0 0
// exit ;
5293: GO 5465
// end ; 12 :
5295: GO 5313
5297: LD_INT 12
5299: DOUBLE
5300: EQUAL
5301: IFTRUE 5305
5303: GO 5312
5305: POP
// Modify_Nations ; end ;
5306: CALL 4678 0 0
5310: GO 5313
5312: POP
// enable ( 55 ) ;
5313: LD_INT 55
5315: ENABLE_MARKED
// AnimateTrees ( true ) ;
5316: LD_INT 1
5318: PPUSH
5319: CALL_OW 573
// init_map ;
5323: CALL 276 0 0
// set_shared_visions_and_alliances ;
5327: CALL 2220 0 0
// prepare_sides ;
5331: CALL 4432 0 0
// InitLimits ;
5335: CALL 18087 0 0
// ShowTimer ;
5339: CALL 19024 0 0
// init_shipments ;
5343: CALL 5466 0 0
// init_respawn ;
5347: CALL 5970 0 0
// InitApeman ;
5351: CALL 7505 0 0
// music_nat := Side_Nations [ your_side ] ;
5355: LD_ADDR_OWVAR 71
5359: PUSH
5360: LD_EXP 19
5364: PUSH
5365: LD_OWVAR 2
5369: ARRAY
5370: ST_TO_ADDR
// if IAmSpec then
5371: CALL_OW 531
5375: IFFALSE 5411
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
5377: LD_INT 0
5379: PPUSH
5380: LD_INT 0
5382: PPUSH
5383: LD_OWVAR 2
5387: PPUSH
5388: LD_INT 32767
5390: NEG
5391: PPUSH
5392: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
5396: LD_INT 104
5398: PPUSH
5399: LD_INT 69
5401: PPUSH
5402: CALL_OW 86
// enable ( 400 ) ;
5406: LD_INT 400
5408: ENABLE_MARKED
// end else
5409: GO 5465
// begin ResetFog ;
5411: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5415: LD_EXP 26
5419: PUSH
5420: LD_EXP 18
5424: PUSH
5425: LD_OWVAR 2
5429: ARRAY
5430: ARRAY
5431: PUSH
5432: LD_INT 1
5434: ARRAY
5435: PPUSH
5436: LD_EXP 26
5440: PUSH
5441: LD_EXP 18
5445: PUSH
5446: LD_OWVAR 2
5450: ARRAY
5451: ARRAY
5452: PUSH
5453: LD_INT 2
5455: ARRAY
5456: PPUSH
5457: CALL_OW 86
// Init_Win_Condition ;
5461: CALL 5202 0 0
// end ; end ; end_of_file
5465: END
// var shipment , tictac ; export function init_shipments ; begin
5466: LD_INT 0
5468: PPUSH
// shipment := Rand ( 0 , 1 ) ;
5469: LD_ADDR_LOC 9
5473: PUSH
5474: LD_INT 0
5476: PPUSH
5477: LD_INT 1
5479: PPUSH
5480: CALL_OW 12
5484: ST_TO_ADDR
// tictac := 0 ;
5485: LD_ADDR_LOC 10
5489: PUSH
5490: LD_INT 0
5492: ST_TO_ADDR
// end ;
5493: LD_VAR 0 1
5497: RET
// every 0 0$5 + 0 0$1.1 marked 55 do var d ;
5498: GO 5500
5500: DISABLE
5501: LD_INT 0
5503: PPUSH
// begin case tick of 1 .. 1 1$0 :
5504: LD_OWVAR 1
5508: PUSH
5509: LD_INT 1
5511: DOUBLE
5512: GREATEREQUAL
5513: IFFALSE 5521
5515: LD_INT 2100
5517: DOUBLE
5518: LESSEQUAL
5519: IFTRUE 5523
5521: GO 5534
5523: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5524: LD_ADDR_VAR 0 1
5528: PUSH
5529: LD_INT 150
5531: ST_TO_ADDR
5532: GO 5717
5534: LD_INT 2100
5536: PUSH
5537: LD_INT 1
5539: PLUS
5540: DOUBLE
5541: GREATEREQUAL
5542: IFFALSE 5550
5544: LD_INT 10500
5546: DOUBLE
5547: LESSEQUAL
5548: IFTRUE 5552
5550: GO 5563
5552: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5553: LD_ADDR_VAR 0 1
5557: PUSH
5558: LD_INT 100
5560: ST_TO_ADDR
5561: GO 5717
5563: LD_INT 10500
5565: PUSH
5566: LD_INT 1
5568: PLUS
5569: DOUBLE
5570: GREATEREQUAL
5571: IFFALSE 5579
5573: LD_INT 21000
5575: DOUBLE
5576: LESSEQUAL
5577: IFTRUE 5581
5579: GO 5592
5581: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5582: LD_ADDR_VAR 0 1
5586: PUSH
5587: LD_INT 90
5589: ST_TO_ADDR
5590: GO 5717
5592: LD_INT 21000
5594: PUSH
5595: LD_INT 1
5597: PLUS
5598: DOUBLE
5599: GREATEREQUAL
5600: IFFALSE 5608
5602: LD_INT 42000
5604: DOUBLE
5605: LESSEQUAL
5606: IFTRUE 5610
5608: GO 5621
5610: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5611: LD_ADDR_VAR 0 1
5615: PUSH
5616: LD_INT 70
5618: ST_TO_ADDR
5619: GO 5717
5621: LD_INT 42000
5623: PUSH
5624: LD_INT 1
5626: PLUS
5627: DOUBLE
5628: GREATEREQUAL
5629: IFFALSE 5637
5631: LD_INT 63000
5633: DOUBLE
5634: LESSEQUAL
5635: IFTRUE 5639
5637: GO 5650
5639: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5640: LD_ADDR_VAR 0 1
5644: PUSH
5645: LD_INT 60
5647: ST_TO_ADDR
5648: GO 5717
5650: LD_INT 63000
5652: PUSH
5653: LD_INT 1
5655: PLUS
5656: DOUBLE
5657: GREATEREQUAL
5658: IFFALSE 5666
5660: LD_INT 105000
5662: DOUBLE
5663: LESSEQUAL
5664: IFTRUE 5668
5666: GO 5679
5668: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5669: LD_ADDR_VAR 0 1
5673: PUSH
5674: LD_INT 35
5676: ST_TO_ADDR
5677: GO 5717
5679: LD_INT 105000
5681: PUSH
5682: LD_INT 1
5684: PLUS
5685: DOUBLE
5686: GREATEREQUAL
5687: IFFALSE 5695
5689: LD_INT 630000
5691: DOUBLE
5692: LESSEQUAL
5693: IFTRUE 5697
5695: GO 5708
5697: POP
// d := 20 ; else
5698: LD_ADDR_VAR 0 1
5702: PUSH
5703: LD_INT 20
5705: ST_TO_ADDR
5706: GO 5717
5708: POP
// d := 0 ; end ;
5709: LD_ADDR_VAR 0 1
5713: PUSH
5714: LD_INT 0
5716: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5717: LD_INT 1
5719: PPUSH
5720: LD_INT 10000
5722: PPUSH
5723: CALL_OW 12
5727: PUSH
5728: LD_VAR 0 1
5732: PUSH
5733: LD_EXP 10
5737: MUL
5738: LESSEQUAL
5739: IFFALSE 5793
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5741: LD_INT 1
5743: PPUSH
5744: LD_INT 140
5746: PPUSH
5747: CALL_OW 12
5751: PPUSH
5752: CALL_OW 67
// shipment := ( shipment + 1 ) mod 2 ;
5756: LD_ADDR_LOC 9
5760: PUSH
5761: LD_LOC 9
5765: PUSH
5766: LD_INT 1
5768: PLUS
5769: PUSH
5770: LD_INT 2
5772: MOD
5773: ST_TO_ADDR
// CreateCratesArea ( 5 , west_side + shipment , true ) ;
5774: LD_INT 5
5776: PPUSH
5777: LD_INT 8
5779: PUSH
5780: LD_LOC 9
5784: PLUS
5785: PPUSH
5786: LD_INT 1
5788: PPUSH
5789: CALL_OW 55
// end ; enable ;
5793: ENABLE
// end ;
5794: PPOPN 1
5796: END
// every 0 0$10 trigger TICK > ( ( 2 2$0 * tictac ) + tictac * ( 1 1$30 - shipments_density * ( 0 0$2 ) ) ) marked 55 do var i , amount , is_in ;
5797: LD_OWVAR 1
5801: PUSH
5802: LD_INT 4200
5804: PUSH
5805: LD_LOC 10
5809: MUL
5810: PUSH
5811: LD_LOC 10
5815: PUSH
5816: LD_INT 3150
5818: PUSH
5819: LD_EXP 10
5823: PUSH
5824: LD_INT 70
5826: MUL
5827: MINUS
5828: MUL
5829: PLUS
5830: GREATER
5831: IFFALSE 5967
5833: GO 5835
5835: DISABLE
5836: LD_INT 0
5838: PPUSH
5839: PPUSH
5840: PPUSH
// begin tictac := tictac + 1 ;
5841: LD_ADDR_LOC 10
5845: PUSH
5846: LD_LOC 10
5850: PUSH
5851: LD_INT 1
5853: PLUS
5854: ST_TO_ADDR
// amount := Rand ( 3 , 5 ) ;
5855: LD_ADDR_VAR 0 2
5859: PUSH
5860: LD_INT 3
5862: PPUSH
5863: LD_INT 5
5865: PPUSH
5866: CALL_OW 12
5870: ST_TO_ADDR
// for i = 0 to 3 do
5871: LD_ADDR_VAR 0 1
5875: PUSH
5876: DOUBLE
5877: LD_INT 0
5879: DEC
5880: ST_TO_ADDR
5881: LD_INT 3
5883: PUSH
5884: FOR_TO
5885: IFFALSE 5964
// begin is_in := GetResourceArea ( west_side + i , mat_cans ) ;
5887: LD_ADDR_VAR 0 3
5891: PUSH
5892: LD_INT 8
5894: PUSH
5895: LD_VAR 0 1
5899: PLUS
5900: PPUSH
5901: LD_INT 1
5903: PPUSH
5904: CALL_OW 287
5908: ST_TO_ADDR
// if ( is_in < 500 ) or ( Rand ( 1 , 10 ) > ( is_in div 100 ) ) then
5909: LD_VAR 0 3
5913: PUSH
5914: LD_INT 500
5916: LESS
5917: PUSH
5918: LD_INT 1
5920: PPUSH
5921: LD_INT 10
5923: PPUSH
5924: CALL_OW 12
5928: PUSH
5929: LD_VAR 0 3
5933: PUSH
5934: LD_INT 100
5936: DIV
5937: GREATER
5938: OR
5939: IFFALSE 5962
// CreateCratesArea ( amount , nw + i , true ) ;
5941: LD_VAR 0 2
5945: PPUSH
5946: LD_INT 12
5948: PUSH
5949: LD_VAR 0 1
5953: PLUS
5954: PPUSH
5955: LD_INT 1
5957: PPUSH
5958: CALL_OW 55
// end ;
5962: GO 5884
5964: POP
5965: POP
// enable ;
5966: ENABLE
// end ; end_of_file
5967: PPOPN 3
5969: END
// var respawn_queue , nation_queue ; export function init_respawn ; begin
5970: LD_INT 0
5972: PPUSH
// if not def_people_respawning then
5973: LD_EXP 68
5977: NOT
5978: IFFALSE 5982
// exit ;
5980: GO 6085
// respawn_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5982: LD_ADDR_LOC 11
5986: PUSH
5987: LD_INT 0
5989: PUSH
5990: LD_INT 0
5992: PUSH
5993: LD_INT 0
5995: PUSH
5996: LD_INT 0
5998: PUSH
5999: LD_INT 0
6001: PUSH
6002: LD_INT 0
6004: PUSH
6005: LD_INT 0
6007: PUSH
6008: LD_INT 0
6010: PUSH
6011: EMPTY
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: ST_TO_ADDR
// nation_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6021: LD_ADDR_LOC 12
6025: PUSH
6026: LD_INT 0
6028: PUSH
6029: LD_INT 0
6031: PUSH
6032: LD_INT 0
6034: PUSH
6035: LD_INT 0
6037: PUSH
6038: LD_INT 0
6040: PUSH
6041: LD_INT 0
6043: PUSH
6044: LD_INT 0
6046: PUSH
6047: LD_INT 0
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: ST_TO_ADDR
// if Game_Type in [ 2 , 12 ] then
6060: LD_EXP 56
6064: PUSH
6065: LD_INT 2
6067: PUSH
6068: LD_INT 12
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: IN
6075: IFFALSE 6082
// enable ( 41 ) else
6077: LD_INT 41
6079: ENABLE_MARKED
6080: GO 6085
// enable ( 40 ) ;
6082: LD_INT 40
6084: ENABLE_MARKED
// end ;
6085: LD_VAR 0 1
6089: RET
// every 0 0$10 marked 40 do var list , time , side ;
6090: GO 6092
6092: DISABLE
6093: LD_INT 0
6095: PPUSH
6096: PPUSH
6097: PPUSH
// begin for side = 1 to Side_Positions do
6098: LD_ADDR_VAR 0 3
6102: PUSH
6103: DOUBLE
6104: LD_INT 1
6106: DEC
6107: ST_TO_ADDR
6108: LD_EXP 18
6112: PUSH
6113: FOR_TO
6114: IFFALSE 6291
// if Side_Positions [ side ] then
6116: LD_EXP 18
6120: PUSH
6121: LD_VAR 0 3
6125: ARRAY
6126: IFFALSE 6289
// begin list := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6128: LD_ADDR_VAR 0 1
6132: PUSH
6133: LD_INT 22
6135: PUSH
6136: LD_VAR 0 3
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: PUSH
6145: LD_INT 21
6147: PUSH
6148: LD_INT 1
6150: PUSH
6151: EMPTY
6152: LIST
6153: LIST
6154: PUSH
6155: LD_INT 3
6157: PUSH
6158: LD_INT 23
6160: PUSH
6161: LD_INT 0
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PUSH
6168: EMPTY
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: PPUSH
6174: CALL_OW 69
6178: ST_TO_ADDR
// if ( list < number_of_people ) and ( not respawn_queue [ side ] ) then
6179: LD_VAR 0 1
6183: PUSH
6184: LD_EXP 6
6188: LESS
6189: PUSH
6190: LD_LOC 11
6194: PUSH
6195: LD_VAR 0 3
6199: ARRAY
6200: NOT
6201: AND
6202: IFFALSE 6229
// respawn_queue := Replace ( respawn_queue , side , TICK ) ;
6204: LD_ADDR_LOC 11
6208: PUSH
6209: LD_LOC 11
6213: PPUSH
6214: LD_VAR 0 3
6218: PPUSH
6219: LD_OWVAR 1
6223: PPUSH
6224: CALL_OW 1
6228: ST_TO_ADDR
// time := TICK - respawn_queue [ side ] ;
6229: LD_ADDR_VAR 0 2
6233: PUSH
6234: LD_OWVAR 1
6238: PUSH
6239: LD_LOC 11
6243: PUSH
6244: LD_VAR 0 3
6248: ARRAY
6249: MINUS
6250: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6251: LD_LOC 11
6255: PUSH
6256: LD_VAR 0 3
6260: ARRAY
6261: PUSH
6262: LD_VAR 0 2
6266: PUSH
6267: LD_EXP 13
6271: GREATER
6272: AND
6273: IFFALSE 6289
// respawn_character ( side , time ) ;
6275: LD_VAR 0 3
6279: PPUSH
6280: LD_VAR 0 2
6284: PPUSH
6285: CALL 6297 0 2
// end ;
6289: GO 6113
6291: POP
6292: POP
// enable ;
6293: ENABLE
// end ;
6294: PPOPN 3
6296: END
// function respawn_character ( side , time ) ; var dep ; begin
6297: LD_INT 0
6299: PPUSH
6300: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6301: LD_INT 0
6303: PPUSH
6304: LD_INT 1
6306: PPUSH
6307: CALL_OW 12
6311: PUSH
6312: LD_VAR 0 2
6316: PUSH
6317: LD_EXP 14
6321: LESS
6322: AND
6323: IFFALSE 6327
// exit ;
6325: GO 6534
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6327: LD_ADDR_VAR 0 4
6331: PUSH
6332: LD_INT 22
6334: PUSH
6335: LD_VAR 0 1
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: PUSH
6344: LD_INT 2
6346: PUSH
6347: LD_INT 30
6349: PUSH
6350: LD_INT 0
6352: PUSH
6353: EMPTY
6354: LIST
6355: LIST
6356: PUSH
6357: LD_INT 30
6359: PUSH
6360: LD_INT 1
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 50
6374: PUSH
6375: EMPTY
6376: LIST
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: LIST
6382: PPUSH
6383: CALL_OW 69
6387: ST_TO_ADDR
// if not dep then
6388: LD_VAR 0 4
6392: NOT
6393: IFFALSE 6399
// exit else
6395: GO 6534
6397: GO 6423
// dep := dep [ Rand ( 1 , dep ) ] ;
6399: LD_ADDR_VAR 0 4
6403: PUSH
6404: LD_VAR 0 4
6408: PUSH
6409: LD_INT 1
6411: PPUSH
6412: LD_VAR 0 4
6416: PPUSH
6417: CALL_OW 12
6421: ARRAY
6422: ST_TO_ADDR
// uc_side := side ;
6423: LD_ADDR_OWVAR 20
6427: PUSH
6428: LD_VAR 0 1
6432: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6433: LD_ADDR_OWVAR 21
6437: PUSH
6438: LD_EXP 19
6442: PUSH
6443: LD_VAR 0 1
6447: ARRAY
6448: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6449: LD_INT 0
6451: PPUSH
6452: LD_INT 0
6454: PPUSH
6455: LD_EXP 7
6459: PUSH
6460: LD_INT 2
6462: DIV
6463: PPUSH
6464: CALL_OW 380
// hc_importance := 0 ;
6468: LD_ADDR_OWVAR 32
6472: PUSH
6473: LD_INT 0
6475: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
6476: CALL_OW 44
6480: PPUSH
6481: LD_VAR 0 4
6485: PPUSH
6486: CALL_OW 250
6490: PPUSH
6491: LD_VAR 0 4
6495: PPUSH
6496: CALL_OW 251
6500: PPUSH
6501: LD_INT 10
6503: PPUSH
6504: LD_INT 1
6506: PPUSH
6507: CALL_OW 50
// respawn_queue := Replace ( respawn_queue , side , 0 ) ;
6511: LD_ADDR_LOC 11
6515: PUSH
6516: LD_LOC 11
6520: PPUSH
6521: LD_VAR 0 1
6525: PPUSH
6526: LD_INT 0
6528: PPUSH
6529: CALL_OW 1
6533: ST_TO_ADDR
// end ;
6534: LD_VAR 0 3
6538: RET
// every 0 0$10 marked 41 do var i , list , time , nation , side , limit ;
6539: GO 6541
6541: DISABLE
6542: LD_INT 0
6544: PPUSH
6545: PPUSH
6546: PPUSH
6547: PPUSH
6548: PPUSH
6549: PPUSH
// begin if Game_Type = 12 then
6550: LD_EXP 56
6554: PUSH
6555: LD_INT 12
6557: EQUAL
6558: IFFALSE 6572
// limit := number_of_people else
6560: LD_ADDR_VAR 0 6
6564: PUSH
6565: LD_EXP 6
6569: ST_TO_ADDR
6570: GO 6586
// limit := 2 * number_of_people ;
6572: LD_ADDR_VAR 0 6
6576: PUSH
6577: LD_INT 2
6579: PUSH
6580: LD_EXP 6
6584: MUL
6585: ST_TO_ADDR
// for i = 1 to 4 do
6586: LD_ADDR_VAR 0 1
6590: PUSH
6591: DOUBLE
6592: LD_INT 1
6594: DEC
6595: ST_TO_ADDR
6596: LD_INT 4
6598: PUSH
6599: FOR_TO
6600: IFFALSE 6892
// begin side := GetSidePositions ( [ 1 , 1 , 3 , 3 ] [ i ] ) ;
6602: LD_ADDR_VAR 0 5
6606: PUSH
6607: LD_INT 1
6609: PUSH
6610: LD_INT 1
6612: PUSH
6613: LD_INT 3
6615: PUSH
6616: LD_INT 3
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: PUSH
6625: LD_VAR 0 1
6629: ARRAY
6630: PPUSH
6631: CALL 7234 0 1
6635: ST_TO_ADDR
// if Game_Type = 12 then
6636: LD_EXP 56
6640: PUSH
6641: LD_INT 12
6643: EQUAL
6644: IFFALSE 6664
// nation := Position_Nations [ i ] else
6646: LD_ADDR_VAR 0 4
6650: PUSH
6651: LD_EXP 21
6655: PUSH
6656: LD_VAR 0 1
6660: ARRAY
6661: ST_TO_ADDR
6662: GO 6680
// nation := Side_Nations [ side ] ;
6664: LD_ADDR_VAR 0 4
6668: PUSH
6669: LD_EXP 19
6673: PUSH
6674: LD_VAR 0 5
6678: ARRAY
6679: ST_TO_ADDR
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_nation , nation ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6680: LD_ADDR_VAR 0 2
6684: PUSH
6685: LD_INT 22
6687: PUSH
6688: LD_VAR 0 5
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: PUSH
6697: LD_INT 23
6699: PUSH
6700: LD_VAR 0 4
6704: PUSH
6705: EMPTY
6706: LIST
6707: LIST
6708: PUSH
6709: LD_INT 21
6711: PUSH
6712: LD_INT 1
6714: PUSH
6715: EMPTY
6716: LIST
6717: LIST
6718: PUSH
6719: LD_INT 3
6721: PUSH
6722: LD_INT 23
6724: PUSH
6725: LD_INT 0
6727: PUSH
6728: EMPTY
6729: LIST
6730: LIST
6731: PUSH
6732: EMPTY
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: PPUSH
6739: CALL_OW 69
6743: ST_TO_ADDR
// if ( list < limit ) and ( not respawn_queue [ side ] ) then
6744: LD_VAR 0 2
6748: PUSH
6749: LD_VAR 0 6
6753: LESS
6754: PUSH
6755: LD_LOC 11
6759: PUSH
6760: LD_VAR 0 5
6764: ARRAY
6765: NOT
6766: AND
6767: IFFALSE 6819
// begin respawn_queue = Replace ( respawn_queue , side , TICK ) ;
6769: LD_ADDR_LOC 11
6773: PUSH
6774: LD_LOC 11
6778: PPUSH
6779: LD_VAR 0 5
6783: PPUSH
6784: LD_OWVAR 1
6788: PPUSH
6789: CALL_OW 1
6793: ST_TO_ADDR
// nation_queue = Replace ( nation_queue , side , nation ) ;
6794: LD_ADDR_LOC 12
6798: PUSH
6799: LD_LOC 12
6803: PPUSH
6804: LD_VAR 0 5
6808: PPUSH
6809: LD_VAR 0 4
6813: PPUSH
6814: CALL_OW 1
6818: ST_TO_ADDR
// end ; time := TICK - respawn_queue [ side ] ;
6819: LD_ADDR_VAR 0 3
6823: PUSH
6824: LD_OWVAR 1
6828: PUSH
6829: LD_LOC 11
6833: PUSH
6834: LD_VAR 0 5
6838: ARRAY
6839: MINUS
6840: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6841: LD_LOC 11
6845: PUSH
6846: LD_VAR 0 5
6850: ARRAY
6851: PUSH
6852: LD_VAR 0 3
6856: PUSH
6857: LD_EXP 13
6861: GREATER
6862: AND
6863: IFFALSE 6890
// respawn_character_nation ( side , time , nation_queue [ side ] ) ;
6865: LD_VAR 0 5
6869: PPUSH
6870: LD_VAR 0 3
6874: PPUSH
6875: LD_LOC 12
6879: PUSH
6880: LD_VAR 0 5
6884: ARRAY
6885: PPUSH
6886: CALL 6898 0 3
// end ;
6890: GO 6599
6892: POP
6893: POP
// enable ;
6894: ENABLE
// end ;
6895: PPOPN 6
6897: END
// function respawn_character_nation ( side , time , nation ) ; var dep ; begin
6898: LD_INT 0
6900: PPUSH
6901: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6902: LD_INT 0
6904: PPUSH
6905: LD_INT 1
6907: PPUSH
6908: CALL_OW 12
6912: PUSH
6913: LD_VAR 0 2
6917: PUSH
6918: LD_EXP 14
6922: LESS
6923: AND
6924: IFFALSE 6928
// exit ;
6926: GO 7229
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_nation , nation ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6928: LD_ADDR_VAR 0 5
6932: PUSH
6933: LD_INT 22
6935: PUSH
6936: LD_VAR 0 1
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: PUSH
6945: LD_INT 23
6947: PUSH
6948: LD_VAR 0 3
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PUSH
6957: LD_INT 2
6959: PUSH
6960: LD_INT 30
6962: PUSH
6963: LD_INT 0
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: LD_INT 30
6972: PUSH
6973: LD_INT 1
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: LIST
6984: PUSH
6985: LD_INT 50
6987: PUSH
6988: EMPTY
6989: LIST
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: PPUSH
6997: CALL_OW 69
7001: ST_TO_ADDR
// if not dep then
7002: LD_VAR 0 5
7006: NOT
7007: IFFALSE 7070
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
7009: LD_ADDR_VAR 0 5
7013: PUSH
7014: LD_INT 22
7016: PUSH
7017: LD_VAR 0 1
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: PUSH
7026: LD_INT 2
7028: PUSH
7029: LD_INT 30
7031: PUSH
7032: LD_INT 0
7034: PUSH
7035: EMPTY
7036: LIST
7037: LIST
7038: PUSH
7039: LD_INT 30
7041: PUSH
7042: LD_INT 1
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: LIST
7053: PUSH
7054: LD_INT 50
7056: PUSH
7057: EMPTY
7058: LIST
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: LIST
7064: PPUSH
7065: CALL_OW 69
7069: ST_TO_ADDR
// if not dep then
7070: LD_VAR 0 5
7074: NOT
7075: IFFALSE 7081
// exit else
7077: GO 7229
7079: GO 7105
// dep := dep [ Rand ( 1 , dep ) ] ;
7081: LD_ADDR_VAR 0 5
7085: PUSH
7086: LD_VAR 0 5
7090: PUSH
7091: LD_INT 1
7093: PPUSH
7094: LD_VAR 0 5
7098: PPUSH
7099: CALL_OW 12
7103: ARRAY
7104: ST_TO_ADDR
// uc_side := side ;
7105: LD_ADDR_OWVAR 20
7109: PUSH
7110: LD_VAR 0 1
7114: ST_TO_ADDR
// uc_nation := nation ;
7115: LD_ADDR_OWVAR 21
7119: PUSH
7120: LD_VAR 0 3
7124: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level ) ;
7125: LD_INT 0
7127: PPUSH
7128: LD_INT 0
7130: PPUSH
7131: LD_EXP 7
7135: PPUSH
7136: CALL_OW 380
// hc_importance := 0 ;
7140: LD_ADDR_OWVAR 32
7144: PUSH
7145: LD_INT 0
7147: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
7148: CALL_OW 44
7152: PPUSH
7153: LD_VAR 0 5
7157: PPUSH
7158: CALL_OW 250
7162: PPUSH
7163: LD_VAR 0 5
7167: PPUSH
7168: CALL_OW 251
7172: PPUSH
7173: LD_INT 10
7175: PPUSH
7176: LD_INT 1
7178: PPUSH
7179: CALL_OW 50
// respawn_queue := Replace ( respawn_queue , side , 0 ) ;
7183: LD_ADDR_LOC 11
7187: PUSH
7188: LD_LOC 11
7192: PPUSH
7193: LD_VAR 0 1
7197: PPUSH
7198: LD_INT 0
7200: PPUSH
7201: CALL_OW 1
7205: ST_TO_ADDR
// nation_queue := Replace ( nation_queue , side , 0 ) ;
7206: LD_ADDR_LOC 12
7210: PUSH
7211: LD_LOC 12
7215: PPUSH
7216: LD_VAR 0 1
7220: PPUSH
7221: LD_INT 0
7223: PPUSH
7224: CALL_OW 1
7228: ST_TO_ADDR
// end ;
7229: LD_VAR 0 4
7233: RET
// function GetSidePositions ( i ) ; var un , side ; begin
7234: LD_INT 0
7236: PPUSH
7237: PPUSH
7238: PPUSH
// side := false ;
7239: LD_ADDR_VAR 0 4
7243: PUSH
7244: LD_INT 0
7246: ST_TO_ADDR
// for un = 1 to Side_Positions do
7247: LD_ADDR_VAR 0 3
7251: PUSH
7252: DOUBLE
7253: LD_INT 1
7255: DEC
7256: ST_TO_ADDR
7257: LD_EXP 18
7261: PUSH
7262: FOR_TO
7263: IFFALSE 7297
// if Side_Positions [ un ] = i then
7265: LD_EXP 18
7269: PUSH
7270: LD_VAR 0 3
7274: ARRAY
7275: PUSH
7276: LD_VAR 0 1
7280: EQUAL
7281: IFFALSE 7295
// begin side := un ;
7283: LD_ADDR_VAR 0 4
7287: PUSH
7288: LD_VAR 0 3
7292: ST_TO_ADDR
// break ;
7293: GO 7297
// end ;
7295: GO 7262
7297: POP
7298: POP
// result := side ;
7299: LD_ADDR_VAR 0 2
7303: PUSH
7304: LD_VAR 0 4
7308: ST_TO_ADDR
// end ; end_of_file
7309: LD_VAR 0 2
7313: RET
// every 20 20$00 trigger apemanNumber do
7314: LD_EXP 30
7318: IFFALSE 7351
7320: GO 7322
7322: DISABLE
// begin enable ;
7323: ENABLE
// if apeLevel >= 8 then
7324: LD_EXP 35
7328: PUSH
7329: LD_INT 8
7331: GREATEREQUAL
7332: IFFALSE 7337
// disable else
7334: DISABLE
7335: GO 7351
// apeLevel := apeLevel + 1 ;
7337: LD_ADDR_EXP 35
7341: PUSH
7342: LD_EXP 35
7346: PUSH
7347: LD_INT 1
7349: PLUS
7350: ST_TO_ADDR
// end ;
7351: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
7352: LD_EXP 30
7356: PUSH
7357: LD_EXP 31
7361: LESS
7362: IFFALSE 7502
7364: GO 7366
7366: DISABLE
7367: LD_INT 0
7369: PPUSH
7370: PPUSH
7371: PPUSH
7372: PPUSH
// begin enable ;
7373: ENABLE
// for i := 1 to apemanPos do
7374: LD_ADDR_VAR 0 1
7378: PUSH
7379: DOUBLE
7380: LD_INT 1
7382: DEC
7383: ST_TO_ADDR
7384: LD_EXP 33
7388: PUSH
7389: FOR_TO
7390: IFFALSE 7500
// begin if apemanPlayerCount [ i ] then
7392: LD_EXP 34
7396: PUSH
7397: LD_VAR 0 1
7401: ARRAY
7402: IFFALSE 7498
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
7404: LD_EXP 34
7408: PUSH
7409: LD_VAR 0 1
7413: ARRAY
7414: PUSH
7415: LD_EXP 33
7419: PUSH
7420: LD_VAR 0 1
7424: ARRAY
7425: GREATER
7426: IFFALSE 7498
// begin ape := PrepareApeman ;
7428: LD_ADDR_VAR 0 2
7432: PUSH
7433: CALL 8001 0 0
7437: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
7438: LD_VAR 0 2
7442: PPUSH
7443: LD_EXP 36
7447: PUSH
7448: LD_VAR 0 1
7452: ARRAY
7453: PPUSH
7454: LD_INT 0
7456: PPUSH
7457: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
7461: LD_ADDR_EXP 33
7465: PUSH
7466: LD_EXP 33
7470: PPUSH
7471: LD_VAR 0 1
7475: PPUSH
7476: LD_EXP 33
7480: PUSH
7481: LD_VAR 0 1
7485: ARRAY
7486: PUSH
7487: LD_VAR 0 2
7491: UNION
7492: PPUSH
7493: CALL_OW 1
7497: ST_TO_ADDR
// end ; end ; end ;
7498: GO 7389
7500: POP
7501: POP
// end ;
7502: PPOPN 4
7504: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
7505: LD_INT 0
7507: PPUSH
7508: PPUSH
7509: PPUSH
7510: PPUSH
7511: PPUSH
7512: PPUSH
7513: PPUSH
// playersAmount := 0 ;
7514: LD_ADDR_VAR 0 3
7518: PUSH
7519: LD_INT 0
7521: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base2ApeArea , Base1ApeArea ] ;
7522: LD_ADDR_VAR 0 7
7526: PUSH
7527: LD_INT 18
7529: PUSH
7530: LD_INT 19
7532: PUSH
7533: LD_INT 19
7535: PUSH
7536: LD_INT 18
7538: PUSH
7539: EMPTY
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7545: LD_ADDR_EXP 36
7549: PUSH
7550: LD_INT 0
7552: PUSH
7553: LD_INT 0
7555: PUSH
7556: LD_INT 0
7558: PUSH
7559: LD_INT 0
7561: PUSH
7562: LD_INT 0
7564: PUSH
7565: LD_INT 0
7567: PUSH
7568: LD_INT 0
7570: PUSH
7571: LD_INT 0
7573: PUSH
7574: EMPTY
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: ST_TO_ADDR
// for j = 1 to Side_Positions do
7584: LD_ADDR_VAR 0 4
7588: PUSH
7589: DOUBLE
7590: LD_INT 1
7592: DEC
7593: ST_TO_ADDR
7594: LD_EXP 18
7598: PUSH
7599: FOR_TO
7600: IFFALSE 7667
// if Side_Positions [ j ] then
7602: LD_EXP 18
7606: PUSH
7607: LD_VAR 0 4
7611: ARRAY
7612: IFFALSE 7665
// begin playersAmount := playersAmount + 1 ;
7614: LD_ADDR_VAR 0 3
7618: PUSH
7619: LD_VAR 0 3
7623: PUSH
7624: LD_INT 1
7626: PLUS
7627: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
7628: LD_ADDR_EXP 36
7632: PUSH
7633: LD_EXP 36
7637: PPUSH
7638: LD_VAR 0 4
7642: PPUSH
7643: LD_VAR 0 7
7647: PUSH
7648: LD_EXP 18
7652: PUSH
7653: LD_VAR 0 4
7657: ARRAY
7658: ARRAY
7659: PPUSH
7660: CALL_OW 1
7664: ST_TO_ADDR
// end ;
7665: GO 7599
7667: POP
7668: POP
// apemanPerPlayer := amount_of_apemen ;
7669: LD_ADDR_EXP 32
7673: PUSH
7674: LD_EXP 12
7678: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
7679: LD_ADDR_EXP 30
7683: PUSH
7684: LD_VAR 0 3
7688: PUSH
7689: LD_EXP 32
7693: MUL
7694: ST_TO_ADDR
// apemanLimit := apemanNumber ;
7695: LD_ADDR_EXP 31
7699: PUSH
7700: LD_EXP 30
7704: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7705: LD_ADDR_EXP 33
7709: PUSH
7710: LD_INT 0
7712: PUSH
7713: LD_INT 0
7715: PUSH
7716: LD_INT 0
7718: PUSH
7719: LD_INT 0
7721: PUSH
7722: LD_INT 0
7724: PUSH
7725: LD_INT 0
7727: PUSH
7728: LD_INT 0
7730: PUSH
7731: LD_INT 0
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7744: LD_ADDR_EXP 34
7748: PUSH
7749: LD_INT 0
7751: PUSH
7752: LD_INT 0
7754: PUSH
7755: LD_INT 0
7757: PUSH
7758: LD_INT 0
7760: PUSH
7761: LD_INT 0
7763: PUSH
7764: LD_INT 0
7766: PUSH
7767: LD_INT 0
7769: PUSH
7770: LD_INT 0
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: LIST
7779: LIST
7780: LIST
7781: LIST
7782: ST_TO_ADDR
// apeLevel := 1 ;
7783: LD_ADDR_EXP 35
7787: PUSH
7788: LD_INT 1
7790: ST_TO_ADDR
// if not apemanNumber then
7791: LD_EXP 30
7795: NOT
7796: IFFALSE 7800
// exit ;
7798: GO 7996
// for i := 1 to apemanPerPlayer do
7800: LD_ADDR_VAR 0 2
7804: PUSH
7805: DOUBLE
7806: LD_INT 1
7808: DEC
7809: ST_TO_ADDR
7810: LD_EXP 32
7814: PUSH
7815: FOR_TO
7816: IFFALSE 7994
// begin for j := 1 to Side_Positions do
7818: LD_ADDR_VAR 0 4
7822: PUSH
7823: DOUBLE
7824: LD_INT 1
7826: DEC
7827: ST_TO_ADDR
7828: LD_EXP 18
7832: PUSH
7833: FOR_TO
7834: IFFALSE 7990
// if Side_Positions [ j ] then
7836: LD_EXP 18
7840: PUSH
7841: LD_VAR 0 4
7845: ARRAY
7846: IFFALSE 7988
// begin pos := Side_Positions [ j ] ;
7848: LD_ADDR_VAR 0 6
7852: PUSH
7853: LD_EXP 18
7857: PUSH
7858: LD_VAR 0 4
7862: ARRAY
7863: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
7864: LD_ADDR_EXP 34
7868: PUSH
7869: LD_EXP 34
7873: PPUSH
7874: LD_VAR 0 4
7878: PPUSH
7879: LD_EXP 34
7883: PUSH
7884: LD_VAR 0 4
7888: ARRAY
7889: PUSH
7890: LD_INT 1
7892: PLUS
7893: PPUSH
7894: CALL_OW 1
7898: ST_TO_ADDR
// ape := PrepareApeman ;
7899: LD_ADDR_VAR 0 5
7903: PUSH
7904: CALL 8001 0 0
7908: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
7909: LD_ADDR_EXP 33
7913: PUSH
7914: LD_EXP 33
7918: PPUSH
7919: LD_VAR 0 4
7923: PPUSH
7924: LD_EXP 33
7928: PUSH
7929: LD_VAR 0 4
7933: ARRAY
7934: PPUSH
7935: LD_EXP 33
7939: PUSH
7940: LD_VAR 0 4
7944: ARRAY
7945: PUSH
7946: LD_INT 1
7948: PLUS
7949: PPUSH
7950: LD_VAR 0 5
7954: PPUSH
7955: CALL_OW 1
7959: PPUSH
7960: CALL_OW 1
7964: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
7965: LD_VAR 0 5
7969: PPUSH
7970: LD_EXP 36
7974: PUSH
7975: LD_VAR 0 4
7979: ARRAY
7980: PPUSH
7981: LD_INT 0
7983: PPUSH
7984: CALL_OW 49
// end ;
7988: GO 7833
7990: POP
7991: POP
// end ;
7992: GO 7815
7994: POP
7995: POP
// end ;
7996: LD_VAR 0 1
8000: RET
// export function PrepareApeman ; var bonus ; begin
8001: LD_INT 0
8003: PPUSH
8004: PPUSH
// uc_side := 0 ;
8005: LD_ADDR_OWVAR 20
8009: PUSH
8010: LD_INT 0
8012: ST_TO_ADDR
// uc_nation := 0 ;
8013: LD_ADDR_OWVAR 21
8017: PUSH
8018: LD_INT 0
8020: ST_TO_ADDR
// InitHc ;
8021: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
8025: LD_ADDR_VAR 0 2
8029: PUSH
8030: LD_INT 1
8032: NEG
8033: PUSH
8034: LD_INT 0
8036: PUSH
8037: LD_INT 1
8039: PUSH
8040: EMPTY
8041: LIST
8042: LIST
8043: LIST
8044: PUSH
8045: LD_OWVAR 1
8049: PUSH
8050: LD_INT 3
8052: MOD
8053: PUSH
8054: LD_INT 1
8056: PLUS
8057: ARRAY
8058: ST_TO_ADDR
// hc_class := class_apeman ;
8059: LD_ADDR_OWVAR 28
8063: PUSH
8064: LD_INT 12
8066: ST_TO_ADDR
// hc_gallery :=  ;
8067: LD_ADDR_OWVAR 33
8071: PUSH
8072: LD_STRING 
8074: ST_TO_ADDR
// hc_name :=  ;
8075: LD_ADDR_OWVAR 26
8079: PUSH
8080: LD_STRING 
8082: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
8083: LD_ADDR_OWVAR 31
8087: PUSH
8088: LD_EXP 35
8092: PUSH
8093: LD_VAR 0 2
8097: PLUS
8098: PUSH
8099: LD_EXP 35
8103: PUSH
8104: LD_VAR 0 2
8108: PLUS
8109: PUSH
8110: LD_EXP 35
8114: PUSH
8115: LD_VAR 0 2
8119: PLUS
8120: PUSH
8121: LD_EXP 35
8125: PUSH
8126: LD_VAR 0 2
8130: PLUS
8131: PUSH
8132: EMPTY
8133: LIST
8134: LIST
8135: LIST
8136: LIST
8137: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
8138: LD_ADDR_OWVAR 35
8142: PUSH
8143: LD_INT 10
8145: PUSH
8146: LD_VAR 0 2
8150: MUL
8151: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
8152: LD_ADDR_OWVAR 29
8156: PUSH
8157: LD_INT 12
8159: PUSH
8160: LD_INT 10
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: ST_TO_ADDR
// result := CreateHuman ;
8167: LD_ADDR_VAR 0 1
8171: PUSH
8172: CALL_OW 44
8176: ST_TO_ADDR
// end ;
8177: LD_VAR 0 1
8181: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
8182: LD_INT 0
8184: PPUSH
8185: PPUSH
8186: PPUSH
// if not ape then
8187: LD_VAR 0 1
8191: NOT
8192: IFFALSE 8196
// exit ;
8194: GO 8321
// side := GetSide ( ape ) ;
8196: LD_ADDR_VAR 0 3
8200: PUSH
8201: LD_VAR 0 1
8205: PPUSH
8206: CALL_OW 255
8210: ST_TO_ADDR
// if not side then
8211: LD_VAR 0 3
8215: NOT
8216: IFFALSE 8270
// begin for i = 1 to apemanPos do
8218: LD_ADDR_VAR 0 4
8222: PUSH
8223: DOUBLE
8224: LD_INT 1
8226: DEC
8227: ST_TO_ADDR
8228: LD_EXP 33
8232: PUSH
8233: FOR_TO
8234: IFFALSE 8268
// if ape in apemanPos [ i ] then
8236: LD_VAR 0 1
8240: PUSH
8241: LD_EXP 33
8245: PUSH
8246: LD_VAR 0 4
8250: ARRAY
8251: IN
8252: IFFALSE 8266
// begin side := i ;
8254: LD_ADDR_VAR 0 3
8258: PUSH
8259: LD_VAR 0 4
8263: ST_TO_ADDR
// break ;
8264: GO 8268
// end ;
8266: GO 8233
8268: POP
8269: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
8270: LD_ADDR_EXP 33
8274: PUSH
8275: LD_EXP 33
8279: PPUSH
8280: LD_VAR 0 3
8284: PPUSH
8285: LD_EXP 33
8289: PUSH
8290: LD_VAR 0 3
8294: ARRAY
8295: PUSH
8296: LD_VAR 0 1
8300: DIFF
8301: PPUSH
8302: CALL_OW 1
8306: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
8307: LD_ADDR_EXP 30
8311: PUSH
8312: LD_EXP 30
8316: PUSH
8317: LD_INT 1
8319: MINUS
8320: ST_TO_ADDR
// end ; end_of_file
8321: LD_VAR 0 2
8325: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
8326: LD_VAR 0 1
8330: PPUSH
8331: CALL_OW 266
8335: PUSH
8336: LD_INT 0
8338: PUSH
8339: LD_INT 1
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: IN
8346: IFFALSE 8371
// SetBName ( b , @ & GetSide ( b ) ) ;
8348: LD_VAR 0 1
8352: PPUSH
8353: LD_STRING @
8355: PUSH
8356: LD_VAR 0 1
8360: PPUSH
8361: CALL_OW 255
8365: STR
8366: PPUSH
8367: CALL_OW 500
// if def_game_rules then
8371: LD_EXP 57
8375: IFFALSE 8412
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
8377: LD_VAR 0 1
8381: PPUSH
8382: LD_VAR 0 1
8386: PPUSH
8387: CALL_OW 266
8391: PPUSH
8392: LD_VAR 0 1
8396: PPUSH
8397: CALL_OW 255
8401: PPUSH
8402: LD_INT 0
8404: PPUSH
8405: LD_INT 1
8407: PPUSH
8408: CALL 18488 0 5
// end ;
8412: PPOPN 2
8414: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
8415: LD_VAR 0 1
8419: PPUSH
8420: CALL_OW 266
8424: PUSH
8425: LD_INT 0
8427: PUSH
8428: LD_INT 1
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: IN
8435: IFFALSE 8460
// SetBName ( b , @ & GetSide ( b ) ) ;
8437: LD_VAR 0 1
8441: PPUSH
8442: LD_STRING @
8444: PUSH
8445: LD_VAR 0 1
8449: PPUSH
8450: CALL_OW 255
8454: STR
8455: PPUSH
8456: CALL_OW 500
// if def_game_rules then
8460: LD_EXP 57
8464: IFFALSE 8503
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
8466: LD_VAR 0 1
8470: PPUSH
8471: LD_VAR 0 1
8475: PPUSH
8476: CALL_OW 266
8480: PPUSH
8481: LD_VAR 0 1
8485: PPUSH
8486: CALL_OW 255
8490: PPUSH
8491: LD_VAR 0 2
8495: PPUSH
8496: LD_INT 1
8498: PPUSH
8499: CALL 18488 0 5
// end ;
8503: PPOPN 3
8505: END
// on VehicleConstructed ( veh , fac ) do var side ;
8506: LD_INT 0
8508: PPUSH
// begin if GetControl ( veh ) = control_apeman then
8509: LD_VAR 0 1
8513: PPUSH
8514: CALL_OW 263
8518: PUSH
8519: LD_INT 5
8521: EQUAL
8522: IFFALSE 8664
// begin side := GetSide ( veh ) ;
8524: LD_ADDR_VAR 0 3
8528: PUSH
8529: LD_VAR 0 1
8533: PPUSH
8534: CALL_OW 255
8538: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
8539: LD_ADDR_EXP 33
8543: PUSH
8544: LD_EXP 33
8548: PPUSH
8549: LD_VAR 0 3
8553: PPUSH
8554: LD_EXP 33
8558: PUSH
8559: LD_VAR 0 3
8563: ARRAY
8564: PPUSH
8565: LD_INT 52
8567: PUSH
8568: EMPTY
8569: LIST
8570: PPUSH
8571: CALL_OW 72
8575: PUSH
8576: LD_INT 22
8578: PUSH
8579: LD_VAR 0 3
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: PUSH
8588: LD_INT 2
8590: PUSH
8591: LD_INT 33
8593: PUSH
8594: LD_INT 5
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: PUSH
8601: LD_INT 25
8603: PUSH
8604: LD_INT 12
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: PUSH
8611: LD_INT 25
8613: PUSH
8614: LD_INT 15
8616: PUSH
8617: EMPTY
8618: LIST
8619: LIST
8620: PUSH
8621: LD_INT 25
8623: PUSH
8624: LD_INT 16
8626: PUSH
8627: EMPTY
8628: LIST
8629: LIST
8630: PUSH
8631: LD_INT 25
8633: PUSH
8634: LD_INT 17
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: PPUSH
8653: CALL_OW 69
8657: UNION
8658: PPUSH
8659: CALL_OW 1
8663: ST_TO_ADDR
// end ; end ;
8664: PPOPN 3
8666: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
8667: LD_VAR 0 1
8671: PPUSH
8672: LD_VAR 0 2
8676: PPUSH
8677: LD_VAR 0 3
8681: PPUSH
8682: LD_OWVAR 2
8686: PPUSH
8687: CALL 19166 0 4
8691: PPOPN 3
8693: END
// export function DE_Triggers ; begin
8694: LD_INT 0
8696: PPUSH
// disable ( 01 ) ;
8697: LD_INT 1
8699: DISABLE_MARKED
// disable ( 02 ) ;
8700: LD_INT 2
8702: DISABLE_MARKED
// disable ( 03 ) ;
8703: LD_INT 3
8705: DISABLE_MARKED
// disable ( 04 ) ;
8706: LD_INT 4
8708: DISABLE_MARKED
// disable ( 05 ) ;
8709: LD_INT 5
8711: DISABLE_MARKED
// disable ( 06 ) ;
8712: LD_INT 6
8714: DISABLE_MARKED
// disable ( 07 ) ;
8715: LD_INT 7
8717: DISABLE_MARKED
// disable ( 10 ) ;
8718: LD_INT 10
8720: DISABLE_MARKED
// disable ( 11 ) ;
8721: LD_INT 11
8723: DISABLE_MARKED
// disable ( 12 ) ;
8724: LD_INT 12
8726: DISABLE_MARKED
// disable ( 13 ) ;
8727: LD_INT 13
8729: DISABLE_MARKED
// disable ( 19 ) ;
8730: LD_INT 19
8732: DISABLE_MARKED
// disable ( 40 ) ;
8733: LD_INT 40
8735: DISABLE_MARKED
// disable ( 41 ) ;
8736: LD_INT 41
8738: DISABLE_MARKED
// disable ( 98 ) ;
8739: LD_INT 98
8741: DISABLE_MARKED
// disable ( 99 ) ;
8742: LD_INT 99
8744: DISABLE_MARKED
// disable ( 55 ) ;
8745: LD_INT 55
8747: DISABLE_MARKED
// disable ( 400 ) ;
8748: LD_INT 400
8750: DISABLE_MARKED
// disable ( 401 ) ;
8751: LD_INT 401
8753: DISABLE_MARKED
// end ; end_of_file
8754: LD_VAR 0 1
8758: RET
// function CanWinLoose ; begin
8759: LD_INT 0
8761: PPUSH
// Result := true ;
8762: LD_ADDR_VAR 0 1
8766: PUSH
8767: LD_INT 1
8769: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8770: CALL_OW 518
8774: PUSH
8775: CALL_OW 519
8779: PUSH
8780: LD_INT 0
8782: GREATER
8783: AND
8784: IFFALSE 8794
// Result := false ;
8786: LD_ADDR_VAR 0 1
8790: PUSH
8791: LD_INT 0
8793: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8794: CALL_OW 531
8798: PUSH
8799: CALL_OW 519
8803: PUSH
8804: LD_INT 1
8806: GREATER
8807: AND
8808: IFFALSE 8818
// Result := false ;
8810: LD_ADDR_VAR 0 1
8814: PUSH
8815: LD_INT 0
8817: ST_TO_ADDR
// end ;
8818: LD_VAR 0 1
8822: RET
// function HasPower ( i ) ; begin
8823: LD_INT 0
8825: PPUSH
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8826: LD_ADDR_VAR 0 2
8830: PUSH
8831: LD_INT 22
8833: PUSH
8834: LD_VAR 0 1
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PUSH
8843: LD_INT 2
8845: PUSH
8846: LD_INT 21
8848: PUSH
8849: LD_INT 1
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: PUSH
8856: LD_INT 30
8858: PUSH
8859: LD_INT 0
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: PUSH
8866: LD_INT 30
8868: PUSH
8869: LD_INT 1
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: PPUSH
8886: CALL_OW 69
8890: ST_TO_ADDR
// end ;
8891: LD_VAR 0 2
8895: RET
// function AlliedSides ( i , j ) ; begin
8896: LD_INT 0
8898: PPUSH
// Result := false ;
8899: LD_ADDR_VAR 0 3
8903: PUSH
8904: LD_INT 0
8906: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8907: LD_VAR 0 1
8911: PPUSH
8912: LD_VAR 0 2
8916: PPUSH
8917: CALL_OW 81
8921: PUSH
8922: LD_INT 1
8924: EQUAL
8925: PUSH
8926: LD_VAR 0 2
8930: PPUSH
8931: LD_VAR 0 1
8935: PPUSH
8936: CALL_OW 81
8940: PUSH
8941: LD_INT 1
8943: EQUAL
8944: AND
8945: PUSH
8946: LD_VAR 0 1
8950: PPUSH
8951: CALL_OW 83
8955: AND
8956: PUSH
8957: LD_VAR 0 2
8961: PPUSH
8962: CALL_OW 83
8966: AND
8967: IFFALSE 8977
// Result := true ;
8969: LD_ADDR_VAR 0 3
8973: PUSH
8974: LD_INT 1
8976: ST_TO_ADDR
// end ;
8977: LD_VAR 0 3
8981: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
8982: CALL 8759 0 0
8986: IFFALSE 8995
8988: GO 8990
8990: DISABLE
// YouLostInMultiplayer ;
8991: CALL_OW 107
8995: END
// every 0 0$3 trigger CanWinLoose marked 401 do
8996: CALL 8759 0 0
9000: IFFALSE 9024
9002: GO 9004
9004: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
9005: LD_EXP 19
9009: PUSH
9010: LD_OWVAR 2
9014: ARRAY
9015: PPUSH
9016: CALL 19208 0 1
// YouWinInMultiplayer ;
9020: CALL_OW 106
// end ;
9024: END
// every 0 0$3 marked 98 do var i , CanWin ;
9025: GO 9027
9027: DISABLE
9028: LD_INT 0
9030: PPUSH
9031: PPUSH
// begin if not HasPower ( your_side ) then
9032: LD_OWVAR 2
9036: PPUSH
9037: CALL 8823 0 1
9041: NOT
9042: IFFALSE 9053
// begin Multiplayer_Loose_Message ;
9044: CALL_OW 521
// enable ( 400 ) ;
9048: LD_INT 400
9050: ENABLE_MARKED
// end else
9051: GO 9186
// begin CanWin := true ;
9053: LD_ADDR_VAR 0 2
9057: PUSH
9058: LD_INT 1
9060: ST_TO_ADDR
// for i := 1 to 8 do
9061: LD_ADDR_VAR 0 1
9065: PUSH
9066: DOUBLE
9067: LD_INT 1
9069: DEC
9070: ST_TO_ADDR
9071: LD_INT 8
9073: PUSH
9074: FOR_TO
9075: IFFALSE 9172
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9077: LD_EXP 18
9081: PUSH
9082: LD_VAR 0 1
9086: ARRAY
9087: PUSH
9088: LD_VAR 0 1
9092: PPUSH
9093: CALL_OW 108
9097: AND
9098: PUSH
9099: LD_VAR 0 1
9103: PUSH
9104: LD_OWVAR 2
9108: NONEQUAL
9109: AND
9110: IFFALSE 9170
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
9112: LD_EXP 16
9116: PUSH
9117: LD_VAR 0 1
9121: ARRAY
9122: NOT
9123: PUSH
9124: LD_EXP 16
9128: PUSH
9129: LD_VAR 0 1
9133: ARRAY
9134: PUSH
9135: LD_EXP 16
9139: PUSH
9140: LD_OWVAR 2
9144: ARRAY
9145: NONEQUAL
9146: OR
9147: IFFALSE 9170
// if HasPower ( i ) then
9149: LD_VAR 0 1
9153: PPUSH
9154: CALL 8823 0 1
9158: IFFALSE 9170
// begin CanWin := false ;
9160: LD_ADDR_VAR 0 2
9164: PUSH
9165: LD_INT 0
9167: ST_TO_ADDR
// break ;
9168: GO 9172
// end ;
9170: GO 9074
9172: POP
9173: POP
// if CanWin then
9174: LD_VAR 0 2
9178: IFFALSE 9185
// enable ( 401 ) else
9180: LD_INT 401
9182: ENABLE_MARKED
9183: GO 9186
// enable ;
9185: ENABLE
// end ; end ;
9186: PPOPN 2
9188: END
// every 0 0$3 marked 99 do var i , CanWin ;
9189: GO 9191
9191: DISABLE
9192: LD_INT 0
9194: PPUSH
9195: PPUSH
// begin if not HasPower ( your_side ) then
9196: LD_OWVAR 2
9200: PPUSH
9201: CALL 8823 0 1
9205: NOT
9206: IFFALSE 9217
// begin Multiplayer_Loose_Message ;
9208: CALL_OW 521
// enable ( 400 ) ;
9212: LD_INT 400
9214: ENABLE_MARKED
// end else
9215: GO 9330
// begin CanWin := true ;
9217: LD_ADDR_VAR 0 2
9221: PUSH
9222: LD_INT 1
9224: ST_TO_ADDR
// for i := 1 to 8 do
9225: LD_ADDR_VAR 0 1
9229: PUSH
9230: DOUBLE
9231: LD_INT 1
9233: DEC
9234: ST_TO_ADDR
9235: LD_INT 8
9237: PUSH
9238: FOR_TO
9239: IFFALSE 9316
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9241: LD_EXP 18
9245: PUSH
9246: LD_VAR 0 1
9250: ARRAY
9251: PUSH
9252: LD_VAR 0 1
9256: PPUSH
9257: CALL_OW 108
9261: AND
9262: PUSH
9263: LD_VAR 0 1
9267: PUSH
9268: LD_OWVAR 2
9272: NONEQUAL
9273: AND
9274: IFFALSE 9314
// if not AlliedSides ( i , your_side ) then
9276: LD_VAR 0 1
9280: PPUSH
9281: LD_OWVAR 2
9285: PPUSH
9286: CALL 8896 0 2
9290: NOT
9291: IFFALSE 9314
// if HasPower ( i ) then
9293: LD_VAR 0 1
9297: PPUSH
9298: CALL 8823 0 1
9302: IFFALSE 9314
// begin CanWin := false ;
9304: LD_ADDR_VAR 0 2
9308: PUSH
9309: LD_INT 0
9311: ST_TO_ADDR
// break ;
9312: GO 9316
// end ;
9314: GO 9238
9316: POP
9317: POP
// if CanWin then
9318: LD_VAR 0 2
9322: IFFALSE 9329
// enable ( 401 ) else
9324: LD_INT 401
9326: ENABLE_MARKED
9327: GO 9330
// enable ;
9329: ENABLE
// end ; end ; end_of_file
9330: PPOPN 2
9332: END
// var time ; export lidi , krabice , opoce ; export cper , cperiode ; var depot1 , depot2 ; var vlajka1 , vlajka2 ; export depotpositions , areas ; var podvozky , zbrane ; export pos1side , pos2side ; var pos1base , pos2base ; var left_score , right_score ; export debug , ctf ; export mp_sides_teams_ , mp_sides_nations_ , mp_sides_positions_ , mp_sides_players_counts_ ; var cft_01 , cft_02 , cft_03 , cft_04 , cft_05 , cft_06 , cft_07 ; export nonctf_10 , nonctf_11 , nonctf_12 , nonctf_13 ; var stmp , stmp2 , cl ; export function starting_ctf ; begin
9333: LD_INT 0
9335: PPUSH
// cft_01 = 01 ;
9336: LD_ADDR_LOC 24
9340: PUSH
9341: LD_INT 1
9343: ST_TO_ADDR
// cft_02 = 02 ;
9344: LD_ADDR_LOC 25
9348: PUSH
9349: LD_INT 2
9351: ST_TO_ADDR
// cft_03 = 03 ;
9352: LD_ADDR_LOC 26
9356: PUSH
9357: LD_INT 3
9359: ST_TO_ADDR
// cft_04 = 04 ;
9360: LD_ADDR_LOC 27
9364: PUSH
9365: LD_INT 4
9367: ST_TO_ADDR
// cft_05 = 05 ;
9368: LD_ADDR_LOC 28
9372: PUSH
9373: LD_INT 5
9375: ST_TO_ADDR
// cft_06 = 06 ;
9376: LD_ADDR_LOC 29
9380: PUSH
9381: LD_INT 6
9383: ST_TO_ADDR
// cft_07 = 07 ;
9384: LD_ADDR_LOC 30
9388: PUSH
9389: LD_INT 7
9391: ST_TO_ADDR
// nonctf_10 = 10 ;
9392: LD_ADDR_EXP 52
9396: PUSH
9397: LD_INT 10
9399: ST_TO_ADDR
// nonctf_11 = 11 ;
9400: LD_ADDR_EXP 53
9404: PUSH
9405: LD_INT 11
9407: ST_TO_ADDR
// nonctf_12 = 12 ;
9408: LD_ADDR_EXP 54
9412: PUSH
9413: LD_INT 12
9415: ST_TO_ADDR
// nonctf_13 = 13 ;
9416: LD_ADDR_EXP 55
9420: PUSH
9421: LD_INT 13
9423: ST_TO_ADDR
// disable ( cft_01 ) ;
9424: LD_LOC 24
9428: DISABLE_MARKED
// disable ( cft_02 ) ;
9429: LD_LOC 25
9433: DISABLE_MARKED
// disable ( cft_03 ) ;
9434: LD_LOC 26
9438: DISABLE_MARKED
// disable ( cft_04 ) ;
9439: LD_LOC 27
9443: DISABLE_MARKED
// disable ( cft_05 ) ;
9444: LD_LOC 28
9448: DISABLE_MARKED
// disable ( cft_06 ) ;
9449: LD_LOC 29
9453: DISABLE_MARKED
// disable ( cft_07 ) ;
9454: LD_LOC 30
9458: DISABLE_MARKED
// disable ( nonctf_10 ) ;
9459: LD_EXP 52
9463: DISABLE_MARKED
// disable ( nonctf_11 ) ;
9464: LD_EXP 53
9468: DISABLE_MARKED
// disable ( nonctf_12 ) ;
9469: LD_EXP 54
9473: DISABLE_MARKED
// disable ( nonctf_13 ) ;
9474: LD_EXP 55
9478: DISABLE_MARKED
// debug = false ;
9479: LD_ADDR_EXP 46
9483: PUSH
9484: LD_INT 0
9486: ST_TO_ADDR
// if not multiplayer then
9487: LD_OWVAR 4
9491: NOT
9492: IFFALSE 9652
// begin mp_sides_teams_ = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9494: LD_ADDR_EXP 48
9498: PUSH
9499: LD_INT 0
9501: PUSH
9502: LD_INT 0
9504: PUSH
9505: LD_INT 0
9507: PUSH
9508: LD_INT 0
9510: PUSH
9511: LD_INT 0
9513: PUSH
9514: LD_INT 0
9516: PUSH
9517: LD_INT 0
9519: PUSH
9520: LD_INT 0
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: ST_TO_ADDR
// mp_sides_nations_ = [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9533: LD_ADDR_EXP 49
9537: PUSH
9538: LD_INT 1
9540: PUSH
9541: LD_INT 2
9543: PUSH
9544: LD_INT 0
9546: PUSH
9547: LD_INT 0
9549: PUSH
9550: LD_INT 0
9552: PUSH
9553: LD_INT 0
9555: PUSH
9556: LD_INT 0
9558: PUSH
9559: LD_INT 0
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: ST_TO_ADDR
// mp_sides_positions_ = [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9572: LD_ADDR_EXP 50
9576: PUSH
9577: LD_INT 1
9579: PUSH
9580: LD_INT 2
9582: PUSH
9583: LD_INT 0
9585: PUSH
9586: LD_INT 0
9588: PUSH
9589: LD_INT 0
9591: PUSH
9592: LD_INT 0
9594: PUSH
9595: LD_INT 0
9597: PUSH
9598: LD_INT 0
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: ST_TO_ADDR
// mp_sides_players_counts_ = [ 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9611: LD_ADDR_EXP 51
9615: PUSH
9616: LD_INT 1
9618: PUSH
9619: LD_INT 1
9621: PUSH
9622: LD_INT 0
9624: PUSH
9625: LD_INT 0
9627: PUSH
9628: LD_INT 0
9630: PUSH
9631: LD_INT 0
9633: PUSH
9634: LD_INT 0
9636: PUSH
9637: LD_INT 0
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: ST_TO_ADDR
// end else
9650: GO 9692
// begin mp_sides_teams_ = mp_sides_teams ;
9652: LD_ADDR_EXP 48
9656: PUSH
9657: LD_OWVAR 15
9661: ST_TO_ADDR
// mp_sides_nations_ = mp_sides_nations ;
9662: LD_ADDR_EXP 49
9666: PUSH
9667: LD_OWVAR 16
9671: ST_TO_ADDR
// mp_sides_positions_ = mp_sides_positions ;
9672: LD_ADDR_EXP 50
9676: PUSH
9677: LD_OWVAR 17
9681: ST_TO_ADDR
// mp_sides_players_counts_ = mp_sides_players_counts ;
9682: LD_ADDR_EXP 51
9686: PUSH
9687: LD_OWVAR 18
9691: ST_TO_ADDR
// end ; if debug then
9692: LD_EXP 46
9696: IFFALSE 9778
// begin debuglog ( [ side , your_side ] ) ;
9698: LD_STRING side
9700: PUSH
9701: LD_OWVAR 2
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: PPUSH
9710: CALL_OW 359
// debuglog ( [ teams , mp_sides_teams_ ] ) ;
9714: LD_STRING teams
9716: PUSH
9717: LD_EXP 48
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: PPUSH
9726: CALL_OW 359
// debuglog ( [ nations , mp_sides_nations_ ] ) ;
9730: LD_STRING nations
9732: PUSH
9733: LD_EXP 49
9737: PUSH
9738: EMPTY
9739: LIST
9740: LIST
9741: PPUSH
9742: CALL_OW 359
// debuglog ( [ positions , mp_sides_positions_ ] ) ;
9746: LD_STRING positions
9748: PUSH
9749: LD_EXP 50
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: PPUSH
9758: CALL_OW 359
// debuglog ( [ pl. counts , mp_sides_players_counts_ ] ) ;
9762: LD_STRING pl. counts
9764: PUSH
9765: LD_EXP 51
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: PPUSH
9774: CALL_OW 359
// end ; depotpositions = [ [ 34 , 60 , 1 ] , [ 185 , 60 , 4 ] ] ;
9778: LD_ADDR_EXP 42
9782: PUSH
9783: LD_INT 34
9785: PUSH
9786: LD_INT 60
9788: PUSH
9789: LD_INT 1
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: LIST
9796: PUSH
9797: LD_INT 185
9799: PUSH
9800: LD_INT 60
9802: PUSH
9803: LD_INT 4
9805: PUSH
9806: EMPTY
9807: LIST
9808: LIST
9809: LIST
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: ST_TO_ADDR
// areas = [ vlevo , vpravo ] ;
9815: LD_ADDR_EXP 43
9819: PUSH
9820: LD_INT 2
9822: PUSH
9823: LD_INT 3
9825: PUSH
9826: EMPTY
9827: LIST
9828: LIST
9829: ST_TO_ADDR
// if mp_game_type = 3 then
9830: LD_OWVAR 6
9834: PUSH
9835: LD_INT 3
9837: EQUAL
9838: IFFALSE 9846
// begin other_game ;
9840: CALL 12918 0 0
// exit ;
9844: GO 11294
// end ; ctf = true ;
9846: LD_ADDR_EXP 47
9850: PUSH
9851: LD_INT 1
9853: ST_TO_ADDR
// enable ( cft_01 ) ;
9854: LD_LOC 24
9858: ENABLE_MARKED
// enable ( cft_02 ) ;
9859: LD_LOC 25
9863: ENABLE_MARKED
// enable ( cft_05 ) ;
9864: LD_LOC 28
9868: ENABLE_MARKED
// enable ( cft_06 ) ;
9869: LD_LOC 29
9873: ENABLE_MARKED
// enable ( cft_07 ) ;
9874: LD_LOC 30
9878: ENABLE_MARKED
// podvozky = [ us_medium_wheeled , ar_medium_trike , ru_medium_wheeled ] ;
9879: LD_ADDR_LOC 18
9883: PUSH
9884: LD_INT 2
9886: PUSH
9887: LD_INT 13
9889: PUSH
9890: LD_INT 21
9892: PUSH
9893: EMPTY
9894: LIST
9895: LIST
9896: LIST
9897: ST_TO_ADDR
// zbrane = [ us_cargo_bay , ar_cargo_bay , ru_cargo_bay ] ;
9898: LD_ADDR_LOC 19
9902: PUSH
9903: LD_INT 12
9905: PUSH
9906: LD_INT 32
9908: PUSH
9909: LD_INT 51
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: LIST
9916: ST_TO_ADDR
// left_score = 0 ;
9917: LD_ADDR_LOC 22
9921: PUSH
9922: LD_INT 0
9924: ST_TO_ADDR
// right_score = 0 ;
9925: LD_ADDR_LOC 23
9929: PUSH
9930: LD_INT 0
9932: ST_TO_ADDR
// if multiplayer then
9933: LD_OWVAR 4
9937: IFFALSE 9993
// begin lidi = getmultiplayersetting ( 1 ) ;
9939: LD_ADDR_EXP 37
9943: PUSH
9944: LD_INT 1
9946: PPUSH
9947: CALL_OW 426
9951: ST_TO_ADDR
// krabice = getmultiplayersetting ( 2 ) ;
9952: LD_ADDR_EXP 38
9956: PUSH
9957: LD_INT 2
9959: PPUSH
9960: CALL_OW 426
9964: ST_TO_ADDR
// opoce = getmultiplayersetting ( 3 ) ;
9965: LD_ADDR_EXP 39
9969: PUSH
9970: LD_INT 3
9972: PPUSH
9973: CALL_OW 426
9977: ST_TO_ADDR
// time = getmultiplayersetting ( 4 ) ;
9978: LD_ADDR_LOC 13
9982: PUSH
9983: LD_INT 4
9985: PPUSH
9986: CALL_OW 426
9990: ST_TO_ADDR
// end else
9991: GO 10025
// begin lidi = 1 ;
9993: LD_ADDR_EXP 37
9997: PUSH
9998: LD_INT 1
10000: ST_TO_ADDR
// krabice = 1 ;
10001: LD_ADDR_EXP 38
10005: PUSH
10006: LD_INT 1
10008: ST_TO_ADDR
// opoce = 3 ;
10009: LD_ADDR_EXP 39
10013: PUSH
10014: LD_INT 3
10016: ST_TO_ADDR
// time = 2 ;
10017: LD_ADDR_LOC 13
10021: PUSH
10022: LD_INT 2
10024: ST_TO_ADDR
// end ; case lidi of 0 :
10025: LD_EXP 37
10029: PUSH
10030: LD_INT 0
10032: DOUBLE
10033: EQUAL
10034: IFTRUE 10038
10036: GO 10049
10038: POP
// lidi = 9 ; 1 :
10039: LD_ADDR_EXP 37
10043: PUSH
10044: LD_INT 9
10046: ST_TO_ADDR
10047: GO 10126
10049: LD_INT 1
10051: DOUBLE
10052: EQUAL
10053: IFTRUE 10057
10055: GO 10068
10057: POP
// lidi = 13 ; 2 :
10058: LD_ADDR_EXP 37
10062: PUSH
10063: LD_INT 13
10065: ST_TO_ADDR
10066: GO 10126
10068: LD_INT 2
10070: DOUBLE
10071: EQUAL
10072: IFTRUE 10076
10074: GO 10087
10076: POP
// lidi = 19 ; 3 :
10077: LD_ADDR_EXP 37
10081: PUSH
10082: LD_INT 19
10084: ST_TO_ADDR
10085: GO 10126
10087: LD_INT 3
10089: DOUBLE
10090: EQUAL
10091: IFTRUE 10095
10093: GO 10106
10095: POP
// lidi = 23 ; 4 :
10096: LD_ADDR_EXP 37
10100: PUSH
10101: LD_INT 23
10103: ST_TO_ADDR
10104: GO 10126
10106: LD_INT 4
10108: DOUBLE
10109: EQUAL
10110: IFTRUE 10114
10112: GO 10125
10114: POP
// lidi = 29 ; end ;
10115: LD_ADDR_EXP 37
10119: PUSH
10120: LD_INT 29
10122: ST_TO_ADDR
10123: GO 10126
10125: POP
// case krabice of 0 :
10126: LD_EXP 38
10130: PUSH
10131: LD_INT 0
10133: DOUBLE
10134: EQUAL
10135: IFTRUE 10139
10137: GO 10150
10139: POP
// cperiode = 1 1$30 ; 1 :
10140: LD_ADDR_EXP 41
10144: PUSH
10145: LD_INT 3150
10147: ST_TO_ADDR
10148: GO 10189
10150: LD_INT 1
10152: DOUBLE
10153: EQUAL
10154: IFTRUE 10158
10156: GO 10169
10158: POP
// cperiode = 1 1$00 ; 2 :
10159: LD_ADDR_EXP 41
10163: PUSH
10164: LD_INT 2100
10166: ST_TO_ADDR
10167: GO 10189
10169: LD_INT 2
10171: DOUBLE
10172: EQUAL
10173: IFTRUE 10177
10175: GO 10188
10177: POP
// cperiode = 0 0$30 ; end ;
10178: LD_ADDR_EXP 41
10182: PUSH
10183: LD_INT 1050
10185: ST_TO_ADDR
10186: GO 10189
10188: POP
// cper = 0 0$10 ;
10189: LD_ADDR_EXP 40
10193: PUSH
10194: LD_INT 350
10196: ST_TO_ADDR
// case opoce of 0 :
10197: LD_EXP 39
10201: PUSH
10202: LD_INT 0
10204: DOUBLE
10205: EQUAL
10206: IFTRUE 10210
10208: GO 10221
10210: POP
// opoce = 0 ; 1 :
10211: LD_ADDR_EXP 39
10215: PUSH
10216: LD_INT 0
10218: ST_TO_ADDR
10219: GO 10336
10221: LD_INT 1
10223: DOUBLE
10224: EQUAL
10225: IFTRUE 10229
10227: GO 10240
10229: POP
// opoce = 3 ; 2 :
10230: LD_ADDR_EXP 39
10234: PUSH
10235: LD_INT 3
10237: ST_TO_ADDR
10238: GO 10336
10240: LD_INT 2
10242: DOUBLE
10243: EQUAL
10244: IFTRUE 10248
10246: GO 10259
10248: POP
// opoce = 7 ; 3 :
10249: LD_ADDR_EXP 39
10253: PUSH
10254: LD_INT 7
10256: ST_TO_ADDR
10257: GO 10336
10259: LD_INT 3
10261: DOUBLE
10262: EQUAL
10263: IFTRUE 10267
10265: GO 10278
10267: POP
// opoce = 11 ; 4 :
10268: LD_ADDR_EXP 39
10272: PUSH
10273: LD_INT 11
10275: ST_TO_ADDR
10276: GO 10336
10278: LD_INT 4
10280: DOUBLE
10281: EQUAL
10282: IFTRUE 10286
10284: GO 10297
10286: POP
// opoce = 15 ; 5 :
10287: LD_ADDR_EXP 39
10291: PUSH
10292: LD_INT 15
10294: ST_TO_ADDR
10295: GO 10336
10297: LD_INT 5
10299: DOUBLE
10300: EQUAL
10301: IFTRUE 10305
10303: GO 10316
10305: POP
// opoce = 19 ; 6 :
10306: LD_ADDR_EXP 39
10310: PUSH
10311: LD_INT 19
10313: ST_TO_ADDR
10314: GO 10336
10316: LD_INT 6
10318: DOUBLE
10319: EQUAL
10320: IFTRUE 10324
10322: GO 10335
10324: POP
// opoce = 23 ; end ;
10325: LD_ADDR_EXP 39
10329: PUSH
10330: LD_INT 23
10332: ST_TO_ADDR
10333: GO 10336
10335: POP
// case time of 0 :
10336: LD_LOC 13
10340: PUSH
10341: LD_INT 0
10343: DOUBLE
10344: EQUAL
10345: IFTRUE 10349
10347: GO 10364
10349: POP
// time = 30 * 60 ; 1 :
10350: LD_ADDR_LOC 13
10354: PUSH
10355: LD_INT 30
10357: PUSH
10358: LD_INT 60
10360: MUL
10361: ST_TO_ADDR
10362: GO 10480
10364: LD_INT 1
10366: DOUBLE
10367: EQUAL
10368: IFTRUE 10372
10370: GO 10387
10372: POP
// time = 40 * 60 ; 2 :
10373: LD_ADDR_LOC 13
10377: PUSH
10378: LD_INT 40
10380: PUSH
10381: LD_INT 60
10383: MUL
10384: ST_TO_ADDR
10385: GO 10480
10387: LD_INT 2
10389: DOUBLE
10390: EQUAL
10391: IFTRUE 10395
10393: GO 10410
10395: POP
// time = 50 * 60 ; 3 :
10396: LD_ADDR_LOC 13
10400: PUSH
10401: LD_INT 50
10403: PUSH
10404: LD_INT 60
10406: MUL
10407: ST_TO_ADDR
10408: GO 10480
10410: LD_INT 3
10412: DOUBLE
10413: EQUAL
10414: IFTRUE 10418
10416: GO 10433
10418: POP
// time = 60 * 60 ; 4 :
10419: LD_ADDR_LOC 13
10423: PUSH
10424: LD_INT 60
10426: PUSH
10427: LD_INT 60
10429: MUL
10430: ST_TO_ADDR
10431: GO 10480
10433: LD_INT 4
10435: DOUBLE
10436: EQUAL
10437: IFTRUE 10441
10439: GO 10456
10441: POP
// time = 90 * 60 ; 5 :
10442: LD_ADDR_LOC 13
10446: PUSH
10447: LD_INT 90
10449: PUSH
10450: LD_INT 60
10452: MUL
10453: ST_TO_ADDR
10454: GO 10480
10456: LD_INT 5
10458: DOUBLE
10459: EQUAL
10460: IFTRUE 10464
10462: GO 10479
10464: POP
// time = 120 * 60 ; end ;
10465: LD_ADDR_LOC 13
10469: PUSH
10470: LD_INT 120
10472: PUSH
10473: LD_INT 60
10475: MUL
10476: ST_TO_ADDR
10477: GO 10480
10479: POP
// enable ( cft_03 ) ;
10480: LD_LOC 26
10484: ENABLE_MARKED
// refresh ;
10485: CALL 11299 0 0
// for stmp = 1 to 8 do
10489: LD_ADDR_LOC 31
10493: PUSH
10494: DOUBLE
10495: LD_INT 1
10497: DEC
10498: ST_TO_ADDR
10499: LD_INT 8
10501: PUSH
10502: FOR_TO
10503: IFFALSE 10872
// if mp_sides_nations_ [ stmp ] then
10505: LD_EXP 49
10509: PUSH
10510: LD_LOC 31
10514: ARRAY
10515: IFFALSE 10870
// begin if mp_sides_positions_ [ stmp ] = 1 then
10517: LD_EXP 50
10521: PUSH
10522: LD_LOC 31
10526: ARRAY
10527: PUSH
10528: LD_INT 1
10530: EQUAL
10531: IFFALSE 10545
// pos1side = stmp else
10533: LD_ADDR_EXP 44
10537: PUSH
10538: LD_LOC 31
10542: ST_TO_ADDR
10543: GO 10555
// pos2side = stmp ;
10545: LD_ADDR_EXP 45
10549: PUSH
10550: LD_LOC 31
10554: ST_TO_ADDR
// uc_side = stmp ;
10555: LD_ADDR_OWVAR 20
10559: PUSH
10560: LD_LOC 31
10564: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ stmp ] ;
10565: LD_ADDR_OWVAR 21
10569: PUSH
10570: LD_EXP 49
10574: PUSH
10575: LD_LOC 31
10579: ARRAY
10580: ST_TO_ADDR
// bc_type = b_depot ;
10581: LD_ADDR_OWVAR 42
10585: PUSH
10586: LD_INT 0
10588: ST_TO_ADDR
// bc_level = 1 ;
10589: LD_ADDR_OWVAR 43
10593: PUSH
10594: LD_INT 1
10596: ST_TO_ADDR
// createandplacebuildingxyd ( depotpositions [ mp_sides_positions_ [ stmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 2 ] , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 3 ] ) ;
10597: LD_EXP 42
10601: PUSH
10602: LD_EXP 50
10606: PUSH
10607: LD_LOC 31
10611: ARRAY
10612: ARRAY
10613: PUSH
10614: LD_INT 1
10616: ARRAY
10617: PPUSH
10618: LD_EXP 42
10622: PUSH
10623: LD_EXP 50
10627: PUSH
10628: LD_LOC 31
10632: ARRAY
10633: ARRAY
10634: PUSH
10635: LD_INT 2
10637: ARRAY
10638: PPUSH
10639: LD_EXP 42
10643: PUSH
10644: LD_EXP 50
10648: PUSH
10649: LD_LOC 31
10653: ARRAY
10654: ARRAY
10655: PUSH
10656: LD_INT 3
10658: ARRAY
10659: PPUSH
10660: CALL_OW 47
// setbattleflag ( stmp , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 2 ] , [ [ bfo_defend_bonus_human , 150 ] , [ bfo_defend_bonus_vehicle , 10 ] , [ bfo_defend_bonus_building , 0 ] , [ bfo_range , 17 ] , [ bfo_height , 100 ] ] ) ;
10664: LD_LOC 31
10668: PPUSH
10669: LD_EXP 42
10673: PUSH
10674: LD_EXP 50
10678: PUSH
10679: LD_LOC 31
10683: ARRAY
10684: ARRAY
10685: PUSH
10686: LD_INT 1
10688: ARRAY
10689: PPUSH
10690: LD_EXP 42
10694: PUSH
10695: LD_EXP 50
10699: PUSH
10700: LD_LOC 31
10704: ARRAY
10705: ARRAY
10706: PUSH
10707: LD_INT 2
10709: ARRAY
10710: PPUSH
10711: LD_INT 1
10713: PUSH
10714: LD_INT 150
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: PUSH
10721: LD_INT 2
10723: PUSH
10724: LD_INT 10
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: PUSH
10731: LD_INT 3
10733: PUSH
10734: LD_INT 0
10736: PUSH
10737: EMPTY
10738: LIST
10739: LIST
10740: PUSH
10741: LD_INT 10
10743: PUSH
10744: LD_INT 17
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: PUSH
10751: LD_INT 20
10753: PUSH
10754: LD_INT 100
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: PUSH
10761: EMPTY
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: PPUSH
10768: CALL_OW 418
// cl = class_engineer ;
10772: LD_ADDR_LOC 33
10776: PUSH
10777: LD_INT 2
10779: ST_TO_ADDR
// for stmp2 = 1 to lidi do
10780: LD_ADDR_LOC 32
10784: PUSH
10785: DOUBLE
10786: LD_INT 1
10788: DEC
10789: ST_TO_ADDR
10790: LD_EXP 37
10794: PUSH
10795: FOR_TO
10796: IFFALSE 10868
// begin if stmp2 >= lidi / 2 then
10798: LD_LOC 32
10802: PUSH
10803: LD_EXP 37
10807: PUSH
10808: LD_INT 2
10810: DIVREAL
10811: GREATEREQUAL
10812: IFFALSE 10822
// cl = class_soldier ;
10814: LD_ADDR_LOC 33
10818: PUSH
10819: LD_INT 1
10821: ST_TO_ADDR
// preparehuman ( 0 , cl , 1 ) ;
10822: LD_INT 0
10824: PPUSH
10825: LD_LOC 33
10829: PPUSH
10830: LD_INT 1
10832: PPUSH
10833: CALL_OW 380
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ stmp ] ] , false ) ;
10837: CALL_OW 44
10841: PPUSH
10842: LD_EXP 43
10846: PUSH
10847: LD_EXP 50
10851: PUSH
10852: LD_LOC 31
10856: ARRAY
10857: ARRAY
10858: PPUSH
10859: LD_INT 0
10861: PPUSH
10862: CALL_OW 49
// end ;
10866: GO 10795
10868: POP
10869: POP
// end ;
10870: GO 10502
10872: POP
10873: POP
// depot1 = filterunitsinarea ( vlevo , [ [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
10874: LD_ADDR_LOC 14
10878: PUSH
10879: LD_INT 2
10881: PPUSH
10882: LD_INT 21
10884: PUSH
10885: LD_INT 3
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: PUSH
10892: LD_INT 30
10894: PUSH
10895: LD_INT 0
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: PPUSH
10906: CALL_OW 70
10910: PUSH
10911: LD_INT 1
10913: ARRAY
10914: ST_TO_ADDR
// depot2 = filterunitsinarea ( vpravo , [ [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
10915: LD_ADDR_LOC 15
10919: PUSH
10920: LD_INT 3
10922: PPUSH
10923: LD_INT 21
10925: PUSH
10926: LD_INT 3
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: PUSH
10933: LD_INT 30
10935: PUSH
10936: LD_INT 0
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: PPUSH
10947: CALL_OW 70
10951: PUSH
10952: LD_INT 1
10954: ARRAY
10955: ST_TO_ADDR
// pos1base = getbase ( depot1 ) ;
10956: LD_ADDR_LOC 20
10960: PUSH
10961: LD_LOC 14
10965: PPUSH
10966: CALL_OW 274
10970: ST_TO_ADDR
// pos2base = getbase ( depot2 ) ;
10971: LD_ADDR_LOC 21
10975: PUSH
10976: LD_LOC 15
10980: PPUSH
10981: CALL_OW 274
10985: ST_TO_ADDR
// uc_side = 0 ;
10986: LD_ADDR_OWVAR 20
10990: PUSH
10991: LD_INT 0
10993: ST_TO_ADDR
// uc_nation = nation_nature ;
10994: LD_ADDR_OWVAR 21
10998: PUSH
10999: LD_INT 0
11001: ST_TO_ADDR
// for stmp = 1 to opoce do
11002: LD_ADDR_LOC 31
11006: PUSH
11007: DOUBLE
11008: LD_INT 1
11010: DEC
11011: ST_TO_ADDR
11012: LD_EXP 39
11016: PUSH
11017: FOR_TO
11018: IFFALSE 11050
// begin preparehuman ( 0 , class_apeman , 0 ) ;
11020: LD_INT 0
11022: PPUSH
11023: LD_INT 12
11025: PPUSH
11026: LD_INT 0
11028: PPUSH
11029: CALL_OW 380
// placeunitarea ( createhuman , les , false ) ;
11033: CALL_OW 44
11037: PPUSH
11038: LD_INT 4
11040: PPUSH
11041: LD_INT 0
11043: PPUSH
11044: CALL_OW 49
// end ;
11048: GO 11017
11050: POP
11051: POP
// uc_side = pos2side ;
11052: LD_ADDR_OWVAR 20
11056: PUSH
11057: LD_EXP 45
11061: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos2side ] ;
11062: LD_ADDR_OWVAR 21
11066: PUSH
11067: LD_EXP 49
11071: PUSH
11072: LD_EXP 45
11076: ARRAY
11077: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11078: LD_ADDR_OWVAR 37
11082: PUSH
11083: LD_LOC 18
11087: PUSH
11088: LD_OWVAR 21
11092: ARRAY
11093: ST_TO_ADDR
// vc_control = control_manual ;
11094: LD_ADDR_OWVAR 38
11098: PUSH
11099: LD_INT 1
11101: ST_TO_ADDR
// vc_engine = engine_siberite ;
11102: LD_ADDR_OWVAR 39
11106: PUSH
11107: LD_INT 3
11109: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
11110: LD_ADDR_OWVAR 40
11114: PUSH
11115: LD_LOC 19
11119: PUSH
11120: LD_OWVAR 21
11124: ARRAY
11125: ST_TO_ADDR
// vlajka1 = createvehicle ;
11126: LD_ADDR_LOC 16
11130: PUSH
11131: CALL_OW 45
11135: ST_TO_ADDR
// placeunitxy ( vlajka1 , 76 , 60 , false ) ;
11136: LD_LOC 16
11140: PPUSH
11141: LD_INT 76
11143: PPUSH
11144: LD_INT 60
11146: PPUSH
11147: LD_INT 0
11149: PPUSH
11150: CALL_OW 48
// uc_side = pos1side ;
11154: LD_ADDR_OWVAR 20
11158: PUSH
11159: LD_EXP 44
11163: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos1side ] ;
11164: LD_ADDR_OWVAR 21
11168: PUSH
11169: LD_EXP 49
11173: PUSH
11174: LD_EXP 44
11178: ARRAY
11179: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11180: LD_ADDR_OWVAR 37
11184: PUSH
11185: LD_LOC 18
11189: PUSH
11190: LD_OWVAR 21
11194: ARRAY
11195: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
11196: LD_ADDR_OWVAR 40
11200: PUSH
11201: LD_LOC 19
11205: PUSH
11206: LD_OWVAR 21
11210: ARRAY
11211: ST_TO_ADDR
// vlajka2 = createvehicle ;
11212: LD_ADDR_LOC 17
11216: PUSH
11217: CALL_OW 45
11221: ST_TO_ADDR
// placeunitxy ( vlajka2 , 143 , 60 , false ) ;
11222: LD_LOC 17
11226: PPUSH
11227: LD_INT 143
11229: PPUSH
11230: LD_INT 60
11232: PPUSH
11233: LD_INT 0
11235: PPUSH
11236: CALL_OW 48
// case mp_sides_positions_ [ your_side ] of 1 :
11240: LD_EXP 50
11244: PUSH
11245: LD_OWVAR 2
11249: ARRAY
11250: PUSH
11251: LD_INT 1
11253: DOUBLE
11254: EQUAL
11255: IFTRUE 11259
11257: GO 11272
11259: POP
// centernowonxy ( 44 , 60 ) ; 2 :
11260: LD_INT 44
11262: PPUSH
11263: LD_INT 60
11265: PPUSH
11266: CALL_OW 86
11270: GO 11294
11272: LD_INT 2
11274: DOUBLE
11275: EQUAL
11276: IFTRUE 11280
11278: GO 11293
11280: POP
// centernowonxy ( 175 , 60 ) ; end ;
11281: LD_INT 175
11283: PPUSH
11284: LD_INT 60
11286: PPUSH
11287: CALL_OW 86
11291: GO 11294
11293: POP
// end ;
11294: LD_VAR 0 1
11298: RET
// function refresh ; var tmp , tmp1 , tmp2 , tmp3 , tmp4 ; begin
11299: LD_INT 0
11301: PPUSH
11302: PPUSH
11303: PPUSH
11304: PPUSH
11305: PPUSH
11306: PPUSH
// tmp = time div 60 ;
11307: LD_ADDR_VAR 0 2
11311: PUSH
11312: LD_LOC 13
11316: PUSH
11317: LD_INT 60
11319: DIV
11320: ST_TO_ADDR
// if tmp < 10 then
11321: LD_VAR 0 2
11325: PUSH
11326: LD_INT 10
11328: LESS
11329: IFFALSE 11347
// tmp1 = 0 & tmp else
11331: LD_ADDR_VAR 0 3
11335: PUSH
11336: LD_STRING 0
11338: PUSH
11339: LD_VAR 0 2
11343: STR
11344: ST_TO_ADDR
11345: GO 11361
// tmp1 =  & tmp ;
11347: LD_ADDR_VAR 0 3
11351: PUSH
11352: LD_STRING 
11354: PUSH
11355: LD_VAR 0 2
11359: STR
11360: ST_TO_ADDR
// tmp = time mod 60 ;
11361: LD_ADDR_VAR 0 2
11365: PUSH
11366: LD_LOC 13
11370: PUSH
11371: LD_INT 60
11373: MOD
11374: ST_TO_ADDR
// if tmp < 10 then
11375: LD_VAR 0 2
11379: PUSH
11380: LD_INT 10
11382: LESS
11383: IFFALSE 11401
// tmp2 = 0 & tmp else
11385: LD_ADDR_VAR 0 4
11389: PUSH
11390: LD_STRING 0
11392: PUSH
11393: LD_VAR 0 2
11397: STR
11398: ST_TO_ADDR
11399: GO 11415
// tmp2 =  & tmp ;
11401: LD_ADDR_VAR 0 4
11405: PUSH
11406: LD_STRING 
11408: PUSH
11409: LD_VAR 0 2
11413: STR
11414: ST_TO_ADDR
// if left_score < 10 then
11415: LD_LOC 22
11419: PUSH
11420: LD_INT 10
11422: LESS
11423: IFFALSE 11441
// tmp3 = 0 & left_score else
11425: LD_ADDR_VAR 0 5
11429: PUSH
11430: LD_STRING 0
11432: PUSH
11433: LD_LOC 22
11437: STR
11438: ST_TO_ADDR
11439: GO 11455
// tmp3 =  & left_score ;
11441: LD_ADDR_VAR 0 5
11445: PUSH
11446: LD_STRING 
11448: PUSH
11449: LD_LOC 22
11453: STR
11454: ST_TO_ADDR
// if right_score < 10 then
11455: LD_LOC 23
11459: PUSH
11460: LD_INT 10
11462: LESS
11463: IFFALSE 11481
// tmp4 = 0 & right_score else
11465: LD_ADDR_VAR 0 6
11469: PUSH
11470: LD_STRING 0
11472: PUSH
11473: LD_LOC 23
11477: STR
11478: ST_TO_ADDR
11479: GO 11495
// tmp4 =  & right_score ;
11481: LD_ADDR_VAR 0 6
11485: PUSH
11486: LD_STRING 
11488: PUSH
11489: LD_LOC 23
11493: STR
11494: ST_TO_ADDR
// display_strings = [ Score:  & tmp3 &  to  & tmp4 , Time left:  & tmp1 & : & tmp2 ] ;
11495: LD_ADDR_OWVAR 47
11499: PUSH
11500: LD_STRING Score: 
11502: PUSH
11503: LD_VAR 0 5
11507: STR
11508: PUSH
11509: LD_STRING  to 
11511: STR
11512: PUSH
11513: LD_VAR 0 6
11517: STR
11518: PUSH
11519: LD_STRING Time left: 
11521: PUSH
11522: LD_VAR 0 3
11526: STR
11527: PUSH
11528: LD_STRING :
11530: STR
11531: PUSH
11532: LD_VAR 0 4
11536: STR
11537: PUSH
11538: EMPTY
11539: LIST
11540: LIST
11541: ST_TO_ADDR
// end ;
11542: LD_VAR 0 1
11546: RET
// every 0 0$1 marked 03 do
11547: GO 11549
11549: DISABLE
// begin time = time - 1 ;
11550: LD_ADDR_LOC 13
11554: PUSH
11555: LD_LOC 13
11559: PUSH
11560: LD_INT 1
11562: MINUS
11563: ST_TO_ADDR
// refresh ;
11564: CALL 11299 0 0
// if not time then
11568: LD_LOC 13
11572: NOT
11573: IFFALSE 11639
// if mp_sides_positions_ [ your_side ] = 1 then
11575: LD_EXP 50
11579: PUSH
11580: LD_OWVAR 2
11584: ARRAY
11585: PUSH
11586: LD_INT 1
11588: EQUAL
11589: IFFALSE 11615
// if left_score >= right_score then
11591: LD_LOC 22
11595: PUSH
11596: LD_LOC 23
11600: GREATEREQUAL
11601: IFFALSE 11609
// youwininmultiplayer else
11603: CALL_OW 106
11607: GO 11613
// youlostinmultiplayer else
11609: CALL_OW 107
11613: GO 11637
// if right_score >= left_score then
11615: LD_LOC 23
11619: PUSH
11620: LD_LOC 22
11624: GREATEREQUAL
11625: IFFALSE 11633
// youwininmultiplayer else
11627: CALL_OW 106
11631: GO 11637
// youlostinmultiplayer else
11633: CALL_OW 107
11637: GO 11640
// enable ;
11639: ENABLE
// end ;
11640: END
// every 0 0$10 marked 19 do
11641: GO 11643
11643: DISABLE
// begin cper = cper - 0 0$10 ;
11644: LD_ADDR_EXP 40
11648: PUSH
11649: LD_EXP 40
11653: PUSH
11654: LD_INT 350
11656: MINUS
11657: ST_TO_ADDR
// if cper = 0 then
11658: LD_EXP 40
11662: PUSH
11663: LD_INT 0
11665: EQUAL
11666: IFFALSE 11704
// begin createcratesarea ( 5 , vlevoex , true ) ;
11668: LD_INT 5
11670: PPUSH
11671: LD_INT 5
11673: PPUSH
11674: LD_INT 1
11676: PPUSH
11677: CALL_OW 55
// createcratesarea ( 5 , vpravoex , true ) ;
11681: LD_INT 5
11683: PPUSH
11684: LD_INT 6
11686: PPUSH
11687: LD_INT 1
11689: PPUSH
11690: CALL_OW 55
// cper = cperiode ;
11694: LD_ADDR_EXP 40
11698: PUSH
11699: LD_EXP 41
11703: ST_TO_ADDR
// end ; enable ;
11704: ENABLE
// end ;
11705: END
// every 5 trigger getlives ( depot1 ) < 500 marked 01 do
11706: LD_LOC 14
11710: PPUSH
11711: CALL_OW 256
11715: PUSH
11716: LD_INT 500
11718: LESS
11719: IFFALSE 11737
11721: GO 11723
11723: DISABLE
// begin setlives ( depot1 , 750 ) ;
11724: LD_LOC 14
11728: PPUSH
11729: LD_INT 750
11731: PPUSH
11732: CALL_OW 234
// enable ;
11736: ENABLE
// end ;
11737: END
// every 5 trigger getlives ( depot2 ) < 500 marked 02 do
11738: LD_LOC 15
11742: PPUSH
11743: CALL_OW 256
11747: PUSH
11748: LD_INT 500
11750: LESS
11751: IFFALSE 11769
11753: GO 11755
11755: DISABLE
// begin setlives ( depot2 , 750 ) ;
11756: LD_LOC 15
11760: PPUSH
11761: LD_INT 750
11763: PPUSH
11764: CALL_OW 234
// enable ;
11768: ENABLE
// end ;
11769: END
// on unitdestroyed ( un ) do var radius ;
11770: LD_INT 0
11772: PPUSH
// begin if GetClass ( un ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
11773: LD_VAR 0 1
11777: PPUSH
11778: CALL_OW 257
11782: PUSH
11783: LD_INT 12
11785: PUSH
11786: LD_INT 15
11788: PUSH
11789: LD_INT 17
11791: PUSH
11792: LD_INT 16
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: IN
11801: PUSH
11802: LD_VAR 0 1
11806: PPUSH
11807: CALL_OW 263
11811: PUSH
11812: LD_INT 5
11814: EQUAL
11815: OR
11816: IFFALSE 11827
// ApeKilled ( un ) ;
11818: LD_VAR 0 1
11822: PPUSH
11823: CALL 8182 0 1
// if mp_game_type <> 1 then
11827: LD_OWVAR 6
11831: PUSH
11832: LD_INT 1
11834: NONEQUAL
11835: IFFALSE 11839
// exit ;
11837: GO 12133
// if un = vlajka1 then
11839: LD_VAR 0 1
11843: PUSH
11844: LD_LOC 16
11848: EQUAL
11849: IFFALSE 11987
// begin uc_side = pos2side ;
11851: LD_ADDR_OWVAR 20
11855: PUSH
11856: LD_EXP 45
11860: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos2side ] ;
11861: LD_ADDR_OWVAR 21
11865: PUSH
11866: LD_EXP 49
11870: PUSH
11871: LD_EXP 45
11875: ARRAY
11876: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11877: LD_ADDR_OWVAR 37
11881: PUSH
11882: LD_LOC 18
11886: PUSH
11887: LD_OWVAR 21
11891: ARRAY
11892: ST_TO_ADDR
// vc_control = control_manual ;
11893: LD_ADDR_OWVAR 38
11897: PUSH
11898: LD_INT 1
11900: ST_TO_ADDR
// vc_engine = engine_siberite ;
11901: LD_ADDR_OWVAR 39
11905: PUSH
11906: LD_INT 3
11908: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
11909: LD_ADDR_OWVAR 40
11913: PUSH
11914: LD_LOC 19
11918: PUSH
11919: LD_OWVAR 21
11923: ARRAY
11924: ST_TO_ADDR
// vlajka1 = createvehicle ;
11925: LD_ADDR_LOC 16
11929: PUSH
11930: CALL_OW 45
11934: ST_TO_ADDR
// radius = 2 ;
11935: LD_ADDR_VAR 0 2
11939: PUSH
11940: LD_INT 2
11942: ST_TO_ADDR
// while not placeunitxyr ( vlajka1 , 76 , 60 , radius , false ) do
11943: LD_LOC 16
11947: PPUSH
11948: LD_INT 76
11950: PPUSH
11951: LD_INT 60
11953: PPUSH
11954: LD_VAR 0 2
11958: PPUSH
11959: LD_INT 0
11961: PPUSH
11962: CALL_OW 50
11966: NOT
11967: IFFALSE 11985
// radius = radius + 1 ;
11969: LD_ADDR_VAR 0 2
11973: PUSH
11974: LD_VAR 0 2
11978: PUSH
11979: LD_INT 1
11981: PLUS
11982: ST_TO_ADDR
11983: GO 11943
// end else
11985: GO 12133
// if un = vlajka2 then
11987: LD_VAR 0 1
11991: PUSH
11992: LD_LOC 17
11996: EQUAL
11997: IFFALSE 12133
// begin uc_side = pos1side ;
11999: LD_ADDR_OWVAR 20
12003: PUSH
12004: LD_EXP 44
12008: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos1side ] ;
12009: LD_ADDR_OWVAR 21
12013: PUSH
12014: LD_EXP 49
12018: PUSH
12019: LD_EXP 44
12023: ARRAY
12024: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
12025: LD_ADDR_OWVAR 37
12029: PUSH
12030: LD_LOC 18
12034: PUSH
12035: LD_OWVAR 21
12039: ARRAY
12040: ST_TO_ADDR
// vc_control = control_manual ;
12041: LD_ADDR_OWVAR 38
12045: PUSH
12046: LD_INT 1
12048: ST_TO_ADDR
// vc_engine = engine_siberite ;
12049: LD_ADDR_OWVAR 39
12053: PUSH
12054: LD_INT 3
12056: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
12057: LD_ADDR_OWVAR 40
12061: PUSH
12062: LD_LOC 19
12066: PUSH
12067: LD_OWVAR 21
12071: ARRAY
12072: ST_TO_ADDR
// vlajka2 = createvehicle ;
12073: LD_ADDR_LOC 17
12077: PUSH
12078: CALL_OW 45
12082: ST_TO_ADDR
// radius = 2 ;
12083: LD_ADDR_VAR 0 2
12087: PUSH
12088: LD_INT 2
12090: ST_TO_ADDR
// while not placeunitxyr ( vlajka2 , 143 , 60 , radius , false ) do
12091: LD_LOC 17
12095: PPUSH
12096: LD_INT 143
12098: PPUSH
12099: LD_INT 60
12101: PPUSH
12102: LD_VAR 0 2
12106: PPUSH
12107: LD_INT 0
12109: PPUSH
12110: CALL_OW 50
12114: NOT
12115: IFFALSE 12133
// radius = radius + 1 ;
12117: LD_ADDR_VAR 0 2
12121: PUSH
12122: LD_VAR 0 2
12126: PUSH
12127: LD_INT 1
12129: PLUS
12130: ST_TO_ADDR
12131: GO 12091
// end ; end ;
12133: PPOPN 2
12135: END
// on vehiclecaptured ( vehnew , vehold , origside , hum ) marked 05 do var radius ;
12136: LD_INT 0
12138: PPUSH
// if ( vehold = vlajka1 ) then
12139: LD_VAR 0 2
12143: PUSH
12144: LD_LOC 16
12148: EQUAL
12149: IFFALSE 12302
// begin vlajka1 = vehnew ;
12151: LD_ADDR_LOC 16
12155: PUSH
12156: LD_VAR 0 1
12160: ST_TO_ADDR
// comexitvehicle ( vlajka1 ) ;
12161: LD_LOC 16
12165: PPUSH
12166: CALL_OW 121
// while isdrivenby ( vlajka1 ) do
12170: LD_LOC 16
12174: PPUSH
12175: CALL_OW 311
12179: IFFALSE 12190
// wait ( 2 ) ;
12181: LD_INT 2
12183: PPUSH
12184: CALL_OW 67
12188: GO 12170
// if getdistunitxy ( vlajka1 , 76 , 60 ) > 4 then
12190: LD_LOC 16
12194: PPUSH
12195: LD_INT 76
12197: PPUSH
12198: LD_INT 60
12200: PPUSH
12201: CALL_OW 297
12205: PUSH
12206: LD_INT 4
12208: GREATER
12209: IFFALSE 12286
// begin removeunit ( vlajka1 ) ;
12211: LD_LOC 16
12215: PPUSH
12216: CALL_OW 64
// setside ( vlajka1 , origside ) ;
12220: LD_LOC 16
12224: PPUSH
12225: LD_VAR 0 3
12229: PPUSH
12230: CALL_OW 235
// radius = 2 ;
12234: LD_ADDR_VAR 0 5
12238: PUSH
12239: LD_INT 2
12241: ST_TO_ADDR
// while not placeunitxyr ( vlajka1 , 76 , 60 , radius , false ) do
12242: LD_LOC 16
12246: PPUSH
12247: LD_INT 76
12249: PPUSH
12250: LD_INT 60
12252: PPUSH
12253: LD_VAR 0 5
12257: PPUSH
12258: LD_INT 0
12260: PPUSH
12261: CALL_OW 50
12265: NOT
12266: IFFALSE 12284
// radius = radius + 1 ;
12268: LD_ADDR_VAR 0 5
12272: PUSH
12273: LD_VAR 0 5
12277: PUSH
12278: LD_INT 1
12280: PLUS
12281: ST_TO_ADDR
12282: GO 12242
// end else
12284: GO 12300
// setside ( vlajka1 , origside ) ;
12286: LD_LOC 16
12290: PPUSH
12291: LD_VAR 0 3
12295: PPUSH
12296: CALL_OW 235
// end else
12300: GO 12463
// if ( vehold = vlajka2 ) then
12302: LD_VAR 0 2
12306: PUSH
12307: LD_LOC 17
12311: EQUAL
12312: IFFALSE 12463
// begin vlajka2 = vehnew ;
12314: LD_ADDR_LOC 17
12318: PUSH
12319: LD_VAR 0 1
12323: ST_TO_ADDR
// comexitvehicle ( vlajka2 ) ;
12324: LD_LOC 17
12328: PPUSH
12329: CALL_OW 121
// while isdrivenby ( vlajka2 ) do
12333: LD_LOC 17
12337: PPUSH
12338: CALL_OW 311
12342: IFFALSE 12353
// wait ( 2 ) ;
12344: LD_INT 2
12346: PPUSH
12347: CALL_OW 67
12351: GO 12333
// if getdistunitxy ( vlajka2 , 143 , 60 ) > 4 then
12353: LD_LOC 17
12357: PPUSH
12358: LD_INT 143
12360: PPUSH
12361: LD_INT 60
12363: PPUSH
12364: CALL_OW 297
12368: PUSH
12369: LD_INT 4
12371: GREATER
12372: IFFALSE 12449
// begin removeunit ( vlajka2 ) ;
12374: LD_LOC 17
12378: PPUSH
12379: CALL_OW 64
// setside ( vlajka2 , origside ) ;
12383: LD_LOC 17
12387: PPUSH
12388: LD_VAR 0 3
12392: PPUSH
12393: CALL_OW 235
// radius = 2 ;
12397: LD_ADDR_VAR 0 5
12401: PUSH
12402: LD_INT 2
12404: ST_TO_ADDR
// while not placeunitxyr ( vlajka2 , 143 , 60 , radius , false ) do
12405: LD_LOC 17
12409: PPUSH
12410: LD_INT 143
12412: PPUSH
12413: LD_INT 60
12415: PPUSH
12416: LD_VAR 0 5
12420: PPUSH
12421: LD_INT 0
12423: PPUSH
12424: CALL_OW 50
12428: NOT
12429: IFFALSE 12447
// radius = radius + 1 ;
12431: LD_ADDR_VAR 0 5
12435: PUSH
12436: LD_VAR 0 5
12440: PUSH
12441: LD_INT 1
12443: PLUS
12444: ST_TO_ADDR
12445: GO 12405
// end else
12447: GO 12463
// setside ( vlajka2 , origside ) ;
12449: LD_LOC 17
12453: PPUSH
12454: LD_VAR 0 3
12458: PPUSH
12459: CALL_OW 235
// end ;
12463: PPOPN 5
12465: END
// every 10 + 1 trigger getdistunitxy ( vlajka1 , 185 , 60 ) < 6 marked 06 do var radius , tmp ;
12466: LD_LOC 16
12470: PPUSH
12471: LD_INT 185
12473: PPUSH
12474: LD_INT 60
12476: PPUSH
12477: CALL_OW 297
12481: PUSH
12482: LD_INT 6
12484: LESS
12485: IFFALSE 12689
12487: GO 12489
12489: DISABLE
12490: LD_INT 0
12492: PPUSH
12493: PPUSH
// begin right_score = right_score + 1 ;
12494: LD_ADDR_LOC 23
12498: PUSH
12499: LD_LOC 23
12503: PUSH
12504: LD_INT 1
12506: PLUS
12507: ST_TO_ADDR
// refresh ;
12508: CALL 11299 0 0
// comexitvehicle ( vlajka1 ) ;
12512: LD_LOC 16
12516: PPUSH
12517: CALL_OW 121
// while isdrivenby ( vlajka1 ) do
12521: LD_LOC 16
12525: PPUSH
12526: CALL_OW 311
12530: IFFALSE 12541
// wait ( 2 ) ;
12532: LD_INT 2
12534: PPUSH
12535: CALL_OW 67
12539: GO 12521
// removeunit ( vlajka1 ) ;
12541: LD_LOC 16
12545: PPUSH
12546: CALL_OW 64
// for radius in [ mat_cans , mat_oil , mat_siberit ] do
12550: LD_ADDR_VAR 0 1
12554: PUSH
12555: LD_INT 1
12557: PUSH
12558: LD_INT 2
12560: PUSH
12561: LD_INT 3
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: LIST
12568: PUSH
12569: FOR_IN
12570: IFFALSE 12636
// begin tmp = getcargo ( vlajka1 , radius ) ;
12572: LD_ADDR_VAR 0 2
12576: PUSH
12577: LD_LOC 16
12581: PPUSH
12582: LD_VAR 0 1
12586: PPUSH
12587: CALL_OW 289
12591: ST_TO_ADDR
// if tmp then
12592: LD_VAR 0 2
12596: IFFALSE 12634
// begin addresourcetype ( pos2base , radius , tmp ) ;
12598: LD_LOC 21
12602: PPUSH
12603: LD_VAR 0 1
12607: PPUSH
12608: LD_VAR 0 2
12612: PPUSH
12613: CALL_OW 276
// setcargo ( vlajka1 , radius , 0 ) ;
12617: LD_LOC 16
12621: PPUSH
12622: LD_VAR 0 1
12626: PPUSH
12627: LD_INT 0
12629: PPUSH
12630: CALL_OW 290
// end ; end ;
12634: GO 12569
12636: POP
12637: POP
// radius = 2 ;
12638: LD_ADDR_VAR 0 1
12642: PUSH
12643: LD_INT 2
12645: ST_TO_ADDR
// while not placeunitxyr ( vlajka1 , 76 , 60 , radius , false ) do
12646: LD_LOC 16
12650: PPUSH
12651: LD_INT 76
12653: PPUSH
12654: LD_INT 60
12656: PPUSH
12657: LD_VAR 0 1
12661: PPUSH
12662: LD_INT 0
12664: PPUSH
12665: CALL_OW 50
12669: NOT
12670: IFFALSE 12688
// radius = radius + 1 ;
12672: LD_ADDR_VAR 0 1
12676: PUSH
12677: LD_VAR 0 1
12681: PUSH
12682: LD_INT 1
12684: PLUS
12685: ST_TO_ADDR
12686: GO 12646
// enable ;
12688: ENABLE
// end ;
12689: PPOPN 2
12691: END
// every 10 trigger getdistunitxy ( vlajka2 , 34 , 60 ) < 6 marked 07 do var radius , tmp ;
12692: LD_LOC 17
12696: PPUSH
12697: LD_INT 34
12699: PPUSH
12700: LD_INT 60
12702: PPUSH
12703: CALL_OW 297
12707: PUSH
12708: LD_INT 6
12710: LESS
12711: IFFALSE 12915
12713: GO 12715
12715: DISABLE
12716: LD_INT 0
12718: PPUSH
12719: PPUSH
// begin left_score = left_score + 1 ;
12720: LD_ADDR_LOC 22
12724: PUSH
12725: LD_LOC 22
12729: PUSH
12730: LD_INT 1
12732: PLUS
12733: ST_TO_ADDR
// refresh ;
12734: CALL 11299 0 0
// comexitvehicle ( vlajka2 ) ;
12738: LD_LOC 17
12742: PPUSH
12743: CALL_OW 121
// while isdrivenby ( vlajka2 ) do
12747: LD_LOC 17
12751: PPUSH
12752: CALL_OW 311
12756: IFFALSE 12767
// wait ( 2 ) ;
12758: LD_INT 2
12760: PPUSH
12761: CALL_OW 67
12765: GO 12747
// removeunit ( vlajka2 ) ;
12767: LD_LOC 17
12771: PPUSH
12772: CALL_OW 64
// for radius in [ mat_cans , mat_oil , mat_siberit ] do
12776: LD_ADDR_VAR 0 1
12780: PUSH
12781: LD_INT 1
12783: PUSH
12784: LD_INT 2
12786: PUSH
12787: LD_INT 3
12789: PUSH
12790: EMPTY
12791: LIST
12792: LIST
12793: LIST
12794: PUSH
12795: FOR_IN
12796: IFFALSE 12862
// begin tmp = getcargo ( vlajka2 , radius ) ;
12798: LD_ADDR_VAR 0 2
12802: PUSH
12803: LD_LOC 17
12807: PPUSH
12808: LD_VAR 0 1
12812: PPUSH
12813: CALL_OW 289
12817: ST_TO_ADDR
// if tmp then
12818: LD_VAR 0 2
12822: IFFALSE 12860
// begin addresourcetype ( pos1base , radius , tmp ) ;
12824: LD_LOC 20
12828: PPUSH
12829: LD_VAR 0 1
12833: PPUSH
12834: LD_VAR 0 2
12838: PPUSH
12839: CALL_OW 276
// setcargo ( vlajka2 , radius , 0 ) ;
12843: LD_LOC 17
12847: PPUSH
12848: LD_VAR 0 1
12852: PPUSH
12853: LD_INT 0
12855: PPUSH
12856: CALL_OW 290
// end ; end ;
12860: GO 12795
12862: POP
12863: POP
// radius = 2 ;
12864: LD_ADDR_VAR 0 1
12868: PUSH
12869: LD_INT 2
12871: ST_TO_ADDR
// while not placeunitxyr ( vlajka2 , 143 , 60 , radius , false ) do
12872: LD_LOC 17
12876: PPUSH
12877: LD_INT 143
12879: PPUSH
12880: LD_INT 60
12882: PPUSH
12883: LD_VAR 0 1
12887: PPUSH
12888: LD_INT 0
12890: PPUSH
12891: CALL_OW 50
12895: NOT
12896: IFFALSE 12914
// radius = radius + 1 ;
12898: LD_ADDR_VAR 0 1
12902: PUSH
12903: LD_VAR 0 1
12907: PUSH
12908: LD_INT 1
12910: PLUS
12911: ST_TO_ADDR
12912: GO 12872
// enable ;
12914: ENABLE
// end ; end_of_file
12915: PPOPN 2
12917: END
// var zakladna , skilly , start_res , extra_oil , extra_sib , zakl_plus , batt_fl , sib_det , people_resp , siberitofka ; var fortpos , areasdiff , directions ; var resp_cnt1 , resp_cnt2 ; export function other_game ; var tmp , tmp2 , tmp3 , cl ; begin
12918: LD_INT 0
12920: PPUSH
12921: PPUSH
12922: PPUSH
12923: PPUSH
12924: PPUSH
// ctf = false ;
12925: LD_ADDR_EXP 47
12929: PUSH
12930: LD_INT 0
12932: ST_TO_ADDR
// resp_cnt1 = 0 ;
12933: LD_ADDR_LOC 47
12937: PUSH
12938: LD_INT 0
12940: ST_TO_ADDR
// resp_cnt2 = 0 ;
12941: LD_ADDR_LOC 48
12945: PUSH
12946: LD_INT 0
12948: ST_TO_ADDR
// enable ( nonctf_13 ) ;
12949: LD_EXP 55
12953: ENABLE_MARKED
// for tmp = 1 to 8 do
12954: LD_ADDR_VAR 0 2
12958: PUSH
12959: DOUBLE
12960: LD_INT 1
12962: DEC
12963: ST_TO_ADDR
12964: LD_INT 8
12966: PUSH
12967: FOR_TO
12968: IFFALSE 13029
// begin setrestrict ( b_depot , tmp , state_enabled ) ;
12970: LD_INT 0
12972: PPUSH
12973: LD_VAR 0 2
12977: PPUSH
12978: LD_INT 1
12980: PPUSH
12981: CALL_OW 324
// if sib_det then
12985: LD_LOC 41
12989: IFFALSE 13006
// settech ( tech_sibdet , tmp , state_researched ) ;
12991: LD_INT 20
12993: PPUSH
12994: LD_VAR 0 2
12998: PPUSH
12999: LD_INT 2
13001: PPUSH
13002: CALL_OW 322
// if siberitofka then
13006: LD_LOC 43
13010: IFFALSE 13027
// settech ( tech_sibfiss , tmp , state_enabled ) ;
13012: LD_INT 25
13014: PPUSH
13015: LD_VAR 0 2
13019: PPUSH
13020: LD_INT 1
13022: PPUSH
13023: CALL_OW 322
// end ;
13027: GO 12967
13029: POP
13030: POP
// if multiplayer then
13031: LD_OWVAR 4
13035: IFFALSE 13208
// begin zakladna = getmultiplayersetting ( 0 ) ;
13037: LD_ADDR_LOC 34
13041: PUSH
13042: LD_INT 0
13044: PPUSH
13045: CALL_OW 426
13049: ST_TO_ADDR
// lidi = getmultiplayersetting ( 1 ) ;
13050: LD_ADDR_EXP 37
13054: PUSH
13055: LD_INT 1
13057: PPUSH
13058: CALL_OW 426
13062: ST_TO_ADDR
// skilly = getmultiplayersetting ( 2 ) ;
13063: LD_ADDR_LOC 35
13067: PUSH
13068: LD_INT 2
13070: PPUSH
13071: CALL_OW 426
13075: ST_TO_ADDR
// start_res = getmultiplayersetting ( 3 ) ;
13076: LD_ADDR_LOC 36
13080: PUSH
13081: LD_INT 3
13083: PPUSH
13084: CALL_OW 426
13088: ST_TO_ADDR
// krabice = getmultiplayersetting ( 4 ) ;
13089: LD_ADDR_EXP 38
13093: PUSH
13094: LD_INT 4
13096: PPUSH
13097: CALL_OW 426
13101: ST_TO_ADDR
// extra_oil = getmultiplayersetting ( 5 ) ;
13102: LD_ADDR_LOC 37
13106: PUSH
13107: LD_INT 5
13109: PPUSH
13110: CALL_OW 426
13114: ST_TO_ADDR
// extra_sib = getmultiplayersetting ( 6 ) ;
13115: LD_ADDR_LOC 38
13119: PUSH
13120: LD_INT 6
13122: PPUSH
13123: CALL_OW 426
13127: ST_TO_ADDR
// zakl_plus = getmultiplayersetting ( 7 ) ;
13128: LD_ADDR_LOC 39
13132: PUSH
13133: LD_INT 7
13135: PPUSH
13136: CALL_OW 426
13140: ST_TO_ADDR
// batt_fl = getmultiplayersetting ( 11 ) ;
13141: LD_ADDR_LOC 40
13145: PUSH
13146: LD_INT 11
13148: PPUSH
13149: CALL_OW 426
13153: ST_TO_ADDR
// sib_det = getmultiplayersetting ( 12 ) ;
13154: LD_ADDR_LOC 41
13158: PUSH
13159: LD_INT 12
13161: PPUSH
13162: CALL_OW 426
13166: ST_TO_ADDR
// opoce = getmultiplayersetting ( 13 ) ;
13167: LD_ADDR_EXP 39
13171: PUSH
13172: LD_INT 13
13174: PPUSH
13175: CALL_OW 426
13179: ST_TO_ADDR
// people_resp = getmultiplayersetting ( 14 ) ;
13180: LD_ADDR_LOC 42
13184: PUSH
13185: LD_INT 14
13187: PPUSH
13188: CALL_OW 426
13192: ST_TO_ADDR
// siberitofka = getmultiplayersetting ( 15 ) ;
13193: LD_ADDR_LOC 43
13197: PUSH
13198: LD_INT 15
13200: PPUSH
13201: CALL_OW 426
13205: ST_TO_ADDR
// end else
13206: GO 13312
// begin zakladna = 1 ;
13208: LD_ADDR_LOC 34
13212: PUSH
13213: LD_INT 1
13215: ST_TO_ADDR
// lidi = 1 ;
13216: LD_ADDR_EXP 37
13220: PUSH
13221: LD_INT 1
13223: ST_TO_ADDR
// skilly = 1 ;
13224: LD_ADDR_LOC 35
13228: PUSH
13229: LD_INT 1
13231: ST_TO_ADDR
// start_res = 2 ;
13232: LD_ADDR_LOC 36
13236: PUSH
13237: LD_INT 2
13239: ST_TO_ADDR
// krabice = 1 ;
13240: LD_ADDR_EXP 38
13244: PUSH
13245: LD_INT 1
13247: ST_TO_ADDR
// extra_oil = 1 ;
13248: LD_ADDR_LOC 37
13252: PUSH
13253: LD_INT 1
13255: ST_TO_ADDR
// extra_sib = 1 ;
13256: LD_ADDR_LOC 38
13260: PUSH
13261: LD_INT 1
13263: ST_TO_ADDR
// zakl_plus = 2 ;
13264: LD_ADDR_LOC 39
13268: PUSH
13269: LD_INT 2
13271: ST_TO_ADDR
// batt_fl = 0 ;
13272: LD_ADDR_LOC 40
13276: PUSH
13277: LD_INT 0
13279: ST_TO_ADDR
// sib_det = 0 ;
13280: LD_ADDR_LOC 41
13284: PUSH
13285: LD_INT 0
13287: ST_TO_ADDR
// opoce = 3 ;
13288: LD_ADDR_EXP 39
13292: PUSH
13293: LD_INT 3
13295: ST_TO_ADDR
// people_resp = 0 ;
13296: LD_ADDR_LOC 42
13300: PUSH
13301: LD_INT 0
13303: ST_TO_ADDR
// siberitofka = 0 ;
13304: LD_ADDR_LOC 43
13308: PUSH
13309: LD_INT 0
13311: ST_TO_ADDR
// end ; if people_resp then
13312: LD_LOC 42
13316: IFFALSE 13333
// begin enable ( nonctf_10 ) ;
13318: LD_EXP 52
13322: ENABLE_MARKED
// enable ( nonctf_11 ) ;
13323: LD_EXP 53
13327: ENABLE_MARKED
// enable ( nonctf_12 ) ;
13328: LD_EXP 54
13332: ENABLE_MARKED
// end ; if people_resp = 1 then
13333: LD_LOC 42
13337: PUSH
13338: LD_INT 1
13340: EQUAL
13341: IFFALSE 13351
// people_resp = 3 ;
13343: LD_ADDR_LOC 42
13347: PUSH
13348: LD_INT 3
13350: ST_TO_ADDR
// if people_resp = 2 then
13351: LD_LOC 42
13355: PUSH
13356: LD_INT 2
13358: EQUAL
13359: IFFALSE 13369
// people_resp = 1 ;
13361: LD_ADDR_LOC 42
13365: PUSH
13366: LD_INT 1
13368: ST_TO_ADDR
// case lidi of 0 :
13369: LD_EXP 37
13373: PUSH
13374: LD_INT 0
13376: DOUBLE
13377: EQUAL
13378: IFTRUE 13382
13380: GO 13393
13382: POP
// lidi = 9 ; 1 :
13383: LD_ADDR_EXP 37
13387: PUSH
13388: LD_INT 9
13390: ST_TO_ADDR
13391: GO 13470
13393: LD_INT 1
13395: DOUBLE
13396: EQUAL
13397: IFTRUE 13401
13399: GO 13412
13401: POP
// lidi = 13 ; 2 :
13402: LD_ADDR_EXP 37
13406: PUSH
13407: LD_INT 13
13409: ST_TO_ADDR
13410: GO 13470
13412: LD_INT 2
13414: DOUBLE
13415: EQUAL
13416: IFTRUE 13420
13418: GO 13431
13420: POP
// lidi = 19 ; 3 :
13421: LD_ADDR_EXP 37
13425: PUSH
13426: LD_INT 19
13428: ST_TO_ADDR
13429: GO 13470
13431: LD_INT 3
13433: DOUBLE
13434: EQUAL
13435: IFTRUE 13439
13437: GO 13450
13439: POP
// lidi = 23 ; 4 :
13440: LD_ADDR_EXP 37
13444: PUSH
13445: LD_INT 23
13447: ST_TO_ADDR
13448: GO 13470
13450: LD_INT 4
13452: DOUBLE
13453: EQUAL
13454: IFTRUE 13458
13456: GO 13469
13458: POP
// lidi = 29 ; end ;
13459: LD_ADDR_EXP 37
13463: PUSH
13464: LD_INT 29
13466: ST_TO_ADDR
13467: GO 13470
13469: POP
// skilly = skilly + 1 ;
13470: LD_ADDR_LOC 35
13474: PUSH
13475: LD_LOC 35
13479: PUSH
13480: LD_INT 1
13482: PLUS
13483: ST_TO_ADDR
// case start_res of 0 :
13484: LD_LOC 36
13488: PUSH
13489: LD_INT 0
13491: DOUBLE
13492: EQUAL
13493: IFTRUE 13497
13495: GO 13508
13497: POP
// start_res = 0 ; 1 :
13498: LD_ADDR_LOC 36
13502: PUSH
13503: LD_INT 0
13505: ST_TO_ADDR
13506: GO 13566
13508: LD_INT 1
13510: DOUBLE
13511: EQUAL
13512: IFTRUE 13516
13514: GO 13527
13516: POP
// start_res = 50 ; 2 :
13517: LD_ADDR_LOC 36
13521: PUSH
13522: LD_INT 50
13524: ST_TO_ADDR
13525: GO 13566
13527: LD_INT 2
13529: DOUBLE
13530: EQUAL
13531: IFTRUE 13535
13533: GO 13546
13535: POP
// start_res = 100 ; 3 :
13536: LD_ADDR_LOC 36
13540: PUSH
13541: LD_INT 100
13543: ST_TO_ADDR
13544: GO 13566
13546: LD_INT 3
13548: DOUBLE
13549: EQUAL
13550: IFTRUE 13554
13552: GO 13565
13554: POP
// start_res = 200 ; end ;
13555: LD_ADDR_LOC 36
13559: PUSH
13560: LD_INT 200
13562: ST_TO_ADDR
13563: GO 13566
13565: POP
// case krabice of 0 :
13566: LD_EXP 38
13570: PUSH
13571: LD_INT 0
13573: DOUBLE
13574: EQUAL
13575: IFTRUE 13579
13577: GO 13590
13579: POP
// cperiode = 1 1$30 ; 1 :
13580: LD_ADDR_EXP 41
13584: PUSH
13585: LD_INT 3150
13587: ST_TO_ADDR
13588: GO 13629
13590: LD_INT 1
13592: DOUBLE
13593: EQUAL
13594: IFTRUE 13598
13596: GO 13609
13598: POP
// cperiode = 1 1$00 ; 2 :
13599: LD_ADDR_EXP 41
13603: PUSH
13604: LD_INT 2100
13606: ST_TO_ADDR
13607: GO 13629
13609: LD_INT 2
13611: DOUBLE
13612: EQUAL
13613: IFTRUE 13617
13615: GO 13628
13617: POP
// cperiode = 0 0$30 ; end ;
13618: LD_ADDR_EXP 41
13622: PUSH
13623: LD_INT 1050
13625: ST_TO_ADDR
13626: GO 13629
13628: POP
// case opoce of 0 :
13629: LD_EXP 39
13633: PUSH
13634: LD_INT 0
13636: DOUBLE
13637: EQUAL
13638: IFTRUE 13642
13640: GO 13653
13642: POP
// opoce = 0 ; 1 :
13643: LD_ADDR_EXP 39
13647: PUSH
13648: LD_INT 0
13650: ST_TO_ADDR
13651: GO 13768
13653: LD_INT 1
13655: DOUBLE
13656: EQUAL
13657: IFTRUE 13661
13659: GO 13672
13661: POP
// opoce = 3 ; 2 :
13662: LD_ADDR_EXP 39
13666: PUSH
13667: LD_INT 3
13669: ST_TO_ADDR
13670: GO 13768
13672: LD_INT 2
13674: DOUBLE
13675: EQUAL
13676: IFTRUE 13680
13678: GO 13691
13680: POP
// opoce = 7 ; 3 :
13681: LD_ADDR_EXP 39
13685: PUSH
13686: LD_INT 7
13688: ST_TO_ADDR
13689: GO 13768
13691: LD_INT 3
13693: DOUBLE
13694: EQUAL
13695: IFTRUE 13699
13697: GO 13710
13699: POP
// opoce = 11 ; 4 :
13700: LD_ADDR_EXP 39
13704: PUSH
13705: LD_INT 11
13707: ST_TO_ADDR
13708: GO 13768
13710: LD_INT 4
13712: DOUBLE
13713: EQUAL
13714: IFTRUE 13718
13716: GO 13729
13718: POP
// opoce = 15 ; 5 :
13719: LD_ADDR_EXP 39
13723: PUSH
13724: LD_INT 15
13726: ST_TO_ADDR
13727: GO 13768
13729: LD_INT 5
13731: DOUBLE
13732: EQUAL
13733: IFTRUE 13737
13735: GO 13748
13737: POP
// opoce = 19 ; 6 :
13738: LD_ADDR_EXP 39
13742: PUSH
13743: LD_INT 19
13745: ST_TO_ADDR
13746: GO 13768
13748: LD_INT 6
13750: DOUBLE
13751: EQUAL
13752: IFTRUE 13756
13754: GO 13767
13756: POP
// opoce = 23 ; end ;
13757: LD_ADDR_EXP 39
13761: PUSH
13762: LD_INT 23
13764: ST_TO_ADDR
13765: GO 13768
13767: POP
// fortpos = [ [ [ 46 , 53 , 4 ] , [ 51 , 62 , 4 ] ] , [ [ 167 , 53 , 1 ] , [ 173 , 64 , 1 ] ] ] ;
13768: LD_ADDR_LOC 44
13772: PUSH
13773: LD_INT 46
13775: PUSH
13776: LD_INT 53
13778: PUSH
13779: LD_INT 4
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: LIST
13786: PUSH
13787: LD_INT 51
13789: PUSH
13790: LD_INT 62
13792: PUSH
13793: LD_INT 4
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: LIST
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: PUSH
13805: LD_INT 167
13807: PUSH
13808: LD_INT 53
13810: PUSH
13811: LD_INT 1
13813: PUSH
13814: EMPTY
13815: LIST
13816: LIST
13817: LIST
13818: PUSH
13819: LD_INT 173
13821: PUSH
13822: LD_INT 64
13824: PUSH
13825: LD_INT 1
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: LIST
13832: PUSH
13833: EMPTY
13834: LIST
13835: LIST
13836: PUSH
13837: EMPTY
13838: LIST
13839: LIST
13840: ST_TO_ADDR
// areasdiff = [ vlevodiff , vpravodiff ] ;
13841: LD_ADDR_LOC 45
13845: PUSH
13846: LD_INT 16
13848: PUSH
13849: LD_INT 17
13851: PUSH
13852: EMPTY
13853: LIST
13854: LIST
13855: ST_TO_ADDR
// directions = [ 4 , 1 ] ;
13856: LD_ADDR_LOC 46
13860: PUSH
13861: LD_INT 4
13863: PUSH
13864: LD_INT 1
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: ST_TO_ADDR
// for tmp = 1 to 8 do
13871: LD_ADDR_VAR 0 2
13875: PUSH
13876: DOUBLE
13877: LD_INT 1
13879: DEC
13880: ST_TO_ADDR
13881: LD_INT 8
13883: PUSH
13884: FOR_TO
13885: IFFALSE 15054
// if mp_sides_nations_ [ tmp ] then
13887: LD_EXP 49
13891: PUSH
13892: LD_VAR 0 2
13896: ARRAY
13897: IFFALSE 15052
// begin if mp_sides_positions_ [ tmp ] = 1 then
13899: LD_EXP 50
13903: PUSH
13904: LD_VAR 0 2
13908: ARRAY
13909: PUSH
13910: LD_INT 1
13912: EQUAL
13913: IFFALSE 13927
// pos1side = tmp else
13915: LD_ADDR_EXP 44
13919: PUSH
13920: LD_VAR 0 2
13924: ST_TO_ADDR
13925: GO 13937
// pos2side = tmp ;
13927: LD_ADDR_EXP 45
13931: PUSH
13932: LD_VAR 0 2
13936: ST_TO_ADDR
// uc_side = tmp ;
13937: LD_ADDR_OWVAR 20
13941: PUSH
13942: LD_VAR 0 2
13946: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ tmp ] ;
13947: LD_ADDR_OWVAR 21
13951: PUSH
13952: LD_EXP 49
13956: PUSH
13957: LD_VAR 0 2
13961: ARRAY
13962: ST_TO_ADDR
// bc_type = b_depot ;
13963: LD_ADDR_OWVAR 42
13967: PUSH
13968: LD_INT 0
13970: ST_TO_ADDR
// bc_level = 1 ;
13971: LD_ADDR_OWVAR 43
13975: PUSH
13976: LD_INT 1
13978: ST_TO_ADDR
// tmp2 = createandplacebuildingxyd ( depotpositions [ mp_sides_positions_ [ tmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 2 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 3 ] ) ;
13979: LD_ADDR_VAR 0 3
13983: PUSH
13984: LD_EXP 42
13988: PUSH
13989: LD_EXP 50
13993: PUSH
13994: LD_VAR 0 2
13998: ARRAY
13999: ARRAY
14000: PUSH
14001: LD_INT 1
14003: ARRAY
14004: PPUSH
14005: LD_EXP 42
14009: PUSH
14010: LD_EXP 50
14014: PUSH
14015: LD_VAR 0 2
14019: ARRAY
14020: ARRAY
14021: PUSH
14022: LD_INT 2
14024: ARRAY
14025: PPUSH
14026: LD_EXP 42
14030: PUSH
14031: LD_EXP 50
14035: PUSH
14036: LD_VAR 0 2
14040: ARRAY
14041: ARRAY
14042: PUSH
14043: LD_INT 3
14045: ARRAY
14046: PPUSH
14047: CALL_OW 47
14051: ST_TO_ADDR
// if batt_fl then
14052: LD_LOC 40
14056: IFFALSE 14166
// setbattleflag ( tmp , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 2 ] , [ [ bfo_defend_bonus_human , 80 ] , [ bfo_defend_bonus_vehicle , 40 ] , [ bfo_defend_bonus_building , 0 ] , [ bfo_range , 17 ] , [ bfo_height , 100 ] ] ) ;
14058: LD_VAR 0 2
14062: PPUSH
14063: LD_EXP 42
14067: PUSH
14068: LD_EXP 50
14072: PUSH
14073: LD_VAR 0 2
14077: ARRAY
14078: ARRAY
14079: PUSH
14080: LD_INT 1
14082: ARRAY
14083: PPUSH
14084: LD_EXP 42
14088: PUSH
14089: LD_EXP 50
14093: PUSH
14094: LD_VAR 0 2
14098: ARRAY
14099: ARRAY
14100: PUSH
14101: LD_INT 2
14103: ARRAY
14104: PPUSH
14105: LD_INT 1
14107: PUSH
14108: LD_INT 80
14110: PUSH
14111: EMPTY
14112: LIST
14113: LIST
14114: PUSH
14115: LD_INT 2
14117: PUSH
14118: LD_INT 40
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: PUSH
14125: LD_INT 3
14127: PUSH
14128: LD_INT 0
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: PUSH
14135: LD_INT 10
14137: PUSH
14138: LD_INT 17
14140: PUSH
14141: EMPTY
14142: LIST
14143: LIST
14144: PUSH
14145: LD_INT 20
14147: PUSH
14148: LD_INT 100
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: PPUSH
14162: CALL_OW 418
// if zakladna then
14166: LD_LOC 34
14170: IFFALSE 14338
// begin bc_type = b_breastwork ;
14172: LD_ADDR_OWVAR 42
14176: PUSH
14177: LD_INT 31
14179: ST_TO_ADDR
// createandplacebuildingxyd ( fortpos [ mp_sides_positions_ [ tmp ] ] [ 1 ] [ 1 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 1 ] [ 2 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 1 ] [ 3 ] ) ;
14180: LD_LOC 44
14184: PUSH
14185: LD_EXP 50
14189: PUSH
14190: LD_VAR 0 2
14194: ARRAY
14195: ARRAY
14196: PUSH
14197: LD_INT 1
14199: ARRAY
14200: PUSH
14201: LD_INT 1
14203: ARRAY
14204: PPUSH
14205: LD_LOC 44
14209: PUSH
14210: LD_EXP 50
14214: PUSH
14215: LD_VAR 0 2
14219: ARRAY
14220: ARRAY
14221: PUSH
14222: LD_INT 1
14224: ARRAY
14225: PUSH
14226: LD_INT 2
14228: ARRAY
14229: PPUSH
14230: LD_LOC 44
14234: PUSH
14235: LD_EXP 50
14239: PUSH
14240: LD_VAR 0 2
14244: ARRAY
14245: ARRAY
14246: PUSH
14247: LD_INT 1
14249: ARRAY
14250: PUSH
14251: LD_INT 3
14253: ARRAY
14254: PPUSH
14255: CALL_OW 47
// createandplacebuildingxyd ( fortpos [ mp_sides_positions_ [ tmp ] ] [ 2 ] [ 1 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 2 ] [ 2 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 2 ] [ 3 ] ) ;
14259: LD_LOC 44
14263: PUSH
14264: LD_EXP 50
14268: PUSH
14269: LD_VAR 0 2
14273: ARRAY
14274: ARRAY
14275: PUSH
14276: LD_INT 2
14278: ARRAY
14279: PUSH
14280: LD_INT 1
14282: ARRAY
14283: PPUSH
14284: LD_LOC 44
14288: PUSH
14289: LD_EXP 50
14293: PUSH
14294: LD_VAR 0 2
14298: ARRAY
14299: ARRAY
14300: PUSH
14301: LD_INT 2
14303: ARRAY
14304: PUSH
14305: LD_INT 2
14307: ARRAY
14308: PPUSH
14309: LD_LOC 44
14313: PUSH
14314: LD_EXP 50
14318: PUSH
14319: LD_VAR 0 2
14323: ARRAY
14324: ARRAY
14325: PUSH
14326: LD_INT 2
14328: ARRAY
14329: PUSH
14330: LD_INT 3
14332: ARRAY
14333: PPUSH
14334: CALL_OW 47
// end ; addresourcetype ( getbase ( tmp2 ) , mat_cans , start_res ) ;
14338: LD_VAR 0 3
14342: PPUSH
14343: CALL_OW 274
14347: PPUSH
14348: LD_INT 1
14350: PPUSH
14351: LD_LOC 36
14355: PPUSH
14356: CALL_OW 276
// if extra_oil then
14360: LD_LOC 37
14364: IFFALSE 14456
// begin tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14366: LD_ADDR_VAR 0 3
14370: PUSH
14371: LD_LOC 45
14375: PUSH
14376: LD_EXP 50
14380: PUSH
14381: LD_VAR 0 2
14385: ARRAY
14386: ARRAY
14387: PPUSH
14388: LD_INT 0
14390: PPUSH
14391: CALL_OW 16
14395: ST_TO_ADDR
// while not createdepositxy ( tmp2 [ 1 ] , tmp2 [ 2 ] , mat_oil ) do
14396: LD_VAR 0 3
14400: PUSH
14401: LD_INT 1
14403: ARRAY
14404: PPUSH
14405: LD_VAR 0 3
14409: PUSH
14410: LD_INT 2
14412: ARRAY
14413: PPUSH
14414: LD_INT 2
14416: PPUSH
14417: CALL_OW 62
14421: NOT
14422: IFFALSE 14456
// tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14424: LD_ADDR_VAR 0 3
14428: PUSH
14429: LD_LOC 45
14433: PUSH
14434: LD_EXP 50
14438: PUSH
14439: LD_VAR 0 2
14443: ARRAY
14444: ARRAY
14445: PPUSH
14446: LD_INT 0
14448: PPUSH
14449: CALL_OW 16
14453: ST_TO_ADDR
14454: GO 14396
// end ; if extra_sib then
14456: LD_LOC 38
14460: IFFALSE 14552
// begin tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14462: LD_ADDR_VAR 0 3
14466: PUSH
14467: LD_LOC 45
14471: PUSH
14472: LD_EXP 50
14476: PUSH
14477: LD_VAR 0 2
14481: ARRAY
14482: ARRAY
14483: PPUSH
14484: LD_INT 0
14486: PPUSH
14487: CALL_OW 16
14491: ST_TO_ADDR
// while not createdepositxy ( tmp2 [ 1 ] , tmp2 [ 2 ] , mat_siberit ) do
14492: LD_VAR 0 3
14496: PUSH
14497: LD_INT 1
14499: ARRAY
14500: PPUSH
14501: LD_VAR 0 3
14505: PUSH
14506: LD_INT 2
14508: ARRAY
14509: PPUSH
14510: LD_INT 3
14512: PPUSH
14513: CALL_OW 62
14517: NOT
14518: IFFALSE 14552
// tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14520: LD_ADDR_VAR 0 3
14524: PUSH
14525: LD_LOC 45
14529: PUSH
14530: LD_EXP 50
14534: PUSH
14535: LD_VAR 0 2
14539: ARRAY
14540: ARRAY
14541: PPUSH
14542: LD_INT 0
14544: PPUSH
14545: CALL_OW 16
14549: ST_TO_ADDR
14550: GO 14492
// end ; if zakl_plus > 0 then
14552: LD_LOC 39
14556: PUSH
14557: LD_INT 0
14559: GREATER
14560: IFFALSE 14820
// begin bc_type = b_lab ;
14562: LD_ADDR_OWVAR 42
14566: PUSH
14567: LD_INT 6
14569: ST_TO_ADDR
// uc_direction = directions [ mp_sides_positions_ [ tmp ] ] ;
14570: LD_ADDR_OWVAR 24
14574: PUSH
14575: LD_LOC 46
14579: PUSH
14580: LD_EXP 50
14584: PUSH
14585: LD_VAR 0 2
14589: ARRAY
14590: ARRAY
14591: ST_TO_ADDR
// tmp3 = createbuilding ;
14592: LD_ADDR_VAR 0 4
14596: PUSH
14597: CALL_OW 46
14601: ST_TO_ADDR
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14602: LD_ADDR_VAR 0 3
14606: PUSH
14607: LD_EXP 43
14611: PUSH
14612: LD_EXP 50
14616: PUSH
14617: LD_VAR 0 2
14621: ARRAY
14622: ARRAY
14623: PPUSH
14624: LD_INT 0
14626: PPUSH
14627: CALL_OW 16
14631: ST_TO_ADDR
// while not placeunitxy ( tmp3 , tmp2 [ 1 ] , tmp2 [ 2 ] , false ) do
14632: LD_VAR 0 4
14636: PPUSH
14637: LD_VAR 0 3
14641: PUSH
14642: LD_INT 1
14644: ARRAY
14645: PPUSH
14646: LD_VAR 0 3
14650: PUSH
14651: LD_INT 2
14653: ARRAY
14654: PPUSH
14655: LD_INT 0
14657: PPUSH
14658: CALL_OW 48
14662: NOT
14663: IFFALSE 14697
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14665: LD_ADDR_VAR 0 3
14669: PUSH
14670: LD_EXP 43
14674: PUSH
14675: LD_EXP 50
14679: PUSH
14680: LD_VAR 0 2
14684: ARRAY
14685: ARRAY
14686: PPUSH
14687: LD_INT 0
14689: PPUSH
14690: CALL_OW 16
14694: ST_TO_ADDR
14695: GO 14632
// if zakl_plus > 1 then
14697: LD_LOC 39
14701: PUSH
14702: LD_INT 1
14704: GREATER
14705: IFFALSE 14820
// begin bc_type = b_workshop ;
14707: LD_ADDR_OWVAR 42
14711: PUSH
14712: LD_INT 2
14714: ST_TO_ADDR
// tmp3 = createbuilding ;
14715: LD_ADDR_VAR 0 4
14719: PUSH
14720: CALL_OW 46
14724: ST_TO_ADDR
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14725: LD_ADDR_VAR 0 3
14729: PUSH
14730: LD_EXP 43
14734: PUSH
14735: LD_EXP 50
14739: PUSH
14740: LD_VAR 0 2
14744: ARRAY
14745: ARRAY
14746: PPUSH
14747: LD_INT 0
14749: PPUSH
14750: CALL_OW 16
14754: ST_TO_ADDR
// while not placeunitxy ( tmp3 , tmp2 [ 1 ] , tmp2 [ 2 ] , false ) do
14755: LD_VAR 0 4
14759: PPUSH
14760: LD_VAR 0 3
14764: PUSH
14765: LD_INT 1
14767: ARRAY
14768: PPUSH
14769: LD_VAR 0 3
14773: PUSH
14774: LD_INT 2
14776: ARRAY
14777: PPUSH
14778: LD_INT 0
14780: PPUSH
14781: CALL_OW 48
14785: NOT
14786: IFFALSE 14820
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14788: LD_ADDR_VAR 0 3
14792: PUSH
14793: LD_EXP 43
14797: PUSH
14798: LD_EXP 50
14802: PUSH
14803: LD_VAR 0 2
14807: ARRAY
14808: ARRAY
14809: PPUSH
14810: LD_INT 0
14812: PPUSH
14813: CALL_OW 16
14817: ST_TO_ADDR
14818: GO 14755
// end ; end ; if batt_fl then
14820: LD_LOC 40
14824: IFFALSE 14934
// setbattleflag ( tmp , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 2 ] , [ [ bfo_defend_bonus_human , 80 ] , [ bfo_defend_bonus_vehicle , 40 ] , [ bfo_defend_bonus_building , 0 ] , [ bfo_range , 17 ] , [ bfo_height , 100 ] ] ) ;
14826: LD_VAR 0 2
14830: PPUSH
14831: LD_EXP 42
14835: PUSH
14836: LD_EXP 50
14840: PUSH
14841: LD_VAR 0 2
14845: ARRAY
14846: ARRAY
14847: PUSH
14848: LD_INT 1
14850: ARRAY
14851: PPUSH
14852: LD_EXP 42
14856: PUSH
14857: LD_EXP 50
14861: PUSH
14862: LD_VAR 0 2
14866: ARRAY
14867: ARRAY
14868: PUSH
14869: LD_INT 2
14871: ARRAY
14872: PPUSH
14873: LD_INT 1
14875: PUSH
14876: LD_INT 80
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: PUSH
14883: LD_INT 2
14885: PUSH
14886: LD_INT 40
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PUSH
14893: LD_INT 3
14895: PUSH
14896: LD_INT 0
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: PUSH
14903: LD_INT 10
14905: PUSH
14906: LD_INT 17
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: PUSH
14913: LD_INT 20
14915: PUSH
14916: LD_INT 100
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: PPUSH
14930: CALL_OW 418
// cl = class_scientistic ;
14934: LD_ADDR_VAR 0 5
14938: PUSH
14939: LD_INT 4
14941: ST_TO_ADDR
// for tmp2 = 1 to lidi do
14942: LD_ADDR_VAR 0 3
14946: PUSH
14947: DOUBLE
14948: LD_INT 1
14950: DEC
14951: ST_TO_ADDR
14952: LD_EXP 37
14956: PUSH
14957: FOR_TO
14958: IFFALSE 15050
// begin if tmp2 >= lidi / 2 then
14960: LD_VAR 0 3
14964: PUSH
14965: LD_EXP 37
14969: PUSH
14970: LD_INT 2
14972: DIVREAL
14973: GREATEREQUAL
14974: IFFALSE 14984
// cl = class_soldier ;
14976: LD_ADDR_VAR 0 5
14980: PUSH
14981: LD_INT 1
14983: ST_TO_ADDR
// preparehuman ( 0 , cl , skilly ) ;
14984: LD_INT 0
14986: PPUSH
14987: LD_VAR 0 5
14991: PPUSH
14992: LD_LOC 35
14996: PPUSH
14997: CALL_OW 380
// if tmp2 = 1 then
15001: LD_VAR 0 3
15005: PUSH
15006: LD_INT 1
15008: EQUAL
15009: IFFALSE 15019
// cl = class_engineer ;
15011: LD_ADDR_VAR 0 5
15015: PUSH
15016: LD_INT 2
15018: ST_TO_ADDR
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
15019: CALL_OW 44
15023: PPUSH
15024: LD_EXP 43
15028: PUSH
15029: LD_EXP 50
15033: PUSH
15034: LD_VAR 0 2
15038: ARRAY
15039: ARRAY
15040: PPUSH
15041: LD_INT 0
15043: PPUSH
15044: CALL_OW 49
// end ;
15048: GO 14957
15050: POP
15051: POP
// end ;
15052: GO 13884
15054: POP
15055: POP
// uc_side = 0 ;
15056: LD_ADDR_OWVAR 20
15060: PUSH
15061: LD_INT 0
15063: ST_TO_ADDR
// uc_nation = nation_nature ;
15064: LD_ADDR_OWVAR 21
15068: PUSH
15069: LD_INT 0
15071: ST_TO_ADDR
// for tmp = 1 to opoce do
15072: LD_ADDR_VAR 0 2
15076: PUSH
15077: DOUBLE
15078: LD_INT 1
15080: DEC
15081: ST_TO_ADDR
15082: LD_EXP 39
15086: PUSH
15087: FOR_TO
15088: IFFALSE 15120
// begin preparehuman ( 0 , class_apeman , 0 ) ;
15090: LD_INT 0
15092: PPUSH
15093: LD_INT 12
15095: PPUSH
15096: LD_INT 0
15098: PPUSH
15099: CALL_OW 380
// placeunitarea ( createhuman , les , false ) ;
15103: CALL_OW 44
15107: PPUSH
15108: LD_INT 4
15110: PPUSH
15111: LD_INT 0
15113: PPUSH
15114: CALL_OW 49
// end ;
15118: GO 15087
15120: POP
15121: POP
// case mp_sides_positions_ [ your_side ] of 1 :
15122: LD_EXP 50
15126: PUSH
15127: LD_OWVAR 2
15131: ARRAY
15132: PUSH
15133: LD_INT 1
15135: DOUBLE
15136: EQUAL
15137: IFTRUE 15141
15139: GO 15154
15141: POP
// centernowonxy ( 44 , 60 ) ; 2 :
15142: LD_INT 44
15144: PPUSH
15145: LD_INT 60
15147: PPUSH
15148: CALL_OW 86
15152: GO 15176
15154: LD_INT 2
15156: DOUBLE
15157: EQUAL
15158: IFTRUE 15162
15160: GO 15175
15162: POP
// centernowonxy ( 175 , 60 ) ; end ;
15163: LD_INT 175
15165: PPUSH
15166: LD_INT 60
15168: PPUSH
15169: CALL_OW 86
15173: GO 15176
15175: POP
// end ;
15176: LD_VAR 0 1
15180: RET
// on humandestroyed ( un , side , nat , x , y , dir , sex , cl ) marked 10 do if mp_sides_positions_ [ side ] = 1 then
15181: LD_EXP 50
15185: PUSH
15186: LD_VAR 0 2
15190: ARRAY
15191: PUSH
15192: LD_INT 1
15194: EQUAL
15195: IFFALSE 15213
// resp_cnt1 = resp_cnt1 + 1 else
15197: LD_ADDR_LOC 47
15201: PUSH
15202: LD_LOC 47
15206: PUSH
15207: LD_INT 1
15209: PLUS
15210: ST_TO_ADDR
15211: GO 15227
// resp_cnt2 = resp_cnt2 + 1 ;
15213: LD_ADDR_LOC 48
15217: PUSH
15218: LD_LOC 48
15222: PUSH
15223: LD_INT 1
15225: PLUS
15226: ST_TO_ADDR
15227: PPOPN 8
15229: END
// every 0 0$30 trigger resp_cnt1 >= people_resp marked 11 do
15230: LD_LOC 47
15234: PUSH
15235: LD_LOC 42
15239: GREATEREQUAL
15240: IFFALSE 15393
15242: GO 15244
15244: DISABLE
// begin resp_cnt1 = resp_cnt1 - people_resp ;
15245: LD_ADDR_LOC 47
15249: PUSH
15250: LD_LOC 47
15254: PUSH
15255: LD_LOC 42
15259: MINUS
15260: ST_TO_ADDR
// if not filterallunits ( [ [ f_side , pos1side ] , [ f_or , [ f_btype , b_depot ] , [ f_class , class_engineer ] ] ] ) then
15261: LD_INT 22
15263: PUSH
15264: LD_EXP 44
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: PUSH
15273: LD_INT 2
15275: PUSH
15276: LD_INT 30
15278: PUSH
15279: LD_INT 0
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: PUSH
15286: LD_INT 25
15288: PUSH
15289: LD_INT 2
15291: PUSH
15292: EMPTY
15293: LIST
15294: LIST
15295: PUSH
15296: EMPTY
15297: LIST
15298: LIST
15299: LIST
15300: PUSH
15301: EMPTY
15302: LIST
15303: LIST
15304: PPUSH
15305: CALL_OW 69
15309: NOT
15310: IFFALSE 15315
// begin enable ;
15312: ENABLE
// exit ;
15313: GO 15393
// end ; uc_side = pos1side ;
15315: LD_ADDR_OWVAR 20
15319: PUSH
15320: LD_EXP 44
15324: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos1side ] ;
15325: LD_ADDR_OWVAR 21
15329: PUSH
15330: LD_EXP 49
15334: PUSH
15335: LD_EXP 44
15339: ARRAY
15340: ST_TO_ADDR
// preparehuman ( 0 , class_soldier , skilly ) ;
15341: LD_INT 0
15343: PPUSH
15344: LD_INT 1
15346: PPUSH
15347: LD_LOC 35
15351: PPUSH
15352: CALL_OW 380
// wait ( 0 0$10 ) ;
15356: LD_INT 350
15358: PPUSH
15359: CALL_OW 67
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ pos1side ] ] , true ) ;
15363: CALL_OW 44
15367: PPUSH
15368: LD_EXP 43
15372: PUSH
15373: LD_EXP 50
15377: PUSH
15378: LD_EXP 44
15382: ARRAY
15383: ARRAY
15384: PPUSH
15385: LD_INT 1
15387: PPUSH
15388: CALL_OW 49
// enable ;
15392: ENABLE
// end ;
15393: END
// every 0 0$30 trigger resp_cnt2 >= people_resp marked 12 do
15394: LD_LOC 48
15398: PUSH
15399: LD_LOC 42
15403: GREATEREQUAL
15404: IFFALSE 15557
15406: GO 15408
15408: DISABLE
// begin resp_cnt2 = resp_cnt2 - people_resp ;
15409: LD_ADDR_LOC 48
15413: PUSH
15414: LD_LOC 48
15418: PUSH
15419: LD_LOC 42
15423: MINUS
15424: ST_TO_ADDR
// if not filterallunits ( [ [ f_side , pos2side ] , [ f_or , [ f_btype , b_depot ] , [ f_class , class_engineer ] ] ] ) then
15425: LD_INT 22
15427: PUSH
15428: LD_EXP 45
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: PUSH
15437: LD_INT 2
15439: PUSH
15440: LD_INT 30
15442: PUSH
15443: LD_INT 0
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: PUSH
15450: LD_INT 25
15452: PUSH
15453: LD_INT 2
15455: PUSH
15456: EMPTY
15457: LIST
15458: LIST
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: LIST
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: PPUSH
15469: CALL_OW 69
15473: NOT
15474: IFFALSE 15479
// begin enable ;
15476: ENABLE
// exit ;
15477: GO 15557
// end ; uc_side = pos2side ;
15479: LD_ADDR_OWVAR 20
15483: PUSH
15484: LD_EXP 45
15488: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos2side ] ;
15489: LD_ADDR_OWVAR 21
15493: PUSH
15494: LD_EXP 49
15498: PUSH
15499: LD_EXP 45
15503: ARRAY
15504: ST_TO_ADDR
// preparehuman ( 0 , class_soldier , skilly ) ;
15505: LD_INT 0
15507: PPUSH
15508: LD_INT 1
15510: PPUSH
15511: LD_LOC 35
15515: PPUSH
15516: CALL_OW 380
// wait ( 0 0$10 ) ;
15520: LD_INT 350
15522: PPUSH
15523: CALL_OW 67
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ pos2side ] ] , true ) ;
15527: CALL_OW 44
15531: PPUSH
15532: LD_EXP 43
15536: PUSH
15537: LD_EXP 50
15541: PUSH
15542: LD_EXP 45
15546: ARRAY
15547: ARRAY
15548: PPUSH
15549: LD_INT 1
15551: PPUSH
15552: CALL_OW 49
// enable ;
15556: ENABLE
// end ;
15557: END
// every 0 0$1 marked 13 do
15558: GO 15560
15560: DISABLE
// begin if not filterallunits ( [ [ f_side , pos1side ] , [ f_type , unit_human ] ] ) then
15561: LD_INT 22
15563: PUSH
15564: LD_EXP 44
15568: PUSH
15569: EMPTY
15570: LIST
15571: LIST
15572: PUSH
15573: LD_INT 21
15575: PUSH
15576: LD_INT 1
15578: PUSH
15579: EMPTY
15580: LIST
15581: LIST
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PPUSH
15587: CALL_OW 69
15591: NOT
15592: IFFALSE 15616
// if pos1side = your_side then
15594: LD_EXP 44
15598: PUSH
15599: LD_OWVAR 2
15603: EQUAL
15604: IFFALSE 15612
// youlostinmultiplayer else
15606: CALL_OW 107
15610: GO 15616
// youwininmultiplayer ;
15612: CALL_OW 106
// if not filterallunits ( [ [ f_side , pos2side ] , [ f_type , unit_human ] ] ) then
15616: LD_INT 22
15618: PUSH
15619: LD_EXP 45
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: PUSH
15628: LD_INT 21
15630: PUSH
15631: LD_INT 1
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: PPUSH
15642: CALL_OW 69
15646: NOT
15647: IFFALSE 15671
// if pos2side = your_side then
15649: LD_EXP 45
15653: PUSH
15654: LD_OWVAR 2
15658: EQUAL
15659: IFFALSE 15667
// youlostinmultiplayer else
15661: CALL_OW 107
15665: GO 15671
// youwininmultiplayer ;
15667: CALL_OW 106
// end ; end_of_file
15671: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
15672: LD_INT 0
15674: PPUSH
15675: PPUSH
// for un in battle_flags_id do
15676: LD_ADDR_VAR 0 2
15680: PUSH
15681: LD_EXP 29
15685: PUSH
15686: FOR_IN
15687: IFFALSE 15762
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
15689: LD_VAR 0 2
15693: PPUSH
15694: LD_INT 1
15696: PUSH
15697: LD_LOC 49
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PUSH
15706: LD_INT 2
15708: PUSH
15709: LD_LOC 49
15713: PUSH
15714: LD_INT 2
15716: DIV
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: PUSH
15722: LD_INT 3
15724: PUSH
15725: LD_LOC 49
15729: PUSH
15730: LD_INT 5
15732: DIV
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: PUSH
15738: LD_INT 20
15740: PUSH
15741: LD_LOC 49
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: PPUSH
15756: CALL_OW 423
15760: GO 15686
15762: POP
15763: POP
// end ;
15764: LD_VAR 0 1
15768: RET
// every 0 0$0.1 marked 55 do var un ;
15769: GO 15771
15771: DISABLE
15772: LD_INT 0
15774: PPUSH
// begin if not def_morale_flags then
15775: LD_EXP 66
15779: NOT
15780: IFFALSE 15784
// exit ;
15782: GO 15861
// if not morale_decreasing_time then
15784: LD_EXP 11
15788: NOT
15789: IFFALSE 15793
// exit ;
15791: GO 15861
// strength = 100 ;
15793: LD_ADDR_LOC 49
15797: PUSH
15798: LD_INT 100
15800: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
15801: LD_EXP 11
15805: PPUSH
15806: CALL_OW 67
// strength := strength - 1 ;
15810: LD_ADDR_LOC 49
15814: PUSH
15815: LD_LOC 49
15819: PUSH
15820: LD_INT 1
15822: MINUS
15823: ST_TO_ADDR
// Update_Flags ;
15824: CALL 15672 0 0
// until not strength ;
15828: LD_LOC 49
15832: NOT
15833: IFFALSE 15801
// for un in battle_flags_id do
15835: LD_ADDR_VAR 0 1
15839: PUSH
15840: LD_EXP 29
15844: PUSH
15845: FOR_IN
15846: IFFALSE 15859
// KillBattleFlag ( un ) ;
15848: LD_VAR 0 1
15852: PPUSH
15853: CALL_OW 419
15857: GO 15845
15859: POP
15860: POP
// end ; end_of_file
15861: PPOPN 1
15863: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
15864: LD_INT 0
15866: PPUSH
15867: PPUSH
// if ( not IAmSpec ) then
15868: CALL_OW 531
15872: NOT
15873: IFFALSE 15889
// Result := Limits_Info ^  ;
15875: LD_ADDR_VAR 0 1
15879: PUSH
15880: LD_LOC 61
15884: PUSH
15885: LD_STRING 
15887: ADD
15888: ST_TO_ADDR
// for i := 1 to 8 do
15889: LD_ADDR_VAR 0 2
15893: PUSH
15894: DOUBLE
15895: LD_INT 1
15897: DEC
15898: ST_TO_ADDR
15899: LD_INT 8
15901: PUSH
15902: FOR_TO
15903: IFFALSE 15948
// if Cheaters [ i ] then
15905: LD_LOC 62
15909: PUSH
15910: LD_VAR 0 2
15914: ARRAY
15915: IFFALSE 15946
// Result := Result ^ [ #Cheater , i , i ] ;
15917: LD_ADDR_VAR 0 1
15921: PUSH
15922: LD_VAR 0 1
15926: PUSH
15927: LD_STRING #Cheater
15929: PUSH
15930: LD_VAR 0 2
15934: PUSH
15935: LD_VAR 0 2
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: LIST
15944: ADD
15945: ST_TO_ADDR
15946: GO 15902
15948: POP
15949: POP
// end ;
15950: LD_VAR 0 1
15954: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
15955: LD_INT 0
15957: PPUSH
15958: PPUSH
15959: PPUSH
15960: PPUSH
15961: PPUSH
// case Game_Type of 10 :
15962: LD_EXP 56
15966: PUSH
15967: LD_INT 10
15969: DOUBLE
15970: EQUAL
15971: IFTRUE 15975
15973: GO 15986
15975: POP
// def_game_rules := 1 ; 11 :
15976: LD_ADDR_EXP 57
15980: PUSH
15981: LD_INT 1
15983: ST_TO_ADDR
15984: GO 16006
15986: LD_INT 11
15988: DOUBLE
15989: EQUAL
15990: IFTRUE 15994
15992: GO 16005
15994: POP
// def_game_rules := 3 ; end ;
15995: LD_ADDR_EXP 57
15999: PUSH
16000: LD_INT 3
16002: ST_TO_ADDR
16003: GO 16006
16005: POP
// case def_game_rules of 0 :
16006: LD_EXP 57
16010: PUSH
16011: LD_INT 0
16013: DOUBLE
16014: EQUAL
16015: IFTRUE 16019
16017: GO 16024
16019: POP
// exit ; 1 :
16020: GO 18082
16022: GO 17982
16024: LD_INT 1
16026: DOUBLE
16027: EQUAL
16028: IFTRUE 16032
16030: GO 16248
16032: POP
// begin def_base_level := 2 ;
16033: LD_ADDR_EXP 58
16037: PUSH
16038: LD_INT 2
16040: ST_TO_ADDR
// def_amount_of_people := 2 ;
16041: LD_ADDR_EXP 59
16045: PUSH
16046: LD_INT 2
16048: ST_TO_ADDR
// def_skill_level := 1 ;
16049: LD_ADDR_EXP 60
16053: PUSH
16054: LD_INT 1
16056: ST_TO_ADDR
// def_starting_resources := 2 ;
16057: LD_ADDR_EXP 61
16061: PUSH
16062: LD_INT 2
16064: ST_TO_ADDR
// def_shipments_density := 1 ;
16065: LD_ADDR_EXP 62
16069: PUSH
16070: LD_INT 1
16072: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
16073: LD_ADDR_EXP 63
16077: PUSH
16078: LD_INT 0
16080: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
16081: LD_ADDR_EXP 64
16085: PUSH
16086: LD_INT 1
16088: ST_TO_ADDR
// def_shared_vision := 1 ;
16089: LD_ADDR_EXP 65
16093: PUSH
16094: LD_INT 1
16096: ST_TO_ADDR
// def_morale_flags := 3 ;
16097: LD_ADDR_EXP 66
16101: PUSH
16102: LD_INT 3
16104: ST_TO_ADDR
// def_siberite_detection := 1 ;
16105: LD_ADDR_EXP 67
16109: PUSH
16110: LD_INT 1
16112: ST_TO_ADDR
// def_people_respawning := 1 ;
16113: LD_ADDR_EXP 68
16117: PUSH
16118: LD_INT 1
16120: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
16121: LD_ADDR_EXP 69
16125: PUSH
16126: LD_INT 1
16128: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16129: LD_ADDR_EXP 70
16133: PUSH
16134: LD_INT 0
16136: ST_TO_ADDR
// def_builduptime := 2 ;
16137: LD_ADDR_EXP 71
16141: PUSH
16142: LD_INT 2
16144: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
16145: LD_ADDR_VAR 0 2
16149: PUSH
16150: EMPTY
16151: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
16152: LD_ADDR_VAR 0 3
16156: PUSH
16157: EMPTY
16158: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16159: LD_ADDR_LOC 56
16163: PUSH
16164: EMPTY
16165: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16166: LD_ADDR_LOC 57
16170: PUSH
16171: EMPTY
16172: ST_TO_ADDR
// Banned_Controls := [ ] ;
16173: LD_ADDR_LOC 58
16177: PUSH
16178: EMPTY
16179: ST_TO_ADDR
// Banned_Engines := [ ] ;
16180: LD_ADDR_LOC 59
16184: PUSH
16185: EMPTY
16186: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
16187: LD_ADDR_LOC 54
16191: PUSH
16192: LD_INT 37
16194: PUSH
16195: EMPTY
16196: LIST
16197: PUSH
16198: LD_INT 4
16200: PUSH
16201: LD_INT 5
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PUSH
16208: LD_INT 31
16210: PUSH
16211: LD_INT 32
16213: PUSH
16214: LD_INT 33
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: LIST
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: LIST
16226: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
16227: LD_ADDR_LOC 55
16231: PUSH
16232: LD_INT 2
16234: PUSH
16235: LD_INT 2
16237: PUSH
16238: LD_INT 4
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: LIST
16245: ST_TO_ADDR
// end ; 2 :
16246: GO 17982
16248: LD_INT 2
16250: DOUBLE
16251: EQUAL
16252: IFTRUE 16256
16254: GO 16465
16256: POP
// begin def_base_level := 1 ;
16257: LD_ADDR_EXP 58
16261: PUSH
16262: LD_INT 1
16264: ST_TO_ADDR
// def_amount_of_people := 2 ;
16265: LD_ADDR_EXP 59
16269: PUSH
16270: LD_INT 2
16272: ST_TO_ADDR
// def_skill_level := 3 ;
16273: LD_ADDR_EXP 60
16277: PUSH
16278: LD_INT 3
16280: ST_TO_ADDR
// def_starting_resources := 3 ;
16281: LD_ADDR_EXP 61
16285: PUSH
16286: LD_INT 3
16288: ST_TO_ADDR
// def_shipments_density := 2 ;
16289: LD_ADDR_EXP 62
16293: PUSH
16294: LD_INT 2
16296: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
16297: LD_ADDR_EXP 63
16301: PUSH
16302: LD_INT 1
16304: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
16305: LD_ADDR_EXP 64
16309: PUSH
16310: LD_INT 2
16312: ST_TO_ADDR
// def_shared_vision := 1 ;
16313: LD_ADDR_EXP 65
16317: PUSH
16318: LD_INT 1
16320: ST_TO_ADDR
// def_morale_flags := 0 ;
16321: LD_ADDR_EXP 66
16325: PUSH
16326: LD_INT 0
16328: ST_TO_ADDR
// def_siberite_detection := 1 ;
16329: LD_ADDR_EXP 67
16333: PUSH
16334: LD_INT 1
16336: ST_TO_ADDR
// def_people_respawning := 0 ;
16337: LD_ADDR_EXP 68
16341: PUSH
16342: LD_INT 0
16344: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
16345: LD_ADDR_EXP 69
16349: PUSH
16350: LD_INT 0
16352: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16353: LD_ADDR_EXP 70
16357: PUSH
16358: LD_INT 0
16360: ST_TO_ADDR
// def_builduptime := 2 ;
16361: LD_ADDR_EXP 71
16365: PUSH
16366: LD_INT 2
16368: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
16369: LD_ADDR_VAR 0 2
16373: PUSH
16374: LD_INT 1
16376: PUSH
16377: EMPTY
16378: LIST
16379: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
16380: LD_ADDR_VAR 0 3
16384: PUSH
16385: EMPTY
16386: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16387: LD_ADDR_LOC 56
16391: PUSH
16392: EMPTY
16393: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16394: LD_ADDR_LOC 57
16398: PUSH
16399: EMPTY
16400: ST_TO_ADDR
// Banned_Controls := [ ] ;
16401: LD_ADDR_LOC 58
16405: PUSH
16406: EMPTY
16407: ST_TO_ADDR
// Banned_Engines := [ ] ;
16408: LD_ADDR_LOC 59
16412: PUSH
16413: EMPTY
16414: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
16415: LD_ADDR_LOC 54
16419: PUSH
16420: LD_INT 4
16422: PUSH
16423: LD_INT 5
16425: PUSH
16426: EMPTY
16427: LIST
16428: LIST
16429: PUSH
16430: LD_INT 31
16432: PUSH
16433: LD_INT 32
16435: PUSH
16436: LD_INT 33
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: LIST
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
16448: LD_ADDR_LOC 55
16452: PUSH
16453: LD_INT 1
16455: PUSH
16456: LD_INT 2
16458: PUSH
16459: EMPTY
16460: LIST
16461: LIST
16462: ST_TO_ADDR
// end ; 3 :
16463: GO 17982
16465: LD_INT 3
16467: DOUBLE
16468: EQUAL
16469: IFTRUE 16473
16471: GO 16716
16473: POP
// begin def_base_level := 1 ;
16474: LD_ADDR_EXP 58
16478: PUSH
16479: LD_INT 1
16481: ST_TO_ADDR
// def_amount_of_people := 2 ;
16482: LD_ADDR_EXP 59
16486: PUSH
16487: LD_INT 2
16489: ST_TO_ADDR
// def_skill_level := 3 ;
16490: LD_ADDR_EXP 60
16494: PUSH
16495: LD_INT 3
16497: ST_TO_ADDR
// def_starting_resources := 3 ;
16498: LD_ADDR_EXP 61
16502: PUSH
16503: LD_INT 3
16505: ST_TO_ADDR
// def_shipments_density := 1 ;
16506: LD_ADDR_EXP 62
16510: PUSH
16511: LD_INT 1
16513: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
16514: LD_ADDR_EXP 63
16518: PUSH
16519: LD_INT 0
16521: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
16522: LD_ADDR_EXP 64
16526: PUSH
16527: LD_INT 1
16529: ST_TO_ADDR
// def_shared_vision := 1 ;
16530: LD_ADDR_EXP 65
16534: PUSH
16535: LD_INT 1
16537: ST_TO_ADDR
// def_morale_flags := 0 ;
16538: LD_ADDR_EXP 66
16542: PUSH
16543: LD_INT 0
16545: ST_TO_ADDR
// def_siberite_detection := 1 ;
16546: LD_ADDR_EXP 67
16550: PUSH
16551: LD_INT 1
16553: ST_TO_ADDR
// def_people_respawning := 0 ;
16554: LD_ADDR_EXP 68
16558: PUSH
16559: LD_INT 0
16561: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
16562: LD_ADDR_EXP 69
16566: PUSH
16567: LD_INT 2
16569: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16570: LD_ADDR_EXP 70
16574: PUSH
16575: LD_INT 0
16577: ST_TO_ADDR
// def_builduptime := 1 ;
16578: LD_ADDR_EXP 71
16582: PUSH
16583: LD_INT 1
16585: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
16586: LD_ADDR_VAR 0 2
16590: PUSH
16591: LD_INT 23
16593: PUSH
16594: EMPTY
16595: LIST
16596: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
16597: LD_ADDR_VAR 0 3
16601: PUSH
16602: LD_INT 2
16604: PUSH
16605: LD_INT 37
16607: PUSH
16608: LD_INT 32
16610: PUSH
16611: LD_INT 33
16613: PUSH
16614: LD_INT 36
16616: PUSH
16617: LD_INT 16
16619: PUSH
16620: LD_INT 23
16622: PUSH
16623: LD_INT 21
16625: PUSH
16626: LD_INT 18
16628: PUSH
16629: LD_INT 22
16631: PUSH
16632: LD_INT 20
16634: PUSH
16635: LD_INT 19
16637: PUSH
16638: LD_INT 25
16640: PUSH
16641: LD_INT 17
16643: PUSH
16644: LD_INT 24
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16664: LD_ADDR_LOC 56
16668: PUSH
16669: EMPTY
16670: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16671: LD_ADDR_LOC 57
16675: PUSH
16676: EMPTY
16677: ST_TO_ADDR
// Banned_Controls := [ ] ;
16678: LD_ADDR_LOC 58
16682: PUSH
16683: EMPTY
16684: ST_TO_ADDR
// Banned_Engines := [ ] ;
16685: LD_ADDR_LOC 59
16689: PUSH
16690: EMPTY
16691: ST_TO_ADDR
// Restricted_Builds := [ ] ;
16692: LD_ADDR_LOC 54
16696: PUSH
16697: EMPTY
16698: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
16699: LD_ADDR_LOC 55
16703: PUSH
16704: EMPTY
16705: ST_TO_ADDR
// No_Mechs := true ;
16706: LD_ADDR_EXP 72
16710: PUSH
16711: LD_INT 1
16713: ST_TO_ADDR
// end ; 4 :
16714: GO 17982
16716: LD_INT 4
16718: DOUBLE
16719: EQUAL
16720: IFTRUE 16724
16722: GO 16899
16724: POP
// begin def_base_level := 1 ;
16725: LD_ADDR_EXP 58
16729: PUSH
16730: LD_INT 1
16732: ST_TO_ADDR
// def_amount_of_people := 2 ;
16733: LD_ADDR_EXP 59
16737: PUSH
16738: LD_INT 2
16740: ST_TO_ADDR
// def_skill_level := 3 ;
16741: LD_ADDR_EXP 60
16745: PUSH
16746: LD_INT 3
16748: ST_TO_ADDR
// def_starting_resources := 3 ;
16749: LD_ADDR_EXP 61
16753: PUSH
16754: LD_INT 3
16756: ST_TO_ADDR
// def_shipments_density := 2 ;
16757: LD_ADDR_EXP 62
16761: PUSH
16762: LD_INT 2
16764: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
16765: LD_ADDR_EXP 63
16769: PUSH
16770: LD_INT 1
16772: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
16773: LD_ADDR_EXP 64
16777: PUSH
16778: LD_INT 2
16780: ST_TO_ADDR
// def_shared_vision := 1 ;
16781: LD_ADDR_EXP 65
16785: PUSH
16786: LD_INT 1
16788: ST_TO_ADDR
// def_morale_flags := 0 ;
16789: LD_ADDR_EXP 66
16793: PUSH
16794: LD_INT 0
16796: ST_TO_ADDR
// def_siberite_detection := 1 ;
16797: LD_ADDR_EXP 67
16801: PUSH
16802: LD_INT 1
16804: ST_TO_ADDR
// def_people_respawning := 0 ;
16805: LD_ADDR_EXP 68
16809: PUSH
16810: LD_INT 0
16812: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
16813: LD_ADDR_EXP 69
16817: PUSH
16818: LD_INT 0
16820: ST_TO_ADDR
// def_siberite_bomb := 1 ;
16821: LD_ADDR_EXP 70
16825: PUSH
16826: LD_INT 1
16828: ST_TO_ADDR
// def_builduptime := 3 ;
16829: LD_ADDR_EXP 71
16833: PUSH
16834: LD_INT 3
16836: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
16837: LD_ADDR_VAR 0 2
16841: PUSH
16842: LD_INT 1
16844: PUSH
16845: EMPTY
16846: LIST
16847: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
16848: LD_ADDR_VAR 0 3
16852: PUSH
16853: EMPTY
16854: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16855: LD_ADDR_LOC 56
16859: PUSH
16860: EMPTY
16861: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16862: LD_ADDR_LOC 57
16866: PUSH
16867: EMPTY
16868: ST_TO_ADDR
// Banned_Controls := [ ] ;
16869: LD_ADDR_LOC 58
16873: PUSH
16874: EMPTY
16875: ST_TO_ADDR
// Banned_Engines := [ ] ;
16876: LD_ADDR_LOC 59
16880: PUSH
16881: EMPTY
16882: ST_TO_ADDR
// Restricted_Builds := [ ] ;
16883: LD_ADDR_LOC 54
16887: PUSH
16888: EMPTY
16889: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
16890: LD_ADDR_LOC 55
16894: PUSH
16895: EMPTY
16896: ST_TO_ADDR
// end ; 5 :
16897: GO 17982
16899: LD_INT 5
16901: DOUBLE
16902: EQUAL
16903: IFTRUE 16907
16905: GO 17156
16907: POP
// begin def_base_level := 0 ;
16908: LD_ADDR_EXP 58
16912: PUSH
16913: LD_INT 0
16915: ST_TO_ADDR
// def_amount_of_people := 0 ;
16916: LD_ADDR_EXP 59
16920: PUSH
16921: LD_INT 0
16923: ST_TO_ADDR
// def_skill_level := 0 ;
16924: LD_ADDR_EXP 60
16928: PUSH
16929: LD_INT 0
16931: ST_TO_ADDR
// def_starting_resources := 0 ;
16932: LD_ADDR_EXP 61
16936: PUSH
16937: LD_INT 0
16939: ST_TO_ADDR
// def_shipments_density := 0 ;
16940: LD_ADDR_EXP 62
16944: PUSH
16945: LD_INT 0
16947: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
16948: LD_ADDR_EXP 63
16952: PUSH
16953: LD_INT 0
16955: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
16956: LD_ADDR_EXP 64
16960: PUSH
16961: LD_INT 0
16963: ST_TO_ADDR
// def_shared_vision := 1 ;
16964: LD_ADDR_EXP 65
16968: PUSH
16969: LD_INT 1
16971: ST_TO_ADDR
// def_morale_flags := 0 ;
16972: LD_ADDR_EXP 66
16976: PUSH
16977: LD_INT 0
16979: ST_TO_ADDR
// def_siberite_detection := 0 ;
16980: LD_ADDR_EXP 67
16984: PUSH
16985: LD_INT 0
16987: ST_TO_ADDR
// def_people_respawning := 1 ;
16988: LD_ADDR_EXP 68
16992: PUSH
16993: LD_INT 1
16995: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
16996: LD_ADDR_EXP 69
17000: PUSH
17001: LD_INT 1
17003: ST_TO_ADDR
// def_siberite_bomb := 0 ;
17004: LD_ADDR_EXP 70
17008: PUSH
17009: LD_INT 0
17011: ST_TO_ADDR
// def_builduptime := 0 ;
17012: LD_ADDR_EXP 71
17016: PUSH
17017: LD_INT 0
17019: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
17020: LD_ADDR_VAR 0 2
17024: PUSH
17025: LD_INT 10
17027: PUSH
17028: LD_INT 3
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
17035: LD_ADDR_VAR 0 3
17039: PUSH
17040: LD_INT 12
17042: PUSH
17043: LD_INT 11
17045: PUSH
17046: LD_INT 14
17048: PUSH
17049: LD_INT 13
17051: PUSH
17052: LD_INT 5
17054: PUSH
17055: LD_INT 24
17057: PUSH
17058: LD_INT 21
17060: PUSH
17061: LD_INT 33
17063: PUSH
17064: LD_INT 36
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
17078: LD_ADDR_LOC 56
17082: PUSH
17083: LD_INT 31
17085: PUSH
17086: EMPTY
17087: LIST
17088: ST_TO_ADDR
// Banned_Chassis := [ ] ;
17089: LD_ADDR_LOC 57
17093: PUSH
17094: EMPTY
17095: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
17096: LD_ADDR_LOC 58
17100: PUSH
17101: LD_INT 2
17103: PUSH
17104: EMPTY
17105: LIST
17106: ST_TO_ADDR
// Banned_Engines := [ ] ;
17107: LD_ADDR_LOC 59
17111: PUSH
17112: EMPTY
17113: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
17114: LD_ADDR_LOC 54
17118: PUSH
17119: LD_INT 4
17121: PUSH
17122: EMPTY
17123: LIST
17124: PUSH
17125: LD_INT 31
17127: PUSH
17128: LD_INT 32
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
17139: LD_ADDR_LOC 55
17143: PUSH
17144: LD_INT 1
17146: PUSH
17147: LD_INT 1
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: ST_TO_ADDR
// end ; 6 :
17154: GO 17982
17156: LD_INT 6
17158: DOUBLE
17159: EQUAL
17160: IFTRUE 17164
17162: GO 17367
17164: POP
// begin def_base_level := 1 ;
17165: LD_ADDR_EXP 58
17169: PUSH
17170: LD_INT 1
17172: ST_TO_ADDR
// def_amount_of_people := 2 ;
17173: LD_ADDR_EXP 59
17177: PUSH
17178: LD_INT 2
17180: ST_TO_ADDR
// def_skill_level := 3 ;
17181: LD_ADDR_EXP 60
17185: PUSH
17186: LD_INT 3
17188: ST_TO_ADDR
// def_starting_resources := 3 ;
17189: LD_ADDR_EXP 61
17193: PUSH
17194: LD_INT 3
17196: ST_TO_ADDR
// def_shipments_density := 1 ;
17197: LD_ADDR_EXP 62
17201: PUSH
17202: LD_INT 1
17204: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
17205: LD_ADDR_EXP 63
17209: PUSH
17210: LD_INT 0
17212: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
17213: LD_ADDR_EXP 64
17217: PUSH
17218: LD_INT 1
17220: ST_TO_ADDR
// def_shared_vision := 1 ;
17221: LD_ADDR_EXP 65
17225: PUSH
17226: LD_INT 1
17228: ST_TO_ADDR
// def_morale_flags := 0 ;
17229: LD_ADDR_EXP 66
17233: PUSH
17234: LD_INT 0
17236: ST_TO_ADDR
// def_siberite_detection := 1 ;
17237: LD_ADDR_EXP 67
17241: PUSH
17242: LD_INT 1
17244: ST_TO_ADDR
// def_people_respawning := 2 ;
17245: LD_ADDR_EXP 68
17249: PUSH
17250: LD_INT 2
17252: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
17253: LD_ADDR_EXP 69
17257: PUSH
17258: LD_INT 1
17260: ST_TO_ADDR
// def_siberite_bomb := 0 ;
17261: LD_ADDR_EXP 70
17265: PUSH
17266: LD_INT 0
17268: ST_TO_ADDR
// def_builduptime := 1 ;
17269: LD_ADDR_EXP 71
17273: PUSH
17274: LD_INT 1
17276: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
17277: LD_ADDR_VAR 0 2
17281: PUSH
17282: LD_INT 23
17284: PUSH
17285: EMPTY
17286: LIST
17287: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
17288: LD_ADDR_VAR 0 3
17292: PUSH
17293: LD_INT 2
17295: PUSH
17296: LD_INT 37
17298: PUSH
17299: LD_INT 31
17301: PUSH
17302: LD_INT 32
17304: PUSH
17305: LD_INT 33
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: ST_TO_ADDR
// Banned_Weapons := [ ] ;
17315: LD_ADDR_LOC 56
17319: PUSH
17320: EMPTY
17321: ST_TO_ADDR
// Banned_Chassis := [ ] ;
17322: LD_ADDR_LOC 57
17326: PUSH
17327: EMPTY
17328: ST_TO_ADDR
// Banned_Controls := [ ] ;
17329: LD_ADDR_LOC 58
17333: PUSH
17334: EMPTY
17335: ST_TO_ADDR
// Banned_Engines := [ ] ;
17336: LD_ADDR_LOC 59
17340: PUSH
17341: EMPTY
17342: ST_TO_ADDR
// Restricted_Builds := [ ] ;
17343: LD_ADDR_LOC 54
17347: PUSH
17348: EMPTY
17349: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
17350: LD_ADDR_LOC 55
17354: PUSH
17355: EMPTY
17356: ST_TO_ADDR
// No_Mechs := true ;
17357: LD_ADDR_EXP 72
17361: PUSH
17362: LD_INT 1
17364: ST_TO_ADDR
// end ; 7 :
17365: GO 17982
17367: LD_INT 7
17369: DOUBLE
17370: EQUAL
17371: IFTRUE 17375
17373: GO 17573
17375: POP
// begin def_base_level := 1 ;
17376: LD_ADDR_EXP 58
17380: PUSH
17381: LD_INT 1
17383: ST_TO_ADDR
// def_amount_of_people := 2 ;
17384: LD_ADDR_EXP 59
17388: PUSH
17389: LD_INT 2
17391: ST_TO_ADDR
// def_skill_level := 3 ;
17392: LD_ADDR_EXP 60
17396: PUSH
17397: LD_INT 3
17399: ST_TO_ADDR
// def_starting_resources := 3 ;
17400: LD_ADDR_EXP 61
17404: PUSH
17405: LD_INT 3
17407: ST_TO_ADDR
// def_shipments_density := 1 ;
17408: LD_ADDR_EXP 62
17412: PUSH
17413: LD_INT 1
17415: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
17416: LD_ADDR_EXP 63
17420: PUSH
17421: LD_INT 1
17423: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
17424: LD_ADDR_EXP 64
17428: PUSH
17429: LD_INT 2
17431: ST_TO_ADDR
// def_shared_vision := 1 ;
17432: LD_ADDR_EXP 65
17436: PUSH
17437: LD_INT 1
17439: ST_TO_ADDR
// def_morale_flags := 0 ;
17440: LD_ADDR_EXP 66
17444: PUSH
17445: LD_INT 0
17447: ST_TO_ADDR
// def_siberite_detection := 1 ;
17448: LD_ADDR_EXP 67
17452: PUSH
17453: LD_INT 1
17455: ST_TO_ADDR
// def_people_respawning := 0 ;
17456: LD_ADDR_EXP 68
17460: PUSH
17461: LD_INT 0
17463: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
17464: LD_ADDR_EXP 69
17468: PUSH
17469: LD_INT 1
17471: ST_TO_ADDR
// def_siberite_bomb := 0 ;
17472: LD_ADDR_EXP 70
17476: PUSH
17477: LD_INT 0
17479: ST_TO_ADDR
// def_builduptime := 3 ;
17480: LD_ADDR_EXP 71
17484: PUSH
17485: LD_INT 3
17487: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
17488: LD_ADDR_VAR 0 2
17492: PUSH
17493: LD_INT 23
17495: PUSH
17496: EMPTY
17497: LIST
17498: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
17499: LD_ADDR_VAR 0 3
17503: PUSH
17504: LD_INT 37
17506: PUSH
17507: EMPTY
17508: LIST
17509: ST_TO_ADDR
// Banned_Weapons := [ ] ;
17510: LD_ADDR_LOC 56
17514: PUSH
17515: EMPTY
17516: ST_TO_ADDR
// Banned_Chassis := [ ] ;
17517: LD_ADDR_LOC 57
17521: PUSH
17522: EMPTY
17523: ST_TO_ADDR
// Banned_Controls := [ ] ;
17524: LD_ADDR_LOC 58
17528: PUSH
17529: EMPTY
17530: ST_TO_ADDR
// Banned_Engines := [ ] ;
17531: LD_ADDR_LOC 59
17535: PUSH
17536: EMPTY
17537: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
17538: LD_ADDR_LOC 54
17542: PUSH
17543: LD_INT 31
17545: PUSH
17546: LD_INT 32
17548: PUSH
17549: LD_INT 33
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: LIST
17556: PUSH
17557: EMPTY
17558: LIST
17559: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
17560: LD_ADDR_LOC 55
17564: PUSH
17565: LD_INT 10
17567: PUSH
17568: EMPTY
17569: LIST
17570: ST_TO_ADDR
// end ; 8 :
17571: GO 17982
17573: LD_INT 8
17575: DOUBLE
17576: EQUAL
17577: IFTRUE 17581
17579: GO 17981
17581: POP
// begin def_base_level := 0 ;
17582: LD_ADDR_EXP 58
17586: PUSH
17587: LD_INT 0
17589: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
17590: LD_ADDR_EXP 59
17594: PUSH
17595: LD_INT 0
17597: PPUSH
17598: LD_INT 1
17600: PPUSH
17601: CALL_OW 12
17605: ST_TO_ADDR
// def_skill_level := 0 ;
17606: LD_ADDR_EXP 60
17610: PUSH
17611: LD_INT 0
17613: ST_TO_ADDR
// def_starting_resources := 2 ;
17614: LD_ADDR_EXP 61
17618: PUSH
17619: LD_INT 2
17621: ST_TO_ADDR
// def_shipments_density := 1 ;
17622: LD_ADDR_EXP 62
17626: PUSH
17627: LD_INT 1
17629: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
17630: LD_ADDR_EXP 63
17634: PUSH
17635: LD_INT 0
17637: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
17638: LD_ADDR_EXP 64
17642: PUSH
17643: LD_INT 0
17645: ST_TO_ADDR
// def_shared_vision := 1 ;
17646: LD_ADDR_EXP 65
17650: PUSH
17651: LD_INT 1
17653: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
17654: LD_ADDR_EXP 66
17658: PUSH
17659: LD_INT 0
17661: PPUSH
17662: LD_INT 2
17664: PPUSH
17665: CALL_OW 12
17669: ST_TO_ADDR
// def_siberite_detection := 0 ;
17670: LD_ADDR_EXP 67
17674: PUSH
17675: LD_INT 0
17677: ST_TO_ADDR
// def_people_respawning := 0 ;
17678: LD_ADDR_EXP 68
17682: PUSH
17683: LD_INT 0
17685: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
17686: LD_ADDR_EXP 69
17690: PUSH
17691: LD_INT 2
17693: ST_TO_ADDR
// def_siberite_bomb := 0 ;
17694: LD_ADDR_EXP 70
17698: PUSH
17699: LD_INT 0
17701: ST_TO_ADDR
// def_builduptime := 0 ;
17702: LD_ADDR_EXP 71
17706: PUSH
17707: LD_INT 0
17709: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
17710: LD_ADDR_VAR 0 2
17714: PUSH
17715: LD_INT 23
17717: PUSH
17718: LD_INT 20
17720: PUSH
17721: LD_INT 40
17723: PUSH
17724: LD_INT 47
17726: PUSH
17727: LD_INT 46
17729: PUSH
17730: LD_INT 39
17732: PUSH
17733: LD_INT 71
17735: PUSH
17736: LD_INT 34
17738: PUSH
17739: LD_INT 41
17741: PUSH
17742: LD_INT 44
17744: PUSH
17745: LD_INT 17
17747: PUSH
17748: LD_INT 16
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
17765: LD_ADDR_VAR 0 3
17769: PUSH
17770: LD_INT 37
17772: PUSH
17773: LD_INT 5
17775: PUSH
17776: LD_INT 13
17778: PUSH
17779: LD_INT 34
17781: PUSH
17782: LD_INT 12
17784: PUSH
17785: LD_INT 15
17787: PUSH
17788: LD_INT 11
17790: PUSH
17791: LD_INT 14
17793: PUSH
17794: LD_INT 29
17796: PUSH
17797: LD_INT 30
17799: PUSH
17800: LD_INT 28
17802: PUSH
17803: LD_INT 24
17805: PUSH
17806: LD_INT 25
17808: PUSH
17809: LD_INT 20
17811: PUSH
17812: LD_INT 21
17814: PUSH
17815: LD_INT 22
17817: PUSH
17818: LD_INT 36
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: ST_TO_ADDR
// Banned_Weapons := [ ] ;
17840: LD_ADDR_LOC 56
17844: PUSH
17845: EMPTY
17846: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
17847: LD_ADDR_LOC 57
17851: PUSH
17852: LD_INT 14
17854: PUSH
17855: EMPTY
17856: LIST
17857: ST_TO_ADDR
// Banned_Controls := [ ] ;
17858: LD_ADDR_LOC 58
17862: PUSH
17863: EMPTY
17864: ST_TO_ADDR
// Banned_Engines := [ ] ;
17865: LD_ADDR_LOC 59
17869: PUSH
17870: EMPTY
17871: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
17872: LD_ADDR_LOC 54
17876: PUSH
17877: LD_INT 31
17879: PUSH
17880: LD_INT 32
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: PUSH
17887: LD_INT 4
17889: PUSH
17890: EMPTY
17891: LIST
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
17897: LD_ADDR_LOC 55
17901: PUSH
17902: LD_INT 2
17904: PUSH
17905: LD_INT 1
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: ST_TO_ADDR
// for i := 1 to 8 do
17912: LD_ADDR_VAR 0 4
17916: PUSH
17917: DOUBLE
17918: LD_INT 1
17920: DEC
17921: ST_TO_ADDR
17922: LD_INT 8
17924: PUSH
17925: FOR_TO
17926: IFFALSE 17977
// if ( Side_Nations [ i ] = 3 ) then
17928: LD_EXP 19
17932: PUSH
17933: LD_VAR 0 4
17937: ARRAY
17938: PUSH
17939: LD_INT 3
17941: EQUAL
17942: IFFALSE 17975
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
17944: LD_ADDR_EXP 19
17948: PUSH
17949: LD_EXP 19
17953: PPUSH
17954: LD_VAR 0 4
17958: PPUSH
17959: LD_INT 1
17961: PPUSH
17962: LD_INT 2
17964: PPUSH
17965: CALL_OW 12
17969: PPUSH
17970: CALL_OW 1
17974: ST_TO_ADDR
17975: GO 17925
17977: POP
17978: POP
// end ; end ;
17979: GO 17982
17981: POP
// for i := 1 to 8 do
17982: LD_ADDR_VAR 0 4
17986: PUSH
17987: DOUBLE
17988: LD_INT 1
17990: DEC
17991: ST_TO_ADDR
17992: LD_INT 8
17994: PUSH
17995: FOR_TO
17996: IFFALSE 18080
// if Side_Positions [ i ] then
17998: LD_EXP 18
18002: PUSH
18003: LD_VAR 0 4
18007: ARRAY
18008: IFFALSE 18078
// begin for j in Unavailable_Techs do
18010: LD_ADDR_VAR 0 5
18014: PUSH
18015: LD_VAR 0 2
18019: PUSH
18020: FOR_IN
18021: IFFALSE 18042
// SetTech ( j , i , 0 ) ;
18023: LD_VAR 0 5
18027: PPUSH
18028: LD_VAR 0 4
18032: PPUSH
18033: LD_INT 0
18035: PPUSH
18036: CALL_OW 322
18040: GO 18020
18042: POP
18043: POP
// for j in Unavailable_Builds do
18044: LD_ADDR_VAR 0 5
18048: PUSH
18049: LD_VAR 0 3
18053: PUSH
18054: FOR_IN
18055: IFFALSE 18076
// SetRestrict ( j , i , 0 ) ;
18057: LD_VAR 0 5
18061: PPUSH
18062: LD_VAR 0 4
18066: PPUSH
18067: LD_INT 0
18069: PPUSH
18070: CALL_OW 324
18074: GO 18054
18076: POP
18077: POP
// end ;
18078: GO 17995
18080: POP
18081: POP
// end ;
18082: LD_VAR 0 1
18086: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
18087: LD_INT 0
18089: PPUSH
18090: PPUSH
18091: PPUSH
18092: PPUSH
18093: PPUSH
18094: PPUSH
18095: PPUSH
// for i := 1 to Restricted_Builds do
18096: LD_ADDR_VAR 0 2
18100: PUSH
18101: DOUBLE
18102: LD_INT 1
18104: DEC
18105: ST_TO_ADDR
18106: LD_LOC 54
18110: PUSH
18111: FOR_TO
18112: IFFALSE 18422
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
18114: LD_LOC 54
18118: PUSH
18119: LD_VAR 0 2
18123: ARRAY
18124: PUSH
18125: LD_INT 1
18127: ARRAY
18128: PUSH
18129: LD_INT 31
18131: DOUBLE
18132: EQUAL
18133: IFTRUE 18149
18135: LD_INT 32
18137: DOUBLE
18138: EQUAL
18139: IFTRUE 18149
18141: LD_INT 33
18143: DOUBLE
18144: EQUAL
18145: IFTRUE 18149
18147: GO 18160
18149: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
18150: LD_ADDR_VAR 0 6
18154: PUSH
18155: LD_STRING #Turrets
18157: ST_TO_ADDR
18158: GO 18205
18160: LD_INT 4
18162: DOUBLE
18163: EQUAL
18164: IFTRUE 18174
18166: LD_INT 5
18168: DOUBLE
18169: EQUAL
18170: IFTRUE 18174
18172: GO 18185
18174: POP
// btype := #Armouries ; b_Behemoth :
18175: LD_ADDR_VAR 0 6
18179: PUSH
18180: LD_STRING #Armouries
18182: ST_TO_ADDR
18183: GO 18205
18185: LD_INT 37
18187: DOUBLE
18188: EQUAL
18189: IFTRUE 18193
18191: GO 18204
18193: POP
// btype := #Behemoths ; end ;
18194: LD_ADDR_VAR 0 6
18198: PUSH
18199: LD_STRING #Behemoths
18201: ST_TO_ADDR
18202: GO 18205
18204: POP
// list := [ ] ;
18205: LD_ADDR_VAR 0 7
18209: PUSH
18210: EMPTY
18211: ST_TO_ADDR
// for j := 1 to 8 do
18212: LD_ADDR_VAR 0 3
18216: PUSH
18217: DOUBLE
18218: LD_INT 1
18220: DEC
18221: ST_TO_ADDR
18222: LD_INT 8
18224: PUSH
18225: FOR_TO
18226: IFFALSE 18319
// if Side_Positions [ j ] then
18228: LD_EXP 18
18232: PUSH
18233: LD_VAR 0 3
18237: ARRAY
18238: IFFALSE 18317
// begin amount := 0 ;
18240: LD_ADDR_VAR 0 5
18244: PUSH
18245: LD_INT 0
18247: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
18248: LD_ADDR_VAR 0 4
18252: PUSH
18253: LD_LOC 54
18257: PUSH
18258: LD_VAR 0 2
18262: ARRAY
18263: PUSH
18264: FOR_IN
18265: IFFALSE 18313
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
18267: LD_ADDR_VAR 0 5
18271: PUSH
18272: LD_VAR 0 5
18276: PUSH
18277: LD_INT 22
18279: PUSH
18280: LD_VAR 0 3
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: PUSH
18289: LD_INT 30
18291: PUSH
18292: LD_VAR 0 4
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PPUSH
18305: CALL_OW 69
18309: PLUS
18310: ST_TO_ADDR
18311: GO 18264
18313: POP
18314: POP
// break ;
18315: GO 18319
// end ;
18317: GO 18225
18319: POP
18320: POP
// list := [ ] ;
18321: LD_ADDR_VAR 0 7
18325: PUSH
18326: EMPTY
18327: ST_TO_ADDR
// for j := 1 to 8 do
18328: LD_ADDR_VAR 0 3
18332: PUSH
18333: DOUBLE
18334: LD_INT 1
18336: DEC
18337: ST_TO_ADDR
18338: LD_INT 8
18340: PUSH
18341: FOR_TO
18342: IFFALSE 18362
// list := list ^ amount ;
18344: LD_ADDR_VAR 0 7
18348: PUSH
18349: LD_VAR 0 7
18353: PUSH
18354: LD_VAR 0 5
18358: ADD
18359: ST_TO_ADDR
18360: GO 18341
18362: POP
18363: POP
// Already_Built := Already_Built ^ [ list ] ;
18364: LD_ADDR_LOC 60
18368: PUSH
18369: LD_LOC 60
18373: PUSH
18374: LD_VAR 0 7
18378: PUSH
18379: EMPTY
18380: LIST
18381: ADD
18382: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
18383: LD_ADDR_LOC 61
18387: PUSH
18388: LD_LOC 61
18392: PUSH
18393: LD_VAR 0 6
18397: PUSH
18398: LD_VAR 0 5
18402: PUSH
18403: LD_LOC 55
18407: PUSH
18408: LD_VAR 0 2
18412: ARRAY
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: LIST
18418: ADD
18419: ST_TO_ADDR
// end ;
18420: GO 18111
18422: POP
18423: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
18424: LD_ADDR_LOC 62
18428: PUSH
18429: LD_INT 0
18431: PUSH
18432: LD_INT 0
18434: PUSH
18435: LD_INT 0
18437: PUSH
18438: LD_INT 0
18440: PUSH
18441: LD_INT 0
18443: PUSH
18444: LD_INT 0
18446: PUSH
18447: LD_INT 0
18449: PUSH
18450: LD_INT 0
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: ST_TO_ADDR
// if Limits_Info then
18463: LD_LOC 61
18467: IFFALSE 18483
// Limits_Info := #Limits ^ Limits_Info ;
18469: LD_ADDR_LOC 61
18473: PUSH
18474: LD_STRING #Limits
18476: PUSH
18477: LD_LOC 61
18481: ADD
18482: ST_TO_ADDR
// end ;
18483: LD_VAR 0 1
18487: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
18488: LD_INT 0
18490: PPUSH
18491: PPUSH
18492: PPUSH
18493: PPUSH
// for i := 1 to Restricted_Builds do
18494: LD_ADDR_VAR 0 7
18498: PUSH
18499: DOUBLE
18500: LD_INT 1
18502: DEC
18503: ST_TO_ADDR
18504: LD_LOC 54
18508: PUSH
18509: FOR_TO
18510: IFFALSE 18933
// if BType in Restricted_Builds [ i ] then
18512: LD_VAR 0 2
18516: PUSH
18517: LD_LOC 54
18521: PUSH
18522: LD_VAR 0 7
18526: ARRAY
18527: IN
18528: IFFALSE 18931
// begin if old_side then
18530: LD_VAR 0 4
18534: IFFALSE 18660
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
18536: LD_LOC 60
18540: PUSH
18541: LD_VAR 0 7
18545: ARRAY
18546: PUSH
18547: LD_VAR 0 3
18551: ARRAY
18552: PUSH
18553: LD_VAR 0 5
18557: PLUS
18558: PUSH
18559: LD_LOC 55
18563: PUSH
18564: LD_VAR 0 7
18568: ARRAY
18569: GREATER
18570: IFFALSE 18596
// begin SetSide ( un , old_side ) ;
18572: LD_VAR 0 1
18576: PPUSH
18577: LD_VAR 0 4
18581: PPUSH
18582: CALL_OW 235
// count := 0 ;
18586: LD_ADDR_VAR 0 5
18590: PUSH
18591: LD_INT 0
18593: ST_TO_ADDR
// end else
18594: GO 18660
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
18596: LD_ADDR_LOC 60
18600: PUSH
18601: LD_LOC 60
18605: PPUSH
18606: LD_VAR 0 7
18610: PPUSH
18611: LD_LOC 60
18615: PUSH
18616: LD_VAR 0 7
18620: ARRAY
18621: PPUSH
18622: LD_VAR 0 4
18626: PPUSH
18627: LD_LOC 60
18631: PUSH
18632: LD_VAR 0 7
18636: ARRAY
18637: PUSH
18638: LD_VAR 0 4
18642: ARRAY
18643: PUSH
18644: LD_VAR 0 5
18648: MINUS
18649: PPUSH
18650: CALL_OW 1
18654: PPUSH
18655: CALL_OW 1
18659: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
18660: LD_ADDR_LOC 60
18664: PUSH
18665: LD_LOC 60
18669: PPUSH
18670: LD_VAR 0 7
18674: PPUSH
18675: LD_LOC 60
18679: PUSH
18680: LD_VAR 0 7
18684: ARRAY
18685: PPUSH
18686: LD_VAR 0 3
18690: PPUSH
18691: LD_LOC 60
18695: PUSH
18696: LD_VAR 0 7
18700: ARRAY
18701: PUSH
18702: LD_VAR 0 3
18706: ARRAY
18707: PUSH
18708: LD_VAR 0 5
18712: PLUS
18713: PPUSH
18714: CALL_OW 1
18718: PPUSH
18719: CALL_OW 1
18723: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
18724: LD_VAR 0 5
18728: PUSH
18729: LD_INT 0
18731: NONEQUAL
18732: PUSH
18733: LD_VAR 0 3
18737: PUSH
18738: LD_OWVAR 2
18742: EQUAL
18743: AND
18744: IFFALSE 18787
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
18746: LD_ADDR_LOC 61
18750: PUSH
18751: LD_LOC 61
18755: PPUSH
18756: LD_INT 3
18758: PUSH
18759: LD_VAR 0 7
18763: MUL
18764: PPUSH
18765: LD_LOC 60
18769: PUSH
18770: LD_VAR 0 7
18774: ARRAY
18775: PUSH
18776: LD_VAR 0 3
18780: ARRAY
18781: PPUSH
18782: CALL_OW 1
18786: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
18787: LD_LOC 60
18791: PUSH
18792: LD_VAR 0 7
18796: ARRAY
18797: PUSH
18798: LD_VAR 0 3
18802: ARRAY
18803: PUSH
18804: LD_LOC 55
18808: PUSH
18809: LD_VAR 0 7
18813: ARRAY
18814: GREATER
18815: IFFALSE 18842
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
18817: LD_ADDR_LOC 62
18821: PUSH
18822: LD_LOC 62
18826: PPUSH
18827: LD_VAR 0 3
18831: PPUSH
18832: LD_INT 1
18834: PPUSH
18835: CALL_OW 1
18839: ST_TO_ADDR
// end else
18840: GO 18929
// begin for j := 1 to Restricted_Builds do
18842: LD_ADDR_VAR 0 8
18846: PUSH
18847: DOUBLE
18848: LD_INT 1
18850: DEC
18851: ST_TO_ADDR
18852: LD_LOC 54
18856: PUSH
18857: FOR_TO
18858: IFFALSE 18902
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
18860: LD_LOC 60
18864: PUSH
18865: LD_VAR 0 8
18869: ARRAY
18870: PUSH
18871: LD_VAR 0 3
18875: ARRAY
18876: PUSH
18877: LD_LOC 55
18881: PUSH
18882: LD_VAR 0 8
18886: ARRAY
18887: GREATER
18888: IFFALSE 18900
// begin Is_Cheater := true ;
18890: LD_ADDR_VAR 0 9
18894: PUSH
18895: LD_INT 1
18897: ST_TO_ADDR
// break ;
18898: GO 18902
// end ;
18900: GO 18857
18902: POP
18903: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
18904: LD_ADDR_LOC 62
18908: PUSH
18909: LD_LOC 62
18913: PPUSH
18914: LD_VAR 0 3
18918: PPUSH
18919: LD_VAR 0 9
18923: PPUSH
18924: CALL_OW 1
18928: ST_TO_ADDR
// end ; break ;
18929: GO 18933
// end ;
18931: GO 18509
18933: POP
18934: POP
// end ;
18935: LD_VAR 0 6
18939: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
18940: LD_VAR 0 5
18944: PUSH
18945: LD_LOC 56
18949: IN
18950: PUSH
18951: LD_VAR 0 2
18955: PUSH
18956: LD_LOC 57
18960: IN
18961: OR
18962: PUSH
18963: LD_VAR 0 4
18967: PUSH
18968: LD_LOC 58
18972: IN
18973: OR
18974: PUSH
18975: LD_VAR 0 3
18979: PUSH
18980: LD_LOC 59
18984: IN
18985: OR
18986: IFFALSE 18997
// ComCancel ( factory ) ;
18988: LD_VAR 0 1
18992: PPUSH
18993: CALL_OW 127
// end ;
18997: PPOPN 5
18999: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
19000: LD_VAR 0 2
19004: PUSH
19005: LD_LOC 56
19009: IN
19010: IFFALSE 19021
// ComCancel ( building ) ;
19012: LD_VAR 0 1
19016: PPUSH
19017: CALL_OW 127
// end ; end_of_file
19021: PPOPN 2
19023: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
19024: LD_INT 0
19026: PPUSH
19027: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
19028: LD_ADDR_VAR 0 2
19032: PUSH
19033: LD_STRING #Multi1x1-Time
19035: PUSH
19036: LD_OWVAR 1
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
19045: LD_INT 0
19047: PUSH
19048: LD_EXP 15
19052: PUSH
19053: LD_OWVAR 1
19057: MINUS
19058: LESSEQUAL
19059: IFFALSE 19090
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
19061: LD_ADDR_VAR 0 2
19065: PUSH
19066: LD_VAR 0 2
19070: PUSH
19071: LD_STRING #allowedsibbomb
19073: PUSH
19074: LD_EXP 15
19078: PUSH
19079: LD_OWVAR 1
19083: MINUS
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: ADD
19089: ST_TO_ADDR
// if ( ExtraStrings ) then
19090: LD_EXP 73
19094: IFFALSE 19116
// AllStrings := AllStrings ^  ^ ExtraStrings ;
19096: LD_ADDR_VAR 0 2
19100: PUSH
19101: LD_VAR 0 2
19105: PUSH
19106: LD_STRING 
19108: ADD
19109: PUSH
19110: LD_EXP 73
19114: ADD
19115: ST_TO_ADDR
// if ( LimitsStrings ) then
19116: CALL 15864 0 0
19120: IFFALSE 19142
// AllStrings := AllStrings ^  ^ LimitsStrings ;
19122: LD_ADDR_VAR 0 2
19126: PUSH
19127: LD_VAR 0 2
19131: PUSH
19132: LD_STRING 
19134: ADD
19135: PUSH
19136: CALL 15864 0 0
19140: ADD
19141: ST_TO_ADDR
// Display_Strings := AllStrings ;
19142: LD_ADDR_OWVAR 47
19146: PUSH
19147: LD_VAR 0 2
19151: ST_TO_ADDR
// end ;
19152: LD_VAR 0 1
19156: RET
// every 0 0$1 do
19157: GO 19159
19159: DISABLE
// begin ShowTimer ;
19160: CALL 19024 0 0
// enable ;
19164: ENABLE
// end ; end_of_file
19165: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
19166: LD_INT 0
19168: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
19169: LD_VAR 0 1
19173: PPUSH
19174: CALL_OW 255
19178: PUSH
19179: LD_VAR 0 4
19183: EQUAL
19184: IFFALSE 19203
// begin SetAchievement ( ACH_RAD ) ;
19186: LD_STRING ACH_RAD
19188: PPUSH
19189: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
19193: LD_STRING ACH_NL
19195: PPUSH
19196: LD_INT 1
19198: PPUSH
19199: CALL_OW 564
// end end ;
19203: LD_VAR 0 5
19207: RET
// export function SA_Win ( side ) ; begin
19208: LD_INT 0
19210: PPUSH
// case side of 1 :
19211: LD_VAR 0 1
19215: PUSH
19216: LD_INT 1
19218: DOUBLE
19219: EQUAL
19220: IFTRUE 19224
19222: GO 19237
19224: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
19225: LD_STRING ACH_AH
19227: PPUSH
19228: LD_INT 1
19230: PPUSH
19231: CALL_OW 564
19235: GO 19400
19237: LD_INT 2
19239: DOUBLE
19240: EQUAL
19241: IFTRUE 19245
19243: GO 19258
19245: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
19246: LD_STRING ACH_E
19248: PPUSH
19249: LD_INT 1
19251: PPUSH
19252: CALL_OW 564
19256: GO 19400
19258: LD_INT 3
19260: DOUBLE
19261: EQUAL
19262: IFTRUE 19266
19264: GO 19279
19266: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
19267: LD_STRING ACH_OOL
19269: PPUSH
19270: LD_INT 1
19272: PPUSH
19273: CALL_OW 564
19277: GO 19400
19279: LD_INT 1
19281: PUSH
19282: LD_INT 2
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: DOUBLE
19289: EQUAL
19290: IFTRUE 19294
19292: GO 19319
19294: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
19295: LD_STRING ACH_AH
19297: PPUSH
19298: LD_REAL  5.00000000000000E-0001
19301: PPUSH
19302: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
19306: LD_STRING ACH_E
19308: PPUSH
19309: LD_REAL  5.00000000000000E-0001
19312: PPUSH
19313: CALL_OW 564
// end ; [ 2 , 3 ] :
19317: GO 19400
19319: LD_INT 2
19321: PUSH
19322: LD_INT 3
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: DOUBLE
19329: EQUAL
19330: IFTRUE 19334
19332: GO 19359
19334: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
19335: LD_STRING ACH_OOL
19337: PPUSH
19338: LD_REAL  5.00000000000000E-0001
19341: PPUSH
19342: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
19346: LD_STRING ACH_E
19348: PPUSH
19349: LD_REAL  5.00000000000000E-0001
19352: PPUSH
19353: CALL_OW 564
// end ; [ 3 , 1 ] :
19357: GO 19400
19359: LD_INT 3
19361: PUSH
19362: LD_INT 1
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: DOUBLE
19369: EQUAL
19370: IFTRUE 19374
19372: GO 19399
19374: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
19375: LD_STRING ACH_AH
19377: PPUSH
19378: LD_REAL  5.00000000000000E-0001
19381: PPUSH
19382: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
19386: LD_STRING ACH_OOL
19388: PPUSH
19389: LD_REAL  5.00000000000000E-0001
19392: PPUSH
19393: CALL_OW 564
// end ; end ;
19397: GO 19400
19399: POP
// end ; end_of_file
19400: LD_VAR 0 2
19404: RET
// export function SetMpTechs ( ) ; var side , i ; begin
19405: LD_INT 0
19407: PPUSH
19408: PPUSH
19409: PPUSH
// for side = 1 to 8 do
19410: LD_ADDR_VAR 0 2
19414: PUSH
19415: DOUBLE
19416: LD_INT 1
19418: DEC
19419: ST_TO_ADDR
19420: LD_INT 8
19422: PUSH
19423: FOR_TO
19424: IFFALSE 19545
// begin for i = 1 to 72 do
19426: LD_ADDR_VAR 0 3
19430: PUSH
19431: DOUBLE
19432: LD_INT 1
19434: DEC
19435: ST_TO_ADDR
19436: LD_INT 72
19438: PUSH
19439: FOR_TO
19440: IFFALSE 19471
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
19442: LD_VAR 0 3
19446: PPUSH
19447: LD_VAR 0 2
19451: PPUSH
19452: LD_INT 0
19454: PPUSH
19455: LD_VAR 0 3
19459: PPUSH
19460: CALL_OW 565
19464: PPUSH
19465: CALL_OW 322
19469: GO 19439
19471: POP
19472: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
19473: LD_INT 73
19475: PPUSH
19476: LD_VAR 0 2
19480: PPUSH
19481: LD_INT 0
19483: PPUSH
19484: LD_INT 25
19486: PPUSH
19487: CALL_OW 565
19491: PPUSH
19492: CALL_OW 322
// for i = 0 to 40 do
19496: LD_ADDR_VAR 0 3
19500: PUSH
19501: DOUBLE
19502: LD_INT 0
19504: DEC
19505: ST_TO_ADDR
19506: LD_INT 40
19508: PUSH
19509: FOR_TO
19510: IFFALSE 19541
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
19512: LD_VAR 0 3
19516: PPUSH
19517: LD_VAR 0 2
19521: PPUSH
19522: LD_INT 1
19524: PPUSH
19525: LD_VAR 0 3
19529: PPUSH
19530: CALL_OW 565
19534: PPUSH
19535: CALL_OW 324
19539: GO 19509
19541: POP
19542: POP
// end ;
19543: GO 19423
19545: POP
19546: POP
// end ;
19547: LD_VAR 0 1
19551: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
19552: LD_INT 0
19554: PPUSH
19555: PPUSH
19556: PPUSH
// for side = 1 to 8 do
19557: LD_ADDR_VAR 0 3
19561: PUSH
19562: DOUBLE
19563: LD_INT 1
19565: DEC
19566: ST_TO_ADDR
19567: LD_INT 8
19569: PUSH
19570: FOR_TO
19571: IFFALSE 23567
// begin for i = 1 to 73 do
19573: LD_ADDR_VAR 0 4
19577: PUSH
19578: DOUBLE
19579: LD_INT 1
19581: DEC
19582: ST_TO_ADDR
19583: LD_INT 73
19585: PUSH
19586: FOR_TO
19587: IFFALSE 19608
// SetTech ( i , side , state_disabled ) ;
19589: LD_VAR 0 4
19593: PPUSH
19594: LD_VAR 0 3
19598: PPUSH
19599: LD_INT 0
19601: PPUSH
19602: CALL_OW 322
19606: GO 19586
19608: POP
19609: POP
// for i = 0 to 40 do
19610: LD_ADDR_VAR 0 4
19614: PUSH
19615: DOUBLE
19616: LD_INT 0
19618: DEC
19619: ST_TO_ADDR
19620: LD_INT 40
19622: PUSH
19623: FOR_TO
19624: IFFALSE 19645
// SetRestrict ( i , side , false ) ;
19626: LD_VAR 0 4
19630: PPUSH
19631: LD_VAR 0 3
19635: PPUSH
19636: LD_INT 0
19638: PPUSH
19639: CALL_OW 324
19643: GO 19623
19645: POP
19646: POP
// case level of 1 :
19647: LD_VAR 0 1
19651: PUSH
19652: LD_INT 1
19654: DOUBLE
19655: EQUAL
19656: IFTRUE 19660
19658: GO 19813
19660: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19661: LD_INT 35
19663: PPUSH
19664: LD_VAR 0 3
19668: PPUSH
19669: LD_INT 1
19671: PPUSH
19672: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19676: LD_INT 45
19678: PPUSH
19679: LD_VAR 0 3
19683: PPUSH
19684: LD_INT 1
19686: PPUSH
19687: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19691: LD_INT 46
19693: PPUSH
19694: LD_VAR 0 3
19698: PPUSH
19699: LD_INT 1
19701: PPUSH
19702: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19706: LD_INT 47
19708: PPUSH
19709: LD_VAR 0 3
19713: PPUSH
19714: LD_INT 1
19716: PPUSH
19717: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
19721: LD_INT 0
19723: PPUSH
19724: LD_VAR 0 3
19728: PPUSH
19729: LD_INT 1
19731: PPUSH
19732: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
19736: LD_INT 2
19738: PPUSH
19739: LD_VAR 0 3
19743: PPUSH
19744: LD_INT 1
19746: PPUSH
19747: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
19751: LD_INT 4
19753: PPUSH
19754: LD_VAR 0 3
19758: PPUSH
19759: LD_INT 1
19761: PPUSH
19762: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
19766: LD_INT 6
19768: PPUSH
19769: LD_VAR 0 3
19773: PPUSH
19774: LD_INT 1
19776: PPUSH
19777: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
19781: LD_INT 29
19783: PPUSH
19784: LD_VAR 0 3
19788: PPUSH
19789: LD_INT 1
19791: PPUSH
19792: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
19796: LD_INT 31
19798: PPUSH
19799: LD_VAR 0 3
19803: PPUSH
19804: LD_INT 1
19806: PPUSH
19807: CALL_OW 324
// end ; 2 :
19811: GO 23565
19813: LD_INT 2
19815: DOUBLE
19816: EQUAL
19817: IFTRUE 19821
19819: GO 20019
19821: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19822: LD_INT 35
19824: PPUSH
19825: LD_VAR 0 3
19829: PPUSH
19830: LD_INT 1
19832: PPUSH
19833: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19837: LD_INT 45
19839: PPUSH
19840: LD_VAR 0 3
19844: PPUSH
19845: LD_INT 1
19847: PPUSH
19848: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19852: LD_INT 46
19854: PPUSH
19855: LD_VAR 0 3
19859: PPUSH
19860: LD_INT 1
19862: PPUSH
19863: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19867: LD_INT 47
19869: PPUSH
19870: LD_VAR 0 3
19874: PPUSH
19875: LD_INT 1
19877: PPUSH
19878: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
19882: LD_INT 1
19884: PPUSH
19885: LD_VAR 0 3
19889: PPUSH
19890: LD_INT 1
19892: PPUSH
19893: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
19897: LD_INT 2
19899: PPUSH
19900: LD_VAR 0 3
19904: PPUSH
19905: LD_INT 1
19907: PPUSH
19908: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
19912: LD_INT 11
19914: PPUSH
19915: LD_VAR 0 3
19919: PPUSH
19920: LD_INT 1
19922: PPUSH
19923: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
19927: LD_INT 0
19929: PPUSH
19930: LD_VAR 0 3
19934: PPUSH
19935: LD_INT 1
19937: PPUSH
19938: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
19942: LD_INT 2
19944: PPUSH
19945: LD_VAR 0 3
19949: PPUSH
19950: LD_INT 1
19952: PPUSH
19953: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
19957: LD_INT 4
19959: PPUSH
19960: LD_VAR 0 3
19964: PPUSH
19965: LD_INT 1
19967: PPUSH
19968: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
19972: LD_INT 6
19974: PPUSH
19975: LD_VAR 0 3
19979: PPUSH
19980: LD_INT 1
19982: PPUSH
19983: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
19987: LD_INT 29
19989: PPUSH
19990: LD_VAR 0 3
19994: PPUSH
19995: LD_INT 1
19997: PPUSH
19998: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
20002: LD_INT 31
20004: PPUSH
20005: LD_VAR 0 3
20009: PPUSH
20010: LD_INT 1
20012: PPUSH
20013: CALL_OW 324
// end ; 3 :
20017: GO 23565
20019: LD_INT 3
20021: DOUBLE
20022: EQUAL
20023: IFTRUE 20027
20025: GO 20480
20027: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
20028: LD_INT 35
20030: PPUSH
20031: LD_VAR 0 3
20035: PPUSH
20036: LD_INT 1
20038: PPUSH
20039: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
20043: LD_INT 45
20045: PPUSH
20046: LD_VAR 0 3
20050: PPUSH
20051: LD_INT 1
20053: PPUSH
20054: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
20058: LD_INT 46
20060: PPUSH
20061: LD_VAR 0 3
20065: PPUSH
20066: LD_INT 1
20068: PPUSH
20069: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
20073: LD_INT 47
20075: PPUSH
20076: LD_VAR 0 3
20080: PPUSH
20081: LD_INT 1
20083: PPUSH
20084: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
20088: LD_INT 1
20090: PPUSH
20091: LD_VAR 0 3
20095: PPUSH
20096: LD_INT 1
20098: PPUSH
20099: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
20103: LD_INT 2
20105: PPUSH
20106: LD_VAR 0 3
20110: PPUSH
20111: LD_INT 1
20113: PPUSH
20114: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
20118: LD_INT 11
20120: PPUSH
20121: LD_VAR 0 3
20125: PPUSH
20126: LD_INT 1
20128: PPUSH
20129: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
20133: LD_INT 48
20135: PPUSH
20136: LD_VAR 0 3
20140: PPUSH
20141: LD_INT 1
20143: PPUSH
20144: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
20148: LD_INT 69
20150: PPUSH
20151: LD_VAR 0 3
20155: PPUSH
20156: LD_INT 1
20158: PPUSH
20159: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
20163: LD_INT 39
20165: PPUSH
20166: LD_VAR 0 3
20170: PPUSH
20171: LD_INT 1
20173: PPUSH
20174: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
20178: LD_INT 43
20180: PPUSH
20181: LD_VAR 0 3
20185: PPUSH
20186: LD_INT 1
20188: PPUSH
20189: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
20193: LD_INT 51
20195: PPUSH
20196: LD_VAR 0 3
20200: PPUSH
20201: LD_INT 1
20203: PPUSH
20204: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
20208: LD_INT 6
20210: PPUSH
20211: LD_VAR 0 3
20215: PPUSH
20216: LD_INT 1
20218: PPUSH
20219: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
20223: LD_INT 0
20225: PPUSH
20226: LD_VAR 0 3
20230: PPUSH
20231: LD_INT 1
20233: PPUSH
20234: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
20238: LD_INT 2
20240: PPUSH
20241: LD_VAR 0 3
20245: PPUSH
20246: LD_INT 1
20248: PPUSH
20249: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
20253: LD_INT 3
20255: PPUSH
20256: LD_VAR 0 3
20260: PPUSH
20261: LD_INT 1
20263: PPUSH
20264: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
20268: LD_INT 4
20270: PPUSH
20271: LD_VAR 0 3
20275: PPUSH
20276: LD_INT 1
20278: PPUSH
20279: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
20283: LD_INT 6
20285: PPUSH
20286: LD_VAR 0 3
20290: PPUSH
20291: LD_INT 1
20293: PPUSH
20294: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
20298: LD_INT 7
20300: PPUSH
20301: LD_VAR 0 3
20305: PPUSH
20306: LD_INT 1
20308: PPUSH
20309: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
20313: LD_INT 8
20315: PPUSH
20316: LD_VAR 0 3
20320: PPUSH
20321: LD_INT 1
20323: PPUSH
20324: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
20328: LD_INT 10
20330: PPUSH
20331: LD_VAR 0 3
20335: PPUSH
20336: LD_INT 1
20338: PPUSH
20339: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
20343: LD_INT 15
20345: PPUSH
20346: LD_VAR 0 3
20350: PPUSH
20351: LD_INT 1
20353: PPUSH
20354: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
20358: LD_INT 16
20360: PPUSH
20361: LD_VAR 0 3
20365: PPUSH
20366: LD_INT 1
20368: PPUSH
20369: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
20373: LD_INT 17
20375: PPUSH
20376: LD_VAR 0 3
20380: PPUSH
20381: LD_INT 1
20383: PPUSH
20384: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
20388: LD_INT 20
20390: PPUSH
20391: LD_VAR 0 3
20395: PPUSH
20396: LD_INT 1
20398: PPUSH
20399: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
20403: LD_INT 26
20405: PPUSH
20406: LD_VAR 0 3
20410: PPUSH
20411: LD_INT 1
20413: PPUSH
20414: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
20418: LD_INT 27
20420: PPUSH
20421: LD_VAR 0 3
20425: PPUSH
20426: LD_INT 1
20428: PPUSH
20429: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
20433: LD_INT 29
20435: PPUSH
20436: LD_VAR 0 3
20440: PPUSH
20441: LD_INT 1
20443: PPUSH
20444: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
20448: LD_INT 31
20450: PPUSH
20451: LD_VAR 0 3
20455: PPUSH
20456: LD_INT 1
20458: PPUSH
20459: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
20463: LD_INT 32
20465: PPUSH
20466: LD_VAR 0 3
20470: PPUSH
20471: LD_INT 1
20473: PPUSH
20474: CALL_OW 324
// end ; 4 :
20478: GO 23565
20480: LD_INT 4
20482: DOUBLE
20483: EQUAL
20484: IFTRUE 20488
20486: GO 21436
20488: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
20489: LD_INT 35
20491: PPUSH
20492: LD_VAR 0 3
20496: PPUSH
20497: LD_INT 1
20499: PPUSH
20500: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
20504: LD_INT 45
20506: PPUSH
20507: LD_VAR 0 3
20511: PPUSH
20512: LD_INT 1
20514: PPUSH
20515: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
20519: LD_INT 46
20521: PPUSH
20522: LD_VAR 0 3
20526: PPUSH
20527: LD_INT 1
20529: PPUSH
20530: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
20534: LD_INT 47
20536: PPUSH
20537: LD_VAR 0 3
20541: PPUSH
20542: LD_INT 1
20544: PPUSH
20545: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
20549: LD_INT 1
20551: PPUSH
20552: LD_VAR 0 3
20556: PPUSH
20557: LD_INT 1
20559: PPUSH
20560: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
20564: LD_INT 2
20566: PPUSH
20567: LD_VAR 0 3
20571: PPUSH
20572: LD_INT 1
20574: PPUSH
20575: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
20579: LD_INT 11
20581: PPUSH
20582: LD_VAR 0 3
20586: PPUSH
20587: LD_INT 1
20589: PPUSH
20590: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
20594: LD_INT 20
20596: PPUSH
20597: LD_VAR 0 3
20601: PPUSH
20602: LD_INT 1
20604: PPUSH
20605: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
20609: LD_INT 48
20611: PPUSH
20612: LD_VAR 0 3
20616: PPUSH
20617: LD_INT 1
20619: PPUSH
20620: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
20624: LD_INT 49
20626: PPUSH
20627: LD_VAR 0 3
20631: PPUSH
20632: LD_INT 1
20634: PPUSH
20635: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
20639: LD_INT 69
20641: PPUSH
20642: LD_VAR 0 3
20646: PPUSH
20647: LD_INT 1
20649: PPUSH
20650: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
20654: LD_INT 39
20656: PPUSH
20657: LD_VAR 0 3
20661: PPUSH
20662: LD_INT 1
20664: PPUSH
20665: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
20669: LD_INT 34
20671: PPUSH
20672: LD_VAR 0 3
20676: PPUSH
20677: LD_INT 1
20679: PPUSH
20680: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
20684: LD_INT 42
20686: PPUSH
20687: LD_VAR 0 3
20691: PPUSH
20692: LD_INT 1
20694: PPUSH
20695: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
20699: LD_INT 44
20701: PPUSH
20702: LD_VAR 0 3
20706: PPUSH
20707: LD_INT 1
20709: PPUSH
20710: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
20714: LD_INT 41
20716: PPUSH
20717: LD_VAR 0 3
20721: PPUSH
20722: LD_INT 1
20724: PPUSH
20725: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
20729: LD_INT 43
20731: PPUSH
20732: LD_VAR 0 3
20736: PPUSH
20737: LD_INT 1
20739: PPUSH
20740: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
20744: LD_INT 70
20746: PPUSH
20747: LD_VAR 0 3
20751: PPUSH
20752: LD_INT 1
20754: PPUSH
20755: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
20759: LD_INT 51
20761: PPUSH
20762: LD_VAR 0 3
20766: PPUSH
20767: LD_INT 1
20769: PPUSH
20770: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
20774: LD_INT 52
20776: PPUSH
20777: LD_VAR 0 3
20781: PPUSH
20782: LD_INT 1
20784: PPUSH
20785: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
20789: LD_INT 6
20791: PPUSH
20792: LD_VAR 0 3
20796: PPUSH
20797: LD_INT 1
20799: PPUSH
20800: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
20804: LD_INT 15
20806: PPUSH
20807: LD_VAR 0 3
20811: PPUSH
20812: LD_INT 1
20814: PPUSH
20815: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
20819: LD_INT 7
20821: PPUSH
20822: LD_VAR 0 3
20826: PPUSH
20827: LD_INT 1
20829: PPUSH
20830: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
20834: LD_INT 12
20836: PPUSH
20837: LD_VAR 0 3
20841: PPUSH
20842: LD_INT 1
20844: PPUSH
20845: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
20849: LD_INT 18
20851: PPUSH
20852: LD_VAR 0 3
20856: PPUSH
20857: LD_INT 1
20859: PPUSH
20860: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
20864: LD_INT 60
20866: PPUSH
20867: LD_VAR 0 3
20871: PPUSH
20872: LD_INT 1
20874: PPUSH
20875: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
20879: LD_INT 9
20881: PPUSH
20882: LD_VAR 0 3
20886: PPUSH
20887: LD_INT 1
20889: PPUSH
20890: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
20894: LD_INT 30
20896: PPUSH
20897: LD_VAR 0 3
20901: PPUSH
20902: LD_INT 1
20904: PPUSH
20905: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
20909: LD_INT 37
20911: PPUSH
20912: LD_VAR 0 3
20916: PPUSH
20917: LD_INT 1
20919: PPUSH
20920: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
20924: LD_INT 5
20926: PPUSH
20927: LD_VAR 0 3
20931: PPUSH
20932: LD_INT 1
20934: PPUSH
20935: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
20939: LD_INT 66
20941: PPUSH
20942: LD_VAR 0 3
20946: PPUSH
20947: LD_INT 1
20949: PPUSH
20950: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
20954: LD_INT 21
20956: PPUSH
20957: LD_VAR 0 3
20961: PPUSH
20962: LD_INT 1
20964: PPUSH
20965: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
20969: LD_INT 22
20971: PPUSH
20972: LD_VAR 0 3
20976: PPUSH
20977: LD_INT 1
20979: PPUSH
20980: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
20984: LD_INT 54
20986: PPUSH
20987: LD_VAR 0 3
20991: PPUSH
20992: LD_INT 1
20994: PPUSH
20995: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
20999: LD_INT 0
21001: PPUSH
21002: LD_VAR 0 3
21006: PPUSH
21007: LD_INT 1
21009: PPUSH
21010: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
21014: LD_INT 1
21016: PPUSH
21017: LD_VAR 0 3
21021: PPUSH
21022: LD_INT 1
21024: PPUSH
21025: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
21029: LD_INT 2
21031: PPUSH
21032: LD_VAR 0 3
21036: PPUSH
21037: LD_INT 1
21039: PPUSH
21040: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
21044: LD_INT 3
21046: PPUSH
21047: LD_VAR 0 3
21051: PPUSH
21052: LD_INT 1
21054: PPUSH
21055: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
21059: LD_INT 4
21061: PPUSH
21062: LD_VAR 0 3
21066: PPUSH
21067: LD_INT 1
21069: PPUSH
21070: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
21074: LD_INT 5
21076: PPUSH
21077: LD_VAR 0 3
21081: PPUSH
21082: LD_INT 1
21084: PPUSH
21085: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
21089: LD_INT 6
21091: PPUSH
21092: LD_VAR 0 3
21096: PPUSH
21097: LD_INT 1
21099: PPUSH
21100: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
21104: LD_INT 7
21106: PPUSH
21107: LD_VAR 0 3
21111: PPUSH
21112: LD_INT 1
21114: PPUSH
21115: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
21119: LD_INT 8
21121: PPUSH
21122: LD_VAR 0 3
21126: PPUSH
21127: LD_INT 1
21129: PPUSH
21130: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
21134: LD_INT 10
21136: PPUSH
21137: LD_VAR 0 3
21141: PPUSH
21142: LD_INT 1
21144: PPUSH
21145: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
21149: LD_INT 11
21151: PPUSH
21152: LD_VAR 0 3
21156: PPUSH
21157: LD_INT 1
21159: PPUSH
21160: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
21164: LD_INT 12
21166: PPUSH
21167: LD_VAR 0 3
21171: PPUSH
21172: LD_INT 1
21174: PPUSH
21175: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
21179: LD_INT 13
21181: PPUSH
21182: LD_VAR 0 3
21186: PPUSH
21187: LD_INT 1
21189: PPUSH
21190: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
21194: LD_INT 14
21196: PPUSH
21197: LD_VAR 0 3
21201: PPUSH
21202: LD_INT 1
21204: PPUSH
21205: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
21209: LD_INT 15
21211: PPUSH
21212: LD_VAR 0 3
21216: PPUSH
21217: LD_INT 1
21219: PPUSH
21220: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
21224: LD_INT 16
21226: PPUSH
21227: LD_VAR 0 3
21231: PPUSH
21232: LD_INT 1
21234: PPUSH
21235: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
21239: LD_INT 17
21241: PPUSH
21242: LD_VAR 0 3
21246: PPUSH
21247: LD_INT 1
21249: PPUSH
21250: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
21254: LD_INT 19
21256: PPUSH
21257: LD_VAR 0 3
21261: PPUSH
21262: LD_INT 1
21264: PPUSH
21265: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
21269: LD_INT 20
21271: PPUSH
21272: LD_VAR 0 3
21276: PPUSH
21277: LD_INT 1
21279: PPUSH
21280: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
21284: LD_INT 21
21286: PPUSH
21287: LD_VAR 0 3
21291: PPUSH
21292: LD_INT 1
21294: PPUSH
21295: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
21299: LD_INT 23
21301: PPUSH
21302: LD_VAR 0 3
21306: PPUSH
21307: LD_INT 1
21309: PPUSH
21310: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
21314: LD_INT 26
21316: PPUSH
21317: LD_VAR 0 3
21321: PPUSH
21322: LD_INT 1
21324: PPUSH
21325: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
21329: LD_INT 27
21331: PPUSH
21332: LD_VAR 0 3
21336: PPUSH
21337: LD_INT 1
21339: PPUSH
21340: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
21344: LD_INT 28
21346: PPUSH
21347: LD_VAR 0 3
21351: PPUSH
21352: LD_INT 1
21354: PPUSH
21355: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
21359: LD_INT 29
21361: PPUSH
21362: LD_VAR 0 3
21366: PPUSH
21367: LD_INT 1
21369: PPUSH
21370: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
21374: LD_INT 30
21376: PPUSH
21377: LD_VAR 0 3
21381: PPUSH
21382: LD_INT 1
21384: PPUSH
21385: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
21389: LD_INT 31
21391: PPUSH
21392: LD_VAR 0 3
21396: PPUSH
21397: LD_INT 1
21399: PPUSH
21400: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
21404: LD_INT 32
21406: PPUSH
21407: LD_VAR 0 3
21411: PPUSH
21412: LD_INT 1
21414: PPUSH
21415: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
21419: LD_INT 36
21421: PPUSH
21422: LD_VAR 0 3
21426: PPUSH
21427: LD_INT 1
21429: PPUSH
21430: CALL_OW 324
// end ; 5 :
21434: GO 23565
21436: LD_INT 5
21438: DOUBLE
21439: EQUAL
21440: IFTRUE 21444
21442: GO 22557
21444: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
21445: LD_INT 35
21447: PPUSH
21448: LD_VAR 0 3
21452: PPUSH
21453: LD_INT 1
21455: PPUSH
21456: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
21460: LD_INT 45
21462: PPUSH
21463: LD_VAR 0 3
21467: PPUSH
21468: LD_INT 1
21470: PPUSH
21471: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
21475: LD_INT 46
21477: PPUSH
21478: LD_VAR 0 3
21482: PPUSH
21483: LD_INT 1
21485: PPUSH
21486: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
21490: LD_INT 47
21492: PPUSH
21493: LD_VAR 0 3
21497: PPUSH
21498: LD_INT 1
21500: PPUSH
21501: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
21505: LD_INT 1
21507: PPUSH
21508: LD_VAR 0 3
21512: PPUSH
21513: LD_INT 1
21515: PPUSH
21516: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
21520: LD_INT 2
21522: PPUSH
21523: LD_VAR 0 3
21527: PPUSH
21528: LD_INT 1
21530: PPUSH
21531: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
21535: LD_INT 11
21537: PPUSH
21538: LD_VAR 0 3
21542: PPUSH
21543: LD_INT 1
21545: PPUSH
21546: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
21550: LD_INT 20
21552: PPUSH
21553: LD_VAR 0 3
21557: PPUSH
21558: LD_INT 1
21560: PPUSH
21561: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
21565: LD_INT 48
21567: PPUSH
21568: LD_VAR 0 3
21572: PPUSH
21573: LD_INT 1
21575: PPUSH
21576: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
21580: LD_INT 49
21582: PPUSH
21583: LD_VAR 0 3
21587: PPUSH
21588: LD_INT 1
21590: PPUSH
21591: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
21595: LD_INT 69
21597: PPUSH
21598: LD_VAR 0 3
21602: PPUSH
21603: LD_INT 1
21605: PPUSH
21606: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
21610: LD_INT 39
21612: PPUSH
21613: LD_VAR 0 3
21617: PPUSH
21618: LD_INT 1
21620: PPUSH
21621: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
21625: LD_INT 34
21627: PPUSH
21628: LD_VAR 0 3
21632: PPUSH
21633: LD_INT 1
21635: PPUSH
21636: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
21640: LD_INT 42
21642: PPUSH
21643: LD_VAR 0 3
21647: PPUSH
21648: LD_INT 1
21650: PPUSH
21651: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
21655: LD_INT 44
21657: PPUSH
21658: LD_VAR 0 3
21662: PPUSH
21663: LD_INT 1
21665: PPUSH
21666: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
21670: LD_INT 41
21672: PPUSH
21673: LD_VAR 0 3
21677: PPUSH
21678: LD_INT 1
21680: PPUSH
21681: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
21685: LD_INT 40
21687: PPUSH
21688: LD_VAR 0 3
21692: PPUSH
21693: LD_INT 1
21695: PPUSH
21696: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
21700: LD_INT 43
21702: PPUSH
21703: LD_VAR 0 3
21707: PPUSH
21708: LD_INT 1
21710: PPUSH
21711: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
21715: LD_INT 70
21717: PPUSH
21718: LD_VAR 0 3
21722: PPUSH
21723: LD_INT 1
21725: PPUSH
21726: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
21730: LD_INT 51
21732: PPUSH
21733: LD_VAR 0 3
21737: PPUSH
21738: LD_INT 1
21740: PPUSH
21741: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
21745: LD_INT 52
21747: PPUSH
21748: LD_VAR 0 3
21752: PPUSH
21753: LD_INT 1
21755: PPUSH
21756: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
21760: LD_INT 6
21762: PPUSH
21763: LD_VAR 0 3
21767: PPUSH
21768: LD_INT 1
21770: PPUSH
21771: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
21775: LD_INT 15
21777: PPUSH
21778: LD_VAR 0 3
21782: PPUSH
21783: LD_INT 1
21785: PPUSH
21786: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
21790: LD_INT 7
21792: PPUSH
21793: LD_VAR 0 3
21797: PPUSH
21798: LD_INT 1
21800: PPUSH
21801: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
21805: LD_INT 12
21807: PPUSH
21808: LD_VAR 0 3
21812: PPUSH
21813: LD_INT 1
21815: PPUSH
21816: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
21820: LD_INT 17
21822: PPUSH
21823: LD_VAR 0 3
21827: PPUSH
21828: LD_INT 1
21830: PPUSH
21831: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
21835: LD_INT 18
21837: PPUSH
21838: LD_VAR 0 3
21842: PPUSH
21843: LD_INT 1
21845: PPUSH
21846: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
21850: LD_INT 60
21852: PPUSH
21853: LD_VAR 0 3
21857: PPUSH
21858: LD_INT 1
21860: PPUSH
21861: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
21865: LD_INT 32
21867: PPUSH
21868: LD_VAR 0 3
21872: PPUSH
21873: LD_INT 1
21875: PPUSH
21876: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
21880: LD_INT 9
21882: PPUSH
21883: LD_VAR 0 3
21887: PPUSH
21888: LD_INT 1
21890: PPUSH
21891: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
21895: LD_INT 57
21897: PPUSH
21898: LD_VAR 0 3
21902: PPUSH
21903: LD_INT 1
21905: PPUSH
21906: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
21910: LD_INT 30
21912: PPUSH
21913: LD_VAR 0 3
21917: PPUSH
21918: LD_INT 1
21920: PPUSH
21921: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
21925: LD_INT 37
21927: PPUSH
21928: LD_VAR 0 3
21932: PPUSH
21933: LD_INT 1
21935: PPUSH
21936: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
21940: LD_INT 63
21942: PPUSH
21943: LD_VAR 0 3
21947: PPUSH
21948: LD_INT 1
21950: PPUSH
21951: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
21955: LD_INT 3
21957: PPUSH
21958: LD_VAR 0 3
21962: PPUSH
21963: LD_INT 1
21965: PPUSH
21966: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
21970: LD_INT 4
21972: PPUSH
21973: LD_VAR 0 3
21977: PPUSH
21978: LD_INT 1
21980: PPUSH
21981: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
21985: LD_INT 5
21987: PPUSH
21988: LD_VAR 0 3
21992: PPUSH
21993: LD_INT 1
21995: PPUSH
21996: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
22000: LD_INT 66
22002: PPUSH
22003: LD_VAR 0 3
22007: PPUSH
22008: LD_INT 1
22010: PPUSH
22011: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
22015: LD_INT 21
22017: PPUSH
22018: LD_VAR 0 3
22022: PPUSH
22023: LD_INT 1
22025: PPUSH
22026: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
22030: LD_INT 22
22032: PPUSH
22033: LD_VAR 0 3
22037: PPUSH
22038: LD_INT 1
22040: PPUSH
22041: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
22045: LD_INT 19
22047: PPUSH
22048: LD_VAR 0 3
22052: PPUSH
22053: LD_INT 1
22055: PPUSH
22056: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
22060: LD_INT 54
22062: PPUSH
22063: LD_VAR 0 3
22067: PPUSH
22068: LD_INT 1
22070: PPUSH
22071: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
22075: LD_INT 55
22077: PPUSH
22078: LD_VAR 0 3
22082: PPUSH
22083: LD_INT 1
22085: PPUSH
22086: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22090: LD_INT 0
22092: PPUSH
22093: LD_VAR 0 3
22097: PPUSH
22098: LD_INT 1
22100: PPUSH
22101: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
22105: LD_INT 1
22107: PPUSH
22108: LD_VAR 0 3
22112: PPUSH
22113: LD_INT 1
22115: PPUSH
22116: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22120: LD_INT 2
22122: PPUSH
22123: LD_VAR 0 3
22127: PPUSH
22128: LD_INT 1
22130: PPUSH
22131: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
22135: LD_INT 3
22137: PPUSH
22138: LD_VAR 0 3
22142: PPUSH
22143: LD_INT 1
22145: PPUSH
22146: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22150: LD_INT 4
22152: PPUSH
22153: LD_VAR 0 3
22157: PPUSH
22158: LD_INT 1
22160: PPUSH
22161: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
22165: LD_INT 5
22167: PPUSH
22168: LD_VAR 0 3
22172: PPUSH
22173: LD_INT 1
22175: PPUSH
22176: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22180: LD_INT 6
22182: PPUSH
22183: LD_VAR 0 3
22187: PPUSH
22188: LD_INT 1
22190: PPUSH
22191: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
22195: LD_INT 7
22197: PPUSH
22198: LD_VAR 0 3
22202: PPUSH
22203: LD_INT 1
22205: PPUSH
22206: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
22210: LD_INT 8
22212: PPUSH
22213: LD_VAR 0 3
22217: PPUSH
22218: LD_INT 1
22220: PPUSH
22221: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
22225: LD_INT 10
22227: PPUSH
22228: LD_VAR 0 3
22232: PPUSH
22233: LD_INT 1
22235: PPUSH
22236: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
22240: LD_INT 11
22242: PPUSH
22243: LD_VAR 0 3
22247: PPUSH
22248: LD_INT 1
22250: PPUSH
22251: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
22255: LD_INT 12
22257: PPUSH
22258: LD_VAR 0 3
22262: PPUSH
22263: LD_INT 1
22265: PPUSH
22266: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
22270: LD_INT 13
22272: PPUSH
22273: LD_VAR 0 3
22277: PPUSH
22278: LD_INT 1
22280: PPUSH
22281: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
22285: LD_INT 14
22287: PPUSH
22288: LD_VAR 0 3
22292: PPUSH
22293: LD_INT 1
22295: PPUSH
22296: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
22300: LD_INT 15
22302: PPUSH
22303: LD_VAR 0 3
22307: PPUSH
22308: LD_INT 1
22310: PPUSH
22311: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
22315: LD_INT 16
22317: PPUSH
22318: LD_VAR 0 3
22322: PPUSH
22323: LD_INT 1
22325: PPUSH
22326: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
22330: LD_INT 17
22332: PPUSH
22333: LD_VAR 0 3
22337: PPUSH
22338: LD_INT 1
22340: PPUSH
22341: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
22345: LD_INT 18
22347: PPUSH
22348: LD_VAR 0 3
22352: PPUSH
22353: LD_INT 1
22355: PPUSH
22356: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
22360: LD_INT 19
22362: PPUSH
22363: LD_VAR 0 3
22367: PPUSH
22368: LD_INT 1
22370: PPUSH
22371: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
22375: LD_INT 20
22377: PPUSH
22378: LD_VAR 0 3
22382: PPUSH
22383: LD_INT 1
22385: PPUSH
22386: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
22390: LD_INT 21
22392: PPUSH
22393: LD_VAR 0 3
22397: PPUSH
22398: LD_INT 1
22400: PPUSH
22401: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
22405: LD_INT 23
22407: PPUSH
22408: LD_VAR 0 3
22412: PPUSH
22413: LD_INT 1
22415: PPUSH
22416: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
22420: LD_INT 26
22422: PPUSH
22423: LD_VAR 0 3
22427: PPUSH
22428: LD_INT 1
22430: PPUSH
22431: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
22435: LD_INT 27
22437: PPUSH
22438: LD_VAR 0 3
22442: PPUSH
22443: LD_INT 1
22445: PPUSH
22446: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
22450: LD_INT 28
22452: PPUSH
22453: LD_VAR 0 3
22457: PPUSH
22458: LD_INT 1
22460: PPUSH
22461: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22465: LD_INT 29
22467: PPUSH
22468: LD_VAR 0 3
22472: PPUSH
22473: LD_INT 1
22475: PPUSH
22476: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
22480: LD_INT 30
22482: PPUSH
22483: LD_VAR 0 3
22487: PPUSH
22488: LD_INT 1
22490: PPUSH
22491: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22495: LD_INT 31
22497: PPUSH
22498: LD_VAR 0 3
22502: PPUSH
22503: LD_INT 1
22505: PPUSH
22506: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
22510: LD_INT 32
22512: PPUSH
22513: LD_VAR 0 3
22517: PPUSH
22518: LD_INT 1
22520: PPUSH
22521: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
22525: LD_INT 33
22527: PPUSH
22528: LD_VAR 0 3
22532: PPUSH
22533: LD_INT 1
22535: PPUSH
22536: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
22540: LD_INT 36
22542: PPUSH
22543: LD_VAR 0 3
22547: PPUSH
22548: LD_INT 1
22550: PPUSH
22551: CALL_OW 324
// end ; 6 :
22555: GO 23565
22557: LD_INT 6
22559: DOUBLE
22560: EQUAL
22561: IFTRUE 22565
22563: GO 23490
22565: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22566: LD_INT 35
22568: PPUSH
22569: LD_VAR 0 3
22573: PPUSH
22574: LD_INT 1
22576: PPUSH
22577: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22581: LD_INT 45
22583: PPUSH
22584: LD_VAR 0 3
22588: PPUSH
22589: LD_INT 1
22591: PPUSH
22592: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22596: LD_INT 46
22598: PPUSH
22599: LD_VAR 0 3
22603: PPUSH
22604: LD_INT 1
22606: PPUSH
22607: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22611: LD_INT 47
22613: PPUSH
22614: LD_VAR 0 3
22618: PPUSH
22619: LD_INT 1
22621: PPUSH
22622: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22626: LD_INT 1
22628: PPUSH
22629: LD_VAR 0 3
22633: PPUSH
22634: LD_INT 1
22636: PPUSH
22637: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22641: LD_INT 2
22643: PPUSH
22644: LD_VAR 0 3
22648: PPUSH
22649: LD_INT 1
22651: PPUSH
22652: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22656: LD_INT 11
22658: PPUSH
22659: LD_VAR 0 3
22663: PPUSH
22664: LD_INT 1
22666: PPUSH
22667: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
22671: LD_INT 20
22673: PPUSH
22674: LD_VAR 0 3
22678: PPUSH
22679: LD_INT 1
22681: PPUSH
22682: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
22686: LD_INT 48
22688: PPUSH
22689: LD_VAR 0 3
22693: PPUSH
22694: LD_INT 1
22696: PPUSH
22697: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
22701: LD_INT 49
22703: PPUSH
22704: LD_VAR 0 3
22708: PPUSH
22709: LD_INT 1
22711: PPUSH
22712: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
22716: LD_INT 50
22718: PPUSH
22719: LD_VAR 0 3
22723: PPUSH
22724: LD_INT 1
22726: PPUSH
22727: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
22731: LD_INT 69
22733: PPUSH
22734: LD_VAR 0 3
22738: PPUSH
22739: LD_INT 1
22741: PPUSH
22742: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
22746: LD_INT 39
22748: PPUSH
22749: LD_VAR 0 3
22753: PPUSH
22754: LD_INT 1
22756: PPUSH
22757: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
22761: LD_INT 34
22763: PPUSH
22764: LD_VAR 0 3
22768: PPUSH
22769: LD_INT 1
22771: PPUSH
22772: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
22776: LD_INT 42
22778: PPUSH
22779: LD_VAR 0 3
22783: PPUSH
22784: LD_INT 1
22786: PPUSH
22787: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
22791: LD_INT 44
22793: PPUSH
22794: LD_VAR 0 3
22798: PPUSH
22799: LD_INT 1
22801: PPUSH
22802: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
22806: LD_INT 41
22808: PPUSH
22809: LD_VAR 0 3
22813: PPUSH
22814: LD_INT 1
22816: PPUSH
22817: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
22821: LD_INT 13
22823: PPUSH
22824: LD_VAR 0 3
22828: PPUSH
22829: LD_INT 1
22831: PPUSH
22832: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
22836: LD_INT 40
22838: PPUSH
22839: LD_VAR 0 3
22843: PPUSH
22844: LD_INT 1
22846: PPUSH
22847: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
22851: LD_INT 43
22853: PPUSH
22854: LD_VAR 0 3
22858: PPUSH
22859: LD_INT 1
22861: PPUSH
22862: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
22866: LD_INT 70
22868: PPUSH
22869: LD_VAR 0 3
22873: PPUSH
22874: LD_INT 1
22876: PPUSH
22877: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
22881: LD_INT 23
22883: PPUSH
22884: LD_VAR 0 3
22888: PPUSH
22889: LD_INT 1
22891: PPUSH
22892: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
22896: LD_INT 51
22898: PPUSH
22899: LD_VAR 0 3
22903: PPUSH
22904: LD_INT 1
22906: PPUSH
22907: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
22911: LD_INT 52
22913: PPUSH
22914: LD_VAR 0 3
22918: PPUSH
22919: LD_INT 1
22921: PPUSH
22922: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
22926: LD_INT 6
22928: PPUSH
22929: LD_VAR 0 3
22933: PPUSH
22934: LD_INT 1
22936: PPUSH
22937: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
22941: LD_INT 15
22943: PPUSH
22944: LD_VAR 0 3
22948: PPUSH
22949: LD_INT 1
22951: PPUSH
22952: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
22956: LD_INT 7
22958: PPUSH
22959: LD_VAR 0 3
22963: PPUSH
22964: LD_INT 1
22966: PPUSH
22967: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
22971: LD_INT 12
22973: PPUSH
22974: LD_VAR 0 3
22978: PPUSH
22979: LD_INT 1
22981: PPUSH
22982: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
22986: LD_INT 10
22988: PPUSH
22989: LD_VAR 0 3
22993: PPUSH
22994: LD_INT 1
22996: PPUSH
22997: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
23001: LD_INT 17
23003: PPUSH
23004: LD_VAR 0 3
23008: PPUSH
23009: LD_INT 1
23011: PPUSH
23012: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
23016: LD_INT 18
23018: PPUSH
23019: LD_VAR 0 3
23023: PPUSH
23024: LD_INT 1
23026: PPUSH
23027: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
23031: LD_INT 60
23033: PPUSH
23034: LD_VAR 0 3
23038: PPUSH
23039: LD_INT 1
23041: PPUSH
23042: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
23046: LD_INT 61
23048: PPUSH
23049: LD_VAR 0 3
23053: PPUSH
23054: LD_INT 1
23056: PPUSH
23057: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
23061: LD_INT 32
23063: PPUSH
23064: LD_VAR 0 3
23068: PPUSH
23069: LD_INT 1
23071: PPUSH
23072: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
23076: LD_INT 27
23078: PPUSH
23079: LD_VAR 0 3
23083: PPUSH
23084: LD_INT 1
23086: PPUSH
23087: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
23091: LD_INT 36
23093: PPUSH
23094: LD_VAR 0 3
23098: PPUSH
23099: LD_INT 1
23101: PPUSH
23102: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
23106: LD_INT 33
23108: PPUSH
23109: LD_VAR 0 3
23113: PPUSH
23114: LD_INT 1
23116: PPUSH
23117: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
23121: LD_INT 9
23123: PPUSH
23124: LD_VAR 0 3
23128: PPUSH
23129: LD_INT 1
23131: PPUSH
23132: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
23136: LD_INT 38
23138: PPUSH
23139: LD_VAR 0 3
23143: PPUSH
23144: LD_INT 1
23146: PPUSH
23147: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
23151: LD_INT 57
23153: PPUSH
23154: LD_VAR 0 3
23158: PPUSH
23159: LD_INT 1
23161: PPUSH
23162: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
23166: LD_INT 58
23168: PPUSH
23169: LD_VAR 0 3
23173: PPUSH
23174: LD_INT 1
23176: PPUSH
23177: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
23181: LD_INT 28
23183: PPUSH
23184: LD_VAR 0 3
23188: PPUSH
23189: LD_INT 1
23191: PPUSH
23192: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
23196: LD_INT 29
23198: PPUSH
23199: LD_VAR 0 3
23203: PPUSH
23204: LD_INT 1
23206: PPUSH
23207: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
23211: LD_INT 30
23213: PPUSH
23214: LD_VAR 0 3
23218: PPUSH
23219: LD_INT 1
23221: PPUSH
23222: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
23226: LD_INT 37
23228: PPUSH
23229: LD_VAR 0 3
23233: PPUSH
23234: LD_INT 1
23236: PPUSH
23237: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
23241: LD_INT 63
23243: PPUSH
23244: LD_VAR 0 3
23248: PPUSH
23249: LD_INT 1
23251: PPUSH
23252: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
23256: LD_INT 64
23258: PPUSH
23259: LD_VAR 0 3
23263: PPUSH
23264: LD_INT 1
23266: PPUSH
23267: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
23271: LD_INT 3
23273: PPUSH
23274: LD_VAR 0 3
23278: PPUSH
23279: LD_INT 1
23281: PPUSH
23282: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
23286: LD_INT 4
23288: PPUSH
23289: LD_VAR 0 3
23293: PPUSH
23294: LD_INT 1
23296: PPUSH
23297: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
23301: LD_INT 5
23303: PPUSH
23304: LD_VAR 0 3
23308: PPUSH
23309: LD_INT 1
23311: PPUSH
23312: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
23316: LD_INT 8
23318: PPUSH
23319: LD_VAR 0 3
23323: PPUSH
23324: LD_INT 1
23326: PPUSH
23327: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
23331: LD_INT 66
23333: PPUSH
23334: LD_VAR 0 3
23338: PPUSH
23339: LD_INT 1
23341: PPUSH
23342: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
23346: LD_INT 67
23348: PPUSH
23349: LD_VAR 0 3
23353: PPUSH
23354: LD_INT 1
23356: PPUSH
23357: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
23361: LD_INT 21
23363: PPUSH
23364: LD_VAR 0 3
23368: PPUSH
23369: LD_INT 1
23371: PPUSH
23372: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
23376: LD_INT 22
23378: PPUSH
23379: LD_VAR 0 3
23383: PPUSH
23384: LD_INT 1
23386: PPUSH
23387: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
23391: LD_INT 19
23393: PPUSH
23394: LD_VAR 0 3
23398: PPUSH
23399: LD_INT 1
23401: PPUSH
23402: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
23406: LD_INT 26
23408: PPUSH
23409: LD_VAR 0 3
23413: PPUSH
23414: LD_INT 1
23416: PPUSH
23417: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
23421: LD_INT 54
23423: PPUSH
23424: LD_VAR 0 3
23428: PPUSH
23429: LD_INT 1
23431: PPUSH
23432: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
23436: LD_INT 55
23438: PPUSH
23439: LD_VAR 0 3
23443: PPUSH
23444: LD_INT 1
23446: PPUSH
23447: CALL_OW 322
// for i = 0 to 39 do
23451: LD_ADDR_VAR 0 4
23455: PUSH
23456: DOUBLE
23457: LD_INT 0
23459: DEC
23460: ST_TO_ADDR
23461: LD_INT 39
23463: PUSH
23464: FOR_TO
23465: IFFALSE 23486
// SetRestrict ( i , side , true ) ;
23467: LD_VAR 0 4
23471: PPUSH
23472: LD_VAR 0 3
23476: PPUSH
23477: LD_INT 1
23479: PPUSH
23480: CALL_OW 324
23484: GO 23464
23486: POP
23487: POP
// end ; else
23488: GO 23565
23490: POP
// begin for i = 1 to 73 do
23491: LD_ADDR_VAR 0 4
23495: PUSH
23496: DOUBLE
23497: LD_INT 1
23499: DEC
23500: ST_TO_ADDR
23501: LD_INT 73
23503: PUSH
23504: FOR_TO
23505: IFFALSE 23526
// SetTech ( i , side , state_enabled ) ;
23507: LD_VAR 0 4
23511: PPUSH
23512: LD_VAR 0 3
23516: PPUSH
23517: LD_INT 1
23519: PPUSH
23520: CALL_OW 322
23524: GO 23504
23526: POP
23527: POP
// for i = 0 to 39 do
23528: LD_ADDR_VAR 0 4
23532: PUSH
23533: DOUBLE
23534: LD_INT 0
23536: DEC
23537: ST_TO_ADDR
23538: LD_INT 39
23540: PUSH
23541: FOR_TO
23542: IFFALSE 23563
// SetRestrict ( i , side , true ) ;
23544: LD_VAR 0 4
23548: PPUSH
23549: LD_VAR 0 3
23553: PPUSH
23554: LD_INT 1
23556: PPUSH
23557: CALL_OW 324
23561: GO 23541
23563: POP
23564: POP
// end ; end ; end ;
23565: GO 19570
23567: POP
23568: POP
// end ; end_of_file
23569: LD_VAR 0 2
23573: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
23574: LD_INT 0
23576: PPUSH
23577: PPUSH
23578: PPUSH
23579: PPUSH
23580: PPUSH
23581: PPUSH
23582: PPUSH
23583: PPUSH
23584: PPUSH
// for i := 1 to 8 do
23585: LD_ADDR_VAR 0 2
23589: PUSH
23590: DOUBLE
23591: LD_INT 1
23593: DEC
23594: ST_TO_ADDR
23595: LD_INT 8
23597: PUSH
23598: FOR_TO
23599: IFFALSE 23983
// begin if Side_Positions [ i ] then
23601: LD_EXP 18
23605: PUSH
23606: LD_VAR 0 2
23610: ARRAY
23611: IFFALSE 23981
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
23613: LD_ADDR_VAR 0 7
23617: PUSH
23618: LD_INT 22
23620: PUSH
23621: LD_VAR 0 2
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: PUSH
23630: LD_INT 21
23632: PUSH
23633: LD_INT 1
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: PPUSH
23644: CALL_OW 69
23648: PUSH
23649: LD_INT 0
23651: PLUS
23652: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23653: LD_ADDR_VAR 0 9
23657: PUSH
23658: LD_INT 22
23660: PUSH
23661: LD_VAR 0 2
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: LD_INT 2
23672: PUSH
23673: LD_INT 30
23675: PUSH
23676: LD_INT 0
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: PUSH
23683: LD_INT 30
23685: PUSH
23686: LD_INT 1
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: LIST
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: PPUSH
23702: CALL_OW 69
23706: ST_TO_ADDR
// crates := 0 ;
23707: LD_ADDR_VAR 0 4
23711: PUSH
23712: LD_INT 0
23714: ST_TO_ADDR
// oil := 0 ;
23715: LD_ADDR_VAR 0 5
23719: PUSH
23720: LD_INT 0
23722: ST_TO_ADDR
// sib := 0 ;
23723: LD_ADDR_VAR 0 6
23727: PUSH
23728: LD_INT 0
23730: ST_TO_ADDR
// if bases then
23731: LD_VAR 0 9
23735: IFFALSE 23841
// begin for j in bases do
23737: LD_ADDR_VAR 0 3
23741: PUSH
23742: LD_VAR 0 9
23746: PUSH
23747: FOR_IN
23748: IFFALSE 23839
// begin base := GetBase ( j ) ;
23750: LD_ADDR_VAR 0 8
23754: PUSH
23755: LD_VAR 0 3
23759: PPUSH
23760: CALL_OW 274
23764: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
23765: LD_ADDR_VAR 0 4
23769: PUSH
23770: LD_VAR 0 4
23774: PUSH
23775: LD_VAR 0 8
23779: PPUSH
23780: LD_INT 1
23782: PPUSH
23783: CALL_OW 275
23787: PLUS
23788: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
23789: LD_ADDR_VAR 0 5
23793: PUSH
23794: LD_VAR 0 5
23798: PUSH
23799: LD_VAR 0 8
23803: PPUSH
23804: LD_INT 2
23806: PPUSH
23807: CALL_OW 275
23811: PLUS
23812: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
23813: LD_ADDR_VAR 0 6
23817: PUSH
23818: LD_VAR 0 6
23822: PUSH
23823: LD_VAR 0 8
23827: PPUSH
23828: LD_INT 3
23830: PPUSH
23831: CALL_OW 275
23835: PLUS
23836: ST_TO_ADDR
// end ;
23837: GO 23747
23839: POP
23840: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
23841: LD_STRING setSpecText(
23843: PUSH
23844: LD_VAR 0 2
23848: STR
23849: PUSH
23850: LD_STRING ,
23852: STR
23853: PUSH
23854: LD_INT 2
23856: STR
23857: PUSH
23858: LD_STRING ,
23860: STR
23861: PUSH
23862: LD_VAR 0 4
23866: STR
23867: PUSH
23868: LD_STRING )
23870: STR
23871: PPUSH
23872: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
23876: LD_STRING setSpecText(
23878: PUSH
23879: LD_VAR 0 2
23883: STR
23884: PUSH
23885: LD_STRING ,
23887: STR
23888: PUSH
23889: LD_INT 3
23891: STR
23892: PUSH
23893: LD_STRING ,
23895: STR
23896: PUSH
23897: LD_VAR 0 5
23901: STR
23902: PUSH
23903: LD_STRING )
23905: STR
23906: PPUSH
23907: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
23911: LD_STRING setSpecText(
23913: PUSH
23914: LD_VAR 0 2
23918: STR
23919: PUSH
23920: LD_STRING ,
23922: STR
23923: PUSH
23924: LD_INT 4
23926: STR
23927: PUSH
23928: LD_STRING ,
23930: STR
23931: PUSH
23932: LD_VAR 0 6
23936: STR
23937: PUSH
23938: LD_STRING )
23940: STR
23941: PPUSH
23942: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
23946: LD_STRING setSpecText(
23948: PUSH
23949: LD_VAR 0 2
23953: STR
23954: PUSH
23955: LD_STRING ,
23957: STR
23958: PUSH
23959: LD_INT 5
23961: STR
23962: PUSH
23963: LD_STRING ,
23965: STR
23966: PUSH
23967: LD_VAR 0 7
23971: STR
23972: PUSH
23973: LD_STRING )
23975: STR
23976: PPUSH
23977: CALL_OW 559
// end ; end ;
23981: GO 23598
23983: POP
23984: POP
// end ;
23985: LD_VAR 0 1
23989: RET
// every 0 0$1 do
23990: GO 23992
23992: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
23993: LD_STRING setSpecLogoNumber(
23995: PUSH
23996: LD_INT 2
23998: STR
23999: PUSH
24000: LD_STRING ,
24002: STR
24003: PUSH
24004: LD_INT 1
24006: STR
24007: PUSH
24008: LD_STRING )
24010: STR
24011: PPUSH
24012: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
24016: LD_STRING setSpecLogoNumber(
24018: PUSH
24019: LD_INT 3
24021: STR
24022: PUSH
24023: LD_STRING ,
24025: STR
24026: PUSH
24027: LD_INT 2
24029: STR
24030: PUSH
24031: LD_STRING )
24033: STR
24034: PPUSH
24035: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
24039: LD_STRING setSpecLogoNumber(
24041: PUSH
24042: LD_INT 4
24044: STR
24045: PUSH
24046: LD_STRING ,
24048: STR
24049: PUSH
24050: LD_INT 3
24052: STR
24053: PUSH
24054: LD_STRING )
24056: STR
24057: PPUSH
24058: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
24062: LD_STRING setSpecLogoNumber(
24064: PUSH
24065: LD_INT 5
24067: STR
24068: PUSH
24069: LD_STRING ,
24071: STR
24072: PUSH
24073: LD_INT 4
24075: STR
24076: PUSH
24077: LD_STRING )
24079: STR
24080: PPUSH
24081: CALL_OW 559
// end ;
24085: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
24086: LD_INT 2
24088: PUSH
24089: LD_INT 30
24091: PUSH
24092: LD_INT 0
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PUSH
24099: LD_INT 30
24101: PUSH
24102: LD_INT 1
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: LIST
24113: PPUSH
24114: CALL_OW 69
24118: IFFALSE 24128
24120: GO 24122
24122: DISABLE
// begin enable ;
24123: ENABLE
// UpdateSpectatorBar ;
24124: CALL 23574 0 0
// end ;
24128: END
