// export def_base_size , def_west_nations , def_east_nations ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , respawning_time_min , respawning_time_max , siberite_bomb_Delay ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Position_Nations ; export depot_def , breastworks_def , labs_def , factory_def , start_def , extra_oil_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function prepare_deposits ; var list , un , deposits ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
// list := GetListOfResourcesInArea ( west_side ) ^ GetListOfResourcesInArea ( east_side ) ;
   6: LD_ADDR_VAR 0 2
  10: PUSH
  11: LD_INT 8
  13: PPUSH
  14: CALL_OW 442
  18: PUSH
  19: LD_INT 9
  21: PPUSH
  22: CALL_OW 442
  26: ADD
  27: ST_TO_ADDR
// for un = 1 to ( list div 3 ) do
  28: LD_ADDR_VAR 0 3
  32: PUSH
  33: DOUBLE
  34: LD_INT 1
  36: DEC
  37: ST_TO_ADDR
  38: LD_VAR 0 2
  42: PUSH
  43: LD_INT 3
  45: DIV
  46: PUSH
  47: FOR_TO
  48: IFFALSE 94
// RemoveDepositXY ( list [ un * 3 - 2 ] , list [ un * 3 - 1 ] ) ;
  50: LD_VAR 0 2
  54: PUSH
  55: LD_VAR 0 3
  59: PUSH
  60: LD_INT 3
  62: MUL
  63: PUSH
  64: LD_INT 2
  66: MINUS
  67: ARRAY
  68: PPUSH
  69: LD_VAR 0 2
  73: PUSH
  74: LD_VAR 0 3
  78: PUSH
  79: LD_INT 3
  81: MUL
  82: PUSH
  83: LD_INT 1
  85: MINUS
  86: ARRAY
  87: PPUSH
  88: CALL_OW 63
  92: GO 47
  94: POP
  95: POP
// deposits := [ [ 40 , 49 , mat_oil ] , [ 40 , 68 , mat_oil ] , [ 9 , 3 , mat_siberit ] , [ 61 , 116 , mat_siberit ] , [ 177 , 46 , mat_oil ] , [ 185 , 71 , mat_oil ] , [ 157 , 3 , mat_siberit ] , [ 213 , 116 , mat_siberit ] ] ;
  96: LD_ADDR_VAR 0 4
 100: PUSH
 101: LD_INT 40
 103: PUSH
 104: LD_INT 49
 106: PUSH
 107: LD_INT 2
 109: PUSH
 110: EMPTY
 111: LIST
 112: LIST
 113: LIST
 114: PUSH
 115: LD_INT 40
 117: PUSH
 118: LD_INT 68
 120: PUSH
 121: LD_INT 2
 123: PUSH
 124: EMPTY
 125: LIST
 126: LIST
 127: LIST
 128: PUSH
 129: LD_INT 9
 131: PUSH
 132: LD_INT 3
 134: PUSH
 135: LD_INT 3
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: LIST
 142: PUSH
 143: LD_INT 61
 145: PUSH
 146: LD_INT 116
 148: PUSH
 149: LD_INT 3
 151: PUSH
 152: EMPTY
 153: LIST
 154: LIST
 155: LIST
 156: PUSH
 157: LD_INT 177
 159: PUSH
 160: LD_INT 46
 162: PUSH
 163: LD_INT 2
 165: PUSH
 166: EMPTY
 167: LIST
 168: LIST
 169: LIST
 170: PUSH
 171: LD_INT 185
 173: PUSH
 174: LD_INT 71
 176: PUSH
 177: LD_INT 2
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: LIST
 184: PUSH
 185: LD_INT 157
 187: PUSH
 188: LD_INT 3
 190: PUSH
 191: LD_INT 3
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: PUSH
 199: LD_INT 213
 201: PUSH
 202: LD_INT 116
 204: PUSH
 205: LD_INT 3
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: PUSH
 213: EMPTY
 214: LIST
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: ST_TO_ADDR
// for un in deposits do
 223: LD_ADDR_VAR 0 3
 227: PUSH
 228: LD_VAR 0 4
 232: PUSH
 233: FOR_IN
 234: IFFALSE 269
// CreateDepositXY ( un [ 1 ] , un [ 2 ] , un [ 3 ] ) ;
 236: LD_VAR 0 3
 240: PUSH
 241: LD_INT 1
 243: ARRAY
 244: PPUSH
 245: LD_VAR 0 3
 249: PUSH
 250: LD_INT 2
 252: ARRAY
 253: PPUSH
 254: LD_VAR 0 3
 258: PUSH
 259: LD_INT 3
 261: ARRAY
 262: PPUSH
 263: CALL_OW 62
 267: GO 233
 269: POP
 270: POP
// end ;
 271: LD_VAR 0 1
 275: RET
// function init_map ; var i ; begin
 276: LD_INT 0
 278: PPUSH
 279: PPUSH
// prepare_deposits ;
 280: CALL 0 0 0
// extra_oil_deposits_locations := [ [ 29 , 3 ] , [ 82 , 115 ] , [ 134 , 3 ] , [ 192 , 116 ] ] ;
 284: LD_ADDR_EXP 27
 288: PUSH
 289: LD_INT 29
 291: PUSH
 292: LD_INT 3
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: PUSH
 299: LD_INT 82
 301: PUSH
 302: LD_INT 115
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: PUSH
 309: LD_INT 134
 311: PUSH
 312: LD_INT 3
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: PUSH
 319: LD_INT 192
 321: PUSH
 322: LD_INT 116
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: LIST
 333: LIST
 334: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 62 , 60 ] , [ 157 , 60 ] ] ;
 335: LD_ADDR_EXP 28
 339: PUSH
 340: LD_INT 62
 342: PUSH
 343: LD_INT 60
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: PUSH
 350: LD_INT 157
 352: PUSH
 353: LD_INT 60
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: ST_TO_ADDR
// depot_def := [ [ 35 , 34 , 0 ] , [ 56 , 86 , 2 ] , [ 158 , 34 , 5 ] , [ 185 , 86 , 3 ] ] ;
 364: LD_ADDR_EXP 22
 368: PUSH
 369: LD_INT 35
 371: PUSH
 372: LD_INT 34
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: EMPTY
 379: LIST
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 56
 385: PUSH
 386: LD_INT 86
 388: PUSH
 389: LD_INT 2
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: LIST
 396: PUSH
 397: LD_INT 158
 399: PUSH
 400: LD_INT 34
 402: PUSH
 403: LD_INT 5
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: LD_INT 185
 413: PUSH
 414: LD_INT 86
 416: PUSH
 417: LD_INT 3
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: LIST
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: LIST
 429: LIST
 430: ST_TO_ADDR
// labs_def := [ [ 19 , 28 , 1 ] , [ 49 , 92 , 1 ] , [ 166 , 23 , 4 ] , [ 205 , 97 , 4 ] ] ;
 431: LD_ADDR_EXP 24
 435: PUSH
 436: LD_INT 19
 438: PUSH
 439: LD_INT 28
 441: PUSH
 442: LD_INT 1
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PUSH
 450: LD_INT 49
 452: PUSH
 453: LD_INT 92
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 166
 466: PUSH
 467: LD_INT 23
 469: PUSH
 470: LD_INT 4
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: LIST
 477: PUSH
 478: LD_INT 205
 480: PUSH
 481: LD_INT 97
 483: PUSH
 484: LD_INT 4
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: ST_TO_ADDR
// factory_def := [ [ 26 , 16 , 2 ] , [ 64 , 103 , 0 ] , [ 154 , 18 , 3 ] , [ 190 , 103 , 5 ] ] ;
 498: LD_ADDR_EXP 25
 502: PUSH
 503: LD_INT 26
 505: PUSH
 506: LD_INT 16
 508: PUSH
 509: LD_INT 2
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: LIST
 516: PUSH
 517: LD_INT 64
 519: PUSH
 520: LD_INT 103
 522: PUSH
 523: LD_INT 0
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 154
 533: PUSH
 534: LD_INT 18
 536: PUSH
 537: LD_INT 3
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_INT 190
 547: PUSH
 548: LD_INT 103
 550: PUSH
 551: LD_INT 5
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: LIST
 558: PUSH
 559: EMPTY
 560: LIST
 561: LIST
 562: LIST
 563: LIST
 564: ST_TO_ADDR
// start_def := [ [ 35 , 26 ] , [ 65 , 94 ] , [ 150 , 26 ] , [ 185 , 94 ] ] ;
 565: LD_ADDR_EXP 26
 569: PUSH
 570: LD_INT 35
 572: PUSH
 573: LD_INT 26
 575: PUSH
 576: EMPTY
 577: LIST
 578: LIST
 579: PUSH
 580: LD_INT 65
 582: PUSH
 583: LD_INT 94
 585: PUSH
 586: EMPTY
 587: LIST
 588: LIST
 589: PUSH
 590: LD_INT 150
 592: PUSH
 593: LD_INT 26
 595: PUSH
 596: EMPTY
 597: LIST
 598: LIST
 599: PUSH
 600: LD_INT 185
 602: PUSH
 603: LD_INT 94
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: ST_TO_ADDR
// breastworks_def := [ [ [ 44 , 18 , 4 ] , [ 47 , 51 , 5 ] , [ 35 , 8 , 4 ] , [ 50 , 38 , 5 ] ] , [ [ 81 , 97 , 4 ] , [ 54 , 71 , 3 ] , [ 81 , 110 , 5 ] , [ 66 , 82 , 3 ] ] , [ [ 136 , 20 , 1 ] , [ 164 , 48 , 1 ] , [ 130 , 8 , 1 ] , [ 147 , 37 , 0 ] ] , [ [ 181 , 103 , 1 ] , [ 178 , 72 , 1 ] , [ 186 , 112 , 1 ] , [ 172 , 82 , 2 ] ] ] ;
 616: LD_ADDR_EXP 23
 620: PUSH
 621: LD_INT 44
 623: PUSH
 624: LD_INT 18
 626: PUSH
 627: LD_INT 4
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: LIST
 634: PUSH
 635: LD_INT 47
 637: PUSH
 638: LD_INT 51
 640: PUSH
 641: LD_INT 5
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PUSH
 649: LD_INT 35
 651: PUSH
 652: LD_INT 8
 654: PUSH
 655: LD_INT 4
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: LIST
 662: PUSH
 663: LD_INT 50
 665: PUSH
 666: LD_INT 38
 668: PUSH
 669: LD_INT 5
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: LIST
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: PUSH
 683: LD_INT 81
 685: PUSH
 686: LD_INT 97
 688: PUSH
 689: LD_INT 4
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: PUSH
 697: LD_INT 54
 699: PUSH
 700: LD_INT 71
 702: PUSH
 703: LD_INT 3
 705: PUSH
 706: EMPTY
 707: LIST
 708: LIST
 709: LIST
 710: PUSH
 711: LD_INT 81
 713: PUSH
 714: LD_INT 110
 716: PUSH
 717: LD_INT 5
 719: PUSH
 720: EMPTY
 721: LIST
 722: LIST
 723: LIST
 724: PUSH
 725: LD_INT 66
 727: PUSH
 728: LD_INT 82
 730: PUSH
 731: LD_INT 3
 733: PUSH
 734: EMPTY
 735: LIST
 736: LIST
 737: LIST
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: LIST
 743: LIST
 744: PUSH
 745: LD_INT 136
 747: PUSH
 748: LD_INT 20
 750: PUSH
 751: LD_INT 1
 753: PUSH
 754: EMPTY
 755: LIST
 756: LIST
 757: LIST
 758: PUSH
 759: LD_INT 164
 761: PUSH
 762: LD_INT 48
 764: PUSH
 765: LD_INT 1
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: LIST
 772: PUSH
 773: LD_INT 130
 775: PUSH
 776: LD_INT 8
 778: PUSH
 779: LD_INT 1
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PUSH
 787: LD_INT 147
 789: PUSH
 790: LD_INT 37
 792: PUSH
 793: LD_INT 0
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: LIST
 800: PUSH
 801: EMPTY
 802: LIST
 803: LIST
 804: LIST
 805: LIST
 806: PUSH
 807: LD_INT 181
 809: PUSH
 810: LD_INT 103
 812: PUSH
 813: LD_INT 1
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: LIST
 820: PUSH
 821: LD_INT 178
 823: PUSH
 824: LD_INT 72
 826: PUSH
 827: LD_INT 1
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: LIST
 834: PUSH
 835: LD_INT 186
 837: PUSH
 838: LD_INT 112
 840: PUSH
 841: LD_INT 1
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: LIST
 848: PUSH
 849: LD_INT 172
 851: PUSH
 852: LD_INT 82
 854: PUSH
 855: LD_INT 2
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: LIST
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: LIST
 873: LIST
 874: ST_TO_ADDR
// if def_extra_oil_deposits then
 875: LD_EXP 63
 879: IFFALSE 923
// for i in extra_oil_deposits_locations do
 881: LD_ADDR_VAR 0 2
 885: PUSH
 886: LD_EXP 27
 890: PUSH
 891: FOR_IN
 892: IFFALSE 921
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
 894: LD_VAR 0 2
 898: PUSH
 899: LD_INT 1
 901: ARRAY
 902: PPUSH
 903: LD_VAR 0 2
 907: PUSH
 908: LD_INT 2
 910: ARRAY
 911: PPUSH
 912: LD_INT 2
 914: PPUSH
 915: CALL_OW 62
 919: GO 891
 921: POP
 922: POP
// if def_extra_sib_deposits then
 923: LD_EXP 64
 927: IFFALSE 971
// for i in extra_sib_deposits_locations do
 929: LD_ADDR_VAR 0 2
 933: PUSH
 934: LD_EXP 28
 938: PUSH
 939: FOR_IN
 940: IFFALSE 969
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 2
 958: ARRAY
 959: PPUSH
 960: LD_INT 3
 962: PPUSH
 963: CALL_OW 62
 967: GO 939
 969: POP
 970: POP
// end ;
 971: LD_VAR 0 1
 975: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
 976: LD_INT 0
 978: PPUSH
 979: PPUSH
 980: PPUSH
 981: PPUSH
 982: PPUSH
 983: PPUSH
 984: PPUSH
 985: PPUSH
 986: PPUSH
// if Multiplayer then
 987: LD_OWVAR 4
 991: IFFALSE 1055
// begin Game_Type = mp_game_type ;
 993: LD_ADDR_EXP 56
 997: PUSH
 998: LD_OWVAR 6
1002: ST_TO_ADDR
// Your_Side := mp_player_side ;
1003: LD_ADDR_OWVAR 2
1007: PUSH
1008: LD_OWVAR 7
1012: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
1013: LD_ADDR_EXP 18
1017: PUSH
1018: LD_OWVAR 17
1022: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
1023: LD_ADDR_EXP 16
1027: PUSH
1028: LD_OWVAR 15
1032: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
1033: LD_ADDR_EXP 19
1037: PUSH
1038: LD_OWVAR 16
1042: ST_TO_ADDR
// Teams = mp_teams ;
1043: LD_ADDR_EXP 17
1047: PUSH
1048: LD_OWVAR 12
1052: ST_TO_ADDR
// end else
1053: GO 1195
// begin Game_Type = 12 ;
1055: LD_ADDR_EXP 56
1059: PUSH
1060: LD_INT 12
1062: ST_TO_ADDR
// Your_Side = 4 ;
1063: LD_ADDR_OWVAR 2
1067: PUSH
1068: LD_INT 4
1070: ST_TO_ADDR
// Side_Positions = [ 1 , 0 , 0 , 0 , 0 , 0 , 0 , 3 ] ;
1071: LD_ADDR_EXP 18
1075: PUSH
1076: LD_INT 1
1078: PUSH
1079: LD_INT 0
1081: PUSH
1082: LD_INT 0
1084: PUSH
1085: LD_INT 0
1087: PUSH
1088: LD_INT 0
1090: PUSH
1091: LD_INT 0
1093: PUSH
1094: LD_INT 0
1096: PUSH
1097: LD_INT 3
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: LIST
1106: LIST
1107: LIST
1108: LIST
1109: ST_TO_ADDR
// Side_Teams = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
1110: LD_ADDR_EXP 16
1114: PUSH
1115: LD_INT 0
1117: PUSH
1118: LD_INT 0
1120: PUSH
1121: LD_INT 0
1123: PUSH
1124: LD_INT 0
1126: PUSH
1127: LD_INT 0
1129: PUSH
1130: LD_INT 0
1132: PUSH
1133: LD_INT 0
1135: PUSH
1136: LD_INT 0
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: LIST
1148: ST_TO_ADDR
// Side_Nations = [ 3 , 0 , 0 , 0 , 0 , 0 , 0 , 1 ] ;
1149: LD_ADDR_EXP 19
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: LD_INT 0
1159: PUSH
1160: LD_INT 0
1162: PUSH
1163: LD_INT 0
1165: PUSH
1166: LD_INT 0
1168: PUSH
1169: LD_INT 0
1171: PUSH
1172: LD_INT 0
1174: PUSH
1175: LD_INT 1
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: LIST
1186: LIST
1187: ST_TO_ADDR
// Teams = [ ] ;
1188: LD_ADDR_EXP 17
1192: PUSH
1193: EMPTY
1194: ST_TO_ADDR
// end ; for i := 1 to 8 do
1195: LD_ADDR_VAR 0 8
1199: PUSH
1200: DOUBLE
1201: LD_INT 1
1203: DEC
1204: ST_TO_ADDR
1205: LD_INT 8
1207: PUSH
1208: FOR_TO
1209: IFFALSE 1296
// if Multiplayer_GetPlayerIsSpec ( i ) then
1211: LD_VAR 0 8
1215: PPUSH
1216: CALL_OW 530
1220: IFFALSE 1294
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
1222: LD_ADDR_EXP 18
1226: PUSH
1227: LD_EXP 18
1231: PPUSH
1232: LD_VAR 0 8
1236: PPUSH
1237: LD_INT 0
1239: PPUSH
1240: CALL_OW 1
1244: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
1245: LD_ADDR_EXP 17
1249: PUSH
1250: LD_EXP 17
1254: PPUSH
1255: LD_EXP 16
1259: PUSH
1260: LD_VAR 0 8
1264: ARRAY
1265: PPUSH
1266: LD_EXP 17
1270: PUSH
1271: LD_EXP 16
1275: PUSH
1276: LD_VAR 0 8
1280: ARRAY
1281: ARRAY
1282: PUSH
1283: LD_VAR 0 8
1287: DIFF
1288: PPUSH
1289: CALL_OW 1
1293: ST_TO_ADDR
// end ;
1294: GO 1208
1296: POP
1297: POP
// if Multiplayer then
1298: LD_OWVAR 4
1302: IFFALSE 1527
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
1304: LD_ADDR_EXP 58
1308: PUSH
1309: LD_INT 0
1311: PPUSH
1312: CALL_OW 426
1316: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
1317: LD_ADDR_EXP 59
1321: PUSH
1322: LD_INT 1
1324: PPUSH
1325: CALL_OW 426
1329: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
1330: LD_ADDR_EXP 60
1334: PUSH
1335: LD_INT 2
1337: PPUSH
1338: CALL_OW 426
1342: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
1343: LD_ADDR_EXP 61
1347: PUSH
1348: LD_INT 3
1350: PPUSH
1351: CALL_OW 426
1355: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
1356: LD_ADDR_EXP 62
1360: PUSH
1361: LD_INT 4
1363: PPUSH
1364: CALL_OW 426
1368: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
1369: LD_ADDR_EXP 63
1373: PUSH
1374: LD_INT 5
1376: PPUSH
1377: CALL_OW 426
1381: ST_TO_ADDR
// def_extra_sib_deposits = GetMultiplayerSetting ( 6 ) ;
1382: LD_ADDR_EXP 64
1386: PUSH
1387: LD_INT 6
1389: PPUSH
1390: CALL_OW 426
1394: ST_TO_ADDR
// def_base_size = GetMultiplayerSetting ( 7 ) ;
1395: LD_ADDR_EXP 1
1399: PUSH
1400: LD_INT 7
1402: PPUSH
1403: CALL_OW 426
1407: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
1408: LD_ADDR_EXP 65
1412: PUSH
1413: LD_INT 10
1415: PPUSH
1416: CALL_OW 426
1420: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
1421: LD_ADDR_EXP 66
1425: PUSH
1426: LD_INT 11
1428: PPUSH
1429: CALL_OW 426
1433: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
1434: LD_ADDR_EXP 67
1438: PUSH
1439: LD_INT 12
1441: PPUSH
1442: CALL_OW 426
1446: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
1447: LD_ADDR_EXP 69
1451: PUSH
1452: LD_INT 13
1454: PPUSH
1455: CALL_OW 426
1459: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
1460: LD_ADDR_EXP 68
1464: PUSH
1465: LD_INT 14
1467: PPUSH
1468: CALL_OW 426
1472: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
1473: LD_ADDR_EXP 70
1477: PUSH
1478: LD_INT 15
1480: PPUSH
1481: CALL_OW 426
1485: ST_TO_ADDR
// def_west_nations = GetMultiplayerSetting ( 21 ) ;
1486: LD_ADDR_EXP 2
1490: PUSH
1491: LD_INT 21
1493: PPUSH
1494: CALL_OW 426
1498: ST_TO_ADDR
// def_east_nations = GetMultiplayerSetting ( 22 ) ;
1499: LD_ADDR_EXP 3
1503: PUSH
1504: LD_INT 22
1506: PPUSH
1507: CALL_OW 426
1511: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 23 ) ;
1512: LD_ADDR_VAR 0 9
1516: PUSH
1517: LD_INT 23
1519: PPUSH
1520: CALL_OW 426
1524: ST_TO_ADDR
// end else
1525: GO 1667
// begin randomize ;
1527: CALL_OW 10
// def_base_level = 3 ;
1531: LD_ADDR_EXP 58
1535: PUSH
1536: LD_INT 3
1538: ST_TO_ADDR
// def_amount_of_people = 1 ;
1539: LD_ADDR_EXP 59
1543: PUSH
1544: LD_INT 1
1546: ST_TO_ADDR
// def_skill_level = 1 ;
1547: LD_ADDR_EXP 60
1551: PUSH
1552: LD_INT 1
1554: ST_TO_ADDR
// def_starting_resources = 2 ;
1555: LD_ADDR_EXP 61
1559: PUSH
1560: LD_INT 2
1562: ST_TO_ADDR
// def_shipments_density = 1 ;
1563: LD_ADDR_EXP 62
1567: PUSH
1568: LD_INT 1
1570: ST_TO_ADDR
// def_extra_oil_deposits = 1 ;
1571: LD_ADDR_EXP 63
1575: PUSH
1576: LD_INT 1
1578: ST_TO_ADDR
// def_extra_sib_deposits = 1 ;
1579: LD_ADDR_EXP 64
1583: PUSH
1584: LD_INT 1
1586: ST_TO_ADDR
// def_base_size = 2 ;
1587: LD_ADDR_EXP 1
1591: PUSH
1592: LD_INT 2
1594: ST_TO_ADDR
// def_shared_vision = 1 ;
1595: LD_ADDR_EXP 65
1599: PUSH
1600: LD_INT 1
1602: ST_TO_ADDR
// def_morale_flags = 1 ;
1603: LD_ADDR_EXP 66
1607: PUSH
1608: LD_INT 1
1610: ST_TO_ADDR
// def_siberite_detection = 1 ;
1611: LD_ADDR_EXP 67
1615: PUSH
1616: LD_INT 1
1618: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
1619: LD_ADDR_EXP 69
1623: PUSH
1624: LD_INT 3
1626: ST_TO_ADDR
// def_people_respawning = 2 ;
1627: LD_ADDR_EXP 68
1631: PUSH
1632: LD_INT 2
1634: ST_TO_ADDR
// def_siberite_bomb = 0 ;
1635: LD_ADDR_EXP 70
1639: PUSH
1640: LD_INT 0
1642: ST_TO_ADDR
// def_west_nations = 0 ;
1643: LD_ADDR_EXP 2
1647: PUSH
1648: LD_INT 0
1650: ST_TO_ADDR
// def_east_nations = 2 ;
1651: LD_ADDR_EXP 3
1655: PUSH
1656: LD_INT 2
1658: ST_TO_ADDR
// tech_level = 4 ;
1659: LD_ADDR_VAR 0 9
1663: PUSH
1664: LD_INT 4
1666: ST_TO_ADDR
// end ; InitGameRules ;
1667: CALL 15952 0 0
// if def_game_rules = 0 then
1671: LD_EXP 57
1675: PUSH
1676: LD_INT 0
1678: EQUAL
1679: IFFALSE 1706
// begin if isSGUI then
1681: LD_OWVAR 83
1685: IFFALSE 1693
// setMpTechs ( ) else
1687: CALL 19402 0 0
1691: GO 1706
// begin SetMpTechLevel ( tech_level + 1 ) ;
1693: LD_VAR 0 9
1697: PUSH
1698: LD_INT 1
1700: PLUS
1701: PPUSH
1702: CALL 19549 0 1
// end ; end ; if not def_base_level then
1706: LD_EXP 58
1710: NOT
1711: IFFALSE 1721
// def_base_size := 0 ;
1713: LD_ADDR_EXP 1
1717: PUSH
1718: LD_INT 0
1720: ST_TO_ADDR
// is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1721: LD_ADDR_EXP 4
1725: PUSH
1726: LD_INT 0
1728: PUSH
1729: LD_INT 1
1731: PUSH
1732: LD_INT 1
1734: PUSH
1735: LD_INT 1
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: PUSH
1744: LD_EXP 58
1748: PUSH
1749: LD_INT 1
1751: PLUS
1752: ARRAY
1753: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
1754: LD_ADDR_EXP 5
1758: PUSH
1759: LD_INT 0
1761: PUSH
1762: LD_INT 0
1764: PUSH
1765: LD_INT 2
1767: PUSH
1768: LD_INT 4
1770: PUSH
1771: EMPTY
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: PUSH
1777: LD_EXP 58
1781: PUSH
1782: LD_INT 1
1784: PLUS
1785: ARRAY
1786: ST_TO_ADDR
// number_of_people = [ 5 , 7 , 9 , 11 ] [ def_amount_of_people + 1 ] ;
1787: LD_ADDR_EXP 6
1791: PUSH
1792: LD_INT 5
1794: PUSH
1795: LD_INT 7
1797: PUSH
1798: LD_INT 9
1800: PUSH
1801: LD_INT 11
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: PUSH
1810: LD_EXP 59
1814: PUSH
1815: LD_INT 1
1817: PLUS
1818: ARRAY
1819: ST_TO_ADDR
// skill_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1820: LD_ADDR_EXP 7
1824: PUSH
1825: LD_INT 2
1827: PUSH
1828: LD_INT 3
1830: PUSH
1831: LD_INT 4
1833: PUSH
1834: LD_INT 5
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: LIST
1841: LIST
1842: PUSH
1843: LD_EXP 60
1847: PUSH
1848: LD_INT 1
1850: PLUS
1851: ARRAY
1852: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1853: LD_ADDR_EXP 9
1857: PUSH
1858: LD_INT 0
1860: PUSH
1861: LD_INT 0
1863: PUSH
1864: LD_INT 0
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: LIST
1871: PUSH
1872: LD_INT 30
1874: PUSH
1875: LD_INT 0
1877: PUSH
1878: LD_INT 0
1880: PUSH
1881: EMPTY
1882: LIST
1883: LIST
1884: LIST
1885: PUSH
1886: LD_INT 50
1888: PUSH
1889: LD_INT 20
1891: PUSH
1892: LD_INT 0
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: LIST
1899: PUSH
1900: LD_INT 80
1902: PUSH
1903: LD_INT 40
1905: PUSH
1906: LD_INT 20
1908: PUSH
1909: EMPTY
1910: LIST
1911: LIST
1912: LIST
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: PUSH
1920: LD_EXP 61
1924: PUSH
1925: LD_INT 1
1927: PLUS
1928: ARRAY
1929: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1930: LD_ADDR_EXP 8
1934: PUSH
1935: LD_INT 10
1937: PUSH
1938: EMPTY
1939: LIST
1940: PUSH
1941: LD_INT 7
1943: PUSH
1944: LD_INT 14
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: PUSH
1951: LD_INT 6
1953: PUSH
1954: LD_INT 12
1956: PUSH
1957: LD_INT 18
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: LIST
1964: PUSH
1965: LD_INT 5
1967: PUSH
1968: LD_INT 10
1970: PUSH
1971: LD_INT 15
1973: PUSH
1974: LD_INT 20
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: PUSH
1989: LD_EXP 61
1993: PUSH
1994: LD_INT 1
1996: PLUS
1997: ARRAY
1998: ST_TO_ADDR
// shipments_density = [ 18 , 25 , 35 ] [ def_shipments_density + 1 ] ;
1999: LD_ADDR_EXP 10
2003: PUSH
2004: LD_INT 18
2006: PUSH
2007: LD_INT 25
2009: PUSH
2010: LD_INT 35
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: LIST
2017: PUSH
2018: LD_EXP 62
2022: PUSH
2023: LD_INT 1
2025: PLUS
2026: ARRAY
2027: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
2028: LD_ADDR_EXP 12
2032: PUSH
2033: LD_INT 0
2035: PUSH
2036: LD_INT 3
2038: PUSH
2039: LD_INT 6
2041: PUSH
2042: LD_INT 9
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: PUSH
2051: LD_EXP 69
2055: PUSH
2056: LD_INT 1
2058: PLUS
2059: ARRAY
2060: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
2061: LD_ADDR_EXP 13
2065: PUSH
2066: LD_INT 0
2068: PUSH
2069: LD_INT 8400
2071: PUSH
2072: LD_INT 1750
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: LIST
2079: PUSH
2080: LD_EXP 68
2084: PUSH
2085: LD_INT 1
2087: PLUS
2088: ARRAY
2089: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
2090: LD_ADDR_EXP 14
2094: PUSH
2095: LD_INT 0
2097: PUSH
2098: LD_INT 21000
2100: PUSH
2101: LD_INT 4200
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: LIST
2108: PUSH
2109: LD_EXP 68
2113: PUSH
2114: LD_INT 1
2116: PLUS
2117: ARRAY
2118: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
2119: LD_ADDR_EXP 15
2123: PUSH
2124: LD_INT 0
2126: PUSH
2127: LD_INT 1
2129: PUSH
2130: LD_INT 63000
2132: PUSH
2133: LD_INT 126000
2135: PUSH
2136: LD_INT 189000
2138: PUSH
2139: LD_INT 252000
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: PUSH
2150: LD_EXP 70
2154: PUSH
2155: LD_INT 1
2157: PLUS
2158: ARRAY
2159: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
2160: LD_ADDR_EXP 11
2164: PUSH
2165: LD_INT 1
2167: NEG
2168: PUSH
2169: LD_INT 350
2171: PUSH
2172: LD_INT 700
2174: PUSH
2175: LD_INT 1400
2177: PUSH
2178: LD_INT 0
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: LIST
2187: PUSH
2188: LD_EXP 66
2192: PUSH
2193: LD_INT 1
2195: PLUS
2196: ARRAY
2197: ST_TO_ADDR
// battle_flags_id = [ ] ;
2198: LD_ADDR_EXP 29
2202: PUSH
2203: EMPTY
2204: ST_TO_ADDR
// if not def_builduptime then
2205: LD_EXP 71
2209: NOT
2210: IFFALSE 2215
// disable ( 600 ) ;
2212: LD_INT 600
2214: DISABLE_MARKED
// end ;
2215: LD_VAR 0 1
2219: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2220: LD_INT 0
2222: PPUSH
2223: PPUSH
2224: PPUSH
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
2225: LD_ADDR_EXP 20
2229: PUSH
2230: LD_EXP 16
2234: PUSH
2235: LD_INT 0
2237: PUSH
2238: EMPTY
2239: LIST
2240: DIFF
2241: PUSH
2242: LD_INT 1
2244: GREATER
2245: ST_TO_ADDR
// if not Team_Game then
2246: LD_EXP 20
2250: NOT
2251: IFFALSE 2349
// begin for i = 1 to 8 do
2253: LD_ADDR_VAR 0 2
2257: PUSH
2258: DOUBLE
2259: LD_INT 1
2261: DEC
2262: ST_TO_ADDR
2263: LD_INT 8
2265: PUSH
2266: FOR_TO
2267: IFFALSE 2345
// for j = 1 to 8 do
2269: LD_ADDR_VAR 0 3
2273: PUSH
2274: DOUBLE
2275: LD_INT 1
2277: DEC
2278: ST_TO_ADDR
2279: LD_INT 8
2281: PUSH
2282: FOR_TO
2283: IFFALSE 2341
// if i <> j then
2285: LD_VAR 0 2
2289: PUSH
2290: LD_VAR 0 3
2294: NONEQUAL
2295: IFFALSE 2319
// SetAttitude ( i , j , att_neutral , true ) else
2297: LD_VAR 0 2
2301: PPUSH
2302: LD_VAR 0 3
2306: PPUSH
2307: LD_INT 0
2309: PPUSH
2310: LD_INT 1
2312: PPUSH
2313: CALL_OW 80
2317: GO 2339
// SetAttitude ( i , j , att_friend , true ) ;
2319: LD_VAR 0 2
2323: PPUSH
2324: LD_VAR 0 3
2328: PPUSH
2329: LD_INT 1
2331: PPUSH
2332: LD_INT 1
2334: PPUSH
2335: CALL_OW 80
2339: GO 2282
2341: POP
2342: POP
2343: GO 2266
2345: POP
2346: POP
// end else
2347: GO 2524
// begin if def_shared_vision then
2349: LD_EXP 65
2353: IFFALSE 2418
// begin for i in Teams do
2355: LD_ADDR_VAR 0 2
2359: PUSH
2360: LD_EXP 17
2364: PUSH
2365: FOR_IN
2366: IFFALSE 2416
// for j = 2 to i do
2368: LD_ADDR_VAR 0 3
2372: PUSH
2373: DOUBLE
2374: LD_INT 2
2376: DEC
2377: ST_TO_ADDR
2378: LD_VAR 0 2
2382: PUSH
2383: FOR_TO
2384: IFFALSE 2412
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2386: LD_VAR 0 2
2390: PUSH
2391: LD_VAR 0 3
2395: ARRAY
2396: PPUSH
2397: LD_VAR 0 2
2401: PUSH
2402: LD_INT 1
2404: ARRAY
2405: PPUSH
2406: CALL_OW 343
2410: GO 2383
2412: POP
2413: POP
2414: GO 2365
2416: POP
2417: POP
// end ; for i = 1 to 8 do
2418: LD_ADDR_VAR 0 2
2422: PUSH
2423: DOUBLE
2424: LD_INT 1
2426: DEC
2427: ST_TO_ADDR
2428: LD_INT 8
2430: PUSH
2431: FOR_TO
2432: IFFALSE 2522
// for j = 1 to 8 do
2434: LD_ADDR_VAR 0 3
2438: PUSH
2439: DOUBLE
2440: LD_INT 1
2442: DEC
2443: ST_TO_ADDR
2444: LD_INT 8
2446: PUSH
2447: FOR_TO
2448: IFFALSE 2518
// if Side_Teams [ i ] = Side_Teams [ j ] then
2450: LD_EXP 16
2454: PUSH
2455: LD_VAR 0 2
2459: ARRAY
2460: PUSH
2461: LD_EXP 16
2465: PUSH
2466: LD_VAR 0 3
2470: ARRAY
2471: EQUAL
2472: IFFALSE 2496
// SetAttitude ( i , j , att_friend , true ) else
2474: LD_VAR 0 2
2478: PPUSH
2479: LD_VAR 0 3
2483: PPUSH
2484: LD_INT 1
2486: PPUSH
2487: LD_INT 1
2489: PPUSH
2490: CALL_OW 80
2494: GO 2516
// SetAttitude ( i , j , att_enemy , true ) ;
2496: LD_VAR 0 2
2500: PPUSH
2501: LD_VAR 0 3
2505: PPUSH
2506: LD_INT 2
2508: PPUSH
2509: LD_INT 1
2511: PPUSH
2512: CALL_OW 80
2516: GO 2447
2518: POP
2519: POP
2520: GO 2431
2522: POP
2523: POP
// end ; end ;
2524: LD_VAR 0 1
2528: RET
// function prepare_people ( count , cl , x , y , r ) ; var i , j , un ; begin
2529: LD_INT 0
2531: PPUSH
2532: PPUSH
2533: PPUSH
2534: PPUSH
// result := [ ] ;
2535: LD_ADDR_VAR 0 6
2539: PUSH
2540: EMPTY
2541: ST_TO_ADDR
// for i := 1 to count do
2542: LD_ADDR_VAR 0 7
2546: PUSH
2547: DOUBLE
2548: LD_INT 1
2550: DEC
2551: ST_TO_ADDR
2552: LD_VAR 0 1
2556: PUSH
2557: FOR_TO
2558: IFFALSE 2954
// begin uc_direction := Rand ( 0 , 5 ) ;
2560: LD_ADDR_OWVAR 24
2564: PUSH
2565: LD_INT 0
2567: PPUSH
2568: LD_INT 5
2570: PPUSH
2571: CALL_OW 12
2575: ST_TO_ADDR
// if commander then
2576: LD_LOC 1
2580: IFFALSE 2689
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2582: LD_ADDR_OWVAR 26
2586: PUSH
2587: LD_OWVAR 19
2591: PUSH
2592: LD_OWVAR 20
2596: ARRAY
2597: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2598: LD_INT 1
2600: PPUSH
2601: LD_INT 2
2603: PPUSH
2604: CALL_OW 12
2608: PPUSH
2609: LD_VAR 0 2
2613: PPUSH
2614: LD_EXP 7
2618: PUSH
2619: LD_INT 2
2621: PLUS
2622: PPUSH
2623: CALL_OW 380
// hc_importance := 105 ;
2627: LD_ADDR_OWVAR 32
2631: PUSH
2632: LD_INT 105
2634: ST_TO_ADDR
// commander := false ;
2635: LD_ADDR_LOC 1
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if Multiplayer then
2643: LD_OWVAR 4
2647: IFFALSE 2687
// begin hc_gallery := MULTIAVATARS ;
2649: LD_ADDR_OWVAR 33
2653: PUSH
2654: LD_STRING MULTIAVATARS
2656: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2657: LD_ADDR_OWVAR 34
2661: PUSH
2662: LD_OWVAR 20
2666: PPUSH
2667: CALL_OW 525
2671: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2672: LD_ADDR_OWVAR 27
2676: PUSH
2677: LD_OWVAR 20
2681: PPUSH
2682: CALL_OW 526
2686: ST_TO_ADDR
// end ; end else
2687: GO 2752
// begin hc_name :=  ;
2689: LD_ADDR_OWVAR 26
2693: PUSH
2694: LD_STRING 
2696: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2697: LD_INT 1
2699: PPUSH
2700: LD_INT 2
2702: PPUSH
2703: CALL_OW 12
2707: PPUSH
2708: LD_VAR 0 2
2712: PPUSH
2713: LD_EXP 7
2717: PPUSH
2718: CALL_OW 380
// hc_importance := 0 ;
2722: LD_ADDR_OWVAR 32
2726: PUSH
2727: LD_INT 0
2729: ST_TO_ADDR
// if Multiplayer then
2730: LD_OWVAR 4
2734: IFFALSE 2752
// begin hc_gallery :=  ;
2736: LD_ADDR_OWVAR 33
2740: PUSH
2741: LD_STRING 
2743: ST_TO_ADDR
// hc_face_number := 0 ;
2744: LD_ADDR_OWVAR 34
2748: PUSH
2749: LD_INT 0
2751: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2752: LD_ADDR_VAR 0 9
2756: PUSH
2757: CALL_OW 44
2761: ST_TO_ADDR
// if global_defined then
2762: LD_LOC 3
2766: IFFALSE 2906
// begin if ( cl = class_soldier ) then
2768: LD_VAR 0 2
2772: PUSH
2773: LD_INT 1
2775: EQUAL
2776: IFFALSE 2796
// j := i + soldiers_created else
2778: LD_ADDR_VAR 0 8
2782: PUSH
2783: LD_VAR 0 7
2787: PUSH
2788: LD_LOC 4
2792: PLUS
2793: ST_TO_ADDR
2794: GO 2806
// j := i ;
2796: LD_ADDR_VAR 0 8
2800: PUSH
2801: LD_VAR 0 7
2805: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2806: LD_LOC 2
2810: PUSH
2811: LD_VAR 0 2
2815: ARRAY
2816: PUSH
2817: LD_VAR 0 8
2821: ARRAY
2822: PPUSH
2823: LD_VAR 0 9
2827: PPUSH
2828: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2832: LD_VAR 0 9
2836: PPUSH
2837: LD_INT 2
2839: PPUSH
2840: LD_LOC 2
2844: PUSH
2845: LD_VAR 0 2
2849: ARRAY
2850: PUSH
2851: LD_VAR 0 8
2855: ARRAY
2856: PPUSH
2857: LD_INT 2
2859: PPUSH
2860: CALL_OW 260
2864: PPUSH
2865: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2869: LD_VAR 0 9
2873: PPUSH
2874: LD_INT 1
2876: PPUSH
2877: LD_LOC 2
2881: PUSH
2882: LD_VAR 0 2
2886: ARRAY
2887: PUSH
2888: LD_VAR 0 8
2892: ARRAY
2893: PPUSH
2894: LD_INT 1
2896: PPUSH
2897: CALL_OW 260
2901: PPUSH
2902: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2906: LD_VAR 0 9
2910: PPUSH
2911: LD_VAR 0 3
2915: PPUSH
2916: LD_VAR 0 4
2920: PPUSH
2921: LD_VAR 0 5
2925: PPUSH
2926: LD_INT 0
2928: PPUSH
2929: CALL_OW 50
// result := result ^ [ un ] ;
2933: LD_ADDR_VAR 0 6
2937: PUSH
2938: LD_VAR 0 6
2942: PUSH
2943: LD_VAR 0 9
2947: PUSH
2948: EMPTY
2949: LIST
2950: ADD
2951: ST_TO_ADDR
// end ;
2952: GO 2557
2954: POP
2955: POP
// if not global_defined then
2956: LD_LOC 3
2960: NOT
2961: IFFALSE 3039
// if ( global_units >= cl ) then
2963: LD_LOC 2
2967: PUSH
2968: LD_VAR 0 2
2972: GREATEREQUAL
2973: IFFALSE 3014
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2975: LD_ADDR_LOC 2
2979: PUSH
2980: LD_LOC 2
2984: PPUSH
2985: LD_VAR 0 2
2989: PPUSH
2990: LD_LOC 2
2994: PUSH
2995: LD_VAR 0 2
2999: ARRAY
3000: PUSH
3001: LD_VAR 0 6
3005: ADD
3006: PPUSH
3007: CALL_OW 1
3011: ST_TO_ADDR
3012: GO 3039
// global_units := Replace ( global_units , cl , result ) ;
3014: LD_ADDR_LOC 2
3018: PUSH
3019: LD_LOC 2
3023: PPUSH
3024: LD_VAR 0 2
3028: PPUSH
3029: LD_VAR 0 6
3033: PPUSH
3034: CALL_OW 1
3038: ST_TO_ADDR
// end ;
3039: LD_VAR 0 6
3043: RET
// function prepare_side ( side , pos , nation ) ; var x , y , dir , i , r , sol , br , dep ; begin
3044: LD_INT 0
3046: PPUSH
3047: PPUSH
3048: PPUSH
3049: PPUSH
3050: PPUSH
3051: PPUSH
3052: PPUSH
3053: PPUSH
3054: PPUSH
// if side in [ 0 , 9 ] then
3055: LD_VAR 0 1
3059: PUSH
3060: LD_INT 0
3062: PUSH
3063: LD_INT 9
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: IN
3070: IFFALSE 3074
// exit ;
3072: GO 4329
// uc_nation := nation ;
3074: LD_ADDR_OWVAR 21
3078: PUSH
3079: LD_VAR 0 3
3083: ST_TO_ADDR
// uc_side := side ;
3084: LD_ADDR_OWVAR 20
3088: PUSH
3089: LD_VAR 0 1
3093: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3094: LD_ADDR_VAR 0 5
3098: PUSH
3099: LD_EXP 22
3103: PUSH
3104: LD_VAR 0 2
3108: ARRAY
3109: PUSH
3110: LD_INT 1
3112: ARRAY
3113: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3114: LD_ADDR_VAR 0 6
3118: PUSH
3119: LD_EXP 22
3123: PUSH
3124: LD_VAR 0 2
3128: ARRAY
3129: PUSH
3130: LD_INT 2
3132: ARRAY
3133: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3134: LD_ADDR_VAR 0 7
3138: PUSH
3139: LD_EXP 22
3143: PUSH
3144: LD_VAR 0 2
3148: ARRAY
3149: PUSH
3150: LD_INT 3
3152: ARRAY
3153: ST_TO_ADDR
// if is_depot then
3154: LD_EXP 4
3158: IFFALSE 3291
// begin bc_type = b_depot ;
3160: LD_ADDR_OWVAR 42
3164: PUSH
3165: LD_INT 0
3167: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3168: LD_ADDR_VAR 0 12
3172: PUSH
3173: LD_VAR 0 5
3177: PPUSH
3178: LD_VAR 0 6
3182: PPUSH
3183: LD_VAR 0 7
3187: PPUSH
3188: CALL_OW 47
3192: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3193: LD_VAR 0 12
3197: PPUSH
3198: LD_STRING @
3200: PUSH
3201: LD_VAR 0 1
3205: STR
3206: PPUSH
3207: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3211: LD_VAR 0 12
3215: PPUSH
3216: CALL_OW 274
3220: PPUSH
3221: LD_INT 1
3223: PPUSH
3224: LD_EXP 9
3228: PUSH
3229: LD_INT 1
3231: ARRAY
3232: PPUSH
3233: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3237: LD_VAR 0 12
3241: PPUSH
3242: CALL_OW 274
3246: PPUSH
3247: LD_INT 2
3249: PPUSH
3250: LD_EXP 9
3254: PUSH
3255: LD_INT 2
3257: ARRAY
3258: PPUSH
3259: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3263: LD_VAR 0 12
3267: PPUSH
3268: CALL_OW 274
3272: PPUSH
3273: LD_INT 3
3275: PPUSH
3276: LD_EXP 9
3280: PUSH
3281: LD_INT 3
3283: ARRAY
3284: PPUSH
3285: CALL_OW 277
// end else
3289: GO 3435
// begin for i := 1 to 3 do
3291: LD_ADDR_VAR 0 8
3295: PUSH
3296: DOUBLE
3297: LD_INT 1
3299: DEC
3300: ST_TO_ADDR
3301: LD_INT 3
3303: PUSH
3304: FOR_TO
3305: IFFALSE 3433
// begin r := starting_resources [ i ] ;
3307: LD_ADDR_VAR 0 9
3311: PUSH
3312: LD_EXP 9
3316: PUSH
3317: LD_VAR 0 8
3321: ARRAY
3322: ST_TO_ADDR
// while r >= 10 do
3323: LD_VAR 0 9
3327: PUSH
3328: LD_INT 10
3330: GREATEREQUAL
3331: IFFALSE 3431
// if r > 50 then
3333: LD_VAR 0 9
3337: PUSH
3338: LD_INT 50
3340: GREATER
3341: IFFALSE 3387
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3343: LD_VAR 0 8
3347: PPUSH
3348: LD_INT 5
3350: PPUSH
3351: LD_VAR 0 5
3355: PPUSH
3356: LD_VAR 0 6
3360: PPUSH
3361: LD_INT 4
3363: PPUSH
3364: LD_INT 0
3366: PPUSH
3367: CALL_OW 60
// r := r - 50 ;
3371: LD_ADDR_VAR 0 9
3375: PUSH
3376: LD_VAR 0 9
3380: PUSH
3381: LD_INT 50
3383: MINUS
3384: ST_TO_ADDR
// end else
3385: GO 3429
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3387: LD_VAR 0 8
3391: PPUSH
3392: LD_VAR 0 9
3396: PUSH
3397: LD_INT 10
3399: DIV
3400: PPUSH
3401: LD_VAR 0 5
3405: PPUSH
3406: LD_VAR 0 6
3410: PPUSH
3411: LD_INT 4
3413: PPUSH
3414: LD_INT 0
3416: PPUSH
3417: CALL_OW 60
// r := 0 ;
3421: LD_ADDR_VAR 0 9
3425: PUSH
3426: LD_INT 0
3428: ST_TO_ADDR
// end ;
3429: GO 3323
// end ;
3431: GO 3304
3433: POP
3434: POP
// end ; if def_base_size > 0 then
3435: LD_EXP 1
3439: PUSH
3440: LD_INT 0
3442: GREATER
3443: IFFALSE 3518
// begin bc_kind1 := b_lab_basic ;
3445: LD_ADDR_OWVAR 44
3449: PUSH
3450: LD_INT 9
3452: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
3453: LD_ADDR_OWVAR 45
3457: PUSH
3458: LD_INT 9
3460: ST_TO_ADDR
// bc_type := b_lab ;
3461: LD_ADDR_OWVAR 42
3465: PUSH
3466: LD_INT 6
3468: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( labs_def [ pos ] [ 1 ] , labs_def [ pos ] [ 2 ] , labs_def [ pos ] [ 3 ] ) ;
3469: LD_EXP 24
3473: PUSH
3474: LD_VAR 0 2
3478: ARRAY
3479: PUSH
3480: LD_INT 1
3482: ARRAY
3483: PPUSH
3484: LD_EXP 24
3488: PUSH
3489: LD_VAR 0 2
3493: ARRAY
3494: PUSH
3495: LD_INT 2
3497: ARRAY
3498: PPUSH
3499: LD_EXP 24
3503: PUSH
3504: LD_VAR 0 2
3508: ARRAY
3509: PUSH
3510: LD_INT 3
3512: ARRAY
3513: PPUSH
3514: CALL_OW 47
// end ; if def_base_size > 1 then
3518: LD_EXP 1
3522: PUSH
3523: LD_INT 1
3525: GREATER
3526: IFFALSE 3585
// begin bc_type := b_workshop ;
3528: LD_ADDR_OWVAR 42
3532: PUSH
3533: LD_INT 2
3535: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( factory_def [ pos ] [ 1 ] , factory_def [ pos ] [ 2 ] , factory_def [ pos ] [ 3 ] ) ;
3536: LD_EXP 25
3540: PUSH
3541: LD_VAR 0 2
3545: ARRAY
3546: PUSH
3547: LD_INT 1
3549: ARRAY
3550: PPUSH
3551: LD_EXP 25
3555: PUSH
3556: LD_VAR 0 2
3560: ARRAY
3561: PUSH
3562: LD_INT 2
3564: ARRAY
3565: PPUSH
3566: LD_EXP 25
3570: PUSH
3571: LD_VAR 0 2
3575: ARRAY
3576: PUSH
3577: LD_INT 3
3579: ARRAY
3580: PPUSH
3581: CALL_OW 47
// end ; for r in starting_crates do
3585: LD_ADDR_VAR 0 9
3589: PUSH
3590: LD_EXP 8
3594: PUSH
3595: FOR_IN
3596: IFFALSE 3628
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3598: LD_INT 1
3600: PPUSH
3601: LD_INT 5
3603: PPUSH
3604: LD_VAR 0 5
3608: PPUSH
3609: LD_VAR 0 6
3613: PPUSH
3614: LD_VAR 0 9
3618: PPUSH
3619: LD_INT 0
3621: PPUSH
3622: CALL_OW 60
3626: GO 3595
3628: POP
3629: POP
// if def_morale_flags then
3630: LD_EXP 66
3634: IFFALSE 3773
// begin x := start_def [ pos ] [ 1 ] ;
3636: LD_ADDR_VAR 0 5
3640: PUSH
3641: LD_EXP 26
3645: PUSH
3646: LD_VAR 0 2
3650: ARRAY
3651: PUSH
3652: LD_INT 1
3654: ARRAY
3655: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3656: LD_ADDR_VAR 0 6
3660: PUSH
3661: LD_EXP 26
3665: PUSH
3666: LD_VAR 0 2
3670: ARRAY
3671: PUSH
3672: LD_INT 2
3674: ARRAY
3675: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3676: LD_VAR 0 5
3680: PPUSH
3681: LD_VAR 0 6
3685: PPUSH
3686: LD_INT 12
3688: PPUSH
3689: LD_INT 2
3691: PPUSH
3692: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3696: LD_ADDR_EXP 29
3700: PUSH
3701: LD_EXP 29
3705: PUSH
3706: LD_VAR 0 1
3710: PPUSH
3711: LD_VAR 0 5
3715: PPUSH
3716: LD_VAR 0 6
3720: PPUSH
3721: LD_INT 1
3723: PUSH
3724: LD_INT 100
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: PUSH
3731: LD_INT 2
3733: PUSH
3734: LD_INT 50
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: PUSH
3741: LD_INT 3
3743: PUSH
3744: LD_INT 20
3746: PUSH
3747: EMPTY
3748: LIST
3749: LIST
3750: PUSH
3751: LD_INT 20
3753: PUSH
3754: LD_INT 100
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: LIST
3765: LIST
3766: PPUSH
3767: CALL_OW 418
3771: ADD
3772: ST_TO_ADDR
// end ; commander := true ;
3773: LD_ADDR_LOC 1
3777: PUSH
3778: LD_INT 1
3780: ST_TO_ADDR
// soldiers_created := 0 ;
3781: LD_ADDR_LOC 4
3785: PUSH
3786: LD_INT 0
3788: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3789: LD_ADDR_VAR 0 8
3793: PUSH
3794: DOUBLE
3795: LD_INT 1
3797: DEC
3798: ST_TO_ADDR
3799: LD_EXP 5
3803: PUSH
3804: FOR_TO
3805: IFFALSE 4047
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3807: LD_ADDR_VAR 0 5
3811: PUSH
3812: LD_EXP 23
3816: PUSH
3817: LD_VAR 0 2
3821: ARRAY
3822: PUSH
3823: LD_VAR 0 8
3827: ARRAY
3828: PUSH
3829: LD_INT 1
3831: ARRAY
3832: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3833: LD_ADDR_VAR 0 6
3837: PUSH
3838: LD_EXP 23
3842: PUSH
3843: LD_VAR 0 2
3847: ARRAY
3848: PUSH
3849: LD_VAR 0 8
3853: ARRAY
3854: PUSH
3855: LD_INT 2
3857: ARRAY
3858: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3859: LD_ADDR_VAR 0 7
3863: PUSH
3864: LD_EXP 23
3868: PUSH
3869: LD_VAR 0 2
3873: ARRAY
3874: PUSH
3875: LD_VAR 0 8
3879: ARRAY
3880: PUSH
3881: LD_INT 3
3883: ARRAY
3884: ST_TO_ADDR
// if i < 4 then
3885: LD_VAR 0 8
3889: PUSH
3890: LD_INT 4
3892: LESS
3893: IFFALSE 3905
// bc_type := b_breastwork else
3895: LD_ADDR_OWVAR 42
3899: PUSH
3900: LD_INT 31
3902: ST_TO_ADDR
3903: GO 3913
// bc_type := b_armoury ;
3905: LD_ADDR_OWVAR 42
3909: PUSH
3910: LD_INT 4
3912: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3913: LD_ADDR_VAR 0 11
3917: PUSH
3918: LD_VAR 0 5
3922: PPUSH
3923: LD_VAR 0 6
3927: PPUSH
3928: LD_VAR 0 7
3932: PPUSH
3933: CALL_OW 47
3937: ST_TO_ADDR
// x := ShiftX ( x , dir , 2 ) ;
3938: LD_ADDR_VAR 0 5
3942: PUSH
3943: LD_VAR 0 5
3947: PPUSH
3948: LD_VAR 0 7
3952: PPUSH
3953: LD_INT 2
3955: PPUSH
3956: CALL_OW 272
3960: ST_TO_ADDR
// y := ShiftY ( y , dir , 2 ) ;
3961: LD_ADDR_VAR 0 6
3965: PUSH
3966: LD_VAR 0 6
3970: PPUSH
3971: LD_VAR 0 7
3975: PPUSH
3976: LD_INT 2
3978: PPUSH
3979: CALL_OW 273
3983: ST_TO_ADDR
// sol := prepare_people ( 1 , class_soldier , x , y , 0 ) [ 1 ] ;
3984: LD_ADDR_VAR 0 10
3988: PUSH
3989: LD_INT 1
3991: PPUSH
3992: LD_INT 1
3994: PPUSH
3995: LD_VAR 0 5
3999: PPUSH
4000: LD_VAR 0 6
4004: PPUSH
4005: LD_INT 0
4007: PPUSH
4008: CALL 2529 0 5
4012: PUSH
4013: LD_INT 1
4015: ARRAY
4016: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
4017: LD_ADDR_LOC 4
4021: PUSH
4022: LD_LOC 4
4026: PUSH
4027: LD_INT 1
4029: PLUS
4030: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
4031: LD_VAR 0 10
4035: PPUSH
4036: LD_VAR 0 11
4040: PPUSH
4041: CALL_OW 120
// end ;
4045: GO 3804
4047: POP
4048: POP
// x := start_def [ pos ] [ 1 ] ;
4049: LD_ADDR_VAR 0 5
4053: PUSH
4054: LD_EXP 26
4058: PUSH
4059: LD_VAR 0 2
4063: ARRAY
4064: PUSH
4065: LD_INT 1
4067: ARRAY
4068: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4069: LD_ADDR_VAR 0 6
4073: PUSH
4074: LD_EXP 26
4078: PUSH
4079: LD_VAR 0 2
4083: ARRAY
4084: PUSH
4085: LD_INT 2
4087: ARRAY
4088: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 ) ;
4089: LD_LOC 8
4093: PUSH
4094: LD_EXP 5
4098: MINUS
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_VAR 0 5
4107: PPUSH
4108: LD_VAR 0 6
4112: PPUSH
4113: LD_INT 5
4115: PPUSH
4116: CALL 2529 0 5
// prepare_people ( neng , class_engineer , x , y , 5 ) ;
4120: LD_LOC 5
4124: PPUSH
4125: LD_INT 2
4127: PPUSH
4128: LD_VAR 0 5
4132: PPUSH
4133: LD_VAR 0 6
4137: PPUSH
4138: LD_INT 5
4140: PPUSH
4141: CALL 2529 0 5
// prepare_people ( nmech , class_mechanic , x , y , 5 ) ;
4145: LD_LOC 7
4149: PPUSH
4150: LD_INT 3
4152: PPUSH
4153: LD_VAR 0 5
4157: PPUSH
4158: LD_VAR 0 6
4162: PPUSH
4163: LD_INT 5
4165: PPUSH
4166: CALL 2529 0 5
// prepare_people ( nsci , class_scientistic , x , y , 5 ) ;
4170: LD_LOC 6
4174: PPUSH
4175: LD_INT 4
4177: PPUSH
4178: LD_VAR 0 5
4182: PPUSH
4183: LD_VAR 0 6
4187: PPUSH
4188: LD_INT 5
4190: PPUSH
4191: CALL 2529 0 5
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4195: LD_EXP 67
4199: PUSH
4200: LD_INT 20
4202: PPUSH
4203: LD_VAR 0 1
4207: PPUSH
4208: CALL_OW 321
4212: PUSH
4213: LD_INT 1
4215: EQUAL
4216: AND
4217: IFFALSE 4234
// SetTech ( tech_SibDet , side , state_researched ) ;
4219: LD_INT 20
4221: PPUSH
4222: LD_VAR 0 1
4226: PPUSH
4227: LD_INT 2
4229: PPUSH
4230: CALL_OW 322
// if def_siberite_bomb = 1 then
4234: LD_EXP 70
4238: PUSH
4239: LD_INT 1
4241: EQUAL
4242: IFFALSE 4276
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4244: LD_INT 25
4246: PPUSH
4247: LD_VAR 0 1
4251: PPUSH
4252: LD_INT 1
4254: PPUSH
4255: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4259: LD_INT 73
4261: PPUSH
4262: LD_VAR 0 1
4266: PPUSH
4267: LD_INT 1
4269: PPUSH
4270: CALL_OW 322
// end else
4274: GO 4306
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4276: LD_INT 25
4278: PPUSH
4279: LD_VAR 0 1
4283: PPUSH
4284: LD_INT 0
4286: PPUSH
4287: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4291: LD_INT 73
4293: PPUSH
4294: LD_VAR 0 1
4298: PPUSH
4299: LD_INT 0
4301: PPUSH
4302: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4306: LD_INT 24
4308: PPUSH
4309: LD_VAR 0 1
4313: PPUSH
4314: LD_INT 0
4316: PPUSH
4317: CALL_OW 322
// global_defined := true ;
4321: LD_ADDR_LOC 3
4325: PUSH
4326: LD_INT 1
4328: ST_TO_ADDR
// end ;
4329: LD_VAR 0 4
4333: RET
// every 0 0$1 do
4334: GO 4336
4336: DISABLE
// if ( def_siberite_bomb > 1 ) then
4337: LD_EXP 70
4341: PUSH
4342: LD_INT 1
4344: GREATER
4345: IFFALSE 4360
// begin wait ( siberite_bomb_Delay ) ;
4347: LD_EXP 15
4351: PPUSH
4352: CALL_OW 67
// EnableSibFiss ;
4356: CALL 4361 0 0
// end ;
4360: END
// function EnableSibFiss ; var i ; begin
4361: LD_INT 0
4363: PPUSH
4364: PPUSH
// for i := 1 to 8 do
4365: LD_ADDR_VAR 0 2
4369: PUSH
4370: DOUBLE
4371: LD_INT 1
4373: DEC
4374: ST_TO_ADDR
4375: LD_INT 8
4377: PUSH
4378: FOR_TO
4379: IFFALSE 4425
// if Side_Positions [ i ] then
4381: LD_EXP 18
4385: PUSH
4386: LD_VAR 0 2
4390: ARRAY
4391: IFFALSE 4423
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4393: LD_INT 25
4395: PPUSH
4396: LD_VAR 0 2
4400: PPUSH
4401: LD_INT 1
4403: PPUSH
4404: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4408: LD_INT 73
4410: PPUSH
4411: LD_VAR 0 2
4415: PPUSH
4416: LD_INT 1
4418: PPUSH
4419: CALL_OW 322
// end ;
4423: GO 4378
4425: POP
4426: POP
// end ;
4427: LD_VAR 0 1
4431: RET
// function prepare_sides ; var i , orig , pos ; begin
4432: LD_INT 0
4434: PPUSH
4435: PPUSH
4436: PPUSH
4437: PPUSH
// global_units := [ ] ;
4438: LD_ADDR_LOC 2
4442: PUSH
4443: EMPTY
4444: ST_TO_ADDR
// global_defined := false ;
4445: LD_ADDR_LOC 3
4449: PUSH
4450: LD_INT 0
4452: ST_TO_ADDR
// CountClassMembers ;
4453: CALL 4972 0 0
// for i := 1 to 8 do
4457: LD_ADDR_VAR 0 2
4461: PUSH
4462: DOUBLE
4463: LD_INT 1
4465: DEC
4466: ST_TO_ADDR
4467: LD_INT 8
4469: PUSH
4470: FOR_TO
4471: IFFALSE 4671
// if Side_Positions [ i ] then
4473: LD_EXP 18
4477: PUSH
4478: LD_VAR 0 2
4482: ARRAY
4483: IFFALSE 4669
// begin pos := Side_Positions [ i ] ;
4485: LD_ADDR_VAR 0 4
4489: PUSH
4490: LD_EXP 18
4494: PUSH
4495: LD_VAR 0 2
4499: ARRAY
4500: ST_TO_ADDR
// if Game_Type in [ 2 , 12 ] then
4501: LD_EXP 56
4505: PUSH
4506: LD_INT 2
4508: PUSH
4509: LD_INT 12
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: IN
4516: IFFALSE 4644
// begin if Game_Type = 12 then
4518: LD_EXP 56
4522: PUSH
4523: LD_INT 12
4525: EQUAL
4526: IFFALSE 4588
// begin prepare_side ( i , pos , Position_Nations [ pos ] ) ;
4528: LD_VAR 0 2
4532: PPUSH
4533: LD_VAR 0 4
4537: PPUSH
4538: LD_EXP 21
4542: PUSH
4543: LD_VAR 0 4
4547: ARRAY
4548: PPUSH
4549: CALL 3044 0 3
// prepare_side ( i , pos + 1 , Position_Nations [ pos + 1 ] ) end else
4553: LD_VAR 0 2
4557: PPUSH
4558: LD_VAR 0 4
4562: PUSH
4563: LD_INT 1
4565: PLUS
4566: PPUSH
4567: LD_EXP 21
4571: PUSH
4572: LD_VAR 0 4
4576: PUSH
4577: LD_INT 1
4579: PLUS
4580: ARRAY
4581: PPUSH
4582: CALL 3044 0 3
4586: GO 4642
// begin prepare_side ( i , pos , Side_Nations [ i ] ) ;
4588: LD_VAR 0 2
4592: PPUSH
4593: LD_VAR 0 4
4597: PPUSH
4598: LD_EXP 19
4602: PUSH
4603: LD_VAR 0 2
4607: ARRAY
4608: PPUSH
4609: CALL 3044 0 3
// prepare_side ( i , pos + 1 , Side_Nations [ i ] ) ;
4613: LD_VAR 0 2
4617: PPUSH
4618: LD_VAR 0 4
4622: PUSH
4623: LD_INT 1
4625: PLUS
4626: PPUSH
4627: LD_EXP 19
4631: PUSH
4632: LD_VAR 0 2
4636: ARRAY
4637: PPUSH
4638: CALL 3044 0 3
// end ; end else
4642: GO 4669
// prepare_side ( i , pos , Side_Nations [ i ] ) ;
4644: LD_VAR 0 2
4648: PPUSH
4649: LD_VAR 0 4
4653: PPUSH
4654: LD_EXP 19
4658: PUSH
4659: LD_VAR 0 2
4663: ARRAY
4664: PPUSH
4665: CALL 3044 0 3
// end ;
4669: GO 4470
4671: POP
4672: POP
// end ;
4673: LD_VAR 0 1
4677: RET
// function Modify_Nations ; var list , west , east , i ; begin
4678: LD_INT 0
4680: PPUSH
4681: PPUSH
4682: PPUSH
4683: PPUSH
4684: PPUSH
// list := [ ] ;
4685: LD_ADDR_VAR 0 2
4689: PUSH
4690: EMPTY
4691: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
4692: LD_ADDR_VAR 0 5
4696: PUSH
4697: DOUBLE
4698: LD_INT 1
4700: DEC
4701: ST_TO_ADDR
4702: LD_EXP 18
4706: PUSH
4707: LD_INT 0
4709: PLUS
4710: PUSH
4711: FOR_TO
4712: IFFALSE 4930
// if side_positions [ i ] = 1 then
4714: LD_EXP 18
4718: PUSH
4719: LD_VAR 0 5
4723: ARRAY
4724: PUSH
4725: LD_INT 1
4727: EQUAL
4728: IFFALSE 4822
// case side_nations [ i ] of 1 :
4730: LD_EXP 19
4734: PUSH
4735: LD_VAR 0 5
4739: ARRAY
4740: PUSH
4741: LD_INT 1
4743: DOUBLE
4744: EQUAL
4745: IFTRUE 4749
4747: GO 4767
4749: POP
// west := [ 1 , 2 ] ; 2 :
4750: LD_ADDR_VAR 0 3
4754: PUSH
4755: LD_INT 1
4757: PUSH
4758: LD_INT 2
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: ST_TO_ADDR
4765: GO 4820
4767: LD_INT 2
4769: DOUBLE
4770: EQUAL
4771: IFTRUE 4775
4773: GO 4793
4775: POP
// west := [ 2 , 3 ] ; 3 :
4776: LD_ADDR_VAR 0 3
4780: PUSH
4781: LD_INT 2
4783: PUSH
4784: LD_INT 3
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: ST_TO_ADDR
4791: GO 4820
4793: LD_INT 3
4795: DOUBLE
4796: EQUAL
4797: IFTRUE 4801
4799: GO 4819
4801: POP
// west := [ 3 , 1 ] ; end else
4802: LD_ADDR_VAR 0 3
4806: PUSH
4807: LD_INT 3
4809: PUSH
4810: LD_INT 1
4812: PUSH
4813: EMPTY
4814: LIST
4815: LIST
4816: ST_TO_ADDR
4817: GO 4820
4819: POP
4820: GO 4928
// if side_positions [ i ] = 3 then
4822: LD_EXP 18
4826: PUSH
4827: LD_VAR 0 5
4831: ARRAY
4832: PUSH
4833: LD_INT 3
4835: EQUAL
4836: IFFALSE 4928
// case side_nations [ i ] of 1 :
4838: LD_EXP 19
4842: PUSH
4843: LD_VAR 0 5
4847: ARRAY
4848: PUSH
4849: LD_INT 1
4851: DOUBLE
4852: EQUAL
4853: IFTRUE 4857
4855: GO 4875
4857: POP
// east := [ 1 , 2 ] ; 2 :
4858: LD_ADDR_VAR 0 4
4862: PUSH
4863: LD_INT 1
4865: PUSH
4866: LD_INT 2
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: ST_TO_ADDR
4873: GO 4928
4875: LD_INT 2
4877: DOUBLE
4878: EQUAL
4879: IFTRUE 4883
4881: GO 4901
4883: POP
// east := [ 2 , 3 ] ; 3 :
4884: LD_ADDR_VAR 0 4
4888: PUSH
4889: LD_INT 2
4891: PUSH
4892: LD_INT 3
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: ST_TO_ADDR
4899: GO 4928
4901: LD_INT 3
4903: DOUBLE
4904: EQUAL
4905: IFTRUE 4909
4907: GO 4927
4909: POP
// east := [ 3 , 1 ] ; end ;
4910: LD_ADDR_VAR 0 4
4914: PUSH
4915: LD_INT 3
4917: PUSH
4918: LD_INT 1
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: ST_TO_ADDR
4925: GO 4928
4927: POP
4928: GO 4711
4930: POP
4931: POP
// Position_Nations := west ^ east ^ [ 0 , 0 , 0 , 0 ] ;
4932: LD_ADDR_EXP 21
4936: PUSH
4937: LD_VAR 0 3
4941: PUSH
4942: LD_VAR 0 4
4946: ADD
4947: PUSH
4948: LD_INT 0
4950: PUSH
4951: LD_INT 0
4953: PUSH
4954: LD_INT 0
4956: PUSH
4957: LD_INT 0
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: LIST
4964: LIST
4965: ADD
4966: ST_TO_ADDR
// end ;
4967: LD_VAR 0 1
4971: RET
// function CountClassMembers ; var Mode ; begin
4972: LD_INT 0
4974: PPUSH
4975: PPUSH
// if No_Mechs then
4976: LD_EXP 72
4980: IFFALSE 4992
// Mode := 2 else
4982: LD_ADDR_VAR 0 2
4986: PUSH
4987: LD_INT 2
4989: ST_TO_ADDR
4990: GO 5000
// Mode := 1 ;
4992: LD_ADDR_VAR 0 2
4996: PUSH
4997: LD_INT 1
4999: ST_TO_ADDR
// neng := number_of_people ;
5000: LD_ADDR_LOC 5
5004: PUSH
5005: LD_EXP 6
5009: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
5010: LD_ADDR_LOC 8
5014: PUSH
5015: LD_LOC 5
5019: PUSH
5020: LD_INT 4
5022: PUSH
5023: LD_INT 3
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PUSH
5030: LD_VAR 0 2
5034: ARRAY
5035: DIV
5036: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
5037: LD_LOC 8
5041: PUSH
5042: LD_EXP 5
5046: LESS
5047: IFFALSE 5059
// nsol := number_of_breastworks ;
5049: LD_ADDR_LOC 8
5053: PUSH
5054: LD_EXP 5
5058: ST_TO_ADDR
// neng := neng - nsol ;
5059: LD_ADDR_LOC 5
5063: PUSH
5064: LD_LOC 5
5068: PUSH
5069: LD_LOC 8
5073: MINUS
5074: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
5075: LD_ADDR_LOC 6
5079: PUSH
5080: LD_LOC 5
5084: PUSH
5085: LD_INT 3
5087: PUSH
5088: LD_INT 2
5090: PUSH
5091: EMPTY
5092: LIST
5093: LIST
5094: PUSH
5095: LD_VAR 0 2
5099: ARRAY
5100: DIV
5101: ST_TO_ADDR
// if ( nsci < 1 ) then
5102: LD_LOC 6
5106: PUSH
5107: LD_INT 1
5109: LESS
5110: IFFALSE 5120
// nsci := 1 ;
5112: LD_ADDR_LOC 6
5116: PUSH
5117: LD_INT 1
5119: ST_TO_ADDR
// neng := neng - nsci ;
5120: LD_ADDR_LOC 5
5124: PUSH
5125: LD_LOC 5
5129: PUSH
5130: LD_LOC 6
5134: MINUS
5135: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5136: LD_ADDR_LOC 7
5140: PUSH
5141: LD_LOC 5
5145: PUSH
5146: LD_INT 2
5148: DIV
5149: PUSH
5150: LD_INT 0
5152: PUSH
5153: EMPTY
5154: LIST
5155: LIST
5156: PUSH
5157: LD_VAR 0 2
5161: ARRAY
5162: ST_TO_ADDR
// neng := neng - nmech ;
5163: LD_ADDR_LOC 5
5167: PUSH
5168: LD_LOC 5
5172: PUSH
5173: LD_LOC 7
5177: MINUS
5178: ST_TO_ADDR
// if ( neng < 1 ) then
5179: LD_LOC 5
5183: PUSH
5184: LD_INT 1
5186: LESS
5187: IFFALSE 5197
// neng := 1 ;
5189: LD_ADDR_LOC 5
5193: PUSH
5194: LD_INT 1
5196: ST_TO_ADDR
// end ;
5197: LD_VAR 0 1
5201: RET
// function Init_Win_Condition ; begin
5202: LD_INT 0
5204: PPUSH
// disable ( 98 ) ;
5205: LD_INT 98
5207: DISABLE_MARKED
// disable ( 99 ) ;
5208: LD_INT 99
5210: DISABLE_MARKED
// if Team_Game then
5211: LD_EXP 20
5215: IFFALSE 5222
// enable ( 98 ) else
5217: LD_INT 98
5219: ENABLE_MARKED
5220: GO 5225
// enable ( 99 ) ;
5222: LD_INT 99
5224: ENABLE_MARKED
// end ;
5225: LD_VAR 0 1
5229: RET
// starting begin DE_Triggers ;
5230: CALL 8691 0 0
// mp_selectmsg := true ;
5234: LD_ADDR_OWVAR 13
5238: PUSH
5239: LD_INT 1
5241: ST_TO_ADDR
// if ( game_type <> 1 ) and ( game_type <> 3 ) then
5242: LD_EXP 56
5246: PUSH
5247: LD_INT 1
5249: NONEQUAL
5250: PUSH
5251: LD_EXP 56
5255: PUSH
5256: LD_INT 3
5258: NONEQUAL
5259: AND
5260: IFFALSE 5266
// read_multiplayer_and_game_parameters ;
5262: CALL 976 0 0
// case Game_Type of 1 , 3 :
5266: LD_EXP 56
5270: PUSH
5271: LD_INT 1
5273: DOUBLE
5274: EQUAL
5275: IFTRUE 5285
5277: LD_INT 3
5279: DOUBLE
5280: EQUAL
5281: IFTRUE 5285
5283: GO 5297
5285: POP
// begin enable ( 19 ) ;
5286: LD_INT 19
5288: ENABLE_MARKED
// starting_ctf ;
5289: CALL 9330 0 0
// exit ;
5293: GO 5458
// end ; 12 :
5295: GO 5313
5297: LD_INT 12
5299: DOUBLE
5300: EQUAL
5301: IFTRUE 5305
5303: GO 5312
5305: POP
// Modify_Nations ; end ;
5306: CALL 4678 0 0
5310: GO 5313
5312: POP
// enable ( 55 ) ;
5313: LD_INT 55
5315: ENABLE_MARKED
// init_map ;
5316: CALL 276 0 0
// set_shared_visions_and_alliances ;
5320: CALL 2220 0 0
// prepare_sides ;
5324: CALL 4432 0 0
// InitLimits ;
5328: CALL 18084 0 0
// ShowTimer ;
5332: CALL 19021 0 0
// init_shipments ;
5336: CALL 5459 0 0
// init_respawn ;
5340: CALL 5963 0 0
// InitApeman ;
5344: CALL 7498 0 0
// music_nat := Side_Nations [ your_side ] ;
5348: LD_ADDR_OWVAR 71
5352: PUSH
5353: LD_EXP 19
5357: PUSH
5358: LD_OWVAR 2
5362: ARRAY
5363: ST_TO_ADDR
// if IAmSpec then
5364: CALL_OW 531
5368: IFFALSE 5404
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
5370: LD_INT 0
5372: PPUSH
5373: LD_INT 0
5375: PPUSH
5376: LD_OWVAR 2
5380: PPUSH
5381: LD_INT 32767
5383: NEG
5384: PPUSH
5385: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
5389: LD_INT 104
5391: PPUSH
5392: LD_INT 69
5394: PPUSH
5395: CALL_OW 86
// enable ( 400 ) ;
5399: LD_INT 400
5401: ENABLE_MARKED
// end else
5402: GO 5458
// begin ResetFog ;
5404: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5408: LD_EXP 26
5412: PUSH
5413: LD_EXP 18
5417: PUSH
5418: LD_OWVAR 2
5422: ARRAY
5423: ARRAY
5424: PUSH
5425: LD_INT 1
5427: ARRAY
5428: PPUSH
5429: LD_EXP 26
5433: PUSH
5434: LD_EXP 18
5438: PUSH
5439: LD_OWVAR 2
5443: ARRAY
5444: ARRAY
5445: PUSH
5446: LD_INT 2
5448: ARRAY
5449: PPUSH
5450: CALL_OW 86
// Init_Win_Condition ;
5454: CALL 5202 0 0
// end ; end ; end_of_file
5458: END
// var shipment , tictac ; export function init_shipments ; begin
5459: LD_INT 0
5461: PPUSH
// shipment := Rand ( 0 , 1 ) ;
5462: LD_ADDR_LOC 9
5466: PUSH
5467: LD_INT 0
5469: PPUSH
5470: LD_INT 1
5472: PPUSH
5473: CALL_OW 12
5477: ST_TO_ADDR
// tictac := 0 ;
5478: LD_ADDR_LOC 10
5482: PUSH
5483: LD_INT 0
5485: ST_TO_ADDR
// end ;
5486: LD_VAR 0 1
5490: RET
// every 0 0$5 + 0 0$1.1 marked 55 do var d ;
5491: GO 5493
5493: DISABLE
5494: LD_INT 0
5496: PPUSH
// begin case tick of 1 .. 1 1$0 :
5497: LD_OWVAR 1
5501: PUSH
5502: LD_INT 1
5504: DOUBLE
5505: GREATEREQUAL
5506: IFFALSE 5514
5508: LD_INT 2100
5510: DOUBLE
5511: LESSEQUAL
5512: IFTRUE 5516
5514: GO 5527
5516: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5517: LD_ADDR_VAR 0 1
5521: PUSH
5522: LD_INT 150
5524: ST_TO_ADDR
5525: GO 5710
5527: LD_INT 2100
5529: PUSH
5530: LD_INT 1
5532: PLUS
5533: DOUBLE
5534: GREATEREQUAL
5535: IFFALSE 5543
5537: LD_INT 10500
5539: DOUBLE
5540: LESSEQUAL
5541: IFTRUE 5545
5543: GO 5556
5545: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5546: LD_ADDR_VAR 0 1
5550: PUSH
5551: LD_INT 100
5553: ST_TO_ADDR
5554: GO 5710
5556: LD_INT 10500
5558: PUSH
5559: LD_INT 1
5561: PLUS
5562: DOUBLE
5563: GREATEREQUAL
5564: IFFALSE 5572
5566: LD_INT 21000
5568: DOUBLE
5569: LESSEQUAL
5570: IFTRUE 5574
5572: GO 5585
5574: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5575: LD_ADDR_VAR 0 1
5579: PUSH
5580: LD_INT 90
5582: ST_TO_ADDR
5583: GO 5710
5585: LD_INT 21000
5587: PUSH
5588: LD_INT 1
5590: PLUS
5591: DOUBLE
5592: GREATEREQUAL
5593: IFFALSE 5601
5595: LD_INT 42000
5597: DOUBLE
5598: LESSEQUAL
5599: IFTRUE 5603
5601: GO 5614
5603: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5604: LD_ADDR_VAR 0 1
5608: PUSH
5609: LD_INT 70
5611: ST_TO_ADDR
5612: GO 5710
5614: LD_INT 42000
5616: PUSH
5617: LD_INT 1
5619: PLUS
5620: DOUBLE
5621: GREATEREQUAL
5622: IFFALSE 5630
5624: LD_INT 63000
5626: DOUBLE
5627: LESSEQUAL
5628: IFTRUE 5632
5630: GO 5643
5632: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5633: LD_ADDR_VAR 0 1
5637: PUSH
5638: LD_INT 60
5640: ST_TO_ADDR
5641: GO 5710
5643: LD_INT 63000
5645: PUSH
5646: LD_INT 1
5648: PLUS
5649: DOUBLE
5650: GREATEREQUAL
5651: IFFALSE 5659
5653: LD_INT 105000
5655: DOUBLE
5656: LESSEQUAL
5657: IFTRUE 5661
5659: GO 5672
5661: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5662: LD_ADDR_VAR 0 1
5666: PUSH
5667: LD_INT 35
5669: ST_TO_ADDR
5670: GO 5710
5672: LD_INT 105000
5674: PUSH
5675: LD_INT 1
5677: PLUS
5678: DOUBLE
5679: GREATEREQUAL
5680: IFFALSE 5688
5682: LD_INT 630000
5684: DOUBLE
5685: LESSEQUAL
5686: IFTRUE 5690
5688: GO 5701
5690: POP
// d := 20 ; else
5691: LD_ADDR_VAR 0 1
5695: PUSH
5696: LD_INT 20
5698: ST_TO_ADDR
5699: GO 5710
5701: POP
// d := 0 ; end ;
5702: LD_ADDR_VAR 0 1
5706: PUSH
5707: LD_INT 0
5709: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5710: LD_INT 1
5712: PPUSH
5713: LD_INT 10000
5715: PPUSH
5716: CALL_OW 12
5720: PUSH
5721: LD_VAR 0 1
5725: PUSH
5726: LD_EXP 10
5730: MUL
5731: LESSEQUAL
5732: IFFALSE 5786
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5734: LD_INT 1
5736: PPUSH
5737: LD_INT 140
5739: PPUSH
5740: CALL_OW 12
5744: PPUSH
5745: CALL_OW 67
// shipment := ( shipment + 1 ) mod 2 ;
5749: LD_ADDR_LOC 9
5753: PUSH
5754: LD_LOC 9
5758: PUSH
5759: LD_INT 1
5761: PLUS
5762: PUSH
5763: LD_INT 2
5765: MOD
5766: ST_TO_ADDR
// CreateCratesArea ( 5 , west_side + shipment , true ) ;
5767: LD_INT 5
5769: PPUSH
5770: LD_INT 8
5772: PUSH
5773: LD_LOC 9
5777: PLUS
5778: PPUSH
5779: LD_INT 1
5781: PPUSH
5782: CALL_OW 55
// end ; enable ;
5786: ENABLE
// end ;
5787: PPOPN 1
5789: END
// every 0 0$10 trigger TICK > ( ( 2 2$0 * tictac ) + tictac * ( 1 1$30 - shipments_density * ( 0 0$2 ) ) ) marked 55 do var i , amount , is_in ;
5790: LD_OWVAR 1
5794: PUSH
5795: LD_INT 4200
5797: PUSH
5798: LD_LOC 10
5802: MUL
5803: PUSH
5804: LD_LOC 10
5808: PUSH
5809: LD_INT 3150
5811: PUSH
5812: LD_EXP 10
5816: PUSH
5817: LD_INT 70
5819: MUL
5820: MINUS
5821: MUL
5822: PLUS
5823: GREATER
5824: IFFALSE 5960
5826: GO 5828
5828: DISABLE
5829: LD_INT 0
5831: PPUSH
5832: PPUSH
5833: PPUSH
// begin tictac := tictac + 1 ;
5834: LD_ADDR_LOC 10
5838: PUSH
5839: LD_LOC 10
5843: PUSH
5844: LD_INT 1
5846: PLUS
5847: ST_TO_ADDR
// amount := Rand ( 3 , 5 ) ;
5848: LD_ADDR_VAR 0 2
5852: PUSH
5853: LD_INT 3
5855: PPUSH
5856: LD_INT 5
5858: PPUSH
5859: CALL_OW 12
5863: ST_TO_ADDR
// for i = 0 to 3 do
5864: LD_ADDR_VAR 0 1
5868: PUSH
5869: DOUBLE
5870: LD_INT 0
5872: DEC
5873: ST_TO_ADDR
5874: LD_INT 3
5876: PUSH
5877: FOR_TO
5878: IFFALSE 5957
// begin is_in := GetResourceArea ( west_side + i , mat_cans ) ;
5880: LD_ADDR_VAR 0 3
5884: PUSH
5885: LD_INT 8
5887: PUSH
5888: LD_VAR 0 1
5892: PLUS
5893: PPUSH
5894: LD_INT 1
5896: PPUSH
5897: CALL_OW 287
5901: ST_TO_ADDR
// if ( is_in < 500 ) or ( Rand ( 1 , 10 ) > ( is_in div 100 ) ) then
5902: LD_VAR 0 3
5906: PUSH
5907: LD_INT 500
5909: LESS
5910: PUSH
5911: LD_INT 1
5913: PPUSH
5914: LD_INT 10
5916: PPUSH
5917: CALL_OW 12
5921: PUSH
5922: LD_VAR 0 3
5926: PUSH
5927: LD_INT 100
5929: DIV
5930: GREATER
5931: OR
5932: IFFALSE 5955
// CreateCratesArea ( amount , nw + i , true ) ;
5934: LD_VAR 0 2
5938: PPUSH
5939: LD_INT 12
5941: PUSH
5942: LD_VAR 0 1
5946: PLUS
5947: PPUSH
5948: LD_INT 1
5950: PPUSH
5951: CALL_OW 55
// end ;
5955: GO 5877
5957: POP
5958: POP
// enable ;
5959: ENABLE
// end ; end_of_file
5960: PPOPN 3
5962: END
// var respawn_queue , nation_queue ; export function init_respawn ; begin
5963: LD_INT 0
5965: PPUSH
// if not def_people_respawning then
5966: LD_EXP 68
5970: NOT
5971: IFFALSE 5975
// exit ;
5973: GO 6078
// respawn_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5975: LD_ADDR_LOC 11
5979: PUSH
5980: LD_INT 0
5982: PUSH
5983: LD_INT 0
5985: PUSH
5986: LD_INT 0
5988: PUSH
5989: LD_INT 0
5991: PUSH
5992: LD_INT 0
5994: PUSH
5995: LD_INT 0
5997: PUSH
5998: LD_INT 0
6000: PUSH
6001: LD_INT 0
6003: PUSH
6004: EMPTY
6005: LIST
6006: LIST
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: ST_TO_ADDR
// nation_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6014: LD_ADDR_LOC 12
6018: PUSH
6019: LD_INT 0
6021: PUSH
6022: LD_INT 0
6024: PUSH
6025: LD_INT 0
6027: PUSH
6028: LD_INT 0
6030: PUSH
6031: LD_INT 0
6033: PUSH
6034: LD_INT 0
6036: PUSH
6037: LD_INT 0
6039: PUSH
6040: LD_INT 0
6042: PUSH
6043: EMPTY
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: ST_TO_ADDR
// if Game_Type in [ 2 , 12 ] then
6053: LD_EXP 56
6057: PUSH
6058: LD_INT 2
6060: PUSH
6061: LD_INT 12
6063: PUSH
6064: EMPTY
6065: LIST
6066: LIST
6067: IN
6068: IFFALSE 6075
// enable ( 41 ) else
6070: LD_INT 41
6072: ENABLE_MARKED
6073: GO 6078
// enable ( 40 ) ;
6075: LD_INT 40
6077: ENABLE_MARKED
// end ;
6078: LD_VAR 0 1
6082: RET
// every 0 0$10 marked 40 do var list , time , side ;
6083: GO 6085
6085: DISABLE
6086: LD_INT 0
6088: PPUSH
6089: PPUSH
6090: PPUSH
// begin for side = 1 to Side_Positions do
6091: LD_ADDR_VAR 0 3
6095: PUSH
6096: DOUBLE
6097: LD_INT 1
6099: DEC
6100: ST_TO_ADDR
6101: LD_EXP 18
6105: PUSH
6106: FOR_TO
6107: IFFALSE 6284
// if Side_Positions [ side ] then
6109: LD_EXP 18
6113: PUSH
6114: LD_VAR 0 3
6118: ARRAY
6119: IFFALSE 6282
// begin list := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6121: LD_ADDR_VAR 0 1
6125: PUSH
6126: LD_INT 22
6128: PUSH
6129: LD_VAR 0 3
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PUSH
6138: LD_INT 21
6140: PUSH
6141: LD_INT 1
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PUSH
6148: LD_INT 3
6150: PUSH
6151: LD_INT 23
6153: PUSH
6154: LD_INT 0
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: LIST
6165: LIST
6166: PPUSH
6167: CALL_OW 69
6171: ST_TO_ADDR
// if ( list < number_of_people ) and ( not respawn_queue [ side ] ) then
6172: LD_VAR 0 1
6176: PUSH
6177: LD_EXP 6
6181: LESS
6182: PUSH
6183: LD_LOC 11
6187: PUSH
6188: LD_VAR 0 3
6192: ARRAY
6193: NOT
6194: AND
6195: IFFALSE 6222
// respawn_queue := Replace ( respawn_queue , side , TICK ) ;
6197: LD_ADDR_LOC 11
6201: PUSH
6202: LD_LOC 11
6206: PPUSH
6207: LD_VAR 0 3
6211: PPUSH
6212: LD_OWVAR 1
6216: PPUSH
6217: CALL_OW 1
6221: ST_TO_ADDR
// time := TICK - respawn_queue [ side ] ;
6222: LD_ADDR_VAR 0 2
6226: PUSH
6227: LD_OWVAR 1
6231: PUSH
6232: LD_LOC 11
6236: PUSH
6237: LD_VAR 0 3
6241: ARRAY
6242: MINUS
6243: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6244: LD_LOC 11
6248: PUSH
6249: LD_VAR 0 3
6253: ARRAY
6254: PUSH
6255: LD_VAR 0 2
6259: PUSH
6260: LD_EXP 13
6264: GREATER
6265: AND
6266: IFFALSE 6282
// respawn_character ( side , time ) ;
6268: LD_VAR 0 3
6272: PPUSH
6273: LD_VAR 0 2
6277: PPUSH
6278: CALL 6290 0 2
// end ;
6282: GO 6106
6284: POP
6285: POP
// enable ;
6286: ENABLE
// end ;
6287: PPOPN 3
6289: END
// function respawn_character ( side , time ) ; var dep ; begin
6290: LD_INT 0
6292: PPUSH
6293: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6294: LD_INT 0
6296: PPUSH
6297: LD_INT 1
6299: PPUSH
6300: CALL_OW 12
6304: PUSH
6305: LD_VAR 0 2
6309: PUSH
6310: LD_EXP 14
6314: LESS
6315: AND
6316: IFFALSE 6320
// exit ;
6318: GO 6527
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6320: LD_ADDR_VAR 0 4
6324: PUSH
6325: LD_INT 22
6327: PUSH
6328: LD_VAR 0 1
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: PUSH
6337: LD_INT 2
6339: PUSH
6340: LD_INT 30
6342: PUSH
6343: LD_INT 0
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: PUSH
6350: LD_INT 30
6352: PUSH
6353: LD_INT 1
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: PUSH
6360: EMPTY
6361: LIST
6362: LIST
6363: LIST
6364: PUSH
6365: LD_INT 50
6367: PUSH
6368: EMPTY
6369: LIST
6370: PUSH
6371: EMPTY
6372: LIST
6373: LIST
6374: LIST
6375: PPUSH
6376: CALL_OW 69
6380: ST_TO_ADDR
// if not dep then
6381: LD_VAR 0 4
6385: NOT
6386: IFFALSE 6392
// exit else
6388: GO 6527
6390: GO 6416
// dep := dep [ Rand ( 1 , dep ) ] ;
6392: LD_ADDR_VAR 0 4
6396: PUSH
6397: LD_VAR 0 4
6401: PUSH
6402: LD_INT 1
6404: PPUSH
6405: LD_VAR 0 4
6409: PPUSH
6410: CALL_OW 12
6414: ARRAY
6415: ST_TO_ADDR
// uc_side := side ;
6416: LD_ADDR_OWVAR 20
6420: PUSH
6421: LD_VAR 0 1
6425: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6426: LD_ADDR_OWVAR 21
6430: PUSH
6431: LD_EXP 19
6435: PUSH
6436: LD_VAR 0 1
6440: ARRAY
6441: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6442: LD_INT 0
6444: PPUSH
6445: LD_INT 0
6447: PPUSH
6448: LD_EXP 7
6452: PUSH
6453: LD_INT 2
6455: DIV
6456: PPUSH
6457: CALL_OW 380
// hc_importance := 0 ;
6461: LD_ADDR_OWVAR 32
6465: PUSH
6466: LD_INT 0
6468: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
6469: CALL_OW 44
6473: PPUSH
6474: LD_VAR 0 4
6478: PPUSH
6479: CALL_OW 250
6483: PPUSH
6484: LD_VAR 0 4
6488: PPUSH
6489: CALL_OW 251
6493: PPUSH
6494: LD_INT 10
6496: PPUSH
6497: LD_INT 1
6499: PPUSH
6500: CALL_OW 50
// respawn_queue := Replace ( respawn_queue , side , 0 ) ;
6504: LD_ADDR_LOC 11
6508: PUSH
6509: LD_LOC 11
6513: PPUSH
6514: LD_VAR 0 1
6518: PPUSH
6519: LD_INT 0
6521: PPUSH
6522: CALL_OW 1
6526: ST_TO_ADDR
// end ;
6527: LD_VAR 0 3
6531: RET
// every 0 0$10 marked 41 do var i , list , time , nation , side , limit ;
6532: GO 6534
6534: DISABLE
6535: LD_INT 0
6537: PPUSH
6538: PPUSH
6539: PPUSH
6540: PPUSH
6541: PPUSH
6542: PPUSH
// begin if Game_Type = 12 then
6543: LD_EXP 56
6547: PUSH
6548: LD_INT 12
6550: EQUAL
6551: IFFALSE 6565
// limit := number_of_people else
6553: LD_ADDR_VAR 0 6
6557: PUSH
6558: LD_EXP 6
6562: ST_TO_ADDR
6563: GO 6579
// limit := 2 * number_of_people ;
6565: LD_ADDR_VAR 0 6
6569: PUSH
6570: LD_INT 2
6572: PUSH
6573: LD_EXP 6
6577: MUL
6578: ST_TO_ADDR
// for i = 1 to 4 do
6579: LD_ADDR_VAR 0 1
6583: PUSH
6584: DOUBLE
6585: LD_INT 1
6587: DEC
6588: ST_TO_ADDR
6589: LD_INT 4
6591: PUSH
6592: FOR_TO
6593: IFFALSE 6885
// begin side := GetSidePositions ( [ 1 , 1 , 3 , 3 ] [ i ] ) ;
6595: LD_ADDR_VAR 0 5
6599: PUSH
6600: LD_INT 1
6602: PUSH
6603: LD_INT 1
6605: PUSH
6606: LD_INT 3
6608: PUSH
6609: LD_INT 3
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: PUSH
6618: LD_VAR 0 1
6622: ARRAY
6623: PPUSH
6624: CALL 7227 0 1
6628: ST_TO_ADDR
// if Game_Type = 12 then
6629: LD_EXP 56
6633: PUSH
6634: LD_INT 12
6636: EQUAL
6637: IFFALSE 6657
// nation := Position_Nations [ i ] else
6639: LD_ADDR_VAR 0 4
6643: PUSH
6644: LD_EXP 21
6648: PUSH
6649: LD_VAR 0 1
6653: ARRAY
6654: ST_TO_ADDR
6655: GO 6673
// nation := Side_Nations [ side ] ;
6657: LD_ADDR_VAR 0 4
6661: PUSH
6662: LD_EXP 19
6666: PUSH
6667: LD_VAR 0 5
6671: ARRAY
6672: ST_TO_ADDR
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_nation , nation ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6673: LD_ADDR_VAR 0 2
6677: PUSH
6678: LD_INT 22
6680: PUSH
6681: LD_VAR 0 5
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: PUSH
6690: LD_INT 23
6692: PUSH
6693: LD_VAR 0 4
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PUSH
6702: LD_INT 21
6704: PUSH
6705: LD_INT 1
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: PUSH
6712: LD_INT 3
6714: PUSH
6715: LD_INT 23
6717: PUSH
6718: LD_INT 0
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: PPUSH
6732: CALL_OW 69
6736: ST_TO_ADDR
// if ( list < limit ) and ( not respawn_queue [ side ] ) then
6737: LD_VAR 0 2
6741: PUSH
6742: LD_VAR 0 6
6746: LESS
6747: PUSH
6748: LD_LOC 11
6752: PUSH
6753: LD_VAR 0 5
6757: ARRAY
6758: NOT
6759: AND
6760: IFFALSE 6812
// begin respawn_queue = Replace ( respawn_queue , side , TICK ) ;
6762: LD_ADDR_LOC 11
6766: PUSH
6767: LD_LOC 11
6771: PPUSH
6772: LD_VAR 0 5
6776: PPUSH
6777: LD_OWVAR 1
6781: PPUSH
6782: CALL_OW 1
6786: ST_TO_ADDR
// nation_queue = Replace ( nation_queue , side , nation ) ;
6787: LD_ADDR_LOC 12
6791: PUSH
6792: LD_LOC 12
6796: PPUSH
6797: LD_VAR 0 5
6801: PPUSH
6802: LD_VAR 0 4
6806: PPUSH
6807: CALL_OW 1
6811: ST_TO_ADDR
// end ; time := TICK - respawn_queue [ side ] ;
6812: LD_ADDR_VAR 0 3
6816: PUSH
6817: LD_OWVAR 1
6821: PUSH
6822: LD_LOC 11
6826: PUSH
6827: LD_VAR 0 5
6831: ARRAY
6832: MINUS
6833: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6834: LD_LOC 11
6838: PUSH
6839: LD_VAR 0 5
6843: ARRAY
6844: PUSH
6845: LD_VAR 0 3
6849: PUSH
6850: LD_EXP 13
6854: GREATER
6855: AND
6856: IFFALSE 6883
// respawn_character_nation ( side , time , nation_queue [ side ] ) ;
6858: LD_VAR 0 5
6862: PPUSH
6863: LD_VAR 0 3
6867: PPUSH
6868: LD_LOC 12
6872: PUSH
6873: LD_VAR 0 5
6877: ARRAY
6878: PPUSH
6879: CALL 6891 0 3
// end ;
6883: GO 6592
6885: POP
6886: POP
// enable ;
6887: ENABLE
// end ;
6888: PPOPN 6
6890: END
// function respawn_character_nation ( side , time , nation ) ; var dep ; begin
6891: LD_INT 0
6893: PPUSH
6894: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6895: LD_INT 0
6897: PPUSH
6898: LD_INT 1
6900: PPUSH
6901: CALL_OW 12
6905: PUSH
6906: LD_VAR 0 2
6910: PUSH
6911: LD_EXP 14
6915: LESS
6916: AND
6917: IFFALSE 6921
// exit ;
6919: GO 7222
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_nation , nation ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6921: LD_ADDR_VAR 0 5
6925: PUSH
6926: LD_INT 22
6928: PUSH
6929: LD_VAR 0 1
6933: PUSH
6934: EMPTY
6935: LIST
6936: LIST
6937: PUSH
6938: LD_INT 23
6940: PUSH
6941: LD_VAR 0 3
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PUSH
6950: LD_INT 2
6952: PUSH
6953: LD_INT 30
6955: PUSH
6956: LD_INT 0
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: PUSH
6963: LD_INT 30
6965: PUSH
6966: LD_INT 1
6968: PUSH
6969: EMPTY
6970: LIST
6971: LIST
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: LIST
6977: PUSH
6978: LD_INT 50
6980: PUSH
6981: EMPTY
6982: LIST
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: PPUSH
6990: CALL_OW 69
6994: ST_TO_ADDR
// if not dep then
6995: LD_VAR 0 5
6999: NOT
7000: IFFALSE 7063
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
7002: LD_ADDR_VAR 0 5
7006: PUSH
7007: LD_INT 22
7009: PUSH
7010: LD_VAR 0 1
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: PUSH
7019: LD_INT 2
7021: PUSH
7022: LD_INT 30
7024: PUSH
7025: LD_INT 0
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: PUSH
7032: LD_INT 30
7034: PUSH
7035: LD_INT 1
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: LIST
7046: PUSH
7047: LD_INT 50
7049: PUSH
7050: EMPTY
7051: LIST
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: LIST
7057: PPUSH
7058: CALL_OW 69
7062: ST_TO_ADDR
// if not dep then
7063: LD_VAR 0 5
7067: NOT
7068: IFFALSE 7074
// exit else
7070: GO 7222
7072: GO 7098
// dep := dep [ Rand ( 1 , dep ) ] ;
7074: LD_ADDR_VAR 0 5
7078: PUSH
7079: LD_VAR 0 5
7083: PUSH
7084: LD_INT 1
7086: PPUSH
7087: LD_VAR 0 5
7091: PPUSH
7092: CALL_OW 12
7096: ARRAY
7097: ST_TO_ADDR
// uc_side := side ;
7098: LD_ADDR_OWVAR 20
7102: PUSH
7103: LD_VAR 0 1
7107: ST_TO_ADDR
// uc_nation := nation ;
7108: LD_ADDR_OWVAR 21
7112: PUSH
7113: LD_VAR 0 3
7117: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level ) ;
7118: LD_INT 0
7120: PPUSH
7121: LD_INT 0
7123: PPUSH
7124: LD_EXP 7
7128: PPUSH
7129: CALL_OW 380
// hc_importance := 0 ;
7133: LD_ADDR_OWVAR 32
7137: PUSH
7138: LD_INT 0
7140: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
7141: CALL_OW 44
7145: PPUSH
7146: LD_VAR 0 5
7150: PPUSH
7151: CALL_OW 250
7155: PPUSH
7156: LD_VAR 0 5
7160: PPUSH
7161: CALL_OW 251
7165: PPUSH
7166: LD_INT 10
7168: PPUSH
7169: LD_INT 1
7171: PPUSH
7172: CALL_OW 50
// respawn_queue := Replace ( respawn_queue , side , 0 ) ;
7176: LD_ADDR_LOC 11
7180: PUSH
7181: LD_LOC 11
7185: PPUSH
7186: LD_VAR 0 1
7190: PPUSH
7191: LD_INT 0
7193: PPUSH
7194: CALL_OW 1
7198: ST_TO_ADDR
// nation_queue := Replace ( nation_queue , side , 0 ) ;
7199: LD_ADDR_LOC 12
7203: PUSH
7204: LD_LOC 12
7208: PPUSH
7209: LD_VAR 0 1
7213: PPUSH
7214: LD_INT 0
7216: PPUSH
7217: CALL_OW 1
7221: ST_TO_ADDR
// end ;
7222: LD_VAR 0 4
7226: RET
// function GetSidePositions ( i ) ; var un , side ; begin
7227: LD_INT 0
7229: PPUSH
7230: PPUSH
7231: PPUSH
// side := false ;
7232: LD_ADDR_VAR 0 4
7236: PUSH
7237: LD_INT 0
7239: ST_TO_ADDR
// for un = 1 to Side_Positions do
7240: LD_ADDR_VAR 0 3
7244: PUSH
7245: DOUBLE
7246: LD_INT 1
7248: DEC
7249: ST_TO_ADDR
7250: LD_EXP 18
7254: PUSH
7255: FOR_TO
7256: IFFALSE 7290
// if Side_Positions [ un ] = i then
7258: LD_EXP 18
7262: PUSH
7263: LD_VAR 0 3
7267: ARRAY
7268: PUSH
7269: LD_VAR 0 1
7273: EQUAL
7274: IFFALSE 7288
// begin side := un ;
7276: LD_ADDR_VAR 0 4
7280: PUSH
7281: LD_VAR 0 3
7285: ST_TO_ADDR
// break ;
7286: GO 7290
// end ;
7288: GO 7255
7290: POP
7291: POP
// result := side ;
7292: LD_ADDR_VAR 0 2
7296: PUSH
7297: LD_VAR 0 4
7301: ST_TO_ADDR
// end ; end_of_file
7302: LD_VAR 0 2
7306: RET
// every 20 20$00 trigger apemanNumber do
7307: LD_EXP 30
7311: IFFALSE 7344
7313: GO 7315
7315: DISABLE
// begin enable ;
7316: ENABLE
// if apeLevel >= 8 then
7317: LD_EXP 35
7321: PUSH
7322: LD_INT 8
7324: GREATEREQUAL
7325: IFFALSE 7330
// disable else
7327: DISABLE
7328: GO 7344
// apeLevel := apeLevel + 1 ;
7330: LD_ADDR_EXP 35
7334: PUSH
7335: LD_EXP 35
7339: PUSH
7340: LD_INT 1
7342: PLUS
7343: ST_TO_ADDR
// end ;
7344: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
7345: LD_EXP 30
7349: PUSH
7350: LD_EXP 31
7354: LESS
7355: IFFALSE 7495
7357: GO 7359
7359: DISABLE
7360: LD_INT 0
7362: PPUSH
7363: PPUSH
7364: PPUSH
7365: PPUSH
// begin enable ;
7366: ENABLE
// for i := 1 to apemanPos do
7367: LD_ADDR_VAR 0 1
7371: PUSH
7372: DOUBLE
7373: LD_INT 1
7375: DEC
7376: ST_TO_ADDR
7377: LD_EXP 33
7381: PUSH
7382: FOR_TO
7383: IFFALSE 7493
// begin if apemanPlayerCount [ i ] then
7385: LD_EXP 34
7389: PUSH
7390: LD_VAR 0 1
7394: ARRAY
7395: IFFALSE 7491
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
7397: LD_EXP 34
7401: PUSH
7402: LD_VAR 0 1
7406: ARRAY
7407: PUSH
7408: LD_EXP 33
7412: PUSH
7413: LD_VAR 0 1
7417: ARRAY
7418: GREATER
7419: IFFALSE 7491
// begin ape := PrepareApeman ;
7421: LD_ADDR_VAR 0 2
7425: PUSH
7426: CALL 7998 0 0
7430: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
7431: LD_VAR 0 2
7435: PPUSH
7436: LD_EXP 36
7440: PUSH
7441: LD_VAR 0 1
7445: ARRAY
7446: PPUSH
7447: LD_INT 0
7449: PPUSH
7450: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
7454: LD_ADDR_EXP 33
7458: PUSH
7459: LD_EXP 33
7463: PPUSH
7464: LD_VAR 0 1
7468: PPUSH
7469: LD_EXP 33
7473: PUSH
7474: LD_VAR 0 1
7478: ARRAY
7479: PUSH
7480: LD_VAR 0 2
7484: UNION
7485: PPUSH
7486: CALL_OW 1
7490: ST_TO_ADDR
// end ; end ; end ;
7491: GO 7382
7493: POP
7494: POP
// end ;
7495: PPOPN 4
7497: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
7498: LD_INT 0
7500: PPUSH
7501: PPUSH
7502: PPUSH
7503: PPUSH
7504: PPUSH
7505: PPUSH
7506: PPUSH
// playersAmount := 0 ;
7507: LD_ADDR_VAR 0 3
7511: PUSH
7512: LD_INT 0
7514: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base2ApeArea , Base1ApeArea ] ;
7515: LD_ADDR_VAR 0 7
7519: PUSH
7520: LD_INT 18
7522: PUSH
7523: LD_INT 19
7525: PUSH
7526: LD_INT 19
7528: PUSH
7529: LD_INT 18
7531: PUSH
7532: EMPTY
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7538: LD_ADDR_EXP 36
7542: PUSH
7543: LD_INT 0
7545: PUSH
7546: LD_INT 0
7548: PUSH
7549: LD_INT 0
7551: PUSH
7552: LD_INT 0
7554: PUSH
7555: LD_INT 0
7557: PUSH
7558: LD_INT 0
7560: PUSH
7561: LD_INT 0
7563: PUSH
7564: LD_INT 0
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: ST_TO_ADDR
// for j = 1 to Side_Positions do
7577: LD_ADDR_VAR 0 4
7581: PUSH
7582: DOUBLE
7583: LD_INT 1
7585: DEC
7586: ST_TO_ADDR
7587: LD_EXP 18
7591: PUSH
7592: FOR_TO
7593: IFFALSE 7660
// if Side_Positions [ j ] then
7595: LD_EXP 18
7599: PUSH
7600: LD_VAR 0 4
7604: ARRAY
7605: IFFALSE 7658
// begin playersAmount := playersAmount + 1 ;
7607: LD_ADDR_VAR 0 3
7611: PUSH
7612: LD_VAR 0 3
7616: PUSH
7617: LD_INT 1
7619: PLUS
7620: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
7621: LD_ADDR_EXP 36
7625: PUSH
7626: LD_EXP 36
7630: PPUSH
7631: LD_VAR 0 4
7635: PPUSH
7636: LD_VAR 0 7
7640: PUSH
7641: LD_EXP 18
7645: PUSH
7646: LD_VAR 0 4
7650: ARRAY
7651: ARRAY
7652: PPUSH
7653: CALL_OW 1
7657: ST_TO_ADDR
// end ;
7658: GO 7592
7660: POP
7661: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
7662: LD_ADDR_EXP 32
7666: PUSH
7667: LD_INT 3
7669: PUSH
7670: LD_EXP 12
7674: MUL
7675: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
7676: LD_ADDR_EXP 30
7680: PUSH
7681: LD_VAR 0 3
7685: PUSH
7686: LD_EXP 32
7690: MUL
7691: ST_TO_ADDR
// apemanLimit := apemanNumber ;
7692: LD_ADDR_EXP 31
7696: PUSH
7697: LD_EXP 30
7701: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7702: LD_ADDR_EXP 33
7706: PUSH
7707: LD_INT 0
7709: PUSH
7710: LD_INT 0
7712: PUSH
7713: LD_INT 0
7715: PUSH
7716: LD_INT 0
7718: PUSH
7719: LD_INT 0
7721: PUSH
7722: LD_INT 0
7724: PUSH
7725: LD_INT 0
7727: PUSH
7728: LD_INT 0
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7741: LD_ADDR_EXP 34
7745: PUSH
7746: LD_INT 0
7748: PUSH
7749: LD_INT 0
7751: PUSH
7752: LD_INT 0
7754: PUSH
7755: LD_INT 0
7757: PUSH
7758: LD_INT 0
7760: PUSH
7761: LD_INT 0
7763: PUSH
7764: LD_INT 0
7766: PUSH
7767: LD_INT 0
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: LIST
7779: ST_TO_ADDR
// apeLevel := 1 ;
7780: LD_ADDR_EXP 35
7784: PUSH
7785: LD_INT 1
7787: ST_TO_ADDR
// if not apemanNumber then
7788: LD_EXP 30
7792: NOT
7793: IFFALSE 7797
// exit ;
7795: GO 7993
// for i := 1 to apemanPerPlayer do
7797: LD_ADDR_VAR 0 2
7801: PUSH
7802: DOUBLE
7803: LD_INT 1
7805: DEC
7806: ST_TO_ADDR
7807: LD_EXP 32
7811: PUSH
7812: FOR_TO
7813: IFFALSE 7991
// begin for j := 1 to Side_Positions do
7815: LD_ADDR_VAR 0 4
7819: PUSH
7820: DOUBLE
7821: LD_INT 1
7823: DEC
7824: ST_TO_ADDR
7825: LD_EXP 18
7829: PUSH
7830: FOR_TO
7831: IFFALSE 7987
// if Side_Positions [ j ] then
7833: LD_EXP 18
7837: PUSH
7838: LD_VAR 0 4
7842: ARRAY
7843: IFFALSE 7985
// begin pos := Side_Positions [ j ] ;
7845: LD_ADDR_VAR 0 6
7849: PUSH
7850: LD_EXP 18
7854: PUSH
7855: LD_VAR 0 4
7859: ARRAY
7860: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
7861: LD_ADDR_EXP 34
7865: PUSH
7866: LD_EXP 34
7870: PPUSH
7871: LD_VAR 0 4
7875: PPUSH
7876: LD_EXP 34
7880: PUSH
7881: LD_VAR 0 4
7885: ARRAY
7886: PUSH
7887: LD_INT 1
7889: PLUS
7890: PPUSH
7891: CALL_OW 1
7895: ST_TO_ADDR
// ape := PrepareApeman ;
7896: LD_ADDR_VAR 0 5
7900: PUSH
7901: CALL 7998 0 0
7905: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
7906: LD_ADDR_EXP 33
7910: PUSH
7911: LD_EXP 33
7915: PPUSH
7916: LD_VAR 0 4
7920: PPUSH
7921: LD_EXP 33
7925: PUSH
7926: LD_VAR 0 4
7930: ARRAY
7931: PPUSH
7932: LD_EXP 33
7936: PUSH
7937: LD_VAR 0 4
7941: ARRAY
7942: PUSH
7943: LD_INT 1
7945: PLUS
7946: PPUSH
7947: LD_VAR 0 5
7951: PPUSH
7952: CALL_OW 1
7956: PPUSH
7957: CALL_OW 1
7961: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
7962: LD_VAR 0 5
7966: PPUSH
7967: LD_EXP 36
7971: PUSH
7972: LD_VAR 0 4
7976: ARRAY
7977: PPUSH
7978: LD_INT 0
7980: PPUSH
7981: CALL_OW 49
// end ;
7985: GO 7830
7987: POP
7988: POP
// end ;
7989: GO 7812
7991: POP
7992: POP
// end ;
7993: LD_VAR 0 1
7997: RET
// export function PrepareApeman ; var bonus ; begin
7998: LD_INT 0
8000: PPUSH
8001: PPUSH
// uc_side := 0 ;
8002: LD_ADDR_OWVAR 20
8006: PUSH
8007: LD_INT 0
8009: ST_TO_ADDR
// uc_nation := 0 ;
8010: LD_ADDR_OWVAR 21
8014: PUSH
8015: LD_INT 0
8017: ST_TO_ADDR
// InitHc ;
8018: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
8022: LD_ADDR_VAR 0 2
8026: PUSH
8027: LD_INT 1
8029: NEG
8030: PUSH
8031: LD_INT 0
8033: PUSH
8034: LD_INT 1
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: LIST
8041: PUSH
8042: LD_OWVAR 1
8046: PUSH
8047: LD_INT 3
8049: MOD
8050: PUSH
8051: LD_INT 1
8053: PLUS
8054: ARRAY
8055: ST_TO_ADDR
// hc_class := class_apeman ;
8056: LD_ADDR_OWVAR 28
8060: PUSH
8061: LD_INT 12
8063: ST_TO_ADDR
// hc_gallery :=  ;
8064: LD_ADDR_OWVAR 33
8068: PUSH
8069: LD_STRING 
8071: ST_TO_ADDR
// hc_name :=  ;
8072: LD_ADDR_OWVAR 26
8076: PUSH
8077: LD_STRING 
8079: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
8080: LD_ADDR_OWVAR 31
8084: PUSH
8085: LD_EXP 35
8089: PUSH
8090: LD_VAR 0 2
8094: PLUS
8095: PUSH
8096: LD_EXP 35
8100: PUSH
8101: LD_VAR 0 2
8105: PLUS
8106: PUSH
8107: LD_EXP 35
8111: PUSH
8112: LD_VAR 0 2
8116: PLUS
8117: PUSH
8118: LD_EXP 35
8122: PUSH
8123: LD_VAR 0 2
8127: PLUS
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
8135: LD_ADDR_OWVAR 35
8139: PUSH
8140: LD_INT 10
8142: PUSH
8143: LD_VAR 0 2
8147: MUL
8148: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
8149: LD_ADDR_OWVAR 29
8153: PUSH
8154: LD_INT 12
8156: PUSH
8157: LD_INT 10
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: ST_TO_ADDR
// result := CreateHuman ;
8164: LD_ADDR_VAR 0 1
8168: PUSH
8169: CALL_OW 44
8173: ST_TO_ADDR
// end ;
8174: LD_VAR 0 1
8178: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
8179: LD_INT 0
8181: PPUSH
8182: PPUSH
8183: PPUSH
// if not ape then
8184: LD_VAR 0 1
8188: NOT
8189: IFFALSE 8193
// exit ;
8191: GO 8318
// side := GetSide ( ape ) ;
8193: LD_ADDR_VAR 0 3
8197: PUSH
8198: LD_VAR 0 1
8202: PPUSH
8203: CALL_OW 255
8207: ST_TO_ADDR
// if not side then
8208: LD_VAR 0 3
8212: NOT
8213: IFFALSE 8267
// begin for i = 1 to apemanPos do
8215: LD_ADDR_VAR 0 4
8219: PUSH
8220: DOUBLE
8221: LD_INT 1
8223: DEC
8224: ST_TO_ADDR
8225: LD_EXP 33
8229: PUSH
8230: FOR_TO
8231: IFFALSE 8265
// if ape in apemanPos [ i ] then
8233: LD_VAR 0 1
8237: PUSH
8238: LD_EXP 33
8242: PUSH
8243: LD_VAR 0 4
8247: ARRAY
8248: IN
8249: IFFALSE 8263
// begin side := i ;
8251: LD_ADDR_VAR 0 3
8255: PUSH
8256: LD_VAR 0 4
8260: ST_TO_ADDR
// break ;
8261: GO 8265
// end ;
8263: GO 8230
8265: POP
8266: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
8267: LD_ADDR_EXP 33
8271: PUSH
8272: LD_EXP 33
8276: PPUSH
8277: LD_VAR 0 3
8281: PPUSH
8282: LD_EXP 33
8286: PUSH
8287: LD_VAR 0 3
8291: ARRAY
8292: PUSH
8293: LD_VAR 0 1
8297: DIFF
8298: PPUSH
8299: CALL_OW 1
8303: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
8304: LD_ADDR_EXP 30
8308: PUSH
8309: LD_EXP 30
8313: PUSH
8314: LD_INT 1
8316: MINUS
8317: ST_TO_ADDR
// end ; end_of_file
8318: LD_VAR 0 2
8322: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
8323: LD_VAR 0 1
8327: PPUSH
8328: CALL_OW 266
8332: PUSH
8333: LD_INT 0
8335: PUSH
8336: LD_INT 1
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: IN
8343: IFFALSE 8368
// SetBName ( b , @ & GetSide ( b ) ) ;
8345: LD_VAR 0 1
8349: PPUSH
8350: LD_STRING @
8352: PUSH
8353: LD_VAR 0 1
8357: PPUSH
8358: CALL_OW 255
8362: STR
8363: PPUSH
8364: CALL_OW 500
// if def_game_rules then
8368: LD_EXP 57
8372: IFFALSE 8409
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
8374: LD_VAR 0 1
8378: PPUSH
8379: LD_VAR 0 1
8383: PPUSH
8384: CALL_OW 266
8388: PPUSH
8389: LD_VAR 0 1
8393: PPUSH
8394: CALL_OW 255
8398: PPUSH
8399: LD_INT 0
8401: PPUSH
8402: LD_INT 1
8404: PPUSH
8405: CALL 18485 0 5
// end ;
8409: PPOPN 2
8411: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
8412: LD_VAR 0 1
8416: PPUSH
8417: CALL_OW 266
8421: PUSH
8422: LD_INT 0
8424: PUSH
8425: LD_INT 1
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: IN
8432: IFFALSE 8457
// SetBName ( b , @ & GetSide ( b ) ) ;
8434: LD_VAR 0 1
8438: PPUSH
8439: LD_STRING @
8441: PUSH
8442: LD_VAR 0 1
8446: PPUSH
8447: CALL_OW 255
8451: STR
8452: PPUSH
8453: CALL_OW 500
// if def_game_rules then
8457: LD_EXP 57
8461: IFFALSE 8500
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
8463: LD_VAR 0 1
8467: PPUSH
8468: LD_VAR 0 1
8472: PPUSH
8473: CALL_OW 266
8477: PPUSH
8478: LD_VAR 0 1
8482: PPUSH
8483: CALL_OW 255
8487: PPUSH
8488: LD_VAR 0 2
8492: PPUSH
8493: LD_INT 1
8495: PPUSH
8496: CALL 18485 0 5
// end ;
8500: PPOPN 3
8502: END
// on VehicleConstructed ( veh , fac ) do var side ;
8503: LD_INT 0
8505: PPUSH
// begin if GetControl ( veh ) = control_apeman then
8506: LD_VAR 0 1
8510: PPUSH
8511: CALL_OW 263
8515: PUSH
8516: LD_INT 5
8518: EQUAL
8519: IFFALSE 8661
// begin side := GetSide ( veh ) ;
8521: LD_ADDR_VAR 0 3
8525: PUSH
8526: LD_VAR 0 1
8530: PPUSH
8531: CALL_OW 255
8535: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
8536: LD_ADDR_EXP 33
8540: PUSH
8541: LD_EXP 33
8545: PPUSH
8546: LD_VAR 0 3
8550: PPUSH
8551: LD_EXP 33
8555: PUSH
8556: LD_VAR 0 3
8560: ARRAY
8561: PPUSH
8562: LD_INT 52
8564: PUSH
8565: EMPTY
8566: LIST
8567: PPUSH
8568: CALL_OW 72
8572: PUSH
8573: LD_INT 22
8575: PUSH
8576: LD_VAR 0 3
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: PUSH
8585: LD_INT 2
8587: PUSH
8588: LD_INT 33
8590: PUSH
8591: LD_INT 5
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: PUSH
8598: LD_INT 25
8600: PUSH
8601: LD_INT 12
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: PUSH
8608: LD_INT 25
8610: PUSH
8611: LD_INT 15
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: PUSH
8618: LD_INT 25
8620: PUSH
8621: LD_INT 16
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: PUSH
8628: LD_INT 25
8630: PUSH
8631: LD_INT 17
8633: PUSH
8634: EMPTY
8635: LIST
8636: LIST
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: PPUSH
8650: CALL_OW 69
8654: UNION
8655: PPUSH
8656: CALL_OW 1
8660: ST_TO_ADDR
// end ; end ;
8661: PPOPN 3
8663: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
8664: LD_VAR 0 1
8668: PPUSH
8669: LD_VAR 0 2
8673: PPUSH
8674: LD_VAR 0 3
8678: PPUSH
8679: LD_OWVAR 2
8683: PPUSH
8684: CALL 19163 0 4
8688: PPOPN 3
8690: END
// export function DE_Triggers ; begin
8691: LD_INT 0
8693: PPUSH
// disable ( 01 ) ;
8694: LD_INT 1
8696: DISABLE_MARKED
// disable ( 02 ) ;
8697: LD_INT 2
8699: DISABLE_MARKED
// disable ( 03 ) ;
8700: LD_INT 3
8702: DISABLE_MARKED
// disable ( 04 ) ;
8703: LD_INT 4
8705: DISABLE_MARKED
// disable ( 05 ) ;
8706: LD_INT 5
8708: DISABLE_MARKED
// disable ( 06 ) ;
8709: LD_INT 6
8711: DISABLE_MARKED
// disable ( 07 ) ;
8712: LD_INT 7
8714: DISABLE_MARKED
// disable ( 10 ) ;
8715: LD_INT 10
8717: DISABLE_MARKED
// disable ( 11 ) ;
8718: LD_INT 11
8720: DISABLE_MARKED
// disable ( 12 ) ;
8721: LD_INT 12
8723: DISABLE_MARKED
// disable ( 13 ) ;
8724: LD_INT 13
8726: DISABLE_MARKED
// disable ( 19 ) ;
8727: LD_INT 19
8729: DISABLE_MARKED
// disable ( 40 ) ;
8730: LD_INT 40
8732: DISABLE_MARKED
// disable ( 41 ) ;
8733: LD_INT 41
8735: DISABLE_MARKED
// disable ( 98 ) ;
8736: LD_INT 98
8738: DISABLE_MARKED
// disable ( 99 ) ;
8739: LD_INT 99
8741: DISABLE_MARKED
// disable ( 55 ) ;
8742: LD_INT 55
8744: DISABLE_MARKED
// disable ( 400 ) ;
8745: LD_INT 400
8747: DISABLE_MARKED
// disable ( 401 ) ;
8748: LD_INT 401
8750: DISABLE_MARKED
// end ; end_of_file
8751: LD_VAR 0 1
8755: RET
// function CanWinLoose ; begin
8756: LD_INT 0
8758: PPUSH
// Result := true ;
8759: LD_ADDR_VAR 0 1
8763: PUSH
8764: LD_INT 1
8766: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8767: CALL_OW 518
8771: PUSH
8772: CALL_OW 519
8776: PUSH
8777: LD_INT 0
8779: GREATER
8780: AND
8781: IFFALSE 8791
// Result := false ;
8783: LD_ADDR_VAR 0 1
8787: PUSH
8788: LD_INT 0
8790: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8791: CALL_OW 531
8795: PUSH
8796: CALL_OW 519
8800: PUSH
8801: LD_INT 1
8803: GREATER
8804: AND
8805: IFFALSE 8815
// Result := false ;
8807: LD_ADDR_VAR 0 1
8811: PUSH
8812: LD_INT 0
8814: ST_TO_ADDR
// end ;
8815: LD_VAR 0 1
8819: RET
// function HasPower ( i ) ; begin
8820: LD_INT 0
8822: PPUSH
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8823: LD_ADDR_VAR 0 2
8827: PUSH
8828: LD_INT 22
8830: PUSH
8831: LD_VAR 0 1
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: PUSH
8840: LD_INT 2
8842: PUSH
8843: LD_INT 21
8845: PUSH
8846: LD_INT 1
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PUSH
8853: LD_INT 30
8855: PUSH
8856: LD_INT 0
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: PUSH
8863: LD_INT 30
8865: PUSH
8866: LD_INT 1
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: PPUSH
8883: CALL_OW 69
8887: ST_TO_ADDR
// end ;
8888: LD_VAR 0 2
8892: RET
// function AlliedSides ( i , j ) ; begin
8893: LD_INT 0
8895: PPUSH
// Result := false ;
8896: LD_ADDR_VAR 0 3
8900: PUSH
8901: LD_INT 0
8903: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8904: LD_VAR 0 1
8908: PPUSH
8909: LD_VAR 0 2
8913: PPUSH
8914: CALL_OW 81
8918: PUSH
8919: LD_INT 1
8921: EQUAL
8922: PUSH
8923: LD_VAR 0 2
8927: PPUSH
8928: LD_VAR 0 1
8932: PPUSH
8933: CALL_OW 81
8937: PUSH
8938: LD_INT 1
8940: EQUAL
8941: AND
8942: PUSH
8943: LD_VAR 0 1
8947: PPUSH
8948: CALL_OW 83
8952: AND
8953: PUSH
8954: LD_VAR 0 2
8958: PPUSH
8959: CALL_OW 83
8963: AND
8964: IFFALSE 8974
// Result := true ;
8966: LD_ADDR_VAR 0 3
8970: PUSH
8971: LD_INT 1
8973: ST_TO_ADDR
// end ;
8974: LD_VAR 0 3
8978: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
8979: CALL 8756 0 0
8983: IFFALSE 8992
8985: GO 8987
8987: DISABLE
// YouLostInMultiplayer ;
8988: CALL_OW 107
8992: END
// every 0 0$3 trigger CanWinLoose marked 401 do
8993: CALL 8756 0 0
8997: IFFALSE 9021
8999: GO 9001
9001: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
9002: LD_EXP 19
9006: PUSH
9007: LD_OWVAR 2
9011: ARRAY
9012: PPUSH
9013: CALL 19205 0 1
// YouWinInMultiplayer ;
9017: CALL_OW 106
// end ;
9021: END
// every 0 0$3 marked 98 do var i , CanWin ;
9022: GO 9024
9024: DISABLE
9025: LD_INT 0
9027: PPUSH
9028: PPUSH
// begin if not HasPower ( your_side ) then
9029: LD_OWVAR 2
9033: PPUSH
9034: CALL 8820 0 1
9038: NOT
9039: IFFALSE 9050
// begin Multiplayer_Loose_Message ;
9041: CALL_OW 521
// enable ( 400 ) ;
9045: LD_INT 400
9047: ENABLE_MARKED
// end else
9048: GO 9183
// begin CanWin := true ;
9050: LD_ADDR_VAR 0 2
9054: PUSH
9055: LD_INT 1
9057: ST_TO_ADDR
// for i := 1 to 8 do
9058: LD_ADDR_VAR 0 1
9062: PUSH
9063: DOUBLE
9064: LD_INT 1
9066: DEC
9067: ST_TO_ADDR
9068: LD_INT 8
9070: PUSH
9071: FOR_TO
9072: IFFALSE 9169
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9074: LD_EXP 18
9078: PUSH
9079: LD_VAR 0 1
9083: ARRAY
9084: PUSH
9085: LD_VAR 0 1
9089: PPUSH
9090: CALL_OW 108
9094: AND
9095: PUSH
9096: LD_VAR 0 1
9100: PUSH
9101: LD_OWVAR 2
9105: NONEQUAL
9106: AND
9107: IFFALSE 9167
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
9109: LD_EXP 16
9113: PUSH
9114: LD_VAR 0 1
9118: ARRAY
9119: NOT
9120: PUSH
9121: LD_EXP 16
9125: PUSH
9126: LD_VAR 0 1
9130: ARRAY
9131: PUSH
9132: LD_EXP 16
9136: PUSH
9137: LD_OWVAR 2
9141: ARRAY
9142: NONEQUAL
9143: OR
9144: IFFALSE 9167
// if HasPower ( i ) then
9146: LD_VAR 0 1
9150: PPUSH
9151: CALL 8820 0 1
9155: IFFALSE 9167
// begin CanWin := false ;
9157: LD_ADDR_VAR 0 2
9161: PUSH
9162: LD_INT 0
9164: ST_TO_ADDR
// break ;
9165: GO 9169
// end ;
9167: GO 9071
9169: POP
9170: POP
// if CanWin then
9171: LD_VAR 0 2
9175: IFFALSE 9182
// enable ( 401 ) else
9177: LD_INT 401
9179: ENABLE_MARKED
9180: GO 9183
// enable ;
9182: ENABLE
// end ; end ;
9183: PPOPN 2
9185: END
// every 0 0$3 marked 99 do var i , CanWin ;
9186: GO 9188
9188: DISABLE
9189: LD_INT 0
9191: PPUSH
9192: PPUSH
// begin if not HasPower ( your_side ) then
9193: LD_OWVAR 2
9197: PPUSH
9198: CALL 8820 0 1
9202: NOT
9203: IFFALSE 9214
// begin Multiplayer_Loose_Message ;
9205: CALL_OW 521
// enable ( 400 ) ;
9209: LD_INT 400
9211: ENABLE_MARKED
// end else
9212: GO 9327
// begin CanWin := true ;
9214: LD_ADDR_VAR 0 2
9218: PUSH
9219: LD_INT 1
9221: ST_TO_ADDR
// for i := 1 to 8 do
9222: LD_ADDR_VAR 0 1
9226: PUSH
9227: DOUBLE
9228: LD_INT 1
9230: DEC
9231: ST_TO_ADDR
9232: LD_INT 8
9234: PUSH
9235: FOR_TO
9236: IFFALSE 9313
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9238: LD_EXP 18
9242: PUSH
9243: LD_VAR 0 1
9247: ARRAY
9248: PUSH
9249: LD_VAR 0 1
9253: PPUSH
9254: CALL_OW 108
9258: AND
9259: PUSH
9260: LD_VAR 0 1
9264: PUSH
9265: LD_OWVAR 2
9269: NONEQUAL
9270: AND
9271: IFFALSE 9311
// if not AlliedSides ( i , your_side ) then
9273: LD_VAR 0 1
9277: PPUSH
9278: LD_OWVAR 2
9282: PPUSH
9283: CALL 8893 0 2
9287: NOT
9288: IFFALSE 9311
// if HasPower ( i ) then
9290: LD_VAR 0 1
9294: PPUSH
9295: CALL 8820 0 1
9299: IFFALSE 9311
// begin CanWin := false ;
9301: LD_ADDR_VAR 0 2
9305: PUSH
9306: LD_INT 0
9308: ST_TO_ADDR
// break ;
9309: GO 9313
// end ;
9311: GO 9235
9313: POP
9314: POP
// if CanWin then
9315: LD_VAR 0 2
9319: IFFALSE 9326
// enable ( 401 ) else
9321: LD_INT 401
9323: ENABLE_MARKED
9324: GO 9327
// enable ;
9326: ENABLE
// end ; end ; end_of_file
9327: PPOPN 2
9329: END
// var time ; export lidi , krabice , opoce ; export cper , cperiode ; var depot1 , depot2 ; var vlajka1 , vlajka2 ; export depotpositions , areas ; var podvozky , zbrane ; export pos1side , pos2side ; var pos1base , pos2base ; var left_score , right_score ; export debug , ctf ; export mp_sides_teams_ , mp_sides_nations_ , mp_sides_positions_ , mp_sides_players_counts_ ; var cft_01 , cft_02 , cft_03 , cft_04 , cft_05 , cft_06 , cft_07 ; export nonctf_10 , nonctf_11 , nonctf_12 , nonctf_13 ; var stmp , stmp2 , cl ; export function starting_ctf ; begin
9330: LD_INT 0
9332: PPUSH
// cft_01 = 01 ;
9333: LD_ADDR_LOC 24
9337: PUSH
9338: LD_INT 1
9340: ST_TO_ADDR
// cft_02 = 02 ;
9341: LD_ADDR_LOC 25
9345: PUSH
9346: LD_INT 2
9348: ST_TO_ADDR
// cft_03 = 03 ;
9349: LD_ADDR_LOC 26
9353: PUSH
9354: LD_INT 3
9356: ST_TO_ADDR
// cft_04 = 04 ;
9357: LD_ADDR_LOC 27
9361: PUSH
9362: LD_INT 4
9364: ST_TO_ADDR
// cft_05 = 05 ;
9365: LD_ADDR_LOC 28
9369: PUSH
9370: LD_INT 5
9372: ST_TO_ADDR
// cft_06 = 06 ;
9373: LD_ADDR_LOC 29
9377: PUSH
9378: LD_INT 6
9380: ST_TO_ADDR
// cft_07 = 07 ;
9381: LD_ADDR_LOC 30
9385: PUSH
9386: LD_INT 7
9388: ST_TO_ADDR
// nonctf_10 = 10 ;
9389: LD_ADDR_EXP 52
9393: PUSH
9394: LD_INT 10
9396: ST_TO_ADDR
// nonctf_11 = 11 ;
9397: LD_ADDR_EXP 53
9401: PUSH
9402: LD_INT 11
9404: ST_TO_ADDR
// nonctf_12 = 12 ;
9405: LD_ADDR_EXP 54
9409: PUSH
9410: LD_INT 12
9412: ST_TO_ADDR
// nonctf_13 = 13 ;
9413: LD_ADDR_EXP 55
9417: PUSH
9418: LD_INT 13
9420: ST_TO_ADDR
// disable ( cft_01 ) ;
9421: LD_LOC 24
9425: DISABLE_MARKED
// disable ( cft_02 ) ;
9426: LD_LOC 25
9430: DISABLE_MARKED
// disable ( cft_03 ) ;
9431: LD_LOC 26
9435: DISABLE_MARKED
// disable ( cft_04 ) ;
9436: LD_LOC 27
9440: DISABLE_MARKED
// disable ( cft_05 ) ;
9441: LD_LOC 28
9445: DISABLE_MARKED
// disable ( cft_06 ) ;
9446: LD_LOC 29
9450: DISABLE_MARKED
// disable ( cft_07 ) ;
9451: LD_LOC 30
9455: DISABLE_MARKED
// disable ( nonctf_10 ) ;
9456: LD_EXP 52
9460: DISABLE_MARKED
// disable ( nonctf_11 ) ;
9461: LD_EXP 53
9465: DISABLE_MARKED
// disable ( nonctf_12 ) ;
9466: LD_EXP 54
9470: DISABLE_MARKED
// disable ( nonctf_13 ) ;
9471: LD_EXP 55
9475: DISABLE_MARKED
// debug = false ;
9476: LD_ADDR_EXP 46
9480: PUSH
9481: LD_INT 0
9483: ST_TO_ADDR
// if not multiplayer then
9484: LD_OWVAR 4
9488: NOT
9489: IFFALSE 9649
// begin mp_sides_teams_ = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9491: LD_ADDR_EXP 48
9495: PUSH
9496: LD_INT 0
9498: PUSH
9499: LD_INT 0
9501: PUSH
9502: LD_INT 0
9504: PUSH
9505: LD_INT 0
9507: PUSH
9508: LD_INT 0
9510: PUSH
9511: LD_INT 0
9513: PUSH
9514: LD_INT 0
9516: PUSH
9517: LD_INT 0
9519: PUSH
9520: EMPTY
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: ST_TO_ADDR
// mp_sides_nations_ = [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9530: LD_ADDR_EXP 49
9534: PUSH
9535: LD_INT 1
9537: PUSH
9538: LD_INT 2
9540: PUSH
9541: LD_INT 0
9543: PUSH
9544: LD_INT 0
9546: PUSH
9547: LD_INT 0
9549: PUSH
9550: LD_INT 0
9552: PUSH
9553: LD_INT 0
9555: PUSH
9556: LD_INT 0
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: ST_TO_ADDR
// mp_sides_positions_ = [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9569: LD_ADDR_EXP 50
9573: PUSH
9574: LD_INT 1
9576: PUSH
9577: LD_INT 2
9579: PUSH
9580: LD_INT 0
9582: PUSH
9583: LD_INT 0
9585: PUSH
9586: LD_INT 0
9588: PUSH
9589: LD_INT 0
9591: PUSH
9592: LD_INT 0
9594: PUSH
9595: LD_INT 0
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: ST_TO_ADDR
// mp_sides_players_counts_ = [ 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9608: LD_ADDR_EXP 51
9612: PUSH
9613: LD_INT 1
9615: PUSH
9616: LD_INT 1
9618: PUSH
9619: LD_INT 0
9621: PUSH
9622: LD_INT 0
9624: PUSH
9625: LD_INT 0
9627: PUSH
9628: LD_INT 0
9630: PUSH
9631: LD_INT 0
9633: PUSH
9634: LD_INT 0
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: ST_TO_ADDR
// end else
9647: GO 9689
// begin mp_sides_teams_ = mp_sides_teams ;
9649: LD_ADDR_EXP 48
9653: PUSH
9654: LD_OWVAR 15
9658: ST_TO_ADDR
// mp_sides_nations_ = mp_sides_nations ;
9659: LD_ADDR_EXP 49
9663: PUSH
9664: LD_OWVAR 16
9668: ST_TO_ADDR
// mp_sides_positions_ = mp_sides_positions ;
9669: LD_ADDR_EXP 50
9673: PUSH
9674: LD_OWVAR 17
9678: ST_TO_ADDR
// mp_sides_players_counts_ = mp_sides_players_counts ;
9679: LD_ADDR_EXP 51
9683: PUSH
9684: LD_OWVAR 18
9688: ST_TO_ADDR
// end ; if debug then
9689: LD_EXP 46
9693: IFFALSE 9775
// begin debuglog ( [ side , your_side ] ) ;
9695: LD_STRING side
9697: PUSH
9698: LD_OWVAR 2
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PPUSH
9707: CALL_OW 359
// debuglog ( [ teams , mp_sides_teams_ ] ) ;
9711: LD_STRING teams
9713: PUSH
9714: LD_EXP 48
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PPUSH
9723: CALL_OW 359
// debuglog ( [ nations , mp_sides_nations_ ] ) ;
9727: LD_STRING nations
9729: PUSH
9730: LD_EXP 49
9734: PUSH
9735: EMPTY
9736: LIST
9737: LIST
9738: PPUSH
9739: CALL_OW 359
// debuglog ( [ positions , mp_sides_positions_ ] ) ;
9743: LD_STRING positions
9745: PUSH
9746: LD_EXP 50
9750: PUSH
9751: EMPTY
9752: LIST
9753: LIST
9754: PPUSH
9755: CALL_OW 359
// debuglog ( [ pl. counts , mp_sides_players_counts_ ] ) ;
9759: LD_STRING pl. counts
9761: PUSH
9762: LD_EXP 51
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: PPUSH
9771: CALL_OW 359
// end ; depotpositions = [ [ 34 , 60 , 1 ] , [ 185 , 60 , 4 ] ] ;
9775: LD_ADDR_EXP 42
9779: PUSH
9780: LD_INT 34
9782: PUSH
9783: LD_INT 60
9785: PUSH
9786: LD_INT 1
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: LIST
9793: PUSH
9794: LD_INT 185
9796: PUSH
9797: LD_INT 60
9799: PUSH
9800: LD_INT 4
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: LIST
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: ST_TO_ADDR
// areas = [ vlevo , vpravo ] ;
9812: LD_ADDR_EXP 43
9816: PUSH
9817: LD_INT 2
9819: PUSH
9820: LD_INT 3
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: ST_TO_ADDR
// if mp_game_type = 3 then
9827: LD_OWVAR 6
9831: PUSH
9832: LD_INT 3
9834: EQUAL
9835: IFFALSE 9843
// begin other_game ;
9837: CALL 12915 0 0
// exit ;
9841: GO 11291
// end ; ctf = true ;
9843: LD_ADDR_EXP 47
9847: PUSH
9848: LD_INT 1
9850: ST_TO_ADDR
// enable ( cft_01 ) ;
9851: LD_LOC 24
9855: ENABLE_MARKED
// enable ( cft_02 ) ;
9856: LD_LOC 25
9860: ENABLE_MARKED
// enable ( cft_05 ) ;
9861: LD_LOC 28
9865: ENABLE_MARKED
// enable ( cft_06 ) ;
9866: LD_LOC 29
9870: ENABLE_MARKED
// enable ( cft_07 ) ;
9871: LD_LOC 30
9875: ENABLE_MARKED
// podvozky = [ us_medium_wheeled , ar_medium_trike , ru_medium_wheeled ] ;
9876: LD_ADDR_LOC 18
9880: PUSH
9881: LD_INT 2
9883: PUSH
9884: LD_INT 13
9886: PUSH
9887: LD_INT 21
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: LIST
9894: ST_TO_ADDR
// zbrane = [ us_cargo_bay , ar_cargo_bay , ru_cargo_bay ] ;
9895: LD_ADDR_LOC 19
9899: PUSH
9900: LD_INT 12
9902: PUSH
9903: LD_INT 32
9905: PUSH
9906: LD_INT 51
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: LIST
9913: ST_TO_ADDR
// left_score = 0 ;
9914: LD_ADDR_LOC 22
9918: PUSH
9919: LD_INT 0
9921: ST_TO_ADDR
// right_score = 0 ;
9922: LD_ADDR_LOC 23
9926: PUSH
9927: LD_INT 0
9929: ST_TO_ADDR
// if multiplayer then
9930: LD_OWVAR 4
9934: IFFALSE 9990
// begin lidi = getmultiplayersetting ( 1 ) ;
9936: LD_ADDR_EXP 37
9940: PUSH
9941: LD_INT 1
9943: PPUSH
9944: CALL_OW 426
9948: ST_TO_ADDR
// krabice = getmultiplayersetting ( 2 ) ;
9949: LD_ADDR_EXP 38
9953: PUSH
9954: LD_INT 2
9956: PPUSH
9957: CALL_OW 426
9961: ST_TO_ADDR
// opoce = getmultiplayersetting ( 3 ) ;
9962: LD_ADDR_EXP 39
9966: PUSH
9967: LD_INT 3
9969: PPUSH
9970: CALL_OW 426
9974: ST_TO_ADDR
// time = getmultiplayersetting ( 4 ) ;
9975: LD_ADDR_LOC 13
9979: PUSH
9980: LD_INT 4
9982: PPUSH
9983: CALL_OW 426
9987: ST_TO_ADDR
// end else
9988: GO 10022
// begin lidi = 1 ;
9990: LD_ADDR_EXP 37
9994: PUSH
9995: LD_INT 1
9997: ST_TO_ADDR
// krabice = 1 ;
9998: LD_ADDR_EXP 38
10002: PUSH
10003: LD_INT 1
10005: ST_TO_ADDR
// opoce = 3 ;
10006: LD_ADDR_EXP 39
10010: PUSH
10011: LD_INT 3
10013: ST_TO_ADDR
// time = 2 ;
10014: LD_ADDR_LOC 13
10018: PUSH
10019: LD_INT 2
10021: ST_TO_ADDR
// end ; case lidi of 0 :
10022: LD_EXP 37
10026: PUSH
10027: LD_INT 0
10029: DOUBLE
10030: EQUAL
10031: IFTRUE 10035
10033: GO 10046
10035: POP
// lidi = 9 ; 1 :
10036: LD_ADDR_EXP 37
10040: PUSH
10041: LD_INT 9
10043: ST_TO_ADDR
10044: GO 10123
10046: LD_INT 1
10048: DOUBLE
10049: EQUAL
10050: IFTRUE 10054
10052: GO 10065
10054: POP
// lidi = 13 ; 2 :
10055: LD_ADDR_EXP 37
10059: PUSH
10060: LD_INT 13
10062: ST_TO_ADDR
10063: GO 10123
10065: LD_INT 2
10067: DOUBLE
10068: EQUAL
10069: IFTRUE 10073
10071: GO 10084
10073: POP
// lidi = 19 ; 3 :
10074: LD_ADDR_EXP 37
10078: PUSH
10079: LD_INT 19
10081: ST_TO_ADDR
10082: GO 10123
10084: LD_INT 3
10086: DOUBLE
10087: EQUAL
10088: IFTRUE 10092
10090: GO 10103
10092: POP
// lidi = 23 ; 4 :
10093: LD_ADDR_EXP 37
10097: PUSH
10098: LD_INT 23
10100: ST_TO_ADDR
10101: GO 10123
10103: LD_INT 4
10105: DOUBLE
10106: EQUAL
10107: IFTRUE 10111
10109: GO 10122
10111: POP
// lidi = 29 ; end ;
10112: LD_ADDR_EXP 37
10116: PUSH
10117: LD_INT 29
10119: ST_TO_ADDR
10120: GO 10123
10122: POP
// case krabice of 0 :
10123: LD_EXP 38
10127: PUSH
10128: LD_INT 0
10130: DOUBLE
10131: EQUAL
10132: IFTRUE 10136
10134: GO 10147
10136: POP
// cperiode = 1 1$30 ; 1 :
10137: LD_ADDR_EXP 41
10141: PUSH
10142: LD_INT 3150
10144: ST_TO_ADDR
10145: GO 10186
10147: LD_INT 1
10149: DOUBLE
10150: EQUAL
10151: IFTRUE 10155
10153: GO 10166
10155: POP
// cperiode = 1 1$00 ; 2 :
10156: LD_ADDR_EXP 41
10160: PUSH
10161: LD_INT 2100
10163: ST_TO_ADDR
10164: GO 10186
10166: LD_INT 2
10168: DOUBLE
10169: EQUAL
10170: IFTRUE 10174
10172: GO 10185
10174: POP
// cperiode = 0 0$30 ; end ;
10175: LD_ADDR_EXP 41
10179: PUSH
10180: LD_INT 1050
10182: ST_TO_ADDR
10183: GO 10186
10185: POP
// cper = 0 0$10 ;
10186: LD_ADDR_EXP 40
10190: PUSH
10191: LD_INT 350
10193: ST_TO_ADDR
// case opoce of 0 :
10194: LD_EXP 39
10198: PUSH
10199: LD_INT 0
10201: DOUBLE
10202: EQUAL
10203: IFTRUE 10207
10205: GO 10218
10207: POP
// opoce = 0 ; 1 :
10208: LD_ADDR_EXP 39
10212: PUSH
10213: LD_INT 0
10215: ST_TO_ADDR
10216: GO 10333
10218: LD_INT 1
10220: DOUBLE
10221: EQUAL
10222: IFTRUE 10226
10224: GO 10237
10226: POP
// opoce = 3 ; 2 :
10227: LD_ADDR_EXP 39
10231: PUSH
10232: LD_INT 3
10234: ST_TO_ADDR
10235: GO 10333
10237: LD_INT 2
10239: DOUBLE
10240: EQUAL
10241: IFTRUE 10245
10243: GO 10256
10245: POP
// opoce = 7 ; 3 :
10246: LD_ADDR_EXP 39
10250: PUSH
10251: LD_INT 7
10253: ST_TO_ADDR
10254: GO 10333
10256: LD_INT 3
10258: DOUBLE
10259: EQUAL
10260: IFTRUE 10264
10262: GO 10275
10264: POP
// opoce = 11 ; 4 :
10265: LD_ADDR_EXP 39
10269: PUSH
10270: LD_INT 11
10272: ST_TO_ADDR
10273: GO 10333
10275: LD_INT 4
10277: DOUBLE
10278: EQUAL
10279: IFTRUE 10283
10281: GO 10294
10283: POP
// opoce = 15 ; 5 :
10284: LD_ADDR_EXP 39
10288: PUSH
10289: LD_INT 15
10291: ST_TO_ADDR
10292: GO 10333
10294: LD_INT 5
10296: DOUBLE
10297: EQUAL
10298: IFTRUE 10302
10300: GO 10313
10302: POP
// opoce = 19 ; 6 :
10303: LD_ADDR_EXP 39
10307: PUSH
10308: LD_INT 19
10310: ST_TO_ADDR
10311: GO 10333
10313: LD_INT 6
10315: DOUBLE
10316: EQUAL
10317: IFTRUE 10321
10319: GO 10332
10321: POP
// opoce = 23 ; end ;
10322: LD_ADDR_EXP 39
10326: PUSH
10327: LD_INT 23
10329: ST_TO_ADDR
10330: GO 10333
10332: POP
// case time of 0 :
10333: LD_LOC 13
10337: PUSH
10338: LD_INT 0
10340: DOUBLE
10341: EQUAL
10342: IFTRUE 10346
10344: GO 10361
10346: POP
// time = 30 * 60 ; 1 :
10347: LD_ADDR_LOC 13
10351: PUSH
10352: LD_INT 30
10354: PUSH
10355: LD_INT 60
10357: MUL
10358: ST_TO_ADDR
10359: GO 10477
10361: LD_INT 1
10363: DOUBLE
10364: EQUAL
10365: IFTRUE 10369
10367: GO 10384
10369: POP
// time = 40 * 60 ; 2 :
10370: LD_ADDR_LOC 13
10374: PUSH
10375: LD_INT 40
10377: PUSH
10378: LD_INT 60
10380: MUL
10381: ST_TO_ADDR
10382: GO 10477
10384: LD_INT 2
10386: DOUBLE
10387: EQUAL
10388: IFTRUE 10392
10390: GO 10407
10392: POP
// time = 50 * 60 ; 3 :
10393: LD_ADDR_LOC 13
10397: PUSH
10398: LD_INT 50
10400: PUSH
10401: LD_INT 60
10403: MUL
10404: ST_TO_ADDR
10405: GO 10477
10407: LD_INT 3
10409: DOUBLE
10410: EQUAL
10411: IFTRUE 10415
10413: GO 10430
10415: POP
// time = 60 * 60 ; 4 :
10416: LD_ADDR_LOC 13
10420: PUSH
10421: LD_INT 60
10423: PUSH
10424: LD_INT 60
10426: MUL
10427: ST_TO_ADDR
10428: GO 10477
10430: LD_INT 4
10432: DOUBLE
10433: EQUAL
10434: IFTRUE 10438
10436: GO 10453
10438: POP
// time = 90 * 60 ; 5 :
10439: LD_ADDR_LOC 13
10443: PUSH
10444: LD_INT 90
10446: PUSH
10447: LD_INT 60
10449: MUL
10450: ST_TO_ADDR
10451: GO 10477
10453: LD_INT 5
10455: DOUBLE
10456: EQUAL
10457: IFTRUE 10461
10459: GO 10476
10461: POP
// time = 120 * 60 ; end ;
10462: LD_ADDR_LOC 13
10466: PUSH
10467: LD_INT 120
10469: PUSH
10470: LD_INT 60
10472: MUL
10473: ST_TO_ADDR
10474: GO 10477
10476: POP
// enable ( cft_03 ) ;
10477: LD_LOC 26
10481: ENABLE_MARKED
// refresh ;
10482: CALL 11296 0 0
// for stmp = 1 to 8 do
10486: LD_ADDR_LOC 31
10490: PUSH
10491: DOUBLE
10492: LD_INT 1
10494: DEC
10495: ST_TO_ADDR
10496: LD_INT 8
10498: PUSH
10499: FOR_TO
10500: IFFALSE 10869
// if mp_sides_nations_ [ stmp ] then
10502: LD_EXP 49
10506: PUSH
10507: LD_LOC 31
10511: ARRAY
10512: IFFALSE 10867
// begin if mp_sides_positions_ [ stmp ] = 1 then
10514: LD_EXP 50
10518: PUSH
10519: LD_LOC 31
10523: ARRAY
10524: PUSH
10525: LD_INT 1
10527: EQUAL
10528: IFFALSE 10542
// pos1side = stmp else
10530: LD_ADDR_EXP 44
10534: PUSH
10535: LD_LOC 31
10539: ST_TO_ADDR
10540: GO 10552
// pos2side = stmp ;
10542: LD_ADDR_EXP 45
10546: PUSH
10547: LD_LOC 31
10551: ST_TO_ADDR
// uc_side = stmp ;
10552: LD_ADDR_OWVAR 20
10556: PUSH
10557: LD_LOC 31
10561: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ stmp ] ;
10562: LD_ADDR_OWVAR 21
10566: PUSH
10567: LD_EXP 49
10571: PUSH
10572: LD_LOC 31
10576: ARRAY
10577: ST_TO_ADDR
// bc_type = b_depot ;
10578: LD_ADDR_OWVAR 42
10582: PUSH
10583: LD_INT 0
10585: ST_TO_ADDR
// bc_level = 1 ;
10586: LD_ADDR_OWVAR 43
10590: PUSH
10591: LD_INT 1
10593: ST_TO_ADDR
// createandplacebuildingxyd ( depotpositions [ mp_sides_positions_ [ stmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 2 ] , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 3 ] ) ;
10594: LD_EXP 42
10598: PUSH
10599: LD_EXP 50
10603: PUSH
10604: LD_LOC 31
10608: ARRAY
10609: ARRAY
10610: PUSH
10611: LD_INT 1
10613: ARRAY
10614: PPUSH
10615: LD_EXP 42
10619: PUSH
10620: LD_EXP 50
10624: PUSH
10625: LD_LOC 31
10629: ARRAY
10630: ARRAY
10631: PUSH
10632: LD_INT 2
10634: ARRAY
10635: PPUSH
10636: LD_EXP 42
10640: PUSH
10641: LD_EXP 50
10645: PUSH
10646: LD_LOC 31
10650: ARRAY
10651: ARRAY
10652: PUSH
10653: LD_INT 3
10655: ARRAY
10656: PPUSH
10657: CALL_OW 47
// setbattleflag ( stmp , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 2 ] , [ [ bfo_defend_bonus_human , 150 ] , [ bfo_defend_bonus_vehicle , 10 ] , [ bfo_defend_bonus_building , 0 ] , [ bfo_range , 17 ] , [ bfo_height , 100 ] ] ) ;
10661: LD_LOC 31
10665: PPUSH
10666: LD_EXP 42
10670: PUSH
10671: LD_EXP 50
10675: PUSH
10676: LD_LOC 31
10680: ARRAY
10681: ARRAY
10682: PUSH
10683: LD_INT 1
10685: ARRAY
10686: PPUSH
10687: LD_EXP 42
10691: PUSH
10692: LD_EXP 50
10696: PUSH
10697: LD_LOC 31
10701: ARRAY
10702: ARRAY
10703: PUSH
10704: LD_INT 2
10706: ARRAY
10707: PPUSH
10708: LD_INT 1
10710: PUSH
10711: LD_INT 150
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PUSH
10718: LD_INT 2
10720: PUSH
10721: LD_INT 10
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: PUSH
10728: LD_INT 3
10730: PUSH
10731: LD_INT 0
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: PUSH
10738: LD_INT 10
10740: PUSH
10741: LD_INT 17
10743: PUSH
10744: EMPTY
10745: LIST
10746: LIST
10747: PUSH
10748: LD_INT 20
10750: PUSH
10751: LD_INT 100
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: PPUSH
10765: CALL_OW 418
// cl = class_engineer ;
10769: LD_ADDR_LOC 33
10773: PUSH
10774: LD_INT 2
10776: ST_TO_ADDR
// for stmp2 = 1 to lidi do
10777: LD_ADDR_LOC 32
10781: PUSH
10782: DOUBLE
10783: LD_INT 1
10785: DEC
10786: ST_TO_ADDR
10787: LD_EXP 37
10791: PUSH
10792: FOR_TO
10793: IFFALSE 10865
// begin if stmp2 >= lidi / 2 then
10795: LD_LOC 32
10799: PUSH
10800: LD_EXP 37
10804: PUSH
10805: LD_INT 2
10807: DIVREAL
10808: GREATEREQUAL
10809: IFFALSE 10819
// cl = class_soldier ;
10811: LD_ADDR_LOC 33
10815: PUSH
10816: LD_INT 1
10818: ST_TO_ADDR
// preparehuman ( 0 , cl , 1 ) ;
10819: LD_INT 0
10821: PPUSH
10822: LD_LOC 33
10826: PPUSH
10827: LD_INT 1
10829: PPUSH
10830: CALL_OW 380
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ stmp ] ] , false ) ;
10834: CALL_OW 44
10838: PPUSH
10839: LD_EXP 43
10843: PUSH
10844: LD_EXP 50
10848: PUSH
10849: LD_LOC 31
10853: ARRAY
10854: ARRAY
10855: PPUSH
10856: LD_INT 0
10858: PPUSH
10859: CALL_OW 49
// end ;
10863: GO 10792
10865: POP
10866: POP
// end ;
10867: GO 10499
10869: POP
10870: POP
// depot1 = filterunitsinarea ( vlevo , [ [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
10871: LD_ADDR_LOC 14
10875: PUSH
10876: LD_INT 2
10878: PPUSH
10879: LD_INT 21
10881: PUSH
10882: LD_INT 3
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: PUSH
10889: LD_INT 30
10891: PUSH
10892: LD_INT 0
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PPUSH
10903: CALL_OW 70
10907: PUSH
10908: LD_INT 1
10910: ARRAY
10911: ST_TO_ADDR
// depot2 = filterunitsinarea ( vpravo , [ [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
10912: LD_ADDR_LOC 15
10916: PUSH
10917: LD_INT 3
10919: PPUSH
10920: LD_INT 21
10922: PUSH
10923: LD_INT 3
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: PUSH
10930: LD_INT 30
10932: PUSH
10933: LD_INT 0
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: PUSH
10940: EMPTY
10941: LIST
10942: LIST
10943: PPUSH
10944: CALL_OW 70
10948: PUSH
10949: LD_INT 1
10951: ARRAY
10952: ST_TO_ADDR
// pos1base = getbase ( depot1 ) ;
10953: LD_ADDR_LOC 20
10957: PUSH
10958: LD_LOC 14
10962: PPUSH
10963: CALL_OW 274
10967: ST_TO_ADDR
// pos2base = getbase ( depot2 ) ;
10968: LD_ADDR_LOC 21
10972: PUSH
10973: LD_LOC 15
10977: PPUSH
10978: CALL_OW 274
10982: ST_TO_ADDR
// uc_side = 0 ;
10983: LD_ADDR_OWVAR 20
10987: PUSH
10988: LD_INT 0
10990: ST_TO_ADDR
// uc_nation = nation_nature ;
10991: LD_ADDR_OWVAR 21
10995: PUSH
10996: LD_INT 0
10998: ST_TO_ADDR
// for stmp = 1 to opoce do
10999: LD_ADDR_LOC 31
11003: PUSH
11004: DOUBLE
11005: LD_INT 1
11007: DEC
11008: ST_TO_ADDR
11009: LD_EXP 39
11013: PUSH
11014: FOR_TO
11015: IFFALSE 11047
// begin preparehuman ( 0 , class_apeman , 0 ) ;
11017: LD_INT 0
11019: PPUSH
11020: LD_INT 12
11022: PPUSH
11023: LD_INT 0
11025: PPUSH
11026: CALL_OW 380
// placeunitarea ( createhuman , les , false ) ;
11030: CALL_OW 44
11034: PPUSH
11035: LD_INT 4
11037: PPUSH
11038: LD_INT 0
11040: PPUSH
11041: CALL_OW 49
// end ;
11045: GO 11014
11047: POP
11048: POP
// uc_side = pos2side ;
11049: LD_ADDR_OWVAR 20
11053: PUSH
11054: LD_EXP 45
11058: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos2side ] ;
11059: LD_ADDR_OWVAR 21
11063: PUSH
11064: LD_EXP 49
11068: PUSH
11069: LD_EXP 45
11073: ARRAY
11074: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11075: LD_ADDR_OWVAR 37
11079: PUSH
11080: LD_LOC 18
11084: PUSH
11085: LD_OWVAR 21
11089: ARRAY
11090: ST_TO_ADDR
// vc_control = control_manual ;
11091: LD_ADDR_OWVAR 38
11095: PUSH
11096: LD_INT 1
11098: ST_TO_ADDR
// vc_engine = engine_siberite ;
11099: LD_ADDR_OWVAR 39
11103: PUSH
11104: LD_INT 3
11106: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
11107: LD_ADDR_OWVAR 40
11111: PUSH
11112: LD_LOC 19
11116: PUSH
11117: LD_OWVAR 21
11121: ARRAY
11122: ST_TO_ADDR
// vlajka1 = createvehicle ;
11123: LD_ADDR_LOC 16
11127: PUSH
11128: CALL_OW 45
11132: ST_TO_ADDR
// placeunitxy ( vlajka1 , 76 , 60 , false ) ;
11133: LD_LOC 16
11137: PPUSH
11138: LD_INT 76
11140: PPUSH
11141: LD_INT 60
11143: PPUSH
11144: LD_INT 0
11146: PPUSH
11147: CALL_OW 48
// uc_side = pos1side ;
11151: LD_ADDR_OWVAR 20
11155: PUSH
11156: LD_EXP 44
11160: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos1side ] ;
11161: LD_ADDR_OWVAR 21
11165: PUSH
11166: LD_EXP 49
11170: PUSH
11171: LD_EXP 44
11175: ARRAY
11176: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11177: LD_ADDR_OWVAR 37
11181: PUSH
11182: LD_LOC 18
11186: PUSH
11187: LD_OWVAR 21
11191: ARRAY
11192: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
11193: LD_ADDR_OWVAR 40
11197: PUSH
11198: LD_LOC 19
11202: PUSH
11203: LD_OWVAR 21
11207: ARRAY
11208: ST_TO_ADDR
// vlajka2 = createvehicle ;
11209: LD_ADDR_LOC 17
11213: PUSH
11214: CALL_OW 45
11218: ST_TO_ADDR
// placeunitxy ( vlajka2 , 143 , 60 , false ) ;
11219: LD_LOC 17
11223: PPUSH
11224: LD_INT 143
11226: PPUSH
11227: LD_INT 60
11229: PPUSH
11230: LD_INT 0
11232: PPUSH
11233: CALL_OW 48
// case mp_sides_positions_ [ your_side ] of 1 :
11237: LD_EXP 50
11241: PUSH
11242: LD_OWVAR 2
11246: ARRAY
11247: PUSH
11248: LD_INT 1
11250: DOUBLE
11251: EQUAL
11252: IFTRUE 11256
11254: GO 11269
11256: POP
// centernowonxy ( 44 , 60 ) ; 2 :
11257: LD_INT 44
11259: PPUSH
11260: LD_INT 60
11262: PPUSH
11263: CALL_OW 86
11267: GO 11291
11269: LD_INT 2
11271: DOUBLE
11272: EQUAL
11273: IFTRUE 11277
11275: GO 11290
11277: POP
// centernowonxy ( 175 , 60 ) ; end ;
11278: LD_INT 175
11280: PPUSH
11281: LD_INT 60
11283: PPUSH
11284: CALL_OW 86
11288: GO 11291
11290: POP
// end ;
11291: LD_VAR 0 1
11295: RET
// function refresh ; var tmp , tmp1 , tmp2 , tmp3 , tmp4 ; begin
11296: LD_INT 0
11298: PPUSH
11299: PPUSH
11300: PPUSH
11301: PPUSH
11302: PPUSH
11303: PPUSH
// tmp = time div 60 ;
11304: LD_ADDR_VAR 0 2
11308: PUSH
11309: LD_LOC 13
11313: PUSH
11314: LD_INT 60
11316: DIV
11317: ST_TO_ADDR
// if tmp < 10 then
11318: LD_VAR 0 2
11322: PUSH
11323: LD_INT 10
11325: LESS
11326: IFFALSE 11344
// tmp1 = 0 & tmp else
11328: LD_ADDR_VAR 0 3
11332: PUSH
11333: LD_STRING 0
11335: PUSH
11336: LD_VAR 0 2
11340: STR
11341: ST_TO_ADDR
11342: GO 11358
// tmp1 =  & tmp ;
11344: LD_ADDR_VAR 0 3
11348: PUSH
11349: LD_STRING 
11351: PUSH
11352: LD_VAR 0 2
11356: STR
11357: ST_TO_ADDR
// tmp = time mod 60 ;
11358: LD_ADDR_VAR 0 2
11362: PUSH
11363: LD_LOC 13
11367: PUSH
11368: LD_INT 60
11370: MOD
11371: ST_TO_ADDR
// if tmp < 10 then
11372: LD_VAR 0 2
11376: PUSH
11377: LD_INT 10
11379: LESS
11380: IFFALSE 11398
// tmp2 = 0 & tmp else
11382: LD_ADDR_VAR 0 4
11386: PUSH
11387: LD_STRING 0
11389: PUSH
11390: LD_VAR 0 2
11394: STR
11395: ST_TO_ADDR
11396: GO 11412
// tmp2 =  & tmp ;
11398: LD_ADDR_VAR 0 4
11402: PUSH
11403: LD_STRING 
11405: PUSH
11406: LD_VAR 0 2
11410: STR
11411: ST_TO_ADDR
// if left_score < 10 then
11412: LD_LOC 22
11416: PUSH
11417: LD_INT 10
11419: LESS
11420: IFFALSE 11438
// tmp3 = 0 & left_score else
11422: LD_ADDR_VAR 0 5
11426: PUSH
11427: LD_STRING 0
11429: PUSH
11430: LD_LOC 22
11434: STR
11435: ST_TO_ADDR
11436: GO 11452
// tmp3 =  & left_score ;
11438: LD_ADDR_VAR 0 5
11442: PUSH
11443: LD_STRING 
11445: PUSH
11446: LD_LOC 22
11450: STR
11451: ST_TO_ADDR
// if right_score < 10 then
11452: LD_LOC 23
11456: PUSH
11457: LD_INT 10
11459: LESS
11460: IFFALSE 11478
// tmp4 = 0 & right_score else
11462: LD_ADDR_VAR 0 6
11466: PUSH
11467: LD_STRING 0
11469: PUSH
11470: LD_LOC 23
11474: STR
11475: ST_TO_ADDR
11476: GO 11492
// tmp4 =  & right_score ;
11478: LD_ADDR_VAR 0 6
11482: PUSH
11483: LD_STRING 
11485: PUSH
11486: LD_LOC 23
11490: STR
11491: ST_TO_ADDR
// display_strings = [ Score:  & tmp3 &  to  & tmp4 , Time left:  & tmp1 & : & tmp2 ] ;
11492: LD_ADDR_OWVAR 47
11496: PUSH
11497: LD_STRING Score: 
11499: PUSH
11500: LD_VAR 0 5
11504: STR
11505: PUSH
11506: LD_STRING  to 
11508: STR
11509: PUSH
11510: LD_VAR 0 6
11514: STR
11515: PUSH
11516: LD_STRING Time left: 
11518: PUSH
11519: LD_VAR 0 3
11523: STR
11524: PUSH
11525: LD_STRING :
11527: STR
11528: PUSH
11529: LD_VAR 0 4
11533: STR
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: ST_TO_ADDR
// end ;
11539: LD_VAR 0 1
11543: RET
// every 0 0$1 marked 03 do
11544: GO 11546
11546: DISABLE
// begin time = time - 1 ;
11547: LD_ADDR_LOC 13
11551: PUSH
11552: LD_LOC 13
11556: PUSH
11557: LD_INT 1
11559: MINUS
11560: ST_TO_ADDR
// refresh ;
11561: CALL 11296 0 0
// if not time then
11565: LD_LOC 13
11569: NOT
11570: IFFALSE 11636
// if mp_sides_positions_ [ your_side ] = 1 then
11572: LD_EXP 50
11576: PUSH
11577: LD_OWVAR 2
11581: ARRAY
11582: PUSH
11583: LD_INT 1
11585: EQUAL
11586: IFFALSE 11612
// if left_score >= right_score then
11588: LD_LOC 22
11592: PUSH
11593: LD_LOC 23
11597: GREATEREQUAL
11598: IFFALSE 11606
// youwininmultiplayer else
11600: CALL_OW 106
11604: GO 11610
// youlostinmultiplayer else
11606: CALL_OW 107
11610: GO 11634
// if right_score >= left_score then
11612: LD_LOC 23
11616: PUSH
11617: LD_LOC 22
11621: GREATEREQUAL
11622: IFFALSE 11630
// youwininmultiplayer else
11624: CALL_OW 106
11628: GO 11634
// youlostinmultiplayer else
11630: CALL_OW 107
11634: GO 11637
// enable ;
11636: ENABLE
// end ;
11637: END
// every 0 0$10 marked 19 do
11638: GO 11640
11640: DISABLE
// begin cper = cper - 0 0$10 ;
11641: LD_ADDR_EXP 40
11645: PUSH
11646: LD_EXP 40
11650: PUSH
11651: LD_INT 350
11653: MINUS
11654: ST_TO_ADDR
// if cper = 0 then
11655: LD_EXP 40
11659: PUSH
11660: LD_INT 0
11662: EQUAL
11663: IFFALSE 11701
// begin createcratesarea ( 5 , vlevoex , true ) ;
11665: LD_INT 5
11667: PPUSH
11668: LD_INT 5
11670: PPUSH
11671: LD_INT 1
11673: PPUSH
11674: CALL_OW 55
// createcratesarea ( 5 , vpravoex , true ) ;
11678: LD_INT 5
11680: PPUSH
11681: LD_INT 6
11683: PPUSH
11684: LD_INT 1
11686: PPUSH
11687: CALL_OW 55
// cper = cperiode ;
11691: LD_ADDR_EXP 40
11695: PUSH
11696: LD_EXP 41
11700: ST_TO_ADDR
// end ; enable ;
11701: ENABLE
// end ;
11702: END
// every 5 trigger getlives ( depot1 ) < 500 marked 01 do
11703: LD_LOC 14
11707: PPUSH
11708: CALL_OW 256
11712: PUSH
11713: LD_INT 500
11715: LESS
11716: IFFALSE 11734
11718: GO 11720
11720: DISABLE
// begin setlives ( depot1 , 750 ) ;
11721: LD_LOC 14
11725: PPUSH
11726: LD_INT 750
11728: PPUSH
11729: CALL_OW 234
// enable ;
11733: ENABLE
// end ;
11734: END
// every 5 trigger getlives ( depot2 ) < 500 marked 02 do
11735: LD_LOC 15
11739: PPUSH
11740: CALL_OW 256
11744: PUSH
11745: LD_INT 500
11747: LESS
11748: IFFALSE 11766
11750: GO 11752
11752: DISABLE
// begin setlives ( depot2 , 750 ) ;
11753: LD_LOC 15
11757: PPUSH
11758: LD_INT 750
11760: PPUSH
11761: CALL_OW 234
// enable ;
11765: ENABLE
// end ;
11766: END
// on unitdestroyed ( un ) do var radius ;
11767: LD_INT 0
11769: PPUSH
// begin if GetClass ( un ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
11770: LD_VAR 0 1
11774: PPUSH
11775: CALL_OW 257
11779: PUSH
11780: LD_INT 12
11782: PUSH
11783: LD_INT 15
11785: PUSH
11786: LD_INT 17
11788: PUSH
11789: LD_INT 16
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: IN
11798: PUSH
11799: LD_VAR 0 1
11803: PPUSH
11804: CALL_OW 263
11808: PUSH
11809: LD_INT 5
11811: EQUAL
11812: OR
11813: IFFALSE 11824
// ApeKilled ( un ) ;
11815: LD_VAR 0 1
11819: PPUSH
11820: CALL 8179 0 1
// if mp_game_type <> 1 then
11824: LD_OWVAR 6
11828: PUSH
11829: LD_INT 1
11831: NONEQUAL
11832: IFFALSE 11836
// exit ;
11834: GO 12130
// if un = vlajka1 then
11836: LD_VAR 0 1
11840: PUSH
11841: LD_LOC 16
11845: EQUAL
11846: IFFALSE 11984
// begin uc_side = pos2side ;
11848: LD_ADDR_OWVAR 20
11852: PUSH
11853: LD_EXP 45
11857: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos2side ] ;
11858: LD_ADDR_OWVAR 21
11862: PUSH
11863: LD_EXP 49
11867: PUSH
11868: LD_EXP 45
11872: ARRAY
11873: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11874: LD_ADDR_OWVAR 37
11878: PUSH
11879: LD_LOC 18
11883: PUSH
11884: LD_OWVAR 21
11888: ARRAY
11889: ST_TO_ADDR
// vc_control = control_manual ;
11890: LD_ADDR_OWVAR 38
11894: PUSH
11895: LD_INT 1
11897: ST_TO_ADDR
// vc_engine = engine_siberite ;
11898: LD_ADDR_OWVAR 39
11902: PUSH
11903: LD_INT 3
11905: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
11906: LD_ADDR_OWVAR 40
11910: PUSH
11911: LD_LOC 19
11915: PUSH
11916: LD_OWVAR 21
11920: ARRAY
11921: ST_TO_ADDR
// vlajka1 = createvehicle ;
11922: LD_ADDR_LOC 16
11926: PUSH
11927: CALL_OW 45
11931: ST_TO_ADDR
// radius = 2 ;
11932: LD_ADDR_VAR 0 2
11936: PUSH
11937: LD_INT 2
11939: ST_TO_ADDR
// while not placeunitxyr ( vlajka1 , 76 , 60 , radius , false ) do
11940: LD_LOC 16
11944: PPUSH
11945: LD_INT 76
11947: PPUSH
11948: LD_INT 60
11950: PPUSH
11951: LD_VAR 0 2
11955: PPUSH
11956: LD_INT 0
11958: PPUSH
11959: CALL_OW 50
11963: NOT
11964: IFFALSE 11982
// radius = radius + 1 ;
11966: LD_ADDR_VAR 0 2
11970: PUSH
11971: LD_VAR 0 2
11975: PUSH
11976: LD_INT 1
11978: PLUS
11979: ST_TO_ADDR
11980: GO 11940
// end else
11982: GO 12130
// if un = vlajka2 then
11984: LD_VAR 0 1
11988: PUSH
11989: LD_LOC 17
11993: EQUAL
11994: IFFALSE 12130
// begin uc_side = pos1side ;
11996: LD_ADDR_OWVAR 20
12000: PUSH
12001: LD_EXP 44
12005: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos1side ] ;
12006: LD_ADDR_OWVAR 21
12010: PUSH
12011: LD_EXP 49
12015: PUSH
12016: LD_EXP 44
12020: ARRAY
12021: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
12022: LD_ADDR_OWVAR 37
12026: PUSH
12027: LD_LOC 18
12031: PUSH
12032: LD_OWVAR 21
12036: ARRAY
12037: ST_TO_ADDR
// vc_control = control_manual ;
12038: LD_ADDR_OWVAR 38
12042: PUSH
12043: LD_INT 1
12045: ST_TO_ADDR
// vc_engine = engine_siberite ;
12046: LD_ADDR_OWVAR 39
12050: PUSH
12051: LD_INT 3
12053: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
12054: LD_ADDR_OWVAR 40
12058: PUSH
12059: LD_LOC 19
12063: PUSH
12064: LD_OWVAR 21
12068: ARRAY
12069: ST_TO_ADDR
// vlajka2 = createvehicle ;
12070: LD_ADDR_LOC 17
12074: PUSH
12075: CALL_OW 45
12079: ST_TO_ADDR
// radius = 2 ;
12080: LD_ADDR_VAR 0 2
12084: PUSH
12085: LD_INT 2
12087: ST_TO_ADDR
// while not placeunitxyr ( vlajka2 , 143 , 60 , radius , false ) do
12088: LD_LOC 17
12092: PPUSH
12093: LD_INT 143
12095: PPUSH
12096: LD_INT 60
12098: PPUSH
12099: LD_VAR 0 2
12103: PPUSH
12104: LD_INT 0
12106: PPUSH
12107: CALL_OW 50
12111: NOT
12112: IFFALSE 12130
// radius = radius + 1 ;
12114: LD_ADDR_VAR 0 2
12118: PUSH
12119: LD_VAR 0 2
12123: PUSH
12124: LD_INT 1
12126: PLUS
12127: ST_TO_ADDR
12128: GO 12088
// end ; end ;
12130: PPOPN 2
12132: END
// on vehiclecaptured ( vehnew , vehold , origside , hum ) marked 05 do var radius ;
12133: LD_INT 0
12135: PPUSH
// if ( vehold = vlajka1 ) then
12136: LD_VAR 0 2
12140: PUSH
12141: LD_LOC 16
12145: EQUAL
12146: IFFALSE 12299
// begin vlajka1 = vehnew ;
12148: LD_ADDR_LOC 16
12152: PUSH
12153: LD_VAR 0 1
12157: ST_TO_ADDR
// comexitvehicle ( vlajka1 ) ;
12158: LD_LOC 16
12162: PPUSH
12163: CALL_OW 121
// while isdrivenby ( vlajka1 ) do
12167: LD_LOC 16
12171: PPUSH
12172: CALL_OW 311
12176: IFFALSE 12187
// wait ( 2 ) ;
12178: LD_INT 2
12180: PPUSH
12181: CALL_OW 67
12185: GO 12167
// if getdistunitxy ( vlajka1 , 76 , 60 ) > 4 then
12187: LD_LOC 16
12191: PPUSH
12192: LD_INT 76
12194: PPUSH
12195: LD_INT 60
12197: PPUSH
12198: CALL_OW 297
12202: PUSH
12203: LD_INT 4
12205: GREATER
12206: IFFALSE 12283
// begin removeunit ( vlajka1 ) ;
12208: LD_LOC 16
12212: PPUSH
12213: CALL_OW 64
// setside ( vlajka1 , origside ) ;
12217: LD_LOC 16
12221: PPUSH
12222: LD_VAR 0 3
12226: PPUSH
12227: CALL_OW 235
// radius = 2 ;
12231: LD_ADDR_VAR 0 5
12235: PUSH
12236: LD_INT 2
12238: ST_TO_ADDR
// while not placeunitxyr ( vlajka1 , 76 , 60 , radius , false ) do
12239: LD_LOC 16
12243: PPUSH
12244: LD_INT 76
12246: PPUSH
12247: LD_INT 60
12249: PPUSH
12250: LD_VAR 0 5
12254: PPUSH
12255: LD_INT 0
12257: PPUSH
12258: CALL_OW 50
12262: NOT
12263: IFFALSE 12281
// radius = radius + 1 ;
12265: LD_ADDR_VAR 0 5
12269: PUSH
12270: LD_VAR 0 5
12274: PUSH
12275: LD_INT 1
12277: PLUS
12278: ST_TO_ADDR
12279: GO 12239
// end else
12281: GO 12297
// setside ( vlajka1 , origside ) ;
12283: LD_LOC 16
12287: PPUSH
12288: LD_VAR 0 3
12292: PPUSH
12293: CALL_OW 235
// end else
12297: GO 12460
// if ( vehold = vlajka2 ) then
12299: LD_VAR 0 2
12303: PUSH
12304: LD_LOC 17
12308: EQUAL
12309: IFFALSE 12460
// begin vlajka2 = vehnew ;
12311: LD_ADDR_LOC 17
12315: PUSH
12316: LD_VAR 0 1
12320: ST_TO_ADDR
// comexitvehicle ( vlajka2 ) ;
12321: LD_LOC 17
12325: PPUSH
12326: CALL_OW 121
// while isdrivenby ( vlajka2 ) do
12330: LD_LOC 17
12334: PPUSH
12335: CALL_OW 311
12339: IFFALSE 12350
// wait ( 2 ) ;
12341: LD_INT 2
12343: PPUSH
12344: CALL_OW 67
12348: GO 12330
// if getdistunitxy ( vlajka2 , 143 , 60 ) > 4 then
12350: LD_LOC 17
12354: PPUSH
12355: LD_INT 143
12357: PPUSH
12358: LD_INT 60
12360: PPUSH
12361: CALL_OW 297
12365: PUSH
12366: LD_INT 4
12368: GREATER
12369: IFFALSE 12446
// begin removeunit ( vlajka2 ) ;
12371: LD_LOC 17
12375: PPUSH
12376: CALL_OW 64
// setside ( vlajka2 , origside ) ;
12380: LD_LOC 17
12384: PPUSH
12385: LD_VAR 0 3
12389: PPUSH
12390: CALL_OW 235
// radius = 2 ;
12394: LD_ADDR_VAR 0 5
12398: PUSH
12399: LD_INT 2
12401: ST_TO_ADDR
// while not placeunitxyr ( vlajka2 , 143 , 60 , radius , false ) do
12402: LD_LOC 17
12406: PPUSH
12407: LD_INT 143
12409: PPUSH
12410: LD_INT 60
12412: PPUSH
12413: LD_VAR 0 5
12417: PPUSH
12418: LD_INT 0
12420: PPUSH
12421: CALL_OW 50
12425: NOT
12426: IFFALSE 12444
// radius = radius + 1 ;
12428: LD_ADDR_VAR 0 5
12432: PUSH
12433: LD_VAR 0 5
12437: PUSH
12438: LD_INT 1
12440: PLUS
12441: ST_TO_ADDR
12442: GO 12402
// end else
12444: GO 12460
// setside ( vlajka2 , origside ) ;
12446: LD_LOC 17
12450: PPUSH
12451: LD_VAR 0 3
12455: PPUSH
12456: CALL_OW 235
// end ;
12460: PPOPN 5
12462: END
// every 10 + 1 trigger getdistunitxy ( vlajka1 , 185 , 60 ) < 6 marked 06 do var radius , tmp ;
12463: LD_LOC 16
12467: PPUSH
12468: LD_INT 185
12470: PPUSH
12471: LD_INT 60
12473: PPUSH
12474: CALL_OW 297
12478: PUSH
12479: LD_INT 6
12481: LESS
12482: IFFALSE 12686
12484: GO 12486
12486: DISABLE
12487: LD_INT 0
12489: PPUSH
12490: PPUSH
// begin right_score = right_score + 1 ;
12491: LD_ADDR_LOC 23
12495: PUSH
12496: LD_LOC 23
12500: PUSH
12501: LD_INT 1
12503: PLUS
12504: ST_TO_ADDR
// refresh ;
12505: CALL 11296 0 0
// comexitvehicle ( vlajka1 ) ;
12509: LD_LOC 16
12513: PPUSH
12514: CALL_OW 121
// while isdrivenby ( vlajka1 ) do
12518: LD_LOC 16
12522: PPUSH
12523: CALL_OW 311
12527: IFFALSE 12538
// wait ( 2 ) ;
12529: LD_INT 2
12531: PPUSH
12532: CALL_OW 67
12536: GO 12518
// removeunit ( vlajka1 ) ;
12538: LD_LOC 16
12542: PPUSH
12543: CALL_OW 64
// for radius in [ mat_cans , mat_oil , mat_siberit ] do
12547: LD_ADDR_VAR 0 1
12551: PUSH
12552: LD_INT 1
12554: PUSH
12555: LD_INT 2
12557: PUSH
12558: LD_INT 3
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: LIST
12565: PUSH
12566: FOR_IN
12567: IFFALSE 12633
// begin tmp = getcargo ( vlajka1 , radius ) ;
12569: LD_ADDR_VAR 0 2
12573: PUSH
12574: LD_LOC 16
12578: PPUSH
12579: LD_VAR 0 1
12583: PPUSH
12584: CALL_OW 289
12588: ST_TO_ADDR
// if tmp then
12589: LD_VAR 0 2
12593: IFFALSE 12631
// begin addresourcetype ( pos2base , radius , tmp ) ;
12595: LD_LOC 21
12599: PPUSH
12600: LD_VAR 0 1
12604: PPUSH
12605: LD_VAR 0 2
12609: PPUSH
12610: CALL_OW 276
// setcargo ( vlajka1 , radius , 0 ) ;
12614: LD_LOC 16
12618: PPUSH
12619: LD_VAR 0 1
12623: PPUSH
12624: LD_INT 0
12626: PPUSH
12627: CALL_OW 290
// end ; end ;
12631: GO 12566
12633: POP
12634: POP
// radius = 2 ;
12635: LD_ADDR_VAR 0 1
12639: PUSH
12640: LD_INT 2
12642: ST_TO_ADDR
// while not placeunitxyr ( vlajka1 , 76 , 60 , radius , false ) do
12643: LD_LOC 16
12647: PPUSH
12648: LD_INT 76
12650: PPUSH
12651: LD_INT 60
12653: PPUSH
12654: LD_VAR 0 1
12658: PPUSH
12659: LD_INT 0
12661: PPUSH
12662: CALL_OW 50
12666: NOT
12667: IFFALSE 12685
// radius = radius + 1 ;
12669: LD_ADDR_VAR 0 1
12673: PUSH
12674: LD_VAR 0 1
12678: PUSH
12679: LD_INT 1
12681: PLUS
12682: ST_TO_ADDR
12683: GO 12643
// enable ;
12685: ENABLE
// end ;
12686: PPOPN 2
12688: END
// every 10 trigger getdistunitxy ( vlajka2 , 34 , 60 ) < 6 marked 07 do var radius , tmp ;
12689: LD_LOC 17
12693: PPUSH
12694: LD_INT 34
12696: PPUSH
12697: LD_INT 60
12699: PPUSH
12700: CALL_OW 297
12704: PUSH
12705: LD_INT 6
12707: LESS
12708: IFFALSE 12912
12710: GO 12712
12712: DISABLE
12713: LD_INT 0
12715: PPUSH
12716: PPUSH
// begin left_score = left_score + 1 ;
12717: LD_ADDR_LOC 22
12721: PUSH
12722: LD_LOC 22
12726: PUSH
12727: LD_INT 1
12729: PLUS
12730: ST_TO_ADDR
// refresh ;
12731: CALL 11296 0 0
// comexitvehicle ( vlajka2 ) ;
12735: LD_LOC 17
12739: PPUSH
12740: CALL_OW 121
// while isdrivenby ( vlajka2 ) do
12744: LD_LOC 17
12748: PPUSH
12749: CALL_OW 311
12753: IFFALSE 12764
// wait ( 2 ) ;
12755: LD_INT 2
12757: PPUSH
12758: CALL_OW 67
12762: GO 12744
// removeunit ( vlajka2 ) ;
12764: LD_LOC 17
12768: PPUSH
12769: CALL_OW 64
// for radius in [ mat_cans , mat_oil , mat_siberit ] do
12773: LD_ADDR_VAR 0 1
12777: PUSH
12778: LD_INT 1
12780: PUSH
12781: LD_INT 2
12783: PUSH
12784: LD_INT 3
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: LIST
12791: PUSH
12792: FOR_IN
12793: IFFALSE 12859
// begin tmp = getcargo ( vlajka2 , radius ) ;
12795: LD_ADDR_VAR 0 2
12799: PUSH
12800: LD_LOC 17
12804: PPUSH
12805: LD_VAR 0 1
12809: PPUSH
12810: CALL_OW 289
12814: ST_TO_ADDR
// if tmp then
12815: LD_VAR 0 2
12819: IFFALSE 12857
// begin addresourcetype ( pos1base , radius , tmp ) ;
12821: LD_LOC 20
12825: PPUSH
12826: LD_VAR 0 1
12830: PPUSH
12831: LD_VAR 0 2
12835: PPUSH
12836: CALL_OW 276
// setcargo ( vlajka2 , radius , 0 ) ;
12840: LD_LOC 17
12844: PPUSH
12845: LD_VAR 0 1
12849: PPUSH
12850: LD_INT 0
12852: PPUSH
12853: CALL_OW 290
// end ; end ;
12857: GO 12792
12859: POP
12860: POP
// radius = 2 ;
12861: LD_ADDR_VAR 0 1
12865: PUSH
12866: LD_INT 2
12868: ST_TO_ADDR
// while not placeunitxyr ( vlajka2 , 143 , 60 , radius , false ) do
12869: LD_LOC 17
12873: PPUSH
12874: LD_INT 143
12876: PPUSH
12877: LD_INT 60
12879: PPUSH
12880: LD_VAR 0 1
12884: PPUSH
12885: LD_INT 0
12887: PPUSH
12888: CALL_OW 50
12892: NOT
12893: IFFALSE 12911
// radius = radius + 1 ;
12895: LD_ADDR_VAR 0 1
12899: PUSH
12900: LD_VAR 0 1
12904: PUSH
12905: LD_INT 1
12907: PLUS
12908: ST_TO_ADDR
12909: GO 12869
// enable ;
12911: ENABLE
// end ; end_of_file
12912: PPOPN 2
12914: END
// var zakladna , skilly , start_res , extra_oil , extra_sib , zakl_plus , batt_fl , sib_det , people_resp , siberitofka ; var fortpos , areasdiff , directions ; var resp_cnt1 , resp_cnt2 ; export function other_game ; var tmp , tmp2 , tmp3 , cl ; begin
12915: LD_INT 0
12917: PPUSH
12918: PPUSH
12919: PPUSH
12920: PPUSH
12921: PPUSH
// ctf = false ;
12922: LD_ADDR_EXP 47
12926: PUSH
12927: LD_INT 0
12929: ST_TO_ADDR
// resp_cnt1 = 0 ;
12930: LD_ADDR_LOC 47
12934: PUSH
12935: LD_INT 0
12937: ST_TO_ADDR
// resp_cnt2 = 0 ;
12938: LD_ADDR_LOC 48
12942: PUSH
12943: LD_INT 0
12945: ST_TO_ADDR
// enable ( nonctf_13 ) ;
12946: LD_EXP 55
12950: ENABLE_MARKED
// for tmp = 1 to 8 do
12951: LD_ADDR_VAR 0 2
12955: PUSH
12956: DOUBLE
12957: LD_INT 1
12959: DEC
12960: ST_TO_ADDR
12961: LD_INT 8
12963: PUSH
12964: FOR_TO
12965: IFFALSE 13026
// begin setrestrict ( b_depot , tmp , state_enabled ) ;
12967: LD_INT 0
12969: PPUSH
12970: LD_VAR 0 2
12974: PPUSH
12975: LD_INT 1
12977: PPUSH
12978: CALL_OW 324
// if sib_det then
12982: LD_LOC 41
12986: IFFALSE 13003
// settech ( tech_sibdet , tmp , state_researched ) ;
12988: LD_INT 20
12990: PPUSH
12991: LD_VAR 0 2
12995: PPUSH
12996: LD_INT 2
12998: PPUSH
12999: CALL_OW 322
// if siberitofka then
13003: LD_LOC 43
13007: IFFALSE 13024
// settech ( tech_sibfiss , tmp , state_enabled ) ;
13009: LD_INT 25
13011: PPUSH
13012: LD_VAR 0 2
13016: PPUSH
13017: LD_INT 1
13019: PPUSH
13020: CALL_OW 322
// end ;
13024: GO 12964
13026: POP
13027: POP
// if multiplayer then
13028: LD_OWVAR 4
13032: IFFALSE 13205
// begin zakladna = getmultiplayersetting ( 0 ) ;
13034: LD_ADDR_LOC 34
13038: PUSH
13039: LD_INT 0
13041: PPUSH
13042: CALL_OW 426
13046: ST_TO_ADDR
// lidi = getmultiplayersetting ( 1 ) ;
13047: LD_ADDR_EXP 37
13051: PUSH
13052: LD_INT 1
13054: PPUSH
13055: CALL_OW 426
13059: ST_TO_ADDR
// skilly = getmultiplayersetting ( 2 ) ;
13060: LD_ADDR_LOC 35
13064: PUSH
13065: LD_INT 2
13067: PPUSH
13068: CALL_OW 426
13072: ST_TO_ADDR
// start_res = getmultiplayersetting ( 3 ) ;
13073: LD_ADDR_LOC 36
13077: PUSH
13078: LD_INT 3
13080: PPUSH
13081: CALL_OW 426
13085: ST_TO_ADDR
// krabice = getmultiplayersetting ( 4 ) ;
13086: LD_ADDR_EXP 38
13090: PUSH
13091: LD_INT 4
13093: PPUSH
13094: CALL_OW 426
13098: ST_TO_ADDR
// extra_oil = getmultiplayersetting ( 5 ) ;
13099: LD_ADDR_LOC 37
13103: PUSH
13104: LD_INT 5
13106: PPUSH
13107: CALL_OW 426
13111: ST_TO_ADDR
// extra_sib = getmultiplayersetting ( 6 ) ;
13112: LD_ADDR_LOC 38
13116: PUSH
13117: LD_INT 6
13119: PPUSH
13120: CALL_OW 426
13124: ST_TO_ADDR
// zakl_plus = getmultiplayersetting ( 7 ) ;
13125: LD_ADDR_LOC 39
13129: PUSH
13130: LD_INT 7
13132: PPUSH
13133: CALL_OW 426
13137: ST_TO_ADDR
// batt_fl = getmultiplayersetting ( 11 ) ;
13138: LD_ADDR_LOC 40
13142: PUSH
13143: LD_INT 11
13145: PPUSH
13146: CALL_OW 426
13150: ST_TO_ADDR
// sib_det = getmultiplayersetting ( 12 ) ;
13151: LD_ADDR_LOC 41
13155: PUSH
13156: LD_INT 12
13158: PPUSH
13159: CALL_OW 426
13163: ST_TO_ADDR
// opoce = getmultiplayersetting ( 13 ) ;
13164: LD_ADDR_EXP 39
13168: PUSH
13169: LD_INT 13
13171: PPUSH
13172: CALL_OW 426
13176: ST_TO_ADDR
// people_resp = getmultiplayersetting ( 14 ) ;
13177: LD_ADDR_LOC 42
13181: PUSH
13182: LD_INT 14
13184: PPUSH
13185: CALL_OW 426
13189: ST_TO_ADDR
// siberitofka = getmultiplayersetting ( 15 ) ;
13190: LD_ADDR_LOC 43
13194: PUSH
13195: LD_INT 15
13197: PPUSH
13198: CALL_OW 426
13202: ST_TO_ADDR
// end else
13203: GO 13309
// begin zakladna = 1 ;
13205: LD_ADDR_LOC 34
13209: PUSH
13210: LD_INT 1
13212: ST_TO_ADDR
// lidi = 1 ;
13213: LD_ADDR_EXP 37
13217: PUSH
13218: LD_INT 1
13220: ST_TO_ADDR
// skilly = 1 ;
13221: LD_ADDR_LOC 35
13225: PUSH
13226: LD_INT 1
13228: ST_TO_ADDR
// start_res = 2 ;
13229: LD_ADDR_LOC 36
13233: PUSH
13234: LD_INT 2
13236: ST_TO_ADDR
// krabice = 1 ;
13237: LD_ADDR_EXP 38
13241: PUSH
13242: LD_INT 1
13244: ST_TO_ADDR
// extra_oil = 1 ;
13245: LD_ADDR_LOC 37
13249: PUSH
13250: LD_INT 1
13252: ST_TO_ADDR
// extra_sib = 1 ;
13253: LD_ADDR_LOC 38
13257: PUSH
13258: LD_INT 1
13260: ST_TO_ADDR
// zakl_plus = 2 ;
13261: LD_ADDR_LOC 39
13265: PUSH
13266: LD_INT 2
13268: ST_TO_ADDR
// batt_fl = 0 ;
13269: LD_ADDR_LOC 40
13273: PUSH
13274: LD_INT 0
13276: ST_TO_ADDR
// sib_det = 0 ;
13277: LD_ADDR_LOC 41
13281: PUSH
13282: LD_INT 0
13284: ST_TO_ADDR
// opoce = 3 ;
13285: LD_ADDR_EXP 39
13289: PUSH
13290: LD_INT 3
13292: ST_TO_ADDR
// people_resp = 0 ;
13293: LD_ADDR_LOC 42
13297: PUSH
13298: LD_INT 0
13300: ST_TO_ADDR
// siberitofka = 0 ;
13301: LD_ADDR_LOC 43
13305: PUSH
13306: LD_INT 0
13308: ST_TO_ADDR
// end ; if people_resp then
13309: LD_LOC 42
13313: IFFALSE 13330
// begin enable ( nonctf_10 ) ;
13315: LD_EXP 52
13319: ENABLE_MARKED
// enable ( nonctf_11 ) ;
13320: LD_EXP 53
13324: ENABLE_MARKED
// enable ( nonctf_12 ) ;
13325: LD_EXP 54
13329: ENABLE_MARKED
// end ; if people_resp = 1 then
13330: LD_LOC 42
13334: PUSH
13335: LD_INT 1
13337: EQUAL
13338: IFFALSE 13348
// people_resp = 3 ;
13340: LD_ADDR_LOC 42
13344: PUSH
13345: LD_INT 3
13347: ST_TO_ADDR
// if people_resp = 2 then
13348: LD_LOC 42
13352: PUSH
13353: LD_INT 2
13355: EQUAL
13356: IFFALSE 13366
// people_resp = 1 ;
13358: LD_ADDR_LOC 42
13362: PUSH
13363: LD_INT 1
13365: ST_TO_ADDR
// case lidi of 0 :
13366: LD_EXP 37
13370: PUSH
13371: LD_INT 0
13373: DOUBLE
13374: EQUAL
13375: IFTRUE 13379
13377: GO 13390
13379: POP
// lidi = 9 ; 1 :
13380: LD_ADDR_EXP 37
13384: PUSH
13385: LD_INT 9
13387: ST_TO_ADDR
13388: GO 13467
13390: LD_INT 1
13392: DOUBLE
13393: EQUAL
13394: IFTRUE 13398
13396: GO 13409
13398: POP
// lidi = 13 ; 2 :
13399: LD_ADDR_EXP 37
13403: PUSH
13404: LD_INT 13
13406: ST_TO_ADDR
13407: GO 13467
13409: LD_INT 2
13411: DOUBLE
13412: EQUAL
13413: IFTRUE 13417
13415: GO 13428
13417: POP
// lidi = 19 ; 3 :
13418: LD_ADDR_EXP 37
13422: PUSH
13423: LD_INT 19
13425: ST_TO_ADDR
13426: GO 13467
13428: LD_INT 3
13430: DOUBLE
13431: EQUAL
13432: IFTRUE 13436
13434: GO 13447
13436: POP
// lidi = 23 ; 4 :
13437: LD_ADDR_EXP 37
13441: PUSH
13442: LD_INT 23
13444: ST_TO_ADDR
13445: GO 13467
13447: LD_INT 4
13449: DOUBLE
13450: EQUAL
13451: IFTRUE 13455
13453: GO 13466
13455: POP
// lidi = 29 ; end ;
13456: LD_ADDR_EXP 37
13460: PUSH
13461: LD_INT 29
13463: ST_TO_ADDR
13464: GO 13467
13466: POP
// skilly = skilly + 1 ;
13467: LD_ADDR_LOC 35
13471: PUSH
13472: LD_LOC 35
13476: PUSH
13477: LD_INT 1
13479: PLUS
13480: ST_TO_ADDR
// case start_res of 0 :
13481: LD_LOC 36
13485: PUSH
13486: LD_INT 0
13488: DOUBLE
13489: EQUAL
13490: IFTRUE 13494
13492: GO 13505
13494: POP
// start_res = 0 ; 1 :
13495: LD_ADDR_LOC 36
13499: PUSH
13500: LD_INT 0
13502: ST_TO_ADDR
13503: GO 13563
13505: LD_INT 1
13507: DOUBLE
13508: EQUAL
13509: IFTRUE 13513
13511: GO 13524
13513: POP
// start_res = 50 ; 2 :
13514: LD_ADDR_LOC 36
13518: PUSH
13519: LD_INT 50
13521: ST_TO_ADDR
13522: GO 13563
13524: LD_INT 2
13526: DOUBLE
13527: EQUAL
13528: IFTRUE 13532
13530: GO 13543
13532: POP
// start_res = 100 ; 3 :
13533: LD_ADDR_LOC 36
13537: PUSH
13538: LD_INT 100
13540: ST_TO_ADDR
13541: GO 13563
13543: LD_INT 3
13545: DOUBLE
13546: EQUAL
13547: IFTRUE 13551
13549: GO 13562
13551: POP
// start_res = 200 ; end ;
13552: LD_ADDR_LOC 36
13556: PUSH
13557: LD_INT 200
13559: ST_TO_ADDR
13560: GO 13563
13562: POP
// case krabice of 0 :
13563: LD_EXP 38
13567: PUSH
13568: LD_INT 0
13570: DOUBLE
13571: EQUAL
13572: IFTRUE 13576
13574: GO 13587
13576: POP
// cperiode = 1 1$30 ; 1 :
13577: LD_ADDR_EXP 41
13581: PUSH
13582: LD_INT 3150
13584: ST_TO_ADDR
13585: GO 13626
13587: LD_INT 1
13589: DOUBLE
13590: EQUAL
13591: IFTRUE 13595
13593: GO 13606
13595: POP
// cperiode = 1 1$00 ; 2 :
13596: LD_ADDR_EXP 41
13600: PUSH
13601: LD_INT 2100
13603: ST_TO_ADDR
13604: GO 13626
13606: LD_INT 2
13608: DOUBLE
13609: EQUAL
13610: IFTRUE 13614
13612: GO 13625
13614: POP
// cperiode = 0 0$30 ; end ;
13615: LD_ADDR_EXP 41
13619: PUSH
13620: LD_INT 1050
13622: ST_TO_ADDR
13623: GO 13626
13625: POP
// case opoce of 0 :
13626: LD_EXP 39
13630: PUSH
13631: LD_INT 0
13633: DOUBLE
13634: EQUAL
13635: IFTRUE 13639
13637: GO 13650
13639: POP
// opoce = 0 ; 1 :
13640: LD_ADDR_EXP 39
13644: PUSH
13645: LD_INT 0
13647: ST_TO_ADDR
13648: GO 13765
13650: LD_INT 1
13652: DOUBLE
13653: EQUAL
13654: IFTRUE 13658
13656: GO 13669
13658: POP
// opoce = 3 ; 2 :
13659: LD_ADDR_EXP 39
13663: PUSH
13664: LD_INT 3
13666: ST_TO_ADDR
13667: GO 13765
13669: LD_INT 2
13671: DOUBLE
13672: EQUAL
13673: IFTRUE 13677
13675: GO 13688
13677: POP
// opoce = 7 ; 3 :
13678: LD_ADDR_EXP 39
13682: PUSH
13683: LD_INT 7
13685: ST_TO_ADDR
13686: GO 13765
13688: LD_INT 3
13690: DOUBLE
13691: EQUAL
13692: IFTRUE 13696
13694: GO 13707
13696: POP
// opoce = 11 ; 4 :
13697: LD_ADDR_EXP 39
13701: PUSH
13702: LD_INT 11
13704: ST_TO_ADDR
13705: GO 13765
13707: LD_INT 4
13709: DOUBLE
13710: EQUAL
13711: IFTRUE 13715
13713: GO 13726
13715: POP
// opoce = 15 ; 5 :
13716: LD_ADDR_EXP 39
13720: PUSH
13721: LD_INT 15
13723: ST_TO_ADDR
13724: GO 13765
13726: LD_INT 5
13728: DOUBLE
13729: EQUAL
13730: IFTRUE 13734
13732: GO 13745
13734: POP
// opoce = 19 ; 6 :
13735: LD_ADDR_EXP 39
13739: PUSH
13740: LD_INT 19
13742: ST_TO_ADDR
13743: GO 13765
13745: LD_INT 6
13747: DOUBLE
13748: EQUAL
13749: IFTRUE 13753
13751: GO 13764
13753: POP
// opoce = 23 ; end ;
13754: LD_ADDR_EXP 39
13758: PUSH
13759: LD_INT 23
13761: ST_TO_ADDR
13762: GO 13765
13764: POP
// fortpos = [ [ [ 46 , 53 , 4 ] , [ 51 , 62 , 4 ] ] , [ [ 167 , 53 , 1 ] , [ 173 , 64 , 1 ] ] ] ;
13765: LD_ADDR_LOC 44
13769: PUSH
13770: LD_INT 46
13772: PUSH
13773: LD_INT 53
13775: PUSH
13776: LD_INT 4
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: LIST
13783: PUSH
13784: LD_INT 51
13786: PUSH
13787: LD_INT 62
13789: PUSH
13790: LD_INT 4
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: LIST
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: PUSH
13802: LD_INT 167
13804: PUSH
13805: LD_INT 53
13807: PUSH
13808: LD_INT 1
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: LIST
13815: PUSH
13816: LD_INT 173
13818: PUSH
13819: LD_INT 64
13821: PUSH
13822: LD_INT 1
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: LIST
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: ST_TO_ADDR
// areasdiff = [ vlevodiff , vpravodiff ] ;
13838: LD_ADDR_LOC 45
13842: PUSH
13843: LD_INT 16
13845: PUSH
13846: LD_INT 17
13848: PUSH
13849: EMPTY
13850: LIST
13851: LIST
13852: ST_TO_ADDR
// directions = [ 4 , 1 ] ;
13853: LD_ADDR_LOC 46
13857: PUSH
13858: LD_INT 4
13860: PUSH
13861: LD_INT 1
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: ST_TO_ADDR
// for tmp = 1 to 8 do
13868: LD_ADDR_VAR 0 2
13872: PUSH
13873: DOUBLE
13874: LD_INT 1
13876: DEC
13877: ST_TO_ADDR
13878: LD_INT 8
13880: PUSH
13881: FOR_TO
13882: IFFALSE 15051
// if mp_sides_nations_ [ tmp ] then
13884: LD_EXP 49
13888: PUSH
13889: LD_VAR 0 2
13893: ARRAY
13894: IFFALSE 15049
// begin if mp_sides_positions_ [ tmp ] = 1 then
13896: LD_EXP 50
13900: PUSH
13901: LD_VAR 0 2
13905: ARRAY
13906: PUSH
13907: LD_INT 1
13909: EQUAL
13910: IFFALSE 13924
// pos1side = tmp else
13912: LD_ADDR_EXP 44
13916: PUSH
13917: LD_VAR 0 2
13921: ST_TO_ADDR
13922: GO 13934
// pos2side = tmp ;
13924: LD_ADDR_EXP 45
13928: PUSH
13929: LD_VAR 0 2
13933: ST_TO_ADDR
// uc_side = tmp ;
13934: LD_ADDR_OWVAR 20
13938: PUSH
13939: LD_VAR 0 2
13943: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ tmp ] ;
13944: LD_ADDR_OWVAR 21
13948: PUSH
13949: LD_EXP 49
13953: PUSH
13954: LD_VAR 0 2
13958: ARRAY
13959: ST_TO_ADDR
// bc_type = b_depot ;
13960: LD_ADDR_OWVAR 42
13964: PUSH
13965: LD_INT 0
13967: ST_TO_ADDR
// bc_level = 1 ;
13968: LD_ADDR_OWVAR 43
13972: PUSH
13973: LD_INT 1
13975: ST_TO_ADDR
// tmp2 = createandplacebuildingxyd ( depotpositions [ mp_sides_positions_ [ tmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 2 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 3 ] ) ;
13976: LD_ADDR_VAR 0 3
13980: PUSH
13981: LD_EXP 42
13985: PUSH
13986: LD_EXP 50
13990: PUSH
13991: LD_VAR 0 2
13995: ARRAY
13996: ARRAY
13997: PUSH
13998: LD_INT 1
14000: ARRAY
14001: PPUSH
14002: LD_EXP 42
14006: PUSH
14007: LD_EXP 50
14011: PUSH
14012: LD_VAR 0 2
14016: ARRAY
14017: ARRAY
14018: PUSH
14019: LD_INT 2
14021: ARRAY
14022: PPUSH
14023: LD_EXP 42
14027: PUSH
14028: LD_EXP 50
14032: PUSH
14033: LD_VAR 0 2
14037: ARRAY
14038: ARRAY
14039: PUSH
14040: LD_INT 3
14042: ARRAY
14043: PPUSH
14044: CALL_OW 47
14048: ST_TO_ADDR
// if batt_fl then
14049: LD_LOC 40
14053: IFFALSE 14163
// setbattleflag ( tmp , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 2 ] , [ [ bfo_defend_bonus_human , 80 ] , [ bfo_defend_bonus_vehicle , 40 ] , [ bfo_defend_bonus_building , 0 ] , [ bfo_range , 17 ] , [ bfo_height , 100 ] ] ) ;
14055: LD_VAR 0 2
14059: PPUSH
14060: LD_EXP 42
14064: PUSH
14065: LD_EXP 50
14069: PUSH
14070: LD_VAR 0 2
14074: ARRAY
14075: ARRAY
14076: PUSH
14077: LD_INT 1
14079: ARRAY
14080: PPUSH
14081: LD_EXP 42
14085: PUSH
14086: LD_EXP 50
14090: PUSH
14091: LD_VAR 0 2
14095: ARRAY
14096: ARRAY
14097: PUSH
14098: LD_INT 2
14100: ARRAY
14101: PPUSH
14102: LD_INT 1
14104: PUSH
14105: LD_INT 80
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: PUSH
14112: LD_INT 2
14114: PUSH
14115: LD_INT 40
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: PUSH
14122: LD_INT 3
14124: PUSH
14125: LD_INT 0
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: PUSH
14132: LD_INT 10
14134: PUSH
14135: LD_INT 17
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: PUSH
14142: LD_INT 20
14144: PUSH
14145: LD_INT 100
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: PPUSH
14159: CALL_OW 418
// if zakladna then
14163: LD_LOC 34
14167: IFFALSE 14335
// begin bc_type = b_breastwork ;
14169: LD_ADDR_OWVAR 42
14173: PUSH
14174: LD_INT 31
14176: ST_TO_ADDR
// createandplacebuildingxyd ( fortpos [ mp_sides_positions_ [ tmp ] ] [ 1 ] [ 1 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 1 ] [ 2 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 1 ] [ 3 ] ) ;
14177: LD_LOC 44
14181: PUSH
14182: LD_EXP 50
14186: PUSH
14187: LD_VAR 0 2
14191: ARRAY
14192: ARRAY
14193: PUSH
14194: LD_INT 1
14196: ARRAY
14197: PUSH
14198: LD_INT 1
14200: ARRAY
14201: PPUSH
14202: LD_LOC 44
14206: PUSH
14207: LD_EXP 50
14211: PUSH
14212: LD_VAR 0 2
14216: ARRAY
14217: ARRAY
14218: PUSH
14219: LD_INT 1
14221: ARRAY
14222: PUSH
14223: LD_INT 2
14225: ARRAY
14226: PPUSH
14227: LD_LOC 44
14231: PUSH
14232: LD_EXP 50
14236: PUSH
14237: LD_VAR 0 2
14241: ARRAY
14242: ARRAY
14243: PUSH
14244: LD_INT 1
14246: ARRAY
14247: PUSH
14248: LD_INT 3
14250: ARRAY
14251: PPUSH
14252: CALL_OW 47
// createandplacebuildingxyd ( fortpos [ mp_sides_positions_ [ tmp ] ] [ 2 ] [ 1 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 2 ] [ 2 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 2 ] [ 3 ] ) ;
14256: LD_LOC 44
14260: PUSH
14261: LD_EXP 50
14265: PUSH
14266: LD_VAR 0 2
14270: ARRAY
14271: ARRAY
14272: PUSH
14273: LD_INT 2
14275: ARRAY
14276: PUSH
14277: LD_INT 1
14279: ARRAY
14280: PPUSH
14281: LD_LOC 44
14285: PUSH
14286: LD_EXP 50
14290: PUSH
14291: LD_VAR 0 2
14295: ARRAY
14296: ARRAY
14297: PUSH
14298: LD_INT 2
14300: ARRAY
14301: PUSH
14302: LD_INT 2
14304: ARRAY
14305: PPUSH
14306: LD_LOC 44
14310: PUSH
14311: LD_EXP 50
14315: PUSH
14316: LD_VAR 0 2
14320: ARRAY
14321: ARRAY
14322: PUSH
14323: LD_INT 2
14325: ARRAY
14326: PUSH
14327: LD_INT 3
14329: ARRAY
14330: PPUSH
14331: CALL_OW 47
// end ; addresourcetype ( getbase ( tmp2 ) , mat_cans , start_res ) ;
14335: LD_VAR 0 3
14339: PPUSH
14340: CALL_OW 274
14344: PPUSH
14345: LD_INT 1
14347: PPUSH
14348: LD_LOC 36
14352: PPUSH
14353: CALL_OW 276
// if extra_oil then
14357: LD_LOC 37
14361: IFFALSE 14453
// begin tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14363: LD_ADDR_VAR 0 3
14367: PUSH
14368: LD_LOC 45
14372: PUSH
14373: LD_EXP 50
14377: PUSH
14378: LD_VAR 0 2
14382: ARRAY
14383: ARRAY
14384: PPUSH
14385: LD_INT 0
14387: PPUSH
14388: CALL_OW 16
14392: ST_TO_ADDR
// while not createdepositxy ( tmp2 [ 1 ] , tmp2 [ 2 ] , mat_oil ) do
14393: LD_VAR 0 3
14397: PUSH
14398: LD_INT 1
14400: ARRAY
14401: PPUSH
14402: LD_VAR 0 3
14406: PUSH
14407: LD_INT 2
14409: ARRAY
14410: PPUSH
14411: LD_INT 2
14413: PPUSH
14414: CALL_OW 62
14418: NOT
14419: IFFALSE 14453
// tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14421: LD_ADDR_VAR 0 3
14425: PUSH
14426: LD_LOC 45
14430: PUSH
14431: LD_EXP 50
14435: PUSH
14436: LD_VAR 0 2
14440: ARRAY
14441: ARRAY
14442: PPUSH
14443: LD_INT 0
14445: PPUSH
14446: CALL_OW 16
14450: ST_TO_ADDR
14451: GO 14393
// end ; if extra_sib then
14453: LD_LOC 38
14457: IFFALSE 14549
// begin tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14459: LD_ADDR_VAR 0 3
14463: PUSH
14464: LD_LOC 45
14468: PUSH
14469: LD_EXP 50
14473: PUSH
14474: LD_VAR 0 2
14478: ARRAY
14479: ARRAY
14480: PPUSH
14481: LD_INT 0
14483: PPUSH
14484: CALL_OW 16
14488: ST_TO_ADDR
// while not createdepositxy ( tmp2 [ 1 ] , tmp2 [ 2 ] , mat_siberit ) do
14489: LD_VAR 0 3
14493: PUSH
14494: LD_INT 1
14496: ARRAY
14497: PPUSH
14498: LD_VAR 0 3
14502: PUSH
14503: LD_INT 2
14505: ARRAY
14506: PPUSH
14507: LD_INT 3
14509: PPUSH
14510: CALL_OW 62
14514: NOT
14515: IFFALSE 14549
// tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14517: LD_ADDR_VAR 0 3
14521: PUSH
14522: LD_LOC 45
14526: PUSH
14527: LD_EXP 50
14531: PUSH
14532: LD_VAR 0 2
14536: ARRAY
14537: ARRAY
14538: PPUSH
14539: LD_INT 0
14541: PPUSH
14542: CALL_OW 16
14546: ST_TO_ADDR
14547: GO 14489
// end ; if zakl_plus > 0 then
14549: LD_LOC 39
14553: PUSH
14554: LD_INT 0
14556: GREATER
14557: IFFALSE 14817
// begin bc_type = b_lab ;
14559: LD_ADDR_OWVAR 42
14563: PUSH
14564: LD_INT 6
14566: ST_TO_ADDR
// uc_direction = directions [ mp_sides_positions_ [ tmp ] ] ;
14567: LD_ADDR_OWVAR 24
14571: PUSH
14572: LD_LOC 46
14576: PUSH
14577: LD_EXP 50
14581: PUSH
14582: LD_VAR 0 2
14586: ARRAY
14587: ARRAY
14588: ST_TO_ADDR
// tmp3 = createbuilding ;
14589: LD_ADDR_VAR 0 4
14593: PUSH
14594: CALL_OW 46
14598: ST_TO_ADDR
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14599: LD_ADDR_VAR 0 3
14603: PUSH
14604: LD_EXP 43
14608: PUSH
14609: LD_EXP 50
14613: PUSH
14614: LD_VAR 0 2
14618: ARRAY
14619: ARRAY
14620: PPUSH
14621: LD_INT 0
14623: PPUSH
14624: CALL_OW 16
14628: ST_TO_ADDR
// while not placeunitxy ( tmp3 , tmp2 [ 1 ] , tmp2 [ 2 ] , false ) do
14629: LD_VAR 0 4
14633: PPUSH
14634: LD_VAR 0 3
14638: PUSH
14639: LD_INT 1
14641: ARRAY
14642: PPUSH
14643: LD_VAR 0 3
14647: PUSH
14648: LD_INT 2
14650: ARRAY
14651: PPUSH
14652: LD_INT 0
14654: PPUSH
14655: CALL_OW 48
14659: NOT
14660: IFFALSE 14694
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14662: LD_ADDR_VAR 0 3
14666: PUSH
14667: LD_EXP 43
14671: PUSH
14672: LD_EXP 50
14676: PUSH
14677: LD_VAR 0 2
14681: ARRAY
14682: ARRAY
14683: PPUSH
14684: LD_INT 0
14686: PPUSH
14687: CALL_OW 16
14691: ST_TO_ADDR
14692: GO 14629
// if zakl_plus > 1 then
14694: LD_LOC 39
14698: PUSH
14699: LD_INT 1
14701: GREATER
14702: IFFALSE 14817
// begin bc_type = b_workshop ;
14704: LD_ADDR_OWVAR 42
14708: PUSH
14709: LD_INT 2
14711: ST_TO_ADDR
// tmp3 = createbuilding ;
14712: LD_ADDR_VAR 0 4
14716: PUSH
14717: CALL_OW 46
14721: ST_TO_ADDR
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14722: LD_ADDR_VAR 0 3
14726: PUSH
14727: LD_EXP 43
14731: PUSH
14732: LD_EXP 50
14736: PUSH
14737: LD_VAR 0 2
14741: ARRAY
14742: ARRAY
14743: PPUSH
14744: LD_INT 0
14746: PPUSH
14747: CALL_OW 16
14751: ST_TO_ADDR
// while not placeunitxy ( tmp3 , tmp2 [ 1 ] , tmp2 [ 2 ] , false ) do
14752: LD_VAR 0 4
14756: PPUSH
14757: LD_VAR 0 3
14761: PUSH
14762: LD_INT 1
14764: ARRAY
14765: PPUSH
14766: LD_VAR 0 3
14770: PUSH
14771: LD_INT 2
14773: ARRAY
14774: PPUSH
14775: LD_INT 0
14777: PPUSH
14778: CALL_OW 48
14782: NOT
14783: IFFALSE 14817
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14785: LD_ADDR_VAR 0 3
14789: PUSH
14790: LD_EXP 43
14794: PUSH
14795: LD_EXP 50
14799: PUSH
14800: LD_VAR 0 2
14804: ARRAY
14805: ARRAY
14806: PPUSH
14807: LD_INT 0
14809: PPUSH
14810: CALL_OW 16
14814: ST_TO_ADDR
14815: GO 14752
// end ; end ; if batt_fl then
14817: LD_LOC 40
14821: IFFALSE 14931
// setbattleflag ( tmp , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 2 ] , [ [ bfo_defend_bonus_human , 80 ] , [ bfo_defend_bonus_vehicle , 40 ] , [ bfo_defend_bonus_building , 0 ] , [ bfo_range , 17 ] , [ bfo_height , 100 ] ] ) ;
14823: LD_VAR 0 2
14827: PPUSH
14828: LD_EXP 42
14832: PUSH
14833: LD_EXP 50
14837: PUSH
14838: LD_VAR 0 2
14842: ARRAY
14843: ARRAY
14844: PUSH
14845: LD_INT 1
14847: ARRAY
14848: PPUSH
14849: LD_EXP 42
14853: PUSH
14854: LD_EXP 50
14858: PUSH
14859: LD_VAR 0 2
14863: ARRAY
14864: ARRAY
14865: PUSH
14866: LD_INT 2
14868: ARRAY
14869: PPUSH
14870: LD_INT 1
14872: PUSH
14873: LD_INT 80
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: PUSH
14880: LD_INT 2
14882: PUSH
14883: LD_INT 40
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: PUSH
14890: LD_INT 3
14892: PUSH
14893: LD_INT 0
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: PUSH
14900: LD_INT 10
14902: PUSH
14903: LD_INT 17
14905: PUSH
14906: EMPTY
14907: LIST
14908: LIST
14909: PUSH
14910: LD_INT 20
14912: PUSH
14913: LD_INT 100
14915: PUSH
14916: EMPTY
14917: LIST
14918: LIST
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: PPUSH
14927: CALL_OW 418
// cl = class_scientistic ;
14931: LD_ADDR_VAR 0 5
14935: PUSH
14936: LD_INT 4
14938: ST_TO_ADDR
// for tmp2 = 1 to lidi do
14939: LD_ADDR_VAR 0 3
14943: PUSH
14944: DOUBLE
14945: LD_INT 1
14947: DEC
14948: ST_TO_ADDR
14949: LD_EXP 37
14953: PUSH
14954: FOR_TO
14955: IFFALSE 15047
// begin if tmp2 >= lidi / 2 then
14957: LD_VAR 0 3
14961: PUSH
14962: LD_EXP 37
14966: PUSH
14967: LD_INT 2
14969: DIVREAL
14970: GREATEREQUAL
14971: IFFALSE 14981
// cl = class_soldier ;
14973: LD_ADDR_VAR 0 5
14977: PUSH
14978: LD_INT 1
14980: ST_TO_ADDR
// preparehuman ( 0 , cl , skilly ) ;
14981: LD_INT 0
14983: PPUSH
14984: LD_VAR 0 5
14988: PPUSH
14989: LD_LOC 35
14993: PPUSH
14994: CALL_OW 380
// if tmp2 = 1 then
14998: LD_VAR 0 3
15002: PUSH
15003: LD_INT 1
15005: EQUAL
15006: IFFALSE 15016
// cl = class_engineer ;
15008: LD_ADDR_VAR 0 5
15012: PUSH
15013: LD_INT 2
15015: ST_TO_ADDR
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
15016: CALL_OW 44
15020: PPUSH
15021: LD_EXP 43
15025: PUSH
15026: LD_EXP 50
15030: PUSH
15031: LD_VAR 0 2
15035: ARRAY
15036: ARRAY
15037: PPUSH
15038: LD_INT 0
15040: PPUSH
15041: CALL_OW 49
// end ;
15045: GO 14954
15047: POP
15048: POP
// end ;
15049: GO 13881
15051: POP
15052: POP
// uc_side = 0 ;
15053: LD_ADDR_OWVAR 20
15057: PUSH
15058: LD_INT 0
15060: ST_TO_ADDR
// uc_nation = nation_nature ;
15061: LD_ADDR_OWVAR 21
15065: PUSH
15066: LD_INT 0
15068: ST_TO_ADDR
// for tmp = 1 to opoce do
15069: LD_ADDR_VAR 0 2
15073: PUSH
15074: DOUBLE
15075: LD_INT 1
15077: DEC
15078: ST_TO_ADDR
15079: LD_EXP 39
15083: PUSH
15084: FOR_TO
15085: IFFALSE 15117
// begin preparehuman ( 0 , class_apeman , 0 ) ;
15087: LD_INT 0
15089: PPUSH
15090: LD_INT 12
15092: PPUSH
15093: LD_INT 0
15095: PPUSH
15096: CALL_OW 380
// placeunitarea ( createhuman , les , false ) ;
15100: CALL_OW 44
15104: PPUSH
15105: LD_INT 4
15107: PPUSH
15108: LD_INT 0
15110: PPUSH
15111: CALL_OW 49
// end ;
15115: GO 15084
15117: POP
15118: POP
// case mp_sides_positions_ [ your_side ] of 1 :
15119: LD_EXP 50
15123: PUSH
15124: LD_OWVAR 2
15128: ARRAY
15129: PUSH
15130: LD_INT 1
15132: DOUBLE
15133: EQUAL
15134: IFTRUE 15138
15136: GO 15151
15138: POP
// centernowonxy ( 44 , 60 ) ; 2 :
15139: LD_INT 44
15141: PPUSH
15142: LD_INT 60
15144: PPUSH
15145: CALL_OW 86
15149: GO 15173
15151: LD_INT 2
15153: DOUBLE
15154: EQUAL
15155: IFTRUE 15159
15157: GO 15172
15159: POP
// centernowonxy ( 175 , 60 ) ; end ;
15160: LD_INT 175
15162: PPUSH
15163: LD_INT 60
15165: PPUSH
15166: CALL_OW 86
15170: GO 15173
15172: POP
// end ;
15173: LD_VAR 0 1
15177: RET
// on humandestroyed ( un , side , nat , x , y , dir , sex , cl ) marked 10 do if mp_sides_positions_ [ side ] = 1 then
15178: LD_EXP 50
15182: PUSH
15183: LD_VAR 0 2
15187: ARRAY
15188: PUSH
15189: LD_INT 1
15191: EQUAL
15192: IFFALSE 15210
// resp_cnt1 = resp_cnt1 + 1 else
15194: LD_ADDR_LOC 47
15198: PUSH
15199: LD_LOC 47
15203: PUSH
15204: LD_INT 1
15206: PLUS
15207: ST_TO_ADDR
15208: GO 15224
// resp_cnt2 = resp_cnt2 + 1 ;
15210: LD_ADDR_LOC 48
15214: PUSH
15215: LD_LOC 48
15219: PUSH
15220: LD_INT 1
15222: PLUS
15223: ST_TO_ADDR
15224: PPOPN 8
15226: END
// every 0 0$30 trigger resp_cnt1 >= people_resp marked 11 do
15227: LD_LOC 47
15231: PUSH
15232: LD_LOC 42
15236: GREATEREQUAL
15237: IFFALSE 15390
15239: GO 15241
15241: DISABLE
// begin resp_cnt1 = resp_cnt1 - people_resp ;
15242: LD_ADDR_LOC 47
15246: PUSH
15247: LD_LOC 47
15251: PUSH
15252: LD_LOC 42
15256: MINUS
15257: ST_TO_ADDR
// if not filterallunits ( [ [ f_side , pos1side ] , [ f_or , [ f_btype , b_depot ] , [ f_class , class_engineer ] ] ] ) then
15258: LD_INT 22
15260: PUSH
15261: LD_EXP 44
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: PUSH
15270: LD_INT 2
15272: PUSH
15273: LD_INT 30
15275: PUSH
15276: LD_INT 0
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: PUSH
15283: LD_INT 25
15285: PUSH
15286: LD_INT 2
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: PUSH
15293: EMPTY
15294: LIST
15295: LIST
15296: LIST
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: PPUSH
15302: CALL_OW 69
15306: NOT
15307: IFFALSE 15312
// begin enable ;
15309: ENABLE
// exit ;
15310: GO 15390
// end ; uc_side = pos1side ;
15312: LD_ADDR_OWVAR 20
15316: PUSH
15317: LD_EXP 44
15321: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos1side ] ;
15322: LD_ADDR_OWVAR 21
15326: PUSH
15327: LD_EXP 49
15331: PUSH
15332: LD_EXP 44
15336: ARRAY
15337: ST_TO_ADDR
// preparehuman ( 0 , class_soldier , skilly ) ;
15338: LD_INT 0
15340: PPUSH
15341: LD_INT 1
15343: PPUSH
15344: LD_LOC 35
15348: PPUSH
15349: CALL_OW 380
// wait ( 0 0$10 ) ;
15353: LD_INT 350
15355: PPUSH
15356: CALL_OW 67
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ pos1side ] ] , true ) ;
15360: CALL_OW 44
15364: PPUSH
15365: LD_EXP 43
15369: PUSH
15370: LD_EXP 50
15374: PUSH
15375: LD_EXP 44
15379: ARRAY
15380: ARRAY
15381: PPUSH
15382: LD_INT 1
15384: PPUSH
15385: CALL_OW 49
// enable ;
15389: ENABLE
// end ;
15390: END
// every 0 0$30 trigger resp_cnt2 >= people_resp marked 12 do
15391: LD_LOC 48
15395: PUSH
15396: LD_LOC 42
15400: GREATEREQUAL
15401: IFFALSE 15554
15403: GO 15405
15405: DISABLE
// begin resp_cnt2 = resp_cnt2 - people_resp ;
15406: LD_ADDR_LOC 48
15410: PUSH
15411: LD_LOC 48
15415: PUSH
15416: LD_LOC 42
15420: MINUS
15421: ST_TO_ADDR
// if not filterallunits ( [ [ f_side , pos2side ] , [ f_or , [ f_btype , b_depot ] , [ f_class , class_engineer ] ] ] ) then
15422: LD_INT 22
15424: PUSH
15425: LD_EXP 45
15429: PUSH
15430: EMPTY
15431: LIST
15432: LIST
15433: PUSH
15434: LD_INT 2
15436: PUSH
15437: LD_INT 30
15439: PUSH
15440: LD_INT 0
15442: PUSH
15443: EMPTY
15444: LIST
15445: LIST
15446: PUSH
15447: LD_INT 25
15449: PUSH
15450: LD_INT 2
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: PUSH
15457: EMPTY
15458: LIST
15459: LIST
15460: LIST
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: PPUSH
15466: CALL_OW 69
15470: NOT
15471: IFFALSE 15476
// begin enable ;
15473: ENABLE
// exit ;
15474: GO 15554
// end ; uc_side = pos2side ;
15476: LD_ADDR_OWVAR 20
15480: PUSH
15481: LD_EXP 45
15485: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos2side ] ;
15486: LD_ADDR_OWVAR 21
15490: PUSH
15491: LD_EXP 49
15495: PUSH
15496: LD_EXP 45
15500: ARRAY
15501: ST_TO_ADDR
// preparehuman ( 0 , class_soldier , skilly ) ;
15502: LD_INT 0
15504: PPUSH
15505: LD_INT 1
15507: PPUSH
15508: LD_LOC 35
15512: PPUSH
15513: CALL_OW 380
// wait ( 0 0$10 ) ;
15517: LD_INT 350
15519: PPUSH
15520: CALL_OW 67
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ pos2side ] ] , true ) ;
15524: CALL_OW 44
15528: PPUSH
15529: LD_EXP 43
15533: PUSH
15534: LD_EXP 50
15538: PUSH
15539: LD_EXP 45
15543: ARRAY
15544: ARRAY
15545: PPUSH
15546: LD_INT 1
15548: PPUSH
15549: CALL_OW 49
// enable ;
15553: ENABLE
// end ;
15554: END
// every 0 0$1 marked 13 do
15555: GO 15557
15557: DISABLE
// begin if not filterallunits ( [ [ f_side , pos1side ] , [ f_type , unit_human ] ] ) then
15558: LD_INT 22
15560: PUSH
15561: LD_EXP 44
15565: PUSH
15566: EMPTY
15567: LIST
15568: LIST
15569: PUSH
15570: LD_INT 21
15572: PUSH
15573: LD_INT 1
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: PPUSH
15584: CALL_OW 69
15588: NOT
15589: IFFALSE 15613
// if pos1side = your_side then
15591: LD_EXP 44
15595: PUSH
15596: LD_OWVAR 2
15600: EQUAL
15601: IFFALSE 15609
// youlostinmultiplayer else
15603: CALL_OW 107
15607: GO 15613
// youwininmultiplayer ;
15609: CALL_OW 106
// if not filterallunits ( [ [ f_side , pos2side ] , [ f_type , unit_human ] ] ) then
15613: LD_INT 22
15615: PUSH
15616: LD_EXP 45
15620: PUSH
15621: EMPTY
15622: LIST
15623: LIST
15624: PUSH
15625: LD_INT 21
15627: PUSH
15628: LD_INT 1
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: PUSH
15635: EMPTY
15636: LIST
15637: LIST
15638: PPUSH
15639: CALL_OW 69
15643: NOT
15644: IFFALSE 15668
// if pos2side = your_side then
15646: LD_EXP 45
15650: PUSH
15651: LD_OWVAR 2
15655: EQUAL
15656: IFFALSE 15664
// youlostinmultiplayer else
15658: CALL_OW 107
15662: GO 15668
// youwininmultiplayer ;
15664: CALL_OW 106
// end ; end_of_file
15668: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
15669: LD_INT 0
15671: PPUSH
15672: PPUSH
// for un in battle_flags_id do
15673: LD_ADDR_VAR 0 2
15677: PUSH
15678: LD_EXP 29
15682: PUSH
15683: FOR_IN
15684: IFFALSE 15759
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
15686: LD_VAR 0 2
15690: PPUSH
15691: LD_INT 1
15693: PUSH
15694: LD_LOC 49
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: PUSH
15703: LD_INT 2
15705: PUSH
15706: LD_LOC 49
15710: PUSH
15711: LD_INT 2
15713: DIV
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: PUSH
15719: LD_INT 3
15721: PUSH
15722: LD_LOC 49
15726: PUSH
15727: LD_INT 5
15729: DIV
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: PUSH
15735: LD_INT 20
15737: PUSH
15738: LD_LOC 49
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: PPUSH
15753: CALL_OW 423
15757: GO 15683
15759: POP
15760: POP
// end ;
15761: LD_VAR 0 1
15765: RET
// every 0 0$0.1 marked 55 do var un ;
15766: GO 15768
15768: DISABLE
15769: LD_INT 0
15771: PPUSH
// begin if not def_morale_flags then
15772: LD_EXP 66
15776: NOT
15777: IFFALSE 15781
// exit ;
15779: GO 15858
// if not morale_decreasing_time then
15781: LD_EXP 11
15785: NOT
15786: IFFALSE 15790
// exit ;
15788: GO 15858
// strength = 100 ;
15790: LD_ADDR_LOC 49
15794: PUSH
15795: LD_INT 100
15797: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
15798: LD_EXP 11
15802: PPUSH
15803: CALL_OW 67
// strength := strength - 1 ;
15807: LD_ADDR_LOC 49
15811: PUSH
15812: LD_LOC 49
15816: PUSH
15817: LD_INT 1
15819: MINUS
15820: ST_TO_ADDR
// Update_Flags ;
15821: CALL 15669 0 0
// until not strength ;
15825: LD_LOC 49
15829: NOT
15830: IFFALSE 15798
// for un in battle_flags_id do
15832: LD_ADDR_VAR 0 1
15836: PUSH
15837: LD_EXP 29
15841: PUSH
15842: FOR_IN
15843: IFFALSE 15856
// KillBattleFlag ( un ) ;
15845: LD_VAR 0 1
15849: PPUSH
15850: CALL_OW 419
15854: GO 15842
15856: POP
15857: POP
// end ; end_of_file
15858: PPOPN 1
15860: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
15861: LD_INT 0
15863: PPUSH
15864: PPUSH
// if ( not IAmSpec ) then
15865: CALL_OW 531
15869: NOT
15870: IFFALSE 15886
// Result := Limits_Info ^  ;
15872: LD_ADDR_VAR 0 1
15876: PUSH
15877: LD_LOC 61
15881: PUSH
15882: LD_STRING 
15884: ADD
15885: ST_TO_ADDR
// for i := 1 to 8 do
15886: LD_ADDR_VAR 0 2
15890: PUSH
15891: DOUBLE
15892: LD_INT 1
15894: DEC
15895: ST_TO_ADDR
15896: LD_INT 8
15898: PUSH
15899: FOR_TO
15900: IFFALSE 15945
// if Cheaters [ i ] then
15902: LD_LOC 62
15906: PUSH
15907: LD_VAR 0 2
15911: ARRAY
15912: IFFALSE 15943
// Result := Result ^ [ #Cheater , i , i ] ;
15914: LD_ADDR_VAR 0 1
15918: PUSH
15919: LD_VAR 0 1
15923: PUSH
15924: LD_STRING #Cheater
15926: PUSH
15927: LD_VAR 0 2
15931: PUSH
15932: LD_VAR 0 2
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: LIST
15941: ADD
15942: ST_TO_ADDR
15943: GO 15899
15945: POP
15946: POP
// end ;
15947: LD_VAR 0 1
15951: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
15952: LD_INT 0
15954: PPUSH
15955: PPUSH
15956: PPUSH
15957: PPUSH
15958: PPUSH
// case Game_Type of 10 :
15959: LD_EXP 56
15963: PUSH
15964: LD_INT 10
15966: DOUBLE
15967: EQUAL
15968: IFTRUE 15972
15970: GO 15983
15972: POP
// def_game_rules := 1 ; 11 :
15973: LD_ADDR_EXP 57
15977: PUSH
15978: LD_INT 1
15980: ST_TO_ADDR
15981: GO 16003
15983: LD_INT 11
15985: DOUBLE
15986: EQUAL
15987: IFTRUE 15991
15989: GO 16002
15991: POP
// def_game_rules := 3 ; end ;
15992: LD_ADDR_EXP 57
15996: PUSH
15997: LD_INT 3
15999: ST_TO_ADDR
16000: GO 16003
16002: POP
// case def_game_rules of 0 :
16003: LD_EXP 57
16007: PUSH
16008: LD_INT 0
16010: DOUBLE
16011: EQUAL
16012: IFTRUE 16016
16014: GO 16021
16016: POP
// exit ; 1 :
16017: GO 18079
16019: GO 17979
16021: LD_INT 1
16023: DOUBLE
16024: EQUAL
16025: IFTRUE 16029
16027: GO 16245
16029: POP
// begin def_base_level := 2 ;
16030: LD_ADDR_EXP 58
16034: PUSH
16035: LD_INT 2
16037: ST_TO_ADDR
// def_amount_of_people := 2 ;
16038: LD_ADDR_EXP 59
16042: PUSH
16043: LD_INT 2
16045: ST_TO_ADDR
// def_skill_level := 1 ;
16046: LD_ADDR_EXP 60
16050: PUSH
16051: LD_INT 1
16053: ST_TO_ADDR
// def_starting_resources := 2 ;
16054: LD_ADDR_EXP 61
16058: PUSH
16059: LD_INT 2
16061: ST_TO_ADDR
// def_shipments_density := 1 ;
16062: LD_ADDR_EXP 62
16066: PUSH
16067: LD_INT 1
16069: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
16070: LD_ADDR_EXP 63
16074: PUSH
16075: LD_INT 0
16077: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
16078: LD_ADDR_EXP 64
16082: PUSH
16083: LD_INT 1
16085: ST_TO_ADDR
// def_shared_vision := 1 ;
16086: LD_ADDR_EXP 65
16090: PUSH
16091: LD_INT 1
16093: ST_TO_ADDR
// def_morale_flags := 3 ;
16094: LD_ADDR_EXP 66
16098: PUSH
16099: LD_INT 3
16101: ST_TO_ADDR
// def_siberite_detection := 1 ;
16102: LD_ADDR_EXP 67
16106: PUSH
16107: LD_INT 1
16109: ST_TO_ADDR
// def_people_respawning := 1 ;
16110: LD_ADDR_EXP 68
16114: PUSH
16115: LD_INT 1
16117: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
16118: LD_ADDR_EXP 69
16122: PUSH
16123: LD_INT 1
16125: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16126: LD_ADDR_EXP 70
16130: PUSH
16131: LD_INT 0
16133: ST_TO_ADDR
// def_builduptime := 2 ;
16134: LD_ADDR_EXP 71
16138: PUSH
16139: LD_INT 2
16141: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
16142: LD_ADDR_VAR 0 2
16146: PUSH
16147: EMPTY
16148: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
16149: LD_ADDR_VAR 0 3
16153: PUSH
16154: EMPTY
16155: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16156: LD_ADDR_LOC 56
16160: PUSH
16161: EMPTY
16162: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16163: LD_ADDR_LOC 57
16167: PUSH
16168: EMPTY
16169: ST_TO_ADDR
// Banned_Controls := [ ] ;
16170: LD_ADDR_LOC 58
16174: PUSH
16175: EMPTY
16176: ST_TO_ADDR
// Banned_Engines := [ ] ;
16177: LD_ADDR_LOC 59
16181: PUSH
16182: EMPTY
16183: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
16184: LD_ADDR_LOC 54
16188: PUSH
16189: LD_INT 37
16191: PUSH
16192: EMPTY
16193: LIST
16194: PUSH
16195: LD_INT 4
16197: PUSH
16198: LD_INT 5
16200: PUSH
16201: EMPTY
16202: LIST
16203: LIST
16204: PUSH
16205: LD_INT 31
16207: PUSH
16208: LD_INT 32
16210: PUSH
16211: LD_INT 33
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: LIST
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: LIST
16223: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
16224: LD_ADDR_LOC 55
16228: PUSH
16229: LD_INT 2
16231: PUSH
16232: LD_INT 2
16234: PUSH
16235: LD_INT 4
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: LIST
16242: ST_TO_ADDR
// end ; 2 :
16243: GO 17979
16245: LD_INT 2
16247: DOUBLE
16248: EQUAL
16249: IFTRUE 16253
16251: GO 16462
16253: POP
// begin def_base_level := 1 ;
16254: LD_ADDR_EXP 58
16258: PUSH
16259: LD_INT 1
16261: ST_TO_ADDR
// def_amount_of_people := 2 ;
16262: LD_ADDR_EXP 59
16266: PUSH
16267: LD_INT 2
16269: ST_TO_ADDR
// def_skill_level := 3 ;
16270: LD_ADDR_EXP 60
16274: PUSH
16275: LD_INT 3
16277: ST_TO_ADDR
// def_starting_resources := 3 ;
16278: LD_ADDR_EXP 61
16282: PUSH
16283: LD_INT 3
16285: ST_TO_ADDR
// def_shipments_density := 2 ;
16286: LD_ADDR_EXP 62
16290: PUSH
16291: LD_INT 2
16293: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
16294: LD_ADDR_EXP 63
16298: PUSH
16299: LD_INT 1
16301: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
16302: LD_ADDR_EXP 64
16306: PUSH
16307: LD_INT 2
16309: ST_TO_ADDR
// def_shared_vision := 1 ;
16310: LD_ADDR_EXP 65
16314: PUSH
16315: LD_INT 1
16317: ST_TO_ADDR
// def_morale_flags := 0 ;
16318: LD_ADDR_EXP 66
16322: PUSH
16323: LD_INT 0
16325: ST_TO_ADDR
// def_siberite_detection := 1 ;
16326: LD_ADDR_EXP 67
16330: PUSH
16331: LD_INT 1
16333: ST_TO_ADDR
// def_people_respawning := 0 ;
16334: LD_ADDR_EXP 68
16338: PUSH
16339: LD_INT 0
16341: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
16342: LD_ADDR_EXP 69
16346: PUSH
16347: LD_INT 0
16349: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16350: LD_ADDR_EXP 70
16354: PUSH
16355: LD_INT 0
16357: ST_TO_ADDR
// def_builduptime := 2 ;
16358: LD_ADDR_EXP 71
16362: PUSH
16363: LD_INT 2
16365: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
16366: LD_ADDR_VAR 0 2
16370: PUSH
16371: LD_INT 1
16373: PUSH
16374: EMPTY
16375: LIST
16376: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
16377: LD_ADDR_VAR 0 3
16381: PUSH
16382: EMPTY
16383: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16384: LD_ADDR_LOC 56
16388: PUSH
16389: EMPTY
16390: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16391: LD_ADDR_LOC 57
16395: PUSH
16396: EMPTY
16397: ST_TO_ADDR
// Banned_Controls := [ ] ;
16398: LD_ADDR_LOC 58
16402: PUSH
16403: EMPTY
16404: ST_TO_ADDR
// Banned_Engines := [ ] ;
16405: LD_ADDR_LOC 59
16409: PUSH
16410: EMPTY
16411: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
16412: LD_ADDR_LOC 54
16416: PUSH
16417: LD_INT 4
16419: PUSH
16420: LD_INT 5
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: PUSH
16427: LD_INT 31
16429: PUSH
16430: LD_INT 32
16432: PUSH
16433: LD_INT 33
16435: PUSH
16436: EMPTY
16437: LIST
16438: LIST
16439: LIST
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
16445: LD_ADDR_LOC 55
16449: PUSH
16450: LD_INT 1
16452: PUSH
16453: LD_INT 2
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: ST_TO_ADDR
// end ; 3 :
16460: GO 17979
16462: LD_INT 3
16464: DOUBLE
16465: EQUAL
16466: IFTRUE 16470
16468: GO 16713
16470: POP
// begin def_base_level := 1 ;
16471: LD_ADDR_EXP 58
16475: PUSH
16476: LD_INT 1
16478: ST_TO_ADDR
// def_amount_of_people := 2 ;
16479: LD_ADDR_EXP 59
16483: PUSH
16484: LD_INT 2
16486: ST_TO_ADDR
// def_skill_level := 3 ;
16487: LD_ADDR_EXP 60
16491: PUSH
16492: LD_INT 3
16494: ST_TO_ADDR
// def_starting_resources := 3 ;
16495: LD_ADDR_EXP 61
16499: PUSH
16500: LD_INT 3
16502: ST_TO_ADDR
// def_shipments_density := 1 ;
16503: LD_ADDR_EXP 62
16507: PUSH
16508: LD_INT 1
16510: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
16511: LD_ADDR_EXP 63
16515: PUSH
16516: LD_INT 0
16518: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
16519: LD_ADDR_EXP 64
16523: PUSH
16524: LD_INT 1
16526: ST_TO_ADDR
// def_shared_vision := 1 ;
16527: LD_ADDR_EXP 65
16531: PUSH
16532: LD_INT 1
16534: ST_TO_ADDR
// def_morale_flags := 0 ;
16535: LD_ADDR_EXP 66
16539: PUSH
16540: LD_INT 0
16542: ST_TO_ADDR
// def_siberite_detection := 1 ;
16543: LD_ADDR_EXP 67
16547: PUSH
16548: LD_INT 1
16550: ST_TO_ADDR
// def_people_respawning := 0 ;
16551: LD_ADDR_EXP 68
16555: PUSH
16556: LD_INT 0
16558: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
16559: LD_ADDR_EXP 69
16563: PUSH
16564: LD_INT 2
16566: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16567: LD_ADDR_EXP 70
16571: PUSH
16572: LD_INT 0
16574: ST_TO_ADDR
// def_builduptime := 1 ;
16575: LD_ADDR_EXP 71
16579: PUSH
16580: LD_INT 1
16582: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
16583: LD_ADDR_VAR 0 2
16587: PUSH
16588: LD_INT 23
16590: PUSH
16591: EMPTY
16592: LIST
16593: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
16594: LD_ADDR_VAR 0 3
16598: PUSH
16599: LD_INT 2
16601: PUSH
16602: LD_INT 37
16604: PUSH
16605: LD_INT 32
16607: PUSH
16608: LD_INT 33
16610: PUSH
16611: LD_INT 36
16613: PUSH
16614: LD_INT 16
16616: PUSH
16617: LD_INT 23
16619: PUSH
16620: LD_INT 21
16622: PUSH
16623: LD_INT 18
16625: PUSH
16626: LD_INT 22
16628: PUSH
16629: LD_INT 20
16631: PUSH
16632: LD_INT 19
16634: PUSH
16635: LD_INT 25
16637: PUSH
16638: LD_INT 17
16640: PUSH
16641: LD_INT 24
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16661: LD_ADDR_LOC 56
16665: PUSH
16666: EMPTY
16667: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16668: LD_ADDR_LOC 57
16672: PUSH
16673: EMPTY
16674: ST_TO_ADDR
// Banned_Controls := [ ] ;
16675: LD_ADDR_LOC 58
16679: PUSH
16680: EMPTY
16681: ST_TO_ADDR
// Banned_Engines := [ ] ;
16682: LD_ADDR_LOC 59
16686: PUSH
16687: EMPTY
16688: ST_TO_ADDR
// Restricted_Builds := [ ] ;
16689: LD_ADDR_LOC 54
16693: PUSH
16694: EMPTY
16695: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
16696: LD_ADDR_LOC 55
16700: PUSH
16701: EMPTY
16702: ST_TO_ADDR
// No_Mechs := true ;
16703: LD_ADDR_EXP 72
16707: PUSH
16708: LD_INT 1
16710: ST_TO_ADDR
// end ; 4 :
16711: GO 17979
16713: LD_INT 4
16715: DOUBLE
16716: EQUAL
16717: IFTRUE 16721
16719: GO 16896
16721: POP
// begin def_base_level := 1 ;
16722: LD_ADDR_EXP 58
16726: PUSH
16727: LD_INT 1
16729: ST_TO_ADDR
// def_amount_of_people := 2 ;
16730: LD_ADDR_EXP 59
16734: PUSH
16735: LD_INT 2
16737: ST_TO_ADDR
// def_skill_level := 3 ;
16738: LD_ADDR_EXP 60
16742: PUSH
16743: LD_INT 3
16745: ST_TO_ADDR
// def_starting_resources := 3 ;
16746: LD_ADDR_EXP 61
16750: PUSH
16751: LD_INT 3
16753: ST_TO_ADDR
// def_shipments_density := 2 ;
16754: LD_ADDR_EXP 62
16758: PUSH
16759: LD_INT 2
16761: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
16762: LD_ADDR_EXP 63
16766: PUSH
16767: LD_INT 1
16769: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
16770: LD_ADDR_EXP 64
16774: PUSH
16775: LD_INT 2
16777: ST_TO_ADDR
// def_shared_vision := 1 ;
16778: LD_ADDR_EXP 65
16782: PUSH
16783: LD_INT 1
16785: ST_TO_ADDR
// def_morale_flags := 0 ;
16786: LD_ADDR_EXP 66
16790: PUSH
16791: LD_INT 0
16793: ST_TO_ADDR
// def_siberite_detection := 1 ;
16794: LD_ADDR_EXP 67
16798: PUSH
16799: LD_INT 1
16801: ST_TO_ADDR
// def_people_respawning := 0 ;
16802: LD_ADDR_EXP 68
16806: PUSH
16807: LD_INT 0
16809: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
16810: LD_ADDR_EXP 69
16814: PUSH
16815: LD_INT 0
16817: ST_TO_ADDR
// def_siberite_bomb := 1 ;
16818: LD_ADDR_EXP 70
16822: PUSH
16823: LD_INT 1
16825: ST_TO_ADDR
// def_builduptime := 3 ;
16826: LD_ADDR_EXP 71
16830: PUSH
16831: LD_INT 3
16833: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
16834: LD_ADDR_VAR 0 2
16838: PUSH
16839: LD_INT 1
16841: PUSH
16842: EMPTY
16843: LIST
16844: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
16845: LD_ADDR_VAR 0 3
16849: PUSH
16850: EMPTY
16851: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16852: LD_ADDR_LOC 56
16856: PUSH
16857: EMPTY
16858: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16859: LD_ADDR_LOC 57
16863: PUSH
16864: EMPTY
16865: ST_TO_ADDR
// Banned_Controls := [ ] ;
16866: LD_ADDR_LOC 58
16870: PUSH
16871: EMPTY
16872: ST_TO_ADDR
// Banned_Engines := [ ] ;
16873: LD_ADDR_LOC 59
16877: PUSH
16878: EMPTY
16879: ST_TO_ADDR
// Restricted_Builds := [ ] ;
16880: LD_ADDR_LOC 54
16884: PUSH
16885: EMPTY
16886: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
16887: LD_ADDR_LOC 55
16891: PUSH
16892: EMPTY
16893: ST_TO_ADDR
// end ; 5 :
16894: GO 17979
16896: LD_INT 5
16898: DOUBLE
16899: EQUAL
16900: IFTRUE 16904
16902: GO 17153
16904: POP
// begin def_base_level := 0 ;
16905: LD_ADDR_EXP 58
16909: PUSH
16910: LD_INT 0
16912: ST_TO_ADDR
// def_amount_of_people := 0 ;
16913: LD_ADDR_EXP 59
16917: PUSH
16918: LD_INT 0
16920: ST_TO_ADDR
// def_skill_level := 0 ;
16921: LD_ADDR_EXP 60
16925: PUSH
16926: LD_INT 0
16928: ST_TO_ADDR
// def_starting_resources := 0 ;
16929: LD_ADDR_EXP 61
16933: PUSH
16934: LD_INT 0
16936: ST_TO_ADDR
// def_shipments_density := 0 ;
16937: LD_ADDR_EXP 62
16941: PUSH
16942: LD_INT 0
16944: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
16945: LD_ADDR_EXP 63
16949: PUSH
16950: LD_INT 0
16952: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
16953: LD_ADDR_EXP 64
16957: PUSH
16958: LD_INT 0
16960: ST_TO_ADDR
// def_shared_vision := 1 ;
16961: LD_ADDR_EXP 65
16965: PUSH
16966: LD_INT 1
16968: ST_TO_ADDR
// def_morale_flags := 0 ;
16969: LD_ADDR_EXP 66
16973: PUSH
16974: LD_INT 0
16976: ST_TO_ADDR
// def_siberite_detection := 0 ;
16977: LD_ADDR_EXP 67
16981: PUSH
16982: LD_INT 0
16984: ST_TO_ADDR
// def_people_respawning := 1 ;
16985: LD_ADDR_EXP 68
16989: PUSH
16990: LD_INT 1
16992: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
16993: LD_ADDR_EXP 69
16997: PUSH
16998: LD_INT 1
17000: ST_TO_ADDR
// def_siberite_bomb := 0 ;
17001: LD_ADDR_EXP 70
17005: PUSH
17006: LD_INT 0
17008: ST_TO_ADDR
// def_builduptime := 0 ;
17009: LD_ADDR_EXP 71
17013: PUSH
17014: LD_INT 0
17016: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
17017: LD_ADDR_VAR 0 2
17021: PUSH
17022: LD_INT 10
17024: PUSH
17025: LD_INT 3
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
17032: LD_ADDR_VAR 0 3
17036: PUSH
17037: LD_INT 12
17039: PUSH
17040: LD_INT 11
17042: PUSH
17043: LD_INT 14
17045: PUSH
17046: LD_INT 13
17048: PUSH
17049: LD_INT 5
17051: PUSH
17052: LD_INT 24
17054: PUSH
17055: LD_INT 21
17057: PUSH
17058: LD_INT 33
17060: PUSH
17061: LD_INT 36
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
17075: LD_ADDR_LOC 56
17079: PUSH
17080: LD_INT 31
17082: PUSH
17083: EMPTY
17084: LIST
17085: ST_TO_ADDR
// Banned_Chassis := [ ] ;
17086: LD_ADDR_LOC 57
17090: PUSH
17091: EMPTY
17092: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
17093: LD_ADDR_LOC 58
17097: PUSH
17098: LD_INT 2
17100: PUSH
17101: EMPTY
17102: LIST
17103: ST_TO_ADDR
// Banned_Engines := [ ] ;
17104: LD_ADDR_LOC 59
17108: PUSH
17109: EMPTY
17110: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
17111: LD_ADDR_LOC 54
17115: PUSH
17116: LD_INT 4
17118: PUSH
17119: EMPTY
17120: LIST
17121: PUSH
17122: LD_INT 31
17124: PUSH
17125: LD_INT 32
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: PUSH
17132: EMPTY
17133: LIST
17134: LIST
17135: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
17136: LD_ADDR_LOC 55
17140: PUSH
17141: LD_INT 1
17143: PUSH
17144: LD_INT 1
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: ST_TO_ADDR
// end ; 6 :
17151: GO 17979
17153: LD_INT 6
17155: DOUBLE
17156: EQUAL
17157: IFTRUE 17161
17159: GO 17364
17161: POP
// begin def_base_level := 1 ;
17162: LD_ADDR_EXP 58
17166: PUSH
17167: LD_INT 1
17169: ST_TO_ADDR
// def_amount_of_people := 2 ;
17170: LD_ADDR_EXP 59
17174: PUSH
17175: LD_INT 2
17177: ST_TO_ADDR
// def_skill_level := 3 ;
17178: LD_ADDR_EXP 60
17182: PUSH
17183: LD_INT 3
17185: ST_TO_ADDR
// def_starting_resources := 3 ;
17186: LD_ADDR_EXP 61
17190: PUSH
17191: LD_INT 3
17193: ST_TO_ADDR
// def_shipments_density := 1 ;
17194: LD_ADDR_EXP 62
17198: PUSH
17199: LD_INT 1
17201: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
17202: LD_ADDR_EXP 63
17206: PUSH
17207: LD_INT 0
17209: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
17210: LD_ADDR_EXP 64
17214: PUSH
17215: LD_INT 1
17217: ST_TO_ADDR
// def_shared_vision := 1 ;
17218: LD_ADDR_EXP 65
17222: PUSH
17223: LD_INT 1
17225: ST_TO_ADDR
// def_morale_flags := 0 ;
17226: LD_ADDR_EXP 66
17230: PUSH
17231: LD_INT 0
17233: ST_TO_ADDR
// def_siberite_detection := 1 ;
17234: LD_ADDR_EXP 67
17238: PUSH
17239: LD_INT 1
17241: ST_TO_ADDR
// def_people_respawning := 2 ;
17242: LD_ADDR_EXP 68
17246: PUSH
17247: LD_INT 2
17249: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
17250: LD_ADDR_EXP 69
17254: PUSH
17255: LD_INT 1
17257: ST_TO_ADDR
// def_siberite_bomb := 0 ;
17258: LD_ADDR_EXP 70
17262: PUSH
17263: LD_INT 0
17265: ST_TO_ADDR
// def_builduptime := 1 ;
17266: LD_ADDR_EXP 71
17270: PUSH
17271: LD_INT 1
17273: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
17274: LD_ADDR_VAR 0 2
17278: PUSH
17279: LD_INT 23
17281: PUSH
17282: EMPTY
17283: LIST
17284: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
17285: LD_ADDR_VAR 0 3
17289: PUSH
17290: LD_INT 2
17292: PUSH
17293: LD_INT 37
17295: PUSH
17296: LD_INT 31
17298: PUSH
17299: LD_INT 32
17301: PUSH
17302: LD_INT 33
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: ST_TO_ADDR
// Banned_Weapons := [ ] ;
17312: LD_ADDR_LOC 56
17316: PUSH
17317: EMPTY
17318: ST_TO_ADDR
// Banned_Chassis := [ ] ;
17319: LD_ADDR_LOC 57
17323: PUSH
17324: EMPTY
17325: ST_TO_ADDR
// Banned_Controls := [ ] ;
17326: LD_ADDR_LOC 58
17330: PUSH
17331: EMPTY
17332: ST_TO_ADDR
// Banned_Engines := [ ] ;
17333: LD_ADDR_LOC 59
17337: PUSH
17338: EMPTY
17339: ST_TO_ADDR
// Restricted_Builds := [ ] ;
17340: LD_ADDR_LOC 54
17344: PUSH
17345: EMPTY
17346: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
17347: LD_ADDR_LOC 55
17351: PUSH
17352: EMPTY
17353: ST_TO_ADDR
// No_Mechs := true ;
17354: LD_ADDR_EXP 72
17358: PUSH
17359: LD_INT 1
17361: ST_TO_ADDR
// end ; 7 :
17362: GO 17979
17364: LD_INT 7
17366: DOUBLE
17367: EQUAL
17368: IFTRUE 17372
17370: GO 17570
17372: POP
// begin def_base_level := 1 ;
17373: LD_ADDR_EXP 58
17377: PUSH
17378: LD_INT 1
17380: ST_TO_ADDR
// def_amount_of_people := 2 ;
17381: LD_ADDR_EXP 59
17385: PUSH
17386: LD_INT 2
17388: ST_TO_ADDR
// def_skill_level := 3 ;
17389: LD_ADDR_EXP 60
17393: PUSH
17394: LD_INT 3
17396: ST_TO_ADDR
// def_starting_resources := 3 ;
17397: LD_ADDR_EXP 61
17401: PUSH
17402: LD_INT 3
17404: ST_TO_ADDR
// def_shipments_density := 1 ;
17405: LD_ADDR_EXP 62
17409: PUSH
17410: LD_INT 1
17412: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
17413: LD_ADDR_EXP 63
17417: PUSH
17418: LD_INT 1
17420: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
17421: LD_ADDR_EXP 64
17425: PUSH
17426: LD_INT 2
17428: ST_TO_ADDR
// def_shared_vision := 1 ;
17429: LD_ADDR_EXP 65
17433: PUSH
17434: LD_INT 1
17436: ST_TO_ADDR
// def_morale_flags := 0 ;
17437: LD_ADDR_EXP 66
17441: PUSH
17442: LD_INT 0
17444: ST_TO_ADDR
// def_siberite_detection := 1 ;
17445: LD_ADDR_EXP 67
17449: PUSH
17450: LD_INT 1
17452: ST_TO_ADDR
// def_people_respawning := 0 ;
17453: LD_ADDR_EXP 68
17457: PUSH
17458: LD_INT 0
17460: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
17461: LD_ADDR_EXP 69
17465: PUSH
17466: LD_INT 1
17468: ST_TO_ADDR
// def_siberite_bomb := 0 ;
17469: LD_ADDR_EXP 70
17473: PUSH
17474: LD_INT 0
17476: ST_TO_ADDR
// def_builduptime := 3 ;
17477: LD_ADDR_EXP 71
17481: PUSH
17482: LD_INT 3
17484: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
17485: LD_ADDR_VAR 0 2
17489: PUSH
17490: LD_INT 23
17492: PUSH
17493: EMPTY
17494: LIST
17495: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
17496: LD_ADDR_VAR 0 3
17500: PUSH
17501: LD_INT 37
17503: PUSH
17504: EMPTY
17505: LIST
17506: ST_TO_ADDR
// Banned_Weapons := [ ] ;
17507: LD_ADDR_LOC 56
17511: PUSH
17512: EMPTY
17513: ST_TO_ADDR
// Banned_Chassis := [ ] ;
17514: LD_ADDR_LOC 57
17518: PUSH
17519: EMPTY
17520: ST_TO_ADDR
// Banned_Controls := [ ] ;
17521: LD_ADDR_LOC 58
17525: PUSH
17526: EMPTY
17527: ST_TO_ADDR
// Banned_Engines := [ ] ;
17528: LD_ADDR_LOC 59
17532: PUSH
17533: EMPTY
17534: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
17535: LD_ADDR_LOC 54
17539: PUSH
17540: LD_INT 31
17542: PUSH
17543: LD_INT 32
17545: PUSH
17546: LD_INT 33
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: LIST
17553: PUSH
17554: EMPTY
17555: LIST
17556: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
17557: LD_ADDR_LOC 55
17561: PUSH
17562: LD_INT 10
17564: PUSH
17565: EMPTY
17566: LIST
17567: ST_TO_ADDR
// end ; 8 :
17568: GO 17979
17570: LD_INT 8
17572: DOUBLE
17573: EQUAL
17574: IFTRUE 17578
17576: GO 17978
17578: POP
// begin def_base_level := 0 ;
17579: LD_ADDR_EXP 58
17583: PUSH
17584: LD_INT 0
17586: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
17587: LD_ADDR_EXP 59
17591: PUSH
17592: LD_INT 0
17594: PPUSH
17595: LD_INT 1
17597: PPUSH
17598: CALL_OW 12
17602: ST_TO_ADDR
// def_skill_level := 0 ;
17603: LD_ADDR_EXP 60
17607: PUSH
17608: LD_INT 0
17610: ST_TO_ADDR
// def_starting_resources := 2 ;
17611: LD_ADDR_EXP 61
17615: PUSH
17616: LD_INT 2
17618: ST_TO_ADDR
// def_shipments_density := 1 ;
17619: LD_ADDR_EXP 62
17623: PUSH
17624: LD_INT 1
17626: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
17627: LD_ADDR_EXP 63
17631: PUSH
17632: LD_INT 0
17634: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
17635: LD_ADDR_EXP 64
17639: PUSH
17640: LD_INT 0
17642: ST_TO_ADDR
// def_shared_vision := 1 ;
17643: LD_ADDR_EXP 65
17647: PUSH
17648: LD_INT 1
17650: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
17651: LD_ADDR_EXP 66
17655: PUSH
17656: LD_INT 0
17658: PPUSH
17659: LD_INT 2
17661: PPUSH
17662: CALL_OW 12
17666: ST_TO_ADDR
// def_siberite_detection := 0 ;
17667: LD_ADDR_EXP 67
17671: PUSH
17672: LD_INT 0
17674: ST_TO_ADDR
// def_people_respawning := 0 ;
17675: LD_ADDR_EXP 68
17679: PUSH
17680: LD_INT 0
17682: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
17683: LD_ADDR_EXP 69
17687: PUSH
17688: LD_INT 2
17690: ST_TO_ADDR
// def_siberite_bomb := 0 ;
17691: LD_ADDR_EXP 70
17695: PUSH
17696: LD_INT 0
17698: ST_TO_ADDR
// def_builduptime := 0 ;
17699: LD_ADDR_EXP 71
17703: PUSH
17704: LD_INT 0
17706: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
17707: LD_ADDR_VAR 0 2
17711: PUSH
17712: LD_INT 23
17714: PUSH
17715: LD_INT 20
17717: PUSH
17718: LD_INT 40
17720: PUSH
17721: LD_INT 47
17723: PUSH
17724: LD_INT 46
17726: PUSH
17727: LD_INT 39
17729: PUSH
17730: LD_INT 71
17732: PUSH
17733: LD_INT 34
17735: PUSH
17736: LD_INT 41
17738: PUSH
17739: LD_INT 44
17741: PUSH
17742: LD_INT 17
17744: PUSH
17745: LD_INT 16
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
17762: LD_ADDR_VAR 0 3
17766: PUSH
17767: LD_INT 37
17769: PUSH
17770: LD_INT 5
17772: PUSH
17773: LD_INT 13
17775: PUSH
17776: LD_INT 34
17778: PUSH
17779: LD_INT 12
17781: PUSH
17782: LD_INT 15
17784: PUSH
17785: LD_INT 11
17787: PUSH
17788: LD_INT 14
17790: PUSH
17791: LD_INT 29
17793: PUSH
17794: LD_INT 30
17796: PUSH
17797: LD_INT 28
17799: PUSH
17800: LD_INT 24
17802: PUSH
17803: LD_INT 25
17805: PUSH
17806: LD_INT 20
17808: PUSH
17809: LD_INT 21
17811: PUSH
17812: LD_INT 22
17814: PUSH
17815: LD_INT 36
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: ST_TO_ADDR
// Banned_Weapons := [ ] ;
17837: LD_ADDR_LOC 56
17841: PUSH
17842: EMPTY
17843: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
17844: LD_ADDR_LOC 57
17848: PUSH
17849: LD_INT 14
17851: PUSH
17852: EMPTY
17853: LIST
17854: ST_TO_ADDR
// Banned_Controls := [ ] ;
17855: LD_ADDR_LOC 58
17859: PUSH
17860: EMPTY
17861: ST_TO_ADDR
// Banned_Engines := [ ] ;
17862: LD_ADDR_LOC 59
17866: PUSH
17867: EMPTY
17868: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
17869: LD_ADDR_LOC 54
17873: PUSH
17874: LD_INT 31
17876: PUSH
17877: LD_INT 32
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 4
17886: PUSH
17887: EMPTY
17888: LIST
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
17894: LD_ADDR_LOC 55
17898: PUSH
17899: LD_INT 2
17901: PUSH
17902: LD_INT 1
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: ST_TO_ADDR
// for i := 1 to 8 do
17909: LD_ADDR_VAR 0 4
17913: PUSH
17914: DOUBLE
17915: LD_INT 1
17917: DEC
17918: ST_TO_ADDR
17919: LD_INT 8
17921: PUSH
17922: FOR_TO
17923: IFFALSE 17974
// if ( Side_Nations [ i ] = 3 ) then
17925: LD_EXP 19
17929: PUSH
17930: LD_VAR 0 4
17934: ARRAY
17935: PUSH
17936: LD_INT 3
17938: EQUAL
17939: IFFALSE 17972
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
17941: LD_ADDR_EXP 19
17945: PUSH
17946: LD_EXP 19
17950: PPUSH
17951: LD_VAR 0 4
17955: PPUSH
17956: LD_INT 1
17958: PPUSH
17959: LD_INT 2
17961: PPUSH
17962: CALL_OW 12
17966: PPUSH
17967: CALL_OW 1
17971: ST_TO_ADDR
17972: GO 17922
17974: POP
17975: POP
// end ; end ;
17976: GO 17979
17978: POP
// for i := 1 to 8 do
17979: LD_ADDR_VAR 0 4
17983: PUSH
17984: DOUBLE
17985: LD_INT 1
17987: DEC
17988: ST_TO_ADDR
17989: LD_INT 8
17991: PUSH
17992: FOR_TO
17993: IFFALSE 18077
// if Side_Positions [ i ] then
17995: LD_EXP 18
17999: PUSH
18000: LD_VAR 0 4
18004: ARRAY
18005: IFFALSE 18075
// begin for j in Unavailable_Techs do
18007: LD_ADDR_VAR 0 5
18011: PUSH
18012: LD_VAR 0 2
18016: PUSH
18017: FOR_IN
18018: IFFALSE 18039
// SetTech ( j , i , 0 ) ;
18020: LD_VAR 0 5
18024: PPUSH
18025: LD_VAR 0 4
18029: PPUSH
18030: LD_INT 0
18032: PPUSH
18033: CALL_OW 322
18037: GO 18017
18039: POP
18040: POP
// for j in Unavailable_Builds do
18041: LD_ADDR_VAR 0 5
18045: PUSH
18046: LD_VAR 0 3
18050: PUSH
18051: FOR_IN
18052: IFFALSE 18073
// SetRestrict ( j , i , 0 ) ;
18054: LD_VAR 0 5
18058: PPUSH
18059: LD_VAR 0 4
18063: PPUSH
18064: LD_INT 0
18066: PPUSH
18067: CALL_OW 324
18071: GO 18051
18073: POP
18074: POP
// end ;
18075: GO 17992
18077: POP
18078: POP
// end ;
18079: LD_VAR 0 1
18083: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
18084: LD_INT 0
18086: PPUSH
18087: PPUSH
18088: PPUSH
18089: PPUSH
18090: PPUSH
18091: PPUSH
18092: PPUSH
// for i := 1 to Restricted_Builds do
18093: LD_ADDR_VAR 0 2
18097: PUSH
18098: DOUBLE
18099: LD_INT 1
18101: DEC
18102: ST_TO_ADDR
18103: LD_LOC 54
18107: PUSH
18108: FOR_TO
18109: IFFALSE 18419
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
18111: LD_LOC 54
18115: PUSH
18116: LD_VAR 0 2
18120: ARRAY
18121: PUSH
18122: LD_INT 1
18124: ARRAY
18125: PUSH
18126: LD_INT 31
18128: DOUBLE
18129: EQUAL
18130: IFTRUE 18146
18132: LD_INT 32
18134: DOUBLE
18135: EQUAL
18136: IFTRUE 18146
18138: LD_INT 33
18140: DOUBLE
18141: EQUAL
18142: IFTRUE 18146
18144: GO 18157
18146: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
18147: LD_ADDR_VAR 0 6
18151: PUSH
18152: LD_STRING #Turrets
18154: ST_TO_ADDR
18155: GO 18202
18157: LD_INT 4
18159: DOUBLE
18160: EQUAL
18161: IFTRUE 18171
18163: LD_INT 5
18165: DOUBLE
18166: EQUAL
18167: IFTRUE 18171
18169: GO 18182
18171: POP
// btype := #Armouries ; b_Behemoth :
18172: LD_ADDR_VAR 0 6
18176: PUSH
18177: LD_STRING #Armouries
18179: ST_TO_ADDR
18180: GO 18202
18182: LD_INT 37
18184: DOUBLE
18185: EQUAL
18186: IFTRUE 18190
18188: GO 18201
18190: POP
// btype := #Behemoths ; end ;
18191: LD_ADDR_VAR 0 6
18195: PUSH
18196: LD_STRING #Behemoths
18198: ST_TO_ADDR
18199: GO 18202
18201: POP
// list := [ ] ;
18202: LD_ADDR_VAR 0 7
18206: PUSH
18207: EMPTY
18208: ST_TO_ADDR
// for j := 1 to 8 do
18209: LD_ADDR_VAR 0 3
18213: PUSH
18214: DOUBLE
18215: LD_INT 1
18217: DEC
18218: ST_TO_ADDR
18219: LD_INT 8
18221: PUSH
18222: FOR_TO
18223: IFFALSE 18316
// if Side_Positions [ j ] then
18225: LD_EXP 18
18229: PUSH
18230: LD_VAR 0 3
18234: ARRAY
18235: IFFALSE 18314
// begin amount := 0 ;
18237: LD_ADDR_VAR 0 5
18241: PUSH
18242: LD_INT 0
18244: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
18245: LD_ADDR_VAR 0 4
18249: PUSH
18250: LD_LOC 54
18254: PUSH
18255: LD_VAR 0 2
18259: ARRAY
18260: PUSH
18261: FOR_IN
18262: IFFALSE 18310
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
18264: LD_ADDR_VAR 0 5
18268: PUSH
18269: LD_VAR 0 5
18273: PUSH
18274: LD_INT 22
18276: PUSH
18277: LD_VAR 0 3
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: PUSH
18286: LD_INT 30
18288: PUSH
18289: LD_VAR 0 4
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: PPUSH
18302: CALL_OW 69
18306: PLUS
18307: ST_TO_ADDR
18308: GO 18261
18310: POP
18311: POP
// break ;
18312: GO 18316
// end ;
18314: GO 18222
18316: POP
18317: POP
// list := [ ] ;
18318: LD_ADDR_VAR 0 7
18322: PUSH
18323: EMPTY
18324: ST_TO_ADDR
// for j := 1 to 8 do
18325: LD_ADDR_VAR 0 3
18329: PUSH
18330: DOUBLE
18331: LD_INT 1
18333: DEC
18334: ST_TO_ADDR
18335: LD_INT 8
18337: PUSH
18338: FOR_TO
18339: IFFALSE 18359
// list := list ^ amount ;
18341: LD_ADDR_VAR 0 7
18345: PUSH
18346: LD_VAR 0 7
18350: PUSH
18351: LD_VAR 0 5
18355: ADD
18356: ST_TO_ADDR
18357: GO 18338
18359: POP
18360: POP
// Already_Built := Already_Built ^ [ list ] ;
18361: LD_ADDR_LOC 60
18365: PUSH
18366: LD_LOC 60
18370: PUSH
18371: LD_VAR 0 7
18375: PUSH
18376: EMPTY
18377: LIST
18378: ADD
18379: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
18380: LD_ADDR_LOC 61
18384: PUSH
18385: LD_LOC 61
18389: PUSH
18390: LD_VAR 0 6
18394: PUSH
18395: LD_VAR 0 5
18399: PUSH
18400: LD_LOC 55
18404: PUSH
18405: LD_VAR 0 2
18409: ARRAY
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: LIST
18415: ADD
18416: ST_TO_ADDR
// end ;
18417: GO 18108
18419: POP
18420: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
18421: LD_ADDR_LOC 62
18425: PUSH
18426: LD_INT 0
18428: PUSH
18429: LD_INT 0
18431: PUSH
18432: LD_INT 0
18434: PUSH
18435: LD_INT 0
18437: PUSH
18438: LD_INT 0
18440: PUSH
18441: LD_INT 0
18443: PUSH
18444: LD_INT 0
18446: PUSH
18447: LD_INT 0
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: ST_TO_ADDR
// if Limits_Info then
18460: LD_LOC 61
18464: IFFALSE 18480
// Limits_Info := #Limits ^ Limits_Info ;
18466: LD_ADDR_LOC 61
18470: PUSH
18471: LD_STRING #Limits
18473: PUSH
18474: LD_LOC 61
18478: ADD
18479: ST_TO_ADDR
// end ;
18480: LD_VAR 0 1
18484: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
18485: LD_INT 0
18487: PPUSH
18488: PPUSH
18489: PPUSH
18490: PPUSH
// for i := 1 to Restricted_Builds do
18491: LD_ADDR_VAR 0 7
18495: PUSH
18496: DOUBLE
18497: LD_INT 1
18499: DEC
18500: ST_TO_ADDR
18501: LD_LOC 54
18505: PUSH
18506: FOR_TO
18507: IFFALSE 18930
// if BType in Restricted_Builds [ i ] then
18509: LD_VAR 0 2
18513: PUSH
18514: LD_LOC 54
18518: PUSH
18519: LD_VAR 0 7
18523: ARRAY
18524: IN
18525: IFFALSE 18928
// begin if old_side then
18527: LD_VAR 0 4
18531: IFFALSE 18657
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
18533: LD_LOC 60
18537: PUSH
18538: LD_VAR 0 7
18542: ARRAY
18543: PUSH
18544: LD_VAR 0 3
18548: ARRAY
18549: PUSH
18550: LD_VAR 0 5
18554: PLUS
18555: PUSH
18556: LD_LOC 55
18560: PUSH
18561: LD_VAR 0 7
18565: ARRAY
18566: GREATER
18567: IFFALSE 18593
// begin SetSide ( un , old_side ) ;
18569: LD_VAR 0 1
18573: PPUSH
18574: LD_VAR 0 4
18578: PPUSH
18579: CALL_OW 235
// count := 0 ;
18583: LD_ADDR_VAR 0 5
18587: PUSH
18588: LD_INT 0
18590: ST_TO_ADDR
// end else
18591: GO 18657
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
18593: LD_ADDR_LOC 60
18597: PUSH
18598: LD_LOC 60
18602: PPUSH
18603: LD_VAR 0 7
18607: PPUSH
18608: LD_LOC 60
18612: PUSH
18613: LD_VAR 0 7
18617: ARRAY
18618: PPUSH
18619: LD_VAR 0 4
18623: PPUSH
18624: LD_LOC 60
18628: PUSH
18629: LD_VAR 0 7
18633: ARRAY
18634: PUSH
18635: LD_VAR 0 4
18639: ARRAY
18640: PUSH
18641: LD_VAR 0 5
18645: MINUS
18646: PPUSH
18647: CALL_OW 1
18651: PPUSH
18652: CALL_OW 1
18656: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
18657: LD_ADDR_LOC 60
18661: PUSH
18662: LD_LOC 60
18666: PPUSH
18667: LD_VAR 0 7
18671: PPUSH
18672: LD_LOC 60
18676: PUSH
18677: LD_VAR 0 7
18681: ARRAY
18682: PPUSH
18683: LD_VAR 0 3
18687: PPUSH
18688: LD_LOC 60
18692: PUSH
18693: LD_VAR 0 7
18697: ARRAY
18698: PUSH
18699: LD_VAR 0 3
18703: ARRAY
18704: PUSH
18705: LD_VAR 0 5
18709: PLUS
18710: PPUSH
18711: CALL_OW 1
18715: PPUSH
18716: CALL_OW 1
18720: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
18721: LD_VAR 0 5
18725: PUSH
18726: LD_INT 0
18728: NONEQUAL
18729: PUSH
18730: LD_VAR 0 3
18734: PUSH
18735: LD_OWVAR 2
18739: EQUAL
18740: AND
18741: IFFALSE 18784
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
18743: LD_ADDR_LOC 61
18747: PUSH
18748: LD_LOC 61
18752: PPUSH
18753: LD_INT 3
18755: PUSH
18756: LD_VAR 0 7
18760: MUL
18761: PPUSH
18762: LD_LOC 60
18766: PUSH
18767: LD_VAR 0 7
18771: ARRAY
18772: PUSH
18773: LD_VAR 0 3
18777: ARRAY
18778: PPUSH
18779: CALL_OW 1
18783: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
18784: LD_LOC 60
18788: PUSH
18789: LD_VAR 0 7
18793: ARRAY
18794: PUSH
18795: LD_VAR 0 3
18799: ARRAY
18800: PUSH
18801: LD_LOC 55
18805: PUSH
18806: LD_VAR 0 7
18810: ARRAY
18811: GREATER
18812: IFFALSE 18839
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
18814: LD_ADDR_LOC 62
18818: PUSH
18819: LD_LOC 62
18823: PPUSH
18824: LD_VAR 0 3
18828: PPUSH
18829: LD_INT 1
18831: PPUSH
18832: CALL_OW 1
18836: ST_TO_ADDR
// end else
18837: GO 18926
// begin for j := 1 to Restricted_Builds do
18839: LD_ADDR_VAR 0 8
18843: PUSH
18844: DOUBLE
18845: LD_INT 1
18847: DEC
18848: ST_TO_ADDR
18849: LD_LOC 54
18853: PUSH
18854: FOR_TO
18855: IFFALSE 18899
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
18857: LD_LOC 60
18861: PUSH
18862: LD_VAR 0 8
18866: ARRAY
18867: PUSH
18868: LD_VAR 0 3
18872: ARRAY
18873: PUSH
18874: LD_LOC 55
18878: PUSH
18879: LD_VAR 0 8
18883: ARRAY
18884: GREATER
18885: IFFALSE 18897
// begin Is_Cheater := true ;
18887: LD_ADDR_VAR 0 9
18891: PUSH
18892: LD_INT 1
18894: ST_TO_ADDR
// break ;
18895: GO 18899
// end ;
18897: GO 18854
18899: POP
18900: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
18901: LD_ADDR_LOC 62
18905: PUSH
18906: LD_LOC 62
18910: PPUSH
18911: LD_VAR 0 3
18915: PPUSH
18916: LD_VAR 0 9
18920: PPUSH
18921: CALL_OW 1
18925: ST_TO_ADDR
// end ; break ;
18926: GO 18930
// end ;
18928: GO 18506
18930: POP
18931: POP
// end ;
18932: LD_VAR 0 6
18936: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
18937: LD_VAR 0 5
18941: PUSH
18942: LD_LOC 56
18946: IN
18947: PUSH
18948: LD_VAR 0 2
18952: PUSH
18953: LD_LOC 57
18957: IN
18958: OR
18959: PUSH
18960: LD_VAR 0 4
18964: PUSH
18965: LD_LOC 58
18969: IN
18970: OR
18971: PUSH
18972: LD_VAR 0 3
18976: PUSH
18977: LD_LOC 59
18981: IN
18982: OR
18983: IFFALSE 18994
// ComCancel ( factory ) ;
18985: LD_VAR 0 1
18989: PPUSH
18990: CALL_OW 127
// end ;
18994: PPOPN 5
18996: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
18997: LD_VAR 0 2
19001: PUSH
19002: LD_LOC 56
19006: IN
19007: IFFALSE 19018
// ComCancel ( building ) ;
19009: LD_VAR 0 1
19013: PPUSH
19014: CALL_OW 127
// end ; end_of_file
19018: PPOPN 2
19020: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
19021: LD_INT 0
19023: PPUSH
19024: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
19025: LD_ADDR_VAR 0 2
19029: PUSH
19030: LD_STRING #Multi1x1-Time
19032: PUSH
19033: LD_OWVAR 1
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
19042: LD_INT 0
19044: PUSH
19045: LD_EXP 15
19049: PUSH
19050: LD_OWVAR 1
19054: MINUS
19055: LESSEQUAL
19056: IFFALSE 19087
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
19058: LD_ADDR_VAR 0 2
19062: PUSH
19063: LD_VAR 0 2
19067: PUSH
19068: LD_STRING #allowedsibbomb
19070: PUSH
19071: LD_EXP 15
19075: PUSH
19076: LD_OWVAR 1
19080: MINUS
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: ADD
19086: ST_TO_ADDR
// if ( ExtraStrings ) then
19087: LD_EXP 73
19091: IFFALSE 19113
// AllStrings := AllStrings ^  ^ ExtraStrings ;
19093: LD_ADDR_VAR 0 2
19097: PUSH
19098: LD_VAR 0 2
19102: PUSH
19103: LD_STRING 
19105: ADD
19106: PUSH
19107: LD_EXP 73
19111: ADD
19112: ST_TO_ADDR
// if ( LimitsStrings ) then
19113: CALL 15861 0 0
19117: IFFALSE 19139
// AllStrings := AllStrings ^  ^ LimitsStrings ;
19119: LD_ADDR_VAR 0 2
19123: PUSH
19124: LD_VAR 0 2
19128: PUSH
19129: LD_STRING 
19131: ADD
19132: PUSH
19133: CALL 15861 0 0
19137: ADD
19138: ST_TO_ADDR
// Display_Strings := AllStrings ;
19139: LD_ADDR_OWVAR 47
19143: PUSH
19144: LD_VAR 0 2
19148: ST_TO_ADDR
// end ;
19149: LD_VAR 0 1
19153: RET
// every 0 0$1 do
19154: GO 19156
19156: DISABLE
// begin ShowTimer ;
19157: CALL 19021 0 0
// enable ;
19161: ENABLE
// end ; end_of_file
19162: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
19163: LD_INT 0
19165: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
19166: LD_VAR 0 1
19170: PPUSH
19171: CALL_OW 255
19175: PUSH
19176: LD_VAR 0 4
19180: EQUAL
19181: IFFALSE 19200
// begin SetAchievement ( ACH_RAD ) ;
19183: LD_STRING ACH_RAD
19185: PPUSH
19186: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
19190: LD_STRING ACH_NL
19192: PPUSH
19193: LD_INT 1
19195: PPUSH
19196: CALL_OW 564
// end end ;
19200: LD_VAR 0 5
19204: RET
// export function SA_Win ( side ) ; begin
19205: LD_INT 0
19207: PPUSH
// case side of 1 :
19208: LD_VAR 0 1
19212: PUSH
19213: LD_INT 1
19215: DOUBLE
19216: EQUAL
19217: IFTRUE 19221
19219: GO 19234
19221: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
19222: LD_STRING ACH_AH
19224: PPUSH
19225: LD_INT 1
19227: PPUSH
19228: CALL_OW 564
19232: GO 19397
19234: LD_INT 2
19236: DOUBLE
19237: EQUAL
19238: IFTRUE 19242
19240: GO 19255
19242: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
19243: LD_STRING ACH_E
19245: PPUSH
19246: LD_INT 1
19248: PPUSH
19249: CALL_OW 564
19253: GO 19397
19255: LD_INT 3
19257: DOUBLE
19258: EQUAL
19259: IFTRUE 19263
19261: GO 19276
19263: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
19264: LD_STRING ACH_OOL
19266: PPUSH
19267: LD_INT 1
19269: PPUSH
19270: CALL_OW 564
19274: GO 19397
19276: LD_INT 1
19278: PUSH
19279: LD_INT 2
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: DOUBLE
19286: EQUAL
19287: IFTRUE 19291
19289: GO 19316
19291: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
19292: LD_STRING ACH_AH
19294: PPUSH
19295: LD_REAL  5.00000000000000E-0001
19298: PPUSH
19299: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
19303: LD_STRING ACH_E
19305: PPUSH
19306: LD_REAL  5.00000000000000E-0001
19309: PPUSH
19310: CALL_OW 564
// end ; [ 2 , 3 ] :
19314: GO 19397
19316: LD_INT 2
19318: PUSH
19319: LD_INT 3
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: DOUBLE
19326: EQUAL
19327: IFTRUE 19331
19329: GO 19356
19331: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
19332: LD_STRING ACH_OOL
19334: PPUSH
19335: LD_REAL  5.00000000000000E-0001
19338: PPUSH
19339: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
19343: LD_STRING ACH_E
19345: PPUSH
19346: LD_REAL  5.00000000000000E-0001
19349: PPUSH
19350: CALL_OW 564
// end ; [ 3 , 1 ] :
19354: GO 19397
19356: LD_INT 3
19358: PUSH
19359: LD_INT 1
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: DOUBLE
19366: EQUAL
19367: IFTRUE 19371
19369: GO 19396
19371: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
19372: LD_STRING ACH_AH
19374: PPUSH
19375: LD_REAL  5.00000000000000E-0001
19378: PPUSH
19379: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
19383: LD_STRING ACH_OOL
19385: PPUSH
19386: LD_REAL  5.00000000000000E-0001
19389: PPUSH
19390: CALL_OW 564
// end ; end ;
19394: GO 19397
19396: POP
// end ; end_of_file
19397: LD_VAR 0 2
19401: RET
// export function SetMpTechs ( ) ; var side , i ; begin
19402: LD_INT 0
19404: PPUSH
19405: PPUSH
19406: PPUSH
// for side = 1 to 8 do
19407: LD_ADDR_VAR 0 2
19411: PUSH
19412: DOUBLE
19413: LD_INT 1
19415: DEC
19416: ST_TO_ADDR
19417: LD_INT 8
19419: PUSH
19420: FOR_TO
19421: IFFALSE 19542
// begin for i = 1 to 72 do
19423: LD_ADDR_VAR 0 3
19427: PUSH
19428: DOUBLE
19429: LD_INT 1
19431: DEC
19432: ST_TO_ADDR
19433: LD_INT 72
19435: PUSH
19436: FOR_TO
19437: IFFALSE 19468
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
19439: LD_VAR 0 3
19443: PPUSH
19444: LD_VAR 0 2
19448: PPUSH
19449: LD_INT 0
19451: PPUSH
19452: LD_VAR 0 3
19456: PPUSH
19457: CALL_OW 565
19461: PPUSH
19462: CALL_OW 322
19466: GO 19436
19468: POP
19469: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
19470: LD_INT 73
19472: PPUSH
19473: LD_VAR 0 2
19477: PPUSH
19478: LD_INT 0
19480: PPUSH
19481: LD_INT 25
19483: PPUSH
19484: CALL_OW 565
19488: PPUSH
19489: CALL_OW 322
// for i = 0 to 40 do
19493: LD_ADDR_VAR 0 3
19497: PUSH
19498: DOUBLE
19499: LD_INT 0
19501: DEC
19502: ST_TO_ADDR
19503: LD_INT 40
19505: PUSH
19506: FOR_TO
19507: IFFALSE 19538
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
19509: LD_VAR 0 3
19513: PPUSH
19514: LD_VAR 0 2
19518: PPUSH
19519: LD_INT 1
19521: PPUSH
19522: LD_VAR 0 3
19526: PPUSH
19527: CALL_OW 565
19531: PPUSH
19532: CALL_OW 324
19536: GO 19506
19538: POP
19539: POP
// end ;
19540: GO 19420
19542: POP
19543: POP
// end ;
19544: LD_VAR 0 1
19548: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
19549: LD_INT 0
19551: PPUSH
19552: PPUSH
19553: PPUSH
// for side = 1 to 8 do
19554: LD_ADDR_VAR 0 3
19558: PUSH
19559: DOUBLE
19560: LD_INT 1
19562: DEC
19563: ST_TO_ADDR
19564: LD_INT 8
19566: PUSH
19567: FOR_TO
19568: IFFALSE 23564
// begin for i = 1 to 73 do
19570: LD_ADDR_VAR 0 4
19574: PUSH
19575: DOUBLE
19576: LD_INT 1
19578: DEC
19579: ST_TO_ADDR
19580: LD_INT 73
19582: PUSH
19583: FOR_TO
19584: IFFALSE 19605
// SetTech ( i , side , state_disabled ) ;
19586: LD_VAR 0 4
19590: PPUSH
19591: LD_VAR 0 3
19595: PPUSH
19596: LD_INT 0
19598: PPUSH
19599: CALL_OW 322
19603: GO 19583
19605: POP
19606: POP
// for i = 0 to 40 do
19607: LD_ADDR_VAR 0 4
19611: PUSH
19612: DOUBLE
19613: LD_INT 0
19615: DEC
19616: ST_TO_ADDR
19617: LD_INT 40
19619: PUSH
19620: FOR_TO
19621: IFFALSE 19642
// SetRestrict ( i , side , false ) ;
19623: LD_VAR 0 4
19627: PPUSH
19628: LD_VAR 0 3
19632: PPUSH
19633: LD_INT 0
19635: PPUSH
19636: CALL_OW 324
19640: GO 19620
19642: POP
19643: POP
// case level of 1 :
19644: LD_VAR 0 1
19648: PUSH
19649: LD_INT 1
19651: DOUBLE
19652: EQUAL
19653: IFTRUE 19657
19655: GO 19810
19657: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19658: LD_INT 35
19660: PPUSH
19661: LD_VAR 0 3
19665: PPUSH
19666: LD_INT 1
19668: PPUSH
19669: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19673: LD_INT 45
19675: PPUSH
19676: LD_VAR 0 3
19680: PPUSH
19681: LD_INT 1
19683: PPUSH
19684: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19688: LD_INT 46
19690: PPUSH
19691: LD_VAR 0 3
19695: PPUSH
19696: LD_INT 1
19698: PPUSH
19699: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19703: LD_INT 47
19705: PPUSH
19706: LD_VAR 0 3
19710: PPUSH
19711: LD_INT 1
19713: PPUSH
19714: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
19718: LD_INT 0
19720: PPUSH
19721: LD_VAR 0 3
19725: PPUSH
19726: LD_INT 1
19728: PPUSH
19729: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
19733: LD_INT 2
19735: PPUSH
19736: LD_VAR 0 3
19740: PPUSH
19741: LD_INT 1
19743: PPUSH
19744: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
19748: LD_INT 4
19750: PPUSH
19751: LD_VAR 0 3
19755: PPUSH
19756: LD_INT 1
19758: PPUSH
19759: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
19763: LD_INT 6
19765: PPUSH
19766: LD_VAR 0 3
19770: PPUSH
19771: LD_INT 1
19773: PPUSH
19774: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
19778: LD_INT 29
19780: PPUSH
19781: LD_VAR 0 3
19785: PPUSH
19786: LD_INT 1
19788: PPUSH
19789: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
19793: LD_INT 31
19795: PPUSH
19796: LD_VAR 0 3
19800: PPUSH
19801: LD_INT 1
19803: PPUSH
19804: CALL_OW 324
// end ; 2 :
19808: GO 23562
19810: LD_INT 2
19812: DOUBLE
19813: EQUAL
19814: IFTRUE 19818
19816: GO 20016
19818: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19819: LD_INT 35
19821: PPUSH
19822: LD_VAR 0 3
19826: PPUSH
19827: LD_INT 1
19829: PPUSH
19830: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19834: LD_INT 45
19836: PPUSH
19837: LD_VAR 0 3
19841: PPUSH
19842: LD_INT 1
19844: PPUSH
19845: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19849: LD_INT 46
19851: PPUSH
19852: LD_VAR 0 3
19856: PPUSH
19857: LD_INT 1
19859: PPUSH
19860: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19864: LD_INT 47
19866: PPUSH
19867: LD_VAR 0 3
19871: PPUSH
19872: LD_INT 1
19874: PPUSH
19875: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
19879: LD_INT 1
19881: PPUSH
19882: LD_VAR 0 3
19886: PPUSH
19887: LD_INT 1
19889: PPUSH
19890: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
19894: LD_INT 2
19896: PPUSH
19897: LD_VAR 0 3
19901: PPUSH
19902: LD_INT 1
19904: PPUSH
19905: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
19909: LD_INT 11
19911: PPUSH
19912: LD_VAR 0 3
19916: PPUSH
19917: LD_INT 1
19919: PPUSH
19920: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
19924: LD_INT 0
19926: PPUSH
19927: LD_VAR 0 3
19931: PPUSH
19932: LD_INT 1
19934: PPUSH
19935: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
19939: LD_INT 2
19941: PPUSH
19942: LD_VAR 0 3
19946: PPUSH
19947: LD_INT 1
19949: PPUSH
19950: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
19954: LD_INT 4
19956: PPUSH
19957: LD_VAR 0 3
19961: PPUSH
19962: LD_INT 1
19964: PPUSH
19965: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
19969: LD_INT 6
19971: PPUSH
19972: LD_VAR 0 3
19976: PPUSH
19977: LD_INT 1
19979: PPUSH
19980: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
19984: LD_INT 29
19986: PPUSH
19987: LD_VAR 0 3
19991: PPUSH
19992: LD_INT 1
19994: PPUSH
19995: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
19999: LD_INT 31
20001: PPUSH
20002: LD_VAR 0 3
20006: PPUSH
20007: LD_INT 1
20009: PPUSH
20010: CALL_OW 324
// end ; 3 :
20014: GO 23562
20016: LD_INT 3
20018: DOUBLE
20019: EQUAL
20020: IFTRUE 20024
20022: GO 20477
20024: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
20025: LD_INT 35
20027: PPUSH
20028: LD_VAR 0 3
20032: PPUSH
20033: LD_INT 1
20035: PPUSH
20036: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
20040: LD_INT 45
20042: PPUSH
20043: LD_VAR 0 3
20047: PPUSH
20048: LD_INT 1
20050: PPUSH
20051: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
20055: LD_INT 46
20057: PPUSH
20058: LD_VAR 0 3
20062: PPUSH
20063: LD_INT 1
20065: PPUSH
20066: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
20070: LD_INT 47
20072: PPUSH
20073: LD_VAR 0 3
20077: PPUSH
20078: LD_INT 1
20080: PPUSH
20081: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
20085: LD_INT 1
20087: PPUSH
20088: LD_VAR 0 3
20092: PPUSH
20093: LD_INT 1
20095: PPUSH
20096: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
20100: LD_INT 2
20102: PPUSH
20103: LD_VAR 0 3
20107: PPUSH
20108: LD_INT 1
20110: PPUSH
20111: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
20115: LD_INT 11
20117: PPUSH
20118: LD_VAR 0 3
20122: PPUSH
20123: LD_INT 1
20125: PPUSH
20126: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
20130: LD_INT 48
20132: PPUSH
20133: LD_VAR 0 3
20137: PPUSH
20138: LD_INT 1
20140: PPUSH
20141: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
20145: LD_INT 69
20147: PPUSH
20148: LD_VAR 0 3
20152: PPUSH
20153: LD_INT 1
20155: PPUSH
20156: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
20160: LD_INT 39
20162: PPUSH
20163: LD_VAR 0 3
20167: PPUSH
20168: LD_INT 1
20170: PPUSH
20171: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
20175: LD_INT 43
20177: PPUSH
20178: LD_VAR 0 3
20182: PPUSH
20183: LD_INT 1
20185: PPUSH
20186: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
20190: LD_INT 51
20192: PPUSH
20193: LD_VAR 0 3
20197: PPUSH
20198: LD_INT 1
20200: PPUSH
20201: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
20205: LD_INT 6
20207: PPUSH
20208: LD_VAR 0 3
20212: PPUSH
20213: LD_INT 1
20215: PPUSH
20216: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
20220: LD_INT 0
20222: PPUSH
20223: LD_VAR 0 3
20227: PPUSH
20228: LD_INT 1
20230: PPUSH
20231: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
20235: LD_INT 2
20237: PPUSH
20238: LD_VAR 0 3
20242: PPUSH
20243: LD_INT 1
20245: PPUSH
20246: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
20250: LD_INT 3
20252: PPUSH
20253: LD_VAR 0 3
20257: PPUSH
20258: LD_INT 1
20260: PPUSH
20261: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
20265: LD_INT 4
20267: PPUSH
20268: LD_VAR 0 3
20272: PPUSH
20273: LD_INT 1
20275: PPUSH
20276: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
20280: LD_INT 6
20282: PPUSH
20283: LD_VAR 0 3
20287: PPUSH
20288: LD_INT 1
20290: PPUSH
20291: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
20295: LD_INT 7
20297: PPUSH
20298: LD_VAR 0 3
20302: PPUSH
20303: LD_INT 1
20305: PPUSH
20306: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
20310: LD_INT 8
20312: PPUSH
20313: LD_VAR 0 3
20317: PPUSH
20318: LD_INT 1
20320: PPUSH
20321: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
20325: LD_INT 10
20327: PPUSH
20328: LD_VAR 0 3
20332: PPUSH
20333: LD_INT 1
20335: PPUSH
20336: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
20340: LD_INT 15
20342: PPUSH
20343: LD_VAR 0 3
20347: PPUSH
20348: LD_INT 1
20350: PPUSH
20351: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
20355: LD_INT 16
20357: PPUSH
20358: LD_VAR 0 3
20362: PPUSH
20363: LD_INT 1
20365: PPUSH
20366: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
20370: LD_INT 17
20372: PPUSH
20373: LD_VAR 0 3
20377: PPUSH
20378: LD_INT 1
20380: PPUSH
20381: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
20385: LD_INT 20
20387: PPUSH
20388: LD_VAR 0 3
20392: PPUSH
20393: LD_INT 1
20395: PPUSH
20396: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
20400: LD_INT 26
20402: PPUSH
20403: LD_VAR 0 3
20407: PPUSH
20408: LD_INT 1
20410: PPUSH
20411: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
20415: LD_INT 27
20417: PPUSH
20418: LD_VAR 0 3
20422: PPUSH
20423: LD_INT 1
20425: PPUSH
20426: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
20430: LD_INT 29
20432: PPUSH
20433: LD_VAR 0 3
20437: PPUSH
20438: LD_INT 1
20440: PPUSH
20441: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
20445: LD_INT 31
20447: PPUSH
20448: LD_VAR 0 3
20452: PPUSH
20453: LD_INT 1
20455: PPUSH
20456: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
20460: LD_INT 32
20462: PPUSH
20463: LD_VAR 0 3
20467: PPUSH
20468: LD_INT 1
20470: PPUSH
20471: CALL_OW 324
// end ; 4 :
20475: GO 23562
20477: LD_INT 4
20479: DOUBLE
20480: EQUAL
20481: IFTRUE 20485
20483: GO 21433
20485: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
20486: LD_INT 35
20488: PPUSH
20489: LD_VAR 0 3
20493: PPUSH
20494: LD_INT 1
20496: PPUSH
20497: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
20501: LD_INT 45
20503: PPUSH
20504: LD_VAR 0 3
20508: PPUSH
20509: LD_INT 1
20511: PPUSH
20512: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
20516: LD_INT 46
20518: PPUSH
20519: LD_VAR 0 3
20523: PPUSH
20524: LD_INT 1
20526: PPUSH
20527: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
20531: LD_INT 47
20533: PPUSH
20534: LD_VAR 0 3
20538: PPUSH
20539: LD_INT 1
20541: PPUSH
20542: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
20546: LD_INT 1
20548: PPUSH
20549: LD_VAR 0 3
20553: PPUSH
20554: LD_INT 1
20556: PPUSH
20557: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
20561: LD_INT 2
20563: PPUSH
20564: LD_VAR 0 3
20568: PPUSH
20569: LD_INT 1
20571: PPUSH
20572: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
20576: LD_INT 11
20578: PPUSH
20579: LD_VAR 0 3
20583: PPUSH
20584: LD_INT 1
20586: PPUSH
20587: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
20591: LD_INT 20
20593: PPUSH
20594: LD_VAR 0 3
20598: PPUSH
20599: LD_INT 1
20601: PPUSH
20602: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
20606: LD_INT 48
20608: PPUSH
20609: LD_VAR 0 3
20613: PPUSH
20614: LD_INT 1
20616: PPUSH
20617: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
20621: LD_INT 49
20623: PPUSH
20624: LD_VAR 0 3
20628: PPUSH
20629: LD_INT 1
20631: PPUSH
20632: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
20636: LD_INT 69
20638: PPUSH
20639: LD_VAR 0 3
20643: PPUSH
20644: LD_INT 1
20646: PPUSH
20647: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
20651: LD_INT 39
20653: PPUSH
20654: LD_VAR 0 3
20658: PPUSH
20659: LD_INT 1
20661: PPUSH
20662: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
20666: LD_INT 34
20668: PPUSH
20669: LD_VAR 0 3
20673: PPUSH
20674: LD_INT 1
20676: PPUSH
20677: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
20681: LD_INT 42
20683: PPUSH
20684: LD_VAR 0 3
20688: PPUSH
20689: LD_INT 1
20691: PPUSH
20692: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
20696: LD_INT 44
20698: PPUSH
20699: LD_VAR 0 3
20703: PPUSH
20704: LD_INT 1
20706: PPUSH
20707: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
20711: LD_INT 41
20713: PPUSH
20714: LD_VAR 0 3
20718: PPUSH
20719: LD_INT 1
20721: PPUSH
20722: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
20726: LD_INT 43
20728: PPUSH
20729: LD_VAR 0 3
20733: PPUSH
20734: LD_INT 1
20736: PPUSH
20737: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
20741: LD_INT 70
20743: PPUSH
20744: LD_VAR 0 3
20748: PPUSH
20749: LD_INT 1
20751: PPUSH
20752: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
20756: LD_INT 51
20758: PPUSH
20759: LD_VAR 0 3
20763: PPUSH
20764: LD_INT 1
20766: PPUSH
20767: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
20771: LD_INT 52
20773: PPUSH
20774: LD_VAR 0 3
20778: PPUSH
20779: LD_INT 1
20781: PPUSH
20782: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
20786: LD_INT 6
20788: PPUSH
20789: LD_VAR 0 3
20793: PPUSH
20794: LD_INT 1
20796: PPUSH
20797: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
20801: LD_INT 15
20803: PPUSH
20804: LD_VAR 0 3
20808: PPUSH
20809: LD_INT 1
20811: PPUSH
20812: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
20816: LD_INT 7
20818: PPUSH
20819: LD_VAR 0 3
20823: PPUSH
20824: LD_INT 1
20826: PPUSH
20827: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
20831: LD_INT 12
20833: PPUSH
20834: LD_VAR 0 3
20838: PPUSH
20839: LD_INT 1
20841: PPUSH
20842: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
20846: LD_INT 18
20848: PPUSH
20849: LD_VAR 0 3
20853: PPUSH
20854: LD_INT 1
20856: PPUSH
20857: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
20861: LD_INT 60
20863: PPUSH
20864: LD_VAR 0 3
20868: PPUSH
20869: LD_INT 1
20871: PPUSH
20872: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
20876: LD_INT 9
20878: PPUSH
20879: LD_VAR 0 3
20883: PPUSH
20884: LD_INT 1
20886: PPUSH
20887: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
20891: LD_INT 30
20893: PPUSH
20894: LD_VAR 0 3
20898: PPUSH
20899: LD_INT 1
20901: PPUSH
20902: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
20906: LD_INT 37
20908: PPUSH
20909: LD_VAR 0 3
20913: PPUSH
20914: LD_INT 1
20916: PPUSH
20917: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
20921: LD_INT 5
20923: PPUSH
20924: LD_VAR 0 3
20928: PPUSH
20929: LD_INT 1
20931: PPUSH
20932: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
20936: LD_INT 66
20938: PPUSH
20939: LD_VAR 0 3
20943: PPUSH
20944: LD_INT 1
20946: PPUSH
20947: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
20951: LD_INT 21
20953: PPUSH
20954: LD_VAR 0 3
20958: PPUSH
20959: LD_INT 1
20961: PPUSH
20962: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
20966: LD_INT 22
20968: PPUSH
20969: LD_VAR 0 3
20973: PPUSH
20974: LD_INT 1
20976: PPUSH
20977: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
20981: LD_INT 54
20983: PPUSH
20984: LD_VAR 0 3
20988: PPUSH
20989: LD_INT 1
20991: PPUSH
20992: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
20996: LD_INT 0
20998: PPUSH
20999: LD_VAR 0 3
21003: PPUSH
21004: LD_INT 1
21006: PPUSH
21007: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
21011: LD_INT 1
21013: PPUSH
21014: LD_VAR 0 3
21018: PPUSH
21019: LD_INT 1
21021: PPUSH
21022: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
21026: LD_INT 2
21028: PPUSH
21029: LD_VAR 0 3
21033: PPUSH
21034: LD_INT 1
21036: PPUSH
21037: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
21041: LD_INT 3
21043: PPUSH
21044: LD_VAR 0 3
21048: PPUSH
21049: LD_INT 1
21051: PPUSH
21052: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
21056: LD_INT 4
21058: PPUSH
21059: LD_VAR 0 3
21063: PPUSH
21064: LD_INT 1
21066: PPUSH
21067: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
21071: LD_INT 5
21073: PPUSH
21074: LD_VAR 0 3
21078: PPUSH
21079: LD_INT 1
21081: PPUSH
21082: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
21086: LD_INT 6
21088: PPUSH
21089: LD_VAR 0 3
21093: PPUSH
21094: LD_INT 1
21096: PPUSH
21097: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
21101: LD_INT 7
21103: PPUSH
21104: LD_VAR 0 3
21108: PPUSH
21109: LD_INT 1
21111: PPUSH
21112: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
21116: LD_INT 8
21118: PPUSH
21119: LD_VAR 0 3
21123: PPUSH
21124: LD_INT 1
21126: PPUSH
21127: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
21131: LD_INT 10
21133: PPUSH
21134: LD_VAR 0 3
21138: PPUSH
21139: LD_INT 1
21141: PPUSH
21142: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
21146: LD_INT 11
21148: PPUSH
21149: LD_VAR 0 3
21153: PPUSH
21154: LD_INT 1
21156: PPUSH
21157: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
21161: LD_INT 12
21163: PPUSH
21164: LD_VAR 0 3
21168: PPUSH
21169: LD_INT 1
21171: PPUSH
21172: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
21176: LD_INT 13
21178: PPUSH
21179: LD_VAR 0 3
21183: PPUSH
21184: LD_INT 1
21186: PPUSH
21187: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
21191: LD_INT 14
21193: PPUSH
21194: LD_VAR 0 3
21198: PPUSH
21199: LD_INT 1
21201: PPUSH
21202: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
21206: LD_INT 15
21208: PPUSH
21209: LD_VAR 0 3
21213: PPUSH
21214: LD_INT 1
21216: PPUSH
21217: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
21221: LD_INT 16
21223: PPUSH
21224: LD_VAR 0 3
21228: PPUSH
21229: LD_INT 1
21231: PPUSH
21232: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
21236: LD_INT 17
21238: PPUSH
21239: LD_VAR 0 3
21243: PPUSH
21244: LD_INT 1
21246: PPUSH
21247: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
21251: LD_INT 19
21253: PPUSH
21254: LD_VAR 0 3
21258: PPUSH
21259: LD_INT 1
21261: PPUSH
21262: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
21266: LD_INT 20
21268: PPUSH
21269: LD_VAR 0 3
21273: PPUSH
21274: LD_INT 1
21276: PPUSH
21277: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
21281: LD_INT 21
21283: PPUSH
21284: LD_VAR 0 3
21288: PPUSH
21289: LD_INT 1
21291: PPUSH
21292: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
21296: LD_INT 23
21298: PPUSH
21299: LD_VAR 0 3
21303: PPUSH
21304: LD_INT 1
21306: PPUSH
21307: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
21311: LD_INT 26
21313: PPUSH
21314: LD_VAR 0 3
21318: PPUSH
21319: LD_INT 1
21321: PPUSH
21322: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
21326: LD_INT 27
21328: PPUSH
21329: LD_VAR 0 3
21333: PPUSH
21334: LD_INT 1
21336: PPUSH
21337: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
21341: LD_INT 28
21343: PPUSH
21344: LD_VAR 0 3
21348: PPUSH
21349: LD_INT 1
21351: PPUSH
21352: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
21356: LD_INT 29
21358: PPUSH
21359: LD_VAR 0 3
21363: PPUSH
21364: LD_INT 1
21366: PPUSH
21367: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
21371: LD_INT 30
21373: PPUSH
21374: LD_VAR 0 3
21378: PPUSH
21379: LD_INT 1
21381: PPUSH
21382: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
21386: LD_INT 31
21388: PPUSH
21389: LD_VAR 0 3
21393: PPUSH
21394: LD_INT 1
21396: PPUSH
21397: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
21401: LD_INT 32
21403: PPUSH
21404: LD_VAR 0 3
21408: PPUSH
21409: LD_INT 1
21411: PPUSH
21412: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
21416: LD_INT 36
21418: PPUSH
21419: LD_VAR 0 3
21423: PPUSH
21424: LD_INT 1
21426: PPUSH
21427: CALL_OW 324
// end ; 5 :
21431: GO 23562
21433: LD_INT 5
21435: DOUBLE
21436: EQUAL
21437: IFTRUE 21441
21439: GO 22554
21441: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
21442: LD_INT 35
21444: PPUSH
21445: LD_VAR 0 3
21449: PPUSH
21450: LD_INT 1
21452: PPUSH
21453: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
21457: LD_INT 45
21459: PPUSH
21460: LD_VAR 0 3
21464: PPUSH
21465: LD_INT 1
21467: PPUSH
21468: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
21472: LD_INT 46
21474: PPUSH
21475: LD_VAR 0 3
21479: PPUSH
21480: LD_INT 1
21482: PPUSH
21483: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
21487: LD_INT 47
21489: PPUSH
21490: LD_VAR 0 3
21494: PPUSH
21495: LD_INT 1
21497: PPUSH
21498: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
21502: LD_INT 1
21504: PPUSH
21505: LD_VAR 0 3
21509: PPUSH
21510: LD_INT 1
21512: PPUSH
21513: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
21517: LD_INT 2
21519: PPUSH
21520: LD_VAR 0 3
21524: PPUSH
21525: LD_INT 1
21527: PPUSH
21528: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
21532: LD_INT 11
21534: PPUSH
21535: LD_VAR 0 3
21539: PPUSH
21540: LD_INT 1
21542: PPUSH
21543: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
21547: LD_INT 20
21549: PPUSH
21550: LD_VAR 0 3
21554: PPUSH
21555: LD_INT 1
21557: PPUSH
21558: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
21562: LD_INT 48
21564: PPUSH
21565: LD_VAR 0 3
21569: PPUSH
21570: LD_INT 1
21572: PPUSH
21573: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
21577: LD_INT 49
21579: PPUSH
21580: LD_VAR 0 3
21584: PPUSH
21585: LD_INT 1
21587: PPUSH
21588: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
21592: LD_INT 69
21594: PPUSH
21595: LD_VAR 0 3
21599: PPUSH
21600: LD_INT 1
21602: PPUSH
21603: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
21607: LD_INT 39
21609: PPUSH
21610: LD_VAR 0 3
21614: PPUSH
21615: LD_INT 1
21617: PPUSH
21618: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
21622: LD_INT 34
21624: PPUSH
21625: LD_VAR 0 3
21629: PPUSH
21630: LD_INT 1
21632: PPUSH
21633: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
21637: LD_INT 42
21639: PPUSH
21640: LD_VAR 0 3
21644: PPUSH
21645: LD_INT 1
21647: PPUSH
21648: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
21652: LD_INT 44
21654: PPUSH
21655: LD_VAR 0 3
21659: PPUSH
21660: LD_INT 1
21662: PPUSH
21663: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
21667: LD_INT 41
21669: PPUSH
21670: LD_VAR 0 3
21674: PPUSH
21675: LD_INT 1
21677: PPUSH
21678: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
21682: LD_INT 40
21684: PPUSH
21685: LD_VAR 0 3
21689: PPUSH
21690: LD_INT 1
21692: PPUSH
21693: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
21697: LD_INT 43
21699: PPUSH
21700: LD_VAR 0 3
21704: PPUSH
21705: LD_INT 1
21707: PPUSH
21708: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
21712: LD_INT 70
21714: PPUSH
21715: LD_VAR 0 3
21719: PPUSH
21720: LD_INT 1
21722: PPUSH
21723: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
21727: LD_INT 51
21729: PPUSH
21730: LD_VAR 0 3
21734: PPUSH
21735: LD_INT 1
21737: PPUSH
21738: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
21742: LD_INT 52
21744: PPUSH
21745: LD_VAR 0 3
21749: PPUSH
21750: LD_INT 1
21752: PPUSH
21753: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
21757: LD_INT 6
21759: PPUSH
21760: LD_VAR 0 3
21764: PPUSH
21765: LD_INT 1
21767: PPUSH
21768: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
21772: LD_INT 15
21774: PPUSH
21775: LD_VAR 0 3
21779: PPUSH
21780: LD_INT 1
21782: PPUSH
21783: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
21787: LD_INT 7
21789: PPUSH
21790: LD_VAR 0 3
21794: PPUSH
21795: LD_INT 1
21797: PPUSH
21798: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
21802: LD_INT 12
21804: PPUSH
21805: LD_VAR 0 3
21809: PPUSH
21810: LD_INT 1
21812: PPUSH
21813: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
21817: LD_INT 17
21819: PPUSH
21820: LD_VAR 0 3
21824: PPUSH
21825: LD_INT 1
21827: PPUSH
21828: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
21832: LD_INT 18
21834: PPUSH
21835: LD_VAR 0 3
21839: PPUSH
21840: LD_INT 1
21842: PPUSH
21843: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
21847: LD_INT 60
21849: PPUSH
21850: LD_VAR 0 3
21854: PPUSH
21855: LD_INT 1
21857: PPUSH
21858: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
21862: LD_INT 32
21864: PPUSH
21865: LD_VAR 0 3
21869: PPUSH
21870: LD_INT 1
21872: PPUSH
21873: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
21877: LD_INT 9
21879: PPUSH
21880: LD_VAR 0 3
21884: PPUSH
21885: LD_INT 1
21887: PPUSH
21888: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
21892: LD_INT 57
21894: PPUSH
21895: LD_VAR 0 3
21899: PPUSH
21900: LD_INT 1
21902: PPUSH
21903: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
21907: LD_INT 30
21909: PPUSH
21910: LD_VAR 0 3
21914: PPUSH
21915: LD_INT 1
21917: PPUSH
21918: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
21922: LD_INT 37
21924: PPUSH
21925: LD_VAR 0 3
21929: PPUSH
21930: LD_INT 1
21932: PPUSH
21933: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
21937: LD_INT 63
21939: PPUSH
21940: LD_VAR 0 3
21944: PPUSH
21945: LD_INT 1
21947: PPUSH
21948: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
21952: LD_INT 3
21954: PPUSH
21955: LD_VAR 0 3
21959: PPUSH
21960: LD_INT 1
21962: PPUSH
21963: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
21967: LD_INT 4
21969: PPUSH
21970: LD_VAR 0 3
21974: PPUSH
21975: LD_INT 1
21977: PPUSH
21978: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
21982: LD_INT 5
21984: PPUSH
21985: LD_VAR 0 3
21989: PPUSH
21990: LD_INT 1
21992: PPUSH
21993: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
21997: LD_INT 66
21999: PPUSH
22000: LD_VAR 0 3
22004: PPUSH
22005: LD_INT 1
22007: PPUSH
22008: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
22012: LD_INT 21
22014: PPUSH
22015: LD_VAR 0 3
22019: PPUSH
22020: LD_INT 1
22022: PPUSH
22023: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
22027: LD_INT 22
22029: PPUSH
22030: LD_VAR 0 3
22034: PPUSH
22035: LD_INT 1
22037: PPUSH
22038: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
22042: LD_INT 19
22044: PPUSH
22045: LD_VAR 0 3
22049: PPUSH
22050: LD_INT 1
22052: PPUSH
22053: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
22057: LD_INT 54
22059: PPUSH
22060: LD_VAR 0 3
22064: PPUSH
22065: LD_INT 1
22067: PPUSH
22068: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
22072: LD_INT 55
22074: PPUSH
22075: LD_VAR 0 3
22079: PPUSH
22080: LD_INT 1
22082: PPUSH
22083: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22087: LD_INT 0
22089: PPUSH
22090: LD_VAR 0 3
22094: PPUSH
22095: LD_INT 1
22097: PPUSH
22098: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
22102: LD_INT 1
22104: PPUSH
22105: LD_VAR 0 3
22109: PPUSH
22110: LD_INT 1
22112: PPUSH
22113: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22117: LD_INT 2
22119: PPUSH
22120: LD_VAR 0 3
22124: PPUSH
22125: LD_INT 1
22127: PPUSH
22128: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
22132: LD_INT 3
22134: PPUSH
22135: LD_VAR 0 3
22139: PPUSH
22140: LD_INT 1
22142: PPUSH
22143: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22147: LD_INT 4
22149: PPUSH
22150: LD_VAR 0 3
22154: PPUSH
22155: LD_INT 1
22157: PPUSH
22158: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
22162: LD_INT 5
22164: PPUSH
22165: LD_VAR 0 3
22169: PPUSH
22170: LD_INT 1
22172: PPUSH
22173: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22177: LD_INT 6
22179: PPUSH
22180: LD_VAR 0 3
22184: PPUSH
22185: LD_INT 1
22187: PPUSH
22188: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
22192: LD_INT 7
22194: PPUSH
22195: LD_VAR 0 3
22199: PPUSH
22200: LD_INT 1
22202: PPUSH
22203: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
22207: LD_INT 8
22209: PPUSH
22210: LD_VAR 0 3
22214: PPUSH
22215: LD_INT 1
22217: PPUSH
22218: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
22222: LD_INT 10
22224: PPUSH
22225: LD_VAR 0 3
22229: PPUSH
22230: LD_INT 1
22232: PPUSH
22233: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
22237: LD_INT 11
22239: PPUSH
22240: LD_VAR 0 3
22244: PPUSH
22245: LD_INT 1
22247: PPUSH
22248: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
22252: LD_INT 12
22254: PPUSH
22255: LD_VAR 0 3
22259: PPUSH
22260: LD_INT 1
22262: PPUSH
22263: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
22267: LD_INT 13
22269: PPUSH
22270: LD_VAR 0 3
22274: PPUSH
22275: LD_INT 1
22277: PPUSH
22278: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
22282: LD_INT 14
22284: PPUSH
22285: LD_VAR 0 3
22289: PPUSH
22290: LD_INT 1
22292: PPUSH
22293: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
22297: LD_INT 15
22299: PPUSH
22300: LD_VAR 0 3
22304: PPUSH
22305: LD_INT 1
22307: PPUSH
22308: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
22312: LD_INT 16
22314: PPUSH
22315: LD_VAR 0 3
22319: PPUSH
22320: LD_INT 1
22322: PPUSH
22323: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
22327: LD_INT 17
22329: PPUSH
22330: LD_VAR 0 3
22334: PPUSH
22335: LD_INT 1
22337: PPUSH
22338: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
22342: LD_INT 18
22344: PPUSH
22345: LD_VAR 0 3
22349: PPUSH
22350: LD_INT 1
22352: PPUSH
22353: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
22357: LD_INT 19
22359: PPUSH
22360: LD_VAR 0 3
22364: PPUSH
22365: LD_INT 1
22367: PPUSH
22368: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
22372: LD_INT 20
22374: PPUSH
22375: LD_VAR 0 3
22379: PPUSH
22380: LD_INT 1
22382: PPUSH
22383: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
22387: LD_INT 21
22389: PPUSH
22390: LD_VAR 0 3
22394: PPUSH
22395: LD_INT 1
22397: PPUSH
22398: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
22402: LD_INT 23
22404: PPUSH
22405: LD_VAR 0 3
22409: PPUSH
22410: LD_INT 1
22412: PPUSH
22413: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
22417: LD_INT 26
22419: PPUSH
22420: LD_VAR 0 3
22424: PPUSH
22425: LD_INT 1
22427: PPUSH
22428: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
22432: LD_INT 27
22434: PPUSH
22435: LD_VAR 0 3
22439: PPUSH
22440: LD_INT 1
22442: PPUSH
22443: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
22447: LD_INT 28
22449: PPUSH
22450: LD_VAR 0 3
22454: PPUSH
22455: LD_INT 1
22457: PPUSH
22458: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22462: LD_INT 29
22464: PPUSH
22465: LD_VAR 0 3
22469: PPUSH
22470: LD_INT 1
22472: PPUSH
22473: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
22477: LD_INT 30
22479: PPUSH
22480: LD_VAR 0 3
22484: PPUSH
22485: LD_INT 1
22487: PPUSH
22488: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22492: LD_INT 31
22494: PPUSH
22495: LD_VAR 0 3
22499: PPUSH
22500: LD_INT 1
22502: PPUSH
22503: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
22507: LD_INT 32
22509: PPUSH
22510: LD_VAR 0 3
22514: PPUSH
22515: LD_INT 1
22517: PPUSH
22518: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
22522: LD_INT 33
22524: PPUSH
22525: LD_VAR 0 3
22529: PPUSH
22530: LD_INT 1
22532: PPUSH
22533: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
22537: LD_INT 36
22539: PPUSH
22540: LD_VAR 0 3
22544: PPUSH
22545: LD_INT 1
22547: PPUSH
22548: CALL_OW 324
// end ; 6 :
22552: GO 23562
22554: LD_INT 6
22556: DOUBLE
22557: EQUAL
22558: IFTRUE 22562
22560: GO 23487
22562: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22563: LD_INT 35
22565: PPUSH
22566: LD_VAR 0 3
22570: PPUSH
22571: LD_INT 1
22573: PPUSH
22574: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22578: LD_INT 45
22580: PPUSH
22581: LD_VAR 0 3
22585: PPUSH
22586: LD_INT 1
22588: PPUSH
22589: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22593: LD_INT 46
22595: PPUSH
22596: LD_VAR 0 3
22600: PPUSH
22601: LD_INT 1
22603: PPUSH
22604: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22608: LD_INT 47
22610: PPUSH
22611: LD_VAR 0 3
22615: PPUSH
22616: LD_INT 1
22618: PPUSH
22619: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22623: LD_INT 1
22625: PPUSH
22626: LD_VAR 0 3
22630: PPUSH
22631: LD_INT 1
22633: PPUSH
22634: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22638: LD_INT 2
22640: PPUSH
22641: LD_VAR 0 3
22645: PPUSH
22646: LD_INT 1
22648: PPUSH
22649: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22653: LD_INT 11
22655: PPUSH
22656: LD_VAR 0 3
22660: PPUSH
22661: LD_INT 1
22663: PPUSH
22664: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
22668: LD_INT 20
22670: PPUSH
22671: LD_VAR 0 3
22675: PPUSH
22676: LD_INT 1
22678: PPUSH
22679: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
22683: LD_INT 48
22685: PPUSH
22686: LD_VAR 0 3
22690: PPUSH
22691: LD_INT 1
22693: PPUSH
22694: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
22698: LD_INT 49
22700: PPUSH
22701: LD_VAR 0 3
22705: PPUSH
22706: LD_INT 1
22708: PPUSH
22709: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
22713: LD_INT 50
22715: PPUSH
22716: LD_VAR 0 3
22720: PPUSH
22721: LD_INT 1
22723: PPUSH
22724: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
22728: LD_INT 69
22730: PPUSH
22731: LD_VAR 0 3
22735: PPUSH
22736: LD_INT 1
22738: PPUSH
22739: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
22743: LD_INT 39
22745: PPUSH
22746: LD_VAR 0 3
22750: PPUSH
22751: LD_INT 1
22753: PPUSH
22754: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
22758: LD_INT 34
22760: PPUSH
22761: LD_VAR 0 3
22765: PPUSH
22766: LD_INT 1
22768: PPUSH
22769: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
22773: LD_INT 42
22775: PPUSH
22776: LD_VAR 0 3
22780: PPUSH
22781: LD_INT 1
22783: PPUSH
22784: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
22788: LD_INT 44
22790: PPUSH
22791: LD_VAR 0 3
22795: PPUSH
22796: LD_INT 1
22798: PPUSH
22799: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
22803: LD_INT 41
22805: PPUSH
22806: LD_VAR 0 3
22810: PPUSH
22811: LD_INT 1
22813: PPUSH
22814: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
22818: LD_INT 13
22820: PPUSH
22821: LD_VAR 0 3
22825: PPUSH
22826: LD_INT 1
22828: PPUSH
22829: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
22833: LD_INT 40
22835: PPUSH
22836: LD_VAR 0 3
22840: PPUSH
22841: LD_INT 1
22843: PPUSH
22844: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
22848: LD_INT 43
22850: PPUSH
22851: LD_VAR 0 3
22855: PPUSH
22856: LD_INT 1
22858: PPUSH
22859: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
22863: LD_INT 70
22865: PPUSH
22866: LD_VAR 0 3
22870: PPUSH
22871: LD_INT 1
22873: PPUSH
22874: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
22878: LD_INT 23
22880: PPUSH
22881: LD_VAR 0 3
22885: PPUSH
22886: LD_INT 1
22888: PPUSH
22889: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
22893: LD_INT 51
22895: PPUSH
22896: LD_VAR 0 3
22900: PPUSH
22901: LD_INT 1
22903: PPUSH
22904: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
22908: LD_INT 52
22910: PPUSH
22911: LD_VAR 0 3
22915: PPUSH
22916: LD_INT 1
22918: PPUSH
22919: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
22923: LD_INT 6
22925: PPUSH
22926: LD_VAR 0 3
22930: PPUSH
22931: LD_INT 1
22933: PPUSH
22934: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
22938: LD_INT 15
22940: PPUSH
22941: LD_VAR 0 3
22945: PPUSH
22946: LD_INT 1
22948: PPUSH
22949: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
22953: LD_INT 7
22955: PPUSH
22956: LD_VAR 0 3
22960: PPUSH
22961: LD_INT 1
22963: PPUSH
22964: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
22968: LD_INT 12
22970: PPUSH
22971: LD_VAR 0 3
22975: PPUSH
22976: LD_INT 1
22978: PPUSH
22979: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
22983: LD_INT 10
22985: PPUSH
22986: LD_VAR 0 3
22990: PPUSH
22991: LD_INT 1
22993: PPUSH
22994: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
22998: LD_INT 17
23000: PPUSH
23001: LD_VAR 0 3
23005: PPUSH
23006: LD_INT 1
23008: PPUSH
23009: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
23013: LD_INT 18
23015: PPUSH
23016: LD_VAR 0 3
23020: PPUSH
23021: LD_INT 1
23023: PPUSH
23024: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
23028: LD_INT 60
23030: PPUSH
23031: LD_VAR 0 3
23035: PPUSH
23036: LD_INT 1
23038: PPUSH
23039: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
23043: LD_INT 61
23045: PPUSH
23046: LD_VAR 0 3
23050: PPUSH
23051: LD_INT 1
23053: PPUSH
23054: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
23058: LD_INT 32
23060: PPUSH
23061: LD_VAR 0 3
23065: PPUSH
23066: LD_INT 1
23068: PPUSH
23069: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
23073: LD_INT 27
23075: PPUSH
23076: LD_VAR 0 3
23080: PPUSH
23081: LD_INT 1
23083: PPUSH
23084: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
23088: LD_INT 36
23090: PPUSH
23091: LD_VAR 0 3
23095: PPUSH
23096: LD_INT 1
23098: PPUSH
23099: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
23103: LD_INT 33
23105: PPUSH
23106: LD_VAR 0 3
23110: PPUSH
23111: LD_INT 1
23113: PPUSH
23114: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
23118: LD_INT 9
23120: PPUSH
23121: LD_VAR 0 3
23125: PPUSH
23126: LD_INT 1
23128: PPUSH
23129: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
23133: LD_INT 38
23135: PPUSH
23136: LD_VAR 0 3
23140: PPUSH
23141: LD_INT 1
23143: PPUSH
23144: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
23148: LD_INT 57
23150: PPUSH
23151: LD_VAR 0 3
23155: PPUSH
23156: LD_INT 1
23158: PPUSH
23159: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
23163: LD_INT 58
23165: PPUSH
23166: LD_VAR 0 3
23170: PPUSH
23171: LD_INT 1
23173: PPUSH
23174: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
23178: LD_INT 28
23180: PPUSH
23181: LD_VAR 0 3
23185: PPUSH
23186: LD_INT 1
23188: PPUSH
23189: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
23193: LD_INT 29
23195: PPUSH
23196: LD_VAR 0 3
23200: PPUSH
23201: LD_INT 1
23203: PPUSH
23204: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
23208: LD_INT 30
23210: PPUSH
23211: LD_VAR 0 3
23215: PPUSH
23216: LD_INT 1
23218: PPUSH
23219: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
23223: LD_INT 37
23225: PPUSH
23226: LD_VAR 0 3
23230: PPUSH
23231: LD_INT 1
23233: PPUSH
23234: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
23238: LD_INT 63
23240: PPUSH
23241: LD_VAR 0 3
23245: PPUSH
23246: LD_INT 1
23248: PPUSH
23249: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
23253: LD_INT 64
23255: PPUSH
23256: LD_VAR 0 3
23260: PPUSH
23261: LD_INT 1
23263: PPUSH
23264: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
23268: LD_INT 3
23270: PPUSH
23271: LD_VAR 0 3
23275: PPUSH
23276: LD_INT 1
23278: PPUSH
23279: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
23283: LD_INT 4
23285: PPUSH
23286: LD_VAR 0 3
23290: PPUSH
23291: LD_INT 1
23293: PPUSH
23294: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
23298: LD_INT 5
23300: PPUSH
23301: LD_VAR 0 3
23305: PPUSH
23306: LD_INT 1
23308: PPUSH
23309: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
23313: LD_INT 8
23315: PPUSH
23316: LD_VAR 0 3
23320: PPUSH
23321: LD_INT 1
23323: PPUSH
23324: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
23328: LD_INT 66
23330: PPUSH
23331: LD_VAR 0 3
23335: PPUSH
23336: LD_INT 1
23338: PPUSH
23339: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
23343: LD_INT 67
23345: PPUSH
23346: LD_VAR 0 3
23350: PPUSH
23351: LD_INT 1
23353: PPUSH
23354: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
23358: LD_INT 21
23360: PPUSH
23361: LD_VAR 0 3
23365: PPUSH
23366: LD_INT 1
23368: PPUSH
23369: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
23373: LD_INT 22
23375: PPUSH
23376: LD_VAR 0 3
23380: PPUSH
23381: LD_INT 1
23383: PPUSH
23384: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
23388: LD_INT 19
23390: PPUSH
23391: LD_VAR 0 3
23395: PPUSH
23396: LD_INT 1
23398: PPUSH
23399: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
23403: LD_INT 26
23405: PPUSH
23406: LD_VAR 0 3
23410: PPUSH
23411: LD_INT 1
23413: PPUSH
23414: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
23418: LD_INT 54
23420: PPUSH
23421: LD_VAR 0 3
23425: PPUSH
23426: LD_INT 1
23428: PPUSH
23429: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
23433: LD_INT 55
23435: PPUSH
23436: LD_VAR 0 3
23440: PPUSH
23441: LD_INT 1
23443: PPUSH
23444: CALL_OW 322
// for i = 0 to 39 do
23448: LD_ADDR_VAR 0 4
23452: PUSH
23453: DOUBLE
23454: LD_INT 0
23456: DEC
23457: ST_TO_ADDR
23458: LD_INT 39
23460: PUSH
23461: FOR_TO
23462: IFFALSE 23483
// SetRestrict ( i , side , true ) ;
23464: LD_VAR 0 4
23468: PPUSH
23469: LD_VAR 0 3
23473: PPUSH
23474: LD_INT 1
23476: PPUSH
23477: CALL_OW 324
23481: GO 23461
23483: POP
23484: POP
// end ; else
23485: GO 23562
23487: POP
// begin for i = 1 to 73 do
23488: LD_ADDR_VAR 0 4
23492: PUSH
23493: DOUBLE
23494: LD_INT 1
23496: DEC
23497: ST_TO_ADDR
23498: LD_INT 73
23500: PUSH
23501: FOR_TO
23502: IFFALSE 23523
// SetTech ( i , side , state_enabled ) ;
23504: LD_VAR 0 4
23508: PPUSH
23509: LD_VAR 0 3
23513: PPUSH
23514: LD_INT 1
23516: PPUSH
23517: CALL_OW 322
23521: GO 23501
23523: POP
23524: POP
// for i = 0 to 39 do
23525: LD_ADDR_VAR 0 4
23529: PUSH
23530: DOUBLE
23531: LD_INT 0
23533: DEC
23534: ST_TO_ADDR
23535: LD_INT 39
23537: PUSH
23538: FOR_TO
23539: IFFALSE 23560
// SetRestrict ( i , side , true ) ;
23541: LD_VAR 0 4
23545: PPUSH
23546: LD_VAR 0 3
23550: PPUSH
23551: LD_INT 1
23553: PPUSH
23554: CALL_OW 324
23558: GO 23538
23560: POP
23561: POP
// end ; end ; end ;
23562: GO 19567
23564: POP
23565: POP
// end ;
23566: LD_VAR 0 2
23570: RET
