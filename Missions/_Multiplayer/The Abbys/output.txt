// export def_base_size , def_west_nations , def_east_nations ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , respawning_time_min , respawning_time_max , siberite_bomb_Delay ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Position_Nations ; export depot_def , breastworks_def , labs_def , factory_def , start_def , extra_oil_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function prepare_deposits ; var list , un , deposits ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
// list := GetListOfResourcesInArea ( west_side ) ^ GetListOfResourcesInArea ( east_side ) ;
   6: LD_ADDR_VAR 0 2
  10: PUSH
  11: LD_INT 8
  13: PPUSH
  14: CALL_OW 442
  18: PUSH
  19: LD_INT 9
  21: PPUSH
  22: CALL_OW 442
  26: ADD
  27: ST_TO_ADDR
// for un = 1 to ( list div 3 ) do
  28: LD_ADDR_VAR 0 3
  32: PUSH
  33: DOUBLE
  34: LD_INT 1
  36: DEC
  37: ST_TO_ADDR
  38: LD_VAR 0 2
  42: PUSH
  43: LD_INT 3
  45: DIV
  46: PUSH
  47: FOR_TO
  48: IFFALSE 94
// RemoveDepositXY ( list [ un * 3 - 2 ] , list [ un * 3 - 1 ] ) ;
  50: LD_VAR 0 2
  54: PUSH
  55: LD_VAR 0 3
  59: PUSH
  60: LD_INT 3
  62: MUL
  63: PUSH
  64: LD_INT 2
  66: MINUS
  67: ARRAY
  68: PPUSH
  69: LD_VAR 0 2
  73: PUSH
  74: LD_VAR 0 3
  78: PUSH
  79: LD_INT 3
  81: MUL
  82: PUSH
  83: LD_INT 1
  85: MINUS
  86: ARRAY
  87: PPUSH
  88: CALL_OW 63
  92: GO 47
  94: POP
  95: POP
// deposits := [ [ 40 , 49 , mat_oil ] , [ 40 , 68 , mat_oil ] , [ 9 , 3 , mat_siberit ] , [ 61 , 116 , mat_siberit ] , [ 177 , 46 , mat_oil ] , [ 185 , 71 , mat_oil ] , [ 157 , 3 , mat_siberit ] , [ 213 , 116 , mat_siberit ] ] ;
  96: LD_ADDR_VAR 0 4
 100: PUSH
 101: LD_INT 40
 103: PUSH
 104: LD_INT 49
 106: PUSH
 107: LD_INT 2
 109: PUSH
 110: EMPTY
 111: LIST
 112: LIST
 113: LIST
 114: PUSH
 115: LD_INT 40
 117: PUSH
 118: LD_INT 68
 120: PUSH
 121: LD_INT 2
 123: PUSH
 124: EMPTY
 125: LIST
 126: LIST
 127: LIST
 128: PUSH
 129: LD_INT 9
 131: PUSH
 132: LD_INT 3
 134: PUSH
 135: LD_INT 3
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: LIST
 142: PUSH
 143: LD_INT 61
 145: PUSH
 146: LD_INT 116
 148: PUSH
 149: LD_INT 3
 151: PUSH
 152: EMPTY
 153: LIST
 154: LIST
 155: LIST
 156: PUSH
 157: LD_INT 177
 159: PUSH
 160: LD_INT 46
 162: PUSH
 163: LD_INT 2
 165: PUSH
 166: EMPTY
 167: LIST
 168: LIST
 169: LIST
 170: PUSH
 171: LD_INT 185
 173: PUSH
 174: LD_INT 71
 176: PUSH
 177: LD_INT 2
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: LIST
 184: PUSH
 185: LD_INT 157
 187: PUSH
 188: LD_INT 3
 190: PUSH
 191: LD_INT 3
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: PUSH
 199: LD_INT 213
 201: PUSH
 202: LD_INT 116
 204: PUSH
 205: LD_INT 3
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: PUSH
 213: EMPTY
 214: LIST
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: ST_TO_ADDR
// for un in deposits do
 223: LD_ADDR_VAR 0 3
 227: PUSH
 228: LD_VAR 0 4
 232: PUSH
 233: FOR_IN
 234: IFFALSE 269
// CreateDepositXY ( un [ 1 ] , un [ 2 ] , un [ 3 ] ) ;
 236: LD_VAR 0 3
 240: PUSH
 241: LD_INT 1
 243: ARRAY
 244: PPUSH
 245: LD_VAR 0 3
 249: PUSH
 250: LD_INT 2
 252: ARRAY
 253: PPUSH
 254: LD_VAR 0 3
 258: PUSH
 259: LD_INT 3
 261: ARRAY
 262: PPUSH
 263: CALL_OW 62
 267: GO 233
 269: POP
 270: POP
// end ;
 271: LD_VAR 0 1
 275: RET
// function init_map ; var i ; begin
 276: LD_INT 0
 278: PPUSH
 279: PPUSH
// prepare_deposits ;
 280: CALL 0 0 0
// extra_oil_deposits_locations := [ [ 29 , 3 ] , [ 82 , 115 ] , [ 134 , 3 ] , [ 192 , 116 ] ] ;
 284: LD_ADDR_EXP 27
 288: PUSH
 289: LD_INT 29
 291: PUSH
 292: LD_INT 3
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: PUSH
 299: LD_INT 82
 301: PUSH
 302: LD_INT 115
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: PUSH
 309: LD_INT 134
 311: PUSH
 312: LD_INT 3
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: PUSH
 319: LD_INT 192
 321: PUSH
 322: LD_INT 116
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: LIST
 333: LIST
 334: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 62 , 60 ] , [ 157 , 60 ] ] ;
 335: LD_ADDR_EXP 28
 339: PUSH
 340: LD_INT 62
 342: PUSH
 343: LD_INT 60
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: PUSH
 350: LD_INT 157
 352: PUSH
 353: LD_INT 60
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: ST_TO_ADDR
// depot_def := [ [ 35 , 34 , 0 ] , [ 56 , 86 , 2 ] , [ 158 , 34 , 5 ] , [ 185 , 86 , 3 ] ] ;
 364: LD_ADDR_EXP 22
 368: PUSH
 369: LD_INT 35
 371: PUSH
 372: LD_INT 34
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: EMPTY
 379: LIST
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 56
 385: PUSH
 386: LD_INT 86
 388: PUSH
 389: LD_INT 2
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: LIST
 396: PUSH
 397: LD_INT 158
 399: PUSH
 400: LD_INT 34
 402: PUSH
 403: LD_INT 5
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: LD_INT 185
 413: PUSH
 414: LD_INT 86
 416: PUSH
 417: LD_INT 3
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: LIST
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: LIST
 429: LIST
 430: ST_TO_ADDR
// labs_def := [ [ 19 , 28 , 1 ] , [ 49 , 92 , 1 ] , [ 166 , 23 , 4 ] , [ 205 , 97 , 4 ] ] ;
 431: LD_ADDR_EXP 24
 435: PUSH
 436: LD_INT 19
 438: PUSH
 439: LD_INT 28
 441: PUSH
 442: LD_INT 1
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PUSH
 450: LD_INT 49
 452: PUSH
 453: LD_INT 92
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 166
 466: PUSH
 467: LD_INT 23
 469: PUSH
 470: LD_INT 4
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: LIST
 477: PUSH
 478: LD_INT 205
 480: PUSH
 481: LD_INT 97
 483: PUSH
 484: LD_INT 4
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: ST_TO_ADDR
// factory_def := [ [ 26 , 16 , 2 ] , [ 64 , 103 , 0 ] , [ 154 , 18 , 3 ] , [ 190 , 103 , 5 ] ] ;
 498: LD_ADDR_EXP 25
 502: PUSH
 503: LD_INT 26
 505: PUSH
 506: LD_INT 16
 508: PUSH
 509: LD_INT 2
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: LIST
 516: PUSH
 517: LD_INT 64
 519: PUSH
 520: LD_INT 103
 522: PUSH
 523: LD_INT 0
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 154
 533: PUSH
 534: LD_INT 18
 536: PUSH
 537: LD_INT 3
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_INT 190
 547: PUSH
 548: LD_INT 103
 550: PUSH
 551: LD_INT 5
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: LIST
 558: PUSH
 559: EMPTY
 560: LIST
 561: LIST
 562: LIST
 563: LIST
 564: ST_TO_ADDR
// start_def := [ [ 35 , 26 ] , [ 65 , 94 ] , [ 150 , 26 ] , [ 185 , 94 ] ] ;
 565: LD_ADDR_EXP 26
 569: PUSH
 570: LD_INT 35
 572: PUSH
 573: LD_INT 26
 575: PUSH
 576: EMPTY
 577: LIST
 578: LIST
 579: PUSH
 580: LD_INT 65
 582: PUSH
 583: LD_INT 94
 585: PUSH
 586: EMPTY
 587: LIST
 588: LIST
 589: PUSH
 590: LD_INT 150
 592: PUSH
 593: LD_INT 26
 595: PUSH
 596: EMPTY
 597: LIST
 598: LIST
 599: PUSH
 600: LD_INT 185
 602: PUSH
 603: LD_INT 94
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: ST_TO_ADDR
// breastworks_def := [ [ [ 44 , 18 , 4 ] , [ 47 , 51 , 5 ] , [ 35 , 8 , 4 ] , [ 50 , 38 , 5 ] ] , [ [ 81 , 97 , 4 ] , [ 54 , 71 , 3 ] , [ 81 , 110 , 5 ] , [ 66 , 82 , 3 ] ] , [ [ 136 , 20 , 1 ] , [ 164 , 48 , 1 ] , [ 130 , 8 , 1 ] , [ 147 , 37 , 0 ] ] , [ [ 181 , 103 , 1 ] , [ 178 , 72 , 1 ] , [ 186 , 112 , 1 ] , [ 172 , 82 , 2 ] ] ] ;
 616: LD_ADDR_EXP 23
 620: PUSH
 621: LD_INT 44
 623: PUSH
 624: LD_INT 18
 626: PUSH
 627: LD_INT 4
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: LIST
 634: PUSH
 635: LD_INT 47
 637: PUSH
 638: LD_INT 51
 640: PUSH
 641: LD_INT 5
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PUSH
 649: LD_INT 35
 651: PUSH
 652: LD_INT 8
 654: PUSH
 655: LD_INT 4
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: LIST
 662: PUSH
 663: LD_INT 50
 665: PUSH
 666: LD_INT 38
 668: PUSH
 669: LD_INT 5
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: LIST
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: PUSH
 683: LD_INT 81
 685: PUSH
 686: LD_INT 97
 688: PUSH
 689: LD_INT 4
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: PUSH
 697: LD_INT 54
 699: PUSH
 700: LD_INT 71
 702: PUSH
 703: LD_INT 3
 705: PUSH
 706: EMPTY
 707: LIST
 708: LIST
 709: LIST
 710: PUSH
 711: LD_INT 81
 713: PUSH
 714: LD_INT 110
 716: PUSH
 717: LD_INT 5
 719: PUSH
 720: EMPTY
 721: LIST
 722: LIST
 723: LIST
 724: PUSH
 725: LD_INT 66
 727: PUSH
 728: LD_INT 82
 730: PUSH
 731: LD_INT 3
 733: PUSH
 734: EMPTY
 735: LIST
 736: LIST
 737: LIST
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: LIST
 743: LIST
 744: PUSH
 745: LD_INT 136
 747: PUSH
 748: LD_INT 20
 750: PUSH
 751: LD_INT 1
 753: PUSH
 754: EMPTY
 755: LIST
 756: LIST
 757: LIST
 758: PUSH
 759: LD_INT 164
 761: PUSH
 762: LD_INT 48
 764: PUSH
 765: LD_INT 1
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: LIST
 772: PUSH
 773: LD_INT 130
 775: PUSH
 776: LD_INT 8
 778: PUSH
 779: LD_INT 1
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PUSH
 787: LD_INT 147
 789: PUSH
 790: LD_INT 37
 792: PUSH
 793: LD_INT 0
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: LIST
 800: PUSH
 801: EMPTY
 802: LIST
 803: LIST
 804: LIST
 805: LIST
 806: PUSH
 807: LD_INT 181
 809: PUSH
 810: LD_INT 103
 812: PUSH
 813: LD_INT 1
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: LIST
 820: PUSH
 821: LD_INT 178
 823: PUSH
 824: LD_INT 72
 826: PUSH
 827: LD_INT 1
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: LIST
 834: PUSH
 835: LD_INT 186
 837: PUSH
 838: LD_INT 112
 840: PUSH
 841: LD_INT 1
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: LIST
 848: PUSH
 849: LD_INT 172
 851: PUSH
 852: LD_INT 82
 854: PUSH
 855: LD_INT 2
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: LIST
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: LIST
 873: LIST
 874: ST_TO_ADDR
// if def_extra_oil_deposits then
 875: LD_EXP 63
 879: IFFALSE 923
// for i in extra_oil_deposits_locations do
 881: LD_ADDR_VAR 0 2
 885: PUSH
 886: LD_EXP 27
 890: PUSH
 891: FOR_IN
 892: IFFALSE 921
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
 894: LD_VAR 0 2
 898: PUSH
 899: LD_INT 1
 901: ARRAY
 902: PPUSH
 903: LD_VAR 0 2
 907: PUSH
 908: LD_INT 2
 910: ARRAY
 911: PPUSH
 912: LD_INT 2
 914: PPUSH
 915: CALL_OW 62
 919: GO 891
 921: POP
 922: POP
// if def_extra_sib_deposits then
 923: LD_EXP 64
 927: IFFALSE 971
// for i in extra_sib_deposits_locations do
 929: LD_ADDR_VAR 0 2
 933: PUSH
 934: LD_EXP 28
 938: PUSH
 939: FOR_IN
 940: IFFALSE 969
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 2
 958: ARRAY
 959: PPUSH
 960: LD_INT 3
 962: PPUSH
 963: CALL_OW 62
 967: GO 939
 969: POP
 970: POP
// end ;
 971: LD_VAR 0 1
 975: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
 976: LD_INT 0
 978: PPUSH
 979: PPUSH
 980: PPUSH
 981: PPUSH
 982: PPUSH
 983: PPUSH
 984: PPUSH
 985: PPUSH
 986: PPUSH
// if Multiplayer then
 987: LD_OWVAR 4
 991: IFFALSE 1055
// begin Game_Type = mp_game_type ;
 993: LD_ADDR_EXP 56
 997: PUSH
 998: LD_OWVAR 6
1002: ST_TO_ADDR
// Your_Side := mp_player_side ;
1003: LD_ADDR_OWVAR 2
1007: PUSH
1008: LD_OWVAR 7
1012: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
1013: LD_ADDR_EXP 18
1017: PUSH
1018: LD_OWVAR 17
1022: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
1023: LD_ADDR_EXP 16
1027: PUSH
1028: LD_OWVAR 15
1032: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
1033: LD_ADDR_EXP 19
1037: PUSH
1038: LD_OWVAR 16
1042: ST_TO_ADDR
// Teams = mp_teams ;
1043: LD_ADDR_EXP 17
1047: PUSH
1048: LD_OWVAR 12
1052: ST_TO_ADDR
// end else
1053: GO 1195
// begin Game_Type = 12 ;
1055: LD_ADDR_EXP 56
1059: PUSH
1060: LD_INT 12
1062: ST_TO_ADDR
// Your_Side = 4 ;
1063: LD_ADDR_OWVAR 2
1067: PUSH
1068: LD_INT 4
1070: ST_TO_ADDR
// Side_Positions = [ 1 , 0 , 0 , 0 , 0 , 0 , 0 , 3 ] ;
1071: LD_ADDR_EXP 18
1075: PUSH
1076: LD_INT 1
1078: PUSH
1079: LD_INT 0
1081: PUSH
1082: LD_INT 0
1084: PUSH
1085: LD_INT 0
1087: PUSH
1088: LD_INT 0
1090: PUSH
1091: LD_INT 0
1093: PUSH
1094: LD_INT 0
1096: PUSH
1097: LD_INT 3
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: LIST
1106: LIST
1107: LIST
1108: LIST
1109: ST_TO_ADDR
// Side_Teams = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
1110: LD_ADDR_EXP 16
1114: PUSH
1115: LD_INT 0
1117: PUSH
1118: LD_INT 0
1120: PUSH
1121: LD_INT 0
1123: PUSH
1124: LD_INT 0
1126: PUSH
1127: LD_INT 0
1129: PUSH
1130: LD_INT 0
1132: PUSH
1133: LD_INT 0
1135: PUSH
1136: LD_INT 0
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: LIST
1148: ST_TO_ADDR
// Side_Nations = [ 3 , 0 , 0 , 0 , 0 , 0 , 0 , 1 ] ;
1149: LD_ADDR_EXP 19
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: LD_INT 0
1159: PUSH
1160: LD_INT 0
1162: PUSH
1163: LD_INT 0
1165: PUSH
1166: LD_INT 0
1168: PUSH
1169: LD_INT 0
1171: PUSH
1172: LD_INT 0
1174: PUSH
1175: LD_INT 1
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: LIST
1186: LIST
1187: ST_TO_ADDR
// Teams = [ ] ;
1188: LD_ADDR_EXP 17
1192: PUSH
1193: EMPTY
1194: ST_TO_ADDR
// end ; for i := 1 to 8 do
1195: LD_ADDR_VAR 0 8
1199: PUSH
1200: DOUBLE
1201: LD_INT 1
1203: DEC
1204: ST_TO_ADDR
1205: LD_INT 8
1207: PUSH
1208: FOR_TO
1209: IFFALSE 1296
// if Multiplayer_GetPlayerIsSpec ( i ) then
1211: LD_VAR 0 8
1215: PPUSH
1216: CALL_OW 530
1220: IFFALSE 1294
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
1222: LD_ADDR_EXP 18
1226: PUSH
1227: LD_EXP 18
1231: PPUSH
1232: LD_VAR 0 8
1236: PPUSH
1237: LD_INT 0
1239: PPUSH
1240: CALL_OW 1
1244: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
1245: LD_ADDR_EXP 17
1249: PUSH
1250: LD_EXP 17
1254: PPUSH
1255: LD_EXP 16
1259: PUSH
1260: LD_VAR 0 8
1264: ARRAY
1265: PPUSH
1266: LD_EXP 17
1270: PUSH
1271: LD_EXP 16
1275: PUSH
1276: LD_VAR 0 8
1280: ARRAY
1281: ARRAY
1282: PUSH
1283: LD_VAR 0 8
1287: DIFF
1288: PPUSH
1289: CALL_OW 1
1293: ST_TO_ADDR
// end ;
1294: GO 1208
1296: POP
1297: POP
// if Multiplayer then
1298: LD_OWVAR 4
1302: IFFALSE 1527
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
1304: LD_ADDR_EXP 58
1308: PUSH
1309: LD_INT 0
1311: PPUSH
1312: CALL_OW 426
1316: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
1317: LD_ADDR_EXP 59
1321: PUSH
1322: LD_INT 1
1324: PPUSH
1325: CALL_OW 426
1329: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
1330: LD_ADDR_EXP 60
1334: PUSH
1335: LD_INT 2
1337: PPUSH
1338: CALL_OW 426
1342: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
1343: LD_ADDR_EXP 61
1347: PUSH
1348: LD_INT 3
1350: PPUSH
1351: CALL_OW 426
1355: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
1356: LD_ADDR_EXP 62
1360: PUSH
1361: LD_INT 4
1363: PPUSH
1364: CALL_OW 426
1368: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
1369: LD_ADDR_EXP 63
1373: PUSH
1374: LD_INT 5
1376: PPUSH
1377: CALL_OW 426
1381: ST_TO_ADDR
// def_extra_sib_deposits = GetMultiplayerSetting ( 6 ) ;
1382: LD_ADDR_EXP 64
1386: PUSH
1387: LD_INT 6
1389: PPUSH
1390: CALL_OW 426
1394: ST_TO_ADDR
// def_base_size = GetMultiplayerSetting ( 7 ) ;
1395: LD_ADDR_EXP 1
1399: PUSH
1400: LD_INT 7
1402: PPUSH
1403: CALL_OW 426
1407: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
1408: LD_ADDR_EXP 65
1412: PUSH
1413: LD_INT 10
1415: PPUSH
1416: CALL_OW 426
1420: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
1421: LD_ADDR_EXP 66
1425: PUSH
1426: LD_INT 11
1428: PPUSH
1429: CALL_OW 426
1433: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
1434: LD_ADDR_EXP 67
1438: PUSH
1439: LD_INT 12
1441: PPUSH
1442: CALL_OW 426
1446: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
1447: LD_ADDR_EXP 69
1451: PUSH
1452: LD_INT 13
1454: PPUSH
1455: CALL_OW 426
1459: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
1460: LD_ADDR_EXP 68
1464: PUSH
1465: LD_INT 14
1467: PPUSH
1468: CALL_OW 426
1472: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
1473: LD_ADDR_EXP 70
1477: PUSH
1478: LD_INT 15
1480: PPUSH
1481: CALL_OW 426
1485: ST_TO_ADDR
// def_west_nations = GetMultiplayerSetting ( 21 ) ;
1486: LD_ADDR_EXP 2
1490: PUSH
1491: LD_INT 21
1493: PPUSH
1494: CALL_OW 426
1498: ST_TO_ADDR
// def_east_nations = GetMultiplayerSetting ( 22 ) ;
1499: LD_ADDR_EXP 3
1503: PUSH
1504: LD_INT 22
1506: PPUSH
1507: CALL_OW 426
1511: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 23 ) ;
1512: LD_ADDR_VAR 0 9
1516: PUSH
1517: LD_INT 23
1519: PPUSH
1520: CALL_OW 426
1524: ST_TO_ADDR
// end else
1525: GO 1667
// begin randomize ;
1527: CALL_OW 10
// def_base_level = 3 ;
1531: LD_ADDR_EXP 58
1535: PUSH
1536: LD_INT 3
1538: ST_TO_ADDR
// def_amount_of_people = 1 ;
1539: LD_ADDR_EXP 59
1543: PUSH
1544: LD_INT 1
1546: ST_TO_ADDR
// def_skill_level = 1 ;
1547: LD_ADDR_EXP 60
1551: PUSH
1552: LD_INT 1
1554: ST_TO_ADDR
// def_starting_resources = 2 ;
1555: LD_ADDR_EXP 61
1559: PUSH
1560: LD_INT 2
1562: ST_TO_ADDR
// def_shipments_density = 1 ;
1563: LD_ADDR_EXP 62
1567: PUSH
1568: LD_INT 1
1570: ST_TO_ADDR
// def_extra_oil_deposits = 1 ;
1571: LD_ADDR_EXP 63
1575: PUSH
1576: LD_INT 1
1578: ST_TO_ADDR
// def_extra_sib_deposits = 1 ;
1579: LD_ADDR_EXP 64
1583: PUSH
1584: LD_INT 1
1586: ST_TO_ADDR
// def_base_size = 2 ;
1587: LD_ADDR_EXP 1
1591: PUSH
1592: LD_INT 2
1594: ST_TO_ADDR
// def_shared_vision = 1 ;
1595: LD_ADDR_EXP 65
1599: PUSH
1600: LD_INT 1
1602: ST_TO_ADDR
// def_morale_flags = 1 ;
1603: LD_ADDR_EXP 66
1607: PUSH
1608: LD_INT 1
1610: ST_TO_ADDR
// def_siberite_detection = 1 ;
1611: LD_ADDR_EXP 67
1615: PUSH
1616: LD_INT 1
1618: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
1619: LD_ADDR_EXP 69
1623: PUSH
1624: LD_INT 3
1626: ST_TO_ADDR
// def_people_respawning = 2 ;
1627: LD_ADDR_EXP 68
1631: PUSH
1632: LD_INT 2
1634: ST_TO_ADDR
// def_siberite_bomb = 0 ;
1635: LD_ADDR_EXP 70
1639: PUSH
1640: LD_INT 0
1642: ST_TO_ADDR
// def_west_nations = 0 ;
1643: LD_ADDR_EXP 2
1647: PUSH
1648: LD_INT 0
1650: ST_TO_ADDR
// def_east_nations = 2 ;
1651: LD_ADDR_EXP 3
1655: PUSH
1656: LD_INT 2
1658: ST_TO_ADDR
// tech_level = 4 ;
1659: LD_ADDR_VAR 0 9
1663: PUSH
1664: LD_INT 4
1666: ST_TO_ADDR
// end ; InitGameRules ;
1667: CALL 15944 0 0
// if def_game_rules = 0 then
1671: LD_EXP 57
1675: PUSH
1676: LD_INT 0
1678: EQUAL
1679: IFFALSE 1706
// begin if isSGUI then
1681: LD_OWVAR 83
1685: IFFALSE 1693
// setMpTechs ( ) else
1687: CALL 19394 0 0
1691: GO 1706
// begin SetMpTechLevel ( tech_level + 1 ) ;
1693: LD_VAR 0 9
1697: PUSH
1698: LD_INT 1
1700: PLUS
1701: PPUSH
1702: CALL 19541 0 1
// end ; end ; if not def_base_level then
1706: LD_EXP 58
1710: NOT
1711: IFFALSE 1721
// def_base_size := 0 ;
1713: LD_ADDR_EXP 1
1717: PUSH
1718: LD_INT 0
1720: ST_TO_ADDR
// is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1721: LD_ADDR_EXP 4
1725: PUSH
1726: LD_INT 0
1728: PUSH
1729: LD_INT 1
1731: PUSH
1732: LD_INT 1
1734: PUSH
1735: LD_INT 1
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: PUSH
1744: LD_EXP 58
1748: PUSH
1749: LD_INT 1
1751: PLUS
1752: ARRAY
1753: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
1754: LD_ADDR_EXP 5
1758: PUSH
1759: LD_INT 0
1761: PUSH
1762: LD_INT 0
1764: PUSH
1765: LD_INT 2
1767: PUSH
1768: LD_INT 4
1770: PUSH
1771: EMPTY
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: PUSH
1777: LD_EXP 58
1781: PUSH
1782: LD_INT 1
1784: PLUS
1785: ARRAY
1786: ST_TO_ADDR
// number_of_people = [ 5 , 7 , 9 , 11 ] [ def_amount_of_people + 1 ] ;
1787: LD_ADDR_EXP 6
1791: PUSH
1792: LD_INT 5
1794: PUSH
1795: LD_INT 7
1797: PUSH
1798: LD_INT 9
1800: PUSH
1801: LD_INT 11
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: PUSH
1810: LD_EXP 59
1814: PUSH
1815: LD_INT 1
1817: PLUS
1818: ARRAY
1819: ST_TO_ADDR
// skill_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1820: LD_ADDR_EXP 7
1824: PUSH
1825: LD_INT 2
1827: PUSH
1828: LD_INT 3
1830: PUSH
1831: LD_INT 4
1833: PUSH
1834: LD_INT 5
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: LIST
1841: LIST
1842: PUSH
1843: LD_EXP 60
1847: PUSH
1848: LD_INT 1
1850: PLUS
1851: ARRAY
1852: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1853: LD_ADDR_EXP 9
1857: PUSH
1858: LD_INT 0
1860: PUSH
1861: LD_INT 0
1863: PUSH
1864: LD_INT 0
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: LIST
1871: PUSH
1872: LD_INT 30
1874: PUSH
1875: LD_INT 0
1877: PUSH
1878: LD_INT 0
1880: PUSH
1881: EMPTY
1882: LIST
1883: LIST
1884: LIST
1885: PUSH
1886: LD_INT 50
1888: PUSH
1889: LD_INT 20
1891: PUSH
1892: LD_INT 0
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: LIST
1899: PUSH
1900: LD_INT 80
1902: PUSH
1903: LD_INT 40
1905: PUSH
1906: LD_INT 20
1908: PUSH
1909: EMPTY
1910: LIST
1911: LIST
1912: LIST
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: PUSH
1920: LD_EXP 61
1924: PUSH
1925: LD_INT 1
1927: PLUS
1928: ARRAY
1929: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1930: LD_ADDR_EXP 8
1934: PUSH
1935: LD_INT 10
1937: PUSH
1938: EMPTY
1939: LIST
1940: PUSH
1941: LD_INT 7
1943: PUSH
1944: LD_INT 14
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: PUSH
1951: LD_INT 6
1953: PUSH
1954: LD_INT 12
1956: PUSH
1957: LD_INT 18
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: LIST
1964: PUSH
1965: LD_INT 5
1967: PUSH
1968: LD_INT 10
1970: PUSH
1971: LD_INT 15
1973: PUSH
1974: LD_INT 20
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: PUSH
1989: LD_EXP 61
1993: PUSH
1994: LD_INT 1
1996: PLUS
1997: ARRAY
1998: ST_TO_ADDR
// shipments_density = [ 18 , 25 , 35 ] [ def_shipments_density + 1 ] ;
1999: LD_ADDR_EXP 10
2003: PUSH
2004: LD_INT 18
2006: PUSH
2007: LD_INT 25
2009: PUSH
2010: LD_INT 35
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: LIST
2017: PUSH
2018: LD_EXP 62
2022: PUSH
2023: LD_INT 1
2025: PLUS
2026: ARRAY
2027: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
2028: LD_ADDR_EXP 12
2032: PUSH
2033: LD_INT 0
2035: PUSH
2036: LD_INT 3
2038: PUSH
2039: LD_INT 6
2041: PUSH
2042: LD_INT 9
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: PUSH
2051: LD_EXP 69
2055: PUSH
2056: LD_INT 1
2058: PLUS
2059: ARRAY
2060: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
2061: LD_ADDR_EXP 13
2065: PUSH
2066: LD_INT 0
2068: PUSH
2069: LD_INT 8400
2071: PUSH
2072: LD_INT 1750
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: LIST
2079: PUSH
2080: LD_EXP 68
2084: PUSH
2085: LD_INT 1
2087: PLUS
2088: ARRAY
2089: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
2090: LD_ADDR_EXP 14
2094: PUSH
2095: LD_INT 0
2097: PUSH
2098: LD_INT 21000
2100: PUSH
2101: LD_INT 4200
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: LIST
2108: PUSH
2109: LD_EXP 68
2113: PUSH
2114: LD_INT 1
2116: PLUS
2117: ARRAY
2118: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
2119: LD_ADDR_EXP 15
2123: PUSH
2124: LD_INT 0
2126: PUSH
2127: LD_INT 1
2129: PUSH
2130: LD_INT 63000
2132: PUSH
2133: LD_INT 126000
2135: PUSH
2136: LD_INT 189000
2138: PUSH
2139: LD_INT 252000
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: PUSH
2150: LD_EXP 70
2154: PUSH
2155: LD_INT 1
2157: PLUS
2158: ARRAY
2159: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
2160: LD_ADDR_EXP 11
2164: PUSH
2165: LD_INT 1
2167: NEG
2168: PUSH
2169: LD_INT 350
2171: PUSH
2172: LD_INT 700
2174: PUSH
2175: LD_INT 1400
2177: PUSH
2178: LD_INT 0
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: LIST
2187: PUSH
2188: LD_EXP 66
2192: PUSH
2193: LD_INT 1
2195: PLUS
2196: ARRAY
2197: ST_TO_ADDR
// battle_flags_id = [ ] ;
2198: LD_ADDR_EXP 29
2202: PUSH
2203: EMPTY
2204: ST_TO_ADDR
// if not def_builduptime then
2205: LD_EXP 71
2209: NOT
2210: IFFALSE 2215
// disable ( 600 ) ;
2212: LD_INT 600
2214: DISABLE_MARKED
// end ;
2215: LD_VAR 0 1
2219: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2220: LD_INT 0
2222: PPUSH
2223: PPUSH
2224: PPUSH
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
2225: LD_ADDR_EXP 20
2229: PUSH
2230: LD_EXP 16
2234: PUSH
2235: LD_INT 0
2237: PUSH
2238: EMPTY
2239: LIST
2240: DIFF
2241: PUSH
2242: LD_INT 1
2244: GREATER
2245: ST_TO_ADDR
// if not Team_Game then
2246: LD_EXP 20
2250: NOT
2251: IFFALSE 2349
// begin for i = 1 to 8 do
2253: LD_ADDR_VAR 0 2
2257: PUSH
2258: DOUBLE
2259: LD_INT 1
2261: DEC
2262: ST_TO_ADDR
2263: LD_INT 8
2265: PUSH
2266: FOR_TO
2267: IFFALSE 2345
// for j = 1 to 8 do
2269: LD_ADDR_VAR 0 3
2273: PUSH
2274: DOUBLE
2275: LD_INT 1
2277: DEC
2278: ST_TO_ADDR
2279: LD_INT 8
2281: PUSH
2282: FOR_TO
2283: IFFALSE 2341
// if i <> j then
2285: LD_VAR 0 2
2289: PUSH
2290: LD_VAR 0 3
2294: NONEQUAL
2295: IFFALSE 2319
// SetAttitude ( i , j , att_neutral , true ) else
2297: LD_VAR 0 2
2301: PPUSH
2302: LD_VAR 0 3
2306: PPUSH
2307: LD_INT 0
2309: PPUSH
2310: LD_INT 1
2312: PPUSH
2313: CALL_OW 80
2317: GO 2339
// SetAttitude ( i , j , att_friend , true ) ;
2319: LD_VAR 0 2
2323: PPUSH
2324: LD_VAR 0 3
2328: PPUSH
2329: LD_INT 1
2331: PPUSH
2332: LD_INT 1
2334: PPUSH
2335: CALL_OW 80
2339: GO 2282
2341: POP
2342: POP
2343: GO 2266
2345: POP
2346: POP
// end else
2347: GO 2524
// begin if def_shared_vision then
2349: LD_EXP 65
2353: IFFALSE 2418
// begin for i in Teams do
2355: LD_ADDR_VAR 0 2
2359: PUSH
2360: LD_EXP 17
2364: PUSH
2365: FOR_IN
2366: IFFALSE 2416
// for j = 2 to i do
2368: LD_ADDR_VAR 0 3
2372: PUSH
2373: DOUBLE
2374: LD_INT 2
2376: DEC
2377: ST_TO_ADDR
2378: LD_VAR 0 2
2382: PUSH
2383: FOR_TO
2384: IFFALSE 2412
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2386: LD_VAR 0 2
2390: PUSH
2391: LD_VAR 0 3
2395: ARRAY
2396: PPUSH
2397: LD_VAR 0 2
2401: PUSH
2402: LD_INT 1
2404: ARRAY
2405: PPUSH
2406: CALL_OW 343
2410: GO 2383
2412: POP
2413: POP
2414: GO 2365
2416: POP
2417: POP
// end ; for i = 1 to 8 do
2418: LD_ADDR_VAR 0 2
2422: PUSH
2423: DOUBLE
2424: LD_INT 1
2426: DEC
2427: ST_TO_ADDR
2428: LD_INT 8
2430: PUSH
2431: FOR_TO
2432: IFFALSE 2522
// for j = 1 to 8 do
2434: LD_ADDR_VAR 0 3
2438: PUSH
2439: DOUBLE
2440: LD_INT 1
2442: DEC
2443: ST_TO_ADDR
2444: LD_INT 8
2446: PUSH
2447: FOR_TO
2448: IFFALSE 2518
// if Side_Teams [ i ] = Side_Teams [ j ] then
2450: LD_EXP 16
2454: PUSH
2455: LD_VAR 0 2
2459: ARRAY
2460: PUSH
2461: LD_EXP 16
2465: PUSH
2466: LD_VAR 0 3
2470: ARRAY
2471: EQUAL
2472: IFFALSE 2496
// SetAttitude ( i , j , att_friend , true ) else
2474: LD_VAR 0 2
2478: PPUSH
2479: LD_VAR 0 3
2483: PPUSH
2484: LD_INT 1
2486: PPUSH
2487: LD_INT 1
2489: PPUSH
2490: CALL_OW 80
2494: GO 2516
// SetAttitude ( i , j , att_enemy , true ) ;
2496: LD_VAR 0 2
2500: PPUSH
2501: LD_VAR 0 3
2505: PPUSH
2506: LD_INT 2
2508: PPUSH
2509: LD_INT 1
2511: PPUSH
2512: CALL_OW 80
2516: GO 2447
2518: POP
2519: POP
2520: GO 2431
2522: POP
2523: POP
// end ; end ;
2524: LD_VAR 0 1
2528: RET
// function prepare_people ( count , cl , x , y , r ) ; var i , j , un ; begin
2529: LD_INT 0
2531: PPUSH
2532: PPUSH
2533: PPUSH
2534: PPUSH
// result := [ ] ;
2535: LD_ADDR_VAR 0 6
2539: PUSH
2540: EMPTY
2541: ST_TO_ADDR
// for i := 1 to count do
2542: LD_ADDR_VAR 0 7
2546: PUSH
2547: DOUBLE
2548: LD_INT 1
2550: DEC
2551: ST_TO_ADDR
2552: LD_VAR 0 1
2556: PUSH
2557: FOR_TO
2558: IFFALSE 2954
// begin uc_direction := Rand ( 0 , 5 ) ;
2560: LD_ADDR_OWVAR 24
2564: PUSH
2565: LD_INT 0
2567: PPUSH
2568: LD_INT 5
2570: PPUSH
2571: CALL_OW 12
2575: ST_TO_ADDR
// if commander then
2576: LD_LOC 1
2580: IFFALSE 2689
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2582: LD_ADDR_OWVAR 26
2586: PUSH
2587: LD_OWVAR 19
2591: PUSH
2592: LD_OWVAR 20
2596: ARRAY
2597: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2598: LD_INT 1
2600: PPUSH
2601: LD_INT 2
2603: PPUSH
2604: CALL_OW 12
2608: PPUSH
2609: LD_VAR 0 2
2613: PPUSH
2614: LD_EXP 7
2618: PUSH
2619: LD_INT 2
2621: PLUS
2622: PPUSH
2623: CALL_OW 380
// hc_importance := 105 ;
2627: LD_ADDR_OWVAR 32
2631: PUSH
2632: LD_INT 105
2634: ST_TO_ADDR
// commander := false ;
2635: LD_ADDR_LOC 1
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if Multiplayer then
2643: LD_OWVAR 4
2647: IFFALSE 2687
// begin hc_gallery := MULTIAVATARS ;
2649: LD_ADDR_OWVAR 33
2653: PUSH
2654: LD_STRING MULTIAVATARS
2656: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2657: LD_ADDR_OWVAR 34
2661: PUSH
2662: LD_OWVAR 20
2666: PPUSH
2667: CALL_OW 525
2671: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2672: LD_ADDR_OWVAR 27
2676: PUSH
2677: LD_OWVAR 20
2681: PPUSH
2682: CALL_OW 526
2686: ST_TO_ADDR
// end ; end else
2687: GO 2752
// begin hc_name :=  ;
2689: LD_ADDR_OWVAR 26
2693: PUSH
2694: LD_STRING 
2696: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2697: LD_INT 1
2699: PPUSH
2700: LD_INT 2
2702: PPUSH
2703: CALL_OW 12
2707: PPUSH
2708: LD_VAR 0 2
2712: PPUSH
2713: LD_EXP 7
2717: PPUSH
2718: CALL_OW 380
// hc_importance := 0 ;
2722: LD_ADDR_OWVAR 32
2726: PUSH
2727: LD_INT 0
2729: ST_TO_ADDR
// if Multiplayer then
2730: LD_OWVAR 4
2734: IFFALSE 2752
// begin hc_gallery :=  ;
2736: LD_ADDR_OWVAR 33
2740: PUSH
2741: LD_STRING 
2743: ST_TO_ADDR
// hc_face_number := 0 ;
2744: LD_ADDR_OWVAR 34
2748: PUSH
2749: LD_INT 0
2751: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2752: LD_ADDR_VAR 0 9
2756: PUSH
2757: CALL_OW 44
2761: ST_TO_ADDR
// if global_defined then
2762: LD_LOC 3
2766: IFFALSE 2906
// begin if ( cl = class_soldier ) then
2768: LD_VAR 0 2
2772: PUSH
2773: LD_INT 1
2775: EQUAL
2776: IFFALSE 2796
// j := i + soldiers_created else
2778: LD_ADDR_VAR 0 8
2782: PUSH
2783: LD_VAR 0 7
2787: PUSH
2788: LD_LOC 4
2792: PLUS
2793: ST_TO_ADDR
2794: GO 2806
// j := i ;
2796: LD_ADDR_VAR 0 8
2800: PUSH
2801: LD_VAR 0 7
2805: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2806: LD_LOC 2
2810: PUSH
2811: LD_VAR 0 2
2815: ARRAY
2816: PUSH
2817: LD_VAR 0 8
2821: ARRAY
2822: PPUSH
2823: LD_VAR 0 9
2827: PPUSH
2828: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2832: LD_VAR 0 9
2836: PPUSH
2837: LD_INT 2
2839: PPUSH
2840: LD_LOC 2
2844: PUSH
2845: LD_VAR 0 2
2849: ARRAY
2850: PUSH
2851: LD_VAR 0 8
2855: ARRAY
2856: PPUSH
2857: LD_INT 2
2859: PPUSH
2860: CALL_OW 260
2864: PPUSH
2865: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2869: LD_VAR 0 9
2873: PPUSH
2874: LD_INT 1
2876: PPUSH
2877: LD_LOC 2
2881: PUSH
2882: LD_VAR 0 2
2886: ARRAY
2887: PUSH
2888: LD_VAR 0 8
2892: ARRAY
2893: PPUSH
2894: LD_INT 1
2896: PPUSH
2897: CALL_OW 260
2901: PPUSH
2902: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2906: LD_VAR 0 9
2910: PPUSH
2911: LD_VAR 0 3
2915: PPUSH
2916: LD_VAR 0 4
2920: PPUSH
2921: LD_VAR 0 5
2925: PPUSH
2926: LD_INT 0
2928: PPUSH
2929: CALL_OW 50
// result := result ^ [ un ] ;
2933: LD_ADDR_VAR 0 6
2937: PUSH
2938: LD_VAR 0 6
2942: PUSH
2943: LD_VAR 0 9
2947: PUSH
2948: EMPTY
2949: LIST
2950: ADD
2951: ST_TO_ADDR
// end ;
2952: GO 2557
2954: POP
2955: POP
// if not global_defined then
2956: LD_LOC 3
2960: NOT
2961: IFFALSE 3039
// if ( global_units >= cl ) then
2963: LD_LOC 2
2967: PUSH
2968: LD_VAR 0 2
2972: GREATEREQUAL
2973: IFFALSE 3014
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2975: LD_ADDR_LOC 2
2979: PUSH
2980: LD_LOC 2
2984: PPUSH
2985: LD_VAR 0 2
2989: PPUSH
2990: LD_LOC 2
2994: PUSH
2995: LD_VAR 0 2
2999: ARRAY
3000: PUSH
3001: LD_VAR 0 6
3005: ADD
3006: PPUSH
3007: CALL_OW 1
3011: ST_TO_ADDR
3012: GO 3039
// global_units := Replace ( global_units , cl , result ) ;
3014: LD_ADDR_LOC 2
3018: PUSH
3019: LD_LOC 2
3023: PPUSH
3024: LD_VAR 0 2
3028: PPUSH
3029: LD_VAR 0 6
3033: PPUSH
3034: CALL_OW 1
3038: ST_TO_ADDR
// end ;
3039: LD_VAR 0 6
3043: RET
// function prepare_side ( side , pos , nation ) ; var x , y , dir , i , r , sol , br , dep ; begin
3044: LD_INT 0
3046: PPUSH
3047: PPUSH
3048: PPUSH
3049: PPUSH
3050: PPUSH
3051: PPUSH
3052: PPUSH
3053: PPUSH
3054: PPUSH
// if side in [ 0 , 9 ] then
3055: LD_VAR 0 1
3059: PUSH
3060: LD_INT 0
3062: PUSH
3063: LD_INT 9
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: IN
3070: IFFALSE 3074
// exit ;
3072: GO 4329
// uc_nation := nation ;
3074: LD_ADDR_OWVAR 21
3078: PUSH
3079: LD_VAR 0 3
3083: ST_TO_ADDR
// uc_side := side ;
3084: LD_ADDR_OWVAR 20
3088: PUSH
3089: LD_VAR 0 1
3093: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3094: LD_ADDR_VAR 0 5
3098: PUSH
3099: LD_EXP 22
3103: PUSH
3104: LD_VAR 0 2
3108: ARRAY
3109: PUSH
3110: LD_INT 1
3112: ARRAY
3113: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3114: LD_ADDR_VAR 0 6
3118: PUSH
3119: LD_EXP 22
3123: PUSH
3124: LD_VAR 0 2
3128: ARRAY
3129: PUSH
3130: LD_INT 2
3132: ARRAY
3133: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3134: LD_ADDR_VAR 0 7
3138: PUSH
3139: LD_EXP 22
3143: PUSH
3144: LD_VAR 0 2
3148: ARRAY
3149: PUSH
3150: LD_INT 3
3152: ARRAY
3153: ST_TO_ADDR
// if is_depot then
3154: LD_EXP 4
3158: IFFALSE 3291
// begin bc_type = b_depot ;
3160: LD_ADDR_OWVAR 42
3164: PUSH
3165: LD_INT 0
3167: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3168: LD_ADDR_VAR 0 12
3172: PUSH
3173: LD_VAR 0 5
3177: PPUSH
3178: LD_VAR 0 6
3182: PPUSH
3183: LD_VAR 0 7
3187: PPUSH
3188: CALL_OW 47
3192: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3193: LD_VAR 0 12
3197: PPUSH
3198: LD_STRING @
3200: PUSH
3201: LD_VAR 0 1
3205: STR
3206: PPUSH
3207: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3211: LD_VAR 0 12
3215: PPUSH
3216: CALL_OW 274
3220: PPUSH
3221: LD_INT 1
3223: PPUSH
3224: LD_EXP 9
3228: PUSH
3229: LD_INT 1
3231: ARRAY
3232: PPUSH
3233: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3237: LD_VAR 0 12
3241: PPUSH
3242: CALL_OW 274
3246: PPUSH
3247: LD_INT 2
3249: PPUSH
3250: LD_EXP 9
3254: PUSH
3255: LD_INT 2
3257: ARRAY
3258: PPUSH
3259: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3263: LD_VAR 0 12
3267: PPUSH
3268: CALL_OW 274
3272: PPUSH
3273: LD_INT 3
3275: PPUSH
3276: LD_EXP 9
3280: PUSH
3281: LD_INT 3
3283: ARRAY
3284: PPUSH
3285: CALL_OW 277
// end else
3289: GO 3435
// begin for i := 1 to 3 do
3291: LD_ADDR_VAR 0 8
3295: PUSH
3296: DOUBLE
3297: LD_INT 1
3299: DEC
3300: ST_TO_ADDR
3301: LD_INT 3
3303: PUSH
3304: FOR_TO
3305: IFFALSE 3433
// begin r := starting_resources [ i ] ;
3307: LD_ADDR_VAR 0 9
3311: PUSH
3312: LD_EXP 9
3316: PUSH
3317: LD_VAR 0 8
3321: ARRAY
3322: ST_TO_ADDR
// while r >= 10 do
3323: LD_VAR 0 9
3327: PUSH
3328: LD_INT 10
3330: GREATEREQUAL
3331: IFFALSE 3431
// if r > 50 then
3333: LD_VAR 0 9
3337: PUSH
3338: LD_INT 50
3340: GREATER
3341: IFFALSE 3387
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3343: LD_VAR 0 8
3347: PPUSH
3348: LD_INT 5
3350: PPUSH
3351: LD_VAR 0 5
3355: PPUSH
3356: LD_VAR 0 6
3360: PPUSH
3361: LD_INT 4
3363: PPUSH
3364: LD_INT 0
3366: PPUSH
3367: CALL_OW 60
// r := r - 50 ;
3371: LD_ADDR_VAR 0 9
3375: PUSH
3376: LD_VAR 0 9
3380: PUSH
3381: LD_INT 50
3383: MINUS
3384: ST_TO_ADDR
// end else
3385: GO 3429
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3387: LD_VAR 0 8
3391: PPUSH
3392: LD_VAR 0 9
3396: PUSH
3397: LD_INT 10
3399: DIV
3400: PPUSH
3401: LD_VAR 0 5
3405: PPUSH
3406: LD_VAR 0 6
3410: PPUSH
3411: LD_INT 4
3413: PPUSH
3414: LD_INT 0
3416: PPUSH
3417: CALL_OW 60
// r := 0 ;
3421: LD_ADDR_VAR 0 9
3425: PUSH
3426: LD_INT 0
3428: ST_TO_ADDR
// end ;
3429: GO 3323
// end ;
3431: GO 3304
3433: POP
3434: POP
// end ; if def_base_size > 0 then
3435: LD_EXP 1
3439: PUSH
3440: LD_INT 0
3442: GREATER
3443: IFFALSE 3518
// begin bc_kind1 := b_lab_basic ;
3445: LD_ADDR_OWVAR 44
3449: PUSH
3450: LD_INT 9
3452: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
3453: LD_ADDR_OWVAR 45
3457: PUSH
3458: LD_INT 9
3460: ST_TO_ADDR
// bc_type := b_lab ;
3461: LD_ADDR_OWVAR 42
3465: PUSH
3466: LD_INT 6
3468: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( labs_def [ pos ] [ 1 ] , labs_def [ pos ] [ 2 ] , labs_def [ pos ] [ 3 ] ) ;
3469: LD_EXP 24
3473: PUSH
3474: LD_VAR 0 2
3478: ARRAY
3479: PUSH
3480: LD_INT 1
3482: ARRAY
3483: PPUSH
3484: LD_EXP 24
3488: PUSH
3489: LD_VAR 0 2
3493: ARRAY
3494: PUSH
3495: LD_INT 2
3497: ARRAY
3498: PPUSH
3499: LD_EXP 24
3503: PUSH
3504: LD_VAR 0 2
3508: ARRAY
3509: PUSH
3510: LD_INT 3
3512: ARRAY
3513: PPUSH
3514: CALL_OW 47
// end ; if def_base_size > 1 then
3518: LD_EXP 1
3522: PUSH
3523: LD_INT 1
3525: GREATER
3526: IFFALSE 3585
// begin bc_type := b_workshop ;
3528: LD_ADDR_OWVAR 42
3532: PUSH
3533: LD_INT 2
3535: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( factory_def [ pos ] [ 1 ] , factory_def [ pos ] [ 2 ] , factory_def [ pos ] [ 3 ] ) ;
3536: LD_EXP 25
3540: PUSH
3541: LD_VAR 0 2
3545: ARRAY
3546: PUSH
3547: LD_INT 1
3549: ARRAY
3550: PPUSH
3551: LD_EXP 25
3555: PUSH
3556: LD_VAR 0 2
3560: ARRAY
3561: PUSH
3562: LD_INT 2
3564: ARRAY
3565: PPUSH
3566: LD_EXP 25
3570: PUSH
3571: LD_VAR 0 2
3575: ARRAY
3576: PUSH
3577: LD_INT 3
3579: ARRAY
3580: PPUSH
3581: CALL_OW 47
// end ; for r in starting_crates do
3585: LD_ADDR_VAR 0 9
3589: PUSH
3590: LD_EXP 8
3594: PUSH
3595: FOR_IN
3596: IFFALSE 3628
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3598: LD_INT 1
3600: PPUSH
3601: LD_INT 5
3603: PPUSH
3604: LD_VAR 0 5
3608: PPUSH
3609: LD_VAR 0 6
3613: PPUSH
3614: LD_VAR 0 9
3618: PPUSH
3619: LD_INT 0
3621: PPUSH
3622: CALL_OW 60
3626: GO 3595
3628: POP
3629: POP
// if def_morale_flags then
3630: LD_EXP 66
3634: IFFALSE 3773
// begin x := start_def [ pos ] [ 1 ] ;
3636: LD_ADDR_VAR 0 5
3640: PUSH
3641: LD_EXP 26
3645: PUSH
3646: LD_VAR 0 2
3650: ARRAY
3651: PUSH
3652: LD_INT 1
3654: ARRAY
3655: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3656: LD_ADDR_VAR 0 6
3660: PUSH
3661: LD_EXP 26
3665: PUSH
3666: LD_VAR 0 2
3670: ARRAY
3671: PUSH
3672: LD_INT 2
3674: ARRAY
3675: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3676: LD_VAR 0 5
3680: PPUSH
3681: LD_VAR 0 6
3685: PPUSH
3686: LD_INT 12
3688: PPUSH
3689: LD_INT 2
3691: PPUSH
3692: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3696: LD_ADDR_EXP 29
3700: PUSH
3701: LD_EXP 29
3705: PUSH
3706: LD_VAR 0 1
3710: PPUSH
3711: LD_VAR 0 5
3715: PPUSH
3716: LD_VAR 0 6
3720: PPUSH
3721: LD_INT 1
3723: PUSH
3724: LD_INT 100
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: PUSH
3731: LD_INT 2
3733: PUSH
3734: LD_INT 50
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: PUSH
3741: LD_INT 3
3743: PUSH
3744: LD_INT 20
3746: PUSH
3747: EMPTY
3748: LIST
3749: LIST
3750: PUSH
3751: LD_INT 20
3753: PUSH
3754: LD_INT 100
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: LIST
3765: LIST
3766: PPUSH
3767: CALL_OW 418
3771: ADD
3772: ST_TO_ADDR
// end ; commander := true ;
3773: LD_ADDR_LOC 1
3777: PUSH
3778: LD_INT 1
3780: ST_TO_ADDR
// soldiers_created := 0 ;
3781: LD_ADDR_LOC 4
3785: PUSH
3786: LD_INT 0
3788: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3789: LD_ADDR_VAR 0 8
3793: PUSH
3794: DOUBLE
3795: LD_INT 1
3797: DEC
3798: ST_TO_ADDR
3799: LD_EXP 5
3803: PUSH
3804: FOR_TO
3805: IFFALSE 4047
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3807: LD_ADDR_VAR 0 5
3811: PUSH
3812: LD_EXP 23
3816: PUSH
3817: LD_VAR 0 2
3821: ARRAY
3822: PUSH
3823: LD_VAR 0 8
3827: ARRAY
3828: PUSH
3829: LD_INT 1
3831: ARRAY
3832: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3833: LD_ADDR_VAR 0 6
3837: PUSH
3838: LD_EXP 23
3842: PUSH
3843: LD_VAR 0 2
3847: ARRAY
3848: PUSH
3849: LD_VAR 0 8
3853: ARRAY
3854: PUSH
3855: LD_INT 2
3857: ARRAY
3858: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3859: LD_ADDR_VAR 0 7
3863: PUSH
3864: LD_EXP 23
3868: PUSH
3869: LD_VAR 0 2
3873: ARRAY
3874: PUSH
3875: LD_VAR 0 8
3879: ARRAY
3880: PUSH
3881: LD_INT 3
3883: ARRAY
3884: ST_TO_ADDR
// if i < 4 then
3885: LD_VAR 0 8
3889: PUSH
3890: LD_INT 4
3892: LESS
3893: IFFALSE 3905
// bc_type := b_breastwork else
3895: LD_ADDR_OWVAR 42
3899: PUSH
3900: LD_INT 31
3902: ST_TO_ADDR
3903: GO 3913
// bc_type := b_armoury ;
3905: LD_ADDR_OWVAR 42
3909: PUSH
3910: LD_INT 4
3912: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3913: LD_ADDR_VAR 0 11
3917: PUSH
3918: LD_VAR 0 5
3922: PPUSH
3923: LD_VAR 0 6
3927: PPUSH
3928: LD_VAR 0 7
3932: PPUSH
3933: CALL_OW 47
3937: ST_TO_ADDR
// x := ShiftX ( x , dir , 2 ) ;
3938: LD_ADDR_VAR 0 5
3942: PUSH
3943: LD_VAR 0 5
3947: PPUSH
3948: LD_VAR 0 7
3952: PPUSH
3953: LD_INT 2
3955: PPUSH
3956: CALL_OW 272
3960: ST_TO_ADDR
// y := ShiftY ( y , dir , 2 ) ;
3961: LD_ADDR_VAR 0 6
3965: PUSH
3966: LD_VAR 0 6
3970: PPUSH
3971: LD_VAR 0 7
3975: PPUSH
3976: LD_INT 2
3978: PPUSH
3979: CALL_OW 273
3983: ST_TO_ADDR
// sol := prepare_people ( 1 , class_soldier , x , y , 0 ) [ 1 ] ;
3984: LD_ADDR_VAR 0 10
3988: PUSH
3989: LD_INT 1
3991: PPUSH
3992: LD_INT 1
3994: PPUSH
3995: LD_VAR 0 5
3999: PPUSH
4000: LD_VAR 0 6
4004: PPUSH
4005: LD_INT 0
4007: PPUSH
4008: CALL 2529 0 5
4012: PUSH
4013: LD_INT 1
4015: ARRAY
4016: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
4017: LD_ADDR_LOC 4
4021: PUSH
4022: LD_LOC 4
4026: PUSH
4027: LD_INT 1
4029: PLUS
4030: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
4031: LD_VAR 0 10
4035: PPUSH
4036: LD_VAR 0 11
4040: PPUSH
4041: CALL_OW 120
// end ;
4045: GO 3804
4047: POP
4048: POP
// x := start_def [ pos ] [ 1 ] ;
4049: LD_ADDR_VAR 0 5
4053: PUSH
4054: LD_EXP 26
4058: PUSH
4059: LD_VAR 0 2
4063: ARRAY
4064: PUSH
4065: LD_INT 1
4067: ARRAY
4068: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4069: LD_ADDR_VAR 0 6
4073: PUSH
4074: LD_EXP 26
4078: PUSH
4079: LD_VAR 0 2
4083: ARRAY
4084: PUSH
4085: LD_INT 2
4087: ARRAY
4088: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 ) ;
4089: LD_LOC 8
4093: PUSH
4094: LD_EXP 5
4098: MINUS
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_VAR 0 5
4107: PPUSH
4108: LD_VAR 0 6
4112: PPUSH
4113: LD_INT 5
4115: PPUSH
4116: CALL 2529 0 5
// prepare_people ( neng , class_engineer , x , y , 5 ) ;
4120: LD_LOC 5
4124: PPUSH
4125: LD_INT 2
4127: PPUSH
4128: LD_VAR 0 5
4132: PPUSH
4133: LD_VAR 0 6
4137: PPUSH
4138: LD_INT 5
4140: PPUSH
4141: CALL 2529 0 5
// prepare_people ( nmech , class_mechanic , x , y , 5 ) ;
4145: LD_LOC 7
4149: PPUSH
4150: LD_INT 3
4152: PPUSH
4153: LD_VAR 0 5
4157: PPUSH
4158: LD_VAR 0 6
4162: PPUSH
4163: LD_INT 5
4165: PPUSH
4166: CALL 2529 0 5
// prepare_people ( nsci , class_scientistic , x , y , 5 ) ;
4170: LD_LOC 6
4174: PPUSH
4175: LD_INT 4
4177: PPUSH
4178: LD_VAR 0 5
4182: PPUSH
4183: LD_VAR 0 6
4187: PPUSH
4188: LD_INT 5
4190: PPUSH
4191: CALL 2529 0 5
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4195: LD_EXP 67
4199: PUSH
4200: LD_INT 20
4202: PPUSH
4203: LD_VAR 0 1
4207: PPUSH
4208: CALL_OW 321
4212: PUSH
4213: LD_INT 1
4215: EQUAL
4216: AND
4217: IFFALSE 4234
// SetTech ( tech_SibDet , side , state_researched ) ;
4219: LD_INT 20
4221: PPUSH
4222: LD_VAR 0 1
4226: PPUSH
4227: LD_INT 2
4229: PPUSH
4230: CALL_OW 322
// if def_siberite_bomb = 1 then
4234: LD_EXP 70
4238: PUSH
4239: LD_INT 1
4241: EQUAL
4242: IFFALSE 4276
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4244: LD_INT 25
4246: PPUSH
4247: LD_VAR 0 1
4251: PPUSH
4252: LD_INT 1
4254: PPUSH
4255: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4259: LD_INT 73
4261: PPUSH
4262: LD_VAR 0 1
4266: PPUSH
4267: LD_INT 1
4269: PPUSH
4270: CALL_OW 322
// end else
4274: GO 4306
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4276: LD_INT 25
4278: PPUSH
4279: LD_VAR 0 1
4283: PPUSH
4284: LD_INT 0
4286: PPUSH
4287: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4291: LD_INT 73
4293: PPUSH
4294: LD_VAR 0 1
4298: PPUSH
4299: LD_INT 0
4301: PPUSH
4302: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4306: LD_INT 24
4308: PPUSH
4309: LD_VAR 0 1
4313: PPUSH
4314: LD_INT 0
4316: PPUSH
4317: CALL_OW 322
// global_defined := true ;
4321: LD_ADDR_LOC 3
4325: PUSH
4326: LD_INT 1
4328: ST_TO_ADDR
// end ;
4329: LD_VAR 0 4
4333: RET
// every 0 0$1 do
4334: GO 4336
4336: DISABLE
// if ( def_siberite_bomb > 1 ) then
4337: LD_EXP 70
4341: PUSH
4342: LD_INT 1
4344: GREATER
4345: IFFALSE 4360
// begin wait ( siberite_bomb_Delay ) ;
4347: LD_EXP 15
4351: PPUSH
4352: CALL_OW 67
// EnableSibFiss ;
4356: CALL 4361 0 0
// end ;
4360: END
// function EnableSibFiss ; var i ; begin
4361: LD_INT 0
4363: PPUSH
4364: PPUSH
// for i := 1 to 8 do
4365: LD_ADDR_VAR 0 2
4369: PUSH
4370: DOUBLE
4371: LD_INT 1
4373: DEC
4374: ST_TO_ADDR
4375: LD_INT 8
4377: PUSH
4378: FOR_TO
4379: IFFALSE 4425
// if Side_Positions [ i ] then
4381: LD_EXP 18
4385: PUSH
4386: LD_VAR 0 2
4390: ARRAY
4391: IFFALSE 4423
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4393: LD_INT 25
4395: PPUSH
4396: LD_VAR 0 2
4400: PPUSH
4401: LD_INT 1
4403: PPUSH
4404: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4408: LD_INT 73
4410: PPUSH
4411: LD_VAR 0 2
4415: PPUSH
4416: LD_INT 1
4418: PPUSH
4419: CALL_OW 322
// end ;
4423: GO 4378
4425: POP
4426: POP
// end ;
4427: LD_VAR 0 1
4431: RET
// function prepare_sides ; var i , orig , pos ; begin
4432: LD_INT 0
4434: PPUSH
4435: PPUSH
4436: PPUSH
4437: PPUSH
// global_units := [ ] ;
4438: LD_ADDR_LOC 2
4442: PUSH
4443: EMPTY
4444: ST_TO_ADDR
// global_defined := false ;
4445: LD_ADDR_LOC 3
4449: PUSH
4450: LD_INT 0
4452: ST_TO_ADDR
// CountClassMembers ;
4453: CALL 4972 0 0
// for i := 1 to 8 do
4457: LD_ADDR_VAR 0 2
4461: PUSH
4462: DOUBLE
4463: LD_INT 1
4465: DEC
4466: ST_TO_ADDR
4467: LD_INT 8
4469: PUSH
4470: FOR_TO
4471: IFFALSE 4671
// if Side_Positions [ i ] then
4473: LD_EXP 18
4477: PUSH
4478: LD_VAR 0 2
4482: ARRAY
4483: IFFALSE 4669
// begin pos := Side_Positions [ i ] ;
4485: LD_ADDR_VAR 0 4
4489: PUSH
4490: LD_EXP 18
4494: PUSH
4495: LD_VAR 0 2
4499: ARRAY
4500: ST_TO_ADDR
// if Game_Type in [ 2 , 12 ] then
4501: LD_EXP 56
4505: PUSH
4506: LD_INT 2
4508: PUSH
4509: LD_INT 12
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: IN
4516: IFFALSE 4644
// begin if Game_Type = 12 then
4518: LD_EXP 56
4522: PUSH
4523: LD_INT 12
4525: EQUAL
4526: IFFALSE 4588
// begin prepare_side ( i , pos , Position_Nations [ pos ] ) ;
4528: LD_VAR 0 2
4532: PPUSH
4533: LD_VAR 0 4
4537: PPUSH
4538: LD_EXP 21
4542: PUSH
4543: LD_VAR 0 4
4547: ARRAY
4548: PPUSH
4549: CALL 3044 0 3
// prepare_side ( i , pos + 1 , Position_Nations [ pos + 1 ] ) end else
4553: LD_VAR 0 2
4557: PPUSH
4558: LD_VAR 0 4
4562: PUSH
4563: LD_INT 1
4565: PLUS
4566: PPUSH
4567: LD_EXP 21
4571: PUSH
4572: LD_VAR 0 4
4576: PUSH
4577: LD_INT 1
4579: PLUS
4580: ARRAY
4581: PPUSH
4582: CALL 3044 0 3
4586: GO 4642
// begin prepare_side ( i , pos , Side_Nations [ i ] ) ;
4588: LD_VAR 0 2
4592: PPUSH
4593: LD_VAR 0 4
4597: PPUSH
4598: LD_EXP 19
4602: PUSH
4603: LD_VAR 0 2
4607: ARRAY
4608: PPUSH
4609: CALL 3044 0 3
// prepare_side ( i , pos + 1 , Side_Nations [ i ] ) ;
4613: LD_VAR 0 2
4617: PPUSH
4618: LD_VAR 0 4
4622: PUSH
4623: LD_INT 1
4625: PLUS
4626: PPUSH
4627: LD_EXP 19
4631: PUSH
4632: LD_VAR 0 2
4636: ARRAY
4637: PPUSH
4638: CALL 3044 0 3
// end ; end else
4642: GO 4669
// prepare_side ( i , pos , Side_Nations [ i ] ) ;
4644: LD_VAR 0 2
4648: PPUSH
4649: LD_VAR 0 4
4653: PPUSH
4654: LD_EXP 19
4658: PUSH
4659: LD_VAR 0 2
4663: ARRAY
4664: PPUSH
4665: CALL 3044 0 3
// end ;
4669: GO 4470
4671: POP
4672: POP
// end ;
4673: LD_VAR 0 1
4677: RET
// function Modify_Nations ; var list , west , east , i ; begin
4678: LD_INT 0
4680: PPUSH
4681: PPUSH
4682: PPUSH
4683: PPUSH
4684: PPUSH
// list := [ ] ;
4685: LD_ADDR_VAR 0 2
4689: PUSH
4690: EMPTY
4691: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
4692: LD_ADDR_VAR 0 5
4696: PUSH
4697: DOUBLE
4698: LD_INT 1
4700: DEC
4701: ST_TO_ADDR
4702: LD_EXP 18
4706: PUSH
4707: LD_INT 0
4709: PLUS
4710: PUSH
4711: FOR_TO
4712: IFFALSE 4930
// if side_positions [ i ] = 1 then
4714: LD_EXP 18
4718: PUSH
4719: LD_VAR 0 5
4723: ARRAY
4724: PUSH
4725: LD_INT 1
4727: EQUAL
4728: IFFALSE 4822
// case side_nations [ i ] of 1 :
4730: LD_EXP 19
4734: PUSH
4735: LD_VAR 0 5
4739: ARRAY
4740: PUSH
4741: LD_INT 1
4743: DOUBLE
4744: EQUAL
4745: IFTRUE 4749
4747: GO 4767
4749: POP
// west := [ 1 , 2 ] ; 2 :
4750: LD_ADDR_VAR 0 3
4754: PUSH
4755: LD_INT 1
4757: PUSH
4758: LD_INT 2
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: ST_TO_ADDR
4765: GO 4820
4767: LD_INT 2
4769: DOUBLE
4770: EQUAL
4771: IFTRUE 4775
4773: GO 4793
4775: POP
// west := [ 2 , 3 ] ; 3 :
4776: LD_ADDR_VAR 0 3
4780: PUSH
4781: LD_INT 2
4783: PUSH
4784: LD_INT 3
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: ST_TO_ADDR
4791: GO 4820
4793: LD_INT 3
4795: DOUBLE
4796: EQUAL
4797: IFTRUE 4801
4799: GO 4819
4801: POP
// west := [ 3 , 1 ] ; end else
4802: LD_ADDR_VAR 0 3
4806: PUSH
4807: LD_INT 3
4809: PUSH
4810: LD_INT 1
4812: PUSH
4813: EMPTY
4814: LIST
4815: LIST
4816: ST_TO_ADDR
4817: GO 4820
4819: POP
4820: GO 4928
// if side_positions [ i ] = 3 then
4822: LD_EXP 18
4826: PUSH
4827: LD_VAR 0 5
4831: ARRAY
4832: PUSH
4833: LD_INT 3
4835: EQUAL
4836: IFFALSE 4928
// case side_nations [ i ] of 1 :
4838: LD_EXP 19
4842: PUSH
4843: LD_VAR 0 5
4847: ARRAY
4848: PUSH
4849: LD_INT 1
4851: DOUBLE
4852: EQUAL
4853: IFTRUE 4857
4855: GO 4875
4857: POP
// east := [ 1 , 2 ] ; 2 :
4858: LD_ADDR_VAR 0 4
4862: PUSH
4863: LD_INT 1
4865: PUSH
4866: LD_INT 2
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: ST_TO_ADDR
4873: GO 4928
4875: LD_INT 2
4877: DOUBLE
4878: EQUAL
4879: IFTRUE 4883
4881: GO 4901
4883: POP
// east := [ 2 , 3 ] ; 3 :
4884: LD_ADDR_VAR 0 4
4888: PUSH
4889: LD_INT 2
4891: PUSH
4892: LD_INT 3
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: ST_TO_ADDR
4899: GO 4928
4901: LD_INT 3
4903: DOUBLE
4904: EQUAL
4905: IFTRUE 4909
4907: GO 4927
4909: POP
// east := [ 3 , 1 ] ; end ;
4910: LD_ADDR_VAR 0 4
4914: PUSH
4915: LD_INT 3
4917: PUSH
4918: LD_INT 1
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: ST_TO_ADDR
4925: GO 4928
4927: POP
4928: GO 4711
4930: POP
4931: POP
// Position_Nations := west ^ east ^ [ 0 , 0 , 0 , 0 ] ;
4932: LD_ADDR_EXP 21
4936: PUSH
4937: LD_VAR 0 3
4941: PUSH
4942: LD_VAR 0 4
4946: ADD
4947: PUSH
4948: LD_INT 0
4950: PUSH
4951: LD_INT 0
4953: PUSH
4954: LD_INT 0
4956: PUSH
4957: LD_INT 0
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: LIST
4964: LIST
4965: ADD
4966: ST_TO_ADDR
// end ;
4967: LD_VAR 0 1
4971: RET
// function CountClassMembers ; var Mode ; begin
4972: LD_INT 0
4974: PPUSH
4975: PPUSH
// if No_Mechs then
4976: LD_EXP 72
4980: IFFALSE 4992
// Mode := 2 else
4982: LD_ADDR_VAR 0 2
4986: PUSH
4987: LD_INT 2
4989: ST_TO_ADDR
4990: GO 5000
// Mode := 1 ;
4992: LD_ADDR_VAR 0 2
4996: PUSH
4997: LD_INT 1
4999: ST_TO_ADDR
// neng := number_of_people ;
5000: LD_ADDR_LOC 5
5004: PUSH
5005: LD_EXP 6
5009: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
5010: LD_ADDR_LOC 8
5014: PUSH
5015: LD_LOC 5
5019: PUSH
5020: LD_INT 4
5022: PUSH
5023: LD_INT 3
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PUSH
5030: LD_VAR 0 2
5034: ARRAY
5035: DIV
5036: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
5037: LD_LOC 8
5041: PUSH
5042: LD_EXP 5
5046: LESS
5047: IFFALSE 5059
// nsol := number_of_breastworks ;
5049: LD_ADDR_LOC 8
5053: PUSH
5054: LD_EXP 5
5058: ST_TO_ADDR
// neng := neng - nsol ;
5059: LD_ADDR_LOC 5
5063: PUSH
5064: LD_LOC 5
5068: PUSH
5069: LD_LOC 8
5073: MINUS
5074: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
5075: LD_ADDR_LOC 6
5079: PUSH
5080: LD_LOC 5
5084: PUSH
5085: LD_INT 3
5087: PUSH
5088: LD_INT 2
5090: PUSH
5091: EMPTY
5092: LIST
5093: LIST
5094: PUSH
5095: LD_VAR 0 2
5099: ARRAY
5100: DIV
5101: ST_TO_ADDR
// if ( nsci < 1 ) then
5102: LD_LOC 6
5106: PUSH
5107: LD_INT 1
5109: LESS
5110: IFFALSE 5120
// nsci := 1 ;
5112: LD_ADDR_LOC 6
5116: PUSH
5117: LD_INT 1
5119: ST_TO_ADDR
// neng := neng - nsci ;
5120: LD_ADDR_LOC 5
5124: PUSH
5125: LD_LOC 5
5129: PUSH
5130: LD_LOC 6
5134: MINUS
5135: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5136: LD_ADDR_LOC 7
5140: PUSH
5141: LD_LOC 5
5145: PUSH
5146: LD_INT 2
5148: DIV
5149: PUSH
5150: LD_INT 0
5152: PUSH
5153: EMPTY
5154: LIST
5155: LIST
5156: PUSH
5157: LD_VAR 0 2
5161: ARRAY
5162: ST_TO_ADDR
// neng := neng - nmech ;
5163: LD_ADDR_LOC 5
5167: PUSH
5168: LD_LOC 5
5172: PUSH
5173: LD_LOC 7
5177: MINUS
5178: ST_TO_ADDR
// if ( neng < 1 ) then
5179: LD_LOC 5
5183: PUSH
5184: LD_INT 1
5186: LESS
5187: IFFALSE 5197
// neng := 1 ;
5189: LD_ADDR_LOC 5
5193: PUSH
5194: LD_INT 1
5196: ST_TO_ADDR
// end ;
5197: LD_VAR 0 1
5201: RET
// function Init_Win_Condition ; begin
5202: LD_INT 0
5204: PPUSH
// disable ( 98 ) ;
5205: LD_INT 98
5207: DISABLE_MARKED
// disable ( 99 ) ;
5208: LD_INT 99
5210: DISABLE_MARKED
// if Team_Game then
5211: LD_EXP 20
5215: IFFALSE 5222
// enable ( 98 ) else
5217: LD_INT 98
5219: ENABLE_MARKED
5220: GO 5225
// enable ( 99 ) ;
5222: LD_INT 99
5224: ENABLE_MARKED
// end ;
5225: LD_VAR 0 1
5229: RET
// starting begin DE_Triggers ;
5230: CALL 8683 0 0
// mp_selectmsg := true ;
5234: LD_ADDR_OWVAR 13
5238: PUSH
5239: LD_INT 1
5241: ST_TO_ADDR
// if ( game_type <> 1 ) and ( game_type <> 3 ) then
5242: LD_EXP 56
5246: PUSH
5247: LD_INT 1
5249: NONEQUAL
5250: PUSH
5251: LD_EXP 56
5255: PUSH
5256: LD_INT 3
5258: NONEQUAL
5259: AND
5260: IFFALSE 5266
// read_multiplayer_and_game_parameters ;
5262: CALL 976 0 0
// case Game_Type of 1 , 3 :
5266: LD_EXP 56
5270: PUSH
5271: LD_INT 1
5273: DOUBLE
5274: EQUAL
5275: IFTRUE 5285
5277: LD_INT 3
5279: DOUBLE
5280: EQUAL
5281: IFTRUE 5285
5283: GO 5297
5285: POP
// begin enable ( 19 ) ;
5286: LD_INT 19
5288: ENABLE_MARKED
// starting_ctf ;
5289: CALL 9322 0 0
// exit ;
5293: GO 5458
// end ; 12 :
5295: GO 5313
5297: LD_INT 12
5299: DOUBLE
5300: EQUAL
5301: IFTRUE 5305
5303: GO 5312
5305: POP
// Modify_Nations ; end ;
5306: CALL 4678 0 0
5310: GO 5313
5312: POP
// enable ( 55 ) ;
5313: LD_INT 55
5315: ENABLE_MARKED
// init_map ;
5316: CALL 276 0 0
// set_shared_visions_and_alliances ;
5320: CALL 2220 0 0
// prepare_sides ;
5324: CALL 4432 0 0
// InitLimits ;
5328: CALL 18076 0 0
// ShowTimer ;
5332: CALL 19013 0 0
// init_shipments ;
5336: CALL 5459 0 0
// init_respawn ;
5340: CALL 5963 0 0
// InitApeman ;
5344: CALL 7498 0 0
// music_nat := Side_Nations [ your_side ] ;
5348: LD_ADDR_OWVAR 71
5352: PUSH
5353: LD_EXP 19
5357: PUSH
5358: LD_OWVAR 2
5362: ARRAY
5363: ST_TO_ADDR
// if IAmSpec then
5364: CALL_OW 531
5368: IFFALSE 5404
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
5370: LD_INT 0
5372: PPUSH
5373: LD_INT 0
5375: PPUSH
5376: LD_OWVAR 2
5380: PPUSH
5381: LD_INT 32767
5383: NEG
5384: PPUSH
5385: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
5389: LD_INT 104
5391: PPUSH
5392: LD_INT 69
5394: PPUSH
5395: CALL_OW 86
// enable ( 400 ) ;
5399: LD_INT 400
5401: ENABLE_MARKED
// end else
5402: GO 5458
// begin ResetFog ;
5404: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5408: LD_EXP 26
5412: PUSH
5413: LD_EXP 18
5417: PUSH
5418: LD_OWVAR 2
5422: ARRAY
5423: ARRAY
5424: PUSH
5425: LD_INT 1
5427: ARRAY
5428: PPUSH
5429: LD_EXP 26
5433: PUSH
5434: LD_EXP 18
5438: PUSH
5439: LD_OWVAR 2
5443: ARRAY
5444: ARRAY
5445: PUSH
5446: LD_INT 2
5448: ARRAY
5449: PPUSH
5450: CALL_OW 86
// Init_Win_Condition ;
5454: CALL 5202 0 0
// end ; end ; end_of_file
5458: END
// var shipment , tictac ; export function init_shipments ; begin
5459: LD_INT 0
5461: PPUSH
// shipment := Rand ( 0 , 1 ) ;
5462: LD_ADDR_LOC 9
5466: PUSH
5467: LD_INT 0
5469: PPUSH
5470: LD_INT 1
5472: PPUSH
5473: CALL_OW 12
5477: ST_TO_ADDR
// tictac := 0 ;
5478: LD_ADDR_LOC 10
5482: PUSH
5483: LD_INT 0
5485: ST_TO_ADDR
// end ;
5486: LD_VAR 0 1
5490: RET
// every 0 0$5 + 0 0$1.1 marked 55 do var d ;
5491: GO 5493
5493: DISABLE
5494: LD_INT 0
5496: PPUSH
// begin case tick of 1 .. 1 1$0 :
5497: LD_OWVAR 1
5501: PUSH
5502: LD_INT 1
5504: DOUBLE
5505: GREATEREQUAL
5506: IFFALSE 5514
5508: LD_INT 2100
5510: DOUBLE
5511: LESSEQUAL
5512: IFTRUE 5516
5514: GO 5527
5516: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5517: LD_ADDR_VAR 0 1
5521: PUSH
5522: LD_INT 150
5524: ST_TO_ADDR
5525: GO 5710
5527: LD_INT 2100
5529: PUSH
5530: LD_INT 1
5532: PLUS
5533: DOUBLE
5534: GREATEREQUAL
5535: IFFALSE 5543
5537: LD_INT 10500
5539: DOUBLE
5540: LESSEQUAL
5541: IFTRUE 5545
5543: GO 5556
5545: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5546: LD_ADDR_VAR 0 1
5550: PUSH
5551: LD_INT 100
5553: ST_TO_ADDR
5554: GO 5710
5556: LD_INT 10500
5558: PUSH
5559: LD_INT 1
5561: PLUS
5562: DOUBLE
5563: GREATEREQUAL
5564: IFFALSE 5572
5566: LD_INT 21000
5568: DOUBLE
5569: LESSEQUAL
5570: IFTRUE 5574
5572: GO 5585
5574: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5575: LD_ADDR_VAR 0 1
5579: PUSH
5580: LD_INT 90
5582: ST_TO_ADDR
5583: GO 5710
5585: LD_INT 21000
5587: PUSH
5588: LD_INT 1
5590: PLUS
5591: DOUBLE
5592: GREATEREQUAL
5593: IFFALSE 5601
5595: LD_INT 42000
5597: DOUBLE
5598: LESSEQUAL
5599: IFTRUE 5603
5601: GO 5614
5603: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5604: LD_ADDR_VAR 0 1
5608: PUSH
5609: LD_INT 70
5611: ST_TO_ADDR
5612: GO 5710
5614: LD_INT 42000
5616: PUSH
5617: LD_INT 1
5619: PLUS
5620: DOUBLE
5621: GREATEREQUAL
5622: IFFALSE 5630
5624: LD_INT 63000
5626: DOUBLE
5627: LESSEQUAL
5628: IFTRUE 5632
5630: GO 5643
5632: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5633: LD_ADDR_VAR 0 1
5637: PUSH
5638: LD_INT 60
5640: ST_TO_ADDR
5641: GO 5710
5643: LD_INT 63000
5645: PUSH
5646: LD_INT 1
5648: PLUS
5649: DOUBLE
5650: GREATEREQUAL
5651: IFFALSE 5659
5653: LD_INT 105000
5655: DOUBLE
5656: LESSEQUAL
5657: IFTRUE 5661
5659: GO 5672
5661: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5662: LD_ADDR_VAR 0 1
5666: PUSH
5667: LD_INT 35
5669: ST_TO_ADDR
5670: GO 5710
5672: LD_INT 105000
5674: PUSH
5675: LD_INT 1
5677: PLUS
5678: DOUBLE
5679: GREATEREQUAL
5680: IFFALSE 5688
5682: LD_INT 630000
5684: DOUBLE
5685: LESSEQUAL
5686: IFTRUE 5690
5688: GO 5701
5690: POP
// d := 20 ; else
5691: LD_ADDR_VAR 0 1
5695: PUSH
5696: LD_INT 20
5698: ST_TO_ADDR
5699: GO 5710
5701: POP
// d := 0 ; end ;
5702: LD_ADDR_VAR 0 1
5706: PUSH
5707: LD_INT 0
5709: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5710: LD_INT 1
5712: PPUSH
5713: LD_INT 10000
5715: PPUSH
5716: CALL_OW 12
5720: PUSH
5721: LD_VAR 0 1
5725: PUSH
5726: LD_EXP 10
5730: MUL
5731: LESSEQUAL
5732: IFFALSE 5786
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5734: LD_INT 1
5736: PPUSH
5737: LD_INT 140
5739: PPUSH
5740: CALL_OW 12
5744: PPUSH
5745: CALL_OW 67
// shipment := ( shipment + 1 ) mod 2 ;
5749: LD_ADDR_LOC 9
5753: PUSH
5754: LD_LOC 9
5758: PUSH
5759: LD_INT 1
5761: PLUS
5762: PUSH
5763: LD_INT 2
5765: MOD
5766: ST_TO_ADDR
// CreateCratesArea ( 5 , west_side + shipment , true ) ;
5767: LD_INT 5
5769: PPUSH
5770: LD_INT 8
5772: PUSH
5773: LD_LOC 9
5777: PLUS
5778: PPUSH
5779: LD_INT 1
5781: PPUSH
5782: CALL_OW 55
// end ; enable ;
5786: ENABLE
// end ;
5787: PPOPN 1
5789: END
// every 0 0$10 trigger TICK > ( ( 2 2$0 * tictac ) + tictac * ( 1 1$30 - shipments_density * ( 0 0$2 ) ) ) marked 55 do var i , amount , is_in ;
5790: LD_OWVAR 1
5794: PUSH
5795: LD_INT 4200
5797: PUSH
5798: LD_LOC 10
5802: MUL
5803: PUSH
5804: LD_LOC 10
5808: PUSH
5809: LD_INT 3150
5811: PUSH
5812: LD_EXP 10
5816: PUSH
5817: LD_INT 70
5819: MUL
5820: MINUS
5821: MUL
5822: PLUS
5823: GREATER
5824: IFFALSE 5960
5826: GO 5828
5828: DISABLE
5829: LD_INT 0
5831: PPUSH
5832: PPUSH
5833: PPUSH
// begin tictac := tictac + 1 ;
5834: LD_ADDR_LOC 10
5838: PUSH
5839: LD_LOC 10
5843: PUSH
5844: LD_INT 1
5846: PLUS
5847: ST_TO_ADDR
// amount := Rand ( 3 , 5 ) ;
5848: LD_ADDR_VAR 0 2
5852: PUSH
5853: LD_INT 3
5855: PPUSH
5856: LD_INT 5
5858: PPUSH
5859: CALL_OW 12
5863: ST_TO_ADDR
// for i = 0 to 3 do
5864: LD_ADDR_VAR 0 1
5868: PUSH
5869: DOUBLE
5870: LD_INT 0
5872: DEC
5873: ST_TO_ADDR
5874: LD_INT 3
5876: PUSH
5877: FOR_TO
5878: IFFALSE 5957
// begin is_in := GetResourceArea ( west_side + i , mat_cans ) ;
5880: LD_ADDR_VAR 0 3
5884: PUSH
5885: LD_INT 8
5887: PUSH
5888: LD_VAR 0 1
5892: PLUS
5893: PPUSH
5894: LD_INT 1
5896: PPUSH
5897: CALL_OW 287
5901: ST_TO_ADDR
// if ( is_in < 500 ) or ( Rand ( 1 , 10 ) > ( is_in div 100 ) ) then
5902: LD_VAR 0 3
5906: PUSH
5907: LD_INT 500
5909: LESS
5910: PUSH
5911: LD_INT 1
5913: PPUSH
5914: LD_INT 10
5916: PPUSH
5917: CALL_OW 12
5921: PUSH
5922: LD_VAR 0 3
5926: PUSH
5927: LD_INT 100
5929: DIV
5930: GREATER
5931: OR
5932: IFFALSE 5955
// CreateCratesArea ( amount , nw + i , true ) ;
5934: LD_VAR 0 2
5938: PPUSH
5939: LD_INT 12
5941: PUSH
5942: LD_VAR 0 1
5946: PLUS
5947: PPUSH
5948: LD_INT 1
5950: PPUSH
5951: CALL_OW 55
// end ;
5955: GO 5877
5957: POP
5958: POP
// enable ;
5959: ENABLE
// end ; end_of_file
5960: PPOPN 3
5962: END
// var respawn_queue , nation_queue ; export function init_respawn ; begin
5963: LD_INT 0
5965: PPUSH
// if not def_people_respawning then
5966: LD_EXP 68
5970: NOT
5971: IFFALSE 5975
// exit ;
5973: GO 6078
// respawn_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5975: LD_ADDR_LOC 11
5979: PUSH
5980: LD_INT 0
5982: PUSH
5983: LD_INT 0
5985: PUSH
5986: LD_INT 0
5988: PUSH
5989: LD_INT 0
5991: PUSH
5992: LD_INT 0
5994: PUSH
5995: LD_INT 0
5997: PUSH
5998: LD_INT 0
6000: PUSH
6001: LD_INT 0
6003: PUSH
6004: EMPTY
6005: LIST
6006: LIST
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: ST_TO_ADDR
// nation_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6014: LD_ADDR_LOC 12
6018: PUSH
6019: LD_INT 0
6021: PUSH
6022: LD_INT 0
6024: PUSH
6025: LD_INT 0
6027: PUSH
6028: LD_INT 0
6030: PUSH
6031: LD_INT 0
6033: PUSH
6034: LD_INT 0
6036: PUSH
6037: LD_INT 0
6039: PUSH
6040: LD_INT 0
6042: PUSH
6043: EMPTY
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: ST_TO_ADDR
// if Game_Type in [ 2 , 12 ] then
6053: LD_EXP 56
6057: PUSH
6058: LD_INT 2
6060: PUSH
6061: LD_INT 12
6063: PUSH
6064: EMPTY
6065: LIST
6066: LIST
6067: IN
6068: IFFALSE 6075
// enable ( 41 ) else
6070: LD_INT 41
6072: ENABLE_MARKED
6073: GO 6078
// enable ( 40 ) ;
6075: LD_INT 40
6077: ENABLE_MARKED
// end ;
6078: LD_VAR 0 1
6082: RET
// every 0 0$10 marked 40 do var list , time , side ;
6083: GO 6085
6085: DISABLE
6086: LD_INT 0
6088: PPUSH
6089: PPUSH
6090: PPUSH
// begin for side = 1 to Side_Positions do
6091: LD_ADDR_VAR 0 3
6095: PUSH
6096: DOUBLE
6097: LD_INT 1
6099: DEC
6100: ST_TO_ADDR
6101: LD_EXP 18
6105: PUSH
6106: FOR_TO
6107: IFFALSE 6284
// if Side_Positions [ side ] then
6109: LD_EXP 18
6113: PUSH
6114: LD_VAR 0 3
6118: ARRAY
6119: IFFALSE 6282
// begin list := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6121: LD_ADDR_VAR 0 1
6125: PUSH
6126: LD_INT 22
6128: PUSH
6129: LD_VAR 0 3
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PUSH
6138: LD_INT 21
6140: PUSH
6141: LD_INT 1
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PUSH
6148: LD_INT 3
6150: PUSH
6151: LD_INT 23
6153: PUSH
6154: LD_INT 0
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: LIST
6165: LIST
6166: PPUSH
6167: CALL_OW 69
6171: ST_TO_ADDR
// if ( list < number_of_people ) and ( not respawn_queue [ side ] ) then
6172: LD_VAR 0 1
6176: PUSH
6177: LD_EXP 6
6181: LESS
6182: PUSH
6183: LD_LOC 11
6187: PUSH
6188: LD_VAR 0 3
6192: ARRAY
6193: NOT
6194: AND
6195: IFFALSE 6222
// respawn_queue := Replace ( respawn_queue , side , TICK ) ;
6197: LD_ADDR_LOC 11
6201: PUSH
6202: LD_LOC 11
6206: PPUSH
6207: LD_VAR 0 3
6211: PPUSH
6212: LD_OWVAR 1
6216: PPUSH
6217: CALL_OW 1
6221: ST_TO_ADDR
// time := TICK - respawn_queue [ side ] ;
6222: LD_ADDR_VAR 0 2
6226: PUSH
6227: LD_OWVAR 1
6231: PUSH
6232: LD_LOC 11
6236: PUSH
6237: LD_VAR 0 3
6241: ARRAY
6242: MINUS
6243: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6244: LD_LOC 11
6248: PUSH
6249: LD_VAR 0 3
6253: ARRAY
6254: PUSH
6255: LD_VAR 0 2
6259: PUSH
6260: LD_EXP 13
6264: GREATER
6265: AND
6266: IFFALSE 6282
// respawn_character ( side , time ) ;
6268: LD_VAR 0 3
6272: PPUSH
6273: LD_VAR 0 2
6277: PPUSH
6278: CALL 6290 0 2
// end ;
6282: GO 6106
6284: POP
6285: POP
// enable ;
6286: ENABLE
// end ;
6287: PPOPN 3
6289: END
// function respawn_character ( side , time ) ; var dep ; begin
6290: LD_INT 0
6292: PPUSH
6293: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6294: LD_INT 0
6296: PPUSH
6297: LD_INT 1
6299: PPUSH
6300: CALL_OW 12
6304: PUSH
6305: LD_VAR 0 2
6309: PUSH
6310: LD_EXP 14
6314: LESS
6315: AND
6316: IFFALSE 6320
// exit ;
6318: GO 6527
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6320: LD_ADDR_VAR 0 4
6324: PUSH
6325: LD_INT 22
6327: PUSH
6328: LD_VAR 0 1
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: PUSH
6337: LD_INT 2
6339: PUSH
6340: LD_INT 30
6342: PUSH
6343: LD_INT 0
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: PUSH
6350: LD_INT 30
6352: PUSH
6353: LD_INT 1
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: PUSH
6360: EMPTY
6361: LIST
6362: LIST
6363: LIST
6364: PUSH
6365: LD_INT 50
6367: PUSH
6368: EMPTY
6369: LIST
6370: PUSH
6371: EMPTY
6372: LIST
6373: LIST
6374: LIST
6375: PPUSH
6376: CALL_OW 69
6380: ST_TO_ADDR
// if not dep then
6381: LD_VAR 0 4
6385: NOT
6386: IFFALSE 6392
// exit else
6388: GO 6527
6390: GO 6416
// dep := dep [ Rand ( 1 , dep ) ] ;
6392: LD_ADDR_VAR 0 4
6396: PUSH
6397: LD_VAR 0 4
6401: PUSH
6402: LD_INT 1
6404: PPUSH
6405: LD_VAR 0 4
6409: PPUSH
6410: CALL_OW 12
6414: ARRAY
6415: ST_TO_ADDR
// uc_side := side ;
6416: LD_ADDR_OWVAR 20
6420: PUSH
6421: LD_VAR 0 1
6425: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6426: LD_ADDR_OWVAR 21
6430: PUSH
6431: LD_EXP 19
6435: PUSH
6436: LD_VAR 0 1
6440: ARRAY
6441: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6442: LD_INT 0
6444: PPUSH
6445: LD_INT 0
6447: PPUSH
6448: LD_EXP 7
6452: PUSH
6453: LD_INT 2
6455: DIV
6456: PPUSH
6457: CALL_OW 380
// hc_importance := 0 ;
6461: LD_ADDR_OWVAR 32
6465: PUSH
6466: LD_INT 0
6468: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
6469: CALL_OW 44
6473: PPUSH
6474: LD_VAR 0 4
6478: PPUSH
6479: CALL_OW 250
6483: PPUSH
6484: LD_VAR 0 4
6488: PPUSH
6489: CALL_OW 251
6493: PPUSH
6494: LD_INT 10
6496: PPUSH
6497: LD_INT 1
6499: PPUSH
6500: CALL_OW 50
// respawn_queue := Replace ( respawn_queue , side , 0 ) ;
6504: LD_ADDR_LOC 11
6508: PUSH
6509: LD_LOC 11
6513: PPUSH
6514: LD_VAR 0 1
6518: PPUSH
6519: LD_INT 0
6521: PPUSH
6522: CALL_OW 1
6526: ST_TO_ADDR
// end ;
6527: LD_VAR 0 3
6531: RET
// every 0 0$10 marked 41 do var i , list , time , nation , side , limit ;
6532: GO 6534
6534: DISABLE
6535: LD_INT 0
6537: PPUSH
6538: PPUSH
6539: PPUSH
6540: PPUSH
6541: PPUSH
6542: PPUSH
// begin if Game_Type = 12 then
6543: LD_EXP 56
6547: PUSH
6548: LD_INT 12
6550: EQUAL
6551: IFFALSE 6565
// limit := number_of_people else
6553: LD_ADDR_VAR 0 6
6557: PUSH
6558: LD_EXP 6
6562: ST_TO_ADDR
6563: GO 6579
// limit := 2 * number_of_people ;
6565: LD_ADDR_VAR 0 6
6569: PUSH
6570: LD_INT 2
6572: PUSH
6573: LD_EXP 6
6577: MUL
6578: ST_TO_ADDR
// for i = 1 to 4 do
6579: LD_ADDR_VAR 0 1
6583: PUSH
6584: DOUBLE
6585: LD_INT 1
6587: DEC
6588: ST_TO_ADDR
6589: LD_INT 4
6591: PUSH
6592: FOR_TO
6593: IFFALSE 6885
// begin side := GetSidePositions ( [ 1 , 1 , 3 , 3 ] [ i ] ) ;
6595: LD_ADDR_VAR 0 5
6599: PUSH
6600: LD_INT 1
6602: PUSH
6603: LD_INT 1
6605: PUSH
6606: LD_INT 3
6608: PUSH
6609: LD_INT 3
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: PUSH
6618: LD_VAR 0 1
6622: ARRAY
6623: PPUSH
6624: CALL 7227 0 1
6628: ST_TO_ADDR
// if Game_Type = 12 then
6629: LD_EXP 56
6633: PUSH
6634: LD_INT 12
6636: EQUAL
6637: IFFALSE 6657
// nation := Position_Nations [ i ] else
6639: LD_ADDR_VAR 0 4
6643: PUSH
6644: LD_EXP 21
6648: PUSH
6649: LD_VAR 0 1
6653: ARRAY
6654: ST_TO_ADDR
6655: GO 6673
// nation := Side_Nations [ side ] ;
6657: LD_ADDR_VAR 0 4
6661: PUSH
6662: LD_EXP 19
6666: PUSH
6667: LD_VAR 0 5
6671: ARRAY
6672: ST_TO_ADDR
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_nation , nation ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6673: LD_ADDR_VAR 0 2
6677: PUSH
6678: LD_INT 22
6680: PUSH
6681: LD_VAR 0 5
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: PUSH
6690: LD_INT 23
6692: PUSH
6693: LD_VAR 0 4
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PUSH
6702: LD_INT 21
6704: PUSH
6705: LD_INT 1
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: PUSH
6712: LD_INT 3
6714: PUSH
6715: LD_INT 23
6717: PUSH
6718: LD_INT 0
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: PPUSH
6732: CALL_OW 69
6736: ST_TO_ADDR
// if ( list < limit ) and ( not respawn_queue [ side ] ) then
6737: LD_VAR 0 2
6741: PUSH
6742: LD_VAR 0 6
6746: LESS
6747: PUSH
6748: LD_LOC 11
6752: PUSH
6753: LD_VAR 0 5
6757: ARRAY
6758: NOT
6759: AND
6760: IFFALSE 6812
// begin respawn_queue = Replace ( respawn_queue , side , TICK ) ;
6762: LD_ADDR_LOC 11
6766: PUSH
6767: LD_LOC 11
6771: PPUSH
6772: LD_VAR 0 5
6776: PPUSH
6777: LD_OWVAR 1
6781: PPUSH
6782: CALL_OW 1
6786: ST_TO_ADDR
// nation_queue = Replace ( nation_queue , side , nation ) ;
6787: LD_ADDR_LOC 12
6791: PUSH
6792: LD_LOC 12
6796: PPUSH
6797: LD_VAR 0 5
6801: PPUSH
6802: LD_VAR 0 4
6806: PPUSH
6807: CALL_OW 1
6811: ST_TO_ADDR
// end ; time := TICK - respawn_queue [ side ] ;
6812: LD_ADDR_VAR 0 3
6816: PUSH
6817: LD_OWVAR 1
6821: PUSH
6822: LD_LOC 11
6826: PUSH
6827: LD_VAR 0 5
6831: ARRAY
6832: MINUS
6833: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6834: LD_LOC 11
6838: PUSH
6839: LD_VAR 0 5
6843: ARRAY
6844: PUSH
6845: LD_VAR 0 3
6849: PUSH
6850: LD_EXP 13
6854: GREATER
6855: AND
6856: IFFALSE 6883
// respawn_character_nation ( side , time , nation_queue [ side ] ) ;
6858: LD_VAR 0 5
6862: PPUSH
6863: LD_VAR 0 3
6867: PPUSH
6868: LD_LOC 12
6872: PUSH
6873: LD_VAR 0 5
6877: ARRAY
6878: PPUSH
6879: CALL 6891 0 3
// end ;
6883: GO 6592
6885: POP
6886: POP
// enable ;
6887: ENABLE
// end ;
6888: PPOPN 6
6890: END
// function respawn_character_nation ( side , time , nation ) ; var dep ; begin
6891: LD_INT 0
6893: PPUSH
6894: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6895: LD_INT 0
6897: PPUSH
6898: LD_INT 1
6900: PPUSH
6901: CALL_OW 12
6905: PUSH
6906: LD_VAR 0 2
6910: PUSH
6911: LD_EXP 14
6915: LESS
6916: AND
6917: IFFALSE 6921
// exit ;
6919: GO 7222
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_nation , nation ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6921: LD_ADDR_VAR 0 5
6925: PUSH
6926: LD_INT 22
6928: PUSH
6929: LD_VAR 0 1
6933: PUSH
6934: EMPTY
6935: LIST
6936: LIST
6937: PUSH
6938: LD_INT 23
6940: PUSH
6941: LD_VAR 0 3
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PUSH
6950: LD_INT 2
6952: PUSH
6953: LD_INT 30
6955: PUSH
6956: LD_INT 0
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: PUSH
6963: LD_INT 30
6965: PUSH
6966: LD_INT 1
6968: PUSH
6969: EMPTY
6970: LIST
6971: LIST
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: LIST
6977: PUSH
6978: LD_INT 50
6980: PUSH
6981: EMPTY
6982: LIST
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: PPUSH
6990: CALL_OW 69
6994: ST_TO_ADDR
// if not dep then
6995: LD_VAR 0 5
6999: NOT
7000: IFFALSE 7063
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
7002: LD_ADDR_VAR 0 5
7006: PUSH
7007: LD_INT 22
7009: PUSH
7010: LD_VAR 0 1
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: PUSH
7019: LD_INT 2
7021: PUSH
7022: LD_INT 30
7024: PUSH
7025: LD_INT 0
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: PUSH
7032: LD_INT 30
7034: PUSH
7035: LD_INT 1
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: LIST
7046: PUSH
7047: LD_INT 50
7049: PUSH
7050: EMPTY
7051: LIST
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: LIST
7057: PPUSH
7058: CALL_OW 69
7062: ST_TO_ADDR
// if not dep then
7063: LD_VAR 0 5
7067: NOT
7068: IFFALSE 7074
// exit else
7070: GO 7222
7072: GO 7098
// dep := dep [ Rand ( 1 , dep ) ] ;
7074: LD_ADDR_VAR 0 5
7078: PUSH
7079: LD_VAR 0 5
7083: PUSH
7084: LD_INT 1
7086: PPUSH
7087: LD_VAR 0 5
7091: PPUSH
7092: CALL_OW 12
7096: ARRAY
7097: ST_TO_ADDR
// uc_side := side ;
7098: LD_ADDR_OWVAR 20
7102: PUSH
7103: LD_VAR 0 1
7107: ST_TO_ADDR
// uc_nation := nation ;
7108: LD_ADDR_OWVAR 21
7112: PUSH
7113: LD_VAR 0 3
7117: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level ) ;
7118: LD_INT 0
7120: PPUSH
7121: LD_INT 0
7123: PPUSH
7124: LD_EXP 7
7128: PPUSH
7129: CALL_OW 380
// hc_importance := 0 ;
7133: LD_ADDR_OWVAR 32
7137: PUSH
7138: LD_INT 0
7140: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
7141: CALL_OW 44
7145: PPUSH
7146: LD_VAR 0 5
7150: PPUSH
7151: CALL_OW 250
7155: PPUSH
7156: LD_VAR 0 5
7160: PPUSH
7161: CALL_OW 251
7165: PPUSH
7166: LD_INT 10
7168: PPUSH
7169: LD_INT 1
7171: PPUSH
7172: CALL_OW 50
// respawn_queue := Replace ( respawn_queue , side , 0 ) ;
7176: LD_ADDR_LOC 11
7180: PUSH
7181: LD_LOC 11
7185: PPUSH
7186: LD_VAR 0 1
7190: PPUSH
7191: LD_INT 0
7193: PPUSH
7194: CALL_OW 1
7198: ST_TO_ADDR
// nation_queue := Replace ( nation_queue , side , 0 ) ;
7199: LD_ADDR_LOC 12
7203: PUSH
7204: LD_LOC 12
7208: PPUSH
7209: LD_VAR 0 1
7213: PPUSH
7214: LD_INT 0
7216: PPUSH
7217: CALL_OW 1
7221: ST_TO_ADDR
// end ;
7222: LD_VAR 0 4
7226: RET
// function GetSidePositions ( i ) ; var un , side ; begin
7227: LD_INT 0
7229: PPUSH
7230: PPUSH
7231: PPUSH
// side := false ;
7232: LD_ADDR_VAR 0 4
7236: PUSH
7237: LD_INT 0
7239: ST_TO_ADDR
// for un = 1 to Side_Positions do
7240: LD_ADDR_VAR 0 3
7244: PUSH
7245: DOUBLE
7246: LD_INT 1
7248: DEC
7249: ST_TO_ADDR
7250: LD_EXP 18
7254: PUSH
7255: FOR_TO
7256: IFFALSE 7290
// if Side_Positions [ un ] = i then
7258: LD_EXP 18
7262: PUSH
7263: LD_VAR 0 3
7267: ARRAY
7268: PUSH
7269: LD_VAR 0 1
7273: EQUAL
7274: IFFALSE 7288
// begin side := un ;
7276: LD_ADDR_VAR 0 4
7280: PUSH
7281: LD_VAR 0 3
7285: ST_TO_ADDR
// break ;
7286: GO 7290
// end ;
7288: GO 7255
7290: POP
7291: POP
// result := side ;
7292: LD_ADDR_VAR 0 2
7296: PUSH
7297: LD_VAR 0 4
7301: ST_TO_ADDR
// end ; end_of_file
7302: LD_VAR 0 2
7306: RET
// every 20 20$00 trigger apemanNumber do
7307: LD_EXP 30
7311: IFFALSE 7344
7313: GO 7315
7315: DISABLE
// begin enable ;
7316: ENABLE
// if apeLevel >= 8 then
7317: LD_EXP 35
7321: PUSH
7322: LD_INT 8
7324: GREATEREQUAL
7325: IFFALSE 7330
// disable else
7327: DISABLE
7328: GO 7344
// apeLevel := apeLevel + 1 ;
7330: LD_ADDR_EXP 35
7334: PUSH
7335: LD_EXP 35
7339: PUSH
7340: LD_INT 1
7342: PLUS
7343: ST_TO_ADDR
// end ;
7344: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
7345: LD_EXP 30
7349: PUSH
7350: LD_EXP 31
7354: LESS
7355: IFFALSE 7495
7357: GO 7359
7359: DISABLE
7360: LD_INT 0
7362: PPUSH
7363: PPUSH
7364: PPUSH
7365: PPUSH
// begin enable ;
7366: ENABLE
// for i := 1 to apemanPos do
7367: LD_ADDR_VAR 0 1
7371: PUSH
7372: DOUBLE
7373: LD_INT 1
7375: DEC
7376: ST_TO_ADDR
7377: LD_EXP 33
7381: PUSH
7382: FOR_TO
7383: IFFALSE 7493
// begin if apemanPlayerCount [ i ] then
7385: LD_EXP 34
7389: PUSH
7390: LD_VAR 0 1
7394: ARRAY
7395: IFFALSE 7491
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
7397: LD_EXP 34
7401: PUSH
7402: LD_VAR 0 1
7406: ARRAY
7407: PUSH
7408: LD_EXP 33
7412: PUSH
7413: LD_VAR 0 1
7417: ARRAY
7418: GREATER
7419: IFFALSE 7491
// begin ape := PrepareApeman ;
7421: LD_ADDR_VAR 0 2
7425: PUSH
7426: CALL 7990 0 0
7430: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
7431: LD_VAR 0 2
7435: PPUSH
7436: LD_EXP 36
7440: PUSH
7441: LD_VAR 0 1
7445: ARRAY
7446: PPUSH
7447: LD_INT 0
7449: PPUSH
7450: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
7454: LD_ADDR_EXP 33
7458: PUSH
7459: LD_EXP 33
7463: PPUSH
7464: LD_VAR 0 1
7468: PPUSH
7469: LD_EXP 33
7473: PUSH
7474: LD_VAR 0 1
7478: ARRAY
7479: PUSH
7480: LD_VAR 0 2
7484: UNION
7485: PPUSH
7486: CALL_OW 1
7490: ST_TO_ADDR
// end ; end ; end ;
7491: GO 7382
7493: POP
7494: POP
// end ;
7495: PPOPN 4
7497: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
7498: LD_INT 0
7500: PPUSH
7501: PPUSH
7502: PPUSH
7503: PPUSH
7504: PPUSH
7505: PPUSH
7506: PPUSH
// playersAmount := 0 ;
7507: LD_ADDR_VAR 0 3
7511: PUSH
7512: LD_INT 0
7514: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea ] ;
7515: LD_ADDR_VAR 0 7
7519: PUSH
7520: LD_INT 18
7522: PUSH
7523: LD_INT 19
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7530: LD_ADDR_EXP 36
7534: PUSH
7535: LD_INT 0
7537: PUSH
7538: LD_INT 0
7540: PUSH
7541: LD_INT 0
7543: PUSH
7544: LD_INT 0
7546: PUSH
7547: LD_INT 0
7549: PUSH
7550: LD_INT 0
7552: PUSH
7553: LD_INT 0
7555: PUSH
7556: LD_INT 0
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: ST_TO_ADDR
// for j = 1 to Side_Positions do
7569: LD_ADDR_VAR 0 4
7573: PUSH
7574: DOUBLE
7575: LD_INT 1
7577: DEC
7578: ST_TO_ADDR
7579: LD_EXP 18
7583: PUSH
7584: FOR_TO
7585: IFFALSE 7652
// if Side_Positions [ j ] then
7587: LD_EXP 18
7591: PUSH
7592: LD_VAR 0 4
7596: ARRAY
7597: IFFALSE 7650
// begin playersAmount := playersAmount + 1 ;
7599: LD_ADDR_VAR 0 3
7603: PUSH
7604: LD_VAR 0 3
7608: PUSH
7609: LD_INT 1
7611: PLUS
7612: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
7613: LD_ADDR_EXP 36
7617: PUSH
7618: LD_EXP 36
7622: PPUSH
7623: LD_VAR 0 4
7627: PPUSH
7628: LD_VAR 0 7
7632: PUSH
7633: LD_EXP 18
7637: PUSH
7638: LD_VAR 0 4
7642: ARRAY
7643: ARRAY
7644: PPUSH
7645: CALL_OW 1
7649: ST_TO_ADDR
// end ;
7650: GO 7584
7652: POP
7653: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
7654: LD_ADDR_EXP 32
7658: PUSH
7659: LD_INT 3
7661: PUSH
7662: LD_EXP 12
7666: MUL
7667: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
7668: LD_ADDR_EXP 30
7672: PUSH
7673: LD_VAR 0 3
7677: PUSH
7678: LD_EXP 32
7682: MUL
7683: ST_TO_ADDR
// apemanLimit := apemanNumber ;
7684: LD_ADDR_EXP 31
7688: PUSH
7689: LD_EXP 30
7693: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7694: LD_ADDR_EXP 33
7698: PUSH
7699: LD_INT 0
7701: PUSH
7702: LD_INT 0
7704: PUSH
7705: LD_INT 0
7707: PUSH
7708: LD_INT 0
7710: PUSH
7711: LD_INT 0
7713: PUSH
7714: LD_INT 0
7716: PUSH
7717: LD_INT 0
7719: PUSH
7720: LD_INT 0
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7733: LD_ADDR_EXP 34
7737: PUSH
7738: LD_INT 0
7740: PUSH
7741: LD_INT 0
7743: PUSH
7744: LD_INT 0
7746: PUSH
7747: LD_INT 0
7749: PUSH
7750: LD_INT 0
7752: PUSH
7753: LD_INT 0
7755: PUSH
7756: LD_INT 0
7758: PUSH
7759: LD_INT 0
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: ST_TO_ADDR
// apeLevel := 1 ;
7772: LD_ADDR_EXP 35
7776: PUSH
7777: LD_INT 1
7779: ST_TO_ADDR
// if not apemanNumber then
7780: LD_EXP 30
7784: NOT
7785: IFFALSE 7789
// exit ;
7787: GO 7985
// for i := 1 to apemanPerPlayer do
7789: LD_ADDR_VAR 0 2
7793: PUSH
7794: DOUBLE
7795: LD_INT 1
7797: DEC
7798: ST_TO_ADDR
7799: LD_EXP 32
7803: PUSH
7804: FOR_TO
7805: IFFALSE 7983
// begin for j := 1 to Side_Positions do
7807: LD_ADDR_VAR 0 4
7811: PUSH
7812: DOUBLE
7813: LD_INT 1
7815: DEC
7816: ST_TO_ADDR
7817: LD_EXP 18
7821: PUSH
7822: FOR_TO
7823: IFFALSE 7979
// if Side_Positions [ j ] then
7825: LD_EXP 18
7829: PUSH
7830: LD_VAR 0 4
7834: ARRAY
7835: IFFALSE 7977
// begin pos := Side_Positions [ j ] ;
7837: LD_ADDR_VAR 0 6
7841: PUSH
7842: LD_EXP 18
7846: PUSH
7847: LD_VAR 0 4
7851: ARRAY
7852: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
7853: LD_ADDR_EXP 34
7857: PUSH
7858: LD_EXP 34
7862: PPUSH
7863: LD_VAR 0 4
7867: PPUSH
7868: LD_EXP 34
7872: PUSH
7873: LD_VAR 0 4
7877: ARRAY
7878: PUSH
7879: LD_INT 1
7881: PLUS
7882: PPUSH
7883: CALL_OW 1
7887: ST_TO_ADDR
// ape := PrepareApeman ;
7888: LD_ADDR_VAR 0 5
7892: PUSH
7893: CALL 7990 0 0
7897: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
7898: LD_ADDR_EXP 33
7902: PUSH
7903: LD_EXP 33
7907: PPUSH
7908: LD_VAR 0 4
7912: PPUSH
7913: LD_EXP 33
7917: PUSH
7918: LD_VAR 0 4
7922: ARRAY
7923: PPUSH
7924: LD_EXP 33
7928: PUSH
7929: LD_VAR 0 4
7933: ARRAY
7934: PUSH
7935: LD_INT 1
7937: PLUS
7938: PPUSH
7939: LD_VAR 0 5
7943: PPUSH
7944: CALL_OW 1
7948: PPUSH
7949: CALL_OW 1
7953: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
7954: LD_VAR 0 5
7958: PPUSH
7959: LD_EXP 36
7963: PUSH
7964: LD_VAR 0 4
7968: ARRAY
7969: PPUSH
7970: LD_INT 0
7972: PPUSH
7973: CALL_OW 49
// end ;
7977: GO 7822
7979: POP
7980: POP
// end ;
7981: GO 7804
7983: POP
7984: POP
// end ;
7985: LD_VAR 0 1
7989: RET
// export function PrepareApeman ; var bonus ; begin
7990: LD_INT 0
7992: PPUSH
7993: PPUSH
// uc_side := 0 ;
7994: LD_ADDR_OWVAR 20
7998: PUSH
7999: LD_INT 0
8001: ST_TO_ADDR
// uc_nation := 0 ;
8002: LD_ADDR_OWVAR 21
8006: PUSH
8007: LD_INT 0
8009: ST_TO_ADDR
// InitHc ;
8010: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
8014: LD_ADDR_VAR 0 2
8018: PUSH
8019: LD_INT 1
8021: NEG
8022: PUSH
8023: LD_INT 0
8025: PUSH
8026: LD_INT 1
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: LIST
8033: PUSH
8034: LD_OWVAR 1
8038: PUSH
8039: LD_INT 3
8041: MOD
8042: PUSH
8043: LD_INT 1
8045: PLUS
8046: ARRAY
8047: ST_TO_ADDR
// hc_class := class_apeman ;
8048: LD_ADDR_OWVAR 28
8052: PUSH
8053: LD_INT 12
8055: ST_TO_ADDR
// hc_gallery :=  ;
8056: LD_ADDR_OWVAR 33
8060: PUSH
8061: LD_STRING 
8063: ST_TO_ADDR
// hc_name :=  ;
8064: LD_ADDR_OWVAR 26
8068: PUSH
8069: LD_STRING 
8071: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
8072: LD_ADDR_OWVAR 31
8076: PUSH
8077: LD_EXP 35
8081: PUSH
8082: LD_VAR 0 2
8086: PLUS
8087: PUSH
8088: LD_EXP 35
8092: PUSH
8093: LD_VAR 0 2
8097: PLUS
8098: PUSH
8099: LD_EXP 35
8103: PUSH
8104: LD_VAR 0 2
8108: PLUS
8109: PUSH
8110: LD_EXP 35
8114: PUSH
8115: LD_VAR 0 2
8119: PLUS
8120: PUSH
8121: EMPTY
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
8127: LD_ADDR_OWVAR 35
8131: PUSH
8132: LD_INT 10
8134: PUSH
8135: LD_VAR 0 2
8139: MUL
8140: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
8141: LD_ADDR_OWVAR 29
8145: PUSH
8146: LD_INT 12
8148: PUSH
8149: LD_INT 10
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: ST_TO_ADDR
// result := CreateHuman ;
8156: LD_ADDR_VAR 0 1
8160: PUSH
8161: CALL_OW 44
8165: ST_TO_ADDR
// end ;
8166: LD_VAR 0 1
8170: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
8171: LD_INT 0
8173: PPUSH
8174: PPUSH
8175: PPUSH
// if not ape then
8176: LD_VAR 0 1
8180: NOT
8181: IFFALSE 8185
// exit ;
8183: GO 8310
// side := GetSide ( ape ) ;
8185: LD_ADDR_VAR 0 3
8189: PUSH
8190: LD_VAR 0 1
8194: PPUSH
8195: CALL_OW 255
8199: ST_TO_ADDR
// if not side then
8200: LD_VAR 0 3
8204: NOT
8205: IFFALSE 8259
// begin for i = 1 to apemanPos do
8207: LD_ADDR_VAR 0 4
8211: PUSH
8212: DOUBLE
8213: LD_INT 1
8215: DEC
8216: ST_TO_ADDR
8217: LD_EXP 33
8221: PUSH
8222: FOR_TO
8223: IFFALSE 8257
// if ape in apemanPos [ i ] then
8225: LD_VAR 0 1
8229: PUSH
8230: LD_EXP 33
8234: PUSH
8235: LD_VAR 0 4
8239: ARRAY
8240: IN
8241: IFFALSE 8255
// begin side := i ;
8243: LD_ADDR_VAR 0 3
8247: PUSH
8248: LD_VAR 0 4
8252: ST_TO_ADDR
// break ;
8253: GO 8257
// end ;
8255: GO 8222
8257: POP
8258: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
8259: LD_ADDR_EXP 33
8263: PUSH
8264: LD_EXP 33
8268: PPUSH
8269: LD_VAR 0 3
8273: PPUSH
8274: LD_EXP 33
8278: PUSH
8279: LD_VAR 0 3
8283: ARRAY
8284: PUSH
8285: LD_VAR 0 1
8289: DIFF
8290: PPUSH
8291: CALL_OW 1
8295: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
8296: LD_ADDR_EXP 30
8300: PUSH
8301: LD_EXP 30
8305: PUSH
8306: LD_INT 1
8308: MINUS
8309: ST_TO_ADDR
// end ; end_of_file
8310: LD_VAR 0 2
8314: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
8315: LD_VAR 0 1
8319: PPUSH
8320: CALL_OW 266
8324: PUSH
8325: LD_INT 0
8327: PUSH
8328: LD_INT 1
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: IN
8335: IFFALSE 8360
// SetBName ( b , @ & GetSide ( b ) ) ;
8337: LD_VAR 0 1
8341: PPUSH
8342: LD_STRING @
8344: PUSH
8345: LD_VAR 0 1
8349: PPUSH
8350: CALL_OW 255
8354: STR
8355: PPUSH
8356: CALL_OW 500
// if def_game_rules then
8360: LD_EXP 57
8364: IFFALSE 8401
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
8366: LD_VAR 0 1
8370: PPUSH
8371: LD_VAR 0 1
8375: PPUSH
8376: CALL_OW 266
8380: PPUSH
8381: LD_VAR 0 1
8385: PPUSH
8386: CALL_OW 255
8390: PPUSH
8391: LD_INT 0
8393: PPUSH
8394: LD_INT 1
8396: PPUSH
8397: CALL 18477 0 5
// end ;
8401: PPOPN 2
8403: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
8404: LD_VAR 0 1
8408: PPUSH
8409: CALL_OW 266
8413: PUSH
8414: LD_INT 0
8416: PUSH
8417: LD_INT 1
8419: PUSH
8420: EMPTY
8421: LIST
8422: LIST
8423: IN
8424: IFFALSE 8449
// SetBName ( b , @ & GetSide ( b ) ) ;
8426: LD_VAR 0 1
8430: PPUSH
8431: LD_STRING @
8433: PUSH
8434: LD_VAR 0 1
8438: PPUSH
8439: CALL_OW 255
8443: STR
8444: PPUSH
8445: CALL_OW 500
// if def_game_rules then
8449: LD_EXP 57
8453: IFFALSE 8492
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
8455: LD_VAR 0 1
8459: PPUSH
8460: LD_VAR 0 1
8464: PPUSH
8465: CALL_OW 266
8469: PPUSH
8470: LD_VAR 0 1
8474: PPUSH
8475: CALL_OW 255
8479: PPUSH
8480: LD_VAR 0 2
8484: PPUSH
8485: LD_INT 1
8487: PPUSH
8488: CALL 18477 0 5
// end ;
8492: PPOPN 3
8494: END
// on VehicleConstructed ( veh , fac ) do var side ;
8495: LD_INT 0
8497: PPUSH
// begin if GetControl ( veh ) = control_apeman then
8498: LD_VAR 0 1
8502: PPUSH
8503: CALL_OW 263
8507: PUSH
8508: LD_INT 5
8510: EQUAL
8511: IFFALSE 8653
// begin side := GetSide ( veh ) ;
8513: LD_ADDR_VAR 0 3
8517: PUSH
8518: LD_VAR 0 1
8522: PPUSH
8523: CALL_OW 255
8527: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
8528: LD_ADDR_EXP 33
8532: PUSH
8533: LD_EXP 33
8537: PPUSH
8538: LD_VAR 0 3
8542: PPUSH
8543: LD_EXP 33
8547: PUSH
8548: LD_VAR 0 3
8552: ARRAY
8553: PPUSH
8554: LD_INT 52
8556: PUSH
8557: EMPTY
8558: LIST
8559: PPUSH
8560: CALL_OW 72
8564: PUSH
8565: LD_INT 22
8567: PUSH
8568: LD_VAR 0 3
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: PUSH
8577: LD_INT 2
8579: PUSH
8580: LD_INT 33
8582: PUSH
8583: LD_INT 5
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: PUSH
8590: LD_INT 25
8592: PUSH
8593: LD_INT 12
8595: PUSH
8596: EMPTY
8597: LIST
8598: LIST
8599: PUSH
8600: LD_INT 25
8602: PUSH
8603: LD_INT 15
8605: PUSH
8606: EMPTY
8607: LIST
8608: LIST
8609: PUSH
8610: LD_INT 25
8612: PUSH
8613: LD_INT 16
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: PUSH
8620: LD_INT 25
8622: PUSH
8623: LD_INT 17
8625: PUSH
8626: EMPTY
8627: LIST
8628: LIST
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: PPUSH
8642: CALL_OW 69
8646: UNION
8647: PPUSH
8648: CALL_OW 1
8652: ST_TO_ADDR
// end ; end ;
8653: PPOPN 3
8655: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
8656: LD_VAR 0 1
8660: PPUSH
8661: LD_VAR 0 2
8665: PPUSH
8666: LD_VAR 0 3
8670: PPUSH
8671: LD_OWVAR 2
8675: PPUSH
8676: CALL 19155 0 4
8680: PPOPN 3
8682: END
// export function DE_Triggers ; begin
8683: LD_INT 0
8685: PPUSH
// disable ( 01 ) ;
8686: LD_INT 1
8688: DISABLE_MARKED
// disable ( 02 ) ;
8689: LD_INT 2
8691: DISABLE_MARKED
// disable ( 03 ) ;
8692: LD_INT 3
8694: DISABLE_MARKED
// disable ( 04 ) ;
8695: LD_INT 4
8697: DISABLE_MARKED
// disable ( 05 ) ;
8698: LD_INT 5
8700: DISABLE_MARKED
// disable ( 06 ) ;
8701: LD_INT 6
8703: DISABLE_MARKED
// disable ( 07 ) ;
8704: LD_INT 7
8706: DISABLE_MARKED
// disable ( 10 ) ;
8707: LD_INT 10
8709: DISABLE_MARKED
// disable ( 11 ) ;
8710: LD_INT 11
8712: DISABLE_MARKED
// disable ( 12 ) ;
8713: LD_INT 12
8715: DISABLE_MARKED
// disable ( 13 ) ;
8716: LD_INT 13
8718: DISABLE_MARKED
// disable ( 19 ) ;
8719: LD_INT 19
8721: DISABLE_MARKED
// disable ( 40 ) ;
8722: LD_INT 40
8724: DISABLE_MARKED
// disable ( 41 ) ;
8725: LD_INT 41
8727: DISABLE_MARKED
// disable ( 98 ) ;
8728: LD_INT 98
8730: DISABLE_MARKED
// disable ( 99 ) ;
8731: LD_INT 99
8733: DISABLE_MARKED
// disable ( 55 ) ;
8734: LD_INT 55
8736: DISABLE_MARKED
// disable ( 400 ) ;
8737: LD_INT 400
8739: DISABLE_MARKED
// disable ( 401 ) ;
8740: LD_INT 401
8742: DISABLE_MARKED
// end ; end_of_file
8743: LD_VAR 0 1
8747: RET
// function CanWinLoose ; begin
8748: LD_INT 0
8750: PPUSH
// Result := true ;
8751: LD_ADDR_VAR 0 1
8755: PUSH
8756: LD_INT 1
8758: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8759: CALL_OW 518
8763: PUSH
8764: CALL_OW 519
8768: PUSH
8769: LD_INT 0
8771: GREATER
8772: AND
8773: IFFALSE 8783
// Result := false ;
8775: LD_ADDR_VAR 0 1
8779: PUSH
8780: LD_INT 0
8782: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8783: CALL_OW 531
8787: PUSH
8788: CALL_OW 519
8792: PUSH
8793: LD_INT 1
8795: GREATER
8796: AND
8797: IFFALSE 8807
// Result := false ;
8799: LD_ADDR_VAR 0 1
8803: PUSH
8804: LD_INT 0
8806: ST_TO_ADDR
// end ;
8807: LD_VAR 0 1
8811: RET
// function HasPower ( i ) ; begin
8812: LD_INT 0
8814: PPUSH
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8815: LD_ADDR_VAR 0 2
8819: PUSH
8820: LD_INT 22
8822: PUSH
8823: LD_VAR 0 1
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: PUSH
8832: LD_INT 2
8834: PUSH
8835: LD_INT 21
8837: PUSH
8838: LD_INT 1
8840: PUSH
8841: EMPTY
8842: LIST
8843: LIST
8844: PUSH
8845: LD_INT 30
8847: PUSH
8848: LD_INT 0
8850: PUSH
8851: EMPTY
8852: LIST
8853: LIST
8854: PUSH
8855: LD_INT 30
8857: PUSH
8858: LD_INT 1
8860: PUSH
8861: EMPTY
8862: LIST
8863: LIST
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: PPUSH
8875: CALL_OW 69
8879: ST_TO_ADDR
// end ;
8880: LD_VAR 0 2
8884: RET
// function AlliedSides ( i , j ) ; begin
8885: LD_INT 0
8887: PPUSH
// Result := false ;
8888: LD_ADDR_VAR 0 3
8892: PUSH
8893: LD_INT 0
8895: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8896: LD_VAR 0 1
8900: PPUSH
8901: LD_VAR 0 2
8905: PPUSH
8906: CALL_OW 81
8910: PUSH
8911: LD_INT 1
8913: EQUAL
8914: PUSH
8915: LD_VAR 0 2
8919: PPUSH
8920: LD_VAR 0 1
8924: PPUSH
8925: CALL_OW 81
8929: PUSH
8930: LD_INT 1
8932: EQUAL
8933: AND
8934: PUSH
8935: LD_VAR 0 1
8939: PPUSH
8940: CALL_OW 83
8944: AND
8945: PUSH
8946: LD_VAR 0 2
8950: PPUSH
8951: CALL_OW 83
8955: AND
8956: IFFALSE 8966
// Result := true ;
8958: LD_ADDR_VAR 0 3
8962: PUSH
8963: LD_INT 1
8965: ST_TO_ADDR
// end ;
8966: LD_VAR 0 3
8970: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
8971: CALL 8748 0 0
8975: IFFALSE 8984
8977: GO 8979
8979: DISABLE
// YouLostInMultiplayer ;
8980: CALL_OW 107
8984: END
// every 0 0$3 trigger CanWinLoose marked 401 do
8985: CALL 8748 0 0
8989: IFFALSE 9013
8991: GO 8993
8993: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
8994: LD_EXP 19
8998: PUSH
8999: LD_OWVAR 2
9003: ARRAY
9004: PPUSH
9005: CALL 19197 0 1
// YouWinInMultiplayer ;
9009: CALL_OW 106
// end ;
9013: END
// every 0 0$3 marked 98 do var i , CanWin ;
9014: GO 9016
9016: DISABLE
9017: LD_INT 0
9019: PPUSH
9020: PPUSH
// begin if not HasPower ( your_side ) then
9021: LD_OWVAR 2
9025: PPUSH
9026: CALL 8812 0 1
9030: NOT
9031: IFFALSE 9042
// begin Multiplayer_Loose_Message ;
9033: CALL_OW 521
// enable ( 400 ) ;
9037: LD_INT 400
9039: ENABLE_MARKED
// end else
9040: GO 9175
// begin CanWin := true ;
9042: LD_ADDR_VAR 0 2
9046: PUSH
9047: LD_INT 1
9049: ST_TO_ADDR
// for i := 1 to 8 do
9050: LD_ADDR_VAR 0 1
9054: PUSH
9055: DOUBLE
9056: LD_INT 1
9058: DEC
9059: ST_TO_ADDR
9060: LD_INT 8
9062: PUSH
9063: FOR_TO
9064: IFFALSE 9161
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9066: LD_EXP 18
9070: PUSH
9071: LD_VAR 0 1
9075: ARRAY
9076: PUSH
9077: LD_VAR 0 1
9081: PPUSH
9082: CALL_OW 108
9086: AND
9087: PUSH
9088: LD_VAR 0 1
9092: PUSH
9093: LD_OWVAR 2
9097: NONEQUAL
9098: AND
9099: IFFALSE 9159
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
9101: LD_EXP 16
9105: PUSH
9106: LD_VAR 0 1
9110: ARRAY
9111: NOT
9112: PUSH
9113: LD_EXP 16
9117: PUSH
9118: LD_VAR 0 1
9122: ARRAY
9123: PUSH
9124: LD_EXP 16
9128: PUSH
9129: LD_OWVAR 2
9133: ARRAY
9134: NONEQUAL
9135: OR
9136: IFFALSE 9159
// if HasPower ( i ) then
9138: LD_VAR 0 1
9142: PPUSH
9143: CALL 8812 0 1
9147: IFFALSE 9159
// begin CanWin := false ;
9149: LD_ADDR_VAR 0 2
9153: PUSH
9154: LD_INT 0
9156: ST_TO_ADDR
// break ;
9157: GO 9161
// end ;
9159: GO 9063
9161: POP
9162: POP
// if CanWin then
9163: LD_VAR 0 2
9167: IFFALSE 9174
// enable ( 401 ) else
9169: LD_INT 401
9171: ENABLE_MARKED
9172: GO 9175
// enable ;
9174: ENABLE
// end ; end ;
9175: PPOPN 2
9177: END
// every 0 0$3 marked 99 do var i , CanWin ;
9178: GO 9180
9180: DISABLE
9181: LD_INT 0
9183: PPUSH
9184: PPUSH
// begin if not HasPower ( your_side ) then
9185: LD_OWVAR 2
9189: PPUSH
9190: CALL 8812 0 1
9194: NOT
9195: IFFALSE 9206
// begin Multiplayer_Loose_Message ;
9197: CALL_OW 521
// enable ( 400 ) ;
9201: LD_INT 400
9203: ENABLE_MARKED
// end else
9204: GO 9319
// begin CanWin := true ;
9206: LD_ADDR_VAR 0 2
9210: PUSH
9211: LD_INT 1
9213: ST_TO_ADDR
// for i := 1 to 8 do
9214: LD_ADDR_VAR 0 1
9218: PUSH
9219: DOUBLE
9220: LD_INT 1
9222: DEC
9223: ST_TO_ADDR
9224: LD_INT 8
9226: PUSH
9227: FOR_TO
9228: IFFALSE 9305
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9230: LD_EXP 18
9234: PUSH
9235: LD_VAR 0 1
9239: ARRAY
9240: PUSH
9241: LD_VAR 0 1
9245: PPUSH
9246: CALL_OW 108
9250: AND
9251: PUSH
9252: LD_VAR 0 1
9256: PUSH
9257: LD_OWVAR 2
9261: NONEQUAL
9262: AND
9263: IFFALSE 9303
// if not AlliedSides ( i , your_side ) then
9265: LD_VAR 0 1
9269: PPUSH
9270: LD_OWVAR 2
9274: PPUSH
9275: CALL 8885 0 2
9279: NOT
9280: IFFALSE 9303
// if HasPower ( i ) then
9282: LD_VAR 0 1
9286: PPUSH
9287: CALL 8812 0 1
9291: IFFALSE 9303
// begin CanWin := false ;
9293: LD_ADDR_VAR 0 2
9297: PUSH
9298: LD_INT 0
9300: ST_TO_ADDR
// break ;
9301: GO 9305
// end ;
9303: GO 9227
9305: POP
9306: POP
// if CanWin then
9307: LD_VAR 0 2
9311: IFFALSE 9318
// enable ( 401 ) else
9313: LD_INT 401
9315: ENABLE_MARKED
9316: GO 9319
// enable ;
9318: ENABLE
// end ; end ; end_of_file
9319: PPOPN 2
9321: END
// var time ; export lidi , krabice , opoce ; export cper , cperiode ; var depot1 , depot2 ; var vlajka1 , vlajka2 ; export depotpositions , areas ; var podvozky , zbrane ; export pos1side , pos2side ; var pos1base , pos2base ; var left_score , right_score ; export debug , ctf ; export mp_sides_teams_ , mp_sides_nations_ , mp_sides_positions_ , mp_sides_players_counts_ ; var cft_01 , cft_02 , cft_03 , cft_04 , cft_05 , cft_06 , cft_07 ; export nonctf_10 , nonctf_11 , nonctf_12 , nonctf_13 ; var stmp , stmp2 , cl ; export function starting_ctf ; begin
9322: LD_INT 0
9324: PPUSH
// cft_01 = 01 ;
9325: LD_ADDR_LOC 24
9329: PUSH
9330: LD_INT 1
9332: ST_TO_ADDR
// cft_02 = 02 ;
9333: LD_ADDR_LOC 25
9337: PUSH
9338: LD_INT 2
9340: ST_TO_ADDR
// cft_03 = 03 ;
9341: LD_ADDR_LOC 26
9345: PUSH
9346: LD_INT 3
9348: ST_TO_ADDR
// cft_04 = 04 ;
9349: LD_ADDR_LOC 27
9353: PUSH
9354: LD_INT 4
9356: ST_TO_ADDR
// cft_05 = 05 ;
9357: LD_ADDR_LOC 28
9361: PUSH
9362: LD_INT 5
9364: ST_TO_ADDR
// cft_06 = 06 ;
9365: LD_ADDR_LOC 29
9369: PUSH
9370: LD_INT 6
9372: ST_TO_ADDR
// cft_07 = 07 ;
9373: LD_ADDR_LOC 30
9377: PUSH
9378: LD_INT 7
9380: ST_TO_ADDR
// nonctf_10 = 10 ;
9381: LD_ADDR_EXP 52
9385: PUSH
9386: LD_INT 10
9388: ST_TO_ADDR
// nonctf_11 = 11 ;
9389: LD_ADDR_EXP 53
9393: PUSH
9394: LD_INT 11
9396: ST_TO_ADDR
// nonctf_12 = 12 ;
9397: LD_ADDR_EXP 54
9401: PUSH
9402: LD_INT 12
9404: ST_TO_ADDR
// nonctf_13 = 13 ;
9405: LD_ADDR_EXP 55
9409: PUSH
9410: LD_INT 13
9412: ST_TO_ADDR
// disable ( cft_01 ) ;
9413: LD_LOC 24
9417: DISABLE_MARKED
// disable ( cft_02 ) ;
9418: LD_LOC 25
9422: DISABLE_MARKED
// disable ( cft_03 ) ;
9423: LD_LOC 26
9427: DISABLE_MARKED
// disable ( cft_04 ) ;
9428: LD_LOC 27
9432: DISABLE_MARKED
// disable ( cft_05 ) ;
9433: LD_LOC 28
9437: DISABLE_MARKED
// disable ( cft_06 ) ;
9438: LD_LOC 29
9442: DISABLE_MARKED
// disable ( cft_07 ) ;
9443: LD_LOC 30
9447: DISABLE_MARKED
// disable ( nonctf_10 ) ;
9448: LD_EXP 52
9452: DISABLE_MARKED
// disable ( nonctf_11 ) ;
9453: LD_EXP 53
9457: DISABLE_MARKED
// disable ( nonctf_12 ) ;
9458: LD_EXP 54
9462: DISABLE_MARKED
// disable ( nonctf_13 ) ;
9463: LD_EXP 55
9467: DISABLE_MARKED
// debug = false ;
9468: LD_ADDR_EXP 46
9472: PUSH
9473: LD_INT 0
9475: ST_TO_ADDR
// if not multiplayer then
9476: LD_OWVAR 4
9480: NOT
9481: IFFALSE 9641
// begin mp_sides_teams_ = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9483: LD_ADDR_EXP 48
9487: PUSH
9488: LD_INT 0
9490: PUSH
9491: LD_INT 0
9493: PUSH
9494: LD_INT 0
9496: PUSH
9497: LD_INT 0
9499: PUSH
9500: LD_INT 0
9502: PUSH
9503: LD_INT 0
9505: PUSH
9506: LD_INT 0
9508: PUSH
9509: LD_INT 0
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: ST_TO_ADDR
// mp_sides_nations_ = [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9522: LD_ADDR_EXP 49
9526: PUSH
9527: LD_INT 1
9529: PUSH
9530: LD_INT 2
9532: PUSH
9533: LD_INT 0
9535: PUSH
9536: LD_INT 0
9538: PUSH
9539: LD_INT 0
9541: PUSH
9542: LD_INT 0
9544: PUSH
9545: LD_INT 0
9547: PUSH
9548: LD_INT 0
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: ST_TO_ADDR
// mp_sides_positions_ = [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9561: LD_ADDR_EXP 50
9565: PUSH
9566: LD_INT 1
9568: PUSH
9569: LD_INT 2
9571: PUSH
9572: LD_INT 0
9574: PUSH
9575: LD_INT 0
9577: PUSH
9578: LD_INT 0
9580: PUSH
9581: LD_INT 0
9583: PUSH
9584: LD_INT 0
9586: PUSH
9587: LD_INT 0
9589: PUSH
9590: EMPTY
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: ST_TO_ADDR
// mp_sides_players_counts_ = [ 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9600: LD_ADDR_EXP 51
9604: PUSH
9605: LD_INT 1
9607: PUSH
9608: LD_INT 1
9610: PUSH
9611: LD_INT 0
9613: PUSH
9614: LD_INT 0
9616: PUSH
9617: LD_INT 0
9619: PUSH
9620: LD_INT 0
9622: PUSH
9623: LD_INT 0
9625: PUSH
9626: LD_INT 0
9628: PUSH
9629: EMPTY
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: ST_TO_ADDR
// end else
9639: GO 9681
// begin mp_sides_teams_ = mp_sides_teams ;
9641: LD_ADDR_EXP 48
9645: PUSH
9646: LD_OWVAR 15
9650: ST_TO_ADDR
// mp_sides_nations_ = mp_sides_nations ;
9651: LD_ADDR_EXP 49
9655: PUSH
9656: LD_OWVAR 16
9660: ST_TO_ADDR
// mp_sides_positions_ = mp_sides_positions ;
9661: LD_ADDR_EXP 50
9665: PUSH
9666: LD_OWVAR 17
9670: ST_TO_ADDR
// mp_sides_players_counts_ = mp_sides_players_counts ;
9671: LD_ADDR_EXP 51
9675: PUSH
9676: LD_OWVAR 18
9680: ST_TO_ADDR
// end ; if debug then
9681: LD_EXP 46
9685: IFFALSE 9767
// begin debuglog ( [ side , your_side ] ) ;
9687: LD_STRING side
9689: PUSH
9690: LD_OWVAR 2
9694: PUSH
9695: EMPTY
9696: LIST
9697: LIST
9698: PPUSH
9699: CALL_OW 359
// debuglog ( [ teams , mp_sides_teams_ ] ) ;
9703: LD_STRING teams
9705: PUSH
9706: LD_EXP 48
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: PPUSH
9715: CALL_OW 359
// debuglog ( [ nations , mp_sides_nations_ ] ) ;
9719: LD_STRING nations
9721: PUSH
9722: LD_EXP 49
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: PPUSH
9731: CALL_OW 359
// debuglog ( [ positions , mp_sides_positions_ ] ) ;
9735: LD_STRING positions
9737: PUSH
9738: LD_EXP 50
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: PPUSH
9747: CALL_OW 359
// debuglog ( [ pl. counts , mp_sides_players_counts_ ] ) ;
9751: LD_STRING pl. counts
9753: PUSH
9754: LD_EXP 51
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: PPUSH
9763: CALL_OW 359
// end ; depotpositions = [ [ 34 , 60 , 1 ] , [ 185 , 60 , 4 ] ] ;
9767: LD_ADDR_EXP 42
9771: PUSH
9772: LD_INT 34
9774: PUSH
9775: LD_INT 60
9777: PUSH
9778: LD_INT 1
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: LIST
9785: PUSH
9786: LD_INT 185
9788: PUSH
9789: LD_INT 60
9791: PUSH
9792: LD_INT 4
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: LIST
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: ST_TO_ADDR
// areas = [ vlevo , vpravo ] ;
9804: LD_ADDR_EXP 43
9808: PUSH
9809: LD_INT 2
9811: PUSH
9812: LD_INT 3
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: ST_TO_ADDR
// if mp_game_type = 3 then
9819: LD_OWVAR 6
9823: PUSH
9824: LD_INT 3
9826: EQUAL
9827: IFFALSE 9835
// begin other_game ;
9829: CALL 12907 0 0
// exit ;
9833: GO 11283
// end ; ctf = true ;
9835: LD_ADDR_EXP 47
9839: PUSH
9840: LD_INT 1
9842: ST_TO_ADDR
// enable ( cft_01 ) ;
9843: LD_LOC 24
9847: ENABLE_MARKED
// enable ( cft_02 ) ;
9848: LD_LOC 25
9852: ENABLE_MARKED
// enable ( cft_05 ) ;
9853: LD_LOC 28
9857: ENABLE_MARKED
// enable ( cft_06 ) ;
9858: LD_LOC 29
9862: ENABLE_MARKED
// enable ( cft_07 ) ;
9863: LD_LOC 30
9867: ENABLE_MARKED
// podvozky = [ us_medium_wheeled , ar_medium_trike , ru_medium_wheeled ] ;
9868: LD_ADDR_LOC 18
9872: PUSH
9873: LD_INT 2
9875: PUSH
9876: LD_INT 13
9878: PUSH
9879: LD_INT 21
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: LIST
9886: ST_TO_ADDR
// zbrane = [ us_cargo_bay , ar_cargo_bay , ru_cargo_bay ] ;
9887: LD_ADDR_LOC 19
9891: PUSH
9892: LD_INT 12
9894: PUSH
9895: LD_INT 32
9897: PUSH
9898: LD_INT 51
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: LIST
9905: ST_TO_ADDR
// left_score = 0 ;
9906: LD_ADDR_LOC 22
9910: PUSH
9911: LD_INT 0
9913: ST_TO_ADDR
// right_score = 0 ;
9914: LD_ADDR_LOC 23
9918: PUSH
9919: LD_INT 0
9921: ST_TO_ADDR
// if multiplayer then
9922: LD_OWVAR 4
9926: IFFALSE 9982
// begin lidi = getmultiplayersetting ( 1 ) ;
9928: LD_ADDR_EXP 37
9932: PUSH
9933: LD_INT 1
9935: PPUSH
9936: CALL_OW 426
9940: ST_TO_ADDR
// krabice = getmultiplayersetting ( 2 ) ;
9941: LD_ADDR_EXP 38
9945: PUSH
9946: LD_INT 2
9948: PPUSH
9949: CALL_OW 426
9953: ST_TO_ADDR
// opoce = getmultiplayersetting ( 3 ) ;
9954: LD_ADDR_EXP 39
9958: PUSH
9959: LD_INT 3
9961: PPUSH
9962: CALL_OW 426
9966: ST_TO_ADDR
// time = getmultiplayersetting ( 4 ) ;
9967: LD_ADDR_LOC 13
9971: PUSH
9972: LD_INT 4
9974: PPUSH
9975: CALL_OW 426
9979: ST_TO_ADDR
// end else
9980: GO 10014
// begin lidi = 1 ;
9982: LD_ADDR_EXP 37
9986: PUSH
9987: LD_INT 1
9989: ST_TO_ADDR
// krabice = 1 ;
9990: LD_ADDR_EXP 38
9994: PUSH
9995: LD_INT 1
9997: ST_TO_ADDR
// opoce = 3 ;
9998: LD_ADDR_EXP 39
10002: PUSH
10003: LD_INT 3
10005: ST_TO_ADDR
// time = 2 ;
10006: LD_ADDR_LOC 13
10010: PUSH
10011: LD_INT 2
10013: ST_TO_ADDR
// end ; case lidi of 0 :
10014: LD_EXP 37
10018: PUSH
10019: LD_INT 0
10021: DOUBLE
10022: EQUAL
10023: IFTRUE 10027
10025: GO 10038
10027: POP
// lidi = 9 ; 1 :
10028: LD_ADDR_EXP 37
10032: PUSH
10033: LD_INT 9
10035: ST_TO_ADDR
10036: GO 10115
10038: LD_INT 1
10040: DOUBLE
10041: EQUAL
10042: IFTRUE 10046
10044: GO 10057
10046: POP
// lidi = 13 ; 2 :
10047: LD_ADDR_EXP 37
10051: PUSH
10052: LD_INT 13
10054: ST_TO_ADDR
10055: GO 10115
10057: LD_INT 2
10059: DOUBLE
10060: EQUAL
10061: IFTRUE 10065
10063: GO 10076
10065: POP
// lidi = 19 ; 3 :
10066: LD_ADDR_EXP 37
10070: PUSH
10071: LD_INT 19
10073: ST_TO_ADDR
10074: GO 10115
10076: LD_INT 3
10078: DOUBLE
10079: EQUAL
10080: IFTRUE 10084
10082: GO 10095
10084: POP
// lidi = 23 ; 4 :
10085: LD_ADDR_EXP 37
10089: PUSH
10090: LD_INT 23
10092: ST_TO_ADDR
10093: GO 10115
10095: LD_INT 4
10097: DOUBLE
10098: EQUAL
10099: IFTRUE 10103
10101: GO 10114
10103: POP
// lidi = 29 ; end ;
10104: LD_ADDR_EXP 37
10108: PUSH
10109: LD_INT 29
10111: ST_TO_ADDR
10112: GO 10115
10114: POP
// case krabice of 0 :
10115: LD_EXP 38
10119: PUSH
10120: LD_INT 0
10122: DOUBLE
10123: EQUAL
10124: IFTRUE 10128
10126: GO 10139
10128: POP
// cperiode = 1 1$30 ; 1 :
10129: LD_ADDR_EXP 41
10133: PUSH
10134: LD_INT 3150
10136: ST_TO_ADDR
10137: GO 10178
10139: LD_INT 1
10141: DOUBLE
10142: EQUAL
10143: IFTRUE 10147
10145: GO 10158
10147: POP
// cperiode = 1 1$00 ; 2 :
10148: LD_ADDR_EXP 41
10152: PUSH
10153: LD_INT 2100
10155: ST_TO_ADDR
10156: GO 10178
10158: LD_INT 2
10160: DOUBLE
10161: EQUAL
10162: IFTRUE 10166
10164: GO 10177
10166: POP
// cperiode = 0 0$30 ; end ;
10167: LD_ADDR_EXP 41
10171: PUSH
10172: LD_INT 1050
10174: ST_TO_ADDR
10175: GO 10178
10177: POP
// cper = 0 0$10 ;
10178: LD_ADDR_EXP 40
10182: PUSH
10183: LD_INT 350
10185: ST_TO_ADDR
// case opoce of 0 :
10186: LD_EXP 39
10190: PUSH
10191: LD_INT 0
10193: DOUBLE
10194: EQUAL
10195: IFTRUE 10199
10197: GO 10210
10199: POP
// opoce = 0 ; 1 :
10200: LD_ADDR_EXP 39
10204: PUSH
10205: LD_INT 0
10207: ST_TO_ADDR
10208: GO 10325
10210: LD_INT 1
10212: DOUBLE
10213: EQUAL
10214: IFTRUE 10218
10216: GO 10229
10218: POP
// opoce = 3 ; 2 :
10219: LD_ADDR_EXP 39
10223: PUSH
10224: LD_INT 3
10226: ST_TO_ADDR
10227: GO 10325
10229: LD_INT 2
10231: DOUBLE
10232: EQUAL
10233: IFTRUE 10237
10235: GO 10248
10237: POP
// opoce = 7 ; 3 :
10238: LD_ADDR_EXP 39
10242: PUSH
10243: LD_INT 7
10245: ST_TO_ADDR
10246: GO 10325
10248: LD_INT 3
10250: DOUBLE
10251: EQUAL
10252: IFTRUE 10256
10254: GO 10267
10256: POP
// opoce = 11 ; 4 :
10257: LD_ADDR_EXP 39
10261: PUSH
10262: LD_INT 11
10264: ST_TO_ADDR
10265: GO 10325
10267: LD_INT 4
10269: DOUBLE
10270: EQUAL
10271: IFTRUE 10275
10273: GO 10286
10275: POP
// opoce = 15 ; 5 :
10276: LD_ADDR_EXP 39
10280: PUSH
10281: LD_INT 15
10283: ST_TO_ADDR
10284: GO 10325
10286: LD_INT 5
10288: DOUBLE
10289: EQUAL
10290: IFTRUE 10294
10292: GO 10305
10294: POP
// opoce = 19 ; 6 :
10295: LD_ADDR_EXP 39
10299: PUSH
10300: LD_INT 19
10302: ST_TO_ADDR
10303: GO 10325
10305: LD_INT 6
10307: DOUBLE
10308: EQUAL
10309: IFTRUE 10313
10311: GO 10324
10313: POP
// opoce = 23 ; end ;
10314: LD_ADDR_EXP 39
10318: PUSH
10319: LD_INT 23
10321: ST_TO_ADDR
10322: GO 10325
10324: POP
// case time of 0 :
10325: LD_LOC 13
10329: PUSH
10330: LD_INT 0
10332: DOUBLE
10333: EQUAL
10334: IFTRUE 10338
10336: GO 10353
10338: POP
// time = 30 * 60 ; 1 :
10339: LD_ADDR_LOC 13
10343: PUSH
10344: LD_INT 30
10346: PUSH
10347: LD_INT 60
10349: MUL
10350: ST_TO_ADDR
10351: GO 10469
10353: LD_INT 1
10355: DOUBLE
10356: EQUAL
10357: IFTRUE 10361
10359: GO 10376
10361: POP
// time = 40 * 60 ; 2 :
10362: LD_ADDR_LOC 13
10366: PUSH
10367: LD_INT 40
10369: PUSH
10370: LD_INT 60
10372: MUL
10373: ST_TO_ADDR
10374: GO 10469
10376: LD_INT 2
10378: DOUBLE
10379: EQUAL
10380: IFTRUE 10384
10382: GO 10399
10384: POP
// time = 50 * 60 ; 3 :
10385: LD_ADDR_LOC 13
10389: PUSH
10390: LD_INT 50
10392: PUSH
10393: LD_INT 60
10395: MUL
10396: ST_TO_ADDR
10397: GO 10469
10399: LD_INT 3
10401: DOUBLE
10402: EQUAL
10403: IFTRUE 10407
10405: GO 10422
10407: POP
// time = 60 * 60 ; 4 :
10408: LD_ADDR_LOC 13
10412: PUSH
10413: LD_INT 60
10415: PUSH
10416: LD_INT 60
10418: MUL
10419: ST_TO_ADDR
10420: GO 10469
10422: LD_INT 4
10424: DOUBLE
10425: EQUAL
10426: IFTRUE 10430
10428: GO 10445
10430: POP
// time = 90 * 60 ; 5 :
10431: LD_ADDR_LOC 13
10435: PUSH
10436: LD_INT 90
10438: PUSH
10439: LD_INT 60
10441: MUL
10442: ST_TO_ADDR
10443: GO 10469
10445: LD_INT 5
10447: DOUBLE
10448: EQUAL
10449: IFTRUE 10453
10451: GO 10468
10453: POP
// time = 120 * 60 ; end ;
10454: LD_ADDR_LOC 13
10458: PUSH
10459: LD_INT 120
10461: PUSH
10462: LD_INT 60
10464: MUL
10465: ST_TO_ADDR
10466: GO 10469
10468: POP
// enable ( cft_03 ) ;
10469: LD_LOC 26
10473: ENABLE_MARKED
// refresh ;
10474: CALL 11288 0 0
// for stmp = 1 to 8 do
10478: LD_ADDR_LOC 31
10482: PUSH
10483: DOUBLE
10484: LD_INT 1
10486: DEC
10487: ST_TO_ADDR
10488: LD_INT 8
10490: PUSH
10491: FOR_TO
10492: IFFALSE 10861
// if mp_sides_nations_ [ stmp ] then
10494: LD_EXP 49
10498: PUSH
10499: LD_LOC 31
10503: ARRAY
10504: IFFALSE 10859
// begin if mp_sides_positions_ [ stmp ] = 1 then
10506: LD_EXP 50
10510: PUSH
10511: LD_LOC 31
10515: ARRAY
10516: PUSH
10517: LD_INT 1
10519: EQUAL
10520: IFFALSE 10534
// pos1side = stmp else
10522: LD_ADDR_EXP 44
10526: PUSH
10527: LD_LOC 31
10531: ST_TO_ADDR
10532: GO 10544
// pos2side = stmp ;
10534: LD_ADDR_EXP 45
10538: PUSH
10539: LD_LOC 31
10543: ST_TO_ADDR
// uc_side = stmp ;
10544: LD_ADDR_OWVAR 20
10548: PUSH
10549: LD_LOC 31
10553: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ stmp ] ;
10554: LD_ADDR_OWVAR 21
10558: PUSH
10559: LD_EXP 49
10563: PUSH
10564: LD_LOC 31
10568: ARRAY
10569: ST_TO_ADDR
// bc_type = b_depot ;
10570: LD_ADDR_OWVAR 42
10574: PUSH
10575: LD_INT 0
10577: ST_TO_ADDR
// bc_level = 1 ;
10578: LD_ADDR_OWVAR 43
10582: PUSH
10583: LD_INT 1
10585: ST_TO_ADDR
// createandplacebuildingxyd ( depotpositions [ mp_sides_positions_ [ stmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 2 ] , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 3 ] ) ;
10586: LD_EXP 42
10590: PUSH
10591: LD_EXP 50
10595: PUSH
10596: LD_LOC 31
10600: ARRAY
10601: ARRAY
10602: PUSH
10603: LD_INT 1
10605: ARRAY
10606: PPUSH
10607: LD_EXP 42
10611: PUSH
10612: LD_EXP 50
10616: PUSH
10617: LD_LOC 31
10621: ARRAY
10622: ARRAY
10623: PUSH
10624: LD_INT 2
10626: ARRAY
10627: PPUSH
10628: LD_EXP 42
10632: PUSH
10633: LD_EXP 50
10637: PUSH
10638: LD_LOC 31
10642: ARRAY
10643: ARRAY
10644: PUSH
10645: LD_INT 3
10647: ARRAY
10648: PPUSH
10649: CALL_OW 47
// setbattleflag ( stmp , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 2 ] , [ [ bfo_defend_bonus_human , 150 ] , [ bfo_defend_bonus_vehicle , 10 ] , [ bfo_defend_bonus_building , 0 ] , [ bfo_range , 17 ] , [ bfo_height , 100 ] ] ) ;
10653: LD_LOC 31
10657: PPUSH
10658: LD_EXP 42
10662: PUSH
10663: LD_EXP 50
10667: PUSH
10668: LD_LOC 31
10672: ARRAY
10673: ARRAY
10674: PUSH
10675: LD_INT 1
10677: ARRAY
10678: PPUSH
10679: LD_EXP 42
10683: PUSH
10684: LD_EXP 50
10688: PUSH
10689: LD_LOC 31
10693: ARRAY
10694: ARRAY
10695: PUSH
10696: LD_INT 2
10698: ARRAY
10699: PPUSH
10700: LD_INT 1
10702: PUSH
10703: LD_INT 150
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: LD_INT 2
10712: PUSH
10713: LD_INT 10
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PUSH
10720: LD_INT 3
10722: PUSH
10723: LD_INT 0
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: PUSH
10730: LD_INT 10
10732: PUSH
10733: LD_INT 17
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: PUSH
10740: LD_INT 20
10742: PUSH
10743: LD_INT 100
10745: PUSH
10746: EMPTY
10747: LIST
10748: LIST
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: PPUSH
10757: CALL_OW 418
// cl = class_engineer ;
10761: LD_ADDR_LOC 33
10765: PUSH
10766: LD_INT 2
10768: ST_TO_ADDR
// for stmp2 = 1 to lidi do
10769: LD_ADDR_LOC 32
10773: PUSH
10774: DOUBLE
10775: LD_INT 1
10777: DEC
10778: ST_TO_ADDR
10779: LD_EXP 37
10783: PUSH
10784: FOR_TO
10785: IFFALSE 10857
// begin if stmp2 >= lidi / 2 then
10787: LD_LOC 32
10791: PUSH
10792: LD_EXP 37
10796: PUSH
10797: LD_INT 2
10799: DIVREAL
10800: GREATEREQUAL
10801: IFFALSE 10811
// cl = class_soldier ;
10803: LD_ADDR_LOC 33
10807: PUSH
10808: LD_INT 1
10810: ST_TO_ADDR
// preparehuman ( 0 , cl , 1 ) ;
10811: LD_INT 0
10813: PPUSH
10814: LD_LOC 33
10818: PPUSH
10819: LD_INT 1
10821: PPUSH
10822: CALL_OW 380
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ stmp ] ] , false ) ;
10826: CALL_OW 44
10830: PPUSH
10831: LD_EXP 43
10835: PUSH
10836: LD_EXP 50
10840: PUSH
10841: LD_LOC 31
10845: ARRAY
10846: ARRAY
10847: PPUSH
10848: LD_INT 0
10850: PPUSH
10851: CALL_OW 49
// end ;
10855: GO 10784
10857: POP
10858: POP
// end ;
10859: GO 10491
10861: POP
10862: POP
// depot1 = filterunitsinarea ( vlevo , [ [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
10863: LD_ADDR_LOC 14
10867: PUSH
10868: LD_INT 2
10870: PPUSH
10871: LD_INT 21
10873: PUSH
10874: LD_INT 3
10876: PUSH
10877: EMPTY
10878: LIST
10879: LIST
10880: PUSH
10881: LD_INT 30
10883: PUSH
10884: LD_INT 0
10886: PUSH
10887: EMPTY
10888: LIST
10889: LIST
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PPUSH
10895: CALL_OW 70
10899: PUSH
10900: LD_INT 1
10902: ARRAY
10903: ST_TO_ADDR
// depot2 = filterunitsinarea ( vpravo , [ [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
10904: LD_ADDR_LOC 15
10908: PUSH
10909: LD_INT 3
10911: PPUSH
10912: LD_INT 21
10914: PUSH
10915: LD_INT 3
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PUSH
10922: LD_INT 30
10924: PUSH
10925: LD_INT 0
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: PPUSH
10936: CALL_OW 70
10940: PUSH
10941: LD_INT 1
10943: ARRAY
10944: ST_TO_ADDR
// pos1base = getbase ( depot1 ) ;
10945: LD_ADDR_LOC 20
10949: PUSH
10950: LD_LOC 14
10954: PPUSH
10955: CALL_OW 274
10959: ST_TO_ADDR
// pos2base = getbase ( depot2 ) ;
10960: LD_ADDR_LOC 21
10964: PUSH
10965: LD_LOC 15
10969: PPUSH
10970: CALL_OW 274
10974: ST_TO_ADDR
// uc_side = 0 ;
10975: LD_ADDR_OWVAR 20
10979: PUSH
10980: LD_INT 0
10982: ST_TO_ADDR
// uc_nation = nation_nature ;
10983: LD_ADDR_OWVAR 21
10987: PUSH
10988: LD_INT 0
10990: ST_TO_ADDR
// for stmp = 1 to opoce do
10991: LD_ADDR_LOC 31
10995: PUSH
10996: DOUBLE
10997: LD_INT 1
10999: DEC
11000: ST_TO_ADDR
11001: LD_EXP 39
11005: PUSH
11006: FOR_TO
11007: IFFALSE 11039
// begin preparehuman ( 0 , class_apeman , 0 ) ;
11009: LD_INT 0
11011: PPUSH
11012: LD_INT 12
11014: PPUSH
11015: LD_INT 0
11017: PPUSH
11018: CALL_OW 380
// placeunitarea ( createhuman , les , false ) ;
11022: CALL_OW 44
11026: PPUSH
11027: LD_INT 4
11029: PPUSH
11030: LD_INT 0
11032: PPUSH
11033: CALL_OW 49
// end ;
11037: GO 11006
11039: POP
11040: POP
// uc_side = pos2side ;
11041: LD_ADDR_OWVAR 20
11045: PUSH
11046: LD_EXP 45
11050: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos2side ] ;
11051: LD_ADDR_OWVAR 21
11055: PUSH
11056: LD_EXP 49
11060: PUSH
11061: LD_EXP 45
11065: ARRAY
11066: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11067: LD_ADDR_OWVAR 37
11071: PUSH
11072: LD_LOC 18
11076: PUSH
11077: LD_OWVAR 21
11081: ARRAY
11082: ST_TO_ADDR
// vc_control = control_manual ;
11083: LD_ADDR_OWVAR 38
11087: PUSH
11088: LD_INT 1
11090: ST_TO_ADDR
// vc_engine = engine_siberite ;
11091: LD_ADDR_OWVAR 39
11095: PUSH
11096: LD_INT 3
11098: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
11099: LD_ADDR_OWVAR 40
11103: PUSH
11104: LD_LOC 19
11108: PUSH
11109: LD_OWVAR 21
11113: ARRAY
11114: ST_TO_ADDR
// vlajka1 = createvehicle ;
11115: LD_ADDR_LOC 16
11119: PUSH
11120: CALL_OW 45
11124: ST_TO_ADDR
// placeunitxy ( vlajka1 , 76 , 60 , false ) ;
11125: LD_LOC 16
11129: PPUSH
11130: LD_INT 76
11132: PPUSH
11133: LD_INT 60
11135: PPUSH
11136: LD_INT 0
11138: PPUSH
11139: CALL_OW 48
// uc_side = pos1side ;
11143: LD_ADDR_OWVAR 20
11147: PUSH
11148: LD_EXP 44
11152: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos1side ] ;
11153: LD_ADDR_OWVAR 21
11157: PUSH
11158: LD_EXP 49
11162: PUSH
11163: LD_EXP 44
11167: ARRAY
11168: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11169: LD_ADDR_OWVAR 37
11173: PUSH
11174: LD_LOC 18
11178: PUSH
11179: LD_OWVAR 21
11183: ARRAY
11184: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
11185: LD_ADDR_OWVAR 40
11189: PUSH
11190: LD_LOC 19
11194: PUSH
11195: LD_OWVAR 21
11199: ARRAY
11200: ST_TO_ADDR
// vlajka2 = createvehicle ;
11201: LD_ADDR_LOC 17
11205: PUSH
11206: CALL_OW 45
11210: ST_TO_ADDR
// placeunitxy ( vlajka2 , 143 , 60 , false ) ;
11211: LD_LOC 17
11215: PPUSH
11216: LD_INT 143
11218: PPUSH
11219: LD_INT 60
11221: PPUSH
11222: LD_INT 0
11224: PPUSH
11225: CALL_OW 48
// case mp_sides_positions_ [ your_side ] of 1 :
11229: LD_EXP 50
11233: PUSH
11234: LD_OWVAR 2
11238: ARRAY
11239: PUSH
11240: LD_INT 1
11242: DOUBLE
11243: EQUAL
11244: IFTRUE 11248
11246: GO 11261
11248: POP
// centernowonxy ( 44 , 60 ) ; 2 :
11249: LD_INT 44
11251: PPUSH
11252: LD_INT 60
11254: PPUSH
11255: CALL_OW 86
11259: GO 11283
11261: LD_INT 2
11263: DOUBLE
11264: EQUAL
11265: IFTRUE 11269
11267: GO 11282
11269: POP
// centernowonxy ( 175 , 60 ) ; end ;
11270: LD_INT 175
11272: PPUSH
11273: LD_INT 60
11275: PPUSH
11276: CALL_OW 86
11280: GO 11283
11282: POP
// end ;
11283: LD_VAR 0 1
11287: RET
// function refresh ; var tmp , tmp1 , tmp2 , tmp3 , tmp4 ; begin
11288: LD_INT 0
11290: PPUSH
11291: PPUSH
11292: PPUSH
11293: PPUSH
11294: PPUSH
11295: PPUSH
// tmp = time div 60 ;
11296: LD_ADDR_VAR 0 2
11300: PUSH
11301: LD_LOC 13
11305: PUSH
11306: LD_INT 60
11308: DIV
11309: ST_TO_ADDR
// if tmp < 10 then
11310: LD_VAR 0 2
11314: PUSH
11315: LD_INT 10
11317: LESS
11318: IFFALSE 11336
// tmp1 = 0 & tmp else
11320: LD_ADDR_VAR 0 3
11324: PUSH
11325: LD_STRING 0
11327: PUSH
11328: LD_VAR 0 2
11332: STR
11333: ST_TO_ADDR
11334: GO 11350
// tmp1 =  & tmp ;
11336: LD_ADDR_VAR 0 3
11340: PUSH
11341: LD_STRING 
11343: PUSH
11344: LD_VAR 0 2
11348: STR
11349: ST_TO_ADDR
// tmp = time mod 60 ;
11350: LD_ADDR_VAR 0 2
11354: PUSH
11355: LD_LOC 13
11359: PUSH
11360: LD_INT 60
11362: MOD
11363: ST_TO_ADDR
// if tmp < 10 then
11364: LD_VAR 0 2
11368: PUSH
11369: LD_INT 10
11371: LESS
11372: IFFALSE 11390
// tmp2 = 0 & tmp else
11374: LD_ADDR_VAR 0 4
11378: PUSH
11379: LD_STRING 0
11381: PUSH
11382: LD_VAR 0 2
11386: STR
11387: ST_TO_ADDR
11388: GO 11404
// tmp2 =  & tmp ;
11390: LD_ADDR_VAR 0 4
11394: PUSH
11395: LD_STRING 
11397: PUSH
11398: LD_VAR 0 2
11402: STR
11403: ST_TO_ADDR
// if left_score < 10 then
11404: LD_LOC 22
11408: PUSH
11409: LD_INT 10
11411: LESS
11412: IFFALSE 11430
// tmp3 = 0 & left_score else
11414: LD_ADDR_VAR 0 5
11418: PUSH
11419: LD_STRING 0
11421: PUSH
11422: LD_LOC 22
11426: STR
11427: ST_TO_ADDR
11428: GO 11444
// tmp3 =  & left_score ;
11430: LD_ADDR_VAR 0 5
11434: PUSH
11435: LD_STRING 
11437: PUSH
11438: LD_LOC 22
11442: STR
11443: ST_TO_ADDR
// if right_score < 10 then
11444: LD_LOC 23
11448: PUSH
11449: LD_INT 10
11451: LESS
11452: IFFALSE 11470
// tmp4 = 0 & right_score else
11454: LD_ADDR_VAR 0 6
11458: PUSH
11459: LD_STRING 0
11461: PUSH
11462: LD_LOC 23
11466: STR
11467: ST_TO_ADDR
11468: GO 11484
// tmp4 =  & right_score ;
11470: LD_ADDR_VAR 0 6
11474: PUSH
11475: LD_STRING 
11477: PUSH
11478: LD_LOC 23
11482: STR
11483: ST_TO_ADDR
// display_strings = [ Score:  & tmp3 &  to  & tmp4 , Time left:  & tmp1 & : & tmp2 ] ;
11484: LD_ADDR_OWVAR 47
11488: PUSH
11489: LD_STRING Score: 
11491: PUSH
11492: LD_VAR 0 5
11496: STR
11497: PUSH
11498: LD_STRING  to 
11500: STR
11501: PUSH
11502: LD_VAR 0 6
11506: STR
11507: PUSH
11508: LD_STRING Time left: 
11510: PUSH
11511: LD_VAR 0 3
11515: STR
11516: PUSH
11517: LD_STRING :
11519: STR
11520: PUSH
11521: LD_VAR 0 4
11525: STR
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: ST_TO_ADDR
// end ;
11531: LD_VAR 0 1
11535: RET
// every 0 0$1 marked 03 do
11536: GO 11538
11538: DISABLE
// begin time = time - 1 ;
11539: LD_ADDR_LOC 13
11543: PUSH
11544: LD_LOC 13
11548: PUSH
11549: LD_INT 1
11551: MINUS
11552: ST_TO_ADDR
// refresh ;
11553: CALL 11288 0 0
// if not time then
11557: LD_LOC 13
11561: NOT
11562: IFFALSE 11628
// if mp_sides_positions_ [ your_side ] = 1 then
11564: LD_EXP 50
11568: PUSH
11569: LD_OWVAR 2
11573: ARRAY
11574: PUSH
11575: LD_INT 1
11577: EQUAL
11578: IFFALSE 11604
// if left_score >= right_score then
11580: LD_LOC 22
11584: PUSH
11585: LD_LOC 23
11589: GREATEREQUAL
11590: IFFALSE 11598
// youwininmultiplayer else
11592: CALL_OW 106
11596: GO 11602
// youlostinmultiplayer else
11598: CALL_OW 107
11602: GO 11626
// if right_score >= left_score then
11604: LD_LOC 23
11608: PUSH
11609: LD_LOC 22
11613: GREATEREQUAL
11614: IFFALSE 11622
// youwininmultiplayer else
11616: CALL_OW 106
11620: GO 11626
// youlostinmultiplayer else
11622: CALL_OW 107
11626: GO 11629
// enable ;
11628: ENABLE
// end ;
11629: END
// every 0 0$10 marked 19 do
11630: GO 11632
11632: DISABLE
// begin cper = cper - 0 0$10 ;
11633: LD_ADDR_EXP 40
11637: PUSH
11638: LD_EXP 40
11642: PUSH
11643: LD_INT 350
11645: MINUS
11646: ST_TO_ADDR
// if cper = 0 then
11647: LD_EXP 40
11651: PUSH
11652: LD_INT 0
11654: EQUAL
11655: IFFALSE 11693
// begin createcratesarea ( 5 , vlevoex , true ) ;
11657: LD_INT 5
11659: PPUSH
11660: LD_INT 5
11662: PPUSH
11663: LD_INT 1
11665: PPUSH
11666: CALL_OW 55
// createcratesarea ( 5 , vpravoex , true ) ;
11670: LD_INT 5
11672: PPUSH
11673: LD_INT 6
11675: PPUSH
11676: LD_INT 1
11678: PPUSH
11679: CALL_OW 55
// cper = cperiode ;
11683: LD_ADDR_EXP 40
11687: PUSH
11688: LD_EXP 41
11692: ST_TO_ADDR
// end ; enable ;
11693: ENABLE
// end ;
11694: END
// every 5 trigger getlives ( depot1 ) < 500 marked 01 do
11695: LD_LOC 14
11699: PPUSH
11700: CALL_OW 256
11704: PUSH
11705: LD_INT 500
11707: LESS
11708: IFFALSE 11726
11710: GO 11712
11712: DISABLE
// begin setlives ( depot1 , 750 ) ;
11713: LD_LOC 14
11717: PPUSH
11718: LD_INT 750
11720: PPUSH
11721: CALL_OW 234
// enable ;
11725: ENABLE
// end ;
11726: END
// every 5 trigger getlives ( depot2 ) < 500 marked 02 do
11727: LD_LOC 15
11731: PPUSH
11732: CALL_OW 256
11736: PUSH
11737: LD_INT 500
11739: LESS
11740: IFFALSE 11758
11742: GO 11744
11744: DISABLE
// begin setlives ( depot2 , 750 ) ;
11745: LD_LOC 15
11749: PPUSH
11750: LD_INT 750
11752: PPUSH
11753: CALL_OW 234
// enable ;
11757: ENABLE
// end ;
11758: END
// on unitdestroyed ( un ) do var radius ;
11759: LD_INT 0
11761: PPUSH
// begin if GetClass ( un ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
11762: LD_VAR 0 1
11766: PPUSH
11767: CALL_OW 257
11771: PUSH
11772: LD_INT 12
11774: PUSH
11775: LD_INT 15
11777: PUSH
11778: LD_INT 17
11780: PUSH
11781: LD_INT 16
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: IN
11790: PUSH
11791: LD_VAR 0 1
11795: PPUSH
11796: CALL_OW 263
11800: PUSH
11801: LD_INT 5
11803: EQUAL
11804: OR
11805: IFFALSE 11816
// ApeKilled ( un ) ;
11807: LD_VAR 0 1
11811: PPUSH
11812: CALL 8171 0 1
// if mp_game_type <> 1 then
11816: LD_OWVAR 6
11820: PUSH
11821: LD_INT 1
11823: NONEQUAL
11824: IFFALSE 11828
// exit ;
11826: GO 12122
// if un = vlajka1 then
11828: LD_VAR 0 1
11832: PUSH
11833: LD_LOC 16
11837: EQUAL
11838: IFFALSE 11976
// begin uc_side = pos2side ;
11840: LD_ADDR_OWVAR 20
11844: PUSH
11845: LD_EXP 45
11849: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos2side ] ;
11850: LD_ADDR_OWVAR 21
11854: PUSH
11855: LD_EXP 49
11859: PUSH
11860: LD_EXP 45
11864: ARRAY
11865: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11866: LD_ADDR_OWVAR 37
11870: PUSH
11871: LD_LOC 18
11875: PUSH
11876: LD_OWVAR 21
11880: ARRAY
11881: ST_TO_ADDR
// vc_control = control_manual ;
11882: LD_ADDR_OWVAR 38
11886: PUSH
11887: LD_INT 1
11889: ST_TO_ADDR
// vc_engine = engine_siberite ;
11890: LD_ADDR_OWVAR 39
11894: PUSH
11895: LD_INT 3
11897: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
11898: LD_ADDR_OWVAR 40
11902: PUSH
11903: LD_LOC 19
11907: PUSH
11908: LD_OWVAR 21
11912: ARRAY
11913: ST_TO_ADDR
// vlajka1 = createvehicle ;
11914: LD_ADDR_LOC 16
11918: PUSH
11919: CALL_OW 45
11923: ST_TO_ADDR
// radius = 2 ;
11924: LD_ADDR_VAR 0 2
11928: PUSH
11929: LD_INT 2
11931: ST_TO_ADDR
// while not placeunitxyr ( vlajka1 , 76 , 60 , radius , false ) do
11932: LD_LOC 16
11936: PPUSH
11937: LD_INT 76
11939: PPUSH
11940: LD_INT 60
11942: PPUSH
11943: LD_VAR 0 2
11947: PPUSH
11948: LD_INT 0
11950: PPUSH
11951: CALL_OW 50
11955: NOT
11956: IFFALSE 11974
// radius = radius + 1 ;
11958: LD_ADDR_VAR 0 2
11962: PUSH
11963: LD_VAR 0 2
11967: PUSH
11968: LD_INT 1
11970: PLUS
11971: ST_TO_ADDR
11972: GO 11932
// end else
11974: GO 12122
// if un = vlajka2 then
11976: LD_VAR 0 1
11980: PUSH
11981: LD_LOC 17
11985: EQUAL
11986: IFFALSE 12122
// begin uc_side = pos1side ;
11988: LD_ADDR_OWVAR 20
11992: PUSH
11993: LD_EXP 44
11997: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos1side ] ;
11998: LD_ADDR_OWVAR 21
12002: PUSH
12003: LD_EXP 49
12007: PUSH
12008: LD_EXP 44
12012: ARRAY
12013: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
12014: LD_ADDR_OWVAR 37
12018: PUSH
12019: LD_LOC 18
12023: PUSH
12024: LD_OWVAR 21
12028: ARRAY
12029: ST_TO_ADDR
// vc_control = control_manual ;
12030: LD_ADDR_OWVAR 38
12034: PUSH
12035: LD_INT 1
12037: ST_TO_ADDR
// vc_engine = engine_siberite ;
12038: LD_ADDR_OWVAR 39
12042: PUSH
12043: LD_INT 3
12045: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
12046: LD_ADDR_OWVAR 40
12050: PUSH
12051: LD_LOC 19
12055: PUSH
12056: LD_OWVAR 21
12060: ARRAY
12061: ST_TO_ADDR
// vlajka2 = createvehicle ;
12062: LD_ADDR_LOC 17
12066: PUSH
12067: CALL_OW 45
12071: ST_TO_ADDR
// radius = 2 ;
12072: LD_ADDR_VAR 0 2
12076: PUSH
12077: LD_INT 2
12079: ST_TO_ADDR
// while not placeunitxyr ( vlajka2 , 143 , 60 , radius , false ) do
12080: LD_LOC 17
12084: PPUSH
12085: LD_INT 143
12087: PPUSH
12088: LD_INT 60
12090: PPUSH
12091: LD_VAR 0 2
12095: PPUSH
12096: LD_INT 0
12098: PPUSH
12099: CALL_OW 50
12103: NOT
12104: IFFALSE 12122
// radius = radius + 1 ;
12106: LD_ADDR_VAR 0 2
12110: PUSH
12111: LD_VAR 0 2
12115: PUSH
12116: LD_INT 1
12118: PLUS
12119: ST_TO_ADDR
12120: GO 12080
// end ; end ;
12122: PPOPN 2
12124: END
// on vehiclecaptured ( vehnew , vehold , origside , hum ) marked 05 do var radius ;
12125: LD_INT 0
12127: PPUSH
// if ( vehold = vlajka1 ) then
12128: LD_VAR 0 2
12132: PUSH
12133: LD_LOC 16
12137: EQUAL
12138: IFFALSE 12291
// begin vlajka1 = vehnew ;
12140: LD_ADDR_LOC 16
12144: PUSH
12145: LD_VAR 0 1
12149: ST_TO_ADDR
// comexitvehicle ( vlajka1 ) ;
12150: LD_LOC 16
12154: PPUSH
12155: CALL_OW 121
// while isdrivenby ( vlajka1 ) do
12159: LD_LOC 16
12163: PPUSH
12164: CALL_OW 311
12168: IFFALSE 12179
// wait ( 2 ) ;
12170: LD_INT 2
12172: PPUSH
12173: CALL_OW 67
12177: GO 12159
// if getdistunitxy ( vlajka1 , 76 , 60 ) > 4 then
12179: LD_LOC 16
12183: PPUSH
12184: LD_INT 76
12186: PPUSH
12187: LD_INT 60
12189: PPUSH
12190: CALL_OW 297
12194: PUSH
12195: LD_INT 4
12197: GREATER
12198: IFFALSE 12275
// begin removeunit ( vlajka1 ) ;
12200: LD_LOC 16
12204: PPUSH
12205: CALL_OW 64
// setside ( vlajka1 , origside ) ;
12209: LD_LOC 16
12213: PPUSH
12214: LD_VAR 0 3
12218: PPUSH
12219: CALL_OW 235
// radius = 2 ;
12223: LD_ADDR_VAR 0 5
12227: PUSH
12228: LD_INT 2
12230: ST_TO_ADDR
// while not placeunitxyr ( vlajka1 , 76 , 60 , radius , false ) do
12231: LD_LOC 16
12235: PPUSH
12236: LD_INT 76
12238: PPUSH
12239: LD_INT 60
12241: PPUSH
12242: LD_VAR 0 5
12246: PPUSH
12247: LD_INT 0
12249: PPUSH
12250: CALL_OW 50
12254: NOT
12255: IFFALSE 12273
// radius = radius + 1 ;
12257: LD_ADDR_VAR 0 5
12261: PUSH
12262: LD_VAR 0 5
12266: PUSH
12267: LD_INT 1
12269: PLUS
12270: ST_TO_ADDR
12271: GO 12231
// end else
12273: GO 12289
// setside ( vlajka1 , origside ) ;
12275: LD_LOC 16
12279: PPUSH
12280: LD_VAR 0 3
12284: PPUSH
12285: CALL_OW 235
// end else
12289: GO 12452
// if ( vehold = vlajka2 ) then
12291: LD_VAR 0 2
12295: PUSH
12296: LD_LOC 17
12300: EQUAL
12301: IFFALSE 12452
// begin vlajka2 = vehnew ;
12303: LD_ADDR_LOC 17
12307: PUSH
12308: LD_VAR 0 1
12312: ST_TO_ADDR
// comexitvehicle ( vlajka2 ) ;
12313: LD_LOC 17
12317: PPUSH
12318: CALL_OW 121
// while isdrivenby ( vlajka2 ) do
12322: LD_LOC 17
12326: PPUSH
12327: CALL_OW 311
12331: IFFALSE 12342
// wait ( 2 ) ;
12333: LD_INT 2
12335: PPUSH
12336: CALL_OW 67
12340: GO 12322
// if getdistunitxy ( vlajka2 , 143 , 60 ) > 4 then
12342: LD_LOC 17
12346: PPUSH
12347: LD_INT 143
12349: PPUSH
12350: LD_INT 60
12352: PPUSH
12353: CALL_OW 297
12357: PUSH
12358: LD_INT 4
12360: GREATER
12361: IFFALSE 12438
// begin removeunit ( vlajka2 ) ;
12363: LD_LOC 17
12367: PPUSH
12368: CALL_OW 64
// setside ( vlajka2 , origside ) ;
12372: LD_LOC 17
12376: PPUSH
12377: LD_VAR 0 3
12381: PPUSH
12382: CALL_OW 235
// radius = 2 ;
12386: LD_ADDR_VAR 0 5
12390: PUSH
12391: LD_INT 2
12393: ST_TO_ADDR
// while not placeunitxyr ( vlajka2 , 143 , 60 , radius , false ) do
12394: LD_LOC 17
12398: PPUSH
12399: LD_INT 143
12401: PPUSH
12402: LD_INT 60
12404: PPUSH
12405: LD_VAR 0 5
12409: PPUSH
12410: LD_INT 0
12412: PPUSH
12413: CALL_OW 50
12417: NOT
12418: IFFALSE 12436
// radius = radius + 1 ;
12420: LD_ADDR_VAR 0 5
12424: PUSH
12425: LD_VAR 0 5
12429: PUSH
12430: LD_INT 1
12432: PLUS
12433: ST_TO_ADDR
12434: GO 12394
// end else
12436: GO 12452
// setside ( vlajka2 , origside ) ;
12438: LD_LOC 17
12442: PPUSH
12443: LD_VAR 0 3
12447: PPUSH
12448: CALL_OW 235
// end ;
12452: PPOPN 5
12454: END
// every 10 + 1 trigger getdistunitxy ( vlajka1 , 185 , 60 ) < 6 marked 06 do var radius , tmp ;
12455: LD_LOC 16
12459: PPUSH
12460: LD_INT 185
12462: PPUSH
12463: LD_INT 60
12465: PPUSH
12466: CALL_OW 297
12470: PUSH
12471: LD_INT 6
12473: LESS
12474: IFFALSE 12678
12476: GO 12478
12478: DISABLE
12479: LD_INT 0
12481: PPUSH
12482: PPUSH
// begin right_score = right_score + 1 ;
12483: LD_ADDR_LOC 23
12487: PUSH
12488: LD_LOC 23
12492: PUSH
12493: LD_INT 1
12495: PLUS
12496: ST_TO_ADDR
// refresh ;
12497: CALL 11288 0 0
// comexitvehicle ( vlajka1 ) ;
12501: LD_LOC 16
12505: PPUSH
12506: CALL_OW 121
// while isdrivenby ( vlajka1 ) do
12510: LD_LOC 16
12514: PPUSH
12515: CALL_OW 311
12519: IFFALSE 12530
// wait ( 2 ) ;
12521: LD_INT 2
12523: PPUSH
12524: CALL_OW 67
12528: GO 12510
// removeunit ( vlajka1 ) ;
12530: LD_LOC 16
12534: PPUSH
12535: CALL_OW 64
// for radius in [ mat_cans , mat_oil , mat_siberit ] do
12539: LD_ADDR_VAR 0 1
12543: PUSH
12544: LD_INT 1
12546: PUSH
12547: LD_INT 2
12549: PUSH
12550: LD_INT 3
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: LIST
12557: PUSH
12558: FOR_IN
12559: IFFALSE 12625
// begin tmp = getcargo ( vlajka1 , radius ) ;
12561: LD_ADDR_VAR 0 2
12565: PUSH
12566: LD_LOC 16
12570: PPUSH
12571: LD_VAR 0 1
12575: PPUSH
12576: CALL_OW 289
12580: ST_TO_ADDR
// if tmp then
12581: LD_VAR 0 2
12585: IFFALSE 12623
// begin addresourcetype ( pos2base , radius , tmp ) ;
12587: LD_LOC 21
12591: PPUSH
12592: LD_VAR 0 1
12596: PPUSH
12597: LD_VAR 0 2
12601: PPUSH
12602: CALL_OW 276
// setcargo ( vlajka1 , radius , 0 ) ;
12606: LD_LOC 16
12610: PPUSH
12611: LD_VAR 0 1
12615: PPUSH
12616: LD_INT 0
12618: PPUSH
12619: CALL_OW 290
// end ; end ;
12623: GO 12558
12625: POP
12626: POP
// radius = 2 ;
12627: LD_ADDR_VAR 0 1
12631: PUSH
12632: LD_INT 2
12634: ST_TO_ADDR
// while not placeunitxyr ( vlajka1 , 76 , 60 , radius , false ) do
12635: LD_LOC 16
12639: PPUSH
12640: LD_INT 76
12642: PPUSH
12643: LD_INT 60
12645: PPUSH
12646: LD_VAR 0 1
12650: PPUSH
12651: LD_INT 0
12653: PPUSH
12654: CALL_OW 50
12658: NOT
12659: IFFALSE 12677
// radius = radius + 1 ;
12661: LD_ADDR_VAR 0 1
12665: PUSH
12666: LD_VAR 0 1
12670: PUSH
12671: LD_INT 1
12673: PLUS
12674: ST_TO_ADDR
12675: GO 12635
// enable ;
12677: ENABLE
// end ;
12678: PPOPN 2
12680: END
// every 10 trigger getdistunitxy ( vlajka2 , 34 , 60 ) < 6 marked 07 do var radius , tmp ;
12681: LD_LOC 17
12685: PPUSH
12686: LD_INT 34
12688: PPUSH
12689: LD_INT 60
12691: PPUSH
12692: CALL_OW 297
12696: PUSH
12697: LD_INT 6
12699: LESS
12700: IFFALSE 12904
12702: GO 12704
12704: DISABLE
12705: LD_INT 0
12707: PPUSH
12708: PPUSH
// begin left_score = left_score + 1 ;
12709: LD_ADDR_LOC 22
12713: PUSH
12714: LD_LOC 22
12718: PUSH
12719: LD_INT 1
12721: PLUS
12722: ST_TO_ADDR
// refresh ;
12723: CALL 11288 0 0
// comexitvehicle ( vlajka2 ) ;
12727: LD_LOC 17
12731: PPUSH
12732: CALL_OW 121
// while isdrivenby ( vlajka2 ) do
12736: LD_LOC 17
12740: PPUSH
12741: CALL_OW 311
12745: IFFALSE 12756
// wait ( 2 ) ;
12747: LD_INT 2
12749: PPUSH
12750: CALL_OW 67
12754: GO 12736
// removeunit ( vlajka2 ) ;
12756: LD_LOC 17
12760: PPUSH
12761: CALL_OW 64
// for radius in [ mat_cans , mat_oil , mat_siberit ] do
12765: LD_ADDR_VAR 0 1
12769: PUSH
12770: LD_INT 1
12772: PUSH
12773: LD_INT 2
12775: PUSH
12776: LD_INT 3
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: LIST
12783: PUSH
12784: FOR_IN
12785: IFFALSE 12851
// begin tmp = getcargo ( vlajka2 , radius ) ;
12787: LD_ADDR_VAR 0 2
12791: PUSH
12792: LD_LOC 17
12796: PPUSH
12797: LD_VAR 0 1
12801: PPUSH
12802: CALL_OW 289
12806: ST_TO_ADDR
// if tmp then
12807: LD_VAR 0 2
12811: IFFALSE 12849
// begin addresourcetype ( pos1base , radius , tmp ) ;
12813: LD_LOC 20
12817: PPUSH
12818: LD_VAR 0 1
12822: PPUSH
12823: LD_VAR 0 2
12827: PPUSH
12828: CALL_OW 276
// setcargo ( vlajka2 , radius , 0 ) ;
12832: LD_LOC 17
12836: PPUSH
12837: LD_VAR 0 1
12841: PPUSH
12842: LD_INT 0
12844: PPUSH
12845: CALL_OW 290
// end ; end ;
12849: GO 12784
12851: POP
12852: POP
// radius = 2 ;
12853: LD_ADDR_VAR 0 1
12857: PUSH
12858: LD_INT 2
12860: ST_TO_ADDR
// while not placeunitxyr ( vlajka2 , 143 , 60 , radius , false ) do
12861: LD_LOC 17
12865: PPUSH
12866: LD_INT 143
12868: PPUSH
12869: LD_INT 60
12871: PPUSH
12872: LD_VAR 0 1
12876: PPUSH
12877: LD_INT 0
12879: PPUSH
12880: CALL_OW 50
12884: NOT
12885: IFFALSE 12903
// radius = radius + 1 ;
12887: LD_ADDR_VAR 0 1
12891: PUSH
12892: LD_VAR 0 1
12896: PUSH
12897: LD_INT 1
12899: PLUS
12900: ST_TO_ADDR
12901: GO 12861
// enable ;
12903: ENABLE
// end ; end_of_file
12904: PPOPN 2
12906: END
// var zakladna , skilly , start_res , extra_oil , extra_sib , zakl_plus , batt_fl , sib_det , people_resp , siberitofka ; var fortpos , areasdiff , directions ; var resp_cnt1 , resp_cnt2 ; export function other_game ; var tmp , tmp2 , tmp3 , cl ; begin
12907: LD_INT 0
12909: PPUSH
12910: PPUSH
12911: PPUSH
12912: PPUSH
12913: PPUSH
// ctf = false ;
12914: LD_ADDR_EXP 47
12918: PUSH
12919: LD_INT 0
12921: ST_TO_ADDR
// resp_cnt1 = 0 ;
12922: LD_ADDR_LOC 47
12926: PUSH
12927: LD_INT 0
12929: ST_TO_ADDR
// resp_cnt2 = 0 ;
12930: LD_ADDR_LOC 48
12934: PUSH
12935: LD_INT 0
12937: ST_TO_ADDR
// enable ( nonctf_13 ) ;
12938: LD_EXP 55
12942: ENABLE_MARKED
// for tmp = 1 to 8 do
12943: LD_ADDR_VAR 0 2
12947: PUSH
12948: DOUBLE
12949: LD_INT 1
12951: DEC
12952: ST_TO_ADDR
12953: LD_INT 8
12955: PUSH
12956: FOR_TO
12957: IFFALSE 13018
// begin setrestrict ( b_depot , tmp , state_enabled ) ;
12959: LD_INT 0
12961: PPUSH
12962: LD_VAR 0 2
12966: PPUSH
12967: LD_INT 1
12969: PPUSH
12970: CALL_OW 324
// if sib_det then
12974: LD_LOC 41
12978: IFFALSE 12995
// settech ( tech_sibdet , tmp , state_researched ) ;
12980: LD_INT 20
12982: PPUSH
12983: LD_VAR 0 2
12987: PPUSH
12988: LD_INT 2
12990: PPUSH
12991: CALL_OW 322
// if siberitofka then
12995: LD_LOC 43
12999: IFFALSE 13016
// settech ( tech_sibfiss , tmp , state_enabled ) ;
13001: LD_INT 25
13003: PPUSH
13004: LD_VAR 0 2
13008: PPUSH
13009: LD_INT 1
13011: PPUSH
13012: CALL_OW 322
// end ;
13016: GO 12956
13018: POP
13019: POP
// if multiplayer then
13020: LD_OWVAR 4
13024: IFFALSE 13197
// begin zakladna = getmultiplayersetting ( 0 ) ;
13026: LD_ADDR_LOC 34
13030: PUSH
13031: LD_INT 0
13033: PPUSH
13034: CALL_OW 426
13038: ST_TO_ADDR
// lidi = getmultiplayersetting ( 1 ) ;
13039: LD_ADDR_EXP 37
13043: PUSH
13044: LD_INT 1
13046: PPUSH
13047: CALL_OW 426
13051: ST_TO_ADDR
// skilly = getmultiplayersetting ( 2 ) ;
13052: LD_ADDR_LOC 35
13056: PUSH
13057: LD_INT 2
13059: PPUSH
13060: CALL_OW 426
13064: ST_TO_ADDR
// start_res = getmultiplayersetting ( 3 ) ;
13065: LD_ADDR_LOC 36
13069: PUSH
13070: LD_INT 3
13072: PPUSH
13073: CALL_OW 426
13077: ST_TO_ADDR
// krabice = getmultiplayersetting ( 4 ) ;
13078: LD_ADDR_EXP 38
13082: PUSH
13083: LD_INT 4
13085: PPUSH
13086: CALL_OW 426
13090: ST_TO_ADDR
// extra_oil = getmultiplayersetting ( 5 ) ;
13091: LD_ADDR_LOC 37
13095: PUSH
13096: LD_INT 5
13098: PPUSH
13099: CALL_OW 426
13103: ST_TO_ADDR
// extra_sib = getmultiplayersetting ( 6 ) ;
13104: LD_ADDR_LOC 38
13108: PUSH
13109: LD_INT 6
13111: PPUSH
13112: CALL_OW 426
13116: ST_TO_ADDR
// zakl_plus = getmultiplayersetting ( 7 ) ;
13117: LD_ADDR_LOC 39
13121: PUSH
13122: LD_INT 7
13124: PPUSH
13125: CALL_OW 426
13129: ST_TO_ADDR
// batt_fl = getmultiplayersetting ( 11 ) ;
13130: LD_ADDR_LOC 40
13134: PUSH
13135: LD_INT 11
13137: PPUSH
13138: CALL_OW 426
13142: ST_TO_ADDR
// sib_det = getmultiplayersetting ( 12 ) ;
13143: LD_ADDR_LOC 41
13147: PUSH
13148: LD_INT 12
13150: PPUSH
13151: CALL_OW 426
13155: ST_TO_ADDR
// opoce = getmultiplayersetting ( 13 ) ;
13156: LD_ADDR_EXP 39
13160: PUSH
13161: LD_INT 13
13163: PPUSH
13164: CALL_OW 426
13168: ST_TO_ADDR
// people_resp = getmultiplayersetting ( 14 ) ;
13169: LD_ADDR_LOC 42
13173: PUSH
13174: LD_INT 14
13176: PPUSH
13177: CALL_OW 426
13181: ST_TO_ADDR
// siberitofka = getmultiplayersetting ( 15 ) ;
13182: LD_ADDR_LOC 43
13186: PUSH
13187: LD_INT 15
13189: PPUSH
13190: CALL_OW 426
13194: ST_TO_ADDR
// end else
13195: GO 13301
// begin zakladna = 1 ;
13197: LD_ADDR_LOC 34
13201: PUSH
13202: LD_INT 1
13204: ST_TO_ADDR
// lidi = 1 ;
13205: LD_ADDR_EXP 37
13209: PUSH
13210: LD_INT 1
13212: ST_TO_ADDR
// skilly = 1 ;
13213: LD_ADDR_LOC 35
13217: PUSH
13218: LD_INT 1
13220: ST_TO_ADDR
// start_res = 2 ;
13221: LD_ADDR_LOC 36
13225: PUSH
13226: LD_INT 2
13228: ST_TO_ADDR
// krabice = 1 ;
13229: LD_ADDR_EXP 38
13233: PUSH
13234: LD_INT 1
13236: ST_TO_ADDR
// extra_oil = 1 ;
13237: LD_ADDR_LOC 37
13241: PUSH
13242: LD_INT 1
13244: ST_TO_ADDR
// extra_sib = 1 ;
13245: LD_ADDR_LOC 38
13249: PUSH
13250: LD_INT 1
13252: ST_TO_ADDR
// zakl_plus = 2 ;
13253: LD_ADDR_LOC 39
13257: PUSH
13258: LD_INT 2
13260: ST_TO_ADDR
// batt_fl = 0 ;
13261: LD_ADDR_LOC 40
13265: PUSH
13266: LD_INT 0
13268: ST_TO_ADDR
// sib_det = 0 ;
13269: LD_ADDR_LOC 41
13273: PUSH
13274: LD_INT 0
13276: ST_TO_ADDR
// opoce = 3 ;
13277: LD_ADDR_EXP 39
13281: PUSH
13282: LD_INT 3
13284: ST_TO_ADDR
// people_resp = 0 ;
13285: LD_ADDR_LOC 42
13289: PUSH
13290: LD_INT 0
13292: ST_TO_ADDR
// siberitofka = 0 ;
13293: LD_ADDR_LOC 43
13297: PUSH
13298: LD_INT 0
13300: ST_TO_ADDR
// end ; if people_resp then
13301: LD_LOC 42
13305: IFFALSE 13322
// begin enable ( nonctf_10 ) ;
13307: LD_EXP 52
13311: ENABLE_MARKED
// enable ( nonctf_11 ) ;
13312: LD_EXP 53
13316: ENABLE_MARKED
// enable ( nonctf_12 ) ;
13317: LD_EXP 54
13321: ENABLE_MARKED
// end ; if people_resp = 1 then
13322: LD_LOC 42
13326: PUSH
13327: LD_INT 1
13329: EQUAL
13330: IFFALSE 13340
// people_resp = 3 ;
13332: LD_ADDR_LOC 42
13336: PUSH
13337: LD_INT 3
13339: ST_TO_ADDR
// if people_resp = 2 then
13340: LD_LOC 42
13344: PUSH
13345: LD_INT 2
13347: EQUAL
13348: IFFALSE 13358
// people_resp = 1 ;
13350: LD_ADDR_LOC 42
13354: PUSH
13355: LD_INT 1
13357: ST_TO_ADDR
// case lidi of 0 :
13358: LD_EXP 37
13362: PUSH
13363: LD_INT 0
13365: DOUBLE
13366: EQUAL
13367: IFTRUE 13371
13369: GO 13382
13371: POP
// lidi = 9 ; 1 :
13372: LD_ADDR_EXP 37
13376: PUSH
13377: LD_INT 9
13379: ST_TO_ADDR
13380: GO 13459
13382: LD_INT 1
13384: DOUBLE
13385: EQUAL
13386: IFTRUE 13390
13388: GO 13401
13390: POP
// lidi = 13 ; 2 :
13391: LD_ADDR_EXP 37
13395: PUSH
13396: LD_INT 13
13398: ST_TO_ADDR
13399: GO 13459
13401: LD_INT 2
13403: DOUBLE
13404: EQUAL
13405: IFTRUE 13409
13407: GO 13420
13409: POP
// lidi = 19 ; 3 :
13410: LD_ADDR_EXP 37
13414: PUSH
13415: LD_INT 19
13417: ST_TO_ADDR
13418: GO 13459
13420: LD_INT 3
13422: DOUBLE
13423: EQUAL
13424: IFTRUE 13428
13426: GO 13439
13428: POP
// lidi = 23 ; 4 :
13429: LD_ADDR_EXP 37
13433: PUSH
13434: LD_INT 23
13436: ST_TO_ADDR
13437: GO 13459
13439: LD_INT 4
13441: DOUBLE
13442: EQUAL
13443: IFTRUE 13447
13445: GO 13458
13447: POP
// lidi = 29 ; end ;
13448: LD_ADDR_EXP 37
13452: PUSH
13453: LD_INT 29
13455: ST_TO_ADDR
13456: GO 13459
13458: POP
// skilly = skilly + 1 ;
13459: LD_ADDR_LOC 35
13463: PUSH
13464: LD_LOC 35
13468: PUSH
13469: LD_INT 1
13471: PLUS
13472: ST_TO_ADDR
// case start_res of 0 :
13473: LD_LOC 36
13477: PUSH
13478: LD_INT 0
13480: DOUBLE
13481: EQUAL
13482: IFTRUE 13486
13484: GO 13497
13486: POP
// start_res = 0 ; 1 :
13487: LD_ADDR_LOC 36
13491: PUSH
13492: LD_INT 0
13494: ST_TO_ADDR
13495: GO 13555
13497: LD_INT 1
13499: DOUBLE
13500: EQUAL
13501: IFTRUE 13505
13503: GO 13516
13505: POP
// start_res = 50 ; 2 :
13506: LD_ADDR_LOC 36
13510: PUSH
13511: LD_INT 50
13513: ST_TO_ADDR
13514: GO 13555
13516: LD_INT 2
13518: DOUBLE
13519: EQUAL
13520: IFTRUE 13524
13522: GO 13535
13524: POP
// start_res = 100 ; 3 :
13525: LD_ADDR_LOC 36
13529: PUSH
13530: LD_INT 100
13532: ST_TO_ADDR
13533: GO 13555
13535: LD_INT 3
13537: DOUBLE
13538: EQUAL
13539: IFTRUE 13543
13541: GO 13554
13543: POP
// start_res = 200 ; end ;
13544: LD_ADDR_LOC 36
13548: PUSH
13549: LD_INT 200
13551: ST_TO_ADDR
13552: GO 13555
13554: POP
// case krabice of 0 :
13555: LD_EXP 38
13559: PUSH
13560: LD_INT 0
13562: DOUBLE
13563: EQUAL
13564: IFTRUE 13568
13566: GO 13579
13568: POP
// cperiode = 1 1$30 ; 1 :
13569: LD_ADDR_EXP 41
13573: PUSH
13574: LD_INT 3150
13576: ST_TO_ADDR
13577: GO 13618
13579: LD_INT 1
13581: DOUBLE
13582: EQUAL
13583: IFTRUE 13587
13585: GO 13598
13587: POP
// cperiode = 1 1$00 ; 2 :
13588: LD_ADDR_EXP 41
13592: PUSH
13593: LD_INT 2100
13595: ST_TO_ADDR
13596: GO 13618
13598: LD_INT 2
13600: DOUBLE
13601: EQUAL
13602: IFTRUE 13606
13604: GO 13617
13606: POP
// cperiode = 0 0$30 ; end ;
13607: LD_ADDR_EXP 41
13611: PUSH
13612: LD_INT 1050
13614: ST_TO_ADDR
13615: GO 13618
13617: POP
// case opoce of 0 :
13618: LD_EXP 39
13622: PUSH
13623: LD_INT 0
13625: DOUBLE
13626: EQUAL
13627: IFTRUE 13631
13629: GO 13642
13631: POP
// opoce = 0 ; 1 :
13632: LD_ADDR_EXP 39
13636: PUSH
13637: LD_INT 0
13639: ST_TO_ADDR
13640: GO 13757
13642: LD_INT 1
13644: DOUBLE
13645: EQUAL
13646: IFTRUE 13650
13648: GO 13661
13650: POP
// opoce = 3 ; 2 :
13651: LD_ADDR_EXP 39
13655: PUSH
13656: LD_INT 3
13658: ST_TO_ADDR
13659: GO 13757
13661: LD_INT 2
13663: DOUBLE
13664: EQUAL
13665: IFTRUE 13669
13667: GO 13680
13669: POP
// opoce = 7 ; 3 :
13670: LD_ADDR_EXP 39
13674: PUSH
13675: LD_INT 7
13677: ST_TO_ADDR
13678: GO 13757
13680: LD_INT 3
13682: DOUBLE
13683: EQUAL
13684: IFTRUE 13688
13686: GO 13699
13688: POP
// opoce = 11 ; 4 :
13689: LD_ADDR_EXP 39
13693: PUSH
13694: LD_INT 11
13696: ST_TO_ADDR
13697: GO 13757
13699: LD_INT 4
13701: DOUBLE
13702: EQUAL
13703: IFTRUE 13707
13705: GO 13718
13707: POP
// opoce = 15 ; 5 :
13708: LD_ADDR_EXP 39
13712: PUSH
13713: LD_INT 15
13715: ST_TO_ADDR
13716: GO 13757
13718: LD_INT 5
13720: DOUBLE
13721: EQUAL
13722: IFTRUE 13726
13724: GO 13737
13726: POP
// opoce = 19 ; 6 :
13727: LD_ADDR_EXP 39
13731: PUSH
13732: LD_INT 19
13734: ST_TO_ADDR
13735: GO 13757
13737: LD_INT 6
13739: DOUBLE
13740: EQUAL
13741: IFTRUE 13745
13743: GO 13756
13745: POP
// opoce = 23 ; end ;
13746: LD_ADDR_EXP 39
13750: PUSH
13751: LD_INT 23
13753: ST_TO_ADDR
13754: GO 13757
13756: POP
// fortpos = [ [ [ 46 , 53 , 4 ] , [ 51 , 62 , 4 ] ] , [ [ 167 , 53 , 1 ] , [ 173 , 64 , 1 ] ] ] ;
13757: LD_ADDR_LOC 44
13761: PUSH
13762: LD_INT 46
13764: PUSH
13765: LD_INT 53
13767: PUSH
13768: LD_INT 4
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: LIST
13775: PUSH
13776: LD_INT 51
13778: PUSH
13779: LD_INT 62
13781: PUSH
13782: LD_INT 4
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: LIST
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: PUSH
13794: LD_INT 167
13796: PUSH
13797: LD_INT 53
13799: PUSH
13800: LD_INT 1
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: LIST
13807: PUSH
13808: LD_INT 173
13810: PUSH
13811: LD_INT 64
13813: PUSH
13814: LD_INT 1
13816: PUSH
13817: EMPTY
13818: LIST
13819: LIST
13820: LIST
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: ST_TO_ADDR
// areasdiff = [ vlevodiff , vpravodiff ] ;
13830: LD_ADDR_LOC 45
13834: PUSH
13835: LD_INT 16
13837: PUSH
13838: LD_INT 17
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: ST_TO_ADDR
// directions = [ 4 , 1 ] ;
13845: LD_ADDR_LOC 46
13849: PUSH
13850: LD_INT 4
13852: PUSH
13853: LD_INT 1
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: ST_TO_ADDR
// for tmp = 1 to 8 do
13860: LD_ADDR_VAR 0 2
13864: PUSH
13865: DOUBLE
13866: LD_INT 1
13868: DEC
13869: ST_TO_ADDR
13870: LD_INT 8
13872: PUSH
13873: FOR_TO
13874: IFFALSE 15043
// if mp_sides_nations_ [ tmp ] then
13876: LD_EXP 49
13880: PUSH
13881: LD_VAR 0 2
13885: ARRAY
13886: IFFALSE 15041
// begin if mp_sides_positions_ [ tmp ] = 1 then
13888: LD_EXP 50
13892: PUSH
13893: LD_VAR 0 2
13897: ARRAY
13898: PUSH
13899: LD_INT 1
13901: EQUAL
13902: IFFALSE 13916
// pos1side = tmp else
13904: LD_ADDR_EXP 44
13908: PUSH
13909: LD_VAR 0 2
13913: ST_TO_ADDR
13914: GO 13926
// pos2side = tmp ;
13916: LD_ADDR_EXP 45
13920: PUSH
13921: LD_VAR 0 2
13925: ST_TO_ADDR
// uc_side = tmp ;
13926: LD_ADDR_OWVAR 20
13930: PUSH
13931: LD_VAR 0 2
13935: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ tmp ] ;
13936: LD_ADDR_OWVAR 21
13940: PUSH
13941: LD_EXP 49
13945: PUSH
13946: LD_VAR 0 2
13950: ARRAY
13951: ST_TO_ADDR
// bc_type = b_depot ;
13952: LD_ADDR_OWVAR 42
13956: PUSH
13957: LD_INT 0
13959: ST_TO_ADDR
// bc_level = 1 ;
13960: LD_ADDR_OWVAR 43
13964: PUSH
13965: LD_INT 1
13967: ST_TO_ADDR
// tmp2 = createandplacebuildingxyd ( depotpositions [ mp_sides_positions_ [ tmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 2 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 3 ] ) ;
13968: LD_ADDR_VAR 0 3
13972: PUSH
13973: LD_EXP 42
13977: PUSH
13978: LD_EXP 50
13982: PUSH
13983: LD_VAR 0 2
13987: ARRAY
13988: ARRAY
13989: PUSH
13990: LD_INT 1
13992: ARRAY
13993: PPUSH
13994: LD_EXP 42
13998: PUSH
13999: LD_EXP 50
14003: PUSH
14004: LD_VAR 0 2
14008: ARRAY
14009: ARRAY
14010: PUSH
14011: LD_INT 2
14013: ARRAY
14014: PPUSH
14015: LD_EXP 42
14019: PUSH
14020: LD_EXP 50
14024: PUSH
14025: LD_VAR 0 2
14029: ARRAY
14030: ARRAY
14031: PUSH
14032: LD_INT 3
14034: ARRAY
14035: PPUSH
14036: CALL_OW 47
14040: ST_TO_ADDR
// if batt_fl then
14041: LD_LOC 40
14045: IFFALSE 14155
// setbattleflag ( tmp , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 2 ] , [ [ bfo_defend_bonus_human , 80 ] , [ bfo_defend_bonus_vehicle , 40 ] , [ bfo_defend_bonus_building , 0 ] , [ bfo_range , 17 ] , [ bfo_height , 100 ] ] ) ;
14047: LD_VAR 0 2
14051: PPUSH
14052: LD_EXP 42
14056: PUSH
14057: LD_EXP 50
14061: PUSH
14062: LD_VAR 0 2
14066: ARRAY
14067: ARRAY
14068: PUSH
14069: LD_INT 1
14071: ARRAY
14072: PPUSH
14073: LD_EXP 42
14077: PUSH
14078: LD_EXP 50
14082: PUSH
14083: LD_VAR 0 2
14087: ARRAY
14088: ARRAY
14089: PUSH
14090: LD_INT 2
14092: ARRAY
14093: PPUSH
14094: LD_INT 1
14096: PUSH
14097: LD_INT 80
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: PUSH
14104: LD_INT 2
14106: PUSH
14107: LD_INT 40
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: PUSH
14114: LD_INT 3
14116: PUSH
14117: LD_INT 0
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: PUSH
14124: LD_INT 10
14126: PUSH
14127: LD_INT 17
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: PUSH
14134: LD_INT 20
14136: PUSH
14137: LD_INT 100
14139: PUSH
14140: EMPTY
14141: LIST
14142: LIST
14143: PUSH
14144: EMPTY
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: PPUSH
14151: CALL_OW 418
// if zakladna then
14155: LD_LOC 34
14159: IFFALSE 14327
// begin bc_type = b_breastwork ;
14161: LD_ADDR_OWVAR 42
14165: PUSH
14166: LD_INT 31
14168: ST_TO_ADDR
// createandplacebuildingxyd ( fortpos [ mp_sides_positions_ [ tmp ] ] [ 1 ] [ 1 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 1 ] [ 2 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 1 ] [ 3 ] ) ;
14169: LD_LOC 44
14173: PUSH
14174: LD_EXP 50
14178: PUSH
14179: LD_VAR 0 2
14183: ARRAY
14184: ARRAY
14185: PUSH
14186: LD_INT 1
14188: ARRAY
14189: PUSH
14190: LD_INT 1
14192: ARRAY
14193: PPUSH
14194: LD_LOC 44
14198: PUSH
14199: LD_EXP 50
14203: PUSH
14204: LD_VAR 0 2
14208: ARRAY
14209: ARRAY
14210: PUSH
14211: LD_INT 1
14213: ARRAY
14214: PUSH
14215: LD_INT 2
14217: ARRAY
14218: PPUSH
14219: LD_LOC 44
14223: PUSH
14224: LD_EXP 50
14228: PUSH
14229: LD_VAR 0 2
14233: ARRAY
14234: ARRAY
14235: PUSH
14236: LD_INT 1
14238: ARRAY
14239: PUSH
14240: LD_INT 3
14242: ARRAY
14243: PPUSH
14244: CALL_OW 47
// createandplacebuildingxyd ( fortpos [ mp_sides_positions_ [ tmp ] ] [ 2 ] [ 1 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 2 ] [ 2 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 2 ] [ 3 ] ) ;
14248: LD_LOC 44
14252: PUSH
14253: LD_EXP 50
14257: PUSH
14258: LD_VAR 0 2
14262: ARRAY
14263: ARRAY
14264: PUSH
14265: LD_INT 2
14267: ARRAY
14268: PUSH
14269: LD_INT 1
14271: ARRAY
14272: PPUSH
14273: LD_LOC 44
14277: PUSH
14278: LD_EXP 50
14282: PUSH
14283: LD_VAR 0 2
14287: ARRAY
14288: ARRAY
14289: PUSH
14290: LD_INT 2
14292: ARRAY
14293: PUSH
14294: LD_INT 2
14296: ARRAY
14297: PPUSH
14298: LD_LOC 44
14302: PUSH
14303: LD_EXP 50
14307: PUSH
14308: LD_VAR 0 2
14312: ARRAY
14313: ARRAY
14314: PUSH
14315: LD_INT 2
14317: ARRAY
14318: PUSH
14319: LD_INT 3
14321: ARRAY
14322: PPUSH
14323: CALL_OW 47
// end ; addresourcetype ( getbase ( tmp2 ) , mat_cans , start_res ) ;
14327: LD_VAR 0 3
14331: PPUSH
14332: CALL_OW 274
14336: PPUSH
14337: LD_INT 1
14339: PPUSH
14340: LD_LOC 36
14344: PPUSH
14345: CALL_OW 276
// if extra_oil then
14349: LD_LOC 37
14353: IFFALSE 14445
// begin tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14355: LD_ADDR_VAR 0 3
14359: PUSH
14360: LD_LOC 45
14364: PUSH
14365: LD_EXP 50
14369: PUSH
14370: LD_VAR 0 2
14374: ARRAY
14375: ARRAY
14376: PPUSH
14377: LD_INT 0
14379: PPUSH
14380: CALL_OW 16
14384: ST_TO_ADDR
// while not createdepositxy ( tmp2 [ 1 ] , tmp2 [ 2 ] , mat_oil ) do
14385: LD_VAR 0 3
14389: PUSH
14390: LD_INT 1
14392: ARRAY
14393: PPUSH
14394: LD_VAR 0 3
14398: PUSH
14399: LD_INT 2
14401: ARRAY
14402: PPUSH
14403: LD_INT 2
14405: PPUSH
14406: CALL_OW 62
14410: NOT
14411: IFFALSE 14445
// tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14413: LD_ADDR_VAR 0 3
14417: PUSH
14418: LD_LOC 45
14422: PUSH
14423: LD_EXP 50
14427: PUSH
14428: LD_VAR 0 2
14432: ARRAY
14433: ARRAY
14434: PPUSH
14435: LD_INT 0
14437: PPUSH
14438: CALL_OW 16
14442: ST_TO_ADDR
14443: GO 14385
// end ; if extra_sib then
14445: LD_LOC 38
14449: IFFALSE 14541
// begin tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14451: LD_ADDR_VAR 0 3
14455: PUSH
14456: LD_LOC 45
14460: PUSH
14461: LD_EXP 50
14465: PUSH
14466: LD_VAR 0 2
14470: ARRAY
14471: ARRAY
14472: PPUSH
14473: LD_INT 0
14475: PPUSH
14476: CALL_OW 16
14480: ST_TO_ADDR
// while not createdepositxy ( tmp2 [ 1 ] , tmp2 [ 2 ] , mat_siberit ) do
14481: LD_VAR 0 3
14485: PUSH
14486: LD_INT 1
14488: ARRAY
14489: PPUSH
14490: LD_VAR 0 3
14494: PUSH
14495: LD_INT 2
14497: ARRAY
14498: PPUSH
14499: LD_INT 3
14501: PPUSH
14502: CALL_OW 62
14506: NOT
14507: IFFALSE 14541
// tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14509: LD_ADDR_VAR 0 3
14513: PUSH
14514: LD_LOC 45
14518: PUSH
14519: LD_EXP 50
14523: PUSH
14524: LD_VAR 0 2
14528: ARRAY
14529: ARRAY
14530: PPUSH
14531: LD_INT 0
14533: PPUSH
14534: CALL_OW 16
14538: ST_TO_ADDR
14539: GO 14481
// end ; if zakl_plus > 0 then
14541: LD_LOC 39
14545: PUSH
14546: LD_INT 0
14548: GREATER
14549: IFFALSE 14809
// begin bc_type = b_lab ;
14551: LD_ADDR_OWVAR 42
14555: PUSH
14556: LD_INT 6
14558: ST_TO_ADDR
// uc_direction = directions [ mp_sides_positions_ [ tmp ] ] ;
14559: LD_ADDR_OWVAR 24
14563: PUSH
14564: LD_LOC 46
14568: PUSH
14569: LD_EXP 50
14573: PUSH
14574: LD_VAR 0 2
14578: ARRAY
14579: ARRAY
14580: ST_TO_ADDR
// tmp3 = createbuilding ;
14581: LD_ADDR_VAR 0 4
14585: PUSH
14586: CALL_OW 46
14590: ST_TO_ADDR
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14591: LD_ADDR_VAR 0 3
14595: PUSH
14596: LD_EXP 43
14600: PUSH
14601: LD_EXP 50
14605: PUSH
14606: LD_VAR 0 2
14610: ARRAY
14611: ARRAY
14612: PPUSH
14613: LD_INT 0
14615: PPUSH
14616: CALL_OW 16
14620: ST_TO_ADDR
// while not placeunitxy ( tmp3 , tmp2 [ 1 ] , tmp2 [ 2 ] , false ) do
14621: LD_VAR 0 4
14625: PPUSH
14626: LD_VAR 0 3
14630: PUSH
14631: LD_INT 1
14633: ARRAY
14634: PPUSH
14635: LD_VAR 0 3
14639: PUSH
14640: LD_INT 2
14642: ARRAY
14643: PPUSH
14644: LD_INT 0
14646: PPUSH
14647: CALL_OW 48
14651: NOT
14652: IFFALSE 14686
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14654: LD_ADDR_VAR 0 3
14658: PUSH
14659: LD_EXP 43
14663: PUSH
14664: LD_EXP 50
14668: PUSH
14669: LD_VAR 0 2
14673: ARRAY
14674: ARRAY
14675: PPUSH
14676: LD_INT 0
14678: PPUSH
14679: CALL_OW 16
14683: ST_TO_ADDR
14684: GO 14621
// if zakl_plus > 1 then
14686: LD_LOC 39
14690: PUSH
14691: LD_INT 1
14693: GREATER
14694: IFFALSE 14809
// begin bc_type = b_workshop ;
14696: LD_ADDR_OWVAR 42
14700: PUSH
14701: LD_INT 2
14703: ST_TO_ADDR
// tmp3 = createbuilding ;
14704: LD_ADDR_VAR 0 4
14708: PUSH
14709: CALL_OW 46
14713: ST_TO_ADDR
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14714: LD_ADDR_VAR 0 3
14718: PUSH
14719: LD_EXP 43
14723: PUSH
14724: LD_EXP 50
14728: PUSH
14729: LD_VAR 0 2
14733: ARRAY
14734: ARRAY
14735: PPUSH
14736: LD_INT 0
14738: PPUSH
14739: CALL_OW 16
14743: ST_TO_ADDR
// while not placeunitxy ( tmp3 , tmp2 [ 1 ] , tmp2 [ 2 ] , false ) do
14744: LD_VAR 0 4
14748: PPUSH
14749: LD_VAR 0 3
14753: PUSH
14754: LD_INT 1
14756: ARRAY
14757: PPUSH
14758: LD_VAR 0 3
14762: PUSH
14763: LD_INT 2
14765: ARRAY
14766: PPUSH
14767: LD_INT 0
14769: PPUSH
14770: CALL_OW 48
14774: NOT
14775: IFFALSE 14809
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14777: LD_ADDR_VAR 0 3
14781: PUSH
14782: LD_EXP 43
14786: PUSH
14787: LD_EXP 50
14791: PUSH
14792: LD_VAR 0 2
14796: ARRAY
14797: ARRAY
14798: PPUSH
14799: LD_INT 0
14801: PPUSH
14802: CALL_OW 16
14806: ST_TO_ADDR
14807: GO 14744
// end ; end ; if batt_fl then
14809: LD_LOC 40
14813: IFFALSE 14923
// setbattleflag ( tmp , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 2 ] , [ [ bfo_defend_bonus_human , 80 ] , [ bfo_defend_bonus_vehicle , 40 ] , [ bfo_defend_bonus_building , 0 ] , [ bfo_range , 17 ] , [ bfo_height , 100 ] ] ) ;
14815: LD_VAR 0 2
14819: PPUSH
14820: LD_EXP 42
14824: PUSH
14825: LD_EXP 50
14829: PUSH
14830: LD_VAR 0 2
14834: ARRAY
14835: ARRAY
14836: PUSH
14837: LD_INT 1
14839: ARRAY
14840: PPUSH
14841: LD_EXP 42
14845: PUSH
14846: LD_EXP 50
14850: PUSH
14851: LD_VAR 0 2
14855: ARRAY
14856: ARRAY
14857: PUSH
14858: LD_INT 2
14860: ARRAY
14861: PPUSH
14862: LD_INT 1
14864: PUSH
14865: LD_INT 80
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: PUSH
14872: LD_INT 2
14874: PUSH
14875: LD_INT 40
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: PUSH
14882: LD_INT 3
14884: PUSH
14885: LD_INT 0
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: PUSH
14892: LD_INT 10
14894: PUSH
14895: LD_INT 17
14897: PUSH
14898: EMPTY
14899: LIST
14900: LIST
14901: PUSH
14902: LD_INT 20
14904: PUSH
14905: LD_INT 100
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: PUSH
14912: EMPTY
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: PPUSH
14919: CALL_OW 418
// cl = class_scientistic ;
14923: LD_ADDR_VAR 0 5
14927: PUSH
14928: LD_INT 4
14930: ST_TO_ADDR
// for tmp2 = 1 to lidi do
14931: LD_ADDR_VAR 0 3
14935: PUSH
14936: DOUBLE
14937: LD_INT 1
14939: DEC
14940: ST_TO_ADDR
14941: LD_EXP 37
14945: PUSH
14946: FOR_TO
14947: IFFALSE 15039
// begin if tmp2 >= lidi / 2 then
14949: LD_VAR 0 3
14953: PUSH
14954: LD_EXP 37
14958: PUSH
14959: LD_INT 2
14961: DIVREAL
14962: GREATEREQUAL
14963: IFFALSE 14973
// cl = class_soldier ;
14965: LD_ADDR_VAR 0 5
14969: PUSH
14970: LD_INT 1
14972: ST_TO_ADDR
// preparehuman ( 0 , cl , skilly ) ;
14973: LD_INT 0
14975: PPUSH
14976: LD_VAR 0 5
14980: PPUSH
14981: LD_LOC 35
14985: PPUSH
14986: CALL_OW 380
// if tmp2 = 1 then
14990: LD_VAR 0 3
14994: PUSH
14995: LD_INT 1
14997: EQUAL
14998: IFFALSE 15008
// cl = class_engineer ;
15000: LD_ADDR_VAR 0 5
15004: PUSH
15005: LD_INT 2
15007: ST_TO_ADDR
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
15008: CALL_OW 44
15012: PPUSH
15013: LD_EXP 43
15017: PUSH
15018: LD_EXP 50
15022: PUSH
15023: LD_VAR 0 2
15027: ARRAY
15028: ARRAY
15029: PPUSH
15030: LD_INT 0
15032: PPUSH
15033: CALL_OW 49
// end ;
15037: GO 14946
15039: POP
15040: POP
// end ;
15041: GO 13873
15043: POP
15044: POP
// uc_side = 0 ;
15045: LD_ADDR_OWVAR 20
15049: PUSH
15050: LD_INT 0
15052: ST_TO_ADDR
// uc_nation = nation_nature ;
15053: LD_ADDR_OWVAR 21
15057: PUSH
15058: LD_INT 0
15060: ST_TO_ADDR
// for tmp = 1 to opoce do
15061: LD_ADDR_VAR 0 2
15065: PUSH
15066: DOUBLE
15067: LD_INT 1
15069: DEC
15070: ST_TO_ADDR
15071: LD_EXP 39
15075: PUSH
15076: FOR_TO
15077: IFFALSE 15109
// begin preparehuman ( 0 , class_apeman , 0 ) ;
15079: LD_INT 0
15081: PPUSH
15082: LD_INT 12
15084: PPUSH
15085: LD_INT 0
15087: PPUSH
15088: CALL_OW 380
// placeunitarea ( createhuman , les , false ) ;
15092: CALL_OW 44
15096: PPUSH
15097: LD_INT 4
15099: PPUSH
15100: LD_INT 0
15102: PPUSH
15103: CALL_OW 49
// end ;
15107: GO 15076
15109: POP
15110: POP
// case mp_sides_positions_ [ your_side ] of 1 :
15111: LD_EXP 50
15115: PUSH
15116: LD_OWVAR 2
15120: ARRAY
15121: PUSH
15122: LD_INT 1
15124: DOUBLE
15125: EQUAL
15126: IFTRUE 15130
15128: GO 15143
15130: POP
// centernowonxy ( 44 , 60 ) ; 2 :
15131: LD_INT 44
15133: PPUSH
15134: LD_INT 60
15136: PPUSH
15137: CALL_OW 86
15141: GO 15165
15143: LD_INT 2
15145: DOUBLE
15146: EQUAL
15147: IFTRUE 15151
15149: GO 15164
15151: POP
// centernowonxy ( 175 , 60 ) ; end ;
15152: LD_INT 175
15154: PPUSH
15155: LD_INT 60
15157: PPUSH
15158: CALL_OW 86
15162: GO 15165
15164: POP
// end ;
15165: LD_VAR 0 1
15169: RET
// on humandestroyed ( un , side , nat , x , y , dir , sex , cl ) marked 10 do if mp_sides_positions_ [ side ] = 1 then
15170: LD_EXP 50
15174: PUSH
15175: LD_VAR 0 2
15179: ARRAY
15180: PUSH
15181: LD_INT 1
15183: EQUAL
15184: IFFALSE 15202
// resp_cnt1 = resp_cnt1 + 1 else
15186: LD_ADDR_LOC 47
15190: PUSH
15191: LD_LOC 47
15195: PUSH
15196: LD_INT 1
15198: PLUS
15199: ST_TO_ADDR
15200: GO 15216
// resp_cnt2 = resp_cnt2 + 1 ;
15202: LD_ADDR_LOC 48
15206: PUSH
15207: LD_LOC 48
15211: PUSH
15212: LD_INT 1
15214: PLUS
15215: ST_TO_ADDR
15216: PPOPN 8
15218: END
// every 0 0$30 trigger resp_cnt1 >= people_resp marked 11 do
15219: LD_LOC 47
15223: PUSH
15224: LD_LOC 42
15228: GREATEREQUAL
15229: IFFALSE 15382
15231: GO 15233
15233: DISABLE
// begin resp_cnt1 = resp_cnt1 - people_resp ;
15234: LD_ADDR_LOC 47
15238: PUSH
15239: LD_LOC 47
15243: PUSH
15244: LD_LOC 42
15248: MINUS
15249: ST_TO_ADDR
// if not filterallunits ( [ [ f_side , pos1side ] , [ f_or , [ f_btype , b_depot ] , [ f_class , class_engineer ] ] ] ) then
15250: LD_INT 22
15252: PUSH
15253: LD_EXP 44
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: PUSH
15262: LD_INT 2
15264: PUSH
15265: LD_INT 30
15267: PUSH
15268: LD_INT 0
15270: PUSH
15271: EMPTY
15272: LIST
15273: LIST
15274: PUSH
15275: LD_INT 25
15277: PUSH
15278: LD_INT 2
15280: PUSH
15281: EMPTY
15282: LIST
15283: LIST
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: LIST
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: PPUSH
15294: CALL_OW 69
15298: NOT
15299: IFFALSE 15304
// begin enable ;
15301: ENABLE
// exit ;
15302: GO 15382
// end ; uc_side = pos1side ;
15304: LD_ADDR_OWVAR 20
15308: PUSH
15309: LD_EXP 44
15313: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos1side ] ;
15314: LD_ADDR_OWVAR 21
15318: PUSH
15319: LD_EXP 49
15323: PUSH
15324: LD_EXP 44
15328: ARRAY
15329: ST_TO_ADDR
// preparehuman ( 0 , class_soldier , skilly ) ;
15330: LD_INT 0
15332: PPUSH
15333: LD_INT 1
15335: PPUSH
15336: LD_LOC 35
15340: PPUSH
15341: CALL_OW 380
// wait ( 0 0$10 ) ;
15345: LD_INT 350
15347: PPUSH
15348: CALL_OW 67
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ pos1side ] ] , true ) ;
15352: CALL_OW 44
15356: PPUSH
15357: LD_EXP 43
15361: PUSH
15362: LD_EXP 50
15366: PUSH
15367: LD_EXP 44
15371: ARRAY
15372: ARRAY
15373: PPUSH
15374: LD_INT 1
15376: PPUSH
15377: CALL_OW 49
// enable ;
15381: ENABLE
// end ;
15382: END
// every 0 0$30 trigger resp_cnt2 >= people_resp marked 12 do
15383: LD_LOC 48
15387: PUSH
15388: LD_LOC 42
15392: GREATEREQUAL
15393: IFFALSE 15546
15395: GO 15397
15397: DISABLE
// begin resp_cnt2 = resp_cnt2 - people_resp ;
15398: LD_ADDR_LOC 48
15402: PUSH
15403: LD_LOC 48
15407: PUSH
15408: LD_LOC 42
15412: MINUS
15413: ST_TO_ADDR
// if not filterallunits ( [ [ f_side , pos2side ] , [ f_or , [ f_btype , b_depot ] , [ f_class , class_engineer ] ] ] ) then
15414: LD_INT 22
15416: PUSH
15417: LD_EXP 45
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: PUSH
15426: LD_INT 2
15428: PUSH
15429: LD_INT 30
15431: PUSH
15432: LD_INT 0
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: PUSH
15439: LD_INT 25
15441: PUSH
15442: LD_INT 2
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: LIST
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: PPUSH
15458: CALL_OW 69
15462: NOT
15463: IFFALSE 15468
// begin enable ;
15465: ENABLE
// exit ;
15466: GO 15546
// end ; uc_side = pos2side ;
15468: LD_ADDR_OWVAR 20
15472: PUSH
15473: LD_EXP 45
15477: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos2side ] ;
15478: LD_ADDR_OWVAR 21
15482: PUSH
15483: LD_EXP 49
15487: PUSH
15488: LD_EXP 45
15492: ARRAY
15493: ST_TO_ADDR
// preparehuman ( 0 , class_soldier , skilly ) ;
15494: LD_INT 0
15496: PPUSH
15497: LD_INT 1
15499: PPUSH
15500: LD_LOC 35
15504: PPUSH
15505: CALL_OW 380
// wait ( 0 0$10 ) ;
15509: LD_INT 350
15511: PPUSH
15512: CALL_OW 67
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ pos2side ] ] , true ) ;
15516: CALL_OW 44
15520: PPUSH
15521: LD_EXP 43
15525: PUSH
15526: LD_EXP 50
15530: PUSH
15531: LD_EXP 45
15535: ARRAY
15536: ARRAY
15537: PPUSH
15538: LD_INT 1
15540: PPUSH
15541: CALL_OW 49
// enable ;
15545: ENABLE
// end ;
15546: END
// every 0 0$1 marked 13 do
15547: GO 15549
15549: DISABLE
// begin if not filterallunits ( [ [ f_side , pos1side ] , [ f_type , unit_human ] ] ) then
15550: LD_INT 22
15552: PUSH
15553: LD_EXP 44
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: PUSH
15562: LD_INT 21
15564: PUSH
15565: LD_INT 1
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PPUSH
15576: CALL_OW 69
15580: NOT
15581: IFFALSE 15605
// if pos1side = your_side then
15583: LD_EXP 44
15587: PUSH
15588: LD_OWVAR 2
15592: EQUAL
15593: IFFALSE 15601
// youlostinmultiplayer else
15595: CALL_OW 107
15599: GO 15605
// youwininmultiplayer ;
15601: CALL_OW 106
// if not filterallunits ( [ [ f_side , pos2side ] , [ f_type , unit_human ] ] ) then
15605: LD_INT 22
15607: PUSH
15608: LD_EXP 45
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: PUSH
15617: LD_INT 21
15619: PUSH
15620: LD_INT 1
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PPUSH
15631: CALL_OW 69
15635: NOT
15636: IFFALSE 15660
// if pos2side = your_side then
15638: LD_EXP 45
15642: PUSH
15643: LD_OWVAR 2
15647: EQUAL
15648: IFFALSE 15656
// youlostinmultiplayer else
15650: CALL_OW 107
15654: GO 15660
// youwininmultiplayer ;
15656: CALL_OW 106
// end ; end_of_file
15660: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
15661: LD_INT 0
15663: PPUSH
15664: PPUSH
// for un in battle_flags_id do
15665: LD_ADDR_VAR 0 2
15669: PUSH
15670: LD_EXP 29
15674: PUSH
15675: FOR_IN
15676: IFFALSE 15751
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
15678: LD_VAR 0 2
15682: PPUSH
15683: LD_INT 1
15685: PUSH
15686: LD_LOC 49
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: PUSH
15695: LD_INT 2
15697: PUSH
15698: LD_LOC 49
15702: PUSH
15703: LD_INT 2
15705: DIV
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PUSH
15711: LD_INT 3
15713: PUSH
15714: LD_LOC 49
15718: PUSH
15719: LD_INT 5
15721: DIV
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: PUSH
15727: LD_INT 20
15729: PUSH
15730: LD_LOC 49
15734: PUSH
15735: EMPTY
15736: LIST
15737: LIST
15738: PUSH
15739: EMPTY
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: PPUSH
15745: CALL_OW 423
15749: GO 15675
15751: POP
15752: POP
// end ;
15753: LD_VAR 0 1
15757: RET
// every 0 0$0.1 marked 55 do var un ;
15758: GO 15760
15760: DISABLE
15761: LD_INT 0
15763: PPUSH
// begin if not def_morale_flags then
15764: LD_EXP 66
15768: NOT
15769: IFFALSE 15773
// exit ;
15771: GO 15850
// if not morale_decreasing_time then
15773: LD_EXP 11
15777: NOT
15778: IFFALSE 15782
// exit ;
15780: GO 15850
// strength = 100 ;
15782: LD_ADDR_LOC 49
15786: PUSH
15787: LD_INT 100
15789: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
15790: LD_EXP 11
15794: PPUSH
15795: CALL_OW 67
// strength := strength - 1 ;
15799: LD_ADDR_LOC 49
15803: PUSH
15804: LD_LOC 49
15808: PUSH
15809: LD_INT 1
15811: MINUS
15812: ST_TO_ADDR
// Update_Flags ;
15813: CALL 15661 0 0
// until not strength ;
15817: LD_LOC 49
15821: NOT
15822: IFFALSE 15790
// for un in battle_flags_id do
15824: LD_ADDR_VAR 0 1
15828: PUSH
15829: LD_EXP 29
15833: PUSH
15834: FOR_IN
15835: IFFALSE 15848
// KillBattleFlag ( un ) ;
15837: LD_VAR 0 1
15841: PPUSH
15842: CALL_OW 419
15846: GO 15834
15848: POP
15849: POP
// end ; end_of_file
15850: PPOPN 1
15852: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
15853: LD_INT 0
15855: PPUSH
15856: PPUSH
// if ( not IAmSpec ) then
15857: CALL_OW 531
15861: NOT
15862: IFFALSE 15878
// Result := Limits_Info ^  ;
15864: LD_ADDR_VAR 0 1
15868: PUSH
15869: LD_LOC 61
15873: PUSH
15874: LD_STRING 
15876: ADD
15877: ST_TO_ADDR
// for i := 1 to 8 do
15878: LD_ADDR_VAR 0 2
15882: PUSH
15883: DOUBLE
15884: LD_INT 1
15886: DEC
15887: ST_TO_ADDR
15888: LD_INT 8
15890: PUSH
15891: FOR_TO
15892: IFFALSE 15937
// if Cheaters [ i ] then
15894: LD_LOC 62
15898: PUSH
15899: LD_VAR 0 2
15903: ARRAY
15904: IFFALSE 15935
// Result := Result ^ [ #Cheater , i , i ] ;
15906: LD_ADDR_VAR 0 1
15910: PUSH
15911: LD_VAR 0 1
15915: PUSH
15916: LD_STRING #Cheater
15918: PUSH
15919: LD_VAR 0 2
15923: PUSH
15924: LD_VAR 0 2
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: LIST
15933: ADD
15934: ST_TO_ADDR
15935: GO 15891
15937: POP
15938: POP
// end ;
15939: LD_VAR 0 1
15943: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
15944: LD_INT 0
15946: PPUSH
15947: PPUSH
15948: PPUSH
15949: PPUSH
15950: PPUSH
// case Game_Type of 10 :
15951: LD_EXP 56
15955: PUSH
15956: LD_INT 10
15958: DOUBLE
15959: EQUAL
15960: IFTRUE 15964
15962: GO 15975
15964: POP
// def_game_rules := 1 ; 11 :
15965: LD_ADDR_EXP 57
15969: PUSH
15970: LD_INT 1
15972: ST_TO_ADDR
15973: GO 15995
15975: LD_INT 11
15977: DOUBLE
15978: EQUAL
15979: IFTRUE 15983
15981: GO 15994
15983: POP
// def_game_rules := 3 ; end ;
15984: LD_ADDR_EXP 57
15988: PUSH
15989: LD_INT 3
15991: ST_TO_ADDR
15992: GO 15995
15994: POP
// case def_game_rules of 0 :
15995: LD_EXP 57
15999: PUSH
16000: LD_INT 0
16002: DOUBLE
16003: EQUAL
16004: IFTRUE 16008
16006: GO 16013
16008: POP
// exit ; 1 :
16009: GO 18071
16011: GO 17971
16013: LD_INT 1
16015: DOUBLE
16016: EQUAL
16017: IFTRUE 16021
16019: GO 16237
16021: POP
// begin def_base_level := 2 ;
16022: LD_ADDR_EXP 58
16026: PUSH
16027: LD_INT 2
16029: ST_TO_ADDR
// def_amount_of_people := 2 ;
16030: LD_ADDR_EXP 59
16034: PUSH
16035: LD_INT 2
16037: ST_TO_ADDR
// def_skill_level := 1 ;
16038: LD_ADDR_EXP 60
16042: PUSH
16043: LD_INT 1
16045: ST_TO_ADDR
// def_starting_resources := 2 ;
16046: LD_ADDR_EXP 61
16050: PUSH
16051: LD_INT 2
16053: ST_TO_ADDR
// def_shipments_density := 1 ;
16054: LD_ADDR_EXP 62
16058: PUSH
16059: LD_INT 1
16061: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
16062: LD_ADDR_EXP 63
16066: PUSH
16067: LD_INT 0
16069: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
16070: LD_ADDR_EXP 64
16074: PUSH
16075: LD_INT 1
16077: ST_TO_ADDR
// def_shared_vision := 1 ;
16078: LD_ADDR_EXP 65
16082: PUSH
16083: LD_INT 1
16085: ST_TO_ADDR
// def_morale_flags := 3 ;
16086: LD_ADDR_EXP 66
16090: PUSH
16091: LD_INT 3
16093: ST_TO_ADDR
// def_siberite_detection := 1 ;
16094: LD_ADDR_EXP 67
16098: PUSH
16099: LD_INT 1
16101: ST_TO_ADDR
// def_people_respawning := 1 ;
16102: LD_ADDR_EXP 68
16106: PUSH
16107: LD_INT 1
16109: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
16110: LD_ADDR_EXP 69
16114: PUSH
16115: LD_INT 1
16117: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16118: LD_ADDR_EXP 70
16122: PUSH
16123: LD_INT 0
16125: ST_TO_ADDR
// def_builduptime := 2 ;
16126: LD_ADDR_EXP 71
16130: PUSH
16131: LD_INT 2
16133: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
16134: LD_ADDR_VAR 0 2
16138: PUSH
16139: EMPTY
16140: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
16141: LD_ADDR_VAR 0 3
16145: PUSH
16146: EMPTY
16147: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16148: LD_ADDR_LOC 56
16152: PUSH
16153: EMPTY
16154: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16155: LD_ADDR_LOC 57
16159: PUSH
16160: EMPTY
16161: ST_TO_ADDR
// Banned_Controls := [ ] ;
16162: LD_ADDR_LOC 58
16166: PUSH
16167: EMPTY
16168: ST_TO_ADDR
// Banned_Engines := [ ] ;
16169: LD_ADDR_LOC 59
16173: PUSH
16174: EMPTY
16175: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
16176: LD_ADDR_LOC 54
16180: PUSH
16181: LD_INT 37
16183: PUSH
16184: EMPTY
16185: LIST
16186: PUSH
16187: LD_INT 4
16189: PUSH
16190: LD_INT 5
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: PUSH
16197: LD_INT 31
16199: PUSH
16200: LD_INT 32
16202: PUSH
16203: LD_INT 33
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: LIST
16210: PUSH
16211: EMPTY
16212: LIST
16213: LIST
16214: LIST
16215: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
16216: LD_ADDR_LOC 55
16220: PUSH
16221: LD_INT 2
16223: PUSH
16224: LD_INT 2
16226: PUSH
16227: LD_INT 4
16229: PUSH
16230: EMPTY
16231: LIST
16232: LIST
16233: LIST
16234: ST_TO_ADDR
// end ; 2 :
16235: GO 17971
16237: LD_INT 2
16239: DOUBLE
16240: EQUAL
16241: IFTRUE 16245
16243: GO 16454
16245: POP
// begin def_base_level := 1 ;
16246: LD_ADDR_EXP 58
16250: PUSH
16251: LD_INT 1
16253: ST_TO_ADDR
// def_amount_of_people := 2 ;
16254: LD_ADDR_EXP 59
16258: PUSH
16259: LD_INT 2
16261: ST_TO_ADDR
// def_skill_level := 3 ;
16262: LD_ADDR_EXP 60
16266: PUSH
16267: LD_INT 3
16269: ST_TO_ADDR
// def_starting_resources := 3 ;
16270: LD_ADDR_EXP 61
16274: PUSH
16275: LD_INT 3
16277: ST_TO_ADDR
// def_shipments_density := 2 ;
16278: LD_ADDR_EXP 62
16282: PUSH
16283: LD_INT 2
16285: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
16286: LD_ADDR_EXP 63
16290: PUSH
16291: LD_INT 1
16293: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
16294: LD_ADDR_EXP 64
16298: PUSH
16299: LD_INT 2
16301: ST_TO_ADDR
// def_shared_vision := 1 ;
16302: LD_ADDR_EXP 65
16306: PUSH
16307: LD_INT 1
16309: ST_TO_ADDR
// def_morale_flags := 0 ;
16310: LD_ADDR_EXP 66
16314: PUSH
16315: LD_INT 0
16317: ST_TO_ADDR
// def_siberite_detection := 1 ;
16318: LD_ADDR_EXP 67
16322: PUSH
16323: LD_INT 1
16325: ST_TO_ADDR
// def_people_respawning := 0 ;
16326: LD_ADDR_EXP 68
16330: PUSH
16331: LD_INT 0
16333: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
16334: LD_ADDR_EXP 69
16338: PUSH
16339: LD_INT 0
16341: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16342: LD_ADDR_EXP 70
16346: PUSH
16347: LD_INT 0
16349: ST_TO_ADDR
// def_builduptime := 2 ;
16350: LD_ADDR_EXP 71
16354: PUSH
16355: LD_INT 2
16357: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
16358: LD_ADDR_VAR 0 2
16362: PUSH
16363: LD_INT 1
16365: PUSH
16366: EMPTY
16367: LIST
16368: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
16369: LD_ADDR_VAR 0 3
16373: PUSH
16374: EMPTY
16375: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16376: LD_ADDR_LOC 56
16380: PUSH
16381: EMPTY
16382: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16383: LD_ADDR_LOC 57
16387: PUSH
16388: EMPTY
16389: ST_TO_ADDR
// Banned_Controls := [ ] ;
16390: LD_ADDR_LOC 58
16394: PUSH
16395: EMPTY
16396: ST_TO_ADDR
// Banned_Engines := [ ] ;
16397: LD_ADDR_LOC 59
16401: PUSH
16402: EMPTY
16403: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
16404: LD_ADDR_LOC 54
16408: PUSH
16409: LD_INT 4
16411: PUSH
16412: LD_INT 5
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: PUSH
16419: LD_INT 31
16421: PUSH
16422: LD_INT 32
16424: PUSH
16425: LD_INT 33
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: LIST
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
16437: LD_ADDR_LOC 55
16441: PUSH
16442: LD_INT 1
16444: PUSH
16445: LD_INT 2
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: ST_TO_ADDR
// end ; 3 :
16452: GO 17971
16454: LD_INT 3
16456: DOUBLE
16457: EQUAL
16458: IFTRUE 16462
16460: GO 16705
16462: POP
// begin def_base_level := 1 ;
16463: LD_ADDR_EXP 58
16467: PUSH
16468: LD_INT 1
16470: ST_TO_ADDR
// def_amount_of_people := 2 ;
16471: LD_ADDR_EXP 59
16475: PUSH
16476: LD_INT 2
16478: ST_TO_ADDR
// def_skill_level := 3 ;
16479: LD_ADDR_EXP 60
16483: PUSH
16484: LD_INT 3
16486: ST_TO_ADDR
// def_starting_resources := 3 ;
16487: LD_ADDR_EXP 61
16491: PUSH
16492: LD_INT 3
16494: ST_TO_ADDR
// def_shipments_density := 1 ;
16495: LD_ADDR_EXP 62
16499: PUSH
16500: LD_INT 1
16502: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
16503: LD_ADDR_EXP 63
16507: PUSH
16508: LD_INT 0
16510: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
16511: LD_ADDR_EXP 64
16515: PUSH
16516: LD_INT 1
16518: ST_TO_ADDR
// def_shared_vision := 1 ;
16519: LD_ADDR_EXP 65
16523: PUSH
16524: LD_INT 1
16526: ST_TO_ADDR
// def_morale_flags := 0 ;
16527: LD_ADDR_EXP 66
16531: PUSH
16532: LD_INT 0
16534: ST_TO_ADDR
// def_siberite_detection := 1 ;
16535: LD_ADDR_EXP 67
16539: PUSH
16540: LD_INT 1
16542: ST_TO_ADDR
// def_people_respawning := 0 ;
16543: LD_ADDR_EXP 68
16547: PUSH
16548: LD_INT 0
16550: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
16551: LD_ADDR_EXP 69
16555: PUSH
16556: LD_INT 2
16558: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16559: LD_ADDR_EXP 70
16563: PUSH
16564: LD_INT 0
16566: ST_TO_ADDR
// def_builduptime := 1 ;
16567: LD_ADDR_EXP 71
16571: PUSH
16572: LD_INT 1
16574: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
16575: LD_ADDR_VAR 0 2
16579: PUSH
16580: LD_INT 23
16582: PUSH
16583: EMPTY
16584: LIST
16585: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
16586: LD_ADDR_VAR 0 3
16590: PUSH
16591: LD_INT 2
16593: PUSH
16594: LD_INT 37
16596: PUSH
16597: LD_INT 32
16599: PUSH
16600: LD_INT 33
16602: PUSH
16603: LD_INT 36
16605: PUSH
16606: LD_INT 16
16608: PUSH
16609: LD_INT 23
16611: PUSH
16612: LD_INT 21
16614: PUSH
16615: LD_INT 18
16617: PUSH
16618: LD_INT 22
16620: PUSH
16621: LD_INT 20
16623: PUSH
16624: LD_INT 19
16626: PUSH
16627: LD_INT 25
16629: PUSH
16630: LD_INT 17
16632: PUSH
16633: LD_INT 24
16635: PUSH
16636: EMPTY
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: LIST
16650: LIST
16651: LIST
16652: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16653: LD_ADDR_LOC 56
16657: PUSH
16658: EMPTY
16659: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16660: LD_ADDR_LOC 57
16664: PUSH
16665: EMPTY
16666: ST_TO_ADDR
// Banned_Controls := [ ] ;
16667: LD_ADDR_LOC 58
16671: PUSH
16672: EMPTY
16673: ST_TO_ADDR
// Banned_Engines := [ ] ;
16674: LD_ADDR_LOC 59
16678: PUSH
16679: EMPTY
16680: ST_TO_ADDR
// Restricted_Builds := [ ] ;
16681: LD_ADDR_LOC 54
16685: PUSH
16686: EMPTY
16687: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
16688: LD_ADDR_LOC 55
16692: PUSH
16693: EMPTY
16694: ST_TO_ADDR
// No_Mechs := true ;
16695: LD_ADDR_EXP 72
16699: PUSH
16700: LD_INT 1
16702: ST_TO_ADDR
// end ; 4 :
16703: GO 17971
16705: LD_INT 4
16707: DOUBLE
16708: EQUAL
16709: IFTRUE 16713
16711: GO 16888
16713: POP
// begin def_base_level := 1 ;
16714: LD_ADDR_EXP 58
16718: PUSH
16719: LD_INT 1
16721: ST_TO_ADDR
// def_amount_of_people := 2 ;
16722: LD_ADDR_EXP 59
16726: PUSH
16727: LD_INT 2
16729: ST_TO_ADDR
// def_skill_level := 3 ;
16730: LD_ADDR_EXP 60
16734: PUSH
16735: LD_INT 3
16737: ST_TO_ADDR
// def_starting_resources := 3 ;
16738: LD_ADDR_EXP 61
16742: PUSH
16743: LD_INT 3
16745: ST_TO_ADDR
// def_shipments_density := 2 ;
16746: LD_ADDR_EXP 62
16750: PUSH
16751: LD_INT 2
16753: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
16754: LD_ADDR_EXP 63
16758: PUSH
16759: LD_INT 1
16761: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
16762: LD_ADDR_EXP 64
16766: PUSH
16767: LD_INT 2
16769: ST_TO_ADDR
// def_shared_vision := 1 ;
16770: LD_ADDR_EXP 65
16774: PUSH
16775: LD_INT 1
16777: ST_TO_ADDR
// def_morale_flags := 0 ;
16778: LD_ADDR_EXP 66
16782: PUSH
16783: LD_INT 0
16785: ST_TO_ADDR
// def_siberite_detection := 1 ;
16786: LD_ADDR_EXP 67
16790: PUSH
16791: LD_INT 1
16793: ST_TO_ADDR
// def_people_respawning := 0 ;
16794: LD_ADDR_EXP 68
16798: PUSH
16799: LD_INT 0
16801: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
16802: LD_ADDR_EXP 69
16806: PUSH
16807: LD_INT 0
16809: ST_TO_ADDR
// def_siberite_bomb := 1 ;
16810: LD_ADDR_EXP 70
16814: PUSH
16815: LD_INT 1
16817: ST_TO_ADDR
// def_builduptime := 3 ;
16818: LD_ADDR_EXP 71
16822: PUSH
16823: LD_INT 3
16825: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
16826: LD_ADDR_VAR 0 2
16830: PUSH
16831: LD_INT 1
16833: PUSH
16834: EMPTY
16835: LIST
16836: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
16837: LD_ADDR_VAR 0 3
16841: PUSH
16842: EMPTY
16843: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16844: LD_ADDR_LOC 56
16848: PUSH
16849: EMPTY
16850: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16851: LD_ADDR_LOC 57
16855: PUSH
16856: EMPTY
16857: ST_TO_ADDR
// Banned_Controls := [ ] ;
16858: LD_ADDR_LOC 58
16862: PUSH
16863: EMPTY
16864: ST_TO_ADDR
// Banned_Engines := [ ] ;
16865: LD_ADDR_LOC 59
16869: PUSH
16870: EMPTY
16871: ST_TO_ADDR
// Restricted_Builds := [ ] ;
16872: LD_ADDR_LOC 54
16876: PUSH
16877: EMPTY
16878: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
16879: LD_ADDR_LOC 55
16883: PUSH
16884: EMPTY
16885: ST_TO_ADDR
// end ; 5 :
16886: GO 17971
16888: LD_INT 5
16890: DOUBLE
16891: EQUAL
16892: IFTRUE 16896
16894: GO 17145
16896: POP
// begin def_base_level := 0 ;
16897: LD_ADDR_EXP 58
16901: PUSH
16902: LD_INT 0
16904: ST_TO_ADDR
// def_amount_of_people := 0 ;
16905: LD_ADDR_EXP 59
16909: PUSH
16910: LD_INT 0
16912: ST_TO_ADDR
// def_skill_level := 0 ;
16913: LD_ADDR_EXP 60
16917: PUSH
16918: LD_INT 0
16920: ST_TO_ADDR
// def_starting_resources := 0 ;
16921: LD_ADDR_EXP 61
16925: PUSH
16926: LD_INT 0
16928: ST_TO_ADDR
// def_shipments_density := 0 ;
16929: LD_ADDR_EXP 62
16933: PUSH
16934: LD_INT 0
16936: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
16937: LD_ADDR_EXP 63
16941: PUSH
16942: LD_INT 0
16944: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
16945: LD_ADDR_EXP 64
16949: PUSH
16950: LD_INT 0
16952: ST_TO_ADDR
// def_shared_vision := 1 ;
16953: LD_ADDR_EXP 65
16957: PUSH
16958: LD_INT 1
16960: ST_TO_ADDR
// def_morale_flags := 0 ;
16961: LD_ADDR_EXP 66
16965: PUSH
16966: LD_INT 0
16968: ST_TO_ADDR
// def_siberite_detection := 0 ;
16969: LD_ADDR_EXP 67
16973: PUSH
16974: LD_INT 0
16976: ST_TO_ADDR
// def_people_respawning := 1 ;
16977: LD_ADDR_EXP 68
16981: PUSH
16982: LD_INT 1
16984: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
16985: LD_ADDR_EXP 69
16989: PUSH
16990: LD_INT 1
16992: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16993: LD_ADDR_EXP 70
16997: PUSH
16998: LD_INT 0
17000: ST_TO_ADDR
// def_builduptime := 0 ;
17001: LD_ADDR_EXP 71
17005: PUSH
17006: LD_INT 0
17008: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
17009: LD_ADDR_VAR 0 2
17013: PUSH
17014: LD_INT 10
17016: PUSH
17017: LD_INT 3
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
17024: LD_ADDR_VAR 0 3
17028: PUSH
17029: LD_INT 12
17031: PUSH
17032: LD_INT 11
17034: PUSH
17035: LD_INT 14
17037: PUSH
17038: LD_INT 13
17040: PUSH
17041: LD_INT 5
17043: PUSH
17044: LD_INT 24
17046: PUSH
17047: LD_INT 21
17049: PUSH
17050: LD_INT 33
17052: PUSH
17053: LD_INT 36
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
17067: LD_ADDR_LOC 56
17071: PUSH
17072: LD_INT 31
17074: PUSH
17075: EMPTY
17076: LIST
17077: ST_TO_ADDR
// Banned_Chassis := [ ] ;
17078: LD_ADDR_LOC 57
17082: PUSH
17083: EMPTY
17084: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
17085: LD_ADDR_LOC 58
17089: PUSH
17090: LD_INT 2
17092: PUSH
17093: EMPTY
17094: LIST
17095: ST_TO_ADDR
// Banned_Engines := [ ] ;
17096: LD_ADDR_LOC 59
17100: PUSH
17101: EMPTY
17102: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
17103: LD_ADDR_LOC 54
17107: PUSH
17108: LD_INT 4
17110: PUSH
17111: EMPTY
17112: LIST
17113: PUSH
17114: LD_INT 31
17116: PUSH
17117: LD_INT 32
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
17128: LD_ADDR_LOC 55
17132: PUSH
17133: LD_INT 1
17135: PUSH
17136: LD_INT 1
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: ST_TO_ADDR
// end ; 6 :
17143: GO 17971
17145: LD_INT 6
17147: DOUBLE
17148: EQUAL
17149: IFTRUE 17153
17151: GO 17356
17153: POP
// begin def_base_level := 1 ;
17154: LD_ADDR_EXP 58
17158: PUSH
17159: LD_INT 1
17161: ST_TO_ADDR
// def_amount_of_people := 2 ;
17162: LD_ADDR_EXP 59
17166: PUSH
17167: LD_INT 2
17169: ST_TO_ADDR
// def_skill_level := 3 ;
17170: LD_ADDR_EXP 60
17174: PUSH
17175: LD_INT 3
17177: ST_TO_ADDR
// def_starting_resources := 3 ;
17178: LD_ADDR_EXP 61
17182: PUSH
17183: LD_INT 3
17185: ST_TO_ADDR
// def_shipments_density := 1 ;
17186: LD_ADDR_EXP 62
17190: PUSH
17191: LD_INT 1
17193: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
17194: LD_ADDR_EXP 63
17198: PUSH
17199: LD_INT 0
17201: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
17202: LD_ADDR_EXP 64
17206: PUSH
17207: LD_INT 1
17209: ST_TO_ADDR
// def_shared_vision := 1 ;
17210: LD_ADDR_EXP 65
17214: PUSH
17215: LD_INT 1
17217: ST_TO_ADDR
// def_morale_flags := 0 ;
17218: LD_ADDR_EXP 66
17222: PUSH
17223: LD_INT 0
17225: ST_TO_ADDR
// def_siberite_detection := 1 ;
17226: LD_ADDR_EXP 67
17230: PUSH
17231: LD_INT 1
17233: ST_TO_ADDR
// def_people_respawning := 2 ;
17234: LD_ADDR_EXP 68
17238: PUSH
17239: LD_INT 2
17241: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
17242: LD_ADDR_EXP 69
17246: PUSH
17247: LD_INT 1
17249: ST_TO_ADDR
// def_siberite_bomb := 0 ;
17250: LD_ADDR_EXP 70
17254: PUSH
17255: LD_INT 0
17257: ST_TO_ADDR
// def_builduptime := 1 ;
17258: LD_ADDR_EXP 71
17262: PUSH
17263: LD_INT 1
17265: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
17266: LD_ADDR_VAR 0 2
17270: PUSH
17271: LD_INT 23
17273: PUSH
17274: EMPTY
17275: LIST
17276: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
17277: LD_ADDR_VAR 0 3
17281: PUSH
17282: LD_INT 2
17284: PUSH
17285: LD_INT 37
17287: PUSH
17288: LD_INT 31
17290: PUSH
17291: LD_INT 32
17293: PUSH
17294: LD_INT 33
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: ST_TO_ADDR
// Banned_Weapons := [ ] ;
17304: LD_ADDR_LOC 56
17308: PUSH
17309: EMPTY
17310: ST_TO_ADDR
// Banned_Chassis := [ ] ;
17311: LD_ADDR_LOC 57
17315: PUSH
17316: EMPTY
17317: ST_TO_ADDR
// Banned_Controls := [ ] ;
17318: LD_ADDR_LOC 58
17322: PUSH
17323: EMPTY
17324: ST_TO_ADDR
// Banned_Engines := [ ] ;
17325: LD_ADDR_LOC 59
17329: PUSH
17330: EMPTY
17331: ST_TO_ADDR
// Restricted_Builds := [ ] ;
17332: LD_ADDR_LOC 54
17336: PUSH
17337: EMPTY
17338: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
17339: LD_ADDR_LOC 55
17343: PUSH
17344: EMPTY
17345: ST_TO_ADDR
// No_Mechs := true ;
17346: LD_ADDR_EXP 72
17350: PUSH
17351: LD_INT 1
17353: ST_TO_ADDR
// end ; 7 :
17354: GO 17971
17356: LD_INT 7
17358: DOUBLE
17359: EQUAL
17360: IFTRUE 17364
17362: GO 17562
17364: POP
// begin def_base_level := 1 ;
17365: LD_ADDR_EXP 58
17369: PUSH
17370: LD_INT 1
17372: ST_TO_ADDR
// def_amount_of_people := 2 ;
17373: LD_ADDR_EXP 59
17377: PUSH
17378: LD_INT 2
17380: ST_TO_ADDR
// def_skill_level := 3 ;
17381: LD_ADDR_EXP 60
17385: PUSH
17386: LD_INT 3
17388: ST_TO_ADDR
// def_starting_resources := 3 ;
17389: LD_ADDR_EXP 61
17393: PUSH
17394: LD_INT 3
17396: ST_TO_ADDR
// def_shipments_density := 1 ;
17397: LD_ADDR_EXP 62
17401: PUSH
17402: LD_INT 1
17404: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
17405: LD_ADDR_EXP 63
17409: PUSH
17410: LD_INT 1
17412: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
17413: LD_ADDR_EXP 64
17417: PUSH
17418: LD_INT 2
17420: ST_TO_ADDR
// def_shared_vision := 1 ;
17421: LD_ADDR_EXP 65
17425: PUSH
17426: LD_INT 1
17428: ST_TO_ADDR
// def_morale_flags := 0 ;
17429: LD_ADDR_EXP 66
17433: PUSH
17434: LD_INT 0
17436: ST_TO_ADDR
// def_siberite_detection := 1 ;
17437: LD_ADDR_EXP 67
17441: PUSH
17442: LD_INT 1
17444: ST_TO_ADDR
// def_people_respawning := 0 ;
17445: LD_ADDR_EXP 68
17449: PUSH
17450: LD_INT 0
17452: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
17453: LD_ADDR_EXP 69
17457: PUSH
17458: LD_INT 1
17460: ST_TO_ADDR
// def_siberite_bomb := 0 ;
17461: LD_ADDR_EXP 70
17465: PUSH
17466: LD_INT 0
17468: ST_TO_ADDR
// def_builduptime := 3 ;
17469: LD_ADDR_EXP 71
17473: PUSH
17474: LD_INT 3
17476: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
17477: LD_ADDR_VAR 0 2
17481: PUSH
17482: LD_INT 23
17484: PUSH
17485: EMPTY
17486: LIST
17487: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
17488: LD_ADDR_VAR 0 3
17492: PUSH
17493: LD_INT 37
17495: PUSH
17496: EMPTY
17497: LIST
17498: ST_TO_ADDR
// Banned_Weapons := [ ] ;
17499: LD_ADDR_LOC 56
17503: PUSH
17504: EMPTY
17505: ST_TO_ADDR
// Banned_Chassis := [ ] ;
17506: LD_ADDR_LOC 57
17510: PUSH
17511: EMPTY
17512: ST_TO_ADDR
// Banned_Controls := [ ] ;
17513: LD_ADDR_LOC 58
17517: PUSH
17518: EMPTY
17519: ST_TO_ADDR
// Banned_Engines := [ ] ;
17520: LD_ADDR_LOC 59
17524: PUSH
17525: EMPTY
17526: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
17527: LD_ADDR_LOC 54
17531: PUSH
17532: LD_INT 31
17534: PUSH
17535: LD_INT 32
17537: PUSH
17538: LD_INT 33
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: LIST
17545: PUSH
17546: EMPTY
17547: LIST
17548: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
17549: LD_ADDR_LOC 55
17553: PUSH
17554: LD_INT 10
17556: PUSH
17557: EMPTY
17558: LIST
17559: ST_TO_ADDR
// end ; 8 :
17560: GO 17971
17562: LD_INT 8
17564: DOUBLE
17565: EQUAL
17566: IFTRUE 17570
17568: GO 17970
17570: POP
// begin def_base_level := 0 ;
17571: LD_ADDR_EXP 58
17575: PUSH
17576: LD_INT 0
17578: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
17579: LD_ADDR_EXP 59
17583: PUSH
17584: LD_INT 0
17586: PPUSH
17587: LD_INT 1
17589: PPUSH
17590: CALL_OW 12
17594: ST_TO_ADDR
// def_skill_level := 0 ;
17595: LD_ADDR_EXP 60
17599: PUSH
17600: LD_INT 0
17602: ST_TO_ADDR
// def_starting_resources := 2 ;
17603: LD_ADDR_EXP 61
17607: PUSH
17608: LD_INT 2
17610: ST_TO_ADDR
// def_shipments_density := 1 ;
17611: LD_ADDR_EXP 62
17615: PUSH
17616: LD_INT 1
17618: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
17619: LD_ADDR_EXP 63
17623: PUSH
17624: LD_INT 0
17626: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
17627: LD_ADDR_EXP 64
17631: PUSH
17632: LD_INT 0
17634: ST_TO_ADDR
// def_shared_vision := 1 ;
17635: LD_ADDR_EXP 65
17639: PUSH
17640: LD_INT 1
17642: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
17643: LD_ADDR_EXP 66
17647: PUSH
17648: LD_INT 0
17650: PPUSH
17651: LD_INT 2
17653: PPUSH
17654: CALL_OW 12
17658: ST_TO_ADDR
// def_siberite_detection := 0 ;
17659: LD_ADDR_EXP 67
17663: PUSH
17664: LD_INT 0
17666: ST_TO_ADDR
// def_people_respawning := 0 ;
17667: LD_ADDR_EXP 68
17671: PUSH
17672: LD_INT 0
17674: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
17675: LD_ADDR_EXP 69
17679: PUSH
17680: LD_INT 2
17682: ST_TO_ADDR
// def_siberite_bomb := 0 ;
17683: LD_ADDR_EXP 70
17687: PUSH
17688: LD_INT 0
17690: ST_TO_ADDR
// def_builduptime := 0 ;
17691: LD_ADDR_EXP 71
17695: PUSH
17696: LD_INT 0
17698: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
17699: LD_ADDR_VAR 0 2
17703: PUSH
17704: LD_INT 23
17706: PUSH
17707: LD_INT 20
17709: PUSH
17710: LD_INT 40
17712: PUSH
17713: LD_INT 47
17715: PUSH
17716: LD_INT 46
17718: PUSH
17719: LD_INT 39
17721: PUSH
17722: LD_INT 71
17724: PUSH
17725: LD_INT 34
17727: PUSH
17728: LD_INT 41
17730: PUSH
17731: LD_INT 44
17733: PUSH
17734: LD_INT 17
17736: PUSH
17737: LD_INT 16
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
17754: LD_ADDR_VAR 0 3
17758: PUSH
17759: LD_INT 37
17761: PUSH
17762: LD_INT 5
17764: PUSH
17765: LD_INT 13
17767: PUSH
17768: LD_INT 34
17770: PUSH
17771: LD_INT 12
17773: PUSH
17774: LD_INT 15
17776: PUSH
17777: LD_INT 11
17779: PUSH
17780: LD_INT 14
17782: PUSH
17783: LD_INT 29
17785: PUSH
17786: LD_INT 30
17788: PUSH
17789: LD_INT 28
17791: PUSH
17792: LD_INT 24
17794: PUSH
17795: LD_INT 25
17797: PUSH
17798: LD_INT 20
17800: PUSH
17801: LD_INT 21
17803: PUSH
17804: LD_INT 22
17806: PUSH
17807: LD_INT 36
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: ST_TO_ADDR
// Banned_Weapons := [ ] ;
17829: LD_ADDR_LOC 56
17833: PUSH
17834: EMPTY
17835: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
17836: LD_ADDR_LOC 57
17840: PUSH
17841: LD_INT 14
17843: PUSH
17844: EMPTY
17845: LIST
17846: ST_TO_ADDR
// Banned_Controls := [ ] ;
17847: LD_ADDR_LOC 58
17851: PUSH
17852: EMPTY
17853: ST_TO_ADDR
// Banned_Engines := [ ] ;
17854: LD_ADDR_LOC 59
17858: PUSH
17859: EMPTY
17860: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
17861: LD_ADDR_LOC 54
17865: PUSH
17866: LD_INT 31
17868: PUSH
17869: LD_INT 32
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: PUSH
17876: LD_INT 4
17878: PUSH
17879: EMPTY
17880: LIST
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
17886: LD_ADDR_LOC 55
17890: PUSH
17891: LD_INT 2
17893: PUSH
17894: LD_INT 1
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: ST_TO_ADDR
// for i := 1 to 8 do
17901: LD_ADDR_VAR 0 4
17905: PUSH
17906: DOUBLE
17907: LD_INT 1
17909: DEC
17910: ST_TO_ADDR
17911: LD_INT 8
17913: PUSH
17914: FOR_TO
17915: IFFALSE 17966
// if ( Side_Nations [ i ] = 3 ) then
17917: LD_EXP 19
17921: PUSH
17922: LD_VAR 0 4
17926: ARRAY
17927: PUSH
17928: LD_INT 3
17930: EQUAL
17931: IFFALSE 17964
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
17933: LD_ADDR_EXP 19
17937: PUSH
17938: LD_EXP 19
17942: PPUSH
17943: LD_VAR 0 4
17947: PPUSH
17948: LD_INT 1
17950: PPUSH
17951: LD_INT 2
17953: PPUSH
17954: CALL_OW 12
17958: PPUSH
17959: CALL_OW 1
17963: ST_TO_ADDR
17964: GO 17914
17966: POP
17967: POP
// end ; end ;
17968: GO 17971
17970: POP
// for i := 1 to 8 do
17971: LD_ADDR_VAR 0 4
17975: PUSH
17976: DOUBLE
17977: LD_INT 1
17979: DEC
17980: ST_TO_ADDR
17981: LD_INT 8
17983: PUSH
17984: FOR_TO
17985: IFFALSE 18069
// if Side_Positions [ i ] then
17987: LD_EXP 18
17991: PUSH
17992: LD_VAR 0 4
17996: ARRAY
17997: IFFALSE 18067
// begin for j in Unavailable_Techs do
17999: LD_ADDR_VAR 0 5
18003: PUSH
18004: LD_VAR 0 2
18008: PUSH
18009: FOR_IN
18010: IFFALSE 18031
// SetTech ( j , i , 0 ) ;
18012: LD_VAR 0 5
18016: PPUSH
18017: LD_VAR 0 4
18021: PPUSH
18022: LD_INT 0
18024: PPUSH
18025: CALL_OW 322
18029: GO 18009
18031: POP
18032: POP
// for j in Unavailable_Builds do
18033: LD_ADDR_VAR 0 5
18037: PUSH
18038: LD_VAR 0 3
18042: PUSH
18043: FOR_IN
18044: IFFALSE 18065
// SetRestrict ( j , i , 0 ) ;
18046: LD_VAR 0 5
18050: PPUSH
18051: LD_VAR 0 4
18055: PPUSH
18056: LD_INT 0
18058: PPUSH
18059: CALL_OW 324
18063: GO 18043
18065: POP
18066: POP
// end ;
18067: GO 17984
18069: POP
18070: POP
// end ;
18071: LD_VAR 0 1
18075: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
18076: LD_INT 0
18078: PPUSH
18079: PPUSH
18080: PPUSH
18081: PPUSH
18082: PPUSH
18083: PPUSH
18084: PPUSH
// for i := 1 to Restricted_Builds do
18085: LD_ADDR_VAR 0 2
18089: PUSH
18090: DOUBLE
18091: LD_INT 1
18093: DEC
18094: ST_TO_ADDR
18095: LD_LOC 54
18099: PUSH
18100: FOR_TO
18101: IFFALSE 18411
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
18103: LD_LOC 54
18107: PUSH
18108: LD_VAR 0 2
18112: ARRAY
18113: PUSH
18114: LD_INT 1
18116: ARRAY
18117: PUSH
18118: LD_INT 31
18120: DOUBLE
18121: EQUAL
18122: IFTRUE 18138
18124: LD_INT 32
18126: DOUBLE
18127: EQUAL
18128: IFTRUE 18138
18130: LD_INT 33
18132: DOUBLE
18133: EQUAL
18134: IFTRUE 18138
18136: GO 18149
18138: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
18139: LD_ADDR_VAR 0 6
18143: PUSH
18144: LD_STRING #Turrets
18146: ST_TO_ADDR
18147: GO 18194
18149: LD_INT 4
18151: DOUBLE
18152: EQUAL
18153: IFTRUE 18163
18155: LD_INT 5
18157: DOUBLE
18158: EQUAL
18159: IFTRUE 18163
18161: GO 18174
18163: POP
// btype := #Armouries ; b_Behemoth :
18164: LD_ADDR_VAR 0 6
18168: PUSH
18169: LD_STRING #Armouries
18171: ST_TO_ADDR
18172: GO 18194
18174: LD_INT 37
18176: DOUBLE
18177: EQUAL
18178: IFTRUE 18182
18180: GO 18193
18182: POP
// btype := #Behemoths ; end ;
18183: LD_ADDR_VAR 0 6
18187: PUSH
18188: LD_STRING #Behemoths
18190: ST_TO_ADDR
18191: GO 18194
18193: POP
// list := [ ] ;
18194: LD_ADDR_VAR 0 7
18198: PUSH
18199: EMPTY
18200: ST_TO_ADDR
// for j := 1 to 8 do
18201: LD_ADDR_VAR 0 3
18205: PUSH
18206: DOUBLE
18207: LD_INT 1
18209: DEC
18210: ST_TO_ADDR
18211: LD_INT 8
18213: PUSH
18214: FOR_TO
18215: IFFALSE 18308
// if Side_Positions [ j ] then
18217: LD_EXP 18
18221: PUSH
18222: LD_VAR 0 3
18226: ARRAY
18227: IFFALSE 18306
// begin amount := 0 ;
18229: LD_ADDR_VAR 0 5
18233: PUSH
18234: LD_INT 0
18236: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
18237: LD_ADDR_VAR 0 4
18241: PUSH
18242: LD_LOC 54
18246: PUSH
18247: LD_VAR 0 2
18251: ARRAY
18252: PUSH
18253: FOR_IN
18254: IFFALSE 18302
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
18256: LD_ADDR_VAR 0 5
18260: PUSH
18261: LD_VAR 0 5
18265: PUSH
18266: LD_INT 22
18268: PUSH
18269: LD_VAR 0 3
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: PUSH
18278: LD_INT 30
18280: PUSH
18281: LD_VAR 0 4
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PPUSH
18294: CALL_OW 69
18298: PLUS
18299: ST_TO_ADDR
18300: GO 18253
18302: POP
18303: POP
// break ;
18304: GO 18308
// end ;
18306: GO 18214
18308: POP
18309: POP
// list := [ ] ;
18310: LD_ADDR_VAR 0 7
18314: PUSH
18315: EMPTY
18316: ST_TO_ADDR
// for j := 1 to 8 do
18317: LD_ADDR_VAR 0 3
18321: PUSH
18322: DOUBLE
18323: LD_INT 1
18325: DEC
18326: ST_TO_ADDR
18327: LD_INT 8
18329: PUSH
18330: FOR_TO
18331: IFFALSE 18351
// list := list ^ amount ;
18333: LD_ADDR_VAR 0 7
18337: PUSH
18338: LD_VAR 0 7
18342: PUSH
18343: LD_VAR 0 5
18347: ADD
18348: ST_TO_ADDR
18349: GO 18330
18351: POP
18352: POP
// Already_Built := Already_Built ^ [ list ] ;
18353: LD_ADDR_LOC 60
18357: PUSH
18358: LD_LOC 60
18362: PUSH
18363: LD_VAR 0 7
18367: PUSH
18368: EMPTY
18369: LIST
18370: ADD
18371: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
18372: LD_ADDR_LOC 61
18376: PUSH
18377: LD_LOC 61
18381: PUSH
18382: LD_VAR 0 6
18386: PUSH
18387: LD_VAR 0 5
18391: PUSH
18392: LD_LOC 55
18396: PUSH
18397: LD_VAR 0 2
18401: ARRAY
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: LIST
18407: ADD
18408: ST_TO_ADDR
// end ;
18409: GO 18100
18411: POP
18412: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
18413: LD_ADDR_LOC 62
18417: PUSH
18418: LD_INT 0
18420: PUSH
18421: LD_INT 0
18423: PUSH
18424: LD_INT 0
18426: PUSH
18427: LD_INT 0
18429: PUSH
18430: LD_INT 0
18432: PUSH
18433: LD_INT 0
18435: PUSH
18436: LD_INT 0
18438: PUSH
18439: LD_INT 0
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: ST_TO_ADDR
// if Limits_Info then
18452: LD_LOC 61
18456: IFFALSE 18472
// Limits_Info := #Limits ^ Limits_Info ;
18458: LD_ADDR_LOC 61
18462: PUSH
18463: LD_STRING #Limits
18465: PUSH
18466: LD_LOC 61
18470: ADD
18471: ST_TO_ADDR
// end ;
18472: LD_VAR 0 1
18476: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
18477: LD_INT 0
18479: PPUSH
18480: PPUSH
18481: PPUSH
18482: PPUSH
// for i := 1 to Restricted_Builds do
18483: LD_ADDR_VAR 0 7
18487: PUSH
18488: DOUBLE
18489: LD_INT 1
18491: DEC
18492: ST_TO_ADDR
18493: LD_LOC 54
18497: PUSH
18498: FOR_TO
18499: IFFALSE 18922
// if BType in Restricted_Builds [ i ] then
18501: LD_VAR 0 2
18505: PUSH
18506: LD_LOC 54
18510: PUSH
18511: LD_VAR 0 7
18515: ARRAY
18516: IN
18517: IFFALSE 18920
// begin if old_side then
18519: LD_VAR 0 4
18523: IFFALSE 18649
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
18525: LD_LOC 60
18529: PUSH
18530: LD_VAR 0 7
18534: ARRAY
18535: PUSH
18536: LD_VAR 0 3
18540: ARRAY
18541: PUSH
18542: LD_VAR 0 5
18546: PLUS
18547: PUSH
18548: LD_LOC 55
18552: PUSH
18553: LD_VAR 0 7
18557: ARRAY
18558: GREATER
18559: IFFALSE 18585
// begin SetSide ( un , old_side ) ;
18561: LD_VAR 0 1
18565: PPUSH
18566: LD_VAR 0 4
18570: PPUSH
18571: CALL_OW 235
// count := 0 ;
18575: LD_ADDR_VAR 0 5
18579: PUSH
18580: LD_INT 0
18582: ST_TO_ADDR
// end else
18583: GO 18649
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
18585: LD_ADDR_LOC 60
18589: PUSH
18590: LD_LOC 60
18594: PPUSH
18595: LD_VAR 0 7
18599: PPUSH
18600: LD_LOC 60
18604: PUSH
18605: LD_VAR 0 7
18609: ARRAY
18610: PPUSH
18611: LD_VAR 0 4
18615: PPUSH
18616: LD_LOC 60
18620: PUSH
18621: LD_VAR 0 7
18625: ARRAY
18626: PUSH
18627: LD_VAR 0 4
18631: ARRAY
18632: PUSH
18633: LD_VAR 0 5
18637: MINUS
18638: PPUSH
18639: CALL_OW 1
18643: PPUSH
18644: CALL_OW 1
18648: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
18649: LD_ADDR_LOC 60
18653: PUSH
18654: LD_LOC 60
18658: PPUSH
18659: LD_VAR 0 7
18663: PPUSH
18664: LD_LOC 60
18668: PUSH
18669: LD_VAR 0 7
18673: ARRAY
18674: PPUSH
18675: LD_VAR 0 3
18679: PPUSH
18680: LD_LOC 60
18684: PUSH
18685: LD_VAR 0 7
18689: ARRAY
18690: PUSH
18691: LD_VAR 0 3
18695: ARRAY
18696: PUSH
18697: LD_VAR 0 5
18701: PLUS
18702: PPUSH
18703: CALL_OW 1
18707: PPUSH
18708: CALL_OW 1
18712: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
18713: LD_VAR 0 5
18717: PUSH
18718: LD_INT 0
18720: NONEQUAL
18721: PUSH
18722: LD_VAR 0 3
18726: PUSH
18727: LD_OWVAR 2
18731: EQUAL
18732: AND
18733: IFFALSE 18776
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
18735: LD_ADDR_LOC 61
18739: PUSH
18740: LD_LOC 61
18744: PPUSH
18745: LD_INT 3
18747: PUSH
18748: LD_VAR 0 7
18752: MUL
18753: PPUSH
18754: LD_LOC 60
18758: PUSH
18759: LD_VAR 0 7
18763: ARRAY
18764: PUSH
18765: LD_VAR 0 3
18769: ARRAY
18770: PPUSH
18771: CALL_OW 1
18775: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
18776: LD_LOC 60
18780: PUSH
18781: LD_VAR 0 7
18785: ARRAY
18786: PUSH
18787: LD_VAR 0 3
18791: ARRAY
18792: PUSH
18793: LD_LOC 55
18797: PUSH
18798: LD_VAR 0 7
18802: ARRAY
18803: GREATER
18804: IFFALSE 18831
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
18806: LD_ADDR_LOC 62
18810: PUSH
18811: LD_LOC 62
18815: PPUSH
18816: LD_VAR 0 3
18820: PPUSH
18821: LD_INT 1
18823: PPUSH
18824: CALL_OW 1
18828: ST_TO_ADDR
// end else
18829: GO 18918
// begin for j := 1 to Restricted_Builds do
18831: LD_ADDR_VAR 0 8
18835: PUSH
18836: DOUBLE
18837: LD_INT 1
18839: DEC
18840: ST_TO_ADDR
18841: LD_LOC 54
18845: PUSH
18846: FOR_TO
18847: IFFALSE 18891
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
18849: LD_LOC 60
18853: PUSH
18854: LD_VAR 0 8
18858: ARRAY
18859: PUSH
18860: LD_VAR 0 3
18864: ARRAY
18865: PUSH
18866: LD_LOC 55
18870: PUSH
18871: LD_VAR 0 8
18875: ARRAY
18876: GREATER
18877: IFFALSE 18889
// begin Is_Cheater := true ;
18879: LD_ADDR_VAR 0 9
18883: PUSH
18884: LD_INT 1
18886: ST_TO_ADDR
// break ;
18887: GO 18891
// end ;
18889: GO 18846
18891: POP
18892: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
18893: LD_ADDR_LOC 62
18897: PUSH
18898: LD_LOC 62
18902: PPUSH
18903: LD_VAR 0 3
18907: PPUSH
18908: LD_VAR 0 9
18912: PPUSH
18913: CALL_OW 1
18917: ST_TO_ADDR
// end ; break ;
18918: GO 18922
// end ;
18920: GO 18498
18922: POP
18923: POP
// end ;
18924: LD_VAR 0 6
18928: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
18929: LD_VAR 0 5
18933: PUSH
18934: LD_LOC 56
18938: IN
18939: PUSH
18940: LD_VAR 0 2
18944: PUSH
18945: LD_LOC 57
18949: IN
18950: OR
18951: PUSH
18952: LD_VAR 0 4
18956: PUSH
18957: LD_LOC 58
18961: IN
18962: OR
18963: PUSH
18964: LD_VAR 0 3
18968: PUSH
18969: LD_LOC 59
18973: IN
18974: OR
18975: IFFALSE 18986
// ComCancel ( factory ) ;
18977: LD_VAR 0 1
18981: PPUSH
18982: CALL_OW 127
// end ;
18986: PPOPN 5
18988: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
18989: LD_VAR 0 2
18993: PUSH
18994: LD_LOC 56
18998: IN
18999: IFFALSE 19010
// ComCancel ( building ) ;
19001: LD_VAR 0 1
19005: PPUSH
19006: CALL_OW 127
// end ; end_of_file
19010: PPOPN 2
19012: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
19013: LD_INT 0
19015: PPUSH
19016: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
19017: LD_ADDR_VAR 0 2
19021: PUSH
19022: LD_STRING #Multi1x1-Time
19024: PUSH
19025: LD_OWVAR 1
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
19034: LD_INT 0
19036: PUSH
19037: LD_EXP 15
19041: PUSH
19042: LD_OWVAR 1
19046: MINUS
19047: LESSEQUAL
19048: IFFALSE 19079
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
19050: LD_ADDR_VAR 0 2
19054: PUSH
19055: LD_VAR 0 2
19059: PUSH
19060: LD_STRING #allowedsibbomb
19062: PUSH
19063: LD_EXP 15
19067: PUSH
19068: LD_OWVAR 1
19072: MINUS
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: ADD
19078: ST_TO_ADDR
// if ( ExtraStrings ) then
19079: LD_EXP 73
19083: IFFALSE 19105
// AllStrings := AllStrings ^  ^ ExtraStrings ;
19085: LD_ADDR_VAR 0 2
19089: PUSH
19090: LD_VAR 0 2
19094: PUSH
19095: LD_STRING 
19097: ADD
19098: PUSH
19099: LD_EXP 73
19103: ADD
19104: ST_TO_ADDR
// if ( LimitsStrings ) then
19105: CALL 15853 0 0
19109: IFFALSE 19131
// AllStrings := AllStrings ^  ^ LimitsStrings ;
19111: LD_ADDR_VAR 0 2
19115: PUSH
19116: LD_VAR 0 2
19120: PUSH
19121: LD_STRING 
19123: ADD
19124: PUSH
19125: CALL 15853 0 0
19129: ADD
19130: ST_TO_ADDR
// Display_Strings := AllStrings ;
19131: LD_ADDR_OWVAR 47
19135: PUSH
19136: LD_VAR 0 2
19140: ST_TO_ADDR
// end ;
19141: LD_VAR 0 1
19145: RET
// every 0 0$1 do
19146: GO 19148
19148: DISABLE
// begin ShowTimer ;
19149: CALL 19013 0 0
// enable ;
19153: ENABLE
// end ; end_of_file
19154: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
19155: LD_INT 0
19157: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
19158: LD_VAR 0 1
19162: PPUSH
19163: CALL_OW 255
19167: PUSH
19168: LD_VAR 0 4
19172: EQUAL
19173: IFFALSE 19192
// begin SetAchievement ( ACH_RAD ) ;
19175: LD_STRING ACH_RAD
19177: PPUSH
19178: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
19182: LD_STRING ACH_NL
19184: PPUSH
19185: LD_INT 1
19187: PPUSH
19188: CALL_OW 564
// end end ;
19192: LD_VAR 0 5
19196: RET
// export function SA_Win ( side ) ; begin
19197: LD_INT 0
19199: PPUSH
// case side of 1 :
19200: LD_VAR 0 1
19204: PUSH
19205: LD_INT 1
19207: DOUBLE
19208: EQUAL
19209: IFTRUE 19213
19211: GO 19226
19213: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
19214: LD_STRING ACH_AH
19216: PPUSH
19217: LD_INT 1
19219: PPUSH
19220: CALL_OW 564
19224: GO 19389
19226: LD_INT 2
19228: DOUBLE
19229: EQUAL
19230: IFTRUE 19234
19232: GO 19247
19234: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
19235: LD_STRING ACH_E
19237: PPUSH
19238: LD_INT 1
19240: PPUSH
19241: CALL_OW 564
19245: GO 19389
19247: LD_INT 3
19249: DOUBLE
19250: EQUAL
19251: IFTRUE 19255
19253: GO 19268
19255: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
19256: LD_STRING ACH_OOL
19258: PPUSH
19259: LD_INT 1
19261: PPUSH
19262: CALL_OW 564
19266: GO 19389
19268: LD_INT 1
19270: PUSH
19271: LD_INT 2
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: DOUBLE
19278: EQUAL
19279: IFTRUE 19283
19281: GO 19308
19283: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
19284: LD_STRING ACH_AH
19286: PPUSH
19287: LD_REAL  5.00000000000000E-0001
19290: PPUSH
19291: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
19295: LD_STRING ACH_E
19297: PPUSH
19298: LD_REAL  5.00000000000000E-0001
19301: PPUSH
19302: CALL_OW 564
// end ; [ 2 , 3 ] :
19306: GO 19389
19308: LD_INT 2
19310: PUSH
19311: LD_INT 3
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: DOUBLE
19318: EQUAL
19319: IFTRUE 19323
19321: GO 19348
19323: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
19324: LD_STRING ACH_OOL
19326: PPUSH
19327: LD_REAL  5.00000000000000E-0001
19330: PPUSH
19331: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
19335: LD_STRING ACH_E
19337: PPUSH
19338: LD_REAL  5.00000000000000E-0001
19341: PPUSH
19342: CALL_OW 564
// end ; [ 3 , 1 ] :
19346: GO 19389
19348: LD_INT 3
19350: PUSH
19351: LD_INT 1
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: DOUBLE
19358: EQUAL
19359: IFTRUE 19363
19361: GO 19388
19363: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
19364: LD_STRING ACH_AH
19366: PPUSH
19367: LD_REAL  5.00000000000000E-0001
19370: PPUSH
19371: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
19375: LD_STRING ACH_OOL
19377: PPUSH
19378: LD_REAL  5.00000000000000E-0001
19381: PPUSH
19382: CALL_OW 564
// end ; end ;
19386: GO 19389
19388: POP
// end ; end_of_file
19389: LD_VAR 0 2
19393: RET
// export function SetMpTechs ( ) ; var side , i ; begin
19394: LD_INT 0
19396: PPUSH
19397: PPUSH
19398: PPUSH
// for side = 1 to 8 do
19399: LD_ADDR_VAR 0 2
19403: PUSH
19404: DOUBLE
19405: LD_INT 1
19407: DEC
19408: ST_TO_ADDR
19409: LD_INT 8
19411: PUSH
19412: FOR_TO
19413: IFFALSE 19534
// begin for i = 1 to 72 do
19415: LD_ADDR_VAR 0 3
19419: PUSH
19420: DOUBLE
19421: LD_INT 1
19423: DEC
19424: ST_TO_ADDR
19425: LD_INT 72
19427: PUSH
19428: FOR_TO
19429: IFFALSE 19460
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
19431: LD_VAR 0 3
19435: PPUSH
19436: LD_VAR 0 2
19440: PPUSH
19441: LD_INT 0
19443: PPUSH
19444: LD_VAR 0 3
19448: PPUSH
19449: CALL_OW 565
19453: PPUSH
19454: CALL_OW 322
19458: GO 19428
19460: POP
19461: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
19462: LD_INT 73
19464: PPUSH
19465: LD_VAR 0 2
19469: PPUSH
19470: LD_INT 0
19472: PPUSH
19473: LD_INT 25
19475: PPUSH
19476: CALL_OW 565
19480: PPUSH
19481: CALL_OW 322
// for i = 0 to 40 do
19485: LD_ADDR_VAR 0 3
19489: PUSH
19490: DOUBLE
19491: LD_INT 0
19493: DEC
19494: ST_TO_ADDR
19495: LD_INT 40
19497: PUSH
19498: FOR_TO
19499: IFFALSE 19530
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
19501: LD_VAR 0 3
19505: PPUSH
19506: LD_VAR 0 2
19510: PPUSH
19511: LD_INT 1
19513: PPUSH
19514: LD_VAR 0 3
19518: PPUSH
19519: CALL_OW 565
19523: PPUSH
19524: CALL_OW 324
19528: GO 19498
19530: POP
19531: POP
// end ;
19532: GO 19412
19534: POP
19535: POP
// end ;
19536: LD_VAR 0 1
19540: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
19541: LD_INT 0
19543: PPUSH
19544: PPUSH
19545: PPUSH
// for side = 1 to 8 do
19546: LD_ADDR_VAR 0 3
19550: PUSH
19551: DOUBLE
19552: LD_INT 1
19554: DEC
19555: ST_TO_ADDR
19556: LD_INT 8
19558: PUSH
19559: FOR_TO
19560: IFFALSE 23556
// begin for i = 1 to 73 do
19562: LD_ADDR_VAR 0 4
19566: PUSH
19567: DOUBLE
19568: LD_INT 1
19570: DEC
19571: ST_TO_ADDR
19572: LD_INT 73
19574: PUSH
19575: FOR_TO
19576: IFFALSE 19597
// SetTech ( i , side , state_disabled ) ;
19578: LD_VAR 0 4
19582: PPUSH
19583: LD_VAR 0 3
19587: PPUSH
19588: LD_INT 0
19590: PPUSH
19591: CALL_OW 322
19595: GO 19575
19597: POP
19598: POP
// for i = 0 to 40 do
19599: LD_ADDR_VAR 0 4
19603: PUSH
19604: DOUBLE
19605: LD_INT 0
19607: DEC
19608: ST_TO_ADDR
19609: LD_INT 40
19611: PUSH
19612: FOR_TO
19613: IFFALSE 19634
// SetRestrict ( i , side , false ) ;
19615: LD_VAR 0 4
19619: PPUSH
19620: LD_VAR 0 3
19624: PPUSH
19625: LD_INT 0
19627: PPUSH
19628: CALL_OW 324
19632: GO 19612
19634: POP
19635: POP
// case level of 1 :
19636: LD_VAR 0 1
19640: PUSH
19641: LD_INT 1
19643: DOUBLE
19644: EQUAL
19645: IFTRUE 19649
19647: GO 19802
19649: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19650: LD_INT 35
19652: PPUSH
19653: LD_VAR 0 3
19657: PPUSH
19658: LD_INT 1
19660: PPUSH
19661: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19665: LD_INT 45
19667: PPUSH
19668: LD_VAR 0 3
19672: PPUSH
19673: LD_INT 1
19675: PPUSH
19676: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19680: LD_INT 46
19682: PPUSH
19683: LD_VAR 0 3
19687: PPUSH
19688: LD_INT 1
19690: PPUSH
19691: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19695: LD_INT 47
19697: PPUSH
19698: LD_VAR 0 3
19702: PPUSH
19703: LD_INT 1
19705: PPUSH
19706: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
19710: LD_INT 0
19712: PPUSH
19713: LD_VAR 0 3
19717: PPUSH
19718: LD_INT 1
19720: PPUSH
19721: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
19725: LD_INT 2
19727: PPUSH
19728: LD_VAR 0 3
19732: PPUSH
19733: LD_INT 1
19735: PPUSH
19736: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
19740: LD_INT 4
19742: PPUSH
19743: LD_VAR 0 3
19747: PPUSH
19748: LD_INT 1
19750: PPUSH
19751: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
19755: LD_INT 6
19757: PPUSH
19758: LD_VAR 0 3
19762: PPUSH
19763: LD_INT 1
19765: PPUSH
19766: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
19770: LD_INT 29
19772: PPUSH
19773: LD_VAR 0 3
19777: PPUSH
19778: LD_INT 1
19780: PPUSH
19781: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
19785: LD_INT 31
19787: PPUSH
19788: LD_VAR 0 3
19792: PPUSH
19793: LD_INT 1
19795: PPUSH
19796: CALL_OW 324
// end ; 2 :
19800: GO 23554
19802: LD_INT 2
19804: DOUBLE
19805: EQUAL
19806: IFTRUE 19810
19808: GO 20008
19810: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19811: LD_INT 35
19813: PPUSH
19814: LD_VAR 0 3
19818: PPUSH
19819: LD_INT 1
19821: PPUSH
19822: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19826: LD_INT 45
19828: PPUSH
19829: LD_VAR 0 3
19833: PPUSH
19834: LD_INT 1
19836: PPUSH
19837: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19841: LD_INT 46
19843: PPUSH
19844: LD_VAR 0 3
19848: PPUSH
19849: LD_INT 1
19851: PPUSH
19852: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19856: LD_INT 47
19858: PPUSH
19859: LD_VAR 0 3
19863: PPUSH
19864: LD_INT 1
19866: PPUSH
19867: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
19871: LD_INT 1
19873: PPUSH
19874: LD_VAR 0 3
19878: PPUSH
19879: LD_INT 1
19881: PPUSH
19882: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
19886: LD_INT 2
19888: PPUSH
19889: LD_VAR 0 3
19893: PPUSH
19894: LD_INT 1
19896: PPUSH
19897: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
19901: LD_INT 11
19903: PPUSH
19904: LD_VAR 0 3
19908: PPUSH
19909: LD_INT 1
19911: PPUSH
19912: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
19916: LD_INT 0
19918: PPUSH
19919: LD_VAR 0 3
19923: PPUSH
19924: LD_INT 1
19926: PPUSH
19927: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
19931: LD_INT 2
19933: PPUSH
19934: LD_VAR 0 3
19938: PPUSH
19939: LD_INT 1
19941: PPUSH
19942: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
19946: LD_INT 4
19948: PPUSH
19949: LD_VAR 0 3
19953: PPUSH
19954: LD_INT 1
19956: PPUSH
19957: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
19961: LD_INT 6
19963: PPUSH
19964: LD_VAR 0 3
19968: PPUSH
19969: LD_INT 1
19971: PPUSH
19972: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
19976: LD_INT 29
19978: PPUSH
19979: LD_VAR 0 3
19983: PPUSH
19984: LD_INT 1
19986: PPUSH
19987: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
19991: LD_INT 31
19993: PPUSH
19994: LD_VAR 0 3
19998: PPUSH
19999: LD_INT 1
20001: PPUSH
20002: CALL_OW 324
// end ; 3 :
20006: GO 23554
20008: LD_INT 3
20010: DOUBLE
20011: EQUAL
20012: IFTRUE 20016
20014: GO 20469
20016: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
20017: LD_INT 35
20019: PPUSH
20020: LD_VAR 0 3
20024: PPUSH
20025: LD_INT 1
20027: PPUSH
20028: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
20032: LD_INT 45
20034: PPUSH
20035: LD_VAR 0 3
20039: PPUSH
20040: LD_INT 1
20042: PPUSH
20043: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
20047: LD_INT 46
20049: PPUSH
20050: LD_VAR 0 3
20054: PPUSH
20055: LD_INT 1
20057: PPUSH
20058: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
20062: LD_INT 47
20064: PPUSH
20065: LD_VAR 0 3
20069: PPUSH
20070: LD_INT 1
20072: PPUSH
20073: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
20077: LD_INT 1
20079: PPUSH
20080: LD_VAR 0 3
20084: PPUSH
20085: LD_INT 1
20087: PPUSH
20088: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
20092: LD_INT 2
20094: PPUSH
20095: LD_VAR 0 3
20099: PPUSH
20100: LD_INT 1
20102: PPUSH
20103: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
20107: LD_INT 11
20109: PPUSH
20110: LD_VAR 0 3
20114: PPUSH
20115: LD_INT 1
20117: PPUSH
20118: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
20122: LD_INT 48
20124: PPUSH
20125: LD_VAR 0 3
20129: PPUSH
20130: LD_INT 1
20132: PPUSH
20133: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
20137: LD_INT 69
20139: PPUSH
20140: LD_VAR 0 3
20144: PPUSH
20145: LD_INT 1
20147: PPUSH
20148: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
20152: LD_INT 39
20154: PPUSH
20155: LD_VAR 0 3
20159: PPUSH
20160: LD_INT 1
20162: PPUSH
20163: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
20167: LD_INT 43
20169: PPUSH
20170: LD_VAR 0 3
20174: PPUSH
20175: LD_INT 1
20177: PPUSH
20178: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
20182: LD_INT 51
20184: PPUSH
20185: LD_VAR 0 3
20189: PPUSH
20190: LD_INT 1
20192: PPUSH
20193: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
20197: LD_INT 6
20199: PPUSH
20200: LD_VAR 0 3
20204: PPUSH
20205: LD_INT 1
20207: PPUSH
20208: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
20212: LD_INT 0
20214: PPUSH
20215: LD_VAR 0 3
20219: PPUSH
20220: LD_INT 1
20222: PPUSH
20223: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
20227: LD_INT 2
20229: PPUSH
20230: LD_VAR 0 3
20234: PPUSH
20235: LD_INT 1
20237: PPUSH
20238: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
20242: LD_INT 3
20244: PPUSH
20245: LD_VAR 0 3
20249: PPUSH
20250: LD_INT 1
20252: PPUSH
20253: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
20257: LD_INT 4
20259: PPUSH
20260: LD_VAR 0 3
20264: PPUSH
20265: LD_INT 1
20267: PPUSH
20268: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
20272: LD_INT 6
20274: PPUSH
20275: LD_VAR 0 3
20279: PPUSH
20280: LD_INT 1
20282: PPUSH
20283: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
20287: LD_INT 7
20289: PPUSH
20290: LD_VAR 0 3
20294: PPUSH
20295: LD_INT 1
20297: PPUSH
20298: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
20302: LD_INT 8
20304: PPUSH
20305: LD_VAR 0 3
20309: PPUSH
20310: LD_INT 1
20312: PPUSH
20313: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
20317: LD_INT 10
20319: PPUSH
20320: LD_VAR 0 3
20324: PPUSH
20325: LD_INT 1
20327: PPUSH
20328: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
20332: LD_INT 15
20334: PPUSH
20335: LD_VAR 0 3
20339: PPUSH
20340: LD_INT 1
20342: PPUSH
20343: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
20347: LD_INT 16
20349: PPUSH
20350: LD_VAR 0 3
20354: PPUSH
20355: LD_INT 1
20357: PPUSH
20358: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
20362: LD_INT 17
20364: PPUSH
20365: LD_VAR 0 3
20369: PPUSH
20370: LD_INT 1
20372: PPUSH
20373: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
20377: LD_INT 20
20379: PPUSH
20380: LD_VAR 0 3
20384: PPUSH
20385: LD_INT 1
20387: PPUSH
20388: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
20392: LD_INT 26
20394: PPUSH
20395: LD_VAR 0 3
20399: PPUSH
20400: LD_INT 1
20402: PPUSH
20403: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
20407: LD_INT 27
20409: PPUSH
20410: LD_VAR 0 3
20414: PPUSH
20415: LD_INT 1
20417: PPUSH
20418: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
20422: LD_INT 29
20424: PPUSH
20425: LD_VAR 0 3
20429: PPUSH
20430: LD_INT 1
20432: PPUSH
20433: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
20437: LD_INT 31
20439: PPUSH
20440: LD_VAR 0 3
20444: PPUSH
20445: LD_INT 1
20447: PPUSH
20448: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
20452: LD_INT 32
20454: PPUSH
20455: LD_VAR 0 3
20459: PPUSH
20460: LD_INT 1
20462: PPUSH
20463: CALL_OW 324
// end ; 4 :
20467: GO 23554
20469: LD_INT 4
20471: DOUBLE
20472: EQUAL
20473: IFTRUE 20477
20475: GO 21425
20477: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
20478: LD_INT 35
20480: PPUSH
20481: LD_VAR 0 3
20485: PPUSH
20486: LD_INT 1
20488: PPUSH
20489: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
20493: LD_INT 45
20495: PPUSH
20496: LD_VAR 0 3
20500: PPUSH
20501: LD_INT 1
20503: PPUSH
20504: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
20508: LD_INT 46
20510: PPUSH
20511: LD_VAR 0 3
20515: PPUSH
20516: LD_INT 1
20518: PPUSH
20519: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
20523: LD_INT 47
20525: PPUSH
20526: LD_VAR 0 3
20530: PPUSH
20531: LD_INT 1
20533: PPUSH
20534: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
20538: LD_INT 1
20540: PPUSH
20541: LD_VAR 0 3
20545: PPUSH
20546: LD_INT 1
20548: PPUSH
20549: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
20553: LD_INT 2
20555: PPUSH
20556: LD_VAR 0 3
20560: PPUSH
20561: LD_INT 1
20563: PPUSH
20564: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
20568: LD_INT 11
20570: PPUSH
20571: LD_VAR 0 3
20575: PPUSH
20576: LD_INT 1
20578: PPUSH
20579: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
20583: LD_INT 20
20585: PPUSH
20586: LD_VAR 0 3
20590: PPUSH
20591: LD_INT 1
20593: PPUSH
20594: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
20598: LD_INT 48
20600: PPUSH
20601: LD_VAR 0 3
20605: PPUSH
20606: LD_INT 1
20608: PPUSH
20609: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
20613: LD_INT 49
20615: PPUSH
20616: LD_VAR 0 3
20620: PPUSH
20621: LD_INT 1
20623: PPUSH
20624: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
20628: LD_INT 69
20630: PPUSH
20631: LD_VAR 0 3
20635: PPUSH
20636: LD_INT 1
20638: PPUSH
20639: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
20643: LD_INT 39
20645: PPUSH
20646: LD_VAR 0 3
20650: PPUSH
20651: LD_INT 1
20653: PPUSH
20654: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
20658: LD_INT 34
20660: PPUSH
20661: LD_VAR 0 3
20665: PPUSH
20666: LD_INT 1
20668: PPUSH
20669: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
20673: LD_INT 42
20675: PPUSH
20676: LD_VAR 0 3
20680: PPUSH
20681: LD_INT 1
20683: PPUSH
20684: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
20688: LD_INT 44
20690: PPUSH
20691: LD_VAR 0 3
20695: PPUSH
20696: LD_INT 1
20698: PPUSH
20699: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
20703: LD_INT 41
20705: PPUSH
20706: LD_VAR 0 3
20710: PPUSH
20711: LD_INT 1
20713: PPUSH
20714: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
20718: LD_INT 43
20720: PPUSH
20721: LD_VAR 0 3
20725: PPUSH
20726: LD_INT 1
20728: PPUSH
20729: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
20733: LD_INT 70
20735: PPUSH
20736: LD_VAR 0 3
20740: PPUSH
20741: LD_INT 1
20743: PPUSH
20744: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
20748: LD_INT 51
20750: PPUSH
20751: LD_VAR 0 3
20755: PPUSH
20756: LD_INT 1
20758: PPUSH
20759: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
20763: LD_INT 52
20765: PPUSH
20766: LD_VAR 0 3
20770: PPUSH
20771: LD_INT 1
20773: PPUSH
20774: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
20778: LD_INT 6
20780: PPUSH
20781: LD_VAR 0 3
20785: PPUSH
20786: LD_INT 1
20788: PPUSH
20789: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
20793: LD_INT 15
20795: PPUSH
20796: LD_VAR 0 3
20800: PPUSH
20801: LD_INT 1
20803: PPUSH
20804: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
20808: LD_INT 7
20810: PPUSH
20811: LD_VAR 0 3
20815: PPUSH
20816: LD_INT 1
20818: PPUSH
20819: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
20823: LD_INT 12
20825: PPUSH
20826: LD_VAR 0 3
20830: PPUSH
20831: LD_INT 1
20833: PPUSH
20834: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
20838: LD_INT 18
20840: PPUSH
20841: LD_VAR 0 3
20845: PPUSH
20846: LD_INT 1
20848: PPUSH
20849: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
20853: LD_INT 60
20855: PPUSH
20856: LD_VAR 0 3
20860: PPUSH
20861: LD_INT 1
20863: PPUSH
20864: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
20868: LD_INT 9
20870: PPUSH
20871: LD_VAR 0 3
20875: PPUSH
20876: LD_INT 1
20878: PPUSH
20879: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
20883: LD_INT 30
20885: PPUSH
20886: LD_VAR 0 3
20890: PPUSH
20891: LD_INT 1
20893: PPUSH
20894: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
20898: LD_INT 37
20900: PPUSH
20901: LD_VAR 0 3
20905: PPUSH
20906: LD_INT 1
20908: PPUSH
20909: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
20913: LD_INT 5
20915: PPUSH
20916: LD_VAR 0 3
20920: PPUSH
20921: LD_INT 1
20923: PPUSH
20924: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
20928: LD_INT 66
20930: PPUSH
20931: LD_VAR 0 3
20935: PPUSH
20936: LD_INT 1
20938: PPUSH
20939: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
20943: LD_INT 21
20945: PPUSH
20946: LD_VAR 0 3
20950: PPUSH
20951: LD_INT 1
20953: PPUSH
20954: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
20958: LD_INT 22
20960: PPUSH
20961: LD_VAR 0 3
20965: PPUSH
20966: LD_INT 1
20968: PPUSH
20969: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
20973: LD_INT 54
20975: PPUSH
20976: LD_VAR 0 3
20980: PPUSH
20981: LD_INT 1
20983: PPUSH
20984: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
20988: LD_INT 0
20990: PPUSH
20991: LD_VAR 0 3
20995: PPUSH
20996: LD_INT 1
20998: PPUSH
20999: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
21003: LD_INT 1
21005: PPUSH
21006: LD_VAR 0 3
21010: PPUSH
21011: LD_INT 1
21013: PPUSH
21014: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
21018: LD_INT 2
21020: PPUSH
21021: LD_VAR 0 3
21025: PPUSH
21026: LD_INT 1
21028: PPUSH
21029: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
21033: LD_INT 3
21035: PPUSH
21036: LD_VAR 0 3
21040: PPUSH
21041: LD_INT 1
21043: PPUSH
21044: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
21048: LD_INT 4
21050: PPUSH
21051: LD_VAR 0 3
21055: PPUSH
21056: LD_INT 1
21058: PPUSH
21059: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
21063: LD_INT 5
21065: PPUSH
21066: LD_VAR 0 3
21070: PPUSH
21071: LD_INT 1
21073: PPUSH
21074: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
21078: LD_INT 6
21080: PPUSH
21081: LD_VAR 0 3
21085: PPUSH
21086: LD_INT 1
21088: PPUSH
21089: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
21093: LD_INT 7
21095: PPUSH
21096: LD_VAR 0 3
21100: PPUSH
21101: LD_INT 1
21103: PPUSH
21104: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
21108: LD_INT 8
21110: PPUSH
21111: LD_VAR 0 3
21115: PPUSH
21116: LD_INT 1
21118: PPUSH
21119: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
21123: LD_INT 10
21125: PPUSH
21126: LD_VAR 0 3
21130: PPUSH
21131: LD_INT 1
21133: PPUSH
21134: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
21138: LD_INT 11
21140: PPUSH
21141: LD_VAR 0 3
21145: PPUSH
21146: LD_INT 1
21148: PPUSH
21149: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
21153: LD_INT 12
21155: PPUSH
21156: LD_VAR 0 3
21160: PPUSH
21161: LD_INT 1
21163: PPUSH
21164: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
21168: LD_INT 13
21170: PPUSH
21171: LD_VAR 0 3
21175: PPUSH
21176: LD_INT 1
21178: PPUSH
21179: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
21183: LD_INT 14
21185: PPUSH
21186: LD_VAR 0 3
21190: PPUSH
21191: LD_INT 1
21193: PPUSH
21194: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
21198: LD_INT 15
21200: PPUSH
21201: LD_VAR 0 3
21205: PPUSH
21206: LD_INT 1
21208: PPUSH
21209: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
21213: LD_INT 16
21215: PPUSH
21216: LD_VAR 0 3
21220: PPUSH
21221: LD_INT 1
21223: PPUSH
21224: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
21228: LD_INT 17
21230: PPUSH
21231: LD_VAR 0 3
21235: PPUSH
21236: LD_INT 1
21238: PPUSH
21239: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
21243: LD_INT 19
21245: PPUSH
21246: LD_VAR 0 3
21250: PPUSH
21251: LD_INT 1
21253: PPUSH
21254: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
21258: LD_INT 20
21260: PPUSH
21261: LD_VAR 0 3
21265: PPUSH
21266: LD_INT 1
21268: PPUSH
21269: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
21273: LD_INT 21
21275: PPUSH
21276: LD_VAR 0 3
21280: PPUSH
21281: LD_INT 1
21283: PPUSH
21284: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
21288: LD_INT 23
21290: PPUSH
21291: LD_VAR 0 3
21295: PPUSH
21296: LD_INT 1
21298: PPUSH
21299: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
21303: LD_INT 26
21305: PPUSH
21306: LD_VAR 0 3
21310: PPUSH
21311: LD_INT 1
21313: PPUSH
21314: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
21318: LD_INT 27
21320: PPUSH
21321: LD_VAR 0 3
21325: PPUSH
21326: LD_INT 1
21328: PPUSH
21329: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
21333: LD_INT 28
21335: PPUSH
21336: LD_VAR 0 3
21340: PPUSH
21341: LD_INT 1
21343: PPUSH
21344: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
21348: LD_INT 29
21350: PPUSH
21351: LD_VAR 0 3
21355: PPUSH
21356: LD_INT 1
21358: PPUSH
21359: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
21363: LD_INT 30
21365: PPUSH
21366: LD_VAR 0 3
21370: PPUSH
21371: LD_INT 1
21373: PPUSH
21374: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
21378: LD_INT 31
21380: PPUSH
21381: LD_VAR 0 3
21385: PPUSH
21386: LD_INT 1
21388: PPUSH
21389: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
21393: LD_INT 32
21395: PPUSH
21396: LD_VAR 0 3
21400: PPUSH
21401: LD_INT 1
21403: PPUSH
21404: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
21408: LD_INT 36
21410: PPUSH
21411: LD_VAR 0 3
21415: PPUSH
21416: LD_INT 1
21418: PPUSH
21419: CALL_OW 324
// end ; 5 :
21423: GO 23554
21425: LD_INT 5
21427: DOUBLE
21428: EQUAL
21429: IFTRUE 21433
21431: GO 22546
21433: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
21434: LD_INT 35
21436: PPUSH
21437: LD_VAR 0 3
21441: PPUSH
21442: LD_INT 1
21444: PPUSH
21445: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
21449: LD_INT 45
21451: PPUSH
21452: LD_VAR 0 3
21456: PPUSH
21457: LD_INT 1
21459: PPUSH
21460: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
21464: LD_INT 46
21466: PPUSH
21467: LD_VAR 0 3
21471: PPUSH
21472: LD_INT 1
21474: PPUSH
21475: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
21479: LD_INT 47
21481: PPUSH
21482: LD_VAR 0 3
21486: PPUSH
21487: LD_INT 1
21489: PPUSH
21490: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
21494: LD_INT 1
21496: PPUSH
21497: LD_VAR 0 3
21501: PPUSH
21502: LD_INT 1
21504: PPUSH
21505: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
21509: LD_INT 2
21511: PPUSH
21512: LD_VAR 0 3
21516: PPUSH
21517: LD_INT 1
21519: PPUSH
21520: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
21524: LD_INT 11
21526: PPUSH
21527: LD_VAR 0 3
21531: PPUSH
21532: LD_INT 1
21534: PPUSH
21535: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
21539: LD_INT 20
21541: PPUSH
21542: LD_VAR 0 3
21546: PPUSH
21547: LD_INT 1
21549: PPUSH
21550: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
21554: LD_INT 48
21556: PPUSH
21557: LD_VAR 0 3
21561: PPUSH
21562: LD_INT 1
21564: PPUSH
21565: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
21569: LD_INT 49
21571: PPUSH
21572: LD_VAR 0 3
21576: PPUSH
21577: LD_INT 1
21579: PPUSH
21580: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
21584: LD_INT 69
21586: PPUSH
21587: LD_VAR 0 3
21591: PPUSH
21592: LD_INT 1
21594: PPUSH
21595: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
21599: LD_INT 39
21601: PPUSH
21602: LD_VAR 0 3
21606: PPUSH
21607: LD_INT 1
21609: PPUSH
21610: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
21614: LD_INT 34
21616: PPUSH
21617: LD_VAR 0 3
21621: PPUSH
21622: LD_INT 1
21624: PPUSH
21625: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
21629: LD_INT 42
21631: PPUSH
21632: LD_VAR 0 3
21636: PPUSH
21637: LD_INT 1
21639: PPUSH
21640: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
21644: LD_INT 44
21646: PPUSH
21647: LD_VAR 0 3
21651: PPUSH
21652: LD_INT 1
21654: PPUSH
21655: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
21659: LD_INT 41
21661: PPUSH
21662: LD_VAR 0 3
21666: PPUSH
21667: LD_INT 1
21669: PPUSH
21670: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
21674: LD_INT 40
21676: PPUSH
21677: LD_VAR 0 3
21681: PPUSH
21682: LD_INT 1
21684: PPUSH
21685: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
21689: LD_INT 43
21691: PPUSH
21692: LD_VAR 0 3
21696: PPUSH
21697: LD_INT 1
21699: PPUSH
21700: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
21704: LD_INT 70
21706: PPUSH
21707: LD_VAR 0 3
21711: PPUSH
21712: LD_INT 1
21714: PPUSH
21715: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
21719: LD_INT 51
21721: PPUSH
21722: LD_VAR 0 3
21726: PPUSH
21727: LD_INT 1
21729: PPUSH
21730: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
21734: LD_INT 52
21736: PPUSH
21737: LD_VAR 0 3
21741: PPUSH
21742: LD_INT 1
21744: PPUSH
21745: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
21749: LD_INT 6
21751: PPUSH
21752: LD_VAR 0 3
21756: PPUSH
21757: LD_INT 1
21759: PPUSH
21760: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
21764: LD_INT 15
21766: PPUSH
21767: LD_VAR 0 3
21771: PPUSH
21772: LD_INT 1
21774: PPUSH
21775: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
21779: LD_INT 7
21781: PPUSH
21782: LD_VAR 0 3
21786: PPUSH
21787: LD_INT 1
21789: PPUSH
21790: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
21794: LD_INT 12
21796: PPUSH
21797: LD_VAR 0 3
21801: PPUSH
21802: LD_INT 1
21804: PPUSH
21805: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
21809: LD_INT 17
21811: PPUSH
21812: LD_VAR 0 3
21816: PPUSH
21817: LD_INT 1
21819: PPUSH
21820: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
21824: LD_INT 18
21826: PPUSH
21827: LD_VAR 0 3
21831: PPUSH
21832: LD_INT 1
21834: PPUSH
21835: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
21839: LD_INT 60
21841: PPUSH
21842: LD_VAR 0 3
21846: PPUSH
21847: LD_INT 1
21849: PPUSH
21850: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
21854: LD_INT 32
21856: PPUSH
21857: LD_VAR 0 3
21861: PPUSH
21862: LD_INT 1
21864: PPUSH
21865: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
21869: LD_INT 9
21871: PPUSH
21872: LD_VAR 0 3
21876: PPUSH
21877: LD_INT 1
21879: PPUSH
21880: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
21884: LD_INT 57
21886: PPUSH
21887: LD_VAR 0 3
21891: PPUSH
21892: LD_INT 1
21894: PPUSH
21895: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
21899: LD_INT 30
21901: PPUSH
21902: LD_VAR 0 3
21906: PPUSH
21907: LD_INT 1
21909: PPUSH
21910: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
21914: LD_INT 37
21916: PPUSH
21917: LD_VAR 0 3
21921: PPUSH
21922: LD_INT 1
21924: PPUSH
21925: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
21929: LD_INT 63
21931: PPUSH
21932: LD_VAR 0 3
21936: PPUSH
21937: LD_INT 1
21939: PPUSH
21940: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
21944: LD_INT 3
21946: PPUSH
21947: LD_VAR 0 3
21951: PPUSH
21952: LD_INT 1
21954: PPUSH
21955: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
21959: LD_INT 4
21961: PPUSH
21962: LD_VAR 0 3
21966: PPUSH
21967: LD_INT 1
21969: PPUSH
21970: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
21974: LD_INT 5
21976: PPUSH
21977: LD_VAR 0 3
21981: PPUSH
21982: LD_INT 1
21984: PPUSH
21985: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
21989: LD_INT 66
21991: PPUSH
21992: LD_VAR 0 3
21996: PPUSH
21997: LD_INT 1
21999: PPUSH
22000: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
22004: LD_INT 21
22006: PPUSH
22007: LD_VAR 0 3
22011: PPUSH
22012: LD_INT 1
22014: PPUSH
22015: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
22019: LD_INT 22
22021: PPUSH
22022: LD_VAR 0 3
22026: PPUSH
22027: LD_INT 1
22029: PPUSH
22030: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
22034: LD_INT 19
22036: PPUSH
22037: LD_VAR 0 3
22041: PPUSH
22042: LD_INT 1
22044: PPUSH
22045: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
22049: LD_INT 54
22051: PPUSH
22052: LD_VAR 0 3
22056: PPUSH
22057: LD_INT 1
22059: PPUSH
22060: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
22064: LD_INT 55
22066: PPUSH
22067: LD_VAR 0 3
22071: PPUSH
22072: LD_INT 1
22074: PPUSH
22075: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22079: LD_INT 0
22081: PPUSH
22082: LD_VAR 0 3
22086: PPUSH
22087: LD_INT 1
22089: PPUSH
22090: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
22094: LD_INT 1
22096: PPUSH
22097: LD_VAR 0 3
22101: PPUSH
22102: LD_INT 1
22104: PPUSH
22105: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22109: LD_INT 2
22111: PPUSH
22112: LD_VAR 0 3
22116: PPUSH
22117: LD_INT 1
22119: PPUSH
22120: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
22124: LD_INT 3
22126: PPUSH
22127: LD_VAR 0 3
22131: PPUSH
22132: LD_INT 1
22134: PPUSH
22135: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22139: LD_INT 4
22141: PPUSH
22142: LD_VAR 0 3
22146: PPUSH
22147: LD_INT 1
22149: PPUSH
22150: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
22154: LD_INT 5
22156: PPUSH
22157: LD_VAR 0 3
22161: PPUSH
22162: LD_INT 1
22164: PPUSH
22165: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22169: LD_INT 6
22171: PPUSH
22172: LD_VAR 0 3
22176: PPUSH
22177: LD_INT 1
22179: PPUSH
22180: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
22184: LD_INT 7
22186: PPUSH
22187: LD_VAR 0 3
22191: PPUSH
22192: LD_INT 1
22194: PPUSH
22195: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
22199: LD_INT 8
22201: PPUSH
22202: LD_VAR 0 3
22206: PPUSH
22207: LD_INT 1
22209: PPUSH
22210: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
22214: LD_INT 10
22216: PPUSH
22217: LD_VAR 0 3
22221: PPUSH
22222: LD_INT 1
22224: PPUSH
22225: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
22229: LD_INT 11
22231: PPUSH
22232: LD_VAR 0 3
22236: PPUSH
22237: LD_INT 1
22239: PPUSH
22240: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
22244: LD_INT 12
22246: PPUSH
22247: LD_VAR 0 3
22251: PPUSH
22252: LD_INT 1
22254: PPUSH
22255: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
22259: LD_INT 13
22261: PPUSH
22262: LD_VAR 0 3
22266: PPUSH
22267: LD_INT 1
22269: PPUSH
22270: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
22274: LD_INT 14
22276: PPUSH
22277: LD_VAR 0 3
22281: PPUSH
22282: LD_INT 1
22284: PPUSH
22285: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
22289: LD_INT 15
22291: PPUSH
22292: LD_VAR 0 3
22296: PPUSH
22297: LD_INT 1
22299: PPUSH
22300: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
22304: LD_INT 16
22306: PPUSH
22307: LD_VAR 0 3
22311: PPUSH
22312: LD_INT 1
22314: PPUSH
22315: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
22319: LD_INT 17
22321: PPUSH
22322: LD_VAR 0 3
22326: PPUSH
22327: LD_INT 1
22329: PPUSH
22330: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
22334: LD_INT 18
22336: PPUSH
22337: LD_VAR 0 3
22341: PPUSH
22342: LD_INT 1
22344: PPUSH
22345: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
22349: LD_INT 19
22351: PPUSH
22352: LD_VAR 0 3
22356: PPUSH
22357: LD_INT 1
22359: PPUSH
22360: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
22364: LD_INT 20
22366: PPUSH
22367: LD_VAR 0 3
22371: PPUSH
22372: LD_INT 1
22374: PPUSH
22375: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
22379: LD_INT 21
22381: PPUSH
22382: LD_VAR 0 3
22386: PPUSH
22387: LD_INT 1
22389: PPUSH
22390: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
22394: LD_INT 23
22396: PPUSH
22397: LD_VAR 0 3
22401: PPUSH
22402: LD_INT 1
22404: PPUSH
22405: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
22409: LD_INT 26
22411: PPUSH
22412: LD_VAR 0 3
22416: PPUSH
22417: LD_INT 1
22419: PPUSH
22420: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
22424: LD_INT 27
22426: PPUSH
22427: LD_VAR 0 3
22431: PPUSH
22432: LD_INT 1
22434: PPUSH
22435: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
22439: LD_INT 28
22441: PPUSH
22442: LD_VAR 0 3
22446: PPUSH
22447: LD_INT 1
22449: PPUSH
22450: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22454: LD_INT 29
22456: PPUSH
22457: LD_VAR 0 3
22461: PPUSH
22462: LD_INT 1
22464: PPUSH
22465: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
22469: LD_INT 30
22471: PPUSH
22472: LD_VAR 0 3
22476: PPUSH
22477: LD_INT 1
22479: PPUSH
22480: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22484: LD_INT 31
22486: PPUSH
22487: LD_VAR 0 3
22491: PPUSH
22492: LD_INT 1
22494: PPUSH
22495: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
22499: LD_INT 32
22501: PPUSH
22502: LD_VAR 0 3
22506: PPUSH
22507: LD_INT 1
22509: PPUSH
22510: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
22514: LD_INT 33
22516: PPUSH
22517: LD_VAR 0 3
22521: PPUSH
22522: LD_INT 1
22524: PPUSH
22525: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
22529: LD_INT 36
22531: PPUSH
22532: LD_VAR 0 3
22536: PPUSH
22537: LD_INT 1
22539: PPUSH
22540: CALL_OW 324
// end ; 6 :
22544: GO 23554
22546: LD_INT 6
22548: DOUBLE
22549: EQUAL
22550: IFTRUE 22554
22552: GO 23479
22554: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22555: LD_INT 35
22557: PPUSH
22558: LD_VAR 0 3
22562: PPUSH
22563: LD_INT 1
22565: PPUSH
22566: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22570: LD_INT 45
22572: PPUSH
22573: LD_VAR 0 3
22577: PPUSH
22578: LD_INT 1
22580: PPUSH
22581: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22585: LD_INT 46
22587: PPUSH
22588: LD_VAR 0 3
22592: PPUSH
22593: LD_INT 1
22595: PPUSH
22596: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22600: LD_INT 47
22602: PPUSH
22603: LD_VAR 0 3
22607: PPUSH
22608: LD_INT 1
22610: PPUSH
22611: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22615: LD_INT 1
22617: PPUSH
22618: LD_VAR 0 3
22622: PPUSH
22623: LD_INT 1
22625: PPUSH
22626: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22630: LD_INT 2
22632: PPUSH
22633: LD_VAR 0 3
22637: PPUSH
22638: LD_INT 1
22640: PPUSH
22641: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22645: LD_INT 11
22647: PPUSH
22648: LD_VAR 0 3
22652: PPUSH
22653: LD_INT 1
22655: PPUSH
22656: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
22660: LD_INT 20
22662: PPUSH
22663: LD_VAR 0 3
22667: PPUSH
22668: LD_INT 1
22670: PPUSH
22671: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
22675: LD_INT 48
22677: PPUSH
22678: LD_VAR 0 3
22682: PPUSH
22683: LD_INT 1
22685: PPUSH
22686: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
22690: LD_INT 49
22692: PPUSH
22693: LD_VAR 0 3
22697: PPUSH
22698: LD_INT 1
22700: PPUSH
22701: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
22705: LD_INT 50
22707: PPUSH
22708: LD_VAR 0 3
22712: PPUSH
22713: LD_INT 1
22715: PPUSH
22716: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
22720: LD_INT 69
22722: PPUSH
22723: LD_VAR 0 3
22727: PPUSH
22728: LD_INT 1
22730: PPUSH
22731: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
22735: LD_INT 39
22737: PPUSH
22738: LD_VAR 0 3
22742: PPUSH
22743: LD_INT 1
22745: PPUSH
22746: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
22750: LD_INT 34
22752: PPUSH
22753: LD_VAR 0 3
22757: PPUSH
22758: LD_INT 1
22760: PPUSH
22761: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
22765: LD_INT 42
22767: PPUSH
22768: LD_VAR 0 3
22772: PPUSH
22773: LD_INT 1
22775: PPUSH
22776: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
22780: LD_INT 44
22782: PPUSH
22783: LD_VAR 0 3
22787: PPUSH
22788: LD_INT 1
22790: PPUSH
22791: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
22795: LD_INT 41
22797: PPUSH
22798: LD_VAR 0 3
22802: PPUSH
22803: LD_INT 1
22805: PPUSH
22806: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
22810: LD_INT 13
22812: PPUSH
22813: LD_VAR 0 3
22817: PPUSH
22818: LD_INT 1
22820: PPUSH
22821: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
22825: LD_INT 40
22827: PPUSH
22828: LD_VAR 0 3
22832: PPUSH
22833: LD_INT 1
22835: PPUSH
22836: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
22840: LD_INT 43
22842: PPUSH
22843: LD_VAR 0 3
22847: PPUSH
22848: LD_INT 1
22850: PPUSH
22851: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
22855: LD_INT 70
22857: PPUSH
22858: LD_VAR 0 3
22862: PPUSH
22863: LD_INT 1
22865: PPUSH
22866: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
22870: LD_INT 23
22872: PPUSH
22873: LD_VAR 0 3
22877: PPUSH
22878: LD_INT 1
22880: PPUSH
22881: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
22885: LD_INT 51
22887: PPUSH
22888: LD_VAR 0 3
22892: PPUSH
22893: LD_INT 1
22895: PPUSH
22896: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
22900: LD_INT 52
22902: PPUSH
22903: LD_VAR 0 3
22907: PPUSH
22908: LD_INT 1
22910: PPUSH
22911: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
22915: LD_INT 6
22917: PPUSH
22918: LD_VAR 0 3
22922: PPUSH
22923: LD_INT 1
22925: PPUSH
22926: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
22930: LD_INT 15
22932: PPUSH
22933: LD_VAR 0 3
22937: PPUSH
22938: LD_INT 1
22940: PPUSH
22941: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
22945: LD_INT 7
22947: PPUSH
22948: LD_VAR 0 3
22952: PPUSH
22953: LD_INT 1
22955: PPUSH
22956: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
22960: LD_INT 12
22962: PPUSH
22963: LD_VAR 0 3
22967: PPUSH
22968: LD_INT 1
22970: PPUSH
22971: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
22975: LD_INT 10
22977: PPUSH
22978: LD_VAR 0 3
22982: PPUSH
22983: LD_INT 1
22985: PPUSH
22986: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
22990: LD_INT 17
22992: PPUSH
22993: LD_VAR 0 3
22997: PPUSH
22998: LD_INT 1
23000: PPUSH
23001: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
23005: LD_INT 18
23007: PPUSH
23008: LD_VAR 0 3
23012: PPUSH
23013: LD_INT 1
23015: PPUSH
23016: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
23020: LD_INT 60
23022: PPUSH
23023: LD_VAR 0 3
23027: PPUSH
23028: LD_INT 1
23030: PPUSH
23031: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
23035: LD_INT 61
23037: PPUSH
23038: LD_VAR 0 3
23042: PPUSH
23043: LD_INT 1
23045: PPUSH
23046: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
23050: LD_INT 32
23052: PPUSH
23053: LD_VAR 0 3
23057: PPUSH
23058: LD_INT 1
23060: PPUSH
23061: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
23065: LD_INT 27
23067: PPUSH
23068: LD_VAR 0 3
23072: PPUSH
23073: LD_INT 1
23075: PPUSH
23076: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
23080: LD_INT 36
23082: PPUSH
23083: LD_VAR 0 3
23087: PPUSH
23088: LD_INT 1
23090: PPUSH
23091: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
23095: LD_INT 33
23097: PPUSH
23098: LD_VAR 0 3
23102: PPUSH
23103: LD_INT 1
23105: PPUSH
23106: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
23110: LD_INT 9
23112: PPUSH
23113: LD_VAR 0 3
23117: PPUSH
23118: LD_INT 1
23120: PPUSH
23121: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
23125: LD_INT 38
23127: PPUSH
23128: LD_VAR 0 3
23132: PPUSH
23133: LD_INT 1
23135: PPUSH
23136: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
23140: LD_INT 57
23142: PPUSH
23143: LD_VAR 0 3
23147: PPUSH
23148: LD_INT 1
23150: PPUSH
23151: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
23155: LD_INT 58
23157: PPUSH
23158: LD_VAR 0 3
23162: PPUSH
23163: LD_INT 1
23165: PPUSH
23166: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
23170: LD_INT 28
23172: PPUSH
23173: LD_VAR 0 3
23177: PPUSH
23178: LD_INT 1
23180: PPUSH
23181: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
23185: LD_INT 29
23187: PPUSH
23188: LD_VAR 0 3
23192: PPUSH
23193: LD_INT 1
23195: PPUSH
23196: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
23200: LD_INT 30
23202: PPUSH
23203: LD_VAR 0 3
23207: PPUSH
23208: LD_INT 1
23210: PPUSH
23211: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
23215: LD_INT 37
23217: PPUSH
23218: LD_VAR 0 3
23222: PPUSH
23223: LD_INT 1
23225: PPUSH
23226: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
23230: LD_INT 63
23232: PPUSH
23233: LD_VAR 0 3
23237: PPUSH
23238: LD_INT 1
23240: PPUSH
23241: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
23245: LD_INT 64
23247: PPUSH
23248: LD_VAR 0 3
23252: PPUSH
23253: LD_INT 1
23255: PPUSH
23256: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
23260: LD_INT 3
23262: PPUSH
23263: LD_VAR 0 3
23267: PPUSH
23268: LD_INT 1
23270: PPUSH
23271: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
23275: LD_INT 4
23277: PPUSH
23278: LD_VAR 0 3
23282: PPUSH
23283: LD_INT 1
23285: PPUSH
23286: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
23290: LD_INT 5
23292: PPUSH
23293: LD_VAR 0 3
23297: PPUSH
23298: LD_INT 1
23300: PPUSH
23301: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
23305: LD_INT 8
23307: PPUSH
23308: LD_VAR 0 3
23312: PPUSH
23313: LD_INT 1
23315: PPUSH
23316: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
23320: LD_INT 66
23322: PPUSH
23323: LD_VAR 0 3
23327: PPUSH
23328: LD_INT 1
23330: PPUSH
23331: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
23335: LD_INT 67
23337: PPUSH
23338: LD_VAR 0 3
23342: PPUSH
23343: LD_INT 1
23345: PPUSH
23346: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
23350: LD_INT 21
23352: PPUSH
23353: LD_VAR 0 3
23357: PPUSH
23358: LD_INT 1
23360: PPUSH
23361: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
23365: LD_INT 22
23367: PPUSH
23368: LD_VAR 0 3
23372: PPUSH
23373: LD_INT 1
23375: PPUSH
23376: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
23380: LD_INT 19
23382: PPUSH
23383: LD_VAR 0 3
23387: PPUSH
23388: LD_INT 1
23390: PPUSH
23391: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
23395: LD_INT 26
23397: PPUSH
23398: LD_VAR 0 3
23402: PPUSH
23403: LD_INT 1
23405: PPUSH
23406: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
23410: LD_INT 54
23412: PPUSH
23413: LD_VAR 0 3
23417: PPUSH
23418: LD_INT 1
23420: PPUSH
23421: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
23425: LD_INT 55
23427: PPUSH
23428: LD_VAR 0 3
23432: PPUSH
23433: LD_INT 1
23435: PPUSH
23436: CALL_OW 322
// for i = 0 to 39 do
23440: LD_ADDR_VAR 0 4
23444: PUSH
23445: DOUBLE
23446: LD_INT 0
23448: DEC
23449: ST_TO_ADDR
23450: LD_INT 39
23452: PUSH
23453: FOR_TO
23454: IFFALSE 23475
// SetRestrict ( i , side , true ) ;
23456: LD_VAR 0 4
23460: PPUSH
23461: LD_VAR 0 3
23465: PPUSH
23466: LD_INT 1
23468: PPUSH
23469: CALL_OW 324
23473: GO 23453
23475: POP
23476: POP
// end ; else
23477: GO 23554
23479: POP
// begin for i = 1 to 73 do
23480: LD_ADDR_VAR 0 4
23484: PUSH
23485: DOUBLE
23486: LD_INT 1
23488: DEC
23489: ST_TO_ADDR
23490: LD_INT 73
23492: PUSH
23493: FOR_TO
23494: IFFALSE 23515
// SetTech ( i , side , state_enabled ) ;
23496: LD_VAR 0 4
23500: PPUSH
23501: LD_VAR 0 3
23505: PPUSH
23506: LD_INT 1
23508: PPUSH
23509: CALL_OW 322
23513: GO 23493
23515: POP
23516: POP
// for i = 0 to 39 do
23517: LD_ADDR_VAR 0 4
23521: PUSH
23522: DOUBLE
23523: LD_INT 0
23525: DEC
23526: ST_TO_ADDR
23527: LD_INT 39
23529: PUSH
23530: FOR_TO
23531: IFFALSE 23552
// SetRestrict ( i , side , true ) ;
23533: LD_VAR 0 4
23537: PPUSH
23538: LD_VAR 0 3
23542: PPUSH
23543: LD_INT 1
23545: PPUSH
23546: CALL_OW 324
23550: GO 23530
23552: POP
23553: POP
// end ; end ; end ;
23554: GO 19559
23556: POP
23557: POP
// end ;
23558: LD_VAR 0 2
23562: RET
