// export def_base_size , def_west_nations , def_east_nations ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , respawning_time_min , respawning_time_max , siberite_bomb_Delay ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Position_Nations ; export depot_def , breastworks_def , labs_def , factory_def , start_def , extra_oil_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function prepare_deposits ; var list , un , deposits ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
// list := GetListOfResourcesInArea ( west_side ) ^ GetListOfResourcesInArea ( east_side ) ;
   6: LD_ADDR_VAR 0 2
  10: PUSH
  11: LD_INT 8
  13: PPUSH
  14: CALL_OW 442
  18: PUSH
  19: LD_INT 9
  21: PPUSH
  22: CALL_OW 442
  26: ADD
  27: ST_TO_ADDR
// for un = 1 to ( list div 3 ) do
  28: LD_ADDR_VAR 0 3
  32: PUSH
  33: DOUBLE
  34: LD_INT 1
  36: DEC
  37: ST_TO_ADDR
  38: LD_VAR 0 2
  42: PUSH
  43: LD_INT 3
  45: DIV
  46: PUSH
  47: FOR_TO
  48: IFFALSE 94
// RemoveDepositXY ( list [ un * 3 - 2 ] , list [ un * 3 - 1 ] ) ;
  50: LD_VAR 0 2
  54: PUSH
  55: LD_VAR 0 3
  59: PUSH
  60: LD_INT 3
  62: MUL
  63: PUSH
  64: LD_INT 2
  66: MINUS
  67: ARRAY
  68: PPUSH
  69: LD_VAR 0 2
  73: PUSH
  74: LD_VAR 0 3
  78: PUSH
  79: LD_INT 3
  81: MUL
  82: PUSH
  83: LD_INT 1
  85: MINUS
  86: ARRAY
  87: PPUSH
  88: CALL_OW 63
  92: GO 47
  94: POP
  95: POP
// deposits := [ [ 40 , 49 , mat_oil ] , [ 40 , 68 , mat_oil ] , [ 9 , 3 , mat_siberit ] , [ 61 , 116 , mat_siberit ] , [ 177 , 46 , mat_oil ] , [ 185 , 71 , mat_oil ] , [ 157 , 3 , mat_siberit ] , [ 213 , 116 , mat_siberit ] ] ;
  96: LD_ADDR_VAR 0 4
 100: PUSH
 101: LD_INT 40
 103: PUSH
 104: LD_INT 49
 106: PUSH
 107: LD_INT 2
 109: PUSH
 110: EMPTY
 111: LIST
 112: LIST
 113: LIST
 114: PUSH
 115: LD_INT 40
 117: PUSH
 118: LD_INT 68
 120: PUSH
 121: LD_INT 2
 123: PUSH
 124: EMPTY
 125: LIST
 126: LIST
 127: LIST
 128: PUSH
 129: LD_INT 9
 131: PUSH
 132: LD_INT 3
 134: PUSH
 135: LD_INT 3
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: LIST
 142: PUSH
 143: LD_INT 61
 145: PUSH
 146: LD_INT 116
 148: PUSH
 149: LD_INT 3
 151: PUSH
 152: EMPTY
 153: LIST
 154: LIST
 155: LIST
 156: PUSH
 157: LD_INT 177
 159: PUSH
 160: LD_INT 46
 162: PUSH
 163: LD_INT 2
 165: PUSH
 166: EMPTY
 167: LIST
 168: LIST
 169: LIST
 170: PUSH
 171: LD_INT 185
 173: PUSH
 174: LD_INT 71
 176: PUSH
 177: LD_INT 2
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: LIST
 184: PUSH
 185: LD_INT 157
 187: PUSH
 188: LD_INT 3
 190: PUSH
 191: LD_INT 3
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: PUSH
 199: LD_INT 213
 201: PUSH
 202: LD_INT 116
 204: PUSH
 205: LD_INT 3
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: PUSH
 213: EMPTY
 214: LIST
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: ST_TO_ADDR
// for un in deposits do
 223: LD_ADDR_VAR 0 3
 227: PUSH
 228: LD_VAR 0 4
 232: PUSH
 233: FOR_IN
 234: IFFALSE 269
// CreateDepositXY ( un [ 1 ] , un [ 2 ] , un [ 3 ] ) ;
 236: LD_VAR 0 3
 240: PUSH
 241: LD_INT 1
 243: ARRAY
 244: PPUSH
 245: LD_VAR 0 3
 249: PUSH
 250: LD_INT 2
 252: ARRAY
 253: PPUSH
 254: LD_VAR 0 3
 258: PUSH
 259: LD_INT 3
 261: ARRAY
 262: PPUSH
 263: CALL_OW 62
 267: GO 233
 269: POP
 270: POP
// end ;
 271: LD_VAR 0 1
 275: RET
// function init_map ; var i ; begin
 276: LD_INT 0
 278: PPUSH
 279: PPUSH
// prepare_deposits ;
 280: CALL 0 0 0
// extra_oil_deposits_locations := [ [ 29 , 3 ] , [ 82 , 115 ] , [ 134 , 3 ] , [ 192 , 116 ] ] ;
 284: LD_ADDR_EXP 27
 288: PUSH
 289: LD_INT 29
 291: PUSH
 292: LD_INT 3
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: PUSH
 299: LD_INT 82
 301: PUSH
 302: LD_INT 115
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: PUSH
 309: LD_INT 134
 311: PUSH
 312: LD_INT 3
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: PUSH
 319: LD_INT 192
 321: PUSH
 322: LD_INT 116
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: LIST
 333: LIST
 334: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 62 , 60 ] , [ 157 , 60 ] ] ;
 335: LD_ADDR_EXP 28
 339: PUSH
 340: LD_INT 62
 342: PUSH
 343: LD_INT 60
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: PUSH
 350: LD_INT 157
 352: PUSH
 353: LD_INT 60
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: ST_TO_ADDR
// depot_def := [ [ 35 , 34 , 0 ] , [ 56 , 86 , 2 ] , [ 158 , 34 , 5 ] , [ 185 , 86 , 3 ] ] ;
 364: LD_ADDR_EXP 22
 368: PUSH
 369: LD_INT 35
 371: PUSH
 372: LD_INT 34
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: EMPTY
 379: LIST
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 56
 385: PUSH
 386: LD_INT 86
 388: PUSH
 389: LD_INT 2
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: LIST
 396: PUSH
 397: LD_INT 158
 399: PUSH
 400: LD_INT 34
 402: PUSH
 403: LD_INT 5
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: LD_INT 185
 413: PUSH
 414: LD_INT 86
 416: PUSH
 417: LD_INT 3
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: LIST
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: LIST
 429: LIST
 430: ST_TO_ADDR
// labs_def := [ [ 19 , 28 , 1 ] , [ 49 , 92 , 1 ] , [ 166 , 23 , 4 ] , [ 205 , 97 , 4 ] ] ;
 431: LD_ADDR_EXP 24
 435: PUSH
 436: LD_INT 19
 438: PUSH
 439: LD_INT 28
 441: PUSH
 442: LD_INT 1
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PUSH
 450: LD_INT 49
 452: PUSH
 453: LD_INT 92
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 166
 466: PUSH
 467: LD_INT 23
 469: PUSH
 470: LD_INT 4
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: LIST
 477: PUSH
 478: LD_INT 205
 480: PUSH
 481: LD_INT 97
 483: PUSH
 484: LD_INT 4
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: ST_TO_ADDR
// factory_def := [ [ 26 , 16 , 2 ] , [ 64 , 103 , 0 ] , [ 154 , 18 , 3 ] , [ 190 , 103 , 5 ] ] ;
 498: LD_ADDR_EXP 25
 502: PUSH
 503: LD_INT 26
 505: PUSH
 506: LD_INT 16
 508: PUSH
 509: LD_INT 2
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: LIST
 516: PUSH
 517: LD_INT 64
 519: PUSH
 520: LD_INT 103
 522: PUSH
 523: LD_INT 0
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 154
 533: PUSH
 534: LD_INT 18
 536: PUSH
 537: LD_INT 3
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_INT 190
 547: PUSH
 548: LD_INT 103
 550: PUSH
 551: LD_INT 5
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: LIST
 558: PUSH
 559: EMPTY
 560: LIST
 561: LIST
 562: LIST
 563: LIST
 564: ST_TO_ADDR
// start_def := [ [ 35 , 26 ] , [ 65 , 94 ] , [ 150 , 26 ] , [ 185 , 94 ] ] ;
 565: LD_ADDR_EXP 26
 569: PUSH
 570: LD_INT 35
 572: PUSH
 573: LD_INT 26
 575: PUSH
 576: EMPTY
 577: LIST
 578: LIST
 579: PUSH
 580: LD_INT 65
 582: PUSH
 583: LD_INT 94
 585: PUSH
 586: EMPTY
 587: LIST
 588: LIST
 589: PUSH
 590: LD_INT 150
 592: PUSH
 593: LD_INT 26
 595: PUSH
 596: EMPTY
 597: LIST
 598: LIST
 599: PUSH
 600: LD_INT 185
 602: PUSH
 603: LD_INT 94
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: ST_TO_ADDR
// breastworks_def := [ [ [ 44 , 18 , 4 ] , [ 47 , 51 , 5 ] , [ 35 , 8 , 4 ] , [ 50 , 38 , 5 ] ] , [ [ 81 , 97 , 4 ] , [ 54 , 71 , 3 ] , [ 81 , 110 , 5 ] , [ 66 , 82 , 3 ] ] , [ [ 136 , 20 , 1 ] , [ 164 , 48 , 1 ] , [ 130 , 8 , 1 ] , [ 147 , 37 , 0 ] ] , [ [ 181 , 103 , 1 ] , [ 178 , 72 , 1 ] , [ 186 , 112 , 1 ] , [ 172 , 82 , 2 ] ] ] ;
 616: LD_ADDR_EXP 23
 620: PUSH
 621: LD_INT 44
 623: PUSH
 624: LD_INT 18
 626: PUSH
 627: LD_INT 4
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: LIST
 634: PUSH
 635: LD_INT 47
 637: PUSH
 638: LD_INT 51
 640: PUSH
 641: LD_INT 5
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PUSH
 649: LD_INT 35
 651: PUSH
 652: LD_INT 8
 654: PUSH
 655: LD_INT 4
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: LIST
 662: PUSH
 663: LD_INT 50
 665: PUSH
 666: LD_INT 38
 668: PUSH
 669: LD_INT 5
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: LIST
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: PUSH
 683: LD_INT 81
 685: PUSH
 686: LD_INT 97
 688: PUSH
 689: LD_INT 4
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: PUSH
 697: LD_INT 54
 699: PUSH
 700: LD_INT 71
 702: PUSH
 703: LD_INT 3
 705: PUSH
 706: EMPTY
 707: LIST
 708: LIST
 709: LIST
 710: PUSH
 711: LD_INT 81
 713: PUSH
 714: LD_INT 110
 716: PUSH
 717: LD_INT 5
 719: PUSH
 720: EMPTY
 721: LIST
 722: LIST
 723: LIST
 724: PUSH
 725: LD_INT 66
 727: PUSH
 728: LD_INT 82
 730: PUSH
 731: LD_INT 3
 733: PUSH
 734: EMPTY
 735: LIST
 736: LIST
 737: LIST
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: LIST
 743: LIST
 744: PUSH
 745: LD_INT 136
 747: PUSH
 748: LD_INT 20
 750: PUSH
 751: LD_INT 1
 753: PUSH
 754: EMPTY
 755: LIST
 756: LIST
 757: LIST
 758: PUSH
 759: LD_INT 164
 761: PUSH
 762: LD_INT 48
 764: PUSH
 765: LD_INT 1
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: LIST
 772: PUSH
 773: LD_INT 130
 775: PUSH
 776: LD_INT 8
 778: PUSH
 779: LD_INT 1
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PUSH
 787: LD_INT 147
 789: PUSH
 790: LD_INT 37
 792: PUSH
 793: LD_INT 0
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: LIST
 800: PUSH
 801: EMPTY
 802: LIST
 803: LIST
 804: LIST
 805: LIST
 806: PUSH
 807: LD_INT 181
 809: PUSH
 810: LD_INT 103
 812: PUSH
 813: LD_INT 1
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: LIST
 820: PUSH
 821: LD_INT 178
 823: PUSH
 824: LD_INT 72
 826: PUSH
 827: LD_INT 1
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: LIST
 834: PUSH
 835: LD_INT 186
 837: PUSH
 838: LD_INT 112
 840: PUSH
 841: LD_INT 1
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: LIST
 848: PUSH
 849: LD_INT 172
 851: PUSH
 852: LD_INT 82
 854: PUSH
 855: LD_INT 2
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: LIST
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: LIST
 873: LIST
 874: ST_TO_ADDR
// if def_extra_oil_deposits then
 875: LD_EXP 63
 879: IFFALSE 923
// for i in extra_oil_deposits_locations do
 881: LD_ADDR_VAR 0 2
 885: PUSH
 886: LD_EXP 27
 890: PUSH
 891: FOR_IN
 892: IFFALSE 921
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
 894: LD_VAR 0 2
 898: PUSH
 899: LD_INT 1
 901: ARRAY
 902: PPUSH
 903: LD_VAR 0 2
 907: PUSH
 908: LD_INT 2
 910: ARRAY
 911: PPUSH
 912: LD_INT 2
 914: PPUSH
 915: CALL_OW 62
 919: GO 891
 921: POP
 922: POP
// if def_extra_sib_deposits then
 923: LD_EXP 64
 927: IFFALSE 971
// for i in extra_sib_deposits_locations do
 929: LD_ADDR_VAR 0 2
 933: PUSH
 934: LD_EXP 28
 938: PUSH
 939: FOR_IN
 940: IFFALSE 969
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 2
 958: ARRAY
 959: PPUSH
 960: LD_INT 3
 962: PPUSH
 963: CALL_OW 62
 967: GO 939
 969: POP
 970: POP
// end ;
 971: LD_VAR 0 1
 975: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
 976: LD_INT 0
 978: PPUSH
 979: PPUSH
 980: PPUSH
 981: PPUSH
 982: PPUSH
 983: PPUSH
 984: PPUSH
 985: PPUSH
 986: PPUSH
// if Multiplayer then
 987: LD_OWVAR 4
 991: IFFALSE 1055
// begin Game_Type = mp_game_type ;
 993: LD_ADDR_EXP 56
 997: PUSH
 998: LD_OWVAR 6
1002: ST_TO_ADDR
// Your_Side := mp_player_side ;
1003: LD_ADDR_OWVAR 2
1007: PUSH
1008: LD_OWVAR 7
1012: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
1013: LD_ADDR_EXP 18
1017: PUSH
1018: LD_OWVAR 17
1022: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
1023: LD_ADDR_EXP 16
1027: PUSH
1028: LD_OWVAR 15
1032: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
1033: LD_ADDR_EXP 19
1037: PUSH
1038: LD_OWVAR 16
1042: ST_TO_ADDR
// Teams = mp_teams ;
1043: LD_ADDR_EXP 17
1047: PUSH
1048: LD_OWVAR 12
1052: ST_TO_ADDR
// end else
1053: GO 1217
// begin Game_Type = 4 ;
1055: LD_ADDR_EXP 56
1059: PUSH
1060: LD_INT 4
1062: ST_TO_ADDR
// Your_Side = 1 ;
1063: LD_ADDR_OWVAR 2
1067: PUSH
1068: LD_INT 1
1070: ST_TO_ADDR
// Side_Positions = [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
1071: LD_ADDR_EXP 18
1075: PUSH
1076: LD_INT 1
1078: PUSH
1079: LD_INT 2
1081: PUSH
1082: LD_INT 3
1084: PUSH
1085: LD_INT 4
1087: PUSH
1088: LD_INT 0
1090: PUSH
1091: LD_INT 0
1093: PUSH
1094: LD_INT 0
1096: PUSH
1097: LD_INT 0
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: LIST
1106: LIST
1107: LIST
1108: LIST
1109: ST_TO_ADDR
// Side_Teams = [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
1110: LD_ADDR_EXP 16
1114: PUSH
1115: LD_INT 1
1117: PUSH
1118: LD_INT 1
1120: PUSH
1121: LD_INT 2
1123: PUSH
1124: LD_INT 2
1126: PUSH
1127: LD_INT 0
1129: PUSH
1130: LD_INT 0
1132: PUSH
1133: LD_INT 0
1135: PUSH
1136: LD_INT 0
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: LIST
1148: ST_TO_ADDR
// Side_Nations = [ 3 , 2 , 1 , 2 , 0 , 0 , 0 , 0 ] ;
1149: LD_ADDR_EXP 19
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: LD_INT 2
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: LD_INT 2
1165: PUSH
1166: LD_INT 0
1168: PUSH
1169: LD_INT 0
1171: PUSH
1172: LD_INT 0
1174: PUSH
1175: LD_INT 0
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: LIST
1186: LIST
1187: ST_TO_ADDR
// Teams = [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
1188: LD_ADDR_EXP 17
1192: PUSH
1193: LD_INT 1
1195: PUSH
1196: LD_INT 2
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PUSH
1203: LD_INT 3
1205: PUSH
1206: LD_INT 4
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: ST_TO_ADDR
// end ; if Multiplayer then
1217: LD_OWVAR 4
1221: IFFALSE 1446
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
1223: LD_ADDR_EXP 58
1227: PUSH
1228: LD_INT 0
1230: PPUSH
1231: CALL_OW 426
1235: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
1236: LD_ADDR_EXP 59
1240: PUSH
1241: LD_INT 1
1243: PPUSH
1244: CALL_OW 426
1248: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
1249: LD_ADDR_EXP 60
1253: PUSH
1254: LD_INT 2
1256: PPUSH
1257: CALL_OW 426
1261: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
1262: LD_ADDR_EXP 61
1266: PUSH
1267: LD_INT 3
1269: PPUSH
1270: CALL_OW 426
1274: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
1275: LD_ADDR_EXP 62
1279: PUSH
1280: LD_INT 4
1282: PPUSH
1283: CALL_OW 426
1287: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
1288: LD_ADDR_EXP 63
1292: PUSH
1293: LD_INT 5
1295: PPUSH
1296: CALL_OW 426
1300: ST_TO_ADDR
// def_extra_sib_deposits = GetMultiplayerSetting ( 6 ) ;
1301: LD_ADDR_EXP 64
1305: PUSH
1306: LD_INT 6
1308: PPUSH
1309: CALL_OW 426
1313: ST_TO_ADDR
// def_base_size = GetMultiplayerSetting ( 7 ) ;
1314: LD_ADDR_EXP 1
1318: PUSH
1319: LD_INT 7
1321: PPUSH
1322: CALL_OW 426
1326: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
1327: LD_ADDR_EXP 65
1331: PUSH
1332: LD_INT 10
1334: PPUSH
1335: CALL_OW 426
1339: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
1340: LD_ADDR_EXP 66
1344: PUSH
1345: LD_INT 11
1347: PPUSH
1348: CALL_OW 426
1352: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
1353: LD_ADDR_EXP 67
1357: PUSH
1358: LD_INT 12
1360: PPUSH
1361: CALL_OW 426
1365: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
1366: LD_ADDR_EXP 69
1370: PUSH
1371: LD_INT 13
1373: PPUSH
1374: CALL_OW 426
1378: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
1379: LD_ADDR_EXP 68
1383: PUSH
1384: LD_INT 14
1386: PPUSH
1387: CALL_OW 426
1391: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
1392: LD_ADDR_EXP 70
1396: PUSH
1397: LD_INT 15
1399: PPUSH
1400: CALL_OW 426
1404: ST_TO_ADDR
// def_west_nations = GetMultiplayerSetting ( 21 ) ;
1405: LD_ADDR_EXP 2
1409: PUSH
1410: LD_INT 21
1412: PPUSH
1413: CALL_OW 426
1417: ST_TO_ADDR
// def_east_nations = GetMultiplayerSetting ( 22 ) ;
1418: LD_ADDR_EXP 3
1422: PUSH
1423: LD_INT 22
1425: PPUSH
1426: CALL_OW 426
1430: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 23 ) ;
1431: LD_ADDR_VAR 0 9
1435: PUSH
1436: LD_INT 23
1438: PPUSH
1439: CALL_OW 426
1443: ST_TO_ADDR
// end else
1444: GO 1586
// begin randomize ;
1446: CALL_OW 10
// def_base_level = 3 ;
1450: LD_ADDR_EXP 58
1454: PUSH
1455: LD_INT 3
1457: ST_TO_ADDR
// def_amount_of_people = 1 ;
1458: LD_ADDR_EXP 59
1462: PUSH
1463: LD_INT 1
1465: ST_TO_ADDR
// def_skill_level = 1 ;
1466: LD_ADDR_EXP 60
1470: PUSH
1471: LD_INT 1
1473: ST_TO_ADDR
// def_starting_resources = 2 ;
1474: LD_ADDR_EXP 61
1478: PUSH
1479: LD_INT 2
1481: ST_TO_ADDR
// def_shipments_density = 1 ;
1482: LD_ADDR_EXP 62
1486: PUSH
1487: LD_INT 1
1489: ST_TO_ADDR
// def_extra_oil_deposits = 1 ;
1490: LD_ADDR_EXP 63
1494: PUSH
1495: LD_INT 1
1497: ST_TO_ADDR
// def_extra_sib_deposits = 1 ;
1498: LD_ADDR_EXP 64
1502: PUSH
1503: LD_INT 1
1505: ST_TO_ADDR
// def_base_size = 2 ;
1506: LD_ADDR_EXP 1
1510: PUSH
1511: LD_INT 2
1513: ST_TO_ADDR
// def_shared_vision = 1 ;
1514: LD_ADDR_EXP 65
1518: PUSH
1519: LD_INT 1
1521: ST_TO_ADDR
// def_morale_flags = 1 ;
1522: LD_ADDR_EXP 66
1526: PUSH
1527: LD_INT 1
1529: ST_TO_ADDR
// def_siberite_detection = 1 ;
1530: LD_ADDR_EXP 67
1534: PUSH
1535: LD_INT 1
1537: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
1538: LD_ADDR_EXP 69
1542: PUSH
1543: LD_INT 3
1545: ST_TO_ADDR
// def_people_respawning = 2 ;
1546: LD_ADDR_EXP 68
1550: PUSH
1551: LD_INT 2
1553: ST_TO_ADDR
// def_siberite_bomb = 0 ;
1554: LD_ADDR_EXP 70
1558: PUSH
1559: LD_INT 0
1561: ST_TO_ADDR
// def_west_nations = 0 ;
1562: LD_ADDR_EXP 2
1566: PUSH
1567: LD_INT 0
1569: ST_TO_ADDR
// def_east_nations = 2 ;
1570: LD_ADDR_EXP 3
1574: PUSH
1575: LD_INT 2
1577: ST_TO_ADDR
// tech_level = 4 ;
1578: LD_ADDR_VAR 0 9
1582: PUSH
1583: LD_INT 4
1585: ST_TO_ADDR
// end ; InitGameRules ;
1586: CALL 15923 0 0
// if def_game_rules = 0 then
1590: LD_EXP 57
1594: PUSH
1595: LD_INT 0
1597: EQUAL
1598: IFFALSE 1625
// begin if isSGUI then
1600: LD_OWVAR 83
1604: IFFALSE 1612
// setMpTechs ( ) else
1606: CALL 19373 0 0
1610: GO 1625
// begin SetMpTechLevel ( tech_level + 1 ) ;
1612: LD_VAR 0 9
1616: PUSH
1617: LD_INT 1
1619: PLUS
1620: PPUSH
1621: CALL 19520 0 1
// end ; end ; if not def_base_level then
1625: LD_EXP 58
1629: NOT
1630: IFFALSE 1640
// def_base_size := 0 ;
1632: LD_ADDR_EXP 1
1636: PUSH
1637: LD_INT 0
1639: ST_TO_ADDR
// is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1640: LD_ADDR_EXP 4
1644: PUSH
1645: LD_INT 0
1647: PUSH
1648: LD_INT 1
1650: PUSH
1651: LD_INT 1
1653: PUSH
1654: LD_INT 1
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: PUSH
1663: LD_EXP 58
1667: PUSH
1668: LD_INT 1
1670: PLUS
1671: ARRAY
1672: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
1673: LD_ADDR_EXP 5
1677: PUSH
1678: LD_INT 0
1680: PUSH
1681: LD_INT 0
1683: PUSH
1684: LD_INT 2
1686: PUSH
1687: LD_INT 4
1689: PUSH
1690: EMPTY
1691: LIST
1692: LIST
1693: LIST
1694: LIST
1695: PUSH
1696: LD_EXP 58
1700: PUSH
1701: LD_INT 1
1703: PLUS
1704: ARRAY
1705: ST_TO_ADDR
// if Game_Type <> 4 then
1706: LD_EXP 56
1710: PUSH
1711: LD_INT 4
1713: NONEQUAL
1714: IFFALSE 1751
// number_of_people = [ 5 , 7 , 9 , 11 ] [ def_amount_of_people + 1 ] else
1716: LD_ADDR_EXP 6
1720: PUSH
1721: LD_INT 5
1723: PUSH
1724: LD_INT 7
1726: PUSH
1727: LD_INT 9
1729: PUSH
1730: LD_INT 11
1732: PUSH
1733: EMPTY
1734: LIST
1735: LIST
1736: LIST
1737: LIST
1738: PUSH
1739: LD_EXP 59
1743: PUSH
1744: LD_INT 1
1746: PLUS
1747: ARRAY
1748: ST_TO_ADDR
1749: GO 1784
// number_of_people = [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
1751: LD_ADDR_EXP 6
1755: PUSH
1756: LD_INT 9
1758: PUSH
1759: LD_INT 12
1761: PUSH
1762: LD_INT 15
1764: PUSH
1765: LD_INT 24
1767: PUSH
1768: EMPTY
1769: LIST
1770: LIST
1771: LIST
1772: LIST
1773: PUSH
1774: LD_EXP 59
1778: PUSH
1779: LD_INT 1
1781: PLUS
1782: ARRAY
1783: ST_TO_ADDR
// skill_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1784: LD_ADDR_EXP 7
1788: PUSH
1789: LD_INT 2
1791: PUSH
1792: LD_INT 3
1794: PUSH
1795: LD_INT 4
1797: PUSH
1798: LD_INT 5
1800: PUSH
1801: EMPTY
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: PUSH
1807: LD_EXP 60
1811: PUSH
1812: LD_INT 1
1814: PLUS
1815: ARRAY
1816: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1817: LD_ADDR_EXP 9
1821: PUSH
1822: LD_INT 0
1824: PUSH
1825: LD_INT 0
1827: PUSH
1828: LD_INT 0
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: LIST
1835: PUSH
1836: LD_INT 30
1838: PUSH
1839: LD_INT 0
1841: PUSH
1842: LD_INT 0
1844: PUSH
1845: EMPTY
1846: LIST
1847: LIST
1848: LIST
1849: PUSH
1850: LD_INT 50
1852: PUSH
1853: LD_INT 20
1855: PUSH
1856: LD_INT 0
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: LIST
1863: PUSH
1864: LD_INT 80
1866: PUSH
1867: LD_INT 40
1869: PUSH
1870: LD_INT 20
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: LIST
1882: LIST
1883: PUSH
1884: LD_EXP 61
1888: PUSH
1889: LD_INT 1
1891: PLUS
1892: ARRAY
1893: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1894: LD_ADDR_EXP 8
1898: PUSH
1899: LD_INT 10
1901: PUSH
1902: EMPTY
1903: LIST
1904: PUSH
1905: LD_INT 7
1907: PUSH
1908: LD_INT 14
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: PUSH
1915: LD_INT 6
1917: PUSH
1918: LD_INT 12
1920: PUSH
1921: LD_INT 18
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: LIST
1928: PUSH
1929: LD_INT 5
1931: PUSH
1932: LD_INT 10
1934: PUSH
1935: LD_INT 15
1937: PUSH
1938: LD_INT 20
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: LD_EXP 61
1957: PUSH
1958: LD_INT 1
1960: PLUS
1961: ARRAY
1962: ST_TO_ADDR
// shipments_density = [ 18 , 25 , 35 ] [ def_shipments_density + 1 ] ;
1963: LD_ADDR_EXP 10
1967: PUSH
1968: LD_INT 18
1970: PUSH
1971: LD_INT 25
1973: PUSH
1974: LD_INT 35
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: LIST
1981: PUSH
1982: LD_EXP 62
1986: PUSH
1987: LD_INT 1
1989: PLUS
1990: ARRAY
1991: ST_TO_ADDR
// amount_of_apemen := [ 0 , 2 , 4 , 6 ] [ def_amount_of_apemen + 1 ] ;
1992: LD_ADDR_EXP 12
1996: PUSH
1997: LD_INT 0
1999: PUSH
2000: LD_INT 2
2002: PUSH
2003: LD_INT 4
2005: PUSH
2006: LD_INT 6
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: PUSH
2015: LD_EXP 69
2019: PUSH
2020: LD_INT 1
2022: PLUS
2023: ARRAY
2024: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
2025: LD_ADDR_EXP 13
2029: PUSH
2030: LD_INT 0
2032: PUSH
2033: LD_INT 8400
2035: PUSH
2036: LD_INT 1750
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: LIST
2043: PUSH
2044: LD_EXP 68
2048: PUSH
2049: LD_INT 1
2051: PLUS
2052: ARRAY
2053: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
2054: LD_ADDR_EXP 14
2058: PUSH
2059: LD_INT 0
2061: PUSH
2062: LD_INT 21000
2064: PUSH
2065: LD_INT 4200
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: LIST
2072: PUSH
2073: LD_EXP 68
2077: PUSH
2078: LD_INT 1
2080: PLUS
2081: ARRAY
2082: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
2083: LD_ADDR_EXP 15
2087: PUSH
2088: LD_INT 0
2090: PUSH
2091: LD_INT 1
2093: PUSH
2094: LD_INT 63000
2096: PUSH
2097: LD_INT 126000
2099: PUSH
2100: LD_INT 189000
2102: PUSH
2103: LD_INT 252000
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: PUSH
2114: LD_EXP 70
2118: PUSH
2119: LD_INT 1
2121: PLUS
2122: ARRAY
2123: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
2124: LD_ADDR_EXP 11
2128: PUSH
2129: LD_INT 1
2131: NEG
2132: PUSH
2133: LD_INT 350
2135: PUSH
2136: LD_INT 700
2138: PUSH
2139: LD_INT 1400
2141: PUSH
2142: LD_INT 0
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: LIST
2149: LIST
2150: LIST
2151: PUSH
2152: LD_EXP 66
2156: PUSH
2157: LD_INT 1
2159: PLUS
2160: ARRAY
2161: ST_TO_ADDR
// battle_flags_id = [ ] ;
2162: LD_ADDR_EXP 29
2166: PUSH
2167: EMPTY
2168: ST_TO_ADDR
// if not def_builduptime then
2169: LD_EXP 71
2173: NOT
2174: IFFALSE 2179
// disable ( 600 ) ;
2176: LD_INT 600
2178: DISABLE_MARKED
// end ;
2179: LD_VAR 0 1
2183: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2184: LD_INT 0
2186: PPUSH
2187: PPUSH
2188: PPUSH
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
2189: LD_ADDR_EXP 20
2193: PUSH
2194: LD_EXP 16
2198: PUSH
2199: LD_INT 0
2201: PUSH
2202: EMPTY
2203: LIST
2204: DIFF
2205: PUSH
2206: LD_INT 1
2208: GREATER
2209: ST_TO_ADDR
// if not Team_Game then
2210: LD_EXP 20
2214: NOT
2215: IFFALSE 2313
// begin for i = 1 to 8 do
2217: LD_ADDR_VAR 0 2
2221: PUSH
2222: DOUBLE
2223: LD_INT 1
2225: DEC
2226: ST_TO_ADDR
2227: LD_INT 8
2229: PUSH
2230: FOR_TO
2231: IFFALSE 2309
// for j = 1 to 8 do
2233: LD_ADDR_VAR 0 3
2237: PUSH
2238: DOUBLE
2239: LD_INT 1
2241: DEC
2242: ST_TO_ADDR
2243: LD_INT 8
2245: PUSH
2246: FOR_TO
2247: IFFALSE 2305
// if i <> j then
2249: LD_VAR 0 2
2253: PUSH
2254: LD_VAR 0 3
2258: NONEQUAL
2259: IFFALSE 2283
// SetAttitude ( i , j , att_neutral , true ) else
2261: LD_VAR 0 2
2265: PPUSH
2266: LD_VAR 0 3
2270: PPUSH
2271: LD_INT 0
2273: PPUSH
2274: LD_INT 1
2276: PPUSH
2277: CALL_OW 80
2281: GO 2303
// SetAttitude ( i , j , att_friend , true ) ;
2283: LD_VAR 0 2
2287: PPUSH
2288: LD_VAR 0 3
2292: PPUSH
2293: LD_INT 1
2295: PPUSH
2296: LD_INT 1
2298: PPUSH
2299: CALL_OW 80
2303: GO 2246
2305: POP
2306: POP
2307: GO 2230
2309: POP
2310: POP
// end else
2311: GO 2488
// begin if def_shared_vision then
2313: LD_EXP 65
2317: IFFALSE 2382
// begin for i in Teams do
2319: LD_ADDR_VAR 0 2
2323: PUSH
2324: LD_EXP 17
2328: PUSH
2329: FOR_IN
2330: IFFALSE 2380
// for j = 2 to i do
2332: LD_ADDR_VAR 0 3
2336: PUSH
2337: DOUBLE
2338: LD_INT 2
2340: DEC
2341: ST_TO_ADDR
2342: LD_VAR 0 2
2346: PUSH
2347: FOR_TO
2348: IFFALSE 2376
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2350: LD_VAR 0 2
2354: PUSH
2355: LD_VAR 0 3
2359: ARRAY
2360: PPUSH
2361: LD_VAR 0 2
2365: PUSH
2366: LD_INT 1
2368: ARRAY
2369: PPUSH
2370: CALL_OW 343
2374: GO 2347
2376: POP
2377: POP
2378: GO 2329
2380: POP
2381: POP
// end ; for i = 1 to 8 do
2382: LD_ADDR_VAR 0 2
2386: PUSH
2387: DOUBLE
2388: LD_INT 1
2390: DEC
2391: ST_TO_ADDR
2392: LD_INT 8
2394: PUSH
2395: FOR_TO
2396: IFFALSE 2486
// for j = 1 to 8 do
2398: LD_ADDR_VAR 0 3
2402: PUSH
2403: DOUBLE
2404: LD_INT 1
2406: DEC
2407: ST_TO_ADDR
2408: LD_INT 8
2410: PUSH
2411: FOR_TO
2412: IFFALSE 2482
// if Side_Teams [ i ] = Side_Teams [ j ] then
2414: LD_EXP 16
2418: PUSH
2419: LD_VAR 0 2
2423: ARRAY
2424: PUSH
2425: LD_EXP 16
2429: PUSH
2430: LD_VAR 0 3
2434: ARRAY
2435: EQUAL
2436: IFFALSE 2460
// SetAttitude ( i , j , att_friend , true ) else
2438: LD_VAR 0 2
2442: PPUSH
2443: LD_VAR 0 3
2447: PPUSH
2448: LD_INT 1
2450: PPUSH
2451: LD_INT 1
2453: PPUSH
2454: CALL_OW 80
2458: GO 2480
// SetAttitude ( i , j , att_enemy , true ) ;
2460: LD_VAR 0 2
2464: PPUSH
2465: LD_VAR 0 3
2469: PPUSH
2470: LD_INT 2
2472: PPUSH
2473: LD_INT 1
2475: PPUSH
2476: CALL_OW 80
2480: GO 2411
2482: POP
2483: POP
2484: GO 2395
2486: POP
2487: POP
// end ; end ;
2488: LD_VAR 0 1
2492: RET
// function prepare_people ( count , cl , x , y , r ) ; var i , j , un ; begin
2493: LD_INT 0
2495: PPUSH
2496: PPUSH
2497: PPUSH
2498: PPUSH
// result := [ ] ;
2499: LD_ADDR_VAR 0 6
2503: PUSH
2504: EMPTY
2505: ST_TO_ADDR
// for i := 1 to count do
2506: LD_ADDR_VAR 0 7
2510: PUSH
2511: DOUBLE
2512: LD_INT 1
2514: DEC
2515: ST_TO_ADDR
2516: LD_VAR 0 1
2520: PUSH
2521: FOR_TO
2522: IFFALSE 2918
// begin uc_direction := Rand ( 0 , 5 ) ;
2524: LD_ADDR_OWVAR 24
2528: PUSH
2529: LD_INT 0
2531: PPUSH
2532: LD_INT 5
2534: PPUSH
2535: CALL_OW 12
2539: ST_TO_ADDR
// if commander then
2540: LD_LOC 1
2544: IFFALSE 2653
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2546: LD_ADDR_OWVAR 26
2550: PUSH
2551: LD_OWVAR 19
2555: PUSH
2556: LD_OWVAR 20
2560: ARRAY
2561: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2562: LD_INT 1
2564: PPUSH
2565: LD_INT 2
2567: PPUSH
2568: CALL_OW 12
2572: PPUSH
2573: LD_VAR 0 2
2577: PPUSH
2578: LD_EXP 7
2582: PUSH
2583: LD_INT 2
2585: PLUS
2586: PPUSH
2587: CALL_OW 380
// hc_importance := 105 ;
2591: LD_ADDR_OWVAR 32
2595: PUSH
2596: LD_INT 105
2598: ST_TO_ADDR
// commander := false ;
2599: LD_ADDR_LOC 1
2603: PUSH
2604: LD_INT 0
2606: ST_TO_ADDR
// if Multiplayer then
2607: LD_OWVAR 4
2611: IFFALSE 2651
// begin hc_gallery := MULTIAVATARS ;
2613: LD_ADDR_OWVAR 33
2617: PUSH
2618: LD_STRING MULTIAVATARS
2620: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2621: LD_ADDR_OWVAR 34
2625: PUSH
2626: LD_OWVAR 20
2630: PPUSH
2631: CALL_OW 525
2635: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2636: LD_ADDR_OWVAR 27
2640: PUSH
2641: LD_OWVAR 20
2645: PPUSH
2646: CALL_OW 526
2650: ST_TO_ADDR
// end ; end else
2651: GO 2716
// begin hc_name :=  ;
2653: LD_ADDR_OWVAR 26
2657: PUSH
2658: LD_STRING 
2660: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2661: LD_INT 1
2663: PPUSH
2664: LD_INT 2
2666: PPUSH
2667: CALL_OW 12
2671: PPUSH
2672: LD_VAR 0 2
2676: PPUSH
2677: LD_EXP 7
2681: PPUSH
2682: CALL_OW 380
// hc_importance := 0 ;
2686: LD_ADDR_OWVAR 32
2690: PUSH
2691: LD_INT 0
2693: ST_TO_ADDR
// if Multiplayer then
2694: LD_OWVAR 4
2698: IFFALSE 2716
// begin hc_gallery :=  ;
2700: LD_ADDR_OWVAR 33
2704: PUSH
2705: LD_STRING 
2707: ST_TO_ADDR
// hc_face_number := 0 ;
2708: LD_ADDR_OWVAR 34
2712: PUSH
2713: LD_INT 0
2715: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2716: LD_ADDR_VAR 0 9
2720: PUSH
2721: CALL_OW 44
2725: ST_TO_ADDR
// if global_defined then
2726: LD_LOC 3
2730: IFFALSE 2870
// begin if ( cl = class_soldier ) then
2732: LD_VAR 0 2
2736: PUSH
2737: LD_INT 1
2739: EQUAL
2740: IFFALSE 2760
// j := i + soldiers_created else
2742: LD_ADDR_VAR 0 8
2746: PUSH
2747: LD_VAR 0 7
2751: PUSH
2752: LD_LOC 4
2756: PLUS
2757: ST_TO_ADDR
2758: GO 2770
// j := i ;
2760: LD_ADDR_VAR 0 8
2764: PUSH
2765: LD_VAR 0 7
2769: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2770: LD_LOC 2
2774: PUSH
2775: LD_VAR 0 2
2779: ARRAY
2780: PUSH
2781: LD_VAR 0 8
2785: ARRAY
2786: PPUSH
2787: LD_VAR 0 9
2791: PPUSH
2792: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2796: LD_VAR 0 9
2800: PPUSH
2801: LD_INT 2
2803: PPUSH
2804: LD_LOC 2
2808: PUSH
2809: LD_VAR 0 2
2813: ARRAY
2814: PUSH
2815: LD_VAR 0 8
2819: ARRAY
2820: PPUSH
2821: LD_INT 2
2823: PPUSH
2824: CALL_OW 260
2828: PPUSH
2829: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2833: LD_VAR 0 9
2837: PPUSH
2838: LD_INT 1
2840: PPUSH
2841: LD_LOC 2
2845: PUSH
2846: LD_VAR 0 2
2850: ARRAY
2851: PUSH
2852: LD_VAR 0 8
2856: ARRAY
2857: PPUSH
2858: LD_INT 1
2860: PPUSH
2861: CALL_OW 260
2865: PPUSH
2866: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2870: LD_VAR 0 9
2874: PPUSH
2875: LD_VAR 0 3
2879: PPUSH
2880: LD_VAR 0 4
2884: PPUSH
2885: LD_VAR 0 5
2889: PPUSH
2890: LD_INT 0
2892: PPUSH
2893: CALL_OW 50
// result := result ^ [ un ] ;
2897: LD_ADDR_VAR 0 6
2901: PUSH
2902: LD_VAR 0 6
2906: PUSH
2907: LD_VAR 0 9
2911: PUSH
2912: EMPTY
2913: LIST
2914: ADD
2915: ST_TO_ADDR
// end ;
2916: GO 2521
2918: POP
2919: POP
// if not global_defined then
2920: LD_LOC 3
2924: NOT
2925: IFFALSE 3003
// if ( global_units >= cl ) then
2927: LD_LOC 2
2931: PUSH
2932: LD_VAR 0 2
2936: GREATEREQUAL
2937: IFFALSE 2978
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2939: LD_ADDR_LOC 2
2943: PUSH
2944: LD_LOC 2
2948: PPUSH
2949: LD_VAR 0 2
2953: PPUSH
2954: LD_LOC 2
2958: PUSH
2959: LD_VAR 0 2
2963: ARRAY
2964: PUSH
2965: LD_VAR 0 6
2969: ADD
2970: PPUSH
2971: CALL_OW 1
2975: ST_TO_ADDR
2976: GO 3003
// global_units := Replace ( global_units , cl , result ) ;
2978: LD_ADDR_LOC 2
2982: PUSH
2983: LD_LOC 2
2987: PPUSH
2988: LD_VAR 0 2
2992: PPUSH
2993: LD_VAR 0 6
2997: PPUSH
2998: CALL_OW 1
3002: ST_TO_ADDR
// end ;
3003: LD_VAR 0 6
3007: RET
// function prepare_side ( side , pos , nation ) ; var x , y , dir , i , r , sol , br , dep ; begin
3008: LD_INT 0
3010: PPUSH
3011: PPUSH
3012: PPUSH
3013: PPUSH
3014: PPUSH
3015: PPUSH
3016: PPUSH
3017: PPUSH
3018: PPUSH
// if side in [ 0 , 9 ] then
3019: LD_VAR 0 1
3023: PUSH
3024: LD_INT 0
3026: PUSH
3027: LD_INT 9
3029: PUSH
3030: EMPTY
3031: LIST
3032: LIST
3033: IN
3034: IFFALSE 3038
// exit ;
3036: GO 4293
// uc_nation := nation ;
3038: LD_ADDR_OWVAR 21
3042: PUSH
3043: LD_VAR 0 3
3047: ST_TO_ADDR
// uc_side := side ;
3048: LD_ADDR_OWVAR 20
3052: PUSH
3053: LD_VAR 0 1
3057: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3058: LD_ADDR_VAR 0 5
3062: PUSH
3063: LD_EXP 22
3067: PUSH
3068: LD_VAR 0 2
3072: ARRAY
3073: PUSH
3074: LD_INT 1
3076: ARRAY
3077: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3078: LD_ADDR_VAR 0 6
3082: PUSH
3083: LD_EXP 22
3087: PUSH
3088: LD_VAR 0 2
3092: ARRAY
3093: PUSH
3094: LD_INT 2
3096: ARRAY
3097: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3098: LD_ADDR_VAR 0 7
3102: PUSH
3103: LD_EXP 22
3107: PUSH
3108: LD_VAR 0 2
3112: ARRAY
3113: PUSH
3114: LD_INT 3
3116: ARRAY
3117: ST_TO_ADDR
// if is_depot then
3118: LD_EXP 4
3122: IFFALSE 3255
// begin bc_type = b_depot ;
3124: LD_ADDR_OWVAR 42
3128: PUSH
3129: LD_INT 0
3131: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3132: LD_ADDR_VAR 0 12
3136: PUSH
3137: LD_VAR 0 5
3141: PPUSH
3142: LD_VAR 0 6
3146: PPUSH
3147: LD_VAR 0 7
3151: PPUSH
3152: CALL_OW 47
3156: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3157: LD_VAR 0 12
3161: PPUSH
3162: LD_STRING @
3164: PUSH
3165: LD_VAR 0 1
3169: STR
3170: PPUSH
3171: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3175: LD_VAR 0 12
3179: PPUSH
3180: CALL_OW 274
3184: PPUSH
3185: LD_INT 1
3187: PPUSH
3188: LD_EXP 9
3192: PUSH
3193: LD_INT 1
3195: ARRAY
3196: PPUSH
3197: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3201: LD_VAR 0 12
3205: PPUSH
3206: CALL_OW 274
3210: PPUSH
3211: LD_INT 2
3213: PPUSH
3214: LD_EXP 9
3218: PUSH
3219: LD_INT 2
3221: ARRAY
3222: PPUSH
3223: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3227: LD_VAR 0 12
3231: PPUSH
3232: CALL_OW 274
3236: PPUSH
3237: LD_INT 3
3239: PPUSH
3240: LD_EXP 9
3244: PUSH
3245: LD_INT 3
3247: ARRAY
3248: PPUSH
3249: CALL_OW 277
// end else
3253: GO 3399
// begin for i := 1 to 3 do
3255: LD_ADDR_VAR 0 8
3259: PUSH
3260: DOUBLE
3261: LD_INT 1
3263: DEC
3264: ST_TO_ADDR
3265: LD_INT 3
3267: PUSH
3268: FOR_TO
3269: IFFALSE 3397
// begin r := starting_resources [ i ] ;
3271: LD_ADDR_VAR 0 9
3275: PUSH
3276: LD_EXP 9
3280: PUSH
3281: LD_VAR 0 8
3285: ARRAY
3286: ST_TO_ADDR
// while r >= 10 do
3287: LD_VAR 0 9
3291: PUSH
3292: LD_INT 10
3294: GREATEREQUAL
3295: IFFALSE 3395
// if r > 50 then
3297: LD_VAR 0 9
3301: PUSH
3302: LD_INT 50
3304: GREATER
3305: IFFALSE 3351
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3307: LD_VAR 0 8
3311: PPUSH
3312: LD_INT 5
3314: PPUSH
3315: LD_VAR 0 5
3319: PPUSH
3320: LD_VAR 0 6
3324: PPUSH
3325: LD_INT 4
3327: PPUSH
3328: LD_INT 0
3330: PPUSH
3331: CALL_OW 60
// r := r - 50 ;
3335: LD_ADDR_VAR 0 9
3339: PUSH
3340: LD_VAR 0 9
3344: PUSH
3345: LD_INT 50
3347: MINUS
3348: ST_TO_ADDR
// end else
3349: GO 3393
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3351: LD_VAR 0 8
3355: PPUSH
3356: LD_VAR 0 9
3360: PUSH
3361: LD_INT 10
3363: DIV
3364: PPUSH
3365: LD_VAR 0 5
3369: PPUSH
3370: LD_VAR 0 6
3374: PPUSH
3375: LD_INT 4
3377: PPUSH
3378: LD_INT 0
3380: PPUSH
3381: CALL_OW 60
// r := 0 ;
3385: LD_ADDR_VAR 0 9
3389: PUSH
3390: LD_INT 0
3392: ST_TO_ADDR
// end ;
3393: GO 3287
// end ;
3395: GO 3268
3397: POP
3398: POP
// end ; if def_base_size > 0 then
3399: LD_EXP 1
3403: PUSH
3404: LD_INT 0
3406: GREATER
3407: IFFALSE 3482
// begin bc_kind1 := b_lab_basic ;
3409: LD_ADDR_OWVAR 44
3413: PUSH
3414: LD_INT 9
3416: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
3417: LD_ADDR_OWVAR 45
3421: PUSH
3422: LD_INT 9
3424: ST_TO_ADDR
// bc_type := b_lab ;
3425: LD_ADDR_OWVAR 42
3429: PUSH
3430: LD_INT 6
3432: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( labs_def [ pos ] [ 1 ] , labs_def [ pos ] [ 2 ] , labs_def [ pos ] [ 3 ] ) ;
3433: LD_EXP 24
3437: PUSH
3438: LD_VAR 0 2
3442: ARRAY
3443: PUSH
3444: LD_INT 1
3446: ARRAY
3447: PPUSH
3448: LD_EXP 24
3452: PUSH
3453: LD_VAR 0 2
3457: ARRAY
3458: PUSH
3459: LD_INT 2
3461: ARRAY
3462: PPUSH
3463: LD_EXP 24
3467: PUSH
3468: LD_VAR 0 2
3472: ARRAY
3473: PUSH
3474: LD_INT 3
3476: ARRAY
3477: PPUSH
3478: CALL_OW 47
// end ; if def_base_size > 1 then
3482: LD_EXP 1
3486: PUSH
3487: LD_INT 1
3489: GREATER
3490: IFFALSE 3549
// begin bc_type := b_workshop ;
3492: LD_ADDR_OWVAR 42
3496: PUSH
3497: LD_INT 2
3499: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( factory_def [ pos ] [ 1 ] , factory_def [ pos ] [ 2 ] , factory_def [ pos ] [ 3 ] ) ;
3500: LD_EXP 25
3504: PUSH
3505: LD_VAR 0 2
3509: ARRAY
3510: PUSH
3511: LD_INT 1
3513: ARRAY
3514: PPUSH
3515: LD_EXP 25
3519: PUSH
3520: LD_VAR 0 2
3524: ARRAY
3525: PUSH
3526: LD_INT 2
3528: ARRAY
3529: PPUSH
3530: LD_EXP 25
3534: PUSH
3535: LD_VAR 0 2
3539: ARRAY
3540: PUSH
3541: LD_INT 3
3543: ARRAY
3544: PPUSH
3545: CALL_OW 47
// end ; for r in starting_crates do
3549: LD_ADDR_VAR 0 9
3553: PUSH
3554: LD_EXP 8
3558: PUSH
3559: FOR_IN
3560: IFFALSE 3592
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3562: LD_INT 1
3564: PPUSH
3565: LD_INT 5
3567: PPUSH
3568: LD_VAR 0 5
3572: PPUSH
3573: LD_VAR 0 6
3577: PPUSH
3578: LD_VAR 0 9
3582: PPUSH
3583: LD_INT 0
3585: PPUSH
3586: CALL_OW 60
3590: GO 3559
3592: POP
3593: POP
// if def_morale_flags then
3594: LD_EXP 66
3598: IFFALSE 3737
// begin x := start_def [ pos ] [ 1 ] ;
3600: LD_ADDR_VAR 0 5
3604: PUSH
3605: LD_EXP 26
3609: PUSH
3610: LD_VAR 0 2
3614: ARRAY
3615: PUSH
3616: LD_INT 1
3618: ARRAY
3619: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3620: LD_ADDR_VAR 0 6
3624: PUSH
3625: LD_EXP 26
3629: PUSH
3630: LD_VAR 0 2
3634: ARRAY
3635: PUSH
3636: LD_INT 2
3638: ARRAY
3639: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3640: LD_VAR 0 5
3644: PPUSH
3645: LD_VAR 0 6
3649: PPUSH
3650: LD_INT 12
3652: PPUSH
3653: LD_INT 2
3655: PPUSH
3656: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3660: LD_ADDR_EXP 29
3664: PUSH
3665: LD_EXP 29
3669: PUSH
3670: LD_VAR 0 1
3674: PPUSH
3675: LD_VAR 0 5
3679: PPUSH
3680: LD_VAR 0 6
3684: PPUSH
3685: LD_INT 1
3687: PUSH
3688: LD_INT 100
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: PUSH
3695: LD_INT 2
3697: PUSH
3698: LD_INT 50
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: PUSH
3705: LD_INT 3
3707: PUSH
3708: LD_INT 20
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: PUSH
3715: LD_INT 20
3717: PUSH
3718: LD_INT 100
3720: PUSH
3721: EMPTY
3722: LIST
3723: LIST
3724: PUSH
3725: EMPTY
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: PPUSH
3731: CALL_OW 418
3735: ADD
3736: ST_TO_ADDR
// end ; commander := true ;
3737: LD_ADDR_LOC 1
3741: PUSH
3742: LD_INT 1
3744: ST_TO_ADDR
// soldiers_created := 0 ;
3745: LD_ADDR_LOC 4
3749: PUSH
3750: LD_INT 0
3752: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3753: LD_ADDR_VAR 0 8
3757: PUSH
3758: DOUBLE
3759: LD_INT 1
3761: DEC
3762: ST_TO_ADDR
3763: LD_EXP 5
3767: PUSH
3768: FOR_TO
3769: IFFALSE 4011
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3771: LD_ADDR_VAR 0 5
3775: PUSH
3776: LD_EXP 23
3780: PUSH
3781: LD_VAR 0 2
3785: ARRAY
3786: PUSH
3787: LD_VAR 0 8
3791: ARRAY
3792: PUSH
3793: LD_INT 1
3795: ARRAY
3796: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3797: LD_ADDR_VAR 0 6
3801: PUSH
3802: LD_EXP 23
3806: PUSH
3807: LD_VAR 0 2
3811: ARRAY
3812: PUSH
3813: LD_VAR 0 8
3817: ARRAY
3818: PUSH
3819: LD_INT 2
3821: ARRAY
3822: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3823: LD_ADDR_VAR 0 7
3827: PUSH
3828: LD_EXP 23
3832: PUSH
3833: LD_VAR 0 2
3837: ARRAY
3838: PUSH
3839: LD_VAR 0 8
3843: ARRAY
3844: PUSH
3845: LD_INT 3
3847: ARRAY
3848: ST_TO_ADDR
// if i < 4 then
3849: LD_VAR 0 8
3853: PUSH
3854: LD_INT 4
3856: LESS
3857: IFFALSE 3869
// bc_type := b_breastwork else
3859: LD_ADDR_OWVAR 42
3863: PUSH
3864: LD_INT 31
3866: ST_TO_ADDR
3867: GO 3877
// bc_type := b_armoury ;
3869: LD_ADDR_OWVAR 42
3873: PUSH
3874: LD_INT 4
3876: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3877: LD_ADDR_VAR 0 11
3881: PUSH
3882: LD_VAR 0 5
3886: PPUSH
3887: LD_VAR 0 6
3891: PPUSH
3892: LD_VAR 0 7
3896: PPUSH
3897: CALL_OW 47
3901: ST_TO_ADDR
// x := ShiftX ( x , dir , 2 ) ;
3902: LD_ADDR_VAR 0 5
3906: PUSH
3907: LD_VAR 0 5
3911: PPUSH
3912: LD_VAR 0 7
3916: PPUSH
3917: LD_INT 2
3919: PPUSH
3920: CALL_OW 272
3924: ST_TO_ADDR
// y := ShiftY ( y , dir , 2 ) ;
3925: LD_ADDR_VAR 0 6
3929: PUSH
3930: LD_VAR 0 6
3934: PPUSH
3935: LD_VAR 0 7
3939: PPUSH
3940: LD_INT 2
3942: PPUSH
3943: CALL_OW 273
3947: ST_TO_ADDR
// sol := prepare_people ( 1 , class_soldier , x , y , 0 ) [ 1 ] ;
3948: LD_ADDR_VAR 0 10
3952: PUSH
3953: LD_INT 1
3955: PPUSH
3956: LD_INT 1
3958: PPUSH
3959: LD_VAR 0 5
3963: PPUSH
3964: LD_VAR 0 6
3968: PPUSH
3969: LD_INT 0
3971: PPUSH
3972: CALL 2493 0 5
3976: PUSH
3977: LD_INT 1
3979: ARRAY
3980: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
3981: LD_ADDR_LOC 4
3985: PUSH
3986: LD_LOC 4
3990: PUSH
3991: LD_INT 1
3993: PLUS
3994: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
3995: LD_VAR 0 10
3999: PPUSH
4000: LD_VAR 0 11
4004: PPUSH
4005: CALL_OW 120
// end ;
4009: GO 3768
4011: POP
4012: POP
// x := start_def [ pos ] [ 1 ] ;
4013: LD_ADDR_VAR 0 5
4017: PUSH
4018: LD_EXP 26
4022: PUSH
4023: LD_VAR 0 2
4027: ARRAY
4028: PUSH
4029: LD_INT 1
4031: ARRAY
4032: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4033: LD_ADDR_VAR 0 6
4037: PUSH
4038: LD_EXP 26
4042: PUSH
4043: LD_VAR 0 2
4047: ARRAY
4048: PUSH
4049: LD_INT 2
4051: ARRAY
4052: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 ) ;
4053: LD_LOC 8
4057: PUSH
4058: LD_EXP 5
4062: MINUS
4063: PPUSH
4064: LD_INT 1
4066: PPUSH
4067: LD_VAR 0 5
4071: PPUSH
4072: LD_VAR 0 6
4076: PPUSH
4077: LD_INT 5
4079: PPUSH
4080: CALL 2493 0 5
// prepare_people ( neng , class_engineer , x , y , 5 ) ;
4084: LD_LOC 5
4088: PPUSH
4089: LD_INT 2
4091: PPUSH
4092: LD_VAR 0 5
4096: PPUSH
4097: LD_VAR 0 6
4101: PPUSH
4102: LD_INT 5
4104: PPUSH
4105: CALL 2493 0 5
// prepare_people ( nmech , class_mechanic , x , y , 5 ) ;
4109: LD_LOC 7
4113: PPUSH
4114: LD_INT 3
4116: PPUSH
4117: LD_VAR 0 5
4121: PPUSH
4122: LD_VAR 0 6
4126: PPUSH
4127: LD_INT 5
4129: PPUSH
4130: CALL 2493 0 5
// prepare_people ( nsci , class_scientistic , x , y , 5 ) ;
4134: LD_LOC 6
4138: PPUSH
4139: LD_INT 4
4141: PPUSH
4142: LD_VAR 0 5
4146: PPUSH
4147: LD_VAR 0 6
4151: PPUSH
4152: LD_INT 5
4154: PPUSH
4155: CALL 2493 0 5
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4159: LD_EXP 67
4163: PUSH
4164: LD_INT 20
4166: PPUSH
4167: LD_VAR 0 1
4171: PPUSH
4172: CALL_OW 321
4176: PUSH
4177: LD_INT 1
4179: EQUAL
4180: AND
4181: IFFALSE 4198
// SetTech ( tech_SibDet , side , state_researched ) ;
4183: LD_INT 20
4185: PPUSH
4186: LD_VAR 0 1
4190: PPUSH
4191: LD_INT 2
4193: PPUSH
4194: CALL_OW 322
// if def_siberite_bomb = 1 then
4198: LD_EXP 70
4202: PUSH
4203: LD_INT 1
4205: EQUAL
4206: IFFALSE 4240
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4208: LD_INT 25
4210: PPUSH
4211: LD_VAR 0 1
4215: PPUSH
4216: LD_INT 1
4218: PPUSH
4219: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4223: LD_INT 73
4225: PPUSH
4226: LD_VAR 0 1
4230: PPUSH
4231: LD_INT 1
4233: PPUSH
4234: CALL_OW 322
// end else
4238: GO 4270
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4240: LD_INT 25
4242: PPUSH
4243: LD_VAR 0 1
4247: PPUSH
4248: LD_INT 0
4250: PPUSH
4251: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4255: LD_INT 73
4257: PPUSH
4258: LD_VAR 0 1
4262: PPUSH
4263: LD_INT 0
4265: PPUSH
4266: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4270: LD_INT 24
4272: PPUSH
4273: LD_VAR 0 1
4277: PPUSH
4278: LD_INT 0
4280: PPUSH
4281: CALL_OW 322
// global_defined := true ;
4285: LD_ADDR_LOC 3
4289: PUSH
4290: LD_INT 1
4292: ST_TO_ADDR
// end ;
4293: LD_VAR 0 4
4297: RET
// every 0 0$1 do
4298: GO 4300
4300: DISABLE
// if ( def_siberite_bomb > 1 ) then
4301: LD_EXP 70
4305: PUSH
4306: LD_INT 1
4308: GREATER
4309: IFFALSE 4324
// begin wait ( siberite_bomb_Delay ) ;
4311: LD_EXP 15
4315: PPUSH
4316: CALL_OW 67
// EnableSibFiss ;
4320: CALL 4325 0 0
// end ;
4324: END
// function EnableSibFiss ; var i ; begin
4325: LD_INT 0
4327: PPUSH
4328: PPUSH
// for i := 1 to 8 do
4329: LD_ADDR_VAR 0 2
4333: PUSH
4334: DOUBLE
4335: LD_INT 1
4337: DEC
4338: ST_TO_ADDR
4339: LD_INT 8
4341: PUSH
4342: FOR_TO
4343: IFFALSE 4389
// if Side_Positions [ i ] then
4345: LD_EXP 18
4349: PUSH
4350: LD_VAR 0 2
4354: ARRAY
4355: IFFALSE 4387
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4357: LD_INT 25
4359: PPUSH
4360: LD_VAR 0 2
4364: PPUSH
4365: LD_INT 1
4367: PPUSH
4368: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4372: LD_INT 73
4374: PPUSH
4375: LD_VAR 0 2
4379: PPUSH
4380: LD_INT 1
4382: PPUSH
4383: CALL_OW 322
// end ;
4387: GO 4342
4389: POP
4390: POP
// end ;
4391: LD_VAR 0 1
4395: RET
// function prepare_sides ; var i , orig , pos ; begin
4396: LD_INT 0
4398: PPUSH
4399: PPUSH
4400: PPUSH
4401: PPUSH
// global_units := [ ] ;
4402: LD_ADDR_LOC 2
4406: PUSH
4407: EMPTY
4408: ST_TO_ADDR
// global_defined := false ;
4409: LD_ADDR_LOC 3
4413: PUSH
4414: LD_INT 0
4416: ST_TO_ADDR
// CountClassMembers ;
4417: CALL 4936 0 0
// for i := 1 to 8 do
4421: LD_ADDR_VAR 0 2
4425: PUSH
4426: DOUBLE
4427: LD_INT 1
4429: DEC
4430: ST_TO_ADDR
4431: LD_INT 8
4433: PUSH
4434: FOR_TO
4435: IFFALSE 4635
// if Side_Positions [ i ] then
4437: LD_EXP 18
4441: PUSH
4442: LD_VAR 0 2
4446: ARRAY
4447: IFFALSE 4633
// begin pos := Side_Positions [ i ] ;
4449: LD_ADDR_VAR 0 4
4453: PUSH
4454: LD_EXP 18
4458: PUSH
4459: LD_VAR 0 2
4463: ARRAY
4464: ST_TO_ADDR
// if Game_Type in [ 2 , 12 ] then
4465: LD_EXP 56
4469: PUSH
4470: LD_INT 2
4472: PUSH
4473: LD_INT 12
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: IN
4480: IFFALSE 4608
// begin if Game_Type = 12 then
4482: LD_EXP 56
4486: PUSH
4487: LD_INT 12
4489: EQUAL
4490: IFFALSE 4552
// begin prepare_side ( i , pos , Position_Nations [ pos ] ) ;
4492: LD_VAR 0 2
4496: PPUSH
4497: LD_VAR 0 4
4501: PPUSH
4502: LD_EXP 21
4506: PUSH
4507: LD_VAR 0 4
4511: ARRAY
4512: PPUSH
4513: CALL 3008 0 3
// prepare_side ( i , pos + 1 , Position_Nations [ pos + 1 ] ) end else
4517: LD_VAR 0 2
4521: PPUSH
4522: LD_VAR 0 4
4526: PUSH
4527: LD_INT 1
4529: PLUS
4530: PPUSH
4531: LD_EXP 21
4535: PUSH
4536: LD_VAR 0 4
4540: PUSH
4541: LD_INT 1
4543: PLUS
4544: ARRAY
4545: PPUSH
4546: CALL 3008 0 3
4550: GO 4606
// begin prepare_side ( i , pos , Side_Nations [ i ] ) ;
4552: LD_VAR 0 2
4556: PPUSH
4557: LD_VAR 0 4
4561: PPUSH
4562: LD_EXP 19
4566: PUSH
4567: LD_VAR 0 2
4571: ARRAY
4572: PPUSH
4573: CALL 3008 0 3
// prepare_side ( i , pos + 1 , Side_Nations [ i ] ) ;
4577: LD_VAR 0 2
4581: PPUSH
4582: LD_VAR 0 4
4586: PUSH
4587: LD_INT 1
4589: PLUS
4590: PPUSH
4591: LD_EXP 19
4595: PUSH
4596: LD_VAR 0 2
4600: ARRAY
4601: PPUSH
4602: CALL 3008 0 3
// end ; end else
4606: GO 4633
// prepare_side ( i , pos , Side_Nations [ i ] ) ;
4608: LD_VAR 0 2
4612: PPUSH
4613: LD_VAR 0 4
4617: PPUSH
4618: LD_EXP 19
4622: PUSH
4623: LD_VAR 0 2
4627: ARRAY
4628: PPUSH
4629: CALL 3008 0 3
// end ;
4633: GO 4434
4635: POP
4636: POP
// end ;
4637: LD_VAR 0 1
4641: RET
// function Modify_Nations ; var list , west , east , i ; begin
4642: LD_INT 0
4644: PPUSH
4645: PPUSH
4646: PPUSH
4647: PPUSH
4648: PPUSH
// list := [ ] ;
4649: LD_ADDR_VAR 0 2
4653: PUSH
4654: EMPTY
4655: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
4656: LD_ADDR_VAR 0 5
4660: PUSH
4661: DOUBLE
4662: LD_INT 1
4664: DEC
4665: ST_TO_ADDR
4666: LD_EXP 18
4670: PUSH
4671: LD_INT 0
4673: PLUS
4674: PUSH
4675: FOR_TO
4676: IFFALSE 4894
// if side_positions [ i ] = 1 then
4678: LD_EXP 18
4682: PUSH
4683: LD_VAR 0 5
4687: ARRAY
4688: PUSH
4689: LD_INT 1
4691: EQUAL
4692: IFFALSE 4786
// case side_nations [ i ] of 1 :
4694: LD_EXP 19
4698: PUSH
4699: LD_VAR 0 5
4703: ARRAY
4704: PUSH
4705: LD_INT 1
4707: DOUBLE
4708: EQUAL
4709: IFTRUE 4713
4711: GO 4731
4713: POP
// west := [ 1 , 2 ] ; 2 :
4714: LD_ADDR_VAR 0 3
4718: PUSH
4719: LD_INT 1
4721: PUSH
4722: LD_INT 2
4724: PUSH
4725: EMPTY
4726: LIST
4727: LIST
4728: ST_TO_ADDR
4729: GO 4784
4731: LD_INT 2
4733: DOUBLE
4734: EQUAL
4735: IFTRUE 4739
4737: GO 4757
4739: POP
// west := [ 2 , 3 ] ; 3 :
4740: LD_ADDR_VAR 0 3
4744: PUSH
4745: LD_INT 2
4747: PUSH
4748: LD_INT 3
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: ST_TO_ADDR
4755: GO 4784
4757: LD_INT 3
4759: DOUBLE
4760: EQUAL
4761: IFTRUE 4765
4763: GO 4783
4765: POP
// west := [ 3 , 1 ] ; end else
4766: LD_ADDR_VAR 0 3
4770: PUSH
4771: LD_INT 3
4773: PUSH
4774: LD_INT 1
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: ST_TO_ADDR
4781: GO 4784
4783: POP
4784: GO 4892
// if side_positions [ i ] = 3 then
4786: LD_EXP 18
4790: PUSH
4791: LD_VAR 0 5
4795: ARRAY
4796: PUSH
4797: LD_INT 3
4799: EQUAL
4800: IFFALSE 4892
// case side_nations [ i ] of 1 :
4802: LD_EXP 19
4806: PUSH
4807: LD_VAR 0 5
4811: ARRAY
4812: PUSH
4813: LD_INT 1
4815: DOUBLE
4816: EQUAL
4817: IFTRUE 4821
4819: GO 4839
4821: POP
// east := [ 1 , 2 ] ; 2 :
4822: LD_ADDR_VAR 0 4
4826: PUSH
4827: LD_INT 1
4829: PUSH
4830: LD_INT 2
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: ST_TO_ADDR
4837: GO 4892
4839: LD_INT 2
4841: DOUBLE
4842: EQUAL
4843: IFTRUE 4847
4845: GO 4865
4847: POP
// east := [ 2 , 3 ] ; 3 :
4848: LD_ADDR_VAR 0 4
4852: PUSH
4853: LD_INT 2
4855: PUSH
4856: LD_INT 3
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: ST_TO_ADDR
4863: GO 4892
4865: LD_INT 3
4867: DOUBLE
4868: EQUAL
4869: IFTRUE 4873
4871: GO 4891
4873: POP
// east := [ 3 , 1 ] ; end ;
4874: LD_ADDR_VAR 0 4
4878: PUSH
4879: LD_INT 3
4881: PUSH
4882: LD_INT 1
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: ST_TO_ADDR
4889: GO 4892
4891: POP
4892: GO 4675
4894: POP
4895: POP
// Position_Nations := west ^ east ^ [ 0 , 0 , 0 , 0 ] ;
4896: LD_ADDR_EXP 21
4900: PUSH
4901: LD_VAR 0 3
4905: PUSH
4906: LD_VAR 0 4
4910: ADD
4911: PUSH
4912: LD_INT 0
4914: PUSH
4915: LD_INT 0
4917: PUSH
4918: LD_INT 0
4920: PUSH
4921: LD_INT 0
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: ADD
4930: ST_TO_ADDR
// end ;
4931: LD_VAR 0 1
4935: RET
// function CountClassMembers ; var Mode ; begin
4936: LD_INT 0
4938: PPUSH
4939: PPUSH
// if No_Mechs then
4940: LD_EXP 72
4944: IFFALSE 4956
// Mode := 2 else
4946: LD_ADDR_VAR 0 2
4950: PUSH
4951: LD_INT 2
4953: ST_TO_ADDR
4954: GO 4964
// Mode := 1 ;
4956: LD_ADDR_VAR 0 2
4960: PUSH
4961: LD_INT 1
4963: ST_TO_ADDR
// neng := number_of_people ;
4964: LD_ADDR_LOC 5
4968: PUSH
4969: LD_EXP 6
4973: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4974: LD_ADDR_LOC 8
4978: PUSH
4979: LD_LOC 5
4983: PUSH
4984: LD_INT 4
4986: PUSH
4987: LD_INT 3
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: PUSH
4994: LD_VAR 0 2
4998: ARRAY
4999: DIV
5000: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
5001: LD_LOC 8
5005: PUSH
5006: LD_EXP 5
5010: LESS
5011: IFFALSE 5023
// nsol := number_of_breastworks ;
5013: LD_ADDR_LOC 8
5017: PUSH
5018: LD_EXP 5
5022: ST_TO_ADDR
// neng := neng - nsol ;
5023: LD_ADDR_LOC 5
5027: PUSH
5028: LD_LOC 5
5032: PUSH
5033: LD_LOC 8
5037: MINUS
5038: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
5039: LD_ADDR_LOC 6
5043: PUSH
5044: LD_LOC 5
5048: PUSH
5049: LD_INT 3
5051: PUSH
5052: LD_INT 2
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PUSH
5059: LD_VAR 0 2
5063: ARRAY
5064: DIV
5065: ST_TO_ADDR
// if ( nsci < 1 ) then
5066: LD_LOC 6
5070: PUSH
5071: LD_INT 1
5073: LESS
5074: IFFALSE 5084
// nsci := 1 ;
5076: LD_ADDR_LOC 6
5080: PUSH
5081: LD_INT 1
5083: ST_TO_ADDR
// neng := neng - nsci ;
5084: LD_ADDR_LOC 5
5088: PUSH
5089: LD_LOC 5
5093: PUSH
5094: LD_LOC 6
5098: MINUS
5099: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5100: LD_ADDR_LOC 7
5104: PUSH
5105: LD_LOC 5
5109: PUSH
5110: LD_INT 2
5112: DIV
5113: PUSH
5114: LD_INT 0
5116: PUSH
5117: EMPTY
5118: LIST
5119: LIST
5120: PUSH
5121: LD_VAR 0 2
5125: ARRAY
5126: ST_TO_ADDR
// neng := neng - nmech ;
5127: LD_ADDR_LOC 5
5131: PUSH
5132: LD_LOC 5
5136: PUSH
5137: LD_LOC 7
5141: MINUS
5142: ST_TO_ADDR
// if ( neng < 1 ) then
5143: LD_LOC 5
5147: PUSH
5148: LD_INT 1
5150: LESS
5151: IFFALSE 5161
// neng := 1 ;
5153: LD_ADDR_LOC 5
5157: PUSH
5158: LD_INT 1
5160: ST_TO_ADDR
// end ;
5161: LD_VAR 0 1
5165: RET
// function Init_Win_Condition ; begin
5166: LD_INT 0
5168: PPUSH
// disable ( 98 ) ;
5169: LD_INT 98
5171: DISABLE_MARKED
// disable ( 99 ) ;
5172: LD_INT 99
5174: DISABLE_MARKED
// if Team_Game then
5175: LD_EXP 20
5179: IFFALSE 5186
// enable ( 98 ) else
5181: LD_INT 98
5183: ENABLE_MARKED
5184: GO 5189
// enable ( 99 ) ;
5186: LD_INT 99
5188: ENABLE_MARKED
// end ;
5189: LD_VAR 0 1
5193: RET
// starting begin DE_Triggers ;
5194: CALL 8662 0 0
// mp_selectmsg := true ;
5198: LD_ADDR_OWVAR 13
5202: PUSH
5203: LD_INT 1
5205: ST_TO_ADDR
// if ( game_type <> 1 ) and ( game_type <> 3 ) then
5206: LD_EXP 56
5210: PUSH
5211: LD_INT 1
5213: NONEQUAL
5214: PUSH
5215: LD_EXP 56
5219: PUSH
5220: LD_INT 3
5222: NONEQUAL
5223: AND
5224: IFFALSE 5230
// read_multiplayer_and_game_parameters ;
5226: CALL 976 0 0
// case Game_Type of 1 , 3 :
5230: LD_EXP 56
5234: PUSH
5235: LD_INT 1
5237: DOUBLE
5238: EQUAL
5239: IFTRUE 5249
5241: LD_INT 3
5243: DOUBLE
5244: EQUAL
5245: IFTRUE 5249
5247: GO 5261
5249: POP
// begin enable ( 19 ) ;
5250: LD_INT 19
5252: ENABLE_MARKED
// starting_ctf ;
5253: CALL 9301 0 0
// exit ;
5257: GO 5429
// end ; 12 :
5259: GO 5277
5261: LD_INT 12
5263: DOUBLE
5264: EQUAL
5265: IFTRUE 5269
5267: GO 5276
5269: POP
// Modify_Nations ; end ;
5270: CALL 4642 0 0
5274: GO 5277
5276: POP
// enable ( 55 ) ;
5277: LD_INT 55
5279: ENABLE_MARKED
// AnimateTrees ( true ) ;
5280: LD_INT 1
5282: PPUSH
5283: CALL_OW 573
// init_map ;
5287: CALL 276 0 0
// set_shared_visions_and_alliances ;
5291: CALL 2184 0 0
// prepare_sides ;
5295: CALL 4396 0 0
// InitLimits ;
5299: CALL 18055 0 0
// ShowTimer ;
5303: CALL 18992 0 0
// init_shipments ;
5307: CALL 5430 0 0
// init_respawn ;
5311: CALL 5934 0 0
// InitApeman ;
5315: CALL 7469 0 0
// music_nat := Side_Nations [ your_side ] ;
5319: LD_ADDR_OWVAR 71
5323: PUSH
5324: LD_EXP 19
5328: PUSH
5329: LD_OWVAR 2
5333: ARRAY
5334: ST_TO_ADDR
// if IAmSpec then
5335: CALL_OW 531
5339: IFFALSE 5375
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
5341: LD_INT 0
5343: PPUSH
5344: LD_INT 0
5346: PPUSH
5347: LD_OWVAR 2
5351: PPUSH
5352: LD_INT 32767
5354: NEG
5355: PPUSH
5356: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
5360: LD_INT 104
5362: PPUSH
5363: LD_INT 69
5365: PPUSH
5366: CALL_OW 86
// enable ( 400 ) ;
5370: LD_INT 400
5372: ENABLE_MARKED
// end else
5373: GO 5429
// begin ResetFog ;
5375: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5379: LD_EXP 26
5383: PUSH
5384: LD_EXP 18
5388: PUSH
5389: LD_OWVAR 2
5393: ARRAY
5394: ARRAY
5395: PUSH
5396: LD_INT 1
5398: ARRAY
5399: PPUSH
5400: LD_EXP 26
5404: PUSH
5405: LD_EXP 18
5409: PUSH
5410: LD_OWVAR 2
5414: ARRAY
5415: ARRAY
5416: PUSH
5417: LD_INT 2
5419: ARRAY
5420: PPUSH
5421: CALL_OW 86
// Init_Win_Condition ;
5425: CALL 5166 0 0
// end ; end ; end_of_file
5429: END
// var shipment , tictac ; export function init_shipments ; begin
5430: LD_INT 0
5432: PPUSH
// shipment := Rand ( 0 , 1 ) ;
5433: LD_ADDR_LOC 9
5437: PUSH
5438: LD_INT 0
5440: PPUSH
5441: LD_INT 1
5443: PPUSH
5444: CALL_OW 12
5448: ST_TO_ADDR
// tictac := 0 ;
5449: LD_ADDR_LOC 10
5453: PUSH
5454: LD_INT 0
5456: ST_TO_ADDR
// end ;
5457: LD_VAR 0 1
5461: RET
// every 0 0$5 + 0 0$1.1 marked 55 do var d ;
5462: GO 5464
5464: DISABLE
5465: LD_INT 0
5467: PPUSH
// begin case tick of 1 .. 1 1$0 :
5468: LD_OWVAR 1
5472: PUSH
5473: LD_INT 1
5475: DOUBLE
5476: GREATEREQUAL
5477: IFFALSE 5485
5479: LD_INT 2100
5481: DOUBLE
5482: LESSEQUAL
5483: IFTRUE 5487
5485: GO 5498
5487: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5488: LD_ADDR_VAR 0 1
5492: PUSH
5493: LD_INT 150
5495: ST_TO_ADDR
5496: GO 5681
5498: LD_INT 2100
5500: PUSH
5501: LD_INT 1
5503: PLUS
5504: DOUBLE
5505: GREATEREQUAL
5506: IFFALSE 5514
5508: LD_INT 10500
5510: DOUBLE
5511: LESSEQUAL
5512: IFTRUE 5516
5514: GO 5527
5516: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5517: LD_ADDR_VAR 0 1
5521: PUSH
5522: LD_INT 100
5524: ST_TO_ADDR
5525: GO 5681
5527: LD_INT 10500
5529: PUSH
5530: LD_INT 1
5532: PLUS
5533: DOUBLE
5534: GREATEREQUAL
5535: IFFALSE 5543
5537: LD_INT 21000
5539: DOUBLE
5540: LESSEQUAL
5541: IFTRUE 5545
5543: GO 5556
5545: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5546: LD_ADDR_VAR 0 1
5550: PUSH
5551: LD_INT 90
5553: ST_TO_ADDR
5554: GO 5681
5556: LD_INT 21000
5558: PUSH
5559: LD_INT 1
5561: PLUS
5562: DOUBLE
5563: GREATEREQUAL
5564: IFFALSE 5572
5566: LD_INT 42000
5568: DOUBLE
5569: LESSEQUAL
5570: IFTRUE 5574
5572: GO 5585
5574: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5575: LD_ADDR_VAR 0 1
5579: PUSH
5580: LD_INT 70
5582: ST_TO_ADDR
5583: GO 5681
5585: LD_INT 42000
5587: PUSH
5588: LD_INT 1
5590: PLUS
5591: DOUBLE
5592: GREATEREQUAL
5593: IFFALSE 5601
5595: LD_INT 63000
5597: DOUBLE
5598: LESSEQUAL
5599: IFTRUE 5603
5601: GO 5614
5603: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5604: LD_ADDR_VAR 0 1
5608: PUSH
5609: LD_INT 60
5611: ST_TO_ADDR
5612: GO 5681
5614: LD_INT 63000
5616: PUSH
5617: LD_INT 1
5619: PLUS
5620: DOUBLE
5621: GREATEREQUAL
5622: IFFALSE 5630
5624: LD_INT 105000
5626: DOUBLE
5627: LESSEQUAL
5628: IFTRUE 5632
5630: GO 5643
5632: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5633: LD_ADDR_VAR 0 1
5637: PUSH
5638: LD_INT 35
5640: ST_TO_ADDR
5641: GO 5681
5643: LD_INT 105000
5645: PUSH
5646: LD_INT 1
5648: PLUS
5649: DOUBLE
5650: GREATEREQUAL
5651: IFFALSE 5659
5653: LD_INT 630000
5655: DOUBLE
5656: LESSEQUAL
5657: IFTRUE 5661
5659: GO 5672
5661: POP
// d := 20 ; else
5662: LD_ADDR_VAR 0 1
5666: PUSH
5667: LD_INT 20
5669: ST_TO_ADDR
5670: GO 5681
5672: POP
// d := 0 ; end ;
5673: LD_ADDR_VAR 0 1
5677: PUSH
5678: LD_INT 0
5680: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5681: LD_INT 1
5683: PPUSH
5684: LD_INT 10000
5686: PPUSH
5687: CALL_OW 12
5691: PUSH
5692: LD_VAR 0 1
5696: PUSH
5697: LD_EXP 10
5701: MUL
5702: LESSEQUAL
5703: IFFALSE 5757
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5705: LD_INT 1
5707: PPUSH
5708: LD_INT 140
5710: PPUSH
5711: CALL_OW 12
5715: PPUSH
5716: CALL_OW 67
// shipment := ( shipment + 1 ) mod 2 ;
5720: LD_ADDR_LOC 9
5724: PUSH
5725: LD_LOC 9
5729: PUSH
5730: LD_INT 1
5732: PLUS
5733: PUSH
5734: LD_INT 2
5736: MOD
5737: ST_TO_ADDR
// CreateCratesArea ( 5 , west_side + shipment , true ) ;
5738: LD_INT 5
5740: PPUSH
5741: LD_INT 8
5743: PUSH
5744: LD_LOC 9
5748: PLUS
5749: PPUSH
5750: LD_INT 1
5752: PPUSH
5753: CALL_OW 55
// end ; enable ;
5757: ENABLE
// end ;
5758: PPOPN 1
5760: END
// every 0 0$10 trigger TICK > ( ( 2 2$0 * tictac ) + tictac * ( 1 1$30 - shipments_density * ( 0 0$2 ) ) ) marked 55 do var i , amount , is_in ;
5761: LD_OWVAR 1
5765: PUSH
5766: LD_INT 4200
5768: PUSH
5769: LD_LOC 10
5773: MUL
5774: PUSH
5775: LD_LOC 10
5779: PUSH
5780: LD_INT 3150
5782: PUSH
5783: LD_EXP 10
5787: PUSH
5788: LD_INT 70
5790: MUL
5791: MINUS
5792: MUL
5793: PLUS
5794: GREATER
5795: IFFALSE 5931
5797: GO 5799
5799: DISABLE
5800: LD_INT 0
5802: PPUSH
5803: PPUSH
5804: PPUSH
// begin tictac := tictac + 1 ;
5805: LD_ADDR_LOC 10
5809: PUSH
5810: LD_LOC 10
5814: PUSH
5815: LD_INT 1
5817: PLUS
5818: ST_TO_ADDR
// amount := Rand ( 3 , 5 ) ;
5819: LD_ADDR_VAR 0 2
5823: PUSH
5824: LD_INT 3
5826: PPUSH
5827: LD_INT 5
5829: PPUSH
5830: CALL_OW 12
5834: ST_TO_ADDR
// for i = 0 to 3 do
5835: LD_ADDR_VAR 0 1
5839: PUSH
5840: DOUBLE
5841: LD_INT 0
5843: DEC
5844: ST_TO_ADDR
5845: LD_INT 3
5847: PUSH
5848: FOR_TO
5849: IFFALSE 5928
// begin is_in := GetResourceArea ( west_side + i , mat_cans ) ;
5851: LD_ADDR_VAR 0 3
5855: PUSH
5856: LD_INT 8
5858: PUSH
5859: LD_VAR 0 1
5863: PLUS
5864: PPUSH
5865: LD_INT 1
5867: PPUSH
5868: CALL_OW 287
5872: ST_TO_ADDR
// if ( is_in < 500 ) or ( Rand ( 1 , 10 ) > ( is_in div 100 ) ) then
5873: LD_VAR 0 3
5877: PUSH
5878: LD_INT 500
5880: LESS
5881: PUSH
5882: LD_INT 1
5884: PPUSH
5885: LD_INT 10
5887: PPUSH
5888: CALL_OW 12
5892: PUSH
5893: LD_VAR 0 3
5897: PUSH
5898: LD_INT 100
5900: DIV
5901: GREATER
5902: OR
5903: IFFALSE 5926
// CreateCratesArea ( amount , nw + i , true ) ;
5905: LD_VAR 0 2
5909: PPUSH
5910: LD_INT 12
5912: PUSH
5913: LD_VAR 0 1
5917: PLUS
5918: PPUSH
5919: LD_INT 1
5921: PPUSH
5922: CALL_OW 55
// end ;
5926: GO 5848
5928: POP
5929: POP
// enable ;
5930: ENABLE
// end ; end_of_file
5931: PPOPN 3
5933: END
// var respawn_queue , nation_queue ; export function init_respawn ; begin
5934: LD_INT 0
5936: PPUSH
// if not def_people_respawning then
5937: LD_EXP 68
5941: NOT
5942: IFFALSE 5946
// exit ;
5944: GO 6049
// respawn_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5946: LD_ADDR_LOC 11
5950: PUSH
5951: LD_INT 0
5953: PUSH
5954: LD_INT 0
5956: PUSH
5957: LD_INT 0
5959: PUSH
5960: LD_INT 0
5962: PUSH
5963: LD_INT 0
5965: PUSH
5966: LD_INT 0
5968: PUSH
5969: LD_INT 0
5971: PUSH
5972: LD_INT 0
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: ST_TO_ADDR
// nation_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5985: LD_ADDR_LOC 12
5989: PUSH
5990: LD_INT 0
5992: PUSH
5993: LD_INT 0
5995: PUSH
5996: LD_INT 0
5998: PUSH
5999: LD_INT 0
6001: PUSH
6002: LD_INT 0
6004: PUSH
6005: LD_INT 0
6007: PUSH
6008: LD_INT 0
6010: PUSH
6011: LD_INT 0
6013: PUSH
6014: EMPTY
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: ST_TO_ADDR
// if Game_Type in [ 2 , 12 ] then
6024: LD_EXP 56
6028: PUSH
6029: LD_INT 2
6031: PUSH
6032: LD_INT 12
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: IN
6039: IFFALSE 6046
// enable ( 41 ) else
6041: LD_INT 41
6043: ENABLE_MARKED
6044: GO 6049
// enable ( 40 ) ;
6046: LD_INT 40
6048: ENABLE_MARKED
// end ;
6049: LD_VAR 0 1
6053: RET
// every 0 0$10 marked 40 do var list , time , side ;
6054: GO 6056
6056: DISABLE
6057: LD_INT 0
6059: PPUSH
6060: PPUSH
6061: PPUSH
// begin for side = 1 to Side_Positions do
6062: LD_ADDR_VAR 0 3
6066: PUSH
6067: DOUBLE
6068: LD_INT 1
6070: DEC
6071: ST_TO_ADDR
6072: LD_EXP 18
6076: PUSH
6077: FOR_TO
6078: IFFALSE 6255
// if Side_Positions [ side ] then
6080: LD_EXP 18
6084: PUSH
6085: LD_VAR 0 3
6089: ARRAY
6090: IFFALSE 6253
// begin list := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6092: LD_ADDR_VAR 0 1
6096: PUSH
6097: LD_INT 22
6099: PUSH
6100: LD_VAR 0 3
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: PUSH
6109: LD_INT 21
6111: PUSH
6112: LD_INT 1
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: PUSH
6119: LD_INT 3
6121: PUSH
6122: LD_INT 23
6124: PUSH
6125: LD_INT 0
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: PUSH
6132: EMPTY
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: PPUSH
6138: CALL_OW 69
6142: ST_TO_ADDR
// if ( list < number_of_people ) and ( not respawn_queue [ side ] ) then
6143: LD_VAR 0 1
6147: PUSH
6148: LD_EXP 6
6152: LESS
6153: PUSH
6154: LD_LOC 11
6158: PUSH
6159: LD_VAR 0 3
6163: ARRAY
6164: NOT
6165: AND
6166: IFFALSE 6193
// respawn_queue := Replace ( respawn_queue , side , TICK ) ;
6168: LD_ADDR_LOC 11
6172: PUSH
6173: LD_LOC 11
6177: PPUSH
6178: LD_VAR 0 3
6182: PPUSH
6183: LD_OWVAR 1
6187: PPUSH
6188: CALL_OW 1
6192: ST_TO_ADDR
// time := TICK - respawn_queue [ side ] ;
6193: LD_ADDR_VAR 0 2
6197: PUSH
6198: LD_OWVAR 1
6202: PUSH
6203: LD_LOC 11
6207: PUSH
6208: LD_VAR 0 3
6212: ARRAY
6213: MINUS
6214: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6215: LD_LOC 11
6219: PUSH
6220: LD_VAR 0 3
6224: ARRAY
6225: PUSH
6226: LD_VAR 0 2
6230: PUSH
6231: LD_EXP 13
6235: GREATER
6236: AND
6237: IFFALSE 6253
// respawn_character ( side , time ) ;
6239: LD_VAR 0 3
6243: PPUSH
6244: LD_VAR 0 2
6248: PPUSH
6249: CALL 6261 0 2
// end ;
6253: GO 6077
6255: POP
6256: POP
// enable ;
6257: ENABLE
// end ;
6258: PPOPN 3
6260: END
// function respawn_character ( side , time ) ; var dep ; begin
6261: LD_INT 0
6263: PPUSH
6264: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6265: LD_INT 0
6267: PPUSH
6268: LD_INT 1
6270: PPUSH
6271: CALL_OW 12
6275: PUSH
6276: LD_VAR 0 2
6280: PUSH
6281: LD_EXP 14
6285: LESS
6286: AND
6287: IFFALSE 6291
// exit ;
6289: GO 6498
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6291: LD_ADDR_VAR 0 4
6295: PUSH
6296: LD_INT 22
6298: PUSH
6299: LD_VAR 0 1
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: PUSH
6308: LD_INT 2
6310: PUSH
6311: LD_INT 30
6313: PUSH
6314: LD_INT 0
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: PUSH
6321: LD_INT 30
6323: PUSH
6324: LD_INT 1
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: LIST
6335: PUSH
6336: LD_INT 50
6338: PUSH
6339: EMPTY
6340: LIST
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: LIST
6346: PPUSH
6347: CALL_OW 69
6351: ST_TO_ADDR
// if not dep then
6352: LD_VAR 0 4
6356: NOT
6357: IFFALSE 6363
// exit else
6359: GO 6498
6361: GO 6387
// dep := dep [ Rand ( 1 , dep ) ] ;
6363: LD_ADDR_VAR 0 4
6367: PUSH
6368: LD_VAR 0 4
6372: PUSH
6373: LD_INT 1
6375: PPUSH
6376: LD_VAR 0 4
6380: PPUSH
6381: CALL_OW 12
6385: ARRAY
6386: ST_TO_ADDR
// uc_side := side ;
6387: LD_ADDR_OWVAR 20
6391: PUSH
6392: LD_VAR 0 1
6396: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6397: LD_ADDR_OWVAR 21
6401: PUSH
6402: LD_EXP 19
6406: PUSH
6407: LD_VAR 0 1
6411: ARRAY
6412: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6413: LD_INT 0
6415: PPUSH
6416: LD_INT 0
6418: PPUSH
6419: LD_EXP 7
6423: PUSH
6424: LD_INT 2
6426: DIV
6427: PPUSH
6428: CALL_OW 380
// hc_importance := 0 ;
6432: LD_ADDR_OWVAR 32
6436: PUSH
6437: LD_INT 0
6439: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
6440: CALL_OW 44
6444: PPUSH
6445: LD_VAR 0 4
6449: PPUSH
6450: CALL_OW 250
6454: PPUSH
6455: LD_VAR 0 4
6459: PPUSH
6460: CALL_OW 251
6464: PPUSH
6465: LD_INT 10
6467: PPUSH
6468: LD_INT 1
6470: PPUSH
6471: CALL_OW 50
// respawn_queue := Replace ( respawn_queue , side , 0 ) ;
6475: LD_ADDR_LOC 11
6479: PUSH
6480: LD_LOC 11
6484: PPUSH
6485: LD_VAR 0 1
6489: PPUSH
6490: LD_INT 0
6492: PPUSH
6493: CALL_OW 1
6497: ST_TO_ADDR
// end ;
6498: LD_VAR 0 3
6502: RET
// every 0 0$10 marked 41 do var i , list , time , nation , side , limit ;
6503: GO 6505
6505: DISABLE
6506: LD_INT 0
6508: PPUSH
6509: PPUSH
6510: PPUSH
6511: PPUSH
6512: PPUSH
6513: PPUSH
// begin if Game_Type = 12 then
6514: LD_EXP 56
6518: PUSH
6519: LD_INT 12
6521: EQUAL
6522: IFFALSE 6536
// limit := number_of_people else
6524: LD_ADDR_VAR 0 6
6528: PUSH
6529: LD_EXP 6
6533: ST_TO_ADDR
6534: GO 6550
// limit := 2 * number_of_people ;
6536: LD_ADDR_VAR 0 6
6540: PUSH
6541: LD_INT 2
6543: PUSH
6544: LD_EXP 6
6548: MUL
6549: ST_TO_ADDR
// for i = 1 to 4 do
6550: LD_ADDR_VAR 0 1
6554: PUSH
6555: DOUBLE
6556: LD_INT 1
6558: DEC
6559: ST_TO_ADDR
6560: LD_INT 4
6562: PUSH
6563: FOR_TO
6564: IFFALSE 6856
// begin side := GetSidePositions ( [ 1 , 1 , 3 , 3 ] [ i ] ) ;
6566: LD_ADDR_VAR 0 5
6570: PUSH
6571: LD_INT 1
6573: PUSH
6574: LD_INT 1
6576: PUSH
6577: LD_INT 3
6579: PUSH
6580: LD_INT 3
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: PUSH
6589: LD_VAR 0 1
6593: ARRAY
6594: PPUSH
6595: CALL 7198 0 1
6599: ST_TO_ADDR
// if Game_Type = 12 then
6600: LD_EXP 56
6604: PUSH
6605: LD_INT 12
6607: EQUAL
6608: IFFALSE 6628
// nation := Position_Nations [ i ] else
6610: LD_ADDR_VAR 0 4
6614: PUSH
6615: LD_EXP 21
6619: PUSH
6620: LD_VAR 0 1
6624: ARRAY
6625: ST_TO_ADDR
6626: GO 6644
// nation := Side_Nations [ side ] ;
6628: LD_ADDR_VAR 0 4
6632: PUSH
6633: LD_EXP 19
6637: PUSH
6638: LD_VAR 0 5
6642: ARRAY
6643: ST_TO_ADDR
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_nation , nation ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6644: LD_ADDR_VAR 0 2
6648: PUSH
6649: LD_INT 22
6651: PUSH
6652: LD_VAR 0 5
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: PUSH
6661: LD_INT 23
6663: PUSH
6664: LD_VAR 0 4
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PUSH
6673: LD_INT 21
6675: PUSH
6676: LD_INT 1
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: PUSH
6683: LD_INT 3
6685: PUSH
6686: LD_INT 23
6688: PUSH
6689: LD_INT 0
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: PPUSH
6703: CALL_OW 69
6707: ST_TO_ADDR
// if ( list < limit ) and ( not respawn_queue [ side ] ) then
6708: LD_VAR 0 2
6712: PUSH
6713: LD_VAR 0 6
6717: LESS
6718: PUSH
6719: LD_LOC 11
6723: PUSH
6724: LD_VAR 0 5
6728: ARRAY
6729: NOT
6730: AND
6731: IFFALSE 6783
// begin respawn_queue = Replace ( respawn_queue , side , TICK ) ;
6733: LD_ADDR_LOC 11
6737: PUSH
6738: LD_LOC 11
6742: PPUSH
6743: LD_VAR 0 5
6747: PPUSH
6748: LD_OWVAR 1
6752: PPUSH
6753: CALL_OW 1
6757: ST_TO_ADDR
// nation_queue = Replace ( nation_queue , side , nation ) ;
6758: LD_ADDR_LOC 12
6762: PUSH
6763: LD_LOC 12
6767: PPUSH
6768: LD_VAR 0 5
6772: PPUSH
6773: LD_VAR 0 4
6777: PPUSH
6778: CALL_OW 1
6782: ST_TO_ADDR
// end ; time := TICK - respawn_queue [ side ] ;
6783: LD_ADDR_VAR 0 3
6787: PUSH
6788: LD_OWVAR 1
6792: PUSH
6793: LD_LOC 11
6797: PUSH
6798: LD_VAR 0 5
6802: ARRAY
6803: MINUS
6804: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6805: LD_LOC 11
6809: PUSH
6810: LD_VAR 0 5
6814: ARRAY
6815: PUSH
6816: LD_VAR 0 3
6820: PUSH
6821: LD_EXP 13
6825: GREATER
6826: AND
6827: IFFALSE 6854
// respawn_character_nation ( side , time , nation_queue [ side ] ) ;
6829: LD_VAR 0 5
6833: PPUSH
6834: LD_VAR 0 3
6838: PPUSH
6839: LD_LOC 12
6843: PUSH
6844: LD_VAR 0 5
6848: ARRAY
6849: PPUSH
6850: CALL 6862 0 3
// end ;
6854: GO 6563
6856: POP
6857: POP
// enable ;
6858: ENABLE
// end ;
6859: PPOPN 6
6861: END
// function respawn_character_nation ( side , time , nation ) ; var dep ; begin
6862: LD_INT 0
6864: PPUSH
6865: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6866: LD_INT 0
6868: PPUSH
6869: LD_INT 1
6871: PPUSH
6872: CALL_OW 12
6876: PUSH
6877: LD_VAR 0 2
6881: PUSH
6882: LD_EXP 14
6886: LESS
6887: AND
6888: IFFALSE 6892
// exit ;
6890: GO 7193
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_nation , nation ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6892: LD_ADDR_VAR 0 5
6896: PUSH
6897: LD_INT 22
6899: PUSH
6900: LD_VAR 0 1
6904: PUSH
6905: EMPTY
6906: LIST
6907: LIST
6908: PUSH
6909: LD_INT 23
6911: PUSH
6912: LD_VAR 0 3
6916: PUSH
6917: EMPTY
6918: LIST
6919: LIST
6920: PUSH
6921: LD_INT 2
6923: PUSH
6924: LD_INT 30
6926: PUSH
6927: LD_INT 0
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: PUSH
6934: LD_INT 30
6936: PUSH
6937: LD_INT 1
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: LIST
6948: PUSH
6949: LD_INT 50
6951: PUSH
6952: EMPTY
6953: LIST
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: PPUSH
6961: CALL_OW 69
6965: ST_TO_ADDR
// if not dep then
6966: LD_VAR 0 5
6970: NOT
6971: IFFALSE 7034
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6973: LD_ADDR_VAR 0 5
6977: PUSH
6978: LD_INT 22
6980: PUSH
6981: LD_VAR 0 1
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: LD_INT 2
6992: PUSH
6993: LD_INT 30
6995: PUSH
6996: LD_INT 0
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: LD_INT 30
7005: PUSH
7006: LD_INT 1
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: LIST
7017: PUSH
7018: LD_INT 50
7020: PUSH
7021: EMPTY
7022: LIST
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: LIST
7028: PPUSH
7029: CALL_OW 69
7033: ST_TO_ADDR
// if not dep then
7034: LD_VAR 0 5
7038: NOT
7039: IFFALSE 7045
// exit else
7041: GO 7193
7043: GO 7069
// dep := dep [ Rand ( 1 , dep ) ] ;
7045: LD_ADDR_VAR 0 5
7049: PUSH
7050: LD_VAR 0 5
7054: PUSH
7055: LD_INT 1
7057: PPUSH
7058: LD_VAR 0 5
7062: PPUSH
7063: CALL_OW 12
7067: ARRAY
7068: ST_TO_ADDR
// uc_side := side ;
7069: LD_ADDR_OWVAR 20
7073: PUSH
7074: LD_VAR 0 1
7078: ST_TO_ADDR
// uc_nation := nation ;
7079: LD_ADDR_OWVAR 21
7083: PUSH
7084: LD_VAR 0 3
7088: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level ) ;
7089: LD_INT 0
7091: PPUSH
7092: LD_INT 0
7094: PPUSH
7095: LD_EXP 7
7099: PPUSH
7100: CALL_OW 380
// hc_importance := 0 ;
7104: LD_ADDR_OWVAR 32
7108: PUSH
7109: LD_INT 0
7111: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
7112: CALL_OW 44
7116: PPUSH
7117: LD_VAR 0 5
7121: PPUSH
7122: CALL_OW 250
7126: PPUSH
7127: LD_VAR 0 5
7131: PPUSH
7132: CALL_OW 251
7136: PPUSH
7137: LD_INT 10
7139: PPUSH
7140: LD_INT 1
7142: PPUSH
7143: CALL_OW 50
// respawn_queue := Replace ( respawn_queue , side , 0 ) ;
7147: LD_ADDR_LOC 11
7151: PUSH
7152: LD_LOC 11
7156: PPUSH
7157: LD_VAR 0 1
7161: PPUSH
7162: LD_INT 0
7164: PPUSH
7165: CALL_OW 1
7169: ST_TO_ADDR
// nation_queue := Replace ( nation_queue , side , 0 ) ;
7170: LD_ADDR_LOC 12
7174: PUSH
7175: LD_LOC 12
7179: PPUSH
7180: LD_VAR 0 1
7184: PPUSH
7185: LD_INT 0
7187: PPUSH
7188: CALL_OW 1
7192: ST_TO_ADDR
// end ;
7193: LD_VAR 0 4
7197: RET
// function GetSidePositions ( i ) ; var un , side ; begin
7198: LD_INT 0
7200: PPUSH
7201: PPUSH
7202: PPUSH
// side := false ;
7203: LD_ADDR_VAR 0 4
7207: PUSH
7208: LD_INT 0
7210: ST_TO_ADDR
// for un = 1 to Side_Positions do
7211: LD_ADDR_VAR 0 3
7215: PUSH
7216: DOUBLE
7217: LD_INT 1
7219: DEC
7220: ST_TO_ADDR
7221: LD_EXP 18
7225: PUSH
7226: FOR_TO
7227: IFFALSE 7261
// if Side_Positions [ un ] = i then
7229: LD_EXP 18
7233: PUSH
7234: LD_VAR 0 3
7238: ARRAY
7239: PUSH
7240: LD_VAR 0 1
7244: EQUAL
7245: IFFALSE 7259
// begin side := un ;
7247: LD_ADDR_VAR 0 4
7251: PUSH
7252: LD_VAR 0 3
7256: ST_TO_ADDR
// break ;
7257: GO 7261
// end ;
7259: GO 7226
7261: POP
7262: POP
// result := side ;
7263: LD_ADDR_VAR 0 2
7267: PUSH
7268: LD_VAR 0 4
7272: ST_TO_ADDR
// end ; end_of_file
7273: LD_VAR 0 2
7277: RET
// every 20 20$00 trigger apemanNumber do
7278: LD_EXP 30
7282: IFFALSE 7315
7284: GO 7286
7286: DISABLE
// begin enable ;
7287: ENABLE
// if apeLevel >= 8 then
7288: LD_EXP 35
7292: PUSH
7293: LD_INT 8
7295: GREATEREQUAL
7296: IFFALSE 7301
// disable else
7298: DISABLE
7299: GO 7315
// apeLevel := apeLevel + 1 ;
7301: LD_ADDR_EXP 35
7305: PUSH
7306: LD_EXP 35
7310: PUSH
7311: LD_INT 1
7313: PLUS
7314: ST_TO_ADDR
// end ;
7315: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
7316: LD_EXP 30
7320: PUSH
7321: LD_EXP 31
7325: LESS
7326: IFFALSE 7466
7328: GO 7330
7330: DISABLE
7331: LD_INT 0
7333: PPUSH
7334: PPUSH
7335: PPUSH
7336: PPUSH
// begin enable ;
7337: ENABLE
// for i := 1 to apemanPos do
7338: LD_ADDR_VAR 0 1
7342: PUSH
7343: DOUBLE
7344: LD_INT 1
7346: DEC
7347: ST_TO_ADDR
7348: LD_EXP 33
7352: PUSH
7353: FOR_TO
7354: IFFALSE 7464
// begin if apemanPlayerCount [ i ] then
7356: LD_EXP 34
7360: PUSH
7361: LD_VAR 0 1
7365: ARRAY
7366: IFFALSE 7462
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
7368: LD_EXP 34
7372: PUSH
7373: LD_VAR 0 1
7377: ARRAY
7378: PUSH
7379: LD_EXP 33
7383: PUSH
7384: LD_VAR 0 1
7388: ARRAY
7389: GREATER
7390: IFFALSE 7462
// begin ape := PrepareApeman ;
7392: LD_ADDR_VAR 0 2
7396: PUSH
7397: CALL 7969 0 0
7401: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
7402: LD_VAR 0 2
7406: PPUSH
7407: LD_EXP 36
7411: PUSH
7412: LD_VAR 0 1
7416: ARRAY
7417: PPUSH
7418: LD_INT 0
7420: PPUSH
7421: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
7425: LD_ADDR_EXP 33
7429: PUSH
7430: LD_EXP 33
7434: PPUSH
7435: LD_VAR 0 1
7439: PPUSH
7440: LD_EXP 33
7444: PUSH
7445: LD_VAR 0 1
7449: ARRAY
7450: PUSH
7451: LD_VAR 0 2
7455: UNION
7456: PPUSH
7457: CALL_OW 1
7461: ST_TO_ADDR
// end ; end ; end ;
7462: GO 7353
7464: POP
7465: POP
// end ;
7466: PPOPN 4
7468: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
7469: LD_INT 0
7471: PPUSH
7472: PPUSH
7473: PPUSH
7474: PPUSH
7475: PPUSH
7476: PPUSH
7477: PPUSH
// playersAmount := 0 ;
7478: LD_ADDR_VAR 0 3
7482: PUSH
7483: LD_INT 0
7485: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base2ApeArea , Base1ApeArea ] ;
7486: LD_ADDR_VAR 0 7
7490: PUSH
7491: LD_INT 18
7493: PUSH
7494: LD_INT 19
7496: PUSH
7497: LD_INT 19
7499: PUSH
7500: LD_INT 18
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7509: LD_ADDR_EXP 36
7513: PUSH
7514: LD_INT 0
7516: PUSH
7517: LD_INT 0
7519: PUSH
7520: LD_INT 0
7522: PUSH
7523: LD_INT 0
7525: PUSH
7526: LD_INT 0
7528: PUSH
7529: LD_INT 0
7531: PUSH
7532: LD_INT 0
7534: PUSH
7535: LD_INT 0
7537: PUSH
7538: EMPTY
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: ST_TO_ADDR
// for j = 1 to Side_Positions do
7548: LD_ADDR_VAR 0 4
7552: PUSH
7553: DOUBLE
7554: LD_INT 1
7556: DEC
7557: ST_TO_ADDR
7558: LD_EXP 18
7562: PUSH
7563: FOR_TO
7564: IFFALSE 7631
// if Side_Positions [ j ] then
7566: LD_EXP 18
7570: PUSH
7571: LD_VAR 0 4
7575: ARRAY
7576: IFFALSE 7629
// begin playersAmount := playersAmount + 1 ;
7578: LD_ADDR_VAR 0 3
7582: PUSH
7583: LD_VAR 0 3
7587: PUSH
7588: LD_INT 1
7590: PLUS
7591: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
7592: LD_ADDR_EXP 36
7596: PUSH
7597: LD_EXP 36
7601: PPUSH
7602: LD_VAR 0 4
7606: PPUSH
7607: LD_VAR 0 7
7611: PUSH
7612: LD_EXP 18
7616: PUSH
7617: LD_VAR 0 4
7621: ARRAY
7622: ARRAY
7623: PPUSH
7624: CALL_OW 1
7628: ST_TO_ADDR
// end ;
7629: GO 7563
7631: POP
7632: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
7633: LD_ADDR_EXP 32
7637: PUSH
7638: LD_INT 3
7640: PUSH
7641: LD_EXP 12
7645: MUL
7646: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
7647: LD_ADDR_EXP 30
7651: PUSH
7652: LD_VAR 0 3
7656: PUSH
7657: LD_EXP 32
7661: MUL
7662: ST_TO_ADDR
// apemanLimit := apemanNumber ;
7663: LD_ADDR_EXP 31
7667: PUSH
7668: LD_EXP 30
7672: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7673: LD_ADDR_EXP 33
7677: PUSH
7678: LD_INT 0
7680: PUSH
7681: LD_INT 0
7683: PUSH
7684: LD_INT 0
7686: PUSH
7687: LD_INT 0
7689: PUSH
7690: LD_INT 0
7692: PUSH
7693: LD_INT 0
7695: PUSH
7696: LD_INT 0
7698: PUSH
7699: LD_INT 0
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7712: LD_ADDR_EXP 34
7716: PUSH
7717: LD_INT 0
7719: PUSH
7720: LD_INT 0
7722: PUSH
7723: LD_INT 0
7725: PUSH
7726: LD_INT 0
7728: PUSH
7729: LD_INT 0
7731: PUSH
7732: LD_INT 0
7734: PUSH
7735: LD_INT 0
7737: PUSH
7738: LD_INT 0
7740: PUSH
7741: EMPTY
7742: LIST
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: ST_TO_ADDR
// apeLevel := 1 ;
7751: LD_ADDR_EXP 35
7755: PUSH
7756: LD_INT 1
7758: ST_TO_ADDR
// if not apemanNumber then
7759: LD_EXP 30
7763: NOT
7764: IFFALSE 7768
// exit ;
7766: GO 7964
// for i := 1 to apemanPerPlayer do
7768: LD_ADDR_VAR 0 2
7772: PUSH
7773: DOUBLE
7774: LD_INT 1
7776: DEC
7777: ST_TO_ADDR
7778: LD_EXP 32
7782: PUSH
7783: FOR_TO
7784: IFFALSE 7962
// begin for j := 1 to Side_Positions do
7786: LD_ADDR_VAR 0 4
7790: PUSH
7791: DOUBLE
7792: LD_INT 1
7794: DEC
7795: ST_TO_ADDR
7796: LD_EXP 18
7800: PUSH
7801: FOR_TO
7802: IFFALSE 7958
// if Side_Positions [ j ] then
7804: LD_EXP 18
7808: PUSH
7809: LD_VAR 0 4
7813: ARRAY
7814: IFFALSE 7956
// begin pos := Side_Positions [ j ] ;
7816: LD_ADDR_VAR 0 6
7820: PUSH
7821: LD_EXP 18
7825: PUSH
7826: LD_VAR 0 4
7830: ARRAY
7831: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
7832: LD_ADDR_EXP 34
7836: PUSH
7837: LD_EXP 34
7841: PPUSH
7842: LD_VAR 0 4
7846: PPUSH
7847: LD_EXP 34
7851: PUSH
7852: LD_VAR 0 4
7856: ARRAY
7857: PUSH
7858: LD_INT 1
7860: PLUS
7861: PPUSH
7862: CALL_OW 1
7866: ST_TO_ADDR
// ape := PrepareApeman ;
7867: LD_ADDR_VAR 0 5
7871: PUSH
7872: CALL 7969 0 0
7876: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
7877: LD_ADDR_EXP 33
7881: PUSH
7882: LD_EXP 33
7886: PPUSH
7887: LD_VAR 0 4
7891: PPUSH
7892: LD_EXP 33
7896: PUSH
7897: LD_VAR 0 4
7901: ARRAY
7902: PPUSH
7903: LD_EXP 33
7907: PUSH
7908: LD_VAR 0 4
7912: ARRAY
7913: PUSH
7914: LD_INT 1
7916: PLUS
7917: PPUSH
7918: LD_VAR 0 5
7922: PPUSH
7923: CALL_OW 1
7927: PPUSH
7928: CALL_OW 1
7932: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
7933: LD_VAR 0 5
7937: PPUSH
7938: LD_EXP 36
7942: PUSH
7943: LD_VAR 0 4
7947: ARRAY
7948: PPUSH
7949: LD_INT 0
7951: PPUSH
7952: CALL_OW 49
// end ;
7956: GO 7801
7958: POP
7959: POP
// end ;
7960: GO 7783
7962: POP
7963: POP
// end ;
7964: LD_VAR 0 1
7968: RET
// export function PrepareApeman ; var bonus ; begin
7969: LD_INT 0
7971: PPUSH
7972: PPUSH
// uc_side := 0 ;
7973: LD_ADDR_OWVAR 20
7977: PUSH
7978: LD_INT 0
7980: ST_TO_ADDR
// uc_nation := 0 ;
7981: LD_ADDR_OWVAR 21
7985: PUSH
7986: LD_INT 0
7988: ST_TO_ADDR
// InitHc ;
7989: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
7993: LD_ADDR_VAR 0 2
7997: PUSH
7998: LD_INT 1
8000: NEG
8001: PUSH
8002: LD_INT 0
8004: PUSH
8005: LD_INT 1
8007: PUSH
8008: EMPTY
8009: LIST
8010: LIST
8011: LIST
8012: PUSH
8013: LD_OWVAR 1
8017: PUSH
8018: LD_INT 3
8020: MOD
8021: PUSH
8022: LD_INT 1
8024: PLUS
8025: ARRAY
8026: ST_TO_ADDR
// hc_class := class_apeman ;
8027: LD_ADDR_OWVAR 28
8031: PUSH
8032: LD_INT 12
8034: ST_TO_ADDR
// hc_gallery :=  ;
8035: LD_ADDR_OWVAR 33
8039: PUSH
8040: LD_STRING 
8042: ST_TO_ADDR
// hc_name :=  ;
8043: LD_ADDR_OWVAR 26
8047: PUSH
8048: LD_STRING 
8050: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
8051: LD_ADDR_OWVAR 31
8055: PUSH
8056: LD_EXP 35
8060: PUSH
8061: LD_VAR 0 2
8065: PLUS
8066: PUSH
8067: LD_EXP 35
8071: PUSH
8072: LD_VAR 0 2
8076: PLUS
8077: PUSH
8078: LD_EXP 35
8082: PUSH
8083: LD_VAR 0 2
8087: PLUS
8088: PUSH
8089: LD_EXP 35
8093: PUSH
8094: LD_VAR 0 2
8098: PLUS
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
8106: LD_ADDR_OWVAR 35
8110: PUSH
8111: LD_INT 10
8113: PUSH
8114: LD_VAR 0 2
8118: MUL
8119: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
8120: LD_ADDR_OWVAR 29
8124: PUSH
8125: LD_INT 12
8127: PUSH
8128: LD_INT 10
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: ST_TO_ADDR
// result := CreateHuman ;
8135: LD_ADDR_VAR 0 1
8139: PUSH
8140: CALL_OW 44
8144: ST_TO_ADDR
// end ;
8145: LD_VAR 0 1
8149: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
8150: LD_INT 0
8152: PPUSH
8153: PPUSH
8154: PPUSH
// if not ape then
8155: LD_VAR 0 1
8159: NOT
8160: IFFALSE 8164
// exit ;
8162: GO 8289
// side := GetSide ( ape ) ;
8164: LD_ADDR_VAR 0 3
8168: PUSH
8169: LD_VAR 0 1
8173: PPUSH
8174: CALL_OW 255
8178: ST_TO_ADDR
// if not side then
8179: LD_VAR 0 3
8183: NOT
8184: IFFALSE 8238
// begin for i = 1 to apemanPos do
8186: LD_ADDR_VAR 0 4
8190: PUSH
8191: DOUBLE
8192: LD_INT 1
8194: DEC
8195: ST_TO_ADDR
8196: LD_EXP 33
8200: PUSH
8201: FOR_TO
8202: IFFALSE 8236
// if ape in apemanPos [ i ] then
8204: LD_VAR 0 1
8208: PUSH
8209: LD_EXP 33
8213: PUSH
8214: LD_VAR 0 4
8218: ARRAY
8219: IN
8220: IFFALSE 8234
// begin side := i ;
8222: LD_ADDR_VAR 0 3
8226: PUSH
8227: LD_VAR 0 4
8231: ST_TO_ADDR
// break ;
8232: GO 8236
// end ;
8234: GO 8201
8236: POP
8237: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
8238: LD_ADDR_EXP 33
8242: PUSH
8243: LD_EXP 33
8247: PPUSH
8248: LD_VAR 0 3
8252: PPUSH
8253: LD_EXP 33
8257: PUSH
8258: LD_VAR 0 3
8262: ARRAY
8263: PUSH
8264: LD_VAR 0 1
8268: DIFF
8269: PPUSH
8270: CALL_OW 1
8274: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
8275: LD_ADDR_EXP 30
8279: PUSH
8280: LD_EXP 30
8284: PUSH
8285: LD_INT 1
8287: MINUS
8288: ST_TO_ADDR
// end ; end_of_file
8289: LD_VAR 0 2
8293: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
8294: LD_VAR 0 1
8298: PPUSH
8299: CALL_OW 266
8303: PUSH
8304: LD_INT 0
8306: PUSH
8307: LD_INT 1
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: IN
8314: IFFALSE 8339
// SetBName ( b , @ & GetSide ( b ) ) ;
8316: LD_VAR 0 1
8320: PPUSH
8321: LD_STRING @
8323: PUSH
8324: LD_VAR 0 1
8328: PPUSH
8329: CALL_OW 255
8333: STR
8334: PPUSH
8335: CALL_OW 500
// if def_game_rules then
8339: LD_EXP 57
8343: IFFALSE 8380
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
8345: LD_VAR 0 1
8349: PPUSH
8350: LD_VAR 0 1
8354: PPUSH
8355: CALL_OW 266
8359: PPUSH
8360: LD_VAR 0 1
8364: PPUSH
8365: CALL_OW 255
8369: PPUSH
8370: LD_INT 0
8372: PPUSH
8373: LD_INT 1
8375: PPUSH
8376: CALL 18456 0 5
// end ;
8380: PPOPN 2
8382: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
8383: LD_VAR 0 1
8387: PPUSH
8388: CALL_OW 266
8392: PUSH
8393: LD_INT 0
8395: PUSH
8396: LD_INT 1
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: IN
8403: IFFALSE 8428
// SetBName ( b , @ & GetSide ( b ) ) ;
8405: LD_VAR 0 1
8409: PPUSH
8410: LD_STRING @
8412: PUSH
8413: LD_VAR 0 1
8417: PPUSH
8418: CALL_OW 255
8422: STR
8423: PPUSH
8424: CALL_OW 500
// if def_game_rules then
8428: LD_EXP 57
8432: IFFALSE 8471
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
8434: LD_VAR 0 1
8438: PPUSH
8439: LD_VAR 0 1
8443: PPUSH
8444: CALL_OW 266
8448: PPUSH
8449: LD_VAR 0 1
8453: PPUSH
8454: CALL_OW 255
8458: PPUSH
8459: LD_VAR 0 2
8463: PPUSH
8464: LD_INT 1
8466: PPUSH
8467: CALL 18456 0 5
// end ;
8471: PPOPN 3
8473: END
// on VehicleConstructed ( veh , fac ) do var side ;
8474: LD_INT 0
8476: PPUSH
// begin if GetControl ( veh ) = control_apeman then
8477: LD_VAR 0 1
8481: PPUSH
8482: CALL_OW 263
8486: PUSH
8487: LD_INT 5
8489: EQUAL
8490: IFFALSE 8632
// begin side := GetSide ( veh ) ;
8492: LD_ADDR_VAR 0 3
8496: PUSH
8497: LD_VAR 0 1
8501: PPUSH
8502: CALL_OW 255
8506: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
8507: LD_ADDR_EXP 33
8511: PUSH
8512: LD_EXP 33
8516: PPUSH
8517: LD_VAR 0 3
8521: PPUSH
8522: LD_EXP 33
8526: PUSH
8527: LD_VAR 0 3
8531: ARRAY
8532: PPUSH
8533: LD_INT 52
8535: PUSH
8536: EMPTY
8537: LIST
8538: PPUSH
8539: CALL_OW 72
8543: PUSH
8544: LD_INT 22
8546: PUSH
8547: LD_VAR 0 3
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: PUSH
8556: LD_INT 2
8558: PUSH
8559: LD_INT 33
8561: PUSH
8562: LD_INT 5
8564: PUSH
8565: EMPTY
8566: LIST
8567: LIST
8568: PUSH
8569: LD_INT 25
8571: PUSH
8572: LD_INT 12
8574: PUSH
8575: EMPTY
8576: LIST
8577: LIST
8578: PUSH
8579: LD_INT 25
8581: PUSH
8582: LD_INT 15
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: PUSH
8589: LD_INT 25
8591: PUSH
8592: LD_INT 16
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: PUSH
8599: LD_INT 25
8601: PUSH
8602: LD_INT 17
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: PUSH
8617: EMPTY
8618: LIST
8619: LIST
8620: PPUSH
8621: CALL_OW 69
8625: UNION
8626: PPUSH
8627: CALL_OW 1
8631: ST_TO_ADDR
// end ; end ;
8632: PPOPN 3
8634: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
8635: LD_VAR 0 1
8639: PPUSH
8640: LD_VAR 0 2
8644: PPUSH
8645: LD_VAR 0 3
8649: PPUSH
8650: LD_OWVAR 2
8654: PPUSH
8655: CALL 19134 0 4
8659: PPOPN 3
8661: END
// export function DE_Triggers ; begin
8662: LD_INT 0
8664: PPUSH
// disable ( 01 ) ;
8665: LD_INT 1
8667: DISABLE_MARKED
// disable ( 02 ) ;
8668: LD_INT 2
8670: DISABLE_MARKED
// disable ( 03 ) ;
8671: LD_INT 3
8673: DISABLE_MARKED
// disable ( 04 ) ;
8674: LD_INT 4
8676: DISABLE_MARKED
// disable ( 05 ) ;
8677: LD_INT 5
8679: DISABLE_MARKED
// disable ( 06 ) ;
8680: LD_INT 6
8682: DISABLE_MARKED
// disable ( 07 ) ;
8683: LD_INT 7
8685: DISABLE_MARKED
// disable ( 10 ) ;
8686: LD_INT 10
8688: DISABLE_MARKED
// disable ( 11 ) ;
8689: LD_INT 11
8691: DISABLE_MARKED
// disable ( 12 ) ;
8692: LD_INT 12
8694: DISABLE_MARKED
// disable ( 13 ) ;
8695: LD_INT 13
8697: DISABLE_MARKED
// disable ( 19 ) ;
8698: LD_INT 19
8700: DISABLE_MARKED
// disable ( 40 ) ;
8701: LD_INT 40
8703: DISABLE_MARKED
// disable ( 41 ) ;
8704: LD_INT 41
8706: DISABLE_MARKED
// disable ( 98 ) ;
8707: LD_INT 98
8709: DISABLE_MARKED
// disable ( 99 ) ;
8710: LD_INT 99
8712: DISABLE_MARKED
// disable ( 55 ) ;
8713: LD_INT 55
8715: DISABLE_MARKED
// disable ( 400 ) ;
8716: LD_INT 400
8718: DISABLE_MARKED
// disable ( 401 ) ;
8719: LD_INT 401
8721: DISABLE_MARKED
// end ; end_of_file
8722: LD_VAR 0 1
8726: RET
// function CanWinLoose ; begin
8727: LD_INT 0
8729: PPUSH
// Result := true ;
8730: LD_ADDR_VAR 0 1
8734: PUSH
8735: LD_INT 1
8737: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8738: CALL_OW 518
8742: PUSH
8743: CALL_OW 519
8747: PUSH
8748: LD_INT 0
8750: GREATER
8751: AND
8752: IFFALSE 8762
// Result := false ;
8754: LD_ADDR_VAR 0 1
8758: PUSH
8759: LD_INT 0
8761: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8762: CALL_OW 531
8766: PUSH
8767: CALL_OW 519
8771: PUSH
8772: LD_INT 1
8774: GREATER
8775: AND
8776: IFFALSE 8786
// Result := false ;
8778: LD_ADDR_VAR 0 1
8782: PUSH
8783: LD_INT 0
8785: ST_TO_ADDR
// end ;
8786: LD_VAR 0 1
8790: RET
// function HasPower ( i ) ; begin
8791: LD_INT 0
8793: PPUSH
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8794: LD_ADDR_VAR 0 2
8798: PUSH
8799: LD_INT 22
8801: PUSH
8802: LD_VAR 0 1
8806: PUSH
8807: EMPTY
8808: LIST
8809: LIST
8810: PUSH
8811: LD_INT 2
8813: PUSH
8814: LD_INT 21
8816: PUSH
8817: LD_INT 1
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: PUSH
8824: LD_INT 30
8826: PUSH
8827: LD_INT 0
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: PUSH
8834: LD_INT 30
8836: PUSH
8837: LD_INT 1
8839: PUSH
8840: EMPTY
8841: LIST
8842: LIST
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: PUSH
8850: EMPTY
8851: LIST
8852: LIST
8853: PPUSH
8854: CALL_OW 69
8858: ST_TO_ADDR
// end ;
8859: LD_VAR 0 2
8863: RET
// function AlliedSides ( i , j ) ; begin
8864: LD_INT 0
8866: PPUSH
// Result := false ;
8867: LD_ADDR_VAR 0 3
8871: PUSH
8872: LD_INT 0
8874: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8875: LD_VAR 0 1
8879: PPUSH
8880: LD_VAR 0 2
8884: PPUSH
8885: CALL_OW 81
8889: PUSH
8890: LD_INT 1
8892: EQUAL
8893: PUSH
8894: LD_VAR 0 2
8898: PPUSH
8899: LD_VAR 0 1
8903: PPUSH
8904: CALL_OW 81
8908: PUSH
8909: LD_INT 1
8911: EQUAL
8912: AND
8913: PUSH
8914: LD_VAR 0 1
8918: PPUSH
8919: CALL_OW 83
8923: AND
8924: PUSH
8925: LD_VAR 0 2
8929: PPUSH
8930: CALL_OW 83
8934: AND
8935: IFFALSE 8945
// Result := true ;
8937: LD_ADDR_VAR 0 3
8941: PUSH
8942: LD_INT 1
8944: ST_TO_ADDR
// end ;
8945: LD_VAR 0 3
8949: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
8950: CALL 8727 0 0
8954: IFFALSE 8963
8956: GO 8958
8958: DISABLE
// YouLostInMultiplayer ;
8959: CALL_OW 107
8963: END
// every 0 0$3 trigger CanWinLoose marked 401 do
8964: CALL 8727 0 0
8968: IFFALSE 8992
8970: GO 8972
8972: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
8973: LD_EXP 19
8977: PUSH
8978: LD_OWVAR 2
8982: ARRAY
8983: PPUSH
8984: CALL 19176 0 1
// YouWinInMultiplayer ;
8988: CALL_OW 106
// end ;
8992: END
// every 0 0$3 marked 98 do var i , CanWin ;
8993: GO 8995
8995: DISABLE
8996: LD_INT 0
8998: PPUSH
8999: PPUSH
// begin if not HasPower ( your_side ) then
9000: LD_OWVAR 2
9004: PPUSH
9005: CALL 8791 0 1
9009: NOT
9010: IFFALSE 9021
// begin Multiplayer_Loose_Message ;
9012: CALL_OW 521
// enable ( 400 ) ;
9016: LD_INT 400
9018: ENABLE_MARKED
// end else
9019: GO 9154
// begin CanWin := true ;
9021: LD_ADDR_VAR 0 2
9025: PUSH
9026: LD_INT 1
9028: ST_TO_ADDR
// for i := 1 to 8 do
9029: LD_ADDR_VAR 0 1
9033: PUSH
9034: DOUBLE
9035: LD_INT 1
9037: DEC
9038: ST_TO_ADDR
9039: LD_INT 8
9041: PUSH
9042: FOR_TO
9043: IFFALSE 9140
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9045: LD_EXP 18
9049: PUSH
9050: LD_VAR 0 1
9054: ARRAY
9055: PUSH
9056: LD_VAR 0 1
9060: PPUSH
9061: CALL_OW 108
9065: AND
9066: PUSH
9067: LD_VAR 0 1
9071: PUSH
9072: LD_OWVAR 2
9076: NONEQUAL
9077: AND
9078: IFFALSE 9138
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
9080: LD_EXP 16
9084: PUSH
9085: LD_VAR 0 1
9089: ARRAY
9090: NOT
9091: PUSH
9092: LD_EXP 16
9096: PUSH
9097: LD_VAR 0 1
9101: ARRAY
9102: PUSH
9103: LD_EXP 16
9107: PUSH
9108: LD_OWVAR 2
9112: ARRAY
9113: NONEQUAL
9114: OR
9115: IFFALSE 9138
// if HasPower ( i ) then
9117: LD_VAR 0 1
9121: PPUSH
9122: CALL 8791 0 1
9126: IFFALSE 9138
// begin CanWin := false ;
9128: LD_ADDR_VAR 0 2
9132: PUSH
9133: LD_INT 0
9135: ST_TO_ADDR
// break ;
9136: GO 9140
// end ;
9138: GO 9042
9140: POP
9141: POP
// if CanWin then
9142: LD_VAR 0 2
9146: IFFALSE 9153
// enable ( 401 ) else
9148: LD_INT 401
9150: ENABLE_MARKED
9151: GO 9154
// enable ;
9153: ENABLE
// end ; end ;
9154: PPOPN 2
9156: END
// every 0 0$3 marked 99 do var i , CanWin ;
9157: GO 9159
9159: DISABLE
9160: LD_INT 0
9162: PPUSH
9163: PPUSH
// begin if not HasPower ( your_side ) then
9164: LD_OWVAR 2
9168: PPUSH
9169: CALL 8791 0 1
9173: NOT
9174: IFFALSE 9185
// begin Multiplayer_Loose_Message ;
9176: CALL_OW 521
// enable ( 400 ) ;
9180: LD_INT 400
9182: ENABLE_MARKED
// end else
9183: GO 9298
// begin CanWin := true ;
9185: LD_ADDR_VAR 0 2
9189: PUSH
9190: LD_INT 1
9192: ST_TO_ADDR
// for i := 1 to 8 do
9193: LD_ADDR_VAR 0 1
9197: PUSH
9198: DOUBLE
9199: LD_INT 1
9201: DEC
9202: ST_TO_ADDR
9203: LD_INT 8
9205: PUSH
9206: FOR_TO
9207: IFFALSE 9284
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9209: LD_EXP 18
9213: PUSH
9214: LD_VAR 0 1
9218: ARRAY
9219: PUSH
9220: LD_VAR 0 1
9224: PPUSH
9225: CALL_OW 108
9229: AND
9230: PUSH
9231: LD_VAR 0 1
9235: PUSH
9236: LD_OWVAR 2
9240: NONEQUAL
9241: AND
9242: IFFALSE 9282
// if not AlliedSides ( i , your_side ) then
9244: LD_VAR 0 1
9248: PPUSH
9249: LD_OWVAR 2
9253: PPUSH
9254: CALL 8864 0 2
9258: NOT
9259: IFFALSE 9282
// if HasPower ( i ) then
9261: LD_VAR 0 1
9265: PPUSH
9266: CALL 8791 0 1
9270: IFFALSE 9282
// begin CanWin := false ;
9272: LD_ADDR_VAR 0 2
9276: PUSH
9277: LD_INT 0
9279: ST_TO_ADDR
// break ;
9280: GO 9284
// end ;
9282: GO 9206
9284: POP
9285: POP
// if CanWin then
9286: LD_VAR 0 2
9290: IFFALSE 9297
// enable ( 401 ) else
9292: LD_INT 401
9294: ENABLE_MARKED
9295: GO 9298
// enable ;
9297: ENABLE
// end ; end ; end_of_file
9298: PPOPN 2
9300: END
// var time ; export lidi , krabice , opoce ; export cper , cperiode ; var depot1 , depot2 ; var vlajka1 , vlajka2 ; export depotpositions , areas ; var podvozky , zbrane ; export pos1side , pos2side ; var pos1base , pos2base ; var left_score , right_score ; export debug , ctf ; export mp_sides_teams_ , mp_sides_nations_ , mp_sides_positions_ , mp_sides_players_counts_ ; var cft_01 , cft_02 , cft_03 , cft_04 , cft_05 , cft_06 , cft_07 ; export nonctf_10 , nonctf_11 , nonctf_12 , nonctf_13 ; var stmp , stmp2 , cl ; export function starting_ctf ; begin
9301: LD_INT 0
9303: PPUSH
// cft_01 = 01 ;
9304: LD_ADDR_LOC 24
9308: PUSH
9309: LD_INT 1
9311: ST_TO_ADDR
// cft_02 = 02 ;
9312: LD_ADDR_LOC 25
9316: PUSH
9317: LD_INT 2
9319: ST_TO_ADDR
// cft_03 = 03 ;
9320: LD_ADDR_LOC 26
9324: PUSH
9325: LD_INT 3
9327: ST_TO_ADDR
// cft_04 = 04 ;
9328: LD_ADDR_LOC 27
9332: PUSH
9333: LD_INT 4
9335: ST_TO_ADDR
// cft_05 = 05 ;
9336: LD_ADDR_LOC 28
9340: PUSH
9341: LD_INT 5
9343: ST_TO_ADDR
// cft_06 = 06 ;
9344: LD_ADDR_LOC 29
9348: PUSH
9349: LD_INT 6
9351: ST_TO_ADDR
// cft_07 = 07 ;
9352: LD_ADDR_LOC 30
9356: PUSH
9357: LD_INT 7
9359: ST_TO_ADDR
// nonctf_10 = 10 ;
9360: LD_ADDR_EXP 52
9364: PUSH
9365: LD_INT 10
9367: ST_TO_ADDR
// nonctf_11 = 11 ;
9368: LD_ADDR_EXP 53
9372: PUSH
9373: LD_INT 11
9375: ST_TO_ADDR
// nonctf_12 = 12 ;
9376: LD_ADDR_EXP 54
9380: PUSH
9381: LD_INT 12
9383: ST_TO_ADDR
// nonctf_13 = 13 ;
9384: LD_ADDR_EXP 55
9388: PUSH
9389: LD_INT 13
9391: ST_TO_ADDR
// disable ( cft_01 ) ;
9392: LD_LOC 24
9396: DISABLE_MARKED
// disable ( cft_02 ) ;
9397: LD_LOC 25
9401: DISABLE_MARKED
// disable ( cft_03 ) ;
9402: LD_LOC 26
9406: DISABLE_MARKED
// disable ( cft_04 ) ;
9407: LD_LOC 27
9411: DISABLE_MARKED
// disable ( cft_05 ) ;
9412: LD_LOC 28
9416: DISABLE_MARKED
// disable ( cft_06 ) ;
9417: LD_LOC 29
9421: DISABLE_MARKED
// disable ( cft_07 ) ;
9422: LD_LOC 30
9426: DISABLE_MARKED
// disable ( nonctf_10 ) ;
9427: LD_EXP 52
9431: DISABLE_MARKED
// disable ( nonctf_11 ) ;
9432: LD_EXP 53
9436: DISABLE_MARKED
// disable ( nonctf_12 ) ;
9437: LD_EXP 54
9441: DISABLE_MARKED
// disable ( nonctf_13 ) ;
9442: LD_EXP 55
9446: DISABLE_MARKED
// debug = false ;
9447: LD_ADDR_EXP 46
9451: PUSH
9452: LD_INT 0
9454: ST_TO_ADDR
// if not multiplayer then
9455: LD_OWVAR 4
9459: NOT
9460: IFFALSE 9620
// begin mp_sides_teams_ = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9462: LD_ADDR_EXP 48
9466: PUSH
9467: LD_INT 0
9469: PUSH
9470: LD_INT 0
9472: PUSH
9473: LD_INT 0
9475: PUSH
9476: LD_INT 0
9478: PUSH
9479: LD_INT 0
9481: PUSH
9482: LD_INT 0
9484: PUSH
9485: LD_INT 0
9487: PUSH
9488: LD_INT 0
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: ST_TO_ADDR
// mp_sides_nations_ = [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9501: LD_ADDR_EXP 49
9505: PUSH
9506: LD_INT 1
9508: PUSH
9509: LD_INT 2
9511: PUSH
9512: LD_INT 0
9514: PUSH
9515: LD_INT 0
9517: PUSH
9518: LD_INT 0
9520: PUSH
9521: LD_INT 0
9523: PUSH
9524: LD_INT 0
9526: PUSH
9527: LD_INT 0
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: ST_TO_ADDR
// mp_sides_positions_ = [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9540: LD_ADDR_EXP 50
9544: PUSH
9545: LD_INT 1
9547: PUSH
9548: LD_INT 2
9550: PUSH
9551: LD_INT 0
9553: PUSH
9554: LD_INT 0
9556: PUSH
9557: LD_INT 0
9559: PUSH
9560: LD_INT 0
9562: PUSH
9563: LD_INT 0
9565: PUSH
9566: LD_INT 0
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: ST_TO_ADDR
// mp_sides_players_counts_ = [ 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9579: LD_ADDR_EXP 51
9583: PUSH
9584: LD_INT 1
9586: PUSH
9587: LD_INT 1
9589: PUSH
9590: LD_INT 0
9592: PUSH
9593: LD_INT 0
9595: PUSH
9596: LD_INT 0
9598: PUSH
9599: LD_INT 0
9601: PUSH
9602: LD_INT 0
9604: PUSH
9605: LD_INT 0
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: ST_TO_ADDR
// end else
9618: GO 9660
// begin mp_sides_teams_ = mp_sides_teams ;
9620: LD_ADDR_EXP 48
9624: PUSH
9625: LD_OWVAR 15
9629: ST_TO_ADDR
// mp_sides_nations_ = mp_sides_nations ;
9630: LD_ADDR_EXP 49
9634: PUSH
9635: LD_OWVAR 16
9639: ST_TO_ADDR
// mp_sides_positions_ = mp_sides_positions ;
9640: LD_ADDR_EXP 50
9644: PUSH
9645: LD_OWVAR 17
9649: ST_TO_ADDR
// mp_sides_players_counts_ = mp_sides_players_counts ;
9650: LD_ADDR_EXP 51
9654: PUSH
9655: LD_OWVAR 18
9659: ST_TO_ADDR
// end ; if debug then
9660: LD_EXP 46
9664: IFFALSE 9746
// begin debuglog ( [ side , your_side ] ) ;
9666: LD_STRING side
9668: PUSH
9669: LD_OWVAR 2
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: PPUSH
9678: CALL_OW 359
// debuglog ( [ teams , mp_sides_teams_ ] ) ;
9682: LD_STRING teams
9684: PUSH
9685: LD_EXP 48
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: PPUSH
9694: CALL_OW 359
// debuglog ( [ nations , mp_sides_nations_ ] ) ;
9698: LD_STRING nations
9700: PUSH
9701: LD_EXP 49
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: PPUSH
9710: CALL_OW 359
// debuglog ( [ positions , mp_sides_positions_ ] ) ;
9714: LD_STRING positions
9716: PUSH
9717: LD_EXP 50
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: PPUSH
9726: CALL_OW 359
// debuglog ( [ pl. counts , mp_sides_players_counts_ ] ) ;
9730: LD_STRING pl. counts
9732: PUSH
9733: LD_EXP 51
9737: PUSH
9738: EMPTY
9739: LIST
9740: LIST
9741: PPUSH
9742: CALL_OW 359
// end ; depotpositions = [ [ 34 , 60 , 1 ] , [ 185 , 60 , 4 ] ] ;
9746: LD_ADDR_EXP 42
9750: PUSH
9751: LD_INT 34
9753: PUSH
9754: LD_INT 60
9756: PUSH
9757: LD_INT 1
9759: PUSH
9760: EMPTY
9761: LIST
9762: LIST
9763: LIST
9764: PUSH
9765: LD_INT 185
9767: PUSH
9768: LD_INT 60
9770: PUSH
9771: LD_INT 4
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: LIST
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: ST_TO_ADDR
// areas = [ vlevo , vpravo ] ;
9783: LD_ADDR_EXP 43
9787: PUSH
9788: LD_INT 2
9790: PUSH
9791: LD_INT 3
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: ST_TO_ADDR
// if mp_game_type = 3 then
9798: LD_OWVAR 6
9802: PUSH
9803: LD_INT 3
9805: EQUAL
9806: IFFALSE 9814
// begin other_game ;
9808: CALL 12886 0 0
// exit ;
9812: GO 11262
// end ; ctf = true ;
9814: LD_ADDR_EXP 47
9818: PUSH
9819: LD_INT 1
9821: ST_TO_ADDR
// enable ( cft_01 ) ;
9822: LD_LOC 24
9826: ENABLE_MARKED
// enable ( cft_02 ) ;
9827: LD_LOC 25
9831: ENABLE_MARKED
// enable ( cft_05 ) ;
9832: LD_LOC 28
9836: ENABLE_MARKED
// enable ( cft_06 ) ;
9837: LD_LOC 29
9841: ENABLE_MARKED
// enable ( cft_07 ) ;
9842: LD_LOC 30
9846: ENABLE_MARKED
// podvozky = [ us_medium_wheeled , ar_medium_trike , ru_medium_wheeled ] ;
9847: LD_ADDR_LOC 18
9851: PUSH
9852: LD_INT 2
9854: PUSH
9855: LD_INT 13
9857: PUSH
9858: LD_INT 21
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: LIST
9865: ST_TO_ADDR
// zbrane = [ us_cargo_bay , ar_cargo_bay , ru_cargo_bay ] ;
9866: LD_ADDR_LOC 19
9870: PUSH
9871: LD_INT 12
9873: PUSH
9874: LD_INT 32
9876: PUSH
9877: LD_INT 51
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: LIST
9884: ST_TO_ADDR
// left_score = 0 ;
9885: LD_ADDR_LOC 22
9889: PUSH
9890: LD_INT 0
9892: ST_TO_ADDR
// right_score = 0 ;
9893: LD_ADDR_LOC 23
9897: PUSH
9898: LD_INT 0
9900: ST_TO_ADDR
// if multiplayer then
9901: LD_OWVAR 4
9905: IFFALSE 9961
// begin lidi = getmultiplayersetting ( 1 ) ;
9907: LD_ADDR_EXP 37
9911: PUSH
9912: LD_INT 1
9914: PPUSH
9915: CALL_OW 426
9919: ST_TO_ADDR
// krabice = getmultiplayersetting ( 2 ) ;
9920: LD_ADDR_EXP 38
9924: PUSH
9925: LD_INT 2
9927: PPUSH
9928: CALL_OW 426
9932: ST_TO_ADDR
// opoce = getmultiplayersetting ( 3 ) ;
9933: LD_ADDR_EXP 39
9937: PUSH
9938: LD_INT 3
9940: PPUSH
9941: CALL_OW 426
9945: ST_TO_ADDR
// time = getmultiplayersetting ( 4 ) ;
9946: LD_ADDR_LOC 13
9950: PUSH
9951: LD_INT 4
9953: PPUSH
9954: CALL_OW 426
9958: ST_TO_ADDR
// end else
9959: GO 9993
// begin lidi = 1 ;
9961: LD_ADDR_EXP 37
9965: PUSH
9966: LD_INT 1
9968: ST_TO_ADDR
// krabice = 1 ;
9969: LD_ADDR_EXP 38
9973: PUSH
9974: LD_INT 1
9976: ST_TO_ADDR
// opoce = 3 ;
9977: LD_ADDR_EXP 39
9981: PUSH
9982: LD_INT 3
9984: ST_TO_ADDR
// time = 2 ;
9985: LD_ADDR_LOC 13
9989: PUSH
9990: LD_INT 2
9992: ST_TO_ADDR
// end ; case lidi of 0 :
9993: LD_EXP 37
9997: PUSH
9998: LD_INT 0
10000: DOUBLE
10001: EQUAL
10002: IFTRUE 10006
10004: GO 10017
10006: POP
// lidi = 9 ; 1 :
10007: LD_ADDR_EXP 37
10011: PUSH
10012: LD_INT 9
10014: ST_TO_ADDR
10015: GO 10094
10017: LD_INT 1
10019: DOUBLE
10020: EQUAL
10021: IFTRUE 10025
10023: GO 10036
10025: POP
// lidi = 13 ; 2 :
10026: LD_ADDR_EXP 37
10030: PUSH
10031: LD_INT 13
10033: ST_TO_ADDR
10034: GO 10094
10036: LD_INT 2
10038: DOUBLE
10039: EQUAL
10040: IFTRUE 10044
10042: GO 10055
10044: POP
// lidi = 19 ; 3 :
10045: LD_ADDR_EXP 37
10049: PUSH
10050: LD_INT 19
10052: ST_TO_ADDR
10053: GO 10094
10055: LD_INT 3
10057: DOUBLE
10058: EQUAL
10059: IFTRUE 10063
10061: GO 10074
10063: POP
// lidi = 23 ; 4 :
10064: LD_ADDR_EXP 37
10068: PUSH
10069: LD_INT 23
10071: ST_TO_ADDR
10072: GO 10094
10074: LD_INT 4
10076: DOUBLE
10077: EQUAL
10078: IFTRUE 10082
10080: GO 10093
10082: POP
// lidi = 29 ; end ;
10083: LD_ADDR_EXP 37
10087: PUSH
10088: LD_INT 29
10090: ST_TO_ADDR
10091: GO 10094
10093: POP
// case krabice of 0 :
10094: LD_EXP 38
10098: PUSH
10099: LD_INT 0
10101: DOUBLE
10102: EQUAL
10103: IFTRUE 10107
10105: GO 10118
10107: POP
// cperiode = 1 1$30 ; 1 :
10108: LD_ADDR_EXP 41
10112: PUSH
10113: LD_INT 3150
10115: ST_TO_ADDR
10116: GO 10157
10118: LD_INT 1
10120: DOUBLE
10121: EQUAL
10122: IFTRUE 10126
10124: GO 10137
10126: POP
// cperiode = 1 1$00 ; 2 :
10127: LD_ADDR_EXP 41
10131: PUSH
10132: LD_INT 2100
10134: ST_TO_ADDR
10135: GO 10157
10137: LD_INT 2
10139: DOUBLE
10140: EQUAL
10141: IFTRUE 10145
10143: GO 10156
10145: POP
// cperiode = 0 0$30 ; end ;
10146: LD_ADDR_EXP 41
10150: PUSH
10151: LD_INT 1050
10153: ST_TO_ADDR
10154: GO 10157
10156: POP
// cper = 0 0$10 ;
10157: LD_ADDR_EXP 40
10161: PUSH
10162: LD_INT 350
10164: ST_TO_ADDR
// case opoce of 0 :
10165: LD_EXP 39
10169: PUSH
10170: LD_INT 0
10172: DOUBLE
10173: EQUAL
10174: IFTRUE 10178
10176: GO 10189
10178: POP
// opoce = 0 ; 1 :
10179: LD_ADDR_EXP 39
10183: PUSH
10184: LD_INT 0
10186: ST_TO_ADDR
10187: GO 10304
10189: LD_INT 1
10191: DOUBLE
10192: EQUAL
10193: IFTRUE 10197
10195: GO 10208
10197: POP
// opoce = 3 ; 2 :
10198: LD_ADDR_EXP 39
10202: PUSH
10203: LD_INT 3
10205: ST_TO_ADDR
10206: GO 10304
10208: LD_INT 2
10210: DOUBLE
10211: EQUAL
10212: IFTRUE 10216
10214: GO 10227
10216: POP
// opoce = 7 ; 3 :
10217: LD_ADDR_EXP 39
10221: PUSH
10222: LD_INT 7
10224: ST_TO_ADDR
10225: GO 10304
10227: LD_INT 3
10229: DOUBLE
10230: EQUAL
10231: IFTRUE 10235
10233: GO 10246
10235: POP
// opoce = 11 ; 4 :
10236: LD_ADDR_EXP 39
10240: PUSH
10241: LD_INT 11
10243: ST_TO_ADDR
10244: GO 10304
10246: LD_INT 4
10248: DOUBLE
10249: EQUAL
10250: IFTRUE 10254
10252: GO 10265
10254: POP
// opoce = 15 ; 5 :
10255: LD_ADDR_EXP 39
10259: PUSH
10260: LD_INT 15
10262: ST_TO_ADDR
10263: GO 10304
10265: LD_INT 5
10267: DOUBLE
10268: EQUAL
10269: IFTRUE 10273
10271: GO 10284
10273: POP
// opoce = 19 ; 6 :
10274: LD_ADDR_EXP 39
10278: PUSH
10279: LD_INT 19
10281: ST_TO_ADDR
10282: GO 10304
10284: LD_INT 6
10286: DOUBLE
10287: EQUAL
10288: IFTRUE 10292
10290: GO 10303
10292: POP
// opoce = 23 ; end ;
10293: LD_ADDR_EXP 39
10297: PUSH
10298: LD_INT 23
10300: ST_TO_ADDR
10301: GO 10304
10303: POP
// case time of 0 :
10304: LD_LOC 13
10308: PUSH
10309: LD_INT 0
10311: DOUBLE
10312: EQUAL
10313: IFTRUE 10317
10315: GO 10332
10317: POP
// time = 30 * 60 ; 1 :
10318: LD_ADDR_LOC 13
10322: PUSH
10323: LD_INT 30
10325: PUSH
10326: LD_INT 60
10328: MUL
10329: ST_TO_ADDR
10330: GO 10448
10332: LD_INT 1
10334: DOUBLE
10335: EQUAL
10336: IFTRUE 10340
10338: GO 10355
10340: POP
// time = 40 * 60 ; 2 :
10341: LD_ADDR_LOC 13
10345: PUSH
10346: LD_INT 40
10348: PUSH
10349: LD_INT 60
10351: MUL
10352: ST_TO_ADDR
10353: GO 10448
10355: LD_INT 2
10357: DOUBLE
10358: EQUAL
10359: IFTRUE 10363
10361: GO 10378
10363: POP
// time = 50 * 60 ; 3 :
10364: LD_ADDR_LOC 13
10368: PUSH
10369: LD_INT 50
10371: PUSH
10372: LD_INT 60
10374: MUL
10375: ST_TO_ADDR
10376: GO 10448
10378: LD_INT 3
10380: DOUBLE
10381: EQUAL
10382: IFTRUE 10386
10384: GO 10401
10386: POP
// time = 60 * 60 ; 4 :
10387: LD_ADDR_LOC 13
10391: PUSH
10392: LD_INT 60
10394: PUSH
10395: LD_INT 60
10397: MUL
10398: ST_TO_ADDR
10399: GO 10448
10401: LD_INT 4
10403: DOUBLE
10404: EQUAL
10405: IFTRUE 10409
10407: GO 10424
10409: POP
// time = 90 * 60 ; 5 :
10410: LD_ADDR_LOC 13
10414: PUSH
10415: LD_INT 90
10417: PUSH
10418: LD_INT 60
10420: MUL
10421: ST_TO_ADDR
10422: GO 10448
10424: LD_INT 5
10426: DOUBLE
10427: EQUAL
10428: IFTRUE 10432
10430: GO 10447
10432: POP
// time = 120 * 60 ; end ;
10433: LD_ADDR_LOC 13
10437: PUSH
10438: LD_INT 120
10440: PUSH
10441: LD_INT 60
10443: MUL
10444: ST_TO_ADDR
10445: GO 10448
10447: POP
// enable ( cft_03 ) ;
10448: LD_LOC 26
10452: ENABLE_MARKED
// refresh ;
10453: CALL 11267 0 0
// for stmp = 1 to 8 do
10457: LD_ADDR_LOC 31
10461: PUSH
10462: DOUBLE
10463: LD_INT 1
10465: DEC
10466: ST_TO_ADDR
10467: LD_INT 8
10469: PUSH
10470: FOR_TO
10471: IFFALSE 10840
// if mp_sides_nations_ [ stmp ] then
10473: LD_EXP 49
10477: PUSH
10478: LD_LOC 31
10482: ARRAY
10483: IFFALSE 10838
// begin if mp_sides_positions_ [ stmp ] = 1 then
10485: LD_EXP 50
10489: PUSH
10490: LD_LOC 31
10494: ARRAY
10495: PUSH
10496: LD_INT 1
10498: EQUAL
10499: IFFALSE 10513
// pos1side = stmp else
10501: LD_ADDR_EXP 44
10505: PUSH
10506: LD_LOC 31
10510: ST_TO_ADDR
10511: GO 10523
// pos2side = stmp ;
10513: LD_ADDR_EXP 45
10517: PUSH
10518: LD_LOC 31
10522: ST_TO_ADDR
// uc_side = stmp ;
10523: LD_ADDR_OWVAR 20
10527: PUSH
10528: LD_LOC 31
10532: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ stmp ] ;
10533: LD_ADDR_OWVAR 21
10537: PUSH
10538: LD_EXP 49
10542: PUSH
10543: LD_LOC 31
10547: ARRAY
10548: ST_TO_ADDR
// bc_type = b_depot ;
10549: LD_ADDR_OWVAR 42
10553: PUSH
10554: LD_INT 0
10556: ST_TO_ADDR
// bc_level = 1 ;
10557: LD_ADDR_OWVAR 43
10561: PUSH
10562: LD_INT 1
10564: ST_TO_ADDR
// createandplacebuildingxyd ( depotpositions [ mp_sides_positions_ [ stmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 2 ] , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 3 ] ) ;
10565: LD_EXP 42
10569: PUSH
10570: LD_EXP 50
10574: PUSH
10575: LD_LOC 31
10579: ARRAY
10580: ARRAY
10581: PUSH
10582: LD_INT 1
10584: ARRAY
10585: PPUSH
10586: LD_EXP 42
10590: PUSH
10591: LD_EXP 50
10595: PUSH
10596: LD_LOC 31
10600: ARRAY
10601: ARRAY
10602: PUSH
10603: LD_INT 2
10605: ARRAY
10606: PPUSH
10607: LD_EXP 42
10611: PUSH
10612: LD_EXP 50
10616: PUSH
10617: LD_LOC 31
10621: ARRAY
10622: ARRAY
10623: PUSH
10624: LD_INT 3
10626: ARRAY
10627: PPUSH
10628: CALL_OW 47
// setbattleflag ( stmp , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 2 ] , [ [ bfo_defend_bonus_human , 150 ] , [ bfo_defend_bonus_vehicle , 10 ] , [ bfo_defend_bonus_building , 0 ] , [ bfo_range , 17 ] , [ bfo_height , 100 ] ] ) ;
10632: LD_LOC 31
10636: PPUSH
10637: LD_EXP 42
10641: PUSH
10642: LD_EXP 50
10646: PUSH
10647: LD_LOC 31
10651: ARRAY
10652: ARRAY
10653: PUSH
10654: LD_INT 1
10656: ARRAY
10657: PPUSH
10658: LD_EXP 42
10662: PUSH
10663: LD_EXP 50
10667: PUSH
10668: LD_LOC 31
10672: ARRAY
10673: ARRAY
10674: PUSH
10675: LD_INT 2
10677: ARRAY
10678: PPUSH
10679: LD_INT 1
10681: PUSH
10682: LD_INT 150
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: PUSH
10689: LD_INT 2
10691: PUSH
10692: LD_INT 10
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PUSH
10699: LD_INT 3
10701: PUSH
10702: LD_INT 0
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: PUSH
10709: LD_INT 10
10711: PUSH
10712: LD_INT 17
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: PUSH
10719: LD_INT 20
10721: PUSH
10722: LD_INT 100
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: PPUSH
10736: CALL_OW 418
// cl = class_engineer ;
10740: LD_ADDR_LOC 33
10744: PUSH
10745: LD_INT 2
10747: ST_TO_ADDR
// for stmp2 = 1 to lidi do
10748: LD_ADDR_LOC 32
10752: PUSH
10753: DOUBLE
10754: LD_INT 1
10756: DEC
10757: ST_TO_ADDR
10758: LD_EXP 37
10762: PUSH
10763: FOR_TO
10764: IFFALSE 10836
// begin if stmp2 >= lidi / 2 then
10766: LD_LOC 32
10770: PUSH
10771: LD_EXP 37
10775: PUSH
10776: LD_INT 2
10778: DIVREAL
10779: GREATEREQUAL
10780: IFFALSE 10790
// cl = class_soldier ;
10782: LD_ADDR_LOC 33
10786: PUSH
10787: LD_INT 1
10789: ST_TO_ADDR
// preparehuman ( 0 , cl , 1 ) ;
10790: LD_INT 0
10792: PPUSH
10793: LD_LOC 33
10797: PPUSH
10798: LD_INT 1
10800: PPUSH
10801: CALL_OW 380
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ stmp ] ] , false ) ;
10805: CALL_OW 44
10809: PPUSH
10810: LD_EXP 43
10814: PUSH
10815: LD_EXP 50
10819: PUSH
10820: LD_LOC 31
10824: ARRAY
10825: ARRAY
10826: PPUSH
10827: LD_INT 0
10829: PPUSH
10830: CALL_OW 49
// end ;
10834: GO 10763
10836: POP
10837: POP
// end ;
10838: GO 10470
10840: POP
10841: POP
// depot1 = filterunitsinarea ( vlevo , [ [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
10842: LD_ADDR_LOC 14
10846: PUSH
10847: LD_INT 2
10849: PPUSH
10850: LD_INT 21
10852: PUSH
10853: LD_INT 3
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: PUSH
10860: LD_INT 30
10862: PUSH
10863: LD_INT 0
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: PPUSH
10874: CALL_OW 70
10878: PUSH
10879: LD_INT 1
10881: ARRAY
10882: ST_TO_ADDR
// depot2 = filterunitsinarea ( vpravo , [ [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
10883: LD_ADDR_LOC 15
10887: PUSH
10888: LD_INT 3
10890: PPUSH
10891: LD_INT 21
10893: PUSH
10894: LD_INT 3
10896: PUSH
10897: EMPTY
10898: LIST
10899: LIST
10900: PUSH
10901: LD_INT 30
10903: PUSH
10904: LD_INT 0
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: PPUSH
10915: CALL_OW 70
10919: PUSH
10920: LD_INT 1
10922: ARRAY
10923: ST_TO_ADDR
// pos1base = getbase ( depot1 ) ;
10924: LD_ADDR_LOC 20
10928: PUSH
10929: LD_LOC 14
10933: PPUSH
10934: CALL_OW 274
10938: ST_TO_ADDR
// pos2base = getbase ( depot2 ) ;
10939: LD_ADDR_LOC 21
10943: PUSH
10944: LD_LOC 15
10948: PPUSH
10949: CALL_OW 274
10953: ST_TO_ADDR
// uc_side = 0 ;
10954: LD_ADDR_OWVAR 20
10958: PUSH
10959: LD_INT 0
10961: ST_TO_ADDR
// uc_nation = nation_nature ;
10962: LD_ADDR_OWVAR 21
10966: PUSH
10967: LD_INT 0
10969: ST_TO_ADDR
// for stmp = 1 to opoce do
10970: LD_ADDR_LOC 31
10974: PUSH
10975: DOUBLE
10976: LD_INT 1
10978: DEC
10979: ST_TO_ADDR
10980: LD_EXP 39
10984: PUSH
10985: FOR_TO
10986: IFFALSE 11018
// begin preparehuman ( 0 , class_apeman , 0 ) ;
10988: LD_INT 0
10990: PPUSH
10991: LD_INT 12
10993: PPUSH
10994: LD_INT 0
10996: PPUSH
10997: CALL_OW 380
// placeunitarea ( createhuman , les , false ) ;
11001: CALL_OW 44
11005: PPUSH
11006: LD_INT 4
11008: PPUSH
11009: LD_INT 0
11011: PPUSH
11012: CALL_OW 49
// end ;
11016: GO 10985
11018: POP
11019: POP
// uc_side = pos2side ;
11020: LD_ADDR_OWVAR 20
11024: PUSH
11025: LD_EXP 45
11029: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos2side ] ;
11030: LD_ADDR_OWVAR 21
11034: PUSH
11035: LD_EXP 49
11039: PUSH
11040: LD_EXP 45
11044: ARRAY
11045: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11046: LD_ADDR_OWVAR 37
11050: PUSH
11051: LD_LOC 18
11055: PUSH
11056: LD_OWVAR 21
11060: ARRAY
11061: ST_TO_ADDR
// vc_control = control_manual ;
11062: LD_ADDR_OWVAR 38
11066: PUSH
11067: LD_INT 1
11069: ST_TO_ADDR
// vc_engine = engine_siberite ;
11070: LD_ADDR_OWVAR 39
11074: PUSH
11075: LD_INT 3
11077: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
11078: LD_ADDR_OWVAR 40
11082: PUSH
11083: LD_LOC 19
11087: PUSH
11088: LD_OWVAR 21
11092: ARRAY
11093: ST_TO_ADDR
// vlajka1 = createvehicle ;
11094: LD_ADDR_LOC 16
11098: PUSH
11099: CALL_OW 45
11103: ST_TO_ADDR
// placeunitxy ( vlajka1 , 76 , 60 , false ) ;
11104: LD_LOC 16
11108: PPUSH
11109: LD_INT 76
11111: PPUSH
11112: LD_INT 60
11114: PPUSH
11115: LD_INT 0
11117: PPUSH
11118: CALL_OW 48
// uc_side = pos1side ;
11122: LD_ADDR_OWVAR 20
11126: PUSH
11127: LD_EXP 44
11131: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos1side ] ;
11132: LD_ADDR_OWVAR 21
11136: PUSH
11137: LD_EXP 49
11141: PUSH
11142: LD_EXP 44
11146: ARRAY
11147: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11148: LD_ADDR_OWVAR 37
11152: PUSH
11153: LD_LOC 18
11157: PUSH
11158: LD_OWVAR 21
11162: ARRAY
11163: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
11164: LD_ADDR_OWVAR 40
11168: PUSH
11169: LD_LOC 19
11173: PUSH
11174: LD_OWVAR 21
11178: ARRAY
11179: ST_TO_ADDR
// vlajka2 = createvehicle ;
11180: LD_ADDR_LOC 17
11184: PUSH
11185: CALL_OW 45
11189: ST_TO_ADDR
// placeunitxy ( vlajka2 , 143 , 60 , false ) ;
11190: LD_LOC 17
11194: PPUSH
11195: LD_INT 143
11197: PPUSH
11198: LD_INT 60
11200: PPUSH
11201: LD_INT 0
11203: PPUSH
11204: CALL_OW 48
// case mp_sides_positions_ [ your_side ] of 1 :
11208: LD_EXP 50
11212: PUSH
11213: LD_OWVAR 2
11217: ARRAY
11218: PUSH
11219: LD_INT 1
11221: DOUBLE
11222: EQUAL
11223: IFTRUE 11227
11225: GO 11240
11227: POP
// centernowonxy ( 44 , 60 ) ; 2 :
11228: LD_INT 44
11230: PPUSH
11231: LD_INT 60
11233: PPUSH
11234: CALL_OW 86
11238: GO 11262
11240: LD_INT 2
11242: DOUBLE
11243: EQUAL
11244: IFTRUE 11248
11246: GO 11261
11248: POP
// centernowonxy ( 175 , 60 ) ; end ;
11249: LD_INT 175
11251: PPUSH
11252: LD_INT 60
11254: PPUSH
11255: CALL_OW 86
11259: GO 11262
11261: POP
// end ;
11262: LD_VAR 0 1
11266: RET
// function refresh ; var tmp , tmp1 , tmp2 , tmp3 , tmp4 ; begin
11267: LD_INT 0
11269: PPUSH
11270: PPUSH
11271: PPUSH
11272: PPUSH
11273: PPUSH
11274: PPUSH
// tmp = time div 60 ;
11275: LD_ADDR_VAR 0 2
11279: PUSH
11280: LD_LOC 13
11284: PUSH
11285: LD_INT 60
11287: DIV
11288: ST_TO_ADDR
// if tmp < 10 then
11289: LD_VAR 0 2
11293: PUSH
11294: LD_INT 10
11296: LESS
11297: IFFALSE 11315
// tmp1 = 0 & tmp else
11299: LD_ADDR_VAR 0 3
11303: PUSH
11304: LD_STRING 0
11306: PUSH
11307: LD_VAR 0 2
11311: STR
11312: ST_TO_ADDR
11313: GO 11329
// tmp1 =  & tmp ;
11315: LD_ADDR_VAR 0 3
11319: PUSH
11320: LD_STRING 
11322: PUSH
11323: LD_VAR 0 2
11327: STR
11328: ST_TO_ADDR
// tmp = time mod 60 ;
11329: LD_ADDR_VAR 0 2
11333: PUSH
11334: LD_LOC 13
11338: PUSH
11339: LD_INT 60
11341: MOD
11342: ST_TO_ADDR
// if tmp < 10 then
11343: LD_VAR 0 2
11347: PUSH
11348: LD_INT 10
11350: LESS
11351: IFFALSE 11369
// tmp2 = 0 & tmp else
11353: LD_ADDR_VAR 0 4
11357: PUSH
11358: LD_STRING 0
11360: PUSH
11361: LD_VAR 0 2
11365: STR
11366: ST_TO_ADDR
11367: GO 11383
// tmp2 =  & tmp ;
11369: LD_ADDR_VAR 0 4
11373: PUSH
11374: LD_STRING 
11376: PUSH
11377: LD_VAR 0 2
11381: STR
11382: ST_TO_ADDR
// if left_score < 10 then
11383: LD_LOC 22
11387: PUSH
11388: LD_INT 10
11390: LESS
11391: IFFALSE 11409
// tmp3 = 0 & left_score else
11393: LD_ADDR_VAR 0 5
11397: PUSH
11398: LD_STRING 0
11400: PUSH
11401: LD_LOC 22
11405: STR
11406: ST_TO_ADDR
11407: GO 11423
// tmp3 =  & left_score ;
11409: LD_ADDR_VAR 0 5
11413: PUSH
11414: LD_STRING 
11416: PUSH
11417: LD_LOC 22
11421: STR
11422: ST_TO_ADDR
// if right_score < 10 then
11423: LD_LOC 23
11427: PUSH
11428: LD_INT 10
11430: LESS
11431: IFFALSE 11449
// tmp4 = 0 & right_score else
11433: LD_ADDR_VAR 0 6
11437: PUSH
11438: LD_STRING 0
11440: PUSH
11441: LD_LOC 23
11445: STR
11446: ST_TO_ADDR
11447: GO 11463
// tmp4 =  & right_score ;
11449: LD_ADDR_VAR 0 6
11453: PUSH
11454: LD_STRING 
11456: PUSH
11457: LD_LOC 23
11461: STR
11462: ST_TO_ADDR
// display_strings = [ Score:  & tmp3 &  to  & tmp4 , Time left:  & tmp1 & : & tmp2 ] ;
11463: LD_ADDR_OWVAR 47
11467: PUSH
11468: LD_STRING Score: 
11470: PUSH
11471: LD_VAR 0 5
11475: STR
11476: PUSH
11477: LD_STRING  to 
11479: STR
11480: PUSH
11481: LD_VAR 0 6
11485: STR
11486: PUSH
11487: LD_STRING Time left: 
11489: PUSH
11490: LD_VAR 0 3
11494: STR
11495: PUSH
11496: LD_STRING :
11498: STR
11499: PUSH
11500: LD_VAR 0 4
11504: STR
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: ST_TO_ADDR
// end ;
11510: LD_VAR 0 1
11514: RET
// every 0 0$1 marked 03 do
11515: GO 11517
11517: DISABLE
// begin time = time - 1 ;
11518: LD_ADDR_LOC 13
11522: PUSH
11523: LD_LOC 13
11527: PUSH
11528: LD_INT 1
11530: MINUS
11531: ST_TO_ADDR
// refresh ;
11532: CALL 11267 0 0
// if not time then
11536: LD_LOC 13
11540: NOT
11541: IFFALSE 11607
// if mp_sides_positions_ [ your_side ] = 1 then
11543: LD_EXP 50
11547: PUSH
11548: LD_OWVAR 2
11552: ARRAY
11553: PUSH
11554: LD_INT 1
11556: EQUAL
11557: IFFALSE 11583
// if left_score >= right_score then
11559: LD_LOC 22
11563: PUSH
11564: LD_LOC 23
11568: GREATEREQUAL
11569: IFFALSE 11577
// youwininmultiplayer else
11571: CALL_OW 106
11575: GO 11581
// youlostinmultiplayer else
11577: CALL_OW 107
11581: GO 11605
// if right_score >= left_score then
11583: LD_LOC 23
11587: PUSH
11588: LD_LOC 22
11592: GREATEREQUAL
11593: IFFALSE 11601
// youwininmultiplayer else
11595: CALL_OW 106
11599: GO 11605
// youlostinmultiplayer else
11601: CALL_OW 107
11605: GO 11608
// enable ;
11607: ENABLE
// end ;
11608: END
// every 0 0$10 marked 19 do
11609: GO 11611
11611: DISABLE
// begin cper = cper - 0 0$10 ;
11612: LD_ADDR_EXP 40
11616: PUSH
11617: LD_EXP 40
11621: PUSH
11622: LD_INT 350
11624: MINUS
11625: ST_TO_ADDR
// if cper = 0 then
11626: LD_EXP 40
11630: PUSH
11631: LD_INT 0
11633: EQUAL
11634: IFFALSE 11672
// begin createcratesarea ( 5 , vlevoex , true ) ;
11636: LD_INT 5
11638: PPUSH
11639: LD_INT 5
11641: PPUSH
11642: LD_INT 1
11644: PPUSH
11645: CALL_OW 55
// createcratesarea ( 5 , vpravoex , true ) ;
11649: LD_INT 5
11651: PPUSH
11652: LD_INT 6
11654: PPUSH
11655: LD_INT 1
11657: PPUSH
11658: CALL_OW 55
// cper = cperiode ;
11662: LD_ADDR_EXP 40
11666: PUSH
11667: LD_EXP 41
11671: ST_TO_ADDR
// end ; enable ;
11672: ENABLE
// end ;
11673: END
// every 5 trigger getlives ( depot1 ) < 500 marked 01 do
11674: LD_LOC 14
11678: PPUSH
11679: CALL_OW 256
11683: PUSH
11684: LD_INT 500
11686: LESS
11687: IFFALSE 11705
11689: GO 11691
11691: DISABLE
// begin setlives ( depot1 , 750 ) ;
11692: LD_LOC 14
11696: PPUSH
11697: LD_INT 750
11699: PPUSH
11700: CALL_OW 234
// enable ;
11704: ENABLE
// end ;
11705: END
// every 5 trigger getlives ( depot2 ) < 500 marked 02 do
11706: LD_LOC 15
11710: PPUSH
11711: CALL_OW 256
11715: PUSH
11716: LD_INT 500
11718: LESS
11719: IFFALSE 11737
11721: GO 11723
11723: DISABLE
// begin setlives ( depot2 , 750 ) ;
11724: LD_LOC 15
11728: PPUSH
11729: LD_INT 750
11731: PPUSH
11732: CALL_OW 234
// enable ;
11736: ENABLE
// end ;
11737: END
// on unitdestroyed ( un ) do var radius ;
11738: LD_INT 0
11740: PPUSH
// begin if GetClass ( un ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
11741: LD_VAR 0 1
11745: PPUSH
11746: CALL_OW 257
11750: PUSH
11751: LD_INT 12
11753: PUSH
11754: LD_INT 15
11756: PUSH
11757: LD_INT 17
11759: PUSH
11760: LD_INT 16
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: IN
11769: PUSH
11770: LD_VAR 0 1
11774: PPUSH
11775: CALL_OW 263
11779: PUSH
11780: LD_INT 5
11782: EQUAL
11783: OR
11784: IFFALSE 11795
// ApeKilled ( un ) ;
11786: LD_VAR 0 1
11790: PPUSH
11791: CALL 8150 0 1
// if mp_game_type <> 1 then
11795: LD_OWVAR 6
11799: PUSH
11800: LD_INT 1
11802: NONEQUAL
11803: IFFALSE 11807
// exit ;
11805: GO 12101
// if un = vlajka1 then
11807: LD_VAR 0 1
11811: PUSH
11812: LD_LOC 16
11816: EQUAL
11817: IFFALSE 11955
// begin uc_side = pos2side ;
11819: LD_ADDR_OWVAR 20
11823: PUSH
11824: LD_EXP 45
11828: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos2side ] ;
11829: LD_ADDR_OWVAR 21
11833: PUSH
11834: LD_EXP 49
11838: PUSH
11839: LD_EXP 45
11843: ARRAY
11844: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11845: LD_ADDR_OWVAR 37
11849: PUSH
11850: LD_LOC 18
11854: PUSH
11855: LD_OWVAR 21
11859: ARRAY
11860: ST_TO_ADDR
// vc_control = control_manual ;
11861: LD_ADDR_OWVAR 38
11865: PUSH
11866: LD_INT 1
11868: ST_TO_ADDR
// vc_engine = engine_siberite ;
11869: LD_ADDR_OWVAR 39
11873: PUSH
11874: LD_INT 3
11876: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
11877: LD_ADDR_OWVAR 40
11881: PUSH
11882: LD_LOC 19
11886: PUSH
11887: LD_OWVAR 21
11891: ARRAY
11892: ST_TO_ADDR
// vlajka1 = createvehicle ;
11893: LD_ADDR_LOC 16
11897: PUSH
11898: CALL_OW 45
11902: ST_TO_ADDR
// radius = 2 ;
11903: LD_ADDR_VAR 0 2
11907: PUSH
11908: LD_INT 2
11910: ST_TO_ADDR
// while not placeunitxyr ( vlajka1 , 76 , 60 , radius , false ) do
11911: LD_LOC 16
11915: PPUSH
11916: LD_INT 76
11918: PPUSH
11919: LD_INT 60
11921: PPUSH
11922: LD_VAR 0 2
11926: PPUSH
11927: LD_INT 0
11929: PPUSH
11930: CALL_OW 50
11934: NOT
11935: IFFALSE 11953
// radius = radius + 1 ;
11937: LD_ADDR_VAR 0 2
11941: PUSH
11942: LD_VAR 0 2
11946: PUSH
11947: LD_INT 1
11949: PLUS
11950: ST_TO_ADDR
11951: GO 11911
// end else
11953: GO 12101
// if un = vlajka2 then
11955: LD_VAR 0 1
11959: PUSH
11960: LD_LOC 17
11964: EQUAL
11965: IFFALSE 12101
// begin uc_side = pos1side ;
11967: LD_ADDR_OWVAR 20
11971: PUSH
11972: LD_EXP 44
11976: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos1side ] ;
11977: LD_ADDR_OWVAR 21
11981: PUSH
11982: LD_EXP 49
11986: PUSH
11987: LD_EXP 44
11991: ARRAY
11992: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11993: LD_ADDR_OWVAR 37
11997: PUSH
11998: LD_LOC 18
12002: PUSH
12003: LD_OWVAR 21
12007: ARRAY
12008: ST_TO_ADDR
// vc_control = control_manual ;
12009: LD_ADDR_OWVAR 38
12013: PUSH
12014: LD_INT 1
12016: ST_TO_ADDR
// vc_engine = engine_siberite ;
12017: LD_ADDR_OWVAR 39
12021: PUSH
12022: LD_INT 3
12024: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
12025: LD_ADDR_OWVAR 40
12029: PUSH
12030: LD_LOC 19
12034: PUSH
12035: LD_OWVAR 21
12039: ARRAY
12040: ST_TO_ADDR
// vlajka2 = createvehicle ;
12041: LD_ADDR_LOC 17
12045: PUSH
12046: CALL_OW 45
12050: ST_TO_ADDR
// radius = 2 ;
12051: LD_ADDR_VAR 0 2
12055: PUSH
12056: LD_INT 2
12058: ST_TO_ADDR
// while not placeunitxyr ( vlajka2 , 143 , 60 , radius , false ) do
12059: LD_LOC 17
12063: PPUSH
12064: LD_INT 143
12066: PPUSH
12067: LD_INT 60
12069: PPUSH
12070: LD_VAR 0 2
12074: PPUSH
12075: LD_INT 0
12077: PPUSH
12078: CALL_OW 50
12082: NOT
12083: IFFALSE 12101
// radius = radius + 1 ;
12085: LD_ADDR_VAR 0 2
12089: PUSH
12090: LD_VAR 0 2
12094: PUSH
12095: LD_INT 1
12097: PLUS
12098: ST_TO_ADDR
12099: GO 12059
// end ; end ;
12101: PPOPN 2
12103: END
// on vehiclecaptured ( vehnew , vehold , origside , hum ) marked 05 do var radius ;
12104: LD_INT 0
12106: PPUSH
// if ( vehold = vlajka1 ) then
12107: LD_VAR 0 2
12111: PUSH
12112: LD_LOC 16
12116: EQUAL
12117: IFFALSE 12270
// begin vlajka1 = vehnew ;
12119: LD_ADDR_LOC 16
12123: PUSH
12124: LD_VAR 0 1
12128: ST_TO_ADDR
// comexitvehicle ( vlajka1 ) ;
12129: LD_LOC 16
12133: PPUSH
12134: CALL_OW 121
// while isdrivenby ( vlajka1 ) do
12138: LD_LOC 16
12142: PPUSH
12143: CALL_OW 311
12147: IFFALSE 12158
// wait ( 2 ) ;
12149: LD_INT 2
12151: PPUSH
12152: CALL_OW 67
12156: GO 12138
// if getdistunitxy ( vlajka1 , 76 , 60 ) > 4 then
12158: LD_LOC 16
12162: PPUSH
12163: LD_INT 76
12165: PPUSH
12166: LD_INT 60
12168: PPUSH
12169: CALL_OW 297
12173: PUSH
12174: LD_INT 4
12176: GREATER
12177: IFFALSE 12254
// begin removeunit ( vlajka1 ) ;
12179: LD_LOC 16
12183: PPUSH
12184: CALL_OW 64
// setside ( vlajka1 , origside ) ;
12188: LD_LOC 16
12192: PPUSH
12193: LD_VAR 0 3
12197: PPUSH
12198: CALL_OW 235
// radius = 2 ;
12202: LD_ADDR_VAR 0 5
12206: PUSH
12207: LD_INT 2
12209: ST_TO_ADDR
// while not placeunitxyr ( vlajka1 , 76 , 60 , radius , false ) do
12210: LD_LOC 16
12214: PPUSH
12215: LD_INT 76
12217: PPUSH
12218: LD_INT 60
12220: PPUSH
12221: LD_VAR 0 5
12225: PPUSH
12226: LD_INT 0
12228: PPUSH
12229: CALL_OW 50
12233: NOT
12234: IFFALSE 12252
// radius = radius + 1 ;
12236: LD_ADDR_VAR 0 5
12240: PUSH
12241: LD_VAR 0 5
12245: PUSH
12246: LD_INT 1
12248: PLUS
12249: ST_TO_ADDR
12250: GO 12210
// end else
12252: GO 12268
// setside ( vlajka1 , origside ) ;
12254: LD_LOC 16
12258: PPUSH
12259: LD_VAR 0 3
12263: PPUSH
12264: CALL_OW 235
// end else
12268: GO 12431
// if ( vehold = vlajka2 ) then
12270: LD_VAR 0 2
12274: PUSH
12275: LD_LOC 17
12279: EQUAL
12280: IFFALSE 12431
// begin vlajka2 = vehnew ;
12282: LD_ADDR_LOC 17
12286: PUSH
12287: LD_VAR 0 1
12291: ST_TO_ADDR
// comexitvehicle ( vlajka2 ) ;
12292: LD_LOC 17
12296: PPUSH
12297: CALL_OW 121
// while isdrivenby ( vlajka2 ) do
12301: LD_LOC 17
12305: PPUSH
12306: CALL_OW 311
12310: IFFALSE 12321
// wait ( 2 ) ;
12312: LD_INT 2
12314: PPUSH
12315: CALL_OW 67
12319: GO 12301
// if getdistunitxy ( vlajka2 , 143 , 60 ) > 4 then
12321: LD_LOC 17
12325: PPUSH
12326: LD_INT 143
12328: PPUSH
12329: LD_INT 60
12331: PPUSH
12332: CALL_OW 297
12336: PUSH
12337: LD_INT 4
12339: GREATER
12340: IFFALSE 12417
// begin removeunit ( vlajka2 ) ;
12342: LD_LOC 17
12346: PPUSH
12347: CALL_OW 64
// setside ( vlajka2 , origside ) ;
12351: LD_LOC 17
12355: PPUSH
12356: LD_VAR 0 3
12360: PPUSH
12361: CALL_OW 235
// radius = 2 ;
12365: LD_ADDR_VAR 0 5
12369: PUSH
12370: LD_INT 2
12372: ST_TO_ADDR
// while not placeunitxyr ( vlajka2 , 143 , 60 , radius , false ) do
12373: LD_LOC 17
12377: PPUSH
12378: LD_INT 143
12380: PPUSH
12381: LD_INT 60
12383: PPUSH
12384: LD_VAR 0 5
12388: PPUSH
12389: LD_INT 0
12391: PPUSH
12392: CALL_OW 50
12396: NOT
12397: IFFALSE 12415
// radius = radius + 1 ;
12399: LD_ADDR_VAR 0 5
12403: PUSH
12404: LD_VAR 0 5
12408: PUSH
12409: LD_INT 1
12411: PLUS
12412: ST_TO_ADDR
12413: GO 12373
// end else
12415: GO 12431
// setside ( vlajka2 , origside ) ;
12417: LD_LOC 17
12421: PPUSH
12422: LD_VAR 0 3
12426: PPUSH
12427: CALL_OW 235
// end ;
12431: PPOPN 5
12433: END
// every 10 + 1 trigger getdistunitxy ( vlajka1 , 185 , 60 ) < 6 marked 06 do var radius , tmp ;
12434: LD_LOC 16
12438: PPUSH
12439: LD_INT 185
12441: PPUSH
12442: LD_INT 60
12444: PPUSH
12445: CALL_OW 297
12449: PUSH
12450: LD_INT 6
12452: LESS
12453: IFFALSE 12657
12455: GO 12457
12457: DISABLE
12458: LD_INT 0
12460: PPUSH
12461: PPUSH
// begin right_score = right_score + 1 ;
12462: LD_ADDR_LOC 23
12466: PUSH
12467: LD_LOC 23
12471: PUSH
12472: LD_INT 1
12474: PLUS
12475: ST_TO_ADDR
// refresh ;
12476: CALL 11267 0 0
// comexitvehicle ( vlajka1 ) ;
12480: LD_LOC 16
12484: PPUSH
12485: CALL_OW 121
// while isdrivenby ( vlajka1 ) do
12489: LD_LOC 16
12493: PPUSH
12494: CALL_OW 311
12498: IFFALSE 12509
// wait ( 2 ) ;
12500: LD_INT 2
12502: PPUSH
12503: CALL_OW 67
12507: GO 12489
// removeunit ( vlajka1 ) ;
12509: LD_LOC 16
12513: PPUSH
12514: CALL_OW 64
// for radius in [ mat_cans , mat_oil , mat_siberit ] do
12518: LD_ADDR_VAR 0 1
12522: PUSH
12523: LD_INT 1
12525: PUSH
12526: LD_INT 2
12528: PUSH
12529: LD_INT 3
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: LIST
12536: PUSH
12537: FOR_IN
12538: IFFALSE 12604
// begin tmp = getcargo ( vlajka1 , radius ) ;
12540: LD_ADDR_VAR 0 2
12544: PUSH
12545: LD_LOC 16
12549: PPUSH
12550: LD_VAR 0 1
12554: PPUSH
12555: CALL_OW 289
12559: ST_TO_ADDR
// if tmp then
12560: LD_VAR 0 2
12564: IFFALSE 12602
// begin addresourcetype ( pos2base , radius , tmp ) ;
12566: LD_LOC 21
12570: PPUSH
12571: LD_VAR 0 1
12575: PPUSH
12576: LD_VAR 0 2
12580: PPUSH
12581: CALL_OW 276
// setcargo ( vlajka1 , radius , 0 ) ;
12585: LD_LOC 16
12589: PPUSH
12590: LD_VAR 0 1
12594: PPUSH
12595: LD_INT 0
12597: PPUSH
12598: CALL_OW 290
// end ; end ;
12602: GO 12537
12604: POP
12605: POP
// radius = 2 ;
12606: LD_ADDR_VAR 0 1
12610: PUSH
12611: LD_INT 2
12613: ST_TO_ADDR
// while not placeunitxyr ( vlajka1 , 76 , 60 , radius , false ) do
12614: LD_LOC 16
12618: PPUSH
12619: LD_INT 76
12621: PPUSH
12622: LD_INT 60
12624: PPUSH
12625: LD_VAR 0 1
12629: PPUSH
12630: LD_INT 0
12632: PPUSH
12633: CALL_OW 50
12637: NOT
12638: IFFALSE 12656
// radius = radius + 1 ;
12640: LD_ADDR_VAR 0 1
12644: PUSH
12645: LD_VAR 0 1
12649: PUSH
12650: LD_INT 1
12652: PLUS
12653: ST_TO_ADDR
12654: GO 12614
// enable ;
12656: ENABLE
// end ;
12657: PPOPN 2
12659: END
// every 10 trigger getdistunitxy ( vlajka2 , 34 , 60 ) < 6 marked 07 do var radius , tmp ;
12660: LD_LOC 17
12664: PPUSH
12665: LD_INT 34
12667: PPUSH
12668: LD_INT 60
12670: PPUSH
12671: CALL_OW 297
12675: PUSH
12676: LD_INT 6
12678: LESS
12679: IFFALSE 12883
12681: GO 12683
12683: DISABLE
12684: LD_INT 0
12686: PPUSH
12687: PPUSH
// begin left_score = left_score + 1 ;
12688: LD_ADDR_LOC 22
12692: PUSH
12693: LD_LOC 22
12697: PUSH
12698: LD_INT 1
12700: PLUS
12701: ST_TO_ADDR
// refresh ;
12702: CALL 11267 0 0
// comexitvehicle ( vlajka2 ) ;
12706: LD_LOC 17
12710: PPUSH
12711: CALL_OW 121
// while isdrivenby ( vlajka2 ) do
12715: LD_LOC 17
12719: PPUSH
12720: CALL_OW 311
12724: IFFALSE 12735
// wait ( 2 ) ;
12726: LD_INT 2
12728: PPUSH
12729: CALL_OW 67
12733: GO 12715
// removeunit ( vlajka2 ) ;
12735: LD_LOC 17
12739: PPUSH
12740: CALL_OW 64
// for radius in [ mat_cans , mat_oil , mat_siberit ] do
12744: LD_ADDR_VAR 0 1
12748: PUSH
12749: LD_INT 1
12751: PUSH
12752: LD_INT 2
12754: PUSH
12755: LD_INT 3
12757: PUSH
12758: EMPTY
12759: LIST
12760: LIST
12761: LIST
12762: PUSH
12763: FOR_IN
12764: IFFALSE 12830
// begin tmp = getcargo ( vlajka2 , radius ) ;
12766: LD_ADDR_VAR 0 2
12770: PUSH
12771: LD_LOC 17
12775: PPUSH
12776: LD_VAR 0 1
12780: PPUSH
12781: CALL_OW 289
12785: ST_TO_ADDR
// if tmp then
12786: LD_VAR 0 2
12790: IFFALSE 12828
// begin addresourcetype ( pos1base , radius , tmp ) ;
12792: LD_LOC 20
12796: PPUSH
12797: LD_VAR 0 1
12801: PPUSH
12802: LD_VAR 0 2
12806: PPUSH
12807: CALL_OW 276
// setcargo ( vlajka2 , radius , 0 ) ;
12811: LD_LOC 17
12815: PPUSH
12816: LD_VAR 0 1
12820: PPUSH
12821: LD_INT 0
12823: PPUSH
12824: CALL_OW 290
// end ; end ;
12828: GO 12763
12830: POP
12831: POP
// radius = 2 ;
12832: LD_ADDR_VAR 0 1
12836: PUSH
12837: LD_INT 2
12839: ST_TO_ADDR
// while not placeunitxyr ( vlajka2 , 143 , 60 , radius , false ) do
12840: LD_LOC 17
12844: PPUSH
12845: LD_INT 143
12847: PPUSH
12848: LD_INT 60
12850: PPUSH
12851: LD_VAR 0 1
12855: PPUSH
12856: LD_INT 0
12858: PPUSH
12859: CALL_OW 50
12863: NOT
12864: IFFALSE 12882
// radius = radius + 1 ;
12866: LD_ADDR_VAR 0 1
12870: PUSH
12871: LD_VAR 0 1
12875: PUSH
12876: LD_INT 1
12878: PLUS
12879: ST_TO_ADDR
12880: GO 12840
// enable ;
12882: ENABLE
// end ; end_of_file
12883: PPOPN 2
12885: END
// var zakladna , skilly , start_res , extra_oil , extra_sib , zakl_plus , batt_fl , sib_det , people_resp , siberitofka ; var fortpos , areasdiff , directions ; var resp_cnt1 , resp_cnt2 ; export function other_game ; var tmp , tmp2 , tmp3 , cl ; begin
12886: LD_INT 0
12888: PPUSH
12889: PPUSH
12890: PPUSH
12891: PPUSH
12892: PPUSH
// ctf = false ;
12893: LD_ADDR_EXP 47
12897: PUSH
12898: LD_INT 0
12900: ST_TO_ADDR
// resp_cnt1 = 0 ;
12901: LD_ADDR_LOC 47
12905: PUSH
12906: LD_INT 0
12908: ST_TO_ADDR
// resp_cnt2 = 0 ;
12909: LD_ADDR_LOC 48
12913: PUSH
12914: LD_INT 0
12916: ST_TO_ADDR
// enable ( nonctf_13 ) ;
12917: LD_EXP 55
12921: ENABLE_MARKED
// for tmp = 1 to 8 do
12922: LD_ADDR_VAR 0 2
12926: PUSH
12927: DOUBLE
12928: LD_INT 1
12930: DEC
12931: ST_TO_ADDR
12932: LD_INT 8
12934: PUSH
12935: FOR_TO
12936: IFFALSE 12997
// begin setrestrict ( b_depot , tmp , state_enabled ) ;
12938: LD_INT 0
12940: PPUSH
12941: LD_VAR 0 2
12945: PPUSH
12946: LD_INT 1
12948: PPUSH
12949: CALL_OW 324
// if sib_det then
12953: LD_LOC 41
12957: IFFALSE 12974
// settech ( tech_sibdet , tmp , state_researched ) ;
12959: LD_INT 20
12961: PPUSH
12962: LD_VAR 0 2
12966: PPUSH
12967: LD_INT 2
12969: PPUSH
12970: CALL_OW 322
// if siberitofka then
12974: LD_LOC 43
12978: IFFALSE 12995
// settech ( tech_sibfiss , tmp , state_enabled ) ;
12980: LD_INT 25
12982: PPUSH
12983: LD_VAR 0 2
12987: PPUSH
12988: LD_INT 1
12990: PPUSH
12991: CALL_OW 322
// end ;
12995: GO 12935
12997: POP
12998: POP
// if multiplayer then
12999: LD_OWVAR 4
13003: IFFALSE 13176
// begin zakladna = getmultiplayersetting ( 0 ) ;
13005: LD_ADDR_LOC 34
13009: PUSH
13010: LD_INT 0
13012: PPUSH
13013: CALL_OW 426
13017: ST_TO_ADDR
// lidi = getmultiplayersetting ( 1 ) ;
13018: LD_ADDR_EXP 37
13022: PUSH
13023: LD_INT 1
13025: PPUSH
13026: CALL_OW 426
13030: ST_TO_ADDR
// skilly = getmultiplayersetting ( 2 ) ;
13031: LD_ADDR_LOC 35
13035: PUSH
13036: LD_INT 2
13038: PPUSH
13039: CALL_OW 426
13043: ST_TO_ADDR
// start_res = getmultiplayersetting ( 3 ) ;
13044: LD_ADDR_LOC 36
13048: PUSH
13049: LD_INT 3
13051: PPUSH
13052: CALL_OW 426
13056: ST_TO_ADDR
// krabice = getmultiplayersetting ( 4 ) ;
13057: LD_ADDR_EXP 38
13061: PUSH
13062: LD_INT 4
13064: PPUSH
13065: CALL_OW 426
13069: ST_TO_ADDR
// extra_oil = getmultiplayersetting ( 5 ) ;
13070: LD_ADDR_LOC 37
13074: PUSH
13075: LD_INT 5
13077: PPUSH
13078: CALL_OW 426
13082: ST_TO_ADDR
// extra_sib = getmultiplayersetting ( 6 ) ;
13083: LD_ADDR_LOC 38
13087: PUSH
13088: LD_INT 6
13090: PPUSH
13091: CALL_OW 426
13095: ST_TO_ADDR
// zakl_plus = getmultiplayersetting ( 7 ) ;
13096: LD_ADDR_LOC 39
13100: PUSH
13101: LD_INT 7
13103: PPUSH
13104: CALL_OW 426
13108: ST_TO_ADDR
// batt_fl = getmultiplayersetting ( 11 ) ;
13109: LD_ADDR_LOC 40
13113: PUSH
13114: LD_INT 11
13116: PPUSH
13117: CALL_OW 426
13121: ST_TO_ADDR
// sib_det = getmultiplayersetting ( 12 ) ;
13122: LD_ADDR_LOC 41
13126: PUSH
13127: LD_INT 12
13129: PPUSH
13130: CALL_OW 426
13134: ST_TO_ADDR
// opoce = getmultiplayersetting ( 13 ) ;
13135: LD_ADDR_EXP 39
13139: PUSH
13140: LD_INT 13
13142: PPUSH
13143: CALL_OW 426
13147: ST_TO_ADDR
// people_resp = getmultiplayersetting ( 14 ) ;
13148: LD_ADDR_LOC 42
13152: PUSH
13153: LD_INT 14
13155: PPUSH
13156: CALL_OW 426
13160: ST_TO_ADDR
// siberitofka = getmultiplayersetting ( 15 ) ;
13161: LD_ADDR_LOC 43
13165: PUSH
13166: LD_INT 15
13168: PPUSH
13169: CALL_OW 426
13173: ST_TO_ADDR
// end else
13174: GO 13280
// begin zakladna = 1 ;
13176: LD_ADDR_LOC 34
13180: PUSH
13181: LD_INT 1
13183: ST_TO_ADDR
// lidi = 1 ;
13184: LD_ADDR_EXP 37
13188: PUSH
13189: LD_INT 1
13191: ST_TO_ADDR
// skilly = 1 ;
13192: LD_ADDR_LOC 35
13196: PUSH
13197: LD_INT 1
13199: ST_TO_ADDR
// start_res = 2 ;
13200: LD_ADDR_LOC 36
13204: PUSH
13205: LD_INT 2
13207: ST_TO_ADDR
// krabice = 1 ;
13208: LD_ADDR_EXP 38
13212: PUSH
13213: LD_INT 1
13215: ST_TO_ADDR
// extra_oil = 1 ;
13216: LD_ADDR_LOC 37
13220: PUSH
13221: LD_INT 1
13223: ST_TO_ADDR
// extra_sib = 1 ;
13224: LD_ADDR_LOC 38
13228: PUSH
13229: LD_INT 1
13231: ST_TO_ADDR
// zakl_plus = 2 ;
13232: LD_ADDR_LOC 39
13236: PUSH
13237: LD_INT 2
13239: ST_TO_ADDR
// batt_fl = 0 ;
13240: LD_ADDR_LOC 40
13244: PUSH
13245: LD_INT 0
13247: ST_TO_ADDR
// sib_det = 0 ;
13248: LD_ADDR_LOC 41
13252: PUSH
13253: LD_INT 0
13255: ST_TO_ADDR
// opoce = 3 ;
13256: LD_ADDR_EXP 39
13260: PUSH
13261: LD_INT 3
13263: ST_TO_ADDR
// people_resp = 0 ;
13264: LD_ADDR_LOC 42
13268: PUSH
13269: LD_INT 0
13271: ST_TO_ADDR
// siberitofka = 0 ;
13272: LD_ADDR_LOC 43
13276: PUSH
13277: LD_INT 0
13279: ST_TO_ADDR
// end ; if people_resp then
13280: LD_LOC 42
13284: IFFALSE 13301
// begin enable ( nonctf_10 ) ;
13286: LD_EXP 52
13290: ENABLE_MARKED
// enable ( nonctf_11 ) ;
13291: LD_EXP 53
13295: ENABLE_MARKED
// enable ( nonctf_12 ) ;
13296: LD_EXP 54
13300: ENABLE_MARKED
// end ; if people_resp = 1 then
13301: LD_LOC 42
13305: PUSH
13306: LD_INT 1
13308: EQUAL
13309: IFFALSE 13319
// people_resp = 3 ;
13311: LD_ADDR_LOC 42
13315: PUSH
13316: LD_INT 3
13318: ST_TO_ADDR
// if people_resp = 2 then
13319: LD_LOC 42
13323: PUSH
13324: LD_INT 2
13326: EQUAL
13327: IFFALSE 13337
// people_resp = 1 ;
13329: LD_ADDR_LOC 42
13333: PUSH
13334: LD_INT 1
13336: ST_TO_ADDR
// case lidi of 0 :
13337: LD_EXP 37
13341: PUSH
13342: LD_INT 0
13344: DOUBLE
13345: EQUAL
13346: IFTRUE 13350
13348: GO 13361
13350: POP
// lidi = 9 ; 1 :
13351: LD_ADDR_EXP 37
13355: PUSH
13356: LD_INT 9
13358: ST_TO_ADDR
13359: GO 13438
13361: LD_INT 1
13363: DOUBLE
13364: EQUAL
13365: IFTRUE 13369
13367: GO 13380
13369: POP
// lidi = 13 ; 2 :
13370: LD_ADDR_EXP 37
13374: PUSH
13375: LD_INT 13
13377: ST_TO_ADDR
13378: GO 13438
13380: LD_INT 2
13382: DOUBLE
13383: EQUAL
13384: IFTRUE 13388
13386: GO 13399
13388: POP
// lidi = 19 ; 3 :
13389: LD_ADDR_EXP 37
13393: PUSH
13394: LD_INT 19
13396: ST_TO_ADDR
13397: GO 13438
13399: LD_INT 3
13401: DOUBLE
13402: EQUAL
13403: IFTRUE 13407
13405: GO 13418
13407: POP
// lidi = 23 ; 4 :
13408: LD_ADDR_EXP 37
13412: PUSH
13413: LD_INT 23
13415: ST_TO_ADDR
13416: GO 13438
13418: LD_INT 4
13420: DOUBLE
13421: EQUAL
13422: IFTRUE 13426
13424: GO 13437
13426: POP
// lidi = 29 ; end ;
13427: LD_ADDR_EXP 37
13431: PUSH
13432: LD_INT 29
13434: ST_TO_ADDR
13435: GO 13438
13437: POP
// skilly = skilly + 1 ;
13438: LD_ADDR_LOC 35
13442: PUSH
13443: LD_LOC 35
13447: PUSH
13448: LD_INT 1
13450: PLUS
13451: ST_TO_ADDR
// case start_res of 0 :
13452: LD_LOC 36
13456: PUSH
13457: LD_INT 0
13459: DOUBLE
13460: EQUAL
13461: IFTRUE 13465
13463: GO 13476
13465: POP
// start_res = 0 ; 1 :
13466: LD_ADDR_LOC 36
13470: PUSH
13471: LD_INT 0
13473: ST_TO_ADDR
13474: GO 13534
13476: LD_INT 1
13478: DOUBLE
13479: EQUAL
13480: IFTRUE 13484
13482: GO 13495
13484: POP
// start_res = 50 ; 2 :
13485: LD_ADDR_LOC 36
13489: PUSH
13490: LD_INT 50
13492: ST_TO_ADDR
13493: GO 13534
13495: LD_INT 2
13497: DOUBLE
13498: EQUAL
13499: IFTRUE 13503
13501: GO 13514
13503: POP
// start_res = 100 ; 3 :
13504: LD_ADDR_LOC 36
13508: PUSH
13509: LD_INT 100
13511: ST_TO_ADDR
13512: GO 13534
13514: LD_INT 3
13516: DOUBLE
13517: EQUAL
13518: IFTRUE 13522
13520: GO 13533
13522: POP
// start_res = 200 ; end ;
13523: LD_ADDR_LOC 36
13527: PUSH
13528: LD_INT 200
13530: ST_TO_ADDR
13531: GO 13534
13533: POP
// case krabice of 0 :
13534: LD_EXP 38
13538: PUSH
13539: LD_INT 0
13541: DOUBLE
13542: EQUAL
13543: IFTRUE 13547
13545: GO 13558
13547: POP
// cperiode = 1 1$30 ; 1 :
13548: LD_ADDR_EXP 41
13552: PUSH
13553: LD_INT 3150
13555: ST_TO_ADDR
13556: GO 13597
13558: LD_INT 1
13560: DOUBLE
13561: EQUAL
13562: IFTRUE 13566
13564: GO 13577
13566: POP
// cperiode = 1 1$00 ; 2 :
13567: LD_ADDR_EXP 41
13571: PUSH
13572: LD_INT 2100
13574: ST_TO_ADDR
13575: GO 13597
13577: LD_INT 2
13579: DOUBLE
13580: EQUAL
13581: IFTRUE 13585
13583: GO 13596
13585: POP
// cperiode = 0 0$30 ; end ;
13586: LD_ADDR_EXP 41
13590: PUSH
13591: LD_INT 1050
13593: ST_TO_ADDR
13594: GO 13597
13596: POP
// case opoce of 0 :
13597: LD_EXP 39
13601: PUSH
13602: LD_INT 0
13604: DOUBLE
13605: EQUAL
13606: IFTRUE 13610
13608: GO 13621
13610: POP
// opoce = 0 ; 1 :
13611: LD_ADDR_EXP 39
13615: PUSH
13616: LD_INT 0
13618: ST_TO_ADDR
13619: GO 13736
13621: LD_INT 1
13623: DOUBLE
13624: EQUAL
13625: IFTRUE 13629
13627: GO 13640
13629: POP
// opoce = 3 ; 2 :
13630: LD_ADDR_EXP 39
13634: PUSH
13635: LD_INT 3
13637: ST_TO_ADDR
13638: GO 13736
13640: LD_INT 2
13642: DOUBLE
13643: EQUAL
13644: IFTRUE 13648
13646: GO 13659
13648: POP
// opoce = 7 ; 3 :
13649: LD_ADDR_EXP 39
13653: PUSH
13654: LD_INT 7
13656: ST_TO_ADDR
13657: GO 13736
13659: LD_INT 3
13661: DOUBLE
13662: EQUAL
13663: IFTRUE 13667
13665: GO 13678
13667: POP
// opoce = 11 ; 4 :
13668: LD_ADDR_EXP 39
13672: PUSH
13673: LD_INT 11
13675: ST_TO_ADDR
13676: GO 13736
13678: LD_INT 4
13680: DOUBLE
13681: EQUAL
13682: IFTRUE 13686
13684: GO 13697
13686: POP
// opoce = 15 ; 5 :
13687: LD_ADDR_EXP 39
13691: PUSH
13692: LD_INT 15
13694: ST_TO_ADDR
13695: GO 13736
13697: LD_INT 5
13699: DOUBLE
13700: EQUAL
13701: IFTRUE 13705
13703: GO 13716
13705: POP
// opoce = 19 ; 6 :
13706: LD_ADDR_EXP 39
13710: PUSH
13711: LD_INT 19
13713: ST_TO_ADDR
13714: GO 13736
13716: LD_INT 6
13718: DOUBLE
13719: EQUAL
13720: IFTRUE 13724
13722: GO 13735
13724: POP
// opoce = 23 ; end ;
13725: LD_ADDR_EXP 39
13729: PUSH
13730: LD_INT 23
13732: ST_TO_ADDR
13733: GO 13736
13735: POP
// fortpos = [ [ [ 46 , 53 , 4 ] , [ 51 , 62 , 4 ] ] , [ [ 167 , 53 , 1 ] , [ 173 , 64 , 1 ] ] ] ;
13736: LD_ADDR_LOC 44
13740: PUSH
13741: LD_INT 46
13743: PUSH
13744: LD_INT 53
13746: PUSH
13747: LD_INT 4
13749: PUSH
13750: EMPTY
13751: LIST
13752: LIST
13753: LIST
13754: PUSH
13755: LD_INT 51
13757: PUSH
13758: LD_INT 62
13760: PUSH
13761: LD_INT 4
13763: PUSH
13764: EMPTY
13765: LIST
13766: LIST
13767: LIST
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: PUSH
13773: LD_INT 167
13775: PUSH
13776: LD_INT 53
13778: PUSH
13779: LD_INT 1
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: LIST
13786: PUSH
13787: LD_INT 173
13789: PUSH
13790: LD_INT 64
13792: PUSH
13793: LD_INT 1
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: LIST
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: ST_TO_ADDR
// areasdiff = [ vlevodiff , vpravodiff ] ;
13809: LD_ADDR_LOC 45
13813: PUSH
13814: LD_INT 16
13816: PUSH
13817: LD_INT 17
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: ST_TO_ADDR
// directions = [ 4 , 1 ] ;
13824: LD_ADDR_LOC 46
13828: PUSH
13829: LD_INT 4
13831: PUSH
13832: LD_INT 1
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: ST_TO_ADDR
// for tmp = 1 to 8 do
13839: LD_ADDR_VAR 0 2
13843: PUSH
13844: DOUBLE
13845: LD_INT 1
13847: DEC
13848: ST_TO_ADDR
13849: LD_INT 8
13851: PUSH
13852: FOR_TO
13853: IFFALSE 15022
// if mp_sides_nations_ [ tmp ] then
13855: LD_EXP 49
13859: PUSH
13860: LD_VAR 0 2
13864: ARRAY
13865: IFFALSE 15020
// begin if mp_sides_positions_ [ tmp ] = 1 then
13867: LD_EXP 50
13871: PUSH
13872: LD_VAR 0 2
13876: ARRAY
13877: PUSH
13878: LD_INT 1
13880: EQUAL
13881: IFFALSE 13895
// pos1side = tmp else
13883: LD_ADDR_EXP 44
13887: PUSH
13888: LD_VAR 0 2
13892: ST_TO_ADDR
13893: GO 13905
// pos2side = tmp ;
13895: LD_ADDR_EXP 45
13899: PUSH
13900: LD_VAR 0 2
13904: ST_TO_ADDR
// uc_side = tmp ;
13905: LD_ADDR_OWVAR 20
13909: PUSH
13910: LD_VAR 0 2
13914: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ tmp ] ;
13915: LD_ADDR_OWVAR 21
13919: PUSH
13920: LD_EXP 49
13924: PUSH
13925: LD_VAR 0 2
13929: ARRAY
13930: ST_TO_ADDR
// bc_type = b_depot ;
13931: LD_ADDR_OWVAR 42
13935: PUSH
13936: LD_INT 0
13938: ST_TO_ADDR
// bc_level = 1 ;
13939: LD_ADDR_OWVAR 43
13943: PUSH
13944: LD_INT 1
13946: ST_TO_ADDR
// tmp2 = createandplacebuildingxyd ( depotpositions [ mp_sides_positions_ [ tmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 2 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 3 ] ) ;
13947: LD_ADDR_VAR 0 3
13951: PUSH
13952: LD_EXP 42
13956: PUSH
13957: LD_EXP 50
13961: PUSH
13962: LD_VAR 0 2
13966: ARRAY
13967: ARRAY
13968: PUSH
13969: LD_INT 1
13971: ARRAY
13972: PPUSH
13973: LD_EXP 42
13977: PUSH
13978: LD_EXP 50
13982: PUSH
13983: LD_VAR 0 2
13987: ARRAY
13988: ARRAY
13989: PUSH
13990: LD_INT 2
13992: ARRAY
13993: PPUSH
13994: LD_EXP 42
13998: PUSH
13999: LD_EXP 50
14003: PUSH
14004: LD_VAR 0 2
14008: ARRAY
14009: ARRAY
14010: PUSH
14011: LD_INT 3
14013: ARRAY
14014: PPUSH
14015: CALL_OW 47
14019: ST_TO_ADDR
// if batt_fl then
14020: LD_LOC 40
14024: IFFALSE 14134
// setbattleflag ( tmp , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 2 ] , [ [ bfo_defend_bonus_human , 80 ] , [ bfo_defend_bonus_vehicle , 40 ] , [ bfo_defend_bonus_building , 0 ] , [ bfo_range , 17 ] , [ bfo_height , 100 ] ] ) ;
14026: LD_VAR 0 2
14030: PPUSH
14031: LD_EXP 42
14035: PUSH
14036: LD_EXP 50
14040: PUSH
14041: LD_VAR 0 2
14045: ARRAY
14046: ARRAY
14047: PUSH
14048: LD_INT 1
14050: ARRAY
14051: PPUSH
14052: LD_EXP 42
14056: PUSH
14057: LD_EXP 50
14061: PUSH
14062: LD_VAR 0 2
14066: ARRAY
14067: ARRAY
14068: PUSH
14069: LD_INT 2
14071: ARRAY
14072: PPUSH
14073: LD_INT 1
14075: PUSH
14076: LD_INT 80
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: PUSH
14083: LD_INT 2
14085: PUSH
14086: LD_INT 40
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: PUSH
14093: LD_INT 3
14095: PUSH
14096: LD_INT 0
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PUSH
14103: LD_INT 10
14105: PUSH
14106: LD_INT 17
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: PUSH
14113: LD_INT 20
14115: PUSH
14116: LD_INT 100
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: PPUSH
14130: CALL_OW 418
// if zakladna then
14134: LD_LOC 34
14138: IFFALSE 14306
// begin bc_type = b_breastwork ;
14140: LD_ADDR_OWVAR 42
14144: PUSH
14145: LD_INT 31
14147: ST_TO_ADDR
// createandplacebuildingxyd ( fortpos [ mp_sides_positions_ [ tmp ] ] [ 1 ] [ 1 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 1 ] [ 2 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 1 ] [ 3 ] ) ;
14148: LD_LOC 44
14152: PUSH
14153: LD_EXP 50
14157: PUSH
14158: LD_VAR 0 2
14162: ARRAY
14163: ARRAY
14164: PUSH
14165: LD_INT 1
14167: ARRAY
14168: PUSH
14169: LD_INT 1
14171: ARRAY
14172: PPUSH
14173: LD_LOC 44
14177: PUSH
14178: LD_EXP 50
14182: PUSH
14183: LD_VAR 0 2
14187: ARRAY
14188: ARRAY
14189: PUSH
14190: LD_INT 1
14192: ARRAY
14193: PUSH
14194: LD_INT 2
14196: ARRAY
14197: PPUSH
14198: LD_LOC 44
14202: PUSH
14203: LD_EXP 50
14207: PUSH
14208: LD_VAR 0 2
14212: ARRAY
14213: ARRAY
14214: PUSH
14215: LD_INT 1
14217: ARRAY
14218: PUSH
14219: LD_INT 3
14221: ARRAY
14222: PPUSH
14223: CALL_OW 47
// createandplacebuildingxyd ( fortpos [ mp_sides_positions_ [ tmp ] ] [ 2 ] [ 1 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 2 ] [ 2 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 2 ] [ 3 ] ) ;
14227: LD_LOC 44
14231: PUSH
14232: LD_EXP 50
14236: PUSH
14237: LD_VAR 0 2
14241: ARRAY
14242: ARRAY
14243: PUSH
14244: LD_INT 2
14246: ARRAY
14247: PUSH
14248: LD_INT 1
14250: ARRAY
14251: PPUSH
14252: LD_LOC 44
14256: PUSH
14257: LD_EXP 50
14261: PUSH
14262: LD_VAR 0 2
14266: ARRAY
14267: ARRAY
14268: PUSH
14269: LD_INT 2
14271: ARRAY
14272: PUSH
14273: LD_INT 2
14275: ARRAY
14276: PPUSH
14277: LD_LOC 44
14281: PUSH
14282: LD_EXP 50
14286: PUSH
14287: LD_VAR 0 2
14291: ARRAY
14292: ARRAY
14293: PUSH
14294: LD_INT 2
14296: ARRAY
14297: PUSH
14298: LD_INT 3
14300: ARRAY
14301: PPUSH
14302: CALL_OW 47
// end ; addresourcetype ( getbase ( tmp2 ) , mat_cans , start_res ) ;
14306: LD_VAR 0 3
14310: PPUSH
14311: CALL_OW 274
14315: PPUSH
14316: LD_INT 1
14318: PPUSH
14319: LD_LOC 36
14323: PPUSH
14324: CALL_OW 276
// if extra_oil then
14328: LD_LOC 37
14332: IFFALSE 14424
// begin tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14334: LD_ADDR_VAR 0 3
14338: PUSH
14339: LD_LOC 45
14343: PUSH
14344: LD_EXP 50
14348: PUSH
14349: LD_VAR 0 2
14353: ARRAY
14354: ARRAY
14355: PPUSH
14356: LD_INT 0
14358: PPUSH
14359: CALL_OW 16
14363: ST_TO_ADDR
// while not createdepositxy ( tmp2 [ 1 ] , tmp2 [ 2 ] , mat_oil ) do
14364: LD_VAR 0 3
14368: PUSH
14369: LD_INT 1
14371: ARRAY
14372: PPUSH
14373: LD_VAR 0 3
14377: PUSH
14378: LD_INT 2
14380: ARRAY
14381: PPUSH
14382: LD_INT 2
14384: PPUSH
14385: CALL_OW 62
14389: NOT
14390: IFFALSE 14424
// tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14392: LD_ADDR_VAR 0 3
14396: PUSH
14397: LD_LOC 45
14401: PUSH
14402: LD_EXP 50
14406: PUSH
14407: LD_VAR 0 2
14411: ARRAY
14412: ARRAY
14413: PPUSH
14414: LD_INT 0
14416: PPUSH
14417: CALL_OW 16
14421: ST_TO_ADDR
14422: GO 14364
// end ; if extra_sib then
14424: LD_LOC 38
14428: IFFALSE 14520
// begin tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14430: LD_ADDR_VAR 0 3
14434: PUSH
14435: LD_LOC 45
14439: PUSH
14440: LD_EXP 50
14444: PUSH
14445: LD_VAR 0 2
14449: ARRAY
14450: ARRAY
14451: PPUSH
14452: LD_INT 0
14454: PPUSH
14455: CALL_OW 16
14459: ST_TO_ADDR
// while not createdepositxy ( tmp2 [ 1 ] , tmp2 [ 2 ] , mat_siberit ) do
14460: LD_VAR 0 3
14464: PUSH
14465: LD_INT 1
14467: ARRAY
14468: PPUSH
14469: LD_VAR 0 3
14473: PUSH
14474: LD_INT 2
14476: ARRAY
14477: PPUSH
14478: LD_INT 3
14480: PPUSH
14481: CALL_OW 62
14485: NOT
14486: IFFALSE 14520
// tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14488: LD_ADDR_VAR 0 3
14492: PUSH
14493: LD_LOC 45
14497: PUSH
14498: LD_EXP 50
14502: PUSH
14503: LD_VAR 0 2
14507: ARRAY
14508: ARRAY
14509: PPUSH
14510: LD_INT 0
14512: PPUSH
14513: CALL_OW 16
14517: ST_TO_ADDR
14518: GO 14460
// end ; if zakl_plus > 0 then
14520: LD_LOC 39
14524: PUSH
14525: LD_INT 0
14527: GREATER
14528: IFFALSE 14788
// begin bc_type = b_lab ;
14530: LD_ADDR_OWVAR 42
14534: PUSH
14535: LD_INT 6
14537: ST_TO_ADDR
// uc_direction = directions [ mp_sides_positions_ [ tmp ] ] ;
14538: LD_ADDR_OWVAR 24
14542: PUSH
14543: LD_LOC 46
14547: PUSH
14548: LD_EXP 50
14552: PUSH
14553: LD_VAR 0 2
14557: ARRAY
14558: ARRAY
14559: ST_TO_ADDR
// tmp3 = createbuilding ;
14560: LD_ADDR_VAR 0 4
14564: PUSH
14565: CALL_OW 46
14569: ST_TO_ADDR
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14570: LD_ADDR_VAR 0 3
14574: PUSH
14575: LD_EXP 43
14579: PUSH
14580: LD_EXP 50
14584: PUSH
14585: LD_VAR 0 2
14589: ARRAY
14590: ARRAY
14591: PPUSH
14592: LD_INT 0
14594: PPUSH
14595: CALL_OW 16
14599: ST_TO_ADDR
// while not placeunitxy ( tmp3 , tmp2 [ 1 ] , tmp2 [ 2 ] , false ) do
14600: LD_VAR 0 4
14604: PPUSH
14605: LD_VAR 0 3
14609: PUSH
14610: LD_INT 1
14612: ARRAY
14613: PPUSH
14614: LD_VAR 0 3
14618: PUSH
14619: LD_INT 2
14621: ARRAY
14622: PPUSH
14623: LD_INT 0
14625: PPUSH
14626: CALL_OW 48
14630: NOT
14631: IFFALSE 14665
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14633: LD_ADDR_VAR 0 3
14637: PUSH
14638: LD_EXP 43
14642: PUSH
14643: LD_EXP 50
14647: PUSH
14648: LD_VAR 0 2
14652: ARRAY
14653: ARRAY
14654: PPUSH
14655: LD_INT 0
14657: PPUSH
14658: CALL_OW 16
14662: ST_TO_ADDR
14663: GO 14600
// if zakl_plus > 1 then
14665: LD_LOC 39
14669: PUSH
14670: LD_INT 1
14672: GREATER
14673: IFFALSE 14788
// begin bc_type = b_workshop ;
14675: LD_ADDR_OWVAR 42
14679: PUSH
14680: LD_INT 2
14682: ST_TO_ADDR
// tmp3 = createbuilding ;
14683: LD_ADDR_VAR 0 4
14687: PUSH
14688: CALL_OW 46
14692: ST_TO_ADDR
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14693: LD_ADDR_VAR 0 3
14697: PUSH
14698: LD_EXP 43
14702: PUSH
14703: LD_EXP 50
14707: PUSH
14708: LD_VAR 0 2
14712: ARRAY
14713: ARRAY
14714: PPUSH
14715: LD_INT 0
14717: PPUSH
14718: CALL_OW 16
14722: ST_TO_ADDR
// while not placeunitxy ( tmp3 , tmp2 [ 1 ] , tmp2 [ 2 ] , false ) do
14723: LD_VAR 0 4
14727: PPUSH
14728: LD_VAR 0 3
14732: PUSH
14733: LD_INT 1
14735: ARRAY
14736: PPUSH
14737: LD_VAR 0 3
14741: PUSH
14742: LD_INT 2
14744: ARRAY
14745: PPUSH
14746: LD_INT 0
14748: PPUSH
14749: CALL_OW 48
14753: NOT
14754: IFFALSE 14788
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14756: LD_ADDR_VAR 0 3
14760: PUSH
14761: LD_EXP 43
14765: PUSH
14766: LD_EXP 50
14770: PUSH
14771: LD_VAR 0 2
14775: ARRAY
14776: ARRAY
14777: PPUSH
14778: LD_INT 0
14780: PPUSH
14781: CALL_OW 16
14785: ST_TO_ADDR
14786: GO 14723
// end ; end ; if batt_fl then
14788: LD_LOC 40
14792: IFFALSE 14902
// setbattleflag ( tmp , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 2 ] , [ [ bfo_defend_bonus_human , 80 ] , [ bfo_defend_bonus_vehicle , 40 ] , [ bfo_defend_bonus_building , 0 ] , [ bfo_range , 17 ] , [ bfo_height , 100 ] ] ) ;
14794: LD_VAR 0 2
14798: PPUSH
14799: LD_EXP 42
14803: PUSH
14804: LD_EXP 50
14808: PUSH
14809: LD_VAR 0 2
14813: ARRAY
14814: ARRAY
14815: PUSH
14816: LD_INT 1
14818: ARRAY
14819: PPUSH
14820: LD_EXP 42
14824: PUSH
14825: LD_EXP 50
14829: PUSH
14830: LD_VAR 0 2
14834: ARRAY
14835: ARRAY
14836: PUSH
14837: LD_INT 2
14839: ARRAY
14840: PPUSH
14841: LD_INT 1
14843: PUSH
14844: LD_INT 80
14846: PUSH
14847: EMPTY
14848: LIST
14849: LIST
14850: PUSH
14851: LD_INT 2
14853: PUSH
14854: LD_INT 40
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: PUSH
14861: LD_INT 3
14863: PUSH
14864: LD_INT 0
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: LD_INT 10
14873: PUSH
14874: LD_INT 17
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: PUSH
14881: LD_INT 20
14883: PUSH
14884: LD_INT 100
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: PUSH
14891: EMPTY
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: PPUSH
14898: CALL_OW 418
// cl = class_scientistic ;
14902: LD_ADDR_VAR 0 5
14906: PUSH
14907: LD_INT 4
14909: ST_TO_ADDR
// for tmp2 = 1 to lidi do
14910: LD_ADDR_VAR 0 3
14914: PUSH
14915: DOUBLE
14916: LD_INT 1
14918: DEC
14919: ST_TO_ADDR
14920: LD_EXP 37
14924: PUSH
14925: FOR_TO
14926: IFFALSE 15018
// begin if tmp2 >= lidi / 2 then
14928: LD_VAR 0 3
14932: PUSH
14933: LD_EXP 37
14937: PUSH
14938: LD_INT 2
14940: DIVREAL
14941: GREATEREQUAL
14942: IFFALSE 14952
// cl = class_soldier ;
14944: LD_ADDR_VAR 0 5
14948: PUSH
14949: LD_INT 1
14951: ST_TO_ADDR
// preparehuman ( 0 , cl , skilly ) ;
14952: LD_INT 0
14954: PPUSH
14955: LD_VAR 0 5
14959: PPUSH
14960: LD_LOC 35
14964: PPUSH
14965: CALL_OW 380
// if tmp2 = 1 then
14969: LD_VAR 0 3
14973: PUSH
14974: LD_INT 1
14976: EQUAL
14977: IFFALSE 14987
// cl = class_engineer ;
14979: LD_ADDR_VAR 0 5
14983: PUSH
14984: LD_INT 2
14986: ST_TO_ADDR
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14987: CALL_OW 44
14991: PPUSH
14992: LD_EXP 43
14996: PUSH
14997: LD_EXP 50
15001: PUSH
15002: LD_VAR 0 2
15006: ARRAY
15007: ARRAY
15008: PPUSH
15009: LD_INT 0
15011: PPUSH
15012: CALL_OW 49
// end ;
15016: GO 14925
15018: POP
15019: POP
// end ;
15020: GO 13852
15022: POP
15023: POP
// uc_side = 0 ;
15024: LD_ADDR_OWVAR 20
15028: PUSH
15029: LD_INT 0
15031: ST_TO_ADDR
// uc_nation = nation_nature ;
15032: LD_ADDR_OWVAR 21
15036: PUSH
15037: LD_INT 0
15039: ST_TO_ADDR
// for tmp = 1 to opoce do
15040: LD_ADDR_VAR 0 2
15044: PUSH
15045: DOUBLE
15046: LD_INT 1
15048: DEC
15049: ST_TO_ADDR
15050: LD_EXP 39
15054: PUSH
15055: FOR_TO
15056: IFFALSE 15088
// begin preparehuman ( 0 , class_apeman , 0 ) ;
15058: LD_INT 0
15060: PPUSH
15061: LD_INT 12
15063: PPUSH
15064: LD_INT 0
15066: PPUSH
15067: CALL_OW 380
// placeunitarea ( createhuman , les , false ) ;
15071: CALL_OW 44
15075: PPUSH
15076: LD_INT 4
15078: PPUSH
15079: LD_INT 0
15081: PPUSH
15082: CALL_OW 49
// end ;
15086: GO 15055
15088: POP
15089: POP
// case mp_sides_positions_ [ your_side ] of 1 :
15090: LD_EXP 50
15094: PUSH
15095: LD_OWVAR 2
15099: ARRAY
15100: PUSH
15101: LD_INT 1
15103: DOUBLE
15104: EQUAL
15105: IFTRUE 15109
15107: GO 15122
15109: POP
// centernowonxy ( 44 , 60 ) ; 2 :
15110: LD_INT 44
15112: PPUSH
15113: LD_INT 60
15115: PPUSH
15116: CALL_OW 86
15120: GO 15144
15122: LD_INT 2
15124: DOUBLE
15125: EQUAL
15126: IFTRUE 15130
15128: GO 15143
15130: POP
// centernowonxy ( 175 , 60 ) ; end ;
15131: LD_INT 175
15133: PPUSH
15134: LD_INT 60
15136: PPUSH
15137: CALL_OW 86
15141: GO 15144
15143: POP
// end ;
15144: LD_VAR 0 1
15148: RET
// on humandestroyed ( un , side , nat , x , y , dir , sex , cl ) marked 10 do if mp_sides_positions_ [ side ] = 1 then
15149: LD_EXP 50
15153: PUSH
15154: LD_VAR 0 2
15158: ARRAY
15159: PUSH
15160: LD_INT 1
15162: EQUAL
15163: IFFALSE 15181
// resp_cnt1 = resp_cnt1 + 1 else
15165: LD_ADDR_LOC 47
15169: PUSH
15170: LD_LOC 47
15174: PUSH
15175: LD_INT 1
15177: PLUS
15178: ST_TO_ADDR
15179: GO 15195
// resp_cnt2 = resp_cnt2 + 1 ;
15181: LD_ADDR_LOC 48
15185: PUSH
15186: LD_LOC 48
15190: PUSH
15191: LD_INT 1
15193: PLUS
15194: ST_TO_ADDR
15195: PPOPN 8
15197: END
// every 0 0$30 trigger resp_cnt1 >= people_resp marked 11 do
15198: LD_LOC 47
15202: PUSH
15203: LD_LOC 42
15207: GREATEREQUAL
15208: IFFALSE 15361
15210: GO 15212
15212: DISABLE
// begin resp_cnt1 = resp_cnt1 - people_resp ;
15213: LD_ADDR_LOC 47
15217: PUSH
15218: LD_LOC 47
15222: PUSH
15223: LD_LOC 42
15227: MINUS
15228: ST_TO_ADDR
// if not filterallunits ( [ [ f_side , pos1side ] , [ f_or , [ f_btype , b_depot ] , [ f_class , class_engineer ] ] ] ) then
15229: LD_INT 22
15231: PUSH
15232: LD_EXP 44
15236: PUSH
15237: EMPTY
15238: LIST
15239: LIST
15240: PUSH
15241: LD_INT 2
15243: PUSH
15244: LD_INT 30
15246: PUSH
15247: LD_INT 0
15249: PUSH
15250: EMPTY
15251: LIST
15252: LIST
15253: PUSH
15254: LD_INT 25
15256: PUSH
15257: LD_INT 2
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: PUSH
15264: EMPTY
15265: LIST
15266: LIST
15267: LIST
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: PPUSH
15273: CALL_OW 69
15277: NOT
15278: IFFALSE 15283
// begin enable ;
15280: ENABLE
// exit ;
15281: GO 15361
// end ; uc_side = pos1side ;
15283: LD_ADDR_OWVAR 20
15287: PUSH
15288: LD_EXP 44
15292: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos1side ] ;
15293: LD_ADDR_OWVAR 21
15297: PUSH
15298: LD_EXP 49
15302: PUSH
15303: LD_EXP 44
15307: ARRAY
15308: ST_TO_ADDR
// preparehuman ( 0 , class_soldier , skilly ) ;
15309: LD_INT 0
15311: PPUSH
15312: LD_INT 1
15314: PPUSH
15315: LD_LOC 35
15319: PPUSH
15320: CALL_OW 380
// wait ( 0 0$10 ) ;
15324: LD_INT 350
15326: PPUSH
15327: CALL_OW 67
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ pos1side ] ] , true ) ;
15331: CALL_OW 44
15335: PPUSH
15336: LD_EXP 43
15340: PUSH
15341: LD_EXP 50
15345: PUSH
15346: LD_EXP 44
15350: ARRAY
15351: ARRAY
15352: PPUSH
15353: LD_INT 1
15355: PPUSH
15356: CALL_OW 49
// enable ;
15360: ENABLE
// end ;
15361: END
// every 0 0$30 trigger resp_cnt2 >= people_resp marked 12 do
15362: LD_LOC 48
15366: PUSH
15367: LD_LOC 42
15371: GREATEREQUAL
15372: IFFALSE 15525
15374: GO 15376
15376: DISABLE
// begin resp_cnt2 = resp_cnt2 - people_resp ;
15377: LD_ADDR_LOC 48
15381: PUSH
15382: LD_LOC 48
15386: PUSH
15387: LD_LOC 42
15391: MINUS
15392: ST_TO_ADDR
// if not filterallunits ( [ [ f_side , pos2side ] , [ f_or , [ f_btype , b_depot ] , [ f_class , class_engineer ] ] ] ) then
15393: LD_INT 22
15395: PUSH
15396: LD_EXP 45
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: PUSH
15405: LD_INT 2
15407: PUSH
15408: LD_INT 30
15410: PUSH
15411: LD_INT 0
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PUSH
15418: LD_INT 25
15420: PUSH
15421: LD_INT 2
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: LIST
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: PPUSH
15437: CALL_OW 69
15441: NOT
15442: IFFALSE 15447
// begin enable ;
15444: ENABLE
// exit ;
15445: GO 15525
// end ; uc_side = pos2side ;
15447: LD_ADDR_OWVAR 20
15451: PUSH
15452: LD_EXP 45
15456: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos2side ] ;
15457: LD_ADDR_OWVAR 21
15461: PUSH
15462: LD_EXP 49
15466: PUSH
15467: LD_EXP 45
15471: ARRAY
15472: ST_TO_ADDR
// preparehuman ( 0 , class_soldier , skilly ) ;
15473: LD_INT 0
15475: PPUSH
15476: LD_INT 1
15478: PPUSH
15479: LD_LOC 35
15483: PPUSH
15484: CALL_OW 380
// wait ( 0 0$10 ) ;
15488: LD_INT 350
15490: PPUSH
15491: CALL_OW 67
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ pos2side ] ] , true ) ;
15495: CALL_OW 44
15499: PPUSH
15500: LD_EXP 43
15504: PUSH
15505: LD_EXP 50
15509: PUSH
15510: LD_EXP 45
15514: ARRAY
15515: ARRAY
15516: PPUSH
15517: LD_INT 1
15519: PPUSH
15520: CALL_OW 49
// enable ;
15524: ENABLE
// end ;
15525: END
// every 0 0$1 marked 13 do
15526: GO 15528
15528: DISABLE
// begin if not filterallunits ( [ [ f_side , pos1side ] , [ f_type , unit_human ] ] ) then
15529: LD_INT 22
15531: PUSH
15532: LD_EXP 44
15536: PUSH
15537: EMPTY
15538: LIST
15539: LIST
15540: PUSH
15541: LD_INT 21
15543: PUSH
15544: LD_INT 1
15546: PUSH
15547: EMPTY
15548: LIST
15549: LIST
15550: PUSH
15551: EMPTY
15552: LIST
15553: LIST
15554: PPUSH
15555: CALL_OW 69
15559: NOT
15560: IFFALSE 15584
// if pos1side = your_side then
15562: LD_EXP 44
15566: PUSH
15567: LD_OWVAR 2
15571: EQUAL
15572: IFFALSE 15580
// youlostinmultiplayer else
15574: CALL_OW 107
15578: GO 15584
// youwininmultiplayer ;
15580: CALL_OW 106
// if not filterallunits ( [ [ f_side , pos2side ] , [ f_type , unit_human ] ] ) then
15584: LD_INT 22
15586: PUSH
15587: LD_EXP 45
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PUSH
15596: LD_INT 21
15598: PUSH
15599: LD_INT 1
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PPUSH
15610: CALL_OW 69
15614: NOT
15615: IFFALSE 15639
// if pos2side = your_side then
15617: LD_EXP 45
15621: PUSH
15622: LD_OWVAR 2
15626: EQUAL
15627: IFFALSE 15635
// youlostinmultiplayer else
15629: CALL_OW 107
15633: GO 15639
// youwininmultiplayer ;
15635: CALL_OW 106
// end ; end_of_file
15639: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
15640: LD_INT 0
15642: PPUSH
15643: PPUSH
// for un in battle_flags_id do
15644: LD_ADDR_VAR 0 2
15648: PUSH
15649: LD_EXP 29
15653: PUSH
15654: FOR_IN
15655: IFFALSE 15730
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
15657: LD_VAR 0 2
15661: PPUSH
15662: LD_INT 1
15664: PUSH
15665: LD_LOC 49
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PUSH
15674: LD_INT 2
15676: PUSH
15677: LD_LOC 49
15681: PUSH
15682: LD_INT 2
15684: DIV
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PUSH
15690: LD_INT 3
15692: PUSH
15693: LD_LOC 49
15697: PUSH
15698: LD_INT 5
15700: DIV
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PUSH
15706: LD_INT 20
15708: PUSH
15709: LD_LOC 49
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: PPUSH
15724: CALL_OW 423
15728: GO 15654
15730: POP
15731: POP
// end ;
15732: LD_VAR 0 1
15736: RET
// every 0 0$0.1 marked 55 do var un ;
15737: GO 15739
15739: DISABLE
15740: LD_INT 0
15742: PPUSH
// begin if not def_morale_flags then
15743: LD_EXP 66
15747: NOT
15748: IFFALSE 15752
// exit ;
15750: GO 15829
// if not morale_decreasing_time then
15752: LD_EXP 11
15756: NOT
15757: IFFALSE 15761
// exit ;
15759: GO 15829
// strength = 100 ;
15761: LD_ADDR_LOC 49
15765: PUSH
15766: LD_INT 100
15768: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
15769: LD_EXP 11
15773: PPUSH
15774: CALL_OW 67
// strength := strength - 1 ;
15778: LD_ADDR_LOC 49
15782: PUSH
15783: LD_LOC 49
15787: PUSH
15788: LD_INT 1
15790: MINUS
15791: ST_TO_ADDR
// Update_Flags ;
15792: CALL 15640 0 0
// until not strength ;
15796: LD_LOC 49
15800: NOT
15801: IFFALSE 15769
// for un in battle_flags_id do
15803: LD_ADDR_VAR 0 1
15807: PUSH
15808: LD_EXP 29
15812: PUSH
15813: FOR_IN
15814: IFFALSE 15827
// KillBattleFlag ( un ) ;
15816: LD_VAR 0 1
15820: PPUSH
15821: CALL_OW 419
15825: GO 15813
15827: POP
15828: POP
// end ; end_of_file
15829: PPOPN 1
15831: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
15832: LD_INT 0
15834: PPUSH
15835: PPUSH
// if ( not IAmSpec ) then
15836: CALL_OW 531
15840: NOT
15841: IFFALSE 15857
// Result := Limits_Info ^  ;
15843: LD_ADDR_VAR 0 1
15847: PUSH
15848: LD_LOC 61
15852: PUSH
15853: LD_STRING 
15855: ADD
15856: ST_TO_ADDR
// for i := 1 to 8 do
15857: LD_ADDR_VAR 0 2
15861: PUSH
15862: DOUBLE
15863: LD_INT 1
15865: DEC
15866: ST_TO_ADDR
15867: LD_INT 8
15869: PUSH
15870: FOR_TO
15871: IFFALSE 15916
// if Cheaters [ i ] then
15873: LD_LOC 62
15877: PUSH
15878: LD_VAR 0 2
15882: ARRAY
15883: IFFALSE 15914
// Result := Result ^ [ #Cheater , i , i ] ;
15885: LD_ADDR_VAR 0 1
15889: PUSH
15890: LD_VAR 0 1
15894: PUSH
15895: LD_STRING #Cheater
15897: PUSH
15898: LD_VAR 0 2
15902: PUSH
15903: LD_VAR 0 2
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: LIST
15912: ADD
15913: ST_TO_ADDR
15914: GO 15870
15916: POP
15917: POP
// end ;
15918: LD_VAR 0 1
15922: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
15923: LD_INT 0
15925: PPUSH
15926: PPUSH
15927: PPUSH
15928: PPUSH
15929: PPUSH
// case Game_Type of 10 :
15930: LD_EXP 56
15934: PUSH
15935: LD_INT 10
15937: DOUBLE
15938: EQUAL
15939: IFTRUE 15943
15941: GO 15954
15943: POP
// def_game_rules := 1 ; 11 :
15944: LD_ADDR_EXP 57
15948: PUSH
15949: LD_INT 1
15951: ST_TO_ADDR
15952: GO 15974
15954: LD_INT 11
15956: DOUBLE
15957: EQUAL
15958: IFTRUE 15962
15960: GO 15973
15962: POP
// def_game_rules := 3 ; end ;
15963: LD_ADDR_EXP 57
15967: PUSH
15968: LD_INT 3
15970: ST_TO_ADDR
15971: GO 15974
15973: POP
// case def_game_rules of 0 :
15974: LD_EXP 57
15978: PUSH
15979: LD_INT 0
15981: DOUBLE
15982: EQUAL
15983: IFTRUE 15987
15985: GO 15992
15987: POP
// exit ; 1 :
15988: GO 18050
15990: GO 17950
15992: LD_INT 1
15994: DOUBLE
15995: EQUAL
15996: IFTRUE 16000
15998: GO 16216
16000: POP
// begin def_base_level := 2 ;
16001: LD_ADDR_EXP 58
16005: PUSH
16006: LD_INT 2
16008: ST_TO_ADDR
// def_amount_of_people := 2 ;
16009: LD_ADDR_EXP 59
16013: PUSH
16014: LD_INT 2
16016: ST_TO_ADDR
// def_skill_level := 1 ;
16017: LD_ADDR_EXP 60
16021: PUSH
16022: LD_INT 1
16024: ST_TO_ADDR
// def_starting_resources := 2 ;
16025: LD_ADDR_EXP 61
16029: PUSH
16030: LD_INT 2
16032: ST_TO_ADDR
// def_shipments_density := 1 ;
16033: LD_ADDR_EXP 62
16037: PUSH
16038: LD_INT 1
16040: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
16041: LD_ADDR_EXP 63
16045: PUSH
16046: LD_INT 0
16048: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
16049: LD_ADDR_EXP 64
16053: PUSH
16054: LD_INT 1
16056: ST_TO_ADDR
// def_shared_vision := 1 ;
16057: LD_ADDR_EXP 65
16061: PUSH
16062: LD_INT 1
16064: ST_TO_ADDR
// def_morale_flags := 3 ;
16065: LD_ADDR_EXP 66
16069: PUSH
16070: LD_INT 3
16072: ST_TO_ADDR
// def_siberite_detection := 1 ;
16073: LD_ADDR_EXP 67
16077: PUSH
16078: LD_INT 1
16080: ST_TO_ADDR
// def_people_respawning := 1 ;
16081: LD_ADDR_EXP 68
16085: PUSH
16086: LD_INT 1
16088: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
16089: LD_ADDR_EXP 69
16093: PUSH
16094: LD_INT 1
16096: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16097: LD_ADDR_EXP 70
16101: PUSH
16102: LD_INT 0
16104: ST_TO_ADDR
// def_builduptime := 2 ;
16105: LD_ADDR_EXP 71
16109: PUSH
16110: LD_INT 2
16112: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
16113: LD_ADDR_VAR 0 2
16117: PUSH
16118: EMPTY
16119: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
16120: LD_ADDR_VAR 0 3
16124: PUSH
16125: EMPTY
16126: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16127: LD_ADDR_LOC 56
16131: PUSH
16132: EMPTY
16133: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16134: LD_ADDR_LOC 57
16138: PUSH
16139: EMPTY
16140: ST_TO_ADDR
// Banned_Controls := [ ] ;
16141: LD_ADDR_LOC 58
16145: PUSH
16146: EMPTY
16147: ST_TO_ADDR
// Banned_Engines := [ ] ;
16148: LD_ADDR_LOC 59
16152: PUSH
16153: EMPTY
16154: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
16155: LD_ADDR_LOC 54
16159: PUSH
16160: LD_INT 37
16162: PUSH
16163: EMPTY
16164: LIST
16165: PUSH
16166: LD_INT 4
16168: PUSH
16169: LD_INT 5
16171: PUSH
16172: EMPTY
16173: LIST
16174: LIST
16175: PUSH
16176: LD_INT 31
16178: PUSH
16179: LD_INT 32
16181: PUSH
16182: LD_INT 33
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: LIST
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: LIST
16194: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
16195: LD_ADDR_LOC 55
16199: PUSH
16200: LD_INT 2
16202: PUSH
16203: LD_INT 2
16205: PUSH
16206: LD_INT 4
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: LIST
16213: ST_TO_ADDR
// end ; 2 :
16214: GO 17950
16216: LD_INT 2
16218: DOUBLE
16219: EQUAL
16220: IFTRUE 16224
16222: GO 16433
16224: POP
// begin def_base_level := 1 ;
16225: LD_ADDR_EXP 58
16229: PUSH
16230: LD_INT 1
16232: ST_TO_ADDR
// def_amount_of_people := 2 ;
16233: LD_ADDR_EXP 59
16237: PUSH
16238: LD_INT 2
16240: ST_TO_ADDR
// def_skill_level := 3 ;
16241: LD_ADDR_EXP 60
16245: PUSH
16246: LD_INT 3
16248: ST_TO_ADDR
// def_starting_resources := 3 ;
16249: LD_ADDR_EXP 61
16253: PUSH
16254: LD_INT 3
16256: ST_TO_ADDR
// def_shipments_density := 2 ;
16257: LD_ADDR_EXP 62
16261: PUSH
16262: LD_INT 2
16264: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
16265: LD_ADDR_EXP 63
16269: PUSH
16270: LD_INT 1
16272: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
16273: LD_ADDR_EXP 64
16277: PUSH
16278: LD_INT 2
16280: ST_TO_ADDR
// def_shared_vision := 1 ;
16281: LD_ADDR_EXP 65
16285: PUSH
16286: LD_INT 1
16288: ST_TO_ADDR
// def_morale_flags := 0 ;
16289: LD_ADDR_EXP 66
16293: PUSH
16294: LD_INT 0
16296: ST_TO_ADDR
// def_siberite_detection := 1 ;
16297: LD_ADDR_EXP 67
16301: PUSH
16302: LD_INT 1
16304: ST_TO_ADDR
// def_people_respawning := 0 ;
16305: LD_ADDR_EXP 68
16309: PUSH
16310: LD_INT 0
16312: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
16313: LD_ADDR_EXP 69
16317: PUSH
16318: LD_INT 0
16320: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16321: LD_ADDR_EXP 70
16325: PUSH
16326: LD_INT 0
16328: ST_TO_ADDR
// def_builduptime := 2 ;
16329: LD_ADDR_EXP 71
16333: PUSH
16334: LD_INT 2
16336: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
16337: LD_ADDR_VAR 0 2
16341: PUSH
16342: LD_INT 1
16344: PUSH
16345: EMPTY
16346: LIST
16347: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
16348: LD_ADDR_VAR 0 3
16352: PUSH
16353: EMPTY
16354: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16355: LD_ADDR_LOC 56
16359: PUSH
16360: EMPTY
16361: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16362: LD_ADDR_LOC 57
16366: PUSH
16367: EMPTY
16368: ST_TO_ADDR
// Banned_Controls := [ ] ;
16369: LD_ADDR_LOC 58
16373: PUSH
16374: EMPTY
16375: ST_TO_ADDR
// Banned_Engines := [ ] ;
16376: LD_ADDR_LOC 59
16380: PUSH
16381: EMPTY
16382: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
16383: LD_ADDR_LOC 54
16387: PUSH
16388: LD_INT 4
16390: PUSH
16391: LD_INT 5
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: PUSH
16398: LD_INT 31
16400: PUSH
16401: LD_INT 32
16403: PUSH
16404: LD_INT 33
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: LIST
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
16416: LD_ADDR_LOC 55
16420: PUSH
16421: LD_INT 1
16423: PUSH
16424: LD_INT 2
16426: PUSH
16427: EMPTY
16428: LIST
16429: LIST
16430: ST_TO_ADDR
// end ; 3 :
16431: GO 17950
16433: LD_INT 3
16435: DOUBLE
16436: EQUAL
16437: IFTRUE 16441
16439: GO 16684
16441: POP
// begin def_base_level := 1 ;
16442: LD_ADDR_EXP 58
16446: PUSH
16447: LD_INT 1
16449: ST_TO_ADDR
// def_amount_of_people := 2 ;
16450: LD_ADDR_EXP 59
16454: PUSH
16455: LD_INT 2
16457: ST_TO_ADDR
// def_skill_level := 3 ;
16458: LD_ADDR_EXP 60
16462: PUSH
16463: LD_INT 3
16465: ST_TO_ADDR
// def_starting_resources := 3 ;
16466: LD_ADDR_EXP 61
16470: PUSH
16471: LD_INT 3
16473: ST_TO_ADDR
// def_shipments_density := 1 ;
16474: LD_ADDR_EXP 62
16478: PUSH
16479: LD_INT 1
16481: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
16482: LD_ADDR_EXP 63
16486: PUSH
16487: LD_INT 0
16489: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
16490: LD_ADDR_EXP 64
16494: PUSH
16495: LD_INT 1
16497: ST_TO_ADDR
// def_shared_vision := 1 ;
16498: LD_ADDR_EXP 65
16502: PUSH
16503: LD_INT 1
16505: ST_TO_ADDR
// def_morale_flags := 0 ;
16506: LD_ADDR_EXP 66
16510: PUSH
16511: LD_INT 0
16513: ST_TO_ADDR
// def_siberite_detection := 1 ;
16514: LD_ADDR_EXP 67
16518: PUSH
16519: LD_INT 1
16521: ST_TO_ADDR
// def_people_respawning := 0 ;
16522: LD_ADDR_EXP 68
16526: PUSH
16527: LD_INT 0
16529: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
16530: LD_ADDR_EXP 69
16534: PUSH
16535: LD_INT 2
16537: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16538: LD_ADDR_EXP 70
16542: PUSH
16543: LD_INT 0
16545: ST_TO_ADDR
// def_builduptime := 1 ;
16546: LD_ADDR_EXP 71
16550: PUSH
16551: LD_INT 1
16553: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
16554: LD_ADDR_VAR 0 2
16558: PUSH
16559: LD_INT 23
16561: PUSH
16562: EMPTY
16563: LIST
16564: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
16565: LD_ADDR_VAR 0 3
16569: PUSH
16570: LD_INT 2
16572: PUSH
16573: LD_INT 37
16575: PUSH
16576: LD_INT 32
16578: PUSH
16579: LD_INT 33
16581: PUSH
16582: LD_INT 36
16584: PUSH
16585: LD_INT 16
16587: PUSH
16588: LD_INT 23
16590: PUSH
16591: LD_INT 21
16593: PUSH
16594: LD_INT 18
16596: PUSH
16597: LD_INT 22
16599: PUSH
16600: LD_INT 20
16602: PUSH
16603: LD_INT 19
16605: PUSH
16606: LD_INT 25
16608: PUSH
16609: LD_INT 17
16611: PUSH
16612: LD_INT 24
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16632: LD_ADDR_LOC 56
16636: PUSH
16637: EMPTY
16638: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16639: LD_ADDR_LOC 57
16643: PUSH
16644: EMPTY
16645: ST_TO_ADDR
// Banned_Controls := [ ] ;
16646: LD_ADDR_LOC 58
16650: PUSH
16651: EMPTY
16652: ST_TO_ADDR
// Banned_Engines := [ ] ;
16653: LD_ADDR_LOC 59
16657: PUSH
16658: EMPTY
16659: ST_TO_ADDR
// Restricted_Builds := [ ] ;
16660: LD_ADDR_LOC 54
16664: PUSH
16665: EMPTY
16666: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
16667: LD_ADDR_LOC 55
16671: PUSH
16672: EMPTY
16673: ST_TO_ADDR
// No_Mechs := true ;
16674: LD_ADDR_EXP 72
16678: PUSH
16679: LD_INT 1
16681: ST_TO_ADDR
// end ; 4 :
16682: GO 17950
16684: LD_INT 4
16686: DOUBLE
16687: EQUAL
16688: IFTRUE 16692
16690: GO 16867
16692: POP
// begin def_base_level := 1 ;
16693: LD_ADDR_EXP 58
16697: PUSH
16698: LD_INT 1
16700: ST_TO_ADDR
// def_amount_of_people := 2 ;
16701: LD_ADDR_EXP 59
16705: PUSH
16706: LD_INT 2
16708: ST_TO_ADDR
// def_skill_level := 3 ;
16709: LD_ADDR_EXP 60
16713: PUSH
16714: LD_INT 3
16716: ST_TO_ADDR
// def_starting_resources := 3 ;
16717: LD_ADDR_EXP 61
16721: PUSH
16722: LD_INT 3
16724: ST_TO_ADDR
// def_shipments_density := 2 ;
16725: LD_ADDR_EXP 62
16729: PUSH
16730: LD_INT 2
16732: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
16733: LD_ADDR_EXP 63
16737: PUSH
16738: LD_INT 1
16740: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
16741: LD_ADDR_EXP 64
16745: PUSH
16746: LD_INT 2
16748: ST_TO_ADDR
// def_shared_vision := 1 ;
16749: LD_ADDR_EXP 65
16753: PUSH
16754: LD_INT 1
16756: ST_TO_ADDR
// def_morale_flags := 0 ;
16757: LD_ADDR_EXP 66
16761: PUSH
16762: LD_INT 0
16764: ST_TO_ADDR
// def_siberite_detection := 1 ;
16765: LD_ADDR_EXP 67
16769: PUSH
16770: LD_INT 1
16772: ST_TO_ADDR
// def_people_respawning := 0 ;
16773: LD_ADDR_EXP 68
16777: PUSH
16778: LD_INT 0
16780: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
16781: LD_ADDR_EXP 69
16785: PUSH
16786: LD_INT 0
16788: ST_TO_ADDR
// def_siberite_bomb := 1 ;
16789: LD_ADDR_EXP 70
16793: PUSH
16794: LD_INT 1
16796: ST_TO_ADDR
// def_builduptime := 3 ;
16797: LD_ADDR_EXP 71
16801: PUSH
16802: LD_INT 3
16804: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
16805: LD_ADDR_VAR 0 2
16809: PUSH
16810: LD_INT 1
16812: PUSH
16813: EMPTY
16814: LIST
16815: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
16816: LD_ADDR_VAR 0 3
16820: PUSH
16821: EMPTY
16822: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16823: LD_ADDR_LOC 56
16827: PUSH
16828: EMPTY
16829: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16830: LD_ADDR_LOC 57
16834: PUSH
16835: EMPTY
16836: ST_TO_ADDR
// Banned_Controls := [ ] ;
16837: LD_ADDR_LOC 58
16841: PUSH
16842: EMPTY
16843: ST_TO_ADDR
// Banned_Engines := [ ] ;
16844: LD_ADDR_LOC 59
16848: PUSH
16849: EMPTY
16850: ST_TO_ADDR
// Restricted_Builds := [ ] ;
16851: LD_ADDR_LOC 54
16855: PUSH
16856: EMPTY
16857: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
16858: LD_ADDR_LOC 55
16862: PUSH
16863: EMPTY
16864: ST_TO_ADDR
// end ; 5 :
16865: GO 17950
16867: LD_INT 5
16869: DOUBLE
16870: EQUAL
16871: IFTRUE 16875
16873: GO 17124
16875: POP
// begin def_base_level := 0 ;
16876: LD_ADDR_EXP 58
16880: PUSH
16881: LD_INT 0
16883: ST_TO_ADDR
// def_amount_of_people := 0 ;
16884: LD_ADDR_EXP 59
16888: PUSH
16889: LD_INT 0
16891: ST_TO_ADDR
// def_skill_level := 0 ;
16892: LD_ADDR_EXP 60
16896: PUSH
16897: LD_INT 0
16899: ST_TO_ADDR
// def_starting_resources := 0 ;
16900: LD_ADDR_EXP 61
16904: PUSH
16905: LD_INT 0
16907: ST_TO_ADDR
// def_shipments_density := 0 ;
16908: LD_ADDR_EXP 62
16912: PUSH
16913: LD_INT 0
16915: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
16916: LD_ADDR_EXP 63
16920: PUSH
16921: LD_INT 0
16923: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
16924: LD_ADDR_EXP 64
16928: PUSH
16929: LD_INT 0
16931: ST_TO_ADDR
// def_shared_vision := 1 ;
16932: LD_ADDR_EXP 65
16936: PUSH
16937: LD_INT 1
16939: ST_TO_ADDR
// def_morale_flags := 0 ;
16940: LD_ADDR_EXP 66
16944: PUSH
16945: LD_INT 0
16947: ST_TO_ADDR
// def_siberite_detection := 0 ;
16948: LD_ADDR_EXP 67
16952: PUSH
16953: LD_INT 0
16955: ST_TO_ADDR
// def_people_respawning := 1 ;
16956: LD_ADDR_EXP 68
16960: PUSH
16961: LD_INT 1
16963: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
16964: LD_ADDR_EXP 69
16968: PUSH
16969: LD_INT 1
16971: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16972: LD_ADDR_EXP 70
16976: PUSH
16977: LD_INT 0
16979: ST_TO_ADDR
// def_builduptime := 0 ;
16980: LD_ADDR_EXP 71
16984: PUSH
16985: LD_INT 0
16987: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
16988: LD_ADDR_VAR 0 2
16992: PUSH
16993: LD_INT 10
16995: PUSH
16996: LD_INT 3
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
17003: LD_ADDR_VAR 0 3
17007: PUSH
17008: LD_INT 12
17010: PUSH
17011: LD_INT 11
17013: PUSH
17014: LD_INT 14
17016: PUSH
17017: LD_INT 13
17019: PUSH
17020: LD_INT 5
17022: PUSH
17023: LD_INT 24
17025: PUSH
17026: LD_INT 21
17028: PUSH
17029: LD_INT 33
17031: PUSH
17032: LD_INT 36
17034: PUSH
17035: EMPTY
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
17046: LD_ADDR_LOC 56
17050: PUSH
17051: LD_INT 31
17053: PUSH
17054: EMPTY
17055: LIST
17056: ST_TO_ADDR
// Banned_Chassis := [ ] ;
17057: LD_ADDR_LOC 57
17061: PUSH
17062: EMPTY
17063: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
17064: LD_ADDR_LOC 58
17068: PUSH
17069: LD_INT 2
17071: PUSH
17072: EMPTY
17073: LIST
17074: ST_TO_ADDR
// Banned_Engines := [ ] ;
17075: LD_ADDR_LOC 59
17079: PUSH
17080: EMPTY
17081: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
17082: LD_ADDR_LOC 54
17086: PUSH
17087: LD_INT 4
17089: PUSH
17090: EMPTY
17091: LIST
17092: PUSH
17093: LD_INT 31
17095: PUSH
17096: LD_INT 32
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
17107: LD_ADDR_LOC 55
17111: PUSH
17112: LD_INT 1
17114: PUSH
17115: LD_INT 1
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: ST_TO_ADDR
// end ; 6 :
17122: GO 17950
17124: LD_INT 6
17126: DOUBLE
17127: EQUAL
17128: IFTRUE 17132
17130: GO 17335
17132: POP
// begin def_base_level := 1 ;
17133: LD_ADDR_EXP 58
17137: PUSH
17138: LD_INT 1
17140: ST_TO_ADDR
// def_amount_of_people := 2 ;
17141: LD_ADDR_EXP 59
17145: PUSH
17146: LD_INT 2
17148: ST_TO_ADDR
// def_skill_level := 3 ;
17149: LD_ADDR_EXP 60
17153: PUSH
17154: LD_INT 3
17156: ST_TO_ADDR
// def_starting_resources := 3 ;
17157: LD_ADDR_EXP 61
17161: PUSH
17162: LD_INT 3
17164: ST_TO_ADDR
// def_shipments_density := 1 ;
17165: LD_ADDR_EXP 62
17169: PUSH
17170: LD_INT 1
17172: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
17173: LD_ADDR_EXP 63
17177: PUSH
17178: LD_INT 0
17180: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
17181: LD_ADDR_EXP 64
17185: PUSH
17186: LD_INT 1
17188: ST_TO_ADDR
// def_shared_vision := 1 ;
17189: LD_ADDR_EXP 65
17193: PUSH
17194: LD_INT 1
17196: ST_TO_ADDR
// def_morale_flags := 0 ;
17197: LD_ADDR_EXP 66
17201: PUSH
17202: LD_INT 0
17204: ST_TO_ADDR
// def_siberite_detection := 1 ;
17205: LD_ADDR_EXP 67
17209: PUSH
17210: LD_INT 1
17212: ST_TO_ADDR
// def_people_respawning := 2 ;
17213: LD_ADDR_EXP 68
17217: PUSH
17218: LD_INT 2
17220: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
17221: LD_ADDR_EXP 69
17225: PUSH
17226: LD_INT 1
17228: ST_TO_ADDR
// def_siberite_bomb := 0 ;
17229: LD_ADDR_EXP 70
17233: PUSH
17234: LD_INT 0
17236: ST_TO_ADDR
// def_builduptime := 1 ;
17237: LD_ADDR_EXP 71
17241: PUSH
17242: LD_INT 1
17244: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
17245: LD_ADDR_VAR 0 2
17249: PUSH
17250: LD_INT 23
17252: PUSH
17253: EMPTY
17254: LIST
17255: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
17256: LD_ADDR_VAR 0 3
17260: PUSH
17261: LD_INT 2
17263: PUSH
17264: LD_INT 37
17266: PUSH
17267: LD_INT 31
17269: PUSH
17270: LD_INT 32
17272: PUSH
17273: LD_INT 33
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: ST_TO_ADDR
// Banned_Weapons := [ ] ;
17283: LD_ADDR_LOC 56
17287: PUSH
17288: EMPTY
17289: ST_TO_ADDR
// Banned_Chassis := [ ] ;
17290: LD_ADDR_LOC 57
17294: PUSH
17295: EMPTY
17296: ST_TO_ADDR
// Banned_Controls := [ ] ;
17297: LD_ADDR_LOC 58
17301: PUSH
17302: EMPTY
17303: ST_TO_ADDR
// Banned_Engines := [ ] ;
17304: LD_ADDR_LOC 59
17308: PUSH
17309: EMPTY
17310: ST_TO_ADDR
// Restricted_Builds := [ ] ;
17311: LD_ADDR_LOC 54
17315: PUSH
17316: EMPTY
17317: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
17318: LD_ADDR_LOC 55
17322: PUSH
17323: EMPTY
17324: ST_TO_ADDR
// No_Mechs := true ;
17325: LD_ADDR_EXP 72
17329: PUSH
17330: LD_INT 1
17332: ST_TO_ADDR
// end ; 7 :
17333: GO 17950
17335: LD_INT 7
17337: DOUBLE
17338: EQUAL
17339: IFTRUE 17343
17341: GO 17541
17343: POP
// begin def_base_level := 1 ;
17344: LD_ADDR_EXP 58
17348: PUSH
17349: LD_INT 1
17351: ST_TO_ADDR
// def_amount_of_people := 2 ;
17352: LD_ADDR_EXP 59
17356: PUSH
17357: LD_INT 2
17359: ST_TO_ADDR
// def_skill_level := 3 ;
17360: LD_ADDR_EXP 60
17364: PUSH
17365: LD_INT 3
17367: ST_TO_ADDR
// def_starting_resources := 3 ;
17368: LD_ADDR_EXP 61
17372: PUSH
17373: LD_INT 3
17375: ST_TO_ADDR
// def_shipments_density := 1 ;
17376: LD_ADDR_EXP 62
17380: PUSH
17381: LD_INT 1
17383: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
17384: LD_ADDR_EXP 63
17388: PUSH
17389: LD_INT 1
17391: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
17392: LD_ADDR_EXP 64
17396: PUSH
17397: LD_INT 2
17399: ST_TO_ADDR
// def_shared_vision := 1 ;
17400: LD_ADDR_EXP 65
17404: PUSH
17405: LD_INT 1
17407: ST_TO_ADDR
// def_morale_flags := 0 ;
17408: LD_ADDR_EXP 66
17412: PUSH
17413: LD_INT 0
17415: ST_TO_ADDR
// def_siberite_detection := 1 ;
17416: LD_ADDR_EXP 67
17420: PUSH
17421: LD_INT 1
17423: ST_TO_ADDR
// def_people_respawning := 0 ;
17424: LD_ADDR_EXP 68
17428: PUSH
17429: LD_INT 0
17431: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
17432: LD_ADDR_EXP 69
17436: PUSH
17437: LD_INT 1
17439: ST_TO_ADDR
// def_siberite_bomb := 0 ;
17440: LD_ADDR_EXP 70
17444: PUSH
17445: LD_INT 0
17447: ST_TO_ADDR
// def_builduptime := 3 ;
17448: LD_ADDR_EXP 71
17452: PUSH
17453: LD_INT 3
17455: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
17456: LD_ADDR_VAR 0 2
17460: PUSH
17461: LD_INT 23
17463: PUSH
17464: EMPTY
17465: LIST
17466: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
17467: LD_ADDR_VAR 0 3
17471: PUSH
17472: LD_INT 37
17474: PUSH
17475: EMPTY
17476: LIST
17477: ST_TO_ADDR
// Banned_Weapons := [ ] ;
17478: LD_ADDR_LOC 56
17482: PUSH
17483: EMPTY
17484: ST_TO_ADDR
// Banned_Chassis := [ ] ;
17485: LD_ADDR_LOC 57
17489: PUSH
17490: EMPTY
17491: ST_TO_ADDR
// Banned_Controls := [ ] ;
17492: LD_ADDR_LOC 58
17496: PUSH
17497: EMPTY
17498: ST_TO_ADDR
// Banned_Engines := [ ] ;
17499: LD_ADDR_LOC 59
17503: PUSH
17504: EMPTY
17505: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
17506: LD_ADDR_LOC 54
17510: PUSH
17511: LD_INT 31
17513: PUSH
17514: LD_INT 32
17516: PUSH
17517: LD_INT 33
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: LIST
17524: PUSH
17525: EMPTY
17526: LIST
17527: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
17528: LD_ADDR_LOC 55
17532: PUSH
17533: LD_INT 10
17535: PUSH
17536: EMPTY
17537: LIST
17538: ST_TO_ADDR
// end ; 8 :
17539: GO 17950
17541: LD_INT 8
17543: DOUBLE
17544: EQUAL
17545: IFTRUE 17549
17547: GO 17949
17549: POP
// begin def_base_level := 0 ;
17550: LD_ADDR_EXP 58
17554: PUSH
17555: LD_INT 0
17557: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
17558: LD_ADDR_EXP 59
17562: PUSH
17563: LD_INT 0
17565: PPUSH
17566: LD_INT 1
17568: PPUSH
17569: CALL_OW 12
17573: ST_TO_ADDR
// def_skill_level := 0 ;
17574: LD_ADDR_EXP 60
17578: PUSH
17579: LD_INT 0
17581: ST_TO_ADDR
// def_starting_resources := 2 ;
17582: LD_ADDR_EXP 61
17586: PUSH
17587: LD_INT 2
17589: ST_TO_ADDR
// def_shipments_density := 1 ;
17590: LD_ADDR_EXP 62
17594: PUSH
17595: LD_INT 1
17597: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
17598: LD_ADDR_EXP 63
17602: PUSH
17603: LD_INT 0
17605: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
17606: LD_ADDR_EXP 64
17610: PUSH
17611: LD_INT 0
17613: ST_TO_ADDR
// def_shared_vision := 1 ;
17614: LD_ADDR_EXP 65
17618: PUSH
17619: LD_INT 1
17621: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
17622: LD_ADDR_EXP 66
17626: PUSH
17627: LD_INT 0
17629: PPUSH
17630: LD_INT 2
17632: PPUSH
17633: CALL_OW 12
17637: ST_TO_ADDR
// def_siberite_detection := 0 ;
17638: LD_ADDR_EXP 67
17642: PUSH
17643: LD_INT 0
17645: ST_TO_ADDR
// def_people_respawning := 0 ;
17646: LD_ADDR_EXP 68
17650: PUSH
17651: LD_INT 0
17653: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
17654: LD_ADDR_EXP 69
17658: PUSH
17659: LD_INT 2
17661: ST_TO_ADDR
// def_siberite_bomb := 0 ;
17662: LD_ADDR_EXP 70
17666: PUSH
17667: LD_INT 0
17669: ST_TO_ADDR
// def_builduptime := 0 ;
17670: LD_ADDR_EXP 71
17674: PUSH
17675: LD_INT 0
17677: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
17678: LD_ADDR_VAR 0 2
17682: PUSH
17683: LD_INT 23
17685: PUSH
17686: LD_INT 20
17688: PUSH
17689: LD_INT 40
17691: PUSH
17692: LD_INT 47
17694: PUSH
17695: LD_INT 46
17697: PUSH
17698: LD_INT 39
17700: PUSH
17701: LD_INT 71
17703: PUSH
17704: LD_INT 34
17706: PUSH
17707: LD_INT 41
17709: PUSH
17710: LD_INT 44
17712: PUSH
17713: LD_INT 17
17715: PUSH
17716: LD_INT 16
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
17733: LD_ADDR_VAR 0 3
17737: PUSH
17738: LD_INT 37
17740: PUSH
17741: LD_INT 5
17743: PUSH
17744: LD_INT 13
17746: PUSH
17747: LD_INT 34
17749: PUSH
17750: LD_INT 12
17752: PUSH
17753: LD_INT 15
17755: PUSH
17756: LD_INT 11
17758: PUSH
17759: LD_INT 14
17761: PUSH
17762: LD_INT 29
17764: PUSH
17765: LD_INT 30
17767: PUSH
17768: LD_INT 28
17770: PUSH
17771: LD_INT 24
17773: PUSH
17774: LD_INT 25
17776: PUSH
17777: LD_INT 20
17779: PUSH
17780: LD_INT 21
17782: PUSH
17783: LD_INT 22
17785: PUSH
17786: LD_INT 36
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: ST_TO_ADDR
// Banned_Weapons := [ ] ;
17808: LD_ADDR_LOC 56
17812: PUSH
17813: EMPTY
17814: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
17815: LD_ADDR_LOC 57
17819: PUSH
17820: LD_INT 14
17822: PUSH
17823: EMPTY
17824: LIST
17825: ST_TO_ADDR
// Banned_Controls := [ ] ;
17826: LD_ADDR_LOC 58
17830: PUSH
17831: EMPTY
17832: ST_TO_ADDR
// Banned_Engines := [ ] ;
17833: LD_ADDR_LOC 59
17837: PUSH
17838: EMPTY
17839: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
17840: LD_ADDR_LOC 54
17844: PUSH
17845: LD_INT 31
17847: PUSH
17848: LD_INT 32
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: LD_INT 4
17857: PUSH
17858: EMPTY
17859: LIST
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
17865: LD_ADDR_LOC 55
17869: PUSH
17870: LD_INT 2
17872: PUSH
17873: LD_INT 1
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: ST_TO_ADDR
// for i := 1 to 8 do
17880: LD_ADDR_VAR 0 4
17884: PUSH
17885: DOUBLE
17886: LD_INT 1
17888: DEC
17889: ST_TO_ADDR
17890: LD_INT 8
17892: PUSH
17893: FOR_TO
17894: IFFALSE 17945
// if ( Side_Nations [ i ] = 3 ) then
17896: LD_EXP 19
17900: PUSH
17901: LD_VAR 0 4
17905: ARRAY
17906: PUSH
17907: LD_INT 3
17909: EQUAL
17910: IFFALSE 17943
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
17912: LD_ADDR_EXP 19
17916: PUSH
17917: LD_EXP 19
17921: PPUSH
17922: LD_VAR 0 4
17926: PPUSH
17927: LD_INT 1
17929: PPUSH
17930: LD_INT 2
17932: PPUSH
17933: CALL_OW 12
17937: PPUSH
17938: CALL_OW 1
17942: ST_TO_ADDR
17943: GO 17893
17945: POP
17946: POP
// end ; end ;
17947: GO 17950
17949: POP
// for i := 1 to 8 do
17950: LD_ADDR_VAR 0 4
17954: PUSH
17955: DOUBLE
17956: LD_INT 1
17958: DEC
17959: ST_TO_ADDR
17960: LD_INT 8
17962: PUSH
17963: FOR_TO
17964: IFFALSE 18048
// if Side_Positions [ i ] then
17966: LD_EXP 18
17970: PUSH
17971: LD_VAR 0 4
17975: ARRAY
17976: IFFALSE 18046
// begin for j in Unavailable_Techs do
17978: LD_ADDR_VAR 0 5
17982: PUSH
17983: LD_VAR 0 2
17987: PUSH
17988: FOR_IN
17989: IFFALSE 18010
// SetTech ( j , i , 0 ) ;
17991: LD_VAR 0 5
17995: PPUSH
17996: LD_VAR 0 4
18000: PPUSH
18001: LD_INT 0
18003: PPUSH
18004: CALL_OW 322
18008: GO 17988
18010: POP
18011: POP
// for j in Unavailable_Builds do
18012: LD_ADDR_VAR 0 5
18016: PUSH
18017: LD_VAR 0 3
18021: PUSH
18022: FOR_IN
18023: IFFALSE 18044
// SetRestrict ( j , i , 0 ) ;
18025: LD_VAR 0 5
18029: PPUSH
18030: LD_VAR 0 4
18034: PPUSH
18035: LD_INT 0
18037: PPUSH
18038: CALL_OW 324
18042: GO 18022
18044: POP
18045: POP
// end ;
18046: GO 17963
18048: POP
18049: POP
// end ;
18050: LD_VAR 0 1
18054: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
18055: LD_INT 0
18057: PPUSH
18058: PPUSH
18059: PPUSH
18060: PPUSH
18061: PPUSH
18062: PPUSH
18063: PPUSH
// for i := 1 to Restricted_Builds do
18064: LD_ADDR_VAR 0 2
18068: PUSH
18069: DOUBLE
18070: LD_INT 1
18072: DEC
18073: ST_TO_ADDR
18074: LD_LOC 54
18078: PUSH
18079: FOR_TO
18080: IFFALSE 18390
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
18082: LD_LOC 54
18086: PUSH
18087: LD_VAR 0 2
18091: ARRAY
18092: PUSH
18093: LD_INT 1
18095: ARRAY
18096: PUSH
18097: LD_INT 31
18099: DOUBLE
18100: EQUAL
18101: IFTRUE 18117
18103: LD_INT 32
18105: DOUBLE
18106: EQUAL
18107: IFTRUE 18117
18109: LD_INT 33
18111: DOUBLE
18112: EQUAL
18113: IFTRUE 18117
18115: GO 18128
18117: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
18118: LD_ADDR_VAR 0 6
18122: PUSH
18123: LD_STRING #Turrets
18125: ST_TO_ADDR
18126: GO 18173
18128: LD_INT 4
18130: DOUBLE
18131: EQUAL
18132: IFTRUE 18142
18134: LD_INT 5
18136: DOUBLE
18137: EQUAL
18138: IFTRUE 18142
18140: GO 18153
18142: POP
// btype := #Armouries ; b_Behemoth :
18143: LD_ADDR_VAR 0 6
18147: PUSH
18148: LD_STRING #Armouries
18150: ST_TO_ADDR
18151: GO 18173
18153: LD_INT 37
18155: DOUBLE
18156: EQUAL
18157: IFTRUE 18161
18159: GO 18172
18161: POP
// btype := #Behemoths ; end ;
18162: LD_ADDR_VAR 0 6
18166: PUSH
18167: LD_STRING #Behemoths
18169: ST_TO_ADDR
18170: GO 18173
18172: POP
// list := [ ] ;
18173: LD_ADDR_VAR 0 7
18177: PUSH
18178: EMPTY
18179: ST_TO_ADDR
// for j := 1 to 8 do
18180: LD_ADDR_VAR 0 3
18184: PUSH
18185: DOUBLE
18186: LD_INT 1
18188: DEC
18189: ST_TO_ADDR
18190: LD_INT 8
18192: PUSH
18193: FOR_TO
18194: IFFALSE 18287
// if Side_Positions [ j ] then
18196: LD_EXP 18
18200: PUSH
18201: LD_VAR 0 3
18205: ARRAY
18206: IFFALSE 18285
// begin amount := 0 ;
18208: LD_ADDR_VAR 0 5
18212: PUSH
18213: LD_INT 0
18215: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
18216: LD_ADDR_VAR 0 4
18220: PUSH
18221: LD_LOC 54
18225: PUSH
18226: LD_VAR 0 2
18230: ARRAY
18231: PUSH
18232: FOR_IN
18233: IFFALSE 18281
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
18235: LD_ADDR_VAR 0 5
18239: PUSH
18240: LD_VAR 0 5
18244: PUSH
18245: LD_INT 22
18247: PUSH
18248: LD_VAR 0 3
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: LD_INT 30
18259: PUSH
18260: LD_VAR 0 4
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: PPUSH
18273: CALL_OW 69
18277: PLUS
18278: ST_TO_ADDR
18279: GO 18232
18281: POP
18282: POP
// break ;
18283: GO 18287
// end ;
18285: GO 18193
18287: POP
18288: POP
// list := [ ] ;
18289: LD_ADDR_VAR 0 7
18293: PUSH
18294: EMPTY
18295: ST_TO_ADDR
// for j := 1 to 8 do
18296: LD_ADDR_VAR 0 3
18300: PUSH
18301: DOUBLE
18302: LD_INT 1
18304: DEC
18305: ST_TO_ADDR
18306: LD_INT 8
18308: PUSH
18309: FOR_TO
18310: IFFALSE 18330
// list := list ^ amount ;
18312: LD_ADDR_VAR 0 7
18316: PUSH
18317: LD_VAR 0 7
18321: PUSH
18322: LD_VAR 0 5
18326: ADD
18327: ST_TO_ADDR
18328: GO 18309
18330: POP
18331: POP
// Already_Built := Already_Built ^ [ list ] ;
18332: LD_ADDR_LOC 60
18336: PUSH
18337: LD_LOC 60
18341: PUSH
18342: LD_VAR 0 7
18346: PUSH
18347: EMPTY
18348: LIST
18349: ADD
18350: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
18351: LD_ADDR_LOC 61
18355: PUSH
18356: LD_LOC 61
18360: PUSH
18361: LD_VAR 0 6
18365: PUSH
18366: LD_VAR 0 5
18370: PUSH
18371: LD_LOC 55
18375: PUSH
18376: LD_VAR 0 2
18380: ARRAY
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: LIST
18386: ADD
18387: ST_TO_ADDR
// end ;
18388: GO 18079
18390: POP
18391: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
18392: LD_ADDR_LOC 62
18396: PUSH
18397: LD_INT 0
18399: PUSH
18400: LD_INT 0
18402: PUSH
18403: LD_INT 0
18405: PUSH
18406: LD_INT 0
18408: PUSH
18409: LD_INT 0
18411: PUSH
18412: LD_INT 0
18414: PUSH
18415: LD_INT 0
18417: PUSH
18418: LD_INT 0
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: ST_TO_ADDR
// if Limits_Info then
18431: LD_LOC 61
18435: IFFALSE 18451
// Limits_Info := #Limits ^ Limits_Info ;
18437: LD_ADDR_LOC 61
18441: PUSH
18442: LD_STRING #Limits
18444: PUSH
18445: LD_LOC 61
18449: ADD
18450: ST_TO_ADDR
// end ;
18451: LD_VAR 0 1
18455: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
18456: LD_INT 0
18458: PPUSH
18459: PPUSH
18460: PPUSH
18461: PPUSH
// for i := 1 to Restricted_Builds do
18462: LD_ADDR_VAR 0 7
18466: PUSH
18467: DOUBLE
18468: LD_INT 1
18470: DEC
18471: ST_TO_ADDR
18472: LD_LOC 54
18476: PUSH
18477: FOR_TO
18478: IFFALSE 18901
// if BType in Restricted_Builds [ i ] then
18480: LD_VAR 0 2
18484: PUSH
18485: LD_LOC 54
18489: PUSH
18490: LD_VAR 0 7
18494: ARRAY
18495: IN
18496: IFFALSE 18899
// begin if old_side then
18498: LD_VAR 0 4
18502: IFFALSE 18628
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
18504: LD_LOC 60
18508: PUSH
18509: LD_VAR 0 7
18513: ARRAY
18514: PUSH
18515: LD_VAR 0 3
18519: ARRAY
18520: PUSH
18521: LD_VAR 0 5
18525: PLUS
18526: PUSH
18527: LD_LOC 55
18531: PUSH
18532: LD_VAR 0 7
18536: ARRAY
18537: GREATER
18538: IFFALSE 18564
// begin SetSide ( un , old_side ) ;
18540: LD_VAR 0 1
18544: PPUSH
18545: LD_VAR 0 4
18549: PPUSH
18550: CALL_OW 235
// count := 0 ;
18554: LD_ADDR_VAR 0 5
18558: PUSH
18559: LD_INT 0
18561: ST_TO_ADDR
// end else
18562: GO 18628
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
18564: LD_ADDR_LOC 60
18568: PUSH
18569: LD_LOC 60
18573: PPUSH
18574: LD_VAR 0 7
18578: PPUSH
18579: LD_LOC 60
18583: PUSH
18584: LD_VAR 0 7
18588: ARRAY
18589: PPUSH
18590: LD_VAR 0 4
18594: PPUSH
18595: LD_LOC 60
18599: PUSH
18600: LD_VAR 0 7
18604: ARRAY
18605: PUSH
18606: LD_VAR 0 4
18610: ARRAY
18611: PUSH
18612: LD_VAR 0 5
18616: MINUS
18617: PPUSH
18618: CALL_OW 1
18622: PPUSH
18623: CALL_OW 1
18627: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
18628: LD_ADDR_LOC 60
18632: PUSH
18633: LD_LOC 60
18637: PPUSH
18638: LD_VAR 0 7
18642: PPUSH
18643: LD_LOC 60
18647: PUSH
18648: LD_VAR 0 7
18652: ARRAY
18653: PPUSH
18654: LD_VAR 0 3
18658: PPUSH
18659: LD_LOC 60
18663: PUSH
18664: LD_VAR 0 7
18668: ARRAY
18669: PUSH
18670: LD_VAR 0 3
18674: ARRAY
18675: PUSH
18676: LD_VAR 0 5
18680: PLUS
18681: PPUSH
18682: CALL_OW 1
18686: PPUSH
18687: CALL_OW 1
18691: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
18692: LD_VAR 0 5
18696: PUSH
18697: LD_INT 0
18699: NONEQUAL
18700: PUSH
18701: LD_VAR 0 3
18705: PUSH
18706: LD_OWVAR 2
18710: EQUAL
18711: AND
18712: IFFALSE 18755
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
18714: LD_ADDR_LOC 61
18718: PUSH
18719: LD_LOC 61
18723: PPUSH
18724: LD_INT 3
18726: PUSH
18727: LD_VAR 0 7
18731: MUL
18732: PPUSH
18733: LD_LOC 60
18737: PUSH
18738: LD_VAR 0 7
18742: ARRAY
18743: PUSH
18744: LD_VAR 0 3
18748: ARRAY
18749: PPUSH
18750: CALL_OW 1
18754: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
18755: LD_LOC 60
18759: PUSH
18760: LD_VAR 0 7
18764: ARRAY
18765: PUSH
18766: LD_VAR 0 3
18770: ARRAY
18771: PUSH
18772: LD_LOC 55
18776: PUSH
18777: LD_VAR 0 7
18781: ARRAY
18782: GREATER
18783: IFFALSE 18810
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
18785: LD_ADDR_LOC 62
18789: PUSH
18790: LD_LOC 62
18794: PPUSH
18795: LD_VAR 0 3
18799: PPUSH
18800: LD_INT 1
18802: PPUSH
18803: CALL_OW 1
18807: ST_TO_ADDR
// end else
18808: GO 18897
// begin for j := 1 to Restricted_Builds do
18810: LD_ADDR_VAR 0 8
18814: PUSH
18815: DOUBLE
18816: LD_INT 1
18818: DEC
18819: ST_TO_ADDR
18820: LD_LOC 54
18824: PUSH
18825: FOR_TO
18826: IFFALSE 18870
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
18828: LD_LOC 60
18832: PUSH
18833: LD_VAR 0 8
18837: ARRAY
18838: PUSH
18839: LD_VAR 0 3
18843: ARRAY
18844: PUSH
18845: LD_LOC 55
18849: PUSH
18850: LD_VAR 0 8
18854: ARRAY
18855: GREATER
18856: IFFALSE 18868
// begin Is_Cheater := true ;
18858: LD_ADDR_VAR 0 9
18862: PUSH
18863: LD_INT 1
18865: ST_TO_ADDR
// break ;
18866: GO 18870
// end ;
18868: GO 18825
18870: POP
18871: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
18872: LD_ADDR_LOC 62
18876: PUSH
18877: LD_LOC 62
18881: PPUSH
18882: LD_VAR 0 3
18886: PPUSH
18887: LD_VAR 0 9
18891: PPUSH
18892: CALL_OW 1
18896: ST_TO_ADDR
// end ; break ;
18897: GO 18901
// end ;
18899: GO 18477
18901: POP
18902: POP
// end ;
18903: LD_VAR 0 6
18907: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
18908: LD_VAR 0 5
18912: PUSH
18913: LD_LOC 56
18917: IN
18918: PUSH
18919: LD_VAR 0 2
18923: PUSH
18924: LD_LOC 57
18928: IN
18929: OR
18930: PUSH
18931: LD_VAR 0 4
18935: PUSH
18936: LD_LOC 58
18940: IN
18941: OR
18942: PUSH
18943: LD_VAR 0 3
18947: PUSH
18948: LD_LOC 59
18952: IN
18953: OR
18954: IFFALSE 18965
// ComCancel ( factory ) ;
18956: LD_VAR 0 1
18960: PPUSH
18961: CALL_OW 127
// end ;
18965: PPOPN 5
18967: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
18968: LD_VAR 0 2
18972: PUSH
18973: LD_LOC 56
18977: IN
18978: IFFALSE 18989
// ComCancel ( building ) ;
18980: LD_VAR 0 1
18984: PPUSH
18985: CALL_OW 127
// end ; end_of_file
18989: PPOPN 2
18991: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
18992: LD_INT 0
18994: PPUSH
18995: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
18996: LD_ADDR_VAR 0 2
19000: PUSH
19001: LD_STRING #Multi1x1-Time
19003: PUSH
19004: LD_OWVAR 1
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
19013: LD_INT 0
19015: PUSH
19016: LD_EXP 15
19020: PUSH
19021: LD_OWVAR 1
19025: MINUS
19026: LESSEQUAL
19027: IFFALSE 19058
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
19029: LD_ADDR_VAR 0 2
19033: PUSH
19034: LD_VAR 0 2
19038: PUSH
19039: LD_STRING #allowedsibbomb
19041: PUSH
19042: LD_EXP 15
19046: PUSH
19047: LD_OWVAR 1
19051: MINUS
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: ADD
19057: ST_TO_ADDR
// if ( ExtraStrings ) then
19058: LD_EXP 73
19062: IFFALSE 19084
// AllStrings := AllStrings ^  ^ ExtraStrings ;
19064: LD_ADDR_VAR 0 2
19068: PUSH
19069: LD_VAR 0 2
19073: PUSH
19074: LD_STRING 
19076: ADD
19077: PUSH
19078: LD_EXP 73
19082: ADD
19083: ST_TO_ADDR
// if ( LimitsStrings ) then
19084: CALL 15832 0 0
19088: IFFALSE 19110
// AllStrings := AllStrings ^  ^ LimitsStrings ;
19090: LD_ADDR_VAR 0 2
19094: PUSH
19095: LD_VAR 0 2
19099: PUSH
19100: LD_STRING 
19102: ADD
19103: PUSH
19104: CALL 15832 0 0
19108: ADD
19109: ST_TO_ADDR
// Display_Strings := AllStrings ;
19110: LD_ADDR_OWVAR 47
19114: PUSH
19115: LD_VAR 0 2
19119: ST_TO_ADDR
// end ;
19120: LD_VAR 0 1
19124: RET
// every 0 0$1 do
19125: GO 19127
19127: DISABLE
// begin ShowTimer ;
19128: CALL 18992 0 0
// enable ;
19132: ENABLE
// end ; end_of_file
19133: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
19134: LD_INT 0
19136: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
19137: LD_VAR 0 1
19141: PPUSH
19142: CALL_OW 255
19146: PUSH
19147: LD_VAR 0 4
19151: EQUAL
19152: IFFALSE 19171
// begin SetAchievement ( ACH_RAD ) ;
19154: LD_STRING ACH_RAD
19156: PPUSH
19157: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
19161: LD_STRING ACH_NL
19163: PPUSH
19164: LD_INT 1
19166: PPUSH
19167: CALL_OW 564
// end end ;
19171: LD_VAR 0 5
19175: RET
// export function SA_Win ( side ) ; begin
19176: LD_INT 0
19178: PPUSH
// case side of 1 :
19179: LD_VAR 0 1
19183: PUSH
19184: LD_INT 1
19186: DOUBLE
19187: EQUAL
19188: IFTRUE 19192
19190: GO 19205
19192: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
19193: LD_STRING ACH_AH
19195: PPUSH
19196: LD_INT 1
19198: PPUSH
19199: CALL_OW 564
19203: GO 19368
19205: LD_INT 2
19207: DOUBLE
19208: EQUAL
19209: IFTRUE 19213
19211: GO 19226
19213: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
19214: LD_STRING ACH_E
19216: PPUSH
19217: LD_INT 1
19219: PPUSH
19220: CALL_OW 564
19224: GO 19368
19226: LD_INT 3
19228: DOUBLE
19229: EQUAL
19230: IFTRUE 19234
19232: GO 19247
19234: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
19235: LD_STRING ACH_OOL
19237: PPUSH
19238: LD_INT 1
19240: PPUSH
19241: CALL_OW 564
19245: GO 19368
19247: LD_INT 1
19249: PUSH
19250: LD_INT 2
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: DOUBLE
19257: EQUAL
19258: IFTRUE 19262
19260: GO 19287
19262: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
19263: LD_STRING ACH_AH
19265: PPUSH
19266: LD_REAL  5.00000000000000E-0001
19269: PPUSH
19270: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
19274: LD_STRING ACH_E
19276: PPUSH
19277: LD_REAL  5.00000000000000E-0001
19280: PPUSH
19281: CALL_OW 564
// end ; [ 2 , 3 ] :
19285: GO 19368
19287: LD_INT 2
19289: PUSH
19290: LD_INT 3
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: DOUBLE
19297: EQUAL
19298: IFTRUE 19302
19300: GO 19327
19302: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
19303: LD_STRING ACH_OOL
19305: PPUSH
19306: LD_REAL  5.00000000000000E-0001
19309: PPUSH
19310: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
19314: LD_STRING ACH_E
19316: PPUSH
19317: LD_REAL  5.00000000000000E-0001
19320: PPUSH
19321: CALL_OW 564
// end ; [ 3 , 1 ] :
19325: GO 19368
19327: LD_INT 3
19329: PUSH
19330: LD_INT 1
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: DOUBLE
19337: EQUAL
19338: IFTRUE 19342
19340: GO 19367
19342: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
19343: LD_STRING ACH_AH
19345: PPUSH
19346: LD_REAL  5.00000000000000E-0001
19349: PPUSH
19350: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
19354: LD_STRING ACH_OOL
19356: PPUSH
19357: LD_REAL  5.00000000000000E-0001
19360: PPUSH
19361: CALL_OW 564
// end ; end ;
19365: GO 19368
19367: POP
// end ; end_of_file
19368: LD_VAR 0 2
19372: RET
// export function SetMpTechs ( ) ; var side , i ; begin
19373: LD_INT 0
19375: PPUSH
19376: PPUSH
19377: PPUSH
// for side = 1 to 8 do
19378: LD_ADDR_VAR 0 2
19382: PUSH
19383: DOUBLE
19384: LD_INT 1
19386: DEC
19387: ST_TO_ADDR
19388: LD_INT 8
19390: PUSH
19391: FOR_TO
19392: IFFALSE 19513
// begin for i = 1 to 72 do
19394: LD_ADDR_VAR 0 3
19398: PUSH
19399: DOUBLE
19400: LD_INT 1
19402: DEC
19403: ST_TO_ADDR
19404: LD_INT 72
19406: PUSH
19407: FOR_TO
19408: IFFALSE 19439
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
19410: LD_VAR 0 3
19414: PPUSH
19415: LD_VAR 0 2
19419: PPUSH
19420: LD_INT 0
19422: PPUSH
19423: LD_VAR 0 3
19427: PPUSH
19428: CALL_OW 565
19432: PPUSH
19433: CALL_OW 322
19437: GO 19407
19439: POP
19440: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
19441: LD_INT 73
19443: PPUSH
19444: LD_VAR 0 2
19448: PPUSH
19449: LD_INT 0
19451: PPUSH
19452: LD_INT 25
19454: PPUSH
19455: CALL_OW 565
19459: PPUSH
19460: CALL_OW 322
// for i = 0 to 40 do
19464: LD_ADDR_VAR 0 3
19468: PUSH
19469: DOUBLE
19470: LD_INT 0
19472: DEC
19473: ST_TO_ADDR
19474: LD_INT 40
19476: PUSH
19477: FOR_TO
19478: IFFALSE 19509
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
19480: LD_VAR 0 3
19484: PPUSH
19485: LD_VAR 0 2
19489: PPUSH
19490: LD_INT 1
19492: PPUSH
19493: LD_VAR 0 3
19497: PPUSH
19498: CALL_OW 565
19502: PPUSH
19503: CALL_OW 324
19507: GO 19477
19509: POP
19510: POP
// end ;
19511: GO 19391
19513: POP
19514: POP
// end ;
19515: LD_VAR 0 1
19519: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
19520: LD_INT 0
19522: PPUSH
19523: PPUSH
19524: PPUSH
// for side = 1 to 8 do
19525: LD_ADDR_VAR 0 3
19529: PUSH
19530: DOUBLE
19531: LD_INT 1
19533: DEC
19534: ST_TO_ADDR
19535: LD_INT 8
19537: PUSH
19538: FOR_TO
19539: IFFALSE 23535
// begin for i = 1 to 73 do
19541: LD_ADDR_VAR 0 4
19545: PUSH
19546: DOUBLE
19547: LD_INT 1
19549: DEC
19550: ST_TO_ADDR
19551: LD_INT 73
19553: PUSH
19554: FOR_TO
19555: IFFALSE 19576
// SetTech ( i , side , state_disabled ) ;
19557: LD_VAR 0 4
19561: PPUSH
19562: LD_VAR 0 3
19566: PPUSH
19567: LD_INT 0
19569: PPUSH
19570: CALL_OW 322
19574: GO 19554
19576: POP
19577: POP
// for i = 0 to 40 do
19578: LD_ADDR_VAR 0 4
19582: PUSH
19583: DOUBLE
19584: LD_INT 0
19586: DEC
19587: ST_TO_ADDR
19588: LD_INT 40
19590: PUSH
19591: FOR_TO
19592: IFFALSE 19613
// SetRestrict ( i , side , false ) ;
19594: LD_VAR 0 4
19598: PPUSH
19599: LD_VAR 0 3
19603: PPUSH
19604: LD_INT 0
19606: PPUSH
19607: CALL_OW 324
19611: GO 19591
19613: POP
19614: POP
// case level of 1 :
19615: LD_VAR 0 1
19619: PUSH
19620: LD_INT 1
19622: DOUBLE
19623: EQUAL
19624: IFTRUE 19628
19626: GO 19781
19628: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19629: LD_INT 35
19631: PPUSH
19632: LD_VAR 0 3
19636: PPUSH
19637: LD_INT 1
19639: PPUSH
19640: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19644: LD_INT 45
19646: PPUSH
19647: LD_VAR 0 3
19651: PPUSH
19652: LD_INT 1
19654: PPUSH
19655: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19659: LD_INT 46
19661: PPUSH
19662: LD_VAR 0 3
19666: PPUSH
19667: LD_INT 1
19669: PPUSH
19670: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19674: LD_INT 47
19676: PPUSH
19677: LD_VAR 0 3
19681: PPUSH
19682: LD_INT 1
19684: PPUSH
19685: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
19689: LD_INT 0
19691: PPUSH
19692: LD_VAR 0 3
19696: PPUSH
19697: LD_INT 1
19699: PPUSH
19700: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
19704: LD_INT 2
19706: PPUSH
19707: LD_VAR 0 3
19711: PPUSH
19712: LD_INT 1
19714: PPUSH
19715: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
19719: LD_INT 4
19721: PPUSH
19722: LD_VAR 0 3
19726: PPUSH
19727: LD_INT 1
19729: PPUSH
19730: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
19734: LD_INT 6
19736: PPUSH
19737: LD_VAR 0 3
19741: PPUSH
19742: LD_INT 1
19744: PPUSH
19745: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
19749: LD_INT 29
19751: PPUSH
19752: LD_VAR 0 3
19756: PPUSH
19757: LD_INT 1
19759: PPUSH
19760: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
19764: LD_INT 31
19766: PPUSH
19767: LD_VAR 0 3
19771: PPUSH
19772: LD_INT 1
19774: PPUSH
19775: CALL_OW 324
// end ; 2 :
19779: GO 23533
19781: LD_INT 2
19783: DOUBLE
19784: EQUAL
19785: IFTRUE 19789
19787: GO 19987
19789: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19790: LD_INT 35
19792: PPUSH
19793: LD_VAR 0 3
19797: PPUSH
19798: LD_INT 1
19800: PPUSH
19801: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19805: LD_INT 45
19807: PPUSH
19808: LD_VAR 0 3
19812: PPUSH
19813: LD_INT 1
19815: PPUSH
19816: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19820: LD_INT 46
19822: PPUSH
19823: LD_VAR 0 3
19827: PPUSH
19828: LD_INT 1
19830: PPUSH
19831: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19835: LD_INT 47
19837: PPUSH
19838: LD_VAR 0 3
19842: PPUSH
19843: LD_INT 1
19845: PPUSH
19846: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
19850: LD_INT 1
19852: PPUSH
19853: LD_VAR 0 3
19857: PPUSH
19858: LD_INT 1
19860: PPUSH
19861: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
19865: LD_INT 2
19867: PPUSH
19868: LD_VAR 0 3
19872: PPUSH
19873: LD_INT 1
19875: PPUSH
19876: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
19880: LD_INT 11
19882: PPUSH
19883: LD_VAR 0 3
19887: PPUSH
19888: LD_INT 1
19890: PPUSH
19891: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
19895: LD_INT 0
19897: PPUSH
19898: LD_VAR 0 3
19902: PPUSH
19903: LD_INT 1
19905: PPUSH
19906: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
19910: LD_INT 2
19912: PPUSH
19913: LD_VAR 0 3
19917: PPUSH
19918: LD_INT 1
19920: PPUSH
19921: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
19925: LD_INT 4
19927: PPUSH
19928: LD_VAR 0 3
19932: PPUSH
19933: LD_INT 1
19935: PPUSH
19936: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
19940: LD_INT 6
19942: PPUSH
19943: LD_VAR 0 3
19947: PPUSH
19948: LD_INT 1
19950: PPUSH
19951: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
19955: LD_INT 29
19957: PPUSH
19958: LD_VAR 0 3
19962: PPUSH
19963: LD_INT 1
19965: PPUSH
19966: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
19970: LD_INT 31
19972: PPUSH
19973: LD_VAR 0 3
19977: PPUSH
19978: LD_INT 1
19980: PPUSH
19981: CALL_OW 324
// end ; 3 :
19985: GO 23533
19987: LD_INT 3
19989: DOUBLE
19990: EQUAL
19991: IFTRUE 19995
19993: GO 20448
19995: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19996: LD_INT 35
19998: PPUSH
19999: LD_VAR 0 3
20003: PPUSH
20004: LD_INT 1
20006: PPUSH
20007: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
20011: LD_INT 45
20013: PPUSH
20014: LD_VAR 0 3
20018: PPUSH
20019: LD_INT 1
20021: PPUSH
20022: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
20026: LD_INT 46
20028: PPUSH
20029: LD_VAR 0 3
20033: PPUSH
20034: LD_INT 1
20036: PPUSH
20037: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
20041: LD_INT 47
20043: PPUSH
20044: LD_VAR 0 3
20048: PPUSH
20049: LD_INT 1
20051: PPUSH
20052: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
20056: LD_INT 1
20058: PPUSH
20059: LD_VAR 0 3
20063: PPUSH
20064: LD_INT 1
20066: PPUSH
20067: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
20071: LD_INT 2
20073: PPUSH
20074: LD_VAR 0 3
20078: PPUSH
20079: LD_INT 1
20081: PPUSH
20082: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
20086: LD_INT 11
20088: PPUSH
20089: LD_VAR 0 3
20093: PPUSH
20094: LD_INT 1
20096: PPUSH
20097: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
20101: LD_INT 48
20103: PPUSH
20104: LD_VAR 0 3
20108: PPUSH
20109: LD_INT 1
20111: PPUSH
20112: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
20116: LD_INT 69
20118: PPUSH
20119: LD_VAR 0 3
20123: PPUSH
20124: LD_INT 1
20126: PPUSH
20127: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
20131: LD_INT 39
20133: PPUSH
20134: LD_VAR 0 3
20138: PPUSH
20139: LD_INT 1
20141: PPUSH
20142: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
20146: LD_INT 43
20148: PPUSH
20149: LD_VAR 0 3
20153: PPUSH
20154: LD_INT 1
20156: PPUSH
20157: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
20161: LD_INT 51
20163: PPUSH
20164: LD_VAR 0 3
20168: PPUSH
20169: LD_INT 1
20171: PPUSH
20172: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
20176: LD_INT 6
20178: PPUSH
20179: LD_VAR 0 3
20183: PPUSH
20184: LD_INT 1
20186: PPUSH
20187: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
20191: LD_INT 0
20193: PPUSH
20194: LD_VAR 0 3
20198: PPUSH
20199: LD_INT 1
20201: PPUSH
20202: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
20206: LD_INT 2
20208: PPUSH
20209: LD_VAR 0 3
20213: PPUSH
20214: LD_INT 1
20216: PPUSH
20217: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
20221: LD_INT 3
20223: PPUSH
20224: LD_VAR 0 3
20228: PPUSH
20229: LD_INT 1
20231: PPUSH
20232: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
20236: LD_INT 4
20238: PPUSH
20239: LD_VAR 0 3
20243: PPUSH
20244: LD_INT 1
20246: PPUSH
20247: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
20251: LD_INT 6
20253: PPUSH
20254: LD_VAR 0 3
20258: PPUSH
20259: LD_INT 1
20261: PPUSH
20262: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
20266: LD_INT 7
20268: PPUSH
20269: LD_VAR 0 3
20273: PPUSH
20274: LD_INT 1
20276: PPUSH
20277: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
20281: LD_INT 8
20283: PPUSH
20284: LD_VAR 0 3
20288: PPUSH
20289: LD_INT 1
20291: PPUSH
20292: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
20296: LD_INT 10
20298: PPUSH
20299: LD_VAR 0 3
20303: PPUSH
20304: LD_INT 1
20306: PPUSH
20307: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
20311: LD_INT 15
20313: PPUSH
20314: LD_VAR 0 3
20318: PPUSH
20319: LD_INT 1
20321: PPUSH
20322: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
20326: LD_INT 16
20328: PPUSH
20329: LD_VAR 0 3
20333: PPUSH
20334: LD_INT 1
20336: PPUSH
20337: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
20341: LD_INT 17
20343: PPUSH
20344: LD_VAR 0 3
20348: PPUSH
20349: LD_INT 1
20351: PPUSH
20352: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
20356: LD_INT 20
20358: PPUSH
20359: LD_VAR 0 3
20363: PPUSH
20364: LD_INT 1
20366: PPUSH
20367: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
20371: LD_INT 26
20373: PPUSH
20374: LD_VAR 0 3
20378: PPUSH
20379: LD_INT 1
20381: PPUSH
20382: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
20386: LD_INT 27
20388: PPUSH
20389: LD_VAR 0 3
20393: PPUSH
20394: LD_INT 1
20396: PPUSH
20397: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
20401: LD_INT 29
20403: PPUSH
20404: LD_VAR 0 3
20408: PPUSH
20409: LD_INT 1
20411: PPUSH
20412: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
20416: LD_INT 31
20418: PPUSH
20419: LD_VAR 0 3
20423: PPUSH
20424: LD_INT 1
20426: PPUSH
20427: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
20431: LD_INT 32
20433: PPUSH
20434: LD_VAR 0 3
20438: PPUSH
20439: LD_INT 1
20441: PPUSH
20442: CALL_OW 324
// end ; 4 :
20446: GO 23533
20448: LD_INT 4
20450: DOUBLE
20451: EQUAL
20452: IFTRUE 20456
20454: GO 21404
20456: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
20457: LD_INT 35
20459: PPUSH
20460: LD_VAR 0 3
20464: PPUSH
20465: LD_INT 1
20467: PPUSH
20468: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
20472: LD_INT 45
20474: PPUSH
20475: LD_VAR 0 3
20479: PPUSH
20480: LD_INT 1
20482: PPUSH
20483: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
20487: LD_INT 46
20489: PPUSH
20490: LD_VAR 0 3
20494: PPUSH
20495: LD_INT 1
20497: PPUSH
20498: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
20502: LD_INT 47
20504: PPUSH
20505: LD_VAR 0 3
20509: PPUSH
20510: LD_INT 1
20512: PPUSH
20513: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
20517: LD_INT 1
20519: PPUSH
20520: LD_VAR 0 3
20524: PPUSH
20525: LD_INT 1
20527: PPUSH
20528: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
20532: LD_INT 2
20534: PPUSH
20535: LD_VAR 0 3
20539: PPUSH
20540: LD_INT 1
20542: PPUSH
20543: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
20547: LD_INT 11
20549: PPUSH
20550: LD_VAR 0 3
20554: PPUSH
20555: LD_INT 1
20557: PPUSH
20558: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
20562: LD_INT 20
20564: PPUSH
20565: LD_VAR 0 3
20569: PPUSH
20570: LD_INT 1
20572: PPUSH
20573: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
20577: LD_INT 48
20579: PPUSH
20580: LD_VAR 0 3
20584: PPUSH
20585: LD_INT 1
20587: PPUSH
20588: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
20592: LD_INT 49
20594: PPUSH
20595: LD_VAR 0 3
20599: PPUSH
20600: LD_INT 1
20602: PPUSH
20603: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
20607: LD_INT 69
20609: PPUSH
20610: LD_VAR 0 3
20614: PPUSH
20615: LD_INT 1
20617: PPUSH
20618: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
20622: LD_INT 39
20624: PPUSH
20625: LD_VAR 0 3
20629: PPUSH
20630: LD_INT 1
20632: PPUSH
20633: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
20637: LD_INT 34
20639: PPUSH
20640: LD_VAR 0 3
20644: PPUSH
20645: LD_INT 1
20647: PPUSH
20648: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
20652: LD_INT 42
20654: PPUSH
20655: LD_VAR 0 3
20659: PPUSH
20660: LD_INT 1
20662: PPUSH
20663: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
20667: LD_INT 44
20669: PPUSH
20670: LD_VAR 0 3
20674: PPUSH
20675: LD_INT 1
20677: PPUSH
20678: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
20682: LD_INT 41
20684: PPUSH
20685: LD_VAR 0 3
20689: PPUSH
20690: LD_INT 1
20692: PPUSH
20693: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
20697: LD_INT 43
20699: PPUSH
20700: LD_VAR 0 3
20704: PPUSH
20705: LD_INT 1
20707: PPUSH
20708: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
20712: LD_INT 70
20714: PPUSH
20715: LD_VAR 0 3
20719: PPUSH
20720: LD_INT 1
20722: PPUSH
20723: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
20727: LD_INT 51
20729: PPUSH
20730: LD_VAR 0 3
20734: PPUSH
20735: LD_INT 1
20737: PPUSH
20738: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
20742: LD_INT 52
20744: PPUSH
20745: LD_VAR 0 3
20749: PPUSH
20750: LD_INT 1
20752: PPUSH
20753: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
20757: LD_INT 6
20759: PPUSH
20760: LD_VAR 0 3
20764: PPUSH
20765: LD_INT 1
20767: PPUSH
20768: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
20772: LD_INT 15
20774: PPUSH
20775: LD_VAR 0 3
20779: PPUSH
20780: LD_INT 1
20782: PPUSH
20783: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
20787: LD_INT 7
20789: PPUSH
20790: LD_VAR 0 3
20794: PPUSH
20795: LD_INT 1
20797: PPUSH
20798: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
20802: LD_INT 12
20804: PPUSH
20805: LD_VAR 0 3
20809: PPUSH
20810: LD_INT 1
20812: PPUSH
20813: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
20817: LD_INT 18
20819: PPUSH
20820: LD_VAR 0 3
20824: PPUSH
20825: LD_INT 1
20827: PPUSH
20828: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
20832: LD_INT 60
20834: PPUSH
20835: LD_VAR 0 3
20839: PPUSH
20840: LD_INT 1
20842: PPUSH
20843: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
20847: LD_INT 9
20849: PPUSH
20850: LD_VAR 0 3
20854: PPUSH
20855: LD_INT 1
20857: PPUSH
20858: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
20862: LD_INT 30
20864: PPUSH
20865: LD_VAR 0 3
20869: PPUSH
20870: LD_INT 1
20872: PPUSH
20873: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
20877: LD_INT 37
20879: PPUSH
20880: LD_VAR 0 3
20884: PPUSH
20885: LD_INT 1
20887: PPUSH
20888: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
20892: LD_INT 5
20894: PPUSH
20895: LD_VAR 0 3
20899: PPUSH
20900: LD_INT 1
20902: PPUSH
20903: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
20907: LD_INT 66
20909: PPUSH
20910: LD_VAR 0 3
20914: PPUSH
20915: LD_INT 1
20917: PPUSH
20918: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
20922: LD_INT 21
20924: PPUSH
20925: LD_VAR 0 3
20929: PPUSH
20930: LD_INT 1
20932: PPUSH
20933: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
20937: LD_INT 22
20939: PPUSH
20940: LD_VAR 0 3
20944: PPUSH
20945: LD_INT 1
20947: PPUSH
20948: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
20952: LD_INT 54
20954: PPUSH
20955: LD_VAR 0 3
20959: PPUSH
20960: LD_INT 1
20962: PPUSH
20963: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
20967: LD_INT 0
20969: PPUSH
20970: LD_VAR 0 3
20974: PPUSH
20975: LD_INT 1
20977: PPUSH
20978: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
20982: LD_INT 1
20984: PPUSH
20985: LD_VAR 0 3
20989: PPUSH
20990: LD_INT 1
20992: PPUSH
20993: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
20997: LD_INT 2
20999: PPUSH
21000: LD_VAR 0 3
21004: PPUSH
21005: LD_INT 1
21007: PPUSH
21008: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
21012: LD_INT 3
21014: PPUSH
21015: LD_VAR 0 3
21019: PPUSH
21020: LD_INT 1
21022: PPUSH
21023: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
21027: LD_INT 4
21029: PPUSH
21030: LD_VAR 0 3
21034: PPUSH
21035: LD_INT 1
21037: PPUSH
21038: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
21042: LD_INT 5
21044: PPUSH
21045: LD_VAR 0 3
21049: PPUSH
21050: LD_INT 1
21052: PPUSH
21053: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
21057: LD_INT 6
21059: PPUSH
21060: LD_VAR 0 3
21064: PPUSH
21065: LD_INT 1
21067: PPUSH
21068: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
21072: LD_INT 7
21074: PPUSH
21075: LD_VAR 0 3
21079: PPUSH
21080: LD_INT 1
21082: PPUSH
21083: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
21087: LD_INT 8
21089: PPUSH
21090: LD_VAR 0 3
21094: PPUSH
21095: LD_INT 1
21097: PPUSH
21098: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
21102: LD_INT 10
21104: PPUSH
21105: LD_VAR 0 3
21109: PPUSH
21110: LD_INT 1
21112: PPUSH
21113: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
21117: LD_INT 11
21119: PPUSH
21120: LD_VAR 0 3
21124: PPUSH
21125: LD_INT 1
21127: PPUSH
21128: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
21132: LD_INT 12
21134: PPUSH
21135: LD_VAR 0 3
21139: PPUSH
21140: LD_INT 1
21142: PPUSH
21143: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
21147: LD_INT 13
21149: PPUSH
21150: LD_VAR 0 3
21154: PPUSH
21155: LD_INT 1
21157: PPUSH
21158: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
21162: LD_INT 14
21164: PPUSH
21165: LD_VAR 0 3
21169: PPUSH
21170: LD_INT 1
21172: PPUSH
21173: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
21177: LD_INT 15
21179: PPUSH
21180: LD_VAR 0 3
21184: PPUSH
21185: LD_INT 1
21187: PPUSH
21188: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
21192: LD_INT 16
21194: PPUSH
21195: LD_VAR 0 3
21199: PPUSH
21200: LD_INT 1
21202: PPUSH
21203: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
21207: LD_INT 17
21209: PPUSH
21210: LD_VAR 0 3
21214: PPUSH
21215: LD_INT 1
21217: PPUSH
21218: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
21222: LD_INT 19
21224: PPUSH
21225: LD_VAR 0 3
21229: PPUSH
21230: LD_INT 1
21232: PPUSH
21233: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
21237: LD_INT 20
21239: PPUSH
21240: LD_VAR 0 3
21244: PPUSH
21245: LD_INT 1
21247: PPUSH
21248: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
21252: LD_INT 21
21254: PPUSH
21255: LD_VAR 0 3
21259: PPUSH
21260: LD_INT 1
21262: PPUSH
21263: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
21267: LD_INT 23
21269: PPUSH
21270: LD_VAR 0 3
21274: PPUSH
21275: LD_INT 1
21277: PPUSH
21278: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
21282: LD_INT 26
21284: PPUSH
21285: LD_VAR 0 3
21289: PPUSH
21290: LD_INT 1
21292: PPUSH
21293: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
21297: LD_INT 27
21299: PPUSH
21300: LD_VAR 0 3
21304: PPUSH
21305: LD_INT 1
21307: PPUSH
21308: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
21312: LD_INT 28
21314: PPUSH
21315: LD_VAR 0 3
21319: PPUSH
21320: LD_INT 1
21322: PPUSH
21323: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
21327: LD_INT 29
21329: PPUSH
21330: LD_VAR 0 3
21334: PPUSH
21335: LD_INT 1
21337: PPUSH
21338: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
21342: LD_INT 30
21344: PPUSH
21345: LD_VAR 0 3
21349: PPUSH
21350: LD_INT 1
21352: PPUSH
21353: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
21357: LD_INT 31
21359: PPUSH
21360: LD_VAR 0 3
21364: PPUSH
21365: LD_INT 1
21367: PPUSH
21368: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
21372: LD_INT 32
21374: PPUSH
21375: LD_VAR 0 3
21379: PPUSH
21380: LD_INT 1
21382: PPUSH
21383: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
21387: LD_INT 36
21389: PPUSH
21390: LD_VAR 0 3
21394: PPUSH
21395: LD_INT 1
21397: PPUSH
21398: CALL_OW 324
// end ; 5 :
21402: GO 23533
21404: LD_INT 5
21406: DOUBLE
21407: EQUAL
21408: IFTRUE 21412
21410: GO 22525
21412: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
21413: LD_INT 35
21415: PPUSH
21416: LD_VAR 0 3
21420: PPUSH
21421: LD_INT 1
21423: PPUSH
21424: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
21428: LD_INT 45
21430: PPUSH
21431: LD_VAR 0 3
21435: PPUSH
21436: LD_INT 1
21438: PPUSH
21439: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
21443: LD_INT 46
21445: PPUSH
21446: LD_VAR 0 3
21450: PPUSH
21451: LD_INT 1
21453: PPUSH
21454: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
21458: LD_INT 47
21460: PPUSH
21461: LD_VAR 0 3
21465: PPUSH
21466: LD_INT 1
21468: PPUSH
21469: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
21473: LD_INT 1
21475: PPUSH
21476: LD_VAR 0 3
21480: PPUSH
21481: LD_INT 1
21483: PPUSH
21484: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
21488: LD_INT 2
21490: PPUSH
21491: LD_VAR 0 3
21495: PPUSH
21496: LD_INT 1
21498: PPUSH
21499: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
21503: LD_INT 11
21505: PPUSH
21506: LD_VAR 0 3
21510: PPUSH
21511: LD_INT 1
21513: PPUSH
21514: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
21518: LD_INT 20
21520: PPUSH
21521: LD_VAR 0 3
21525: PPUSH
21526: LD_INT 1
21528: PPUSH
21529: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
21533: LD_INT 48
21535: PPUSH
21536: LD_VAR 0 3
21540: PPUSH
21541: LD_INT 1
21543: PPUSH
21544: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
21548: LD_INT 49
21550: PPUSH
21551: LD_VAR 0 3
21555: PPUSH
21556: LD_INT 1
21558: PPUSH
21559: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
21563: LD_INT 69
21565: PPUSH
21566: LD_VAR 0 3
21570: PPUSH
21571: LD_INT 1
21573: PPUSH
21574: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
21578: LD_INT 39
21580: PPUSH
21581: LD_VAR 0 3
21585: PPUSH
21586: LD_INT 1
21588: PPUSH
21589: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
21593: LD_INT 34
21595: PPUSH
21596: LD_VAR 0 3
21600: PPUSH
21601: LD_INT 1
21603: PPUSH
21604: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
21608: LD_INT 42
21610: PPUSH
21611: LD_VAR 0 3
21615: PPUSH
21616: LD_INT 1
21618: PPUSH
21619: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
21623: LD_INT 44
21625: PPUSH
21626: LD_VAR 0 3
21630: PPUSH
21631: LD_INT 1
21633: PPUSH
21634: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
21638: LD_INT 41
21640: PPUSH
21641: LD_VAR 0 3
21645: PPUSH
21646: LD_INT 1
21648: PPUSH
21649: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
21653: LD_INT 40
21655: PPUSH
21656: LD_VAR 0 3
21660: PPUSH
21661: LD_INT 1
21663: PPUSH
21664: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
21668: LD_INT 43
21670: PPUSH
21671: LD_VAR 0 3
21675: PPUSH
21676: LD_INT 1
21678: PPUSH
21679: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
21683: LD_INT 70
21685: PPUSH
21686: LD_VAR 0 3
21690: PPUSH
21691: LD_INT 1
21693: PPUSH
21694: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
21698: LD_INT 51
21700: PPUSH
21701: LD_VAR 0 3
21705: PPUSH
21706: LD_INT 1
21708: PPUSH
21709: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
21713: LD_INT 52
21715: PPUSH
21716: LD_VAR 0 3
21720: PPUSH
21721: LD_INT 1
21723: PPUSH
21724: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
21728: LD_INT 6
21730: PPUSH
21731: LD_VAR 0 3
21735: PPUSH
21736: LD_INT 1
21738: PPUSH
21739: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
21743: LD_INT 15
21745: PPUSH
21746: LD_VAR 0 3
21750: PPUSH
21751: LD_INT 1
21753: PPUSH
21754: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
21758: LD_INT 7
21760: PPUSH
21761: LD_VAR 0 3
21765: PPUSH
21766: LD_INT 1
21768: PPUSH
21769: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
21773: LD_INT 12
21775: PPUSH
21776: LD_VAR 0 3
21780: PPUSH
21781: LD_INT 1
21783: PPUSH
21784: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
21788: LD_INT 17
21790: PPUSH
21791: LD_VAR 0 3
21795: PPUSH
21796: LD_INT 1
21798: PPUSH
21799: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
21803: LD_INT 18
21805: PPUSH
21806: LD_VAR 0 3
21810: PPUSH
21811: LD_INT 1
21813: PPUSH
21814: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
21818: LD_INT 60
21820: PPUSH
21821: LD_VAR 0 3
21825: PPUSH
21826: LD_INT 1
21828: PPUSH
21829: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
21833: LD_INT 32
21835: PPUSH
21836: LD_VAR 0 3
21840: PPUSH
21841: LD_INT 1
21843: PPUSH
21844: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
21848: LD_INT 9
21850: PPUSH
21851: LD_VAR 0 3
21855: PPUSH
21856: LD_INT 1
21858: PPUSH
21859: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
21863: LD_INT 57
21865: PPUSH
21866: LD_VAR 0 3
21870: PPUSH
21871: LD_INT 1
21873: PPUSH
21874: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
21878: LD_INT 30
21880: PPUSH
21881: LD_VAR 0 3
21885: PPUSH
21886: LD_INT 1
21888: PPUSH
21889: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
21893: LD_INT 37
21895: PPUSH
21896: LD_VAR 0 3
21900: PPUSH
21901: LD_INT 1
21903: PPUSH
21904: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
21908: LD_INT 63
21910: PPUSH
21911: LD_VAR 0 3
21915: PPUSH
21916: LD_INT 1
21918: PPUSH
21919: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
21923: LD_INT 3
21925: PPUSH
21926: LD_VAR 0 3
21930: PPUSH
21931: LD_INT 1
21933: PPUSH
21934: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
21938: LD_INT 4
21940: PPUSH
21941: LD_VAR 0 3
21945: PPUSH
21946: LD_INT 1
21948: PPUSH
21949: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
21953: LD_INT 5
21955: PPUSH
21956: LD_VAR 0 3
21960: PPUSH
21961: LD_INT 1
21963: PPUSH
21964: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
21968: LD_INT 66
21970: PPUSH
21971: LD_VAR 0 3
21975: PPUSH
21976: LD_INT 1
21978: PPUSH
21979: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
21983: LD_INT 21
21985: PPUSH
21986: LD_VAR 0 3
21990: PPUSH
21991: LD_INT 1
21993: PPUSH
21994: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
21998: LD_INT 22
22000: PPUSH
22001: LD_VAR 0 3
22005: PPUSH
22006: LD_INT 1
22008: PPUSH
22009: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
22013: LD_INT 19
22015: PPUSH
22016: LD_VAR 0 3
22020: PPUSH
22021: LD_INT 1
22023: PPUSH
22024: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
22028: LD_INT 54
22030: PPUSH
22031: LD_VAR 0 3
22035: PPUSH
22036: LD_INT 1
22038: PPUSH
22039: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
22043: LD_INT 55
22045: PPUSH
22046: LD_VAR 0 3
22050: PPUSH
22051: LD_INT 1
22053: PPUSH
22054: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22058: LD_INT 0
22060: PPUSH
22061: LD_VAR 0 3
22065: PPUSH
22066: LD_INT 1
22068: PPUSH
22069: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
22073: LD_INT 1
22075: PPUSH
22076: LD_VAR 0 3
22080: PPUSH
22081: LD_INT 1
22083: PPUSH
22084: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22088: LD_INT 2
22090: PPUSH
22091: LD_VAR 0 3
22095: PPUSH
22096: LD_INT 1
22098: PPUSH
22099: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
22103: LD_INT 3
22105: PPUSH
22106: LD_VAR 0 3
22110: PPUSH
22111: LD_INT 1
22113: PPUSH
22114: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22118: LD_INT 4
22120: PPUSH
22121: LD_VAR 0 3
22125: PPUSH
22126: LD_INT 1
22128: PPUSH
22129: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
22133: LD_INT 5
22135: PPUSH
22136: LD_VAR 0 3
22140: PPUSH
22141: LD_INT 1
22143: PPUSH
22144: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22148: LD_INT 6
22150: PPUSH
22151: LD_VAR 0 3
22155: PPUSH
22156: LD_INT 1
22158: PPUSH
22159: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
22163: LD_INT 7
22165: PPUSH
22166: LD_VAR 0 3
22170: PPUSH
22171: LD_INT 1
22173: PPUSH
22174: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
22178: LD_INT 8
22180: PPUSH
22181: LD_VAR 0 3
22185: PPUSH
22186: LD_INT 1
22188: PPUSH
22189: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
22193: LD_INT 10
22195: PPUSH
22196: LD_VAR 0 3
22200: PPUSH
22201: LD_INT 1
22203: PPUSH
22204: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
22208: LD_INT 11
22210: PPUSH
22211: LD_VAR 0 3
22215: PPUSH
22216: LD_INT 1
22218: PPUSH
22219: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
22223: LD_INT 12
22225: PPUSH
22226: LD_VAR 0 3
22230: PPUSH
22231: LD_INT 1
22233: PPUSH
22234: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
22238: LD_INT 13
22240: PPUSH
22241: LD_VAR 0 3
22245: PPUSH
22246: LD_INT 1
22248: PPUSH
22249: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
22253: LD_INT 14
22255: PPUSH
22256: LD_VAR 0 3
22260: PPUSH
22261: LD_INT 1
22263: PPUSH
22264: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
22268: LD_INT 15
22270: PPUSH
22271: LD_VAR 0 3
22275: PPUSH
22276: LD_INT 1
22278: PPUSH
22279: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
22283: LD_INT 16
22285: PPUSH
22286: LD_VAR 0 3
22290: PPUSH
22291: LD_INT 1
22293: PPUSH
22294: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
22298: LD_INT 17
22300: PPUSH
22301: LD_VAR 0 3
22305: PPUSH
22306: LD_INT 1
22308: PPUSH
22309: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
22313: LD_INT 18
22315: PPUSH
22316: LD_VAR 0 3
22320: PPUSH
22321: LD_INT 1
22323: PPUSH
22324: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
22328: LD_INT 19
22330: PPUSH
22331: LD_VAR 0 3
22335: PPUSH
22336: LD_INT 1
22338: PPUSH
22339: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
22343: LD_INT 20
22345: PPUSH
22346: LD_VAR 0 3
22350: PPUSH
22351: LD_INT 1
22353: PPUSH
22354: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
22358: LD_INT 21
22360: PPUSH
22361: LD_VAR 0 3
22365: PPUSH
22366: LD_INT 1
22368: PPUSH
22369: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
22373: LD_INT 23
22375: PPUSH
22376: LD_VAR 0 3
22380: PPUSH
22381: LD_INT 1
22383: PPUSH
22384: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
22388: LD_INT 26
22390: PPUSH
22391: LD_VAR 0 3
22395: PPUSH
22396: LD_INT 1
22398: PPUSH
22399: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
22403: LD_INT 27
22405: PPUSH
22406: LD_VAR 0 3
22410: PPUSH
22411: LD_INT 1
22413: PPUSH
22414: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
22418: LD_INT 28
22420: PPUSH
22421: LD_VAR 0 3
22425: PPUSH
22426: LD_INT 1
22428: PPUSH
22429: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22433: LD_INT 29
22435: PPUSH
22436: LD_VAR 0 3
22440: PPUSH
22441: LD_INT 1
22443: PPUSH
22444: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
22448: LD_INT 30
22450: PPUSH
22451: LD_VAR 0 3
22455: PPUSH
22456: LD_INT 1
22458: PPUSH
22459: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22463: LD_INT 31
22465: PPUSH
22466: LD_VAR 0 3
22470: PPUSH
22471: LD_INT 1
22473: PPUSH
22474: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
22478: LD_INT 32
22480: PPUSH
22481: LD_VAR 0 3
22485: PPUSH
22486: LD_INT 1
22488: PPUSH
22489: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
22493: LD_INT 33
22495: PPUSH
22496: LD_VAR 0 3
22500: PPUSH
22501: LD_INT 1
22503: PPUSH
22504: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
22508: LD_INT 36
22510: PPUSH
22511: LD_VAR 0 3
22515: PPUSH
22516: LD_INT 1
22518: PPUSH
22519: CALL_OW 324
// end ; 6 :
22523: GO 23533
22525: LD_INT 6
22527: DOUBLE
22528: EQUAL
22529: IFTRUE 22533
22531: GO 23458
22533: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22534: LD_INT 35
22536: PPUSH
22537: LD_VAR 0 3
22541: PPUSH
22542: LD_INT 1
22544: PPUSH
22545: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22549: LD_INT 45
22551: PPUSH
22552: LD_VAR 0 3
22556: PPUSH
22557: LD_INT 1
22559: PPUSH
22560: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22564: LD_INT 46
22566: PPUSH
22567: LD_VAR 0 3
22571: PPUSH
22572: LD_INT 1
22574: PPUSH
22575: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22579: LD_INT 47
22581: PPUSH
22582: LD_VAR 0 3
22586: PPUSH
22587: LD_INT 1
22589: PPUSH
22590: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22594: LD_INT 1
22596: PPUSH
22597: LD_VAR 0 3
22601: PPUSH
22602: LD_INT 1
22604: PPUSH
22605: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22609: LD_INT 2
22611: PPUSH
22612: LD_VAR 0 3
22616: PPUSH
22617: LD_INT 1
22619: PPUSH
22620: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22624: LD_INT 11
22626: PPUSH
22627: LD_VAR 0 3
22631: PPUSH
22632: LD_INT 1
22634: PPUSH
22635: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
22639: LD_INT 20
22641: PPUSH
22642: LD_VAR 0 3
22646: PPUSH
22647: LD_INT 1
22649: PPUSH
22650: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
22654: LD_INT 48
22656: PPUSH
22657: LD_VAR 0 3
22661: PPUSH
22662: LD_INT 1
22664: PPUSH
22665: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
22669: LD_INT 49
22671: PPUSH
22672: LD_VAR 0 3
22676: PPUSH
22677: LD_INT 1
22679: PPUSH
22680: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
22684: LD_INT 50
22686: PPUSH
22687: LD_VAR 0 3
22691: PPUSH
22692: LD_INT 1
22694: PPUSH
22695: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
22699: LD_INT 69
22701: PPUSH
22702: LD_VAR 0 3
22706: PPUSH
22707: LD_INT 1
22709: PPUSH
22710: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
22714: LD_INT 39
22716: PPUSH
22717: LD_VAR 0 3
22721: PPUSH
22722: LD_INT 1
22724: PPUSH
22725: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
22729: LD_INT 34
22731: PPUSH
22732: LD_VAR 0 3
22736: PPUSH
22737: LD_INT 1
22739: PPUSH
22740: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
22744: LD_INT 42
22746: PPUSH
22747: LD_VAR 0 3
22751: PPUSH
22752: LD_INT 1
22754: PPUSH
22755: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
22759: LD_INT 44
22761: PPUSH
22762: LD_VAR 0 3
22766: PPUSH
22767: LD_INT 1
22769: PPUSH
22770: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
22774: LD_INT 41
22776: PPUSH
22777: LD_VAR 0 3
22781: PPUSH
22782: LD_INT 1
22784: PPUSH
22785: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
22789: LD_INT 13
22791: PPUSH
22792: LD_VAR 0 3
22796: PPUSH
22797: LD_INT 1
22799: PPUSH
22800: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
22804: LD_INT 40
22806: PPUSH
22807: LD_VAR 0 3
22811: PPUSH
22812: LD_INT 1
22814: PPUSH
22815: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
22819: LD_INT 43
22821: PPUSH
22822: LD_VAR 0 3
22826: PPUSH
22827: LD_INT 1
22829: PPUSH
22830: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
22834: LD_INT 70
22836: PPUSH
22837: LD_VAR 0 3
22841: PPUSH
22842: LD_INT 1
22844: PPUSH
22845: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
22849: LD_INT 23
22851: PPUSH
22852: LD_VAR 0 3
22856: PPUSH
22857: LD_INT 1
22859: PPUSH
22860: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
22864: LD_INT 51
22866: PPUSH
22867: LD_VAR 0 3
22871: PPUSH
22872: LD_INT 1
22874: PPUSH
22875: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
22879: LD_INT 52
22881: PPUSH
22882: LD_VAR 0 3
22886: PPUSH
22887: LD_INT 1
22889: PPUSH
22890: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
22894: LD_INT 6
22896: PPUSH
22897: LD_VAR 0 3
22901: PPUSH
22902: LD_INT 1
22904: PPUSH
22905: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
22909: LD_INT 15
22911: PPUSH
22912: LD_VAR 0 3
22916: PPUSH
22917: LD_INT 1
22919: PPUSH
22920: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
22924: LD_INT 7
22926: PPUSH
22927: LD_VAR 0 3
22931: PPUSH
22932: LD_INT 1
22934: PPUSH
22935: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
22939: LD_INT 12
22941: PPUSH
22942: LD_VAR 0 3
22946: PPUSH
22947: LD_INT 1
22949: PPUSH
22950: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
22954: LD_INT 10
22956: PPUSH
22957: LD_VAR 0 3
22961: PPUSH
22962: LD_INT 1
22964: PPUSH
22965: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
22969: LD_INT 17
22971: PPUSH
22972: LD_VAR 0 3
22976: PPUSH
22977: LD_INT 1
22979: PPUSH
22980: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
22984: LD_INT 18
22986: PPUSH
22987: LD_VAR 0 3
22991: PPUSH
22992: LD_INT 1
22994: PPUSH
22995: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
22999: LD_INT 60
23001: PPUSH
23002: LD_VAR 0 3
23006: PPUSH
23007: LD_INT 1
23009: PPUSH
23010: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
23014: LD_INT 61
23016: PPUSH
23017: LD_VAR 0 3
23021: PPUSH
23022: LD_INT 1
23024: PPUSH
23025: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
23029: LD_INT 32
23031: PPUSH
23032: LD_VAR 0 3
23036: PPUSH
23037: LD_INT 1
23039: PPUSH
23040: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
23044: LD_INT 27
23046: PPUSH
23047: LD_VAR 0 3
23051: PPUSH
23052: LD_INT 1
23054: PPUSH
23055: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
23059: LD_INT 36
23061: PPUSH
23062: LD_VAR 0 3
23066: PPUSH
23067: LD_INT 1
23069: PPUSH
23070: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
23074: LD_INT 33
23076: PPUSH
23077: LD_VAR 0 3
23081: PPUSH
23082: LD_INT 1
23084: PPUSH
23085: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
23089: LD_INT 9
23091: PPUSH
23092: LD_VAR 0 3
23096: PPUSH
23097: LD_INT 1
23099: PPUSH
23100: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
23104: LD_INT 38
23106: PPUSH
23107: LD_VAR 0 3
23111: PPUSH
23112: LD_INT 1
23114: PPUSH
23115: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
23119: LD_INT 57
23121: PPUSH
23122: LD_VAR 0 3
23126: PPUSH
23127: LD_INT 1
23129: PPUSH
23130: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
23134: LD_INT 58
23136: PPUSH
23137: LD_VAR 0 3
23141: PPUSH
23142: LD_INT 1
23144: PPUSH
23145: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
23149: LD_INT 28
23151: PPUSH
23152: LD_VAR 0 3
23156: PPUSH
23157: LD_INT 1
23159: PPUSH
23160: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
23164: LD_INT 29
23166: PPUSH
23167: LD_VAR 0 3
23171: PPUSH
23172: LD_INT 1
23174: PPUSH
23175: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
23179: LD_INT 30
23181: PPUSH
23182: LD_VAR 0 3
23186: PPUSH
23187: LD_INT 1
23189: PPUSH
23190: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
23194: LD_INT 37
23196: PPUSH
23197: LD_VAR 0 3
23201: PPUSH
23202: LD_INT 1
23204: PPUSH
23205: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
23209: LD_INT 63
23211: PPUSH
23212: LD_VAR 0 3
23216: PPUSH
23217: LD_INT 1
23219: PPUSH
23220: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
23224: LD_INT 64
23226: PPUSH
23227: LD_VAR 0 3
23231: PPUSH
23232: LD_INT 1
23234: PPUSH
23235: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
23239: LD_INT 3
23241: PPUSH
23242: LD_VAR 0 3
23246: PPUSH
23247: LD_INT 1
23249: PPUSH
23250: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
23254: LD_INT 4
23256: PPUSH
23257: LD_VAR 0 3
23261: PPUSH
23262: LD_INT 1
23264: PPUSH
23265: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
23269: LD_INT 5
23271: PPUSH
23272: LD_VAR 0 3
23276: PPUSH
23277: LD_INT 1
23279: PPUSH
23280: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
23284: LD_INT 8
23286: PPUSH
23287: LD_VAR 0 3
23291: PPUSH
23292: LD_INT 1
23294: PPUSH
23295: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
23299: LD_INT 66
23301: PPUSH
23302: LD_VAR 0 3
23306: PPUSH
23307: LD_INT 1
23309: PPUSH
23310: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
23314: LD_INT 67
23316: PPUSH
23317: LD_VAR 0 3
23321: PPUSH
23322: LD_INT 1
23324: PPUSH
23325: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
23329: LD_INT 21
23331: PPUSH
23332: LD_VAR 0 3
23336: PPUSH
23337: LD_INT 1
23339: PPUSH
23340: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
23344: LD_INT 22
23346: PPUSH
23347: LD_VAR 0 3
23351: PPUSH
23352: LD_INT 1
23354: PPUSH
23355: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
23359: LD_INT 19
23361: PPUSH
23362: LD_VAR 0 3
23366: PPUSH
23367: LD_INT 1
23369: PPUSH
23370: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
23374: LD_INT 26
23376: PPUSH
23377: LD_VAR 0 3
23381: PPUSH
23382: LD_INT 1
23384: PPUSH
23385: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
23389: LD_INT 54
23391: PPUSH
23392: LD_VAR 0 3
23396: PPUSH
23397: LD_INT 1
23399: PPUSH
23400: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
23404: LD_INT 55
23406: PPUSH
23407: LD_VAR 0 3
23411: PPUSH
23412: LD_INT 1
23414: PPUSH
23415: CALL_OW 322
// for i = 0 to 39 do
23419: LD_ADDR_VAR 0 4
23423: PUSH
23424: DOUBLE
23425: LD_INT 0
23427: DEC
23428: ST_TO_ADDR
23429: LD_INT 39
23431: PUSH
23432: FOR_TO
23433: IFFALSE 23454
// SetRestrict ( i , side , true ) ;
23435: LD_VAR 0 4
23439: PPUSH
23440: LD_VAR 0 3
23444: PPUSH
23445: LD_INT 1
23447: PPUSH
23448: CALL_OW 324
23452: GO 23432
23454: POP
23455: POP
// end ; else
23456: GO 23533
23458: POP
// begin for i = 1 to 73 do
23459: LD_ADDR_VAR 0 4
23463: PUSH
23464: DOUBLE
23465: LD_INT 1
23467: DEC
23468: ST_TO_ADDR
23469: LD_INT 73
23471: PUSH
23472: FOR_TO
23473: IFFALSE 23494
// SetTech ( i , side , state_enabled ) ;
23475: LD_VAR 0 4
23479: PPUSH
23480: LD_VAR 0 3
23484: PPUSH
23485: LD_INT 1
23487: PPUSH
23488: CALL_OW 322
23492: GO 23472
23494: POP
23495: POP
// for i = 0 to 39 do
23496: LD_ADDR_VAR 0 4
23500: PUSH
23501: DOUBLE
23502: LD_INT 0
23504: DEC
23505: ST_TO_ADDR
23506: LD_INT 39
23508: PUSH
23509: FOR_TO
23510: IFFALSE 23531
// SetRestrict ( i , side , true ) ;
23512: LD_VAR 0 4
23516: PPUSH
23517: LD_VAR 0 3
23521: PPUSH
23522: LD_INT 1
23524: PPUSH
23525: CALL_OW 324
23529: GO 23509
23531: POP
23532: POP
// end ; end ; end ;
23533: GO 19538
23535: POP
23536: POP
// end ; end_of_file
23537: LD_VAR 0 2
23541: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
23542: LD_INT 0
23544: PPUSH
23545: PPUSH
23546: PPUSH
23547: PPUSH
23548: PPUSH
23549: PPUSH
23550: PPUSH
23551: PPUSH
23552: PPUSH
// for i := 1 to 8 do
23553: LD_ADDR_VAR 0 2
23557: PUSH
23558: DOUBLE
23559: LD_INT 1
23561: DEC
23562: ST_TO_ADDR
23563: LD_INT 8
23565: PUSH
23566: FOR_TO
23567: IFFALSE 23951
// begin if Side_Positions [ i ] then
23569: LD_EXP 18
23573: PUSH
23574: LD_VAR 0 2
23578: ARRAY
23579: IFFALSE 23949
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
23581: LD_ADDR_VAR 0 7
23585: PUSH
23586: LD_INT 22
23588: PUSH
23589: LD_VAR 0 2
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PUSH
23598: LD_INT 21
23600: PUSH
23601: LD_INT 1
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PPUSH
23612: CALL_OW 69
23616: PUSH
23617: LD_INT 0
23619: PLUS
23620: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23621: LD_ADDR_VAR 0 9
23625: PUSH
23626: LD_INT 22
23628: PUSH
23629: LD_VAR 0 2
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: PUSH
23638: LD_INT 2
23640: PUSH
23641: LD_INT 30
23643: PUSH
23644: LD_INT 0
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: PUSH
23651: LD_INT 30
23653: PUSH
23654: LD_INT 1
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: LIST
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PPUSH
23670: CALL_OW 69
23674: ST_TO_ADDR
// crates := 0 ;
23675: LD_ADDR_VAR 0 4
23679: PUSH
23680: LD_INT 0
23682: ST_TO_ADDR
// oil := 0 ;
23683: LD_ADDR_VAR 0 5
23687: PUSH
23688: LD_INT 0
23690: ST_TO_ADDR
// sib := 0 ;
23691: LD_ADDR_VAR 0 6
23695: PUSH
23696: LD_INT 0
23698: ST_TO_ADDR
// if bases then
23699: LD_VAR 0 9
23703: IFFALSE 23809
// begin for j in bases do
23705: LD_ADDR_VAR 0 3
23709: PUSH
23710: LD_VAR 0 9
23714: PUSH
23715: FOR_IN
23716: IFFALSE 23807
// begin base := GetBase ( j ) ;
23718: LD_ADDR_VAR 0 8
23722: PUSH
23723: LD_VAR 0 3
23727: PPUSH
23728: CALL_OW 274
23732: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
23733: LD_ADDR_VAR 0 4
23737: PUSH
23738: LD_VAR 0 4
23742: PUSH
23743: LD_VAR 0 8
23747: PPUSH
23748: LD_INT 1
23750: PPUSH
23751: CALL_OW 275
23755: PLUS
23756: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
23757: LD_ADDR_VAR 0 5
23761: PUSH
23762: LD_VAR 0 5
23766: PUSH
23767: LD_VAR 0 8
23771: PPUSH
23772: LD_INT 2
23774: PPUSH
23775: CALL_OW 275
23779: PLUS
23780: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
23781: LD_ADDR_VAR 0 6
23785: PUSH
23786: LD_VAR 0 6
23790: PUSH
23791: LD_VAR 0 8
23795: PPUSH
23796: LD_INT 3
23798: PPUSH
23799: CALL_OW 275
23803: PLUS
23804: ST_TO_ADDR
// end ;
23805: GO 23715
23807: POP
23808: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
23809: LD_STRING setSpecText(
23811: PUSH
23812: LD_VAR 0 2
23816: STR
23817: PUSH
23818: LD_STRING ,
23820: STR
23821: PUSH
23822: LD_INT 2
23824: STR
23825: PUSH
23826: LD_STRING ,
23828: STR
23829: PUSH
23830: LD_VAR 0 4
23834: STR
23835: PUSH
23836: LD_STRING )
23838: STR
23839: PPUSH
23840: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
23844: LD_STRING setSpecText(
23846: PUSH
23847: LD_VAR 0 2
23851: STR
23852: PUSH
23853: LD_STRING ,
23855: STR
23856: PUSH
23857: LD_INT 3
23859: STR
23860: PUSH
23861: LD_STRING ,
23863: STR
23864: PUSH
23865: LD_VAR 0 5
23869: STR
23870: PUSH
23871: LD_STRING )
23873: STR
23874: PPUSH
23875: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
23879: LD_STRING setSpecText(
23881: PUSH
23882: LD_VAR 0 2
23886: STR
23887: PUSH
23888: LD_STRING ,
23890: STR
23891: PUSH
23892: LD_INT 4
23894: STR
23895: PUSH
23896: LD_STRING ,
23898: STR
23899: PUSH
23900: LD_VAR 0 6
23904: STR
23905: PUSH
23906: LD_STRING )
23908: STR
23909: PPUSH
23910: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
23914: LD_STRING setSpecText(
23916: PUSH
23917: LD_VAR 0 2
23921: STR
23922: PUSH
23923: LD_STRING ,
23925: STR
23926: PUSH
23927: LD_INT 5
23929: STR
23930: PUSH
23931: LD_STRING ,
23933: STR
23934: PUSH
23935: LD_VAR 0 7
23939: STR
23940: PUSH
23941: LD_STRING )
23943: STR
23944: PPUSH
23945: CALL_OW 559
// end ; end ;
23949: GO 23566
23951: POP
23952: POP
// end ;
23953: LD_VAR 0 1
23957: RET
// every 0 0$1 do
23958: GO 23960
23960: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
23961: LD_STRING setSpecLogoNumber(
23963: PUSH
23964: LD_INT 2
23966: STR
23967: PUSH
23968: LD_STRING ,
23970: STR
23971: PUSH
23972: LD_INT 1
23974: STR
23975: PUSH
23976: LD_STRING )
23978: STR
23979: PPUSH
23980: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
23984: LD_STRING setSpecLogoNumber(
23986: PUSH
23987: LD_INT 3
23989: STR
23990: PUSH
23991: LD_STRING ,
23993: STR
23994: PUSH
23995: LD_INT 2
23997: STR
23998: PUSH
23999: LD_STRING )
24001: STR
24002: PPUSH
24003: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
24007: LD_STRING setSpecLogoNumber(
24009: PUSH
24010: LD_INT 4
24012: STR
24013: PUSH
24014: LD_STRING ,
24016: STR
24017: PUSH
24018: LD_INT 3
24020: STR
24021: PUSH
24022: LD_STRING )
24024: STR
24025: PPUSH
24026: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
24030: LD_STRING setSpecLogoNumber(
24032: PUSH
24033: LD_INT 5
24035: STR
24036: PUSH
24037: LD_STRING ,
24039: STR
24040: PUSH
24041: LD_INT 4
24043: STR
24044: PUSH
24045: LD_STRING )
24047: STR
24048: PPUSH
24049: CALL_OW 559
// end ;
24053: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
24054: LD_INT 2
24056: PUSH
24057: LD_INT 30
24059: PUSH
24060: LD_INT 0
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 30
24069: PUSH
24070: LD_INT 1
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: LIST
24081: PPUSH
24082: CALL_OW 69
24086: IFFALSE 24096
24088: GO 24090
24090: DISABLE
// begin enable ;
24091: ENABLE
// UpdateSpectatorBar ;
24092: CALL 23542 0 0
// end ;
24096: END
