// export def_base_size , def_west_nations , def_east_nations ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , respawning_time_min , respawning_time_max , siberite_bomb_Delay ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Position_Nations ; export depot_def , breastworks_def , labs_def , factory_def , start_def , extra_oil_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function prepare_deposits ; var list , un , deposits ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
// list := GetListOfResourcesInArea ( west_side ) ^ GetListOfResourcesInArea ( east_side ) ;
   6: LD_ADDR_VAR 0 2
  10: PUSH
  11: LD_INT 8
  13: PPUSH
  14: CALL_OW 442
  18: PUSH
  19: LD_INT 9
  21: PPUSH
  22: CALL_OW 442
  26: ADD
  27: ST_TO_ADDR
// for un = 1 to ( list div 3 ) do
  28: LD_ADDR_VAR 0 3
  32: PUSH
  33: DOUBLE
  34: LD_INT 1
  36: DEC
  37: ST_TO_ADDR
  38: LD_VAR 0 2
  42: PUSH
  43: LD_INT 3
  45: DIV
  46: PUSH
  47: FOR_TO
  48: IFFALSE 94
// RemoveDepositXY ( list [ un * 3 - 2 ] , list [ un * 3 - 1 ] ) ;
  50: LD_VAR 0 2
  54: PUSH
  55: LD_VAR 0 3
  59: PUSH
  60: LD_INT 3
  62: MUL
  63: PUSH
  64: LD_INT 2
  66: MINUS
  67: ARRAY
  68: PPUSH
  69: LD_VAR 0 2
  73: PUSH
  74: LD_VAR 0 3
  78: PUSH
  79: LD_INT 3
  81: MUL
  82: PUSH
  83: LD_INT 1
  85: MINUS
  86: ARRAY
  87: PPUSH
  88: CALL_OW 63
  92: GO 47
  94: POP
  95: POP
// deposits := [ [ 40 , 49 , mat_oil ] , [ 40 , 68 , mat_oil ] , [ 9 , 3 , mat_siberit ] , [ 61 , 116 , mat_siberit ] , [ 177 , 46 , mat_oil ] , [ 185 , 71 , mat_oil ] , [ 157 , 3 , mat_siberit ] , [ 213 , 116 , mat_siberit ] ] ;
  96: LD_ADDR_VAR 0 4
 100: PUSH
 101: LD_INT 40
 103: PUSH
 104: LD_INT 49
 106: PUSH
 107: LD_INT 2
 109: PUSH
 110: EMPTY
 111: LIST
 112: LIST
 113: LIST
 114: PUSH
 115: LD_INT 40
 117: PUSH
 118: LD_INT 68
 120: PUSH
 121: LD_INT 2
 123: PUSH
 124: EMPTY
 125: LIST
 126: LIST
 127: LIST
 128: PUSH
 129: LD_INT 9
 131: PUSH
 132: LD_INT 3
 134: PUSH
 135: LD_INT 3
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: LIST
 142: PUSH
 143: LD_INT 61
 145: PUSH
 146: LD_INT 116
 148: PUSH
 149: LD_INT 3
 151: PUSH
 152: EMPTY
 153: LIST
 154: LIST
 155: LIST
 156: PUSH
 157: LD_INT 177
 159: PUSH
 160: LD_INT 46
 162: PUSH
 163: LD_INT 2
 165: PUSH
 166: EMPTY
 167: LIST
 168: LIST
 169: LIST
 170: PUSH
 171: LD_INT 185
 173: PUSH
 174: LD_INT 71
 176: PUSH
 177: LD_INT 2
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: LIST
 184: PUSH
 185: LD_INT 157
 187: PUSH
 188: LD_INT 3
 190: PUSH
 191: LD_INT 3
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: PUSH
 199: LD_INT 213
 201: PUSH
 202: LD_INT 116
 204: PUSH
 205: LD_INT 3
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: PUSH
 213: EMPTY
 214: LIST
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: ST_TO_ADDR
// for un in deposits do
 223: LD_ADDR_VAR 0 3
 227: PUSH
 228: LD_VAR 0 4
 232: PUSH
 233: FOR_IN
 234: IFFALSE 269
// CreateDepositXY ( un [ 1 ] , un [ 2 ] , un [ 3 ] ) ;
 236: LD_VAR 0 3
 240: PUSH
 241: LD_INT 1
 243: ARRAY
 244: PPUSH
 245: LD_VAR 0 3
 249: PUSH
 250: LD_INT 2
 252: ARRAY
 253: PPUSH
 254: LD_VAR 0 3
 258: PUSH
 259: LD_INT 3
 261: ARRAY
 262: PPUSH
 263: CALL_OW 62
 267: GO 233
 269: POP
 270: POP
// end ;
 271: LD_VAR 0 1
 275: RET
// function init_map ; var i ; begin
 276: LD_INT 0
 278: PPUSH
 279: PPUSH
// prepare_deposits ;
 280: CALL 0 0 0
// extra_oil_deposits_locations := [ [ 29 , 3 ] , [ 82 , 115 ] , [ 134 , 3 ] , [ 192 , 116 ] ] ;
 284: LD_ADDR_EXP 27
 288: PUSH
 289: LD_INT 29
 291: PUSH
 292: LD_INT 3
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: PUSH
 299: LD_INT 82
 301: PUSH
 302: LD_INT 115
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: PUSH
 309: LD_INT 134
 311: PUSH
 312: LD_INT 3
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: PUSH
 319: LD_INT 192
 321: PUSH
 322: LD_INT 116
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: LIST
 333: LIST
 334: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 62 , 60 ] , [ 157 , 60 ] ] ;
 335: LD_ADDR_EXP 28
 339: PUSH
 340: LD_INT 62
 342: PUSH
 343: LD_INT 60
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: PUSH
 350: LD_INT 157
 352: PUSH
 353: LD_INT 60
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: ST_TO_ADDR
// depot_def := [ [ 35 , 34 , 0 ] , [ 56 , 86 , 2 ] , [ 158 , 34 , 5 ] , [ 185 , 86 , 3 ] ] ;
 364: LD_ADDR_EXP 22
 368: PUSH
 369: LD_INT 35
 371: PUSH
 372: LD_INT 34
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: EMPTY
 379: LIST
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 56
 385: PUSH
 386: LD_INT 86
 388: PUSH
 389: LD_INT 2
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: LIST
 396: PUSH
 397: LD_INT 158
 399: PUSH
 400: LD_INT 34
 402: PUSH
 403: LD_INT 5
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: LD_INT 185
 413: PUSH
 414: LD_INT 86
 416: PUSH
 417: LD_INT 3
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: LIST
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: LIST
 429: LIST
 430: ST_TO_ADDR
// labs_def := [ [ 19 , 28 , 1 ] , [ 49 , 92 , 1 ] , [ 166 , 23 , 4 ] , [ 205 , 97 , 4 ] ] ;
 431: LD_ADDR_EXP 24
 435: PUSH
 436: LD_INT 19
 438: PUSH
 439: LD_INT 28
 441: PUSH
 442: LD_INT 1
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PUSH
 450: LD_INT 49
 452: PUSH
 453: LD_INT 92
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 166
 466: PUSH
 467: LD_INT 23
 469: PUSH
 470: LD_INT 4
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: LIST
 477: PUSH
 478: LD_INT 205
 480: PUSH
 481: LD_INT 97
 483: PUSH
 484: LD_INT 4
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: ST_TO_ADDR
// factory_def := [ [ 26 , 16 , 2 ] , [ 64 , 103 , 0 ] , [ 154 , 18 , 3 ] , [ 190 , 103 , 5 ] ] ;
 498: LD_ADDR_EXP 25
 502: PUSH
 503: LD_INT 26
 505: PUSH
 506: LD_INT 16
 508: PUSH
 509: LD_INT 2
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: LIST
 516: PUSH
 517: LD_INT 64
 519: PUSH
 520: LD_INT 103
 522: PUSH
 523: LD_INT 0
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 154
 533: PUSH
 534: LD_INT 18
 536: PUSH
 537: LD_INT 3
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_INT 190
 547: PUSH
 548: LD_INT 103
 550: PUSH
 551: LD_INT 5
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: LIST
 558: PUSH
 559: EMPTY
 560: LIST
 561: LIST
 562: LIST
 563: LIST
 564: ST_TO_ADDR
// start_def := [ [ 35 , 26 ] , [ 65 , 94 ] , [ 150 , 26 ] , [ 185 , 94 ] ] ;
 565: LD_ADDR_EXP 26
 569: PUSH
 570: LD_INT 35
 572: PUSH
 573: LD_INT 26
 575: PUSH
 576: EMPTY
 577: LIST
 578: LIST
 579: PUSH
 580: LD_INT 65
 582: PUSH
 583: LD_INT 94
 585: PUSH
 586: EMPTY
 587: LIST
 588: LIST
 589: PUSH
 590: LD_INT 150
 592: PUSH
 593: LD_INT 26
 595: PUSH
 596: EMPTY
 597: LIST
 598: LIST
 599: PUSH
 600: LD_INT 185
 602: PUSH
 603: LD_INT 94
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: ST_TO_ADDR
// breastworks_def := [ [ [ 44 , 18 , 4 ] , [ 47 , 51 , 5 ] , [ 35 , 8 , 4 ] , [ 50 , 38 , 5 ] ] , [ [ 81 , 97 , 4 ] , [ 54 , 71 , 3 ] , [ 81 , 110 , 5 ] , [ 66 , 82 , 3 ] ] , [ [ 136 , 20 , 1 ] , [ 164 , 48 , 1 ] , [ 130 , 8 , 1 ] , [ 147 , 37 , 0 ] ] , [ [ 181 , 103 , 1 ] , [ 178 , 72 , 1 ] , [ 186 , 112 , 1 ] , [ 172 , 82 , 2 ] ] ] ;
 616: LD_ADDR_EXP 23
 620: PUSH
 621: LD_INT 44
 623: PUSH
 624: LD_INT 18
 626: PUSH
 627: LD_INT 4
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: LIST
 634: PUSH
 635: LD_INT 47
 637: PUSH
 638: LD_INT 51
 640: PUSH
 641: LD_INT 5
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PUSH
 649: LD_INT 35
 651: PUSH
 652: LD_INT 8
 654: PUSH
 655: LD_INT 4
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: LIST
 662: PUSH
 663: LD_INT 50
 665: PUSH
 666: LD_INT 38
 668: PUSH
 669: LD_INT 5
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: LIST
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: PUSH
 683: LD_INT 81
 685: PUSH
 686: LD_INT 97
 688: PUSH
 689: LD_INT 4
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: PUSH
 697: LD_INT 54
 699: PUSH
 700: LD_INT 71
 702: PUSH
 703: LD_INT 3
 705: PUSH
 706: EMPTY
 707: LIST
 708: LIST
 709: LIST
 710: PUSH
 711: LD_INT 81
 713: PUSH
 714: LD_INT 110
 716: PUSH
 717: LD_INT 5
 719: PUSH
 720: EMPTY
 721: LIST
 722: LIST
 723: LIST
 724: PUSH
 725: LD_INT 66
 727: PUSH
 728: LD_INT 82
 730: PUSH
 731: LD_INT 3
 733: PUSH
 734: EMPTY
 735: LIST
 736: LIST
 737: LIST
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: LIST
 743: LIST
 744: PUSH
 745: LD_INT 136
 747: PUSH
 748: LD_INT 20
 750: PUSH
 751: LD_INT 1
 753: PUSH
 754: EMPTY
 755: LIST
 756: LIST
 757: LIST
 758: PUSH
 759: LD_INT 164
 761: PUSH
 762: LD_INT 48
 764: PUSH
 765: LD_INT 1
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: LIST
 772: PUSH
 773: LD_INT 130
 775: PUSH
 776: LD_INT 8
 778: PUSH
 779: LD_INT 1
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PUSH
 787: LD_INT 147
 789: PUSH
 790: LD_INT 37
 792: PUSH
 793: LD_INT 0
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: LIST
 800: PUSH
 801: EMPTY
 802: LIST
 803: LIST
 804: LIST
 805: LIST
 806: PUSH
 807: LD_INT 181
 809: PUSH
 810: LD_INT 103
 812: PUSH
 813: LD_INT 1
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: LIST
 820: PUSH
 821: LD_INT 178
 823: PUSH
 824: LD_INT 72
 826: PUSH
 827: LD_INT 1
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: LIST
 834: PUSH
 835: LD_INT 186
 837: PUSH
 838: LD_INT 112
 840: PUSH
 841: LD_INT 1
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: LIST
 848: PUSH
 849: LD_INT 172
 851: PUSH
 852: LD_INT 82
 854: PUSH
 855: LD_INT 2
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: LIST
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: LIST
 873: LIST
 874: ST_TO_ADDR
// if def_extra_oil_deposits then
 875: LD_EXP 63
 879: IFFALSE 923
// for i in extra_oil_deposits_locations do
 881: LD_ADDR_VAR 0 2
 885: PUSH
 886: LD_EXP 27
 890: PUSH
 891: FOR_IN
 892: IFFALSE 921
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
 894: LD_VAR 0 2
 898: PUSH
 899: LD_INT 1
 901: ARRAY
 902: PPUSH
 903: LD_VAR 0 2
 907: PUSH
 908: LD_INT 2
 910: ARRAY
 911: PPUSH
 912: LD_INT 2
 914: PPUSH
 915: CALL_OW 62
 919: GO 891
 921: POP
 922: POP
// if def_extra_sib_deposits then
 923: LD_EXP 64
 927: IFFALSE 971
// for i in extra_sib_deposits_locations do
 929: LD_ADDR_VAR 0 2
 933: PUSH
 934: LD_EXP 28
 938: PUSH
 939: FOR_IN
 940: IFFALSE 969
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 2
 958: ARRAY
 959: PPUSH
 960: LD_INT 3
 962: PPUSH
 963: CALL_OW 62
 967: GO 939
 969: POP
 970: POP
// end ;
 971: LD_VAR 0 1
 975: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
 976: LD_INT 0
 978: PPUSH
 979: PPUSH
 980: PPUSH
 981: PPUSH
 982: PPUSH
 983: PPUSH
 984: PPUSH
 985: PPUSH
 986: PPUSH
// if Multiplayer then
 987: LD_OWVAR 4
 991: IFFALSE 1055
// begin Game_Type = mp_game_type ;
 993: LD_ADDR_EXP 56
 997: PUSH
 998: LD_OWVAR 6
1002: ST_TO_ADDR
// Your_Side := mp_player_side ;
1003: LD_ADDR_OWVAR 2
1007: PUSH
1008: LD_OWVAR 7
1012: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
1013: LD_ADDR_EXP 18
1017: PUSH
1018: LD_OWVAR 17
1022: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
1023: LD_ADDR_EXP 16
1027: PUSH
1028: LD_OWVAR 15
1032: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
1033: LD_ADDR_EXP 19
1037: PUSH
1038: LD_OWVAR 16
1042: ST_TO_ADDR
// Teams = mp_teams ;
1043: LD_ADDR_EXP 17
1047: PUSH
1048: LD_OWVAR 12
1052: ST_TO_ADDR
// end else
1053: GO 1195
// begin Game_Type = 12 ;
1055: LD_ADDR_EXP 56
1059: PUSH
1060: LD_INT 12
1062: ST_TO_ADDR
// Your_Side = 4 ;
1063: LD_ADDR_OWVAR 2
1067: PUSH
1068: LD_INT 4
1070: ST_TO_ADDR
// Side_Positions = [ 1 , 0 , 0 , 0 , 0 , 0 , 0 , 3 ] ;
1071: LD_ADDR_EXP 18
1075: PUSH
1076: LD_INT 1
1078: PUSH
1079: LD_INT 0
1081: PUSH
1082: LD_INT 0
1084: PUSH
1085: LD_INT 0
1087: PUSH
1088: LD_INT 0
1090: PUSH
1091: LD_INT 0
1093: PUSH
1094: LD_INT 0
1096: PUSH
1097: LD_INT 3
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: LIST
1106: LIST
1107: LIST
1108: LIST
1109: ST_TO_ADDR
// Side_Teams = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
1110: LD_ADDR_EXP 16
1114: PUSH
1115: LD_INT 0
1117: PUSH
1118: LD_INT 0
1120: PUSH
1121: LD_INT 0
1123: PUSH
1124: LD_INT 0
1126: PUSH
1127: LD_INT 0
1129: PUSH
1130: LD_INT 0
1132: PUSH
1133: LD_INT 0
1135: PUSH
1136: LD_INT 0
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: LIST
1148: ST_TO_ADDR
// Side_Nations = [ 3 , 0 , 0 , 0 , 0 , 0 , 0 , 1 ] ;
1149: LD_ADDR_EXP 19
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: LD_INT 0
1159: PUSH
1160: LD_INT 0
1162: PUSH
1163: LD_INT 0
1165: PUSH
1166: LD_INT 0
1168: PUSH
1169: LD_INT 0
1171: PUSH
1172: LD_INT 0
1174: PUSH
1175: LD_INT 1
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: LIST
1186: LIST
1187: ST_TO_ADDR
// Teams = [ ] ;
1188: LD_ADDR_EXP 17
1192: PUSH
1193: EMPTY
1194: ST_TO_ADDR
// end ; for i := 1 to 8 do
1195: LD_ADDR_VAR 0 8
1199: PUSH
1200: DOUBLE
1201: LD_INT 1
1203: DEC
1204: ST_TO_ADDR
1205: LD_INT 8
1207: PUSH
1208: FOR_TO
1209: IFFALSE 1296
// if Multiplayer_GetPlayerIsSpec ( i ) then
1211: LD_VAR 0 8
1215: PPUSH
1216: CALL_OW 530
1220: IFFALSE 1294
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
1222: LD_ADDR_EXP 18
1226: PUSH
1227: LD_EXP 18
1231: PPUSH
1232: LD_VAR 0 8
1236: PPUSH
1237: LD_INT 0
1239: PPUSH
1240: CALL_OW 1
1244: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
1245: LD_ADDR_EXP 17
1249: PUSH
1250: LD_EXP 17
1254: PPUSH
1255: LD_EXP 16
1259: PUSH
1260: LD_VAR 0 8
1264: ARRAY
1265: PPUSH
1266: LD_EXP 17
1270: PUSH
1271: LD_EXP 16
1275: PUSH
1276: LD_VAR 0 8
1280: ARRAY
1281: ARRAY
1282: PUSH
1283: LD_VAR 0 8
1287: DIFF
1288: PPUSH
1289: CALL_OW 1
1293: ST_TO_ADDR
// end ;
1294: GO 1208
1296: POP
1297: POP
// if Multiplayer then
1298: LD_OWVAR 4
1302: IFFALSE 1527
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
1304: LD_ADDR_EXP 58
1308: PUSH
1309: LD_INT 0
1311: PPUSH
1312: CALL_OW 426
1316: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
1317: LD_ADDR_EXP 59
1321: PUSH
1322: LD_INT 1
1324: PPUSH
1325: CALL_OW 426
1329: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
1330: LD_ADDR_EXP 60
1334: PUSH
1335: LD_INT 2
1337: PPUSH
1338: CALL_OW 426
1342: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
1343: LD_ADDR_EXP 61
1347: PUSH
1348: LD_INT 3
1350: PPUSH
1351: CALL_OW 426
1355: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
1356: LD_ADDR_EXP 62
1360: PUSH
1361: LD_INT 4
1363: PPUSH
1364: CALL_OW 426
1368: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
1369: LD_ADDR_EXP 63
1373: PUSH
1374: LD_INT 5
1376: PPUSH
1377: CALL_OW 426
1381: ST_TO_ADDR
// def_extra_sib_deposits = GetMultiplayerSetting ( 6 ) ;
1382: LD_ADDR_EXP 64
1386: PUSH
1387: LD_INT 6
1389: PPUSH
1390: CALL_OW 426
1394: ST_TO_ADDR
// def_base_size = GetMultiplayerSetting ( 7 ) ;
1395: LD_ADDR_EXP 1
1399: PUSH
1400: LD_INT 7
1402: PPUSH
1403: CALL_OW 426
1407: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
1408: LD_ADDR_EXP 65
1412: PUSH
1413: LD_INT 10
1415: PPUSH
1416: CALL_OW 426
1420: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
1421: LD_ADDR_EXP 66
1425: PUSH
1426: LD_INT 11
1428: PPUSH
1429: CALL_OW 426
1433: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
1434: LD_ADDR_EXP 67
1438: PUSH
1439: LD_INT 12
1441: PPUSH
1442: CALL_OW 426
1446: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
1447: LD_ADDR_EXP 69
1451: PUSH
1452: LD_INT 13
1454: PPUSH
1455: CALL_OW 426
1459: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
1460: LD_ADDR_EXP 68
1464: PUSH
1465: LD_INT 14
1467: PPUSH
1468: CALL_OW 426
1472: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
1473: LD_ADDR_EXP 70
1477: PUSH
1478: LD_INT 15
1480: PPUSH
1481: CALL_OW 426
1485: ST_TO_ADDR
// def_west_nations = GetMultiplayerSetting ( 21 ) ;
1486: LD_ADDR_EXP 2
1490: PUSH
1491: LD_INT 21
1493: PPUSH
1494: CALL_OW 426
1498: ST_TO_ADDR
// def_east_nations = GetMultiplayerSetting ( 22 ) ;
1499: LD_ADDR_EXP 3
1503: PUSH
1504: LD_INT 22
1506: PPUSH
1507: CALL_OW 426
1511: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 23 ) ;
1512: LD_ADDR_VAR 0 9
1516: PUSH
1517: LD_INT 23
1519: PPUSH
1520: CALL_OW 426
1524: ST_TO_ADDR
// end else
1525: GO 1667
// begin randomize ;
1527: CALL_OW 10
// def_base_level = 3 ;
1531: LD_ADDR_EXP 58
1535: PUSH
1536: LD_INT 3
1538: ST_TO_ADDR
// def_amount_of_people = 1 ;
1539: LD_ADDR_EXP 59
1543: PUSH
1544: LD_INT 1
1546: ST_TO_ADDR
// def_skill_level = 1 ;
1547: LD_ADDR_EXP 60
1551: PUSH
1552: LD_INT 1
1554: ST_TO_ADDR
// def_starting_resources = 2 ;
1555: LD_ADDR_EXP 61
1559: PUSH
1560: LD_INT 2
1562: ST_TO_ADDR
// def_shipments_density = 1 ;
1563: LD_ADDR_EXP 62
1567: PUSH
1568: LD_INT 1
1570: ST_TO_ADDR
// def_extra_oil_deposits = 1 ;
1571: LD_ADDR_EXP 63
1575: PUSH
1576: LD_INT 1
1578: ST_TO_ADDR
// def_extra_sib_deposits = 1 ;
1579: LD_ADDR_EXP 64
1583: PUSH
1584: LD_INT 1
1586: ST_TO_ADDR
// def_base_size = 2 ;
1587: LD_ADDR_EXP 1
1591: PUSH
1592: LD_INT 2
1594: ST_TO_ADDR
// def_shared_vision = 1 ;
1595: LD_ADDR_EXP 65
1599: PUSH
1600: LD_INT 1
1602: ST_TO_ADDR
// def_morale_flags = 1 ;
1603: LD_ADDR_EXP 66
1607: PUSH
1608: LD_INT 1
1610: ST_TO_ADDR
// def_siberite_detection = 1 ;
1611: LD_ADDR_EXP 67
1615: PUSH
1616: LD_INT 1
1618: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
1619: LD_ADDR_EXP 69
1623: PUSH
1624: LD_INT 3
1626: ST_TO_ADDR
// def_people_respawning = 2 ;
1627: LD_ADDR_EXP 68
1631: PUSH
1632: LD_INT 2
1634: ST_TO_ADDR
// def_siberite_bomb = 0 ;
1635: LD_ADDR_EXP 70
1639: PUSH
1640: LD_INT 0
1642: ST_TO_ADDR
// def_west_nations = 0 ;
1643: LD_ADDR_EXP 2
1647: PUSH
1648: LD_INT 0
1650: ST_TO_ADDR
// def_east_nations = 2 ;
1651: LD_ADDR_EXP 3
1655: PUSH
1656: LD_INT 2
1658: ST_TO_ADDR
// tech_level = 4 ;
1659: LD_ADDR_VAR 0 9
1663: PUSH
1664: LD_INT 4
1666: ST_TO_ADDR
// end ; InitGameRules ;
1667: CALL 15925 0 0
// if def_game_rules = 0 then
1671: LD_EXP 57
1675: PUSH
1676: LD_INT 0
1678: EQUAL
1679: IFFALSE 1706
// begin if isSGUI then
1681: LD_OWVAR 83
1685: IFFALSE 1693
// setMpTechs ( ) else
1687: CALL 19375 0 0
1691: GO 1706
// begin SetMpTechLevel ( tech_level + 1 ) ;
1693: LD_VAR 0 9
1697: PUSH
1698: LD_INT 1
1700: PLUS
1701: PPUSH
1702: CALL 19522 0 1
// end ; end ; if not def_base_level then
1706: LD_EXP 58
1710: NOT
1711: IFFALSE 1721
// def_base_size := 0 ;
1713: LD_ADDR_EXP 1
1717: PUSH
1718: LD_INT 0
1720: ST_TO_ADDR
// is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1721: LD_ADDR_EXP 4
1725: PUSH
1726: LD_INT 0
1728: PUSH
1729: LD_INT 1
1731: PUSH
1732: LD_INT 1
1734: PUSH
1735: LD_INT 1
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: PUSH
1744: LD_EXP 58
1748: PUSH
1749: LD_INT 1
1751: PLUS
1752: ARRAY
1753: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
1754: LD_ADDR_EXP 5
1758: PUSH
1759: LD_INT 0
1761: PUSH
1762: LD_INT 0
1764: PUSH
1765: LD_INT 2
1767: PUSH
1768: LD_INT 4
1770: PUSH
1771: EMPTY
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: PUSH
1777: LD_EXP 58
1781: PUSH
1782: LD_INT 1
1784: PLUS
1785: ARRAY
1786: ST_TO_ADDR
// number_of_people = [ 5 , 7 , 9 , 11 ] [ def_amount_of_people + 1 ] ;
1787: LD_ADDR_EXP 6
1791: PUSH
1792: LD_INT 5
1794: PUSH
1795: LD_INT 7
1797: PUSH
1798: LD_INT 9
1800: PUSH
1801: LD_INT 11
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: PUSH
1810: LD_EXP 59
1814: PUSH
1815: LD_INT 1
1817: PLUS
1818: ARRAY
1819: ST_TO_ADDR
// skill_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1820: LD_ADDR_EXP 7
1824: PUSH
1825: LD_INT 2
1827: PUSH
1828: LD_INT 3
1830: PUSH
1831: LD_INT 4
1833: PUSH
1834: LD_INT 5
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: LIST
1841: LIST
1842: PUSH
1843: LD_EXP 60
1847: PUSH
1848: LD_INT 1
1850: PLUS
1851: ARRAY
1852: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1853: LD_ADDR_EXP 9
1857: PUSH
1858: LD_INT 0
1860: PUSH
1861: LD_INT 0
1863: PUSH
1864: LD_INT 0
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: LIST
1871: PUSH
1872: LD_INT 30
1874: PUSH
1875: LD_INT 0
1877: PUSH
1878: LD_INT 0
1880: PUSH
1881: EMPTY
1882: LIST
1883: LIST
1884: LIST
1885: PUSH
1886: LD_INT 50
1888: PUSH
1889: LD_INT 20
1891: PUSH
1892: LD_INT 0
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: LIST
1899: PUSH
1900: LD_INT 80
1902: PUSH
1903: LD_INT 40
1905: PUSH
1906: LD_INT 20
1908: PUSH
1909: EMPTY
1910: LIST
1911: LIST
1912: LIST
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: PUSH
1920: LD_EXP 61
1924: PUSH
1925: LD_INT 1
1927: PLUS
1928: ARRAY
1929: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1930: LD_ADDR_EXP 8
1934: PUSH
1935: LD_INT 10
1937: PUSH
1938: EMPTY
1939: LIST
1940: PUSH
1941: LD_INT 7
1943: PUSH
1944: LD_INT 14
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: PUSH
1951: LD_INT 6
1953: PUSH
1954: LD_INT 12
1956: PUSH
1957: LD_INT 18
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: LIST
1964: PUSH
1965: LD_INT 5
1967: PUSH
1968: LD_INT 10
1970: PUSH
1971: LD_INT 15
1973: PUSH
1974: LD_INT 20
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: PUSH
1989: LD_EXP 61
1993: PUSH
1994: LD_INT 1
1996: PLUS
1997: ARRAY
1998: ST_TO_ADDR
// shipments_density = [ 18 , 25 , 35 ] [ def_shipments_density + 1 ] ;
1999: LD_ADDR_EXP 10
2003: PUSH
2004: LD_INT 18
2006: PUSH
2007: LD_INT 25
2009: PUSH
2010: LD_INT 35
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: LIST
2017: PUSH
2018: LD_EXP 62
2022: PUSH
2023: LD_INT 1
2025: PLUS
2026: ARRAY
2027: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
2028: LD_ADDR_EXP 12
2032: PUSH
2033: LD_INT 0
2035: PUSH
2036: LD_INT 3
2038: PUSH
2039: LD_INT 6
2041: PUSH
2042: LD_INT 9
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: PUSH
2051: LD_EXP 69
2055: PUSH
2056: LD_INT 1
2058: PLUS
2059: ARRAY
2060: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
2061: LD_ADDR_EXP 13
2065: PUSH
2066: LD_INT 0
2068: PUSH
2069: LD_INT 8400
2071: PUSH
2072: LD_INT 1750
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: LIST
2079: PUSH
2080: LD_EXP 68
2084: PUSH
2085: LD_INT 1
2087: PLUS
2088: ARRAY
2089: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
2090: LD_ADDR_EXP 14
2094: PUSH
2095: LD_INT 0
2097: PUSH
2098: LD_INT 21000
2100: PUSH
2101: LD_INT 4200
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: LIST
2108: PUSH
2109: LD_EXP 68
2113: PUSH
2114: LD_INT 1
2116: PLUS
2117: ARRAY
2118: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
2119: LD_ADDR_EXP 15
2123: PUSH
2124: LD_INT 0
2126: PUSH
2127: LD_INT 1
2129: PUSH
2130: LD_INT 63000
2132: PUSH
2133: LD_INT 126000
2135: PUSH
2136: LD_INT 189000
2138: PUSH
2139: LD_INT 252000
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: PUSH
2150: LD_EXP 70
2154: PUSH
2155: LD_INT 1
2157: PLUS
2158: ARRAY
2159: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
2160: LD_ADDR_EXP 11
2164: PUSH
2165: LD_INT 1
2167: NEG
2168: PUSH
2169: LD_INT 350
2171: PUSH
2172: LD_INT 700
2174: PUSH
2175: LD_INT 1400
2177: PUSH
2178: LD_INT 0
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: LIST
2187: PUSH
2188: LD_EXP 66
2192: PUSH
2193: LD_INT 1
2195: PLUS
2196: ARRAY
2197: ST_TO_ADDR
// battle_flags_id = [ ] ;
2198: LD_ADDR_EXP 29
2202: PUSH
2203: EMPTY
2204: ST_TO_ADDR
// if not def_builduptime then
2205: LD_EXP 71
2209: NOT
2210: IFFALSE 2215
// disable ( 600 ) ;
2212: LD_INT 600
2214: DISABLE_MARKED
// end ;
2215: LD_VAR 0 1
2219: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2220: LD_INT 0
2222: PPUSH
2223: PPUSH
2224: PPUSH
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
2225: LD_ADDR_EXP 20
2229: PUSH
2230: LD_EXP 16
2234: PUSH
2235: LD_INT 0
2237: PUSH
2238: EMPTY
2239: LIST
2240: DIFF
2241: PUSH
2242: LD_INT 1
2244: GREATER
2245: ST_TO_ADDR
// if not Team_Game then
2246: LD_EXP 20
2250: NOT
2251: IFFALSE 2349
// begin for i = 1 to 8 do
2253: LD_ADDR_VAR 0 2
2257: PUSH
2258: DOUBLE
2259: LD_INT 1
2261: DEC
2262: ST_TO_ADDR
2263: LD_INT 8
2265: PUSH
2266: FOR_TO
2267: IFFALSE 2345
// for j = 1 to 8 do
2269: LD_ADDR_VAR 0 3
2273: PUSH
2274: DOUBLE
2275: LD_INT 1
2277: DEC
2278: ST_TO_ADDR
2279: LD_INT 8
2281: PUSH
2282: FOR_TO
2283: IFFALSE 2341
// if i <> j then
2285: LD_VAR 0 2
2289: PUSH
2290: LD_VAR 0 3
2294: NONEQUAL
2295: IFFALSE 2319
// SetAttitude ( i , j , att_neutral , true ) else
2297: LD_VAR 0 2
2301: PPUSH
2302: LD_VAR 0 3
2306: PPUSH
2307: LD_INT 0
2309: PPUSH
2310: LD_INT 1
2312: PPUSH
2313: CALL_OW 80
2317: GO 2339
// SetAttitude ( i , j , att_friend , true ) ;
2319: LD_VAR 0 2
2323: PPUSH
2324: LD_VAR 0 3
2328: PPUSH
2329: LD_INT 1
2331: PPUSH
2332: LD_INT 1
2334: PPUSH
2335: CALL_OW 80
2339: GO 2282
2341: POP
2342: POP
2343: GO 2266
2345: POP
2346: POP
// end else
2347: GO 2524
// begin if def_shared_vision then
2349: LD_EXP 65
2353: IFFALSE 2418
// begin for i in Teams do
2355: LD_ADDR_VAR 0 2
2359: PUSH
2360: LD_EXP 17
2364: PUSH
2365: FOR_IN
2366: IFFALSE 2416
// for j = 2 to i do
2368: LD_ADDR_VAR 0 3
2372: PUSH
2373: DOUBLE
2374: LD_INT 2
2376: DEC
2377: ST_TO_ADDR
2378: LD_VAR 0 2
2382: PUSH
2383: FOR_TO
2384: IFFALSE 2412
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2386: LD_VAR 0 2
2390: PUSH
2391: LD_VAR 0 3
2395: ARRAY
2396: PPUSH
2397: LD_VAR 0 2
2401: PUSH
2402: LD_INT 1
2404: ARRAY
2405: PPUSH
2406: CALL_OW 343
2410: GO 2383
2412: POP
2413: POP
2414: GO 2365
2416: POP
2417: POP
// end ; for i = 1 to 8 do
2418: LD_ADDR_VAR 0 2
2422: PUSH
2423: DOUBLE
2424: LD_INT 1
2426: DEC
2427: ST_TO_ADDR
2428: LD_INT 8
2430: PUSH
2431: FOR_TO
2432: IFFALSE 2522
// for j = 1 to 8 do
2434: LD_ADDR_VAR 0 3
2438: PUSH
2439: DOUBLE
2440: LD_INT 1
2442: DEC
2443: ST_TO_ADDR
2444: LD_INT 8
2446: PUSH
2447: FOR_TO
2448: IFFALSE 2518
// if Side_Teams [ i ] = Side_Teams [ j ] then
2450: LD_EXP 16
2454: PUSH
2455: LD_VAR 0 2
2459: ARRAY
2460: PUSH
2461: LD_EXP 16
2465: PUSH
2466: LD_VAR 0 3
2470: ARRAY
2471: EQUAL
2472: IFFALSE 2496
// SetAttitude ( i , j , att_friend , true ) else
2474: LD_VAR 0 2
2478: PPUSH
2479: LD_VAR 0 3
2483: PPUSH
2484: LD_INT 1
2486: PPUSH
2487: LD_INT 1
2489: PPUSH
2490: CALL_OW 80
2494: GO 2516
// SetAttitude ( i , j , att_enemy , true ) ;
2496: LD_VAR 0 2
2500: PPUSH
2501: LD_VAR 0 3
2505: PPUSH
2506: LD_INT 2
2508: PPUSH
2509: LD_INT 1
2511: PPUSH
2512: CALL_OW 80
2516: GO 2447
2518: POP
2519: POP
2520: GO 2431
2522: POP
2523: POP
// end ; end ;
2524: LD_VAR 0 1
2528: RET
// function prepare_people ( count , cl , x , y , r ) ; var i , j , un ; begin
2529: LD_INT 0
2531: PPUSH
2532: PPUSH
2533: PPUSH
2534: PPUSH
// result := [ ] ;
2535: LD_ADDR_VAR 0 6
2539: PUSH
2540: EMPTY
2541: ST_TO_ADDR
// for i := 1 to count do
2542: LD_ADDR_VAR 0 7
2546: PUSH
2547: DOUBLE
2548: LD_INT 1
2550: DEC
2551: ST_TO_ADDR
2552: LD_VAR 0 1
2556: PUSH
2557: FOR_TO
2558: IFFALSE 2954
// begin uc_direction := Rand ( 0 , 5 ) ;
2560: LD_ADDR_OWVAR 24
2564: PUSH
2565: LD_INT 0
2567: PPUSH
2568: LD_INT 5
2570: PPUSH
2571: CALL_OW 12
2575: ST_TO_ADDR
// if commander then
2576: LD_LOC 1
2580: IFFALSE 2689
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2582: LD_ADDR_OWVAR 26
2586: PUSH
2587: LD_OWVAR 19
2591: PUSH
2592: LD_OWVAR 20
2596: ARRAY
2597: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2598: LD_INT 1
2600: PPUSH
2601: LD_INT 2
2603: PPUSH
2604: CALL_OW 12
2608: PPUSH
2609: LD_VAR 0 2
2613: PPUSH
2614: LD_EXP 7
2618: PUSH
2619: LD_INT 2
2621: PLUS
2622: PPUSH
2623: CALL_OW 380
// hc_importance := 105 ;
2627: LD_ADDR_OWVAR 32
2631: PUSH
2632: LD_INT 105
2634: ST_TO_ADDR
// commander := false ;
2635: LD_ADDR_LOC 1
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if Multiplayer then
2643: LD_OWVAR 4
2647: IFFALSE 2687
// begin hc_gallery := MULTIAVATARS ;
2649: LD_ADDR_OWVAR 33
2653: PUSH
2654: LD_STRING MULTIAVATARS
2656: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2657: LD_ADDR_OWVAR 34
2661: PUSH
2662: LD_OWVAR 20
2666: PPUSH
2667: CALL_OW 525
2671: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2672: LD_ADDR_OWVAR 27
2676: PUSH
2677: LD_OWVAR 20
2681: PPUSH
2682: CALL_OW 526
2686: ST_TO_ADDR
// end ; end else
2687: GO 2752
// begin hc_name :=  ;
2689: LD_ADDR_OWVAR 26
2693: PUSH
2694: LD_STRING 
2696: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2697: LD_INT 1
2699: PPUSH
2700: LD_INT 2
2702: PPUSH
2703: CALL_OW 12
2707: PPUSH
2708: LD_VAR 0 2
2712: PPUSH
2713: LD_EXP 7
2717: PPUSH
2718: CALL_OW 380
// hc_importance := 0 ;
2722: LD_ADDR_OWVAR 32
2726: PUSH
2727: LD_INT 0
2729: ST_TO_ADDR
// if Multiplayer then
2730: LD_OWVAR 4
2734: IFFALSE 2752
// begin hc_gallery :=  ;
2736: LD_ADDR_OWVAR 33
2740: PUSH
2741: LD_STRING 
2743: ST_TO_ADDR
// hc_face_number := 0 ;
2744: LD_ADDR_OWVAR 34
2748: PUSH
2749: LD_INT 0
2751: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2752: LD_ADDR_VAR 0 9
2756: PUSH
2757: CALL_OW 44
2761: ST_TO_ADDR
// if global_defined then
2762: LD_LOC 3
2766: IFFALSE 2906
// begin if ( cl = class_soldier ) then
2768: LD_VAR 0 2
2772: PUSH
2773: LD_INT 1
2775: EQUAL
2776: IFFALSE 2796
// j := i + soldiers_created else
2778: LD_ADDR_VAR 0 8
2782: PUSH
2783: LD_VAR 0 7
2787: PUSH
2788: LD_LOC 4
2792: PLUS
2793: ST_TO_ADDR
2794: GO 2806
// j := i ;
2796: LD_ADDR_VAR 0 8
2800: PUSH
2801: LD_VAR 0 7
2805: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2806: LD_LOC 2
2810: PUSH
2811: LD_VAR 0 2
2815: ARRAY
2816: PUSH
2817: LD_VAR 0 8
2821: ARRAY
2822: PPUSH
2823: LD_VAR 0 9
2827: PPUSH
2828: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2832: LD_VAR 0 9
2836: PPUSH
2837: LD_INT 2
2839: PPUSH
2840: LD_LOC 2
2844: PUSH
2845: LD_VAR 0 2
2849: ARRAY
2850: PUSH
2851: LD_VAR 0 8
2855: ARRAY
2856: PPUSH
2857: LD_INT 2
2859: PPUSH
2860: CALL_OW 260
2864: PPUSH
2865: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2869: LD_VAR 0 9
2873: PPUSH
2874: LD_INT 1
2876: PPUSH
2877: LD_LOC 2
2881: PUSH
2882: LD_VAR 0 2
2886: ARRAY
2887: PUSH
2888: LD_VAR 0 8
2892: ARRAY
2893: PPUSH
2894: LD_INT 1
2896: PPUSH
2897: CALL_OW 260
2901: PPUSH
2902: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2906: LD_VAR 0 9
2910: PPUSH
2911: LD_VAR 0 3
2915: PPUSH
2916: LD_VAR 0 4
2920: PPUSH
2921: LD_VAR 0 5
2925: PPUSH
2926: LD_INT 0
2928: PPUSH
2929: CALL_OW 50
// result := result ^ [ un ] ;
2933: LD_ADDR_VAR 0 6
2937: PUSH
2938: LD_VAR 0 6
2942: PUSH
2943: LD_VAR 0 9
2947: PUSH
2948: EMPTY
2949: LIST
2950: ADD
2951: ST_TO_ADDR
// end ;
2952: GO 2557
2954: POP
2955: POP
// if not global_defined then
2956: LD_LOC 3
2960: NOT
2961: IFFALSE 3039
// if ( global_units >= cl ) then
2963: LD_LOC 2
2967: PUSH
2968: LD_VAR 0 2
2972: GREATEREQUAL
2973: IFFALSE 3014
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2975: LD_ADDR_LOC 2
2979: PUSH
2980: LD_LOC 2
2984: PPUSH
2985: LD_VAR 0 2
2989: PPUSH
2990: LD_LOC 2
2994: PUSH
2995: LD_VAR 0 2
2999: ARRAY
3000: PUSH
3001: LD_VAR 0 6
3005: ADD
3006: PPUSH
3007: CALL_OW 1
3011: ST_TO_ADDR
3012: GO 3039
// global_units := Replace ( global_units , cl , result ) ;
3014: LD_ADDR_LOC 2
3018: PUSH
3019: LD_LOC 2
3023: PPUSH
3024: LD_VAR 0 2
3028: PPUSH
3029: LD_VAR 0 6
3033: PPUSH
3034: CALL_OW 1
3038: ST_TO_ADDR
// end ;
3039: LD_VAR 0 6
3043: RET
// function prepare_side ( side , pos , nation ) ; var x , y , dir , i , r , sol , br , dep ; begin
3044: LD_INT 0
3046: PPUSH
3047: PPUSH
3048: PPUSH
3049: PPUSH
3050: PPUSH
3051: PPUSH
3052: PPUSH
3053: PPUSH
3054: PPUSH
// uc_nation := nation ;
3055: LD_ADDR_OWVAR 21
3059: PUSH
3060: LD_VAR 0 3
3064: ST_TO_ADDR
// uc_side := side ;
3065: LD_ADDR_OWVAR 20
3069: PUSH
3070: LD_VAR 0 1
3074: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3075: LD_ADDR_VAR 0 5
3079: PUSH
3080: LD_EXP 22
3084: PUSH
3085: LD_VAR 0 2
3089: ARRAY
3090: PUSH
3091: LD_INT 1
3093: ARRAY
3094: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3095: LD_ADDR_VAR 0 6
3099: PUSH
3100: LD_EXP 22
3104: PUSH
3105: LD_VAR 0 2
3109: ARRAY
3110: PUSH
3111: LD_INT 2
3113: ARRAY
3114: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3115: LD_ADDR_VAR 0 7
3119: PUSH
3120: LD_EXP 22
3124: PUSH
3125: LD_VAR 0 2
3129: ARRAY
3130: PUSH
3131: LD_INT 3
3133: ARRAY
3134: ST_TO_ADDR
// if is_depot then
3135: LD_EXP 4
3139: IFFALSE 3272
// begin bc_type = b_depot ;
3141: LD_ADDR_OWVAR 42
3145: PUSH
3146: LD_INT 0
3148: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3149: LD_ADDR_VAR 0 12
3153: PUSH
3154: LD_VAR 0 5
3158: PPUSH
3159: LD_VAR 0 6
3163: PPUSH
3164: LD_VAR 0 7
3168: PPUSH
3169: CALL_OW 47
3173: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3174: LD_VAR 0 12
3178: PPUSH
3179: LD_STRING @
3181: PUSH
3182: LD_VAR 0 1
3186: STR
3187: PPUSH
3188: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3192: LD_VAR 0 12
3196: PPUSH
3197: CALL_OW 274
3201: PPUSH
3202: LD_INT 1
3204: PPUSH
3205: LD_EXP 9
3209: PUSH
3210: LD_INT 1
3212: ARRAY
3213: PPUSH
3214: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3218: LD_VAR 0 12
3222: PPUSH
3223: CALL_OW 274
3227: PPUSH
3228: LD_INT 2
3230: PPUSH
3231: LD_EXP 9
3235: PUSH
3236: LD_INT 2
3238: ARRAY
3239: PPUSH
3240: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3244: LD_VAR 0 12
3248: PPUSH
3249: CALL_OW 274
3253: PPUSH
3254: LD_INT 3
3256: PPUSH
3257: LD_EXP 9
3261: PUSH
3262: LD_INT 3
3264: ARRAY
3265: PPUSH
3266: CALL_OW 277
// end else
3270: GO 3416
// begin for i := 1 to 3 do
3272: LD_ADDR_VAR 0 8
3276: PUSH
3277: DOUBLE
3278: LD_INT 1
3280: DEC
3281: ST_TO_ADDR
3282: LD_INT 3
3284: PUSH
3285: FOR_TO
3286: IFFALSE 3414
// begin r := starting_resources [ i ] ;
3288: LD_ADDR_VAR 0 9
3292: PUSH
3293: LD_EXP 9
3297: PUSH
3298: LD_VAR 0 8
3302: ARRAY
3303: ST_TO_ADDR
// while r >= 10 do
3304: LD_VAR 0 9
3308: PUSH
3309: LD_INT 10
3311: GREATEREQUAL
3312: IFFALSE 3412
// if r > 50 then
3314: LD_VAR 0 9
3318: PUSH
3319: LD_INT 50
3321: GREATER
3322: IFFALSE 3368
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3324: LD_VAR 0 8
3328: PPUSH
3329: LD_INT 5
3331: PPUSH
3332: LD_VAR 0 5
3336: PPUSH
3337: LD_VAR 0 6
3341: PPUSH
3342: LD_INT 4
3344: PPUSH
3345: LD_INT 0
3347: PPUSH
3348: CALL_OW 60
// r := r - 50 ;
3352: LD_ADDR_VAR 0 9
3356: PUSH
3357: LD_VAR 0 9
3361: PUSH
3362: LD_INT 50
3364: MINUS
3365: ST_TO_ADDR
// end else
3366: GO 3410
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3368: LD_VAR 0 8
3372: PPUSH
3373: LD_VAR 0 9
3377: PUSH
3378: LD_INT 10
3380: DIV
3381: PPUSH
3382: LD_VAR 0 5
3386: PPUSH
3387: LD_VAR 0 6
3391: PPUSH
3392: LD_INT 4
3394: PPUSH
3395: LD_INT 0
3397: PPUSH
3398: CALL_OW 60
// r := 0 ;
3402: LD_ADDR_VAR 0 9
3406: PUSH
3407: LD_INT 0
3409: ST_TO_ADDR
// end ;
3410: GO 3304
// end ;
3412: GO 3285
3414: POP
3415: POP
// end ; if def_base_size > 0 then
3416: LD_EXP 1
3420: PUSH
3421: LD_INT 0
3423: GREATER
3424: IFFALSE 3499
// begin bc_kind1 := b_lab_basic ;
3426: LD_ADDR_OWVAR 44
3430: PUSH
3431: LD_INT 9
3433: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
3434: LD_ADDR_OWVAR 45
3438: PUSH
3439: LD_INT 9
3441: ST_TO_ADDR
// bc_type := b_lab ;
3442: LD_ADDR_OWVAR 42
3446: PUSH
3447: LD_INT 6
3449: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( labs_def [ pos ] [ 1 ] , labs_def [ pos ] [ 2 ] , labs_def [ pos ] [ 3 ] ) ;
3450: LD_EXP 24
3454: PUSH
3455: LD_VAR 0 2
3459: ARRAY
3460: PUSH
3461: LD_INT 1
3463: ARRAY
3464: PPUSH
3465: LD_EXP 24
3469: PUSH
3470: LD_VAR 0 2
3474: ARRAY
3475: PUSH
3476: LD_INT 2
3478: ARRAY
3479: PPUSH
3480: LD_EXP 24
3484: PUSH
3485: LD_VAR 0 2
3489: ARRAY
3490: PUSH
3491: LD_INT 3
3493: ARRAY
3494: PPUSH
3495: CALL_OW 47
// end ; if def_base_size > 1 then
3499: LD_EXP 1
3503: PUSH
3504: LD_INT 1
3506: GREATER
3507: IFFALSE 3566
// begin bc_type := b_workshop ;
3509: LD_ADDR_OWVAR 42
3513: PUSH
3514: LD_INT 2
3516: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( factory_def [ pos ] [ 1 ] , factory_def [ pos ] [ 2 ] , factory_def [ pos ] [ 3 ] ) ;
3517: LD_EXP 25
3521: PUSH
3522: LD_VAR 0 2
3526: ARRAY
3527: PUSH
3528: LD_INT 1
3530: ARRAY
3531: PPUSH
3532: LD_EXP 25
3536: PUSH
3537: LD_VAR 0 2
3541: ARRAY
3542: PUSH
3543: LD_INT 2
3545: ARRAY
3546: PPUSH
3547: LD_EXP 25
3551: PUSH
3552: LD_VAR 0 2
3556: ARRAY
3557: PUSH
3558: LD_INT 3
3560: ARRAY
3561: PPUSH
3562: CALL_OW 47
// end ; for r in starting_crates do
3566: LD_ADDR_VAR 0 9
3570: PUSH
3571: LD_EXP 8
3575: PUSH
3576: FOR_IN
3577: IFFALSE 3609
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3579: LD_INT 1
3581: PPUSH
3582: LD_INT 5
3584: PPUSH
3585: LD_VAR 0 5
3589: PPUSH
3590: LD_VAR 0 6
3594: PPUSH
3595: LD_VAR 0 9
3599: PPUSH
3600: LD_INT 0
3602: PPUSH
3603: CALL_OW 60
3607: GO 3576
3609: POP
3610: POP
// if def_morale_flags then
3611: LD_EXP 66
3615: IFFALSE 3754
// begin x := start_def [ pos ] [ 1 ] ;
3617: LD_ADDR_VAR 0 5
3621: PUSH
3622: LD_EXP 26
3626: PUSH
3627: LD_VAR 0 2
3631: ARRAY
3632: PUSH
3633: LD_INT 1
3635: ARRAY
3636: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3637: LD_ADDR_VAR 0 6
3641: PUSH
3642: LD_EXP 26
3646: PUSH
3647: LD_VAR 0 2
3651: ARRAY
3652: PUSH
3653: LD_INT 2
3655: ARRAY
3656: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3657: LD_VAR 0 5
3661: PPUSH
3662: LD_VAR 0 6
3666: PPUSH
3667: LD_INT 12
3669: PPUSH
3670: LD_INT 2
3672: PPUSH
3673: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3677: LD_ADDR_EXP 29
3681: PUSH
3682: LD_EXP 29
3686: PUSH
3687: LD_VAR 0 1
3691: PPUSH
3692: LD_VAR 0 5
3696: PPUSH
3697: LD_VAR 0 6
3701: PPUSH
3702: LD_INT 1
3704: PUSH
3705: LD_INT 100
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: PUSH
3712: LD_INT 2
3714: PUSH
3715: LD_INT 50
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PUSH
3722: LD_INT 3
3724: PUSH
3725: LD_INT 20
3727: PUSH
3728: EMPTY
3729: LIST
3730: LIST
3731: PUSH
3732: LD_INT 20
3734: PUSH
3735: LD_INT 100
3737: PUSH
3738: EMPTY
3739: LIST
3740: LIST
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: PPUSH
3748: CALL_OW 418
3752: ADD
3753: ST_TO_ADDR
// end ; commander := true ;
3754: LD_ADDR_LOC 1
3758: PUSH
3759: LD_INT 1
3761: ST_TO_ADDR
// soldiers_created := 0 ;
3762: LD_ADDR_LOC 4
3766: PUSH
3767: LD_INT 0
3769: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3770: LD_ADDR_VAR 0 8
3774: PUSH
3775: DOUBLE
3776: LD_INT 1
3778: DEC
3779: ST_TO_ADDR
3780: LD_EXP 5
3784: PUSH
3785: FOR_TO
3786: IFFALSE 4028
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3788: LD_ADDR_VAR 0 5
3792: PUSH
3793: LD_EXP 23
3797: PUSH
3798: LD_VAR 0 2
3802: ARRAY
3803: PUSH
3804: LD_VAR 0 8
3808: ARRAY
3809: PUSH
3810: LD_INT 1
3812: ARRAY
3813: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3814: LD_ADDR_VAR 0 6
3818: PUSH
3819: LD_EXP 23
3823: PUSH
3824: LD_VAR 0 2
3828: ARRAY
3829: PUSH
3830: LD_VAR 0 8
3834: ARRAY
3835: PUSH
3836: LD_INT 2
3838: ARRAY
3839: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3840: LD_ADDR_VAR 0 7
3844: PUSH
3845: LD_EXP 23
3849: PUSH
3850: LD_VAR 0 2
3854: ARRAY
3855: PUSH
3856: LD_VAR 0 8
3860: ARRAY
3861: PUSH
3862: LD_INT 3
3864: ARRAY
3865: ST_TO_ADDR
// if i < 4 then
3866: LD_VAR 0 8
3870: PUSH
3871: LD_INT 4
3873: LESS
3874: IFFALSE 3886
// bc_type := b_breastwork else
3876: LD_ADDR_OWVAR 42
3880: PUSH
3881: LD_INT 31
3883: ST_TO_ADDR
3884: GO 3894
// bc_type := b_armoury ;
3886: LD_ADDR_OWVAR 42
3890: PUSH
3891: LD_INT 4
3893: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3894: LD_ADDR_VAR 0 11
3898: PUSH
3899: LD_VAR 0 5
3903: PPUSH
3904: LD_VAR 0 6
3908: PPUSH
3909: LD_VAR 0 7
3913: PPUSH
3914: CALL_OW 47
3918: ST_TO_ADDR
// x := ShiftX ( x , dir , 2 ) ;
3919: LD_ADDR_VAR 0 5
3923: PUSH
3924: LD_VAR 0 5
3928: PPUSH
3929: LD_VAR 0 7
3933: PPUSH
3934: LD_INT 2
3936: PPUSH
3937: CALL_OW 272
3941: ST_TO_ADDR
// y := ShiftY ( y , dir , 2 ) ;
3942: LD_ADDR_VAR 0 6
3946: PUSH
3947: LD_VAR 0 6
3951: PPUSH
3952: LD_VAR 0 7
3956: PPUSH
3957: LD_INT 2
3959: PPUSH
3960: CALL_OW 273
3964: ST_TO_ADDR
// sol := prepare_people ( 1 , class_soldier , x , y , 0 ) [ 1 ] ;
3965: LD_ADDR_VAR 0 10
3969: PUSH
3970: LD_INT 1
3972: PPUSH
3973: LD_INT 1
3975: PPUSH
3976: LD_VAR 0 5
3980: PPUSH
3981: LD_VAR 0 6
3985: PPUSH
3986: LD_INT 0
3988: PPUSH
3989: CALL 2529 0 5
3993: PUSH
3994: LD_INT 1
3996: ARRAY
3997: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
3998: LD_ADDR_LOC 4
4002: PUSH
4003: LD_LOC 4
4007: PUSH
4008: LD_INT 1
4010: PLUS
4011: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
4012: LD_VAR 0 10
4016: PPUSH
4017: LD_VAR 0 11
4021: PPUSH
4022: CALL_OW 120
// end ;
4026: GO 3785
4028: POP
4029: POP
// x := start_def [ pos ] [ 1 ] ;
4030: LD_ADDR_VAR 0 5
4034: PUSH
4035: LD_EXP 26
4039: PUSH
4040: LD_VAR 0 2
4044: ARRAY
4045: PUSH
4046: LD_INT 1
4048: ARRAY
4049: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4050: LD_ADDR_VAR 0 6
4054: PUSH
4055: LD_EXP 26
4059: PUSH
4060: LD_VAR 0 2
4064: ARRAY
4065: PUSH
4066: LD_INT 2
4068: ARRAY
4069: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 ) ;
4070: LD_LOC 8
4074: PUSH
4075: LD_EXP 5
4079: MINUS
4080: PPUSH
4081: LD_INT 1
4083: PPUSH
4084: LD_VAR 0 5
4088: PPUSH
4089: LD_VAR 0 6
4093: PPUSH
4094: LD_INT 5
4096: PPUSH
4097: CALL 2529 0 5
// prepare_people ( neng , class_engineer , x , y , 5 ) ;
4101: LD_LOC 5
4105: PPUSH
4106: LD_INT 2
4108: PPUSH
4109: LD_VAR 0 5
4113: PPUSH
4114: LD_VAR 0 6
4118: PPUSH
4119: LD_INT 5
4121: PPUSH
4122: CALL 2529 0 5
// prepare_people ( nmech , class_mechanic , x , y , 5 ) ;
4126: LD_LOC 7
4130: PPUSH
4131: LD_INT 3
4133: PPUSH
4134: LD_VAR 0 5
4138: PPUSH
4139: LD_VAR 0 6
4143: PPUSH
4144: LD_INT 5
4146: PPUSH
4147: CALL 2529 0 5
// prepare_people ( nsci , class_scientistic , x , y , 5 ) ;
4151: LD_LOC 6
4155: PPUSH
4156: LD_INT 4
4158: PPUSH
4159: LD_VAR 0 5
4163: PPUSH
4164: LD_VAR 0 6
4168: PPUSH
4169: LD_INT 5
4171: PPUSH
4172: CALL 2529 0 5
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4176: LD_EXP 67
4180: PUSH
4181: LD_INT 20
4183: PPUSH
4184: LD_VAR 0 1
4188: PPUSH
4189: CALL_OW 321
4193: PUSH
4194: LD_INT 1
4196: EQUAL
4197: AND
4198: IFFALSE 4215
// SetTech ( tech_SibDet , side , state_researched ) ;
4200: LD_INT 20
4202: PPUSH
4203: LD_VAR 0 1
4207: PPUSH
4208: LD_INT 2
4210: PPUSH
4211: CALL_OW 322
// if def_siberite_bomb = 1 then
4215: LD_EXP 70
4219: PUSH
4220: LD_INT 1
4222: EQUAL
4223: IFFALSE 4257
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4225: LD_INT 25
4227: PPUSH
4228: LD_VAR 0 1
4232: PPUSH
4233: LD_INT 1
4235: PPUSH
4236: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4240: LD_INT 73
4242: PPUSH
4243: LD_VAR 0 1
4247: PPUSH
4248: LD_INT 1
4250: PPUSH
4251: CALL_OW 322
// end else
4255: GO 4287
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4257: LD_INT 25
4259: PPUSH
4260: LD_VAR 0 1
4264: PPUSH
4265: LD_INT 0
4267: PPUSH
4268: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4272: LD_INT 73
4274: PPUSH
4275: LD_VAR 0 1
4279: PPUSH
4280: LD_INT 0
4282: PPUSH
4283: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4287: LD_INT 24
4289: PPUSH
4290: LD_VAR 0 1
4294: PPUSH
4295: LD_INT 0
4297: PPUSH
4298: CALL_OW 322
// global_defined := true ;
4302: LD_ADDR_LOC 3
4306: PUSH
4307: LD_INT 1
4309: ST_TO_ADDR
// end ;
4310: LD_VAR 0 4
4314: RET
// every 0 0$1 do
4315: GO 4317
4317: DISABLE
// if ( def_siberite_bomb > 1 ) then
4318: LD_EXP 70
4322: PUSH
4323: LD_INT 1
4325: GREATER
4326: IFFALSE 4341
// begin wait ( siberite_bomb_Delay ) ;
4328: LD_EXP 15
4332: PPUSH
4333: CALL_OW 67
// EnableSibFiss ;
4337: CALL 4342 0 0
// end ;
4341: END
// function EnableSibFiss ; var i ; begin
4342: LD_INT 0
4344: PPUSH
4345: PPUSH
// for i := 1 to 8 do
4346: LD_ADDR_VAR 0 2
4350: PUSH
4351: DOUBLE
4352: LD_INT 1
4354: DEC
4355: ST_TO_ADDR
4356: LD_INT 8
4358: PUSH
4359: FOR_TO
4360: IFFALSE 4406
// if Side_Positions [ i ] then
4362: LD_EXP 18
4366: PUSH
4367: LD_VAR 0 2
4371: ARRAY
4372: IFFALSE 4404
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4374: LD_INT 25
4376: PPUSH
4377: LD_VAR 0 2
4381: PPUSH
4382: LD_INT 1
4384: PPUSH
4385: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4389: LD_INT 73
4391: PPUSH
4392: LD_VAR 0 2
4396: PPUSH
4397: LD_INT 1
4399: PPUSH
4400: CALL_OW 322
// end ;
4404: GO 4359
4406: POP
4407: POP
// end ;
4408: LD_VAR 0 1
4412: RET
// function prepare_sides ; var i , orig , pos ; begin
4413: LD_INT 0
4415: PPUSH
4416: PPUSH
4417: PPUSH
4418: PPUSH
// global_units := [ ] ;
4419: LD_ADDR_LOC 2
4423: PUSH
4424: EMPTY
4425: ST_TO_ADDR
// global_defined := false ;
4426: LD_ADDR_LOC 3
4430: PUSH
4431: LD_INT 0
4433: ST_TO_ADDR
// CountClassMembers ;
4434: CALL 4953 0 0
// for i := 1 to 8 do
4438: LD_ADDR_VAR 0 2
4442: PUSH
4443: DOUBLE
4444: LD_INT 1
4446: DEC
4447: ST_TO_ADDR
4448: LD_INT 8
4450: PUSH
4451: FOR_TO
4452: IFFALSE 4652
// if Side_Positions [ i ] then
4454: LD_EXP 18
4458: PUSH
4459: LD_VAR 0 2
4463: ARRAY
4464: IFFALSE 4650
// begin pos := Side_Positions [ i ] ;
4466: LD_ADDR_VAR 0 4
4470: PUSH
4471: LD_EXP 18
4475: PUSH
4476: LD_VAR 0 2
4480: ARRAY
4481: ST_TO_ADDR
// if Game_Type in [ 2 , 12 ] then
4482: LD_EXP 56
4486: PUSH
4487: LD_INT 2
4489: PUSH
4490: LD_INT 12
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: IN
4497: IFFALSE 4625
// begin if Game_Type = 12 then
4499: LD_EXP 56
4503: PUSH
4504: LD_INT 12
4506: EQUAL
4507: IFFALSE 4569
// begin prepare_side ( i , pos , Position_Nations [ pos ] ) ;
4509: LD_VAR 0 2
4513: PPUSH
4514: LD_VAR 0 4
4518: PPUSH
4519: LD_EXP 21
4523: PUSH
4524: LD_VAR 0 4
4528: ARRAY
4529: PPUSH
4530: CALL 3044 0 3
// prepare_side ( i , pos + 1 , Position_Nations [ pos + 1 ] ) end else
4534: LD_VAR 0 2
4538: PPUSH
4539: LD_VAR 0 4
4543: PUSH
4544: LD_INT 1
4546: PLUS
4547: PPUSH
4548: LD_EXP 21
4552: PUSH
4553: LD_VAR 0 4
4557: PUSH
4558: LD_INT 1
4560: PLUS
4561: ARRAY
4562: PPUSH
4563: CALL 3044 0 3
4567: GO 4623
// begin prepare_side ( i , pos , Side_Nations [ i ] ) ;
4569: LD_VAR 0 2
4573: PPUSH
4574: LD_VAR 0 4
4578: PPUSH
4579: LD_EXP 19
4583: PUSH
4584: LD_VAR 0 2
4588: ARRAY
4589: PPUSH
4590: CALL 3044 0 3
// prepare_side ( i , pos + 1 , Side_Nations [ i ] ) ;
4594: LD_VAR 0 2
4598: PPUSH
4599: LD_VAR 0 4
4603: PUSH
4604: LD_INT 1
4606: PLUS
4607: PPUSH
4608: LD_EXP 19
4612: PUSH
4613: LD_VAR 0 2
4617: ARRAY
4618: PPUSH
4619: CALL 3044 0 3
// end ; end else
4623: GO 4650
// prepare_side ( i , pos , Side_Nations [ i ] ) ;
4625: LD_VAR 0 2
4629: PPUSH
4630: LD_VAR 0 4
4634: PPUSH
4635: LD_EXP 19
4639: PUSH
4640: LD_VAR 0 2
4644: ARRAY
4645: PPUSH
4646: CALL 3044 0 3
// end ;
4650: GO 4451
4652: POP
4653: POP
// end ;
4654: LD_VAR 0 1
4658: RET
// function Modify_Nations ; var list , west , east , i ; begin
4659: LD_INT 0
4661: PPUSH
4662: PPUSH
4663: PPUSH
4664: PPUSH
4665: PPUSH
// list := [ ] ;
4666: LD_ADDR_VAR 0 2
4670: PUSH
4671: EMPTY
4672: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
4673: LD_ADDR_VAR 0 5
4677: PUSH
4678: DOUBLE
4679: LD_INT 1
4681: DEC
4682: ST_TO_ADDR
4683: LD_EXP 18
4687: PUSH
4688: LD_INT 0
4690: PLUS
4691: PUSH
4692: FOR_TO
4693: IFFALSE 4911
// if side_positions [ i ] = 1 then
4695: LD_EXP 18
4699: PUSH
4700: LD_VAR 0 5
4704: ARRAY
4705: PUSH
4706: LD_INT 1
4708: EQUAL
4709: IFFALSE 4803
// case side_nations [ i ] of 1 :
4711: LD_EXP 19
4715: PUSH
4716: LD_VAR 0 5
4720: ARRAY
4721: PUSH
4722: LD_INT 1
4724: DOUBLE
4725: EQUAL
4726: IFTRUE 4730
4728: GO 4748
4730: POP
// west := [ 1 , 2 ] ; 2 :
4731: LD_ADDR_VAR 0 3
4735: PUSH
4736: LD_INT 1
4738: PUSH
4739: LD_INT 2
4741: PUSH
4742: EMPTY
4743: LIST
4744: LIST
4745: ST_TO_ADDR
4746: GO 4801
4748: LD_INT 2
4750: DOUBLE
4751: EQUAL
4752: IFTRUE 4756
4754: GO 4774
4756: POP
// west := [ 2 , 3 ] ; 3 :
4757: LD_ADDR_VAR 0 3
4761: PUSH
4762: LD_INT 2
4764: PUSH
4765: LD_INT 3
4767: PUSH
4768: EMPTY
4769: LIST
4770: LIST
4771: ST_TO_ADDR
4772: GO 4801
4774: LD_INT 3
4776: DOUBLE
4777: EQUAL
4778: IFTRUE 4782
4780: GO 4800
4782: POP
// west := [ 3 , 1 ] ; end else
4783: LD_ADDR_VAR 0 3
4787: PUSH
4788: LD_INT 3
4790: PUSH
4791: LD_INT 1
4793: PUSH
4794: EMPTY
4795: LIST
4796: LIST
4797: ST_TO_ADDR
4798: GO 4801
4800: POP
4801: GO 4909
// if side_positions [ i ] = 3 then
4803: LD_EXP 18
4807: PUSH
4808: LD_VAR 0 5
4812: ARRAY
4813: PUSH
4814: LD_INT 3
4816: EQUAL
4817: IFFALSE 4909
// case side_nations [ i ] of 1 :
4819: LD_EXP 19
4823: PUSH
4824: LD_VAR 0 5
4828: ARRAY
4829: PUSH
4830: LD_INT 1
4832: DOUBLE
4833: EQUAL
4834: IFTRUE 4838
4836: GO 4856
4838: POP
// east := [ 1 , 2 ] ; 2 :
4839: LD_ADDR_VAR 0 4
4843: PUSH
4844: LD_INT 1
4846: PUSH
4847: LD_INT 2
4849: PUSH
4850: EMPTY
4851: LIST
4852: LIST
4853: ST_TO_ADDR
4854: GO 4909
4856: LD_INT 2
4858: DOUBLE
4859: EQUAL
4860: IFTRUE 4864
4862: GO 4882
4864: POP
// east := [ 2 , 3 ] ; 3 :
4865: LD_ADDR_VAR 0 4
4869: PUSH
4870: LD_INT 2
4872: PUSH
4873: LD_INT 3
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: ST_TO_ADDR
4880: GO 4909
4882: LD_INT 3
4884: DOUBLE
4885: EQUAL
4886: IFTRUE 4890
4888: GO 4908
4890: POP
// east := [ 3 , 1 ] ; end ;
4891: LD_ADDR_VAR 0 4
4895: PUSH
4896: LD_INT 3
4898: PUSH
4899: LD_INT 1
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: ST_TO_ADDR
4906: GO 4909
4908: POP
4909: GO 4692
4911: POP
4912: POP
// Position_Nations := west ^ east ^ [ 0 , 0 , 0 , 0 ] ;
4913: LD_ADDR_EXP 21
4917: PUSH
4918: LD_VAR 0 3
4922: PUSH
4923: LD_VAR 0 4
4927: ADD
4928: PUSH
4929: LD_INT 0
4931: PUSH
4932: LD_INT 0
4934: PUSH
4935: LD_INT 0
4937: PUSH
4938: LD_INT 0
4940: PUSH
4941: EMPTY
4942: LIST
4943: LIST
4944: LIST
4945: LIST
4946: ADD
4947: ST_TO_ADDR
// end ;
4948: LD_VAR 0 1
4952: RET
// function CountClassMembers ; var Mode ; begin
4953: LD_INT 0
4955: PPUSH
4956: PPUSH
// if No_Mechs then
4957: LD_EXP 72
4961: IFFALSE 4973
// Mode := 2 else
4963: LD_ADDR_VAR 0 2
4967: PUSH
4968: LD_INT 2
4970: ST_TO_ADDR
4971: GO 4981
// Mode := 1 ;
4973: LD_ADDR_VAR 0 2
4977: PUSH
4978: LD_INT 1
4980: ST_TO_ADDR
// neng := number_of_people ;
4981: LD_ADDR_LOC 5
4985: PUSH
4986: LD_EXP 6
4990: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4991: LD_ADDR_LOC 8
4995: PUSH
4996: LD_LOC 5
5000: PUSH
5001: LD_INT 4
5003: PUSH
5004: LD_INT 3
5006: PUSH
5007: EMPTY
5008: LIST
5009: LIST
5010: PUSH
5011: LD_VAR 0 2
5015: ARRAY
5016: DIV
5017: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
5018: LD_LOC 8
5022: PUSH
5023: LD_EXP 5
5027: LESS
5028: IFFALSE 5040
// nsol := number_of_breastworks ;
5030: LD_ADDR_LOC 8
5034: PUSH
5035: LD_EXP 5
5039: ST_TO_ADDR
// neng := neng - nsol ;
5040: LD_ADDR_LOC 5
5044: PUSH
5045: LD_LOC 5
5049: PUSH
5050: LD_LOC 8
5054: MINUS
5055: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
5056: LD_ADDR_LOC 6
5060: PUSH
5061: LD_LOC 5
5065: PUSH
5066: LD_INT 3
5068: PUSH
5069: LD_INT 2
5071: PUSH
5072: EMPTY
5073: LIST
5074: LIST
5075: PUSH
5076: LD_VAR 0 2
5080: ARRAY
5081: DIV
5082: ST_TO_ADDR
// if ( nsci < 1 ) then
5083: LD_LOC 6
5087: PUSH
5088: LD_INT 1
5090: LESS
5091: IFFALSE 5101
// nsci := 1 ;
5093: LD_ADDR_LOC 6
5097: PUSH
5098: LD_INT 1
5100: ST_TO_ADDR
// neng := neng - nsci ;
5101: LD_ADDR_LOC 5
5105: PUSH
5106: LD_LOC 5
5110: PUSH
5111: LD_LOC 6
5115: MINUS
5116: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5117: LD_ADDR_LOC 7
5121: PUSH
5122: LD_LOC 5
5126: PUSH
5127: LD_INT 2
5129: DIV
5130: PUSH
5131: LD_INT 0
5133: PUSH
5134: EMPTY
5135: LIST
5136: LIST
5137: PUSH
5138: LD_VAR 0 2
5142: ARRAY
5143: ST_TO_ADDR
// neng := neng - nmech ;
5144: LD_ADDR_LOC 5
5148: PUSH
5149: LD_LOC 5
5153: PUSH
5154: LD_LOC 7
5158: MINUS
5159: ST_TO_ADDR
// if ( neng < 1 ) then
5160: LD_LOC 5
5164: PUSH
5165: LD_INT 1
5167: LESS
5168: IFFALSE 5178
// neng := 1 ;
5170: LD_ADDR_LOC 5
5174: PUSH
5175: LD_INT 1
5177: ST_TO_ADDR
// end ;
5178: LD_VAR 0 1
5182: RET
// function Init_Win_Condition ; begin
5183: LD_INT 0
5185: PPUSH
// disable ( 98 ) ;
5186: LD_INT 98
5188: DISABLE_MARKED
// disable ( 99 ) ;
5189: LD_INT 99
5191: DISABLE_MARKED
// if Team_Game then
5192: LD_EXP 20
5196: IFFALSE 5203
// enable ( 98 ) else
5198: LD_INT 98
5200: ENABLE_MARKED
5201: GO 5206
// enable ( 99 ) ;
5203: LD_INT 99
5205: ENABLE_MARKED
// end ;
5206: LD_VAR 0 1
5210: RET
// starting begin DE_Triggers ;
5211: CALL 8664 0 0
// mp_selectmsg := true ;
5215: LD_ADDR_OWVAR 13
5219: PUSH
5220: LD_INT 1
5222: ST_TO_ADDR
// if ( game_type <> 1 ) and ( game_type <> 3 ) then
5223: LD_EXP 56
5227: PUSH
5228: LD_INT 1
5230: NONEQUAL
5231: PUSH
5232: LD_EXP 56
5236: PUSH
5237: LD_INT 3
5239: NONEQUAL
5240: AND
5241: IFFALSE 5247
// read_multiplayer_and_game_parameters ;
5243: CALL 976 0 0
// case Game_Type of 1 , 3 :
5247: LD_EXP 56
5251: PUSH
5252: LD_INT 1
5254: DOUBLE
5255: EQUAL
5256: IFTRUE 5266
5258: LD_INT 3
5260: DOUBLE
5261: EQUAL
5262: IFTRUE 5266
5264: GO 5278
5266: POP
// begin enable ( 19 ) ;
5267: LD_INT 19
5269: ENABLE_MARKED
// starting_ctf ;
5270: CALL 9303 0 0
// exit ;
5274: GO 5439
// end ; 12 :
5276: GO 5294
5278: LD_INT 12
5280: DOUBLE
5281: EQUAL
5282: IFTRUE 5286
5284: GO 5293
5286: POP
// Modify_Nations ; end ;
5287: CALL 4659 0 0
5291: GO 5294
5293: POP
// enable ( 55 ) ;
5294: LD_INT 55
5296: ENABLE_MARKED
// init_map ;
5297: CALL 276 0 0
// set_shared_visions_and_alliances ;
5301: CALL 2220 0 0
// prepare_sides ;
5305: CALL 4413 0 0
// InitLimits ;
5309: CALL 18057 0 0
// ShowTimer ;
5313: CALL 18994 0 0
// init_shipments ;
5317: CALL 5440 0 0
// init_respawn ;
5321: CALL 5944 0 0
// InitApeman ;
5325: CALL 7479 0 0
// music_nat := Side_Nations [ your_side ] ;
5329: LD_ADDR_OWVAR 71
5333: PUSH
5334: LD_EXP 19
5338: PUSH
5339: LD_OWVAR 2
5343: ARRAY
5344: ST_TO_ADDR
// if IAmSpec then
5345: CALL_OW 531
5349: IFFALSE 5385
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
5351: LD_INT 0
5353: PPUSH
5354: LD_INT 0
5356: PPUSH
5357: LD_OWVAR 2
5361: PPUSH
5362: LD_INT 32767
5364: NEG
5365: PPUSH
5366: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
5370: LD_INT 104
5372: PPUSH
5373: LD_INT 69
5375: PPUSH
5376: CALL_OW 86
// enable ( 400 ) ;
5380: LD_INT 400
5382: ENABLE_MARKED
// end else
5383: GO 5439
// begin ResetFog ;
5385: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5389: LD_EXP 26
5393: PUSH
5394: LD_EXP 18
5398: PUSH
5399: LD_OWVAR 2
5403: ARRAY
5404: ARRAY
5405: PUSH
5406: LD_INT 1
5408: ARRAY
5409: PPUSH
5410: LD_EXP 26
5414: PUSH
5415: LD_EXP 18
5419: PUSH
5420: LD_OWVAR 2
5424: ARRAY
5425: ARRAY
5426: PUSH
5427: LD_INT 2
5429: ARRAY
5430: PPUSH
5431: CALL_OW 86
// Init_Win_Condition ;
5435: CALL 5183 0 0
// end ; end ; end_of_file
5439: END
// var shipment , tictac ; export function init_shipments ; begin
5440: LD_INT 0
5442: PPUSH
// shipment := Rand ( 0 , 1 ) ;
5443: LD_ADDR_LOC 9
5447: PUSH
5448: LD_INT 0
5450: PPUSH
5451: LD_INT 1
5453: PPUSH
5454: CALL_OW 12
5458: ST_TO_ADDR
// tictac := 0 ;
5459: LD_ADDR_LOC 10
5463: PUSH
5464: LD_INT 0
5466: ST_TO_ADDR
// end ;
5467: LD_VAR 0 1
5471: RET
// every 0 0$5 + 0 0$1.1 marked 55 do var d ;
5472: GO 5474
5474: DISABLE
5475: LD_INT 0
5477: PPUSH
// begin case tick of 1 .. 1 1$0 :
5478: LD_OWVAR 1
5482: PUSH
5483: LD_INT 1
5485: DOUBLE
5486: GREATEREQUAL
5487: IFFALSE 5495
5489: LD_INT 2100
5491: DOUBLE
5492: LESSEQUAL
5493: IFTRUE 5497
5495: GO 5508
5497: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5498: LD_ADDR_VAR 0 1
5502: PUSH
5503: LD_INT 150
5505: ST_TO_ADDR
5506: GO 5691
5508: LD_INT 2100
5510: PUSH
5511: LD_INT 1
5513: PLUS
5514: DOUBLE
5515: GREATEREQUAL
5516: IFFALSE 5524
5518: LD_INT 10500
5520: DOUBLE
5521: LESSEQUAL
5522: IFTRUE 5526
5524: GO 5537
5526: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5527: LD_ADDR_VAR 0 1
5531: PUSH
5532: LD_INT 100
5534: ST_TO_ADDR
5535: GO 5691
5537: LD_INT 10500
5539: PUSH
5540: LD_INT 1
5542: PLUS
5543: DOUBLE
5544: GREATEREQUAL
5545: IFFALSE 5553
5547: LD_INT 21000
5549: DOUBLE
5550: LESSEQUAL
5551: IFTRUE 5555
5553: GO 5566
5555: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5556: LD_ADDR_VAR 0 1
5560: PUSH
5561: LD_INT 90
5563: ST_TO_ADDR
5564: GO 5691
5566: LD_INT 21000
5568: PUSH
5569: LD_INT 1
5571: PLUS
5572: DOUBLE
5573: GREATEREQUAL
5574: IFFALSE 5582
5576: LD_INT 42000
5578: DOUBLE
5579: LESSEQUAL
5580: IFTRUE 5584
5582: GO 5595
5584: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5585: LD_ADDR_VAR 0 1
5589: PUSH
5590: LD_INT 70
5592: ST_TO_ADDR
5593: GO 5691
5595: LD_INT 42000
5597: PUSH
5598: LD_INT 1
5600: PLUS
5601: DOUBLE
5602: GREATEREQUAL
5603: IFFALSE 5611
5605: LD_INT 63000
5607: DOUBLE
5608: LESSEQUAL
5609: IFTRUE 5613
5611: GO 5624
5613: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5614: LD_ADDR_VAR 0 1
5618: PUSH
5619: LD_INT 60
5621: ST_TO_ADDR
5622: GO 5691
5624: LD_INT 63000
5626: PUSH
5627: LD_INT 1
5629: PLUS
5630: DOUBLE
5631: GREATEREQUAL
5632: IFFALSE 5640
5634: LD_INT 105000
5636: DOUBLE
5637: LESSEQUAL
5638: IFTRUE 5642
5640: GO 5653
5642: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5643: LD_ADDR_VAR 0 1
5647: PUSH
5648: LD_INT 35
5650: ST_TO_ADDR
5651: GO 5691
5653: LD_INT 105000
5655: PUSH
5656: LD_INT 1
5658: PLUS
5659: DOUBLE
5660: GREATEREQUAL
5661: IFFALSE 5669
5663: LD_INT 630000
5665: DOUBLE
5666: LESSEQUAL
5667: IFTRUE 5671
5669: GO 5682
5671: POP
// d := 20 ; else
5672: LD_ADDR_VAR 0 1
5676: PUSH
5677: LD_INT 20
5679: ST_TO_ADDR
5680: GO 5691
5682: POP
// d := 0 ; end ;
5683: LD_ADDR_VAR 0 1
5687: PUSH
5688: LD_INT 0
5690: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5691: LD_INT 1
5693: PPUSH
5694: LD_INT 10000
5696: PPUSH
5697: CALL_OW 12
5701: PUSH
5702: LD_VAR 0 1
5706: PUSH
5707: LD_EXP 10
5711: MUL
5712: LESSEQUAL
5713: IFFALSE 5767
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5715: LD_INT 1
5717: PPUSH
5718: LD_INT 140
5720: PPUSH
5721: CALL_OW 12
5725: PPUSH
5726: CALL_OW 67
// shipment := ( shipment + 1 ) mod 2 ;
5730: LD_ADDR_LOC 9
5734: PUSH
5735: LD_LOC 9
5739: PUSH
5740: LD_INT 1
5742: PLUS
5743: PUSH
5744: LD_INT 2
5746: MOD
5747: ST_TO_ADDR
// CreateCratesArea ( 5 , west_side + shipment , true ) ;
5748: LD_INT 5
5750: PPUSH
5751: LD_INT 8
5753: PUSH
5754: LD_LOC 9
5758: PLUS
5759: PPUSH
5760: LD_INT 1
5762: PPUSH
5763: CALL_OW 55
// end ; enable ;
5767: ENABLE
// end ;
5768: PPOPN 1
5770: END
// every 0 0$10 trigger TICK > ( ( 2 2$0 * tictac ) + tictac * ( 1 1$30 - shipments_density * ( 0 0$2 ) ) ) marked 55 do var i , amount , is_in ;
5771: LD_OWVAR 1
5775: PUSH
5776: LD_INT 4200
5778: PUSH
5779: LD_LOC 10
5783: MUL
5784: PUSH
5785: LD_LOC 10
5789: PUSH
5790: LD_INT 3150
5792: PUSH
5793: LD_EXP 10
5797: PUSH
5798: LD_INT 70
5800: MUL
5801: MINUS
5802: MUL
5803: PLUS
5804: GREATER
5805: IFFALSE 5941
5807: GO 5809
5809: DISABLE
5810: LD_INT 0
5812: PPUSH
5813: PPUSH
5814: PPUSH
// begin tictac := tictac + 1 ;
5815: LD_ADDR_LOC 10
5819: PUSH
5820: LD_LOC 10
5824: PUSH
5825: LD_INT 1
5827: PLUS
5828: ST_TO_ADDR
// amount := Rand ( 3 , 5 ) ;
5829: LD_ADDR_VAR 0 2
5833: PUSH
5834: LD_INT 3
5836: PPUSH
5837: LD_INT 5
5839: PPUSH
5840: CALL_OW 12
5844: ST_TO_ADDR
// for i = 0 to 3 do
5845: LD_ADDR_VAR 0 1
5849: PUSH
5850: DOUBLE
5851: LD_INT 0
5853: DEC
5854: ST_TO_ADDR
5855: LD_INT 3
5857: PUSH
5858: FOR_TO
5859: IFFALSE 5938
// begin is_in := GetResourceArea ( west_side + i , mat_cans ) ;
5861: LD_ADDR_VAR 0 3
5865: PUSH
5866: LD_INT 8
5868: PUSH
5869: LD_VAR 0 1
5873: PLUS
5874: PPUSH
5875: LD_INT 1
5877: PPUSH
5878: CALL_OW 287
5882: ST_TO_ADDR
// if ( is_in < 500 ) or ( Rand ( 1 , 10 ) > ( is_in div 100 ) ) then
5883: LD_VAR 0 3
5887: PUSH
5888: LD_INT 500
5890: LESS
5891: PUSH
5892: LD_INT 1
5894: PPUSH
5895: LD_INT 10
5897: PPUSH
5898: CALL_OW 12
5902: PUSH
5903: LD_VAR 0 3
5907: PUSH
5908: LD_INT 100
5910: DIV
5911: GREATER
5912: OR
5913: IFFALSE 5936
// CreateCratesArea ( amount , nw + i , true ) ;
5915: LD_VAR 0 2
5919: PPUSH
5920: LD_INT 12
5922: PUSH
5923: LD_VAR 0 1
5927: PLUS
5928: PPUSH
5929: LD_INT 1
5931: PPUSH
5932: CALL_OW 55
// end ;
5936: GO 5858
5938: POP
5939: POP
// enable ;
5940: ENABLE
// end ; end_of_file
5941: PPOPN 3
5943: END
// var respawn_queue , nation_queue ; export function init_respawn ; begin
5944: LD_INT 0
5946: PPUSH
// if not def_people_respawning then
5947: LD_EXP 68
5951: NOT
5952: IFFALSE 5956
// exit ;
5954: GO 6059
// respawn_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5956: LD_ADDR_LOC 11
5960: PUSH
5961: LD_INT 0
5963: PUSH
5964: LD_INT 0
5966: PUSH
5967: LD_INT 0
5969: PUSH
5970: LD_INT 0
5972: PUSH
5973: LD_INT 0
5975: PUSH
5976: LD_INT 0
5978: PUSH
5979: LD_INT 0
5981: PUSH
5982: LD_INT 0
5984: PUSH
5985: EMPTY
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: ST_TO_ADDR
// nation_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5995: LD_ADDR_LOC 12
5999: PUSH
6000: LD_INT 0
6002: PUSH
6003: LD_INT 0
6005: PUSH
6006: LD_INT 0
6008: PUSH
6009: LD_INT 0
6011: PUSH
6012: LD_INT 0
6014: PUSH
6015: LD_INT 0
6017: PUSH
6018: LD_INT 0
6020: PUSH
6021: LD_INT 0
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: ST_TO_ADDR
// if Game_Type in [ 2 , 12 ] then
6034: LD_EXP 56
6038: PUSH
6039: LD_INT 2
6041: PUSH
6042: LD_INT 12
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: IN
6049: IFFALSE 6056
// enable ( 41 ) else
6051: LD_INT 41
6053: ENABLE_MARKED
6054: GO 6059
// enable ( 40 ) ;
6056: LD_INT 40
6058: ENABLE_MARKED
// end ;
6059: LD_VAR 0 1
6063: RET
// every 0 0$10 marked 40 do var list , time , side ;
6064: GO 6066
6066: DISABLE
6067: LD_INT 0
6069: PPUSH
6070: PPUSH
6071: PPUSH
// begin for side = 1 to Side_Positions do
6072: LD_ADDR_VAR 0 3
6076: PUSH
6077: DOUBLE
6078: LD_INT 1
6080: DEC
6081: ST_TO_ADDR
6082: LD_EXP 18
6086: PUSH
6087: FOR_TO
6088: IFFALSE 6265
// if Side_Positions [ side ] then
6090: LD_EXP 18
6094: PUSH
6095: LD_VAR 0 3
6099: ARRAY
6100: IFFALSE 6263
// begin list := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6102: LD_ADDR_VAR 0 1
6106: PUSH
6107: LD_INT 22
6109: PUSH
6110: LD_VAR 0 3
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: PUSH
6119: LD_INT 21
6121: PUSH
6122: LD_INT 1
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: PUSH
6129: LD_INT 3
6131: PUSH
6132: LD_INT 23
6134: PUSH
6135: LD_INT 0
6137: PUSH
6138: EMPTY
6139: LIST
6140: LIST
6141: PUSH
6142: EMPTY
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: PPUSH
6148: CALL_OW 69
6152: ST_TO_ADDR
// if ( list < number_of_people ) and ( not respawn_queue [ side ] ) then
6153: LD_VAR 0 1
6157: PUSH
6158: LD_EXP 6
6162: LESS
6163: PUSH
6164: LD_LOC 11
6168: PUSH
6169: LD_VAR 0 3
6173: ARRAY
6174: NOT
6175: AND
6176: IFFALSE 6203
// respawn_queue := Replace ( respawn_queue , side , TICK ) ;
6178: LD_ADDR_LOC 11
6182: PUSH
6183: LD_LOC 11
6187: PPUSH
6188: LD_VAR 0 3
6192: PPUSH
6193: LD_OWVAR 1
6197: PPUSH
6198: CALL_OW 1
6202: ST_TO_ADDR
// time := TICK - respawn_queue [ side ] ;
6203: LD_ADDR_VAR 0 2
6207: PUSH
6208: LD_OWVAR 1
6212: PUSH
6213: LD_LOC 11
6217: PUSH
6218: LD_VAR 0 3
6222: ARRAY
6223: MINUS
6224: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6225: LD_LOC 11
6229: PUSH
6230: LD_VAR 0 3
6234: ARRAY
6235: PUSH
6236: LD_VAR 0 2
6240: PUSH
6241: LD_EXP 13
6245: GREATER
6246: AND
6247: IFFALSE 6263
// respawn_character ( side , time ) ;
6249: LD_VAR 0 3
6253: PPUSH
6254: LD_VAR 0 2
6258: PPUSH
6259: CALL 6271 0 2
// end ;
6263: GO 6087
6265: POP
6266: POP
// enable ;
6267: ENABLE
// end ;
6268: PPOPN 3
6270: END
// function respawn_character ( side , time ) ; var dep ; begin
6271: LD_INT 0
6273: PPUSH
6274: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6275: LD_INT 0
6277: PPUSH
6278: LD_INT 1
6280: PPUSH
6281: CALL_OW 12
6285: PUSH
6286: LD_VAR 0 2
6290: PUSH
6291: LD_EXP 14
6295: LESS
6296: AND
6297: IFFALSE 6301
// exit ;
6299: GO 6508
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6301: LD_ADDR_VAR 0 4
6305: PUSH
6306: LD_INT 22
6308: PUSH
6309: LD_VAR 0 1
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: PUSH
6318: LD_INT 2
6320: PUSH
6321: LD_INT 30
6323: PUSH
6324: LD_INT 0
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: PUSH
6331: LD_INT 30
6333: PUSH
6334: LD_INT 1
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: PUSH
6341: EMPTY
6342: LIST
6343: LIST
6344: LIST
6345: PUSH
6346: LD_INT 50
6348: PUSH
6349: EMPTY
6350: LIST
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: LIST
6356: PPUSH
6357: CALL_OW 69
6361: ST_TO_ADDR
// if not dep then
6362: LD_VAR 0 4
6366: NOT
6367: IFFALSE 6373
// exit else
6369: GO 6508
6371: GO 6397
// dep := dep [ Rand ( 1 , dep ) ] ;
6373: LD_ADDR_VAR 0 4
6377: PUSH
6378: LD_VAR 0 4
6382: PUSH
6383: LD_INT 1
6385: PPUSH
6386: LD_VAR 0 4
6390: PPUSH
6391: CALL_OW 12
6395: ARRAY
6396: ST_TO_ADDR
// uc_side := side ;
6397: LD_ADDR_OWVAR 20
6401: PUSH
6402: LD_VAR 0 1
6406: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6407: LD_ADDR_OWVAR 21
6411: PUSH
6412: LD_EXP 19
6416: PUSH
6417: LD_VAR 0 1
6421: ARRAY
6422: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6423: LD_INT 0
6425: PPUSH
6426: LD_INT 0
6428: PPUSH
6429: LD_EXP 7
6433: PUSH
6434: LD_INT 2
6436: DIV
6437: PPUSH
6438: CALL_OW 380
// hc_importance := 0 ;
6442: LD_ADDR_OWVAR 32
6446: PUSH
6447: LD_INT 0
6449: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
6450: CALL_OW 44
6454: PPUSH
6455: LD_VAR 0 4
6459: PPUSH
6460: CALL_OW 250
6464: PPUSH
6465: LD_VAR 0 4
6469: PPUSH
6470: CALL_OW 251
6474: PPUSH
6475: LD_INT 10
6477: PPUSH
6478: LD_INT 1
6480: PPUSH
6481: CALL_OW 50
// respawn_queue := Replace ( respawn_queue , side , 0 ) ;
6485: LD_ADDR_LOC 11
6489: PUSH
6490: LD_LOC 11
6494: PPUSH
6495: LD_VAR 0 1
6499: PPUSH
6500: LD_INT 0
6502: PPUSH
6503: CALL_OW 1
6507: ST_TO_ADDR
// end ;
6508: LD_VAR 0 3
6512: RET
// every 0 0$10 marked 41 do var i , list , time , nation , side , limit ;
6513: GO 6515
6515: DISABLE
6516: LD_INT 0
6518: PPUSH
6519: PPUSH
6520: PPUSH
6521: PPUSH
6522: PPUSH
6523: PPUSH
// begin if Game_Type = 12 then
6524: LD_EXP 56
6528: PUSH
6529: LD_INT 12
6531: EQUAL
6532: IFFALSE 6546
// limit := number_of_people else
6534: LD_ADDR_VAR 0 6
6538: PUSH
6539: LD_EXP 6
6543: ST_TO_ADDR
6544: GO 6560
// limit := 2 * number_of_people ;
6546: LD_ADDR_VAR 0 6
6550: PUSH
6551: LD_INT 2
6553: PUSH
6554: LD_EXP 6
6558: MUL
6559: ST_TO_ADDR
// for i = 1 to 4 do
6560: LD_ADDR_VAR 0 1
6564: PUSH
6565: DOUBLE
6566: LD_INT 1
6568: DEC
6569: ST_TO_ADDR
6570: LD_INT 4
6572: PUSH
6573: FOR_TO
6574: IFFALSE 6866
// begin side := GetSidePositions ( [ 1 , 1 , 3 , 3 ] [ i ] ) ;
6576: LD_ADDR_VAR 0 5
6580: PUSH
6581: LD_INT 1
6583: PUSH
6584: LD_INT 1
6586: PUSH
6587: LD_INT 3
6589: PUSH
6590: LD_INT 3
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: PUSH
6599: LD_VAR 0 1
6603: ARRAY
6604: PPUSH
6605: CALL 7208 0 1
6609: ST_TO_ADDR
// if Game_Type = 12 then
6610: LD_EXP 56
6614: PUSH
6615: LD_INT 12
6617: EQUAL
6618: IFFALSE 6638
// nation := Position_Nations [ i ] else
6620: LD_ADDR_VAR 0 4
6624: PUSH
6625: LD_EXP 21
6629: PUSH
6630: LD_VAR 0 1
6634: ARRAY
6635: ST_TO_ADDR
6636: GO 6654
// nation := Side_Nations [ side ] ;
6638: LD_ADDR_VAR 0 4
6642: PUSH
6643: LD_EXP 19
6647: PUSH
6648: LD_VAR 0 5
6652: ARRAY
6653: ST_TO_ADDR
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_nation , nation ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6654: LD_ADDR_VAR 0 2
6658: PUSH
6659: LD_INT 22
6661: PUSH
6662: LD_VAR 0 5
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PUSH
6671: LD_INT 23
6673: PUSH
6674: LD_VAR 0 4
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: PUSH
6683: LD_INT 21
6685: PUSH
6686: LD_INT 1
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: PUSH
6693: LD_INT 3
6695: PUSH
6696: LD_INT 23
6698: PUSH
6699: LD_INT 0
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: PPUSH
6713: CALL_OW 69
6717: ST_TO_ADDR
// if ( list < limit ) and ( not respawn_queue [ side ] ) then
6718: LD_VAR 0 2
6722: PUSH
6723: LD_VAR 0 6
6727: LESS
6728: PUSH
6729: LD_LOC 11
6733: PUSH
6734: LD_VAR 0 5
6738: ARRAY
6739: NOT
6740: AND
6741: IFFALSE 6793
// begin respawn_queue = Replace ( respawn_queue , side , TICK ) ;
6743: LD_ADDR_LOC 11
6747: PUSH
6748: LD_LOC 11
6752: PPUSH
6753: LD_VAR 0 5
6757: PPUSH
6758: LD_OWVAR 1
6762: PPUSH
6763: CALL_OW 1
6767: ST_TO_ADDR
// nation_queue = Replace ( nation_queue , side , nation ) ;
6768: LD_ADDR_LOC 12
6772: PUSH
6773: LD_LOC 12
6777: PPUSH
6778: LD_VAR 0 5
6782: PPUSH
6783: LD_VAR 0 4
6787: PPUSH
6788: CALL_OW 1
6792: ST_TO_ADDR
// end ; time := TICK - respawn_queue [ side ] ;
6793: LD_ADDR_VAR 0 3
6797: PUSH
6798: LD_OWVAR 1
6802: PUSH
6803: LD_LOC 11
6807: PUSH
6808: LD_VAR 0 5
6812: ARRAY
6813: MINUS
6814: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6815: LD_LOC 11
6819: PUSH
6820: LD_VAR 0 5
6824: ARRAY
6825: PUSH
6826: LD_VAR 0 3
6830: PUSH
6831: LD_EXP 13
6835: GREATER
6836: AND
6837: IFFALSE 6864
// respawn_character_nation ( side , time , nation_queue [ side ] ) ;
6839: LD_VAR 0 5
6843: PPUSH
6844: LD_VAR 0 3
6848: PPUSH
6849: LD_LOC 12
6853: PUSH
6854: LD_VAR 0 5
6858: ARRAY
6859: PPUSH
6860: CALL 6872 0 3
// end ;
6864: GO 6573
6866: POP
6867: POP
// enable ;
6868: ENABLE
// end ;
6869: PPOPN 6
6871: END
// function respawn_character_nation ( side , time , nation ) ; var dep ; begin
6872: LD_INT 0
6874: PPUSH
6875: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6876: LD_INT 0
6878: PPUSH
6879: LD_INT 1
6881: PPUSH
6882: CALL_OW 12
6886: PUSH
6887: LD_VAR 0 2
6891: PUSH
6892: LD_EXP 14
6896: LESS
6897: AND
6898: IFFALSE 6902
// exit ;
6900: GO 7203
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_nation , nation ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6902: LD_ADDR_VAR 0 5
6906: PUSH
6907: LD_INT 22
6909: PUSH
6910: LD_VAR 0 1
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: PUSH
6919: LD_INT 23
6921: PUSH
6922: LD_VAR 0 3
6926: PUSH
6927: EMPTY
6928: LIST
6929: LIST
6930: PUSH
6931: LD_INT 2
6933: PUSH
6934: LD_INT 30
6936: PUSH
6937: LD_INT 0
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: PUSH
6944: LD_INT 30
6946: PUSH
6947: LD_INT 1
6949: PUSH
6950: EMPTY
6951: LIST
6952: LIST
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: LIST
6958: PUSH
6959: LD_INT 50
6961: PUSH
6962: EMPTY
6963: LIST
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: PPUSH
6971: CALL_OW 69
6975: ST_TO_ADDR
// if not dep then
6976: LD_VAR 0 5
6980: NOT
6981: IFFALSE 7044
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6983: LD_ADDR_VAR 0 5
6987: PUSH
6988: LD_INT 22
6990: PUSH
6991: LD_VAR 0 1
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PUSH
7000: LD_INT 2
7002: PUSH
7003: LD_INT 30
7005: PUSH
7006: LD_INT 0
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: PUSH
7013: LD_INT 30
7015: PUSH
7016: LD_INT 1
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: LIST
7027: PUSH
7028: LD_INT 50
7030: PUSH
7031: EMPTY
7032: LIST
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: LIST
7038: PPUSH
7039: CALL_OW 69
7043: ST_TO_ADDR
// if not dep then
7044: LD_VAR 0 5
7048: NOT
7049: IFFALSE 7055
// exit else
7051: GO 7203
7053: GO 7079
// dep := dep [ Rand ( 1 , dep ) ] ;
7055: LD_ADDR_VAR 0 5
7059: PUSH
7060: LD_VAR 0 5
7064: PUSH
7065: LD_INT 1
7067: PPUSH
7068: LD_VAR 0 5
7072: PPUSH
7073: CALL_OW 12
7077: ARRAY
7078: ST_TO_ADDR
// uc_side := side ;
7079: LD_ADDR_OWVAR 20
7083: PUSH
7084: LD_VAR 0 1
7088: ST_TO_ADDR
// uc_nation := nation ;
7089: LD_ADDR_OWVAR 21
7093: PUSH
7094: LD_VAR 0 3
7098: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level ) ;
7099: LD_INT 0
7101: PPUSH
7102: LD_INT 0
7104: PPUSH
7105: LD_EXP 7
7109: PPUSH
7110: CALL_OW 380
// hc_importance := 0 ;
7114: LD_ADDR_OWVAR 32
7118: PUSH
7119: LD_INT 0
7121: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
7122: CALL_OW 44
7126: PPUSH
7127: LD_VAR 0 5
7131: PPUSH
7132: CALL_OW 250
7136: PPUSH
7137: LD_VAR 0 5
7141: PPUSH
7142: CALL_OW 251
7146: PPUSH
7147: LD_INT 10
7149: PPUSH
7150: LD_INT 1
7152: PPUSH
7153: CALL_OW 50
// respawn_queue := Replace ( respawn_queue , side , 0 ) ;
7157: LD_ADDR_LOC 11
7161: PUSH
7162: LD_LOC 11
7166: PPUSH
7167: LD_VAR 0 1
7171: PPUSH
7172: LD_INT 0
7174: PPUSH
7175: CALL_OW 1
7179: ST_TO_ADDR
// nation_queue := Replace ( nation_queue , side , 0 ) ;
7180: LD_ADDR_LOC 12
7184: PUSH
7185: LD_LOC 12
7189: PPUSH
7190: LD_VAR 0 1
7194: PPUSH
7195: LD_INT 0
7197: PPUSH
7198: CALL_OW 1
7202: ST_TO_ADDR
// end ;
7203: LD_VAR 0 4
7207: RET
// function GetSidePositions ( i ) ; var un , side ; begin
7208: LD_INT 0
7210: PPUSH
7211: PPUSH
7212: PPUSH
// side := false ;
7213: LD_ADDR_VAR 0 4
7217: PUSH
7218: LD_INT 0
7220: ST_TO_ADDR
// for un = 1 to Side_Positions do
7221: LD_ADDR_VAR 0 3
7225: PUSH
7226: DOUBLE
7227: LD_INT 1
7229: DEC
7230: ST_TO_ADDR
7231: LD_EXP 18
7235: PUSH
7236: FOR_TO
7237: IFFALSE 7271
// if Side_Positions [ un ] = i then
7239: LD_EXP 18
7243: PUSH
7244: LD_VAR 0 3
7248: ARRAY
7249: PUSH
7250: LD_VAR 0 1
7254: EQUAL
7255: IFFALSE 7269
// begin side := un ;
7257: LD_ADDR_VAR 0 4
7261: PUSH
7262: LD_VAR 0 3
7266: ST_TO_ADDR
// break ;
7267: GO 7271
// end ;
7269: GO 7236
7271: POP
7272: POP
// result := side ;
7273: LD_ADDR_VAR 0 2
7277: PUSH
7278: LD_VAR 0 4
7282: ST_TO_ADDR
// end ; end_of_file
7283: LD_VAR 0 2
7287: RET
// every 20 20$00 trigger apemanNumber do
7288: LD_EXP 30
7292: IFFALSE 7325
7294: GO 7296
7296: DISABLE
// begin enable ;
7297: ENABLE
// if apeLevel >= 8 then
7298: LD_EXP 35
7302: PUSH
7303: LD_INT 8
7305: GREATEREQUAL
7306: IFFALSE 7311
// disable else
7308: DISABLE
7309: GO 7325
// apeLevel := apeLevel + 1 ;
7311: LD_ADDR_EXP 35
7315: PUSH
7316: LD_EXP 35
7320: PUSH
7321: LD_INT 1
7323: PLUS
7324: ST_TO_ADDR
// end ;
7325: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
7326: LD_EXP 30
7330: PUSH
7331: LD_EXP 31
7335: LESS
7336: IFFALSE 7476
7338: GO 7340
7340: DISABLE
7341: LD_INT 0
7343: PPUSH
7344: PPUSH
7345: PPUSH
7346: PPUSH
// begin enable ;
7347: ENABLE
// for i := 1 to apemanPos do
7348: LD_ADDR_VAR 0 1
7352: PUSH
7353: DOUBLE
7354: LD_INT 1
7356: DEC
7357: ST_TO_ADDR
7358: LD_EXP 33
7362: PUSH
7363: FOR_TO
7364: IFFALSE 7474
// begin if apemanPlayerCount [ i ] then
7366: LD_EXP 34
7370: PUSH
7371: LD_VAR 0 1
7375: ARRAY
7376: IFFALSE 7472
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
7378: LD_EXP 34
7382: PUSH
7383: LD_VAR 0 1
7387: ARRAY
7388: PUSH
7389: LD_EXP 33
7393: PUSH
7394: LD_VAR 0 1
7398: ARRAY
7399: GREATER
7400: IFFALSE 7472
// begin ape := PrepareApeman ;
7402: LD_ADDR_VAR 0 2
7406: PUSH
7407: CALL 7971 0 0
7411: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
7412: LD_VAR 0 2
7416: PPUSH
7417: LD_EXP 36
7421: PUSH
7422: LD_VAR 0 1
7426: ARRAY
7427: PPUSH
7428: LD_INT 0
7430: PPUSH
7431: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
7435: LD_ADDR_EXP 33
7439: PUSH
7440: LD_EXP 33
7444: PPUSH
7445: LD_VAR 0 1
7449: PPUSH
7450: LD_EXP 33
7454: PUSH
7455: LD_VAR 0 1
7459: ARRAY
7460: PUSH
7461: LD_VAR 0 2
7465: UNION
7466: PPUSH
7467: CALL_OW 1
7471: ST_TO_ADDR
// end ; end ; end ;
7472: GO 7363
7474: POP
7475: POP
// end ;
7476: PPOPN 4
7478: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
7479: LD_INT 0
7481: PPUSH
7482: PPUSH
7483: PPUSH
7484: PPUSH
7485: PPUSH
7486: PPUSH
7487: PPUSH
// playersAmount := 0 ;
7488: LD_ADDR_VAR 0 3
7492: PUSH
7493: LD_INT 0
7495: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea ] ;
7496: LD_ADDR_VAR 0 7
7500: PUSH
7501: LD_INT 18
7503: PUSH
7504: LD_INT 19
7506: PUSH
7507: EMPTY
7508: LIST
7509: LIST
7510: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7511: LD_ADDR_EXP 36
7515: PUSH
7516: LD_INT 0
7518: PUSH
7519: LD_INT 0
7521: PUSH
7522: LD_INT 0
7524: PUSH
7525: LD_INT 0
7527: PUSH
7528: LD_INT 0
7530: PUSH
7531: LD_INT 0
7533: PUSH
7534: LD_INT 0
7536: PUSH
7537: LD_INT 0
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: ST_TO_ADDR
// for j = 1 to Side_Positions do
7550: LD_ADDR_VAR 0 4
7554: PUSH
7555: DOUBLE
7556: LD_INT 1
7558: DEC
7559: ST_TO_ADDR
7560: LD_EXP 18
7564: PUSH
7565: FOR_TO
7566: IFFALSE 7633
// if Side_Positions [ j ] then
7568: LD_EXP 18
7572: PUSH
7573: LD_VAR 0 4
7577: ARRAY
7578: IFFALSE 7631
// begin playersAmount := playersAmount + 1 ;
7580: LD_ADDR_VAR 0 3
7584: PUSH
7585: LD_VAR 0 3
7589: PUSH
7590: LD_INT 1
7592: PLUS
7593: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
7594: LD_ADDR_EXP 36
7598: PUSH
7599: LD_EXP 36
7603: PPUSH
7604: LD_VAR 0 4
7608: PPUSH
7609: LD_VAR 0 7
7613: PUSH
7614: LD_EXP 18
7618: PUSH
7619: LD_VAR 0 4
7623: ARRAY
7624: ARRAY
7625: PPUSH
7626: CALL_OW 1
7630: ST_TO_ADDR
// end ;
7631: GO 7565
7633: POP
7634: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
7635: LD_ADDR_EXP 32
7639: PUSH
7640: LD_INT 3
7642: PUSH
7643: LD_EXP 12
7647: MUL
7648: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
7649: LD_ADDR_EXP 30
7653: PUSH
7654: LD_VAR 0 3
7658: PUSH
7659: LD_EXP 32
7663: MUL
7664: ST_TO_ADDR
// apemanLimit := apemanNumber ;
7665: LD_ADDR_EXP 31
7669: PUSH
7670: LD_EXP 30
7674: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7675: LD_ADDR_EXP 33
7679: PUSH
7680: LD_INT 0
7682: PUSH
7683: LD_INT 0
7685: PUSH
7686: LD_INT 0
7688: PUSH
7689: LD_INT 0
7691: PUSH
7692: LD_INT 0
7694: PUSH
7695: LD_INT 0
7697: PUSH
7698: LD_INT 0
7700: PUSH
7701: LD_INT 0
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7714: LD_ADDR_EXP 34
7718: PUSH
7719: LD_INT 0
7721: PUSH
7722: LD_INT 0
7724: PUSH
7725: LD_INT 0
7727: PUSH
7728: LD_INT 0
7730: PUSH
7731: LD_INT 0
7733: PUSH
7734: LD_INT 0
7736: PUSH
7737: LD_INT 0
7739: PUSH
7740: LD_INT 0
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: ST_TO_ADDR
// apeLevel := 1 ;
7753: LD_ADDR_EXP 35
7757: PUSH
7758: LD_INT 1
7760: ST_TO_ADDR
// if not apemanNumber then
7761: LD_EXP 30
7765: NOT
7766: IFFALSE 7770
// exit ;
7768: GO 7966
// for i := 1 to apemanPerPlayer do
7770: LD_ADDR_VAR 0 2
7774: PUSH
7775: DOUBLE
7776: LD_INT 1
7778: DEC
7779: ST_TO_ADDR
7780: LD_EXP 32
7784: PUSH
7785: FOR_TO
7786: IFFALSE 7964
// begin for j := 1 to Side_Positions do
7788: LD_ADDR_VAR 0 4
7792: PUSH
7793: DOUBLE
7794: LD_INT 1
7796: DEC
7797: ST_TO_ADDR
7798: LD_EXP 18
7802: PUSH
7803: FOR_TO
7804: IFFALSE 7960
// if Side_Positions [ j ] then
7806: LD_EXP 18
7810: PUSH
7811: LD_VAR 0 4
7815: ARRAY
7816: IFFALSE 7958
// begin pos := Side_Positions [ j ] ;
7818: LD_ADDR_VAR 0 6
7822: PUSH
7823: LD_EXP 18
7827: PUSH
7828: LD_VAR 0 4
7832: ARRAY
7833: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
7834: LD_ADDR_EXP 34
7838: PUSH
7839: LD_EXP 34
7843: PPUSH
7844: LD_VAR 0 4
7848: PPUSH
7849: LD_EXP 34
7853: PUSH
7854: LD_VAR 0 4
7858: ARRAY
7859: PUSH
7860: LD_INT 1
7862: PLUS
7863: PPUSH
7864: CALL_OW 1
7868: ST_TO_ADDR
// ape := PrepareApeman ;
7869: LD_ADDR_VAR 0 5
7873: PUSH
7874: CALL 7971 0 0
7878: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
7879: LD_ADDR_EXP 33
7883: PUSH
7884: LD_EXP 33
7888: PPUSH
7889: LD_VAR 0 4
7893: PPUSH
7894: LD_EXP 33
7898: PUSH
7899: LD_VAR 0 4
7903: ARRAY
7904: PPUSH
7905: LD_EXP 33
7909: PUSH
7910: LD_VAR 0 4
7914: ARRAY
7915: PUSH
7916: LD_INT 1
7918: PLUS
7919: PPUSH
7920: LD_VAR 0 5
7924: PPUSH
7925: CALL_OW 1
7929: PPUSH
7930: CALL_OW 1
7934: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
7935: LD_VAR 0 5
7939: PPUSH
7940: LD_EXP 36
7944: PUSH
7945: LD_VAR 0 4
7949: ARRAY
7950: PPUSH
7951: LD_INT 0
7953: PPUSH
7954: CALL_OW 49
// end ;
7958: GO 7803
7960: POP
7961: POP
// end ;
7962: GO 7785
7964: POP
7965: POP
// end ;
7966: LD_VAR 0 1
7970: RET
// export function PrepareApeman ; var bonus ; begin
7971: LD_INT 0
7973: PPUSH
7974: PPUSH
// uc_side := 0 ;
7975: LD_ADDR_OWVAR 20
7979: PUSH
7980: LD_INT 0
7982: ST_TO_ADDR
// uc_nation := 0 ;
7983: LD_ADDR_OWVAR 21
7987: PUSH
7988: LD_INT 0
7990: ST_TO_ADDR
// InitHc ;
7991: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
7995: LD_ADDR_VAR 0 2
7999: PUSH
8000: LD_INT 1
8002: NEG
8003: PUSH
8004: LD_INT 0
8006: PUSH
8007: LD_INT 1
8009: PUSH
8010: EMPTY
8011: LIST
8012: LIST
8013: LIST
8014: PUSH
8015: LD_OWVAR 1
8019: PUSH
8020: LD_INT 3
8022: MOD
8023: PUSH
8024: LD_INT 1
8026: PLUS
8027: ARRAY
8028: ST_TO_ADDR
// hc_class := class_apeman ;
8029: LD_ADDR_OWVAR 28
8033: PUSH
8034: LD_INT 12
8036: ST_TO_ADDR
// hc_gallery :=  ;
8037: LD_ADDR_OWVAR 33
8041: PUSH
8042: LD_STRING 
8044: ST_TO_ADDR
// hc_name :=  ;
8045: LD_ADDR_OWVAR 26
8049: PUSH
8050: LD_STRING 
8052: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
8053: LD_ADDR_OWVAR 31
8057: PUSH
8058: LD_EXP 35
8062: PUSH
8063: LD_VAR 0 2
8067: PLUS
8068: PUSH
8069: LD_EXP 35
8073: PUSH
8074: LD_VAR 0 2
8078: PLUS
8079: PUSH
8080: LD_EXP 35
8084: PUSH
8085: LD_VAR 0 2
8089: PLUS
8090: PUSH
8091: LD_EXP 35
8095: PUSH
8096: LD_VAR 0 2
8100: PLUS
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
8108: LD_ADDR_OWVAR 35
8112: PUSH
8113: LD_INT 10
8115: PUSH
8116: LD_VAR 0 2
8120: MUL
8121: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
8122: LD_ADDR_OWVAR 29
8126: PUSH
8127: LD_INT 12
8129: PUSH
8130: LD_INT 10
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: ST_TO_ADDR
// result := CreateHuman ;
8137: LD_ADDR_VAR 0 1
8141: PUSH
8142: CALL_OW 44
8146: ST_TO_ADDR
// end ;
8147: LD_VAR 0 1
8151: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
8152: LD_INT 0
8154: PPUSH
8155: PPUSH
8156: PPUSH
// if not ape then
8157: LD_VAR 0 1
8161: NOT
8162: IFFALSE 8166
// exit ;
8164: GO 8291
// side := GetSide ( ape ) ;
8166: LD_ADDR_VAR 0 3
8170: PUSH
8171: LD_VAR 0 1
8175: PPUSH
8176: CALL_OW 255
8180: ST_TO_ADDR
// if not side then
8181: LD_VAR 0 3
8185: NOT
8186: IFFALSE 8240
// begin for i = 1 to apemanPos do
8188: LD_ADDR_VAR 0 4
8192: PUSH
8193: DOUBLE
8194: LD_INT 1
8196: DEC
8197: ST_TO_ADDR
8198: LD_EXP 33
8202: PUSH
8203: FOR_TO
8204: IFFALSE 8238
// if ape in apemanPos [ i ] then
8206: LD_VAR 0 1
8210: PUSH
8211: LD_EXP 33
8215: PUSH
8216: LD_VAR 0 4
8220: ARRAY
8221: IN
8222: IFFALSE 8236
// begin side := i ;
8224: LD_ADDR_VAR 0 3
8228: PUSH
8229: LD_VAR 0 4
8233: ST_TO_ADDR
// break ;
8234: GO 8238
// end ;
8236: GO 8203
8238: POP
8239: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
8240: LD_ADDR_EXP 33
8244: PUSH
8245: LD_EXP 33
8249: PPUSH
8250: LD_VAR 0 3
8254: PPUSH
8255: LD_EXP 33
8259: PUSH
8260: LD_VAR 0 3
8264: ARRAY
8265: PUSH
8266: LD_VAR 0 1
8270: DIFF
8271: PPUSH
8272: CALL_OW 1
8276: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
8277: LD_ADDR_EXP 30
8281: PUSH
8282: LD_EXP 30
8286: PUSH
8287: LD_INT 1
8289: MINUS
8290: ST_TO_ADDR
// end ; end_of_file
8291: LD_VAR 0 2
8295: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
8296: LD_VAR 0 1
8300: PPUSH
8301: CALL_OW 266
8305: PUSH
8306: LD_INT 0
8308: PUSH
8309: LD_INT 1
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: IN
8316: IFFALSE 8341
// SetBName ( b , @ & GetSide ( b ) ) ;
8318: LD_VAR 0 1
8322: PPUSH
8323: LD_STRING @
8325: PUSH
8326: LD_VAR 0 1
8330: PPUSH
8331: CALL_OW 255
8335: STR
8336: PPUSH
8337: CALL_OW 500
// if def_game_rules then
8341: LD_EXP 57
8345: IFFALSE 8382
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
8347: LD_VAR 0 1
8351: PPUSH
8352: LD_VAR 0 1
8356: PPUSH
8357: CALL_OW 266
8361: PPUSH
8362: LD_VAR 0 1
8366: PPUSH
8367: CALL_OW 255
8371: PPUSH
8372: LD_INT 0
8374: PPUSH
8375: LD_INT 1
8377: PPUSH
8378: CALL 18458 0 5
// end ;
8382: PPOPN 2
8384: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
8385: LD_VAR 0 1
8389: PPUSH
8390: CALL_OW 266
8394: PUSH
8395: LD_INT 0
8397: PUSH
8398: LD_INT 1
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: IN
8405: IFFALSE 8430
// SetBName ( b , @ & GetSide ( b ) ) ;
8407: LD_VAR 0 1
8411: PPUSH
8412: LD_STRING @
8414: PUSH
8415: LD_VAR 0 1
8419: PPUSH
8420: CALL_OW 255
8424: STR
8425: PPUSH
8426: CALL_OW 500
// if def_game_rules then
8430: LD_EXP 57
8434: IFFALSE 8473
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
8436: LD_VAR 0 1
8440: PPUSH
8441: LD_VAR 0 1
8445: PPUSH
8446: CALL_OW 266
8450: PPUSH
8451: LD_VAR 0 1
8455: PPUSH
8456: CALL_OW 255
8460: PPUSH
8461: LD_VAR 0 2
8465: PPUSH
8466: LD_INT 1
8468: PPUSH
8469: CALL 18458 0 5
// end ;
8473: PPOPN 3
8475: END
// on VehicleConstructed ( veh , fac ) do var side ;
8476: LD_INT 0
8478: PPUSH
// begin if GetControl ( veh ) = control_apeman then
8479: LD_VAR 0 1
8483: PPUSH
8484: CALL_OW 263
8488: PUSH
8489: LD_INT 5
8491: EQUAL
8492: IFFALSE 8634
// begin side := GetSide ( veh ) ;
8494: LD_ADDR_VAR 0 3
8498: PUSH
8499: LD_VAR 0 1
8503: PPUSH
8504: CALL_OW 255
8508: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
8509: LD_ADDR_EXP 33
8513: PUSH
8514: LD_EXP 33
8518: PPUSH
8519: LD_VAR 0 3
8523: PPUSH
8524: LD_EXP 33
8528: PUSH
8529: LD_VAR 0 3
8533: ARRAY
8534: PPUSH
8535: LD_INT 52
8537: PUSH
8538: EMPTY
8539: LIST
8540: PPUSH
8541: CALL_OW 72
8545: PUSH
8546: LD_INT 22
8548: PUSH
8549: LD_VAR 0 3
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: PUSH
8558: LD_INT 2
8560: PUSH
8561: LD_INT 33
8563: PUSH
8564: LD_INT 5
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: PUSH
8571: LD_INT 25
8573: PUSH
8574: LD_INT 12
8576: PUSH
8577: EMPTY
8578: LIST
8579: LIST
8580: PUSH
8581: LD_INT 25
8583: PUSH
8584: LD_INT 15
8586: PUSH
8587: EMPTY
8588: LIST
8589: LIST
8590: PUSH
8591: LD_INT 25
8593: PUSH
8594: LD_INT 16
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: PUSH
8601: LD_INT 25
8603: PUSH
8604: LD_INT 17
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: PUSH
8611: EMPTY
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: PUSH
8619: EMPTY
8620: LIST
8621: LIST
8622: PPUSH
8623: CALL_OW 69
8627: UNION
8628: PPUSH
8629: CALL_OW 1
8633: ST_TO_ADDR
// end ; end ;
8634: PPOPN 3
8636: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
8637: LD_VAR 0 1
8641: PPUSH
8642: LD_VAR 0 2
8646: PPUSH
8647: LD_VAR 0 3
8651: PPUSH
8652: LD_OWVAR 2
8656: PPUSH
8657: CALL 19136 0 4
8661: PPOPN 3
8663: END
// export function DE_Triggers ; begin
8664: LD_INT 0
8666: PPUSH
// disable ( 01 ) ;
8667: LD_INT 1
8669: DISABLE_MARKED
// disable ( 02 ) ;
8670: LD_INT 2
8672: DISABLE_MARKED
// disable ( 03 ) ;
8673: LD_INT 3
8675: DISABLE_MARKED
// disable ( 04 ) ;
8676: LD_INT 4
8678: DISABLE_MARKED
// disable ( 05 ) ;
8679: LD_INT 5
8681: DISABLE_MARKED
// disable ( 06 ) ;
8682: LD_INT 6
8684: DISABLE_MARKED
// disable ( 07 ) ;
8685: LD_INT 7
8687: DISABLE_MARKED
// disable ( 10 ) ;
8688: LD_INT 10
8690: DISABLE_MARKED
// disable ( 11 ) ;
8691: LD_INT 11
8693: DISABLE_MARKED
// disable ( 12 ) ;
8694: LD_INT 12
8696: DISABLE_MARKED
// disable ( 13 ) ;
8697: LD_INT 13
8699: DISABLE_MARKED
// disable ( 19 ) ;
8700: LD_INT 19
8702: DISABLE_MARKED
// disable ( 40 ) ;
8703: LD_INT 40
8705: DISABLE_MARKED
// disable ( 41 ) ;
8706: LD_INT 41
8708: DISABLE_MARKED
// disable ( 98 ) ;
8709: LD_INT 98
8711: DISABLE_MARKED
// disable ( 99 ) ;
8712: LD_INT 99
8714: DISABLE_MARKED
// disable ( 55 ) ;
8715: LD_INT 55
8717: DISABLE_MARKED
// disable ( 400 ) ;
8718: LD_INT 400
8720: DISABLE_MARKED
// disable ( 401 ) ;
8721: LD_INT 401
8723: DISABLE_MARKED
// end ; end_of_file
8724: LD_VAR 0 1
8728: RET
// function CanWinLoose ; begin
8729: LD_INT 0
8731: PPUSH
// Result := true ;
8732: LD_ADDR_VAR 0 1
8736: PUSH
8737: LD_INT 1
8739: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8740: CALL_OW 518
8744: PUSH
8745: CALL_OW 519
8749: PUSH
8750: LD_INT 0
8752: GREATER
8753: AND
8754: IFFALSE 8764
// Result := false ;
8756: LD_ADDR_VAR 0 1
8760: PUSH
8761: LD_INT 0
8763: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8764: CALL_OW 531
8768: PUSH
8769: CALL_OW 519
8773: PUSH
8774: LD_INT 1
8776: GREATER
8777: AND
8778: IFFALSE 8788
// Result := false ;
8780: LD_ADDR_VAR 0 1
8784: PUSH
8785: LD_INT 0
8787: ST_TO_ADDR
// end ;
8788: LD_VAR 0 1
8792: RET
// function HasPower ( i ) ; begin
8793: LD_INT 0
8795: PPUSH
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8796: LD_ADDR_VAR 0 2
8800: PUSH
8801: LD_INT 22
8803: PUSH
8804: LD_VAR 0 1
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: PUSH
8813: LD_INT 2
8815: PUSH
8816: LD_INT 21
8818: PUSH
8819: LD_INT 1
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: PUSH
8826: LD_INT 30
8828: PUSH
8829: LD_INT 0
8831: PUSH
8832: EMPTY
8833: LIST
8834: LIST
8835: PUSH
8836: LD_INT 30
8838: PUSH
8839: LD_INT 1
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: PPUSH
8856: CALL_OW 69
8860: ST_TO_ADDR
// end ;
8861: LD_VAR 0 2
8865: RET
// function AlliedSides ( i , j ) ; begin
8866: LD_INT 0
8868: PPUSH
// Result := false ;
8869: LD_ADDR_VAR 0 3
8873: PUSH
8874: LD_INT 0
8876: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8877: LD_VAR 0 1
8881: PPUSH
8882: LD_VAR 0 2
8886: PPUSH
8887: CALL_OW 81
8891: PUSH
8892: LD_INT 1
8894: EQUAL
8895: PUSH
8896: LD_VAR 0 2
8900: PPUSH
8901: LD_VAR 0 1
8905: PPUSH
8906: CALL_OW 81
8910: PUSH
8911: LD_INT 1
8913: EQUAL
8914: AND
8915: PUSH
8916: LD_VAR 0 1
8920: PPUSH
8921: CALL_OW 83
8925: AND
8926: PUSH
8927: LD_VAR 0 2
8931: PPUSH
8932: CALL_OW 83
8936: AND
8937: IFFALSE 8947
// Result := true ;
8939: LD_ADDR_VAR 0 3
8943: PUSH
8944: LD_INT 1
8946: ST_TO_ADDR
// end ;
8947: LD_VAR 0 3
8951: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
8952: CALL 8729 0 0
8956: IFFALSE 8965
8958: GO 8960
8960: DISABLE
// YouLostInMultiplayer ;
8961: CALL_OW 107
8965: END
// every 0 0$3 trigger CanWinLoose marked 401 do
8966: CALL 8729 0 0
8970: IFFALSE 8994
8972: GO 8974
8974: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
8975: LD_EXP 19
8979: PUSH
8980: LD_OWVAR 2
8984: ARRAY
8985: PPUSH
8986: CALL 19178 0 1
// YouWinInMultiplayer ;
8990: CALL_OW 106
// end ;
8994: END
// every 0 0$3 marked 98 do var i , CanWin ;
8995: GO 8997
8997: DISABLE
8998: LD_INT 0
9000: PPUSH
9001: PPUSH
// begin if not HasPower ( your_side ) then
9002: LD_OWVAR 2
9006: PPUSH
9007: CALL 8793 0 1
9011: NOT
9012: IFFALSE 9023
// begin Multiplayer_Loose_Message ;
9014: CALL_OW 521
// enable ( 400 ) ;
9018: LD_INT 400
9020: ENABLE_MARKED
// end else
9021: GO 9156
// begin CanWin := true ;
9023: LD_ADDR_VAR 0 2
9027: PUSH
9028: LD_INT 1
9030: ST_TO_ADDR
// for i := 1 to 8 do
9031: LD_ADDR_VAR 0 1
9035: PUSH
9036: DOUBLE
9037: LD_INT 1
9039: DEC
9040: ST_TO_ADDR
9041: LD_INT 8
9043: PUSH
9044: FOR_TO
9045: IFFALSE 9142
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9047: LD_EXP 18
9051: PUSH
9052: LD_VAR 0 1
9056: ARRAY
9057: PUSH
9058: LD_VAR 0 1
9062: PPUSH
9063: CALL_OW 108
9067: AND
9068: PUSH
9069: LD_VAR 0 1
9073: PUSH
9074: LD_OWVAR 2
9078: NONEQUAL
9079: AND
9080: IFFALSE 9140
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
9082: LD_EXP 16
9086: PUSH
9087: LD_VAR 0 1
9091: ARRAY
9092: NOT
9093: PUSH
9094: LD_EXP 16
9098: PUSH
9099: LD_VAR 0 1
9103: ARRAY
9104: PUSH
9105: LD_EXP 16
9109: PUSH
9110: LD_OWVAR 2
9114: ARRAY
9115: NONEQUAL
9116: OR
9117: IFFALSE 9140
// if HasPower ( i ) then
9119: LD_VAR 0 1
9123: PPUSH
9124: CALL 8793 0 1
9128: IFFALSE 9140
// begin CanWin := false ;
9130: LD_ADDR_VAR 0 2
9134: PUSH
9135: LD_INT 0
9137: ST_TO_ADDR
// break ;
9138: GO 9142
// end ;
9140: GO 9044
9142: POP
9143: POP
// if CanWin then
9144: LD_VAR 0 2
9148: IFFALSE 9155
// enable ( 401 ) else
9150: LD_INT 401
9152: ENABLE_MARKED
9153: GO 9156
// enable ;
9155: ENABLE
// end ; end ;
9156: PPOPN 2
9158: END
// every 0 0$3 marked 99 do var i , CanWin ;
9159: GO 9161
9161: DISABLE
9162: LD_INT 0
9164: PPUSH
9165: PPUSH
// begin if not HasPower ( your_side ) then
9166: LD_OWVAR 2
9170: PPUSH
9171: CALL 8793 0 1
9175: NOT
9176: IFFALSE 9187
// begin Multiplayer_Loose_Message ;
9178: CALL_OW 521
// enable ( 400 ) ;
9182: LD_INT 400
9184: ENABLE_MARKED
// end else
9185: GO 9300
// begin CanWin := true ;
9187: LD_ADDR_VAR 0 2
9191: PUSH
9192: LD_INT 1
9194: ST_TO_ADDR
// for i := 1 to 8 do
9195: LD_ADDR_VAR 0 1
9199: PUSH
9200: DOUBLE
9201: LD_INT 1
9203: DEC
9204: ST_TO_ADDR
9205: LD_INT 8
9207: PUSH
9208: FOR_TO
9209: IFFALSE 9286
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9211: LD_EXP 18
9215: PUSH
9216: LD_VAR 0 1
9220: ARRAY
9221: PUSH
9222: LD_VAR 0 1
9226: PPUSH
9227: CALL_OW 108
9231: AND
9232: PUSH
9233: LD_VAR 0 1
9237: PUSH
9238: LD_OWVAR 2
9242: NONEQUAL
9243: AND
9244: IFFALSE 9284
// if not AlliedSides ( i , your_side ) then
9246: LD_VAR 0 1
9250: PPUSH
9251: LD_OWVAR 2
9255: PPUSH
9256: CALL 8866 0 2
9260: NOT
9261: IFFALSE 9284
// if HasPower ( i ) then
9263: LD_VAR 0 1
9267: PPUSH
9268: CALL 8793 0 1
9272: IFFALSE 9284
// begin CanWin := false ;
9274: LD_ADDR_VAR 0 2
9278: PUSH
9279: LD_INT 0
9281: ST_TO_ADDR
// break ;
9282: GO 9286
// end ;
9284: GO 9208
9286: POP
9287: POP
// if CanWin then
9288: LD_VAR 0 2
9292: IFFALSE 9299
// enable ( 401 ) else
9294: LD_INT 401
9296: ENABLE_MARKED
9297: GO 9300
// enable ;
9299: ENABLE
// end ; end ; end_of_file
9300: PPOPN 2
9302: END
// var time ; export lidi , krabice , opoce ; export cper , cperiode ; var depot1 , depot2 ; var vlajka1 , vlajka2 ; export depotpositions , areas ; var podvozky , zbrane ; export pos1side , pos2side ; var pos1base , pos2base ; var left_score , right_score ; export debug , ctf ; export mp_sides_teams_ , mp_sides_nations_ , mp_sides_positions_ , mp_sides_players_counts_ ; var cft_01 , cft_02 , cft_03 , cft_04 , cft_05 , cft_06 , cft_07 ; export nonctf_10 , nonctf_11 , nonctf_12 , nonctf_13 ; var stmp , stmp2 , cl ; export function starting_ctf ; begin
9303: LD_INT 0
9305: PPUSH
// cft_01 = 01 ;
9306: LD_ADDR_LOC 24
9310: PUSH
9311: LD_INT 1
9313: ST_TO_ADDR
// cft_02 = 02 ;
9314: LD_ADDR_LOC 25
9318: PUSH
9319: LD_INT 2
9321: ST_TO_ADDR
// cft_03 = 03 ;
9322: LD_ADDR_LOC 26
9326: PUSH
9327: LD_INT 3
9329: ST_TO_ADDR
// cft_04 = 04 ;
9330: LD_ADDR_LOC 27
9334: PUSH
9335: LD_INT 4
9337: ST_TO_ADDR
// cft_05 = 05 ;
9338: LD_ADDR_LOC 28
9342: PUSH
9343: LD_INT 5
9345: ST_TO_ADDR
// cft_06 = 06 ;
9346: LD_ADDR_LOC 29
9350: PUSH
9351: LD_INT 6
9353: ST_TO_ADDR
// cft_07 = 07 ;
9354: LD_ADDR_LOC 30
9358: PUSH
9359: LD_INT 7
9361: ST_TO_ADDR
// nonctf_10 = 10 ;
9362: LD_ADDR_EXP 52
9366: PUSH
9367: LD_INT 10
9369: ST_TO_ADDR
// nonctf_11 = 11 ;
9370: LD_ADDR_EXP 53
9374: PUSH
9375: LD_INT 11
9377: ST_TO_ADDR
// nonctf_12 = 12 ;
9378: LD_ADDR_EXP 54
9382: PUSH
9383: LD_INT 12
9385: ST_TO_ADDR
// nonctf_13 = 13 ;
9386: LD_ADDR_EXP 55
9390: PUSH
9391: LD_INT 13
9393: ST_TO_ADDR
// disable ( cft_01 ) ;
9394: LD_LOC 24
9398: DISABLE_MARKED
// disable ( cft_02 ) ;
9399: LD_LOC 25
9403: DISABLE_MARKED
// disable ( cft_03 ) ;
9404: LD_LOC 26
9408: DISABLE_MARKED
// disable ( cft_04 ) ;
9409: LD_LOC 27
9413: DISABLE_MARKED
// disable ( cft_05 ) ;
9414: LD_LOC 28
9418: DISABLE_MARKED
// disable ( cft_06 ) ;
9419: LD_LOC 29
9423: DISABLE_MARKED
// disable ( cft_07 ) ;
9424: LD_LOC 30
9428: DISABLE_MARKED
// disable ( nonctf_10 ) ;
9429: LD_EXP 52
9433: DISABLE_MARKED
// disable ( nonctf_11 ) ;
9434: LD_EXP 53
9438: DISABLE_MARKED
// disable ( nonctf_12 ) ;
9439: LD_EXP 54
9443: DISABLE_MARKED
// disable ( nonctf_13 ) ;
9444: LD_EXP 55
9448: DISABLE_MARKED
// debug = false ;
9449: LD_ADDR_EXP 46
9453: PUSH
9454: LD_INT 0
9456: ST_TO_ADDR
// if not multiplayer then
9457: LD_OWVAR 4
9461: NOT
9462: IFFALSE 9622
// begin mp_sides_teams_ = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9464: LD_ADDR_EXP 48
9468: PUSH
9469: LD_INT 0
9471: PUSH
9472: LD_INT 0
9474: PUSH
9475: LD_INT 0
9477: PUSH
9478: LD_INT 0
9480: PUSH
9481: LD_INT 0
9483: PUSH
9484: LD_INT 0
9486: PUSH
9487: LD_INT 0
9489: PUSH
9490: LD_INT 0
9492: PUSH
9493: EMPTY
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: ST_TO_ADDR
// mp_sides_nations_ = [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9503: LD_ADDR_EXP 49
9507: PUSH
9508: LD_INT 1
9510: PUSH
9511: LD_INT 2
9513: PUSH
9514: LD_INT 0
9516: PUSH
9517: LD_INT 0
9519: PUSH
9520: LD_INT 0
9522: PUSH
9523: LD_INT 0
9525: PUSH
9526: LD_INT 0
9528: PUSH
9529: LD_INT 0
9531: PUSH
9532: EMPTY
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: ST_TO_ADDR
// mp_sides_positions_ = [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9542: LD_ADDR_EXP 50
9546: PUSH
9547: LD_INT 1
9549: PUSH
9550: LD_INT 2
9552: PUSH
9553: LD_INT 0
9555: PUSH
9556: LD_INT 0
9558: PUSH
9559: LD_INT 0
9561: PUSH
9562: LD_INT 0
9564: PUSH
9565: LD_INT 0
9567: PUSH
9568: LD_INT 0
9570: PUSH
9571: EMPTY
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: ST_TO_ADDR
// mp_sides_players_counts_ = [ 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9581: LD_ADDR_EXP 51
9585: PUSH
9586: LD_INT 1
9588: PUSH
9589: LD_INT 1
9591: PUSH
9592: LD_INT 0
9594: PUSH
9595: LD_INT 0
9597: PUSH
9598: LD_INT 0
9600: PUSH
9601: LD_INT 0
9603: PUSH
9604: LD_INT 0
9606: PUSH
9607: LD_INT 0
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: ST_TO_ADDR
// end else
9620: GO 9662
// begin mp_sides_teams_ = mp_sides_teams ;
9622: LD_ADDR_EXP 48
9626: PUSH
9627: LD_OWVAR 15
9631: ST_TO_ADDR
// mp_sides_nations_ = mp_sides_nations ;
9632: LD_ADDR_EXP 49
9636: PUSH
9637: LD_OWVAR 16
9641: ST_TO_ADDR
// mp_sides_positions_ = mp_sides_positions ;
9642: LD_ADDR_EXP 50
9646: PUSH
9647: LD_OWVAR 17
9651: ST_TO_ADDR
// mp_sides_players_counts_ = mp_sides_players_counts ;
9652: LD_ADDR_EXP 51
9656: PUSH
9657: LD_OWVAR 18
9661: ST_TO_ADDR
// end ; if debug then
9662: LD_EXP 46
9666: IFFALSE 9748
// begin debuglog ( [ side , your_side ] ) ;
9668: LD_STRING side
9670: PUSH
9671: LD_OWVAR 2
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: PPUSH
9680: CALL_OW 359
// debuglog ( [ teams , mp_sides_teams_ ] ) ;
9684: LD_STRING teams
9686: PUSH
9687: LD_EXP 48
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: PPUSH
9696: CALL_OW 359
// debuglog ( [ nations , mp_sides_nations_ ] ) ;
9700: LD_STRING nations
9702: PUSH
9703: LD_EXP 49
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PPUSH
9712: CALL_OW 359
// debuglog ( [ positions , mp_sides_positions_ ] ) ;
9716: LD_STRING positions
9718: PUSH
9719: LD_EXP 50
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: PPUSH
9728: CALL_OW 359
// debuglog ( [ pl. counts , mp_sides_players_counts_ ] ) ;
9732: LD_STRING pl. counts
9734: PUSH
9735: LD_EXP 51
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PPUSH
9744: CALL_OW 359
// end ; depotpositions = [ [ 34 , 60 , 1 ] , [ 185 , 60 , 4 ] ] ;
9748: LD_ADDR_EXP 42
9752: PUSH
9753: LD_INT 34
9755: PUSH
9756: LD_INT 60
9758: PUSH
9759: LD_INT 1
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: LIST
9766: PUSH
9767: LD_INT 185
9769: PUSH
9770: LD_INT 60
9772: PUSH
9773: LD_INT 4
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: LIST
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: ST_TO_ADDR
// areas = [ vlevo , vpravo ] ;
9785: LD_ADDR_EXP 43
9789: PUSH
9790: LD_INT 2
9792: PUSH
9793: LD_INT 3
9795: PUSH
9796: EMPTY
9797: LIST
9798: LIST
9799: ST_TO_ADDR
// if mp_game_type = 3 then
9800: LD_OWVAR 6
9804: PUSH
9805: LD_INT 3
9807: EQUAL
9808: IFFALSE 9816
// begin other_game ;
9810: CALL 12888 0 0
// exit ;
9814: GO 11264
// end ; ctf = true ;
9816: LD_ADDR_EXP 47
9820: PUSH
9821: LD_INT 1
9823: ST_TO_ADDR
// enable ( cft_01 ) ;
9824: LD_LOC 24
9828: ENABLE_MARKED
// enable ( cft_02 ) ;
9829: LD_LOC 25
9833: ENABLE_MARKED
// enable ( cft_05 ) ;
9834: LD_LOC 28
9838: ENABLE_MARKED
// enable ( cft_06 ) ;
9839: LD_LOC 29
9843: ENABLE_MARKED
// enable ( cft_07 ) ;
9844: LD_LOC 30
9848: ENABLE_MARKED
// podvozky = [ us_medium_wheeled , ar_medium_trike , ru_medium_wheeled ] ;
9849: LD_ADDR_LOC 18
9853: PUSH
9854: LD_INT 2
9856: PUSH
9857: LD_INT 13
9859: PUSH
9860: LD_INT 21
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: LIST
9867: ST_TO_ADDR
// zbrane = [ us_cargo_bay , ar_cargo_bay , ru_cargo_bay ] ;
9868: LD_ADDR_LOC 19
9872: PUSH
9873: LD_INT 12
9875: PUSH
9876: LD_INT 32
9878: PUSH
9879: LD_INT 51
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: LIST
9886: ST_TO_ADDR
// left_score = 0 ;
9887: LD_ADDR_LOC 22
9891: PUSH
9892: LD_INT 0
9894: ST_TO_ADDR
// right_score = 0 ;
9895: LD_ADDR_LOC 23
9899: PUSH
9900: LD_INT 0
9902: ST_TO_ADDR
// if multiplayer then
9903: LD_OWVAR 4
9907: IFFALSE 9963
// begin lidi = getmultiplayersetting ( 1 ) ;
9909: LD_ADDR_EXP 37
9913: PUSH
9914: LD_INT 1
9916: PPUSH
9917: CALL_OW 426
9921: ST_TO_ADDR
// krabice = getmultiplayersetting ( 2 ) ;
9922: LD_ADDR_EXP 38
9926: PUSH
9927: LD_INT 2
9929: PPUSH
9930: CALL_OW 426
9934: ST_TO_ADDR
// opoce = getmultiplayersetting ( 3 ) ;
9935: LD_ADDR_EXP 39
9939: PUSH
9940: LD_INT 3
9942: PPUSH
9943: CALL_OW 426
9947: ST_TO_ADDR
// time = getmultiplayersetting ( 4 ) ;
9948: LD_ADDR_LOC 13
9952: PUSH
9953: LD_INT 4
9955: PPUSH
9956: CALL_OW 426
9960: ST_TO_ADDR
// end else
9961: GO 9995
// begin lidi = 1 ;
9963: LD_ADDR_EXP 37
9967: PUSH
9968: LD_INT 1
9970: ST_TO_ADDR
// krabice = 1 ;
9971: LD_ADDR_EXP 38
9975: PUSH
9976: LD_INT 1
9978: ST_TO_ADDR
// opoce = 3 ;
9979: LD_ADDR_EXP 39
9983: PUSH
9984: LD_INT 3
9986: ST_TO_ADDR
// time = 2 ;
9987: LD_ADDR_LOC 13
9991: PUSH
9992: LD_INT 2
9994: ST_TO_ADDR
// end ; case lidi of 0 :
9995: LD_EXP 37
9999: PUSH
10000: LD_INT 0
10002: DOUBLE
10003: EQUAL
10004: IFTRUE 10008
10006: GO 10019
10008: POP
// lidi = 9 ; 1 :
10009: LD_ADDR_EXP 37
10013: PUSH
10014: LD_INT 9
10016: ST_TO_ADDR
10017: GO 10096
10019: LD_INT 1
10021: DOUBLE
10022: EQUAL
10023: IFTRUE 10027
10025: GO 10038
10027: POP
// lidi = 13 ; 2 :
10028: LD_ADDR_EXP 37
10032: PUSH
10033: LD_INT 13
10035: ST_TO_ADDR
10036: GO 10096
10038: LD_INT 2
10040: DOUBLE
10041: EQUAL
10042: IFTRUE 10046
10044: GO 10057
10046: POP
// lidi = 19 ; 3 :
10047: LD_ADDR_EXP 37
10051: PUSH
10052: LD_INT 19
10054: ST_TO_ADDR
10055: GO 10096
10057: LD_INT 3
10059: DOUBLE
10060: EQUAL
10061: IFTRUE 10065
10063: GO 10076
10065: POP
// lidi = 23 ; 4 :
10066: LD_ADDR_EXP 37
10070: PUSH
10071: LD_INT 23
10073: ST_TO_ADDR
10074: GO 10096
10076: LD_INT 4
10078: DOUBLE
10079: EQUAL
10080: IFTRUE 10084
10082: GO 10095
10084: POP
// lidi = 29 ; end ;
10085: LD_ADDR_EXP 37
10089: PUSH
10090: LD_INT 29
10092: ST_TO_ADDR
10093: GO 10096
10095: POP
// case krabice of 0 :
10096: LD_EXP 38
10100: PUSH
10101: LD_INT 0
10103: DOUBLE
10104: EQUAL
10105: IFTRUE 10109
10107: GO 10120
10109: POP
// cperiode = 1 1$30 ; 1 :
10110: LD_ADDR_EXP 41
10114: PUSH
10115: LD_INT 3150
10117: ST_TO_ADDR
10118: GO 10159
10120: LD_INT 1
10122: DOUBLE
10123: EQUAL
10124: IFTRUE 10128
10126: GO 10139
10128: POP
// cperiode = 1 1$00 ; 2 :
10129: LD_ADDR_EXP 41
10133: PUSH
10134: LD_INT 2100
10136: ST_TO_ADDR
10137: GO 10159
10139: LD_INT 2
10141: DOUBLE
10142: EQUAL
10143: IFTRUE 10147
10145: GO 10158
10147: POP
// cperiode = 0 0$30 ; end ;
10148: LD_ADDR_EXP 41
10152: PUSH
10153: LD_INT 1050
10155: ST_TO_ADDR
10156: GO 10159
10158: POP
// cper = 0 0$10 ;
10159: LD_ADDR_EXP 40
10163: PUSH
10164: LD_INT 350
10166: ST_TO_ADDR
// case opoce of 0 :
10167: LD_EXP 39
10171: PUSH
10172: LD_INT 0
10174: DOUBLE
10175: EQUAL
10176: IFTRUE 10180
10178: GO 10191
10180: POP
// opoce = 0 ; 1 :
10181: LD_ADDR_EXP 39
10185: PUSH
10186: LD_INT 0
10188: ST_TO_ADDR
10189: GO 10306
10191: LD_INT 1
10193: DOUBLE
10194: EQUAL
10195: IFTRUE 10199
10197: GO 10210
10199: POP
// opoce = 3 ; 2 :
10200: LD_ADDR_EXP 39
10204: PUSH
10205: LD_INT 3
10207: ST_TO_ADDR
10208: GO 10306
10210: LD_INT 2
10212: DOUBLE
10213: EQUAL
10214: IFTRUE 10218
10216: GO 10229
10218: POP
// opoce = 7 ; 3 :
10219: LD_ADDR_EXP 39
10223: PUSH
10224: LD_INT 7
10226: ST_TO_ADDR
10227: GO 10306
10229: LD_INT 3
10231: DOUBLE
10232: EQUAL
10233: IFTRUE 10237
10235: GO 10248
10237: POP
// opoce = 11 ; 4 :
10238: LD_ADDR_EXP 39
10242: PUSH
10243: LD_INT 11
10245: ST_TO_ADDR
10246: GO 10306
10248: LD_INT 4
10250: DOUBLE
10251: EQUAL
10252: IFTRUE 10256
10254: GO 10267
10256: POP
// opoce = 15 ; 5 :
10257: LD_ADDR_EXP 39
10261: PUSH
10262: LD_INT 15
10264: ST_TO_ADDR
10265: GO 10306
10267: LD_INT 5
10269: DOUBLE
10270: EQUAL
10271: IFTRUE 10275
10273: GO 10286
10275: POP
// opoce = 19 ; 6 :
10276: LD_ADDR_EXP 39
10280: PUSH
10281: LD_INT 19
10283: ST_TO_ADDR
10284: GO 10306
10286: LD_INT 6
10288: DOUBLE
10289: EQUAL
10290: IFTRUE 10294
10292: GO 10305
10294: POP
// opoce = 23 ; end ;
10295: LD_ADDR_EXP 39
10299: PUSH
10300: LD_INT 23
10302: ST_TO_ADDR
10303: GO 10306
10305: POP
// case time of 0 :
10306: LD_LOC 13
10310: PUSH
10311: LD_INT 0
10313: DOUBLE
10314: EQUAL
10315: IFTRUE 10319
10317: GO 10334
10319: POP
// time = 30 * 60 ; 1 :
10320: LD_ADDR_LOC 13
10324: PUSH
10325: LD_INT 30
10327: PUSH
10328: LD_INT 60
10330: MUL
10331: ST_TO_ADDR
10332: GO 10450
10334: LD_INT 1
10336: DOUBLE
10337: EQUAL
10338: IFTRUE 10342
10340: GO 10357
10342: POP
// time = 40 * 60 ; 2 :
10343: LD_ADDR_LOC 13
10347: PUSH
10348: LD_INT 40
10350: PUSH
10351: LD_INT 60
10353: MUL
10354: ST_TO_ADDR
10355: GO 10450
10357: LD_INT 2
10359: DOUBLE
10360: EQUAL
10361: IFTRUE 10365
10363: GO 10380
10365: POP
// time = 50 * 60 ; 3 :
10366: LD_ADDR_LOC 13
10370: PUSH
10371: LD_INT 50
10373: PUSH
10374: LD_INT 60
10376: MUL
10377: ST_TO_ADDR
10378: GO 10450
10380: LD_INT 3
10382: DOUBLE
10383: EQUAL
10384: IFTRUE 10388
10386: GO 10403
10388: POP
// time = 60 * 60 ; 4 :
10389: LD_ADDR_LOC 13
10393: PUSH
10394: LD_INT 60
10396: PUSH
10397: LD_INT 60
10399: MUL
10400: ST_TO_ADDR
10401: GO 10450
10403: LD_INT 4
10405: DOUBLE
10406: EQUAL
10407: IFTRUE 10411
10409: GO 10426
10411: POP
// time = 90 * 60 ; 5 :
10412: LD_ADDR_LOC 13
10416: PUSH
10417: LD_INT 90
10419: PUSH
10420: LD_INT 60
10422: MUL
10423: ST_TO_ADDR
10424: GO 10450
10426: LD_INT 5
10428: DOUBLE
10429: EQUAL
10430: IFTRUE 10434
10432: GO 10449
10434: POP
// time = 120 * 60 ; end ;
10435: LD_ADDR_LOC 13
10439: PUSH
10440: LD_INT 120
10442: PUSH
10443: LD_INT 60
10445: MUL
10446: ST_TO_ADDR
10447: GO 10450
10449: POP
// enable ( cft_03 ) ;
10450: LD_LOC 26
10454: ENABLE_MARKED
// refresh ;
10455: CALL 11269 0 0
// for stmp = 1 to 8 do
10459: LD_ADDR_LOC 31
10463: PUSH
10464: DOUBLE
10465: LD_INT 1
10467: DEC
10468: ST_TO_ADDR
10469: LD_INT 8
10471: PUSH
10472: FOR_TO
10473: IFFALSE 10842
// if mp_sides_nations_ [ stmp ] then
10475: LD_EXP 49
10479: PUSH
10480: LD_LOC 31
10484: ARRAY
10485: IFFALSE 10840
// begin if mp_sides_positions_ [ stmp ] = 1 then
10487: LD_EXP 50
10491: PUSH
10492: LD_LOC 31
10496: ARRAY
10497: PUSH
10498: LD_INT 1
10500: EQUAL
10501: IFFALSE 10515
// pos1side = stmp else
10503: LD_ADDR_EXP 44
10507: PUSH
10508: LD_LOC 31
10512: ST_TO_ADDR
10513: GO 10525
// pos2side = stmp ;
10515: LD_ADDR_EXP 45
10519: PUSH
10520: LD_LOC 31
10524: ST_TO_ADDR
// uc_side = stmp ;
10525: LD_ADDR_OWVAR 20
10529: PUSH
10530: LD_LOC 31
10534: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ stmp ] ;
10535: LD_ADDR_OWVAR 21
10539: PUSH
10540: LD_EXP 49
10544: PUSH
10545: LD_LOC 31
10549: ARRAY
10550: ST_TO_ADDR
// bc_type = b_depot ;
10551: LD_ADDR_OWVAR 42
10555: PUSH
10556: LD_INT 0
10558: ST_TO_ADDR
// bc_level = 1 ;
10559: LD_ADDR_OWVAR 43
10563: PUSH
10564: LD_INT 1
10566: ST_TO_ADDR
// createandplacebuildingxyd ( depotpositions [ mp_sides_positions_ [ stmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 2 ] , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 3 ] ) ;
10567: LD_EXP 42
10571: PUSH
10572: LD_EXP 50
10576: PUSH
10577: LD_LOC 31
10581: ARRAY
10582: ARRAY
10583: PUSH
10584: LD_INT 1
10586: ARRAY
10587: PPUSH
10588: LD_EXP 42
10592: PUSH
10593: LD_EXP 50
10597: PUSH
10598: LD_LOC 31
10602: ARRAY
10603: ARRAY
10604: PUSH
10605: LD_INT 2
10607: ARRAY
10608: PPUSH
10609: LD_EXP 42
10613: PUSH
10614: LD_EXP 50
10618: PUSH
10619: LD_LOC 31
10623: ARRAY
10624: ARRAY
10625: PUSH
10626: LD_INT 3
10628: ARRAY
10629: PPUSH
10630: CALL_OW 47
// setbattleflag ( stmp , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 2 ] , [ [ bfo_defend_bonus_human , 150 ] , [ bfo_defend_bonus_vehicle , 10 ] , [ bfo_defend_bonus_building , 0 ] , [ bfo_range , 17 ] , [ bfo_height , 100 ] ] ) ;
10634: LD_LOC 31
10638: PPUSH
10639: LD_EXP 42
10643: PUSH
10644: LD_EXP 50
10648: PUSH
10649: LD_LOC 31
10653: ARRAY
10654: ARRAY
10655: PUSH
10656: LD_INT 1
10658: ARRAY
10659: PPUSH
10660: LD_EXP 42
10664: PUSH
10665: LD_EXP 50
10669: PUSH
10670: LD_LOC 31
10674: ARRAY
10675: ARRAY
10676: PUSH
10677: LD_INT 2
10679: ARRAY
10680: PPUSH
10681: LD_INT 1
10683: PUSH
10684: LD_INT 150
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: PUSH
10691: LD_INT 2
10693: PUSH
10694: LD_INT 10
10696: PUSH
10697: EMPTY
10698: LIST
10699: LIST
10700: PUSH
10701: LD_INT 3
10703: PUSH
10704: LD_INT 0
10706: PUSH
10707: EMPTY
10708: LIST
10709: LIST
10710: PUSH
10711: LD_INT 10
10713: PUSH
10714: LD_INT 17
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: PUSH
10721: LD_INT 20
10723: PUSH
10724: LD_INT 100
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: PPUSH
10738: CALL_OW 418
// cl = class_engineer ;
10742: LD_ADDR_LOC 33
10746: PUSH
10747: LD_INT 2
10749: ST_TO_ADDR
// for stmp2 = 1 to lidi do
10750: LD_ADDR_LOC 32
10754: PUSH
10755: DOUBLE
10756: LD_INT 1
10758: DEC
10759: ST_TO_ADDR
10760: LD_EXP 37
10764: PUSH
10765: FOR_TO
10766: IFFALSE 10838
// begin if stmp2 >= lidi / 2 then
10768: LD_LOC 32
10772: PUSH
10773: LD_EXP 37
10777: PUSH
10778: LD_INT 2
10780: DIVREAL
10781: GREATEREQUAL
10782: IFFALSE 10792
// cl = class_soldier ;
10784: LD_ADDR_LOC 33
10788: PUSH
10789: LD_INT 1
10791: ST_TO_ADDR
// preparehuman ( 0 , cl , 1 ) ;
10792: LD_INT 0
10794: PPUSH
10795: LD_LOC 33
10799: PPUSH
10800: LD_INT 1
10802: PPUSH
10803: CALL_OW 380
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ stmp ] ] , false ) ;
10807: CALL_OW 44
10811: PPUSH
10812: LD_EXP 43
10816: PUSH
10817: LD_EXP 50
10821: PUSH
10822: LD_LOC 31
10826: ARRAY
10827: ARRAY
10828: PPUSH
10829: LD_INT 0
10831: PPUSH
10832: CALL_OW 49
// end ;
10836: GO 10765
10838: POP
10839: POP
// end ;
10840: GO 10472
10842: POP
10843: POP
// depot1 = filterunitsinarea ( vlevo , [ [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
10844: LD_ADDR_LOC 14
10848: PUSH
10849: LD_INT 2
10851: PPUSH
10852: LD_INT 21
10854: PUSH
10855: LD_INT 3
10857: PUSH
10858: EMPTY
10859: LIST
10860: LIST
10861: PUSH
10862: LD_INT 30
10864: PUSH
10865: LD_INT 0
10867: PUSH
10868: EMPTY
10869: LIST
10870: LIST
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: PPUSH
10876: CALL_OW 70
10880: PUSH
10881: LD_INT 1
10883: ARRAY
10884: ST_TO_ADDR
// depot2 = filterunitsinarea ( vpravo , [ [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
10885: LD_ADDR_LOC 15
10889: PUSH
10890: LD_INT 3
10892: PPUSH
10893: LD_INT 21
10895: PUSH
10896: LD_INT 3
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PUSH
10903: LD_INT 30
10905: PUSH
10906: LD_INT 0
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: PPUSH
10917: CALL_OW 70
10921: PUSH
10922: LD_INT 1
10924: ARRAY
10925: ST_TO_ADDR
// pos1base = getbase ( depot1 ) ;
10926: LD_ADDR_LOC 20
10930: PUSH
10931: LD_LOC 14
10935: PPUSH
10936: CALL_OW 274
10940: ST_TO_ADDR
// pos2base = getbase ( depot2 ) ;
10941: LD_ADDR_LOC 21
10945: PUSH
10946: LD_LOC 15
10950: PPUSH
10951: CALL_OW 274
10955: ST_TO_ADDR
// uc_side = 0 ;
10956: LD_ADDR_OWVAR 20
10960: PUSH
10961: LD_INT 0
10963: ST_TO_ADDR
// uc_nation = nation_nature ;
10964: LD_ADDR_OWVAR 21
10968: PUSH
10969: LD_INT 0
10971: ST_TO_ADDR
// for stmp = 1 to opoce do
10972: LD_ADDR_LOC 31
10976: PUSH
10977: DOUBLE
10978: LD_INT 1
10980: DEC
10981: ST_TO_ADDR
10982: LD_EXP 39
10986: PUSH
10987: FOR_TO
10988: IFFALSE 11020
// begin preparehuman ( 0 , class_apeman , 0 ) ;
10990: LD_INT 0
10992: PPUSH
10993: LD_INT 12
10995: PPUSH
10996: LD_INT 0
10998: PPUSH
10999: CALL_OW 380
// placeunitarea ( createhuman , les , false ) ;
11003: CALL_OW 44
11007: PPUSH
11008: LD_INT 4
11010: PPUSH
11011: LD_INT 0
11013: PPUSH
11014: CALL_OW 49
// end ;
11018: GO 10987
11020: POP
11021: POP
// uc_side = pos2side ;
11022: LD_ADDR_OWVAR 20
11026: PUSH
11027: LD_EXP 45
11031: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos2side ] ;
11032: LD_ADDR_OWVAR 21
11036: PUSH
11037: LD_EXP 49
11041: PUSH
11042: LD_EXP 45
11046: ARRAY
11047: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11048: LD_ADDR_OWVAR 37
11052: PUSH
11053: LD_LOC 18
11057: PUSH
11058: LD_OWVAR 21
11062: ARRAY
11063: ST_TO_ADDR
// vc_control = control_manual ;
11064: LD_ADDR_OWVAR 38
11068: PUSH
11069: LD_INT 1
11071: ST_TO_ADDR
// vc_engine = engine_siberite ;
11072: LD_ADDR_OWVAR 39
11076: PUSH
11077: LD_INT 3
11079: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
11080: LD_ADDR_OWVAR 40
11084: PUSH
11085: LD_LOC 19
11089: PUSH
11090: LD_OWVAR 21
11094: ARRAY
11095: ST_TO_ADDR
// vlajka1 = createvehicle ;
11096: LD_ADDR_LOC 16
11100: PUSH
11101: CALL_OW 45
11105: ST_TO_ADDR
// placeunitxy ( vlajka1 , 76 , 60 , false ) ;
11106: LD_LOC 16
11110: PPUSH
11111: LD_INT 76
11113: PPUSH
11114: LD_INT 60
11116: PPUSH
11117: LD_INT 0
11119: PPUSH
11120: CALL_OW 48
// uc_side = pos1side ;
11124: LD_ADDR_OWVAR 20
11128: PUSH
11129: LD_EXP 44
11133: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos1side ] ;
11134: LD_ADDR_OWVAR 21
11138: PUSH
11139: LD_EXP 49
11143: PUSH
11144: LD_EXP 44
11148: ARRAY
11149: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11150: LD_ADDR_OWVAR 37
11154: PUSH
11155: LD_LOC 18
11159: PUSH
11160: LD_OWVAR 21
11164: ARRAY
11165: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
11166: LD_ADDR_OWVAR 40
11170: PUSH
11171: LD_LOC 19
11175: PUSH
11176: LD_OWVAR 21
11180: ARRAY
11181: ST_TO_ADDR
// vlajka2 = createvehicle ;
11182: LD_ADDR_LOC 17
11186: PUSH
11187: CALL_OW 45
11191: ST_TO_ADDR
// placeunitxy ( vlajka2 , 143 , 60 , false ) ;
11192: LD_LOC 17
11196: PPUSH
11197: LD_INT 143
11199: PPUSH
11200: LD_INT 60
11202: PPUSH
11203: LD_INT 0
11205: PPUSH
11206: CALL_OW 48
// case mp_sides_positions_ [ your_side ] of 1 :
11210: LD_EXP 50
11214: PUSH
11215: LD_OWVAR 2
11219: ARRAY
11220: PUSH
11221: LD_INT 1
11223: DOUBLE
11224: EQUAL
11225: IFTRUE 11229
11227: GO 11242
11229: POP
// centernowonxy ( 44 , 60 ) ; 2 :
11230: LD_INT 44
11232: PPUSH
11233: LD_INT 60
11235: PPUSH
11236: CALL_OW 86
11240: GO 11264
11242: LD_INT 2
11244: DOUBLE
11245: EQUAL
11246: IFTRUE 11250
11248: GO 11263
11250: POP
// centernowonxy ( 175 , 60 ) ; end ;
11251: LD_INT 175
11253: PPUSH
11254: LD_INT 60
11256: PPUSH
11257: CALL_OW 86
11261: GO 11264
11263: POP
// end ;
11264: LD_VAR 0 1
11268: RET
// function refresh ; var tmp , tmp1 , tmp2 , tmp3 , tmp4 ; begin
11269: LD_INT 0
11271: PPUSH
11272: PPUSH
11273: PPUSH
11274: PPUSH
11275: PPUSH
11276: PPUSH
// tmp = time div 60 ;
11277: LD_ADDR_VAR 0 2
11281: PUSH
11282: LD_LOC 13
11286: PUSH
11287: LD_INT 60
11289: DIV
11290: ST_TO_ADDR
// if tmp < 10 then
11291: LD_VAR 0 2
11295: PUSH
11296: LD_INT 10
11298: LESS
11299: IFFALSE 11317
// tmp1 = 0 & tmp else
11301: LD_ADDR_VAR 0 3
11305: PUSH
11306: LD_STRING 0
11308: PUSH
11309: LD_VAR 0 2
11313: STR
11314: ST_TO_ADDR
11315: GO 11331
// tmp1 =  & tmp ;
11317: LD_ADDR_VAR 0 3
11321: PUSH
11322: LD_STRING 
11324: PUSH
11325: LD_VAR 0 2
11329: STR
11330: ST_TO_ADDR
// tmp = time mod 60 ;
11331: LD_ADDR_VAR 0 2
11335: PUSH
11336: LD_LOC 13
11340: PUSH
11341: LD_INT 60
11343: MOD
11344: ST_TO_ADDR
// if tmp < 10 then
11345: LD_VAR 0 2
11349: PUSH
11350: LD_INT 10
11352: LESS
11353: IFFALSE 11371
// tmp2 = 0 & tmp else
11355: LD_ADDR_VAR 0 4
11359: PUSH
11360: LD_STRING 0
11362: PUSH
11363: LD_VAR 0 2
11367: STR
11368: ST_TO_ADDR
11369: GO 11385
// tmp2 =  & tmp ;
11371: LD_ADDR_VAR 0 4
11375: PUSH
11376: LD_STRING 
11378: PUSH
11379: LD_VAR 0 2
11383: STR
11384: ST_TO_ADDR
// if left_score < 10 then
11385: LD_LOC 22
11389: PUSH
11390: LD_INT 10
11392: LESS
11393: IFFALSE 11411
// tmp3 = 0 & left_score else
11395: LD_ADDR_VAR 0 5
11399: PUSH
11400: LD_STRING 0
11402: PUSH
11403: LD_LOC 22
11407: STR
11408: ST_TO_ADDR
11409: GO 11425
// tmp3 =  & left_score ;
11411: LD_ADDR_VAR 0 5
11415: PUSH
11416: LD_STRING 
11418: PUSH
11419: LD_LOC 22
11423: STR
11424: ST_TO_ADDR
// if right_score < 10 then
11425: LD_LOC 23
11429: PUSH
11430: LD_INT 10
11432: LESS
11433: IFFALSE 11451
// tmp4 = 0 & right_score else
11435: LD_ADDR_VAR 0 6
11439: PUSH
11440: LD_STRING 0
11442: PUSH
11443: LD_LOC 23
11447: STR
11448: ST_TO_ADDR
11449: GO 11465
// tmp4 =  & right_score ;
11451: LD_ADDR_VAR 0 6
11455: PUSH
11456: LD_STRING 
11458: PUSH
11459: LD_LOC 23
11463: STR
11464: ST_TO_ADDR
// display_strings = [ Score:  & tmp3 &  to  & tmp4 , Time left:  & tmp1 & : & tmp2 ] ;
11465: LD_ADDR_OWVAR 47
11469: PUSH
11470: LD_STRING Score: 
11472: PUSH
11473: LD_VAR 0 5
11477: STR
11478: PUSH
11479: LD_STRING  to 
11481: STR
11482: PUSH
11483: LD_VAR 0 6
11487: STR
11488: PUSH
11489: LD_STRING Time left: 
11491: PUSH
11492: LD_VAR 0 3
11496: STR
11497: PUSH
11498: LD_STRING :
11500: STR
11501: PUSH
11502: LD_VAR 0 4
11506: STR
11507: PUSH
11508: EMPTY
11509: LIST
11510: LIST
11511: ST_TO_ADDR
// end ;
11512: LD_VAR 0 1
11516: RET
// every 0 0$1 marked 03 do
11517: GO 11519
11519: DISABLE
// begin time = time - 1 ;
11520: LD_ADDR_LOC 13
11524: PUSH
11525: LD_LOC 13
11529: PUSH
11530: LD_INT 1
11532: MINUS
11533: ST_TO_ADDR
// refresh ;
11534: CALL 11269 0 0
// if not time then
11538: LD_LOC 13
11542: NOT
11543: IFFALSE 11609
// if mp_sides_positions_ [ your_side ] = 1 then
11545: LD_EXP 50
11549: PUSH
11550: LD_OWVAR 2
11554: ARRAY
11555: PUSH
11556: LD_INT 1
11558: EQUAL
11559: IFFALSE 11585
// if left_score >= right_score then
11561: LD_LOC 22
11565: PUSH
11566: LD_LOC 23
11570: GREATEREQUAL
11571: IFFALSE 11579
// youwininmultiplayer else
11573: CALL_OW 106
11577: GO 11583
// youlostinmultiplayer else
11579: CALL_OW 107
11583: GO 11607
// if right_score >= left_score then
11585: LD_LOC 23
11589: PUSH
11590: LD_LOC 22
11594: GREATEREQUAL
11595: IFFALSE 11603
// youwininmultiplayer else
11597: CALL_OW 106
11601: GO 11607
// youlostinmultiplayer else
11603: CALL_OW 107
11607: GO 11610
// enable ;
11609: ENABLE
// end ;
11610: END
// every 0 0$10 marked 19 do
11611: GO 11613
11613: DISABLE
// begin cper = cper - 0 0$10 ;
11614: LD_ADDR_EXP 40
11618: PUSH
11619: LD_EXP 40
11623: PUSH
11624: LD_INT 350
11626: MINUS
11627: ST_TO_ADDR
// if cper = 0 then
11628: LD_EXP 40
11632: PUSH
11633: LD_INT 0
11635: EQUAL
11636: IFFALSE 11674
// begin createcratesarea ( 5 , vlevoex , true ) ;
11638: LD_INT 5
11640: PPUSH
11641: LD_INT 5
11643: PPUSH
11644: LD_INT 1
11646: PPUSH
11647: CALL_OW 55
// createcratesarea ( 5 , vpravoex , true ) ;
11651: LD_INT 5
11653: PPUSH
11654: LD_INT 6
11656: PPUSH
11657: LD_INT 1
11659: PPUSH
11660: CALL_OW 55
// cper = cperiode ;
11664: LD_ADDR_EXP 40
11668: PUSH
11669: LD_EXP 41
11673: ST_TO_ADDR
// end ; enable ;
11674: ENABLE
// end ;
11675: END
// every 5 trigger getlives ( depot1 ) < 500 marked 01 do
11676: LD_LOC 14
11680: PPUSH
11681: CALL_OW 256
11685: PUSH
11686: LD_INT 500
11688: LESS
11689: IFFALSE 11707
11691: GO 11693
11693: DISABLE
// begin setlives ( depot1 , 750 ) ;
11694: LD_LOC 14
11698: PPUSH
11699: LD_INT 750
11701: PPUSH
11702: CALL_OW 234
// enable ;
11706: ENABLE
// end ;
11707: END
// every 5 trigger getlives ( depot2 ) < 500 marked 02 do
11708: LD_LOC 15
11712: PPUSH
11713: CALL_OW 256
11717: PUSH
11718: LD_INT 500
11720: LESS
11721: IFFALSE 11739
11723: GO 11725
11725: DISABLE
// begin setlives ( depot2 , 750 ) ;
11726: LD_LOC 15
11730: PPUSH
11731: LD_INT 750
11733: PPUSH
11734: CALL_OW 234
// enable ;
11738: ENABLE
// end ;
11739: END
// on unitdestroyed ( un ) do var radius ;
11740: LD_INT 0
11742: PPUSH
// begin if GetClass ( un ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
11743: LD_VAR 0 1
11747: PPUSH
11748: CALL_OW 257
11752: PUSH
11753: LD_INT 12
11755: PUSH
11756: LD_INT 15
11758: PUSH
11759: LD_INT 17
11761: PUSH
11762: LD_INT 16
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: IN
11771: PUSH
11772: LD_VAR 0 1
11776: PPUSH
11777: CALL_OW 263
11781: PUSH
11782: LD_INT 5
11784: EQUAL
11785: OR
11786: IFFALSE 11797
// ApeKilled ( un ) ;
11788: LD_VAR 0 1
11792: PPUSH
11793: CALL 8152 0 1
// if mp_game_type <> 1 then
11797: LD_OWVAR 6
11801: PUSH
11802: LD_INT 1
11804: NONEQUAL
11805: IFFALSE 11809
// exit ;
11807: GO 12103
// if un = vlajka1 then
11809: LD_VAR 0 1
11813: PUSH
11814: LD_LOC 16
11818: EQUAL
11819: IFFALSE 11957
// begin uc_side = pos2side ;
11821: LD_ADDR_OWVAR 20
11825: PUSH
11826: LD_EXP 45
11830: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos2side ] ;
11831: LD_ADDR_OWVAR 21
11835: PUSH
11836: LD_EXP 49
11840: PUSH
11841: LD_EXP 45
11845: ARRAY
11846: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11847: LD_ADDR_OWVAR 37
11851: PUSH
11852: LD_LOC 18
11856: PUSH
11857: LD_OWVAR 21
11861: ARRAY
11862: ST_TO_ADDR
// vc_control = control_manual ;
11863: LD_ADDR_OWVAR 38
11867: PUSH
11868: LD_INT 1
11870: ST_TO_ADDR
// vc_engine = engine_siberite ;
11871: LD_ADDR_OWVAR 39
11875: PUSH
11876: LD_INT 3
11878: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
11879: LD_ADDR_OWVAR 40
11883: PUSH
11884: LD_LOC 19
11888: PUSH
11889: LD_OWVAR 21
11893: ARRAY
11894: ST_TO_ADDR
// vlajka1 = createvehicle ;
11895: LD_ADDR_LOC 16
11899: PUSH
11900: CALL_OW 45
11904: ST_TO_ADDR
// radius = 2 ;
11905: LD_ADDR_VAR 0 2
11909: PUSH
11910: LD_INT 2
11912: ST_TO_ADDR
// while not placeunitxyr ( vlajka1 , 76 , 60 , radius , false ) do
11913: LD_LOC 16
11917: PPUSH
11918: LD_INT 76
11920: PPUSH
11921: LD_INT 60
11923: PPUSH
11924: LD_VAR 0 2
11928: PPUSH
11929: LD_INT 0
11931: PPUSH
11932: CALL_OW 50
11936: NOT
11937: IFFALSE 11955
// radius = radius + 1 ;
11939: LD_ADDR_VAR 0 2
11943: PUSH
11944: LD_VAR 0 2
11948: PUSH
11949: LD_INT 1
11951: PLUS
11952: ST_TO_ADDR
11953: GO 11913
// end else
11955: GO 12103
// if un = vlajka2 then
11957: LD_VAR 0 1
11961: PUSH
11962: LD_LOC 17
11966: EQUAL
11967: IFFALSE 12103
// begin uc_side = pos1side ;
11969: LD_ADDR_OWVAR 20
11973: PUSH
11974: LD_EXP 44
11978: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos1side ] ;
11979: LD_ADDR_OWVAR 21
11983: PUSH
11984: LD_EXP 49
11988: PUSH
11989: LD_EXP 44
11993: ARRAY
11994: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11995: LD_ADDR_OWVAR 37
11999: PUSH
12000: LD_LOC 18
12004: PUSH
12005: LD_OWVAR 21
12009: ARRAY
12010: ST_TO_ADDR
// vc_control = control_manual ;
12011: LD_ADDR_OWVAR 38
12015: PUSH
12016: LD_INT 1
12018: ST_TO_ADDR
// vc_engine = engine_siberite ;
12019: LD_ADDR_OWVAR 39
12023: PUSH
12024: LD_INT 3
12026: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
12027: LD_ADDR_OWVAR 40
12031: PUSH
12032: LD_LOC 19
12036: PUSH
12037: LD_OWVAR 21
12041: ARRAY
12042: ST_TO_ADDR
// vlajka2 = createvehicle ;
12043: LD_ADDR_LOC 17
12047: PUSH
12048: CALL_OW 45
12052: ST_TO_ADDR
// radius = 2 ;
12053: LD_ADDR_VAR 0 2
12057: PUSH
12058: LD_INT 2
12060: ST_TO_ADDR
// while not placeunitxyr ( vlajka2 , 143 , 60 , radius , false ) do
12061: LD_LOC 17
12065: PPUSH
12066: LD_INT 143
12068: PPUSH
12069: LD_INT 60
12071: PPUSH
12072: LD_VAR 0 2
12076: PPUSH
12077: LD_INT 0
12079: PPUSH
12080: CALL_OW 50
12084: NOT
12085: IFFALSE 12103
// radius = radius + 1 ;
12087: LD_ADDR_VAR 0 2
12091: PUSH
12092: LD_VAR 0 2
12096: PUSH
12097: LD_INT 1
12099: PLUS
12100: ST_TO_ADDR
12101: GO 12061
// end ; end ;
12103: PPOPN 2
12105: END
// on vehiclecaptured ( vehnew , vehold , origside , hum ) marked 05 do var radius ;
12106: LD_INT 0
12108: PPUSH
// if ( vehold = vlajka1 ) then
12109: LD_VAR 0 2
12113: PUSH
12114: LD_LOC 16
12118: EQUAL
12119: IFFALSE 12272
// begin vlajka1 = vehnew ;
12121: LD_ADDR_LOC 16
12125: PUSH
12126: LD_VAR 0 1
12130: ST_TO_ADDR
// comexitvehicle ( vlajka1 ) ;
12131: LD_LOC 16
12135: PPUSH
12136: CALL_OW 121
// while isdrivenby ( vlajka1 ) do
12140: LD_LOC 16
12144: PPUSH
12145: CALL_OW 311
12149: IFFALSE 12160
// wait ( 2 ) ;
12151: LD_INT 2
12153: PPUSH
12154: CALL_OW 67
12158: GO 12140
// if getdistunitxy ( vlajka1 , 76 , 60 ) > 4 then
12160: LD_LOC 16
12164: PPUSH
12165: LD_INT 76
12167: PPUSH
12168: LD_INT 60
12170: PPUSH
12171: CALL_OW 297
12175: PUSH
12176: LD_INT 4
12178: GREATER
12179: IFFALSE 12256
// begin removeunit ( vlajka1 ) ;
12181: LD_LOC 16
12185: PPUSH
12186: CALL_OW 64
// setside ( vlajka1 , origside ) ;
12190: LD_LOC 16
12194: PPUSH
12195: LD_VAR 0 3
12199: PPUSH
12200: CALL_OW 235
// radius = 2 ;
12204: LD_ADDR_VAR 0 5
12208: PUSH
12209: LD_INT 2
12211: ST_TO_ADDR
// while not placeunitxyr ( vlajka1 , 76 , 60 , radius , false ) do
12212: LD_LOC 16
12216: PPUSH
12217: LD_INT 76
12219: PPUSH
12220: LD_INT 60
12222: PPUSH
12223: LD_VAR 0 5
12227: PPUSH
12228: LD_INT 0
12230: PPUSH
12231: CALL_OW 50
12235: NOT
12236: IFFALSE 12254
// radius = radius + 1 ;
12238: LD_ADDR_VAR 0 5
12242: PUSH
12243: LD_VAR 0 5
12247: PUSH
12248: LD_INT 1
12250: PLUS
12251: ST_TO_ADDR
12252: GO 12212
// end else
12254: GO 12270
// setside ( vlajka1 , origside ) ;
12256: LD_LOC 16
12260: PPUSH
12261: LD_VAR 0 3
12265: PPUSH
12266: CALL_OW 235
// end else
12270: GO 12433
// if ( vehold = vlajka2 ) then
12272: LD_VAR 0 2
12276: PUSH
12277: LD_LOC 17
12281: EQUAL
12282: IFFALSE 12433
// begin vlajka2 = vehnew ;
12284: LD_ADDR_LOC 17
12288: PUSH
12289: LD_VAR 0 1
12293: ST_TO_ADDR
// comexitvehicle ( vlajka2 ) ;
12294: LD_LOC 17
12298: PPUSH
12299: CALL_OW 121
// while isdrivenby ( vlajka2 ) do
12303: LD_LOC 17
12307: PPUSH
12308: CALL_OW 311
12312: IFFALSE 12323
// wait ( 2 ) ;
12314: LD_INT 2
12316: PPUSH
12317: CALL_OW 67
12321: GO 12303
// if getdistunitxy ( vlajka2 , 143 , 60 ) > 4 then
12323: LD_LOC 17
12327: PPUSH
12328: LD_INT 143
12330: PPUSH
12331: LD_INT 60
12333: PPUSH
12334: CALL_OW 297
12338: PUSH
12339: LD_INT 4
12341: GREATER
12342: IFFALSE 12419
// begin removeunit ( vlajka2 ) ;
12344: LD_LOC 17
12348: PPUSH
12349: CALL_OW 64
// setside ( vlajka2 , origside ) ;
12353: LD_LOC 17
12357: PPUSH
12358: LD_VAR 0 3
12362: PPUSH
12363: CALL_OW 235
// radius = 2 ;
12367: LD_ADDR_VAR 0 5
12371: PUSH
12372: LD_INT 2
12374: ST_TO_ADDR
// while not placeunitxyr ( vlajka2 , 143 , 60 , radius , false ) do
12375: LD_LOC 17
12379: PPUSH
12380: LD_INT 143
12382: PPUSH
12383: LD_INT 60
12385: PPUSH
12386: LD_VAR 0 5
12390: PPUSH
12391: LD_INT 0
12393: PPUSH
12394: CALL_OW 50
12398: NOT
12399: IFFALSE 12417
// radius = radius + 1 ;
12401: LD_ADDR_VAR 0 5
12405: PUSH
12406: LD_VAR 0 5
12410: PUSH
12411: LD_INT 1
12413: PLUS
12414: ST_TO_ADDR
12415: GO 12375
// end else
12417: GO 12433
// setside ( vlajka2 , origside ) ;
12419: LD_LOC 17
12423: PPUSH
12424: LD_VAR 0 3
12428: PPUSH
12429: CALL_OW 235
// end ;
12433: PPOPN 5
12435: END
// every 10 + 1 trigger getdistunitxy ( vlajka1 , 185 , 60 ) < 6 marked 06 do var radius , tmp ;
12436: LD_LOC 16
12440: PPUSH
12441: LD_INT 185
12443: PPUSH
12444: LD_INT 60
12446: PPUSH
12447: CALL_OW 297
12451: PUSH
12452: LD_INT 6
12454: LESS
12455: IFFALSE 12659
12457: GO 12459
12459: DISABLE
12460: LD_INT 0
12462: PPUSH
12463: PPUSH
// begin right_score = right_score + 1 ;
12464: LD_ADDR_LOC 23
12468: PUSH
12469: LD_LOC 23
12473: PUSH
12474: LD_INT 1
12476: PLUS
12477: ST_TO_ADDR
// refresh ;
12478: CALL 11269 0 0
// comexitvehicle ( vlajka1 ) ;
12482: LD_LOC 16
12486: PPUSH
12487: CALL_OW 121
// while isdrivenby ( vlajka1 ) do
12491: LD_LOC 16
12495: PPUSH
12496: CALL_OW 311
12500: IFFALSE 12511
// wait ( 2 ) ;
12502: LD_INT 2
12504: PPUSH
12505: CALL_OW 67
12509: GO 12491
// removeunit ( vlajka1 ) ;
12511: LD_LOC 16
12515: PPUSH
12516: CALL_OW 64
// for radius in [ mat_cans , mat_oil , mat_siberit ] do
12520: LD_ADDR_VAR 0 1
12524: PUSH
12525: LD_INT 1
12527: PUSH
12528: LD_INT 2
12530: PUSH
12531: LD_INT 3
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: LIST
12538: PUSH
12539: FOR_IN
12540: IFFALSE 12606
// begin tmp = getcargo ( vlajka1 , radius ) ;
12542: LD_ADDR_VAR 0 2
12546: PUSH
12547: LD_LOC 16
12551: PPUSH
12552: LD_VAR 0 1
12556: PPUSH
12557: CALL_OW 289
12561: ST_TO_ADDR
// if tmp then
12562: LD_VAR 0 2
12566: IFFALSE 12604
// begin addresourcetype ( pos2base , radius , tmp ) ;
12568: LD_LOC 21
12572: PPUSH
12573: LD_VAR 0 1
12577: PPUSH
12578: LD_VAR 0 2
12582: PPUSH
12583: CALL_OW 276
// setcargo ( vlajka1 , radius , 0 ) ;
12587: LD_LOC 16
12591: PPUSH
12592: LD_VAR 0 1
12596: PPUSH
12597: LD_INT 0
12599: PPUSH
12600: CALL_OW 290
// end ; end ;
12604: GO 12539
12606: POP
12607: POP
// radius = 2 ;
12608: LD_ADDR_VAR 0 1
12612: PUSH
12613: LD_INT 2
12615: ST_TO_ADDR
// while not placeunitxyr ( vlajka1 , 76 , 60 , radius , false ) do
12616: LD_LOC 16
12620: PPUSH
12621: LD_INT 76
12623: PPUSH
12624: LD_INT 60
12626: PPUSH
12627: LD_VAR 0 1
12631: PPUSH
12632: LD_INT 0
12634: PPUSH
12635: CALL_OW 50
12639: NOT
12640: IFFALSE 12658
// radius = radius + 1 ;
12642: LD_ADDR_VAR 0 1
12646: PUSH
12647: LD_VAR 0 1
12651: PUSH
12652: LD_INT 1
12654: PLUS
12655: ST_TO_ADDR
12656: GO 12616
// enable ;
12658: ENABLE
// end ;
12659: PPOPN 2
12661: END
// every 10 trigger getdistunitxy ( vlajka2 , 34 , 60 ) < 6 marked 07 do var radius , tmp ;
12662: LD_LOC 17
12666: PPUSH
12667: LD_INT 34
12669: PPUSH
12670: LD_INT 60
12672: PPUSH
12673: CALL_OW 297
12677: PUSH
12678: LD_INT 6
12680: LESS
12681: IFFALSE 12885
12683: GO 12685
12685: DISABLE
12686: LD_INT 0
12688: PPUSH
12689: PPUSH
// begin left_score = left_score + 1 ;
12690: LD_ADDR_LOC 22
12694: PUSH
12695: LD_LOC 22
12699: PUSH
12700: LD_INT 1
12702: PLUS
12703: ST_TO_ADDR
// refresh ;
12704: CALL 11269 0 0
// comexitvehicle ( vlajka2 ) ;
12708: LD_LOC 17
12712: PPUSH
12713: CALL_OW 121
// while isdrivenby ( vlajka2 ) do
12717: LD_LOC 17
12721: PPUSH
12722: CALL_OW 311
12726: IFFALSE 12737
// wait ( 2 ) ;
12728: LD_INT 2
12730: PPUSH
12731: CALL_OW 67
12735: GO 12717
// removeunit ( vlajka2 ) ;
12737: LD_LOC 17
12741: PPUSH
12742: CALL_OW 64
// for radius in [ mat_cans , mat_oil , mat_siberit ] do
12746: LD_ADDR_VAR 0 1
12750: PUSH
12751: LD_INT 1
12753: PUSH
12754: LD_INT 2
12756: PUSH
12757: LD_INT 3
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: LIST
12764: PUSH
12765: FOR_IN
12766: IFFALSE 12832
// begin tmp = getcargo ( vlajka2 , radius ) ;
12768: LD_ADDR_VAR 0 2
12772: PUSH
12773: LD_LOC 17
12777: PPUSH
12778: LD_VAR 0 1
12782: PPUSH
12783: CALL_OW 289
12787: ST_TO_ADDR
// if tmp then
12788: LD_VAR 0 2
12792: IFFALSE 12830
// begin addresourcetype ( pos1base , radius , tmp ) ;
12794: LD_LOC 20
12798: PPUSH
12799: LD_VAR 0 1
12803: PPUSH
12804: LD_VAR 0 2
12808: PPUSH
12809: CALL_OW 276
// setcargo ( vlajka2 , radius , 0 ) ;
12813: LD_LOC 17
12817: PPUSH
12818: LD_VAR 0 1
12822: PPUSH
12823: LD_INT 0
12825: PPUSH
12826: CALL_OW 290
// end ; end ;
12830: GO 12765
12832: POP
12833: POP
// radius = 2 ;
12834: LD_ADDR_VAR 0 1
12838: PUSH
12839: LD_INT 2
12841: ST_TO_ADDR
// while not placeunitxyr ( vlajka2 , 143 , 60 , radius , false ) do
12842: LD_LOC 17
12846: PPUSH
12847: LD_INT 143
12849: PPUSH
12850: LD_INT 60
12852: PPUSH
12853: LD_VAR 0 1
12857: PPUSH
12858: LD_INT 0
12860: PPUSH
12861: CALL_OW 50
12865: NOT
12866: IFFALSE 12884
// radius = radius + 1 ;
12868: LD_ADDR_VAR 0 1
12872: PUSH
12873: LD_VAR 0 1
12877: PUSH
12878: LD_INT 1
12880: PLUS
12881: ST_TO_ADDR
12882: GO 12842
// enable ;
12884: ENABLE
// end ; end_of_file
12885: PPOPN 2
12887: END
// var zakladna , skilly , start_res , extra_oil , extra_sib , zakl_plus , batt_fl , sib_det , people_resp , siberitofka ; var fortpos , areasdiff , directions ; var resp_cnt1 , resp_cnt2 ; export function other_game ; var tmp , tmp2 , tmp3 , cl ; begin
12888: LD_INT 0
12890: PPUSH
12891: PPUSH
12892: PPUSH
12893: PPUSH
12894: PPUSH
// ctf = false ;
12895: LD_ADDR_EXP 47
12899: PUSH
12900: LD_INT 0
12902: ST_TO_ADDR
// resp_cnt1 = 0 ;
12903: LD_ADDR_LOC 47
12907: PUSH
12908: LD_INT 0
12910: ST_TO_ADDR
// resp_cnt2 = 0 ;
12911: LD_ADDR_LOC 48
12915: PUSH
12916: LD_INT 0
12918: ST_TO_ADDR
// enable ( nonctf_13 ) ;
12919: LD_EXP 55
12923: ENABLE_MARKED
// for tmp = 1 to 8 do
12924: LD_ADDR_VAR 0 2
12928: PUSH
12929: DOUBLE
12930: LD_INT 1
12932: DEC
12933: ST_TO_ADDR
12934: LD_INT 8
12936: PUSH
12937: FOR_TO
12938: IFFALSE 12999
// begin setrestrict ( b_depot , tmp , state_enabled ) ;
12940: LD_INT 0
12942: PPUSH
12943: LD_VAR 0 2
12947: PPUSH
12948: LD_INT 1
12950: PPUSH
12951: CALL_OW 324
// if sib_det then
12955: LD_LOC 41
12959: IFFALSE 12976
// settech ( tech_sibdet , tmp , state_researched ) ;
12961: LD_INT 20
12963: PPUSH
12964: LD_VAR 0 2
12968: PPUSH
12969: LD_INT 2
12971: PPUSH
12972: CALL_OW 322
// if siberitofka then
12976: LD_LOC 43
12980: IFFALSE 12997
// settech ( tech_sibfiss , tmp , state_enabled ) ;
12982: LD_INT 25
12984: PPUSH
12985: LD_VAR 0 2
12989: PPUSH
12990: LD_INT 1
12992: PPUSH
12993: CALL_OW 322
// end ;
12997: GO 12937
12999: POP
13000: POP
// if multiplayer then
13001: LD_OWVAR 4
13005: IFFALSE 13178
// begin zakladna = getmultiplayersetting ( 0 ) ;
13007: LD_ADDR_LOC 34
13011: PUSH
13012: LD_INT 0
13014: PPUSH
13015: CALL_OW 426
13019: ST_TO_ADDR
// lidi = getmultiplayersetting ( 1 ) ;
13020: LD_ADDR_EXP 37
13024: PUSH
13025: LD_INT 1
13027: PPUSH
13028: CALL_OW 426
13032: ST_TO_ADDR
// skilly = getmultiplayersetting ( 2 ) ;
13033: LD_ADDR_LOC 35
13037: PUSH
13038: LD_INT 2
13040: PPUSH
13041: CALL_OW 426
13045: ST_TO_ADDR
// start_res = getmultiplayersetting ( 3 ) ;
13046: LD_ADDR_LOC 36
13050: PUSH
13051: LD_INT 3
13053: PPUSH
13054: CALL_OW 426
13058: ST_TO_ADDR
// krabice = getmultiplayersetting ( 4 ) ;
13059: LD_ADDR_EXP 38
13063: PUSH
13064: LD_INT 4
13066: PPUSH
13067: CALL_OW 426
13071: ST_TO_ADDR
// extra_oil = getmultiplayersetting ( 5 ) ;
13072: LD_ADDR_LOC 37
13076: PUSH
13077: LD_INT 5
13079: PPUSH
13080: CALL_OW 426
13084: ST_TO_ADDR
// extra_sib = getmultiplayersetting ( 6 ) ;
13085: LD_ADDR_LOC 38
13089: PUSH
13090: LD_INT 6
13092: PPUSH
13093: CALL_OW 426
13097: ST_TO_ADDR
// zakl_plus = getmultiplayersetting ( 7 ) ;
13098: LD_ADDR_LOC 39
13102: PUSH
13103: LD_INT 7
13105: PPUSH
13106: CALL_OW 426
13110: ST_TO_ADDR
// batt_fl = getmultiplayersetting ( 11 ) ;
13111: LD_ADDR_LOC 40
13115: PUSH
13116: LD_INT 11
13118: PPUSH
13119: CALL_OW 426
13123: ST_TO_ADDR
// sib_det = getmultiplayersetting ( 12 ) ;
13124: LD_ADDR_LOC 41
13128: PUSH
13129: LD_INT 12
13131: PPUSH
13132: CALL_OW 426
13136: ST_TO_ADDR
// opoce = getmultiplayersetting ( 13 ) ;
13137: LD_ADDR_EXP 39
13141: PUSH
13142: LD_INT 13
13144: PPUSH
13145: CALL_OW 426
13149: ST_TO_ADDR
// people_resp = getmultiplayersetting ( 14 ) ;
13150: LD_ADDR_LOC 42
13154: PUSH
13155: LD_INT 14
13157: PPUSH
13158: CALL_OW 426
13162: ST_TO_ADDR
// siberitofka = getmultiplayersetting ( 15 ) ;
13163: LD_ADDR_LOC 43
13167: PUSH
13168: LD_INT 15
13170: PPUSH
13171: CALL_OW 426
13175: ST_TO_ADDR
// end else
13176: GO 13282
// begin zakladna = 1 ;
13178: LD_ADDR_LOC 34
13182: PUSH
13183: LD_INT 1
13185: ST_TO_ADDR
// lidi = 1 ;
13186: LD_ADDR_EXP 37
13190: PUSH
13191: LD_INT 1
13193: ST_TO_ADDR
// skilly = 1 ;
13194: LD_ADDR_LOC 35
13198: PUSH
13199: LD_INT 1
13201: ST_TO_ADDR
// start_res = 2 ;
13202: LD_ADDR_LOC 36
13206: PUSH
13207: LD_INT 2
13209: ST_TO_ADDR
// krabice = 1 ;
13210: LD_ADDR_EXP 38
13214: PUSH
13215: LD_INT 1
13217: ST_TO_ADDR
// extra_oil = 1 ;
13218: LD_ADDR_LOC 37
13222: PUSH
13223: LD_INT 1
13225: ST_TO_ADDR
// extra_sib = 1 ;
13226: LD_ADDR_LOC 38
13230: PUSH
13231: LD_INT 1
13233: ST_TO_ADDR
// zakl_plus = 2 ;
13234: LD_ADDR_LOC 39
13238: PUSH
13239: LD_INT 2
13241: ST_TO_ADDR
// batt_fl = 0 ;
13242: LD_ADDR_LOC 40
13246: PUSH
13247: LD_INT 0
13249: ST_TO_ADDR
// sib_det = 0 ;
13250: LD_ADDR_LOC 41
13254: PUSH
13255: LD_INT 0
13257: ST_TO_ADDR
// opoce = 3 ;
13258: LD_ADDR_EXP 39
13262: PUSH
13263: LD_INT 3
13265: ST_TO_ADDR
// people_resp = 0 ;
13266: LD_ADDR_LOC 42
13270: PUSH
13271: LD_INT 0
13273: ST_TO_ADDR
// siberitofka = 0 ;
13274: LD_ADDR_LOC 43
13278: PUSH
13279: LD_INT 0
13281: ST_TO_ADDR
// end ; if people_resp then
13282: LD_LOC 42
13286: IFFALSE 13303
// begin enable ( nonctf_10 ) ;
13288: LD_EXP 52
13292: ENABLE_MARKED
// enable ( nonctf_11 ) ;
13293: LD_EXP 53
13297: ENABLE_MARKED
// enable ( nonctf_12 ) ;
13298: LD_EXP 54
13302: ENABLE_MARKED
// end ; if people_resp = 1 then
13303: LD_LOC 42
13307: PUSH
13308: LD_INT 1
13310: EQUAL
13311: IFFALSE 13321
// people_resp = 3 ;
13313: LD_ADDR_LOC 42
13317: PUSH
13318: LD_INT 3
13320: ST_TO_ADDR
// if people_resp = 2 then
13321: LD_LOC 42
13325: PUSH
13326: LD_INT 2
13328: EQUAL
13329: IFFALSE 13339
// people_resp = 1 ;
13331: LD_ADDR_LOC 42
13335: PUSH
13336: LD_INT 1
13338: ST_TO_ADDR
// case lidi of 0 :
13339: LD_EXP 37
13343: PUSH
13344: LD_INT 0
13346: DOUBLE
13347: EQUAL
13348: IFTRUE 13352
13350: GO 13363
13352: POP
// lidi = 9 ; 1 :
13353: LD_ADDR_EXP 37
13357: PUSH
13358: LD_INT 9
13360: ST_TO_ADDR
13361: GO 13440
13363: LD_INT 1
13365: DOUBLE
13366: EQUAL
13367: IFTRUE 13371
13369: GO 13382
13371: POP
// lidi = 13 ; 2 :
13372: LD_ADDR_EXP 37
13376: PUSH
13377: LD_INT 13
13379: ST_TO_ADDR
13380: GO 13440
13382: LD_INT 2
13384: DOUBLE
13385: EQUAL
13386: IFTRUE 13390
13388: GO 13401
13390: POP
// lidi = 19 ; 3 :
13391: LD_ADDR_EXP 37
13395: PUSH
13396: LD_INT 19
13398: ST_TO_ADDR
13399: GO 13440
13401: LD_INT 3
13403: DOUBLE
13404: EQUAL
13405: IFTRUE 13409
13407: GO 13420
13409: POP
// lidi = 23 ; 4 :
13410: LD_ADDR_EXP 37
13414: PUSH
13415: LD_INT 23
13417: ST_TO_ADDR
13418: GO 13440
13420: LD_INT 4
13422: DOUBLE
13423: EQUAL
13424: IFTRUE 13428
13426: GO 13439
13428: POP
// lidi = 29 ; end ;
13429: LD_ADDR_EXP 37
13433: PUSH
13434: LD_INT 29
13436: ST_TO_ADDR
13437: GO 13440
13439: POP
// skilly = skilly + 1 ;
13440: LD_ADDR_LOC 35
13444: PUSH
13445: LD_LOC 35
13449: PUSH
13450: LD_INT 1
13452: PLUS
13453: ST_TO_ADDR
// case start_res of 0 :
13454: LD_LOC 36
13458: PUSH
13459: LD_INT 0
13461: DOUBLE
13462: EQUAL
13463: IFTRUE 13467
13465: GO 13478
13467: POP
// start_res = 0 ; 1 :
13468: LD_ADDR_LOC 36
13472: PUSH
13473: LD_INT 0
13475: ST_TO_ADDR
13476: GO 13536
13478: LD_INT 1
13480: DOUBLE
13481: EQUAL
13482: IFTRUE 13486
13484: GO 13497
13486: POP
// start_res = 50 ; 2 :
13487: LD_ADDR_LOC 36
13491: PUSH
13492: LD_INT 50
13494: ST_TO_ADDR
13495: GO 13536
13497: LD_INT 2
13499: DOUBLE
13500: EQUAL
13501: IFTRUE 13505
13503: GO 13516
13505: POP
// start_res = 100 ; 3 :
13506: LD_ADDR_LOC 36
13510: PUSH
13511: LD_INT 100
13513: ST_TO_ADDR
13514: GO 13536
13516: LD_INT 3
13518: DOUBLE
13519: EQUAL
13520: IFTRUE 13524
13522: GO 13535
13524: POP
// start_res = 200 ; end ;
13525: LD_ADDR_LOC 36
13529: PUSH
13530: LD_INT 200
13532: ST_TO_ADDR
13533: GO 13536
13535: POP
// case krabice of 0 :
13536: LD_EXP 38
13540: PUSH
13541: LD_INT 0
13543: DOUBLE
13544: EQUAL
13545: IFTRUE 13549
13547: GO 13560
13549: POP
// cperiode = 1 1$30 ; 1 :
13550: LD_ADDR_EXP 41
13554: PUSH
13555: LD_INT 3150
13557: ST_TO_ADDR
13558: GO 13599
13560: LD_INT 1
13562: DOUBLE
13563: EQUAL
13564: IFTRUE 13568
13566: GO 13579
13568: POP
// cperiode = 1 1$00 ; 2 :
13569: LD_ADDR_EXP 41
13573: PUSH
13574: LD_INT 2100
13576: ST_TO_ADDR
13577: GO 13599
13579: LD_INT 2
13581: DOUBLE
13582: EQUAL
13583: IFTRUE 13587
13585: GO 13598
13587: POP
// cperiode = 0 0$30 ; end ;
13588: LD_ADDR_EXP 41
13592: PUSH
13593: LD_INT 1050
13595: ST_TO_ADDR
13596: GO 13599
13598: POP
// case opoce of 0 :
13599: LD_EXP 39
13603: PUSH
13604: LD_INT 0
13606: DOUBLE
13607: EQUAL
13608: IFTRUE 13612
13610: GO 13623
13612: POP
// opoce = 0 ; 1 :
13613: LD_ADDR_EXP 39
13617: PUSH
13618: LD_INT 0
13620: ST_TO_ADDR
13621: GO 13738
13623: LD_INT 1
13625: DOUBLE
13626: EQUAL
13627: IFTRUE 13631
13629: GO 13642
13631: POP
// opoce = 3 ; 2 :
13632: LD_ADDR_EXP 39
13636: PUSH
13637: LD_INT 3
13639: ST_TO_ADDR
13640: GO 13738
13642: LD_INT 2
13644: DOUBLE
13645: EQUAL
13646: IFTRUE 13650
13648: GO 13661
13650: POP
// opoce = 7 ; 3 :
13651: LD_ADDR_EXP 39
13655: PUSH
13656: LD_INT 7
13658: ST_TO_ADDR
13659: GO 13738
13661: LD_INT 3
13663: DOUBLE
13664: EQUAL
13665: IFTRUE 13669
13667: GO 13680
13669: POP
// opoce = 11 ; 4 :
13670: LD_ADDR_EXP 39
13674: PUSH
13675: LD_INT 11
13677: ST_TO_ADDR
13678: GO 13738
13680: LD_INT 4
13682: DOUBLE
13683: EQUAL
13684: IFTRUE 13688
13686: GO 13699
13688: POP
// opoce = 15 ; 5 :
13689: LD_ADDR_EXP 39
13693: PUSH
13694: LD_INT 15
13696: ST_TO_ADDR
13697: GO 13738
13699: LD_INT 5
13701: DOUBLE
13702: EQUAL
13703: IFTRUE 13707
13705: GO 13718
13707: POP
// opoce = 19 ; 6 :
13708: LD_ADDR_EXP 39
13712: PUSH
13713: LD_INT 19
13715: ST_TO_ADDR
13716: GO 13738
13718: LD_INT 6
13720: DOUBLE
13721: EQUAL
13722: IFTRUE 13726
13724: GO 13737
13726: POP
// opoce = 23 ; end ;
13727: LD_ADDR_EXP 39
13731: PUSH
13732: LD_INT 23
13734: ST_TO_ADDR
13735: GO 13738
13737: POP
// fortpos = [ [ [ 46 , 53 , 4 ] , [ 51 , 62 , 4 ] ] , [ [ 167 , 53 , 1 ] , [ 173 , 64 , 1 ] ] ] ;
13738: LD_ADDR_LOC 44
13742: PUSH
13743: LD_INT 46
13745: PUSH
13746: LD_INT 53
13748: PUSH
13749: LD_INT 4
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: LIST
13756: PUSH
13757: LD_INT 51
13759: PUSH
13760: LD_INT 62
13762: PUSH
13763: LD_INT 4
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: LIST
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: PUSH
13775: LD_INT 167
13777: PUSH
13778: LD_INT 53
13780: PUSH
13781: LD_INT 1
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: LIST
13788: PUSH
13789: LD_INT 173
13791: PUSH
13792: LD_INT 64
13794: PUSH
13795: LD_INT 1
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: LIST
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: ST_TO_ADDR
// areasdiff = [ vlevodiff , vpravodiff ] ;
13811: LD_ADDR_LOC 45
13815: PUSH
13816: LD_INT 16
13818: PUSH
13819: LD_INT 17
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: ST_TO_ADDR
// directions = [ 4 , 1 ] ;
13826: LD_ADDR_LOC 46
13830: PUSH
13831: LD_INT 4
13833: PUSH
13834: LD_INT 1
13836: PUSH
13837: EMPTY
13838: LIST
13839: LIST
13840: ST_TO_ADDR
// for tmp = 1 to 8 do
13841: LD_ADDR_VAR 0 2
13845: PUSH
13846: DOUBLE
13847: LD_INT 1
13849: DEC
13850: ST_TO_ADDR
13851: LD_INT 8
13853: PUSH
13854: FOR_TO
13855: IFFALSE 15024
// if mp_sides_nations_ [ tmp ] then
13857: LD_EXP 49
13861: PUSH
13862: LD_VAR 0 2
13866: ARRAY
13867: IFFALSE 15022
// begin if mp_sides_positions_ [ tmp ] = 1 then
13869: LD_EXP 50
13873: PUSH
13874: LD_VAR 0 2
13878: ARRAY
13879: PUSH
13880: LD_INT 1
13882: EQUAL
13883: IFFALSE 13897
// pos1side = tmp else
13885: LD_ADDR_EXP 44
13889: PUSH
13890: LD_VAR 0 2
13894: ST_TO_ADDR
13895: GO 13907
// pos2side = tmp ;
13897: LD_ADDR_EXP 45
13901: PUSH
13902: LD_VAR 0 2
13906: ST_TO_ADDR
// uc_side = tmp ;
13907: LD_ADDR_OWVAR 20
13911: PUSH
13912: LD_VAR 0 2
13916: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ tmp ] ;
13917: LD_ADDR_OWVAR 21
13921: PUSH
13922: LD_EXP 49
13926: PUSH
13927: LD_VAR 0 2
13931: ARRAY
13932: ST_TO_ADDR
// bc_type = b_depot ;
13933: LD_ADDR_OWVAR 42
13937: PUSH
13938: LD_INT 0
13940: ST_TO_ADDR
// bc_level = 1 ;
13941: LD_ADDR_OWVAR 43
13945: PUSH
13946: LD_INT 1
13948: ST_TO_ADDR
// tmp2 = createandplacebuildingxyd ( depotpositions [ mp_sides_positions_ [ tmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 2 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 3 ] ) ;
13949: LD_ADDR_VAR 0 3
13953: PUSH
13954: LD_EXP 42
13958: PUSH
13959: LD_EXP 50
13963: PUSH
13964: LD_VAR 0 2
13968: ARRAY
13969: ARRAY
13970: PUSH
13971: LD_INT 1
13973: ARRAY
13974: PPUSH
13975: LD_EXP 42
13979: PUSH
13980: LD_EXP 50
13984: PUSH
13985: LD_VAR 0 2
13989: ARRAY
13990: ARRAY
13991: PUSH
13992: LD_INT 2
13994: ARRAY
13995: PPUSH
13996: LD_EXP 42
14000: PUSH
14001: LD_EXP 50
14005: PUSH
14006: LD_VAR 0 2
14010: ARRAY
14011: ARRAY
14012: PUSH
14013: LD_INT 3
14015: ARRAY
14016: PPUSH
14017: CALL_OW 47
14021: ST_TO_ADDR
// if batt_fl then
14022: LD_LOC 40
14026: IFFALSE 14136
// setbattleflag ( tmp , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 2 ] , [ [ bfo_defend_bonus_human , 80 ] , [ bfo_defend_bonus_vehicle , 40 ] , [ bfo_defend_bonus_building , 0 ] , [ bfo_range , 17 ] , [ bfo_height , 100 ] ] ) ;
14028: LD_VAR 0 2
14032: PPUSH
14033: LD_EXP 42
14037: PUSH
14038: LD_EXP 50
14042: PUSH
14043: LD_VAR 0 2
14047: ARRAY
14048: ARRAY
14049: PUSH
14050: LD_INT 1
14052: ARRAY
14053: PPUSH
14054: LD_EXP 42
14058: PUSH
14059: LD_EXP 50
14063: PUSH
14064: LD_VAR 0 2
14068: ARRAY
14069: ARRAY
14070: PUSH
14071: LD_INT 2
14073: ARRAY
14074: PPUSH
14075: LD_INT 1
14077: PUSH
14078: LD_INT 80
14080: PUSH
14081: EMPTY
14082: LIST
14083: LIST
14084: PUSH
14085: LD_INT 2
14087: PUSH
14088: LD_INT 40
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: PUSH
14095: LD_INT 3
14097: PUSH
14098: LD_INT 0
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: PUSH
14105: LD_INT 10
14107: PUSH
14108: LD_INT 17
14110: PUSH
14111: EMPTY
14112: LIST
14113: LIST
14114: PUSH
14115: LD_INT 20
14117: PUSH
14118: LD_INT 100
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: PPUSH
14132: CALL_OW 418
// if zakladna then
14136: LD_LOC 34
14140: IFFALSE 14308
// begin bc_type = b_breastwork ;
14142: LD_ADDR_OWVAR 42
14146: PUSH
14147: LD_INT 31
14149: ST_TO_ADDR
// createandplacebuildingxyd ( fortpos [ mp_sides_positions_ [ tmp ] ] [ 1 ] [ 1 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 1 ] [ 2 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 1 ] [ 3 ] ) ;
14150: LD_LOC 44
14154: PUSH
14155: LD_EXP 50
14159: PUSH
14160: LD_VAR 0 2
14164: ARRAY
14165: ARRAY
14166: PUSH
14167: LD_INT 1
14169: ARRAY
14170: PUSH
14171: LD_INT 1
14173: ARRAY
14174: PPUSH
14175: LD_LOC 44
14179: PUSH
14180: LD_EXP 50
14184: PUSH
14185: LD_VAR 0 2
14189: ARRAY
14190: ARRAY
14191: PUSH
14192: LD_INT 1
14194: ARRAY
14195: PUSH
14196: LD_INT 2
14198: ARRAY
14199: PPUSH
14200: LD_LOC 44
14204: PUSH
14205: LD_EXP 50
14209: PUSH
14210: LD_VAR 0 2
14214: ARRAY
14215: ARRAY
14216: PUSH
14217: LD_INT 1
14219: ARRAY
14220: PUSH
14221: LD_INT 3
14223: ARRAY
14224: PPUSH
14225: CALL_OW 47
// createandplacebuildingxyd ( fortpos [ mp_sides_positions_ [ tmp ] ] [ 2 ] [ 1 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 2 ] [ 2 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 2 ] [ 3 ] ) ;
14229: LD_LOC 44
14233: PUSH
14234: LD_EXP 50
14238: PUSH
14239: LD_VAR 0 2
14243: ARRAY
14244: ARRAY
14245: PUSH
14246: LD_INT 2
14248: ARRAY
14249: PUSH
14250: LD_INT 1
14252: ARRAY
14253: PPUSH
14254: LD_LOC 44
14258: PUSH
14259: LD_EXP 50
14263: PUSH
14264: LD_VAR 0 2
14268: ARRAY
14269: ARRAY
14270: PUSH
14271: LD_INT 2
14273: ARRAY
14274: PUSH
14275: LD_INT 2
14277: ARRAY
14278: PPUSH
14279: LD_LOC 44
14283: PUSH
14284: LD_EXP 50
14288: PUSH
14289: LD_VAR 0 2
14293: ARRAY
14294: ARRAY
14295: PUSH
14296: LD_INT 2
14298: ARRAY
14299: PUSH
14300: LD_INT 3
14302: ARRAY
14303: PPUSH
14304: CALL_OW 47
// end ; addresourcetype ( getbase ( tmp2 ) , mat_cans , start_res ) ;
14308: LD_VAR 0 3
14312: PPUSH
14313: CALL_OW 274
14317: PPUSH
14318: LD_INT 1
14320: PPUSH
14321: LD_LOC 36
14325: PPUSH
14326: CALL_OW 276
// if extra_oil then
14330: LD_LOC 37
14334: IFFALSE 14426
// begin tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14336: LD_ADDR_VAR 0 3
14340: PUSH
14341: LD_LOC 45
14345: PUSH
14346: LD_EXP 50
14350: PUSH
14351: LD_VAR 0 2
14355: ARRAY
14356: ARRAY
14357: PPUSH
14358: LD_INT 0
14360: PPUSH
14361: CALL_OW 16
14365: ST_TO_ADDR
// while not createdepositxy ( tmp2 [ 1 ] , tmp2 [ 2 ] , mat_oil ) do
14366: LD_VAR 0 3
14370: PUSH
14371: LD_INT 1
14373: ARRAY
14374: PPUSH
14375: LD_VAR 0 3
14379: PUSH
14380: LD_INT 2
14382: ARRAY
14383: PPUSH
14384: LD_INT 2
14386: PPUSH
14387: CALL_OW 62
14391: NOT
14392: IFFALSE 14426
// tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14394: LD_ADDR_VAR 0 3
14398: PUSH
14399: LD_LOC 45
14403: PUSH
14404: LD_EXP 50
14408: PUSH
14409: LD_VAR 0 2
14413: ARRAY
14414: ARRAY
14415: PPUSH
14416: LD_INT 0
14418: PPUSH
14419: CALL_OW 16
14423: ST_TO_ADDR
14424: GO 14366
// end ; if extra_sib then
14426: LD_LOC 38
14430: IFFALSE 14522
// begin tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14432: LD_ADDR_VAR 0 3
14436: PUSH
14437: LD_LOC 45
14441: PUSH
14442: LD_EXP 50
14446: PUSH
14447: LD_VAR 0 2
14451: ARRAY
14452: ARRAY
14453: PPUSH
14454: LD_INT 0
14456: PPUSH
14457: CALL_OW 16
14461: ST_TO_ADDR
// while not createdepositxy ( tmp2 [ 1 ] , tmp2 [ 2 ] , mat_siberit ) do
14462: LD_VAR 0 3
14466: PUSH
14467: LD_INT 1
14469: ARRAY
14470: PPUSH
14471: LD_VAR 0 3
14475: PUSH
14476: LD_INT 2
14478: ARRAY
14479: PPUSH
14480: LD_INT 3
14482: PPUSH
14483: CALL_OW 62
14487: NOT
14488: IFFALSE 14522
// tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14490: LD_ADDR_VAR 0 3
14494: PUSH
14495: LD_LOC 45
14499: PUSH
14500: LD_EXP 50
14504: PUSH
14505: LD_VAR 0 2
14509: ARRAY
14510: ARRAY
14511: PPUSH
14512: LD_INT 0
14514: PPUSH
14515: CALL_OW 16
14519: ST_TO_ADDR
14520: GO 14462
// end ; if zakl_plus > 0 then
14522: LD_LOC 39
14526: PUSH
14527: LD_INT 0
14529: GREATER
14530: IFFALSE 14790
// begin bc_type = b_lab ;
14532: LD_ADDR_OWVAR 42
14536: PUSH
14537: LD_INT 6
14539: ST_TO_ADDR
// uc_direction = directions [ mp_sides_positions_ [ tmp ] ] ;
14540: LD_ADDR_OWVAR 24
14544: PUSH
14545: LD_LOC 46
14549: PUSH
14550: LD_EXP 50
14554: PUSH
14555: LD_VAR 0 2
14559: ARRAY
14560: ARRAY
14561: ST_TO_ADDR
// tmp3 = createbuilding ;
14562: LD_ADDR_VAR 0 4
14566: PUSH
14567: CALL_OW 46
14571: ST_TO_ADDR
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14572: LD_ADDR_VAR 0 3
14576: PUSH
14577: LD_EXP 43
14581: PUSH
14582: LD_EXP 50
14586: PUSH
14587: LD_VAR 0 2
14591: ARRAY
14592: ARRAY
14593: PPUSH
14594: LD_INT 0
14596: PPUSH
14597: CALL_OW 16
14601: ST_TO_ADDR
// while not placeunitxy ( tmp3 , tmp2 [ 1 ] , tmp2 [ 2 ] , false ) do
14602: LD_VAR 0 4
14606: PPUSH
14607: LD_VAR 0 3
14611: PUSH
14612: LD_INT 1
14614: ARRAY
14615: PPUSH
14616: LD_VAR 0 3
14620: PUSH
14621: LD_INT 2
14623: ARRAY
14624: PPUSH
14625: LD_INT 0
14627: PPUSH
14628: CALL_OW 48
14632: NOT
14633: IFFALSE 14667
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14635: LD_ADDR_VAR 0 3
14639: PUSH
14640: LD_EXP 43
14644: PUSH
14645: LD_EXP 50
14649: PUSH
14650: LD_VAR 0 2
14654: ARRAY
14655: ARRAY
14656: PPUSH
14657: LD_INT 0
14659: PPUSH
14660: CALL_OW 16
14664: ST_TO_ADDR
14665: GO 14602
// if zakl_plus > 1 then
14667: LD_LOC 39
14671: PUSH
14672: LD_INT 1
14674: GREATER
14675: IFFALSE 14790
// begin bc_type = b_workshop ;
14677: LD_ADDR_OWVAR 42
14681: PUSH
14682: LD_INT 2
14684: ST_TO_ADDR
// tmp3 = createbuilding ;
14685: LD_ADDR_VAR 0 4
14689: PUSH
14690: CALL_OW 46
14694: ST_TO_ADDR
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14695: LD_ADDR_VAR 0 3
14699: PUSH
14700: LD_EXP 43
14704: PUSH
14705: LD_EXP 50
14709: PUSH
14710: LD_VAR 0 2
14714: ARRAY
14715: ARRAY
14716: PPUSH
14717: LD_INT 0
14719: PPUSH
14720: CALL_OW 16
14724: ST_TO_ADDR
// while not placeunitxy ( tmp3 , tmp2 [ 1 ] , tmp2 [ 2 ] , false ) do
14725: LD_VAR 0 4
14729: PPUSH
14730: LD_VAR 0 3
14734: PUSH
14735: LD_INT 1
14737: ARRAY
14738: PPUSH
14739: LD_VAR 0 3
14743: PUSH
14744: LD_INT 2
14746: ARRAY
14747: PPUSH
14748: LD_INT 0
14750: PPUSH
14751: CALL_OW 48
14755: NOT
14756: IFFALSE 14790
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14758: LD_ADDR_VAR 0 3
14762: PUSH
14763: LD_EXP 43
14767: PUSH
14768: LD_EXP 50
14772: PUSH
14773: LD_VAR 0 2
14777: ARRAY
14778: ARRAY
14779: PPUSH
14780: LD_INT 0
14782: PPUSH
14783: CALL_OW 16
14787: ST_TO_ADDR
14788: GO 14725
// end ; end ; if batt_fl then
14790: LD_LOC 40
14794: IFFALSE 14904
// setbattleflag ( tmp , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 2 ] , [ [ bfo_defend_bonus_human , 80 ] , [ bfo_defend_bonus_vehicle , 40 ] , [ bfo_defend_bonus_building , 0 ] , [ bfo_range , 17 ] , [ bfo_height , 100 ] ] ) ;
14796: LD_VAR 0 2
14800: PPUSH
14801: LD_EXP 42
14805: PUSH
14806: LD_EXP 50
14810: PUSH
14811: LD_VAR 0 2
14815: ARRAY
14816: ARRAY
14817: PUSH
14818: LD_INT 1
14820: ARRAY
14821: PPUSH
14822: LD_EXP 42
14826: PUSH
14827: LD_EXP 50
14831: PUSH
14832: LD_VAR 0 2
14836: ARRAY
14837: ARRAY
14838: PUSH
14839: LD_INT 2
14841: ARRAY
14842: PPUSH
14843: LD_INT 1
14845: PUSH
14846: LD_INT 80
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: PUSH
14853: LD_INT 2
14855: PUSH
14856: LD_INT 40
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: PUSH
14863: LD_INT 3
14865: PUSH
14866: LD_INT 0
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: PUSH
14873: LD_INT 10
14875: PUSH
14876: LD_INT 17
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: PUSH
14883: LD_INT 20
14885: PUSH
14886: LD_INT 100
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: PPUSH
14900: CALL_OW 418
// cl = class_scientistic ;
14904: LD_ADDR_VAR 0 5
14908: PUSH
14909: LD_INT 4
14911: ST_TO_ADDR
// for tmp2 = 1 to lidi do
14912: LD_ADDR_VAR 0 3
14916: PUSH
14917: DOUBLE
14918: LD_INT 1
14920: DEC
14921: ST_TO_ADDR
14922: LD_EXP 37
14926: PUSH
14927: FOR_TO
14928: IFFALSE 15020
// begin if tmp2 >= lidi / 2 then
14930: LD_VAR 0 3
14934: PUSH
14935: LD_EXP 37
14939: PUSH
14940: LD_INT 2
14942: DIVREAL
14943: GREATEREQUAL
14944: IFFALSE 14954
// cl = class_soldier ;
14946: LD_ADDR_VAR 0 5
14950: PUSH
14951: LD_INT 1
14953: ST_TO_ADDR
// preparehuman ( 0 , cl , skilly ) ;
14954: LD_INT 0
14956: PPUSH
14957: LD_VAR 0 5
14961: PPUSH
14962: LD_LOC 35
14966: PPUSH
14967: CALL_OW 380
// if tmp2 = 1 then
14971: LD_VAR 0 3
14975: PUSH
14976: LD_INT 1
14978: EQUAL
14979: IFFALSE 14989
// cl = class_engineer ;
14981: LD_ADDR_VAR 0 5
14985: PUSH
14986: LD_INT 2
14988: ST_TO_ADDR
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14989: CALL_OW 44
14993: PPUSH
14994: LD_EXP 43
14998: PUSH
14999: LD_EXP 50
15003: PUSH
15004: LD_VAR 0 2
15008: ARRAY
15009: ARRAY
15010: PPUSH
15011: LD_INT 0
15013: PPUSH
15014: CALL_OW 49
// end ;
15018: GO 14927
15020: POP
15021: POP
// end ;
15022: GO 13854
15024: POP
15025: POP
// uc_side = 0 ;
15026: LD_ADDR_OWVAR 20
15030: PUSH
15031: LD_INT 0
15033: ST_TO_ADDR
// uc_nation = nation_nature ;
15034: LD_ADDR_OWVAR 21
15038: PUSH
15039: LD_INT 0
15041: ST_TO_ADDR
// for tmp = 1 to opoce do
15042: LD_ADDR_VAR 0 2
15046: PUSH
15047: DOUBLE
15048: LD_INT 1
15050: DEC
15051: ST_TO_ADDR
15052: LD_EXP 39
15056: PUSH
15057: FOR_TO
15058: IFFALSE 15090
// begin preparehuman ( 0 , class_apeman , 0 ) ;
15060: LD_INT 0
15062: PPUSH
15063: LD_INT 12
15065: PPUSH
15066: LD_INT 0
15068: PPUSH
15069: CALL_OW 380
// placeunitarea ( createhuman , les , false ) ;
15073: CALL_OW 44
15077: PPUSH
15078: LD_INT 4
15080: PPUSH
15081: LD_INT 0
15083: PPUSH
15084: CALL_OW 49
// end ;
15088: GO 15057
15090: POP
15091: POP
// case mp_sides_positions_ [ your_side ] of 1 :
15092: LD_EXP 50
15096: PUSH
15097: LD_OWVAR 2
15101: ARRAY
15102: PUSH
15103: LD_INT 1
15105: DOUBLE
15106: EQUAL
15107: IFTRUE 15111
15109: GO 15124
15111: POP
// centernowonxy ( 44 , 60 ) ; 2 :
15112: LD_INT 44
15114: PPUSH
15115: LD_INT 60
15117: PPUSH
15118: CALL_OW 86
15122: GO 15146
15124: LD_INT 2
15126: DOUBLE
15127: EQUAL
15128: IFTRUE 15132
15130: GO 15145
15132: POP
// centernowonxy ( 175 , 60 ) ; end ;
15133: LD_INT 175
15135: PPUSH
15136: LD_INT 60
15138: PPUSH
15139: CALL_OW 86
15143: GO 15146
15145: POP
// end ;
15146: LD_VAR 0 1
15150: RET
// on humandestroyed ( un , side , nat , x , y , dir , sex , cl ) marked 10 do if mp_sides_positions_ [ side ] = 1 then
15151: LD_EXP 50
15155: PUSH
15156: LD_VAR 0 2
15160: ARRAY
15161: PUSH
15162: LD_INT 1
15164: EQUAL
15165: IFFALSE 15183
// resp_cnt1 = resp_cnt1 + 1 else
15167: LD_ADDR_LOC 47
15171: PUSH
15172: LD_LOC 47
15176: PUSH
15177: LD_INT 1
15179: PLUS
15180: ST_TO_ADDR
15181: GO 15197
// resp_cnt2 = resp_cnt2 + 1 ;
15183: LD_ADDR_LOC 48
15187: PUSH
15188: LD_LOC 48
15192: PUSH
15193: LD_INT 1
15195: PLUS
15196: ST_TO_ADDR
15197: PPOPN 8
15199: END
// every 0 0$30 trigger resp_cnt1 >= people_resp marked 11 do
15200: LD_LOC 47
15204: PUSH
15205: LD_LOC 42
15209: GREATEREQUAL
15210: IFFALSE 15363
15212: GO 15214
15214: DISABLE
// begin resp_cnt1 = resp_cnt1 - people_resp ;
15215: LD_ADDR_LOC 47
15219: PUSH
15220: LD_LOC 47
15224: PUSH
15225: LD_LOC 42
15229: MINUS
15230: ST_TO_ADDR
// if not filterallunits ( [ [ f_side , pos1side ] , [ f_or , [ f_btype , b_depot ] , [ f_class , class_engineer ] ] ] ) then
15231: LD_INT 22
15233: PUSH
15234: LD_EXP 44
15238: PUSH
15239: EMPTY
15240: LIST
15241: LIST
15242: PUSH
15243: LD_INT 2
15245: PUSH
15246: LD_INT 30
15248: PUSH
15249: LD_INT 0
15251: PUSH
15252: EMPTY
15253: LIST
15254: LIST
15255: PUSH
15256: LD_INT 25
15258: PUSH
15259: LD_INT 2
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: LIST
15270: PUSH
15271: EMPTY
15272: LIST
15273: LIST
15274: PPUSH
15275: CALL_OW 69
15279: NOT
15280: IFFALSE 15285
// begin enable ;
15282: ENABLE
// exit ;
15283: GO 15363
// end ; uc_side = pos1side ;
15285: LD_ADDR_OWVAR 20
15289: PUSH
15290: LD_EXP 44
15294: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos1side ] ;
15295: LD_ADDR_OWVAR 21
15299: PUSH
15300: LD_EXP 49
15304: PUSH
15305: LD_EXP 44
15309: ARRAY
15310: ST_TO_ADDR
// preparehuman ( 0 , class_soldier , skilly ) ;
15311: LD_INT 0
15313: PPUSH
15314: LD_INT 1
15316: PPUSH
15317: LD_LOC 35
15321: PPUSH
15322: CALL_OW 380
// wait ( 0 0$10 ) ;
15326: LD_INT 350
15328: PPUSH
15329: CALL_OW 67
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ pos1side ] ] , true ) ;
15333: CALL_OW 44
15337: PPUSH
15338: LD_EXP 43
15342: PUSH
15343: LD_EXP 50
15347: PUSH
15348: LD_EXP 44
15352: ARRAY
15353: ARRAY
15354: PPUSH
15355: LD_INT 1
15357: PPUSH
15358: CALL_OW 49
// enable ;
15362: ENABLE
// end ;
15363: END
// every 0 0$30 trigger resp_cnt2 >= people_resp marked 12 do
15364: LD_LOC 48
15368: PUSH
15369: LD_LOC 42
15373: GREATEREQUAL
15374: IFFALSE 15527
15376: GO 15378
15378: DISABLE
// begin resp_cnt2 = resp_cnt2 - people_resp ;
15379: LD_ADDR_LOC 48
15383: PUSH
15384: LD_LOC 48
15388: PUSH
15389: LD_LOC 42
15393: MINUS
15394: ST_TO_ADDR
// if not filterallunits ( [ [ f_side , pos2side ] , [ f_or , [ f_btype , b_depot ] , [ f_class , class_engineer ] ] ] ) then
15395: LD_INT 22
15397: PUSH
15398: LD_EXP 45
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: PUSH
15407: LD_INT 2
15409: PUSH
15410: LD_INT 30
15412: PUSH
15413: LD_INT 0
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: PUSH
15420: LD_INT 25
15422: PUSH
15423: LD_INT 2
15425: PUSH
15426: EMPTY
15427: LIST
15428: LIST
15429: PUSH
15430: EMPTY
15431: LIST
15432: LIST
15433: LIST
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: PPUSH
15439: CALL_OW 69
15443: NOT
15444: IFFALSE 15449
// begin enable ;
15446: ENABLE
// exit ;
15447: GO 15527
// end ; uc_side = pos2side ;
15449: LD_ADDR_OWVAR 20
15453: PUSH
15454: LD_EXP 45
15458: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos2side ] ;
15459: LD_ADDR_OWVAR 21
15463: PUSH
15464: LD_EXP 49
15468: PUSH
15469: LD_EXP 45
15473: ARRAY
15474: ST_TO_ADDR
// preparehuman ( 0 , class_soldier , skilly ) ;
15475: LD_INT 0
15477: PPUSH
15478: LD_INT 1
15480: PPUSH
15481: LD_LOC 35
15485: PPUSH
15486: CALL_OW 380
// wait ( 0 0$10 ) ;
15490: LD_INT 350
15492: PPUSH
15493: CALL_OW 67
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ pos2side ] ] , true ) ;
15497: CALL_OW 44
15501: PPUSH
15502: LD_EXP 43
15506: PUSH
15507: LD_EXP 50
15511: PUSH
15512: LD_EXP 45
15516: ARRAY
15517: ARRAY
15518: PPUSH
15519: LD_INT 1
15521: PPUSH
15522: CALL_OW 49
// enable ;
15526: ENABLE
// end ;
15527: END
// every 0 0$1 marked 13 do
15528: GO 15530
15530: DISABLE
// begin if not filterallunits ( [ [ f_side , pos1side ] , [ f_type , unit_human ] ] ) then
15531: LD_INT 22
15533: PUSH
15534: LD_EXP 44
15538: PUSH
15539: EMPTY
15540: LIST
15541: LIST
15542: PUSH
15543: LD_INT 21
15545: PUSH
15546: LD_INT 1
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: PUSH
15553: EMPTY
15554: LIST
15555: LIST
15556: PPUSH
15557: CALL_OW 69
15561: NOT
15562: IFFALSE 15586
// if pos1side = your_side then
15564: LD_EXP 44
15568: PUSH
15569: LD_OWVAR 2
15573: EQUAL
15574: IFFALSE 15582
// youlostinmultiplayer else
15576: CALL_OW 107
15580: GO 15586
// youwininmultiplayer ;
15582: CALL_OW 106
// if not filterallunits ( [ [ f_side , pos2side ] , [ f_type , unit_human ] ] ) then
15586: LD_INT 22
15588: PUSH
15589: LD_EXP 45
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: PUSH
15598: LD_INT 21
15600: PUSH
15601: LD_INT 1
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: PPUSH
15612: CALL_OW 69
15616: NOT
15617: IFFALSE 15641
// if pos2side = your_side then
15619: LD_EXP 45
15623: PUSH
15624: LD_OWVAR 2
15628: EQUAL
15629: IFFALSE 15637
// youlostinmultiplayer else
15631: CALL_OW 107
15635: GO 15641
// youwininmultiplayer ;
15637: CALL_OW 106
// end ; end_of_file
15641: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
15642: LD_INT 0
15644: PPUSH
15645: PPUSH
// for un in battle_flags_id do
15646: LD_ADDR_VAR 0 2
15650: PUSH
15651: LD_EXP 29
15655: PUSH
15656: FOR_IN
15657: IFFALSE 15732
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
15659: LD_VAR 0 2
15663: PPUSH
15664: LD_INT 1
15666: PUSH
15667: LD_LOC 49
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: PUSH
15676: LD_INT 2
15678: PUSH
15679: LD_LOC 49
15683: PUSH
15684: LD_INT 2
15686: DIV
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: PUSH
15692: LD_INT 3
15694: PUSH
15695: LD_LOC 49
15699: PUSH
15700: LD_INT 5
15702: DIV
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: PUSH
15708: LD_INT 20
15710: PUSH
15711: LD_LOC 49
15715: PUSH
15716: EMPTY
15717: LIST
15718: LIST
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: PPUSH
15726: CALL_OW 423
15730: GO 15656
15732: POP
15733: POP
// end ;
15734: LD_VAR 0 1
15738: RET
// every 0 0$0.1 marked 55 do var un ;
15739: GO 15741
15741: DISABLE
15742: LD_INT 0
15744: PPUSH
// begin if not def_morale_flags then
15745: LD_EXP 66
15749: NOT
15750: IFFALSE 15754
// exit ;
15752: GO 15831
// if not morale_decreasing_time then
15754: LD_EXP 11
15758: NOT
15759: IFFALSE 15763
// exit ;
15761: GO 15831
// strength = 100 ;
15763: LD_ADDR_LOC 49
15767: PUSH
15768: LD_INT 100
15770: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
15771: LD_EXP 11
15775: PPUSH
15776: CALL_OW 67
// strength := strength - 1 ;
15780: LD_ADDR_LOC 49
15784: PUSH
15785: LD_LOC 49
15789: PUSH
15790: LD_INT 1
15792: MINUS
15793: ST_TO_ADDR
// Update_Flags ;
15794: CALL 15642 0 0
// until not strength ;
15798: LD_LOC 49
15802: NOT
15803: IFFALSE 15771
// for un in battle_flags_id do
15805: LD_ADDR_VAR 0 1
15809: PUSH
15810: LD_EXP 29
15814: PUSH
15815: FOR_IN
15816: IFFALSE 15829
// KillBattleFlag ( un ) ;
15818: LD_VAR 0 1
15822: PPUSH
15823: CALL_OW 419
15827: GO 15815
15829: POP
15830: POP
// end ; end_of_file
15831: PPOPN 1
15833: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
15834: LD_INT 0
15836: PPUSH
15837: PPUSH
// if ( not IAmSpec ) then
15838: CALL_OW 531
15842: NOT
15843: IFFALSE 15859
// Result := Limits_Info ^  ;
15845: LD_ADDR_VAR 0 1
15849: PUSH
15850: LD_LOC 61
15854: PUSH
15855: LD_STRING 
15857: ADD
15858: ST_TO_ADDR
// for i := 1 to 8 do
15859: LD_ADDR_VAR 0 2
15863: PUSH
15864: DOUBLE
15865: LD_INT 1
15867: DEC
15868: ST_TO_ADDR
15869: LD_INT 8
15871: PUSH
15872: FOR_TO
15873: IFFALSE 15918
// if Cheaters [ i ] then
15875: LD_LOC 62
15879: PUSH
15880: LD_VAR 0 2
15884: ARRAY
15885: IFFALSE 15916
// Result := Result ^ [ #Cheater , i , i ] ;
15887: LD_ADDR_VAR 0 1
15891: PUSH
15892: LD_VAR 0 1
15896: PUSH
15897: LD_STRING #Cheater
15899: PUSH
15900: LD_VAR 0 2
15904: PUSH
15905: LD_VAR 0 2
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: LIST
15914: ADD
15915: ST_TO_ADDR
15916: GO 15872
15918: POP
15919: POP
// end ;
15920: LD_VAR 0 1
15924: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
15925: LD_INT 0
15927: PPUSH
15928: PPUSH
15929: PPUSH
15930: PPUSH
15931: PPUSH
// case Game_Type of 10 :
15932: LD_EXP 56
15936: PUSH
15937: LD_INT 10
15939: DOUBLE
15940: EQUAL
15941: IFTRUE 15945
15943: GO 15956
15945: POP
// def_game_rules := 1 ; 11 :
15946: LD_ADDR_EXP 57
15950: PUSH
15951: LD_INT 1
15953: ST_TO_ADDR
15954: GO 15976
15956: LD_INT 11
15958: DOUBLE
15959: EQUAL
15960: IFTRUE 15964
15962: GO 15975
15964: POP
// def_game_rules := 3 ; end ;
15965: LD_ADDR_EXP 57
15969: PUSH
15970: LD_INT 3
15972: ST_TO_ADDR
15973: GO 15976
15975: POP
// case def_game_rules of 0 :
15976: LD_EXP 57
15980: PUSH
15981: LD_INT 0
15983: DOUBLE
15984: EQUAL
15985: IFTRUE 15989
15987: GO 15994
15989: POP
// exit ; 1 :
15990: GO 18052
15992: GO 17952
15994: LD_INT 1
15996: DOUBLE
15997: EQUAL
15998: IFTRUE 16002
16000: GO 16218
16002: POP
// begin def_base_level := 2 ;
16003: LD_ADDR_EXP 58
16007: PUSH
16008: LD_INT 2
16010: ST_TO_ADDR
// def_amount_of_people := 2 ;
16011: LD_ADDR_EXP 59
16015: PUSH
16016: LD_INT 2
16018: ST_TO_ADDR
// def_skill_level := 1 ;
16019: LD_ADDR_EXP 60
16023: PUSH
16024: LD_INT 1
16026: ST_TO_ADDR
// def_starting_resources := 2 ;
16027: LD_ADDR_EXP 61
16031: PUSH
16032: LD_INT 2
16034: ST_TO_ADDR
// def_shipments_density := 1 ;
16035: LD_ADDR_EXP 62
16039: PUSH
16040: LD_INT 1
16042: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
16043: LD_ADDR_EXP 63
16047: PUSH
16048: LD_INT 0
16050: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
16051: LD_ADDR_EXP 64
16055: PUSH
16056: LD_INT 1
16058: ST_TO_ADDR
// def_shared_vision := 1 ;
16059: LD_ADDR_EXP 65
16063: PUSH
16064: LD_INT 1
16066: ST_TO_ADDR
// def_morale_flags := 3 ;
16067: LD_ADDR_EXP 66
16071: PUSH
16072: LD_INT 3
16074: ST_TO_ADDR
// def_siberite_detection := 1 ;
16075: LD_ADDR_EXP 67
16079: PUSH
16080: LD_INT 1
16082: ST_TO_ADDR
// def_people_respawning := 1 ;
16083: LD_ADDR_EXP 68
16087: PUSH
16088: LD_INT 1
16090: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
16091: LD_ADDR_EXP 69
16095: PUSH
16096: LD_INT 1
16098: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16099: LD_ADDR_EXP 70
16103: PUSH
16104: LD_INT 0
16106: ST_TO_ADDR
// def_builduptime := 2 ;
16107: LD_ADDR_EXP 71
16111: PUSH
16112: LD_INT 2
16114: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
16115: LD_ADDR_VAR 0 2
16119: PUSH
16120: EMPTY
16121: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
16122: LD_ADDR_VAR 0 3
16126: PUSH
16127: EMPTY
16128: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16129: LD_ADDR_LOC 56
16133: PUSH
16134: EMPTY
16135: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16136: LD_ADDR_LOC 57
16140: PUSH
16141: EMPTY
16142: ST_TO_ADDR
// Banned_Controls := [ ] ;
16143: LD_ADDR_LOC 58
16147: PUSH
16148: EMPTY
16149: ST_TO_ADDR
// Banned_Engines := [ ] ;
16150: LD_ADDR_LOC 59
16154: PUSH
16155: EMPTY
16156: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
16157: LD_ADDR_LOC 54
16161: PUSH
16162: LD_INT 37
16164: PUSH
16165: EMPTY
16166: LIST
16167: PUSH
16168: LD_INT 4
16170: PUSH
16171: LD_INT 5
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PUSH
16178: LD_INT 31
16180: PUSH
16181: LD_INT 32
16183: PUSH
16184: LD_INT 33
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: LIST
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: LIST
16196: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
16197: LD_ADDR_LOC 55
16201: PUSH
16202: LD_INT 2
16204: PUSH
16205: LD_INT 2
16207: PUSH
16208: LD_INT 4
16210: PUSH
16211: EMPTY
16212: LIST
16213: LIST
16214: LIST
16215: ST_TO_ADDR
// end ; 2 :
16216: GO 17952
16218: LD_INT 2
16220: DOUBLE
16221: EQUAL
16222: IFTRUE 16226
16224: GO 16435
16226: POP
// begin def_base_level := 1 ;
16227: LD_ADDR_EXP 58
16231: PUSH
16232: LD_INT 1
16234: ST_TO_ADDR
// def_amount_of_people := 2 ;
16235: LD_ADDR_EXP 59
16239: PUSH
16240: LD_INT 2
16242: ST_TO_ADDR
// def_skill_level := 3 ;
16243: LD_ADDR_EXP 60
16247: PUSH
16248: LD_INT 3
16250: ST_TO_ADDR
// def_starting_resources := 3 ;
16251: LD_ADDR_EXP 61
16255: PUSH
16256: LD_INT 3
16258: ST_TO_ADDR
// def_shipments_density := 2 ;
16259: LD_ADDR_EXP 62
16263: PUSH
16264: LD_INT 2
16266: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
16267: LD_ADDR_EXP 63
16271: PUSH
16272: LD_INT 1
16274: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
16275: LD_ADDR_EXP 64
16279: PUSH
16280: LD_INT 2
16282: ST_TO_ADDR
// def_shared_vision := 1 ;
16283: LD_ADDR_EXP 65
16287: PUSH
16288: LD_INT 1
16290: ST_TO_ADDR
// def_morale_flags := 0 ;
16291: LD_ADDR_EXP 66
16295: PUSH
16296: LD_INT 0
16298: ST_TO_ADDR
// def_siberite_detection := 1 ;
16299: LD_ADDR_EXP 67
16303: PUSH
16304: LD_INT 1
16306: ST_TO_ADDR
// def_people_respawning := 0 ;
16307: LD_ADDR_EXP 68
16311: PUSH
16312: LD_INT 0
16314: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
16315: LD_ADDR_EXP 69
16319: PUSH
16320: LD_INT 0
16322: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16323: LD_ADDR_EXP 70
16327: PUSH
16328: LD_INT 0
16330: ST_TO_ADDR
// def_builduptime := 2 ;
16331: LD_ADDR_EXP 71
16335: PUSH
16336: LD_INT 2
16338: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
16339: LD_ADDR_VAR 0 2
16343: PUSH
16344: LD_INT 1
16346: PUSH
16347: EMPTY
16348: LIST
16349: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
16350: LD_ADDR_VAR 0 3
16354: PUSH
16355: EMPTY
16356: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16357: LD_ADDR_LOC 56
16361: PUSH
16362: EMPTY
16363: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16364: LD_ADDR_LOC 57
16368: PUSH
16369: EMPTY
16370: ST_TO_ADDR
// Banned_Controls := [ ] ;
16371: LD_ADDR_LOC 58
16375: PUSH
16376: EMPTY
16377: ST_TO_ADDR
// Banned_Engines := [ ] ;
16378: LD_ADDR_LOC 59
16382: PUSH
16383: EMPTY
16384: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
16385: LD_ADDR_LOC 54
16389: PUSH
16390: LD_INT 4
16392: PUSH
16393: LD_INT 5
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: PUSH
16400: LD_INT 31
16402: PUSH
16403: LD_INT 32
16405: PUSH
16406: LD_INT 33
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: LIST
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
16418: LD_ADDR_LOC 55
16422: PUSH
16423: LD_INT 1
16425: PUSH
16426: LD_INT 2
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: ST_TO_ADDR
// end ; 3 :
16433: GO 17952
16435: LD_INT 3
16437: DOUBLE
16438: EQUAL
16439: IFTRUE 16443
16441: GO 16686
16443: POP
// begin def_base_level := 1 ;
16444: LD_ADDR_EXP 58
16448: PUSH
16449: LD_INT 1
16451: ST_TO_ADDR
// def_amount_of_people := 2 ;
16452: LD_ADDR_EXP 59
16456: PUSH
16457: LD_INT 2
16459: ST_TO_ADDR
// def_skill_level := 3 ;
16460: LD_ADDR_EXP 60
16464: PUSH
16465: LD_INT 3
16467: ST_TO_ADDR
// def_starting_resources := 3 ;
16468: LD_ADDR_EXP 61
16472: PUSH
16473: LD_INT 3
16475: ST_TO_ADDR
// def_shipments_density := 1 ;
16476: LD_ADDR_EXP 62
16480: PUSH
16481: LD_INT 1
16483: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
16484: LD_ADDR_EXP 63
16488: PUSH
16489: LD_INT 0
16491: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
16492: LD_ADDR_EXP 64
16496: PUSH
16497: LD_INT 1
16499: ST_TO_ADDR
// def_shared_vision := 1 ;
16500: LD_ADDR_EXP 65
16504: PUSH
16505: LD_INT 1
16507: ST_TO_ADDR
// def_morale_flags := 0 ;
16508: LD_ADDR_EXP 66
16512: PUSH
16513: LD_INT 0
16515: ST_TO_ADDR
// def_siberite_detection := 1 ;
16516: LD_ADDR_EXP 67
16520: PUSH
16521: LD_INT 1
16523: ST_TO_ADDR
// def_people_respawning := 0 ;
16524: LD_ADDR_EXP 68
16528: PUSH
16529: LD_INT 0
16531: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
16532: LD_ADDR_EXP 69
16536: PUSH
16537: LD_INT 2
16539: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16540: LD_ADDR_EXP 70
16544: PUSH
16545: LD_INT 0
16547: ST_TO_ADDR
// def_builduptime := 1 ;
16548: LD_ADDR_EXP 71
16552: PUSH
16553: LD_INT 1
16555: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
16556: LD_ADDR_VAR 0 2
16560: PUSH
16561: LD_INT 23
16563: PUSH
16564: EMPTY
16565: LIST
16566: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
16567: LD_ADDR_VAR 0 3
16571: PUSH
16572: LD_INT 2
16574: PUSH
16575: LD_INT 37
16577: PUSH
16578: LD_INT 32
16580: PUSH
16581: LD_INT 33
16583: PUSH
16584: LD_INT 36
16586: PUSH
16587: LD_INT 16
16589: PUSH
16590: LD_INT 23
16592: PUSH
16593: LD_INT 21
16595: PUSH
16596: LD_INT 18
16598: PUSH
16599: LD_INT 22
16601: PUSH
16602: LD_INT 20
16604: PUSH
16605: LD_INT 19
16607: PUSH
16608: LD_INT 25
16610: PUSH
16611: LD_INT 17
16613: PUSH
16614: LD_INT 24
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16634: LD_ADDR_LOC 56
16638: PUSH
16639: EMPTY
16640: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16641: LD_ADDR_LOC 57
16645: PUSH
16646: EMPTY
16647: ST_TO_ADDR
// Banned_Controls := [ ] ;
16648: LD_ADDR_LOC 58
16652: PUSH
16653: EMPTY
16654: ST_TO_ADDR
// Banned_Engines := [ ] ;
16655: LD_ADDR_LOC 59
16659: PUSH
16660: EMPTY
16661: ST_TO_ADDR
// Restricted_Builds := [ ] ;
16662: LD_ADDR_LOC 54
16666: PUSH
16667: EMPTY
16668: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
16669: LD_ADDR_LOC 55
16673: PUSH
16674: EMPTY
16675: ST_TO_ADDR
// No_Mechs := true ;
16676: LD_ADDR_EXP 72
16680: PUSH
16681: LD_INT 1
16683: ST_TO_ADDR
// end ; 4 :
16684: GO 17952
16686: LD_INT 4
16688: DOUBLE
16689: EQUAL
16690: IFTRUE 16694
16692: GO 16869
16694: POP
// begin def_base_level := 1 ;
16695: LD_ADDR_EXP 58
16699: PUSH
16700: LD_INT 1
16702: ST_TO_ADDR
// def_amount_of_people := 2 ;
16703: LD_ADDR_EXP 59
16707: PUSH
16708: LD_INT 2
16710: ST_TO_ADDR
// def_skill_level := 3 ;
16711: LD_ADDR_EXP 60
16715: PUSH
16716: LD_INT 3
16718: ST_TO_ADDR
// def_starting_resources := 3 ;
16719: LD_ADDR_EXP 61
16723: PUSH
16724: LD_INT 3
16726: ST_TO_ADDR
// def_shipments_density := 2 ;
16727: LD_ADDR_EXP 62
16731: PUSH
16732: LD_INT 2
16734: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
16735: LD_ADDR_EXP 63
16739: PUSH
16740: LD_INT 1
16742: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
16743: LD_ADDR_EXP 64
16747: PUSH
16748: LD_INT 2
16750: ST_TO_ADDR
// def_shared_vision := 1 ;
16751: LD_ADDR_EXP 65
16755: PUSH
16756: LD_INT 1
16758: ST_TO_ADDR
// def_morale_flags := 0 ;
16759: LD_ADDR_EXP 66
16763: PUSH
16764: LD_INT 0
16766: ST_TO_ADDR
// def_siberite_detection := 1 ;
16767: LD_ADDR_EXP 67
16771: PUSH
16772: LD_INT 1
16774: ST_TO_ADDR
// def_people_respawning := 0 ;
16775: LD_ADDR_EXP 68
16779: PUSH
16780: LD_INT 0
16782: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
16783: LD_ADDR_EXP 69
16787: PUSH
16788: LD_INT 0
16790: ST_TO_ADDR
// def_siberite_bomb := 1 ;
16791: LD_ADDR_EXP 70
16795: PUSH
16796: LD_INT 1
16798: ST_TO_ADDR
// def_builduptime := 3 ;
16799: LD_ADDR_EXP 71
16803: PUSH
16804: LD_INT 3
16806: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
16807: LD_ADDR_VAR 0 2
16811: PUSH
16812: LD_INT 1
16814: PUSH
16815: EMPTY
16816: LIST
16817: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
16818: LD_ADDR_VAR 0 3
16822: PUSH
16823: EMPTY
16824: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16825: LD_ADDR_LOC 56
16829: PUSH
16830: EMPTY
16831: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16832: LD_ADDR_LOC 57
16836: PUSH
16837: EMPTY
16838: ST_TO_ADDR
// Banned_Controls := [ ] ;
16839: LD_ADDR_LOC 58
16843: PUSH
16844: EMPTY
16845: ST_TO_ADDR
// Banned_Engines := [ ] ;
16846: LD_ADDR_LOC 59
16850: PUSH
16851: EMPTY
16852: ST_TO_ADDR
// Restricted_Builds := [ ] ;
16853: LD_ADDR_LOC 54
16857: PUSH
16858: EMPTY
16859: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
16860: LD_ADDR_LOC 55
16864: PUSH
16865: EMPTY
16866: ST_TO_ADDR
// end ; 5 :
16867: GO 17952
16869: LD_INT 5
16871: DOUBLE
16872: EQUAL
16873: IFTRUE 16877
16875: GO 17126
16877: POP
// begin def_base_level := 0 ;
16878: LD_ADDR_EXP 58
16882: PUSH
16883: LD_INT 0
16885: ST_TO_ADDR
// def_amount_of_people := 0 ;
16886: LD_ADDR_EXP 59
16890: PUSH
16891: LD_INT 0
16893: ST_TO_ADDR
// def_skill_level := 0 ;
16894: LD_ADDR_EXP 60
16898: PUSH
16899: LD_INT 0
16901: ST_TO_ADDR
// def_starting_resources := 0 ;
16902: LD_ADDR_EXP 61
16906: PUSH
16907: LD_INT 0
16909: ST_TO_ADDR
// def_shipments_density := 0 ;
16910: LD_ADDR_EXP 62
16914: PUSH
16915: LD_INT 0
16917: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
16918: LD_ADDR_EXP 63
16922: PUSH
16923: LD_INT 0
16925: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
16926: LD_ADDR_EXP 64
16930: PUSH
16931: LD_INT 0
16933: ST_TO_ADDR
// def_shared_vision := 1 ;
16934: LD_ADDR_EXP 65
16938: PUSH
16939: LD_INT 1
16941: ST_TO_ADDR
// def_morale_flags := 0 ;
16942: LD_ADDR_EXP 66
16946: PUSH
16947: LD_INT 0
16949: ST_TO_ADDR
// def_siberite_detection := 0 ;
16950: LD_ADDR_EXP 67
16954: PUSH
16955: LD_INT 0
16957: ST_TO_ADDR
// def_people_respawning := 1 ;
16958: LD_ADDR_EXP 68
16962: PUSH
16963: LD_INT 1
16965: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
16966: LD_ADDR_EXP 69
16970: PUSH
16971: LD_INT 1
16973: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16974: LD_ADDR_EXP 70
16978: PUSH
16979: LD_INT 0
16981: ST_TO_ADDR
// def_builduptime := 0 ;
16982: LD_ADDR_EXP 71
16986: PUSH
16987: LD_INT 0
16989: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
16990: LD_ADDR_VAR 0 2
16994: PUSH
16995: LD_INT 10
16997: PUSH
16998: LD_INT 3
17000: PUSH
17001: EMPTY
17002: LIST
17003: LIST
17004: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
17005: LD_ADDR_VAR 0 3
17009: PUSH
17010: LD_INT 12
17012: PUSH
17013: LD_INT 11
17015: PUSH
17016: LD_INT 14
17018: PUSH
17019: LD_INT 13
17021: PUSH
17022: LD_INT 5
17024: PUSH
17025: LD_INT 24
17027: PUSH
17028: LD_INT 21
17030: PUSH
17031: LD_INT 33
17033: PUSH
17034: LD_INT 36
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
17048: LD_ADDR_LOC 56
17052: PUSH
17053: LD_INT 31
17055: PUSH
17056: EMPTY
17057: LIST
17058: ST_TO_ADDR
// Banned_Chassis := [ ] ;
17059: LD_ADDR_LOC 57
17063: PUSH
17064: EMPTY
17065: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
17066: LD_ADDR_LOC 58
17070: PUSH
17071: LD_INT 2
17073: PUSH
17074: EMPTY
17075: LIST
17076: ST_TO_ADDR
// Banned_Engines := [ ] ;
17077: LD_ADDR_LOC 59
17081: PUSH
17082: EMPTY
17083: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
17084: LD_ADDR_LOC 54
17088: PUSH
17089: LD_INT 4
17091: PUSH
17092: EMPTY
17093: LIST
17094: PUSH
17095: LD_INT 31
17097: PUSH
17098: LD_INT 32
17100: PUSH
17101: EMPTY
17102: LIST
17103: LIST
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
17109: LD_ADDR_LOC 55
17113: PUSH
17114: LD_INT 1
17116: PUSH
17117: LD_INT 1
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: ST_TO_ADDR
// end ; 6 :
17124: GO 17952
17126: LD_INT 6
17128: DOUBLE
17129: EQUAL
17130: IFTRUE 17134
17132: GO 17337
17134: POP
// begin def_base_level := 1 ;
17135: LD_ADDR_EXP 58
17139: PUSH
17140: LD_INT 1
17142: ST_TO_ADDR
// def_amount_of_people := 2 ;
17143: LD_ADDR_EXP 59
17147: PUSH
17148: LD_INT 2
17150: ST_TO_ADDR
// def_skill_level := 3 ;
17151: LD_ADDR_EXP 60
17155: PUSH
17156: LD_INT 3
17158: ST_TO_ADDR
// def_starting_resources := 3 ;
17159: LD_ADDR_EXP 61
17163: PUSH
17164: LD_INT 3
17166: ST_TO_ADDR
// def_shipments_density := 1 ;
17167: LD_ADDR_EXP 62
17171: PUSH
17172: LD_INT 1
17174: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
17175: LD_ADDR_EXP 63
17179: PUSH
17180: LD_INT 0
17182: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
17183: LD_ADDR_EXP 64
17187: PUSH
17188: LD_INT 1
17190: ST_TO_ADDR
// def_shared_vision := 1 ;
17191: LD_ADDR_EXP 65
17195: PUSH
17196: LD_INT 1
17198: ST_TO_ADDR
// def_morale_flags := 0 ;
17199: LD_ADDR_EXP 66
17203: PUSH
17204: LD_INT 0
17206: ST_TO_ADDR
// def_siberite_detection := 1 ;
17207: LD_ADDR_EXP 67
17211: PUSH
17212: LD_INT 1
17214: ST_TO_ADDR
// def_people_respawning := 2 ;
17215: LD_ADDR_EXP 68
17219: PUSH
17220: LD_INT 2
17222: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
17223: LD_ADDR_EXP 69
17227: PUSH
17228: LD_INT 1
17230: ST_TO_ADDR
// def_siberite_bomb := 0 ;
17231: LD_ADDR_EXP 70
17235: PUSH
17236: LD_INT 0
17238: ST_TO_ADDR
// def_builduptime := 1 ;
17239: LD_ADDR_EXP 71
17243: PUSH
17244: LD_INT 1
17246: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
17247: LD_ADDR_VAR 0 2
17251: PUSH
17252: LD_INT 23
17254: PUSH
17255: EMPTY
17256: LIST
17257: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
17258: LD_ADDR_VAR 0 3
17262: PUSH
17263: LD_INT 2
17265: PUSH
17266: LD_INT 37
17268: PUSH
17269: LD_INT 31
17271: PUSH
17272: LD_INT 32
17274: PUSH
17275: LD_INT 33
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: ST_TO_ADDR
// Banned_Weapons := [ ] ;
17285: LD_ADDR_LOC 56
17289: PUSH
17290: EMPTY
17291: ST_TO_ADDR
// Banned_Chassis := [ ] ;
17292: LD_ADDR_LOC 57
17296: PUSH
17297: EMPTY
17298: ST_TO_ADDR
// Banned_Controls := [ ] ;
17299: LD_ADDR_LOC 58
17303: PUSH
17304: EMPTY
17305: ST_TO_ADDR
// Banned_Engines := [ ] ;
17306: LD_ADDR_LOC 59
17310: PUSH
17311: EMPTY
17312: ST_TO_ADDR
// Restricted_Builds := [ ] ;
17313: LD_ADDR_LOC 54
17317: PUSH
17318: EMPTY
17319: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
17320: LD_ADDR_LOC 55
17324: PUSH
17325: EMPTY
17326: ST_TO_ADDR
// No_Mechs := true ;
17327: LD_ADDR_EXP 72
17331: PUSH
17332: LD_INT 1
17334: ST_TO_ADDR
// end ; 7 :
17335: GO 17952
17337: LD_INT 7
17339: DOUBLE
17340: EQUAL
17341: IFTRUE 17345
17343: GO 17543
17345: POP
// begin def_base_level := 1 ;
17346: LD_ADDR_EXP 58
17350: PUSH
17351: LD_INT 1
17353: ST_TO_ADDR
// def_amount_of_people := 2 ;
17354: LD_ADDR_EXP 59
17358: PUSH
17359: LD_INT 2
17361: ST_TO_ADDR
// def_skill_level := 3 ;
17362: LD_ADDR_EXP 60
17366: PUSH
17367: LD_INT 3
17369: ST_TO_ADDR
// def_starting_resources := 3 ;
17370: LD_ADDR_EXP 61
17374: PUSH
17375: LD_INT 3
17377: ST_TO_ADDR
// def_shipments_density := 1 ;
17378: LD_ADDR_EXP 62
17382: PUSH
17383: LD_INT 1
17385: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
17386: LD_ADDR_EXP 63
17390: PUSH
17391: LD_INT 1
17393: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
17394: LD_ADDR_EXP 64
17398: PUSH
17399: LD_INT 2
17401: ST_TO_ADDR
// def_shared_vision := 1 ;
17402: LD_ADDR_EXP 65
17406: PUSH
17407: LD_INT 1
17409: ST_TO_ADDR
// def_morale_flags := 0 ;
17410: LD_ADDR_EXP 66
17414: PUSH
17415: LD_INT 0
17417: ST_TO_ADDR
// def_siberite_detection := 1 ;
17418: LD_ADDR_EXP 67
17422: PUSH
17423: LD_INT 1
17425: ST_TO_ADDR
// def_people_respawning := 0 ;
17426: LD_ADDR_EXP 68
17430: PUSH
17431: LD_INT 0
17433: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
17434: LD_ADDR_EXP 69
17438: PUSH
17439: LD_INT 1
17441: ST_TO_ADDR
// def_siberite_bomb := 0 ;
17442: LD_ADDR_EXP 70
17446: PUSH
17447: LD_INT 0
17449: ST_TO_ADDR
// def_builduptime := 3 ;
17450: LD_ADDR_EXP 71
17454: PUSH
17455: LD_INT 3
17457: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
17458: LD_ADDR_VAR 0 2
17462: PUSH
17463: LD_INT 23
17465: PUSH
17466: EMPTY
17467: LIST
17468: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
17469: LD_ADDR_VAR 0 3
17473: PUSH
17474: LD_INT 37
17476: PUSH
17477: EMPTY
17478: LIST
17479: ST_TO_ADDR
// Banned_Weapons := [ ] ;
17480: LD_ADDR_LOC 56
17484: PUSH
17485: EMPTY
17486: ST_TO_ADDR
// Banned_Chassis := [ ] ;
17487: LD_ADDR_LOC 57
17491: PUSH
17492: EMPTY
17493: ST_TO_ADDR
// Banned_Controls := [ ] ;
17494: LD_ADDR_LOC 58
17498: PUSH
17499: EMPTY
17500: ST_TO_ADDR
// Banned_Engines := [ ] ;
17501: LD_ADDR_LOC 59
17505: PUSH
17506: EMPTY
17507: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
17508: LD_ADDR_LOC 54
17512: PUSH
17513: LD_INT 31
17515: PUSH
17516: LD_INT 32
17518: PUSH
17519: LD_INT 33
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: LIST
17526: PUSH
17527: EMPTY
17528: LIST
17529: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
17530: LD_ADDR_LOC 55
17534: PUSH
17535: LD_INT 10
17537: PUSH
17538: EMPTY
17539: LIST
17540: ST_TO_ADDR
// end ; 8 :
17541: GO 17952
17543: LD_INT 8
17545: DOUBLE
17546: EQUAL
17547: IFTRUE 17551
17549: GO 17951
17551: POP
// begin def_base_level := 0 ;
17552: LD_ADDR_EXP 58
17556: PUSH
17557: LD_INT 0
17559: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
17560: LD_ADDR_EXP 59
17564: PUSH
17565: LD_INT 0
17567: PPUSH
17568: LD_INT 1
17570: PPUSH
17571: CALL_OW 12
17575: ST_TO_ADDR
// def_skill_level := 0 ;
17576: LD_ADDR_EXP 60
17580: PUSH
17581: LD_INT 0
17583: ST_TO_ADDR
// def_starting_resources := 2 ;
17584: LD_ADDR_EXP 61
17588: PUSH
17589: LD_INT 2
17591: ST_TO_ADDR
// def_shipments_density := 1 ;
17592: LD_ADDR_EXP 62
17596: PUSH
17597: LD_INT 1
17599: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
17600: LD_ADDR_EXP 63
17604: PUSH
17605: LD_INT 0
17607: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
17608: LD_ADDR_EXP 64
17612: PUSH
17613: LD_INT 0
17615: ST_TO_ADDR
// def_shared_vision := 1 ;
17616: LD_ADDR_EXP 65
17620: PUSH
17621: LD_INT 1
17623: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
17624: LD_ADDR_EXP 66
17628: PUSH
17629: LD_INT 0
17631: PPUSH
17632: LD_INT 2
17634: PPUSH
17635: CALL_OW 12
17639: ST_TO_ADDR
// def_siberite_detection := 0 ;
17640: LD_ADDR_EXP 67
17644: PUSH
17645: LD_INT 0
17647: ST_TO_ADDR
// def_people_respawning := 0 ;
17648: LD_ADDR_EXP 68
17652: PUSH
17653: LD_INT 0
17655: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
17656: LD_ADDR_EXP 69
17660: PUSH
17661: LD_INT 2
17663: ST_TO_ADDR
// def_siberite_bomb := 0 ;
17664: LD_ADDR_EXP 70
17668: PUSH
17669: LD_INT 0
17671: ST_TO_ADDR
// def_builduptime := 0 ;
17672: LD_ADDR_EXP 71
17676: PUSH
17677: LD_INT 0
17679: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
17680: LD_ADDR_VAR 0 2
17684: PUSH
17685: LD_INT 23
17687: PUSH
17688: LD_INT 20
17690: PUSH
17691: LD_INT 40
17693: PUSH
17694: LD_INT 47
17696: PUSH
17697: LD_INT 46
17699: PUSH
17700: LD_INT 39
17702: PUSH
17703: LD_INT 71
17705: PUSH
17706: LD_INT 34
17708: PUSH
17709: LD_INT 41
17711: PUSH
17712: LD_INT 44
17714: PUSH
17715: LD_INT 17
17717: PUSH
17718: LD_INT 16
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
17735: LD_ADDR_VAR 0 3
17739: PUSH
17740: LD_INT 37
17742: PUSH
17743: LD_INT 5
17745: PUSH
17746: LD_INT 13
17748: PUSH
17749: LD_INT 34
17751: PUSH
17752: LD_INT 12
17754: PUSH
17755: LD_INT 15
17757: PUSH
17758: LD_INT 11
17760: PUSH
17761: LD_INT 14
17763: PUSH
17764: LD_INT 29
17766: PUSH
17767: LD_INT 30
17769: PUSH
17770: LD_INT 28
17772: PUSH
17773: LD_INT 24
17775: PUSH
17776: LD_INT 25
17778: PUSH
17779: LD_INT 20
17781: PUSH
17782: LD_INT 21
17784: PUSH
17785: LD_INT 22
17787: PUSH
17788: LD_INT 36
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: ST_TO_ADDR
// Banned_Weapons := [ ] ;
17810: LD_ADDR_LOC 56
17814: PUSH
17815: EMPTY
17816: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
17817: LD_ADDR_LOC 57
17821: PUSH
17822: LD_INT 14
17824: PUSH
17825: EMPTY
17826: LIST
17827: ST_TO_ADDR
// Banned_Controls := [ ] ;
17828: LD_ADDR_LOC 58
17832: PUSH
17833: EMPTY
17834: ST_TO_ADDR
// Banned_Engines := [ ] ;
17835: LD_ADDR_LOC 59
17839: PUSH
17840: EMPTY
17841: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
17842: LD_ADDR_LOC 54
17846: PUSH
17847: LD_INT 31
17849: PUSH
17850: LD_INT 32
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: PUSH
17857: LD_INT 4
17859: PUSH
17860: EMPTY
17861: LIST
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
17867: LD_ADDR_LOC 55
17871: PUSH
17872: LD_INT 2
17874: PUSH
17875: LD_INT 1
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: ST_TO_ADDR
// for i := 1 to 8 do
17882: LD_ADDR_VAR 0 4
17886: PUSH
17887: DOUBLE
17888: LD_INT 1
17890: DEC
17891: ST_TO_ADDR
17892: LD_INT 8
17894: PUSH
17895: FOR_TO
17896: IFFALSE 17947
// if ( Side_Nations [ i ] = 3 ) then
17898: LD_EXP 19
17902: PUSH
17903: LD_VAR 0 4
17907: ARRAY
17908: PUSH
17909: LD_INT 3
17911: EQUAL
17912: IFFALSE 17945
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
17914: LD_ADDR_EXP 19
17918: PUSH
17919: LD_EXP 19
17923: PPUSH
17924: LD_VAR 0 4
17928: PPUSH
17929: LD_INT 1
17931: PPUSH
17932: LD_INT 2
17934: PPUSH
17935: CALL_OW 12
17939: PPUSH
17940: CALL_OW 1
17944: ST_TO_ADDR
17945: GO 17895
17947: POP
17948: POP
// end ; end ;
17949: GO 17952
17951: POP
// for i := 1 to 8 do
17952: LD_ADDR_VAR 0 4
17956: PUSH
17957: DOUBLE
17958: LD_INT 1
17960: DEC
17961: ST_TO_ADDR
17962: LD_INT 8
17964: PUSH
17965: FOR_TO
17966: IFFALSE 18050
// if Side_Positions [ i ] then
17968: LD_EXP 18
17972: PUSH
17973: LD_VAR 0 4
17977: ARRAY
17978: IFFALSE 18048
// begin for j in Unavailable_Techs do
17980: LD_ADDR_VAR 0 5
17984: PUSH
17985: LD_VAR 0 2
17989: PUSH
17990: FOR_IN
17991: IFFALSE 18012
// SetTech ( j , i , 0 ) ;
17993: LD_VAR 0 5
17997: PPUSH
17998: LD_VAR 0 4
18002: PPUSH
18003: LD_INT 0
18005: PPUSH
18006: CALL_OW 322
18010: GO 17990
18012: POP
18013: POP
// for j in Unavailable_Builds do
18014: LD_ADDR_VAR 0 5
18018: PUSH
18019: LD_VAR 0 3
18023: PUSH
18024: FOR_IN
18025: IFFALSE 18046
// SetRestrict ( j , i , 0 ) ;
18027: LD_VAR 0 5
18031: PPUSH
18032: LD_VAR 0 4
18036: PPUSH
18037: LD_INT 0
18039: PPUSH
18040: CALL_OW 324
18044: GO 18024
18046: POP
18047: POP
// end ;
18048: GO 17965
18050: POP
18051: POP
// end ;
18052: LD_VAR 0 1
18056: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
18057: LD_INT 0
18059: PPUSH
18060: PPUSH
18061: PPUSH
18062: PPUSH
18063: PPUSH
18064: PPUSH
18065: PPUSH
// for i := 1 to Restricted_Builds do
18066: LD_ADDR_VAR 0 2
18070: PUSH
18071: DOUBLE
18072: LD_INT 1
18074: DEC
18075: ST_TO_ADDR
18076: LD_LOC 54
18080: PUSH
18081: FOR_TO
18082: IFFALSE 18392
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
18084: LD_LOC 54
18088: PUSH
18089: LD_VAR 0 2
18093: ARRAY
18094: PUSH
18095: LD_INT 1
18097: ARRAY
18098: PUSH
18099: LD_INT 31
18101: DOUBLE
18102: EQUAL
18103: IFTRUE 18119
18105: LD_INT 32
18107: DOUBLE
18108: EQUAL
18109: IFTRUE 18119
18111: LD_INT 33
18113: DOUBLE
18114: EQUAL
18115: IFTRUE 18119
18117: GO 18130
18119: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
18120: LD_ADDR_VAR 0 6
18124: PUSH
18125: LD_STRING #Turrets
18127: ST_TO_ADDR
18128: GO 18175
18130: LD_INT 4
18132: DOUBLE
18133: EQUAL
18134: IFTRUE 18144
18136: LD_INT 5
18138: DOUBLE
18139: EQUAL
18140: IFTRUE 18144
18142: GO 18155
18144: POP
// btype := #Armouries ; b_Behemoth :
18145: LD_ADDR_VAR 0 6
18149: PUSH
18150: LD_STRING #Armouries
18152: ST_TO_ADDR
18153: GO 18175
18155: LD_INT 37
18157: DOUBLE
18158: EQUAL
18159: IFTRUE 18163
18161: GO 18174
18163: POP
// btype := #Behemoths ; end ;
18164: LD_ADDR_VAR 0 6
18168: PUSH
18169: LD_STRING #Behemoths
18171: ST_TO_ADDR
18172: GO 18175
18174: POP
// list := [ ] ;
18175: LD_ADDR_VAR 0 7
18179: PUSH
18180: EMPTY
18181: ST_TO_ADDR
// for j := 1 to 8 do
18182: LD_ADDR_VAR 0 3
18186: PUSH
18187: DOUBLE
18188: LD_INT 1
18190: DEC
18191: ST_TO_ADDR
18192: LD_INT 8
18194: PUSH
18195: FOR_TO
18196: IFFALSE 18289
// if Side_Positions [ j ] then
18198: LD_EXP 18
18202: PUSH
18203: LD_VAR 0 3
18207: ARRAY
18208: IFFALSE 18287
// begin amount := 0 ;
18210: LD_ADDR_VAR 0 5
18214: PUSH
18215: LD_INT 0
18217: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
18218: LD_ADDR_VAR 0 4
18222: PUSH
18223: LD_LOC 54
18227: PUSH
18228: LD_VAR 0 2
18232: ARRAY
18233: PUSH
18234: FOR_IN
18235: IFFALSE 18283
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
18237: LD_ADDR_VAR 0 5
18241: PUSH
18242: LD_VAR 0 5
18246: PUSH
18247: LD_INT 22
18249: PUSH
18250: LD_VAR 0 3
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: PUSH
18259: LD_INT 30
18261: PUSH
18262: LD_VAR 0 4
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PPUSH
18275: CALL_OW 69
18279: PLUS
18280: ST_TO_ADDR
18281: GO 18234
18283: POP
18284: POP
// break ;
18285: GO 18289
// end ;
18287: GO 18195
18289: POP
18290: POP
// list := [ ] ;
18291: LD_ADDR_VAR 0 7
18295: PUSH
18296: EMPTY
18297: ST_TO_ADDR
// for j := 1 to 8 do
18298: LD_ADDR_VAR 0 3
18302: PUSH
18303: DOUBLE
18304: LD_INT 1
18306: DEC
18307: ST_TO_ADDR
18308: LD_INT 8
18310: PUSH
18311: FOR_TO
18312: IFFALSE 18332
// list := list ^ amount ;
18314: LD_ADDR_VAR 0 7
18318: PUSH
18319: LD_VAR 0 7
18323: PUSH
18324: LD_VAR 0 5
18328: ADD
18329: ST_TO_ADDR
18330: GO 18311
18332: POP
18333: POP
// Already_Built := Already_Built ^ [ list ] ;
18334: LD_ADDR_LOC 60
18338: PUSH
18339: LD_LOC 60
18343: PUSH
18344: LD_VAR 0 7
18348: PUSH
18349: EMPTY
18350: LIST
18351: ADD
18352: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
18353: LD_ADDR_LOC 61
18357: PUSH
18358: LD_LOC 61
18362: PUSH
18363: LD_VAR 0 6
18367: PUSH
18368: LD_VAR 0 5
18372: PUSH
18373: LD_LOC 55
18377: PUSH
18378: LD_VAR 0 2
18382: ARRAY
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: LIST
18388: ADD
18389: ST_TO_ADDR
// end ;
18390: GO 18081
18392: POP
18393: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
18394: LD_ADDR_LOC 62
18398: PUSH
18399: LD_INT 0
18401: PUSH
18402: LD_INT 0
18404: PUSH
18405: LD_INT 0
18407: PUSH
18408: LD_INT 0
18410: PUSH
18411: LD_INT 0
18413: PUSH
18414: LD_INT 0
18416: PUSH
18417: LD_INT 0
18419: PUSH
18420: LD_INT 0
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: ST_TO_ADDR
// if Limits_Info then
18433: LD_LOC 61
18437: IFFALSE 18453
// Limits_Info := #Limits ^ Limits_Info ;
18439: LD_ADDR_LOC 61
18443: PUSH
18444: LD_STRING #Limits
18446: PUSH
18447: LD_LOC 61
18451: ADD
18452: ST_TO_ADDR
// end ;
18453: LD_VAR 0 1
18457: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
18458: LD_INT 0
18460: PPUSH
18461: PPUSH
18462: PPUSH
18463: PPUSH
// for i := 1 to Restricted_Builds do
18464: LD_ADDR_VAR 0 7
18468: PUSH
18469: DOUBLE
18470: LD_INT 1
18472: DEC
18473: ST_TO_ADDR
18474: LD_LOC 54
18478: PUSH
18479: FOR_TO
18480: IFFALSE 18903
// if BType in Restricted_Builds [ i ] then
18482: LD_VAR 0 2
18486: PUSH
18487: LD_LOC 54
18491: PUSH
18492: LD_VAR 0 7
18496: ARRAY
18497: IN
18498: IFFALSE 18901
// begin if old_side then
18500: LD_VAR 0 4
18504: IFFALSE 18630
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
18506: LD_LOC 60
18510: PUSH
18511: LD_VAR 0 7
18515: ARRAY
18516: PUSH
18517: LD_VAR 0 3
18521: ARRAY
18522: PUSH
18523: LD_VAR 0 5
18527: PLUS
18528: PUSH
18529: LD_LOC 55
18533: PUSH
18534: LD_VAR 0 7
18538: ARRAY
18539: GREATER
18540: IFFALSE 18566
// begin SetSide ( un , old_side ) ;
18542: LD_VAR 0 1
18546: PPUSH
18547: LD_VAR 0 4
18551: PPUSH
18552: CALL_OW 235
// count := 0 ;
18556: LD_ADDR_VAR 0 5
18560: PUSH
18561: LD_INT 0
18563: ST_TO_ADDR
// end else
18564: GO 18630
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
18566: LD_ADDR_LOC 60
18570: PUSH
18571: LD_LOC 60
18575: PPUSH
18576: LD_VAR 0 7
18580: PPUSH
18581: LD_LOC 60
18585: PUSH
18586: LD_VAR 0 7
18590: ARRAY
18591: PPUSH
18592: LD_VAR 0 4
18596: PPUSH
18597: LD_LOC 60
18601: PUSH
18602: LD_VAR 0 7
18606: ARRAY
18607: PUSH
18608: LD_VAR 0 4
18612: ARRAY
18613: PUSH
18614: LD_VAR 0 5
18618: MINUS
18619: PPUSH
18620: CALL_OW 1
18624: PPUSH
18625: CALL_OW 1
18629: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
18630: LD_ADDR_LOC 60
18634: PUSH
18635: LD_LOC 60
18639: PPUSH
18640: LD_VAR 0 7
18644: PPUSH
18645: LD_LOC 60
18649: PUSH
18650: LD_VAR 0 7
18654: ARRAY
18655: PPUSH
18656: LD_VAR 0 3
18660: PPUSH
18661: LD_LOC 60
18665: PUSH
18666: LD_VAR 0 7
18670: ARRAY
18671: PUSH
18672: LD_VAR 0 3
18676: ARRAY
18677: PUSH
18678: LD_VAR 0 5
18682: PLUS
18683: PPUSH
18684: CALL_OW 1
18688: PPUSH
18689: CALL_OW 1
18693: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
18694: LD_VAR 0 5
18698: PUSH
18699: LD_INT 0
18701: NONEQUAL
18702: PUSH
18703: LD_VAR 0 3
18707: PUSH
18708: LD_OWVAR 2
18712: EQUAL
18713: AND
18714: IFFALSE 18757
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
18716: LD_ADDR_LOC 61
18720: PUSH
18721: LD_LOC 61
18725: PPUSH
18726: LD_INT 3
18728: PUSH
18729: LD_VAR 0 7
18733: MUL
18734: PPUSH
18735: LD_LOC 60
18739: PUSH
18740: LD_VAR 0 7
18744: ARRAY
18745: PUSH
18746: LD_VAR 0 3
18750: ARRAY
18751: PPUSH
18752: CALL_OW 1
18756: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
18757: LD_LOC 60
18761: PUSH
18762: LD_VAR 0 7
18766: ARRAY
18767: PUSH
18768: LD_VAR 0 3
18772: ARRAY
18773: PUSH
18774: LD_LOC 55
18778: PUSH
18779: LD_VAR 0 7
18783: ARRAY
18784: GREATER
18785: IFFALSE 18812
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
18787: LD_ADDR_LOC 62
18791: PUSH
18792: LD_LOC 62
18796: PPUSH
18797: LD_VAR 0 3
18801: PPUSH
18802: LD_INT 1
18804: PPUSH
18805: CALL_OW 1
18809: ST_TO_ADDR
// end else
18810: GO 18899
// begin for j := 1 to Restricted_Builds do
18812: LD_ADDR_VAR 0 8
18816: PUSH
18817: DOUBLE
18818: LD_INT 1
18820: DEC
18821: ST_TO_ADDR
18822: LD_LOC 54
18826: PUSH
18827: FOR_TO
18828: IFFALSE 18872
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
18830: LD_LOC 60
18834: PUSH
18835: LD_VAR 0 8
18839: ARRAY
18840: PUSH
18841: LD_VAR 0 3
18845: ARRAY
18846: PUSH
18847: LD_LOC 55
18851: PUSH
18852: LD_VAR 0 8
18856: ARRAY
18857: GREATER
18858: IFFALSE 18870
// begin Is_Cheater := true ;
18860: LD_ADDR_VAR 0 9
18864: PUSH
18865: LD_INT 1
18867: ST_TO_ADDR
// break ;
18868: GO 18872
// end ;
18870: GO 18827
18872: POP
18873: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
18874: LD_ADDR_LOC 62
18878: PUSH
18879: LD_LOC 62
18883: PPUSH
18884: LD_VAR 0 3
18888: PPUSH
18889: LD_VAR 0 9
18893: PPUSH
18894: CALL_OW 1
18898: ST_TO_ADDR
// end ; break ;
18899: GO 18903
// end ;
18901: GO 18479
18903: POP
18904: POP
// end ;
18905: LD_VAR 0 6
18909: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
18910: LD_VAR 0 5
18914: PUSH
18915: LD_LOC 56
18919: IN
18920: PUSH
18921: LD_VAR 0 2
18925: PUSH
18926: LD_LOC 57
18930: IN
18931: OR
18932: PUSH
18933: LD_VAR 0 4
18937: PUSH
18938: LD_LOC 58
18942: IN
18943: OR
18944: PUSH
18945: LD_VAR 0 3
18949: PUSH
18950: LD_LOC 59
18954: IN
18955: OR
18956: IFFALSE 18967
// ComCancel ( factory ) ;
18958: LD_VAR 0 1
18962: PPUSH
18963: CALL_OW 127
// end ;
18967: PPOPN 5
18969: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
18970: LD_VAR 0 2
18974: PUSH
18975: LD_LOC 56
18979: IN
18980: IFFALSE 18991
// ComCancel ( building ) ;
18982: LD_VAR 0 1
18986: PPUSH
18987: CALL_OW 127
// end ; end_of_file
18991: PPOPN 2
18993: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
18994: LD_INT 0
18996: PPUSH
18997: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
18998: LD_ADDR_VAR 0 2
19002: PUSH
19003: LD_STRING #Multi1x1-Time
19005: PUSH
19006: LD_OWVAR 1
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
19015: LD_INT 0
19017: PUSH
19018: LD_EXP 15
19022: PUSH
19023: LD_OWVAR 1
19027: MINUS
19028: LESSEQUAL
19029: IFFALSE 19060
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
19031: LD_ADDR_VAR 0 2
19035: PUSH
19036: LD_VAR 0 2
19040: PUSH
19041: LD_STRING #allowedsibbomb
19043: PUSH
19044: LD_EXP 15
19048: PUSH
19049: LD_OWVAR 1
19053: MINUS
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: ADD
19059: ST_TO_ADDR
// if ( ExtraStrings ) then
19060: LD_EXP 73
19064: IFFALSE 19086
// AllStrings := AllStrings ^  ^ ExtraStrings ;
19066: LD_ADDR_VAR 0 2
19070: PUSH
19071: LD_VAR 0 2
19075: PUSH
19076: LD_STRING 
19078: ADD
19079: PUSH
19080: LD_EXP 73
19084: ADD
19085: ST_TO_ADDR
// if ( LimitsStrings ) then
19086: CALL 15834 0 0
19090: IFFALSE 19112
// AllStrings := AllStrings ^  ^ LimitsStrings ;
19092: LD_ADDR_VAR 0 2
19096: PUSH
19097: LD_VAR 0 2
19101: PUSH
19102: LD_STRING 
19104: ADD
19105: PUSH
19106: CALL 15834 0 0
19110: ADD
19111: ST_TO_ADDR
// Display_Strings := AllStrings ;
19112: LD_ADDR_OWVAR 47
19116: PUSH
19117: LD_VAR 0 2
19121: ST_TO_ADDR
// end ;
19122: LD_VAR 0 1
19126: RET
// every 0 0$1 do
19127: GO 19129
19129: DISABLE
// begin ShowTimer ;
19130: CALL 18994 0 0
// enable ;
19134: ENABLE
// end ; end_of_file
19135: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
19136: LD_INT 0
19138: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
19139: LD_VAR 0 1
19143: PPUSH
19144: CALL_OW 255
19148: PUSH
19149: LD_VAR 0 4
19153: EQUAL
19154: IFFALSE 19173
// begin SetAchievement ( ACH_RAD ) ;
19156: LD_STRING ACH_RAD
19158: PPUSH
19159: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
19163: LD_STRING ACH_NL
19165: PPUSH
19166: LD_INT 1
19168: PPUSH
19169: CALL_OW 564
// end end ;
19173: LD_VAR 0 5
19177: RET
// export function SA_Win ( side ) ; begin
19178: LD_INT 0
19180: PPUSH
// case side of 1 :
19181: LD_VAR 0 1
19185: PUSH
19186: LD_INT 1
19188: DOUBLE
19189: EQUAL
19190: IFTRUE 19194
19192: GO 19207
19194: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
19195: LD_STRING ACH_AH
19197: PPUSH
19198: LD_INT 1
19200: PPUSH
19201: CALL_OW 564
19205: GO 19370
19207: LD_INT 2
19209: DOUBLE
19210: EQUAL
19211: IFTRUE 19215
19213: GO 19228
19215: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
19216: LD_STRING ACH_E
19218: PPUSH
19219: LD_INT 1
19221: PPUSH
19222: CALL_OW 564
19226: GO 19370
19228: LD_INT 3
19230: DOUBLE
19231: EQUAL
19232: IFTRUE 19236
19234: GO 19249
19236: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
19237: LD_STRING ACH_OOL
19239: PPUSH
19240: LD_INT 1
19242: PPUSH
19243: CALL_OW 564
19247: GO 19370
19249: LD_INT 1
19251: PUSH
19252: LD_INT 2
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: DOUBLE
19259: EQUAL
19260: IFTRUE 19264
19262: GO 19289
19264: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
19265: LD_STRING ACH_AH
19267: PPUSH
19268: LD_REAL  5.00000000000000E-0001
19271: PPUSH
19272: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
19276: LD_STRING ACH_E
19278: PPUSH
19279: LD_REAL  5.00000000000000E-0001
19282: PPUSH
19283: CALL_OW 564
// end ; [ 2 , 3 ] :
19287: GO 19370
19289: LD_INT 2
19291: PUSH
19292: LD_INT 3
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: DOUBLE
19299: EQUAL
19300: IFTRUE 19304
19302: GO 19329
19304: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
19305: LD_STRING ACH_OOL
19307: PPUSH
19308: LD_REAL  5.00000000000000E-0001
19311: PPUSH
19312: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
19316: LD_STRING ACH_E
19318: PPUSH
19319: LD_REAL  5.00000000000000E-0001
19322: PPUSH
19323: CALL_OW 564
// end ; [ 3 , 1 ] :
19327: GO 19370
19329: LD_INT 3
19331: PUSH
19332: LD_INT 1
19334: PUSH
19335: EMPTY
19336: LIST
19337: LIST
19338: DOUBLE
19339: EQUAL
19340: IFTRUE 19344
19342: GO 19369
19344: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
19345: LD_STRING ACH_AH
19347: PPUSH
19348: LD_REAL  5.00000000000000E-0001
19351: PPUSH
19352: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
19356: LD_STRING ACH_OOL
19358: PPUSH
19359: LD_REAL  5.00000000000000E-0001
19362: PPUSH
19363: CALL_OW 564
// end ; end ;
19367: GO 19370
19369: POP
// end ; end_of_file
19370: LD_VAR 0 2
19374: RET
// export function SetMpTechs ( ) ; var side , i ; begin
19375: LD_INT 0
19377: PPUSH
19378: PPUSH
19379: PPUSH
// for side = 1 to 8 do
19380: LD_ADDR_VAR 0 2
19384: PUSH
19385: DOUBLE
19386: LD_INT 1
19388: DEC
19389: ST_TO_ADDR
19390: LD_INT 8
19392: PUSH
19393: FOR_TO
19394: IFFALSE 19515
// begin for i = 1 to 72 do
19396: LD_ADDR_VAR 0 3
19400: PUSH
19401: DOUBLE
19402: LD_INT 1
19404: DEC
19405: ST_TO_ADDR
19406: LD_INT 72
19408: PUSH
19409: FOR_TO
19410: IFFALSE 19441
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
19412: LD_VAR 0 3
19416: PPUSH
19417: LD_VAR 0 2
19421: PPUSH
19422: LD_INT 0
19424: PPUSH
19425: LD_VAR 0 3
19429: PPUSH
19430: CALL_OW 565
19434: PPUSH
19435: CALL_OW 322
19439: GO 19409
19441: POP
19442: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
19443: LD_INT 73
19445: PPUSH
19446: LD_VAR 0 2
19450: PPUSH
19451: LD_INT 0
19453: PPUSH
19454: LD_INT 25
19456: PPUSH
19457: CALL_OW 565
19461: PPUSH
19462: CALL_OW 322
// for i = 0 to 40 do
19466: LD_ADDR_VAR 0 3
19470: PUSH
19471: DOUBLE
19472: LD_INT 0
19474: DEC
19475: ST_TO_ADDR
19476: LD_INT 40
19478: PUSH
19479: FOR_TO
19480: IFFALSE 19511
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
19482: LD_VAR 0 3
19486: PPUSH
19487: LD_VAR 0 2
19491: PPUSH
19492: LD_INT 1
19494: PPUSH
19495: LD_VAR 0 3
19499: PPUSH
19500: CALL_OW 565
19504: PPUSH
19505: CALL_OW 324
19509: GO 19479
19511: POP
19512: POP
// end ;
19513: GO 19393
19515: POP
19516: POP
// end ;
19517: LD_VAR 0 1
19521: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
19522: LD_INT 0
19524: PPUSH
19525: PPUSH
19526: PPUSH
// for side = 1 to 8 do
19527: LD_ADDR_VAR 0 3
19531: PUSH
19532: DOUBLE
19533: LD_INT 1
19535: DEC
19536: ST_TO_ADDR
19537: LD_INT 8
19539: PUSH
19540: FOR_TO
19541: IFFALSE 23537
// begin for i = 1 to 73 do
19543: LD_ADDR_VAR 0 4
19547: PUSH
19548: DOUBLE
19549: LD_INT 1
19551: DEC
19552: ST_TO_ADDR
19553: LD_INT 73
19555: PUSH
19556: FOR_TO
19557: IFFALSE 19578
// SetTech ( i , side , state_disabled ) ;
19559: LD_VAR 0 4
19563: PPUSH
19564: LD_VAR 0 3
19568: PPUSH
19569: LD_INT 0
19571: PPUSH
19572: CALL_OW 322
19576: GO 19556
19578: POP
19579: POP
// for i = 0 to 40 do
19580: LD_ADDR_VAR 0 4
19584: PUSH
19585: DOUBLE
19586: LD_INT 0
19588: DEC
19589: ST_TO_ADDR
19590: LD_INT 40
19592: PUSH
19593: FOR_TO
19594: IFFALSE 19615
// SetRestrict ( i , side , false ) ;
19596: LD_VAR 0 4
19600: PPUSH
19601: LD_VAR 0 3
19605: PPUSH
19606: LD_INT 0
19608: PPUSH
19609: CALL_OW 324
19613: GO 19593
19615: POP
19616: POP
// case level of 1 :
19617: LD_VAR 0 1
19621: PUSH
19622: LD_INT 1
19624: DOUBLE
19625: EQUAL
19626: IFTRUE 19630
19628: GO 19783
19630: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19631: LD_INT 35
19633: PPUSH
19634: LD_VAR 0 3
19638: PPUSH
19639: LD_INT 1
19641: PPUSH
19642: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19646: LD_INT 45
19648: PPUSH
19649: LD_VAR 0 3
19653: PPUSH
19654: LD_INT 1
19656: PPUSH
19657: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19661: LD_INT 46
19663: PPUSH
19664: LD_VAR 0 3
19668: PPUSH
19669: LD_INT 1
19671: PPUSH
19672: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19676: LD_INT 47
19678: PPUSH
19679: LD_VAR 0 3
19683: PPUSH
19684: LD_INT 1
19686: PPUSH
19687: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
19691: LD_INT 0
19693: PPUSH
19694: LD_VAR 0 3
19698: PPUSH
19699: LD_INT 1
19701: PPUSH
19702: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
19706: LD_INT 2
19708: PPUSH
19709: LD_VAR 0 3
19713: PPUSH
19714: LD_INT 1
19716: PPUSH
19717: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
19721: LD_INT 4
19723: PPUSH
19724: LD_VAR 0 3
19728: PPUSH
19729: LD_INT 1
19731: PPUSH
19732: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
19736: LD_INT 6
19738: PPUSH
19739: LD_VAR 0 3
19743: PPUSH
19744: LD_INT 1
19746: PPUSH
19747: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
19751: LD_INT 29
19753: PPUSH
19754: LD_VAR 0 3
19758: PPUSH
19759: LD_INT 1
19761: PPUSH
19762: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
19766: LD_INT 31
19768: PPUSH
19769: LD_VAR 0 3
19773: PPUSH
19774: LD_INT 1
19776: PPUSH
19777: CALL_OW 324
// end ; 2 :
19781: GO 23535
19783: LD_INT 2
19785: DOUBLE
19786: EQUAL
19787: IFTRUE 19791
19789: GO 19989
19791: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19792: LD_INT 35
19794: PPUSH
19795: LD_VAR 0 3
19799: PPUSH
19800: LD_INT 1
19802: PPUSH
19803: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19807: LD_INT 45
19809: PPUSH
19810: LD_VAR 0 3
19814: PPUSH
19815: LD_INT 1
19817: PPUSH
19818: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19822: LD_INT 46
19824: PPUSH
19825: LD_VAR 0 3
19829: PPUSH
19830: LD_INT 1
19832: PPUSH
19833: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19837: LD_INT 47
19839: PPUSH
19840: LD_VAR 0 3
19844: PPUSH
19845: LD_INT 1
19847: PPUSH
19848: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
19852: LD_INT 1
19854: PPUSH
19855: LD_VAR 0 3
19859: PPUSH
19860: LD_INT 1
19862: PPUSH
19863: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
19867: LD_INT 2
19869: PPUSH
19870: LD_VAR 0 3
19874: PPUSH
19875: LD_INT 1
19877: PPUSH
19878: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
19882: LD_INT 11
19884: PPUSH
19885: LD_VAR 0 3
19889: PPUSH
19890: LD_INT 1
19892: PPUSH
19893: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
19897: LD_INT 0
19899: PPUSH
19900: LD_VAR 0 3
19904: PPUSH
19905: LD_INT 1
19907: PPUSH
19908: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
19912: LD_INT 2
19914: PPUSH
19915: LD_VAR 0 3
19919: PPUSH
19920: LD_INT 1
19922: PPUSH
19923: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
19927: LD_INT 4
19929: PPUSH
19930: LD_VAR 0 3
19934: PPUSH
19935: LD_INT 1
19937: PPUSH
19938: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
19942: LD_INT 6
19944: PPUSH
19945: LD_VAR 0 3
19949: PPUSH
19950: LD_INT 1
19952: PPUSH
19953: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
19957: LD_INT 29
19959: PPUSH
19960: LD_VAR 0 3
19964: PPUSH
19965: LD_INT 1
19967: PPUSH
19968: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
19972: LD_INT 31
19974: PPUSH
19975: LD_VAR 0 3
19979: PPUSH
19980: LD_INT 1
19982: PPUSH
19983: CALL_OW 324
// end ; 3 :
19987: GO 23535
19989: LD_INT 3
19991: DOUBLE
19992: EQUAL
19993: IFTRUE 19997
19995: GO 20450
19997: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19998: LD_INT 35
20000: PPUSH
20001: LD_VAR 0 3
20005: PPUSH
20006: LD_INT 1
20008: PPUSH
20009: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
20013: LD_INT 45
20015: PPUSH
20016: LD_VAR 0 3
20020: PPUSH
20021: LD_INT 1
20023: PPUSH
20024: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
20028: LD_INT 46
20030: PPUSH
20031: LD_VAR 0 3
20035: PPUSH
20036: LD_INT 1
20038: PPUSH
20039: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
20043: LD_INT 47
20045: PPUSH
20046: LD_VAR 0 3
20050: PPUSH
20051: LD_INT 1
20053: PPUSH
20054: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
20058: LD_INT 1
20060: PPUSH
20061: LD_VAR 0 3
20065: PPUSH
20066: LD_INT 1
20068: PPUSH
20069: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
20073: LD_INT 2
20075: PPUSH
20076: LD_VAR 0 3
20080: PPUSH
20081: LD_INT 1
20083: PPUSH
20084: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
20088: LD_INT 11
20090: PPUSH
20091: LD_VAR 0 3
20095: PPUSH
20096: LD_INT 1
20098: PPUSH
20099: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
20103: LD_INT 48
20105: PPUSH
20106: LD_VAR 0 3
20110: PPUSH
20111: LD_INT 1
20113: PPUSH
20114: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
20118: LD_INT 69
20120: PPUSH
20121: LD_VAR 0 3
20125: PPUSH
20126: LD_INT 1
20128: PPUSH
20129: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
20133: LD_INT 39
20135: PPUSH
20136: LD_VAR 0 3
20140: PPUSH
20141: LD_INT 1
20143: PPUSH
20144: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
20148: LD_INT 43
20150: PPUSH
20151: LD_VAR 0 3
20155: PPUSH
20156: LD_INT 1
20158: PPUSH
20159: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
20163: LD_INT 51
20165: PPUSH
20166: LD_VAR 0 3
20170: PPUSH
20171: LD_INT 1
20173: PPUSH
20174: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
20178: LD_INT 6
20180: PPUSH
20181: LD_VAR 0 3
20185: PPUSH
20186: LD_INT 1
20188: PPUSH
20189: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
20193: LD_INT 0
20195: PPUSH
20196: LD_VAR 0 3
20200: PPUSH
20201: LD_INT 1
20203: PPUSH
20204: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
20208: LD_INT 2
20210: PPUSH
20211: LD_VAR 0 3
20215: PPUSH
20216: LD_INT 1
20218: PPUSH
20219: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
20223: LD_INT 3
20225: PPUSH
20226: LD_VAR 0 3
20230: PPUSH
20231: LD_INT 1
20233: PPUSH
20234: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
20238: LD_INT 4
20240: PPUSH
20241: LD_VAR 0 3
20245: PPUSH
20246: LD_INT 1
20248: PPUSH
20249: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
20253: LD_INT 6
20255: PPUSH
20256: LD_VAR 0 3
20260: PPUSH
20261: LD_INT 1
20263: PPUSH
20264: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
20268: LD_INT 7
20270: PPUSH
20271: LD_VAR 0 3
20275: PPUSH
20276: LD_INT 1
20278: PPUSH
20279: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
20283: LD_INT 8
20285: PPUSH
20286: LD_VAR 0 3
20290: PPUSH
20291: LD_INT 1
20293: PPUSH
20294: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
20298: LD_INT 10
20300: PPUSH
20301: LD_VAR 0 3
20305: PPUSH
20306: LD_INT 1
20308: PPUSH
20309: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
20313: LD_INT 15
20315: PPUSH
20316: LD_VAR 0 3
20320: PPUSH
20321: LD_INT 1
20323: PPUSH
20324: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
20328: LD_INT 16
20330: PPUSH
20331: LD_VAR 0 3
20335: PPUSH
20336: LD_INT 1
20338: PPUSH
20339: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
20343: LD_INT 17
20345: PPUSH
20346: LD_VAR 0 3
20350: PPUSH
20351: LD_INT 1
20353: PPUSH
20354: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
20358: LD_INT 20
20360: PPUSH
20361: LD_VAR 0 3
20365: PPUSH
20366: LD_INT 1
20368: PPUSH
20369: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
20373: LD_INT 26
20375: PPUSH
20376: LD_VAR 0 3
20380: PPUSH
20381: LD_INT 1
20383: PPUSH
20384: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
20388: LD_INT 27
20390: PPUSH
20391: LD_VAR 0 3
20395: PPUSH
20396: LD_INT 1
20398: PPUSH
20399: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
20403: LD_INT 29
20405: PPUSH
20406: LD_VAR 0 3
20410: PPUSH
20411: LD_INT 1
20413: PPUSH
20414: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
20418: LD_INT 31
20420: PPUSH
20421: LD_VAR 0 3
20425: PPUSH
20426: LD_INT 1
20428: PPUSH
20429: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
20433: LD_INT 32
20435: PPUSH
20436: LD_VAR 0 3
20440: PPUSH
20441: LD_INT 1
20443: PPUSH
20444: CALL_OW 324
// end ; 4 :
20448: GO 23535
20450: LD_INT 4
20452: DOUBLE
20453: EQUAL
20454: IFTRUE 20458
20456: GO 21406
20458: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
20459: LD_INT 35
20461: PPUSH
20462: LD_VAR 0 3
20466: PPUSH
20467: LD_INT 1
20469: PPUSH
20470: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
20474: LD_INT 45
20476: PPUSH
20477: LD_VAR 0 3
20481: PPUSH
20482: LD_INT 1
20484: PPUSH
20485: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
20489: LD_INT 46
20491: PPUSH
20492: LD_VAR 0 3
20496: PPUSH
20497: LD_INT 1
20499: PPUSH
20500: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
20504: LD_INT 47
20506: PPUSH
20507: LD_VAR 0 3
20511: PPUSH
20512: LD_INT 1
20514: PPUSH
20515: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
20519: LD_INT 1
20521: PPUSH
20522: LD_VAR 0 3
20526: PPUSH
20527: LD_INT 1
20529: PPUSH
20530: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
20534: LD_INT 2
20536: PPUSH
20537: LD_VAR 0 3
20541: PPUSH
20542: LD_INT 1
20544: PPUSH
20545: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
20549: LD_INT 11
20551: PPUSH
20552: LD_VAR 0 3
20556: PPUSH
20557: LD_INT 1
20559: PPUSH
20560: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
20564: LD_INT 20
20566: PPUSH
20567: LD_VAR 0 3
20571: PPUSH
20572: LD_INT 1
20574: PPUSH
20575: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
20579: LD_INT 48
20581: PPUSH
20582: LD_VAR 0 3
20586: PPUSH
20587: LD_INT 1
20589: PPUSH
20590: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
20594: LD_INT 49
20596: PPUSH
20597: LD_VAR 0 3
20601: PPUSH
20602: LD_INT 1
20604: PPUSH
20605: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
20609: LD_INT 69
20611: PPUSH
20612: LD_VAR 0 3
20616: PPUSH
20617: LD_INT 1
20619: PPUSH
20620: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
20624: LD_INT 39
20626: PPUSH
20627: LD_VAR 0 3
20631: PPUSH
20632: LD_INT 1
20634: PPUSH
20635: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
20639: LD_INT 34
20641: PPUSH
20642: LD_VAR 0 3
20646: PPUSH
20647: LD_INT 1
20649: PPUSH
20650: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
20654: LD_INT 42
20656: PPUSH
20657: LD_VAR 0 3
20661: PPUSH
20662: LD_INT 1
20664: PPUSH
20665: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
20669: LD_INT 44
20671: PPUSH
20672: LD_VAR 0 3
20676: PPUSH
20677: LD_INT 1
20679: PPUSH
20680: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
20684: LD_INT 41
20686: PPUSH
20687: LD_VAR 0 3
20691: PPUSH
20692: LD_INT 1
20694: PPUSH
20695: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
20699: LD_INT 43
20701: PPUSH
20702: LD_VAR 0 3
20706: PPUSH
20707: LD_INT 1
20709: PPUSH
20710: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
20714: LD_INT 70
20716: PPUSH
20717: LD_VAR 0 3
20721: PPUSH
20722: LD_INT 1
20724: PPUSH
20725: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
20729: LD_INT 51
20731: PPUSH
20732: LD_VAR 0 3
20736: PPUSH
20737: LD_INT 1
20739: PPUSH
20740: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
20744: LD_INT 52
20746: PPUSH
20747: LD_VAR 0 3
20751: PPUSH
20752: LD_INT 1
20754: PPUSH
20755: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
20759: LD_INT 6
20761: PPUSH
20762: LD_VAR 0 3
20766: PPUSH
20767: LD_INT 1
20769: PPUSH
20770: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
20774: LD_INT 15
20776: PPUSH
20777: LD_VAR 0 3
20781: PPUSH
20782: LD_INT 1
20784: PPUSH
20785: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
20789: LD_INT 7
20791: PPUSH
20792: LD_VAR 0 3
20796: PPUSH
20797: LD_INT 1
20799: PPUSH
20800: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
20804: LD_INT 12
20806: PPUSH
20807: LD_VAR 0 3
20811: PPUSH
20812: LD_INT 1
20814: PPUSH
20815: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
20819: LD_INT 18
20821: PPUSH
20822: LD_VAR 0 3
20826: PPUSH
20827: LD_INT 1
20829: PPUSH
20830: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
20834: LD_INT 60
20836: PPUSH
20837: LD_VAR 0 3
20841: PPUSH
20842: LD_INT 1
20844: PPUSH
20845: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
20849: LD_INT 9
20851: PPUSH
20852: LD_VAR 0 3
20856: PPUSH
20857: LD_INT 1
20859: PPUSH
20860: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
20864: LD_INT 30
20866: PPUSH
20867: LD_VAR 0 3
20871: PPUSH
20872: LD_INT 1
20874: PPUSH
20875: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
20879: LD_INT 37
20881: PPUSH
20882: LD_VAR 0 3
20886: PPUSH
20887: LD_INT 1
20889: PPUSH
20890: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
20894: LD_INT 5
20896: PPUSH
20897: LD_VAR 0 3
20901: PPUSH
20902: LD_INT 1
20904: PPUSH
20905: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
20909: LD_INT 66
20911: PPUSH
20912: LD_VAR 0 3
20916: PPUSH
20917: LD_INT 1
20919: PPUSH
20920: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
20924: LD_INT 21
20926: PPUSH
20927: LD_VAR 0 3
20931: PPUSH
20932: LD_INT 1
20934: PPUSH
20935: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
20939: LD_INT 22
20941: PPUSH
20942: LD_VAR 0 3
20946: PPUSH
20947: LD_INT 1
20949: PPUSH
20950: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
20954: LD_INT 54
20956: PPUSH
20957: LD_VAR 0 3
20961: PPUSH
20962: LD_INT 1
20964: PPUSH
20965: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
20969: LD_INT 0
20971: PPUSH
20972: LD_VAR 0 3
20976: PPUSH
20977: LD_INT 1
20979: PPUSH
20980: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
20984: LD_INT 1
20986: PPUSH
20987: LD_VAR 0 3
20991: PPUSH
20992: LD_INT 1
20994: PPUSH
20995: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
20999: LD_INT 2
21001: PPUSH
21002: LD_VAR 0 3
21006: PPUSH
21007: LD_INT 1
21009: PPUSH
21010: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
21014: LD_INT 3
21016: PPUSH
21017: LD_VAR 0 3
21021: PPUSH
21022: LD_INT 1
21024: PPUSH
21025: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
21029: LD_INT 4
21031: PPUSH
21032: LD_VAR 0 3
21036: PPUSH
21037: LD_INT 1
21039: PPUSH
21040: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
21044: LD_INT 5
21046: PPUSH
21047: LD_VAR 0 3
21051: PPUSH
21052: LD_INT 1
21054: PPUSH
21055: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
21059: LD_INT 6
21061: PPUSH
21062: LD_VAR 0 3
21066: PPUSH
21067: LD_INT 1
21069: PPUSH
21070: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
21074: LD_INT 7
21076: PPUSH
21077: LD_VAR 0 3
21081: PPUSH
21082: LD_INT 1
21084: PPUSH
21085: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
21089: LD_INT 8
21091: PPUSH
21092: LD_VAR 0 3
21096: PPUSH
21097: LD_INT 1
21099: PPUSH
21100: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
21104: LD_INT 10
21106: PPUSH
21107: LD_VAR 0 3
21111: PPUSH
21112: LD_INT 1
21114: PPUSH
21115: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
21119: LD_INT 11
21121: PPUSH
21122: LD_VAR 0 3
21126: PPUSH
21127: LD_INT 1
21129: PPUSH
21130: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
21134: LD_INT 12
21136: PPUSH
21137: LD_VAR 0 3
21141: PPUSH
21142: LD_INT 1
21144: PPUSH
21145: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
21149: LD_INT 13
21151: PPUSH
21152: LD_VAR 0 3
21156: PPUSH
21157: LD_INT 1
21159: PPUSH
21160: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
21164: LD_INT 14
21166: PPUSH
21167: LD_VAR 0 3
21171: PPUSH
21172: LD_INT 1
21174: PPUSH
21175: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
21179: LD_INT 15
21181: PPUSH
21182: LD_VAR 0 3
21186: PPUSH
21187: LD_INT 1
21189: PPUSH
21190: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
21194: LD_INT 16
21196: PPUSH
21197: LD_VAR 0 3
21201: PPUSH
21202: LD_INT 1
21204: PPUSH
21205: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
21209: LD_INT 17
21211: PPUSH
21212: LD_VAR 0 3
21216: PPUSH
21217: LD_INT 1
21219: PPUSH
21220: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
21224: LD_INT 19
21226: PPUSH
21227: LD_VAR 0 3
21231: PPUSH
21232: LD_INT 1
21234: PPUSH
21235: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
21239: LD_INT 20
21241: PPUSH
21242: LD_VAR 0 3
21246: PPUSH
21247: LD_INT 1
21249: PPUSH
21250: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
21254: LD_INT 21
21256: PPUSH
21257: LD_VAR 0 3
21261: PPUSH
21262: LD_INT 1
21264: PPUSH
21265: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
21269: LD_INT 23
21271: PPUSH
21272: LD_VAR 0 3
21276: PPUSH
21277: LD_INT 1
21279: PPUSH
21280: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
21284: LD_INT 26
21286: PPUSH
21287: LD_VAR 0 3
21291: PPUSH
21292: LD_INT 1
21294: PPUSH
21295: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
21299: LD_INT 27
21301: PPUSH
21302: LD_VAR 0 3
21306: PPUSH
21307: LD_INT 1
21309: PPUSH
21310: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
21314: LD_INT 28
21316: PPUSH
21317: LD_VAR 0 3
21321: PPUSH
21322: LD_INT 1
21324: PPUSH
21325: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
21329: LD_INT 29
21331: PPUSH
21332: LD_VAR 0 3
21336: PPUSH
21337: LD_INT 1
21339: PPUSH
21340: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
21344: LD_INT 30
21346: PPUSH
21347: LD_VAR 0 3
21351: PPUSH
21352: LD_INT 1
21354: PPUSH
21355: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
21359: LD_INT 31
21361: PPUSH
21362: LD_VAR 0 3
21366: PPUSH
21367: LD_INT 1
21369: PPUSH
21370: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
21374: LD_INT 32
21376: PPUSH
21377: LD_VAR 0 3
21381: PPUSH
21382: LD_INT 1
21384: PPUSH
21385: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
21389: LD_INT 36
21391: PPUSH
21392: LD_VAR 0 3
21396: PPUSH
21397: LD_INT 1
21399: PPUSH
21400: CALL_OW 324
// end ; 5 :
21404: GO 23535
21406: LD_INT 5
21408: DOUBLE
21409: EQUAL
21410: IFTRUE 21414
21412: GO 22527
21414: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
21415: LD_INT 35
21417: PPUSH
21418: LD_VAR 0 3
21422: PPUSH
21423: LD_INT 1
21425: PPUSH
21426: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
21430: LD_INT 45
21432: PPUSH
21433: LD_VAR 0 3
21437: PPUSH
21438: LD_INT 1
21440: PPUSH
21441: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
21445: LD_INT 46
21447: PPUSH
21448: LD_VAR 0 3
21452: PPUSH
21453: LD_INT 1
21455: PPUSH
21456: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
21460: LD_INT 47
21462: PPUSH
21463: LD_VAR 0 3
21467: PPUSH
21468: LD_INT 1
21470: PPUSH
21471: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
21475: LD_INT 1
21477: PPUSH
21478: LD_VAR 0 3
21482: PPUSH
21483: LD_INT 1
21485: PPUSH
21486: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
21490: LD_INT 2
21492: PPUSH
21493: LD_VAR 0 3
21497: PPUSH
21498: LD_INT 1
21500: PPUSH
21501: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
21505: LD_INT 11
21507: PPUSH
21508: LD_VAR 0 3
21512: PPUSH
21513: LD_INT 1
21515: PPUSH
21516: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
21520: LD_INT 20
21522: PPUSH
21523: LD_VAR 0 3
21527: PPUSH
21528: LD_INT 1
21530: PPUSH
21531: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
21535: LD_INT 48
21537: PPUSH
21538: LD_VAR 0 3
21542: PPUSH
21543: LD_INT 1
21545: PPUSH
21546: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
21550: LD_INT 49
21552: PPUSH
21553: LD_VAR 0 3
21557: PPUSH
21558: LD_INT 1
21560: PPUSH
21561: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
21565: LD_INT 69
21567: PPUSH
21568: LD_VAR 0 3
21572: PPUSH
21573: LD_INT 1
21575: PPUSH
21576: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
21580: LD_INT 39
21582: PPUSH
21583: LD_VAR 0 3
21587: PPUSH
21588: LD_INT 1
21590: PPUSH
21591: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
21595: LD_INT 34
21597: PPUSH
21598: LD_VAR 0 3
21602: PPUSH
21603: LD_INT 1
21605: PPUSH
21606: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
21610: LD_INT 42
21612: PPUSH
21613: LD_VAR 0 3
21617: PPUSH
21618: LD_INT 1
21620: PPUSH
21621: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
21625: LD_INT 44
21627: PPUSH
21628: LD_VAR 0 3
21632: PPUSH
21633: LD_INT 1
21635: PPUSH
21636: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
21640: LD_INT 41
21642: PPUSH
21643: LD_VAR 0 3
21647: PPUSH
21648: LD_INT 1
21650: PPUSH
21651: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
21655: LD_INT 40
21657: PPUSH
21658: LD_VAR 0 3
21662: PPUSH
21663: LD_INT 1
21665: PPUSH
21666: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
21670: LD_INT 43
21672: PPUSH
21673: LD_VAR 0 3
21677: PPUSH
21678: LD_INT 1
21680: PPUSH
21681: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
21685: LD_INT 70
21687: PPUSH
21688: LD_VAR 0 3
21692: PPUSH
21693: LD_INT 1
21695: PPUSH
21696: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
21700: LD_INT 51
21702: PPUSH
21703: LD_VAR 0 3
21707: PPUSH
21708: LD_INT 1
21710: PPUSH
21711: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
21715: LD_INT 52
21717: PPUSH
21718: LD_VAR 0 3
21722: PPUSH
21723: LD_INT 1
21725: PPUSH
21726: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
21730: LD_INT 6
21732: PPUSH
21733: LD_VAR 0 3
21737: PPUSH
21738: LD_INT 1
21740: PPUSH
21741: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
21745: LD_INT 15
21747: PPUSH
21748: LD_VAR 0 3
21752: PPUSH
21753: LD_INT 1
21755: PPUSH
21756: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
21760: LD_INT 7
21762: PPUSH
21763: LD_VAR 0 3
21767: PPUSH
21768: LD_INT 1
21770: PPUSH
21771: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
21775: LD_INT 12
21777: PPUSH
21778: LD_VAR 0 3
21782: PPUSH
21783: LD_INT 1
21785: PPUSH
21786: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
21790: LD_INT 17
21792: PPUSH
21793: LD_VAR 0 3
21797: PPUSH
21798: LD_INT 1
21800: PPUSH
21801: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
21805: LD_INT 18
21807: PPUSH
21808: LD_VAR 0 3
21812: PPUSH
21813: LD_INT 1
21815: PPUSH
21816: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
21820: LD_INT 60
21822: PPUSH
21823: LD_VAR 0 3
21827: PPUSH
21828: LD_INT 1
21830: PPUSH
21831: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
21835: LD_INT 32
21837: PPUSH
21838: LD_VAR 0 3
21842: PPUSH
21843: LD_INT 1
21845: PPUSH
21846: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
21850: LD_INT 9
21852: PPUSH
21853: LD_VAR 0 3
21857: PPUSH
21858: LD_INT 1
21860: PPUSH
21861: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
21865: LD_INT 57
21867: PPUSH
21868: LD_VAR 0 3
21872: PPUSH
21873: LD_INT 1
21875: PPUSH
21876: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
21880: LD_INT 30
21882: PPUSH
21883: LD_VAR 0 3
21887: PPUSH
21888: LD_INT 1
21890: PPUSH
21891: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
21895: LD_INT 37
21897: PPUSH
21898: LD_VAR 0 3
21902: PPUSH
21903: LD_INT 1
21905: PPUSH
21906: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
21910: LD_INT 63
21912: PPUSH
21913: LD_VAR 0 3
21917: PPUSH
21918: LD_INT 1
21920: PPUSH
21921: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
21925: LD_INT 3
21927: PPUSH
21928: LD_VAR 0 3
21932: PPUSH
21933: LD_INT 1
21935: PPUSH
21936: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
21940: LD_INT 4
21942: PPUSH
21943: LD_VAR 0 3
21947: PPUSH
21948: LD_INT 1
21950: PPUSH
21951: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
21955: LD_INT 5
21957: PPUSH
21958: LD_VAR 0 3
21962: PPUSH
21963: LD_INT 1
21965: PPUSH
21966: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
21970: LD_INT 66
21972: PPUSH
21973: LD_VAR 0 3
21977: PPUSH
21978: LD_INT 1
21980: PPUSH
21981: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
21985: LD_INT 21
21987: PPUSH
21988: LD_VAR 0 3
21992: PPUSH
21993: LD_INT 1
21995: PPUSH
21996: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
22000: LD_INT 22
22002: PPUSH
22003: LD_VAR 0 3
22007: PPUSH
22008: LD_INT 1
22010: PPUSH
22011: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
22015: LD_INT 19
22017: PPUSH
22018: LD_VAR 0 3
22022: PPUSH
22023: LD_INT 1
22025: PPUSH
22026: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
22030: LD_INT 54
22032: PPUSH
22033: LD_VAR 0 3
22037: PPUSH
22038: LD_INT 1
22040: PPUSH
22041: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
22045: LD_INT 55
22047: PPUSH
22048: LD_VAR 0 3
22052: PPUSH
22053: LD_INT 1
22055: PPUSH
22056: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22060: LD_INT 0
22062: PPUSH
22063: LD_VAR 0 3
22067: PPUSH
22068: LD_INT 1
22070: PPUSH
22071: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
22075: LD_INT 1
22077: PPUSH
22078: LD_VAR 0 3
22082: PPUSH
22083: LD_INT 1
22085: PPUSH
22086: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22090: LD_INT 2
22092: PPUSH
22093: LD_VAR 0 3
22097: PPUSH
22098: LD_INT 1
22100: PPUSH
22101: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
22105: LD_INT 3
22107: PPUSH
22108: LD_VAR 0 3
22112: PPUSH
22113: LD_INT 1
22115: PPUSH
22116: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22120: LD_INT 4
22122: PPUSH
22123: LD_VAR 0 3
22127: PPUSH
22128: LD_INT 1
22130: PPUSH
22131: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
22135: LD_INT 5
22137: PPUSH
22138: LD_VAR 0 3
22142: PPUSH
22143: LD_INT 1
22145: PPUSH
22146: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22150: LD_INT 6
22152: PPUSH
22153: LD_VAR 0 3
22157: PPUSH
22158: LD_INT 1
22160: PPUSH
22161: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
22165: LD_INT 7
22167: PPUSH
22168: LD_VAR 0 3
22172: PPUSH
22173: LD_INT 1
22175: PPUSH
22176: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
22180: LD_INT 8
22182: PPUSH
22183: LD_VAR 0 3
22187: PPUSH
22188: LD_INT 1
22190: PPUSH
22191: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
22195: LD_INT 10
22197: PPUSH
22198: LD_VAR 0 3
22202: PPUSH
22203: LD_INT 1
22205: PPUSH
22206: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
22210: LD_INT 11
22212: PPUSH
22213: LD_VAR 0 3
22217: PPUSH
22218: LD_INT 1
22220: PPUSH
22221: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
22225: LD_INT 12
22227: PPUSH
22228: LD_VAR 0 3
22232: PPUSH
22233: LD_INT 1
22235: PPUSH
22236: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
22240: LD_INT 13
22242: PPUSH
22243: LD_VAR 0 3
22247: PPUSH
22248: LD_INT 1
22250: PPUSH
22251: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
22255: LD_INT 14
22257: PPUSH
22258: LD_VAR 0 3
22262: PPUSH
22263: LD_INT 1
22265: PPUSH
22266: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
22270: LD_INT 15
22272: PPUSH
22273: LD_VAR 0 3
22277: PPUSH
22278: LD_INT 1
22280: PPUSH
22281: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
22285: LD_INT 16
22287: PPUSH
22288: LD_VAR 0 3
22292: PPUSH
22293: LD_INT 1
22295: PPUSH
22296: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
22300: LD_INT 17
22302: PPUSH
22303: LD_VAR 0 3
22307: PPUSH
22308: LD_INT 1
22310: PPUSH
22311: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
22315: LD_INT 18
22317: PPUSH
22318: LD_VAR 0 3
22322: PPUSH
22323: LD_INT 1
22325: PPUSH
22326: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
22330: LD_INT 19
22332: PPUSH
22333: LD_VAR 0 3
22337: PPUSH
22338: LD_INT 1
22340: PPUSH
22341: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
22345: LD_INT 20
22347: PPUSH
22348: LD_VAR 0 3
22352: PPUSH
22353: LD_INT 1
22355: PPUSH
22356: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
22360: LD_INT 21
22362: PPUSH
22363: LD_VAR 0 3
22367: PPUSH
22368: LD_INT 1
22370: PPUSH
22371: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
22375: LD_INT 23
22377: PPUSH
22378: LD_VAR 0 3
22382: PPUSH
22383: LD_INT 1
22385: PPUSH
22386: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
22390: LD_INT 26
22392: PPUSH
22393: LD_VAR 0 3
22397: PPUSH
22398: LD_INT 1
22400: PPUSH
22401: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
22405: LD_INT 27
22407: PPUSH
22408: LD_VAR 0 3
22412: PPUSH
22413: LD_INT 1
22415: PPUSH
22416: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
22420: LD_INT 28
22422: PPUSH
22423: LD_VAR 0 3
22427: PPUSH
22428: LD_INT 1
22430: PPUSH
22431: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22435: LD_INT 29
22437: PPUSH
22438: LD_VAR 0 3
22442: PPUSH
22443: LD_INT 1
22445: PPUSH
22446: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
22450: LD_INT 30
22452: PPUSH
22453: LD_VAR 0 3
22457: PPUSH
22458: LD_INT 1
22460: PPUSH
22461: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22465: LD_INT 31
22467: PPUSH
22468: LD_VAR 0 3
22472: PPUSH
22473: LD_INT 1
22475: PPUSH
22476: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
22480: LD_INT 32
22482: PPUSH
22483: LD_VAR 0 3
22487: PPUSH
22488: LD_INT 1
22490: PPUSH
22491: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
22495: LD_INT 33
22497: PPUSH
22498: LD_VAR 0 3
22502: PPUSH
22503: LD_INT 1
22505: PPUSH
22506: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
22510: LD_INT 36
22512: PPUSH
22513: LD_VAR 0 3
22517: PPUSH
22518: LD_INT 1
22520: PPUSH
22521: CALL_OW 324
// end ; 6 :
22525: GO 23535
22527: LD_INT 6
22529: DOUBLE
22530: EQUAL
22531: IFTRUE 22535
22533: GO 23460
22535: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22536: LD_INT 35
22538: PPUSH
22539: LD_VAR 0 3
22543: PPUSH
22544: LD_INT 1
22546: PPUSH
22547: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22551: LD_INT 45
22553: PPUSH
22554: LD_VAR 0 3
22558: PPUSH
22559: LD_INT 1
22561: PPUSH
22562: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22566: LD_INT 46
22568: PPUSH
22569: LD_VAR 0 3
22573: PPUSH
22574: LD_INT 1
22576: PPUSH
22577: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22581: LD_INT 47
22583: PPUSH
22584: LD_VAR 0 3
22588: PPUSH
22589: LD_INT 1
22591: PPUSH
22592: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22596: LD_INT 1
22598: PPUSH
22599: LD_VAR 0 3
22603: PPUSH
22604: LD_INT 1
22606: PPUSH
22607: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22611: LD_INT 2
22613: PPUSH
22614: LD_VAR 0 3
22618: PPUSH
22619: LD_INT 1
22621: PPUSH
22622: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22626: LD_INT 11
22628: PPUSH
22629: LD_VAR 0 3
22633: PPUSH
22634: LD_INT 1
22636: PPUSH
22637: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
22641: LD_INT 20
22643: PPUSH
22644: LD_VAR 0 3
22648: PPUSH
22649: LD_INT 1
22651: PPUSH
22652: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
22656: LD_INT 48
22658: PPUSH
22659: LD_VAR 0 3
22663: PPUSH
22664: LD_INT 1
22666: PPUSH
22667: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
22671: LD_INT 49
22673: PPUSH
22674: LD_VAR 0 3
22678: PPUSH
22679: LD_INT 1
22681: PPUSH
22682: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
22686: LD_INT 50
22688: PPUSH
22689: LD_VAR 0 3
22693: PPUSH
22694: LD_INT 1
22696: PPUSH
22697: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
22701: LD_INT 69
22703: PPUSH
22704: LD_VAR 0 3
22708: PPUSH
22709: LD_INT 1
22711: PPUSH
22712: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
22716: LD_INT 39
22718: PPUSH
22719: LD_VAR 0 3
22723: PPUSH
22724: LD_INT 1
22726: PPUSH
22727: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
22731: LD_INT 34
22733: PPUSH
22734: LD_VAR 0 3
22738: PPUSH
22739: LD_INT 1
22741: PPUSH
22742: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
22746: LD_INT 42
22748: PPUSH
22749: LD_VAR 0 3
22753: PPUSH
22754: LD_INT 1
22756: PPUSH
22757: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
22761: LD_INT 44
22763: PPUSH
22764: LD_VAR 0 3
22768: PPUSH
22769: LD_INT 1
22771: PPUSH
22772: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
22776: LD_INT 41
22778: PPUSH
22779: LD_VAR 0 3
22783: PPUSH
22784: LD_INT 1
22786: PPUSH
22787: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
22791: LD_INT 13
22793: PPUSH
22794: LD_VAR 0 3
22798: PPUSH
22799: LD_INT 1
22801: PPUSH
22802: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
22806: LD_INT 40
22808: PPUSH
22809: LD_VAR 0 3
22813: PPUSH
22814: LD_INT 1
22816: PPUSH
22817: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
22821: LD_INT 43
22823: PPUSH
22824: LD_VAR 0 3
22828: PPUSH
22829: LD_INT 1
22831: PPUSH
22832: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
22836: LD_INT 70
22838: PPUSH
22839: LD_VAR 0 3
22843: PPUSH
22844: LD_INT 1
22846: PPUSH
22847: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
22851: LD_INT 23
22853: PPUSH
22854: LD_VAR 0 3
22858: PPUSH
22859: LD_INT 1
22861: PPUSH
22862: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
22866: LD_INT 51
22868: PPUSH
22869: LD_VAR 0 3
22873: PPUSH
22874: LD_INT 1
22876: PPUSH
22877: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
22881: LD_INT 52
22883: PPUSH
22884: LD_VAR 0 3
22888: PPUSH
22889: LD_INT 1
22891: PPUSH
22892: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
22896: LD_INT 6
22898: PPUSH
22899: LD_VAR 0 3
22903: PPUSH
22904: LD_INT 1
22906: PPUSH
22907: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
22911: LD_INT 15
22913: PPUSH
22914: LD_VAR 0 3
22918: PPUSH
22919: LD_INT 1
22921: PPUSH
22922: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
22926: LD_INT 7
22928: PPUSH
22929: LD_VAR 0 3
22933: PPUSH
22934: LD_INT 1
22936: PPUSH
22937: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
22941: LD_INT 12
22943: PPUSH
22944: LD_VAR 0 3
22948: PPUSH
22949: LD_INT 1
22951: PPUSH
22952: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
22956: LD_INT 10
22958: PPUSH
22959: LD_VAR 0 3
22963: PPUSH
22964: LD_INT 1
22966: PPUSH
22967: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
22971: LD_INT 17
22973: PPUSH
22974: LD_VAR 0 3
22978: PPUSH
22979: LD_INT 1
22981: PPUSH
22982: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
22986: LD_INT 18
22988: PPUSH
22989: LD_VAR 0 3
22993: PPUSH
22994: LD_INT 1
22996: PPUSH
22997: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
23001: LD_INT 60
23003: PPUSH
23004: LD_VAR 0 3
23008: PPUSH
23009: LD_INT 1
23011: PPUSH
23012: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
23016: LD_INT 61
23018: PPUSH
23019: LD_VAR 0 3
23023: PPUSH
23024: LD_INT 1
23026: PPUSH
23027: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
23031: LD_INT 32
23033: PPUSH
23034: LD_VAR 0 3
23038: PPUSH
23039: LD_INT 1
23041: PPUSH
23042: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
23046: LD_INT 27
23048: PPUSH
23049: LD_VAR 0 3
23053: PPUSH
23054: LD_INT 1
23056: PPUSH
23057: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
23061: LD_INT 36
23063: PPUSH
23064: LD_VAR 0 3
23068: PPUSH
23069: LD_INT 1
23071: PPUSH
23072: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
23076: LD_INT 33
23078: PPUSH
23079: LD_VAR 0 3
23083: PPUSH
23084: LD_INT 1
23086: PPUSH
23087: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
23091: LD_INT 9
23093: PPUSH
23094: LD_VAR 0 3
23098: PPUSH
23099: LD_INT 1
23101: PPUSH
23102: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
23106: LD_INT 38
23108: PPUSH
23109: LD_VAR 0 3
23113: PPUSH
23114: LD_INT 1
23116: PPUSH
23117: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
23121: LD_INT 57
23123: PPUSH
23124: LD_VAR 0 3
23128: PPUSH
23129: LD_INT 1
23131: PPUSH
23132: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
23136: LD_INT 58
23138: PPUSH
23139: LD_VAR 0 3
23143: PPUSH
23144: LD_INT 1
23146: PPUSH
23147: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
23151: LD_INT 28
23153: PPUSH
23154: LD_VAR 0 3
23158: PPUSH
23159: LD_INT 1
23161: PPUSH
23162: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
23166: LD_INT 29
23168: PPUSH
23169: LD_VAR 0 3
23173: PPUSH
23174: LD_INT 1
23176: PPUSH
23177: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
23181: LD_INT 30
23183: PPUSH
23184: LD_VAR 0 3
23188: PPUSH
23189: LD_INT 1
23191: PPUSH
23192: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
23196: LD_INT 37
23198: PPUSH
23199: LD_VAR 0 3
23203: PPUSH
23204: LD_INT 1
23206: PPUSH
23207: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
23211: LD_INT 63
23213: PPUSH
23214: LD_VAR 0 3
23218: PPUSH
23219: LD_INT 1
23221: PPUSH
23222: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
23226: LD_INT 64
23228: PPUSH
23229: LD_VAR 0 3
23233: PPUSH
23234: LD_INT 1
23236: PPUSH
23237: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
23241: LD_INT 3
23243: PPUSH
23244: LD_VAR 0 3
23248: PPUSH
23249: LD_INT 1
23251: PPUSH
23252: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
23256: LD_INT 4
23258: PPUSH
23259: LD_VAR 0 3
23263: PPUSH
23264: LD_INT 1
23266: PPUSH
23267: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
23271: LD_INT 5
23273: PPUSH
23274: LD_VAR 0 3
23278: PPUSH
23279: LD_INT 1
23281: PPUSH
23282: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
23286: LD_INT 8
23288: PPUSH
23289: LD_VAR 0 3
23293: PPUSH
23294: LD_INT 1
23296: PPUSH
23297: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
23301: LD_INT 66
23303: PPUSH
23304: LD_VAR 0 3
23308: PPUSH
23309: LD_INT 1
23311: PPUSH
23312: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
23316: LD_INT 67
23318: PPUSH
23319: LD_VAR 0 3
23323: PPUSH
23324: LD_INT 1
23326: PPUSH
23327: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
23331: LD_INT 21
23333: PPUSH
23334: LD_VAR 0 3
23338: PPUSH
23339: LD_INT 1
23341: PPUSH
23342: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
23346: LD_INT 22
23348: PPUSH
23349: LD_VAR 0 3
23353: PPUSH
23354: LD_INT 1
23356: PPUSH
23357: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
23361: LD_INT 19
23363: PPUSH
23364: LD_VAR 0 3
23368: PPUSH
23369: LD_INT 1
23371: PPUSH
23372: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
23376: LD_INT 26
23378: PPUSH
23379: LD_VAR 0 3
23383: PPUSH
23384: LD_INT 1
23386: PPUSH
23387: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
23391: LD_INT 54
23393: PPUSH
23394: LD_VAR 0 3
23398: PPUSH
23399: LD_INT 1
23401: PPUSH
23402: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
23406: LD_INT 55
23408: PPUSH
23409: LD_VAR 0 3
23413: PPUSH
23414: LD_INT 1
23416: PPUSH
23417: CALL_OW 322
// for i = 0 to 39 do
23421: LD_ADDR_VAR 0 4
23425: PUSH
23426: DOUBLE
23427: LD_INT 0
23429: DEC
23430: ST_TO_ADDR
23431: LD_INT 39
23433: PUSH
23434: FOR_TO
23435: IFFALSE 23456
// SetRestrict ( i , side , true ) ;
23437: LD_VAR 0 4
23441: PPUSH
23442: LD_VAR 0 3
23446: PPUSH
23447: LD_INT 1
23449: PPUSH
23450: CALL_OW 324
23454: GO 23434
23456: POP
23457: POP
// end ; else
23458: GO 23535
23460: POP
// begin for i = 1 to 73 do
23461: LD_ADDR_VAR 0 4
23465: PUSH
23466: DOUBLE
23467: LD_INT 1
23469: DEC
23470: ST_TO_ADDR
23471: LD_INT 73
23473: PUSH
23474: FOR_TO
23475: IFFALSE 23496
// SetTech ( i , side , state_enabled ) ;
23477: LD_VAR 0 4
23481: PPUSH
23482: LD_VAR 0 3
23486: PPUSH
23487: LD_INT 1
23489: PPUSH
23490: CALL_OW 322
23494: GO 23474
23496: POP
23497: POP
// for i = 0 to 39 do
23498: LD_ADDR_VAR 0 4
23502: PUSH
23503: DOUBLE
23504: LD_INT 0
23506: DEC
23507: ST_TO_ADDR
23508: LD_INT 39
23510: PUSH
23511: FOR_TO
23512: IFFALSE 23533
// SetRestrict ( i , side , true ) ;
23514: LD_VAR 0 4
23518: PPUSH
23519: LD_VAR 0 3
23523: PPUSH
23524: LD_INT 1
23526: PPUSH
23527: CALL_OW 324
23531: GO 23511
23533: POP
23534: POP
// end ; end ; end ;
23535: GO 19540
23537: POP
23538: POP
// end ;
23539: LD_VAR 0 2
23543: RET
