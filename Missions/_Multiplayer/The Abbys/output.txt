// export def_base_size , def_west_nations , def_east_nations ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , respawning_time_min , respawning_time_max , siberite_bomb_Delay ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Position_Nations ; export depot_def , breastworks_def , labs_def , factory_def , start_def , extra_oil_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function prepare_deposits ; var list , un , deposits ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
// list := GetListOfResourcesInArea ( west_side ) ^ GetListOfResourcesInArea ( east_side ) ;
   6: LD_ADDR_VAR 0 2
  10: PUSH
  11: LD_INT 8
  13: PPUSH
  14: CALL_OW 442
  18: PUSH
  19: LD_INT 9
  21: PPUSH
  22: CALL_OW 442
  26: ADD
  27: ST_TO_ADDR
// for un = 1 to ( list div 3 ) do
  28: LD_ADDR_VAR 0 3
  32: PUSH
  33: DOUBLE
  34: LD_INT 1
  36: DEC
  37: ST_TO_ADDR
  38: LD_VAR 0 2
  42: PUSH
  43: LD_INT 3
  45: DIV
  46: PUSH
  47: FOR_TO
  48: IFFALSE 94
// RemoveDepositXY ( list [ un * 3 - 2 ] , list [ un * 3 - 1 ] ) ;
  50: LD_VAR 0 2
  54: PUSH
  55: LD_VAR 0 3
  59: PUSH
  60: LD_INT 3
  62: MUL
  63: PUSH
  64: LD_INT 2
  66: MINUS
  67: ARRAY
  68: PPUSH
  69: LD_VAR 0 2
  73: PUSH
  74: LD_VAR 0 3
  78: PUSH
  79: LD_INT 3
  81: MUL
  82: PUSH
  83: LD_INT 1
  85: MINUS
  86: ARRAY
  87: PPUSH
  88: CALL_OW 63
  92: GO 47
  94: POP
  95: POP
// deposits := [ [ 40 , 49 , mat_oil ] , [ 40 , 68 , mat_oil ] , [ 9 , 3 , mat_siberit ] , [ 61 , 116 , mat_siberit ] , [ 177 , 46 , mat_oil ] , [ 185 , 71 , mat_oil ] , [ 157 , 3 , mat_siberit ] , [ 213 , 116 , mat_siberit ] ] ;
  96: LD_ADDR_VAR 0 4
 100: PUSH
 101: LD_INT 40
 103: PUSH
 104: LD_INT 49
 106: PUSH
 107: LD_INT 2
 109: PUSH
 110: EMPTY
 111: LIST
 112: LIST
 113: LIST
 114: PUSH
 115: LD_INT 40
 117: PUSH
 118: LD_INT 68
 120: PUSH
 121: LD_INT 2
 123: PUSH
 124: EMPTY
 125: LIST
 126: LIST
 127: LIST
 128: PUSH
 129: LD_INT 9
 131: PUSH
 132: LD_INT 3
 134: PUSH
 135: LD_INT 3
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: LIST
 142: PUSH
 143: LD_INT 61
 145: PUSH
 146: LD_INT 116
 148: PUSH
 149: LD_INT 3
 151: PUSH
 152: EMPTY
 153: LIST
 154: LIST
 155: LIST
 156: PUSH
 157: LD_INT 177
 159: PUSH
 160: LD_INT 46
 162: PUSH
 163: LD_INT 2
 165: PUSH
 166: EMPTY
 167: LIST
 168: LIST
 169: LIST
 170: PUSH
 171: LD_INT 185
 173: PUSH
 174: LD_INT 71
 176: PUSH
 177: LD_INT 2
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: LIST
 184: PUSH
 185: LD_INT 157
 187: PUSH
 188: LD_INT 3
 190: PUSH
 191: LD_INT 3
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: PUSH
 199: LD_INT 213
 201: PUSH
 202: LD_INT 116
 204: PUSH
 205: LD_INT 3
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: PUSH
 213: EMPTY
 214: LIST
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: ST_TO_ADDR
// for un in deposits do
 223: LD_ADDR_VAR 0 3
 227: PUSH
 228: LD_VAR 0 4
 232: PUSH
 233: FOR_IN
 234: IFFALSE 269
// CreateDepositXY ( un [ 1 ] , un [ 2 ] , un [ 3 ] ) ;
 236: LD_VAR 0 3
 240: PUSH
 241: LD_INT 1
 243: ARRAY
 244: PPUSH
 245: LD_VAR 0 3
 249: PUSH
 250: LD_INT 2
 252: ARRAY
 253: PPUSH
 254: LD_VAR 0 3
 258: PUSH
 259: LD_INT 3
 261: ARRAY
 262: PPUSH
 263: CALL_OW 62
 267: GO 233
 269: POP
 270: POP
// end ;
 271: LD_VAR 0 1
 275: RET
// function init_map ; var i ; begin
 276: LD_INT 0
 278: PPUSH
 279: PPUSH
// prepare_deposits ;
 280: CALL 0 0 0
// extra_oil_deposits_locations := [ [ 29 , 3 ] , [ 82 , 115 ] , [ 134 , 3 ] , [ 192 , 116 ] ] ;
 284: LD_ADDR_EXP 27
 288: PUSH
 289: LD_INT 29
 291: PUSH
 292: LD_INT 3
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: PUSH
 299: LD_INT 82
 301: PUSH
 302: LD_INT 115
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: PUSH
 309: LD_INT 134
 311: PUSH
 312: LD_INT 3
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: PUSH
 319: LD_INT 192
 321: PUSH
 322: LD_INT 116
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: LIST
 333: LIST
 334: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 62 , 60 ] , [ 157 , 60 ] ] ;
 335: LD_ADDR_EXP 28
 339: PUSH
 340: LD_INT 62
 342: PUSH
 343: LD_INT 60
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: PUSH
 350: LD_INT 157
 352: PUSH
 353: LD_INT 60
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: ST_TO_ADDR
// depot_def := [ [ 35 , 34 , 0 ] , [ 56 , 86 , 2 ] , [ 158 , 34 , 5 ] , [ 185 , 86 , 3 ] ] ;
 364: LD_ADDR_EXP 22
 368: PUSH
 369: LD_INT 35
 371: PUSH
 372: LD_INT 34
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: EMPTY
 379: LIST
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 56
 385: PUSH
 386: LD_INT 86
 388: PUSH
 389: LD_INT 2
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: LIST
 396: PUSH
 397: LD_INT 158
 399: PUSH
 400: LD_INT 34
 402: PUSH
 403: LD_INT 5
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: LD_INT 185
 413: PUSH
 414: LD_INT 86
 416: PUSH
 417: LD_INT 3
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: LIST
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: LIST
 429: LIST
 430: ST_TO_ADDR
// labs_def := [ [ 19 , 28 , 1 ] , [ 49 , 92 , 1 ] , [ 166 , 23 , 4 ] , [ 205 , 97 , 4 ] ] ;
 431: LD_ADDR_EXP 24
 435: PUSH
 436: LD_INT 19
 438: PUSH
 439: LD_INT 28
 441: PUSH
 442: LD_INT 1
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PUSH
 450: LD_INT 49
 452: PUSH
 453: LD_INT 92
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 166
 466: PUSH
 467: LD_INT 23
 469: PUSH
 470: LD_INT 4
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: LIST
 477: PUSH
 478: LD_INT 205
 480: PUSH
 481: LD_INT 97
 483: PUSH
 484: LD_INT 4
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: ST_TO_ADDR
// factory_def := [ [ 26 , 16 , 2 ] , [ 64 , 103 , 0 ] , [ 154 , 18 , 3 ] , [ 190 , 103 , 5 ] ] ;
 498: LD_ADDR_EXP 25
 502: PUSH
 503: LD_INT 26
 505: PUSH
 506: LD_INT 16
 508: PUSH
 509: LD_INT 2
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: LIST
 516: PUSH
 517: LD_INT 64
 519: PUSH
 520: LD_INT 103
 522: PUSH
 523: LD_INT 0
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 154
 533: PUSH
 534: LD_INT 18
 536: PUSH
 537: LD_INT 3
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_INT 190
 547: PUSH
 548: LD_INT 103
 550: PUSH
 551: LD_INT 5
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: LIST
 558: PUSH
 559: EMPTY
 560: LIST
 561: LIST
 562: LIST
 563: LIST
 564: ST_TO_ADDR
// start_def := [ [ 35 , 26 ] , [ 65 , 94 ] , [ 150 , 26 ] , [ 185 , 94 ] ] ;
 565: LD_ADDR_EXP 26
 569: PUSH
 570: LD_INT 35
 572: PUSH
 573: LD_INT 26
 575: PUSH
 576: EMPTY
 577: LIST
 578: LIST
 579: PUSH
 580: LD_INT 65
 582: PUSH
 583: LD_INT 94
 585: PUSH
 586: EMPTY
 587: LIST
 588: LIST
 589: PUSH
 590: LD_INT 150
 592: PUSH
 593: LD_INT 26
 595: PUSH
 596: EMPTY
 597: LIST
 598: LIST
 599: PUSH
 600: LD_INT 185
 602: PUSH
 603: LD_INT 94
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: ST_TO_ADDR
// breastworks_def := [ [ [ 44 , 18 , 4 ] , [ 47 , 51 , 5 ] , [ 35 , 8 , 4 ] , [ 50 , 38 , 5 ] ] , [ [ 81 , 97 , 4 ] , [ 54 , 71 , 3 ] , [ 81 , 110 , 5 ] , [ 66 , 82 , 3 ] ] , [ [ 136 , 20 , 1 ] , [ 164 , 48 , 1 ] , [ 130 , 8 , 1 ] , [ 147 , 37 , 0 ] ] , [ [ 181 , 103 , 1 ] , [ 178 , 72 , 1 ] , [ 186 , 112 , 1 ] , [ 172 , 82 , 2 ] ] ] ;
 616: LD_ADDR_EXP 23
 620: PUSH
 621: LD_INT 44
 623: PUSH
 624: LD_INT 18
 626: PUSH
 627: LD_INT 4
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: LIST
 634: PUSH
 635: LD_INT 47
 637: PUSH
 638: LD_INT 51
 640: PUSH
 641: LD_INT 5
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PUSH
 649: LD_INT 35
 651: PUSH
 652: LD_INT 8
 654: PUSH
 655: LD_INT 4
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: LIST
 662: PUSH
 663: LD_INT 50
 665: PUSH
 666: LD_INT 38
 668: PUSH
 669: LD_INT 5
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: LIST
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: PUSH
 683: LD_INT 81
 685: PUSH
 686: LD_INT 97
 688: PUSH
 689: LD_INT 4
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: PUSH
 697: LD_INT 54
 699: PUSH
 700: LD_INT 71
 702: PUSH
 703: LD_INT 3
 705: PUSH
 706: EMPTY
 707: LIST
 708: LIST
 709: LIST
 710: PUSH
 711: LD_INT 81
 713: PUSH
 714: LD_INT 110
 716: PUSH
 717: LD_INT 5
 719: PUSH
 720: EMPTY
 721: LIST
 722: LIST
 723: LIST
 724: PUSH
 725: LD_INT 66
 727: PUSH
 728: LD_INT 82
 730: PUSH
 731: LD_INT 3
 733: PUSH
 734: EMPTY
 735: LIST
 736: LIST
 737: LIST
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: LIST
 743: LIST
 744: PUSH
 745: LD_INT 136
 747: PUSH
 748: LD_INT 20
 750: PUSH
 751: LD_INT 1
 753: PUSH
 754: EMPTY
 755: LIST
 756: LIST
 757: LIST
 758: PUSH
 759: LD_INT 164
 761: PUSH
 762: LD_INT 48
 764: PUSH
 765: LD_INT 1
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: LIST
 772: PUSH
 773: LD_INT 130
 775: PUSH
 776: LD_INT 8
 778: PUSH
 779: LD_INT 1
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PUSH
 787: LD_INT 147
 789: PUSH
 790: LD_INT 37
 792: PUSH
 793: LD_INT 0
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: LIST
 800: PUSH
 801: EMPTY
 802: LIST
 803: LIST
 804: LIST
 805: LIST
 806: PUSH
 807: LD_INT 181
 809: PUSH
 810: LD_INT 103
 812: PUSH
 813: LD_INT 1
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: LIST
 820: PUSH
 821: LD_INT 178
 823: PUSH
 824: LD_INT 72
 826: PUSH
 827: LD_INT 1
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: LIST
 834: PUSH
 835: LD_INT 186
 837: PUSH
 838: LD_INT 112
 840: PUSH
 841: LD_INT 1
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: LIST
 848: PUSH
 849: LD_INT 172
 851: PUSH
 852: LD_INT 82
 854: PUSH
 855: LD_INT 2
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: LIST
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: LIST
 873: LIST
 874: ST_TO_ADDR
// if def_extra_oil_deposits then
 875: LD_EXP 63
 879: IFFALSE 923
// for i in extra_oil_deposits_locations do
 881: LD_ADDR_VAR 0 2
 885: PUSH
 886: LD_EXP 27
 890: PUSH
 891: FOR_IN
 892: IFFALSE 921
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
 894: LD_VAR 0 2
 898: PUSH
 899: LD_INT 1
 901: ARRAY
 902: PPUSH
 903: LD_VAR 0 2
 907: PUSH
 908: LD_INT 2
 910: ARRAY
 911: PPUSH
 912: LD_INT 2
 914: PPUSH
 915: CALL_OW 62
 919: GO 891
 921: POP
 922: POP
// if def_extra_sib_deposits then
 923: LD_EXP 64
 927: IFFALSE 971
// for i in extra_sib_deposits_locations do
 929: LD_ADDR_VAR 0 2
 933: PUSH
 934: LD_EXP 28
 938: PUSH
 939: FOR_IN
 940: IFFALSE 969
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 2
 958: ARRAY
 959: PPUSH
 960: LD_INT 3
 962: PPUSH
 963: CALL_OW 62
 967: GO 939
 969: POP
 970: POP
// end ;
 971: LD_VAR 0 1
 975: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
 976: LD_INT 0
 978: PPUSH
 979: PPUSH
 980: PPUSH
 981: PPUSH
 982: PPUSH
 983: PPUSH
 984: PPUSH
 985: PPUSH
 986: PPUSH
// if Multiplayer then
 987: LD_OWVAR 4
 991: IFFALSE 1055
// begin Game_Type = mp_game_type ;
 993: LD_ADDR_EXP 56
 997: PUSH
 998: LD_OWVAR 6
1002: ST_TO_ADDR
// Your_Side := mp_player_side ;
1003: LD_ADDR_OWVAR 2
1007: PUSH
1008: LD_OWVAR 7
1012: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
1013: LD_ADDR_EXP 18
1017: PUSH
1018: LD_OWVAR 17
1022: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
1023: LD_ADDR_EXP 16
1027: PUSH
1028: LD_OWVAR 15
1032: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
1033: LD_ADDR_EXP 19
1037: PUSH
1038: LD_OWVAR 16
1042: ST_TO_ADDR
// Teams = mp_teams ;
1043: LD_ADDR_EXP 17
1047: PUSH
1048: LD_OWVAR 12
1052: ST_TO_ADDR
// end else
1053: GO 1195
// begin Game_Type = 12 ;
1055: LD_ADDR_EXP 56
1059: PUSH
1060: LD_INT 12
1062: ST_TO_ADDR
// Your_Side = 4 ;
1063: LD_ADDR_OWVAR 2
1067: PUSH
1068: LD_INT 4
1070: ST_TO_ADDR
// Side_Positions = [ 1 , 0 , 0 , 0 , 0 , 0 , 0 , 3 ] ;
1071: LD_ADDR_EXP 18
1075: PUSH
1076: LD_INT 1
1078: PUSH
1079: LD_INT 0
1081: PUSH
1082: LD_INT 0
1084: PUSH
1085: LD_INT 0
1087: PUSH
1088: LD_INT 0
1090: PUSH
1091: LD_INT 0
1093: PUSH
1094: LD_INT 0
1096: PUSH
1097: LD_INT 3
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: LIST
1106: LIST
1107: LIST
1108: LIST
1109: ST_TO_ADDR
// Side_Teams = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
1110: LD_ADDR_EXP 16
1114: PUSH
1115: LD_INT 0
1117: PUSH
1118: LD_INT 0
1120: PUSH
1121: LD_INT 0
1123: PUSH
1124: LD_INT 0
1126: PUSH
1127: LD_INT 0
1129: PUSH
1130: LD_INT 0
1132: PUSH
1133: LD_INT 0
1135: PUSH
1136: LD_INT 0
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: LIST
1148: ST_TO_ADDR
// Side_Nations = [ 3 , 0 , 0 , 0 , 0 , 0 , 0 , 1 ] ;
1149: LD_ADDR_EXP 19
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: LD_INT 0
1159: PUSH
1160: LD_INT 0
1162: PUSH
1163: LD_INT 0
1165: PUSH
1166: LD_INT 0
1168: PUSH
1169: LD_INT 0
1171: PUSH
1172: LD_INT 0
1174: PUSH
1175: LD_INT 1
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: LIST
1186: LIST
1187: ST_TO_ADDR
// Teams = [ ] ;
1188: LD_ADDR_EXP 17
1192: PUSH
1193: EMPTY
1194: ST_TO_ADDR
// end ; for i := 1 to 8 do
1195: LD_ADDR_VAR 0 8
1199: PUSH
1200: DOUBLE
1201: LD_INT 1
1203: DEC
1204: ST_TO_ADDR
1205: LD_INT 8
1207: PUSH
1208: FOR_TO
1209: IFFALSE 1296
// if Multiplayer_GetPlayerIsSpec ( i ) then
1211: LD_VAR 0 8
1215: PPUSH
1216: CALL_OW 530
1220: IFFALSE 1294
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
1222: LD_ADDR_EXP 18
1226: PUSH
1227: LD_EXP 18
1231: PPUSH
1232: LD_VAR 0 8
1236: PPUSH
1237: LD_INT 0
1239: PPUSH
1240: CALL_OW 1
1244: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
1245: LD_ADDR_EXP 17
1249: PUSH
1250: LD_EXP 17
1254: PPUSH
1255: LD_EXP 16
1259: PUSH
1260: LD_VAR 0 8
1264: ARRAY
1265: PPUSH
1266: LD_EXP 17
1270: PUSH
1271: LD_EXP 16
1275: PUSH
1276: LD_VAR 0 8
1280: ARRAY
1281: ARRAY
1282: PUSH
1283: LD_VAR 0 8
1287: DIFF
1288: PPUSH
1289: CALL_OW 1
1293: ST_TO_ADDR
// end ;
1294: GO 1208
1296: POP
1297: POP
// if Multiplayer then
1298: LD_OWVAR 4
1302: IFFALSE 1527
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
1304: LD_ADDR_EXP 58
1308: PUSH
1309: LD_INT 0
1311: PPUSH
1312: CALL_OW 426
1316: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
1317: LD_ADDR_EXP 59
1321: PUSH
1322: LD_INT 1
1324: PPUSH
1325: CALL_OW 426
1329: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
1330: LD_ADDR_EXP 60
1334: PUSH
1335: LD_INT 2
1337: PPUSH
1338: CALL_OW 426
1342: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
1343: LD_ADDR_EXP 61
1347: PUSH
1348: LD_INT 3
1350: PPUSH
1351: CALL_OW 426
1355: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
1356: LD_ADDR_EXP 62
1360: PUSH
1361: LD_INT 4
1363: PPUSH
1364: CALL_OW 426
1368: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
1369: LD_ADDR_EXP 63
1373: PUSH
1374: LD_INT 5
1376: PPUSH
1377: CALL_OW 426
1381: ST_TO_ADDR
// def_extra_sib_deposits = GetMultiplayerSetting ( 6 ) ;
1382: LD_ADDR_EXP 64
1386: PUSH
1387: LD_INT 6
1389: PPUSH
1390: CALL_OW 426
1394: ST_TO_ADDR
// def_base_size = GetMultiplayerSetting ( 7 ) ;
1395: LD_ADDR_EXP 1
1399: PUSH
1400: LD_INT 7
1402: PPUSH
1403: CALL_OW 426
1407: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
1408: LD_ADDR_EXP 65
1412: PUSH
1413: LD_INT 10
1415: PPUSH
1416: CALL_OW 426
1420: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
1421: LD_ADDR_EXP 66
1425: PUSH
1426: LD_INT 11
1428: PPUSH
1429: CALL_OW 426
1433: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
1434: LD_ADDR_EXP 67
1438: PUSH
1439: LD_INT 12
1441: PPUSH
1442: CALL_OW 426
1446: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
1447: LD_ADDR_EXP 69
1451: PUSH
1452: LD_INT 13
1454: PPUSH
1455: CALL_OW 426
1459: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
1460: LD_ADDR_EXP 68
1464: PUSH
1465: LD_INT 14
1467: PPUSH
1468: CALL_OW 426
1472: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
1473: LD_ADDR_EXP 70
1477: PUSH
1478: LD_INT 15
1480: PPUSH
1481: CALL_OW 426
1485: ST_TO_ADDR
// def_west_nations = GetMultiplayerSetting ( 21 ) ;
1486: LD_ADDR_EXP 2
1490: PUSH
1491: LD_INT 21
1493: PPUSH
1494: CALL_OW 426
1498: ST_TO_ADDR
// def_east_nations = GetMultiplayerSetting ( 22 ) ;
1499: LD_ADDR_EXP 3
1503: PUSH
1504: LD_INT 22
1506: PPUSH
1507: CALL_OW 426
1511: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 23 ) ;
1512: LD_ADDR_VAR 0 9
1516: PUSH
1517: LD_INT 23
1519: PPUSH
1520: CALL_OW 426
1524: ST_TO_ADDR
// end else
1525: GO 1667
// begin randomize ;
1527: CALL_OW 10
// def_base_level = 3 ;
1531: LD_ADDR_EXP 58
1535: PUSH
1536: LD_INT 3
1538: ST_TO_ADDR
// def_amount_of_people = 1 ;
1539: LD_ADDR_EXP 59
1543: PUSH
1544: LD_INT 1
1546: ST_TO_ADDR
// def_skill_level = 1 ;
1547: LD_ADDR_EXP 60
1551: PUSH
1552: LD_INT 1
1554: ST_TO_ADDR
// def_starting_resources = 2 ;
1555: LD_ADDR_EXP 61
1559: PUSH
1560: LD_INT 2
1562: ST_TO_ADDR
// def_shipments_density = 1 ;
1563: LD_ADDR_EXP 62
1567: PUSH
1568: LD_INT 1
1570: ST_TO_ADDR
// def_extra_oil_deposits = 1 ;
1571: LD_ADDR_EXP 63
1575: PUSH
1576: LD_INT 1
1578: ST_TO_ADDR
// def_extra_sib_deposits = 1 ;
1579: LD_ADDR_EXP 64
1583: PUSH
1584: LD_INT 1
1586: ST_TO_ADDR
// def_base_size = 2 ;
1587: LD_ADDR_EXP 1
1591: PUSH
1592: LD_INT 2
1594: ST_TO_ADDR
// def_shared_vision = 1 ;
1595: LD_ADDR_EXP 65
1599: PUSH
1600: LD_INT 1
1602: ST_TO_ADDR
// def_morale_flags = 1 ;
1603: LD_ADDR_EXP 66
1607: PUSH
1608: LD_INT 1
1610: ST_TO_ADDR
// def_siberite_detection = 1 ;
1611: LD_ADDR_EXP 67
1615: PUSH
1616: LD_INT 1
1618: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
1619: LD_ADDR_EXP 69
1623: PUSH
1624: LD_INT 3
1626: ST_TO_ADDR
// def_people_respawning = 2 ;
1627: LD_ADDR_EXP 68
1631: PUSH
1632: LD_INT 2
1634: ST_TO_ADDR
// def_siberite_bomb = 0 ;
1635: LD_ADDR_EXP 70
1639: PUSH
1640: LD_INT 0
1642: ST_TO_ADDR
// def_west_nations = 0 ;
1643: LD_ADDR_EXP 2
1647: PUSH
1648: LD_INT 0
1650: ST_TO_ADDR
// def_east_nations = 2 ;
1651: LD_ADDR_EXP 3
1655: PUSH
1656: LD_INT 2
1658: ST_TO_ADDR
// tech_level = 4 ;
1659: LD_ADDR_VAR 0 9
1663: PUSH
1664: LD_INT 4
1666: ST_TO_ADDR
// end ; InitGameRules ;
1667: CALL 15920 0 0
// if def_game_rules = 0 then
1671: LD_EXP 57
1675: PUSH
1676: LD_INT 0
1678: EQUAL
1679: IFFALSE 1706
// begin if isSGUI then
1681: LD_OWVAR 83
1685: IFFALSE 1693
// setMpTechs ( ) else
1687: CALL 19370 0 0
1691: GO 1706
// begin SetMpTechLevel ( tech_level + 1 ) ;
1693: LD_VAR 0 9
1697: PUSH
1698: LD_INT 1
1700: PLUS
1701: PPUSH
1702: CALL 19517 0 1
// end ; end ; if not def_base_level then
1706: LD_EXP 58
1710: NOT
1711: IFFALSE 1721
// def_base_size := 0 ;
1713: LD_ADDR_EXP 1
1717: PUSH
1718: LD_INT 0
1720: ST_TO_ADDR
// is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1721: LD_ADDR_EXP 4
1725: PUSH
1726: LD_INT 0
1728: PUSH
1729: LD_INT 1
1731: PUSH
1732: LD_INT 1
1734: PUSH
1735: LD_INT 1
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: PUSH
1744: LD_EXP 58
1748: PUSH
1749: LD_INT 1
1751: PLUS
1752: ARRAY
1753: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
1754: LD_ADDR_EXP 5
1758: PUSH
1759: LD_INT 0
1761: PUSH
1762: LD_INT 0
1764: PUSH
1765: LD_INT 2
1767: PUSH
1768: LD_INT 4
1770: PUSH
1771: EMPTY
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: PUSH
1777: LD_EXP 58
1781: PUSH
1782: LD_INT 1
1784: PLUS
1785: ARRAY
1786: ST_TO_ADDR
// number_of_people = [ 5 , 7 , 9 , 11 ] [ def_amount_of_people + 1 ] ;
1787: LD_ADDR_EXP 6
1791: PUSH
1792: LD_INT 5
1794: PUSH
1795: LD_INT 7
1797: PUSH
1798: LD_INT 9
1800: PUSH
1801: LD_INT 11
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: PUSH
1810: LD_EXP 59
1814: PUSH
1815: LD_INT 1
1817: PLUS
1818: ARRAY
1819: ST_TO_ADDR
// skill_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1820: LD_ADDR_EXP 7
1824: PUSH
1825: LD_INT 2
1827: PUSH
1828: LD_INT 3
1830: PUSH
1831: LD_INT 4
1833: PUSH
1834: LD_INT 5
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: LIST
1841: LIST
1842: PUSH
1843: LD_EXP 60
1847: PUSH
1848: LD_INT 1
1850: PLUS
1851: ARRAY
1852: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1853: LD_ADDR_EXP 9
1857: PUSH
1858: LD_INT 0
1860: PUSH
1861: LD_INT 0
1863: PUSH
1864: LD_INT 0
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: LIST
1871: PUSH
1872: LD_INT 30
1874: PUSH
1875: LD_INT 0
1877: PUSH
1878: LD_INT 0
1880: PUSH
1881: EMPTY
1882: LIST
1883: LIST
1884: LIST
1885: PUSH
1886: LD_INT 50
1888: PUSH
1889: LD_INT 20
1891: PUSH
1892: LD_INT 0
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: LIST
1899: PUSH
1900: LD_INT 80
1902: PUSH
1903: LD_INT 40
1905: PUSH
1906: LD_INT 20
1908: PUSH
1909: EMPTY
1910: LIST
1911: LIST
1912: LIST
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: PUSH
1920: LD_EXP 61
1924: PUSH
1925: LD_INT 1
1927: PLUS
1928: ARRAY
1929: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1930: LD_ADDR_EXP 8
1934: PUSH
1935: LD_INT 10
1937: PUSH
1938: EMPTY
1939: LIST
1940: PUSH
1941: LD_INT 7
1943: PUSH
1944: LD_INT 14
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: PUSH
1951: LD_INT 6
1953: PUSH
1954: LD_INT 12
1956: PUSH
1957: LD_INT 18
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: LIST
1964: PUSH
1965: LD_INT 5
1967: PUSH
1968: LD_INT 10
1970: PUSH
1971: LD_INT 15
1973: PUSH
1974: LD_INT 20
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: PUSH
1989: LD_EXP 61
1993: PUSH
1994: LD_INT 1
1996: PLUS
1997: ARRAY
1998: ST_TO_ADDR
// shipments_density = [ 18 , 25 , 35 ] [ def_shipments_density + 1 ] ;
1999: LD_ADDR_EXP 10
2003: PUSH
2004: LD_INT 18
2006: PUSH
2007: LD_INT 25
2009: PUSH
2010: LD_INT 35
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: LIST
2017: PUSH
2018: LD_EXP 62
2022: PUSH
2023: LD_INT 1
2025: PLUS
2026: ARRAY
2027: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
2028: LD_ADDR_EXP 12
2032: PUSH
2033: LD_INT 0
2035: PUSH
2036: LD_INT 3
2038: PUSH
2039: LD_INT 6
2041: PUSH
2042: LD_INT 9
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: PUSH
2051: LD_EXP 69
2055: PUSH
2056: LD_INT 1
2058: PLUS
2059: ARRAY
2060: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
2061: LD_ADDR_EXP 13
2065: PUSH
2066: LD_INT 0
2068: PUSH
2069: LD_INT 8400
2071: PUSH
2072: LD_INT 1750
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: LIST
2079: PUSH
2080: LD_EXP 68
2084: PUSH
2085: LD_INT 1
2087: PLUS
2088: ARRAY
2089: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
2090: LD_ADDR_EXP 14
2094: PUSH
2095: LD_INT 0
2097: PUSH
2098: LD_INT 21000
2100: PUSH
2101: LD_INT 4200
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: LIST
2108: PUSH
2109: LD_EXP 68
2113: PUSH
2114: LD_INT 1
2116: PLUS
2117: ARRAY
2118: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
2119: LD_ADDR_EXP 15
2123: PUSH
2124: LD_INT 0
2126: PUSH
2127: LD_INT 1
2129: PUSH
2130: LD_INT 63000
2132: PUSH
2133: LD_INT 126000
2135: PUSH
2136: LD_INT 189000
2138: PUSH
2139: LD_INT 252000
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: PUSH
2150: LD_EXP 70
2154: PUSH
2155: LD_INT 1
2157: PLUS
2158: ARRAY
2159: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
2160: LD_ADDR_EXP 11
2164: PUSH
2165: LD_INT 1
2167: NEG
2168: PUSH
2169: LD_INT 350
2171: PUSH
2172: LD_INT 700
2174: PUSH
2175: LD_INT 1400
2177: PUSH
2178: LD_INT 0
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: LIST
2187: PUSH
2188: LD_EXP 66
2192: PUSH
2193: LD_INT 1
2195: PLUS
2196: ARRAY
2197: ST_TO_ADDR
// battle_flags_id = [ ] ;
2198: LD_ADDR_EXP 29
2202: PUSH
2203: EMPTY
2204: ST_TO_ADDR
// if not def_builduptime then
2205: LD_EXP 71
2209: NOT
2210: IFFALSE 2215
// disable ( 600 ) ;
2212: LD_INT 600
2214: DISABLE_MARKED
// end ;
2215: LD_VAR 0 1
2219: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2220: LD_INT 0
2222: PPUSH
2223: PPUSH
2224: PPUSH
// Team_Game := Side_Teams [ your_side ] ;
2225: LD_ADDR_EXP 20
2229: PUSH
2230: LD_EXP 16
2234: PUSH
2235: LD_OWVAR 2
2239: ARRAY
2240: ST_TO_ADDR
// if not Team_Game then
2241: LD_EXP 20
2245: NOT
2246: IFFALSE 2344
// begin for i = 1 to 8 do
2248: LD_ADDR_VAR 0 2
2252: PUSH
2253: DOUBLE
2254: LD_INT 1
2256: DEC
2257: ST_TO_ADDR
2258: LD_INT 8
2260: PUSH
2261: FOR_TO
2262: IFFALSE 2340
// for j = 1 to 8 do
2264: LD_ADDR_VAR 0 3
2268: PUSH
2269: DOUBLE
2270: LD_INT 1
2272: DEC
2273: ST_TO_ADDR
2274: LD_INT 8
2276: PUSH
2277: FOR_TO
2278: IFFALSE 2336
// if i <> j then
2280: LD_VAR 0 2
2284: PUSH
2285: LD_VAR 0 3
2289: NONEQUAL
2290: IFFALSE 2314
// SetAttitude ( i , j , att_neutral , true ) else
2292: LD_VAR 0 2
2296: PPUSH
2297: LD_VAR 0 3
2301: PPUSH
2302: LD_INT 0
2304: PPUSH
2305: LD_INT 1
2307: PPUSH
2308: CALL_OW 80
2312: GO 2334
// SetAttitude ( i , j , att_friend , true ) ;
2314: LD_VAR 0 2
2318: PPUSH
2319: LD_VAR 0 3
2323: PPUSH
2324: LD_INT 1
2326: PPUSH
2327: LD_INT 1
2329: PPUSH
2330: CALL_OW 80
2334: GO 2277
2336: POP
2337: POP
2338: GO 2261
2340: POP
2341: POP
// end else
2342: GO 2519
// begin if def_shared_vision then
2344: LD_EXP 65
2348: IFFALSE 2413
// begin for i in Teams do
2350: LD_ADDR_VAR 0 2
2354: PUSH
2355: LD_EXP 17
2359: PUSH
2360: FOR_IN
2361: IFFALSE 2411
// for j = 2 to i do
2363: LD_ADDR_VAR 0 3
2367: PUSH
2368: DOUBLE
2369: LD_INT 2
2371: DEC
2372: ST_TO_ADDR
2373: LD_VAR 0 2
2377: PUSH
2378: FOR_TO
2379: IFFALSE 2407
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2381: LD_VAR 0 2
2385: PUSH
2386: LD_VAR 0 3
2390: ARRAY
2391: PPUSH
2392: LD_VAR 0 2
2396: PUSH
2397: LD_INT 1
2399: ARRAY
2400: PPUSH
2401: CALL_OW 343
2405: GO 2378
2407: POP
2408: POP
2409: GO 2360
2411: POP
2412: POP
// end ; for i = 1 to 8 do
2413: LD_ADDR_VAR 0 2
2417: PUSH
2418: DOUBLE
2419: LD_INT 1
2421: DEC
2422: ST_TO_ADDR
2423: LD_INT 8
2425: PUSH
2426: FOR_TO
2427: IFFALSE 2517
// for j = 1 to 8 do
2429: LD_ADDR_VAR 0 3
2433: PUSH
2434: DOUBLE
2435: LD_INT 1
2437: DEC
2438: ST_TO_ADDR
2439: LD_INT 8
2441: PUSH
2442: FOR_TO
2443: IFFALSE 2513
// if Side_Teams [ i ] = Side_Teams [ j ] then
2445: LD_EXP 16
2449: PUSH
2450: LD_VAR 0 2
2454: ARRAY
2455: PUSH
2456: LD_EXP 16
2460: PUSH
2461: LD_VAR 0 3
2465: ARRAY
2466: EQUAL
2467: IFFALSE 2491
// SetAttitude ( i , j , att_friend , true ) else
2469: LD_VAR 0 2
2473: PPUSH
2474: LD_VAR 0 3
2478: PPUSH
2479: LD_INT 1
2481: PPUSH
2482: LD_INT 1
2484: PPUSH
2485: CALL_OW 80
2489: GO 2511
// SetAttitude ( i , j , att_enemy , true ) ;
2491: LD_VAR 0 2
2495: PPUSH
2496: LD_VAR 0 3
2500: PPUSH
2501: LD_INT 2
2503: PPUSH
2504: LD_INT 1
2506: PPUSH
2507: CALL_OW 80
2511: GO 2442
2513: POP
2514: POP
2515: GO 2426
2517: POP
2518: POP
// end ; end ;
2519: LD_VAR 0 1
2523: RET
// function prepare_people ( count , cl , x , y , r ) ; var i , j , un ; begin
2524: LD_INT 0
2526: PPUSH
2527: PPUSH
2528: PPUSH
2529: PPUSH
// result := [ ] ;
2530: LD_ADDR_VAR 0 6
2534: PUSH
2535: EMPTY
2536: ST_TO_ADDR
// for i := 1 to count do
2537: LD_ADDR_VAR 0 7
2541: PUSH
2542: DOUBLE
2543: LD_INT 1
2545: DEC
2546: ST_TO_ADDR
2547: LD_VAR 0 1
2551: PUSH
2552: FOR_TO
2553: IFFALSE 2949
// begin uc_direction := Rand ( 0 , 5 ) ;
2555: LD_ADDR_OWVAR 24
2559: PUSH
2560: LD_INT 0
2562: PPUSH
2563: LD_INT 5
2565: PPUSH
2566: CALL_OW 12
2570: ST_TO_ADDR
// if commander then
2571: LD_LOC 1
2575: IFFALSE 2684
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2577: LD_ADDR_OWVAR 26
2581: PUSH
2582: LD_OWVAR 19
2586: PUSH
2587: LD_OWVAR 20
2591: ARRAY
2592: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2593: LD_INT 1
2595: PPUSH
2596: LD_INT 2
2598: PPUSH
2599: CALL_OW 12
2603: PPUSH
2604: LD_VAR 0 2
2608: PPUSH
2609: LD_EXP 7
2613: PUSH
2614: LD_INT 2
2616: PLUS
2617: PPUSH
2618: CALL_OW 380
// hc_importance := 105 ;
2622: LD_ADDR_OWVAR 32
2626: PUSH
2627: LD_INT 105
2629: ST_TO_ADDR
// commander := false ;
2630: LD_ADDR_LOC 1
2634: PUSH
2635: LD_INT 0
2637: ST_TO_ADDR
// if Multiplayer then
2638: LD_OWVAR 4
2642: IFFALSE 2682
// begin hc_gallery := MULTIAVATARS ;
2644: LD_ADDR_OWVAR 33
2648: PUSH
2649: LD_STRING MULTIAVATARS
2651: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2652: LD_ADDR_OWVAR 34
2656: PUSH
2657: LD_OWVAR 20
2661: PPUSH
2662: CALL_OW 525
2666: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2667: LD_ADDR_OWVAR 27
2671: PUSH
2672: LD_OWVAR 20
2676: PPUSH
2677: CALL_OW 526
2681: ST_TO_ADDR
// end ; end else
2682: GO 2747
// begin hc_name :=  ;
2684: LD_ADDR_OWVAR 26
2688: PUSH
2689: LD_STRING 
2691: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2692: LD_INT 1
2694: PPUSH
2695: LD_INT 2
2697: PPUSH
2698: CALL_OW 12
2702: PPUSH
2703: LD_VAR 0 2
2707: PPUSH
2708: LD_EXP 7
2712: PPUSH
2713: CALL_OW 380
// hc_importance := 0 ;
2717: LD_ADDR_OWVAR 32
2721: PUSH
2722: LD_INT 0
2724: ST_TO_ADDR
// if Multiplayer then
2725: LD_OWVAR 4
2729: IFFALSE 2747
// begin hc_gallery :=  ;
2731: LD_ADDR_OWVAR 33
2735: PUSH
2736: LD_STRING 
2738: ST_TO_ADDR
// hc_face_number := 0 ;
2739: LD_ADDR_OWVAR 34
2743: PUSH
2744: LD_INT 0
2746: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2747: LD_ADDR_VAR 0 9
2751: PUSH
2752: CALL_OW 44
2756: ST_TO_ADDR
// if global_defined then
2757: LD_LOC 3
2761: IFFALSE 2901
// begin if ( cl = class_soldier ) then
2763: LD_VAR 0 2
2767: PUSH
2768: LD_INT 1
2770: EQUAL
2771: IFFALSE 2791
// j := i + soldiers_created else
2773: LD_ADDR_VAR 0 8
2777: PUSH
2778: LD_VAR 0 7
2782: PUSH
2783: LD_LOC 4
2787: PLUS
2788: ST_TO_ADDR
2789: GO 2801
// j := i ;
2791: LD_ADDR_VAR 0 8
2795: PUSH
2796: LD_VAR 0 7
2800: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2801: LD_LOC 2
2805: PUSH
2806: LD_VAR 0 2
2810: ARRAY
2811: PUSH
2812: LD_VAR 0 8
2816: ARRAY
2817: PPUSH
2818: LD_VAR 0 9
2822: PPUSH
2823: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2827: LD_VAR 0 9
2831: PPUSH
2832: LD_INT 2
2834: PPUSH
2835: LD_LOC 2
2839: PUSH
2840: LD_VAR 0 2
2844: ARRAY
2845: PUSH
2846: LD_VAR 0 8
2850: ARRAY
2851: PPUSH
2852: LD_INT 2
2854: PPUSH
2855: CALL_OW 260
2859: PPUSH
2860: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2864: LD_VAR 0 9
2868: PPUSH
2869: LD_INT 1
2871: PPUSH
2872: LD_LOC 2
2876: PUSH
2877: LD_VAR 0 2
2881: ARRAY
2882: PUSH
2883: LD_VAR 0 8
2887: ARRAY
2888: PPUSH
2889: LD_INT 1
2891: PPUSH
2892: CALL_OW 260
2896: PPUSH
2897: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2901: LD_VAR 0 9
2905: PPUSH
2906: LD_VAR 0 3
2910: PPUSH
2911: LD_VAR 0 4
2915: PPUSH
2916: LD_VAR 0 5
2920: PPUSH
2921: LD_INT 0
2923: PPUSH
2924: CALL_OW 50
// result := result ^ [ un ] ;
2928: LD_ADDR_VAR 0 6
2932: PUSH
2933: LD_VAR 0 6
2937: PUSH
2938: LD_VAR 0 9
2942: PUSH
2943: EMPTY
2944: LIST
2945: ADD
2946: ST_TO_ADDR
// end ;
2947: GO 2552
2949: POP
2950: POP
// if not global_defined then
2951: LD_LOC 3
2955: NOT
2956: IFFALSE 3034
// if ( global_units >= cl ) then
2958: LD_LOC 2
2962: PUSH
2963: LD_VAR 0 2
2967: GREATEREQUAL
2968: IFFALSE 3009
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2970: LD_ADDR_LOC 2
2974: PUSH
2975: LD_LOC 2
2979: PPUSH
2980: LD_VAR 0 2
2984: PPUSH
2985: LD_LOC 2
2989: PUSH
2990: LD_VAR 0 2
2994: ARRAY
2995: PUSH
2996: LD_VAR 0 6
3000: ADD
3001: PPUSH
3002: CALL_OW 1
3006: ST_TO_ADDR
3007: GO 3034
// global_units := Replace ( global_units , cl , result ) ;
3009: LD_ADDR_LOC 2
3013: PUSH
3014: LD_LOC 2
3018: PPUSH
3019: LD_VAR 0 2
3023: PPUSH
3024: LD_VAR 0 6
3028: PPUSH
3029: CALL_OW 1
3033: ST_TO_ADDR
// end ;
3034: LD_VAR 0 6
3038: RET
// function prepare_side ( side , pos , nation ) ; var x , y , dir , i , r , sol , br , dep ; begin
3039: LD_INT 0
3041: PPUSH
3042: PPUSH
3043: PPUSH
3044: PPUSH
3045: PPUSH
3046: PPUSH
3047: PPUSH
3048: PPUSH
3049: PPUSH
// uc_nation := nation ;
3050: LD_ADDR_OWVAR 21
3054: PUSH
3055: LD_VAR 0 3
3059: ST_TO_ADDR
// uc_side := side ;
3060: LD_ADDR_OWVAR 20
3064: PUSH
3065: LD_VAR 0 1
3069: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3070: LD_ADDR_VAR 0 5
3074: PUSH
3075: LD_EXP 22
3079: PUSH
3080: LD_VAR 0 2
3084: ARRAY
3085: PUSH
3086: LD_INT 1
3088: ARRAY
3089: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3090: LD_ADDR_VAR 0 6
3094: PUSH
3095: LD_EXP 22
3099: PUSH
3100: LD_VAR 0 2
3104: ARRAY
3105: PUSH
3106: LD_INT 2
3108: ARRAY
3109: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3110: LD_ADDR_VAR 0 7
3114: PUSH
3115: LD_EXP 22
3119: PUSH
3120: LD_VAR 0 2
3124: ARRAY
3125: PUSH
3126: LD_INT 3
3128: ARRAY
3129: ST_TO_ADDR
// if is_depot then
3130: LD_EXP 4
3134: IFFALSE 3267
// begin bc_type = b_depot ;
3136: LD_ADDR_OWVAR 42
3140: PUSH
3141: LD_INT 0
3143: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3144: LD_ADDR_VAR 0 12
3148: PUSH
3149: LD_VAR 0 5
3153: PPUSH
3154: LD_VAR 0 6
3158: PPUSH
3159: LD_VAR 0 7
3163: PPUSH
3164: CALL_OW 47
3168: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3169: LD_VAR 0 12
3173: PPUSH
3174: LD_STRING @
3176: PUSH
3177: LD_VAR 0 1
3181: STR
3182: PPUSH
3183: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3187: LD_VAR 0 12
3191: PPUSH
3192: CALL_OW 274
3196: PPUSH
3197: LD_INT 1
3199: PPUSH
3200: LD_EXP 9
3204: PUSH
3205: LD_INT 1
3207: ARRAY
3208: PPUSH
3209: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3213: LD_VAR 0 12
3217: PPUSH
3218: CALL_OW 274
3222: PPUSH
3223: LD_INT 2
3225: PPUSH
3226: LD_EXP 9
3230: PUSH
3231: LD_INT 2
3233: ARRAY
3234: PPUSH
3235: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3239: LD_VAR 0 12
3243: PPUSH
3244: CALL_OW 274
3248: PPUSH
3249: LD_INT 3
3251: PPUSH
3252: LD_EXP 9
3256: PUSH
3257: LD_INT 3
3259: ARRAY
3260: PPUSH
3261: CALL_OW 277
// end else
3265: GO 3411
// begin for i := 1 to 3 do
3267: LD_ADDR_VAR 0 8
3271: PUSH
3272: DOUBLE
3273: LD_INT 1
3275: DEC
3276: ST_TO_ADDR
3277: LD_INT 3
3279: PUSH
3280: FOR_TO
3281: IFFALSE 3409
// begin r := starting_resources [ i ] ;
3283: LD_ADDR_VAR 0 9
3287: PUSH
3288: LD_EXP 9
3292: PUSH
3293: LD_VAR 0 8
3297: ARRAY
3298: ST_TO_ADDR
// while r >= 10 do
3299: LD_VAR 0 9
3303: PUSH
3304: LD_INT 10
3306: GREATEREQUAL
3307: IFFALSE 3407
// if r > 50 then
3309: LD_VAR 0 9
3313: PUSH
3314: LD_INT 50
3316: GREATER
3317: IFFALSE 3363
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3319: LD_VAR 0 8
3323: PPUSH
3324: LD_INT 5
3326: PPUSH
3327: LD_VAR 0 5
3331: PPUSH
3332: LD_VAR 0 6
3336: PPUSH
3337: LD_INT 4
3339: PPUSH
3340: LD_INT 0
3342: PPUSH
3343: CALL_OW 60
// r := r - 50 ;
3347: LD_ADDR_VAR 0 9
3351: PUSH
3352: LD_VAR 0 9
3356: PUSH
3357: LD_INT 50
3359: MINUS
3360: ST_TO_ADDR
// end else
3361: GO 3405
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3363: LD_VAR 0 8
3367: PPUSH
3368: LD_VAR 0 9
3372: PUSH
3373: LD_INT 10
3375: DIV
3376: PPUSH
3377: LD_VAR 0 5
3381: PPUSH
3382: LD_VAR 0 6
3386: PPUSH
3387: LD_INT 4
3389: PPUSH
3390: LD_INT 0
3392: PPUSH
3393: CALL_OW 60
// r := 0 ;
3397: LD_ADDR_VAR 0 9
3401: PUSH
3402: LD_INT 0
3404: ST_TO_ADDR
// end ;
3405: GO 3299
// end ;
3407: GO 3280
3409: POP
3410: POP
// end ; if def_base_size > 0 then
3411: LD_EXP 1
3415: PUSH
3416: LD_INT 0
3418: GREATER
3419: IFFALSE 3494
// begin bc_kind1 := b_lab_basic ;
3421: LD_ADDR_OWVAR 44
3425: PUSH
3426: LD_INT 9
3428: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
3429: LD_ADDR_OWVAR 45
3433: PUSH
3434: LD_INT 9
3436: ST_TO_ADDR
// bc_type := b_lab ;
3437: LD_ADDR_OWVAR 42
3441: PUSH
3442: LD_INT 6
3444: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( labs_def [ pos ] [ 1 ] , labs_def [ pos ] [ 2 ] , labs_def [ pos ] [ 3 ] ) ;
3445: LD_EXP 24
3449: PUSH
3450: LD_VAR 0 2
3454: ARRAY
3455: PUSH
3456: LD_INT 1
3458: ARRAY
3459: PPUSH
3460: LD_EXP 24
3464: PUSH
3465: LD_VAR 0 2
3469: ARRAY
3470: PUSH
3471: LD_INT 2
3473: ARRAY
3474: PPUSH
3475: LD_EXP 24
3479: PUSH
3480: LD_VAR 0 2
3484: ARRAY
3485: PUSH
3486: LD_INT 3
3488: ARRAY
3489: PPUSH
3490: CALL_OW 47
// end ; if def_base_size > 1 then
3494: LD_EXP 1
3498: PUSH
3499: LD_INT 1
3501: GREATER
3502: IFFALSE 3561
// begin bc_type := b_workshop ;
3504: LD_ADDR_OWVAR 42
3508: PUSH
3509: LD_INT 2
3511: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( factory_def [ pos ] [ 1 ] , factory_def [ pos ] [ 2 ] , factory_def [ pos ] [ 3 ] ) ;
3512: LD_EXP 25
3516: PUSH
3517: LD_VAR 0 2
3521: ARRAY
3522: PUSH
3523: LD_INT 1
3525: ARRAY
3526: PPUSH
3527: LD_EXP 25
3531: PUSH
3532: LD_VAR 0 2
3536: ARRAY
3537: PUSH
3538: LD_INT 2
3540: ARRAY
3541: PPUSH
3542: LD_EXP 25
3546: PUSH
3547: LD_VAR 0 2
3551: ARRAY
3552: PUSH
3553: LD_INT 3
3555: ARRAY
3556: PPUSH
3557: CALL_OW 47
// end ; for r in starting_crates do
3561: LD_ADDR_VAR 0 9
3565: PUSH
3566: LD_EXP 8
3570: PUSH
3571: FOR_IN
3572: IFFALSE 3604
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3574: LD_INT 1
3576: PPUSH
3577: LD_INT 5
3579: PPUSH
3580: LD_VAR 0 5
3584: PPUSH
3585: LD_VAR 0 6
3589: PPUSH
3590: LD_VAR 0 9
3594: PPUSH
3595: LD_INT 0
3597: PPUSH
3598: CALL_OW 60
3602: GO 3571
3604: POP
3605: POP
// if def_morale_flags then
3606: LD_EXP 66
3610: IFFALSE 3749
// begin x := start_def [ pos ] [ 1 ] ;
3612: LD_ADDR_VAR 0 5
3616: PUSH
3617: LD_EXP 26
3621: PUSH
3622: LD_VAR 0 2
3626: ARRAY
3627: PUSH
3628: LD_INT 1
3630: ARRAY
3631: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3632: LD_ADDR_VAR 0 6
3636: PUSH
3637: LD_EXP 26
3641: PUSH
3642: LD_VAR 0 2
3646: ARRAY
3647: PUSH
3648: LD_INT 2
3650: ARRAY
3651: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3652: LD_VAR 0 5
3656: PPUSH
3657: LD_VAR 0 6
3661: PPUSH
3662: LD_INT 12
3664: PPUSH
3665: LD_INT 2
3667: PPUSH
3668: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3672: LD_ADDR_EXP 29
3676: PUSH
3677: LD_EXP 29
3681: PUSH
3682: LD_VAR 0 1
3686: PPUSH
3687: LD_VAR 0 5
3691: PPUSH
3692: LD_VAR 0 6
3696: PPUSH
3697: LD_INT 1
3699: PUSH
3700: LD_INT 100
3702: PUSH
3703: EMPTY
3704: LIST
3705: LIST
3706: PUSH
3707: LD_INT 2
3709: PUSH
3710: LD_INT 50
3712: PUSH
3713: EMPTY
3714: LIST
3715: LIST
3716: PUSH
3717: LD_INT 3
3719: PUSH
3720: LD_INT 20
3722: PUSH
3723: EMPTY
3724: LIST
3725: LIST
3726: PUSH
3727: LD_INT 20
3729: PUSH
3730: LD_INT 100
3732: PUSH
3733: EMPTY
3734: LIST
3735: LIST
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: PPUSH
3743: CALL_OW 418
3747: ADD
3748: ST_TO_ADDR
// end ; commander := true ;
3749: LD_ADDR_LOC 1
3753: PUSH
3754: LD_INT 1
3756: ST_TO_ADDR
// soldiers_created := 0 ;
3757: LD_ADDR_LOC 4
3761: PUSH
3762: LD_INT 0
3764: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3765: LD_ADDR_VAR 0 8
3769: PUSH
3770: DOUBLE
3771: LD_INT 1
3773: DEC
3774: ST_TO_ADDR
3775: LD_EXP 5
3779: PUSH
3780: FOR_TO
3781: IFFALSE 4023
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3783: LD_ADDR_VAR 0 5
3787: PUSH
3788: LD_EXP 23
3792: PUSH
3793: LD_VAR 0 2
3797: ARRAY
3798: PUSH
3799: LD_VAR 0 8
3803: ARRAY
3804: PUSH
3805: LD_INT 1
3807: ARRAY
3808: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3809: LD_ADDR_VAR 0 6
3813: PUSH
3814: LD_EXP 23
3818: PUSH
3819: LD_VAR 0 2
3823: ARRAY
3824: PUSH
3825: LD_VAR 0 8
3829: ARRAY
3830: PUSH
3831: LD_INT 2
3833: ARRAY
3834: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3835: LD_ADDR_VAR 0 7
3839: PUSH
3840: LD_EXP 23
3844: PUSH
3845: LD_VAR 0 2
3849: ARRAY
3850: PUSH
3851: LD_VAR 0 8
3855: ARRAY
3856: PUSH
3857: LD_INT 3
3859: ARRAY
3860: ST_TO_ADDR
// if i < 4 then
3861: LD_VAR 0 8
3865: PUSH
3866: LD_INT 4
3868: LESS
3869: IFFALSE 3881
// bc_type := b_breastwork else
3871: LD_ADDR_OWVAR 42
3875: PUSH
3876: LD_INT 31
3878: ST_TO_ADDR
3879: GO 3889
// bc_type := b_armoury ;
3881: LD_ADDR_OWVAR 42
3885: PUSH
3886: LD_INT 4
3888: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3889: LD_ADDR_VAR 0 11
3893: PUSH
3894: LD_VAR 0 5
3898: PPUSH
3899: LD_VAR 0 6
3903: PPUSH
3904: LD_VAR 0 7
3908: PPUSH
3909: CALL_OW 47
3913: ST_TO_ADDR
// x := ShiftX ( x , dir , 2 ) ;
3914: LD_ADDR_VAR 0 5
3918: PUSH
3919: LD_VAR 0 5
3923: PPUSH
3924: LD_VAR 0 7
3928: PPUSH
3929: LD_INT 2
3931: PPUSH
3932: CALL_OW 272
3936: ST_TO_ADDR
// y := ShiftY ( y , dir , 2 ) ;
3937: LD_ADDR_VAR 0 6
3941: PUSH
3942: LD_VAR 0 6
3946: PPUSH
3947: LD_VAR 0 7
3951: PPUSH
3952: LD_INT 2
3954: PPUSH
3955: CALL_OW 273
3959: ST_TO_ADDR
// sol := prepare_people ( 1 , class_soldier , x , y , 0 ) [ 1 ] ;
3960: LD_ADDR_VAR 0 10
3964: PUSH
3965: LD_INT 1
3967: PPUSH
3968: LD_INT 1
3970: PPUSH
3971: LD_VAR 0 5
3975: PPUSH
3976: LD_VAR 0 6
3980: PPUSH
3981: LD_INT 0
3983: PPUSH
3984: CALL 2524 0 5
3988: PUSH
3989: LD_INT 1
3991: ARRAY
3992: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
3993: LD_ADDR_LOC 4
3997: PUSH
3998: LD_LOC 4
4002: PUSH
4003: LD_INT 1
4005: PLUS
4006: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
4007: LD_VAR 0 10
4011: PPUSH
4012: LD_VAR 0 11
4016: PPUSH
4017: CALL_OW 120
// end ;
4021: GO 3780
4023: POP
4024: POP
// x := start_def [ pos ] [ 1 ] ;
4025: LD_ADDR_VAR 0 5
4029: PUSH
4030: LD_EXP 26
4034: PUSH
4035: LD_VAR 0 2
4039: ARRAY
4040: PUSH
4041: LD_INT 1
4043: ARRAY
4044: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4045: LD_ADDR_VAR 0 6
4049: PUSH
4050: LD_EXP 26
4054: PUSH
4055: LD_VAR 0 2
4059: ARRAY
4060: PUSH
4061: LD_INT 2
4063: ARRAY
4064: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 ) ;
4065: LD_LOC 8
4069: PUSH
4070: LD_EXP 5
4074: MINUS
4075: PPUSH
4076: LD_INT 1
4078: PPUSH
4079: LD_VAR 0 5
4083: PPUSH
4084: LD_VAR 0 6
4088: PPUSH
4089: LD_INT 5
4091: PPUSH
4092: CALL 2524 0 5
// prepare_people ( neng , class_engineer , x , y , 5 ) ;
4096: LD_LOC 5
4100: PPUSH
4101: LD_INT 2
4103: PPUSH
4104: LD_VAR 0 5
4108: PPUSH
4109: LD_VAR 0 6
4113: PPUSH
4114: LD_INT 5
4116: PPUSH
4117: CALL 2524 0 5
// prepare_people ( nmech , class_mechanic , x , y , 5 ) ;
4121: LD_LOC 7
4125: PPUSH
4126: LD_INT 3
4128: PPUSH
4129: LD_VAR 0 5
4133: PPUSH
4134: LD_VAR 0 6
4138: PPUSH
4139: LD_INT 5
4141: PPUSH
4142: CALL 2524 0 5
// prepare_people ( nsci , class_scientistic , x , y , 5 ) ;
4146: LD_LOC 6
4150: PPUSH
4151: LD_INT 4
4153: PPUSH
4154: LD_VAR 0 5
4158: PPUSH
4159: LD_VAR 0 6
4163: PPUSH
4164: LD_INT 5
4166: PPUSH
4167: CALL 2524 0 5
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4171: LD_EXP 67
4175: PUSH
4176: LD_INT 20
4178: PPUSH
4179: LD_VAR 0 1
4183: PPUSH
4184: CALL_OW 321
4188: PUSH
4189: LD_INT 1
4191: EQUAL
4192: AND
4193: IFFALSE 4210
// SetTech ( tech_SibDet , side , state_researched ) ;
4195: LD_INT 20
4197: PPUSH
4198: LD_VAR 0 1
4202: PPUSH
4203: LD_INT 2
4205: PPUSH
4206: CALL_OW 322
// if def_siberite_bomb = 1 then
4210: LD_EXP 70
4214: PUSH
4215: LD_INT 1
4217: EQUAL
4218: IFFALSE 4252
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4220: LD_INT 25
4222: PPUSH
4223: LD_VAR 0 1
4227: PPUSH
4228: LD_INT 1
4230: PPUSH
4231: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4235: LD_INT 73
4237: PPUSH
4238: LD_VAR 0 1
4242: PPUSH
4243: LD_INT 1
4245: PPUSH
4246: CALL_OW 322
// end else
4250: GO 4282
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4252: LD_INT 25
4254: PPUSH
4255: LD_VAR 0 1
4259: PPUSH
4260: LD_INT 0
4262: PPUSH
4263: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4267: LD_INT 73
4269: PPUSH
4270: LD_VAR 0 1
4274: PPUSH
4275: LD_INT 0
4277: PPUSH
4278: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4282: LD_INT 24
4284: PPUSH
4285: LD_VAR 0 1
4289: PPUSH
4290: LD_INT 0
4292: PPUSH
4293: CALL_OW 322
// global_defined := true ;
4297: LD_ADDR_LOC 3
4301: PUSH
4302: LD_INT 1
4304: ST_TO_ADDR
// end ;
4305: LD_VAR 0 4
4309: RET
// every 0 0$1 do
4310: GO 4312
4312: DISABLE
// if ( def_siberite_bomb > 1 ) then
4313: LD_EXP 70
4317: PUSH
4318: LD_INT 1
4320: GREATER
4321: IFFALSE 4336
// begin wait ( siberite_bomb_Delay ) ;
4323: LD_EXP 15
4327: PPUSH
4328: CALL_OW 67
// EnableSibFiss ;
4332: CALL 4337 0 0
// end ;
4336: END
// function EnableSibFiss ; var i ; begin
4337: LD_INT 0
4339: PPUSH
4340: PPUSH
// for i := 1 to 8 do
4341: LD_ADDR_VAR 0 2
4345: PUSH
4346: DOUBLE
4347: LD_INT 1
4349: DEC
4350: ST_TO_ADDR
4351: LD_INT 8
4353: PUSH
4354: FOR_TO
4355: IFFALSE 4401
// if Side_Positions [ i ] then
4357: LD_EXP 18
4361: PUSH
4362: LD_VAR 0 2
4366: ARRAY
4367: IFFALSE 4399
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4369: LD_INT 25
4371: PPUSH
4372: LD_VAR 0 2
4376: PPUSH
4377: LD_INT 1
4379: PPUSH
4380: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4384: LD_INT 73
4386: PPUSH
4387: LD_VAR 0 2
4391: PPUSH
4392: LD_INT 1
4394: PPUSH
4395: CALL_OW 322
// end ;
4399: GO 4354
4401: POP
4402: POP
// end ;
4403: LD_VAR 0 1
4407: RET
// function prepare_sides ; var i , orig , pos ; begin
4408: LD_INT 0
4410: PPUSH
4411: PPUSH
4412: PPUSH
4413: PPUSH
// global_units := [ ] ;
4414: LD_ADDR_LOC 2
4418: PUSH
4419: EMPTY
4420: ST_TO_ADDR
// global_defined := false ;
4421: LD_ADDR_LOC 3
4425: PUSH
4426: LD_INT 0
4428: ST_TO_ADDR
// CountClassMembers ;
4429: CALL 4948 0 0
// for i := 1 to 8 do
4433: LD_ADDR_VAR 0 2
4437: PUSH
4438: DOUBLE
4439: LD_INT 1
4441: DEC
4442: ST_TO_ADDR
4443: LD_INT 8
4445: PUSH
4446: FOR_TO
4447: IFFALSE 4647
// if Side_Positions [ i ] then
4449: LD_EXP 18
4453: PUSH
4454: LD_VAR 0 2
4458: ARRAY
4459: IFFALSE 4645
// begin pos := Side_Positions [ i ] ;
4461: LD_ADDR_VAR 0 4
4465: PUSH
4466: LD_EXP 18
4470: PUSH
4471: LD_VAR 0 2
4475: ARRAY
4476: ST_TO_ADDR
// if Game_Type in [ 2 , 12 ] then
4477: LD_EXP 56
4481: PUSH
4482: LD_INT 2
4484: PUSH
4485: LD_INT 12
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: IN
4492: IFFALSE 4620
// begin if Game_Type = 12 then
4494: LD_EXP 56
4498: PUSH
4499: LD_INT 12
4501: EQUAL
4502: IFFALSE 4564
// begin prepare_side ( i , pos , Position_Nations [ pos ] ) ;
4504: LD_VAR 0 2
4508: PPUSH
4509: LD_VAR 0 4
4513: PPUSH
4514: LD_EXP 21
4518: PUSH
4519: LD_VAR 0 4
4523: ARRAY
4524: PPUSH
4525: CALL 3039 0 3
// prepare_side ( i , pos + 1 , Position_Nations [ pos + 1 ] ) end else
4529: LD_VAR 0 2
4533: PPUSH
4534: LD_VAR 0 4
4538: PUSH
4539: LD_INT 1
4541: PLUS
4542: PPUSH
4543: LD_EXP 21
4547: PUSH
4548: LD_VAR 0 4
4552: PUSH
4553: LD_INT 1
4555: PLUS
4556: ARRAY
4557: PPUSH
4558: CALL 3039 0 3
4562: GO 4618
// begin prepare_side ( i , pos , Side_Nations [ i ] ) ;
4564: LD_VAR 0 2
4568: PPUSH
4569: LD_VAR 0 4
4573: PPUSH
4574: LD_EXP 19
4578: PUSH
4579: LD_VAR 0 2
4583: ARRAY
4584: PPUSH
4585: CALL 3039 0 3
// prepare_side ( i , pos + 1 , Side_Nations [ i ] ) ;
4589: LD_VAR 0 2
4593: PPUSH
4594: LD_VAR 0 4
4598: PUSH
4599: LD_INT 1
4601: PLUS
4602: PPUSH
4603: LD_EXP 19
4607: PUSH
4608: LD_VAR 0 2
4612: ARRAY
4613: PPUSH
4614: CALL 3039 0 3
// end ; end else
4618: GO 4645
// prepare_side ( i , pos , Side_Nations [ i ] ) ;
4620: LD_VAR 0 2
4624: PPUSH
4625: LD_VAR 0 4
4629: PPUSH
4630: LD_EXP 19
4634: PUSH
4635: LD_VAR 0 2
4639: ARRAY
4640: PPUSH
4641: CALL 3039 0 3
// end ;
4645: GO 4446
4647: POP
4648: POP
// end ;
4649: LD_VAR 0 1
4653: RET
// function Modify_Nations ; var list , west , east , i ; begin
4654: LD_INT 0
4656: PPUSH
4657: PPUSH
4658: PPUSH
4659: PPUSH
4660: PPUSH
// list := [ ] ;
4661: LD_ADDR_VAR 0 2
4665: PUSH
4666: EMPTY
4667: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
4668: LD_ADDR_VAR 0 5
4672: PUSH
4673: DOUBLE
4674: LD_INT 1
4676: DEC
4677: ST_TO_ADDR
4678: LD_EXP 18
4682: PUSH
4683: LD_INT 0
4685: PLUS
4686: PUSH
4687: FOR_TO
4688: IFFALSE 4906
// if side_positions [ i ] = 1 then
4690: LD_EXP 18
4694: PUSH
4695: LD_VAR 0 5
4699: ARRAY
4700: PUSH
4701: LD_INT 1
4703: EQUAL
4704: IFFALSE 4798
// case side_nations [ i ] of 1 :
4706: LD_EXP 19
4710: PUSH
4711: LD_VAR 0 5
4715: ARRAY
4716: PUSH
4717: LD_INT 1
4719: DOUBLE
4720: EQUAL
4721: IFTRUE 4725
4723: GO 4743
4725: POP
// west := [ 1 , 2 ] ; 2 :
4726: LD_ADDR_VAR 0 3
4730: PUSH
4731: LD_INT 1
4733: PUSH
4734: LD_INT 2
4736: PUSH
4737: EMPTY
4738: LIST
4739: LIST
4740: ST_TO_ADDR
4741: GO 4796
4743: LD_INT 2
4745: DOUBLE
4746: EQUAL
4747: IFTRUE 4751
4749: GO 4769
4751: POP
// west := [ 2 , 3 ] ; 3 :
4752: LD_ADDR_VAR 0 3
4756: PUSH
4757: LD_INT 2
4759: PUSH
4760: LD_INT 3
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: ST_TO_ADDR
4767: GO 4796
4769: LD_INT 3
4771: DOUBLE
4772: EQUAL
4773: IFTRUE 4777
4775: GO 4795
4777: POP
// west := [ 3 , 1 ] ; end else
4778: LD_ADDR_VAR 0 3
4782: PUSH
4783: LD_INT 3
4785: PUSH
4786: LD_INT 1
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: ST_TO_ADDR
4793: GO 4796
4795: POP
4796: GO 4904
// if side_positions [ i ] = 3 then
4798: LD_EXP 18
4802: PUSH
4803: LD_VAR 0 5
4807: ARRAY
4808: PUSH
4809: LD_INT 3
4811: EQUAL
4812: IFFALSE 4904
// case side_nations [ i ] of 1 :
4814: LD_EXP 19
4818: PUSH
4819: LD_VAR 0 5
4823: ARRAY
4824: PUSH
4825: LD_INT 1
4827: DOUBLE
4828: EQUAL
4829: IFTRUE 4833
4831: GO 4851
4833: POP
// east := [ 1 , 2 ] ; 2 :
4834: LD_ADDR_VAR 0 4
4838: PUSH
4839: LD_INT 1
4841: PUSH
4842: LD_INT 2
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: ST_TO_ADDR
4849: GO 4904
4851: LD_INT 2
4853: DOUBLE
4854: EQUAL
4855: IFTRUE 4859
4857: GO 4877
4859: POP
// east := [ 2 , 3 ] ; 3 :
4860: LD_ADDR_VAR 0 4
4864: PUSH
4865: LD_INT 2
4867: PUSH
4868: LD_INT 3
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: ST_TO_ADDR
4875: GO 4904
4877: LD_INT 3
4879: DOUBLE
4880: EQUAL
4881: IFTRUE 4885
4883: GO 4903
4885: POP
// east := [ 3 , 1 ] ; end ;
4886: LD_ADDR_VAR 0 4
4890: PUSH
4891: LD_INT 3
4893: PUSH
4894: LD_INT 1
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: ST_TO_ADDR
4901: GO 4904
4903: POP
4904: GO 4687
4906: POP
4907: POP
// Position_Nations := west ^ east ^ [ 0 , 0 , 0 , 0 ] ;
4908: LD_ADDR_EXP 21
4912: PUSH
4913: LD_VAR 0 3
4917: PUSH
4918: LD_VAR 0 4
4922: ADD
4923: PUSH
4924: LD_INT 0
4926: PUSH
4927: LD_INT 0
4929: PUSH
4930: LD_INT 0
4932: PUSH
4933: LD_INT 0
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: LIST
4940: LIST
4941: ADD
4942: ST_TO_ADDR
// end ;
4943: LD_VAR 0 1
4947: RET
// function CountClassMembers ; var Mode ; begin
4948: LD_INT 0
4950: PPUSH
4951: PPUSH
// if No_Mechs then
4952: LD_EXP 72
4956: IFFALSE 4968
// Mode := 2 else
4958: LD_ADDR_VAR 0 2
4962: PUSH
4963: LD_INT 2
4965: ST_TO_ADDR
4966: GO 4976
// Mode := 1 ;
4968: LD_ADDR_VAR 0 2
4972: PUSH
4973: LD_INT 1
4975: ST_TO_ADDR
// neng := number_of_people ;
4976: LD_ADDR_LOC 5
4980: PUSH
4981: LD_EXP 6
4985: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4986: LD_ADDR_LOC 8
4990: PUSH
4991: LD_LOC 5
4995: PUSH
4996: LD_INT 4
4998: PUSH
4999: LD_INT 3
5001: PUSH
5002: EMPTY
5003: LIST
5004: LIST
5005: PUSH
5006: LD_VAR 0 2
5010: ARRAY
5011: DIV
5012: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
5013: LD_LOC 8
5017: PUSH
5018: LD_EXP 5
5022: LESS
5023: IFFALSE 5035
// nsol := number_of_breastworks ;
5025: LD_ADDR_LOC 8
5029: PUSH
5030: LD_EXP 5
5034: ST_TO_ADDR
// neng := neng - nsol ;
5035: LD_ADDR_LOC 5
5039: PUSH
5040: LD_LOC 5
5044: PUSH
5045: LD_LOC 8
5049: MINUS
5050: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
5051: LD_ADDR_LOC 6
5055: PUSH
5056: LD_LOC 5
5060: PUSH
5061: LD_INT 3
5063: PUSH
5064: LD_INT 2
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PUSH
5071: LD_VAR 0 2
5075: ARRAY
5076: DIV
5077: ST_TO_ADDR
// if ( nsci < 1 ) then
5078: LD_LOC 6
5082: PUSH
5083: LD_INT 1
5085: LESS
5086: IFFALSE 5096
// nsci := 1 ;
5088: LD_ADDR_LOC 6
5092: PUSH
5093: LD_INT 1
5095: ST_TO_ADDR
// neng := neng - nsci ;
5096: LD_ADDR_LOC 5
5100: PUSH
5101: LD_LOC 5
5105: PUSH
5106: LD_LOC 6
5110: MINUS
5111: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5112: LD_ADDR_LOC 7
5116: PUSH
5117: LD_LOC 5
5121: PUSH
5122: LD_INT 2
5124: DIV
5125: PUSH
5126: LD_INT 0
5128: PUSH
5129: EMPTY
5130: LIST
5131: LIST
5132: PUSH
5133: LD_VAR 0 2
5137: ARRAY
5138: ST_TO_ADDR
// neng := neng - nmech ;
5139: LD_ADDR_LOC 5
5143: PUSH
5144: LD_LOC 5
5148: PUSH
5149: LD_LOC 7
5153: MINUS
5154: ST_TO_ADDR
// if ( neng < 1 ) then
5155: LD_LOC 5
5159: PUSH
5160: LD_INT 1
5162: LESS
5163: IFFALSE 5173
// neng := 1 ;
5165: LD_ADDR_LOC 5
5169: PUSH
5170: LD_INT 1
5172: ST_TO_ADDR
// end ;
5173: LD_VAR 0 1
5177: RET
// function Init_Win_Condition ; begin
5178: LD_INT 0
5180: PPUSH
// disable ( 98 ) ;
5181: LD_INT 98
5183: DISABLE_MARKED
// disable ( 99 ) ;
5184: LD_INT 99
5186: DISABLE_MARKED
// if Team_Game then
5187: LD_EXP 20
5191: IFFALSE 5198
// enable ( 98 ) else
5193: LD_INT 98
5195: ENABLE_MARKED
5196: GO 5201
// enable ( 99 ) ;
5198: LD_INT 99
5200: ENABLE_MARKED
// end ;
5201: LD_VAR 0 1
5205: RET
// starting begin DE_Triggers ;
5206: CALL 8659 0 0
// mp_selectmsg := true ;
5210: LD_ADDR_OWVAR 13
5214: PUSH
5215: LD_INT 1
5217: ST_TO_ADDR
// if ( game_type <> 1 ) and ( game_type <> 3 ) then
5218: LD_EXP 56
5222: PUSH
5223: LD_INT 1
5225: NONEQUAL
5226: PUSH
5227: LD_EXP 56
5231: PUSH
5232: LD_INT 3
5234: NONEQUAL
5235: AND
5236: IFFALSE 5242
// read_multiplayer_and_game_parameters ;
5238: CALL 976 0 0
// case Game_Type of 1 , 3 :
5242: LD_EXP 56
5246: PUSH
5247: LD_INT 1
5249: DOUBLE
5250: EQUAL
5251: IFTRUE 5261
5253: LD_INT 3
5255: DOUBLE
5256: EQUAL
5257: IFTRUE 5261
5259: GO 5273
5261: POP
// begin enable ( 19 ) ;
5262: LD_INT 19
5264: ENABLE_MARKED
// starting_ctf ;
5265: CALL 9298 0 0
// exit ;
5269: GO 5434
// end ; 12 :
5271: GO 5289
5273: LD_INT 12
5275: DOUBLE
5276: EQUAL
5277: IFTRUE 5281
5279: GO 5288
5281: POP
// Modify_Nations ; end ;
5282: CALL 4654 0 0
5286: GO 5289
5288: POP
// enable ( 55 ) ;
5289: LD_INT 55
5291: ENABLE_MARKED
// init_map ;
5292: CALL 276 0 0
// set_shared_visions_and_alliances ;
5296: CALL 2220 0 0
// prepare_sides ;
5300: CALL 4408 0 0
// InitLimits ;
5304: CALL 18052 0 0
// ShowTimer ;
5308: CALL 18989 0 0
// init_shipments ;
5312: CALL 5435 0 0
// init_respawn ;
5316: CALL 5939 0 0
// InitApeman ;
5320: CALL 7474 0 0
// music_nat := Side_Nations [ your_side ] ;
5324: LD_ADDR_OWVAR 71
5328: PUSH
5329: LD_EXP 19
5333: PUSH
5334: LD_OWVAR 2
5338: ARRAY
5339: ST_TO_ADDR
// if IAmSpec then
5340: CALL_OW 531
5344: IFFALSE 5380
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
5346: LD_INT 0
5348: PPUSH
5349: LD_INT 0
5351: PPUSH
5352: LD_OWVAR 2
5356: PPUSH
5357: LD_INT 32767
5359: NEG
5360: PPUSH
5361: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
5365: LD_INT 104
5367: PPUSH
5368: LD_INT 69
5370: PPUSH
5371: CALL_OW 86
// enable ( 400 ) ;
5375: LD_INT 400
5377: ENABLE_MARKED
// end else
5378: GO 5434
// begin ResetFog ;
5380: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5384: LD_EXP 26
5388: PUSH
5389: LD_EXP 18
5393: PUSH
5394: LD_OWVAR 2
5398: ARRAY
5399: ARRAY
5400: PUSH
5401: LD_INT 1
5403: ARRAY
5404: PPUSH
5405: LD_EXP 26
5409: PUSH
5410: LD_EXP 18
5414: PUSH
5415: LD_OWVAR 2
5419: ARRAY
5420: ARRAY
5421: PUSH
5422: LD_INT 2
5424: ARRAY
5425: PPUSH
5426: CALL_OW 86
// Init_Win_Condition ;
5430: CALL 5178 0 0
// end ; end ; end_of_file
5434: END
// var shipment , tictac ; export function init_shipments ; begin
5435: LD_INT 0
5437: PPUSH
// shipment := Rand ( 0 , 1 ) ;
5438: LD_ADDR_LOC 9
5442: PUSH
5443: LD_INT 0
5445: PPUSH
5446: LD_INT 1
5448: PPUSH
5449: CALL_OW 12
5453: ST_TO_ADDR
// tictac := 0 ;
5454: LD_ADDR_LOC 10
5458: PUSH
5459: LD_INT 0
5461: ST_TO_ADDR
// end ;
5462: LD_VAR 0 1
5466: RET
// every 0 0$5 + 0 0$1.1 marked 55 do var d ;
5467: GO 5469
5469: DISABLE
5470: LD_INT 0
5472: PPUSH
// begin case tick of 1 .. 1 1$0 :
5473: LD_OWVAR 1
5477: PUSH
5478: LD_INT 1
5480: DOUBLE
5481: GREATEREQUAL
5482: IFFALSE 5490
5484: LD_INT 2100
5486: DOUBLE
5487: LESSEQUAL
5488: IFTRUE 5492
5490: GO 5503
5492: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5493: LD_ADDR_VAR 0 1
5497: PUSH
5498: LD_INT 150
5500: ST_TO_ADDR
5501: GO 5686
5503: LD_INT 2100
5505: PUSH
5506: LD_INT 1
5508: PLUS
5509: DOUBLE
5510: GREATEREQUAL
5511: IFFALSE 5519
5513: LD_INT 10500
5515: DOUBLE
5516: LESSEQUAL
5517: IFTRUE 5521
5519: GO 5532
5521: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5522: LD_ADDR_VAR 0 1
5526: PUSH
5527: LD_INT 100
5529: ST_TO_ADDR
5530: GO 5686
5532: LD_INT 10500
5534: PUSH
5535: LD_INT 1
5537: PLUS
5538: DOUBLE
5539: GREATEREQUAL
5540: IFFALSE 5548
5542: LD_INT 21000
5544: DOUBLE
5545: LESSEQUAL
5546: IFTRUE 5550
5548: GO 5561
5550: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5551: LD_ADDR_VAR 0 1
5555: PUSH
5556: LD_INT 90
5558: ST_TO_ADDR
5559: GO 5686
5561: LD_INT 21000
5563: PUSH
5564: LD_INT 1
5566: PLUS
5567: DOUBLE
5568: GREATEREQUAL
5569: IFFALSE 5577
5571: LD_INT 42000
5573: DOUBLE
5574: LESSEQUAL
5575: IFTRUE 5579
5577: GO 5590
5579: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5580: LD_ADDR_VAR 0 1
5584: PUSH
5585: LD_INT 70
5587: ST_TO_ADDR
5588: GO 5686
5590: LD_INT 42000
5592: PUSH
5593: LD_INT 1
5595: PLUS
5596: DOUBLE
5597: GREATEREQUAL
5598: IFFALSE 5606
5600: LD_INT 63000
5602: DOUBLE
5603: LESSEQUAL
5604: IFTRUE 5608
5606: GO 5619
5608: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5609: LD_ADDR_VAR 0 1
5613: PUSH
5614: LD_INT 60
5616: ST_TO_ADDR
5617: GO 5686
5619: LD_INT 63000
5621: PUSH
5622: LD_INT 1
5624: PLUS
5625: DOUBLE
5626: GREATEREQUAL
5627: IFFALSE 5635
5629: LD_INT 105000
5631: DOUBLE
5632: LESSEQUAL
5633: IFTRUE 5637
5635: GO 5648
5637: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5638: LD_ADDR_VAR 0 1
5642: PUSH
5643: LD_INT 35
5645: ST_TO_ADDR
5646: GO 5686
5648: LD_INT 105000
5650: PUSH
5651: LD_INT 1
5653: PLUS
5654: DOUBLE
5655: GREATEREQUAL
5656: IFFALSE 5664
5658: LD_INT 630000
5660: DOUBLE
5661: LESSEQUAL
5662: IFTRUE 5666
5664: GO 5677
5666: POP
// d := 20 ; else
5667: LD_ADDR_VAR 0 1
5671: PUSH
5672: LD_INT 20
5674: ST_TO_ADDR
5675: GO 5686
5677: POP
// d := 0 ; end ;
5678: LD_ADDR_VAR 0 1
5682: PUSH
5683: LD_INT 0
5685: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5686: LD_INT 1
5688: PPUSH
5689: LD_INT 10000
5691: PPUSH
5692: CALL_OW 12
5696: PUSH
5697: LD_VAR 0 1
5701: PUSH
5702: LD_EXP 10
5706: MUL
5707: LESSEQUAL
5708: IFFALSE 5762
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5710: LD_INT 1
5712: PPUSH
5713: LD_INT 140
5715: PPUSH
5716: CALL_OW 12
5720: PPUSH
5721: CALL_OW 67
// shipment := ( shipment + 1 ) mod 2 ;
5725: LD_ADDR_LOC 9
5729: PUSH
5730: LD_LOC 9
5734: PUSH
5735: LD_INT 1
5737: PLUS
5738: PUSH
5739: LD_INT 2
5741: MOD
5742: ST_TO_ADDR
// CreateCratesArea ( 5 , west_side + shipment , true ) ;
5743: LD_INT 5
5745: PPUSH
5746: LD_INT 8
5748: PUSH
5749: LD_LOC 9
5753: PLUS
5754: PPUSH
5755: LD_INT 1
5757: PPUSH
5758: CALL_OW 55
// end ; enable ;
5762: ENABLE
// end ;
5763: PPOPN 1
5765: END
// every 0 0$10 trigger TICK > ( ( 2 2$0 * tictac ) + tictac * ( 1 1$30 - shipments_density * ( 0 0$2 ) ) ) marked 55 do var i , amount , is_in ;
5766: LD_OWVAR 1
5770: PUSH
5771: LD_INT 4200
5773: PUSH
5774: LD_LOC 10
5778: MUL
5779: PUSH
5780: LD_LOC 10
5784: PUSH
5785: LD_INT 3150
5787: PUSH
5788: LD_EXP 10
5792: PUSH
5793: LD_INT 70
5795: MUL
5796: MINUS
5797: MUL
5798: PLUS
5799: GREATER
5800: IFFALSE 5936
5802: GO 5804
5804: DISABLE
5805: LD_INT 0
5807: PPUSH
5808: PPUSH
5809: PPUSH
// begin tictac := tictac + 1 ;
5810: LD_ADDR_LOC 10
5814: PUSH
5815: LD_LOC 10
5819: PUSH
5820: LD_INT 1
5822: PLUS
5823: ST_TO_ADDR
// amount := Rand ( 3 , 5 ) ;
5824: LD_ADDR_VAR 0 2
5828: PUSH
5829: LD_INT 3
5831: PPUSH
5832: LD_INT 5
5834: PPUSH
5835: CALL_OW 12
5839: ST_TO_ADDR
// for i = 0 to 3 do
5840: LD_ADDR_VAR 0 1
5844: PUSH
5845: DOUBLE
5846: LD_INT 0
5848: DEC
5849: ST_TO_ADDR
5850: LD_INT 3
5852: PUSH
5853: FOR_TO
5854: IFFALSE 5933
// begin is_in := GetResourceArea ( west_side + i , mat_cans ) ;
5856: LD_ADDR_VAR 0 3
5860: PUSH
5861: LD_INT 8
5863: PUSH
5864: LD_VAR 0 1
5868: PLUS
5869: PPUSH
5870: LD_INT 1
5872: PPUSH
5873: CALL_OW 287
5877: ST_TO_ADDR
// if ( is_in < 500 ) or ( Rand ( 1 , 10 ) > ( is_in div 100 ) ) then
5878: LD_VAR 0 3
5882: PUSH
5883: LD_INT 500
5885: LESS
5886: PUSH
5887: LD_INT 1
5889: PPUSH
5890: LD_INT 10
5892: PPUSH
5893: CALL_OW 12
5897: PUSH
5898: LD_VAR 0 3
5902: PUSH
5903: LD_INT 100
5905: DIV
5906: GREATER
5907: OR
5908: IFFALSE 5931
// CreateCratesArea ( amount , nw + i , true ) ;
5910: LD_VAR 0 2
5914: PPUSH
5915: LD_INT 12
5917: PUSH
5918: LD_VAR 0 1
5922: PLUS
5923: PPUSH
5924: LD_INT 1
5926: PPUSH
5927: CALL_OW 55
// end ;
5931: GO 5853
5933: POP
5934: POP
// enable ;
5935: ENABLE
// end ; end_of_file
5936: PPOPN 3
5938: END
// var respawn_queue , nation_queue ; export function init_respawn ; begin
5939: LD_INT 0
5941: PPUSH
// if not def_people_respawning then
5942: LD_EXP 68
5946: NOT
5947: IFFALSE 5951
// exit ;
5949: GO 6054
// respawn_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5951: LD_ADDR_LOC 11
5955: PUSH
5956: LD_INT 0
5958: PUSH
5959: LD_INT 0
5961: PUSH
5962: LD_INT 0
5964: PUSH
5965: LD_INT 0
5967: PUSH
5968: LD_INT 0
5970: PUSH
5971: LD_INT 0
5973: PUSH
5974: LD_INT 0
5976: PUSH
5977: LD_INT 0
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: LIST
5989: ST_TO_ADDR
// nation_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5990: LD_ADDR_LOC 12
5994: PUSH
5995: LD_INT 0
5997: PUSH
5998: LD_INT 0
6000: PUSH
6001: LD_INT 0
6003: PUSH
6004: LD_INT 0
6006: PUSH
6007: LD_INT 0
6009: PUSH
6010: LD_INT 0
6012: PUSH
6013: LD_INT 0
6015: PUSH
6016: LD_INT 0
6018: PUSH
6019: EMPTY
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: LIST
6027: LIST
6028: ST_TO_ADDR
// if Game_Type in [ 2 , 12 ] then
6029: LD_EXP 56
6033: PUSH
6034: LD_INT 2
6036: PUSH
6037: LD_INT 12
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: IN
6044: IFFALSE 6051
// enable ( 41 ) else
6046: LD_INT 41
6048: ENABLE_MARKED
6049: GO 6054
// enable ( 40 ) ;
6051: LD_INT 40
6053: ENABLE_MARKED
// end ;
6054: LD_VAR 0 1
6058: RET
// every 0 0$10 marked 40 do var list , time , side ;
6059: GO 6061
6061: DISABLE
6062: LD_INT 0
6064: PPUSH
6065: PPUSH
6066: PPUSH
// begin for side = 1 to Side_Positions do
6067: LD_ADDR_VAR 0 3
6071: PUSH
6072: DOUBLE
6073: LD_INT 1
6075: DEC
6076: ST_TO_ADDR
6077: LD_EXP 18
6081: PUSH
6082: FOR_TO
6083: IFFALSE 6260
// if Side_Positions [ side ] then
6085: LD_EXP 18
6089: PUSH
6090: LD_VAR 0 3
6094: ARRAY
6095: IFFALSE 6258
// begin list := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6097: LD_ADDR_VAR 0 1
6101: PUSH
6102: LD_INT 22
6104: PUSH
6105: LD_VAR 0 3
6109: PUSH
6110: EMPTY
6111: LIST
6112: LIST
6113: PUSH
6114: LD_INT 21
6116: PUSH
6117: LD_INT 1
6119: PUSH
6120: EMPTY
6121: LIST
6122: LIST
6123: PUSH
6124: LD_INT 3
6126: PUSH
6127: LD_INT 23
6129: PUSH
6130: LD_INT 0
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: PUSH
6137: EMPTY
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: PPUSH
6143: CALL_OW 69
6147: ST_TO_ADDR
// if ( list < number_of_people ) and ( not respawn_queue [ side ] ) then
6148: LD_VAR 0 1
6152: PUSH
6153: LD_EXP 6
6157: LESS
6158: PUSH
6159: LD_LOC 11
6163: PUSH
6164: LD_VAR 0 3
6168: ARRAY
6169: NOT
6170: AND
6171: IFFALSE 6198
// respawn_queue := Replace ( respawn_queue , side , TICK ) ;
6173: LD_ADDR_LOC 11
6177: PUSH
6178: LD_LOC 11
6182: PPUSH
6183: LD_VAR 0 3
6187: PPUSH
6188: LD_OWVAR 1
6192: PPUSH
6193: CALL_OW 1
6197: ST_TO_ADDR
// time := TICK - respawn_queue [ side ] ;
6198: LD_ADDR_VAR 0 2
6202: PUSH
6203: LD_OWVAR 1
6207: PUSH
6208: LD_LOC 11
6212: PUSH
6213: LD_VAR 0 3
6217: ARRAY
6218: MINUS
6219: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6220: LD_LOC 11
6224: PUSH
6225: LD_VAR 0 3
6229: ARRAY
6230: PUSH
6231: LD_VAR 0 2
6235: PUSH
6236: LD_EXP 13
6240: GREATER
6241: AND
6242: IFFALSE 6258
// respawn_character ( side , time ) ;
6244: LD_VAR 0 3
6248: PPUSH
6249: LD_VAR 0 2
6253: PPUSH
6254: CALL 6266 0 2
// end ;
6258: GO 6082
6260: POP
6261: POP
// enable ;
6262: ENABLE
// end ;
6263: PPOPN 3
6265: END
// function respawn_character ( side , time ) ; var dep ; begin
6266: LD_INT 0
6268: PPUSH
6269: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6270: LD_INT 0
6272: PPUSH
6273: LD_INT 1
6275: PPUSH
6276: CALL_OW 12
6280: PUSH
6281: LD_VAR 0 2
6285: PUSH
6286: LD_EXP 14
6290: LESS
6291: AND
6292: IFFALSE 6296
// exit ;
6294: GO 6503
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6296: LD_ADDR_VAR 0 4
6300: PUSH
6301: LD_INT 22
6303: PUSH
6304: LD_VAR 0 1
6308: PUSH
6309: EMPTY
6310: LIST
6311: LIST
6312: PUSH
6313: LD_INT 2
6315: PUSH
6316: LD_INT 30
6318: PUSH
6319: LD_INT 0
6321: PUSH
6322: EMPTY
6323: LIST
6324: LIST
6325: PUSH
6326: LD_INT 30
6328: PUSH
6329: LD_INT 1
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: LIST
6340: PUSH
6341: LD_INT 50
6343: PUSH
6344: EMPTY
6345: LIST
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: LIST
6351: PPUSH
6352: CALL_OW 69
6356: ST_TO_ADDR
// if not dep then
6357: LD_VAR 0 4
6361: NOT
6362: IFFALSE 6368
// exit else
6364: GO 6503
6366: GO 6392
// dep := dep [ Rand ( 1 , dep ) ] ;
6368: LD_ADDR_VAR 0 4
6372: PUSH
6373: LD_VAR 0 4
6377: PUSH
6378: LD_INT 1
6380: PPUSH
6381: LD_VAR 0 4
6385: PPUSH
6386: CALL_OW 12
6390: ARRAY
6391: ST_TO_ADDR
// uc_side := side ;
6392: LD_ADDR_OWVAR 20
6396: PUSH
6397: LD_VAR 0 1
6401: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6402: LD_ADDR_OWVAR 21
6406: PUSH
6407: LD_EXP 19
6411: PUSH
6412: LD_VAR 0 1
6416: ARRAY
6417: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6418: LD_INT 0
6420: PPUSH
6421: LD_INT 0
6423: PPUSH
6424: LD_EXP 7
6428: PUSH
6429: LD_INT 2
6431: DIV
6432: PPUSH
6433: CALL_OW 380
// hc_importance := 0 ;
6437: LD_ADDR_OWVAR 32
6441: PUSH
6442: LD_INT 0
6444: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
6445: CALL_OW 44
6449: PPUSH
6450: LD_VAR 0 4
6454: PPUSH
6455: CALL_OW 250
6459: PPUSH
6460: LD_VAR 0 4
6464: PPUSH
6465: CALL_OW 251
6469: PPUSH
6470: LD_INT 10
6472: PPUSH
6473: LD_INT 1
6475: PPUSH
6476: CALL_OW 50
// respawn_queue := Replace ( respawn_queue , side , 0 ) ;
6480: LD_ADDR_LOC 11
6484: PUSH
6485: LD_LOC 11
6489: PPUSH
6490: LD_VAR 0 1
6494: PPUSH
6495: LD_INT 0
6497: PPUSH
6498: CALL_OW 1
6502: ST_TO_ADDR
// end ;
6503: LD_VAR 0 3
6507: RET
// every 0 0$10 marked 41 do var i , list , time , nation , side , limit ;
6508: GO 6510
6510: DISABLE
6511: LD_INT 0
6513: PPUSH
6514: PPUSH
6515: PPUSH
6516: PPUSH
6517: PPUSH
6518: PPUSH
// begin if Game_Type = 12 then
6519: LD_EXP 56
6523: PUSH
6524: LD_INT 12
6526: EQUAL
6527: IFFALSE 6541
// limit := number_of_people else
6529: LD_ADDR_VAR 0 6
6533: PUSH
6534: LD_EXP 6
6538: ST_TO_ADDR
6539: GO 6555
// limit := 2 * number_of_people ;
6541: LD_ADDR_VAR 0 6
6545: PUSH
6546: LD_INT 2
6548: PUSH
6549: LD_EXP 6
6553: MUL
6554: ST_TO_ADDR
// for i = 1 to 4 do
6555: LD_ADDR_VAR 0 1
6559: PUSH
6560: DOUBLE
6561: LD_INT 1
6563: DEC
6564: ST_TO_ADDR
6565: LD_INT 4
6567: PUSH
6568: FOR_TO
6569: IFFALSE 6861
// begin side := GetSidePositions ( [ 1 , 1 , 3 , 3 ] [ i ] ) ;
6571: LD_ADDR_VAR 0 5
6575: PUSH
6576: LD_INT 1
6578: PUSH
6579: LD_INT 1
6581: PUSH
6582: LD_INT 3
6584: PUSH
6585: LD_INT 3
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: PUSH
6594: LD_VAR 0 1
6598: ARRAY
6599: PPUSH
6600: CALL 7203 0 1
6604: ST_TO_ADDR
// if Game_Type = 12 then
6605: LD_EXP 56
6609: PUSH
6610: LD_INT 12
6612: EQUAL
6613: IFFALSE 6633
// nation := Position_Nations [ i ] else
6615: LD_ADDR_VAR 0 4
6619: PUSH
6620: LD_EXP 21
6624: PUSH
6625: LD_VAR 0 1
6629: ARRAY
6630: ST_TO_ADDR
6631: GO 6649
// nation := Side_Nations [ side ] ;
6633: LD_ADDR_VAR 0 4
6637: PUSH
6638: LD_EXP 19
6642: PUSH
6643: LD_VAR 0 5
6647: ARRAY
6648: ST_TO_ADDR
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_nation , nation ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6649: LD_ADDR_VAR 0 2
6653: PUSH
6654: LD_INT 22
6656: PUSH
6657: LD_VAR 0 5
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: PUSH
6666: LD_INT 23
6668: PUSH
6669: LD_VAR 0 4
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: PUSH
6678: LD_INT 21
6680: PUSH
6681: LD_INT 1
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: PUSH
6688: LD_INT 3
6690: PUSH
6691: LD_INT 23
6693: PUSH
6694: LD_INT 0
6696: PUSH
6697: EMPTY
6698: LIST
6699: LIST
6700: PUSH
6701: EMPTY
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: PPUSH
6708: CALL_OW 69
6712: ST_TO_ADDR
// if ( list < limit ) and ( not respawn_queue [ side ] ) then
6713: LD_VAR 0 2
6717: PUSH
6718: LD_VAR 0 6
6722: LESS
6723: PUSH
6724: LD_LOC 11
6728: PUSH
6729: LD_VAR 0 5
6733: ARRAY
6734: NOT
6735: AND
6736: IFFALSE 6788
// begin respawn_queue = Replace ( respawn_queue , side , TICK ) ;
6738: LD_ADDR_LOC 11
6742: PUSH
6743: LD_LOC 11
6747: PPUSH
6748: LD_VAR 0 5
6752: PPUSH
6753: LD_OWVAR 1
6757: PPUSH
6758: CALL_OW 1
6762: ST_TO_ADDR
// nation_queue = Replace ( nation_queue , side , nation ) ;
6763: LD_ADDR_LOC 12
6767: PUSH
6768: LD_LOC 12
6772: PPUSH
6773: LD_VAR 0 5
6777: PPUSH
6778: LD_VAR 0 4
6782: PPUSH
6783: CALL_OW 1
6787: ST_TO_ADDR
// end ; time := TICK - respawn_queue [ side ] ;
6788: LD_ADDR_VAR 0 3
6792: PUSH
6793: LD_OWVAR 1
6797: PUSH
6798: LD_LOC 11
6802: PUSH
6803: LD_VAR 0 5
6807: ARRAY
6808: MINUS
6809: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6810: LD_LOC 11
6814: PUSH
6815: LD_VAR 0 5
6819: ARRAY
6820: PUSH
6821: LD_VAR 0 3
6825: PUSH
6826: LD_EXP 13
6830: GREATER
6831: AND
6832: IFFALSE 6859
// respawn_character_nation ( side , time , nation_queue [ side ] ) ;
6834: LD_VAR 0 5
6838: PPUSH
6839: LD_VAR 0 3
6843: PPUSH
6844: LD_LOC 12
6848: PUSH
6849: LD_VAR 0 5
6853: ARRAY
6854: PPUSH
6855: CALL 6867 0 3
// end ;
6859: GO 6568
6861: POP
6862: POP
// enable ;
6863: ENABLE
// end ;
6864: PPOPN 6
6866: END
// function respawn_character_nation ( side , time , nation ) ; var dep ; begin
6867: LD_INT 0
6869: PPUSH
6870: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6871: LD_INT 0
6873: PPUSH
6874: LD_INT 1
6876: PPUSH
6877: CALL_OW 12
6881: PUSH
6882: LD_VAR 0 2
6886: PUSH
6887: LD_EXP 14
6891: LESS
6892: AND
6893: IFFALSE 6897
// exit ;
6895: GO 7198
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_nation , nation ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6897: LD_ADDR_VAR 0 5
6901: PUSH
6902: LD_INT 22
6904: PUSH
6905: LD_VAR 0 1
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: PUSH
6914: LD_INT 23
6916: PUSH
6917: LD_VAR 0 3
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PUSH
6926: LD_INT 2
6928: PUSH
6929: LD_INT 30
6931: PUSH
6932: LD_INT 0
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 30
6941: PUSH
6942: LD_INT 1
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: LIST
6953: PUSH
6954: LD_INT 50
6956: PUSH
6957: EMPTY
6958: LIST
6959: PUSH
6960: EMPTY
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: PPUSH
6966: CALL_OW 69
6970: ST_TO_ADDR
// if not dep then
6971: LD_VAR 0 5
6975: NOT
6976: IFFALSE 7039
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6978: LD_ADDR_VAR 0 5
6982: PUSH
6983: LD_INT 22
6985: PUSH
6986: LD_VAR 0 1
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: PUSH
6995: LD_INT 2
6997: PUSH
6998: LD_INT 30
7000: PUSH
7001: LD_INT 0
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: PUSH
7008: LD_INT 30
7010: PUSH
7011: LD_INT 1
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: LIST
7022: PUSH
7023: LD_INT 50
7025: PUSH
7026: EMPTY
7027: LIST
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: LIST
7033: PPUSH
7034: CALL_OW 69
7038: ST_TO_ADDR
// if not dep then
7039: LD_VAR 0 5
7043: NOT
7044: IFFALSE 7050
// exit else
7046: GO 7198
7048: GO 7074
// dep := dep [ Rand ( 1 , dep ) ] ;
7050: LD_ADDR_VAR 0 5
7054: PUSH
7055: LD_VAR 0 5
7059: PUSH
7060: LD_INT 1
7062: PPUSH
7063: LD_VAR 0 5
7067: PPUSH
7068: CALL_OW 12
7072: ARRAY
7073: ST_TO_ADDR
// uc_side := side ;
7074: LD_ADDR_OWVAR 20
7078: PUSH
7079: LD_VAR 0 1
7083: ST_TO_ADDR
// uc_nation := nation ;
7084: LD_ADDR_OWVAR 21
7088: PUSH
7089: LD_VAR 0 3
7093: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level ) ;
7094: LD_INT 0
7096: PPUSH
7097: LD_INT 0
7099: PPUSH
7100: LD_EXP 7
7104: PPUSH
7105: CALL_OW 380
// hc_importance := 0 ;
7109: LD_ADDR_OWVAR 32
7113: PUSH
7114: LD_INT 0
7116: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
7117: CALL_OW 44
7121: PPUSH
7122: LD_VAR 0 5
7126: PPUSH
7127: CALL_OW 250
7131: PPUSH
7132: LD_VAR 0 5
7136: PPUSH
7137: CALL_OW 251
7141: PPUSH
7142: LD_INT 10
7144: PPUSH
7145: LD_INT 1
7147: PPUSH
7148: CALL_OW 50
// respawn_queue := Replace ( respawn_queue , side , 0 ) ;
7152: LD_ADDR_LOC 11
7156: PUSH
7157: LD_LOC 11
7161: PPUSH
7162: LD_VAR 0 1
7166: PPUSH
7167: LD_INT 0
7169: PPUSH
7170: CALL_OW 1
7174: ST_TO_ADDR
// nation_queue := Replace ( nation_queue , side , 0 ) ;
7175: LD_ADDR_LOC 12
7179: PUSH
7180: LD_LOC 12
7184: PPUSH
7185: LD_VAR 0 1
7189: PPUSH
7190: LD_INT 0
7192: PPUSH
7193: CALL_OW 1
7197: ST_TO_ADDR
// end ;
7198: LD_VAR 0 4
7202: RET
// function GetSidePositions ( i ) ; var un , side ; begin
7203: LD_INT 0
7205: PPUSH
7206: PPUSH
7207: PPUSH
// side := false ;
7208: LD_ADDR_VAR 0 4
7212: PUSH
7213: LD_INT 0
7215: ST_TO_ADDR
// for un = 1 to Side_Positions do
7216: LD_ADDR_VAR 0 3
7220: PUSH
7221: DOUBLE
7222: LD_INT 1
7224: DEC
7225: ST_TO_ADDR
7226: LD_EXP 18
7230: PUSH
7231: FOR_TO
7232: IFFALSE 7266
// if Side_Positions [ un ] = i then
7234: LD_EXP 18
7238: PUSH
7239: LD_VAR 0 3
7243: ARRAY
7244: PUSH
7245: LD_VAR 0 1
7249: EQUAL
7250: IFFALSE 7264
// begin side := un ;
7252: LD_ADDR_VAR 0 4
7256: PUSH
7257: LD_VAR 0 3
7261: ST_TO_ADDR
// break ;
7262: GO 7266
// end ;
7264: GO 7231
7266: POP
7267: POP
// result := side ;
7268: LD_ADDR_VAR 0 2
7272: PUSH
7273: LD_VAR 0 4
7277: ST_TO_ADDR
// end ; end_of_file
7278: LD_VAR 0 2
7282: RET
// every 20 20$00 trigger apemanNumber do
7283: LD_EXP 30
7287: IFFALSE 7320
7289: GO 7291
7291: DISABLE
// begin enable ;
7292: ENABLE
// if apeLevel >= 8 then
7293: LD_EXP 35
7297: PUSH
7298: LD_INT 8
7300: GREATEREQUAL
7301: IFFALSE 7306
// disable else
7303: DISABLE
7304: GO 7320
// apeLevel := apeLevel + 1 ;
7306: LD_ADDR_EXP 35
7310: PUSH
7311: LD_EXP 35
7315: PUSH
7316: LD_INT 1
7318: PLUS
7319: ST_TO_ADDR
// end ;
7320: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
7321: LD_EXP 30
7325: PUSH
7326: LD_EXP 31
7330: LESS
7331: IFFALSE 7471
7333: GO 7335
7335: DISABLE
7336: LD_INT 0
7338: PPUSH
7339: PPUSH
7340: PPUSH
7341: PPUSH
// begin enable ;
7342: ENABLE
// for i := 1 to apemanPos do
7343: LD_ADDR_VAR 0 1
7347: PUSH
7348: DOUBLE
7349: LD_INT 1
7351: DEC
7352: ST_TO_ADDR
7353: LD_EXP 33
7357: PUSH
7358: FOR_TO
7359: IFFALSE 7469
// begin if apemanPlayerCount [ i ] then
7361: LD_EXP 34
7365: PUSH
7366: LD_VAR 0 1
7370: ARRAY
7371: IFFALSE 7467
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
7373: LD_EXP 34
7377: PUSH
7378: LD_VAR 0 1
7382: ARRAY
7383: PUSH
7384: LD_EXP 33
7388: PUSH
7389: LD_VAR 0 1
7393: ARRAY
7394: GREATER
7395: IFFALSE 7467
// begin ape := PrepareApeman ;
7397: LD_ADDR_VAR 0 2
7401: PUSH
7402: CALL 7966 0 0
7406: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
7407: LD_VAR 0 2
7411: PPUSH
7412: LD_EXP 36
7416: PUSH
7417: LD_VAR 0 1
7421: ARRAY
7422: PPUSH
7423: LD_INT 0
7425: PPUSH
7426: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
7430: LD_ADDR_EXP 33
7434: PUSH
7435: LD_EXP 33
7439: PPUSH
7440: LD_VAR 0 1
7444: PPUSH
7445: LD_EXP 33
7449: PUSH
7450: LD_VAR 0 1
7454: ARRAY
7455: PUSH
7456: LD_VAR 0 2
7460: UNION
7461: PPUSH
7462: CALL_OW 1
7466: ST_TO_ADDR
// end ; end ; end ;
7467: GO 7358
7469: POP
7470: POP
// end ;
7471: PPOPN 4
7473: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
7474: LD_INT 0
7476: PPUSH
7477: PPUSH
7478: PPUSH
7479: PPUSH
7480: PPUSH
7481: PPUSH
7482: PPUSH
// playersAmount := 0 ;
7483: LD_ADDR_VAR 0 3
7487: PUSH
7488: LD_INT 0
7490: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea ] ;
7491: LD_ADDR_VAR 0 7
7495: PUSH
7496: LD_INT 18
7498: PUSH
7499: LD_INT 19
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7506: LD_ADDR_EXP 36
7510: PUSH
7511: LD_INT 0
7513: PUSH
7514: LD_INT 0
7516: PUSH
7517: LD_INT 0
7519: PUSH
7520: LD_INT 0
7522: PUSH
7523: LD_INT 0
7525: PUSH
7526: LD_INT 0
7528: PUSH
7529: LD_INT 0
7531: PUSH
7532: LD_INT 0
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: ST_TO_ADDR
// for j = 1 to Side_Positions do
7545: LD_ADDR_VAR 0 4
7549: PUSH
7550: DOUBLE
7551: LD_INT 1
7553: DEC
7554: ST_TO_ADDR
7555: LD_EXP 18
7559: PUSH
7560: FOR_TO
7561: IFFALSE 7628
// if Side_Positions [ j ] then
7563: LD_EXP 18
7567: PUSH
7568: LD_VAR 0 4
7572: ARRAY
7573: IFFALSE 7626
// begin playersAmount := playersAmount + 1 ;
7575: LD_ADDR_VAR 0 3
7579: PUSH
7580: LD_VAR 0 3
7584: PUSH
7585: LD_INT 1
7587: PLUS
7588: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
7589: LD_ADDR_EXP 36
7593: PUSH
7594: LD_EXP 36
7598: PPUSH
7599: LD_VAR 0 4
7603: PPUSH
7604: LD_VAR 0 7
7608: PUSH
7609: LD_EXP 18
7613: PUSH
7614: LD_VAR 0 4
7618: ARRAY
7619: ARRAY
7620: PPUSH
7621: CALL_OW 1
7625: ST_TO_ADDR
// end ;
7626: GO 7560
7628: POP
7629: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
7630: LD_ADDR_EXP 32
7634: PUSH
7635: LD_INT 3
7637: PUSH
7638: LD_EXP 12
7642: MUL
7643: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
7644: LD_ADDR_EXP 30
7648: PUSH
7649: LD_VAR 0 3
7653: PUSH
7654: LD_EXP 32
7658: MUL
7659: ST_TO_ADDR
// apemanLimit := apemanNumber ;
7660: LD_ADDR_EXP 31
7664: PUSH
7665: LD_EXP 30
7669: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7670: LD_ADDR_EXP 33
7674: PUSH
7675: LD_INT 0
7677: PUSH
7678: LD_INT 0
7680: PUSH
7681: LD_INT 0
7683: PUSH
7684: LD_INT 0
7686: PUSH
7687: LD_INT 0
7689: PUSH
7690: LD_INT 0
7692: PUSH
7693: LD_INT 0
7695: PUSH
7696: LD_INT 0
7698: PUSH
7699: EMPTY
7700: LIST
7701: LIST
7702: LIST
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7709: LD_ADDR_EXP 34
7713: PUSH
7714: LD_INT 0
7716: PUSH
7717: LD_INT 0
7719: PUSH
7720: LD_INT 0
7722: PUSH
7723: LD_INT 0
7725: PUSH
7726: LD_INT 0
7728: PUSH
7729: LD_INT 0
7731: PUSH
7732: LD_INT 0
7734: PUSH
7735: LD_INT 0
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: ST_TO_ADDR
// apeLevel := 1 ;
7748: LD_ADDR_EXP 35
7752: PUSH
7753: LD_INT 1
7755: ST_TO_ADDR
// if not apemanNumber then
7756: LD_EXP 30
7760: NOT
7761: IFFALSE 7765
// exit ;
7763: GO 7961
// for i := 1 to apemanPerPlayer do
7765: LD_ADDR_VAR 0 2
7769: PUSH
7770: DOUBLE
7771: LD_INT 1
7773: DEC
7774: ST_TO_ADDR
7775: LD_EXP 32
7779: PUSH
7780: FOR_TO
7781: IFFALSE 7959
// begin for j := 1 to Side_Positions do
7783: LD_ADDR_VAR 0 4
7787: PUSH
7788: DOUBLE
7789: LD_INT 1
7791: DEC
7792: ST_TO_ADDR
7793: LD_EXP 18
7797: PUSH
7798: FOR_TO
7799: IFFALSE 7955
// if Side_Positions [ j ] then
7801: LD_EXP 18
7805: PUSH
7806: LD_VAR 0 4
7810: ARRAY
7811: IFFALSE 7953
// begin pos := Side_Positions [ j ] ;
7813: LD_ADDR_VAR 0 6
7817: PUSH
7818: LD_EXP 18
7822: PUSH
7823: LD_VAR 0 4
7827: ARRAY
7828: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
7829: LD_ADDR_EXP 34
7833: PUSH
7834: LD_EXP 34
7838: PPUSH
7839: LD_VAR 0 4
7843: PPUSH
7844: LD_EXP 34
7848: PUSH
7849: LD_VAR 0 4
7853: ARRAY
7854: PUSH
7855: LD_INT 1
7857: PLUS
7858: PPUSH
7859: CALL_OW 1
7863: ST_TO_ADDR
// ape := PrepareApeman ;
7864: LD_ADDR_VAR 0 5
7868: PUSH
7869: CALL 7966 0 0
7873: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
7874: LD_ADDR_EXP 33
7878: PUSH
7879: LD_EXP 33
7883: PPUSH
7884: LD_VAR 0 4
7888: PPUSH
7889: LD_EXP 33
7893: PUSH
7894: LD_VAR 0 4
7898: ARRAY
7899: PPUSH
7900: LD_EXP 33
7904: PUSH
7905: LD_VAR 0 4
7909: ARRAY
7910: PUSH
7911: LD_INT 1
7913: PLUS
7914: PPUSH
7915: LD_VAR 0 5
7919: PPUSH
7920: CALL_OW 1
7924: PPUSH
7925: CALL_OW 1
7929: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
7930: LD_VAR 0 5
7934: PPUSH
7935: LD_EXP 36
7939: PUSH
7940: LD_VAR 0 4
7944: ARRAY
7945: PPUSH
7946: LD_INT 0
7948: PPUSH
7949: CALL_OW 49
// end ;
7953: GO 7798
7955: POP
7956: POP
// end ;
7957: GO 7780
7959: POP
7960: POP
// end ;
7961: LD_VAR 0 1
7965: RET
// export function PrepareApeman ; var bonus ; begin
7966: LD_INT 0
7968: PPUSH
7969: PPUSH
// uc_side := 0 ;
7970: LD_ADDR_OWVAR 20
7974: PUSH
7975: LD_INT 0
7977: ST_TO_ADDR
// uc_nation := 0 ;
7978: LD_ADDR_OWVAR 21
7982: PUSH
7983: LD_INT 0
7985: ST_TO_ADDR
// InitHc ;
7986: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
7990: LD_ADDR_VAR 0 2
7994: PUSH
7995: LD_INT 1
7997: NEG
7998: PUSH
7999: LD_INT 0
8001: PUSH
8002: LD_INT 1
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: LIST
8009: PUSH
8010: LD_OWVAR 1
8014: PUSH
8015: LD_INT 3
8017: MOD
8018: PUSH
8019: LD_INT 1
8021: PLUS
8022: ARRAY
8023: ST_TO_ADDR
// hc_class := class_apeman ;
8024: LD_ADDR_OWVAR 28
8028: PUSH
8029: LD_INT 12
8031: ST_TO_ADDR
// hc_gallery :=  ;
8032: LD_ADDR_OWVAR 33
8036: PUSH
8037: LD_STRING 
8039: ST_TO_ADDR
// hc_name :=  ;
8040: LD_ADDR_OWVAR 26
8044: PUSH
8045: LD_STRING 
8047: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
8048: LD_ADDR_OWVAR 31
8052: PUSH
8053: LD_EXP 35
8057: PUSH
8058: LD_VAR 0 2
8062: PLUS
8063: PUSH
8064: LD_EXP 35
8068: PUSH
8069: LD_VAR 0 2
8073: PLUS
8074: PUSH
8075: LD_EXP 35
8079: PUSH
8080: LD_VAR 0 2
8084: PLUS
8085: PUSH
8086: LD_EXP 35
8090: PUSH
8091: LD_VAR 0 2
8095: PLUS
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
8103: LD_ADDR_OWVAR 35
8107: PUSH
8108: LD_INT 10
8110: PUSH
8111: LD_VAR 0 2
8115: MUL
8116: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
8117: LD_ADDR_OWVAR 29
8121: PUSH
8122: LD_INT 12
8124: PUSH
8125: LD_INT 10
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: ST_TO_ADDR
// result := CreateHuman ;
8132: LD_ADDR_VAR 0 1
8136: PUSH
8137: CALL_OW 44
8141: ST_TO_ADDR
// end ;
8142: LD_VAR 0 1
8146: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
8147: LD_INT 0
8149: PPUSH
8150: PPUSH
8151: PPUSH
// if not ape then
8152: LD_VAR 0 1
8156: NOT
8157: IFFALSE 8161
// exit ;
8159: GO 8286
// side := GetSide ( ape ) ;
8161: LD_ADDR_VAR 0 3
8165: PUSH
8166: LD_VAR 0 1
8170: PPUSH
8171: CALL_OW 255
8175: ST_TO_ADDR
// if not side then
8176: LD_VAR 0 3
8180: NOT
8181: IFFALSE 8235
// begin for i = 1 to apemanPos do
8183: LD_ADDR_VAR 0 4
8187: PUSH
8188: DOUBLE
8189: LD_INT 1
8191: DEC
8192: ST_TO_ADDR
8193: LD_EXP 33
8197: PUSH
8198: FOR_TO
8199: IFFALSE 8233
// if ape in apemanPos [ i ] then
8201: LD_VAR 0 1
8205: PUSH
8206: LD_EXP 33
8210: PUSH
8211: LD_VAR 0 4
8215: ARRAY
8216: IN
8217: IFFALSE 8231
// begin side := i ;
8219: LD_ADDR_VAR 0 3
8223: PUSH
8224: LD_VAR 0 4
8228: ST_TO_ADDR
// break ;
8229: GO 8233
// end ;
8231: GO 8198
8233: POP
8234: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
8235: LD_ADDR_EXP 33
8239: PUSH
8240: LD_EXP 33
8244: PPUSH
8245: LD_VAR 0 3
8249: PPUSH
8250: LD_EXP 33
8254: PUSH
8255: LD_VAR 0 3
8259: ARRAY
8260: PUSH
8261: LD_VAR 0 1
8265: DIFF
8266: PPUSH
8267: CALL_OW 1
8271: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
8272: LD_ADDR_EXP 30
8276: PUSH
8277: LD_EXP 30
8281: PUSH
8282: LD_INT 1
8284: MINUS
8285: ST_TO_ADDR
// end ; end_of_file
8286: LD_VAR 0 2
8290: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
8291: LD_VAR 0 1
8295: PPUSH
8296: CALL_OW 266
8300: PUSH
8301: LD_INT 0
8303: PUSH
8304: LD_INT 1
8306: PUSH
8307: EMPTY
8308: LIST
8309: LIST
8310: IN
8311: IFFALSE 8336
// SetBName ( b , @ & GetSide ( b ) ) ;
8313: LD_VAR 0 1
8317: PPUSH
8318: LD_STRING @
8320: PUSH
8321: LD_VAR 0 1
8325: PPUSH
8326: CALL_OW 255
8330: STR
8331: PPUSH
8332: CALL_OW 500
// if def_game_rules then
8336: LD_EXP 57
8340: IFFALSE 8377
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
8342: LD_VAR 0 1
8346: PPUSH
8347: LD_VAR 0 1
8351: PPUSH
8352: CALL_OW 266
8356: PPUSH
8357: LD_VAR 0 1
8361: PPUSH
8362: CALL_OW 255
8366: PPUSH
8367: LD_INT 0
8369: PPUSH
8370: LD_INT 1
8372: PPUSH
8373: CALL 18453 0 5
// end ;
8377: PPOPN 2
8379: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
8380: LD_VAR 0 1
8384: PPUSH
8385: CALL_OW 266
8389: PUSH
8390: LD_INT 0
8392: PUSH
8393: LD_INT 1
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: IN
8400: IFFALSE 8425
// SetBName ( b , @ & GetSide ( b ) ) ;
8402: LD_VAR 0 1
8406: PPUSH
8407: LD_STRING @
8409: PUSH
8410: LD_VAR 0 1
8414: PPUSH
8415: CALL_OW 255
8419: STR
8420: PPUSH
8421: CALL_OW 500
// if def_game_rules then
8425: LD_EXP 57
8429: IFFALSE 8468
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
8431: LD_VAR 0 1
8435: PPUSH
8436: LD_VAR 0 1
8440: PPUSH
8441: CALL_OW 266
8445: PPUSH
8446: LD_VAR 0 1
8450: PPUSH
8451: CALL_OW 255
8455: PPUSH
8456: LD_VAR 0 2
8460: PPUSH
8461: LD_INT 1
8463: PPUSH
8464: CALL 18453 0 5
// end ;
8468: PPOPN 3
8470: END
// on VehicleConstructed ( veh , fac ) do var side ;
8471: LD_INT 0
8473: PPUSH
// begin if GetControl ( veh ) = control_apeman then
8474: LD_VAR 0 1
8478: PPUSH
8479: CALL_OW 263
8483: PUSH
8484: LD_INT 5
8486: EQUAL
8487: IFFALSE 8629
// begin side := GetSide ( veh ) ;
8489: LD_ADDR_VAR 0 3
8493: PUSH
8494: LD_VAR 0 1
8498: PPUSH
8499: CALL_OW 255
8503: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
8504: LD_ADDR_EXP 33
8508: PUSH
8509: LD_EXP 33
8513: PPUSH
8514: LD_VAR 0 3
8518: PPUSH
8519: LD_EXP 33
8523: PUSH
8524: LD_VAR 0 3
8528: ARRAY
8529: PPUSH
8530: LD_INT 52
8532: PUSH
8533: EMPTY
8534: LIST
8535: PPUSH
8536: CALL_OW 72
8540: PUSH
8541: LD_INT 22
8543: PUSH
8544: LD_VAR 0 3
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: PUSH
8553: LD_INT 2
8555: PUSH
8556: LD_INT 33
8558: PUSH
8559: LD_INT 5
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: PUSH
8566: LD_INT 25
8568: PUSH
8569: LD_INT 12
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: PUSH
8576: LD_INT 25
8578: PUSH
8579: LD_INT 15
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PUSH
8586: LD_INT 25
8588: PUSH
8589: LD_INT 16
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: PUSH
8596: LD_INT 25
8598: PUSH
8599: LD_INT 17
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: PUSH
8606: EMPTY
8607: LIST
8608: LIST
8609: LIST
8610: LIST
8611: LIST
8612: LIST
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: PPUSH
8618: CALL_OW 69
8622: UNION
8623: PPUSH
8624: CALL_OW 1
8628: ST_TO_ADDR
// end ; end ;
8629: PPOPN 3
8631: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
8632: LD_VAR 0 1
8636: PPUSH
8637: LD_VAR 0 2
8641: PPUSH
8642: LD_VAR 0 3
8646: PPUSH
8647: LD_OWVAR 2
8651: PPUSH
8652: CALL 19131 0 4
8656: PPOPN 3
8658: END
// export function DE_Triggers ; begin
8659: LD_INT 0
8661: PPUSH
// disable ( 01 ) ;
8662: LD_INT 1
8664: DISABLE_MARKED
// disable ( 02 ) ;
8665: LD_INT 2
8667: DISABLE_MARKED
// disable ( 03 ) ;
8668: LD_INT 3
8670: DISABLE_MARKED
// disable ( 04 ) ;
8671: LD_INT 4
8673: DISABLE_MARKED
// disable ( 05 ) ;
8674: LD_INT 5
8676: DISABLE_MARKED
// disable ( 06 ) ;
8677: LD_INT 6
8679: DISABLE_MARKED
// disable ( 07 ) ;
8680: LD_INT 7
8682: DISABLE_MARKED
// disable ( 10 ) ;
8683: LD_INT 10
8685: DISABLE_MARKED
// disable ( 11 ) ;
8686: LD_INT 11
8688: DISABLE_MARKED
// disable ( 12 ) ;
8689: LD_INT 12
8691: DISABLE_MARKED
// disable ( 13 ) ;
8692: LD_INT 13
8694: DISABLE_MARKED
// disable ( 19 ) ;
8695: LD_INT 19
8697: DISABLE_MARKED
// disable ( 40 ) ;
8698: LD_INT 40
8700: DISABLE_MARKED
// disable ( 41 ) ;
8701: LD_INT 41
8703: DISABLE_MARKED
// disable ( 98 ) ;
8704: LD_INT 98
8706: DISABLE_MARKED
// disable ( 99 ) ;
8707: LD_INT 99
8709: DISABLE_MARKED
// disable ( 55 ) ;
8710: LD_INT 55
8712: DISABLE_MARKED
// disable ( 400 ) ;
8713: LD_INT 400
8715: DISABLE_MARKED
// disable ( 401 ) ;
8716: LD_INT 401
8718: DISABLE_MARKED
// end ; end_of_file
8719: LD_VAR 0 1
8723: RET
// function CanWinLoose ; begin
8724: LD_INT 0
8726: PPUSH
// Result := true ;
8727: LD_ADDR_VAR 0 1
8731: PUSH
8732: LD_INT 1
8734: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8735: CALL_OW 518
8739: PUSH
8740: CALL_OW 519
8744: PUSH
8745: LD_INT 0
8747: GREATER
8748: AND
8749: IFFALSE 8759
// Result := false ;
8751: LD_ADDR_VAR 0 1
8755: PUSH
8756: LD_INT 0
8758: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8759: CALL_OW 531
8763: PUSH
8764: CALL_OW 519
8768: PUSH
8769: LD_INT 1
8771: GREATER
8772: AND
8773: IFFALSE 8783
// Result := false ;
8775: LD_ADDR_VAR 0 1
8779: PUSH
8780: LD_INT 0
8782: ST_TO_ADDR
// end ;
8783: LD_VAR 0 1
8787: RET
// function HasPower ( i ) ; begin
8788: LD_INT 0
8790: PPUSH
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8791: LD_ADDR_VAR 0 2
8795: PUSH
8796: LD_INT 22
8798: PUSH
8799: LD_VAR 0 1
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: PUSH
8808: LD_INT 2
8810: PUSH
8811: LD_INT 21
8813: PUSH
8814: LD_INT 1
8816: PUSH
8817: EMPTY
8818: LIST
8819: LIST
8820: PUSH
8821: LD_INT 30
8823: PUSH
8824: LD_INT 0
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: PUSH
8831: LD_INT 30
8833: PUSH
8834: LD_INT 1
8836: PUSH
8837: EMPTY
8838: LIST
8839: LIST
8840: PUSH
8841: EMPTY
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: PPUSH
8851: CALL_OW 69
8855: ST_TO_ADDR
// end ;
8856: LD_VAR 0 2
8860: RET
// function AlliedSides ( i , j ) ; begin
8861: LD_INT 0
8863: PPUSH
// Result := false ;
8864: LD_ADDR_VAR 0 3
8868: PUSH
8869: LD_INT 0
8871: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8872: LD_VAR 0 1
8876: PPUSH
8877: LD_VAR 0 2
8881: PPUSH
8882: CALL_OW 81
8886: PUSH
8887: LD_INT 1
8889: EQUAL
8890: PUSH
8891: LD_VAR 0 2
8895: PPUSH
8896: LD_VAR 0 1
8900: PPUSH
8901: CALL_OW 81
8905: PUSH
8906: LD_INT 1
8908: EQUAL
8909: AND
8910: PUSH
8911: LD_VAR 0 1
8915: PPUSH
8916: CALL_OW 83
8920: AND
8921: PUSH
8922: LD_VAR 0 2
8926: PPUSH
8927: CALL_OW 83
8931: AND
8932: IFFALSE 8942
// Result := true ;
8934: LD_ADDR_VAR 0 3
8938: PUSH
8939: LD_INT 1
8941: ST_TO_ADDR
// end ;
8942: LD_VAR 0 3
8946: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
8947: CALL 8724 0 0
8951: IFFALSE 8960
8953: GO 8955
8955: DISABLE
// YouLostInMultiplayer ;
8956: CALL_OW 107
8960: END
// every 0 0$3 trigger CanWinLoose marked 401 do
8961: CALL 8724 0 0
8965: IFFALSE 8989
8967: GO 8969
8969: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
8970: LD_EXP 19
8974: PUSH
8975: LD_OWVAR 2
8979: ARRAY
8980: PPUSH
8981: CALL 19173 0 1
// YouWinInMultiplayer ;
8985: CALL_OW 106
// end ;
8989: END
// every 0 0$3 marked 98 do var i , CanWin ;
8990: GO 8992
8992: DISABLE
8993: LD_INT 0
8995: PPUSH
8996: PPUSH
// begin if not HasPower ( your_side ) then
8997: LD_OWVAR 2
9001: PPUSH
9002: CALL 8788 0 1
9006: NOT
9007: IFFALSE 9018
// begin Multiplayer_Loose_Message ;
9009: CALL_OW 521
// enable ( 400 ) ;
9013: LD_INT 400
9015: ENABLE_MARKED
// end else
9016: GO 9151
// begin CanWin := true ;
9018: LD_ADDR_VAR 0 2
9022: PUSH
9023: LD_INT 1
9025: ST_TO_ADDR
// for i := 1 to 8 do
9026: LD_ADDR_VAR 0 1
9030: PUSH
9031: DOUBLE
9032: LD_INT 1
9034: DEC
9035: ST_TO_ADDR
9036: LD_INT 8
9038: PUSH
9039: FOR_TO
9040: IFFALSE 9137
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9042: LD_EXP 18
9046: PUSH
9047: LD_VAR 0 1
9051: ARRAY
9052: PUSH
9053: LD_VAR 0 1
9057: PPUSH
9058: CALL_OW 108
9062: AND
9063: PUSH
9064: LD_VAR 0 1
9068: PUSH
9069: LD_OWVAR 2
9073: NONEQUAL
9074: AND
9075: IFFALSE 9135
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
9077: LD_EXP 16
9081: PUSH
9082: LD_VAR 0 1
9086: ARRAY
9087: NOT
9088: PUSH
9089: LD_EXP 16
9093: PUSH
9094: LD_VAR 0 1
9098: ARRAY
9099: PUSH
9100: LD_EXP 16
9104: PUSH
9105: LD_OWVAR 2
9109: ARRAY
9110: NONEQUAL
9111: OR
9112: IFFALSE 9135
// if HasPower ( i ) then
9114: LD_VAR 0 1
9118: PPUSH
9119: CALL 8788 0 1
9123: IFFALSE 9135
// begin CanWin := false ;
9125: LD_ADDR_VAR 0 2
9129: PUSH
9130: LD_INT 0
9132: ST_TO_ADDR
// break ;
9133: GO 9137
// end ;
9135: GO 9039
9137: POP
9138: POP
// if CanWin then
9139: LD_VAR 0 2
9143: IFFALSE 9150
// enable ( 401 ) else
9145: LD_INT 401
9147: ENABLE_MARKED
9148: GO 9151
// enable ;
9150: ENABLE
// end ; end ;
9151: PPOPN 2
9153: END
// every 0 0$3 marked 99 do var i , CanWin ;
9154: GO 9156
9156: DISABLE
9157: LD_INT 0
9159: PPUSH
9160: PPUSH
// begin if not HasPower ( your_side ) then
9161: LD_OWVAR 2
9165: PPUSH
9166: CALL 8788 0 1
9170: NOT
9171: IFFALSE 9182
// begin Multiplayer_Loose_Message ;
9173: CALL_OW 521
// enable ( 400 ) ;
9177: LD_INT 400
9179: ENABLE_MARKED
// end else
9180: GO 9295
// begin CanWin := true ;
9182: LD_ADDR_VAR 0 2
9186: PUSH
9187: LD_INT 1
9189: ST_TO_ADDR
// for i := 1 to 8 do
9190: LD_ADDR_VAR 0 1
9194: PUSH
9195: DOUBLE
9196: LD_INT 1
9198: DEC
9199: ST_TO_ADDR
9200: LD_INT 8
9202: PUSH
9203: FOR_TO
9204: IFFALSE 9281
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9206: LD_EXP 18
9210: PUSH
9211: LD_VAR 0 1
9215: ARRAY
9216: PUSH
9217: LD_VAR 0 1
9221: PPUSH
9222: CALL_OW 108
9226: AND
9227: PUSH
9228: LD_VAR 0 1
9232: PUSH
9233: LD_OWVAR 2
9237: NONEQUAL
9238: AND
9239: IFFALSE 9279
// if not AlliedSides ( i , your_side ) then
9241: LD_VAR 0 1
9245: PPUSH
9246: LD_OWVAR 2
9250: PPUSH
9251: CALL 8861 0 2
9255: NOT
9256: IFFALSE 9279
// if HasPower ( i ) then
9258: LD_VAR 0 1
9262: PPUSH
9263: CALL 8788 0 1
9267: IFFALSE 9279
// begin CanWin := false ;
9269: LD_ADDR_VAR 0 2
9273: PUSH
9274: LD_INT 0
9276: ST_TO_ADDR
// break ;
9277: GO 9281
// end ;
9279: GO 9203
9281: POP
9282: POP
// if CanWin then
9283: LD_VAR 0 2
9287: IFFALSE 9294
// enable ( 401 ) else
9289: LD_INT 401
9291: ENABLE_MARKED
9292: GO 9295
// enable ;
9294: ENABLE
// end ; end ; end_of_file
9295: PPOPN 2
9297: END
// var time ; export lidi , krabice , opoce ; export cper , cperiode ; var depot1 , depot2 ; var vlajka1 , vlajka2 ; export depotpositions , areas ; var podvozky , zbrane ; export pos1side , pos2side ; var pos1base , pos2base ; var left_score , right_score ; export debug , ctf ; export mp_sides_teams_ , mp_sides_nations_ , mp_sides_positions_ , mp_sides_players_counts_ ; var cft_01 , cft_02 , cft_03 , cft_04 , cft_05 , cft_06 , cft_07 ; export nonctf_10 , nonctf_11 , nonctf_12 , nonctf_13 ; var stmp , stmp2 , cl ; export function starting_ctf ; begin
9298: LD_INT 0
9300: PPUSH
// cft_01 = 01 ;
9301: LD_ADDR_LOC 24
9305: PUSH
9306: LD_INT 1
9308: ST_TO_ADDR
// cft_02 = 02 ;
9309: LD_ADDR_LOC 25
9313: PUSH
9314: LD_INT 2
9316: ST_TO_ADDR
// cft_03 = 03 ;
9317: LD_ADDR_LOC 26
9321: PUSH
9322: LD_INT 3
9324: ST_TO_ADDR
// cft_04 = 04 ;
9325: LD_ADDR_LOC 27
9329: PUSH
9330: LD_INT 4
9332: ST_TO_ADDR
// cft_05 = 05 ;
9333: LD_ADDR_LOC 28
9337: PUSH
9338: LD_INT 5
9340: ST_TO_ADDR
// cft_06 = 06 ;
9341: LD_ADDR_LOC 29
9345: PUSH
9346: LD_INT 6
9348: ST_TO_ADDR
// cft_07 = 07 ;
9349: LD_ADDR_LOC 30
9353: PUSH
9354: LD_INT 7
9356: ST_TO_ADDR
// nonctf_10 = 10 ;
9357: LD_ADDR_EXP 52
9361: PUSH
9362: LD_INT 10
9364: ST_TO_ADDR
// nonctf_11 = 11 ;
9365: LD_ADDR_EXP 53
9369: PUSH
9370: LD_INT 11
9372: ST_TO_ADDR
// nonctf_12 = 12 ;
9373: LD_ADDR_EXP 54
9377: PUSH
9378: LD_INT 12
9380: ST_TO_ADDR
// nonctf_13 = 13 ;
9381: LD_ADDR_EXP 55
9385: PUSH
9386: LD_INT 13
9388: ST_TO_ADDR
// disable ( cft_01 ) ;
9389: LD_LOC 24
9393: DISABLE_MARKED
// disable ( cft_02 ) ;
9394: LD_LOC 25
9398: DISABLE_MARKED
// disable ( cft_03 ) ;
9399: LD_LOC 26
9403: DISABLE_MARKED
// disable ( cft_04 ) ;
9404: LD_LOC 27
9408: DISABLE_MARKED
// disable ( cft_05 ) ;
9409: LD_LOC 28
9413: DISABLE_MARKED
// disable ( cft_06 ) ;
9414: LD_LOC 29
9418: DISABLE_MARKED
// disable ( cft_07 ) ;
9419: LD_LOC 30
9423: DISABLE_MARKED
// disable ( nonctf_10 ) ;
9424: LD_EXP 52
9428: DISABLE_MARKED
// disable ( nonctf_11 ) ;
9429: LD_EXP 53
9433: DISABLE_MARKED
// disable ( nonctf_12 ) ;
9434: LD_EXP 54
9438: DISABLE_MARKED
// disable ( nonctf_13 ) ;
9439: LD_EXP 55
9443: DISABLE_MARKED
// debug = false ;
9444: LD_ADDR_EXP 46
9448: PUSH
9449: LD_INT 0
9451: ST_TO_ADDR
// if not multiplayer then
9452: LD_OWVAR 4
9456: NOT
9457: IFFALSE 9617
// begin mp_sides_teams_ = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9459: LD_ADDR_EXP 48
9463: PUSH
9464: LD_INT 0
9466: PUSH
9467: LD_INT 0
9469: PUSH
9470: LD_INT 0
9472: PUSH
9473: LD_INT 0
9475: PUSH
9476: LD_INT 0
9478: PUSH
9479: LD_INT 0
9481: PUSH
9482: LD_INT 0
9484: PUSH
9485: LD_INT 0
9487: PUSH
9488: EMPTY
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: ST_TO_ADDR
// mp_sides_nations_ = [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9498: LD_ADDR_EXP 49
9502: PUSH
9503: LD_INT 1
9505: PUSH
9506: LD_INT 2
9508: PUSH
9509: LD_INT 0
9511: PUSH
9512: LD_INT 0
9514: PUSH
9515: LD_INT 0
9517: PUSH
9518: LD_INT 0
9520: PUSH
9521: LD_INT 0
9523: PUSH
9524: LD_INT 0
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: ST_TO_ADDR
// mp_sides_positions_ = [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9537: LD_ADDR_EXP 50
9541: PUSH
9542: LD_INT 1
9544: PUSH
9545: LD_INT 2
9547: PUSH
9548: LD_INT 0
9550: PUSH
9551: LD_INT 0
9553: PUSH
9554: LD_INT 0
9556: PUSH
9557: LD_INT 0
9559: PUSH
9560: LD_INT 0
9562: PUSH
9563: LD_INT 0
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: ST_TO_ADDR
// mp_sides_players_counts_ = [ 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9576: LD_ADDR_EXP 51
9580: PUSH
9581: LD_INT 1
9583: PUSH
9584: LD_INT 1
9586: PUSH
9587: LD_INT 0
9589: PUSH
9590: LD_INT 0
9592: PUSH
9593: LD_INT 0
9595: PUSH
9596: LD_INT 0
9598: PUSH
9599: LD_INT 0
9601: PUSH
9602: LD_INT 0
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: ST_TO_ADDR
// end else
9615: GO 9657
// begin mp_sides_teams_ = mp_sides_teams ;
9617: LD_ADDR_EXP 48
9621: PUSH
9622: LD_OWVAR 15
9626: ST_TO_ADDR
// mp_sides_nations_ = mp_sides_nations ;
9627: LD_ADDR_EXP 49
9631: PUSH
9632: LD_OWVAR 16
9636: ST_TO_ADDR
// mp_sides_positions_ = mp_sides_positions ;
9637: LD_ADDR_EXP 50
9641: PUSH
9642: LD_OWVAR 17
9646: ST_TO_ADDR
// mp_sides_players_counts_ = mp_sides_players_counts ;
9647: LD_ADDR_EXP 51
9651: PUSH
9652: LD_OWVAR 18
9656: ST_TO_ADDR
// end ; if debug then
9657: LD_EXP 46
9661: IFFALSE 9743
// begin debuglog ( [ side , your_side ] ) ;
9663: LD_STRING side
9665: PUSH
9666: LD_OWVAR 2
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: PPUSH
9675: CALL_OW 359
// debuglog ( [ teams , mp_sides_teams_ ] ) ;
9679: LD_STRING teams
9681: PUSH
9682: LD_EXP 48
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: PPUSH
9691: CALL_OW 359
// debuglog ( [ nations , mp_sides_nations_ ] ) ;
9695: LD_STRING nations
9697: PUSH
9698: LD_EXP 49
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PPUSH
9707: CALL_OW 359
// debuglog ( [ positions , mp_sides_positions_ ] ) ;
9711: LD_STRING positions
9713: PUSH
9714: LD_EXP 50
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PPUSH
9723: CALL_OW 359
// debuglog ( [ pl. counts , mp_sides_players_counts_ ] ) ;
9727: LD_STRING pl. counts
9729: PUSH
9730: LD_EXP 51
9734: PUSH
9735: EMPTY
9736: LIST
9737: LIST
9738: PPUSH
9739: CALL_OW 359
// end ; depotpositions = [ [ 34 , 60 , 1 ] , [ 185 , 60 , 4 ] ] ;
9743: LD_ADDR_EXP 42
9747: PUSH
9748: LD_INT 34
9750: PUSH
9751: LD_INT 60
9753: PUSH
9754: LD_INT 1
9756: PUSH
9757: EMPTY
9758: LIST
9759: LIST
9760: LIST
9761: PUSH
9762: LD_INT 185
9764: PUSH
9765: LD_INT 60
9767: PUSH
9768: LD_INT 4
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: LIST
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: ST_TO_ADDR
// areas = [ vlevo , vpravo ] ;
9780: LD_ADDR_EXP 43
9784: PUSH
9785: LD_INT 2
9787: PUSH
9788: LD_INT 3
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: ST_TO_ADDR
// if mp_game_type = 3 then
9795: LD_OWVAR 6
9799: PUSH
9800: LD_INT 3
9802: EQUAL
9803: IFFALSE 9811
// begin other_game ;
9805: CALL 12883 0 0
// exit ;
9809: GO 11259
// end ; ctf = true ;
9811: LD_ADDR_EXP 47
9815: PUSH
9816: LD_INT 1
9818: ST_TO_ADDR
// enable ( cft_01 ) ;
9819: LD_LOC 24
9823: ENABLE_MARKED
// enable ( cft_02 ) ;
9824: LD_LOC 25
9828: ENABLE_MARKED
// enable ( cft_05 ) ;
9829: LD_LOC 28
9833: ENABLE_MARKED
// enable ( cft_06 ) ;
9834: LD_LOC 29
9838: ENABLE_MARKED
// enable ( cft_07 ) ;
9839: LD_LOC 30
9843: ENABLE_MARKED
// podvozky = [ us_medium_wheeled , ar_medium_trike , ru_medium_wheeled ] ;
9844: LD_ADDR_LOC 18
9848: PUSH
9849: LD_INT 2
9851: PUSH
9852: LD_INT 13
9854: PUSH
9855: LD_INT 21
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: LIST
9862: ST_TO_ADDR
// zbrane = [ us_cargo_bay , ar_cargo_bay , ru_cargo_bay ] ;
9863: LD_ADDR_LOC 19
9867: PUSH
9868: LD_INT 12
9870: PUSH
9871: LD_INT 32
9873: PUSH
9874: LD_INT 51
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: LIST
9881: ST_TO_ADDR
// left_score = 0 ;
9882: LD_ADDR_LOC 22
9886: PUSH
9887: LD_INT 0
9889: ST_TO_ADDR
// right_score = 0 ;
9890: LD_ADDR_LOC 23
9894: PUSH
9895: LD_INT 0
9897: ST_TO_ADDR
// if multiplayer then
9898: LD_OWVAR 4
9902: IFFALSE 9958
// begin lidi = getmultiplayersetting ( 1 ) ;
9904: LD_ADDR_EXP 37
9908: PUSH
9909: LD_INT 1
9911: PPUSH
9912: CALL_OW 426
9916: ST_TO_ADDR
// krabice = getmultiplayersetting ( 2 ) ;
9917: LD_ADDR_EXP 38
9921: PUSH
9922: LD_INT 2
9924: PPUSH
9925: CALL_OW 426
9929: ST_TO_ADDR
// opoce = getmultiplayersetting ( 3 ) ;
9930: LD_ADDR_EXP 39
9934: PUSH
9935: LD_INT 3
9937: PPUSH
9938: CALL_OW 426
9942: ST_TO_ADDR
// time = getmultiplayersetting ( 4 ) ;
9943: LD_ADDR_LOC 13
9947: PUSH
9948: LD_INT 4
9950: PPUSH
9951: CALL_OW 426
9955: ST_TO_ADDR
// end else
9956: GO 9990
// begin lidi = 1 ;
9958: LD_ADDR_EXP 37
9962: PUSH
9963: LD_INT 1
9965: ST_TO_ADDR
// krabice = 1 ;
9966: LD_ADDR_EXP 38
9970: PUSH
9971: LD_INT 1
9973: ST_TO_ADDR
// opoce = 3 ;
9974: LD_ADDR_EXP 39
9978: PUSH
9979: LD_INT 3
9981: ST_TO_ADDR
// time = 2 ;
9982: LD_ADDR_LOC 13
9986: PUSH
9987: LD_INT 2
9989: ST_TO_ADDR
// end ; case lidi of 0 :
9990: LD_EXP 37
9994: PUSH
9995: LD_INT 0
9997: DOUBLE
9998: EQUAL
9999: IFTRUE 10003
10001: GO 10014
10003: POP
// lidi = 9 ; 1 :
10004: LD_ADDR_EXP 37
10008: PUSH
10009: LD_INT 9
10011: ST_TO_ADDR
10012: GO 10091
10014: LD_INT 1
10016: DOUBLE
10017: EQUAL
10018: IFTRUE 10022
10020: GO 10033
10022: POP
// lidi = 13 ; 2 :
10023: LD_ADDR_EXP 37
10027: PUSH
10028: LD_INT 13
10030: ST_TO_ADDR
10031: GO 10091
10033: LD_INT 2
10035: DOUBLE
10036: EQUAL
10037: IFTRUE 10041
10039: GO 10052
10041: POP
// lidi = 19 ; 3 :
10042: LD_ADDR_EXP 37
10046: PUSH
10047: LD_INT 19
10049: ST_TO_ADDR
10050: GO 10091
10052: LD_INT 3
10054: DOUBLE
10055: EQUAL
10056: IFTRUE 10060
10058: GO 10071
10060: POP
// lidi = 23 ; 4 :
10061: LD_ADDR_EXP 37
10065: PUSH
10066: LD_INT 23
10068: ST_TO_ADDR
10069: GO 10091
10071: LD_INT 4
10073: DOUBLE
10074: EQUAL
10075: IFTRUE 10079
10077: GO 10090
10079: POP
// lidi = 29 ; end ;
10080: LD_ADDR_EXP 37
10084: PUSH
10085: LD_INT 29
10087: ST_TO_ADDR
10088: GO 10091
10090: POP
// case krabice of 0 :
10091: LD_EXP 38
10095: PUSH
10096: LD_INT 0
10098: DOUBLE
10099: EQUAL
10100: IFTRUE 10104
10102: GO 10115
10104: POP
// cperiode = 1 1$30 ; 1 :
10105: LD_ADDR_EXP 41
10109: PUSH
10110: LD_INT 3150
10112: ST_TO_ADDR
10113: GO 10154
10115: LD_INT 1
10117: DOUBLE
10118: EQUAL
10119: IFTRUE 10123
10121: GO 10134
10123: POP
// cperiode = 1 1$00 ; 2 :
10124: LD_ADDR_EXP 41
10128: PUSH
10129: LD_INT 2100
10131: ST_TO_ADDR
10132: GO 10154
10134: LD_INT 2
10136: DOUBLE
10137: EQUAL
10138: IFTRUE 10142
10140: GO 10153
10142: POP
// cperiode = 0 0$30 ; end ;
10143: LD_ADDR_EXP 41
10147: PUSH
10148: LD_INT 1050
10150: ST_TO_ADDR
10151: GO 10154
10153: POP
// cper = 0 0$10 ;
10154: LD_ADDR_EXP 40
10158: PUSH
10159: LD_INT 350
10161: ST_TO_ADDR
// case opoce of 0 :
10162: LD_EXP 39
10166: PUSH
10167: LD_INT 0
10169: DOUBLE
10170: EQUAL
10171: IFTRUE 10175
10173: GO 10186
10175: POP
// opoce = 0 ; 1 :
10176: LD_ADDR_EXP 39
10180: PUSH
10181: LD_INT 0
10183: ST_TO_ADDR
10184: GO 10301
10186: LD_INT 1
10188: DOUBLE
10189: EQUAL
10190: IFTRUE 10194
10192: GO 10205
10194: POP
// opoce = 3 ; 2 :
10195: LD_ADDR_EXP 39
10199: PUSH
10200: LD_INT 3
10202: ST_TO_ADDR
10203: GO 10301
10205: LD_INT 2
10207: DOUBLE
10208: EQUAL
10209: IFTRUE 10213
10211: GO 10224
10213: POP
// opoce = 7 ; 3 :
10214: LD_ADDR_EXP 39
10218: PUSH
10219: LD_INT 7
10221: ST_TO_ADDR
10222: GO 10301
10224: LD_INT 3
10226: DOUBLE
10227: EQUAL
10228: IFTRUE 10232
10230: GO 10243
10232: POP
// opoce = 11 ; 4 :
10233: LD_ADDR_EXP 39
10237: PUSH
10238: LD_INT 11
10240: ST_TO_ADDR
10241: GO 10301
10243: LD_INT 4
10245: DOUBLE
10246: EQUAL
10247: IFTRUE 10251
10249: GO 10262
10251: POP
// opoce = 15 ; 5 :
10252: LD_ADDR_EXP 39
10256: PUSH
10257: LD_INT 15
10259: ST_TO_ADDR
10260: GO 10301
10262: LD_INT 5
10264: DOUBLE
10265: EQUAL
10266: IFTRUE 10270
10268: GO 10281
10270: POP
// opoce = 19 ; 6 :
10271: LD_ADDR_EXP 39
10275: PUSH
10276: LD_INT 19
10278: ST_TO_ADDR
10279: GO 10301
10281: LD_INT 6
10283: DOUBLE
10284: EQUAL
10285: IFTRUE 10289
10287: GO 10300
10289: POP
// opoce = 23 ; end ;
10290: LD_ADDR_EXP 39
10294: PUSH
10295: LD_INT 23
10297: ST_TO_ADDR
10298: GO 10301
10300: POP
// case time of 0 :
10301: LD_LOC 13
10305: PUSH
10306: LD_INT 0
10308: DOUBLE
10309: EQUAL
10310: IFTRUE 10314
10312: GO 10329
10314: POP
// time = 30 * 60 ; 1 :
10315: LD_ADDR_LOC 13
10319: PUSH
10320: LD_INT 30
10322: PUSH
10323: LD_INT 60
10325: MUL
10326: ST_TO_ADDR
10327: GO 10445
10329: LD_INT 1
10331: DOUBLE
10332: EQUAL
10333: IFTRUE 10337
10335: GO 10352
10337: POP
// time = 40 * 60 ; 2 :
10338: LD_ADDR_LOC 13
10342: PUSH
10343: LD_INT 40
10345: PUSH
10346: LD_INT 60
10348: MUL
10349: ST_TO_ADDR
10350: GO 10445
10352: LD_INT 2
10354: DOUBLE
10355: EQUAL
10356: IFTRUE 10360
10358: GO 10375
10360: POP
// time = 50 * 60 ; 3 :
10361: LD_ADDR_LOC 13
10365: PUSH
10366: LD_INT 50
10368: PUSH
10369: LD_INT 60
10371: MUL
10372: ST_TO_ADDR
10373: GO 10445
10375: LD_INT 3
10377: DOUBLE
10378: EQUAL
10379: IFTRUE 10383
10381: GO 10398
10383: POP
// time = 60 * 60 ; 4 :
10384: LD_ADDR_LOC 13
10388: PUSH
10389: LD_INT 60
10391: PUSH
10392: LD_INT 60
10394: MUL
10395: ST_TO_ADDR
10396: GO 10445
10398: LD_INT 4
10400: DOUBLE
10401: EQUAL
10402: IFTRUE 10406
10404: GO 10421
10406: POP
// time = 90 * 60 ; 5 :
10407: LD_ADDR_LOC 13
10411: PUSH
10412: LD_INT 90
10414: PUSH
10415: LD_INT 60
10417: MUL
10418: ST_TO_ADDR
10419: GO 10445
10421: LD_INT 5
10423: DOUBLE
10424: EQUAL
10425: IFTRUE 10429
10427: GO 10444
10429: POP
// time = 120 * 60 ; end ;
10430: LD_ADDR_LOC 13
10434: PUSH
10435: LD_INT 120
10437: PUSH
10438: LD_INT 60
10440: MUL
10441: ST_TO_ADDR
10442: GO 10445
10444: POP
// enable ( cft_03 ) ;
10445: LD_LOC 26
10449: ENABLE_MARKED
// refresh ;
10450: CALL 11264 0 0
// for stmp = 1 to 8 do
10454: LD_ADDR_LOC 31
10458: PUSH
10459: DOUBLE
10460: LD_INT 1
10462: DEC
10463: ST_TO_ADDR
10464: LD_INT 8
10466: PUSH
10467: FOR_TO
10468: IFFALSE 10837
// if mp_sides_nations_ [ stmp ] then
10470: LD_EXP 49
10474: PUSH
10475: LD_LOC 31
10479: ARRAY
10480: IFFALSE 10835
// begin if mp_sides_positions_ [ stmp ] = 1 then
10482: LD_EXP 50
10486: PUSH
10487: LD_LOC 31
10491: ARRAY
10492: PUSH
10493: LD_INT 1
10495: EQUAL
10496: IFFALSE 10510
// pos1side = stmp else
10498: LD_ADDR_EXP 44
10502: PUSH
10503: LD_LOC 31
10507: ST_TO_ADDR
10508: GO 10520
// pos2side = stmp ;
10510: LD_ADDR_EXP 45
10514: PUSH
10515: LD_LOC 31
10519: ST_TO_ADDR
// uc_side = stmp ;
10520: LD_ADDR_OWVAR 20
10524: PUSH
10525: LD_LOC 31
10529: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ stmp ] ;
10530: LD_ADDR_OWVAR 21
10534: PUSH
10535: LD_EXP 49
10539: PUSH
10540: LD_LOC 31
10544: ARRAY
10545: ST_TO_ADDR
// bc_type = b_depot ;
10546: LD_ADDR_OWVAR 42
10550: PUSH
10551: LD_INT 0
10553: ST_TO_ADDR
// bc_level = 1 ;
10554: LD_ADDR_OWVAR 43
10558: PUSH
10559: LD_INT 1
10561: ST_TO_ADDR
// createandplacebuildingxyd ( depotpositions [ mp_sides_positions_ [ stmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 2 ] , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 3 ] ) ;
10562: LD_EXP 42
10566: PUSH
10567: LD_EXP 50
10571: PUSH
10572: LD_LOC 31
10576: ARRAY
10577: ARRAY
10578: PUSH
10579: LD_INT 1
10581: ARRAY
10582: PPUSH
10583: LD_EXP 42
10587: PUSH
10588: LD_EXP 50
10592: PUSH
10593: LD_LOC 31
10597: ARRAY
10598: ARRAY
10599: PUSH
10600: LD_INT 2
10602: ARRAY
10603: PPUSH
10604: LD_EXP 42
10608: PUSH
10609: LD_EXP 50
10613: PUSH
10614: LD_LOC 31
10618: ARRAY
10619: ARRAY
10620: PUSH
10621: LD_INT 3
10623: ARRAY
10624: PPUSH
10625: CALL_OW 47
// setbattleflag ( stmp , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 2 ] , [ [ bfo_defend_bonus_human , 150 ] , [ bfo_defend_bonus_vehicle , 10 ] , [ bfo_defend_bonus_building , 0 ] , [ bfo_range , 17 ] , [ bfo_height , 100 ] ] ) ;
10629: LD_LOC 31
10633: PPUSH
10634: LD_EXP 42
10638: PUSH
10639: LD_EXP 50
10643: PUSH
10644: LD_LOC 31
10648: ARRAY
10649: ARRAY
10650: PUSH
10651: LD_INT 1
10653: ARRAY
10654: PPUSH
10655: LD_EXP 42
10659: PUSH
10660: LD_EXP 50
10664: PUSH
10665: LD_LOC 31
10669: ARRAY
10670: ARRAY
10671: PUSH
10672: LD_INT 2
10674: ARRAY
10675: PPUSH
10676: LD_INT 1
10678: PUSH
10679: LD_INT 150
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: PUSH
10686: LD_INT 2
10688: PUSH
10689: LD_INT 10
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PUSH
10696: LD_INT 3
10698: PUSH
10699: LD_INT 0
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: PUSH
10706: LD_INT 10
10708: PUSH
10709: LD_INT 17
10711: PUSH
10712: EMPTY
10713: LIST
10714: LIST
10715: PUSH
10716: LD_INT 20
10718: PUSH
10719: LD_INT 100
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: PPUSH
10733: CALL_OW 418
// cl = class_engineer ;
10737: LD_ADDR_LOC 33
10741: PUSH
10742: LD_INT 2
10744: ST_TO_ADDR
// for stmp2 = 1 to lidi do
10745: LD_ADDR_LOC 32
10749: PUSH
10750: DOUBLE
10751: LD_INT 1
10753: DEC
10754: ST_TO_ADDR
10755: LD_EXP 37
10759: PUSH
10760: FOR_TO
10761: IFFALSE 10833
// begin if stmp2 >= lidi / 2 then
10763: LD_LOC 32
10767: PUSH
10768: LD_EXP 37
10772: PUSH
10773: LD_INT 2
10775: DIVREAL
10776: GREATEREQUAL
10777: IFFALSE 10787
// cl = class_soldier ;
10779: LD_ADDR_LOC 33
10783: PUSH
10784: LD_INT 1
10786: ST_TO_ADDR
// preparehuman ( 0 , cl , 1 ) ;
10787: LD_INT 0
10789: PPUSH
10790: LD_LOC 33
10794: PPUSH
10795: LD_INT 1
10797: PPUSH
10798: CALL_OW 380
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ stmp ] ] , false ) ;
10802: CALL_OW 44
10806: PPUSH
10807: LD_EXP 43
10811: PUSH
10812: LD_EXP 50
10816: PUSH
10817: LD_LOC 31
10821: ARRAY
10822: ARRAY
10823: PPUSH
10824: LD_INT 0
10826: PPUSH
10827: CALL_OW 49
// end ;
10831: GO 10760
10833: POP
10834: POP
// end ;
10835: GO 10467
10837: POP
10838: POP
// depot1 = filterunitsinarea ( vlevo , [ [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
10839: LD_ADDR_LOC 14
10843: PUSH
10844: LD_INT 2
10846: PPUSH
10847: LD_INT 21
10849: PUSH
10850: LD_INT 3
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PUSH
10857: LD_INT 30
10859: PUSH
10860: LD_INT 0
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: PPUSH
10871: CALL_OW 70
10875: PUSH
10876: LD_INT 1
10878: ARRAY
10879: ST_TO_ADDR
// depot2 = filterunitsinarea ( vpravo , [ [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
10880: LD_ADDR_LOC 15
10884: PUSH
10885: LD_INT 3
10887: PPUSH
10888: LD_INT 21
10890: PUSH
10891: LD_INT 3
10893: PUSH
10894: EMPTY
10895: LIST
10896: LIST
10897: PUSH
10898: LD_INT 30
10900: PUSH
10901: LD_INT 0
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: PPUSH
10912: CALL_OW 70
10916: PUSH
10917: LD_INT 1
10919: ARRAY
10920: ST_TO_ADDR
// pos1base = getbase ( depot1 ) ;
10921: LD_ADDR_LOC 20
10925: PUSH
10926: LD_LOC 14
10930: PPUSH
10931: CALL_OW 274
10935: ST_TO_ADDR
// pos2base = getbase ( depot2 ) ;
10936: LD_ADDR_LOC 21
10940: PUSH
10941: LD_LOC 15
10945: PPUSH
10946: CALL_OW 274
10950: ST_TO_ADDR
// uc_side = 0 ;
10951: LD_ADDR_OWVAR 20
10955: PUSH
10956: LD_INT 0
10958: ST_TO_ADDR
// uc_nation = nation_nature ;
10959: LD_ADDR_OWVAR 21
10963: PUSH
10964: LD_INT 0
10966: ST_TO_ADDR
// for stmp = 1 to opoce do
10967: LD_ADDR_LOC 31
10971: PUSH
10972: DOUBLE
10973: LD_INT 1
10975: DEC
10976: ST_TO_ADDR
10977: LD_EXP 39
10981: PUSH
10982: FOR_TO
10983: IFFALSE 11015
// begin preparehuman ( 0 , class_apeman , 0 ) ;
10985: LD_INT 0
10987: PPUSH
10988: LD_INT 12
10990: PPUSH
10991: LD_INT 0
10993: PPUSH
10994: CALL_OW 380
// placeunitarea ( createhuman , les , false ) ;
10998: CALL_OW 44
11002: PPUSH
11003: LD_INT 4
11005: PPUSH
11006: LD_INT 0
11008: PPUSH
11009: CALL_OW 49
// end ;
11013: GO 10982
11015: POP
11016: POP
// uc_side = pos2side ;
11017: LD_ADDR_OWVAR 20
11021: PUSH
11022: LD_EXP 45
11026: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos2side ] ;
11027: LD_ADDR_OWVAR 21
11031: PUSH
11032: LD_EXP 49
11036: PUSH
11037: LD_EXP 45
11041: ARRAY
11042: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11043: LD_ADDR_OWVAR 37
11047: PUSH
11048: LD_LOC 18
11052: PUSH
11053: LD_OWVAR 21
11057: ARRAY
11058: ST_TO_ADDR
// vc_control = control_manual ;
11059: LD_ADDR_OWVAR 38
11063: PUSH
11064: LD_INT 1
11066: ST_TO_ADDR
// vc_engine = engine_siberite ;
11067: LD_ADDR_OWVAR 39
11071: PUSH
11072: LD_INT 3
11074: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
11075: LD_ADDR_OWVAR 40
11079: PUSH
11080: LD_LOC 19
11084: PUSH
11085: LD_OWVAR 21
11089: ARRAY
11090: ST_TO_ADDR
// vlajka1 = createvehicle ;
11091: LD_ADDR_LOC 16
11095: PUSH
11096: CALL_OW 45
11100: ST_TO_ADDR
// placeunitxy ( vlajka1 , 76 , 60 , false ) ;
11101: LD_LOC 16
11105: PPUSH
11106: LD_INT 76
11108: PPUSH
11109: LD_INT 60
11111: PPUSH
11112: LD_INT 0
11114: PPUSH
11115: CALL_OW 48
// uc_side = pos1side ;
11119: LD_ADDR_OWVAR 20
11123: PUSH
11124: LD_EXP 44
11128: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos1side ] ;
11129: LD_ADDR_OWVAR 21
11133: PUSH
11134: LD_EXP 49
11138: PUSH
11139: LD_EXP 44
11143: ARRAY
11144: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11145: LD_ADDR_OWVAR 37
11149: PUSH
11150: LD_LOC 18
11154: PUSH
11155: LD_OWVAR 21
11159: ARRAY
11160: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
11161: LD_ADDR_OWVAR 40
11165: PUSH
11166: LD_LOC 19
11170: PUSH
11171: LD_OWVAR 21
11175: ARRAY
11176: ST_TO_ADDR
// vlajka2 = createvehicle ;
11177: LD_ADDR_LOC 17
11181: PUSH
11182: CALL_OW 45
11186: ST_TO_ADDR
// placeunitxy ( vlajka2 , 143 , 60 , false ) ;
11187: LD_LOC 17
11191: PPUSH
11192: LD_INT 143
11194: PPUSH
11195: LD_INT 60
11197: PPUSH
11198: LD_INT 0
11200: PPUSH
11201: CALL_OW 48
// case mp_sides_positions_ [ your_side ] of 1 :
11205: LD_EXP 50
11209: PUSH
11210: LD_OWVAR 2
11214: ARRAY
11215: PUSH
11216: LD_INT 1
11218: DOUBLE
11219: EQUAL
11220: IFTRUE 11224
11222: GO 11237
11224: POP
// centernowonxy ( 44 , 60 ) ; 2 :
11225: LD_INT 44
11227: PPUSH
11228: LD_INT 60
11230: PPUSH
11231: CALL_OW 86
11235: GO 11259
11237: LD_INT 2
11239: DOUBLE
11240: EQUAL
11241: IFTRUE 11245
11243: GO 11258
11245: POP
// centernowonxy ( 175 , 60 ) ; end ;
11246: LD_INT 175
11248: PPUSH
11249: LD_INT 60
11251: PPUSH
11252: CALL_OW 86
11256: GO 11259
11258: POP
// end ;
11259: LD_VAR 0 1
11263: RET
// function refresh ; var tmp , tmp1 , tmp2 , tmp3 , tmp4 ; begin
11264: LD_INT 0
11266: PPUSH
11267: PPUSH
11268: PPUSH
11269: PPUSH
11270: PPUSH
11271: PPUSH
// tmp = time div 60 ;
11272: LD_ADDR_VAR 0 2
11276: PUSH
11277: LD_LOC 13
11281: PUSH
11282: LD_INT 60
11284: DIV
11285: ST_TO_ADDR
// if tmp < 10 then
11286: LD_VAR 0 2
11290: PUSH
11291: LD_INT 10
11293: LESS
11294: IFFALSE 11312
// tmp1 = 0 & tmp else
11296: LD_ADDR_VAR 0 3
11300: PUSH
11301: LD_STRING 0
11303: PUSH
11304: LD_VAR 0 2
11308: STR
11309: ST_TO_ADDR
11310: GO 11326
// tmp1 =  & tmp ;
11312: LD_ADDR_VAR 0 3
11316: PUSH
11317: LD_STRING 
11319: PUSH
11320: LD_VAR 0 2
11324: STR
11325: ST_TO_ADDR
// tmp = time mod 60 ;
11326: LD_ADDR_VAR 0 2
11330: PUSH
11331: LD_LOC 13
11335: PUSH
11336: LD_INT 60
11338: MOD
11339: ST_TO_ADDR
// if tmp < 10 then
11340: LD_VAR 0 2
11344: PUSH
11345: LD_INT 10
11347: LESS
11348: IFFALSE 11366
// tmp2 = 0 & tmp else
11350: LD_ADDR_VAR 0 4
11354: PUSH
11355: LD_STRING 0
11357: PUSH
11358: LD_VAR 0 2
11362: STR
11363: ST_TO_ADDR
11364: GO 11380
// tmp2 =  & tmp ;
11366: LD_ADDR_VAR 0 4
11370: PUSH
11371: LD_STRING 
11373: PUSH
11374: LD_VAR 0 2
11378: STR
11379: ST_TO_ADDR
// if left_score < 10 then
11380: LD_LOC 22
11384: PUSH
11385: LD_INT 10
11387: LESS
11388: IFFALSE 11406
// tmp3 = 0 & left_score else
11390: LD_ADDR_VAR 0 5
11394: PUSH
11395: LD_STRING 0
11397: PUSH
11398: LD_LOC 22
11402: STR
11403: ST_TO_ADDR
11404: GO 11420
// tmp3 =  & left_score ;
11406: LD_ADDR_VAR 0 5
11410: PUSH
11411: LD_STRING 
11413: PUSH
11414: LD_LOC 22
11418: STR
11419: ST_TO_ADDR
// if right_score < 10 then
11420: LD_LOC 23
11424: PUSH
11425: LD_INT 10
11427: LESS
11428: IFFALSE 11446
// tmp4 = 0 & right_score else
11430: LD_ADDR_VAR 0 6
11434: PUSH
11435: LD_STRING 0
11437: PUSH
11438: LD_LOC 23
11442: STR
11443: ST_TO_ADDR
11444: GO 11460
// tmp4 =  & right_score ;
11446: LD_ADDR_VAR 0 6
11450: PUSH
11451: LD_STRING 
11453: PUSH
11454: LD_LOC 23
11458: STR
11459: ST_TO_ADDR
// display_strings = [ Score:  & tmp3 &  to  & tmp4 , Time left:  & tmp1 & : & tmp2 ] ;
11460: LD_ADDR_OWVAR 47
11464: PUSH
11465: LD_STRING Score: 
11467: PUSH
11468: LD_VAR 0 5
11472: STR
11473: PUSH
11474: LD_STRING  to 
11476: STR
11477: PUSH
11478: LD_VAR 0 6
11482: STR
11483: PUSH
11484: LD_STRING Time left: 
11486: PUSH
11487: LD_VAR 0 3
11491: STR
11492: PUSH
11493: LD_STRING :
11495: STR
11496: PUSH
11497: LD_VAR 0 4
11501: STR
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: ST_TO_ADDR
// end ;
11507: LD_VAR 0 1
11511: RET
// every 0 0$1 marked 03 do
11512: GO 11514
11514: DISABLE
// begin time = time - 1 ;
11515: LD_ADDR_LOC 13
11519: PUSH
11520: LD_LOC 13
11524: PUSH
11525: LD_INT 1
11527: MINUS
11528: ST_TO_ADDR
// refresh ;
11529: CALL 11264 0 0
// if not time then
11533: LD_LOC 13
11537: NOT
11538: IFFALSE 11604
// if mp_sides_positions_ [ your_side ] = 1 then
11540: LD_EXP 50
11544: PUSH
11545: LD_OWVAR 2
11549: ARRAY
11550: PUSH
11551: LD_INT 1
11553: EQUAL
11554: IFFALSE 11580
// if left_score >= right_score then
11556: LD_LOC 22
11560: PUSH
11561: LD_LOC 23
11565: GREATEREQUAL
11566: IFFALSE 11574
// youwininmultiplayer else
11568: CALL_OW 106
11572: GO 11578
// youlostinmultiplayer else
11574: CALL_OW 107
11578: GO 11602
// if right_score >= left_score then
11580: LD_LOC 23
11584: PUSH
11585: LD_LOC 22
11589: GREATEREQUAL
11590: IFFALSE 11598
// youwininmultiplayer else
11592: CALL_OW 106
11596: GO 11602
// youlostinmultiplayer else
11598: CALL_OW 107
11602: GO 11605
// enable ;
11604: ENABLE
// end ;
11605: END
// every 0 0$10 marked 19 do
11606: GO 11608
11608: DISABLE
// begin cper = cper - 0 0$10 ;
11609: LD_ADDR_EXP 40
11613: PUSH
11614: LD_EXP 40
11618: PUSH
11619: LD_INT 350
11621: MINUS
11622: ST_TO_ADDR
// if cper = 0 then
11623: LD_EXP 40
11627: PUSH
11628: LD_INT 0
11630: EQUAL
11631: IFFALSE 11669
// begin createcratesarea ( 5 , vlevoex , true ) ;
11633: LD_INT 5
11635: PPUSH
11636: LD_INT 5
11638: PPUSH
11639: LD_INT 1
11641: PPUSH
11642: CALL_OW 55
// createcratesarea ( 5 , vpravoex , true ) ;
11646: LD_INT 5
11648: PPUSH
11649: LD_INT 6
11651: PPUSH
11652: LD_INT 1
11654: PPUSH
11655: CALL_OW 55
// cper = cperiode ;
11659: LD_ADDR_EXP 40
11663: PUSH
11664: LD_EXP 41
11668: ST_TO_ADDR
// end ; enable ;
11669: ENABLE
// end ;
11670: END
// every 5 trigger getlives ( depot1 ) < 500 marked 01 do
11671: LD_LOC 14
11675: PPUSH
11676: CALL_OW 256
11680: PUSH
11681: LD_INT 500
11683: LESS
11684: IFFALSE 11702
11686: GO 11688
11688: DISABLE
// begin setlives ( depot1 , 750 ) ;
11689: LD_LOC 14
11693: PPUSH
11694: LD_INT 750
11696: PPUSH
11697: CALL_OW 234
// enable ;
11701: ENABLE
// end ;
11702: END
// every 5 trigger getlives ( depot2 ) < 500 marked 02 do
11703: LD_LOC 15
11707: PPUSH
11708: CALL_OW 256
11712: PUSH
11713: LD_INT 500
11715: LESS
11716: IFFALSE 11734
11718: GO 11720
11720: DISABLE
// begin setlives ( depot2 , 750 ) ;
11721: LD_LOC 15
11725: PPUSH
11726: LD_INT 750
11728: PPUSH
11729: CALL_OW 234
// enable ;
11733: ENABLE
// end ;
11734: END
// on unitdestroyed ( un ) do var radius ;
11735: LD_INT 0
11737: PPUSH
// begin if GetClass ( un ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
11738: LD_VAR 0 1
11742: PPUSH
11743: CALL_OW 257
11747: PUSH
11748: LD_INT 12
11750: PUSH
11751: LD_INT 15
11753: PUSH
11754: LD_INT 17
11756: PUSH
11757: LD_INT 16
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: IN
11766: PUSH
11767: LD_VAR 0 1
11771: PPUSH
11772: CALL_OW 263
11776: PUSH
11777: LD_INT 5
11779: EQUAL
11780: OR
11781: IFFALSE 11792
// ApeKilled ( un ) ;
11783: LD_VAR 0 1
11787: PPUSH
11788: CALL 8147 0 1
// if mp_game_type <> 1 then
11792: LD_OWVAR 6
11796: PUSH
11797: LD_INT 1
11799: NONEQUAL
11800: IFFALSE 11804
// exit ;
11802: GO 12098
// if un = vlajka1 then
11804: LD_VAR 0 1
11808: PUSH
11809: LD_LOC 16
11813: EQUAL
11814: IFFALSE 11952
// begin uc_side = pos2side ;
11816: LD_ADDR_OWVAR 20
11820: PUSH
11821: LD_EXP 45
11825: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos2side ] ;
11826: LD_ADDR_OWVAR 21
11830: PUSH
11831: LD_EXP 49
11835: PUSH
11836: LD_EXP 45
11840: ARRAY
11841: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11842: LD_ADDR_OWVAR 37
11846: PUSH
11847: LD_LOC 18
11851: PUSH
11852: LD_OWVAR 21
11856: ARRAY
11857: ST_TO_ADDR
// vc_control = control_manual ;
11858: LD_ADDR_OWVAR 38
11862: PUSH
11863: LD_INT 1
11865: ST_TO_ADDR
// vc_engine = engine_siberite ;
11866: LD_ADDR_OWVAR 39
11870: PUSH
11871: LD_INT 3
11873: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
11874: LD_ADDR_OWVAR 40
11878: PUSH
11879: LD_LOC 19
11883: PUSH
11884: LD_OWVAR 21
11888: ARRAY
11889: ST_TO_ADDR
// vlajka1 = createvehicle ;
11890: LD_ADDR_LOC 16
11894: PUSH
11895: CALL_OW 45
11899: ST_TO_ADDR
// radius = 2 ;
11900: LD_ADDR_VAR 0 2
11904: PUSH
11905: LD_INT 2
11907: ST_TO_ADDR
// while not placeunitxyr ( vlajka1 , 76 , 60 , radius , false ) do
11908: LD_LOC 16
11912: PPUSH
11913: LD_INT 76
11915: PPUSH
11916: LD_INT 60
11918: PPUSH
11919: LD_VAR 0 2
11923: PPUSH
11924: LD_INT 0
11926: PPUSH
11927: CALL_OW 50
11931: NOT
11932: IFFALSE 11950
// radius = radius + 1 ;
11934: LD_ADDR_VAR 0 2
11938: PUSH
11939: LD_VAR 0 2
11943: PUSH
11944: LD_INT 1
11946: PLUS
11947: ST_TO_ADDR
11948: GO 11908
// end else
11950: GO 12098
// if un = vlajka2 then
11952: LD_VAR 0 1
11956: PUSH
11957: LD_LOC 17
11961: EQUAL
11962: IFFALSE 12098
// begin uc_side = pos1side ;
11964: LD_ADDR_OWVAR 20
11968: PUSH
11969: LD_EXP 44
11973: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos1side ] ;
11974: LD_ADDR_OWVAR 21
11978: PUSH
11979: LD_EXP 49
11983: PUSH
11984: LD_EXP 44
11988: ARRAY
11989: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11990: LD_ADDR_OWVAR 37
11994: PUSH
11995: LD_LOC 18
11999: PUSH
12000: LD_OWVAR 21
12004: ARRAY
12005: ST_TO_ADDR
// vc_control = control_manual ;
12006: LD_ADDR_OWVAR 38
12010: PUSH
12011: LD_INT 1
12013: ST_TO_ADDR
// vc_engine = engine_siberite ;
12014: LD_ADDR_OWVAR 39
12018: PUSH
12019: LD_INT 3
12021: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
12022: LD_ADDR_OWVAR 40
12026: PUSH
12027: LD_LOC 19
12031: PUSH
12032: LD_OWVAR 21
12036: ARRAY
12037: ST_TO_ADDR
// vlajka2 = createvehicle ;
12038: LD_ADDR_LOC 17
12042: PUSH
12043: CALL_OW 45
12047: ST_TO_ADDR
// radius = 2 ;
12048: LD_ADDR_VAR 0 2
12052: PUSH
12053: LD_INT 2
12055: ST_TO_ADDR
// while not placeunitxyr ( vlajka2 , 143 , 60 , radius , false ) do
12056: LD_LOC 17
12060: PPUSH
12061: LD_INT 143
12063: PPUSH
12064: LD_INT 60
12066: PPUSH
12067: LD_VAR 0 2
12071: PPUSH
12072: LD_INT 0
12074: PPUSH
12075: CALL_OW 50
12079: NOT
12080: IFFALSE 12098
// radius = radius + 1 ;
12082: LD_ADDR_VAR 0 2
12086: PUSH
12087: LD_VAR 0 2
12091: PUSH
12092: LD_INT 1
12094: PLUS
12095: ST_TO_ADDR
12096: GO 12056
// end ; end ;
12098: PPOPN 2
12100: END
// on vehiclecaptured ( vehnew , vehold , origside , hum ) marked 05 do var radius ;
12101: LD_INT 0
12103: PPUSH
// if ( vehold = vlajka1 ) then
12104: LD_VAR 0 2
12108: PUSH
12109: LD_LOC 16
12113: EQUAL
12114: IFFALSE 12267
// begin vlajka1 = vehnew ;
12116: LD_ADDR_LOC 16
12120: PUSH
12121: LD_VAR 0 1
12125: ST_TO_ADDR
// comexitvehicle ( vlajka1 ) ;
12126: LD_LOC 16
12130: PPUSH
12131: CALL_OW 121
// while isdrivenby ( vlajka1 ) do
12135: LD_LOC 16
12139: PPUSH
12140: CALL_OW 311
12144: IFFALSE 12155
// wait ( 2 ) ;
12146: LD_INT 2
12148: PPUSH
12149: CALL_OW 67
12153: GO 12135
// if getdistunitxy ( vlajka1 , 76 , 60 ) > 4 then
12155: LD_LOC 16
12159: PPUSH
12160: LD_INT 76
12162: PPUSH
12163: LD_INT 60
12165: PPUSH
12166: CALL_OW 297
12170: PUSH
12171: LD_INT 4
12173: GREATER
12174: IFFALSE 12251
// begin removeunit ( vlajka1 ) ;
12176: LD_LOC 16
12180: PPUSH
12181: CALL_OW 64
// setside ( vlajka1 , origside ) ;
12185: LD_LOC 16
12189: PPUSH
12190: LD_VAR 0 3
12194: PPUSH
12195: CALL_OW 235
// radius = 2 ;
12199: LD_ADDR_VAR 0 5
12203: PUSH
12204: LD_INT 2
12206: ST_TO_ADDR
// while not placeunitxyr ( vlajka1 , 76 , 60 , radius , false ) do
12207: LD_LOC 16
12211: PPUSH
12212: LD_INT 76
12214: PPUSH
12215: LD_INT 60
12217: PPUSH
12218: LD_VAR 0 5
12222: PPUSH
12223: LD_INT 0
12225: PPUSH
12226: CALL_OW 50
12230: NOT
12231: IFFALSE 12249
// radius = radius + 1 ;
12233: LD_ADDR_VAR 0 5
12237: PUSH
12238: LD_VAR 0 5
12242: PUSH
12243: LD_INT 1
12245: PLUS
12246: ST_TO_ADDR
12247: GO 12207
// end else
12249: GO 12265
// setside ( vlajka1 , origside ) ;
12251: LD_LOC 16
12255: PPUSH
12256: LD_VAR 0 3
12260: PPUSH
12261: CALL_OW 235
// end else
12265: GO 12428
// if ( vehold = vlajka2 ) then
12267: LD_VAR 0 2
12271: PUSH
12272: LD_LOC 17
12276: EQUAL
12277: IFFALSE 12428
// begin vlajka2 = vehnew ;
12279: LD_ADDR_LOC 17
12283: PUSH
12284: LD_VAR 0 1
12288: ST_TO_ADDR
// comexitvehicle ( vlajka2 ) ;
12289: LD_LOC 17
12293: PPUSH
12294: CALL_OW 121
// while isdrivenby ( vlajka2 ) do
12298: LD_LOC 17
12302: PPUSH
12303: CALL_OW 311
12307: IFFALSE 12318
// wait ( 2 ) ;
12309: LD_INT 2
12311: PPUSH
12312: CALL_OW 67
12316: GO 12298
// if getdistunitxy ( vlajka2 , 143 , 60 ) > 4 then
12318: LD_LOC 17
12322: PPUSH
12323: LD_INT 143
12325: PPUSH
12326: LD_INT 60
12328: PPUSH
12329: CALL_OW 297
12333: PUSH
12334: LD_INT 4
12336: GREATER
12337: IFFALSE 12414
// begin removeunit ( vlajka2 ) ;
12339: LD_LOC 17
12343: PPUSH
12344: CALL_OW 64
// setside ( vlajka2 , origside ) ;
12348: LD_LOC 17
12352: PPUSH
12353: LD_VAR 0 3
12357: PPUSH
12358: CALL_OW 235
// radius = 2 ;
12362: LD_ADDR_VAR 0 5
12366: PUSH
12367: LD_INT 2
12369: ST_TO_ADDR
// while not placeunitxyr ( vlajka2 , 143 , 60 , radius , false ) do
12370: LD_LOC 17
12374: PPUSH
12375: LD_INT 143
12377: PPUSH
12378: LD_INT 60
12380: PPUSH
12381: LD_VAR 0 5
12385: PPUSH
12386: LD_INT 0
12388: PPUSH
12389: CALL_OW 50
12393: NOT
12394: IFFALSE 12412
// radius = radius + 1 ;
12396: LD_ADDR_VAR 0 5
12400: PUSH
12401: LD_VAR 0 5
12405: PUSH
12406: LD_INT 1
12408: PLUS
12409: ST_TO_ADDR
12410: GO 12370
// end else
12412: GO 12428
// setside ( vlajka2 , origside ) ;
12414: LD_LOC 17
12418: PPUSH
12419: LD_VAR 0 3
12423: PPUSH
12424: CALL_OW 235
// end ;
12428: PPOPN 5
12430: END
// every 10 + 1 trigger getdistunitxy ( vlajka1 , 185 , 60 ) < 6 marked 06 do var radius , tmp ;
12431: LD_LOC 16
12435: PPUSH
12436: LD_INT 185
12438: PPUSH
12439: LD_INT 60
12441: PPUSH
12442: CALL_OW 297
12446: PUSH
12447: LD_INT 6
12449: LESS
12450: IFFALSE 12654
12452: GO 12454
12454: DISABLE
12455: LD_INT 0
12457: PPUSH
12458: PPUSH
// begin right_score = right_score + 1 ;
12459: LD_ADDR_LOC 23
12463: PUSH
12464: LD_LOC 23
12468: PUSH
12469: LD_INT 1
12471: PLUS
12472: ST_TO_ADDR
// refresh ;
12473: CALL 11264 0 0
// comexitvehicle ( vlajka1 ) ;
12477: LD_LOC 16
12481: PPUSH
12482: CALL_OW 121
// while isdrivenby ( vlajka1 ) do
12486: LD_LOC 16
12490: PPUSH
12491: CALL_OW 311
12495: IFFALSE 12506
// wait ( 2 ) ;
12497: LD_INT 2
12499: PPUSH
12500: CALL_OW 67
12504: GO 12486
// removeunit ( vlajka1 ) ;
12506: LD_LOC 16
12510: PPUSH
12511: CALL_OW 64
// for radius in [ mat_cans , mat_oil , mat_siberit ] do
12515: LD_ADDR_VAR 0 1
12519: PUSH
12520: LD_INT 1
12522: PUSH
12523: LD_INT 2
12525: PUSH
12526: LD_INT 3
12528: PUSH
12529: EMPTY
12530: LIST
12531: LIST
12532: LIST
12533: PUSH
12534: FOR_IN
12535: IFFALSE 12601
// begin tmp = getcargo ( vlajka1 , radius ) ;
12537: LD_ADDR_VAR 0 2
12541: PUSH
12542: LD_LOC 16
12546: PPUSH
12547: LD_VAR 0 1
12551: PPUSH
12552: CALL_OW 289
12556: ST_TO_ADDR
// if tmp then
12557: LD_VAR 0 2
12561: IFFALSE 12599
// begin addresourcetype ( pos2base , radius , tmp ) ;
12563: LD_LOC 21
12567: PPUSH
12568: LD_VAR 0 1
12572: PPUSH
12573: LD_VAR 0 2
12577: PPUSH
12578: CALL_OW 276
// setcargo ( vlajka1 , radius , 0 ) ;
12582: LD_LOC 16
12586: PPUSH
12587: LD_VAR 0 1
12591: PPUSH
12592: LD_INT 0
12594: PPUSH
12595: CALL_OW 290
// end ; end ;
12599: GO 12534
12601: POP
12602: POP
// radius = 2 ;
12603: LD_ADDR_VAR 0 1
12607: PUSH
12608: LD_INT 2
12610: ST_TO_ADDR
// while not placeunitxyr ( vlajka1 , 76 , 60 , radius , false ) do
12611: LD_LOC 16
12615: PPUSH
12616: LD_INT 76
12618: PPUSH
12619: LD_INT 60
12621: PPUSH
12622: LD_VAR 0 1
12626: PPUSH
12627: LD_INT 0
12629: PPUSH
12630: CALL_OW 50
12634: NOT
12635: IFFALSE 12653
// radius = radius + 1 ;
12637: LD_ADDR_VAR 0 1
12641: PUSH
12642: LD_VAR 0 1
12646: PUSH
12647: LD_INT 1
12649: PLUS
12650: ST_TO_ADDR
12651: GO 12611
// enable ;
12653: ENABLE
// end ;
12654: PPOPN 2
12656: END
// every 10 trigger getdistunitxy ( vlajka2 , 34 , 60 ) < 6 marked 07 do var radius , tmp ;
12657: LD_LOC 17
12661: PPUSH
12662: LD_INT 34
12664: PPUSH
12665: LD_INT 60
12667: PPUSH
12668: CALL_OW 297
12672: PUSH
12673: LD_INT 6
12675: LESS
12676: IFFALSE 12880
12678: GO 12680
12680: DISABLE
12681: LD_INT 0
12683: PPUSH
12684: PPUSH
// begin left_score = left_score + 1 ;
12685: LD_ADDR_LOC 22
12689: PUSH
12690: LD_LOC 22
12694: PUSH
12695: LD_INT 1
12697: PLUS
12698: ST_TO_ADDR
// refresh ;
12699: CALL 11264 0 0
// comexitvehicle ( vlajka2 ) ;
12703: LD_LOC 17
12707: PPUSH
12708: CALL_OW 121
// while isdrivenby ( vlajka2 ) do
12712: LD_LOC 17
12716: PPUSH
12717: CALL_OW 311
12721: IFFALSE 12732
// wait ( 2 ) ;
12723: LD_INT 2
12725: PPUSH
12726: CALL_OW 67
12730: GO 12712
// removeunit ( vlajka2 ) ;
12732: LD_LOC 17
12736: PPUSH
12737: CALL_OW 64
// for radius in [ mat_cans , mat_oil , mat_siberit ] do
12741: LD_ADDR_VAR 0 1
12745: PUSH
12746: LD_INT 1
12748: PUSH
12749: LD_INT 2
12751: PUSH
12752: LD_INT 3
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: LIST
12759: PUSH
12760: FOR_IN
12761: IFFALSE 12827
// begin tmp = getcargo ( vlajka2 , radius ) ;
12763: LD_ADDR_VAR 0 2
12767: PUSH
12768: LD_LOC 17
12772: PPUSH
12773: LD_VAR 0 1
12777: PPUSH
12778: CALL_OW 289
12782: ST_TO_ADDR
// if tmp then
12783: LD_VAR 0 2
12787: IFFALSE 12825
// begin addresourcetype ( pos1base , radius , tmp ) ;
12789: LD_LOC 20
12793: PPUSH
12794: LD_VAR 0 1
12798: PPUSH
12799: LD_VAR 0 2
12803: PPUSH
12804: CALL_OW 276
// setcargo ( vlajka2 , radius , 0 ) ;
12808: LD_LOC 17
12812: PPUSH
12813: LD_VAR 0 1
12817: PPUSH
12818: LD_INT 0
12820: PPUSH
12821: CALL_OW 290
// end ; end ;
12825: GO 12760
12827: POP
12828: POP
// radius = 2 ;
12829: LD_ADDR_VAR 0 1
12833: PUSH
12834: LD_INT 2
12836: ST_TO_ADDR
// while not placeunitxyr ( vlajka2 , 143 , 60 , radius , false ) do
12837: LD_LOC 17
12841: PPUSH
12842: LD_INT 143
12844: PPUSH
12845: LD_INT 60
12847: PPUSH
12848: LD_VAR 0 1
12852: PPUSH
12853: LD_INT 0
12855: PPUSH
12856: CALL_OW 50
12860: NOT
12861: IFFALSE 12879
// radius = radius + 1 ;
12863: LD_ADDR_VAR 0 1
12867: PUSH
12868: LD_VAR 0 1
12872: PUSH
12873: LD_INT 1
12875: PLUS
12876: ST_TO_ADDR
12877: GO 12837
// enable ;
12879: ENABLE
// end ; end_of_file
12880: PPOPN 2
12882: END
// var zakladna , skilly , start_res , extra_oil , extra_sib , zakl_plus , batt_fl , sib_det , people_resp , siberitofka ; var fortpos , areasdiff , directions ; var resp_cnt1 , resp_cnt2 ; export function other_game ; var tmp , tmp2 , tmp3 , cl ; begin
12883: LD_INT 0
12885: PPUSH
12886: PPUSH
12887: PPUSH
12888: PPUSH
12889: PPUSH
// ctf = false ;
12890: LD_ADDR_EXP 47
12894: PUSH
12895: LD_INT 0
12897: ST_TO_ADDR
// resp_cnt1 = 0 ;
12898: LD_ADDR_LOC 47
12902: PUSH
12903: LD_INT 0
12905: ST_TO_ADDR
// resp_cnt2 = 0 ;
12906: LD_ADDR_LOC 48
12910: PUSH
12911: LD_INT 0
12913: ST_TO_ADDR
// enable ( nonctf_13 ) ;
12914: LD_EXP 55
12918: ENABLE_MARKED
// for tmp = 1 to 8 do
12919: LD_ADDR_VAR 0 2
12923: PUSH
12924: DOUBLE
12925: LD_INT 1
12927: DEC
12928: ST_TO_ADDR
12929: LD_INT 8
12931: PUSH
12932: FOR_TO
12933: IFFALSE 12994
// begin setrestrict ( b_depot , tmp , state_enabled ) ;
12935: LD_INT 0
12937: PPUSH
12938: LD_VAR 0 2
12942: PPUSH
12943: LD_INT 1
12945: PPUSH
12946: CALL_OW 324
// if sib_det then
12950: LD_LOC 41
12954: IFFALSE 12971
// settech ( tech_sibdet , tmp , state_researched ) ;
12956: LD_INT 20
12958: PPUSH
12959: LD_VAR 0 2
12963: PPUSH
12964: LD_INT 2
12966: PPUSH
12967: CALL_OW 322
// if siberitofka then
12971: LD_LOC 43
12975: IFFALSE 12992
// settech ( tech_sibfiss , tmp , state_enabled ) ;
12977: LD_INT 25
12979: PPUSH
12980: LD_VAR 0 2
12984: PPUSH
12985: LD_INT 1
12987: PPUSH
12988: CALL_OW 322
// end ;
12992: GO 12932
12994: POP
12995: POP
// if multiplayer then
12996: LD_OWVAR 4
13000: IFFALSE 13173
// begin zakladna = getmultiplayersetting ( 0 ) ;
13002: LD_ADDR_LOC 34
13006: PUSH
13007: LD_INT 0
13009: PPUSH
13010: CALL_OW 426
13014: ST_TO_ADDR
// lidi = getmultiplayersetting ( 1 ) ;
13015: LD_ADDR_EXP 37
13019: PUSH
13020: LD_INT 1
13022: PPUSH
13023: CALL_OW 426
13027: ST_TO_ADDR
// skilly = getmultiplayersetting ( 2 ) ;
13028: LD_ADDR_LOC 35
13032: PUSH
13033: LD_INT 2
13035: PPUSH
13036: CALL_OW 426
13040: ST_TO_ADDR
// start_res = getmultiplayersetting ( 3 ) ;
13041: LD_ADDR_LOC 36
13045: PUSH
13046: LD_INT 3
13048: PPUSH
13049: CALL_OW 426
13053: ST_TO_ADDR
// krabice = getmultiplayersetting ( 4 ) ;
13054: LD_ADDR_EXP 38
13058: PUSH
13059: LD_INT 4
13061: PPUSH
13062: CALL_OW 426
13066: ST_TO_ADDR
// extra_oil = getmultiplayersetting ( 5 ) ;
13067: LD_ADDR_LOC 37
13071: PUSH
13072: LD_INT 5
13074: PPUSH
13075: CALL_OW 426
13079: ST_TO_ADDR
// extra_sib = getmultiplayersetting ( 6 ) ;
13080: LD_ADDR_LOC 38
13084: PUSH
13085: LD_INT 6
13087: PPUSH
13088: CALL_OW 426
13092: ST_TO_ADDR
// zakl_plus = getmultiplayersetting ( 7 ) ;
13093: LD_ADDR_LOC 39
13097: PUSH
13098: LD_INT 7
13100: PPUSH
13101: CALL_OW 426
13105: ST_TO_ADDR
// batt_fl = getmultiplayersetting ( 11 ) ;
13106: LD_ADDR_LOC 40
13110: PUSH
13111: LD_INT 11
13113: PPUSH
13114: CALL_OW 426
13118: ST_TO_ADDR
// sib_det = getmultiplayersetting ( 12 ) ;
13119: LD_ADDR_LOC 41
13123: PUSH
13124: LD_INT 12
13126: PPUSH
13127: CALL_OW 426
13131: ST_TO_ADDR
// opoce = getmultiplayersetting ( 13 ) ;
13132: LD_ADDR_EXP 39
13136: PUSH
13137: LD_INT 13
13139: PPUSH
13140: CALL_OW 426
13144: ST_TO_ADDR
// people_resp = getmultiplayersetting ( 14 ) ;
13145: LD_ADDR_LOC 42
13149: PUSH
13150: LD_INT 14
13152: PPUSH
13153: CALL_OW 426
13157: ST_TO_ADDR
// siberitofka = getmultiplayersetting ( 15 ) ;
13158: LD_ADDR_LOC 43
13162: PUSH
13163: LD_INT 15
13165: PPUSH
13166: CALL_OW 426
13170: ST_TO_ADDR
// end else
13171: GO 13277
// begin zakladna = 1 ;
13173: LD_ADDR_LOC 34
13177: PUSH
13178: LD_INT 1
13180: ST_TO_ADDR
// lidi = 1 ;
13181: LD_ADDR_EXP 37
13185: PUSH
13186: LD_INT 1
13188: ST_TO_ADDR
// skilly = 1 ;
13189: LD_ADDR_LOC 35
13193: PUSH
13194: LD_INT 1
13196: ST_TO_ADDR
// start_res = 2 ;
13197: LD_ADDR_LOC 36
13201: PUSH
13202: LD_INT 2
13204: ST_TO_ADDR
// krabice = 1 ;
13205: LD_ADDR_EXP 38
13209: PUSH
13210: LD_INT 1
13212: ST_TO_ADDR
// extra_oil = 1 ;
13213: LD_ADDR_LOC 37
13217: PUSH
13218: LD_INT 1
13220: ST_TO_ADDR
// extra_sib = 1 ;
13221: LD_ADDR_LOC 38
13225: PUSH
13226: LD_INT 1
13228: ST_TO_ADDR
// zakl_plus = 2 ;
13229: LD_ADDR_LOC 39
13233: PUSH
13234: LD_INT 2
13236: ST_TO_ADDR
// batt_fl = 0 ;
13237: LD_ADDR_LOC 40
13241: PUSH
13242: LD_INT 0
13244: ST_TO_ADDR
// sib_det = 0 ;
13245: LD_ADDR_LOC 41
13249: PUSH
13250: LD_INT 0
13252: ST_TO_ADDR
// opoce = 3 ;
13253: LD_ADDR_EXP 39
13257: PUSH
13258: LD_INT 3
13260: ST_TO_ADDR
// people_resp = 0 ;
13261: LD_ADDR_LOC 42
13265: PUSH
13266: LD_INT 0
13268: ST_TO_ADDR
// siberitofka = 0 ;
13269: LD_ADDR_LOC 43
13273: PUSH
13274: LD_INT 0
13276: ST_TO_ADDR
// end ; if people_resp then
13277: LD_LOC 42
13281: IFFALSE 13298
// begin enable ( nonctf_10 ) ;
13283: LD_EXP 52
13287: ENABLE_MARKED
// enable ( nonctf_11 ) ;
13288: LD_EXP 53
13292: ENABLE_MARKED
// enable ( nonctf_12 ) ;
13293: LD_EXP 54
13297: ENABLE_MARKED
// end ; if people_resp = 1 then
13298: LD_LOC 42
13302: PUSH
13303: LD_INT 1
13305: EQUAL
13306: IFFALSE 13316
// people_resp = 3 ;
13308: LD_ADDR_LOC 42
13312: PUSH
13313: LD_INT 3
13315: ST_TO_ADDR
// if people_resp = 2 then
13316: LD_LOC 42
13320: PUSH
13321: LD_INT 2
13323: EQUAL
13324: IFFALSE 13334
// people_resp = 1 ;
13326: LD_ADDR_LOC 42
13330: PUSH
13331: LD_INT 1
13333: ST_TO_ADDR
// case lidi of 0 :
13334: LD_EXP 37
13338: PUSH
13339: LD_INT 0
13341: DOUBLE
13342: EQUAL
13343: IFTRUE 13347
13345: GO 13358
13347: POP
// lidi = 9 ; 1 :
13348: LD_ADDR_EXP 37
13352: PUSH
13353: LD_INT 9
13355: ST_TO_ADDR
13356: GO 13435
13358: LD_INT 1
13360: DOUBLE
13361: EQUAL
13362: IFTRUE 13366
13364: GO 13377
13366: POP
// lidi = 13 ; 2 :
13367: LD_ADDR_EXP 37
13371: PUSH
13372: LD_INT 13
13374: ST_TO_ADDR
13375: GO 13435
13377: LD_INT 2
13379: DOUBLE
13380: EQUAL
13381: IFTRUE 13385
13383: GO 13396
13385: POP
// lidi = 19 ; 3 :
13386: LD_ADDR_EXP 37
13390: PUSH
13391: LD_INT 19
13393: ST_TO_ADDR
13394: GO 13435
13396: LD_INT 3
13398: DOUBLE
13399: EQUAL
13400: IFTRUE 13404
13402: GO 13415
13404: POP
// lidi = 23 ; 4 :
13405: LD_ADDR_EXP 37
13409: PUSH
13410: LD_INT 23
13412: ST_TO_ADDR
13413: GO 13435
13415: LD_INT 4
13417: DOUBLE
13418: EQUAL
13419: IFTRUE 13423
13421: GO 13434
13423: POP
// lidi = 29 ; end ;
13424: LD_ADDR_EXP 37
13428: PUSH
13429: LD_INT 29
13431: ST_TO_ADDR
13432: GO 13435
13434: POP
// skilly = skilly + 1 ;
13435: LD_ADDR_LOC 35
13439: PUSH
13440: LD_LOC 35
13444: PUSH
13445: LD_INT 1
13447: PLUS
13448: ST_TO_ADDR
// case start_res of 0 :
13449: LD_LOC 36
13453: PUSH
13454: LD_INT 0
13456: DOUBLE
13457: EQUAL
13458: IFTRUE 13462
13460: GO 13473
13462: POP
// start_res = 0 ; 1 :
13463: LD_ADDR_LOC 36
13467: PUSH
13468: LD_INT 0
13470: ST_TO_ADDR
13471: GO 13531
13473: LD_INT 1
13475: DOUBLE
13476: EQUAL
13477: IFTRUE 13481
13479: GO 13492
13481: POP
// start_res = 50 ; 2 :
13482: LD_ADDR_LOC 36
13486: PUSH
13487: LD_INT 50
13489: ST_TO_ADDR
13490: GO 13531
13492: LD_INT 2
13494: DOUBLE
13495: EQUAL
13496: IFTRUE 13500
13498: GO 13511
13500: POP
// start_res = 100 ; 3 :
13501: LD_ADDR_LOC 36
13505: PUSH
13506: LD_INT 100
13508: ST_TO_ADDR
13509: GO 13531
13511: LD_INT 3
13513: DOUBLE
13514: EQUAL
13515: IFTRUE 13519
13517: GO 13530
13519: POP
// start_res = 200 ; end ;
13520: LD_ADDR_LOC 36
13524: PUSH
13525: LD_INT 200
13527: ST_TO_ADDR
13528: GO 13531
13530: POP
// case krabice of 0 :
13531: LD_EXP 38
13535: PUSH
13536: LD_INT 0
13538: DOUBLE
13539: EQUAL
13540: IFTRUE 13544
13542: GO 13555
13544: POP
// cperiode = 1 1$30 ; 1 :
13545: LD_ADDR_EXP 41
13549: PUSH
13550: LD_INT 3150
13552: ST_TO_ADDR
13553: GO 13594
13555: LD_INT 1
13557: DOUBLE
13558: EQUAL
13559: IFTRUE 13563
13561: GO 13574
13563: POP
// cperiode = 1 1$00 ; 2 :
13564: LD_ADDR_EXP 41
13568: PUSH
13569: LD_INT 2100
13571: ST_TO_ADDR
13572: GO 13594
13574: LD_INT 2
13576: DOUBLE
13577: EQUAL
13578: IFTRUE 13582
13580: GO 13593
13582: POP
// cperiode = 0 0$30 ; end ;
13583: LD_ADDR_EXP 41
13587: PUSH
13588: LD_INT 1050
13590: ST_TO_ADDR
13591: GO 13594
13593: POP
// case opoce of 0 :
13594: LD_EXP 39
13598: PUSH
13599: LD_INT 0
13601: DOUBLE
13602: EQUAL
13603: IFTRUE 13607
13605: GO 13618
13607: POP
// opoce = 0 ; 1 :
13608: LD_ADDR_EXP 39
13612: PUSH
13613: LD_INT 0
13615: ST_TO_ADDR
13616: GO 13733
13618: LD_INT 1
13620: DOUBLE
13621: EQUAL
13622: IFTRUE 13626
13624: GO 13637
13626: POP
// opoce = 3 ; 2 :
13627: LD_ADDR_EXP 39
13631: PUSH
13632: LD_INT 3
13634: ST_TO_ADDR
13635: GO 13733
13637: LD_INT 2
13639: DOUBLE
13640: EQUAL
13641: IFTRUE 13645
13643: GO 13656
13645: POP
// opoce = 7 ; 3 :
13646: LD_ADDR_EXP 39
13650: PUSH
13651: LD_INT 7
13653: ST_TO_ADDR
13654: GO 13733
13656: LD_INT 3
13658: DOUBLE
13659: EQUAL
13660: IFTRUE 13664
13662: GO 13675
13664: POP
// opoce = 11 ; 4 :
13665: LD_ADDR_EXP 39
13669: PUSH
13670: LD_INT 11
13672: ST_TO_ADDR
13673: GO 13733
13675: LD_INT 4
13677: DOUBLE
13678: EQUAL
13679: IFTRUE 13683
13681: GO 13694
13683: POP
// opoce = 15 ; 5 :
13684: LD_ADDR_EXP 39
13688: PUSH
13689: LD_INT 15
13691: ST_TO_ADDR
13692: GO 13733
13694: LD_INT 5
13696: DOUBLE
13697: EQUAL
13698: IFTRUE 13702
13700: GO 13713
13702: POP
// opoce = 19 ; 6 :
13703: LD_ADDR_EXP 39
13707: PUSH
13708: LD_INT 19
13710: ST_TO_ADDR
13711: GO 13733
13713: LD_INT 6
13715: DOUBLE
13716: EQUAL
13717: IFTRUE 13721
13719: GO 13732
13721: POP
// opoce = 23 ; end ;
13722: LD_ADDR_EXP 39
13726: PUSH
13727: LD_INT 23
13729: ST_TO_ADDR
13730: GO 13733
13732: POP
// fortpos = [ [ [ 46 , 53 , 4 ] , [ 51 , 62 , 4 ] ] , [ [ 167 , 53 , 1 ] , [ 173 , 64 , 1 ] ] ] ;
13733: LD_ADDR_LOC 44
13737: PUSH
13738: LD_INT 46
13740: PUSH
13741: LD_INT 53
13743: PUSH
13744: LD_INT 4
13746: PUSH
13747: EMPTY
13748: LIST
13749: LIST
13750: LIST
13751: PUSH
13752: LD_INT 51
13754: PUSH
13755: LD_INT 62
13757: PUSH
13758: LD_INT 4
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: LIST
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: PUSH
13770: LD_INT 167
13772: PUSH
13773: LD_INT 53
13775: PUSH
13776: LD_INT 1
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: LIST
13783: PUSH
13784: LD_INT 173
13786: PUSH
13787: LD_INT 64
13789: PUSH
13790: LD_INT 1
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: LIST
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: ST_TO_ADDR
// areasdiff = [ vlevodiff , vpravodiff ] ;
13806: LD_ADDR_LOC 45
13810: PUSH
13811: LD_INT 16
13813: PUSH
13814: LD_INT 17
13816: PUSH
13817: EMPTY
13818: LIST
13819: LIST
13820: ST_TO_ADDR
// directions = [ 4 , 1 ] ;
13821: LD_ADDR_LOC 46
13825: PUSH
13826: LD_INT 4
13828: PUSH
13829: LD_INT 1
13831: PUSH
13832: EMPTY
13833: LIST
13834: LIST
13835: ST_TO_ADDR
// for tmp = 1 to 8 do
13836: LD_ADDR_VAR 0 2
13840: PUSH
13841: DOUBLE
13842: LD_INT 1
13844: DEC
13845: ST_TO_ADDR
13846: LD_INT 8
13848: PUSH
13849: FOR_TO
13850: IFFALSE 15019
// if mp_sides_nations_ [ tmp ] then
13852: LD_EXP 49
13856: PUSH
13857: LD_VAR 0 2
13861: ARRAY
13862: IFFALSE 15017
// begin if mp_sides_positions_ [ tmp ] = 1 then
13864: LD_EXP 50
13868: PUSH
13869: LD_VAR 0 2
13873: ARRAY
13874: PUSH
13875: LD_INT 1
13877: EQUAL
13878: IFFALSE 13892
// pos1side = tmp else
13880: LD_ADDR_EXP 44
13884: PUSH
13885: LD_VAR 0 2
13889: ST_TO_ADDR
13890: GO 13902
// pos2side = tmp ;
13892: LD_ADDR_EXP 45
13896: PUSH
13897: LD_VAR 0 2
13901: ST_TO_ADDR
// uc_side = tmp ;
13902: LD_ADDR_OWVAR 20
13906: PUSH
13907: LD_VAR 0 2
13911: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ tmp ] ;
13912: LD_ADDR_OWVAR 21
13916: PUSH
13917: LD_EXP 49
13921: PUSH
13922: LD_VAR 0 2
13926: ARRAY
13927: ST_TO_ADDR
// bc_type = b_depot ;
13928: LD_ADDR_OWVAR 42
13932: PUSH
13933: LD_INT 0
13935: ST_TO_ADDR
// bc_level = 1 ;
13936: LD_ADDR_OWVAR 43
13940: PUSH
13941: LD_INT 1
13943: ST_TO_ADDR
// tmp2 = createandplacebuildingxyd ( depotpositions [ mp_sides_positions_ [ tmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 2 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 3 ] ) ;
13944: LD_ADDR_VAR 0 3
13948: PUSH
13949: LD_EXP 42
13953: PUSH
13954: LD_EXP 50
13958: PUSH
13959: LD_VAR 0 2
13963: ARRAY
13964: ARRAY
13965: PUSH
13966: LD_INT 1
13968: ARRAY
13969: PPUSH
13970: LD_EXP 42
13974: PUSH
13975: LD_EXP 50
13979: PUSH
13980: LD_VAR 0 2
13984: ARRAY
13985: ARRAY
13986: PUSH
13987: LD_INT 2
13989: ARRAY
13990: PPUSH
13991: LD_EXP 42
13995: PUSH
13996: LD_EXP 50
14000: PUSH
14001: LD_VAR 0 2
14005: ARRAY
14006: ARRAY
14007: PUSH
14008: LD_INT 3
14010: ARRAY
14011: PPUSH
14012: CALL_OW 47
14016: ST_TO_ADDR
// if batt_fl then
14017: LD_LOC 40
14021: IFFALSE 14131
// setbattleflag ( tmp , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 2 ] , [ [ bfo_defend_bonus_human , 80 ] , [ bfo_defend_bonus_vehicle , 40 ] , [ bfo_defend_bonus_building , 0 ] , [ bfo_range , 17 ] , [ bfo_height , 100 ] ] ) ;
14023: LD_VAR 0 2
14027: PPUSH
14028: LD_EXP 42
14032: PUSH
14033: LD_EXP 50
14037: PUSH
14038: LD_VAR 0 2
14042: ARRAY
14043: ARRAY
14044: PUSH
14045: LD_INT 1
14047: ARRAY
14048: PPUSH
14049: LD_EXP 42
14053: PUSH
14054: LD_EXP 50
14058: PUSH
14059: LD_VAR 0 2
14063: ARRAY
14064: ARRAY
14065: PUSH
14066: LD_INT 2
14068: ARRAY
14069: PPUSH
14070: LD_INT 1
14072: PUSH
14073: LD_INT 80
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: PUSH
14080: LD_INT 2
14082: PUSH
14083: LD_INT 40
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: PUSH
14090: LD_INT 3
14092: PUSH
14093: LD_INT 0
14095: PUSH
14096: EMPTY
14097: LIST
14098: LIST
14099: PUSH
14100: LD_INT 10
14102: PUSH
14103: LD_INT 17
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PUSH
14110: LD_INT 20
14112: PUSH
14113: LD_INT 100
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: PPUSH
14127: CALL_OW 418
// if zakladna then
14131: LD_LOC 34
14135: IFFALSE 14303
// begin bc_type = b_breastwork ;
14137: LD_ADDR_OWVAR 42
14141: PUSH
14142: LD_INT 31
14144: ST_TO_ADDR
// createandplacebuildingxyd ( fortpos [ mp_sides_positions_ [ tmp ] ] [ 1 ] [ 1 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 1 ] [ 2 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 1 ] [ 3 ] ) ;
14145: LD_LOC 44
14149: PUSH
14150: LD_EXP 50
14154: PUSH
14155: LD_VAR 0 2
14159: ARRAY
14160: ARRAY
14161: PUSH
14162: LD_INT 1
14164: ARRAY
14165: PUSH
14166: LD_INT 1
14168: ARRAY
14169: PPUSH
14170: LD_LOC 44
14174: PUSH
14175: LD_EXP 50
14179: PUSH
14180: LD_VAR 0 2
14184: ARRAY
14185: ARRAY
14186: PUSH
14187: LD_INT 1
14189: ARRAY
14190: PUSH
14191: LD_INT 2
14193: ARRAY
14194: PPUSH
14195: LD_LOC 44
14199: PUSH
14200: LD_EXP 50
14204: PUSH
14205: LD_VAR 0 2
14209: ARRAY
14210: ARRAY
14211: PUSH
14212: LD_INT 1
14214: ARRAY
14215: PUSH
14216: LD_INT 3
14218: ARRAY
14219: PPUSH
14220: CALL_OW 47
// createandplacebuildingxyd ( fortpos [ mp_sides_positions_ [ tmp ] ] [ 2 ] [ 1 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 2 ] [ 2 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 2 ] [ 3 ] ) ;
14224: LD_LOC 44
14228: PUSH
14229: LD_EXP 50
14233: PUSH
14234: LD_VAR 0 2
14238: ARRAY
14239: ARRAY
14240: PUSH
14241: LD_INT 2
14243: ARRAY
14244: PUSH
14245: LD_INT 1
14247: ARRAY
14248: PPUSH
14249: LD_LOC 44
14253: PUSH
14254: LD_EXP 50
14258: PUSH
14259: LD_VAR 0 2
14263: ARRAY
14264: ARRAY
14265: PUSH
14266: LD_INT 2
14268: ARRAY
14269: PUSH
14270: LD_INT 2
14272: ARRAY
14273: PPUSH
14274: LD_LOC 44
14278: PUSH
14279: LD_EXP 50
14283: PUSH
14284: LD_VAR 0 2
14288: ARRAY
14289: ARRAY
14290: PUSH
14291: LD_INT 2
14293: ARRAY
14294: PUSH
14295: LD_INT 3
14297: ARRAY
14298: PPUSH
14299: CALL_OW 47
// end ; addresourcetype ( getbase ( tmp2 ) , mat_cans , start_res ) ;
14303: LD_VAR 0 3
14307: PPUSH
14308: CALL_OW 274
14312: PPUSH
14313: LD_INT 1
14315: PPUSH
14316: LD_LOC 36
14320: PPUSH
14321: CALL_OW 276
// if extra_oil then
14325: LD_LOC 37
14329: IFFALSE 14421
// begin tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14331: LD_ADDR_VAR 0 3
14335: PUSH
14336: LD_LOC 45
14340: PUSH
14341: LD_EXP 50
14345: PUSH
14346: LD_VAR 0 2
14350: ARRAY
14351: ARRAY
14352: PPUSH
14353: LD_INT 0
14355: PPUSH
14356: CALL_OW 16
14360: ST_TO_ADDR
// while not createdepositxy ( tmp2 [ 1 ] , tmp2 [ 2 ] , mat_oil ) do
14361: LD_VAR 0 3
14365: PUSH
14366: LD_INT 1
14368: ARRAY
14369: PPUSH
14370: LD_VAR 0 3
14374: PUSH
14375: LD_INT 2
14377: ARRAY
14378: PPUSH
14379: LD_INT 2
14381: PPUSH
14382: CALL_OW 62
14386: NOT
14387: IFFALSE 14421
// tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14389: LD_ADDR_VAR 0 3
14393: PUSH
14394: LD_LOC 45
14398: PUSH
14399: LD_EXP 50
14403: PUSH
14404: LD_VAR 0 2
14408: ARRAY
14409: ARRAY
14410: PPUSH
14411: LD_INT 0
14413: PPUSH
14414: CALL_OW 16
14418: ST_TO_ADDR
14419: GO 14361
// end ; if extra_sib then
14421: LD_LOC 38
14425: IFFALSE 14517
// begin tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14427: LD_ADDR_VAR 0 3
14431: PUSH
14432: LD_LOC 45
14436: PUSH
14437: LD_EXP 50
14441: PUSH
14442: LD_VAR 0 2
14446: ARRAY
14447: ARRAY
14448: PPUSH
14449: LD_INT 0
14451: PPUSH
14452: CALL_OW 16
14456: ST_TO_ADDR
// while not createdepositxy ( tmp2 [ 1 ] , tmp2 [ 2 ] , mat_siberit ) do
14457: LD_VAR 0 3
14461: PUSH
14462: LD_INT 1
14464: ARRAY
14465: PPUSH
14466: LD_VAR 0 3
14470: PUSH
14471: LD_INT 2
14473: ARRAY
14474: PPUSH
14475: LD_INT 3
14477: PPUSH
14478: CALL_OW 62
14482: NOT
14483: IFFALSE 14517
// tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
14485: LD_ADDR_VAR 0 3
14489: PUSH
14490: LD_LOC 45
14494: PUSH
14495: LD_EXP 50
14499: PUSH
14500: LD_VAR 0 2
14504: ARRAY
14505: ARRAY
14506: PPUSH
14507: LD_INT 0
14509: PPUSH
14510: CALL_OW 16
14514: ST_TO_ADDR
14515: GO 14457
// end ; if zakl_plus > 0 then
14517: LD_LOC 39
14521: PUSH
14522: LD_INT 0
14524: GREATER
14525: IFFALSE 14785
// begin bc_type = b_lab ;
14527: LD_ADDR_OWVAR 42
14531: PUSH
14532: LD_INT 6
14534: ST_TO_ADDR
// uc_direction = directions [ mp_sides_positions_ [ tmp ] ] ;
14535: LD_ADDR_OWVAR 24
14539: PUSH
14540: LD_LOC 46
14544: PUSH
14545: LD_EXP 50
14549: PUSH
14550: LD_VAR 0 2
14554: ARRAY
14555: ARRAY
14556: ST_TO_ADDR
// tmp3 = createbuilding ;
14557: LD_ADDR_VAR 0 4
14561: PUSH
14562: CALL_OW 46
14566: ST_TO_ADDR
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14567: LD_ADDR_VAR 0 3
14571: PUSH
14572: LD_EXP 43
14576: PUSH
14577: LD_EXP 50
14581: PUSH
14582: LD_VAR 0 2
14586: ARRAY
14587: ARRAY
14588: PPUSH
14589: LD_INT 0
14591: PPUSH
14592: CALL_OW 16
14596: ST_TO_ADDR
// while not placeunitxy ( tmp3 , tmp2 [ 1 ] , tmp2 [ 2 ] , false ) do
14597: LD_VAR 0 4
14601: PPUSH
14602: LD_VAR 0 3
14606: PUSH
14607: LD_INT 1
14609: ARRAY
14610: PPUSH
14611: LD_VAR 0 3
14615: PUSH
14616: LD_INT 2
14618: ARRAY
14619: PPUSH
14620: LD_INT 0
14622: PPUSH
14623: CALL_OW 48
14627: NOT
14628: IFFALSE 14662
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14630: LD_ADDR_VAR 0 3
14634: PUSH
14635: LD_EXP 43
14639: PUSH
14640: LD_EXP 50
14644: PUSH
14645: LD_VAR 0 2
14649: ARRAY
14650: ARRAY
14651: PPUSH
14652: LD_INT 0
14654: PPUSH
14655: CALL_OW 16
14659: ST_TO_ADDR
14660: GO 14597
// if zakl_plus > 1 then
14662: LD_LOC 39
14666: PUSH
14667: LD_INT 1
14669: GREATER
14670: IFFALSE 14785
// begin bc_type = b_workshop ;
14672: LD_ADDR_OWVAR 42
14676: PUSH
14677: LD_INT 2
14679: ST_TO_ADDR
// tmp3 = createbuilding ;
14680: LD_ADDR_VAR 0 4
14684: PUSH
14685: CALL_OW 46
14689: ST_TO_ADDR
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14690: LD_ADDR_VAR 0 3
14694: PUSH
14695: LD_EXP 43
14699: PUSH
14700: LD_EXP 50
14704: PUSH
14705: LD_VAR 0 2
14709: ARRAY
14710: ARRAY
14711: PPUSH
14712: LD_INT 0
14714: PPUSH
14715: CALL_OW 16
14719: ST_TO_ADDR
// while not placeunitxy ( tmp3 , tmp2 [ 1 ] , tmp2 [ 2 ] , false ) do
14720: LD_VAR 0 4
14724: PPUSH
14725: LD_VAR 0 3
14729: PUSH
14730: LD_INT 1
14732: ARRAY
14733: PPUSH
14734: LD_VAR 0 3
14738: PUSH
14739: LD_INT 2
14741: ARRAY
14742: PPUSH
14743: LD_INT 0
14745: PPUSH
14746: CALL_OW 48
14750: NOT
14751: IFFALSE 14785
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14753: LD_ADDR_VAR 0 3
14757: PUSH
14758: LD_EXP 43
14762: PUSH
14763: LD_EXP 50
14767: PUSH
14768: LD_VAR 0 2
14772: ARRAY
14773: ARRAY
14774: PPUSH
14775: LD_INT 0
14777: PPUSH
14778: CALL_OW 16
14782: ST_TO_ADDR
14783: GO 14720
// end ; end ; if batt_fl then
14785: LD_LOC 40
14789: IFFALSE 14899
// setbattleflag ( tmp , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 2 ] , [ [ bfo_defend_bonus_human , 80 ] , [ bfo_defend_bonus_vehicle , 40 ] , [ bfo_defend_bonus_building , 0 ] , [ bfo_range , 17 ] , [ bfo_height , 100 ] ] ) ;
14791: LD_VAR 0 2
14795: PPUSH
14796: LD_EXP 42
14800: PUSH
14801: LD_EXP 50
14805: PUSH
14806: LD_VAR 0 2
14810: ARRAY
14811: ARRAY
14812: PUSH
14813: LD_INT 1
14815: ARRAY
14816: PPUSH
14817: LD_EXP 42
14821: PUSH
14822: LD_EXP 50
14826: PUSH
14827: LD_VAR 0 2
14831: ARRAY
14832: ARRAY
14833: PUSH
14834: LD_INT 2
14836: ARRAY
14837: PPUSH
14838: LD_INT 1
14840: PUSH
14841: LD_INT 80
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: PUSH
14848: LD_INT 2
14850: PUSH
14851: LD_INT 40
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: PUSH
14858: LD_INT 3
14860: PUSH
14861: LD_INT 0
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: PUSH
14868: LD_INT 10
14870: PUSH
14871: LD_INT 17
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: PUSH
14878: LD_INT 20
14880: PUSH
14881: LD_INT 100
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: PPUSH
14895: CALL_OW 418
// cl = class_scientistic ;
14899: LD_ADDR_VAR 0 5
14903: PUSH
14904: LD_INT 4
14906: ST_TO_ADDR
// for tmp2 = 1 to lidi do
14907: LD_ADDR_VAR 0 3
14911: PUSH
14912: DOUBLE
14913: LD_INT 1
14915: DEC
14916: ST_TO_ADDR
14917: LD_EXP 37
14921: PUSH
14922: FOR_TO
14923: IFFALSE 15015
// begin if tmp2 >= lidi / 2 then
14925: LD_VAR 0 3
14929: PUSH
14930: LD_EXP 37
14934: PUSH
14935: LD_INT 2
14937: DIVREAL
14938: GREATEREQUAL
14939: IFFALSE 14949
// cl = class_soldier ;
14941: LD_ADDR_VAR 0 5
14945: PUSH
14946: LD_INT 1
14948: ST_TO_ADDR
// preparehuman ( 0 , cl , skilly ) ;
14949: LD_INT 0
14951: PPUSH
14952: LD_VAR 0 5
14956: PPUSH
14957: LD_LOC 35
14961: PPUSH
14962: CALL_OW 380
// if tmp2 = 1 then
14966: LD_VAR 0 3
14970: PUSH
14971: LD_INT 1
14973: EQUAL
14974: IFFALSE 14984
// cl = class_engineer ;
14976: LD_ADDR_VAR 0 5
14980: PUSH
14981: LD_INT 2
14983: ST_TO_ADDR
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14984: CALL_OW 44
14988: PPUSH
14989: LD_EXP 43
14993: PUSH
14994: LD_EXP 50
14998: PUSH
14999: LD_VAR 0 2
15003: ARRAY
15004: ARRAY
15005: PPUSH
15006: LD_INT 0
15008: PPUSH
15009: CALL_OW 49
// end ;
15013: GO 14922
15015: POP
15016: POP
// end ;
15017: GO 13849
15019: POP
15020: POP
// uc_side = 0 ;
15021: LD_ADDR_OWVAR 20
15025: PUSH
15026: LD_INT 0
15028: ST_TO_ADDR
// uc_nation = nation_nature ;
15029: LD_ADDR_OWVAR 21
15033: PUSH
15034: LD_INT 0
15036: ST_TO_ADDR
// for tmp = 1 to opoce do
15037: LD_ADDR_VAR 0 2
15041: PUSH
15042: DOUBLE
15043: LD_INT 1
15045: DEC
15046: ST_TO_ADDR
15047: LD_EXP 39
15051: PUSH
15052: FOR_TO
15053: IFFALSE 15085
// begin preparehuman ( 0 , class_apeman , 0 ) ;
15055: LD_INT 0
15057: PPUSH
15058: LD_INT 12
15060: PPUSH
15061: LD_INT 0
15063: PPUSH
15064: CALL_OW 380
// placeunitarea ( createhuman , les , false ) ;
15068: CALL_OW 44
15072: PPUSH
15073: LD_INT 4
15075: PPUSH
15076: LD_INT 0
15078: PPUSH
15079: CALL_OW 49
// end ;
15083: GO 15052
15085: POP
15086: POP
// case mp_sides_positions_ [ your_side ] of 1 :
15087: LD_EXP 50
15091: PUSH
15092: LD_OWVAR 2
15096: ARRAY
15097: PUSH
15098: LD_INT 1
15100: DOUBLE
15101: EQUAL
15102: IFTRUE 15106
15104: GO 15119
15106: POP
// centernowonxy ( 44 , 60 ) ; 2 :
15107: LD_INT 44
15109: PPUSH
15110: LD_INT 60
15112: PPUSH
15113: CALL_OW 86
15117: GO 15141
15119: LD_INT 2
15121: DOUBLE
15122: EQUAL
15123: IFTRUE 15127
15125: GO 15140
15127: POP
// centernowonxy ( 175 , 60 ) ; end ;
15128: LD_INT 175
15130: PPUSH
15131: LD_INT 60
15133: PPUSH
15134: CALL_OW 86
15138: GO 15141
15140: POP
// end ;
15141: LD_VAR 0 1
15145: RET
// on humandestroyed ( un , side , nat , x , y , dir , sex , cl ) marked 10 do if mp_sides_positions_ [ side ] = 1 then
15146: LD_EXP 50
15150: PUSH
15151: LD_VAR 0 2
15155: ARRAY
15156: PUSH
15157: LD_INT 1
15159: EQUAL
15160: IFFALSE 15178
// resp_cnt1 = resp_cnt1 + 1 else
15162: LD_ADDR_LOC 47
15166: PUSH
15167: LD_LOC 47
15171: PUSH
15172: LD_INT 1
15174: PLUS
15175: ST_TO_ADDR
15176: GO 15192
// resp_cnt2 = resp_cnt2 + 1 ;
15178: LD_ADDR_LOC 48
15182: PUSH
15183: LD_LOC 48
15187: PUSH
15188: LD_INT 1
15190: PLUS
15191: ST_TO_ADDR
15192: PPOPN 8
15194: END
// every 0 0$30 trigger resp_cnt1 >= people_resp marked 11 do
15195: LD_LOC 47
15199: PUSH
15200: LD_LOC 42
15204: GREATEREQUAL
15205: IFFALSE 15358
15207: GO 15209
15209: DISABLE
// begin resp_cnt1 = resp_cnt1 - people_resp ;
15210: LD_ADDR_LOC 47
15214: PUSH
15215: LD_LOC 47
15219: PUSH
15220: LD_LOC 42
15224: MINUS
15225: ST_TO_ADDR
// if not filterallunits ( [ [ f_side , pos1side ] , [ f_or , [ f_btype , b_depot ] , [ f_class , class_engineer ] ] ] ) then
15226: LD_INT 22
15228: PUSH
15229: LD_EXP 44
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: PUSH
15238: LD_INT 2
15240: PUSH
15241: LD_INT 30
15243: PUSH
15244: LD_INT 0
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: PUSH
15251: LD_INT 25
15253: PUSH
15254: LD_INT 2
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: LIST
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: PPUSH
15270: CALL_OW 69
15274: NOT
15275: IFFALSE 15280
// begin enable ;
15277: ENABLE
// exit ;
15278: GO 15358
// end ; uc_side = pos1side ;
15280: LD_ADDR_OWVAR 20
15284: PUSH
15285: LD_EXP 44
15289: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos1side ] ;
15290: LD_ADDR_OWVAR 21
15294: PUSH
15295: LD_EXP 49
15299: PUSH
15300: LD_EXP 44
15304: ARRAY
15305: ST_TO_ADDR
// preparehuman ( 0 , class_soldier , skilly ) ;
15306: LD_INT 0
15308: PPUSH
15309: LD_INT 1
15311: PPUSH
15312: LD_LOC 35
15316: PPUSH
15317: CALL_OW 380
// wait ( 0 0$10 ) ;
15321: LD_INT 350
15323: PPUSH
15324: CALL_OW 67
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ pos1side ] ] , true ) ;
15328: CALL_OW 44
15332: PPUSH
15333: LD_EXP 43
15337: PUSH
15338: LD_EXP 50
15342: PUSH
15343: LD_EXP 44
15347: ARRAY
15348: ARRAY
15349: PPUSH
15350: LD_INT 1
15352: PPUSH
15353: CALL_OW 49
// enable ;
15357: ENABLE
// end ;
15358: END
// every 0 0$30 trigger resp_cnt2 >= people_resp marked 12 do
15359: LD_LOC 48
15363: PUSH
15364: LD_LOC 42
15368: GREATEREQUAL
15369: IFFALSE 15522
15371: GO 15373
15373: DISABLE
// begin resp_cnt2 = resp_cnt2 - people_resp ;
15374: LD_ADDR_LOC 48
15378: PUSH
15379: LD_LOC 48
15383: PUSH
15384: LD_LOC 42
15388: MINUS
15389: ST_TO_ADDR
// if not filterallunits ( [ [ f_side , pos2side ] , [ f_or , [ f_btype , b_depot ] , [ f_class , class_engineer ] ] ] ) then
15390: LD_INT 22
15392: PUSH
15393: LD_EXP 45
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: PUSH
15402: LD_INT 2
15404: PUSH
15405: LD_INT 30
15407: PUSH
15408: LD_INT 0
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: PUSH
15415: LD_INT 25
15417: PUSH
15418: LD_INT 2
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: PUSH
15425: EMPTY
15426: LIST
15427: LIST
15428: LIST
15429: PUSH
15430: EMPTY
15431: LIST
15432: LIST
15433: PPUSH
15434: CALL_OW 69
15438: NOT
15439: IFFALSE 15444
// begin enable ;
15441: ENABLE
// exit ;
15442: GO 15522
// end ; uc_side = pos2side ;
15444: LD_ADDR_OWVAR 20
15448: PUSH
15449: LD_EXP 45
15453: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos2side ] ;
15454: LD_ADDR_OWVAR 21
15458: PUSH
15459: LD_EXP 49
15463: PUSH
15464: LD_EXP 45
15468: ARRAY
15469: ST_TO_ADDR
// preparehuman ( 0 , class_soldier , skilly ) ;
15470: LD_INT 0
15472: PPUSH
15473: LD_INT 1
15475: PPUSH
15476: LD_LOC 35
15480: PPUSH
15481: CALL_OW 380
// wait ( 0 0$10 ) ;
15485: LD_INT 350
15487: PPUSH
15488: CALL_OW 67
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ pos2side ] ] , true ) ;
15492: CALL_OW 44
15496: PPUSH
15497: LD_EXP 43
15501: PUSH
15502: LD_EXP 50
15506: PUSH
15507: LD_EXP 45
15511: ARRAY
15512: ARRAY
15513: PPUSH
15514: LD_INT 1
15516: PPUSH
15517: CALL_OW 49
// enable ;
15521: ENABLE
// end ;
15522: END
// every 0 0$1 marked 13 do
15523: GO 15525
15525: DISABLE
// begin if not filterallunits ( [ [ f_side , pos1side ] , [ f_type , unit_human ] ] ) then
15526: LD_INT 22
15528: PUSH
15529: LD_EXP 44
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: PUSH
15538: LD_INT 21
15540: PUSH
15541: LD_INT 1
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PPUSH
15552: CALL_OW 69
15556: NOT
15557: IFFALSE 15581
// if pos1side = your_side then
15559: LD_EXP 44
15563: PUSH
15564: LD_OWVAR 2
15568: EQUAL
15569: IFFALSE 15577
// youlostinmultiplayer else
15571: CALL_OW 107
15575: GO 15581
// youwininmultiplayer ;
15577: CALL_OW 106
// if not filterallunits ( [ [ f_side , pos2side ] , [ f_type , unit_human ] ] ) then
15581: LD_INT 22
15583: PUSH
15584: LD_EXP 45
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: PUSH
15593: LD_INT 21
15595: PUSH
15596: LD_INT 1
15598: PUSH
15599: EMPTY
15600: LIST
15601: LIST
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PPUSH
15607: CALL_OW 69
15611: NOT
15612: IFFALSE 15636
// if pos2side = your_side then
15614: LD_EXP 45
15618: PUSH
15619: LD_OWVAR 2
15623: EQUAL
15624: IFFALSE 15632
// youlostinmultiplayer else
15626: CALL_OW 107
15630: GO 15636
// youwininmultiplayer ;
15632: CALL_OW 106
// end ; end_of_file
15636: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
15637: LD_INT 0
15639: PPUSH
15640: PPUSH
// for un in battle_flags_id do
15641: LD_ADDR_VAR 0 2
15645: PUSH
15646: LD_EXP 29
15650: PUSH
15651: FOR_IN
15652: IFFALSE 15727
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
15654: LD_VAR 0 2
15658: PPUSH
15659: LD_INT 1
15661: PUSH
15662: LD_LOC 49
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: PUSH
15671: LD_INT 2
15673: PUSH
15674: LD_LOC 49
15678: PUSH
15679: LD_INT 2
15681: DIV
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PUSH
15687: LD_INT 3
15689: PUSH
15690: LD_LOC 49
15694: PUSH
15695: LD_INT 5
15697: DIV
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: PUSH
15703: LD_INT 20
15705: PUSH
15706: LD_LOC 49
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: PPUSH
15721: CALL_OW 423
15725: GO 15651
15727: POP
15728: POP
// end ;
15729: LD_VAR 0 1
15733: RET
// every 0 0$0.1 marked 55 do var un ;
15734: GO 15736
15736: DISABLE
15737: LD_INT 0
15739: PPUSH
// begin if not def_morale_flags then
15740: LD_EXP 66
15744: NOT
15745: IFFALSE 15749
// exit ;
15747: GO 15826
// if not morale_decreasing_time then
15749: LD_EXP 11
15753: NOT
15754: IFFALSE 15758
// exit ;
15756: GO 15826
// strength = 100 ;
15758: LD_ADDR_LOC 49
15762: PUSH
15763: LD_INT 100
15765: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
15766: LD_EXP 11
15770: PPUSH
15771: CALL_OW 67
// strength := strength - 1 ;
15775: LD_ADDR_LOC 49
15779: PUSH
15780: LD_LOC 49
15784: PUSH
15785: LD_INT 1
15787: MINUS
15788: ST_TO_ADDR
// Update_Flags ;
15789: CALL 15637 0 0
// until not strength ;
15793: LD_LOC 49
15797: NOT
15798: IFFALSE 15766
// for un in battle_flags_id do
15800: LD_ADDR_VAR 0 1
15804: PUSH
15805: LD_EXP 29
15809: PUSH
15810: FOR_IN
15811: IFFALSE 15824
// KillBattleFlag ( un ) ;
15813: LD_VAR 0 1
15817: PPUSH
15818: CALL_OW 419
15822: GO 15810
15824: POP
15825: POP
// end ; end_of_file
15826: PPOPN 1
15828: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
15829: LD_INT 0
15831: PPUSH
15832: PPUSH
// if ( not IAmSpec ) then
15833: CALL_OW 531
15837: NOT
15838: IFFALSE 15854
// Result := Limits_Info ^  ;
15840: LD_ADDR_VAR 0 1
15844: PUSH
15845: LD_LOC 61
15849: PUSH
15850: LD_STRING 
15852: ADD
15853: ST_TO_ADDR
// for i := 1 to 8 do
15854: LD_ADDR_VAR 0 2
15858: PUSH
15859: DOUBLE
15860: LD_INT 1
15862: DEC
15863: ST_TO_ADDR
15864: LD_INT 8
15866: PUSH
15867: FOR_TO
15868: IFFALSE 15913
// if Cheaters [ i ] then
15870: LD_LOC 62
15874: PUSH
15875: LD_VAR 0 2
15879: ARRAY
15880: IFFALSE 15911
// Result := Result ^ [ #Cheater , i , i ] ;
15882: LD_ADDR_VAR 0 1
15886: PUSH
15887: LD_VAR 0 1
15891: PUSH
15892: LD_STRING #Cheater
15894: PUSH
15895: LD_VAR 0 2
15899: PUSH
15900: LD_VAR 0 2
15904: PUSH
15905: EMPTY
15906: LIST
15907: LIST
15908: LIST
15909: ADD
15910: ST_TO_ADDR
15911: GO 15867
15913: POP
15914: POP
// end ;
15915: LD_VAR 0 1
15919: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
15920: LD_INT 0
15922: PPUSH
15923: PPUSH
15924: PPUSH
15925: PPUSH
15926: PPUSH
// case Game_Type of 10 :
15927: LD_EXP 56
15931: PUSH
15932: LD_INT 10
15934: DOUBLE
15935: EQUAL
15936: IFTRUE 15940
15938: GO 15951
15940: POP
// def_game_rules := 1 ; 11 :
15941: LD_ADDR_EXP 57
15945: PUSH
15946: LD_INT 1
15948: ST_TO_ADDR
15949: GO 15971
15951: LD_INT 11
15953: DOUBLE
15954: EQUAL
15955: IFTRUE 15959
15957: GO 15970
15959: POP
// def_game_rules := 3 ; end ;
15960: LD_ADDR_EXP 57
15964: PUSH
15965: LD_INT 3
15967: ST_TO_ADDR
15968: GO 15971
15970: POP
// case def_game_rules of 0 :
15971: LD_EXP 57
15975: PUSH
15976: LD_INT 0
15978: DOUBLE
15979: EQUAL
15980: IFTRUE 15984
15982: GO 15989
15984: POP
// exit ; 1 :
15985: GO 18047
15987: GO 17947
15989: LD_INT 1
15991: DOUBLE
15992: EQUAL
15993: IFTRUE 15997
15995: GO 16213
15997: POP
// begin def_base_level := 2 ;
15998: LD_ADDR_EXP 58
16002: PUSH
16003: LD_INT 2
16005: ST_TO_ADDR
// def_amount_of_people := 2 ;
16006: LD_ADDR_EXP 59
16010: PUSH
16011: LD_INT 2
16013: ST_TO_ADDR
// def_skill_level := 1 ;
16014: LD_ADDR_EXP 60
16018: PUSH
16019: LD_INT 1
16021: ST_TO_ADDR
// def_starting_resources := 2 ;
16022: LD_ADDR_EXP 61
16026: PUSH
16027: LD_INT 2
16029: ST_TO_ADDR
// def_shipments_density := 1 ;
16030: LD_ADDR_EXP 62
16034: PUSH
16035: LD_INT 1
16037: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
16038: LD_ADDR_EXP 63
16042: PUSH
16043: LD_INT 0
16045: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
16046: LD_ADDR_EXP 64
16050: PUSH
16051: LD_INT 1
16053: ST_TO_ADDR
// def_shared_vision := 1 ;
16054: LD_ADDR_EXP 65
16058: PUSH
16059: LD_INT 1
16061: ST_TO_ADDR
// def_morale_flags := 3 ;
16062: LD_ADDR_EXP 66
16066: PUSH
16067: LD_INT 3
16069: ST_TO_ADDR
// def_siberite_detection := 1 ;
16070: LD_ADDR_EXP 67
16074: PUSH
16075: LD_INT 1
16077: ST_TO_ADDR
// def_people_respawning := 1 ;
16078: LD_ADDR_EXP 68
16082: PUSH
16083: LD_INT 1
16085: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
16086: LD_ADDR_EXP 69
16090: PUSH
16091: LD_INT 1
16093: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16094: LD_ADDR_EXP 70
16098: PUSH
16099: LD_INT 0
16101: ST_TO_ADDR
// def_builduptime := 2 ;
16102: LD_ADDR_EXP 71
16106: PUSH
16107: LD_INT 2
16109: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
16110: LD_ADDR_VAR 0 2
16114: PUSH
16115: EMPTY
16116: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
16117: LD_ADDR_VAR 0 3
16121: PUSH
16122: EMPTY
16123: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16124: LD_ADDR_LOC 56
16128: PUSH
16129: EMPTY
16130: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16131: LD_ADDR_LOC 57
16135: PUSH
16136: EMPTY
16137: ST_TO_ADDR
// Banned_Controls := [ ] ;
16138: LD_ADDR_LOC 58
16142: PUSH
16143: EMPTY
16144: ST_TO_ADDR
// Banned_Engines := [ ] ;
16145: LD_ADDR_LOC 59
16149: PUSH
16150: EMPTY
16151: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
16152: LD_ADDR_LOC 54
16156: PUSH
16157: LD_INT 37
16159: PUSH
16160: EMPTY
16161: LIST
16162: PUSH
16163: LD_INT 4
16165: PUSH
16166: LD_INT 5
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: PUSH
16173: LD_INT 31
16175: PUSH
16176: LD_INT 32
16178: PUSH
16179: LD_INT 33
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: LIST
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: LIST
16191: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
16192: LD_ADDR_LOC 55
16196: PUSH
16197: LD_INT 2
16199: PUSH
16200: LD_INT 2
16202: PUSH
16203: LD_INT 4
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: LIST
16210: ST_TO_ADDR
// end ; 2 :
16211: GO 17947
16213: LD_INT 2
16215: DOUBLE
16216: EQUAL
16217: IFTRUE 16221
16219: GO 16430
16221: POP
// begin def_base_level := 1 ;
16222: LD_ADDR_EXP 58
16226: PUSH
16227: LD_INT 1
16229: ST_TO_ADDR
// def_amount_of_people := 2 ;
16230: LD_ADDR_EXP 59
16234: PUSH
16235: LD_INT 2
16237: ST_TO_ADDR
// def_skill_level := 3 ;
16238: LD_ADDR_EXP 60
16242: PUSH
16243: LD_INT 3
16245: ST_TO_ADDR
// def_starting_resources := 3 ;
16246: LD_ADDR_EXP 61
16250: PUSH
16251: LD_INT 3
16253: ST_TO_ADDR
// def_shipments_density := 2 ;
16254: LD_ADDR_EXP 62
16258: PUSH
16259: LD_INT 2
16261: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
16262: LD_ADDR_EXP 63
16266: PUSH
16267: LD_INT 1
16269: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
16270: LD_ADDR_EXP 64
16274: PUSH
16275: LD_INT 2
16277: ST_TO_ADDR
// def_shared_vision := 1 ;
16278: LD_ADDR_EXP 65
16282: PUSH
16283: LD_INT 1
16285: ST_TO_ADDR
// def_morale_flags := 0 ;
16286: LD_ADDR_EXP 66
16290: PUSH
16291: LD_INT 0
16293: ST_TO_ADDR
// def_siberite_detection := 1 ;
16294: LD_ADDR_EXP 67
16298: PUSH
16299: LD_INT 1
16301: ST_TO_ADDR
// def_people_respawning := 0 ;
16302: LD_ADDR_EXP 68
16306: PUSH
16307: LD_INT 0
16309: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
16310: LD_ADDR_EXP 69
16314: PUSH
16315: LD_INT 0
16317: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16318: LD_ADDR_EXP 70
16322: PUSH
16323: LD_INT 0
16325: ST_TO_ADDR
// def_builduptime := 2 ;
16326: LD_ADDR_EXP 71
16330: PUSH
16331: LD_INT 2
16333: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
16334: LD_ADDR_VAR 0 2
16338: PUSH
16339: LD_INT 1
16341: PUSH
16342: EMPTY
16343: LIST
16344: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
16345: LD_ADDR_VAR 0 3
16349: PUSH
16350: EMPTY
16351: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16352: LD_ADDR_LOC 56
16356: PUSH
16357: EMPTY
16358: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16359: LD_ADDR_LOC 57
16363: PUSH
16364: EMPTY
16365: ST_TO_ADDR
// Banned_Controls := [ ] ;
16366: LD_ADDR_LOC 58
16370: PUSH
16371: EMPTY
16372: ST_TO_ADDR
// Banned_Engines := [ ] ;
16373: LD_ADDR_LOC 59
16377: PUSH
16378: EMPTY
16379: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
16380: LD_ADDR_LOC 54
16384: PUSH
16385: LD_INT 4
16387: PUSH
16388: LD_INT 5
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: PUSH
16395: LD_INT 31
16397: PUSH
16398: LD_INT 32
16400: PUSH
16401: LD_INT 33
16403: PUSH
16404: EMPTY
16405: LIST
16406: LIST
16407: LIST
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
16413: LD_ADDR_LOC 55
16417: PUSH
16418: LD_INT 1
16420: PUSH
16421: LD_INT 2
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: ST_TO_ADDR
// end ; 3 :
16428: GO 17947
16430: LD_INT 3
16432: DOUBLE
16433: EQUAL
16434: IFTRUE 16438
16436: GO 16681
16438: POP
// begin def_base_level := 1 ;
16439: LD_ADDR_EXP 58
16443: PUSH
16444: LD_INT 1
16446: ST_TO_ADDR
// def_amount_of_people := 2 ;
16447: LD_ADDR_EXP 59
16451: PUSH
16452: LD_INT 2
16454: ST_TO_ADDR
// def_skill_level := 3 ;
16455: LD_ADDR_EXP 60
16459: PUSH
16460: LD_INT 3
16462: ST_TO_ADDR
// def_starting_resources := 3 ;
16463: LD_ADDR_EXP 61
16467: PUSH
16468: LD_INT 3
16470: ST_TO_ADDR
// def_shipments_density := 1 ;
16471: LD_ADDR_EXP 62
16475: PUSH
16476: LD_INT 1
16478: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
16479: LD_ADDR_EXP 63
16483: PUSH
16484: LD_INT 0
16486: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
16487: LD_ADDR_EXP 64
16491: PUSH
16492: LD_INT 1
16494: ST_TO_ADDR
// def_shared_vision := 1 ;
16495: LD_ADDR_EXP 65
16499: PUSH
16500: LD_INT 1
16502: ST_TO_ADDR
// def_morale_flags := 0 ;
16503: LD_ADDR_EXP 66
16507: PUSH
16508: LD_INT 0
16510: ST_TO_ADDR
// def_siberite_detection := 1 ;
16511: LD_ADDR_EXP 67
16515: PUSH
16516: LD_INT 1
16518: ST_TO_ADDR
// def_people_respawning := 0 ;
16519: LD_ADDR_EXP 68
16523: PUSH
16524: LD_INT 0
16526: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
16527: LD_ADDR_EXP 69
16531: PUSH
16532: LD_INT 2
16534: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16535: LD_ADDR_EXP 70
16539: PUSH
16540: LD_INT 0
16542: ST_TO_ADDR
// def_builduptime := 1 ;
16543: LD_ADDR_EXP 71
16547: PUSH
16548: LD_INT 1
16550: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
16551: LD_ADDR_VAR 0 2
16555: PUSH
16556: LD_INT 23
16558: PUSH
16559: EMPTY
16560: LIST
16561: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
16562: LD_ADDR_VAR 0 3
16566: PUSH
16567: LD_INT 2
16569: PUSH
16570: LD_INT 37
16572: PUSH
16573: LD_INT 32
16575: PUSH
16576: LD_INT 33
16578: PUSH
16579: LD_INT 36
16581: PUSH
16582: LD_INT 16
16584: PUSH
16585: LD_INT 23
16587: PUSH
16588: LD_INT 21
16590: PUSH
16591: LD_INT 18
16593: PUSH
16594: LD_INT 22
16596: PUSH
16597: LD_INT 20
16599: PUSH
16600: LD_INT 19
16602: PUSH
16603: LD_INT 25
16605: PUSH
16606: LD_INT 17
16608: PUSH
16609: LD_INT 24
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16629: LD_ADDR_LOC 56
16633: PUSH
16634: EMPTY
16635: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16636: LD_ADDR_LOC 57
16640: PUSH
16641: EMPTY
16642: ST_TO_ADDR
// Banned_Controls := [ ] ;
16643: LD_ADDR_LOC 58
16647: PUSH
16648: EMPTY
16649: ST_TO_ADDR
// Banned_Engines := [ ] ;
16650: LD_ADDR_LOC 59
16654: PUSH
16655: EMPTY
16656: ST_TO_ADDR
// Restricted_Builds := [ ] ;
16657: LD_ADDR_LOC 54
16661: PUSH
16662: EMPTY
16663: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
16664: LD_ADDR_LOC 55
16668: PUSH
16669: EMPTY
16670: ST_TO_ADDR
// No_Mechs := true ;
16671: LD_ADDR_EXP 72
16675: PUSH
16676: LD_INT 1
16678: ST_TO_ADDR
// end ; 4 :
16679: GO 17947
16681: LD_INT 4
16683: DOUBLE
16684: EQUAL
16685: IFTRUE 16689
16687: GO 16864
16689: POP
// begin def_base_level := 1 ;
16690: LD_ADDR_EXP 58
16694: PUSH
16695: LD_INT 1
16697: ST_TO_ADDR
// def_amount_of_people := 2 ;
16698: LD_ADDR_EXP 59
16702: PUSH
16703: LD_INT 2
16705: ST_TO_ADDR
// def_skill_level := 3 ;
16706: LD_ADDR_EXP 60
16710: PUSH
16711: LD_INT 3
16713: ST_TO_ADDR
// def_starting_resources := 3 ;
16714: LD_ADDR_EXP 61
16718: PUSH
16719: LD_INT 3
16721: ST_TO_ADDR
// def_shipments_density := 2 ;
16722: LD_ADDR_EXP 62
16726: PUSH
16727: LD_INT 2
16729: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
16730: LD_ADDR_EXP 63
16734: PUSH
16735: LD_INT 1
16737: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
16738: LD_ADDR_EXP 64
16742: PUSH
16743: LD_INT 2
16745: ST_TO_ADDR
// def_shared_vision := 1 ;
16746: LD_ADDR_EXP 65
16750: PUSH
16751: LD_INT 1
16753: ST_TO_ADDR
// def_morale_flags := 0 ;
16754: LD_ADDR_EXP 66
16758: PUSH
16759: LD_INT 0
16761: ST_TO_ADDR
// def_siberite_detection := 1 ;
16762: LD_ADDR_EXP 67
16766: PUSH
16767: LD_INT 1
16769: ST_TO_ADDR
// def_people_respawning := 0 ;
16770: LD_ADDR_EXP 68
16774: PUSH
16775: LD_INT 0
16777: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
16778: LD_ADDR_EXP 69
16782: PUSH
16783: LD_INT 0
16785: ST_TO_ADDR
// def_siberite_bomb := 1 ;
16786: LD_ADDR_EXP 70
16790: PUSH
16791: LD_INT 1
16793: ST_TO_ADDR
// def_builduptime := 3 ;
16794: LD_ADDR_EXP 71
16798: PUSH
16799: LD_INT 3
16801: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
16802: LD_ADDR_VAR 0 2
16806: PUSH
16807: LD_INT 1
16809: PUSH
16810: EMPTY
16811: LIST
16812: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
16813: LD_ADDR_VAR 0 3
16817: PUSH
16818: EMPTY
16819: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16820: LD_ADDR_LOC 56
16824: PUSH
16825: EMPTY
16826: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16827: LD_ADDR_LOC 57
16831: PUSH
16832: EMPTY
16833: ST_TO_ADDR
// Banned_Controls := [ ] ;
16834: LD_ADDR_LOC 58
16838: PUSH
16839: EMPTY
16840: ST_TO_ADDR
// Banned_Engines := [ ] ;
16841: LD_ADDR_LOC 59
16845: PUSH
16846: EMPTY
16847: ST_TO_ADDR
// Restricted_Builds := [ ] ;
16848: LD_ADDR_LOC 54
16852: PUSH
16853: EMPTY
16854: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
16855: LD_ADDR_LOC 55
16859: PUSH
16860: EMPTY
16861: ST_TO_ADDR
// end ; 5 :
16862: GO 17947
16864: LD_INT 5
16866: DOUBLE
16867: EQUAL
16868: IFTRUE 16872
16870: GO 17121
16872: POP
// begin def_base_level := 0 ;
16873: LD_ADDR_EXP 58
16877: PUSH
16878: LD_INT 0
16880: ST_TO_ADDR
// def_amount_of_people := 0 ;
16881: LD_ADDR_EXP 59
16885: PUSH
16886: LD_INT 0
16888: ST_TO_ADDR
// def_skill_level := 0 ;
16889: LD_ADDR_EXP 60
16893: PUSH
16894: LD_INT 0
16896: ST_TO_ADDR
// def_starting_resources := 0 ;
16897: LD_ADDR_EXP 61
16901: PUSH
16902: LD_INT 0
16904: ST_TO_ADDR
// def_shipments_density := 0 ;
16905: LD_ADDR_EXP 62
16909: PUSH
16910: LD_INT 0
16912: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
16913: LD_ADDR_EXP 63
16917: PUSH
16918: LD_INT 0
16920: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
16921: LD_ADDR_EXP 64
16925: PUSH
16926: LD_INT 0
16928: ST_TO_ADDR
// def_shared_vision := 1 ;
16929: LD_ADDR_EXP 65
16933: PUSH
16934: LD_INT 1
16936: ST_TO_ADDR
// def_morale_flags := 0 ;
16937: LD_ADDR_EXP 66
16941: PUSH
16942: LD_INT 0
16944: ST_TO_ADDR
// def_siberite_detection := 0 ;
16945: LD_ADDR_EXP 67
16949: PUSH
16950: LD_INT 0
16952: ST_TO_ADDR
// def_people_respawning := 1 ;
16953: LD_ADDR_EXP 68
16957: PUSH
16958: LD_INT 1
16960: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
16961: LD_ADDR_EXP 69
16965: PUSH
16966: LD_INT 1
16968: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16969: LD_ADDR_EXP 70
16973: PUSH
16974: LD_INT 0
16976: ST_TO_ADDR
// def_builduptime := 0 ;
16977: LD_ADDR_EXP 71
16981: PUSH
16982: LD_INT 0
16984: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
16985: LD_ADDR_VAR 0 2
16989: PUSH
16990: LD_INT 10
16992: PUSH
16993: LD_INT 3
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
17000: LD_ADDR_VAR 0 3
17004: PUSH
17005: LD_INT 12
17007: PUSH
17008: LD_INT 11
17010: PUSH
17011: LD_INT 14
17013: PUSH
17014: LD_INT 13
17016: PUSH
17017: LD_INT 5
17019: PUSH
17020: LD_INT 24
17022: PUSH
17023: LD_INT 21
17025: PUSH
17026: LD_INT 33
17028: PUSH
17029: LD_INT 36
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
17043: LD_ADDR_LOC 56
17047: PUSH
17048: LD_INT 31
17050: PUSH
17051: EMPTY
17052: LIST
17053: ST_TO_ADDR
// Banned_Chassis := [ ] ;
17054: LD_ADDR_LOC 57
17058: PUSH
17059: EMPTY
17060: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
17061: LD_ADDR_LOC 58
17065: PUSH
17066: LD_INT 2
17068: PUSH
17069: EMPTY
17070: LIST
17071: ST_TO_ADDR
// Banned_Engines := [ ] ;
17072: LD_ADDR_LOC 59
17076: PUSH
17077: EMPTY
17078: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
17079: LD_ADDR_LOC 54
17083: PUSH
17084: LD_INT 4
17086: PUSH
17087: EMPTY
17088: LIST
17089: PUSH
17090: LD_INT 31
17092: PUSH
17093: LD_INT 32
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
17104: LD_ADDR_LOC 55
17108: PUSH
17109: LD_INT 1
17111: PUSH
17112: LD_INT 1
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: ST_TO_ADDR
// end ; 6 :
17119: GO 17947
17121: LD_INT 6
17123: DOUBLE
17124: EQUAL
17125: IFTRUE 17129
17127: GO 17332
17129: POP
// begin def_base_level := 1 ;
17130: LD_ADDR_EXP 58
17134: PUSH
17135: LD_INT 1
17137: ST_TO_ADDR
// def_amount_of_people := 2 ;
17138: LD_ADDR_EXP 59
17142: PUSH
17143: LD_INT 2
17145: ST_TO_ADDR
// def_skill_level := 3 ;
17146: LD_ADDR_EXP 60
17150: PUSH
17151: LD_INT 3
17153: ST_TO_ADDR
// def_starting_resources := 3 ;
17154: LD_ADDR_EXP 61
17158: PUSH
17159: LD_INT 3
17161: ST_TO_ADDR
// def_shipments_density := 1 ;
17162: LD_ADDR_EXP 62
17166: PUSH
17167: LD_INT 1
17169: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
17170: LD_ADDR_EXP 63
17174: PUSH
17175: LD_INT 0
17177: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
17178: LD_ADDR_EXP 64
17182: PUSH
17183: LD_INT 1
17185: ST_TO_ADDR
// def_shared_vision := 1 ;
17186: LD_ADDR_EXP 65
17190: PUSH
17191: LD_INT 1
17193: ST_TO_ADDR
// def_morale_flags := 0 ;
17194: LD_ADDR_EXP 66
17198: PUSH
17199: LD_INT 0
17201: ST_TO_ADDR
// def_siberite_detection := 1 ;
17202: LD_ADDR_EXP 67
17206: PUSH
17207: LD_INT 1
17209: ST_TO_ADDR
// def_people_respawning := 2 ;
17210: LD_ADDR_EXP 68
17214: PUSH
17215: LD_INT 2
17217: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
17218: LD_ADDR_EXP 69
17222: PUSH
17223: LD_INT 1
17225: ST_TO_ADDR
// def_siberite_bomb := 0 ;
17226: LD_ADDR_EXP 70
17230: PUSH
17231: LD_INT 0
17233: ST_TO_ADDR
// def_builduptime := 1 ;
17234: LD_ADDR_EXP 71
17238: PUSH
17239: LD_INT 1
17241: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
17242: LD_ADDR_VAR 0 2
17246: PUSH
17247: LD_INT 23
17249: PUSH
17250: EMPTY
17251: LIST
17252: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
17253: LD_ADDR_VAR 0 3
17257: PUSH
17258: LD_INT 2
17260: PUSH
17261: LD_INT 37
17263: PUSH
17264: LD_INT 31
17266: PUSH
17267: LD_INT 32
17269: PUSH
17270: LD_INT 33
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: ST_TO_ADDR
// Banned_Weapons := [ ] ;
17280: LD_ADDR_LOC 56
17284: PUSH
17285: EMPTY
17286: ST_TO_ADDR
// Banned_Chassis := [ ] ;
17287: LD_ADDR_LOC 57
17291: PUSH
17292: EMPTY
17293: ST_TO_ADDR
// Banned_Controls := [ ] ;
17294: LD_ADDR_LOC 58
17298: PUSH
17299: EMPTY
17300: ST_TO_ADDR
// Banned_Engines := [ ] ;
17301: LD_ADDR_LOC 59
17305: PUSH
17306: EMPTY
17307: ST_TO_ADDR
// Restricted_Builds := [ ] ;
17308: LD_ADDR_LOC 54
17312: PUSH
17313: EMPTY
17314: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
17315: LD_ADDR_LOC 55
17319: PUSH
17320: EMPTY
17321: ST_TO_ADDR
// No_Mechs := true ;
17322: LD_ADDR_EXP 72
17326: PUSH
17327: LD_INT 1
17329: ST_TO_ADDR
// end ; 7 :
17330: GO 17947
17332: LD_INT 7
17334: DOUBLE
17335: EQUAL
17336: IFTRUE 17340
17338: GO 17538
17340: POP
// begin def_base_level := 1 ;
17341: LD_ADDR_EXP 58
17345: PUSH
17346: LD_INT 1
17348: ST_TO_ADDR
// def_amount_of_people := 2 ;
17349: LD_ADDR_EXP 59
17353: PUSH
17354: LD_INT 2
17356: ST_TO_ADDR
// def_skill_level := 3 ;
17357: LD_ADDR_EXP 60
17361: PUSH
17362: LD_INT 3
17364: ST_TO_ADDR
// def_starting_resources := 3 ;
17365: LD_ADDR_EXP 61
17369: PUSH
17370: LD_INT 3
17372: ST_TO_ADDR
// def_shipments_density := 1 ;
17373: LD_ADDR_EXP 62
17377: PUSH
17378: LD_INT 1
17380: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
17381: LD_ADDR_EXP 63
17385: PUSH
17386: LD_INT 1
17388: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
17389: LD_ADDR_EXP 64
17393: PUSH
17394: LD_INT 2
17396: ST_TO_ADDR
// def_shared_vision := 1 ;
17397: LD_ADDR_EXP 65
17401: PUSH
17402: LD_INT 1
17404: ST_TO_ADDR
// def_morale_flags := 0 ;
17405: LD_ADDR_EXP 66
17409: PUSH
17410: LD_INT 0
17412: ST_TO_ADDR
// def_siberite_detection := 1 ;
17413: LD_ADDR_EXP 67
17417: PUSH
17418: LD_INT 1
17420: ST_TO_ADDR
// def_people_respawning := 0 ;
17421: LD_ADDR_EXP 68
17425: PUSH
17426: LD_INT 0
17428: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
17429: LD_ADDR_EXP 69
17433: PUSH
17434: LD_INT 1
17436: ST_TO_ADDR
// def_siberite_bomb := 0 ;
17437: LD_ADDR_EXP 70
17441: PUSH
17442: LD_INT 0
17444: ST_TO_ADDR
// def_builduptime := 3 ;
17445: LD_ADDR_EXP 71
17449: PUSH
17450: LD_INT 3
17452: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
17453: LD_ADDR_VAR 0 2
17457: PUSH
17458: LD_INT 23
17460: PUSH
17461: EMPTY
17462: LIST
17463: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
17464: LD_ADDR_VAR 0 3
17468: PUSH
17469: LD_INT 37
17471: PUSH
17472: EMPTY
17473: LIST
17474: ST_TO_ADDR
// Banned_Weapons := [ ] ;
17475: LD_ADDR_LOC 56
17479: PUSH
17480: EMPTY
17481: ST_TO_ADDR
// Banned_Chassis := [ ] ;
17482: LD_ADDR_LOC 57
17486: PUSH
17487: EMPTY
17488: ST_TO_ADDR
// Banned_Controls := [ ] ;
17489: LD_ADDR_LOC 58
17493: PUSH
17494: EMPTY
17495: ST_TO_ADDR
// Banned_Engines := [ ] ;
17496: LD_ADDR_LOC 59
17500: PUSH
17501: EMPTY
17502: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
17503: LD_ADDR_LOC 54
17507: PUSH
17508: LD_INT 31
17510: PUSH
17511: LD_INT 32
17513: PUSH
17514: LD_INT 33
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: LIST
17521: PUSH
17522: EMPTY
17523: LIST
17524: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
17525: LD_ADDR_LOC 55
17529: PUSH
17530: LD_INT 10
17532: PUSH
17533: EMPTY
17534: LIST
17535: ST_TO_ADDR
// end ; 8 :
17536: GO 17947
17538: LD_INT 8
17540: DOUBLE
17541: EQUAL
17542: IFTRUE 17546
17544: GO 17946
17546: POP
// begin def_base_level := 0 ;
17547: LD_ADDR_EXP 58
17551: PUSH
17552: LD_INT 0
17554: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
17555: LD_ADDR_EXP 59
17559: PUSH
17560: LD_INT 0
17562: PPUSH
17563: LD_INT 1
17565: PPUSH
17566: CALL_OW 12
17570: ST_TO_ADDR
// def_skill_level := 0 ;
17571: LD_ADDR_EXP 60
17575: PUSH
17576: LD_INT 0
17578: ST_TO_ADDR
// def_starting_resources := 2 ;
17579: LD_ADDR_EXP 61
17583: PUSH
17584: LD_INT 2
17586: ST_TO_ADDR
// def_shipments_density := 1 ;
17587: LD_ADDR_EXP 62
17591: PUSH
17592: LD_INT 1
17594: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
17595: LD_ADDR_EXP 63
17599: PUSH
17600: LD_INT 0
17602: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
17603: LD_ADDR_EXP 64
17607: PUSH
17608: LD_INT 0
17610: ST_TO_ADDR
// def_shared_vision := 1 ;
17611: LD_ADDR_EXP 65
17615: PUSH
17616: LD_INT 1
17618: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
17619: LD_ADDR_EXP 66
17623: PUSH
17624: LD_INT 0
17626: PPUSH
17627: LD_INT 2
17629: PPUSH
17630: CALL_OW 12
17634: ST_TO_ADDR
// def_siberite_detection := 0 ;
17635: LD_ADDR_EXP 67
17639: PUSH
17640: LD_INT 0
17642: ST_TO_ADDR
// def_people_respawning := 0 ;
17643: LD_ADDR_EXP 68
17647: PUSH
17648: LD_INT 0
17650: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
17651: LD_ADDR_EXP 69
17655: PUSH
17656: LD_INT 2
17658: ST_TO_ADDR
// def_siberite_bomb := 0 ;
17659: LD_ADDR_EXP 70
17663: PUSH
17664: LD_INT 0
17666: ST_TO_ADDR
// def_builduptime := 0 ;
17667: LD_ADDR_EXP 71
17671: PUSH
17672: LD_INT 0
17674: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
17675: LD_ADDR_VAR 0 2
17679: PUSH
17680: LD_INT 23
17682: PUSH
17683: LD_INT 20
17685: PUSH
17686: LD_INT 40
17688: PUSH
17689: LD_INT 47
17691: PUSH
17692: LD_INT 46
17694: PUSH
17695: LD_INT 39
17697: PUSH
17698: LD_INT 71
17700: PUSH
17701: LD_INT 34
17703: PUSH
17704: LD_INT 41
17706: PUSH
17707: LD_INT 44
17709: PUSH
17710: LD_INT 17
17712: PUSH
17713: LD_INT 16
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
17730: LD_ADDR_VAR 0 3
17734: PUSH
17735: LD_INT 37
17737: PUSH
17738: LD_INT 5
17740: PUSH
17741: LD_INT 13
17743: PUSH
17744: LD_INT 34
17746: PUSH
17747: LD_INT 12
17749: PUSH
17750: LD_INT 15
17752: PUSH
17753: LD_INT 11
17755: PUSH
17756: LD_INT 14
17758: PUSH
17759: LD_INT 29
17761: PUSH
17762: LD_INT 30
17764: PUSH
17765: LD_INT 28
17767: PUSH
17768: LD_INT 24
17770: PUSH
17771: LD_INT 25
17773: PUSH
17774: LD_INT 20
17776: PUSH
17777: LD_INT 21
17779: PUSH
17780: LD_INT 22
17782: PUSH
17783: LD_INT 36
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: ST_TO_ADDR
// Banned_Weapons := [ ] ;
17805: LD_ADDR_LOC 56
17809: PUSH
17810: EMPTY
17811: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
17812: LD_ADDR_LOC 57
17816: PUSH
17817: LD_INT 14
17819: PUSH
17820: EMPTY
17821: LIST
17822: ST_TO_ADDR
// Banned_Controls := [ ] ;
17823: LD_ADDR_LOC 58
17827: PUSH
17828: EMPTY
17829: ST_TO_ADDR
// Banned_Engines := [ ] ;
17830: LD_ADDR_LOC 59
17834: PUSH
17835: EMPTY
17836: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
17837: LD_ADDR_LOC 54
17841: PUSH
17842: LD_INT 31
17844: PUSH
17845: LD_INT 32
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PUSH
17852: LD_INT 4
17854: PUSH
17855: EMPTY
17856: LIST
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
17862: LD_ADDR_LOC 55
17866: PUSH
17867: LD_INT 2
17869: PUSH
17870: LD_INT 1
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: ST_TO_ADDR
// for i := 1 to 8 do
17877: LD_ADDR_VAR 0 4
17881: PUSH
17882: DOUBLE
17883: LD_INT 1
17885: DEC
17886: ST_TO_ADDR
17887: LD_INT 8
17889: PUSH
17890: FOR_TO
17891: IFFALSE 17942
// if ( Side_Nations [ i ] = 3 ) then
17893: LD_EXP 19
17897: PUSH
17898: LD_VAR 0 4
17902: ARRAY
17903: PUSH
17904: LD_INT 3
17906: EQUAL
17907: IFFALSE 17940
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
17909: LD_ADDR_EXP 19
17913: PUSH
17914: LD_EXP 19
17918: PPUSH
17919: LD_VAR 0 4
17923: PPUSH
17924: LD_INT 1
17926: PPUSH
17927: LD_INT 2
17929: PPUSH
17930: CALL_OW 12
17934: PPUSH
17935: CALL_OW 1
17939: ST_TO_ADDR
17940: GO 17890
17942: POP
17943: POP
// end ; end ;
17944: GO 17947
17946: POP
// for i := 1 to 8 do
17947: LD_ADDR_VAR 0 4
17951: PUSH
17952: DOUBLE
17953: LD_INT 1
17955: DEC
17956: ST_TO_ADDR
17957: LD_INT 8
17959: PUSH
17960: FOR_TO
17961: IFFALSE 18045
// if Side_Positions [ i ] then
17963: LD_EXP 18
17967: PUSH
17968: LD_VAR 0 4
17972: ARRAY
17973: IFFALSE 18043
// begin for j in Unavailable_Techs do
17975: LD_ADDR_VAR 0 5
17979: PUSH
17980: LD_VAR 0 2
17984: PUSH
17985: FOR_IN
17986: IFFALSE 18007
// SetTech ( j , i , 0 ) ;
17988: LD_VAR 0 5
17992: PPUSH
17993: LD_VAR 0 4
17997: PPUSH
17998: LD_INT 0
18000: PPUSH
18001: CALL_OW 322
18005: GO 17985
18007: POP
18008: POP
// for j in Unavailable_Builds do
18009: LD_ADDR_VAR 0 5
18013: PUSH
18014: LD_VAR 0 3
18018: PUSH
18019: FOR_IN
18020: IFFALSE 18041
// SetRestrict ( j , i , 0 ) ;
18022: LD_VAR 0 5
18026: PPUSH
18027: LD_VAR 0 4
18031: PPUSH
18032: LD_INT 0
18034: PPUSH
18035: CALL_OW 324
18039: GO 18019
18041: POP
18042: POP
// end ;
18043: GO 17960
18045: POP
18046: POP
// end ;
18047: LD_VAR 0 1
18051: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
18052: LD_INT 0
18054: PPUSH
18055: PPUSH
18056: PPUSH
18057: PPUSH
18058: PPUSH
18059: PPUSH
18060: PPUSH
// for i := 1 to Restricted_Builds do
18061: LD_ADDR_VAR 0 2
18065: PUSH
18066: DOUBLE
18067: LD_INT 1
18069: DEC
18070: ST_TO_ADDR
18071: LD_LOC 54
18075: PUSH
18076: FOR_TO
18077: IFFALSE 18387
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
18079: LD_LOC 54
18083: PUSH
18084: LD_VAR 0 2
18088: ARRAY
18089: PUSH
18090: LD_INT 1
18092: ARRAY
18093: PUSH
18094: LD_INT 31
18096: DOUBLE
18097: EQUAL
18098: IFTRUE 18114
18100: LD_INT 32
18102: DOUBLE
18103: EQUAL
18104: IFTRUE 18114
18106: LD_INT 33
18108: DOUBLE
18109: EQUAL
18110: IFTRUE 18114
18112: GO 18125
18114: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
18115: LD_ADDR_VAR 0 6
18119: PUSH
18120: LD_STRING #Turrets
18122: ST_TO_ADDR
18123: GO 18170
18125: LD_INT 4
18127: DOUBLE
18128: EQUAL
18129: IFTRUE 18139
18131: LD_INT 5
18133: DOUBLE
18134: EQUAL
18135: IFTRUE 18139
18137: GO 18150
18139: POP
// btype := #Armouries ; b_Behemoth :
18140: LD_ADDR_VAR 0 6
18144: PUSH
18145: LD_STRING #Armouries
18147: ST_TO_ADDR
18148: GO 18170
18150: LD_INT 37
18152: DOUBLE
18153: EQUAL
18154: IFTRUE 18158
18156: GO 18169
18158: POP
// btype := #Behemoths ; end ;
18159: LD_ADDR_VAR 0 6
18163: PUSH
18164: LD_STRING #Behemoths
18166: ST_TO_ADDR
18167: GO 18170
18169: POP
// list := [ ] ;
18170: LD_ADDR_VAR 0 7
18174: PUSH
18175: EMPTY
18176: ST_TO_ADDR
// for j := 1 to 8 do
18177: LD_ADDR_VAR 0 3
18181: PUSH
18182: DOUBLE
18183: LD_INT 1
18185: DEC
18186: ST_TO_ADDR
18187: LD_INT 8
18189: PUSH
18190: FOR_TO
18191: IFFALSE 18284
// if Side_Positions [ j ] then
18193: LD_EXP 18
18197: PUSH
18198: LD_VAR 0 3
18202: ARRAY
18203: IFFALSE 18282
// begin amount := 0 ;
18205: LD_ADDR_VAR 0 5
18209: PUSH
18210: LD_INT 0
18212: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
18213: LD_ADDR_VAR 0 4
18217: PUSH
18218: LD_LOC 54
18222: PUSH
18223: LD_VAR 0 2
18227: ARRAY
18228: PUSH
18229: FOR_IN
18230: IFFALSE 18278
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
18232: LD_ADDR_VAR 0 5
18236: PUSH
18237: LD_VAR 0 5
18241: PUSH
18242: LD_INT 22
18244: PUSH
18245: LD_VAR 0 3
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: PUSH
18254: LD_INT 30
18256: PUSH
18257: LD_VAR 0 4
18261: PUSH
18262: EMPTY
18263: LIST
18264: LIST
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PPUSH
18270: CALL_OW 69
18274: PLUS
18275: ST_TO_ADDR
18276: GO 18229
18278: POP
18279: POP
// break ;
18280: GO 18284
// end ;
18282: GO 18190
18284: POP
18285: POP
// list := [ ] ;
18286: LD_ADDR_VAR 0 7
18290: PUSH
18291: EMPTY
18292: ST_TO_ADDR
// for j := 1 to 8 do
18293: LD_ADDR_VAR 0 3
18297: PUSH
18298: DOUBLE
18299: LD_INT 1
18301: DEC
18302: ST_TO_ADDR
18303: LD_INT 8
18305: PUSH
18306: FOR_TO
18307: IFFALSE 18327
// list := list ^ amount ;
18309: LD_ADDR_VAR 0 7
18313: PUSH
18314: LD_VAR 0 7
18318: PUSH
18319: LD_VAR 0 5
18323: ADD
18324: ST_TO_ADDR
18325: GO 18306
18327: POP
18328: POP
// Already_Built := Already_Built ^ [ list ] ;
18329: LD_ADDR_LOC 60
18333: PUSH
18334: LD_LOC 60
18338: PUSH
18339: LD_VAR 0 7
18343: PUSH
18344: EMPTY
18345: LIST
18346: ADD
18347: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
18348: LD_ADDR_LOC 61
18352: PUSH
18353: LD_LOC 61
18357: PUSH
18358: LD_VAR 0 6
18362: PUSH
18363: LD_VAR 0 5
18367: PUSH
18368: LD_LOC 55
18372: PUSH
18373: LD_VAR 0 2
18377: ARRAY
18378: PUSH
18379: EMPTY
18380: LIST
18381: LIST
18382: LIST
18383: ADD
18384: ST_TO_ADDR
// end ;
18385: GO 18076
18387: POP
18388: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
18389: LD_ADDR_LOC 62
18393: PUSH
18394: LD_INT 0
18396: PUSH
18397: LD_INT 0
18399: PUSH
18400: LD_INT 0
18402: PUSH
18403: LD_INT 0
18405: PUSH
18406: LD_INT 0
18408: PUSH
18409: LD_INT 0
18411: PUSH
18412: LD_INT 0
18414: PUSH
18415: LD_INT 0
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: ST_TO_ADDR
// if Limits_Info then
18428: LD_LOC 61
18432: IFFALSE 18448
// Limits_Info := #Limits ^ Limits_Info ;
18434: LD_ADDR_LOC 61
18438: PUSH
18439: LD_STRING #Limits
18441: PUSH
18442: LD_LOC 61
18446: ADD
18447: ST_TO_ADDR
// end ;
18448: LD_VAR 0 1
18452: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
18453: LD_INT 0
18455: PPUSH
18456: PPUSH
18457: PPUSH
18458: PPUSH
// for i := 1 to Restricted_Builds do
18459: LD_ADDR_VAR 0 7
18463: PUSH
18464: DOUBLE
18465: LD_INT 1
18467: DEC
18468: ST_TO_ADDR
18469: LD_LOC 54
18473: PUSH
18474: FOR_TO
18475: IFFALSE 18898
// if BType in Restricted_Builds [ i ] then
18477: LD_VAR 0 2
18481: PUSH
18482: LD_LOC 54
18486: PUSH
18487: LD_VAR 0 7
18491: ARRAY
18492: IN
18493: IFFALSE 18896
// begin if old_side then
18495: LD_VAR 0 4
18499: IFFALSE 18625
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
18501: LD_LOC 60
18505: PUSH
18506: LD_VAR 0 7
18510: ARRAY
18511: PUSH
18512: LD_VAR 0 3
18516: ARRAY
18517: PUSH
18518: LD_VAR 0 5
18522: PLUS
18523: PUSH
18524: LD_LOC 55
18528: PUSH
18529: LD_VAR 0 7
18533: ARRAY
18534: GREATER
18535: IFFALSE 18561
// begin SetSide ( un , old_side ) ;
18537: LD_VAR 0 1
18541: PPUSH
18542: LD_VAR 0 4
18546: PPUSH
18547: CALL_OW 235
// count := 0 ;
18551: LD_ADDR_VAR 0 5
18555: PUSH
18556: LD_INT 0
18558: ST_TO_ADDR
// end else
18559: GO 18625
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
18561: LD_ADDR_LOC 60
18565: PUSH
18566: LD_LOC 60
18570: PPUSH
18571: LD_VAR 0 7
18575: PPUSH
18576: LD_LOC 60
18580: PUSH
18581: LD_VAR 0 7
18585: ARRAY
18586: PPUSH
18587: LD_VAR 0 4
18591: PPUSH
18592: LD_LOC 60
18596: PUSH
18597: LD_VAR 0 7
18601: ARRAY
18602: PUSH
18603: LD_VAR 0 4
18607: ARRAY
18608: PUSH
18609: LD_VAR 0 5
18613: MINUS
18614: PPUSH
18615: CALL_OW 1
18619: PPUSH
18620: CALL_OW 1
18624: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
18625: LD_ADDR_LOC 60
18629: PUSH
18630: LD_LOC 60
18634: PPUSH
18635: LD_VAR 0 7
18639: PPUSH
18640: LD_LOC 60
18644: PUSH
18645: LD_VAR 0 7
18649: ARRAY
18650: PPUSH
18651: LD_VAR 0 3
18655: PPUSH
18656: LD_LOC 60
18660: PUSH
18661: LD_VAR 0 7
18665: ARRAY
18666: PUSH
18667: LD_VAR 0 3
18671: ARRAY
18672: PUSH
18673: LD_VAR 0 5
18677: PLUS
18678: PPUSH
18679: CALL_OW 1
18683: PPUSH
18684: CALL_OW 1
18688: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
18689: LD_VAR 0 5
18693: PUSH
18694: LD_INT 0
18696: NONEQUAL
18697: PUSH
18698: LD_VAR 0 3
18702: PUSH
18703: LD_OWVAR 2
18707: EQUAL
18708: AND
18709: IFFALSE 18752
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
18711: LD_ADDR_LOC 61
18715: PUSH
18716: LD_LOC 61
18720: PPUSH
18721: LD_INT 3
18723: PUSH
18724: LD_VAR 0 7
18728: MUL
18729: PPUSH
18730: LD_LOC 60
18734: PUSH
18735: LD_VAR 0 7
18739: ARRAY
18740: PUSH
18741: LD_VAR 0 3
18745: ARRAY
18746: PPUSH
18747: CALL_OW 1
18751: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
18752: LD_LOC 60
18756: PUSH
18757: LD_VAR 0 7
18761: ARRAY
18762: PUSH
18763: LD_VAR 0 3
18767: ARRAY
18768: PUSH
18769: LD_LOC 55
18773: PUSH
18774: LD_VAR 0 7
18778: ARRAY
18779: GREATER
18780: IFFALSE 18807
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
18782: LD_ADDR_LOC 62
18786: PUSH
18787: LD_LOC 62
18791: PPUSH
18792: LD_VAR 0 3
18796: PPUSH
18797: LD_INT 1
18799: PPUSH
18800: CALL_OW 1
18804: ST_TO_ADDR
// end else
18805: GO 18894
// begin for j := 1 to Restricted_Builds do
18807: LD_ADDR_VAR 0 8
18811: PUSH
18812: DOUBLE
18813: LD_INT 1
18815: DEC
18816: ST_TO_ADDR
18817: LD_LOC 54
18821: PUSH
18822: FOR_TO
18823: IFFALSE 18867
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
18825: LD_LOC 60
18829: PUSH
18830: LD_VAR 0 8
18834: ARRAY
18835: PUSH
18836: LD_VAR 0 3
18840: ARRAY
18841: PUSH
18842: LD_LOC 55
18846: PUSH
18847: LD_VAR 0 8
18851: ARRAY
18852: GREATER
18853: IFFALSE 18865
// begin Is_Cheater := true ;
18855: LD_ADDR_VAR 0 9
18859: PUSH
18860: LD_INT 1
18862: ST_TO_ADDR
// break ;
18863: GO 18867
// end ;
18865: GO 18822
18867: POP
18868: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
18869: LD_ADDR_LOC 62
18873: PUSH
18874: LD_LOC 62
18878: PPUSH
18879: LD_VAR 0 3
18883: PPUSH
18884: LD_VAR 0 9
18888: PPUSH
18889: CALL_OW 1
18893: ST_TO_ADDR
// end ; break ;
18894: GO 18898
// end ;
18896: GO 18474
18898: POP
18899: POP
// end ;
18900: LD_VAR 0 6
18904: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
18905: LD_VAR 0 5
18909: PUSH
18910: LD_LOC 56
18914: IN
18915: PUSH
18916: LD_VAR 0 2
18920: PUSH
18921: LD_LOC 57
18925: IN
18926: OR
18927: PUSH
18928: LD_VAR 0 4
18932: PUSH
18933: LD_LOC 58
18937: IN
18938: OR
18939: PUSH
18940: LD_VAR 0 3
18944: PUSH
18945: LD_LOC 59
18949: IN
18950: OR
18951: IFFALSE 18962
// ComCancel ( factory ) ;
18953: LD_VAR 0 1
18957: PPUSH
18958: CALL_OW 127
// end ;
18962: PPOPN 5
18964: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
18965: LD_VAR 0 2
18969: PUSH
18970: LD_LOC 56
18974: IN
18975: IFFALSE 18986
// ComCancel ( building ) ;
18977: LD_VAR 0 1
18981: PPUSH
18982: CALL_OW 127
// end ; end_of_file
18986: PPOPN 2
18988: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
18989: LD_INT 0
18991: PPUSH
18992: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
18993: LD_ADDR_VAR 0 2
18997: PUSH
18998: LD_STRING #Multi1x1-Time
19000: PUSH
19001: LD_OWVAR 1
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
19010: LD_INT 0
19012: PUSH
19013: LD_EXP 15
19017: PUSH
19018: LD_OWVAR 1
19022: MINUS
19023: LESSEQUAL
19024: IFFALSE 19055
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
19026: LD_ADDR_VAR 0 2
19030: PUSH
19031: LD_VAR 0 2
19035: PUSH
19036: LD_STRING #allowedsibbomb
19038: PUSH
19039: LD_EXP 15
19043: PUSH
19044: LD_OWVAR 1
19048: MINUS
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: ADD
19054: ST_TO_ADDR
// if ( ExtraStrings ) then
19055: LD_EXP 73
19059: IFFALSE 19081
// AllStrings := AllStrings ^  ^ ExtraStrings ;
19061: LD_ADDR_VAR 0 2
19065: PUSH
19066: LD_VAR 0 2
19070: PUSH
19071: LD_STRING 
19073: ADD
19074: PUSH
19075: LD_EXP 73
19079: ADD
19080: ST_TO_ADDR
// if ( LimitsStrings ) then
19081: CALL 15829 0 0
19085: IFFALSE 19107
// AllStrings := AllStrings ^  ^ LimitsStrings ;
19087: LD_ADDR_VAR 0 2
19091: PUSH
19092: LD_VAR 0 2
19096: PUSH
19097: LD_STRING 
19099: ADD
19100: PUSH
19101: CALL 15829 0 0
19105: ADD
19106: ST_TO_ADDR
// Display_Strings := AllStrings ;
19107: LD_ADDR_OWVAR 47
19111: PUSH
19112: LD_VAR 0 2
19116: ST_TO_ADDR
// end ;
19117: LD_VAR 0 1
19121: RET
// every 0 0$1 do
19122: GO 19124
19124: DISABLE
// begin ShowTimer ;
19125: CALL 18989 0 0
// enable ;
19129: ENABLE
// end ; end_of_file
19130: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
19131: LD_INT 0
19133: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
19134: LD_VAR 0 1
19138: PPUSH
19139: CALL_OW 255
19143: PUSH
19144: LD_VAR 0 4
19148: EQUAL
19149: IFFALSE 19168
// begin SetAchievement ( ACH_RAD ) ;
19151: LD_STRING ACH_RAD
19153: PPUSH
19154: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
19158: LD_STRING ACH_NL
19160: PPUSH
19161: LD_INT 1
19163: PPUSH
19164: CALL_OW 564
// end end ;
19168: LD_VAR 0 5
19172: RET
// export function SA_Win ( side ) ; begin
19173: LD_INT 0
19175: PPUSH
// case side of 1 :
19176: LD_VAR 0 1
19180: PUSH
19181: LD_INT 1
19183: DOUBLE
19184: EQUAL
19185: IFTRUE 19189
19187: GO 19202
19189: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
19190: LD_STRING ACH_AH
19192: PPUSH
19193: LD_INT 1
19195: PPUSH
19196: CALL_OW 564
19200: GO 19365
19202: LD_INT 2
19204: DOUBLE
19205: EQUAL
19206: IFTRUE 19210
19208: GO 19223
19210: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
19211: LD_STRING ACH_E
19213: PPUSH
19214: LD_INT 1
19216: PPUSH
19217: CALL_OW 564
19221: GO 19365
19223: LD_INT 3
19225: DOUBLE
19226: EQUAL
19227: IFTRUE 19231
19229: GO 19244
19231: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
19232: LD_STRING ACH_OOL
19234: PPUSH
19235: LD_INT 1
19237: PPUSH
19238: CALL_OW 564
19242: GO 19365
19244: LD_INT 1
19246: PUSH
19247: LD_INT 2
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: DOUBLE
19254: EQUAL
19255: IFTRUE 19259
19257: GO 19284
19259: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
19260: LD_STRING ACH_AH
19262: PPUSH
19263: LD_REAL  5.00000000000000E-0001
19266: PPUSH
19267: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
19271: LD_STRING ACH_E
19273: PPUSH
19274: LD_REAL  5.00000000000000E-0001
19277: PPUSH
19278: CALL_OW 564
// end ; [ 2 , 3 ] :
19282: GO 19365
19284: LD_INT 2
19286: PUSH
19287: LD_INT 3
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: DOUBLE
19294: EQUAL
19295: IFTRUE 19299
19297: GO 19324
19299: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
19300: LD_STRING ACH_OOL
19302: PPUSH
19303: LD_REAL  5.00000000000000E-0001
19306: PPUSH
19307: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
19311: LD_STRING ACH_E
19313: PPUSH
19314: LD_REAL  5.00000000000000E-0001
19317: PPUSH
19318: CALL_OW 564
// end ; [ 3 , 1 ] :
19322: GO 19365
19324: LD_INT 3
19326: PUSH
19327: LD_INT 1
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: DOUBLE
19334: EQUAL
19335: IFTRUE 19339
19337: GO 19364
19339: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
19340: LD_STRING ACH_AH
19342: PPUSH
19343: LD_REAL  5.00000000000000E-0001
19346: PPUSH
19347: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
19351: LD_STRING ACH_OOL
19353: PPUSH
19354: LD_REAL  5.00000000000000E-0001
19357: PPUSH
19358: CALL_OW 564
// end ; end ;
19362: GO 19365
19364: POP
// end ; end_of_file
19365: LD_VAR 0 2
19369: RET
// export function SetMpTechs ( ) ; var side , i ; begin
19370: LD_INT 0
19372: PPUSH
19373: PPUSH
19374: PPUSH
// for side = 1 to 8 do
19375: LD_ADDR_VAR 0 2
19379: PUSH
19380: DOUBLE
19381: LD_INT 1
19383: DEC
19384: ST_TO_ADDR
19385: LD_INT 8
19387: PUSH
19388: FOR_TO
19389: IFFALSE 19510
// begin for i = 1 to 72 do
19391: LD_ADDR_VAR 0 3
19395: PUSH
19396: DOUBLE
19397: LD_INT 1
19399: DEC
19400: ST_TO_ADDR
19401: LD_INT 72
19403: PUSH
19404: FOR_TO
19405: IFFALSE 19436
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
19407: LD_VAR 0 3
19411: PPUSH
19412: LD_VAR 0 2
19416: PPUSH
19417: LD_INT 0
19419: PPUSH
19420: LD_VAR 0 3
19424: PPUSH
19425: CALL_OW 565
19429: PPUSH
19430: CALL_OW 322
19434: GO 19404
19436: POP
19437: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
19438: LD_INT 73
19440: PPUSH
19441: LD_VAR 0 2
19445: PPUSH
19446: LD_INT 0
19448: PPUSH
19449: LD_INT 25
19451: PPUSH
19452: CALL_OW 565
19456: PPUSH
19457: CALL_OW 322
// for i = 0 to 40 do
19461: LD_ADDR_VAR 0 3
19465: PUSH
19466: DOUBLE
19467: LD_INT 0
19469: DEC
19470: ST_TO_ADDR
19471: LD_INT 40
19473: PUSH
19474: FOR_TO
19475: IFFALSE 19506
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
19477: LD_VAR 0 3
19481: PPUSH
19482: LD_VAR 0 2
19486: PPUSH
19487: LD_INT 1
19489: PPUSH
19490: LD_VAR 0 3
19494: PPUSH
19495: CALL_OW 565
19499: PPUSH
19500: CALL_OW 324
19504: GO 19474
19506: POP
19507: POP
// end ;
19508: GO 19388
19510: POP
19511: POP
// end ;
19512: LD_VAR 0 1
19516: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
19517: LD_INT 0
19519: PPUSH
19520: PPUSH
19521: PPUSH
// for side = 1 to 8 do
19522: LD_ADDR_VAR 0 3
19526: PUSH
19527: DOUBLE
19528: LD_INT 1
19530: DEC
19531: ST_TO_ADDR
19532: LD_INT 8
19534: PUSH
19535: FOR_TO
19536: IFFALSE 23532
// begin for i = 1 to 73 do
19538: LD_ADDR_VAR 0 4
19542: PUSH
19543: DOUBLE
19544: LD_INT 1
19546: DEC
19547: ST_TO_ADDR
19548: LD_INT 73
19550: PUSH
19551: FOR_TO
19552: IFFALSE 19573
// SetTech ( i , side , state_disabled ) ;
19554: LD_VAR 0 4
19558: PPUSH
19559: LD_VAR 0 3
19563: PPUSH
19564: LD_INT 0
19566: PPUSH
19567: CALL_OW 322
19571: GO 19551
19573: POP
19574: POP
// for i = 0 to 40 do
19575: LD_ADDR_VAR 0 4
19579: PUSH
19580: DOUBLE
19581: LD_INT 0
19583: DEC
19584: ST_TO_ADDR
19585: LD_INT 40
19587: PUSH
19588: FOR_TO
19589: IFFALSE 19610
// SetRestrict ( i , side , false ) ;
19591: LD_VAR 0 4
19595: PPUSH
19596: LD_VAR 0 3
19600: PPUSH
19601: LD_INT 0
19603: PPUSH
19604: CALL_OW 324
19608: GO 19588
19610: POP
19611: POP
// case level of 1 :
19612: LD_VAR 0 1
19616: PUSH
19617: LD_INT 1
19619: DOUBLE
19620: EQUAL
19621: IFTRUE 19625
19623: GO 19778
19625: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19626: LD_INT 35
19628: PPUSH
19629: LD_VAR 0 3
19633: PPUSH
19634: LD_INT 1
19636: PPUSH
19637: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19641: LD_INT 45
19643: PPUSH
19644: LD_VAR 0 3
19648: PPUSH
19649: LD_INT 1
19651: PPUSH
19652: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19656: LD_INT 46
19658: PPUSH
19659: LD_VAR 0 3
19663: PPUSH
19664: LD_INT 1
19666: PPUSH
19667: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19671: LD_INT 47
19673: PPUSH
19674: LD_VAR 0 3
19678: PPUSH
19679: LD_INT 1
19681: PPUSH
19682: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
19686: LD_INT 0
19688: PPUSH
19689: LD_VAR 0 3
19693: PPUSH
19694: LD_INT 1
19696: PPUSH
19697: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
19701: LD_INT 2
19703: PPUSH
19704: LD_VAR 0 3
19708: PPUSH
19709: LD_INT 1
19711: PPUSH
19712: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
19716: LD_INT 4
19718: PPUSH
19719: LD_VAR 0 3
19723: PPUSH
19724: LD_INT 1
19726: PPUSH
19727: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
19731: LD_INT 6
19733: PPUSH
19734: LD_VAR 0 3
19738: PPUSH
19739: LD_INT 1
19741: PPUSH
19742: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
19746: LD_INT 29
19748: PPUSH
19749: LD_VAR 0 3
19753: PPUSH
19754: LD_INT 1
19756: PPUSH
19757: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
19761: LD_INT 31
19763: PPUSH
19764: LD_VAR 0 3
19768: PPUSH
19769: LD_INT 1
19771: PPUSH
19772: CALL_OW 324
// end ; 2 :
19776: GO 23530
19778: LD_INT 2
19780: DOUBLE
19781: EQUAL
19782: IFTRUE 19786
19784: GO 19984
19786: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19787: LD_INT 35
19789: PPUSH
19790: LD_VAR 0 3
19794: PPUSH
19795: LD_INT 1
19797: PPUSH
19798: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19802: LD_INT 45
19804: PPUSH
19805: LD_VAR 0 3
19809: PPUSH
19810: LD_INT 1
19812: PPUSH
19813: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19817: LD_INT 46
19819: PPUSH
19820: LD_VAR 0 3
19824: PPUSH
19825: LD_INT 1
19827: PPUSH
19828: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19832: LD_INT 47
19834: PPUSH
19835: LD_VAR 0 3
19839: PPUSH
19840: LD_INT 1
19842: PPUSH
19843: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
19847: LD_INT 1
19849: PPUSH
19850: LD_VAR 0 3
19854: PPUSH
19855: LD_INT 1
19857: PPUSH
19858: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
19862: LD_INT 2
19864: PPUSH
19865: LD_VAR 0 3
19869: PPUSH
19870: LD_INT 1
19872: PPUSH
19873: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
19877: LD_INT 11
19879: PPUSH
19880: LD_VAR 0 3
19884: PPUSH
19885: LD_INT 1
19887: PPUSH
19888: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
19892: LD_INT 0
19894: PPUSH
19895: LD_VAR 0 3
19899: PPUSH
19900: LD_INT 1
19902: PPUSH
19903: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
19907: LD_INT 2
19909: PPUSH
19910: LD_VAR 0 3
19914: PPUSH
19915: LD_INT 1
19917: PPUSH
19918: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
19922: LD_INT 4
19924: PPUSH
19925: LD_VAR 0 3
19929: PPUSH
19930: LD_INT 1
19932: PPUSH
19933: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
19937: LD_INT 6
19939: PPUSH
19940: LD_VAR 0 3
19944: PPUSH
19945: LD_INT 1
19947: PPUSH
19948: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
19952: LD_INT 29
19954: PPUSH
19955: LD_VAR 0 3
19959: PPUSH
19960: LD_INT 1
19962: PPUSH
19963: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
19967: LD_INT 31
19969: PPUSH
19970: LD_VAR 0 3
19974: PPUSH
19975: LD_INT 1
19977: PPUSH
19978: CALL_OW 324
// end ; 3 :
19982: GO 23530
19984: LD_INT 3
19986: DOUBLE
19987: EQUAL
19988: IFTRUE 19992
19990: GO 20445
19992: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19993: LD_INT 35
19995: PPUSH
19996: LD_VAR 0 3
20000: PPUSH
20001: LD_INT 1
20003: PPUSH
20004: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
20008: LD_INT 45
20010: PPUSH
20011: LD_VAR 0 3
20015: PPUSH
20016: LD_INT 1
20018: PPUSH
20019: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
20023: LD_INT 46
20025: PPUSH
20026: LD_VAR 0 3
20030: PPUSH
20031: LD_INT 1
20033: PPUSH
20034: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
20038: LD_INT 47
20040: PPUSH
20041: LD_VAR 0 3
20045: PPUSH
20046: LD_INT 1
20048: PPUSH
20049: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
20053: LD_INT 1
20055: PPUSH
20056: LD_VAR 0 3
20060: PPUSH
20061: LD_INT 1
20063: PPUSH
20064: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
20068: LD_INT 2
20070: PPUSH
20071: LD_VAR 0 3
20075: PPUSH
20076: LD_INT 1
20078: PPUSH
20079: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
20083: LD_INT 11
20085: PPUSH
20086: LD_VAR 0 3
20090: PPUSH
20091: LD_INT 1
20093: PPUSH
20094: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
20098: LD_INT 48
20100: PPUSH
20101: LD_VAR 0 3
20105: PPUSH
20106: LD_INT 1
20108: PPUSH
20109: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
20113: LD_INT 69
20115: PPUSH
20116: LD_VAR 0 3
20120: PPUSH
20121: LD_INT 1
20123: PPUSH
20124: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
20128: LD_INT 39
20130: PPUSH
20131: LD_VAR 0 3
20135: PPUSH
20136: LD_INT 1
20138: PPUSH
20139: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
20143: LD_INT 43
20145: PPUSH
20146: LD_VAR 0 3
20150: PPUSH
20151: LD_INT 1
20153: PPUSH
20154: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
20158: LD_INT 51
20160: PPUSH
20161: LD_VAR 0 3
20165: PPUSH
20166: LD_INT 1
20168: PPUSH
20169: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
20173: LD_INT 6
20175: PPUSH
20176: LD_VAR 0 3
20180: PPUSH
20181: LD_INT 1
20183: PPUSH
20184: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
20188: LD_INT 0
20190: PPUSH
20191: LD_VAR 0 3
20195: PPUSH
20196: LD_INT 1
20198: PPUSH
20199: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
20203: LD_INT 2
20205: PPUSH
20206: LD_VAR 0 3
20210: PPUSH
20211: LD_INT 1
20213: PPUSH
20214: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
20218: LD_INT 3
20220: PPUSH
20221: LD_VAR 0 3
20225: PPUSH
20226: LD_INT 1
20228: PPUSH
20229: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
20233: LD_INT 4
20235: PPUSH
20236: LD_VAR 0 3
20240: PPUSH
20241: LD_INT 1
20243: PPUSH
20244: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
20248: LD_INT 6
20250: PPUSH
20251: LD_VAR 0 3
20255: PPUSH
20256: LD_INT 1
20258: PPUSH
20259: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
20263: LD_INT 7
20265: PPUSH
20266: LD_VAR 0 3
20270: PPUSH
20271: LD_INT 1
20273: PPUSH
20274: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
20278: LD_INT 8
20280: PPUSH
20281: LD_VAR 0 3
20285: PPUSH
20286: LD_INT 1
20288: PPUSH
20289: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
20293: LD_INT 10
20295: PPUSH
20296: LD_VAR 0 3
20300: PPUSH
20301: LD_INT 1
20303: PPUSH
20304: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
20308: LD_INT 15
20310: PPUSH
20311: LD_VAR 0 3
20315: PPUSH
20316: LD_INT 1
20318: PPUSH
20319: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
20323: LD_INT 16
20325: PPUSH
20326: LD_VAR 0 3
20330: PPUSH
20331: LD_INT 1
20333: PPUSH
20334: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
20338: LD_INT 17
20340: PPUSH
20341: LD_VAR 0 3
20345: PPUSH
20346: LD_INT 1
20348: PPUSH
20349: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
20353: LD_INT 20
20355: PPUSH
20356: LD_VAR 0 3
20360: PPUSH
20361: LD_INT 1
20363: PPUSH
20364: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
20368: LD_INT 26
20370: PPUSH
20371: LD_VAR 0 3
20375: PPUSH
20376: LD_INT 1
20378: PPUSH
20379: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
20383: LD_INT 27
20385: PPUSH
20386: LD_VAR 0 3
20390: PPUSH
20391: LD_INT 1
20393: PPUSH
20394: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
20398: LD_INT 29
20400: PPUSH
20401: LD_VAR 0 3
20405: PPUSH
20406: LD_INT 1
20408: PPUSH
20409: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
20413: LD_INT 31
20415: PPUSH
20416: LD_VAR 0 3
20420: PPUSH
20421: LD_INT 1
20423: PPUSH
20424: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
20428: LD_INT 32
20430: PPUSH
20431: LD_VAR 0 3
20435: PPUSH
20436: LD_INT 1
20438: PPUSH
20439: CALL_OW 324
// end ; 4 :
20443: GO 23530
20445: LD_INT 4
20447: DOUBLE
20448: EQUAL
20449: IFTRUE 20453
20451: GO 21401
20453: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
20454: LD_INT 35
20456: PPUSH
20457: LD_VAR 0 3
20461: PPUSH
20462: LD_INT 1
20464: PPUSH
20465: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
20469: LD_INT 45
20471: PPUSH
20472: LD_VAR 0 3
20476: PPUSH
20477: LD_INT 1
20479: PPUSH
20480: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
20484: LD_INT 46
20486: PPUSH
20487: LD_VAR 0 3
20491: PPUSH
20492: LD_INT 1
20494: PPUSH
20495: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
20499: LD_INT 47
20501: PPUSH
20502: LD_VAR 0 3
20506: PPUSH
20507: LD_INT 1
20509: PPUSH
20510: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
20514: LD_INT 1
20516: PPUSH
20517: LD_VAR 0 3
20521: PPUSH
20522: LD_INT 1
20524: PPUSH
20525: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
20529: LD_INT 2
20531: PPUSH
20532: LD_VAR 0 3
20536: PPUSH
20537: LD_INT 1
20539: PPUSH
20540: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
20544: LD_INT 11
20546: PPUSH
20547: LD_VAR 0 3
20551: PPUSH
20552: LD_INT 1
20554: PPUSH
20555: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
20559: LD_INT 20
20561: PPUSH
20562: LD_VAR 0 3
20566: PPUSH
20567: LD_INT 1
20569: PPUSH
20570: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
20574: LD_INT 48
20576: PPUSH
20577: LD_VAR 0 3
20581: PPUSH
20582: LD_INT 1
20584: PPUSH
20585: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
20589: LD_INT 49
20591: PPUSH
20592: LD_VAR 0 3
20596: PPUSH
20597: LD_INT 1
20599: PPUSH
20600: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
20604: LD_INT 69
20606: PPUSH
20607: LD_VAR 0 3
20611: PPUSH
20612: LD_INT 1
20614: PPUSH
20615: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
20619: LD_INT 39
20621: PPUSH
20622: LD_VAR 0 3
20626: PPUSH
20627: LD_INT 1
20629: PPUSH
20630: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
20634: LD_INT 34
20636: PPUSH
20637: LD_VAR 0 3
20641: PPUSH
20642: LD_INT 1
20644: PPUSH
20645: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
20649: LD_INT 42
20651: PPUSH
20652: LD_VAR 0 3
20656: PPUSH
20657: LD_INT 1
20659: PPUSH
20660: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
20664: LD_INT 44
20666: PPUSH
20667: LD_VAR 0 3
20671: PPUSH
20672: LD_INT 1
20674: PPUSH
20675: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
20679: LD_INT 41
20681: PPUSH
20682: LD_VAR 0 3
20686: PPUSH
20687: LD_INT 1
20689: PPUSH
20690: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
20694: LD_INT 43
20696: PPUSH
20697: LD_VAR 0 3
20701: PPUSH
20702: LD_INT 1
20704: PPUSH
20705: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
20709: LD_INT 70
20711: PPUSH
20712: LD_VAR 0 3
20716: PPUSH
20717: LD_INT 1
20719: PPUSH
20720: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
20724: LD_INT 51
20726: PPUSH
20727: LD_VAR 0 3
20731: PPUSH
20732: LD_INT 1
20734: PPUSH
20735: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
20739: LD_INT 52
20741: PPUSH
20742: LD_VAR 0 3
20746: PPUSH
20747: LD_INT 1
20749: PPUSH
20750: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
20754: LD_INT 6
20756: PPUSH
20757: LD_VAR 0 3
20761: PPUSH
20762: LD_INT 1
20764: PPUSH
20765: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
20769: LD_INT 15
20771: PPUSH
20772: LD_VAR 0 3
20776: PPUSH
20777: LD_INT 1
20779: PPUSH
20780: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
20784: LD_INT 7
20786: PPUSH
20787: LD_VAR 0 3
20791: PPUSH
20792: LD_INT 1
20794: PPUSH
20795: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
20799: LD_INT 12
20801: PPUSH
20802: LD_VAR 0 3
20806: PPUSH
20807: LD_INT 1
20809: PPUSH
20810: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
20814: LD_INT 18
20816: PPUSH
20817: LD_VAR 0 3
20821: PPUSH
20822: LD_INT 1
20824: PPUSH
20825: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
20829: LD_INT 60
20831: PPUSH
20832: LD_VAR 0 3
20836: PPUSH
20837: LD_INT 1
20839: PPUSH
20840: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
20844: LD_INT 9
20846: PPUSH
20847: LD_VAR 0 3
20851: PPUSH
20852: LD_INT 1
20854: PPUSH
20855: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
20859: LD_INT 30
20861: PPUSH
20862: LD_VAR 0 3
20866: PPUSH
20867: LD_INT 1
20869: PPUSH
20870: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
20874: LD_INT 37
20876: PPUSH
20877: LD_VAR 0 3
20881: PPUSH
20882: LD_INT 1
20884: PPUSH
20885: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
20889: LD_INT 5
20891: PPUSH
20892: LD_VAR 0 3
20896: PPUSH
20897: LD_INT 1
20899: PPUSH
20900: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
20904: LD_INT 66
20906: PPUSH
20907: LD_VAR 0 3
20911: PPUSH
20912: LD_INT 1
20914: PPUSH
20915: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
20919: LD_INT 21
20921: PPUSH
20922: LD_VAR 0 3
20926: PPUSH
20927: LD_INT 1
20929: PPUSH
20930: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
20934: LD_INT 22
20936: PPUSH
20937: LD_VAR 0 3
20941: PPUSH
20942: LD_INT 1
20944: PPUSH
20945: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
20949: LD_INT 54
20951: PPUSH
20952: LD_VAR 0 3
20956: PPUSH
20957: LD_INT 1
20959: PPUSH
20960: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
20964: LD_INT 0
20966: PPUSH
20967: LD_VAR 0 3
20971: PPUSH
20972: LD_INT 1
20974: PPUSH
20975: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
20979: LD_INT 1
20981: PPUSH
20982: LD_VAR 0 3
20986: PPUSH
20987: LD_INT 1
20989: PPUSH
20990: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
20994: LD_INT 2
20996: PPUSH
20997: LD_VAR 0 3
21001: PPUSH
21002: LD_INT 1
21004: PPUSH
21005: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
21009: LD_INT 3
21011: PPUSH
21012: LD_VAR 0 3
21016: PPUSH
21017: LD_INT 1
21019: PPUSH
21020: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
21024: LD_INT 4
21026: PPUSH
21027: LD_VAR 0 3
21031: PPUSH
21032: LD_INT 1
21034: PPUSH
21035: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
21039: LD_INT 5
21041: PPUSH
21042: LD_VAR 0 3
21046: PPUSH
21047: LD_INT 1
21049: PPUSH
21050: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
21054: LD_INT 6
21056: PPUSH
21057: LD_VAR 0 3
21061: PPUSH
21062: LD_INT 1
21064: PPUSH
21065: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
21069: LD_INT 7
21071: PPUSH
21072: LD_VAR 0 3
21076: PPUSH
21077: LD_INT 1
21079: PPUSH
21080: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
21084: LD_INT 8
21086: PPUSH
21087: LD_VAR 0 3
21091: PPUSH
21092: LD_INT 1
21094: PPUSH
21095: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
21099: LD_INT 10
21101: PPUSH
21102: LD_VAR 0 3
21106: PPUSH
21107: LD_INT 1
21109: PPUSH
21110: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
21114: LD_INT 11
21116: PPUSH
21117: LD_VAR 0 3
21121: PPUSH
21122: LD_INT 1
21124: PPUSH
21125: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
21129: LD_INT 12
21131: PPUSH
21132: LD_VAR 0 3
21136: PPUSH
21137: LD_INT 1
21139: PPUSH
21140: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
21144: LD_INT 13
21146: PPUSH
21147: LD_VAR 0 3
21151: PPUSH
21152: LD_INT 1
21154: PPUSH
21155: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
21159: LD_INT 14
21161: PPUSH
21162: LD_VAR 0 3
21166: PPUSH
21167: LD_INT 1
21169: PPUSH
21170: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
21174: LD_INT 15
21176: PPUSH
21177: LD_VAR 0 3
21181: PPUSH
21182: LD_INT 1
21184: PPUSH
21185: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
21189: LD_INT 16
21191: PPUSH
21192: LD_VAR 0 3
21196: PPUSH
21197: LD_INT 1
21199: PPUSH
21200: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
21204: LD_INT 17
21206: PPUSH
21207: LD_VAR 0 3
21211: PPUSH
21212: LD_INT 1
21214: PPUSH
21215: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
21219: LD_INT 19
21221: PPUSH
21222: LD_VAR 0 3
21226: PPUSH
21227: LD_INT 1
21229: PPUSH
21230: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
21234: LD_INT 20
21236: PPUSH
21237: LD_VAR 0 3
21241: PPUSH
21242: LD_INT 1
21244: PPUSH
21245: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
21249: LD_INT 21
21251: PPUSH
21252: LD_VAR 0 3
21256: PPUSH
21257: LD_INT 1
21259: PPUSH
21260: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
21264: LD_INT 23
21266: PPUSH
21267: LD_VAR 0 3
21271: PPUSH
21272: LD_INT 1
21274: PPUSH
21275: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
21279: LD_INT 26
21281: PPUSH
21282: LD_VAR 0 3
21286: PPUSH
21287: LD_INT 1
21289: PPUSH
21290: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
21294: LD_INT 27
21296: PPUSH
21297: LD_VAR 0 3
21301: PPUSH
21302: LD_INT 1
21304: PPUSH
21305: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
21309: LD_INT 28
21311: PPUSH
21312: LD_VAR 0 3
21316: PPUSH
21317: LD_INT 1
21319: PPUSH
21320: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
21324: LD_INT 29
21326: PPUSH
21327: LD_VAR 0 3
21331: PPUSH
21332: LD_INT 1
21334: PPUSH
21335: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
21339: LD_INT 30
21341: PPUSH
21342: LD_VAR 0 3
21346: PPUSH
21347: LD_INT 1
21349: PPUSH
21350: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
21354: LD_INT 31
21356: PPUSH
21357: LD_VAR 0 3
21361: PPUSH
21362: LD_INT 1
21364: PPUSH
21365: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
21369: LD_INT 32
21371: PPUSH
21372: LD_VAR 0 3
21376: PPUSH
21377: LD_INT 1
21379: PPUSH
21380: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
21384: LD_INT 36
21386: PPUSH
21387: LD_VAR 0 3
21391: PPUSH
21392: LD_INT 1
21394: PPUSH
21395: CALL_OW 324
// end ; 5 :
21399: GO 23530
21401: LD_INT 5
21403: DOUBLE
21404: EQUAL
21405: IFTRUE 21409
21407: GO 22522
21409: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
21410: LD_INT 35
21412: PPUSH
21413: LD_VAR 0 3
21417: PPUSH
21418: LD_INT 1
21420: PPUSH
21421: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
21425: LD_INT 45
21427: PPUSH
21428: LD_VAR 0 3
21432: PPUSH
21433: LD_INT 1
21435: PPUSH
21436: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
21440: LD_INT 46
21442: PPUSH
21443: LD_VAR 0 3
21447: PPUSH
21448: LD_INT 1
21450: PPUSH
21451: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
21455: LD_INT 47
21457: PPUSH
21458: LD_VAR 0 3
21462: PPUSH
21463: LD_INT 1
21465: PPUSH
21466: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
21470: LD_INT 1
21472: PPUSH
21473: LD_VAR 0 3
21477: PPUSH
21478: LD_INT 1
21480: PPUSH
21481: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
21485: LD_INT 2
21487: PPUSH
21488: LD_VAR 0 3
21492: PPUSH
21493: LD_INT 1
21495: PPUSH
21496: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
21500: LD_INT 11
21502: PPUSH
21503: LD_VAR 0 3
21507: PPUSH
21508: LD_INT 1
21510: PPUSH
21511: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
21515: LD_INT 20
21517: PPUSH
21518: LD_VAR 0 3
21522: PPUSH
21523: LD_INT 1
21525: PPUSH
21526: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
21530: LD_INT 48
21532: PPUSH
21533: LD_VAR 0 3
21537: PPUSH
21538: LD_INT 1
21540: PPUSH
21541: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
21545: LD_INT 49
21547: PPUSH
21548: LD_VAR 0 3
21552: PPUSH
21553: LD_INT 1
21555: PPUSH
21556: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
21560: LD_INT 69
21562: PPUSH
21563: LD_VAR 0 3
21567: PPUSH
21568: LD_INT 1
21570: PPUSH
21571: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
21575: LD_INT 39
21577: PPUSH
21578: LD_VAR 0 3
21582: PPUSH
21583: LD_INT 1
21585: PPUSH
21586: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
21590: LD_INT 34
21592: PPUSH
21593: LD_VAR 0 3
21597: PPUSH
21598: LD_INT 1
21600: PPUSH
21601: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
21605: LD_INT 42
21607: PPUSH
21608: LD_VAR 0 3
21612: PPUSH
21613: LD_INT 1
21615: PPUSH
21616: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
21620: LD_INT 44
21622: PPUSH
21623: LD_VAR 0 3
21627: PPUSH
21628: LD_INT 1
21630: PPUSH
21631: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
21635: LD_INT 41
21637: PPUSH
21638: LD_VAR 0 3
21642: PPUSH
21643: LD_INT 1
21645: PPUSH
21646: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
21650: LD_INT 40
21652: PPUSH
21653: LD_VAR 0 3
21657: PPUSH
21658: LD_INT 1
21660: PPUSH
21661: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
21665: LD_INT 43
21667: PPUSH
21668: LD_VAR 0 3
21672: PPUSH
21673: LD_INT 1
21675: PPUSH
21676: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
21680: LD_INT 70
21682: PPUSH
21683: LD_VAR 0 3
21687: PPUSH
21688: LD_INT 1
21690: PPUSH
21691: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
21695: LD_INT 51
21697: PPUSH
21698: LD_VAR 0 3
21702: PPUSH
21703: LD_INT 1
21705: PPUSH
21706: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
21710: LD_INT 52
21712: PPUSH
21713: LD_VAR 0 3
21717: PPUSH
21718: LD_INT 1
21720: PPUSH
21721: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
21725: LD_INT 6
21727: PPUSH
21728: LD_VAR 0 3
21732: PPUSH
21733: LD_INT 1
21735: PPUSH
21736: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
21740: LD_INT 15
21742: PPUSH
21743: LD_VAR 0 3
21747: PPUSH
21748: LD_INT 1
21750: PPUSH
21751: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
21755: LD_INT 7
21757: PPUSH
21758: LD_VAR 0 3
21762: PPUSH
21763: LD_INT 1
21765: PPUSH
21766: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
21770: LD_INT 12
21772: PPUSH
21773: LD_VAR 0 3
21777: PPUSH
21778: LD_INT 1
21780: PPUSH
21781: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
21785: LD_INT 17
21787: PPUSH
21788: LD_VAR 0 3
21792: PPUSH
21793: LD_INT 1
21795: PPUSH
21796: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
21800: LD_INT 18
21802: PPUSH
21803: LD_VAR 0 3
21807: PPUSH
21808: LD_INT 1
21810: PPUSH
21811: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
21815: LD_INT 60
21817: PPUSH
21818: LD_VAR 0 3
21822: PPUSH
21823: LD_INT 1
21825: PPUSH
21826: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
21830: LD_INT 32
21832: PPUSH
21833: LD_VAR 0 3
21837: PPUSH
21838: LD_INT 1
21840: PPUSH
21841: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
21845: LD_INT 9
21847: PPUSH
21848: LD_VAR 0 3
21852: PPUSH
21853: LD_INT 1
21855: PPUSH
21856: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
21860: LD_INT 57
21862: PPUSH
21863: LD_VAR 0 3
21867: PPUSH
21868: LD_INT 1
21870: PPUSH
21871: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
21875: LD_INT 30
21877: PPUSH
21878: LD_VAR 0 3
21882: PPUSH
21883: LD_INT 1
21885: PPUSH
21886: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
21890: LD_INT 37
21892: PPUSH
21893: LD_VAR 0 3
21897: PPUSH
21898: LD_INT 1
21900: PPUSH
21901: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
21905: LD_INT 63
21907: PPUSH
21908: LD_VAR 0 3
21912: PPUSH
21913: LD_INT 1
21915: PPUSH
21916: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
21920: LD_INT 3
21922: PPUSH
21923: LD_VAR 0 3
21927: PPUSH
21928: LD_INT 1
21930: PPUSH
21931: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
21935: LD_INT 4
21937: PPUSH
21938: LD_VAR 0 3
21942: PPUSH
21943: LD_INT 1
21945: PPUSH
21946: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
21950: LD_INT 5
21952: PPUSH
21953: LD_VAR 0 3
21957: PPUSH
21958: LD_INT 1
21960: PPUSH
21961: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
21965: LD_INT 66
21967: PPUSH
21968: LD_VAR 0 3
21972: PPUSH
21973: LD_INT 1
21975: PPUSH
21976: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
21980: LD_INT 21
21982: PPUSH
21983: LD_VAR 0 3
21987: PPUSH
21988: LD_INT 1
21990: PPUSH
21991: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
21995: LD_INT 22
21997: PPUSH
21998: LD_VAR 0 3
22002: PPUSH
22003: LD_INT 1
22005: PPUSH
22006: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
22010: LD_INT 19
22012: PPUSH
22013: LD_VAR 0 3
22017: PPUSH
22018: LD_INT 1
22020: PPUSH
22021: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
22025: LD_INT 54
22027: PPUSH
22028: LD_VAR 0 3
22032: PPUSH
22033: LD_INT 1
22035: PPUSH
22036: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
22040: LD_INT 55
22042: PPUSH
22043: LD_VAR 0 3
22047: PPUSH
22048: LD_INT 1
22050: PPUSH
22051: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22055: LD_INT 0
22057: PPUSH
22058: LD_VAR 0 3
22062: PPUSH
22063: LD_INT 1
22065: PPUSH
22066: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
22070: LD_INT 1
22072: PPUSH
22073: LD_VAR 0 3
22077: PPUSH
22078: LD_INT 1
22080: PPUSH
22081: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22085: LD_INT 2
22087: PPUSH
22088: LD_VAR 0 3
22092: PPUSH
22093: LD_INT 1
22095: PPUSH
22096: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
22100: LD_INT 3
22102: PPUSH
22103: LD_VAR 0 3
22107: PPUSH
22108: LD_INT 1
22110: PPUSH
22111: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22115: LD_INT 4
22117: PPUSH
22118: LD_VAR 0 3
22122: PPUSH
22123: LD_INT 1
22125: PPUSH
22126: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
22130: LD_INT 5
22132: PPUSH
22133: LD_VAR 0 3
22137: PPUSH
22138: LD_INT 1
22140: PPUSH
22141: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22145: LD_INT 6
22147: PPUSH
22148: LD_VAR 0 3
22152: PPUSH
22153: LD_INT 1
22155: PPUSH
22156: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
22160: LD_INT 7
22162: PPUSH
22163: LD_VAR 0 3
22167: PPUSH
22168: LD_INT 1
22170: PPUSH
22171: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
22175: LD_INT 8
22177: PPUSH
22178: LD_VAR 0 3
22182: PPUSH
22183: LD_INT 1
22185: PPUSH
22186: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
22190: LD_INT 10
22192: PPUSH
22193: LD_VAR 0 3
22197: PPUSH
22198: LD_INT 1
22200: PPUSH
22201: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
22205: LD_INT 11
22207: PPUSH
22208: LD_VAR 0 3
22212: PPUSH
22213: LD_INT 1
22215: PPUSH
22216: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
22220: LD_INT 12
22222: PPUSH
22223: LD_VAR 0 3
22227: PPUSH
22228: LD_INT 1
22230: PPUSH
22231: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
22235: LD_INT 13
22237: PPUSH
22238: LD_VAR 0 3
22242: PPUSH
22243: LD_INT 1
22245: PPUSH
22246: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
22250: LD_INT 14
22252: PPUSH
22253: LD_VAR 0 3
22257: PPUSH
22258: LD_INT 1
22260: PPUSH
22261: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
22265: LD_INT 15
22267: PPUSH
22268: LD_VAR 0 3
22272: PPUSH
22273: LD_INT 1
22275: PPUSH
22276: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
22280: LD_INT 16
22282: PPUSH
22283: LD_VAR 0 3
22287: PPUSH
22288: LD_INT 1
22290: PPUSH
22291: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
22295: LD_INT 17
22297: PPUSH
22298: LD_VAR 0 3
22302: PPUSH
22303: LD_INT 1
22305: PPUSH
22306: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
22310: LD_INT 18
22312: PPUSH
22313: LD_VAR 0 3
22317: PPUSH
22318: LD_INT 1
22320: PPUSH
22321: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
22325: LD_INT 19
22327: PPUSH
22328: LD_VAR 0 3
22332: PPUSH
22333: LD_INT 1
22335: PPUSH
22336: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
22340: LD_INT 20
22342: PPUSH
22343: LD_VAR 0 3
22347: PPUSH
22348: LD_INT 1
22350: PPUSH
22351: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
22355: LD_INT 21
22357: PPUSH
22358: LD_VAR 0 3
22362: PPUSH
22363: LD_INT 1
22365: PPUSH
22366: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
22370: LD_INT 23
22372: PPUSH
22373: LD_VAR 0 3
22377: PPUSH
22378: LD_INT 1
22380: PPUSH
22381: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
22385: LD_INT 26
22387: PPUSH
22388: LD_VAR 0 3
22392: PPUSH
22393: LD_INT 1
22395: PPUSH
22396: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
22400: LD_INT 27
22402: PPUSH
22403: LD_VAR 0 3
22407: PPUSH
22408: LD_INT 1
22410: PPUSH
22411: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
22415: LD_INT 28
22417: PPUSH
22418: LD_VAR 0 3
22422: PPUSH
22423: LD_INT 1
22425: PPUSH
22426: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22430: LD_INT 29
22432: PPUSH
22433: LD_VAR 0 3
22437: PPUSH
22438: LD_INT 1
22440: PPUSH
22441: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
22445: LD_INT 30
22447: PPUSH
22448: LD_VAR 0 3
22452: PPUSH
22453: LD_INT 1
22455: PPUSH
22456: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22460: LD_INT 31
22462: PPUSH
22463: LD_VAR 0 3
22467: PPUSH
22468: LD_INT 1
22470: PPUSH
22471: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
22475: LD_INT 32
22477: PPUSH
22478: LD_VAR 0 3
22482: PPUSH
22483: LD_INT 1
22485: PPUSH
22486: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
22490: LD_INT 33
22492: PPUSH
22493: LD_VAR 0 3
22497: PPUSH
22498: LD_INT 1
22500: PPUSH
22501: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
22505: LD_INT 36
22507: PPUSH
22508: LD_VAR 0 3
22512: PPUSH
22513: LD_INT 1
22515: PPUSH
22516: CALL_OW 324
// end ; 6 :
22520: GO 23530
22522: LD_INT 6
22524: DOUBLE
22525: EQUAL
22526: IFTRUE 22530
22528: GO 23455
22530: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22531: LD_INT 35
22533: PPUSH
22534: LD_VAR 0 3
22538: PPUSH
22539: LD_INT 1
22541: PPUSH
22542: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22546: LD_INT 45
22548: PPUSH
22549: LD_VAR 0 3
22553: PPUSH
22554: LD_INT 1
22556: PPUSH
22557: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22561: LD_INT 46
22563: PPUSH
22564: LD_VAR 0 3
22568: PPUSH
22569: LD_INT 1
22571: PPUSH
22572: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22576: LD_INT 47
22578: PPUSH
22579: LD_VAR 0 3
22583: PPUSH
22584: LD_INT 1
22586: PPUSH
22587: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22591: LD_INT 1
22593: PPUSH
22594: LD_VAR 0 3
22598: PPUSH
22599: LD_INT 1
22601: PPUSH
22602: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22606: LD_INT 2
22608: PPUSH
22609: LD_VAR 0 3
22613: PPUSH
22614: LD_INT 1
22616: PPUSH
22617: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22621: LD_INT 11
22623: PPUSH
22624: LD_VAR 0 3
22628: PPUSH
22629: LD_INT 1
22631: PPUSH
22632: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
22636: LD_INT 20
22638: PPUSH
22639: LD_VAR 0 3
22643: PPUSH
22644: LD_INT 1
22646: PPUSH
22647: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
22651: LD_INT 48
22653: PPUSH
22654: LD_VAR 0 3
22658: PPUSH
22659: LD_INT 1
22661: PPUSH
22662: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
22666: LD_INT 49
22668: PPUSH
22669: LD_VAR 0 3
22673: PPUSH
22674: LD_INT 1
22676: PPUSH
22677: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
22681: LD_INT 50
22683: PPUSH
22684: LD_VAR 0 3
22688: PPUSH
22689: LD_INT 1
22691: PPUSH
22692: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
22696: LD_INT 69
22698: PPUSH
22699: LD_VAR 0 3
22703: PPUSH
22704: LD_INT 1
22706: PPUSH
22707: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
22711: LD_INT 39
22713: PPUSH
22714: LD_VAR 0 3
22718: PPUSH
22719: LD_INT 1
22721: PPUSH
22722: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
22726: LD_INT 34
22728: PPUSH
22729: LD_VAR 0 3
22733: PPUSH
22734: LD_INT 1
22736: PPUSH
22737: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
22741: LD_INT 42
22743: PPUSH
22744: LD_VAR 0 3
22748: PPUSH
22749: LD_INT 1
22751: PPUSH
22752: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
22756: LD_INT 44
22758: PPUSH
22759: LD_VAR 0 3
22763: PPUSH
22764: LD_INT 1
22766: PPUSH
22767: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
22771: LD_INT 41
22773: PPUSH
22774: LD_VAR 0 3
22778: PPUSH
22779: LD_INT 1
22781: PPUSH
22782: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
22786: LD_INT 13
22788: PPUSH
22789: LD_VAR 0 3
22793: PPUSH
22794: LD_INT 1
22796: PPUSH
22797: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
22801: LD_INT 40
22803: PPUSH
22804: LD_VAR 0 3
22808: PPUSH
22809: LD_INT 1
22811: PPUSH
22812: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
22816: LD_INT 43
22818: PPUSH
22819: LD_VAR 0 3
22823: PPUSH
22824: LD_INT 1
22826: PPUSH
22827: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
22831: LD_INT 70
22833: PPUSH
22834: LD_VAR 0 3
22838: PPUSH
22839: LD_INT 1
22841: PPUSH
22842: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
22846: LD_INT 23
22848: PPUSH
22849: LD_VAR 0 3
22853: PPUSH
22854: LD_INT 1
22856: PPUSH
22857: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
22861: LD_INT 51
22863: PPUSH
22864: LD_VAR 0 3
22868: PPUSH
22869: LD_INT 1
22871: PPUSH
22872: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
22876: LD_INT 52
22878: PPUSH
22879: LD_VAR 0 3
22883: PPUSH
22884: LD_INT 1
22886: PPUSH
22887: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
22891: LD_INT 6
22893: PPUSH
22894: LD_VAR 0 3
22898: PPUSH
22899: LD_INT 1
22901: PPUSH
22902: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
22906: LD_INT 15
22908: PPUSH
22909: LD_VAR 0 3
22913: PPUSH
22914: LD_INT 1
22916: PPUSH
22917: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
22921: LD_INT 7
22923: PPUSH
22924: LD_VAR 0 3
22928: PPUSH
22929: LD_INT 1
22931: PPUSH
22932: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
22936: LD_INT 12
22938: PPUSH
22939: LD_VAR 0 3
22943: PPUSH
22944: LD_INT 1
22946: PPUSH
22947: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
22951: LD_INT 10
22953: PPUSH
22954: LD_VAR 0 3
22958: PPUSH
22959: LD_INT 1
22961: PPUSH
22962: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
22966: LD_INT 17
22968: PPUSH
22969: LD_VAR 0 3
22973: PPUSH
22974: LD_INT 1
22976: PPUSH
22977: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
22981: LD_INT 18
22983: PPUSH
22984: LD_VAR 0 3
22988: PPUSH
22989: LD_INT 1
22991: PPUSH
22992: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
22996: LD_INT 60
22998: PPUSH
22999: LD_VAR 0 3
23003: PPUSH
23004: LD_INT 1
23006: PPUSH
23007: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
23011: LD_INT 61
23013: PPUSH
23014: LD_VAR 0 3
23018: PPUSH
23019: LD_INT 1
23021: PPUSH
23022: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
23026: LD_INT 32
23028: PPUSH
23029: LD_VAR 0 3
23033: PPUSH
23034: LD_INT 1
23036: PPUSH
23037: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
23041: LD_INT 27
23043: PPUSH
23044: LD_VAR 0 3
23048: PPUSH
23049: LD_INT 1
23051: PPUSH
23052: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
23056: LD_INT 36
23058: PPUSH
23059: LD_VAR 0 3
23063: PPUSH
23064: LD_INT 1
23066: PPUSH
23067: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
23071: LD_INT 33
23073: PPUSH
23074: LD_VAR 0 3
23078: PPUSH
23079: LD_INT 1
23081: PPUSH
23082: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
23086: LD_INT 9
23088: PPUSH
23089: LD_VAR 0 3
23093: PPUSH
23094: LD_INT 1
23096: PPUSH
23097: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
23101: LD_INT 38
23103: PPUSH
23104: LD_VAR 0 3
23108: PPUSH
23109: LD_INT 1
23111: PPUSH
23112: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
23116: LD_INT 57
23118: PPUSH
23119: LD_VAR 0 3
23123: PPUSH
23124: LD_INT 1
23126: PPUSH
23127: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
23131: LD_INT 58
23133: PPUSH
23134: LD_VAR 0 3
23138: PPUSH
23139: LD_INT 1
23141: PPUSH
23142: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
23146: LD_INT 28
23148: PPUSH
23149: LD_VAR 0 3
23153: PPUSH
23154: LD_INT 1
23156: PPUSH
23157: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
23161: LD_INT 29
23163: PPUSH
23164: LD_VAR 0 3
23168: PPUSH
23169: LD_INT 1
23171: PPUSH
23172: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
23176: LD_INT 30
23178: PPUSH
23179: LD_VAR 0 3
23183: PPUSH
23184: LD_INT 1
23186: PPUSH
23187: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
23191: LD_INT 37
23193: PPUSH
23194: LD_VAR 0 3
23198: PPUSH
23199: LD_INT 1
23201: PPUSH
23202: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
23206: LD_INT 63
23208: PPUSH
23209: LD_VAR 0 3
23213: PPUSH
23214: LD_INT 1
23216: PPUSH
23217: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
23221: LD_INT 64
23223: PPUSH
23224: LD_VAR 0 3
23228: PPUSH
23229: LD_INT 1
23231: PPUSH
23232: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
23236: LD_INT 3
23238: PPUSH
23239: LD_VAR 0 3
23243: PPUSH
23244: LD_INT 1
23246: PPUSH
23247: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
23251: LD_INT 4
23253: PPUSH
23254: LD_VAR 0 3
23258: PPUSH
23259: LD_INT 1
23261: PPUSH
23262: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
23266: LD_INT 5
23268: PPUSH
23269: LD_VAR 0 3
23273: PPUSH
23274: LD_INT 1
23276: PPUSH
23277: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
23281: LD_INT 8
23283: PPUSH
23284: LD_VAR 0 3
23288: PPUSH
23289: LD_INT 1
23291: PPUSH
23292: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
23296: LD_INT 66
23298: PPUSH
23299: LD_VAR 0 3
23303: PPUSH
23304: LD_INT 1
23306: PPUSH
23307: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
23311: LD_INT 67
23313: PPUSH
23314: LD_VAR 0 3
23318: PPUSH
23319: LD_INT 1
23321: PPUSH
23322: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
23326: LD_INT 21
23328: PPUSH
23329: LD_VAR 0 3
23333: PPUSH
23334: LD_INT 1
23336: PPUSH
23337: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
23341: LD_INT 22
23343: PPUSH
23344: LD_VAR 0 3
23348: PPUSH
23349: LD_INT 1
23351: PPUSH
23352: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
23356: LD_INT 19
23358: PPUSH
23359: LD_VAR 0 3
23363: PPUSH
23364: LD_INT 1
23366: PPUSH
23367: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
23371: LD_INT 26
23373: PPUSH
23374: LD_VAR 0 3
23378: PPUSH
23379: LD_INT 1
23381: PPUSH
23382: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
23386: LD_INT 54
23388: PPUSH
23389: LD_VAR 0 3
23393: PPUSH
23394: LD_INT 1
23396: PPUSH
23397: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
23401: LD_INT 55
23403: PPUSH
23404: LD_VAR 0 3
23408: PPUSH
23409: LD_INT 1
23411: PPUSH
23412: CALL_OW 322
// for i = 0 to 39 do
23416: LD_ADDR_VAR 0 4
23420: PUSH
23421: DOUBLE
23422: LD_INT 0
23424: DEC
23425: ST_TO_ADDR
23426: LD_INT 39
23428: PUSH
23429: FOR_TO
23430: IFFALSE 23451
// SetRestrict ( i , side , true ) ;
23432: LD_VAR 0 4
23436: PPUSH
23437: LD_VAR 0 3
23441: PPUSH
23442: LD_INT 1
23444: PPUSH
23445: CALL_OW 324
23449: GO 23429
23451: POP
23452: POP
// end ; else
23453: GO 23530
23455: POP
// begin for i = 1 to 73 do
23456: LD_ADDR_VAR 0 4
23460: PUSH
23461: DOUBLE
23462: LD_INT 1
23464: DEC
23465: ST_TO_ADDR
23466: LD_INT 73
23468: PUSH
23469: FOR_TO
23470: IFFALSE 23491
// SetTech ( i , side , state_enabled ) ;
23472: LD_VAR 0 4
23476: PPUSH
23477: LD_VAR 0 3
23481: PPUSH
23482: LD_INT 1
23484: PPUSH
23485: CALL_OW 322
23489: GO 23469
23491: POP
23492: POP
// for i = 0 to 39 do
23493: LD_ADDR_VAR 0 4
23497: PUSH
23498: DOUBLE
23499: LD_INT 0
23501: DEC
23502: ST_TO_ADDR
23503: LD_INT 39
23505: PUSH
23506: FOR_TO
23507: IFFALSE 23528
// SetRestrict ( i , side , true ) ;
23509: LD_VAR 0 4
23513: PPUSH
23514: LD_VAR 0 3
23518: PPUSH
23519: LD_INT 1
23521: PPUSH
23522: CALL_OW 324
23526: GO 23506
23528: POP
23529: POP
// end ; end ; end ;
23530: GO 19535
23532: POP
23533: POP
// end ;
23534: LD_VAR 0 2
23538: RET
