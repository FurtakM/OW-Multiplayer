// export def_base_size , def_west_nations , def_east_nations ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , respawning_time_min , respawning_time_max , siberite_bomb_Delay ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Position_Nations ; export depot_def , breastworks_def , labs_def , factory_def , start_def , extra_oil_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function prepare_deposits ; var list , un , deposits ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
// list := GetListOfResourcesInArea ( west_side ) ^ GetListOfResourcesInArea ( east_side ) ;
   6: LD_ADDR_VAR 0 2
  10: PUSH
  11: LD_INT 8
  13: PPUSH
  14: CALL_OW 442
  18: PUSH
  19: LD_INT 9
  21: PPUSH
  22: CALL_OW 442
  26: ADD
  27: ST_TO_ADDR
// for un = 1 to ( list div 3 ) do
  28: LD_ADDR_VAR 0 3
  32: PUSH
  33: DOUBLE
  34: LD_INT 1
  36: DEC
  37: ST_TO_ADDR
  38: LD_VAR 0 2
  42: PUSH
  43: LD_INT 3
  45: DIV
  46: PUSH
  47: FOR_TO
  48: IFFALSE 94
// RemoveDepositXY ( list [ un * 3 - 2 ] , list [ un * 3 - 1 ] ) ;
  50: LD_VAR 0 2
  54: PUSH
  55: LD_VAR 0 3
  59: PUSH
  60: LD_INT 3
  62: MUL
  63: PUSH
  64: LD_INT 2
  66: MINUS
  67: ARRAY
  68: PPUSH
  69: LD_VAR 0 2
  73: PUSH
  74: LD_VAR 0 3
  78: PUSH
  79: LD_INT 3
  81: MUL
  82: PUSH
  83: LD_INT 1
  85: MINUS
  86: ARRAY
  87: PPUSH
  88: CALL_OW 63
  92: GO 47
  94: POP
  95: POP
// deposits := [ [ 40 , 49 , mat_oil ] , [ 40 , 68 , mat_oil ] , [ 9 , 3 , mat_siberit ] , [ 61 , 116 , mat_siberit ] , [ 177 , 46 , mat_oil ] , [ 185 , 71 , mat_oil ] , [ 157 , 3 , mat_siberit ] , [ 213 , 116 , mat_siberit ] ] ;
  96: LD_ADDR_VAR 0 4
 100: PUSH
 101: LD_INT 40
 103: PUSH
 104: LD_INT 49
 106: PUSH
 107: LD_INT 2
 109: PUSH
 110: EMPTY
 111: LIST
 112: LIST
 113: LIST
 114: PUSH
 115: LD_INT 40
 117: PUSH
 118: LD_INT 68
 120: PUSH
 121: LD_INT 2
 123: PUSH
 124: EMPTY
 125: LIST
 126: LIST
 127: LIST
 128: PUSH
 129: LD_INT 9
 131: PUSH
 132: LD_INT 3
 134: PUSH
 135: LD_INT 3
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: LIST
 142: PUSH
 143: LD_INT 61
 145: PUSH
 146: LD_INT 116
 148: PUSH
 149: LD_INT 3
 151: PUSH
 152: EMPTY
 153: LIST
 154: LIST
 155: LIST
 156: PUSH
 157: LD_INT 177
 159: PUSH
 160: LD_INT 46
 162: PUSH
 163: LD_INT 2
 165: PUSH
 166: EMPTY
 167: LIST
 168: LIST
 169: LIST
 170: PUSH
 171: LD_INT 185
 173: PUSH
 174: LD_INT 71
 176: PUSH
 177: LD_INT 2
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: LIST
 184: PUSH
 185: LD_INT 157
 187: PUSH
 188: LD_INT 3
 190: PUSH
 191: LD_INT 3
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: PUSH
 199: LD_INT 213
 201: PUSH
 202: LD_INT 116
 204: PUSH
 205: LD_INT 3
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: PUSH
 213: EMPTY
 214: LIST
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: ST_TO_ADDR
// for un in deposits do
 223: LD_ADDR_VAR 0 3
 227: PUSH
 228: LD_VAR 0 4
 232: PUSH
 233: FOR_IN
 234: IFFALSE 269
// CreateDepositXY ( un [ 1 ] , un [ 2 ] , un [ 3 ] ) ;
 236: LD_VAR 0 3
 240: PUSH
 241: LD_INT 1
 243: ARRAY
 244: PPUSH
 245: LD_VAR 0 3
 249: PUSH
 250: LD_INT 2
 252: ARRAY
 253: PPUSH
 254: LD_VAR 0 3
 258: PUSH
 259: LD_INT 3
 261: ARRAY
 262: PPUSH
 263: CALL_OW 62
 267: GO 233
 269: POP
 270: POP
// end ;
 271: LD_VAR 0 1
 275: RET
// function init_map ; var i ; begin
 276: LD_INT 0
 278: PPUSH
 279: PPUSH
// prepare_deposits ;
 280: CALL 0 0 0
// extra_oil_deposits_locations := [ [ 29 , 3 ] , [ 82 , 115 ] , [ 134 , 3 ] , [ 192 , 116 ] ] ;
 284: LD_ADDR_EXP 27
 288: PUSH
 289: LD_INT 29
 291: PUSH
 292: LD_INT 3
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: PUSH
 299: LD_INT 82
 301: PUSH
 302: LD_INT 115
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: PUSH
 309: LD_INT 134
 311: PUSH
 312: LD_INT 3
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: PUSH
 319: LD_INT 192
 321: PUSH
 322: LD_INT 116
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: LIST
 333: LIST
 334: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 62 , 60 ] , [ 157 , 60 ] ] ;
 335: LD_ADDR_EXP 28
 339: PUSH
 340: LD_INT 62
 342: PUSH
 343: LD_INT 60
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: PUSH
 350: LD_INT 157
 352: PUSH
 353: LD_INT 60
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: ST_TO_ADDR
// depot_def := [ [ 35 , 34 , 0 ] , [ 56 , 86 , 2 ] , [ 158 , 34 , 5 ] , [ 185 , 86 , 3 ] ] ;
 364: LD_ADDR_EXP 22
 368: PUSH
 369: LD_INT 35
 371: PUSH
 372: LD_INT 34
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: EMPTY
 379: LIST
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 56
 385: PUSH
 386: LD_INT 86
 388: PUSH
 389: LD_INT 2
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: LIST
 396: PUSH
 397: LD_INT 158
 399: PUSH
 400: LD_INT 34
 402: PUSH
 403: LD_INT 5
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: LD_INT 185
 413: PUSH
 414: LD_INT 86
 416: PUSH
 417: LD_INT 3
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: LIST
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: LIST
 429: LIST
 430: ST_TO_ADDR
// labs_def := [ [ 19 , 28 , 1 ] , [ 49 , 92 , 1 ] , [ 166 , 23 , 4 ] , [ 205 , 97 , 4 ] ] ;
 431: LD_ADDR_EXP 24
 435: PUSH
 436: LD_INT 19
 438: PUSH
 439: LD_INT 28
 441: PUSH
 442: LD_INT 1
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PUSH
 450: LD_INT 49
 452: PUSH
 453: LD_INT 92
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 166
 466: PUSH
 467: LD_INT 23
 469: PUSH
 470: LD_INT 4
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: LIST
 477: PUSH
 478: LD_INT 205
 480: PUSH
 481: LD_INT 97
 483: PUSH
 484: LD_INT 4
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: ST_TO_ADDR
// factory_def := [ [ 26 , 16 , 2 ] , [ 64 , 103 , 0 ] , [ 154 , 18 , 3 ] , [ 190 , 103 , 5 ] ] ;
 498: LD_ADDR_EXP 25
 502: PUSH
 503: LD_INT 26
 505: PUSH
 506: LD_INT 16
 508: PUSH
 509: LD_INT 2
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: LIST
 516: PUSH
 517: LD_INT 64
 519: PUSH
 520: LD_INT 103
 522: PUSH
 523: LD_INT 0
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 154
 533: PUSH
 534: LD_INT 18
 536: PUSH
 537: LD_INT 3
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_INT 190
 547: PUSH
 548: LD_INT 103
 550: PUSH
 551: LD_INT 5
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: LIST
 558: PUSH
 559: EMPTY
 560: LIST
 561: LIST
 562: LIST
 563: LIST
 564: ST_TO_ADDR
// start_def := [ [ 35 , 26 ] , [ 65 , 94 ] , [ 150 , 26 ] , [ 185 , 94 ] ] ;
 565: LD_ADDR_EXP 26
 569: PUSH
 570: LD_INT 35
 572: PUSH
 573: LD_INT 26
 575: PUSH
 576: EMPTY
 577: LIST
 578: LIST
 579: PUSH
 580: LD_INT 65
 582: PUSH
 583: LD_INT 94
 585: PUSH
 586: EMPTY
 587: LIST
 588: LIST
 589: PUSH
 590: LD_INT 150
 592: PUSH
 593: LD_INT 26
 595: PUSH
 596: EMPTY
 597: LIST
 598: LIST
 599: PUSH
 600: LD_INT 185
 602: PUSH
 603: LD_INT 94
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: ST_TO_ADDR
// breastworks_def := [ [ [ 44 , 18 , 4 ] , [ 47 , 51 , 5 ] , [ 35 , 8 , 4 ] , [ 50 , 38 , 5 ] ] , [ [ 81 , 97 , 4 ] , [ 54 , 71 , 3 ] , [ 81 , 110 , 5 ] , [ 66 , 82 , 3 ] ] , [ [ 136 , 20 , 1 ] , [ 164 , 48 , 1 ] , [ 130 , 8 , 1 ] , [ 147 , 37 , 0 ] ] , [ [ 181 , 103 , 1 ] , [ 178 , 72 , 1 ] , [ 186 , 112 , 1 ] , [ 172 , 82 , 2 ] ] ] ;
 616: LD_ADDR_EXP 23
 620: PUSH
 621: LD_INT 44
 623: PUSH
 624: LD_INT 18
 626: PUSH
 627: LD_INT 4
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: LIST
 634: PUSH
 635: LD_INT 47
 637: PUSH
 638: LD_INT 51
 640: PUSH
 641: LD_INT 5
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PUSH
 649: LD_INT 35
 651: PUSH
 652: LD_INT 8
 654: PUSH
 655: LD_INT 4
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: LIST
 662: PUSH
 663: LD_INT 50
 665: PUSH
 666: LD_INT 38
 668: PUSH
 669: LD_INT 5
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: LIST
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: PUSH
 683: LD_INT 81
 685: PUSH
 686: LD_INT 97
 688: PUSH
 689: LD_INT 4
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: PUSH
 697: LD_INT 54
 699: PUSH
 700: LD_INT 71
 702: PUSH
 703: LD_INT 3
 705: PUSH
 706: EMPTY
 707: LIST
 708: LIST
 709: LIST
 710: PUSH
 711: LD_INT 81
 713: PUSH
 714: LD_INT 110
 716: PUSH
 717: LD_INT 5
 719: PUSH
 720: EMPTY
 721: LIST
 722: LIST
 723: LIST
 724: PUSH
 725: LD_INT 66
 727: PUSH
 728: LD_INT 82
 730: PUSH
 731: LD_INT 3
 733: PUSH
 734: EMPTY
 735: LIST
 736: LIST
 737: LIST
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: LIST
 743: LIST
 744: PUSH
 745: LD_INT 136
 747: PUSH
 748: LD_INT 20
 750: PUSH
 751: LD_INT 1
 753: PUSH
 754: EMPTY
 755: LIST
 756: LIST
 757: LIST
 758: PUSH
 759: LD_INT 164
 761: PUSH
 762: LD_INT 48
 764: PUSH
 765: LD_INT 1
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: LIST
 772: PUSH
 773: LD_INT 130
 775: PUSH
 776: LD_INT 8
 778: PUSH
 779: LD_INT 1
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PUSH
 787: LD_INT 147
 789: PUSH
 790: LD_INT 37
 792: PUSH
 793: LD_INT 0
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: LIST
 800: PUSH
 801: EMPTY
 802: LIST
 803: LIST
 804: LIST
 805: LIST
 806: PUSH
 807: LD_INT 181
 809: PUSH
 810: LD_INT 103
 812: PUSH
 813: LD_INT 1
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: LIST
 820: PUSH
 821: LD_INT 178
 823: PUSH
 824: LD_INT 72
 826: PUSH
 827: LD_INT 1
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: LIST
 834: PUSH
 835: LD_INT 186
 837: PUSH
 838: LD_INT 112
 840: PUSH
 841: LD_INT 1
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: LIST
 848: PUSH
 849: LD_INT 172
 851: PUSH
 852: LD_INT 82
 854: PUSH
 855: LD_INT 2
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: LIST
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: LIST
 873: LIST
 874: ST_TO_ADDR
// if def_extra_oil_deposits then
 875: LD_EXP 56
 879: IFFALSE 923
// for i in extra_oil_deposits_locations do
 881: LD_ADDR_VAR 0 2
 885: PUSH
 886: LD_EXP 27
 890: PUSH
 891: FOR_IN
 892: IFFALSE 921
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
 894: LD_VAR 0 2
 898: PUSH
 899: LD_INT 1
 901: ARRAY
 902: PPUSH
 903: LD_VAR 0 2
 907: PUSH
 908: LD_INT 2
 910: ARRAY
 911: PPUSH
 912: LD_INT 2
 914: PPUSH
 915: CALL_OW 62
 919: GO 891
 921: POP
 922: POP
// if def_extra_sib_deposits then
 923: LD_EXP 57
 927: IFFALSE 971
// for i in extra_sib_deposits_locations do
 929: LD_ADDR_VAR 0 2
 933: PUSH
 934: LD_EXP 28
 938: PUSH
 939: FOR_IN
 940: IFFALSE 969
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 2
 958: ARRAY
 959: PPUSH
 960: LD_INT 3
 962: PPUSH
 963: CALL_OW 62
 967: GO 939
 969: POP
 970: POP
// end ;
 971: LD_VAR 0 1
 975: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
 976: LD_INT 0
 978: PPUSH
 979: PPUSH
 980: PPUSH
 981: PPUSH
 982: PPUSH
 983: PPUSH
 984: PPUSH
 985: PPUSH
 986: PPUSH
// if Multiplayer then
 987: LD_OWVAR 4
 991: IFFALSE 1055
// begin Game_Type = mp_game_type ;
 993: LD_ADDR_EXP 49
 997: PUSH
 998: LD_OWVAR 6
1002: ST_TO_ADDR
// Your_Side := mp_player_side ;
1003: LD_ADDR_OWVAR 2
1007: PUSH
1008: LD_OWVAR 7
1012: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
1013: LD_ADDR_EXP 18
1017: PUSH
1018: LD_OWVAR 17
1022: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
1023: LD_ADDR_EXP 16
1027: PUSH
1028: LD_OWVAR 15
1032: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
1033: LD_ADDR_EXP 19
1037: PUSH
1038: LD_OWVAR 16
1042: ST_TO_ADDR
// Teams = mp_teams ;
1043: LD_ADDR_EXP 17
1047: PUSH
1048: LD_OWVAR 12
1052: ST_TO_ADDR
// end else
1053: GO 1195
// begin Game_Type = 12 ;
1055: LD_ADDR_EXP 49
1059: PUSH
1060: LD_INT 12
1062: ST_TO_ADDR
// Your_Side = 4 ;
1063: LD_ADDR_OWVAR 2
1067: PUSH
1068: LD_INT 4
1070: ST_TO_ADDR
// Side_Positions = [ 1 , 0 , 0 , 0 , 0 , 0 , 0 , 3 ] ;
1071: LD_ADDR_EXP 18
1075: PUSH
1076: LD_INT 1
1078: PUSH
1079: LD_INT 0
1081: PUSH
1082: LD_INT 0
1084: PUSH
1085: LD_INT 0
1087: PUSH
1088: LD_INT 0
1090: PUSH
1091: LD_INT 0
1093: PUSH
1094: LD_INT 0
1096: PUSH
1097: LD_INT 3
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: LIST
1106: LIST
1107: LIST
1108: LIST
1109: ST_TO_ADDR
// Side_Teams = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
1110: LD_ADDR_EXP 16
1114: PUSH
1115: LD_INT 0
1117: PUSH
1118: LD_INT 0
1120: PUSH
1121: LD_INT 0
1123: PUSH
1124: LD_INT 0
1126: PUSH
1127: LD_INT 0
1129: PUSH
1130: LD_INT 0
1132: PUSH
1133: LD_INT 0
1135: PUSH
1136: LD_INT 0
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: LIST
1148: ST_TO_ADDR
// Side_Nations = [ 3 , 0 , 0 , 0 , 0 , 0 , 0 , 1 ] ;
1149: LD_ADDR_EXP 19
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: LD_INT 0
1159: PUSH
1160: LD_INT 0
1162: PUSH
1163: LD_INT 0
1165: PUSH
1166: LD_INT 0
1168: PUSH
1169: LD_INT 0
1171: PUSH
1172: LD_INT 0
1174: PUSH
1175: LD_INT 1
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: LIST
1186: LIST
1187: ST_TO_ADDR
// Teams = [ ] ;
1188: LD_ADDR_EXP 17
1192: PUSH
1193: EMPTY
1194: ST_TO_ADDR
// end ; for i := 1 to 8 do
1195: LD_ADDR_VAR 0 8
1199: PUSH
1200: DOUBLE
1201: LD_INT 1
1203: DEC
1204: ST_TO_ADDR
1205: LD_INT 8
1207: PUSH
1208: FOR_TO
1209: IFFALSE 1296
// if Multiplayer_GetPlayerIsSpec ( i ) then
1211: LD_VAR 0 8
1215: PPUSH
1216: CALL_OW 530
1220: IFFALSE 1294
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
1222: LD_ADDR_EXP 18
1226: PUSH
1227: LD_EXP 18
1231: PPUSH
1232: LD_VAR 0 8
1236: PPUSH
1237: LD_INT 0
1239: PPUSH
1240: CALL_OW 1
1244: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
1245: LD_ADDR_EXP 17
1249: PUSH
1250: LD_EXP 17
1254: PPUSH
1255: LD_EXP 16
1259: PUSH
1260: LD_VAR 0 8
1264: ARRAY
1265: PPUSH
1266: LD_EXP 17
1270: PUSH
1271: LD_EXP 16
1275: PUSH
1276: LD_VAR 0 8
1280: ARRAY
1281: ARRAY
1282: PUSH
1283: LD_VAR 0 8
1287: DIFF
1288: PPUSH
1289: CALL_OW 1
1293: ST_TO_ADDR
// end ;
1294: GO 1208
1296: POP
1297: POP
// if Multiplayer then
1298: LD_OWVAR 4
1302: IFFALSE 1527
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
1304: LD_ADDR_EXP 51
1308: PUSH
1309: LD_INT 0
1311: PPUSH
1312: CALL_OW 426
1316: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
1317: LD_ADDR_EXP 52
1321: PUSH
1322: LD_INT 1
1324: PPUSH
1325: CALL_OW 426
1329: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
1330: LD_ADDR_EXP 53
1334: PUSH
1335: LD_INT 2
1337: PPUSH
1338: CALL_OW 426
1342: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
1343: LD_ADDR_EXP 54
1347: PUSH
1348: LD_INT 3
1350: PPUSH
1351: CALL_OW 426
1355: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
1356: LD_ADDR_EXP 55
1360: PUSH
1361: LD_INT 4
1363: PPUSH
1364: CALL_OW 426
1368: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
1369: LD_ADDR_EXP 56
1373: PUSH
1374: LD_INT 5
1376: PPUSH
1377: CALL_OW 426
1381: ST_TO_ADDR
// def_extra_sib_deposits = GetMultiplayerSetting ( 6 ) ;
1382: LD_ADDR_EXP 57
1386: PUSH
1387: LD_INT 6
1389: PPUSH
1390: CALL_OW 426
1394: ST_TO_ADDR
// def_base_size = GetMultiplayerSetting ( 7 ) ;
1395: LD_ADDR_EXP 1
1399: PUSH
1400: LD_INT 7
1402: PPUSH
1403: CALL_OW 426
1407: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
1408: LD_ADDR_EXP 58
1412: PUSH
1413: LD_INT 10
1415: PPUSH
1416: CALL_OW 426
1420: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
1421: LD_ADDR_EXP 59
1425: PUSH
1426: LD_INT 11
1428: PPUSH
1429: CALL_OW 426
1433: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
1434: LD_ADDR_EXP 60
1438: PUSH
1439: LD_INT 12
1441: PPUSH
1442: CALL_OW 426
1446: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
1447: LD_ADDR_EXP 62
1451: PUSH
1452: LD_INT 13
1454: PPUSH
1455: CALL_OW 426
1459: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
1460: LD_ADDR_EXP 61
1464: PUSH
1465: LD_INT 14
1467: PPUSH
1468: CALL_OW 426
1472: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
1473: LD_ADDR_EXP 63
1477: PUSH
1478: LD_INT 15
1480: PPUSH
1481: CALL_OW 426
1485: ST_TO_ADDR
// def_west_nations = GetMultiplayerSetting ( 21 ) ;
1486: LD_ADDR_EXP 2
1490: PUSH
1491: LD_INT 21
1493: PPUSH
1494: CALL_OW 426
1498: ST_TO_ADDR
// def_east_nations = GetMultiplayerSetting ( 22 ) ;
1499: LD_ADDR_EXP 3
1503: PUSH
1504: LD_INT 22
1506: PPUSH
1507: CALL_OW 426
1511: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 23 ) ;
1512: LD_ADDR_VAR 0 9
1516: PUSH
1517: LD_INT 23
1519: PPUSH
1520: CALL_OW 426
1524: ST_TO_ADDR
// end else
1525: GO 1667
// begin randomize ;
1527: CALL_OW 10
// def_base_level = 3 ;
1531: LD_ADDR_EXP 51
1535: PUSH
1536: LD_INT 3
1538: ST_TO_ADDR
// def_amount_of_people = 1 ;
1539: LD_ADDR_EXP 52
1543: PUSH
1544: LD_INT 1
1546: ST_TO_ADDR
// def_skill_level = 1 ;
1547: LD_ADDR_EXP 53
1551: PUSH
1552: LD_INT 1
1554: ST_TO_ADDR
// def_starting_resources = 2 ;
1555: LD_ADDR_EXP 54
1559: PUSH
1560: LD_INT 2
1562: ST_TO_ADDR
// def_shipments_density = 1 ;
1563: LD_ADDR_EXP 55
1567: PUSH
1568: LD_INT 1
1570: ST_TO_ADDR
// def_extra_oil_deposits = 1 ;
1571: LD_ADDR_EXP 56
1575: PUSH
1576: LD_INT 1
1578: ST_TO_ADDR
// def_extra_sib_deposits = 1 ;
1579: LD_ADDR_EXP 57
1583: PUSH
1584: LD_INT 1
1586: ST_TO_ADDR
// def_base_size = 2 ;
1587: LD_ADDR_EXP 1
1591: PUSH
1592: LD_INT 2
1594: ST_TO_ADDR
// def_shared_vision = 1 ;
1595: LD_ADDR_EXP 58
1599: PUSH
1600: LD_INT 1
1602: ST_TO_ADDR
// def_morale_flags = 1 ;
1603: LD_ADDR_EXP 59
1607: PUSH
1608: LD_INT 1
1610: ST_TO_ADDR
// def_siberite_detection = 1 ;
1611: LD_ADDR_EXP 60
1615: PUSH
1616: LD_INT 1
1618: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
1619: LD_ADDR_EXP 62
1623: PUSH
1624: LD_INT 3
1626: ST_TO_ADDR
// def_people_respawning = 2 ;
1627: LD_ADDR_EXP 61
1631: PUSH
1632: LD_INT 2
1634: ST_TO_ADDR
// def_siberite_bomb = 0 ;
1635: LD_ADDR_EXP 63
1639: PUSH
1640: LD_INT 0
1642: ST_TO_ADDR
// def_west_nations = 0 ;
1643: LD_ADDR_EXP 2
1647: PUSH
1648: LD_INT 0
1650: ST_TO_ADDR
// def_east_nations = 2 ;
1651: LD_ADDR_EXP 3
1655: PUSH
1656: LD_INT 2
1658: ST_TO_ADDR
// tech_level = 4 ;
1659: LD_ADDR_VAR 0 9
1663: PUSH
1664: LD_INT 4
1666: ST_TO_ADDR
// end ; InitGameRules ;
1667: CALL 15219 0 0
// if def_game_rules = 0 then
1671: LD_EXP 50
1675: PUSH
1676: LD_INT 0
1678: EQUAL
1679: IFFALSE 1706
// begin if isSGUI then
1681: LD_OWVAR 83
1685: IFFALSE 1693
// setMpTechs ( ) else
1687: CALL 18669 0 0
1691: GO 1706
// begin SetMpTechLevel ( tech_level + 1 ) ;
1693: LD_VAR 0 9
1697: PUSH
1698: LD_INT 1
1700: PLUS
1701: PPUSH
1702: CALL 18816 0 1
// end ; end ; if not def_base_level then
1706: LD_EXP 51
1710: NOT
1711: IFFALSE 1721
// def_base_size := 0 ;
1713: LD_ADDR_EXP 1
1717: PUSH
1718: LD_INT 0
1720: ST_TO_ADDR
// is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1721: LD_ADDR_EXP 4
1725: PUSH
1726: LD_INT 0
1728: PUSH
1729: LD_INT 1
1731: PUSH
1732: LD_INT 1
1734: PUSH
1735: LD_INT 1
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: PUSH
1744: LD_EXP 51
1748: PUSH
1749: LD_INT 1
1751: PLUS
1752: ARRAY
1753: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
1754: LD_ADDR_EXP 5
1758: PUSH
1759: LD_INT 0
1761: PUSH
1762: LD_INT 0
1764: PUSH
1765: LD_INT 2
1767: PUSH
1768: LD_INT 4
1770: PUSH
1771: EMPTY
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: PUSH
1777: LD_EXP 51
1781: PUSH
1782: LD_INT 1
1784: PLUS
1785: ARRAY
1786: ST_TO_ADDR
// number_of_people = [ 5 , 7 , 9 , 11 ] [ def_amount_of_people + 1 ] ;
1787: LD_ADDR_EXP 6
1791: PUSH
1792: LD_INT 5
1794: PUSH
1795: LD_INT 7
1797: PUSH
1798: LD_INT 9
1800: PUSH
1801: LD_INT 11
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: PUSH
1810: LD_EXP 52
1814: PUSH
1815: LD_INT 1
1817: PLUS
1818: ARRAY
1819: ST_TO_ADDR
// skill_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1820: LD_ADDR_EXP 7
1824: PUSH
1825: LD_INT 2
1827: PUSH
1828: LD_INT 3
1830: PUSH
1831: LD_INT 4
1833: PUSH
1834: LD_INT 5
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: LIST
1841: LIST
1842: PUSH
1843: LD_EXP 53
1847: PUSH
1848: LD_INT 1
1850: PLUS
1851: ARRAY
1852: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1853: LD_ADDR_EXP 9
1857: PUSH
1858: LD_INT 0
1860: PUSH
1861: LD_INT 0
1863: PUSH
1864: LD_INT 0
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: LIST
1871: PUSH
1872: LD_INT 30
1874: PUSH
1875: LD_INT 0
1877: PUSH
1878: LD_INT 0
1880: PUSH
1881: EMPTY
1882: LIST
1883: LIST
1884: LIST
1885: PUSH
1886: LD_INT 50
1888: PUSH
1889: LD_INT 20
1891: PUSH
1892: LD_INT 0
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: LIST
1899: PUSH
1900: LD_INT 80
1902: PUSH
1903: LD_INT 40
1905: PUSH
1906: LD_INT 20
1908: PUSH
1909: EMPTY
1910: LIST
1911: LIST
1912: LIST
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: PUSH
1920: LD_EXP 54
1924: PUSH
1925: LD_INT 1
1927: PLUS
1928: ARRAY
1929: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1930: LD_ADDR_EXP 8
1934: PUSH
1935: LD_INT 10
1937: PUSH
1938: EMPTY
1939: LIST
1940: PUSH
1941: LD_INT 7
1943: PUSH
1944: LD_INT 14
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: PUSH
1951: LD_INT 6
1953: PUSH
1954: LD_INT 12
1956: PUSH
1957: LD_INT 18
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: LIST
1964: PUSH
1965: LD_INT 5
1967: PUSH
1968: LD_INT 10
1970: PUSH
1971: LD_INT 15
1973: PUSH
1974: LD_INT 20
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: PUSH
1989: LD_EXP 54
1993: PUSH
1994: LD_INT 1
1996: PLUS
1997: ARRAY
1998: ST_TO_ADDR
// shipments_density = [ 18 , 25 , 35 ] [ def_shipments_density + 1 ] ;
1999: LD_ADDR_EXP 10
2003: PUSH
2004: LD_INT 18
2006: PUSH
2007: LD_INT 25
2009: PUSH
2010: LD_INT 35
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: LIST
2017: PUSH
2018: LD_EXP 55
2022: PUSH
2023: LD_INT 1
2025: PLUS
2026: ARRAY
2027: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
2028: LD_ADDR_EXP 12
2032: PUSH
2033: LD_INT 0
2035: PUSH
2036: LD_INT 3
2038: PUSH
2039: LD_INT 6
2041: PUSH
2042: LD_INT 9
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: PUSH
2051: LD_EXP 62
2055: PUSH
2056: LD_INT 1
2058: PLUS
2059: ARRAY
2060: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
2061: LD_ADDR_EXP 13
2065: PUSH
2066: LD_INT 0
2068: PUSH
2069: LD_INT 8400
2071: PUSH
2072: LD_INT 1750
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: LIST
2079: PUSH
2080: LD_EXP 61
2084: PUSH
2085: LD_INT 1
2087: PLUS
2088: ARRAY
2089: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
2090: LD_ADDR_EXP 14
2094: PUSH
2095: LD_INT 0
2097: PUSH
2098: LD_INT 21000
2100: PUSH
2101: LD_INT 4200
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: LIST
2108: PUSH
2109: LD_EXP 61
2113: PUSH
2114: LD_INT 1
2116: PLUS
2117: ARRAY
2118: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
2119: LD_ADDR_EXP 15
2123: PUSH
2124: LD_INT 0
2126: PUSH
2127: LD_INT 1
2129: PUSH
2130: LD_INT 63000
2132: PUSH
2133: LD_INT 126000
2135: PUSH
2136: LD_INT 189000
2138: PUSH
2139: LD_INT 252000
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: PUSH
2150: LD_EXP 63
2154: PUSH
2155: LD_INT 1
2157: PLUS
2158: ARRAY
2159: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
2160: LD_ADDR_EXP 11
2164: PUSH
2165: LD_INT 1
2167: NEG
2168: PUSH
2169: LD_INT 350
2171: PUSH
2172: LD_INT 700
2174: PUSH
2175: LD_INT 1400
2177: PUSH
2178: LD_INT 0
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: LIST
2187: PUSH
2188: LD_EXP 59
2192: PUSH
2193: LD_INT 1
2195: PLUS
2196: ARRAY
2197: ST_TO_ADDR
// battle_flags_id = [ ] ;
2198: LD_ADDR_EXP 29
2202: PUSH
2203: EMPTY
2204: ST_TO_ADDR
// if not def_builduptime then
2205: LD_EXP 64
2209: NOT
2210: IFFALSE 2215
// disable ( 600 ) ;
2212: LD_INT 600
2214: DISABLE_MARKED
// end ;
2215: LD_VAR 0 1
2219: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2220: LD_INT 0
2222: PPUSH
2223: PPUSH
2224: PPUSH
// Team_Game := Side_Teams [ your_side ] ;
2225: LD_ADDR_EXP 20
2229: PUSH
2230: LD_EXP 16
2234: PUSH
2235: LD_OWVAR 2
2239: ARRAY
2240: ST_TO_ADDR
// if not Team_Game then
2241: LD_EXP 20
2245: NOT
2246: IFFALSE 2344
// begin for i = 1 to 8 do
2248: LD_ADDR_VAR 0 2
2252: PUSH
2253: DOUBLE
2254: LD_INT 1
2256: DEC
2257: ST_TO_ADDR
2258: LD_INT 8
2260: PUSH
2261: FOR_TO
2262: IFFALSE 2340
// for j = 1 to 8 do
2264: LD_ADDR_VAR 0 3
2268: PUSH
2269: DOUBLE
2270: LD_INT 1
2272: DEC
2273: ST_TO_ADDR
2274: LD_INT 8
2276: PUSH
2277: FOR_TO
2278: IFFALSE 2336
// if i <> j then
2280: LD_VAR 0 2
2284: PUSH
2285: LD_VAR 0 3
2289: NONEQUAL
2290: IFFALSE 2314
// SetAttitude ( i , j , att_neutral , true ) else
2292: LD_VAR 0 2
2296: PPUSH
2297: LD_VAR 0 3
2301: PPUSH
2302: LD_INT 0
2304: PPUSH
2305: LD_INT 1
2307: PPUSH
2308: CALL_OW 80
2312: GO 2334
// SetAttitude ( i , j , att_friend , true ) ;
2314: LD_VAR 0 2
2318: PPUSH
2319: LD_VAR 0 3
2323: PPUSH
2324: LD_INT 1
2326: PPUSH
2327: LD_INT 1
2329: PPUSH
2330: CALL_OW 80
2334: GO 2277
2336: POP
2337: POP
2338: GO 2261
2340: POP
2341: POP
// end else
2342: GO 2519
// begin if def_shared_vision then
2344: LD_EXP 58
2348: IFFALSE 2413
// begin for i in Teams do
2350: LD_ADDR_VAR 0 2
2354: PUSH
2355: LD_EXP 17
2359: PUSH
2360: FOR_IN
2361: IFFALSE 2411
// for j = 2 to i do
2363: LD_ADDR_VAR 0 3
2367: PUSH
2368: DOUBLE
2369: LD_INT 2
2371: DEC
2372: ST_TO_ADDR
2373: LD_VAR 0 2
2377: PUSH
2378: FOR_TO
2379: IFFALSE 2407
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2381: LD_VAR 0 2
2385: PUSH
2386: LD_VAR 0 3
2390: ARRAY
2391: PPUSH
2392: LD_VAR 0 2
2396: PUSH
2397: LD_INT 1
2399: ARRAY
2400: PPUSH
2401: CALL_OW 343
2405: GO 2378
2407: POP
2408: POP
2409: GO 2360
2411: POP
2412: POP
// end ; for i = 1 to 8 do
2413: LD_ADDR_VAR 0 2
2417: PUSH
2418: DOUBLE
2419: LD_INT 1
2421: DEC
2422: ST_TO_ADDR
2423: LD_INT 8
2425: PUSH
2426: FOR_TO
2427: IFFALSE 2517
// for j = 1 to 8 do
2429: LD_ADDR_VAR 0 3
2433: PUSH
2434: DOUBLE
2435: LD_INT 1
2437: DEC
2438: ST_TO_ADDR
2439: LD_INT 8
2441: PUSH
2442: FOR_TO
2443: IFFALSE 2513
// if Side_Teams [ i ] = Side_Teams [ j ] then
2445: LD_EXP 16
2449: PUSH
2450: LD_VAR 0 2
2454: ARRAY
2455: PUSH
2456: LD_EXP 16
2460: PUSH
2461: LD_VAR 0 3
2465: ARRAY
2466: EQUAL
2467: IFFALSE 2491
// SetAttitude ( i , j , att_friend , true ) else
2469: LD_VAR 0 2
2473: PPUSH
2474: LD_VAR 0 3
2478: PPUSH
2479: LD_INT 1
2481: PPUSH
2482: LD_INT 1
2484: PPUSH
2485: CALL_OW 80
2489: GO 2511
// SetAttitude ( i , j , att_enemy , true ) ;
2491: LD_VAR 0 2
2495: PPUSH
2496: LD_VAR 0 3
2500: PPUSH
2501: LD_INT 2
2503: PPUSH
2504: LD_INT 1
2506: PPUSH
2507: CALL_OW 80
2511: GO 2442
2513: POP
2514: POP
2515: GO 2426
2517: POP
2518: POP
// end ; end ;
2519: LD_VAR 0 1
2523: RET
// function prepare_people ( count , cl , x , y , r ) ; var i , j , un ; begin
2524: LD_INT 0
2526: PPUSH
2527: PPUSH
2528: PPUSH
2529: PPUSH
// result := [ ] ;
2530: LD_ADDR_VAR 0 6
2534: PUSH
2535: EMPTY
2536: ST_TO_ADDR
// for i := 1 to count do
2537: LD_ADDR_VAR 0 7
2541: PUSH
2542: DOUBLE
2543: LD_INT 1
2545: DEC
2546: ST_TO_ADDR
2547: LD_VAR 0 1
2551: PUSH
2552: FOR_TO
2553: IFFALSE 2949
// begin uc_direction := Rand ( 0 , 5 ) ;
2555: LD_ADDR_OWVAR 24
2559: PUSH
2560: LD_INT 0
2562: PPUSH
2563: LD_INT 5
2565: PPUSH
2566: CALL_OW 12
2570: ST_TO_ADDR
// if commander then
2571: LD_LOC 1
2575: IFFALSE 2684
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2577: LD_ADDR_OWVAR 26
2581: PUSH
2582: LD_OWVAR 19
2586: PUSH
2587: LD_OWVAR 20
2591: ARRAY
2592: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2593: LD_INT 1
2595: PPUSH
2596: LD_INT 2
2598: PPUSH
2599: CALL_OW 12
2603: PPUSH
2604: LD_VAR 0 2
2608: PPUSH
2609: LD_EXP 7
2613: PUSH
2614: LD_INT 2
2616: PLUS
2617: PPUSH
2618: CALL_OW 380
// hc_importance := 105 ;
2622: LD_ADDR_OWVAR 32
2626: PUSH
2627: LD_INT 105
2629: ST_TO_ADDR
// commander := false ;
2630: LD_ADDR_LOC 1
2634: PUSH
2635: LD_INT 0
2637: ST_TO_ADDR
// if Multiplayer then
2638: LD_OWVAR 4
2642: IFFALSE 2682
// begin hc_gallery := MULTIAVATARS ;
2644: LD_ADDR_OWVAR 33
2648: PUSH
2649: LD_STRING MULTIAVATARS
2651: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2652: LD_ADDR_OWVAR 34
2656: PUSH
2657: LD_OWVAR 20
2661: PPUSH
2662: CALL_OW 525
2666: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2667: LD_ADDR_OWVAR 27
2671: PUSH
2672: LD_OWVAR 20
2676: PPUSH
2677: CALL_OW 526
2681: ST_TO_ADDR
// end ; end else
2682: GO 2747
// begin hc_name :=  ;
2684: LD_ADDR_OWVAR 26
2688: PUSH
2689: LD_STRING 
2691: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2692: LD_INT 1
2694: PPUSH
2695: LD_INT 2
2697: PPUSH
2698: CALL_OW 12
2702: PPUSH
2703: LD_VAR 0 2
2707: PPUSH
2708: LD_EXP 7
2712: PPUSH
2713: CALL_OW 380
// hc_importance := 0 ;
2717: LD_ADDR_OWVAR 32
2721: PUSH
2722: LD_INT 0
2724: ST_TO_ADDR
// if Multiplayer then
2725: LD_OWVAR 4
2729: IFFALSE 2747
// begin hc_gallery :=  ;
2731: LD_ADDR_OWVAR 33
2735: PUSH
2736: LD_STRING 
2738: ST_TO_ADDR
// hc_face_number := 0 ;
2739: LD_ADDR_OWVAR 34
2743: PUSH
2744: LD_INT 0
2746: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2747: LD_ADDR_VAR 0 9
2751: PUSH
2752: CALL_OW 44
2756: ST_TO_ADDR
// if global_defined then
2757: LD_LOC 3
2761: IFFALSE 2901
// begin if ( cl = class_soldier ) then
2763: LD_VAR 0 2
2767: PUSH
2768: LD_INT 1
2770: EQUAL
2771: IFFALSE 2791
// j := i + soldiers_created else
2773: LD_ADDR_VAR 0 8
2777: PUSH
2778: LD_VAR 0 7
2782: PUSH
2783: LD_LOC 4
2787: PLUS
2788: ST_TO_ADDR
2789: GO 2801
// j := i ;
2791: LD_ADDR_VAR 0 8
2795: PUSH
2796: LD_VAR 0 7
2800: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2801: LD_LOC 2
2805: PUSH
2806: LD_VAR 0 2
2810: ARRAY
2811: PUSH
2812: LD_VAR 0 8
2816: ARRAY
2817: PPUSH
2818: LD_VAR 0 9
2822: PPUSH
2823: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2827: LD_VAR 0 9
2831: PPUSH
2832: LD_INT 2
2834: PPUSH
2835: LD_LOC 2
2839: PUSH
2840: LD_VAR 0 2
2844: ARRAY
2845: PUSH
2846: LD_VAR 0 8
2850: ARRAY
2851: PPUSH
2852: LD_INT 2
2854: PPUSH
2855: CALL_OW 260
2859: PPUSH
2860: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2864: LD_VAR 0 9
2868: PPUSH
2869: LD_INT 1
2871: PPUSH
2872: LD_LOC 2
2876: PUSH
2877: LD_VAR 0 2
2881: ARRAY
2882: PUSH
2883: LD_VAR 0 8
2887: ARRAY
2888: PPUSH
2889: LD_INT 1
2891: PPUSH
2892: CALL_OW 260
2896: PPUSH
2897: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2901: LD_VAR 0 9
2905: PPUSH
2906: LD_VAR 0 3
2910: PPUSH
2911: LD_VAR 0 4
2915: PPUSH
2916: LD_VAR 0 5
2920: PPUSH
2921: LD_INT 0
2923: PPUSH
2924: CALL_OW 50
// result := result ^ [ un ] ;
2928: LD_ADDR_VAR 0 6
2932: PUSH
2933: LD_VAR 0 6
2937: PUSH
2938: LD_VAR 0 9
2942: PUSH
2943: EMPTY
2944: LIST
2945: ADD
2946: ST_TO_ADDR
// end ;
2947: GO 2552
2949: POP
2950: POP
// if not global_defined then
2951: LD_LOC 3
2955: NOT
2956: IFFALSE 3034
// if ( global_units >= cl ) then
2958: LD_LOC 2
2962: PUSH
2963: LD_VAR 0 2
2967: GREATEREQUAL
2968: IFFALSE 3009
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2970: LD_ADDR_LOC 2
2974: PUSH
2975: LD_LOC 2
2979: PPUSH
2980: LD_VAR 0 2
2984: PPUSH
2985: LD_LOC 2
2989: PUSH
2990: LD_VAR 0 2
2994: ARRAY
2995: PUSH
2996: LD_VAR 0 6
3000: ADD
3001: PPUSH
3002: CALL_OW 1
3006: ST_TO_ADDR
3007: GO 3034
// global_units := Replace ( global_units , cl , result ) ;
3009: LD_ADDR_LOC 2
3013: PUSH
3014: LD_LOC 2
3018: PPUSH
3019: LD_VAR 0 2
3023: PPUSH
3024: LD_VAR 0 6
3028: PPUSH
3029: CALL_OW 1
3033: ST_TO_ADDR
// end ;
3034: LD_VAR 0 6
3038: RET
// function prepare_side ( side , pos , nation ) ; var x , y , dir , i , r , sol , br , dep ; begin
3039: LD_INT 0
3041: PPUSH
3042: PPUSH
3043: PPUSH
3044: PPUSH
3045: PPUSH
3046: PPUSH
3047: PPUSH
3048: PPUSH
3049: PPUSH
// uc_nation := nation ;
3050: LD_ADDR_OWVAR 21
3054: PUSH
3055: LD_VAR 0 3
3059: ST_TO_ADDR
// uc_side := side ;
3060: LD_ADDR_OWVAR 20
3064: PUSH
3065: LD_VAR 0 1
3069: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3070: LD_ADDR_VAR 0 5
3074: PUSH
3075: LD_EXP 22
3079: PUSH
3080: LD_VAR 0 2
3084: ARRAY
3085: PUSH
3086: LD_INT 1
3088: ARRAY
3089: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3090: LD_ADDR_VAR 0 6
3094: PUSH
3095: LD_EXP 22
3099: PUSH
3100: LD_VAR 0 2
3104: ARRAY
3105: PUSH
3106: LD_INT 2
3108: ARRAY
3109: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3110: LD_ADDR_VAR 0 7
3114: PUSH
3115: LD_EXP 22
3119: PUSH
3120: LD_VAR 0 2
3124: ARRAY
3125: PUSH
3126: LD_INT 3
3128: ARRAY
3129: ST_TO_ADDR
// if is_depot then
3130: LD_EXP 4
3134: IFFALSE 3267
// begin bc_type = b_depot ;
3136: LD_ADDR_OWVAR 42
3140: PUSH
3141: LD_INT 0
3143: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3144: LD_ADDR_VAR 0 12
3148: PUSH
3149: LD_VAR 0 5
3153: PPUSH
3154: LD_VAR 0 6
3158: PPUSH
3159: LD_VAR 0 7
3163: PPUSH
3164: CALL_OW 47
3168: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3169: LD_VAR 0 12
3173: PPUSH
3174: LD_STRING @
3176: PUSH
3177: LD_VAR 0 1
3181: STR
3182: PPUSH
3183: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3187: LD_VAR 0 12
3191: PPUSH
3192: CALL_OW 274
3196: PPUSH
3197: LD_INT 1
3199: PPUSH
3200: LD_EXP 9
3204: PUSH
3205: LD_INT 1
3207: ARRAY
3208: PPUSH
3209: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3213: LD_VAR 0 12
3217: PPUSH
3218: CALL_OW 274
3222: PPUSH
3223: LD_INT 2
3225: PPUSH
3226: LD_EXP 9
3230: PUSH
3231: LD_INT 2
3233: ARRAY
3234: PPUSH
3235: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3239: LD_VAR 0 12
3243: PPUSH
3244: CALL_OW 274
3248: PPUSH
3249: LD_INT 3
3251: PPUSH
3252: LD_EXP 9
3256: PUSH
3257: LD_INT 3
3259: ARRAY
3260: PPUSH
3261: CALL_OW 277
// end else
3265: GO 3411
// begin for i := 1 to 3 do
3267: LD_ADDR_VAR 0 8
3271: PUSH
3272: DOUBLE
3273: LD_INT 1
3275: DEC
3276: ST_TO_ADDR
3277: LD_INT 3
3279: PUSH
3280: FOR_TO
3281: IFFALSE 3409
// begin r := starting_resources [ i ] ;
3283: LD_ADDR_VAR 0 9
3287: PUSH
3288: LD_EXP 9
3292: PUSH
3293: LD_VAR 0 8
3297: ARRAY
3298: ST_TO_ADDR
// while r >= 10 do
3299: LD_VAR 0 9
3303: PUSH
3304: LD_INT 10
3306: GREATEREQUAL
3307: IFFALSE 3407
// if r > 50 then
3309: LD_VAR 0 9
3313: PUSH
3314: LD_INT 50
3316: GREATER
3317: IFFALSE 3363
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3319: LD_VAR 0 8
3323: PPUSH
3324: LD_INT 5
3326: PPUSH
3327: LD_VAR 0 5
3331: PPUSH
3332: LD_VAR 0 6
3336: PPUSH
3337: LD_INT 4
3339: PPUSH
3340: LD_INT 0
3342: PPUSH
3343: CALL_OW 60
// r := r - 50 ;
3347: LD_ADDR_VAR 0 9
3351: PUSH
3352: LD_VAR 0 9
3356: PUSH
3357: LD_INT 50
3359: MINUS
3360: ST_TO_ADDR
// end else
3361: GO 3405
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3363: LD_VAR 0 8
3367: PPUSH
3368: LD_VAR 0 9
3372: PUSH
3373: LD_INT 10
3375: DIV
3376: PPUSH
3377: LD_VAR 0 5
3381: PPUSH
3382: LD_VAR 0 6
3386: PPUSH
3387: LD_INT 4
3389: PPUSH
3390: LD_INT 0
3392: PPUSH
3393: CALL_OW 60
// r := 0 ;
3397: LD_ADDR_VAR 0 9
3401: PUSH
3402: LD_INT 0
3404: ST_TO_ADDR
// end ;
3405: GO 3299
// end ;
3407: GO 3280
3409: POP
3410: POP
// end ; if def_base_size > 0 then
3411: LD_EXP 1
3415: PUSH
3416: LD_INT 0
3418: GREATER
3419: IFFALSE 3494
// begin bc_kind1 := b_lab_basic ;
3421: LD_ADDR_OWVAR 44
3425: PUSH
3426: LD_INT 9
3428: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
3429: LD_ADDR_OWVAR 45
3433: PUSH
3434: LD_INT 9
3436: ST_TO_ADDR
// bc_type := b_lab ;
3437: LD_ADDR_OWVAR 42
3441: PUSH
3442: LD_INT 6
3444: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( labs_def [ pos ] [ 1 ] , labs_def [ pos ] [ 2 ] , labs_def [ pos ] [ 3 ] ) ;
3445: LD_EXP 24
3449: PUSH
3450: LD_VAR 0 2
3454: ARRAY
3455: PUSH
3456: LD_INT 1
3458: ARRAY
3459: PPUSH
3460: LD_EXP 24
3464: PUSH
3465: LD_VAR 0 2
3469: ARRAY
3470: PUSH
3471: LD_INT 2
3473: ARRAY
3474: PPUSH
3475: LD_EXP 24
3479: PUSH
3480: LD_VAR 0 2
3484: ARRAY
3485: PUSH
3486: LD_INT 3
3488: ARRAY
3489: PPUSH
3490: CALL_OW 47
// end ; if def_base_size > 1 then
3494: LD_EXP 1
3498: PUSH
3499: LD_INT 1
3501: GREATER
3502: IFFALSE 3561
// begin bc_type := b_workshop ;
3504: LD_ADDR_OWVAR 42
3508: PUSH
3509: LD_INT 2
3511: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( factory_def [ pos ] [ 1 ] , factory_def [ pos ] [ 2 ] , factory_def [ pos ] [ 3 ] ) ;
3512: LD_EXP 25
3516: PUSH
3517: LD_VAR 0 2
3521: ARRAY
3522: PUSH
3523: LD_INT 1
3525: ARRAY
3526: PPUSH
3527: LD_EXP 25
3531: PUSH
3532: LD_VAR 0 2
3536: ARRAY
3537: PUSH
3538: LD_INT 2
3540: ARRAY
3541: PPUSH
3542: LD_EXP 25
3546: PUSH
3547: LD_VAR 0 2
3551: ARRAY
3552: PUSH
3553: LD_INT 3
3555: ARRAY
3556: PPUSH
3557: CALL_OW 47
// end ; for r in starting_crates do
3561: LD_ADDR_VAR 0 9
3565: PUSH
3566: LD_EXP 8
3570: PUSH
3571: FOR_IN
3572: IFFALSE 3604
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3574: LD_INT 1
3576: PPUSH
3577: LD_INT 5
3579: PPUSH
3580: LD_VAR 0 5
3584: PPUSH
3585: LD_VAR 0 6
3589: PPUSH
3590: LD_VAR 0 9
3594: PPUSH
3595: LD_INT 0
3597: PPUSH
3598: CALL_OW 60
3602: GO 3571
3604: POP
3605: POP
// if def_morale_flags then
3606: LD_EXP 59
3610: IFFALSE 3749
// begin x := start_def [ pos ] [ 1 ] ;
3612: LD_ADDR_VAR 0 5
3616: PUSH
3617: LD_EXP 26
3621: PUSH
3622: LD_VAR 0 2
3626: ARRAY
3627: PUSH
3628: LD_INT 1
3630: ARRAY
3631: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3632: LD_ADDR_VAR 0 6
3636: PUSH
3637: LD_EXP 26
3641: PUSH
3642: LD_VAR 0 2
3646: ARRAY
3647: PUSH
3648: LD_INT 2
3650: ARRAY
3651: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3652: LD_VAR 0 5
3656: PPUSH
3657: LD_VAR 0 6
3661: PPUSH
3662: LD_INT 12
3664: PPUSH
3665: LD_INT 2
3667: PPUSH
3668: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3672: LD_ADDR_EXP 29
3676: PUSH
3677: LD_EXP 29
3681: PUSH
3682: LD_VAR 0 1
3686: PPUSH
3687: LD_VAR 0 5
3691: PPUSH
3692: LD_VAR 0 6
3696: PPUSH
3697: LD_INT 1
3699: PUSH
3700: LD_INT 100
3702: PUSH
3703: EMPTY
3704: LIST
3705: LIST
3706: PUSH
3707: LD_INT 2
3709: PUSH
3710: LD_INT 50
3712: PUSH
3713: EMPTY
3714: LIST
3715: LIST
3716: PUSH
3717: LD_INT 3
3719: PUSH
3720: LD_INT 20
3722: PUSH
3723: EMPTY
3724: LIST
3725: LIST
3726: PUSH
3727: LD_INT 20
3729: PUSH
3730: LD_INT 100
3732: PUSH
3733: EMPTY
3734: LIST
3735: LIST
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: PPUSH
3743: CALL_OW 418
3747: ADD
3748: ST_TO_ADDR
// end ; commander := true ;
3749: LD_ADDR_LOC 1
3753: PUSH
3754: LD_INT 1
3756: ST_TO_ADDR
// soldiers_created := 0 ;
3757: LD_ADDR_LOC 4
3761: PUSH
3762: LD_INT 0
3764: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3765: LD_ADDR_VAR 0 8
3769: PUSH
3770: DOUBLE
3771: LD_INT 1
3773: DEC
3774: ST_TO_ADDR
3775: LD_EXP 5
3779: PUSH
3780: FOR_TO
3781: IFFALSE 4023
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3783: LD_ADDR_VAR 0 5
3787: PUSH
3788: LD_EXP 23
3792: PUSH
3793: LD_VAR 0 2
3797: ARRAY
3798: PUSH
3799: LD_VAR 0 8
3803: ARRAY
3804: PUSH
3805: LD_INT 1
3807: ARRAY
3808: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3809: LD_ADDR_VAR 0 6
3813: PUSH
3814: LD_EXP 23
3818: PUSH
3819: LD_VAR 0 2
3823: ARRAY
3824: PUSH
3825: LD_VAR 0 8
3829: ARRAY
3830: PUSH
3831: LD_INT 2
3833: ARRAY
3834: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3835: LD_ADDR_VAR 0 7
3839: PUSH
3840: LD_EXP 23
3844: PUSH
3845: LD_VAR 0 2
3849: ARRAY
3850: PUSH
3851: LD_VAR 0 8
3855: ARRAY
3856: PUSH
3857: LD_INT 3
3859: ARRAY
3860: ST_TO_ADDR
// if i < 4 then
3861: LD_VAR 0 8
3865: PUSH
3866: LD_INT 4
3868: LESS
3869: IFFALSE 3881
// bc_type := b_breastwork else
3871: LD_ADDR_OWVAR 42
3875: PUSH
3876: LD_INT 31
3878: ST_TO_ADDR
3879: GO 3889
// bc_type := b_armoury ;
3881: LD_ADDR_OWVAR 42
3885: PUSH
3886: LD_INT 4
3888: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3889: LD_ADDR_VAR 0 11
3893: PUSH
3894: LD_VAR 0 5
3898: PPUSH
3899: LD_VAR 0 6
3903: PPUSH
3904: LD_VAR 0 7
3908: PPUSH
3909: CALL_OW 47
3913: ST_TO_ADDR
// x := ShiftX ( x , dir , 2 ) ;
3914: LD_ADDR_VAR 0 5
3918: PUSH
3919: LD_VAR 0 5
3923: PPUSH
3924: LD_VAR 0 7
3928: PPUSH
3929: LD_INT 2
3931: PPUSH
3932: CALL_OW 272
3936: ST_TO_ADDR
// y := ShiftY ( y , dir , 2 ) ;
3937: LD_ADDR_VAR 0 6
3941: PUSH
3942: LD_VAR 0 6
3946: PPUSH
3947: LD_VAR 0 7
3951: PPUSH
3952: LD_INT 2
3954: PPUSH
3955: CALL_OW 273
3959: ST_TO_ADDR
// sol := prepare_people ( 1 , class_soldier , x , y , 0 ) [ 1 ] ;
3960: LD_ADDR_VAR 0 10
3964: PUSH
3965: LD_INT 1
3967: PPUSH
3968: LD_INT 1
3970: PPUSH
3971: LD_VAR 0 5
3975: PPUSH
3976: LD_VAR 0 6
3980: PPUSH
3981: LD_INT 0
3983: PPUSH
3984: CALL 2524 0 5
3988: PUSH
3989: LD_INT 1
3991: ARRAY
3992: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
3993: LD_ADDR_LOC 4
3997: PUSH
3998: LD_LOC 4
4002: PUSH
4003: LD_INT 1
4005: PLUS
4006: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
4007: LD_VAR 0 10
4011: PPUSH
4012: LD_VAR 0 11
4016: PPUSH
4017: CALL_OW 120
// end ;
4021: GO 3780
4023: POP
4024: POP
// x := start_def [ pos ] [ 1 ] ;
4025: LD_ADDR_VAR 0 5
4029: PUSH
4030: LD_EXP 26
4034: PUSH
4035: LD_VAR 0 2
4039: ARRAY
4040: PUSH
4041: LD_INT 1
4043: ARRAY
4044: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4045: LD_ADDR_VAR 0 6
4049: PUSH
4050: LD_EXP 26
4054: PUSH
4055: LD_VAR 0 2
4059: ARRAY
4060: PUSH
4061: LD_INT 2
4063: ARRAY
4064: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 ) ;
4065: LD_LOC 8
4069: PUSH
4070: LD_EXP 5
4074: MINUS
4075: PPUSH
4076: LD_INT 1
4078: PPUSH
4079: LD_VAR 0 5
4083: PPUSH
4084: LD_VAR 0 6
4088: PPUSH
4089: LD_INT 5
4091: PPUSH
4092: CALL 2524 0 5
// prepare_people ( neng , class_engineer , x , y , 5 ) ;
4096: LD_LOC 5
4100: PPUSH
4101: LD_INT 2
4103: PPUSH
4104: LD_VAR 0 5
4108: PPUSH
4109: LD_VAR 0 6
4113: PPUSH
4114: LD_INT 5
4116: PPUSH
4117: CALL 2524 0 5
// prepare_people ( nmech , class_mechanic , x , y , 5 ) ;
4121: LD_LOC 7
4125: PPUSH
4126: LD_INT 3
4128: PPUSH
4129: LD_VAR 0 5
4133: PPUSH
4134: LD_VAR 0 6
4138: PPUSH
4139: LD_INT 5
4141: PPUSH
4142: CALL 2524 0 5
// prepare_people ( nsci , class_scientistic , x , y , 5 ) ;
4146: LD_LOC 6
4150: PPUSH
4151: LD_INT 4
4153: PPUSH
4154: LD_VAR 0 5
4158: PPUSH
4159: LD_VAR 0 6
4163: PPUSH
4164: LD_INT 5
4166: PPUSH
4167: CALL 2524 0 5
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4171: LD_EXP 60
4175: PUSH
4176: LD_INT 20
4178: PPUSH
4179: LD_VAR 0 1
4183: PPUSH
4184: CALL_OW 321
4188: PUSH
4189: LD_INT 1
4191: EQUAL
4192: AND
4193: IFFALSE 4210
// SetTech ( tech_SibDet , side , state_researched ) ;
4195: LD_INT 20
4197: PPUSH
4198: LD_VAR 0 1
4202: PPUSH
4203: LD_INT 2
4205: PPUSH
4206: CALL_OW 322
// if def_siberite_bomb = 1 then
4210: LD_EXP 63
4214: PUSH
4215: LD_INT 1
4217: EQUAL
4218: IFFALSE 4252
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4220: LD_INT 25
4222: PPUSH
4223: LD_VAR 0 1
4227: PPUSH
4228: LD_INT 1
4230: PPUSH
4231: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4235: LD_INT 73
4237: PPUSH
4238: LD_VAR 0 1
4242: PPUSH
4243: LD_INT 1
4245: PPUSH
4246: CALL_OW 322
// end else
4250: GO 4282
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4252: LD_INT 25
4254: PPUSH
4255: LD_VAR 0 1
4259: PPUSH
4260: LD_INT 0
4262: PPUSH
4263: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4267: LD_INT 73
4269: PPUSH
4270: LD_VAR 0 1
4274: PPUSH
4275: LD_INT 0
4277: PPUSH
4278: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4282: LD_INT 24
4284: PPUSH
4285: LD_VAR 0 1
4289: PPUSH
4290: LD_INT 0
4292: PPUSH
4293: CALL_OW 322
// global_defined := true ;
4297: LD_ADDR_LOC 3
4301: PUSH
4302: LD_INT 1
4304: ST_TO_ADDR
// end ;
4305: LD_VAR 0 4
4309: RET
// every 0 0$1 do
4310: GO 4312
4312: DISABLE
// if ( def_siberite_bomb > 1 ) then
4313: LD_EXP 63
4317: PUSH
4318: LD_INT 1
4320: GREATER
4321: IFFALSE 4336
// begin wait ( siberite_bomb_Delay ) ;
4323: LD_EXP 15
4327: PPUSH
4328: CALL_OW 67
// EnableSibFiss ;
4332: CALL 4337 0 0
// end ;
4336: END
// function EnableSibFiss ; var i ; begin
4337: LD_INT 0
4339: PPUSH
4340: PPUSH
// for i := 1 to 8 do
4341: LD_ADDR_VAR 0 2
4345: PUSH
4346: DOUBLE
4347: LD_INT 1
4349: DEC
4350: ST_TO_ADDR
4351: LD_INT 8
4353: PUSH
4354: FOR_TO
4355: IFFALSE 4401
// if Side_Positions [ i ] then
4357: LD_EXP 18
4361: PUSH
4362: LD_VAR 0 2
4366: ARRAY
4367: IFFALSE 4399
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4369: LD_INT 25
4371: PPUSH
4372: LD_VAR 0 2
4376: PPUSH
4377: LD_INT 1
4379: PPUSH
4380: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4384: LD_INT 73
4386: PPUSH
4387: LD_VAR 0 2
4391: PPUSH
4392: LD_INT 1
4394: PPUSH
4395: CALL_OW 322
// end ;
4399: GO 4354
4401: POP
4402: POP
// end ;
4403: LD_VAR 0 1
4407: RET
// function prepare_sides ; var i , orig , pos ; begin
4408: LD_INT 0
4410: PPUSH
4411: PPUSH
4412: PPUSH
4413: PPUSH
// global_units := [ ] ;
4414: LD_ADDR_LOC 2
4418: PUSH
4419: EMPTY
4420: ST_TO_ADDR
// global_defined := false ;
4421: LD_ADDR_LOC 3
4425: PUSH
4426: LD_INT 0
4428: ST_TO_ADDR
// CountClassMembers ;
4429: CALL 4948 0 0
// for i := 1 to 8 do
4433: LD_ADDR_VAR 0 2
4437: PUSH
4438: DOUBLE
4439: LD_INT 1
4441: DEC
4442: ST_TO_ADDR
4443: LD_INT 8
4445: PUSH
4446: FOR_TO
4447: IFFALSE 4647
// if Side_Positions [ i ] then
4449: LD_EXP 18
4453: PUSH
4454: LD_VAR 0 2
4458: ARRAY
4459: IFFALSE 4645
// begin pos := Side_Positions [ i ] ;
4461: LD_ADDR_VAR 0 4
4465: PUSH
4466: LD_EXP 18
4470: PUSH
4471: LD_VAR 0 2
4475: ARRAY
4476: ST_TO_ADDR
// if Game_Type in [ 2 , 12 ] then
4477: LD_EXP 49
4481: PUSH
4482: LD_INT 2
4484: PUSH
4485: LD_INT 12
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: IN
4492: IFFALSE 4620
// begin if Game_Type = 12 then
4494: LD_EXP 49
4498: PUSH
4499: LD_INT 12
4501: EQUAL
4502: IFFALSE 4564
// begin prepare_side ( i , pos , Position_Nations [ pos ] ) ;
4504: LD_VAR 0 2
4508: PPUSH
4509: LD_VAR 0 4
4513: PPUSH
4514: LD_EXP 21
4518: PUSH
4519: LD_VAR 0 4
4523: ARRAY
4524: PPUSH
4525: CALL 3039 0 3
// prepare_side ( i , pos + 1 , Position_Nations [ pos + 1 ] ) end else
4529: LD_VAR 0 2
4533: PPUSH
4534: LD_VAR 0 4
4538: PUSH
4539: LD_INT 1
4541: PLUS
4542: PPUSH
4543: LD_EXP 21
4547: PUSH
4548: LD_VAR 0 4
4552: PUSH
4553: LD_INT 1
4555: PLUS
4556: ARRAY
4557: PPUSH
4558: CALL 3039 0 3
4562: GO 4618
// begin prepare_side ( i , pos , Side_Nations [ i ] ) ;
4564: LD_VAR 0 2
4568: PPUSH
4569: LD_VAR 0 4
4573: PPUSH
4574: LD_EXP 19
4578: PUSH
4579: LD_VAR 0 2
4583: ARRAY
4584: PPUSH
4585: CALL 3039 0 3
// prepare_side ( i , pos + 1 , Side_Nations [ i ] ) ;
4589: LD_VAR 0 2
4593: PPUSH
4594: LD_VAR 0 4
4598: PUSH
4599: LD_INT 1
4601: PLUS
4602: PPUSH
4603: LD_EXP 19
4607: PUSH
4608: LD_VAR 0 2
4612: ARRAY
4613: PPUSH
4614: CALL 3039 0 3
// end ; end else
4618: GO 4645
// prepare_side ( i , pos , Side_Nations [ i ] ) ;
4620: LD_VAR 0 2
4624: PPUSH
4625: LD_VAR 0 4
4629: PPUSH
4630: LD_EXP 19
4634: PUSH
4635: LD_VAR 0 2
4639: ARRAY
4640: PPUSH
4641: CALL 3039 0 3
// end ;
4645: GO 4446
4647: POP
4648: POP
// end ;
4649: LD_VAR 0 1
4653: RET
// function Modify_Nations ; var list , west , east , i ; begin
4654: LD_INT 0
4656: PPUSH
4657: PPUSH
4658: PPUSH
4659: PPUSH
4660: PPUSH
// list := [ ] ;
4661: LD_ADDR_VAR 0 2
4665: PUSH
4666: EMPTY
4667: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
4668: LD_ADDR_VAR 0 5
4672: PUSH
4673: DOUBLE
4674: LD_INT 1
4676: DEC
4677: ST_TO_ADDR
4678: LD_EXP 18
4682: PUSH
4683: LD_INT 0
4685: PLUS
4686: PUSH
4687: FOR_TO
4688: IFFALSE 4906
// if side_positions [ i ] = 1 then
4690: LD_EXP 18
4694: PUSH
4695: LD_VAR 0 5
4699: ARRAY
4700: PUSH
4701: LD_INT 1
4703: EQUAL
4704: IFFALSE 4798
// case side_nations [ i ] of 1 :
4706: LD_EXP 19
4710: PUSH
4711: LD_VAR 0 5
4715: ARRAY
4716: PUSH
4717: LD_INT 1
4719: DOUBLE
4720: EQUAL
4721: IFTRUE 4725
4723: GO 4743
4725: POP
// west := [ 1 , 2 ] ; 2 :
4726: LD_ADDR_VAR 0 3
4730: PUSH
4731: LD_INT 1
4733: PUSH
4734: LD_INT 2
4736: PUSH
4737: EMPTY
4738: LIST
4739: LIST
4740: ST_TO_ADDR
4741: GO 4796
4743: LD_INT 2
4745: DOUBLE
4746: EQUAL
4747: IFTRUE 4751
4749: GO 4769
4751: POP
// west := [ 2 , 3 ] ; 3 :
4752: LD_ADDR_VAR 0 3
4756: PUSH
4757: LD_INT 2
4759: PUSH
4760: LD_INT 3
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: ST_TO_ADDR
4767: GO 4796
4769: LD_INT 3
4771: DOUBLE
4772: EQUAL
4773: IFTRUE 4777
4775: GO 4795
4777: POP
// west := [ 3 , 1 ] ; end else
4778: LD_ADDR_VAR 0 3
4782: PUSH
4783: LD_INT 3
4785: PUSH
4786: LD_INT 1
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: ST_TO_ADDR
4793: GO 4796
4795: POP
4796: GO 4904
// if side_positions [ i ] = 3 then
4798: LD_EXP 18
4802: PUSH
4803: LD_VAR 0 5
4807: ARRAY
4808: PUSH
4809: LD_INT 3
4811: EQUAL
4812: IFFALSE 4904
// case side_nations [ i ] of 1 :
4814: LD_EXP 19
4818: PUSH
4819: LD_VAR 0 5
4823: ARRAY
4824: PUSH
4825: LD_INT 1
4827: DOUBLE
4828: EQUAL
4829: IFTRUE 4833
4831: GO 4851
4833: POP
// east := [ 1 , 2 ] ; 2 :
4834: LD_ADDR_VAR 0 4
4838: PUSH
4839: LD_INT 1
4841: PUSH
4842: LD_INT 2
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: ST_TO_ADDR
4849: GO 4904
4851: LD_INT 2
4853: DOUBLE
4854: EQUAL
4855: IFTRUE 4859
4857: GO 4877
4859: POP
// east := [ 2 , 3 ] ; 3 :
4860: LD_ADDR_VAR 0 4
4864: PUSH
4865: LD_INT 2
4867: PUSH
4868: LD_INT 3
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: ST_TO_ADDR
4875: GO 4904
4877: LD_INT 3
4879: DOUBLE
4880: EQUAL
4881: IFTRUE 4885
4883: GO 4903
4885: POP
// east := [ 3 , 1 ] ; end ;
4886: LD_ADDR_VAR 0 4
4890: PUSH
4891: LD_INT 3
4893: PUSH
4894: LD_INT 1
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: ST_TO_ADDR
4901: GO 4904
4903: POP
4904: GO 4687
4906: POP
4907: POP
// Position_Nations := west ^ east ^ [ 0 , 0 , 0 , 0 ] ;
4908: LD_ADDR_EXP 21
4912: PUSH
4913: LD_VAR 0 3
4917: PUSH
4918: LD_VAR 0 4
4922: ADD
4923: PUSH
4924: LD_INT 0
4926: PUSH
4927: LD_INT 0
4929: PUSH
4930: LD_INT 0
4932: PUSH
4933: LD_INT 0
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: LIST
4940: LIST
4941: ADD
4942: ST_TO_ADDR
// end ;
4943: LD_VAR 0 1
4947: RET
// function CountClassMembers ; var Mode ; begin
4948: LD_INT 0
4950: PPUSH
4951: PPUSH
// if No_Mechs then
4952: LD_EXP 65
4956: IFFALSE 4968
// Mode := 2 else
4958: LD_ADDR_VAR 0 2
4962: PUSH
4963: LD_INT 2
4965: ST_TO_ADDR
4966: GO 4976
// Mode := 1 ;
4968: LD_ADDR_VAR 0 2
4972: PUSH
4973: LD_INT 1
4975: ST_TO_ADDR
// neng := number_of_people ;
4976: LD_ADDR_LOC 5
4980: PUSH
4981: LD_EXP 6
4985: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4986: LD_ADDR_LOC 8
4990: PUSH
4991: LD_LOC 5
4995: PUSH
4996: LD_INT 4
4998: PUSH
4999: LD_INT 3
5001: PUSH
5002: EMPTY
5003: LIST
5004: LIST
5005: PUSH
5006: LD_VAR 0 2
5010: ARRAY
5011: DIV
5012: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
5013: LD_LOC 8
5017: PUSH
5018: LD_EXP 5
5022: LESS
5023: IFFALSE 5035
// nsol := number_of_breastworks ;
5025: LD_ADDR_LOC 8
5029: PUSH
5030: LD_EXP 5
5034: ST_TO_ADDR
// neng := neng - nsol ;
5035: LD_ADDR_LOC 5
5039: PUSH
5040: LD_LOC 5
5044: PUSH
5045: LD_LOC 8
5049: MINUS
5050: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
5051: LD_ADDR_LOC 6
5055: PUSH
5056: LD_LOC 5
5060: PUSH
5061: LD_INT 3
5063: PUSH
5064: LD_INT 2
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PUSH
5071: LD_VAR 0 2
5075: ARRAY
5076: DIV
5077: ST_TO_ADDR
// if ( nsci < 1 ) then
5078: LD_LOC 6
5082: PUSH
5083: LD_INT 1
5085: LESS
5086: IFFALSE 5096
// nsci := 1 ;
5088: LD_ADDR_LOC 6
5092: PUSH
5093: LD_INT 1
5095: ST_TO_ADDR
// neng := neng - nsci ;
5096: LD_ADDR_LOC 5
5100: PUSH
5101: LD_LOC 5
5105: PUSH
5106: LD_LOC 6
5110: MINUS
5111: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5112: LD_ADDR_LOC 7
5116: PUSH
5117: LD_LOC 5
5121: PUSH
5122: LD_INT 2
5124: DIV
5125: PUSH
5126: LD_INT 0
5128: PUSH
5129: EMPTY
5130: LIST
5131: LIST
5132: PUSH
5133: LD_VAR 0 2
5137: ARRAY
5138: ST_TO_ADDR
// neng := neng - nmech ;
5139: LD_ADDR_LOC 5
5143: PUSH
5144: LD_LOC 5
5148: PUSH
5149: LD_LOC 7
5153: MINUS
5154: ST_TO_ADDR
// if ( neng < 1 ) then
5155: LD_LOC 5
5159: PUSH
5160: LD_INT 1
5162: LESS
5163: IFFALSE 5173
// neng := 1 ;
5165: LD_ADDR_LOC 5
5169: PUSH
5170: LD_INT 1
5172: ST_TO_ADDR
// end ;
5173: LD_VAR 0 1
5177: RET
// function Init_Win_Condition ; begin
5178: LD_INT 0
5180: PPUSH
// disable ( 98 ) ;
5181: LD_INT 98
5183: DISABLE_MARKED
// disable ( 99 ) ;
5184: LD_INT 99
5186: DISABLE_MARKED
// if Team_Game then
5187: LD_EXP 20
5191: IFFALSE 5198
// enable ( 98 ) else
5193: LD_INT 98
5195: ENABLE_MARKED
5196: GO 5201
// enable ( 99 ) ;
5198: LD_INT 99
5200: ENABLE_MARKED
// end ;
5201: LD_VAR 0 1
5205: RET
// starting begin DE_Triggers ;
5206: CALL 7978 0 0
// mp_selectmsg := true ;
5210: LD_ADDR_OWVAR 13
5214: PUSH
5215: LD_INT 1
5217: ST_TO_ADDR
// if ( game_type <> 1 ) and ( game_type <> 3 ) then
5218: LD_EXP 49
5222: PUSH
5223: LD_INT 1
5225: NONEQUAL
5226: PUSH
5227: LD_EXP 49
5231: PUSH
5232: LD_INT 3
5234: NONEQUAL
5235: AND
5236: IFFALSE 5242
// read_multiplayer_and_game_parameters ;
5238: CALL 976 0 0
// case Game_Type of 1 , 3 :
5242: LD_EXP 49
5246: PUSH
5247: LD_INT 1
5249: DOUBLE
5250: EQUAL
5251: IFTRUE 5261
5253: LD_INT 3
5255: DOUBLE
5256: EQUAL
5257: IFTRUE 5261
5259: GO 5273
5261: POP
// begin enable ( 19 ) ;
5262: LD_INT 19
5264: ENABLE_MARKED
// starting_ctf ;
5265: CALL 8617 0 0
// exit ;
5269: GO 5430
// end ; 12 :
5271: GO 5289
5273: LD_INT 12
5275: DOUBLE
5276: EQUAL
5277: IFTRUE 5281
5279: GO 5288
5281: POP
// Modify_Nations ; end ;
5282: CALL 4654 0 0
5286: GO 5289
5288: POP
// enable ( 55 ) ;
5289: LD_INT 55
5291: ENABLE_MARKED
// init_map ;
5292: CALL 276 0 0
// set_shared_visions_and_alliances ;
5296: CALL 2220 0 0
// prepare_sides ;
5300: CALL 4408 0 0
// InitLimits ;
5304: CALL 17351 0 0
// ShowTimer ;
5308: CALL 18288 0 0
// init_shipments ;
5312: CALL 5431 0 0
// init_respawn ;
5316: CALL 5935 0 0
// music_nat := Side_Nations [ your_side ] ;
5320: LD_ADDR_OWVAR 71
5324: PUSH
5325: LD_EXP 19
5329: PUSH
5330: LD_OWVAR 2
5334: ARRAY
5335: ST_TO_ADDR
// if IAmSpec then
5336: CALL_OW 531
5340: IFFALSE 5376
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
5342: LD_INT 0
5344: PPUSH
5345: LD_INT 0
5347: PPUSH
5348: LD_OWVAR 2
5352: PPUSH
5353: LD_INT 32767
5355: NEG
5356: PPUSH
5357: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
5361: LD_INT 104
5363: PPUSH
5364: LD_INT 69
5366: PPUSH
5367: CALL_OW 86
// enable ( 400 ) ;
5371: LD_INT 400
5373: ENABLE_MARKED
// end else
5374: GO 5430
// begin ResetFog ;
5376: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5380: LD_EXP 26
5384: PUSH
5385: LD_EXP 18
5389: PUSH
5390: LD_OWVAR 2
5394: ARRAY
5395: ARRAY
5396: PUSH
5397: LD_INT 1
5399: ARRAY
5400: PPUSH
5401: LD_EXP 26
5405: PUSH
5406: LD_EXP 18
5410: PUSH
5411: LD_OWVAR 2
5415: ARRAY
5416: ARRAY
5417: PUSH
5418: LD_INT 2
5420: ARRAY
5421: PPUSH
5422: CALL_OW 86
// Init_Win_Condition ;
5426: CALL 5178 0 0
// end ; end ; end_of_file
5430: END
// var shipment , tictac ; export function init_shipments ; begin
5431: LD_INT 0
5433: PPUSH
// shipment := Rand ( 0 , 1 ) ;
5434: LD_ADDR_LOC 9
5438: PUSH
5439: LD_INT 0
5441: PPUSH
5442: LD_INT 1
5444: PPUSH
5445: CALL_OW 12
5449: ST_TO_ADDR
// tictac := 0 ;
5450: LD_ADDR_LOC 10
5454: PUSH
5455: LD_INT 0
5457: ST_TO_ADDR
// end ;
5458: LD_VAR 0 1
5462: RET
// every 0 0$5 + 0 0$1.1 marked 55 do var d ;
5463: GO 5465
5465: DISABLE
5466: LD_INT 0
5468: PPUSH
// begin case tick of 1 .. 1 1$0 :
5469: LD_OWVAR 1
5473: PUSH
5474: LD_INT 1
5476: DOUBLE
5477: GREATEREQUAL
5478: IFFALSE 5486
5480: LD_INT 2100
5482: DOUBLE
5483: LESSEQUAL
5484: IFTRUE 5488
5486: GO 5499
5488: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5489: LD_ADDR_VAR 0 1
5493: PUSH
5494: LD_INT 150
5496: ST_TO_ADDR
5497: GO 5682
5499: LD_INT 2100
5501: PUSH
5502: LD_INT 1
5504: PLUS
5505: DOUBLE
5506: GREATEREQUAL
5507: IFFALSE 5515
5509: LD_INT 10500
5511: DOUBLE
5512: LESSEQUAL
5513: IFTRUE 5517
5515: GO 5528
5517: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5518: LD_ADDR_VAR 0 1
5522: PUSH
5523: LD_INT 100
5525: ST_TO_ADDR
5526: GO 5682
5528: LD_INT 10500
5530: PUSH
5531: LD_INT 1
5533: PLUS
5534: DOUBLE
5535: GREATEREQUAL
5536: IFFALSE 5544
5538: LD_INT 21000
5540: DOUBLE
5541: LESSEQUAL
5542: IFTRUE 5546
5544: GO 5557
5546: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5547: LD_ADDR_VAR 0 1
5551: PUSH
5552: LD_INT 90
5554: ST_TO_ADDR
5555: GO 5682
5557: LD_INT 21000
5559: PUSH
5560: LD_INT 1
5562: PLUS
5563: DOUBLE
5564: GREATEREQUAL
5565: IFFALSE 5573
5567: LD_INT 42000
5569: DOUBLE
5570: LESSEQUAL
5571: IFTRUE 5575
5573: GO 5586
5575: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5576: LD_ADDR_VAR 0 1
5580: PUSH
5581: LD_INT 70
5583: ST_TO_ADDR
5584: GO 5682
5586: LD_INT 42000
5588: PUSH
5589: LD_INT 1
5591: PLUS
5592: DOUBLE
5593: GREATEREQUAL
5594: IFFALSE 5602
5596: LD_INT 63000
5598: DOUBLE
5599: LESSEQUAL
5600: IFTRUE 5604
5602: GO 5615
5604: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5605: LD_ADDR_VAR 0 1
5609: PUSH
5610: LD_INT 60
5612: ST_TO_ADDR
5613: GO 5682
5615: LD_INT 63000
5617: PUSH
5618: LD_INT 1
5620: PLUS
5621: DOUBLE
5622: GREATEREQUAL
5623: IFFALSE 5631
5625: LD_INT 105000
5627: DOUBLE
5628: LESSEQUAL
5629: IFTRUE 5633
5631: GO 5644
5633: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5634: LD_ADDR_VAR 0 1
5638: PUSH
5639: LD_INT 35
5641: ST_TO_ADDR
5642: GO 5682
5644: LD_INT 105000
5646: PUSH
5647: LD_INT 1
5649: PLUS
5650: DOUBLE
5651: GREATEREQUAL
5652: IFFALSE 5660
5654: LD_INT 630000
5656: DOUBLE
5657: LESSEQUAL
5658: IFTRUE 5662
5660: GO 5673
5662: POP
// d := 20 ; else
5663: LD_ADDR_VAR 0 1
5667: PUSH
5668: LD_INT 20
5670: ST_TO_ADDR
5671: GO 5682
5673: POP
// d := 0 ; end ;
5674: LD_ADDR_VAR 0 1
5678: PUSH
5679: LD_INT 0
5681: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5682: LD_INT 1
5684: PPUSH
5685: LD_INT 10000
5687: PPUSH
5688: CALL_OW 12
5692: PUSH
5693: LD_VAR 0 1
5697: PUSH
5698: LD_EXP 10
5702: MUL
5703: LESSEQUAL
5704: IFFALSE 5758
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5706: LD_INT 1
5708: PPUSH
5709: LD_INT 140
5711: PPUSH
5712: CALL_OW 12
5716: PPUSH
5717: CALL_OW 67
// shipment := ( shipment + 1 ) mod 2 ;
5721: LD_ADDR_LOC 9
5725: PUSH
5726: LD_LOC 9
5730: PUSH
5731: LD_INT 1
5733: PLUS
5734: PUSH
5735: LD_INT 2
5737: MOD
5738: ST_TO_ADDR
// CreateCratesArea ( 5 , west_side + shipment , true ) ;
5739: LD_INT 5
5741: PPUSH
5742: LD_INT 8
5744: PUSH
5745: LD_LOC 9
5749: PLUS
5750: PPUSH
5751: LD_INT 1
5753: PPUSH
5754: CALL_OW 55
// end ; enable ;
5758: ENABLE
// end ;
5759: PPOPN 1
5761: END
// every 0 0$10 trigger TICK > ( ( 2 2$0 * tictac ) + tictac * ( 1 1$30 - shipments_density * ( 0 0$2 ) ) ) marked 55 do var i , amount , is_in ;
5762: LD_OWVAR 1
5766: PUSH
5767: LD_INT 4200
5769: PUSH
5770: LD_LOC 10
5774: MUL
5775: PUSH
5776: LD_LOC 10
5780: PUSH
5781: LD_INT 3150
5783: PUSH
5784: LD_EXP 10
5788: PUSH
5789: LD_INT 70
5791: MUL
5792: MINUS
5793: MUL
5794: PLUS
5795: GREATER
5796: IFFALSE 5932
5798: GO 5800
5800: DISABLE
5801: LD_INT 0
5803: PPUSH
5804: PPUSH
5805: PPUSH
// begin tictac := tictac + 1 ;
5806: LD_ADDR_LOC 10
5810: PUSH
5811: LD_LOC 10
5815: PUSH
5816: LD_INT 1
5818: PLUS
5819: ST_TO_ADDR
// amount := Rand ( 3 , 5 ) ;
5820: LD_ADDR_VAR 0 2
5824: PUSH
5825: LD_INT 3
5827: PPUSH
5828: LD_INT 5
5830: PPUSH
5831: CALL_OW 12
5835: ST_TO_ADDR
// for i = 0 to 3 do
5836: LD_ADDR_VAR 0 1
5840: PUSH
5841: DOUBLE
5842: LD_INT 0
5844: DEC
5845: ST_TO_ADDR
5846: LD_INT 3
5848: PUSH
5849: FOR_TO
5850: IFFALSE 5929
// begin is_in := GetResourceArea ( west_side + i , mat_cans ) ;
5852: LD_ADDR_VAR 0 3
5856: PUSH
5857: LD_INT 8
5859: PUSH
5860: LD_VAR 0 1
5864: PLUS
5865: PPUSH
5866: LD_INT 1
5868: PPUSH
5869: CALL_OW 287
5873: ST_TO_ADDR
// if ( is_in < 500 ) or ( Rand ( 1 , 10 ) > ( is_in div 100 ) ) then
5874: LD_VAR 0 3
5878: PUSH
5879: LD_INT 500
5881: LESS
5882: PUSH
5883: LD_INT 1
5885: PPUSH
5886: LD_INT 10
5888: PPUSH
5889: CALL_OW 12
5893: PUSH
5894: LD_VAR 0 3
5898: PUSH
5899: LD_INT 100
5901: DIV
5902: GREATER
5903: OR
5904: IFFALSE 5927
// CreateCratesArea ( amount , nw + i , true ) ;
5906: LD_VAR 0 2
5910: PPUSH
5911: LD_INT 12
5913: PUSH
5914: LD_VAR 0 1
5918: PLUS
5919: PPUSH
5920: LD_INT 1
5922: PPUSH
5923: CALL_OW 55
// end ;
5927: GO 5849
5929: POP
5930: POP
// enable ;
5931: ENABLE
// end ; end_of_file
5932: PPOPN 3
5934: END
// var respawn_queue , nation_queue ; export function init_respawn ; begin
5935: LD_INT 0
5937: PPUSH
// if not def_people_respawning then
5938: LD_EXP 61
5942: NOT
5943: IFFALSE 5947
// exit ;
5945: GO 6050
// respawn_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5947: LD_ADDR_LOC 11
5951: PUSH
5952: LD_INT 0
5954: PUSH
5955: LD_INT 0
5957: PUSH
5958: LD_INT 0
5960: PUSH
5961: LD_INT 0
5963: PUSH
5964: LD_INT 0
5966: PUSH
5967: LD_INT 0
5969: PUSH
5970: LD_INT 0
5972: PUSH
5973: LD_INT 0
5975: PUSH
5976: EMPTY
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: ST_TO_ADDR
// nation_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5986: LD_ADDR_LOC 12
5990: PUSH
5991: LD_INT 0
5993: PUSH
5994: LD_INT 0
5996: PUSH
5997: LD_INT 0
5999: PUSH
6000: LD_INT 0
6002: PUSH
6003: LD_INT 0
6005: PUSH
6006: LD_INT 0
6008: PUSH
6009: LD_INT 0
6011: PUSH
6012: LD_INT 0
6014: PUSH
6015: EMPTY
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: ST_TO_ADDR
// if Game_Type in [ 2 , 12 ] then
6025: LD_EXP 49
6029: PUSH
6030: LD_INT 2
6032: PUSH
6033: LD_INT 12
6035: PUSH
6036: EMPTY
6037: LIST
6038: LIST
6039: IN
6040: IFFALSE 6047
// enable ( 41 ) else
6042: LD_INT 41
6044: ENABLE_MARKED
6045: GO 6050
// enable ( 40 ) ;
6047: LD_INT 40
6049: ENABLE_MARKED
// end ;
6050: LD_VAR 0 1
6054: RET
// every 0 0$10 marked 40 do var list , time , side ;
6055: GO 6057
6057: DISABLE
6058: LD_INT 0
6060: PPUSH
6061: PPUSH
6062: PPUSH
// begin for side = 1 to Side_Positions do
6063: LD_ADDR_VAR 0 3
6067: PUSH
6068: DOUBLE
6069: LD_INT 1
6071: DEC
6072: ST_TO_ADDR
6073: LD_EXP 18
6077: PUSH
6078: FOR_TO
6079: IFFALSE 6256
// if Side_Positions [ side ] then
6081: LD_EXP 18
6085: PUSH
6086: LD_VAR 0 3
6090: ARRAY
6091: IFFALSE 6254
// begin list := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6093: LD_ADDR_VAR 0 1
6097: PUSH
6098: LD_INT 22
6100: PUSH
6101: LD_VAR 0 3
6105: PUSH
6106: EMPTY
6107: LIST
6108: LIST
6109: PUSH
6110: LD_INT 21
6112: PUSH
6113: LD_INT 1
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: PUSH
6120: LD_INT 3
6122: PUSH
6123: LD_INT 23
6125: PUSH
6126: LD_INT 0
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: PPUSH
6139: CALL_OW 69
6143: ST_TO_ADDR
// if ( list < number_of_people ) and ( not respawn_queue [ side ] ) then
6144: LD_VAR 0 1
6148: PUSH
6149: LD_EXP 6
6153: LESS
6154: PUSH
6155: LD_LOC 11
6159: PUSH
6160: LD_VAR 0 3
6164: ARRAY
6165: NOT
6166: AND
6167: IFFALSE 6194
// respawn_queue := Replace ( respawn_queue , side , TICK ) ;
6169: LD_ADDR_LOC 11
6173: PUSH
6174: LD_LOC 11
6178: PPUSH
6179: LD_VAR 0 3
6183: PPUSH
6184: LD_OWVAR 1
6188: PPUSH
6189: CALL_OW 1
6193: ST_TO_ADDR
// time := TICK - respawn_queue [ side ] ;
6194: LD_ADDR_VAR 0 2
6198: PUSH
6199: LD_OWVAR 1
6203: PUSH
6204: LD_LOC 11
6208: PUSH
6209: LD_VAR 0 3
6213: ARRAY
6214: MINUS
6215: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6216: LD_LOC 11
6220: PUSH
6221: LD_VAR 0 3
6225: ARRAY
6226: PUSH
6227: LD_VAR 0 2
6231: PUSH
6232: LD_EXP 13
6236: GREATER
6237: AND
6238: IFFALSE 6254
// respawn_character ( side , time ) ;
6240: LD_VAR 0 3
6244: PPUSH
6245: LD_VAR 0 2
6249: PPUSH
6250: CALL 6262 0 2
// end ;
6254: GO 6078
6256: POP
6257: POP
// enable ;
6258: ENABLE
// end ;
6259: PPOPN 3
6261: END
// function respawn_character ( side , time ) ; var dep ; begin
6262: LD_INT 0
6264: PPUSH
6265: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6266: LD_INT 0
6268: PPUSH
6269: LD_INT 1
6271: PPUSH
6272: CALL_OW 12
6276: PUSH
6277: LD_VAR 0 2
6281: PUSH
6282: LD_EXP 14
6286: LESS
6287: AND
6288: IFFALSE 6292
// exit ;
6290: GO 6499
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6292: LD_ADDR_VAR 0 4
6296: PUSH
6297: LD_INT 22
6299: PUSH
6300: LD_VAR 0 1
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: PUSH
6309: LD_INT 2
6311: PUSH
6312: LD_INT 30
6314: PUSH
6315: LD_INT 0
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: PUSH
6322: LD_INT 30
6324: PUSH
6325: LD_INT 1
6327: PUSH
6328: EMPTY
6329: LIST
6330: LIST
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: LIST
6336: PUSH
6337: LD_INT 50
6339: PUSH
6340: EMPTY
6341: LIST
6342: PUSH
6343: EMPTY
6344: LIST
6345: LIST
6346: LIST
6347: PPUSH
6348: CALL_OW 69
6352: ST_TO_ADDR
// if not dep then
6353: LD_VAR 0 4
6357: NOT
6358: IFFALSE 6364
// exit else
6360: GO 6499
6362: GO 6388
// dep := dep [ Rand ( 1 , dep ) ] ;
6364: LD_ADDR_VAR 0 4
6368: PUSH
6369: LD_VAR 0 4
6373: PUSH
6374: LD_INT 1
6376: PPUSH
6377: LD_VAR 0 4
6381: PPUSH
6382: CALL_OW 12
6386: ARRAY
6387: ST_TO_ADDR
// uc_side := side ;
6388: LD_ADDR_OWVAR 20
6392: PUSH
6393: LD_VAR 0 1
6397: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6398: LD_ADDR_OWVAR 21
6402: PUSH
6403: LD_EXP 19
6407: PUSH
6408: LD_VAR 0 1
6412: ARRAY
6413: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6414: LD_INT 0
6416: PPUSH
6417: LD_INT 0
6419: PPUSH
6420: LD_EXP 7
6424: PUSH
6425: LD_INT 2
6427: DIV
6428: PPUSH
6429: CALL_OW 380
// hc_importance := 0 ;
6433: LD_ADDR_OWVAR 32
6437: PUSH
6438: LD_INT 0
6440: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
6441: CALL_OW 44
6445: PPUSH
6446: LD_VAR 0 4
6450: PPUSH
6451: CALL_OW 250
6455: PPUSH
6456: LD_VAR 0 4
6460: PPUSH
6461: CALL_OW 251
6465: PPUSH
6466: LD_INT 10
6468: PPUSH
6469: LD_INT 1
6471: PPUSH
6472: CALL_OW 50
// respawn_queue := Replace ( respawn_queue , side , 0 ) ;
6476: LD_ADDR_LOC 11
6480: PUSH
6481: LD_LOC 11
6485: PPUSH
6486: LD_VAR 0 1
6490: PPUSH
6491: LD_INT 0
6493: PPUSH
6494: CALL_OW 1
6498: ST_TO_ADDR
// end ;
6499: LD_VAR 0 3
6503: RET
// every 0 0$10 marked 41 do var i , list , time , nation , side , limit ;
6504: GO 6506
6506: DISABLE
6507: LD_INT 0
6509: PPUSH
6510: PPUSH
6511: PPUSH
6512: PPUSH
6513: PPUSH
6514: PPUSH
// begin if Game_Type = 12 then
6515: LD_EXP 49
6519: PUSH
6520: LD_INT 12
6522: EQUAL
6523: IFFALSE 6537
// limit := number_of_people else
6525: LD_ADDR_VAR 0 6
6529: PUSH
6530: LD_EXP 6
6534: ST_TO_ADDR
6535: GO 6551
// limit := 2 * number_of_people ;
6537: LD_ADDR_VAR 0 6
6541: PUSH
6542: LD_INT 2
6544: PUSH
6545: LD_EXP 6
6549: MUL
6550: ST_TO_ADDR
// for i = 1 to 4 do
6551: LD_ADDR_VAR 0 1
6555: PUSH
6556: DOUBLE
6557: LD_INT 1
6559: DEC
6560: ST_TO_ADDR
6561: LD_INT 4
6563: PUSH
6564: FOR_TO
6565: IFFALSE 6857
// begin side := GetSidePositions ( [ 1 , 1 , 3 , 3 ] [ i ] ) ;
6567: LD_ADDR_VAR 0 5
6571: PUSH
6572: LD_INT 1
6574: PUSH
6575: LD_INT 1
6577: PUSH
6578: LD_INT 3
6580: PUSH
6581: LD_INT 3
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: PUSH
6590: LD_VAR 0 1
6594: ARRAY
6595: PPUSH
6596: CALL 7199 0 1
6600: ST_TO_ADDR
// if Game_Type = 12 then
6601: LD_EXP 49
6605: PUSH
6606: LD_INT 12
6608: EQUAL
6609: IFFALSE 6629
// nation := Position_Nations [ i ] else
6611: LD_ADDR_VAR 0 4
6615: PUSH
6616: LD_EXP 21
6620: PUSH
6621: LD_VAR 0 1
6625: ARRAY
6626: ST_TO_ADDR
6627: GO 6645
// nation := Side_Nations [ side ] ;
6629: LD_ADDR_VAR 0 4
6633: PUSH
6634: LD_EXP 19
6638: PUSH
6639: LD_VAR 0 5
6643: ARRAY
6644: ST_TO_ADDR
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_nation , nation ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6645: LD_ADDR_VAR 0 2
6649: PUSH
6650: LD_INT 22
6652: PUSH
6653: LD_VAR 0 5
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: PUSH
6662: LD_INT 23
6664: PUSH
6665: LD_VAR 0 4
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: PUSH
6674: LD_INT 21
6676: PUSH
6677: LD_INT 1
6679: PUSH
6680: EMPTY
6681: LIST
6682: LIST
6683: PUSH
6684: LD_INT 3
6686: PUSH
6687: LD_INT 23
6689: PUSH
6690: LD_INT 0
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: PUSH
6697: EMPTY
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: PPUSH
6704: CALL_OW 69
6708: ST_TO_ADDR
// if ( list < limit ) and ( not respawn_queue [ side ] ) then
6709: LD_VAR 0 2
6713: PUSH
6714: LD_VAR 0 6
6718: LESS
6719: PUSH
6720: LD_LOC 11
6724: PUSH
6725: LD_VAR 0 5
6729: ARRAY
6730: NOT
6731: AND
6732: IFFALSE 6784
// begin respawn_queue = Replace ( respawn_queue , side , TICK ) ;
6734: LD_ADDR_LOC 11
6738: PUSH
6739: LD_LOC 11
6743: PPUSH
6744: LD_VAR 0 5
6748: PPUSH
6749: LD_OWVAR 1
6753: PPUSH
6754: CALL_OW 1
6758: ST_TO_ADDR
// nation_queue = Replace ( nation_queue , side , nation ) ;
6759: LD_ADDR_LOC 12
6763: PUSH
6764: LD_LOC 12
6768: PPUSH
6769: LD_VAR 0 5
6773: PPUSH
6774: LD_VAR 0 4
6778: PPUSH
6779: CALL_OW 1
6783: ST_TO_ADDR
// end ; time := TICK - respawn_queue [ side ] ;
6784: LD_ADDR_VAR 0 3
6788: PUSH
6789: LD_OWVAR 1
6793: PUSH
6794: LD_LOC 11
6798: PUSH
6799: LD_VAR 0 5
6803: ARRAY
6804: MINUS
6805: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6806: LD_LOC 11
6810: PUSH
6811: LD_VAR 0 5
6815: ARRAY
6816: PUSH
6817: LD_VAR 0 3
6821: PUSH
6822: LD_EXP 13
6826: GREATER
6827: AND
6828: IFFALSE 6855
// respawn_character_nation ( side , time , nation_queue [ side ] ) ;
6830: LD_VAR 0 5
6834: PPUSH
6835: LD_VAR 0 3
6839: PPUSH
6840: LD_LOC 12
6844: PUSH
6845: LD_VAR 0 5
6849: ARRAY
6850: PPUSH
6851: CALL 6863 0 3
// end ;
6855: GO 6564
6857: POP
6858: POP
// enable ;
6859: ENABLE
// end ;
6860: PPOPN 6
6862: END
// function respawn_character_nation ( side , time , nation ) ; var dep ; begin
6863: LD_INT 0
6865: PPUSH
6866: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6867: LD_INT 0
6869: PPUSH
6870: LD_INT 1
6872: PPUSH
6873: CALL_OW 12
6877: PUSH
6878: LD_VAR 0 2
6882: PUSH
6883: LD_EXP 14
6887: LESS
6888: AND
6889: IFFALSE 6893
// exit ;
6891: GO 7194
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_nation , nation ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6893: LD_ADDR_VAR 0 5
6897: PUSH
6898: LD_INT 22
6900: PUSH
6901: LD_VAR 0 1
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: PUSH
6910: LD_INT 23
6912: PUSH
6913: LD_VAR 0 3
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: PUSH
6922: LD_INT 2
6924: PUSH
6925: LD_INT 30
6927: PUSH
6928: LD_INT 0
6930: PUSH
6931: EMPTY
6932: LIST
6933: LIST
6934: PUSH
6935: LD_INT 30
6937: PUSH
6938: LD_INT 1
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: LIST
6949: PUSH
6950: LD_INT 50
6952: PUSH
6953: EMPTY
6954: LIST
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: PPUSH
6962: CALL_OW 69
6966: ST_TO_ADDR
// if not dep then
6967: LD_VAR 0 5
6971: NOT
6972: IFFALSE 7035
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6974: LD_ADDR_VAR 0 5
6978: PUSH
6979: LD_INT 22
6981: PUSH
6982: LD_VAR 0 1
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: PUSH
6991: LD_INT 2
6993: PUSH
6994: LD_INT 30
6996: PUSH
6997: LD_INT 0
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PUSH
7004: LD_INT 30
7006: PUSH
7007: LD_INT 1
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: LIST
7018: PUSH
7019: LD_INT 50
7021: PUSH
7022: EMPTY
7023: LIST
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: LIST
7029: PPUSH
7030: CALL_OW 69
7034: ST_TO_ADDR
// if not dep then
7035: LD_VAR 0 5
7039: NOT
7040: IFFALSE 7046
// exit else
7042: GO 7194
7044: GO 7070
// dep := dep [ Rand ( 1 , dep ) ] ;
7046: LD_ADDR_VAR 0 5
7050: PUSH
7051: LD_VAR 0 5
7055: PUSH
7056: LD_INT 1
7058: PPUSH
7059: LD_VAR 0 5
7063: PPUSH
7064: CALL_OW 12
7068: ARRAY
7069: ST_TO_ADDR
// uc_side := side ;
7070: LD_ADDR_OWVAR 20
7074: PUSH
7075: LD_VAR 0 1
7079: ST_TO_ADDR
// uc_nation := nation ;
7080: LD_ADDR_OWVAR 21
7084: PUSH
7085: LD_VAR 0 3
7089: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level ) ;
7090: LD_INT 0
7092: PPUSH
7093: LD_INT 0
7095: PPUSH
7096: LD_EXP 7
7100: PPUSH
7101: CALL_OW 380
// hc_importance := 0 ;
7105: LD_ADDR_OWVAR 32
7109: PUSH
7110: LD_INT 0
7112: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
7113: CALL_OW 44
7117: PPUSH
7118: LD_VAR 0 5
7122: PPUSH
7123: CALL_OW 250
7127: PPUSH
7128: LD_VAR 0 5
7132: PPUSH
7133: CALL_OW 251
7137: PPUSH
7138: LD_INT 10
7140: PPUSH
7141: LD_INT 1
7143: PPUSH
7144: CALL_OW 50
// respawn_queue := Replace ( respawn_queue , side , 0 ) ;
7148: LD_ADDR_LOC 11
7152: PUSH
7153: LD_LOC 11
7157: PPUSH
7158: LD_VAR 0 1
7162: PPUSH
7163: LD_INT 0
7165: PPUSH
7166: CALL_OW 1
7170: ST_TO_ADDR
// nation_queue := Replace ( nation_queue , side , 0 ) ;
7171: LD_ADDR_LOC 12
7175: PUSH
7176: LD_LOC 12
7180: PPUSH
7181: LD_VAR 0 1
7185: PPUSH
7186: LD_INT 0
7188: PPUSH
7189: CALL_OW 1
7193: ST_TO_ADDR
// end ;
7194: LD_VAR 0 4
7198: RET
// function GetSidePositions ( i ) ; var un , side ; begin
7199: LD_INT 0
7201: PPUSH
7202: PPUSH
7203: PPUSH
// side := false ;
7204: LD_ADDR_VAR 0 4
7208: PUSH
7209: LD_INT 0
7211: ST_TO_ADDR
// for un = 1 to Side_Positions do
7212: LD_ADDR_VAR 0 3
7216: PUSH
7217: DOUBLE
7218: LD_INT 1
7220: DEC
7221: ST_TO_ADDR
7222: LD_EXP 18
7226: PUSH
7227: FOR_TO
7228: IFFALSE 7262
// if Side_Positions [ un ] = i then
7230: LD_EXP 18
7234: PUSH
7235: LD_VAR 0 3
7239: ARRAY
7240: PUSH
7241: LD_VAR 0 1
7245: EQUAL
7246: IFFALSE 7260
// begin side := un ;
7248: LD_ADDR_VAR 0 4
7252: PUSH
7253: LD_VAR 0 3
7257: ST_TO_ADDR
// break ;
7258: GO 7262
// end ;
7260: GO 7227
7262: POP
7263: POP
// result := side ;
7264: LD_ADDR_VAR 0 2
7268: PUSH
7269: LD_VAR 0 4
7273: ST_TO_ADDR
// end ; end_of_file
7274: LD_VAR 0 2
7278: RET
// var _apemenIncrement , _apemenMaximum , _apemenSkillLevel , _apemenThreshold , _isSpawning , _wildApemenAmount ; every 0 0$15 do var i ;
7279: GO 7281
7281: DISABLE
7282: LD_INT 0
7284: PPUSH
// begin _apemenIncrement := 0 ;
7285: LD_ADDR_LOC 13
7289: PUSH
7290: LD_INT 0
7292: ST_TO_ADDR
// _apemenSkillLevel := 0 ;
7293: LD_ADDR_LOC 15
7297: PUSH
7298: LD_INT 0
7300: ST_TO_ADDR
// _isSpawning := true ;
7301: LD_ADDR_LOC 17
7305: PUSH
7306: LD_INT 1
7308: ST_TO_ADDR
// _wildApemenAmount := 0 ;
7309: LD_ADDR_LOC 18
7313: PUSH
7314: LD_INT 0
7316: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
7317: LD_ADDR_VAR 0 1
7321: PUSH
7322: LD_EXP 18
7326: PUSH
7327: LD_INT 0
7329: PUSH
7330: EMPTY
7331: LIST
7332: DIFF
7333: PUSH
7334: FOR_IN
7335: IFFALSE 7353
// _apemenIncrement := _apemenIncrement + 1 ;
7337: LD_ADDR_LOC 13
7341: PUSH
7342: LD_LOC 13
7346: PUSH
7347: LD_INT 1
7349: PLUS
7350: ST_TO_ADDR
7351: GO 7334
7353: POP
7354: POP
// _apemenMaximum := _apemenIncrement * amount_of_apemen ;
7355: LD_ADDR_LOC 14
7359: PUSH
7360: LD_LOC 13
7364: PUSH
7365: LD_EXP 12
7369: MUL
7370: ST_TO_ADDR
// _apemenThreshold := _apemenMaximum / 2 ;
7371: LD_ADDR_LOC 16
7375: PUSH
7376: LD_LOC 14
7380: PUSH
7381: LD_INT 2
7383: DIVREAL
7384: ST_TO_ADDR
// prepare_apemen ;
7385: CALL 7477 0 0
// end ;
7389: PPOPN 1
7391: END
// on ApemanTamed ( tamedApeman , tamerUnit ) do begin CheckApemenAmount ;
7392: CALL 7399 0 0
// end ;
7396: PPOPN 2
7398: END
// export function CheckApemenAmount ; begin
7399: LD_INT 0
7401: PPUSH
// _wildApemenAmount := _wildApemenAmount - 1 ;
7402: LD_ADDR_LOC 18
7406: PUSH
7407: LD_LOC 18
7411: PUSH
7412: LD_INT 1
7414: MINUS
7415: ST_TO_ADDR
// if _isSpawning then
7416: LD_LOC 17
7420: IFFALSE 7424
// exit ;
7422: GO 7472
// if _wildApemenAmount <= ( _apemenThreshold ) then
7424: LD_LOC 18
7428: PUSH
7429: LD_LOC 16
7433: LESSEQUAL
7434: IFFALSE 7472
// begin if _apemenSkillLevel < 8 then
7436: LD_LOC 15
7440: PUSH
7441: LD_INT 8
7443: LESS
7444: IFFALSE 7460
// _apemenSkillLevel := _apemenSkillLevel + 1 ;
7446: LD_ADDR_LOC 15
7450: PUSH
7451: LD_LOC 15
7455: PUSH
7456: LD_INT 1
7458: PLUS
7459: ST_TO_ADDR
// _isSpawning := true ;
7460: LD_ADDR_LOC 17
7464: PUSH
7465: LD_INT 1
7467: ST_TO_ADDR
// prepare_apemen ;
7468: CALL 7477 0 0
// end ; end ;
7472: LD_VAR 0 1
7476: RET
// function prepare_apemen ; var i ; begin
7477: LD_INT 0
7479: PPUSH
7480: PPUSH
// if not amount_of_apemen then
7481: LD_EXP 12
7485: NOT
7486: IFFALSE 7490
// exit ;
7488: GO 7584
// repeat Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
7490: LD_INT 1050
7492: PPUSH
7493: LD_INT 3150
7495: PPUSH
7496: CALL_OW 12
7500: PPUSH
7501: CALL_OW 67
// apeman_init ;
7505: CALL 7589 0 0
// for i in ( Side_Positions diff [ 0 ] ) do
7509: LD_ADDR_VAR 0 2
7513: PUSH
7514: LD_EXP 18
7518: PUSH
7519: LD_INT 0
7521: PUSH
7522: EMPTY
7523: LIST
7524: DIFF
7525: PUSH
7526: FOR_IN
7527: IFFALSE 7546
// begin PlaceUnitArea ( CreateHuman , apemans_area , false ) ;
7529: CALL_OW 44
7533: PPUSH
7534: LD_INT 10
7536: PPUSH
7537: LD_INT 0
7539: PPUSH
7540: CALL_OW 49
// end ;
7544: GO 7526
7546: POP
7547: POP
// _wildApemenAmount := _wildApemenAmount + _apemenIncrement ;
7548: LD_ADDR_LOC 18
7552: PUSH
7553: LD_LOC 18
7557: PUSH
7558: LD_LOC 13
7562: PLUS
7563: ST_TO_ADDR
// until _wildApemenAmount >= _apemenMaximum ;
7564: LD_LOC 18
7568: PUSH
7569: LD_LOC 14
7573: GREATEREQUAL
7574: IFFALSE 7490
// _isSpawning := false ;
7576: LD_ADDR_LOC 17
7580: PUSH
7581: LD_INT 0
7583: ST_TO_ADDR
// end ;
7584: LD_VAR 0 1
7588: RET
// function apeman_init ; begin
7589: LD_INT 0
7591: PPUSH
// uc_side := 0 ;
7592: LD_ADDR_OWVAR 20
7596: PUSH
7597: LD_INT 0
7599: ST_TO_ADDR
// uc_nation := nation_nature ;
7600: LD_ADDR_OWVAR 21
7604: PUSH
7605: LD_INT 0
7607: ST_TO_ADDR
// hc_class := class_apeman ;
7608: LD_ADDR_OWVAR 28
7612: PUSH
7613: LD_INT 12
7615: ST_TO_ADDR
// hc_basic_skills := [ 2 , 2 , 2 , 2 ] ;
7616: LD_ADDR_OWVAR 30
7620: PUSH
7621: LD_INT 2
7623: PUSH
7624: LD_INT 2
7626: PUSH
7627: LD_INT 2
7629: PUSH
7630: LD_INT 2
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: ST_TO_ADDR
// hc_skills := [ Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel ] ;
7639: LD_ADDR_OWVAR 31
7643: PUSH
7644: LD_INT 0
7646: PPUSH
7647: LD_INT 2
7649: PPUSH
7650: CALL_OW 12
7654: PUSH
7655: LD_LOC 15
7659: PLUS
7660: PUSH
7661: LD_INT 0
7663: PPUSH
7664: LD_INT 2
7666: PPUSH
7667: CALL_OW 12
7671: PUSH
7672: LD_LOC 15
7676: PLUS
7677: PUSH
7678: LD_INT 0
7680: PPUSH
7681: LD_INT 2
7683: PPUSH
7684: CALL_OW 12
7688: PUSH
7689: LD_LOC 15
7693: PLUS
7694: PUSH
7695: LD_INT 0
7697: PPUSH
7698: LD_INT 2
7700: PPUSH
7701: CALL_OW 12
7705: PUSH
7706: LD_LOC 15
7710: PLUS
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
7718: LD_ADDR_OWVAR 29
7722: PUSH
7723: LD_INT 10
7725: PUSH
7726: LD_INT 12
7728: PUSH
7729: EMPTY
7730: LIST
7731: LIST
7732: ST_TO_ADDR
// hc_sex := sex_male ;
7733: LD_ADDR_OWVAR 27
7737: PUSH
7738: LD_INT 1
7740: ST_TO_ADDR
// hc_importance := 0 ;
7741: LD_ADDR_OWVAR 32
7745: PUSH
7746: LD_INT 0
7748: ST_TO_ADDR
// hc_agressivity := Rand ( - 20 , 20 ) ;
7749: LD_ADDR_OWVAR 35
7753: PUSH
7754: LD_INT 20
7756: NEG
7757: PPUSH
7758: LD_INT 20
7760: PPUSH
7761: CALL_OW 12
7765: ST_TO_ADDR
// end ; end_of_file
7766: LD_VAR 0 1
7770: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7771: LD_VAR 0 1
7775: PPUSH
7776: CALL_OW 266
7780: PUSH
7781: LD_INT 0
7783: PUSH
7784: LD_INT 1
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: IN
7791: IFFALSE 7816
// SetBName ( b , @ & GetSide ( b ) ) ;
7793: LD_VAR 0 1
7797: PPUSH
7798: LD_STRING @
7800: PUSH
7801: LD_VAR 0 1
7805: PPUSH
7806: CALL_OW 255
7810: STR
7811: PPUSH
7812: CALL_OW 500
// if def_game_rules then
7816: LD_EXP 50
7820: IFFALSE 7857
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
7822: LD_VAR 0 1
7826: PPUSH
7827: LD_VAR 0 1
7831: PPUSH
7832: CALL_OW 266
7836: PPUSH
7837: LD_VAR 0 1
7841: PPUSH
7842: CALL_OW 255
7846: PPUSH
7847: LD_INT 0
7849: PPUSH
7850: LD_INT 1
7852: PPUSH
7853: CALL 17752 0 5
// end ;
7857: PPOPN 2
7859: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7860: LD_VAR 0 1
7864: PPUSH
7865: CALL_OW 266
7869: PUSH
7870: LD_INT 0
7872: PUSH
7873: LD_INT 1
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: IN
7880: IFFALSE 7905
// SetBName ( b , @ & GetSide ( b ) ) ;
7882: LD_VAR 0 1
7886: PPUSH
7887: LD_STRING @
7889: PUSH
7890: LD_VAR 0 1
7894: PPUSH
7895: CALL_OW 255
7899: STR
7900: PPUSH
7901: CALL_OW 500
// if def_game_rules then
7905: LD_EXP 50
7909: IFFALSE 7948
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7911: LD_VAR 0 1
7915: PPUSH
7916: LD_VAR 0 1
7920: PPUSH
7921: CALL_OW 266
7925: PPUSH
7926: LD_VAR 0 1
7930: PPUSH
7931: CALL_OW 255
7935: PPUSH
7936: LD_VAR 0 2
7940: PPUSH
7941: LD_INT 1
7943: PPUSH
7944: CALL 17752 0 5
// end ;
7948: PPOPN 3
7950: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7951: LD_VAR 0 1
7955: PPUSH
7956: LD_VAR 0 2
7960: PPUSH
7961: LD_VAR 0 3
7965: PPUSH
7966: LD_OWVAR 2
7970: PPUSH
7971: CALL 18430 0 4
7975: PPOPN 3
7977: END
// export function DE_Triggers ; begin
7978: LD_INT 0
7980: PPUSH
// disable ( 01 ) ;
7981: LD_INT 1
7983: DISABLE_MARKED
// disable ( 02 ) ;
7984: LD_INT 2
7986: DISABLE_MARKED
// disable ( 03 ) ;
7987: LD_INT 3
7989: DISABLE_MARKED
// disable ( 04 ) ;
7990: LD_INT 4
7992: DISABLE_MARKED
// disable ( 05 ) ;
7993: LD_INT 5
7995: DISABLE_MARKED
// disable ( 06 ) ;
7996: LD_INT 6
7998: DISABLE_MARKED
// disable ( 07 ) ;
7999: LD_INT 7
8001: DISABLE_MARKED
// disable ( 10 ) ;
8002: LD_INT 10
8004: DISABLE_MARKED
// disable ( 11 ) ;
8005: LD_INT 11
8007: DISABLE_MARKED
// disable ( 12 ) ;
8008: LD_INT 12
8010: DISABLE_MARKED
// disable ( 13 ) ;
8011: LD_INT 13
8013: DISABLE_MARKED
// disable ( 19 ) ;
8014: LD_INT 19
8016: DISABLE_MARKED
// disable ( 40 ) ;
8017: LD_INT 40
8019: DISABLE_MARKED
// disable ( 41 ) ;
8020: LD_INT 41
8022: DISABLE_MARKED
// disable ( 98 ) ;
8023: LD_INT 98
8025: DISABLE_MARKED
// disable ( 99 ) ;
8026: LD_INT 99
8028: DISABLE_MARKED
// disable ( 55 ) ;
8029: LD_INT 55
8031: DISABLE_MARKED
// disable ( 400 ) ;
8032: LD_INT 400
8034: DISABLE_MARKED
// disable ( 401 ) ;
8035: LD_INT 401
8037: DISABLE_MARKED
// end ; end_of_file
8038: LD_VAR 0 1
8042: RET
// function CanWinLoose ; begin
8043: LD_INT 0
8045: PPUSH
// Result := true ;
8046: LD_ADDR_VAR 0 1
8050: PUSH
8051: LD_INT 1
8053: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8054: CALL_OW 518
8058: PUSH
8059: CALL_OW 519
8063: PUSH
8064: LD_INT 0
8066: GREATER
8067: AND
8068: IFFALSE 8078
// Result := false ;
8070: LD_ADDR_VAR 0 1
8074: PUSH
8075: LD_INT 0
8077: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8078: CALL_OW 531
8082: PUSH
8083: CALL_OW 519
8087: PUSH
8088: LD_INT 1
8090: GREATER
8091: AND
8092: IFFALSE 8102
// Result := false ;
8094: LD_ADDR_VAR 0 1
8098: PUSH
8099: LD_INT 0
8101: ST_TO_ADDR
// end ;
8102: LD_VAR 0 1
8106: RET
// function HasPower ( i ) ; begin
8107: LD_INT 0
8109: PPUSH
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8110: LD_ADDR_VAR 0 2
8114: PUSH
8115: LD_INT 22
8117: PUSH
8118: LD_VAR 0 1
8122: PUSH
8123: EMPTY
8124: LIST
8125: LIST
8126: PUSH
8127: LD_INT 2
8129: PUSH
8130: LD_INT 21
8132: PUSH
8133: LD_INT 1
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: PUSH
8140: LD_INT 30
8142: PUSH
8143: LD_INT 0
8145: PUSH
8146: EMPTY
8147: LIST
8148: LIST
8149: PUSH
8150: LD_INT 30
8152: PUSH
8153: LD_INT 1
8155: PUSH
8156: EMPTY
8157: LIST
8158: LIST
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PPUSH
8170: CALL_OW 69
8174: ST_TO_ADDR
// end ;
8175: LD_VAR 0 2
8179: RET
// function AlliedSides ( i , j ) ; begin
8180: LD_INT 0
8182: PPUSH
// Result := false ;
8183: LD_ADDR_VAR 0 3
8187: PUSH
8188: LD_INT 0
8190: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8191: LD_VAR 0 1
8195: PPUSH
8196: LD_VAR 0 2
8200: PPUSH
8201: CALL_OW 81
8205: PUSH
8206: LD_INT 1
8208: EQUAL
8209: PUSH
8210: LD_VAR 0 2
8214: PPUSH
8215: LD_VAR 0 1
8219: PPUSH
8220: CALL_OW 81
8224: PUSH
8225: LD_INT 1
8227: EQUAL
8228: AND
8229: PUSH
8230: LD_VAR 0 1
8234: PPUSH
8235: CALL_OW 83
8239: AND
8240: PUSH
8241: LD_VAR 0 2
8245: PPUSH
8246: CALL_OW 83
8250: AND
8251: IFFALSE 8261
// Result := true ;
8253: LD_ADDR_VAR 0 3
8257: PUSH
8258: LD_INT 1
8260: ST_TO_ADDR
// end ;
8261: LD_VAR 0 3
8265: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
8266: CALL 8043 0 0
8270: IFFALSE 8279
8272: GO 8274
8274: DISABLE
// YouLostInMultiplayer ;
8275: CALL_OW 107
8279: END
// every 0 0$3 trigger CanWinLoose marked 401 do
8280: CALL 8043 0 0
8284: IFFALSE 8308
8286: GO 8288
8288: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
8289: LD_EXP 19
8293: PUSH
8294: LD_OWVAR 2
8298: ARRAY
8299: PPUSH
8300: CALL 18472 0 1
// YouWinInMultiplayer ;
8304: CALL_OW 106
// end ;
8308: END
// every 0 0$3 marked 98 do var i , CanWin ;
8309: GO 8311
8311: DISABLE
8312: LD_INT 0
8314: PPUSH
8315: PPUSH
// begin if not HasPower ( your_side ) then
8316: LD_OWVAR 2
8320: PPUSH
8321: CALL 8107 0 1
8325: NOT
8326: IFFALSE 8337
// begin Multiplayer_Loose_Message ;
8328: CALL_OW 521
// enable ( 400 ) ;
8332: LD_INT 400
8334: ENABLE_MARKED
// end else
8335: GO 8470
// begin CanWin := true ;
8337: LD_ADDR_VAR 0 2
8341: PUSH
8342: LD_INT 1
8344: ST_TO_ADDR
// for i := 1 to 8 do
8345: LD_ADDR_VAR 0 1
8349: PUSH
8350: DOUBLE
8351: LD_INT 1
8353: DEC
8354: ST_TO_ADDR
8355: LD_INT 8
8357: PUSH
8358: FOR_TO
8359: IFFALSE 8456
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8361: LD_EXP 18
8365: PUSH
8366: LD_VAR 0 1
8370: ARRAY
8371: PUSH
8372: LD_VAR 0 1
8376: PPUSH
8377: CALL_OW 108
8381: AND
8382: PUSH
8383: LD_VAR 0 1
8387: PUSH
8388: LD_OWVAR 2
8392: NONEQUAL
8393: AND
8394: IFFALSE 8454
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
8396: LD_EXP 16
8400: PUSH
8401: LD_VAR 0 1
8405: ARRAY
8406: NOT
8407: PUSH
8408: LD_EXP 16
8412: PUSH
8413: LD_VAR 0 1
8417: ARRAY
8418: PUSH
8419: LD_EXP 16
8423: PUSH
8424: LD_OWVAR 2
8428: ARRAY
8429: NONEQUAL
8430: OR
8431: IFFALSE 8454
// if HasPower ( i ) then
8433: LD_VAR 0 1
8437: PPUSH
8438: CALL 8107 0 1
8442: IFFALSE 8454
// begin CanWin := false ;
8444: LD_ADDR_VAR 0 2
8448: PUSH
8449: LD_INT 0
8451: ST_TO_ADDR
// break ;
8452: GO 8456
// end ;
8454: GO 8358
8456: POP
8457: POP
// if CanWin then
8458: LD_VAR 0 2
8462: IFFALSE 8469
// enable ( 401 ) else
8464: LD_INT 401
8466: ENABLE_MARKED
8467: GO 8470
// enable ;
8469: ENABLE
// end ; end ;
8470: PPOPN 2
8472: END
// every 0 0$3 marked 99 do var i , CanWin ;
8473: GO 8475
8475: DISABLE
8476: LD_INT 0
8478: PPUSH
8479: PPUSH
// begin if not HasPower ( your_side ) then
8480: LD_OWVAR 2
8484: PPUSH
8485: CALL 8107 0 1
8489: NOT
8490: IFFALSE 8501
// begin Multiplayer_Loose_Message ;
8492: CALL_OW 521
// enable ( 400 ) ;
8496: LD_INT 400
8498: ENABLE_MARKED
// end else
8499: GO 8614
// begin CanWin := true ;
8501: LD_ADDR_VAR 0 2
8505: PUSH
8506: LD_INT 1
8508: ST_TO_ADDR
// for i := 1 to 8 do
8509: LD_ADDR_VAR 0 1
8513: PUSH
8514: DOUBLE
8515: LD_INT 1
8517: DEC
8518: ST_TO_ADDR
8519: LD_INT 8
8521: PUSH
8522: FOR_TO
8523: IFFALSE 8600
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8525: LD_EXP 18
8529: PUSH
8530: LD_VAR 0 1
8534: ARRAY
8535: PUSH
8536: LD_VAR 0 1
8540: PPUSH
8541: CALL_OW 108
8545: AND
8546: PUSH
8547: LD_VAR 0 1
8551: PUSH
8552: LD_OWVAR 2
8556: NONEQUAL
8557: AND
8558: IFFALSE 8598
// if not AlliedSides ( i , your_side ) then
8560: LD_VAR 0 1
8564: PPUSH
8565: LD_OWVAR 2
8569: PPUSH
8570: CALL 8180 0 2
8574: NOT
8575: IFFALSE 8598
// if HasPower ( i ) then
8577: LD_VAR 0 1
8581: PPUSH
8582: CALL 8107 0 1
8586: IFFALSE 8598
// begin CanWin := false ;
8588: LD_ADDR_VAR 0 2
8592: PUSH
8593: LD_INT 0
8595: ST_TO_ADDR
// break ;
8596: GO 8600
// end ;
8598: GO 8522
8600: POP
8601: POP
// if CanWin then
8602: LD_VAR 0 2
8606: IFFALSE 8613
// enable ( 401 ) else
8608: LD_INT 401
8610: ENABLE_MARKED
8611: GO 8614
// enable ;
8613: ENABLE
// end ; end ; end_of_file
8614: PPOPN 2
8616: END
// var time ; export lidi , krabice , opoce ; export cper , cperiode ; var depot1 , depot2 ; var vlajka1 , vlajka2 ; export depotpositions , areas ; var podvozky , zbrane ; export pos1side , pos2side ; var pos1base , pos2base ; var left_score , right_score ; export debug , ctf ; export mp_sides_teams_ , mp_sides_nations_ , mp_sides_positions_ , mp_sides_players_counts_ ; var cft_01 , cft_02 , cft_03 , cft_04 , cft_05 , cft_06 , cft_07 ; export nonctf_10 , nonctf_11 , nonctf_12 , nonctf_13 ; var stmp , stmp2 , cl ; export function starting_ctf ; begin
8617: LD_INT 0
8619: PPUSH
// cft_01 = 01 ;
8620: LD_ADDR_LOC 30
8624: PUSH
8625: LD_INT 1
8627: ST_TO_ADDR
// cft_02 = 02 ;
8628: LD_ADDR_LOC 31
8632: PUSH
8633: LD_INT 2
8635: ST_TO_ADDR
// cft_03 = 03 ;
8636: LD_ADDR_LOC 32
8640: PUSH
8641: LD_INT 3
8643: ST_TO_ADDR
// cft_04 = 04 ;
8644: LD_ADDR_LOC 33
8648: PUSH
8649: LD_INT 4
8651: ST_TO_ADDR
// cft_05 = 05 ;
8652: LD_ADDR_LOC 34
8656: PUSH
8657: LD_INT 5
8659: ST_TO_ADDR
// cft_06 = 06 ;
8660: LD_ADDR_LOC 35
8664: PUSH
8665: LD_INT 6
8667: ST_TO_ADDR
// cft_07 = 07 ;
8668: LD_ADDR_LOC 36
8672: PUSH
8673: LD_INT 7
8675: ST_TO_ADDR
// nonctf_10 = 10 ;
8676: LD_ADDR_EXP 45
8680: PUSH
8681: LD_INT 10
8683: ST_TO_ADDR
// nonctf_11 = 11 ;
8684: LD_ADDR_EXP 46
8688: PUSH
8689: LD_INT 11
8691: ST_TO_ADDR
// nonctf_12 = 12 ;
8692: LD_ADDR_EXP 47
8696: PUSH
8697: LD_INT 12
8699: ST_TO_ADDR
// nonctf_13 = 13 ;
8700: LD_ADDR_EXP 48
8704: PUSH
8705: LD_INT 13
8707: ST_TO_ADDR
// disable ( cft_01 ) ;
8708: LD_LOC 30
8712: DISABLE_MARKED
// disable ( cft_02 ) ;
8713: LD_LOC 31
8717: DISABLE_MARKED
// disable ( cft_03 ) ;
8718: LD_LOC 32
8722: DISABLE_MARKED
// disable ( cft_04 ) ;
8723: LD_LOC 33
8727: DISABLE_MARKED
// disable ( cft_05 ) ;
8728: LD_LOC 34
8732: DISABLE_MARKED
// disable ( cft_06 ) ;
8733: LD_LOC 35
8737: DISABLE_MARKED
// disable ( cft_07 ) ;
8738: LD_LOC 36
8742: DISABLE_MARKED
// disable ( nonctf_10 ) ;
8743: LD_EXP 45
8747: DISABLE_MARKED
// disable ( nonctf_11 ) ;
8748: LD_EXP 46
8752: DISABLE_MARKED
// disable ( nonctf_12 ) ;
8753: LD_EXP 47
8757: DISABLE_MARKED
// disable ( nonctf_13 ) ;
8758: LD_EXP 48
8762: DISABLE_MARKED
// debug = false ;
8763: LD_ADDR_EXP 39
8767: PUSH
8768: LD_INT 0
8770: ST_TO_ADDR
// if not multiplayer then
8771: LD_OWVAR 4
8775: NOT
8776: IFFALSE 8936
// begin mp_sides_teams_ = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8778: LD_ADDR_EXP 41
8782: PUSH
8783: LD_INT 0
8785: PUSH
8786: LD_INT 0
8788: PUSH
8789: LD_INT 0
8791: PUSH
8792: LD_INT 0
8794: PUSH
8795: LD_INT 0
8797: PUSH
8798: LD_INT 0
8800: PUSH
8801: LD_INT 0
8803: PUSH
8804: LD_INT 0
8806: PUSH
8807: EMPTY
8808: LIST
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: ST_TO_ADDR
// mp_sides_nations_ = [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8817: LD_ADDR_EXP 42
8821: PUSH
8822: LD_INT 1
8824: PUSH
8825: LD_INT 2
8827: PUSH
8828: LD_INT 0
8830: PUSH
8831: LD_INT 0
8833: PUSH
8834: LD_INT 0
8836: PUSH
8837: LD_INT 0
8839: PUSH
8840: LD_INT 0
8842: PUSH
8843: LD_INT 0
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: ST_TO_ADDR
// mp_sides_positions_ = [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8856: LD_ADDR_EXP 43
8860: PUSH
8861: LD_INT 1
8863: PUSH
8864: LD_INT 2
8866: PUSH
8867: LD_INT 0
8869: PUSH
8870: LD_INT 0
8872: PUSH
8873: LD_INT 0
8875: PUSH
8876: LD_INT 0
8878: PUSH
8879: LD_INT 0
8881: PUSH
8882: LD_INT 0
8884: PUSH
8885: EMPTY
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: ST_TO_ADDR
// mp_sides_players_counts_ = [ 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8895: LD_ADDR_EXP 44
8899: PUSH
8900: LD_INT 1
8902: PUSH
8903: LD_INT 1
8905: PUSH
8906: LD_INT 0
8908: PUSH
8909: LD_INT 0
8911: PUSH
8912: LD_INT 0
8914: PUSH
8915: LD_INT 0
8917: PUSH
8918: LD_INT 0
8920: PUSH
8921: LD_INT 0
8923: PUSH
8924: EMPTY
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: ST_TO_ADDR
// end else
8934: GO 8976
// begin mp_sides_teams_ = mp_sides_teams ;
8936: LD_ADDR_EXP 41
8940: PUSH
8941: LD_OWVAR 15
8945: ST_TO_ADDR
// mp_sides_nations_ = mp_sides_nations ;
8946: LD_ADDR_EXP 42
8950: PUSH
8951: LD_OWVAR 16
8955: ST_TO_ADDR
// mp_sides_positions_ = mp_sides_positions ;
8956: LD_ADDR_EXP 43
8960: PUSH
8961: LD_OWVAR 17
8965: ST_TO_ADDR
// mp_sides_players_counts_ = mp_sides_players_counts ;
8966: LD_ADDR_EXP 44
8970: PUSH
8971: LD_OWVAR 18
8975: ST_TO_ADDR
// end ; if debug then
8976: LD_EXP 39
8980: IFFALSE 9062
// begin debuglog ( [ side , your_side ] ) ;
8982: LD_STRING side
8984: PUSH
8985: LD_OWVAR 2
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: PPUSH
8994: CALL_OW 359
// debuglog ( [ teams , mp_sides_teams_ ] ) ;
8998: LD_STRING teams
9000: PUSH
9001: LD_EXP 41
9005: PUSH
9006: EMPTY
9007: LIST
9008: LIST
9009: PPUSH
9010: CALL_OW 359
// debuglog ( [ nations , mp_sides_nations_ ] ) ;
9014: LD_STRING nations
9016: PUSH
9017: LD_EXP 42
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: PPUSH
9026: CALL_OW 359
// debuglog ( [ positions , mp_sides_positions_ ] ) ;
9030: LD_STRING positions
9032: PUSH
9033: LD_EXP 43
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: PPUSH
9042: CALL_OW 359
// debuglog ( [ pl. counts , mp_sides_players_counts_ ] ) ;
9046: LD_STRING pl. counts
9048: PUSH
9049: LD_EXP 44
9053: PUSH
9054: EMPTY
9055: LIST
9056: LIST
9057: PPUSH
9058: CALL_OW 359
// end ; depotpositions = [ [ 34 , 60 , 1 ] , [ 185 , 60 , 4 ] ] ;
9062: LD_ADDR_EXP 35
9066: PUSH
9067: LD_INT 34
9069: PUSH
9070: LD_INT 60
9072: PUSH
9073: LD_INT 1
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: LIST
9080: PUSH
9081: LD_INT 185
9083: PUSH
9084: LD_INT 60
9086: PUSH
9087: LD_INT 4
9089: PUSH
9090: EMPTY
9091: LIST
9092: LIST
9093: LIST
9094: PUSH
9095: EMPTY
9096: LIST
9097: LIST
9098: ST_TO_ADDR
// areas = [ vlevo , vpravo ] ;
9099: LD_ADDR_EXP 36
9103: PUSH
9104: LD_INT 2
9106: PUSH
9107: LD_INT 3
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: ST_TO_ADDR
// if mp_game_type = 3 then
9114: LD_OWVAR 6
9118: PUSH
9119: LD_INT 3
9121: EQUAL
9122: IFFALSE 9130
// begin other_game ;
9124: CALL 12182 0 0
// exit ;
9128: GO 10578
// end ; ctf = true ;
9130: LD_ADDR_EXP 40
9134: PUSH
9135: LD_INT 1
9137: ST_TO_ADDR
// enable ( cft_01 ) ;
9138: LD_LOC 30
9142: ENABLE_MARKED
// enable ( cft_02 ) ;
9143: LD_LOC 31
9147: ENABLE_MARKED
// enable ( cft_05 ) ;
9148: LD_LOC 34
9152: ENABLE_MARKED
// enable ( cft_06 ) ;
9153: LD_LOC 35
9157: ENABLE_MARKED
// enable ( cft_07 ) ;
9158: LD_LOC 36
9162: ENABLE_MARKED
// podvozky = [ us_medium_wheeled , ar_medium_trike , ru_medium_wheeled ] ;
9163: LD_ADDR_LOC 24
9167: PUSH
9168: LD_INT 2
9170: PUSH
9171: LD_INT 13
9173: PUSH
9174: LD_INT 21
9176: PUSH
9177: EMPTY
9178: LIST
9179: LIST
9180: LIST
9181: ST_TO_ADDR
// zbrane = [ us_cargo_bay , ar_cargo_bay , ru_cargo_bay ] ;
9182: LD_ADDR_LOC 25
9186: PUSH
9187: LD_INT 12
9189: PUSH
9190: LD_INT 32
9192: PUSH
9193: LD_INT 51
9195: PUSH
9196: EMPTY
9197: LIST
9198: LIST
9199: LIST
9200: ST_TO_ADDR
// left_score = 0 ;
9201: LD_ADDR_LOC 28
9205: PUSH
9206: LD_INT 0
9208: ST_TO_ADDR
// right_score = 0 ;
9209: LD_ADDR_LOC 29
9213: PUSH
9214: LD_INT 0
9216: ST_TO_ADDR
// if multiplayer then
9217: LD_OWVAR 4
9221: IFFALSE 9277
// begin lidi = getmultiplayersetting ( 1 ) ;
9223: LD_ADDR_EXP 30
9227: PUSH
9228: LD_INT 1
9230: PPUSH
9231: CALL_OW 426
9235: ST_TO_ADDR
// krabice = getmultiplayersetting ( 2 ) ;
9236: LD_ADDR_EXP 31
9240: PUSH
9241: LD_INT 2
9243: PPUSH
9244: CALL_OW 426
9248: ST_TO_ADDR
// opoce = getmultiplayersetting ( 3 ) ;
9249: LD_ADDR_EXP 32
9253: PUSH
9254: LD_INT 3
9256: PPUSH
9257: CALL_OW 426
9261: ST_TO_ADDR
// time = getmultiplayersetting ( 4 ) ;
9262: LD_ADDR_LOC 19
9266: PUSH
9267: LD_INT 4
9269: PPUSH
9270: CALL_OW 426
9274: ST_TO_ADDR
// end else
9275: GO 9309
// begin lidi = 1 ;
9277: LD_ADDR_EXP 30
9281: PUSH
9282: LD_INT 1
9284: ST_TO_ADDR
// krabice = 1 ;
9285: LD_ADDR_EXP 31
9289: PUSH
9290: LD_INT 1
9292: ST_TO_ADDR
// opoce = 3 ;
9293: LD_ADDR_EXP 32
9297: PUSH
9298: LD_INT 3
9300: ST_TO_ADDR
// time = 2 ;
9301: LD_ADDR_LOC 19
9305: PUSH
9306: LD_INT 2
9308: ST_TO_ADDR
// end ; case lidi of 0 :
9309: LD_EXP 30
9313: PUSH
9314: LD_INT 0
9316: DOUBLE
9317: EQUAL
9318: IFTRUE 9322
9320: GO 9333
9322: POP
// lidi = 9 ; 1 :
9323: LD_ADDR_EXP 30
9327: PUSH
9328: LD_INT 9
9330: ST_TO_ADDR
9331: GO 9410
9333: LD_INT 1
9335: DOUBLE
9336: EQUAL
9337: IFTRUE 9341
9339: GO 9352
9341: POP
// lidi = 13 ; 2 :
9342: LD_ADDR_EXP 30
9346: PUSH
9347: LD_INT 13
9349: ST_TO_ADDR
9350: GO 9410
9352: LD_INT 2
9354: DOUBLE
9355: EQUAL
9356: IFTRUE 9360
9358: GO 9371
9360: POP
// lidi = 19 ; 3 :
9361: LD_ADDR_EXP 30
9365: PUSH
9366: LD_INT 19
9368: ST_TO_ADDR
9369: GO 9410
9371: LD_INT 3
9373: DOUBLE
9374: EQUAL
9375: IFTRUE 9379
9377: GO 9390
9379: POP
// lidi = 23 ; 4 :
9380: LD_ADDR_EXP 30
9384: PUSH
9385: LD_INT 23
9387: ST_TO_ADDR
9388: GO 9410
9390: LD_INT 4
9392: DOUBLE
9393: EQUAL
9394: IFTRUE 9398
9396: GO 9409
9398: POP
// lidi = 29 ; end ;
9399: LD_ADDR_EXP 30
9403: PUSH
9404: LD_INT 29
9406: ST_TO_ADDR
9407: GO 9410
9409: POP
// case krabice of 0 :
9410: LD_EXP 31
9414: PUSH
9415: LD_INT 0
9417: DOUBLE
9418: EQUAL
9419: IFTRUE 9423
9421: GO 9434
9423: POP
// cperiode = 1 1$30 ; 1 :
9424: LD_ADDR_EXP 34
9428: PUSH
9429: LD_INT 3150
9431: ST_TO_ADDR
9432: GO 9473
9434: LD_INT 1
9436: DOUBLE
9437: EQUAL
9438: IFTRUE 9442
9440: GO 9453
9442: POP
// cperiode = 1 1$00 ; 2 :
9443: LD_ADDR_EXP 34
9447: PUSH
9448: LD_INT 2100
9450: ST_TO_ADDR
9451: GO 9473
9453: LD_INT 2
9455: DOUBLE
9456: EQUAL
9457: IFTRUE 9461
9459: GO 9472
9461: POP
// cperiode = 0 0$30 ; end ;
9462: LD_ADDR_EXP 34
9466: PUSH
9467: LD_INT 1050
9469: ST_TO_ADDR
9470: GO 9473
9472: POP
// cper = 0 0$10 ;
9473: LD_ADDR_EXP 33
9477: PUSH
9478: LD_INT 350
9480: ST_TO_ADDR
// case opoce of 0 :
9481: LD_EXP 32
9485: PUSH
9486: LD_INT 0
9488: DOUBLE
9489: EQUAL
9490: IFTRUE 9494
9492: GO 9505
9494: POP
// opoce = 0 ; 1 :
9495: LD_ADDR_EXP 32
9499: PUSH
9500: LD_INT 0
9502: ST_TO_ADDR
9503: GO 9620
9505: LD_INT 1
9507: DOUBLE
9508: EQUAL
9509: IFTRUE 9513
9511: GO 9524
9513: POP
// opoce = 3 ; 2 :
9514: LD_ADDR_EXP 32
9518: PUSH
9519: LD_INT 3
9521: ST_TO_ADDR
9522: GO 9620
9524: LD_INT 2
9526: DOUBLE
9527: EQUAL
9528: IFTRUE 9532
9530: GO 9543
9532: POP
// opoce = 7 ; 3 :
9533: LD_ADDR_EXP 32
9537: PUSH
9538: LD_INT 7
9540: ST_TO_ADDR
9541: GO 9620
9543: LD_INT 3
9545: DOUBLE
9546: EQUAL
9547: IFTRUE 9551
9549: GO 9562
9551: POP
// opoce = 11 ; 4 :
9552: LD_ADDR_EXP 32
9556: PUSH
9557: LD_INT 11
9559: ST_TO_ADDR
9560: GO 9620
9562: LD_INT 4
9564: DOUBLE
9565: EQUAL
9566: IFTRUE 9570
9568: GO 9581
9570: POP
// opoce = 15 ; 5 :
9571: LD_ADDR_EXP 32
9575: PUSH
9576: LD_INT 15
9578: ST_TO_ADDR
9579: GO 9620
9581: LD_INT 5
9583: DOUBLE
9584: EQUAL
9585: IFTRUE 9589
9587: GO 9600
9589: POP
// opoce = 19 ; 6 :
9590: LD_ADDR_EXP 32
9594: PUSH
9595: LD_INT 19
9597: ST_TO_ADDR
9598: GO 9620
9600: LD_INT 6
9602: DOUBLE
9603: EQUAL
9604: IFTRUE 9608
9606: GO 9619
9608: POP
// opoce = 23 ; end ;
9609: LD_ADDR_EXP 32
9613: PUSH
9614: LD_INT 23
9616: ST_TO_ADDR
9617: GO 9620
9619: POP
// case time of 0 :
9620: LD_LOC 19
9624: PUSH
9625: LD_INT 0
9627: DOUBLE
9628: EQUAL
9629: IFTRUE 9633
9631: GO 9648
9633: POP
// time = 30 * 60 ; 1 :
9634: LD_ADDR_LOC 19
9638: PUSH
9639: LD_INT 30
9641: PUSH
9642: LD_INT 60
9644: MUL
9645: ST_TO_ADDR
9646: GO 9764
9648: LD_INT 1
9650: DOUBLE
9651: EQUAL
9652: IFTRUE 9656
9654: GO 9671
9656: POP
// time = 40 * 60 ; 2 :
9657: LD_ADDR_LOC 19
9661: PUSH
9662: LD_INT 40
9664: PUSH
9665: LD_INT 60
9667: MUL
9668: ST_TO_ADDR
9669: GO 9764
9671: LD_INT 2
9673: DOUBLE
9674: EQUAL
9675: IFTRUE 9679
9677: GO 9694
9679: POP
// time = 50 * 60 ; 3 :
9680: LD_ADDR_LOC 19
9684: PUSH
9685: LD_INT 50
9687: PUSH
9688: LD_INT 60
9690: MUL
9691: ST_TO_ADDR
9692: GO 9764
9694: LD_INT 3
9696: DOUBLE
9697: EQUAL
9698: IFTRUE 9702
9700: GO 9717
9702: POP
// time = 60 * 60 ; 4 :
9703: LD_ADDR_LOC 19
9707: PUSH
9708: LD_INT 60
9710: PUSH
9711: LD_INT 60
9713: MUL
9714: ST_TO_ADDR
9715: GO 9764
9717: LD_INT 4
9719: DOUBLE
9720: EQUAL
9721: IFTRUE 9725
9723: GO 9740
9725: POP
// time = 90 * 60 ; 5 :
9726: LD_ADDR_LOC 19
9730: PUSH
9731: LD_INT 90
9733: PUSH
9734: LD_INT 60
9736: MUL
9737: ST_TO_ADDR
9738: GO 9764
9740: LD_INT 5
9742: DOUBLE
9743: EQUAL
9744: IFTRUE 9748
9746: GO 9763
9748: POP
// time = 120 * 60 ; end ;
9749: LD_ADDR_LOC 19
9753: PUSH
9754: LD_INT 120
9756: PUSH
9757: LD_INT 60
9759: MUL
9760: ST_TO_ADDR
9761: GO 9764
9763: POP
// enable ( cft_03 ) ;
9764: LD_LOC 32
9768: ENABLE_MARKED
// refresh ;
9769: CALL 10583 0 0
// for stmp = 1 to 8 do
9773: LD_ADDR_LOC 37
9777: PUSH
9778: DOUBLE
9779: LD_INT 1
9781: DEC
9782: ST_TO_ADDR
9783: LD_INT 8
9785: PUSH
9786: FOR_TO
9787: IFFALSE 10156
// if mp_sides_nations_ [ stmp ] then
9789: LD_EXP 42
9793: PUSH
9794: LD_LOC 37
9798: ARRAY
9799: IFFALSE 10154
// begin if mp_sides_positions_ [ stmp ] = 1 then
9801: LD_EXP 43
9805: PUSH
9806: LD_LOC 37
9810: ARRAY
9811: PUSH
9812: LD_INT 1
9814: EQUAL
9815: IFFALSE 9829
// pos1side = stmp else
9817: LD_ADDR_EXP 37
9821: PUSH
9822: LD_LOC 37
9826: ST_TO_ADDR
9827: GO 9839
// pos2side = stmp ;
9829: LD_ADDR_EXP 38
9833: PUSH
9834: LD_LOC 37
9838: ST_TO_ADDR
// uc_side = stmp ;
9839: LD_ADDR_OWVAR 20
9843: PUSH
9844: LD_LOC 37
9848: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ stmp ] ;
9849: LD_ADDR_OWVAR 21
9853: PUSH
9854: LD_EXP 42
9858: PUSH
9859: LD_LOC 37
9863: ARRAY
9864: ST_TO_ADDR
// bc_type = b_depot ;
9865: LD_ADDR_OWVAR 42
9869: PUSH
9870: LD_INT 0
9872: ST_TO_ADDR
// bc_level = 1 ;
9873: LD_ADDR_OWVAR 43
9877: PUSH
9878: LD_INT 1
9880: ST_TO_ADDR
// createandplacebuildingxyd ( depotpositions [ mp_sides_positions_ [ stmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 2 ] , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 3 ] ) ;
9881: LD_EXP 35
9885: PUSH
9886: LD_EXP 43
9890: PUSH
9891: LD_LOC 37
9895: ARRAY
9896: ARRAY
9897: PUSH
9898: LD_INT 1
9900: ARRAY
9901: PPUSH
9902: LD_EXP 35
9906: PUSH
9907: LD_EXP 43
9911: PUSH
9912: LD_LOC 37
9916: ARRAY
9917: ARRAY
9918: PUSH
9919: LD_INT 2
9921: ARRAY
9922: PPUSH
9923: LD_EXP 35
9927: PUSH
9928: LD_EXP 43
9932: PUSH
9933: LD_LOC 37
9937: ARRAY
9938: ARRAY
9939: PUSH
9940: LD_INT 3
9942: ARRAY
9943: PPUSH
9944: CALL_OW 47
// setbattleflag ( stmp , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ stmp ] ] [ 2 ] , [ [ bfo_defend_bonus_human , 150 ] , [ bfo_defend_bonus_vehicle , 10 ] , [ bfo_defend_bonus_building , 0 ] , [ bfo_range , 17 ] , [ bfo_height , 100 ] ] ) ;
9948: LD_LOC 37
9952: PPUSH
9953: LD_EXP 35
9957: PUSH
9958: LD_EXP 43
9962: PUSH
9963: LD_LOC 37
9967: ARRAY
9968: ARRAY
9969: PUSH
9970: LD_INT 1
9972: ARRAY
9973: PPUSH
9974: LD_EXP 35
9978: PUSH
9979: LD_EXP 43
9983: PUSH
9984: LD_LOC 37
9988: ARRAY
9989: ARRAY
9990: PUSH
9991: LD_INT 2
9993: ARRAY
9994: PPUSH
9995: LD_INT 1
9997: PUSH
9998: LD_INT 150
10000: PUSH
10001: EMPTY
10002: LIST
10003: LIST
10004: PUSH
10005: LD_INT 2
10007: PUSH
10008: LD_INT 10
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: LD_INT 3
10017: PUSH
10018: LD_INT 0
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: PUSH
10025: LD_INT 10
10027: PUSH
10028: LD_INT 17
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: PUSH
10035: LD_INT 20
10037: PUSH
10038: LD_INT 100
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: PPUSH
10052: CALL_OW 418
// cl = class_engineer ;
10056: LD_ADDR_LOC 39
10060: PUSH
10061: LD_INT 2
10063: ST_TO_ADDR
// for stmp2 = 1 to lidi do
10064: LD_ADDR_LOC 38
10068: PUSH
10069: DOUBLE
10070: LD_INT 1
10072: DEC
10073: ST_TO_ADDR
10074: LD_EXP 30
10078: PUSH
10079: FOR_TO
10080: IFFALSE 10152
// begin if stmp2 >= lidi / 2 then
10082: LD_LOC 38
10086: PUSH
10087: LD_EXP 30
10091: PUSH
10092: LD_INT 2
10094: DIVREAL
10095: GREATEREQUAL
10096: IFFALSE 10106
// cl = class_soldier ;
10098: LD_ADDR_LOC 39
10102: PUSH
10103: LD_INT 1
10105: ST_TO_ADDR
// preparehuman ( 0 , cl , 1 ) ;
10106: LD_INT 0
10108: PPUSH
10109: LD_LOC 39
10113: PPUSH
10114: LD_INT 1
10116: PPUSH
10117: CALL_OW 380
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ stmp ] ] , false ) ;
10121: CALL_OW 44
10125: PPUSH
10126: LD_EXP 36
10130: PUSH
10131: LD_EXP 43
10135: PUSH
10136: LD_LOC 37
10140: ARRAY
10141: ARRAY
10142: PPUSH
10143: LD_INT 0
10145: PPUSH
10146: CALL_OW 49
// end ;
10150: GO 10079
10152: POP
10153: POP
// end ;
10154: GO 9786
10156: POP
10157: POP
// depot1 = filterunitsinarea ( vlevo , [ [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
10158: LD_ADDR_LOC 20
10162: PUSH
10163: LD_INT 2
10165: PPUSH
10166: LD_INT 21
10168: PUSH
10169: LD_INT 3
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: PUSH
10176: LD_INT 30
10178: PUSH
10179: LD_INT 0
10181: PUSH
10182: EMPTY
10183: LIST
10184: LIST
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: PPUSH
10190: CALL_OW 70
10194: PUSH
10195: LD_INT 1
10197: ARRAY
10198: ST_TO_ADDR
// depot2 = filterunitsinarea ( vpravo , [ [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
10199: LD_ADDR_LOC 21
10203: PUSH
10204: LD_INT 3
10206: PPUSH
10207: LD_INT 21
10209: PUSH
10210: LD_INT 3
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: PUSH
10217: LD_INT 30
10219: PUSH
10220: LD_INT 0
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: PPUSH
10231: CALL_OW 70
10235: PUSH
10236: LD_INT 1
10238: ARRAY
10239: ST_TO_ADDR
// pos1base = getbase ( depot1 ) ;
10240: LD_ADDR_LOC 26
10244: PUSH
10245: LD_LOC 20
10249: PPUSH
10250: CALL_OW 274
10254: ST_TO_ADDR
// pos2base = getbase ( depot2 ) ;
10255: LD_ADDR_LOC 27
10259: PUSH
10260: LD_LOC 21
10264: PPUSH
10265: CALL_OW 274
10269: ST_TO_ADDR
// uc_side = 0 ;
10270: LD_ADDR_OWVAR 20
10274: PUSH
10275: LD_INT 0
10277: ST_TO_ADDR
// uc_nation = nation_nature ;
10278: LD_ADDR_OWVAR 21
10282: PUSH
10283: LD_INT 0
10285: ST_TO_ADDR
// for stmp = 1 to opoce do
10286: LD_ADDR_LOC 37
10290: PUSH
10291: DOUBLE
10292: LD_INT 1
10294: DEC
10295: ST_TO_ADDR
10296: LD_EXP 32
10300: PUSH
10301: FOR_TO
10302: IFFALSE 10334
// begin preparehuman ( 0 , class_apeman , 0 ) ;
10304: LD_INT 0
10306: PPUSH
10307: LD_INT 12
10309: PPUSH
10310: LD_INT 0
10312: PPUSH
10313: CALL_OW 380
// placeunitarea ( createhuman , les , false ) ;
10317: CALL_OW 44
10321: PPUSH
10322: LD_INT 4
10324: PPUSH
10325: LD_INT 0
10327: PPUSH
10328: CALL_OW 49
// end ;
10332: GO 10301
10334: POP
10335: POP
// uc_side = pos2side ;
10336: LD_ADDR_OWVAR 20
10340: PUSH
10341: LD_EXP 38
10345: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos2side ] ;
10346: LD_ADDR_OWVAR 21
10350: PUSH
10351: LD_EXP 42
10355: PUSH
10356: LD_EXP 38
10360: ARRAY
10361: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
10362: LD_ADDR_OWVAR 37
10366: PUSH
10367: LD_LOC 24
10371: PUSH
10372: LD_OWVAR 21
10376: ARRAY
10377: ST_TO_ADDR
// vc_control = control_manual ;
10378: LD_ADDR_OWVAR 38
10382: PUSH
10383: LD_INT 1
10385: ST_TO_ADDR
// vc_engine = engine_siberite ;
10386: LD_ADDR_OWVAR 39
10390: PUSH
10391: LD_INT 3
10393: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
10394: LD_ADDR_OWVAR 40
10398: PUSH
10399: LD_LOC 25
10403: PUSH
10404: LD_OWVAR 21
10408: ARRAY
10409: ST_TO_ADDR
// vlajka1 = createvehicle ;
10410: LD_ADDR_LOC 22
10414: PUSH
10415: CALL_OW 45
10419: ST_TO_ADDR
// placeunitxy ( vlajka1 , 76 , 60 , false ) ;
10420: LD_LOC 22
10424: PPUSH
10425: LD_INT 76
10427: PPUSH
10428: LD_INT 60
10430: PPUSH
10431: LD_INT 0
10433: PPUSH
10434: CALL_OW 48
// uc_side = pos1side ;
10438: LD_ADDR_OWVAR 20
10442: PUSH
10443: LD_EXP 37
10447: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos1side ] ;
10448: LD_ADDR_OWVAR 21
10452: PUSH
10453: LD_EXP 42
10457: PUSH
10458: LD_EXP 37
10462: ARRAY
10463: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
10464: LD_ADDR_OWVAR 37
10468: PUSH
10469: LD_LOC 24
10473: PUSH
10474: LD_OWVAR 21
10478: ARRAY
10479: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
10480: LD_ADDR_OWVAR 40
10484: PUSH
10485: LD_LOC 25
10489: PUSH
10490: LD_OWVAR 21
10494: ARRAY
10495: ST_TO_ADDR
// vlajka2 = createvehicle ;
10496: LD_ADDR_LOC 23
10500: PUSH
10501: CALL_OW 45
10505: ST_TO_ADDR
// placeunitxy ( vlajka2 , 143 , 60 , false ) ;
10506: LD_LOC 23
10510: PPUSH
10511: LD_INT 143
10513: PPUSH
10514: LD_INT 60
10516: PPUSH
10517: LD_INT 0
10519: PPUSH
10520: CALL_OW 48
// case mp_sides_positions_ [ your_side ] of 1 :
10524: LD_EXP 43
10528: PUSH
10529: LD_OWVAR 2
10533: ARRAY
10534: PUSH
10535: LD_INT 1
10537: DOUBLE
10538: EQUAL
10539: IFTRUE 10543
10541: GO 10556
10543: POP
// centernowonxy ( 44 , 60 ) ; 2 :
10544: LD_INT 44
10546: PPUSH
10547: LD_INT 60
10549: PPUSH
10550: CALL_OW 86
10554: GO 10578
10556: LD_INT 2
10558: DOUBLE
10559: EQUAL
10560: IFTRUE 10564
10562: GO 10577
10564: POP
// centernowonxy ( 175 , 60 ) ; end ;
10565: LD_INT 175
10567: PPUSH
10568: LD_INT 60
10570: PPUSH
10571: CALL_OW 86
10575: GO 10578
10577: POP
// end ;
10578: LD_VAR 0 1
10582: RET
// function refresh ; var tmp , tmp1 , tmp2 , tmp3 , tmp4 ; begin
10583: LD_INT 0
10585: PPUSH
10586: PPUSH
10587: PPUSH
10588: PPUSH
10589: PPUSH
10590: PPUSH
// tmp = time div 60 ;
10591: LD_ADDR_VAR 0 2
10595: PUSH
10596: LD_LOC 19
10600: PUSH
10601: LD_INT 60
10603: DIV
10604: ST_TO_ADDR
// if tmp < 10 then
10605: LD_VAR 0 2
10609: PUSH
10610: LD_INT 10
10612: LESS
10613: IFFALSE 10631
// tmp1 = 0 & tmp else
10615: LD_ADDR_VAR 0 3
10619: PUSH
10620: LD_STRING 0
10622: PUSH
10623: LD_VAR 0 2
10627: STR
10628: ST_TO_ADDR
10629: GO 10645
// tmp1 =  & tmp ;
10631: LD_ADDR_VAR 0 3
10635: PUSH
10636: LD_STRING 
10638: PUSH
10639: LD_VAR 0 2
10643: STR
10644: ST_TO_ADDR
// tmp = time mod 60 ;
10645: LD_ADDR_VAR 0 2
10649: PUSH
10650: LD_LOC 19
10654: PUSH
10655: LD_INT 60
10657: MOD
10658: ST_TO_ADDR
// if tmp < 10 then
10659: LD_VAR 0 2
10663: PUSH
10664: LD_INT 10
10666: LESS
10667: IFFALSE 10685
// tmp2 = 0 & tmp else
10669: LD_ADDR_VAR 0 4
10673: PUSH
10674: LD_STRING 0
10676: PUSH
10677: LD_VAR 0 2
10681: STR
10682: ST_TO_ADDR
10683: GO 10699
// tmp2 =  & tmp ;
10685: LD_ADDR_VAR 0 4
10689: PUSH
10690: LD_STRING 
10692: PUSH
10693: LD_VAR 0 2
10697: STR
10698: ST_TO_ADDR
// if left_score < 10 then
10699: LD_LOC 28
10703: PUSH
10704: LD_INT 10
10706: LESS
10707: IFFALSE 10725
// tmp3 = 0 & left_score else
10709: LD_ADDR_VAR 0 5
10713: PUSH
10714: LD_STRING 0
10716: PUSH
10717: LD_LOC 28
10721: STR
10722: ST_TO_ADDR
10723: GO 10739
// tmp3 =  & left_score ;
10725: LD_ADDR_VAR 0 5
10729: PUSH
10730: LD_STRING 
10732: PUSH
10733: LD_LOC 28
10737: STR
10738: ST_TO_ADDR
// if right_score < 10 then
10739: LD_LOC 29
10743: PUSH
10744: LD_INT 10
10746: LESS
10747: IFFALSE 10765
// tmp4 = 0 & right_score else
10749: LD_ADDR_VAR 0 6
10753: PUSH
10754: LD_STRING 0
10756: PUSH
10757: LD_LOC 29
10761: STR
10762: ST_TO_ADDR
10763: GO 10779
// tmp4 =  & right_score ;
10765: LD_ADDR_VAR 0 6
10769: PUSH
10770: LD_STRING 
10772: PUSH
10773: LD_LOC 29
10777: STR
10778: ST_TO_ADDR
// display_strings = [ Score:  & tmp3 &  to  & tmp4 , Time left:  & tmp1 & : & tmp2 ] ;
10779: LD_ADDR_OWVAR 47
10783: PUSH
10784: LD_STRING Score: 
10786: PUSH
10787: LD_VAR 0 5
10791: STR
10792: PUSH
10793: LD_STRING  to 
10795: STR
10796: PUSH
10797: LD_VAR 0 6
10801: STR
10802: PUSH
10803: LD_STRING Time left: 
10805: PUSH
10806: LD_VAR 0 3
10810: STR
10811: PUSH
10812: LD_STRING :
10814: STR
10815: PUSH
10816: LD_VAR 0 4
10820: STR
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: ST_TO_ADDR
// end ;
10826: LD_VAR 0 1
10830: RET
// every 0 0$1 marked 03 do
10831: GO 10833
10833: DISABLE
// begin time = time - 1 ;
10834: LD_ADDR_LOC 19
10838: PUSH
10839: LD_LOC 19
10843: PUSH
10844: LD_INT 1
10846: MINUS
10847: ST_TO_ADDR
// refresh ;
10848: CALL 10583 0 0
// if not time then
10852: LD_LOC 19
10856: NOT
10857: IFFALSE 10923
// if mp_sides_positions_ [ your_side ] = 1 then
10859: LD_EXP 43
10863: PUSH
10864: LD_OWVAR 2
10868: ARRAY
10869: PUSH
10870: LD_INT 1
10872: EQUAL
10873: IFFALSE 10899
// if left_score >= right_score then
10875: LD_LOC 28
10879: PUSH
10880: LD_LOC 29
10884: GREATEREQUAL
10885: IFFALSE 10893
// youwininmultiplayer else
10887: CALL_OW 106
10891: GO 10897
// youlostinmultiplayer else
10893: CALL_OW 107
10897: GO 10921
// if right_score >= left_score then
10899: LD_LOC 29
10903: PUSH
10904: LD_LOC 28
10908: GREATEREQUAL
10909: IFFALSE 10917
// youwininmultiplayer else
10911: CALL_OW 106
10915: GO 10921
// youlostinmultiplayer else
10917: CALL_OW 107
10921: GO 10924
// enable ;
10923: ENABLE
// end ;
10924: END
// every 0 0$10 marked 19 do
10925: GO 10927
10927: DISABLE
// begin cper = cper - 0 0$10 ;
10928: LD_ADDR_EXP 33
10932: PUSH
10933: LD_EXP 33
10937: PUSH
10938: LD_INT 350
10940: MINUS
10941: ST_TO_ADDR
// if cper = 0 then
10942: LD_EXP 33
10946: PUSH
10947: LD_INT 0
10949: EQUAL
10950: IFFALSE 10988
// begin createcratesarea ( 5 , vlevoex , true ) ;
10952: LD_INT 5
10954: PPUSH
10955: LD_INT 5
10957: PPUSH
10958: LD_INT 1
10960: PPUSH
10961: CALL_OW 55
// createcratesarea ( 5 , vpravoex , true ) ;
10965: LD_INT 5
10967: PPUSH
10968: LD_INT 6
10970: PPUSH
10971: LD_INT 1
10973: PPUSH
10974: CALL_OW 55
// cper = cperiode ;
10978: LD_ADDR_EXP 33
10982: PUSH
10983: LD_EXP 34
10987: ST_TO_ADDR
// end ; enable ;
10988: ENABLE
// end ;
10989: END
// every 5 trigger getlives ( depot1 ) < 500 marked 01 do
10990: LD_LOC 20
10994: PPUSH
10995: CALL_OW 256
10999: PUSH
11000: LD_INT 500
11002: LESS
11003: IFFALSE 11021
11005: GO 11007
11007: DISABLE
// begin setlives ( depot1 , 750 ) ;
11008: LD_LOC 20
11012: PPUSH
11013: LD_INT 750
11015: PPUSH
11016: CALL_OW 234
// enable ;
11020: ENABLE
// end ;
11021: END
// every 5 trigger getlives ( depot2 ) < 500 marked 02 do
11022: LD_LOC 21
11026: PPUSH
11027: CALL_OW 256
11031: PUSH
11032: LD_INT 500
11034: LESS
11035: IFFALSE 11053
11037: GO 11039
11039: DISABLE
// begin setlives ( depot2 , 750 ) ;
11040: LD_LOC 21
11044: PPUSH
11045: LD_INT 750
11047: PPUSH
11048: CALL_OW 234
// enable ;
11052: ENABLE
// end ;
11053: END
// on unitdestroyed ( un ) do var radius ;
11054: LD_INT 0
11056: PPUSH
// begin if GetSide ( un ) = 0 and GetClass ( un ) = class_apeman then
11057: LD_VAR 0 1
11061: PPUSH
11062: CALL_OW 255
11066: PUSH
11067: LD_INT 0
11069: EQUAL
11070: PUSH
11071: LD_VAR 0 1
11075: PPUSH
11076: CALL_OW 257
11080: PUSH
11081: LD_INT 12
11083: EQUAL
11084: AND
11085: IFFALSE 11091
// CheckApemenAmount ;
11087: CALL 7399 0 0
// if mp_game_type <> 1 then
11091: LD_OWVAR 6
11095: PUSH
11096: LD_INT 1
11098: NONEQUAL
11099: IFFALSE 11103
// exit ;
11101: GO 11397
// if un = vlajka1 then
11103: LD_VAR 0 1
11107: PUSH
11108: LD_LOC 22
11112: EQUAL
11113: IFFALSE 11251
// begin uc_side = pos2side ;
11115: LD_ADDR_OWVAR 20
11119: PUSH
11120: LD_EXP 38
11124: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos2side ] ;
11125: LD_ADDR_OWVAR 21
11129: PUSH
11130: LD_EXP 42
11134: PUSH
11135: LD_EXP 38
11139: ARRAY
11140: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11141: LD_ADDR_OWVAR 37
11145: PUSH
11146: LD_LOC 24
11150: PUSH
11151: LD_OWVAR 21
11155: ARRAY
11156: ST_TO_ADDR
// vc_control = control_manual ;
11157: LD_ADDR_OWVAR 38
11161: PUSH
11162: LD_INT 1
11164: ST_TO_ADDR
// vc_engine = engine_siberite ;
11165: LD_ADDR_OWVAR 39
11169: PUSH
11170: LD_INT 3
11172: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
11173: LD_ADDR_OWVAR 40
11177: PUSH
11178: LD_LOC 25
11182: PUSH
11183: LD_OWVAR 21
11187: ARRAY
11188: ST_TO_ADDR
// vlajka1 = createvehicle ;
11189: LD_ADDR_LOC 22
11193: PUSH
11194: CALL_OW 45
11198: ST_TO_ADDR
// radius = 2 ;
11199: LD_ADDR_VAR 0 2
11203: PUSH
11204: LD_INT 2
11206: ST_TO_ADDR
// while not placeunitxyr ( vlajka1 , 76 , 60 , radius , false ) do
11207: LD_LOC 22
11211: PPUSH
11212: LD_INT 76
11214: PPUSH
11215: LD_INT 60
11217: PPUSH
11218: LD_VAR 0 2
11222: PPUSH
11223: LD_INT 0
11225: PPUSH
11226: CALL_OW 50
11230: NOT
11231: IFFALSE 11249
// radius = radius + 1 ;
11233: LD_ADDR_VAR 0 2
11237: PUSH
11238: LD_VAR 0 2
11242: PUSH
11243: LD_INT 1
11245: PLUS
11246: ST_TO_ADDR
11247: GO 11207
// end else
11249: GO 11397
// if un = vlajka2 then
11251: LD_VAR 0 1
11255: PUSH
11256: LD_LOC 23
11260: EQUAL
11261: IFFALSE 11397
// begin uc_side = pos1side ;
11263: LD_ADDR_OWVAR 20
11267: PUSH
11268: LD_EXP 37
11272: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos1side ] ;
11273: LD_ADDR_OWVAR 21
11277: PUSH
11278: LD_EXP 42
11282: PUSH
11283: LD_EXP 37
11287: ARRAY
11288: ST_TO_ADDR
// vc_chassis = podvozky [ uc_nation ] ;
11289: LD_ADDR_OWVAR 37
11293: PUSH
11294: LD_LOC 24
11298: PUSH
11299: LD_OWVAR 21
11303: ARRAY
11304: ST_TO_ADDR
// vc_control = control_manual ;
11305: LD_ADDR_OWVAR 38
11309: PUSH
11310: LD_INT 1
11312: ST_TO_ADDR
// vc_engine = engine_siberite ;
11313: LD_ADDR_OWVAR 39
11317: PUSH
11318: LD_INT 3
11320: ST_TO_ADDR
// vc_weapon = zbrane [ uc_nation ] ;
11321: LD_ADDR_OWVAR 40
11325: PUSH
11326: LD_LOC 25
11330: PUSH
11331: LD_OWVAR 21
11335: ARRAY
11336: ST_TO_ADDR
// vlajka2 = createvehicle ;
11337: LD_ADDR_LOC 23
11341: PUSH
11342: CALL_OW 45
11346: ST_TO_ADDR
// radius = 2 ;
11347: LD_ADDR_VAR 0 2
11351: PUSH
11352: LD_INT 2
11354: ST_TO_ADDR
// while not placeunitxyr ( vlajka2 , 143 , 60 , radius , false ) do
11355: LD_LOC 23
11359: PPUSH
11360: LD_INT 143
11362: PPUSH
11363: LD_INT 60
11365: PPUSH
11366: LD_VAR 0 2
11370: PPUSH
11371: LD_INT 0
11373: PPUSH
11374: CALL_OW 50
11378: NOT
11379: IFFALSE 11397
// radius = radius + 1 ;
11381: LD_ADDR_VAR 0 2
11385: PUSH
11386: LD_VAR 0 2
11390: PUSH
11391: LD_INT 1
11393: PLUS
11394: ST_TO_ADDR
11395: GO 11355
// end ; end ;
11397: PPOPN 2
11399: END
// on vehiclecaptured ( vehnew , vehold , origside , hum ) marked 05 do var radius ;
11400: LD_INT 0
11402: PPUSH
// if ( vehold = vlajka1 ) then
11403: LD_VAR 0 2
11407: PUSH
11408: LD_LOC 22
11412: EQUAL
11413: IFFALSE 11566
// begin vlajka1 = vehnew ;
11415: LD_ADDR_LOC 22
11419: PUSH
11420: LD_VAR 0 1
11424: ST_TO_ADDR
// comexitvehicle ( vlajka1 ) ;
11425: LD_LOC 22
11429: PPUSH
11430: CALL_OW 121
// while isdrivenby ( vlajka1 ) do
11434: LD_LOC 22
11438: PPUSH
11439: CALL_OW 311
11443: IFFALSE 11454
// wait ( 2 ) ;
11445: LD_INT 2
11447: PPUSH
11448: CALL_OW 67
11452: GO 11434
// if getdistunitxy ( vlajka1 , 76 , 60 ) > 4 then
11454: LD_LOC 22
11458: PPUSH
11459: LD_INT 76
11461: PPUSH
11462: LD_INT 60
11464: PPUSH
11465: CALL_OW 297
11469: PUSH
11470: LD_INT 4
11472: GREATER
11473: IFFALSE 11550
// begin removeunit ( vlajka1 ) ;
11475: LD_LOC 22
11479: PPUSH
11480: CALL_OW 64
// setside ( vlajka1 , origside ) ;
11484: LD_LOC 22
11488: PPUSH
11489: LD_VAR 0 3
11493: PPUSH
11494: CALL_OW 235
// radius = 2 ;
11498: LD_ADDR_VAR 0 5
11502: PUSH
11503: LD_INT 2
11505: ST_TO_ADDR
// while not placeunitxyr ( vlajka1 , 76 , 60 , radius , false ) do
11506: LD_LOC 22
11510: PPUSH
11511: LD_INT 76
11513: PPUSH
11514: LD_INT 60
11516: PPUSH
11517: LD_VAR 0 5
11521: PPUSH
11522: LD_INT 0
11524: PPUSH
11525: CALL_OW 50
11529: NOT
11530: IFFALSE 11548
// radius = radius + 1 ;
11532: LD_ADDR_VAR 0 5
11536: PUSH
11537: LD_VAR 0 5
11541: PUSH
11542: LD_INT 1
11544: PLUS
11545: ST_TO_ADDR
11546: GO 11506
// end else
11548: GO 11564
// setside ( vlajka1 , origside ) ;
11550: LD_LOC 22
11554: PPUSH
11555: LD_VAR 0 3
11559: PPUSH
11560: CALL_OW 235
// end else
11564: GO 11727
// if ( vehold = vlajka2 ) then
11566: LD_VAR 0 2
11570: PUSH
11571: LD_LOC 23
11575: EQUAL
11576: IFFALSE 11727
// begin vlajka2 = vehnew ;
11578: LD_ADDR_LOC 23
11582: PUSH
11583: LD_VAR 0 1
11587: ST_TO_ADDR
// comexitvehicle ( vlajka2 ) ;
11588: LD_LOC 23
11592: PPUSH
11593: CALL_OW 121
// while isdrivenby ( vlajka2 ) do
11597: LD_LOC 23
11601: PPUSH
11602: CALL_OW 311
11606: IFFALSE 11617
// wait ( 2 ) ;
11608: LD_INT 2
11610: PPUSH
11611: CALL_OW 67
11615: GO 11597
// if getdistunitxy ( vlajka2 , 143 , 60 ) > 4 then
11617: LD_LOC 23
11621: PPUSH
11622: LD_INT 143
11624: PPUSH
11625: LD_INT 60
11627: PPUSH
11628: CALL_OW 297
11632: PUSH
11633: LD_INT 4
11635: GREATER
11636: IFFALSE 11713
// begin removeunit ( vlajka2 ) ;
11638: LD_LOC 23
11642: PPUSH
11643: CALL_OW 64
// setside ( vlajka2 , origside ) ;
11647: LD_LOC 23
11651: PPUSH
11652: LD_VAR 0 3
11656: PPUSH
11657: CALL_OW 235
// radius = 2 ;
11661: LD_ADDR_VAR 0 5
11665: PUSH
11666: LD_INT 2
11668: ST_TO_ADDR
// while not placeunitxyr ( vlajka2 , 143 , 60 , radius , false ) do
11669: LD_LOC 23
11673: PPUSH
11674: LD_INT 143
11676: PPUSH
11677: LD_INT 60
11679: PPUSH
11680: LD_VAR 0 5
11684: PPUSH
11685: LD_INT 0
11687: PPUSH
11688: CALL_OW 50
11692: NOT
11693: IFFALSE 11711
// radius = radius + 1 ;
11695: LD_ADDR_VAR 0 5
11699: PUSH
11700: LD_VAR 0 5
11704: PUSH
11705: LD_INT 1
11707: PLUS
11708: ST_TO_ADDR
11709: GO 11669
// end else
11711: GO 11727
// setside ( vlajka2 , origside ) ;
11713: LD_LOC 23
11717: PPUSH
11718: LD_VAR 0 3
11722: PPUSH
11723: CALL_OW 235
// end ;
11727: PPOPN 5
11729: END
// every 10 + 1 trigger getdistunitxy ( vlajka1 , 185 , 60 ) < 6 marked 06 do var radius , tmp ;
11730: LD_LOC 22
11734: PPUSH
11735: LD_INT 185
11737: PPUSH
11738: LD_INT 60
11740: PPUSH
11741: CALL_OW 297
11745: PUSH
11746: LD_INT 6
11748: LESS
11749: IFFALSE 11953
11751: GO 11753
11753: DISABLE
11754: LD_INT 0
11756: PPUSH
11757: PPUSH
// begin right_score = right_score + 1 ;
11758: LD_ADDR_LOC 29
11762: PUSH
11763: LD_LOC 29
11767: PUSH
11768: LD_INT 1
11770: PLUS
11771: ST_TO_ADDR
// refresh ;
11772: CALL 10583 0 0
// comexitvehicle ( vlajka1 ) ;
11776: LD_LOC 22
11780: PPUSH
11781: CALL_OW 121
// while isdrivenby ( vlajka1 ) do
11785: LD_LOC 22
11789: PPUSH
11790: CALL_OW 311
11794: IFFALSE 11805
// wait ( 2 ) ;
11796: LD_INT 2
11798: PPUSH
11799: CALL_OW 67
11803: GO 11785
// removeunit ( vlajka1 ) ;
11805: LD_LOC 22
11809: PPUSH
11810: CALL_OW 64
// for radius in [ mat_cans , mat_oil , mat_siberit ] do
11814: LD_ADDR_VAR 0 1
11818: PUSH
11819: LD_INT 1
11821: PUSH
11822: LD_INT 2
11824: PUSH
11825: LD_INT 3
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: LIST
11832: PUSH
11833: FOR_IN
11834: IFFALSE 11900
// begin tmp = getcargo ( vlajka1 , radius ) ;
11836: LD_ADDR_VAR 0 2
11840: PUSH
11841: LD_LOC 22
11845: PPUSH
11846: LD_VAR 0 1
11850: PPUSH
11851: CALL_OW 289
11855: ST_TO_ADDR
// if tmp then
11856: LD_VAR 0 2
11860: IFFALSE 11898
// begin addresourcetype ( pos2base , radius , tmp ) ;
11862: LD_LOC 27
11866: PPUSH
11867: LD_VAR 0 1
11871: PPUSH
11872: LD_VAR 0 2
11876: PPUSH
11877: CALL_OW 276
// setcargo ( vlajka1 , radius , 0 ) ;
11881: LD_LOC 22
11885: PPUSH
11886: LD_VAR 0 1
11890: PPUSH
11891: LD_INT 0
11893: PPUSH
11894: CALL_OW 290
// end ; end ;
11898: GO 11833
11900: POP
11901: POP
// radius = 2 ;
11902: LD_ADDR_VAR 0 1
11906: PUSH
11907: LD_INT 2
11909: ST_TO_ADDR
// while not placeunitxyr ( vlajka1 , 76 , 60 , radius , false ) do
11910: LD_LOC 22
11914: PPUSH
11915: LD_INT 76
11917: PPUSH
11918: LD_INT 60
11920: PPUSH
11921: LD_VAR 0 1
11925: PPUSH
11926: LD_INT 0
11928: PPUSH
11929: CALL_OW 50
11933: NOT
11934: IFFALSE 11952
// radius = radius + 1 ;
11936: LD_ADDR_VAR 0 1
11940: PUSH
11941: LD_VAR 0 1
11945: PUSH
11946: LD_INT 1
11948: PLUS
11949: ST_TO_ADDR
11950: GO 11910
// enable ;
11952: ENABLE
// end ;
11953: PPOPN 2
11955: END
// every 10 trigger getdistunitxy ( vlajka2 , 34 , 60 ) < 6 marked 07 do var radius , tmp ;
11956: LD_LOC 23
11960: PPUSH
11961: LD_INT 34
11963: PPUSH
11964: LD_INT 60
11966: PPUSH
11967: CALL_OW 297
11971: PUSH
11972: LD_INT 6
11974: LESS
11975: IFFALSE 12179
11977: GO 11979
11979: DISABLE
11980: LD_INT 0
11982: PPUSH
11983: PPUSH
// begin left_score = left_score + 1 ;
11984: LD_ADDR_LOC 28
11988: PUSH
11989: LD_LOC 28
11993: PUSH
11994: LD_INT 1
11996: PLUS
11997: ST_TO_ADDR
// refresh ;
11998: CALL 10583 0 0
// comexitvehicle ( vlajka2 ) ;
12002: LD_LOC 23
12006: PPUSH
12007: CALL_OW 121
// while isdrivenby ( vlajka2 ) do
12011: LD_LOC 23
12015: PPUSH
12016: CALL_OW 311
12020: IFFALSE 12031
// wait ( 2 ) ;
12022: LD_INT 2
12024: PPUSH
12025: CALL_OW 67
12029: GO 12011
// removeunit ( vlajka2 ) ;
12031: LD_LOC 23
12035: PPUSH
12036: CALL_OW 64
// for radius in [ mat_cans , mat_oil , mat_siberit ] do
12040: LD_ADDR_VAR 0 1
12044: PUSH
12045: LD_INT 1
12047: PUSH
12048: LD_INT 2
12050: PUSH
12051: LD_INT 3
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: LIST
12058: PUSH
12059: FOR_IN
12060: IFFALSE 12126
// begin tmp = getcargo ( vlajka2 , radius ) ;
12062: LD_ADDR_VAR 0 2
12066: PUSH
12067: LD_LOC 23
12071: PPUSH
12072: LD_VAR 0 1
12076: PPUSH
12077: CALL_OW 289
12081: ST_TO_ADDR
// if tmp then
12082: LD_VAR 0 2
12086: IFFALSE 12124
// begin addresourcetype ( pos1base , radius , tmp ) ;
12088: LD_LOC 26
12092: PPUSH
12093: LD_VAR 0 1
12097: PPUSH
12098: LD_VAR 0 2
12102: PPUSH
12103: CALL_OW 276
// setcargo ( vlajka2 , radius , 0 ) ;
12107: LD_LOC 23
12111: PPUSH
12112: LD_VAR 0 1
12116: PPUSH
12117: LD_INT 0
12119: PPUSH
12120: CALL_OW 290
// end ; end ;
12124: GO 12059
12126: POP
12127: POP
// radius = 2 ;
12128: LD_ADDR_VAR 0 1
12132: PUSH
12133: LD_INT 2
12135: ST_TO_ADDR
// while not placeunitxyr ( vlajka2 , 143 , 60 , radius , false ) do
12136: LD_LOC 23
12140: PPUSH
12141: LD_INT 143
12143: PPUSH
12144: LD_INT 60
12146: PPUSH
12147: LD_VAR 0 1
12151: PPUSH
12152: LD_INT 0
12154: PPUSH
12155: CALL_OW 50
12159: NOT
12160: IFFALSE 12178
// radius = radius + 1 ;
12162: LD_ADDR_VAR 0 1
12166: PUSH
12167: LD_VAR 0 1
12171: PUSH
12172: LD_INT 1
12174: PLUS
12175: ST_TO_ADDR
12176: GO 12136
// enable ;
12178: ENABLE
// end ; end_of_file
12179: PPOPN 2
12181: END
// var zakladna , skilly , start_res , extra_oil , extra_sib , zakl_plus , batt_fl , sib_det , people_resp , siberitofka ; var fortpos , areasdiff , directions ; var resp_cnt1 , resp_cnt2 ; export function other_game ; var tmp , tmp2 , tmp3 , cl ; begin
12182: LD_INT 0
12184: PPUSH
12185: PPUSH
12186: PPUSH
12187: PPUSH
12188: PPUSH
// ctf = false ;
12189: LD_ADDR_EXP 40
12193: PUSH
12194: LD_INT 0
12196: ST_TO_ADDR
// resp_cnt1 = 0 ;
12197: LD_ADDR_LOC 53
12201: PUSH
12202: LD_INT 0
12204: ST_TO_ADDR
// resp_cnt2 = 0 ;
12205: LD_ADDR_LOC 54
12209: PUSH
12210: LD_INT 0
12212: ST_TO_ADDR
// enable ( nonctf_13 ) ;
12213: LD_EXP 48
12217: ENABLE_MARKED
// for tmp = 1 to 8 do
12218: LD_ADDR_VAR 0 2
12222: PUSH
12223: DOUBLE
12224: LD_INT 1
12226: DEC
12227: ST_TO_ADDR
12228: LD_INT 8
12230: PUSH
12231: FOR_TO
12232: IFFALSE 12293
// begin setrestrict ( b_depot , tmp , state_enabled ) ;
12234: LD_INT 0
12236: PPUSH
12237: LD_VAR 0 2
12241: PPUSH
12242: LD_INT 1
12244: PPUSH
12245: CALL_OW 324
// if sib_det then
12249: LD_LOC 47
12253: IFFALSE 12270
// settech ( tech_sibdet , tmp , state_researched ) ;
12255: LD_INT 20
12257: PPUSH
12258: LD_VAR 0 2
12262: PPUSH
12263: LD_INT 2
12265: PPUSH
12266: CALL_OW 322
// if siberitofka then
12270: LD_LOC 49
12274: IFFALSE 12291
// settech ( tech_sibfiss , tmp , state_enabled ) ;
12276: LD_INT 25
12278: PPUSH
12279: LD_VAR 0 2
12283: PPUSH
12284: LD_INT 1
12286: PPUSH
12287: CALL_OW 322
// end ;
12291: GO 12231
12293: POP
12294: POP
// if multiplayer then
12295: LD_OWVAR 4
12299: IFFALSE 12472
// begin zakladna = getmultiplayersetting ( 0 ) ;
12301: LD_ADDR_LOC 40
12305: PUSH
12306: LD_INT 0
12308: PPUSH
12309: CALL_OW 426
12313: ST_TO_ADDR
// lidi = getmultiplayersetting ( 1 ) ;
12314: LD_ADDR_EXP 30
12318: PUSH
12319: LD_INT 1
12321: PPUSH
12322: CALL_OW 426
12326: ST_TO_ADDR
// skilly = getmultiplayersetting ( 2 ) ;
12327: LD_ADDR_LOC 41
12331: PUSH
12332: LD_INT 2
12334: PPUSH
12335: CALL_OW 426
12339: ST_TO_ADDR
// start_res = getmultiplayersetting ( 3 ) ;
12340: LD_ADDR_LOC 42
12344: PUSH
12345: LD_INT 3
12347: PPUSH
12348: CALL_OW 426
12352: ST_TO_ADDR
// krabice = getmultiplayersetting ( 4 ) ;
12353: LD_ADDR_EXP 31
12357: PUSH
12358: LD_INT 4
12360: PPUSH
12361: CALL_OW 426
12365: ST_TO_ADDR
// extra_oil = getmultiplayersetting ( 5 ) ;
12366: LD_ADDR_LOC 43
12370: PUSH
12371: LD_INT 5
12373: PPUSH
12374: CALL_OW 426
12378: ST_TO_ADDR
// extra_sib = getmultiplayersetting ( 6 ) ;
12379: LD_ADDR_LOC 44
12383: PUSH
12384: LD_INT 6
12386: PPUSH
12387: CALL_OW 426
12391: ST_TO_ADDR
// zakl_plus = getmultiplayersetting ( 7 ) ;
12392: LD_ADDR_LOC 45
12396: PUSH
12397: LD_INT 7
12399: PPUSH
12400: CALL_OW 426
12404: ST_TO_ADDR
// batt_fl = getmultiplayersetting ( 11 ) ;
12405: LD_ADDR_LOC 46
12409: PUSH
12410: LD_INT 11
12412: PPUSH
12413: CALL_OW 426
12417: ST_TO_ADDR
// sib_det = getmultiplayersetting ( 12 ) ;
12418: LD_ADDR_LOC 47
12422: PUSH
12423: LD_INT 12
12425: PPUSH
12426: CALL_OW 426
12430: ST_TO_ADDR
// opoce = getmultiplayersetting ( 13 ) ;
12431: LD_ADDR_EXP 32
12435: PUSH
12436: LD_INT 13
12438: PPUSH
12439: CALL_OW 426
12443: ST_TO_ADDR
// people_resp = getmultiplayersetting ( 14 ) ;
12444: LD_ADDR_LOC 48
12448: PUSH
12449: LD_INT 14
12451: PPUSH
12452: CALL_OW 426
12456: ST_TO_ADDR
// siberitofka = getmultiplayersetting ( 15 ) ;
12457: LD_ADDR_LOC 49
12461: PUSH
12462: LD_INT 15
12464: PPUSH
12465: CALL_OW 426
12469: ST_TO_ADDR
// end else
12470: GO 12576
// begin zakladna = 1 ;
12472: LD_ADDR_LOC 40
12476: PUSH
12477: LD_INT 1
12479: ST_TO_ADDR
// lidi = 1 ;
12480: LD_ADDR_EXP 30
12484: PUSH
12485: LD_INT 1
12487: ST_TO_ADDR
// skilly = 1 ;
12488: LD_ADDR_LOC 41
12492: PUSH
12493: LD_INT 1
12495: ST_TO_ADDR
// start_res = 2 ;
12496: LD_ADDR_LOC 42
12500: PUSH
12501: LD_INT 2
12503: ST_TO_ADDR
// krabice = 1 ;
12504: LD_ADDR_EXP 31
12508: PUSH
12509: LD_INT 1
12511: ST_TO_ADDR
// extra_oil = 1 ;
12512: LD_ADDR_LOC 43
12516: PUSH
12517: LD_INT 1
12519: ST_TO_ADDR
// extra_sib = 1 ;
12520: LD_ADDR_LOC 44
12524: PUSH
12525: LD_INT 1
12527: ST_TO_ADDR
// zakl_plus = 2 ;
12528: LD_ADDR_LOC 45
12532: PUSH
12533: LD_INT 2
12535: ST_TO_ADDR
// batt_fl = 0 ;
12536: LD_ADDR_LOC 46
12540: PUSH
12541: LD_INT 0
12543: ST_TO_ADDR
// sib_det = 0 ;
12544: LD_ADDR_LOC 47
12548: PUSH
12549: LD_INT 0
12551: ST_TO_ADDR
// opoce = 3 ;
12552: LD_ADDR_EXP 32
12556: PUSH
12557: LD_INT 3
12559: ST_TO_ADDR
// people_resp = 0 ;
12560: LD_ADDR_LOC 48
12564: PUSH
12565: LD_INT 0
12567: ST_TO_ADDR
// siberitofka = 0 ;
12568: LD_ADDR_LOC 49
12572: PUSH
12573: LD_INT 0
12575: ST_TO_ADDR
// end ; if people_resp then
12576: LD_LOC 48
12580: IFFALSE 12597
// begin enable ( nonctf_10 ) ;
12582: LD_EXP 45
12586: ENABLE_MARKED
// enable ( nonctf_11 ) ;
12587: LD_EXP 46
12591: ENABLE_MARKED
// enable ( nonctf_12 ) ;
12592: LD_EXP 47
12596: ENABLE_MARKED
// end ; if people_resp = 1 then
12597: LD_LOC 48
12601: PUSH
12602: LD_INT 1
12604: EQUAL
12605: IFFALSE 12615
// people_resp = 3 ;
12607: LD_ADDR_LOC 48
12611: PUSH
12612: LD_INT 3
12614: ST_TO_ADDR
// if people_resp = 2 then
12615: LD_LOC 48
12619: PUSH
12620: LD_INT 2
12622: EQUAL
12623: IFFALSE 12633
// people_resp = 1 ;
12625: LD_ADDR_LOC 48
12629: PUSH
12630: LD_INT 1
12632: ST_TO_ADDR
// case lidi of 0 :
12633: LD_EXP 30
12637: PUSH
12638: LD_INT 0
12640: DOUBLE
12641: EQUAL
12642: IFTRUE 12646
12644: GO 12657
12646: POP
// lidi = 9 ; 1 :
12647: LD_ADDR_EXP 30
12651: PUSH
12652: LD_INT 9
12654: ST_TO_ADDR
12655: GO 12734
12657: LD_INT 1
12659: DOUBLE
12660: EQUAL
12661: IFTRUE 12665
12663: GO 12676
12665: POP
// lidi = 13 ; 2 :
12666: LD_ADDR_EXP 30
12670: PUSH
12671: LD_INT 13
12673: ST_TO_ADDR
12674: GO 12734
12676: LD_INT 2
12678: DOUBLE
12679: EQUAL
12680: IFTRUE 12684
12682: GO 12695
12684: POP
// lidi = 19 ; 3 :
12685: LD_ADDR_EXP 30
12689: PUSH
12690: LD_INT 19
12692: ST_TO_ADDR
12693: GO 12734
12695: LD_INT 3
12697: DOUBLE
12698: EQUAL
12699: IFTRUE 12703
12701: GO 12714
12703: POP
// lidi = 23 ; 4 :
12704: LD_ADDR_EXP 30
12708: PUSH
12709: LD_INT 23
12711: ST_TO_ADDR
12712: GO 12734
12714: LD_INT 4
12716: DOUBLE
12717: EQUAL
12718: IFTRUE 12722
12720: GO 12733
12722: POP
// lidi = 29 ; end ;
12723: LD_ADDR_EXP 30
12727: PUSH
12728: LD_INT 29
12730: ST_TO_ADDR
12731: GO 12734
12733: POP
// skilly = skilly + 1 ;
12734: LD_ADDR_LOC 41
12738: PUSH
12739: LD_LOC 41
12743: PUSH
12744: LD_INT 1
12746: PLUS
12747: ST_TO_ADDR
// case start_res of 0 :
12748: LD_LOC 42
12752: PUSH
12753: LD_INT 0
12755: DOUBLE
12756: EQUAL
12757: IFTRUE 12761
12759: GO 12772
12761: POP
// start_res = 0 ; 1 :
12762: LD_ADDR_LOC 42
12766: PUSH
12767: LD_INT 0
12769: ST_TO_ADDR
12770: GO 12830
12772: LD_INT 1
12774: DOUBLE
12775: EQUAL
12776: IFTRUE 12780
12778: GO 12791
12780: POP
// start_res = 50 ; 2 :
12781: LD_ADDR_LOC 42
12785: PUSH
12786: LD_INT 50
12788: ST_TO_ADDR
12789: GO 12830
12791: LD_INT 2
12793: DOUBLE
12794: EQUAL
12795: IFTRUE 12799
12797: GO 12810
12799: POP
// start_res = 100 ; 3 :
12800: LD_ADDR_LOC 42
12804: PUSH
12805: LD_INT 100
12807: ST_TO_ADDR
12808: GO 12830
12810: LD_INT 3
12812: DOUBLE
12813: EQUAL
12814: IFTRUE 12818
12816: GO 12829
12818: POP
// start_res = 200 ; end ;
12819: LD_ADDR_LOC 42
12823: PUSH
12824: LD_INT 200
12826: ST_TO_ADDR
12827: GO 12830
12829: POP
// case krabice of 0 :
12830: LD_EXP 31
12834: PUSH
12835: LD_INT 0
12837: DOUBLE
12838: EQUAL
12839: IFTRUE 12843
12841: GO 12854
12843: POP
// cperiode = 1 1$30 ; 1 :
12844: LD_ADDR_EXP 34
12848: PUSH
12849: LD_INT 3150
12851: ST_TO_ADDR
12852: GO 12893
12854: LD_INT 1
12856: DOUBLE
12857: EQUAL
12858: IFTRUE 12862
12860: GO 12873
12862: POP
// cperiode = 1 1$00 ; 2 :
12863: LD_ADDR_EXP 34
12867: PUSH
12868: LD_INT 2100
12870: ST_TO_ADDR
12871: GO 12893
12873: LD_INT 2
12875: DOUBLE
12876: EQUAL
12877: IFTRUE 12881
12879: GO 12892
12881: POP
// cperiode = 0 0$30 ; end ;
12882: LD_ADDR_EXP 34
12886: PUSH
12887: LD_INT 1050
12889: ST_TO_ADDR
12890: GO 12893
12892: POP
// case opoce of 0 :
12893: LD_EXP 32
12897: PUSH
12898: LD_INT 0
12900: DOUBLE
12901: EQUAL
12902: IFTRUE 12906
12904: GO 12917
12906: POP
// opoce = 0 ; 1 :
12907: LD_ADDR_EXP 32
12911: PUSH
12912: LD_INT 0
12914: ST_TO_ADDR
12915: GO 13032
12917: LD_INT 1
12919: DOUBLE
12920: EQUAL
12921: IFTRUE 12925
12923: GO 12936
12925: POP
// opoce = 3 ; 2 :
12926: LD_ADDR_EXP 32
12930: PUSH
12931: LD_INT 3
12933: ST_TO_ADDR
12934: GO 13032
12936: LD_INT 2
12938: DOUBLE
12939: EQUAL
12940: IFTRUE 12944
12942: GO 12955
12944: POP
// opoce = 7 ; 3 :
12945: LD_ADDR_EXP 32
12949: PUSH
12950: LD_INT 7
12952: ST_TO_ADDR
12953: GO 13032
12955: LD_INT 3
12957: DOUBLE
12958: EQUAL
12959: IFTRUE 12963
12961: GO 12974
12963: POP
// opoce = 11 ; 4 :
12964: LD_ADDR_EXP 32
12968: PUSH
12969: LD_INT 11
12971: ST_TO_ADDR
12972: GO 13032
12974: LD_INT 4
12976: DOUBLE
12977: EQUAL
12978: IFTRUE 12982
12980: GO 12993
12982: POP
// opoce = 15 ; 5 :
12983: LD_ADDR_EXP 32
12987: PUSH
12988: LD_INT 15
12990: ST_TO_ADDR
12991: GO 13032
12993: LD_INT 5
12995: DOUBLE
12996: EQUAL
12997: IFTRUE 13001
12999: GO 13012
13001: POP
// opoce = 19 ; 6 :
13002: LD_ADDR_EXP 32
13006: PUSH
13007: LD_INT 19
13009: ST_TO_ADDR
13010: GO 13032
13012: LD_INT 6
13014: DOUBLE
13015: EQUAL
13016: IFTRUE 13020
13018: GO 13031
13020: POP
// opoce = 23 ; end ;
13021: LD_ADDR_EXP 32
13025: PUSH
13026: LD_INT 23
13028: ST_TO_ADDR
13029: GO 13032
13031: POP
// fortpos = [ [ [ 46 , 53 , 4 ] , [ 51 , 62 , 4 ] ] , [ [ 167 , 53 , 1 ] , [ 173 , 64 , 1 ] ] ] ;
13032: LD_ADDR_LOC 50
13036: PUSH
13037: LD_INT 46
13039: PUSH
13040: LD_INT 53
13042: PUSH
13043: LD_INT 4
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: LIST
13050: PUSH
13051: LD_INT 51
13053: PUSH
13054: LD_INT 62
13056: PUSH
13057: LD_INT 4
13059: PUSH
13060: EMPTY
13061: LIST
13062: LIST
13063: LIST
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: PUSH
13069: LD_INT 167
13071: PUSH
13072: LD_INT 53
13074: PUSH
13075: LD_INT 1
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: LIST
13082: PUSH
13083: LD_INT 173
13085: PUSH
13086: LD_INT 64
13088: PUSH
13089: LD_INT 1
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: LIST
13096: PUSH
13097: EMPTY
13098: LIST
13099: LIST
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: ST_TO_ADDR
// areasdiff = [ vlevodiff , vpravodiff ] ;
13105: LD_ADDR_LOC 51
13109: PUSH
13110: LD_INT 16
13112: PUSH
13113: LD_INT 17
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: ST_TO_ADDR
// directions = [ 4 , 1 ] ;
13120: LD_ADDR_LOC 52
13124: PUSH
13125: LD_INT 4
13127: PUSH
13128: LD_INT 1
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: ST_TO_ADDR
// for tmp = 1 to 8 do
13135: LD_ADDR_VAR 0 2
13139: PUSH
13140: DOUBLE
13141: LD_INT 1
13143: DEC
13144: ST_TO_ADDR
13145: LD_INT 8
13147: PUSH
13148: FOR_TO
13149: IFFALSE 14318
// if mp_sides_nations_ [ tmp ] then
13151: LD_EXP 42
13155: PUSH
13156: LD_VAR 0 2
13160: ARRAY
13161: IFFALSE 14316
// begin if mp_sides_positions_ [ tmp ] = 1 then
13163: LD_EXP 43
13167: PUSH
13168: LD_VAR 0 2
13172: ARRAY
13173: PUSH
13174: LD_INT 1
13176: EQUAL
13177: IFFALSE 13191
// pos1side = tmp else
13179: LD_ADDR_EXP 37
13183: PUSH
13184: LD_VAR 0 2
13188: ST_TO_ADDR
13189: GO 13201
// pos2side = tmp ;
13191: LD_ADDR_EXP 38
13195: PUSH
13196: LD_VAR 0 2
13200: ST_TO_ADDR
// uc_side = tmp ;
13201: LD_ADDR_OWVAR 20
13205: PUSH
13206: LD_VAR 0 2
13210: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ tmp ] ;
13211: LD_ADDR_OWVAR 21
13215: PUSH
13216: LD_EXP 42
13220: PUSH
13221: LD_VAR 0 2
13225: ARRAY
13226: ST_TO_ADDR
// bc_type = b_depot ;
13227: LD_ADDR_OWVAR 42
13231: PUSH
13232: LD_INT 0
13234: ST_TO_ADDR
// bc_level = 1 ;
13235: LD_ADDR_OWVAR 43
13239: PUSH
13240: LD_INT 1
13242: ST_TO_ADDR
// tmp2 = createandplacebuildingxyd ( depotpositions [ mp_sides_positions_ [ tmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 2 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 3 ] ) ;
13243: LD_ADDR_VAR 0 3
13247: PUSH
13248: LD_EXP 35
13252: PUSH
13253: LD_EXP 43
13257: PUSH
13258: LD_VAR 0 2
13262: ARRAY
13263: ARRAY
13264: PUSH
13265: LD_INT 1
13267: ARRAY
13268: PPUSH
13269: LD_EXP 35
13273: PUSH
13274: LD_EXP 43
13278: PUSH
13279: LD_VAR 0 2
13283: ARRAY
13284: ARRAY
13285: PUSH
13286: LD_INT 2
13288: ARRAY
13289: PPUSH
13290: LD_EXP 35
13294: PUSH
13295: LD_EXP 43
13299: PUSH
13300: LD_VAR 0 2
13304: ARRAY
13305: ARRAY
13306: PUSH
13307: LD_INT 3
13309: ARRAY
13310: PPUSH
13311: CALL_OW 47
13315: ST_TO_ADDR
// if batt_fl then
13316: LD_LOC 46
13320: IFFALSE 13430
// setbattleflag ( tmp , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 2 ] , [ [ bfo_defend_bonus_human , 80 ] , [ bfo_defend_bonus_vehicle , 40 ] , [ bfo_defend_bonus_building , 0 ] , [ bfo_range , 17 ] , [ bfo_height , 100 ] ] ) ;
13322: LD_VAR 0 2
13326: PPUSH
13327: LD_EXP 35
13331: PUSH
13332: LD_EXP 43
13336: PUSH
13337: LD_VAR 0 2
13341: ARRAY
13342: ARRAY
13343: PUSH
13344: LD_INT 1
13346: ARRAY
13347: PPUSH
13348: LD_EXP 35
13352: PUSH
13353: LD_EXP 43
13357: PUSH
13358: LD_VAR 0 2
13362: ARRAY
13363: ARRAY
13364: PUSH
13365: LD_INT 2
13367: ARRAY
13368: PPUSH
13369: LD_INT 1
13371: PUSH
13372: LD_INT 80
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PUSH
13379: LD_INT 2
13381: PUSH
13382: LD_INT 40
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PUSH
13389: LD_INT 3
13391: PUSH
13392: LD_INT 0
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: PUSH
13399: LD_INT 10
13401: PUSH
13402: LD_INT 17
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: PUSH
13409: LD_INT 20
13411: PUSH
13412: LD_INT 100
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: PPUSH
13426: CALL_OW 418
// if zakladna then
13430: LD_LOC 40
13434: IFFALSE 13602
// begin bc_type = b_breastwork ;
13436: LD_ADDR_OWVAR 42
13440: PUSH
13441: LD_INT 31
13443: ST_TO_ADDR
// createandplacebuildingxyd ( fortpos [ mp_sides_positions_ [ tmp ] ] [ 1 ] [ 1 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 1 ] [ 2 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 1 ] [ 3 ] ) ;
13444: LD_LOC 50
13448: PUSH
13449: LD_EXP 43
13453: PUSH
13454: LD_VAR 0 2
13458: ARRAY
13459: ARRAY
13460: PUSH
13461: LD_INT 1
13463: ARRAY
13464: PUSH
13465: LD_INT 1
13467: ARRAY
13468: PPUSH
13469: LD_LOC 50
13473: PUSH
13474: LD_EXP 43
13478: PUSH
13479: LD_VAR 0 2
13483: ARRAY
13484: ARRAY
13485: PUSH
13486: LD_INT 1
13488: ARRAY
13489: PUSH
13490: LD_INT 2
13492: ARRAY
13493: PPUSH
13494: LD_LOC 50
13498: PUSH
13499: LD_EXP 43
13503: PUSH
13504: LD_VAR 0 2
13508: ARRAY
13509: ARRAY
13510: PUSH
13511: LD_INT 1
13513: ARRAY
13514: PUSH
13515: LD_INT 3
13517: ARRAY
13518: PPUSH
13519: CALL_OW 47
// createandplacebuildingxyd ( fortpos [ mp_sides_positions_ [ tmp ] ] [ 2 ] [ 1 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 2 ] [ 2 ] , fortpos [ mp_sides_positions_ [ tmp ] ] [ 2 ] [ 3 ] ) ;
13523: LD_LOC 50
13527: PUSH
13528: LD_EXP 43
13532: PUSH
13533: LD_VAR 0 2
13537: ARRAY
13538: ARRAY
13539: PUSH
13540: LD_INT 2
13542: ARRAY
13543: PUSH
13544: LD_INT 1
13546: ARRAY
13547: PPUSH
13548: LD_LOC 50
13552: PUSH
13553: LD_EXP 43
13557: PUSH
13558: LD_VAR 0 2
13562: ARRAY
13563: ARRAY
13564: PUSH
13565: LD_INT 2
13567: ARRAY
13568: PUSH
13569: LD_INT 2
13571: ARRAY
13572: PPUSH
13573: LD_LOC 50
13577: PUSH
13578: LD_EXP 43
13582: PUSH
13583: LD_VAR 0 2
13587: ARRAY
13588: ARRAY
13589: PUSH
13590: LD_INT 2
13592: ARRAY
13593: PUSH
13594: LD_INT 3
13596: ARRAY
13597: PPUSH
13598: CALL_OW 47
// end ; addresourcetype ( getbase ( tmp2 ) , mat_cans , start_res ) ;
13602: LD_VAR 0 3
13606: PPUSH
13607: CALL_OW 274
13611: PPUSH
13612: LD_INT 1
13614: PPUSH
13615: LD_LOC 42
13619: PPUSH
13620: CALL_OW 276
// if extra_oil then
13624: LD_LOC 43
13628: IFFALSE 13720
// begin tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
13630: LD_ADDR_VAR 0 3
13634: PUSH
13635: LD_LOC 51
13639: PUSH
13640: LD_EXP 43
13644: PUSH
13645: LD_VAR 0 2
13649: ARRAY
13650: ARRAY
13651: PPUSH
13652: LD_INT 0
13654: PPUSH
13655: CALL_OW 16
13659: ST_TO_ADDR
// while not createdepositxy ( tmp2 [ 1 ] , tmp2 [ 2 ] , mat_oil ) do
13660: LD_VAR 0 3
13664: PUSH
13665: LD_INT 1
13667: ARRAY
13668: PPUSH
13669: LD_VAR 0 3
13673: PUSH
13674: LD_INT 2
13676: ARRAY
13677: PPUSH
13678: LD_INT 2
13680: PPUSH
13681: CALL_OW 62
13685: NOT
13686: IFFALSE 13720
// tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
13688: LD_ADDR_VAR 0 3
13692: PUSH
13693: LD_LOC 51
13697: PUSH
13698: LD_EXP 43
13702: PUSH
13703: LD_VAR 0 2
13707: ARRAY
13708: ARRAY
13709: PPUSH
13710: LD_INT 0
13712: PPUSH
13713: CALL_OW 16
13717: ST_TO_ADDR
13718: GO 13660
// end ; if extra_sib then
13720: LD_LOC 44
13724: IFFALSE 13816
// begin tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
13726: LD_ADDR_VAR 0 3
13730: PUSH
13731: LD_LOC 51
13735: PUSH
13736: LD_EXP 43
13740: PUSH
13741: LD_VAR 0 2
13745: ARRAY
13746: ARRAY
13747: PPUSH
13748: LD_INT 0
13750: PPUSH
13751: CALL_OW 16
13755: ST_TO_ADDR
// while not createdepositxy ( tmp2 [ 1 ] , tmp2 [ 2 ] , mat_siberit ) do
13756: LD_VAR 0 3
13760: PUSH
13761: LD_INT 1
13763: ARRAY
13764: PPUSH
13765: LD_VAR 0 3
13769: PUSH
13770: LD_INT 2
13772: ARRAY
13773: PPUSH
13774: LD_INT 3
13776: PPUSH
13777: CALL_OW 62
13781: NOT
13782: IFFALSE 13816
// tmp2 = randhexarea ( areasdiff [ mp_sides_positions_ [ tmp ] ] , false ) ;
13784: LD_ADDR_VAR 0 3
13788: PUSH
13789: LD_LOC 51
13793: PUSH
13794: LD_EXP 43
13798: PUSH
13799: LD_VAR 0 2
13803: ARRAY
13804: ARRAY
13805: PPUSH
13806: LD_INT 0
13808: PPUSH
13809: CALL_OW 16
13813: ST_TO_ADDR
13814: GO 13756
// end ; if zakl_plus > 0 then
13816: LD_LOC 45
13820: PUSH
13821: LD_INT 0
13823: GREATER
13824: IFFALSE 14084
// begin bc_type = b_lab ;
13826: LD_ADDR_OWVAR 42
13830: PUSH
13831: LD_INT 6
13833: ST_TO_ADDR
// uc_direction = directions [ mp_sides_positions_ [ tmp ] ] ;
13834: LD_ADDR_OWVAR 24
13838: PUSH
13839: LD_LOC 52
13843: PUSH
13844: LD_EXP 43
13848: PUSH
13849: LD_VAR 0 2
13853: ARRAY
13854: ARRAY
13855: ST_TO_ADDR
// tmp3 = createbuilding ;
13856: LD_ADDR_VAR 0 4
13860: PUSH
13861: CALL_OW 46
13865: ST_TO_ADDR
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
13866: LD_ADDR_VAR 0 3
13870: PUSH
13871: LD_EXP 36
13875: PUSH
13876: LD_EXP 43
13880: PUSH
13881: LD_VAR 0 2
13885: ARRAY
13886: ARRAY
13887: PPUSH
13888: LD_INT 0
13890: PPUSH
13891: CALL_OW 16
13895: ST_TO_ADDR
// while not placeunitxy ( tmp3 , tmp2 [ 1 ] , tmp2 [ 2 ] , false ) do
13896: LD_VAR 0 4
13900: PPUSH
13901: LD_VAR 0 3
13905: PUSH
13906: LD_INT 1
13908: ARRAY
13909: PPUSH
13910: LD_VAR 0 3
13914: PUSH
13915: LD_INT 2
13917: ARRAY
13918: PPUSH
13919: LD_INT 0
13921: PPUSH
13922: CALL_OW 48
13926: NOT
13927: IFFALSE 13961
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
13929: LD_ADDR_VAR 0 3
13933: PUSH
13934: LD_EXP 36
13938: PUSH
13939: LD_EXP 43
13943: PUSH
13944: LD_VAR 0 2
13948: ARRAY
13949: ARRAY
13950: PPUSH
13951: LD_INT 0
13953: PPUSH
13954: CALL_OW 16
13958: ST_TO_ADDR
13959: GO 13896
// if zakl_plus > 1 then
13961: LD_LOC 45
13965: PUSH
13966: LD_INT 1
13968: GREATER
13969: IFFALSE 14084
// begin bc_type = b_workshop ;
13971: LD_ADDR_OWVAR 42
13975: PUSH
13976: LD_INT 2
13978: ST_TO_ADDR
// tmp3 = createbuilding ;
13979: LD_ADDR_VAR 0 4
13983: PUSH
13984: CALL_OW 46
13988: ST_TO_ADDR
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
13989: LD_ADDR_VAR 0 3
13993: PUSH
13994: LD_EXP 36
13998: PUSH
13999: LD_EXP 43
14003: PUSH
14004: LD_VAR 0 2
14008: ARRAY
14009: ARRAY
14010: PPUSH
14011: LD_INT 0
14013: PPUSH
14014: CALL_OW 16
14018: ST_TO_ADDR
// while not placeunitxy ( tmp3 , tmp2 [ 1 ] , tmp2 [ 2 ] , false ) do
14019: LD_VAR 0 4
14023: PPUSH
14024: LD_VAR 0 3
14028: PUSH
14029: LD_INT 1
14031: ARRAY
14032: PPUSH
14033: LD_VAR 0 3
14037: PUSH
14038: LD_INT 2
14040: ARRAY
14041: PPUSH
14042: LD_INT 0
14044: PPUSH
14045: CALL_OW 48
14049: NOT
14050: IFFALSE 14084
// tmp2 = randhexarea ( areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14052: LD_ADDR_VAR 0 3
14056: PUSH
14057: LD_EXP 36
14061: PUSH
14062: LD_EXP 43
14066: PUSH
14067: LD_VAR 0 2
14071: ARRAY
14072: ARRAY
14073: PPUSH
14074: LD_INT 0
14076: PPUSH
14077: CALL_OW 16
14081: ST_TO_ADDR
14082: GO 14019
// end ; end ; if batt_fl then
14084: LD_LOC 46
14088: IFFALSE 14198
// setbattleflag ( tmp , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 1 ] , depotpositions [ mp_sides_positions_ [ tmp ] ] [ 2 ] , [ [ bfo_defend_bonus_human , 80 ] , [ bfo_defend_bonus_vehicle , 40 ] , [ bfo_defend_bonus_building , 0 ] , [ bfo_range , 17 ] , [ bfo_height , 100 ] ] ) ;
14090: LD_VAR 0 2
14094: PPUSH
14095: LD_EXP 35
14099: PUSH
14100: LD_EXP 43
14104: PUSH
14105: LD_VAR 0 2
14109: ARRAY
14110: ARRAY
14111: PUSH
14112: LD_INT 1
14114: ARRAY
14115: PPUSH
14116: LD_EXP 35
14120: PUSH
14121: LD_EXP 43
14125: PUSH
14126: LD_VAR 0 2
14130: ARRAY
14131: ARRAY
14132: PUSH
14133: LD_INT 2
14135: ARRAY
14136: PPUSH
14137: LD_INT 1
14139: PUSH
14140: LD_INT 80
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PUSH
14147: LD_INT 2
14149: PUSH
14150: LD_INT 40
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: PUSH
14157: LD_INT 3
14159: PUSH
14160: LD_INT 0
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: PUSH
14167: LD_INT 10
14169: PUSH
14170: LD_INT 17
14172: PUSH
14173: EMPTY
14174: LIST
14175: LIST
14176: PUSH
14177: LD_INT 20
14179: PUSH
14180: LD_INT 100
14182: PUSH
14183: EMPTY
14184: LIST
14185: LIST
14186: PUSH
14187: EMPTY
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: PPUSH
14194: CALL_OW 418
// cl = class_scientistic ;
14198: LD_ADDR_VAR 0 5
14202: PUSH
14203: LD_INT 4
14205: ST_TO_ADDR
// for tmp2 = 1 to lidi do
14206: LD_ADDR_VAR 0 3
14210: PUSH
14211: DOUBLE
14212: LD_INT 1
14214: DEC
14215: ST_TO_ADDR
14216: LD_EXP 30
14220: PUSH
14221: FOR_TO
14222: IFFALSE 14314
// begin if tmp2 >= lidi / 2 then
14224: LD_VAR 0 3
14228: PUSH
14229: LD_EXP 30
14233: PUSH
14234: LD_INT 2
14236: DIVREAL
14237: GREATEREQUAL
14238: IFFALSE 14248
// cl = class_soldier ;
14240: LD_ADDR_VAR 0 5
14244: PUSH
14245: LD_INT 1
14247: ST_TO_ADDR
// preparehuman ( 0 , cl , skilly ) ;
14248: LD_INT 0
14250: PPUSH
14251: LD_VAR 0 5
14255: PPUSH
14256: LD_LOC 41
14260: PPUSH
14261: CALL_OW 380
// if tmp2 = 1 then
14265: LD_VAR 0 3
14269: PUSH
14270: LD_INT 1
14272: EQUAL
14273: IFFALSE 14283
// cl = class_engineer ;
14275: LD_ADDR_VAR 0 5
14279: PUSH
14280: LD_INT 2
14282: ST_TO_ADDR
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ tmp ] ] , false ) ;
14283: CALL_OW 44
14287: PPUSH
14288: LD_EXP 36
14292: PUSH
14293: LD_EXP 43
14297: PUSH
14298: LD_VAR 0 2
14302: ARRAY
14303: ARRAY
14304: PPUSH
14305: LD_INT 0
14307: PPUSH
14308: CALL_OW 49
// end ;
14312: GO 14221
14314: POP
14315: POP
// end ;
14316: GO 13148
14318: POP
14319: POP
// uc_side = 0 ;
14320: LD_ADDR_OWVAR 20
14324: PUSH
14325: LD_INT 0
14327: ST_TO_ADDR
// uc_nation = nation_nature ;
14328: LD_ADDR_OWVAR 21
14332: PUSH
14333: LD_INT 0
14335: ST_TO_ADDR
// for tmp = 1 to opoce do
14336: LD_ADDR_VAR 0 2
14340: PUSH
14341: DOUBLE
14342: LD_INT 1
14344: DEC
14345: ST_TO_ADDR
14346: LD_EXP 32
14350: PUSH
14351: FOR_TO
14352: IFFALSE 14384
// begin preparehuman ( 0 , class_apeman , 0 ) ;
14354: LD_INT 0
14356: PPUSH
14357: LD_INT 12
14359: PPUSH
14360: LD_INT 0
14362: PPUSH
14363: CALL_OW 380
// placeunitarea ( createhuman , les , false ) ;
14367: CALL_OW 44
14371: PPUSH
14372: LD_INT 4
14374: PPUSH
14375: LD_INT 0
14377: PPUSH
14378: CALL_OW 49
// end ;
14382: GO 14351
14384: POP
14385: POP
// case mp_sides_positions_ [ your_side ] of 1 :
14386: LD_EXP 43
14390: PUSH
14391: LD_OWVAR 2
14395: ARRAY
14396: PUSH
14397: LD_INT 1
14399: DOUBLE
14400: EQUAL
14401: IFTRUE 14405
14403: GO 14418
14405: POP
// centernowonxy ( 44 , 60 ) ; 2 :
14406: LD_INT 44
14408: PPUSH
14409: LD_INT 60
14411: PPUSH
14412: CALL_OW 86
14416: GO 14440
14418: LD_INT 2
14420: DOUBLE
14421: EQUAL
14422: IFTRUE 14426
14424: GO 14439
14426: POP
// centernowonxy ( 175 , 60 ) ; end ;
14427: LD_INT 175
14429: PPUSH
14430: LD_INT 60
14432: PPUSH
14433: CALL_OW 86
14437: GO 14440
14439: POP
// end ;
14440: LD_VAR 0 1
14444: RET
// on humandestroyed ( un , side , nat , x , y , dir , sex , cl ) marked 10 do if mp_sides_positions_ [ side ] = 1 then
14445: LD_EXP 43
14449: PUSH
14450: LD_VAR 0 2
14454: ARRAY
14455: PUSH
14456: LD_INT 1
14458: EQUAL
14459: IFFALSE 14477
// resp_cnt1 = resp_cnt1 + 1 else
14461: LD_ADDR_LOC 53
14465: PUSH
14466: LD_LOC 53
14470: PUSH
14471: LD_INT 1
14473: PLUS
14474: ST_TO_ADDR
14475: GO 14491
// resp_cnt2 = resp_cnt2 + 1 ;
14477: LD_ADDR_LOC 54
14481: PUSH
14482: LD_LOC 54
14486: PUSH
14487: LD_INT 1
14489: PLUS
14490: ST_TO_ADDR
14491: PPOPN 8
14493: END
// every 0 0$30 trigger resp_cnt1 >= people_resp marked 11 do
14494: LD_LOC 53
14498: PUSH
14499: LD_LOC 48
14503: GREATEREQUAL
14504: IFFALSE 14657
14506: GO 14508
14508: DISABLE
// begin resp_cnt1 = resp_cnt1 - people_resp ;
14509: LD_ADDR_LOC 53
14513: PUSH
14514: LD_LOC 53
14518: PUSH
14519: LD_LOC 48
14523: MINUS
14524: ST_TO_ADDR
// if not filterallunits ( [ [ f_side , pos1side ] , [ f_or , [ f_btype , b_depot ] , [ f_class , class_engineer ] ] ] ) then
14525: LD_INT 22
14527: PUSH
14528: LD_EXP 37
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: PUSH
14537: LD_INT 2
14539: PUSH
14540: LD_INT 30
14542: PUSH
14543: LD_INT 0
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: PUSH
14550: LD_INT 25
14552: PUSH
14553: LD_INT 2
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: LIST
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: PPUSH
14569: CALL_OW 69
14573: NOT
14574: IFFALSE 14579
// begin enable ;
14576: ENABLE
// exit ;
14577: GO 14657
// end ; uc_side = pos1side ;
14579: LD_ADDR_OWVAR 20
14583: PUSH
14584: LD_EXP 37
14588: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos1side ] ;
14589: LD_ADDR_OWVAR 21
14593: PUSH
14594: LD_EXP 42
14598: PUSH
14599: LD_EXP 37
14603: ARRAY
14604: ST_TO_ADDR
// preparehuman ( 0 , class_soldier , skilly ) ;
14605: LD_INT 0
14607: PPUSH
14608: LD_INT 1
14610: PPUSH
14611: LD_LOC 41
14615: PPUSH
14616: CALL_OW 380
// wait ( 0 0$10 ) ;
14620: LD_INT 350
14622: PPUSH
14623: CALL_OW 67
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ pos1side ] ] , true ) ;
14627: CALL_OW 44
14631: PPUSH
14632: LD_EXP 36
14636: PUSH
14637: LD_EXP 43
14641: PUSH
14642: LD_EXP 37
14646: ARRAY
14647: ARRAY
14648: PPUSH
14649: LD_INT 1
14651: PPUSH
14652: CALL_OW 49
// enable ;
14656: ENABLE
// end ;
14657: END
// every 0 0$30 trigger resp_cnt2 >= people_resp marked 12 do
14658: LD_LOC 54
14662: PUSH
14663: LD_LOC 48
14667: GREATEREQUAL
14668: IFFALSE 14821
14670: GO 14672
14672: DISABLE
// begin resp_cnt2 = resp_cnt2 - people_resp ;
14673: LD_ADDR_LOC 54
14677: PUSH
14678: LD_LOC 54
14682: PUSH
14683: LD_LOC 48
14687: MINUS
14688: ST_TO_ADDR
// if not filterallunits ( [ [ f_side , pos2side ] , [ f_or , [ f_btype , b_depot ] , [ f_class , class_engineer ] ] ] ) then
14689: LD_INT 22
14691: PUSH
14692: LD_EXP 38
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: PUSH
14701: LD_INT 2
14703: PUSH
14704: LD_INT 30
14706: PUSH
14707: LD_INT 0
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: PUSH
14714: LD_INT 25
14716: PUSH
14717: LD_INT 2
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: LIST
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: PPUSH
14733: CALL_OW 69
14737: NOT
14738: IFFALSE 14743
// begin enable ;
14740: ENABLE
// exit ;
14741: GO 14821
// end ; uc_side = pos2side ;
14743: LD_ADDR_OWVAR 20
14747: PUSH
14748: LD_EXP 38
14752: ST_TO_ADDR
// uc_nation = mp_sides_nations_ [ pos2side ] ;
14753: LD_ADDR_OWVAR 21
14757: PUSH
14758: LD_EXP 42
14762: PUSH
14763: LD_EXP 38
14767: ARRAY
14768: ST_TO_ADDR
// preparehuman ( 0 , class_soldier , skilly ) ;
14769: LD_INT 0
14771: PPUSH
14772: LD_INT 1
14774: PPUSH
14775: LD_LOC 41
14779: PPUSH
14780: CALL_OW 380
// wait ( 0 0$10 ) ;
14784: LD_INT 350
14786: PPUSH
14787: CALL_OW 67
// placeunitarea ( createhuman , areas [ mp_sides_positions_ [ pos2side ] ] , true ) ;
14791: CALL_OW 44
14795: PPUSH
14796: LD_EXP 36
14800: PUSH
14801: LD_EXP 43
14805: PUSH
14806: LD_EXP 38
14810: ARRAY
14811: ARRAY
14812: PPUSH
14813: LD_INT 1
14815: PPUSH
14816: CALL_OW 49
// enable ;
14820: ENABLE
// end ;
14821: END
// every 0 0$1 marked 13 do
14822: GO 14824
14824: DISABLE
// begin if not filterallunits ( [ [ f_side , pos1side ] , [ f_type , unit_human ] ] ) then
14825: LD_INT 22
14827: PUSH
14828: LD_EXP 37
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: PUSH
14837: LD_INT 21
14839: PUSH
14840: LD_INT 1
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: PUSH
14847: EMPTY
14848: LIST
14849: LIST
14850: PPUSH
14851: CALL_OW 69
14855: NOT
14856: IFFALSE 14880
// if pos1side = your_side then
14858: LD_EXP 37
14862: PUSH
14863: LD_OWVAR 2
14867: EQUAL
14868: IFFALSE 14876
// youlostinmultiplayer else
14870: CALL_OW 107
14874: GO 14880
// youwininmultiplayer ;
14876: CALL_OW 106
// if not filterallunits ( [ [ f_side , pos2side ] , [ f_type , unit_human ] ] ) then
14880: LD_INT 22
14882: PUSH
14883: LD_EXP 38
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: PUSH
14892: LD_INT 21
14894: PUSH
14895: LD_INT 1
14897: PUSH
14898: EMPTY
14899: LIST
14900: LIST
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: PPUSH
14906: CALL_OW 69
14910: NOT
14911: IFFALSE 14935
// if pos2side = your_side then
14913: LD_EXP 38
14917: PUSH
14918: LD_OWVAR 2
14922: EQUAL
14923: IFFALSE 14931
// youlostinmultiplayer else
14925: CALL_OW 107
14929: GO 14935
// youwininmultiplayer ;
14931: CALL_OW 106
// end ; end_of_file
14935: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
14936: LD_INT 0
14938: PPUSH
14939: PPUSH
// for un in battle_flags_id do
14940: LD_ADDR_VAR 0 2
14944: PUSH
14945: LD_EXP 29
14949: PUSH
14950: FOR_IN
14951: IFFALSE 15026
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
14953: LD_VAR 0 2
14957: PPUSH
14958: LD_INT 1
14960: PUSH
14961: LD_LOC 55
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: PUSH
14970: LD_INT 2
14972: PUSH
14973: LD_LOC 55
14977: PUSH
14978: LD_INT 2
14980: DIV
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PUSH
14986: LD_INT 3
14988: PUSH
14989: LD_LOC 55
14993: PUSH
14994: LD_INT 5
14996: DIV
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: PUSH
15002: LD_INT 20
15004: PUSH
15005: LD_LOC 55
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: PUSH
15014: EMPTY
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: PPUSH
15020: CALL_OW 423
15024: GO 14950
15026: POP
15027: POP
// end ;
15028: LD_VAR 0 1
15032: RET
// every 0 0$0.1 marked 55 do var un ;
15033: GO 15035
15035: DISABLE
15036: LD_INT 0
15038: PPUSH
// begin if not def_morale_flags then
15039: LD_EXP 59
15043: NOT
15044: IFFALSE 15048
// exit ;
15046: GO 15125
// if not morale_decreasing_time then
15048: LD_EXP 11
15052: NOT
15053: IFFALSE 15057
// exit ;
15055: GO 15125
// strength = 100 ;
15057: LD_ADDR_LOC 55
15061: PUSH
15062: LD_INT 100
15064: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
15065: LD_EXP 11
15069: PPUSH
15070: CALL_OW 67
// strength := strength - 1 ;
15074: LD_ADDR_LOC 55
15078: PUSH
15079: LD_LOC 55
15083: PUSH
15084: LD_INT 1
15086: MINUS
15087: ST_TO_ADDR
// Update_Flags ;
15088: CALL 14936 0 0
// until not strength ;
15092: LD_LOC 55
15096: NOT
15097: IFFALSE 15065
// for un in battle_flags_id do
15099: LD_ADDR_VAR 0 1
15103: PUSH
15104: LD_EXP 29
15108: PUSH
15109: FOR_IN
15110: IFFALSE 15123
// KillBattleFlag ( un ) ;
15112: LD_VAR 0 1
15116: PPUSH
15117: CALL_OW 419
15121: GO 15109
15123: POP
15124: POP
// end ; end_of_file
15125: PPOPN 1
15127: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
15128: LD_INT 0
15130: PPUSH
15131: PPUSH
// if ( not IAmSpec ) then
15132: CALL_OW 531
15136: NOT
15137: IFFALSE 15153
// Result := Limits_Info ^  ;
15139: LD_ADDR_VAR 0 1
15143: PUSH
15144: LD_LOC 67
15148: PUSH
15149: LD_STRING 
15151: ADD
15152: ST_TO_ADDR
// for i := 1 to 8 do
15153: LD_ADDR_VAR 0 2
15157: PUSH
15158: DOUBLE
15159: LD_INT 1
15161: DEC
15162: ST_TO_ADDR
15163: LD_INT 8
15165: PUSH
15166: FOR_TO
15167: IFFALSE 15212
// if Cheaters [ i ] then
15169: LD_LOC 68
15173: PUSH
15174: LD_VAR 0 2
15178: ARRAY
15179: IFFALSE 15210
// Result := Result ^ [ #Cheater , i , i ] ;
15181: LD_ADDR_VAR 0 1
15185: PUSH
15186: LD_VAR 0 1
15190: PUSH
15191: LD_STRING #Cheater
15193: PUSH
15194: LD_VAR 0 2
15198: PUSH
15199: LD_VAR 0 2
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: LIST
15208: ADD
15209: ST_TO_ADDR
15210: GO 15166
15212: POP
15213: POP
// end ;
15214: LD_VAR 0 1
15218: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
15219: LD_INT 0
15221: PPUSH
15222: PPUSH
15223: PPUSH
15224: PPUSH
15225: PPUSH
// case Game_Type of 10 :
15226: LD_EXP 49
15230: PUSH
15231: LD_INT 10
15233: DOUBLE
15234: EQUAL
15235: IFTRUE 15239
15237: GO 15250
15239: POP
// def_game_rules := 1 ; 11 :
15240: LD_ADDR_EXP 50
15244: PUSH
15245: LD_INT 1
15247: ST_TO_ADDR
15248: GO 15270
15250: LD_INT 11
15252: DOUBLE
15253: EQUAL
15254: IFTRUE 15258
15256: GO 15269
15258: POP
// def_game_rules := 3 ; end ;
15259: LD_ADDR_EXP 50
15263: PUSH
15264: LD_INT 3
15266: ST_TO_ADDR
15267: GO 15270
15269: POP
// case def_game_rules of 0 :
15270: LD_EXP 50
15274: PUSH
15275: LD_INT 0
15277: DOUBLE
15278: EQUAL
15279: IFTRUE 15283
15281: GO 15288
15283: POP
// exit ; 1 :
15284: GO 17346
15286: GO 17246
15288: LD_INT 1
15290: DOUBLE
15291: EQUAL
15292: IFTRUE 15296
15294: GO 15512
15296: POP
// begin def_base_level := 2 ;
15297: LD_ADDR_EXP 51
15301: PUSH
15302: LD_INT 2
15304: ST_TO_ADDR
// def_amount_of_people := 2 ;
15305: LD_ADDR_EXP 52
15309: PUSH
15310: LD_INT 2
15312: ST_TO_ADDR
// def_skill_level := 1 ;
15313: LD_ADDR_EXP 53
15317: PUSH
15318: LD_INT 1
15320: ST_TO_ADDR
// def_starting_resources := 2 ;
15321: LD_ADDR_EXP 54
15325: PUSH
15326: LD_INT 2
15328: ST_TO_ADDR
// def_shipments_density := 1 ;
15329: LD_ADDR_EXP 55
15333: PUSH
15334: LD_INT 1
15336: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
15337: LD_ADDR_EXP 56
15341: PUSH
15342: LD_INT 0
15344: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
15345: LD_ADDR_EXP 57
15349: PUSH
15350: LD_INT 1
15352: ST_TO_ADDR
// def_shared_vision := 1 ;
15353: LD_ADDR_EXP 58
15357: PUSH
15358: LD_INT 1
15360: ST_TO_ADDR
// def_morale_flags := 3 ;
15361: LD_ADDR_EXP 59
15365: PUSH
15366: LD_INT 3
15368: ST_TO_ADDR
// def_siberite_detection := 1 ;
15369: LD_ADDR_EXP 60
15373: PUSH
15374: LD_INT 1
15376: ST_TO_ADDR
// def_people_respawning := 1 ;
15377: LD_ADDR_EXP 61
15381: PUSH
15382: LD_INT 1
15384: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
15385: LD_ADDR_EXP 62
15389: PUSH
15390: LD_INT 1
15392: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15393: LD_ADDR_EXP 63
15397: PUSH
15398: LD_INT 0
15400: ST_TO_ADDR
// def_builduptime := 2 ;
15401: LD_ADDR_EXP 64
15405: PUSH
15406: LD_INT 2
15408: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
15409: LD_ADDR_VAR 0 2
15413: PUSH
15414: EMPTY
15415: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
15416: LD_ADDR_VAR 0 3
15420: PUSH
15421: EMPTY
15422: ST_TO_ADDR
// Banned_Weapons := [ ] ;
15423: LD_ADDR_LOC 62
15427: PUSH
15428: EMPTY
15429: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15430: LD_ADDR_LOC 63
15434: PUSH
15435: EMPTY
15436: ST_TO_ADDR
// Banned_Controls := [ ] ;
15437: LD_ADDR_LOC 64
15441: PUSH
15442: EMPTY
15443: ST_TO_ADDR
// Banned_Engines := [ ] ;
15444: LD_ADDR_LOC 65
15448: PUSH
15449: EMPTY
15450: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
15451: LD_ADDR_LOC 60
15455: PUSH
15456: LD_INT 37
15458: PUSH
15459: EMPTY
15460: LIST
15461: PUSH
15462: LD_INT 4
15464: PUSH
15465: LD_INT 5
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: PUSH
15472: LD_INT 31
15474: PUSH
15475: LD_INT 32
15477: PUSH
15478: LD_INT 33
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: LIST
15485: PUSH
15486: EMPTY
15487: LIST
15488: LIST
15489: LIST
15490: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
15491: LD_ADDR_LOC 61
15495: PUSH
15496: LD_INT 2
15498: PUSH
15499: LD_INT 2
15501: PUSH
15502: LD_INT 4
15504: PUSH
15505: EMPTY
15506: LIST
15507: LIST
15508: LIST
15509: ST_TO_ADDR
// end ; 2 :
15510: GO 17246
15512: LD_INT 2
15514: DOUBLE
15515: EQUAL
15516: IFTRUE 15520
15518: GO 15729
15520: POP
// begin def_base_level := 1 ;
15521: LD_ADDR_EXP 51
15525: PUSH
15526: LD_INT 1
15528: ST_TO_ADDR
// def_amount_of_people := 2 ;
15529: LD_ADDR_EXP 52
15533: PUSH
15534: LD_INT 2
15536: ST_TO_ADDR
// def_skill_level := 3 ;
15537: LD_ADDR_EXP 53
15541: PUSH
15542: LD_INT 3
15544: ST_TO_ADDR
// def_starting_resources := 3 ;
15545: LD_ADDR_EXP 54
15549: PUSH
15550: LD_INT 3
15552: ST_TO_ADDR
// def_shipments_density := 2 ;
15553: LD_ADDR_EXP 55
15557: PUSH
15558: LD_INT 2
15560: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
15561: LD_ADDR_EXP 56
15565: PUSH
15566: LD_INT 1
15568: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
15569: LD_ADDR_EXP 57
15573: PUSH
15574: LD_INT 2
15576: ST_TO_ADDR
// def_shared_vision := 1 ;
15577: LD_ADDR_EXP 58
15581: PUSH
15582: LD_INT 1
15584: ST_TO_ADDR
// def_morale_flags := 0 ;
15585: LD_ADDR_EXP 59
15589: PUSH
15590: LD_INT 0
15592: ST_TO_ADDR
// def_siberite_detection := 1 ;
15593: LD_ADDR_EXP 60
15597: PUSH
15598: LD_INT 1
15600: ST_TO_ADDR
// def_people_respawning := 0 ;
15601: LD_ADDR_EXP 61
15605: PUSH
15606: LD_INT 0
15608: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
15609: LD_ADDR_EXP 62
15613: PUSH
15614: LD_INT 0
15616: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15617: LD_ADDR_EXP 63
15621: PUSH
15622: LD_INT 0
15624: ST_TO_ADDR
// def_builduptime := 2 ;
15625: LD_ADDR_EXP 64
15629: PUSH
15630: LD_INT 2
15632: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
15633: LD_ADDR_VAR 0 2
15637: PUSH
15638: LD_INT 1
15640: PUSH
15641: EMPTY
15642: LIST
15643: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
15644: LD_ADDR_VAR 0 3
15648: PUSH
15649: EMPTY
15650: ST_TO_ADDR
// Banned_Weapons := [ ] ;
15651: LD_ADDR_LOC 62
15655: PUSH
15656: EMPTY
15657: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15658: LD_ADDR_LOC 63
15662: PUSH
15663: EMPTY
15664: ST_TO_ADDR
// Banned_Controls := [ ] ;
15665: LD_ADDR_LOC 64
15669: PUSH
15670: EMPTY
15671: ST_TO_ADDR
// Banned_Engines := [ ] ;
15672: LD_ADDR_LOC 65
15676: PUSH
15677: EMPTY
15678: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
15679: LD_ADDR_LOC 60
15683: PUSH
15684: LD_INT 4
15686: PUSH
15687: LD_INT 5
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: PUSH
15694: LD_INT 31
15696: PUSH
15697: LD_INT 32
15699: PUSH
15700: LD_INT 33
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: LIST
15707: PUSH
15708: EMPTY
15709: LIST
15710: LIST
15711: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
15712: LD_ADDR_LOC 61
15716: PUSH
15717: LD_INT 1
15719: PUSH
15720: LD_INT 2
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: ST_TO_ADDR
// end ; 3 :
15727: GO 17246
15729: LD_INT 3
15731: DOUBLE
15732: EQUAL
15733: IFTRUE 15737
15735: GO 15980
15737: POP
// begin def_base_level := 1 ;
15738: LD_ADDR_EXP 51
15742: PUSH
15743: LD_INT 1
15745: ST_TO_ADDR
// def_amount_of_people := 2 ;
15746: LD_ADDR_EXP 52
15750: PUSH
15751: LD_INT 2
15753: ST_TO_ADDR
// def_skill_level := 3 ;
15754: LD_ADDR_EXP 53
15758: PUSH
15759: LD_INT 3
15761: ST_TO_ADDR
// def_starting_resources := 3 ;
15762: LD_ADDR_EXP 54
15766: PUSH
15767: LD_INT 3
15769: ST_TO_ADDR
// def_shipments_density := 1 ;
15770: LD_ADDR_EXP 55
15774: PUSH
15775: LD_INT 1
15777: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
15778: LD_ADDR_EXP 56
15782: PUSH
15783: LD_INT 0
15785: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
15786: LD_ADDR_EXP 57
15790: PUSH
15791: LD_INT 1
15793: ST_TO_ADDR
// def_shared_vision := 1 ;
15794: LD_ADDR_EXP 58
15798: PUSH
15799: LD_INT 1
15801: ST_TO_ADDR
// def_morale_flags := 0 ;
15802: LD_ADDR_EXP 59
15806: PUSH
15807: LD_INT 0
15809: ST_TO_ADDR
// def_siberite_detection := 1 ;
15810: LD_ADDR_EXP 60
15814: PUSH
15815: LD_INT 1
15817: ST_TO_ADDR
// def_people_respawning := 0 ;
15818: LD_ADDR_EXP 61
15822: PUSH
15823: LD_INT 0
15825: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
15826: LD_ADDR_EXP 62
15830: PUSH
15831: LD_INT 2
15833: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15834: LD_ADDR_EXP 63
15838: PUSH
15839: LD_INT 0
15841: ST_TO_ADDR
// def_builduptime := 1 ;
15842: LD_ADDR_EXP 64
15846: PUSH
15847: LD_INT 1
15849: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
15850: LD_ADDR_VAR 0 2
15854: PUSH
15855: LD_INT 23
15857: PUSH
15858: EMPTY
15859: LIST
15860: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
15861: LD_ADDR_VAR 0 3
15865: PUSH
15866: LD_INT 2
15868: PUSH
15869: LD_INT 37
15871: PUSH
15872: LD_INT 32
15874: PUSH
15875: LD_INT 33
15877: PUSH
15878: LD_INT 36
15880: PUSH
15881: LD_INT 16
15883: PUSH
15884: LD_INT 23
15886: PUSH
15887: LD_INT 21
15889: PUSH
15890: LD_INT 18
15892: PUSH
15893: LD_INT 22
15895: PUSH
15896: LD_INT 20
15898: PUSH
15899: LD_INT 19
15901: PUSH
15902: LD_INT 25
15904: PUSH
15905: LD_INT 17
15907: PUSH
15908: LD_INT 24
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: ST_TO_ADDR
// Banned_Weapons := [ ] ;
15928: LD_ADDR_LOC 62
15932: PUSH
15933: EMPTY
15934: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15935: LD_ADDR_LOC 63
15939: PUSH
15940: EMPTY
15941: ST_TO_ADDR
// Banned_Controls := [ ] ;
15942: LD_ADDR_LOC 64
15946: PUSH
15947: EMPTY
15948: ST_TO_ADDR
// Banned_Engines := [ ] ;
15949: LD_ADDR_LOC 65
15953: PUSH
15954: EMPTY
15955: ST_TO_ADDR
// Restricted_Builds := [ ] ;
15956: LD_ADDR_LOC 60
15960: PUSH
15961: EMPTY
15962: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
15963: LD_ADDR_LOC 61
15967: PUSH
15968: EMPTY
15969: ST_TO_ADDR
// No_Mechs := true ;
15970: LD_ADDR_EXP 65
15974: PUSH
15975: LD_INT 1
15977: ST_TO_ADDR
// end ; 4 :
15978: GO 17246
15980: LD_INT 4
15982: DOUBLE
15983: EQUAL
15984: IFTRUE 15988
15986: GO 16163
15988: POP
// begin def_base_level := 1 ;
15989: LD_ADDR_EXP 51
15993: PUSH
15994: LD_INT 1
15996: ST_TO_ADDR
// def_amount_of_people := 2 ;
15997: LD_ADDR_EXP 52
16001: PUSH
16002: LD_INT 2
16004: ST_TO_ADDR
// def_skill_level := 3 ;
16005: LD_ADDR_EXP 53
16009: PUSH
16010: LD_INT 3
16012: ST_TO_ADDR
// def_starting_resources := 3 ;
16013: LD_ADDR_EXP 54
16017: PUSH
16018: LD_INT 3
16020: ST_TO_ADDR
// def_shipments_density := 2 ;
16021: LD_ADDR_EXP 55
16025: PUSH
16026: LD_INT 2
16028: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
16029: LD_ADDR_EXP 56
16033: PUSH
16034: LD_INT 1
16036: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
16037: LD_ADDR_EXP 57
16041: PUSH
16042: LD_INT 2
16044: ST_TO_ADDR
// def_shared_vision := 1 ;
16045: LD_ADDR_EXP 58
16049: PUSH
16050: LD_INT 1
16052: ST_TO_ADDR
// def_morale_flags := 0 ;
16053: LD_ADDR_EXP 59
16057: PUSH
16058: LD_INT 0
16060: ST_TO_ADDR
// def_siberite_detection := 1 ;
16061: LD_ADDR_EXP 60
16065: PUSH
16066: LD_INT 1
16068: ST_TO_ADDR
// def_people_respawning := 0 ;
16069: LD_ADDR_EXP 61
16073: PUSH
16074: LD_INT 0
16076: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
16077: LD_ADDR_EXP 62
16081: PUSH
16082: LD_INT 0
16084: ST_TO_ADDR
// def_siberite_bomb := 1 ;
16085: LD_ADDR_EXP 63
16089: PUSH
16090: LD_INT 1
16092: ST_TO_ADDR
// def_builduptime := 3 ;
16093: LD_ADDR_EXP 64
16097: PUSH
16098: LD_INT 3
16100: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
16101: LD_ADDR_VAR 0 2
16105: PUSH
16106: LD_INT 1
16108: PUSH
16109: EMPTY
16110: LIST
16111: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
16112: LD_ADDR_VAR 0 3
16116: PUSH
16117: EMPTY
16118: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16119: LD_ADDR_LOC 62
16123: PUSH
16124: EMPTY
16125: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16126: LD_ADDR_LOC 63
16130: PUSH
16131: EMPTY
16132: ST_TO_ADDR
// Banned_Controls := [ ] ;
16133: LD_ADDR_LOC 64
16137: PUSH
16138: EMPTY
16139: ST_TO_ADDR
// Banned_Engines := [ ] ;
16140: LD_ADDR_LOC 65
16144: PUSH
16145: EMPTY
16146: ST_TO_ADDR
// Restricted_Builds := [ ] ;
16147: LD_ADDR_LOC 60
16151: PUSH
16152: EMPTY
16153: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
16154: LD_ADDR_LOC 61
16158: PUSH
16159: EMPTY
16160: ST_TO_ADDR
// end ; 5 :
16161: GO 17246
16163: LD_INT 5
16165: DOUBLE
16166: EQUAL
16167: IFTRUE 16171
16169: GO 16420
16171: POP
// begin def_base_level := 0 ;
16172: LD_ADDR_EXP 51
16176: PUSH
16177: LD_INT 0
16179: ST_TO_ADDR
// def_amount_of_people := 0 ;
16180: LD_ADDR_EXP 52
16184: PUSH
16185: LD_INT 0
16187: ST_TO_ADDR
// def_skill_level := 0 ;
16188: LD_ADDR_EXP 53
16192: PUSH
16193: LD_INT 0
16195: ST_TO_ADDR
// def_starting_resources := 0 ;
16196: LD_ADDR_EXP 54
16200: PUSH
16201: LD_INT 0
16203: ST_TO_ADDR
// def_shipments_density := 0 ;
16204: LD_ADDR_EXP 55
16208: PUSH
16209: LD_INT 0
16211: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
16212: LD_ADDR_EXP 56
16216: PUSH
16217: LD_INT 0
16219: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
16220: LD_ADDR_EXP 57
16224: PUSH
16225: LD_INT 0
16227: ST_TO_ADDR
// def_shared_vision := 1 ;
16228: LD_ADDR_EXP 58
16232: PUSH
16233: LD_INT 1
16235: ST_TO_ADDR
// def_morale_flags := 0 ;
16236: LD_ADDR_EXP 59
16240: PUSH
16241: LD_INT 0
16243: ST_TO_ADDR
// def_siberite_detection := 0 ;
16244: LD_ADDR_EXP 60
16248: PUSH
16249: LD_INT 0
16251: ST_TO_ADDR
// def_people_respawning := 1 ;
16252: LD_ADDR_EXP 61
16256: PUSH
16257: LD_INT 1
16259: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
16260: LD_ADDR_EXP 62
16264: PUSH
16265: LD_INT 1
16267: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16268: LD_ADDR_EXP 63
16272: PUSH
16273: LD_INT 0
16275: ST_TO_ADDR
// def_builduptime := 0 ;
16276: LD_ADDR_EXP 64
16280: PUSH
16281: LD_INT 0
16283: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
16284: LD_ADDR_VAR 0 2
16288: PUSH
16289: LD_INT 10
16291: PUSH
16292: LD_INT 3
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
16299: LD_ADDR_VAR 0 3
16303: PUSH
16304: LD_INT 12
16306: PUSH
16307: LD_INT 11
16309: PUSH
16310: LD_INT 14
16312: PUSH
16313: LD_INT 13
16315: PUSH
16316: LD_INT 5
16318: PUSH
16319: LD_INT 24
16321: PUSH
16322: LD_INT 21
16324: PUSH
16325: LD_INT 33
16327: PUSH
16328: LD_INT 36
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
16342: LD_ADDR_LOC 62
16346: PUSH
16347: LD_INT 31
16349: PUSH
16350: EMPTY
16351: LIST
16352: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16353: LD_ADDR_LOC 63
16357: PUSH
16358: EMPTY
16359: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
16360: LD_ADDR_LOC 64
16364: PUSH
16365: LD_INT 2
16367: PUSH
16368: EMPTY
16369: LIST
16370: ST_TO_ADDR
// Banned_Engines := [ ] ;
16371: LD_ADDR_LOC 65
16375: PUSH
16376: EMPTY
16377: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
16378: LD_ADDR_LOC 60
16382: PUSH
16383: LD_INT 4
16385: PUSH
16386: EMPTY
16387: LIST
16388: PUSH
16389: LD_INT 31
16391: PUSH
16392: LD_INT 32
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
16403: LD_ADDR_LOC 61
16407: PUSH
16408: LD_INT 1
16410: PUSH
16411: LD_INT 1
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: ST_TO_ADDR
// end ; 6 :
16418: GO 17246
16420: LD_INT 6
16422: DOUBLE
16423: EQUAL
16424: IFTRUE 16428
16426: GO 16631
16428: POP
// begin def_base_level := 1 ;
16429: LD_ADDR_EXP 51
16433: PUSH
16434: LD_INT 1
16436: ST_TO_ADDR
// def_amount_of_people := 2 ;
16437: LD_ADDR_EXP 52
16441: PUSH
16442: LD_INT 2
16444: ST_TO_ADDR
// def_skill_level := 3 ;
16445: LD_ADDR_EXP 53
16449: PUSH
16450: LD_INT 3
16452: ST_TO_ADDR
// def_starting_resources := 3 ;
16453: LD_ADDR_EXP 54
16457: PUSH
16458: LD_INT 3
16460: ST_TO_ADDR
// def_shipments_density := 1 ;
16461: LD_ADDR_EXP 55
16465: PUSH
16466: LD_INT 1
16468: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
16469: LD_ADDR_EXP 56
16473: PUSH
16474: LD_INT 0
16476: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
16477: LD_ADDR_EXP 57
16481: PUSH
16482: LD_INT 1
16484: ST_TO_ADDR
// def_shared_vision := 1 ;
16485: LD_ADDR_EXP 58
16489: PUSH
16490: LD_INT 1
16492: ST_TO_ADDR
// def_morale_flags := 0 ;
16493: LD_ADDR_EXP 59
16497: PUSH
16498: LD_INT 0
16500: ST_TO_ADDR
// def_siberite_detection := 1 ;
16501: LD_ADDR_EXP 60
16505: PUSH
16506: LD_INT 1
16508: ST_TO_ADDR
// def_people_respawning := 2 ;
16509: LD_ADDR_EXP 61
16513: PUSH
16514: LD_INT 2
16516: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
16517: LD_ADDR_EXP 62
16521: PUSH
16522: LD_INT 1
16524: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16525: LD_ADDR_EXP 63
16529: PUSH
16530: LD_INT 0
16532: ST_TO_ADDR
// def_builduptime := 1 ;
16533: LD_ADDR_EXP 64
16537: PUSH
16538: LD_INT 1
16540: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
16541: LD_ADDR_VAR 0 2
16545: PUSH
16546: LD_INT 23
16548: PUSH
16549: EMPTY
16550: LIST
16551: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
16552: LD_ADDR_VAR 0 3
16556: PUSH
16557: LD_INT 2
16559: PUSH
16560: LD_INT 37
16562: PUSH
16563: LD_INT 31
16565: PUSH
16566: LD_INT 32
16568: PUSH
16569: LD_INT 33
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16579: LD_ADDR_LOC 62
16583: PUSH
16584: EMPTY
16585: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16586: LD_ADDR_LOC 63
16590: PUSH
16591: EMPTY
16592: ST_TO_ADDR
// Banned_Controls := [ ] ;
16593: LD_ADDR_LOC 64
16597: PUSH
16598: EMPTY
16599: ST_TO_ADDR
// Banned_Engines := [ ] ;
16600: LD_ADDR_LOC 65
16604: PUSH
16605: EMPTY
16606: ST_TO_ADDR
// Restricted_Builds := [ ] ;
16607: LD_ADDR_LOC 60
16611: PUSH
16612: EMPTY
16613: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
16614: LD_ADDR_LOC 61
16618: PUSH
16619: EMPTY
16620: ST_TO_ADDR
// No_Mechs := true ;
16621: LD_ADDR_EXP 65
16625: PUSH
16626: LD_INT 1
16628: ST_TO_ADDR
// end ; 7 :
16629: GO 17246
16631: LD_INT 7
16633: DOUBLE
16634: EQUAL
16635: IFTRUE 16639
16637: GO 16837
16639: POP
// begin def_base_level := 1 ;
16640: LD_ADDR_EXP 51
16644: PUSH
16645: LD_INT 1
16647: ST_TO_ADDR
// def_amount_of_people := 2 ;
16648: LD_ADDR_EXP 52
16652: PUSH
16653: LD_INT 2
16655: ST_TO_ADDR
// def_skill_level := 3 ;
16656: LD_ADDR_EXP 53
16660: PUSH
16661: LD_INT 3
16663: ST_TO_ADDR
// def_starting_resources := 3 ;
16664: LD_ADDR_EXP 54
16668: PUSH
16669: LD_INT 3
16671: ST_TO_ADDR
// def_shipments_density := 1 ;
16672: LD_ADDR_EXP 55
16676: PUSH
16677: LD_INT 1
16679: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
16680: LD_ADDR_EXP 56
16684: PUSH
16685: LD_INT 1
16687: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
16688: LD_ADDR_EXP 57
16692: PUSH
16693: LD_INT 2
16695: ST_TO_ADDR
// def_shared_vision := 1 ;
16696: LD_ADDR_EXP 58
16700: PUSH
16701: LD_INT 1
16703: ST_TO_ADDR
// def_morale_flags := 0 ;
16704: LD_ADDR_EXP 59
16708: PUSH
16709: LD_INT 0
16711: ST_TO_ADDR
// def_siberite_detection := 1 ;
16712: LD_ADDR_EXP 60
16716: PUSH
16717: LD_INT 1
16719: ST_TO_ADDR
// def_people_respawning := 0 ;
16720: LD_ADDR_EXP 61
16724: PUSH
16725: LD_INT 0
16727: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
16728: LD_ADDR_EXP 62
16732: PUSH
16733: LD_INT 1
16735: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16736: LD_ADDR_EXP 63
16740: PUSH
16741: LD_INT 0
16743: ST_TO_ADDR
// def_builduptime := 3 ;
16744: LD_ADDR_EXP 64
16748: PUSH
16749: LD_INT 3
16751: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
16752: LD_ADDR_VAR 0 2
16756: PUSH
16757: LD_INT 23
16759: PUSH
16760: EMPTY
16761: LIST
16762: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
16763: LD_ADDR_VAR 0 3
16767: PUSH
16768: LD_INT 37
16770: PUSH
16771: EMPTY
16772: LIST
16773: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16774: LD_ADDR_LOC 62
16778: PUSH
16779: EMPTY
16780: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16781: LD_ADDR_LOC 63
16785: PUSH
16786: EMPTY
16787: ST_TO_ADDR
// Banned_Controls := [ ] ;
16788: LD_ADDR_LOC 64
16792: PUSH
16793: EMPTY
16794: ST_TO_ADDR
// Banned_Engines := [ ] ;
16795: LD_ADDR_LOC 65
16799: PUSH
16800: EMPTY
16801: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
16802: LD_ADDR_LOC 60
16806: PUSH
16807: LD_INT 31
16809: PUSH
16810: LD_INT 32
16812: PUSH
16813: LD_INT 33
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: LIST
16820: PUSH
16821: EMPTY
16822: LIST
16823: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
16824: LD_ADDR_LOC 61
16828: PUSH
16829: LD_INT 10
16831: PUSH
16832: EMPTY
16833: LIST
16834: ST_TO_ADDR
// end ; 8 :
16835: GO 17246
16837: LD_INT 8
16839: DOUBLE
16840: EQUAL
16841: IFTRUE 16845
16843: GO 17245
16845: POP
// begin def_base_level := 0 ;
16846: LD_ADDR_EXP 51
16850: PUSH
16851: LD_INT 0
16853: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
16854: LD_ADDR_EXP 52
16858: PUSH
16859: LD_INT 0
16861: PPUSH
16862: LD_INT 1
16864: PPUSH
16865: CALL_OW 12
16869: ST_TO_ADDR
// def_skill_level := 0 ;
16870: LD_ADDR_EXP 53
16874: PUSH
16875: LD_INT 0
16877: ST_TO_ADDR
// def_starting_resources := 2 ;
16878: LD_ADDR_EXP 54
16882: PUSH
16883: LD_INT 2
16885: ST_TO_ADDR
// def_shipments_density := 1 ;
16886: LD_ADDR_EXP 55
16890: PUSH
16891: LD_INT 1
16893: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
16894: LD_ADDR_EXP 56
16898: PUSH
16899: LD_INT 0
16901: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
16902: LD_ADDR_EXP 57
16906: PUSH
16907: LD_INT 0
16909: ST_TO_ADDR
// def_shared_vision := 1 ;
16910: LD_ADDR_EXP 58
16914: PUSH
16915: LD_INT 1
16917: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
16918: LD_ADDR_EXP 59
16922: PUSH
16923: LD_INT 0
16925: PPUSH
16926: LD_INT 2
16928: PPUSH
16929: CALL_OW 12
16933: ST_TO_ADDR
// def_siberite_detection := 0 ;
16934: LD_ADDR_EXP 60
16938: PUSH
16939: LD_INT 0
16941: ST_TO_ADDR
// def_people_respawning := 0 ;
16942: LD_ADDR_EXP 61
16946: PUSH
16947: LD_INT 0
16949: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
16950: LD_ADDR_EXP 62
16954: PUSH
16955: LD_INT 2
16957: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16958: LD_ADDR_EXP 63
16962: PUSH
16963: LD_INT 0
16965: ST_TO_ADDR
// def_builduptime := 0 ;
16966: LD_ADDR_EXP 64
16970: PUSH
16971: LD_INT 0
16973: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
16974: LD_ADDR_VAR 0 2
16978: PUSH
16979: LD_INT 23
16981: PUSH
16982: LD_INT 20
16984: PUSH
16985: LD_INT 40
16987: PUSH
16988: LD_INT 47
16990: PUSH
16991: LD_INT 46
16993: PUSH
16994: LD_INT 39
16996: PUSH
16997: LD_INT 71
16999: PUSH
17000: LD_INT 34
17002: PUSH
17003: LD_INT 41
17005: PUSH
17006: LD_INT 44
17008: PUSH
17009: LD_INT 17
17011: PUSH
17012: LD_INT 16
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
17029: LD_ADDR_VAR 0 3
17033: PUSH
17034: LD_INT 37
17036: PUSH
17037: LD_INT 5
17039: PUSH
17040: LD_INT 13
17042: PUSH
17043: LD_INT 34
17045: PUSH
17046: LD_INT 12
17048: PUSH
17049: LD_INT 15
17051: PUSH
17052: LD_INT 11
17054: PUSH
17055: LD_INT 14
17057: PUSH
17058: LD_INT 29
17060: PUSH
17061: LD_INT 30
17063: PUSH
17064: LD_INT 28
17066: PUSH
17067: LD_INT 24
17069: PUSH
17070: LD_INT 25
17072: PUSH
17073: LD_INT 20
17075: PUSH
17076: LD_INT 21
17078: PUSH
17079: LD_INT 22
17081: PUSH
17082: LD_INT 36
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: ST_TO_ADDR
// Banned_Weapons := [ ] ;
17104: LD_ADDR_LOC 62
17108: PUSH
17109: EMPTY
17110: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
17111: LD_ADDR_LOC 63
17115: PUSH
17116: LD_INT 14
17118: PUSH
17119: EMPTY
17120: LIST
17121: ST_TO_ADDR
// Banned_Controls := [ ] ;
17122: LD_ADDR_LOC 64
17126: PUSH
17127: EMPTY
17128: ST_TO_ADDR
// Banned_Engines := [ ] ;
17129: LD_ADDR_LOC 65
17133: PUSH
17134: EMPTY
17135: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
17136: LD_ADDR_LOC 60
17140: PUSH
17141: LD_INT 31
17143: PUSH
17144: LD_INT 32
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PUSH
17151: LD_INT 4
17153: PUSH
17154: EMPTY
17155: LIST
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
17161: LD_ADDR_LOC 61
17165: PUSH
17166: LD_INT 2
17168: PUSH
17169: LD_INT 1
17171: PUSH
17172: EMPTY
17173: LIST
17174: LIST
17175: ST_TO_ADDR
// for i := 1 to 8 do
17176: LD_ADDR_VAR 0 4
17180: PUSH
17181: DOUBLE
17182: LD_INT 1
17184: DEC
17185: ST_TO_ADDR
17186: LD_INT 8
17188: PUSH
17189: FOR_TO
17190: IFFALSE 17241
// if ( Side_Nations [ i ] = 3 ) then
17192: LD_EXP 19
17196: PUSH
17197: LD_VAR 0 4
17201: ARRAY
17202: PUSH
17203: LD_INT 3
17205: EQUAL
17206: IFFALSE 17239
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
17208: LD_ADDR_EXP 19
17212: PUSH
17213: LD_EXP 19
17217: PPUSH
17218: LD_VAR 0 4
17222: PPUSH
17223: LD_INT 1
17225: PPUSH
17226: LD_INT 2
17228: PPUSH
17229: CALL_OW 12
17233: PPUSH
17234: CALL_OW 1
17238: ST_TO_ADDR
17239: GO 17189
17241: POP
17242: POP
// end ; end ;
17243: GO 17246
17245: POP
// for i := 1 to 8 do
17246: LD_ADDR_VAR 0 4
17250: PUSH
17251: DOUBLE
17252: LD_INT 1
17254: DEC
17255: ST_TO_ADDR
17256: LD_INT 8
17258: PUSH
17259: FOR_TO
17260: IFFALSE 17344
// if Side_Positions [ i ] then
17262: LD_EXP 18
17266: PUSH
17267: LD_VAR 0 4
17271: ARRAY
17272: IFFALSE 17342
// begin for j in Unavailable_Techs do
17274: LD_ADDR_VAR 0 5
17278: PUSH
17279: LD_VAR 0 2
17283: PUSH
17284: FOR_IN
17285: IFFALSE 17306
// SetTech ( j , i , 0 ) ;
17287: LD_VAR 0 5
17291: PPUSH
17292: LD_VAR 0 4
17296: PPUSH
17297: LD_INT 0
17299: PPUSH
17300: CALL_OW 322
17304: GO 17284
17306: POP
17307: POP
// for j in Unavailable_Builds do
17308: LD_ADDR_VAR 0 5
17312: PUSH
17313: LD_VAR 0 3
17317: PUSH
17318: FOR_IN
17319: IFFALSE 17340
// SetRestrict ( j , i , 0 ) ;
17321: LD_VAR 0 5
17325: PPUSH
17326: LD_VAR 0 4
17330: PPUSH
17331: LD_INT 0
17333: PPUSH
17334: CALL_OW 324
17338: GO 17318
17340: POP
17341: POP
// end ;
17342: GO 17259
17344: POP
17345: POP
// end ;
17346: LD_VAR 0 1
17350: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
17351: LD_INT 0
17353: PPUSH
17354: PPUSH
17355: PPUSH
17356: PPUSH
17357: PPUSH
17358: PPUSH
17359: PPUSH
// for i := 1 to Restricted_Builds do
17360: LD_ADDR_VAR 0 2
17364: PUSH
17365: DOUBLE
17366: LD_INT 1
17368: DEC
17369: ST_TO_ADDR
17370: LD_LOC 60
17374: PUSH
17375: FOR_TO
17376: IFFALSE 17686
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
17378: LD_LOC 60
17382: PUSH
17383: LD_VAR 0 2
17387: ARRAY
17388: PUSH
17389: LD_INT 1
17391: ARRAY
17392: PUSH
17393: LD_INT 31
17395: DOUBLE
17396: EQUAL
17397: IFTRUE 17413
17399: LD_INT 32
17401: DOUBLE
17402: EQUAL
17403: IFTRUE 17413
17405: LD_INT 33
17407: DOUBLE
17408: EQUAL
17409: IFTRUE 17413
17411: GO 17424
17413: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
17414: LD_ADDR_VAR 0 6
17418: PUSH
17419: LD_STRING #Turrets
17421: ST_TO_ADDR
17422: GO 17469
17424: LD_INT 4
17426: DOUBLE
17427: EQUAL
17428: IFTRUE 17438
17430: LD_INT 5
17432: DOUBLE
17433: EQUAL
17434: IFTRUE 17438
17436: GO 17449
17438: POP
// btype := #Armouries ; b_Behemoth :
17439: LD_ADDR_VAR 0 6
17443: PUSH
17444: LD_STRING #Armouries
17446: ST_TO_ADDR
17447: GO 17469
17449: LD_INT 37
17451: DOUBLE
17452: EQUAL
17453: IFTRUE 17457
17455: GO 17468
17457: POP
// btype := #Behemoths ; end ;
17458: LD_ADDR_VAR 0 6
17462: PUSH
17463: LD_STRING #Behemoths
17465: ST_TO_ADDR
17466: GO 17469
17468: POP
// list := [ ] ;
17469: LD_ADDR_VAR 0 7
17473: PUSH
17474: EMPTY
17475: ST_TO_ADDR
// for j := 1 to 8 do
17476: LD_ADDR_VAR 0 3
17480: PUSH
17481: DOUBLE
17482: LD_INT 1
17484: DEC
17485: ST_TO_ADDR
17486: LD_INT 8
17488: PUSH
17489: FOR_TO
17490: IFFALSE 17583
// if Side_Positions [ j ] then
17492: LD_EXP 18
17496: PUSH
17497: LD_VAR 0 3
17501: ARRAY
17502: IFFALSE 17581
// begin amount := 0 ;
17504: LD_ADDR_VAR 0 5
17508: PUSH
17509: LD_INT 0
17511: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
17512: LD_ADDR_VAR 0 4
17516: PUSH
17517: LD_LOC 60
17521: PUSH
17522: LD_VAR 0 2
17526: ARRAY
17527: PUSH
17528: FOR_IN
17529: IFFALSE 17577
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
17531: LD_ADDR_VAR 0 5
17535: PUSH
17536: LD_VAR 0 5
17540: PUSH
17541: LD_INT 22
17543: PUSH
17544: LD_VAR 0 3
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: PUSH
17553: LD_INT 30
17555: PUSH
17556: LD_VAR 0 4
17560: PUSH
17561: EMPTY
17562: LIST
17563: LIST
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: PPUSH
17569: CALL_OW 69
17573: PLUS
17574: ST_TO_ADDR
17575: GO 17528
17577: POP
17578: POP
// break ;
17579: GO 17583
// end ;
17581: GO 17489
17583: POP
17584: POP
// list := [ ] ;
17585: LD_ADDR_VAR 0 7
17589: PUSH
17590: EMPTY
17591: ST_TO_ADDR
// for j := 1 to 8 do
17592: LD_ADDR_VAR 0 3
17596: PUSH
17597: DOUBLE
17598: LD_INT 1
17600: DEC
17601: ST_TO_ADDR
17602: LD_INT 8
17604: PUSH
17605: FOR_TO
17606: IFFALSE 17626
// list := list ^ amount ;
17608: LD_ADDR_VAR 0 7
17612: PUSH
17613: LD_VAR 0 7
17617: PUSH
17618: LD_VAR 0 5
17622: ADD
17623: ST_TO_ADDR
17624: GO 17605
17626: POP
17627: POP
// Already_Built := Already_Built ^ [ list ] ;
17628: LD_ADDR_LOC 66
17632: PUSH
17633: LD_LOC 66
17637: PUSH
17638: LD_VAR 0 7
17642: PUSH
17643: EMPTY
17644: LIST
17645: ADD
17646: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
17647: LD_ADDR_LOC 67
17651: PUSH
17652: LD_LOC 67
17656: PUSH
17657: LD_VAR 0 6
17661: PUSH
17662: LD_VAR 0 5
17666: PUSH
17667: LD_LOC 61
17671: PUSH
17672: LD_VAR 0 2
17676: ARRAY
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: LIST
17682: ADD
17683: ST_TO_ADDR
// end ;
17684: GO 17375
17686: POP
17687: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
17688: LD_ADDR_LOC 68
17692: PUSH
17693: LD_INT 0
17695: PUSH
17696: LD_INT 0
17698: PUSH
17699: LD_INT 0
17701: PUSH
17702: LD_INT 0
17704: PUSH
17705: LD_INT 0
17707: PUSH
17708: LD_INT 0
17710: PUSH
17711: LD_INT 0
17713: PUSH
17714: LD_INT 0
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: ST_TO_ADDR
// if Limits_Info then
17727: LD_LOC 67
17731: IFFALSE 17747
// Limits_Info := #Limits ^ Limits_Info ;
17733: LD_ADDR_LOC 67
17737: PUSH
17738: LD_STRING #Limits
17740: PUSH
17741: LD_LOC 67
17745: ADD
17746: ST_TO_ADDR
// end ;
17747: LD_VAR 0 1
17751: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
17752: LD_INT 0
17754: PPUSH
17755: PPUSH
17756: PPUSH
17757: PPUSH
// for i := 1 to Restricted_Builds do
17758: LD_ADDR_VAR 0 7
17762: PUSH
17763: DOUBLE
17764: LD_INT 1
17766: DEC
17767: ST_TO_ADDR
17768: LD_LOC 60
17772: PUSH
17773: FOR_TO
17774: IFFALSE 18197
// if BType in Restricted_Builds [ i ] then
17776: LD_VAR 0 2
17780: PUSH
17781: LD_LOC 60
17785: PUSH
17786: LD_VAR 0 7
17790: ARRAY
17791: IN
17792: IFFALSE 18195
// begin if old_side then
17794: LD_VAR 0 4
17798: IFFALSE 17924
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
17800: LD_LOC 66
17804: PUSH
17805: LD_VAR 0 7
17809: ARRAY
17810: PUSH
17811: LD_VAR 0 3
17815: ARRAY
17816: PUSH
17817: LD_VAR 0 5
17821: PLUS
17822: PUSH
17823: LD_LOC 61
17827: PUSH
17828: LD_VAR 0 7
17832: ARRAY
17833: GREATER
17834: IFFALSE 17860
// begin SetSide ( un , old_side ) ;
17836: LD_VAR 0 1
17840: PPUSH
17841: LD_VAR 0 4
17845: PPUSH
17846: CALL_OW 235
// count := 0 ;
17850: LD_ADDR_VAR 0 5
17854: PUSH
17855: LD_INT 0
17857: ST_TO_ADDR
// end else
17858: GO 17924
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
17860: LD_ADDR_LOC 66
17864: PUSH
17865: LD_LOC 66
17869: PPUSH
17870: LD_VAR 0 7
17874: PPUSH
17875: LD_LOC 66
17879: PUSH
17880: LD_VAR 0 7
17884: ARRAY
17885: PPUSH
17886: LD_VAR 0 4
17890: PPUSH
17891: LD_LOC 66
17895: PUSH
17896: LD_VAR 0 7
17900: ARRAY
17901: PUSH
17902: LD_VAR 0 4
17906: ARRAY
17907: PUSH
17908: LD_VAR 0 5
17912: MINUS
17913: PPUSH
17914: CALL_OW 1
17918: PPUSH
17919: CALL_OW 1
17923: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
17924: LD_ADDR_LOC 66
17928: PUSH
17929: LD_LOC 66
17933: PPUSH
17934: LD_VAR 0 7
17938: PPUSH
17939: LD_LOC 66
17943: PUSH
17944: LD_VAR 0 7
17948: ARRAY
17949: PPUSH
17950: LD_VAR 0 3
17954: PPUSH
17955: LD_LOC 66
17959: PUSH
17960: LD_VAR 0 7
17964: ARRAY
17965: PUSH
17966: LD_VAR 0 3
17970: ARRAY
17971: PUSH
17972: LD_VAR 0 5
17976: PLUS
17977: PPUSH
17978: CALL_OW 1
17982: PPUSH
17983: CALL_OW 1
17987: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
17988: LD_VAR 0 5
17992: PUSH
17993: LD_INT 0
17995: NONEQUAL
17996: PUSH
17997: LD_VAR 0 3
18001: PUSH
18002: LD_OWVAR 2
18006: EQUAL
18007: AND
18008: IFFALSE 18051
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
18010: LD_ADDR_LOC 67
18014: PUSH
18015: LD_LOC 67
18019: PPUSH
18020: LD_INT 3
18022: PUSH
18023: LD_VAR 0 7
18027: MUL
18028: PPUSH
18029: LD_LOC 66
18033: PUSH
18034: LD_VAR 0 7
18038: ARRAY
18039: PUSH
18040: LD_VAR 0 3
18044: ARRAY
18045: PPUSH
18046: CALL_OW 1
18050: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
18051: LD_LOC 66
18055: PUSH
18056: LD_VAR 0 7
18060: ARRAY
18061: PUSH
18062: LD_VAR 0 3
18066: ARRAY
18067: PUSH
18068: LD_LOC 61
18072: PUSH
18073: LD_VAR 0 7
18077: ARRAY
18078: GREATER
18079: IFFALSE 18106
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
18081: LD_ADDR_LOC 68
18085: PUSH
18086: LD_LOC 68
18090: PPUSH
18091: LD_VAR 0 3
18095: PPUSH
18096: LD_INT 1
18098: PPUSH
18099: CALL_OW 1
18103: ST_TO_ADDR
// end else
18104: GO 18193
// begin for j := 1 to Restricted_Builds do
18106: LD_ADDR_VAR 0 8
18110: PUSH
18111: DOUBLE
18112: LD_INT 1
18114: DEC
18115: ST_TO_ADDR
18116: LD_LOC 60
18120: PUSH
18121: FOR_TO
18122: IFFALSE 18166
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
18124: LD_LOC 66
18128: PUSH
18129: LD_VAR 0 8
18133: ARRAY
18134: PUSH
18135: LD_VAR 0 3
18139: ARRAY
18140: PUSH
18141: LD_LOC 61
18145: PUSH
18146: LD_VAR 0 8
18150: ARRAY
18151: GREATER
18152: IFFALSE 18164
// begin Is_Cheater := true ;
18154: LD_ADDR_VAR 0 9
18158: PUSH
18159: LD_INT 1
18161: ST_TO_ADDR
// break ;
18162: GO 18166
// end ;
18164: GO 18121
18166: POP
18167: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
18168: LD_ADDR_LOC 68
18172: PUSH
18173: LD_LOC 68
18177: PPUSH
18178: LD_VAR 0 3
18182: PPUSH
18183: LD_VAR 0 9
18187: PPUSH
18188: CALL_OW 1
18192: ST_TO_ADDR
// end ; break ;
18193: GO 18197
// end ;
18195: GO 17773
18197: POP
18198: POP
// end ;
18199: LD_VAR 0 6
18203: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
18204: LD_VAR 0 5
18208: PUSH
18209: LD_LOC 62
18213: IN
18214: PUSH
18215: LD_VAR 0 2
18219: PUSH
18220: LD_LOC 63
18224: IN
18225: OR
18226: PUSH
18227: LD_VAR 0 4
18231: PUSH
18232: LD_LOC 64
18236: IN
18237: OR
18238: PUSH
18239: LD_VAR 0 3
18243: PUSH
18244: LD_LOC 65
18248: IN
18249: OR
18250: IFFALSE 18261
// ComCancel ( factory ) ;
18252: LD_VAR 0 1
18256: PPUSH
18257: CALL_OW 127
// end ;
18261: PPOPN 5
18263: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
18264: LD_VAR 0 2
18268: PUSH
18269: LD_LOC 62
18273: IN
18274: IFFALSE 18285
// ComCancel ( building ) ;
18276: LD_VAR 0 1
18280: PPUSH
18281: CALL_OW 127
// end ; end_of_file
18285: PPOPN 2
18287: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
18288: LD_INT 0
18290: PPUSH
18291: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
18292: LD_ADDR_VAR 0 2
18296: PUSH
18297: LD_STRING #Multi1x1-Time
18299: PUSH
18300: LD_OWVAR 1
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
18309: LD_INT 0
18311: PUSH
18312: LD_EXP 15
18316: PUSH
18317: LD_OWVAR 1
18321: MINUS
18322: LESSEQUAL
18323: IFFALSE 18354
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
18325: LD_ADDR_VAR 0 2
18329: PUSH
18330: LD_VAR 0 2
18334: PUSH
18335: LD_STRING #allowedsibbomb
18337: PUSH
18338: LD_EXP 15
18342: PUSH
18343: LD_OWVAR 1
18347: MINUS
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: ADD
18353: ST_TO_ADDR
// if ( ExtraStrings ) then
18354: LD_EXP 66
18358: IFFALSE 18380
// AllStrings := AllStrings ^  ^ ExtraStrings ;
18360: LD_ADDR_VAR 0 2
18364: PUSH
18365: LD_VAR 0 2
18369: PUSH
18370: LD_STRING 
18372: ADD
18373: PUSH
18374: LD_EXP 66
18378: ADD
18379: ST_TO_ADDR
// if ( LimitsStrings ) then
18380: CALL 15128 0 0
18384: IFFALSE 18406
// AllStrings := AllStrings ^  ^ LimitsStrings ;
18386: LD_ADDR_VAR 0 2
18390: PUSH
18391: LD_VAR 0 2
18395: PUSH
18396: LD_STRING 
18398: ADD
18399: PUSH
18400: CALL 15128 0 0
18404: ADD
18405: ST_TO_ADDR
// Display_Strings := AllStrings ;
18406: LD_ADDR_OWVAR 47
18410: PUSH
18411: LD_VAR 0 2
18415: ST_TO_ADDR
// end ;
18416: LD_VAR 0 1
18420: RET
// every 0 0$1 do
18421: GO 18423
18423: DISABLE
// begin ShowTimer ;
18424: CALL 18288 0 0
// enable ;
18428: ENABLE
// end ; end_of_file
18429: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
18430: LD_INT 0
18432: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
18433: LD_VAR 0 1
18437: PPUSH
18438: CALL_OW 255
18442: PUSH
18443: LD_VAR 0 4
18447: EQUAL
18448: IFFALSE 18467
// begin SetAchievement ( ACH_RAD ) ;
18450: LD_STRING ACH_RAD
18452: PPUSH
18453: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
18457: LD_STRING ACH_NL
18459: PPUSH
18460: LD_INT 1
18462: PPUSH
18463: CALL_OW 564
// end end ;
18467: LD_VAR 0 5
18471: RET
// export function SA_Win ( side ) ; begin
18472: LD_INT 0
18474: PPUSH
// case side of 1 :
18475: LD_VAR 0 1
18479: PUSH
18480: LD_INT 1
18482: DOUBLE
18483: EQUAL
18484: IFTRUE 18488
18486: GO 18501
18488: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
18489: LD_STRING ACH_AH
18491: PPUSH
18492: LD_INT 1
18494: PPUSH
18495: CALL_OW 564
18499: GO 18664
18501: LD_INT 2
18503: DOUBLE
18504: EQUAL
18505: IFTRUE 18509
18507: GO 18522
18509: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
18510: LD_STRING ACH_E
18512: PPUSH
18513: LD_INT 1
18515: PPUSH
18516: CALL_OW 564
18520: GO 18664
18522: LD_INT 3
18524: DOUBLE
18525: EQUAL
18526: IFTRUE 18530
18528: GO 18543
18530: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
18531: LD_STRING ACH_OOL
18533: PPUSH
18534: LD_INT 1
18536: PPUSH
18537: CALL_OW 564
18541: GO 18664
18543: LD_INT 1
18545: PUSH
18546: LD_INT 2
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: DOUBLE
18553: EQUAL
18554: IFTRUE 18558
18556: GO 18583
18558: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
18559: LD_STRING ACH_AH
18561: PPUSH
18562: LD_REAL  5.00000000000000E-0001
18565: PPUSH
18566: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
18570: LD_STRING ACH_E
18572: PPUSH
18573: LD_REAL  5.00000000000000E-0001
18576: PPUSH
18577: CALL_OW 564
// end ; [ 2 , 3 ] :
18581: GO 18664
18583: LD_INT 2
18585: PUSH
18586: LD_INT 3
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: DOUBLE
18593: EQUAL
18594: IFTRUE 18598
18596: GO 18623
18598: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
18599: LD_STRING ACH_OOL
18601: PPUSH
18602: LD_REAL  5.00000000000000E-0001
18605: PPUSH
18606: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
18610: LD_STRING ACH_E
18612: PPUSH
18613: LD_REAL  5.00000000000000E-0001
18616: PPUSH
18617: CALL_OW 564
// end ; [ 3 , 1 ] :
18621: GO 18664
18623: LD_INT 3
18625: PUSH
18626: LD_INT 1
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: DOUBLE
18633: EQUAL
18634: IFTRUE 18638
18636: GO 18663
18638: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
18639: LD_STRING ACH_AH
18641: PPUSH
18642: LD_REAL  5.00000000000000E-0001
18645: PPUSH
18646: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
18650: LD_STRING ACH_OOL
18652: PPUSH
18653: LD_REAL  5.00000000000000E-0001
18656: PPUSH
18657: CALL_OW 564
// end ; end ;
18661: GO 18664
18663: POP
// end ; end_of_file
18664: LD_VAR 0 2
18668: RET
// export function SetMpTechs ( ) ; var side , i ; begin
18669: LD_INT 0
18671: PPUSH
18672: PPUSH
18673: PPUSH
// for side = 1 to 8 do
18674: LD_ADDR_VAR 0 2
18678: PUSH
18679: DOUBLE
18680: LD_INT 1
18682: DEC
18683: ST_TO_ADDR
18684: LD_INT 8
18686: PUSH
18687: FOR_TO
18688: IFFALSE 18809
// begin for i = 1 to 72 do
18690: LD_ADDR_VAR 0 3
18694: PUSH
18695: DOUBLE
18696: LD_INT 1
18698: DEC
18699: ST_TO_ADDR
18700: LD_INT 72
18702: PUSH
18703: FOR_TO
18704: IFFALSE 18735
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
18706: LD_VAR 0 3
18710: PPUSH
18711: LD_VAR 0 2
18715: PPUSH
18716: LD_INT 0
18718: PPUSH
18719: LD_VAR 0 3
18723: PPUSH
18724: CALL_OW 565
18728: PPUSH
18729: CALL_OW 322
18733: GO 18703
18735: POP
18736: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
18737: LD_INT 73
18739: PPUSH
18740: LD_VAR 0 2
18744: PPUSH
18745: LD_INT 0
18747: PPUSH
18748: LD_INT 25
18750: PPUSH
18751: CALL_OW 565
18755: PPUSH
18756: CALL_OW 322
// for i = 0 to 40 do
18760: LD_ADDR_VAR 0 3
18764: PUSH
18765: DOUBLE
18766: LD_INT 0
18768: DEC
18769: ST_TO_ADDR
18770: LD_INT 40
18772: PUSH
18773: FOR_TO
18774: IFFALSE 18805
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
18776: LD_VAR 0 3
18780: PPUSH
18781: LD_VAR 0 2
18785: PPUSH
18786: LD_INT 1
18788: PPUSH
18789: LD_VAR 0 3
18793: PPUSH
18794: CALL_OW 565
18798: PPUSH
18799: CALL_OW 324
18803: GO 18773
18805: POP
18806: POP
// end ;
18807: GO 18687
18809: POP
18810: POP
// end ;
18811: LD_VAR 0 1
18815: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
18816: LD_INT 0
18818: PPUSH
18819: PPUSH
18820: PPUSH
// for side = 1 to 8 do
18821: LD_ADDR_VAR 0 3
18825: PUSH
18826: DOUBLE
18827: LD_INT 1
18829: DEC
18830: ST_TO_ADDR
18831: LD_INT 8
18833: PUSH
18834: FOR_TO
18835: IFFALSE 22831
// begin for i = 1 to 73 do
18837: LD_ADDR_VAR 0 4
18841: PUSH
18842: DOUBLE
18843: LD_INT 1
18845: DEC
18846: ST_TO_ADDR
18847: LD_INT 73
18849: PUSH
18850: FOR_TO
18851: IFFALSE 18872
// SetTech ( i , side , state_disabled ) ;
18853: LD_VAR 0 4
18857: PPUSH
18858: LD_VAR 0 3
18862: PPUSH
18863: LD_INT 0
18865: PPUSH
18866: CALL_OW 322
18870: GO 18850
18872: POP
18873: POP
// for i = 0 to 40 do
18874: LD_ADDR_VAR 0 4
18878: PUSH
18879: DOUBLE
18880: LD_INT 0
18882: DEC
18883: ST_TO_ADDR
18884: LD_INT 40
18886: PUSH
18887: FOR_TO
18888: IFFALSE 18909
// SetRestrict ( i , side , false ) ;
18890: LD_VAR 0 4
18894: PPUSH
18895: LD_VAR 0 3
18899: PPUSH
18900: LD_INT 0
18902: PPUSH
18903: CALL_OW 324
18907: GO 18887
18909: POP
18910: POP
// case level of 1 :
18911: LD_VAR 0 1
18915: PUSH
18916: LD_INT 1
18918: DOUBLE
18919: EQUAL
18920: IFTRUE 18924
18922: GO 19077
18924: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
18925: LD_INT 35
18927: PPUSH
18928: LD_VAR 0 3
18932: PPUSH
18933: LD_INT 1
18935: PPUSH
18936: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
18940: LD_INT 45
18942: PPUSH
18943: LD_VAR 0 3
18947: PPUSH
18948: LD_INT 1
18950: PPUSH
18951: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
18955: LD_INT 46
18957: PPUSH
18958: LD_VAR 0 3
18962: PPUSH
18963: LD_INT 1
18965: PPUSH
18966: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
18970: LD_INT 47
18972: PPUSH
18973: LD_VAR 0 3
18977: PPUSH
18978: LD_INT 1
18980: PPUSH
18981: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
18985: LD_INT 0
18987: PPUSH
18988: LD_VAR 0 3
18992: PPUSH
18993: LD_INT 1
18995: PPUSH
18996: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
19000: LD_INT 2
19002: PPUSH
19003: LD_VAR 0 3
19007: PPUSH
19008: LD_INT 1
19010: PPUSH
19011: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
19015: LD_INT 4
19017: PPUSH
19018: LD_VAR 0 3
19022: PPUSH
19023: LD_INT 1
19025: PPUSH
19026: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
19030: LD_INT 6
19032: PPUSH
19033: LD_VAR 0 3
19037: PPUSH
19038: LD_INT 1
19040: PPUSH
19041: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
19045: LD_INT 29
19047: PPUSH
19048: LD_VAR 0 3
19052: PPUSH
19053: LD_INT 1
19055: PPUSH
19056: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
19060: LD_INT 31
19062: PPUSH
19063: LD_VAR 0 3
19067: PPUSH
19068: LD_INT 1
19070: PPUSH
19071: CALL_OW 324
// end ; 2 :
19075: GO 22829
19077: LD_INT 2
19079: DOUBLE
19080: EQUAL
19081: IFTRUE 19085
19083: GO 19283
19085: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19086: LD_INT 35
19088: PPUSH
19089: LD_VAR 0 3
19093: PPUSH
19094: LD_INT 1
19096: PPUSH
19097: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19101: LD_INT 45
19103: PPUSH
19104: LD_VAR 0 3
19108: PPUSH
19109: LD_INT 1
19111: PPUSH
19112: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19116: LD_INT 46
19118: PPUSH
19119: LD_VAR 0 3
19123: PPUSH
19124: LD_INT 1
19126: PPUSH
19127: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19131: LD_INT 47
19133: PPUSH
19134: LD_VAR 0 3
19138: PPUSH
19139: LD_INT 1
19141: PPUSH
19142: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
19146: LD_INT 1
19148: PPUSH
19149: LD_VAR 0 3
19153: PPUSH
19154: LD_INT 1
19156: PPUSH
19157: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
19161: LD_INT 2
19163: PPUSH
19164: LD_VAR 0 3
19168: PPUSH
19169: LD_INT 1
19171: PPUSH
19172: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
19176: LD_INT 11
19178: PPUSH
19179: LD_VAR 0 3
19183: PPUSH
19184: LD_INT 1
19186: PPUSH
19187: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
19191: LD_INT 0
19193: PPUSH
19194: LD_VAR 0 3
19198: PPUSH
19199: LD_INT 1
19201: PPUSH
19202: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
19206: LD_INT 2
19208: PPUSH
19209: LD_VAR 0 3
19213: PPUSH
19214: LD_INT 1
19216: PPUSH
19217: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
19221: LD_INT 4
19223: PPUSH
19224: LD_VAR 0 3
19228: PPUSH
19229: LD_INT 1
19231: PPUSH
19232: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
19236: LD_INT 6
19238: PPUSH
19239: LD_VAR 0 3
19243: PPUSH
19244: LD_INT 1
19246: PPUSH
19247: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
19251: LD_INT 29
19253: PPUSH
19254: LD_VAR 0 3
19258: PPUSH
19259: LD_INT 1
19261: PPUSH
19262: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
19266: LD_INT 31
19268: PPUSH
19269: LD_VAR 0 3
19273: PPUSH
19274: LD_INT 1
19276: PPUSH
19277: CALL_OW 324
// end ; 3 :
19281: GO 22829
19283: LD_INT 3
19285: DOUBLE
19286: EQUAL
19287: IFTRUE 19291
19289: GO 19744
19291: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19292: LD_INT 35
19294: PPUSH
19295: LD_VAR 0 3
19299: PPUSH
19300: LD_INT 1
19302: PPUSH
19303: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19307: LD_INT 45
19309: PPUSH
19310: LD_VAR 0 3
19314: PPUSH
19315: LD_INT 1
19317: PPUSH
19318: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19322: LD_INT 46
19324: PPUSH
19325: LD_VAR 0 3
19329: PPUSH
19330: LD_INT 1
19332: PPUSH
19333: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19337: LD_INT 47
19339: PPUSH
19340: LD_VAR 0 3
19344: PPUSH
19345: LD_INT 1
19347: PPUSH
19348: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
19352: LD_INT 1
19354: PPUSH
19355: LD_VAR 0 3
19359: PPUSH
19360: LD_INT 1
19362: PPUSH
19363: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
19367: LD_INT 2
19369: PPUSH
19370: LD_VAR 0 3
19374: PPUSH
19375: LD_INT 1
19377: PPUSH
19378: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
19382: LD_INT 11
19384: PPUSH
19385: LD_VAR 0 3
19389: PPUSH
19390: LD_INT 1
19392: PPUSH
19393: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
19397: LD_INT 48
19399: PPUSH
19400: LD_VAR 0 3
19404: PPUSH
19405: LD_INT 1
19407: PPUSH
19408: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
19412: LD_INT 69
19414: PPUSH
19415: LD_VAR 0 3
19419: PPUSH
19420: LD_INT 1
19422: PPUSH
19423: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
19427: LD_INT 39
19429: PPUSH
19430: LD_VAR 0 3
19434: PPUSH
19435: LD_INT 1
19437: PPUSH
19438: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
19442: LD_INT 43
19444: PPUSH
19445: LD_VAR 0 3
19449: PPUSH
19450: LD_INT 1
19452: PPUSH
19453: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
19457: LD_INT 51
19459: PPUSH
19460: LD_VAR 0 3
19464: PPUSH
19465: LD_INT 1
19467: PPUSH
19468: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
19472: LD_INT 6
19474: PPUSH
19475: LD_VAR 0 3
19479: PPUSH
19480: LD_INT 1
19482: PPUSH
19483: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
19487: LD_INT 0
19489: PPUSH
19490: LD_VAR 0 3
19494: PPUSH
19495: LD_INT 1
19497: PPUSH
19498: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
19502: LD_INT 2
19504: PPUSH
19505: LD_VAR 0 3
19509: PPUSH
19510: LD_INT 1
19512: PPUSH
19513: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
19517: LD_INT 3
19519: PPUSH
19520: LD_VAR 0 3
19524: PPUSH
19525: LD_INT 1
19527: PPUSH
19528: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
19532: LD_INT 4
19534: PPUSH
19535: LD_VAR 0 3
19539: PPUSH
19540: LD_INT 1
19542: PPUSH
19543: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
19547: LD_INT 6
19549: PPUSH
19550: LD_VAR 0 3
19554: PPUSH
19555: LD_INT 1
19557: PPUSH
19558: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
19562: LD_INT 7
19564: PPUSH
19565: LD_VAR 0 3
19569: PPUSH
19570: LD_INT 1
19572: PPUSH
19573: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
19577: LD_INT 8
19579: PPUSH
19580: LD_VAR 0 3
19584: PPUSH
19585: LD_INT 1
19587: PPUSH
19588: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
19592: LD_INT 10
19594: PPUSH
19595: LD_VAR 0 3
19599: PPUSH
19600: LD_INT 1
19602: PPUSH
19603: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
19607: LD_INT 15
19609: PPUSH
19610: LD_VAR 0 3
19614: PPUSH
19615: LD_INT 1
19617: PPUSH
19618: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
19622: LD_INT 16
19624: PPUSH
19625: LD_VAR 0 3
19629: PPUSH
19630: LD_INT 1
19632: PPUSH
19633: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
19637: LD_INT 17
19639: PPUSH
19640: LD_VAR 0 3
19644: PPUSH
19645: LD_INT 1
19647: PPUSH
19648: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
19652: LD_INT 20
19654: PPUSH
19655: LD_VAR 0 3
19659: PPUSH
19660: LD_INT 1
19662: PPUSH
19663: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
19667: LD_INT 26
19669: PPUSH
19670: LD_VAR 0 3
19674: PPUSH
19675: LD_INT 1
19677: PPUSH
19678: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
19682: LD_INT 27
19684: PPUSH
19685: LD_VAR 0 3
19689: PPUSH
19690: LD_INT 1
19692: PPUSH
19693: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
19697: LD_INT 29
19699: PPUSH
19700: LD_VAR 0 3
19704: PPUSH
19705: LD_INT 1
19707: PPUSH
19708: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
19712: LD_INT 31
19714: PPUSH
19715: LD_VAR 0 3
19719: PPUSH
19720: LD_INT 1
19722: PPUSH
19723: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
19727: LD_INT 32
19729: PPUSH
19730: LD_VAR 0 3
19734: PPUSH
19735: LD_INT 1
19737: PPUSH
19738: CALL_OW 324
// end ; 4 :
19742: GO 22829
19744: LD_INT 4
19746: DOUBLE
19747: EQUAL
19748: IFTRUE 19752
19750: GO 20700
19752: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19753: LD_INT 35
19755: PPUSH
19756: LD_VAR 0 3
19760: PPUSH
19761: LD_INT 1
19763: PPUSH
19764: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19768: LD_INT 45
19770: PPUSH
19771: LD_VAR 0 3
19775: PPUSH
19776: LD_INT 1
19778: PPUSH
19779: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19783: LD_INT 46
19785: PPUSH
19786: LD_VAR 0 3
19790: PPUSH
19791: LD_INT 1
19793: PPUSH
19794: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19798: LD_INT 47
19800: PPUSH
19801: LD_VAR 0 3
19805: PPUSH
19806: LD_INT 1
19808: PPUSH
19809: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
19813: LD_INT 1
19815: PPUSH
19816: LD_VAR 0 3
19820: PPUSH
19821: LD_INT 1
19823: PPUSH
19824: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
19828: LD_INT 2
19830: PPUSH
19831: LD_VAR 0 3
19835: PPUSH
19836: LD_INT 1
19838: PPUSH
19839: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
19843: LD_INT 11
19845: PPUSH
19846: LD_VAR 0 3
19850: PPUSH
19851: LD_INT 1
19853: PPUSH
19854: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
19858: LD_INT 20
19860: PPUSH
19861: LD_VAR 0 3
19865: PPUSH
19866: LD_INT 1
19868: PPUSH
19869: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
19873: LD_INT 48
19875: PPUSH
19876: LD_VAR 0 3
19880: PPUSH
19881: LD_INT 1
19883: PPUSH
19884: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
19888: LD_INT 49
19890: PPUSH
19891: LD_VAR 0 3
19895: PPUSH
19896: LD_INT 1
19898: PPUSH
19899: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
19903: LD_INT 69
19905: PPUSH
19906: LD_VAR 0 3
19910: PPUSH
19911: LD_INT 1
19913: PPUSH
19914: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
19918: LD_INT 39
19920: PPUSH
19921: LD_VAR 0 3
19925: PPUSH
19926: LD_INT 1
19928: PPUSH
19929: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
19933: LD_INT 34
19935: PPUSH
19936: LD_VAR 0 3
19940: PPUSH
19941: LD_INT 1
19943: PPUSH
19944: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
19948: LD_INT 42
19950: PPUSH
19951: LD_VAR 0 3
19955: PPUSH
19956: LD_INT 1
19958: PPUSH
19959: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
19963: LD_INT 44
19965: PPUSH
19966: LD_VAR 0 3
19970: PPUSH
19971: LD_INT 1
19973: PPUSH
19974: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
19978: LD_INT 41
19980: PPUSH
19981: LD_VAR 0 3
19985: PPUSH
19986: LD_INT 1
19988: PPUSH
19989: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
19993: LD_INT 43
19995: PPUSH
19996: LD_VAR 0 3
20000: PPUSH
20001: LD_INT 1
20003: PPUSH
20004: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
20008: LD_INT 70
20010: PPUSH
20011: LD_VAR 0 3
20015: PPUSH
20016: LD_INT 1
20018: PPUSH
20019: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
20023: LD_INT 51
20025: PPUSH
20026: LD_VAR 0 3
20030: PPUSH
20031: LD_INT 1
20033: PPUSH
20034: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
20038: LD_INT 52
20040: PPUSH
20041: LD_VAR 0 3
20045: PPUSH
20046: LD_INT 1
20048: PPUSH
20049: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
20053: LD_INT 6
20055: PPUSH
20056: LD_VAR 0 3
20060: PPUSH
20061: LD_INT 1
20063: PPUSH
20064: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
20068: LD_INT 15
20070: PPUSH
20071: LD_VAR 0 3
20075: PPUSH
20076: LD_INT 1
20078: PPUSH
20079: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
20083: LD_INT 7
20085: PPUSH
20086: LD_VAR 0 3
20090: PPUSH
20091: LD_INT 1
20093: PPUSH
20094: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
20098: LD_INT 12
20100: PPUSH
20101: LD_VAR 0 3
20105: PPUSH
20106: LD_INT 1
20108: PPUSH
20109: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
20113: LD_INT 18
20115: PPUSH
20116: LD_VAR 0 3
20120: PPUSH
20121: LD_INT 1
20123: PPUSH
20124: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
20128: LD_INT 60
20130: PPUSH
20131: LD_VAR 0 3
20135: PPUSH
20136: LD_INT 1
20138: PPUSH
20139: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
20143: LD_INT 9
20145: PPUSH
20146: LD_VAR 0 3
20150: PPUSH
20151: LD_INT 1
20153: PPUSH
20154: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
20158: LD_INT 30
20160: PPUSH
20161: LD_VAR 0 3
20165: PPUSH
20166: LD_INT 1
20168: PPUSH
20169: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
20173: LD_INT 37
20175: PPUSH
20176: LD_VAR 0 3
20180: PPUSH
20181: LD_INT 1
20183: PPUSH
20184: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
20188: LD_INT 5
20190: PPUSH
20191: LD_VAR 0 3
20195: PPUSH
20196: LD_INT 1
20198: PPUSH
20199: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
20203: LD_INT 66
20205: PPUSH
20206: LD_VAR 0 3
20210: PPUSH
20211: LD_INT 1
20213: PPUSH
20214: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
20218: LD_INT 21
20220: PPUSH
20221: LD_VAR 0 3
20225: PPUSH
20226: LD_INT 1
20228: PPUSH
20229: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
20233: LD_INT 22
20235: PPUSH
20236: LD_VAR 0 3
20240: PPUSH
20241: LD_INT 1
20243: PPUSH
20244: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
20248: LD_INT 54
20250: PPUSH
20251: LD_VAR 0 3
20255: PPUSH
20256: LD_INT 1
20258: PPUSH
20259: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
20263: LD_INT 0
20265: PPUSH
20266: LD_VAR 0 3
20270: PPUSH
20271: LD_INT 1
20273: PPUSH
20274: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
20278: LD_INT 1
20280: PPUSH
20281: LD_VAR 0 3
20285: PPUSH
20286: LD_INT 1
20288: PPUSH
20289: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
20293: LD_INT 2
20295: PPUSH
20296: LD_VAR 0 3
20300: PPUSH
20301: LD_INT 1
20303: PPUSH
20304: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
20308: LD_INT 3
20310: PPUSH
20311: LD_VAR 0 3
20315: PPUSH
20316: LD_INT 1
20318: PPUSH
20319: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
20323: LD_INT 4
20325: PPUSH
20326: LD_VAR 0 3
20330: PPUSH
20331: LD_INT 1
20333: PPUSH
20334: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
20338: LD_INT 5
20340: PPUSH
20341: LD_VAR 0 3
20345: PPUSH
20346: LD_INT 1
20348: PPUSH
20349: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
20353: LD_INT 6
20355: PPUSH
20356: LD_VAR 0 3
20360: PPUSH
20361: LD_INT 1
20363: PPUSH
20364: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
20368: LD_INT 7
20370: PPUSH
20371: LD_VAR 0 3
20375: PPUSH
20376: LD_INT 1
20378: PPUSH
20379: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
20383: LD_INT 8
20385: PPUSH
20386: LD_VAR 0 3
20390: PPUSH
20391: LD_INT 1
20393: PPUSH
20394: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
20398: LD_INT 10
20400: PPUSH
20401: LD_VAR 0 3
20405: PPUSH
20406: LD_INT 1
20408: PPUSH
20409: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
20413: LD_INT 11
20415: PPUSH
20416: LD_VAR 0 3
20420: PPUSH
20421: LD_INT 1
20423: PPUSH
20424: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
20428: LD_INT 12
20430: PPUSH
20431: LD_VAR 0 3
20435: PPUSH
20436: LD_INT 1
20438: PPUSH
20439: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
20443: LD_INT 13
20445: PPUSH
20446: LD_VAR 0 3
20450: PPUSH
20451: LD_INT 1
20453: PPUSH
20454: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
20458: LD_INT 14
20460: PPUSH
20461: LD_VAR 0 3
20465: PPUSH
20466: LD_INT 1
20468: PPUSH
20469: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
20473: LD_INT 15
20475: PPUSH
20476: LD_VAR 0 3
20480: PPUSH
20481: LD_INT 1
20483: PPUSH
20484: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
20488: LD_INT 16
20490: PPUSH
20491: LD_VAR 0 3
20495: PPUSH
20496: LD_INT 1
20498: PPUSH
20499: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
20503: LD_INT 17
20505: PPUSH
20506: LD_VAR 0 3
20510: PPUSH
20511: LD_INT 1
20513: PPUSH
20514: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
20518: LD_INT 19
20520: PPUSH
20521: LD_VAR 0 3
20525: PPUSH
20526: LD_INT 1
20528: PPUSH
20529: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
20533: LD_INT 20
20535: PPUSH
20536: LD_VAR 0 3
20540: PPUSH
20541: LD_INT 1
20543: PPUSH
20544: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
20548: LD_INT 21
20550: PPUSH
20551: LD_VAR 0 3
20555: PPUSH
20556: LD_INT 1
20558: PPUSH
20559: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
20563: LD_INT 23
20565: PPUSH
20566: LD_VAR 0 3
20570: PPUSH
20571: LD_INT 1
20573: PPUSH
20574: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
20578: LD_INT 26
20580: PPUSH
20581: LD_VAR 0 3
20585: PPUSH
20586: LD_INT 1
20588: PPUSH
20589: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
20593: LD_INT 27
20595: PPUSH
20596: LD_VAR 0 3
20600: PPUSH
20601: LD_INT 1
20603: PPUSH
20604: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
20608: LD_INT 28
20610: PPUSH
20611: LD_VAR 0 3
20615: PPUSH
20616: LD_INT 1
20618: PPUSH
20619: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
20623: LD_INT 29
20625: PPUSH
20626: LD_VAR 0 3
20630: PPUSH
20631: LD_INT 1
20633: PPUSH
20634: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
20638: LD_INT 30
20640: PPUSH
20641: LD_VAR 0 3
20645: PPUSH
20646: LD_INT 1
20648: PPUSH
20649: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
20653: LD_INT 31
20655: PPUSH
20656: LD_VAR 0 3
20660: PPUSH
20661: LD_INT 1
20663: PPUSH
20664: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
20668: LD_INT 32
20670: PPUSH
20671: LD_VAR 0 3
20675: PPUSH
20676: LD_INT 1
20678: PPUSH
20679: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
20683: LD_INT 36
20685: PPUSH
20686: LD_VAR 0 3
20690: PPUSH
20691: LD_INT 1
20693: PPUSH
20694: CALL_OW 324
// end ; 5 :
20698: GO 22829
20700: LD_INT 5
20702: DOUBLE
20703: EQUAL
20704: IFTRUE 20708
20706: GO 21821
20708: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
20709: LD_INT 35
20711: PPUSH
20712: LD_VAR 0 3
20716: PPUSH
20717: LD_INT 1
20719: PPUSH
20720: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
20724: LD_INT 45
20726: PPUSH
20727: LD_VAR 0 3
20731: PPUSH
20732: LD_INT 1
20734: PPUSH
20735: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
20739: LD_INT 46
20741: PPUSH
20742: LD_VAR 0 3
20746: PPUSH
20747: LD_INT 1
20749: PPUSH
20750: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
20754: LD_INT 47
20756: PPUSH
20757: LD_VAR 0 3
20761: PPUSH
20762: LD_INT 1
20764: PPUSH
20765: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
20769: LD_INT 1
20771: PPUSH
20772: LD_VAR 0 3
20776: PPUSH
20777: LD_INT 1
20779: PPUSH
20780: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
20784: LD_INT 2
20786: PPUSH
20787: LD_VAR 0 3
20791: PPUSH
20792: LD_INT 1
20794: PPUSH
20795: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
20799: LD_INT 11
20801: PPUSH
20802: LD_VAR 0 3
20806: PPUSH
20807: LD_INT 1
20809: PPUSH
20810: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
20814: LD_INT 20
20816: PPUSH
20817: LD_VAR 0 3
20821: PPUSH
20822: LD_INT 1
20824: PPUSH
20825: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
20829: LD_INT 48
20831: PPUSH
20832: LD_VAR 0 3
20836: PPUSH
20837: LD_INT 1
20839: PPUSH
20840: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
20844: LD_INT 49
20846: PPUSH
20847: LD_VAR 0 3
20851: PPUSH
20852: LD_INT 1
20854: PPUSH
20855: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
20859: LD_INT 69
20861: PPUSH
20862: LD_VAR 0 3
20866: PPUSH
20867: LD_INT 1
20869: PPUSH
20870: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
20874: LD_INT 39
20876: PPUSH
20877: LD_VAR 0 3
20881: PPUSH
20882: LD_INT 1
20884: PPUSH
20885: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
20889: LD_INT 34
20891: PPUSH
20892: LD_VAR 0 3
20896: PPUSH
20897: LD_INT 1
20899: PPUSH
20900: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
20904: LD_INT 42
20906: PPUSH
20907: LD_VAR 0 3
20911: PPUSH
20912: LD_INT 1
20914: PPUSH
20915: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
20919: LD_INT 44
20921: PPUSH
20922: LD_VAR 0 3
20926: PPUSH
20927: LD_INT 1
20929: PPUSH
20930: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
20934: LD_INT 41
20936: PPUSH
20937: LD_VAR 0 3
20941: PPUSH
20942: LD_INT 1
20944: PPUSH
20945: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
20949: LD_INT 40
20951: PPUSH
20952: LD_VAR 0 3
20956: PPUSH
20957: LD_INT 1
20959: PPUSH
20960: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
20964: LD_INT 43
20966: PPUSH
20967: LD_VAR 0 3
20971: PPUSH
20972: LD_INT 1
20974: PPUSH
20975: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
20979: LD_INT 70
20981: PPUSH
20982: LD_VAR 0 3
20986: PPUSH
20987: LD_INT 1
20989: PPUSH
20990: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
20994: LD_INT 51
20996: PPUSH
20997: LD_VAR 0 3
21001: PPUSH
21002: LD_INT 1
21004: PPUSH
21005: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
21009: LD_INT 52
21011: PPUSH
21012: LD_VAR 0 3
21016: PPUSH
21017: LD_INT 1
21019: PPUSH
21020: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
21024: LD_INT 6
21026: PPUSH
21027: LD_VAR 0 3
21031: PPUSH
21032: LD_INT 1
21034: PPUSH
21035: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
21039: LD_INT 15
21041: PPUSH
21042: LD_VAR 0 3
21046: PPUSH
21047: LD_INT 1
21049: PPUSH
21050: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
21054: LD_INT 7
21056: PPUSH
21057: LD_VAR 0 3
21061: PPUSH
21062: LD_INT 1
21064: PPUSH
21065: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
21069: LD_INT 12
21071: PPUSH
21072: LD_VAR 0 3
21076: PPUSH
21077: LD_INT 1
21079: PPUSH
21080: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
21084: LD_INT 17
21086: PPUSH
21087: LD_VAR 0 3
21091: PPUSH
21092: LD_INT 1
21094: PPUSH
21095: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
21099: LD_INT 18
21101: PPUSH
21102: LD_VAR 0 3
21106: PPUSH
21107: LD_INT 1
21109: PPUSH
21110: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
21114: LD_INT 60
21116: PPUSH
21117: LD_VAR 0 3
21121: PPUSH
21122: LD_INT 1
21124: PPUSH
21125: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
21129: LD_INT 32
21131: PPUSH
21132: LD_VAR 0 3
21136: PPUSH
21137: LD_INT 1
21139: PPUSH
21140: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
21144: LD_INT 9
21146: PPUSH
21147: LD_VAR 0 3
21151: PPUSH
21152: LD_INT 1
21154: PPUSH
21155: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
21159: LD_INT 57
21161: PPUSH
21162: LD_VAR 0 3
21166: PPUSH
21167: LD_INT 1
21169: PPUSH
21170: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
21174: LD_INT 30
21176: PPUSH
21177: LD_VAR 0 3
21181: PPUSH
21182: LD_INT 1
21184: PPUSH
21185: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
21189: LD_INT 37
21191: PPUSH
21192: LD_VAR 0 3
21196: PPUSH
21197: LD_INT 1
21199: PPUSH
21200: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
21204: LD_INT 63
21206: PPUSH
21207: LD_VAR 0 3
21211: PPUSH
21212: LD_INT 1
21214: PPUSH
21215: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
21219: LD_INT 3
21221: PPUSH
21222: LD_VAR 0 3
21226: PPUSH
21227: LD_INT 1
21229: PPUSH
21230: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
21234: LD_INT 4
21236: PPUSH
21237: LD_VAR 0 3
21241: PPUSH
21242: LD_INT 1
21244: PPUSH
21245: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
21249: LD_INT 5
21251: PPUSH
21252: LD_VAR 0 3
21256: PPUSH
21257: LD_INT 1
21259: PPUSH
21260: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
21264: LD_INT 66
21266: PPUSH
21267: LD_VAR 0 3
21271: PPUSH
21272: LD_INT 1
21274: PPUSH
21275: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
21279: LD_INT 21
21281: PPUSH
21282: LD_VAR 0 3
21286: PPUSH
21287: LD_INT 1
21289: PPUSH
21290: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
21294: LD_INT 22
21296: PPUSH
21297: LD_VAR 0 3
21301: PPUSH
21302: LD_INT 1
21304: PPUSH
21305: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
21309: LD_INT 19
21311: PPUSH
21312: LD_VAR 0 3
21316: PPUSH
21317: LD_INT 1
21319: PPUSH
21320: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
21324: LD_INT 54
21326: PPUSH
21327: LD_VAR 0 3
21331: PPUSH
21332: LD_INT 1
21334: PPUSH
21335: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
21339: LD_INT 55
21341: PPUSH
21342: LD_VAR 0 3
21346: PPUSH
21347: LD_INT 1
21349: PPUSH
21350: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
21354: LD_INT 0
21356: PPUSH
21357: LD_VAR 0 3
21361: PPUSH
21362: LD_INT 1
21364: PPUSH
21365: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
21369: LD_INT 1
21371: PPUSH
21372: LD_VAR 0 3
21376: PPUSH
21377: LD_INT 1
21379: PPUSH
21380: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
21384: LD_INT 2
21386: PPUSH
21387: LD_VAR 0 3
21391: PPUSH
21392: LD_INT 1
21394: PPUSH
21395: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
21399: LD_INT 3
21401: PPUSH
21402: LD_VAR 0 3
21406: PPUSH
21407: LD_INT 1
21409: PPUSH
21410: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
21414: LD_INT 4
21416: PPUSH
21417: LD_VAR 0 3
21421: PPUSH
21422: LD_INT 1
21424: PPUSH
21425: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
21429: LD_INT 5
21431: PPUSH
21432: LD_VAR 0 3
21436: PPUSH
21437: LD_INT 1
21439: PPUSH
21440: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
21444: LD_INT 6
21446: PPUSH
21447: LD_VAR 0 3
21451: PPUSH
21452: LD_INT 1
21454: PPUSH
21455: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
21459: LD_INT 7
21461: PPUSH
21462: LD_VAR 0 3
21466: PPUSH
21467: LD_INT 1
21469: PPUSH
21470: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
21474: LD_INT 8
21476: PPUSH
21477: LD_VAR 0 3
21481: PPUSH
21482: LD_INT 1
21484: PPUSH
21485: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
21489: LD_INT 10
21491: PPUSH
21492: LD_VAR 0 3
21496: PPUSH
21497: LD_INT 1
21499: PPUSH
21500: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
21504: LD_INT 11
21506: PPUSH
21507: LD_VAR 0 3
21511: PPUSH
21512: LD_INT 1
21514: PPUSH
21515: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
21519: LD_INT 12
21521: PPUSH
21522: LD_VAR 0 3
21526: PPUSH
21527: LD_INT 1
21529: PPUSH
21530: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
21534: LD_INT 13
21536: PPUSH
21537: LD_VAR 0 3
21541: PPUSH
21542: LD_INT 1
21544: PPUSH
21545: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
21549: LD_INT 14
21551: PPUSH
21552: LD_VAR 0 3
21556: PPUSH
21557: LD_INT 1
21559: PPUSH
21560: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
21564: LD_INT 15
21566: PPUSH
21567: LD_VAR 0 3
21571: PPUSH
21572: LD_INT 1
21574: PPUSH
21575: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
21579: LD_INT 16
21581: PPUSH
21582: LD_VAR 0 3
21586: PPUSH
21587: LD_INT 1
21589: PPUSH
21590: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
21594: LD_INT 17
21596: PPUSH
21597: LD_VAR 0 3
21601: PPUSH
21602: LD_INT 1
21604: PPUSH
21605: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
21609: LD_INT 18
21611: PPUSH
21612: LD_VAR 0 3
21616: PPUSH
21617: LD_INT 1
21619: PPUSH
21620: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
21624: LD_INT 19
21626: PPUSH
21627: LD_VAR 0 3
21631: PPUSH
21632: LD_INT 1
21634: PPUSH
21635: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
21639: LD_INT 20
21641: PPUSH
21642: LD_VAR 0 3
21646: PPUSH
21647: LD_INT 1
21649: PPUSH
21650: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
21654: LD_INT 21
21656: PPUSH
21657: LD_VAR 0 3
21661: PPUSH
21662: LD_INT 1
21664: PPUSH
21665: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
21669: LD_INT 23
21671: PPUSH
21672: LD_VAR 0 3
21676: PPUSH
21677: LD_INT 1
21679: PPUSH
21680: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
21684: LD_INT 26
21686: PPUSH
21687: LD_VAR 0 3
21691: PPUSH
21692: LD_INT 1
21694: PPUSH
21695: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
21699: LD_INT 27
21701: PPUSH
21702: LD_VAR 0 3
21706: PPUSH
21707: LD_INT 1
21709: PPUSH
21710: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
21714: LD_INT 28
21716: PPUSH
21717: LD_VAR 0 3
21721: PPUSH
21722: LD_INT 1
21724: PPUSH
21725: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
21729: LD_INT 29
21731: PPUSH
21732: LD_VAR 0 3
21736: PPUSH
21737: LD_INT 1
21739: PPUSH
21740: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
21744: LD_INT 30
21746: PPUSH
21747: LD_VAR 0 3
21751: PPUSH
21752: LD_INT 1
21754: PPUSH
21755: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
21759: LD_INT 31
21761: PPUSH
21762: LD_VAR 0 3
21766: PPUSH
21767: LD_INT 1
21769: PPUSH
21770: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
21774: LD_INT 32
21776: PPUSH
21777: LD_VAR 0 3
21781: PPUSH
21782: LD_INT 1
21784: PPUSH
21785: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
21789: LD_INT 33
21791: PPUSH
21792: LD_VAR 0 3
21796: PPUSH
21797: LD_INT 1
21799: PPUSH
21800: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
21804: LD_INT 36
21806: PPUSH
21807: LD_VAR 0 3
21811: PPUSH
21812: LD_INT 1
21814: PPUSH
21815: CALL_OW 324
// end ; 6 :
21819: GO 22829
21821: LD_INT 6
21823: DOUBLE
21824: EQUAL
21825: IFTRUE 21829
21827: GO 22754
21829: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
21830: LD_INT 35
21832: PPUSH
21833: LD_VAR 0 3
21837: PPUSH
21838: LD_INT 1
21840: PPUSH
21841: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
21845: LD_INT 45
21847: PPUSH
21848: LD_VAR 0 3
21852: PPUSH
21853: LD_INT 1
21855: PPUSH
21856: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
21860: LD_INT 46
21862: PPUSH
21863: LD_VAR 0 3
21867: PPUSH
21868: LD_INT 1
21870: PPUSH
21871: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
21875: LD_INT 47
21877: PPUSH
21878: LD_VAR 0 3
21882: PPUSH
21883: LD_INT 1
21885: PPUSH
21886: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
21890: LD_INT 1
21892: PPUSH
21893: LD_VAR 0 3
21897: PPUSH
21898: LD_INT 1
21900: PPUSH
21901: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
21905: LD_INT 2
21907: PPUSH
21908: LD_VAR 0 3
21912: PPUSH
21913: LD_INT 1
21915: PPUSH
21916: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
21920: LD_INT 11
21922: PPUSH
21923: LD_VAR 0 3
21927: PPUSH
21928: LD_INT 1
21930: PPUSH
21931: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
21935: LD_INT 20
21937: PPUSH
21938: LD_VAR 0 3
21942: PPUSH
21943: LD_INT 1
21945: PPUSH
21946: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
21950: LD_INT 48
21952: PPUSH
21953: LD_VAR 0 3
21957: PPUSH
21958: LD_INT 1
21960: PPUSH
21961: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
21965: LD_INT 49
21967: PPUSH
21968: LD_VAR 0 3
21972: PPUSH
21973: LD_INT 1
21975: PPUSH
21976: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
21980: LD_INT 50
21982: PPUSH
21983: LD_VAR 0 3
21987: PPUSH
21988: LD_INT 1
21990: PPUSH
21991: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
21995: LD_INT 69
21997: PPUSH
21998: LD_VAR 0 3
22002: PPUSH
22003: LD_INT 1
22005: PPUSH
22006: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
22010: LD_INT 39
22012: PPUSH
22013: LD_VAR 0 3
22017: PPUSH
22018: LD_INT 1
22020: PPUSH
22021: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
22025: LD_INT 34
22027: PPUSH
22028: LD_VAR 0 3
22032: PPUSH
22033: LD_INT 1
22035: PPUSH
22036: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
22040: LD_INT 42
22042: PPUSH
22043: LD_VAR 0 3
22047: PPUSH
22048: LD_INT 1
22050: PPUSH
22051: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
22055: LD_INT 44
22057: PPUSH
22058: LD_VAR 0 3
22062: PPUSH
22063: LD_INT 1
22065: PPUSH
22066: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
22070: LD_INT 41
22072: PPUSH
22073: LD_VAR 0 3
22077: PPUSH
22078: LD_INT 1
22080: PPUSH
22081: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
22085: LD_INT 13
22087: PPUSH
22088: LD_VAR 0 3
22092: PPUSH
22093: LD_INT 1
22095: PPUSH
22096: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
22100: LD_INT 40
22102: PPUSH
22103: LD_VAR 0 3
22107: PPUSH
22108: LD_INT 1
22110: PPUSH
22111: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
22115: LD_INT 43
22117: PPUSH
22118: LD_VAR 0 3
22122: PPUSH
22123: LD_INT 1
22125: PPUSH
22126: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
22130: LD_INT 70
22132: PPUSH
22133: LD_VAR 0 3
22137: PPUSH
22138: LD_INT 1
22140: PPUSH
22141: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
22145: LD_INT 23
22147: PPUSH
22148: LD_VAR 0 3
22152: PPUSH
22153: LD_INT 1
22155: PPUSH
22156: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
22160: LD_INT 51
22162: PPUSH
22163: LD_VAR 0 3
22167: PPUSH
22168: LD_INT 1
22170: PPUSH
22171: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
22175: LD_INT 52
22177: PPUSH
22178: LD_VAR 0 3
22182: PPUSH
22183: LD_INT 1
22185: PPUSH
22186: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
22190: LD_INT 6
22192: PPUSH
22193: LD_VAR 0 3
22197: PPUSH
22198: LD_INT 1
22200: PPUSH
22201: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
22205: LD_INT 15
22207: PPUSH
22208: LD_VAR 0 3
22212: PPUSH
22213: LD_INT 1
22215: PPUSH
22216: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
22220: LD_INT 7
22222: PPUSH
22223: LD_VAR 0 3
22227: PPUSH
22228: LD_INT 1
22230: PPUSH
22231: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
22235: LD_INT 12
22237: PPUSH
22238: LD_VAR 0 3
22242: PPUSH
22243: LD_INT 1
22245: PPUSH
22246: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
22250: LD_INT 10
22252: PPUSH
22253: LD_VAR 0 3
22257: PPUSH
22258: LD_INT 1
22260: PPUSH
22261: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
22265: LD_INT 17
22267: PPUSH
22268: LD_VAR 0 3
22272: PPUSH
22273: LD_INT 1
22275: PPUSH
22276: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
22280: LD_INT 18
22282: PPUSH
22283: LD_VAR 0 3
22287: PPUSH
22288: LD_INT 1
22290: PPUSH
22291: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
22295: LD_INT 60
22297: PPUSH
22298: LD_VAR 0 3
22302: PPUSH
22303: LD_INT 1
22305: PPUSH
22306: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
22310: LD_INT 61
22312: PPUSH
22313: LD_VAR 0 3
22317: PPUSH
22318: LD_INT 1
22320: PPUSH
22321: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
22325: LD_INT 32
22327: PPUSH
22328: LD_VAR 0 3
22332: PPUSH
22333: LD_INT 1
22335: PPUSH
22336: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
22340: LD_INT 27
22342: PPUSH
22343: LD_VAR 0 3
22347: PPUSH
22348: LD_INT 1
22350: PPUSH
22351: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
22355: LD_INT 36
22357: PPUSH
22358: LD_VAR 0 3
22362: PPUSH
22363: LD_INT 1
22365: PPUSH
22366: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
22370: LD_INT 33
22372: PPUSH
22373: LD_VAR 0 3
22377: PPUSH
22378: LD_INT 1
22380: PPUSH
22381: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
22385: LD_INT 9
22387: PPUSH
22388: LD_VAR 0 3
22392: PPUSH
22393: LD_INT 1
22395: PPUSH
22396: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
22400: LD_INT 38
22402: PPUSH
22403: LD_VAR 0 3
22407: PPUSH
22408: LD_INT 1
22410: PPUSH
22411: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
22415: LD_INT 57
22417: PPUSH
22418: LD_VAR 0 3
22422: PPUSH
22423: LD_INT 1
22425: PPUSH
22426: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
22430: LD_INT 58
22432: PPUSH
22433: LD_VAR 0 3
22437: PPUSH
22438: LD_INT 1
22440: PPUSH
22441: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
22445: LD_INT 28
22447: PPUSH
22448: LD_VAR 0 3
22452: PPUSH
22453: LD_INT 1
22455: PPUSH
22456: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
22460: LD_INT 29
22462: PPUSH
22463: LD_VAR 0 3
22467: PPUSH
22468: LD_INT 1
22470: PPUSH
22471: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
22475: LD_INT 30
22477: PPUSH
22478: LD_VAR 0 3
22482: PPUSH
22483: LD_INT 1
22485: PPUSH
22486: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
22490: LD_INT 37
22492: PPUSH
22493: LD_VAR 0 3
22497: PPUSH
22498: LD_INT 1
22500: PPUSH
22501: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
22505: LD_INT 63
22507: PPUSH
22508: LD_VAR 0 3
22512: PPUSH
22513: LD_INT 1
22515: PPUSH
22516: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
22520: LD_INT 64
22522: PPUSH
22523: LD_VAR 0 3
22527: PPUSH
22528: LD_INT 1
22530: PPUSH
22531: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
22535: LD_INT 3
22537: PPUSH
22538: LD_VAR 0 3
22542: PPUSH
22543: LD_INT 1
22545: PPUSH
22546: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
22550: LD_INT 4
22552: PPUSH
22553: LD_VAR 0 3
22557: PPUSH
22558: LD_INT 1
22560: PPUSH
22561: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
22565: LD_INT 5
22567: PPUSH
22568: LD_VAR 0 3
22572: PPUSH
22573: LD_INT 1
22575: PPUSH
22576: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
22580: LD_INT 8
22582: PPUSH
22583: LD_VAR 0 3
22587: PPUSH
22588: LD_INT 1
22590: PPUSH
22591: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
22595: LD_INT 66
22597: PPUSH
22598: LD_VAR 0 3
22602: PPUSH
22603: LD_INT 1
22605: PPUSH
22606: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
22610: LD_INT 67
22612: PPUSH
22613: LD_VAR 0 3
22617: PPUSH
22618: LD_INT 1
22620: PPUSH
22621: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
22625: LD_INT 21
22627: PPUSH
22628: LD_VAR 0 3
22632: PPUSH
22633: LD_INT 1
22635: PPUSH
22636: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
22640: LD_INT 22
22642: PPUSH
22643: LD_VAR 0 3
22647: PPUSH
22648: LD_INT 1
22650: PPUSH
22651: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
22655: LD_INT 19
22657: PPUSH
22658: LD_VAR 0 3
22662: PPUSH
22663: LD_INT 1
22665: PPUSH
22666: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
22670: LD_INT 26
22672: PPUSH
22673: LD_VAR 0 3
22677: PPUSH
22678: LD_INT 1
22680: PPUSH
22681: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
22685: LD_INT 54
22687: PPUSH
22688: LD_VAR 0 3
22692: PPUSH
22693: LD_INT 1
22695: PPUSH
22696: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
22700: LD_INT 55
22702: PPUSH
22703: LD_VAR 0 3
22707: PPUSH
22708: LD_INT 1
22710: PPUSH
22711: CALL_OW 322
// for i = 0 to 39 do
22715: LD_ADDR_VAR 0 4
22719: PUSH
22720: DOUBLE
22721: LD_INT 0
22723: DEC
22724: ST_TO_ADDR
22725: LD_INT 39
22727: PUSH
22728: FOR_TO
22729: IFFALSE 22750
// SetRestrict ( i , side , true ) ;
22731: LD_VAR 0 4
22735: PPUSH
22736: LD_VAR 0 3
22740: PPUSH
22741: LD_INT 1
22743: PPUSH
22744: CALL_OW 324
22748: GO 22728
22750: POP
22751: POP
// end ; else
22752: GO 22829
22754: POP
// begin for i = 1 to 73 do
22755: LD_ADDR_VAR 0 4
22759: PUSH
22760: DOUBLE
22761: LD_INT 1
22763: DEC
22764: ST_TO_ADDR
22765: LD_INT 73
22767: PUSH
22768: FOR_TO
22769: IFFALSE 22790
// SetTech ( i , side , state_enabled ) ;
22771: LD_VAR 0 4
22775: PPUSH
22776: LD_VAR 0 3
22780: PPUSH
22781: LD_INT 1
22783: PPUSH
22784: CALL_OW 322
22788: GO 22768
22790: POP
22791: POP
// for i = 0 to 39 do
22792: LD_ADDR_VAR 0 4
22796: PUSH
22797: DOUBLE
22798: LD_INT 0
22800: DEC
22801: ST_TO_ADDR
22802: LD_INT 39
22804: PUSH
22805: FOR_TO
22806: IFFALSE 22827
// SetRestrict ( i , side , true ) ;
22808: LD_VAR 0 4
22812: PPUSH
22813: LD_VAR 0 3
22817: PPUSH
22818: LD_INT 1
22820: PPUSH
22821: CALL_OW 324
22825: GO 22805
22827: POP
22828: POP
// end ; end ; end ;
22829: GO 18834
22831: POP
22832: POP
// end ;
22833: LD_VAR 0 2
22837: RET
