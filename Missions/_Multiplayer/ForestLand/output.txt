// export Game_Type ; export def_base_level , def_amount_of_people , def_initial_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_amount_of_apemen , def_people_respawning , def_siberite_bomb ; export is_depot , number_of_breastworks , number_of_people , initial_level , amount_of_apemen , starting_crates , starting_resources , shipments_density , siberite_bomb_Delay , spawning_koef_of_apemen , respawning_time_min , respawning_time_max , def_win_rules , buildUpTime_Delay ; export Side_Count , Team_Count , Player_Side , Player_Team , Side_Teams , Teams ; export Side_Positions , Side_Nations , Side_Names , Team_Names , Team_Game , Side_Comps ; export depot_def , start_def , extra_oil_deposits_locations ; export heroes ; export commander , battle_flags_id , morale_decreasing_time ; var global_units , global_defined , soldiers_created ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function create_forest ; var area ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
// PlaceTreesToArea ( BigForest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , Rand ( 500 , 570 ) , 50 , 2 ) ;
  72: LD_INT 6
  74: PPUSH
  75: LD_INT 21
  77: PUSH
  78: LD_INT 22
  80: PUSH
  81: LD_INT 24
  83: PUSH
  84: LD_INT 21
  86: PUSH
  87: LD_INT 22
  89: PUSH
  90: LD_INT 24
  92: PUSH
  93: LD_INT 38
  95: PUSH
  96: LD_INT 39
  98: PUSH
  99: EMPTY
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: PPUSH
 109: LD_INT 500
 111: PPUSH
 112: LD_INT 570
 114: PPUSH
 115: CALL_OW 12
 119: PPUSH
 120: LD_INT 50
 122: PPUSH
 123: LD_INT 2
 125: PPUSH
 126: CALL_OW 352
// if def_base_level then
 130: LD_EXP 2
 134: IFFALSE 146
// area := bush_forest_small else
 136: LD_ADDR_VAR 0 2
 140: PUSH
 141: LD_INT 9
 143: ST_TO_ADDR
 144: GO 154
// area := bush_forest_big ;
 146: LD_ADDR_VAR 0 2
 150: PUSH
 151: LD_INT 8
 153: ST_TO_ADDR
// PlaceTreesToArea ( area , [ 38 , 39 , 37 ] , Rand ( 300 , 350 ) , 10 , 3 ) ;
 154: LD_VAR 0 2
 158: PPUSH
 159: LD_INT 38
 161: PUSH
 162: LD_INT 39
 164: PUSH
 165: LD_INT 37
 167: PUSH
 168: EMPTY
 169: LIST
 170: LIST
 171: LIST
 172: PPUSH
 173: LD_INT 300
 175: PPUSH
 176: LD_INT 350
 178: PPUSH
 179: CALL_OW 12
 183: PPUSH
 184: LD_INT 10
 186: PPUSH
 187: LD_INT 3
 189: PPUSH
 190: CALL_OW 352
// PlaceTreesToArea ( BigForest , [ 38 , 39 , 37 ] , 80 , 10 , 3 ) ;
 194: LD_INT 6
 196: PPUSH
 197: LD_INT 38
 199: PUSH
 200: LD_INT 39
 202: PUSH
 203: LD_INT 37
 205: PUSH
 206: EMPTY
 207: LIST
 208: LIST
 209: LIST
 210: PPUSH
 211: LD_INT 80
 213: PPUSH
 214: LD_INT 10
 216: PPUSH
 217: LD_INT 3
 219: PPUSH
 220: CALL_OW 352
// end ;
 224: LD_VAR 0 1
 228: RET
// function create_map_resources ; var un , oil_pos , sib_pos ; begin
 229: LD_INT 0
 231: PPUSH
 232: PPUSH
 233: PPUSH
 234: PPUSH
// oil_pos := [ [ 24 , 10 ] , [ 82 , 9 ] , [ 79 , 115 ] , [ 135 , 112 ] ] ;
 235: LD_ADDR_VAR 0 3
 239: PUSH
 240: LD_INT 24
 242: PUSH
 243: LD_INT 10
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: PUSH
 250: LD_INT 82
 252: PUSH
 253: LD_INT 9
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 79
 262: PUSH
 263: LD_INT 115
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 135
 272: PUSH
 273: LD_INT 112
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: PUSH
 280: EMPTY
 281: LIST
 282: LIST
 283: LIST
 284: LIST
 285: ST_TO_ADDR
// sib_pos := [ [ 24 , 29 ] , [ 102 , 29 ] , [ 60 , 93 ] , [ 134 , 91 ] ] ;
 286: LD_ADDR_VAR 0 4
 290: PUSH
 291: LD_INT 24
 293: PUSH
 294: LD_INT 29
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: PUSH
 301: LD_INT 102
 303: PUSH
 304: LD_INT 29
 306: PUSH
 307: EMPTY
 308: LIST
 309: LIST
 310: PUSH
 311: LD_INT 60
 313: PUSH
 314: LD_INT 93
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 134
 323: PUSH
 324: LD_INT 91
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: LIST
 335: LIST
 336: ST_TO_ADDR
// for un = 1 to 4 do
 337: LD_ADDR_VAR 0 2
 341: PUSH
 342: DOUBLE
 343: LD_INT 1
 345: DEC
 346: ST_TO_ADDR
 347: LD_INT 4
 349: PUSH
 350: FOR_TO
 351: IFFALSE 429
// begin CreateDepositXY ( oil_pos [ un ] [ 1 ] , oil_pos [ un ] [ 2 ] , mat_oil ) ;
 353: LD_VAR 0 3
 357: PUSH
 358: LD_VAR 0 2
 362: ARRAY
 363: PUSH
 364: LD_INT 1
 366: ARRAY
 367: PPUSH
 368: LD_VAR 0 3
 372: PUSH
 373: LD_VAR 0 2
 377: ARRAY
 378: PUSH
 379: LD_INT 2
 381: ARRAY
 382: PPUSH
 383: LD_INT 2
 385: PPUSH
 386: CALL_OW 62
// CreateDepositXY ( sib_pos [ un ] [ 1 ] , sib_pos [ un ] [ 2 ] , mat_siberit ) ;
 390: LD_VAR 0 4
 394: PUSH
 395: LD_VAR 0 2
 399: ARRAY
 400: PUSH
 401: LD_INT 1
 403: ARRAY
 404: PPUSH
 405: LD_VAR 0 4
 409: PUSH
 410: LD_VAR 0 2
 414: ARRAY
 415: PUSH
 416: LD_INT 2
 418: ARRAY
 419: PPUSH
 420: LD_INT 3
 422: PPUSH
 423: CALL_OW 62
// end ;
 427: GO 350
 429: POP
 430: POP
// end ;
 431: LD_VAR 0 1
 435: RET
// function init_map ; var i ; begin
 436: LD_INT 0
 438: PPUSH
 439: PPUSH
// extra_oil_deposits_locations := [ [ 38 , 6 ] , [ 67 , 6 ] , [ 94 , 115 ] , [ 116 , 99 ] ] ;
 440: LD_ADDR_EXP 42
 444: PUSH
 445: LD_INT 38
 447: PUSH
 448: LD_INT 6
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 67
 457: PUSH
 458: LD_INT 6
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: LD_INT 94
 467: PUSH
 468: LD_INT 115
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: LD_INT 116
 477: PUSH
 478: LD_INT 99
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: ST_TO_ADDR
// create_forest ;
 491: CALL 68 0 0
// create_map_resources ;
 495: CALL 229 0 0
// depot_def := [ [ 12 , 10 , 2 ] , [ 97 , 10 , 3 ] , [ 64 , 108 , 0 ] , [ 146 , 110 , 5 ] ] ;
 499: LD_ADDR_EXP 40
 503: PUSH
 504: LD_INT 12
 506: PUSH
 507: LD_INT 10
 509: PUSH
 510: LD_INT 2
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: LIST
 517: PUSH
 518: LD_INT 97
 520: PUSH
 521: LD_INT 10
 523: PUSH
 524: LD_INT 3
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: LIST
 531: PUSH
 532: LD_INT 64
 534: PUSH
 535: LD_INT 108
 537: PUSH
 538: LD_INT 0
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: LIST
 545: PUSH
 546: LD_INT 146
 548: PUSH
 549: LD_INT 110
 551: PUSH
 552: LD_INT 5
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: LIST
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: LIST
 565: ST_TO_ADDR
// if def_base_level then
 566: LD_EXP 2
 570: IFFALSE 625
// start_def := [ [ 16 , 14 ] , [ 96 , 13 ] , [ 65 , 105 ] , [ 141 , 105 ] ] else
 572: LD_ADDR_EXP 41
 576: PUSH
 577: LD_INT 16
 579: PUSH
 580: LD_INT 14
 582: PUSH
 583: EMPTY
 584: LIST
 585: LIST
 586: PUSH
 587: LD_INT 96
 589: PUSH
 590: LD_INT 13
 592: PUSH
 593: EMPTY
 594: LIST
 595: LIST
 596: PUSH
 597: LD_INT 65
 599: PUSH
 600: LD_INT 105
 602: PUSH
 603: EMPTY
 604: LIST
 605: LIST
 606: PUSH
 607: LD_INT 141
 609: PUSH
 610: LD_INT 105
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: ST_TO_ADDR
 623: GO 676
// start_def := [ [ 7 , 5 ] , [ 98 , 6 ] , [ 63 , 113 ] , [ 151 , 113 ] ] ;
 625: LD_ADDR_EXP 41
 629: PUSH
 630: LD_INT 7
 632: PUSH
 633: LD_INT 5
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: PUSH
 640: LD_INT 98
 642: PUSH
 643: LD_INT 6
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: PUSH
 650: LD_INT 63
 652: PUSH
 653: LD_INT 113
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: PUSH
 660: LD_INT 151
 662: PUSH
 663: LD_INT 113
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: ST_TO_ADDR
// end ;
 676: LD_VAR 0 1
 680: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
 681: LD_INT 0
 683: PPUSH
 684: PPUSH
 685: PPUSH
 686: PPUSH
 687: PPUSH
 688: PPUSH
 689: PPUSH
 690: PPUSH
 691: PPUSH
// if MultiPlayer then
 692: LD_OWVAR 4
 696: IFFALSE 780
// begin Game_Type = mp_game_type ;
 698: LD_ADDR_EXP 1
 702: PUSH
 703: LD_OWVAR 6
 707: ST_TO_ADDR
// Player_Side = mp_player_side ;
 708: LD_ADDR_EXP 30
 712: PUSH
 713: LD_OWVAR 7
 717: ST_TO_ADDR
// Player_Team = mp_player_team ;
 718: LD_ADDR_EXP 31
 722: PUSH
 723: LD_OWVAR 8
 727: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
 728: LD_ADDR_EXP 34
 732: PUSH
 733: LD_OWVAR 17
 737: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 738: LD_ADDR_EXP 32
 742: PUSH
 743: LD_OWVAR 15
 747: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 748: LD_ADDR_EXP 35
 752: PUSH
 753: LD_OWVAR 16
 757: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 758: LD_ADDR_EXP 39
 762: PUSH
 763: CALL 0 0 0
 767: ST_TO_ADDR
// Teams = mp_teams ;
 768: LD_ADDR_EXP 33
 772: PUSH
 773: LD_OWVAR 12
 777: ST_TO_ADDR
// end else
 778: GO 989
// begin Game_Type = 2 ;
 780: LD_ADDR_EXP 1
 784: PUSH
 785: LD_INT 2
 787: ST_TO_ADDR
// Player_Side = 4 ;
 788: LD_ADDR_EXP 30
 792: PUSH
 793: LD_INT 4
 795: ST_TO_ADDR
// Player_Team = 2 ;
 796: LD_ADDR_EXP 31
 800: PUSH
 801: LD_INT 2
 803: ST_TO_ADDR
// Side_Positions = [ 0 , 3 , 0 , 1 , 0 , 0 , 4 , 0 ] ;
 804: LD_ADDR_EXP 34
 808: PUSH
 809: LD_INT 0
 811: PUSH
 812: LD_INT 3
 814: PUSH
 815: LD_INT 0
 817: PUSH
 818: LD_INT 1
 820: PUSH
 821: LD_INT 0
 823: PUSH
 824: LD_INT 0
 826: PUSH
 827: LD_INT 4
 829: PUSH
 830: LD_INT 0
 832: PUSH
 833: EMPTY
 834: LIST
 835: LIST
 836: LIST
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: LIST
 842: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 2 , 0 , 1 , 2 , 0 ] ;
 843: LD_ADDR_EXP 32
 847: PUSH
 848: LD_INT 0
 850: PUSH
 851: LD_INT 1
 853: PUSH
 854: LD_INT 0
 856: PUSH
 857: LD_INT 2
 859: PUSH
 860: LD_INT 0
 862: PUSH
 863: LD_INT 1
 865: PUSH
 866: LD_INT 2
 868: PUSH
 869: LD_INT 0
 871: PUSH
 872: EMPTY
 873: LIST
 874: LIST
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 2 , 0 , 1 , 3 , 0 ] ;
 882: LD_ADDR_EXP 35
 886: PUSH
 887: LD_INT 0
 889: PUSH
 890: LD_INT 3
 892: PUSH
 893: LD_INT 0
 895: PUSH
 896: LD_INT 2
 898: PUSH
 899: LD_INT 0
 901: PUSH
 902: LD_INT 1
 904: PUSH
 905: LD_INT 3
 907: PUSH
 908: LD_INT 0
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: LIST
 915: LIST
 916: LIST
 917: LIST
 918: LIST
 919: LIST
 920: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 921: LD_ADDR_EXP 39
 925: PUSH
 926: LD_INT 0
 928: PUSH
 929: LD_INT 0
 931: PUSH
 932: LD_INT 0
 934: PUSH
 935: LD_INT 0
 937: PUSH
 938: LD_INT 0
 940: PUSH
 941: LD_INT 0
 943: PUSH
 944: LD_INT 0
 946: PUSH
 947: LD_INT 0
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: LIST
 954: LIST
 955: LIST
 956: LIST
 957: LIST
 958: LIST
 959: ST_TO_ADDR
// Teams = [ [ 2 , 7 ] , [ 6 , 4 ] ] ;
 960: LD_ADDR_EXP 33
 964: PUSH
 965: LD_INT 2
 967: PUSH
 968: LD_INT 7
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: PUSH
 975: LD_INT 6
 977: PUSH
 978: LD_INT 4
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PUSH
 985: EMPTY
 986: LIST
 987: LIST
 988: ST_TO_ADDR
// end ; Side_Count = ( Side_Positions diff [ 0 ] ) + 0 ;
 989: LD_ADDR_EXP 28
 993: PUSH
 994: LD_EXP 34
 998: PUSH
 999: LD_INT 0
1001: PUSH
1002: EMPTY
1003: LIST
1004: DIFF
1005: PUSH
1006: LD_INT 0
1008: PLUS
1009: ST_TO_ADDR
// Team_Count = ( Side_Teams diff [ 0 ] ) + 0 ;
1010: LD_ADDR_EXP 29
1014: PUSH
1015: LD_EXP 32
1019: PUSH
1020: LD_INT 0
1022: PUSH
1023: EMPTY
1024: LIST
1025: DIFF
1026: PUSH
1027: LD_INT 0
1029: PLUS
1030: ST_TO_ADDR
// if MultiPlayer then
1031: LD_OWVAR 4
1035: IFFALSE 1216
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
1037: LD_ADDR_EXP 2
1041: PUSH
1042: LD_INT 0
1044: PPUSH
1045: CALL_OW 426
1049: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
1050: LD_ADDR_EXP 3
1054: PUSH
1055: LD_INT 1
1057: PPUSH
1058: CALL_OW 426
1062: ST_TO_ADDR
// def_initial_level = GetMultiplayerSetting ( 2 ) ;
1063: LD_ADDR_EXP 4
1067: PUSH
1068: LD_INT 2
1070: PPUSH
1071: CALL_OW 426
1075: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
1076: LD_ADDR_EXP 5
1080: PUSH
1081: LD_INT 3
1083: PPUSH
1084: CALL_OW 426
1088: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
1089: LD_ADDR_EXP 6
1093: PUSH
1094: LD_INT 4
1096: PPUSH
1097: CALL_OW 426
1101: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
1102: LD_ADDR_EXP 7
1106: PUSH
1107: LD_INT 5
1109: PPUSH
1110: CALL_OW 426
1114: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
1115: LD_ADDR_EXP 8
1119: PUSH
1120: LD_INT 10
1122: PPUSH
1123: CALL_OW 426
1127: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
1128: LD_ADDR_EXP 9
1132: PUSH
1133: LD_INT 11
1135: PPUSH
1136: CALL_OW 426
1140: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
1141: LD_ADDR_EXP 10
1145: PUSH
1146: LD_INT 12
1148: PPUSH
1149: CALL_OW 426
1153: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
1154: LD_ADDR_EXP 11
1158: PUSH
1159: LD_INT 13
1161: PPUSH
1162: CALL_OW 426
1166: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
1167: LD_ADDR_EXP 12
1171: PUSH
1172: LD_INT 14
1174: PPUSH
1175: CALL_OW 426
1179: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
1180: LD_ADDR_EXP 13
1184: PUSH
1185: LD_INT 15
1187: PPUSH
1188: CALL_OW 426
1192: ST_TO_ADDR
// def_win_rules = 0 ;
1193: LD_ADDR_EXP 26
1197: PUSH
1198: LD_INT 0
1200: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
1201: LD_ADDR_VAR 0 9
1205: PUSH
1206: LD_INT 22
1208: PPUSH
1209: CALL_OW 426
1213: ST_TO_ADDR
// end else
1214: GO 1332
// begin randomize ;
1216: CALL_OW 10
// def_base_level = 0 ;
1220: LD_ADDR_EXP 2
1224: PUSH
1225: LD_INT 0
1227: ST_TO_ADDR
// def_amount_of_people = 1 ;
1228: LD_ADDR_EXP 3
1232: PUSH
1233: LD_INT 1
1235: ST_TO_ADDR
// def_initial_level = 1 ;
1236: LD_ADDR_EXP 4
1240: PUSH
1241: LD_INT 1
1243: ST_TO_ADDR
// def_starting_resources = 2 ;
1244: LD_ADDR_EXP 5
1248: PUSH
1249: LD_INT 2
1251: ST_TO_ADDR
// def_shipments_density = 1 ;
1252: LD_ADDR_EXP 6
1256: PUSH
1257: LD_INT 1
1259: ST_TO_ADDR
// def_extra_oil_deposits = 0 ;
1260: LD_ADDR_EXP 7
1264: PUSH
1265: LD_INT 0
1267: ST_TO_ADDR
// def_shared_vision = 1 ;
1268: LD_ADDR_EXP 8
1272: PUSH
1273: LD_INT 1
1275: ST_TO_ADDR
// def_morale_flags = 1 ;
1276: LD_ADDR_EXP 9
1280: PUSH
1281: LD_INT 1
1283: ST_TO_ADDR
// def_siberite_detection = 1 ;
1284: LD_ADDR_EXP 10
1288: PUSH
1289: LD_INT 1
1291: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
1292: LD_ADDR_EXP 11
1296: PUSH
1297: LD_INT 3
1299: ST_TO_ADDR
// def_people_respawning = 2 ;
1300: LD_ADDR_EXP 12
1304: PUSH
1305: LD_INT 2
1307: ST_TO_ADDR
// def_siberite_bomb = 0 ;
1308: LD_ADDR_EXP 13
1312: PUSH
1313: LD_INT 0
1315: ST_TO_ADDR
// def_win_rules = 0 ;
1316: LD_ADDR_EXP 26
1320: PUSH
1321: LD_INT 0
1323: ST_TO_ADDR
// tech_level = 4 ;
1324: LD_ADDR_VAR 0 9
1328: PUSH
1329: LD_INT 4
1331: ST_TO_ADDR
// end ; if isSGUI then
1332: LD_OWVAR 83
1336: IFFALSE 1344
// setMpTechs ( ) else
1338: CALL 8726 0 0
1342: GO 1357
// begin SetMpTechLevel ( tech_level + 1 ) ;
1344: LD_VAR 0 9
1348: PUSH
1349: LD_INT 1
1351: PLUS
1352: PPUSH
1353: CALL 8873 0 1
// end ; is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1357: LD_ADDR_EXP 14
1361: PUSH
1362: LD_INT 0
1364: PUSH
1365: LD_INT 1
1367: PUSH
1368: LD_INT 1
1370: PUSH
1371: LD_INT 1
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: PUSH
1380: LD_EXP 2
1384: PUSH
1385: LD_INT 1
1387: PLUS
1388: ARRAY
1389: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 0 , 0 ] [ def_base_level + 1 ] ;
1390: LD_ADDR_EXP 15
1394: PUSH
1395: LD_INT 0
1397: PUSH
1398: LD_INT 0
1400: PUSH
1401: LD_INT 0
1403: PUSH
1404: LD_INT 0
1406: PUSH
1407: EMPTY
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: PUSH
1413: LD_EXP 2
1417: PUSH
1418: LD_INT 1
1420: PLUS
1421: ARRAY
1422: ST_TO_ADDR
// number_of_people = [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
1423: LD_ADDR_EXP 16
1427: PUSH
1428: LD_INT 9
1430: PUSH
1431: LD_INT 12
1433: PUSH
1434: LD_INT 15
1436: PUSH
1437: LD_INT 24
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: LIST
1444: LIST
1445: PUSH
1446: LD_EXP 3
1450: PUSH
1451: LD_INT 1
1453: PLUS
1454: ARRAY
1455: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_initial_level + 1 ] ;
1456: LD_ADDR_EXP 17
1460: PUSH
1461: LD_INT 2
1463: PUSH
1464: LD_INT 3
1466: PUSH
1467: LD_INT 4
1469: PUSH
1470: LD_INT 5
1472: PUSH
1473: EMPTY
1474: LIST
1475: LIST
1476: LIST
1477: LIST
1478: PUSH
1479: LD_EXP 4
1483: PUSH
1484: LD_INT 1
1486: PLUS
1487: ARRAY
1488: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1489: LD_ADDR_EXP 20
1493: PUSH
1494: LD_INT 0
1496: PUSH
1497: LD_INT 0
1499: PUSH
1500: LD_INT 0
1502: PUSH
1503: EMPTY
1504: LIST
1505: LIST
1506: LIST
1507: PUSH
1508: LD_INT 30
1510: PUSH
1511: LD_INT 0
1513: PUSH
1514: LD_INT 0
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: LIST
1521: PUSH
1522: LD_INT 50
1524: PUSH
1525: LD_INT 20
1527: PUSH
1528: LD_INT 0
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: LIST
1535: PUSH
1536: LD_INT 80
1538: PUSH
1539: LD_INT 40
1541: PUSH
1542: LD_INT 20
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: LIST
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: LIST
1554: LIST
1555: PUSH
1556: LD_EXP 5
1560: PUSH
1561: LD_INT 1
1563: PLUS
1564: ARRAY
1565: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1566: LD_ADDR_EXP 19
1570: PUSH
1571: LD_INT 10
1573: PUSH
1574: EMPTY
1575: LIST
1576: PUSH
1577: LD_INT 7
1579: PUSH
1580: LD_INT 14
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: PUSH
1587: LD_INT 6
1589: PUSH
1590: LD_INT 12
1592: PUSH
1593: LD_INT 18
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: LIST
1600: PUSH
1601: LD_INT 5
1603: PUSH
1604: LD_INT 10
1606: PUSH
1607: LD_INT 15
1609: PUSH
1610: LD_INT 20
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: LIST
1617: LIST
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: PUSH
1625: LD_EXP 5
1629: PUSH
1630: LD_INT 1
1632: PLUS
1633: ARRAY
1634: ST_TO_ADDR
// shipments_density = [ 20 , 30 , 40 ] [ def_shipments_density + 1 ] ;
1635: LD_ADDR_EXP 21
1639: PUSH
1640: LD_INT 20
1642: PUSH
1643: LD_INT 30
1645: PUSH
1646: LD_INT 40
1648: PUSH
1649: EMPTY
1650: LIST
1651: LIST
1652: LIST
1653: PUSH
1654: LD_EXP 6
1658: PUSH
1659: LD_INT 1
1661: PLUS
1662: ARRAY
1663: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1664: LD_ADDR_EXP 18
1668: PUSH
1669: LD_INT 0
1671: PUSH
1672: LD_INT 1
1674: PUSH
1675: LD_INT 2
1677: PUSH
1678: LD_INT 3
1680: PUSH
1681: EMPTY
1682: LIST
1683: LIST
1684: LIST
1685: LIST
1686: PUSH
1687: LD_EXP 11
1691: PUSH
1692: LD_INT 1
1694: PLUS
1695: ARRAY
1696: ST_TO_ADDR
// spawning_koef_of_apemen = [ 0 , 165 , 140 , 115 ] [ def_amount_of_apemen + 1 ] ;
1697: LD_ADDR_EXP 23
1701: PUSH
1702: LD_INT 0
1704: PUSH
1705: LD_INT 165
1707: PUSH
1708: LD_INT 140
1710: PUSH
1711: LD_INT 115
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: LIST
1718: LIST
1719: PUSH
1720: LD_EXP 11
1724: PUSH
1725: LD_INT 1
1727: PLUS
1728: ARRAY
1729: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1730: LD_ADDR_EXP 24
1734: PUSH
1735: LD_INT 0
1737: PUSH
1738: LD_INT 8400
1740: PUSH
1741: LD_INT 1750
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: LIST
1748: PUSH
1749: LD_EXP 12
1753: PUSH
1754: LD_INT 1
1756: PLUS
1757: ARRAY
1758: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1759: LD_ADDR_EXP 25
1763: PUSH
1764: LD_INT 0
1766: PUSH
1767: LD_INT 21000
1769: PUSH
1770: LD_INT 4200
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: LIST
1777: PUSH
1778: LD_EXP 12
1782: PUSH
1783: LD_INT 1
1785: PLUS
1786: ARRAY
1787: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1788: LD_ADDR_EXP 22
1792: PUSH
1793: LD_INT 0
1795: PUSH
1796: LD_INT 1
1798: PUSH
1799: LD_INT 63000
1801: PUSH
1802: LD_INT 126000
1804: PUSH
1805: LD_INT 189000
1807: PUSH
1808: LD_INT 252000
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: LD_EXP 13
1823: PUSH
1824: LD_INT 1
1826: PLUS
1827: ARRAY
1828: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1829: LD_ADDR_EXP 46
1833: PUSH
1834: LD_INT 1
1836: NEG
1837: PUSH
1838: LD_INT 350
1840: PUSH
1841: LD_INT 700
1843: PUSH
1844: LD_INT 1400
1846: PUSH
1847: LD_INT 0
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: PUSH
1857: LD_EXP 9
1861: PUSH
1862: LD_INT 1
1864: PLUS
1865: ARRAY
1866: ST_TO_ADDR
// battle_flags_id = [ ] ;
1867: LD_ADDR_EXP 45
1871: PUSH
1872: EMPTY
1873: ST_TO_ADDR
// end ;
1874: LD_VAR 0 1
1878: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1879: LD_INT 0
1881: PPUSH
1882: PPUSH
1883: PPUSH
// Team_Game := 0 ;
1884: LD_ADDR_EXP 38
1888: PUSH
1889: LD_INT 0
1891: ST_TO_ADDR
// for i = 1 to 8 do
1892: LD_ADDR_VAR 0 2
1896: PUSH
1897: DOUBLE
1898: LD_INT 1
1900: DEC
1901: ST_TO_ADDR
1902: LD_INT 8
1904: PUSH
1905: FOR_TO
1906: IFFALSE 1932
// Team_Game := Team_Game + Side_Teams [ i ] ;
1908: LD_ADDR_EXP 38
1912: PUSH
1913: LD_EXP 38
1917: PUSH
1918: LD_EXP 32
1922: PUSH
1923: LD_VAR 0 2
1927: ARRAY
1928: PLUS
1929: ST_TO_ADDR
1930: GO 1905
1932: POP
1933: POP
// if not Team_Game then
1934: LD_EXP 38
1938: NOT
1939: IFFALSE 1951
// Team_Game := false else
1941: LD_ADDR_EXP 38
1945: PUSH
1946: LD_INT 0
1948: ST_TO_ADDR
1949: GO 1959
// Team_Game := true ;
1951: LD_ADDR_EXP 38
1955: PUSH
1956: LD_INT 1
1958: ST_TO_ADDR
// if not Team_Game then
1959: LD_EXP 38
1963: NOT
1964: IFFALSE 2062
// begin for i = 1 to 8 do
1966: LD_ADDR_VAR 0 2
1970: PUSH
1971: DOUBLE
1972: LD_INT 1
1974: DEC
1975: ST_TO_ADDR
1976: LD_INT 8
1978: PUSH
1979: FOR_TO
1980: IFFALSE 2058
// for j = 1 to 8 do
1982: LD_ADDR_VAR 0 3
1986: PUSH
1987: DOUBLE
1988: LD_INT 1
1990: DEC
1991: ST_TO_ADDR
1992: LD_INT 8
1994: PUSH
1995: FOR_TO
1996: IFFALSE 2054
// if i <> j then
1998: LD_VAR 0 2
2002: PUSH
2003: LD_VAR 0 3
2007: NONEQUAL
2008: IFFALSE 2032
// SetAttitude ( i , j , att_neutral , true ) else
2010: LD_VAR 0 2
2014: PPUSH
2015: LD_VAR 0 3
2019: PPUSH
2020: LD_INT 0
2022: PPUSH
2023: LD_INT 1
2025: PPUSH
2026: CALL_OW 80
2030: GO 2052
// SetAttitude ( i , j , att_friend , true ) ;
2032: LD_VAR 0 2
2036: PPUSH
2037: LD_VAR 0 3
2041: PPUSH
2042: LD_INT 1
2044: PPUSH
2045: LD_INT 1
2047: PPUSH
2048: CALL_OW 80
2052: GO 1995
2054: POP
2055: POP
2056: GO 1979
2058: POP
2059: POP
// end else
2060: GO 2237
// begin if def_shared_vision then
2062: LD_EXP 8
2066: IFFALSE 2131
// begin for i in Teams do
2068: LD_ADDR_VAR 0 2
2072: PUSH
2073: LD_EXP 33
2077: PUSH
2078: FOR_IN
2079: IFFALSE 2129
// for j = 2 to i do
2081: LD_ADDR_VAR 0 3
2085: PUSH
2086: DOUBLE
2087: LD_INT 2
2089: DEC
2090: ST_TO_ADDR
2091: LD_VAR 0 2
2095: PUSH
2096: FOR_TO
2097: IFFALSE 2125
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2099: LD_VAR 0 2
2103: PUSH
2104: LD_VAR 0 3
2108: ARRAY
2109: PPUSH
2110: LD_VAR 0 2
2114: PUSH
2115: LD_INT 1
2117: ARRAY
2118: PPUSH
2119: CALL_OW 343
2123: GO 2096
2125: POP
2126: POP
2127: GO 2078
2129: POP
2130: POP
// end ; for i = 1 to 8 do
2131: LD_ADDR_VAR 0 2
2135: PUSH
2136: DOUBLE
2137: LD_INT 1
2139: DEC
2140: ST_TO_ADDR
2141: LD_INT 8
2143: PUSH
2144: FOR_TO
2145: IFFALSE 2235
// for j = 1 to 8 do
2147: LD_ADDR_VAR 0 3
2151: PUSH
2152: DOUBLE
2153: LD_INT 1
2155: DEC
2156: ST_TO_ADDR
2157: LD_INT 8
2159: PUSH
2160: FOR_TO
2161: IFFALSE 2231
// if Side_Teams [ i ] = Side_Teams [ j ] then
2163: LD_EXP 32
2167: PUSH
2168: LD_VAR 0 2
2172: ARRAY
2173: PUSH
2174: LD_EXP 32
2178: PUSH
2179: LD_VAR 0 3
2183: ARRAY
2184: EQUAL
2185: IFFALSE 2209
// SetAttitude ( i , j , att_friend , true ) else
2187: LD_VAR 0 2
2191: PPUSH
2192: LD_VAR 0 3
2196: PPUSH
2197: LD_INT 1
2199: PPUSH
2200: LD_INT 1
2202: PPUSH
2203: CALL_OW 80
2207: GO 2229
// SetAttitude ( i , j , att_enemy , true ) ;
2209: LD_VAR 0 2
2213: PPUSH
2214: LD_VAR 0 3
2218: PPUSH
2219: LD_INT 2
2221: PPUSH
2222: LD_INT 1
2224: PPUSH
2225: CALL_OW 80
2229: GO 2160
2231: POP
2232: POP
2233: GO 2144
2235: POP
2236: POP
// end ; end ;
2237: LD_VAR 0 1
2241: RET
// function prepare_people ( side , count , cl , x , y , r , var commander ) ; var i , j , un ; begin
2242: LD_INT 0
2244: PPUSH
2245: PPUSH
2246: PPUSH
2247: PPUSH
// result := [ ] ;
2248: LD_ADDR_VAR 0 8
2252: PUSH
2253: EMPTY
2254: ST_TO_ADDR
// for i := 1 to count do
2255: LD_ADDR_VAR 0 9
2259: PUSH
2260: DOUBLE
2261: LD_INT 1
2263: DEC
2264: ST_TO_ADDR
2265: LD_VAR 0 2
2269: PUSH
2270: FOR_TO
2271: IFFALSE 2665
// begin uc_direction := Rand ( 0 , 5 ) ;
2273: LD_ADDR_OWVAR 24
2277: PUSH
2278: LD_INT 0
2280: PPUSH
2281: LD_INT 5
2283: PPUSH
2284: CALL_OW 12
2288: ST_TO_ADDR
// if commander then
2289: LD_FROM_VAR 0 7
2293: IFFALSE 2402
// begin hc_name := mp_sides_players_names [ side ] ;
2295: LD_ADDR_OWVAR 26
2299: PUSH
2300: LD_OWVAR 19
2304: PUSH
2305: LD_VAR 0 1
2309: ARRAY
2310: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
2311: LD_INT 1
2313: PPUSH
2314: LD_INT 2
2316: PPUSH
2317: CALL_OW 12
2321: PPUSH
2322: LD_VAR 0 3
2326: PPUSH
2327: LD_EXP 17
2331: PUSH
2332: LD_INT 2
2334: PLUS
2335: PPUSH
2336: CALL_OW 380
// hc_importance := 105 ;
2340: LD_ADDR_OWVAR 32
2344: PUSH
2345: LD_INT 105
2347: ST_TO_ADDR
// commander := false ;
2348: LD_VAR 0 7
2352: PUSH
2353: LD_INT 0
2355: ST_TO_ADDR
// if Multiplayer then
2356: LD_OWVAR 4
2360: IFFALSE 2400
// begin hc_gallery := MULTIAVATARS ;
2362: LD_ADDR_OWVAR 33
2366: PUSH
2367: LD_STRING MULTIAVATARS
2369: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( Side ) ;
2370: LD_ADDR_OWVAR 34
2374: PUSH
2375: LD_VAR 0 1
2379: PPUSH
2380: CALL_OW 525
2384: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( Side ) ;
2385: LD_ADDR_OWVAR 27
2389: PUSH
2390: LD_VAR 0 1
2394: PPUSH
2395: CALL_OW 526
2399: ST_TO_ADDR
// end ; end else
2400: GO 2465
// begin hc_name :=  ;
2402: LD_ADDR_OWVAR 26
2406: PUSH
2407: LD_STRING 
2409: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
2410: LD_INT 1
2412: PPUSH
2413: LD_INT 2
2415: PPUSH
2416: CALL_OW 12
2420: PPUSH
2421: LD_VAR 0 3
2425: PPUSH
2426: LD_EXP 17
2430: PPUSH
2431: CALL_OW 380
// hc_importance := 0 ;
2435: LD_ADDR_OWVAR 32
2439: PUSH
2440: LD_INT 0
2442: ST_TO_ADDR
// if Multiplayer then
2443: LD_OWVAR 4
2447: IFFALSE 2465
// begin hc_gallery :=  ;
2449: LD_ADDR_OWVAR 33
2453: PUSH
2454: LD_STRING 
2456: ST_TO_ADDR
// hc_face_number := 0 ;
2457: LD_ADDR_OWVAR 34
2461: PUSH
2462: LD_INT 0
2464: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2465: LD_ADDR_VAR 0 11
2469: PUSH
2470: CALL_OW 44
2474: ST_TO_ADDR
// if global_defined then
2475: LD_LOC 2
2479: IFFALSE 2617
// begin j := i ;
2481: LD_ADDR_VAR 0 10
2485: PUSH
2486: LD_VAR 0 9
2490: ST_TO_ADDR
// if cl = class_soldier then
2491: LD_VAR 0 3
2495: PUSH
2496: LD_INT 1
2498: EQUAL
2499: IFFALSE 2517
// j := i + soldiers_created ;
2501: LD_ADDR_VAR 0 10
2505: PUSH
2506: LD_VAR 0 9
2510: PUSH
2511: LD_LOC 3
2515: PLUS
2516: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2517: LD_LOC 1
2521: PUSH
2522: LD_VAR 0 3
2526: ARRAY
2527: PUSH
2528: LD_VAR 0 10
2532: ARRAY
2533: PPUSH
2534: LD_VAR 0 11
2538: PPUSH
2539: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2543: LD_VAR 0 11
2547: PPUSH
2548: LD_INT 2
2550: PPUSH
2551: LD_LOC 1
2555: PUSH
2556: LD_VAR 0 3
2560: ARRAY
2561: PUSH
2562: LD_VAR 0 10
2566: ARRAY
2567: PPUSH
2568: LD_INT 2
2570: PPUSH
2571: CALL_OW 260
2575: PPUSH
2576: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2580: LD_VAR 0 11
2584: PPUSH
2585: LD_INT 1
2587: PPUSH
2588: LD_LOC 1
2592: PUSH
2593: LD_VAR 0 3
2597: ARRAY
2598: PUSH
2599: LD_VAR 0 10
2603: ARRAY
2604: PPUSH
2605: LD_INT 1
2607: PPUSH
2608: CALL_OW 260
2612: PPUSH
2613: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2617: LD_VAR 0 11
2621: PPUSH
2622: LD_VAR 0 4
2626: PPUSH
2627: LD_VAR 0 5
2631: PPUSH
2632: LD_VAR 0 6
2636: PPUSH
2637: LD_INT 0
2639: PPUSH
2640: CALL_OW 50
// result := result ^ [ un ] ;
2644: LD_ADDR_VAR 0 8
2648: PUSH
2649: LD_VAR 0 8
2653: PUSH
2654: LD_VAR 0 11
2658: PUSH
2659: EMPTY
2660: LIST
2661: ADD
2662: ST_TO_ADDR
// end ;
2663: GO 2270
2665: POP
2666: POP
// if not global_defined then
2667: LD_LOC 2
2671: NOT
2672: IFFALSE 2734
// if cl = class_soldier and global_units then
2674: LD_VAR 0 3
2678: PUSH
2679: LD_INT 1
2681: EQUAL
2682: PUSH
2683: LD_LOC 1
2687: AND
2688: IFFALSE 2715
// global_units := [ global_units [ 1 ] ^ result ] else
2690: LD_ADDR_LOC 1
2694: PUSH
2695: LD_LOC 1
2699: PUSH
2700: LD_INT 1
2702: ARRAY
2703: PUSH
2704: LD_VAR 0 8
2708: ADD
2709: PUSH
2710: EMPTY
2711: LIST
2712: ST_TO_ADDR
2713: GO 2734
// global_units := global_units ^ [ result ] ;
2715: LD_ADDR_LOC 1
2719: PUSH
2720: LD_LOC 1
2724: PUSH
2725: LD_VAR 0 8
2729: PUSH
2730: EMPTY
2731: LIST
2732: ADD
2733: ST_TO_ADDR
// if commander then
2734: LD_FROM_VAR 0 7
2738: IFFALSE 2785
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2740: LD_ADDR_EXP 43
2744: PUSH
2745: LD_EXP 43
2749: PPUSH
2750: LD_OWVAR 20
2754: PPUSH
2755: LD_EXP 43
2759: PUSH
2760: LD_OWVAR 20
2764: ARRAY
2765: PUSH
2766: LD_VAR 0 11
2770: ADD
2771: PPUSH
2772: CALL_OW 1
2776: ST_TO_ADDR
// commander := false ;
2777: LD_VAR 0 7
2781: PUSH
2782: LD_INT 0
2784: ST_TO_ADDR
// end ; end ;
2785: LD_VAR 0 8
2789: RET
// function prepare_buldozer ( x , y , r , pos ) ; var nation ; begin
2790: LD_INT 0
2792: PPUSH
2793: PPUSH
// if uc_nation = 2 then
2794: LD_OWVAR 21
2798: PUSH
2799: LD_INT 2
2801: EQUAL
2802: IFFALSE 2824
// begin nation := uc_nation ;
2804: LD_ADDR_VAR 0 6
2808: PUSH
2809: LD_OWVAR 21
2813: ST_TO_ADDR
// uc_nation := 1 ;
2814: LD_ADDR_OWVAR 21
2818: PUSH
2819: LD_INT 1
2821: ST_TO_ADDR
// end else
2822: GO 2832
// nation := false ;
2824: LD_ADDR_VAR 0 6
2828: PUSH
2829: LD_INT 0
2831: ST_TO_ADDR
// vc_engine = engine_combustion ;
2832: LD_ADDR_OWVAR 39
2836: PUSH
2837: LD_INT 1
2839: ST_TO_ADDR
// vc_control = control_manual ;
2840: LD_ADDR_OWVAR 38
2844: PUSH
2845: LD_INT 1
2847: ST_TO_ADDR
// if uc_nation = nation_russian then
2848: LD_OWVAR 21
2852: PUSH
2853: LD_INT 3
2855: EQUAL
2856: IFFALSE 2876
// begin vc_chassis = ru_heavy_tracked ;
2858: LD_ADDR_OWVAR 37
2862: PUSH
2863: LD_INT 24
2865: ST_TO_ADDR
// vc_weapon = ru_bulldozer ;
2866: LD_ADDR_OWVAR 40
2870: PUSH
2871: LD_INT 53
2873: ST_TO_ADDR
// end else
2874: GO 2892
// begin vc_chassis = us_heavy_tracked ;
2876: LD_ADDR_OWVAR 37
2880: PUSH
2881: LD_INT 4
2883: ST_TO_ADDR
// vc_weapon = us_bulldozer ;
2884: LD_ADDR_OWVAR 40
2888: PUSH
2889: LD_INT 14
2891: ST_TO_ADDR
// end ; case pos of 1 :
2892: LD_VAR 0 4
2896: PUSH
2897: LD_INT 1
2899: DOUBLE
2900: EQUAL
2901: IFTRUE 2905
2903: GO 2916
2905: POP
// uc_direction := 2 ; 2 :
2906: LD_ADDR_OWVAR 24
2910: PUSH
2911: LD_INT 2
2913: ST_TO_ADDR
2914: GO 2974
2916: LD_INT 2
2918: DOUBLE
2919: EQUAL
2920: IFTRUE 2924
2922: GO 2935
2924: POP
// uc_direction := 3 ; 3 :
2925: LD_ADDR_OWVAR 24
2929: PUSH
2930: LD_INT 3
2932: ST_TO_ADDR
2933: GO 2974
2935: LD_INT 3
2937: DOUBLE
2938: EQUAL
2939: IFTRUE 2943
2941: GO 2954
2943: POP
// uc_direction := 0 ; 4 :
2944: LD_ADDR_OWVAR 24
2948: PUSH
2949: LD_INT 0
2951: ST_TO_ADDR
2952: GO 2974
2954: LD_INT 4
2956: DOUBLE
2957: EQUAL
2958: IFTRUE 2962
2960: GO 2973
2962: POP
// uc_direction := 5 ; end ;
2963: LD_ADDR_OWVAR 24
2967: PUSH
2968: LD_INT 5
2970: ST_TO_ADDR
2971: GO 2974
2973: POP
// PlaceUnitXYR ( CreateVehicle , x , y , r , false ) ;
2974: CALL_OW 45
2978: PPUSH
2979: LD_VAR 0 1
2983: PPUSH
2984: LD_VAR 0 2
2988: PPUSH
2989: LD_VAR 0 3
2993: PPUSH
2994: LD_INT 0
2996: PPUSH
2997: CALL_OW 50
// if nation then
3001: LD_VAR 0 6
3005: IFFALSE 3017
// uc_nation := nation ;
3007: LD_ADDR_OWVAR 21
3011: PUSH
3012: LD_VAR 0 6
3016: ST_TO_ADDR
// end ;
3017: LD_VAR 0 5
3021: RET
// function prepare_side ( side ) ; var pos , x , y , i , r , sol , br , dep , neng , nsci , nmech , nsol ; begin
3022: LD_INT 0
3024: PPUSH
3025: PPUSH
3026: PPUSH
3027: PPUSH
3028: PPUSH
3029: PPUSH
3030: PPUSH
3031: PPUSH
3032: PPUSH
3033: PPUSH
3034: PPUSH
3035: PPUSH
3036: PPUSH
// pos := Side_Positions [ side ] ;
3037: LD_ADDR_VAR 0 3
3041: PUSH
3042: LD_EXP 34
3046: PUSH
3047: LD_VAR 0 1
3051: ARRAY
3052: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3053: LD_ADDR_OWVAR 21
3057: PUSH
3058: LD_EXP 35
3062: PUSH
3063: LD_VAR 0 1
3067: ARRAY
3068: ST_TO_ADDR
// uc_side := side ;
3069: LD_ADDR_OWVAR 20
3073: PUSH
3074: LD_VAR 0 1
3078: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3079: LD_ADDR_VAR 0 4
3083: PUSH
3084: LD_EXP 40
3088: PUSH
3089: LD_VAR 0 3
3093: ARRAY
3094: PUSH
3095: LD_INT 1
3097: ARRAY
3098: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3099: LD_ADDR_VAR 0 5
3103: PUSH
3104: LD_EXP 40
3108: PUSH
3109: LD_VAR 0 3
3113: ARRAY
3114: PUSH
3115: LD_INT 2
3117: ARRAY
3118: ST_TO_ADDR
// if is_depot then
3119: LD_EXP 14
3123: IFFALSE 3248
// begin bc_type = b_depot ;
3125: LD_ADDR_OWVAR 42
3129: PUSH
3130: LD_INT 0
3132: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , Depot_Def [ pos ] [ 3 ] ) ;
3133: LD_ADDR_VAR 0 10
3137: PUSH
3138: LD_VAR 0 4
3142: PPUSH
3143: LD_VAR 0 5
3147: PPUSH
3148: LD_EXP 40
3152: PUSH
3153: LD_VAR 0 3
3157: ARRAY
3158: PUSH
3159: LD_INT 3
3161: ARRAY
3162: PPUSH
3163: CALL_OW 47
3167: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3168: LD_VAR 0 10
3172: PPUSH
3173: CALL_OW 274
3177: PPUSH
3178: LD_INT 1
3180: PPUSH
3181: LD_EXP 20
3185: PUSH
3186: LD_INT 1
3188: ARRAY
3189: PPUSH
3190: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3194: LD_VAR 0 10
3198: PPUSH
3199: CALL_OW 274
3203: PPUSH
3204: LD_INT 2
3206: PPUSH
3207: LD_EXP 20
3211: PUSH
3212: LD_INT 2
3214: ARRAY
3215: PPUSH
3216: CALL_OW 277
// SetResourceType ( GetBase ( result ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3220: LD_VAR 0 2
3224: PPUSH
3225: CALL_OW 274
3229: PPUSH
3230: LD_INT 3
3232: PPUSH
3233: LD_EXP 20
3237: PUSH
3238: LD_INT 3
3240: ARRAY
3241: PPUSH
3242: CALL_OW 277
// end else
3246: GO 3392
// begin for i := 1 to 3 do
3248: LD_ADDR_VAR 0 6
3252: PUSH
3253: DOUBLE
3254: LD_INT 1
3256: DEC
3257: ST_TO_ADDR
3258: LD_INT 3
3260: PUSH
3261: FOR_TO
3262: IFFALSE 3390
// begin r := starting_resources [ i ] ;
3264: LD_ADDR_VAR 0 7
3268: PUSH
3269: LD_EXP 20
3273: PUSH
3274: LD_VAR 0 6
3278: ARRAY
3279: ST_TO_ADDR
// while r >= 10 do
3280: LD_VAR 0 7
3284: PUSH
3285: LD_INT 10
3287: GREATEREQUAL
3288: IFFALSE 3388
// if r > 50 then
3290: LD_VAR 0 7
3294: PUSH
3295: LD_INT 50
3297: GREATER
3298: IFFALSE 3344
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3300: LD_VAR 0 6
3304: PPUSH
3305: LD_INT 5
3307: PPUSH
3308: LD_VAR 0 4
3312: PPUSH
3313: LD_VAR 0 5
3317: PPUSH
3318: LD_INT 4
3320: PPUSH
3321: LD_INT 0
3323: PPUSH
3324: CALL_OW 60
// r := r - 50 ;
3328: LD_ADDR_VAR 0 7
3332: PUSH
3333: LD_VAR 0 7
3337: PUSH
3338: LD_INT 50
3340: MINUS
3341: ST_TO_ADDR
// end else
3342: GO 3386
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3344: LD_VAR 0 6
3348: PPUSH
3349: LD_VAR 0 7
3353: PUSH
3354: LD_INT 10
3356: DIV
3357: PPUSH
3358: LD_VAR 0 4
3362: PPUSH
3363: LD_VAR 0 5
3367: PPUSH
3368: LD_INT 4
3370: PPUSH
3371: LD_INT 0
3373: PPUSH
3374: CALL_OW 60
// r := 0 ;
3378: LD_ADDR_VAR 0 7
3382: PUSH
3383: LD_INT 0
3385: ST_TO_ADDR
// end ;
3386: GO 3280
// end ;
3388: GO 3261
3390: POP
3391: POP
// end ; x := start_def [ pos ] [ 1 ] ;
3392: LD_ADDR_VAR 0 4
3396: PUSH
3397: LD_EXP 41
3401: PUSH
3402: LD_VAR 0 3
3406: ARRAY
3407: PUSH
3408: LD_INT 1
3410: ARRAY
3411: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3412: LD_ADDR_VAR 0 5
3416: PUSH
3417: LD_EXP 41
3421: PUSH
3422: LD_VAR 0 3
3426: ARRAY
3427: PUSH
3428: LD_INT 2
3430: ARRAY
3431: ST_TO_ADDR
// for r in starting_crates do
3432: LD_ADDR_VAR 0 7
3436: PUSH
3437: LD_EXP 19
3441: PUSH
3442: FOR_IN
3443: IFFALSE 3475
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3445: LD_INT 1
3447: PPUSH
3448: LD_INT 5
3450: PPUSH
3451: LD_VAR 0 4
3455: PPUSH
3456: LD_VAR 0 5
3460: PPUSH
3461: LD_VAR 0 7
3465: PPUSH
3466: LD_INT 0
3468: PPUSH
3469: CALL_OW 60
3473: GO 3442
3475: POP
3476: POP
// if def_morale_flags then
3477: LD_EXP 9
3481: IFFALSE 3560
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3483: LD_ADDR_EXP 45
3487: PUSH
3488: LD_EXP 45
3492: PUSH
3493: LD_VAR 0 1
3497: PPUSH
3498: LD_VAR 0 4
3502: PPUSH
3503: LD_VAR 0 5
3507: PPUSH
3508: LD_INT 1
3510: PUSH
3511: LD_INT 100
3513: PUSH
3514: EMPTY
3515: LIST
3516: LIST
3517: PUSH
3518: LD_INT 2
3520: PUSH
3521: LD_INT 50
3523: PUSH
3524: EMPTY
3525: LIST
3526: LIST
3527: PUSH
3528: LD_INT 3
3530: PUSH
3531: LD_INT 20
3533: PUSH
3534: EMPTY
3535: LIST
3536: LIST
3537: PUSH
3538: LD_INT 20
3540: PUSH
3541: LD_INT 100
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: PPUSH
3554: CALL_OW 418
3558: ADD
3559: ST_TO_ADDR
// neng := number_of_people ;
3560: LD_ADDR_VAR 0 11
3564: PUSH
3565: LD_EXP 16
3569: ST_TO_ADDR
// nsol := neng div 4 ;
3570: LD_ADDR_VAR 0 14
3574: PUSH
3575: LD_VAR 0 11
3579: PUSH
3580: LD_INT 4
3582: DIV
3583: ST_TO_ADDR
// neng := neng - nsol ;
3584: LD_ADDR_VAR 0 11
3588: PUSH
3589: LD_VAR 0 11
3593: PUSH
3594: LD_VAR 0 14
3598: MINUS
3599: ST_TO_ADDR
// nsci := neng div 3 ;
3600: LD_ADDR_VAR 0 12
3604: PUSH
3605: LD_VAR 0 11
3609: PUSH
3610: LD_INT 3
3612: DIV
3613: ST_TO_ADDR
// if nsci < 1 then
3614: LD_VAR 0 12
3618: PUSH
3619: LD_INT 1
3621: LESS
3622: IFFALSE 3632
// nsci := 1 ;
3624: LD_ADDR_VAR 0 12
3628: PUSH
3629: LD_INT 1
3631: ST_TO_ADDR
// neng := neng - nsci ;
3632: LD_ADDR_VAR 0 11
3636: PUSH
3637: LD_VAR 0 11
3641: PUSH
3642: LD_VAR 0 12
3646: MINUS
3647: ST_TO_ADDR
// nmech := neng div 2 ;
3648: LD_ADDR_VAR 0 13
3652: PUSH
3653: LD_VAR 0 11
3657: PUSH
3658: LD_INT 2
3660: DIV
3661: ST_TO_ADDR
// neng := neng - nmech ;
3662: LD_ADDR_VAR 0 11
3666: PUSH
3667: LD_VAR 0 11
3671: PUSH
3672: LD_VAR 0 13
3676: MINUS
3677: ST_TO_ADDR
// if neng < 1 then
3678: LD_VAR 0 11
3682: PUSH
3683: LD_INT 1
3685: LESS
3686: IFFALSE 3696
// neng := 1 ;
3688: LD_ADDR_VAR 0 11
3692: PUSH
3693: LD_INT 1
3695: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
3696: LD_ADDR_VAR 0 4
3700: PUSH
3701: LD_EXP 41
3705: PUSH
3706: LD_VAR 0 3
3710: ARRAY
3711: PUSH
3712: LD_INT 1
3714: ARRAY
3715: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3716: LD_ADDR_VAR 0 5
3720: PUSH
3721: LD_EXP 41
3725: PUSH
3726: LD_VAR 0 3
3730: ARRAY
3731: PUSH
3732: LD_INT 2
3734: ARRAY
3735: ST_TO_ADDR
// if not is_depot then
3736: LD_EXP 14
3740: NOT
3741: IFFALSE 3765
// prepare_buldozer ( x , y , 2 , pos ) ;
3743: LD_VAR 0 4
3747: PPUSH
3748: LD_VAR 0 5
3752: PPUSH
3753: LD_INT 2
3755: PPUSH
3756: LD_VAR 0 3
3760: PPUSH
3761: CALL 2790 0 4
// commander := true ;
3765: LD_ADDR_EXP 44
3769: PUSH
3770: LD_INT 1
3772: ST_TO_ADDR
// prepare_people ( side , 1 , class_soldier , x , y , 5 , commander ) ;
3773: LD_VAR 0 1
3777: PPUSH
3778: LD_INT 1
3780: PPUSH
3781: LD_INT 1
3783: PPUSH
3784: LD_VAR 0 4
3788: PPUSH
3789: LD_VAR 0 5
3793: PPUSH
3794: LD_INT 5
3796: PPUSH
3797: LD_ADDR_EXP 44
3801: PPUSH
3802: CALL 2242 0 7
// commander := false ;
3806: LD_ADDR_EXP 44
3810: PUSH
3811: LD_INT 0
3813: ST_TO_ADDR
// prepare_people ( side , nsol - 1 , class_soldier , x , y , 5 , commander ) ;
3814: LD_VAR 0 1
3818: PPUSH
3819: LD_VAR 0 14
3823: PUSH
3824: LD_INT 1
3826: MINUS
3827: PPUSH
3828: LD_INT 1
3830: PPUSH
3831: LD_VAR 0 4
3835: PPUSH
3836: LD_VAR 0 5
3840: PPUSH
3841: LD_INT 5
3843: PPUSH
3844: LD_ADDR_EXP 44
3848: PPUSH
3849: CALL 2242 0 7
// prepare_people ( side , neng , class_engineer , x , y , 5 , commander ) ;
3853: LD_VAR 0 1
3857: PPUSH
3858: LD_VAR 0 11
3862: PPUSH
3863: LD_INT 2
3865: PPUSH
3866: LD_VAR 0 4
3870: PPUSH
3871: LD_VAR 0 5
3875: PPUSH
3876: LD_INT 5
3878: PPUSH
3879: LD_ADDR_EXP 44
3883: PPUSH
3884: CALL 2242 0 7
// prepare_people ( side , nmech , class_mechanic , x , y , 5 , commander ) ;
3888: LD_VAR 0 1
3892: PPUSH
3893: LD_VAR 0 13
3897: PPUSH
3898: LD_INT 3
3900: PPUSH
3901: LD_VAR 0 4
3905: PPUSH
3906: LD_VAR 0 5
3910: PPUSH
3911: LD_INT 5
3913: PPUSH
3914: LD_ADDR_EXP 44
3918: PPUSH
3919: CALL 2242 0 7
// prepare_people ( side , nsci , class_scientistic , x , y , 5 , commander ) ;
3923: LD_VAR 0 1
3927: PPUSH
3928: LD_VAR 0 12
3932: PPUSH
3933: LD_INT 4
3935: PPUSH
3936: LD_VAR 0 4
3940: PPUSH
3941: LD_VAR 0 5
3945: PPUSH
3946: LD_INT 5
3948: PPUSH
3949: LD_ADDR_EXP 44
3953: PPUSH
3954: CALL 2242 0 7
// if not global_defined then
3958: LD_LOC 2
3962: NOT
3963: IFFALSE 3973
// global_defined := true ;
3965: LD_ADDR_LOC 2
3969: PUSH
3970: LD_INT 1
3972: ST_TO_ADDR
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3973: LD_EXP 10
3977: PUSH
3978: LD_INT 20
3980: PPUSH
3981: LD_VAR 0 1
3985: PPUSH
3986: CALL_OW 321
3990: PUSH
3991: LD_INT 1
3993: EQUAL
3994: AND
3995: IFFALSE 4012
// SetTech ( tech_SibDet , side , state_researched ) ;
3997: LD_INT 20
3999: PPUSH
4000: LD_VAR 0 1
4004: PPUSH
4005: LD_INT 2
4007: PPUSH
4008: CALL_OW 322
// if def_siberite_bomb = 1 then
4012: LD_EXP 13
4016: PUSH
4017: LD_INT 1
4019: EQUAL
4020: IFFALSE 4054
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4022: LD_INT 25
4024: PPUSH
4025: LD_VAR 0 1
4029: PPUSH
4030: LD_INT 1
4032: PPUSH
4033: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4037: LD_INT 73
4039: PPUSH
4040: LD_VAR 0 1
4044: PPUSH
4045: LD_INT 1
4047: PPUSH
4048: CALL_OW 322
// end else
4052: GO 4084
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4054: LD_INT 25
4056: PPUSH
4057: LD_VAR 0 1
4061: PPUSH
4062: LD_INT 0
4064: PPUSH
4065: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4069: LD_INT 73
4071: PPUSH
4072: LD_VAR 0 1
4076: PPUSH
4077: LD_INT 0
4079: PPUSH
4080: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4084: LD_INT 24
4086: PPUSH
4087: LD_VAR 0 1
4091: PPUSH
4092: LD_INT 0
4094: PPUSH
4095: CALL_OW 322
// end ;
4099: LD_VAR 0 2
4103: RET
// every 0 0$1 do
4104: GO 4106
4106: DISABLE
// if ( def_siberite_bomb > 1 ) then
4107: LD_EXP 13
4111: PUSH
4112: LD_INT 1
4114: GREATER
4115: IFFALSE 4130
// begin wait ( siberite_bomb_Delay ) ;
4117: LD_EXP 22
4121: PPUSH
4122: CALL_OW 67
// EnableSibFiss ;
4126: CALL 4131 0 0
// end ;
4130: END
// function EnableSibFiss ; var i ; begin
4131: LD_INT 0
4133: PPUSH
4134: PPUSH
// for i := 1 to 8 do
4135: LD_ADDR_VAR 0 2
4139: PUSH
4140: DOUBLE
4141: LD_INT 1
4143: DEC
4144: ST_TO_ADDR
4145: LD_INT 8
4147: PUSH
4148: FOR_TO
4149: IFFALSE 4195
// if Side_Positions [ i ] then
4151: LD_EXP 34
4155: PUSH
4156: LD_VAR 0 2
4160: ARRAY
4161: IFFALSE 4193
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4163: LD_INT 25
4165: PPUSH
4166: LD_VAR 0 2
4170: PPUSH
4171: LD_INT 1
4173: PPUSH
4174: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4178: LD_INT 73
4180: PPUSH
4181: LD_VAR 0 2
4185: PPUSH
4186: LD_INT 1
4188: PPUSH
4189: CALL_OW 322
// end ;
4193: GO 4148
4195: POP
4196: POP
// end ;
4197: LD_VAR 0 1
4201: RET
// function prepare_sides ; var i ; begin
4202: LD_INT 0
4204: PPUSH
4205: PPUSH
// global_units := [ ] ;
4206: LD_ADDR_LOC 1
4210: PUSH
4211: EMPTY
4212: ST_TO_ADDR
// global_defined := false ;
4213: LD_ADDR_LOC 2
4217: PUSH
4218: LD_INT 0
4220: ST_TO_ADDR
// for i := 1 to 8 do
4221: LD_ADDR_VAR 0 2
4225: PUSH
4226: DOUBLE
4227: LD_INT 1
4229: DEC
4230: ST_TO_ADDR
4231: LD_INT 8
4233: PUSH
4234: FOR_TO
4235: IFFALSE 4260
// if Side_Positions [ i ] then
4237: LD_EXP 34
4241: PUSH
4242: LD_VAR 0 2
4246: ARRAY
4247: IFFALSE 4258
// prepare_side ( i ) ;
4249: LD_VAR 0 2
4253: PPUSH
4254: CALL 3022 0 1
4258: GO 4234
4260: POP
4261: POP
// end ;
4262: LD_VAR 0 1
4266: RET
// starting begin disable ( 98 ) ;
4267: LD_INT 98
4269: DISABLE_MARKED
// disable ( 99 ) ;
4270: LD_INT 99
4272: DISABLE_MARKED
// disable ( 400 ) ;
4273: LD_INT 400
4275: DISABLE_MARKED
// disable ( 401 ) ;
4276: LD_INT 401
4278: DISABLE_MARKED
// mp_selectmsg := true ;
4279: LD_ADDR_OWVAR 13
4283: PUSH
4284: LD_INT 1
4286: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4287: CALL 681 0 0
// init_map ;
4291: CALL 436 0 0
// set_shared_visions_and_alliances ;
4295: CALL 1879 0 0
// ResetFog ;
4299: CALL_OW 335
// ClearAllFogForSide ( Player_Side ) ;
4303: LD_EXP 30
4307: PPUSH
4308: CALL_OW 520
// prepare_sides ;
4312: CALL 4202 0 0
// Init_Win_Condition ;
4316: CALL 7500 0 0
// init_shipments ;
4320: CALL 5449 0 0
// init_respawn ;
4324: CALL 5942 0 0
// InitApeman ;
4328: CALL 4624 0 0
// your_side := Player_Side ;
4332: LD_ADDR_OWVAR 2
4336: PUSH
4337: LD_EXP 30
4341: ST_TO_ADDR
// if IAmSpec then
4342: CALL_OW 531
4346: IFFALSE 4370
// begin fogOff ( true ) ;
4348: LD_INT 1
4350: PPUSH
4351: CALL_OW 344
// CenterNowOnXY ( 104 , 69 ) ;
4355: LD_INT 104
4357: PPUSH
4358: LD_INT 69
4360: PPUSH
4361: CALL_OW 86
// enable ( 400 ) ;
4365: LD_INT 400
4367: ENABLE_MARKED
// end else
4368: GO 4416
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4370: LD_EXP 41
4374: PUSH
4375: LD_EXP 34
4379: PUSH
4380: LD_OWVAR 2
4384: ARRAY
4385: ARRAY
4386: PUSH
4387: LD_INT 1
4389: ARRAY
4390: PPUSH
4391: LD_EXP 41
4395: PUSH
4396: LD_EXP 34
4400: PUSH
4401: LD_OWVAR 2
4405: ARRAY
4406: ARRAY
4407: PUSH
4408: LD_INT 2
4410: ARRAY
4411: PPUSH
4412: CALL_OW 86
// end ; music_nat := Side_Nations [ your_side ] ;
4416: LD_ADDR_OWVAR 71
4420: PUSH
4421: LD_EXP 35
4425: PUSH
4426: LD_OWVAR 2
4430: ARRAY
4431: ST_TO_ADDR
// end ; end_of_file
4432: END
// every 20 20$00 trigger apemanNumber do
4433: LD_EXP 47
4437: IFFALSE 4470
4439: GO 4441
4441: DISABLE
// begin enable ;
4442: ENABLE
// if apeLevel >= 8 then
4443: LD_EXP 52
4447: PUSH
4448: LD_INT 8
4450: GREATEREQUAL
4451: IFFALSE 4456
// disable else
4453: DISABLE
4454: GO 4470
// apeLevel := apeLevel + 1 ;
4456: LD_ADDR_EXP 52
4460: PUSH
4461: LD_EXP 52
4465: PUSH
4466: LD_INT 1
4468: PLUS
4469: ST_TO_ADDR
// end ;
4470: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
4471: LD_EXP 47
4475: PUSH
4476: LD_EXP 48
4480: LESS
4481: IFFALSE 4621
4483: GO 4485
4485: DISABLE
4486: LD_INT 0
4488: PPUSH
4489: PPUSH
4490: PPUSH
4491: PPUSH
// begin enable ;
4492: ENABLE
// for i := 1 to apemanPos do
4493: LD_ADDR_VAR 0 1
4497: PUSH
4498: DOUBLE
4499: LD_INT 1
4501: DEC
4502: ST_TO_ADDR
4503: LD_EXP 50
4507: PUSH
4508: FOR_TO
4509: IFFALSE 4619
// begin if apemanPlayerCount [ i ] then
4511: LD_EXP 51
4515: PUSH
4516: LD_VAR 0 1
4520: ARRAY
4521: IFFALSE 4617
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
4523: LD_EXP 51
4527: PUSH
4528: LD_VAR 0 1
4532: ARRAY
4533: PUSH
4534: LD_EXP 50
4538: PUSH
4539: LD_VAR 0 1
4543: ARRAY
4544: GREATER
4545: IFFALSE 4617
// begin ape := PrepareApeman ;
4547: LD_ADDR_VAR 0 2
4551: PUSH
4552: CALL 5124 0 0
4556: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
4557: LD_VAR 0 2
4561: PPUSH
4562: LD_EXP 53
4566: PUSH
4567: LD_VAR 0 1
4571: ARRAY
4572: PPUSH
4573: LD_INT 0
4575: PPUSH
4576: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
4580: LD_ADDR_EXP 50
4584: PUSH
4585: LD_EXP 50
4589: PPUSH
4590: LD_VAR 0 1
4594: PPUSH
4595: LD_EXP 50
4599: PUSH
4600: LD_VAR 0 1
4604: ARRAY
4605: PUSH
4606: LD_VAR 0 2
4610: UNION
4611: PPUSH
4612: CALL_OW 1
4616: ST_TO_ADDR
// end ; end ; end ;
4617: GO 4508
4619: POP
4620: POP
// end ;
4621: PPOPN 4
4623: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
4624: LD_INT 0
4626: PPUSH
4627: PPUSH
4628: PPUSH
4629: PPUSH
4630: PPUSH
4631: PPUSH
4632: PPUSH
// playersAmount := 0 ;
4633: LD_ADDR_VAR 0 3
4637: PUSH
4638: LD_INT 0
4640: ST_TO_ADDR
// _apeAreas := [ nw , ne , sw , se , ] ;
4641: LD_ADDR_VAR 0 7
4645: PUSH
4646: LD_INT 12
4648: PUSH
4649: LD_INT 13
4651: PUSH
4652: LD_INT 14
4654: PUSH
4655: LD_INT 15
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: LIST
4662: LIST
4663: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4664: LD_ADDR_EXP 53
4668: PUSH
4669: LD_INT 0
4671: PUSH
4672: LD_INT 0
4674: PUSH
4675: LD_INT 0
4677: PUSH
4678: LD_INT 0
4680: PUSH
4681: LD_INT 0
4683: PUSH
4684: LD_INT 0
4686: PUSH
4687: LD_INT 0
4689: PUSH
4690: LD_INT 0
4692: PUSH
4693: EMPTY
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: ST_TO_ADDR
// for j = 1 to Side_Positions do
4703: LD_ADDR_VAR 0 4
4707: PUSH
4708: DOUBLE
4709: LD_INT 1
4711: DEC
4712: ST_TO_ADDR
4713: LD_EXP 34
4717: PUSH
4718: FOR_TO
4719: IFFALSE 4786
// if Side_Positions [ j ] then
4721: LD_EXP 34
4725: PUSH
4726: LD_VAR 0 4
4730: ARRAY
4731: IFFALSE 4784
// begin playersAmount := playersAmount + 1 ;
4733: LD_ADDR_VAR 0 3
4737: PUSH
4738: LD_VAR 0 3
4742: PUSH
4743: LD_INT 1
4745: PLUS
4746: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
4747: LD_ADDR_EXP 53
4751: PUSH
4752: LD_EXP 53
4756: PPUSH
4757: LD_VAR 0 4
4761: PPUSH
4762: LD_VAR 0 7
4766: PUSH
4767: LD_EXP 34
4771: PUSH
4772: LD_VAR 0 4
4776: ARRAY
4777: ARRAY
4778: PPUSH
4779: CALL_OW 1
4783: ST_TO_ADDR
// end ;
4784: GO 4718
4786: POP
4787: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
4788: LD_ADDR_EXP 49
4792: PUSH
4793: LD_INT 3
4795: PUSH
4796: LD_EXP 18
4800: MUL
4801: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
4802: LD_ADDR_EXP 47
4806: PUSH
4807: LD_VAR 0 3
4811: PUSH
4812: LD_EXP 49
4816: MUL
4817: ST_TO_ADDR
// apemanLimit := apemanNumber ;
4818: LD_ADDR_EXP 48
4822: PUSH
4823: LD_EXP 47
4827: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4828: LD_ADDR_EXP 50
4832: PUSH
4833: LD_INT 0
4835: PUSH
4836: LD_INT 0
4838: PUSH
4839: LD_INT 0
4841: PUSH
4842: LD_INT 0
4844: PUSH
4845: LD_INT 0
4847: PUSH
4848: LD_INT 0
4850: PUSH
4851: LD_INT 0
4853: PUSH
4854: LD_INT 0
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4867: LD_ADDR_EXP 51
4871: PUSH
4872: LD_INT 0
4874: PUSH
4875: LD_INT 0
4877: PUSH
4878: LD_INT 0
4880: PUSH
4881: LD_INT 0
4883: PUSH
4884: LD_INT 0
4886: PUSH
4887: LD_INT 0
4889: PUSH
4890: LD_INT 0
4892: PUSH
4893: LD_INT 0
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: ST_TO_ADDR
// apeLevel := 1 ;
4906: LD_ADDR_EXP 52
4910: PUSH
4911: LD_INT 1
4913: ST_TO_ADDR
// if not apemanNumber then
4914: LD_EXP 47
4918: NOT
4919: IFFALSE 4923
// exit ;
4921: GO 5119
// for i := 1 to apemanPerPlayer do
4923: LD_ADDR_VAR 0 2
4927: PUSH
4928: DOUBLE
4929: LD_INT 1
4931: DEC
4932: ST_TO_ADDR
4933: LD_EXP 49
4937: PUSH
4938: FOR_TO
4939: IFFALSE 5117
// begin for j := 1 to Side_Positions do
4941: LD_ADDR_VAR 0 4
4945: PUSH
4946: DOUBLE
4947: LD_INT 1
4949: DEC
4950: ST_TO_ADDR
4951: LD_EXP 34
4955: PUSH
4956: FOR_TO
4957: IFFALSE 5113
// if Side_Positions [ j ] then
4959: LD_EXP 34
4963: PUSH
4964: LD_VAR 0 4
4968: ARRAY
4969: IFFALSE 5111
// begin pos := Side_Positions [ j ] ;
4971: LD_ADDR_VAR 0 6
4975: PUSH
4976: LD_EXP 34
4980: PUSH
4981: LD_VAR 0 4
4985: ARRAY
4986: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
4987: LD_ADDR_EXP 51
4991: PUSH
4992: LD_EXP 51
4996: PPUSH
4997: LD_VAR 0 4
5001: PPUSH
5002: LD_EXP 51
5006: PUSH
5007: LD_VAR 0 4
5011: ARRAY
5012: PUSH
5013: LD_INT 1
5015: PLUS
5016: PPUSH
5017: CALL_OW 1
5021: ST_TO_ADDR
// ape := PrepareApeman ;
5022: LD_ADDR_VAR 0 5
5026: PUSH
5027: CALL 5124 0 0
5031: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5032: LD_ADDR_EXP 50
5036: PUSH
5037: LD_EXP 50
5041: PPUSH
5042: LD_VAR 0 4
5046: PPUSH
5047: LD_EXP 50
5051: PUSH
5052: LD_VAR 0 4
5056: ARRAY
5057: PPUSH
5058: LD_EXP 50
5062: PUSH
5063: LD_VAR 0 4
5067: ARRAY
5068: PUSH
5069: LD_INT 1
5071: PLUS
5072: PPUSH
5073: LD_VAR 0 5
5077: PPUSH
5078: CALL_OW 1
5082: PPUSH
5083: CALL_OW 1
5087: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5088: LD_VAR 0 5
5092: PPUSH
5093: LD_EXP 53
5097: PUSH
5098: LD_VAR 0 4
5102: ARRAY
5103: PPUSH
5104: LD_INT 0
5106: PPUSH
5107: CALL_OW 49
// end ;
5111: GO 4956
5113: POP
5114: POP
// end ;
5115: GO 4938
5117: POP
5118: POP
// end ;
5119: LD_VAR 0 1
5123: RET
// export function PrepareApeman ; var bonus ; begin
5124: LD_INT 0
5126: PPUSH
5127: PPUSH
// uc_side := 0 ;
5128: LD_ADDR_OWVAR 20
5132: PUSH
5133: LD_INT 0
5135: ST_TO_ADDR
// uc_nation := 0 ;
5136: LD_ADDR_OWVAR 21
5140: PUSH
5141: LD_INT 0
5143: ST_TO_ADDR
// InitHc ;
5144: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
5148: LD_ADDR_VAR 0 2
5152: PUSH
5153: LD_INT 1
5155: NEG
5156: PUSH
5157: LD_INT 0
5159: PUSH
5160: LD_INT 1
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: LIST
5167: PUSH
5168: LD_OWVAR 1
5172: PUSH
5173: LD_INT 3
5175: MOD
5176: PUSH
5177: LD_INT 1
5179: PLUS
5180: ARRAY
5181: ST_TO_ADDR
// hc_class := class_apeman ;
5182: LD_ADDR_OWVAR 28
5186: PUSH
5187: LD_INT 12
5189: ST_TO_ADDR
// hc_gallery :=  ;
5190: LD_ADDR_OWVAR 33
5194: PUSH
5195: LD_STRING 
5197: ST_TO_ADDR
// hc_name :=  ;
5198: LD_ADDR_OWVAR 26
5202: PUSH
5203: LD_STRING 
5205: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
5206: LD_ADDR_OWVAR 31
5210: PUSH
5211: LD_EXP 52
5215: PUSH
5216: LD_VAR 0 2
5220: PLUS
5221: PUSH
5222: LD_EXP 52
5226: PUSH
5227: LD_VAR 0 2
5231: PLUS
5232: PUSH
5233: LD_EXP 52
5237: PUSH
5238: LD_VAR 0 2
5242: PLUS
5243: PUSH
5244: LD_EXP 52
5248: PUSH
5249: LD_VAR 0 2
5253: PLUS
5254: PUSH
5255: EMPTY
5256: LIST
5257: LIST
5258: LIST
5259: LIST
5260: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
5261: LD_ADDR_OWVAR 35
5265: PUSH
5266: LD_INT 10
5268: PUSH
5269: LD_VAR 0 2
5273: MUL
5274: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5275: LD_ADDR_OWVAR 29
5279: PUSH
5280: LD_INT 12
5282: PUSH
5283: LD_INT 10
5285: PUSH
5286: EMPTY
5287: LIST
5288: LIST
5289: ST_TO_ADDR
// result := CreateHuman ;
5290: LD_ADDR_VAR 0 1
5294: PUSH
5295: CALL_OW 44
5299: ST_TO_ADDR
// end ;
5300: LD_VAR 0 1
5304: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
5305: LD_INT 0
5307: PPUSH
5308: PPUSH
5309: PPUSH
// if not ape then
5310: LD_VAR 0 1
5314: NOT
5315: IFFALSE 5319
// exit ;
5317: GO 5444
// side := GetSide ( ape ) ;
5319: LD_ADDR_VAR 0 3
5323: PUSH
5324: LD_VAR 0 1
5328: PPUSH
5329: CALL_OW 255
5333: ST_TO_ADDR
// if not side then
5334: LD_VAR 0 3
5338: NOT
5339: IFFALSE 5393
// begin for i = 1 to apemanPos do
5341: LD_ADDR_VAR 0 4
5345: PUSH
5346: DOUBLE
5347: LD_INT 1
5349: DEC
5350: ST_TO_ADDR
5351: LD_EXP 50
5355: PUSH
5356: FOR_TO
5357: IFFALSE 5391
// if ape in apemanPos [ i ] then
5359: LD_VAR 0 1
5363: PUSH
5364: LD_EXP 50
5368: PUSH
5369: LD_VAR 0 4
5373: ARRAY
5374: IN
5375: IFFALSE 5389
// begin side := i ;
5377: LD_ADDR_VAR 0 3
5381: PUSH
5382: LD_VAR 0 4
5386: ST_TO_ADDR
// break ;
5387: GO 5391
// end ;
5389: GO 5356
5391: POP
5392: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
5393: LD_ADDR_EXP 50
5397: PUSH
5398: LD_EXP 50
5402: PPUSH
5403: LD_VAR 0 3
5407: PPUSH
5408: LD_EXP 50
5412: PUSH
5413: LD_VAR 0 3
5417: ARRAY
5418: PUSH
5419: LD_VAR 0 1
5423: DIFF
5424: PPUSH
5425: CALL_OW 1
5429: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
5430: LD_ADDR_EXP 47
5434: PUSH
5435: LD_EXP 47
5439: PUSH
5440: LD_INT 1
5442: MINUS
5443: ST_TO_ADDR
// end ; end_of_file
5444: LD_VAR 0 2
5448: RET
// var shipment , tictac ; export function init_shipments ; begin
5449: LD_INT 0
5451: PPUSH
// shipment := Rand ( 0 , 3 ) ;
5452: LD_ADDR_LOC 4
5456: PUSH
5457: LD_INT 0
5459: PPUSH
5460: LD_INT 3
5462: PPUSH
5463: CALL_OW 12
5467: ST_TO_ADDR
// tictac := 0 ;
5468: LD_ADDR_LOC 5
5472: PUSH
5473: LD_INT 0
5475: ST_TO_ADDR
// end ;
5476: LD_VAR 0 1
5480: RET
// every 0 0$5 + 0 0$1.1 do var d ;
5481: GO 5483
5483: DISABLE
5484: LD_INT 0
5486: PPUSH
// begin case tick of 1 .. 1 1$0 :
5487: LD_OWVAR 1
5491: PUSH
5492: LD_INT 1
5494: DOUBLE
5495: GREATEREQUAL
5496: IFFALSE 5504
5498: LD_INT 2100
5500: DOUBLE
5501: LESSEQUAL
5502: IFTRUE 5506
5504: GO 5517
5506: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5507: LD_ADDR_VAR 0 1
5511: PUSH
5512: LD_INT 150
5514: ST_TO_ADDR
5515: GO 5700
5517: LD_INT 2100
5519: PUSH
5520: LD_INT 1
5522: PLUS
5523: DOUBLE
5524: GREATEREQUAL
5525: IFFALSE 5533
5527: LD_INT 10500
5529: DOUBLE
5530: LESSEQUAL
5531: IFTRUE 5535
5533: GO 5546
5535: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5536: LD_ADDR_VAR 0 1
5540: PUSH
5541: LD_INT 100
5543: ST_TO_ADDR
5544: GO 5700
5546: LD_INT 10500
5548: PUSH
5549: LD_INT 1
5551: PLUS
5552: DOUBLE
5553: GREATEREQUAL
5554: IFFALSE 5562
5556: LD_INT 21000
5558: DOUBLE
5559: LESSEQUAL
5560: IFTRUE 5564
5562: GO 5575
5564: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5565: LD_ADDR_VAR 0 1
5569: PUSH
5570: LD_INT 90
5572: ST_TO_ADDR
5573: GO 5700
5575: LD_INT 21000
5577: PUSH
5578: LD_INT 1
5580: PLUS
5581: DOUBLE
5582: GREATEREQUAL
5583: IFFALSE 5591
5585: LD_INT 42000
5587: DOUBLE
5588: LESSEQUAL
5589: IFTRUE 5593
5591: GO 5604
5593: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5594: LD_ADDR_VAR 0 1
5598: PUSH
5599: LD_INT 70
5601: ST_TO_ADDR
5602: GO 5700
5604: LD_INT 42000
5606: PUSH
5607: LD_INT 1
5609: PLUS
5610: DOUBLE
5611: GREATEREQUAL
5612: IFFALSE 5620
5614: LD_INT 63000
5616: DOUBLE
5617: LESSEQUAL
5618: IFTRUE 5622
5620: GO 5633
5622: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5623: LD_ADDR_VAR 0 1
5627: PUSH
5628: LD_INT 60
5630: ST_TO_ADDR
5631: GO 5700
5633: LD_INT 63000
5635: PUSH
5636: LD_INT 1
5638: PLUS
5639: DOUBLE
5640: GREATEREQUAL
5641: IFFALSE 5649
5643: LD_INT 105000
5645: DOUBLE
5646: LESSEQUAL
5647: IFTRUE 5651
5649: GO 5662
5651: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5652: LD_ADDR_VAR 0 1
5656: PUSH
5657: LD_INT 35
5659: ST_TO_ADDR
5660: GO 5700
5662: LD_INT 105000
5664: PUSH
5665: LD_INT 1
5667: PLUS
5668: DOUBLE
5669: GREATEREQUAL
5670: IFFALSE 5678
5672: LD_INT 630000
5674: DOUBLE
5675: LESSEQUAL
5676: IFTRUE 5680
5678: GO 5691
5680: POP
// d := 20 ; else
5681: LD_ADDR_VAR 0 1
5685: PUSH
5686: LD_INT 20
5688: ST_TO_ADDR
5689: GO 5700
5691: POP
// d := 0 ; end ;
5692: LD_ADDR_VAR 0 1
5696: PUSH
5697: LD_INT 0
5699: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5700: LD_INT 1
5702: PPUSH
5703: LD_INT 10000
5705: PPUSH
5706: CALL_OW 12
5710: PUSH
5711: LD_VAR 0 1
5715: PUSH
5716: LD_EXP 21
5720: MUL
5721: LESSEQUAL
5722: IFFALSE 5798
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5724: LD_INT 1
5726: PPUSH
5727: LD_INT 140
5729: PPUSH
5730: CALL_OW 12
5734: PPUSH
5735: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
5739: LD_ADDR_LOC 4
5743: PUSH
5744: LD_LOC 4
5748: PUSH
5749: LD_INT 1
5751: PLUS
5752: PUSH
5753: LD_INT 4
5755: MOD
5756: ST_TO_ADDR
// if GetResourceArea ( nw + shipment , mat_cans ) < 50 then
5757: LD_INT 12
5759: PUSH
5760: LD_LOC 4
5764: PLUS
5765: PPUSH
5766: LD_INT 1
5768: PPUSH
5769: CALL_OW 287
5773: PUSH
5774: LD_INT 50
5776: LESS
5777: IFFALSE 5798
// CreateCratesArea ( 5 , nw + shipment , true ) ;
5779: LD_INT 5
5781: PPUSH
5782: LD_INT 12
5784: PUSH
5785: LD_LOC 4
5789: PLUS
5790: PPUSH
5791: LD_INT 1
5793: PPUSH
5794: CALL_OW 55
// end ; enable ;
5798: ENABLE
// end ;
5799: PPOPN 1
5801: END
// every 0 0$10 trigger TICK > ( ( 3 3$0 * tictac ) + tictac * ( 1 1$30 - shipments_density * ( 0 0$2 ) ) ) do var i , amount ;
5802: LD_OWVAR 1
5806: PUSH
5807: LD_INT 6300
5809: PUSH
5810: LD_LOC 5
5814: MUL
5815: PUSH
5816: LD_LOC 5
5820: PUSH
5821: LD_INT 3150
5823: PUSH
5824: LD_EXP 21
5828: PUSH
5829: LD_INT 70
5831: MUL
5832: MINUS
5833: MUL
5834: PLUS
5835: GREATER
5836: IFFALSE 5939
5838: GO 5840
5840: DISABLE
5841: LD_INT 0
5843: PPUSH
5844: PPUSH
// begin tictac := tictac + 1 ;
5845: LD_ADDR_LOC 5
5849: PUSH
5850: LD_LOC 5
5854: PUSH
5855: LD_INT 1
5857: PLUS
5858: ST_TO_ADDR
// amount := Rand ( 3 , 5 ) ;
5859: LD_ADDR_VAR 0 2
5863: PUSH
5864: LD_INT 3
5866: PPUSH
5867: LD_INT 5
5869: PPUSH
5870: CALL_OW 12
5874: ST_TO_ADDR
// for i = 0 to 3 do
5875: LD_ADDR_VAR 0 1
5879: PUSH
5880: DOUBLE
5881: LD_INT 0
5883: DEC
5884: ST_TO_ADDR
5885: LD_INT 3
5887: PUSH
5888: FOR_TO
5889: IFFALSE 5936
// if GetResourceArea ( Base1 + i , mat_cans ) < 20 then
5891: LD_INT 1
5893: PUSH
5894: LD_VAR 0 1
5898: PLUS
5899: PPUSH
5900: LD_INT 1
5902: PPUSH
5903: CALL_OW 287
5907: PUSH
5908: LD_INT 20
5910: LESS
5911: IFFALSE 5934
// CreateCratesArea ( amount , Base1 + i , true ) ;
5913: LD_VAR 0 2
5917: PPUSH
5918: LD_INT 1
5920: PUSH
5921: LD_VAR 0 1
5925: PLUS
5926: PPUSH
5927: LD_INT 1
5929: PPUSH
5930: CALL_OW 55
5934: GO 5888
5936: POP
5937: POP
// enable ;
5938: ENABLE
// end ; end_of_file
5939: PPOPN 2
5941: END
// var respawn_queue ; export function init_respawn ; begin
5942: LD_INT 0
5944: PPUSH
// if not def_people_respawning then
5945: LD_EXP 12
5949: NOT
5950: IFFALSE 5954
// exit ;
5952: GO 5996
// respawn_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5954: LD_ADDR_LOC 6
5958: PUSH
5959: LD_INT 0
5961: PUSH
5962: LD_INT 0
5964: PUSH
5965: LD_INT 0
5967: PUSH
5968: LD_INT 0
5970: PUSH
5971: LD_INT 0
5973: PUSH
5974: LD_INT 0
5976: PUSH
5977: LD_INT 0
5979: PUSH
5980: LD_INT 0
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: ST_TO_ADDR
// enable ( 10 ) ;
5993: LD_INT 10
5995: ENABLE_MARKED
// end ;
5996: LD_VAR 0 1
6000: RET
// every 0 0$10 marked 10 do var un , list , time , side ;
6001: GO 6003
6003: DISABLE
6004: LD_INT 0
6006: PPUSH
6007: PPUSH
6008: PPUSH
6009: PPUSH
// begin for side = 1 to Side_Positions do
6010: LD_ADDR_VAR 0 4
6014: PUSH
6015: DOUBLE
6016: LD_INT 1
6018: DEC
6019: ST_TO_ADDR
6020: LD_EXP 34
6024: PUSH
6025: FOR_TO
6026: IFFALSE 6192
// if Side_Positions [ side ] then
6028: LD_EXP 34
6032: PUSH
6033: LD_VAR 0 4
6037: ARRAY
6038: IFFALSE 6190
// begin list := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6040: LD_ADDR_VAR 0 2
6044: PUSH
6045: LD_INT 22
6047: PUSH
6048: LD_VAR 0 4
6052: PUSH
6053: EMPTY
6054: LIST
6055: LIST
6056: PUSH
6057: LD_INT 21
6059: PUSH
6060: LD_INT 1
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: PUSH
6067: LD_INT 3
6069: PUSH
6070: LD_INT 23
6072: PUSH
6073: LD_INT 0
6075: PUSH
6076: EMPTY
6077: LIST
6078: LIST
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: PPUSH
6086: CALL_OW 69
6090: ST_TO_ADDR
// if ( list < number_of_people ) and ( not respawn_queue [ side ] ) then
6091: LD_VAR 0 2
6095: PUSH
6096: LD_EXP 16
6100: LESS
6101: PUSH
6102: LD_LOC 6
6106: PUSH
6107: LD_VAR 0 4
6111: ARRAY
6112: NOT
6113: AND
6114: IFFALSE 6130
// set_queue ( side , TICK ) ;
6116: LD_VAR 0 4
6120: PPUSH
6121: LD_OWVAR 1
6125: PPUSH
6126: CALL 6429 0 2
// time := TICK - respawn_queue [ side ] ;
6130: LD_ADDR_VAR 0 3
6134: PUSH
6135: LD_OWVAR 1
6139: PUSH
6140: LD_LOC 6
6144: PUSH
6145: LD_VAR 0 4
6149: ARRAY
6150: MINUS
6151: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6152: LD_LOC 6
6156: PUSH
6157: LD_VAR 0 4
6161: ARRAY
6162: PUSH
6163: LD_VAR 0 3
6167: PUSH
6168: LD_EXP 24
6172: GREATER
6173: AND
6174: IFFALSE 6190
// respawn_character ( side , time ) ;
6176: LD_VAR 0 4
6180: PPUSH
6181: LD_VAR 0 3
6185: PPUSH
6186: CALL 6198 0 2
// end ;
6190: GO 6025
6192: POP
6193: POP
// enable ;
6194: ENABLE
// end ;
6195: PPOPN 4
6197: END
// function respawn_character ( side , time ) ; var dep ; begin
6198: LD_INT 0
6200: PPUSH
6201: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6202: LD_INT 0
6204: PPUSH
6205: LD_INT 1
6207: PPUSH
6208: CALL_OW 12
6212: PUSH
6213: LD_VAR 0 2
6217: PUSH
6218: LD_EXP 25
6222: LESS
6223: AND
6224: IFFALSE 6228
// exit ;
6226: GO 6424
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6228: LD_ADDR_VAR 0 4
6232: PUSH
6233: LD_INT 22
6235: PUSH
6236: LD_VAR 0 1
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: PUSH
6245: LD_INT 2
6247: PUSH
6248: LD_INT 30
6250: PUSH
6251: LD_INT 0
6253: PUSH
6254: EMPTY
6255: LIST
6256: LIST
6257: PUSH
6258: LD_INT 30
6260: PUSH
6261: LD_INT 1
6263: PUSH
6264: EMPTY
6265: LIST
6266: LIST
6267: PUSH
6268: EMPTY
6269: LIST
6270: LIST
6271: LIST
6272: PUSH
6273: LD_INT 50
6275: PUSH
6276: EMPTY
6277: LIST
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: LIST
6283: PPUSH
6284: CALL_OW 69
6288: ST_TO_ADDR
// if not dep then
6289: LD_VAR 0 4
6293: NOT
6294: IFFALSE 6300
// exit else
6296: GO 6424
6298: GO 6324
// dep := dep [ Rand ( 1 , dep ) ] ;
6300: LD_ADDR_VAR 0 4
6304: PUSH
6305: LD_VAR 0 4
6309: PUSH
6310: LD_INT 1
6312: PPUSH
6313: LD_VAR 0 4
6317: PPUSH
6318: CALL_OW 12
6322: ARRAY
6323: ST_TO_ADDR
// uc_side := side ;
6324: LD_ADDR_OWVAR 20
6328: PUSH
6329: LD_VAR 0 1
6333: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6334: LD_ADDR_OWVAR 21
6338: PUSH
6339: LD_EXP 35
6343: PUSH
6344: LD_VAR 0 1
6348: ARRAY
6349: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , initial_level div 2 ) ;
6350: LD_INT 0
6352: PPUSH
6353: LD_INT 0
6355: PPUSH
6356: LD_EXP 17
6360: PUSH
6361: LD_INT 2
6363: DIV
6364: PPUSH
6365: CALL_OW 380
// hc_importance := 0 ;
6369: LD_ADDR_OWVAR 32
6373: PUSH
6374: LD_INT 0
6376: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
6377: CALL_OW 44
6381: PPUSH
6382: LD_VAR 0 4
6386: PPUSH
6387: CALL_OW 250
6391: PPUSH
6392: LD_VAR 0 4
6396: PPUSH
6397: CALL_OW 251
6401: PPUSH
6402: LD_INT 10
6404: PPUSH
6405: LD_INT 1
6407: PPUSH
6408: CALL_OW 50
// set_queue ( side , 0 ) ;
6412: LD_VAR 0 1
6416: PPUSH
6417: LD_INT 0
6419: PPUSH
6420: CALL 6429 0 2
// end ;
6424: LD_VAR 0 3
6428: RET
// function set_queue ( side , time ) ; begin
6429: LD_INT 0
6431: PPUSH
// respawn_queue := Delete ( respawn_queue , side ) ;
6432: LD_ADDR_LOC 6
6436: PUSH
6437: LD_LOC 6
6441: PPUSH
6442: LD_VAR 0 1
6446: PPUSH
6447: CALL_OW 3
6451: ST_TO_ADDR
// respawn_queue := Insert ( respawn_queue , side , time ) ;
6452: LD_ADDR_LOC 6
6456: PUSH
6457: LD_LOC 6
6461: PPUSH
6462: LD_VAR 0 1
6466: PPUSH
6467: LD_VAR 0 2
6471: PPUSH
6472: CALL_OW 2
6476: ST_TO_ADDR
// end ; end_of_file
6477: LD_VAR 0 3
6481: RET
// var strength ; function Update_Flags ; var un ; begin
6482: LD_INT 0
6484: PPUSH
6485: PPUSH
// for un in battle_flags_id do
6486: LD_ADDR_VAR 0 2
6490: PUSH
6491: LD_EXP 45
6495: PUSH
6496: FOR_IN
6497: IFFALSE 6572
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6499: LD_VAR 0 2
6503: PPUSH
6504: LD_INT 1
6506: PUSH
6507: LD_LOC 7
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: PUSH
6516: LD_INT 2
6518: PUSH
6519: LD_LOC 7
6523: PUSH
6524: LD_INT 2
6526: DIV
6527: PUSH
6528: EMPTY
6529: LIST
6530: LIST
6531: PUSH
6532: LD_INT 3
6534: PUSH
6535: LD_LOC 7
6539: PUSH
6540: LD_INT 5
6542: DIV
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PUSH
6548: LD_INT 20
6550: PUSH
6551: LD_LOC 7
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: PUSH
6560: EMPTY
6561: LIST
6562: LIST
6563: LIST
6564: LIST
6565: PPUSH
6566: CALL_OW 423
6570: GO 6496
6572: POP
6573: POP
// end ;
6574: LD_VAR 0 1
6578: RET
// every 0 0$0.1 do var un ;
6579: GO 6581
6581: DISABLE
6582: LD_INT 0
6584: PPUSH
// begin if not def_morale_flags then
6585: LD_EXP 9
6589: NOT
6590: IFFALSE 6594
// exit ;
6592: GO 6671
// if not morale_decreasing_time then
6594: LD_EXP 46
6598: NOT
6599: IFFALSE 6603
// exit ;
6601: GO 6671
// strength = 100 ;
6603: LD_ADDR_LOC 7
6607: PUSH
6608: LD_INT 100
6610: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
6611: LD_EXP 46
6615: PPUSH
6616: CALL_OW 67
// strength := strength - 1 ;
6620: LD_ADDR_LOC 7
6624: PUSH
6625: LD_LOC 7
6629: PUSH
6630: LD_INT 1
6632: MINUS
6633: ST_TO_ADDR
// Update_Flags ;
6634: CALL 6482 0 0
// until not strength ;
6638: LD_LOC 7
6642: NOT
6643: IFFALSE 6611
// for un in battle_flags_id do
6645: LD_ADDR_VAR 0 1
6649: PUSH
6650: LD_EXP 45
6654: PUSH
6655: FOR_IN
6656: IFFALSE 6669
// KillBattleFlag ( un ) ;
6658: LD_VAR 0 1
6662: PPUSH
6663: CALL_OW 419
6667: GO 6655
6669: POP
6670: POP
// end ; end_of_file
6671: PPOPN 1
6673: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
6674: LD_INT 0
6676: PPUSH
6677: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
6678: LD_ADDR_VAR 0 2
6682: PUSH
6683: LD_STRING #Multi1x1-Time
6685: PUSH
6686: LD_OWVAR 1
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: ST_TO_ADDR
// if WaitServerStrings then
6695: LD_EXP 55
6699: IFFALSE 6717
// AllStrings = AllStrings ^ WaitServerStrings ;
6701: LD_ADDR_VAR 0 2
6705: PUSH
6706: LD_VAR 0 2
6710: PUSH
6711: LD_EXP 55
6715: ADD
6716: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
6717: LD_INT 0
6719: PUSH
6720: LD_EXP 22
6724: PUSH
6725: LD_OWVAR 1
6729: MINUS
6730: LESSEQUAL
6731: IFFALSE 6762
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
6733: LD_ADDR_VAR 0 2
6737: PUSH
6738: LD_VAR 0 2
6742: PUSH
6743: LD_STRING #allowedsibbomb
6745: PUSH
6746: LD_EXP 22
6750: PUSH
6751: LD_OWVAR 1
6755: MINUS
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: ADD
6761: ST_TO_ADDR
// if ( ExtraStrings ) then
6762: LD_EXP 54
6766: IFFALSE 6788
// AllStrings := AllStrings ^  ^ ExtraStrings ;
6768: LD_ADDR_VAR 0 2
6772: PUSH
6773: LD_VAR 0 2
6777: PUSH
6778: LD_STRING 
6780: ADD
6781: PUSH
6782: LD_EXP 54
6786: ADD
6787: ST_TO_ADDR
// Display_Strings := AllStrings ;
6788: LD_ADDR_OWVAR 47
6792: PUSH
6793: LD_VAR 0 2
6797: ST_TO_ADDR
// end ;
6798: LD_VAR 0 1
6802: RET
// every 0 0$1 do
6803: GO 6805
6805: DISABLE
// begin ShowTimer ;
6806: CALL 6674 0 0
// enable ;
6810: ENABLE
// end ; end_of_file
6811: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6812: LD_VAR 0 1
6816: PPUSH
6817: CALL_OW 266
6821: PUSH
6822: LD_INT 0
6824: PUSH
6825: LD_INT 1
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: IN
6832: IFFALSE 6857
// SetBName ( b , @ & GetSide ( b ) ) ;
6834: LD_VAR 0 1
6838: PPUSH
6839: LD_STRING @
6841: PUSH
6842: LD_VAR 0 1
6846: PPUSH
6847: CALL_OW 255
6851: STR
6852: PPUSH
6853: CALL_OW 500
// end ;
6857: PPOPN 2
6859: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6860: LD_VAR 0 1
6864: PPUSH
6865: CALL_OW 266
6869: PUSH
6870: LD_INT 0
6872: PUSH
6873: LD_INT 1
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: IN
6880: IFFALSE 6905
// SetBName ( b , @ & GetSide ( b ) ) ;
6882: LD_VAR 0 1
6886: PPUSH
6887: LD_STRING @
6889: PUSH
6890: LD_VAR 0 1
6894: PPUSH
6895: CALL_OW 255
6899: STR
6900: PPUSH
6901: CALL_OW 500
// end ;
6905: PPOPN 3
6907: END
// on VehicleConstructed ( veh , fac ) do var side ;
6908: LD_INT 0
6910: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6911: LD_VAR 0 1
6915: PPUSH
6916: CALL_OW 263
6920: PUSH
6921: LD_INT 5
6923: EQUAL
6924: IFFALSE 7066
// begin side := GetSide ( veh ) ;
6926: LD_ADDR_VAR 0 3
6930: PUSH
6931: LD_VAR 0 1
6935: PPUSH
6936: CALL_OW 255
6940: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6941: LD_ADDR_EXP 50
6945: PUSH
6946: LD_EXP 50
6950: PPUSH
6951: LD_VAR 0 3
6955: PPUSH
6956: LD_EXP 50
6960: PUSH
6961: LD_VAR 0 3
6965: ARRAY
6966: PPUSH
6967: LD_INT 52
6969: PUSH
6970: EMPTY
6971: LIST
6972: PPUSH
6973: CALL_OW 72
6977: PUSH
6978: LD_INT 22
6980: PUSH
6981: LD_VAR 0 3
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: LD_INT 2
6992: PUSH
6993: LD_INT 33
6995: PUSH
6996: LD_INT 5
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: LD_INT 25
7005: PUSH
7006: LD_INT 12
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: PUSH
7013: LD_INT 25
7015: PUSH
7016: LD_INT 15
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: PUSH
7023: LD_INT 25
7025: PUSH
7026: LD_INT 16
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PUSH
7033: LD_INT 25
7035: PUSH
7036: LD_INT 17
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: PPUSH
7055: CALL_OW 69
7059: UNION
7060: PPUSH
7061: CALL_OW 1
7065: ST_TO_ADDR
// end ; end ;
7066: PPOPN 3
7068: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7069: LD_INT 0
7071: PPUSH
7072: PPUSH
7073: PPUSH
7074: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7075: LD_VAR 0 1
7079: PPUSH
7080: CALL_OW 257
7084: PUSH
7085: LD_INT 12
7087: PUSH
7088: LD_INT 15
7090: PUSH
7091: LD_INT 17
7093: PUSH
7094: LD_INT 16
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: IN
7103: PUSH
7104: LD_VAR 0 1
7108: PPUSH
7109: CALL_OW 263
7113: PUSH
7114: LD_INT 5
7116: EQUAL
7117: OR
7118: IFFALSE 7129
// ApeKilled ( j ) ;
7120: LD_VAR 0 1
7124: PPUSH
7125: CALL 5305 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7129: LD_VAR 0 1
7133: PPUSH
7134: CALL_OW 266
7138: PUSH
7139: LD_INT 0
7141: PUSH
7142: LD_INT 1
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: IN
7149: IFFALSE 7231
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7151: LD_ADDR_VAR 0 4
7155: PUSH
7156: LD_EXP 34
7160: PUSH
7161: LD_VAR 0 1
7165: PPUSH
7166: CALL_OW 255
7170: ARRAY
7171: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7172: LD_ADDR_VAR 0 2
7176: PUSH
7177: LD_EXP 41
7181: PUSH
7182: LD_VAR 0 4
7186: ARRAY
7187: PUSH
7188: LD_INT 1
7190: ARRAY
7191: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7192: LD_ADDR_VAR 0 3
7196: PUSH
7197: LD_EXP 41
7201: PUSH
7202: LD_VAR 0 4
7206: ARRAY
7207: PUSH
7208: LD_INT 2
7210: ARRAY
7211: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7212: LD_VAR 0 2
7216: PPUSH
7217: LD_VAR 0 3
7221: PPUSH
7222: CALL_OW 420
7226: PPUSH
7227: CALL_OW 419
// end ; end ;
7231: PPOPN 5
7233: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7234: LD_VAR 0 1
7238: PPUSH
7239: LD_VAR 0 2
7243: PPUSH
7244: LD_VAR 0 3
7248: PPUSH
7249: LD_OWVAR 2
7253: PPUSH
7254: CALL 7261 0 4
7258: PPOPN 3
7260: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
7261: LD_INT 0
7263: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
7264: LD_VAR 0 1
7268: PPUSH
7269: CALL_OW 255
7273: PUSH
7274: LD_VAR 0 4
7278: EQUAL
7279: IFFALSE 7298
// begin SetAchievement ( ACH_RAD ) ;
7281: LD_STRING ACH_RAD
7283: PPUSH
7284: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
7288: LD_STRING ACH_NL
7290: PPUSH
7291: LD_INT 1
7293: PPUSH
7294: CALL_OW 564
// end end ;
7298: LD_VAR 0 5
7302: RET
// export function SA_Win ( side ) ; begin
7303: LD_INT 0
7305: PPUSH
// case side of 1 :
7306: LD_VAR 0 1
7310: PUSH
7311: LD_INT 1
7313: DOUBLE
7314: EQUAL
7315: IFTRUE 7319
7317: GO 7332
7319: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
7320: LD_STRING ACH_AH
7322: PPUSH
7323: LD_INT 1
7325: PPUSH
7326: CALL_OW 564
7330: GO 7495
7332: LD_INT 2
7334: DOUBLE
7335: EQUAL
7336: IFTRUE 7340
7338: GO 7353
7340: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
7341: LD_STRING ACH_E
7343: PPUSH
7344: LD_INT 1
7346: PPUSH
7347: CALL_OW 564
7351: GO 7495
7353: LD_INT 3
7355: DOUBLE
7356: EQUAL
7357: IFTRUE 7361
7359: GO 7374
7361: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
7362: LD_STRING ACH_OOL
7364: PPUSH
7365: LD_INT 1
7367: PPUSH
7368: CALL_OW 564
7372: GO 7495
7374: LD_INT 1
7376: PUSH
7377: LD_INT 2
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: DOUBLE
7384: EQUAL
7385: IFTRUE 7389
7387: GO 7414
7389: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7390: LD_STRING ACH_AH
7392: PPUSH
7393: LD_REAL  5.00000000000000E-0001
7396: PPUSH
7397: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7401: LD_STRING ACH_E
7403: PPUSH
7404: LD_REAL  5.00000000000000E-0001
7407: PPUSH
7408: CALL_OW 564
// end ; [ 2 , 3 ] :
7412: GO 7495
7414: LD_INT 2
7416: PUSH
7417: LD_INT 3
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: DOUBLE
7424: EQUAL
7425: IFTRUE 7429
7427: GO 7454
7429: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
7430: LD_STRING ACH_OOL
7432: PPUSH
7433: LD_REAL  5.00000000000000E-0001
7436: PPUSH
7437: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7441: LD_STRING ACH_E
7443: PPUSH
7444: LD_REAL  5.00000000000000E-0001
7447: PPUSH
7448: CALL_OW 564
// end ; [ 3 , 1 ] :
7452: GO 7495
7454: LD_INT 3
7456: PUSH
7457: LD_INT 1
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: DOUBLE
7464: EQUAL
7465: IFTRUE 7469
7467: GO 7494
7469: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7470: LD_STRING ACH_AH
7472: PPUSH
7473: LD_REAL  5.00000000000000E-0001
7476: PPUSH
7477: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
7481: LD_STRING ACH_OOL
7483: PPUSH
7484: LD_REAL  5.00000000000000E-0001
7487: PPUSH
7488: CALL_OW 564
// end ; end ;
7492: GO 7495
7494: POP
// end ; end_of_file
7495: LD_VAR 0 2
7499: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
7500: LD_INT 0
7502: PPUSH
7503: PPUSH
// enable ( 98 ) ;
7504: LD_INT 98
7506: ENABLE_MARKED
// GameEnded = false ;
7507: LD_ADDR_LOC 9
7511: PUSH
7512: LD_INT 0
7514: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7515: LD_ADDR_LOC 8
7519: PUSH
7520: LD_INT 0
7522: PUSH
7523: LD_INT 0
7525: PUSH
7526: LD_INT 0
7528: PUSH
7529: LD_INT 0
7531: PUSH
7532: LD_INT 0
7534: PUSH
7535: LD_INT 0
7537: PUSH
7538: LD_INT 0
7540: PUSH
7541: LD_INT 0
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: ST_TO_ADDR
// unfoged = false ;
7554: LD_ADDR_LOC 10
7558: PUSH
7559: LD_INT 0
7561: ST_TO_ADDR
// for i = 1 to side_positions do
7562: LD_ADDR_VAR 0 2
7566: PUSH
7567: DOUBLE
7568: LD_INT 1
7570: DEC
7571: ST_TO_ADDR
7572: LD_EXP 34
7576: PUSH
7577: FOR_TO
7578: IFFALSE 7618
// if not side_positions [ i ] then
7580: LD_EXP 34
7584: PUSH
7585: LD_VAR 0 2
7589: ARRAY
7590: NOT
7591: IFFALSE 7616
// defaited = replace ( defaited , i , true ) ;
7593: LD_ADDR_LOC 8
7597: PUSH
7598: LD_LOC 8
7602: PPUSH
7603: LD_VAR 0 2
7607: PPUSH
7608: LD_INT 1
7610: PPUSH
7611: CALL_OW 1
7615: ST_TO_ADDR
7616: GO 7577
7618: POP
7619: POP
// end ;
7620: LD_VAR 0 1
7624: RET
// function CanWinLoose ; begin
7625: LD_INT 0
7627: PPUSH
// Result := true ;
7628: LD_ADDR_VAR 0 1
7632: PUSH
7633: LD_INT 1
7635: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
7636: CALL_OW 518
7640: PUSH
7641: CALL_OW 519
7645: PUSH
7646: LD_INT 0
7648: GREATER
7649: AND
7650: IFFALSE 7660
// Result := false ;
7652: LD_ADDR_VAR 0 1
7656: PUSH
7657: LD_INT 0
7659: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7660: CALL_OW 531
7664: PUSH
7665: CALL_OW 519
7669: PUSH
7670: LD_INT 1
7672: GREATER
7673: AND
7674: IFFALSE 7684
// Result := false ;
7676: LD_ADDR_VAR 0 1
7680: PUSH
7681: LD_INT 0
7683: ST_TO_ADDR
// end ;
7684: LD_VAR 0 1
7688: RET
// export function HasPower ( i ) ; var k , h ; begin
7689: LD_INT 0
7691: PPUSH
7692: PPUSH
7693: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
7694: LD_VAR 0 1
7698: PPUSH
7699: CALL_OW 108
7703: NOT
7704: PUSH
7705: LD_EXP 39
7709: PUSH
7710: LD_VAR 0 1
7714: ARRAY
7715: NOT
7716: AND
7717: PUSH
7718: LD_OWVAR 4
7722: AND
7723: IFFALSE 7735
// begin result = false ;
7725: LD_ADDR_VAR 0 2
7729: PUSH
7730: LD_INT 0
7732: ST_TO_ADDR
// end else
7733: GO 8030
// case def_win_rules of 0 :
7735: LD_EXP 26
7739: PUSH
7740: LD_INT 0
7742: DOUBLE
7743: EQUAL
7744: IFTRUE 7748
7746: GO 7911
7748: POP
// if def_people_respawning then
7749: LD_EXP 12
7753: IFFALSE 7844
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
7755: LD_ADDR_VAR 0 2
7759: PUSH
7760: LD_INT 22
7762: PUSH
7763: LD_VAR 0 1
7767: PUSH
7768: EMPTY
7769: LIST
7770: LIST
7771: PUSH
7772: LD_INT 2
7774: PUSH
7775: LD_INT 21
7777: PUSH
7778: LD_INT 1
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: PUSH
7785: LD_INT 33
7787: PUSH
7788: LD_INT 3
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: PUSH
7795: LD_INT 33
7797: PUSH
7798: LD_INT 5
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PUSH
7805: LD_INT 30
7807: PUSH
7808: LD_INT 0
7810: PUSH
7811: EMPTY
7812: LIST
7813: LIST
7814: PUSH
7815: LD_INT 30
7817: PUSH
7818: LD_INT 1
7820: PUSH
7821: EMPTY
7822: LIST
7823: LIST
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: PUSH
7833: EMPTY
7834: LIST
7835: LIST
7836: PPUSH
7837: CALL_OW 69
7841: ST_TO_ADDR
7842: GO 7909
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
7844: LD_ADDR_VAR 0 2
7848: PUSH
7849: LD_INT 22
7851: PUSH
7852: LD_VAR 0 1
7856: PUSH
7857: EMPTY
7858: LIST
7859: LIST
7860: PUSH
7861: LD_INT 2
7863: PUSH
7864: LD_INT 21
7866: PUSH
7867: LD_INT 1
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: PUSH
7874: LD_INT 33
7876: PUSH
7877: LD_INT 3
7879: PUSH
7880: EMPTY
7881: LIST
7882: LIST
7883: PUSH
7884: LD_INT 33
7886: PUSH
7887: LD_INT 5
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PPUSH
7904: CALL_OW 69
7908: ST_TO_ADDR
7909: GO 8030
7911: LD_INT 1
7913: DOUBLE
7914: EQUAL
7915: IFTRUE 7919
7917: GO 7958
7919: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
7920: LD_ADDR_VAR 0 2
7924: PUSH
7925: LD_INT 22
7927: PUSH
7928: LD_VAR 0 1
7932: PUSH
7933: EMPTY
7934: LIST
7935: LIST
7936: PUSH
7937: LD_INT 21
7939: PUSH
7940: LD_INT 1
7942: PUSH
7943: EMPTY
7944: LIST
7945: LIST
7946: PUSH
7947: EMPTY
7948: LIST
7949: LIST
7950: PPUSH
7951: CALL_OW 69
7955: ST_TO_ADDR
7956: GO 8030
7958: LD_INT 2
7960: DOUBLE
7961: EQUAL
7962: IFTRUE 7966
7964: GO 8029
7966: POP
// begin h = false ;
7967: LD_ADDR_VAR 0 4
7971: PUSH
7972: LD_INT 0
7974: ST_TO_ADDR
// for k in heroes [ i ] do
7975: LD_ADDR_VAR 0 3
7979: PUSH
7980: LD_EXP 43
7984: PUSH
7985: LD_VAR 0 1
7989: ARRAY
7990: PUSH
7991: FOR_IN
7992: IFFALSE 8015
// if IsLive ( k ) then
7994: LD_VAR 0 3
7998: PPUSH
7999: CALL_OW 300
8003: IFFALSE 8013
// h = true ;
8005: LD_ADDR_VAR 0 4
8009: PUSH
8010: LD_INT 1
8012: ST_TO_ADDR
8013: GO 7991
8015: POP
8016: POP
// Result := h ;
8017: LD_ADDR_VAR 0 2
8021: PUSH
8022: LD_VAR 0 4
8026: ST_TO_ADDR
// end ; end ;
8027: GO 8030
8029: POP
// end ;
8030: LD_VAR 0 2
8034: RET
// function AlliedSides ( i , j ) ; begin
8035: LD_INT 0
8037: PPUSH
// Result := false ;
8038: LD_ADDR_VAR 0 3
8042: PUSH
8043: LD_INT 0
8045: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8046: LD_VAR 0 1
8050: PPUSH
8051: LD_VAR 0 2
8055: PPUSH
8056: CALL_OW 81
8060: PUSH
8061: LD_INT 1
8063: EQUAL
8064: PUSH
8065: LD_VAR 0 2
8069: PPUSH
8070: LD_VAR 0 1
8074: PPUSH
8075: CALL_OW 81
8079: PUSH
8080: LD_INT 1
8082: EQUAL
8083: AND
8084: PUSH
8085: LD_VAR 0 1
8089: PPUSH
8090: CALL_OW 83
8094: AND
8095: PUSH
8096: LD_VAR 0 2
8100: PPUSH
8101: CALL_OW 83
8105: AND
8106: IFFALSE 8116
// Result := true ;
8108: LD_ADDR_VAR 0 3
8112: PUSH
8113: LD_INT 1
8115: ST_TO_ADDR
// end ;
8116: LD_VAR 0 3
8120: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
8121: CALL 7625 0 0
8125: PUSH
8126: LD_LOC 9
8130: NOT
8131: AND
8132: IFFALSE 8148
8134: GO 8136
8136: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
8137: LD_ADDR_EXP 55
8141: PUSH
8142: LD_STRING #Player-Ended
8144: PUSH
8145: EMPTY
8146: LIST
8147: ST_TO_ADDR
8148: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
8149: CALL 7625 0 0
8153: PUSH
8154: LD_LOC 9
8158: AND
8159: IFFALSE 8168
8161: GO 8163
8163: DISABLE
// YouLostInMultiplayer ;
8164: CALL_OW 107
8168: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
8169: CALL 7625 0 0
8173: NOT
8174: PUSH
8175: CALL_OW 531
8179: NOT
8180: AND
8181: IFFALSE 8197
8183: GO 8185
8185: DISABLE
// WaitServerStrings = [ #server-wait ] ;
8186: LD_ADDR_EXP 55
8190: PUSH
8191: LD_STRING #server-wait
8193: PUSH
8194: EMPTY
8195: LIST
8196: ST_TO_ADDR
8197: END
// every 100 trigger IAmSpec do
8198: CALL_OW 531
8202: IFFALSE 8218
8204: GO 8206
8206: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
8207: LD_ADDR_EXP 55
8211: PUSH
8212: LD_STRING #Player-IAmSpec
8214: PUSH
8215: EMPTY
8216: LIST
8217: ST_TO_ADDR
8218: END
// every 100 trigger GameEnded and IAmSpec do
8219: LD_LOC 9
8223: PUSH
8224: CALL_OW 531
8228: AND
8229: IFFALSE 8238
8231: GO 8233
8233: DISABLE
// YouLostInMultiplayer ;
8234: CALL_OW 107
8238: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
8239: CALL 7625 0 0
8243: PUSH
8244: LD_LOC 9
8248: NOT
8249: AND
8250: IFFALSE 8266
8252: GO 8254
8254: DISABLE
// WaitServerStrings = [ $player-win ] ;
8255: LD_ADDR_EXP 55
8259: PUSH
8260: LD_STRING $player-win
8262: PUSH
8263: EMPTY
8264: LIST
8265: ST_TO_ADDR
8266: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
8267: CALL 7625 0 0
8271: PUSH
8272: LD_LOC 9
8276: AND
8277: IFFALSE 8301
8279: GO 8281
8281: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
8282: LD_EXP 35
8286: PUSH
8287: LD_OWVAR 2
8291: ARRAY
8292: PPUSH
8293: CALL 7303 0 1
// YouWinInMultiplayer ;
8297: CALL_OW 106
// end ;
8301: END
// every 100 trigger isEditor marked 401 do
8302: LD_OWVAR 84
8306: IFFALSE 8322
8308: GO 8310
8310: DISABLE
// Debug_Strings = [ You won ] ;
8311: LD_ADDR_OWVAR 48
8315: PUSH
8316: LD_STRING You won
8318: PUSH
8319: EMPTY
8320: LIST
8321: ST_TO_ADDR
8322: END
// every 100 trigger isEditor marked 400 do
8323: LD_OWVAR 84
8327: IFFALSE 8343
8329: GO 8331
8331: DISABLE
// Debug_Strings = [ You loss ] ;
8332: LD_ADDR_OWVAR 48
8336: PUSH
8337: LD_STRING You loss
8339: PUSH
8340: EMPTY
8341: LIST
8342: ST_TO_ADDR
8343: END
// every 100 marked 98 do var i , un ;
8344: GO 8346
8346: DISABLE
8347: LD_INT 0
8349: PPUSH
8350: PPUSH
// begin for i = 1 to side_positions do
8351: LD_ADDR_VAR 0 1
8355: PUSH
8356: DOUBLE
8357: LD_INT 1
8359: DEC
8360: ST_TO_ADDR
8361: LD_EXP 34
8365: PUSH
8366: FOR_TO
8367: IFFALSE 8450
// if side_positions [ i ] then
8369: LD_EXP 34
8373: PUSH
8374: LD_VAR 0 1
8378: ARRAY
8379: IFFALSE 8448
// if not HasPower ( i ) and not Defaited [ i ] then
8381: LD_VAR 0 1
8385: PPUSH
8386: CALL 7689 0 1
8390: NOT
8391: PUSH
8392: LD_LOC 8
8396: PUSH
8397: LD_VAR 0 1
8401: ARRAY
8402: NOT
8403: AND
8404: IFFALSE 8448
// begin Defaited = replace ( Defaited , i , true ) ;
8406: LD_ADDR_LOC 8
8410: PUSH
8411: LD_LOC 8
8415: PPUSH
8416: LD_VAR 0 1
8420: PPUSH
8421: LD_INT 1
8423: PPUSH
8424: CALL_OW 1
8428: ST_TO_ADDR
// if i = your_side then
8429: LD_VAR 0 1
8433: PUSH
8434: LD_OWVAR 2
8438: EQUAL
8439: IFFALSE 8448
// begin Multiplayer_Loose_Message ;
8441: CALL_OW 521
// enable ( 400 ) ;
8445: LD_INT 400
8447: ENABLE_MARKED
// end ; end ;
8448: GO 8366
8450: POP
8451: POP
// if not Unfoged and defaited [ your_side ] then
8452: LD_LOC 10
8456: NOT
8457: PUSH
8458: LD_LOC 8
8462: PUSH
8463: LD_OWVAR 2
8467: ARRAY
8468: AND
8469: IFFALSE 8475
// Unfog ;
8471: CALL 8651 0 0
// DidGameEnd ;
8475: CALL 8490 0 0
// if not GameEnded then
8479: LD_LOC 9
8483: NOT
8484: IFFALSE 8487
// enable ;
8486: ENABLE
// end ;
8487: PPOPN 2
8489: END
// function DidGameEnd ; var i , k , enemy ; begin
8490: LD_INT 0
8492: PPUSH
8493: PPUSH
8494: PPUSH
8495: PPUSH
// enemy = [ ] ;
8496: LD_ADDR_VAR 0 4
8500: PUSH
8501: EMPTY
8502: ST_TO_ADDR
// for i = 1 to side_positions do
8503: LD_ADDR_VAR 0 2
8507: PUSH
8508: DOUBLE
8509: LD_INT 1
8511: DEC
8512: ST_TO_ADDR
8513: LD_EXP 34
8517: PUSH
8518: FOR_TO
8519: IFFALSE 8613
// if not defaited [ i ] then
8521: LD_LOC 8
8525: PUSH
8526: LD_VAR 0 2
8530: ARRAY
8531: NOT
8532: IFFALSE 8611
// for k = 1 to side_positions do
8534: LD_ADDR_VAR 0 3
8538: PUSH
8539: DOUBLE
8540: LD_INT 1
8542: DEC
8543: ST_TO_ADDR
8544: LD_EXP 34
8548: PUSH
8549: FOR_TO
8550: IFFALSE 8609
// if not defaited [ k ] then
8552: LD_LOC 8
8556: PUSH
8557: LD_VAR 0 3
8561: ARRAY
8562: NOT
8563: IFFALSE 8607
// if not AlliedSides ( i , k ) then
8565: LD_VAR 0 2
8569: PPUSH
8570: LD_VAR 0 3
8574: PPUSH
8575: CALL 8035 0 2
8579: NOT
8580: IFFALSE 8607
// enemy = enemy ^ [ i , k ] ;
8582: LD_ADDR_VAR 0 4
8586: PUSH
8587: LD_VAR 0 4
8591: PUSH
8592: LD_VAR 0 2
8596: PUSH
8597: LD_VAR 0 3
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: ADD
8606: ST_TO_ADDR
8607: GO 8549
8609: POP
8610: POP
8611: GO 8518
8613: POP
8614: POP
// if not enemy then
8615: LD_VAR 0 4
8619: NOT
8620: IFFALSE 8646
// begin GameEnded = true ;
8622: LD_ADDR_LOC 9
8626: PUSH
8627: LD_INT 1
8629: ST_TO_ADDR
// if not defaited [ your_side ] then
8630: LD_LOC 8
8634: PUSH
8635: LD_OWVAR 2
8639: ARRAY
8640: NOT
8641: IFFALSE 8646
// enable ( 401 ) ;
8643: LD_INT 401
8645: ENABLE_MARKED
// end ; end ;
8646: LD_VAR 0 1
8650: RET
// function unfog ; var k , friends ; begin
8651: LD_INT 0
8653: PPUSH
8654: PPUSH
8655: PPUSH
// SetPlayerSpectator ( ) ;
8656: CALL_OW 572
// unfoged = true ;
8660: LD_ADDR_LOC 10
8664: PUSH
8665: LD_INT 1
8667: ST_TO_ADDR
// end ;
8668: LD_VAR 0 1
8672: RET
// export function MakeGameEnd ; begin
8673: LD_INT 0
8675: PPUSH
// SetPlayerSpectator ( ) ;
8676: CALL_OW 572
// unfoged = true ;
8680: LD_ADDR_LOC 10
8684: PUSH
8685: LD_INT 1
8687: ST_TO_ADDR
// wait ( 0 0$5 ) ;
8688: LD_INT 175
8690: PPUSH
8691: CALL_OW 67
// GameEnded = true ;
8695: LD_ADDR_LOC 9
8699: PUSH
8700: LD_INT 1
8702: ST_TO_ADDR
// end ;
8703: LD_VAR 0 1
8707: RET
// export function GetGameEnded ; begin
8708: LD_INT 0
8710: PPUSH
// result = GameEnded ;
8711: LD_ADDR_VAR 0 1
8715: PUSH
8716: LD_LOC 9
8720: ST_TO_ADDR
// end ; end_of_file
8721: LD_VAR 0 1
8725: RET
// export function SetMpTechs ( ) ; var side , i ; begin
8726: LD_INT 0
8728: PPUSH
8729: PPUSH
8730: PPUSH
// for side = 1 to 8 do
8731: LD_ADDR_VAR 0 2
8735: PUSH
8736: DOUBLE
8737: LD_INT 1
8739: DEC
8740: ST_TO_ADDR
8741: LD_INT 8
8743: PUSH
8744: FOR_TO
8745: IFFALSE 8866
// begin for i = 1 to 72 do
8747: LD_ADDR_VAR 0 3
8751: PUSH
8752: DOUBLE
8753: LD_INT 1
8755: DEC
8756: ST_TO_ADDR
8757: LD_INT 72
8759: PUSH
8760: FOR_TO
8761: IFFALSE 8792
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
8763: LD_VAR 0 3
8767: PPUSH
8768: LD_VAR 0 2
8772: PPUSH
8773: LD_INT 0
8775: PPUSH
8776: LD_VAR 0 3
8780: PPUSH
8781: CALL_OW 565
8785: PPUSH
8786: CALL_OW 322
8790: GO 8760
8792: POP
8793: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
8794: LD_INT 73
8796: PPUSH
8797: LD_VAR 0 2
8801: PPUSH
8802: LD_INT 0
8804: PPUSH
8805: LD_INT 25
8807: PPUSH
8808: CALL_OW 565
8812: PPUSH
8813: CALL_OW 322
// for i = 0 to 40 do
8817: LD_ADDR_VAR 0 3
8821: PUSH
8822: DOUBLE
8823: LD_INT 0
8825: DEC
8826: ST_TO_ADDR
8827: LD_INT 40
8829: PUSH
8830: FOR_TO
8831: IFFALSE 8862
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
8833: LD_VAR 0 3
8837: PPUSH
8838: LD_VAR 0 2
8842: PPUSH
8843: LD_INT 1
8845: PPUSH
8846: LD_VAR 0 3
8850: PPUSH
8851: CALL_OW 565
8855: PPUSH
8856: CALL_OW 324
8860: GO 8830
8862: POP
8863: POP
// end ;
8864: GO 8744
8866: POP
8867: POP
// end ;
8868: LD_VAR 0 1
8872: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
8873: LD_INT 0
8875: PPUSH
8876: PPUSH
8877: PPUSH
// for side = 1 to 8 do
8878: LD_ADDR_VAR 0 3
8882: PUSH
8883: DOUBLE
8884: LD_INT 1
8886: DEC
8887: ST_TO_ADDR
8888: LD_INT 8
8890: PUSH
8891: FOR_TO
8892: IFFALSE 12888
// begin for i = 1 to 73 do
8894: LD_ADDR_VAR 0 4
8898: PUSH
8899: DOUBLE
8900: LD_INT 1
8902: DEC
8903: ST_TO_ADDR
8904: LD_INT 73
8906: PUSH
8907: FOR_TO
8908: IFFALSE 8929
// SetTech ( i , side , state_disabled ) ;
8910: LD_VAR 0 4
8914: PPUSH
8915: LD_VAR 0 3
8919: PPUSH
8920: LD_INT 0
8922: PPUSH
8923: CALL_OW 322
8927: GO 8907
8929: POP
8930: POP
// for i = 0 to 40 do
8931: LD_ADDR_VAR 0 4
8935: PUSH
8936: DOUBLE
8937: LD_INT 0
8939: DEC
8940: ST_TO_ADDR
8941: LD_INT 40
8943: PUSH
8944: FOR_TO
8945: IFFALSE 8966
// SetRestrict ( i , side , false ) ;
8947: LD_VAR 0 4
8951: PPUSH
8952: LD_VAR 0 3
8956: PPUSH
8957: LD_INT 0
8959: PPUSH
8960: CALL_OW 324
8964: GO 8944
8966: POP
8967: POP
// case level of 1 :
8968: LD_VAR 0 1
8972: PUSH
8973: LD_INT 1
8975: DOUBLE
8976: EQUAL
8977: IFTRUE 8981
8979: GO 9134
8981: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8982: LD_INT 35
8984: PPUSH
8985: LD_VAR 0 3
8989: PPUSH
8990: LD_INT 1
8992: PPUSH
8993: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8997: LD_INT 45
8999: PPUSH
9000: LD_VAR 0 3
9004: PPUSH
9005: LD_INT 1
9007: PPUSH
9008: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9012: LD_INT 46
9014: PPUSH
9015: LD_VAR 0 3
9019: PPUSH
9020: LD_INT 1
9022: PPUSH
9023: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9027: LD_INT 47
9029: PPUSH
9030: LD_VAR 0 3
9034: PPUSH
9035: LD_INT 1
9037: PPUSH
9038: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9042: LD_INT 0
9044: PPUSH
9045: LD_VAR 0 3
9049: PPUSH
9050: LD_INT 1
9052: PPUSH
9053: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9057: LD_INT 2
9059: PPUSH
9060: LD_VAR 0 3
9064: PPUSH
9065: LD_INT 1
9067: PPUSH
9068: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9072: LD_INT 4
9074: PPUSH
9075: LD_VAR 0 3
9079: PPUSH
9080: LD_INT 1
9082: PPUSH
9083: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9087: LD_INT 6
9089: PPUSH
9090: LD_VAR 0 3
9094: PPUSH
9095: LD_INT 1
9097: PPUSH
9098: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9102: LD_INT 29
9104: PPUSH
9105: LD_VAR 0 3
9109: PPUSH
9110: LD_INT 1
9112: PPUSH
9113: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9117: LD_INT 31
9119: PPUSH
9120: LD_VAR 0 3
9124: PPUSH
9125: LD_INT 1
9127: PPUSH
9128: CALL_OW 324
// end ; 2 :
9132: GO 12886
9134: LD_INT 2
9136: DOUBLE
9137: EQUAL
9138: IFTRUE 9142
9140: GO 9340
9142: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9143: LD_INT 35
9145: PPUSH
9146: LD_VAR 0 3
9150: PPUSH
9151: LD_INT 1
9153: PPUSH
9154: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9158: LD_INT 45
9160: PPUSH
9161: LD_VAR 0 3
9165: PPUSH
9166: LD_INT 1
9168: PPUSH
9169: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9173: LD_INT 46
9175: PPUSH
9176: LD_VAR 0 3
9180: PPUSH
9181: LD_INT 1
9183: PPUSH
9184: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9188: LD_INT 47
9190: PPUSH
9191: LD_VAR 0 3
9195: PPUSH
9196: LD_INT 1
9198: PPUSH
9199: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9203: LD_INT 1
9205: PPUSH
9206: LD_VAR 0 3
9210: PPUSH
9211: LD_INT 1
9213: PPUSH
9214: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9218: LD_INT 2
9220: PPUSH
9221: LD_VAR 0 3
9225: PPUSH
9226: LD_INT 1
9228: PPUSH
9229: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9233: LD_INT 11
9235: PPUSH
9236: LD_VAR 0 3
9240: PPUSH
9241: LD_INT 1
9243: PPUSH
9244: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9248: LD_INT 0
9250: PPUSH
9251: LD_VAR 0 3
9255: PPUSH
9256: LD_INT 1
9258: PPUSH
9259: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9263: LD_INT 2
9265: PPUSH
9266: LD_VAR 0 3
9270: PPUSH
9271: LD_INT 1
9273: PPUSH
9274: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9278: LD_INT 4
9280: PPUSH
9281: LD_VAR 0 3
9285: PPUSH
9286: LD_INT 1
9288: PPUSH
9289: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9293: LD_INT 6
9295: PPUSH
9296: LD_VAR 0 3
9300: PPUSH
9301: LD_INT 1
9303: PPUSH
9304: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9308: LD_INT 29
9310: PPUSH
9311: LD_VAR 0 3
9315: PPUSH
9316: LD_INT 1
9318: PPUSH
9319: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9323: LD_INT 31
9325: PPUSH
9326: LD_VAR 0 3
9330: PPUSH
9331: LD_INT 1
9333: PPUSH
9334: CALL_OW 324
// end ; 3 :
9338: GO 12886
9340: LD_INT 3
9342: DOUBLE
9343: EQUAL
9344: IFTRUE 9348
9346: GO 9801
9348: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9349: LD_INT 35
9351: PPUSH
9352: LD_VAR 0 3
9356: PPUSH
9357: LD_INT 1
9359: PPUSH
9360: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9364: LD_INT 45
9366: PPUSH
9367: LD_VAR 0 3
9371: PPUSH
9372: LD_INT 1
9374: PPUSH
9375: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9379: LD_INT 46
9381: PPUSH
9382: LD_VAR 0 3
9386: PPUSH
9387: LD_INT 1
9389: PPUSH
9390: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9394: LD_INT 47
9396: PPUSH
9397: LD_VAR 0 3
9401: PPUSH
9402: LD_INT 1
9404: PPUSH
9405: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9409: LD_INT 1
9411: PPUSH
9412: LD_VAR 0 3
9416: PPUSH
9417: LD_INT 1
9419: PPUSH
9420: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9424: LD_INT 2
9426: PPUSH
9427: LD_VAR 0 3
9431: PPUSH
9432: LD_INT 1
9434: PPUSH
9435: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9439: LD_INT 11
9441: PPUSH
9442: LD_VAR 0 3
9446: PPUSH
9447: LD_INT 1
9449: PPUSH
9450: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9454: LD_INT 48
9456: PPUSH
9457: LD_VAR 0 3
9461: PPUSH
9462: LD_INT 1
9464: PPUSH
9465: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9469: LD_INT 69
9471: PPUSH
9472: LD_VAR 0 3
9476: PPUSH
9477: LD_INT 1
9479: PPUSH
9480: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9484: LD_INT 39
9486: PPUSH
9487: LD_VAR 0 3
9491: PPUSH
9492: LD_INT 1
9494: PPUSH
9495: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9499: LD_INT 43
9501: PPUSH
9502: LD_VAR 0 3
9506: PPUSH
9507: LD_INT 1
9509: PPUSH
9510: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9514: LD_INT 51
9516: PPUSH
9517: LD_VAR 0 3
9521: PPUSH
9522: LD_INT 1
9524: PPUSH
9525: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9529: LD_INT 6
9531: PPUSH
9532: LD_VAR 0 3
9536: PPUSH
9537: LD_INT 1
9539: PPUSH
9540: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9544: LD_INT 0
9546: PPUSH
9547: LD_VAR 0 3
9551: PPUSH
9552: LD_INT 1
9554: PPUSH
9555: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9559: LD_INT 2
9561: PPUSH
9562: LD_VAR 0 3
9566: PPUSH
9567: LD_INT 1
9569: PPUSH
9570: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
9574: LD_INT 3
9576: PPUSH
9577: LD_VAR 0 3
9581: PPUSH
9582: LD_INT 1
9584: PPUSH
9585: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9589: LD_INT 4
9591: PPUSH
9592: LD_VAR 0 3
9596: PPUSH
9597: LD_INT 1
9599: PPUSH
9600: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9604: LD_INT 6
9606: PPUSH
9607: LD_VAR 0 3
9611: PPUSH
9612: LD_INT 1
9614: PPUSH
9615: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
9619: LD_INT 7
9621: PPUSH
9622: LD_VAR 0 3
9626: PPUSH
9627: LD_INT 1
9629: PPUSH
9630: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
9634: LD_INT 8
9636: PPUSH
9637: LD_VAR 0 3
9641: PPUSH
9642: LD_INT 1
9644: PPUSH
9645: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
9649: LD_INT 10
9651: PPUSH
9652: LD_VAR 0 3
9656: PPUSH
9657: LD_INT 1
9659: PPUSH
9660: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
9664: LD_INT 15
9666: PPUSH
9667: LD_VAR 0 3
9671: PPUSH
9672: LD_INT 1
9674: PPUSH
9675: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
9679: LD_INT 16
9681: PPUSH
9682: LD_VAR 0 3
9686: PPUSH
9687: LD_INT 1
9689: PPUSH
9690: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
9694: LD_INT 17
9696: PPUSH
9697: LD_VAR 0 3
9701: PPUSH
9702: LD_INT 1
9704: PPUSH
9705: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
9709: LD_INT 20
9711: PPUSH
9712: LD_VAR 0 3
9716: PPUSH
9717: LD_INT 1
9719: PPUSH
9720: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
9724: LD_INT 26
9726: PPUSH
9727: LD_VAR 0 3
9731: PPUSH
9732: LD_INT 1
9734: PPUSH
9735: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
9739: LD_INT 27
9741: PPUSH
9742: LD_VAR 0 3
9746: PPUSH
9747: LD_INT 1
9749: PPUSH
9750: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9754: LD_INT 29
9756: PPUSH
9757: LD_VAR 0 3
9761: PPUSH
9762: LD_INT 1
9764: PPUSH
9765: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9769: LD_INT 31
9771: PPUSH
9772: LD_VAR 0 3
9776: PPUSH
9777: LD_INT 1
9779: PPUSH
9780: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
9784: LD_INT 32
9786: PPUSH
9787: LD_VAR 0 3
9791: PPUSH
9792: LD_INT 1
9794: PPUSH
9795: CALL_OW 324
// end ; 4 :
9799: GO 12886
9801: LD_INT 4
9803: DOUBLE
9804: EQUAL
9805: IFTRUE 9809
9807: GO 10757
9809: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9810: LD_INT 35
9812: PPUSH
9813: LD_VAR 0 3
9817: PPUSH
9818: LD_INT 1
9820: PPUSH
9821: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9825: LD_INT 45
9827: PPUSH
9828: LD_VAR 0 3
9832: PPUSH
9833: LD_INT 1
9835: PPUSH
9836: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9840: LD_INT 46
9842: PPUSH
9843: LD_VAR 0 3
9847: PPUSH
9848: LD_INT 1
9850: PPUSH
9851: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9855: LD_INT 47
9857: PPUSH
9858: LD_VAR 0 3
9862: PPUSH
9863: LD_INT 1
9865: PPUSH
9866: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9870: LD_INT 1
9872: PPUSH
9873: LD_VAR 0 3
9877: PPUSH
9878: LD_INT 1
9880: PPUSH
9881: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9885: LD_INT 2
9887: PPUSH
9888: LD_VAR 0 3
9892: PPUSH
9893: LD_INT 1
9895: PPUSH
9896: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9900: LD_INT 11
9902: PPUSH
9903: LD_VAR 0 3
9907: PPUSH
9908: LD_INT 1
9910: PPUSH
9911: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
9915: LD_INT 20
9917: PPUSH
9918: LD_VAR 0 3
9922: PPUSH
9923: LD_INT 1
9925: PPUSH
9926: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9930: LD_INT 48
9932: PPUSH
9933: LD_VAR 0 3
9937: PPUSH
9938: LD_INT 1
9940: PPUSH
9941: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
9945: LD_INT 49
9947: PPUSH
9948: LD_VAR 0 3
9952: PPUSH
9953: LD_INT 1
9955: PPUSH
9956: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9960: LD_INT 69
9962: PPUSH
9963: LD_VAR 0 3
9967: PPUSH
9968: LD_INT 1
9970: PPUSH
9971: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9975: LD_INT 39
9977: PPUSH
9978: LD_VAR 0 3
9982: PPUSH
9983: LD_INT 1
9985: PPUSH
9986: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
9990: LD_INT 34
9992: PPUSH
9993: LD_VAR 0 3
9997: PPUSH
9998: LD_INT 1
10000: PPUSH
10001: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10005: LD_INT 42
10007: PPUSH
10008: LD_VAR 0 3
10012: PPUSH
10013: LD_INT 1
10015: PPUSH
10016: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10020: LD_INT 44
10022: PPUSH
10023: LD_VAR 0 3
10027: PPUSH
10028: LD_INT 1
10030: PPUSH
10031: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10035: LD_INT 41
10037: PPUSH
10038: LD_VAR 0 3
10042: PPUSH
10043: LD_INT 1
10045: PPUSH
10046: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10050: LD_INT 43
10052: PPUSH
10053: LD_VAR 0 3
10057: PPUSH
10058: LD_INT 1
10060: PPUSH
10061: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10065: LD_INT 70
10067: PPUSH
10068: LD_VAR 0 3
10072: PPUSH
10073: LD_INT 1
10075: PPUSH
10076: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10080: LD_INT 51
10082: PPUSH
10083: LD_VAR 0 3
10087: PPUSH
10088: LD_INT 1
10090: PPUSH
10091: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10095: LD_INT 52
10097: PPUSH
10098: LD_VAR 0 3
10102: PPUSH
10103: LD_INT 1
10105: PPUSH
10106: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10110: LD_INT 6
10112: PPUSH
10113: LD_VAR 0 3
10117: PPUSH
10118: LD_INT 1
10120: PPUSH
10121: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10125: LD_INT 15
10127: PPUSH
10128: LD_VAR 0 3
10132: PPUSH
10133: LD_INT 1
10135: PPUSH
10136: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10140: LD_INT 7
10142: PPUSH
10143: LD_VAR 0 3
10147: PPUSH
10148: LD_INT 1
10150: PPUSH
10151: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10155: LD_INT 12
10157: PPUSH
10158: LD_VAR 0 3
10162: PPUSH
10163: LD_INT 1
10165: PPUSH
10166: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10170: LD_INT 18
10172: PPUSH
10173: LD_VAR 0 3
10177: PPUSH
10178: LD_INT 1
10180: PPUSH
10181: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10185: LD_INT 60
10187: PPUSH
10188: LD_VAR 0 3
10192: PPUSH
10193: LD_INT 1
10195: PPUSH
10196: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10200: LD_INT 9
10202: PPUSH
10203: LD_VAR 0 3
10207: PPUSH
10208: LD_INT 1
10210: PPUSH
10211: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10215: LD_INT 30
10217: PPUSH
10218: LD_VAR 0 3
10222: PPUSH
10223: LD_INT 1
10225: PPUSH
10226: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10230: LD_INT 37
10232: PPUSH
10233: LD_VAR 0 3
10237: PPUSH
10238: LD_INT 1
10240: PPUSH
10241: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10245: LD_INT 5
10247: PPUSH
10248: LD_VAR 0 3
10252: PPUSH
10253: LD_INT 1
10255: PPUSH
10256: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10260: LD_INT 66
10262: PPUSH
10263: LD_VAR 0 3
10267: PPUSH
10268: LD_INT 1
10270: PPUSH
10271: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10275: LD_INT 21
10277: PPUSH
10278: LD_VAR 0 3
10282: PPUSH
10283: LD_INT 1
10285: PPUSH
10286: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10290: LD_INT 22
10292: PPUSH
10293: LD_VAR 0 3
10297: PPUSH
10298: LD_INT 1
10300: PPUSH
10301: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10305: LD_INT 54
10307: PPUSH
10308: LD_VAR 0 3
10312: PPUSH
10313: LD_INT 1
10315: PPUSH
10316: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10320: LD_INT 0
10322: PPUSH
10323: LD_VAR 0 3
10327: PPUSH
10328: LD_INT 1
10330: PPUSH
10331: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10335: LD_INT 1
10337: PPUSH
10338: LD_VAR 0 3
10342: PPUSH
10343: LD_INT 1
10345: PPUSH
10346: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10350: LD_INT 2
10352: PPUSH
10353: LD_VAR 0 3
10357: PPUSH
10358: LD_INT 1
10360: PPUSH
10361: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10365: LD_INT 3
10367: PPUSH
10368: LD_VAR 0 3
10372: PPUSH
10373: LD_INT 1
10375: PPUSH
10376: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10380: LD_INT 4
10382: PPUSH
10383: LD_VAR 0 3
10387: PPUSH
10388: LD_INT 1
10390: PPUSH
10391: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10395: LD_INT 5
10397: PPUSH
10398: LD_VAR 0 3
10402: PPUSH
10403: LD_INT 1
10405: PPUSH
10406: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10410: LD_INT 6
10412: PPUSH
10413: LD_VAR 0 3
10417: PPUSH
10418: LD_INT 1
10420: PPUSH
10421: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10425: LD_INT 7
10427: PPUSH
10428: LD_VAR 0 3
10432: PPUSH
10433: LD_INT 1
10435: PPUSH
10436: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10440: LD_INT 8
10442: PPUSH
10443: LD_VAR 0 3
10447: PPUSH
10448: LD_INT 1
10450: PPUSH
10451: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10455: LD_INT 10
10457: PPUSH
10458: LD_VAR 0 3
10462: PPUSH
10463: LD_INT 1
10465: PPUSH
10466: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
10470: LD_INT 11
10472: PPUSH
10473: LD_VAR 0 3
10477: PPUSH
10478: LD_INT 1
10480: PPUSH
10481: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
10485: LD_INT 12
10487: PPUSH
10488: LD_VAR 0 3
10492: PPUSH
10493: LD_INT 1
10495: PPUSH
10496: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
10500: LD_INT 13
10502: PPUSH
10503: LD_VAR 0 3
10507: PPUSH
10508: LD_INT 1
10510: PPUSH
10511: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
10515: LD_INT 14
10517: PPUSH
10518: LD_VAR 0 3
10522: PPUSH
10523: LD_INT 1
10525: PPUSH
10526: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10530: LD_INT 15
10532: PPUSH
10533: LD_VAR 0 3
10537: PPUSH
10538: LD_INT 1
10540: PPUSH
10541: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10545: LD_INT 16
10547: PPUSH
10548: LD_VAR 0 3
10552: PPUSH
10553: LD_INT 1
10555: PPUSH
10556: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10560: LD_INT 17
10562: PPUSH
10563: LD_VAR 0 3
10567: PPUSH
10568: LD_INT 1
10570: PPUSH
10571: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
10575: LD_INT 19
10577: PPUSH
10578: LD_VAR 0 3
10582: PPUSH
10583: LD_INT 1
10585: PPUSH
10586: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10590: LD_INT 20
10592: PPUSH
10593: LD_VAR 0 3
10597: PPUSH
10598: LD_INT 1
10600: PPUSH
10601: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
10605: LD_INT 21
10607: PPUSH
10608: LD_VAR 0 3
10612: PPUSH
10613: LD_INT 1
10615: PPUSH
10616: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
10620: LD_INT 23
10622: PPUSH
10623: LD_VAR 0 3
10627: PPUSH
10628: LD_INT 1
10630: PPUSH
10631: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10635: LD_INT 26
10637: PPUSH
10638: LD_VAR 0 3
10642: PPUSH
10643: LD_INT 1
10645: PPUSH
10646: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10650: LD_INT 27
10652: PPUSH
10653: LD_VAR 0 3
10657: PPUSH
10658: LD_INT 1
10660: PPUSH
10661: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
10665: LD_INT 28
10667: PPUSH
10668: LD_VAR 0 3
10672: PPUSH
10673: LD_INT 1
10675: PPUSH
10676: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10680: LD_INT 29
10682: PPUSH
10683: LD_VAR 0 3
10687: PPUSH
10688: LD_INT 1
10690: PPUSH
10691: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
10695: LD_INT 30
10697: PPUSH
10698: LD_VAR 0 3
10702: PPUSH
10703: LD_INT 1
10705: PPUSH
10706: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10710: LD_INT 31
10712: PPUSH
10713: LD_VAR 0 3
10717: PPUSH
10718: LD_INT 1
10720: PPUSH
10721: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10725: LD_INT 32
10727: PPUSH
10728: LD_VAR 0 3
10732: PPUSH
10733: LD_INT 1
10735: PPUSH
10736: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
10740: LD_INT 36
10742: PPUSH
10743: LD_VAR 0 3
10747: PPUSH
10748: LD_INT 1
10750: PPUSH
10751: CALL_OW 324
// end ; 5 :
10755: GO 12886
10757: LD_INT 5
10759: DOUBLE
10760: EQUAL
10761: IFTRUE 10765
10763: GO 11878
10765: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10766: LD_INT 35
10768: PPUSH
10769: LD_VAR 0 3
10773: PPUSH
10774: LD_INT 1
10776: PPUSH
10777: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10781: LD_INT 45
10783: PPUSH
10784: LD_VAR 0 3
10788: PPUSH
10789: LD_INT 1
10791: PPUSH
10792: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10796: LD_INT 46
10798: PPUSH
10799: LD_VAR 0 3
10803: PPUSH
10804: LD_INT 1
10806: PPUSH
10807: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10811: LD_INT 47
10813: PPUSH
10814: LD_VAR 0 3
10818: PPUSH
10819: LD_INT 1
10821: PPUSH
10822: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10826: LD_INT 1
10828: PPUSH
10829: LD_VAR 0 3
10833: PPUSH
10834: LD_INT 1
10836: PPUSH
10837: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10841: LD_INT 2
10843: PPUSH
10844: LD_VAR 0 3
10848: PPUSH
10849: LD_INT 1
10851: PPUSH
10852: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10856: LD_INT 11
10858: PPUSH
10859: LD_VAR 0 3
10863: PPUSH
10864: LD_INT 1
10866: PPUSH
10867: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10871: LD_INT 20
10873: PPUSH
10874: LD_VAR 0 3
10878: PPUSH
10879: LD_INT 1
10881: PPUSH
10882: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10886: LD_INT 48
10888: PPUSH
10889: LD_VAR 0 3
10893: PPUSH
10894: LD_INT 1
10896: PPUSH
10897: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10901: LD_INT 49
10903: PPUSH
10904: LD_VAR 0 3
10908: PPUSH
10909: LD_INT 1
10911: PPUSH
10912: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10916: LD_INT 69
10918: PPUSH
10919: LD_VAR 0 3
10923: PPUSH
10924: LD_INT 1
10926: PPUSH
10927: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10931: LD_INT 39
10933: PPUSH
10934: LD_VAR 0 3
10938: PPUSH
10939: LD_INT 1
10941: PPUSH
10942: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10946: LD_INT 34
10948: PPUSH
10949: LD_VAR 0 3
10953: PPUSH
10954: LD_INT 1
10956: PPUSH
10957: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10961: LD_INT 42
10963: PPUSH
10964: LD_VAR 0 3
10968: PPUSH
10969: LD_INT 1
10971: PPUSH
10972: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10976: LD_INT 44
10978: PPUSH
10979: LD_VAR 0 3
10983: PPUSH
10984: LD_INT 1
10986: PPUSH
10987: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10991: LD_INT 41
10993: PPUSH
10994: LD_VAR 0 3
10998: PPUSH
10999: LD_INT 1
11001: PPUSH
11002: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11006: LD_INT 40
11008: PPUSH
11009: LD_VAR 0 3
11013: PPUSH
11014: LD_INT 1
11016: PPUSH
11017: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11021: LD_INT 43
11023: PPUSH
11024: LD_VAR 0 3
11028: PPUSH
11029: LD_INT 1
11031: PPUSH
11032: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11036: LD_INT 70
11038: PPUSH
11039: LD_VAR 0 3
11043: PPUSH
11044: LD_INT 1
11046: PPUSH
11047: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11051: LD_INT 51
11053: PPUSH
11054: LD_VAR 0 3
11058: PPUSH
11059: LD_INT 1
11061: PPUSH
11062: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11066: LD_INT 52
11068: PPUSH
11069: LD_VAR 0 3
11073: PPUSH
11074: LD_INT 1
11076: PPUSH
11077: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11081: LD_INT 6
11083: PPUSH
11084: LD_VAR 0 3
11088: PPUSH
11089: LD_INT 1
11091: PPUSH
11092: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11096: LD_INT 15
11098: PPUSH
11099: LD_VAR 0 3
11103: PPUSH
11104: LD_INT 1
11106: PPUSH
11107: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11111: LD_INT 7
11113: PPUSH
11114: LD_VAR 0 3
11118: PPUSH
11119: LD_INT 1
11121: PPUSH
11122: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11126: LD_INT 12
11128: PPUSH
11129: LD_VAR 0 3
11133: PPUSH
11134: LD_INT 1
11136: PPUSH
11137: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11141: LD_INT 17
11143: PPUSH
11144: LD_VAR 0 3
11148: PPUSH
11149: LD_INT 1
11151: PPUSH
11152: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11156: LD_INT 18
11158: PPUSH
11159: LD_VAR 0 3
11163: PPUSH
11164: LD_INT 1
11166: PPUSH
11167: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11171: LD_INT 60
11173: PPUSH
11174: LD_VAR 0 3
11178: PPUSH
11179: LD_INT 1
11181: PPUSH
11182: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11186: LD_INT 32
11188: PPUSH
11189: LD_VAR 0 3
11193: PPUSH
11194: LD_INT 1
11196: PPUSH
11197: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11201: LD_INT 9
11203: PPUSH
11204: LD_VAR 0 3
11208: PPUSH
11209: LD_INT 1
11211: PPUSH
11212: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11216: LD_INT 57
11218: PPUSH
11219: LD_VAR 0 3
11223: PPUSH
11224: LD_INT 1
11226: PPUSH
11227: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11231: LD_INT 30
11233: PPUSH
11234: LD_VAR 0 3
11238: PPUSH
11239: LD_INT 1
11241: PPUSH
11242: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11246: LD_INT 37
11248: PPUSH
11249: LD_VAR 0 3
11253: PPUSH
11254: LD_INT 1
11256: PPUSH
11257: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11261: LD_INT 63
11263: PPUSH
11264: LD_VAR 0 3
11268: PPUSH
11269: LD_INT 1
11271: PPUSH
11272: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11276: LD_INT 3
11278: PPUSH
11279: LD_VAR 0 3
11283: PPUSH
11284: LD_INT 1
11286: PPUSH
11287: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11291: LD_INT 4
11293: PPUSH
11294: LD_VAR 0 3
11298: PPUSH
11299: LD_INT 1
11301: PPUSH
11302: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11306: LD_INT 5
11308: PPUSH
11309: LD_VAR 0 3
11313: PPUSH
11314: LD_INT 1
11316: PPUSH
11317: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11321: LD_INT 66
11323: PPUSH
11324: LD_VAR 0 3
11328: PPUSH
11329: LD_INT 1
11331: PPUSH
11332: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11336: LD_INT 21
11338: PPUSH
11339: LD_VAR 0 3
11343: PPUSH
11344: LD_INT 1
11346: PPUSH
11347: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11351: LD_INT 22
11353: PPUSH
11354: LD_VAR 0 3
11358: PPUSH
11359: LD_INT 1
11361: PPUSH
11362: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11366: LD_INT 19
11368: PPUSH
11369: LD_VAR 0 3
11373: PPUSH
11374: LD_INT 1
11376: PPUSH
11377: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11381: LD_INT 54
11383: PPUSH
11384: LD_VAR 0 3
11388: PPUSH
11389: LD_INT 1
11391: PPUSH
11392: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
11396: LD_INT 55
11398: PPUSH
11399: LD_VAR 0 3
11403: PPUSH
11404: LD_INT 1
11406: PPUSH
11407: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11411: LD_INT 0
11413: PPUSH
11414: LD_VAR 0 3
11418: PPUSH
11419: LD_INT 1
11421: PPUSH
11422: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11426: LD_INT 1
11428: PPUSH
11429: LD_VAR 0 3
11433: PPUSH
11434: LD_INT 1
11436: PPUSH
11437: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11441: LD_INT 2
11443: PPUSH
11444: LD_VAR 0 3
11448: PPUSH
11449: LD_INT 1
11451: PPUSH
11452: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11456: LD_INT 3
11458: PPUSH
11459: LD_VAR 0 3
11463: PPUSH
11464: LD_INT 1
11466: PPUSH
11467: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11471: LD_INT 4
11473: PPUSH
11474: LD_VAR 0 3
11478: PPUSH
11479: LD_INT 1
11481: PPUSH
11482: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11486: LD_INT 5
11488: PPUSH
11489: LD_VAR 0 3
11493: PPUSH
11494: LD_INT 1
11496: PPUSH
11497: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11501: LD_INT 6
11503: PPUSH
11504: LD_VAR 0 3
11508: PPUSH
11509: LD_INT 1
11511: PPUSH
11512: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11516: LD_INT 7
11518: PPUSH
11519: LD_VAR 0 3
11523: PPUSH
11524: LD_INT 1
11526: PPUSH
11527: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11531: LD_INT 8
11533: PPUSH
11534: LD_VAR 0 3
11538: PPUSH
11539: LD_INT 1
11541: PPUSH
11542: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11546: LD_INT 10
11548: PPUSH
11549: LD_VAR 0 3
11553: PPUSH
11554: LD_INT 1
11556: PPUSH
11557: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11561: LD_INT 11
11563: PPUSH
11564: LD_VAR 0 3
11568: PPUSH
11569: LD_INT 1
11571: PPUSH
11572: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11576: LD_INT 12
11578: PPUSH
11579: LD_VAR 0 3
11583: PPUSH
11584: LD_INT 1
11586: PPUSH
11587: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11591: LD_INT 13
11593: PPUSH
11594: LD_VAR 0 3
11598: PPUSH
11599: LD_INT 1
11601: PPUSH
11602: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11606: LD_INT 14
11608: PPUSH
11609: LD_VAR 0 3
11613: PPUSH
11614: LD_INT 1
11616: PPUSH
11617: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11621: LD_INT 15
11623: PPUSH
11624: LD_VAR 0 3
11628: PPUSH
11629: LD_INT 1
11631: PPUSH
11632: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11636: LD_INT 16
11638: PPUSH
11639: LD_VAR 0 3
11643: PPUSH
11644: LD_INT 1
11646: PPUSH
11647: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11651: LD_INT 17
11653: PPUSH
11654: LD_VAR 0 3
11658: PPUSH
11659: LD_INT 1
11661: PPUSH
11662: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
11666: LD_INT 18
11668: PPUSH
11669: LD_VAR 0 3
11673: PPUSH
11674: LD_INT 1
11676: PPUSH
11677: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11681: LD_INT 19
11683: PPUSH
11684: LD_VAR 0 3
11688: PPUSH
11689: LD_INT 1
11691: PPUSH
11692: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11696: LD_INT 20
11698: PPUSH
11699: LD_VAR 0 3
11703: PPUSH
11704: LD_INT 1
11706: PPUSH
11707: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11711: LD_INT 21
11713: PPUSH
11714: LD_VAR 0 3
11718: PPUSH
11719: LD_INT 1
11721: PPUSH
11722: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11726: LD_INT 23
11728: PPUSH
11729: LD_VAR 0 3
11733: PPUSH
11734: LD_INT 1
11736: PPUSH
11737: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11741: LD_INT 26
11743: PPUSH
11744: LD_VAR 0 3
11748: PPUSH
11749: LD_INT 1
11751: PPUSH
11752: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11756: LD_INT 27
11758: PPUSH
11759: LD_VAR 0 3
11763: PPUSH
11764: LD_INT 1
11766: PPUSH
11767: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11771: LD_INT 28
11773: PPUSH
11774: LD_VAR 0 3
11778: PPUSH
11779: LD_INT 1
11781: PPUSH
11782: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11786: LD_INT 29
11788: PPUSH
11789: LD_VAR 0 3
11793: PPUSH
11794: LD_INT 1
11796: PPUSH
11797: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11801: LD_INT 30
11803: PPUSH
11804: LD_VAR 0 3
11808: PPUSH
11809: LD_INT 1
11811: PPUSH
11812: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11816: LD_INT 31
11818: PPUSH
11819: LD_VAR 0 3
11823: PPUSH
11824: LD_INT 1
11826: PPUSH
11827: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11831: LD_INT 32
11833: PPUSH
11834: LD_VAR 0 3
11838: PPUSH
11839: LD_INT 1
11841: PPUSH
11842: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
11846: LD_INT 33
11848: PPUSH
11849: LD_VAR 0 3
11853: PPUSH
11854: LD_INT 1
11856: PPUSH
11857: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11861: LD_INT 36
11863: PPUSH
11864: LD_VAR 0 3
11868: PPUSH
11869: LD_INT 1
11871: PPUSH
11872: CALL_OW 324
// end ; 6 :
11876: GO 12886
11878: LD_INT 6
11880: DOUBLE
11881: EQUAL
11882: IFTRUE 11886
11884: GO 12811
11886: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11887: LD_INT 35
11889: PPUSH
11890: LD_VAR 0 3
11894: PPUSH
11895: LD_INT 1
11897: PPUSH
11898: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11902: LD_INT 45
11904: PPUSH
11905: LD_VAR 0 3
11909: PPUSH
11910: LD_INT 1
11912: PPUSH
11913: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11917: LD_INT 46
11919: PPUSH
11920: LD_VAR 0 3
11924: PPUSH
11925: LD_INT 1
11927: PPUSH
11928: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11932: LD_INT 47
11934: PPUSH
11935: LD_VAR 0 3
11939: PPUSH
11940: LD_INT 1
11942: PPUSH
11943: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11947: LD_INT 1
11949: PPUSH
11950: LD_VAR 0 3
11954: PPUSH
11955: LD_INT 1
11957: PPUSH
11958: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11962: LD_INT 2
11964: PPUSH
11965: LD_VAR 0 3
11969: PPUSH
11970: LD_INT 1
11972: PPUSH
11973: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11977: LD_INT 11
11979: PPUSH
11980: LD_VAR 0 3
11984: PPUSH
11985: LD_INT 1
11987: PPUSH
11988: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11992: LD_INT 20
11994: PPUSH
11995: LD_VAR 0 3
11999: PPUSH
12000: LD_INT 1
12002: PPUSH
12003: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12007: LD_INT 48
12009: PPUSH
12010: LD_VAR 0 3
12014: PPUSH
12015: LD_INT 1
12017: PPUSH
12018: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12022: LD_INT 49
12024: PPUSH
12025: LD_VAR 0 3
12029: PPUSH
12030: LD_INT 1
12032: PPUSH
12033: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12037: LD_INT 50
12039: PPUSH
12040: LD_VAR 0 3
12044: PPUSH
12045: LD_INT 1
12047: PPUSH
12048: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12052: LD_INT 69
12054: PPUSH
12055: LD_VAR 0 3
12059: PPUSH
12060: LD_INT 1
12062: PPUSH
12063: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12067: LD_INT 39
12069: PPUSH
12070: LD_VAR 0 3
12074: PPUSH
12075: LD_INT 1
12077: PPUSH
12078: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12082: LD_INT 34
12084: PPUSH
12085: LD_VAR 0 3
12089: PPUSH
12090: LD_INT 1
12092: PPUSH
12093: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12097: LD_INT 42
12099: PPUSH
12100: LD_VAR 0 3
12104: PPUSH
12105: LD_INT 1
12107: PPUSH
12108: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12112: LD_INT 44
12114: PPUSH
12115: LD_VAR 0 3
12119: PPUSH
12120: LD_INT 1
12122: PPUSH
12123: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12127: LD_INT 41
12129: PPUSH
12130: LD_VAR 0 3
12134: PPUSH
12135: LD_INT 1
12137: PPUSH
12138: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
12142: LD_INT 13
12144: PPUSH
12145: LD_VAR 0 3
12149: PPUSH
12150: LD_INT 1
12152: PPUSH
12153: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12157: LD_INT 40
12159: PPUSH
12160: LD_VAR 0 3
12164: PPUSH
12165: LD_INT 1
12167: PPUSH
12168: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12172: LD_INT 43
12174: PPUSH
12175: LD_VAR 0 3
12179: PPUSH
12180: LD_INT 1
12182: PPUSH
12183: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12187: LD_INT 70
12189: PPUSH
12190: LD_VAR 0 3
12194: PPUSH
12195: LD_INT 1
12197: PPUSH
12198: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
12202: LD_INT 23
12204: PPUSH
12205: LD_VAR 0 3
12209: PPUSH
12210: LD_INT 1
12212: PPUSH
12213: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12217: LD_INT 51
12219: PPUSH
12220: LD_VAR 0 3
12224: PPUSH
12225: LD_INT 1
12227: PPUSH
12228: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12232: LD_INT 52
12234: PPUSH
12235: LD_VAR 0 3
12239: PPUSH
12240: LD_INT 1
12242: PPUSH
12243: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12247: LD_INT 6
12249: PPUSH
12250: LD_VAR 0 3
12254: PPUSH
12255: LD_INT 1
12257: PPUSH
12258: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12262: LD_INT 15
12264: PPUSH
12265: LD_VAR 0 3
12269: PPUSH
12270: LD_INT 1
12272: PPUSH
12273: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12277: LD_INT 7
12279: PPUSH
12280: LD_VAR 0 3
12284: PPUSH
12285: LD_INT 1
12287: PPUSH
12288: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12292: LD_INT 12
12294: PPUSH
12295: LD_VAR 0 3
12299: PPUSH
12300: LD_INT 1
12302: PPUSH
12303: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
12307: LD_INT 10
12309: PPUSH
12310: LD_VAR 0 3
12314: PPUSH
12315: LD_INT 1
12317: PPUSH
12318: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12322: LD_INT 17
12324: PPUSH
12325: LD_VAR 0 3
12329: PPUSH
12330: LD_INT 1
12332: PPUSH
12333: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12337: LD_INT 18
12339: PPUSH
12340: LD_VAR 0 3
12344: PPUSH
12345: LD_INT 1
12347: PPUSH
12348: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12352: LD_INT 60
12354: PPUSH
12355: LD_VAR 0 3
12359: PPUSH
12360: LD_INT 1
12362: PPUSH
12363: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
12367: LD_INT 61
12369: PPUSH
12370: LD_VAR 0 3
12374: PPUSH
12375: LD_INT 1
12377: PPUSH
12378: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12382: LD_INT 32
12384: PPUSH
12385: LD_VAR 0 3
12389: PPUSH
12390: LD_INT 1
12392: PPUSH
12393: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
12397: LD_INT 27
12399: PPUSH
12400: LD_VAR 0 3
12404: PPUSH
12405: LD_INT 1
12407: PPUSH
12408: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
12412: LD_INT 36
12414: PPUSH
12415: LD_VAR 0 3
12419: PPUSH
12420: LD_INT 1
12422: PPUSH
12423: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
12427: LD_INT 33
12429: PPUSH
12430: LD_VAR 0 3
12434: PPUSH
12435: LD_INT 1
12437: PPUSH
12438: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12442: LD_INT 9
12444: PPUSH
12445: LD_VAR 0 3
12449: PPUSH
12450: LD_INT 1
12452: PPUSH
12453: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
12457: LD_INT 38
12459: PPUSH
12460: LD_VAR 0 3
12464: PPUSH
12465: LD_INT 1
12467: PPUSH
12468: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12472: LD_INT 57
12474: PPUSH
12475: LD_VAR 0 3
12479: PPUSH
12480: LD_INT 1
12482: PPUSH
12483: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
12487: LD_INT 58
12489: PPUSH
12490: LD_VAR 0 3
12494: PPUSH
12495: LD_INT 1
12497: PPUSH
12498: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
12502: LD_INT 28
12504: PPUSH
12505: LD_VAR 0 3
12509: PPUSH
12510: LD_INT 1
12512: PPUSH
12513: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
12517: LD_INT 29
12519: PPUSH
12520: LD_VAR 0 3
12524: PPUSH
12525: LD_INT 1
12527: PPUSH
12528: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12532: LD_INT 30
12534: PPUSH
12535: LD_VAR 0 3
12539: PPUSH
12540: LD_INT 1
12542: PPUSH
12543: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12547: LD_INT 37
12549: PPUSH
12550: LD_VAR 0 3
12554: PPUSH
12555: LD_INT 1
12557: PPUSH
12558: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12562: LD_INT 63
12564: PPUSH
12565: LD_VAR 0 3
12569: PPUSH
12570: LD_INT 1
12572: PPUSH
12573: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
12577: LD_INT 64
12579: PPUSH
12580: LD_VAR 0 3
12584: PPUSH
12585: LD_INT 1
12587: PPUSH
12588: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12592: LD_INT 3
12594: PPUSH
12595: LD_VAR 0 3
12599: PPUSH
12600: LD_INT 1
12602: PPUSH
12603: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12607: LD_INT 4
12609: PPUSH
12610: LD_VAR 0 3
12614: PPUSH
12615: LD_INT 1
12617: PPUSH
12618: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12622: LD_INT 5
12624: PPUSH
12625: LD_VAR 0 3
12629: PPUSH
12630: LD_INT 1
12632: PPUSH
12633: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
12637: LD_INT 8
12639: PPUSH
12640: LD_VAR 0 3
12644: PPUSH
12645: LD_INT 1
12647: PPUSH
12648: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12652: LD_INT 66
12654: PPUSH
12655: LD_VAR 0 3
12659: PPUSH
12660: LD_INT 1
12662: PPUSH
12663: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
12667: LD_INT 67
12669: PPUSH
12670: LD_VAR 0 3
12674: PPUSH
12675: LD_INT 1
12677: PPUSH
12678: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12682: LD_INT 21
12684: PPUSH
12685: LD_VAR 0 3
12689: PPUSH
12690: LD_INT 1
12692: PPUSH
12693: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12697: LD_INT 22
12699: PPUSH
12700: LD_VAR 0 3
12704: PPUSH
12705: LD_INT 1
12707: PPUSH
12708: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12712: LD_INT 19
12714: PPUSH
12715: LD_VAR 0 3
12719: PPUSH
12720: LD_INT 1
12722: PPUSH
12723: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
12727: LD_INT 26
12729: PPUSH
12730: LD_VAR 0 3
12734: PPUSH
12735: LD_INT 1
12737: PPUSH
12738: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12742: LD_INT 54
12744: PPUSH
12745: LD_VAR 0 3
12749: PPUSH
12750: LD_INT 1
12752: PPUSH
12753: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12757: LD_INT 55
12759: PPUSH
12760: LD_VAR 0 3
12764: PPUSH
12765: LD_INT 1
12767: PPUSH
12768: CALL_OW 322
// for i = 0 to 39 do
12772: LD_ADDR_VAR 0 4
12776: PUSH
12777: DOUBLE
12778: LD_INT 0
12780: DEC
12781: ST_TO_ADDR
12782: LD_INT 39
12784: PUSH
12785: FOR_TO
12786: IFFALSE 12807
// SetRestrict ( i , side , true ) ;
12788: LD_VAR 0 4
12792: PPUSH
12793: LD_VAR 0 3
12797: PPUSH
12798: LD_INT 1
12800: PPUSH
12801: CALL_OW 324
12805: GO 12785
12807: POP
12808: POP
// end ; else
12809: GO 12886
12811: POP
// begin for i = 1 to 73 do
12812: LD_ADDR_VAR 0 4
12816: PUSH
12817: DOUBLE
12818: LD_INT 1
12820: DEC
12821: ST_TO_ADDR
12822: LD_INT 73
12824: PUSH
12825: FOR_TO
12826: IFFALSE 12847
// SetTech ( i , side , state_enabled ) ;
12828: LD_VAR 0 4
12832: PPUSH
12833: LD_VAR 0 3
12837: PPUSH
12838: LD_INT 1
12840: PPUSH
12841: CALL_OW 322
12845: GO 12825
12847: POP
12848: POP
// for i = 0 to 39 do
12849: LD_ADDR_VAR 0 4
12853: PUSH
12854: DOUBLE
12855: LD_INT 0
12857: DEC
12858: ST_TO_ADDR
12859: LD_INT 39
12861: PUSH
12862: FOR_TO
12863: IFFALSE 12884
// SetRestrict ( i , side , true ) ;
12865: LD_VAR 0 4
12869: PPUSH
12870: LD_VAR 0 3
12874: PPUSH
12875: LD_INT 1
12877: PPUSH
12878: CALL_OW 324
12882: GO 12862
12884: POP
12885: POP
// end ; end ; end ;
12886: GO 8891
12888: POP
12889: POP
// end ;
12890: LD_VAR 0 2
12894: RET
