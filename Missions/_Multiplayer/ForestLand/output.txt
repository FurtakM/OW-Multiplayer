// export Game_Type ; export def_base_level , def_amount_of_people , def_initial_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_amount_of_apemen , def_people_respawning , def_siberite_bomb , def_builduptime ; export is_depot , number_of_breastworks , number_of_people , initial_level , amount_of_apemen , starting_crates , starting_resources , shipments_density , siberite_bomb_Delay , spawning_koef_of_apemen , respawning_time_min , respawning_time_max , def_win_rules ; export Side_Count , Team_Count , Player_Side , Player_Team , Side_Teams , Teams ; export Side_Positions , Side_Nations , Side_Names , Team_Names , Team_Game , Side_Comps ; export depot_def , start_def , extra_oil_deposits_locations ; export heroes ; export commander , battle_flags_id , morale_decreasing_time ; var global_units , global_defined , soldiers_created ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function create_forest ; var area ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
// PlaceTreesToArea ( BigForest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , Rand ( 500 , 570 ) , 50 , 2 ) ;
  72: LD_INT 6
  74: PPUSH
  75: LD_INT 21
  77: PUSH
  78: LD_INT 22
  80: PUSH
  81: LD_INT 24
  83: PUSH
  84: LD_INT 21
  86: PUSH
  87: LD_INT 22
  89: PUSH
  90: LD_INT 24
  92: PUSH
  93: LD_INT 38
  95: PUSH
  96: LD_INT 39
  98: PUSH
  99: EMPTY
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: PPUSH
 109: LD_INT 500
 111: PPUSH
 112: LD_INT 570
 114: PPUSH
 115: CALL_OW 12
 119: PPUSH
 120: LD_INT 50
 122: PPUSH
 123: LD_INT 2
 125: PPUSH
 126: CALL_OW 352
// if def_base_level then
 130: LD_EXP 2
 134: IFFALSE 146
// area := bush_forest_small else
 136: LD_ADDR_VAR 0 2
 140: PUSH
 141: LD_INT 9
 143: ST_TO_ADDR
 144: GO 154
// area := bush_forest_big ;
 146: LD_ADDR_VAR 0 2
 150: PUSH
 151: LD_INT 8
 153: ST_TO_ADDR
// PlaceTreesToArea ( area , [ 38 , 39 , 37 ] , Rand ( 300 , 350 ) , 10 , 3 ) ;
 154: LD_VAR 0 2
 158: PPUSH
 159: LD_INT 38
 161: PUSH
 162: LD_INT 39
 164: PUSH
 165: LD_INT 37
 167: PUSH
 168: EMPTY
 169: LIST
 170: LIST
 171: LIST
 172: PPUSH
 173: LD_INT 300
 175: PPUSH
 176: LD_INT 350
 178: PPUSH
 179: CALL_OW 12
 183: PPUSH
 184: LD_INT 10
 186: PPUSH
 187: LD_INT 3
 189: PPUSH
 190: CALL_OW 352
// PlaceTreesToArea ( BigForest , [ 38 , 39 , 37 ] , 80 , 10 , 3 ) ;
 194: LD_INT 6
 196: PPUSH
 197: LD_INT 38
 199: PUSH
 200: LD_INT 39
 202: PUSH
 203: LD_INT 37
 205: PUSH
 206: EMPTY
 207: LIST
 208: LIST
 209: LIST
 210: PPUSH
 211: LD_INT 80
 213: PPUSH
 214: LD_INT 10
 216: PPUSH
 217: LD_INT 3
 219: PPUSH
 220: CALL_OW 352
// end ;
 224: LD_VAR 0 1
 228: RET
// function create_map_resources ; var un , oil_pos , sib_pos ; begin
 229: LD_INT 0
 231: PPUSH
 232: PPUSH
 233: PPUSH
 234: PPUSH
// oil_pos := [ [ 24 , 10 ] , [ 82 , 9 ] , [ 79 , 115 ] , [ 135 , 112 ] ] ;
 235: LD_ADDR_VAR 0 3
 239: PUSH
 240: LD_INT 24
 242: PUSH
 243: LD_INT 10
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: PUSH
 250: LD_INT 82
 252: PUSH
 253: LD_INT 9
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 79
 262: PUSH
 263: LD_INT 115
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 135
 272: PUSH
 273: LD_INT 112
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: PUSH
 280: EMPTY
 281: LIST
 282: LIST
 283: LIST
 284: LIST
 285: ST_TO_ADDR
// sib_pos := [ [ 24 , 29 ] , [ 102 , 29 ] , [ 60 , 93 ] , [ 134 , 91 ] ] ;
 286: LD_ADDR_VAR 0 4
 290: PUSH
 291: LD_INT 24
 293: PUSH
 294: LD_INT 29
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: PUSH
 301: LD_INT 102
 303: PUSH
 304: LD_INT 29
 306: PUSH
 307: EMPTY
 308: LIST
 309: LIST
 310: PUSH
 311: LD_INT 60
 313: PUSH
 314: LD_INT 93
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 134
 323: PUSH
 324: LD_INT 91
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: LIST
 335: LIST
 336: ST_TO_ADDR
// for un = 1 to 4 do
 337: LD_ADDR_VAR 0 2
 341: PUSH
 342: DOUBLE
 343: LD_INT 1
 345: DEC
 346: ST_TO_ADDR
 347: LD_INT 4
 349: PUSH
 350: FOR_TO
 351: IFFALSE 429
// begin CreateDepositXY ( oil_pos [ un ] [ 1 ] , oil_pos [ un ] [ 2 ] , mat_oil ) ;
 353: LD_VAR 0 3
 357: PUSH
 358: LD_VAR 0 2
 362: ARRAY
 363: PUSH
 364: LD_INT 1
 366: ARRAY
 367: PPUSH
 368: LD_VAR 0 3
 372: PUSH
 373: LD_VAR 0 2
 377: ARRAY
 378: PUSH
 379: LD_INT 2
 381: ARRAY
 382: PPUSH
 383: LD_INT 2
 385: PPUSH
 386: CALL_OW 62
// CreateDepositXY ( sib_pos [ un ] [ 1 ] , sib_pos [ un ] [ 2 ] , mat_siberit ) ;
 390: LD_VAR 0 4
 394: PUSH
 395: LD_VAR 0 2
 399: ARRAY
 400: PUSH
 401: LD_INT 1
 403: ARRAY
 404: PPUSH
 405: LD_VAR 0 4
 409: PUSH
 410: LD_VAR 0 2
 414: ARRAY
 415: PUSH
 416: LD_INT 2
 418: ARRAY
 419: PPUSH
 420: LD_INT 3
 422: PPUSH
 423: CALL_OW 62
// end ;
 427: GO 350
 429: POP
 430: POP
// end ;
 431: LD_VAR 0 1
 435: RET
// function init_map ; var i ; begin
 436: LD_INT 0
 438: PPUSH
 439: PPUSH
// extra_oil_deposits_locations := [ [ 38 , 6 ] , [ 67 , 6 ] , [ 94 , 115 ] , [ 116 , 99 ] ] ;
 440: LD_ADDR_EXP 42
 444: PUSH
 445: LD_INT 38
 447: PUSH
 448: LD_INT 6
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 67
 457: PUSH
 458: LD_INT 6
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: LD_INT 94
 467: PUSH
 468: LD_INT 115
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: LD_INT 116
 477: PUSH
 478: LD_INT 99
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: ST_TO_ADDR
// create_forest ;
 491: CALL 68 0 0
// create_map_resources ;
 495: CALL 229 0 0
// depot_def := [ [ 12 , 10 , 2 ] , [ 97 , 10 , 3 ] , [ 64 , 108 , 0 ] , [ 146 , 110 , 5 ] ] ;
 499: LD_ADDR_EXP 40
 503: PUSH
 504: LD_INT 12
 506: PUSH
 507: LD_INT 10
 509: PUSH
 510: LD_INT 2
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: LIST
 517: PUSH
 518: LD_INT 97
 520: PUSH
 521: LD_INT 10
 523: PUSH
 524: LD_INT 3
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: LIST
 531: PUSH
 532: LD_INT 64
 534: PUSH
 535: LD_INT 108
 537: PUSH
 538: LD_INT 0
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: LIST
 545: PUSH
 546: LD_INT 146
 548: PUSH
 549: LD_INT 110
 551: PUSH
 552: LD_INT 5
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: LIST
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: LIST
 565: ST_TO_ADDR
// if def_base_level then
 566: LD_EXP 2
 570: IFFALSE 625
// start_def := [ [ 16 , 14 ] , [ 96 , 13 ] , [ 65 , 105 ] , [ 141 , 105 ] ] else
 572: LD_ADDR_EXP 41
 576: PUSH
 577: LD_INT 16
 579: PUSH
 580: LD_INT 14
 582: PUSH
 583: EMPTY
 584: LIST
 585: LIST
 586: PUSH
 587: LD_INT 96
 589: PUSH
 590: LD_INT 13
 592: PUSH
 593: EMPTY
 594: LIST
 595: LIST
 596: PUSH
 597: LD_INT 65
 599: PUSH
 600: LD_INT 105
 602: PUSH
 603: EMPTY
 604: LIST
 605: LIST
 606: PUSH
 607: LD_INT 141
 609: PUSH
 610: LD_INT 105
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: ST_TO_ADDR
 623: GO 676
// start_def := [ [ 7 , 5 ] , [ 98 , 6 ] , [ 63 , 113 ] , [ 151 , 113 ] ] ;
 625: LD_ADDR_EXP 41
 629: PUSH
 630: LD_INT 7
 632: PUSH
 633: LD_INT 5
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: PUSH
 640: LD_INT 98
 642: PUSH
 643: LD_INT 6
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: PUSH
 650: LD_INT 63
 652: PUSH
 653: LD_INT 113
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: PUSH
 660: LD_INT 151
 662: PUSH
 663: LD_INT 113
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: ST_TO_ADDR
// end ;
 676: LD_VAR 0 1
 680: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
 681: LD_INT 0
 683: PPUSH
 684: PPUSH
 685: PPUSH
 686: PPUSH
 687: PPUSH
 688: PPUSH
 689: PPUSH
 690: PPUSH
 691: PPUSH
// if MultiPlayer then
 692: LD_OWVAR 4
 696: IFFALSE 780
// begin Game_Type = mp_game_type ;
 698: LD_ADDR_EXP 1
 702: PUSH
 703: LD_OWVAR 6
 707: ST_TO_ADDR
// Player_Side = mp_player_side ;
 708: LD_ADDR_EXP 30
 712: PUSH
 713: LD_OWVAR 7
 717: ST_TO_ADDR
// Player_Team = mp_player_team ;
 718: LD_ADDR_EXP 31
 722: PUSH
 723: LD_OWVAR 8
 727: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
 728: LD_ADDR_EXP 34
 732: PUSH
 733: LD_OWVAR 17
 737: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 738: LD_ADDR_EXP 32
 742: PUSH
 743: LD_OWVAR 15
 747: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 748: LD_ADDR_EXP 35
 752: PUSH
 753: LD_OWVAR 16
 757: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 758: LD_ADDR_EXP 39
 762: PUSH
 763: CALL 0 0 0
 767: ST_TO_ADDR
// Teams = mp_teams ;
 768: LD_ADDR_EXP 33
 772: PUSH
 773: LD_OWVAR 12
 777: ST_TO_ADDR
// end else
 778: GO 981
// begin Game_Type = 2 ;
 780: LD_ADDR_EXP 1
 784: PUSH
 785: LD_INT 2
 787: ST_TO_ADDR
// Player_Side = 4 ;
 788: LD_ADDR_EXP 30
 792: PUSH
 793: LD_INT 4
 795: ST_TO_ADDR
// Side_Positions = [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 796: LD_ADDR_EXP 34
 800: PUSH
 801: LD_INT 0
 803: PUSH
 804: LD_INT 3
 806: PUSH
 807: LD_INT 0
 809: PUSH
 810: LD_INT 1
 812: PUSH
 813: LD_INT 0
 815: PUSH
 816: LD_INT 2
 818: PUSH
 819: LD_INT 4
 821: PUSH
 822: LD_INT 0
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: LIST
 834: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 2 , 0 , 1 , 2 , 0 ] ;
 835: LD_ADDR_EXP 32
 839: PUSH
 840: LD_INT 0
 842: PUSH
 843: LD_INT 1
 845: PUSH
 846: LD_INT 0
 848: PUSH
 849: LD_INT 2
 851: PUSH
 852: LD_INT 0
 854: PUSH
 855: LD_INT 1
 857: PUSH
 858: LD_INT 2
 860: PUSH
 861: LD_INT 0
 863: PUSH
 864: EMPTY
 865: LIST
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: LIST
 871: LIST
 872: LIST
 873: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 2 , 0 , 1 , 3 , 0 ] ;
 874: LD_ADDR_EXP 35
 878: PUSH
 879: LD_INT 0
 881: PUSH
 882: LD_INT 3
 884: PUSH
 885: LD_INT 0
 887: PUSH
 888: LD_INT 2
 890: PUSH
 891: LD_INT 0
 893: PUSH
 894: LD_INT 1
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: LD_INT 0
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 913: LD_ADDR_EXP 39
 917: PUSH
 918: LD_INT 0
 920: PUSH
 921: LD_INT 0
 923: PUSH
 924: LD_INT 0
 926: PUSH
 927: LD_INT 0
 929: PUSH
 930: LD_INT 0
 932: PUSH
 933: LD_INT 0
 935: PUSH
 936: LD_INT 0
 938: PUSH
 939: LD_INT 0
 941: PUSH
 942: EMPTY
 943: LIST
 944: LIST
 945: LIST
 946: LIST
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: ST_TO_ADDR
// Teams = [ [ 2 , 6 ] , [ 4 , 7 ] ] ;
 952: LD_ADDR_EXP 33
 956: PUSH
 957: LD_INT 2
 959: PUSH
 960: LD_INT 6
 962: PUSH
 963: EMPTY
 964: LIST
 965: LIST
 966: PUSH
 967: LD_INT 4
 969: PUSH
 970: LD_INT 7
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: ST_TO_ADDR
// end ; Side_Count = ( Side_Positions diff [ 0 ] ) + 0 ;
 981: LD_ADDR_EXP 28
 985: PUSH
 986: LD_EXP 34
 990: PUSH
 991: LD_INT 0
 993: PUSH
 994: EMPTY
 995: LIST
 996: DIFF
 997: PUSH
 998: LD_INT 0
1000: PLUS
1001: ST_TO_ADDR
// Team_Count = ( Side_Teams diff [ 0 ] ) + 0 ;
1002: LD_ADDR_EXP 29
1006: PUSH
1007: LD_EXP 32
1011: PUSH
1012: LD_INT 0
1014: PUSH
1015: EMPTY
1016: LIST
1017: DIFF
1018: PUSH
1019: LD_INT 0
1021: PLUS
1022: ST_TO_ADDR
// if MultiPlayer then
1023: LD_OWVAR 4
1027: IFFALSE 1221
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
1029: LD_ADDR_EXP 2
1033: PUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL_OW 426
1041: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
1042: LD_ADDR_EXP 3
1046: PUSH
1047: LD_INT 1
1049: PPUSH
1050: CALL_OW 426
1054: ST_TO_ADDR
// def_initial_level = GetMultiplayerSetting ( 2 ) ;
1055: LD_ADDR_EXP 4
1059: PUSH
1060: LD_INT 2
1062: PPUSH
1063: CALL_OW 426
1067: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
1068: LD_ADDR_EXP 5
1072: PUSH
1073: LD_INT 3
1075: PPUSH
1076: CALL_OW 426
1080: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
1081: LD_ADDR_EXP 6
1085: PUSH
1086: LD_INT 4
1088: PPUSH
1089: CALL_OW 426
1093: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
1094: LD_ADDR_EXP 7
1098: PUSH
1099: LD_INT 5
1101: PPUSH
1102: CALL_OW 426
1106: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
1107: LD_ADDR_EXP 8
1111: PUSH
1112: LD_INT 10
1114: PPUSH
1115: CALL_OW 426
1119: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
1120: LD_ADDR_EXP 9
1124: PUSH
1125: LD_INT 11
1127: PPUSH
1128: CALL_OW 426
1132: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
1133: LD_ADDR_EXP 10
1137: PUSH
1138: LD_INT 12
1140: PPUSH
1141: CALL_OW 426
1145: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
1146: LD_ADDR_EXP 11
1150: PUSH
1151: LD_INT 13
1153: PPUSH
1154: CALL_OW 426
1158: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
1159: LD_ADDR_EXP 12
1163: PUSH
1164: LD_INT 14
1166: PPUSH
1167: CALL_OW 426
1171: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
1172: LD_ADDR_EXP 13
1176: PUSH
1177: LD_INT 15
1179: PPUSH
1180: CALL_OW 426
1184: ST_TO_ADDR
// def_win_rules = 0 ;
1185: LD_ADDR_EXP 27
1189: PUSH
1190: LD_INT 0
1192: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
1193: LD_ADDR_EXP 14
1197: PUSH
1198: LD_INT 20
1200: PPUSH
1201: CALL_OW 426
1205: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
1206: LD_ADDR_VAR 0 9
1210: PUSH
1211: LD_INT 22
1213: PPUSH
1214: CALL_OW 426
1218: ST_TO_ADDR
// end else
1219: GO 1345
// begin randomize ;
1221: CALL_OW 10
// def_base_level = 1 ;
1225: LD_ADDR_EXP 2
1229: PUSH
1230: LD_INT 1
1232: ST_TO_ADDR
// def_amount_of_people = 1 ;
1233: LD_ADDR_EXP 3
1237: PUSH
1238: LD_INT 1
1240: ST_TO_ADDR
// def_initial_level = 1 ;
1241: LD_ADDR_EXP 4
1245: PUSH
1246: LD_INT 1
1248: ST_TO_ADDR
// def_starting_resources = 2 ;
1249: LD_ADDR_EXP 5
1253: PUSH
1254: LD_INT 2
1256: ST_TO_ADDR
// def_shipments_density = 1 ;
1257: LD_ADDR_EXP 6
1261: PUSH
1262: LD_INT 1
1264: ST_TO_ADDR
// def_extra_oil_deposits = 0 ;
1265: LD_ADDR_EXP 7
1269: PUSH
1270: LD_INT 0
1272: ST_TO_ADDR
// def_shared_vision = 1 ;
1273: LD_ADDR_EXP 8
1277: PUSH
1278: LD_INT 1
1280: ST_TO_ADDR
// def_morale_flags = 1 ;
1281: LD_ADDR_EXP 9
1285: PUSH
1286: LD_INT 1
1288: ST_TO_ADDR
// def_siberite_detection = 1 ;
1289: LD_ADDR_EXP 10
1293: PUSH
1294: LD_INT 1
1296: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
1297: LD_ADDR_EXP 11
1301: PUSH
1302: LD_INT 3
1304: ST_TO_ADDR
// def_people_respawning = 2 ;
1305: LD_ADDR_EXP 12
1309: PUSH
1310: LD_INT 2
1312: ST_TO_ADDR
// def_siberite_bomb = 0 ;
1313: LD_ADDR_EXP 13
1317: PUSH
1318: LD_INT 0
1320: ST_TO_ADDR
// def_win_rules = 0 ;
1321: LD_ADDR_EXP 27
1325: PUSH
1326: LD_INT 0
1328: ST_TO_ADDR
// def_builduptime := 1 ;
1329: LD_ADDR_EXP 14
1333: PUSH
1334: LD_INT 1
1336: ST_TO_ADDR
// tech_level = 4 ;
1337: LD_ADDR_VAR 0 9
1341: PUSH
1342: LD_INT 4
1344: ST_TO_ADDR
// end ; if isSGUI then
1345: LD_OWVAR 83
1349: IFFALSE 1357
// setMpTechs ( ) else
1351: CALL 9460 0 0
1355: GO 1370
// begin SetMpTechLevel ( tech_level + 1 ) ;
1357: LD_VAR 0 9
1361: PUSH
1362: LD_INT 1
1364: PLUS
1365: PPUSH
1366: CALL 9607 0 1
// end ; is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1370: LD_ADDR_EXP 15
1374: PUSH
1375: LD_INT 0
1377: PUSH
1378: LD_INT 1
1380: PUSH
1381: LD_INT 1
1383: PUSH
1384: LD_INT 1
1386: PUSH
1387: EMPTY
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: PUSH
1393: LD_EXP 2
1397: PUSH
1398: LD_INT 1
1400: PLUS
1401: ARRAY
1402: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 0 , 0 ] [ def_base_level + 1 ] ;
1403: LD_ADDR_EXP 16
1407: PUSH
1408: LD_INT 0
1410: PUSH
1411: LD_INT 0
1413: PUSH
1414: LD_INT 0
1416: PUSH
1417: LD_INT 0
1419: PUSH
1420: EMPTY
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: PUSH
1426: LD_EXP 2
1430: PUSH
1431: LD_INT 1
1433: PLUS
1434: ARRAY
1435: ST_TO_ADDR
// number_of_people = [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
1436: LD_ADDR_EXP 17
1440: PUSH
1441: LD_INT 9
1443: PUSH
1444: LD_INT 12
1446: PUSH
1447: LD_INT 15
1449: PUSH
1450: LD_INT 24
1452: PUSH
1453: EMPTY
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: PUSH
1459: LD_EXP 3
1463: PUSH
1464: LD_INT 1
1466: PLUS
1467: ARRAY
1468: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_initial_level + 1 ] ;
1469: LD_ADDR_EXP 18
1473: PUSH
1474: LD_INT 2
1476: PUSH
1477: LD_INT 3
1479: PUSH
1480: LD_INT 4
1482: PUSH
1483: LD_INT 5
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: PUSH
1492: LD_EXP 4
1496: PUSH
1497: LD_INT 1
1499: PLUS
1500: ARRAY
1501: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1502: LD_ADDR_EXP 21
1506: PUSH
1507: LD_INT 0
1509: PUSH
1510: LD_INT 0
1512: PUSH
1513: LD_INT 0
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: LIST
1520: PUSH
1521: LD_INT 30
1523: PUSH
1524: LD_INT 0
1526: PUSH
1527: LD_INT 0
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: PUSH
1535: LD_INT 50
1537: PUSH
1538: LD_INT 20
1540: PUSH
1541: LD_INT 0
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 80
1551: PUSH
1552: LD_INT 40
1554: PUSH
1555: LD_INT 20
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: PUSH
1563: EMPTY
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: PUSH
1569: LD_EXP 5
1573: PUSH
1574: LD_INT 1
1576: PLUS
1577: ARRAY
1578: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1579: LD_ADDR_EXP 20
1583: PUSH
1584: LD_INT 10
1586: PUSH
1587: EMPTY
1588: LIST
1589: PUSH
1590: LD_INT 7
1592: PUSH
1593: LD_INT 14
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: PUSH
1600: LD_INT 6
1602: PUSH
1603: LD_INT 12
1605: PUSH
1606: LD_INT 18
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: PUSH
1614: LD_INT 5
1616: PUSH
1617: LD_INT 10
1619: PUSH
1620: LD_INT 15
1622: PUSH
1623: LD_INT 20
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: PUSH
1638: LD_EXP 5
1642: PUSH
1643: LD_INT 1
1645: PLUS
1646: ARRAY
1647: ST_TO_ADDR
// shipments_density = [ 20 , 30 , 40 ] [ def_shipments_density + 1 ] ;
1648: LD_ADDR_EXP 22
1652: PUSH
1653: LD_INT 20
1655: PUSH
1656: LD_INT 30
1658: PUSH
1659: LD_INT 40
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: LIST
1666: PUSH
1667: LD_EXP 6
1671: PUSH
1672: LD_INT 1
1674: PLUS
1675: ARRAY
1676: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1677: LD_ADDR_EXP 19
1681: PUSH
1682: LD_INT 0
1684: PUSH
1685: LD_INT 1
1687: PUSH
1688: LD_INT 2
1690: PUSH
1691: LD_INT 3
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: PUSH
1700: LD_EXP 11
1704: PUSH
1705: LD_INT 1
1707: PLUS
1708: ARRAY
1709: ST_TO_ADDR
// spawning_koef_of_apemen = [ 0 , 165 , 140 , 115 ] [ def_amount_of_apemen + 1 ] ;
1710: LD_ADDR_EXP 24
1714: PUSH
1715: LD_INT 0
1717: PUSH
1718: LD_INT 165
1720: PUSH
1721: LD_INT 140
1723: PUSH
1724: LD_INT 115
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: PUSH
1733: LD_EXP 11
1737: PUSH
1738: LD_INT 1
1740: PLUS
1741: ARRAY
1742: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1743: LD_ADDR_EXP 25
1747: PUSH
1748: LD_INT 0
1750: PUSH
1751: LD_INT 8400
1753: PUSH
1754: LD_INT 1750
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: LIST
1761: PUSH
1762: LD_EXP 12
1766: PUSH
1767: LD_INT 1
1769: PLUS
1770: ARRAY
1771: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1772: LD_ADDR_EXP 26
1776: PUSH
1777: LD_INT 0
1779: PUSH
1780: LD_INT 21000
1782: PUSH
1783: LD_INT 4200
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: LIST
1790: PUSH
1791: LD_EXP 12
1795: PUSH
1796: LD_INT 1
1798: PLUS
1799: ARRAY
1800: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1801: LD_ADDR_EXP 23
1805: PUSH
1806: LD_INT 0
1808: PUSH
1809: LD_INT 1
1811: PUSH
1812: LD_INT 63000
1814: PUSH
1815: LD_INT 126000
1817: PUSH
1818: LD_INT 189000
1820: PUSH
1821: LD_INT 252000
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: PUSH
1832: LD_EXP 13
1836: PUSH
1837: LD_INT 1
1839: PLUS
1840: ARRAY
1841: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1842: LD_ADDR_EXP 46
1846: PUSH
1847: LD_INT 1
1849: NEG
1850: PUSH
1851: LD_INT 350
1853: PUSH
1854: LD_INT 700
1856: PUSH
1857: LD_INT 1400
1859: PUSH
1860: LD_INT 0
1862: PUSH
1863: EMPTY
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: PUSH
1870: LD_EXP 9
1874: PUSH
1875: LD_INT 1
1877: PLUS
1878: ARRAY
1879: ST_TO_ADDR
// battle_flags_id = [ ] ;
1880: LD_ADDR_EXP 45
1884: PUSH
1885: EMPTY
1886: ST_TO_ADDR
// end ;
1887: LD_VAR 0 1
1891: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1892: LD_INT 0
1894: PPUSH
1895: PPUSH
1896: PPUSH
// Team_Game := 0 ;
1897: LD_ADDR_EXP 38
1901: PUSH
1902: LD_INT 0
1904: ST_TO_ADDR
// for i = 1 to 8 do
1905: LD_ADDR_VAR 0 2
1909: PUSH
1910: DOUBLE
1911: LD_INT 1
1913: DEC
1914: ST_TO_ADDR
1915: LD_INT 8
1917: PUSH
1918: FOR_TO
1919: IFFALSE 1945
// Team_Game := Team_Game + Side_Teams [ i ] ;
1921: LD_ADDR_EXP 38
1925: PUSH
1926: LD_EXP 38
1930: PUSH
1931: LD_EXP 32
1935: PUSH
1936: LD_VAR 0 2
1940: ARRAY
1941: PLUS
1942: ST_TO_ADDR
1943: GO 1918
1945: POP
1946: POP
// if not Team_Game then
1947: LD_EXP 38
1951: NOT
1952: IFFALSE 1964
// Team_Game := false else
1954: LD_ADDR_EXP 38
1958: PUSH
1959: LD_INT 0
1961: ST_TO_ADDR
1962: GO 1972
// Team_Game := true ;
1964: LD_ADDR_EXP 38
1968: PUSH
1969: LD_INT 1
1971: ST_TO_ADDR
// if not Team_Game then
1972: LD_EXP 38
1976: NOT
1977: IFFALSE 2075
// begin for i = 1 to 8 do
1979: LD_ADDR_VAR 0 2
1983: PUSH
1984: DOUBLE
1985: LD_INT 1
1987: DEC
1988: ST_TO_ADDR
1989: LD_INT 8
1991: PUSH
1992: FOR_TO
1993: IFFALSE 2071
// for j = 1 to 8 do
1995: LD_ADDR_VAR 0 3
1999: PUSH
2000: DOUBLE
2001: LD_INT 1
2003: DEC
2004: ST_TO_ADDR
2005: LD_INT 8
2007: PUSH
2008: FOR_TO
2009: IFFALSE 2067
// if i <> j then
2011: LD_VAR 0 2
2015: PUSH
2016: LD_VAR 0 3
2020: NONEQUAL
2021: IFFALSE 2045
// SetAttitude ( i , j , att_neutral , true ) else
2023: LD_VAR 0 2
2027: PPUSH
2028: LD_VAR 0 3
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: LD_INT 1
2038: PPUSH
2039: CALL_OW 80
2043: GO 2065
// SetAttitude ( i , j , att_friend , true ) ;
2045: LD_VAR 0 2
2049: PPUSH
2050: LD_VAR 0 3
2054: PPUSH
2055: LD_INT 1
2057: PPUSH
2058: LD_INT 1
2060: PPUSH
2061: CALL_OW 80
2065: GO 2008
2067: POP
2068: POP
2069: GO 1992
2071: POP
2072: POP
// end else
2073: GO 2250
// begin if def_shared_vision then
2075: LD_EXP 8
2079: IFFALSE 2144
// begin for i in Teams do
2081: LD_ADDR_VAR 0 2
2085: PUSH
2086: LD_EXP 33
2090: PUSH
2091: FOR_IN
2092: IFFALSE 2142
// for j = 2 to i do
2094: LD_ADDR_VAR 0 3
2098: PUSH
2099: DOUBLE
2100: LD_INT 2
2102: DEC
2103: ST_TO_ADDR
2104: LD_VAR 0 2
2108: PUSH
2109: FOR_TO
2110: IFFALSE 2138
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2112: LD_VAR 0 2
2116: PUSH
2117: LD_VAR 0 3
2121: ARRAY
2122: PPUSH
2123: LD_VAR 0 2
2127: PUSH
2128: LD_INT 1
2130: ARRAY
2131: PPUSH
2132: CALL_OW 343
2136: GO 2109
2138: POP
2139: POP
2140: GO 2091
2142: POP
2143: POP
// end ; for i = 1 to 8 do
2144: LD_ADDR_VAR 0 2
2148: PUSH
2149: DOUBLE
2150: LD_INT 1
2152: DEC
2153: ST_TO_ADDR
2154: LD_INT 8
2156: PUSH
2157: FOR_TO
2158: IFFALSE 2248
// for j = 1 to 8 do
2160: LD_ADDR_VAR 0 3
2164: PUSH
2165: DOUBLE
2166: LD_INT 1
2168: DEC
2169: ST_TO_ADDR
2170: LD_INT 8
2172: PUSH
2173: FOR_TO
2174: IFFALSE 2244
// if Side_Teams [ i ] = Side_Teams [ j ] then
2176: LD_EXP 32
2180: PUSH
2181: LD_VAR 0 2
2185: ARRAY
2186: PUSH
2187: LD_EXP 32
2191: PUSH
2192: LD_VAR 0 3
2196: ARRAY
2197: EQUAL
2198: IFFALSE 2222
// SetAttitude ( i , j , att_friend , true ) else
2200: LD_VAR 0 2
2204: PPUSH
2205: LD_VAR 0 3
2209: PPUSH
2210: LD_INT 1
2212: PPUSH
2213: LD_INT 1
2215: PPUSH
2216: CALL_OW 80
2220: GO 2242
// SetAttitude ( i , j , att_enemy , true ) ;
2222: LD_VAR 0 2
2226: PPUSH
2227: LD_VAR 0 3
2231: PPUSH
2232: LD_INT 2
2234: PPUSH
2235: LD_INT 1
2237: PPUSH
2238: CALL_OW 80
2242: GO 2173
2244: POP
2245: POP
2246: GO 2157
2248: POP
2249: POP
// end ; end ;
2250: LD_VAR 0 1
2254: RET
// function prepare_people ( side , count , cl , x , y , r , var commander ) ; var i , j , un ; begin
2255: LD_INT 0
2257: PPUSH
2258: PPUSH
2259: PPUSH
2260: PPUSH
// result := [ ] ;
2261: LD_ADDR_VAR 0 8
2265: PUSH
2266: EMPTY
2267: ST_TO_ADDR
// for i := 1 to count do
2268: LD_ADDR_VAR 0 9
2272: PUSH
2273: DOUBLE
2274: LD_INT 1
2276: DEC
2277: ST_TO_ADDR
2278: LD_VAR 0 2
2282: PUSH
2283: FOR_TO
2284: IFFALSE 2678
// begin uc_direction := Rand ( 0 , 5 ) ;
2286: LD_ADDR_OWVAR 24
2290: PUSH
2291: LD_INT 0
2293: PPUSH
2294: LD_INT 5
2296: PPUSH
2297: CALL_OW 12
2301: ST_TO_ADDR
// if commander then
2302: LD_FROM_VAR 0 7
2306: IFFALSE 2415
// begin hc_name := mp_sides_players_names [ side ] ;
2308: LD_ADDR_OWVAR 26
2312: PUSH
2313: LD_OWVAR 19
2317: PUSH
2318: LD_VAR 0 1
2322: ARRAY
2323: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
2324: LD_INT 1
2326: PPUSH
2327: LD_INT 2
2329: PPUSH
2330: CALL_OW 12
2334: PPUSH
2335: LD_VAR 0 3
2339: PPUSH
2340: LD_EXP 18
2344: PUSH
2345: LD_INT 2
2347: PLUS
2348: PPUSH
2349: CALL_OW 380
// hc_importance := 105 ;
2353: LD_ADDR_OWVAR 32
2357: PUSH
2358: LD_INT 105
2360: ST_TO_ADDR
// commander := false ;
2361: LD_VAR 0 7
2365: PUSH
2366: LD_INT 0
2368: ST_TO_ADDR
// if Multiplayer then
2369: LD_OWVAR 4
2373: IFFALSE 2413
// begin hc_gallery := MULTIAVATARS ;
2375: LD_ADDR_OWVAR 33
2379: PUSH
2380: LD_STRING MULTIAVATARS
2382: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( Side ) ;
2383: LD_ADDR_OWVAR 34
2387: PUSH
2388: LD_VAR 0 1
2392: PPUSH
2393: CALL_OW 525
2397: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( Side ) ;
2398: LD_ADDR_OWVAR 27
2402: PUSH
2403: LD_VAR 0 1
2407: PPUSH
2408: CALL_OW 526
2412: ST_TO_ADDR
// end ; end else
2413: GO 2478
// begin hc_name :=  ;
2415: LD_ADDR_OWVAR 26
2419: PUSH
2420: LD_STRING 
2422: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
2423: LD_INT 1
2425: PPUSH
2426: LD_INT 2
2428: PPUSH
2429: CALL_OW 12
2433: PPUSH
2434: LD_VAR 0 3
2438: PPUSH
2439: LD_EXP 18
2443: PPUSH
2444: CALL_OW 380
// hc_importance := 0 ;
2448: LD_ADDR_OWVAR 32
2452: PUSH
2453: LD_INT 0
2455: ST_TO_ADDR
// if Multiplayer then
2456: LD_OWVAR 4
2460: IFFALSE 2478
// begin hc_gallery :=  ;
2462: LD_ADDR_OWVAR 33
2466: PUSH
2467: LD_STRING 
2469: ST_TO_ADDR
// hc_face_number := 0 ;
2470: LD_ADDR_OWVAR 34
2474: PUSH
2475: LD_INT 0
2477: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2478: LD_ADDR_VAR 0 11
2482: PUSH
2483: CALL_OW 44
2487: ST_TO_ADDR
// if global_defined then
2488: LD_LOC 2
2492: IFFALSE 2630
// begin j := i ;
2494: LD_ADDR_VAR 0 10
2498: PUSH
2499: LD_VAR 0 9
2503: ST_TO_ADDR
// if cl = class_soldier then
2504: LD_VAR 0 3
2508: PUSH
2509: LD_INT 1
2511: EQUAL
2512: IFFALSE 2530
// j := i + soldiers_created ;
2514: LD_ADDR_VAR 0 10
2518: PUSH
2519: LD_VAR 0 9
2523: PUSH
2524: LD_LOC 3
2528: PLUS
2529: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2530: LD_LOC 1
2534: PUSH
2535: LD_VAR 0 3
2539: ARRAY
2540: PUSH
2541: LD_VAR 0 10
2545: ARRAY
2546: PPUSH
2547: LD_VAR 0 11
2551: PPUSH
2552: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2556: LD_VAR 0 11
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_LOC 1
2568: PUSH
2569: LD_VAR 0 3
2573: ARRAY
2574: PUSH
2575: LD_VAR 0 10
2579: ARRAY
2580: PPUSH
2581: LD_INT 2
2583: PPUSH
2584: CALL_OW 260
2588: PPUSH
2589: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2593: LD_VAR 0 11
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: LD_LOC 1
2605: PUSH
2606: LD_VAR 0 3
2610: ARRAY
2611: PUSH
2612: LD_VAR 0 10
2616: ARRAY
2617: PPUSH
2618: LD_INT 1
2620: PPUSH
2621: CALL_OW 260
2625: PPUSH
2626: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2630: LD_VAR 0 11
2634: PPUSH
2635: LD_VAR 0 4
2639: PPUSH
2640: LD_VAR 0 5
2644: PPUSH
2645: LD_VAR 0 6
2649: PPUSH
2650: LD_INT 0
2652: PPUSH
2653: CALL_OW 50
// result := result ^ [ un ] ;
2657: LD_ADDR_VAR 0 8
2661: PUSH
2662: LD_VAR 0 8
2666: PUSH
2667: LD_VAR 0 11
2671: PUSH
2672: EMPTY
2673: LIST
2674: ADD
2675: ST_TO_ADDR
// end ;
2676: GO 2283
2678: POP
2679: POP
// if not global_defined then
2680: LD_LOC 2
2684: NOT
2685: IFFALSE 2747
// if cl = class_soldier and global_units then
2687: LD_VAR 0 3
2691: PUSH
2692: LD_INT 1
2694: EQUAL
2695: PUSH
2696: LD_LOC 1
2700: AND
2701: IFFALSE 2728
// global_units := [ global_units [ 1 ] ^ result ] else
2703: LD_ADDR_LOC 1
2707: PUSH
2708: LD_LOC 1
2712: PUSH
2713: LD_INT 1
2715: ARRAY
2716: PUSH
2717: LD_VAR 0 8
2721: ADD
2722: PUSH
2723: EMPTY
2724: LIST
2725: ST_TO_ADDR
2726: GO 2747
// global_units := global_units ^ [ result ] ;
2728: LD_ADDR_LOC 1
2732: PUSH
2733: LD_LOC 1
2737: PUSH
2738: LD_VAR 0 8
2742: PUSH
2743: EMPTY
2744: LIST
2745: ADD
2746: ST_TO_ADDR
// if commander then
2747: LD_FROM_VAR 0 7
2751: IFFALSE 2798
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2753: LD_ADDR_EXP 43
2757: PUSH
2758: LD_EXP 43
2762: PPUSH
2763: LD_OWVAR 20
2767: PPUSH
2768: LD_EXP 43
2772: PUSH
2773: LD_OWVAR 20
2777: ARRAY
2778: PUSH
2779: LD_VAR 0 11
2783: ADD
2784: PPUSH
2785: CALL_OW 1
2789: ST_TO_ADDR
// commander := false ;
2790: LD_VAR 0 7
2794: PUSH
2795: LD_INT 0
2797: ST_TO_ADDR
// end ; end ;
2798: LD_VAR 0 8
2802: RET
// function prepare_buldozer ( x , y , r , pos ) ; var nation ; begin
2803: LD_INT 0
2805: PPUSH
2806: PPUSH
// if uc_nation = 2 then
2807: LD_OWVAR 21
2811: PUSH
2812: LD_INT 2
2814: EQUAL
2815: IFFALSE 2837
// begin nation := uc_nation ;
2817: LD_ADDR_VAR 0 6
2821: PUSH
2822: LD_OWVAR 21
2826: ST_TO_ADDR
// uc_nation := 1 ;
2827: LD_ADDR_OWVAR 21
2831: PUSH
2832: LD_INT 1
2834: ST_TO_ADDR
// end else
2835: GO 2845
// nation := false ;
2837: LD_ADDR_VAR 0 6
2841: PUSH
2842: LD_INT 0
2844: ST_TO_ADDR
// vc_engine = engine_combustion ;
2845: LD_ADDR_OWVAR 39
2849: PUSH
2850: LD_INT 1
2852: ST_TO_ADDR
// vc_control = control_manual ;
2853: LD_ADDR_OWVAR 38
2857: PUSH
2858: LD_INT 1
2860: ST_TO_ADDR
// if uc_nation = nation_russian then
2861: LD_OWVAR 21
2865: PUSH
2866: LD_INT 3
2868: EQUAL
2869: IFFALSE 2889
// begin vc_chassis = ru_heavy_tracked ;
2871: LD_ADDR_OWVAR 37
2875: PUSH
2876: LD_INT 24
2878: ST_TO_ADDR
// vc_weapon = ru_bulldozer ;
2879: LD_ADDR_OWVAR 40
2883: PUSH
2884: LD_INT 53
2886: ST_TO_ADDR
// end else
2887: GO 2905
// begin vc_chassis = us_heavy_tracked ;
2889: LD_ADDR_OWVAR 37
2893: PUSH
2894: LD_INT 4
2896: ST_TO_ADDR
// vc_weapon = us_bulldozer ;
2897: LD_ADDR_OWVAR 40
2901: PUSH
2902: LD_INT 14
2904: ST_TO_ADDR
// end ; case pos of 1 :
2905: LD_VAR 0 4
2909: PUSH
2910: LD_INT 1
2912: DOUBLE
2913: EQUAL
2914: IFTRUE 2918
2916: GO 2929
2918: POP
// uc_direction := 2 ; 2 :
2919: LD_ADDR_OWVAR 24
2923: PUSH
2924: LD_INT 2
2926: ST_TO_ADDR
2927: GO 2987
2929: LD_INT 2
2931: DOUBLE
2932: EQUAL
2933: IFTRUE 2937
2935: GO 2948
2937: POP
// uc_direction := 3 ; 3 :
2938: LD_ADDR_OWVAR 24
2942: PUSH
2943: LD_INT 3
2945: ST_TO_ADDR
2946: GO 2987
2948: LD_INT 3
2950: DOUBLE
2951: EQUAL
2952: IFTRUE 2956
2954: GO 2967
2956: POP
// uc_direction := 0 ; 4 :
2957: LD_ADDR_OWVAR 24
2961: PUSH
2962: LD_INT 0
2964: ST_TO_ADDR
2965: GO 2987
2967: LD_INT 4
2969: DOUBLE
2970: EQUAL
2971: IFTRUE 2975
2973: GO 2986
2975: POP
// uc_direction := 5 ; end ;
2976: LD_ADDR_OWVAR 24
2980: PUSH
2981: LD_INT 5
2983: ST_TO_ADDR
2984: GO 2987
2986: POP
// PlaceUnitXYR ( CreateVehicle , x , y , r , false ) ;
2987: CALL_OW 45
2991: PPUSH
2992: LD_VAR 0 1
2996: PPUSH
2997: LD_VAR 0 2
3001: PPUSH
3002: LD_VAR 0 3
3006: PPUSH
3007: LD_INT 0
3009: PPUSH
3010: CALL_OW 50
// if nation then
3014: LD_VAR 0 6
3018: IFFALSE 3030
// uc_nation := nation ;
3020: LD_ADDR_OWVAR 21
3024: PUSH
3025: LD_VAR 0 6
3029: ST_TO_ADDR
// end ;
3030: LD_VAR 0 5
3034: RET
// function prepare_side ( side ) ; var pos , x , y , i , r , sol , br , dep , neng , nsci , nmech , nsol ; begin
3035: LD_INT 0
3037: PPUSH
3038: PPUSH
3039: PPUSH
3040: PPUSH
3041: PPUSH
3042: PPUSH
3043: PPUSH
3044: PPUSH
3045: PPUSH
3046: PPUSH
3047: PPUSH
3048: PPUSH
3049: PPUSH
// pos := Side_Positions [ side ] ;
3050: LD_ADDR_VAR 0 3
3054: PUSH
3055: LD_EXP 34
3059: PUSH
3060: LD_VAR 0 1
3064: ARRAY
3065: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3066: LD_ADDR_OWVAR 21
3070: PUSH
3071: LD_EXP 35
3075: PUSH
3076: LD_VAR 0 1
3080: ARRAY
3081: ST_TO_ADDR
// uc_side := side ;
3082: LD_ADDR_OWVAR 20
3086: PUSH
3087: LD_VAR 0 1
3091: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3092: LD_ADDR_VAR 0 4
3096: PUSH
3097: LD_EXP 40
3101: PUSH
3102: LD_VAR 0 3
3106: ARRAY
3107: PUSH
3108: LD_INT 1
3110: ARRAY
3111: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3112: LD_ADDR_VAR 0 5
3116: PUSH
3117: LD_EXP 40
3121: PUSH
3122: LD_VAR 0 3
3126: ARRAY
3127: PUSH
3128: LD_INT 2
3130: ARRAY
3131: ST_TO_ADDR
// if is_depot then
3132: LD_EXP 15
3136: IFFALSE 3279
// begin bc_type = b_depot ;
3138: LD_ADDR_OWVAR 42
3142: PUSH
3143: LD_INT 0
3145: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , Depot_Def [ pos ] [ 3 ] ) ;
3146: LD_ADDR_VAR 0 10
3150: PUSH
3151: LD_VAR 0 4
3155: PPUSH
3156: LD_VAR 0 5
3160: PPUSH
3161: LD_EXP 40
3165: PUSH
3166: LD_VAR 0 3
3170: ARRAY
3171: PUSH
3172: LD_INT 3
3174: ARRAY
3175: PPUSH
3176: CALL_OW 47
3180: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3181: LD_VAR 0 10
3185: PPUSH
3186: LD_STRING @
3188: PUSH
3189: LD_VAR 0 1
3193: STR
3194: PPUSH
3195: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3199: LD_VAR 0 10
3203: PPUSH
3204: CALL_OW 274
3208: PPUSH
3209: LD_INT 1
3211: PPUSH
3212: LD_EXP 21
3216: PUSH
3217: LD_INT 1
3219: ARRAY
3220: PPUSH
3221: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3225: LD_VAR 0 10
3229: PPUSH
3230: CALL_OW 274
3234: PPUSH
3235: LD_INT 2
3237: PPUSH
3238: LD_EXP 21
3242: PUSH
3243: LD_INT 2
3245: ARRAY
3246: PPUSH
3247: CALL_OW 277
// SetResourceType ( GetBase ( result ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3251: LD_VAR 0 2
3255: PPUSH
3256: CALL_OW 274
3260: PPUSH
3261: LD_INT 3
3263: PPUSH
3264: LD_EXP 21
3268: PUSH
3269: LD_INT 3
3271: ARRAY
3272: PPUSH
3273: CALL_OW 277
// end else
3277: GO 3423
// begin for i := 1 to 3 do
3279: LD_ADDR_VAR 0 6
3283: PUSH
3284: DOUBLE
3285: LD_INT 1
3287: DEC
3288: ST_TO_ADDR
3289: LD_INT 3
3291: PUSH
3292: FOR_TO
3293: IFFALSE 3421
// begin r := starting_resources [ i ] ;
3295: LD_ADDR_VAR 0 7
3299: PUSH
3300: LD_EXP 21
3304: PUSH
3305: LD_VAR 0 6
3309: ARRAY
3310: ST_TO_ADDR
// while r >= 10 do
3311: LD_VAR 0 7
3315: PUSH
3316: LD_INT 10
3318: GREATEREQUAL
3319: IFFALSE 3419
// if r > 50 then
3321: LD_VAR 0 7
3325: PUSH
3326: LD_INT 50
3328: GREATER
3329: IFFALSE 3375
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3331: LD_VAR 0 6
3335: PPUSH
3336: LD_INT 5
3338: PPUSH
3339: LD_VAR 0 4
3343: PPUSH
3344: LD_VAR 0 5
3348: PPUSH
3349: LD_INT 4
3351: PPUSH
3352: LD_INT 0
3354: PPUSH
3355: CALL_OW 60
// r := r - 50 ;
3359: LD_ADDR_VAR 0 7
3363: PUSH
3364: LD_VAR 0 7
3368: PUSH
3369: LD_INT 50
3371: MINUS
3372: ST_TO_ADDR
// end else
3373: GO 3417
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3375: LD_VAR 0 6
3379: PPUSH
3380: LD_VAR 0 7
3384: PUSH
3385: LD_INT 10
3387: DIV
3388: PPUSH
3389: LD_VAR 0 4
3393: PPUSH
3394: LD_VAR 0 5
3398: PPUSH
3399: LD_INT 4
3401: PPUSH
3402: LD_INT 0
3404: PPUSH
3405: CALL_OW 60
// r := 0 ;
3409: LD_ADDR_VAR 0 7
3413: PUSH
3414: LD_INT 0
3416: ST_TO_ADDR
// end ;
3417: GO 3311
// end ;
3419: GO 3292
3421: POP
3422: POP
// end ; x := start_def [ pos ] [ 1 ] ;
3423: LD_ADDR_VAR 0 4
3427: PUSH
3428: LD_EXP 41
3432: PUSH
3433: LD_VAR 0 3
3437: ARRAY
3438: PUSH
3439: LD_INT 1
3441: ARRAY
3442: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3443: LD_ADDR_VAR 0 5
3447: PUSH
3448: LD_EXP 41
3452: PUSH
3453: LD_VAR 0 3
3457: ARRAY
3458: PUSH
3459: LD_INT 2
3461: ARRAY
3462: ST_TO_ADDR
// for r in starting_crates do
3463: LD_ADDR_VAR 0 7
3467: PUSH
3468: LD_EXP 20
3472: PUSH
3473: FOR_IN
3474: IFFALSE 3506
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3476: LD_INT 1
3478: PPUSH
3479: LD_INT 5
3481: PPUSH
3482: LD_VAR 0 4
3486: PPUSH
3487: LD_VAR 0 5
3491: PPUSH
3492: LD_VAR 0 7
3496: PPUSH
3497: LD_INT 0
3499: PPUSH
3500: CALL_OW 60
3504: GO 3473
3506: POP
3507: POP
// if def_morale_flags then
3508: LD_EXP 9
3512: IFFALSE 3591
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3514: LD_ADDR_EXP 45
3518: PUSH
3519: LD_EXP 45
3523: PUSH
3524: LD_VAR 0 1
3528: PPUSH
3529: LD_VAR 0 4
3533: PPUSH
3534: LD_VAR 0 5
3538: PPUSH
3539: LD_INT 1
3541: PUSH
3542: LD_INT 100
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: PUSH
3549: LD_INT 2
3551: PUSH
3552: LD_INT 50
3554: PUSH
3555: EMPTY
3556: LIST
3557: LIST
3558: PUSH
3559: LD_INT 3
3561: PUSH
3562: LD_INT 20
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: PUSH
3569: LD_INT 20
3571: PUSH
3572: LD_INT 100
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: PPUSH
3585: CALL_OW 418
3589: ADD
3590: ST_TO_ADDR
// neng := number_of_people ;
3591: LD_ADDR_VAR 0 11
3595: PUSH
3596: LD_EXP 17
3600: ST_TO_ADDR
// nsol := neng div 4 ;
3601: LD_ADDR_VAR 0 14
3605: PUSH
3606: LD_VAR 0 11
3610: PUSH
3611: LD_INT 4
3613: DIV
3614: ST_TO_ADDR
// neng := neng - nsol ;
3615: LD_ADDR_VAR 0 11
3619: PUSH
3620: LD_VAR 0 11
3624: PUSH
3625: LD_VAR 0 14
3629: MINUS
3630: ST_TO_ADDR
// nsci := neng div 3 ;
3631: LD_ADDR_VAR 0 12
3635: PUSH
3636: LD_VAR 0 11
3640: PUSH
3641: LD_INT 3
3643: DIV
3644: ST_TO_ADDR
// if nsci < 1 then
3645: LD_VAR 0 12
3649: PUSH
3650: LD_INT 1
3652: LESS
3653: IFFALSE 3663
// nsci := 1 ;
3655: LD_ADDR_VAR 0 12
3659: PUSH
3660: LD_INT 1
3662: ST_TO_ADDR
// neng := neng - nsci ;
3663: LD_ADDR_VAR 0 11
3667: PUSH
3668: LD_VAR 0 11
3672: PUSH
3673: LD_VAR 0 12
3677: MINUS
3678: ST_TO_ADDR
// nmech := neng div 2 ;
3679: LD_ADDR_VAR 0 13
3683: PUSH
3684: LD_VAR 0 11
3688: PUSH
3689: LD_INT 2
3691: DIV
3692: ST_TO_ADDR
// neng := neng - nmech ;
3693: LD_ADDR_VAR 0 11
3697: PUSH
3698: LD_VAR 0 11
3702: PUSH
3703: LD_VAR 0 13
3707: MINUS
3708: ST_TO_ADDR
// if neng < 1 then
3709: LD_VAR 0 11
3713: PUSH
3714: LD_INT 1
3716: LESS
3717: IFFALSE 3727
// neng := 1 ;
3719: LD_ADDR_VAR 0 11
3723: PUSH
3724: LD_INT 1
3726: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
3727: LD_ADDR_VAR 0 4
3731: PUSH
3732: LD_EXP 41
3736: PUSH
3737: LD_VAR 0 3
3741: ARRAY
3742: PUSH
3743: LD_INT 1
3745: ARRAY
3746: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3747: LD_ADDR_VAR 0 5
3751: PUSH
3752: LD_EXP 41
3756: PUSH
3757: LD_VAR 0 3
3761: ARRAY
3762: PUSH
3763: LD_INT 2
3765: ARRAY
3766: ST_TO_ADDR
// if not is_depot then
3767: LD_EXP 15
3771: NOT
3772: IFFALSE 3796
// prepare_buldozer ( x , y , 2 , pos ) ;
3774: LD_VAR 0 4
3778: PPUSH
3779: LD_VAR 0 5
3783: PPUSH
3784: LD_INT 2
3786: PPUSH
3787: LD_VAR 0 3
3791: PPUSH
3792: CALL 2803 0 4
// commander := true ;
3796: LD_ADDR_EXP 44
3800: PUSH
3801: LD_INT 1
3803: ST_TO_ADDR
// prepare_people ( side , 1 , class_soldier , x , y , 5 , commander ) ;
3804: LD_VAR 0 1
3808: PPUSH
3809: LD_INT 1
3811: PPUSH
3812: LD_INT 1
3814: PPUSH
3815: LD_VAR 0 4
3819: PPUSH
3820: LD_VAR 0 5
3824: PPUSH
3825: LD_INT 5
3827: PPUSH
3828: LD_ADDR_EXP 44
3832: PPUSH
3833: CALL 2255 0 7
// commander := false ;
3837: LD_ADDR_EXP 44
3841: PUSH
3842: LD_INT 0
3844: ST_TO_ADDR
// prepare_people ( side , nsol - 1 , class_soldier , x , y , 5 , commander ) ;
3845: LD_VAR 0 1
3849: PPUSH
3850: LD_VAR 0 14
3854: PUSH
3855: LD_INT 1
3857: MINUS
3858: PPUSH
3859: LD_INT 1
3861: PPUSH
3862: LD_VAR 0 4
3866: PPUSH
3867: LD_VAR 0 5
3871: PPUSH
3872: LD_INT 5
3874: PPUSH
3875: LD_ADDR_EXP 44
3879: PPUSH
3880: CALL 2255 0 7
// prepare_people ( side , neng , class_engineer , x , y , 5 , commander ) ;
3884: LD_VAR 0 1
3888: PPUSH
3889: LD_VAR 0 11
3893: PPUSH
3894: LD_INT 2
3896: PPUSH
3897: LD_VAR 0 4
3901: PPUSH
3902: LD_VAR 0 5
3906: PPUSH
3907: LD_INT 5
3909: PPUSH
3910: LD_ADDR_EXP 44
3914: PPUSH
3915: CALL 2255 0 7
// prepare_people ( side , nmech , class_mechanic , x , y , 5 , commander ) ;
3919: LD_VAR 0 1
3923: PPUSH
3924: LD_VAR 0 13
3928: PPUSH
3929: LD_INT 3
3931: PPUSH
3932: LD_VAR 0 4
3936: PPUSH
3937: LD_VAR 0 5
3941: PPUSH
3942: LD_INT 5
3944: PPUSH
3945: LD_ADDR_EXP 44
3949: PPUSH
3950: CALL 2255 0 7
// prepare_people ( side , nsci , class_scientistic , x , y , 5 , commander ) ;
3954: LD_VAR 0 1
3958: PPUSH
3959: LD_VAR 0 12
3963: PPUSH
3964: LD_INT 4
3966: PPUSH
3967: LD_VAR 0 4
3971: PPUSH
3972: LD_VAR 0 5
3976: PPUSH
3977: LD_INT 5
3979: PPUSH
3980: LD_ADDR_EXP 44
3984: PPUSH
3985: CALL 2255 0 7
// if not global_defined then
3989: LD_LOC 2
3993: NOT
3994: IFFALSE 4004
// global_defined := true ;
3996: LD_ADDR_LOC 2
4000: PUSH
4001: LD_INT 1
4003: ST_TO_ADDR
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4004: LD_EXP 10
4008: PUSH
4009: LD_INT 20
4011: PPUSH
4012: LD_VAR 0 1
4016: PPUSH
4017: CALL_OW 321
4021: PUSH
4022: LD_INT 1
4024: EQUAL
4025: AND
4026: IFFALSE 4043
// SetTech ( tech_SibDet , side , state_researched ) ;
4028: LD_INT 20
4030: PPUSH
4031: LD_VAR 0 1
4035: PPUSH
4036: LD_INT 2
4038: PPUSH
4039: CALL_OW 322
// if def_siberite_bomb = 1 then
4043: LD_EXP 13
4047: PUSH
4048: LD_INT 1
4050: EQUAL
4051: IFFALSE 4085
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4053: LD_INT 25
4055: PPUSH
4056: LD_VAR 0 1
4060: PPUSH
4061: LD_INT 1
4063: PPUSH
4064: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4068: LD_INT 73
4070: PPUSH
4071: LD_VAR 0 1
4075: PPUSH
4076: LD_INT 1
4078: PPUSH
4079: CALL_OW 322
// end else
4083: GO 4115
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4085: LD_INT 25
4087: PPUSH
4088: LD_VAR 0 1
4092: PPUSH
4093: LD_INT 0
4095: PPUSH
4096: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4100: LD_INT 73
4102: PPUSH
4103: LD_VAR 0 1
4107: PPUSH
4108: LD_INT 0
4110: PPUSH
4111: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4115: LD_INT 24
4117: PPUSH
4118: LD_VAR 0 1
4122: PPUSH
4123: LD_INT 0
4125: PPUSH
4126: CALL_OW 322
// end ;
4130: LD_VAR 0 2
4134: RET
// every 0 0$1 do
4135: GO 4137
4137: DISABLE
// if ( def_siberite_bomb > 1 ) then
4138: LD_EXP 13
4142: PUSH
4143: LD_INT 1
4145: GREATER
4146: IFFALSE 4161
// begin wait ( siberite_bomb_Delay ) ;
4148: LD_EXP 23
4152: PPUSH
4153: CALL_OW 67
// EnableSibFiss ;
4157: CALL 4162 0 0
// end ;
4161: END
// function EnableSibFiss ; var i ; begin
4162: LD_INT 0
4164: PPUSH
4165: PPUSH
// for i := 1 to 8 do
4166: LD_ADDR_VAR 0 2
4170: PUSH
4171: DOUBLE
4172: LD_INT 1
4174: DEC
4175: ST_TO_ADDR
4176: LD_INT 8
4178: PUSH
4179: FOR_TO
4180: IFFALSE 4226
// if Side_Positions [ i ] then
4182: LD_EXP 34
4186: PUSH
4187: LD_VAR 0 2
4191: ARRAY
4192: IFFALSE 4224
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4194: LD_INT 25
4196: PPUSH
4197: LD_VAR 0 2
4201: PPUSH
4202: LD_INT 1
4204: PPUSH
4205: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4209: LD_INT 73
4211: PPUSH
4212: LD_VAR 0 2
4216: PPUSH
4217: LD_INT 1
4219: PPUSH
4220: CALL_OW 322
// end ;
4224: GO 4179
4226: POP
4227: POP
// end ;
4228: LD_VAR 0 1
4232: RET
// function prepare_sides ; var i ; begin
4233: LD_INT 0
4235: PPUSH
4236: PPUSH
// global_units := [ ] ;
4237: LD_ADDR_LOC 1
4241: PUSH
4242: EMPTY
4243: ST_TO_ADDR
// global_defined := false ;
4244: LD_ADDR_LOC 2
4248: PUSH
4249: LD_INT 0
4251: ST_TO_ADDR
// for i := 1 to 8 do
4252: LD_ADDR_VAR 0 2
4256: PUSH
4257: DOUBLE
4258: LD_INT 1
4260: DEC
4261: ST_TO_ADDR
4262: LD_INT 8
4264: PUSH
4265: FOR_TO
4266: IFFALSE 4291
// if Side_Positions [ i ] then
4268: LD_EXP 34
4272: PUSH
4273: LD_VAR 0 2
4277: ARRAY
4278: IFFALSE 4289
// prepare_side ( i ) ;
4280: LD_VAR 0 2
4284: PPUSH
4285: CALL 3035 0 1
4289: GO 4265
4291: POP
4292: POP
// end ;
4293: LD_VAR 0 1
4297: RET
// starting begin disable ( 98 ) ;
4298: LD_INT 98
4300: DISABLE_MARKED
// disable ( 99 ) ;
4301: LD_INT 99
4303: DISABLE_MARKED
// disable ( 400 ) ;
4304: LD_INT 400
4306: DISABLE_MARKED
// disable ( 401 ) ;
4307: LD_INT 401
4309: DISABLE_MARKED
// mp_selectmsg := true ;
4310: LD_ADDR_OWVAR 13
4314: PUSH
4315: LD_INT 1
4317: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4318: CALL 681 0 0
// init_map ;
4322: CALL 436 0 0
// set_shared_visions_and_alliances ;
4326: CALL 1892 0 0
// ResetFog ;
4330: CALL_OW 335
// ClearAllFogForSide ( Player_Side ) ;
4334: LD_EXP 30
4338: PPUSH
4339: CALL_OW 520
// prepare_sides ;
4343: CALL 4233 0 0
// Init_Win_Condition ;
4347: CALL 8204 0 0
// init_shipments ;
4351: CALL 5507 0 0
// init_respawn ;
4355: CALL 6000 0 0
// InitApeman ;
4359: CALL 4682 0 0
// your_side := Player_Side ;
4363: LD_ADDR_OWVAR 2
4367: PUSH
4368: LD_EXP 30
4372: ST_TO_ADDR
// music_nat := Side_Nations [ your_side ] ;
4373: LD_ADDR_OWVAR 71
4377: PUSH
4378: LD_EXP 35
4382: PUSH
4383: LD_OWVAR 2
4387: ARRAY
4388: ST_TO_ADDR
// if IAmSpec then
4389: CALL_OW 531
4393: IFFALSE 4417
// begin fogOff ( true ) ;
4395: LD_INT 1
4397: PPUSH
4398: CALL_OW 344
// CenterNowOnXY ( 104 , 69 ) ;
4402: LD_INT 104
4404: PPUSH
4405: LD_INT 69
4407: PPUSH
4408: CALL_OW 86
// enable ( 400 ) ;
4412: LD_INT 400
4414: ENABLE_MARKED
// end else
4415: GO 4463
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4417: LD_EXP 41
4421: PUSH
4422: LD_EXP 34
4426: PUSH
4427: LD_OWVAR 2
4431: ARRAY
4432: ARRAY
4433: PUSH
4434: LD_INT 1
4436: ARRAY
4437: PPUSH
4438: LD_EXP 41
4442: PUSH
4443: LD_EXP 34
4447: PUSH
4448: LD_OWVAR 2
4452: ARRAY
4453: ARRAY
4454: PUSH
4455: LD_INT 2
4457: ARRAY
4458: PPUSH
4459: CALL_OW 86
// end ; BuildUpAreas := [ nw , ne , sw , se ] ;
4463: LD_ADDR_EXP 56
4467: PUSH
4468: LD_INT 12
4470: PUSH
4471: LD_INT 13
4473: PUSH
4474: LD_INT 14
4476: PUSH
4477: LD_INT 15
4479: PUSH
4480: EMPTY
4481: LIST
4482: LIST
4483: LIST
4484: LIST
4485: ST_TO_ADDR
// BeginBuildUp ;
4486: CALL 7367 0 0
// end ; end_of_file
4490: END
// every 20 20$00 trigger apemanNumber do
4491: LD_EXP 47
4495: IFFALSE 4528
4497: GO 4499
4499: DISABLE
// begin enable ;
4500: ENABLE
// if apeLevel >= 8 then
4501: LD_EXP 52
4505: PUSH
4506: LD_INT 8
4508: GREATEREQUAL
4509: IFFALSE 4514
// disable else
4511: DISABLE
4512: GO 4528
// apeLevel := apeLevel + 1 ;
4514: LD_ADDR_EXP 52
4518: PUSH
4519: LD_EXP 52
4523: PUSH
4524: LD_INT 1
4526: PLUS
4527: ST_TO_ADDR
// end ;
4528: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
4529: LD_EXP 47
4533: PUSH
4534: LD_EXP 48
4538: LESS
4539: IFFALSE 4679
4541: GO 4543
4543: DISABLE
4544: LD_INT 0
4546: PPUSH
4547: PPUSH
4548: PPUSH
4549: PPUSH
// begin enable ;
4550: ENABLE
// for i := 1 to apemanPos do
4551: LD_ADDR_VAR 0 1
4555: PUSH
4556: DOUBLE
4557: LD_INT 1
4559: DEC
4560: ST_TO_ADDR
4561: LD_EXP 50
4565: PUSH
4566: FOR_TO
4567: IFFALSE 4677
// begin if apemanPlayerCount [ i ] then
4569: LD_EXP 51
4573: PUSH
4574: LD_VAR 0 1
4578: ARRAY
4579: IFFALSE 4675
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
4581: LD_EXP 51
4585: PUSH
4586: LD_VAR 0 1
4590: ARRAY
4591: PUSH
4592: LD_EXP 50
4596: PUSH
4597: LD_VAR 0 1
4601: ARRAY
4602: GREATER
4603: IFFALSE 4675
// begin ape := PrepareApeman ;
4605: LD_ADDR_VAR 0 2
4609: PUSH
4610: CALL 5182 0 0
4614: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
4615: LD_VAR 0 2
4619: PPUSH
4620: LD_EXP 53
4624: PUSH
4625: LD_VAR 0 1
4629: ARRAY
4630: PPUSH
4631: LD_INT 0
4633: PPUSH
4634: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
4638: LD_ADDR_EXP 50
4642: PUSH
4643: LD_EXP 50
4647: PPUSH
4648: LD_VAR 0 1
4652: PPUSH
4653: LD_EXP 50
4657: PUSH
4658: LD_VAR 0 1
4662: ARRAY
4663: PUSH
4664: LD_VAR 0 2
4668: UNION
4669: PPUSH
4670: CALL_OW 1
4674: ST_TO_ADDR
// end ; end ; end ;
4675: GO 4566
4677: POP
4678: POP
// end ;
4679: PPOPN 4
4681: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
4682: LD_INT 0
4684: PPUSH
4685: PPUSH
4686: PPUSH
4687: PPUSH
4688: PPUSH
4689: PPUSH
4690: PPUSH
// playersAmount := 0 ;
4691: LD_ADDR_VAR 0 3
4695: PUSH
4696: LD_INT 0
4698: ST_TO_ADDR
// _apeAreas := [ nw , ne , sw , se , ] ;
4699: LD_ADDR_VAR 0 7
4703: PUSH
4704: LD_INT 12
4706: PUSH
4707: LD_INT 13
4709: PUSH
4710: LD_INT 14
4712: PUSH
4713: LD_INT 15
4715: PUSH
4716: EMPTY
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4722: LD_ADDR_EXP 53
4726: PUSH
4727: LD_INT 0
4729: PUSH
4730: LD_INT 0
4732: PUSH
4733: LD_INT 0
4735: PUSH
4736: LD_INT 0
4738: PUSH
4739: LD_INT 0
4741: PUSH
4742: LD_INT 0
4744: PUSH
4745: LD_INT 0
4747: PUSH
4748: LD_INT 0
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: ST_TO_ADDR
// for j = 1 to Side_Positions do
4761: LD_ADDR_VAR 0 4
4765: PUSH
4766: DOUBLE
4767: LD_INT 1
4769: DEC
4770: ST_TO_ADDR
4771: LD_EXP 34
4775: PUSH
4776: FOR_TO
4777: IFFALSE 4844
// if Side_Positions [ j ] then
4779: LD_EXP 34
4783: PUSH
4784: LD_VAR 0 4
4788: ARRAY
4789: IFFALSE 4842
// begin playersAmount := playersAmount + 1 ;
4791: LD_ADDR_VAR 0 3
4795: PUSH
4796: LD_VAR 0 3
4800: PUSH
4801: LD_INT 1
4803: PLUS
4804: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
4805: LD_ADDR_EXP 53
4809: PUSH
4810: LD_EXP 53
4814: PPUSH
4815: LD_VAR 0 4
4819: PPUSH
4820: LD_VAR 0 7
4824: PUSH
4825: LD_EXP 34
4829: PUSH
4830: LD_VAR 0 4
4834: ARRAY
4835: ARRAY
4836: PPUSH
4837: CALL_OW 1
4841: ST_TO_ADDR
// end ;
4842: GO 4776
4844: POP
4845: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
4846: LD_ADDR_EXP 49
4850: PUSH
4851: LD_INT 3
4853: PUSH
4854: LD_EXP 19
4858: MUL
4859: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
4860: LD_ADDR_EXP 47
4864: PUSH
4865: LD_VAR 0 3
4869: PUSH
4870: LD_EXP 49
4874: MUL
4875: ST_TO_ADDR
// apemanLimit := apemanNumber ;
4876: LD_ADDR_EXP 48
4880: PUSH
4881: LD_EXP 47
4885: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4886: LD_ADDR_EXP 50
4890: PUSH
4891: LD_INT 0
4893: PUSH
4894: LD_INT 0
4896: PUSH
4897: LD_INT 0
4899: PUSH
4900: LD_INT 0
4902: PUSH
4903: LD_INT 0
4905: PUSH
4906: LD_INT 0
4908: PUSH
4909: LD_INT 0
4911: PUSH
4912: LD_INT 0
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4925: LD_ADDR_EXP 51
4929: PUSH
4930: LD_INT 0
4932: PUSH
4933: LD_INT 0
4935: PUSH
4936: LD_INT 0
4938: PUSH
4939: LD_INT 0
4941: PUSH
4942: LD_INT 0
4944: PUSH
4945: LD_INT 0
4947: PUSH
4948: LD_INT 0
4950: PUSH
4951: LD_INT 0
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: LIST
4958: LIST
4959: LIST
4960: LIST
4961: LIST
4962: LIST
4963: ST_TO_ADDR
// apeLevel := 1 ;
4964: LD_ADDR_EXP 52
4968: PUSH
4969: LD_INT 1
4971: ST_TO_ADDR
// if not apemanNumber then
4972: LD_EXP 47
4976: NOT
4977: IFFALSE 4981
// exit ;
4979: GO 5177
// for i := 1 to apemanPerPlayer do
4981: LD_ADDR_VAR 0 2
4985: PUSH
4986: DOUBLE
4987: LD_INT 1
4989: DEC
4990: ST_TO_ADDR
4991: LD_EXP 49
4995: PUSH
4996: FOR_TO
4997: IFFALSE 5175
// begin for j := 1 to Side_Positions do
4999: LD_ADDR_VAR 0 4
5003: PUSH
5004: DOUBLE
5005: LD_INT 1
5007: DEC
5008: ST_TO_ADDR
5009: LD_EXP 34
5013: PUSH
5014: FOR_TO
5015: IFFALSE 5171
// if Side_Positions [ j ] then
5017: LD_EXP 34
5021: PUSH
5022: LD_VAR 0 4
5026: ARRAY
5027: IFFALSE 5169
// begin pos := Side_Positions [ j ] ;
5029: LD_ADDR_VAR 0 6
5033: PUSH
5034: LD_EXP 34
5038: PUSH
5039: LD_VAR 0 4
5043: ARRAY
5044: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5045: LD_ADDR_EXP 51
5049: PUSH
5050: LD_EXP 51
5054: PPUSH
5055: LD_VAR 0 4
5059: PPUSH
5060: LD_EXP 51
5064: PUSH
5065: LD_VAR 0 4
5069: ARRAY
5070: PUSH
5071: LD_INT 1
5073: PLUS
5074: PPUSH
5075: CALL_OW 1
5079: ST_TO_ADDR
// ape := PrepareApeman ;
5080: LD_ADDR_VAR 0 5
5084: PUSH
5085: CALL 5182 0 0
5089: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5090: LD_ADDR_EXP 50
5094: PUSH
5095: LD_EXP 50
5099: PPUSH
5100: LD_VAR 0 4
5104: PPUSH
5105: LD_EXP 50
5109: PUSH
5110: LD_VAR 0 4
5114: ARRAY
5115: PPUSH
5116: LD_EXP 50
5120: PUSH
5121: LD_VAR 0 4
5125: ARRAY
5126: PUSH
5127: LD_INT 1
5129: PLUS
5130: PPUSH
5131: LD_VAR 0 5
5135: PPUSH
5136: CALL_OW 1
5140: PPUSH
5141: CALL_OW 1
5145: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5146: LD_VAR 0 5
5150: PPUSH
5151: LD_EXP 53
5155: PUSH
5156: LD_VAR 0 4
5160: ARRAY
5161: PPUSH
5162: LD_INT 0
5164: PPUSH
5165: CALL_OW 49
// end ;
5169: GO 5014
5171: POP
5172: POP
// end ;
5173: GO 4996
5175: POP
5176: POP
// end ;
5177: LD_VAR 0 1
5181: RET
// export function PrepareApeman ; var bonus ; begin
5182: LD_INT 0
5184: PPUSH
5185: PPUSH
// uc_side := 0 ;
5186: LD_ADDR_OWVAR 20
5190: PUSH
5191: LD_INT 0
5193: ST_TO_ADDR
// uc_nation := 0 ;
5194: LD_ADDR_OWVAR 21
5198: PUSH
5199: LD_INT 0
5201: ST_TO_ADDR
// InitHc ;
5202: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
5206: LD_ADDR_VAR 0 2
5210: PUSH
5211: LD_INT 1
5213: NEG
5214: PUSH
5215: LD_INT 0
5217: PUSH
5218: LD_INT 1
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: LIST
5225: PUSH
5226: LD_OWVAR 1
5230: PUSH
5231: LD_INT 3
5233: MOD
5234: PUSH
5235: LD_INT 1
5237: PLUS
5238: ARRAY
5239: ST_TO_ADDR
// hc_class := class_apeman ;
5240: LD_ADDR_OWVAR 28
5244: PUSH
5245: LD_INT 12
5247: ST_TO_ADDR
// hc_gallery :=  ;
5248: LD_ADDR_OWVAR 33
5252: PUSH
5253: LD_STRING 
5255: ST_TO_ADDR
// hc_name :=  ;
5256: LD_ADDR_OWVAR 26
5260: PUSH
5261: LD_STRING 
5263: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
5264: LD_ADDR_OWVAR 31
5268: PUSH
5269: LD_EXP 52
5273: PUSH
5274: LD_VAR 0 2
5278: PLUS
5279: PUSH
5280: LD_EXP 52
5284: PUSH
5285: LD_VAR 0 2
5289: PLUS
5290: PUSH
5291: LD_EXP 52
5295: PUSH
5296: LD_VAR 0 2
5300: PLUS
5301: PUSH
5302: LD_EXP 52
5306: PUSH
5307: LD_VAR 0 2
5311: PLUS
5312: PUSH
5313: EMPTY
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
5319: LD_ADDR_OWVAR 35
5323: PUSH
5324: LD_INT 10
5326: PUSH
5327: LD_VAR 0 2
5331: MUL
5332: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5333: LD_ADDR_OWVAR 29
5337: PUSH
5338: LD_INT 12
5340: PUSH
5341: LD_INT 10
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: ST_TO_ADDR
// result := CreateHuman ;
5348: LD_ADDR_VAR 0 1
5352: PUSH
5353: CALL_OW 44
5357: ST_TO_ADDR
// end ;
5358: LD_VAR 0 1
5362: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
5363: LD_INT 0
5365: PPUSH
5366: PPUSH
5367: PPUSH
// if not ape then
5368: LD_VAR 0 1
5372: NOT
5373: IFFALSE 5377
// exit ;
5375: GO 5502
// side := GetSide ( ape ) ;
5377: LD_ADDR_VAR 0 3
5381: PUSH
5382: LD_VAR 0 1
5386: PPUSH
5387: CALL_OW 255
5391: ST_TO_ADDR
// if not side then
5392: LD_VAR 0 3
5396: NOT
5397: IFFALSE 5451
// begin for i = 1 to apemanPos do
5399: LD_ADDR_VAR 0 4
5403: PUSH
5404: DOUBLE
5405: LD_INT 1
5407: DEC
5408: ST_TO_ADDR
5409: LD_EXP 50
5413: PUSH
5414: FOR_TO
5415: IFFALSE 5449
// if ape in apemanPos [ i ] then
5417: LD_VAR 0 1
5421: PUSH
5422: LD_EXP 50
5426: PUSH
5427: LD_VAR 0 4
5431: ARRAY
5432: IN
5433: IFFALSE 5447
// begin side := i ;
5435: LD_ADDR_VAR 0 3
5439: PUSH
5440: LD_VAR 0 4
5444: ST_TO_ADDR
// break ;
5445: GO 5449
// end ;
5447: GO 5414
5449: POP
5450: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
5451: LD_ADDR_EXP 50
5455: PUSH
5456: LD_EXP 50
5460: PPUSH
5461: LD_VAR 0 3
5465: PPUSH
5466: LD_EXP 50
5470: PUSH
5471: LD_VAR 0 3
5475: ARRAY
5476: PUSH
5477: LD_VAR 0 1
5481: DIFF
5482: PPUSH
5483: CALL_OW 1
5487: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
5488: LD_ADDR_EXP 47
5492: PUSH
5493: LD_EXP 47
5497: PUSH
5498: LD_INT 1
5500: MINUS
5501: ST_TO_ADDR
// end ; end_of_file
5502: LD_VAR 0 2
5506: RET
// var shipment , tictac ; export function init_shipments ; begin
5507: LD_INT 0
5509: PPUSH
// shipment := Rand ( 0 , 3 ) ;
5510: LD_ADDR_LOC 4
5514: PUSH
5515: LD_INT 0
5517: PPUSH
5518: LD_INT 3
5520: PPUSH
5521: CALL_OW 12
5525: ST_TO_ADDR
// tictac := 0 ;
5526: LD_ADDR_LOC 5
5530: PUSH
5531: LD_INT 0
5533: ST_TO_ADDR
// end ;
5534: LD_VAR 0 1
5538: RET
// every 0 0$5 + 0 0$1.1 do var d ;
5539: GO 5541
5541: DISABLE
5542: LD_INT 0
5544: PPUSH
// begin case tick of 1 .. 1 1$0 :
5545: LD_OWVAR 1
5549: PUSH
5550: LD_INT 1
5552: DOUBLE
5553: GREATEREQUAL
5554: IFFALSE 5562
5556: LD_INT 2100
5558: DOUBLE
5559: LESSEQUAL
5560: IFTRUE 5564
5562: GO 5575
5564: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5565: LD_ADDR_VAR 0 1
5569: PUSH
5570: LD_INT 150
5572: ST_TO_ADDR
5573: GO 5758
5575: LD_INT 2100
5577: PUSH
5578: LD_INT 1
5580: PLUS
5581: DOUBLE
5582: GREATEREQUAL
5583: IFFALSE 5591
5585: LD_INT 10500
5587: DOUBLE
5588: LESSEQUAL
5589: IFTRUE 5593
5591: GO 5604
5593: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5594: LD_ADDR_VAR 0 1
5598: PUSH
5599: LD_INT 100
5601: ST_TO_ADDR
5602: GO 5758
5604: LD_INT 10500
5606: PUSH
5607: LD_INT 1
5609: PLUS
5610: DOUBLE
5611: GREATEREQUAL
5612: IFFALSE 5620
5614: LD_INT 21000
5616: DOUBLE
5617: LESSEQUAL
5618: IFTRUE 5622
5620: GO 5633
5622: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5623: LD_ADDR_VAR 0 1
5627: PUSH
5628: LD_INT 90
5630: ST_TO_ADDR
5631: GO 5758
5633: LD_INT 21000
5635: PUSH
5636: LD_INT 1
5638: PLUS
5639: DOUBLE
5640: GREATEREQUAL
5641: IFFALSE 5649
5643: LD_INT 42000
5645: DOUBLE
5646: LESSEQUAL
5647: IFTRUE 5651
5649: GO 5662
5651: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5652: LD_ADDR_VAR 0 1
5656: PUSH
5657: LD_INT 70
5659: ST_TO_ADDR
5660: GO 5758
5662: LD_INT 42000
5664: PUSH
5665: LD_INT 1
5667: PLUS
5668: DOUBLE
5669: GREATEREQUAL
5670: IFFALSE 5678
5672: LD_INT 63000
5674: DOUBLE
5675: LESSEQUAL
5676: IFTRUE 5680
5678: GO 5691
5680: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5681: LD_ADDR_VAR 0 1
5685: PUSH
5686: LD_INT 60
5688: ST_TO_ADDR
5689: GO 5758
5691: LD_INT 63000
5693: PUSH
5694: LD_INT 1
5696: PLUS
5697: DOUBLE
5698: GREATEREQUAL
5699: IFFALSE 5707
5701: LD_INT 105000
5703: DOUBLE
5704: LESSEQUAL
5705: IFTRUE 5709
5707: GO 5720
5709: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5710: LD_ADDR_VAR 0 1
5714: PUSH
5715: LD_INT 35
5717: ST_TO_ADDR
5718: GO 5758
5720: LD_INT 105000
5722: PUSH
5723: LD_INT 1
5725: PLUS
5726: DOUBLE
5727: GREATEREQUAL
5728: IFFALSE 5736
5730: LD_INT 630000
5732: DOUBLE
5733: LESSEQUAL
5734: IFTRUE 5738
5736: GO 5749
5738: POP
// d := 20 ; else
5739: LD_ADDR_VAR 0 1
5743: PUSH
5744: LD_INT 20
5746: ST_TO_ADDR
5747: GO 5758
5749: POP
// d := 0 ; end ;
5750: LD_ADDR_VAR 0 1
5754: PUSH
5755: LD_INT 0
5757: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5758: LD_INT 1
5760: PPUSH
5761: LD_INT 10000
5763: PPUSH
5764: CALL_OW 12
5768: PUSH
5769: LD_VAR 0 1
5773: PUSH
5774: LD_EXP 22
5778: MUL
5779: LESSEQUAL
5780: IFFALSE 5856
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5782: LD_INT 1
5784: PPUSH
5785: LD_INT 140
5787: PPUSH
5788: CALL_OW 12
5792: PPUSH
5793: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
5797: LD_ADDR_LOC 4
5801: PUSH
5802: LD_LOC 4
5806: PUSH
5807: LD_INT 1
5809: PLUS
5810: PUSH
5811: LD_INT 4
5813: MOD
5814: ST_TO_ADDR
// if GetResourceArea ( nw + shipment , mat_cans ) < 50 then
5815: LD_INT 12
5817: PUSH
5818: LD_LOC 4
5822: PLUS
5823: PPUSH
5824: LD_INT 1
5826: PPUSH
5827: CALL_OW 287
5831: PUSH
5832: LD_INT 50
5834: LESS
5835: IFFALSE 5856
// CreateCratesArea ( 5 , nw + shipment , true ) ;
5837: LD_INT 5
5839: PPUSH
5840: LD_INT 12
5842: PUSH
5843: LD_LOC 4
5847: PLUS
5848: PPUSH
5849: LD_INT 1
5851: PPUSH
5852: CALL_OW 55
// end ; enable ;
5856: ENABLE
// end ;
5857: PPOPN 1
5859: END
// every 0 0$10 trigger TICK > ( ( 3 3$0 * tictac ) + tictac * ( 1 1$30 - shipments_density * ( 0 0$2 ) ) ) do var i , amount ;
5860: LD_OWVAR 1
5864: PUSH
5865: LD_INT 6300
5867: PUSH
5868: LD_LOC 5
5872: MUL
5873: PUSH
5874: LD_LOC 5
5878: PUSH
5879: LD_INT 3150
5881: PUSH
5882: LD_EXP 22
5886: PUSH
5887: LD_INT 70
5889: MUL
5890: MINUS
5891: MUL
5892: PLUS
5893: GREATER
5894: IFFALSE 5997
5896: GO 5898
5898: DISABLE
5899: LD_INT 0
5901: PPUSH
5902: PPUSH
// begin tictac := tictac + 1 ;
5903: LD_ADDR_LOC 5
5907: PUSH
5908: LD_LOC 5
5912: PUSH
5913: LD_INT 1
5915: PLUS
5916: ST_TO_ADDR
// amount := Rand ( 3 , 5 ) ;
5917: LD_ADDR_VAR 0 2
5921: PUSH
5922: LD_INT 3
5924: PPUSH
5925: LD_INT 5
5927: PPUSH
5928: CALL_OW 12
5932: ST_TO_ADDR
// for i = 0 to 3 do
5933: LD_ADDR_VAR 0 1
5937: PUSH
5938: DOUBLE
5939: LD_INT 0
5941: DEC
5942: ST_TO_ADDR
5943: LD_INT 3
5945: PUSH
5946: FOR_TO
5947: IFFALSE 5994
// if GetResourceArea ( Base1 + i , mat_cans ) < 20 then
5949: LD_INT 1
5951: PUSH
5952: LD_VAR 0 1
5956: PLUS
5957: PPUSH
5958: LD_INT 1
5960: PPUSH
5961: CALL_OW 287
5965: PUSH
5966: LD_INT 20
5968: LESS
5969: IFFALSE 5992
// CreateCratesArea ( amount , Base1 + i , true ) ;
5971: LD_VAR 0 2
5975: PPUSH
5976: LD_INT 1
5978: PUSH
5979: LD_VAR 0 1
5983: PLUS
5984: PPUSH
5985: LD_INT 1
5987: PPUSH
5988: CALL_OW 55
5992: GO 5946
5994: POP
5995: POP
// enable ;
5996: ENABLE
// end ; end_of_file
5997: PPOPN 2
5999: END
// var respawn_queue ; export function init_respawn ; begin
6000: LD_INT 0
6002: PPUSH
// if not def_people_respawning then
6003: LD_EXP 12
6007: NOT
6008: IFFALSE 6012
// exit ;
6010: GO 6051
// respawn_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6012: LD_ADDR_LOC 6
6016: PUSH
6017: LD_INT 0
6019: PUSH
6020: LD_INT 0
6022: PUSH
6023: LD_INT 0
6025: PUSH
6026: LD_INT 0
6028: PUSH
6029: LD_INT 0
6031: PUSH
6032: LD_INT 0
6034: PUSH
6035: LD_INT 0
6037: PUSH
6038: LD_INT 0
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: ST_TO_ADDR
// end ;
6051: LD_VAR 0 1
6055: RET
// every 0 0$10 trigger def_people_respawning do var un , list , time , side ;
6056: LD_EXP 12
6060: IFFALSE 6256
6062: GO 6064
6064: DISABLE
6065: LD_INT 0
6067: PPUSH
6068: PPUSH
6069: PPUSH
6070: PPUSH
// begin for side = 1 to Side_Positions do
6071: LD_ADDR_VAR 0 4
6075: PUSH
6076: DOUBLE
6077: LD_INT 1
6079: DEC
6080: ST_TO_ADDR
6081: LD_EXP 34
6085: PUSH
6086: FOR_TO
6087: IFFALSE 6253
// if Side_Positions [ side ] then
6089: LD_EXP 34
6093: PUSH
6094: LD_VAR 0 4
6098: ARRAY
6099: IFFALSE 6251
// begin list := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6101: LD_ADDR_VAR 0 2
6105: PUSH
6106: LD_INT 22
6108: PUSH
6109: LD_VAR 0 4
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: PUSH
6118: LD_INT 21
6120: PUSH
6121: LD_INT 1
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: PUSH
6128: LD_INT 3
6130: PUSH
6131: LD_INT 23
6133: PUSH
6134: LD_INT 0
6136: PUSH
6137: EMPTY
6138: LIST
6139: LIST
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: LIST
6145: LIST
6146: PPUSH
6147: CALL_OW 69
6151: ST_TO_ADDR
// if ( list < number_of_people ) and ( not respawn_queue [ side ] ) then
6152: LD_VAR 0 2
6156: PUSH
6157: LD_EXP 17
6161: LESS
6162: PUSH
6163: LD_LOC 6
6167: PUSH
6168: LD_VAR 0 4
6172: ARRAY
6173: NOT
6174: AND
6175: IFFALSE 6191
// set_queue ( side , TICK ) ;
6177: LD_VAR 0 4
6181: PPUSH
6182: LD_OWVAR 1
6186: PPUSH
6187: CALL 6490 0 2
// time := TICK - respawn_queue [ side ] ;
6191: LD_ADDR_VAR 0 3
6195: PUSH
6196: LD_OWVAR 1
6200: PUSH
6201: LD_LOC 6
6205: PUSH
6206: LD_VAR 0 4
6210: ARRAY
6211: MINUS
6212: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6213: LD_LOC 6
6217: PUSH
6218: LD_VAR 0 4
6222: ARRAY
6223: PUSH
6224: LD_VAR 0 3
6228: PUSH
6229: LD_EXP 25
6233: GREATER
6234: AND
6235: IFFALSE 6251
// respawn_character ( side , time ) ;
6237: LD_VAR 0 4
6241: PPUSH
6242: LD_VAR 0 3
6246: PPUSH
6247: CALL 6259 0 2
// end ;
6251: GO 6086
6253: POP
6254: POP
// enable ;
6255: ENABLE
// end ;
6256: PPOPN 4
6258: END
// function respawn_character ( side , time ) ; var dep ; begin
6259: LD_INT 0
6261: PPUSH
6262: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6263: LD_INT 0
6265: PPUSH
6266: LD_INT 1
6268: PPUSH
6269: CALL_OW 12
6273: PUSH
6274: LD_VAR 0 2
6278: PUSH
6279: LD_EXP 26
6283: LESS
6284: AND
6285: IFFALSE 6289
// exit ;
6287: GO 6485
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6289: LD_ADDR_VAR 0 4
6293: PUSH
6294: LD_INT 22
6296: PUSH
6297: LD_VAR 0 1
6301: PUSH
6302: EMPTY
6303: LIST
6304: LIST
6305: PUSH
6306: LD_INT 2
6308: PUSH
6309: LD_INT 30
6311: PUSH
6312: LD_INT 0
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: PUSH
6319: LD_INT 30
6321: PUSH
6322: LD_INT 1
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: PUSH
6329: EMPTY
6330: LIST
6331: LIST
6332: LIST
6333: PUSH
6334: LD_INT 50
6336: PUSH
6337: EMPTY
6338: LIST
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: LIST
6344: PPUSH
6345: CALL_OW 69
6349: ST_TO_ADDR
// if not dep then
6350: LD_VAR 0 4
6354: NOT
6355: IFFALSE 6361
// exit else
6357: GO 6485
6359: GO 6385
// dep := dep [ Rand ( 1 , dep ) ] ;
6361: LD_ADDR_VAR 0 4
6365: PUSH
6366: LD_VAR 0 4
6370: PUSH
6371: LD_INT 1
6373: PPUSH
6374: LD_VAR 0 4
6378: PPUSH
6379: CALL_OW 12
6383: ARRAY
6384: ST_TO_ADDR
// uc_side := side ;
6385: LD_ADDR_OWVAR 20
6389: PUSH
6390: LD_VAR 0 1
6394: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6395: LD_ADDR_OWVAR 21
6399: PUSH
6400: LD_EXP 35
6404: PUSH
6405: LD_VAR 0 1
6409: ARRAY
6410: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , initial_level div 2 ) ;
6411: LD_INT 0
6413: PPUSH
6414: LD_INT 0
6416: PPUSH
6417: LD_EXP 18
6421: PUSH
6422: LD_INT 2
6424: DIV
6425: PPUSH
6426: CALL_OW 380
// hc_importance := 0 ;
6430: LD_ADDR_OWVAR 32
6434: PUSH
6435: LD_INT 0
6437: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
6438: CALL_OW 44
6442: PPUSH
6443: LD_VAR 0 4
6447: PPUSH
6448: CALL_OW 250
6452: PPUSH
6453: LD_VAR 0 4
6457: PPUSH
6458: CALL_OW 251
6462: PPUSH
6463: LD_INT 10
6465: PPUSH
6466: LD_INT 1
6468: PPUSH
6469: CALL_OW 50
// set_queue ( side , 0 ) ;
6473: LD_VAR 0 1
6477: PPUSH
6478: LD_INT 0
6480: PPUSH
6481: CALL 6490 0 2
// end ;
6485: LD_VAR 0 3
6489: RET
// function set_queue ( side , time ) ; begin
6490: LD_INT 0
6492: PPUSH
// respawn_queue := Delete ( respawn_queue , side ) ;
6493: LD_ADDR_LOC 6
6497: PUSH
6498: LD_LOC 6
6502: PPUSH
6503: LD_VAR 0 1
6507: PPUSH
6508: CALL_OW 3
6512: ST_TO_ADDR
// respawn_queue := Insert ( respawn_queue , side , time ) ;
6513: LD_ADDR_LOC 6
6517: PUSH
6518: LD_LOC 6
6522: PPUSH
6523: LD_VAR 0 1
6527: PPUSH
6528: LD_VAR 0 2
6532: PPUSH
6533: CALL_OW 2
6537: ST_TO_ADDR
// end ; end_of_file
6538: LD_VAR 0 3
6542: RET
// var strength ; function Update_Flags ; var un ; begin
6543: LD_INT 0
6545: PPUSH
6546: PPUSH
// for un in battle_flags_id do
6547: LD_ADDR_VAR 0 2
6551: PUSH
6552: LD_EXP 45
6556: PUSH
6557: FOR_IN
6558: IFFALSE 6633
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6560: LD_VAR 0 2
6564: PPUSH
6565: LD_INT 1
6567: PUSH
6568: LD_LOC 7
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: PUSH
6577: LD_INT 2
6579: PUSH
6580: LD_LOC 7
6584: PUSH
6585: LD_INT 2
6587: DIV
6588: PUSH
6589: EMPTY
6590: LIST
6591: LIST
6592: PUSH
6593: LD_INT 3
6595: PUSH
6596: LD_LOC 7
6600: PUSH
6601: LD_INT 5
6603: DIV
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: LD_INT 20
6611: PUSH
6612: LD_LOC 7
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: PPUSH
6627: CALL_OW 423
6631: GO 6557
6633: POP
6634: POP
// end ;
6635: LD_VAR 0 1
6639: RET
// every 0 0$0.1 do var un ;
6640: GO 6642
6642: DISABLE
6643: LD_INT 0
6645: PPUSH
// begin if not def_morale_flags then
6646: LD_EXP 9
6650: NOT
6651: IFFALSE 6655
// exit ;
6653: GO 6732
// if not morale_decreasing_time then
6655: LD_EXP 46
6659: NOT
6660: IFFALSE 6664
// exit ;
6662: GO 6732
// strength = 100 ;
6664: LD_ADDR_LOC 7
6668: PUSH
6669: LD_INT 100
6671: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
6672: LD_EXP 46
6676: PPUSH
6677: CALL_OW 67
// strength := strength - 1 ;
6681: LD_ADDR_LOC 7
6685: PUSH
6686: LD_LOC 7
6690: PUSH
6691: LD_INT 1
6693: MINUS
6694: ST_TO_ADDR
// Update_Flags ;
6695: CALL 6543 0 0
// until not strength ;
6699: LD_LOC 7
6703: NOT
6704: IFFALSE 6672
// for un in battle_flags_id do
6706: LD_ADDR_VAR 0 1
6710: PUSH
6711: LD_EXP 45
6715: PUSH
6716: FOR_IN
6717: IFFALSE 6730
// KillBattleFlag ( un ) ;
6719: LD_VAR 0 1
6723: PPUSH
6724: CALL_OW 419
6728: GO 6716
6730: POP
6731: POP
// end ; end_of_file
6732: PPOPN 1
6734: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
6735: LD_INT 0
6737: PPUSH
6738: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
6739: LD_ADDR_VAR 0 2
6743: PUSH
6744: LD_STRING #Multi1x1-Time
6746: PUSH
6747: LD_OWVAR 1
6751: PUSH
6752: EMPTY
6753: LIST
6754: LIST
6755: ST_TO_ADDR
// if WaitServerStrings then
6756: LD_EXP 55
6760: IFFALSE 6778
// AllStrings = AllStrings ^ WaitServerStrings ;
6762: LD_ADDR_VAR 0 2
6766: PUSH
6767: LD_VAR 0 2
6771: PUSH
6772: LD_EXP 55
6776: ADD
6777: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
6778: LD_INT 0
6780: PUSH
6781: LD_EXP 23
6785: PUSH
6786: LD_OWVAR 1
6790: MINUS
6791: LESSEQUAL
6792: IFFALSE 6823
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
6794: LD_ADDR_VAR 0 2
6798: PUSH
6799: LD_VAR 0 2
6803: PUSH
6804: LD_STRING #allowedsibbomb
6806: PUSH
6807: LD_EXP 23
6811: PUSH
6812: LD_OWVAR 1
6816: MINUS
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: ADD
6822: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
6823: LD_INT 0
6825: PUSH
6826: LD_EXP 58
6830: PUSH
6831: LD_OWVAR 1
6835: MINUS
6836: LESSEQUAL
6837: IFFALSE 6868
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
6839: LD_ADDR_VAR 0 2
6843: PUSH
6844: LD_VAR 0 2
6848: PUSH
6849: LD_STRING #builduptime
6851: PUSH
6852: LD_EXP 58
6856: PUSH
6857: LD_OWVAR 1
6861: MINUS
6862: PUSH
6863: EMPTY
6864: LIST
6865: LIST
6866: ADD
6867: ST_TO_ADDR
// if ( ExtraStrings ) then
6868: LD_EXP 54
6872: IFFALSE 6894
// AllStrings := AllStrings ^  ^ ExtraStrings ;
6874: LD_ADDR_VAR 0 2
6878: PUSH
6879: LD_VAR 0 2
6883: PUSH
6884: LD_STRING 
6886: ADD
6887: PUSH
6888: LD_EXP 54
6892: ADD
6893: ST_TO_ADDR
// Display_Strings := AllStrings ;
6894: LD_ADDR_OWVAR 47
6898: PUSH
6899: LD_VAR 0 2
6903: ST_TO_ADDR
// end ;
6904: LD_VAR 0 1
6908: RET
// every 0 0$1 do
6909: GO 6911
6911: DISABLE
// begin ShowTimer ;
6912: CALL 6735 0 0
// enable ;
6916: ENABLE
// end ; end_of_file
6917: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6918: LD_VAR 0 1
6922: PPUSH
6923: CALL_OW 266
6927: PUSH
6928: LD_INT 0
6930: PUSH
6931: LD_INT 1
6933: PUSH
6934: EMPTY
6935: LIST
6936: LIST
6937: IN
6938: IFFALSE 6963
// SetBName ( b , @ & GetSide ( b ) ) ;
6940: LD_VAR 0 1
6944: PPUSH
6945: LD_STRING @
6947: PUSH
6948: LD_VAR 0 1
6952: PPUSH
6953: CALL_OW 255
6957: STR
6958: PPUSH
6959: CALL_OW 500
// end ;
6963: PPOPN 2
6965: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6966: LD_VAR 0 1
6970: PPUSH
6971: CALL_OW 266
6975: PUSH
6976: LD_INT 0
6978: PUSH
6979: LD_INT 1
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: IN
6986: IFFALSE 7011
// SetBName ( b , @ & GetSide ( b ) ) ;
6988: LD_VAR 0 1
6992: PPUSH
6993: LD_STRING @
6995: PUSH
6996: LD_VAR 0 1
7000: PPUSH
7001: CALL_OW 255
7005: STR
7006: PPUSH
7007: CALL_OW 500
// end ;
7011: PPOPN 3
7013: END
// on VehicleConstructed ( veh , fac ) do var side ;
7014: LD_INT 0
7016: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7017: LD_VAR 0 1
7021: PPUSH
7022: CALL_OW 263
7026: PUSH
7027: LD_INT 5
7029: EQUAL
7030: IFFALSE 7172
// begin side := GetSide ( veh ) ;
7032: LD_ADDR_VAR 0 3
7036: PUSH
7037: LD_VAR 0 1
7041: PPUSH
7042: CALL_OW 255
7046: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7047: LD_ADDR_EXP 50
7051: PUSH
7052: LD_EXP 50
7056: PPUSH
7057: LD_VAR 0 3
7061: PPUSH
7062: LD_EXP 50
7066: PUSH
7067: LD_VAR 0 3
7071: ARRAY
7072: PPUSH
7073: LD_INT 52
7075: PUSH
7076: EMPTY
7077: LIST
7078: PPUSH
7079: CALL_OW 72
7083: PUSH
7084: LD_INT 22
7086: PUSH
7087: LD_VAR 0 3
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: PUSH
7096: LD_INT 2
7098: PUSH
7099: LD_INT 33
7101: PUSH
7102: LD_INT 5
7104: PUSH
7105: EMPTY
7106: LIST
7107: LIST
7108: PUSH
7109: LD_INT 25
7111: PUSH
7112: LD_INT 12
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: PUSH
7119: LD_INT 25
7121: PUSH
7122: LD_INT 15
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: PUSH
7129: LD_INT 25
7131: PUSH
7132: LD_INT 16
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PUSH
7139: LD_INT 25
7141: PUSH
7142: LD_INT 17
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: PPUSH
7161: CALL_OW 69
7165: UNION
7166: PPUSH
7167: CALL_OW 1
7171: ST_TO_ADDR
// end ; end ;
7172: PPOPN 3
7174: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7175: LD_INT 0
7177: PPUSH
7178: PPUSH
7179: PPUSH
7180: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7181: LD_VAR 0 1
7185: PPUSH
7186: CALL_OW 257
7190: PUSH
7191: LD_INT 12
7193: PUSH
7194: LD_INT 15
7196: PUSH
7197: LD_INT 17
7199: PUSH
7200: LD_INT 16
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: IN
7209: PUSH
7210: LD_VAR 0 1
7214: PPUSH
7215: CALL_OW 263
7219: PUSH
7220: LD_INT 5
7222: EQUAL
7223: OR
7224: IFFALSE 7235
// ApeKilled ( j ) ;
7226: LD_VAR 0 1
7230: PPUSH
7231: CALL 5363 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7235: LD_VAR 0 1
7239: PPUSH
7240: CALL_OW 266
7244: PUSH
7245: LD_INT 0
7247: PUSH
7248: LD_INT 1
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: IN
7255: IFFALSE 7337
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7257: LD_ADDR_VAR 0 4
7261: PUSH
7262: LD_EXP 34
7266: PUSH
7267: LD_VAR 0 1
7271: PPUSH
7272: CALL_OW 255
7276: ARRAY
7277: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7278: LD_ADDR_VAR 0 2
7282: PUSH
7283: LD_EXP 41
7287: PUSH
7288: LD_VAR 0 4
7292: ARRAY
7293: PUSH
7294: LD_INT 1
7296: ARRAY
7297: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7298: LD_ADDR_VAR 0 3
7302: PUSH
7303: LD_EXP 41
7307: PUSH
7308: LD_VAR 0 4
7312: ARRAY
7313: PUSH
7314: LD_INT 2
7316: ARRAY
7317: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7318: LD_VAR 0 2
7322: PPUSH
7323: LD_VAR 0 3
7327: PPUSH
7328: CALL_OW 420
7332: PPUSH
7333: CALL_OW 419
// end ; end ;
7337: PPOPN 5
7339: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7340: LD_VAR 0 1
7344: PPUSH
7345: LD_VAR 0 2
7349: PPUSH
7350: LD_VAR 0 3
7354: PPUSH
7355: LD_OWVAR 2
7359: PPUSH
7360: CALL 7965 0 4
7364: PPOPN 3
7366: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
7367: LD_INT 0
7369: PPUSH
7370: PPUSH
7371: PPUSH
// BuildUpTime_Delay = 0 ;
7372: LD_ADDR_EXP 58
7376: PUSH
7377: LD_INT 0
7379: ST_TO_ADDR
// if not def_builduptime then
7380: LD_EXP 14
7384: NOT
7385: IFFALSE 7389
// exit ;
7387: GO 7572
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
7389: LD_ADDR_EXP 58
7393: PUSH
7394: LD_INT 8400
7396: PUSH
7397: LD_INT 2100
7399: PUSH
7400: LD_EXP 14
7404: MUL
7405: PLUS
7406: ST_TO_ADDR
// BuildUpTimeActive := true ;
7407: LD_ADDR_EXP 57
7411: PUSH
7412: LD_INT 1
7414: ST_TO_ADDR
// for i := 1 to 8 do
7415: LD_ADDR_VAR 0 2
7419: PUSH
7420: DOUBLE
7421: LD_INT 1
7423: DEC
7424: ST_TO_ADDR
7425: LD_INT 8
7427: PUSH
7428: FOR_TO
7429: IFFALSE 7570
// if Side_Positions [ i ] then
7431: LD_EXP 34
7435: PUSH
7436: LD_VAR 0 2
7440: ARRAY
7441: IFFALSE 7568
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
7443: LD_EXP 56
7447: PUSH
7448: LD_EXP 34
7452: PUSH
7453: LD_VAR 0 2
7457: ARRAY
7458: ARRAY
7459: PPUSH
7460: LD_INT 5
7462: PPUSH
7463: CALL_OW 424
// for j := 1 to 8 do
7467: LD_ADDR_VAR 0 3
7471: PUSH
7472: DOUBLE
7473: LD_INT 1
7475: DEC
7476: ST_TO_ADDR
7477: LD_INT 8
7479: PUSH
7480: FOR_TO
7481: IFFALSE 7566
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
7483: LD_EXP 34
7487: PUSH
7488: LD_VAR 0 3
7492: ARRAY
7493: PUSH
7494: LD_EXP 32
7498: PUSH
7499: LD_VAR 0 2
7503: ARRAY
7504: PUSH
7505: LD_EXP 32
7509: PUSH
7510: LD_VAR 0 3
7514: ARRAY
7515: NONEQUAL
7516: PUSH
7517: LD_EXP 38
7521: NOT
7522: PUSH
7523: LD_VAR 0 2
7527: PUSH
7528: LD_VAR 0 3
7532: NONEQUAL
7533: AND
7534: OR
7535: AND
7536: IFFALSE 7564
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
7538: LD_VAR 0 3
7542: PPUSH
7543: LD_EXP 56
7547: PUSH
7548: LD_EXP 34
7552: PUSH
7553: LD_VAR 0 2
7557: ARRAY
7558: ARRAY
7559: PPUSH
7560: CALL_OW 333
7564: GO 7480
7566: POP
7567: POP
// end ;
7568: GO 7428
7570: POP
7571: POP
// end ;
7572: LD_VAR 0 1
7576: RET
// export function EndBuildUp ; var i , j ; begin
7577: LD_INT 0
7579: PPUSH
7580: PPUSH
7581: PPUSH
// BuildUpTimeActive := false ;
7582: LD_ADDR_EXP 57
7586: PUSH
7587: LD_INT 0
7589: ST_TO_ADDR
// for i := 1 to 8 do
7590: LD_ADDR_VAR 0 2
7594: PUSH
7595: DOUBLE
7596: LD_INT 1
7598: DEC
7599: ST_TO_ADDR
7600: LD_INT 8
7602: PUSH
7603: FOR_TO
7604: IFFALSE 7745
// if Side_Positions [ i ] then
7606: LD_EXP 34
7610: PUSH
7611: LD_VAR 0 2
7615: ARRAY
7616: IFFALSE 7743
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
7618: LD_EXP 56
7622: PUSH
7623: LD_EXP 34
7627: PUSH
7628: LD_VAR 0 2
7632: ARRAY
7633: ARRAY
7634: PPUSH
7635: LD_INT 0
7637: PPUSH
7638: CALL_OW 424
// for j := 1 to 8 do
7642: LD_ADDR_VAR 0 3
7646: PUSH
7647: DOUBLE
7648: LD_INT 1
7650: DEC
7651: ST_TO_ADDR
7652: LD_INT 8
7654: PUSH
7655: FOR_TO
7656: IFFALSE 7741
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
7658: LD_EXP 34
7662: PUSH
7663: LD_VAR 0 3
7667: ARRAY
7668: PUSH
7669: LD_EXP 32
7673: PUSH
7674: LD_VAR 0 2
7678: ARRAY
7679: PUSH
7680: LD_EXP 32
7684: PUSH
7685: LD_VAR 0 3
7689: ARRAY
7690: NONEQUAL
7691: PUSH
7692: LD_EXP 38
7696: NOT
7697: PUSH
7698: LD_VAR 0 2
7702: PUSH
7703: LD_VAR 0 3
7707: NONEQUAL
7708: AND
7709: OR
7710: AND
7711: IFFALSE 7739
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
7713: LD_VAR 0 3
7717: PPUSH
7718: LD_EXP 56
7722: PUSH
7723: LD_EXP 34
7727: PUSH
7728: LD_VAR 0 2
7732: ARRAY
7733: ARRAY
7734: PPUSH
7735: CALL_OW 334
7739: GO 7655
7741: POP
7742: POP
// end ;
7743: GO 7603
7745: POP
7746: POP
// end ;
7747: LD_VAR 0 1
7751: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
7752: LD_EXP 57
7756: IFFALSE 7931
7758: GO 7760
7760: DISABLE
7761: LD_INT 0
7763: PPUSH
7764: PPUSH
// begin for i := 1 to 8 do
7765: LD_ADDR_VAR 0 1
7769: PUSH
7770: DOUBLE
7771: LD_INT 1
7773: DEC
7774: ST_TO_ADDR
7775: LD_INT 8
7777: PUSH
7778: FOR_TO
7779: IFFALSE 7928
// if Side_Positions [ i ] then
7781: LD_EXP 34
7785: PUSH
7786: LD_VAR 0 1
7790: ARRAY
7791: IFFALSE 7926
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
7793: LD_ADDR_VAR 0 2
7797: PUSH
7798: LD_EXP 56
7802: PUSH
7803: LD_EXP 34
7807: PUSH
7808: LD_VAR 0 1
7812: ARRAY
7813: ARRAY
7814: PPUSH
7815: LD_INT 2
7817: PUSH
7818: LD_INT 21
7820: PUSH
7821: LD_INT 1
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: PUSH
7828: LD_INT 21
7830: PUSH
7831: LD_INT 2
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: LIST
7842: PUSH
7843: LD_INT 22
7845: PUSH
7846: LD_OWVAR 2
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: PPUSH
7859: CALL_OW 70
7863: PUSH
7864: FOR_IN
7865: IFFALSE 7924
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
7867: LD_EXP 32
7871: PUSH
7872: LD_VAR 0 1
7876: ARRAY
7877: PUSH
7878: LD_EXP 32
7882: PUSH
7883: LD_OWVAR 2
7887: ARRAY
7888: NONEQUAL
7889: PUSH
7890: LD_EXP 38
7894: NOT
7895: PUSH
7896: LD_VAR 0 1
7900: PUSH
7901: LD_OWVAR 2
7905: NONEQUAL
7906: AND
7907: OR
7908: IFFALSE 7922
// ComMoveToArea ( un , BuildUpEscape ) ;
7910: LD_VAR 0 2
7914: PPUSH
7915: LD_INT 16
7917: PPUSH
7918: CALL_OW 113
7922: GO 7864
7924: POP
7925: POP
7926: GO 7778
7928: POP
7929: POP
// enable ;
7930: ENABLE
// end ;
7931: PPOPN 2
7933: END
// every 0 0$1 trigger def_builduptime do
7934: LD_EXP 14
7938: IFFALSE 7964
7940: GO 7942
7942: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
7943: LD_INT 8400
7945: PUSH
7946: LD_EXP 14
7950: PUSH
7951: LD_INT 2100
7953: MUL
7954: PLUS
7955: PPUSH
7956: CALL_OW 67
// EndBuildUp ;
7960: CALL 7577 0 0
// end ; end_of_file
7964: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
7965: LD_INT 0
7967: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
7968: LD_VAR 0 1
7972: PPUSH
7973: CALL_OW 255
7977: PUSH
7978: LD_VAR 0 4
7982: EQUAL
7983: IFFALSE 8002
// begin SetAchievement ( ACH_RAD ) ;
7985: LD_STRING ACH_RAD
7987: PPUSH
7988: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
7992: LD_STRING ACH_NL
7994: PPUSH
7995: LD_INT 1
7997: PPUSH
7998: CALL_OW 564
// end end ;
8002: LD_VAR 0 5
8006: RET
// export function SA_Win ( side ) ; begin
8007: LD_INT 0
8009: PPUSH
// case side of 1 :
8010: LD_VAR 0 1
8014: PUSH
8015: LD_INT 1
8017: DOUBLE
8018: EQUAL
8019: IFTRUE 8023
8021: GO 8036
8023: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
8024: LD_STRING ACH_AH
8026: PPUSH
8027: LD_INT 1
8029: PPUSH
8030: CALL_OW 564
8034: GO 8199
8036: LD_INT 2
8038: DOUBLE
8039: EQUAL
8040: IFTRUE 8044
8042: GO 8057
8044: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
8045: LD_STRING ACH_E
8047: PPUSH
8048: LD_INT 1
8050: PPUSH
8051: CALL_OW 564
8055: GO 8199
8057: LD_INT 3
8059: DOUBLE
8060: EQUAL
8061: IFTRUE 8065
8063: GO 8078
8065: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
8066: LD_STRING ACH_OOL
8068: PPUSH
8069: LD_INT 1
8071: PPUSH
8072: CALL_OW 564
8076: GO 8199
8078: LD_INT 1
8080: PUSH
8081: LD_INT 2
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: DOUBLE
8088: EQUAL
8089: IFTRUE 8093
8091: GO 8118
8093: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8094: LD_STRING ACH_AH
8096: PPUSH
8097: LD_REAL  5.00000000000000E-0001
8100: PPUSH
8101: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8105: LD_STRING ACH_E
8107: PPUSH
8108: LD_REAL  5.00000000000000E-0001
8111: PPUSH
8112: CALL_OW 564
// end ; [ 2 , 3 ] :
8116: GO 8199
8118: LD_INT 2
8120: PUSH
8121: LD_INT 3
8123: PUSH
8124: EMPTY
8125: LIST
8126: LIST
8127: DOUBLE
8128: EQUAL
8129: IFTRUE 8133
8131: GO 8158
8133: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
8134: LD_STRING ACH_OOL
8136: PPUSH
8137: LD_REAL  5.00000000000000E-0001
8140: PPUSH
8141: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8145: LD_STRING ACH_E
8147: PPUSH
8148: LD_REAL  5.00000000000000E-0001
8151: PPUSH
8152: CALL_OW 564
// end ; [ 3 , 1 ] :
8156: GO 8199
8158: LD_INT 3
8160: PUSH
8161: LD_INT 1
8163: PUSH
8164: EMPTY
8165: LIST
8166: LIST
8167: DOUBLE
8168: EQUAL
8169: IFTRUE 8173
8171: GO 8198
8173: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8174: LD_STRING ACH_AH
8176: PPUSH
8177: LD_REAL  5.00000000000000E-0001
8180: PPUSH
8181: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
8185: LD_STRING ACH_OOL
8187: PPUSH
8188: LD_REAL  5.00000000000000E-0001
8191: PPUSH
8192: CALL_OW 564
// end ; end ;
8196: GO 8199
8198: POP
// end ; end_of_file
8199: LD_VAR 0 2
8203: RET
// var defaited , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
8204: LD_INT 0
8206: PPUSH
8207: PPUSH
// enable ( 98 ) ;
8208: LD_INT 98
8210: ENABLE_MARKED
// GameEnded = false ;
8211: LD_ADDR_LOC 9
8215: PUSH
8216: LD_INT 0
8218: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8219: LD_ADDR_LOC 8
8223: PUSH
8224: LD_INT 0
8226: PUSH
8227: LD_INT 0
8229: PUSH
8230: LD_INT 0
8232: PUSH
8233: LD_INT 0
8235: PUSH
8236: LD_INT 0
8238: PUSH
8239: LD_INT 0
8241: PUSH
8242: LD_INT 0
8244: PUSH
8245: LD_INT 0
8247: PUSH
8248: EMPTY
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: ST_TO_ADDR
// unfoged = false ;
8258: LD_ADDR_LOC 10
8262: PUSH
8263: LD_INT 0
8265: ST_TO_ADDR
// defeated_specs := [ ] ;
8266: LD_ADDR_LOC 11
8270: PUSH
8271: EMPTY
8272: ST_TO_ADDR
// for i = 1 to side_positions do
8273: LD_ADDR_VAR 0 2
8277: PUSH
8278: DOUBLE
8279: LD_INT 1
8281: DEC
8282: ST_TO_ADDR
8283: LD_EXP 34
8287: PUSH
8288: FOR_TO
8289: IFFALSE 8329
// if not side_positions [ i ] then
8291: LD_EXP 34
8295: PUSH
8296: LD_VAR 0 2
8300: ARRAY
8301: NOT
8302: IFFALSE 8327
// defaited = replace ( defaited , i , true ) ;
8304: LD_ADDR_LOC 8
8308: PUSH
8309: LD_LOC 8
8313: PPUSH
8314: LD_VAR 0 2
8318: PPUSH
8319: LD_INT 1
8321: PPUSH
8322: CALL_OW 1
8326: ST_TO_ADDR
8327: GO 8288
8329: POP
8330: POP
// end ;
8331: LD_VAR 0 1
8335: RET
// function CanWinLoose ; begin
8336: LD_INT 0
8338: PPUSH
// Result := true ;
8339: LD_ADDR_VAR 0 1
8343: PUSH
8344: LD_INT 1
8346: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8347: CALL_OW 518
8351: PUSH
8352: CALL_OW 519
8356: PUSH
8357: LD_INT 0
8359: GREATER
8360: AND
8361: IFFALSE 8371
// Result := false ;
8363: LD_ADDR_VAR 0 1
8367: PUSH
8368: LD_INT 0
8370: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8371: CALL_OW 531
8375: PUSH
8376: CALL_OW 519
8380: PUSH
8381: LD_INT 1
8383: GREATER
8384: AND
8385: IFFALSE 8395
// Result := false ;
8387: LD_ADDR_VAR 0 1
8391: PUSH
8392: LD_INT 0
8394: ST_TO_ADDR
// end ;
8395: LD_VAR 0 1
8399: RET
// export function HasPower ( i ) ; var k , h ; begin
8400: LD_INT 0
8402: PPUSH
8403: PPUSH
8404: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
8405: LD_VAR 0 1
8409: PPUSH
8410: CALL_OW 108
8414: NOT
8415: PUSH
8416: LD_EXP 39
8420: PUSH
8421: LD_VAR 0 1
8425: ARRAY
8426: NOT
8427: AND
8428: PUSH
8429: LD_OWVAR 4
8433: AND
8434: IFFALSE 8446
// begin result = false ;
8436: LD_ADDR_VAR 0 2
8440: PUSH
8441: LD_INT 0
8443: ST_TO_ADDR
// end else
8444: GO 8741
// case def_win_rules of 0 :
8446: LD_EXP 27
8450: PUSH
8451: LD_INT 0
8453: DOUBLE
8454: EQUAL
8455: IFTRUE 8459
8457: GO 8622
8459: POP
// if def_people_respawning then
8460: LD_EXP 12
8464: IFFALSE 8555
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8466: LD_ADDR_VAR 0 2
8470: PUSH
8471: LD_INT 22
8473: PUSH
8474: LD_VAR 0 1
8478: PUSH
8479: EMPTY
8480: LIST
8481: LIST
8482: PUSH
8483: LD_INT 2
8485: PUSH
8486: LD_INT 21
8488: PUSH
8489: LD_INT 1
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: PUSH
8496: LD_INT 33
8498: PUSH
8499: LD_INT 3
8501: PUSH
8502: EMPTY
8503: LIST
8504: LIST
8505: PUSH
8506: LD_INT 33
8508: PUSH
8509: LD_INT 5
8511: PUSH
8512: EMPTY
8513: LIST
8514: LIST
8515: PUSH
8516: LD_INT 30
8518: PUSH
8519: LD_INT 0
8521: PUSH
8522: EMPTY
8523: LIST
8524: LIST
8525: PUSH
8526: LD_INT 30
8528: PUSH
8529: LD_INT 1
8531: PUSH
8532: EMPTY
8533: LIST
8534: LIST
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: PPUSH
8548: CALL_OW 69
8552: ST_TO_ADDR
8553: GO 8620
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
8555: LD_ADDR_VAR 0 2
8559: PUSH
8560: LD_INT 22
8562: PUSH
8563: LD_VAR 0 1
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: PUSH
8572: LD_INT 2
8574: PUSH
8575: LD_INT 21
8577: PUSH
8578: LD_INT 1
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: PUSH
8585: LD_INT 33
8587: PUSH
8588: LD_INT 3
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: PUSH
8595: LD_INT 33
8597: PUSH
8598: LD_INT 5
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: LIST
8609: LIST
8610: PUSH
8611: EMPTY
8612: LIST
8613: LIST
8614: PPUSH
8615: CALL_OW 69
8619: ST_TO_ADDR
8620: GO 8741
8622: LD_INT 1
8624: DOUBLE
8625: EQUAL
8626: IFTRUE 8630
8628: GO 8669
8630: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
8631: LD_ADDR_VAR 0 2
8635: PUSH
8636: LD_INT 22
8638: PUSH
8639: LD_VAR 0 1
8643: PUSH
8644: EMPTY
8645: LIST
8646: LIST
8647: PUSH
8648: LD_INT 21
8650: PUSH
8651: LD_INT 1
8653: PUSH
8654: EMPTY
8655: LIST
8656: LIST
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: PPUSH
8662: CALL_OW 69
8666: ST_TO_ADDR
8667: GO 8741
8669: LD_INT 2
8671: DOUBLE
8672: EQUAL
8673: IFTRUE 8677
8675: GO 8740
8677: POP
// begin h = false ;
8678: LD_ADDR_VAR 0 4
8682: PUSH
8683: LD_INT 0
8685: ST_TO_ADDR
// for k in heroes [ i ] do
8686: LD_ADDR_VAR 0 3
8690: PUSH
8691: LD_EXP 43
8695: PUSH
8696: LD_VAR 0 1
8700: ARRAY
8701: PUSH
8702: FOR_IN
8703: IFFALSE 8726
// if IsLive ( k ) then
8705: LD_VAR 0 3
8709: PPUSH
8710: CALL_OW 300
8714: IFFALSE 8724
// h = true ;
8716: LD_ADDR_VAR 0 4
8720: PUSH
8721: LD_INT 1
8723: ST_TO_ADDR
8724: GO 8702
8726: POP
8727: POP
// Result := h ;
8728: LD_ADDR_VAR 0 2
8732: PUSH
8733: LD_VAR 0 4
8737: ST_TO_ADDR
// end ; end ;
8738: GO 8741
8740: POP
// end ;
8741: LD_VAR 0 2
8745: RET
// function AlliedSides ( i , j ) ; begin
8746: LD_INT 0
8748: PPUSH
// Result := false ;
8749: LD_ADDR_VAR 0 3
8753: PUSH
8754: LD_INT 0
8756: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8757: LD_VAR 0 1
8761: PPUSH
8762: LD_VAR 0 2
8766: PPUSH
8767: CALL_OW 81
8771: PUSH
8772: LD_INT 1
8774: EQUAL
8775: PUSH
8776: LD_VAR 0 2
8780: PPUSH
8781: LD_VAR 0 1
8785: PPUSH
8786: CALL_OW 81
8790: PUSH
8791: LD_INT 1
8793: EQUAL
8794: AND
8795: PUSH
8796: LD_VAR 0 1
8800: PPUSH
8801: CALL_OW 83
8805: AND
8806: PUSH
8807: LD_VAR 0 2
8811: PPUSH
8812: CALL_OW 83
8816: AND
8817: IFFALSE 8827
// Result := true ;
8819: LD_ADDR_VAR 0 3
8823: PUSH
8824: LD_INT 1
8826: ST_TO_ADDR
// end ;
8827: LD_VAR 0 3
8831: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
8832: CALL 8336 0 0
8836: PUSH
8837: LD_LOC 9
8841: NOT
8842: AND
8843: IFFALSE 8859
8845: GO 8847
8847: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
8848: LD_ADDR_EXP 55
8852: PUSH
8853: LD_STRING #Player-Ended
8855: PUSH
8856: EMPTY
8857: LIST
8858: ST_TO_ADDR
8859: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
8860: CALL 8336 0 0
8864: PUSH
8865: LD_LOC 9
8869: AND
8870: IFFALSE 8879
8872: GO 8874
8874: DISABLE
// YouLostInMultiplayer ;
8875: CALL_OW 107
8879: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
8880: CALL 8336 0 0
8884: NOT
8885: PUSH
8886: CALL_OW 531
8890: NOT
8891: AND
8892: IFFALSE 8908
8894: GO 8896
8896: DISABLE
// WaitServerStrings = [ #server-wait ] ;
8897: LD_ADDR_EXP 55
8901: PUSH
8902: LD_STRING #server-wait
8904: PUSH
8905: EMPTY
8906: LIST
8907: ST_TO_ADDR
8908: END
// every 100 trigger IAmSpec do
8909: CALL_OW 531
8913: IFFALSE 8929
8915: GO 8917
8917: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
8918: LD_ADDR_EXP 55
8922: PUSH
8923: LD_STRING #Player-IAmSpec
8925: PUSH
8926: EMPTY
8927: LIST
8928: ST_TO_ADDR
8929: END
// every 100 trigger GameEnded and IAmSpec do
8930: LD_LOC 9
8934: PUSH
8935: CALL_OW 531
8939: AND
8940: IFFALSE 8949
8942: GO 8944
8944: DISABLE
// YouLostInMultiplayer ;
8945: CALL_OW 107
8949: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
8950: CALL 8336 0 0
8954: PUSH
8955: LD_LOC 9
8959: NOT
8960: AND
8961: IFFALSE 8977
8963: GO 8965
8965: DISABLE
// WaitServerStrings = [ $player-win ] ;
8966: LD_ADDR_EXP 55
8970: PUSH
8971: LD_STRING $player-win
8973: PUSH
8974: EMPTY
8975: LIST
8976: ST_TO_ADDR
8977: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
8978: CALL 8336 0 0
8982: PUSH
8983: LD_LOC 9
8987: AND
8988: IFFALSE 9012
8990: GO 8992
8992: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
8993: LD_EXP 35
8997: PUSH
8998: LD_OWVAR 2
9002: ARRAY
9003: PPUSH
9004: CALL 8007 0 1
// YouWinInMultiplayer ;
9008: CALL_OW 106
// end ;
9012: END
// every 100 trigger isEditor marked 401 do
9013: LD_OWVAR 84
9017: IFFALSE 9033
9019: GO 9021
9021: DISABLE
// Debug_Strings = [ You won ] ;
9022: LD_ADDR_OWVAR 48
9026: PUSH
9027: LD_STRING You won
9029: PUSH
9030: EMPTY
9031: LIST
9032: ST_TO_ADDR
9033: END
// every 100 trigger isEditor marked 400 do
9034: LD_OWVAR 84
9038: IFFALSE 9054
9040: GO 9042
9042: DISABLE
// Debug_Strings = [ You loss ] ;
9043: LD_ADDR_OWVAR 48
9047: PUSH
9048: LD_STRING You loss
9050: PUSH
9051: EMPTY
9052: LIST
9053: ST_TO_ADDR
9054: END
// every 100 marked 98 do var i , un ;
9055: GO 9057
9057: DISABLE
9058: LD_INT 0
9060: PPUSH
9061: PPUSH
// begin for i = 1 to side_positions do
9062: LD_ADDR_VAR 0 1
9066: PUSH
9067: DOUBLE
9068: LD_INT 1
9070: DEC
9071: ST_TO_ADDR
9072: LD_EXP 34
9076: PUSH
9077: FOR_TO
9078: IFFALSE 9207
// begin if side_positions [ i ] then
9080: LD_EXP 34
9084: PUSH
9085: LD_VAR 0 1
9089: ARRAY
9090: IFFALSE 9205
// if not HasPower ( i ) and not Defaited [ i ] then
9092: LD_VAR 0 1
9096: PPUSH
9097: CALL 8400 0 1
9101: NOT
9102: PUSH
9103: LD_LOC 8
9107: PUSH
9108: LD_VAR 0 1
9112: ARRAY
9113: NOT
9114: AND
9115: IFFALSE 9205
// begin Defaited = replace ( Defaited , i , true ) ;
9117: LD_ADDR_LOC 8
9121: PUSH
9122: LD_LOC 8
9126: PPUSH
9127: LD_VAR 0 1
9131: PPUSH
9132: LD_INT 1
9134: PPUSH
9135: CALL_OW 1
9139: ST_TO_ADDR
// if not i in defeated_specs then
9140: LD_VAR 0 1
9144: PUSH
9145: LD_LOC 11
9149: IN
9150: NOT
9151: IFFALSE 9186
// begin SetPlayerSpectator ( ) ;
9153: CALL_OW 572
// defeated_specs := Replace ( defeated_specs , defeated_specs + 1 , i ) ;
9157: LD_ADDR_LOC 11
9161: PUSH
9162: LD_LOC 11
9166: PPUSH
9167: LD_LOC 11
9171: PUSH
9172: LD_INT 1
9174: PLUS
9175: PPUSH
9176: LD_VAR 0 1
9180: PPUSH
9181: CALL_OW 1
9185: ST_TO_ADDR
// end ; if i = your_side then
9186: LD_VAR 0 1
9190: PUSH
9191: LD_OWVAR 2
9195: EQUAL
9196: IFFALSE 9205
// begin Multiplayer_Loose_Message ;
9198: CALL_OW 521
// enable ( 400 ) ;
9202: LD_INT 400
9204: ENABLE_MARKED
// end ; end ; end ;
9205: GO 9077
9207: POP
9208: POP
// DidGameEnd ;
9209: CALL 9224 0 0
// if not GameEnded then
9213: LD_LOC 9
9217: NOT
9218: IFFALSE 9221
// enable ;
9220: ENABLE
// end ;
9221: PPOPN 2
9223: END
// function DidGameEnd ; var i , k , enemy ; begin
9224: LD_INT 0
9226: PPUSH
9227: PPUSH
9228: PPUSH
9229: PPUSH
// enemy = [ ] ;
9230: LD_ADDR_VAR 0 4
9234: PUSH
9235: EMPTY
9236: ST_TO_ADDR
// for i = 1 to side_positions do
9237: LD_ADDR_VAR 0 2
9241: PUSH
9242: DOUBLE
9243: LD_INT 1
9245: DEC
9246: ST_TO_ADDR
9247: LD_EXP 34
9251: PUSH
9252: FOR_TO
9253: IFFALSE 9347
// if not defaited [ i ] then
9255: LD_LOC 8
9259: PUSH
9260: LD_VAR 0 2
9264: ARRAY
9265: NOT
9266: IFFALSE 9345
// for k = 1 to side_positions do
9268: LD_ADDR_VAR 0 3
9272: PUSH
9273: DOUBLE
9274: LD_INT 1
9276: DEC
9277: ST_TO_ADDR
9278: LD_EXP 34
9282: PUSH
9283: FOR_TO
9284: IFFALSE 9343
// if not defaited [ k ] then
9286: LD_LOC 8
9290: PUSH
9291: LD_VAR 0 3
9295: ARRAY
9296: NOT
9297: IFFALSE 9341
// if not AlliedSides ( i , k ) then
9299: LD_VAR 0 2
9303: PPUSH
9304: LD_VAR 0 3
9308: PPUSH
9309: CALL 8746 0 2
9313: NOT
9314: IFFALSE 9341
// enemy = enemy ^ [ i , k ] ;
9316: LD_ADDR_VAR 0 4
9320: PUSH
9321: LD_VAR 0 4
9325: PUSH
9326: LD_VAR 0 2
9330: PUSH
9331: LD_VAR 0 3
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: ADD
9340: ST_TO_ADDR
9341: GO 9283
9343: POP
9344: POP
9345: GO 9252
9347: POP
9348: POP
// if not enemy then
9349: LD_VAR 0 4
9353: NOT
9354: IFFALSE 9380
// begin GameEnded = true ;
9356: LD_ADDR_LOC 9
9360: PUSH
9361: LD_INT 1
9363: ST_TO_ADDR
// if not defaited [ your_side ] then
9364: LD_LOC 8
9368: PUSH
9369: LD_OWVAR 2
9373: ARRAY
9374: NOT
9375: IFFALSE 9380
// enable ( 401 ) ;
9377: LD_INT 401
9379: ENABLE_MARKED
// end ; end ;
9380: LD_VAR 0 1
9384: RET
// function unfog ; var k , friends ; begin
9385: LD_INT 0
9387: PPUSH
9388: PPUSH
9389: PPUSH
// SetPlayerSpectator ( ) ;
9390: CALL_OW 572
// unfoged = true ;
9394: LD_ADDR_LOC 10
9398: PUSH
9399: LD_INT 1
9401: ST_TO_ADDR
// end ;
9402: LD_VAR 0 1
9406: RET
// export function MakeGameEnd ; begin
9407: LD_INT 0
9409: PPUSH
// SetPlayerSpectator ( ) ;
9410: CALL_OW 572
// unfoged = true ;
9414: LD_ADDR_LOC 10
9418: PUSH
9419: LD_INT 1
9421: ST_TO_ADDR
// wait ( 0 0$5 ) ;
9422: LD_INT 175
9424: PPUSH
9425: CALL_OW 67
// GameEnded = true ;
9429: LD_ADDR_LOC 9
9433: PUSH
9434: LD_INT 1
9436: ST_TO_ADDR
// end ;
9437: LD_VAR 0 1
9441: RET
// export function GetGameEnded ; begin
9442: LD_INT 0
9444: PPUSH
// result = GameEnded ;
9445: LD_ADDR_VAR 0 1
9449: PUSH
9450: LD_LOC 9
9454: ST_TO_ADDR
// end ; end_of_file
9455: LD_VAR 0 1
9459: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9460: LD_INT 0
9462: PPUSH
9463: PPUSH
9464: PPUSH
// for side = 1 to 8 do
9465: LD_ADDR_VAR 0 2
9469: PUSH
9470: DOUBLE
9471: LD_INT 1
9473: DEC
9474: ST_TO_ADDR
9475: LD_INT 8
9477: PUSH
9478: FOR_TO
9479: IFFALSE 9600
// begin for i = 1 to 72 do
9481: LD_ADDR_VAR 0 3
9485: PUSH
9486: DOUBLE
9487: LD_INT 1
9489: DEC
9490: ST_TO_ADDR
9491: LD_INT 72
9493: PUSH
9494: FOR_TO
9495: IFFALSE 9526
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9497: LD_VAR 0 3
9501: PPUSH
9502: LD_VAR 0 2
9506: PPUSH
9507: LD_INT 0
9509: PPUSH
9510: LD_VAR 0 3
9514: PPUSH
9515: CALL_OW 565
9519: PPUSH
9520: CALL_OW 322
9524: GO 9494
9526: POP
9527: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9528: LD_INT 73
9530: PPUSH
9531: LD_VAR 0 2
9535: PPUSH
9536: LD_INT 0
9538: PPUSH
9539: LD_INT 25
9541: PPUSH
9542: CALL_OW 565
9546: PPUSH
9547: CALL_OW 322
// for i = 0 to 40 do
9551: LD_ADDR_VAR 0 3
9555: PUSH
9556: DOUBLE
9557: LD_INT 0
9559: DEC
9560: ST_TO_ADDR
9561: LD_INT 40
9563: PUSH
9564: FOR_TO
9565: IFFALSE 9596
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9567: LD_VAR 0 3
9571: PPUSH
9572: LD_VAR 0 2
9576: PPUSH
9577: LD_INT 1
9579: PPUSH
9580: LD_VAR 0 3
9584: PPUSH
9585: CALL_OW 565
9589: PPUSH
9590: CALL_OW 324
9594: GO 9564
9596: POP
9597: POP
// end ;
9598: GO 9478
9600: POP
9601: POP
// end ;
9602: LD_VAR 0 1
9606: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9607: LD_INT 0
9609: PPUSH
9610: PPUSH
9611: PPUSH
// for side = 1 to 8 do
9612: LD_ADDR_VAR 0 3
9616: PUSH
9617: DOUBLE
9618: LD_INT 1
9620: DEC
9621: ST_TO_ADDR
9622: LD_INT 8
9624: PUSH
9625: FOR_TO
9626: IFFALSE 13622
// begin for i = 1 to 73 do
9628: LD_ADDR_VAR 0 4
9632: PUSH
9633: DOUBLE
9634: LD_INT 1
9636: DEC
9637: ST_TO_ADDR
9638: LD_INT 73
9640: PUSH
9641: FOR_TO
9642: IFFALSE 9663
// SetTech ( i , side , state_disabled ) ;
9644: LD_VAR 0 4
9648: PPUSH
9649: LD_VAR 0 3
9653: PPUSH
9654: LD_INT 0
9656: PPUSH
9657: CALL_OW 322
9661: GO 9641
9663: POP
9664: POP
// for i = 0 to 40 do
9665: LD_ADDR_VAR 0 4
9669: PUSH
9670: DOUBLE
9671: LD_INT 0
9673: DEC
9674: ST_TO_ADDR
9675: LD_INT 40
9677: PUSH
9678: FOR_TO
9679: IFFALSE 9700
// SetRestrict ( i , side , false ) ;
9681: LD_VAR 0 4
9685: PPUSH
9686: LD_VAR 0 3
9690: PPUSH
9691: LD_INT 0
9693: PPUSH
9694: CALL_OW 324
9698: GO 9678
9700: POP
9701: POP
// case level of 1 :
9702: LD_VAR 0 1
9706: PUSH
9707: LD_INT 1
9709: DOUBLE
9710: EQUAL
9711: IFTRUE 9715
9713: GO 9868
9715: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9716: LD_INT 35
9718: PPUSH
9719: LD_VAR 0 3
9723: PPUSH
9724: LD_INT 1
9726: PPUSH
9727: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9731: LD_INT 45
9733: PPUSH
9734: LD_VAR 0 3
9738: PPUSH
9739: LD_INT 1
9741: PPUSH
9742: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9746: LD_INT 46
9748: PPUSH
9749: LD_VAR 0 3
9753: PPUSH
9754: LD_INT 1
9756: PPUSH
9757: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9761: LD_INT 47
9763: PPUSH
9764: LD_VAR 0 3
9768: PPUSH
9769: LD_INT 1
9771: PPUSH
9772: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9776: LD_INT 0
9778: PPUSH
9779: LD_VAR 0 3
9783: PPUSH
9784: LD_INT 1
9786: PPUSH
9787: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9791: LD_INT 2
9793: PPUSH
9794: LD_VAR 0 3
9798: PPUSH
9799: LD_INT 1
9801: PPUSH
9802: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9806: LD_INT 4
9808: PPUSH
9809: LD_VAR 0 3
9813: PPUSH
9814: LD_INT 1
9816: PPUSH
9817: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9821: LD_INT 6
9823: PPUSH
9824: LD_VAR 0 3
9828: PPUSH
9829: LD_INT 1
9831: PPUSH
9832: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9836: LD_INT 29
9838: PPUSH
9839: LD_VAR 0 3
9843: PPUSH
9844: LD_INT 1
9846: PPUSH
9847: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9851: LD_INT 31
9853: PPUSH
9854: LD_VAR 0 3
9858: PPUSH
9859: LD_INT 1
9861: PPUSH
9862: CALL_OW 324
// end ; 2 :
9866: GO 13620
9868: LD_INT 2
9870: DOUBLE
9871: EQUAL
9872: IFTRUE 9876
9874: GO 10074
9876: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9877: LD_INT 35
9879: PPUSH
9880: LD_VAR 0 3
9884: PPUSH
9885: LD_INT 1
9887: PPUSH
9888: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9892: LD_INT 45
9894: PPUSH
9895: LD_VAR 0 3
9899: PPUSH
9900: LD_INT 1
9902: PPUSH
9903: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9907: LD_INT 46
9909: PPUSH
9910: LD_VAR 0 3
9914: PPUSH
9915: LD_INT 1
9917: PPUSH
9918: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9922: LD_INT 47
9924: PPUSH
9925: LD_VAR 0 3
9929: PPUSH
9930: LD_INT 1
9932: PPUSH
9933: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9937: LD_INT 1
9939: PPUSH
9940: LD_VAR 0 3
9944: PPUSH
9945: LD_INT 1
9947: PPUSH
9948: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9952: LD_INT 2
9954: PPUSH
9955: LD_VAR 0 3
9959: PPUSH
9960: LD_INT 1
9962: PPUSH
9963: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9967: LD_INT 11
9969: PPUSH
9970: LD_VAR 0 3
9974: PPUSH
9975: LD_INT 1
9977: PPUSH
9978: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9982: LD_INT 0
9984: PPUSH
9985: LD_VAR 0 3
9989: PPUSH
9990: LD_INT 1
9992: PPUSH
9993: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9997: LD_INT 2
9999: PPUSH
10000: LD_VAR 0 3
10004: PPUSH
10005: LD_INT 1
10007: PPUSH
10008: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10012: LD_INT 4
10014: PPUSH
10015: LD_VAR 0 3
10019: PPUSH
10020: LD_INT 1
10022: PPUSH
10023: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10027: LD_INT 6
10029: PPUSH
10030: LD_VAR 0 3
10034: PPUSH
10035: LD_INT 1
10037: PPUSH
10038: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10042: LD_INT 29
10044: PPUSH
10045: LD_VAR 0 3
10049: PPUSH
10050: LD_INT 1
10052: PPUSH
10053: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10057: LD_INT 31
10059: PPUSH
10060: LD_VAR 0 3
10064: PPUSH
10065: LD_INT 1
10067: PPUSH
10068: CALL_OW 324
// end ; 3 :
10072: GO 13620
10074: LD_INT 3
10076: DOUBLE
10077: EQUAL
10078: IFTRUE 10082
10080: GO 10535
10082: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10083: LD_INT 35
10085: PPUSH
10086: LD_VAR 0 3
10090: PPUSH
10091: LD_INT 1
10093: PPUSH
10094: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10098: LD_INT 45
10100: PPUSH
10101: LD_VAR 0 3
10105: PPUSH
10106: LD_INT 1
10108: PPUSH
10109: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10113: LD_INT 46
10115: PPUSH
10116: LD_VAR 0 3
10120: PPUSH
10121: LD_INT 1
10123: PPUSH
10124: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10128: LD_INT 47
10130: PPUSH
10131: LD_VAR 0 3
10135: PPUSH
10136: LD_INT 1
10138: PPUSH
10139: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10143: LD_INT 1
10145: PPUSH
10146: LD_VAR 0 3
10150: PPUSH
10151: LD_INT 1
10153: PPUSH
10154: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10158: LD_INT 2
10160: PPUSH
10161: LD_VAR 0 3
10165: PPUSH
10166: LD_INT 1
10168: PPUSH
10169: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10173: LD_INT 11
10175: PPUSH
10176: LD_VAR 0 3
10180: PPUSH
10181: LD_INT 1
10183: PPUSH
10184: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10188: LD_INT 48
10190: PPUSH
10191: LD_VAR 0 3
10195: PPUSH
10196: LD_INT 1
10198: PPUSH
10199: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10203: LD_INT 69
10205: PPUSH
10206: LD_VAR 0 3
10210: PPUSH
10211: LD_INT 1
10213: PPUSH
10214: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10218: LD_INT 39
10220: PPUSH
10221: LD_VAR 0 3
10225: PPUSH
10226: LD_INT 1
10228: PPUSH
10229: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10233: LD_INT 43
10235: PPUSH
10236: LD_VAR 0 3
10240: PPUSH
10241: LD_INT 1
10243: PPUSH
10244: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10248: LD_INT 51
10250: PPUSH
10251: LD_VAR 0 3
10255: PPUSH
10256: LD_INT 1
10258: PPUSH
10259: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10263: LD_INT 6
10265: PPUSH
10266: LD_VAR 0 3
10270: PPUSH
10271: LD_INT 1
10273: PPUSH
10274: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10278: LD_INT 0
10280: PPUSH
10281: LD_VAR 0 3
10285: PPUSH
10286: LD_INT 1
10288: PPUSH
10289: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10293: LD_INT 2
10295: PPUSH
10296: LD_VAR 0 3
10300: PPUSH
10301: LD_INT 1
10303: PPUSH
10304: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10308: LD_INT 3
10310: PPUSH
10311: LD_VAR 0 3
10315: PPUSH
10316: LD_INT 1
10318: PPUSH
10319: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10323: LD_INT 4
10325: PPUSH
10326: LD_VAR 0 3
10330: PPUSH
10331: LD_INT 1
10333: PPUSH
10334: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10338: LD_INT 6
10340: PPUSH
10341: LD_VAR 0 3
10345: PPUSH
10346: LD_INT 1
10348: PPUSH
10349: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10353: LD_INT 7
10355: PPUSH
10356: LD_VAR 0 3
10360: PPUSH
10361: LD_INT 1
10363: PPUSH
10364: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10368: LD_INT 8
10370: PPUSH
10371: LD_VAR 0 3
10375: PPUSH
10376: LD_INT 1
10378: PPUSH
10379: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10383: LD_INT 10
10385: PPUSH
10386: LD_VAR 0 3
10390: PPUSH
10391: LD_INT 1
10393: PPUSH
10394: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10398: LD_INT 15
10400: PPUSH
10401: LD_VAR 0 3
10405: PPUSH
10406: LD_INT 1
10408: PPUSH
10409: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10413: LD_INT 16
10415: PPUSH
10416: LD_VAR 0 3
10420: PPUSH
10421: LD_INT 1
10423: PPUSH
10424: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10428: LD_INT 17
10430: PPUSH
10431: LD_VAR 0 3
10435: PPUSH
10436: LD_INT 1
10438: PPUSH
10439: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10443: LD_INT 20
10445: PPUSH
10446: LD_VAR 0 3
10450: PPUSH
10451: LD_INT 1
10453: PPUSH
10454: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10458: LD_INT 26
10460: PPUSH
10461: LD_VAR 0 3
10465: PPUSH
10466: LD_INT 1
10468: PPUSH
10469: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10473: LD_INT 27
10475: PPUSH
10476: LD_VAR 0 3
10480: PPUSH
10481: LD_INT 1
10483: PPUSH
10484: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10488: LD_INT 29
10490: PPUSH
10491: LD_VAR 0 3
10495: PPUSH
10496: LD_INT 1
10498: PPUSH
10499: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10503: LD_INT 31
10505: PPUSH
10506: LD_VAR 0 3
10510: PPUSH
10511: LD_INT 1
10513: PPUSH
10514: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10518: LD_INT 32
10520: PPUSH
10521: LD_VAR 0 3
10525: PPUSH
10526: LD_INT 1
10528: PPUSH
10529: CALL_OW 324
// end ; 4 :
10533: GO 13620
10535: LD_INT 4
10537: DOUBLE
10538: EQUAL
10539: IFTRUE 10543
10541: GO 11491
10543: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10544: LD_INT 35
10546: PPUSH
10547: LD_VAR 0 3
10551: PPUSH
10552: LD_INT 1
10554: PPUSH
10555: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10559: LD_INT 45
10561: PPUSH
10562: LD_VAR 0 3
10566: PPUSH
10567: LD_INT 1
10569: PPUSH
10570: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10574: LD_INT 46
10576: PPUSH
10577: LD_VAR 0 3
10581: PPUSH
10582: LD_INT 1
10584: PPUSH
10585: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10589: LD_INT 47
10591: PPUSH
10592: LD_VAR 0 3
10596: PPUSH
10597: LD_INT 1
10599: PPUSH
10600: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10604: LD_INT 1
10606: PPUSH
10607: LD_VAR 0 3
10611: PPUSH
10612: LD_INT 1
10614: PPUSH
10615: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10619: LD_INT 2
10621: PPUSH
10622: LD_VAR 0 3
10626: PPUSH
10627: LD_INT 1
10629: PPUSH
10630: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10634: LD_INT 11
10636: PPUSH
10637: LD_VAR 0 3
10641: PPUSH
10642: LD_INT 1
10644: PPUSH
10645: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10649: LD_INT 20
10651: PPUSH
10652: LD_VAR 0 3
10656: PPUSH
10657: LD_INT 1
10659: PPUSH
10660: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10664: LD_INT 48
10666: PPUSH
10667: LD_VAR 0 3
10671: PPUSH
10672: LD_INT 1
10674: PPUSH
10675: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10679: LD_INT 49
10681: PPUSH
10682: LD_VAR 0 3
10686: PPUSH
10687: LD_INT 1
10689: PPUSH
10690: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10694: LD_INT 69
10696: PPUSH
10697: LD_VAR 0 3
10701: PPUSH
10702: LD_INT 1
10704: PPUSH
10705: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10709: LD_INT 39
10711: PPUSH
10712: LD_VAR 0 3
10716: PPUSH
10717: LD_INT 1
10719: PPUSH
10720: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10724: LD_INT 34
10726: PPUSH
10727: LD_VAR 0 3
10731: PPUSH
10732: LD_INT 1
10734: PPUSH
10735: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10739: LD_INT 42
10741: PPUSH
10742: LD_VAR 0 3
10746: PPUSH
10747: LD_INT 1
10749: PPUSH
10750: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10754: LD_INT 44
10756: PPUSH
10757: LD_VAR 0 3
10761: PPUSH
10762: LD_INT 1
10764: PPUSH
10765: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10769: LD_INT 41
10771: PPUSH
10772: LD_VAR 0 3
10776: PPUSH
10777: LD_INT 1
10779: PPUSH
10780: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10784: LD_INT 43
10786: PPUSH
10787: LD_VAR 0 3
10791: PPUSH
10792: LD_INT 1
10794: PPUSH
10795: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10799: LD_INT 70
10801: PPUSH
10802: LD_VAR 0 3
10806: PPUSH
10807: LD_INT 1
10809: PPUSH
10810: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10814: LD_INT 51
10816: PPUSH
10817: LD_VAR 0 3
10821: PPUSH
10822: LD_INT 1
10824: PPUSH
10825: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10829: LD_INT 52
10831: PPUSH
10832: LD_VAR 0 3
10836: PPUSH
10837: LD_INT 1
10839: PPUSH
10840: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10844: LD_INT 6
10846: PPUSH
10847: LD_VAR 0 3
10851: PPUSH
10852: LD_INT 1
10854: PPUSH
10855: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10859: LD_INT 15
10861: PPUSH
10862: LD_VAR 0 3
10866: PPUSH
10867: LD_INT 1
10869: PPUSH
10870: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10874: LD_INT 7
10876: PPUSH
10877: LD_VAR 0 3
10881: PPUSH
10882: LD_INT 1
10884: PPUSH
10885: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10889: LD_INT 12
10891: PPUSH
10892: LD_VAR 0 3
10896: PPUSH
10897: LD_INT 1
10899: PPUSH
10900: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10904: LD_INT 18
10906: PPUSH
10907: LD_VAR 0 3
10911: PPUSH
10912: LD_INT 1
10914: PPUSH
10915: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10919: LD_INT 60
10921: PPUSH
10922: LD_VAR 0 3
10926: PPUSH
10927: LD_INT 1
10929: PPUSH
10930: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10934: LD_INT 9
10936: PPUSH
10937: LD_VAR 0 3
10941: PPUSH
10942: LD_INT 1
10944: PPUSH
10945: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10949: LD_INT 30
10951: PPUSH
10952: LD_VAR 0 3
10956: PPUSH
10957: LD_INT 1
10959: PPUSH
10960: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10964: LD_INT 37
10966: PPUSH
10967: LD_VAR 0 3
10971: PPUSH
10972: LD_INT 1
10974: PPUSH
10975: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10979: LD_INT 5
10981: PPUSH
10982: LD_VAR 0 3
10986: PPUSH
10987: LD_INT 1
10989: PPUSH
10990: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10994: LD_INT 66
10996: PPUSH
10997: LD_VAR 0 3
11001: PPUSH
11002: LD_INT 1
11004: PPUSH
11005: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11009: LD_INT 21
11011: PPUSH
11012: LD_VAR 0 3
11016: PPUSH
11017: LD_INT 1
11019: PPUSH
11020: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11024: LD_INT 22
11026: PPUSH
11027: LD_VAR 0 3
11031: PPUSH
11032: LD_INT 1
11034: PPUSH
11035: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11039: LD_INT 54
11041: PPUSH
11042: LD_VAR 0 3
11046: PPUSH
11047: LD_INT 1
11049: PPUSH
11050: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11054: LD_INT 0
11056: PPUSH
11057: LD_VAR 0 3
11061: PPUSH
11062: LD_INT 1
11064: PPUSH
11065: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11069: LD_INT 1
11071: PPUSH
11072: LD_VAR 0 3
11076: PPUSH
11077: LD_INT 1
11079: PPUSH
11080: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11084: LD_INT 2
11086: PPUSH
11087: LD_VAR 0 3
11091: PPUSH
11092: LD_INT 1
11094: PPUSH
11095: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11099: LD_INT 3
11101: PPUSH
11102: LD_VAR 0 3
11106: PPUSH
11107: LD_INT 1
11109: PPUSH
11110: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11114: LD_INT 4
11116: PPUSH
11117: LD_VAR 0 3
11121: PPUSH
11122: LD_INT 1
11124: PPUSH
11125: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11129: LD_INT 5
11131: PPUSH
11132: LD_VAR 0 3
11136: PPUSH
11137: LD_INT 1
11139: PPUSH
11140: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11144: LD_INT 6
11146: PPUSH
11147: LD_VAR 0 3
11151: PPUSH
11152: LD_INT 1
11154: PPUSH
11155: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11159: LD_INT 7
11161: PPUSH
11162: LD_VAR 0 3
11166: PPUSH
11167: LD_INT 1
11169: PPUSH
11170: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11174: LD_INT 8
11176: PPUSH
11177: LD_VAR 0 3
11181: PPUSH
11182: LD_INT 1
11184: PPUSH
11185: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11189: LD_INT 10
11191: PPUSH
11192: LD_VAR 0 3
11196: PPUSH
11197: LD_INT 1
11199: PPUSH
11200: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11204: LD_INT 11
11206: PPUSH
11207: LD_VAR 0 3
11211: PPUSH
11212: LD_INT 1
11214: PPUSH
11215: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11219: LD_INT 12
11221: PPUSH
11222: LD_VAR 0 3
11226: PPUSH
11227: LD_INT 1
11229: PPUSH
11230: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11234: LD_INT 13
11236: PPUSH
11237: LD_VAR 0 3
11241: PPUSH
11242: LD_INT 1
11244: PPUSH
11245: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11249: LD_INT 14
11251: PPUSH
11252: LD_VAR 0 3
11256: PPUSH
11257: LD_INT 1
11259: PPUSH
11260: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11264: LD_INT 15
11266: PPUSH
11267: LD_VAR 0 3
11271: PPUSH
11272: LD_INT 1
11274: PPUSH
11275: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11279: LD_INT 16
11281: PPUSH
11282: LD_VAR 0 3
11286: PPUSH
11287: LD_INT 1
11289: PPUSH
11290: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11294: LD_INT 17
11296: PPUSH
11297: LD_VAR 0 3
11301: PPUSH
11302: LD_INT 1
11304: PPUSH
11305: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11309: LD_INT 19
11311: PPUSH
11312: LD_VAR 0 3
11316: PPUSH
11317: LD_INT 1
11319: PPUSH
11320: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11324: LD_INT 20
11326: PPUSH
11327: LD_VAR 0 3
11331: PPUSH
11332: LD_INT 1
11334: PPUSH
11335: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11339: LD_INT 21
11341: PPUSH
11342: LD_VAR 0 3
11346: PPUSH
11347: LD_INT 1
11349: PPUSH
11350: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11354: LD_INT 23
11356: PPUSH
11357: LD_VAR 0 3
11361: PPUSH
11362: LD_INT 1
11364: PPUSH
11365: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11369: LD_INT 26
11371: PPUSH
11372: LD_VAR 0 3
11376: PPUSH
11377: LD_INT 1
11379: PPUSH
11380: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11384: LD_INT 27
11386: PPUSH
11387: LD_VAR 0 3
11391: PPUSH
11392: LD_INT 1
11394: PPUSH
11395: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11399: LD_INT 28
11401: PPUSH
11402: LD_VAR 0 3
11406: PPUSH
11407: LD_INT 1
11409: PPUSH
11410: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11414: LD_INT 29
11416: PPUSH
11417: LD_VAR 0 3
11421: PPUSH
11422: LD_INT 1
11424: PPUSH
11425: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11429: LD_INT 30
11431: PPUSH
11432: LD_VAR 0 3
11436: PPUSH
11437: LD_INT 1
11439: PPUSH
11440: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11444: LD_INT 31
11446: PPUSH
11447: LD_VAR 0 3
11451: PPUSH
11452: LD_INT 1
11454: PPUSH
11455: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11459: LD_INT 32
11461: PPUSH
11462: LD_VAR 0 3
11466: PPUSH
11467: LD_INT 1
11469: PPUSH
11470: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11474: LD_INT 36
11476: PPUSH
11477: LD_VAR 0 3
11481: PPUSH
11482: LD_INT 1
11484: PPUSH
11485: CALL_OW 324
// end ; 5 :
11489: GO 13620
11491: LD_INT 5
11493: DOUBLE
11494: EQUAL
11495: IFTRUE 11499
11497: GO 12612
11499: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11500: LD_INT 35
11502: PPUSH
11503: LD_VAR 0 3
11507: PPUSH
11508: LD_INT 1
11510: PPUSH
11511: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11515: LD_INT 45
11517: PPUSH
11518: LD_VAR 0 3
11522: PPUSH
11523: LD_INT 1
11525: PPUSH
11526: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11530: LD_INT 46
11532: PPUSH
11533: LD_VAR 0 3
11537: PPUSH
11538: LD_INT 1
11540: PPUSH
11541: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11545: LD_INT 47
11547: PPUSH
11548: LD_VAR 0 3
11552: PPUSH
11553: LD_INT 1
11555: PPUSH
11556: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11560: LD_INT 1
11562: PPUSH
11563: LD_VAR 0 3
11567: PPUSH
11568: LD_INT 1
11570: PPUSH
11571: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11575: LD_INT 2
11577: PPUSH
11578: LD_VAR 0 3
11582: PPUSH
11583: LD_INT 1
11585: PPUSH
11586: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11590: LD_INT 11
11592: PPUSH
11593: LD_VAR 0 3
11597: PPUSH
11598: LD_INT 1
11600: PPUSH
11601: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11605: LD_INT 20
11607: PPUSH
11608: LD_VAR 0 3
11612: PPUSH
11613: LD_INT 1
11615: PPUSH
11616: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11620: LD_INT 48
11622: PPUSH
11623: LD_VAR 0 3
11627: PPUSH
11628: LD_INT 1
11630: PPUSH
11631: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11635: LD_INT 49
11637: PPUSH
11638: LD_VAR 0 3
11642: PPUSH
11643: LD_INT 1
11645: PPUSH
11646: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11650: LD_INT 69
11652: PPUSH
11653: LD_VAR 0 3
11657: PPUSH
11658: LD_INT 1
11660: PPUSH
11661: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11665: LD_INT 39
11667: PPUSH
11668: LD_VAR 0 3
11672: PPUSH
11673: LD_INT 1
11675: PPUSH
11676: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11680: LD_INT 34
11682: PPUSH
11683: LD_VAR 0 3
11687: PPUSH
11688: LD_INT 1
11690: PPUSH
11691: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11695: LD_INT 42
11697: PPUSH
11698: LD_VAR 0 3
11702: PPUSH
11703: LD_INT 1
11705: PPUSH
11706: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11710: LD_INT 44
11712: PPUSH
11713: LD_VAR 0 3
11717: PPUSH
11718: LD_INT 1
11720: PPUSH
11721: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11725: LD_INT 41
11727: PPUSH
11728: LD_VAR 0 3
11732: PPUSH
11733: LD_INT 1
11735: PPUSH
11736: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11740: LD_INT 40
11742: PPUSH
11743: LD_VAR 0 3
11747: PPUSH
11748: LD_INT 1
11750: PPUSH
11751: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11755: LD_INT 43
11757: PPUSH
11758: LD_VAR 0 3
11762: PPUSH
11763: LD_INT 1
11765: PPUSH
11766: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11770: LD_INT 70
11772: PPUSH
11773: LD_VAR 0 3
11777: PPUSH
11778: LD_INT 1
11780: PPUSH
11781: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11785: LD_INT 51
11787: PPUSH
11788: LD_VAR 0 3
11792: PPUSH
11793: LD_INT 1
11795: PPUSH
11796: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11800: LD_INT 52
11802: PPUSH
11803: LD_VAR 0 3
11807: PPUSH
11808: LD_INT 1
11810: PPUSH
11811: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11815: LD_INT 6
11817: PPUSH
11818: LD_VAR 0 3
11822: PPUSH
11823: LD_INT 1
11825: PPUSH
11826: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11830: LD_INT 15
11832: PPUSH
11833: LD_VAR 0 3
11837: PPUSH
11838: LD_INT 1
11840: PPUSH
11841: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11845: LD_INT 7
11847: PPUSH
11848: LD_VAR 0 3
11852: PPUSH
11853: LD_INT 1
11855: PPUSH
11856: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11860: LD_INT 12
11862: PPUSH
11863: LD_VAR 0 3
11867: PPUSH
11868: LD_INT 1
11870: PPUSH
11871: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11875: LD_INT 17
11877: PPUSH
11878: LD_VAR 0 3
11882: PPUSH
11883: LD_INT 1
11885: PPUSH
11886: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11890: LD_INT 18
11892: PPUSH
11893: LD_VAR 0 3
11897: PPUSH
11898: LD_INT 1
11900: PPUSH
11901: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11905: LD_INT 60
11907: PPUSH
11908: LD_VAR 0 3
11912: PPUSH
11913: LD_INT 1
11915: PPUSH
11916: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11920: LD_INT 32
11922: PPUSH
11923: LD_VAR 0 3
11927: PPUSH
11928: LD_INT 1
11930: PPUSH
11931: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11935: LD_INT 9
11937: PPUSH
11938: LD_VAR 0 3
11942: PPUSH
11943: LD_INT 1
11945: PPUSH
11946: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11950: LD_INT 57
11952: PPUSH
11953: LD_VAR 0 3
11957: PPUSH
11958: LD_INT 1
11960: PPUSH
11961: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11965: LD_INT 30
11967: PPUSH
11968: LD_VAR 0 3
11972: PPUSH
11973: LD_INT 1
11975: PPUSH
11976: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11980: LD_INT 37
11982: PPUSH
11983: LD_VAR 0 3
11987: PPUSH
11988: LD_INT 1
11990: PPUSH
11991: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11995: LD_INT 63
11997: PPUSH
11998: LD_VAR 0 3
12002: PPUSH
12003: LD_INT 1
12005: PPUSH
12006: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12010: LD_INT 3
12012: PPUSH
12013: LD_VAR 0 3
12017: PPUSH
12018: LD_INT 1
12020: PPUSH
12021: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12025: LD_INT 4
12027: PPUSH
12028: LD_VAR 0 3
12032: PPUSH
12033: LD_INT 1
12035: PPUSH
12036: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12040: LD_INT 5
12042: PPUSH
12043: LD_VAR 0 3
12047: PPUSH
12048: LD_INT 1
12050: PPUSH
12051: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12055: LD_INT 66
12057: PPUSH
12058: LD_VAR 0 3
12062: PPUSH
12063: LD_INT 1
12065: PPUSH
12066: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12070: LD_INT 21
12072: PPUSH
12073: LD_VAR 0 3
12077: PPUSH
12078: LD_INT 1
12080: PPUSH
12081: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12085: LD_INT 22
12087: PPUSH
12088: LD_VAR 0 3
12092: PPUSH
12093: LD_INT 1
12095: PPUSH
12096: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12100: LD_INT 19
12102: PPUSH
12103: LD_VAR 0 3
12107: PPUSH
12108: LD_INT 1
12110: PPUSH
12111: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12115: LD_INT 54
12117: PPUSH
12118: LD_VAR 0 3
12122: PPUSH
12123: LD_INT 1
12125: PPUSH
12126: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12130: LD_INT 55
12132: PPUSH
12133: LD_VAR 0 3
12137: PPUSH
12138: LD_INT 1
12140: PPUSH
12141: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12145: LD_INT 0
12147: PPUSH
12148: LD_VAR 0 3
12152: PPUSH
12153: LD_INT 1
12155: PPUSH
12156: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12160: LD_INT 1
12162: PPUSH
12163: LD_VAR 0 3
12167: PPUSH
12168: LD_INT 1
12170: PPUSH
12171: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12175: LD_INT 2
12177: PPUSH
12178: LD_VAR 0 3
12182: PPUSH
12183: LD_INT 1
12185: PPUSH
12186: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12190: LD_INT 3
12192: PPUSH
12193: LD_VAR 0 3
12197: PPUSH
12198: LD_INT 1
12200: PPUSH
12201: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12205: LD_INT 4
12207: PPUSH
12208: LD_VAR 0 3
12212: PPUSH
12213: LD_INT 1
12215: PPUSH
12216: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12220: LD_INT 5
12222: PPUSH
12223: LD_VAR 0 3
12227: PPUSH
12228: LD_INT 1
12230: PPUSH
12231: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12235: LD_INT 6
12237: PPUSH
12238: LD_VAR 0 3
12242: PPUSH
12243: LD_INT 1
12245: PPUSH
12246: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12250: LD_INT 7
12252: PPUSH
12253: LD_VAR 0 3
12257: PPUSH
12258: LD_INT 1
12260: PPUSH
12261: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12265: LD_INT 8
12267: PPUSH
12268: LD_VAR 0 3
12272: PPUSH
12273: LD_INT 1
12275: PPUSH
12276: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12280: LD_INT 10
12282: PPUSH
12283: LD_VAR 0 3
12287: PPUSH
12288: LD_INT 1
12290: PPUSH
12291: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12295: LD_INT 11
12297: PPUSH
12298: LD_VAR 0 3
12302: PPUSH
12303: LD_INT 1
12305: PPUSH
12306: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12310: LD_INT 12
12312: PPUSH
12313: LD_VAR 0 3
12317: PPUSH
12318: LD_INT 1
12320: PPUSH
12321: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12325: LD_INT 13
12327: PPUSH
12328: LD_VAR 0 3
12332: PPUSH
12333: LD_INT 1
12335: PPUSH
12336: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12340: LD_INT 14
12342: PPUSH
12343: LD_VAR 0 3
12347: PPUSH
12348: LD_INT 1
12350: PPUSH
12351: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12355: LD_INT 15
12357: PPUSH
12358: LD_VAR 0 3
12362: PPUSH
12363: LD_INT 1
12365: PPUSH
12366: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12370: LD_INT 16
12372: PPUSH
12373: LD_VAR 0 3
12377: PPUSH
12378: LD_INT 1
12380: PPUSH
12381: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12385: LD_INT 17
12387: PPUSH
12388: LD_VAR 0 3
12392: PPUSH
12393: LD_INT 1
12395: PPUSH
12396: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
12400: LD_INT 18
12402: PPUSH
12403: LD_VAR 0 3
12407: PPUSH
12408: LD_INT 1
12410: PPUSH
12411: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12415: LD_INT 19
12417: PPUSH
12418: LD_VAR 0 3
12422: PPUSH
12423: LD_INT 1
12425: PPUSH
12426: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12430: LD_INT 20
12432: PPUSH
12433: LD_VAR 0 3
12437: PPUSH
12438: LD_INT 1
12440: PPUSH
12441: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12445: LD_INT 21
12447: PPUSH
12448: LD_VAR 0 3
12452: PPUSH
12453: LD_INT 1
12455: PPUSH
12456: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12460: LD_INT 23
12462: PPUSH
12463: LD_VAR 0 3
12467: PPUSH
12468: LD_INT 1
12470: PPUSH
12471: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12475: LD_INT 26
12477: PPUSH
12478: LD_VAR 0 3
12482: PPUSH
12483: LD_INT 1
12485: PPUSH
12486: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12490: LD_INT 27
12492: PPUSH
12493: LD_VAR 0 3
12497: PPUSH
12498: LD_INT 1
12500: PPUSH
12501: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12505: LD_INT 28
12507: PPUSH
12508: LD_VAR 0 3
12512: PPUSH
12513: LD_INT 1
12515: PPUSH
12516: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12520: LD_INT 29
12522: PPUSH
12523: LD_VAR 0 3
12527: PPUSH
12528: LD_INT 1
12530: PPUSH
12531: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12535: LD_INT 30
12537: PPUSH
12538: LD_VAR 0 3
12542: PPUSH
12543: LD_INT 1
12545: PPUSH
12546: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12550: LD_INT 31
12552: PPUSH
12553: LD_VAR 0 3
12557: PPUSH
12558: LD_INT 1
12560: PPUSH
12561: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12565: LD_INT 32
12567: PPUSH
12568: LD_VAR 0 3
12572: PPUSH
12573: LD_INT 1
12575: PPUSH
12576: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
12580: LD_INT 33
12582: PPUSH
12583: LD_VAR 0 3
12587: PPUSH
12588: LD_INT 1
12590: PPUSH
12591: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12595: LD_INT 36
12597: PPUSH
12598: LD_VAR 0 3
12602: PPUSH
12603: LD_INT 1
12605: PPUSH
12606: CALL_OW 324
// end ; 6 :
12610: GO 13620
12612: LD_INT 6
12614: DOUBLE
12615: EQUAL
12616: IFTRUE 12620
12618: GO 13545
12620: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12621: LD_INT 35
12623: PPUSH
12624: LD_VAR 0 3
12628: PPUSH
12629: LD_INT 1
12631: PPUSH
12632: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12636: LD_INT 45
12638: PPUSH
12639: LD_VAR 0 3
12643: PPUSH
12644: LD_INT 1
12646: PPUSH
12647: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12651: LD_INT 46
12653: PPUSH
12654: LD_VAR 0 3
12658: PPUSH
12659: LD_INT 1
12661: PPUSH
12662: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12666: LD_INT 47
12668: PPUSH
12669: LD_VAR 0 3
12673: PPUSH
12674: LD_INT 1
12676: PPUSH
12677: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12681: LD_INT 1
12683: PPUSH
12684: LD_VAR 0 3
12688: PPUSH
12689: LD_INT 1
12691: PPUSH
12692: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12696: LD_INT 2
12698: PPUSH
12699: LD_VAR 0 3
12703: PPUSH
12704: LD_INT 1
12706: PPUSH
12707: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12711: LD_INT 11
12713: PPUSH
12714: LD_VAR 0 3
12718: PPUSH
12719: LD_INT 1
12721: PPUSH
12722: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12726: LD_INT 20
12728: PPUSH
12729: LD_VAR 0 3
12733: PPUSH
12734: LD_INT 1
12736: PPUSH
12737: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12741: LD_INT 48
12743: PPUSH
12744: LD_VAR 0 3
12748: PPUSH
12749: LD_INT 1
12751: PPUSH
12752: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12756: LD_INT 49
12758: PPUSH
12759: LD_VAR 0 3
12763: PPUSH
12764: LD_INT 1
12766: PPUSH
12767: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12771: LD_INT 50
12773: PPUSH
12774: LD_VAR 0 3
12778: PPUSH
12779: LD_INT 1
12781: PPUSH
12782: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12786: LD_INT 69
12788: PPUSH
12789: LD_VAR 0 3
12793: PPUSH
12794: LD_INT 1
12796: PPUSH
12797: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12801: LD_INT 39
12803: PPUSH
12804: LD_VAR 0 3
12808: PPUSH
12809: LD_INT 1
12811: PPUSH
12812: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12816: LD_INT 34
12818: PPUSH
12819: LD_VAR 0 3
12823: PPUSH
12824: LD_INT 1
12826: PPUSH
12827: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12831: LD_INT 42
12833: PPUSH
12834: LD_VAR 0 3
12838: PPUSH
12839: LD_INT 1
12841: PPUSH
12842: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12846: LD_INT 44
12848: PPUSH
12849: LD_VAR 0 3
12853: PPUSH
12854: LD_INT 1
12856: PPUSH
12857: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12861: LD_INT 41
12863: PPUSH
12864: LD_VAR 0 3
12868: PPUSH
12869: LD_INT 1
12871: PPUSH
12872: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
12876: LD_INT 13
12878: PPUSH
12879: LD_VAR 0 3
12883: PPUSH
12884: LD_INT 1
12886: PPUSH
12887: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12891: LD_INT 40
12893: PPUSH
12894: LD_VAR 0 3
12898: PPUSH
12899: LD_INT 1
12901: PPUSH
12902: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12906: LD_INT 43
12908: PPUSH
12909: LD_VAR 0 3
12913: PPUSH
12914: LD_INT 1
12916: PPUSH
12917: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12921: LD_INT 70
12923: PPUSH
12924: LD_VAR 0 3
12928: PPUSH
12929: LD_INT 1
12931: PPUSH
12932: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
12936: LD_INT 23
12938: PPUSH
12939: LD_VAR 0 3
12943: PPUSH
12944: LD_INT 1
12946: PPUSH
12947: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12951: LD_INT 51
12953: PPUSH
12954: LD_VAR 0 3
12958: PPUSH
12959: LD_INT 1
12961: PPUSH
12962: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12966: LD_INT 52
12968: PPUSH
12969: LD_VAR 0 3
12973: PPUSH
12974: LD_INT 1
12976: PPUSH
12977: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12981: LD_INT 6
12983: PPUSH
12984: LD_VAR 0 3
12988: PPUSH
12989: LD_INT 1
12991: PPUSH
12992: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12996: LD_INT 15
12998: PPUSH
12999: LD_VAR 0 3
13003: PPUSH
13004: LD_INT 1
13006: PPUSH
13007: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13011: LD_INT 7
13013: PPUSH
13014: LD_VAR 0 3
13018: PPUSH
13019: LD_INT 1
13021: PPUSH
13022: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13026: LD_INT 12
13028: PPUSH
13029: LD_VAR 0 3
13033: PPUSH
13034: LD_INT 1
13036: PPUSH
13037: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
13041: LD_INT 10
13043: PPUSH
13044: LD_VAR 0 3
13048: PPUSH
13049: LD_INT 1
13051: PPUSH
13052: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
13056: LD_INT 17
13058: PPUSH
13059: LD_VAR 0 3
13063: PPUSH
13064: LD_INT 1
13066: PPUSH
13067: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13071: LD_INT 18
13073: PPUSH
13074: LD_VAR 0 3
13078: PPUSH
13079: LD_INT 1
13081: PPUSH
13082: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13086: LD_INT 60
13088: PPUSH
13089: LD_VAR 0 3
13093: PPUSH
13094: LD_INT 1
13096: PPUSH
13097: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
13101: LD_INT 61
13103: PPUSH
13104: LD_VAR 0 3
13108: PPUSH
13109: LD_INT 1
13111: PPUSH
13112: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13116: LD_INT 32
13118: PPUSH
13119: LD_VAR 0 3
13123: PPUSH
13124: LD_INT 1
13126: PPUSH
13127: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
13131: LD_INT 27
13133: PPUSH
13134: LD_VAR 0 3
13138: PPUSH
13139: LD_INT 1
13141: PPUSH
13142: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
13146: LD_INT 36
13148: PPUSH
13149: LD_VAR 0 3
13153: PPUSH
13154: LD_INT 1
13156: PPUSH
13157: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
13161: LD_INT 33
13163: PPUSH
13164: LD_VAR 0 3
13168: PPUSH
13169: LD_INT 1
13171: PPUSH
13172: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13176: LD_INT 9
13178: PPUSH
13179: LD_VAR 0 3
13183: PPUSH
13184: LD_INT 1
13186: PPUSH
13187: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13191: LD_INT 38
13193: PPUSH
13194: LD_VAR 0 3
13198: PPUSH
13199: LD_INT 1
13201: PPUSH
13202: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13206: LD_INT 57
13208: PPUSH
13209: LD_VAR 0 3
13213: PPUSH
13214: LD_INT 1
13216: PPUSH
13217: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13221: LD_INT 58
13223: PPUSH
13224: LD_VAR 0 3
13228: PPUSH
13229: LD_INT 1
13231: PPUSH
13232: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13236: LD_INT 28
13238: PPUSH
13239: LD_VAR 0 3
13243: PPUSH
13244: LD_INT 1
13246: PPUSH
13247: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13251: LD_INT 29
13253: PPUSH
13254: LD_VAR 0 3
13258: PPUSH
13259: LD_INT 1
13261: PPUSH
13262: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13266: LD_INT 30
13268: PPUSH
13269: LD_VAR 0 3
13273: PPUSH
13274: LD_INT 1
13276: PPUSH
13277: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13281: LD_INT 37
13283: PPUSH
13284: LD_VAR 0 3
13288: PPUSH
13289: LD_INT 1
13291: PPUSH
13292: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13296: LD_INT 63
13298: PPUSH
13299: LD_VAR 0 3
13303: PPUSH
13304: LD_INT 1
13306: PPUSH
13307: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13311: LD_INT 64
13313: PPUSH
13314: LD_VAR 0 3
13318: PPUSH
13319: LD_INT 1
13321: PPUSH
13322: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13326: LD_INT 3
13328: PPUSH
13329: LD_VAR 0 3
13333: PPUSH
13334: LD_INT 1
13336: PPUSH
13337: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13341: LD_INT 4
13343: PPUSH
13344: LD_VAR 0 3
13348: PPUSH
13349: LD_INT 1
13351: PPUSH
13352: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13356: LD_INT 5
13358: PPUSH
13359: LD_VAR 0 3
13363: PPUSH
13364: LD_INT 1
13366: PPUSH
13367: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13371: LD_INT 8
13373: PPUSH
13374: LD_VAR 0 3
13378: PPUSH
13379: LD_INT 1
13381: PPUSH
13382: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13386: LD_INT 66
13388: PPUSH
13389: LD_VAR 0 3
13393: PPUSH
13394: LD_INT 1
13396: PPUSH
13397: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
13401: LD_INT 67
13403: PPUSH
13404: LD_VAR 0 3
13408: PPUSH
13409: LD_INT 1
13411: PPUSH
13412: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13416: LD_INT 21
13418: PPUSH
13419: LD_VAR 0 3
13423: PPUSH
13424: LD_INT 1
13426: PPUSH
13427: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13431: LD_INT 22
13433: PPUSH
13434: LD_VAR 0 3
13438: PPUSH
13439: LD_INT 1
13441: PPUSH
13442: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13446: LD_INT 19
13448: PPUSH
13449: LD_VAR 0 3
13453: PPUSH
13454: LD_INT 1
13456: PPUSH
13457: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13461: LD_INT 26
13463: PPUSH
13464: LD_VAR 0 3
13468: PPUSH
13469: LD_INT 1
13471: PPUSH
13472: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13476: LD_INT 54
13478: PPUSH
13479: LD_VAR 0 3
13483: PPUSH
13484: LD_INT 1
13486: PPUSH
13487: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13491: LD_INT 55
13493: PPUSH
13494: LD_VAR 0 3
13498: PPUSH
13499: LD_INT 1
13501: PPUSH
13502: CALL_OW 322
// for i = 0 to 39 do
13506: LD_ADDR_VAR 0 4
13510: PUSH
13511: DOUBLE
13512: LD_INT 0
13514: DEC
13515: ST_TO_ADDR
13516: LD_INT 39
13518: PUSH
13519: FOR_TO
13520: IFFALSE 13541
// SetRestrict ( i , side , true ) ;
13522: LD_VAR 0 4
13526: PPUSH
13527: LD_VAR 0 3
13531: PPUSH
13532: LD_INT 1
13534: PPUSH
13535: CALL_OW 324
13539: GO 13519
13541: POP
13542: POP
// end ; else
13543: GO 13620
13545: POP
// begin for i = 1 to 73 do
13546: LD_ADDR_VAR 0 4
13550: PUSH
13551: DOUBLE
13552: LD_INT 1
13554: DEC
13555: ST_TO_ADDR
13556: LD_INT 73
13558: PUSH
13559: FOR_TO
13560: IFFALSE 13581
// SetTech ( i , side , state_enabled ) ;
13562: LD_VAR 0 4
13566: PPUSH
13567: LD_VAR 0 3
13571: PPUSH
13572: LD_INT 1
13574: PPUSH
13575: CALL_OW 322
13579: GO 13559
13581: POP
13582: POP
// for i = 0 to 39 do
13583: LD_ADDR_VAR 0 4
13587: PUSH
13588: DOUBLE
13589: LD_INT 0
13591: DEC
13592: ST_TO_ADDR
13593: LD_INT 39
13595: PUSH
13596: FOR_TO
13597: IFFALSE 13618
// SetRestrict ( i , side , true ) ;
13599: LD_VAR 0 4
13603: PPUSH
13604: LD_VAR 0 3
13608: PPUSH
13609: LD_INT 1
13611: PPUSH
13612: CALL_OW 324
13616: GO 13596
13618: POP
13619: POP
// end ; end ; end ;
13620: GO 9625
13622: POP
13623: POP
// end ;
13624: LD_VAR 0 2
13628: RET
