// export Game_Type ; export def_base_level , def_amount_of_people , def_initial_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_amount_of_apemen , def_people_respawning , def_siberite_bomb , def_builduptime ; export is_depot , number_of_breastworks , number_of_people , initial_level , amount_of_apemen , starting_crates , starting_resources , shipments_density , siberite_bomb_Delay , spawning_koef_of_apemen , respawning_time_min , respawning_time_max , def_win_rules ; export Side_Count , Team_Count , Player_Side , Player_Team , Side_Teams , Teams ; export Side_Positions , Side_Nations , Side_Names , Team_Names , Team_Game , Side_Comps ; export depot_def , start_def , extra_oil_deposits_locations ; export heroes ; export commander , battle_flags_id , morale_decreasing_time ; var global_units , global_defined , soldiers_created ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function create_forest ; var area ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
// PlaceTreesToArea ( BigForest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , Rand ( 500 , 570 ) , 50 , 2 ) ;
  72: LD_INT 6
  74: PPUSH
  75: LD_INT 21
  77: PUSH
  78: LD_INT 22
  80: PUSH
  81: LD_INT 24
  83: PUSH
  84: LD_INT 21
  86: PUSH
  87: LD_INT 22
  89: PUSH
  90: LD_INT 24
  92: PUSH
  93: LD_INT 38
  95: PUSH
  96: LD_INT 39
  98: PUSH
  99: EMPTY
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: PPUSH
 109: LD_INT 500
 111: PPUSH
 112: LD_INT 570
 114: PPUSH
 115: CALL_OW 12
 119: PPUSH
 120: LD_INT 50
 122: PPUSH
 123: LD_INT 2
 125: PPUSH
 126: CALL_OW 352
// if def_base_level then
 130: LD_EXP 2
 134: IFFALSE 146
// area := bush_forest_small else
 136: LD_ADDR_VAR 0 2
 140: PUSH
 141: LD_INT 9
 143: ST_TO_ADDR
 144: GO 154
// area := bush_forest_big ;
 146: LD_ADDR_VAR 0 2
 150: PUSH
 151: LD_INT 8
 153: ST_TO_ADDR
// PlaceTreesToArea ( area , [ 38 , 39 , 37 ] , Rand ( 300 , 350 ) , 10 , 3 ) ;
 154: LD_VAR 0 2
 158: PPUSH
 159: LD_INT 38
 161: PUSH
 162: LD_INT 39
 164: PUSH
 165: LD_INT 37
 167: PUSH
 168: EMPTY
 169: LIST
 170: LIST
 171: LIST
 172: PPUSH
 173: LD_INT 300
 175: PPUSH
 176: LD_INT 350
 178: PPUSH
 179: CALL_OW 12
 183: PPUSH
 184: LD_INT 10
 186: PPUSH
 187: LD_INT 3
 189: PPUSH
 190: CALL_OW 352
// PlaceTreesToArea ( BigForest , [ 38 , 39 , 37 ] , 80 , 10 , 3 ) ;
 194: LD_INT 6
 196: PPUSH
 197: LD_INT 38
 199: PUSH
 200: LD_INT 39
 202: PUSH
 203: LD_INT 37
 205: PUSH
 206: EMPTY
 207: LIST
 208: LIST
 209: LIST
 210: PPUSH
 211: LD_INT 80
 213: PPUSH
 214: LD_INT 10
 216: PPUSH
 217: LD_INT 3
 219: PPUSH
 220: CALL_OW 352
// end ;
 224: LD_VAR 0 1
 228: RET
// function create_map_resources ; var un , oil_pos , sib_pos ; begin
 229: LD_INT 0
 231: PPUSH
 232: PPUSH
 233: PPUSH
 234: PPUSH
// oil_pos := [ [ 24 , 10 ] , [ 82 , 9 ] , [ 79 , 115 ] , [ 135 , 112 ] ] ;
 235: LD_ADDR_VAR 0 3
 239: PUSH
 240: LD_INT 24
 242: PUSH
 243: LD_INT 10
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: PUSH
 250: LD_INT 82
 252: PUSH
 253: LD_INT 9
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 79
 262: PUSH
 263: LD_INT 115
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 135
 272: PUSH
 273: LD_INT 112
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: PUSH
 280: EMPTY
 281: LIST
 282: LIST
 283: LIST
 284: LIST
 285: ST_TO_ADDR
// sib_pos := [ [ 24 , 29 ] , [ 102 , 29 ] , [ 60 , 93 ] , [ 134 , 91 ] ] ;
 286: LD_ADDR_VAR 0 4
 290: PUSH
 291: LD_INT 24
 293: PUSH
 294: LD_INT 29
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: PUSH
 301: LD_INT 102
 303: PUSH
 304: LD_INT 29
 306: PUSH
 307: EMPTY
 308: LIST
 309: LIST
 310: PUSH
 311: LD_INT 60
 313: PUSH
 314: LD_INT 93
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 134
 323: PUSH
 324: LD_INT 91
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: LIST
 335: LIST
 336: ST_TO_ADDR
// for un = 1 to 4 do
 337: LD_ADDR_VAR 0 2
 341: PUSH
 342: DOUBLE
 343: LD_INT 1
 345: DEC
 346: ST_TO_ADDR
 347: LD_INT 4
 349: PUSH
 350: FOR_TO
 351: IFFALSE 429
// begin CreateDepositXY ( oil_pos [ un ] [ 1 ] , oil_pos [ un ] [ 2 ] , mat_oil ) ;
 353: LD_VAR 0 3
 357: PUSH
 358: LD_VAR 0 2
 362: ARRAY
 363: PUSH
 364: LD_INT 1
 366: ARRAY
 367: PPUSH
 368: LD_VAR 0 3
 372: PUSH
 373: LD_VAR 0 2
 377: ARRAY
 378: PUSH
 379: LD_INT 2
 381: ARRAY
 382: PPUSH
 383: LD_INT 2
 385: PPUSH
 386: CALL_OW 62
// CreateDepositXY ( sib_pos [ un ] [ 1 ] , sib_pos [ un ] [ 2 ] , mat_siberit ) ;
 390: LD_VAR 0 4
 394: PUSH
 395: LD_VAR 0 2
 399: ARRAY
 400: PUSH
 401: LD_INT 1
 403: ARRAY
 404: PPUSH
 405: LD_VAR 0 4
 409: PUSH
 410: LD_VAR 0 2
 414: ARRAY
 415: PUSH
 416: LD_INT 2
 418: ARRAY
 419: PPUSH
 420: LD_INT 3
 422: PPUSH
 423: CALL_OW 62
// end ;
 427: GO 350
 429: POP
 430: POP
// end ;
 431: LD_VAR 0 1
 435: RET
// function init_map ; var i ; begin
 436: LD_INT 0
 438: PPUSH
 439: PPUSH
// extra_oil_deposits_locations := [ [ 38 , 6 ] , [ 67 , 6 ] , [ 94 , 115 ] , [ 116 , 99 ] ] ;
 440: LD_ADDR_EXP 42
 444: PUSH
 445: LD_INT 38
 447: PUSH
 448: LD_INT 6
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 67
 457: PUSH
 458: LD_INT 6
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: LD_INT 94
 467: PUSH
 468: LD_INT 115
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: LD_INT 116
 477: PUSH
 478: LD_INT 99
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: ST_TO_ADDR
// create_forest ;
 491: CALL 68 0 0
// create_map_resources ;
 495: CALL 229 0 0
// depot_def := [ [ 12 , 10 , 2 ] , [ 97 , 10 , 3 ] , [ 64 , 108 , 0 ] , [ 146 , 110 , 5 ] ] ;
 499: LD_ADDR_EXP 40
 503: PUSH
 504: LD_INT 12
 506: PUSH
 507: LD_INT 10
 509: PUSH
 510: LD_INT 2
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: LIST
 517: PUSH
 518: LD_INT 97
 520: PUSH
 521: LD_INT 10
 523: PUSH
 524: LD_INT 3
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: LIST
 531: PUSH
 532: LD_INT 64
 534: PUSH
 535: LD_INT 108
 537: PUSH
 538: LD_INT 0
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: LIST
 545: PUSH
 546: LD_INT 146
 548: PUSH
 549: LD_INT 110
 551: PUSH
 552: LD_INT 5
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: LIST
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: LIST
 565: ST_TO_ADDR
// if def_base_level then
 566: LD_EXP 2
 570: IFFALSE 625
// start_def := [ [ 16 , 14 ] , [ 96 , 13 ] , [ 65 , 105 ] , [ 141 , 105 ] ] else
 572: LD_ADDR_EXP 41
 576: PUSH
 577: LD_INT 16
 579: PUSH
 580: LD_INT 14
 582: PUSH
 583: EMPTY
 584: LIST
 585: LIST
 586: PUSH
 587: LD_INT 96
 589: PUSH
 590: LD_INT 13
 592: PUSH
 593: EMPTY
 594: LIST
 595: LIST
 596: PUSH
 597: LD_INT 65
 599: PUSH
 600: LD_INT 105
 602: PUSH
 603: EMPTY
 604: LIST
 605: LIST
 606: PUSH
 607: LD_INT 141
 609: PUSH
 610: LD_INT 105
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: ST_TO_ADDR
 623: GO 676
// start_def := [ [ 7 , 5 ] , [ 98 , 6 ] , [ 63 , 113 ] , [ 151 , 113 ] ] ;
 625: LD_ADDR_EXP 41
 629: PUSH
 630: LD_INT 7
 632: PUSH
 633: LD_INT 5
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: PUSH
 640: LD_INT 98
 642: PUSH
 643: LD_INT 6
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: PUSH
 650: LD_INT 63
 652: PUSH
 653: LD_INT 113
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: PUSH
 660: LD_INT 151
 662: PUSH
 663: LD_INT 113
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: ST_TO_ADDR
// end ;
 676: LD_VAR 0 1
 680: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
 681: LD_INT 0
 683: PPUSH
 684: PPUSH
 685: PPUSH
 686: PPUSH
 687: PPUSH
 688: PPUSH
 689: PPUSH
 690: PPUSH
 691: PPUSH
// if MultiPlayer then
 692: LD_OWVAR 4
 696: IFFALSE 780
// begin Game_Type = mp_game_type ;
 698: LD_ADDR_EXP 1
 702: PUSH
 703: LD_OWVAR 6
 707: ST_TO_ADDR
// Player_Side = mp_player_side ;
 708: LD_ADDR_EXP 30
 712: PUSH
 713: LD_OWVAR 7
 717: ST_TO_ADDR
// Player_Team = mp_player_team ;
 718: LD_ADDR_EXP 31
 722: PUSH
 723: LD_OWVAR 8
 727: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
 728: LD_ADDR_EXP 34
 732: PUSH
 733: LD_OWVAR 17
 737: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 738: LD_ADDR_EXP 32
 742: PUSH
 743: LD_OWVAR 15
 747: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 748: LD_ADDR_EXP 35
 752: PUSH
 753: LD_OWVAR 16
 757: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 758: LD_ADDR_EXP 39
 762: PUSH
 763: CALL 0 0 0
 767: ST_TO_ADDR
// Teams = mp_teams ;
 768: LD_ADDR_EXP 33
 772: PUSH
 773: LD_OWVAR 12
 777: ST_TO_ADDR
// end else
 778: GO 981
// begin Game_Type = 2 ;
 780: LD_ADDR_EXP 1
 784: PUSH
 785: LD_INT 2
 787: ST_TO_ADDR
// Player_Side = 4 ;
 788: LD_ADDR_EXP 30
 792: PUSH
 793: LD_INT 4
 795: ST_TO_ADDR
// Side_Positions = [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 796: LD_ADDR_EXP 34
 800: PUSH
 801: LD_INT 0
 803: PUSH
 804: LD_INT 3
 806: PUSH
 807: LD_INT 0
 809: PUSH
 810: LD_INT 1
 812: PUSH
 813: LD_INT 0
 815: PUSH
 816: LD_INT 2
 818: PUSH
 819: LD_INT 4
 821: PUSH
 822: LD_INT 0
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: LIST
 834: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 2 , 0 , 1 , 2 , 0 ] ;
 835: LD_ADDR_EXP 32
 839: PUSH
 840: LD_INT 0
 842: PUSH
 843: LD_INT 1
 845: PUSH
 846: LD_INT 0
 848: PUSH
 849: LD_INT 2
 851: PUSH
 852: LD_INT 0
 854: PUSH
 855: LD_INT 1
 857: PUSH
 858: LD_INT 2
 860: PUSH
 861: LD_INT 0
 863: PUSH
 864: EMPTY
 865: LIST
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: LIST
 871: LIST
 872: LIST
 873: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 2 , 0 , 1 , 3 , 0 ] ;
 874: LD_ADDR_EXP 35
 878: PUSH
 879: LD_INT 0
 881: PUSH
 882: LD_INT 3
 884: PUSH
 885: LD_INT 0
 887: PUSH
 888: LD_INT 2
 890: PUSH
 891: LD_INT 0
 893: PUSH
 894: LD_INT 1
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: LD_INT 0
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 913: LD_ADDR_EXP 39
 917: PUSH
 918: LD_INT 0
 920: PUSH
 921: LD_INT 0
 923: PUSH
 924: LD_INT 0
 926: PUSH
 927: LD_INT 0
 929: PUSH
 930: LD_INT 0
 932: PUSH
 933: LD_INT 0
 935: PUSH
 936: LD_INT 0
 938: PUSH
 939: LD_INT 0
 941: PUSH
 942: EMPTY
 943: LIST
 944: LIST
 945: LIST
 946: LIST
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: ST_TO_ADDR
// Teams = [ [ 2 , 6 ] , [ 4 , 7 ] ] ;
 952: LD_ADDR_EXP 33
 956: PUSH
 957: LD_INT 2
 959: PUSH
 960: LD_INT 6
 962: PUSH
 963: EMPTY
 964: LIST
 965: LIST
 966: PUSH
 967: LD_INT 4
 969: PUSH
 970: LD_INT 7
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: ST_TO_ADDR
// end ; Side_Count = ( Side_Positions diff [ 0 ] ) + 0 ;
 981: LD_ADDR_EXP 28
 985: PUSH
 986: LD_EXP 34
 990: PUSH
 991: LD_INT 0
 993: PUSH
 994: EMPTY
 995: LIST
 996: DIFF
 997: PUSH
 998: LD_INT 0
1000: PLUS
1001: ST_TO_ADDR
// Team_Count = ( Side_Teams diff [ 0 ] ) + 0 ;
1002: LD_ADDR_EXP 29
1006: PUSH
1007: LD_EXP 32
1011: PUSH
1012: LD_INT 0
1014: PUSH
1015: EMPTY
1016: LIST
1017: DIFF
1018: PUSH
1019: LD_INT 0
1021: PLUS
1022: ST_TO_ADDR
// if MultiPlayer then
1023: LD_OWVAR 4
1027: IFFALSE 1221
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
1029: LD_ADDR_EXP 2
1033: PUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL_OW 426
1041: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
1042: LD_ADDR_EXP 3
1046: PUSH
1047: LD_INT 1
1049: PPUSH
1050: CALL_OW 426
1054: ST_TO_ADDR
// def_initial_level = GetMultiplayerSetting ( 2 ) ;
1055: LD_ADDR_EXP 4
1059: PUSH
1060: LD_INT 2
1062: PPUSH
1063: CALL_OW 426
1067: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
1068: LD_ADDR_EXP 5
1072: PUSH
1073: LD_INT 3
1075: PPUSH
1076: CALL_OW 426
1080: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
1081: LD_ADDR_EXP 6
1085: PUSH
1086: LD_INT 4
1088: PPUSH
1089: CALL_OW 426
1093: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
1094: LD_ADDR_EXP 7
1098: PUSH
1099: LD_INT 5
1101: PPUSH
1102: CALL_OW 426
1106: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
1107: LD_ADDR_EXP 8
1111: PUSH
1112: LD_INT 10
1114: PPUSH
1115: CALL_OW 426
1119: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
1120: LD_ADDR_EXP 9
1124: PUSH
1125: LD_INT 11
1127: PPUSH
1128: CALL_OW 426
1132: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
1133: LD_ADDR_EXP 10
1137: PUSH
1138: LD_INT 12
1140: PPUSH
1141: CALL_OW 426
1145: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
1146: LD_ADDR_EXP 11
1150: PUSH
1151: LD_INT 13
1153: PPUSH
1154: CALL_OW 426
1158: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
1159: LD_ADDR_EXP 12
1163: PUSH
1164: LD_INT 14
1166: PPUSH
1167: CALL_OW 426
1171: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
1172: LD_ADDR_EXP 13
1176: PUSH
1177: LD_INT 15
1179: PPUSH
1180: CALL_OW 426
1184: ST_TO_ADDR
// def_win_rules = 0 ;
1185: LD_ADDR_EXP 27
1189: PUSH
1190: LD_INT 0
1192: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
1193: LD_ADDR_EXP 14
1197: PUSH
1198: LD_INT 20
1200: PPUSH
1201: CALL_OW 426
1205: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
1206: LD_ADDR_VAR 0 9
1210: PUSH
1211: LD_INT 22
1213: PPUSH
1214: CALL_OW 426
1218: ST_TO_ADDR
// end else
1219: GO 1345
// begin randomize ;
1221: CALL_OW 10
// def_base_level = 1 ;
1225: LD_ADDR_EXP 2
1229: PUSH
1230: LD_INT 1
1232: ST_TO_ADDR
// def_amount_of_people = 1 ;
1233: LD_ADDR_EXP 3
1237: PUSH
1238: LD_INT 1
1240: ST_TO_ADDR
// def_initial_level = 1 ;
1241: LD_ADDR_EXP 4
1245: PUSH
1246: LD_INT 1
1248: ST_TO_ADDR
// def_starting_resources = 2 ;
1249: LD_ADDR_EXP 5
1253: PUSH
1254: LD_INT 2
1256: ST_TO_ADDR
// def_shipments_density = 1 ;
1257: LD_ADDR_EXP 6
1261: PUSH
1262: LD_INT 1
1264: ST_TO_ADDR
// def_extra_oil_deposits = 0 ;
1265: LD_ADDR_EXP 7
1269: PUSH
1270: LD_INT 0
1272: ST_TO_ADDR
// def_shared_vision = 1 ;
1273: LD_ADDR_EXP 8
1277: PUSH
1278: LD_INT 1
1280: ST_TO_ADDR
// def_morale_flags = 1 ;
1281: LD_ADDR_EXP 9
1285: PUSH
1286: LD_INT 1
1288: ST_TO_ADDR
// def_siberite_detection = 1 ;
1289: LD_ADDR_EXP 10
1293: PUSH
1294: LD_INT 1
1296: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
1297: LD_ADDR_EXP 11
1301: PUSH
1302: LD_INT 3
1304: ST_TO_ADDR
// def_people_respawning = 2 ;
1305: LD_ADDR_EXP 12
1309: PUSH
1310: LD_INT 2
1312: ST_TO_ADDR
// def_siberite_bomb = 0 ;
1313: LD_ADDR_EXP 13
1317: PUSH
1318: LD_INT 0
1320: ST_TO_ADDR
// def_win_rules = 0 ;
1321: LD_ADDR_EXP 27
1325: PUSH
1326: LD_INT 0
1328: ST_TO_ADDR
// def_builduptime := 1 ;
1329: LD_ADDR_EXP 14
1333: PUSH
1334: LD_INT 1
1336: ST_TO_ADDR
// tech_level = 4 ;
1337: LD_ADDR_VAR 0 9
1341: PUSH
1342: LD_INT 4
1344: ST_TO_ADDR
// end ; if isSGUI then
1345: LD_OWVAR 83
1349: IFFALSE 1357
// setMpTechs ( ) else
1351: CALL 9437 0 0
1355: GO 1370
// begin SetMpTechLevel ( tech_level + 1 ) ;
1357: LD_VAR 0 9
1361: PUSH
1362: LD_INT 1
1364: PLUS
1365: PPUSH
1366: CALL 9584 0 1
// end ; is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1370: LD_ADDR_EXP 15
1374: PUSH
1375: LD_INT 0
1377: PUSH
1378: LD_INT 1
1380: PUSH
1381: LD_INT 1
1383: PUSH
1384: LD_INT 1
1386: PUSH
1387: EMPTY
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: PUSH
1393: LD_EXP 2
1397: PUSH
1398: LD_INT 1
1400: PLUS
1401: ARRAY
1402: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 0 , 0 ] [ def_base_level + 1 ] ;
1403: LD_ADDR_EXP 16
1407: PUSH
1408: LD_INT 0
1410: PUSH
1411: LD_INT 0
1413: PUSH
1414: LD_INT 0
1416: PUSH
1417: LD_INT 0
1419: PUSH
1420: EMPTY
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: PUSH
1426: LD_EXP 2
1430: PUSH
1431: LD_INT 1
1433: PLUS
1434: ARRAY
1435: ST_TO_ADDR
// number_of_people = [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
1436: LD_ADDR_EXP 17
1440: PUSH
1441: LD_INT 9
1443: PUSH
1444: LD_INT 12
1446: PUSH
1447: LD_INT 15
1449: PUSH
1450: LD_INT 24
1452: PUSH
1453: EMPTY
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: PUSH
1459: LD_EXP 3
1463: PUSH
1464: LD_INT 1
1466: PLUS
1467: ARRAY
1468: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_initial_level + 1 ] ;
1469: LD_ADDR_EXP 18
1473: PUSH
1474: LD_INT 2
1476: PUSH
1477: LD_INT 3
1479: PUSH
1480: LD_INT 4
1482: PUSH
1483: LD_INT 5
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: PUSH
1492: LD_EXP 4
1496: PUSH
1497: LD_INT 1
1499: PLUS
1500: ARRAY
1501: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1502: LD_ADDR_EXP 21
1506: PUSH
1507: LD_INT 0
1509: PUSH
1510: LD_INT 0
1512: PUSH
1513: LD_INT 0
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: LIST
1520: PUSH
1521: LD_INT 30
1523: PUSH
1524: LD_INT 0
1526: PUSH
1527: LD_INT 0
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: PUSH
1535: LD_INT 50
1537: PUSH
1538: LD_INT 20
1540: PUSH
1541: LD_INT 0
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 80
1551: PUSH
1552: LD_INT 40
1554: PUSH
1555: LD_INT 20
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: PUSH
1563: EMPTY
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: PUSH
1569: LD_EXP 5
1573: PUSH
1574: LD_INT 1
1576: PLUS
1577: ARRAY
1578: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1579: LD_ADDR_EXP 20
1583: PUSH
1584: LD_INT 10
1586: PUSH
1587: EMPTY
1588: LIST
1589: PUSH
1590: LD_INT 7
1592: PUSH
1593: LD_INT 14
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: PUSH
1600: LD_INT 6
1602: PUSH
1603: LD_INT 12
1605: PUSH
1606: LD_INT 18
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: PUSH
1614: LD_INT 5
1616: PUSH
1617: LD_INT 10
1619: PUSH
1620: LD_INT 15
1622: PUSH
1623: LD_INT 20
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: PUSH
1638: LD_EXP 5
1642: PUSH
1643: LD_INT 1
1645: PLUS
1646: ARRAY
1647: ST_TO_ADDR
// shipments_density = [ 20 , 30 , 40 ] [ def_shipments_density + 1 ] ;
1648: LD_ADDR_EXP 22
1652: PUSH
1653: LD_INT 20
1655: PUSH
1656: LD_INT 30
1658: PUSH
1659: LD_INT 40
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: LIST
1666: PUSH
1667: LD_EXP 6
1671: PUSH
1672: LD_INT 1
1674: PLUS
1675: ARRAY
1676: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1677: LD_ADDR_EXP 19
1681: PUSH
1682: LD_INT 0
1684: PUSH
1685: LD_INT 1
1687: PUSH
1688: LD_INT 2
1690: PUSH
1691: LD_INT 3
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: PUSH
1700: LD_EXP 11
1704: PUSH
1705: LD_INT 1
1707: PLUS
1708: ARRAY
1709: ST_TO_ADDR
// spawning_koef_of_apemen = [ 0 , 165 , 140 , 115 ] [ def_amount_of_apemen + 1 ] ;
1710: LD_ADDR_EXP 24
1714: PUSH
1715: LD_INT 0
1717: PUSH
1718: LD_INT 165
1720: PUSH
1721: LD_INT 140
1723: PUSH
1724: LD_INT 115
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: PUSH
1733: LD_EXP 11
1737: PUSH
1738: LD_INT 1
1740: PLUS
1741: ARRAY
1742: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1743: LD_ADDR_EXP 25
1747: PUSH
1748: LD_INT 0
1750: PUSH
1751: LD_INT 8400
1753: PUSH
1754: LD_INT 1750
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: LIST
1761: PUSH
1762: LD_EXP 12
1766: PUSH
1767: LD_INT 1
1769: PLUS
1770: ARRAY
1771: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1772: LD_ADDR_EXP 26
1776: PUSH
1777: LD_INT 0
1779: PUSH
1780: LD_INT 21000
1782: PUSH
1783: LD_INT 4200
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: LIST
1790: PUSH
1791: LD_EXP 12
1795: PUSH
1796: LD_INT 1
1798: PLUS
1799: ARRAY
1800: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1801: LD_ADDR_EXP 23
1805: PUSH
1806: LD_INT 0
1808: PUSH
1809: LD_INT 1
1811: PUSH
1812: LD_INT 63000
1814: PUSH
1815: LD_INT 126000
1817: PUSH
1818: LD_INT 189000
1820: PUSH
1821: LD_INT 252000
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: PUSH
1832: LD_EXP 13
1836: PUSH
1837: LD_INT 1
1839: PLUS
1840: ARRAY
1841: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1842: LD_ADDR_EXP 46
1846: PUSH
1847: LD_INT 1
1849: NEG
1850: PUSH
1851: LD_INT 350
1853: PUSH
1854: LD_INT 700
1856: PUSH
1857: LD_INT 1400
1859: PUSH
1860: LD_INT 0
1862: PUSH
1863: EMPTY
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: PUSH
1870: LD_EXP 9
1874: PUSH
1875: LD_INT 1
1877: PLUS
1878: ARRAY
1879: ST_TO_ADDR
// battle_flags_id = [ ] ;
1880: LD_ADDR_EXP 45
1884: PUSH
1885: EMPTY
1886: ST_TO_ADDR
// end ;
1887: LD_VAR 0 1
1891: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1892: LD_INT 0
1894: PPUSH
1895: PPUSH
1896: PPUSH
// Team_Game := 0 ;
1897: LD_ADDR_EXP 38
1901: PUSH
1902: LD_INT 0
1904: ST_TO_ADDR
// for i = 1 to 8 do
1905: LD_ADDR_VAR 0 2
1909: PUSH
1910: DOUBLE
1911: LD_INT 1
1913: DEC
1914: ST_TO_ADDR
1915: LD_INT 8
1917: PUSH
1918: FOR_TO
1919: IFFALSE 1945
// Team_Game := Team_Game + Side_Teams [ i ] ;
1921: LD_ADDR_EXP 38
1925: PUSH
1926: LD_EXP 38
1930: PUSH
1931: LD_EXP 32
1935: PUSH
1936: LD_VAR 0 2
1940: ARRAY
1941: PLUS
1942: ST_TO_ADDR
1943: GO 1918
1945: POP
1946: POP
// if not Team_Game then
1947: LD_EXP 38
1951: NOT
1952: IFFALSE 1964
// Team_Game := false else
1954: LD_ADDR_EXP 38
1958: PUSH
1959: LD_INT 0
1961: ST_TO_ADDR
1962: GO 1972
// Team_Game := true ;
1964: LD_ADDR_EXP 38
1968: PUSH
1969: LD_INT 1
1971: ST_TO_ADDR
// if not Team_Game then
1972: LD_EXP 38
1976: NOT
1977: IFFALSE 2075
// begin for i = 1 to 8 do
1979: LD_ADDR_VAR 0 2
1983: PUSH
1984: DOUBLE
1985: LD_INT 1
1987: DEC
1988: ST_TO_ADDR
1989: LD_INT 8
1991: PUSH
1992: FOR_TO
1993: IFFALSE 2071
// for j = 1 to 8 do
1995: LD_ADDR_VAR 0 3
1999: PUSH
2000: DOUBLE
2001: LD_INT 1
2003: DEC
2004: ST_TO_ADDR
2005: LD_INT 8
2007: PUSH
2008: FOR_TO
2009: IFFALSE 2067
// if i <> j then
2011: LD_VAR 0 2
2015: PUSH
2016: LD_VAR 0 3
2020: NONEQUAL
2021: IFFALSE 2045
// SetAttitude ( i , j , att_neutral , true ) else
2023: LD_VAR 0 2
2027: PPUSH
2028: LD_VAR 0 3
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: LD_INT 1
2038: PPUSH
2039: CALL_OW 80
2043: GO 2065
// SetAttitude ( i , j , att_friend , true ) ;
2045: LD_VAR 0 2
2049: PPUSH
2050: LD_VAR 0 3
2054: PPUSH
2055: LD_INT 1
2057: PPUSH
2058: LD_INT 1
2060: PPUSH
2061: CALL_OW 80
2065: GO 2008
2067: POP
2068: POP
2069: GO 1992
2071: POP
2072: POP
// end else
2073: GO 2250
// begin if def_shared_vision then
2075: LD_EXP 8
2079: IFFALSE 2144
// begin for i in Teams do
2081: LD_ADDR_VAR 0 2
2085: PUSH
2086: LD_EXP 33
2090: PUSH
2091: FOR_IN
2092: IFFALSE 2142
// for j = 2 to i do
2094: LD_ADDR_VAR 0 3
2098: PUSH
2099: DOUBLE
2100: LD_INT 2
2102: DEC
2103: ST_TO_ADDR
2104: LD_VAR 0 2
2108: PUSH
2109: FOR_TO
2110: IFFALSE 2138
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2112: LD_VAR 0 2
2116: PUSH
2117: LD_VAR 0 3
2121: ARRAY
2122: PPUSH
2123: LD_VAR 0 2
2127: PUSH
2128: LD_INT 1
2130: ARRAY
2131: PPUSH
2132: CALL_OW 343
2136: GO 2109
2138: POP
2139: POP
2140: GO 2091
2142: POP
2143: POP
// end ; for i = 1 to 8 do
2144: LD_ADDR_VAR 0 2
2148: PUSH
2149: DOUBLE
2150: LD_INT 1
2152: DEC
2153: ST_TO_ADDR
2154: LD_INT 8
2156: PUSH
2157: FOR_TO
2158: IFFALSE 2248
// for j = 1 to 8 do
2160: LD_ADDR_VAR 0 3
2164: PUSH
2165: DOUBLE
2166: LD_INT 1
2168: DEC
2169: ST_TO_ADDR
2170: LD_INT 8
2172: PUSH
2173: FOR_TO
2174: IFFALSE 2244
// if Side_Teams [ i ] = Side_Teams [ j ] then
2176: LD_EXP 32
2180: PUSH
2181: LD_VAR 0 2
2185: ARRAY
2186: PUSH
2187: LD_EXP 32
2191: PUSH
2192: LD_VAR 0 3
2196: ARRAY
2197: EQUAL
2198: IFFALSE 2222
// SetAttitude ( i , j , att_friend , true ) else
2200: LD_VAR 0 2
2204: PPUSH
2205: LD_VAR 0 3
2209: PPUSH
2210: LD_INT 1
2212: PPUSH
2213: LD_INT 1
2215: PPUSH
2216: CALL_OW 80
2220: GO 2242
// SetAttitude ( i , j , att_enemy , true ) ;
2222: LD_VAR 0 2
2226: PPUSH
2227: LD_VAR 0 3
2231: PPUSH
2232: LD_INT 2
2234: PPUSH
2235: LD_INT 1
2237: PPUSH
2238: CALL_OW 80
2242: GO 2173
2244: POP
2245: POP
2246: GO 2157
2248: POP
2249: POP
// end ; end ;
2250: LD_VAR 0 1
2254: RET
// function prepare_people ( side , count , cl , x , y , r , var commander ) ; var i , j , un ; begin
2255: LD_INT 0
2257: PPUSH
2258: PPUSH
2259: PPUSH
2260: PPUSH
// result := [ ] ;
2261: LD_ADDR_VAR 0 8
2265: PUSH
2266: EMPTY
2267: ST_TO_ADDR
// for i := 1 to count do
2268: LD_ADDR_VAR 0 9
2272: PUSH
2273: DOUBLE
2274: LD_INT 1
2276: DEC
2277: ST_TO_ADDR
2278: LD_VAR 0 2
2282: PUSH
2283: FOR_TO
2284: IFFALSE 2678
// begin uc_direction := Rand ( 0 , 5 ) ;
2286: LD_ADDR_OWVAR 24
2290: PUSH
2291: LD_INT 0
2293: PPUSH
2294: LD_INT 5
2296: PPUSH
2297: CALL_OW 12
2301: ST_TO_ADDR
// if commander then
2302: LD_FROM_VAR 0 7
2306: IFFALSE 2415
// begin hc_name := mp_sides_players_names [ side ] ;
2308: LD_ADDR_OWVAR 26
2312: PUSH
2313: LD_OWVAR 19
2317: PUSH
2318: LD_VAR 0 1
2322: ARRAY
2323: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
2324: LD_INT 1
2326: PPUSH
2327: LD_INT 2
2329: PPUSH
2330: CALL_OW 12
2334: PPUSH
2335: LD_VAR 0 3
2339: PPUSH
2340: LD_EXP 18
2344: PUSH
2345: LD_INT 2
2347: PLUS
2348: PPUSH
2349: CALL_OW 380
// hc_importance := 105 ;
2353: LD_ADDR_OWVAR 32
2357: PUSH
2358: LD_INT 105
2360: ST_TO_ADDR
// commander := false ;
2361: LD_VAR 0 7
2365: PUSH
2366: LD_INT 0
2368: ST_TO_ADDR
// if Multiplayer then
2369: LD_OWVAR 4
2373: IFFALSE 2413
// begin hc_gallery := MULTIAVATARS ;
2375: LD_ADDR_OWVAR 33
2379: PUSH
2380: LD_STRING MULTIAVATARS
2382: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( Side ) ;
2383: LD_ADDR_OWVAR 34
2387: PUSH
2388: LD_VAR 0 1
2392: PPUSH
2393: CALL_OW 525
2397: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( Side ) ;
2398: LD_ADDR_OWVAR 27
2402: PUSH
2403: LD_VAR 0 1
2407: PPUSH
2408: CALL_OW 526
2412: ST_TO_ADDR
// end ; end else
2413: GO 2478
// begin hc_name :=  ;
2415: LD_ADDR_OWVAR 26
2419: PUSH
2420: LD_STRING 
2422: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
2423: LD_INT 1
2425: PPUSH
2426: LD_INT 2
2428: PPUSH
2429: CALL_OW 12
2433: PPUSH
2434: LD_VAR 0 3
2438: PPUSH
2439: LD_EXP 18
2443: PPUSH
2444: CALL_OW 380
// hc_importance := 0 ;
2448: LD_ADDR_OWVAR 32
2452: PUSH
2453: LD_INT 0
2455: ST_TO_ADDR
// if Multiplayer then
2456: LD_OWVAR 4
2460: IFFALSE 2478
// begin hc_gallery :=  ;
2462: LD_ADDR_OWVAR 33
2466: PUSH
2467: LD_STRING 
2469: ST_TO_ADDR
// hc_face_number := 0 ;
2470: LD_ADDR_OWVAR 34
2474: PUSH
2475: LD_INT 0
2477: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2478: LD_ADDR_VAR 0 11
2482: PUSH
2483: CALL_OW 44
2487: ST_TO_ADDR
// if global_defined then
2488: LD_LOC 2
2492: IFFALSE 2630
// begin j := i ;
2494: LD_ADDR_VAR 0 10
2498: PUSH
2499: LD_VAR 0 9
2503: ST_TO_ADDR
// if cl = class_soldier then
2504: LD_VAR 0 3
2508: PUSH
2509: LD_INT 1
2511: EQUAL
2512: IFFALSE 2530
// j := i + soldiers_created ;
2514: LD_ADDR_VAR 0 10
2518: PUSH
2519: LD_VAR 0 9
2523: PUSH
2524: LD_LOC 3
2528: PLUS
2529: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2530: LD_LOC 1
2534: PUSH
2535: LD_VAR 0 3
2539: ARRAY
2540: PUSH
2541: LD_VAR 0 10
2545: ARRAY
2546: PPUSH
2547: LD_VAR 0 11
2551: PPUSH
2552: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2556: LD_VAR 0 11
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_LOC 1
2568: PUSH
2569: LD_VAR 0 3
2573: ARRAY
2574: PUSH
2575: LD_VAR 0 10
2579: ARRAY
2580: PPUSH
2581: LD_INT 2
2583: PPUSH
2584: CALL_OW 260
2588: PPUSH
2589: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2593: LD_VAR 0 11
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: LD_LOC 1
2605: PUSH
2606: LD_VAR 0 3
2610: ARRAY
2611: PUSH
2612: LD_VAR 0 10
2616: ARRAY
2617: PPUSH
2618: LD_INT 1
2620: PPUSH
2621: CALL_OW 260
2625: PPUSH
2626: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2630: LD_VAR 0 11
2634: PPUSH
2635: LD_VAR 0 4
2639: PPUSH
2640: LD_VAR 0 5
2644: PPUSH
2645: LD_VAR 0 6
2649: PPUSH
2650: LD_INT 0
2652: PPUSH
2653: CALL_OW 50
// result := result ^ [ un ] ;
2657: LD_ADDR_VAR 0 8
2661: PUSH
2662: LD_VAR 0 8
2666: PUSH
2667: LD_VAR 0 11
2671: PUSH
2672: EMPTY
2673: LIST
2674: ADD
2675: ST_TO_ADDR
// end ;
2676: GO 2283
2678: POP
2679: POP
// if not global_defined then
2680: LD_LOC 2
2684: NOT
2685: IFFALSE 2747
// if cl = class_soldier and global_units then
2687: LD_VAR 0 3
2691: PUSH
2692: LD_INT 1
2694: EQUAL
2695: PUSH
2696: LD_LOC 1
2700: AND
2701: IFFALSE 2728
// global_units := [ global_units [ 1 ] ^ result ] else
2703: LD_ADDR_LOC 1
2707: PUSH
2708: LD_LOC 1
2712: PUSH
2713: LD_INT 1
2715: ARRAY
2716: PUSH
2717: LD_VAR 0 8
2721: ADD
2722: PUSH
2723: EMPTY
2724: LIST
2725: ST_TO_ADDR
2726: GO 2747
// global_units := global_units ^ [ result ] ;
2728: LD_ADDR_LOC 1
2732: PUSH
2733: LD_LOC 1
2737: PUSH
2738: LD_VAR 0 8
2742: PUSH
2743: EMPTY
2744: LIST
2745: ADD
2746: ST_TO_ADDR
// if commander then
2747: LD_FROM_VAR 0 7
2751: IFFALSE 2798
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2753: LD_ADDR_EXP 43
2757: PUSH
2758: LD_EXP 43
2762: PPUSH
2763: LD_OWVAR 20
2767: PPUSH
2768: LD_EXP 43
2772: PUSH
2773: LD_OWVAR 20
2777: ARRAY
2778: PUSH
2779: LD_VAR 0 11
2783: ADD
2784: PPUSH
2785: CALL_OW 1
2789: ST_TO_ADDR
// commander := false ;
2790: LD_VAR 0 7
2794: PUSH
2795: LD_INT 0
2797: ST_TO_ADDR
// end ; end ;
2798: LD_VAR 0 8
2802: RET
// function prepare_buldozer ( x , y , r , pos ) ; var nation ; begin
2803: LD_INT 0
2805: PPUSH
2806: PPUSH
// if uc_nation = 2 then
2807: LD_OWVAR 21
2811: PUSH
2812: LD_INT 2
2814: EQUAL
2815: IFFALSE 2837
// begin nation := uc_nation ;
2817: LD_ADDR_VAR 0 6
2821: PUSH
2822: LD_OWVAR 21
2826: ST_TO_ADDR
// uc_nation := 1 ;
2827: LD_ADDR_OWVAR 21
2831: PUSH
2832: LD_INT 1
2834: ST_TO_ADDR
// end else
2835: GO 2845
// nation := false ;
2837: LD_ADDR_VAR 0 6
2841: PUSH
2842: LD_INT 0
2844: ST_TO_ADDR
// vc_engine = engine_combustion ;
2845: LD_ADDR_OWVAR 39
2849: PUSH
2850: LD_INT 1
2852: ST_TO_ADDR
// vc_control = control_manual ;
2853: LD_ADDR_OWVAR 38
2857: PUSH
2858: LD_INT 1
2860: ST_TO_ADDR
// if uc_nation = nation_russian then
2861: LD_OWVAR 21
2865: PUSH
2866: LD_INT 3
2868: EQUAL
2869: IFFALSE 2889
// begin vc_chassis = ru_heavy_tracked ;
2871: LD_ADDR_OWVAR 37
2875: PUSH
2876: LD_INT 24
2878: ST_TO_ADDR
// vc_weapon = ru_bulldozer ;
2879: LD_ADDR_OWVAR 40
2883: PUSH
2884: LD_INT 53
2886: ST_TO_ADDR
// end else
2887: GO 2905
// begin vc_chassis = us_heavy_tracked ;
2889: LD_ADDR_OWVAR 37
2893: PUSH
2894: LD_INT 4
2896: ST_TO_ADDR
// vc_weapon = us_bulldozer ;
2897: LD_ADDR_OWVAR 40
2901: PUSH
2902: LD_INT 14
2904: ST_TO_ADDR
// end ; case pos of 1 :
2905: LD_VAR 0 4
2909: PUSH
2910: LD_INT 1
2912: DOUBLE
2913: EQUAL
2914: IFTRUE 2918
2916: GO 2929
2918: POP
// uc_direction := 2 ; 2 :
2919: LD_ADDR_OWVAR 24
2923: PUSH
2924: LD_INT 2
2926: ST_TO_ADDR
2927: GO 2987
2929: LD_INT 2
2931: DOUBLE
2932: EQUAL
2933: IFTRUE 2937
2935: GO 2948
2937: POP
// uc_direction := 3 ; 3 :
2938: LD_ADDR_OWVAR 24
2942: PUSH
2943: LD_INT 3
2945: ST_TO_ADDR
2946: GO 2987
2948: LD_INT 3
2950: DOUBLE
2951: EQUAL
2952: IFTRUE 2956
2954: GO 2967
2956: POP
// uc_direction := 0 ; 4 :
2957: LD_ADDR_OWVAR 24
2961: PUSH
2962: LD_INT 0
2964: ST_TO_ADDR
2965: GO 2987
2967: LD_INT 4
2969: DOUBLE
2970: EQUAL
2971: IFTRUE 2975
2973: GO 2986
2975: POP
// uc_direction := 5 ; end ;
2976: LD_ADDR_OWVAR 24
2980: PUSH
2981: LD_INT 5
2983: ST_TO_ADDR
2984: GO 2987
2986: POP
// PlaceUnitXYR ( CreateVehicle , x , y , r , false ) ;
2987: CALL_OW 45
2991: PPUSH
2992: LD_VAR 0 1
2996: PPUSH
2997: LD_VAR 0 2
3001: PPUSH
3002: LD_VAR 0 3
3006: PPUSH
3007: LD_INT 0
3009: PPUSH
3010: CALL_OW 50
// if nation then
3014: LD_VAR 0 6
3018: IFFALSE 3030
// uc_nation := nation ;
3020: LD_ADDR_OWVAR 21
3024: PUSH
3025: LD_VAR 0 6
3029: ST_TO_ADDR
// end ;
3030: LD_VAR 0 5
3034: RET
// function prepare_side ( side ) ; var pos , x , y , i , r , sol , br , dep , neng , nsci , nmech , nsol ; begin
3035: LD_INT 0
3037: PPUSH
3038: PPUSH
3039: PPUSH
3040: PPUSH
3041: PPUSH
3042: PPUSH
3043: PPUSH
3044: PPUSH
3045: PPUSH
3046: PPUSH
3047: PPUSH
3048: PPUSH
3049: PPUSH
// pos := Side_Positions [ side ] ;
3050: LD_ADDR_VAR 0 3
3054: PUSH
3055: LD_EXP 34
3059: PUSH
3060: LD_VAR 0 1
3064: ARRAY
3065: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3066: LD_ADDR_OWVAR 21
3070: PUSH
3071: LD_EXP 35
3075: PUSH
3076: LD_VAR 0 1
3080: ARRAY
3081: ST_TO_ADDR
// uc_side := side ;
3082: LD_ADDR_OWVAR 20
3086: PUSH
3087: LD_VAR 0 1
3091: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3092: LD_ADDR_VAR 0 4
3096: PUSH
3097: LD_EXP 40
3101: PUSH
3102: LD_VAR 0 3
3106: ARRAY
3107: PUSH
3108: LD_INT 1
3110: ARRAY
3111: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3112: LD_ADDR_VAR 0 5
3116: PUSH
3117: LD_EXP 40
3121: PUSH
3122: LD_VAR 0 3
3126: ARRAY
3127: PUSH
3128: LD_INT 2
3130: ARRAY
3131: ST_TO_ADDR
// if is_depot then
3132: LD_EXP 15
3136: IFFALSE 3279
// begin bc_type = b_depot ;
3138: LD_ADDR_OWVAR 42
3142: PUSH
3143: LD_INT 0
3145: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , Depot_Def [ pos ] [ 3 ] ) ;
3146: LD_ADDR_VAR 0 10
3150: PUSH
3151: LD_VAR 0 4
3155: PPUSH
3156: LD_VAR 0 5
3160: PPUSH
3161: LD_EXP 40
3165: PUSH
3166: LD_VAR 0 3
3170: ARRAY
3171: PUSH
3172: LD_INT 3
3174: ARRAY
3175: PPUSH
3176: CALL_OW 47
3180: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3181: LD_VAR 0 10
3185: PPUSH
3186: LD_STRING @
3188: PUSH
3189: LD_VAR 0 1
3193: STR
3194: PPUSH
3195: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3199: LD_VAR 0 10
3203: PPUSH
3204: CALL_OW 274
3208: PPUSH
3209: LD_INT 1
3211: PPUSH
3212: LD_EXP 21
3216: PUSH
3217: LD_INT 1
3219: ARRAY
3220: PPUSH
3221: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3225: LD_VAR 0 10
3229: PPUSH
3230: CALL_OW 274
3234: PPUSH
3235: LD_INT 2
3237: PPUSH
3238: LD_EXP 21
3242: PUSH
3243: LD_INT 2
3245: ARRAY
3246: PPUSH
3247: CALL_OW 277
// SetResourceType ( GetBase ( result ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3251: LD_VAR 0 2
3255: PPUSH
3256: CALL_OW 274
3260: PPUSH
3261: LD_INT 3
3263: PPUSH
3264: LD_EXP 21
3268: PUSH
3269: LD_INT 3
3271: ARRAY
3272: PPUSH
3273: CALL_OW 277
// end else
3277: GO 3423
// begin for i := 1 to 3 do
3279: LD_ADDR_VAR 0 6
3283: PUSH
3284: DOUBLE
3285: LD_INT 1
3287: DEC
3288: ST_TO_ADDR
3289: LD_INT 3
3291: PUSH
3292: FOR_TO
3293: IFFALSE 3421
// begin r := starting_resources [ i ] ;
3295: LD_ADDR_VAR 0 7
3299: PUSH
3300: LD_EXP 21
3304: PUSH
3305: LD_VAR 0 6
3309: ARRAY
3310: ST_TO_ADDR
// while r >= 10 do
3311: LD_VAR 0 7
3315: PUSH
3316: LD_INT 10
3318: GREATEREQUAL
3319: IFFALSE 3419
// if r > 50 then
3321: LD_VAR 0 7
3325: PUSH
3326: LD_INT 50
3328: GREATER
3329: IFFALSE 3375
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3331: LD_VAR 0 6
3335: PPUSH
3336: LD_INT 5
3338: PPUSH
3339: LD_VAR 0 4
3343: PPUSH
3344: LD_VAR 0 5
3348: PPUSH
3349: LD_INT 4
3351: PPUSH
3352: LD_INT 0
3354: PPUSH
3355: CALL_OW 60
// r := r - 50 ;
3359: LD_ADDR_VAR 0 7
3363: PUSH
3364: LD_VAR 0 7
3368: PUSH
3369: LD_INT 50
3371: MINUS
3372: ST_TO_ADDR
// end else
3373: GO 3417
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3375: LD_VAR 0 6
3379: PPUSH
3380: LD_VAR 0 7
3384: PUSH
3385: LD_INT 10
3387: DIV
3388: PPUSH
3389: LD_VAR 0 4
3393: PPUSH
3394: LD_VAR 0 5
3398: PPUSH
3399: LD_INT 4
3401: PPUSH
3402: LD_INT 0
3404: PPUSH
3405: CALL_OW 60
// r := 0 ;
3409: LD_ADDR_VAR 0 7
3413: PUSH
3414: LD_INT 0
3416: ST_TO_ADDR
// end ;
3417: GO 3311
// end ;
3419: GO 3292
3421: POP
3422: POP
// end ; x := start_def [ pos ] [ 1 ] ;
3423: LD_ADDR_VAR 0 4
3427: PUSH
3428: LD_EXP 41
3432: PUSH
3433: LD_VAR 0 3
3437: ARRAY
3438: PUSH
3439: LD_INT 1
3441: ARRAY
3442: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3443: LD_ADDR_VAR 0 5
3447: PUSH
3448: LD_EXP 41
3452: PUSH
3453: LD_VAR 0 3
3457: ARRAY
3458: PUSH
3459: LD_INT 2
3461: ARRAY
3462: ST_TO_ADDR
// for r in starting_crates do
3463: LD_ADDR_VAR 0 7
3467: PUSH
3468: LD_EXP 20
3472: PUSH
3473: FOR_IN
3474: IFFALSE 3506
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3476: LD_INT 1
3478: PPUSH
3479: LD_INT 5
3481: PPUSH
3482: LD_VAR 0 4
3486: PPUSH
3487: LD_VAR 0 5
3491: PPUSH
3492: LD_VAR 0 7
3496: PPUSH
3497: LD_INT 0
3499: PPUSH
3500: CALL_OW 60
3504: GO 3473
3506: POP
3507: POP
// if def_morale_flags then
3508: LD_EXP 9
3512: IFFALSE 3591
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3514: LD_ADDR_EXP 45
3518: PUSH
3519: LD_EXP 45
3523: PUSH
3524: LD_VAR 0 1
3528: PPUSH
3529: LD_VAR 0 4
3533: PPUSH
3534: LD_VAR 0 5
3538: PPUSH
3539: LD_INT 1
3541: PUSH
3542: LD_INT 100
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: PUSH
3549: LD_INT 2
3551: PUSH
3552: LD_INT 50
3554: PUSH
3555: EMPTY
3556: LIST
3557: LIST
3558: PUSH
3559: LD_INT 3
3561: PUSH
3562: LD_INT 20
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: PUSH
3569: LD_INT 20
3571: PUSH
3572: LD_INT 100
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: PPUSH
3585: CALL_OW 418
3589: ADD
3590: ST_TO_ADDR
// neng := number_of_people ;
3591: LD_ADDR_VAR 0 11
3595: PUSH
3596: LD_EXP 17
3600: ST_TO_ADDR
// nsol := neng div 4 ;
3601: LD_ADDR_VAR 0 14
3605: PUSH
3606: LD_VAR 0 11
3610: PUSH
3611: LD_INT 4
3613: DIV
3614: ST_TO_ADDR
// neng := neng - nsol ;
3615: LD_ADDR_VAR 0 11
3619: PUSH
3620: LD_VAR 0 11
3624: PUSH
3625: LD_VAR 0 14
3629: MINUS
3630: ST_TO_ADDR
// nsci := neng div 3 ;
3631: LD_ADDR_VAR 0 12
3635: PUSH
3636: LD_VAR 0 11
3640: PUSH
3641: LD_INT 3
3643: DIV
3644: ST_TO_ADDR
// if nsci < 1 then
3645: LD_VAR 0 12
3649: PUSH
3650: LD_INT 1
3652: LESS
3653: IFFALSE 3663
// nsci := 1 ;
3655: LD_ADDR_VAR 0 12
3659: PUSH
3660: LD_INT 1
3662: ST_TO_ADDR
// neng := neng - nsci ;
3663: LD_ADDR_VAR 0 11
3667: PUSH
3668: LD_VAR 0 11
3672: PUSH
3673: LD_VAR 0 12
3677: MINUS
3678: ST_TO_ADDR
// nmech := neng div 2 ;
3679: LD_ADDR_VAR 0 13
3683: PUSH
3684: LD_VAR 0 11
3688: PUSH
3689: LD_INT 2
3691: DIV
3692: ST_TO_ADDR
// neng := neng - nmech ;
3693: LD_ADDR_VAR 0 11
3697: PUSH
3698: LD_VAR 0 11
3702: PUSH
3703: LD_VAR 0 13
3707: MINUS
3708: ST_TO_ADDR
// if neng < 1 then
3709: LD_VAR 0 11
3713: PUSH
3714: LD_INT 1
3716: LESS
3717: IFFALSE 3727
// neng := 1 ;
3719: LD_ADDR_VAR 0 11
3723: PUSH
3724: LD_INT 1
3726: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
3727: LD_ADDR_VAR 0 4
3731: PUSH
3732: LD_EXP 41
3736: PUSH
3737: LD_VAR 0 3
3741: ARRAY
3742: PUSH
3743: LD_INT 1
3745: ARRAY
3746: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3747: LD_ADDR_VAR 0 5
3751: PUSH
3752: LD_EXP 41
3756: PUSH
3757: LD_VAR 0 3
3761: ARRAY
3762: PUSH
3763: LD_INT 2
3765: ARRAY
3766: ST_TO_ADDR
// if not is_depot then
3767: LD_EXP 15
3771: NOT
3772: IFFALSE 3796
// prepare_buldozer ( x , y , 2 , pos ) ;
3774: LD_VAR 0 4
3778: PPUSH
3779: LD_VAR 0 5
3783: PPUSH
3784: LD_INT 2
3786: PPUSH
3787: LD_VAR 0 3
3791: PPUSH
3792: CALL 2803 0 4
// commander := true ;
3796: LD_ADDR_EXP 44
3800: PUSH
3801: LD_INT 1
3803: ST_TO_ADDR
// prepare_people ( side , 1 , class_soldier , x , y , 5 , commander ) ;
3804: LD_VAR 0 1
3808: PPUSH
3809: LD_INT 1
3811: PPUSH
3812: LD_INT 1
3814: PPUSH
3815: LD_VAR 0 4
3819: PPUSH
3820: LD_VAR 0 5
3824: PPUSH
3825: LD_INT 5
3827: PPUSH
3828: LD_ADDR_EXP 44
3832: PPUSH
3833: CALL 2255 0 7
// commander := false ;
3837: LD_ADDR_EXP 44
3841: PUSH
3842: LD_INT 0
3844: ST_TO_ADDR
// prepare_people ( side , nsol - 1 , class_soldier , x , y , 5 , commander ) ;
3845: LD_VAR 0 1
3849: PPUSH
3850: LD_VAR 0 14
3854: PUSH
3855: LD_INT 1
3857: MINUS
3858: PPUSH
3859: LD_INT 1
3861: PPUSH
3862: LD_VAR 0 4
3866: PPUSH
3867: LD_VAR 0 5
3871: PPUSH
3872: LD_INT 5
3874: PPUSH
3875: LD_ADDR_EXP 44
3879: PPUSH
3880: CALL 2255 0 7
// prepare_people ( side , neng , class_engineer , x , y , 5 , commander ) ;
3884: LD_VAR 0 1
3888: PPUSH
3889: LD_VAR 0 11
3893: PPUSH
3894: LD_INT 2
3896: PPUSH
3897: LD_VAR 0 4
3901: PPUSH
3902: LD_VAR 0 5
3906: PPUSH
3907: LD_INT 5
3909: PPUSH
3910: LD_ADDR_EXP 44
3914: PPUSH
3915: CALL 2255 0 7
// prepare_people ( side , nmech , class_mechanic , x , y , 5 , commander ) ;
3919: LD_VAR 0 1
3923: PPUSH
3924: LD_VAR 0 13
3928: PPUSH
3929: LD_INT 3
3931: PPUSH
3932: LD_VAR 0 4
3936: PPUSH
3937: LD_VAR 0 5
3941: PPUSH
3942: LD_INT 5
3944: PPUSH
3945: LD_ADDR_EXP 44
3949: PPUSH
3950: CALL 2255 0 7
// prepare_people ( side , nsci , class_scientistic , x , y , 5 , commander ) ;
3954: LD_VAR 0 1
3958: PPUSH
3959: LD_VAR 0 12
3963: PPUSH
3964: LD_INT 4
3966: PPUSH
3967: LD_VAR 0 4
3971: PPUSH
3972: LD_VAR 0 5
3976: PPUSH
3977: LD_INT 5
3979: PPUSH
3980: LD_ADDR_EXP 44
3984: PPUSH
3985: CALL 2255 0 7
// if not global_defined then
3989: LD_LOC 2
3993: NOT
3994: IFFALSE 4004
// global_defined := true ;
3996: LD_ADDR_LOC 2
4000: PUSH
4001: LD_INT 1
4003: ST_TO_ADDR
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4004: LD_EXP 10
4008: PUSH
4009: LD_INT 20
4011: PPUSH
4012: LD_VAR 0 1
4016: PPUSH
4017: CALL_OW 321
4021: PUSH
4022: LD_INT 1
4024: EQUAL
4025: AND
4026: IFFALSE 4043
// SetTech ( tech_SibDet , side , state_researched ) ;
4028: LD_INT 20
4030: PPUSH
4031: LD_VAR 0 1
4035: PPUSH
4036: LD_INT 2
4038: PPUSH
4039: CALL_OW 322
// if def_siberite_bomb = 1 then
4043: LD_EXP 13
4047: PUSH
4048: LD_INT 1
4050: EQUAL
4051: IFFALSE 4085
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4053: LD_INT 25
4055: PPUSH
4056: LD_VAR 0 1
4060: PPUSH
4061: LD_INT 1
4063: PPUSH
4064: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4068: LD_INT 73
4070: PPUSH
4071: LD_VAR 0 1
4075: PPUSH
4076: LD_INT 1
4078: PPUSH
4079: CALL_OW 322
// end else
4083: GO 4115
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4085: LD_INT 25
4087: PPUSH
4088: LD_VAR 0 1
4092: PPUSH
4093: LD_INT 0
4095: PPUSH
4096: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4100: LD_INT 73
4102: PPUSH
4103: LD_VAR 0 1
4107: PPUSH
4108: LD_INT 0
4110: PPUSH
4111: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4115: LD_INT 24
4117: PPUSH
4118: LD_VAR 0 1
4122: PPUSH
4123: LD_INT 0
4125: PPUSH
4126: CALL_OW 322
// end ;
4130: LD_VAR 0 2
4134: RET
// every 0 0$1 do
4135: GO 4137
4137: DISABLE
// if ( def_siberite_bomb > 1 ) then
4138: LD_EXP 13
4142: PUSH
4143: LD_INT 1
4145: GREATER
4146: IFFALSE 4161
// begin wait ( siberite_bomb_Delay ) ;
4148: LD_EXP 23
4152: PPUSH
4153: CALL_OW 67
// EnableSibFiss ;
4157: CALL 4162 0 0
// end ;
4161: END
// function EnableSibFiss ; var i ; begin
4162: LD_INT 0
4164: PPUSH
4165: PPUSH
// for i := 1 to 8 do
4166: LD_ADDR_VAR 0 2
4170: PUSH
4171: DOUBLE
4172: LD_INT 1
4174: DEC
4175: ST_TO_ADDR
4176: LD_INT 8
4178: PUSH
4179: FOR_TO
4180: IFFALSE 4226
// if Side_Positions [ i ] then
4182: LD_EXP 34
4186: PUSH
4187: LD_VAR 0 2
4191: ARRAY
4192: IFFALSE 4224
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4194: LD_INT 25
4196: PPUSH
4197: LD_VAR 0 2
4201: PPUSH
4202: LD_INT 1
4204: PPUSH
4205: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4209: LD_INT 73
4211: PPUSH
4212: LD_VAR 0 2
4216: PPUSH
4217: LD_INT 1
4219: PPUSH
4220: CALL_OW 322
// end ;
4224: GO 4179
4226: POP
4227: POP
// end ;
4228: LD_VAR 0 1
4232: RET
// function prepare_sides ; var i ; begin
4233: LD_INT 0
4235: PPUSH
4236: PPUSH
// global_units := [ ] ;
4237: LD_ADDR_LOC 1
4241: PUSH
4242: EMPTY
4243: ST_TO_ADDR
// global_defined := false ;
4244: LD_ADDR_LOC 2
4248: PUSH
4249: LD_INT 0
4251: ST_TO_ADDR
// for i := 1 to 8 do
4252: LD_ADDR_VAR 0 2
4256: PUSH
4257: DOUBLE
4258: LD_INT 1
4260: DEC
4261: ST_TO_ADDR
4262: LD_INT 8
4264: PUSH
4265: FOR_TO
4266: IFFALSE 4291
// if Side_Positions [ i ] then
4268: LD_EXP 34
4272: PUSH
4273: LD_VAR 0 2
4277: ARRAY
4278: IFFALSE 4289
// prepare_side ( i ) ;
4280: LD_VAR 0 2
4284: PPUSH
4285: CALL 3035 0 1
4289: GO 4265
4291: POP
4292: POP
// end ;
4293: LD_VAR 0 1
4297: RET
// starting begin disable ( 98 ) ;
4298: LD_INT 98
4300: DISABLE_MARKED
// disable ( 99 ) ;
4301: LD_INT 99
4303: DISABLE_MARKED
// disable ( 400 ) ;
4304: LD_INT 400
4306: DISABLE_MARKED
// disable ( 401 ) ;
4307: LD_INT 401
4309: DISABLE_MARKED
// mp_selectmsg := true ;
4310: LD_ADDR_OWVAR 13
4314: PUSH
4315: LD_INT 1
4317: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4318: CALL 681 0 0
// init_map ;
4322: CALL 436 0 0
// set_shared_visions_and_alliances ;
4326: CALL 1892 0 0
// ResetFog ;
4330: CALL_OW 335
// ClearAllFogForSide ( Player_Side ) ;
4334: LD_EXP 30
4338: PPUSH
4339: CALL_OW 520
// AnimateTrees ( true ) ;
4343: LD_INT 1
4345: PPUSH
4346: CALL_OW 573
// prepare_sides ;
4350: CALL 4233 0 0
// Init_Win_Condition ;
4354: CALL 8211 0 0
// init_shipments ;
4358: CALL 5514 0 0
// init_respawn ;
4362: CALL 6007 0 0
// InitApeman ;
4366: CALL 4689 0 0
// your_side := Player_Side ;
4370: LD_ADDR_OWVAR 2
4374: PUSH
4375: LD_EXP 30
4379: ST_TO_ADDR
// music_nat := Side_Nations [ your_side ] ;
4380: LD_ADDR_OWVAR 71
4384: PUSH
4385: LD_EXP 35
4389: PUSH
4390: LD_OWVAR 2
4394: ARRAY
4395: ST_TO_ADDR
// if IAmSpec then
4396: CALL_OW 531
4400: IFFALSE 4424
// begin fogOff ( true ) ;
4402: LD_INT 1
4404: PPUSH
4405: CALL_OW 344
// CenterNowOnXY ( 104 , 69 ) ;
4409: LD_INT 104
4411: PPUSH
4412: LD_INT 69
4414: PPUSH
4415: CALL_OW 86
// enable ( 400 ) ;
4419: LD_INT 400
4421: ENABLE_MARKED
// end else
4422: GO 4470
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4424: LD_EXP 41
4428: PUSH
4429: LD_EXP 34
4433: PUSH
4434: LD_OWVAR 2
4438: ARRAY
4439: ARRAY
4440: PUSH
4441: LD_INT 1
4443: ARRAY
4444: PPUSH
4445: LD_EXP 41
4449: PUSH
4450: LD_EXP 34
4454: PUSH
4455: LD_OWVAR 2
4459: ARRAY
4460: ARRAY
4461: PUSH
4462: LD_INT 2
4464: ARRAY
4465: PPUSH
4466: CALL_OW 86
// end ; BuildUpAreas := [ nw , ne , sw , se ] ;
4470: LD_ADDR_EXP 56
4474: PUSH
4475: LD_INT 12
4477: PUSH
4478: LD_INT 13
4480: PUSH
4481: LD_INT 14
4483: PUSH
4484: LD_INT 15
4486: PUSH
4487: EMPTY
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: ST_TO_ADDR
// BeginBuildUp ;
4493: CALL 7374 0 0
// end ; end_of_file
4497: END
// every 20 20$00 trigger apemanNumber do
4498: LD_EXP 47
4502: IFFALSE 4535
4504: GO 4506
4506: DISABLE
// begin enable ;
4507: ENABLE
// if apeLevel >= 8 then
4508: LD_EXP 52
4512: PUSH
4513: LD_INT 8
4515: GREATEREQUAL
4516: IFFALSE 4521
// disable else
4518: DISABLE
4519: GO 4535
// apeLevel := apeLevel + 1 ;
4521: LD_ADDR_EXP 52
4525: PUSH
4526: LD_EXP 52
4530: PUSH
4531: LD_INT 1
4533: PLUS
4534: ST_TO_ADDR
// end ;
4535: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
4536: LD_EXP 47
4540: PUSH
4541: LD_EXP 48
4545: LESS
4546: IFFALSE 4686
4548: GO 4550
4550: DISABLE
4551: LD_INT 0
4553: PPUSH
4554: PPUSH
4555: PPUSH
4556: PPUSH
// begin enable ;
4557: ENABLE
// for i := 1 to apemanPos do
4558: LD_ADDR_VAR 0 1
4562: PUSH
4563: DOUBLE
4564: LD_INT 1
4566: DEC
4567: ST_TO_ADDR
4568: LD_EXP 50
4572: PUSH
4573: FOR_TO
4574: IFFALSE 4684
// begin if apemanPlayerCount [ i ] then
4576: LD_EXP 51
4580: PUSH
4581: LD_VAR 0 1
4585: ARRAY
4586: IFFALSE 4682
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
4588: LD_EXP 51
4592: PUSH
4593: LD_VAR 0 1
4597: ARRAY
4598: PUSH
4599: LD_EXP 50
4603: PUSH
4604: LD_VAR 0 1
4608: ARRAY
4609: GREATER
4610: IFFALSE 4682
// begin ape := PrepareApeman ;
4612: LD_ADDR_VAR 0 2
4616: PUSH
4617: CALL 5189 0 0
4621: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
4622: LD_VAR 0 2
4626: PPUSH
4627: LD_EXP 53
4631: PUSH
4632: LD_VAR 0 1
4636: ARRAY
4637: PPUSH
4638: LD_INT 0
4640: PPUSH
4641: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
4645: LD_ADDR_EXP 50
4649: PUSH
4650: LD_EXP 50
4654: PPUSH
4655: LD_VAR 0 1
4659: PPUSH
4660: LD_EXP 50
4664: PUSH
4665: LD_VAR 0 1
4669: ARRAY
4670: PUSH
4671: LD_VAR 0 2
4675: UNION
4676: PPUSH
4677: CALL_OW 1
4681: ST_TO_ADDR
// end ; end ; end ;
4682: GO 4573
4684: POP
4685: POP
// end ;
4686: PPOPN 4
4688: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
4689: LD_INT 0
4691: PPUSH
4692: PPUSH
4693: PPUSH
4694: PPUSH
4695: PPUSH
4696: PPUSH
4697: PPUSH
// playersAmount := 0 ;
4698: LD_ADDR_VAR 0 3
4702: PUSH
4703: LD_INT 0
4705: ST_TO_ADDR
// _apeAreas := [ nw , ne , sw , se , ] ;
4706: LD_ADDR_VAR 0 7
4710: PUSH
4711: LD_INT 12
4713: PUSH
4714: LD_INT 13
4716: PUSH
4717: LD_INT 14
4719: PUSH
4720: LD_INT 15
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4729: LD_ADDR_EXP 53
4733: PUSH
4734: LD_INT 0
4736: PUSH
4737: LD_INT 0
4739: PUSH
4740: LD_INT 0
4742: PUSH
4743: LD_INT 0
4745: PUSH
4746: LD_INT 0
4748: PUSH
4749: LD_INT 0
4751: PUSH
4752: LD_INT 0
4754: PUSH
4755: LD_INT 0
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: ST_TO_ADDR
// for j = 1 to Side_Positions do
4768: LD_ADDR_VAR 0 4
4772: PUSH
4773: DOUBLE
4774: LD_INT 1
4776: DEC
4777: ST_TO_ADDR
4778: LD_EXP 34
4782: PUSH
4783: FOR_TO
4784: IFFALSE 4851
// if Side_Positions [ j ] then
4786: LD_EXP 34
4790: PUSH
4791: LD_VAR 0 4
4795: ARRAY
4796: IFFALSE 4849
// begin playersAmount := playersAmount + 1 ;
4798: LD_ADDR_VAR 0 3
4802: PUSH
4803: LD_VAR 0 3
4807: PUSH
4808: LD_INT 1
4810: PLUS
4811: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
4812: LD_ADDR_EXP 53
4816: PUSH
4817: LD_EXP 53
4821: PPUSH
4822: LD_VAR 0 4
4826: PPUSH
4827: LD_VAR 0 7
4831: PUSH
4832: LD_EXP 34
4836: PUSH
4837: LD_VAR 0 4
4841: ARRAY
4842: ARRAY
4843: PPUSH
4844: CALL_OW 1
4848: ST_TO_ADDR
// end ;
4849: GO 4783
4851: POP
4852: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
4853: LD_ADDR_EXP 49
4857: PUSH
4858: LD_INT 3
4860: PUSH
4861: LD_EXP 19
4865: MUL
4866: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
4867: LD_ADDR_EXP 47
4871: PUSH
4872: LD_VAR 0 3
4876: PUSH
4877: LD_EXP 49
4881: MUL
4882: ST_TO_ADDR
// apemanLimit := apemanNumber ;
4883: LD_ADDR_EXP 48
4887: PUSH
4888: LD_EXP 47
4892: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4893: LD_ADDR_EXP 50
4897: PUSH
4898: LD_INT 0
4900: PUSH
4901: LD_INT 0
4903: PUSH
4904: LD_INT 0
4906: PUSH
4907: LD_INT 0
4909: PUSH
4910: LD_INT 0
4912: PUSH
4913: LD_INT 0
4915: PUSH
4916: LD_INT 0
4918: PUSH
4919: LD_INT 0
4921: PUSH
4922: EMPTY
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4932: LD_ADDR_EXP 51
4936: PUSH
4937: LD_INT 0
4939: PUSH
4940: LD_INT 0
4942: PUSH
4943: LD_INT 0
4945: PUSH
4946: LD_INT 0
4948: PUSH
4949: LD_INT 0
4951: PUSH
4952: LD_INT 0
4954: PUSH
4955: LD_INT 0
4957: PUSH
4958: LD_INT 0
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: ST_TO_ADDR
// apeLevel := 1 ;
4971: LD_ADDR_EXP 52
4975: PUSH
4976: LD_INT 1
4978: ST_TO_ADDR
// if not apemanNumber then
4979: LD_EXP 47
4983: NOT
4984: IFFALSE 4988
// exit ;
4986: GO 5184
// for i := 1 to apemanPerPlayer do
4988: LD_ADDR_VAR 0 2
4992: PUSH
4993: DOUBLE
4994: LD_INT 1
4996: DEC
4997: ST_TO_ADDR
4998: LD_EXP 49
5002: PUSH
5003: FOR_TO
5004: IFFALSE 5182
// begin for j := 1 to Side_Positions do
5006: LD_ADDR_VAR 0 4
5010: PUSH
5011: DOUBLE
5012: LD_INT 1
5014: DEC
5015: ST_TO_ADDR
5016: LD_EXP 34
5020: PUSH
5021: FOR_TO
5022: IFFALSE 5178
// if Side_Positions [ j ] then
5024: LD_EXP 34
5028: PUSH
5029: LD_VAR 0 4
5033: ARRAY
5034: IFFALSE 5176
// begin pos := Side_Positions [ j ] ;
5036: LD_ADDR_VAR 0 6
5040: PUSH
5041: LD_EXP 34
5045: PUSH
5046: LD_VAR 0 4
5050: ARRAY
5051: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5052: LD_ADDR_EXP 51
5056: PUSH
5057: LD_EXP 51
5061: PPUSH
5062: LD_VAR 0 4
5066: PPUSH
5067: LD_EXP 51
5071: PUSH
5072: LD_VAR 0 4
5076: ARRAY
5077: PUSH
5078: LD_INT 1
5080: PLUS
5081: PPUSH
5082: CALL_OW 1
5086: ST_TO_ADDR
// ape := PrepareApeman ;
5087: LD_ADDR_VAR 0 5
5091: PUSH
5092: CALL 5189 0 0
5096: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5097: LD_ADDR_EXP 50
5101: PUSH
5102: LD_EXP 50
5106: PPUSH
5107: LD_VAR 0 4
5111: PPUSH
5112: LD_EXP 50
5116: PUSH
5117: LD_VAR 0 4
5121: ARRAY
5122: PPUSH
5123: LD_EXP 50
5127: PUSH
5128: LD_VAR 0 4
5132: ARRAY
5133: PUSH
5134: LD_INT 1
5136: PLUS
5137: PPUSH
5138: LD_VAR 0 5
5142: PPUSH
5143: CALL_OW 1
5147: PPUSH
5148: CALL_OW 1
5152: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5153: LD_VAR 0 5
5157: PPUSH
5158: LD_EXP 53
5162: PUSH
5163: LD_VAR 0 4
5167: ARRAY
5168: PPUSH
5169: LD_INT 0
5171: PPUSH
5172: CALL_OW 49
// end ;
5176: GO 5021
5178: POP
5179: POP
// end ;
5180: GO 5003
5182: POP
5183: POP
// end ;
5184: LD_VAR 0 1
5188: RET
// export function PrepareApeman ; var bonus ; begin
5189: LD_INT 0
5191: PPUSH
5192: PPUSH
// uc_side := 0 ;
5193: LD_ADDR_OWVAR 20
5197: PUSH
5198: LD_INT 0
5200: ST_TO_ADDR
// uc_nation := 0 ;
5201: LD_ADDR_OWVAR 21
5205: PUSH
5206: LD_INT 0
5208: ST_TO_ADDR
// InitHc ;
5209: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
5213: LD_ADDR_VAR 0 2
5217: PUSH
5218: LD_INT 1
5220: NEG
5221: PUSH
5222: LD_INT 0
5224: PUSH
5225: LD_INT 1
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: LIST
5232: PUSH
5233: LD_OWVAR 1
5237: PUSH
5238: LD_INT 3
5240: MOD
5241: PUSH
5242: LD_INT 1
5244: PLUS
5245: ARRAY
5246: ST_TO_ADDR
// hc_class := class_apeman ;
5247: LD_ADDR_OWVAR 28
5251: PUSH
5252: LD_INT 12
5254: ST_TO_ADDR
// hc_gallery :=  ;
5255: LD_ADDR_OWVAR 33
5259: PUSH
5260: LD_STRING 
5262: ST_TO_ADDR
// hc_name :=  ;
5263: LD_ADDR_OWVAR 26
5267: PUSH
5268: LD_STRING 
5270: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
5271: LD_ADDR_OWVAR 31
5275: PUSH
5276: LD_EXP 52
5280: PUSH
5281: LD_VAR 0 2
5285: PLUS
5286: PUSH
5287: LD_EXP 52
5291: PUSH
5292: LD_VAR 0 2
5296: PLUS
5297: PUSH
5298: LD_EXP 52
5302: PUSH
5303: LD_VAR 0 2
5307: PLUS
5308: PUSH
5309: LD_EXP 52
5313: PUSH
5314: LD_VAR 0 2
5318: PLUS
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
5326: LD_ADDR_OWVAR 35
5330: PUSH
5331: LD_INT 10
5333: PUSH
5334: LD_VAR 0 2
5338: MUL
5339: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5340: LD_ADDR_OWVAR 29
5344: PUSH
5345: LD_INT 12
5347: PUSH
5348: LD_INT 10
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: ST_TO_ADDR
// result := CreateHuman ;
5355: LD_ADDR_VAR 0 1
5359: PUSH
5360: CALL_OW 44
5364: ST_TO_ADDR
// end ;
5365: LD_VAR 0 1
5369: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
5370: LD_INT 0
5372: PPUSH
5373: PPUSH
5374: PPUSH
// if not ape then
5375: LD_VAR 0 1
5379: NOT
5380: IFFALSE 5384
// exit ;
5382: GO 5509
// side := GetSide ( ape ) ;
5384: LD_ADDR_VAR 0 3
5388: PUSH
5389: LD_VAR 0 1
5393: PPUSH
5394: CALL_OW 255
5398: ST_TO_ADDR
// if not side then
5399: LD_VAR 0 3
5403: NOT
5404: IFFALSE 5458
// begin for i = 1 to apemanPos do
5406: LD_ADDR_VAR 0 4
5410: PUSH
5411: DOUBLE
5412: LD_INT 1
5414: DEC
5415: ST_TO_ADDR
5416: LD_EXP 50
5420: PUSH
5421: FOR_TO
5422: IFFALSE 5456
// if ape in apemanPos [ i ] then
5424: LD_VAR 0 1
5428: PUSH
5429: LD_EXP 50
5433: PUSH
5434: LD_VAR 0 4
5438: ARRAY
5439: IN
5440: IFFALSE 5454
// begin side := i ;
5442: LD_ADDR_VAR 0 3
5446: PUSH
5447: LD_VAR 0 4
5451: ST_TO_ADDR
// break ;
5452: GO 5456
// end ;
5454: GO 5421
5456: POP
5457: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
5458: LD_ADDR_EXP 50
5462: PUSH
5463: LD_EXP 50
5467: PPUSH
5468: LD_VAR 0 3
5472: PPUSH
5473: LD_EXP 50
5477: PUSH
5478: LD_VAR 0 3
5482: ARRAY
5483: PUSH
5484: LD_VAR 0 1
5488: DIFF
5489: PPUSH
5490: CALL_OW 1
5494: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
5495: LD_ADDR_EXP 47
5499: PUSH
5500: LD_EXP 47
5504: PUSH
5505: LD_INT 1
5507: MINUS
5508: ST_TO_ADDR
// end ; end_of_file
5509: LD_VAR 0 2
5513: RET
// var shipment , tictac ; export function init_shipments ; begin
5514: LD_INT 0
5516: PPUSH
// shipment := Rand ( 0 , 3 ) ;
5517: LD_ADDR_LOC 4
5521: PUSH
5522: LD_INT 0
5524: PPUSH
5525: LD_INT 3
5527: PPUSH
5528: CALL_OW 12
5532: ST_TO_ADDR
// tictac := 0 ;
5533: LD_ADDR_LOC 5
5537: PUSH
5538: LD_INT 0
5540: ST_TO_ADDR
// end ;
5541: LD_VAR 0 1
5545: RET
// every 0 0$5 + 0 0$1.1 do var d ;
5546: GO 5548
5548: DISABLE
5549: LD_INT 0
5551: PPUSH
// begin case tick of 1 .. 1 1$0 :
5552: LD_OWVAR 1
5556: PUSH
5557: LD_INT 1
5559: DOUBLE
5560: GREATEREQUAL
5561: IFFALSE 5569
5563: LD_INT 2100
5565: DOUBLE
5566: LESSEQUAL
5567: IFTRUE 5571
5569: GO 5582
5571: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5572: LD_ADDR_VAR 0 1
5576: PUSH
5577: LD_INT 150
5579: ST_TO_ADDR
5580: GO 5765
5582: LD_INT 2100
5584: PUSH
5585: LD_INT 1
5587: PLUS
5588: DOUBLE
5589: GREATEREQUAL
5590: IFFALSE 5598
5592: LD_INT 10500
5594: DOUBLE
5595: LESSEQUAL
5596: IFTRUE 5600
5598: GO 5611
5600: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5601: LD_ADDR_VAR 0 1
5605: PUSH
5606: LD_INT 100
5608: ST_TO_ADDR
5609: GO 5765
5611: LD_INT 10500
5613: PUSH
5614: LD_INT 1
5616: PLUS
5617: DOUBLE
5618: GREATEREQUAL
5619: IFFALSE 5627
5621: LD_INT 21000
5623: DOUBLE
5624: LESSEQUAL
5625: IFTRUE 5629
5627: GO 5640
5629: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5630: LD_ADDR_VAR 0 1
5634: PUSH
5635: LD_INT 90
5637: ST_TO_ADDR
5638: GO 5765
5640: LD_INT 21000
5642: PUSH
5643: LD_INT 1
5645: PLUS
5646: DOUBLE
5647: GREATEREQUAL
5648: IFFALSE 5656
5650: LD_INT 42000
5652: DOUBLE
5653: LESSEQUAL
5654: IFTRUE 5658
5656: GO 5669
5658: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5659: LD_ADDR_VAR 0 1
5663: PUSH
5664: LD_INT 70
5666: ST_TO_ADDR
5667: GO 5765
5669: LD_INT 42000
5671: PUSH
5672: LD_INT 1
5674: PLUS
5675: DOUBLE
5676: GREATEREQUAL
5677: IFFALSE 5685
5679: LD_INT 63000
5681: DOUBLE
5682: LESSEQUAL
5683: IFTRUE 5687
5685: GO 5698
5687: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5688: LD_ADDR_VAR 0 1
5692: PUSH
5693: LD_INT 60
5695: ST_TO_ADDR
5696: GO 5765
5698: LD_INT 63000
5700: PUSH
5701: LD_INT 1
5703: PLUS
5704: DOUBLE
5705: GREATEREQUAL
5706: IFFALSE 5714
5708: LD_INT 105000
5710: DOUBLE
5711: LESSEQUAL
5712: IFTRUE 5716
5714: GO 5727
5716: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5717: LD_ADDR_VAR 0 1
5721: PUSH
5722: LD_INT 35
5724: ST_TO_ADDR
5725: GO 5765
5727: LD_INT 105000
5729: PUSH
5730: LD_INT 1
5732: PLUS
5733: DOUBLE
5734: GREATEREQUAL
5735: IFFALSE 5743
5737: LD_INT 630000
5739: DOUBLE
5740: LESSEQUAL
5741: IFTRUE 5745
5743: GO 5756
5745: POP
// d := 20 ; else
5746: LD_ADDR_VAR 0 1
5750: PUSH
5751: LD_INT 20
5753: ST_TO_ADDR
5754: GO 5765
5756: POP
// d := 0 ; end ;
5757: LD_ADDR_VAR 0 1
5761: PUSH
5762: LD_INT 0
5764: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5765: LD_INT 1
5767: PPUSH
5768: LD_INT 10000
5770: PPUSH
5771: CALL_OW 12
5775: PUSH
5776: LD_VAR 0 1
5780: PUSH
5781: LD_EXP 22
5785: MUL
5786: LESSEQUAL
5787: IFFALSE 5863
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5789: LD_INT 1
5791: PPUSH
5792: LD_INT 140
5794: PPUSH
5795: CALL_OW 12
5799: PPUSH
5800: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
5804: LD_ADDR_LOC 4
5808: PUSH
5809: LD_LOC 4
5813: PUSH
5814: LD_INT 1
5816: PLUS
5817: PUSH
5818: LD_INT 4
5820: MOD
5821: ST_TO_ADDR
// if GetResourceArea ( nw + shipment , mat_cans ) < 50 then
5822: LD_INT 12
5824: PUSH
5825: LD_LOC 4
5829: PLUS
5830: PPUSH
5831: LD_INT 1
5833: PPUSH
5834: CALL_OW 287
5838: PUSH
5839: LD_INT 50
5841: LESS
5842: IFFALSE 5863
// CreateCratesArea ( 5 , nw + shipment , true ) ;
5844: LD_INT 5
5846: PPUSH
5847: LD_INT 12
5849: PUSH
5850: LD_LOC 4
5854: PLUS
5855: PPUSH
5856: LD_INT 1
5858: PPUSH
5859: CALL_OW 55
// end ; enable ;
5863: ENABLE
// end ;
5864: PPOPN 1
5866: END
// every 0 0$10 trigger TICK > ( ( 3 3$0 * tictac ) + tictac * ( 1 1$30 - shipments_density * ( 0 0$2 ) ) ) do var i , amount ;
5867: LD_OWVAR 1
5871: PUSH
5872: LD_INT 6300
5874: PUSH
5875: LD_LOC 5
5879: MUL
5880: PUSH
5881: LD_LOC 5
5885: PUSH
5886: LD_INT 3150
5888: PUSH
5889: LD_EXP 22
5893: PUSH
5894: LD_INT 70
5896: MUL
5897: MINUS
5898: MUL
5899: PLUS
5900: GREATER
5901: IFFALSE 6004
5903: GO 5905
5905: DISABLE
5906: LD_INT 0
5908: PPUSH
5909: PPUSH
// begin tictac := tictac + 1 ;
5910: LD_ADDR_LOC 5
5914: PUSH
5915: LD_LOC 5
5919: PUSH
5920: LD_INT 1
5922: PLUS
5923: ST_TO_ADDR
// amount := Rand ( 3 , 5 ) ;
5924: LD_ADDR_VAR 0 2
5928: PUSH
5929: LD_INT 3
5931: PPUSH
5932: LD_INT 5
5934: PPUSH
5935: CALL_OW 12
5939: ST_TO_ADDR
// for i = 0 to 3 do
5940: LD_ADDR_VAR 0 1
5944: PUSH
5945: DOUBLE
5946: LD_INT 0
5948: DEC
5949: ST_TO_ADDR
5950: LD_INT 3
5952: PUSH
5953: FOR_TO
5954: IFFALSE 6001
// if GetResourceArea ( Base1 + i , mat_cans ) < 20 then
5956: LD_INT 1
5958: PUSH
5959: LD_VAR 0 1
5963: PLUS
5964: PPUSH
5965: LD_INT 1
5967: PPUSH
5968: CALL_OW 287
5972: PUSH
5973: LD_INT 20
5975: LESS
5976: IFFALSE 5999
// CreateCratesArea ( amount , Base1 + i , true ) ;
5978: LD_VAR 0 2
5982: PPUSH
5983: LD_INT 1
5985: PUSH
5986: LD_VAR 0 1
5990: PLUS
5991: PPUSH
5992: LD_INT 1
5994: PPUSH
5995: CALL_OW 55
5999: GO 5953
6001: POP
6002: POP
// enable ;
6003: ENABLE
// end ; end_of_file
6004: PPOPN 2
6006: END
// var respawn_queue ; export function init_respawn ; begin
6007: LD_INT 0
6009: PPUSH
// if not def_people_respawning then
6010: LD_EXP 12
6014: NOT
6015: IFFALSE 6019
// exit ;
6017: GO 6058
// respawn_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6019: LD_ADDR_LOC 6
6023: PUSH
6024: LD_INT 0
6026: PUSH
6027: LD_INT 0
6029: PUSH
6030: LD_INT 0
6032: PUSH
6033: LD_INT 0
6035: PUSH
6036: LD_INT 0
6038: PUSH
6039: LD_INT 0
6041: PUSH
6042: LD_INT 0
6044: PUSH
6045: LD_INT 0
6047: PUSH
6048: EMPTY
6049: LIST
6050: LIST
6051: LIST
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: ST_TO_ADDR
// end ;
6058: LD_VAR 0 1
6062: RET
// every 0 0$10 trigger def_people_respawning do var un , list , time , side ;
6063: LD_EXP 12
6067: IFFALSE 6263
6069: GO 6071
6071: DISABLE
6072: LD_INT 0
6074: PPUSH
6075: PPUSH
6076: PPUSH
6077: PPUSH
// begin for side = 1 to Side_Positions do
6078: LD_ADDR_VAR 0 4
6082: PUSH
6083: DOUBLE
6084: LD_INT 1
6086: DEC
6087: ST_TO_ADDR
6088: LD_EXP 34
6092: PUSH
6093: FOR_TO
6094: IFFALSE 6260
// if Side_Positions [ side ] then
6096: LD_EXP 34
6100: PUSH
6101: LD_VAR 0 4
6105: ARRAY
6106: IFFALSE 6258
// begin list := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6108: LD_ADDR_VAR 0 2
6112: PUSH
6113: LD_INT 22
6115: PUSH
6116: LD_VAR 0 4
6120: PUSH
6121: EMPTY
6122: LIST
6123: LIST
6124: PUSH
6125: LD_INT 21
6127: PUSH
6128: LD_INT 1
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: PUSH
6135: LD_INT 3
6137: PUSH
6138: LD_INT 23
6140: PUSH
6141: LD_INT 0
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: PPUSH
6154: CALL_OW 69
6158: ST_TO_ADDR
// if ( list < number_of_people ) and ( not respawn_queue [ side ] ) then
6159: LD_VAR 0 2
6163: PUSH
6164: LD_EXP 17
6168: LESS
6169: PUSH
6170: LD_LOC 6
6174: PUSH
6175: LD_VAR 0 4
6179: ARRAY
6180: NOT
6181: AND
6182: IFFALSE 6198
// set_queue ( side , TICK ) ;
6184: LD_VAR 0 4
6188: PPUSH
6189: LD_OWVAR 1
6193: PPUSH
6194: CALL 6497 0 2
// time := TICK - respawn_queue [ side ] ;
6198: LD_ADDR_VAR 0 3
6202: PUSH
6203: LD_OWVAR 1
6207: PUSH
6208: LD_LOC 6
6212: PUSH
6213: LD_VAR 0 4
6217: ARRAY
6218: MINUS
6219: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6220: LD_LOC 6
6224: PUSH
6225: LD_VAR 0 4
6229: ARRAY
6230: PUSH
6231: LD_VAR 0 3
6235: PUSH
6236: LD_EXP 25
6240: GREATER
6241: AND
6242: IFFALSE 6258
// respawn_character ( side , time ) ;
6244: LD_VAR 0 4
6248: PPUSH
6249: LD_VAR 0 3
6253: PPUSH
6254: CALL 6266 0 2
// end ;
6258: GO 6093
6260: POP
6261: POP
// enable ;
6262: ENABLE
// end ;
6263: PPOPN 4
6265: END
// function respawn_character ( side , time ) ; var dep ; begin
6266: LD_INT 0
6268: PPUSH
6269: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6270: LD_INT 0
6272: PPUSH
6273: LD_INT 1
6275: PPUSH
6276: CALL_OW 12
6280: PUSH
6281: LD_VAR 0 2
6285: PUSH
6286: LD_EXP 26
6290: LESS
6291: AND
6292: IFFALSE 6296
// exit ;
6294: GO 6492
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6296: LD_ADDR_VAR 0 4
6300: PUSH
6301: LD_INT 22
6303: PUSH
6304: LD_VAR 0 1
6308: PUSH
6309: EMPTY
6310: LIST
6311: LIST
6312: PUSH
6313: LD_INT 2
6315: PUSH
6316: LD_INT 30
6318: PUSH
6319: LD_INT 0
6321: PUSH
6322: EMPTY
6323: LIST
6324: LIST
6325: PUSH
6326: LD_INT 30
6328: PUSH
6329: LD_INT 1
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: LIST
6340: PUSH
6341: LD_INT 50
6343: PUSH
6344: EMPTY
6345: LIST
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: LIST
6351: PPUSH
6352: CALL_OW 69
6356: ST_TO_ADDR
// if not dep then
6357: LD_VAR 0 4
6361: NOT
6362: IFFALSE 6368
// exit else
6364: GO 6492
6366: GO 6392
// dep := dep [ Rand ( 1 , dep ) ] ;
6368: LD_ADDR_VAR 0 4
6372: PUSH
6373: LD_VAR 0 4
6377: PUSH
6378: LD_INT 1
6380: PPUSH
6381: LD_VAR 0 4
6385: PPUSH
6386: CALL_OW 12
6390: ARRAY
6391: ST_TO_ADDR
// uc_side := side ;
6392: LD_ADDR_OWVAR 20
6396: PUSH
6397: LD_VAR 0 1
6401: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6402: LD_ADDR_OWVAR 21
6406: PUSH
6407: LD_EXP 35
6411: PUSH
6412: LD_VAR 0 1
6416: ARRAY
6417: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , initial_level div 2 ) ;
6418: LD_INT 0
6420: PPUSH
6421: LD_INT 0
6423: PPUSH
6424: LD_EXP 18
6428: PUSH
6429: LD_INT 2
6431: DIV
6432: PPUSH
6433: CALL_OW 380
// hc_importance := 0 ;
6437: LD_ADDR_OWVAR 32
6441: PUSH
6442: LD_INT 0
6444: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
6445: CALL_OW 44
6449: PPUSH
6450: LD_VAR 0 4
6454: PPUSH
6455: CALL_OW 250
6459: PPUSH
6460: LD_VAR 0 4
6464: PPUSH
6465: CALL_OW 251
6469: PPUSH
6470: LD_INT 10
6472: PPUSH
6473: LD_INT 1
6475: PPUSH
6476: CALL_OW 50
// set_queue ( side , 0 ) ;
6480: LD_VAR 0 1
6484: PPUSH
6485: LD_INT 0
6487: PPUSH
6488: CALL 6497 0 2
// end ;
6492: LD_VAR 0 3
6496: RET
// function set_queue ( side , time ) ; begin
6497: LD_INT 0
6499: PPUSH
// respawn_queue := Delete ( respawn_queue , side ) ;
6500: LD_ADDR_LOC 6
6504: PUSH
6505: LD_LOC 6
6509: PPUSH
6510: LD_VAR 0 1
6514: PPUSH
6515: CALL_OW 3
6519: ST_TO_ADDR
// respawn_queue := Insert ( respawn_queue , side , time ) ;
6520: LD_ADDR_LOC 6
6524: PUSH
6525: LD_LOC 6
6529: PPUSH
6530: LD_VAR 0 1
6534: PPUSH
6535: LD_VAR 0 2
6539: PPUSH
6540: CALL_OW 2
6544: ST_TO_ADDR
// end ; end_of_file
6545: LD_VAR 0 3
6549: RET
// var strength ; function Update_Flags ; var un ; begin
6550: LD_INT 0
6552: PPUSH
6553: PPUSH
// for un in battle_flags_id do
6554: LD_ADDR_VAR 0 2
6558: PUSH
6559: LD_EXP 45
6563: PUSH
6564: FOR_IN
6565: IFFALSE 6640
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6567: LD_VAR 0 2
6571: PPUSH
6572: LD_INT 1
6574: PUSH
6575: LD_LOC 7
6579: PUSH
6580: EMPTY
6581: LIST
6582: LIST
6583: PUSH
6584: LD_INT 2
6586: PUSH
6587: LD_LOC 7
6591: PUSH
6592: LD_INT 2
6594: DIV
6595: PUSH
6596: EMPTY
6597: LIST
6598: LIST
6599: PUSH
6600: LD_INT 3
6602: PUSH
6603: LD_LOC 7
6607: PUSH
6608: LD_INT 5
6610: DIV
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: PUSH
6616: LD_INT 20
6618: PUSH
6619: LD_LOC 7
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: PPUSH
6634: CALL_OW 423
6638: GO 6564
6640: POP
6641: POP
// end ;
6642: LD_VAR 0 1
6646: RET
// every 0 0$0.1 do var un ;
6647: GO 6649
6649: DISABLE
6650: LD_INT 0
6652: PPUSH
// begin if not def_morale_flags then
6653: LD_EXP 9
6657: NOT
6658: IFFALSE 6662
// exit ;
6660: GO 6739
// if not morale_decreasing_time then
6662: LD_EXP 46
6666: NOT
6667: IFFALSE 6671
// exit ;
6669: GO 6739
// strength = 100 ;
6671: LD_ADDR_LOC 7
6675: PUSH
6676: LD_INT 100
6678: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
6679: LD_EXP 46
6683: PPUSH
6684: CALL_OW 67
// strength := strength - 1 ;
6688: LD_ADDR_LOC 7
6692: PUSH
6693: LD_LOC 7
6697: PUSH
6698: LD_INT 1
6700: MINUS
6701: ST_TO_ADDR
// Update_Flags ;
6702: CALL 6550 0 0
// until not strength ;
6706: LD_LOC 7
6710: NOT
6711: IFFALSE 6679
// for un in battle_flags_id do
6713: LD_ADDR_VAR 0 1
6717: PUSH
6718: LD_EXP 45
6722: PUSH
6723: FOR_IN
6724: IFFALSE 6737
// KillBattleFlag ( un ) ;
6726: LD_VAR 0 1
6730: PPUSH
6731: CALL_OW 419
6735: GO 6723
6737: POP
6738: POP
// end ; end_of_file
6739: PPOPN 1
6741: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
6742: LD_INT 0
6744: PPUSH
6745: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
6746: LD_ADDR_VAR 0 2
6750: PUSH
6751: LD_STRING #Multi1x1-Time
6753: PUSH
6754: LD_OWVAR 1
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: ST_TO_ADDR
// if WaitServerStrings then
6763: LD_EXP 55
6767: IFFALSE 6785
// AllStrings = AllStrings ^ WaitServerStrings ;
6769: LD_ADDR_VAR 0 2
6773: PUSH
6774: LD_VAR 0 2
6778: PUSH
6779: LD_EXP 55
6783: ADD
6784: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
6785: LD_INT 0
6787: PUSH
6788: LD_EXP 23
6792: PUSH
6793: LD_OWVAR 1
6797: MINUS
6798: LESSEQUAL
6799: IFFALSE 6830
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
6801: LD_ADDR_VAR 0 2
6805: PUSH
6806: LD_VAR 0 2
6810: PUSH
6811: LD_STRING #allowedsibbomb
6813: PUSH
6814: LD_EXP 23
6818: PUSH
6819: LD_OWVAR 1
6823: MINUS
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: ADD
6829: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
6830: LD_INT 0
6832: PUSH
6833: LD_EXP 58
6837: PUSH
6838: LD_OWVAR 1
6842: MINUS
6843: LESSEQUAL
6844: IFFALSE 6875
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
6846: LD_ADDR_VAR 0 2
6850: PUSH
6851: LD_VAR 0 2
6855: PUSH
6856: LD_STRING #builduptime
6858: PUSH
6859: LD_EXP 58
6863: PUSH
6864: LD_OWVAR 1
6868: MINUS
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: ADD
6874: ST_TO_ADDR
// if ( ExtraStrings ) then
6875: LD_EXP 54
6879: IFFALSE 6901
// AllStrings := AllStrings ^  ^ ExtraStrings ;
6881: LD_ADDR_VAR 0 2
6885: PUSH
6886: LD_VAR 0 2
6890: PUSH
6891: LD_STRING 
6893: ADD
6894: PUSH
6895: LD_EXP 54
6899: ADD
6900: ST_TO_ADDR
// Display_Strings := AllStrings ;
6901: LD_ADDR_OWVAR 47
6905: PUSH
6906: LD_VAR 0 2
6910: ST_TO_ADDR
// end ;
6911: LD_VAR 0 1
6915: RET
// every 0 0$1 do
6916: GO 6918
6918: DISABLE
// begin ShowTimer ;
6919: CALL 6742 0 0
// enable ;
6923: ENABLE
// end ; end_of_file
6924: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6925: LD_VAR 0 1
6929: PPUSH
6930: CALL_OW 266
6934: PUSH
6935: LD_INT 0
6937: PUSH
6938: LD_INT 1
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: IN
6945: IFFALSE 6970
// SetBName ( b , @ & GetSide ( b ) ) ;
6947: LD_VAR 0 1
6951: PPUSH
6952: LD_STRING @
6954: PUSH
6955: LD_VAR 0 1
6959: PPUSH
6960: CALL_OW 255
6964: STR
6965: PPUSH
6966: CALL_OW 500
// end ;
6970: PPOPN 2
6972: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6973: LD_VAR 0 1
6977: PPUSH
6978: CALL_OW 266
6982: PUSH
6983: LD_INT 0
6985: PUSH
6986: LD_INT 1
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: IN
6993: IFFALSE 7018
// SetBName ( b , @ & GetSide ( b ) ) ;
6995: LD_VAR 0 1
6999: PPUSH
7000: LD_STRING @
7002: PUSH
7003: LD_VAR 0 1
7007: PPUSH
7008: CALL_OW 255
7012: STR
7013: PPUSH
7014: CALL_OW 500
// end ;
7018: PPOPN 3
7020: END
// on VehicleConstructed ( veh , fac ) do var side ;
7021: LD_INT 0
7023: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7024: LD_VAR 0 1
7028: PPUSH
7029: CALL_OW 263
7033: PUSH
7034: LD_INT 5
7036: EQUAL
7037: IFFALSE 7179
// begin side := GetSide ( veh ) ;
7039: LD_ADDR_VAR 0 3
7043: PUSH
7044: LD_VAR 0 1
7048: PPUSH
7049: CALL_OW 255
7053: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7054: LD_ADDR_EXP 50
7058: PUSH
7059: LD_EXP 50
7063: PPUSH
7064: LD_VAR 0 3
7068: PPUSH
7069: LD_EXP 50
7073: PUSH
7074: LD_VAR 0 3
7078: ARRAY
7079: PPUSH
7080: LD_INT 52
7082: PUSH
7083: EMPTY
7084: LIST
7085: PPUSH
7086: CALL_OW 72
7090: PUSH
7091: LD_INT 22
7093: PUSH
7094: LD_VAR 0 3
7098: PUSH
7099: EMPTY
7100: LIST
7101: LIST
7102: PUSH
7103: LD_INT 2
7105: PUSH
7106: LD_INT 33
7108: PUSH
7109: LD_INT 5
7111: PUSH
7112: EMPTY
7113: LIST
7114: LIST
7115: PUSH
7116: LD_INT 25
7118: PUSH
7119: LD_INT 12
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: PUSH
7126: LD_INT 25
7128: PUSH
7129: LD_INT 15
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: PUSH
7136: LD_INT 25
7138: PUSH
7139: LD_INT 16
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: PUSH
7146: LD_INT 25
7148: PUSH
7149: LD_INT 17
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: PPUSH
7168: CALL_OW 69
7172: UNION
7173: PPUSH
7174: CALL_OW 1
7178: ST_TO_ADDR
// end ; end ;
7179: PPOPN 3
7181: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7182: LD_INT 0
7184: PPUSH
7185: PPUSH
7186: PPUSH
7187: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7188: LD_VAR 0 1
7192: PPUSH
7193: CALL_OW 257
7197: PUSH
7198: LD_INT 12
7200: PUSH
7201: LD_INT 15
7203: PUSH
7204: LD_INT 17
7206: PUSH
7207: LD_INT 16
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: IN
7216: PUSH
7217: LD_VAR 0 1
7221: PPUSH
7222: CALL_OW 263
7226: PUSH
7227: LD_INT 5
7229: EQUAL
7230: OR
7231: IFFALSE 7242
// ApeKilled ( j ) ;
7233: LD_VAR 0 1
7237: PPUSH
7238: CALL 5370 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7242: LD_VAR 0 1
7246: PPUSH
7247: CALL_OW 266
7251: PUSH
7252: LD_INT 0
7254: PUSH
7255: LD_INT 1
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: IN
7262: IFFALSE 7344
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7264: LD_ADDR_VAR 0 4
7268: PUSH
7269: LD_EXP 34
7273: PUSH
7274: LD_VAR 0 1
7278: PPUSH
7279: CALL_OW 255
7283: ARRAY
7284: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7285: LD_ADDR_VAR 0 2
7289: PUSH
7290: LD_EXP 41
7294: PUSH
7295: LD_VAR 0 4
7299: ARRAY
7300: PUSH
7301: LD_INT 1
7303: ARRAY
7304: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7305: LD_ADDR_VAR 0 3
7309: PUSH
7310: LD_EXP 41
7314: PUSH
7315: LD_VAR 0 4
7319: ARRAY
7320: PUSH
7321: LD_INT 2
7323: ARRAY
7324: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7325: LD_VAR 0 2
7329: PPUSH
7330: LD_VAR 0 3
7334: PPUSH
7335: CALL_OW 420
7339: PPUSH
7340: CALL_OW 419
// end ; end ;
7344: PPOPN 5
7346: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7347: LD_VAR 0 1
7351: PPUSH
7352: LD_VAR 0 2
7356: PPUSH
7357: LD_VAR 0 3
7361: PPUSH
7362: LD_OWVAR 2
7366: PPUSH
7367: CALL 7972 0 4
7371: PPOPN 3
7373: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
7374: LD_INT 0
7376: PPUSH
7377: PPUSH
7378: PPUSH
// BuildUpTime_Delay = 0 ;
7379: LD_ADDR_EXP 58
7383: PUSH
7384: LD_INT 0
7386: ST_TO_ADDR
// if not def_builduptime then
7387: LD_EXP 14
7391: NOT
7392: IFFALSE 7396
// exit ;
7394: GO 7579
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
7396: LD_ADDR_EXP 58
7400: PUSH
7401: LD_INT 8400
7403: PUSH
7404: LD_INT 2100
7406: PUSH
7407: LD_EXP 14
7411: MUL
7412: PLUS
7413: ST_TO_ADDR
// BuildUpTimeActive := true ;
7414: LD_ADDR_EXP 57
7418: PUSH
7419: LD_INT 1
7421: ST_TO_ADDR
// for i := 1 to 8 do
7422: LD_ADDR_VAR 0 2
7426: PUSH
7427: DOUBLE
7428: LD_INT 1
7430: DEC
7431: ST_TO_ADDR
7432: LD_INT 8
7434: PUSH
7435: FOR_TO
7436: IFFALSE 7577
// if Side_Positions [ i ] then
7438: LD_EXP 34
7442: PUSH
7443: LD_VAR 0 2
7447: ARRAY
7448: IFFALSE 7575
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
7450: LD_EXP 56
7454: PUSH
7455: LD_EXP 34
7459: PUSH
7460: LD_VAR 0 2
7464: ARRAY
7465: ARRAY
7466: PPUSH
7467: LD_INT 5
7469: PPUSH
7470: CALL_OW 424
// for j := 1 to 8 do
7474: LD_ADDR_VAR 0 3
7478: PUSH
7479: DOUBLE
7480: LD_INT 1
7482: DEC
7483: ST_TO_ADDR
7484: LD_INT 8
7486: PUSH
7487: FOR_TO
7488: IFFALSE 7573
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
7490: LD_EXP 34
7494: PUSH
7495: LD_VAR 0 3
7499: ARRAY
7500: PUSH
7501: LD_EXP 32
7505: PUSH
7506: LD_VAR 0 2
7510: ARRAY
7511: PUSH
7512: LD_EXP 32
7516: PUSH
7517: LD_VAR 0 3
7521: ARRAY
7522: NONEQUAL
7523: PUSH
7524: LD_EXP 38
7528: NOT
7529: PUSH
7530: LD_VAR 0 2
7534: PUSH
7535: LD_VAR 0 3
7539: NONEQUAL
7540: AND
7541: OR
7542: AND
7543: IFFALSE 7571
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
7545: LD_VAR 0 3
7549: PPUSH
7550: LD_EXP 56
7554: PUSH
7555: LD_EXP 34
7559: PUSH
7560: LD_VAR 0 2
7564: ARRAY
7565: ARRAY
7566: PPUSH
7567: CALL_OW 333
7571: GO 7487
7573: POP
7574: POP
// end ;
7575: GO 7435
7577: POP
7578: POP
// end ;
7579: LD_VAR 0 1
7583: RET
// export function EndBuildUp ; var i , j ; begin
7584: LD_INT 0
7586: PPUSH
7587: PPUSH
7588: PPUSH
// BuildUpTimeActive := false ;
7589: LD_ADDR_EXP 57
7593: PUSH
7594: LD_INT 0
7596: ST_TO_ADDR
// for i := 1 to 8 do
7597: LD_ADDR_VAR 0 2
7601: PUSH
7602: DOUBLE
7603: LD_INT 1
7605: DEC
7606: ST_TO_ADDR
7607: LD_INT 8
7609: PUSH
7610: FOR_TO
7611: IFFALSE 7752
// if Side_Positions [ i ] then
7613: LD_EXP 34
7617: PUSH
7618: LD_VAR 0 2
7622: ARRAY
7623: IFFALSE 7750
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
7625: LD_EXP 56
7629: PUSH
7630: LD_EXP 34
7634: PUSH
7635: LD_VAR 0 2
7639: ARRAY
7640: ARRAY
7641: PPUSH
7642: LD_INT 0
7644: PPUSH
7645: CALL_OW 424
// for j := 1 to 8 do
7649: LD_ADDR_VAR 0 3
7653: PUSH
7654: DOUBLE
7655: LD_INT 1
7657: DEC
7658: ST_TO_ADDR
7659: LD_INT 8
7661: PUSH
7662: FOR_TO
7663: IFFALSE 7748
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
7665: LD_EXP 34
7669: PUSH
7670: LD_VAR 0 3
7674: ARRAY
7675: PUSH
7676: LD_EXP 32
7680: PUSH
7681: LD_VAR 0 2
7685: ARRAY
7686: PUSH
7687: LD_EXP 32
7691: PUSH
7692: LD_VAR 0 3
7696: ARRAY
7697: NONEQUAL
7698: PUSH
7699: LD_EXP 38
7703: NOT
7704: PUSH
7705: LD_VAR 0 2
7709: PUSH
7710: LD_VAR 0 3
7714: NONEQUAL
7715: AND
7716: OR
7717: AND
7718: IFFALSE 7746
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
7720: LD_VAR 0 3
7724: PPUSH
7725: LD_EXP 56
7729: PUSH
7730: LD_EXP 34
7734: PUSH
7735: LD_VAR 0 2
7739: ARRAY
7740: ARRAY
7741: PPUSH
7742: CALL_OW 334
7746: GO 7662
7748: POP
7749: POP
// end ;
7750: GO 7610
7752: POP
7753: POP
// end ;
7754: LD_VAR 0 1
7758: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
7759: LD_EXP 57
7763: IFFALSE 7938
7765: GO 7767
7767: DISABLE
7768: LD_INT 0
7770: PPUSH
7771: PPUSH
// begin for i := 1 to 8 do
7772: LD_ADDR_VAR 0 1
7776: PUSH
7777: DOUBLE
7778: LD_INT 1
7780: DEC
7781: ST_TO_ADDR
7782: LD_INT 8
7784: PUSH
7785: FOR_TO
7786: IFFALSE 7935
// if Side_Positions [ i ] then
7788: LD_EXP 34
7792: PUSH
7793: LD_VAR 0 1
7797: ARRAY
7798: IFFALSE 7933
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
7800: LD_ADDR_VAR 0 2
7804: PUSH
7805: LD_EXP 56
7809: PUSH
7810: LD_EXP 34
7814: PUSH
7815: LD_VAR 0 1
7819: ARRAY
7820: ARRAY
7821: PPUSH
7822: LD_INT 2
7824: PUSH
7825: LD_INT 21
7827: PUSH
7828: LD_INT 1
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: LD_INT 21
7837: PUSH
7838: LD_INT 2
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: LIST
7849: PUSH
7850: LD_INT 22
7852: PUSH
7853: LD_OWVAR 2
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: PPUSH
7866: CALL_OW 70
7870: PUSH
7871: FOR_IN
7872: IFFALSE 7931
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
7874: LD_EXP 32
7878: PUSH
7879: LD_VAR 0 1
7883: ARRAY
7884: PUSH
7885: LD_EXP 32
7889: PUSH
7890: LD_OWVAR 2
7894: ARRAY
7895: NONEQUAL
7896: PUSH
7897: LD_EXP 38
7901: NOT
7902: PUSH
7903: LD_VAR 0 1
7907: PUSH
7908: LD_OWVAR 2
7912: NONEQUAL
7913: AND
7914: OR
7915: IFFALSE 7929
// ComMoveToArea ( un , BuildUpEscape ) ;
7917: LD_VAR 0 2
7921: PPUSH
7922: LD_INT 16
7924: PPUSH
7925: CALL_OW 113
7929: GO 7871
7931: POP
7932: POP
7933: GO 7785
7935: POP
7936: POP
// enable ;
7937: ENABLE
// end ;
7938: PPOPN 2
7940: END
// every 0 0$1 trigger def_builduptime do
7941: LD_EXP 14
7945: IFFALSE 7971
7947: GO 7949
7949: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
7950: LD_INT 8400
7952: PUSH
7953: LD_EXP 14
7957: PUSH
7958: LD_INT 2100
7960: MUL
7961: PLUS
7962: PPUSH
7963: CALL_OW 67
// EndBuildUp ;
7967: CALL 7584 0 0
// end ; end_of_file
7971: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
7972: LD_INT 0
7974: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
7975: LD_VAR 0 1
7979: PPUSH
7980: CALL_OW 255
7984: PUSH
7985: LD_VAR 0 4
7989: EQUAL
7990: IFFALSE 8009
// begin SetAchievement ( ACH_RAD ) ;
7992: LD_STRING ACH_RAD
7994: PPUSH
7995: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
7999: LD_STRING ACH_NL
8001: PPUSH
8002: LD_INT 1
8004: PPUSH
8005: CALL_OW 564
// end end ;
8009: LD_VAR 0 5
8013: RET
// export function SA_Win ( side ) ; begin
8014: LD_INT 0
8016: PPUSH
// case side of 1 :
8017: LD_VAR 0 1
8021: PUSH
8022: LD_INT 1
8024: DOUBLE
8025: EQUAL
8026: IFTRUE 8030
8028: GO 8043
8030: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
8031: LD_STRING ACH_AH
8033: PPUSH
8034: LD_INT 1
8036: PPUSH
8037: CALL_OW 564
8041: GO 8206
8043: LD_INT 2
8045: DOUBLE
8046: EQUAL
8047: IFTRUE 8051
8049: GO 8064
8051: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
8052: LD_STRING ACH_E
8054: PPUSH
8055: LD_INT 1
8057: PPUSH
8058: CALL_OW 564
8062: GO 8206
8064: LD_INT 3
8066: DOUBLE
8067: EQUAL
8068: IFTRUE 8072
8070: GO 8085
8072: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
8073: LD_STRING ACH_OOL
8075: PPUSH
8076: LD_INT 1
8078: PPUSH
8079: CALL_OW 564
8083: GO 8206
8085: LD_INT 1
8087: PUSH
8088: LD_INT 2
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: DOUBLE
8095: EQUAL
8096: IFTRUE 8100
8098: GO 8125
8100: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8101: LD_STRING ACH_AH
8103: PPUSH
8104: LD_REAL  5.00000000000000E-0001
8107: PPUSH
8108: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8112: LD_STRING ACH_E
8114: PPUSH
8115: LD_REAL  5.00000000000000E-0001
8118: PPUSH
8119: CALL_OW 564
// end ; [ 2 , 3 ] :
8123: GO 8206
8125: LD_INT 2
8127: PUSH
8128: LD_INT 3
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: DOUBLE
8135: EQUAL
8136: IFTRUE 8140
8138: GO 8165
8140: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
8141: LD_STRING ACH_OOL
8143: PPUSH
8144: LD_REAL  5.00000000000000E-0001
8147: PPUSH
8148: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8152: LD_STRING ACH_E
8154: PPUSH
8155: LD_REAL  5.00000000000000E-0001
8158: PPUSH
8159: CALL_OW 564
// end ; [ 3 , 1 ] :
8163: GO 8206
8165: LD_INT 3
8167: PUSH
8168: LD_INT 1
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: DOUBLE
8175: EQUAL
8176: IFTRUE 8180
8178: GO 8205
8180: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8181: LD_STRING ACH_AH
8183: PPUSH
8184: LD_REAL  5.00000000000000E-0001
8187: PPUSH
8188: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
8192: LD_STRING ACH_OOL
8194: PPUSH
8195: LD_REAL  5.00000000000000E-0001
8198: PPUSH
8199: CALL_OW 564
// end ; end ;
8203: GO 8206
8205: POP
// end ; end_of_file
8206: LD_VAR 0 2
8210: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
8211: LD_INT 0
8213: PPUSH
8214: PPUSH
// enable ( 98 ) ;
8215: LD_INT 98
8217: ENABLE_MARKED
// GameEnded = false ;
8218: LD_ADDR_LOC 9
8222: PUSH
8223: LD_INT 0
8225: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8226: LD_ADDR_LOC 8
8230: PUSH
8231: LD_INT 0
8233: PUSH
8234: LD_INT 0
8236: PUSH
8237: LD_INT 0
8239: PUSH
8240: LD_INT 0
8242: PUSH
8243: LD_INT 0
8245: PUSH
8246: LD_INT 0
8248: PUSH
8249: LD_INT 0
8251: PUSH
8252: LD_INT 0
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: ST_TO_ADDR
// unfoged = false ;
8265: LD_ADDR_LOC 10
8269: PUSH
8270: LD_INT 0
8272: ST_TO_ADDR
// for i = 1 to side_positions do
8273: LD_ADDR_VAR 0 2
8277: PUSH
8278: DOUBLE
8279: LD_INT 1
8281: DEC
8282: ST_TO_ADDR
8283: LD_EXP 34
8287: PUSH
8288: FOR_TO
8289: IFFALSE 8329
// if not side_positions [ i ] then
8291: LD_EXP 34
8295: PUSH
8296: LD_VAR 0 2
8300: ARRAY
8301: NOT
8302: IFFALSE 8327
// defaited = replace ( defaited , i , true ) ;
8304: LD_ADDR_LOC 8
8308: PUSH
8309: LD_LOC 8
8313: PPUSH
8314: LD_VAR 0 2
8318: PPUSH
8319: LD_INT 1
8321: PPUSH
8322: CALL_OW 1
8326: ST_TO_ADDR
8327: GO 8288
8329: POP
8330: POP
// end ;
8331: LD_VAR 0 1
8335: RET
// function CanWinLoose ; begin
8336: LD_INT 0
8338: PPUSH
// Result := true ;
8339: LD_ADDR_VAR 0 1
8343: PUSH
8344: LD_INT 1
8346: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8347: CALL_OW 518
8351: PUSH
8352: CALL_OW 519
8356: PUSH
8357: LD_INT 0
8359: GREATER
8360: AND
8361: IFFALSE 8371
// Result := false ;
8363: LD_ADDR_VAR 0 1
8367: PUSH
8368: LD_INT 0
8370: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8371: CALL_OW 531
8375: PUSH
8376: CALL_OW 519
8380: PUSH
8381: LD_INT 1
8383: GREATER
8384: AND
8385: IFFALSE 8395
// Result := false ;
8387: LD_ADDR_VAR 0 1
8391: PUSH
8392: LD_INT 0
8394: ST_TO_ADDR
// end ;
8395: LD_VAR 0 1
8399: RET
// export function HasPower ( i ) ; var k , h ; begin
8400: LD_INT 0
8402: PPUSH
8403: PPUSH
8404: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
8405: LD_VAR 0 1
8409: PPUSH
8410: CALL_OW 108
8414: NOT
8415: PUSH
8416: LD_EXP 39
8420: PUSH
8421: LD_VAR 0 1
8425: ARRAY
8426: NOT
8427: AND
8428: PUSH
8429: LD_OWVAR 4
8433: AND
8434: IFFALSE 8446
// begin result = false ;
8436: LD_ADDR_VAR 0 2
8440: PUSH
8441: LD_INT 0
8443: ST_TO_ADDR
// end else
8444: GO 8741
// case def_win_rules of 0 :
8446: LD_EXP 27
8450: PUSH
8451: LD_INT 0
8453: DOUBLE
8454: EQUAL
8455: IFTRUE 8459
8457: GO 8622
8459: POP
// if def_people_respawning then
8460: LD_EXP 12
8464: IFFALSE 8555
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8466: LD_ADDR_VAR 0 2
8470: PUSH
8471: LD_INT 22
8473: PUSH
8474: LD_VAR 0 1
8478: PUSH
8479: EMPTY
8480: LIST
8481: LIST
8482: PUSH
8483: LD_INT 2
8485: PUSH
8486: LD_INT 21
8488: PUSH
8489: LD_INT 1
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: PUSH
8496: LD_INT 33
8498: PUSH
8499: LD_INT 3
8501: PUSH
8502: EMPTY
8503: LIST
8504: LIST
8505: PUSH
8506: LD_INT 33
8508: PUSH
8509: LD_INT 5
8511: PUSH
8512: EMPTY
8513: LIST
8514: LIST
8515: PUSH
8516: LD_INT 30
8518: PUSH
8519: LD_INT 0
8521: PUSH
8522: EMPTY
8523: LIST
8524: LIST
8525: PUSH
8526: LD_INT 30
8528: PUSH
8529: LD_INT 1
8531: PUSH
8532: EMPTY
8533: LIST
8534: LIST
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: PPUSH
8548: CALL_OW 69
8552: ST_TO_ADDR
8553: GO 8620
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
8555: LD_ADDR_VAR 0 2
8559: PUSH
8560: LD_INT 22
8562: PUSH
8563: LD_VAR 0 1
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: PUSH
8572: LD_INT 2
8574: PUSH
8575: LD_INT 21
8577: PUSH
8578: LD_INT 1
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: PUSH
8585: LD_INT 33
8587: PUSH
8588: LD_INT 3
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: PUSH
8595: LD_INT 33
8597: PUSH
8598: LD_INT 5
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: LIST
8609: LIST
8610: PUSH
8611: EMPTY
8612: LIST
8613: LIST
8614: PPUSH
8615: CALL_OW 69
8619: ST_TO_ADDR
8620: GO 8741
8622: LD_INT 1
8624: DOUBLE
8625: EQUAL
8626: IFTRUE 8630
8628: GO 8669
8630: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
8631: LD_ADDR_VAR 0 2
8635: PUSH
8636: LD_INT 22
8638: PUSH
8639: LD_VAR 0 1
8643: PUSH
8644: EMPTY
8645: LIST
8646: LIST
8647: PUSH
8648: LD_INT 21
8650: PUSH
8651: LD_INT 1
8653: PUSH
8654: EMPTY
8655: LIST
8656: LIST
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: PPUSH
8662: CALL_OW 69
8666: ST_TO_ADDR
8667: GO 8741
8669: LD_INT 2
8671: DOUBLE
8672: EQUAL
8673: IFTRUE 8677
8675: GO 8740
8677: POP
// begin h = false ;
8678: LD_ADDR_VAR 0 4
8682: PUSH
8683: LD_INT 0
8685: ST_TO_ADDR
// for k in heroes [ i ] do
8686: LD_ADDR_VAR 0 3
8690: PUSH
8691: LD_EXP 43
8695: PUSH
8696: LD_VAR 0 1
8700: ARRAY
8701: PUSH
8702: FOR_IN
8703: IFFALSE 8726
// if IsLive ( k ) then
8705: LD_VAR 0 3
8709: PPUSH
8710: CALL_OW 300
8714: IFFALSE 8724
// h = true ;
8716: LD_ADDR_VAR 0 4
8720: PUSH
8721: LD_INT 1
8723: ST_TO_ADDR
8724: GO 8702
8726: POP
8727: POP
// Result := h ;
8728: LD_ADDR_VAR 0 2
8732: PUSH
8733: LD_VAR 0 4
8737: ST_TO_ADDR
// end ; end ;
8738: GO 8741
8740: POP
// end ;
8741: LD_VAR 0 2
8745: RET
// function AlliedSides ( i , j ) ; begin
8746: LD_INT 0
8748: PPUSH
// Result := false ;
8749: LD_ADDR_VAR 0 3
8753: PUSH
8754: LD_INT 0
8756: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8757: LD_VAR 0 1
8761: PPUSH
8762: LD_VAR 0 2
8766: PPUSH
8767: CALL_OW 81
8771: PUSH
8772: LD_INT 1
8774: EQUAL
8775: PUSH
8776: LD_VAR 0 2
8780: PPUSH
8781: LD_VAR 0 1
8785: PPUSH
8786: CALL_OW 81
8790: PUSH
8791: LD_INT 1
8793: EQUAL
8794: AND
8795: PUSH
8796: LD_VAR 0 1
8800: PPUSH
8801: CALL_OW 83
8805: AND
8806: PUSH
8807: LD_VAR 0 2
8811: PPUSH
8812: CALL_OW 83
8816: AND
8817: IFFALSE 8827
// Result := true ;
8819: LD_ADDR_VAR 0 3
8823: PUSH
8824: LD_INT 1
8826: ST_TO_ADDR
// end ;
8827: LD_VAR 0 3
8831: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
8832: CALL 8336 0 0
8836: PUSH
8837: LD_LOC 9
8841: NOT
8842: AND
8843: IFFALSE 8859
8845: GO 8847
8847: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
8848: LD_ADDR_EXP 55
8852: PUSH
8853: LD_STRING #Player-Ended
8855: PUSH
8856: EMPTY
8857: LIST
8858: ST_TO_ADDR
8859: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
8860: CALL 8336 0 0
8864: PUSH
8865: LD_LOC 9
8869: AND
8870: IFFALSE 8879
8872: GO 8874
8874: DISABLE
// YouLostInMultiplayer ;
8875: CALL_OW 107
8879: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
8880: CALL 8336 0 0
8884: NOT
8885: PUSH
8886: CALL_OW 531
8890: NOT
8891: AND
8892: IFFALSE 8908
8894: GO 8896
8896: DISABLE
// WaitServerStrings = [ #server-wait ] ;
8897: LD_ADDR_EXP 55
8901: PUSH
8902: LD_STRING #server-wait
8904: PUSH
8905: EMPTY
8906: LIST
8907: ST_TO_ADDR
8908: END
// every 100 trigger IAmSpec do
8909: CALL_OW 531
8913: IFFALSE 8929
8915: GO 8917
8917: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
8918: LD_ADDR_EXP 55
8922: PUSH
8923: LD_STRING #Player-IAmSpec
8925: PUSH
8926: EMPTY
8927: LIST
8928: ST_TO_ADDR
8929: END
// every 100 trigger GameEnded and IAmSpec do
8930: LD_LOC 9
8934: PUSH
8935: CALL_OW 531
8939: AND
8940: IFFALSE 8949
8942: GO 8944
8944: DISABLE
// YouLostInMultiplayer ;
8945: CALL_OW 107
8949: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
8950: CALL 8336 0 0
8954: PUSH
8955: LD_LOC 9
8959: NOT
8960: AND
8961: IFFALSE 8977
8963: GO 8965
8965: DISABLE
// WaitServerStrings = [ $player-win ] ;
8966: LD_ADDR_EXP 55
8970: PUSH
8971: LD_STRING $player-win
8973: PUSH
8974: EMPTY
8975: LIST
8976: ST_TO_ADDR
8977: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
8978: CALL 8336 0 0
8982: PUSH
8983: LD_LOC 9
8987: AND
8988: IFFALSE 9012
8990: GO 8992
8992: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
8993: LD_EXP 35
8997: PUSH
8998: LD_OWVAR 2
9002: ARRAY
9003: PPUSH
9004: CALL 8014 0 1
// YouWinInMultiplayer ;
9008: CALL_OW 106
// end ;
9012: END
// every 100 trigger isEditor marked 401 do
9013: LD_OWVAR 84
9017: IFFALSE 9033
9019: GO 9021
9021: DISABLE
// Debug_Strings = [ You won ] ;
9022: LD_ADDR_OWVAR 48
9026: PUSH
9027: LD_STRING You won
9029: PUSH
9030: EMPTY
9031: LIST
9032: ST_TO_ADDR
9033: END
// every 100 trigger isEditor marked 400 do
9034: LD_OWVAR 84
9038: IFFALSE 9054
9040: GO 9042
9042: DISABLE
// Debug_Strings = [ You loss ] ;
9043: LD_ADDR_OWVAR 48
9047: PUSH
9048: LD_STRING You loss
9050: PUSH
9051: EMPTY
9052: LIST
9053: ST_TO_ADDR
9054: END
// every 100 marked 98 do var i , un ;
9055: GO 9057
9057: DISABLE
9058: LD_INT 0
9060: PPUSH
9061: PPUSH
// begin for i = 1 to side_positions do
9062: LD_ADDR_VAR 0 1
9066: PUSH
9067: DOUBLE
9068: LD_INT 1
9070: DEC
9071: ST_TO_ADDR
9072: LD_EXP 34
9076: PUSH
9077: FOR_TO
9078: IFFALSE 9161
// if side_positions [ i ] then
9080: LD_EXP 34
9084: PUSH
9085: LD_VAR 0 1
9089: ARRAY
9090: IFFALSE 9159
// if not HasPower ( i ) and not Defaited [ i ] then
9092: LD_VAR 0 1
9096: PPUSH
9097: CALL 8400 0 1
9101: NOT
9102: PUSH
9103: LD_LOC 8
9107: PUSH
9108: LD_VAR 0 1
9112: ARRAY
9113: NOT
9114: AND
9115: IFFALSE 9159
// begin Defaited = replace ( Defaited , i , true ) ;
9117: LD_ADDR_LOC 8
9121: PUSH
9122: LD_LOC 8
9126: PPUSH
9127: LD_VAR 0 1
9131: PPUSH
9132: LD_INT 1
9134: PPUSH
9135: CALL_OW 1
9139: ST_TO_ADDR
// if i = your_side then
9140: LD_VAR 0 1
9144: PUSH
9145: LD_OWVAR 2
9149: EQUAL
9150: IFFALSE 9159
// begin Multiplayer_Loose_Message ;
9152: CALL_OW 521
// enable ( 400 ) ;
9156: LD_INT 400
9158: ENABLE_MARKED
// end ; end ;
9159: GO 9077
9161: POP
9162: POP
// if not Unfoged and defaited [ your_side ] then
9163: LD_LOC 10
9167: NOT
9168: PUSH
9169: LD_LOC 8
9173: PUSH
9174: LD_OWVAR 2
9178: ARRAY
9179: AND
9180: IFFALSE 9186
// Unfog ;
9182: CALL 9362 0 0
// DidGameEnd ;
9186: CALL 9201 0 0
// if not GameEnded then
9190: LD_LOC 9
9194: NOT
9195: IFFALSE 9198
// enable ;
9197: ENABLE
// end ;
9198: PPOPN 2
9200: END
// function DidGameEnd ; var i , k , enemy ; begin
9201: LD_INT 0
9203: PPUSH
9204: PPUSH
9205: PPUSH
9206: PPUSH
// enemy = [ ] ;
9207: LD_ADDR_VAR 0 4
9211: PUSH
9212: EMPTY
9213: ST_TO_ADDR
// for i = 1 to side_positions do
9214: LD_ADDR_VAR 0 2
9218: PUSH
9219: DOUBLE
9220: LD_INT 1
9222: DEC
9223: ST_TO_ADDR
9224: LD_EXP 34
9228: PUSH
9229: FOR_TO
9230: IFFALSE 9324
// if not defaited [ i ] then
9232: LD_LOC 8
9236: PUSH
9237: LD_VAR 0 2
9241: ARRAY
9242: NOT
9243: IFFALSE 9322
// for k = 1 to side_positions do
9245: LD_ADDR_VAR 0 3
9249: PUSH
9250: DOUBLE
9251: LD_INT 1
9253: DEC
9254: ST_TO_ADDR
9255: LD_EXP 34
9259: PUSH
9260: FOR_TO
9261: IFFALSE 9320
// if not defaited [ k ] then
9263: LD_LOC 8
9267: PUSH
9268: LD_VAR 0 3
9272: ARRAY
9273: NOT
9274: IFFALSE 9318
// if not AlliedSides ( i , k ) then
9276: LD_VAR 0 2
9280: PPUSH
9281: LD_VAR 0 3
9285: PPUSH
9286: CALL 8746 0 2
9290: NOT
9291: IFFALSE 9318
// enemy = enemy ^ [ i , k ] ;
9293: LD_ADDR_VAR 0 4
9297: PUSH
9298: LD_VAR 0 4
9302: PUSH
9303: LD_VAR 0 2
9307: PUSH
9308: LD_VAR 0 3
9312: PUSH
9313: EMPTY
9314: LIST
9315: LIST
9316: ADD
9317: ST_TO_ADDR
9318: GO 9260
9320: POP
9321: POP
9322: GO 9229
9324: POP
9325: POP
// if not enemy then
9326: LD_VAR 0 4
9330: NOT
9331: IFFALSE 9357
// begin GameEnded = true ;
9333: LD_ADDR_LOC 9
9337: PUSH
9338: LD_INT 1
9340: ST_TO_ADDR
// if not defaited [ your_side ] then
9341: LD_LOC 8
9345: PUSH
9346: LD_OWVAR 2
9350: ARRAY
9351: NOT
9352: IFFALSE 9357
// enable ( 401 ) ;
9354: LD_INT 401
9356: ENABLE_MARKED
// end ; end ;
9357: LD_VAR 0 1
9361: RET
// function unfog ; var k , friends ; begin
9362: LD_INT 0
9364: PPUSH
9365: PPUSH
9366: PPUSH
// SetPlayerSpectator ( ) ;
9367: CALL_OW 572
// unfoged = true ;
9371: LD_ADDR_LOC 10
9375: PUSH
9376: LD_INT 1
9378: ST_TO_ADDR
// end ;
9379: LD_VAR 0 1
9383: RET
// export function MakeGameEnd ; begin
9384: LD_INT 0
9386: PPUSH
// SetPlayerSpectator ( ) ;
9387: CALL_OW 572
// unfoged = true ;
9391: LD_ADDR_LOC 10
9395: PUSH
9396: LD_INT 1
9398: ST_TO_ADDR
// wait ( 0 0$5 ) ;
9399: LD_INT 175
9401: PPUSH
9402: CALL_OW 67
// GameEnded = true ;
9406: LD_ADDR_LOC 9
9410: PUSH
9411: LD_INT 1
9413: ST_TO_ADDR
// end ;
9414: LD_VAR 0 1
9418: RET
// export function GetGameEnded ; begin
9419: LD_INT 0
9421: PPUSH
// result = GameEnded ;
9422: LD_ADDR_VAR 0 1
9426: PUSH
9427: LD_LOC 9
9431: ST_TO_ADDR
// end ; end_of_file
9432: LD_VAR 0 1
9436: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9437: LD_INT 0
9439: PPUSH
9440: PPUSH
9441: PPUSH
// for side = 1 to 8 do
9442: LD_ADDR_VAR 0 2
9446: PUSH
9447: DOUBLE
9448: LD_INT 1
9450: DEC
9451: ST_TO_ADDR
9452: LD_INT 8
9454: PUSH
9455: FOR_TO
9456: IFFALSE 9577
// begin for i = 1 to 72 do
9458: LD_ADDR_VAR 0 3
9462: PUSH
9463: DOUBLE
9464: LD_INT 1
9466: DEC
9467: ST_TO_ADDR
9468: LD_INT 72
9470: PUSH
9471: FOR_TO
9472: IFFALSE 9503
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9474: LD_VAR 0 3
9478: PPUSH
9479: LD_VAR 0 2
9483: PPUSH
9484: LD_INT 0
9486: PPUSH
9487: LD_VAR 0 3
9491: PPUSH
9492: CALL_OW 565
9496: PPUSH
9497: CALL_OW 322
9501: GO 9471
9503: POP
9504: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9505: LD_INT 73
9507: PPUSH
9508: LD_VAR 0 2
9512: PPUSH
9513: LD_INT 0
9515: PPUSH
9516: LD_INT 25
9518: PPUSH
9519: CALL_OW 565
9523: PPUSH
9524: CALL_OW 322
// for i = 0 to 40 do
9528: LD_ADDR_VAR 0 3
9532: PUSH
9533: DOUBLE
9534: LD_INT 0
9536: DEC
9537: ST_TO_ADDR
9538: LD_INT 40
9540: PUSH
9541: FOR_TO
9542: IFFALSE 9573
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9544: LD_VAR 0 3
9548: PPUSH
9549: LD_VAR 0 2
9553: PPUSH
9554: LD_INT 1
9556: PPUSH
9557: LD_VAR 0 3
9561: PPUSH
9562: CALL_OW 565
9566: PPUSH
9567: CALL_OW 324
9571: GO 9541
9573: POP
9574: POP
// end ;
9575: GO 9455
9577: POP
9578: POP
// end ;
9579: LD_VAR 0 1
9583: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9584: LD_INT 0
9586: PPUSH
9587: PPUSH
9588: PPUSH
// for side = 1 to 8 do
9589: LD_ADDR_VAR 0 3
9593: PUSH
9594: DOUBLE
9595: LD_INT 1
9597: DEC
9598: ST_TO_ADDR
9599: LD_INT 8
9601: PUSH
9602: FOR_TO
9603: IFFALSE 13599
// begin for i = 1 to 73 do
9605: LD_ADDR_VAR 0 4
9609: PUSH
9610: DOUBLE
9611: LD_INT 1
9613: DEC
9614: ST_TO_ADDR
9615: LD_INT 73
9617: PUSH
9618: FOR_TO
9619: IFFALSE 9640
// SetTech ( i , side , state_disabled ) ;
9621: LD_VAR 0 4
9625: PPUSH
9626: LD_VAR 0 3
9630: PPUSH
9631: LD_INT 0
9633: PPUSH
9634: CALL_OW 322
9638: GO 9618
9640: POP
9641: POP
// for i = 0 to 40 do
9642: LD_ADDR_VAR 0 4
9646: PUSH
9647: DOUBLE
9648: LD_INT 0
9650: DEC
9651: ST_TO_ADDR
9652: LD_INT 40
9654: PUSH
9655: FOR_TO
9656: IFFALSE 9677
// SetRestrict ( i , side , false ) ;
9658: LD_VAR 0 4
9662: PPUSH
9663: LD_VAR 0 3
9667: PPUSH
9668: LD_INT 0
9670: PPUSH
9671: CALL_OW 324
9675: GO 9655
9677: POP
9678: POP
// case level of 1 :
9679: LD_VAR 0 1
9683: PUSH
9684: LD_INT 1
9686: DOUBLE
9687: EQUAL
9688: IFTRUE 9692
9690: GO 9845
9692: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9693: LD_INT 35
9695: PPUSH
9696: LD_VAR 0 3
9700: PPUSH
9701: LD_INT 1
9703: PPUSH
9704: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9708: LD_INT 45
9710: PPUSH
9711: LD_VAR 0 3
9715: PPUSH
9716: LD_INT 1
9718: PPUSH
9719: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9723: LD_INT 46
9725: PPUSH
9726: LD_VAR 0 3
9730: PPUSH
9731: LD_INT 1
9733: PPUSH
9734: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9738: LD_INT 47
9740: PPUSH
9741: LD_VAR 0 3
9745: PPUSH
9746: LD_INT 1
9748: PPUSH
9749: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9753: LD_INT 0
9755: PPUSH
9756: LD_VAR 0 3
9760: PPUSH
9761: LD_INT 1
9763: PPUSH
9764: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9768: LD_INT 2
9770: PPUSH
9771: LD_VAR 0 3
9775: PPUSH
9776: LD_INT 1
9778: PPUSH
9779: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9783: LD_INT 4
9785: PPUSH
9786: LD_VAR 0 3
9790: PPUSH
9791: LD_INT 1
9793: PPUSH
9794: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9798: LD_INT 6
9800: PPUSH
9801: LD_VAR 0 3
9805: PPUSH
9806: LD_INT 1
9808: PPUSH
9809: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9813: LD_INT 29
9815: PPUSH
9816: LD_VAR 0 3
9820: PPUSH
9821: LD_INT 1
9823: PPUSH
9824: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9828: LD_INT 31
9830: PPUSH
9831: LD_VAR 0 3
9835: PPUSH
9836: LD_INT 1
9838: PPUSH
9839: CALL_OW 324
// end ; 2 :
9843: GO 13597
9845: LD_INT 2
9847: DOUBLE
9848: EQUAL
9849: IFTRUE 9853
9851: GO 10051
9853: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9854: LD_INT 35
9856: PPUSH
9857: LD_VAR 0 3
9861: PPUSH
9862: LD_INT 1
9864: PPUSH
9865: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9869: LD_INT 45
9871: PPUSH
9872: LD_VAR 0 3
9876: PPUSH
9877: LD_INT 1
9879: PPUSH
9880: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9884: LD_INT 46
9886: PPUSH
9887: LD_VAR 0 3
9891: PPUSH
9892: LD_INT 1
9894: PPUSH
9895: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9899: LD_INT 47
9901: PPUSH
9902: LD_VAR 0 3
9906: PPUSH
9907: LD_INT 1
9909: PPUSH
9910: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9914: LD_INT 1
9916: PPUSH
9917: LD_VAR 0 3
9921: PPUSH
9922: LD_INT 1
9924: PPUSH
9925: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9929: LD_INT 2
9931: PPUSH
9932: LD_VAR 0 3
9936: PPUSH
9937: LD_INT 1
9939: PPUSH
9940: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9944: LD_INT 11
9946: PPUSH
9947: LD_VAR 0 3
9951: PPUSH
9952: LD_INT 1
9954: PPUSH
9955: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9959: LD_INT 0
9961: PPUSH
9962: LD_VAR 0 3
9966: PPUSH
9967: LD_INT 1
9969: PPUSH
9970: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9974: LD_INT 2
9976: PPUSH
9977: LD_VAR 0 3
9981: PPUSH
9982: LD_INT 1
9984: PPUSH
9985: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9989: LD_INT 4
9991: PPUSH
9992: LD_VAR 0 3
9996: PPUSH
9997: LD_INT 1
9999: PPUSH
10000: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10004: LD_INT 6
10006: PPUSH
10007: LD_VAR 0 3
10011: PPUSH
10012: LD_INT 1
10014: PPUSH
10015: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10019: LD_INT 29
10021: PPUSH
10022: LD_VAR 0 3
10026: PPUSH
10027: LD_INT 1
10029: PPUSH
10030: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10034: LD_INT 31
10036: PPUSH
10037: LD_VAR 0 3
10041: PPUSH
10042: LD_INT 1
10044: PPUSH
10045: CALL_OW 324
// end ; 3 :
10049: GO 13597
10051: LD_INT 3
10053: DOUBLE
10054: EQUAL
10055: IFTRUE 10059
10057: GO 10512
10059: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10060: LD_INT 35
10062: PPUSH
10063: LD_VAR 0 3
10067: PPUSH
10068: LD_INT 1
10070: PPUSH
10071: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10075: LD_INT 45
10077: PPUSH
10078: LD_VAR 0 3
10082: PPUSH
10083: LD_INT 1
10085: PPUSH
10086: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10090: LD_INT 46
10092: PPUSH
10093: LD_VAR 0 3
10097: PPUSH
10098: LD_INT 1
10100: PPUSH
10101: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10105: LD_INT 47
10107: PPUSH
10108: LD_VAR 0 3
10112: PPUSH
10113: LD_INT 1
10115: PPUSH
10116: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10120: LD_INT 1
10122: PPUSH
10123: LD_VAR 0 3
10127: PPUSH
10128: LD_INT 1
10130: PPUSH
10131: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10135: LD_INT 2
10137: PPUSH
10138: LD_VAR 0 3
10142: PPUSH
10143: LD_INT 1
10145: PPUSH
10146: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10150: LD_INT 11
10152: PPUSH
10153: LD_VAR 0 3
10157: PPUSH
10158: LD_INT 1
10160: PPUSH
10161: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10165: LD_INT 48
10167: PPUSH
10168: LD_VAR 0 3
10172: PPUSH
10173: LD_INT 1
10175: PPUSH
10176: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10180: LD_INT 69
10182: PPUSH
10183: LD_VAR 0 3
10187: PPUSH
10188: LD_INT 1
10190: PPUSH
10191: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10195: LD_INT 39
10197: PPUSH
10198: LD_VAR 0 3
10202: PPUSH
10203: LD_INT 1
10205: PPUSH
10206: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10210: LD_INT 43
10212: PPUSH
10213: LD_VAR 0 3
10217: PPUSH
10218: LD_INT 1
10220: PPUSH
10221: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10225: LD_INT 51
10227: PPUSH
10228: LD_VAR 0 3
10232: PPUSH
10233: LD_INT 1
10235: PPUSH
10236: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10240: LD_INT 6
10242: PPUSH
10243: LD_VAR 0 3
10247: PPUSH
10248: LD_INT 1
10250: PPUSH
10251: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10255: LD_INT 0
10257: PPUSH
10258: LD_VAR 0 3
10262: PPUSH
10263: LD_INT 1
10265: PPUSH
10266: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10270: LD_INT 2
10272: PPUSH
10273: LD_VAR 0 3
10277: PPUSH
10278: LD_INT 1
10280: PPUSH
10281: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10285: LD_INT 3
10287: PPUSH
10288: LD_VAR 0 3
10292: PPUSH
10293: LD_INT 1
10295: PPUSH
10296: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10300: LD_INT 4
10302: PPUSH
10303: LD_VAR 0 3
10307: PPUSH
10308: LD_INT 1
10310: PPUSH
10311: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10315: LD_INT 6
10317: PPUSH
10318: LD_VAR 0 3
10322: PPUSH
10323: LD_INT 1
10325: PPUSH
10326: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10330: LD_INT 7
10332: PPUSH
10333: LD_VAR 0 3
10337: PPUSH
10338: LD_INT 1
10340: PPUSH
10341: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10345: LD_INT 8
10347: PPUSH
10348: LD_VAR 0 3
10352: PPUSH
10353: LD_INT 1
10355: PPUSH
10356: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10360: LD_INT 10
10362: PPUSH
10363: LD_VAR 0 3
10367: PPUSH
10368: LD_INT 1
10370: PPUSH
10371: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10375: LD_INT 15
10377: PPUSH
10378: LD_VAR 0 3
10382: PPUSH
10383: LD_INT 1
10385: PPUSH
10386: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10390: LD_INT 16
10392: PPUSH
10393: LD_VAR 0 3
10397: PPUSH
10398: LD_INT 1
10400: PPUSH
10401: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10405: LD_INT 17
10407: PPUSH
10408: LD_VAR 0 3
10412: PPUSH
10413: LD_INT 1
10415: PPUSH
10416: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10420: LD_INT 20
10422: PPUSH
10423: LD_VAR 0 3
10427: PPUSH
10428: LD_INT 1
10430: PPUSH
10431: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10435: LD_INT 26
10437: PPUSH
10438: LD_VAR 0 3
10442: PPUSH
10443: LD_INT 1
10445: PPUSH
10446: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10450: LD_INT 27
10452: PPUSH
10453: LD_VAR 0 3
10457: PPUSH
10458: LD_INT 1
10460: PPUSH
10461: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10465: LD_INT 29
10467: PPUSH
10468: LD_VAR 0 3
10472: PPUSH
10473: LD_INT 1
10475: PPUSH
10476: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10480: LD_INT 31
10482: PPUSH
10483: LD_VAR 0 3
10487: PPUSH
10488: LD_INT 1
10490: PPUSH
10491: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10495: LD_INT 32
10497: PPUSH
10498: LD_VAR 0 3
10502: PPUSH
10503: LD_INT 1
10505: PPUSH
10506: CALL_OW 324
// end ; 4 :
10510: GO 13597
10512: LD_INT 4
10514: DOUBLE
10515: EQUAL
10516: IFTRUE 10520
10518: GO 11468
10520: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10521: LD_INT 35
10523: PPUSH
10524: LD_VAR 0 3
10528: PPUSH
10529: LD_INT 1
10531: PPUSH
10532: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10536: LD_INT 45
10538: PPUSH
10539: LD_VAR 0 3
10543: PPUSH
10544: LD_INT 1
10546: PPUSH
10547: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10551: LD_INT 46
10553: PPUSH
10554: LD_VAR 0 3
10558: PPUSH
10559: LD_INT 1
10561: PPUSH
10562: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10566: LD_INT 47
10568: PPUSH
10569: LD_VAR 0 3
10573: PPUSH
10574: LD_INT 1
10576: PPUSH
10577: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10581: LD_INT 1
10583: PPUSH
10584: LD_VAR 0 3
10588: PPUSH
10589: LD_INT 1
10591: PPUSH
10592: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10596: LD_INT 2
10598: PPUSH
10599: LD_VAR 0 3
10603: PPUSH
10604: LD_INT 1
10606: PPUSH
10607: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10611: LD_INT 11
10613: PPUSH
10614: LD_VAR 0 3
10618: PPUSH
10619: LD_INT 1
10621: PPUSH
10622: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10626: LD_INT 20
10628: PPUSH
10629: LD_VAR 0 3
10633: PPUSH
10634: LD_INT 1
10636: PPUSH
10637: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10641: LD_INT 48
10643: PPUSH
10644: LD_VAR 0 3
10648: PPUSH
10649: LD_INT 1
10651: PPUSH
10652: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10656: LD_INT 49
10658: PPUSH
10659: LD_VAR 0 3
10663: PPUSH
10664: LD_INT 1
10666: PPUSH
10667: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10671: LD_INT 69
10673: PPUSH
10674: LD_VAR 0 3
10678: PPUSH
10679: LD_INT 1
10681: PPUSH
10682: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10686: LD_INT 39
10688: PPUSH
10689: LD_VAR 0 3
10693: PPUSH
10694: LD_INT 1
10696: PPUSH
10697: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10701: LD_INT 34
10703: PPUSH
10704: LD_VAR 0 3
10708: PPUSH
10709: LD_INT 1
10711: PPUSH
10712: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10716: LD_INT 42
10718: PPUSH
10719: LD_VAR 0 3
10723: PPUSH
10724: LD_INT 1
10726: PPUSH
10727: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10731: LD_INT 44
10733: PPUSH
10734: LD_VAR 0 3
10738: PPUSH
10739: LD_INT 1
10741: PPUSH
10742: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10746: LD_INT 41
10748: PPUSH
10749: LD_VAR 0 3
10753: PPUSH
10754: LD_INT 1
10756: PPUSH
10757: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10761: LD_INT 43
10763: PPUSH
10764: LD_VAR 0 3
10768: PPUSH
10769: LD_INT 1
10771: PPUSH
10772: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10776: LD_INT 70
10778: PPUSH
10779: LD_VAR 0 3
10783: PPUSH
10784: LD_INT 1
10786: PPUSH
10787: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10791: LD_INT 51
10793: PPUSH
10794: LD_VAR 0 3
10798: PPUSH
10799: LD_INT 1
10801: PPUSH
10802: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10806: LD_INT 52
10808: PPUSH
10809: LD_VAR 0 3
10813: PPUSH
10814: LD_INT 1
10816: PPUSH
10817: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10821: LD_INT 6
10823: PPUSH
10824: LD_VAR 0 3
10828: PPUSH
10829: LD_INT 1
10831: PPUSH
10832: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10836: LD_INT 15
10838: PPUSH
10839: LD_VAR 0 3
10843: PPUSH
10844: LD_INT 1
10846: PPUSH
10847: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10851: LD_INT 7
10853: PPUSH
10854: LD_VAR 0 3
10858: PPUSH
10859: LD_INT 1
10861: PPUSH
10862: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10866: LD_INT 12
10868: PPUSH
10869: LD_VAR 0 3
10873: PPUSH
10874: LD_INT 1
10876: PPUSH
10877: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10881: LD_INT 18
10883: PPUSH
10884: LD_VAR 0 3
10888: PPUSH
10889: LD_INT 1
10891: PPUSH
10892: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10896: LD_INT 60
10898: PPUSH
10899: LD_VAR 0 3
10903: PPUSH
10904: LD_INT 1
10906: PPUSH
10907: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10911: LD_INT 9
10913: PPUSH
10914: LD_VAR 0 3
10918: PPUSH
10919: LD_INT 1
10921: PPUSH
10922: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10926: LD_INT 30
10928: PPUSH
10929: LD_VAR 0 3
10933: PPUSH
10934: LD_INT 1
10936: PPUSH
10937: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10941: LD_INT 37
10943: PPUSH
10944: LD_VAR 0 3
10948: PPUSH
10949: LD_INT 1
10951: PPUSH
10952: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10956: LD_INT 5
10958: PPUSH
10959: LD_VAR 0 3
10963: PPUSH
10964: LD_INT 1
10966: PPUSH
10967: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10971: LD_INT 66
10973: PPUSH
10974: LD_VAR 0 3
10978: PPUSH
10979: LD_INT 1
10981: PPUSH
10982: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10986: LD_INT 21
10988: PPUSH
10989: LD_VAR 0 3
10993: PPUSH
10994: LD_INT 1
10996: PPUSH
10997: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11001: LD_INT 22
11003: PPUSH
11004: LD_VAR 0 3
11008: PPUSH
11009: LD_INT 1
11011: PPUSH
11012: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11016: LD_INT 54
11018: PPUSH
11019: LD_VAR 0 3
11023: PPUSH
11024: LD_INT 1
11026: PPUSH
11027: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11031: LD_INT 0
11033: PPUSH
11034: LD_VAR 0 3
11038: PPUSH
11039: LD_INT 1
11041: PPUSH
11042: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11046: LD_INT 1
11048: PPUSH
11049: LD_VAR 0 3
11053: PPUSH
11054: LD_INT 1
11056: PPUSH
11057: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11061: LD_INT 2
11063: PPUSH
11064: LD_VAR 0 3
11068: PPUSH
11069: LD_INT 1
11071: PPUSH
11072: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11076: LD_INT 3
11078: PPUSH
11079: LD_VAR 0 3
11083: PPUSH
11084: LD_INT 1
11086: PPUSH
11087: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11091: LD_INT 4
11093: PPUSH
11094: LD_VAR 0 3
11098: PPUSH
11099: LD_INT 1
11101: PPUSH
11102: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11106: LD_INT 5
11108: PPUSH
11109: LD_VAR 0 3
11113: PPUSH
11114: LD_INT 1
11116: PPUSH
11117: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11121: LD_INT 6
11123: PPUSH
11124: LD_VAR 0 3
11128: PPUSH
11129: LD_INT 1
11131: PPUSH
11132: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11136: LD_INT 7
11138: PPUSH
11139: LD_VAR 0 3
11143: PPUSH
11144: LD_INT 1
11146: PPUSH
11147: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11151: LD_INT 8
11153: PPUSH
11154: LD_VAR 0 3
11158: PPUSH
11159: LD_INT 1
11161: PPUSH
11162: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11166: LD_INT 10
11168: PPUSH
11169: LD_VAR 0 3
11173: PPUSH
11174: LD_INT 1
11176: PPUSH
11177: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11181: LD_INT 11
11183: PPUSH
11184: LD_VAR 0 3
11188: PPUSH
11189: LD_INT 1
11191: PPUSH
11192: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11196: LD_INT 12
11198: PPUSH
11199: LD_VAR 0 3
11203: PPUSH
11204: LD_INT 1
11206: PPUSH
11207: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11211: LD_INT 13
11213: PPUSH
11214: LD_VAR 0 3
11218: PPUSH
11219: LD_INT 1
11221: PPUSH
11222: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11226: LD_INT 14
11228: PPUSH
11229: LD_VAR 0 3
11233: PPUSH
11234: LD_INT 1
11236: PPUSH
11237: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11241: LD_INT 15
11243: PPUSH
11244: LD_VAR 0 3
11248: PPUSH
11249: LD_INT 1
11251: PPUSH
11252: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11256: LD_INT 16
11258: PPUSH
11259: LD_VAR 0 3
11263: PPUSH
11264: LD_INT 1
11266: PPUSH
11267: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11271: LD_INT 17
11273: PPUSH
11274: LD_VAR 0 3
11278: PPUSH
11279: LD_INT 1
11281: PPUSH
11282: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11286: LD_INT 19
11288: PPUSH
11289: LD_VAR 0 3
11293: PPUSH
11294: LD_INT 1
11296: PPUSH
11297: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11301: LD_INT 20
11303: PPUSH
11304: LD_VAR 0 3
11308: PPUSH
11309: LD_INT 1
11311: PPUSH
11312: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11316: LD_INT 21
11318: PPUSH
11319: LD_VAR 0 3
11323: PPUSH
11324: LD_INT 1
11326: PPUSH
11327: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11331: LD_INT 23
11333: PPUSH
11334: LD_VAR 0 3
11338: PPUSH
11339: LD_INT 1
11341: PPUSH
11342: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11346: LD_INT 26
11348: PPUSH
11349: LD_VAR 0 3
11353: PPUSH
11354: LD_INT 1
11356: PPUSH
11357: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11361: LD_INT 27
11363: PPUSH
11364: LD_VAR 0 3
11368: PPUSH
11369: LD_INT 1
11371: PPUSH
11372: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11376: LD_INT 28
11378: PPUSH
11379: LD_VAR 0 3
11383: PPUSH
11384: LD_INT 1
11386: PPUSH
11387: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11391: LD_INT 29
11393: PPUSH
11394: LD_VAR 0 3
11398: PPUSH
11399: LD_INT 1
11401: PPUSH
11402: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11406: LD_INT 30
11408: PPUSH
11409: LD_VAR 0 3
11413: PPUSH
11414: LD_INT 1
11416: PPUSH
11417: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11421: LD_INT 31
11423: PPUSH
11424: LD_VAR 0 3
11428: PPUSH
11429: LD_INT 1
11431: PPUSH
11432: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11436: LD_INT 32
11438: PPUSH
11439: LD_VAR 0 3
11443: PPUSH
11444: LD_INT 1
11446: PPUSH
11447: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11451: LD_INT 36
11453: PPUSH
11454: LD_VAR 0 3
11458: PPUSH
11459: LD_INT 1
11461: PPUSH
11462: CALL_OW 324
// end ; 5 :
11466: GO 13597
11468: LD_INT 5
11470: DOUBLE
11471: EQUAL
11472: IFTRUE 11476
11474: GO 12589
11476: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11477: LD_INT 35
11479: PPUSH
11480: LD_VAR 0 3
11484: PPUSH
11485: LD_INT 1
11487: PPUSH
11488: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11492: LD_INT 45
11494: PPUSH
11495: LD_VAR 0 3
11499: PPUSH
11500: LD_INT 1
11502: PPUSH
11503: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11507: LD_INT 46
11509: PPUSH
11510: LD_VAR 0 3
11514: PPUSH
11515: LD_INT 1
11517: PPUSH
11518: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11522: LD_INT 47
11524: PPUSH
11525: LD_VAR 0 3
11529: PPUSH
11530: LD_INT 1
11532: PPUSH
11533: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11537: LD_INT 1
11539: PPUSH
11540: LD_VAR 0 3
11544: PPUSH
11545: LD_INT 1
11547: PPUSH
11548: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11552: LD_INT 2
11554: PPUSH
11555: LD_VAR 0 3
11559: PPUSH
11560: LD_INT 1
11562: PPUSH
11563: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11567: LD_INT 11
11569: PPUSH
11570: LD_VAR 0 3
11574: PPUSH
11575: LD_INT 1
11577: PPUSH
11578: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11582: LD_INT 20
11584: PPUSH
11585: LD_VAR 0 3
11589: PPUSH
11590: LD_INT 1
11592: PPUSH
11593: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11597: LD_INT 48
11599: PPUSH
11600: LD_VAR 0 3
11604: PPUSH
11605: LD_INT 1
11607: PPUSH
11608: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11612: LD_INT 49
11614: PPUSH
11615: LD_VAR 0 3
11619: PPUSH
11620: LD_INT 1
11622: PPUSH
11623: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11627: LD_INT 69
11629: PPUSH
11630: LD_VAR 0 3
11634: PPUSH
11635: LD_INT 1
11637: PPUSH
11638: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11642: LD_INT 39
11644: PPUSH
11645: LD_VAR 0 3
11649: PPUSH
11650: LD_INT 1
11652: PPUSH
11653: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11657: LD_INT 34
11659: PPUSH
11660: LD_VAR 0 3
11664: PPUSH
11665: LD_INT 1
11667: PPUSH
11668: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11672: LD_INT 42
11674: PPUSH
11675: LD_VAR 0 3
11679: PPUSH
11680: LD_INT 1
11682: PPUSH
11683: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11687: LD_INT 44
11689: PPUSH
11690: LD_VAR 0 3
11694: PPUSH
11695: LD_INT 1
11697: PPUSH
11698: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11702: LD_INT 41
11704: PPUSH
11705: LD_VAR 0 3
11709: PPUSH
11710: LD_INT 1
11712: PPUSH
11713: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11717: LD_INT 40
11719: PPUSH
11720: LD_VAR 0 3
11724: PPUSH
11725: LD_INT 1
11727: PPUSH
11728: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11732: LD_INT 43
11734: PPUSH
11735: LD_VAR 0 3
11739: PPUSH
11740: LD_INT 1
11742: PPUSH
11743: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11747: LD_INT 70
11749: PPUSH
11750: LD_VAR 0 3
11754: PPUSH
11755: LD_INT 1
11757: PPUSH
11758: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11762: LD_INT 51
11764: PPUSH
11765: LD_VAR 0 3
11769: PPUSH
11770: LD_INT 1
11772: PPUSH
11773: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11777: LD_INT 52
11779: PPUSH
11780: LD_VAR 0 3
11784: PPUSH
11785: LD_INT 1
11787: PPUSH
11788: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11792: LD_INT 6
11794: PPUSH
11795: LD_VAR 0 3
11799: PPUSH
11800: LD_INT 1
11802: PPUSH
11803: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11807: LD_INT 15
11809: PPUSH
11810: LD_VAR 0 3
11814: PPUSH
11815: LD_INT 1
11817: PPUSH
11818: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11822: LD_INT 7
11824: PPUSH
11825: LD_VAR 0 3
11829: PPUSH
11830: LD_INT 1
11832: PPUSH
11833: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11837: LD_INT 12
11839: PPUSH
11840: LD_VAR 0 3
11844: PPUSH
11845: LD_INT 1
11847: PPUSH
11848: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11852: LD_INT 17
11854: PPUSH
11855: LD_VAR 0 3
11859: PPUSH
11860: LD_INT 1
11862: PPUSH
11863: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11867: LD_INT 18
11869: PPUSH
11870: LD_VAR 0 3
11874: PPUSH
11875: LD_INT 1
11877: PPUSH
11878: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11882: LD_INT 60
11884: PPUSH
11885: LD_VAR 0 3
11889: PPUSH
11890: LD_INT 1
11892: PPUSH
11893: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11897: LD_INT 32
11899: PPUSH
11900: LD_VAR 0 3
11904: PPUSH
11905: LD_INT 1
11907: PPUSH
11908: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11912: LD_INT 9
11914: PPUSH
11915: LD_VAR 0 3
11919: PPUSH
11920: LD_INT 1
11922: PPUSH
11923: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11927: LD_INT 57
11929: PPUSH
11930: LD_VAR 0 3
11934: PPUSH
11935: LD_INT 1
11937: PPUSH
11938: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11942: LD_INT 30
11944: PPUSH
11945: LD_VAR 0 3
11949: PPUSH
11950: LD_INT 1
11952: PPUSH
11953: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11957: LD_INT 37
11959: PPUSH
11960: LD_VAR 0 3
11964: PPUSH
11965: LD_INT 1
11967: PPUSH
11968: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11972: LD_INT 63
11974: PPUSH
11975: LD_VAR 0 3
11979: PPUSH
11980: LD_INT 1
11982: PPUSH
11983: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11987: LD_INT 3
11989: PPUSH
11990: LD_VAR 0 3
11994: PPUSH
11995: LD_INT 1
11997: PPUSH
11998: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12002: LD_INT 4
12004: PPUSH
12005: LD_VAR 0 3
12009: PPUSH
12010: LD_INT 1
12012: PPUSH
12013: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12017: LD_INT 5
12019: PPUSH
12020: LD_VAR 0 3
12024: PPUSH
12025: LD_INT 1
12027: PPUSH
12028: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12032: LD_INT 66
12034: PPUSH
12035: LD_VAR 0 3
12039: PPUSH
12040: LD_INT 1
12042: PPUSH
12043: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12047: LD_INT 21
12049: PPUSH
12050: LD_VAR 0 3
12054: PPUSH
12055: LD_INT 1
12057: PPUSH
12058: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12062: LD_INT 22
12064: PPUSH
12065: LD_VAR 0 3
12069: PPUSH
12070: LD_INT 1
12072: PPUSH
12073: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12077: LD_INT 19
12079: PPUSH
12080: LD_VAR 0 3
12084: PPUSH
12085: LD_INT 1
12087: PPUSH
12088: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12092: LD_INT 54
12094: PPUSH
12095: LD_VAR 0 3
12099: PPUSH
12100: LD_INT 1
12102: PPUSH
12103: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12107: LD_INT 55
12109: PPUSH
12110: LD_VAR 0 3
12114: PPUSH
12115: LD_INT 1
12117: PPUSH
12118: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12122: LD_INT 0
12124: PPUSH
12125: LD_VAR 0 3
12129: PPUSH
12130: LD_INT 1
12132: PPUSH
12133: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12137: LD_INT 1
12139: PPUSH
12140: LD_VAR 0 3
12144: PPUSH
12145: LD_INT 1
12147: PPUSH
12148: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12152: LD_INT 2
12154: PPUSH
12155: LD_VAR 0 3
12159: PPUSH
12160: LD_INT 1
12162: PPUSH
12163: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12167: LD_INT 3
12169: PPUSH
12170: LD_VAR 0 3
12174: PPUSH
12175: LD_INT 1
12177: PPUSH
12178: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12182: LD_INT 4
12184: PPUSH
12185: LD_VAR 0 3
12189: PPUSH
12190: LD_INT 1
12192: PPUSH
12193: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12197: LD_INT 5
12199: PPUSH
12200: LD_VAR 0 3
12204: PPUSH
12205: LD_INT 1
12207: PPUSH
12208: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12212: LD_INT 6
12214: PPUSH
12215: LD_VAR 0 3
12219: PPUSH
12220: LD_INT 1
12222: PPUSH
12223: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12227: LD_INT 7
12229: PPUSH
12230: LD_VAR 0 3
12234: PPUSH
12235: LD_INT 1
12237: PPUSH
12238: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12242: LD_INT 8
12244: PPUSH
12245: LD_VAR 0 3
12249: PPUSH
12250: LD_INT 1
12252: PPUSH
12253: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12257: LD_INT 10
12259: PPUSH
12260: LD_VAR 0 3
12264: PPUSH
12265: LD_INT 1
12267: PPUSH
12268: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12272: LD_INT 11
12274: PPUSH
12275: LD_VAR 0 3
12279: PPUSH
12280: LD_INT 1
12282: PPUSH
12283: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12287: LD_INT 12
12289: PPUSH
12290: LD_VAR 0 3
12294: PPUSH
12295: LD_INT 1
12297: PPUSH
12298: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12302: LD_INT 13
12304: PPUSH
12305: LD_VAR 0 3
12309: PPUSH
12310: LD_INT 1
12312: PPUSH
12313: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12317: LD_INT 14
12319: PPUSH
12320: LD_VAR 0 3
12324: PPUSH
12325: LD_INT 1
12327: PPUSH
12328: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12332: LD_INT 15
12334: PPUSH
12335: LD_VAR 0 3
12339: PPUSH
12340: LD_INT 1
12342: PPUSH
12343: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12347: LD_INT 16
12349: PPUSH
12350: LD_VAR 0 3
12354: PPUSH
12355: LD_INT 1
12357: PPUSH
12358: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12362: LD_INT 17
12364: PPUSH
12365: LD_VAR 0 3
12369: PPUSH
12370: LD_INT 1
12372: PPUSH
12373: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
12377: LD_INT 18
12379: PPUSH
12380: LD_VAR 0 3
12384: PPUSH
12385: LD_INT 1
12387: PPUSH
12388: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12392: LD_INT 19
12394: PPUSH
12395: LD_VAR 0 3
12399: PPUSH
12400: LD_INT 1
12402: PPUSH
12403: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12407: LD_INT 20
12409: PPUSH
12410: LD_VAR 0 3
12414: PPUSH
12415: LD_INT 1
12417: PPUSH
12418: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12422: LD_INT 21
12424: PPUSH
12425: LD_VAR 0 3
12429: PPUSH
12430: LD_INT 1
12432: PPUSH
12433: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12437: LD_INT 23
12439: PPUSH
12440: LD_VAR 0 3
12444: PPUSH
12445: LD_INT 1
12447: PPUSH
12448: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12452: LD_INT 26
12454: PPUSH
12455: LD_VAR 0 3
12459: PPUSH
12460: LD_INT 1
12462: PPUSH
12463: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12467: LD_INT 27
12469: PPUSH
12470: LD_VAR 0 3
12474: PPUSH
12475: LD_INT 1
12477: PPUSH
12478: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12482: LD_INT 28
12484: PPUSH
12485: LD_VAR 0 3
12489: PPUSH
12490: LD_INT 1
12492: PPUSH
12493: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12497: LD_INT 29
12499: PPUSH
12500: LD_VAR 0 3
12504: PPUSH
12505: LD_INT 1
12507: PPUSH
12508: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12512: LD_INT 30
12514: PPUSH
12515: LD_VAR 0 3
12519: PPUSH
12520: LD_INT 1
12522: PPUSH
12523: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12527: LD_INT 31
12529: PPUSH
12530: LD_VAR 0 3
12534: PPUSH
12535: LD_INT 1
12537: PPUSH
12538: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12542: LD_INT 32
12544: PPUSH
12545: LD_VAR 0 3
12549: PPUSH
12550: LD_INT 1
12552: PPUSH
12553: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
12557: LD_INT 33
12559: PPUSH
12560: LD_VAR 0 3
12564: PPUSH
12565: LD_INT 1
12567: PPUSH
12568: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12572: LD_INT 36
12574: PPUSH
12575: LD_VAR 0 3
12579: PPUSH
12580: LD_INT 1
12582: PPUSH
12583: CALL_OW 324
// end ; 6 :
12587: GO 13597
12589: LD_INT 6
12591: DOUBLE
12592: EQUAL
12593: IFTRUE 12597
12595: GO 13522
12597: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12598: LD_INT 35
12600: PPUSH
12601: LD_VAR 0 3
12605: PPUSH
12606: LD_INT 1
12608: PPUSH
12609: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12613: LD_INT 45
12615: PPUSH
12616: LD_VAR 0 3
12620: PPUSH
12621: LD_INT 1
12623: PPUSH
12624: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12628: LD_INT 46
12630: PPUSH
12631: LD_VAR 0 3
12635: PPUSH
12636: LD_INT 1
12638: PPUSH
12639: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12643: LD_INT 47
12645: PPUSH
12646: LD_VAR 0 3
12650: PPUSH
12651: LD_INT 1
12653: PPUSH
12654: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12658: LD_INT 1
12660: PPUSH
12661: LD_VAR 0 3
12665: PPUSH
12666: LD_INT 1
12668: PPUSH
12669: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12673: LD_INT 2
12675: PPUSH
12676: LD_VAR 0 3
12680: PPUSH
12681: LD_INT 1
12683: PPUSH
12684: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12688: LD_INT 11
12690: PPUSH
12691: LD_VAR 0 3
12695: PPUSH
12696: LD_INT 1
12698: PPUSH
12699: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12703: LD_INT 20
12705: PPUSH
12706: LD_VAR 0 3
12710: PPUSH
12711: LD_INT 1
12713: PPUSH
12714: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12718: LD_INT 48
12720: PPUSH
12721: LD_VAR 0 3
12725: PPUSH
12726: LD_INT 1
12728: PPUSH
12729: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12733: LD_INT 49
12735: PPUSH
12736: LD_VAR 0 3
12740: PPUSH
12741: LD_INT 1
12743: PPUSH
12744: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12748: LD_INT 50
12750: PPUSH
12751: LD_VAR 0 3
12755: PPUSH
12756: LD_INT 1
12758: PPUSH
12759: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12763: LD_INT 69
12765: PPUSH
12766: LD_VAR 0 3
12770: PPUSH
12771: LD_INT 1
12773: PPUSH
12774: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12778: LD_INT 39
12780: PPUSH
12781: LD_VAR 0 3
12785: PPUSH
12786: LD_INT 1
12788: PPUSH
12789: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12793: LD_INT 34
12795: PPUSH
12796: LD_VAR 0 3
12800: PPUSH
12801: LD_INT 1
12803: PPUSH
12804: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12808: LD_INT 42
12810: PPUSH
12811: LD_VAR 0 3
12815: PPUSH
12816: LD_INT 1
12818: PPUSH
12819: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12823: LD_INT 44
12825: PPUSH
12826: LD_VAR 0 3
12830: PPUSH
12831: LD_INT 1
12833: PPUSH
12834: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12838: LD_INT 41
12840: PPUSH
12841: LD_VAR 0 3
12845: PPUSH
12846: LD_INT 1
12848: PPUSH
12849: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
12853: LD_INT 13
12855: PPUSH
12856: LD_VAR 0 3
12860: PPUSH
12861: LD_INT 1
12863: PPUSH
12864: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12868: LD_INT 40
12870: PPUSH
12871: LD_VAR 0 3
12875: PPUSH
12876: LD_INT 1
12878: PPUSH
12879: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12883: LD_INT 43
12885: PPUSH
12886: LD_VAR 0 3
12890: PPUSH
12891: LD_INT 1
12893: PPUSH
12894: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12898: LD_INT 70
12900: PPUSH
12901: LD_VAR 0 3
12905: PPUSH
12906: LD_INT 1
12908: PPUSH
12909: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
12913: LD_INT 23
12915: PPUSH
12916: LD_VAR 0 3
12920: PPUSH
12921: LD_INT 1
12923: PPUSH
12924: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12928: LD_INT 51
12930: PPUSH
12931: LD_VAR 0 3
12935: PPUSH
12936: LD_INT 1
12938: PPUSH
12939: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12943: LD_INT 52
12945: PPUSH
12946: LD_VAR 0 3
12950: PPUSH
12951: LD_INT 1
12953: PPUSH
12954: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12958: LD_INT 6
12960: PPUSH
12961: LD_VAR 0 3
12965: PPUSH
12966: LD_INT 1
12968: PPUSH
12969: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12973: LD_INT 15
12975: PPUSH
12976: LD_VAR 0 3
12980: PPUSH
12981: LD_INT 1
12983: PPUSH
12984: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12988: LD_INT 7
12990: PPUSH
12991: LD_VAR 0 3
12995: PPUSH
12996: LD_INT 1
12998: PPUSH
12999: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13003: LD_INT 12
13005: PPUSH
13006: LD_VAR 0 3
13010: PPUSH
13011: LD_INT 1
13013: PPUSH
13014: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
13018: LD_INT 10
13020: PPUSH
13021: LD_VAR 0 3
13025: PPUSH
13026: LD_INT 1
13028: PPUSH
13029: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
13033: LD_INT 17
13035: PPUSH
13036: LD_VAR 0 3
13040: PPUSH
13041: LD_INT 1
13043: PPUSH
13044: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13048: LD_INT 18
13050: PPUSH
13051: LD_VAR 0 3
13055: PPUSH
13056: LD_INT 1
13058: PPUSH
13059: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13063: LD_INT 60
13065: PPUSH
13066: LD_VAR 0 3
13070: PPUSH
13071: LD_INT 1
13073: PPUSH
13074: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
13078: LD_INT 61
13080: PPUSH
13081: LD_VAR 0 3
13085: PPUSH
13086: LD_INT 1
13088: PPUSH
13089: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13093: LD_INT 32
13095: PPUSH
13096: LD_VAR 0 3
13100: PPUSH
13101: LD_INT 1
13103: PPUSH
13104: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
13108: LD_INT 27
13110: PPUSH
13111: LD_VAR 0 3
13115: PPUSH
13116: LD_INT 1
13118: PPUSH
13119: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
13123: LD_INT 36
13125: PPUSH
13126: LD_VAR 0 3
13130: PPUSH
13131: LD_INT 1
13133: PPUSH
13134: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
13138: LD_INT 33
13140: PPUSH
13141: LD_VAR 0 3
13145: PPUSH
13146: LD_INT 1
13148: PPUSH
13149: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13153: LD_INT 9
13155: PPUSH
13156: LD_VAR 0 3
13160: PPUSH
13161: LD_INT 1
13163: PPUSH
13164: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13168: LD_INT 38
13170: PPUSH
13171: LD_VAR 0 3
13175: PPUSH
13176: LD_INT 1
13178: PPUSH
13179: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13183: LD_INT 57
13185: PPUSH
13186: LD_VAR 0 3
13190: PPUSH
13191: LD_INT 1
13193: PPUSH
13194: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13198: LD_INT 58
13200: PPUSH
13201: LD_VAR 0 3
13205: PPUSH
13206: LD_INT 1
13208: PPUSH
13209: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13213: LD_INT 28
13215: PPUSH
13216: LD_VAR 0 3
13220: PPUSH
13221: LD_INT 1
13223: PPUSH
13224: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13228: LD_INT 29
13230: PPUSH
13231: LD_VAR 0 3
13235: PPUSH
13236: LD_INT 1
13238: PPUSH
13239: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13243: LD_INT 30
13245: PPUSH
13246: LD_VAR 0 3
13250: PPUSH
13251: LD_INT 1
13253: PPUSH
13254: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13258: LD_INT 37
13260: PPUSH
13261: LD_VAR 0 3
13265: PPUSH
13266: LD_INT 1
13268: PPUSH
13269: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13273: LD_INT 63
13275: PPUSH
13276: LD_VAR 0 3
13280: PPUSH
13281: LD_INT 1
13283: PPUSH
13284: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13288: LD_INT 64
13290: PPUSH
13291: LD_VAR 0 3
13295: PPUSH
13296: LD_INT 1
13298: PPUSH
13299: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13303: LD_INT 3
13305: PPUSH
13306: LD_VAR 0 3
13310: PPUSH
13311: LD_INT 1
13313: PPUSH
13314: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13318: LD_INT 4
13320: PPUSH
13321: LD_VAR 0 3
13325: PPUSH
13326: LD_INT 1
13328: PPUSH
13329: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13333: LD_INT 5
13335: PPUSH
13336: LD_VAR 0 3
13340: PPUSH
13341: LD_INT 1
13343: PPUSH
13344: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13348: LD_INT 8
13350: PPUSH
13351: LD_VAR 0 3
13355: PPUSH
13356: LD_INT 1
13358: PPUSH
13359: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13363: LD_INT 66
13365: PPUSH
13366: LD_VAR 0 3
13370: PPUSH
13371: LD_INT 1
13373: PPUSH
13374: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
13378: LD_INT 67
13380: PPUSH
13381: LD_VAR 0 3
13385: PPUSH
13386: LD_INT 1
13388: PPUSH
13389: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13393: LD_INT 21
13395: PPUSH
13396: LD_VAR 0 3
13400: PPUSH
13401: LD_INT 1
13403: PPUSH
13404: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13408: LD_INT 22
13410: PPUSH
13411: LD_VAR 0 3
13415: PPUSH
13416: LD_INT 1
13418: PPUSH
13419: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13423: LD_INT 19
13425: PPUSH
13426: LD_VAR 0 3
13430: PPUSH
13431: LD_INT 1
13433: PPUSH
13434: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13438: LD_INT 26
13440: PPUSH
13441: LD_VAR 0 3
13445: PPUSH
13446: LD_INT 1
13448: PPUSH
13449: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13453: LD_INT 54
13455: PPUSH
13456: LD_VAR 0 3
13460: PPUSH
13461: LD_INT 1
13463: PPUSH
13464: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13468: LD_INT 55
13470: PPUSH
13471: LD_VAR 0 3
13475: PPUSH
13476: LD_INT 1
13478: PPUSH
13479: CALL_OW 322
// for i = 0 to 39 do
13483: LD_ADDR_VAR 0 4
13487: PUSH
13488: DOUBLE
13489: LD_INT 0
13491: DEC
13492: ST_TO_ADDR
13493: LD_INT 39
13495: PUSH
13496: FOR_TO
13497: IFFALSE 13518
// SetRestrict ( i , side , true ) ;
13499: LD_VAR 0 4
13503: PPUSH
13504: LD_VAR 0 3
13508: PPUSH
13509: LD_INT 1
13511: PPUSH
13512: CALL_OW 324
13516: GO 13496
13518: POP
13519: POP
// end ; else
13520: GO 13597
13522: POP
// begin for i = 1 to 73 do
13523: LD_ADDR_VAR 0 4
13527: PUSH
13528: DOUBLE
13529: LD_INT 1
13531: DEC
13532: ST_TO_ADDR
13533: LD_INT 73
13535: PUSH
13536: FOR_TO
13537: IFFALSE 13558
// SetTech ( i , side , state_enabled ) ;
13539: LD_VAR 0 4
13543: PPUSH
13544: LD_VAR 0 3
13548: PPUSH
13549: LD_INT 1
13551: PPUSH
13552: CALL_OW 322
13556: GO 13536
13558: POP
13559: POP
// for i = 0 to 39 do
13560: LD_ADDR_VAR 0 4
13564: PUSH
13565: DOUBLE
13566: LD_INT 0
13568: DEC
13569: ST_TO_ADDR
13570: LD_INT 39
13572: PUSH
13573: FOR_TO
13574: IFFALSE 13595
// SetRestrict ( i , side , true ) ;
13576: LD_VAR 0 4
13580: PPUSH
13581: LD_VAR 0 3
13585: PPUSH
13586: LD_INT 1
13588: PPUSH
13589: CALL_OW 324
13593: GO 13573
13595: POP
13596: POP
// end ; end ; end ;
13597: GO 9602
13599: POP
13600: POP
// end ; end_of_file
13601: LD_VAR 0 2
13605: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
13606: LD_INT 0
13608: PPUSH
13609: PPUSH
13610: PPUSH
13611: PPUSH
13612: PPUSH
13613: PPUSH
13614: PPUSH
13615: PPUSH
13616: PPUSH
// for i := 1 to 8 do
13617: LD_ADDR_VAR 0 2
13621: PUSH
13622: DOUBLE
13623: LD_INT 1
13625: DEC
13626: ST_TO_ADDR
13627: LD_INT 8
13629: PUSH
13630: FOR_TO
13631: IFFALSE 14015
// begin if Side_Positions [ i ] then
13633: LD_EXP 34
13637: PUSH
13638: LD_VAR 0 2
13642: ARRAY
13643: IFFALSE 14013
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
13645: LD_ADDR_VAR 0 7
13649: PUSH
13650: LD_INT 22
13652: PUSH
13653: LD_VAR 0 2
13657: PUSH
13658: EMPTY
13659: LIST
13660: LIST
13661: PUSH
13662: LD_INT 21
13664: PUSH
13665: LD_INT 1
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: PPUSH
13676: CALL_OW 69
13680: PUSH
13681: LD_INT 0
13683: PLUS
13684: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13685: LD_ADDR_VAR 0 9
13689: PUSH
13690: LD_INT 22
13692: PUSH
13693: LD_VAR 0 2
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PUSH
13702: LD_INT 2
13704: PUSH
13705: LD_INT 30
13707: PUSH
13708: LD_INT 0
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: PUSH
13715: LD_INT 30
13717: PUSH
13718: LD_INT 1
13720: PUSH
13721: EMPTY
13722: LIST
13723: LIST
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: LIST
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: PPUSH
13734: CALL_OW 69
13738: ST_TO_ADDR
// crates := 0 ;
13739: LD_ADDR_VAR 0 4
13743: PUSH
13744: LD_INT 0
13746: ST_TO_ADDR
// oil := 0 ;
13747: LD_ADDR_VAR 0 5
13751: PUSH
13752: LD_INT 0
13754: ST_TO_ADDR
// sib := 0 ;
13755: LD_ADDR_VAR 0 6
13759: PUSH
13760: LD_INT 0
13762: ST_TO_ADDR
// if bases then
13763: LD_VAR 0 9
13767: IFFALSE 13873
// begin for j in bases do
13769: LD_ADDR_VAR 0 3
13773: PUSH
13774: LD_VAR 0 9
13778: PUSH
13779: FOR_IN
13780: IFFALSE 13871
// begin base := GetBase ( j ) ;
13782: LD_ADDR_VAR 0 8
13786: PUSH
13787: LD_VAR 0 3
13791: PPUSH
13792: CALL_OW 274
13796: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
13797: LD_ADDR_VAR 0 4
13801: PUSH
13802: LD_VAR 0 4
13806: PUSH
13807: LD_VAR 0 8
13811: PPUSH
13812: LD_INT 1
13814: PPUSH
13815: CALL_OW 275
13819: PLUS
13820: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
13821: LD_ADDR_VAR 0 5
13825: PUSH
13826: LD_VAR 0 5
13830: PUSH
13831: LD_VAR 0 8
13835: PPUSH
13836: LD_INT 2
13838: PPUSH
13839: CALL_OW 275
13843: PLUS
13844: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
13845: LD_ADDR_VAR 0 6
13849: PUSH
13850: LD_VAR 0 6
13854: PUSH
13855: LD_VAR 0 8
13859: PPUSH
13860: LD_INT 3
13862: PPUSH
13863: CALL_OW 275
13867: PLUS
13868: ST_TO_ADDR
// end ;
13869: GO 13779
13871: POP
13872: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
13873: LD_STRING setSpecText(
13875: PUSH
13876: LD_VAR 0 2
13880: STR
13881: PUSH
13882: LD_STRING ,
13884: STR
13885: PUSH
13886: LD_INT 2
13888: STR
13889: PUSH
13890: LD_STRING ,
13892: STR
13893: PUSH
13894: LD_VAR 0 4
13898: STR
13899: PUSH
13900: LD_STRING )
13902: STR
13903: PPUSH
13904: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
13908: LD_STRING setSpecText(
13910: PUSH
13911: LD_VAR 0 2
13915: STR
13916: PUSH
13917: LD_STRING ,
13919: STR
13920: PUSH
13921: LD_INT 3
13923: STR
13924: PUSH
13925: LD_STRING ,
13927: STR
13928: PUSH
13929: LD_VAR 0 5
13933: STR
13934: PUSH
13935: LD_STRING )
13937: STR
13938: PPUSH
13939: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
13943: LD_STRING setSpecText(
13945: PUSH
13946: LD_VAR 0 2
13950: STR
13951: PUSH
13952: LD_STRING ,
13954: STR
13955: PUSH
13956: LD_INT 4
13958: STR
13959: PUSH
13960: LD_STRING ,
13962: STR
13963: PUSH
13964: LD_VAR 0 6
13968: STR
13969: PUSH
13970: LD_STRING )
13972: STR
13973: PPUSH
13974: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
13978: LD_STRING setSpecText(
13980: PUSH
13981: LD_VAR 0 2
13985: STR
13986: PUSH
13987: LD_STRING ,
13989: STR
13990: PUSH
13991: LD_INT 5
13993: STR
13994: PUSH
13995: LD_STRING ,
13997: STR
13998: PUSH
13999: LD_VAR 0 7
14003: STR
14004: PUSH
14005: LD_STRING )
14007: STR
14008: PPUSH
14009: CALL_OW 559
// end ; end ;
14013: GO 13630
14015: POP
14016: POP
// end ;
14017: LD_VAR 0 1
14021: RET
// every 0 0$1 do
14022: GO 14024
14024: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
14025: LD_STRING setSpecLogoNumber(
14027: PUSH
14028: LD_INT 2
14030: STR
14031: PUSH
14032: LD_STRING ,
14034: STR
14035: PUSH
14036: LD_INT 1
14038: STR
14039: PUSH
14040: LD_STRING )
14042: STR
14043: PPUSH
14044: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
14048: LD_STRING setSpecLogoNumber(
14050: PUSH
14051: LD_INT 3
14053: STR
14054: PUSH
14055: LD_STRING ,
14057: STR
14058: PUSH
14059: LD_INT 2
14061: STR
14062: PUSH
14063: LD_STRING )
14065: STR
14066: PPUSH
14067: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
14071: LD_STRING setSpecLogoNumber(
14073: PUSH
14074: LD_INT 4
14076: STR
14077: PUSH
14078: LD_STRING ,
14080: STR
14081: PUSH
14082: LD_INT 3
14084: STR
14085: PUSH
14086: LD_STRING )
14088: STR
14089: PPUSH
14090: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
14094: LD_STRING setSpecLogoNumber(
14096: PUSH
14097: LD_INT 5
14099: STR
14100: PUSH
14101: LD_STRING ,
14103: STR
14104: PUSH
14105: LD_INT 4
14107: STR
14108: PUSH
14109: LD_STRING )
14111: STR
14112: PPUSH
14113: CALL_OW 559
// end ;
14117: END
// every 20 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
14118: LD_INT 2
14120: PUSH
14121: LD_INT 30
14123: PUSH
14124: LD_INT 0
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: PUSH
14131: LD_INT 30
14133: PUSH
14134: LD_INT 1
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: PUSH
14141: EMPTY
14142: LIST
14143: LIST
14144: LIST
14145: PPUSH
14146: CALL_OW 69
14150: IFFALSE 14160
14152: GO 14154
14154: DISABLE
// begin enable ;
14155: ENABLE
// UpdateSpectatorBar ;
14156: CALL 13606 0 0
// end ;
14160: END
