// export Game_Type ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_amount_of_apemen , def_people_respawning , def_siberite_bomb , def_builduptime ; export is_depot , number_of_breastworks , number_of_people , skill_level , amount_of_apemen , starting_crates , starting_resources , shipments_density , siberite_bomb_Delay , spawning_koef_of_apemen , respawning_time_min , respawning_time_max , def_win_rules ; export Side_Count , Team_Count , Player_Side , Player_Team , Side_Teams , Teams ; export Side_Positions , Side_Nations , Side_Names , Team_Names , Team_Game , Side_Comps ; export depot_def , start_def , extra_oil_deposits_locations ; export heroes ; export commander , battle_flags_id , morale_decreasing_time ; var global_units , global_defined , soldiers_created ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function create_forest ; var area ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
// PlaceTreesToArea ( BigForest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , Rand ( 500 , 570 ) , 50 , 2 ) ;
  72: LD_INT 6
  74: PPUSH
  75: LD_INT 21
  77: PUSH
  78: LD_INT 22
  80: PUSH
  81: LD_INT 24
  83: PUSH
  84: LD_INT 21
  86: PUSH
  87: LD_INT 22
  89: PUSH
  90: LD_INT 24
  92: PUSH
  93: LD_INT 38
  95: PUSH
  96: LD_INT 39
  98: PUSH
  99: EMPTY
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: PPUSH
 109: LD_INT 500
 111: PPUSH
 112: LD_INT 570
 114: PPUSH
 115: CALL_OW 12
 119: PPUSH
 120: LD_INT 50
 122: PPUSH
 123: LD_INT 2
 125: PPUSH
 126: CALL_OW 352
// if def_base_level then
 130: LD_EXP 2
 134: IFFALSE 146
// area := bush_forest_small else
 136: LD_ADDR_VAR 0 2
 140: PUSH
 141: LD_INT 9
 143: ST_TO_ADDR
 144: GO 154
// area := bush_forest_big ;
 146: LD_ADDR_VAR 0 2
 150: PUSH
 151: LD_INT 8
 153: ST_TO_ADDR
// PlaceTreesToArea ( area , [ 38 , 39 , 37 ] , Rand ( 300 , 350 ) , 10 , 3 ) ;
 154: LD_VAR 0 2
 158: PPUSH
 159: LD_INT 38
 161: PUSH
 162: LD_INT 39
 164: PUSH
 165: LD_INT 37
 167: PUSH
 168: EMPTY
 169: LIST
 170: LIST
 171: LIST
 172: PPUSH
 173: LD_INT 300
 175: PPUSH
 176: LD_INT 350
 178: PPUSH
 179: CALL_OW 12
 183: PPUSH
 184: LD_INT 10
 186: PPUSH
 187: LD_INT 3
 189: PPUSH
 190: CALL_OW 352
// PlaceTreesToArea ( BigForest , [ 38 , 39 , 37 ] , 80 , 10 , 3 ) ;
 194: LD_INT 6
 196: PPUSH
 197: LD_INT 38
 199: PUSH
 200: LD_INT 39
 202: PUSH
 203: LD_INT 37
 205: PUSH
 206: EMPTY
 207: LIST
 208: LIST
 209: LIST
 210: PPUSH
 211: LD_INT 80
 213: PPUSH
 214: LD_INT 10
 216: PPUSH
 217: LD_INT 3
 219: PPUSH
 220: CALL_OW 352
// end ;
 224: LD_VAR 0 1
 228: RET
// function create_map_resources ; var un , oil_pos , sib_pos ; begin
 229: LD_INT 0
 231: PPUSH
 232: PPUSH
 233: PPUSH
 234: PPUSH
// oil_pos := [ [ 24 , 10 ] , [ 82 , 9 ] , [ 79 , 115 ] , [ 135 , 112 ] ] ;
 235: LD_ADDR_VAR 0 3
 239: PUSH
 240: LD_INT 24
 242: PUSH
 243: LD_INT 10
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: PUSH
 250: LD_INT 82
 252: PUSH
 253: LD_INT 9
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 79
 262: PUSH
 263: LD_INT 115
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 135
 272: PUSH
 273: LD_INT 112
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: PUSH
 280: EMPTY
 281: LIST
 282: LIST
 283: LIST
 284: LIST
 285: ST_TO_ADDR
// sib_pos := [ [ 24 , 29 ] , [ 102 , 29 ] , [ 60 , 93 ] , [ 134 , 91 ] ] ;
 286: LD_ADDR_VAR 0 4
 290: PUSH
 291: LD_INT 24
 293: PUSH
 294: LD_INT 29
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: PUSH
 301: LD_INT 102
 303: PUSH
 304: LD_INT 29
 306: PUSH
 307: EMPTY
 308: LIST
 309: LIST
 310: PUSH
 311: LD_INT 60
 313: PUSH
 314: LD_INT 93
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 134
 323: PUSH
 324: LD_INT 91
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: LIST
 335: LIST
 336: ST_TO_ADDR
// for un = 1 to 4 do
 337: LD_ADDR_VAR 0 2
 341: PUSH
 342: DOUBLE
 343: LD_INT 1
 345: DEC
 346: ST_TO_ADDR
 347: LD_INT 4
 349: PUSH
 350: FOR_TO
 351: IFFALSE 429
// begin CreateDepositXY ( oil_pos [ un ] [ 1 ] , oil_pos [ un ] [ 2 ] , mat_oil ) ;
 353: LD_VAR 0 3
 357: PUSH
 358: LD_VAR 0 2
 362: ARRAY
 363: PUSH
 364: LD_INT 1
 366: ARRAY
 367: PPUSH
 368: LD_VAR 0 3
 372: PUSH
 373: LD_VAR 0 2
 377: ARRAY
 378: PUSH
 379: LD_INT 2
 381: ARRAY
 382: PPUSH
 383: LD_INT 2
 385: PPUSH
 386: CALL_OW 62
// CreateDepositXY ( sib_pos [ un ] [ 1 ] , sib_pos [ un ] [ 2 ] , mat_siberit ) ;
 390: LD_VAR 0 4
 394: PUSH
 395: LD_VAR 0 2
 399: ARRAY
 400: PUSH
 401: LD_INT 1
 403: ARRAY
 404: PPUSH
 405: LD_VAR 0 4
 409: PUSH
 410: LD_VAR 0 2
 414: ARRAY
 415: PUSH
 416: LD_INT 2
 418: ARRAY
 419: PPUSH
 420: LD_INT 3
 422: PPUSH
 423: CALL_OW 62
// end ;
 427: GO 350
 429: POP
 430: POP
// end ;
 431: LD_VAR 0 1
 435: RET
// function init_map ; var i ; begin
 436: LD_INT 0
 438: PPUSH
 439: PPUSH
// extra_oil_deposits_locations := [ [ 38 , 6 ] , [ 67 , 6 ] , [ 94 , 115 ] , [ 116 , 99 ] ] ;
 440: LD_ADDR_EXP 42
 444: PUSH
 445: LD_INT 38
 447: PUSH
 448: LD_INT 6
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 67
 457: PUSH
 458: LD_INT 6
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: LD_INT 94
 467: PUSH
 468: LD_INT 115
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: LD_INT 116
 477: PUSH
 478: LD_INT 99
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: ST_TO_ADDR
// create_forest ;
 491: CALL 68 0 0
// create_map_resources ;
 495: CALL 229 0 0
// depot_def := [ [ 12 , 10 , 2 ] , [ 97 , 10 , 3 ] , [ 64 , 108 , 0 ] , [ 146 , 110 , 5 ] ] ;
 499: LD_ADDR_EXP 40
 503: PUSH
 504: LD_INT 12
 506: PUSH
 507: LD_INT 10
 509: PUSH
 510: LD_INT 2
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: LIST
 517: PUSH
 518: LD_INT 97
 520: PUSH
 521: LD_INT 10
 523: PUSH
 524: LD_INT 3
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: LIST
 531: PUSH
 532: LD_INT 64
 534: PUSH
 535: LD_INT 108
 537: PUSH
 538: LD_INT 0
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: LIST
 545: PUSH
 546: LD_INT 146
 548: PUSH
 549: LD_INT 110
 551: PUSH
 552: LD_INT 5
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: LIST
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: LIST
 565: ST_TO_ADDR
// if def_base_level then
 566: LD_EXP 2
 570: IFFALSE 625
// start_def := [ [ 16 , 14 ] , [ 96 , 13 ] , [ 65 , 105 ] , [ 141 , 105 ] ] else
 572: LD_ADDR_EXP 41
 576: PUSH
 577: LD_INT 16
 579: PUSH
 580: LD_INT 14
 582: PUSH
 583: EMPTY
 584: LIST
 585: LIST
 586: PUSH
 587: LD_INT 96
 589: PUSH
 590: LD_INT 13
 592: PUSH
 593: EMPTY
 594: LIST
 595: LIST
 596: PUSH
 597: LD_INT 65
 599: PUSH
 600: LD_INT 105
 602: PUSH
 603: EMPTY
 604: LIST
 605: LIST
 606: PUSH
 607: LD_INT 141
 609: PUSH
 610: LD_INT 105
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: ST_TO_ADDR
 623: GO 676
// start_def := [ [ 7 , 5 ] , [ 98 , 6 ] , [ 63 , 113 ] , [ 151 , 113 ] ] ;
 625: LD_ADDR_EXP 41
 629: PUSH
 630: LD_INT 7
 632: PUSH
 633: LD_INT 5
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: PUSH
 640: LD_INT 98
 642: PUSH
 643: LD_INT 6
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: PUSH
 650: LD_INT 63
 652: PUSH
 653: LD_INT 113
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: PUSH
 660: LD_INT 151
 662: PUSH
 663: LD_INT 113
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: ST_TO_ADDR
// end ;
 676: LD_VAR 0 1
 680: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
 681: LD_INT 0
 683: PPUSH
 684: PPUSH
 685: PPUSH
 686: PPUSH
 687: PPUSH
 688: PPUSH
 689: PPUSH
 690: PPUSH
 691: PPUSH
// if MultiPlayer then
 692: LD_OWVAR 4
 696: IFFALSE 780
// begin Game_Type = mp_game_type ;
 698: LD_ADDR_EXP 1
 702: PUSH
 703: LD_OWVAR 6
 707: ST_TO_ADDR
// Player_Side = mp_player_side ;
 708: LD_ADDR_EXP 30
 712: PUSH
 713: LD_OWVAR 7
 717: ST_TO_ADDR
// Player_Team = mp_player_team ;
 718: LD_ADDR_EXP 31
 722: PUSH
 723: LD_OWVAR 8
 727: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
 728: LD_ADDR_EXP 34
 732: PUSH
 733: LD_OWVAR 17
 737: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 738: LD_ADDR_EXP 32
 742: PUSH
 743: LD_OWVAR 15
 747: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 748: LD_ADDR_EXP 35
 752: PUSH
 753: LD_OWVAR 16
 757: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 758: LD_ADDR_EXP 39
 762: PUSH
 763: CALL 0 0 0
 767: ST_TO_ADDR
// Teams = mp_teams ;
 768: LD_ADDR_EXP 33
 772: PUSH
 773: LD_OWVAR 12
 777: ST_TO_ADDR
// end else
 778: GO 981
// begin Game_Type = 2 ;
 780: LD_ADDR_EXP 1
 784: PUSH
 785: LD_INT 2
 787: ST_TO_ADDR
// Player_Side = 4 ;
 788: LD_ADDR_EXP 30
 792: PUSH
 793: LD_INT 4
 795: ST_TO_ADDR
// Side_Positions = [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 796: LD_ADDR_EXP 34
 800: PUSH
 801: LD_INT 0
 803: PUSH
 804: LD_INT 3
 806: PUSH
 807: LD_INT 0
 809: PUSH
 810: LD_INT 1
 812: PUSH
 813: LD_INT 0
 815: PUSH
 816: LD_INT 2
 818: PUSH
 819: LD_INT 4
 821: PUSH
 822: LD_INT 0
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: LIST
 834: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 2 , 0 , 1 , 2 , 0 ] ;
 835: LD_ADDR_EXP 32
 839: PUSH
 840: LD_INT 0
 842: PUSH
 843: LD_INT 1
 845: PUSH
 846: LD_INT 0
 848: PUSH
 849: LD_INT 2
 851: PUSH
 852: LD_INT 0
 854: PUSH
 855: LD_INT 1
 857: PUSH
 858: LD_INT 2
 860: PUSH
 861: LD_INT 0
 863: PUSH
 864: EMPTY
 865: LIST
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: LIST
 871: LIST
 872: LIST
 873: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 2 , 0 , 1 , 3 , 0 ] ;
 874: LD_ADDR_EXP 35
 878: PUSH
 879: LD_INT 0
 881: PUSH
 882: LD_INT 3
 884: PUSH
 885: LD_INT 0
 887: PUSH
 888: LD_INT 2
 890: PUSH
 891: LD_INT 0
 893: PUSH
 894: LD_INT 1
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: LD_INT 0
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 913: LD_ADDR_EXP 39
 917: PUSH
 918: LD_INT 0
 920: PUSH
 921: LD_INT 0
 923: PUSH
 924: LD_INT 0
 926: PUSH
 927: LD_INT 0
 929: PUSH
 930: LD_INT 0
 932: PUSH
 933: LD_INT 0
 935: PUSH
 936: LD_INT 0
 938: PUSH
 939: LD_INT 0
 941: PUSH
 942: EMPTY
 943: LIST
 944: LIST
 945: LIST
 946: LIST
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: ST_TO_ADDR
// Teams = [ [ 2 , 6 ] , [ 4 , 7 ] ] ;
 952: LD_ADDR_EXP 33
 956: PUSH
 957: LD_INT 2
 959: PUSH
 960: LD_INT 6
 962: PUSH
 963: EMPTY
 964: LIST
 965: LIST
 966: PUSH
 967: LD_INT 4
 969: PUSH
 970: LD_INT 7
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: ST_TO_ADDR
// end ; Side_Count = ( Side_Positions diff [ 0 ] ) + 0 ;
 981: LD_ADDR_EXP 28
 985: PUSH
 986: LD_EXP 34
 990: PUSH
 991: LD_INT 0
 993: PUSH
 994: EMPTY
 995: LIST
 996: DIFF
 997: PUSH
 998: LD_INT 0
1000: PLUS
1001: ST_TO_ADDR
// Team_Count = ( Side_Teams diff [ 0 ] ) + 0 ;
1002: LD_ADDR_EXP 29
1006: PUSH
1007: LD_EXP 32
1011: PUSH
1012: LD_INT 0
1014: PUSH
1015: EMPTY
1016: LIST
1017: DIFF
1018: PUSH
1019: LD_INT 0
1021: PLUS
1022: ST_TO_ADDR
// if MultiPlayer then
1023: LD_OWVAR 4
1027: IFFALSE 1221
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
1029: LD_ADDR_EXP 2
1033: PUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL_OW 426
1041: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
1042: LD_ADDR_EXP 3
1046: PUSH
1047: LD_INT 1
1049: PPUSH
1050: CALL_OW 426
1054: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
1055: LD_ADDR_EXP 4
1059: PUSH
1060: LD_INT 2
1062: PPUSH
1063: CALL_OW 426
1067: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
1068: LD_ADDR_EXP 5
1072: PUSH
1073: LD_INT 3
1075: PPUSH
1076: CALL_OW 426
1080: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
1081: LD_ADDR_EXP 6
1085: PUSH
1086: LD_INT 4
1088: PPUSH
1089: CALL_OW 426
1093: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
1094: LD_ADDR_EXP 7
1098: PUSH
1099: LD_INT 5
1101: PPUSH
1102: CALL_OW 426
1106: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
1107: LD_ADDR_EXP 8
1111: PUSH
1112: LD_INT 10
1114: PPUSH
1115: CALL_OW 426
1119: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
1120: LD_ADDR_EXP 9
1124: PUSH
1125: LD_INT 11
1127: PPUSH
1128: CALL_OW 426
1132: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
1133: LD_ADDR_EXP 10
1137: PUSH
1138: LD_INT 12
1140: PPUSH
1141: CALL_OW 426
1145: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
1146: LD_ADDR_EXP 11
1150: PUSH
1151: LD_INT 13
1153: PPUSH
1154: CALL_OW 426
1158: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
1159: LD_ADDR_EXP 12
1163: PUSH
1164: LD_INT 14
1166: PPUSH
1167: CALL_OW 426
1171: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
1172: LD_ADDR_EXP 13
1176: PUSH
1177: LD_INT 15
1179: PPUSH
1180: CALL_OW 426
1184: ST_TO_ADDR
// def_win_rules = 0 ;
1185: LD_ADDR_EXP 27
1189: PUSH
1190: LD_INT 0
1192: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
1193: LD_ADDR_EXP 14
1197: PUSH
1198: LD_INT 20
1200: PPUSH
1201: CALL_OW 426
1205: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
1206: LD_ADDR_VAR 0 9
1210: PUSH
1211: LD_INT 22
1213: PPUSH
1214: CALL_OW 426
1218: ST_TO_ADDR
// end else
1219: GO 1345
// begin randomize ;
1221: CALL_OW 10
// def_base_level = 1 ;
1225: LD_ADDR_EXP 2
1229: PUSH
1230: LD_INT 1
1232: ST_TO_ADDR
// def_amount_of_people = 1 ;
1233: LD_ADDR_EXP 3
1237: PUSH
1238: LD_INT 1
1240: ST_TO_ADDR
// def_skill_level = 1 ;
1241: LD_ADDR_EXP 4
1245: PUSH
1246: LD_INT 1
1248: ST_TO_ADDR
// def_starting_resources = 2 ;
1249: LD_ADDR_EXP 5
1253: PUSH
1254: LD_INT 2
1256: ST_TO_ADDR
// def_shipments_density = 1 ;
1257: LD_ADDR_EXP 6
1261: PUSH
1262: LD_INT 1
1264: ST_TO_ADDR
// def_extra_oil_deposits = 0 ;
1265: LD_ADDR_EXP 7
1269: PUSH
1270: LD_INT 0
1272: ST_TO_ADDR
// def_shared_vision = 1 ;
1273: LD_ADDR_EXP 8
1277: PUSH
1278: LD_INT 1
1280: ST_TO_ADDR
// def_morale_flags = 1 ;
1281: LD_ADDR_EXP 9
1285: PUSH
1286: LD_INT 1
1288: ST_TO_ADDR
// def_siberite_detection = 1 ;
1289: LD_ADDR_EXP 10
1293: PUSH
1294: LD_INT 1
1296: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
1297: LD_ADDR_EXP 11
1301: PUSH
1302: LD_INT 3
1304: ST_TO_ADDR
// def_people_respawning = 2 ;
1305: LD_ADDR_EXP 12
1309: PUSH
1310: LD_INT 2
1312: ST_TO_ADDR
// def_siberite_bomb = 0 ;
1313: LD_ADDR_EXP 13
1317: PUSH
1318: LD_INT 0
1320: ST_TO_ADDR
// def_win_rules = 0 ;
1321: LD_ADDR_EXP 27
1325: PUSH
1326: LD_INT 0
1328: ST_TO_ADDR
// def_builduptime := 1 ;
1329: LD_ADDR_EXP 14
1333: PUSH
1334: LD_INT 1
1336: ST_TO_ADDR
// tech_level = 4 ;
1337: LD_ADDR_VAR 0 9
1341: PUSH
1342: LD_INT 4
1344: ST_TO_ADDR
// end ; if isSGUI then
1345: LD_OWVAR 83
1349: IFFALSE 1357
// setMpTechs ( ) else
1351: CALL 8963 0 0
1355: GO 1370
// begin SetMpTechLevel ( tech_level + 1 ) ;
1357: LD_VAR 0 9
1361: PUSH
1362: LD_INT 1
1364: PLUS
1365: PPUSH
1366: CALL 9110 0 1
// end ; is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1370: LD_ADDR_EXP 15
1374: PUSH
1375: LD_INT 0
1377: PUSH
1378: LD_INT 1
1380: PUSH
1381: LD_INT 1
1383: PUSH
1384: LD_INT 1
1386: PUSH
1387: EMPTY
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: PUSH
1393: LD_EXP 2
1397: PUSH
1398: LD_INT 1
1400: PLUS
1401: ARRAY
1402: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 0 , 0 ] [ def_base_level + 1 ] ;
1403: LD_ADDR_EXP 16
1407: PUSH
1408: LD_INT 0
1410: PUSH
1411: LD_INT 0
1413: PUSH
1414: LD_INT 0
1416: PUSH
1417: LD_INT 0
1419: PUSH
1420: EMPTY
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: PUSH
1426: LD_EXP 2
1430: PUSH
1431: LD_INT 1
1433: PLUS
1434: ARRAY
1435: ST_TO_ADDR
// number_of_people = [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
1436: LD_ADDR_EXP 17
1440: PUSH
1441: LD_INT 9
1443: PUSH
1444: LD_INT 12
1446: PUSH
1447: LD_INT 15
1449: PUSH
1450: LD_INT 24
1452: PUSH
1453: EMPTY
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: PUSH
1459: LD_EXP 3
1463: PUSH
1464: LD_INT 1
1466: PLUS
1467: ARRAY
1468: ST_TO_ADDR
// skill_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1469: LD_ADDR_EXP 18
1473: PUSH
1474: LD_INT 2
1476: PUSH
1477: LD_INT 3
1479: PUSH
1480: LD_INT 4
1482: PUSH
1483: LD_INT 5
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: PUSH
1492: LD_EXP 4
1496: PUSH
1497: LD_INT 1
1499: PLUS
1500: ARRAY
1501: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1502: LD_ADDR_EXP 21
1506: PUSH
1507: LD_INT 0
1509: PUSH
1510: LD_INT 0
1512: PUSH
1513: LD_INT 0
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: LIST
1520: PUSH
1521: LD_INT 30
1523: PUSH
1524: LD_INT 0
1526: PUSH
1527: LD_INT 0
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: PUSH
1535: LD_INT 50
1537: PUSH
1538: LD_INT 20
1540: PUSH
1541: LD_INT 0
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 80
1551: PUSH
1552: LD_INT 40
1554: PUSH
1555: LD_INT 20
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: PUSH
1563: EMPTY
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: PUSH
1569: LD_EXP 5
1573: PUSH
1574: LD_INT 1
1576: PLUS
1577: ARRAY
1578: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1579: LD_ADDR_EXP 20
1583: PUSH
1584: LD_INT 10
1586: PUSH
1587: EMPTY
1588: LIST
1589: PUSH
1590: LD_INT 7
1592: PUSH
1593: LD_INT 14
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: PUSH
1600: LD_INT 6
1602: PUSH
1603: LD_INT 12
1605: PUSH
1606: LD_INT 18
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: PUSH
1614: LD_INT 5
1616: PUSH
1617: LD_INT 10
1619: PUSH
1620: LD_INT 15
1622: PUSH
1623: LD_INT 20
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: PUSH
1638: LD_EXP 5
1642: PUSH
1643: LD_INT 1
1645: PLUS
1646: ARRAY
1647: ST_TO_ADDR
// shipments_density = [ 20 , 30 , 40 ] [ def_shipments_density + 1 ] ;
1648: LD_ADDR_EXP 22
1652: PUSH
1653: LD_INT 20
1655: PUSH
1656: LD_INT 30
1658: PUSH
1659: LD_INT 40
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: LIST
1666: PUSH
1667: LD_EXP 6
1671: PUSH
1672: LD_INT 1
1674: PLUS
1675: ARRAY
1676: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1677: LD_ADDR_EXP 19
1681: PUSH
1682: LD_INT 0
1684: PUSH
1685: LD_INT 1
1687: PUSH
1688: LD_INT 2
1690: PUSH
1691: LD_INT 3
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: PUSH
1700: LD_EXP 11
1704: PUSH
1705: LD_INT 1
1707: PLUS
1708: ARRAY
1709: ST_TO_ADDR
// spawning_koef_of_apemen = [ 0 , 165 , 140 , 115 ] [ def_amount_of_apemen + 1 ] ;
1710: LD_ADDR_EXP 24
1714: PUSH
1715: LD_INT 0
1717: PUSH
1718: LD_INT 165
1720: PUSH
1721: LD_INT 140
1723: PUSH
1724: LD_INT 115
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: PUSH
1733: LD_EXP 11
1737: PUSH
1738: LD_INT 1
1740: PLUS
1741: ARRAY
1742: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1743: LD_ADDR_EXP 25
1747: PUSH
1748: LD_INT 0
1750: PUSH
1751: LD_INT 8400
1753: PUSH
1754: LD_INT 1750
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: LIST
1761: PUSH
1762: LD_EXP 12
1766: PUSH
1767: LD_INT 1
1769: PLUS
1770: ARRAY
1771: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1772: LD_ADDR_EXP 26
1776: PUSH
1777: LD_INT 0
1779: PUSH
1780: LD_INT 21000
1782: PUSH
1783: LD_INT 4200
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: LIST
1790: PUSH
1791: LD_EXP 12
1795: PUSH
1796: LD_INT 1
1798: PLUS
1799: ARRAY
1800: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1801: LD_ADDR_EXP 23
1805: PUSH
1806: LD_INT 0
1808: PUSH
1809: LD_INT 1
1811: PUSH
1812: LD_INT 63000
1814: PUSH
1815: LD_INT 126000
1817: PUSH
1818: LD_INT 189000
1820: PUSH
1821: LD_INT 252000
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: PUSH
1832: LD_EXP 13
1836: PUSH
1837: LD_INT 1
1839: PLUS
1840: ARRAY
1841: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1842: LD_ADDR_EXP 46
1846: PUSH
1847: LD_INT 1
1849: NEG
1850: PUSH
1851: LD_INT 350
1853: PUSH
1854: LD_INT 700
1856: PUSH
1857: LD_INT 1400
1859: PUSH
1860: LD_INT 0
1862: PUSH
1863: EMPTY
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: PUSH
1870: LD_EXP 9
1874: PUSH
1875: LD_INT 1
1877: PLUS
1878: ARRAY
1879: ST_TO_ADDR
// battle_flags_id = [ ] ;
1880: LD_ADDR_EXP 45
1884: PUSH
1885: EMPTY
1886: ST_TO_ADDR
// end ;
1887: LD_VAR 0 1
1891: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1892: LD_INT 0
1894: PPUSH
1895: PPUSH
1896: PPUSH
// Team_Game := 0 ;
1897: LD_ADDR_EXP 38
1901: PUSH
1902: LD_INT 0
1904: ST_TO_ADDR
// for i = 1 to 8 do
1905: LD_ADDR_VAR 0 2
1909: PUSH
1910: DOUBLE
1911: LD_INT 1
1913: DEC
1914: ST_TO_ADDR
1915: LD_INT 8
1917: PUSH
1918: FOR_TO
1919: IFFALSE 1945
// Team_Game := Team_Game + Side_Teams [ i ] ;
1921: LD_ADDR_EXP 38
1925: PUSH
1926: LD_EXP 38
1930: PUSH
1931: LD_EXP 32
1935: PUSH
1936: LD_VAR 0 2
1940: ARRAY
1941: PLUS
1942: ST_TO_ADDR
1943: GO 1918
1945: POP
1946: POP
// if not Team_Game then
1947: LD_EXP 38
1951: NOT
1952: IFFALSE 1964
// Team_Game := false else
1954: LD_ADDR_EXP 38
1958: PUSH
1959: LD_INT 0
1961: ST_TO_ADDR
1962: GO 1972
// Team_Game := true ;
1964: LD_ADDR_EXP 38
1968: PUSH
1969: LD_INT 1
1971: ST_TO_ADDR
// if not Team_Game then
1972: LD_EXP 38
1976: NOT
1977: IFFALSE 2075
// begin for i = 1 to 8 do
1979: LD_ADDR_VAR 0 2
1983: PUSH
1984: DOUBLE
1985: LD_INT 1
1987: DEC
1988: ST_TO_ADDR
1989: LD_INT 8
1991: PUSH
1992: FOR_TO
1993: IFFALSE 2071
// for j = 1 to 8 do
1995: LD_ADDR_VAR 0 3
1999: PUSH
2000: DOUBLE
2001: LD_INT 1
2003: DEC
2004: ST_TO_ADDR
2005: LD_INT 8
2007: PUSH
2008: FOR_TO
2009: IFFALSE 2067
// if i <> j then
2011: LD_VAR 0 2
2015: PUSH
2016: LD_VAR 0 3
2020: NONEQUAL
2021: IFFALSE 2045
// SetAttitude ( i , j , att_neutral , true ) else
2023: LD_VAR 0 2
2027: PPUSH
2028: LD_VAR 0 3
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: LD_INT 1
2038: PPUSH
2039: CALL_OW 80
2043: GO 2065
// SetAttitude ( i , j , att_friend , true ) ;
2045: LD_VAR 0 2
2049: PPUSH
2050: LD_VAR 0 3
2054: PPUSH
2055: LD_INT 1
2057: PPUSH
2058: LD_INT 1
2060: PPUSH
2061: CALL_OW 80
2065: GO 2008
2067: POP
2068: POP
2069: GO 1992
2071: POP
2072: POP
// end else
2073: GO 2250
// begin if def_shared_vision then
2075: LD_EXP 8
2079: IFFALSE 2144
// begin for i in Teams do
2081: LD_ADDR_VAR 0 2
2085: PUSH
2086: LD_EXP 33
2090: PUSH
2091: FOR_IN
2092: IFFALSE 2142
// for j = 2 to i do
2094: LD_ADDR_VAR 0 3
2098: PUSH
2099: DOUBLE
2100: LD_INT 2
2102: DEC
2103: ST_TO_ADDR
2104: LD_VAR 0 2
2108: PUSH
2109: FOR_TO
2110: IFFALSE 2138
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2112: LD_VAR 0 2
2116: PUSH
2117: LD_VAR 0 3
2121: ARRAY
2122: PPUSH
2123: LD_VAR 0 2
2127: PUSH
2128: LD_INT 1
2130: ARRAY
2131: PPUSH
2132: CALL_OW 343
2136: GO 2109
2138: POP
2139: POP
2140: GO 2091
2142: POP
2143: POP
// end ; for i = 1 to 8 do
2144: LD_ADDR_VAR 0 2
2148: PUSH
2149: DOUBLE
2150: LD_INT 1
2152: DEC
2153: ST_TO_ADDR
2154: LD_INT 8
2156: PUSH
2157: FOR_TO
2158: IFFALSE 2248
// for j = 1 to 8 do
2160: LD_ADDR_VAR 0 3
2164: PUSH
2165: DOUBLE
2166: LD_INT 1
2168: DEC
2169: ST_TO_ADDR
2170: LD_INT 8
2172: PUSH
2173: FOR_TO
2174: IFFALSE 2244
// if Side_Teams [ i ] = Side_Teams [ j ] then
2176: LD_EXP 32
2180: PUSH
2181: LD_VAR 0 2
2185: ARRAY
2186: PUSH
2187: LD_EXP 32
2191: PUSH
2192: LD_VAR 0 3
2196: ARRAY
2197: EQUAL
2198: IFFALSE 2222
// SetAttitude ( i , j , att_friend , true ) else
2200: LD_VAR 0 2
2204: PPUSH
2205: LD_VAR 0 3
2209: PPUSH
2210: LD_INT 1
2212: PPUSH
2213: LD_INT 1
2215: PPUSH
2216: CALL_OW 80
2220: GO 2242
// SetAttitude ( i , j , att_enemy , true ) ;
2222: LD_VAR 0 2
2226: PPUSH
2227: LD_VAR 0 3
2231: PPUSH
2232: LD_INT 2
2234: PPUSH
2235: LD_INT 1
2237: PPUSH
2238: CALL_OW 80
2242: GO 2173
2244: POP
2245: POP
2246: GO 2157
2248: POP
2249: POP
// end ; end ;
2250: LD_VAR 0 1
2254: RET
// function prepare_people ( side , count , cl , x , y , r , var commander ) ; var i , j , un ; begin
2255: LD_INT 0
2257: PPUSH
2258: PPUSH
2259: PPUSH
2260: PPUSH
// result := [ ] ;
2261: LD_ADDR_VAR 0 8
2265: PUSH
2266: EMPTY
2267: ST_TO_ADDR
// for i := 1 to count do
2268: LD_ADDR_VAR 0 9
2272: PUSH
2273: DOUBLE
2274: LD_INT 1
2276: DEC
2277: ST_TO_ADDR
2278: LD_VAR 0 2
2282: PUSH
2283: FOR_TO
2284: IFFALSE 2678
// begin uc_direction := Rand ( 0 , 5 ) ;
2286: LD_ADDR_OWVAR 24
2290: PUSH
2291: LD_INT 0
2293: PPUSH
2294: LD_INT 5
2296: PPUSH
2297: CALL_OW 12
2301: ST_TO_ADDR
// if commander then
2302: LD_FROM_VAR 0 7
2306: IFFALSE 2415
// begin hc_name := mp_sides_players_names [ side ] ;
2308: LD_ADDR_OWVAR 26
2312: PUSH
2313: LD_OWVAR 19
2317: PUSH
2318: LD_VAR 0 1
2322: ARRAY
2323: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2324: LD_INT 1
2326: PPUSH
2327: LD_INT 2
2329: PPUSH
2330: CALL_OW 12
2334: PPUSH
2335: LD_VAR 0 3
2339: PPUSH
2340: LD_EXP 18
2344: PUSH
2345: LD_INT 2
2347: PLUS
2348: PPUSH
2349: CALL_OW 380
// hc_importance := 105 ;
2353: LD_ADDR_OWVAR 32
2357: PUSH
2358: LD_INT 105
2360: ST_TO_ADDR
// commander := false ;
2361: LD_VAR 0 7
2365: PUSH
2366: LD_INT 0
2368: ST_TO_ADDR
// if Multiplayer then
2369: LD_OWVAR 4
2373: IFFALSE 2413
// begin hc_gallery := MULTIAVATARS ;
2375: LD_ADDR_OWVAR 33
2379: PUSH
2380: LD_STRING MULTIAVATARS
2382: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( Side ) ;
2383: LD_ADDR_OWVAR 34
2387: PUSH
2388: LD_VAR 0 1
2392: PPUSH
2393: CALL_OW 525
2397: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( Side ) ;
2398: LD_ADDR_OWVAR 27
2402: PUSH
2403: LD_VAR 0 1
2407: PPUSH
2408: CALL_OW 526
2412: ST_TO_ADDR
// end ; end else
2413: GO 2478
// begin hc_name :=  ;
2415: LD_ADDR_OWVAR 26
2419: PUSH
2420: LD_STRING 
2422: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2423: LD_INT 1
2425: PPUSH
2426: LD_INT 2
2428: PPUSH
2429: CALL_OW 12
2433: PPUSH
2434: LD_VAR 0 3
2438: PPUSH
2439: LD_EXP 18
2443: PPUSH
2444: CALL_OW 380
// hc_importance := 0 ;
2448: LD_ADDR_OWVAR 32
2452: PUSH
2453: LD_INT 0
2455: ST_TO_ADDR
// if Multiplayer then
2456: LD_OWVAR 4
2460: IFFALSE 2478
// begin hc_gallery :=  ;
2462: LD_ADDR_OWVAR 33
2466: PUSH
2467: LD_STRING 
2469: ST_TO_ADDR
// hc_face_number := 0 ;
2470: LD_ADDR_OWVAR 34
2474: PUSH
2475: LD_INT 0
2477: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2478: LD_ADDR_VAR 0 11
2482: PUSH
2483: CALL_OW 44
2487: ST_TO_ADDR
// if global_defined then
2488: LD_LOC 2
2492: IFFALSE 2630
// begin j := i ;
2494: LD_ADDR_VAR 0 10
2498: PUSH
2499: LD_VAR 0 9
2503: ST_TO_ADDR
// if cl = class_soldier then
2504: LD_VAR 0 3
2508: PUSH
2509: LD_INT 1
2511: EQUAL
2512: IFFALSE 2530
// j := i + soldiers_created ;
2514: LD_ADDR_VAR 0 10
2518: PUSH
2519: LD_VAR 0 9
2523: PUSH
2524: LD_LOC 3
2528: PLUS
2529: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2530: LD_LOC 1
2534: PUSH
2535: LD_VAR 0 3
2539: ARRAY
2540: PUSH
2541: LD_VAR 0 10
2545: ARRAY
2546: PPUSH
2547: LD_VAR 0 11
2551: PPUSH
2552: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2556: LD_VAR 0 11
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_LOC 1
2568: PUSH
2569: LD_VAR 0 3
2573: ARRAY
2574: PUSH
2575: LD_VAR 0 10
2579: ARRAY
2580: PPUSH
2581: LD_INT 2
2583: PPUSH
2584: CALL_OW 260
2588: PPUSH
2589: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2593: LD_VAR 0 11
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: LD_LOC 1
2605: PUSH
2606: LD_VAR 0 3
2610: ARRAY
2611: PUSH
2612: LD_VAR 0 10
2616: ARRAY
2617: PPUSH
2618: LD_INT 1
2620: PPUSH
2621: CALL_OW 260
2625: PPUSH
2626: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2630: LD_VAR 0 11
2634: PPUSH
2635: LD_VAR 0 4
2639: PPUSH
2640: LD_VAR 0 5
2644: PPUSH
2645: LD_VAR 0 6
2649: PPUSH
2650: LD_INT 0
2652: PPUSH
2653: CALL_OW 50
// result := result ^ [ un ] ;
2657: LD_ADDR_VAR 0 8
2661: PUSH
2662: LD_VAR 0 8
2666: PUSH
2667: LD_VAR 0 11
2671: PUSH
2672: EMPTY
2673: LIST
2674: ADD
2675: ST_TO_ADDR
// end ;
2676: GO 2283
2678: POP
2679: POP
// if not global_defined then
2680: LD_LOC 2
2684: NOT
2685: IFFALSE 2747
// if cl = class_soldier and global_units then
2687: LD_VAR 0 3
2691: PUSH
2692: LD_INT 1
2694: EQUAL
2695: PUSH
2696: LD_LOC 1
2700: AND
2701: IFFALSE 2728
// global_units := [ global_units [ 1 ] ^ result ] else
2703: LD_ADDR_LOC 1
2707: PUSH
2708: LD_LOC 1
2712: PUSH
2713: LD_INT 1
2715: ARRAY
2716: PUSH
2717: LD_VAR 0 8
2721: ADD
2722: PUSH
2723: EMPTY
2724: LIST
2725: ST_TO_ADDR
2726: GO 2747
// global_units := global_units ^ [ result ] ;
2728: LD_ADDR_LOC 1
2732: PUSH
2733: LD_LOC 1
2737: PUSH
2738: LD_VAR 0 8
2742: PUSH
2743: EMPTY
2744: LIST
2745: ADD
2746: ST_TO_ADDR
// if commander then
2747: LD_FROM_VAR 0 7
2751: IFFALSE 2798
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2753: LD_ADDR_EXP 43
2757: PUSH
2758: LD_EXP 43
2762: PPUSH
2763: LD_OWVAR 20
2767: PPUSH
2768: LD_EXP 43
2772: PUSH
2773: LD_OWVAR 20
2777: ARRAY
2778: PUSH
2779: LD_VAR 0 11
2783: ADD
2784: PPUSH
2785: CALL_OW 1
2789: ST_TO_ADDR
// commander := false ;
2790: LD_VAR 0 7
2794: PUSH
2795: LD_INT 0
2797: ST_TO_ADDR
// end ; end ;
2798: LD_VAR 0 8
2802: RET
// function prepare_buldozer ( x , y , r , pos ) ; var nation ; begin
2803: LD_INT 0
2805: PPUSH
2806: PPUSH
// if uc_nation = 2 then
2807: LD_OWVAR 21
2811: PUSH
2812: LD_INT 2
2814: EQUAL
2815: IFFALSE 2837
// begin nation := uc_nation ;
2817: LD_ADDR_VAR 0 6
2821: PUSH
2822: LD_OWVAR 21
2826: ST_TO_ADDR
// uc_nation := 1 ;
2827: LD_ADDR_OWVAR 21
2831: PUSH
2832: LD_INT 1
2834: ST_TO_ADDR
// end else
2835: GO 2845
// nation := false ;
2837: LD_ADDR_VAR 0 6
2841: PUSH
2842: LD_INT 0
2844: ST_TO_ADDR
// vc_engine = engine_combustion ;
2845: LD_ADDR_OWVAR 39
2849: PUSH
2850: LD_INT 1
2852: ST_TO_ADDR
// vc_control = control_manual ;
2853: LD_ADDR_OWVAR 38
2857: PUSH
2858: LD_INT 1
2860: ST_TO_ADDR
// if uc_nation = nation_russian then
2861: LD_OWVAR 21
2865: PUSH
2866: LD_INT 3
2868: EQUAL
2869: IFFALSE 2889
// begin vc_chassis = ru_heavy_tracked ;
2871: LD_ADDR_OWVAR 37
2875: PUSH
2876: LD_INT 24
2878: ST_TO_ADDR
// vc_weapon = ru_bulldozer ;
2879: LD_ADDR_OWVAR 40
2883: PUSH
2884: LD_INT 53
2886: ST_TO_ADDR
// end else
2887: GO 2905
// begin vc_chassis = us_heavy_tracked ;
2889: LD_ADDR_OWVAR 37
2893: PUSH
2894: LD_INT 4
2896: ST_TO_ADDR
// vc_weapon = us_bulldozer ;
2897: LD_ADDR_OWVAR 40
2901: PUSH
2902: LD_INT 14
2904: ST_TO_ADDR
// end ; case pos of 1 :
2905: LD_VAR 0 4
2909: PUSH
2910: LD_INT 1
2912: DOUBLE
2913: EQUAL
2914: IFTRUE 2918
2916: GO 2929
2918: POP
// uc_direction := 2 ; 2 :
2919: LD_ADDR_OWVAR 24
2923: PUSH
2924: LD_INT 2
2926: ST_TO_ADDR
2927: GO 2987
2929: LD_INT 2
2931: DOUBLE
2932: EQUAL
2933: IFTRUE 2937
2935: GO 2948
2937: POP
// uc_direction := 3 ; 3 :
2938: LD_ADDR_OWVAR 24
2942: PUSH
2943: LD_INT 3
2945: ST_TO_ADDR
2946: GO 2987
2948: LD_INT 3
2950: DOUBLE
2951: EQUAL
2952: IFTRUE 2956
2954: GO 2967
2956: POP
// uc_direction := 0 ; 4 :
2957: LD_ADDR_OWVAR 24
2961: PUSH
2962: LD_INT 0
2964: ST_TO_ADDR
2965: GO 2987
2967: LD_INT 4
2969: DOUBLE
2970: EQUAL
2971: IFTRUE 2975
2973: GO 2986
2975: POP
// uc_direction := 5 ; end ;
2976: LD_ADDR_OWVAR 24
2980: PUSH
2981: LD_INT 5
2983: ST_TO_ADDR
2984: GO 2987
2986: POP
// PlaceUnitXYR ( CreateVehicle , x , y , r , false ) ;
2987: CALL_OW 45
2991: PPUSH
2992: LD_VAR 0 1
2996: PPUSH
2997: LD_VAR 0 2
3001: PPUSH
3002: LD_VAR 0 3
3006: PPUSH
3007: LD_INT 0
3009: PPUSH
3010: CALL_OW 50
// if nation then
3014: LD_VAR 0 6
3018: IFFALSE 3030
// uc_nation := nation ;
3020: LD_ADDR_OWVAR 21
3024: PUSH
3025: LD_VAR 0 6
3029: ST_TO_ADDR
// end ;
3030: LD_VAR 0 5
3034: RET
// function prepare_side ( side ) ; var pos , x , y , i , r , sol , br , dep , neng , nsci , nmech , nsol ; begin
3035: LD_INT 0
3037: PPUSH
3038: PPUSH
3039: PPUSH
3040: PPUSH
3041: PPUSH
3042: PPUSH
3043: PPUSH
3044: PPUSH
3045: PPUSH
3046: PPUSH
3047: PPUSH
3048: PPUSH
3049: PPUSH
// pos := Side_Positions [ side ] ;
3050: LD_ADDR_VAR 0 3
3054: PUSH
3055: LD_EXP 34
3059: PUSH
3060: LD_VAR 0 1
3064: ARRAY
3065: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3066: LD_ADDR_OWVAR 21
3070: PUSH
3071: LD_EXP 35
3075: PUSH
3076: LD_VAR 0 1
3080: ARRAY
3081: ST_TO_ADDR
// uc_side := side ;
3082: LD_ADDR_OWVAR 20
3086: PUSH
3087: LD_VAR 0 1
3091: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3092: LD_ADDR_VAR 0 4
3096: PUSH
3097: LD_EXP 40
3101: PUSH
3102: LD_VAR 0 3
3106: ARRAY
3107: PUSH
3108: LD_INT 1
3110: ARRAY
3111: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3112: LD_ADDR_VAR 0 5
3116: PUSH
3117: LD_EXP 40
3121: PUSH
3122: LD_VAR 0 3
3126: ARRAY
3127: PUSH
3128: LD_INT 2
3130: ARRAY
3131: ST_TO_ADDR
// if is_depot then
3132: LD_EXP 15
3136: IFFALSE 3279
// begin bc_type = b_depot ;
3138: LD_ADDR_OWVAR 42
3142: PUSH
3143: LD_INT 0
3145: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , Depot_Def [ pos ] [ 3 ] ) ;
3146: LD_ADDR_VAR 0 10
3150: PUSH
3151: LD_VAR 0 4
3155: PPUSH
3156: LD_VAR 0 5
3160: PPUSH
3161: LD_EXP 40
3165: PUSH
3166: LD_VAR 0 3
3170: ARRAY
3171: PUSH
3172: LD_INT 3
3174: ARRAY
3175: PPUSH
3176: CALL_OW 47
3180: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3181: LD_VAR 0 10
3185: PPUSH
3186: LD_STRING @
3188: PUSH
3189: LD_VAR 0 1
3193: STR
3194: PPUSH
3195: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3199: LD_VAR 0 10
3203: PPUSH
3204: CALL_OW 274
3208: PPUSH
3209: LD_INT 1
3211: PPUSH
3212: LD_EXP 21
3216: PUSH
3217: LD_INT 1
3219: ARRAY
3220: PPUSH
3221: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3225: LD_VAR 0 10
3229: PPUSH
3230: CALL_OW 274
3234: PPUSH
3235: LD_INT 2
3237: PPUSH
3238: LD_EXP 21
3242: PUSH
3243: LD_INT 2
3245: ARRAY
3246: PPUSH
3247: CALL_OW 277
// SetResourceType ( GetBase ( result ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3251: LD_VAR 0 2
3255: PPUSH
3256: CALL_OW 274
3260: PPUSH
3261: LD_INT 3
3263: PPUSH
3264: LD_EXP 21
3268: PUSH
3269: LD_INT 3
3271: ARRAY
3272: PPUSH
3273: CALL_OW 277
// end else
3277: GO 3423
// begin for i := 1 to 3 do
3279: LD_ADDR_VAR 0 6
3283: PUSH
3284: DOUBLE
3285: LD_INT 1
3287: DEC
3288: ST_TO_ADDR
3289: LD_INT 3
3291: PUSH
3292: FOR_TO
3293: IFFALSE 3421
// begin r := starting_resources [ i ] ;
3295: LD_ADDR_VAR 0 7
3299: PUSH
3300: LD_EXP 21
3304: PUSH
3305: LD_VAR 0 6
3309: ARRAY
3310: ST_TO_ADDR
// while r >= 10 do
3311: LD_VAR 0 7
3315: PUSH
3316: LD_INT 10
3318: GREATEREQUAL
3319: IFFALSE 3419
// if r > 50 then
3321: LD_VAR 0 7
3325: PUSH
3326: LD_INT 50
3328: GREATER
3329: IFFALSE 3375
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3331: LD_VAR 0 6
3335: PPUSH
3336: LD_INT 5
3338: PPUSH
3339: LD_VAR 0 4
3343: PPUSH
3344: LD_VAR 0 5
3348: PPUSH
3349: LD_INT 4
3351: PPUSH
3352: LD_INT 0
3354: PPUSH
3355: CALL_OW 60
// r := r - 50 ;
3359: LD_ADDR_VAR 0 7
3363: PUSH
3364: LD_VAR 0 7
3368: PUSH
3369: LD_INT 50
3371: MINUS
3372: ST_TO_ADDR
// end else
3373: GO 3417
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3375: LD_VAR 0 6
3379: PPUSH
3380: LD_VAR 0 7
3384: PUSH
3385: LD_INT 10
3387: DIV
3388: PPUSH
3389: LD_VAR 0 4
3393: PPUSH
3394: LD_VAR 0 5
3398: PPUSH
3399: LD_INT 4
3401: PPUSH
3402: LD_INT 0
3404: PPUSH
3405: CALL_OW 60
// r := 0 ;
3409: LD_ADDR_VAR 0 7
3413: PUSH
3414: LD_INT 0
3416: ST_TO_ADDR
// end ;
3417: GO 3311
// end ;
3419: GO 3292
3421: POP
3422: POP
// end ; x := start_def [ pos ] [ 1 ] ;
3423: LD_ADDR_VAR 0 4
3427: PUSH
3428: LD_EXP 41
3432: PUSH
3433: LD_VAR 0 3
3437: ARRAY
3438: PUSH
3439: LD_INT 1
3441: ARRAY
3442: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3443: LD_ADDR_VAR 0 5
3447: PUSH
3448: LD_EXP 41
3452: PUSH
3453: LD_VAR 0 3
3457: ARRAY
3458: PUSH
3459: LD_INT 2
3461: ARRAY
3462: ST_TO_ADDR
// for r in starting_crates do
3463: LD_ADDR_VAR 0 7
3467: PUSH
3468: LD_EXP 20
3472: PUSH
3473: FOR_IN
3474: IFFALSE 3506
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3476: LD_INT 1
3478: PPUSH
3479: LD_INT 5
3481: PPUSH
3482: LD_VAR 0 4
3486: PPUSH
3487: LD_VAR 0 5
3491: PPUSH
3492: LD_VAR 0 7
3496: PPUSH
3497: LD_INT 0
3499: PPUSH
3500: CALL_OW 60
3504: GO 3473
3506: POP
3507: POP
// if def_morale_flags then
3508: LD_EXP 9
3512: IFFALSE 3591
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3514: LD_ADDR_EXP 45
3518: PUSH
3519: LD_EXP 45
3523: PUSH
3524: LD_VAR 0 1
3528: PPUSH
3529: LD_VAR 0 4
3533: PPUSH
3534: LD_VAR 0 5
3538: PPUSH
3539: LD_INT 1
3541: PUSH
3542: LD_INT 100
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: PUSH
3549: LD_INT 2
3551: PUSH
3552: LD_INT 50
3554: PUSH
3555: EMPTY
3556: LIST
3557: LIST
3558: PUSH
3559: LD_INT 3
3561: PUSH
3562: LD_INT 20
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: PUSH
3569: LD_INT 20
3571: PUSH
3572: LD_INT 100
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: PPUSH
3585: CALL_OW 418
3589: ADD
3590: ST_TO_ADDR
// neng := number_of_people ;
3591: LD_ADDR_VAR 0 11
3595: PUSH
3596: LD_EXP 17
3600: ST_TO_ADDR
// nsol := neng div 4 ;
3601: LD_ADDR_VAR 0 14
3605: PUSH
3606: LD_VAR 0 11
3610: PUSH
3611: LD_INT 4
3613: DIV
3614: ST_TO_ADDR
// neng := neng - nsol ;
3615: LD_ADDR_VAR 0 11
3619: PUSH
3620: LD_VAR 0 11
3624: PUSH
3625: LD_VAR 0 14
3629: MINUS
3630: ST_TO_ADDR
// nsci := neng div 3 ;
3631: LD_ADDR_VAR 0 12
3635: PUSH
3636: LD_VAR 0 11
3640: PUSH
3641: LD_INT 3
3643: DIV
3644: ST_TO_ADDR
// if nsci < 1 then
3645: LD_VAR 0 12
3649: PUSH
3650: LD_INT 1
3652: LESS
3653: IFFALSE 3663
// nsci := 1 ;
3655: LD_ADDR_VAR 0 12
3659: PUSH
3660: LD_INT 1
3662: ST_TO_ADDR
// neng := neng - nsci ;
3663: LD_ADDR_VAR 0 11
3667: PUSH
3668: LD_VAR 0 11
3672: PUSH
3673: LD_VAR 0 12
3677: MINUS
3678: ST_TO_ADDR
// nmech := neng div 2 ;
3679: LD_ADDR_VAR 0 13
3683: PUSH
3684: LD_VAR 0 11
3688: PUSH
3689: LD_INT 2
3691: DIV
3692: ST_TO_ADDR
// neng := neng - nmech ;
3693: LD_ADDR_VAR 0 11
3697: PUSH
3698: LD_VAR 0 11
3702: PUSH
3703: LD_VAR 0 13
3707: MINUS
3708: ST_TO_ADDR
// if neng < 1 then
3709: LD_VAR 0 11
3713: PUSH
3714: LD_INT 1
3716: LESS
3717: IFFALSE 3727
// neng := 1 ;
3719: LD_ADDR_VAR 0 11
3723: PUSH
3724: LD_INT 1
3726: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
3727: LD_ADDR_VAR 0 4
3731: PUSH
3732: LD_EXP 41
3736: PUSH
3737: LD_VAR 0 3
3741: ARRAY
3742: PUSH
3743: LD_INT 1
3745: ARRAY
3746: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3747: LD_ADDR_VAR 0 5
3751: PUSH
3752: LD_EXP 41
3756: PUSH
3757: LD_VAR 0 3
3761: ARRAY
3762: PUSH
3763: LD_INT 2
3765: ARRAY
3766: ST_TO_ADDR
// if not is_depot then
3767: LD_EXP 15
3771: NOT
3772: IFFALSE 3796
// prepare_buldozer ( x , y , 2 , pos ) ;
3774: LD_VAR 0 4
3778: PPUSH
3779: LD_VAR 0 5
3783: PPUSH
3784: LD_INT 2
3786: PPUSH
3787: LD_VAR 0 3
3791: PPUSH
3792: CALL 2803 0 4
// commander := true ;
3796: LD_ADDR_EXP 44
3800: PUSH
3801: LD_INT 1
3803: ST_TO_ADDR
// prepare_people ( side , 1 , class_soldier , x , y , 5 , commander ) ;
3804: LD_VAR 0 1
3808: PPUSH
3809: LD_INT 1
3811: PPUSH
3812: LD_INT 1
3814: PPUSH
3815: LD_VAR 0 4
3819: PPUSH
3820: LD_VAR 0 5
3824: PPUSH
3825: LD_INT 5
3827: PPUSH
3828: LD_ADDR_EXP 44
3832: PPUSH
3833: CALL 2255 0 7
// commander := false ;
3837: LD_ADDR_EXP 44
3841: PUSH
3842: LD_INT 0
3844: ST_TO_ADDR
// prepare_people ( side , nsol - 1 , class_soldier , x , y , 5 , commander ) ;
3845: LD_VAR 0 1
3849: PPUSH
3850: LD_VAR 0 14
3854: PUSH
3855: LD_INT 1
3857: MINUS
3858: PPUSH
3859: LD_INT 1
3861: PPUSH
3862: LD_VAR 0 4
3866: PPUSH
3867: LD_VAR 0 5
3871: PPUSH
3872: LD_INT 5
3874: PPUSH
3875: LD_ADDR_EXP 44
3879: PPUSH
3880: CALL 2255 0 7
// prepare_people ( side , neng , class_engineer , x , y , 5 , commander ) ;
3884: LD_VAR 0 1
3888: PPUSH
3889: LD_VAR 0 11
3893: PPUSH
3894: LD_INT 2
3896: PPUSH
3897: LD_VAR 0 4
3901: PPUSH
3902: LD_VAR 0 5
3906: PPUSH
3907: LD_INT 5
3909: PPUSH
3910: LD_ADDR_EXP 44
3914: PPUSH
3915: CALL 2255 0 7
// prepare_people ( side , nmech , class_mechanic , x , y , 5 , commander ) ;
3919: LD_VAR 0 1
3923: PPUSH
3924: LD_VAR 0 13
3928: PPUSH
3929: LD_INT 3
3931: PPUSH
3932: LD_VAR 0 4
3936: PPUSH
3937: LD_VAR 0 5
3941: PPUSH
3942: LD_INT 5
3944: PPUSH
3945: LD_ADDR_EXP 44
3949: PPUSH
3950: CALL 2255 0 7
// prepare_people ( side , nsci , class_scientistic , x , y , 5 , commander ) ;
3954: LD_VAR 0 1
3958: PPUSH
3959: LD_VAR 0 12
3963: PPUSH
3964: LD_INT 4
3966: PPUSH
3967: LD_VAR 0 4
3971: PPUSH
3972: LD_VAR 0 5
3976: PPUSH
3977: LD_INT 5
3979: PPUSH
3980: LD_ADDR_EXP 44
3984: PPUSH
3985: CALL 2255 0 7
// if not global_defined then
3989: LD_LOC 2
3993: NOT
3994: IFFALSE 4004
// global_defined := true ;
3996: LD_ADDR_LOC 2
4000: PUSH
4001: LD_INT 1
4003: ST_TO_ADDR
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4004: LD_EXP 10
4008: PUSH
4009: LD_INT 20
4011: PPUSH
4012: LD_VAR 0 1
4016: PPUSH
4017: CALL_OW 321
4021: PUSH
4022: LD_INT 1
4024: EQUAL
4025: AND
4026: IFFALSE 4043
// SetTech ( tech_SibDet , side , state_researched ) ;
4028: LD_INT 20
4030: PPUSH
4031: LD_VAR 0 1
4035: PPUSH
4036: LD_INT 2
4038: PPUSH
4039: CALL_OW 322
// if def_siberite_bomb = 1 then
4043: LD_EXP 13
4047: PUSH
4048: LD_INT 1
4050: EQUAL
4051: IFFALSE 4085
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4053: LD_INT 25
4055: PPUSH
4056: LD_VAR 0 1
4060: PPUSH
4061: LD_INT 1
4063: PPUSH
4064: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4068: LD_INT 73
4070: PPUSH
4071: LD_VAR 0 1
4075: PPUSH
4076: LD_INT 1
4078: PPUSH
4079: CALL_OW 322
// end else
4083: GO 4115
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4085: LD_INT 25
4087: PPUSH
4088: LD_VAR 0 1
4092: PPUSH
4093: LD_INT 0
4095: PPUSH
4096: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4100: LD_INT 73
4102: PPUSH
4103: LD_VAR 0 1
4107: PPUSH
4108: LD_INT 0
4110: PPUSH
4111: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4115: LD_INT 24
4117: PPUSH
4118: LD_VAR 0 1
4122: PPUSH
4123: LD_INT 0
4125: PPUSH
4126: CALL_OW 322
// end ;
4130: LD_VAR 0 2
4134: RET
// every 0 0$1 do
4135: GO 4137
4137: DISABLE
// if ( def_siberite_bomb > 1 ) then
4138: LD_EXP 13
4142: PUSH
4143: LD_INT 1
4145: GREATER
4146: IFFALSE 4161
// begin wait ( siberite_bomb_Delay ) ;
4148: LD_EXP 23
4152: PPUSH
4153: CALL_OW 67
// EnableSibFiss ;
4157: CALL 4162 0 0
// end ;
4161: END
// function EnableSibFiss ; var i ; begin
4162: LD_INT 0
4164: PPUSH
4165: PPUSH
// for i := 1 to 8 do
4166: LD_ADDR_VAR 0 2
4170: PUSH
4171: DOUBLE
4172: LD_INT 1
4174: DEC
4175: ST_TO_ADDR
4176: LD_INT 8
4178: PUSH
4179: FOR_TO
4180: IFFALSE 4226
// if Side_Positions [ i ] then
4182: LD_EXP 34
4186: PUSH
4187: LD_VAR 0 2
4191: ARRAY
4192: IFFALSE 4224
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4194: LD_INT 25
4196: PPUSH
4197: LD_VAR 0 2
4201: PPUSH
4202: LD_INT 1
4204: PPUSH
4205: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4209: LD_INT 73
4211: PPUSH
4212: LD_VAR 0 2
4216: PPUSH
4217: LD_INT 1
4219: PPUSH
4220: CALL_OW 322
// end ;
4224: GO 4179
4226: POP
4227: POP
// end ;
4228: LD_VAR 0 1
4232: RET
// function prepare_sides ; var i ; begin
4233: LD_INT 0
4235: PPUSH
4236: PPUSH
// global_units := [ ] ;
4237: LD_ADDR_LOC 1
4241: PUSH
4242: EMPTY
4243: ST_TO_ADDR
// global_defined := false ;
4244: LD_ADDR_LOC 2
4248: PUSH
4249: LD_INT 0
4251: ST_TO_ADDR
// for i := 1 to 8 do
4252: LD_ADDR_VAR 0 2
4256: PUSH
4257: DOUBLE
4258: LD_INT 1
4260: DEC
4261: ST_TO_ADDR
4262: LD_INT 8
4264: PUSH
4265: FOR_TO
4266: IFFALSE 4291
// if Side_Positions [ i ] then
4268: LD_EXP 34
4272: PUSH
4273: LD_VAR 0 2
4277: ARRAY
4278: IFFALSE 4289
// prepare_side ( i ) ;
4280: LD_VAR 0 2
4284: PPUSH
4285: CALL 3035 0 1
4289: GO 4265
4291: POP
4292: POP
// end ;
4293: LD_VAR 0 1
4297: RET
// starting begin disable ( 98 ) ;
4298: LD_INT 98
4300: DISABLE_MARKED
// disable ( 99 ) ;
4301: LD_INT 99
4303: DISABLE_MARKED
// disable ( 400 ) ;
4304: LD_INT 400
4306: DISABLE_MARKED
// disable ( 401 ) ;
4307: LD_INT 401
4309: DISABLE_MARKED
// mp_selectmsg := true ;
4310: LD_ADDR_OWVAR 13
4314: PUSH
4315: LD_INT 1
4317: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4318: CALL 681 0 0
// init_map ;
4322: CALL 436 0 0
// init_respawning ;
4326: CALL 13687 0 0
// set_shared_visions_and_alliances ;
4330: CALL 1892 0 0
// ResetFog ;
4334: CALL_OW 335
// ClearAllFogForSide ( Player_Side ) ;
4338: LD_EXP 30
4342: PPUSH
4343: CALL_OW 520
// AnimateTrees ( true ) ;
4347: LD_INT 1
4349: PPUSH
4350: CALL_OW 573
// prepare_sides ;
4354: CALL 4233 0 0
// Init_Win_Condition ;
4358: CALL 7668 0 0
// init_shipments ;
4362: CALL 5514 0 0
// InitApeman ;
4366: CALL 4689 0 0
// your_side := Player_Side ;
4370: LD_ADDR_OWVAR 2
4374: PUSH
4375: LD_EXP 30
4379: ST_TO_ADDR
// music_nat := Side_Nations [ your_side ] ;
4380: LD_ADDR_OWVAR 71
4384: PUSH
4385: LD_EXP 35
4389: PUSH
4390: LD_OWVAR 2
4394: ARRAY
4395: ST_TO_ADDR
// if IAmSpec then
4396: CALL_OW 531
4400: IFFALSE 4424
// begin fogOff ( true ) ;
4402: LD_INT 1
4404: PPUSH
4405: CALL_OW 344
// CenterNowOnXY ( 104 , 69 ) ;
4409: LD_INT 104
4411: PPUSH
4412: LD_INT 69
4414: PPUSH
4415: CALL_OW 86
// enable ( 400 ) ;
4419: LD_INT 400
4421: ENABLE_MARKED
// end else
4422: GO 4470
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4424: LD_EXP 41
4428: PUSH
4429: LD_EXP 34
4433: PUSH
4434: LD_OWVAR 2
4438: ARRAY
4439: ARRAY
4440: PUSH
4441: LD_INT 1
4443: ARRAY
4444: PPUSH
4445: LD_EXP 41
4449: PUSH
4450: LD_EXP 34
4454: PUSH
4455: LD_OWVAR 2
4459: ARRAY
4460: ARRAY
4461: PUSH
4462: LD_INT 2
4464: ARRAY
4465: PPUSH
4466: CALL_OW 86
// end ; BuildUpAreas := [ nw , ne , sw , se ] ;
4470: LD_ADDR_EXP 56
4474: PUSH
4475: LD_INT 12
4477: PUSH
4478: LD_INT 13
4480: PUSH
4481: LD_INT 14
4483: PUSH
4484: LD_INT 15
4486: PUSH
4487: EMPTY
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: ST_TO_ADDR
// BeginBuildUp ;
4493: CALL 6831 0 0
// end ; end_of_file
4497: END
// every 20 20$00 trigger apemanNumber do
4498: LD_EXP 47
4502: IFFALSE 4535
4504: GO 4506
4506: DISABLE
// begin enable ;
4507: ENABLE
// if apeLevel >= 8 then
4508: LD_EXP 52
4512: PUSH
4513: LD_INT 8
4515: GREATEREQUAL
4516: IFFALSE 4521
// disable else
4518: DISABLE
4519: GO 4535
// apeLevel := apeLevel + 1 ;
4521: LD_ADDR_EXP 52
4525: PUSH
4526: LD_EXP 52
4530: PUSH
4531: LD_INT 1
4533: PLUS
4534: ST_TO_ADDR
// end ;
4535: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
4536: LD_EXP 47
4540: PUSH
4541: LD_EXP 48
4545: LESS
4546: IFFALSE 4686
4548: GO 4550
4550: DISABLE
4551: LD_INT 0
4553: PPUSH
4554: PPUSH
4555: PPUSH
4556: PPUSH
// begin enable ;
4557: ENABLE
// for i := 1 to apemanPos do
4558: LD_ADDR_VAR 0 1
4562: PUSH
4563: DOUBLE
4564: LD_INT 1
4566: DEC
4567: ST_TO_ADDR
4568: LD_EXP 50
4572: PUSH
4573: FOR_TO
4574: IFFALSE 4684
// begin if apemanPlayerCount [ i ] then
4576: LD_EXP 51
4580: PUSH
4581: LD_VAR 0 1
4585: ARRAY
4586: IFFALSE 4682
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
4588: LD_EXP 51
4592: PUSH
4593: LD_VAR 0 1
4597: ARRAY
4598: PUSH
4599: LD_EXP 50
4603: PUSH
4604: LD_VAR 0 1
4608: ARRAY
4609: GREATER
4610: IFFALSE 4682
// begin ape := PrepareApeman ;
4612: LD_ADDR_VAR 0 2
4616: PUSH
4617: CALL 5189 0 0
4621: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
4622: LD_VAR 0 2
4626: PPUSH
4627: LD_EXP 53
4631: PUSH
4632: LD_VAR 0 1
4636: ARRAY
4637: PPUSH
4638: LD_INT 0
4640: PPUSH
4641: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
4645: LD_ADDR_EXP 50
4649: PUSH
4650: LD_EXP 50
4654: PPUSH
4655: LD_VAR 0 1
4659: PPUSH
4660: LD_EXP 50
4664: PUSH
4665: LD_VAR 0 1
4669: ARRAY
4670: PUSH
4671: LD_VAR 0 2
4675: UNION
4676: PPUSH
4677: CALL_OW 1
4681: ST_TO_ADDR
// end ; end ; end ;
4682: GO 4573
4684: POP
4685: POP
// end ;
4686: PPOPN 4
4688: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
4689: LD_INT 0
4691: PPUSH
4692: PPUSH
4693: PPUSH
4694: PPUSH
4695: PPUSH
4696: PPUSH
4697: PPUSH
// playersAmount := 0 ;
4698: LD_ADDR_VAR 0 3
4702: PUSH
4703: LD_INT 0
4705: ST_TO_ADDR
// _apeAreas := [ nw , ne , sw , se , ] ;
4706: LD_ADDR_VAR 0 7
4710: PUSH
4711: LD_INT 12
4713: PUSH
4714: LD_INT 13
4716: PUSH
4717: LD_INT 14
4719: PUSH
4720: LD_INT 15
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4729: LD_ADDR_EXP 53
4733: PUSH
4734: LD_INT 0
4736: PUSH
4737: LD_INT 0
4739: PUSH
4740: LD_INT 0
4742: PUSH
4743: LD_INT 0
4745: PUSH
4746: LD_INT 0
4748: PUSH
4749: LD_INT 0
4751: PUSH
4752: LD_INT 0
4754: PUSH
4755: LD_INT 0
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: ST_TO_ADDR
// for j = 1 to Side_Positions do
4768: LD_ADDR_VAR 0 4
4772: PUSH
4773: DOUBLE
4774: LD_INT 1
4776: DEC
4777: ST_TO_ADDR
4778: LD_EXP 34
4782: PUSH
4783: FOR_TO
4784: IFFALSE 4851
// if Side_Positions [ j ] then
4786: LD_EXP 34
4790: PUSH
4791: LD_VAR 0 4
4795: ARRAY
4796: IFFALSE 4849
// begin playersAmount := playersAmount + 1 ;
4798: LD_ADDR_VAR 0 3
4802: PUSH
4803: LD_VAR 0 3
4807: PUSH
4808: LD_INT 1
4810: PLUS
4811: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
4812: LD_ADDR_EXP 53
4816: PUSH
4817: LD_EXP 53
4821: PPUSH
4822: LD_VAR 0 4
4826: PPUSH
4827: LD_VAR 0 7
4831: PUSH
4832: LD_EXP 34
4836: PUSH
4837: LD_VAR 0 4
4841: ARRAY
4842: ARRAY
4843: PPUSH
4844: CALL_OW 1
4848: ST_TO_ADDR
// end ;
4849: GO 4783
4851: POP
4852: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
4853: LD_ADDR_EXP 49
4857: PUSH
4858: LD_INT 3
4860: PUSH
4861: LD_EXP 19
4865: MUL
4866: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
4867: LD_ADDR_EXP 47
4871: PUSH
4872: LD_VAR 0 3
4876: PUSH
4877: LD_EXP 49
4881: MUL
4882: ST_TO_ADDR
// apemanLimit := apemanNumber ;
4883: LD_ADDR_EXP 48
4887: PUSH
4888: LD_EXP 47
4892: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4893: LD_ADDR_EXP 50
4897: PUSH
4898: LD_INT 0
4900: PUSH
4901: LD_INT 0
4903: PUSH
4904: LD_INT 0
4906: PUSH
4907: LD_INT 0
4909: PUSH
4910: LD_INT 0
4912: PUSH
4913: LD_INT 0
4915: PUSH
4916: LD_INT 0
4918: PUSH
4919: LD_INT 0
4921: PUSH
4922: EMPTY
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4932: LD_ADDR_EXP 51
4936: PUSH
4937: LD_INT 0
4939: PUSH
4940: LD_INT 0
4942: PUSH
4943: LD_INT 0
4945: PUSH
4946: LD_INT 0
4948: PUSH
4949: LD_INT 0
4951: PUSH
4952: LD_INT 0
4954: PUSH
4955: LD_INT 0
4957: PUSH
4958: LD_INT 0
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: ST_TO_ADDR
// apeLevel := 1 ;
4971: LD_ADDR_EXP 52
4975: PUSH
4976: LD_INT 1
4978: ST_TO_ADDR
// if not apemanNumber then
4979: LD_EXP 47
4983: NOT
4984: IFFALSE 4988
// exit ;
4986: GO 5184
// for i := 1 to apemanPerPlayer do
4988: LD_ADDR_VAR 0 2
4992: PUSH
4993: DOUBLE
4994: LD_INT 1
4996: DEC
4997: ST_TO_ADDR
4998: LD_EXP 49
5002: PUSH
5003: FOR_TO
5004: IFFALSE 5182
// begin for j := 1 to Side_Positions do
5006: LD_ADDR_VAR 0 4
5010: PUSH
5011: DOUBLE
5012: LD_INT 1
5014: DEC
5015: ST_TO_ADDR
5016: LD_EXP 34
5020: PUSH
5021: FOR_TO
5022: IFFALSE 5178
// if Side_Positions [ j ] then
5024: LD_EXP 34
5028: PUSH
5029: LD_VAR 0 4
5033: ARRAY
5034: IFFALSE 5176
// begin pos := Side_Positions [ j ] ;
5036: LD_ADDR_VAR 0 6
5040: PUSH
5041: LD_EXP 34
5045: PUSH
5046: LD_VAR 0 4
5050: ARRAY
5051: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5052: LD_ADDR_EXP 51
5056: PUSH
5057: LD_EXP 51
5061: PPUSH
5062: LD_VAR 0 4
5066: PPUSH
5067: LD_EXP 51
5071: PUSH
5072: LD_VAR 0 4
5076: ARRAY
5077: PUSH
5078: LD_INT 1
5080: PLUS
5081: PPUSH
5082: CALL_OW 1
5086: ST_TO_ADDR
// ape := PrepareApeman ;
5087: LD_ADDR_VAR 0 5
5091: PUSH
5092: CALL 5189 0 0
5096: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5097: LD_ADDR_EXP 50
5101: PUSH
5102: LD_EXP 50
5106: PPUSH
5107: LD_VAR 0 4
5111: PPUSH
5112: LD_EXP 50
5116: PUSH
5117: LD_VAR 0 4
5121: ARRAY
5122: PPUSH
5123: LD_EXP 50
5127: PUSH
5128: LD_VAR 0 4
5132: ARRAY
5133: PUSH
5134: LD_INT 1
5136: PLUS
5137: PPUSH
5138: LD_VAR 0 5
5142: PPUSH
5143: CALL_OW 1
5147: PPUSH
5148: CALL_OW 1
5152: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5153: LD_VAR 0 5
5157: PPUSH
5158: LD_EXP 53
5162: PUSH
5163: LD_VAR 0 4
5167: ARRAY
5168: PPUSH
5169: LD_INT 0
5171: PPUSH
5172: CALL_OW 49
// end ;
5176: GO 5021
5178: POP
5179: POP
// end ;
5180: GO 5003
5182: POP
5183: POP
// end ;
5184: LD_VAR 0 1
5188: RET
// export function PrepareApeman ; var bonus ; begin
5189: LD_INT 0
5191: PPUSH
5192: PPUSH
// uc_side := 0 ;
5193: LD_ADDR_OWVAR 20
5197: PUSH
5198: LD_INT 0
5200: ST_TO_ADDR
// uc_nation := 0 ;
5201: LD_ADDR_OWVAR 21
5205: PUSH
5206: LD_INT 0
5208: ST_TO_ADDR
// InitHc ;
5209: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
5213: LD_ADDR_VAR 0 2
5217: PUSH
5218: LD_INT 1
5220: NEG
5221: PUSH
5222: LD_INT 0
5224: PUSH
5225: LD_INT 1
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: LIST
5232: PUSH
5233: LD_OWVAR 1
5237: PUSH
5238: LD_INT 3
5240: MOD
5241: PUSH
5242: LD_INT 1
5244: PLUS
5245: ARRAY
5246: ST_TO_ADDR
// hc_class := class_apeman ;
5247: LD_ADDR_OWVAR 28
5251: PUSH
5252: LD_INT 12
5254: ST_TO_ADDR
// hc_gallery :=  ;
5255: LD_ADDR_OWVAR 33
5259: PUSH
5260: LD_STRING 
5262: ST_TO_ADDR
// hc_name :=  ;
5263: LD_ADDR_OWVAR 26
5267: PUSH
5268: LD_STRING 
5270: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
5271: LD_ADDR_OWVAR 31
5275: PUSH
5276: LD_EXP 52
5280: PUSH
5281: LD_VAR 0 2
5285: PLUS
5286: PUSH
5287: LD_EXP 52
5291: PUSH
5292: LD_VAR 0 2
5296: PLUS
5297: PUSH
5298: LD_EXP 52
5302: PUSH
5303: LD_VAR 0 2
5307: PLUS
5308: PUSH
5309: LD_EXP 52
5313: PUSH
5314: LD_VAR 0 2
5318: PLUS
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
5326: LD_ADDR_OWVAR 35
5330: PUSH
5331: LD_INT 10
5333: PUSH
5334: LD_VAR 0 2
5338: MUL
5339: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5340: LD_ADDR_OWVAR 29
5344: PUSH
5345: LD_INT 12
5347: PUSH
5348: LD_INT 10
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: ST_TO_ADDR
// result := CreateHuman ;
5355: LD_ADDR_VAR 0 1
5359: PUSH
5360: CALL_OW 44
5364: ST_TO_ADDR
// end ;
5365: LD_VAR 0 1
5369: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
5370: LD_INT 0
5372: PPUSH
5373: PPUSH
5374: PPUSH
// if not ape then
5375: LD_VAR 0 1
5379: NOT
5380: IFFALSE 5384
// exit ;
5382: GO 5509
// side := GetSide ( ape ) ;
5384: LD_ADDR_VAR 0 3
5388: PUSH
5389: LD_VAR 0 1
5393: PPUSH
5394: CALL_OW 255
5398: ST_TO_ADDR
// if not side then
5399: LD_VAR 0 3
5403: NOT
5404: IFFALSE 5458
// begin for i = 1 to apemanPos do
5406: LD_ADDR_VAR 0 4
5410: PUSH
5411: DOUBLE
5412: LD_INT 1
5414: DEC
5415: ST_TO_ADDR
5416: LD_EXP 50
5420: PUSH
5421: FOR_TO
5422: IFFALSE 5456
// if ape in apemanPos [ i ] then
5424: LD_VAR 0 1
5428: PUSH
5429: LD_EXP 50
5433: PUSH
5434: LD_VAR 0 4
5438: ARRAY
5439: IN
5440: IFFALSE 5454
// begin side := i ;
5442: LD_ADDR_VAR 0 3
5446: PUSH
5447: LD_VAR 0 4
5451: ST_TO_ADDR
// break ;
5452: GO 5456
// end ;
5454: GO 5421
5456: POP
5457: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
5458: LD_ADDR_EXP 50
5462: PUSH
5463: LD_EXP 50
5467: PPUSH
5468: LD_VAR 0 3
5472: PPUSH
5473: LD_EXP 50
5477: PUSH
5478: LD_VAR 0 3
5482: ARRAY
5483: PUSH
5484: LD_VAR 0 1
5488: DIFF
5489: PPUSH
5490: CALL_OW 1
5494: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
5495: LD_ADDR_EXP 47
5499: PUSH
5500: LD_EXP 47
5504: PUSH
5505: LD_INT 1
5507: MINUS
5508: ST_TO_ADDR
// end ; end_of_file
5509: LD_VAR 0 2
5513: RET
// var shipment , tictac ; export function init_shipments ; begin
5514: LD_INT 0
5516: PPUSH
// shipment := Rand ( 0 , 3 ) ;
5517: LD_ADDR_LOC 4
5521: PUSH
5522: LD_INT 0
5524: PPUSH
5525: LD_INT 3
5527: PPUSH
5528: CALL_OW 12
5532: ST_TO_ADDR
// tictac := 0 ;
5533: LD_ADDR_LOC 5
5537: PUSH
5538: LD_INT 0
5540: ST_TO_ADDR
// end ;
5541: LD_VAR 0 1
5545: RET
// every 0 0$5 + 0 0$1.1 do var d ;
5546: GO 5548
5548: DISABLE
5549: LD_INT 0
5551: PPUSH
// begin case tick of 1 .. 1 1$0 :
5552: LD_OWVAR 1
5556: PUSH
5557: LD_INT 1
5559: DOUBLE
5560: GREATEREQUAL
5561: IFFALSE 5569
5563: LD_INT 2100
5565: DOUBLE
5566: LESSEQUAL
5567: IFTRUE 5571
5569: GO 5582
5571: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5572: LD_ADDR_VAR 0 1
5576: PUSH
5577: LD_INT 150
5579: ST_TO_ADDR
5580: GO 5765
5582: LD_INT 2100
5584: PUSH
5585: LD_INT 1
5587: PLUS
5588: DOUBLE
5589: GREATEREQUAL
5590: IFFALSE 5598
5592: LD_INT 10500
5594: DOUBLE
5595: LESSEQUAL
5596: IFTRUE 5600
5598: GO 5611
5600: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5601: LD_ADDR_VAR 0 1
5605: PUSH
5606: LD_INT 100
5608: ST_TO_ADDR
5609: GO 5765
5611: LD_INT 10500
5613: PUSH
5614: LD_INT 1
5616: PLUS
5617: DOUBLE
5618: GREATEREQUAL
5619: IFFALSE 5627
5621: LD_INT 21000
5623: DOUBLE
5624: LESSEQUAL
5625: IFTRUE 5629
5627: GO 5640
5629: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5630: LD_ADDR_VAR 0 1
5634: PUSH
5635: LD_INT 90
5637: ST_TO_ADDR
5638: GO 5765
5640: LD_INT 21000
5642: PUSH
5643: LD_INT 1
5645: PLUS
5646: DOUBLE
5647: GREATEREQUAL
5648: IFFALSE 5656
5650: LD_INT 42000
5652: DOUBLE
5653: LESSEQUAL
5654: IFTRUE 5658
5656: GO 5669
5658: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5659: LD_ADDR_VAR 0 1
5663: PUSH
5664: LD_INT 70
5666: ST_TO_ADDR
5667: GO 5765
5669: LD_INT 42000
5671: PUSH
5672: LD_INT 1
5674: PLUS
5675: DOUBLE
5676: GREATEREQUAL
5677: IFFALSE 5685
5679: LD_INT 63000
5681: DOUBLE
5682: LESSEQUAL
5683: IFTRUE 5687
5685: GO 5698
5687: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5688: LD_ADDR_VAR 0 1
5692: PUSH
5693: LD_INT 60
5695: ST_TO_ADDR
5696: GO 5765
5698: LD_INT 63000
5700: PUSH
5701: LD_INT 1
5703: PLUS
5704: DOUBLE
5705: GREATEREQUAL
5706: IFFALSE 5714
5708: LD_INT 105000
5710: DOUBLE
5711: LESSEQUAL
5712: IFTRUE 5716
5714: GO 5727
5716: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5717: LD_ADDR_VAR 0 1
5721: PUSH
5722: LD_INT 35
5724: ST_TO_ADDR
5725: GO 5765
5727: LD_INT 105000
5729: PUSH
5730: LD_INT 1
5732: PLUS
5733: DOUBLE
5734: GREATEREQUAL
5735: IFFALSE 5743
5737: LD_INT 630000
5739: DOUBLE
5740: LESSEQUAL
5741: IFTRUE 5745
5743: GO 5756
5745: POP
// d := 20 ; else
5746: LD_ADDR_VAR 0 1
5750: PUSH
5751: LD_INT 20
5753: ST_TO_ADDR
5754: GO 5765
5756: POP
// d := 0 ; end ;
5757: LD_ADDR_VAR 0 1
5761: PUSH
5762: LD_INT 0
5764: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5765: LD_INT 1
5767: PPUSH
5768: LD_INT 10000
5770: PPUSH
5771: CALL_OW 12
5775: PUSH
5776: LD_VAR 0 1
5780: PUSH
5781: LD_EXP 22
5785: MUL
5786: LESSEQUAL
5787: IFFALSE 5863
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5789: LD_INT 1
5791: PPUSH
5792: LD_INT 140
5794: PPUSH
5795: CALL_OW 12
5799: PPUSH
5800: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
5804: LD_ADDR_LOC 4
5808: PUSH
5809: LD_LOC 4
5813: PUSH
5814: LD_INT 1
5816: PLUS
5817: PUSH
5818: LD_INT 4
5820: MOD
5821: ST_TO_ADDR
// if GetResourceArea ( nw + shipment , mat_cans ) < 50 then
5822: LD_INT 12
5824: PUSH
5825: LD_LOC 4
5829: PLUS
5830: PPUSH
5831: LD_INT 1
5833: PPUSH
5834: CALL_OW 287
5838: PUSH
5839: LD_INT 50
5841: LESS
5842: IFFALSE 5863
// CreateCratesArea ( 5 , nw + shipment , true ) ;
5844: LD_INT 5
5846: PPUSH
5847: LD_INT 12
5849: PUSH
5850: LD_LOC 4
5854: PLUS
5855: PPUSH
5856: LD_INT 1
5858: PPUSH
5859: CALL_OW 55
// end ; enable ;
5863: ENABLE
// end ;
5864: PPOPN 1
5866: END
// every 0 0$10 trigger TICK > ( ( 3 3$0 * tictac ) + tictac * ( 1 1$30 - shipments_density * ( 0 0$2 ) ) ) do var i , amount ;
5867: LD_OWVAR 1
5871: PUSH
5872: LD_INT 6300
5874: PUSH
5875: LD_LOC 5
5879: MUL
5880: PUSH
5881: LD_LOC 5
5885: PUSH
5886: LD_INT 3150
5888: PUSH
5889: LD_EXP 22
5893: PUSH
5894: LD_INT 70
5896: MUL
5897: MINUS
5898: MUL
5899: PLUS
5900: GREATER
5901: IFFALSE 6004
5903: GO 5905
5905: DISABLE
5906: LD_INT 0
5908: PPUSH
5909: PPUSH
// begin tictac := tictac + 1 ;
5910: LD_ADDR_LOC 5
5914: PUSH
5915: LD_LOC 5
5919: PUSH
5920: LD_INT 1
5922: PLUS
5923: ST_TO_ADDR
// amount := Rand ( 3 , 5 ) ;
5924: LD_ADDR_VAR 0 2
5928: PUSH
5929: LD_INT 3
5931: PPUSH
5932: LD_INT 5
5934: PPUSH
5935: CALL_OW 12
5939: ST_TO_ADDR
// for i = 0 to 3 do
5940: LD_ADDR_VAR 0 1
5944: PUSH
5945: DOUBLE
5946: LD_INT 0
5948: DEC
5949: ST_TO_ADDR
5950: LD_INT 3
5952: PUSH
5953: FOR_TO
5954: IFFALSE 6001
// if GetResourceArea ( Base1 + i , mat_cans ) < 20 then
5956: LD_INT 1
5958: PUSH
5959: LD_VAR 0 1
5963: PLUS
5964: PPUSH
5965: LD_INT 1
5967: PPUSH
5968: CALL_OW 287
5972: PUSH
5973: LD_INT 20
5975: LESS
5976: IFFALSE 5999
// CreateCratesArea ( amount , Base1 + i , true ) ;
5978: LD_VAR 0 2
5982: PPUSH
5983: LD_INT 1
5985: PUSH
5986: LD_VAR 0 1
5990: PLUS
5991: PPUSH
5992: LD_INT 1
5994: PPUSH
5995: CALL_OW 55
5999: GO 5953
6001: POP
6002: POP
// enable ;
6003: ENABLE
// end ; end_of_file
6004: PPOPN 2
6006: END
// var strength ; function Update_Flags ; var un ; begin
6007: LD_INT 0
6009: PPUSH
6010: PPUSH
// for un in battle_flags_id do
6011: LD_ADDR_VAR 0 2
6015: PUSH
6016: LD_EXP 45
6020: PUSH
6021: FOR_IN
6022: IFFALSE 6097
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6024: LD_VAR 0 2
6028: PPUSH
6029: LD_INT 1
6031: PUSH
6032: LD_LOC 6
6036: PUSH
6037: EMPTY
6038: LIST
6039: LIST
6040: PUSH
6041: LD_INT 2
6043: PUSH
6044: LD_LOC 6
6048: PUSH
6049: LD_INT 2
6051: DIV
6052: PUSH
6053: EMPTY
6054: LIST
6055: LIST
6056: PUSH
6057: LD_INT 3
6059: PUSH
6060: LD_LOC 6
6064: PUSH
6065: LD_INT 5
6067: DIV
6068: PUSH
6069: EMPTY
6070: LIST
6071: LIST
6072: PUSH
6073: LD_INT 20
6075: PUSH
6076: LD_LOC 6
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: PPUSH
6091: CALL_OW 423
6095: GO 6021
6097: POP
6098: POP
// end ;
6099: LD_VAR 0 1
6103: RET
// every 0 0$0.1 do var un ;
6104: GO 6106
6106: DISABLE
6107: LD_INT 0
6109: PPUSH
// begin if not def_morale_flags then
6110: LD_EXP 9
6114: NOT
6115: IFFALSE 6119
// exit ;
6117: GO 6196
// if not morale_decreasing_time then
6119: LD_EXP 46
6123: NOT
6124: IFFALSE 6128
// exit ;
6126: GO 6196
// strength = 100 ;
6128: LD_ADDR_LOC 6
6132: PUSH
6133: LD_INT 100
6135: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
6136: LD_EXP 46
6140: PPUSH
6141: CALL_OW 67
// strength := strength - 1 ;
6145: LD_ADDR_LOC 6
6149: PUSH
6150: LD_LOC 6
6154: PUSH
6155: LD_INT 1
6157: MINUS
6158: ST_TO_ADDR
// Update_Flags ;
6159: CALL 6007 0 0
// until not strength ;
6163: LD_LOC 6
6167: NOT
6168: IFFALSE 6136
// for un in battle_flags_id do
6170: LD_ADDR_VAR 0 1
6174: PUSH
6175: LD_EXP 45
6179: PUSH
6180: FOR_IN
6181: IFFALSE 6194
// KillBattleFlag ( un ) ;
6183: LD_VAR 0 1
6187: PPUSH
6188: CALL_OW 419
6192: GO 6180
6194: POP
6195: POP
// end ; end_of_file
6196: PPOPN 1
6198: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
6199: LD_INT 0
6201: PPUSH
6202: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
6203: LD_ADDR_VAR 0 2
6207: PUSH
6208: LD_STRING #Multi1x1-Time
6210: PUSH
6211: LD_OWVAR 1
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: ST_TO_ADDR
// if WaitServerStrings then
6220: LD_EXP 55
6224: IFFALSE 6242
// AllStrings = AllStrings ^ WaitServerStrings ;
6226: LD_ADDR_VAR 0 2
6230: PUSH
6231: LD_VAR 0 2
6235: PUSH
6236: LD_EXP 55
6240: ADD
6241: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
6242: LD_INT 0
6244: PUSH
6245: LD_EXP 23
6249: PUSH
6250: LD_OWVAR 1
6254: MINUS
6255: LESSEQUAL
6256: IFFALSE 6287
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
6258: LD_ADDR_VAR 0 2
6262: PUSH
6263: LD_VAR 0 2
6267: PUSH
6268: LD_STRING #allowedsibbomb
6270: PUSH
6271: LD_EXP 23
6275: PUSH
6276: LD_OWVAR 1
6280: MINUS
6281: PUSH
6282: EMPTY
6283: LIST
6284: LIST
6285: ADD
6286: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
6287: LD_INT 0
6289: PUSH
6290: LD_EXP 58
6294: PUSH
6295: LD_OWVAR 1
6299: MINUS
6300: LESSEQUAL
6301: IFFALSE 6332
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
6303: LD_ADDR_VAR 0 2
6307: PUSH
6308: LD_VAR 0 2
6312: PUSH
6313: LD_STRING #builduptime
6315: PUSH
6316: LD_EXP 58
6320: PUSH
6321: LD_OWVAR 1
6325: MINUS
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: ADD
6331: ST_TO_ADDR
// if ( ExtraStrings ) then
6332: LD_EXP 54
6336: IFFALSE 6358
// AllStrings := AllStrings ^  ^ ExtraStrings ;
6338: LD_ADDR_VAR 0 2
6342: PUSH
6343: LD_VAR 0 2
6347: PUSH
6348: LD_STRING 
6350: ADD
6351: PUSH
6352: LD_EXP 54
6356: ADD
6357: ST_TO_ADDR
// Display_Strings := AllStrings ;
6358: LD_ADDR_OWVAR 47
6362: PUSH
6363: LD_VAR 0 2
6367: ST_TO_ADDR
// end ;
6368: LD_VAR 0 1
6372: RET
// every 0 0$1 do
6373: GO 6375
6375: DISABLE
// begin ShowTimer ;
6376: CALL 6199 0 0
// enable ;
6380: ENABLE
// end ; end_of_file
6381: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6382: LD_VAR 0 1
6386: PPUSH
6387: CALL_OW 266
6391: PUSH
6392: LD_INT 0
6394: PUSH
6395: LD_INT 1
6397: PUSH
6398: EMPTY
6399: LIST
6400: LIST
6401: IN
6402: IFFALSE 6427
// SetBName ( b , @ & GetSide ( b ) ) ;
6404: LD_VAR 0 1
6408: PPUSH
6409: LD_STRING @
6411: PUSH
6412: LD_VAR 0 1
6416: PPUSH
6417: CALL_OW 255
6421: STR
6422: PPUSH
6423: CALL_OW 500
// end ;
6427: PPOPN 2
6429: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6430: LD_VAR 0 1
6434: PPUSH
6435: CALL_OW 266
6439: PUSH
6440: LD_INT 0
6442: PUSH
6443: LD_INT 1
6445: PUSH
6446: EMPTY
6447: LIST
6448: LIST
6449: IN
6450: IFFALSE 6475
// SetBName ( b , @ & GetSide ( b ) ) ;
6452: LD_VAR 0 1
6456: PPUSH
6457: LD_STRING @
6459: PUSH
6460: LD_VAR 0 1
6464: PPUSH
6465: CALL_OW 255
6469: STR
6470: PPUSH
6471: CALL_OW 500
// end ;
6475: PPOPN 3
6477: END
// on VehicleConstructed ( veh , fac ) do var side ;
6478: LD_INT 0
6480: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6481: LD_VAR 0 1
6485: PPUSH
6486: CALL_OW 263
6490: PUSH
6491: LD_INT 5
6493: EQUAL
6494: IFFALSE 6636
// begin side := GetSide ( veh ) ;
6496: LD_ADDR_VAR 0 3
6500: PUSH
6501: LD_VAR 0 1
6505: PPUSH
6506: CALL_OW 255
6510: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6511: LD_ADDR_EXP 50
6515: PUSH
6516: LD_EXP 50
6520: PPUSH
6521: LD_VAR 0 3
6525: PPUSH
6526: LD_EXP 50
6530: PUSH
6531: LD_VAR 0 3
6535: ARRAY
6536: PPUSH
6537: LD_INT 52
6539: PUSH
6540: EMPTY
6541: LIST
6542: PPUSH
6543: CALL_OW 72
6547: PUSH
6548: LD_INT 22
6550: PUSH
6551: LD_VAR 0 3
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: PUSH
6560: LD_INT 2
6562: PUSH
6563: LD_INT 33
6565: PUSH
6566: LD_INT 5
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: PUSH
6573: LD_INT 25
6575: PUSH
6576: LD_INT 12
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: PUSH
6583: LD_INT 25
6585: PUSH
6586: LD_INT 15
6588: PUSH
6589: EMPTY
6590: LIST
6591: LIST
6592: PUSH
6593: LD_INT 25
6595: PUSH
6596: LD_INT 16
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: PUSH
6603: LD_INT 25
6605: PUSH
6606: LD_INT 17
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: PPUSH
6625: CALL_OW 69
6629: UNION
6630: PPUSH
6631: CALL_OW 1
6635: ST_TO_ADDR
// end ; end ;
6636: PPOPN 3
6638: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6639: LD_INT 0
6641: PPUSH
6642: PPUSH
6643: PPUSH
6644: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6645: LD_VAR 0 1
6649: PPUSH
6650: CALL_OW 257
6654: PUSH
6655: LD_INT 12
6657: PUSH
6658: LD_INT 15
6660: PUSH
6661: LD_INT 17
6663: PUSH
6664: LD_INT 16
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: IN
6673: PUSH
6674: LD_VAR 0 1
6678: PPUSH
6679: CALL_OW 263
6683: PUSH
6684: LD_INT 5
6686: EQUAL
6687: OR
6688: IFFALSE 6699
// ApeKilled ( j ) ;
6690: LD_VAR 0 1
6694: PPUSH
6695: CALL 5370 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6699: LD_VAR 0 1
6703: PPUSH
6704: CALL_OW 266
6708: PUSH
6709: LD_INT 0
6711: PUSH
6712: LD_INT 1
6714: PUSH
6715: EMPTY
6716: LIST
6717: LIST
6718: IN
6719: IFFALSE 6801
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6721: LD_ADDR_VAR 0 4
6725: PUSH
6726: LD_EXP 34
6730: PUSH
6731: LD_VAR 0 1
6735: PPUSH
6736: CALL_OW 255
6740: ARRAY
6741: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6742: LD_ADDR_VAR 0 2
6746: PUSH
6747: LD_EXP 41
6751: PUSH
6752: LD_VAR 0 4
6756: ARRAY
6757: PUSH
6758: LD_INT 1
6760: ARRAY
6761: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6762: LD_ADDR_VAR 0 3
6766: PUSH
6767: LD_EXP 41
6771: PUSH
6772: LD_VAR 0 4
6776: ARRAY
6777: PUSH
6778: LD_INT 2
6780: ARRAY
6781: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
6782: LD_VAR 0 2
6786: PPUSH
6787: LD_VAR 0 3
6791: PPUSH
6792: CALL_OW 420
6796: PPUSH
6797: CALL_OW 419
// end ; end ;
6801: PPOPN 5
6803: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
6804: LD_VAR 0 1
6808: PPUSH
6809: LD_VAR 0 2
6813: PPUSH
6814: LD_VAR 0 3
6818: PPUSH
6819: LD_OWVAR 2
6823: PPUSH
6824: CALL 7429 0 4
6828: PPOPN 3
6830: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
6831: LD_INT 0
6833: PPUSH
6834: PPUSH
6835: PPUSH
// BuildUpTime_Delay = 0 ;
6836: LD_ADDR_EXP 58
6840: PUSH
6841: LD_INT 0
6843: ST_TO_ADDR
// if not def_builduptime then
6844: LD_EXP 14
6848: NOT
6849: IFFALSE 6853
// exit ;
6851: GO 7036
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
6853: LD_ADDR_EXP 58
6857: PUSH
6858: LD_INT 8400
6860: PUSH
6861: LD_INT 2100
6863: PUSH
6864: LD_EXP 14
6868: MUL
6869: PLUS
6870: ST_TO_ADDR
// BuildUpTimeActive := true ;
6871: LD_ADDR_EXP 57
6875: PUSH
6876: LD_INT 1
6878: ST_TO_ADDR
// for i := 1 to 8 do
6879: LD_ADDR_VAR 0 2
6883: PUSH
6884: DOUBLE
6885: LD_INT 1
6887: DEC
6888: ST_TO_ADDR
6889: LD_INT 8
6891: PUSH
6892: FOR_TO
6893: IFFALSE 7034
// if Side_Positions [ i ] then
6895: LD_EXP 34
6899: PUSH
6900: LD_VAR 0 2
6904: ARRAY
6905: IFFALSE 7032
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
6907: LD_EXP 56
6911: PUSH
6912: LD_EXP 34
6916: PUSH
6917: LD_VAR 0 2
6921: ARRAY
6922: ARRAY
6923: PPUSH
6924: LD_INT 5
6926: PPUSH
6927: CALL_OW 424
// for j := 1 to 8 do
6931: LD_ADDR_VAR 0 3
6935: PUSH
6936: DOUBLE
6937: LD_INT 1
6939: DEC
6940: ST_TO_ADDR
6941: LD_INT 8
6943: PUSH
6944: FOR_TO
6945: IFFALSE 7030
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
6947: LD_EXP 34
6951: PUSH
6952: LD_VAR 0 3
6956: ARRAY
6957: PUSH
6958: LD_EXP 32
6962: PUSH
6963: LD_VAR 0 2
6967: ARRAY
6968: PUSH
6969: LD_EXP 32
6973: PUSH
6974: LD_VAR 0 3
6978: ARRAY
6979: NONEQUAL
6980: PUSH
6981: LD_EXP 38
6985: NOT
6986: PUSH
6987: LD_VAR 0 2
6991: PUSH
6992: LD_VAR 0 3
6996: NONEQUAL
6997: AND
6998: OR
6999: AND
7000: IFFALSE 7028
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
7002: LD_VAR 0 3
7006: PPUSH
7007: LD_EXP 56
7011: PUSH
7012: LD_EXP 34
7016: PUSH
7017: LD_VAR 0 2
7021: ARRAY
7022: ARRAY
7023: PPUSH
7024: CALL_OW 333
7028: GO 6944
7030: POP
7031: POP
// end ;
7032: GO 6892
7034: POP
7035: POP
// end ;
7036: LD_VAR 0 1
7040: RET
// export function EndBuildUp ; var i , j ; begin
7041: LD_INT 0
7043: PPUSH
7044: PPUSH
7045: PPUSH
// BuildUpTimeActive := false ;
7046: LD_ADDR_EXP 57
7050: PUSH
7051: LD_INT 0
7053: ST_TO_ADDR
// for i := 1 to 8 do
7054: LD_ADDR_VAR 0 2
7058: PUSH
7059: DOUBLE
7060: LD_INT 1
7062: DEC
7063: ST_TO_ADDR
7064: LD_INT 8
7066: PUSH
7067: FOR_TO
7068: IFFALSE 7209
// if Side_Positions [ i ] then
7070: LD_EXP 34
7074: PUSH
7075: LD_VAR 0 2
7079: ARRAY
7080: IFFALSE 7207
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
7082: LD_EXP 56
7086: PUSH
7087: LD_EXP 34
7091: PUSH
7092: LD_VAR 0 2
7096: ARRAY
7097: ARRAY
7098: PPUSH
7099: LD_INT 0
7101: PPUSH
7102: CALL_OW 424
// for j := 1 to 8 do
7106: LD_ADDR_VAR 0 3
7110: PUSH
7111: DOUBLE
7112: LD_INT 1
7114: DEC
7115: ST_TO_ADDR
7116: LD_INT 8
7118: PUSH
7119: FOR_TO
7120: IFFALSE 7205
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
7122: LD_EXP 34
7126: PUSH
7127: LD_VAR 0 3
7131: ARRAY
7132: PUSH
7133: LD_EXP 32
7137: PUSH
7138: LD_VAR 0 2
7142: ARRAY
7143: PUSH
7144: LD_EXP 32
7148: PUSH
7149: LD_VAR 0 3
7153: ARRAY
7154: NONEQUAL
7155: PUSH
7156: LD_EXP 38
7160: NOT
7161: PUSH
7162: LD_VAR 0 2
7166: PUSH
7167: LD_VAR 0 3
7171: NONEQUAL
7172: AND
7173: OR
7174: AND
7175: IFFALSE 7203
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
7177: LD_VAR 0 3
7181: PPUSH
7182: LD_EXP 56
7186: PUSH
7187: LD_EXP 34
7191: PUSH
7192: LD_VAR 0 2
7196: ARRAY
7197: ARRAY
7198: PPUSH
7199: CALL_OW 334
7203: GO 7119
7205: POP
7206: POP
// end ;
7207: GO 7067
7209: POP
7210: POP
// end ;
7211: LD_VAR 0 1
7215: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
7216: LD_EXP 57
7220: IFFALSE 7395
7222: GO 7224
7224: DISABLE
7225: LD_INT 0
7227: PPUSH
7228: PPUSH
// begin for i := 1 to 8 do
7229: LD_ADDR_VAR 0 1
7233: PUSH
7234: DOUBLE
7235: LD_INT 1
7237: DEC
7238: ST_TO_ADDR
7239: LD_INT 8
7241: PUSH
7242: FOR_TO
7243: IFFALSE 7392
// if Side_Positions [ i ] then
7245: LD_EXP 34
7249: PUSH
7250: LD_VAR 0 1
7254: ARRAY
7255: IFFALSE 7390
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
7257: LD_ADDR_VAR 0 2
7261: PUSH
7262: LD_EXP 56
7266: PUSH
7267: LD_EXP 34
7271: PUSH
7272: LD_VAR 0 1
7276: ARRAY
7277: ARRAY
7278: PPUSH
7279: LD_INT 2
7281: PUSH
7282: LD_INT 21
7284: PUSH
7285: LD_INT 1
7287: PUSH
7288: EMPTY
7289: LIST
7290: LIST
7291: PUSH
7292: LD_INT 21
7294: PUSH
7295: LD_INT 2
7297: PUSH
7298: EMPTY
7299: LIST
7300: LIST
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: LIST
7306: PUSH
7307: LD_INT 22
7309: PUSH
7310: LD_OWVAR 2
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PPUSH
7323: CALL_OW 70
7327: PUSH
7328: FOR_IN
7329: IFFALSE 7388
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
7331: LD_EXP 32
7335: PUSH
7336: LD_VAR 0 1
7340: ARRAY
7341: PUSH
7342: LD_EXP 32
7346: PUSH
7347: LD_OWVAR 2
7351: ARRAY
7352: NONEQUAL
7353: PUSH
7354: LD_EXP 38
7358: NOT
7359: PUSH
7360: LD_VAR 0 1
7364: PUSH
7365: LD_OWVAR 2
7369: NONEQUAL
7370: AND
7371: OR
7372: IFFALSE 7386
// ComMoveToArea ( un , BuildUpEscape ) ;
7374: LD_VAR 0 2
7378: PPUSH
7379: LD_INT 16
7381: PPUSH
7382: CALL_OW 113
7386: GO 7328
7388: POP
7389: POP
7390: GO 7242
7392: POP
7393: POP
// enable ;
7394: ENABLE
// end ;
7395: PPOPN 2
7397: END
// every 0 0$1 trigger def_builduptime do
7398: LD_EXP 14
7402: IFFALSE 7428
7404: GO 7406
7406: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
7407: LD_INT 8400
7409: PUSH
7410: LD_EXP 14
7414: PUSH
7415: LD_INT 2100
7417: MUL
7418: PLUS
7419: PPUSH
7420: CALL_OW 67
// EndBuildUp ;
7424: CALL 7041 0 0
// end ; end_of_file
7428: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
7429: LD_INT 0
7431: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
7432: LD_VAR 0 1
7436: PPUSH
7437: CALL_OW 255
7441: PUSH
7442: LD_VAR 0 4
7446: EQUAL
7447: IFFALSE 7466
// begin SetAchievement ( ACH_RAD ) ;
7449: LD_STRING ACH_RAD
7451: PPUSH
7452: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
7456: LD_STRING ACH_NL
7458: PPUSH
7459: LD_INT 1
7461: PPUSH
7462: CALL_OW 564
// end end ;
7466: LD_VAR 0 5
7470: RET
// export function SA_Win ( side ) ; begin
7471: LD_INT 0
7473: PPUSH
// case side of 1 :
7474: LD_VAR 0 1
7478: PUSH
7479: LD_INT 1
7481: DOUBLE
7482: EQUAL
7483: IFTRUE 7487
7485: GO 7500
7487: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
7488: LD_STRING ACH_AH
7490: PPUSH
7491: LD_INT 1
7493: PPUSH
7494: CALL_OW 564
7498: GO 7663
7500: LD_INT 2
7502: DOUBLE
7503: EQUAL
7504: IFTRUE 7508
7506: GO 7521
7508: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
7509: LD_STRING ACH_E
7511: PPUSH
7512: LD_INT 1
7514: PPUSH
7515: CALL_OW 564
7519: GO 7663
7521: LD_INT 3
7523: DOUBLE
7524: EQUAL
7525: IFTRUE 7529
7527: GO 7542
7529: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
7530: LD_STRING ACH_OOL
7532: PPUSH
7533: LD_INT 1
7535: PPUSH
7536: CALL_OW 564
7540: GO 7663
7542: LD_INT 1
7544: PUSH
7545: LD_INT 2
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: DOUBLE
7552: EQUAL
7553: IFTRUE 7557
7555: GO 7582
7557: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7558: LD_STRING ACH_AH
7560: PPUSH
7561: LD_REAL  5.00000000000000E-0001
7564: PPUSH
7565: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7569: LD_STRING ACH_E
7571: PPUSH
7572: LD_REAL  5.00000000000000E-0001
7575: PPUSH
7576: CALL_OW 564
// end ; [ 2 , 3 ] :
7580: GO 7663
7582: LD_INT 2
7584: PUSH
7585: LD_INT 3
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: DOUBLE
7592: EQUAL
7593: IFTRUE 7597
7595: GO 7622
7597: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
7598: LD_STRING ACH_OOL
7600: PPUSH
7601: LD_REAL  5.00000000000000E-0001
7604: PPUSH
7605: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7609: LD_STRING ACH_E
7611: PPUSH
7612: LD_REAL  5.00000000000000E-0001
7615: PPUSH
7616: CALL_OW 564
// end ; [ 3 , 1 ] :
7620: GO 7663
7622: LD_INT 3
7624: PUSH
7625: LD_INT 1
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: DOUBLE
7632: EQUAL
7633: IFTRUE 7637
7635: GO 7662
7637: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7638: LD_STRING ACH_AH
7640: PPUSH
7641: LD_REAL  5.00000000000000E-0001
7644: PPUSH
7645: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
7649: LD_STRING ACH_OOL
7651: PPUSH
7652: LD_REAL  5.00000000000000E-0001
7655: PPUSH
7656: CALL_OW 564
// end ; end ;
7660: GO 7663
7662: POP
// end ; end_of_file
7663: LD_VAR 0 2
7667: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
7668: LD_INT 0
7670: PPUSH
7671: PPUSH
// enable ( 98 ) ;
7672: LD_INT 98
7674: ENABLE_MARKED
// GameEnded = false ;
7675: LD_ADDR_LOC 8
7679: PUSH
7680: LD_INT 0
7682: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7683: LD_ADDR_LOC 7
7687: PUSH
7688: LD_INT 0
7690: PUSH
7691: LD_INT 0
7693: PUSH
7694: LD_INT 0
7696: PUSH
7697: LD_INT 0
7699: PUSH
7700: LD_INT 0
7702: PUSH
7703: LD_INT 0
7705: PUSH
7706: LD_INT 0
7708: PUSH
7709: LD_INT 0
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: ST_TO_ADDR
// unfoged = false ;
7722: LD_ADDR_LOC 9
7726: PUSH
7727: LD_INT 0
7729: ST_TO_ADDR
// defeated_specs := [ ] ;
7730: LD_ADDR_LOC 10
7734: PUSH
7735: EMPTY
7736: ST_TO_ADDR
// for i = 1 to side_positions do
7737: LD_ADDR_VAR 0 2
7741: PUSH
7742: DOUBLE
7743: LD_INT 1
7745: DEC
7746: ST_TO_ADDR
7747: LD_EXP 34
7751: PUSH
7752: FOR_TO
7753: IFFALSE 7793
// if not side_positions [ i ] then
7755: LD_EXP 34
7759: PUSH
7760: LD_VAR 0 2
7764: ARRAY
7765: NOT
7766: IFFALSE 7791
// defeated = replace ( defeated , i , true ) ;
7768: LD_ADDR_LOC 7
7772: PUSH
7773: LD_LOC 7
7777: PPUSH
7778: LD_VAR 0 2
7782: PPUSH
7783: LD_INT 1
7785: PPUSH
7786: CALL_OW 1
7790: ST_TO_ADDR
7791: GO 7752
7793: POP
7794: POP
// end ;
7795: LD_VAR 0 1
7799: RET
// function CanWinLoose ; begin
7800: LD_INT 0
7802: PPUSH
// Result := true ;
7803: LD_ADDR_VAR 0 1
7807: PUSH
7808: LD_INT 1
7810: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
7811: CALL_OW 518
7815: PUSH
7816: CALL_OW 519
7820: PUSH
7821: LD_INT 0
7823: GREATER
7824: AND
7825: IFFALSE 7835
// Result := false ;
7827: LD_ADDR_VAR 0 1
7831: PUSH
7832: LD_INT 0
7834: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7835: CALL_OW 531
7839: PUSH
7840: CALL_OW 519
7844: PUSH
7845: LD_INT 1
7847: GREATER
7848: AND
7849: IFFALSE 7859
// Result := false ;
7851: LD_ADDR_VAR 0 1
7855: PUSH
7856: LD_INT 0
7858: ST_TO_ADDR
// end ;
7859: LD_VAR 0 1
7863: RET
// export function HasPower ( i ) ; var k , h ; begin
7864: LD_INT 0
7866: PPUSH
7867: PPUSH
7868: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
7869: LD_VAR 0 1
7873: PPUSH
7874: CALL_OW 108
7878: NOT
7879: PUSH
7880: LD_EXP 39
7884: PUSH
7885: LD_VAR 0 1
7889: ARRAY
7890: NOT
7891: AND
7892: PUSH
7893: LD_OWVAR 4
7897: AND
7898: IFFALSE 7910
// begin result = false ;
7900: LD_ADDR_VAR 0 2
7904: PUSH
7905: LD_INT 0
7907: ST_TO_ADDR
// end else
7908: GO 8205
// case def_win_rules of 0 :
7910: LD_EXP 27
7914: PUSH
7915: LD_INT 0
7917: DOUBLE
7918: EQUAL
7919: IFTRUE 7923
7921: GO 8086
7923: POP
// if def_people_respawning then
7924: LD_EXP 12
7928: IFFALSE 8019
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
7930: LD_ADDR_VAR 0 2
7934: PUSH
7935: LD_INT 22
7937: PUSH
7938: LD_VAR 0 1
7942: PUSH
7943: EMPTY
7944: LIST
7945: LIST
7946: PUSH
7947: LD_INT 2
7949: PUSH
7950: LD_INT 21
7952: PUSH
7953: LD_INT 1
7955: PUSH
7956: EMPTY
7957: LIST
7958: LIST
7959: PUSH
7960: LD_INT 33
7962: PUSH
7963: LD_INT 3
7965: PUSH
7966: EMPTY
7967: LIST
7968: LIST
7969: PUSH
7970: LD_INT 33
7972: PUSH
7973: LD_INT 5
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: PUSH
7980: LD_INT 30
7982: PUSH
7983: LD_INT 0
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: PUSH
7990: LD_INT 30
7992: PUSH
7993: LD_INT 1
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: PUSH
8000: EMPTY
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: PUSH
8008: EMPTY
8009: LIST
8010: LIST
8011: PPUSH
8012: CALL_OW 69
8016: ST_TO_ADDR
8017: GO 8084
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
8019: LD_ADDR_VAR 0 2
8023: PUSH
8024: LD_INT 22
8026: PUSH
8027: LD_VAR 0 1
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: PUSH
8036: LD_INT 2
8038: PUSH
8039: LD_INT 21
8041: PUSH
8042: LD_INT 1
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: PUSH
8049: LD_INT 33
8051: PUSH
8052: LD_INT 3
8054: PUSH
8055: EMPTY
8056: LIST
8057: LIST
8058: PUSH
8059: LD_INT 33
8061: PUSH
8062: LD_INT 5
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: PUSH
8069: EMPTY
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: PPUSH
8079: CALL_OW 69
8083: ST_TO_ADDR
8084: GO 8205
8086: LD_INT 1
8088: DOUBLE
8089: EQUAL
8090: IFTRUE 8094
8092: GO 8133
8094: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
8095: LD_ADDR_VAR 0 2
8099: PUSH
8100: LD_INT 22
8102: PUSH
8103: LD_VAR 0 1
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: PUSH
8112: LD_INT 21
8114: PUSH
8115: LD_INT 1
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: PPUSH
8126: CALL_OW 69
8130: ST_TO_ADDR
8131: GO 8205
8133: LD_INT 2
8135: DOUBLE
8136: EQUAL
8137: IFTRUE 8141
8139: GO 8204
8141: POP
// begin h = false ;
8142: LD_ADDR_VAR 0 4
8146: PUSH
8147: LD_INT 0
8149: ST_TO_ADDR
// for k in heroes [ i ] do
8150: LD_ADDR_VAR 0 3
8154: PUSH
8155: LD_EXP 43
8159: PUSH
8160: LD_VAR 0 1
8164: ARRAY
8165: PUSH
8166: FOR_IN
8167: IFFALSE 8190
// if IsLive ( k ) then
8169: LD_VAR 0 3
8173: PPUSH
8174: CALL_OW 300
8178: IFFALSE 8188
// h = true ;
8180: LD_ADDR_VAR 0 4
8184: PUSH
8185: LD_INT 1
8187: ST_TO_ADDR
8188: GO 8166
8190: POP
8191: POP
// Result := h ;
8192: LD_ADDR_VAR 0 2
8196: PUSH
8197: LD_VAR 0 4
8201: ST_TO_ADDR
// end ; end ;
8202: GO 8205
8204: POP
// end ;
8205: LD_VAR 0 2
8209: RET
// function AlliedSides ( i , j ) ; begin
8210: LD_INT 0
8212: PPUSH
// Result := false ;
8213: LD_ADDR_VAR 0 3
8217: PUSH
8218: LD_INT 0
8220: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8221: LD_VAR 0 1
8225: PPUSH
8226: LD_VAR 0 2
8230: PPUSH
8231: CALL_OW 81
8235: PUSH
8236: LD_INT 1
8238: EQUAL
8239: PUSH
8240: LD_VAR 0 2
8244: PPUSH
8245: LD_VAR 0 1
8249: PPUSH
8250: CALL_OW 81
8254: PUSH
8255: LD_INT 1
8257: EQUAL
8258: AND
8259: PUSH
8260: LD_VAR 0 1
8264: PPUSH
8265: CALL_OW 83
8269: AND
8270: PUSH
8271: LD_VAR 0 2
8275: PPUSH
8276: CALL_OW 83
8280: AND
8281: IFFALSE 8291
// Result := true ;
8283: LD_ADDR_VAR 0 3
8287: PUSH
8288: LD_INT 1
8290: ST_TO_ADDR
// end ;
8291: LD_VAR 0 3
8295: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
8296: CALL 7800 0 0
8300: PUSH
8301: LD_LOC 8
8305: NOT
8306: AND
8307: IFFALSE 8323
8309: GO 8311
8311: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
8312: LD_ADDR_EXP 55
8316: PUSH
8317: LD_STRING #Player-Ended
8319: PUSH
8320: EMPTY
8321: LIST
8322: ST_TO_ADDR
8323: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
8324: CALL 7800 0 0
8328: PUSH
8329: LD_LOC 8
8333: AND
8334: IFFALSE 8343
8336: GO 8338
8338: DISABLE
// YouLostInMultiplayer ;
8339: CALL_OW 107
8343: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
8344: CALL 7800 0 0
8348: NOT
8349: PUSH
8350: CALL_OW 531
8354: NOT
8355: AND
8356: IFFALSE 8372
8358: GO 8360
8360: DISABLE
// WaitServerStrings = [ #server-wait ] ;
8361: LD_ADDR_EXP 55
8365: PUSH
8366: LD_STRING #server-wait
8368: PUSH
8369: EMPTY
8370: LIST
8371: ST_TO_ADDR
8372: END
// every 100 trigger IAmSpec do
8373: CALL_OW 531
8377: IFFALSE 8393
8379: GO 8381
8381: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
8382: LD_ADDR_EXP 55
8386: PUSH
8387: LD_STRING #Player-IAmSpec
8389: PUSH
8390: EMPTY
8391: LIST
8392: ST_TO_ADDR
8393: END
// every 100 trigger GameEnded and IAmSpec do
8394: LD_LOC 8
8398: PUSH
8399: CALL_OW 531
8403: AND
8404: IFFALSE 8413
8406: GO 8408
8408: DISABLE
// YouLostInMultiplayer ;
8409: CALL_OW 107
8413: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
8414: CALL 7800 0 0
8418: PUSH
8419: LD_LOC 8
8423: NOT
8424: AND
8425: IFFALSE 8441
8427: GO 8429
8429: DISABLE
// WaitServerStrings = [ $player-win ] ;
8430: LD_ADDR_EXP 55
8434: PUSH
8435: LD_STRING $player-win
8437: PUSH
8438: EMPTY
8439: LIST
8440: ST_TO_ADDR
8441: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
8442: CALL 7800 0 0
8446: PUSH
8447: LD_LOC 8
8451: AND
8452: IFFALSE 8476
8454: GO 8456
8456: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
8457: LD_EXP 35
8461: PUSH
8462: LD_OWVAR 7
8466: ARRAY
8467: PPUSH
8468: CALL 7471 0 1
// YouWinInMultiplayer ;
8472: CALL_OW 106
// end ;
8476: END
// every 100 trigger isEditor marked 401 do
8477: LD_OWVAR 84
8481: IFFALSE 8497
8483: GO 8485
8485: DISABLE
// Debug_Strings = [ You won ] ;
8486: LD_ADDR_OWVAR 48
8490: PUSH
8491: LD_STRING You won
8493: PUSH
8494: EMPTY
8495: LIST
8496: ST_TO_ADDR
8497: END
// every 100 trigger isEditor marked 400 do
8498: LD_OWVAR 84
8502: IFFALSE 8518
8504: GO 8506
8506: DISABLE
// Debug_Strings = [ You loss ] ;
8507: LD_ADDR_OWVAR 48
8511: PUSH
8512: LD_STRING You loss
8514: PUSH
8515: EMPTY
8516: LIST
8517: ST_TO_ADDR
8518: END
// every 100 marked 98 do var i , un ;
8519: GO 8521
8521: DISABLE
8522: LD_INT 0
8524: PPUSH
8525: PPUSH
// begin for i = 1 to side_positions do
8526: LD_ADDR_VAR 0 1
8530: PUSH
8531: DOUBLE
8532: LD_INT 1
8534: DEC
8535: ST_TO_ADDR
8536: LD_EXP 34
8540: PUSH
8541: FOR_TO
8542: IFFALSE 8629
// begin if side_positions [ i ] then
8544: LD_EXP 34
8548: PUSH
8549: LD_VAR 0 1
8553: ARRAY
8554: IFFALSE 8627
// if not HasPower ( i ) and not defeated [ i ] then
8556: LD_VAR 0 1
8560: PPUSH
8561: CALL 7864 0 1
8565: NOT
8566: PUSH
8567: LD_LOC 7
8571: PUSH
8572: LD_VAR 0 1
8576: ARRAY
8577: NOT
8578: AND
8579: IFFALSE 8627
// begin defeated = replace ( defeated , i , true ) ;
8581: LD_ADDR_LOC 7
8585: PUSH
8586: LD_LOC 7
8590: PPUSH
8591: LD_VAR 0 1
8595: PPUSH
8596: LD_INT 1
8598: PPUSH
8599: CALL_OW 1
8603: ST_TO_ADDR
// if i = mp_player_side then
8604: LD_VAR 0 1
8608: PUSH
8609: LD_OWVAR 7
8613: EQUAL
8614: IFFALSE 8627
// begin Multiplayer_Loose_Message ;
8616: CALL_OW 521
// SetPlayerSpectator ( ) ;
8620: CALL_OW 572
// enable ( 400 ) ;
8624: LD_INT 400
8626: ENABLE_MARKED
// end ; end ; end ;
8627: GO 8541
8629: POP
8630: POP
// DidGameEnd ;
8631: CALL 8646 0 0
// if not GameEnded then
8635: LD_LOC 8
8639: NOT
8640: IFFALSE 8643
// enable ;
8642: ENABLE
// end ;
8643: PPOPN 2
8645: END
// function DidGameEnd ; var i , k , enemy ; begin
8646: LD_INT 0
8648: PPUSH
8649: PPUSH
8650: PPUSH
8651: PPUSH
// enemy = [ ] ;
8652: LD_ADDR_VAR 0 4
8656: PUSH
8657: EMPTY
8658: ST_TO_ADDR
// for i = 1 to side_positions do
8659: LD_ADDR_VAR 0 2
8663: PUSH
8664: DOUBLE
8665: LD_INT 1
8667: DEC
8668: ST_TO_ADDR
8669: LD_EXP 34
8673: PUSH
8674: FOR_TO
8675: IFFALSE 8769
// if not defeated [ i ] then
8677: LD_LOC 7
8681: PUSH
8682: LD_VAR 0 2
8686: ARRAY
8687: NOT
8688: IFFALSE 8767
// for k = 1 to side_positions do
8690: LD_ADDR_VAR 0 3
8694: PUSH
8695: DOUBLE
8696: LD_INT 1
8698: DEC
8699: ST_TO_ADDR
8700: LD_EXP 34
8704: PUSH
8705: FOR_TO
8706: IFFALSE 8765
// if not defeated [ k ] then
8708: LD_LOC 7
8712: PUSH
8713: LD_VAR 0 3
8717: ARRAY
8718: NOT
8719: IFFALSE 8763
// if not AlliedSides ( i , k ) then
8721: LD_VAR 0 2
8725: PPUSH
8726: LD_VAR 0 3
8730: PPUSH
8731: CALL 8210 0 2
8735: NOT
8736: IFFALSE 8763
// enemy = enemy ^ [ i , k ] ;
8738: LD_ADDR_VAR 0 4
8742: PUSH
8743: LD_VAR 0 4
8747: PUSH
8748: LD_VAR 0 2
8752: PUSH
8753: LD_VAR 0 3
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: ADD
8762: ST_TO_ADDR
8763: GO 8705
8765: POP
8766: POP
8767: GO 8674
8769: POP
8770: POP
// if not enemy then
8771: LD_VAR 0 4
8775: NOT
8776: IFFALSE 8802
// begin GameEnded = true ;
8778: LD_ADDR_LOC 8
8782: PUSH
8783: LD_INT 1
8785: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
8786: LD_LOC 7
8790: PUSH
8791: LD_OWVAR 7
8795: ARRAY
8796: NOT
8797: IFFALSE 8802
// enable ( 401 ) ;
8799: LD_INT 401
8801: ENABLE_MARKED
// end ; end ;
8802: LD_VAR 0 1
8806: RET
// function unfog ; var k , friends ; begin
8807: LD_INT 0
8809: PPUSH
8810: PPUSH
8811: PPUSH
// for k = 1 to side_positions do
8812: LD_ADDR_VAR 0 2
8816: PUSH
8817: DOUBLE
8818: LD_INT 1
8820: DEC
8821: ST_TO_ADDR
8822: LD_EXP 34
8826: PUSH
8827: FOR_TO
8828: IFFALSE 8884
// if not defeated [ k ] then
8830: LD_LOC 7
8834: PUSH
8835: LD_VAR 0 2
8839: ARRAY
8840: NOT
8841: IFFALSE 8882
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
8843: LD_OWVAR 7
8847: PPUSH
8848: LD_VAR 0 2
8852: PPUSH
8853: CALL_OW 81
8857: PUSH
8858: LD_INT 1
8860: PUSH
8861: EMPTY
8862: LIST
8863: IN
8864: IFFALSE 8882
// friends = friends ^ k ;
8866: LD_ADDR_VAR 0 3
8870: PUSH
8871: LD_VAR 0 3
8875: PUSH
8876: LD_VAR 0 2
8880: ADD
8881: ST_TO_ADDR
8882: GO 8827
8884: POP
8885: POP
// if not friends then
8886: LD_VAR 0 3
8890: NOT
8891: IFFALSE 8905
// begin SetPlayerSpectator ( ) ;
8893: CALL_OW 572
// unfoged = true ;
8897: LD_ADDR_LOC 9
8901: PUSH
8902: LD_INT 1
8904: ST_TO_ADDR
// end ; end ;
8905: LD_VAR 0 1
8909: RET
// export function MakeGameEnd ; begin
8910: LD_INT 0
8912: PPUSH
// SetPlayerSpectator ( ) ;
8913: CALL_OW 572
// unfoged = true ;
8917: LD_ADDR_LOC 9
8921: PUSH
8922: LD_INT 1
8924: ST_TO_ADDR
// wait ( 0 0$5 ) ;
8925: LD_INT 175
8927: PPUSH
8928: CALL_OW 67
// GameEnded = true ;
8932: LD_ADDR_LOC 8
8936: PUSH
8937: LD_INT 1
8939: ST_TO_ADDR
// end ;
8940: LD_VAR 0 1
8944: RET
// export function GetGameEnded ; begin
8945: LD_INT 0
8947: PPUSH
// result = GameEnded ;
8948: LD_ADDR_VAR 0 1
8952: PUSH
8953: LD_LOC 8
8957: ST_TO_ADDR
// end ; end_of_file
8958: LD_VAR 0 1
8962: RET
// export function SetMpTechs ( ) ; var side , i ; begin
8963: LD_INT 0
8965: PPUSH
8966: PPUSH
8967: PPUSH
// for side = 1 to 8 do
8968: LD_ADDR_VAR 0 2
8972: PUSH
8973: DOUBLE
8974: LD_INT 1
8976: DEC
8977: ST_TO_ADDR
8978: LD_INT 8
8980: PUSH
8981: FOR_TO
8982: IFFALSE 9103
// begin for i = 1 to 72 do
8984: LD_ADDR_VAR 0 3
8988: PUSH
8989: DOUBLE
8990: LD_INT 1
8992: DEC
8993: ST_TO_ADDR
8994: LD_INT 72
8996: PUSH
8997: FOR_TO
8998: IFFALSE 9029
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9000: LD_VAR 0 3
9004: PPUSH
9005: LD_VAR 0 2
9009: PPUSH
9010: LD_INT 0
9012: PPUSH
9013: LD_VAR 0 3
9017: PPUSH
9018: CALL_OW 565
9022: PPUSH
9023: CALL_OW 322
9027: GO 8997
9029: POP
9030: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9031: LD_INT 73
9033: PPUSH
9034: LD_VAR 0 2
9038: PPUSH
9039: LD_INT 0
9041: PPUSH
9042: LD_INT 25
9044: PPUSH
9045: CALL_OW 565
9049: PPUSH
9050: CALL_OW 322
// for i = 0 to 40 do
9054: LD_ADDR_VAR 0 3
9058: PUSH
9059: DOUBLE
9060: LD_INT 0
9062: DEC
9063: ST_TO_ADDR
9064: LD_INT 40
9066: PUSH
9067: FOR_TO
9068: IFFALSE 9099
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9070: LD_VAR 0 3
9074: PPUSH
9075: LD_VAR 0 2
9079: PPUSH
9080: LD_INT 1
9082: PPUSH
9083: LD_VAR 0 3
9087: PPUSH
9088: CALL_OW 565
9092: PPUSH
9093: CALL_OW 324
9097: GO 9067
9099: POP
9100: POP
// end ;
9101: GO 8981
9103: POP
9104: POP
// end ;
9105: LD_VAR 0 1
9109: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9110: LD_INT 0
9112: PPUSH
9113: PPUSH
9114: PPUSH
// for side = 1 to 8 do
9115: LD_ADDR_VAR 0 3
9119: PUSH
9120: DOUBLE
9121: LD_INT 1
9123: DEC
9124: ST_TO_ADDR
9125: LD_INT 8
9127: PUSH
9128: FOR_TO
9129: IFFALSE 13125
// begin for i = 1 to 73 do
9131: LD_ADDR_VAR 0 4
9135: PUSH
9136: DOUBLE
9137: LD_INT 1
9139: DEC
9140: ST_TO_ADDR
9141: LD_INT 73
9143: PUSH
9144: FOR_TO
9145: IFFALSE 9166
// SetTech ( i , side , state_disabled ) ;
9147: LD_VAR 0 4
9151: PPUSH
9152: LD_VAR 0 3
9156: PPUSH
9157: LD_INT 0
9159: PPUSH
9160: CALL_OW 322
9164: GO 9144
9166: POP
9167: POP
// for i = 0 to 40 do
9168: LD_ADDR_VAR 0 4
9172: PUSH
9173: DOUBLE
9174: LD_INT 0
9176: DEC
9177: ST_TO_ADDR
9178: LD_INT 40
9180: PUSH
9181: FOR_TO
9182: IFFALSE 9203
// SetRestrict ( i , side , false ) ;
9184: LD_VAR 0 4
9188: PPUSH
9189: LD_VAR 0 3
9193: PPUSH
9194: LD_INT 0
9196: PPUSH
9197: CALL_OW 324
9201: GO 9181
9203: POP
9204: POP
// case level of 1 :
9205: LD_VAR 0 1
9209: PUSH
9210: LD_INT 1
9212: DOUBLE
9213: EQUAL
9214: IFTRUE 9218
9216: GO 9371
9218: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9219: LD_INT 35
9221: PPUSH
9222: LD_VAR 0 3
9226: PPUSH
9227: LD_INT 1
9229: PPUSH
9230: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9234: LD_INT 45
9236: PPUSH
9237: LD_VAR 0 3
9241: PPUSH
9242: LD_INT 1
9244: PPUSH
9245: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9249: LD_INT 46
9251: PPUSH
9252: LD_VAR 0 3
9256: PPUSH
9257: LD_INT 1
9259: PPUSH
9260: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9264: LD_INT 47
9266: PPUSH
9267: LD_VAR 0 3
9271: PPUSH
9272: LD_INT 1
9274: PPUSH
9275: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9279: LD_INT 0
9281: PPUSH
9282: LD_VAR 0 3
9286: PPUSH
9287: LD_INT 1
9289: PPUSH
9290: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9294: LD_INT 2
9296: PPUSH
9297: LD_VAR 0 3
9301: PPUSH
9302: LD_INT 1
9304: PPUSH
9305: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9309: LD_INT 4
9311: PPUSH
9312: LD_VAR 0 3
9316: PPUSH
9317: LD_INT 1
9319: PPUSH
9320: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9324: LD_INT 6
9326: PPUSH
9327: LD_VAR 0 3
9331: PPUSH
9332: LD_INT 1
9334: PPUSH
9335: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9339: LD_INT 29
9341: PPUSH
9342: LD_VAR 0 3
9346: PPUSH
9347: LD_INT 1
9349: PPUSH
9350: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9354: LD_INT 31
9356: PPUSH
9357: LD_VAR 0 3
9361: PPUSH
9362: LD_INT 1
9364: PPUSH
9365: CALL_OW 324
// end ; 2 :
9369: GO 13123
9371: LD_INT 2
9373: DOUBLE
9374: EQUAL
9375: IFTRUE 9379
9377: GO 9577
9379: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9380: LD_INT 35
9382: PPUSH
9383: LD_VAR 0 3
9387: PPUSH
9388: LD_INT 1
9390: PPUSH
9391: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9395: LD_INT 45
9397: PPUSH
9398: LD_VAR 0 3
9402: PPUSH
9403: LD_INT 1
9405: PPUSH
9406: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9410: LD_INT 46
9412: PPUSH
9413: LD_VAR 0 3
9417: PPUSH
9418: LD_INT 1
9420: PPUSH
9421: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9425: LD_INT 47
9427: PPUSH
9428: LD_VAR 0 3
9432: PPUSH
9433: LD_INT 1
9435: PPUSH
9436: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9440: LD_INT 1
9442: PPUSH
9443: LD_VAR 0 3
9447: PPUSH
9448: LD_INT 1
9450: PPUSH
9451: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9455: LD_INT 2
9457: PPUSH
9458: LD_VAR 0 3
9462: PPUSH
9463: LD_INT 1
9465: PPUSH
9466: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9470: LD_INT 11
9472: PPUSH
9473: LD_VAR 0 3
9477: PPUSH
9478: LD_INT 1
9480: PPUSH
9481: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9485: LD_INT 0
9487: PPUSH
9488: LD_VAR 0 3
9492: PPUSH
9493: LD_INT 1
9495: PPUSH
9496: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9500: LD_INT 2
9502: PPUSH
9503: LD_VAR 0 3
9507: PPUSH
9508: LD_INT 1
9510: PPUSH
9511: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9515: LD_INT 4
9517: PPUSH
9518: LD_VAR 0 3
9522: PPUSH
9523: LD_INT 1
9525: PPUSH
9526: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9530: LD_INT 6
9532: PPUSH
9533: LD_VAR 0 3
9537: PPUSH
9538: LD_INT 1
9540: PPUSH
9541: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9545: LD_INT 29
9547: PPUSH
9548: LD_VAR 0 3
9552: PPUSH
9553: LD_INT 1
9555: PPUSH
9556: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9560: LD_INT 31
9562: PPUSH
9563: LD_VAR 0 3
9567: PPUSH
9568: LD_INT 1
9570: PPUSH
9571: CALL_OW 324
// end ; 3 :
9575: GO 13123
9577: LD_INT 3
9579: DOUBLE
9580: EQUAL
9581: IFTRUE 9585
9583: GO 10038
9585: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9586: LD_INT 35
9588: PPUSH
9589: LD_VAR 0 3
9593: PPUSH
9594: LD_INT 1
9596: PPUSH
9597: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9601: LD_INT 45
9603: PPUSH
9604: LD_VAR 0 3
9608: PPUSH
9609: LD_INT 1
9611: PPUSH
9612: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9616: LD_INT 46
9618: PPUSH
9619: LD_VAR 0 3
9623: PPUSH
9624: LD_INT 1
9626: PPUSH
9627: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9631: LD_INT 47
9633: PPUSH
9634: LD_VAR 0 3
9638: PPUSH
9639: LD_INT 1
9641: PPUSH
9642: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9646: LD_INT 1
9648: PPUSH
9649: LD_VAR 0 3
9653: PPUSH
9654: LD_INT 1
9656: PPUSH
9657: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9661: LD_INT 2
9663: PPUSH
9664: LD_VAR 0 3
9668: PPUSH
9669: LD_INT 1
9671: PPUSH
9672: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9676: LD_INT 11
9678: PPUSH
9679: LD_VAR 0 3
9683: PPUSH
9684: LD_INT 1
9686: PPUSH
9687: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9691: LD_INT 48
9693: PPUSH
9694: LD_VAR 0 3
9698: PPUSH
9699: LD_INT 1
9701: PPUSH
9702: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9706: LD_INT 69
9708: PPUSH
9709: LD_VAR 0 3
9713: PPUSH
9714: LD_INT 1
9716: PPUSH
9717: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9721: LD_INT 39
9723: PPUSH
9724: LD_VAR 0 3
9728: PPUSH
9729: LD_INT 1
9731: PPUSH
9732: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9736: LD_INT 43
9738: PPUSH
9739: LD_VAR 0 3
9743: PPUSH
9744: LD_INT 1
9746: PPUSH
9747: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9751: LD_INT 51
9753: PPUSH
9754: LD_VAR 0 3
9758: PPUSH
9759: LD_INT 1
9761: PPUSH
9762: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9766: LD_INT 6
9768: PPUSH
9769: LD_VAR 0 3
9773: PPUSH
9774: LD_INT 1
9776: PPUSH
9777: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9781: LD_INT 0
9783: PPUSH
9784: LD_VAR 0 3
9788: PPUSH
9789: LD_INT 1
9791: PPUSH
9792: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9796: LD_INT 2
9798: PPUSH
9799: LD_VAR 0 3
9803: PPUSH
9804: LD_INT 1
9806: PPUSH
9807: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
9811: LD_INT 3
9813: PPUSH
9814: LD_VAR 0 3
9818: PPUSH
9819: LD_INT 1
9821: PPUSH
9822: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9826: LD_INT 4
9828: PPUSH
9829: LD_VAR 0 3
9833: PPUSH
9834: LD_INT 1
9836: PPUSH
9837: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9841: LD_INT 6
9843: PPUSH
9844: LD_VAR 0 3
9848: PPUSH
9849: LD_INT 1
9851: PPUSH
9852: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
9856: LD_INT 7
9858: PPUSH
9859: LD_VAR 0 3
9863: PPUSH
9864: LD_INT 1
9866: PPUSH
9867: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
9871: LD_INT 8
9873: PPUSH
9874: LD_VAR 0 3
9878: PPUSH
9879: LD_INT 1
9881: PPUSH
9882: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
9886: LD_INT 10
9888: PPUSH
9889: LD_VAR 0 3
9893: PPUSH
9894: LD_INT 1
9896: PPUSH
9897: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
9901: LD_INT 15
9903: PPUSH
9904: LD_VAR 0 3
9908: PPUSH
9909: LD_INT 1
9911: PPUSH
9912: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
9916: LD_INT 16
9918: PPUSH
9919: LD_VAR 0 3
9923: PPUSH
9924: LD_INT 1
9926: PPUSH
9927: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
9931: LD_INT 17
9933: PPUSH
9934: LD_VAR 0 3
9938: PPUSH
9939: LD_INT 1
9941: PPUSH
9942: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
9946: LD_INT 20
9948: PPUSH
9949: LD_VAR 0 3
9953: PPUSH
9954: LD_INT 1
9956: PPUSH
9957: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
9961: LD_INT 26
9963: PPUSH
9964: LD_VAR 0 3
9968: PPUSH
9969: LD_INT 1
9971: PPUSH
9972: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
9976: LD_INT 27
9978: PPUSH
9979: LD_VAR 0 3
9983: PPUSH
9984: LD_INT 1
9986: PPUSH
9987: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9991: LD_INT 29
9993: PPUSH
9994: LD_VAR 0 3
9998: PPUSH
9999: LD_INT 1
10001: PPUSH
10002: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10006: LD_INT 31
10008: PPUSH
10009: LD_VAR 0 3
10013: PPUSH
10014: LD_INT 1
10016: PPUSH
10017: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10021: LD_INT 32
10023: PPUSH
10024: LD_VAR 0 3
10028: PPUSH
10029: LD_INT 1
10031: PPUSH
10032: CALL_OW 324
// end ; 4 :
10036: GO 13123
10038: LD_INT 4
10040: DOUBLE
10041: EQUAL
10042: IFTRUE 10046
10044: GO 10994
10046: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10047: LD_INT 35
10049: PPUSH
10050: LD_VAR 0 3
10054: PPUSH
10055: LD_INT 1
10057: PPUSH
10058: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10062: LD_INT 45
10064: PPUSH
10065: LD_VAR 0 3
10069: PPUSH
10070: LD_INT 1
10072: PPUSH
10073: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10077: LD_INT 46
10079: PPUSH
10080: LD_VAR 0 3
10084: PPUSH
10085: LD_INT 1
10087: PPUSH
10088: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10092: LD_INT 47
10094: PPUSH
10095: LD_VAR 0 3
10099: PPUSH
10100: LD_INT 1
10102: PPUSH
10103: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10107: LD_INT 1
10109: PPUSH
10110: LD_VAR 0 3
10114: PPUSH
10115: LD_INT 1
10117: PPUSH
10118: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10122: LD_INT 2
10124: PPUSH
10125: LD_VAR 0 3
10129: PPUSH
10130: LD_INT 1
10132: PPUSH
10133: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10137: LD_INT 11
10139: PPUSH
10140: LD_VAR 0 3
10144: PPUSH
10145: LD_INT 1
10147: PPUSH
10148: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10152: LD_INT 20
10154: PPUSH
10155: LD_VAR 0 3
10159: PPUSH
10160: LD_INT 1
10162: PPUSH
10163: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10167: LD_INT 48
10169: PPUSH
10170: LD_VAR 0 3
10174: PPUSH
10175: LD_INT 1
10177: PPUSH
10178: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10182: LD_INT 49
10184: PPUSH
10185: LD_VAR 0 3
10189: PPUSH
10190: LD_INT 1
10192: PPUSH
10193: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10197: LD_INT 69
10199: PPUSH
10200: LD_VAR 0 3
10204: PPUSH
10205: LD_INT 1
10207: PPUSH
10208: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10212: LD_INT 39
10214: PPUSH
10215: LD_VAR 0 3
10219: PPUSH
10220: LD_INT 1
10222: PPUSH
10223: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10227: LD_INT 34
10229: PPUSH
10230: LD_VAR 0 3
10234: PPUSH
10235: LD_INT 1
10237: PPUSH
10238: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10242: LD_INT 42
10244: PPUSH
10245: LD_VAR 0 3
10249: PPUSH
10250: LD_INT 1
10252: PPUSH
10253: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10257: LD_INT 44
10259: PPUSH
10260: LD_VAR 0 3
10264: PPUSH
10265: LD_INT 1
10267: PPUSH
10268: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10272: LD_INT 41
10274: PPUSH
10275: LD_VAR 0 3
10279: PPUSH
10280: LD_INT 1
10282: PPUSH
10283: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10287: LD_INT 43
10289: PPUSH
10290: LD_VAR 0 3
10294: PPUSH
10295: LD_INT 1
10297: PPUSH
10298: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10302: LD_INT 70
10304: PPUSH
10305: LD_VAR 0 3
10309: PPUSH
10310: LD_INT 1
10312: PPUSH
10313: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10317: LD_INT 51
10319: PPUSH
10320: LD_VAR 0 3
10324: PPUSH
10325: LD_INT 1
10327: PPUSH
10328: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10332: LD_INT 52
10334: PPUSH
10335: LD_VAR 0 3
10339: PPUSH
10340: LD_INT 1
10342: PPUSH
10343: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10347: LD_INT 6
10349: PPUSH
10350: LD_VAR 0 3
10354: PPUSH
10355: LD_INT 1
10357: PPUSH
10358: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10362: LD_INT 15
10364: PPUSH
10365: LD_VAR 0 3
10369: PPUSH
10370: LD_INT 1
10372: PPUSH
10373: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10377: LD_INT 7
10379: PPUSH
10380: LD_VAR 0 3
10384: PPUSH
10385: LD_INT 1
10387: PPUSH
10388: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10392: LD_INT 12
10394: PPUSH
10395: LD_VAR 0 3
10399: PPUSH
10400: LD_INT 1
10402: PPUSH
10403: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10407: LD_INT 18
10409: PPUSH
10410: LD_VAR 0 3
10414: PPUSH
10415: LD_INT 1
10417: PPUSH
10418: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10422: LD_INT 60
10424: PPUSH
10425: LD_VAR 0 3
10429: PPUSH
10430: LD_INT 1
10432: PPUSH
10433: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10437: LD_INT 9
10439: PPUSH
10440: LD_VAR 0 3
10444: PPUSH
10445: LD_INT 1
10447: PPUSH
10448: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10452: LD_INT 30
10454: PPUSH
10455: LD_VAR 0 3
10459: PPUSH
10460: LD_INT 1
10462: PPUSH
10463: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10467: LD_INT 37
10469: PPUSH
10470: LD_VAR 0 3
10474: PPUSH
10475: LD_INT 1
10477: PPUSH
10478: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10482: LD_INT 5
10484: PPUSH
10485: LD_VAR 0 3
10489: PPUSH
10490: LD_INT 1
10492: PPUSH
10493: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10497: LD_INT 66
10499: PPUSH
10500: LD_VAR 0 3
10504: PPUSH
10505: LD_INT 1
10507: PPUSH
10508: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10512: LD_INT 21
10514: PPUSH
10515: LD_VAR 0 3
10519: PPUSH
10520: LD_INT 1
10522: PPUSH
10523: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10527: LD_INT 22
10529: PPUSH
10530: LD_VAR 0 3
10534: PPUSH
10535: LD_INT 1
10537: PPUSH
10538: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10542: LD_INT 54
10544: PPUSH
10545: LD_VAR 0 3
10549: PPUSH
10550: LD_INT 1
10552: PPUSH
10553: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10557: LD_INT 0
10559: PPUSH
10560: LD_VAR 0 3
10564: PPUSH
10565: LD_INT 1
10567: PPUSH
10568: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10572: LD_INT 1
10574: PPUSH
10575: LD_VAR 0 3
10579: PPUSH
10580: LD_INT 1
10582: PPUSH
10583: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10587: LD_INT 2
10589: PPUSH
10590: LD_VAR 0 3
10594: PPUSH
10595: LD_INT 1
10597: PPUSH
10598: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10602: LD_INT 3
10604: PPUSH
10605: LD_VAR 0 3
10609: PPUSH
10610: LD_INT 1
10612: PPUSH
10613: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10617: LD_INT 4
10619: PPUSH
10620: LD_VAR 0 3
10624: PPUSH
10625: LD_INT 1
10627: PPUSH
10628: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10632: LD_INT 5
10634: PPUSH
10635: LD_VAR 0 3
10639: PPUSH
10640: LD_INT 1
10642: PPUSH
10643: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10647: LD_INT 6
10649: PPUSH
10650: LD_VAR 0 3
10654: PPUSH
10655: LD_INT 1
10657: PPUSH
10658: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10662: LD_INT 7
10664: PPUSH
10665: LD_VAR 0 3
10669: PPUSH
10670: LD_INT 1
10672: PPUSH
10673: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10677: LD_INT 8
10679: PPUSH
10680: LD_VAR 0 3
10684: PPUSH
10685: LD_INT 1
10687: PPUSH
10688: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10692: LD_INT 10
10694: PPUSH
10695: LD_VAR 0 3
10699: PPUSH
10700: LD_INT 1
10702: PPUSH
10703: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
10707: LD_INT 11
10709: PPUSH
10710: LD_VAR 0 3
10714: PPUSH
10715: LD_INT 1
10717: PPUSH
10718: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
10722: LD_INT 12
10724: PPUSH
10725: LD_VAR 0 3
10729: PPUSH
10730: LD_INT 1
10732: PPUSH
10733: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
10737: LD_INT 13
10739: PPUSH
10740: LD_VAR 0 3
10744: PPUSH
10745: LD_INT 1
10747: PPUSH
10748: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
10752: LD_INT 14
10754: PPUSH
10755: LD_VAR 0 3
10759: PPUSH
10760: LD_INT 1
10762: PPUSH
10763: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10767: LD_INT 15
10769: PPUSH
10770: LD_VAR 0 3
10774: PPUSH
10775: LD_INT 1
10777: PPUSH
10778: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10782: LD_INT 16
10784: PPUSH
10785: LD_VAR 0 3
10789: PPUSH
10790: LD_INT 1
10792: PPUSH
10793: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10797: LD_INT 17
10799: PPUSH
10800: LD_VAR 0 3
10804: PPUSH
10805: LD_INT 1
10807: PPUSH
10808: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
10812: LD_INT 19
10814: PPUSH
10815: LD_VAR 0 3
10819: PPUSH
10820: LD_INT 1
10822: PPUSH
10823: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10827: LD_INT 20
10829: PPUSH
10830: LD_VAR 0 3
10834: PPUSH
10835: LD_INT 1
10837: PPUSH
10838: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
10842: LD_INT 21
10844: PPUSH
10845: LD_VAR 0 3
10849: PPUSH
10850: LD_INT 1
10852: PPUSH
10853: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
10857: LD_INT 23
10859: PPUSH
10860: LD_VAR 0 3
10864: PPUSH
10865: LD_INT 1
10867: PPUSH
10868: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10872: LD_INT 26
10874: PPUSH
10875: LD_VAR 0 3
10879: PPUSH
10880: LD_INT 1
10882: PPUSH
10883: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10887: LD_INT 27
10889: PPUSH
10890: LD_VAR 0 3
10894: PPUSH
10895: LD_INT 1
10897: PPUSH
10898: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
10902: LD_INT 28
10904: PPUSH
10905: LD_VAR 0 3
10909: PPUSH
10910: LD_INT 1
10912: PPUSH
10913: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10917: LD_INT 29
10919: PPUSH
10920: LD_VAR 0 3
10924: PPUSH
10925: LD_INT 1
10927: PPUSH
10928: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
10932: LD_INT 30
10934: PPUSH
10935: LD_VAR 0 3
10939: PPUSH
10940: LD_INT 1
10942: PPUSH
10943: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10947: LD_INT 31
10949: PPUSH
10950: LD_VAR 0 3
10954: PPUSH
10955: LD_INT 1
10957: PPUSH
10958: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10962: LD_INT 32
10964: PPUSH
10965: LD_VAR 0 3
10969: PPUSH
10970: LD_INT 1
10972: PPUSH
10973: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
10977: LD_INT 36
10979: PPUSH
10980: LD_VAR 0 3
10984: PPUSH
10985: LD_INT 1
10987: PPUSH
10988: CALL_OW 324
// end ; 5 :
10992: GO 13123
10994: LD_INT 5
10996: DOUBLE
10997: EQUAL
10998: IFTRUE 11002
11000: GO 12115
11002: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11003: LD_INT 35
11005: PPUSH
11006: LD_VAR 0 3
11010: PPUSH
11011: LD_INT 1
11013: PPUSH
11014: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11018: LD_INT 45
11020: PPUSH
11021: LD_VAR 0 3
11025: PPUSH
11026: LD_INT 1
11028: PPUSH
11029: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11033: LD_INT 46
11035: PPUSH
11036: LD_VAR 0 3
11040: PPUSH
11041: LD_INT 1
11043: PPUSH
11044: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11048: LD_INT 47
11050: PPUSH
11051: LD_VAR 0 3
11055: PPUSH
11056: LD_INT 1
11058: PPUSH
11059: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11063: LD_INT 1
11065: PPUSH
11066: LD_VAR 0 3
11070: PPUSH
11071: LD_INT 1
11073: PPUSH
11074: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11078: LD_INT 2
11080: PPUSH
11081: LD_VAR 0 3
11085: PPUSH
11086: LD_INT 1
11088: PPUSH
11089: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11093: LD_INT 11
11095: PPUSH
11096: LD_VAR 0 3
11100: PPUSH
11101: LD_INT 1
11103: PPUSH
11104: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11108: LD_INT 20
11110: PPUSH
11111: LD_VAR 0 3
11115: PPUSH
11116: LD_INT 1
11118: PPUSH
11119: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11123: LD_INT 48
11125: PPUSH
11126: LD_VAR 0 3
11130: PPUSH
11131: LD_INT 1
11133: PPUSH
11134: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11138: LD_INT 49
11140: PPUSH
11141: LD_VAR 0 3
11145: PPUSH
11146: LD_INT 1
11148: PPUSH
11149: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11153: LD_INT 69
11155: PPUSH
11156: LD_VAR 0 3
11160: PPUSH
11161: LD_INT 1
11163: PPUSH
11164: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11168: LD_INT 39
11170: PPUSH
11171: LD_VAR 0 3
11175: PPUSH
11176: LD_INT 1
11178: PPUSH
11179: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11183: LD_INT 34
11185: PPUSH
11186: LD_VAR 0 3
11190: PPUSH
11191: LD_INT 1
11193: PPUSH
11194: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11198: LD_INT 42
11200: PPUSH
11201: LD_VAR 0 3
11205: PPUSH
11206: LD_INT 1
11208: PPUSH
11209: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11213: LD_INT 44
11215: PPUSH
11216: LD_VAR 0 3
11220: PPUSH
11221: LD_INT 1
11223: PPUSH
11224: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11228: LD_INT 41
11230: PPUSH
11231: LD_VAR 0 3
11235: PPUSH
11236: LD_INT 1
11238: PPUSH
11239: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11243: LD_INT 40
11245: PPUSH
11246: LD_VAR 0 3
11250: PPUSH
11251: LD_INT 1
11253: PPUSH
11254: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11258: LD_INT 43
11260: PPUSH
11261: LD_VAR 0 3
11265: PPUSH
11266: LD_INT 1
11268: PPUSH
11269: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11273: LD_INT 70
11275: PPUSH
11276: LD_VAR 0 3
11280: PPUSH
11281: LD_INT 1
11283: PPUSH
11284: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11288: LD_INT 51
11290: PPUSH
11291: LD_VAR 0 3
11295: PPUSH
11296: LD_INT 1
11298: PPUSH
11299: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11303: LD_INT 52
11305: PPUSH
11306: LD_VAR 0 3
11310: PPUSH
11311: LD_INT 1
11313: PPUSH
11314: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11318: LD_INT 6
11320: PPUSH
11321: LD_VAR 0 3
11325: PPUSH
11326: LD_INT 1
11328: PPUSH
11329: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11333: LD_INT 15
11335: PPUSH
11336: LD_VAR 0 3
11340: PPUSH
11341: LD_INT 1
11343: PPUSH
11344: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11348: LD_INT 7
11350: PPUSH
11351: LD_VAR 0 3
11355: PPUSH
11356: LD_INT 1
11358: PPUSH
11359: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11363: LD_INT 12
11365: PPUSH
11366: LD_VAR 0 3
11370: PPUSH
11371: LD_INT 1
11373: PPUSH
11374: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11378: LD_INT 17
11380: PPUSH
11381: LD_VAR 0 3
11385: PPUSH
11386: LD_INT 1
11388: PPUSH
11389: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11393: LD_INT 18
11395: PPUSH
11396: LD_VAR 0 3
11400: PPUSH
11401: LD_INT 1
11403: PPUSH
11404: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11408: LD_INT 60
11410: PPUSH
11411: LD_VAR 0 3
11415: PPUSH
11416: LD_INT 1
11418: PPUSH
11419: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11423: LD_INT 32
11425: PPUSH
11426: LD_VAR 0 3
11430: PPUSH
11431: LD_INT 1
11433: PPUSH
11434: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11438: LD_INT 9
11440: PPUSH
11441: LD_VAR 0 3
11445: PPUSH
11446: LD_INT 1
11448: PPUSH
11449: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11453: LD_INT 57
11455: PPUSH
11456: LD_VAR 0 3
11460: PPUSH
11461: LD_INT 1
11463: PPUSH
11464: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11468: LD_INT 30
11470: PPUSH
11471: LD_VAR 0 3
11475: PPUSH
11476: LD_INT 1
11478: PPUSH
11479: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11483: LD_INT 37
11485: PPUSH
11486: LD_VAR 0 3
11490: PPUSH
11491: LD_INT 1
11493: PPUSH
11494: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11498: LD_INT 63
11500: PPUSH
11501: LD_VAR 0 3
11505: PPUSH
11506: LD_INT 1
11508: PPUSH
11509: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11513: LD_INT 3
11515: PPUSH
11516: LD_VAR 0 3
11520: PPUSH
11521: LD_INT 1
11523: PPUSH
11524: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11528: LD_INT 4
11530: PPUSH
11531: LD_VAR 0 3
11535: PPUSH
11536: LD_INT 1
11538: PPUSH
11539: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11543: LD_INT 5
11545: PPUSH
11546: LD_VAR 0 3
11550: PPUSH
11551: LD_INT 1
11553: PPUSH
11554: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11558: LD_INT 66
11560: PPUSH
11561: LD_VAR 0 3
11565: PPUSH
11566: LD_INT 1
11568: PPUSH
11569: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11573: LD_INT 21
11575: PPUSH
11576: LD_VAR 0 3
11580: PPUSH
11581: LD_INT 1
11583: PPUSH
11584: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11588: LD_INT 22
11590: PPUSH
11591: LD_VAR 0 3
11595: PPUSH
11596: LD_INT 1
11598: PPUSH
11599: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11603: LD_INT 19
11605: PPUSH
11606: LD_VAR 0 3
11610: PPUSH
11611: LD_INT 1
11613: PPUSH
11614: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11618: LD_INT 54
11620: PPUSH
11621: LD_VAR 0 3
11625: PPUSH
11626: LD_INT 1
11628: PPUSH
11629: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
11633: LD_INT 55
11635: PPUSH
11636: LD_VAR 0 3
11640: PPUSH
11641: LD_INT 1
11643: PPUSH
11644: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11648: LD_INT 0
11650: PPUSH
11651: LD_VAR 0 3
11655: PPUSH
11656: LD_INT 1
11658: PPUSH
11659: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11663: LD_INT 1
11665: PPUSH
11666: LD_VAR 0 3
11670: PPUSH
11671: LD_INT 1
11673: PPUSH
11674: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11678: LD_INT 2
11680: PPUSH
11681: LD_VAR 0 3
11685: PPUSH
11686: LD_INT 1
11688: PPUSH
11689: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11693: LD_INT 3
11695: PPUSH
11696: LD_VAR 0 3
11700: PPUSH
11701: LD_INT 1
11703: PPUSH
11704: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11708: LD_INT 4
11710: PPUSH
11711: LD_VAR 0 3
11715: PPUSH
11716: LD_INT 1
11718: PPUSH
11719: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11723: LD_INT 5
11725: PPUSH
11726: LD_VAR 0 3
11730: PPUSH
11731: LD_INT 1
11733: PPUSH
11734: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11738: LD_INT 6
11740: PPUSH
11741: LD_VAR 0 3
11745: PPUSH
11746: LD_INT 1
11748: PPUSH
11749: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11753: LD_INT 7
11755: PPUSH
11756: LD_VAR 0 3
11760: PPUSH
11761: LD_INT 1
11763: PPUSH
11764: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11768: LD_INT 8
11770: PPUSH
11771: LD_VAR 0 3
11775: PPUSH
11776: LD_INT 1
11778: PPUSH
11779: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11783: LD_INT 10
11785: PPUSH
11786: LD_VAR 0 3
11790: PPUSH
11791: LD_INT 1
11793: PPUSH
11794: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11798: LD_INT 11
11800: PPUSH
11801: LD_VAR 0 3
11805: PPUSH
11806: LD_INT 1
11808: PPUSH
11809: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11813: LD_INT 12
11815: PPUSH
11816: LD_VAR 0 3
11820: PPUSH
11821: LD_INT 1
11823: PPUSH
11824: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11828: LD_INT 13
11830: PPUSH
11831: LD_VAR 0 3
11835: PPUSH
11836: LD_INT 1
11838: PPUSH
11839: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11843: LD_INT 14
11845: PPUSH
11846: LD_VAR 0 3
11850: PPUSH
11851: LD_INT 1
11853: PPUSH
11854: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11858: LD_INT 15
11860: PPUSH
11861: LD_VAR 0 3
11865: PPUSH
11866: LD_INT 1
11868: PPUSH
11869: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11873: LD_INT 16
11875: PPUSH
11876: LD_VAR 0 3
11880: PPUSH
11881: LD_INT 1
11883: PPUSH
11884: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11888: LD_INT 17
11890: PPUSH
11891: LD_VAR 0 3
11895: PPUSH
11896: LD_INT 1
11898: PPUSH
11899: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
11903: LD_INT 18
11905: PPUSH
11906: LD_VAR 0 3
11910: PPUSH
11911: LD_INT 1
11913: PPUSH
11914: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11918: LD_INT 19
11920: PPUSH
11921: LD_VAR 0 3
11925: PPUSH
11926: LD_INT 1
11928: PPUSH
11929: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11933: LD_INT 20
11935: PPUSH
11936: LD_VAR 0 3
11940: PPUSH
11941: LD_INT 1
11943: PPUSH
11944: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11948: LD_INT 21
11950: PPUSH
11951: LD_VAR 0 3
11955: PPUSH
11956: LD_INT 1
11958: PPUSH
11959: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11963: LD_INT 23
11965: PPUSH
11966: LD_VAR 0 3
11970: PPUSH
11971: LD_INT 1
11973: PPUSH
11974: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11978: LD_INT 26
11980: PPUSH
11981: LD_VAR 0 3
11985: PPUSH
11986: LD_INT 1
11988: PPUSH
11989: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11993: LD_INT 27
11995: PPUSH
11996: LD_VAR 0 3
12000: PPUSH
12001: LD_INT 1
12003: PPUSH
12004: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12008: LD_INT 28
12010: PPUSH
12011: LD_VAR 0 3
12015: PPUSH
12016: LD_INT 1
12018: PPUSH
12019: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12023: LD_INT 29
12025: PPUSH
12026: LD_VAR 0 3
12030: PPUSH
12031: LD_INT 1
12033: PPUSH
12034: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12038: LD_INT 30
12040: PPUSH
12041: LD_VAR 0 3
12045: PPUSH
12046: LD_INT 1
12048: PPUSH
12049: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12053: LD_INT 31
12055: PPUSH
12056: LD_VAR 0 3
12060: PPUSH
12061: LD_INT 1
12063: PPUSH
12064: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12068: LD_INT 32
12070: PPUSH
12071: LD_VAR 0 3
12075: PPUSH
12076: LD_INT 1
12078: PPUSH
12079: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
12083: LD_INT 33
12085: PPUSH
12086: LD_VAR 0 3
12090: PPUSH
12091: LD_INT 1
12093: PPUSH
12094: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12098: LD_INT 36
12100: PPUSH
12101: LD_VAR 0 3
12105: PPUSH
12106: LD_INT 1
12108: PPUSH
12109: CALL_OW 324
// end ; 6 :
12113: GO 13123
12115: LD_INT 6
12117: DOUBLE
12118: EQUAL
12119: IFTRUE 12123
12121: GO 13048
12123: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12124: LD_INT 35
12126: PPUSH
12127: LD_VAR 0 3
12131: PPUSH
12132: LD_INT 1
12134: PPUSH
12135: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12139: LD_INT 45
12141: PPUSH
12142: LD_VAR 0 3
12146: PPUSH
12147: LD_INT 1
12149: PPUSH
12150: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12154: LD_INT 46
12156: PPUSH
12157: LD_VAR 0 3
12161: PPUSH
12162: LD_INT 1
12164: PPUSH
12165: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12169: LD_INT 47
12171: PPUSH
12172: LD_VAR 0 3
12176: PPUSH
12177: LD_INT 1
12179: PPUSH
12180: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12184: LD_INT 1
12186: PPUSH
12187: LD_VAR 0 3
12191: PPUSH
12192: LD_INT 1
12194: PPUSH
12195: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12199: LD_INT 2
12201: PPUSH
12202: LD_VAR 0 3
12206: PPUSH
12207: LD_INT 1
12209: PPUSH
12210: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12214: LD_INT 11
12216: PPUSH
12217: LD_VAR 0 3
12221: PPUSH
12222: LD_INT 1
12224: PPUSH
12225: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12229: LD_INT 20
12231: PPUSH
12232: LD_VAR 0 3
12236: PPUSH
12237: LD_INT 1
12239: PPUSH
12240: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12244: LD_INT 48
12246: PPUSH
12247: LD_VAR 0 3
12251: PPUSH
12252: LD_INT 1
12254: PPUSH
12255: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12259: LD_INT 49
12261: PPUSH
12262: LD_VAR 0 3
12266: PPUSH
12267: LD_INT 1
12269: PPUSH
12270: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12274: LD_INT 50
12276: PPUSH
12277: LD_VAR 0 3
12281: PPUSH
12282: LD_INT 1
12284: PPUSH
12285: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12289: LD_INT 69
12291: PPUSH
12292: LD_VAR 0 3
12296: PPUSH
12297: LD_INT 1
12299: PPUSH
12300: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12304: LD_INT 39
12306: PPUSH
12307: LD_VAR 0 3
12311: PPUSH
12312: LD_INT 1
12314: PPUSH
12315: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12319: LD_INT 34
12321: PPUSH
12322: LD_VAR 0 3
12326: PPUSH
12327: LD_INT 1
12329: PPUSH
12330: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12334: LD_INT 42
12336: PPUSH
12337: LD_VAR 0 3
12341: PPUSH
12342: LD_INT 1
12344: PPUSH
12345: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12349: LD_INT 44
12351: PPUSH
12352: LD_VAR 0 3
12356: PPUSH
12357: LD_INT 1
12359: PPUSH
12360: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12364: LD_INT 41
12366: PPUSH
12367: LD_VAR 0 3
12371: PPUSH
12372: LD_INT 1
12374: PPUSH
12375: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
12379: LD_INT 13
12381: PPUSH
12382: LD_VAR 0 3
12386: PPUSH
12387: LD_INT 1
12389: PPUSH
12390: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12394: LD_INT 40
12396: PPUSH
12397: LD_VAR 0 3
12401: PPUSH
12402: LD_INT 1
12404: PPUSH
12405: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12409: LD_INT 43
12411: PPUSH
12412: LD_VAR 0 3
12416: PPUSH
12417: LD_INT 1
12419: PPUSH
12420: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12424: LD_INT 70
12426: PPUSH
12427: LD_VAR 0 3
12431: PPUSH
12432: LD_INT 1
12434: PPUSH
12435: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
12439: LD_INT 23
12441: PPUSH
12442: LD_VAR 0 3
12446: PPUSH
12447: LD_INT 1
12449: PPUSH
12450: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12454: LD_INT 51
12456: PPUSH
12457: LD_VAR 0 3
12461: PPUSH
12462: LD_INT 1
12464: PPUSH
12465: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12469: LD_INT 52
12471: PPUSH
12472: LD_VAR 0 3
12476: PPUSH
12477: LD_INT 1
12479: PPUSH
12480: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12484: LD_INT 6
12486: PPUSH
12487: LD_VAR 0 3
12491: PPUSH
12492: LD_INT 1
12494: PPUSH
12495: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12499: LD_INT 15
12501: PPUSH
12502: LD_VAR 0 3
12506: PPUSH
12507: LD_INT 1
12509: PPUSH
12510: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12514: LD_INT 7
12516: PPUSH
12517: LD_VAR 0 3
12521: PPUSH
12522: LD_INT 1
12524: PPUSH
12525: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12529: LD_INT 12
12531: PPUSH
12532: LD_VAR 0 3
12536: PPUSH
12537: LD_INT 1
12539: PPUSH
12540: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
12544: LD_INT 10
12546: PPUSH
12547: LD_VAR 0 3
12551: PPUSH
12552: LD_INT 1
12554: PPUSH
12555: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12559: LD_INT 17
12561: PPUSH
12562: LD_VAR 0 3
12566: PPUSH
12567: LD_INT 1
12569: PPUSH
12570: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12574: LD_INT 18
12576: PPUSH
12577: LD_VAR 0 3
12581: PPUSH
12582: LD_INT 1
12584: PPUSH
12585: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12589: LD_INT 60
12591: PPUSH
12592: LD_VAR 0 3
12596: PPUSH
12597: LD_INT 1
12599: PPUSH
12600: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
12604: LD_INT 61
12606: PPUSH
12607: LD_VAR 0 3
12611: PPUSH
12612: LD_INT 1
12614: PPUSH
12615: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12619: LD_INT 32
12621: PPUSH
12622: LD_VAR 0 3
12626: PPUSH
12627: LD_INT 1
12629: PPUSH
12630: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
12634: LD_INT 27
12636: PPUSH
12637: LD_VAR 0 3
12641: PPUSH
12642: LD_INT 1
12644: PPUSH
12645: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
12649: LD_INT 36
12651: PPUSH
12652: LD_VAR 0 3
12656: PPUSH
12657: LD_INT 1
12659: PPUSH
12660: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
12664: LD_INT 33
12666: PPUSH
12667: LD_VAR 0 3
12671: PPUSH
12672: LD_INT 1
12674: PPUSH
12675: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12679: LD_INT 9
12681: PPUSH
12682: LD_VAR 0 3
12686: PPUSH
12687: LD_INT 1
12689: PPUSH
12690: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
12694: LD_INT 38
12696: PPUSH
12697: LD_VAR 0 3
12701: PPUSH
12702: LD_INT 1
12704: PPUSH
12705: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12709: LD_INT 57
12711: PPUSH
12712: LD_VAR 0 3
12716: PPUSH
12717: LD_INT 1
12719: PPUSH
12720: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
12724: LD_INT 58
12726: PPUSH
12727: LD_VAR 0 3
12731: PPUSH
12732: LD_INT 1
12734: PPUSH
12735: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
12739: LD_INT 28
12741: PPUSH
12742: LD_VAR 0 3
12746: PPUSH
12747: LD_INT 1
12749: PPUSH
12750: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
12754: LD_INT 29
12756: PPUSH
12757: LD_VAR 0 3
12761: PPUSH
12762: LD_INT 1
12764: PPUSH
12765: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12769: LD_INT 30
12771: PPUSH
12772: LD_VAR 0 3
12776: PPUSH
12777: LD_INT 1
12779: PPUSH
12780: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12784: LD_INT 37
12786: PPUSH
12787: LD_VAR 0 3
12791: PPUSH
12792: LD_INT 1
12794: PPUSH
12795: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12799: LD_INT 63
12801: PPUSH
12802: LD_VAR 0 3
12806: PPUSH
12807: LD_INT 1
12809: PPUSH
12810: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
12814: LD_INT 64
12816: PPUSH
12817: LD_VAR 0 3
12821: PPUSH
12822: LD_INT 1
12824: PPUSH
12825: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12829: LD_INT 3
12831: PPUSH
12832: LD_VAR 0 3
12836: PPUSH
12837: LD_INT 1
12839: PPUSH
12840: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12844: LD_INT 4
12846: PPUSH
12847: LD_VAR 0 3
12851: PPUSH
12852: LD_INT 1
12854: PPUSH
12855: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12859: LD_INT 5
12861: PPUSH
12862: LD_VAR 0 3
12866: PPUSH
12867: LD_INT 1
12869: PPUSH
12870: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
12874: LD_INT 8
12876: PPUSH
12877: LD_VAR 0 3
12881: PPUSH
12882: LD_INT 1
12884: PPUSH
12885: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12889: LD_INT 66
12891: PPUSH
12892: LD_VAR 0 3
12896: PPUSH
12897: LD_INT 1
12899: PPUSH
12900: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
12904: LD_INT 67
12906: PPUSH
12907: LD_VAR 0 3
12911: PPUSH
12912: LD_INT 1
12914: PPUSH
12915: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12919: LD_INT 21
12921: PPUSH
12922: LD_VAR 0 3
12926: PPUSH
12927: LD_INT 1
12929: PPUSH
12930: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12934: LD_INT 22
12936: PPUSH
12937: LD_VAR 0 3
12941: PPUSH
12942: LD_INT 1
12944: PPUSH
12945: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12949: LD_INT 19
12951: PPUSH
12952: LD_VAR 0 3
12956: PPUSH
12957: LD_INT 1
12959: PPUSH
12960: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
12964: LD_INT 26
12966: PPUSH
12967: LD_VAR 0 3
12971: PPUSH
12972: LD_INT 1
12974: PPUSH
12975: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12979: LD_INT 54
12981: PPUSH
12982: LD_VAR 0 3
12986: PPUSH
12987: LD_INT 1
12989: PPUSH
12990: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12994: LD_INT 55
12996: PPUSH
12997: LD_VAR 0 3
13001: PPUSH
13002: LD_INT 1
13004: PPUSH
13005: CALL_OW 322
// for i = 0 to 39 do
13009: LD_ADDR_VAR 0 4
13013: PUSH
13014: DOUBLE
13015: LD_INT 0
13017: DEC
13018: ST_TO_ADDR
13019: LD_INT 39
13021: PUSH
13022: FOR_TO
13023: IFFALSE 13044
// SetRestrict ( i , side , true ) ;
13025: LD_VAR 0 4
13029: PPUSH
13030: LD_VAR 0 3
13034: PPUSH
13035: LD_INT 1
13037: PPUSH
13038: CALL_OW 324
13042: GO 13022
13044: POP
13045: POP
// end ; else
13046: GO 13123
13048: POP
// begin for i = 1 to 73 do
13049: LD_ADDR_VAR 0 4
13053: PUSH
13054: DOUBLE
13055: LD_INT 1
13057: DEC
13058: ST_TO_ADDR
13059: LD_INT 73
13061: PUSH
13062: FOR_TO
13063: IFFALSE 13084
// SetTech ( i , side , state_enabled ) ;
13065: LD_VAR 0 4
13069: PPUSH
13070: LD_VAR 0 3
13074: PPUSH
13075: LD_INT 1
13077: PPUSH
13078: CALL_OW 322
13082: GO 13062
13084: POP
13085: POP
// for i = 0 to 39 do
13086: LD_ADDR_VAR 0 4
13090: PUSH
13091: DOUBLE
13092: LD_INT 0
13094: DEC
13095: ST_TO_ADDR
13096: LD_INT 39
13098: PUSH
13099: FOR_TO
13100: IFFALSE 13121
// SetRestrict ( i , side , true ) ;
13102: LD_VAR 0 4
13106: PPUSH
13107: LD_VAR 0 3
13111: PPUSH
13112: LD_INT 1
13114: PPUSH
13115: CALL_OW 324
13119: GO 13099
13121: POP
13122: POP
// end ; end ; end ;
13123: GO 9128
13125: POP
13126: POP
// end ; end_of_file
13127: LD_VAR 0 2
13131: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
13132: LD_INT 0
13134: PPUSH
13135: PPUSH
13136: PPUSH
13137: PPUSH
13138: PPUSH
13139: PPUSH
13140: PPUSH
13141: PPUSH
13142: PPUSH
// for i := 1 to 8 do
13143: LD_ADDR_VAR 0 2
13147: PUSH
13148: DOUBLE
13149: LD_INT 1
13151: DEC
13152: ST_TO_ADDR
13153: LD_INT 8
13155: PUSH
13156: FOR_TO
13157: IFFALSE 13541
// begin if Side_Positions [ i ] then
13159: LD_EXP 34
13163: PUSH
13164: LD_VAR 0 2
13168: ARRAY
13169: IFFALSE 13539
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
13171: LD_ADDR_VAR 0 7
13175: PUSH
13176: LD_INT 22
13178: PUSH
13179: LD_VAR 0 2
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: LD_INT 21
13190: PUSH
13191: LD_INT 1
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: PPUSH
13202: CALL_OW 69
13206: PUSH
13207: LD_INT 0
13209: PLUS
13210: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13211: LD_ADDR_VAR 0 9
13215: PUSH
13216: LD_INT 22
13218: PUSH
13219: LD_VAR 0 2
13223: PUSH
13224: EMPTY
13225: LIST
13226: LIST
13227: PUSH
13228: LD_INT 2
13230: PUSH
13231: LD_INT 30
13233: PUSH
13234: LD_INT 0
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: PUSH
13241: LD_INT 30
13243: PUSH
13244: LD_INT 1
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: LIST
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: PPUSH
13260: CALL_OW 69
13264: ST_TO_ADDR
// crates := 0 ;
13265: LD_ADDR_VAR 0 4
13269: PUSH
13270: LD_INT 0
13272: ST_TO_ADDR
// oil := 0 ;
13273: LD_ADDR_VAR 0 5
13277: PUSH
13278: LD_INT 0
13280: ST_TO_ADDR
// sib := 0 ;
13281: LD_ADDR_VAR 0 6
13285: PUSH
13286: LD_INT 0
13288: ST_TO_ADDR
// if bases then
13289: LD_VAR 0 9
13293: IFFALSE 13399
// begin for j in bases do
13295: LD_ADDR_VAR 0 3
13299: PUSH
13300: LD_VAR 0 9
13304: PUSH
13305: FOR_IN
13306: IFFALSE 13397
// begin base := GetBase ( j ) ;
13308: LD_ADDR_VAR 0 8
13312: PUSH
13313: LD_VAR 0 3
13317: PPUSH
13318: CALL_OW 274
13322: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
13323: LD_ADDR_VAR 0 4
13327: PUSH
13328: LD_VAR 0 4
13332: PUSH
13333: LD_VAR 0 8
13337: PPUSH
13338: LD_INT 1
13340: PPUSH
13341: CALL_OW 275
13345: PLUS
13346: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
13347: LD_ADDR_VAR 0 5
13351: PUSH
13352: LD_VAR 0 5
13356: PUSH
13357: LD_VAR 0 8
13361: PPUSH
13362: LD_INT 2
13364: PPUSH
13365: CALL_OW 275
13369: PLUS
13370: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
13371: LD_ADDR_VAR 0 6
13375: PUSH
13376: LD_VAR 0 6
13380: PUSH
13381: LD_VAR 0 8
13385: PPUSH
13386: LD_INT 3
13388: PPUSH
13389: CALL_OW 275
13393: PLUS
13394: ST_TO_ADDR
// end ;
13395: GO 13305
13397: POP
13398: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
13399: LD_STRING setSpecText(
13401: PUSH
13402: LD_VAR 0 2
13406: STR
13407: PUSH
13408: LD_STRING ,
13410: STR
13411: PUSH
13412: LD_INT 2
13414: STR
13415: PUSH
13416: LD_STRING ,
13418: STR
13419: PUSH
13420: LD_VAR 0 4
13424: STR
13425: PUSH
13426: LD_STRING )
13428: STR
13429: PPUSH
13430: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
13434: LD_STRING setSpecText(
13436: PUSH
13437: LD_VAR 0 2
13441: STR
13442: PUSH
13443: LD_STRING ,
13445: STR
13446: PUSH
13447: LD_INT 3
13449: STR
13450: PUSH
13451: LD_STRING ,
13453: STR
13454: PUSH
13455: LD_VAR 0 5
13459: STR
13460: PUSH
13461: LD_STRING )
13463: STR
13464: PPUSH
13465: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
13469: LD_STRING setSpecText(
13471: PUSH
13472: LD_VAR 0 2
13476: STR
13477: PUSH
13478: LD_STRING ,
13480: STR
13481: PUSH
13482: LD_INT 4
13484: STR
13485: PUSH
13486: LD_STRING ,
13488: STR
13489: PUSH
13490: LD_VAR 0 6
13494: STR
13495: PUSH
13496: LD_STRING )
13498: STR
13499: PPUSH
13500: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
13504: LD_STRING setSpecText(
13506: PUSH
13507: LD_VAR 0 2
13511: STR
13512: PUSH
13513: LD_STRING ,
13515: STR
13516: PUSH
13517: LD_INT 5
13519: STR
13520: PUSH
13521: LD_STRING ,
13523: STR
13524: PUSH
13525: LD_VAR 0 7
13529: STR
13530: PUSH
13531: LD_STRING )
13533: STR
13534: PPUSH
13535: CALL_OW 559
// end ; end ;
13539: GO 13156
13541: POP
13542: POP
// end ;
13543: LD_VAR 0 1
13547: RET
// every 0 0$1 do
13548: GO 13550
13550: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
13551: LD_STRING setSpecLogoNumber(
13553: PUSH
13554: LD_INT 2
13556: STR
13557: PUSH
13558: LD_STRING ,
13560: STR
13561: PUSH
13562: LD_INT 1
13564: STR
13565: PUSH
13566: LD_STRING )
13568: STR
13569: PPUSH
13570: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
13574: LD_STRING setSpecLogoNumber(
13576: PUSH
13577: LD_INT 3
13579: STR
13580: PUSH
13581: LD_STRING ,
13583: STR
13584: PUSH
13585: LD_INT 2
13587: STR
13588: PUSH
13589: LD_STRING )
13591: STR
13592: PPUSH
13593: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
13597: LD_STRING setSpecLogoNumber(
13599: PUSH
13600: LD_INT 4
13602: STR
13603: PUSH
13604: LD_STRING ,
13606: STR
13607: PUSH
13608: LD_INT 3
13610: STR
13611: PUSH
13612: LD_STRING )
13614: STR
13615: PPUSH
13616: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
13620: LD_STRING setSpecLogoNumber(
13622: PUSH
13623: LD_INT 5
13625: STR
13626: PUSH
13627: LD_STRING ,
13629: STR
13630: PUSH
13631: LD_INT 4
13633: STR
13634: PUSH
13635: LD_STRING )
13637: STR
13638: PPUSH
13639: CALL_OW 559
// end ;
13643: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
13644: LD_INT 2
13646: PUSH
13647: LD_INT 30
13649: PUSH
13650: LD_INT 0
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: PUSH
13657: LD_INT 30
13659: PUSH
13660: LD_INT 1
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: LIST
13671: PPUSH
13672: CALL_OW 69
13676: IFFALSE 13686
13678: GO 13680
13680: DISABLE
// begin enable ;
13681: ENABLE
// UpdateSpectatorBar ;
13682: CALL 13132 0 0
// end ; end_of_file
13686: END
// var respawn , inqueue ; export function init_respawning ; begin
13687: LD_INT 0
13689: PPUSH
// respawn := Rand ( 1 , 8 ) ;
13690: LD_ADDR_LOC 11
13694: PUSH
13695: LD_INT 1
13697: PPUSH
13698: LD_INT 8
13700: PPUSH
13701: CALL_OW 12
13705: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13706: LD_ADDR_LOC 12
13710: PUSH
13711: LD_INT 0
13713: PUSH
13714: LD_INT 0
13716: PUSH
13717: LD_INT 0
13719: PUSH
13720: LD_INT 0
13722: PUSH
13723: LD_INT 0
13725: PUSH
13726: LD_INT 0
13728: PUSH
13729: LD_INT 0
13731: PUSH
13732: LD_INT 0
13734: PUSH
13735: EMPTY
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: ST_TO_ADDR
// end ;
13745: LD_VAR 0 1
13749: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
13750: GO 13752
13752: DISABLE
13753: LD_INT 0
13755: PPUSH
13756: PPUSH
13757: PPUSH
// begin if respawning_time_max = 0 then
13758: LD_EXP 26
13762: PUSH
13763: LD_INT 0
13765: EQUAL
13766: IFFALSE 13770
// exit ;
13768: GO 14178
// if respawn = 8 then
13770: LD_LOC 11
13774: PUSH
13775: LD_INT 8
13777: EQUAL
13778: IFFALSE 13790
// respawn := 1 else
13780: LD_ADDR_LOC 11
13784: PUSH
13785: LD_INT 1
13787: ST_TO_ADDR
13788: GO 13804
// respawn := respawn + 1 ;
13790: LD_ADDR_LOC 11
13794: PUSH
13795: LD_LOC 11
13799: PUSH
13800: LD_INT 1
13802: PLUS
13803: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
13804: LD_EXP 34
13808: PUSH
13809: LD_LOC 11
13813: ARRAY
13814: PUSH
13815: LD_LOC 12
13819: PUSH
13820: LD_LOC 11
13824: ARRAY
13825: NOT
13826: AND
13827: IFFALSE 14177
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
13829: LD_ADDR_VAR 0 1
13833: PUSH
13834: LD_INT 21
13836: PUSH
13837: LD_INT 1
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: LD_INT 22
13846: PUSH
13847: LD_LOC 11
13851: PUSH
13852: EMPTY
13853: LIST
13854: LIST
13855: PUSH
13856: LD_INT 3
13858: PUSH
13859: LD_INT 23
13861: PUSH
13862: LD_INT 0
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: PPUSH
13875: CALL_OW 69
13879: ST_TO_ADDR
// if n < number_of_people then
13880: LD_VAR 0 1
13884: PUSH
13885: LD_EXP 17
13889: LESS
13890: IFFALSE 14174
// begin aktresp := respawn ;
13892: LD_ADDR_VAR 0 3
13896: PUSH
13897: LD_LOC 11
13901: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
13902: LD_ADDR_LOC 12
13906: PUSH
13907: LD_LOC 12
13911: PPUSH
13912: LD_VAR 0 3
13916: PPUSH
13917: LD_INT 1
13919: PPUSH
13920: CALL_OW 1
13924: ST_TO_ADDR
// enable ;
13925: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
13926: LD_EXP 25
13930: PPUSH
13931: LD_EXP 26
13935: PPUSH
13936: CALL_OW 12
13940: PPUSH
13941: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
13945: LD_ADDR_LOC 12
13949: PUSH
13950: LD_LOC 12
13954: PPUSH
13955: LD_VAR 0 3
13959: PPUSH
13960: LD_INT 0
13962: PPUSH
13963: CALL_OW 1
13967: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
13968: LD_ADDR_VAR 0 2
13972: PUSH
13973: LD_INT 21
13975: PUSH
13976: LD_INT 3
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: PUSH
13983: LD_INT 2
13985: PUSH
13986: LD_INT 30
13988: PUSH
13989: LD_INT 0
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PUSH
13996: LD_INT 30
13998: PUSH
13999: LD_INT 1
14001: PUSH
14002: EMPTY
14003: LIST
14004: LIST
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: LIST
14010: PUSH
14011: LD_INT 50
14013: PUSH
14014: EMPTY
14015: LIST
14016: PUSH
14017: LD_INT 22
14019: PUSH
14020: LD_VAR 0 3
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: PPUSH
14035: CALL_OW 69
14039: ST_TO_ADDR
// if dep = 0 then
14040: LD_VAR 0 2
14044: PUSH
14045: LD_INT 0
14047: EQUAL
14048: IFFALSE 14052
// exit ;
14050: GO 14178
// hc_name :=  ;
14052: LD_ADDR_OWVAR 26
14056: PUSH
14057: LD_STRING 
14059: ST_TO_ADDR
// hc_importance := 0 ;
14060: LD_ADDR_OWVAR 32
14064: PUSH
14065: LD_INT 0
14067: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
14068: LD_INT 0
14070: PPUSH
14071: LD_INT 0
14073: PPUSH
14074: LD_EXP 18
14078: PUSH
14079: LD_INT 2
14081: DIV
14082: PPUSH
14083: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
14087: LD_ADDR_OWVAR 21
14091: PUSH
14092: LD_EXP 35
14096: PUSH
14097: LD_VAR 0 3
14101: ARRAY
14102: ST_TO_ADDR
// uc_side := aktresp ;
14103: LD_ADDR_OWVAR 20
14107: PUSH
14108: LD_VAR 0 3
14112: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
14113: LD_ADDR_VAR 0 2
14117: PUSH
14118: LD_VAR 0 2
14122: PUSH
14123: LD_INT 1
14125: PPUSH
14126: LD_VAR 0 2
14130: PPUSH
14131: CALL_OW 12
14135: ARRAY
14136: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
14137: CALL_OW 44
14141: PPUSH
14142: LD_VAR 0 2
14146: PPUSH
14147: CALL_OW 250
14151: PPUSH
14152: LD_VAR 0 2
14156: PPUSH
14157: CALL_OW 251
14161: PPUSH
14162: LD_INT 7
14164: PPUSH
14165: LD_INT 1
14167: PPUSH
14168: CALL_OW 50
// end else
14172: GO 14175
// enable ;
14174: ENABLE
// end else
14175: GO 14178
// enable ;
14177: ENABLE
// end ;
14178: PPOPN 3
14180: END
