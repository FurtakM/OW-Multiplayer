// export Game_Type ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_amount_of_apemen , def_people_respawning , def_siberite_bomb , def_builduptime ; export is_depot , number_of_breastworks , number_of_people , skill_level , amount_of_apemen , starting_crates , starting_resources , shipments_density , siberite_bomb_Delay , spawning_koef_of_apemen , respawning_time_min , respawning_time_max , def_win_rules ; export Side_Count , Team_Count , Player_Side , Player_Team , Side_Teams , Teams ; export Side_Positions , Side_Nations , Side_Names , Team_Names , Team_Game , Side_Comps ; export depot_def , start_def , extra_oil_deposits_locations ; export heroes ; export commander , battle_flags_id , morale_decreasing_time ; var global_units , global_defined , soldiers_created ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function create_forest ; var area ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
// PlaceTreesToArea ( BigForest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , Rand ( 500 , 570 ) , 50 , 2 ) ;
  72: LD_INT 6
  74: PPUSH
  75: LD_INT 21
  77: PUSH
  78: LD_INT 22
  80: PUSH
  81: LD_INT 24
  83: PUSH
  84: LD_INT 21
  86: PUSH
  87: LD_INT 22
  89: PUSH
  90: LD_INT 24
  92: PUSH
  93: LD_INT 38
  95: PUSH
  96: LD_INT 39
  98: PUSH
  99: EMPTY
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: PPUSH
 109: LD_INT 500
 111: PPUSH
 112: LD_INT 570
 114: PPUSH
 115: CALL_OW 12
 119: PPUSH
 120: LD_INT 50
 122: PPUSH
 123: LD_INT 2
 125: PPUSH
 126: CALL_OW 352
// if def_base_level then
 130: LD_EXP 2
 134: IFFALSE 146
// area := bush_forest_small else
 136: LD_ADDR_VAR 0 2
 140: PUSH
 141: LD_INT 9
 143: ST_TO_ADDR
 144: GO 154
// area := bush_forest_big ;
 146: LD_ADDR_VAR 0 2
 150: PUSH
 151: LD_INT 8
 153: ST_TO_ADDR
// PlaceTreesToArea ( area , [ 38 , 39 , 37 ] , Rand ( 300 , 350 ) , 10 , 3 ) ;
 154: LD_VAR 0 2
 158: PPUSH
 159: LD_INT 38
 161: PUSH
 162: LD_INT 39
 164: PUSH
 165: LD_INT 37
 167: PUSH
 168: EMPTY
 169: LIST
 170: LIST
 171: LIST
 172: PPUSH
 173: LD_INT 300
 175: PPUSH
 176: LD_INT 350
 178: PPUSH
 179: CALL_OW 12
 183: PPUSH
 184: LD_INT 10
 186: PPUSH
 187: LD_INT 3
 189: PPUSH
 190: CALL_OW 352
// PlaceTreesToArea ( BigForest , [ 38 , 39 , 37 ] , 80 , 10 , 3 ) ;
 194: LD_INT 6
 196: PPUSH
 197: LD_INT 38
 199: PUSH
 200: LD_INT 39
 202: PUSH
 203: LD_INT 37
 205: PUSH
 206: EMPTY
 207: LIST
 208: LIST
 209: LIST
 210: PPUSH
 211: LD_INT 80
 213: PPUSH
 214: LD_INT 10
 216: PPUSH
 217: LD_INT 3
 219: PPUSH
 220: CALL_OW 352
// end ;
 224: LD_VAR 0 1
 228: RET
// function create_map_resources ; var un , oil_pos , sib_pos ; begin
 229: LD_INT 0
 231: PPUSH
 232: PPUSH
 233: PPUSH
 234: PPUSH
// oil_pos := [ [ 24 , 10 ] , [ 82 , 9 ] , [ 79 , 115 ] , [ 135 , 112 ] ] ;
 235: LD_ADDR_VAR 0 3
 239: PUSH
 240: LD_INT 24
 242: PUSH
 243: LD_INT 10
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: PUSH
 250: LD_INT 82
 252: PUSH
 253: LD_INT 9
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 79
 262: PUSH
 263: LD_INT 115
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 135
 272: PUSH
 273: LD_INT 112
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: PUSH
 280: EMPTY
 281: LIST
 282: LIST
 283: LIST
 284: LIST
 285: ST_TO_ADDR
// sib_pos := [ [ 24 , 29 ] , [ 102 , 29 ] , [ 60 , 93 ] , [ 134 , 91 ] ] ;
 286: LD_ADDR_VAR 0 4
 290: PUSH
 291: LD_INT 24
 293: PUSH
 294: LD_INT 29
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: PUSH
 301: LD_INT 102
 303: PUSH
 304: LD_INT 29
 306: PUSH
 307: EMPTY
 308: LIST
 309: LIST
 310: PUSH
 311: LD_INT 60
 313: PUSH
 314: LD_INT 93
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 134
 323: PUSH
 324: LD_INT 91
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: LIST
 335: LIST
 336: ST_TO_ADDR
// for un = 1 to 4 do
 337: LD_ADDR_VAR 0 2
 341: PUSH
 342: DOUBLE
 343: LD_INT 1
 345: DEC
 346: ST_TO_ADDR
 347: LD_INT 4
 349: PUSH
 350: FOR_TO
 351: IFFALSE 429
// begin CreateDepositXY ( oil_pos [ un ] [ 1 ] , oil_pos [ un ] [ 2 ] , mat_oil ) ;
 353: LD_VAR 0 3
 357: PUSH
 358: LD_VAR 0 2
 362: ARRAY
 363: PUSH
 364: LD_INT 1
 366: ARRAY
 367: PPUSH
 368: LD_VAR 0 3
 372: PUSH
 373: LD_VAR 0 2
 377: ARRAY
 378: PUSH
 379: LD_INT 2
 381: ARRAY
 382: PPUSH
 383: LD_INT 2
 385: PPUSH
 386: CALL_OW 62
// CreateDepositXY ( sib_pos [ un ] [ 1 ] , sib_pos [ un ] [ 2 ] , mat_siberit ) ;
 390: LD_VAR 0 4
 394: PUSH
 395: LD_VAR 0 2
 399: ARRAY
 400: PUSH
 401: LD_INT 1
 403: ARRAY
 404: PPUSH
 405: LD_VAR 0 4
 409: PUSH
 410: LD_VAR 0 2
 414: ARRAY
 415: PUSH
 416: LD_INT 2
 418: ARRAY
 419: PPUSH
 420: LD_INT 3
 422: PPUSH
 423: CALL_OW 62
// end ;
 427: GO 350
 429: POP
 430: POP
// end ;
 431: LD_VAR 0 1
 435: RET
// function init_map ; var i ; begin
 436: LD_INT 0
 438: PPUSH
 439: PPUSH
// extra_oil_deposits_locations := [ [ 38 , 6 ] , [ 67 , 6 ] , [ 94 , 115 ] , [ 116 , 99 ] ] ;
 440: LD_ADDR_EXP 42
 444: PUSH
 445: LD_INT 38
 447: PUSH
 448: LD_INT 6
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 67
 457: PUSH
 458: LD_INT 6
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: LD_INT 94
 467: PUSH
 468: LD_INT 115
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: LD_INT 116
 477: PUSH
 478: LD_INT 99
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: ST_TO_ADDR
// create_forest ;
 491: CALL 68 0 0
// create_map_resources ;
 495: CALL 229 0 0
// depot_def := [ [ 12 , 10 , 2 ] , [ 97 , 10 , 3 ] , [ 64 , 108 , 0 ] , [ 146 , 110 , 5 ] ] ;
 499: LD_ADDR_EXP 40
 503: PUSH
 504: LD_INT 12
 506: PUSH
 507: LD_INT 10
 509: PUSH
 510: LD_INT 2
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: LIST
 517: PUSH
 518: LD_INT 97
 520: PUSH
 521: LD_INT 10
 523: PUSH
 524: LD_INT 3
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: LIST
 531: PUSH
 532: LD_INT 64
 534: PUSH
 535: LD_INT 108
 537: PUSH
 538: LD_INT 0
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: LIST
 545: PUSH
 546: LD_INT 146
 548: PUSH
 549: LD_INT 110
 551: PUSH
 552: LD_INT 5
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: LIST
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: LIST
 565: ST_TO_ADDR
// if def_base_level then
 566: LD_EXP 2
 570: IFFALSE 625
// start_def := [ [ 16 , 14 ] , [ 96 , 13 ] , [ 65 , 105 ] , [ 141 , 105 ] ] else
 572: LD_ADDR_EXP 41
 576: PUSH
 577: LD_INT 16
 579: PUSH
 580: LD_INT 14
 582: PUSH
 583: EMPTY
 584: LIST
 585: LIST
 586: PUSH
 587: LD_INT 96
 589: PUSH
 590: LD_INT 13
 592: PUSH
 593: EMPTY
 594: LIST
 595: LIST
 596: PUSH
 597: LD_INT 65
 599: PUSH
 600: LD_INT 105
 602: PUSH
 603: EMPTY
 604: LIST
 605: LIST
 606: PUSH
 607: LD_INT 141
 609: PUSH
 610: LD_INT 105
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: ST_TO_ADDR
 623: GO 676
// start_def := [ [ 7 , 5 ] , [ 98 , 6 ] , [ 63 , 113 ] , [ 151 , 113 ] ] ;
 625: LD_ADDR_EXP 41
 629: PUSH
 630: LD_INT 7
 632: PUSH
 633: LD_INT 5
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: PUSH
 640: LD_INT 98
 642: PUSH
 643: LD_INT 6
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: PUSH
 650: LD_INT 63
 652: PUSH
 653: LD_INT 113
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: PUSH
 660: LD_INT 151
 662: PUSH
 663: LD_INT 113
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: ST_TO_ADDR
// end ;
 676: LD_VAR 0 1
 680: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
 681: LD_INT 0
 683: PPUSH
 684: PPUSH
 685: PPUSH
 686: PPUSH
 687: PPUSH
 688: PPUSH
 689: PPUSH
 690: PPUSH
 691: PPUSH
// if MultiPlayer then
 692: LD_OWVAR 4
 696: IFFALSE 780
// begin Game_Type = mp_game_type ;
 698: LD_ADDR_EXP 1
 702: PUSH
 703: LD_OWVAR 6
 707: ST_TO_ADDR
// Player_Side = mp_player_side ;
 708: LD_ADDR_EXP 30
 712: PUSH
 713: LD_OWVAR 7
 717: ST_TO_ADDR
// Player_Team = mp_player_team ;
 718: LD_ADDR_EXP 31
 722: PUSH
 723: LD_OWVAR 8
 727: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
 728: LD_ADDR_EXP 34
 732: PUSH
 733: LD_OWVAR 17
 737: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 738: LD_ADDR_EXP 32
 742: PUSH
 743: LD_OWVAR 15
 747: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 748: LD_ADDR_EXP 35
 752: PUSH
 753: LD_OWVAR 16
 757: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 758: LD_ADDR_EXP 39
 762: PUSH
 763: CALL 0 0 0
 767: ST_TO_ADDR
// Teams = mp_teams ;
 768: LD_ADDR_EXP 33
 772: PUSH
 773: LD_OWVAR 12
 777: ST_TO_ADDR
// end else
 778: GO 981
// begin Game_Type = 2 ;
 780: LD_ADDR_EXP 1
 784: PUSH
 785: LD_INT 2
 787: ST_TO_ADDR
// Player_Side = 4 ;
 788: LD_ADDR_EXP 30
 792: PUSH
 793: LD_INT 4
 795: ST_TO_ADDR
// Side_Positions = [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 796: LD_ADDR_EXP 34
 800: PUSH
 801: LD_INT 0
 803: PUSH
 804: LD_INT 3
 806: PUSH
 807: LD_INT 0
 809: PUSH
 810: LD_INT 1
 812: PUSH
 813: LD_INT 0
 815: PUSH
 816: LD_INT 2
 818: PUSH
 819: LD_INT 4
 821: PUSH
 822: LD_INT 0
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: LIST
 834: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 2 , 0 , 1 , 2 , 0 ] ;
 835: LD_ADDR_EXP 32
 839: PUSH
 840: LD_INT 0
 842: PUSH
 843: LD_INT 1
 845: PUSH
 846: LD_INT 0
 848: PUSH
 849: LD_INT 2
 851: PUSH
 852: LD_INT 0
 854: PUSH
 855: LD_INT 1
 857: PUSH
 858: LD_INT 2
 860: PUSH
 861: LD_INT 0
 863: PUSH
 864: EMPTY
 865: LIST
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: LIST
 871: LIST
 872: LIST
 873: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 2 , 0 , 1 , 3 , 0 ] ;
 874: LD_ADDR_EXP 35
 878: PUSH
 879: LD_INT 0
 881: PUSH
 882: LD_INT 3
 884: PUSH
 885: LD_INT 0
 887: PUSH
 888: LD_INT 2
 890: PUSH
 891: LD_INT 0
 893: PUSH
 894: LD_INT 1
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: LD_INT 0
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 913: LD_ADDR_EXP 39
 917: PUSH
 918: LD_INT 0
 920: PUSH
 921: LD_INT 0
 923: PUSH
 924: LD_INT 0
 926: PUSH
 927: LD_INT 0
 929: PUSH
 930: LD_INT 0
 932: PUSH
 933: LD_INT 0
 935: PUSH
 936: LD_INT 0
 938: PUSH
 939: LD_INT 0
 941: PUSH
 942: EMPTY
 943: LIST
 944: LIST
 945: LIST
 946: LIST
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: ST_TO_ADDR
// Teams = [ [ 2 , 6 ] , [ 4 , 7 ] ] ;
 952: LD_ADDR_EXP 33
 956: PUSH
 957: LD_INT 2
 959: PUSH
 960: LD_INT 6
 962: PUSH
 963: EMPTY
 964: LIST
 965: LIST
 966: PUSH
 967: LD_INT 4
 969: PUSH
 970: LD_INT 7
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: ST_TO_ADDR
// end ; Side_Count = ( Side_Positions diff [ 0 ] ) + 0 ;
 981: LD_ADDR_EXP 28
 985: PUSH
 986: LD_EXP 34
 990: PUSH
 991: LD_INT 0
 993: PUSH
 994: EMPTY
 995: LIST
 996: DIFF
 997: PUSH
 998: LD_INT 0
1000: PLUS
1001: ST_TO_ADDR
// Team_Count = ( Side_Teams diff [ 0 ] ) + 0 ;
1002: LD_ADDR_EXP 29
1006: PUSH
1007: LD_EXP 32
1011: PUSH
1012: LD_INT 0
1014: PUSH
1015: EMPTY
1016: LIST
1017: DIFF
1018: PUSH
1019: LD_INT 0
1021: PLUS
1022: ST_TO_ADDR
// if MultiPlayer then
1023: LD_OWVAR 4
1027: IFFALSE 1221
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
1029: LD_ADDR_EXP 2
1033: PUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL_OW 426
1041: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
1042: LD_ADDR_EXP 3
1046: PUSH
1047: LD_INT 1
1049: PPUSH
1050: CALL_OW 426
1054: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
1055: LD_ADDR_EXP 4
1059: PUSH
1060: LD_INT 2
1062: PPUSH
1063: CALL_OW 426
1067: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
1068: LD_ADDR_EXP 5
1072: PUSH
1073: LD_INT 3
1075: PPUSH
1076: CALL_OW 426
1080: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
1081: LD_ADDR_EXP 6
1085: PUSH
1086: LD_INT 4
1088: PPUSH
1089: CALL_OW 426
1093: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
1094: LD_ADDR_EXP 7
1098: PUSH
1099: LD_INT 5
1101: PPUSH
1102: CALL_OW 426
1106: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
1107: LD_ADDR_EXP 8
1111: PUSH
1112: LD_INT 10
1114: PPUSH
1115: CALL_OW 426
1119: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
1120: LD_ADDR_EXP 9
1124: PUSH
1125: LD_INT 11
1127: PPUSH
1128: CALL_OW 426
1132: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
1133: LD_ADDR_EXP 10
1137: PUSH
1138: LD_INT 12
1140: PPUSH
1141: CALL_OW 426
1145: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
1146: LD_ADDR_EXP 11
1150: PUSH
1151: LD_INT 13
1153: PPUSH
1154: CALL_OW 426
1158: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
1159: LD_ADDR_EXP 12
1163: PUSH
1164: LD_INT 14
1166: PPUSH
1167: CALL_OW 426
1171: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
1172: LD_ADDR_EXP 13
1176: PUSH
1177: LD_INT 15
1179: PPUSH
1180: CALL_OW 426
1184: ST_TO_ADDR
// def_win_rules = 0 ;
1185: LD_ADDR_EXP 27
1189: PUSH
1190: LD_INT 0
1192: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
1193: LD_ADDR_EXP 14
1197: PUSH
1198: LD_INT 20
1200: PPUSH
1201: CALL_OW 426
1205: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
1206: LD_ADDR_VAR 0 9
1210: PUSH
1211: LD_INT 22
1213: PPUSH
1214: CALL_OW 426
1218: ST_TO_ADDR
// end else
1219: GO 1345
// begin randomize ;
1221: CALL_OW 10
// def_base_level = 1 ;
1225: LD_ADDR_EXP 2
1229: PUSH
1230: LD_INT 1
1232: ST_TO_ADDR
// def_amount_of_people = 1 ;
1233: LD_ADDR_EXP 3
1237: PUSH
1238: LD_INT 1
1240: ST_TO_ADDR
// def_skill_level = 1 ;
1241: LD_ADDR_EXP 4
1245: PUSH
1246: LD_INT 1
1248: ST_TO_ADDR
// def_starting_resources = 2 ;
1249: LD_ADDR_EXP 5
1253: PUSH
1254: LD_INT 2
1256: ST_TO_ADDR
// def_shipments_density = 1 ;
1257: LD_ADDR_EXP 6
1261: PUSH
1262: LD_INT 1
1264: ST_TO_ADDR
// def_extra_oil_deposits = 0 ;
1265: LD_ADDR_EXP 7
1269: PUSH
1270: LD_INT 0
1272: ST_TO_ADDR
// def_shared_vision = 1 ;
1273: LD_ADDR_EXP 8
1277: PUSH
1278: LD_INT 1
1280: ST_TO_ADDR
// def_morale_flags = 1 ;
1281: LD_ADDR_EXP 9
1285: PUSH
1286: LD_INT 1
1288: ST_TO_ADDR
// def_siberite_detection = 1 ;
1289: LD_ADDR_EXP 10
1293: PUSH
1294: LD_INT 1
1296: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
1297: LD_ADDR_EXP 11
1301: PUSH
1302: LD_INT 3
1304: ST_TO_ADDR
// def_people_respawning = 2 ;
1305: LD_ADDR_EXP 12
1309: PUSH
1310: LD_INT 2
1312: ST_TO_ADDR
// def_siberite_bomb = 0 ;
1313: LD_ADDR_EXP 13
1317: PUSH
1318: LD_INT 0
1320: ST_TO_ADDR
// def_win_rules = 0 ;
1321: LD_ADDR_EXP 27
1325: PUSH
1326: LD_INT 0
1328: ST_TO_ADDR
// def_builduptime := 1 ;
1329: LD_ADDR_EXP 14
1333: PUSH
1334: LD_INT 1
1336: ST_TO_ADDR
// tech_level = 4 ;
1337: LD_ADDR_VAR 0 9
1341: PUSH
1342: LD_INT 4
1344: ST_TO_ADDR
// end ; if isSGUI then
1345: LD_OWVAR 83
1349: IFFALSE 1357
// setMpTechs ( ) else
1351: CALL 8365 0 0
1355: GO 1370
// begin SetMpTechLevel ( tech_level + 1 ) ;
1357: LD_VAR 0 9
1361: PUSH
1362: LD_INT 1
1364: PLUS
1365: PPUSH
1366: CALL 8512 0 1
// end ; is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1370: LD_ADDR_EXP 15
1374: PUSH
1375: LD_INT 0
1377: PUSH
1378: LD_INT 1
1380: PUSH
1381: LD_INT 1
1383: PUSH
1384: LD_INT 1
1386: PUSH
1387: EMPTY
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: PUSH
1393: LD_EXP 2
1397: PUSH
1398: LD_INT 1
1400: PLUS
1401: ARRAY
1402: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 0 , 0 ] [ def_base_level + 1 ] ;
1403: LD_ADDR_EXP 16
1407: PUSH
1408: LD_INT 0
1410: PUSH
1411: LD_INT 0
1413: PUSH
1414: LD_INT 0
1416: PUSH
1417: LD_INT 0
1419: PUSH
1420: EMPTY
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: PUSH
1426: LD_EXP 2
1430: PUSH
1431: LD_INT 1
1433: PLUS
1434: ARRAY
1435: ST_TO_ADDR
// number_of_people = [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
1436: LD_ADDR_EXP 17
1440: PUSH
1441: LD_INT 9
1443: PUSH
1444: LD_INT 12
1446: PUSH
1447: LD_INT 15
1449: PUSH
1450: LD_INT 24
1452: PUSH
1453: EMPTY
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: PUSH
1459: LD_EXP 3
1463: PUSH
1464: LD_INT 1
1466: PLUS
1467: ARRAY
1468: ST_TO_ADDR
// skill_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1469: LD_ADDR_EXP 18
1473: PUSH
1474: LD_INT 2
1476: PUSH
1477: LD_INT 3
1479: PUSH
1480: LD_INT 4
1482: PUSH
1483: LD_INT 5
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: PUSH
1492: LD_EXP 4
1496: PUSH
1497: LD_INT 1
1499: PLUS
1500: ARRAY
1501: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1502: LD_ADDR_EXP 21
1506: PUSH
1507: LD_INT 0
1509: PUSH
1510: LD_INT 0
1512: PUSH
1513: LD_INT 0
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: LIST
1520: PUSH
1521: LD_INT 30
1523: PUSH
1524: LD_INT 0
1526: PUSH
1527: LD_INT 0
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: PUSH
1535: LD_INT 50
1537: PUSH
1538: LD_INT 20
1540: PUSH
1541: LD_INT 0
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 80
1551: PUSH
1552: LD_INT 40
1554: PUSH
1555: LD_INT 20
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: PUSH
1563: EMPTY
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: PUSH
1569: LD_EXP 5
1573: PUSH
1574: LD_INT 1
1576: PLUS
1577: ARRAY
1578: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1579: LD_ADDR_EXP 20
1583: PUSH
1584: LD_INT 10
1586: PUSH
1587: EMPTY
1588: LIST
1589: PUSH
1590: LD_INT 7
1592: PUSH
1593: LD_INT 14
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: PUSH
1600: LD_INT 6
1602: PUSH
1603: LD_INT 12
1605: PUSH
1606: LD_INT 18
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: PUSH
1614: LD_INT 5
1616: PUSH
1617: LD_INT 10
1619: PUSH
1620: LD_INT 15
1622: PUSH
1623: LD_INT 20
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: PUSH
1638: LD_EXP 5
1642: PUSH
1643: LD_INT 1
1645: PLUS
1646: ARRAY
1647: ST_TO_ADDR
// shipments_density = [ 20 , 30 , 40 ] [ def_shipments_density + 1 ] ;
1648: LD_ADDR_EXP 22
1652: PUSH
1653: LD_INT 20
1655: PUSH
1656: LD_INT 30
1658: PUSH
1659: LD_INT 40
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: LIST
1666: PUSH
1667: LD_EXP 6
1671: PUSH
1672: LD_INT 1
1674: PLUS
1675: ARRAY
1676: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1677: LD_ADDR_EXP 19
1681: PUSH
1682: LD_INT 0
1684: PUSH
1685: LD_INT 1
1687: PUSH
1688: LD_INT 2
1690: PUSH
1691: LD_INT 3
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: PUSH
1700: LD_EXP 11
1704: PUSH
1705: LD_INT 1
1707: PLUS
1708: ARRAY
1709: ST_TO_ADDR
// spawning_koef_of_apemen = [ 0 , 165 , 140 , 115 ] [ def_amount_of_apemen + 1 ] ;
1710: LD_ADDR_EXP 24
1714: PUSH
1715: LD_INT 0
1717: PUSH
1718: LD_INT 165
1720: PUSH
1721: LD_INT 140
1723: PUSH
1724: LD_INT 115
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: PUSH
1733: LD_EXP 11
1737: PUSH
1738: LD_INT 1
1740: PLUS
1741: ARRAY
1742: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1743: LD_ADDR_EXP 25
1747: PUSH
1748: LD_INT 0
1750: PUSH
1751: LD_INT 8400
1753: PUSH
1754: LD_INT 1750
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: LIST
1761: PUSH
1762: LD_EXP 12
1766: PUSH
1767: LD_INT 1
1769: PLUS
1770: ARRAY
1771: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1772: LD_ADDR_EXP 26
1776: PUSH
1777: LD_INT 0
1779: PUSH
1780: LD_INT 21000
1782: PUSH
1783: LD_INT 4200
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: LIST
1790: PUSH
1791: LD_EXP 12
1795: PUSH
1796: LD_INT 1
1798: PLUS
1799: ARRAY
1800: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1801: LD_ADDR_EXP 23
1805: PUSH
1806: LD_INT 0
1808: PUSH
1809: LD_INT 1
1811: PUSH
1812: LD_INT 63000
1814: PUSH
1815: LD_INT 126000
1817: PUSH
1818: LD_INT 189000
1820: PUSH
1821: LD_INT 252000
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: PUSH
1832: LD_EXP 13
1836: PUSH
1837: LD_INT 1
1839: PLUS
1840: ARRAY
1841: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1842: LD_ADDR_EXP 46
1846: PUSH
1847: LD_INT 1
1849: NEG
1850: PUSH
1851: LD_INT 350
1853: PUSH
1854: LD_INT 700
1856: PUSH
1857: LD_INT 1400
1859: PUSH
1860: LD_INT 0
1862: PUSH
1863: EMPTY
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: PUSH
1870: LD_EXP 9
1874: PUSH
1875: LD_INT 1
1877: PLUS
1878: ARRAY
1879: ST_TO_ADDR
// battle_flags_id = [ ] ;
1880: LD_ADDR_EXP 45
1884: PUSH
1885: EMPTY
1886: ST_TO_ADDR
// end ;
1887: LD_VAR 0 1
1891: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1892: LD_INT 0
1894: PPUSH
1895: PPUSH
1896: PPUSH
// Team_Game := 0 ;
1897: LD_ADDR_EXP 38
1901: PUSH
1902: LD_INT 0
1904: ST_TO_ADDR
// for i = 1 to 8 do
1905: LD_ADDR_VAR 0 2
1909: PUSH
1910: DOUBLE
1911: LD_INT 1
1913: DEC
1914: ST_TO_ADDR
1915: LD_INT 8
1917: PUSH
1918: FOR_TO
1919: IFFALSE 1945
// Team_Game := Team_Game + Side_Teams [ i ] ;
1921: LD_ADDR_EXP 38
1925: PUSH
1926: LD_EXP 38
1930: PUSH
1931: LD_EXP 32
1935: PUSH
1936: LD_VAR 0 2
1940: ARRAY
1941: PLUS
1942: ST_TO_ADDR
1943: GO 1918
1945: POP
1946: POP
// if not Team_Game then
1947: LD_EXP 38
1951: NOT
1952: IFFALSE 1964
// Team_Game := false else
1954: LD_ADDR_EXP 38
1958: PUSH
1959: LD_INT 0
1961: ST_TO_ADDR
1962: GO 1972
// Team_Game := true ;
1964: LD_ADDR_EXP 38
1968: PUSH
1969: LD_INT 1
1971: ST_TO_ADDR
// if not Team_Game then
1972: LD_EXP 38
1976: NOT
1977: IFFALSE 2075
// begin for i = 1 to 8 do
1979: LD_ADDR_VAR 0 2
1983: PUSH
1984: DOUBLE
1985: LD_INT 1
1987: DEC
1988: ST_TO_ADDR
1989: LD_INT 8
1991: PUSH
1992: FOR_TO
1993: IFFALSE 2071
// for j = 1 to 8 do
1995: LD_ADDR_VAR 0 3
1999: PUSH
2000: DOUBLE
2001: LD_INT 1
2003: DEC
2004: ST_TO_ADDR
2005: LD_INT 8
2007: PUSH
2008: FOR_TO
2009: IFFALSE 2067
// if i <> j then
2011: LD_VAR 0 2
2015: PUSH
2016: LD_VAR 0 3
2020: NONEQUAL
2021: IFFALSE 2045
// SetAttitude ( i , j , att_neutral , true ) else
2023: LD_VAR 0 2
2027: PPUSH
2028: LD_VAR 0 3
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: LD_INT 1
2038: PPUSH
2039: CALL_OW 80
2043: GO 2065
// SetAttitude ( i , j , att_friend , true ) ;
2045: LD_VAR 0 2
2049: PPUSH
2050: LD_VAR 0 3
2054: PPUSH
2055: LD_INT 1
2057: PPUSH
2058: LD_INT 1
2060: PPUSH
2061: CALL_OW 80
2065: GO 2008
2067: POP
2068: POP
2069: GO 1992
2071: POP
2072: POP
// end else
2073: GO 2250
// begin if def_shared_vision then
2075: LD_EXP 8
2079: IFFALSE 2144
// begin for i in Teams do
2081: LD_ADDR_VAR 0 2
2085: PUSH
2086: LD_EXP 33
2090: PUSH
2091: FOR_IN
2092: IFFALSE 2142
// for j = 2 to i do
2094: LD_ADDR_VAR 0 3
2098: PUSH
2099: DOUBLE
2100: LD_INT 2
2102: DEC
2103: ST_TO_ADDR
2104: LD_VAR 0 2
2108: PUSH
2109: FOR_TO
2110: IFFALSE 2138
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2112: LD_VAR 0 2
2116: PUSH
2117: LD_VAR 0 3
2121: ARRAY
2122: PPUSH
2123: LD_VAR 0 2
2127: PUSH
2128: LD_INT 1
2130: ARRAY
2131: PPUSH
2132: CALL_OW 343
2136: GO 2109
2138: POP
2139: POP
2140: GO 2091
2142: POP
2143: POP
// end ; for i = 1 to 8 do
2144: LD_ADDR_VAR 0 2
2148: PUSH
2149: DOUBLE
2150: LD_INT 1
2152: DEC
2153: ST_TO_ADDR
2154: LD_INT 8
2156: PUSH
2157: FOR_TO
2158: IFFALSE 2248
// for j = 1 to 8 do
2160: LD_ADDR_VAR 0 3
2164: PUSH
2165: DOUBLE
2166: LD_INT 1
2168: DEC
2169: ST_TO_ADDR
2170: LD_INT 8
2172: PUSH
2173: FOR_TO
2174: IFFALSE 2244
// if Side_Teams [ i ] = Side_Teams [ j ] then
2176: LD_EXP 32
2180: PUSH
2181: LD_VAR 0 2
2185: ARRAY
2186: PUSH
2187: LD_EXP 32
2191: PUSH
2192: LD_VAR 0 3
2196: ARRAY
2197: EQUAL
2198: IFFALSE 2222
// SetAttitude ( i , j , att_friend , true ) else
2200: LD_VAR 0 2
2204: PPUSH
2205: LD_VAR 0 3
2209: PPUSH
2210: LD_INT 1
2212: PPUSH
2213: LD_INT 1
2215: PPUSH
2216: CALL_OW 80
2220: GO 2242
// SetAttitude ( i , j , att_enemy , true ) ;
2222: LD_VAR 0 2
2226: PPUSH
2227: LD_VAR 0 3
2231: PPUSH
2232: LD_INT 2
2234: PPUSH
2235: LD_INT 1
2237: PPUSH
2238: CALL_OW 80
2242: GO 2173
2244: POP
2245: POP
2246: GO 2157
2248: POP
2249: POP
// end ; end ;
2250: LD_VAR 0 1
2254: RET
// function prepare_people ( side , count , cl , x , y , r , var commander ) ; var i , j , un ; begin
2255: LD_INT 0
2257: PPUSH
2258: PPUSH
2259: PPUSH
2260: PPUSH
// result := [ ] ;
2261: LD_ADDR_VAR 0 8
2265: PUSH
2266: EMPTY
2267: ST_TO_ADDR
// for i := 1 to count do
2268: LD_ADDR_VAR 0 9
2272: PUSH
2273: DOUBLE
2274: LD_INT 1
2276: DEC
2277: ST_TO_ADDR
2278: LD_VAR 0 2
2282: PUSH
2283: FOR_TO
2284: IFFALSE 2678
// begin uc_direction := Rand ( 0 , 5 ) ;
2286: LD_ADDR_OWVAR 24
2290: PUSH
2291: LD_INT 0
2293: PPUSH
2294: LD_INT 5
2296: PPUSH
2297: CALL_OW 12
2301: ST_TO_ADDR
// if commander then
2302: LD_FROM_VAR 0 7
2306: IFFALSE 2415
// begin hc_name := mp_sides_players_names [ side ] ;
2308: LD_ADDR_OWVAR 26
2312: PUSH
2313: LD_OWVAR 19
2317: PUSH
2318: LD_VAR 0 1
2322: ARRAY
2323: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2324: LD_INT 1
2326: PPUSH
2327: LD_INT 2
2329: PPUSH
2330: CALL_OW 12
2334: PPUSH
2335: LD_VAR 0 3
2339: PPUSH
2340: LD_EXP 18
2344: PUSH
2345: LD_INT 2
2347: PLUS
2348: PPUSH
2349: CALL_OW 380
// hc_importance := 105 ;
2353: LD_ADDR_OWVAR 32
2357: PUSH
2358: LD_INT 105
2360: ST_TO_ADDR
// commander := false ;
2361: LD_VAR 0 7
2365: PUSH
2366: LD_INT 0
2368: ST_TO_ADDR
// if Multiplayer then
2369: LD_OWVAR 4
2373: IFFALSE 2413
// begin hc_gallery := MULTIAVATARS ;
2375: LD_ADDR_OWVAR 33
2379: PUSH
2380: LD_STRING MULTIAVATARS
2382: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( Side ) ;
2383: LD_ADDR_OWVAR 34
2387: PUSH
2388: LD_VAR 0 1
2392: PPUSH
2393: CALL_OW 525
2397: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( Side ) ;
2398: LD_ADDR_OWVAR 27
2402: PUSH
2403: LD_VAR 0 1
2407: PPUSH
2408: CALL_OW 526
2412: ST_TO_ADDR
// end ; end else
2413: GO 2478
// begin hc_name :=  ;
2415: LD_ADDR_OWVAR 26
2419: PUSH
2420: LD_STRING 
2422: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2423: LD_INT 1
2425: PPUSH
2426: LD_INT 2
2428: PPUSH
2429: CALL_OW 12
2433: PPUSH
2434: LD_VAR 0 3
2438: PPUSH
2439: LD_EXP 18
2443: PPUSH
2444: CALL_OW 380
// hc_importance := 0 ;
2448: LD_ADDR_OWVAR 32
2452: PUSH
2453: LD_INT 0
2455: ST_TO_ADDR
// if Multiplayer then
2456: LD_OWVAR 4
2460: IFFALSE 2478
// begin hc_gallery :=  ;
2462: LD_ADDR_OWVAR 33
2466: PUSH
2467: LD_STRING 
2469: ST_TO_ADDR
// hc_face_number := 0 ;
2470: LD_ADDR_OWVAR 34
2474: PUSH
2475: LD_INT 0
2477: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2478: LD_ADDR_VAR 0 11
2482: PUSH
2483: CALL_OW 44
2487: ST_TO_ADDR
// if global_defined then
2488: LD_LOC 2
2492: IFFALSE 2630
// begin j := i ;
2494: LD_ADDR_VAR 0 10
2498: PUSH
2499: LD_VAR 0 9
2503: ST_TO_ADDR
// if cl = class_soldier then
2504: LD_VAR 0 3
2508: PUSH
2509: LD_INT 1
2511: EQUAL
2512: IFFALSE 2530
// j := i + soldiers_created ;
2514: LD_ADDR_VAR 0 10
2518: PUSH
2519: LD_VAR 0 9
2523: PUSH
2524: LD_LOC 3
2528: PLUS
2529: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2530: LD_LOC 1
2534: PUSH
2535: LD_VAR 0 3
2539: ARRAY
2540: PUSH
2541: LD_VAR 0 10
2545: ARRAY
2546: PPUSH
2547: LD_VAR 0 11
2551: PPUSH
2552: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2556: LD_VAR 0 11
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_LOC 1
2568: PUSH
2569: LD_VAR 0 3
2573: ARRAY
2574: PUSH
2575: LD_VAR 0 10
2579: ARRAY
2580: PPUSH
2581: LD_INT 2
2583: PPUSH
2584: CALL_OW 260
2588: PPUSH
2589: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2593: LD_VAR 0 11
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: LD_LOC 1
2605: PUSH
2606: LD_VAR 0 3
2610: ARRAY
2611: PUSH
2612: LD_VAR 0 10
2616: ARRAY
2617: PPUSH
2618: LD_INT 1
2620: PPUSH
2621: CALL_OW 260
2625: PPUSH
2626: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2630: LD_VAR 0 11
2634: PPUSH
2635: LD_VAR 0 4
2639: PPUSH
2640: LD_VAR 0 5
2644: PPUSH
2645: LD_VAR 0 6
2649: PPUSH
2650: LD_INT 0
2652: PPUSH
2653: CALL_OW 50
// result := result ^ [ un ] ;
2657: LD_ADDR_VAR 0 8
2661: PUSH
2662: LD_VAR 0 8
2666: PUSH
2667: LD_VAR 0 11
2671: PUSH
2672: EMPTY
2673: LIST
2674: ADD
2675: ST_TO_ADDR
// end ;
2676: GO 2283
2678: POP
2679: POP
// if not global_defined then
2680: LD_LOC 2
2684: NOT
2685: IFFALSE 2747
// if cl = class_soldier and global_units then
2687: LD_VAR 0 3
2691: PUSH
2692: LD_INT 1
2694: EQUAL
2695: PUSH
2696: LD_LOC 1
2700: AND
2701: IFFALSE 2728
// global_units := [ global_units [ 1 ] ^ result ] else
2703: LD_ADDR_LOC 1
2707: PUSH
2708: LD_LOC 1
2712: PUSH
2713: LD_INT 1
2715: ARRAY
2716: PUSH
2717: LD_VAR 0 8
2721: ADD
2722: PUSH
2723: EMPTY
2724: LIST
2725: ST_TO_ADDR
2726: GO 2747
// global_units := global_units ^ [ result ] ;
2728: LD_ADDR_LOC 1
2732: PUSH
2733: LD_LOC 1
2737: PUSH
2738: LD_VAR 0 8
2742: PUSH
2743: EMPTY
2744: LIST
2745: ADD
2746: ST_TO_ADDR
// if commander then
2747: LD_FROM_VAR 0 7
2751: IFFALSE 2798
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2753: LD_ADDR_EXP 43
2757: PUSH
2758: LD_EXP 43
2762: PPUSH
2763: LD_OWVAR 20
2767: PPUSH
2768: LD_EXP 43
2772: PUSH
2773: LD_OWVAR 20
2777: ARRAY
2778: PUSH
2779: LD_VAR 0 11
2783: ADD
2784: PPUSH
2785: CALL_OW 1
2789: ST_TO_ADDR
// commander := false ;
2790: LD_VAR 0 7
2794: PUSH
2795: LD_INT 0
2797: ST_TO_ADDR
// end ; end ;
2798: LD_VAR 0 8
2802: RET
// function prepare_buldozer ( x , y , r , pos ) ; var nation ; begin
2803: LD_INT 0
2805: PPUSH
2806: PPUSH
// if uc_nation = 2 then
2807: LD_OWVAR 21
2811: PUSH
2812: LD_INT 2
2814: EQUAL
2815: IFFALSE 2837
// begin nation := uc_nation ;
2817: LD_ADDR_VAR 0 6
2821: PUSH
2822: LD_OWVAR 21
2826: ST_TO_ADDR
// uc_nation := 1 ;
2827: LD_ADDR_OWVAR 21
2831: PUSH
2832: LD_INT 1
2834: ST_TO_ADDR
// end else
2835: GO 2845
// nation := false ;
2837: LD_ADDR_VAR 0 6
2841: PUSH
2842: LD_INT 0
2844: ST_TO_ADDR
// vc_engine = engine_combustion ;
2845: LD_ADDR_OWVAR 39
2849: PUSH
2850: LD_INT 1
2852: ST_TO_ADDR
// vc_control = control_manual ;
2853: LD_ADDR_OWVAR 38
2857: PUSH
2858: LD_INT 1
2860: ST_TO_ADDR
// if uc_nation = nation_russian then
2861: LD_OWVAR 21
2865: PUSH
2866: LD_INT 3
2868: EQUAL
2869: IFFALSE 2889
// begin vc_chassis = ru_heavy_tracked ;
2871: LD_ADDR_OWVAR 37
2875: PUSH
2876: LD_INT 24
2878: ST_TO_ADDR
// vc_weapon = ru_bulldozer ;
2879: LD_ADDR_OWVAR 40
2883: PUSH
2884: LD_INT 53
2886: ST_TO_ADDR
// end else
2887: GO 2905
// begin vc_chassis = us_heavy_tracked ;
2889: LD_ADDR_OWVAR 37
2893: PUSH
2894: LD_INT 4
2896: ST_TO_ADDR
// vc_weapon = us_bulldozer ;
2897: LD_ADDR_OWVAR 40
2901: PUSH
2902: LD_INT 14
2904: ST_TO_ADDR
// end ; case pos of 1 :
2905: LD_VAR 0 4
2909: PUSH
2910: LD_INT 1
2912: DOUBLE
2913: EQUAL
2914: IFTRUE 2918
2916: GO 2929
2918: POP
// uc_direction := 2 ; 2 :
2919: LD_ADDR_OWVAR 24
2923: PUSH
2924: LD_INT 2
2926: ST_TO_ADDR
2927: GO 2987
2929: LD_INT 2
2931: DOUBLE
2932: EQUAL
2933: IFTRUE 2937
2935: GO 2948
2937: POP
// uc_direction := 3 ; 3 :
2938: LD_ADDR_OWVAR 24
2942: PUSH
2943: LD_INT 3
2945: ST_TO_ADDR
2946: GO 2987
2948: LD_INT 3
2950: DOUBLE
2951: EQUAL
2952: IFTRUE 2956
2954: GO 2967
2956: POP
// uc_direction := 0 ; 4 :
2957: LD_ADDR_OWVAR 24
2961: PUSH
2962: LD_INT 0
2964: ST_TO_ADDR
2965: GO 2987
2967: LD_INT 4
2969: DOUBLE
2970: EQUAL
2971: IFTRUE 2975
2973: GO 2986
2975: POP
// uc_direction := 5 ; end ;
2976: LD_ADDR_OWVAR 24
2980: PUSH
2981: LD_INT 5
2983: ST_TO_ADDR
2984: GO 2987
2986: POP
// PlaceUnitXYR ( CreateVehicle , x , y , r , false ) ;
2987: CALL_OW 45
2991: PPUSH
2992: LD_VAR 0 1
2996: PPUSH
2997: LD_VAR 0 2
3001: PPUSH
3002: LD_VAR 0 3
3006: PPUSH
3007: LD_INT 0
3009: PPUSH
3010: CALL_OW 50
// if nation then
3014: LD_VAR 0 6
3018: IFFALSE 3030
// uc_nation := nation ;
3020: LD_ADDR_OWVAR 21
3024: PUSH
3025: LD_VAR 0 6
3029: ST_TO_ADDR
// end ;
3030: LD_VAR 0 5
3034: RET
// function prepare_side ( side ) ; var pos , x , y , i , r , sol , br , dep , neng , nsci , nmech , nsol ; begin
3035: LD_INT 0
3037: PPUSH
3038: PPUSH
3039: PPUSH
3040: PPUSH
3041: PPUSH
3042: PPUSH
3043: PPUSH
3044: PPUSH
3045: PPUSH
3046: PPUSH
3047: PPUSH
3048: PPUSH
3049: PPUSH
// pos := Side_Positions [ side ] ;
3050: LD_ADDR_VAR 0 3
3054: PUSH
3055: LD_EXP 34
3059: PUSH
3060: LD_VAR 0 1
3064: ARRAY
3065: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3066: LD_ADDR_OWVAR 21
3070: PUSH
3071: LD_EXP 35
3075: PUSH
3076: LD_VAR 0 1
3080: ARRAY
3081: ST_TO_ADDR
// uc_side := side ;
3082: LD_ADDR_OWVAR 20
3086: PUSH
3087: LD_VAR 0 1
3091: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3092: LD_ADDR_VAR 0 4
3096: PUSH
3097: LD_EXP 40
3101: PUSH
3102: LD_VAR 0 3
3106: ARRAY
3107: PUSH
3108: LD_INT 1
3110: ARRAY
3111: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3112: LD_ADDR_VAR 0 5
3116: PUSH
3117: LD_EXP 40
3121: PUSH
3122: LD_VAR 0 3
3126: ARRAY
3127: PUSH
3128: LD_INT 2
3130: ARRAY
3131: ST_TO_ADDR
// if is_depot then
3132: LD_EXP 15
3136: IFFALSE 3279
// begin bc_type = b_depot ;
3138: LD_ADDR_OWVAR 42
3142: PUSH
3143: LD_INT 0
3145: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , Depot_Def [ pos ] [ 3 ] ) ;
3146: LD_ADDR_VAR 0 10
3150: PUSH
3151: LD_VAR 0 4
3155: PPUSH
3156: LD_VAR 0 5
3160: PPUSH
3161: LD_EXP 40
3165: PUSH
3166: LD_VAR 0 3
3170: ARRAY
3171: PUSH
3172: LD_INT 3
3174: ARRAY
3175: PPUSH
3176: CALL_OW 47
3180: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3181: LD_VAR 0 10
3185: PPUSH
3186: LD_STRING @
3188: PUSH
3189: LD_VAR 0 1
3193: STR
3194: PPUSH
3195: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3199: LD_VAR 0 10
3203: PPUSH
3204: CALL_OW 274
3208: PPUSH
3209: LD_INT 1
3211: PPUSH
3212: LD_EXP 21
3216: PUSH
3217: LD_INT 1
3219: ARRAY
3220: PPUSH
3221: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3225: LD_VAR 0 10
3229: PPUSH
3230: CALL_OW 274
3234: PPUSH
3235: LD_INT 2
3237: PPUSH
3238: LD_EXP 21
3242: PUSH
3243: LD_INT 2
3245: ARRAY
3246: PPUSH
3247: CALL_OW 277
// SetResourceType ( GetBase ( result ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3251: LD_VAR 0 2
3255: PPUSH
3256: CALL_OW 274
3260: PPUSH
3261: LD_INT 3
3263: PPUSH
3264: LD_EXP 21
3268: PUSH
3269: LD_INT 3
3271: ARRAY
3272: PPUSH
3273: CALL_OW 277
// end else
3277: GO 3423
// begin for i := 1 to 3 do
3279: LD_ADDR_VAR 0 6
3283: PUSH
3284: DOUBLE
3285: LD_INT 1
3287: DEC
3288: ST_TO_ADDR
3289: LD_INT 3
3291: PUSH
3292: FOR_TO
3293: IFFALSE 3421
// begin r := starting_resources [ i ] ;
3295: LD_ADDR_VAR 0 7
3299: PUSH
3300: LD_EXP 21
3304: PUSH
3305: LD_VAR 0 6
3309: ARRAY
3310: ST_TO_ADDR
// while r >= 10 do
3311: LD_VAR 0 7
3315: PUSH
3316: LD_INT 10
3318: GREATEREQUAL
3319: IFFALSE 3419
// if r > 50 then
3321: LD_VAR 0 7
3325: PUSH
3326: LD_INT 50
3328: GREATER
3329: IFFALSE 3375
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3331: LD_VAR 0 6
3335: PPUSH
3336: LD_INT 5
3338: PPUSH
3339: LD_VAR 0 4
3343: PPUSH
3344: LD_VAR 0 5
3348: PPUSH
3349: LD_INT 4
3351: PPUSH
3352: LD_INT 0
3354: PPUSH
3355: CALL_OW 60
// r := r - 50 ;
3359: LD_ADDR_VAR 0 7
3363: PUSH
3364: LD_VAR 0 7
3368: PUSH
3369: LD_INT 50
3371: MINUS
3372: ST_TO_ADDR
// end else
3373: GO 3417
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3375: LD_VAR 0 6
3379: PPUSH
3380: LD_VAR 0 7
3384: PUSH
3385: LD_INT 10
3387: DIV
3388: PPUSH
3389: LD_VAR 0 4
3393: PPUSH
3394: LD_VAR 0 5
3398: PPUSH
3399: LD_INT 4
3401: PPUSH
3402: LD_INT 0
3404: PPUSH
3405: CALL_OW 60
// r := 0 ;
3409: LD_ADDR_VAR 0 7
3413: PUSH
3414: LD_INT 0
3416: ST_TO_ADDR
// end ;
3417: GO 3311
// end ;
3419: GO 3292
3421: POP
3422: POP
// end ; x := start_def [ pos ] [ 1 ] ;
3423: LD_ADDR_VAR 0 4
3427: PUSH
3428: LD_EXP 41
3432: PUSH
3433: LD_VAR 0 3
3437: ARRAY
3438: PUSH
3439: LD_INT 1
3441: ARRAY
3442: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3443: LD_ADDR_VAR 0 5
3447: PUSH
3448: LD_EXP 41
3452: PUSH
3453: LD_VAR 0 3
3457: ARRAY
3458: PUSH
3459: LD_INT 2
3461: ARRAY
3462: ST_TO_ADDR
// for r in starting_crates do
3463: LD_ADDR_VAR 0 7
3467: PUSH
3468: LD_EXP 20
3472: PUSH
3473: FOR_IN
3474: IFFALSE 3506
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3476: LD_INT 1
3478: PPUSH
3479: LD_INT 5
3481: PPUSH
3482: LD_VAR 0 4
3486: PPUSH
3487: LD_VAR 0 5
3491: PPUSH
3492: LD_VAR 0 7
3496: PPUSH
3497: LD_INT 0
3499: PPUSH
3500: CALL_OW 60
3504: GO 3473
3506: POP
3507: POP
// if def_morale_flags then
3508: LD_EXP 9
3512: IFFALSE 3591
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3514: LD_ADDR_EXP 45
3518: PUSH
3519: LD_EXP 45
3523: PUSH
3524: LD_VAR 0 1
3528: PPUSH
3529: LD_VAR 0 4
3533: PPUSH
3534: LD_VAR 0 5
3538: PPUSH
3539: LD_INT 1
3541: PUSH
3542: LD_INT 100
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: PUSH
3549: LD_INT 2
3551: PUSH
3552: LD_INT 50
3554: PUSH
3555: EMPTY
3556: LIST
3557: LIST
3558: PUSH
3559: LD_INT 3
3561: PUSH
3562: LD_INT 20
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: PUSH
3569: LD_INT 20
3571: PUSH
3572: LD_INT 100
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: PPUSH
3585: CALL_OW 418
3589: ADD
3590: ST_TO_ADDR
// neng := number_of_people ;
3591: LD_ADDR_VAR 0 11
3595: PUSH
3596: LD_EXP 17
3600: ST_TO_ADDR
// nsol := neng div 4 ;
3601: LD_ADDR_VAR 0 14
3605: PUSH
3606: LD_VAR 0 11
3610: PUSH
3611: LD_INT 4
3613: DIV
3614: ST_TO_ADDR
// neng := neng - nsol ;
3615: LD_ADDR_VAR 0 11
3619: PUSH
3620: LD_VAR 0 11
3624: PUSH
3625: LD_VAR 0 14
3629: MINUS
3630: ST_TO_ADDR
// nsci := neng div 3 ;
3631: LD_ADDR_VAR 0 12
3635: PUSH
3636: LD_VAR 0 11
3640: PUSH
3641: LD_INT 3
3643: DIV
3644: ST_TO_ADDR
// if nsci < 1 then
3645: LD_VAR 0 12
3649: PUSH
3650: LD_INT 1
3652: LESS
3653: IFFALSE 3663
// nsci := 1 ;
3655: LD_ADDR_VAR 0 12
3659: PUSH
3660: LD_INT 1
3662: ST_TO_ADDR
// neng := neng - nsci ;
3663: LD_ADDR_VAR 0 11
3667: PUSH
3668: LD_VAR 0 11
3672: PUSH
3673: LD_VAR 0 12
3677: MINUS
3678: ST_TO_ADDR
// nmech := neng div 2 ;
3679: LD_ADDR_VAR 0 13
3683: PUSH
3684: LD_VAR 0 11
3688: PUSH
3689: LD_INT 2
3691: DIV
3692: ST_TO_ADDR
// neng := neng - nmech ;
3693: LD_ADDR_VAR 0 11
3697: PUSH
3698: LD_VAR 0 11
3702: PUSH
3703: LD_VAR 0 13
3707: MINUS
3708: ST_TO_ADDR
// if neng < 1 then
3709: LD_VAR 0 11
3713: PUSH
3714: LD_INT 1
3716: LESS
3717: IFFALSE 3727
// neng := 1 ;
3719: LD_ADDR_VAR 0 11
3723: PUSH
3724: LD_INT 1
3726: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
3727: LD_ADDR_VAR 0 4
3731: PUSH
3732: LD_EXP 41
3736: PUSH
3737: LD_VAR 0 3
3741: ARRAY
3742: PUSH
3743: LD_INT 1
3745: ARRAY
3746: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3747: LD_ADDR_VAR 0 5
3751: PUSH
3752: LD_EXP 41
3756: PUSH
3757: LD_VAR 0 3
3761: ARRAY
3762: PUSH
3763: LD_INT 2
3765: ARRAY
3766: ST_TO_ADDR
// if not is_depot then
3767: LD_EXP 15
3771: NOT
3772: IFFALSE 3796
// prepare_buldozer ( x , y , 2 , pos ) ;
3774: LD_VAR 0 4
3778: PPUSH
3779: LD_VAR 0 5
3783: PPUSH
3784: LD_INT 2
3786: PPUSH
3787: LD_VAR 0 3
3791: PPUSH
3792: CALL 2803 0 4
// commander := true ;
3796: LD_ADDR_EXP 44
3800: PUSH
3801: LD_INT 1
3803: ST_TO_ADDR
// prepare_people ( side , 1 , class_soldier , x , y , 5 , commander ) ;
3804: LD_VAR 0 1
3808: PPUSH
3809: LD_INT 1
3811: PPUSH
3812: LD_INT 1
3814: PPUSH
3815: LD_VAR 0 4
3819: PPUSH
3820: LD_VAR 0 5
3824: PPUSH
3825: LD_INT 5
3827: PPUSH
3828: LD_ADDR_EXP 44
3832: PPUSH
3833: CALL 2255 0 7
// commander := false ;
3837: LD_ADDR_EXP 44
3841: PUSH
3842: LD_INT 0
3844: ST_TO_ADDR
// prepare_people ( side , nsol - 1 , class_soldier , x , y , 5 , commander ) ;
3845: LD_VAR 0 1
3849: PPUSH
3850: LD_VAR 0 14
3854: PUSH
3855: LD_INT 1
3857: MINUS
3858: PPUSH
3859: LD_INT 1
3861: PPUSH
3862: LD_VAR 0 4
3866: PPUSH
3867: LD_VAR 0 5
3871: PPUSH
3872: LD_INT 5
3874: PPUSH
3875: LD_ADDR_EXP 44
3879: PPUSH
3880: CALL 2255 0 7
// prepare_people ( side , neng , class_engineer , x , y , 5 , commander ) ;
3884: LD_VAR 0 1
3888: PPUSH
3889: LD_VAR 0 11
3893: PPUSH
3894: LD_INT 2
3896: PPUSH
3897: LD_VAR 0 4
3901: PPUSH
3902: LD_VAR 0 5
3906: PPUSH
3907: LD_INT 5
3909: PPUSH
3910: LD_ADDR_EXP 44
3914: PPUSH
3915: CALL 2255 0 7
// prepare_people ( side , nmech , class_mechanic , x , y , 5 , commander ) ;
3919: LD_VAR 0 1
3923: PPUSH
3924: LD_VAR 0 13
3928: PPUSH
3929: LD_INT 3
3931: PPUSH
3932: LD_VAR 0 4
3936: PPUSH
3937: LD_VAR 0 5
3941: PPUSH
3942: LD_INT 5
3944: PPUSH
3945: LD_ADDR_EXP 44
3949: PPUSH
3950: CALL 2255 0 7
// prepare_people ( side , nsci , class_scientistic , x , y , 5 , commander ) ;
3954: LD_VAR 0 1
3958: PPUSH
3959: LD_VAR 0 12
3963: PPUSH
3964: LD_INT 4
3966: PPUSH
3967: LD_VAR 0 4
3971: PPUSH
3972: LD_VAR 0 5
3976: PPUSH
3977: LD_INT 5
3979: PPUSH
3980: LD_ADDR_EXP 44
3984: PPUSH
3985: CALL 2255 0 7
// if not global_defined then
3989: LD_LOC 2
3993: NOT
3994: IFFALSE 4004
// global_defined := true ;
3996: LD_ADDR_LOC 2
4000: PUSH
4001: LD_INT 1
4003: ST_TO_ADDR
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4004: LD_EXP 10
4008: PUSH
4009: LD_INT 20
4011: PPUSH
4012: LD_VAR 0 1
4016: PPUSH
4017: CALL_OW 321
4021: PUSH
4022: LD_INT 1
4024: EQUAL
4025: AND
4026: IFFALSE 4043
// SetTech ( tech_SibDet , side , state_researched ) ;
4028: LD_INT 20
4030: PPUSH
4031: LD_VAR 0 1
4035: PPUSH
4036: LD_INT 2
4038: PPUSH
4039: CALL_OW 322
// if def_siberite_bomb = 1 then
4043: LD_EXP 13
4047: PUSH
4048: LD_INT 1
4050: EQUAL
4051: IFFALSE 4085
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4053: LD_INT 25
4055: PPUSH
4056: LD_VAR 0 1
4060: PPUSH
4061: LD_INT 1
4063: PPUSH
4064: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4068: LD_INT 73
4070: PPUSH
4071: LD_VAR 0 1
4075: PPUSH
4076: LD_INT 1
4078: PPUSH
4079: CALL_OW 322
// end else
4083: GO 4115
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4085: LD_INT 25
4087: PPUSH
4088: LD_VAR 0 1
4092: PPUSH
4093: LD_INT 0
4095: PPUSH
4096: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4100: LD_INT 73
4102: PPUSH
4103: LD_VAR 0 1
4107: PPUSH
4108: LD_INT 0
4110: PPUSH
4111: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4115: LD_INT 24
4117: PPUSH
4118: LD_VAR 0 1
4122: PPUSH
4123: LD_INT 0
4125: PPUSH
4126: CALL_OW 322
// end ;
4130: LD_VAR 0 2
4134: RET
// every 0 0$1 do
4135: GO 4137
4137: DISABLE
// if ( def_siberite_bomb > 1 ) then
4138: LD_EXP 13
4142: PUSH
4143: LD_INT 1
4145: GREATER
4146: IFFALSE 4161
// begin wait ( siberite_bomb_Delay ) ;
4148: LD_EXP 23
4152: PPUSH
4153: CALL_OW 67
// EnableSibFiss ;
4157: CALL 4162 0 0
// end ;
4161: END
// function EnableSibFiss ; var i ; begin
4162: LD_INT 0
4164: PPUSH
4165: PPUSH
// for i := 1 to 8 do
4166: LD_ADDR_VAR 0 2
4170: PUSH
4171: DOUBLE
4172: LD_INT 1
4174: DEC
4175: ST_TO_ADDR
4176: LD_INT 8
4178: PUSH
4179: FOR_TO
4180: IFFALSE 4226
// if Side_Positions [ i ] then
4182: LD_EXP 34
4186: PUSH
4187: LD_VAR 0 2
4191: ARRAY
4192: IFFALSE 4224
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4194: LD_INT 25
4196: PPUSH
4197: LD_VAR 0 2
4201: PPUSH
4202: LD_INT 1
4204: PPUSH
4205: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4209: LD_INT 73
4211: PPUSH
4212: LD_VAR 0 2
4216: PPUSH
4217: LD_INT 1
4219: PPUSH
4220: CALL_OW 322
// end ;
4224: GO 4179
4226: POP
4227: POP
// end ;
4228: LD_VAR 0 1
4232: RET
// function prepare_sides ; var i ; begin
4233: LD_INT 0
4235: PPUSH
4236: PPUSH
// global_units := [ ] ;
4237: LD_ADDR_LOC 1
4241: PUSH
4242: EMPTY
4243: ST_TO_ADDR
// global_defined := false ;
4244: LD_ADDR_LOC 2
4248: PUSH
4249: LD_INT 0
4251: ST_TO_ADDR
// for i := 1 to 8 do
4252: LD_ADDR_VAR 0 2
4256: PUSH
4257: DOUBLE
4258: LD_INT 1
4260: DEC
4261: ST_TO_ADDR
4262: LD_INT 8
4264: PUSH
4265: FOR_TO
4266: IFFALSE 4291
// if Side_Positions [ i ] then
4268: LD_EXP 34
4272: PUSH
4273: LD_VAR 0 2
4277: ARRAY
4278: IFFALSE 4289
// prepare_side ( i ) ;
4280: LD_VAR 0 2
4284: PPUSH
4285: CALL 3035 0 1
4289: GO 4265
4291: POP
4292: POP
// end ;
4293: LD_VAR 0 1
4297: RET
// starting begin disable ( 98 ) ;
4298: LD_INT 98
4300: DISABLE_MARKED
// disable ( 99 ) ;
4301: LD_INT 99
4303: DISABLE_MARKED
// disable ( 400 ) ;
4304: LD_INT 400
4306: DISABLE_MARKED
// disable ( 401 ) ;
4307: LD_INT 401
4309: DISABLE_MARKED
// mp_selectmsg := true ;
4310: LD_ADDR_OWVAR 13
4314: PUSH
4315: LD_INT 1
4317: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4318: CALL 681 0 0
// init_map ;
4322: CALL 436 0 0
// init_respawning ;
4326: CALL 13089 0 0
// set_shared_visions_and_alliances ;
4330: CALL 1892 0 0
// ResetFog ;
4334: CALL_OW 335
// ClearAllFogForSide ( Player_Side ) ;
4338: LD_EXP 30
4342: PPUSH
4343: CALL_OW 520
// AnimateTrees ( true ) ;
4347: LD_INT 1
4349: PPUSH
4350: CALL_OW 573
// prepare_sides ;
4354: CALL 4233 0 0
// Init_Win_Condition ;
4358: CALL 7070 0 0
// init_shipments ;
4362: CALL 5514 0 0
// InitApeman ;
4366: CALL 4689 0 0
// your_side := Player_Side ;
4370: LD_ADDR_OWVAR 2
4374: PUSH
4375: LD_EXP 30
4379: ST_TO_ADDR
// music_nat := Side_Nations [ your_side ] ;
4380: LD_ADDR_OWVAR 71
4384: PUSH
4385: LD_EXP 35
4389: PUSH
4390: LD_OWVAR 2
4394: ARRAY
4395: ST_TO_ADDR
// if IAmSpec then
4396: CALL_OW 531
4400: IFFALSE 4424
// begin fogOff ( true ) ;
4402: LD_INT 1
4404: PPUSH
4405: CALL_OW 344
// CenterNowOnXY ( 104 , 69 ) ;
4409: LD_INT 104
4411: PPUSH
4412: LD_INT 69
4414: PPUSH
4415: CALL_OW 86
// enable ( 400 ) ;
4419: LD_INT 400
4421: ENABLE_MARKED
// end else
4422: GO 4470
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4424: LD_EXP 41
4428: PUSH
4429: LD_EXP 34
4433: PUSH
4434: LD_OWVAR 2
4438: ARRAY
4439: ARRAY
4440: PUSH
4441: LD_INT 1
4443: ARRAY
4444: PPUSH
4445: LD_EXP 41
4449: PUSH
4450: LD_EXP 34
4454: PUSH
4455: LD_OWVAR 2
4459: ARRAY
4460: ARRAY
4461: PUSH
4462: LD_INT 2
4464: ARRAY
4465: PPUSH
4466: CALL_OW 86
// end ; BuildUpAreas := [ nw , ne , sw , se ] ;
4470: LD_ADDR_EXP 56
4474: PUSH
4475: LD_INT 12
4477: PUSH
4478: LD_INT 13
4480: PUSH
4481: LD_INT 14
4483: PUSH
4484: LD_INT 15
4486: PUSH
4487: EMPTY
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: ST_TO_ADDR
// BeginBuildUp ;
4493: CALL 13583 0 0
// end ; end_of_file
4497: END
// every 20 20$00 trigger apemanNumber do
4498: LD_EXP 47
4502: IFFALSE 4535
4504: GO 4506
4506: DISABLE
// begin enable ;
4507: ENABLE
// if apeLevel >= 8 then
4508: LD_EXP 52
4512: PUSH
4513: LD_INT 8
4515: GREATEREQUAL
4516: IFFALSE 4521
// disable else
4518: DISABLE
4519: GO 4535
// apeLevel := apeLevel + 1 ;
4521: LD_ADDR_EXP 52
4525: PUSH
4526: LD_EXP 52
4530: PUSH
4531: LD_INT 1
4533: PLUS
4534: ST_TO_ADDR
// end ;
4535: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
4536: LD_EXP 47
4540: PUSH
4541: LD_EXP 48
4545: LESS
4546: IFFALSE 4686
4548: GO 4550
4550: DISABLE
4551: LD_INT 0
4553: PPUSH
4554: PPUSH
4555: PPUSH
4556: PPUSH
// begin enable ;
4557: ENABLE
// for i := 1 to apemanPos do
4558: LD_ADDR_VAR 0 1
4562: PUSH
4563: DOUBLE
4564: LD_INT 1
4566: DEC
4567: ST_TO_ADDR
4568: LD_EXP 50
4572: PUSH
4573: FOR_TO
4574: IFFALSE 4684
// begin if apemanPlayerCount [ i ] then
4576: LD_EXP 51
4580: PUSH
4581: LD_VAR 0 1
4585: ARRAY
4586: IFFALSE 4682
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
4588: LD_EXP 51
4592: PUSH
4593: LD_VAR 0 1
4597: ARRAY
4598: PUSH
4599: LD_EXP 50
4603: PUSH
4604: LD_VAR 0 1
4608: ARRAY
4609: GREATER
4610: IFFALSE 4682
// begin ape := PrepareApeman ;
4612: LD_ADDR_VAR 0 2
4616: PUSH
4617: CALL 5189 0 0
4621: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
4622: LD_VAR 0 2
4626: PPUSH
4627: LD_EXP 53
4631: PUSH
4632: LD_VAR 0 1
4636: ARRAY
4637: PPUSH
4638: LD_INT 0
4640: PPUSH
4641: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
4645: LD_ADDR_EXP 50
4649: PUSH
4650: LD_EXP 50
4654: PPUSH
4655: LD_VAR 0 1
4659: PPUSH
4660: LD_EXP 50
4664: PUSH
4665: LD_VAR 0 1
4669: ARRAY
4670: PUSH
4671: LD_VAR 0 2
4675: UNION
4676: PPUSH
4677: CALL_OW 1
4681: ST_TO_ADDR
// end ; end ; end ;
4682: GO 4573
4684: POP
4685: POP
// end ;
4686: PPOPN 4
4688: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
4689: LD_INT 0
4691: PPUSH
4692: PPUSH
4693: PPUSH
4694: PPUSH
4695: PPUSH
4696: PPUSH
4697: PPUSH
// playersAmount := 0 ;
4698: LD_ADDR_VAR 0 3
4702: PUSH
4703: LD_INT 0
4705: ST_TO_ADDR
// _apeAreas := [ nw , ne , sw , se , ] ;
4706: LD_ADDR_VAR 0 7
4710: PUSH
4711: LD_INT 12
4713: PUSH
4714: LD_INT 13
4716: PUSH
4717: LD_INT 14
4719: PUSH
4720: LD_INT 15
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4729: LD_ADDR_EXP 53
4733: PUSH
4734: LD_INT 0
4736: PUSH
4737: LD_INT 0
4739: PUSH
4740: LD_INT 0
4742: PUSH
4743: LD_INT 0
4745: PUSH
4746: LD_INT 0
4748: PUSH
4749: LD_INT 0
4751: PUSH
4752: LD_INT 0
4754: PUSH
4755: LD_INT 0
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: ST_TO_ADDR
// for j = 1 to Side_Positions do
4768: LD_ADDR_VAR 0 4
4772: PUSH
4773: DOUBLE
4774: LD_INT 1
4776: DEC
4777: ST_TO_ADDR
4778: LD_EXP 34
4782: PUSH
4783: FOR_TO
4784: IFFALSE 4851
// if Side_Positions [ j ] then
4786: LD_EXP 34
4790: PUSH
4791: LD_VAR 0 4
4795: ARRAY
4796: IFFALSE 4849
// begin playersAmount := playersAmount + 1 ;
4798: LD_ADDR_VAR 0 3
4802: PUSH
4803: LD_VAR 0 3
4807: PUSH
4808: LD_INT 1
4810: PLUS
4811: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
4812: LD_ADDR_EXP 53
4816: PUSH
4817: LD_EXP 53
4821: PPUSH
4822: LD_VAR 0 4
4826: PPUSH
4827: LD_VAR 0 7
4831: PUSH
4832: LD_EXP 34
4836: PUSH
4837: LD_VAR 0 4
4841: ARRAY
4842: ARRAY
4843: PPUSH
4844: CALL_OW 1
4848: ST_TO_ADDR
// end ;
4849: GO 4783
4851: POP
4852: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
4853: LD_ADDR_EXP 49
4857: PUSH
4858: LD_INT 3
4860: PUSH
4861: LD_EXP 19
4865: MUL
4866: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
4867: LD_ADDR_EXP 47
4871: PUSH
4872: LD_VAR 0 3
4876: PUSH
4877: LD_EXP 49
4881: MUL
4882: ST_TO_ADDR
// apemanLimit := apemanNumber ;
4883: LD_ADDR_EXP 48
4887: PUSH
4888: LD_EXP 47
4892: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4893: LD_ADDR_EXP 50
4897: PUSH
4898: LD_INT 0
4900: PUSH
4901: LD_INT 0
4903: PUSH
4904: LD_INT 0
4906: PUSH
4907: LD_INT 0
4909: PUSH
4910: LD_INT 0
4912: PUSH
4913: LD_INT 0
4915: PUSH
4916: LD_INT 0
4918: PUSH
4919: LD_INT 0
4921: PUSH
4922: EMPTY
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4932: LD_ADDR_EXP 51
4936: PUSH
4937: LD_INT 0
4939: PUSH
4940: LD_INT 0
4942: PUSH
4943: LD_INT 0
4945: PUSH
4946: LD_INT 0
4948: PUSH
4949: LD_INT 0
4951: PUSH
4952: LD_INT 0
4954: PUSH
4955: LD_INT 0
4957: PUSH
4958: LD_INT 0
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: ST_TO_ADDR
// apeLevel := 1 ;
4971: LD_ADDR_EXP 52
4975: PUSH
4976: LD_INT 1
4978: ST_TO_ADDR
// if not apemanNumber then
4979: LD_EXP 47
4983: NOT
4984: IFFALSE 4988
// exit ;
4986: GO 5184
// for i := 1 to apemanPerPlayer do
4988: LD_ADDR_VAR 0 2
4992: PUSH
4993: DOUBLE
4994: LD_INT 1
4996: DEC
4997: ST_TO_ADDR
4998: LD_EXP 49
5002: PUSH
5003: FOR_TO
5004: IFFALSE 5182
// begin for j := 1 to Side_Positions do
5006: LD_ADDR_VAR 0 4
5010: PUSH
5011: DOUBLE
5012: LD_INT 1
5014: DEC
5015: ST_TO_ADDR
5016: LD_EXP 34
5020: PUSH
5021: FOR_TO
5022: IFFALSE 5178
// if Side_Positions [ j ] then
5024: LD_EXP 34
5028: PUSH
5029: LD_VAR 0 4
5033: ARRAY
5034: IFFALSE 5176
// begin pos := Side_Positions [ j ] ;
5036: LD_ADDR_VAR 0 6
5040: PUSH
5041: LD_EXP 34
5045: PUSH
5046: LD_VAR 0 4
5050: ARRAY
5051: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5052: LD_ADDR_EXP 51
5056: PUSH
5057: LD_EXP 51
5061: PPUSH
5062: LD_VAR 0 4
5066: PPUSH
5067: LD_EXP 51
5071: PUSH
5072: LD_VAR 0 4
5076: ARRAY
5077: PUSH
5078: LD_INT 1
5080: PLUS
5081: PPUSH
5082: CALL_OW 1
5086: ST_TO_ADDR
// ape := PrepareApeman ;
5087: LD_ADDR_VAR 0 5
5091: PUSH
5092: CALL 5189 0 0
5096: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5097: LD_ADDR_EXP 50
5101: PUSH
5102: LD_EXP 50
5106: PPUSH
5107: LD_VAR 0 4
5111: PPUSH
5112: LD_EXP 50
5116: PUSH
5117: LD_VAR 0 4
5121: ARRAY
5122: PPUSH
5123: LD_EXP 50
5127: PUSH
5128: LD_VAR 0 4
5132: ARRAY
5133: PUSH
5134: LD_INT 1
5136: PLUS
5137: PPUSH
5138: LD_VAR 0 5
5142: PPUSH
5143: CALL_OW 1
5147: PPUSH
5148: CALL_OW 1
5152: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5153: LD_VAR 0 5
5157: PPUSH
5158: LD_EXP 53
5162: PUSH
5163: LD_VAR 0 4
5167: ARRAY
5168: PPUSH
5169: LD_INT 0
5171: PPUSH
5172: CALL_OW 49
// end ;
5176: GO 5021
5178: POP
5179: POP
// end ;
5180: GO 5003
5182: POP
5183: POP
// end ;
5184: LD_VAR 0 1
5188: RET
// export function PrepareApeman ; var bonus ; begin
5189: LD_INT 0
5191: PPUSH
5192: PPUSH
// uc_side := 0 ;
5193: LD_ADDR_OWVAR 20
5197: PUSH
5198: LD_INT 0
5200: ST_TO_ADDR
// uc_nation := 0 ;
5201: LD_ADDR_OWVAR 21
5205: PUSH
5206: LD_INT 0
5208: ST_TO_ADDR
// InitHc ;
5209: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
5213: LD_ADDR_VAR 0 2
5217: PUSH
5218: LD_INT 1
5220: NEG
5221: PUSH
5222: LD_INT 0
5224: PUSH
5225: LD_INT 1
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: LIST
5232: PUSH
5233: LD_OWVAR 1
5237: PUSH
5238: LD_INT 3
5240: MOD
5241: PUSH
5242: LD_INT 1
5244: PLUS
5245: ARRAY
5246: ST_TO_ADDR
// hc_class := class_apeman ;
5247: LD_ADDR_OWVAR 28
5251: PUSH
5252: LD_INT 12
5254: ST_TO_ADDR
// hc_gallery :=  ;
5255: LD_ADDR_OWVAR 33
5259: PUSH
5260: LD_STRING 
5262: ST_TO_ADDR
// hc_name :=  ;
5263: LD_ADDR_OWVAR 26
5267: PUSH
5268: LD_STRING 
5270: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
5271: LD_ADDR_OWVAR 31
5275: PUSH
5276: LD_EXP 52
5280: PUSH
5281: LD_VAR 0 2
5285: PLUS
5286: PUSH
5287: LD_EXP 52
5291: PUSH
5292: LD_VAR 0 2
5296: PLUS
5297: PUSH
5298: LD_EXP 52
5302: PUSH
5303: LD_VAR 0 2
5307: PLUS
5308: PUSH
5309: LD_EXP 52
5313: PUSH
5314: LD_VAR 0 2
5318: PLUS
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
5326: LD_ADDR_OWVAR 35
5330: PUSH
5331: LD_INT 10
5333: PUSH
5334: LD_VAR 0 2
5338: MUL
5339: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5340: LD_ADDR_OWVAR 29
5344: PUSH
5345: LD_INT 12
5347: PUSH
5348: LD_INT 10
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: ST_TO_ADDR
// result := CreateHuman ;
5355: LD_ADDR_VAR 0 1
5359: PUSH
5360: CALL_OW 44
5364: ST_TO_ADDR
// end ;
5365: LD_VAR 0 1
5369: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
5370: LD_INT 0
5372: PPUSH
5373: PPUSH
5374: PPUSH
// if not ape then
5375: LD_VAR 0 1
5379: NOT
5380: IFFALSE 5384
// exit ;
5382: GO 5509
// side := GetSide ( ape ) ;
5384: LD_ADDR_VAR 0 3
5388: PUSH
5389: LD_VAR 0 1
5393: PPUSH
5394: CALL_OW 255
5398: ST_TO_ADDR
// if not side then
5399: LD_VAR 0 3
5403: NOT
5404: IFFALSE 5458
// begin for i = 1 to apemanPos do
5406: LD_ADDR_VAR 0 4
5410: PUSH
5411: DOUBLE
5412: LD_INT 1
5414: DEC
5415: ST_TO_ADDR
5416: LD_EXP 50
5420: PUSH
5421: FOR_TO
5422: IFFALSE 5456
// if ape in apemanPos [ i ] then
5424: LD_VAR 0 1
5428: PUSH
5429: LD_EXP 50
5433: PUSH
5434: LD_VAR 0 4
5438: ARRAY
5439: IN
5440: IFFALSE 5454
// begin side := i ;
5442: LD_ADDR_VAR 0 3
5446: PUSH
5447: LD_VAR 0 4
5451: ST_TO_ADDR
// break ;
5452: GO 5456
// end ;
5454: GO 5421
5456: POP
5457: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
5458: LD_ADDR_EXP 50
5462: PUSH
5463: LD_EXP 50
5467: PPUSH
5468: LD_VAR 0 3
5472: PPUSH
5473: LD_EXP 50
5477: PUSH
5478: LD_VAR 0 3
5482: ARRAY
5483: PUSH
5484: LD_VAR 0 1
5488: DIFF
5489: PPUSH
5490: CALL_OW 1
5494: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
5495: LD_ADDR_EXP 47
5499: PUSH
5500: LD_EXP 47
5504: PUSH
5505: LD_INT 1
5507: MINUS
5508: ST_TO_ADDR
// end ; end_of_file
5509: LD_VAR 0 2
5513: RET
// var shipment , tictac ; export function init_shipments ; begin
5514: LD_INT 0
5516: PPUSH
// shipment := Rand ( 0 , 3 ) ;
5517: LD_ADDR_LOC 4
5521: PUSH
5522: LD_INT 0
5524: PPUSH
5525: LD_INT 3
5527: PPUSH
5528: CALL_OW 12
5532: ST_TO_ADDR
// tictac := 0 ;
5533: LD_ADDR_LOC 5
5537: PUSH
5538: LD_INT 0
5540: ST_TO_ADDR
// end ;
5541: LD_VAR 0 1
5545: RET
// every 0 0$5 + 0 0$1.1 do var d ;
5546: GO 5548
5548: DISABLE
5549: LD_INT 0
5551: PPUSH
// begin case tick of 1 .. 1 1$0 :
5552: LD_OWVAR 1
5556: PUSH
5557: LD_INT 1
5559: DOUBLE
5560: GREATEREQUAL
5561: IFFALSE 5569
5563: LD_INT 2100
5565: DOUBLE
5566: LESSEQUAL
5567: IFTRUE 5571
5569: GO 5582
5571: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5572: LD_ADDR_VAR 0 1
5576: PUSH
5577: LD_INT 150
5579: ST_TO_ADDR
5580: GO 5765
5582: LD_INT 2100
5584: PUSH
5585: LD_INT 1
5587: PLUS
5588: DOUBLE
5589: GREATEREQUAL
5590: IFFALSE 5598
5592: LD_INT 10500
5594: DOUBLE
5595: LESSEQUAL
5596: IFTRUE 5600
5598: GO 5611
5600: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5601: LD_ADDR_VAR 0 1
5605: PUSH
5606: LD_INT 100
5608: ST_TO_ADDR
5609: GO 5765
5611: LD_INT 10500
5613: PUSH
5614: LD_INT 1
5616: PLUS
5617: DOUBLE
5618: GREATEREQUAL
5619: IFFALSE 5627
5621: LD_INT 21000
5623: DOUBLE
5624: LESSEQUAL
5625: IFTRUE 5629
5627: GO 5640
5629: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5630: LD_ADDR_VAR 0 1
5634: PUSH
5635: LD_INT 90
5637: ST_TO_ADDR
5638: GO 5765
5640: LD_INT 21000
5642: PUSH
5643: LD_INT 1
5645: PLUS
5646: DOUBLE
5647: GREATEREQUAL
5648: IFFALSE 5656
5650: LD_INT 42000
5652: DOUBLE
5653: LESSEQUAL
5654: IFTRUE 5658
5656: GO 5669
5658: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5659: LD_ADDR_VAR 0 1
5663: PUSH
5664: LD_INT 70
5666: ST_TO_ADDR
5667: GO 5765
5669: LD_INT 42000
5671: PUSH
5672: LD_INT 1
5674: PLUS
5675: DOUBLE
5676: GREATEREQUAL
5677: IFFALSE 5685
5679: LD_INT 63000
5681: DOUBLE
5682: LESSEQUAL
5683: IFTRUE 5687
5685: GO 5698
5687: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5688: LD_ADDR_VAR 0 1
5692: PUSH
5693: LD_INT 60
5695: ST_TO_ADDR
5696: GO 5765
5698: LD_INT 63000
5700: PUSH
5701: LD_INT 1
5703: PLUS
5704: DOUBLE
5705: GREATEREQUAL
5706: IFFALSE 5714
5708: LD_INT 105000
5710: DOUBLE
5711: LESSEQUAL
5712: IFTRUE 5716
5714: GO 5727
5716: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5717: LD_ADDR_VAR 0 1
5721: PUSH
5722: LD_INT 35
5724: ST_TO_ADDR
5725: GO 5765
5727: LD_INT 105000
5729: PUSH
5730: LD_INT 1
5732: PLUS
5733: DOUBLE
5734: GREATEREQUAL
5735: IFFALSE 5743
5737: LD_INT 630000
5739: DOUBLE
5740: LESSEQUAL
5741: IFTRUE 5745
5743: GO 5756
5745: POP
// d := 20 ; else
5746: LD_ADDR_VAR 0 1
5750: PUSH
5751: LD_INT 20
5753: ST_TO_ADDR
5754: GO 5765
5756: POP
// d := 0 ; end ;
5757: LD_ADDR_VAR 0 1
5761: PUSH
5762: LD_INT 0
5764: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5765: LD_INT 1
5767: PPUSH
5768: LD_INT 10000
5770: PPUSH
5771: CALL_OW 12
5775: PUSH
5776: LD_VAR 0 1
5780: PUSH
5781: LD_EXP 22
5785: MUL
5786: LESSEQUAL
5787: IFFALSE 5863
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5789: LD_INT 1
5791: PPUSH
5792: LD_INT 140
5794: PPUSH
5795: CALL_OW 12
5799: PPUSH
5800: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
5804: LD_ADDR_LOC 4
5808: PUSH
5809: LD_LOC 4
5813: PUSH
5814: LD_INT 1
5816: PLUS
5817: PUSH
5818: LD_INT 4
5820: MOD
5821: ST_TO_ADDR
// if GetResourceArea ( nw + shipment , mat_cans ) < 50 then
5822: LD_INT 12
5824: PUSH
5825: LD_LOC 4
5829: PLUS
5830: PPUSH
5831: LD_INT 1
5833: PPUSH
5834: CALL_OW 287
5838: PUSH
5839: LD_INT 50
5841: LESS
5842: IFFALSE 5863
// CreateCratesArea ( 5 , nw + shipment , true ) ;
5844: LD_INT 5
5846: PPUSH
5847: LD_INT 12
5849: PUSH
5850: LD_LOC 4
5854: PLUS
5855: PPUSH
5856: LD_INT 1
5858: PPUSH
5859: CALL_OW 55
// end ; enable ;
5863: ENABLE
// end ;
5864: PPOPN 1
5866: END
// every 0 0$10 trigger TICK > ( ( 3 3$0 * tictac ) + tictac * ( 1 1$30 - shipments_density * ( 0 0$2 ) ) ) do var i , amount ;
5867: LD_OWVAR 1
5871: PUSH
5872: LD_INT 6300
5874: PUSH
5875: LD_LOC 5
5879: MUL
5880: PUSH
5881: LD_LOC 5
5885: PUSH
5886: LD_INT 3150
5888: PUSH
5889: LD_EXP 22
5893: PUSH
5894: LD_INT 70
5896: MUL
5897: MINUS
5898: MUL
5899: PLUS
5900: GREATER
5901: IFFALSE 6004
5903: GO 5905
5905: DISABLE
5906: LD_INT 0
5908: PPUSH
5909: PPUSH
// begin tictac := tictac + 1 ;
5910: LD_ADDR_LOC 5
5914: PUSH
5915: LD_LOC 5
5919: PUSH
5920: LD_INT 1
5922: PLUS
5923: ST_TO_ADDR
// amount := Rand ( 3 , 5 ) ;
5924: LD_ADDR_VAR 0 2
5928: PUSH
5929: LD_INT 3
5931: PPUSH
5932: LD_INT 5
5934: PPUSH
5935: CALL_OW 12
5939: ST_TO_ADDR
// for i = 0 to 3 do
5940: LD_ADDR_VAR 0 1
5944: PUSH
5945: DOUBLE
5946: LD_INT 0
5948: DEC
5949: ST_TO_ADDR
5950: LD_INT 3
5952: PUSH
5953: FOR_TO
5954: IFFALSE 6001
// if GetResourceArea ( Base1 + i , mat_cans ) < 20 then
5956: LD_INT 1
5958: PUSH
5959: LD_VAR 0 1
5963: PLUS
5964: PPUSH
5965: LD_INT 1
5967: PPUSH
5968: CALL_OW 287
5972: PUSH
5973: LD_INT 20
5975: LESS
5976: IFFALSE 5999
// CreateCratesArea ( amount , Base1 + i , true ) ;
5978: LD_VAR 0 2
5982: PPUSH
5983: LD_INT 1
5985: PUSH
5986: LD_VAR 0 1
5990: PLUS
5991: PPUSH
5992: LD_INT 1
5994: PPUSH
5995: CALL_OW 55
5999: GO 5953
6001: POP
6002: POP
// enable ;
6003: ENABLE
// end ; end_of_file
6004: PPOPN 2
6006: END
// var strength ; function Update_Flags ; var un ; begin
6007: LD_INT 0
6009: PPUSH
6010: PPUSH
// for un in battle_flags_id do
6011: LD_ADDR_VAR 0 2
6015: PUSH
6016: LD_EXP 45
6020: PUSH
6021: FOR_IN
6022: IFFALSE 6097
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6024: LD_VAR 0 2
6028: PPUSH
6029: LD_INT 1
6031: PUSH
6032: LD_LOC 6
6036: PUSH
6037: EMPTY
6038: LIST
6039: LIST
6040: PUSH
6041: LD_INT 2
6043: PUSH
6044: LD_LOC 6
6048: PUSH
6049: LD_INT 2
6051: DIV
6052: PUSH
6053: EMPTY
6054: LIST
6055: LIST
6056: PUSH
6057: LD_INT 3
6059: PUSH
6060: LD_LOC 6
6064: PUSH
6065: LD_INT 5
6067: DIV
6068: PUSH
6069: EMPTY
6070: LIST
6071: LIST
6072: PUSH
6073: LD_INT 20
6075: PUSH
6076: LD_LOC 6
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: PPUSH
6091: CALL_OW 423
6095: GO 6021
6097: POP
6098: POP
// end ;
6099: LD_VAR 0 1
6103: RET
// every 0 0$0.1 do var un ;
6104: GO 6106
6106: DISABLE
6107: LD_INT 0
6109: PPUSH
// begin if not def_morale_flags then
6110: LD_EXP 9
6114: NOT
6115: IFFALSE 6119
// exit ;
6117: GO 6196
// if not morale_decreasing_time then
6119: LD_EXP 46
6123: NOT
6124: IFFALSE 6128
// exit ;
6126: GO 6196
// strength = 100 ;
6128: LD_ADDR_LOC 6
6132: PUSH
6133: LD_INT 100
6135: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
6136: LD_EXP 46
6140: PPUSH
6141: CALL_OW 67
// strength := strength - 1 ;
6145: LD_ADDR_LOC 6
6149: PUSH
6150: LD_LOC 6
6154: PUSH
6155: LD_INT 1
6157: MINUS
6158: ST_TO_ADDR
// Update_Flags ;
6159: CALL 6007 0 0
// until not strength ;
6163: LD_LOC 6
6167: NOT
6168: IFFALSE 6136
// for un in battle_flags_id do
6170: LD_ADDR_VAR 0 1
6174: PUSH
6175: LD_EXP 45
6179: PUSH
6180: FOR_IN
6181: IFFALSE 6194
// KillBattleFlag ( un ) ;
6183: LD_VAR 0 1
6187: PPUSH
6188: CALL_OW 419
6192: GO 6180
6194: POP
6195: POP
// end ; end_of_file
6196: PPOPN 1
6198: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
6199: LD_INT 0
6201: PPUSH
6202: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
6203: LD_ADDR_VAR 0 2
6207: PUSH
6208: LD_STRING #Multi1x1-Time
6210: PUSH
6211: LD_OWVAR 1
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: ST_TO_ADDR
// if WaitServerStrings then
6220: LD_EXP 55
6224: IFFALSE 6242
// AllStrings = AllStrings ^ WaitServerStrings ;
6226: LD_ADDR_VAR 0 2
6230: PUSH
6231: LD_VAR 0 2
6235: PUSH
6236: LD_EXP 55
6240: ADD
6241: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
6242: LD_INT 0
6244: PUSH
6245: LD_EXP 23
6249: PUSH
6250: LD_OWVAR 1
6254: MINUS
6255: LESSEQUAL
6256: IFFALSE 6287
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
6258: LD_ADDR_VAR 0 2
6262: PUSH
6263: LD_VAR 0 2
6267: PUSH
6268: LD_STRING #allowedsibbomb
6270: PUSH
6271: LD_EXP 23
6275: PUSH
6276: LD_OWVAR 1
6280: MINUS
6281: PUSH
6282: EMPTY
6283: LIST
6284: LIST
6285: ADD
6286: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
6287: LD_INT 0
6289: PUSH
6290: LD_EXP 58
6294: PUSH
6295: LD_OWVAR 1
6299: MINUS
6300: LESSEQUAL
6301: IFFALSE 6332
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
6303: LD_ADDR_VAR 0 2
6307: PUSH
6308: LD_VAR 0 2
6312: PUSH
6313: LD_STRING #builduptime
6315: PUSH
6316: LD_EXP 58
6320: PUSH
6321: LD_OWVAR 1
6325: MINUS
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: ADD
6331: ST_TO_ADDR
// if ( ExtraStrings ) then
6332: LD_EXP 54
6336: IFFALSE 6358
// AllStrings := AllStrings ^  ^ ExtraStrings ;
6338: LD_ADDR_VAR 0 2
6342: PUSH
6343: LD_VAR 0 2
6347: PUSH
6348: LD_STRING 
6350: ADD
6351: PUSH
6352: LD_EXP 54
6356: ADD
6357: ST_TO_ADDR
// Display_Strings := AllStrings ;
6358: LD_ADDR_OWVAR 47
6362: PUSH
6363: LD_VAR 0 2
6367: ST_TO_ADDR
// end ;
6368: LD_VAR 0 1
6372: RET
// every 0 0$1 do
6373: GO 6375
6375: DISABLE
// begin ShowTimer ;
6376: CALL 6199 0 0
// enable ;
6380: ENABLE
// end ; end_of_file
6381: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6382: LD_VAR 0 1
6386: PPUSH
6387: CALL_OW 266
6391: PUSH
6392: LD_INT 0
6394: PUSH
6395: LD_INT 1
6397: PUSH
6398: EMPTY
6399: LIST
6400: LIST
6401: IN
6402: IFFALSE 6427
// SetBName ( b , @ & GetSide ( b ) ) ;
6404: LD_VAR 0 1
6408: PPUSH
6409: LD_STRING @
6411: PUSH
6412: LD_VAR 0 1
6416: PPUSH
6417: CALL_OW 255
6421: STR
6422: PPUSH
6423: CALL_OW 500
// end ;
6427: PPOPN 2
6429: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6430: LD_VAR 0 1
6434: PPUSH
6435: CALL_OW 266
6439: PUSH
6440: LD_INT 0
6442: PUSH
6443: LD_INT 1
6445: PUSH
6446: EMPTY
6447: LIST
6448: LIST
6449: IN
6450: IFFALSE 6475
// SetBName ( b , @ & GetSide ( b ) ) ;
6452: LD_VAR 0 1
6456: PPUSH
6457: LD_STRING @
6459: PUSH
6460: LD_VAR 0 1
6464: PPUSH
6465: CALL_OW 255
6469: STR
6470: PPUSH
6471: CALL_OW 500
// end ;
6475: PPOPN 3
6477: END
// on VehicleConstructed ( veh , fac ) do var side ;
6478: LD_INT 0
6480: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6481: LD_VAR 0 1
6485: PPUSH
6486: CALL_OW 263
6490: PUSH
6491: LD_INT 5
6493: EQUAL
6494: IFFALSE 6636
// begin side := GetSide ( veh ) ;
6496: LD_ADDR_VAR 0 3
6500: PUSH
6501: LD_VAR 0 1
6505: PPUSH
6506: CALL_OW 255
6510: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6511: LD_ADDR_EXP 50
6515: PUSH
6516: LD_EXP 50
6520: PPUSH
6521: LD_VAR 0 3
6525: PPUSH
6526: LD_EXP 50
6530: PUSH
6531: LD_VAR 0 3
6535: ARRAY
6536: PPUSH
6537: LD_INT 52
6539: PUSH
6540: EMPTY
6541: LIST
6542: PPUSH
6543: CALL_OW 72
6547: PUSH
6548: LD_INT 22
6550: PUSH
6551: LD_VAR 0 3
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: PUSH
6560: LD_INT 2
6562: PUSH
6563: LD_INT 33
6565: PUSH
6566: LD_INT 5
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: PUSH
6573: LD_INT 25
6575: PUSH
6576: LD_INT 12
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: PUSH
6583: LD_INT 25
6585: PUSH
6586: LD_INT 15
6588: PUSH
6589: EMPTY
6590: LIST
6591: LIST
6592: PUSH
6593: LD_INT 25
6595: PUSH
6596: LD_INT 16
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: PUSH
6603: LD_INT 25
6605: PUSH
6606: LD_INT 17
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: PPUSH
6625: CALL_OW 69
6629: UNION
6630: PPUSH
6631: CALL_OW 1
6635: ST_TO_ADDR
// end ; end ;
6636: PPOPN 3
6638: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6639: LD_INT 0
6641: PPUSH
6642: PPUSH
6643: PPUSH
6644: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6645: LD_VAR 0 1
6649: PPUSH
6650: CALL_OW 257
6654: PUSH
6655: LD_INT 12
6657: PUSH
6658: LD_INT 15
6660: PUSH
6661: LD_INT 17
6663: PUSH
6664: LD_INT 16
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: IN
6673: PUSH
6674: LD_VAR 0 1
6678: PPUSH
6679: CALL_OW 263
6683: PUSH
6684: LD_INT 5
6686: EQUAL
6687: OR
6688: IFFALSE 6699
// ApeKilled ( j ) ;
6690: LD_VAR 0 1
6694: PPUSH
6695: CALL 5370 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6699: LD_VAR 0 1
6703: PPUSH
6704: CALL_OW 266
6708: PUSH
6709: LD_INT 0
6711: PUSH
6712: LD_INT 1
6714: PUSH
6715: EMPTY
6716: LIST
6717: LIST
6718: IN
6719: IFFALSE 6801
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6721: LD_ADDR_VAR 0 4
6725: PUSH
6726: LD_EXP 34
6730: PUSH
6731: LD_VAR 0 1
6735: PPUSH
6736: CALL_OW 255
6740: ARRAY
6741: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6742: LD_ADDR_VAR 0 2
6746: PUSH
6747: LD_EXP 41
6751: PUSH
6752: LD_VAR 0 4
6756: ARRAY
6757: PUSH
6758: LD_INT 1
6760: ARRAY
6761: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6762: LD_ADDR_VAR 0 3
6766: PUSH
6767: LD_EXP 41
6771: PUSH
6772: LD_VAR 0 4
6776: ARRAY
6777: PUSH
6778: LD_INT 2
6780: ARRAY
6781: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
6782: LD_VAR 0 2
6786: PPUSH
6787: LD_VAR 0 3
6791: PPUSH
6792: CALL_OW 420
6796: PPUSH
6797: CALL_OW 419
// end ; end ;
6801: PPOPN 5
6803: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
6804: LD_VAR 0 1
6808: PPUSH
6809: LD_VAR 0 2
6813: PPUSH
6814: LD_VAR 0 3
6818: PPUSH
6819: LD_OWVAR 2
6823: PPUSH
6824: CALL 6831 0 4
6828: PPOPN 3
6830: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
6831: LD_INT 0
6833: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
6834: LD_VAR 0 1
6838: PPUSH
6839: CALL_OW 255
6843: PUSH
6844: LD_VAR 0 4
6848: EQUAL
6849: IFFALSE 6868
// begin SetAchievement ( ACH_RAD ) ;
6851: LD_STRING ACH_RAD
6853: PPUSH
6854: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
6858: LD_STRING ACH_NL
6860: PPUSH
6861: LD_INT 1
6863: PPUSH
6864: CALL_OW 564
// end end ;
6868: LD_VAR 0 5
6872: RET
// export function SA_Win ( side ) ; begin
6873: LD_INT 0
6875: PPUSH
// case side of 1 :
6876: LD_VAR 0 1
6880: PUSH
6881: LD_INT 1
6883: DOUBLE
6884: EQUAL
6885: IFTRUE 6889
6887: GO 6902
6889: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
6890: LD_STRING ACH_AH
6892: PPUSH
6893: LD_INT 1
6895: PPUSH
6896: CALL_OW 564
6900: GO 7065
6902: LD_INT 2
6904: DOUBLE
6905: EQUAL
6906: IFTRUE 6910
6908: GO 6923
6910: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
6911: LD_STRING ACH_E
6913: PPUSH
6914: LD_INT 1
6916: PPUSH
6917: CALL_OW 564
6921: GO 7065
6923: LD_INT 3
6925: DOUBLE
6926: EQUAL
6927: IFTRUE 6931
6929: GO 6944
6931: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
6932: LD_STRING ACH_OOL
6934: PPUSH
6935: LD_INT 1
6937: PPUSH
6938: CALL_OW 564
6942: GO 7065
6944: LD_INT 1
6946: PUSH
6947: LD_INT 2
6949: PUSH
6950: EMPTY
6951: LIST
6952: LIST
6953: DOUBLE
6954: EQUAL
6955: IFTRUE 6959
6957: GO 6984
6959: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
6960: LD_STRING ACH_AH
6962: PPUSH
6963: LD_REAL  5.00000000000000E-0001
6966: PPUSH
6967: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
6971: LD_STRING ACH_E
6973: PPUSH
6974: LD_REAL  5.00000000000000E-0001
6977: PPUSH
6978: CALL_OW 564
// end ; [ 2 , 3 ] :
6982: GO 7065
6984: LD_INT 2
6986: PUSH
6987: LD_INT 3
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: DOUBLE
6994: EQUAL
6995: IFTRUE 6999
6997: GO 7024
6999: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
7000: LD_STRING ACH_OOL
7002: PPUSH
7003: LD_REAL  5.00000000000000E-0001
7006: PPUSH
7007: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7011: LD_STRING ACH_E
7013: PPUSH
7014: LD_REAL  5.00000000000000E-0001
7017: PPUSH
7018: CALL_OW 564
// end ; [ 3 , 1 ] :
7022: GO 7065
7024: LD_INT 3
7026: PUSH
7027: LD_INT 1
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: DOUBLE
7034: EQUAL
7035: IFTRUE 7039
7037: GO 7064
7039: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7040: LD_STRING ACH_AH
7042: PPUSH
7043: LD_REAL  5.00000000000000E-0001
7046: PPUSH
7047: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
7051: LD_STRING ACH_OOL
7053: PPUSH
7054: LD_REAL  5.00000000000000E-0001
7057: PPUSH
7058: CALL_OW 564
// end ; end ;
7062: GO 7065
7064: POP
// end ; end_of_file
7065: LD_VAR 0 2
7069: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
7070: LD_INT 0
7072: PPUSH
7073: PPUSH
// enable ( 98 ) ;
7074: LD_INT 98
7076: ENABLE_MARKED
// GameEnded = false ;
7077: LD_ADDR_LOC 8
7081: PUSH
7082: LD_INT 0
7084: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7085: LD_ADDR_LOC 7
7089: PUSH
7090: LD_INT 0
7092: PUSH
7093: LD_INT 0
7095: PUSH
7096: LD_INT 0
7098: PUSH
7099: LD_INT 0
7101: PUSH
7102: LD_INT 0
7104: PUSH
7105: LD_INT 0
7107: PUSH
7108: LD_INT 0
7110: PUSH
7111: LD_INT 0
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: LIST
7118: LIST
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: ST_TO_ADDR
// unfoged = false ;
7124: LD_ADDR_LOC 9
7128: PUSH
7129: LD_INT 0
7131: ST_TO_ADDR
// defeated_specs := [ ] ;
7132: LD_ADDR_LOC 10
7136: PUSH
7137: EMPTY
7138: ST_TO_ADDR
// for i = 1 to side_positions do
7139: LD_ADDR_VAR 0 2
7143: PUSH
7144: DOUBLE
7145: LD_INT 1
7147: DEC
7148: ST_TO_ADDR
7149: LD_EXP 34
7153: PUSH
7154: FOR_TO
7155: IFFALSE 7195
// if not side_positions [ i ] then
7157: LD_EXP 34
7161: PUSH
7162: LD_VAR 0 2
7166: ARRAY
7167: NOT
7168: IFFALSE 7193
// defeated = replace ( defeated , i , true ) ;
7170: LD_ADDR_LOC 7
7174: PUSH
7175: LD_LOC 7
7179: PPUSH
7180: LD_VAR 0 2
7184: PPUSH
7185: LD_INT 1
7187: PPUSH
7188: CALL_OW 1
7192: ST_TO_ADDR
7193: GO 7154
7195: POP
7196: POP
// end ;
7197: LD_VAR 0 1
7201: RET
// function CanWinLoose ; begin
7202: LD_INT 0
7204: PPUSH
// Result := true ;
7205: LD_ADDR_VAR 0 1
7209: PUSH
7210: LD_INT 1
7212: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
7213: CALL_OW 518
7217: PUSH
7218: CALL_OW 519
7222: PUSH
7223: LD_INT 0
7225: GREATER
7226: AND
7227: IFFALSE 7237
// Result := false ;
7229: LD_ADDR_VAR 0 1
7233: PUSH
7234: LD_INT 0
7236: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7237: CALL_OW 531
7241: PUSH
7242: CALL_OW 519
7246: PUSH
7247: LD_INT 1
7249: GREATER
7250: AND
7251: IFFALSE 7261
// Result := false ;
7253: LD_ADDR_VAR 0 1
7257: PUSH
7258: LD_INT 0
7260: ST_TO_ADDR
// end ;
7261: LD_VAR 0 1
7265: RET
// export function HasPower ( i ) ; var k , h ; begin
7266: LD_INT 0
7268: PPUSH
7269: PPUSH
7270: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
7271: LD_VAR 0 1
7275: PPUSH
7276: CALL_OW 108
7280: NOT
7281: PUSH
7282: LD_EXP 39
7286: PUSH
7287: LD_VAR 0 1
7291: ARRAY
7292: NOT
7293: AND
7294: PUSH
7295: LD_OWVAR 4
7299: AND
7300: IFFALSE 7312
// begin result = false ;
7302: LD_ADDR_VAR 0 2
7306: PUSH
7307: LD_INT 0
7309: ST_TO_ADDR
// end else
7310: GO 7607
// case def_win_rules of 0 :
7312: LD_EXP 27
7316: PUSH
7317: LD_INT 0
7319: DOUBLE
7320: EQUAL
7321: IFTRUE 7325
7323: GO 7488
7325: POP
// if def_people_respawning then
7326: LD_EXP 12
7330: IFFALSE 7421
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
7332: LD_ADDR_VAR 0 2
7336: PUSH
7337: LD_INT 22
7339: PUSH
7340: LD_VAR 0 1
7344: PUSH
7345: EMPTY
7346: LIST
7347: LIST
7348: PUSH
7349: LD_INT 2
7351: PUSH
7352: LD_INT 21
7354: PUSH
7355: LD_INT 1
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PUSH
7362: LD_INT 33
7364: PUSH
7365: LD_INT 3
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: PUSH
7372: LD_INT 33
7374: PUSH
7375: LD_INT 5
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: PUSH
7382: LD_INT 30
7384: PUSH
7385: LD_INT 0
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: PUSH
7392: LD_INT 30
7394: PUSH
7395: LD_INT 1
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PPUSH
7414: CALL_OW 69
7418: ST_TO_ADDR
7419: GO 7486
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
7421: LD_ADDR_VAR 0 2
7425: PUSH
7426: LD_INT 22
7428: PUSH
7429: LD_VAR 0 1
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: PUSH
7438: LD_INT 2
7440: PUSH
7441: LD_INT 21
7443: PUSH
7444: LD_INT 1
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: PUSH
7451: LD_INT 33
7453: PUSH
7454: LD_INT 3
7456: PUSH
7457: EMPTY
7458: LIST
7459: LIST
7460: PUSH
7461: LD_INT 33
7463: PUSH
7464: LD_INT 5
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PPUSH
7481: CALL_OW 69
7485: ST_TO_ADDR
7486: GO 7607
7488: LD_INT 1
7490: DOUBLE
7491: EQUAL
7492: IFTRUE 7496
7494: GO 7535
7496: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
7497: LD_ADDR_VAR 0 2
7501: PUSH
7502: LD_INT 22
7504: PUSH
7505: LD_VAR 0 1
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: PUSH
7514: LD_INT 21
7516: PUSH
7517: LD_INT 1
7519: PUSH
7520: EMPTY
7521: LIST
7522: LIST
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: PPUSH
7528: CALL_OW 69
7532: ST_TO_ADDR
7533: GO 7607
7535: LD_INT 2
7537: DOUBLE
7538: EQUAL
7539: IFTRUE 7543
7541: GO 7606
7543: POP
// begin h = false ;
7544: LD_ADDR_VAR 0 4
7548: PUSH
7549: LD_INT 0
7551: ST_TO_ADDR
// for k in heroes [ i ] do
7552: LD_ADDR_VAR 0 3
7556: PUSH
7557: LD_EXP 43
7561: PUSH
7562: LD_VAR 0 1
7566: ARRAY
7567: PUSH
7568: FOR_IN
7569: IFFALSE 7592
// if IsLive ( k ) then
7571: LD_VAR 0 3
7575: PPUSH
7576: CALL_OW 300
7580: IFFALSE 7590
// h = true ;
7582: LD_ADDR_VAR 0 4
7586: PUSH
7587: LD_INT 1
7589: ST_TO_ADDR
7590: GO 7568
7592: POP
7593: POP
// Result := h ;
7594: LD_ADDR_VAR 0 2
7598: PUSH
7599: LD_VAR 0 4
7603: ST_TO_ADDR
// end ; end ;
7604: GO 7607
7606: POP
// end ;
7607: LD_VAR 0 2
7611: RET
// function AlliedSides ( i , j ) ; begin
7612: LD_INT 0
7614: PPUSH
// Result := false ;
7615: LD_ADDR_VAR 0 3
7619: PUSH
7620: LD_INT 0
7622: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
7623: LD_VAR 0 1
7627: PPUSH
7628: LD_VAR 0 2
7632: PPUSH
7633: CALL_OW 81
7637: PUSH
7638: LD_INT 1
7640: EQUAL
7641: PUSH
7642: LD_VAR 0 2
7646: PPUSH
7647: LD_VAR 0 1
7651: PPUSH
7652: CALL_OW 81
7656: PUSH
7657: LD_INT 1
7659: EQUAL
7660: AND
7661: PUSH
7662: LD_VAR 0 1
7666: PPUSH
7667: CALL_OW 83
7671: AND
7672: PUSH
7673: LD_VAR 0 2
7677: PPUSH
7678: CALL_OW 83
7682: AND
7683: IFFALSE 7693
// Result := true ;
7685: LD_ADDR_VAR 0 3
7689: PUSH
7690: LD_INT 1
7692: ST_TO_ADDR
// end ;
7693: LD_VAR 0 3
7697: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
7698: CALL 7202 0 0
7702: PUSH
7703: LD_LOC 8
7707: NOT
7708: AND
7709: IFFALSE 7725
7711: GO 7713
7713: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
7714: LD_ADDR_EXP 55
7718: PUSH
7719: LD_STRING #Player-Ended
7721: PUSH
7722: EMPTY
7723: LIST
7724: ST_TO_ADDR
7725: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
7726: CALL 7202 0 0
7730: PUSH
7731: LD_LOC 8
7735: AND
7736: IFFALSE 7745
7738: GO 7740
7740: DISABLE
// YouLostInMultiplayer ;
7741: CALL_OW 107
7745: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
7746: CALL 7202 0 0
7750: NOT
7751: PUSH
7752: CALL_OW 531
7756: NOT
7757: AND
7758: IFFALSE 7774
7760: GO 7762
7762: DISABLE
// WaitServerStrings = [ #server-wait ] ;
7763: LD_ADDR_EXP 55
7767: PUSH
7768: LD_STRING #server-wait
7770: PUSH
7771: EMPTY
7772: LIST
7773: ST_TO_ADDR
7774: END
// every 100 trigger IAmSpec do
7775: CALL_OW 531
7779: IFFALSE 7795
7781: GO 7783
7783: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
7784: LD_ADDR_EXP 55
7788: PUSH
7789: LD_STRING #Player-IAmSpec
7791: PUSH
7792: EMPTY
7793: LIST
7794: ST_TO_ADDR
7795: END
// every 100 trigger GameEnded and IAmSpec do
7796: LD_LOC 8
7800: PUSH
7801: CALL_OW 531
7805: AND
7806: IFFALSE 7815
7808: GO 7810
7810: DISABLE
// YouLostInMultiplayer ;
7811: CALL_OW 107
7815: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
7816: CALL 7202 0 0
7820: PUSH
7821: LD_LOC 8
7825: NOT
7826: AND
7827: IFFALSE 7843
7829: GO 7831
7831: DISABLE
// WaitServerStrings = [ $player-win ] ;
7832: LD_ADDR_EXP 55
7836: PUSH
7837: LD_STRING $player-win
7839: PUSH
7840: EMPTY
7841: LIST
7842: ST_TO_ADDR
7843: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
7844: CALL 7202 0 0
7848: PUSH
7849: LD_LOC 8
7853: AND
7854: IFFALSE 7878
7856: GO 7858
7858: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
7859: LD_EXP 35
7863: PUSH
7864: LD_OWVAR 7
7868: ARRAY
7869: PPUSH
7870: CALL 6873 0 1
// YouWinInMultiplayer ;
7874: CALL_OW 106
// end ;
7878: END
// every 100 trigger isEditor marked 401 do
7879: LD_OWVAR 84
7883: IFFALSE 7899
7885: GO 7887
7887: DISABLE
// Debug_Strings = [ You won ] ;
7888: LD_ADDR_OWVAR 48
7892: PUSH
7893: LD_STRING You won
7895: PUSH
7896: EMPTY
7897: LIST
7898: ST_TO_ADDR
7899: END
// every 100 trigger isEditor marked 400 do
7900: LD_OWVAR 84
7904: IFFALSE 7920
7906: GO 7908
7908: DISABLE
// Debug_Strings = [ You loss ] ;
7909: LD_ADDR_OWVAR 48
7913: PUSH
7914: LD_STRING You loss
7916: PUSH
7917: EMPTY
7918: LIST
7919: ST_TO_ADDR
7920: END
// every 100 marked 98 do var i , un ;
7921: GO 7923
7923: DISABLE
7924: LD_INT 0
7926: PPUSH
7927: PPUSH
// begin for i = 1 to side_positions do
7928: LD_ADDR_VAR 0 1
7932: PUSH
7933: DOUBLE
7934: LD_INT 1
7936: DEC
7937: ST_TO_ADDR
7938: LD_EXP 34
7942: PUSH
7943: FOR_TO
7944: IFFALSE 8031
// begin if side_positions [ i ] then
7946: LD_EXP 34
7950: PUSH
7951: LD_VAR 0 1
7955: ARRAY
7956: IFFALSE 8029
// if not HasPower ( i ) and not defeated [ i ] then
7958: LD_VAR 0 1
7962: PPUSH
7963: CALL 7266 0 1
7967: NOT
7968: PUSH
7969: LD_LOC 7
7973: PUSH
7974: LD_VAR 0 1
7978: ARRAY
7979: NOT
7980: AND
7981: IFFALSE 8029
// begin defeated = replace ( defeated , i , true ) ;
7983: LD_ADDR_LOC 7
7987: PUSH
7988: LD_LOC 7
7992: PPUSH
7993: LD_VAR 0 1
7997: PPUSH
7998: LD_INT 1
8000: PPUSH
8001: CALL_OW 1
8005: ST_TO_ADDR
// if i = mp_player_side then
8006: LD_VAR 0 1
8010: PUSH
8011: LD_OWVAR 7
8015: EQUAL
8016: IFFALSE 8029
// begin Multiplayer_Loose_Message ;
8018: CALL_OW 521
// SetPlayerSpectator ( ) ;
8022: CALL_OW 572
// enable ( 400 ) ;
8026: LD_INT 400
8028: ENABLE_MARKED
// end ; end ; end ;
8029: GO 7943
8031: POP
8032: POP
// DidGameEnd ;
8033: CALL 8048 0 0
// if not GameEnded then
8037: LD_LOC 8
8041: NOT
8042: IFFALSE 8045
// enable ;
8044: ENABLE
// end ;
8045: PPOPN 2
8047: END
// function DidGameEnd ; var i , k , enemy ; begin
8048: LD_INT 0
8050: PPUSH
8051: PPUSH
8052: PPUSH
8053: PPUSH
// enemy = [ ] ;
8054: LD_ADDR_VAR 0 4
8058: PUSH
8059: EMPTY
8060: ST_TO_ADDR
// for i = 1 to side_positions do
8061: LD_ADDR_VAR 0 2
8065: PUSH
8066: DOUBLE
8067: LD_INT 1
8069: DEC
8070: ST_TO_ADDR
8071: LD_EXP 34
8075: PUSH
8076: FOR_TO
8077: IFFALSE 8171
// if not defeated [ i ] then
8079: LD_LOC 7
8083: PUSH
8084: LD_VAR 0 2
8088: ARRAY
8089: NOT
8090: IFFALSE 8169
// for k = 1 to side_positions do
8092: LD_ADDR_VAR 0 3
8096: PUSH
8097: DOUBLE
8098: LD_INT 1
8100: DEC
8101: ST_TO_ADDR
8102: LD_EXP 34
8106: PUSH
8107: FOR_TO
8108: IFFALSE 8167
// if not defeated [ k ] then
8110: LD_LOC 7
8114: PUSH
8115: LD_VAR 0 3
8119: ARRAY
8120: NOT
8121: IFFALSE 8165
// if not AlliedSides ( i , k ) then
8123: LD_VAR 0 2
8127: PPUSH
8128: LD_VAR 0 3
8132: PPUSH
8133: CALL 7612 0 2
8137: NOT
8138: IFFALSE 8165
// enemy = enemy ^ [ i , k ] ;
8140: LD_ADDR_VAR 0 4
8144: PUSH
8145: LD_VAR 0 4
8149: PUSH
8150: LD_VAR 0 2
8154: PUSH
8155: LD_VAR 0 3
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: ADD
8164: ST_TO_ADDR
8165: GO 8107
8167: POP
8168: POP
8169: GO 8076
8171: POP
8172: POP
// if not enemy then
8173: LD_VAR 0 4
8177: NOT
8178: IFFALSE 8204
// begin GameEnded = true ;
8180: LD_ADDR_LOC 8
8184: PUSH
8185: LD_INT 1
8187: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
8188: LD_LOC 7
8192: PUSH
8193: LD_OWVAR 7
8197: ARRAY
8198: NOT
8199: IFFALSE 8204
// enable ( 401 ) ;
8201: LD_INT 401
8203: ENABLE_MARKED
// end ; end ;
8204: LD_VAR 0 1
8208: RET
// function unfog ; var k , friends ; begin
8209: LD_INT 0
8211: PPUSH
8212: PPUSH
8213: PPUSH
// for k = 1 to side_positions do
8214: LD_ADDR_VAR 0 2
8218: PUSH
8219: DOUBLE
8220: LD_INT 1
8222: DEC
8223: ST_TO_ADDR
8224: LD_EXP 34
8228: PUSH
8229: FOR_TO
8230: IFFALSE 8286
// if not defeated [ k ] then
8232: LD_LOC 7
8236: PUSH
8237: LD_VAR 0 2
8241: ARRAY
8242: NOT
8243: IFFALSE 8284
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
8245: LD_OWVAR 7
8249: PPUSH
8250: LD_VAR 0 2
8254: PPUSH
8255: CALL_OW 81
8259: PUSH
8260: LD_INT 1
8262: PUSH
8263: EMPTY
8264: LIST
8265: IN
8266: IFFALSE 8284
// friends = friends ^ k ;
8268: LD_ADDR_VAR 0 3
8272: PUSH
8273: LD_VAR 0 3
8277: PUSH
8278: LD_VAR 0 2
8282: ADD
8283: ST_TO_ADDR
8284: GO 8229
8286: POP
8287: POP
// if not friends then
8288: LD_VAR 0 3
8292: NOT
8293: IFFALSE 8307
// begin SetPlayerSpectator ( ) ;
8295: CALL_OW 572
// unfoged = true ;
8299: LD_ADDR_LOC 9
8303: PUSH
8304: LD_INT 1
8306: ST_TO_ADDR
// end ; end ;
8307: LD_VAR 0 1
8311: RET
// export function MakeGameEnd ; begin
8312: LD_INT 0
8314: PPUSH
// SetPlayerSpectator ( ) ;
8315: CALL_OW 572
// unfoged = true ;
8319: LD_ADDR_LOC 9
8323: PUSH
8324: LD_INT 1
8326: ST_TO_ADDR
// wait ( 0 0$5 ) ;
8327: LD_INT 175
8329: PPUSH
8330: CALL_OW 67
// GameEnded = true ;
8334: LD_ADDR_LOC 8
8338: PUSH
8339: LD_INT 1
8341: ST_TO_ADDR
// end ;
8342: LD_VAR 0 1
8346: RET
// export function GetGameEnded ; begin
8347: LD_INT 0
8349: PPUSH
// result = GameEnded ;
8350: LD_ADDR_VAR 0 1
8354: PUSH
8355: LD_LOC 8
8359: ST_TO_ADDR
// end ; end_of_file
8360: LD_VAR 0 1
8364: RET
// export function SetMpTechs ( ) ; var side , i ; begin
8365: LD_INT 0
8367: PPUSH
8368: PPUSH
8369: PPUSH
// for side = 1 to 8 do
8370: LD_ADDR_VAR 0 2
8374: PUSH
8375: DOUBLE
8376: LD_INT 1
8378: DEC
8379: ST_TO_ADDR
8380: LD_INT 8
8382: PUSH
8383: FOR_TO
8384: IFFALSE 8505
// begin for i = 1 to 72 do
8386: LD_ADDR_VAR 0 3
8390: PUSH
8391: DOUBLE
8392: LD_INT 1
8394: DEC
8395: ST_TO_ADDR
8396: LD_INT 72
8398: PUSH
8399: FOR_TO
8400: IFFALSE 8431
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
8402: LD_VAR 0 3
8406: PPUSH
8407: LD_VAR 0 2
8411: PPUSH
8412: LD_INT 0
8414: PPUSH
8415: LD_VAR 0 3
8419: PPUSH
8420: CALL_OW 565
8424: PPUSH
8425: CALL_OW 322
8429: GO 8399
8431: POP
8432: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
8433: LD_INT 73
8435: PPUSH
8436: LD_VAR 0 2
8440: PPUSH
8441: LD_INT 0
8443: PPUSH
8444: LD_INT 25
8446: PPUSH
8447: CALL_OW 565
8451: PPUSH
8452: CALL_OW 322
// for i = 0 to 40 do
8456: LD_ADDR_VAR 0 3
8460: PUSH
8461: DOUBLE
8462: LD_INT 0
8464: DEC
8465: ST_TO_ADDR
8466: LD_INT 40
8468: PUSH
8469: FOR_TO
8470: IFFALSE 8501
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
8472: LD_VAR 0 3
8476: PPUSH
8477: LD_VAR 0 2
8481: PPUSH
8482: LD_INT 1
8484: PPUSH
8485: LD_VAR 0 3
8489: PPUSH
8490: CALL_OW 565
8494: PPUSH
8495: CALL_OW 324
8499: GO 8469
8501: POP
8502: POP
// end ;
8503: GO 8383
8505: POP
8506: POP
// end ;
8507: LD_VAR 0 1
8511: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
8512: LD_INT 0
8514: PPUSH
8515: PPUSH
8516: PPUSH
// for side = 1 to 8 do
8517: LD_ADDR_VAR 0 3
8521: PUSH
8522: DOUBLE
8523: LD_INT 1
8525: DEC
8526: ST_TO_ADDR
8527: LD_INT 8
8529: PUSH
8530: FOR_TO
8531: IFFALSE 12527
// begin for i = 1 to 73 do
8533: LD_ADDR_VAR 0 4
8537: PUSH
8538: DOUBLE
8539: LD_INT 1
8541: DEC
8542: ST_TO_ADDR
8543: LD_INT 73
8545: PUSH
8546: FOR_TO
8547: IFFALSE 8568
// SetTech ( i , side , state_disabled ) ;
8549: LD_VAR 0 4
8553: PPUSH
8554: LD_VAR 0 3
8558: PPUSH
8559: LD_INT 0
8561: PPUSH
8562: CALL_OW 322
8566: GO 8546
8568: POP
8569: POP
// for i = 0 to 40 do
8570: LD_ADDR_VAR 0 4
8574: PUSH
8575: DOUBLE
8576: LD_INT 0
8578: DEC
8579: ST_TO_ADDR
8580: LD_INT 40
8582: PUSH
8583: FOR_TO
8584: IFFALSE 8605
// SetRestrict ( i , side , false ) ;
8586: LD_VAR 0 4
8590: PPUSH
8591: LD_VAR 0 3
8595: PPUSH
8596: LD_INT 0
8598: PPUSH
8599: CALL_OW 324
8603: GO 8583
8605: POP
8606: POP
// case level of 1 :
8607: LD_VAR 0 1
8611: PUSH
8612: LD_INT 1
8614: DOUBLE
8615: EQUAL
8616: IFTRUE 8620
8618: GO 8773
8620: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8621: LD_INT 35
8623: PPUSH
8624: LD_VAR 0 3
8628: PPUSH
8629: LD_INT 1
8631: PPUSH
8632: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8636: LD_INT 45
8638: PPUSH
8639: LD_VAR 0 3
8643: PPUSH
8644: LD_INT 1
8646: PPUSH
8647: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8651: LD_INT 46
8653: PPUSH
8654: LD_VAR 0 3
8658: PPUSH
8659: LD_INT 1
8661: PPUSH
8662: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8666: LD_INT 47
8668: PPUSH
8669: LD_VAR 0 3
8673: PPUSH
8674: LD_INT 1
8676: PPUSH
8677: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
8681: LD_INT 0
8683: PPUSH
8684: LD_VAR 0 3
8688: PPUSH
8689: LD_INT 1
8691: PPUSH
8692: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
8696: LD_INT 2
8698: PPUSH
8699: LD_VAR 0 3
8703: PPUSH
8704: LD_INT 1
8706: PPUSH
8707: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
8711: LD_INT 4
8713: PPUSH
8714: LD_VAR 0 3
8718: PPUSH
8719: LD_INT 1
8721: PPUSH
8722: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
8726: LD_INT 6
8728: PPUSH
8729: LD_VAR 0 3
8733: PPUSH
8734: LD_INT 1
8736: PPUSH
8737: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
8741: LD_INT 29
8743: PPUSH
8744: LD_VAR 0 3
8748: PPUSH
8749: LD_INT 1
8751: PPUSH
8752: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8756: LD_INT 31
8758: PPUSH
8759: LD_VAR 0 3
8763: PPUSH
8764: LD_INT 1
8766: PPUSH
8767: CALL_OW 324
// end ; 2 :
8771: GO 12525
8773: LD_INT 2
8775: DOUBLE
8776: EQUAL
8777: IFTRUE 8781
8779: GO 8979
8781: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8782: LD_INT 35
8784: PPUSH
8785: LD_VAR 0 3
8789: PPUSH
8790: LD_INT 1
8792: PPUSH
8793: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8797: LD_INT 45
8799: PPUSH
8800: LD_VAR 0 3
8804: PPUSH
8805: LD_INT 1
8807: PPUSH
8808: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8812: LD_INT 46
8814: PPUSH
8815: LD_VAR 0 3
8819: PPUSH
8820: LD_INT 1
8822: PPUSH
8823: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8827: LD_INT 47
8829: PPUSH
8830: LD_VAR 0 3
8834: PPUSH
8835: LD_INT 1
8837: PPUSH
8838: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
8842: LD_INT 1
8844: PPUSH
8845: LD_VAR 0 3
8849: PPUSH
8850: LD_INT 1
8852: PPUSH
8853: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
8857: LD_INT 2
8859: PPUSH
8860: LD_VAR 0 3
8864: PPUSH
8865: LD_INT 1
8867: PPUSH
8868: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
8872: LD_INT 11
8874: PPUSH
8875: LD_VAR 0 3
8879: PPUSH
8880: LD_INT 1
8882: PPUSH
8883: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
8887: LD_INT 0
8889: PPUSH
8890: LD_VAR 0 3
8894: PPUSH
8895: LD_INT 1
8897: PPUSH
8898: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
8902: LD_INT 2
8904: PPUSH
8905: LD_VAR 0 3
8909: PPUSH
8910: LD_INT 1
8912: PPUSH
8913: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
8917: LD_INT 4
8919: PPUSH
8920: LD_VAR 0 3
8924: PPUSH
8925: LD_INT 1
8927: PPUSH
8928: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
8932: LD_INT 6
8934: PPUSH
8935: LD_VAR 0 3
8939: PPUSH
8940: LD_INT 1
8942: PPUSH
8943: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
8947: LD_INT 29
8949: PPUSH
8950: LD_VAR 0 3
8954: PPUSH
8955: LD_INT 1
8957: PPUSH
8958: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8962: LD_INT 31
8964: PPUSH
8965: LD_VAR 0 3
8969: PPUSH
8970: LD_INT 1
8972: PPUSH
8973: CALL_OW 324
// end ; 3 :
8977: GO 12525
8979: LD_INT 3
8981: DOUBLE
8982: EQUAL
8983: IFTRUE 8987
8985: GO 9440
8987: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8988: LD_INT 35
8990: PPUSH
8991: LD_VAR 0 3
8995: PPUSH
8996: LD_INT 1
8998: PPUSH
8999: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9003: LD_INT 45
9005: PPUSH
9006: LD_VAR 0 3
9010: PPUSH
9011: LD_INT 1
9013: PPUSH
9014: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9018: LD_INT 46
9020: PPUSH
9021: LD_VAR 0 3
9025: PPUSH
9026: LD_INT 1
9028: PPUSH
9029: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9033: LD_INT 47
9035: PPUSH
9036: LD_VAR 0 3
9040: PPUSH
9041: LD_INT 1
9043: PPUSH
9044: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9048: LD_INT 1
9050: PPUSH
9051: LD_VAR 0 3
9055: PPUSH
9056: LD_INT 1
9058: PPUSH
9059: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9063: LD_INT 2
9065: PPUSH
9066: LD_VAR 0 3
9070: PPUSH
9071: LD_INT 1
9073: PPUSH
9074: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9078: LD_INT 11
9080: PPUSH
9081: LD_VAR 0 3
9085: PPUSH
9086: LD_INT 1
9088: PPUSH
9089: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9093: LD_INT 48
9095: PPUSH
9096: LD_VAR 0 3
9100: PPUSH
9101: LD_INT 1
9103: PPUSH
9104: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9108: LD_INT 69
9110: PPUSH
9111: LD_VAR 0 3
9115: PPUSH
9116: LD_INT 1
9118: PPUSH
9119: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9123: LD_INT 39
9125: PPUSH
9126: LD_VAR 0 3
9130: PPUSH
9131: LD_INT 1
9133: PPUSH
9134: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9138: LD_INT 43
9140: PPUSH
9141: LD_VAR 0 3
9145: PPUSH
9146: LD_INT 1
9148: PPUSH
9149: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9153: LD_INT 51
9155: PPUSH
9156: LD_VAR 0 3
9160: PPUSH
9161: LD_INT 1
9163: PPUSH
9164: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9168: LD_INT 6
9170: PPUSH
9171: LD_VAR 0 3
9175: PPUSH
9176: LD_INT 1
9178: PPUSH
9179: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9183: LD_INT 0
9185: PPUSH
9186: LD_VAR 0 3
9190: PPUSH
9191: LD_INT 1
9193: PPUSH
9194: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9198: LD_INT 2
9200: PPUSH
9201: LD_VAR 0 3
9205: PPUSH
9206: LD_INT 1
9208: PPUSH
9209: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
9213: LD_INT 3
9215: PPUSH
9216: LD_VAR 0 3
9220: PPUSH
9221: LD_INT 1
9223: PPUSH
9224: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9228: LD_INT 4
9230: PPUSH
9231: LD_VAR 0 3
9235: PPUSH
9236: LD_INT 1
9238: PPUSH
9239: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9243: LD_INT 6
9245: PPUSH
9246: LD_VAR 0 3
9250: PPUSH
9251: LD_INT 1
9253: PPUSH
9254: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
9258: LD_INT 7
9260: PPUSH
9261: LD_VAR 0 3
9265: PPUSH
9266: LD_INT 1
9268: PPUSH
9269: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
9273: LD_INT 8
9275: PPUSH
9276: LD_VAR 0 3
9280: PPUSH
9281: LD_INT 1
9283: PPUSH
9284: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
9288: LD_INT 10
9290: PPUSH
9291: LD_VAR 0 3
9295: PPUSH
9296: LD_INT 1
9298: PPUSH
9299: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
9303: LD_INT 15
9305: PPUSH
9306: LD_VAR 0 3
9310: PPUSH
9311: LD_INT 1
9313: PPUSH
9314: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
9318: LD_INT 16
9320: PPUSH
9321: LD_VAR 0 3
9325: PPUSH
9326: LD_INT 1
9328: PPUSH
9329: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
9333: LD_INT 17
9335: PPUSH
9336: LD_VAR 0 3
9340: PPUSH
9341: LD_INT 1
9343: PPUSH
9344: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
9348: LD_INT 20
9350: PPUSH
9351: LD_VAR 0 3
9355: PPUSH
9356: LD_INT 1
9358: PPUSH
9359: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
9363: LD_INT 26
9365: PPUSH
9366: LD_VAR 0 3
9370: PPUSH
9371: LD_INT 1
9373: PPUSH
9374: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
9378: LD_INT 27
9380: PPUSH
9381: LD_VAR 0 3
9385: PPUSH
9386: LD_INT 1
9388: PPUSH
9389: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9393: LD_INT 29
9395: PPUSH
9396: LD_VAR 0 3
9400: PPUSH
9401: LD_INT 1
9403: PPUSH
9404: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9408: LD_INT 31
9410: PPUSH
9411: LD_VAR 0 3
9415: PPUSH
9416: LD_INT 1
9418: PPUSH
9419: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
9423: LD_INT 32
9425: PPUSH
9426: LD_VAR 0 3
9430: PPUSH
9431: LD_INT 1
9433: PPUSH
9434: CALL_OW 324
// end ; 4 :
9438: GO 12525
9440: LD_INT 4
9442: DOUBLE
9443: EQUAL
9444: IFTRUE 9448
9446: GO 10396
9448: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9449: LD_INT 35
9451: PPUSH
9452: LD_VAR 0 3
9456: PPUSH
9457: LD_INT 1
9459: PPUSH
9460: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9464: LD_INT 45
9466: PPUSH
9467: LD_VAR 0 3
9471: PPUSH
9472: LD_INT 1
9474: PPUSH
9475: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9479: LD_INT 46
9481: PPUSH
9482: LD_VAR 0 3
9486: PPUSH
9487: LD_INT 1
9489: PPUSH
9490: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9494: LD_INT 47
9496: PPUSH
9497: LD_VAR 0 3
9501: PPUSH
9502: LD_INT 1
9504: PPUSH
9505: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9509: LD_INT 1
9511: PPUSH
9512: LD_VAR 0 3
9516: PPUSH
9517: LD_INT 1
9519: PPUSH
9520: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9524: LD_INT 2
9526: PPUSH
9527: LD_VAR 0 3
9531: PPUSH
9532: LD_INT 1
9534: PPUSH
9535: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9539: LD_INT 11
9541: PPUSH
9542: LD_VAR 0 3
9546: PPUSH
9547: LD_INT 1
9549: PPUSH
9550: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
9554: LD_INT 20
9556: PPUSH
9557: LD_VAR 0 3
9561: PPUSH
9562: LD_INT 1
9564: PPUSH
9565: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9569: LD_INT 48
9571: PPUSH
9572: LD_VAR 0 3
9576: PPUSH
9577: LD_INT 1
9579: PPUSH
9580: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
9584: LD_INT 49
9586: PPUSH
9587: LD_VAR 0 3
9591: PPUSH
9592: LD_INT 1
9594: PPUSH
9595: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9599: LD_INT 69
9601: PPUSH
9602: LD_VAR 0 3
9606: PPUSH
9607: LD_INT 1
9609: PPUSH
9610: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9614: LD_INT 39
9616: PPUSH
9617: LD_VAR 0 3
9621: PPUSH
9622: LD_INT 1
9624: PPUSH
9625: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
9629: LD_INT 34
9631: PPUSH
9632: LD_VAR 0 3
9636: PPUSH
9637: LD_INT 1
9639: PPUSH
9640: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
9644: LD_INT 42
9646: PPUSH
9647: LD_VAR 0 3
9651: PPUSH
9652: LD_INT 1
9654: PPUSH
9655: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
9659: LD_INT 44
9661: PPUSH
9662: LD_VAR 0 3
9666: PPUSH
9667: LD_INT 1
9669: PPUSH
9670: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
9674: LD_INT 41
9676: PPUSH
9677: LD_VAR 0 3
9681: PPUSH
9682: LD_INT 1
9684: PPUSH
9685: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9689: LD_INT 43
9691: PPUSH
9692: LD_VAR 0 3
9696: PPUSH
9697: LD_INT 1
9699: PPUSH
9700: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
9704: LD_INT 70
9706: PPUSH
9707: LD_VAR 0 3
9711: PPUSH
9712: LD_INT 1
9714: PPUSH
9715: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9719: LD_INT 51
9721: PPUSH
9722: LD_VAR 0 3
9726: PPUSH
9727: LD_INT 1
9729: PPUSH
9730: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
9734: LD_INT 52
9736: PPUSH
9737: LD_VAR 0 3
9741: PPUSH
9742: LD_INT 1
9744: PPUSH
9745: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9749: LD_INT 6
9751: PPUSH
9752: LD_VAR 0 3
9756: PPUSH
9757: LD_INT 1
9759: PPUSH
9760: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
9764: LD_INT 15
9766: PPUSH
9767: LD_VAR 0 3
9771: PPUSH
9772: LD_INT 1
9774: PPUSH
9775: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
9779: LD_INT 7
9781: PPUSH
9782: LD_VAR 0 3
9786: PPUSH
9787: LD_INT 1
9789: PPUSH
9790: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
9794: LD_INT 12
9796: PPUSH
9797: LD_VAR 0 3
9801: PPUSH
9802: LD_INT 1
9804: PPUSH
9805: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
9809: LD_INT 18
9811: PPUSH
9812: LD_VAR 0 3
9816: PPUSH
9817: LD_INT 1
9819: PPUSH
9820: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
9824: LD_INT 60
9826: PPUSH
9827: LD_VAR 0 3
9831: PPUSH
9832: LD_INT 1
9834: PPUSH
9835: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
9839: LD_INT 9
9841: PPUSH
9842: LD_VAR 0 3
9846: PPUSH
9847: LD_INT 1
9849: PPUSH
9850: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
9854: LD_INT 30
9856: PPUSH
9857: LD_VAR 0 3
9861: PPUSH
9862: LD_INT 1
9864: PPUSH
9865: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
9869: LD_INT 37
9871: PPUSH
9872: LD_VAR 0 3
9876: PPUSH
9877: LD_INT 1
9879: PPUSH
9880: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
9884: LD_INT 5
9886: PPUSH
9887: LD_VAR 0 3
9891: PPUSH
9892: LD_INT 1
9894: PPUSH
9895: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
9899: LD_INT 66
9901: PPUSH
9902: LD_VAR 0 3
9906: PPUSH
9907: LD_INT 1
9909: PPUSH
9910: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
9914: LD_INT 21
9916: PPUSH
9917: LD_VAR 0 3
9921: PPUSH
9922: LD_INT 1
9924: PPUSH
9925: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
9929: LD_INT 22
9931: PPUSH
9932: LD_VAR 0 3
9936: PPUSH
9937: LD_INT 1
9939: PPUSH
9940: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
9944: LD_INT 54
9946: PPUSH
9947: LD_VAR 0 3
9951: PPUSH
9952: LD_INT 1
9954: PPUSH
9955: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9959: LD_INT 0
9961: PPUSH
9962: LD_VAR 0 3
9966: PPUSH
9967: LD_INT 1
9969: PPUSH
9970: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
9974: LD_INT 1
9976: PPUSH
9977: LD_VAR 0 3
9981: PPUSH
9982: LD_INT 1
9984: PPUSH
9985: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9989: LD_INT 2
9991: PPUSH
9992: LD_VAR 0 3
9996: PPUSH
9997: LD_INT 1
9999: PPUSH
10000: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10004: LD_INT 3
10006: PPUSH
10007: LD_VAR 0 3
10011: PPUSH
10012: LD_INT 1
10014: PPUSH
10015: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10019: LD_INT 4
10021: PPUSH
10022: LD_VAR 0 3
10026: PPUSH
10027: LD_INT 1
10029: PPUSH
10030: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10034: LD_INT 5
10036: PPUSH
10037: LD_VAR 0 3
10041: PPUSH
10042: LD_INT 1
10044: PPUSH
10045: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10049: LD_INT 6
10051: PPUSH
10052: LD_VAR 0 3
10056: PPUSH
10057: LD_INT 1
10059: PPUSH
10060: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10064: LD_INT 7
10066: PPUSH
10067: LD_VAR 0 3
10071: PPUSH
10072: LD_INT 1
10074: PPUSH
10075: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10079: LD_INT 8
10081: PPUSH
10082: LD_VAR 0 3
10086: PPUSH
10087: LD_INT 1
10089: PPUSH
10090: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10094: LD_INT 10
10096: PPUSH
10097: LD_VAR 0 3
10101: PPUSH
10102: LD_INT 1
10104: PPUSH
10105: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
10109: LD_INT 11
10111: PPUSH
10112: LD_VAR 0 3
10116: PPUSH
10117: LD_INT 1
10119: PPUSH
10120: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
10124: LD_INT 12
10126: PPUSH
10127: LD_VAR 0 3
10131: PPUSH
10132: LD_INT 1
10134: PPUSH
10135: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
10139: LD_INT 13
10141: PPUSH
10142: LD_VAR 0 3
10146: PPUSH
10147: LD_INT 1
10149: PPUSH
10150: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
10154: LD_INT 14
10156: PPUSH
10157: LD_VAR 0 3
10161: PPUSH
10162: LD_INT 1
10164: PPUSH
10165: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10169: LD_INT 15
10171: PPUSH
10172: LD_VAR 0 3
10176: PPUSH
10177: LD_INT 1
10179: PPUSH
10180: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10184: LD_INT 16
10186: PPUSH
10187: LD_VAR 0 3
10191: PPUSH
10192: LD_INT 1
10194: PPUSH
10195: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10199: LD_INT 17
10201: PPUSH
10202: LD_VAR 0 3
10206: PPUSH
10207: LD_INT 1
10209: PPUSH
10210: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
10214: LD_INT 19
10216: PPUSH
10217: LD_VAR 0 3
10221: PPUSH
10222: LD_INT 1
10224: PPUSH
10225: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10229: LD_INT 20
10231: PPUSH
10232: LD_VAR 0 3
10236: PPUSH
10237: LD_INT 1
10239: PPUSH
10240: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
10244: LD_INT 21
10246: PPUSH
10247: LD_VAR 0 3
10251: PPUSH
10252: LD_INT 1
10254: PPUSH
10255: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
10259: LD_INT 23
10261: PPUSH
10262: LD_VAR 0 3
10266: PPUSH
10267: LD_INT 1
10269: PPUSH
10270: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10274: LD_INT 26
10276: PPUSH
10277: LD_VAR 0 3
10281: PPUSH
10282: LD_INT 1
10284: PPUSH
10285: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10289: LD_INT 27
10291: PPUSH
10292: LD_VAR 0 3
10296: PPUSH
10297: LD_INT 1
10299: PPUSH
10300: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
10304: LD_INT 28
10306: PPUSH
10307: LD_VAR 0 3
10311: PPUSH
10312: LD_INT 1
10314: PPUSH
10315: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10319: LD_INT 29
10321: PPUSH
10322: LD_VAR 0 3
10326: PPUSH
10327: LD_INT 1
10329: PPUSH
10330: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
10334: LD_INT 30
10336: PPUSH
10337: LD_VAR 0 3
10341: PPUSH
10342: LD_INT 1
10344: PPUSH
10345: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10349: LD_INT 31
10351: PPUSH
10352: LD_VAR 0 3
10356: PPUSH
10357: LD_INT 1
10359: PPUSH
10360: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10364: LD_INT 32
10366: PPUSH
10367: LD_VAR 0 3
10371: PPUSH
10372: LD_INT 1
10374: PPUSH
10375: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
10379: LD_INT 36
10381: PPUSH
10382: LD_VAR 0 3
10386: PPUSH
10387: LD_INT 1
10389: PPUSH
10390: CALL_OW 324
// end ; 5 :
10394: GO 12525
10396: LD_INT 5
10398: DOUBLE
10399: EQUAL
10400: IFTRUE 10404
10402: GO 11517
10404: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10405: LD_INT 35
10407: PPUSH
10408: LD_VAR 0 3
10412: PPUSH
10413: LD_INT 1
10415: PPUSH
10416: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10420: LD_INT 45
10422: PPUSH
10423: LD_VAR 0 3
10427: PPUSH
10428: LD_INT 1
10430: PPUSH
10431: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10435: LD_INT 46
10437: PPUSH
10438: LD_VAR 0 3
10442: PPUSH
10443: LD_INT 1
10445: PPUSH
10446: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10450: LD_INT 47
10452: PPUSH
10453: LD_VAR 0 3
10457: PPUSH
10458: LD_INT 1
10460: PPUSH
10461: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10465: LD_INT 1
10467: PPUSH
10468: LD_VAR 0 3
10472: PPUSH
10473: LD_INT 1
10475: PPUSH
10476: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10480: LD_INT 2
10482: PPUSH
10483: LD_VAR 0 3
10487: PPUSH
10488: LD_INT 1
10490: PPUSH
10491: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10495: LD_INT 11
10497: PPUSH
10498: LD_VAR 0 3
10502: PPUSH
10503: LD_INT 1
10505: PPUSH
10506: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10510: LD_INT 20
10512: PPUSH
10513: LD_VAR 0 3
10517: PPUSH
10518: LD_INT 1
10520: PPUSH
10521: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10525: LD_INT 48
10527: PPUSH
10528: LD_VAR 0 3
10532: PPUSH
10533: LD_INT 1
10535: PPUSH
10536: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10540: LD_INT 49
10542: PPUSH
10543: LD_VAR 0 3
10547: PPUSH
10548: LD_INT 1
10550: PPUSH
10551: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10555: LD_INT 69
10557: PPUSH
10558: LD_VAR 0 3
10562: PPUSH
10563: LD_INT 1
10565: PPUSH
10566: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10570: LD_INT 39
10572: PPUSH
10573: LD_VAR 0 3
10577: PPUSH
10578: LD_INT 1
10580: PPUSH
10581: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10585: LD_INT 34
10587: PPUSH
10588: LD_VAR 0 3
10592: PPUSH
10593: LD_INT 1
10595: PPUSH
10596: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10600: LD_INT 42
10602: PPUSH
10603: LD_VAR 0 3
10607: PPUSH
10608: LD_INT 1
10610: PPUSH
10611: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10615: LD_INT 44
10617: PPUSH
10618: LD_VAR 0 3
10622: PPUSH
10623: LD_INT 1
10625: PPUSH
10626: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10630: LD_INT 41
10632: PPUSH
10633: LD_VAR 0 3
10637: PPUSH
10638: LD_INT 1
10640: PPUSH
10641: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
10645: LD_INT 40
10647: PPUSH
10648: LD_VAR 0 3
10652: PPUSH
10653: LD_INT 1
10655: PPUSH
10656: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10660: LD_INT 43
10662: PPUSH
10663: LD_VAR 0 3
10667: PPUSH
10668: LD_INT 1
10670: PPUSH
10671: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10675: LD_INT 70
10677: PPUSH
10678: LD_VAR 0 3
10682: PPUSH
10683: LD_INT 1
10685: PPUSH
10686: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10690: LD_INT 51
10692: PPUSH
10693: LD_VAR 0 3
10697: PPUSH
10698: LD_INT 1
10700: PPUSH
10701: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10705: LD_INT 52
10707: PPUSH
10708: LD_VAR 0 3
10712: PPUSH
10713: LD_INT 1
10715: PPUSH
10716: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10720: LD_INT 6
10722: PPUSH
10723: LD_VAR 0 3
10727: PPUSH
10728: LD_INT 1
10730: PPUSH
10731: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10735: LD_INT 15
10737: PPUSH
10738: LD_VAR 0 3
10742: PPUSH
10743: LD_INT 1
10745: PPUSH
10746: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10750: LD_INT 7
10752: PPUSH
10753: LD_VAR 0 3
10757: PPUSH
10758: LD_INT 1
10760: PPUSH
10761: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10765: LD_INT 12
10767: PPUSH
10768: LD_VAR 0 3
10772: PPUSH
10773: LD_INT 1
10775: PPUSH
10776: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
10780: LD_INT 17
10782: PPUSH
10783: LD_VAR 0 3
10787: PPUSH
10788: LD_INT 1
10790: PPUSH
10791: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10795: LD_INT 18
10797: PPUSH
10798: LD_VAR 0 3
10802: PPUSH
10803: LD_INT 1
10805: PPUSH
10806: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10810: LD_INT 60
10812: PPUSH
10813: LD_VAR 0 3
10817: PPUSH
10818: LD_INT 1
10820: PPUSH
10821: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
10825: LD_INT 32
10827: PPUSH
10828: LD_VAR 0 3
10832: PPUSH
10833: LD_INT 1
10835: PPUSH
10836: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10840: LD_INT 9
10842: PPUSH
10843: LD_VAR 0 3
10847: PPUSH
10848: LD_INT 1
10850: PPUSH
10851: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
10855: LD_INT 57
10857: PPUSH
10858: LD_VAR 0 3
10862: PPUSH
10863: LD_INT 1
10865: PPUSH
10866: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10870: LD_INT 30
10872: PPUSH
10873: LD_VAR 0 3
10877: PPUSH
10878: LD_INT 1
10880: PPUSH
10881: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10885: LD_INT 37
10887: PPUSH
10888: LD_VAR 0 3
10892: PPUSH
10893: LD_INT 1
10895: PPUSH
10896: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
10900: LD_INT 63
10902: PPUSH
10903: LD_VAR 0 3
10907: PPUSH
10908: LD_INT 1
10910: PPUSH
10911: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
10915: LD_INT 3
10917: PPUSH
10918: LD_VAR 0 3
10922: PPUSH
10923: LD_INT 1
10925: PPUSH
10926: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
10930: LD_INT 4
10932: PPUSH
10933: LD_VAR 0 3
10937: PPUSH
10938: LD_INT 1
10940: PPUSH
10941: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10945: LD_INT 5
10947: PPUSH
10948: LD_VAR 0 3
10952: PPUSH
10953: LD_INT 1
10955: PPUSH
10956: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10960: LD_INT 66
10962: PPUSH
10963: LD_VAR 0 3
10967: PPUSH
10968: LD_INT 1
10970: PPUSH
10971: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10975: LD_INT 21
10977: PPUSH
10978: LD_VAR 0 3
10982: PPUSH
10983: LD_INT 1
10985: PPUSH
10986: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10990: LD_INT 22
10992: PPUSH
10993: LD_VAR 0 3
10997: PPUSH
10998: LD_INT 1
11000: PPUSH
11001: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11005: LD_INT 19
11007: PPUSH
11008: LD_VAR 0 3
11012: PPUSH
11013: LD_INT 1
11015: PPUSH
11016: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11020: LD_INT 54
11022: PPUSH
11023: LD_VAR 0 3
11027: PPUSH
11028: LD_INT 1
11030: PPUSH
11031: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
11035: LD_INT 55
11037: PPUSH
11038: LD_VAR 0 3
11042: PPUSH
11043: LD_INT 1
11045: PPUSH
11046: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11050: LD_INT 0
11052: PPUSH
11053: LD_VAR 0 3
11057: PPUSH
11058: LD_INT 1
11060: PPUSH
11061: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11065: LD_INT 1
11067: PPUSH
11068: LD_VAR 0 3
11072: PPUSH
11073: LD_INT 1
11075: PPUSH
11076: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11080: LD_INT 2
11082: PPUSH
11083: LD_VAR 0 3
11087: PPUSH
11088: LD_INT 1
11090: PPUSH
11091: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11095: LD_INT 3
11097: PPUSH
11098: LD_VAR 0 3
11102: PPUSH
11103: LD_INT 1
11105: PPUSH
11106: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11110: LD_INT 4
11112: PPUSH
11113: LD_VAR 0 3
11117: PPUSH
11118: LD_INT 1
11120: PPUSH
11121: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11125: LD_INT 5
11127: PPUSH
11128: LD_VAR 0 3
11132: PPUSH
11133: LD_INT 1
11135: PPUSH
11136: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11140: LD_INT 6
11142: PPUSH
11143: LD_VAR 0 3
11147: PPUSH
11148: LD_INT 1
11150: PPUSH
11151: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11155: LD_INT 7
11157: PPUSH
11158: LD_VAR 0 3
11162: PPUSH
11163: LD_INT 1
11165: PPUSH
11166: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11170: LD_INT 8
11172: PPUSH
11173: LD_VAR 0 3
11177: PPUSH
11178: LD_INT 1
11180: PPUSH
11181: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11185: LD_INT 10
11187: PPUSH
11188: LD_VAR 0 3
11192: PPUSH
11193: LD_INT 1
11195: PPUSH
11196: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11200: LD_INT 11
11202: PPUSH
11203: LD_VAR 0 3
11207: PPUSH
11208: LD_INT 1
11210: PPUSH
11211: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11215: LD_INT 12
11217: PPUSH
11218: LD_VAR 0 3
11222: PPUSH
11223: LD_INT 1
11225: PPUSH
11226: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11230: LD_INT 13
11232: PPUSH
11233: LD_VAR 0 3
11237: PPUSH
11238: LD_INT 1
11240: PPUSH
11241: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11245: LD_INT 14
11247: PPUSH
11248: LD_VAR 0 3
11252: PPUSH
11253: LD_INT 1
11255: PPUSH
11256: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11260: LD_INT 15
11262: PPUSH
11263: LD_VAR 0 3
11267: PPUSH
11268: LD_INT 1
11270: PPUSH
11271: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11275: LD_INT 16
11277: PPUSH
11278: LD_VAR 0 3
11282: PPUSH
11283: LD_INT 1
11285: PPUSH
11286: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11290: LD_INT 17
11292: PPUSH
11293: LD_VAR 0 3
11297: PPUSH
11298: LD_INT 1
11300: PPUSH
11301: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
11305: LD_INT 18
11307: PPUSH
11308: LD_VAR 0 3
11312: PPUSH
11313: LD_INT 1
11315: PPUSH
11316: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11320: LD_INT 19
11322: PPUSH
11323: LD_VAR 0 3
11327: PPUSH
11328: LD_INT 1
11330: PPUSH
11331: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11335: LD_INT 20
11337: PPUSH
11338: LD_VAR 0 3
11342: PPUSH
11343: LD_INT 1
11345: PPUSH
11346: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11350: LD_INT 21
11352: PPUSH
11353: LD_VAR 0 3
11357: PPUSH
11358: LD_INT 1
11360: PPUSH
11361: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11365: LD_INT 23
11367: PPUSH
11368: LD_VAR 0 3
11372: PPUSH
11373: LD_INT 1
11375: PPUSH
11376: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11380: LD_INT 26
11382: PPUSH
11383: LD_VAR 0 3
11387: PPUSH
11388: LD_INT 1
11390: PPUSH
11391: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11395: LD_INT 27
11397: PPUSH
11398: LD_VAR 0 3
11402: PPUSH
11403: LD_INT 1
11405: PPUSH
11406: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11410: LD_INT 28
11412: PPUSH
11413: LD_VAR 0 3
11417: PPUSH
11418: LD_INT 1
11420: PPUSH
11421: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11425: LD_INT 29
11427: PPUSH
11428: LD_VAR 0 3
11432: PPUSH
11433: LD_INT 1
11435: PPUSH
11436: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11440: LD_INT 30
11442: PPUSH
11443: LD_VAR 0 3
11447: PPUSH
11448: LD_INT 1
11450: PPUSH
11451: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11455: LD_INT 31
11457: PPUSH
11458: LD_VAR 0 3
11462: PPUSH
11463: LD_INT 1
11465: PPUSH
11466: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11470: LD_INT 32
11472: PPUSH
11473: LD_VAR 0 3
11477: PPUSH
11478: LD_INT 1
11480: PPUSH
11481: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
11485: LD_INT 33
11487: PPUSH
11488: LD_VAR 0 3
11492: PPUSH
11493: LD_INT 1
11495: PPUSH
11496: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11500: LD_INT 36
11502: PPUSH
11503: LD_VAR 0 3
11507: PPUSH
11508: LD_INT 1
11510: PPUSH
11511: CALL_OW 324
// end ; 6 :
11515: GO 12525
11517: LD_INT 6
11519: DOUBLE
11520: EQUAL
11521: IFTRUE 11525
11523: GO 12450
11525: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11526: LD_INT 35
11528: PPUSH
11529: LD_VAR 0 3
11533: PPUSH
11534: LD_INT 1
11536: PPUSH
11537: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11541: LD_INT 45
11543: PPUSH
11544: LD_VAR 0 3
11548: PPUSH
11549: LD_INT 1
11551: PPUSH
11552: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11556: LD_INT 46
11558: PPUSH
11559: LD_VAR 0 3
11563: PPUSH
11564: LD_INT 1
11566: PPUSH
11567: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11571: LD_INT 47
11573: PPUSH
11574: LD_VAR 0 3
11578: PPUSH
11579: LD_INT 1
11581: PPUSH
11582: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11586: LD_INT 1
11588: PPUSH
11589: LD_VAR 0 3
11593: PPUSH
11594: LD_INT 1
11596: PPUSH
11597: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11601: LD_INT 2
11603: PPUSH
11604: LD_VAR 0 3
11608: PPUSH
11609: LD_INT 1
11611: PPUSH
11612: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11616: LD_INT 11
11618: PPUSH
11619: LD_VAR 0 3
11623: PPUSH
11624: LD_INT 1
11626: PPUSH
11627: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11631: LD_INT 20
11633: PPUSH
11634: LD_VAR 0 3
11638: PPUSH
11639: LD_INT 1
11641: PPUSH
11642: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11646: LD_INT 48
11648: PPUSH
11649: LD_VAR 0 3
11653: PPUSH
11654: LD_INT 1
11656: PPUSH
11657: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11661: LD_INT 49
11663: PPUSH
11664: LD_VAR 0 3
11668: PPUSH
11669: LD_INT 1
11671: PPUSH
11672: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
11676: LD_INT 50
11678: PPUSH
11679: LD_VAR 0 3
11683: PPUSH
11684: LD_INT 1
11686: PPUSH
11687: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11691: LD_INT 69
11693: PPUSH
11694: LD_VAR 0 3
11698: PPUSH
11699: LD_INT 1
11701: PPUSH
11702: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11706: LD_INT 39
11708: PPUSH
11709: LD_VAR 0 3
11713: PPUSH
11714: LD_INT 1
11716: PPUSH
11717: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11721: LD_INT 34
11723: PPUSH
11724: LD_VAR 0 3
11728: PPUSH
11729: LD_INT 1
11731: PPUSH
11732: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11736: LD_INT 42
11738: PPUSH
11739: LD_VAR 0 3
11743: PPUSH
11744: LD_INT 1
11746: PPUSH
11747: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11751: LD_INT 44
11753: PPUSH
11754: LD_VAR 0 3
11758: PPUSH
11759: LD_INT 1
11761: PPUSH
11762: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11766: LD_INT 41
11768: PPUSH
11769: LD_VAR 0 3
11773: PPUSH
11774: LD_INT 1
11776: PPUSH
11777: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
11781: LD_INT 13
11783: PPUSH
11784: LD_VAR 0 3
11788: PPUSH
11789: LD_INT 1
11791: PPUSH
11792: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11796: LD_INT 40
11798: PPUSH
11799: LD_VAR 0 3
11803: PPUSH
11804: LD_INT 1
11806: PPUSH
11807: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11811: LD_INT 43
11813: PPUSH
11814: LD_VAR 0 3
11818: PPUSH
11819: LD_INT 1
11821: PPUSH
11822: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11826: LD_INT 70
11828: PPUSH
11829: LD_VAR 0 3
11833: PPUSH
11834: LD_INT 1
11836: PPUSH
11837: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
11841: LD_INT 23
11843: PPUSH
11844: LD_VAR 0 3
11848: PPUSH
11849: LD_INT 1
11851: PPUSH
11852: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11856: LD_INT 51
11858: PPUSH
11859: LD_VAR 0 3
11863: PPUSH
11864: LD_INT 1
11866: PPUSH
11867: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11871: LD_INT 52
11873: PPUSH
11874: LD_VAR 0 3
11878: PPUSH
11879: LD_INT 1
11881: PPUSH
11882: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11886: LD_INT 6
11888: PPUSH
11889: LD_VAR 0 3
11893: PPUSH
11894: LD_INT 1
11896: PPUSH
11897: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11901: LD_INT 15
11903: PPUSH
11904: LD_VAR 0 3
11908: PPUSH
11909: LD_INT 1
11911: PPUSH
11912: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11916: LD_INT 7
11918: PPUSH
11919: LD_VAR 0 3
11923: PPUSH
11924: LD_INT 1
11926: PPUSH
11927: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11931: LD_INT 12
11933: PPUSH
11934: LD_VAR 0 3
11938: PPUSH
11939: LD_INT 1
11941: PPUSH
11942: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
11946: LD_INT 10
11948: PPUSH
11949: LD_VAR 0 3
11953: PPUSH
11954: LD_INT 1
11956: PPUSH
11957: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11961: LD_INT 17
11963: PPUSH
11964: LD_VAR 0 3
11968: PPUSH
11969: LD_INT 1
11971: PPUSH
11972: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11976: LD_INT 18
11978: PPUSH
11979: LD_VAR 0 3
11983: PPUSH
11984: LD_INT 1
11986: PPUSH
11987: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11991: LD_INT 60
11993: PPUSH
11994: LD_VAR 0 3
11998: PPUSH
11999: LD_INT 1
12001: PPUSH
12002: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
12006: LD_INT 61
12008: PPUSH
12009: LD_VAR 0 3
12013: PPUSH
12014: LD_INT 1
12016: PPUSH
12017: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12021: LD_INT 32
12023: PPUSH
12024: LD_VAR 0 3
12028: PPUSH
12029: LD_INT 1
12031: PPUSH
12032: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
12036: LD_INT 27
12038: PPUSH
12039: LD_VAR 0 3
12043: PPUSH
12044: LD_INT 1
12046: PPUSH
12047: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
12051: LD_INT 36
12053: PPUSH
12054: LD_VAR 0 3
12058: PPUSH
12059: LD_INT 1
12061: PPUSH
12062: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
12066: LD_INT 33
12068: PPUSH
12069: LD_VAR 0 3
12073: PPUSH
12074: LD_INT 1
12076: PPUSH
12077: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12081: LD_INT 9
12083: PPUSH
12084: LD_VAR 0 3
12088: PPUSH
12089: LD_INT 1
12091: PPUSH
12092: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
12096: LD_INT 38
12098: PPUSH
12099: LD_VAR 0 3
12103: PPUSH
12104: LD_INT 1
12106: PPUSH
12107: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12111: LD_INT 57
12113: PPUSH
12114: LD_VAR 0 3
12118: PPUSH
12119: LD_INT 1
12121: PPUSH
12122: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
12126: LD_INT 58
12128: PPUSH
12129: LD_VAR 0 3
12133: PPUSH
12134: LD_INT 1
12136: PPUSH
12137: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
12141: LD_INT 28
12143: PPUSH
12144: LD_VAR 0 3
12148: PPUSH
12149: LD_INT 1
12151: PPUSH
12152: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
12156: LD_INT 29
12158: PPUSH
12159: LD_VAR 0 3
12163: PPUSH
12164: LD_INT 1
12166: PPUSH
12167: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12171: LD_INT 30
12173: PPUSH
12174: LD_VAR 0 3
12178: PPUSH
12179: LD_INT 1
12181: PPUSH
12182: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12186: LD_INT 37
12188: PPUSH
12189: LD_VAR 0 3
12193: PPUSH
12194: LD_INT 1
12196: PPUSH
12197: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12201: LD_INT 63
12203: PPUSH
12204: LD_VAR 0 3
12208: PPUSH
12209: LD_INT 1
12211: PPUSH
12212: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
12216: LD_INT 64
12218: PPUSH
12219: LD_VAR 0 3
12223: PPUSH
12224: LD_INT 1
12226: PPUSH
12227: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12231: LD_INT 3
12233: PPUSH
12234: LD_VAR 0 3
12238: PPUSH
12239: LD_INT 1
12241: PPUSH
12242: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12246: LD_INT 4
12248: PPUSH
12249: LD_VAR 0 3
12253: PPUSH
12254: LD_INT 1
12256: PPUSH
12257: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12261: LD_INT 5
12263: PPUSH
12264: LD_VAR 0 3
12268: PPUSH
12269: LD_INT 1
12271: PPUSH
12272: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
12276: LD_INT 8
12278: PPUSH
12279: LD_VAR 0 3
12283: PPUSH
12284: LD_INT 1
12286: PPUSH
12287: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12291: LD_INT 66
12293: PPUSH
12294: LD_VAR 0 3
12298: PPUSH
12299: LD_INT 1
12301: PPUSH
12302: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
12306: LD_INT 67
12308: PPUSH
12309: LD_VAR 0 3
12313: PPUSH
12314: LD_INT 1
12316: PPUSH
12317: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12321: LD_INT 21
12323: PPUSH
12324: LD_VAR 0 3
12328: PPUSH
12329: LD_INT 1
12331: PPUSH
12332: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12336: LD_INT 22
12338: PPUSH
12339: LD_VAR 0 3
12343: PPUSH
12344: LD_INT 1
12346: PPUSH
12347: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12351: LD_INT 19
12353: PPUSH
12354: LD_VAR 0 3
12358: PPUSH
12359: LD_INT 1
12361: PPUSH
12362: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
12366: LD_INT 26
12368: PPUSH
12369: LD_VAR 0 3
12373: PPUSH
12374: LD_INT 1
12376: PPUSH
12377: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12381: LD_INT 54
12383: PPUSH
12384: LD_VAR 0 3
12388: PPUSH
12389: LD_INT 1
12391: PPUSH
12392: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12396: LD_INT 55
12398: PPUSH
12399: LD_VAR 0 3
12403: PPUSH
12404: LD_INT 1
12406: PPUSH
12407: CALL_OW 322
// for i = 0 to 39 do
12411: LD_ADDR_VAR 0 4
12415: PUSH
12416: DOUBLE
12417: LD_INT 0
12419: DEC
12420: ST_TO_ADDR
12421: LD_INT 39
12423: PUSH
12424: FOR_TO
12425: IFFALSE 12446
// SetRestrict ( i , side , true ) ;
12427: LD_VAR 0 4
12431: PPUSH
12432: LD_VAR 0 3
12436: PPUSH
12437: LD_INT 1
12439: PPUSH
12440: CALL_OW 324
12444: GO 12424
12446: POP
12447: POP
// end ; else
12448: GO 12525
12450: POP
// begin for i = 1 to 73 do
12451: LD_ADDR_VAR 0 4
12455: PUSH
12456: DOUBLE
12457: LD_INT 1
12459: DEC
12460: ST_TO_ADDR
12461: LD_INT 73
12463: PUSH
12464: FOR_TO
12465: IFFALSE 12486
// SetTech ( i , side , state_enabled ) ;
12467: LD_VAR 0 4
12471: PPUSH
12472: LD_VAR 0 3
12476: PPUSH
12477: LD_INT 1
12479: PPUSH
12480: CALL_OW 322
12484: GO 12464
12486: POP
12487: POP
// for i = 0 to 39 do
12488: LD_ADDR_VAR 0 4
12492: PUSH
12493: DOUBLE
12494: LD_INT 0
12496: DEC
12497: ST_TO_ADDR
12498: LD_INT 39
12500: PUSH
12501: FOR_TO
12502: IFFALSE 12523
// SetRestrict ( i , side , true ) ;
12504: LD_VAR 0 4
12508: PPUSH
12509: LD_VAR 0 3
12513: PPUSH
12514: LD_INT 1
12516: PPUSH
12517: CALL_OW 324
12521: GO 12501
12523: POP
12524: POP
// end ; end ; end ;
12525: GO 8530
12527: POP
12528: POP
// end ; end_of_file
12529: LD_VAR 0 2
12533: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
12534: LD_INT 0
12536: PPUSH
12537: PPUSH
12538: PPUSH
12539: PPUSH
12540: PPUSH
12541: PPUSH
12542: PPUSH
12543: PPUSH
12544: PPUSH
// for i := 1 to 8 do
12545: LD_ADDR_VAR 0 2
12549: PUSH
12550: DOUBLE
12551: LD_INT 1
12553: DEC
12554: ST_TO_ADDR
12555: LD_INT 8
12557: PUSH
12558: FOR_TO
12559: IFFALSE 12943
// begin if Side_Positions [ i ] then
12561: LD_EXP 34
12565: PUSH
12566: LD_VAR 0 2
12570: ARRAY
12571: IFFALSE 12941
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
12573: LD_ADDR_VAR 0 7
12577: PUSH
12578: LD_INT 22
12580: PUSH
12581: LD_VAR 0 2
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: PUSH
12590: LD_INT 21
12592: PUSH
12593: LD_INT 1
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: PPUSH
12604: CALL_OW 69
12608: PUSH
12609: LD_INT 0
12611: PLUS
12612: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12613: LD_ADDR_VAR 0 9
12617: PUSH
12618: LD_INT 22
12620: PUSH
12621: LD_VAR 0 2
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: PUSH
12630: LD_INT 2
12632: PUSH
12633: LD_INT 30
12635: PUSH
12636: LD_INT 0
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: PUSH
12643: LD_INT 30
12645: PUSH
12646: LD_INT 1
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: LIST
12657: PUSH
12658: EMPTY
12659: LIST
12660: LIST
12661: PPUSH
12662: CALL_OW 69
12666: ST_TO_ADDR
// crates := 0 ;
12667: LD_ADDR_VAR 0 4
12671: PUSH
12672: LD_INT 0
12674: ST_TO_ADDR
// oil := 0 ;
12675: LD_ADDR_VAR 0 5
12679: PUSH
12680: LD_INT 0
12682: ST_TO_ADDR
// sib := 0 ;
12683: LD_ADDR_VAR 0 6
12687: PUSH
12688: LD_INT 0
12690: ST_TO_ADDR
// if bases then
12691: LD_VAR 0 9
12695: IFFALSE 12801
// begin for j in bases do
12697: LD_ADDR_VAR 0 3
12701: PUSH
12702: LD_VAR 0 9
12706: PUSH
12707: FOR_IN
12708: IFFALSE 12799
// begin base := GetBase ( j ) ;
12710: LD_ADDR_VAR 0 8
12714: PUSH
12715: LD_VAR 0 3
12719: PPUSH
12720: CALL_OW 274
12724: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
12725: LD_ADDR_VAR 0 4
12729: PUSH
12730: LD_VAR 0 4
12734: PUSH
12735: LD_VAR 0 8
12739: PPUSH
12740: LD_INT 1
12742: PPUSH
12743: CALL_OW 275
12747: PLUS
12748: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
12749: LD_ADDR_VAR 0 5
12753: PUSH
12754: LD_VAR 0 5
12758: PUSH
12759: LD_VAR 0 8
12763: PPUSH
12764: LD_INT 2
12766: PPUSH
12767: CALL_OW 275
12771: PLUS
12772: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
12773: LD_ADDR_VAR 0 6
12777: PUSH
12778: LD_VAR 0 6
12782: PUSH
12783: LD_VAR 0 8
12787: PPUSH
12788: LD_INT 3
12790: PPUSH
12791: CALL_OW 275
12795: PLUS
12796: ST_TO_ADDR
// end ;
12797: GO 12707
12799: POP
12800: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
12801: LD_STRING setSpecText(
12803: PUSH
12804: LD_VAR 0 2
12808: STR
12809: PUSH
12810: LD_STRING ,
12812: STR
12813: PUSH
12814: LD_INT 2
12816: STR
12817: PUSH
12818: LD_STRING ,
12820: STR
12821: PUSH
12822: LD_VAR 0 4
12826: STR
12827: PUSH
12828: LD_STRING )
12830: STR
12831: PPUSH
12832: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
12836: LD_STRING setSpecText(
12838: PUSH
12839: LD_VAR 0 2
12843: STR
12844: PUSH
12845: LD_STRING ,
12847: STR
12848: PUSH
12849: LD_INT 3
12851: STR
12852: PUSH
12853: LD_STRING ,
12855: STR
12856: PUSH
12857: LD_VAR 0 5
12861: STR
12862: PUSH
12863: LD_STRING )
12865: STR
12866: PPUSH
12867: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
12871: LD_STRING setSpecText(
12873: PUSH
12874: LD_VAR 0 2
12878: STR
12879: PUSH
12880: LD_STRING ,
12882: STR
12883: PUSH
12884: LD_INT 4
12886: STR
12887: PUSH
12888: LD_STRING ,
12890: STR
12891: PUSH
12892: LD_VAR 0 6
12896: STR
12897: PUSH
12898: LD_STRING )
12900: STR
12901: PPUSH
12902: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
12906: LD_STRING setSpecText(
12908: PUSH
12909: LD_VAR 0 2
12913: STR
12914: PUSH
12915: LD_STRING ,
12917: STR
12918: PUSH
12919: LD_INT 5
12921: STR
12922: PUSH
12923: LD_STRING ,
12925: STR
12926: PUSH
12927: LD_VAR 0 7
12931: STR
12932: PUSH
12933: LD_STRING )
12935: STR
12936: PPUSH
12937: CALL_OW 559
// end ; end ;
12941: GO 12558
12943: POP
12944: POP
// end ;
12945: LD_VAR 0 1
12949: RET
// every 0 0$1 do
12950: GO 12952
12952: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
12953: LD_STRING setSpecLogoNumber(
12955: PUSH
12956: LD_INT 2
12958: STR
12959: PUSH
12960: LD_STRING ,
12962: STR
12963: PUSH
12964: LD_INT 1
12966: STR
12967: PUSH
12968: LD_STRING )
12970: STR
12971: PPUSH
12972: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
12976: LD_STRING setSpecLogoNumber(
12978: PUSH
12979: LD_INT 3
12981: STR
12982: PUSH
12983: LD_STRING ,
12985: STR
12986: PUSH
12987: LD_INT 2
12989: STR
12990: PUSH
12991: LD_STRING )
12993: STR
12994: PPUSH
12995: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
12999: LD_STRING setSpecLogoNumber(
13001: PUSH
13002: LD_INT 4
13004: STR
13005: PUSH
13006: LD_STRING ,
13008: STR
13009: PUSH
13010: LD_INT 3
13012: STR
13013: PUSH
13014: LD_STRING )
13016: STR
13017: PPUSH
13018: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
13022: LD_STRING setSpecLogoNumber(
13024: PUSH
13025: LD_INT 5
13027: STR
13028: PUSH
13029: LD_STRING ,
13031: STR
13032: PUSH
13033: LD_INT 4
13035: STR
13036: PUSH
13037: LD_STRING )
13039: STR
13040: PPUSH
13041: CALL_OW 559
// end ;
13045: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
13046: LD_INT 2
13048: PUSH
13049: LD_INT 30
13051: PUSH
13052: LD_INT 0
13054: PUSH
13055: EMPTY
13056: LIST
13057: LIST
13058: PUSH
13059: LD_INT 30
13061: PUSH
13062: LD_INT 1
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: PUSH
13069: EMPTY
13070: LIST
13071: LIST
13072: LIST
13073: PPUSH
13074: CALL_OW 69
13078: IFFALSE 13088
13080: GO 13082
13082: DISABLE
// begin enable ;
13083: ENABLE
// UpdateSpectatorBar ;
13084: CALL 12534 0 0
// end ; end_of_file
13088: END
// var respawn , inqueue ; export function init_respawning ; begin
13089: LD_INT 0
13091: PPUSH
// respawn := Rand ( 1 , 8 ) ;
13092: LD_ADDR_LOC 11
13096: PUSH
13097: LD_INT 1
13099: PPUSH
13100: LD_INT 8
13102: PPUSH
13103: CALL_OW 12
13107: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13108: LD_ADDR_LOC 12
13112: PUSH
13113: LD_INT 0
13115: PUSH
13116: LD_INT 0
13118: PUSH
13119: LD_INT 0
13121: PUSH
13122: LD_INT 0
13124: PUSH
13125: LD_INT 0
13127: PUSH
13128: LD_INT 0
13130: PUSH
13131: LD_INT 0
13133: PUSH
13134: LD_INT 0
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: ST_TO_ADDR
// end ;
13147: LD_VAR 0 1
13151: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
13152: GO 13154
13154: DISABLE
13155: LD_INT 0
13157: PPUSH
13158: PPUSH
13159: PPUSH
// begin if respawning_time_max = 0 then
13160: LD_EXP 26
13164: PUSH
13165: LD_INT 0
13167: EQUAL
13168: IFFALSE 13172
// exit ;
13170: GO 13580
// if respawn = 8 then
13172: LD_LOC 11
13176: PUSH
13177: LD_INT 8
13179: EQUAL
13180: IFFALSE 13192
// respawn := 1 else
13182: LD_ADDR_LOC 11
13186: PUSH
13187: LD_INT 1
13189: ST_TO_ADDR
13190: GO 13206
// respawn := respawn + 1 ;
13192: LD_ADDR_LOC 11
13196: PUSH
13197: LD_LOC 11
13201: PUSH
13202: LD_INT 1
13204: PLUS
13205: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
13206: LD_EXP 34
13210: PUSH
13211: LD_LOC 11
13215: ARRAY
13216: PUSH
13217: LD_LOC 12
13221: PUSH
13222: LD_LOC 11
13226: ARRAY
13227: NOT
13228: AND
13229: IFFALSE 13579
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
13231: LD_ADDR_VAR 0 1
13235: PUSH
13236: LD_INT 21
13238: PUSH
13239: LD_INT 1
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: PUSH
13246: LD_INT 22
13248: PUSH
13249: LD_LOC 11
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: PUSH
13258: LD_INT 3
13260: PUSH
13261: LD_INT 23
13263: PUSH
13264: LD_INT 0
13266: PUSH
13267: EMPTY
13268: LIST
13269: LIST
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: PPUSH
13277: CALL_OW 69
13281: ST_TO_ADDR
// if n < number_of_people then
13282: LD_VAR 0 1
13286: PUSH
13287: LD_EXP 17
13291: LESS
13292: IFFALSE 13576
// begin aktresp := respawn ;
13294: LD_ADDR_VAR 0 3
13298: PUSH
13299: LD_LOC 11
13303: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
13304: LD_ADDR_LOC 12
13308: PUSH
13309: LD_LOC 12
13313: PPUSH
13314: LD_VAR 0 3
13318: PPUSH
13319: LD_INT 1
13321: PPUSH
13322: CALL_OW 1
13326: ST_TO_ADDR
// enable ;
13327: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
13328: LD_EXP 25
13332: PPUSH
13333: LD_EXP 26
13337: PPUSH
13338: CALL_OW 12
13342: PPUSH
13343: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
13347: LD_ADDR_LOC 12
13351: PUSH
13352: LD_LOC 12
13356: PPUSH
13357: LD_VAR 0 3
13361: PPUSH
13362: LD_INT 0
13364: PPUSH
13365: CALL_OW 1
13369: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
13370: LD_ADDR_VAR 0 2
13374: PUSH
13375: LD_INT 21
13377: PUSH
13378: LD_INT 3
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PUSH
13385: LD_INT 2
13387: PUSH
13388: LD_INT 30
13390: PUSH
13391: LD_INT 0
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: PUSH
13398: LD_INT 30
13400: PUSH
13401: LD_INT 1
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: LIST
13412: PUSH
13413: LD_INT 50
13415: PUSH
13416: EMPTY
13417: LIST
13418: PUSH
13419: LD_INT 22
13421: PUSH
13422: LD_VAR 0 3
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: PPUSH
13437: CALL_OW 69
13441: ST_TO_ADDR
// if dep = 0 then
13442: LD_VAR 0 2
13446: PUSH
13447: LD_INT 0
13449: EQUAL
13450: IFFALSE 13454
// exit ;
13452: GO 13580
// hc_name :=  ;
13454: LD_ADDR_OWVAR 26
13458: PUSH
13459: LD_STRING 
13461: ST_TO_ADDR
// hc_importance := 0 ;
13462: LD_ADDR_OWVAR 32
13466: PUSH
13467: LD_INT 0
13469: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
13470: LD_INT 0
13472: PPUSH
13473: LD_INT 0
13475: PPUSH
13476: LD_EXP 18
13480: PUSH
13481: LD_INT 2
13483: DIV
13484: PPUSH
13485: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
13489: LD_ADDR_OWVAR 21
13493: PUSH
13494: LD_EXP 35
13498: PUSH
13499: LD_VAR 0 3
13503: ARRAY
13504: ST_TO_ADDR
// uc_side := aktresp ;
13505: LD_ADDR_OWVAR 20
13509: PUSH
13510: LD_VAR 0 3
13514: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
13515: LD_ADDR_VAR 0 2
13519: PUSH
13520: LD_VAR 0 2
13524: PUSH
13525: LD_INT 1
13527: PPUSH
13528: LD_VAR 0 2
13532: PPUSH
13533: CALL_OW 12
13537: ARRAY
13538: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
13539: CALL_OW 44
13543: PPUSH
13544: LD_VAR 0 2
13548: PPUSH
13549: CALL_OW 250
13553: PPUSH
13554: LD_VAR 0 2
13558: PPUSH
13559: CALL_OW 251
13563: PPUSH
13564: LD_INT 7
13566: PPUSH
13567: LD_INT 1
13569: PPUSH
13570: CALL_OW 50
// end else
13574: GO 13577
// enable ;
13576: ENABLE
// end else
13577: GO 13580
// enable ;
13579: ENABLE
// end ; end_of_file
13580: PPOPN 3
13582: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
13583: LD_INT 0
13585: PPUSH
13586: PPUSH
13587: PPUSH
// BuildUpTime_Delay = 0 ;
13588: LD_ADDR_EXP 58
13592: PUSH
13593: LD_INT 0
13595: ST_TO_ADDR
// if not def_builduptime then
13596: LD_EXP 14
13600: NOT
13601: IFFALSE 13605
// exit ;
13603: GO 13788
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
13605: LD_ADDR_EXP 58
13609: PUSH
13610: LD_INT 8400
13612: PUSH
13613: LD_INT 2100
13615: PUSH
13616: LD_EXP 14
13620: MUL
13621: PLUS
13622: ST_TO_ADDR
// BuildUpTimeActive := true ;
13623: LD_ADDR_EXP 57
13627: PUSH
13628: LD_INT 1
13630: ST_TO_ADDR
// for i := 1 to 8 do
13631: LD_ADDR_VAR 0 2
13635: PUSH
13636: DOUBLE
13637: LD_INT 1
13639: DEC
13640: ST_TO_ADDR
13641: LD_INT 8
13643: PUSH
13644: FOR_TO
13645: IFFALSE 13786
// if Side_Positions [ i ] then
13647: LD_EXP 34
13651: PUSH
13652: LD_VAR 0 2
13656: ARRAY
13657: IFFALSE 13784
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
13659: LD_EXP 56
13663: PUSH
13664: LD_EXP 34
13668: PUSH
13669: LD_VAR 0 2
13673: ARRAY
13674: ARRAY
13675: PPUSH
13676: LD_INT 5
13678: PPUSH
13679: CALL_OW 424
// for j := 1 to 8 do
13683: LD_ADDR_VAR 0 3
13687: PUSH
13688: DOUBLE
13689: LD_INT 1
13691: DEC
13692: ST_TO_ADDR
13693: LD_INT 8
13695: PUSH
13696: FOR_TO
13697: IFFALSE 13782
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
13699: LD_EXP 34
13703: PUSH
13704: LD_VAR 0 3
13708: ARRAY
13709: PUSH
13710: LD_EXP 32
13714: PUSH
13715: LD_VAR 0 2
13719: ARRAY
13720: PUSH
13721: LD_EXP 32
13725: PUSH
13726: LD_VAR 0 3
13730: ARRAY
13731: NONEQUAL
13732: PUSH
13733: LD_EXP 38
13737: NOT
13738: PUSH
13739: LD_VAR 0 2
13743: PUSH
13744: LD_VAR 0 3
13748: NONEQUAL
13749: AND
13750: OR
13751: AND
13752: IFFALSE 13780
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
13754: LD_VAR 0 3
13758: PPUSH
13759: LD_EXP 56
13763: PUSH
13764: LD_EXP 34
13768: PUSH
13769: LD_VAR 0 2
13773: ARRAY
13774: ARRAY
13775: PPUSH
13776: CALL_OW 333
13780: GO 13696
13782: POP
13783: POP
// end ;
13784: GO 13644
13786: POP
13787: POP
// end ;
13788: LD_VAR 0 1
13792: RET
// export function EndBuildUp ; var i , j ; begin
13793: LD_INT 0
13795: PPUSH
13796: PPUSH
13797: PPUSH
// BuildUpTimeActive := false ;
13798: LD_ADDR_EXP 57
13802: PUSH
13803: LD_INT 0
13805: ST_TO_ADDR
// for i := 1 to 8 do
13806: LD_ADDR_VAR 0 2
13810: PUSH
13811: DOUBLE
13812: LD_INT 1
13814: DEC
13815: ST_TO_ADDR
13816: LD_INT 8
13818: PUSH
13819: FOR_TO
13820: IFFALSE 13961
// if Side_Positions [ i ] then
13822: LD_EXP 34
13826: PUSH
13827: LD_VAR 0 2
13831: ARRAY
13832: IFFALSE 13959
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
13834: LD_EXP 56
13838: PUSH
13839: LD_EXP 34
13843: PUSH
13844: LD_VAR 0 2
13848: ARRAY
13849: ARRAY
13850: PPUSH
13851: LD_INT 0
13853: PPUSH
13854: CALL_OW 424
// for j := 1 to 8 do
13858: LD_ADDR_VAR 0 3
13862: PUSH
13863: DOUBLE
13864: LD_INT 1
13866: DEC
13867: ST_TO_ADDR
13868: LD_INT 8
13870: PUSH
13871: FOR_TO
13872: IFFALSE 13957
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
13874: LD_EXP 34
13878: PUSH
13879: LD_VAR 0 3
13883: ARRAY
13884: PUSH
13885: LD_EXP 32
13889: PUSH
13890: LD_VAR 0 2
13894: ARRAY
13895: PUSH
13896: LD_EXP 32
13900: PUSH
13901: LD_VAR 0 3
13905: ARRAY
13906: NONEQUAL
13907: PUSH
13908: LD_EXP 38
13912: NOT
13913: PUSH
13914: LD_VAR 0 2
13918: PUSH
13919: LD_VAR 0 3
13923: NONEQUAL
13924: AND
13925: OR
13926: AND
13927: IFFALSE 13955
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
13929: LD_VAR 0 3
13933: PPUSH
13934: LD_EXP 56
13938: PUSH
13939: LD_EXP 34
13943: PUSH
13944: LD_VAR 0 2
13948: ARRAY
13949: ARRAY
13950: PPUSH
13951: CALL_OW 334
13955: GO 13871
13957: POP
13958: POP
// end ;
13959: GO 13819
13961: POP
13962: POP
// end ;
13963: LD_VAR 0 1
13967: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
13968: LD_EXP 57
13972: IFFALSE 14147
13974: GO 13976
13976: DISABLE
13977: LD_INT 0
13979: PPUSH
13980: PPUSH
// begin for i := 1 to 8 do
13981: LD_ADDR_VAR 0 1
13985: PUSH
13986: DOUBLE
13987: LD_INT 1
13989: DEC
13990: ST_TO_ADDR
13991: LD_INT 8
13993: PUSH
13994: FOR_TO
13995: IFFALSE 14144
// if Side_Positions [ i ] then
13997: LD_EXP 34
14001: PUSH
14002: LD_VAR 0 1
14006: ARRAY
14007: IFFALSE 14142
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
14009: LD_ADDR_VAR 0 2
14013: PUSH
14014: LD_EXP 56
14018: PUSH
14019: LD_EXP 34
14023: PUSH
14024: LD_VAR 0 1
14028: ARRAY
14029: ARRAY
14030: PPUSH
14031: LD_INT 2
14033: PUSH
14034: LD_INT 21
14036: PUSH
14037: LD_INT 1
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: PUSH
14044: LD_INT 21
14046: PUSH
14047: LD_INT 2
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: LIST
14058: PUSH
14059: LD_INT 22
14061: PUSH
14062: LD_OWVAR 2
14066: PUSH
14067: EMPTY
14068: LIST
14069: LIST
14070: PUSH
14071: EMPTY
14072: LIST
14073: LIST
14074: PPUSH
14075: CALL_OW 70
14079: PUSH
14080: FOR_IN
14081: IFFALSE 14140
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
14083: LD_EXP 32
14087: PUSH
14088: LD_VAR 0 1
14092: ARRAY
14093: PUSH
14094: LD_EXP 32
14098: PUSH
14099: LD_OWVAR 2
14103: ARRAY
14104: NONEQUAL
14105: PUSH
14106: LD_EXP 38
14110: NOT
14111: PUSH
14112: LD_VAR 0 1
14116: PUSH
14117: LD_OWVAR 2
14121: NONEQUAL
14122: AND
14123: OR
14124: IFFALSE 14138
// ComMoveToArea ( un , BuildUpEscape ) ;
14126: LD_VAR 0 2
14130: PPUSH
14131: LD_INT 16
14133: PPUSH
14134: CALL_OW 113
14138: GO 14080
14140: POP
14141: POP
14142: GO 13994
14144: POP
14145: POP
// enable ;
14146: ENABLE
// end ;
14147: PPOPN 2
14149: END
// every 0 0$1 trigger def_builduptime do
14150: LD_EXP 14
14154: IFFALSE 14180
14156: GO 14158
14158: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
14159: LD_INT 8400
14161: PUSH
14162: LD_EXP 14
14166: PUSH
14167: LD_INT 2100
14169: MUL
14170: PLUS
14171: PPUSH
14172: CALL_OW 67
// EndBuildUp ;
14176: CALL 13793 0 0
// end ;
14180: END
