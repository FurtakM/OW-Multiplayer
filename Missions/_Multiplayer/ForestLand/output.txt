// export Game_Type ; export def_base_level , def_amount_of_people , def_initial_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_amount_of_apemen , def_people_respawning , def_siberite_bomb ; export is_depot , number_of_breastworks , number_of_people , initial_level , amount_of_apemen , starting_crates , starting_resources , shipments_density , siberite_bomb_Delay , spawning_koef_of_apemen , respawning_time_min , respawning_time_max , def_win_rules , buildUpTime_Delay ; export Side_Count , Team_Count , Player_Side , Player_Team , Side_Teams , Teams ; export Side_Positions , Side_Nations , Side_Names , Team_Names , Team_Game , Side_Comps ; export depot_def , start_def , extra_oil_deposits_locations ; export heroes ; export commander , battle_flags_id , morale_decreasing_time ; var global_units , global_defined , soldiers_created ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function create_forest ; var area ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
// PlaceTreesToArea ( BigForest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , Rand ( 500 , 570 ) , 50 , 2 ) ;
  72: LD_INT 6
  74: PPUSH
  75: LD_INT 21
  77: PUSH
  78: LD_INT 22
  80: PUSH
  81: LD_INT 24
  83: PUSH
  84: LD_INT 21
  86: PUSH
  87: LD_INT 22
  89: PUSH
  90: LD_INT 24
  92: PUSH
  93: LD_INT 38
  95: PUSH
  96: LD_INT 39
  98: PUSH
  99: EMPTY
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: PPUSH
 109: LD_INT 500
 111: PPUSH
 112: LD_INT 570
 114: PPUSH
 115: CALL_OW 12
 119: PPUSH
 120: LD_INT 50
 122: PPUSH
 123: LD_INT 2
 125: PPUSH
 126: CALL_OW 352
// if def_base_level then
 130: LD_EXP 2
 134: IFFALSE 146
// area := bush_forest_small else
 136: LD_ADDR_VAR 0 2
 140: PUSH
 141: LD_INT 9
 143: ST_TO_ADDR
 144: GO 154
// area := bush_forest_big ;
 146: LD_ADDR_VAR 0 2
 150: PUSH
 151: LD_INT 8
 153: ST_TO_ADDR
// PlaceTreesToArea ( area , [ 38 , 39 , 37 ] , Rand ( 300 , 350 ) , 10 , 3 ) ;
 154: LD_VAR 0 2
 158: PPUSH
 159: LD_INT 38
 161: PUSH
 162: LD_INT 39
 164: PUSH
 165: LD_INT 37
 167: PUSH
 168: EMPTY
 169: LIST
 170: LIST
 171: LIST
 172: PPUSH
 173: LD_INT 300
 175: PPUSH
 176: LD_INT 350
 178: PPUSH
 179: CALL_OW 12
 183: PPUSH
 184: LD_INT 10
 186: PPUSH
 187: LD_INT 3
 189: PPUSH
 190: CALL_OW 352
// PlaceTreesToArea ( BigForest , [ 38 , 39 , 37 ] , 80 , 10 , 3 ) ;
 194: LD_INT 6
 196: PPUSH
 197: LD_INT 38
 199: PUSH
 200: LD_INT 39
 202: PUSH
 203: LD_INT 37
 205: PUSH
 206: EMPTY
 207: LIST
 208: LIST
 209: LIST
 210: PPUSH
 211: LD_INT 80
 213: PPUSH
 214: LD_INT 10
 216: PPUSH
 217: LD_INT 3
 219: PPUSH
 220: CALL_OW 352
// end ;
 224: LD_VAR 0 1
 228: RET
// function create_map_resources ; var un , oil_pos , sib_pos ; begin
 229: LD_INT 0
 231: PPUSH
 232: PPUSH
 233: PPUSH
 234: PPUSH
// oil_pos := [ [ 24 , 10 ] , [ 82 , 9 ] , [ 79 , 115 ] , [ 135 , 112 ] ] ;
 235: LD_ADDR_VAR 0 3
 239: PUSH
 240: LD_INT 24
 242: PUSH
 243: LD_INT 10
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: PUSH
 250: LD_INT 82
 252: PUSH
 253: LD_INT 9
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 79
 262: PUSH
 263: LD_INT 115
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 135
 272: PUSH
 273: LD_INT 112
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: PUSH
 280: EMPTY
 281: LIST
 282: LIST
 283: LIST
 284: LIST
 285: ST_TO_ADDR
// sib_pos := [ [ 24 , 29 ] , [ 102 , 29 ] , [ 60 , 93 ] , [ 134 , 91 ] ] ;
 286: LD_ADDR_VAR 0 4
 290: PUSH
 291: LD_INT 24
 293: PUSH
 294: LD_INT 29
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: PUSH
 301: LD_INT 102
 303: PUSH
 304: LD_INT 29
 306: PUSH
 307: EMPTY
 308: LIST
 309: LIST
 310: PUSH
 311: LD_INT 60
 313: PUSH
 314: LD_INT 93
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 134
 323: PUSH
 324: LD_INT 91
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: LIST
 335: LIST
 336: ST_TO_ADDR
// for un = 1 to 4 do
 337: LD_ADDR_VAR 0 2
 341: PUSH
 342: DOUBLE
 343: LD_INT 1
 345: DEC
 346: ST_TO_ADDR
 347: LD_INT 4
 349: PUSH
 350: FOR_TO
 351: IFFALSE 429
// begin CreateDepositXY ( oil_pos [ un ] [ 1 ] , oil_pos [ un ] [ 2 ] , mat_oil ) ;
 353: LD_VAR 0 3
 357: PUSH
 358: LD_VAR 0 2
 362: ARRAY
 363: PUSH
 364: LD_INT 1
 366: ARRAY
 367: PPUSH
 368: LD_VAR 0 3
 372: PUSH
 373: LD_VAR 0 2
 377: ARRAY
 378: PUSH
 379: LD_INT 2
 381: ARRAY
 382: PPUSH
 383: LD_INT 2
 385: PPUSH
 386: CALL_OW 62
// CreateDepositXY ( sib_pos [ un ] [ 1 ] , sib_pos [ un ] [ 2 ] , mat_siberit ) ;
 390: LD_VAR 0 4
 394: PUSH
 395: LD_VAR 0 2
 399: ARRAY
 400: PUSH
 401: LD_INT 1
 403: ARRAY
 404: PPUSH
 405: LD_VAR 0 4
 409: PUSH
 410: LD_VAR 0 2
 414: ARRAY
 415: PUSH
 416: LD_INT 2
 418: ARRAY
 419: PPUSH
 420: LD_INT 3
 422: PPUSH
 423: CALL_OW 62
// end ;
 427: GO 350
 429: POP
 430: POP
// end ;
 431: LD_VAR 0 1
 435: RET
// function init_map ; var i ; begin
 436: LD_INT 0
 438: PPUSH
 439: PPUSH
// extra_oil_deposits_locations := [ [ 38 , 6 ] , [ 67 , 6 ] , [ 94 , 115 ] , [ 116 , 99 ] ] ;
 440: LD_ADDR_EXP 42
 444: PUSH
 445: LD_INT 38
 447: PUSH
 448: LD_INT 6
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 67
 457: PUSH
 458: LD_INT 6
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: LD_INT 94
 467: PUSH
 468: LD_INT 115
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: LD_INT 116
 477: PUSH
 478: LD_INT 99
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: ST_TO_ADDR
// create_forest ;
 491: CALL 68 0 0
// create_map_resources ;
 495: CALL 229 0 0
// depot_def := [ [ 12 , 10 , 2 ] , [ 97 , 10 , 3 ] , [ 64 , 108 , 0 ] , [ 146 , 110 , 5 ] ] ;
 499: LD_ADDR_EXP 40
 503: PUSH
 504: LD_INT 12
 506: PUSH
 507: LD_INT 10
 509: PUSH
 510: LD_INT 2
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: LIST
 517: PUSH
 518: LD_INT 97
 520: PUSH
 521: LD_INT 10
 523: PUSH
 524: LD_INT 3
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: LIST
 531: PUSH
 532: LD_INT 64
 534: PUSH
 535: LD_INT 108
 537: PUSH
 538: LD_INT 0
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: LIST
 545: PUSH
 546: LD_INT 146
 548: PUSH
 549: LD_INT 110
 551: PUSH
 552: LD_INT 5
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: LIST
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: LIST
 565: ST_TO_ADDR
// if def_base_level then
 566: LD_EXP 2
 570: IFFALSE 625
// start_def := [ [ 16 , 14 ] , [ 96 , 13 ] , [ 65 , 105 ] , [ 141 , 105 ] ] else
 572: LD_ADDR_EXP 41
 576: PUSH
 577: LD_INT 16
 579: PUSH
 580: LD_INT 14
 582: PUSH
 583: EMPTY
 584: LIST
 585: LIST
 586: PUSH
 587: LD_INT 96
 589: PUSH
 590: LD_INT 13
 592: PUSH
 593: EMPTY
 594: LIST
 595: LIST
 596: PUSH
 597: LD_INT 65
 599: PUSH
 600: LD_INT 105
 602: PUSH
 603: EMPTY
 604: LIST
 605: LIST
 606: PUSH
 607: LD_INT 141
 609: PUSH
 610: LD_INT 105
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: ST_TO_ADDR
 623: GO 676
// start_def := [ [ 7 , 5 ] , [ 98 , 6 ] , [ 63 , 113 ] , [ 151 , 113 ] ] ;
 625: LD_ADDR_EXP 41
 629: PUSH
 630: LD_INT 7
 632: PUSH
 633: LD_INT 5
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: PUSH
 640: LD_INT 98
 642: PUSH
 643: LD_INT 6
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: PUSH
 650: LD_INT 63
 652: PUSH
 653: LD_INT 113
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: PUSH
 660: LD_INT 151
 662: PUSH
 663: LD_INT 113
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: ST_TO_ADDR
// end ;
 676: LD_VAR 0 1
 680: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
 681: LD_INT 0
 683: PPUSH
 684: PPUSH
 685: PPUSH
 686: PPUSH
 687: PPUSH
 688: PPUSH
 689: PPUSH
 690: PPUSH
 691: PPUSH
// if MultiPlayer then
 692: LD_OWVAR 4
 696: IFFALSE 780
// begin Game_Type = mp_game_type ;
 698: LD_ADDR_EXP 1
 702: PUSH
 703: LD_OWVAR 6
 707: ST_TO_ADDR
// Player_Side = mp_player_side ;
 708: LD_ADDR_EXP 30
 712: PUSH
 713: LD_OWVAR 7
 717: ST_TO_ADDR
// Player_Team = mp_player_team ;
 718: LD_ADDR_EXP 31
 722: PUSH
 723: LD_OWVAR 8
 727: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
 728: LD_ADDR_EXP 34
 732: PUSH
 733: LD_OWVAR 17
 737: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 738: LD_ADDR_EXP 32
 742: PUSH
 743: LD_OWVAR 15
 747: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 748: LD_ADDR_EXP 35
 752: PUSH
 753: LD_OWVAR 16
 757: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 758: LD_ADDR_EXP 39
 762: PUSH
 763: CALL 0 0 0
 767: ST_TO_ADDR
// Teams = mp_teams ;
 768: LD_ADDR_EXP 33
 772: PUSH
 773: LD_OWVAR 12
 777: ST_TO_ADDR
// end else
 778: GO 989
// begin Game_Type = 2 ;
 780: LD_ADDR_EXP 1
 784: PUSH
 785: LD_INT 2
 787: ST_TO_ADDR
// Player_Side = 4 ;
 788: LD_ADDR_EXP 30
 792: PUSH
 793: LD_INT 4
 795: ST_TO_ADDR
// Player_Team = 2 ;
 796: LD_ADDR_EXP 31
 800: PUSH
 801: LD_INT 2
 803: ST_TO_ADDR
// Side_Positions = [ 0 , 3 , 0 , 1 , 0 , 0 , 4 , 0 ] ;
 804: LD_ADDR_EXP 34
 808: PUSH
 809: LD_INT 0
 811: PUSH
 812: LD_INT 3
 814: PUSH
 815: LD_INT 0
 817: PUSH
 818: LD_INT 1
 820: PUSH
 821: LD_INT 0
 823: PUSH
 824: LD_INT 0
 826: PUSH
 827: LD_INT 4
 829: PUSH
 830: LD_INT 0
 832: PUSH
 833: EMPTY
 834: LIST
 835: LIST
 836: LIST
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: LIST
 842: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 2 , 0 , 1 , 2 , 0 ] ;
 843: LD_ADDR_EXP 32
 847: PUSH
 848: LD_INT 0
 850: PUSH
 851: LD_INT 1
 853: PUSH
 854: LD_INT 0
 856: PUSH
 857: LD_INT 2
 859: PUSH
 860: LD_INT 0
 862: PUSH
 863: LD_INT 1
 865: PUSH
 866: LD_INT 2
 868: PUSH
 869: LD_INT 0
 871: PUSH
 872: EMPTY
 873: LIST
 874: LIST
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 2 , 0 , 1 , 3 , 0 ] ;
 882: LD_ADDR_EXP 35
 886: PUSH
 887: LD_INT 0
 889: PUSH
 890: LD_INT 3
 892: PUSH
 893: LD_INT 0
 895: PUSH
 896: LD_INT 2
 898: PUSH
 899: LD_INT 0
 901: PUSH
 902: LD_INT 1
 904: PUSH
 905: LD_INT 3
 907: PUSH
 908: LD_INT 0
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: LIST
 915: LIST
 916: LIST
 917: LIST
 918: LIST
 919: LIST
 920: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 921: LD_ADDR_EXP 39
 925: PUSH
 926: LD_INT 0
 928: PUSH
 929: LD_INT 0
 931: PUSH
 932: LD_INT 0
 934: PUSH
 935: LD_INT 0
 937: PUSH
 938: LD_INT 0
 940: PUSH
 941: LD_INT 0
 943: PUSH
 944: LD_INT 0
 946: PUSH
 947: LD_INT 0
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: LIST
 954: LIST
 955: LIST
 956: LIST
 957: LIST
 958: LIST
 959: ST_TO_ADDR
// Teams = [ [ 2 , 7 ] , [ 6 , 4 ] ] ;
 960: LD_ADDR_EXP 33
 964: PUSH
 965: LD_INT 2
 967: PUSH
 968: LD_INT 7
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: PUSH
 975: LD_INT 6
 977: PUSH
 978: LD_INT 4
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PUSH
 985: EMPTY
 986: LIST
 987: LIST
 988: ST_TO_ADDR
// end ; Side_Count = ( Side_Positions diff [ 0 ] ) + 0 ;
 989: LD_ADDR_EXP 28
 993: PUSH
 994: LD_EXP 34
 998: PUSH
 999: LD_INT 0
1001: PUSH
1002: EMPTY
1003: LIST
1004: DIFF
1005: PUSH
1006: LD_INT 0
1008: PLUS
1009: ST_TO_ADDR
// Team_Count = ( Side_Teams diff [ 0 ] ) + 0 ;
1010: LD_ADDR_EXP 29
1014: PUSH
1015: LD_EXP 32
1019: PUSH
1020: LD_INT 0
1022: PUSH
1023: EMPTY
1024: LIST
1025: DIFF
1026: PUSH
1027: LD_INT 0
1029: PLUS
1030: ST_TO_ADDR
// if MultiPlayer then
1031: LD_OWVAR 4
1035: IFFALSE 1216
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
1037: LD_ADDR_EXP 2
1041: PUSH
1042: LD_INT 0
1044: PPUSH
1045: CALL_OW 426
1049: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
1050: LD_ADDR_EXP 3
1054: PUSH
1055: LD_INT 1
1057: PPUSH
1058: CALL_OW 426
1062: ST_TO_ADDR
// def_initial_level = GetMultiplayerSetting ( 2 ) ;
1063: LD_ADDR_EXP 4
1067: PUSH
1068: LD_INT 2
1070: PPUSH
1071: CALL_OW 426
1075: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
1076: LD_ADDR_EXP 5
1080: PUSH
1081: LD_INT 3
1083: PPUSH
1084: CALL_OW 426
1088: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
1089: LD_ADDR_EXP 6
1093: PUSH
1094: LD_INT 4
1096: PPUSH
1097: CALL_OW 426
1101: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
1102: LD_ADDR_EXP 7
1106: PUSH
1107: LD_INT 5
1109: PPUSH
1110: CALL_OW 426
1114: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
1115: LD_ADDR_EXP 8
1119: PUSH
1120: LD_INT 10
1122: PPUSH
1123: CALL_OW 426
1127: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
1128: LD_ADDR_EXP 9
1132: PUSH
1133: LD_INT 11
1135: PPUSH
1136: CALL_OW 426
1140: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
1141: LD_ADDR_EXP 10
1145: PUSH
1146: LD_INT 12
1148: PPUSH
1149: CALL_OW 426
1153: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
1154: LD_ADDR_EXP 11
1158: PUSH
1159: LD_INT 13
1161: PPUSH
1162: CALL_OW 426
1166: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
1167: LD_ADDR_EXP 12
1171: PUSH
1172: LD_INT 14
1174: PPUSH
1175: CALL_OW 426
1179: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
1180: LD_ADDR_EXP 13
1184: PUSH
1185: LD_INT 15
1187: PPUSH
1188: CALL_OW 426
1192: ST_TO_ADDR
// def_win_rules = 0 ;
1193: LD_ADDR_EXP 26
1197: PUSH
1198: LD_INT 0
1200: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
1201: LD_ADDR_VAR 0 9
1205: PUSH
1206: LD_INT 22
1208: PPUSH
1209: CALL_OW 426
1213: ST_TO_ADDR
// end else
1214: GO 1332
// begin randomize ;
1216: CALL_OW 10
// def_base_level = 0 ;
1220: LD_ADDR_EXP 2
1224: PUSH
1225: LD_INT 0
1227: ST_TO_ADDR
// def_amount_of_people = 1 ;
1228: LD_ADDR_EXP 3
1232: PUSH
1233: LD_INT 1
1235: ST_TO_ADDR
// def_initial_level = 1 ;
1236: LD_ADDR_EXP 4
1240: PUSH
1241: LD_INT 1
1243: ST_TO_ADDR
// def_starting_resources = 2 ;
1244: LD_ADDR_EXP 5
1248: PUSH
1249: LD_INT 2
1251: ST_TO_ADDR
// def_shipments_density = 1 ;
1252: LD_ADDR_EXP 6
1256: PUSH
1257: LD_INT 1
1259: ST_TO_ADDR
// def_extra_oil_deposits = 0 ;
1260: LD_ADDR_EXP 7
1264: PUSH
1265: LD_INT 0
1267: ST_TO_ADDR
// def_shared_vision = 1 ;
1268: LD_ADDR_EXP 8
1272: PUSH
1273: LD_INT 1
1275: ST_TO_ADDR
// def_morale_flags = 1 ;
1276: LD_ADDR_EXP 9
1280: PUSH
1281: LD_INT 1
1283: ST_TO_ADDR
// def_siberite_detection = 1 ;
1284: LD_ADDR_EXP 10
1288: PUSH
1289: LD_INT 1
1291: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
1292: LD_ADDR_EXP 11
1296: PUSH
1297: LD_INT 3
1299: ST_TO_ADDR
// def_people_respawning = 2 ;
1300: LD_ADDR_EXP 12
1304: PUSH
1305: LD_INT 2
1307: ST_TO_ADDR
// def_siberite_bomb = 0 ;
1308: LD_ADDR_EXP 13
1312: PUSH
1313: LD_INT 0
1315: ST_TO_ADDR
// def_win_rules = 0 ;
1316: LD_ADDR_EXP 26
1320: PUSH
1321: LD_INT 0
1323: ST_TO_ADDR
// tech_level = 4 ;
1324: LD_ADDR_VAR 0 9
1328: PUSH
1329: LD_INT 4
1331: ST_TO_ADDR
// end ; if isSGUI then
1332: LD_OWVAR 83
1336: IFFALSE 1344
// setMpTechs ( ) else
1338: CALL 8729 0 0
1342: GO 1357
// begin SetMpTechLevel ( tech_level + 1 ) ;
1344: LD_VAR 0 9
1348: PUSH
1349: LD_INT 1
1351: PLUS
1352: PPUSH
1353: CALL 8876 0 1
// end ; is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1357: LD_ADDR_EXP 14
1361: PUSH
1362: LD_INT 0
1364: PUSH
1365: LD_INT 1
1367: PUSH
1368: LD_INT 1
1370: PUSH
1371: LD_INT 1
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: PUSH
1380: LD_EXP 2
1384: PUSH
1385: LD_INT 1
1387: PLUS
1388: ARRAY
1389: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 0 , 0 ] [ def_base_level + 1 ] ;
1390: LD_ADDR_EXP 15
1394: PUSH
1395: LD_INT 0
1397: PUSH
1398: LD_INT 0
1400: PUSH
1401: LD_INT 0
1403: PUSH
1404: LD_INT 0
1406: PUSH
1407: EMPTY
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: PUSH
1413: LD_EXP 2
1417: PUSH
1418: LD_INT 1
1420: PLUS
1421: ARRAY
1422: ST_TO_ADDR
// number_of_people = [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
1423: LD_ADDR_EXP 16
1427: PUSH
1428: LD_INT 9
1430: PUSH
1431: LD_INT 12
1433: PUSH
1434: LD_INT 15
1436: PUSH
1437: LD_INT 24
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: LIST
1444: LIST
1445: PUSH
1446: LD_EXP 3
1450: PUSH
1451: LD_INT 1
1453: PLUS
1454: ARRAY
1455: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_initial_level + 1 ] ;
1456: LD_ADDR_EXP 17
1460: PUSH
1461: LD_INT 2
1463: PUSH
1464: LD_INT 3
1466: PUSH
1467: LD_INT 4
1469: PUSH
1470: LD_INT 5
1472: PUSH
1473: EMPTY
1474: LIST
1475: LIST
1476: LIST
1477: LIST
1478: PUSH
1479: LD_EXP 4
1483: PUSH
1484: LD_INT 1
1486: PLUS
1487: ARRAY
1488: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1489: LD_ADDR_EXP 20
1493: PUSH
1494: LD_INT 0
1496: PUSH
1497: LD_INT 0
1499: PUSH
1500: LD_INT 0
1502: PUSH
1503: EMPTY
1504: LIST
1505: LIST
1506: LIST
1507: PUSH
1508: LD_INT 30
1510: PUSH
1511: LD_INT 0
1513: PUSH
1514: LD_INT 0
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: LIST
1521: PUSH
1522: LD_INT 50
1524: PUSH
1525: LD_INT 20
1527: PUSH
1528: LD_INT 0
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: LIST
1535: PUSH
1536: LD_INT 80
1538: PUSH
1539: LD_INT 40
1541: PUSH
1542: LD_INT 20
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: LIST
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: LIST
1554: LIST
1555: PUSH
1556: LD_EXP 5
1560: PUSH
1561: LD_INT 1
1563: PLUS
1564: ARRAY
1565: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1566: LD_ADDR_EXP 19
1570: PUSH
1571: LD_INT 10
1573: PUSH
1574: EMPTY
1575: LIST
1576: PUSH
1577: LD_INT 7
1579: PUSH
1580: LD_INT 14
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: PUSH
1587: LD_INT 6
1589: PUSH
1590: LD_INT 12
1592: PUSH
1593: LD_INT 18
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: LIST
1600: PUSH
1601: LD_INT 5
1603: PUSH
1604: LD_INT 10
1606: PUSH
1607: LD_INT 15
1609: PUSH
1610: LD_INT 20
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: LIST
1617: LIST
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: PUSH
1625: LD_EXP 5
1629: PUSH
1630: LD_INT 1
1632: PLUS
1633: ARRAY
1634: ST_TO_ADDR
// shipments_density = [ 20 , 30 , 40 ] [ def_shipments_density + 1 ] ;
1635: LD_ADDR_EXP 21
1639: PUSH
1640: LD_INT 20
1642: PUSH
1643: LD_INT 30
1645: PUSH
1646: LD_INT 40
1648: PUSH
1649: EMPTY
1650: LIST
1651: LIST
1652: LIST
1653: PUSH
1654: LD_EXP 6
1658: PUSH
1659: LD_INT 1
1661: PLUS
1662: ARRAY
1663: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1664: LD_ADDR_EXP 18
1668: PUSH
1669: LD_INT 0
1671: PUSH
1672: LD_INT 1
1674: PUSH
1675: LD_INT 2
1677: PUSH
1678: LD_INT 3
1680: PUSH
1681: EMPTY
1682: LIST
1683: LIST
1684: LIST
1685: LIST
1686: PUSH
1687: LD_EXP 11
1691: PUSH
1692: LD_INT 1
1694: PLUS
1695: ARRAY
1696: ST_TO_ADDR
// spawning_koef_of_apemen = [ 0 , 165 , 140 , 115 ] [ def_amount_of_apemen + 1 ] ;
1697: LD_ADDR_EXP 23
1701: PUSH
1702: LD_INT 0
1704: PUSH
1705: LD_INT 165
1707: PUSH
1708: LD_INT 140
1710: PUSH
1711: LD_INT 115
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: LIST
1718: LIST
1719: PUSH
1720: LD_EXP 11
1724: PUSH
1725: LD_INT 1
1727: PLUS
1728: ARRAY
1729: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1730: LD_ADDR_EXP 24
1734: PUSH
1735: LD_INT 0
1737: PUSH
1738: LD_INT 8400
1740: PUSH
1741: LD_INT 1750
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: LIST
1748: PUSH
1749: LD_EXP 12
1753: PUSH
1754: LD_INT 1
1756: PLUS
1757: ARRAY
1758: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1759: LD_ADDR_EXP 25
1763: PUSH
1764: LD_INT 0
1766: PUSH
1767: LD_INT 21000
1769: PUSH
1770: LD_INT 4200
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: LIST
1777: PUSH
1778: LD_EXP 12
1782: PUSH
1783: LD_INT 1
1785: PLUS
1786: ARRAY
1787: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1788: LD_ADDR_EXP 22
1792: PUSH
1793: LD_INT 0
1795: PUSH
1796: LD_INT 1
1798: PUSH
1799: LD_INT 63000
1801: PUSH
1802: LD_INT 126000
1804: PUSH
1805: LD_INT 189000
1807: PUSH
1808: LD_INT 252000
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: LD_EXP 13
1823: PUSH
1824: LD_INT 1
1826: PLUS
1827: ARRAY
1828: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1829: LD_ADDR_EXP 46
1833: PUSH
1834: LD_INT 1
1836: NEG
1837: PUSH
1838: LD_INT 350
1840: PUSH
1841: LD_INT 700
1843: PUSH
1844: LD_INT 1400
1846: PUSH
1847: LD_INT 0
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: PUSH
1857: LD_EXP 9
1861: PUSH
1862: LD_INT 1
1864: PLUS
1865: ARRAY
1866: ST_TO_ADDR
// battle_flags_id = [ ] ;
1867: LD_ADDR_EXP 45
1871: PUSH
1872: EMPTY
1873: ST_TO_ADDR
// end ;
1874: LD_VAR 0 1
1878: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1879: LD_INT 0
1881: PPUSH
1882: PPUSH
1883: PPUSH
// Team_Game := 0 ;
1884: LD_ADDR_EXP 38
1888: PUSH
1889: LD_INT 0
1891: ST_TO_ADDR
// for i = 1 to 8 do
1892: LD_ADDR_VAR 0 2
1896: PUSH
1897: DOUBLE
1898: LD_INT 1
1900: DEC
1901: ST_TO_ADDR
1902: LD_INT 8
1904: PUSH
1905: FOR_TO
1906: IFFALSE 1932
// Team_Game := Team_Game + Side_Teams [ i ] ;
1908: LD_ADDR_EXP 38
1912: PUSH
1913: LD_EXP 38
1917: PUSH
1918: LD_EXP 32
1922: PUSH
1923: LD_VAR 0 2
1927: ARRAY
1928: PLUS
1929: ST_TO_ADDR
1930: GO 1905
1932: POP
1933: POP
// if not Team_Game then
1934: LD_EXP 38
1938: NOT
1939: IFFALSE 1951
// Team_Game := false else
1941: LD_ADDR_EXP 38
1945: PUSH
1946: LD_INT 0
1948: ST_TO_ADDR
1949: GO 1959
// Team_Game := true ;
1951: LD_ADDR_EXP 38
1955: PUSH
1956: LD_INT 1
1958: ST_TO_ADDR
// if not Team_Game then
1959: LD_EXP 38
1963: NOT
1964: IFFALSE 2062
// begin for i = 1 to 8 do
1966: LD_ADDR_VAR 0 2
1970: PUSH
1971: DOUBLE
1972: LD_INT 1
1974: DEC
1975: ST_TO_ADDR
1976: LD_INT 8
1978: PUSH
1979: FOR_TO
1980: IFFALSE 2058
// for j = 1 to 8 do
1982: LD_ADDR_VAR 0 3
1986: PUSH
1987: DOUBLE
1988: LD_INT 1
1990: DEC
1991: ST_TO_ADDR
1992: LD_INT 8
1994: PUSH
1995: FOR_TO
1996: IFFALSE 2054
// if i <> j then
1998: LD_VAR 0 2
2002: PUSH
2003: LD_VAR 0 3
2007: NONEQUAL
2008: IFFALSE 2032
// SetAttitude ( i , j , att_neutral , true ) else
2010: LD_VAR 0 2
2014: PPUSH
2015: LD_VAR 0 3
2019: PPUSH
2020: LD_INT 0
2022: PPUSH
2023: LD_INT 1
2025: PPUSH
2026: CALL_OW 80
2030: GO 2052
// SetAttitude ( i , j , att_friend , true ) ;
2032: LD_VAR 0 2
2036: PPUSH
2037: LD_VAR 0 3
2041: PPUSH
2042: LD_INT 1
2044: PPUSH
2045: LD_INT 1
2047: PPUSH
2048: CALL_OW 80
2052: GO 1995
2054: POP
2055: POP
2056: GO 1979
2058: POP
2059: POP
// end else
2060: GO 2237
// begin if def_shared_vision then
2062: LD_EXP 8
2066: IFFALSE 2131
// begin for i in Teams do
2068: LD_ADDR_VAR 0 2
2072: PUSH
2073: LD_EXP 33
2077: PUSH
2078: FOR_IN
2079: IFFALSE 2129
// for j = 2 to i do
2081: LD_ADDR_VAR 0 3
2085: PUSH
2086: DOUBLE
2087: LD_INT 2
2089: DEC
2090: ST_TO_ADDR
2091: LD_VAR 0 2
2095: PUSH
2096: FOR_TO
2097: IFFALSE 2125
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2099: LD_VAR 0 2
2103: PUSH
2104: LD_VAR 0 3
2108: ARRAY
2109: PPUSH
2110: LD_VAR 0 2
2114: PUSH
2115: LD_INT 1
2117: ARRAY
2118: PPUSH
2119: CALL_OW 343
2123: GO 2096
2125: POP
2126: POP
2127: GO 2078
2129: POP
2130: POP
// end ; for i = 1 to 8 do
2131: LD_ADDR_VAR 0 2
2135: PUSH
2136: DOUBLE
2137: LD_INT 1
2139: DEC
2140: ST_TO_ADDR
2141: LD_INT 8
2143: PUSH
2144: FOR_TO
2145: IFFALSE 2235
// for j = 1 to 8 do
2147: LD_ADDR_VAR 0 3
2151: PUSH
2152: DOUBLE
2153: LD_INT 1
2155: DEC
2156: ST_TO_ADDR
2157: LD_INT 8
2159: PUSH
2160: FOR_TO
2161: IFFALSE 2231
// if Side_Teams [ i ] = Side_Teams [ j ] then
2163: LD_EXP 32
2167: PUSH
2168: LD_VAR 0 2
2172: ARRAY
2173: PUSH
2174: LD_EXP 32
2178: PUSH
2179: LD_VAR 0 3
2183: ARRAY
2184: EQUAL
2185: IFFALSE 2209
// SetAttitude ( i , j , att_friend , true ) else
2187: LD_VAR 0 2
2191: PPUSH
2192: LD_VAR 0 3
2196: PPUSH
2197: LD_INT 1
2199: PPUSH
2200: LD_INT 1
2202: PPUSH
2203: CALL_OW 80
2207: GO 2229
// SetAttitude ( i , j , att_enemy , true ) ;
2209: LD_VAR 0 2
2213: PPUSH
2214: LD_VAR 0 3
2218: PPUSH
2219: LD_INT 2
2221: PPUSH
2222: LD_INT 1
2224: PPUSH
2225: CALL_OW 80
2229: GO 2160
2231: POP
2232: POP
2233: GO 2144
2235: POP
2236: POP
// end ; end ;
2237: LD_VAR 0 1
2241: RET
// function prepare_people ( side , count , cl , x , y , r , var commander ) ; var i , j , un ; begin
2242: LD_INT 0
2244: PPUSH
2245: PPUSH
2246: PPUSH
2247: PPUSH
// result := [ ] ;
2248: LD_ADDR_VAR 0 8
2252: PUSH
2253: EMPTY
2254: ST_TO_ADDR
// for i := 1 to count do
2255: LD_ADDR_VAR 0 9
2259: PUSH
2260: DOUBLE
2261: LD_INT 1
2263: DEC
2264: ST_TO_ADDR
2265: LD_VAR 0 2
2269: PUSH
2270: FOR_TO
2271: IFFALSE 2665
// begin uc_direction := Rand ( 0 , 5 ) ;
2273: LD_ADDR_OWVAR 24
2277: PUSH
2278: LD_INT 0
2280: PPUSH
2281: LD_INT 5
2283: PPUSH
2284: CALL_OW 12
2288: ST_TO_ADDR
// if commander then
2289: LD_FROM_VAR 0 7
2293: IFFALSE 2402
// begin hc_name := mp_sides_players_names [ side ] ;
2295: LD_ADDR_OWVAR 26
2299: PUSH
2300: LD_OWVAR 19
2304: PUSH
2305: LD_VAR 0 1
2309: ARRAY
2310: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
2311: LD_INT 1
2313: PPUSH
2314: LD_INT 2
2316: PPUSH
2317: CALL_OW 12
2321: PPUSH
2322: LD_VAR 0 3
2326: PPUSH
2327: LD_EXP 17
2331: PUSH
2332: LD_INT 2
2334: PLUS
2335: PPUSH
2336: CALL_OW 380
// hc_importance := 105 ;
2340: LD_ADDR_OWVAR 32
2344: PUSH
2345: LD_INT 105
2347: ST_TO_ADDR
// commander := false ;
2348: LD_VAR 0 7
2352: PUSH
2353: LD_INT 0
2355: ST_TO_ADDR
// if Multiplayer then
2356: LD_OWVAR 4
2360: IFFALSE 2400
// begin hc_gallery := MULTIAVATARS ;
2362: LD_ADDR_OWVAR 33
2366: PUSH
2367: LD_STRING MULTIAVATARS
2369: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( Side ) ;
2370: LD_ADDR_OWVAR 34
2374: PUSH
2375: LD_VAR 0 1
2379: PPUSH
2380: CALL_OW 525
2384: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( Side ) ;
2385: LD_ADDR_OWVAR 27
2389: PUSH
2390: LD_VAR 0 1
2394: PPUSH
2395: CALL_OW 526
2399: ST_TO_ADDR
// end ; end else
2400: GO 2465
// begin hc_name :=  ;
2402: LD_ADDR_OWVAR 26
2406: PUSH
2407: LD_STRING 
2409: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
2410: LD_INT 1
2412: PPUSH
2413: LD_INT 2
2415: PPUSH
2416: CALL_OW 12
2420: PPUSH
2421: LD_VAR 0 3
2425: PPUSH
2426: LD_EXP 17
2430: PPUSH
2431: CALL_OW 380
// hc_importance := 0 ;
2435: LD_ADDR_OWVAR 32
2439: PUSH
2440: LD_INT 0
2442: ST_TO_ADDR
// if Multiplayer then
2443: LD_OWVAR 4
2447: IFFALSE 2465
// begin hc_gallery :=  ;
2449: LD_ADDR_OWVAR 33
2453: PUSH
2454: LD_STRING 
2456: ST_TO_ADDR
// hc_face_number := 0 ;
2457: LD_ADDR_OWVAR 34
2461: PUSH
2462: LD_INT 0
2464: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2465: LD_ADDR_VAR 0 11
2469: PUSH
2470: CALL_OW 44
2474: ST_TO_ADDR
// if global_defined then
2475: LD_LOC 2
2479: IFFALSE 2617
// begin j := i ;
2481: LD_ADDR_VAR 0 10
2485: PUSH
2486: LD_VAR 0 9
2490: ST_TO_ADDR
// if cl = class_soldier then
2491: LD_VAR 0 3
2495: PUSH
2496: LD_INT 1
2498: EQUAL
2499: IFFALSE 2517
// j := i + soldiers_created ;
2501: LD_ADDR_VAR 0 10
2505: PUSH
2506: LD_VAR 0 9
2510: PUSH
2511: LD_LOC 3
2515: PLUS
2516: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2517: LD_LOC 1
2521: PUSH
2522: LD_VAR 0 3
2526: ARRAY
2527: PUSH
2528: LD_VAR 0 10
2532: ARRAY
2533: PPUSH
2534: LD_VAR 0 11
2538: PPUSH
2539: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2543: LD_VAR 0 11
2547: PPUSH
2548: LD_INT 2
2550: PPUSH
2551: LD_LOC 1
2555: PUSH
2556: LD_VAR 0 3
2560: ARRAY
2561: PUSH
2562: LD_VAR 0 10
2566: ARRAY
2567: PPUSH
2568: LD_INT 2
2570: PPUSH
2571: CALL_OW 260
2575: PPUSH
2576: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2580: LD_VAR 0 11
2584: PPUSH
2585: LD_INT 1
2587: PPUSH
2588: LD_LOC 1
2592: PUSH
2593: LD_VAR 0 3
2597: ARRAY
2598: PUSH
2599: LD_VAR 0 10
2603: ARRAY
2604: PPUSH
2605: LD_INT 1
2607: PPUSH
2608: CALL_OW 260
2612: PPUSH
2613: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2617: LD_VAR 0 11
2621: PPUSH
2622: LD_VAR 0 4
2626: PPUSH
2627: LD_VAR 0 5
2631: PPUSH
2632: LD_VAR 0 6
2636: PPUSH
2637: LD_INT 0
2639: PPUSH
2640: CALL_OW 50
// result := result ^ [ un ] ;
2644: LD_ADDR_VAR 0 8
2648: PUSH
2649: LD_VAR 0 8
2653: PUSH
2654: LD_VAR 0 11
2658: PUSH
2659: EMPTY
2660: LIST
2661: ADD
2662: ST_TO_ADDR
// end ;
2663: GO 2270
2665: POP
2666: POP
// if not global_defined then
2667: LD_LOC 2
2671: NOT
2672: IFFALSE 2734
// if cl = class_soldier and global_units then
2674: LD_VAR 0 3
2678: PUSH
2679: LD_INT 1
2681: EQUAL
2682: PUSH
2683: LD_LOC 1
2687: AND
2688: IFFALSE 2715
// global_units := [ global_units [ 1 ] ^ result ] else
2690: LD_ADDR_LOC 1
2694: PUSH
2695: LD_LOC 1
2699: PUSH
2700: LD_INT 1
2702: ARRAY
2703: PUSH
2704: LD_VAR 0 8
2708: ADD
2709: PUSH
2710: EMPTY
2711: LIST
2712: ST_TO_ADDR
2713: GO 2734
// global_units := global_units ^ [ result ] ;
2715: LD_ADDR_LOC 1
2719: PUSH
2720: LD_LOC 1
2724: PUSH
2725: LD_VAR 0 8
2729: PUSH
2730: EMPTY
2731: LIST
2732: ADD
2733: ST_TO_ADDR
// if commander then
2734: LD_FROM_VAR 0 7
2738: IFFALSE 2785
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2740: LD_ADDR_EXP 43
2744: PUSH
2745: LD_EXP 43
2749: PPUSH
2750: LD_OWVAR 20
2754: PPUSH
2755: LD_EXP 43
2759: PUSH
2760: LD_OWVAR 20
2764: ARRAY
2765: PUSH
2766: LD_VAR 0 11
2770: ADD
2771: PPUSH
2772: CALL_OW 1
2776: ST_TO_ADDR
// commander := false ;
2777: LD_VAR 0 7
2781: PUSH
2782: LD_INT 0
2784: ST_TO_ADDR
// end ; end ;
2785: LD_VAR 0 8
2789: RET
// function prepare_buldozer ( x , y , r , pos ) ; var nation ; begin
2790: LD_INT 0
2792: PPUSH
2793: PPUSH
// if uc_nation = 2 then
2794: LD_OWVAR 21
2798: PUSH
2799: LD_INT 2
2801: EQUAL
2802: IFFALSE 2824
// begin nation := uc_nation ;
2804: LD_ADDR_VAR 0 6
2808: PUSH
2809: LD_OWVAR 21
2813: ST_TO_ADDR
// uc_nation := 1 ;
2814: LD_ADDR_OWVAR 21
2818: PUSH
2819: LD_INT 1
2821: ST_TO_ADDR
// end else
2822: GO 2832
// nation := false ;
2824: LD_ADDR_VAR 0 6
2828: PUSH
2829: LD_INT 0
2831: ST_TO_ADDR
// vc_engine = engine_combustion ;
2832: LD_ADDR_OWVAR 39
2836: PUSH
2837: LD_INT 1
2839: ST_TO_ADDR
// vc_control = control_manual ;
2840: LD_ADDR_OWVAR 38
2844: PUSH
2845: LD_INT 1
2847: ST_TO_ADDR
// if uc_nation = nation_russian then
2848: LD_OWVAR 21
2852: PUSH
2853: LD_INT 3
2855: EQUAL
2856: IFFALSE 2876
// begin vc_chassis = ru_heavy_tracked ;
2858: LD_ADDR_OWVAR 37
2862: PUSH
2863: LD_INT 24
2865: ST_TO_ADDR
// vc_weapon = ru_bulldozer ;
2866: LD_ADDR_OWVAR 40
2870: PUSH
2871: LD_INT 53
2873: ST_TO_ADDR
// end else
2874: GO 2892
// begin vc_chassis = us_heavy_tracked ;
2876: LD_ADDR_OWVAR 37
2880: PUSH
2881: LD_INT 4
2883: ST_TO_ADDR
// vc_weapon = us_bulldozer ;
2884: LD_ADDR_OWVAR 40
2888: PUSH
2889: LD_INT 14
2891: ST_TO_ADDR
// end ; case pos of 1 :
2892: LD_VAR 0 4
2896: PUSH
2897: LD_INT 1
2899: DOUBLE
2900: EQUAL
2901: IFTRUE 2905
2903: GO 2916
2905: POP
// uc_direction := 2 ; 2 :
2906: LD_ADDR_OWVAR 24
2910: PUSH
2911: LD_INT 2
2913: ST_TO_ADDR
2914: GO 2974
2916: LD_INT 2
2918: DOUBLE
2919: EQUAL
2920: IFTRUE 2924
2922: GO 2935
2924: POP
// uc_direction := 3 ; 3 :
2925: LD_ADDR_OWVAR 24
2929: PUSH
2930: LD_INT 3
2932: ST_TO_ADDR
2933: GO 2974
2935: LD_INT 3
2937: DOUBLE
2938: EQUAL
2939: IFTRUE 2943
2941: GO 2954
2943: POP
// uc_direction := 0 ; 4 :
2944: LD_ADDR_OWVAR 24
2948: PUSH
2949: LD_INT 0
2951: ST_TO_ADDR
2952: GO 2974
2954: LD_INT 4
2956: DOUBLE
2957: EQUAL
2958: IFTRUE 2962
2960: GO 2973
2962: POP
// uc_direction := 5 ; end ;
2963: LD_ADDR_OWVAR 24
2967: PUSH
2968: LD_INT 5
2970: ST_TO_ADDR
2971: GO 2974
2973: POP
// PlaceUnitXYR ( CreateVehicle , x , y , r , false ) ;
2974: CALL_OW 45
2978: PPUSH
2979: LD_VAR 0 1
2983: PPUSH
2984: LD_VAR 0 2
2988: PPUSH
2989: LD_VAR 0 3
2993: PPUSH
2994: LD_INT 0
2996: PPUSH
2997: CALL_OW 50
// if nation then
3001: LD_VAR 0 6
3005: IFFALSE 3017
// uc_nation := nation ;
3007: LD_ADDR_OWVAR 21
3011: PUSH
3012: LD_VAR 0 6
3016: ST_TO_ADDR
// end ;
3017: LD_VAR 0 5
3021: RET
// function prepare_side ( side ) ; var pos , x , y , i , r , sol , br , dep , neng , nsci , nmech , nsol ; begin
3022: LD_INT 0
3024: PPUSH
3025: PPUSH
3026: PPUSH
3027: PPUSH
3028: PPUSH
3029: PPUSH
3030: PPUSH
3031: PPUSH
3032: PPUSH
3033: PPUSH
3034: PPUSH
3035: PPUSH
3036: PPUSH
// pos := Side_Positions [ side ] ;
3037: LD_ADDR_VAR 0 3
3041: PUSH
3042: LD_EXP 34
3046: PUSH
3047: LD_VAR 0 1
3051: ARRAY
3052: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3053: LD_ADDR_OWVAR 21
3057: PUSH
3058: LD_EXP 35
3062: PUSH
3063: LD_VAR 0 1
3067: ARRAY
3068: ST_TO_ADDR
// uc_side := side ;
3069: LD_ADDR_OWVAR 20
3073: PUSH
3074: LD_VAR 0 1
3078: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3079: LD_ADDR_VAR 0 4
3083: PUSH
3084: LD_EXP 40
3088: PUSH
3089: LD_VAR 0 3
3093: ARRAY
3094: PUSH
3095: LD_INT 1
3097: ARRAY
3098: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3099: LD_ADDR_VAR 0 5
3103: PUSH
3104: LD_EXP 40
3108: PUSH
3109: LD_VAR 0 3
3113: ARRAY
3114: PUSH
3115: LD_INT 2
3117: ARRAY
3118: ST_TO_ADDR
// if is_depot then
3119: LD_EXP 14
3123: IFFALSE 3248
// begin bc_type = b_depot ;
3125: LD_ADDR_OWVAR 42
3129: PUSH
3130: LD_INT 0
3132: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , Depot_Def [ pos ] [ 3 ] ) ;
3133: LD_ADDR_VAR 0 10
3137: PUSH
3138: LD_VAR 0 4
3142: PPUSH
3143: LD_VAR 0 5
3147: PPUSH
3148: LD_EXP 40
3152: PUSH
3153: LD_VAR 0 3
3157: ARRAY
3158: PUSH
3159: LD_INT 3
3161: ARRAY
3162: PPUSH
3163: CALL_OW 47
3167: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3168: LD_VAR 0 10
3172: PPUSH
3173: CALL_OW 274
3177: PPUSH
3178: LD_INT 1
3180: PPUSH
3181: LD_EXP 20
3185: PUSH
3186: LD_INT 1
3188: ARRAY
3189: PPUSH
3190: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3194: LD_VAR 0 10
3198: PPUSH
3199: CALL_OW 274
3203: PPUSH
3204: LD_INT 2
3206: PPUSH
3207: LD_EXP 20
3211: PUSH
3212: LD_INT 2
3214: ARRAY
3215: PPUSH
3216: CALL_OW 277
// SetResourceType ( GetBase ( result ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3220: LD_VAR 0 2
3224: PPUSH
3225: CALL_OW 274
3229: PPUSH
3230: LD_INT 3
3232: PPUSH
3233: LD_EXP 20
3237: PUSH
3238: LD_INT 3
3240: ARRAY
3241: PPUSH
3242: CALL_OW 277
// end else
3246: GO 3392
// begin for i := 1 to 3 do
3248: LD_ADDR_VAR 0 6
3252: PUSH
3253: DOUBLE
3254: LD_INT 1
3256: DEC
3257: ST_TO_ADDR
3258: LD_INT 3
3260: PUSH
3261: FOR_TO
3262: IFFALSE 3390
// begin r := starting_resources [ i ] ;
3264: LD_ADDR_VAR 0 7
3268: PUSH
3269: LD_EXP 20
3273: PUSH
3274: LD_VAR 0 6
3278: ARRAY
3279: ST_TO_ADDR
// while r >= 10 do
3280: LD_VAR 0 7
3284: PUSH
3285: LD_INT 10
3287: GREATEREQUAL
3288: IFFALSE 3388
// if r > 50 then
3290: LD_VAR 0 7
3294: PUSH
3295: LD_INT 50
3297: GREATER
3298: IFFALSE 3344
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3300: LD_VAR 0 6
3304: PPUSH
3305: LD_INT 5
3307: PPUSH
3308: LD_VAR 0 4
3312: PPUSH
3313: LD_VAR 0 5
3317: PPUSH
3318: LD_INT 4
3320: PPUSH
3321: LD_INT 0
3323: PPUSH
3324: CALL_OW 60
// r := r - 50 ;
3328: LD_ADDR_VAR 0 7
3332: PUSH
3333: LD_VAR 0 7
3337: PUSH
3338: LD_INT 50
3340: MINUS
3341: ST_TO_ADDR
// end else
3342: GO 3386
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3344: LD_VAR 0 6
3348: PPUSH
3349: LD_VAR 0 7
3353: PUSH
3354: LD_INT 10
3356: DIV
3357: PPUSH
3358: LD_VAR 0 4
3362: PPUSH
3363: LD_VAR 0 5
3367: PPUSH
3368: LD_INT 4
3370: PPUSH
3371: LD_INT 0
3373: PPUSH
3374: CALL_OW 60
// r := 0 ;
3378: LD_ADDR_VAR 0 7
3382: PUSH
3383: LD_INT 0
3385: ST_TO_ADDR
// end ;
3386: GO 3280
// end ;
3388: GO 3261
3390: POP
3391: POP
// end ; x := start_def [ pos ] [ 1 ] ;
3392: LD_ADDR_VAR 0 4
3396: PUSH
3397: LD_EXP 41
3401: PUSH
3402: LD_VAR 0 3
3406: ARRAY
3407: PUSH
3408: LD_INT 1
3410: ARRAY
3411: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3412: LD_ADDR_VAR 0 5
3416: PUSH
3417: LD_EXP 41
3421: PUSH
3422: LD_VAR 0 3
3426: ARRAY
3427: PUSH
3428: LD_INT 2
3430: ARRAY
3431: ST_TO_ADDR
// for r in starting_crates do
3432: LD_ADDR_VAR 0 7
3436: PUSH
3437: LD_EXP 19
3441: PUSH
3442: FOR_IN
3443: IFFALSE 3475
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3445: LD_INT 1
3447: PPUSH
3448: LD_INT 5
3450: PPUSH
3451: LD_VAR 0 4
3455: PPUSH
3456: LD_VAR 0 5
3460: PPUSH
3461: LD_VAR 0 7
3465: PPUSH
3466: LD_INT 0
3468: PPUSH
3469: CALL_OW 60
3473: GO 3442
3475: POP
3476: POP
// if def_morale_flags then
3477: LD_EXP 9
3481: IFFALSE 3560
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3483: LD_ADDR_EXP 45
3487: PUSH
3488: LD_EXP 45
3492: PUSH
3493: LD_VAR 0 1
3497: PPUSH
3498: LD_VAR 0 4
3502: PPUSH
3503: LD_VAR 0 5
3507: PPUSH
3508: LD_INT 1
3510: PUSH
3511: LD_INT 100
3513: PUSH
3514: EMPTY
3515: LIST
3516: LIST
3517: PUSH
3518: LD_INT 2
3520: PUSH
3521: LD_INT 50
3523: PUSH
3524: EMPTY
3525: LIST
3526: LIST
3527: PUSH
3528: LD_INT 3
3530: PUSH
3531: LD_INT 20
3533: PUSH
3534: EMPTY
3535: LIST
3536: LIST
3537: PUSH
3538: LD_INT 20
3540: PUSH
3541: LD_INT 100
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: PPUSH
3554: CALL_OW 418
3558: ADD
3559: ST_TO_ADDR
// neng := number_of_people ;
3560: LD_ADDR_VAR 0 11
3564: PUSH
3565: LD_EXP 16
3569: ST_TO_ADDR
// nsol := neng div 4 ;
3570: LD_ADDR_VAR 0 14
3574: PUSH
3575: LD_VAR 0 11
3579: PUSH
3580: LD_INT 4
3582: DIV
3583: ST_TO_ADDR
// neng := neng - nsol ;
3584: LD_ADDR_VAR 0 11
3588: PUSH
3589: LD_VAR 0 11
3593: PUSH
3594: LD_VAR 0 14
3598: MINUS
3599: ST_TO_ADDR
// nsci := neng div 3 ;
3600: LD_ADDR_VAR 0 12
3604: PUSH
3605: LD_VAR 0 11
3609: PUSH
3610: LD_INT 3
3612: DIV
3613: ST_TO_ADDR
// if nsci < 1 then
3614: LD_VAR 0 12
3618: PUSH
3619: LD_INT 1
3621: LESS
3622: IFFALSE 3632
// nsci := 1 ;
3624: LD_ADDR_VAR 0 12
3628: PUSH
3629: LD_INT 1
3631: ST_TO_ADDR
// neng := neng - nsci ;
3632: LD_ADDR_VAR 0 11
3636: PUSH
3637: LD_VAR 0 11
3641: PUSH
3642: LD_VAR 0 12
3646: MINUS
3647: ST_TO_ADDR
// nmech := neng div 2 ;
3648: LD_ADDR_VAR 0 13
3652: PUSH
3653: LD_VAR 0 11
3657: PUSH
3658: LD_INT 2
3660: DIV
3661: ST_TO_ADDR
// neng := neng - nmech ;
3662: LD_ADDR_VAR 0 11
3666: PUSH
3667: LD_VAR 0 11
3671: PUSH
3672: LD_VAR 0 13
3676: MINUS
3677: ST_TO_ADDR
// if neng < 1 then
3678: LD_VAR 0 11
3682: PUSH
3683: LD_INT 1
3685: LESS
3686: IFFALSE 3696
// neng := 1 ;
3688: LD_ADDR_VAR 0 11
3692: PUSH
3693: LD_INT 1
3695: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
3696: LD_ADDR_VAR 0 4
3700: PUSH
3701: LD_EXP 41
3705: PUSH
3706: LD_VAR 0 3
3710: ARRAY
3711: PUSH
3712: LD_INT 1
3714: ARRAY
3715: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3716: LD_ADDR_VAR 0 5
3720: PUSH
3721: LD_EXP 41
3725: PUSH
3726: LD_VAR 0 3
3730: ARRAY
3731: PUSH
3732: LD_INT 2
3734: ARRAY
3735: ST_TO_ADDR
// if not is_depot then
3736: LD_EXP 14
3740: NOT
3741: IFFALSE 3765
// prepare_buldozer ( x , y , 2 , pos ) ;
3743: LD_VAR 0 4
3747: PPUSH
3748: LD_VAR 0 5
3752: PPUSH
3753: LD_INT 2
3755: PPUSH
3756: LD_VAR 0 3
3760: PPUSH
3761: CALL 2790 0 4
// commander := true ;
3765: LD_ADDR_EXP 44
3769: PUSH
3770: LD_INT 1
3772: ST_TO_ADDR
// prepare_people ( side , 1 , class_soldier , x , y , 5 , commander ) ;
3773: LD_VAR 0 1
3777: PPUSH
3778: LD_INT 1
3780: PPUSH
3781: LD_INT 1
3783: PPUSH
3784: LD_VAR 0 4
3788: PPUSH
3789: LD_VAR 0 5
3793: PPUSH
3794: LD_INT 5
3796: PPUSH
3797: LD_ADDR_EXP 44
3801: PPUSH
3802: CALL 2242 0 7
// commander := false ;
3806: LD_ADDR_EXP 44
3810: PUSH
3811: LD_INT 0
3813: ST_TO_ADDR
// prepare_people ( side , nsol - 1 , class_soldier , x , y , 5 , commander ) ;
3814: LD_VAR 0 1
3818: PPUSH
3819: LD_VAR 0 14
3823: PUSH
3824: LD_INT 1
3826: MINUS
3827: PPUSH
3828: LD_INT 1
3830: PPUSH
3831: LD_VAR 0 4
3835: PPUSH
3836: LD_VAR 0 5
3840: PPUSH
3841: LD_INT 5
3843: PPUSH
3844: LD_ADDR_EXP 44
3848: PPUSH
3849: CALL 2242 0 7
// prepare_people ( side , neng , class_engineer , x , y , 5 , commander ) ;
3853: LD_VAR 0 1
3857: PPUSH
3858: LD_VAR 0 11
3862: PPUSH
3863: LD_INT 2
3865: PPUSH
3866: LD_VAR 0 4
3870: PPUSH
3871: LD_VAR 0 5
3875: PPUSH
3876: LD_INT 5
3878: PPUSH
3879: LD_ADDR_EXP 44
3883: PPUSH
3884: CALL 2242 0 7
// prepare_people ( side , nmech , class_mechanic , x , y , 5 , commander ) ;
3888: LD_VAR 0 1
3892: PPUSH
3893: LD_VAR 0 13
3897: PPUSH
3898: LD_INT 3
3900: PPUSH
3901: LD_VAR 0 4
3905: PPUSH
3906: LD_VAR 0 5
3910: PPUSH
3911: LD_INT 5
3913: PPUSH
3914: LD_ADDR_EXP 44
3918: PPUSH
3919: CALL 2242 0 7
// prepare_people ( side , nsci , class_scientistic , x , y , 5 , commander ) ;
3923: LD_VAR 0 1
3927: PPUSH
3928: LD_VAR 0 12
3932: PPUSH
3933: LD_INT 4
3935: PPUSH
3936: LD_VAR 0 4
3940: PPUSH
3941: LD_VAR 0 5
3945: PPUSH
3946: LD_INT 5
3948: PPUSH
3949: LD_ADDR_EXP 44
3953: PPUSH
3954: CALL 2242 0 7
// if not global_defined then
3958: LD_LOC 2
3962: NOT
3963: IFFALSE 3973
// global_defined := true ;
3965: LD_ADDR_LOC 2
3969: PUSH
3970: LD_INT 1
3972: ST_TO_ADDR
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3973: LD_EXP 10
3977: PUSH
3978: LD_INT 20
3980: PPUSH
3981: LD_VAR 0 1
3985: PPUSH
3986: CALL_OW 321
3990: PUSH
3991: LD_INT 1
3993: EQUAL
3994: AND
3995: IFFALSE 4012
// SetTech ( tech_SibDet , side , state_researched ) ;
3997: LD_INT 20
3999: PPUSH
4000: LD_VAR 0 1
4004: PPUSH
4005: LD_INT 2
4007: PPUSH
4008: CALL_OW 322
// if def_siberite_bomb = 1 then
4012: LD_EXP 13
4016: PUSH
4017: LD_INT 1
4019: EQUAL
4020: IFFALSE 4054
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4022: LD_INT 25
4024: PPUSH
4025: LD_VAR 0 1
4029: PPUSH
4030: LD_INT 1
4032: PPUSH
4033: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4037: LD_INT 73
4039: PPUSH
4040: LD_VAR 0 1
4044: PPUSH
4045: LD_INT 1
4047: PPUSH
4048: CALL_OW 322
// end else
4052: GO 4084
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4054: LD_INT 25
4056: PPUSH
4057: LD_VAR 0 1
4061: PPUSH
4062: LD_INT 0
4064: PPUSH
4065: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4069: LD_INT 73
4071: PPUSH
4072: LD_VAR 0 1
4076: PPUSH
4077: LD_INT 0
4079: PPUSH
4080: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4084: LD_INT 24
4086: PPUSH
4087: LD_VAR 0 1
4091: PPUSH
4092: LD_INT 0
4094: PPUSH
4095: CALL_OW 322
// end ;
4099: LD_VAR 0 2
4103: RET
// every 0 0$1 do
4104: GO 4106
4106: DISABLE
// if ( def_siberite_bomb > 1 ) then
4107: LD_EXP 13
4111: PUSH
4112: LD_INT 1
4114: GREATER
4115: IFFALSE 4130
// begin wait ( siberite_bomb_Delay ) ;
4117: LD_EXP 22
4121: PPUSH
4122: CALL_OW 67
// EnableSibFiss ;
4126: CALL 4131 0 0
// end ;
4130: END
// function EnableSibFiss ; var i ; begin
4131: LD_INT 0
4133: PPUSH
4134: PPUSH
// for i := 1 to 8 do
4135: LD_ADDR_VAR 0 2
4139: PUSH
4140: DOUBLE
4141: LD_INT 1
4143: DEC
4144: ST_TO_ADDR
4145: LD_INT 8
4147: PUSH
4148: FOR_TO
4149: IFFALSE 4195
// if Side_Positions [ i ] then
4151: LD_EXP 34
4155: PUSH
4156: LD_VAR 0 2
4160: ARRAY
4161: IFFALSE 4193
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4163: LD_INT 25
4165: PPUSH
4166: LD_VAR 0 2
4170: PPUSH
4171: LD_INT 1
4173: PPUSH
4174: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4178: LD_INT 73
4180: PPUSH
4181: LD_VAR 0 2
4185: PPUSH
4186: LD_INT 1
4188: PPUSH
4189: CALL_OW 322
// end ;
4193: GO 4148
4195: POP
4196: POP
// end ;
4197: LD_VAR 0 1
4201: RET
// function prepare_sides ; var i ; begin
4202: LD_INT 0
4204: PPUSH
4205: PPUSH
// global_units := [ ] ;
4206: LD_ADDR_LOC 1
4210: PUSH
4211: EMPTY
4212: ST_TO_ADDR
// global_defined := false ;
4213: LD_ADDR_LOC 2
4217: PUSH
4218: LD_INT 0
4220: ST_TO_ADDR
// for i := 1 to 8 do
4221: LD_ADDR_VAR 0 2
4225: PUSH
4226: DOUBLE
4227: LD_INT 1
4229: DEC
4230: ST_TO_ADDR
4231: LD_INT 8
4233: PUSH
4234: FOR_TO
4235: IFFALSE 4260
// if Side_Positions [ i ] then
4237: LD_EXP 34
4241: PUSH
4242: LD_VAR 0 2
4246: ARRAY
4247: IFFALSE 4258
// prepare_side ( i ) ;
4249: LD_VAR 0 2
4253: PPUSH
4254: CALL 3022 0 1
4258: GO 4234
4260: POP
4261: POP
// end ;
4262: LD_VAR 0 1
4266: RET
// starting begin disable ( 98 ) ;
4267: LD_INT 98
4269: DISABLE_MARKED
// disable ( 99 ) ;
4270: LD_INT 99
4272: DISABLE_MARKED
// disable ( 400 ) ;
4273: LD_INT 400
4275: DISABLE_MARKED
// disable ( 401 ) ;
4276: LD_INT 401
4278: DISABLE_MARKED
// mp_selectmsg := true ;
4279: LD_ADDR_OWVAR 13
4283: PUSH
4284: LD_INT 1
4286: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4287: CALL 681 0 0
// init_map ;
4291: CALL 436 0 0
// set_shared_visions_and_alliances ;
4295: CALL 1879 0 0
// ResetFog ;
4299: CALL_OW 335
// ClearAllFogForSide ( Player_Side ) ;
4303: LD_EXP 30
4307: PPUSH
4308: CALL_OW 520
// prepare_sides ;
4312: CALL 4202 0 0
// Init_Win_Condition ;
4316: CALL 7503 0 0
// init_shipments ;
4320: CALL 5449 0 0
// init_respawn ;
4324: CALL 5942 0 0
// InitApeman ;
4328: CALL 4624 0 0
// your_side := Player_Side ;
4332: LD_ADDR_OWVAR 2
4336: PUSH
4337: LD_EXP 30
4341: ST_TO_ADDR
// if IAmSpec then
4342: CALL_OW 531
4346: IFFALSE 4370
// begin fogOff ( true ) ;
4348: LD_INT 1
4350: PPUSH
4351: CALL_OW 344
// CenterNowOnXY ( 104 , 69 ) ;
4355: LD_INT 104
4357: PPUSH
4358: LD_INT 69
4360: PPUSH
4361: CALL_OW 86
// enable ( 400 ) ;
4365: LD_INT 400
4367: ENABLE_MARKED
// end else
4368: GO 4416
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4370: LD_EXP 41
4374: PUSH
4375: LD_EXP 34
4379: PUSH
4380: LD_OWVAR 2
4384: ARRAY
4385: ARRAY
4386: PUSH
4387: LD_INT 1
4389: ARRAY
4390: PPUSH
4391: LD_EXP 41
4395: PUSH
4396: LD_EXP 34
4400: PUSH
4401: LD_OWVAR 2
4405: ARRAY
4406: ARRAY
4407: PUSH
4408: LD_INT 2
4410: ARRAY
4411: PPUSH
4412: CALL_OW 86
// end ; music_nat := Side_Nations [ your_side ] ;
4416: LD_ADDR_OWVAR 71
4420: PUSH
4421: LD_EXP 35
4425: PUSH
4426: LD_OWVAR 2
4430: ARRAY
4431: ST_TO_ADDR
// end ; end_of_file
4432: END
// every 20 20$00 trigger apemanNumber do
4433: LD_EXP 47
4437: IFFALSE 4470
4439: GO 4441
4441: DISABLE
// begin enable ;
4442: ENABLE
// if apeLevel >= 8 then
4443: LD_EXP 52
4447: PUSH
4448: LD_INT 8
4450: GREATEREQUAL
4451: IFFALSE 4456
// disable else
4453: DISABLE
4454: GO 4470
// apeLevel := apeLevel + 1 ;
4456: LD_ADDR_EXP 52
4460: PUSH
4461: LD_EXP 52
4465: PUSH
4466: LD_INT 1
4468: PLUS
4469: ST_TO_ADDR
// end ;
4470: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
4471: LD_EXP 47
4475: PUSH
4476: LD_EXP 48
4480: LESS
4481: IFFALSE 4621
4483: GO 4485
4485: DISABLE
4486: LD_INT 0
4488: PPUSH
4489: PPUSH
4490: PPUSH
4491: PPUSH
// begin enable ;
4492: ENABLE
// for i := 1 to apemanPos do
4493: LD_ADDR_VAR 0 1
4497: PUSH
4498: DOUBLE
4499: LD_INT 1
4501: DEC
4502: ST_TO_ADDR
4503: LD_EXP 50
4507: PUSH
4508: FOR_TO
4509: IFFALSE 4619
// begin if apemanPlayerCount [ i ] then
4511: LD_EXP 51
4515: PUSH
4516: LD_VAR 0 1
4520: ARRAY
4521: IFFALSE 4617
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
4523: LD_EXP 51
4527: PUSH
4528: LD_VAR 0 1
4532: ARRAY
4533: PUSH
4534: LD_EXP 50
4538: PUSH
4539: LD_VAR 0 1
4543: ARRAY
4544: GREATER
4545: IFFALSE 4617
// begin ape := PrepareApeman ;
4547: LD_ADDR_VAR 0 2
4551: PUSH
4552: CALL 5124 0 0
4556: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
4557: LD_VAR 0 2
4561: PPUSH
4562: LD_EXP 53
4566: PUSH
4567: LD_VAR 0 1
4571: ARRAY
4572: PPUSH
4573: LD_INT 0
4575: PPUSH
4576: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
4580: LD_ADDR_EXP 50
4584: PUSH
4585: LD_EXP 50
4589: PPUSH
4590: LD_VAR 0 1
4594: PPUSH
4595: LD_EXP 50
4599: PUSH
4600: LD_VAR 0 1
4604: ARRAY
4605: PUSH
4606: LD_VAR 0 2
4610: UNION
4611: PPUSH
4612: CALL_OW 1
4616: ST_TO_ADDR
// end ; end ; end ;
4617: GO 4508
4619: POP
4620: POP
// end ;
4621: PPOPN 4
4623: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
4624: LD_INT 0
4626: PPUSH
4627: PPUSH
4628: PPUSH
4629: PPUSH
4630: PPUSH
4631: PPUSH
4632: PPUSH
// playersAmount := 0 ;
4633: LD_ADDR_VAR 0 3
4637: PUSH
4638: LD_INT 0
4640: ST_TO_ADDR
// _apeAreas := [ nw , ne , sw , se , ] ;
4641: LD_ADDR_VAR 0 7
4645: PUSH
4646: LD_INT 12
4648: PUSH
4649: LD_INT 13
4651: PUSH
4652: LD_INT 14
4654: PUSH
4655: LD_INT 15
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: LIST
4662: LIST
4663: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4664: LD_ADDR_EXP 53
4668: PUSH
4669: LD_INT 0
4671: PUSH
4672: LD_INT 0
4674: PUSH
4675: LD_INT 0
4677: PUSH
4678: LD_INT 0
4680: PUSH
4681: LD_INT 0
4683: PUSH
4684: LD_INT 0
4686: PUSH
4687: LD_INT 0
4689: PUSH
4690: LD_INT 0
4692: PUSH
4693: EMPTY
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: ST_TO_ADDR
// for j = 1 to Side_Positions do
4703: LD_ADDR_VAR 0 4
4707: PUSH
4708: DOUBLE
4709: LD_INT 1
4711: DEC
4712: ST_TO_ADDR
4713: LD_EXP 34
4717: PUSH
4718: FOR_TO
4719: IFFALSE 4786
// if Side_Positions [ j ] then
4721: LD_EXP 34
4725: PUSH
4726: LD_VAR 0 4
4730: ARRAY
4731: IFFALSE 4784
// begin playersAmount := playersAmount + 1 ;
4733: LD_ADDR_VAR 0 3
4737: PUSH
4738: LD_VAR 0 3
4742: PUSH
4743: LD_INT 1
4745: PLUS
4746: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
4747: LD_ADDR_EXP 53
4751: PUSH
4752: LD_EXP 53
4756: PPUSH
4757: LD_VAR 0 4
4761: PPUSH
4762: LD_VAR 0 7
4766: PUSH
4767: LD_EXP 34
4771: PUSH
4772: LD_VAR 0 4
4776: ARRAY
4777: ARRAY
4778: PPUSH
4779: CALL_OW 1
4783: ST_TO_ADDR
// end ;
4784: GO 4718
4786: POP
4787: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
4788: LD_ADDR_EXP 49
4792: PUSH
4793: LD_INT 3
4795: PUSH
4796: LD_EXP 18
4800: MUL
4801: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
4802: LD_ADDR_EXP 47
4806: PUSH
4807: LD_VAR 0 3
4811: PUSH
4812: LD_EXP 49
4816: MUL
4817: ST_TO_ADDR
// apemanLimit := apemanNumber ;
4818: LD_ADDR_EXP 48
4822: PUSH
4823: LD_EXP 47
4827: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4828: LD_ADDR_EXP 50
4832: PUSH
4833: LD_INT 0
4835: PUSH
4836: LD_INT 0
4838: PUSH
4839: LD_INT 0
4841: PUSH
4842: LD_INT 0
4844: PUSH
4845: LD_INT 0
4847: PUSH
4848: LD_INT 0
4850: PUSH
4851: LD_INT 0
4853: PUSH
4854: LD_INT 0
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4867: LD_ADDR_EXP 51
4871: PUSH
4872: LD_INT 0
4874: PUSH
4875: LD_INT 0
4877: PUSH
4878: LD_INT 0
4880: PUSH
4881: LD_INT 0
4883: PUSH
4884: LD_INT 0
4886: PUSH
4887: LD_INT 0
4889: PUSH
4890: LD_INT 0
4892: PUSH
4893: LD_INT 0
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: ST_TO_ADDR
// apeLevel := 1 ;
4906: LD_ADDR_EXP 52
4910: PUSH
4911: LD_INT 1
4913: ST_TO_ADDR
// if not apemanNumber then
4914: LD_EXP 47
4918: NOT
4919: IFFALSE 4923
// exit ;
4921: GO 5119
// for i := 1 to apemanPerPlayer do
4923: LD_ADDR_VAR 0 2
4927: PUSH
4928: DOUBLE
4929: LD_INT 1
4931: DEC
4932: ST_TO_ADDR
4933: LD_EXP 49
4937: PUSH
4938: FOR_TO
4939: IFFALSE 5117
// begin for j := 1 to Side_Positions do
4941: LD_ADDR_VAR 0 4
4945: PUSH
4946: DOUBLE
4947: LD_INT 1
4949: DEC
4950: ST_TO_ADDR
4951: LD_EXP 34
4955: PUSH
4956: FOR_TO
4957: IFFALSE 5113
// if Side_Positions [ j ] then
4959: LD_EXP 34
4963: PUSH
4964: LD_VAR 0 4
4968: ARRAY
4969: IFFALSE 5111
// begin pos := Side_Positions [ j ] ;
4971: LD_ADDR_VAR 0 6
4975: PUSH
4976: LD_EXP 34
4980: PUSH
4981: LD_VAR 0 4
4985: ARRAY
4986: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
4987: LD_ADDR_EXP 51
4991: PUSH
4992: LD_EXP 51
4996: PPUSH
4997: LD_VAR 0 4
5001: PPUSH
5002: LD_EXP 51
5006: PUSH
5007: LD_VAR 0 4
5011: ARRAY
5012: PUSH
5013: LD_INT 1
5015: PLUS
5016: PPUSH
5017: CALL_OW 1
5021: ST_TO_ADDR
// ape := PrepareApeman ;
5022: LD_ADDR_VAR 0 5
5026: PUSH
5027: CALL 5124 0 0
5031: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5032: LD_ADDR_EXP 50
5036: PUSH
5037: LD_EXP 50
5041: PPUSH
5042: LD_VAR 0 4
5046: PPUSH
5047: LD_EXP 50
5051: PUSH
5052: LD_VAR 0 4
5056: ARRAY
5057: PPUSH
5058: LD_EXP 50
5062: PUSH
5063: LD_VAR 0 4
5067: ARRAY
5068: PUSH
5069: LD_INT 1
5071: PLUS
5072: PPUSH
5073: LD_VAR 0 5
5077: PPUSH
5078: CALL_OW 1
5082: PPUSH
5083: CALL_OW 1
5087: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5088: LD_VAR 0 5
5092: PPUSH
5093: LD_EXP 53
5097: PUSH
5098: LD_VAR 0 4
5102: ARRAY
5103: PPUSH
5104: LD_INT 0
5106: PPUSH
5107: CALL_OW 49
// end ;
5111: GO 4956
5113: POP
5114: POP
// end ;
5115: GO 4938
5117: POP
5118: POP
// end ;
5119: LD_VAR 0 1
5123: RET
// export function PrepareApeman ; var bonus ; begin
5124: LD_INT 0
5126: PPUSH
5127: PPUSH
// uc_side := 0 ;
5128: LD_ADDR_OWVAR 20
5132: PUSH
5133: LD_INT 0
5135: ST_TO_ADDR
// uc_nation := 0 ;
5136: LD_ADDR_OWVAR 21
5140: PUSH
5141: LD_INT 0
5143: ST_TO_ADDR
// InitHc ;
5144: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
5148: LD_ADDR_VAR 0 2
5152: PUSH
5153: LD_INT 1
5155: NEG
5156: PUSH
5157: LD_INT 0
5159: PUSH
5160: LD_INT 1
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: LIST
5167: PUSH
5168: LD_OWVAR 1
5172: PUSH
5173: LD_INT 3
5175: MOD
5176: PUSH
5177: LD_INT 1
5179: PLUS
5180: ARRAY
5181: ST_TO_ADDR
// hc_class := class_apeman ;
5182: LD_ADDR_OWVAR 28
5186: PUSH
5187: LD_INT 12
5189: ST_TO_ADDR
// hc_gallery :=  ;
5190: LD_ADDR_OWVAR 33
5194: PUSH
5195: LD_STRING 
5197: ST_TO_ADDR
// hc_name :=  ;
5198: LD_ADDR_OWVAR 26
5202: PUSH
5203: LD_STRING 
5205: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
5206: LD_ADDR_OWVAR 31
5210: PUSH
5211: LD_EXP 52
5215: PUSH
5216: LD_VAR 0 2
5220: PLUS
5221: PUSH
5222: LD_EXP 52
5226: PUSH
5227: LD_VAR 0 2
5231: PLUS
5232: PUSH
5233: LD_EXP 52
5237: PUSH
5238: LD_VAR 0 2
5242: PLUS
5243: PUSH
5244: LD_EXP 52
5248: PUSH
5249: LD_VAR 0 2
5253: PLUS
5254: PUSH
5255: EMPTY
5256: LIST
5257: LIST
5258: LIST
5259: LIST
5260: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
5261: LD_ADDR_OWVAR 35
5265: PUSH
5266: LD_INT 10
5268: PUSH
5269: LD_VAR 0 2
5273: MUL
5274: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5275: LD_ADDR_OWVAR 29
5279: PUSH
5280: LD_INT 12
5282: PUSH
5283: LD_INT 10
5285: PUSH
5286: EMPTY
5287: LIST
5288: LIST
5289: ST_TO_ADDR
// result := CreateHuman ;
5290: LD_ADDR_VAR 0 1
5294: PUSH
5295: CALL_OW 44
5299: ST_TO_ADDR
// end ;
5300: LD_VAR 0 1
5304: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
5305: LD_INT 0
5307: PPUSH
5308: PPUSH
5309: PPUSH
// if not ape then
5310: LD_VAR 0 1
5314: NOT
5315: IFFALSE 5319
// exit ;
5317: GO 5444
// side := GetSide ( ape ) ;
5319: LD_ADDR_VAR 0 3
5323: PUSH
5324: LD_VAR 0 1
5328: PPUSH
5329: CALL_OW 255
5333: ST_TO_ADDR
// if not side then
5334: LD_VAR 0 3
5338: NOT
5339: IFFALSE 5393
// begin for i = 1 to apemanPos do
5341: LD_ADDR_VAR 0 4
5345: PUSH
5346: DOUBLE
5347: LD_INT 1
5349: DEC
5350: ST_TO_ADDR
5351: LD_EXP 50
5355: PUSH
5356: FOR_TO
5357: IFFALSE 5391
// if ape in apemanPos [ i ] then
5359: LD_VAR 0 1
5363: PUSH
5364: LD_EXP 50
5368: PUSH
5369: LD_VAR 0 4
5373: ARRAY
5374: IN
5375: IFFALSE 5389
// begin side := i ;
5377: LD_ADDR_VAR 0 3
5381: PUSH
5382: LD_VAR 0 4
5386: ST_TO_ADDR
// break ;
5387: GO 5391
// end ;
5389: GO 5356
5391: POP
5392: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
5393: LD_ADDR_EXP 50
5397: PUSH
5398: LD_EXP 50
5402: PPUSH
5403: LD_VAR 0 3
5407: PPUSH
5408: LD_EXP 50
5412: PUSH
5413: LD_VAR 0 3
5417: ARRAY
5418: PUSH
5419: LD_VAR 0 1
5423: DIFF
5424: PPUSH
5425: CALL_OW 1
5429: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
5430: LD_ADDR_EXP 47
5434: PUSH
5435: LD_EXP 47
5439: PUSH
5440: LD_INT 1
5442: MINUS
5443: ST_TO_ADDR
// end ; end_of_file
5444: LD_VAR 0 2
5448: RET
// var shipment , tictac ; export function init_shipments ; begin
5449: LD_INT 0
5451: PPUSH
// shipment := Rand ( 0 , 3 ) ;
5452: LD_ADDR_LOC 4
5456: PUSH
5457: LD_INT 0
5459: PPUSH
5460: LD_INT 3
5462: PPUSH
5463: CALL_OW 12
5467: ST_TO_ADDR
// tictac := 0 ;
5468: LD_ADDR_LOC 5
5472: PUSH
5473: LD_INT 0
5475: ST_TO_ADDR
// end ;
5476: LD_VAR 0 1
5480: RET
// every 0 0$5 + 0 0$1.1 do var d ;
5481: GO 5483
5483: DISABLE
5484: LD_INT 0
5486: PPUSH
// begin case tick of 1 .. 1 1$0 :
5487: LD_OWVAR 1
5491: PUSH
5492: LD_INT 1
5494: DOUBLE
5495: GREATEREQUAL
5496: IFFALSE 5504
5498: LD_INT 2100
5500: DOUBLE
5501: LESSEQUAL
5502: IFTRUE 5506
5504: GO 5517
5506: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5507: LD_ADDR_VAR 0 1
5511: PUSH
5512: LD_INT 150
5514: ST_TO_ADDR
5515: GO 5700
5517: LD_INT 2100
5519: PUSH
5520: LD_INT 1
5522: PLUS
5523: DOUBLE
5524: GREATEREQUAL
5525: IFFALSE 5533
5527: LD_INT 10500
5529: DOUBLE
5530: LESSEQUAL
5531: IFTRUE 5535
5533: GO 5546
5535: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5536: LD_ADDR_VAR 0 1
5540: PUSH
5541: LD_INT 100
5543: ST_TO_ADDR
5544: GO 5700
5546: LD_INT 10500
5548: PUSH
5549: LD_INT 1
5551: PLUS
5552: DOUBLE
5553: GREATEREQUAL
5554: IFFALSE 5562
5556: LD_INT 21000
5558: DOUBLE
5559: LESSEQUAL
5560: IFTRUE 5564
5562: GO 5575
5564: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5565: LD_ADDR_VAR 0 1
5569: PUSH
5570: LD_INT 90
5572: ST_TO_ADDR
5573: GO 5700
5575: LD_INT 21000
5577: PUSH
5578: LD_INT 1
5580: PLUS
5581: DOUBLE
5582: GREATEREQUAL
5583: IFFALSE 5591
5585: LD_INT 42000
5587: DOUBLE
5588: LESSEQUAL
5589: IFTRUE 5593
5591: GO 5604
5593: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5594: LD_ADDR_VAR 0 1
5598: PUSH
5599: LD_INT 70
5601: ST_TO_ADDR
5602: GO 5700
5604: LD_INT 42000
5606: PUSH
5607: LD_INT 1
5609: PLUS
5610: DOUBLE
5611: GREATEREQUAL
5612: IFFALSE 5620
5614: LD_INT 63000
5616: DOUBLE
5617: LESSEQUAL
5618: IFTRUE 5622
5620: GO 5633
5622: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5623: LD_ADDR_VAR 0 1
5627: PUSH
5628: LD_INT 60
5630: ST_TO_ADDR
5631: GO 5700
5633: LD_INT 63000
5635: PUSH
5636: LD_INT 1
5638: PLUS
5639: DOUBLE
5640: GREATEREQUAL
5641: IFFALSE 5649
5643: LD_INT 105000
5645: DOUBLE
5646: LESSEQUAL
5647: IFTRUE 5651
5649: GO 5662
5651: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5652: LD_ADDR_VAR 0 1
5656: PUSH
5657: LD_INT 35
5659: ST_TO_ADDR
5660: GO 5700
5662: LD_INT 105000
5664: PUSH
5665: LD_INT 1
5667: PLUS
5668: DOUBLE
5669: GREATEREQUAL
5670: IFFALSE 5678
5672: LD_INT 630000
5674: DOUBLE
5675: LESSEQUAL
5676: IFTRUE 5680
5678: GO 5691
5680: POP
// d := 20 ; else
5681: LD_ADDR_VAR 0 1
5685: PUSH
5686: LD_INT 20
5688: ST_TO_ADDR
5689: GO 5700
5691: POP
// d := 0 ; end ;
5692: LD_ADDR_VAR 0 1
5696: PUSH
5697: LD_INT 0
5699: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5700: LD_INT 1
5702: PPUSH
5703: LD_INT 10000
5705: PPUSH
5706: CALL_OW 12
5710: PUSH
5711: LD_VAR 0 1
5715: PUSH
5716: LD_EXP 21
5720: MUL
5721: LESSEQUAL
5722: IFFALSE 5798
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5724: LD_INT 1
5726: PPUSH
5727: LD_INT 140
5729: PPUSH
5730: CALL_OW 12
5734: PPUSH
5735: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
5739: LD_ADDR_LOC 4
5743: PUSH
5744: LD_LOC 4
5748: PUSH
5749: LD_INT 1
5751: PLUS
5752: PUSH
5753: LD_INT 4
5755: MOD
5756: ST_TO_ADDR
// if GetResourceArea ( nw + shipment , mat_cans ) < 50 then
5757: LD_INT 12
5759: PUSH
5760: LD_LOC 4
5764: PLUS
5765: PPUSH
5766: LD_INT 1
5768: PPUSH
5769: CALL_OW 287
5773: PUSH
5774: LD_INT 50
5776: LESS
5777: IFFALSE 5798
// CreateCratesArea ( 5 , nw + shipment , true ) ;
5779: LD_INT 5
5781: PPUSH
5782: LD_INT 12
5784: PUSH
5785: LD_LOC 4
5789: PLUS
5790: PPUSH
5791: LD_INT 1
5793: PPUSH
5794: CALL_OW 55
// end ; enable ;
5798: ENABLE
// end ;
5799: PPOPN 1
5801: END
// every 0 0$10 trigger TICK > ( ( 3 3$0 * tictac ) + tictac * ( 1 1$30 - shipments_density * ( 0 0$2 ) ) ) do var i , amount ;
5802: LD_OWVAR 1
5806: PUSH
5807: LD_INT 6300
5809: PUSH
5810: LD_LOC 5
5814: MUL
5815: PUSH
5816: LD_LOC 5
5820: PUSH
5821: LD_INT 3150
5823: PUSH
5824: LD_EXP 21
5828: PUSH
5829: LD_INT 70
5831: MUL
5832: MINUS
5833: MUL
5834: PLUS
5835: GREATER
5836: IFFALSE 5939
5838: GO 5840
5840: DISABLE
5841: LD_INT 0
5843: PPUSH
5844: PPUSH
// begin tictac := tictac + 1 ;
5845: LD_ADDR_LOC 5
5849: PUSH
5850: LD_LOC 5
5854: PUSH
5855: LD_INT 1
5857: PLUS
5858: ST_TO_ADDR
// amount := Rand ( 3 , 5 ) ;
5859: LD_ADDR_VAR 0 2
5863: PUSH
5864: LD_INT 3
5866: PPUSH
5867: LD_INT 5
5869: PPUSH
5870: CALL_OW 12
5874: ST_TO_ADDR
// for i = 0 to 3 do
5875: LD_ADDR_VAR 0 1
5879: PUSH
5880: DOUBLE
5881: LD_INT 0
5883: DEC
5884: ST_TO_ADDR
5885: LD_INT 3
5887: PUSH
5888: FOR_TO
5889: IFFALSE 5936
// if GetResourceArea ( Base1 + i , mat_cans ) < 20 then
5891: LD_INT 1
5893: PUSH
5894: LD_VAR 0 1
5898: PLUS
5899: PPUSH
5900: LD_INT 1
5902: PPUSH
5903: CALL_OW 287
5907: PUSH
5908: LD_INT 20
5910: LESS
5911: IFFALSE 5934
// CreateCratesArea ( amount , Base1 + i , true ) ;
5913: LD_VAR 0 2
5917: PPUSH
5918: LD_INT 1
5920: PUSH
5921: LD_VAR 0 1
5925: PLUS
5926: PPUSH
5927: LD_INT 1
5929: PPUSH
5930: CALL_OW 55
5934: GO 5888
5936: POP
5937: POP
// enable ;
5938: ENABLE
// end ; end_of_file
5939: PPOPN 2
5941: END
// var respawn_queue ; export function init_respawn ; begin
5942: LD_INT 0
5944: PPUSH
// if not def_people_respawning then
5945: LD_EXP 12
5949: NOT
5950: IFFALSE 5954
// exit ;
5952: GO 5993
// respawn_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5954: LD_ADDR_LOC 6
5958: PUSH
5959: LD_INT 0
5961: PUSH
5962: LD_INT 0
5964: PUSH
5965: LD_INT 0
5967: PUSH
5968: LD_INT 0
5970: PUSH
5971: LD_INT 0
5973: PUSH
5974: LD_INT 0
5976: PUSH
5977: LD_INT 0
5979: PUSH
5980: LD_INT 0
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: ST_TO_ADDR
// end ;
5993: LD_VAR 0 1
5997: RET
// every 0 0$10 trigger def_people_respawning do var un , list , time , side ;
5998: LD_EXP 12
6002: IFFALSE 6198
6004: GO 6006
6006: DISABLE
6007: LD_INT 0
6009: PPUSH
6010: PPUSH
6011: PPUSH
6012: PPUSH
// begin for side = 1 to Side_Positions do
6013: LD_ADDR_VAR 0 4
6017: PUSH
6018: DOUBLE
6019: LD_INT 1
6021: DEC
6022: ST_TO_ADDR
6023: LD_EXP 34
6027: PUSH
6028: FOR_TO
6029: IFFALSE 6195
// if Side_Positions [ side ] then
6031: LD_EXP 34
6035: PUSH
6036: LD_VAR 0 4
6040: ARRAY
6041: IFFALSE 6193
// begin list := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6043: LD_ADDR_VAR 0 2
6047: PUSH
6048: LD_INT 22
6050: PUSH
6051: LD_VAR 0 4
6055: PUSH
6056: EMPTY
6057: LIST
6058: LIST
6059: PUSH
6060: LD_INT 21
6062: PUSH
6063: LD_INT 1
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: PUSH
6070: LD_INT 3
6072: PUSH
6073: LD_INT 23
6075: PUSH
6076: LD_INT 0
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: PPUSH
6089: CALL_OW 69
6093: ST_TO_ADDR
// if ( list < number_of_people ) and ( not respawn_queue [ side ] ) then
6094: LD_VAR 0 2
6098: PUSH
6099: LD_EXP 16
6103: LESS
6104: PUSH
6105: LD_LOC 6
6109: PUSH
6110: LD_VAR 0 4
6114: ARRAY
6115: NOT
6116: AND
6117: IFFALSE 6133
// set_queue ( side , TICK ) ;
6119: LD_VAR 0 4
6123: PPUSH
6124: LD_OWVAR 1
6128: PPUSH
6129: CALL 6432 0 2
// time := TICK - respawn_queue [ side ] ;
6133: LD_ADDR_VAR 0 3
6137: PUSH
6138: LD_OWVAR 1
6142: PUSH
6143: LD_LOC 6
6147: PUSH
6148: LD_VAR 0 4
6152: ARRAY
6153: MINUS
6154: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6155: LD_LOC 6
6159: PUSH
6160: LD_VAR 0 4
6164: ARRAY
6165: PUSH
6166: LD_VAR 0 3
6170: PUSH
6171: LD_EXP 24
6175: GREATER
6176: AND
6177: IFFALSE 6193
// respawn_character ( side , time ) ;
6179: LD_VAR 0 4
6183: PPUSH
6184: LD_VAR 0 3
6188: PPUSH
6189: CALL 6201 0 2
// end ;
6193: GO 6028
6195: POP
6196: POP
// enable ;
6197: ENABLE
// end ;
6198: PPOPN 4
6200: END
// function respawn_character ( side , time ) ; var dep ; begin
6201: LD_INT 0
6203: PPUSH
6204: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6205: LD_INT 0
6207: PPUSH
6208: LD_INT 1
6210: PPUSH
6211: CALL_OW 12
6215: PUSH
6216: LD_VAR 0 2
6220: PUSH
6221: LD_EXP 25
6225: LESS
6226: AND
6227: IFFALSE 6231
// exit ;
6229: GO 6427
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6231: LD_ADDR_VAR 0 4
6235: PUSH
6236: LD_INT 22
6238: PUSH
6239: LD_VAR 0 1
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: PUSH
6248: LD_INT 2
6250: PUSH
6251: LD_INT 30
6253: PUSH
6254: LD_INT 0
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PUSH
6261: LD_INT 30
6263: PUSH
6264: LD_INT 1
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: PUSH
6271: EMPTY
6272: LIST
6273: LIST
6274: LIST
6275: PUSH
6276: LD_INT 50
6278: PUSH
6279: EMPTY
6280: LIST
6281: PUSH
6282: EMPTY
6283: LIST
6284: LIST
6285: LIST
6286: PPUSH
6287: CALL_OW 69
6291: ST_TO_ADDR
// if not dep then
6292: LD_VAR 0 4
6296: NOT
6297: IFFALSE 6303
// exit else
6299: GO 6427
6301: GO 6327
// dep := dep [ Rand ( 1 , dep ) ] ;
6303: LD_ADDR_VAR 0 4
6307: PUSH
6308: LD_VAR 0 4
6312: PUSH
6313: LD_INT 1
6315: PPUSH
6316: LD_VAR 0 4
6320: PPUSH
6321: CALL_OW 12
6325: ARRAY
6326: ST_TO_ADDR
// uc_side := side ;
6327: LD_ADDR_OWVAR 20
6331: PUSH
6332: LD_VAR 0 1
6336: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6337: LD_ADDR_OWVAR 21
6341: PUSH
6342: LD_EXP 35
6346: PUSH
6347: LD_VAR 0 1
6351: ARRAY
6352: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , initial_level div 2 ) ;
6353: LD_INT 0
6355: PPUSH
6356: LD_INT 0
6358: PPUSH
6359: LD_EXP 17
6363: PUSH
6364: LD_INT 2
6366: DIV
6367: PPUSH
6368: CALL_OW 380
// hc_importance := 0 ;
6372: LD_ADDR_OWVAR 32
6376: PUSH
6377: LD_INT 0
6379: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
6380: CALL_OW 44
6384: PPUSH
6385: LD_VAR 0 4
6389: PPUSH
6390: CALL_OW 250
6394: PPUSH
6395: LD_VAR 0 4
6399: PPUSH
6400: CALL_OW 251
6404: PPUSH
6405: LD_INT 10
6407: PPUSH
6408: LD_INT 1
6410: PPUSH
6411: CALL_OW 50
// set_queue ( side , 0 ) ;
6415: LD_VAR 0 1
6419: PPUSH
6420: LD_INT 0
6422: PPUSH
6423: CALL 6432 0 2
// end ;
6427: LD_VAR 0 3
6431: RET
// function set_queue ( side , time ) ; begin
6432: LD_INT 0
6434: PPUSH
// respawn_queue := Delete ( respawn_queue , side ) ;
6435: LD_ADDR_LOC 6
6439: PUSH
6440: LD_LOC 6
6444: PPUSH
6445: LD_VAR 0 1
6449: PPUSH
6450: CALL_OW 3
6454: ST_TO_ADDR
// respawn_queue := Insert ( respawn_queue , side , time ) ;
6455: LD_ADDR_LOC 6
6459: PUSH
6460: LD_LOC 6
6464: PPUSH
6465: LD_VAR 0 1
6469: PPUSH
6470: LD_VAR 0 2
6474: PPUSH
6475: CALL_OW 2
6479: ST_TO_ADDR
// end ; end_of_file
6480: LD_VAR 0 3
6484: RET
// var strength ; function Update_Flags ; var un ; begin
6485: LD_INT 0
6487: PPUSH
6488: PPUSH
// for un in battle_flags_id do
6489: LD_ADDR_VAR 0 2
6493: PUSH
6494: LD_EXP 45
6498: PUSH
6499: FOR_IN
6500: IFFALSE 6575
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6502: LD_VAR 0 2
6506: PPUSH
6507: LD_INT 1
6509: PUSH
6510: LD_LOC 7
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: PUSH
6519: LD_INT 2
6521: PUSH
6522: LD_LOC 7
6526: PUSH
6527: LD_INT 2
6529: DIV
6530: PUSH
6531: EMPTY
6532: LIST
6533: LIST
6534: PUSH
6535: LD_INT 3
6537: PUSH
6538: LD_LOC 7
6542: PUSH
6543: LD_INT 5
6545: DIV
6546: PUSH
6547: EMPTY
6548: LIST
6549: LIST
6550: PUSH
6551: LD_INT 20
6553: PUSH
6554: LD_LOC 7
6558: PUSH
6559: EMPTY
6560: LIST
6561: LIST
6562: PUSH
6563: EMPTY
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: PPUSH
6569: CALL_OW 423
6573: GO 6499
6575: POP
6576: POP
// end ;
6577: LD_VAR 0 1
6581: RET
// every 0 0$0.1 do var un ;
6582: GO 6584
6584: DISABLE
6585: LD_INT 0
6587: PPUSH
// begin if not def_morale_flags then
6588: LD_EXP 9
6592: NOT
6593: IFFALSE 6597
// exit ;
6595: GO 6674
// if not morale_decreasing_time then
6597: LD_EXP 46
6601: NOT
6602: IFFALSE 6606
// exit ;
6604: GO 6674
// strength = 100 ;
6606: LD_ADDR_LOC 7
6610: PUSH
6611: LD_INT 100
6613: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
6614: LD_EXP 46
6618: PPUSH
6619: CALL_OW 67
// strength := strength - 1 ;
6623: LD_ADDR_LOC 7
6627: PUSH
6628: LD_LOC 7
6632: PUSH
6633: LD_INT 1
6635: MINUS
6636: ST_TO_ADDR
// Update_Flags ;
6637: CALL 6485 0 0
// until not strength ;
6641: LD_LOC 7
6645: NOT
6646: IFFALSE 6614
// for un in battle_flags_id do
6648: LD_ADDR_VAR 0 1
6652: PUSH
6653: LD_EXP 45
6657: PUSH
6658: FOR_IN
6659: IFFALSE 6672
// KillBattleFlag ( un ) ;
6661: LD_VAR 0 1
6665: PPUSH
6666: CALL_OW 419
6670: GO 6658
6672: POP
6673: POP
// end ; end_of_file
6674: PPOPN 1
6676: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
6677: LD_INT 0
6679: PPUSH
6680: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
6681: LD_ADDR_VAR 0 2
6685: PUSH
6686: LD_STRING #Multi1x1-Time
6688: PUSH
6689: LD_OWVAR 1
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: ST_TO_ADDR
// if WaitServerStrings then
6698: LD_EXP 55
6702: IFFALSE 6720
// AllStrings = AllStrings ^ WaitServerStrings ;
6704: LD_ADDR_VAR 0 2
6708: PUSH
6709: LD_VAR 0 2
6713: PUSH
6714: LD_EXP 55
6718: ADD
6719: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
6720: LD_INT 0
6722: PUSH
6723: LD_EXP 22
6727: PUSH
6728: LD_OWVAR 1
6732: MINUS
6733: LESSEQUAL
6734: IFFALSE 6765
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
6736: LD_ADDR_VAR 0 2
6740: PUSH
6741: LD_VAR 0 2
6745: PUSH
6746: LD_STRING #allowedsibbomb
6748: PUSH
6749: LD_EXP 22
6753: PUSH
6754: LD_OWVAR 1
6758: MINUS
6759: PUSH
6760: EMPTY
6761: LIST
6762: LIST
6763: ADD
6764: ST_TO_ADDR
// if ( ExtraStrings ) then
6765: LD_EXP 54
6769: IFFALSE 6791
// AllStrings := AllStrings ^  ^ ExtraStrings ;
6771: LD_ADDR_VAR 0 2
6775: PUSH
6776: LD_VAR 0 2
6780: PUSH
6781: LD_STRING 
6783: ADD
6784: PUSH
6785: LD_EXP 54
6789: ADD
6790: ST_TO_ADDR
// Display_Strings := AllStrings ;
6791: LD_ADDR_OWVAR 47
6795: PUSH
6796: LD_VAR 0 2
6800: ST_TO_ADDR
// end ;
6801: LD_VAR 0 1
6805: RET
// every 0 0$1 do
6806: GO 6808
6808: DISABLE
// begin ShowTimer ;
6809: CALL 6677 0 0
// enable ;
6813: ENABLE
// end ; end_of_file
6814: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6815: LD_VAR 0 1
6819: PPUSH
6820: CALL_OW 266
6824: PUSH
6825: LD_INT 0
6827: PUSH
6828: LD_INT 1
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: IN
6835: IFFALSE 6860
// SetBName ( b , @ & GetSide ( b ) ) ;
6837: LD_VAR 0 1
6841: PPUSH
6842: LD_STRING @
6844: PUSH
6845: LD_VAR 0 1
6849: PPUSH
6850: CALL_OW 255
6854: STR
6855: PPUSH
6856: CALL_OW 500
// end ;
6860: PPOPN 2
6862: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6863: LD_VAR 0 1
6867: PPUSH
6868: CALL_OW 266
6872: PUSH
6873: LD_INT 0
6875: PUSH
6876: LD_INT 1
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: IN
6883: IFFALSE 6908
// SetBName ( b , @ & GetSide ( b ) ) ;
6885: LD_VAR 0 1
6889: PPUSH
6890: LD_STRING @
6892: PUSH
6893: LD_VAR 0 1
6897: PPUSH
6898: CALL_OW 255
6902: STR
6903: PPUSH
6904: CALL_OW 500
// end ;
6908: PPOPN 3
6910: END
// on VehicleConstructed ( veh , fac ) do var side ;
6911: LD_INT 0
6913: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6914: LD_VAR 0 1
6918: PPUSH
6919: CALL_OW 263
6923: PUSH
6924: LD_INT 5
6926: EQUAL
6927: IFFALSE 7069
// begin side := GetSide ( veh ) ;
6929: LD_ADDR_VAR 0 3
6933: PUSH
6934: LD_VAR 0 1
6938: PPUSH
6939: CALL_OW 255
6943: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6944: LD_ADDR_EXP 50
6948: PUSH
6949: LD_EXP 50
6953: PPUSH
6954: LD_VAR 0 3
6958: PPUSH
6959: LD_EXP 50
6963: PUSH
6964: LD_VAR 0 3
6968: ARRAY
6969: PPUSH
6970: LD_INT 52
6972: PUSH
6973: EMPTY
6974: LIST
6975: PPUSH
6976: CALL_OW 72
6980: PUSH
6981: LD_INT 22
6983: PUSH
6984: LD_VAR 0 3
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PUSH
6993: LD_INT 2
6995: PUSH
6996: LD_INT 33
6998: PUSH
6999: LD_INT 5
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: PUSH
7006: LD_INT 25
7008: PUSH
7009: LD_INT 12
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PUSH
7016: LD_INT 25
7018: PUSH
7019: LD_INT 15
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: PUSH
7026: LD_INT 25
7028: PUSH
7029: LD_INT 16
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PUSH
7036: LD_INT 25
7038: PUSH
7039: LD_INT 17
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: LIST
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PPUSH
7058: CALL_OW 69
7062: UNION
7063: PPUSH
7064: CALL_OW 1
7068: ST_TO_ADDR
// end ; end ;
7069: PPOPN 3
7071: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7072: LD_INT 0
7074: PPUSH
7075: PPUSH
7076: PPUSH
7077: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7078: LD_VAR 0 1
7082: PPUSH
7083: CALL_OW 257
7087: PUSH
7088: LD_INT 12
7090: PUSH
7091: LD_INT 15
7093: PUSH
7094: LD_INT 17
7096: PUSH
7097: LD_INT 16
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: IN
7106: PUSH
7107: LD_VAR 0 1
7111: PPUSH
7112: CALL_OW 263
7116: PUSH
7117: LD_INT 5
7119: EQUAL
7120: OR
7121: IFFALSE 7132
// ApeKilled ( j ) ;
7123: LD_VAR 0 1
7127: PPUSH
7128: CALL 5305 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7132: LD_VAR 0 1
7136: PPUSH
7137: CALL_OW 266
7141: PUSH
7142: LD_INT 0
7144: PUSH
7145: LD_INT 1
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: IN
7152: IFFALSE 7234
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7154: LD_ADDR_VAR 0 4
7158: PUSH
7159: LD_EXP 34
7163: PUSH
7164: LD_VAR 0 1
7168: PPUSH
7169: CALL_OW 255
7173: ARRAY
7174: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7175: LD_ADDR_VAR 0 2
7179: PUSH
7180: LD_EXP 41
7184: PUSH
7185: LD_VAR 0 4
7189: ARRAY
7190: PUSH
7191: LD_INT 1
7193: ARRAY
7194: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7195: LD_ADDR_VAR 0 3
7199: PUSH
7200: LD_EXP 41
7204: PUSH
7205: LD_VAR 0 4
7209: ARRAY
7210: PUSH
7211: LD_INT 2
7213: ARRAY
7214: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7215: LD_VAR 0 2
7219: PPUSH
7220: LD_VAR 0 3
7224: PPUSH
7225: CALL_OW 420
7229: PPUSH
7230: CALL_OW 419
// end ; end ;
7234: PPOPN 5
7236: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7237: LD_VAR 0 1
7241: PPUSH
7242: LD_VAR 0 2
7246: PPUSH
7247: LD_VAR 0 3
7251: PPUSH
7252: LD_OWVAR 2
7256: PPUSH
7257: CALL 7264 0 4
7261: PPOPN 3
7263: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
7264: LD_INT 0
7266: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
7267: LD_VAR 0 1
7271: PPUSH
7272: CALL_OW 255
7276: PUSH
7277: LD_VAR 0 4
7281: EQUAL
7282: IFFALSE 7301
// begin SetAchievement ( ACH_RAD ) ;
7284: LD_STRING ACH_RAD
7286: PPUSH
7287: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
7291: LD_STRING ACH_NL
7293: PPUSH
7294: LD_INT 1
7296: PPUSH
7297: CALL_OW 564
// end end ;
7301: LD_VAR 0 5
7305: RET
// export function SA_Win ( side ) ; begin
7306: LD_INT 0
7308: PPUSH
// case side of 1 :
7309: LD_VAR 0 1
7313: PUSH
7314: LD_INT 1
7316: DOUBLE
7317: EQUAL
7318: IFTRUE 7322
7320: GO 7335
7322: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
7323: LD_STRING ACH_AH
7325: PPUSH
7326: LD_INT 1
7328: PPUSH
7329: CALL_OW 564
7333: GO 7498
7335: LD_INT 2
7337: DOUBLE
7338: EQUAL
7339: IFTRUE 7343
7341: GO 7356
7343: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
7344: LD_STRING ACH_E
7346: PPUSH
7347: LD_INT 1
7349: PPUSH
7350: CALL_OW 564
7354: GO 7498
7356: LD_INT 3
7358: DOUBLE
7359: EQUAL
7360: IFTRUE 7364
7362: GO 7377
7364: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
7365: LD_STRING ACH_OOL
7367: PPUSH
7368: LD_INT 1
7370: PPUSH
7371: CALL_OW 564
7375: GO 7498
7377: LD_INT 1
7379: PUSH
7380: LD_INT 2
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: DOUBLE
7387: EQUAL
7388: IFTRUE 7392
7390: GO 7417
7392: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7393: LD_STRING ACH_AH
7395: PPUSH
7396: LD_REAL  5.00000000000000E-0001
7399: PPUSH
7400: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7404: LD_STRING ACH_E
7406: PPUSH
7407: LD_REAL  5.00000000000000E-0001
7410: PPUSH
7411: CALL_OW 564
// end ; [ 2 , 3 ] :
7415: GO 7498
7417: LD_INT 2
7419: PUSH
7420: LD_INT 3
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: DOUBLE
7427: EQUAL
7428: IFTRUE 7432
7430: GO 7457
7432: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
7433: LD_STRING ACH_OOL
7435: PPUSH
7436: LD_REAL  5.00000000000000E-0001
7439: PPUSH
7440: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7444: LD_STRING ACH_E
7446: PPUSH
7447: LD_REAL  5.00000000000000E-0001
7450: PPUSH
7451: CALL_OW 564
// end ; [ 3 , 1 ] :
7455: GO 7498
7457: LD_INT 3
7459: PUSH
7460: LD_INT 1
7462: PUSH
7463: EMPTY
7464: LIST
7465: LIST
7466: DOUBLE
7467: EQUAL
7468: IFTRUE 7472
7470: GO 7497
7472: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7473: LD_STRING ACH_AH
7475: PPUSH
7476: LD_REAL  5.00000000000000E-0001
7479: PPUSH
7480: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
7484: LD_STRING ACH_OOL
7486: PPUSH
7487: LD_REAL  5.00000000000000E-0001
7490: PPUSH
7491: CALL_OW 564
// end ; end ;
7495: GO 7498
7497: POP
// end ; end_of_file
7498: LD_VAR 0 2
7502: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
7503: LD_INT 0
7505: PPUSH
7506: PPUSH
// enable ( 98 ) ;
7507: LD_INT 98
7509: ENABLE_MARKED
// GameEnded = false ;
7510: LD_ADDR_LOC 9
7514: PUSH
7515: LD_INT 0
7517: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7518: LD_ADDR_LOC 8
7522: PUSH
7523: LD_INT 0
7525: PUSH
7526: LD_INT 0
7528: PUSH
7529: LD_INT 0
7531: PUSH
7532: LD_INT 0
7534: PUSH
7535: LD_INT 0
7537: PUSH
7538: LD_INT 0
7540: PUSH
7541: LD_INT 0
7543: PUSH
7544: LD_INT 0
7546: PUSH
7547: EMPTY
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: ST_TO_ADDR
// unfoged = false ;
7557: LD_ADDR_LOC 10
7561: PUSH
7562: LD_INT 0
7564: ST_TO_ADDR
// for i = 1 to side_positions do
7565: LD_ADDR_VAR 0 2
7569: PUSH
7570: DOUBLE
7571: LD_INT 1
7573: DEC
7574: ST_TO_ADDR
7575: LD_EXP 34
7579: PUSH
7580: FOR_TO
7581: IFFALSE 7621
// if not side_positions [ i ] then
7583: LD_EXP 34
7587: PUSH
7588: LD_VAR 0 2
7592: ARRAY
7593: NOT
7594: IFFALSE 7619
// defaited = replace ( defaited , i , true ) ;
7596: LD_ADDR_LOC 8
7600: PUSH
7601: LD_LOC 8
7605: PPUSH
7606: LD_VAR 0 2
7610: PPUSH
7611: LD_INT 1
7613: PPUSH
7614: CALL_OW 1
7618: ST_TO_ADDR
7619: GO 7580
7621: POP
7622: POP
// end ;
7623: LD_VAR 0 1
7627: RET
// function CanWinLoose ; begin
7628: LD_INT 0
7630: PPUSH
// Result := true ;
7631: LD_ADDR_VAR 0 1
7635: PUSH
7636: LD_INT 1
7638: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
7639: CALL_OW 518
7643: PUSH
7644: CALL_OW 519
7648: PUSH
7649: LD_INT 0
7651: GREATER
7652: AND
7653: IFFALSE 7663
// Result := false ;
7655: LD_ADDR_VAR 0 1
7659: PUSH
7660: LD_INT 0
7662: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7663: CALL_OW 531
7667: PUSH
7668: CALL_OW 519
7672: PUSH
7673: LD_INT 1
7675: GREATER
7676: AND
7677: IFFALSE 7687
// Result := false ;
7679: LD_ADDR_VAR 0 1
7683: PUSH
7684: LD_INT 0
7686: ST_TO_ADDR
// end ;
7687: LD_VAR 0 1
7691: RET
// export function HasPower ( i ) ; var k , h ; begin
7692: LD_INT 0
7694: PPUSH
7695: PPUSH
7696: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
7697: LD_VAR 0 1
7701: PPUSH
7702: CALL_OW 108
7706: NOT
7707: PUSH
7708: LD_EXP 39
7712: PUSH
7713: LD_VAR 0 1
7717: ARRAY
7718: NOT
7719: AND
7720: PUSH
7721: LD_OWVAR 4
7725: AND
7726: IFFALSE 7738
// begin result = false ;
7728: LD_ADDR_VAR 0 2
7732: PUSH
7733: LD_INT 0
7735: ST_TO_ADDR
// end else
7736: GO 8033
// case def_win_rules of 0 :
7738: LD_EXP 26
7742: PUSH
7743: LD_INT 0
7745: DOUBLE
7746: EQUAL
7747: IFTRUE 7751
7749: GO 7914
7751: POP
// if def_people_respawning then
7752: LD_EXP 12
7756: IFFALSE 7847
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
7758: LD_ADDR_VAR 0 2
7762: PUSH
7763: LD_INT 22
7765: PUSH
7766: LD_VAR 0 1
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: PUSH
7775: LD_INT 2
7777: PUSH
7778: LD_INT 21
7780: PUSH
7781: LD_INT 1
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: PUSH
7788: LD_INT 33
7790: PUSH
7791: LD_INT 3
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: PUSH
7798: LD_INT 33
7800: PUSH
7801: LD_INT 5
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: PUSH
7808: LD_INT 30
7810: PUSH
7811: LD_INT 0
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: PUSH
7818: LD_INT 30
7820: PUSH
7821: LD_INT 1
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: PPUSH
7840: CALL_OW 69
7844: ST_TO_ADDR
7845: GO 7912
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
7847: LD_ADDR_VAR 0 2
7851: PUSH
7852: LD_INT 22
7854: PUSH
7855: LD_VAR 0 1
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: PUSH
7864: LD_INT 2
7866: PUSH
7867: LD_INT 21
7869: PUSH
7870: LD_INT 1
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: PUSH
7877: LD_INT 33
7879: PUSH
7880: LD_INT 3
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: PUSH
7887: LD_INT 33
7889: PUSH
7890: LD_INT 5
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: PPUSH
7907: CALL_OW 69
7911: ST_TO_ADDR
7912: GO 8033
7914: LD_INT 1
7916: DOUBLE
7917: EQUAL
7918: IFTRUE 7922
7920: GO 7961
7922: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
7923: LD_ADDR_VAR 0 2
7927: PUSH
7928: LD_INT 22
7930: PUSH
7931: LD_VAR 0 1
7935: PUSH
7936: EMPTY
7937: LIST
7938: LIST
7939: PUSH
7940: LD_INT 21
7942: PUSH
7943: LD_INT 1
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: PUSH
7950: EMPTY
7951: LIST
7952: LIST
7953: PPUSH
7954: CALL_OW 69
7958: ST_TO_ADDR
7959: GO 8033
7961: LD_INT 2
7963: DOUBLE
7964: EQUAL
7965: IFTRUE 7969
7967: GO 8032
7969: POP
// begin h = false ;
7970: LD_ADDR_VAR 0 4
7974: PUSH
7975: LD_INT 0
7977: ST_TO_ADDR
// for k in heroes [ i ] do
7978: LD_ADDR_VAR 0 3
7982: PUSH
7983: LD_EXP 43
7987: PUSH
7988: LD_VAR 0 1
7992: ARRAY
7993: PUSH
7994: FOR_IN
7995: IFFALSE 8018
// if IsLive ( k ) then
7997: LD_VAR 0 3
8001: PPUSH
8002: CALL_OW 300
8006: IFFALSE 8016
// h = true ;
8008: LD_ADDR_VAR 0 4
8012: PUSH
8013: LD_INT 1
8015: ST_TO_ADDR
8016: GO 7994
8018: POP
8019: POP
// Result := h ;
8020: LD_ADDR_VAR 0 2
8024: PUSH
8025: LD_VAR 0 4
8029: ST_TO_ADDR
// end ; end ;
8030: GO 8033
8032: POP
// end ;
8033: LD_VAR 0 2
8037: RET
// function AlliedSides ( i , j ) ; begin
8038: LD_INT 0
8040: PPUSH
// Result := false ;
8041: LD_ADDR_VAR 0 3
8045: PUSH
8046: LD_INT 0
8048: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8049: LD_VAR 0 1
8053: PPUSH
8054: LD_VAR 0 2
8058: PPUSH
8059: CALL_OW 81
8063: PUSH
8064: LD_INT 1
8066: EQUAL
8067: PUSH
8068: LD_VAR 0 2
8072: PPUSH
8073: LD_VAR 0 1
8077: PPUSH
8078: CALL_OW 81
8082: PUSH
8083: LD_INT 1
8085: EQUAL
8086: AND
8087: PUSH
8088: LD_VAR 0 1
8092: PPUSH
8093: CALL_OW 83
8097: AND
8098: PUSH
8099: LD_VAR 0 2
8103: PPUSH
8104: CALL_OW 83
8108: AND
8109: IFFALSE 8119
// Result := true ;
8111: LD_ADDR_VAR 0 3
8115: PUSH
8116: LD_INT 1
8118: ST_TO_ADDR
// end ;
8119: LD_VAR 0 3
8123: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
8124: CALL 7628 0 0
8128: PUSH
8129: LD_LOC 9
8133: NOT
8134: AND
8135: IFFALSE 8151
8137: GO 8139
8139: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
8140: LD_ADDR_EXP 55
8144: PUSH
8145: LD_STRING #Player-Ended
8147: PUSH
8148: EMPTY
8149: LIST
8150: ST_TO_ADDR
8151: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
8152: CALL 7628 0 0
8156: PUSH
8157: LD_LOC 9
8161: AND
8162: IFFALSE 8171
8164: GO 8166
8166: DISABLE
// YouLostInMultiplayer ;
8167: CALL_OW 107
8171: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
8172: CALL 7628 0 0
8176: NOT
8177: PUSH
8178: CALL_OW 531
8182: NOT
8183: AND
8184: IFFALSE 8200
8186: GO 8188
8188: DISABLE
// WaitServerStrings = [ #server-wait ] ;
8189: LD_ADDR_EXP 55
8193: PUSH
8194: LD_STRING #server-wait
8196: PUSH
8197: EMPTY
8198: LIST
8199: ST_TO_ADDR
8200: END
// every 100 trigger IAmSpec do
8201: CALL_OW 531
8205: IFFALSE 8221
8207: GO 8209
8209: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
8210: LD_ADDR_EXP 55
8214: PUSH
8215: LD_STRING #Player-IAmSpec
8217: PUSH
8218: EMPTY
8219: LIST
8220: ST_TO_ADDR
8221: END
// every 100 trigger GameEnded and IAmSpec do
8222: LD_LOC 9
8226: PUSH
8227: CALL_OW 531
8231: AND
8232: IFFALSE 8241
8234: GO 8236
8236: DISABLE
// YouLostInMultiplayer ;
8237: CALL_OW 107
8241: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
8242: CALL 7628 0 0
8246: PUSH
8247: LD_LOC 9
8251: NOT
8252: AND
8253: IFFALSE 8269
8255: GO 8257
8257: DISABLE
// WaitServerStrings = [ $player-win ] ;
8258: LD_ADDR_EXP 55
8262: PUSH
8263: LD_STRING $player-win
8265: PUSH
8266: EMPTY
8267: LIST
8268: ST_TO_ADDR
8269: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
8270: CALL 7628 0 0
8274: PUSH
8275: LD_LOC 9
8279: AND
8280: IFFALSE 8304
8282: GO 8284
8284: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
8285: LD_EXP 35
8289: PUSH
8290: LD_OWVAR 2
8294: ARRAY
8295: PPUSH
8296: CALL 7306 0 1
// YouWinInMultiplayer ;
8300: CALL_OW 106
// end ;
8304: END
// every 100 trigger isEditor marked 401 do
8305: LD_OWVAR 84
8309: IFFALSE 8325
8311: GO 8313
8313: DISABLE
// Debug_Strings = [ You won ] ;
8314: LD_ADDR_OWVAR 48
8318: PUSH
8319: LD_STRING You won
8321: PUSH
8322: EMPTY
8323: LIST
8324: ST_TO_ADDR
8325: END
// every 100 trigger isEditor marked 400 do
8326: LD_OWVAR 84
8330: IFFALSE 8346
8332: GO 8334
8334: DISABLE
// Debug_Strings = [ You loss ] ;
8335: LD_ADDR_OWVAR 48
8339: PUSH
8340: LD_STRING You loss
8342: PUSH
8343: EMPTY
8344: LIST
8345: ST_TO_ADDR
8346: END
// every 100 marked 98 do var i , un ;
8347: GO 8349
8349: DISABLE
8350: LD_INT 0
8352: PPUSH
8353: PPUSH
// begin for i = 1 to side_positions do
8354: LD_ADDR_VAR 0 1
8358: PUSH
8359: DOUBLE
8360: LD_INT 1
8362: DEC
8363: ST_TO_ADDR
8364: LD_EXP 34
8368: PUSH
8369: FOR_TO
8370: IFFALSE 8453
// if side_positions [ i ] then
8372: LD_EXP 34
8376: PUSH
8377: LD_VAR 0 1
8381: ARRAY
8382: IFFALSE 8451
// if not HasPower ( i ) and not Defaited [ i ] then
8384: LD_VAR 0 1
8388: PPUSH
8389: CALL 7692 0 1
8393: NOT
8394: PUSH
8395: LD_LOC 8
8399: PUSH
8400: LD_VAR 0 1
8404: ARRAY
8405: NOT
8406: AND
8407: IFFALSE 8451
// begin Defaited = replace ( Defaited , i , true ) ;
8409: LD_ADDR_LOC 8
8413: PUSH
8414: LD_LOC 8
8418: PPUSH
8419: LD_VAR 0 1
8423: PPUSH
8424: LD_INT 1
8426: PPUSH
8427: CALL_OW 1
8431: ST_TO_ADDR
// if i = your_side then
8432: LD_VAR 0 1
8436: PUSH
8437: LD_OWVAR 2
8441: EQUAL
8442: IFFALSE 8451
// begin Multiplayer_Loose_Message ;
8444: CALL_OW 521
// enable ( 400 ) ;
8448: LD_INT 400
8450: ENABLE_MARKED
// end ; end ;
8451: GO 8369
8453: POP
8454: POP
// if not Unfoged and defaited [ your_side ] then
8455: LD_LOC 10
8459: NOT
8460: PUSH
8461: LD_LOC 8
8465: PUSH
8466: LD_OWVAR 2
8470: ARRAY
8471: AND
8472: IFFALSE 8478
// Unfog ;
8474: CALL 8654 0 0
// DidGameEnd ;
8478: CALL 8493 0 0
// if not GameEnded then
8482: LD_LOC 9
8486: NOT
8487: IFFALSE 8490
// enable ;
8489: ENABLE
// end ;
8490: PPOPN 2
8492: END
// function DidGameEnd ; var i , k , enemy ; begin
8493: LD_INT 0
8495: PPUSH
8496: PPUSH
8497: PPUSH
8498: PPUSH
// enemy = [ ] ;
8499: LD_ADDR_VAR 0 4
8503: PUSH
8504: EMPTY
8505: ST_TO_ADDR
// for i = 1 to side_positions do
8506: LD_ADDR_VAR 0 2
8510: PUSH
8511: DOUBLE
8512: LD_INT 1
8514: DEC
8515: ST_TO_ADDR
8516: LD_EXP 34
8520: PUSH
8521: FOR_TO
8522: IFFALSE 8616
// if not defaited [ i ] then
8524: LD_LOC 8
8528: PUSH
8529: LD_VAR 0 2
8533: ARRAY
8534: NOT
8535: IFFALSE 8614
// for k = 1 to side_positions do
8537: LD_ADDR_VAR 0 3
8541: PUSH
8542: DOUBLE
8543: LD_INT 1
8545: DEC
8546: ST_TO_ADDR
8547: LD_EXP 34
8551: PUSH
8552: FOR_TO
8553: IFFALSE 8612
// if not defaited [ k ] then
8555: LD_LOC 8
8559: PUSH
8560: LD_VAR 0 3
8564: ARRAY
8565: NOT
8566: IFFALSE 8610
// if not AlliedSides ( i , k ) then
8568: LD_VAR 0 2
8572: PPUSH
8573: LD_VAR 0 3
8577: PPUSH
8578: CALL 8038 0 2
8582: NOT
8583: IFFALSE 8610
// enemy = enemy ^ [ i , k ] ;
8585: LD_ADDR_VAR 0 4
8589: PUSH
8590: LD_VAR 0 4
8594: PUSH
8595: LD_VAR 0 2
8599: PUSH
8600: LD_VAR 0 3
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: ADD
8609: ST_TO_ADDR
8610: GO 8552
8612: POP
8613: POP
8614: GO 8521
8616: POP
8617: POP
// if not enemy then
8618: LD_VAR 0 4
8622: NOT
8623: IFFALSE 8649
// begin GameEnded = true ;
8625: LD_ADDR_LOC 9
8629: PUSH
8630: LD_INT 1
8632: ST_TO_ADDR
// if not defaited [ your_side ] then
8633: LD_LOC 8
8637: PUSH
8638: LD_OWVAR 2
8642: ARRAY
8643: NOT
8644: IFFALSE 8649
// enable ( 401 ) ;
8646: LD_INT 401
8648: ENABLE_MARKED
// end ; end ;
8649: LD_VAR 0 1
8653: RET
// function unfog ; var k , friends ; begin
8654: LD_INT 0
8656: PPUSH
8657: PPUSH
8658: PPUSH
// SetPlayerSpectator ( ) ;
8659: CALL_OW 572
// unfoged = true ;
8663: LD_ADDR_LOC 10
8667: PUSH
8668: LD_INT 1
8670: ST_TO_ADDR
// end ;
8671: LD_VAR 0 1
8675: RET
// export function MakeGameEnd ; begin
8676: LD_INT 0
8678: PPUSH
// SetPlayerSpectator ( ) ;
8679: CALL_OW 572
// unfoged = true ;
8683: LD_ADDR_LOC 10
8687: PUSH
8688: LD_INT 1
8690: ST_TO_ADDR
// wait ( 0 0$5 ) ;
8691: LD_INT 175
8693: PPUSH
8694: CALL_OW 67
// GameEnded = true ;
8698: LD_ADDR_LOC 9
8702: PUSH
8703: LD_INT 1
8705: ST_TO_ADDR
// end ;
8706: LD_VAR 0 1
8710: RET
// export function GetGameEnded ; begin
8711: LD_INT 0
8713: PPUSH
// result = GameEnded ;
8714: LD_ADDR_VAR 0 1
8718: PUSH
8719: LD_LOC 9
8723: ST_TO_ADDR
// end ; end_of_file
8724: LD_VAR 0 1
8728: RET
// export function SetMpTechs ( ) ; var side , i ; begin
8729: LD_INT 0
8731: PPUSH
8732: PPUSH
8733: PPUSH
// for side = 1 to 8 do
8734: LD_ADDR_VAR 0 2
8738: PUSH
8739: DOUBLE
8740: LD_INT 1
8742: DEC
8743: ST_TO_ADDR
8744: LD_INT 8
8746: PUSH
8747: FOR_TO
8748: IFFALSE 8869
// begin for i = 1 to 72 do
8750: LD_ADDR_VAR 0 3
8754: PUSH
8755: DOUBLE
8756: LD_INT 1
8758: DEC
8759: ST_TO_ADDR
8760: LD_INT 72
8762: PUSH
8763: FOR_TO
8764: IFFALSE 8795
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
8766: LD_VAR 0 3
8770: PPUSH
8771: LD_VAR 0 2
8775: PPUSH
8776: LD_INT 0
8778: PPUSH
8779: LD_VAR 0 3
8783: PPUSH
8784: CALL_OW 565
8788: PPUSH
8789: CALL_OW 322
8793: GO 8763
8795: POP
8796: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
8797: LD_INT 73
8799: PPUSH
8800: LD_VAR 0 2
8804: PPUSH
8805: LD_INT 0
8807: PPUSH
8808: LD_INT 25
8810: PPUSH
8811: CALL_OW 565
8815: PPUSH
8816: CALL_OW 322
// for i = 0 to 40 do
8820: LD_ADDR_VAR 0 3
8824: PUSH
8825: DOUBLE
8826: LD_INT 0
8828: DEC
8829: ST_TO_ADDR
8830: LD_INT 40
8832: PUSH
8833: FOR_TO
8834: IFFALSE 8865
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
8836: LD_VAR 0 3
8840: PPUSH
8841: LD_VAR 0 2
8845: PPUSH
8846: LD_INT 1
8848: PPUSH
8849: LD_VAR 0 3
8853: PPUSH
8854: CALL_OW 565
8858: PPUSH
8859: CALL_OW 324
8863: GO 8833
8865: POP
8866: POP
// end ;
8867: GO 8747
8869: POP
8870: POP
// end ;
8871: LD_VAR 0 1
8875: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
8876: LD_INT 0
8878: PPUSH
8879: PPUSH
8880: PPUSH
// for side = 1 to 8 do
8881: LD_ADDR_VAR 0 3
8885: PUSH
8886: DOUBLE
8887: LD_INT 1
8889: DEC
8890: ST_TO_ADDR
8891: LD_INT 8
8893: PUSH
8894: FOR_TO
8895: IFFALSE 12891
// begin for i = 1 to 73 do
8897: LD_ADDR_VAR 0 4
8901: PUSH
8902: DOUBLE
8903: LD_INT 1
8905: DEC
8906: ST_TO_ADDR
8907: LD_INT 73
8909: PUSH
8910: FOR_TO
8911: IFFALSE 8932
// SetTech ( i , side , state_disabled ) ;
8913: LD_VAR 0 4
8917: PPUSH
8918: LD_VAR 0 3
8922: PPUSH
8923: LD_INT 0
8925: PPUSH
8926: CALL_OW 322
8930: GO 8910
8932: POP
8933: POP
// for i = 0 to 40 do
8934: LD_ADDR_VAR 0 4
8938: PUSH
8939: DOUBLE
8940: LD_INT 0
8942: DEC
8943: ST_TO_ADDR
8944: LD_INT 40
8946: PUSH
8947: FOR_TO
8948: IFFALSE 8969
// SetRestrict ( i , side , false ) ;
8950: LD_VAR 0 4
8954: PPUSH
8955: LD_VAR 0 3
8959: PPUSH
8960: LD_INT 0
8962: PPUSH
8963: CALL_OW 324
8967: GO 8947
8969: POP
8970: POP
// case level of 1 :
8971: LD_VAR 0 1
8975: PUSH
8976: LD_INT 1
8978: DOUBLE
8979: EQUAL
8980: IFTRUE 8984
8982: GO 9137
8984: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8985: LD_INT 35
8987: PPUSH
8988: LD_VAR 0 3
8992: PPUSH
8993: LD_INT 1
8995: PPUSH
8996: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9000: LD_INT 45
9002: PPUSH
9003: LD_VAR 0 3
9007: PPUSH
9008: LD_INT 1
9010: PPUSH
9011: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9015: LD_INT 46
9017: PPUSH
9018: LD_VAR 0 3
9022: PPUSH
9023: LD_INT 1
9025: PPUSH
9026: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9030: LD_INT 47
9032: PPUSH
9033: LD_VAR 0 3
9037: PPUSH
9038: LD_INT 1
9040: PPUSH
9041: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9045: LD_INT 0
9047: PPUSH
9048: LD_VAR 0 3
9052: PPUSH
9053: LD_INT 1
9055: PPUSH
9056: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9060: LD_INT 2
9062: PPUSH
9063: LD_VAR 0 3
9067: PPUSH
9068: LD_INT 1
9070: PPUSH
9071: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9075: LD_INT 4
9077: PPUSH
9078: LD_VAR 0 3
9082: PPUSH
9083: LD_INT 1
9085: PPUSH
9086: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9090: LD_INT 6
9092: PPUSH
9093: LD_VAR 0 3
9097: PPUSH
9098: LD_INT 1
9100: PPUSH
9101: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9105: LD_INT 29
9107: PPUSH
9108: LD_VAR 0 3
9112: PPUSH
9113: LD_INT 1
9115: PPUSH
9116: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9120: LD_INT 31
9122: PPUSH
9123: LD_VAR 0 3
9127: PPUSH
9128: LD_INT 1
9130: PPUSH
9131: CALL_OW 324
// end ; 2 :
9135: GO 12889
9137: LD_INT 2
9139: DOUBLE
9140: EQUAL
9141: IFTRUE 9145
9143: GO 9343
9145: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9146: LD_INT 35
9148: PPUSH
9149: LD_VAR 0 3
9153: PPUSH
9154: LD_INT 1
9156: PPUSH
9157: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9161: LD_INT 45
9163: PPUSH
9164: LD_VAR 0 3
9168: PPUSH
9169: LD_INT 1
9171: PPUSH
9172: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9176: LD_INT 46
9178: PPUSH
9179: LD_VAR 0 3
9183: PPUSH
9184: LD_INT 1
9186: PPUSH
9187: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9191: LD_INT 47
9193: PPUSH
9194: LD_VAR 0 3
9198: PPUSH
9199: LD_INT 1
9201: PPUSH
9202: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9206: LD_INT 1
9208: PPUSH
9209: LD_VAR 0 3
9213: PPUSH
9214: LD_INT 1
9216: PPUSH
9217: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9221: LD_INT 2
9223: PPUSH
9224: LD_VAR 0 3
9228: PPUSH
9229: LD_INT 1
9231: PPUSH
9232: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9236: LD_INT 11
9238: PPUSH
9239: LD_VAR 0 3
9243: PPUSH
9244: LD_INT 1
9246: PPUSH
9247: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9251: LD_INT 0
9253: PPUSH
9254: LD_VAR 0 3
9258: PPUSH
9259: LD_INT 1
9261: PPUSH
9262: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9266: LD_INT 2
9268: PPUSH
9269: LD_VAR 0 3
9273: PPUSH
9274: LD_INT 1
9276: PPUSH
9277: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9281: LD_INT 4
9283: PPUSH
9284: LD_VAR 0 3
9288: PPUSH
9289: LD_INT 1
9291: PPUSH
9292: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9296: LD_INT 6
9298: PPUSH
9299: LD_VAR 0 3
9303: PPUSH
9304: LD_INT 1
9306: PPUSH
9307: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9311: LD_INT 29
9313: PPUSH
9314: LD_VAR 0 3
9318: PPUSH
9319: LD_INT 1
9321: PPUSH
9322: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9326: LD_INT 31
9328: PPUSH
9329: LD_VAR 0 3
9333: PPUSH
9334: LD_INT 1
9336: PPUSH
9337: CALL_OW 324
// end ; 3 :
9341: GO 12889
9343: LD_INT 3
9345: DOUBLE
9346: EQUAL
9347: IFTRUE 9351
9349: GO 9804
9351: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9352: LD_INT 35
9354: PPUSH
9355: LD_VAR 0 3
9359: PPUSH
9360: LD_INT 1
9362: PPUSH
9363: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9367: LD_INT 45
9369: PPUSH
9370: LD_VAR 0 3
9374: PPUSH
9375: LD_INT 1
9377: PPUSH
9378: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9382: LD_INT 46
9384: PPUSH
9385: LD_VAR 0 3
9389: PPUSH
9390: LD_INT 1
9392: PPUSH
9393: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9397: LD_INT 47
9399: PPUSH
9400: LD_VAR 0 3
9404: PPUSH
9405: LD_INT 1
9407: PPUSH
9408: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9412: LD_INT 1
9414: PPUSH
9415: LD_VAR 0 3
9419: PPUSH
9420: LD_INT 1
9422: PPUSH
9423: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9427: LD_INT 2
9429: PPUSH
9430: LD_VAR 0 3
9434: PPUSH
9435: LD_INT 1
9437: PPUSH
9438: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9442: LD_INT 11
9444: PPUSH
9445: LD_VAR 0 3
9449: PPUSH
9450: LD_INT 1
9452: PPUSH
9453: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9457: LD_INT 48
9459: PPUSH
9460: LD_VAR 0 3
9464: PPUSH
9465: LD_INT 1
9467: PPUSH
9468: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9472: LD_INT 69
9474: PPUSH
9475: LD_VAR 0 3
9479: PPUSH
9480: LD_INT 1
9482: PPUSH
9483: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9487: LD_INT 39
9489: PPUSH
9490: LD_VAR 0 3
9494: PPUSH
9495: LD_INT 1
9497: PPUSH
9498: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9502: LD_INT 43
9504: PPUSH
9505: LD_VAR 0 3
9509: PPUSH
9510: LD_INT 1
9512: PPUSH
9513: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9517: LD_INT 51
9519: PPUSH
9520: LD_VAR 0 3
9524: PPUSH
9525: LD_INT 1
9527: PPUSH
9528: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9532: LD_INT 6
9534: PPUSH
9535: LD_VAR 0 3
9539: PPUSH
9540: LD_INT 1
9542: PPUSH
9543: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9547: LD_INT 0
9549: PPUSH
9550: LD_VAR 0 3
9554: PPUSH
9555: LD_INT 1
9557: PPUSH
9558: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9562: LD_INT 2
9564: PPUSH
9565: LD_VAR 0 3
9569: PPUSH
9570: LD_INT 1
9572: PPUSH
9573: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
9577: LD_INT 3
9579: PPUSH
9580: LD_VAR 0 3
9584: PPUSH
9585: LD_INT 1
9587: PPUSH
9588: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9592: LD_INT 4
9594: PPUSH
9595: LD_VAR 0 3
9599: PPUSH
9600: LD_INT 1
9602: PPUSH
9603: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9607: LD_INT 6
9609: PPUSH
9610: LD_VAR 0 3
9614: PPUSH
9615: LD_INT 1
9617: PPUSH
9618: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
9622: LD_INT 7
9624: PPUSH
9625: LD_VAR 0 3
9629: PPUSH
9630: LD_INT 1
9632: PPUSH
9633: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
9637: LD_INT 8
9639: PPUSH
9640: LD_VAR 0 3
9644: PPUSH
9645: LD_INT 1
9647: PPUSH
9648: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
9652: LD_INT 10
9654: PPUSH
9655: LD_VAR 0 3
9659: PPUSH
9660: LD_INT 1
9662: PPUSH
9663: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
9667: LD_INT 15
9669: PPUSH
9670: LD_VAR 0 3
9674: PPUSH
9675: LD_INT 1
9677: PPUSH
9678: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
9682: LD_INT 16
9684: PPUSH
9685: LD_VAR 0 3
9689: PPUSH
9690: LD_INT 1
9692: PPUSH
9693: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
9697: LD_INT 17
9699: PPUSH
9700: LD_VAR 0 3
9704: PPUSH
9705: LD_INT 1
9707: PPUSH
9708: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
9712: LD_INT 20
9714: PPUSH
9715: LD_VAR 0 3
9719: PPUSH
9720: LD_INT 1
9722: PPUSH
9723: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
9727: LD_INT 26
9729: PPUSH
9730: LD_VAR 0 3
9734: PPUSH
9735: LD_INT 1
9737: PPUSH
9738: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
9742: LD_INT 27
9744: PPUSH
9745: LD_VAR 0 3
9749: PPUSH
9750: LD_INT 1
9752: PPUSH
9753: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9757: LD_INT 29
9759: PPUSH
9760: LD_VAR 0 3
9764: PPUSH
9765: LD_INT 1
9767: PPUSH
9768: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9772: LD_INT 31
9774: PPUSH
9775: LD_VAR 0 3
9779: PPUSH
9780: LD_INT 1
9782: PPUSH
9783: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
9787: LD_INT 32
9789: PPUSH
9790: LD_VAR 0 3
9794: PPUSH
9795: LD_INT 1
9797: PPUSH
9798: CALL_OW 324
// end ; 4 :
9802: GO 12889
9804: LD_INT 4
9806: DOUBLE
9807: EQUAL
9808: IFTRUE 9812
9810: GO 10760
9812: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9813: LD_INT 35
9815: PPUSH
9816: LD_VAR 0 3
9820: PPUSH
9821: LD_INT 1
9823: PPUSH
9824: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9828: LD_INT 45
9830: PPUSH
9831: LD_VAR 0 3
9835: PPUSH
9836: LD_INT 1
9838: PPUSH
9839: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9843: LD_INT 46
9845: PPUSH
9846: LD_VAR 0 3
9850: PPUSH
9851: LD_INT 1
9853: PPUSH
9854: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9858: LD_INT 47
9860: PPUSH
9861: LD_VAR 0 3
9865: PPUSH
9866: LD_INT 1
9868: PPUSH
9869: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9873: LD_INT 1
9875: PPUSH
9876: LD_VAR 0 3
9880: PPUSH
9881: LD_INT 1
9883: PPUSH
9884: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9888: LD_INT 2
9890: PPUSH
9891: LD_VAR 0 3
9895: PPUSH
9896: LD_INT 1
9898: PPUSH
9899: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9903: LD_INT 11
9905: PPUSH
9906: LD_VAR 0 3
9910: PPUSH
9911: LD_INT 1
9913: PPUSH
9914: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
9918: LD_INT 20
9920: PPUSH
9921: LD_VAR 0 3
9925: PPUSH
9926: LD_INT 1
9928: PPUSH
9929: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9933: LD_INT 48
9935: PPUSH
9936: LD_VAR 0 3
9940: PPUSH
9941: LD_INT 1
9943: PPUSH
9944: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
9948: LD_INT 49
9950: PPUSH
9951: LD_VAR 0 3
9955: PPUSH
9956: LD_INT 1
9958: PPUSH
9959: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9963: LD_INT 69
9965: PPUSH
9966: LD_VAR 0 3
9970: PPUSH
9971: LD_INT 1
9973: PPUSH
9974: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9978: LD_INT 39
9980: PPUSH
9981: LD_VAR 0 3
9985: PPUSH
9986: LD_INT 1
9988: PPUSH
9989: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
9993: LD_INT 34
9995: PPUSH
9996: LD_VAR 0 3
10000: PPUSH
10001: LD_INT 1
10003: PPUSH
10004: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10008: LD_INT 42
10010: PPUSH
10011: LD_VAR 0 3
10015: PPUSH
10016: LD_INT 1
10018: PPUSH
10019: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10023: LD_INT 44
10025: PPUSH
10026: LD_VAR 0 3
10030: PPUSH
10031: LD_INT 1
10033: PPUSH
10034: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10038: LD_INT 41
10040: PPUSH
10041: LD_VAR 0 3
10045: PPUSH
10046: LD_INT 1
10048: PPUSH
10049: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10053: LD_INT 43
10055: PPUSH
10056: LD_VAR 0 3
10060: PPUSH
10061: LD_INT 1
10063: PPUSH
10064: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10068: LD_INT 70
10070: PPUSH
10071: LD_VAR 0 3
10075: PPUSH
10076: LD_INT 1
10078: PPUSH
10079: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10083: LD_INT 51
10085: PPUSH
10086: LD_VAR 0 3
10090: PPUSH
10091: LD_INT 1
10093: PPUSH
10094: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10098: LD_INT 52
10100: PPUSH
10101: LD_VAR 0 3
10105: PPUSH
10106: LD_INT 1
10108: PPUSH
10109: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10113: LD_INT 6
10115: PPUSH
10116: LD_VAR 0 3
10120: PPUSH
10121: LD_INT 1
10123: PPUSH
10124: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10128: LD_INT 15
10130: PPUSH
10131: LD_VAR 0 3
10135: PPUSH
10136: LD_INT 1
10138: PPUSH
10139: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10143: LD_INT 7
10145: PPUSH
10146: LD_VAR 0 3
10150: PPUSH
10151: LD_INT 1
10153: PPUSH
10154: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10158: LD_INT 12
10160: PPUSH
10161: LD_VAR 0 3
10165: PPUSH
10166: LD_INT 1
10168: PPUSH
10169: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10173: LD_INT 18
10175: PPUSH
10176: LD_VAR 0 3
10180: PPUSH
10181: LD_INT 1
10183: PPUSH
10184: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10188: LD_INT 60
10190: PPUSH
10191: LD_VAR 0 3
10195: PPUSH
10196: LD_INT 1
10198: PPUSH
10199: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10203: LD_INT 9
10205: PPUSH
10206: LD_VAR 0 3
10210: PPUSH
10211: LD_INT 1
10213: PPUSH
10214: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10218: LD_INT 30
10220: PPUSH
10221: LD_VAR 0 3
10225: PPUSH
10226: LD_INT 1
10228: PPUSH
10229: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10233: LD_INT 37
10235: PPUSH
10236: LD_VAR 0 3
10240: PPUSH
10241: LD_INT 1
10243: PPUSH
10244: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10248: LD_INT 5
10250: PPUSH
10251: LD_VAR 0 3
10255: PPUSH
10256: LD_INT 1
10258: PPUSH
10259: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10263: LD_INT 66
10265: PPUSH
10266: LD_VAR 0 3
10270: PPUSH
10271: LD_INT 1
10273: PPUSH
10274: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10278: LD_INT 21
10280: PPUSH
10281: LD_VAR 0 3
10285: PPUSH
10286: LD_INT 1
10288: PPUSH
10289: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10293: LD_INT 22
10295: PPUSH
10296: LD_VAR 0 3
10300: PPUSH
10301: LD_INT 1
10303: PPUSH
10304: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10308: LD_INT 54
10310: PPUSH
10311: LD_VAR 0 3
10315: PPUSH
10316: LD_INT 1
10318: PPUSH
10319: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10323: LD_INT 0
10325: PPUSH
10326: LD_VAR 0 3
10330: PPUSH
10331: LD_INT 1
10333: PPUSH
10334: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10338: LD_INT 1
10340: PPUSH
10341: LD_VAR 0 3
10345: PPUSH
10346: LD_INT 1
10348: PPUSH
10349: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10353: LD_INT 2
10355: PPUSH
10356: LD_VAR 0 3
10360: PPUSH
10361: LD_INT 1
10363: PPUSH
10364: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10368: LD_INT 3
10370: PPUSH
10371: LD_VAR 0 3
10375: PPUSH
10376: LD_INT 1
10378: PPUSH
10379: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10383: LD_INT 4
10385: PPUSH
10386: LD_VAR 0 3
10390: PPUSH
10391: LD_INT 1
10393: PPUSH
10394: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10398: LD_INT 5
10400: PPUSH
10401: LD_VAR 0 3
10405: PPUSH
10406: LD_INT 1
10408: PPUSH
10409: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10413: LD_INT 6
10415: PPUSH
10416: LD_VAR 0 3
10420: PPUSH
10421: LD_INT 1
10423: PPUSH
10424: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10428: LD_INT 7
10430: PPUSH
10431: LD_VAR 0 3
10435: PPUSH
10436: LD_INT 1
10438: PPUSH
10439: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10443: LD_INT 8
10445: PPUSH
10446: LD_VAR 0 3
10450: PPUSH
10451: LD_INT 1
10453: PPUSH
10454: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10458: LD_INT 10
10460: PPUSH
10461: LD_VAR 0 3
10465: PPUSH
10466: LD_INT 1
10468: PPUSH
10469: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
10473: LD_INT 11
10475: PPUSH
10476: LD_VAR 0 3
10480: PPUSH
10481: LD_INT 1
10483: PPUSH
10484: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
10488: LD_INT 12
10490: PPUSH
10491: LD_VAR 0 3
10495: PPUSH
10496: LD_INT 1
10498: PPUSH
10499: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
10503: LD_INT 13
10505: PPUSH
10506: LD_VAR 0 3
10510: PPUSH
10511: LD_INT 1
10513: PPUSH
10514: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
10518: LD_INT 14
10520: PPUSH
10521: LD_VAR 0 3
10525: PPUSH
10526: LD_INT 1
10528: PPUSH
10529: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10533: LD_INT 15
10535: PPUSH
10536: LD_VAR 0 3
10540: PPUSH
10541: LD_INT 1
10543: PPUSH
10544: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10548: LD_INT 16
10550: PPUSH
10551: LD_VAR 0 3
10555: PPUSH
10556: LD_INT 1
10558: PPUSH
10559: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10563: LD_INT 17
10565: PPUSH
10566: LD_VAR 0 3
10570: PPUSH
10571: LD_INT 1
10573: PPUSH
10574: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
10578: LD_INT 19
10580: PPUSH
10581: LD_VAR 0 3
10585: PPUSH
10586: LD_INT 1
10588: PPUSH
10589: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10593: LD_INT 20
10595: PPUSH
10596: LD_VAR 0 3
10600: PPUSH
10601: LD_INT 1
10603: PPUSH
10604: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
10608: LD_INT 21
10610: PPUSH
10611: LD_VAR 0 3
10615: PPUSH
10616: LD_INT 1
10618: PPUSH
10619: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
10623: LD_INT 23
10625: PPUSH
10626: LD_VAR 0 3
10630: PPUSH
10631: LD_INT 1
10633: PPUSH
10634: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10638: LD_INT 26
10640: PPUSH
10641: LD_VAR 0 3
10645: PPUSH
10646: LD_INT 1
10648: PPUSH
10649: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10653: LD_INT 27
10655: PPUSH
10656: LD_VAR 0 3
10660: PPUSH
10661: LD_INT 1
10663: PPUSH
10664: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
10668: LD_INT 28
10670: PPUSH
10671: LD_VAR 0 3
10675: PPUSH
10676: LD_INT 1
10678: PPUSH
10679: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10683: LD_INT 29
10685: PPUSH
10686: LD_VAR 0 3
10690: PPUSH
10691: LD_INT 1
10693: PPUSH
10694: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
10698: LD_INT 30
10700: PPUSH
10701: LD_VAR 0 3
10705: PPUSH
10706: LD_INT 1
10708: PPUSH
10709: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10713: LD_INT 31
10715: PPUSH
10716: LD_VAR 0 3
10720: PPUSH
10721: LD_INT 1
10723: PPUSH
10724: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10728: LD_INT 32
10730: PPUSH
10731: LD_VAR 0 3
10735: PPUSH
10736: LD_INT 1
10738: PPUSH
10739: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
10743: LD_INT 36
10745: PPUSH
10746: LD_VAR 0 3
10750: PPUSH
10751: LD_INT 1
10753: PPUSH
10754: CALL_OW 324
// end ; 5 :
10758: GO 12889
10760: LD_INT 5
10762: DOUBLE
10763: EQUAL
10764: IFTRUE 10768
10766: GO 11881
10768: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10769: LD_INT 35
10771: PPUSH
10772: LD_VAR 0 3
10776: PPUSH
10777: LD_INT 1
10779: PPUSH
10780: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10784: LD_INT 45
10786: PPUSH
10787: LD_VAR 0 3
10791: PPUSH
10792: LD_INT 1
10794: PPUSH
10795: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10799: LD_INT 46
10801: PPUSH
10802: LD_VAR 0 3
10806: PPUSH
10807: LD_INT 1
10809: PPUSH
10810: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10814: LD_INT 47
10816: PPUSH
10817: LD_VAR 0 3
10821: PPUSH
10822: LD_INT 1
10824: PPUSH
10825: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10829: LD_INT 1
10831: PPUSH
10832: LD_VAR 0 3
10836: PPUSH
10837: LD_INT 1
10839: PPUSH
10840: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10844: LD_INT 2
10846: PPUSH
10847: LD_VAR 0 3
10851: PPUSH
10852: LD_INT 1
10854: PPUSH
10855: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10859: LD_INT 11
10861: PPUSH
10862: LD_VAR 0 3
10866: PPUSH
10867: LD_INT 1
10869: PPUSH
10870: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10874: LD_INT 20
10876: PPUSH
10877: LD_VAR 0 3
10881: PPUSH
10882: LD_INT 1
10884: PPUSH
10885: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10889: LD_INT 48
10891: PPUSH
10892: LD_VAR 0 3
10896: PPUSH
10897: LD_INT 1
10899: PPUSH
10900: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10904: LD_INT 49
10906: PPUSH
10907: LD_VAR 0 3
10911: PPUSH
10912: LD_INT 1
10914: PPUSH
10915: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10919: LD_INT 69
10921: PPUSH
10922: LD_VAR 0 3
10926: PPUSH
10927: LD_INT 1
10929: PPUSH
10930: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10934: LD_INT 39
10936: PPUSH
10937: LD_VAR 0 3
10941: PPUSH
10942: LD_INT 1
10944: PPUSH
10945: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10949: LD_INT 34
10951: PPUSH
10952: LD_VAR 0 3
10956: PPUSH
10957: LD_INT 1
10959: PPUSH
10960: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10964: LD_INT 42
10966: PPUSH
10967: LD_VAR 0 3
10971: PPUSH
10972: LD_INT 1
10974: PPUSH
10975: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10979: LD_INT 44
10981: PPUSH
10982: LD_VAR 0 3
10986: PPUSH
10987: LD_INT 1
10989: PPUSH
10990: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10994: LD_INT 41
10996: PPUSH
10997: LD_VAR 0 3
11001: PPUSH
11002: LD_INT 1
11004: PPUSH
11005: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11009: LD_INT 40
11011: PPUSH
11012: LD_VAR 0 3
11016: PPUSH
11017: LD_INT 1
11019: PPUSH
11020: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11024: LD_INT 43
11026: PPUSH
11027: LD_VAR 0 3
11031: PPUSH
11032: LD_INT 1
11034: PPUSH
11035: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11039: LD_INT 70
11041: PPUSH
11042: LD_VAR 0 3
11046: PPUSH
11047: LD_INT 1
11049: PPUSH
11050: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11054: LD_INT 51
11056: PPUSH
11057: LD_VAR 0 3
11061: PPUSH
11062: LD_INT 1
11064: PPUSH
11065: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11069: LD_INT 52
11071: PPUSH
11072: LD_VAR 0 3
11076: PPUSH
11077: LD_INT 1
11079: PPUSH
11080: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11084: LD_INT 6
11086: PPUSH
11087: LD_VAR 0 3
11091: PPUSH
11092: LD_INT 1
11094: PPUSH
11095: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11099: LD_INT 15
11101: PPUSH
11102: LD_VAR 0 3
11106: PPUSH
11107: LD_INT 1
11109: PPUSH
11110: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11114: LD_INT 7
11116: PPUSH
11117: LD_VAR 0 3
11121: PPUSH
11122: LD_INT 1
11124: PPUSH
11125: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11129: LD_INT 12
11131: PPUSH
11132: LD_VAR 0 3
11136: PPUSH
11137: LD_INT 1
11139: PPUSH
11140: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11144: LD_INT 17
11146: PPUSH
11147: LD_VAR 0 3
11151: PPUSH
11152: LD_INT 1
11154: PPUSH
11155: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11159: LD_INT 18
11161: PPUSH
11162: LD_VAR 0 3
11166: PPUSH
11167: LD_INT 1
11169: PPUSH
11170: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11174: LD_INT 60
11176: PPUSH
11177: LD_VAR 0 3
11181: PPUSH
11182: LD_INT 1
11184: PPUSH
11185: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11189: LD_INT 32
11191: PPUSH
11192: LD_VAR 0 3
11196: PPUSH
11197: LD_INT 1
11199: PPUSH
11200: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11204: LD_INT 9
11206: PPUSH
11207: LD_VAR 0 3
11211: PPUSH
11212: LD_INT 1
11214: PPUSH
11215: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11219: LD_INT 57
11221: PPUSH
11222: LD_VAR 0 3
11226: PPUSH
11227: LD_INT 1
11229: PPUSH
11230: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11234: LD_INT 30
11236: PPUSH
11237: LD_VAR 0 3
11241: PPUSH
11242: LD_INT 1
11244: PPUSH
11245: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11249: LD_INT 37
11251: PPUSH
11252: LD_VAR 0 3
11256: PPUSH
11257: LD_INT 1
11259: PPUSH
11260: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11264: LD_INT 63
11266: PPUSH
11267: LD_VAR 0 3
11271: PPUSH
11272: LD_INT 1
11274: PPUSH
11275: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11279: LD_INT 3
11281: PPUSH
11282: LD_VAR 0 3
11286: PPUSH
11287: LD_INT 1
11289: PPUSH
11290: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11294: LD_INT 4
11296: PPUSH
11297: LD_VAR 0 3
11301: PPUSH
11302: LD_INT 1
11304: PPUSH
11305: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11309: LD_INT 5
11311: PPUSH
11312: LD_VAR 0 3
11316: PPUSH
11317: LD_INT 1
11319: PPUSH
11320: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11324: LD_INT 66
11326: PPUSH
11327: LD_VAR 0 3
11331: PPUSH
11332: LD_INT 1
11334: PPUSH
11335: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11339: LD_INT 21
11341: PPUSH
11342: LD_VAR 0 3
11346: PPUSH
11347: LD_INT 1
11349: PPUSH
11350: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11354: LD_INT 22
11356: PPUSH
11357: LD_VAR 0 3
11361: PPUSH
11362: LD_INT 1
11364: PPUSH
11365: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11369: LD_INT 19
11371: PPUSH
11372: LD_VAR 0 3
11376: PPUSH
11377: LD_INT 1
11379: PPUSH
11380: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11384: LD_INT 54
11386: PPUSH
11387: LD_VAR 0 3
11391: PPUSH
11392: LD_INT 1
11394: PPUSH
11395: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
11399: LD_INT 55
11401: PPUSH
11402: LD_VAR 0 3
11406: PPUSH
11407: LD_INT 1
11409: PPUSH
11410: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11414: LD_INT 0
11416: PPUSH
11417: LD_VAR 0 3
11421: PPUSH
11422: LD_INT 1
11424: PPUSH
11425: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11429: LD_INT 1
11431: PPUSH
11432: LD_VAR 0 3
11436: PPUSH
11437: LD_INT 1
11439: PPUSH
11440: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11444: LD_INT 2
11446: PPUSH
11447: LD_VAR 0 3
11451: PPUSH
11452: LD_INT 1
11454: PPUSH
11455: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11459: LD_INT 3
11461: PPUSH
11462: LD_VAR 0 3
11466: PPUSH
11467: LD_INT 1
11469: PPUSH
11470: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11474: LD_INT 4
11476: PPUSH
11477: LD_VAR 0 3
11481: PPUSH
11482: LD_INT 1
11484: PPUSH
11485: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11489: LD_INT 5
11491: PPUSH
11492: LD_VAR 0 3
11496: PPUSH
11497: LD_INT 1
11499: PPUSH
11500: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11504: LD_INT 6
11506: PPUSH
11507: LD_VAR 0 3
11511: PPUSH
11512: LD_INT 1
11514: PPUSH
11515: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11519: LD_INT 7
11521: PPUSH
11522: LD_VAR 0 3
11526: PPUSH
11527: LD_INT 1
11529: PPUSH
11530: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11534: LD_INT 8
11536: PPUSH
11537: LD_VAR 0 3
11541: PPUSH
11542: LD_INT 1
11544: PPUSH
11545: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11549: LD_INT 10
11551: PPUSH
11552: LD_VAR 0 3
11556: PPUSH
11557: LD_INT 1
11559: PPUSH
11560: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11564: LD_INT 11
11566: PPUSH
11567: LD_VAR 0 3
11571: PPUSH
11572: LD_INT 1
11574: PPUSH
11575: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11579: LD_INT 12
11581: PPUSH
11582: LD_VAR 0 3
11586: PPUSH
11587: LD_INT 1
11589: PPUSH
11590: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11594: LD_INT 13
11596: PPUSH
11597: LD_VAR 0 3
11601: PPUSH
11602: LD_INT 1
11604: PPUSH
11605: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11609: LD_INT 14
11611: PPUSH
11612: LD_VAR 0 3
11616: PPUSH
11617: LD_INT 1
11619: PPUSH
11620: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11624: LD_INT 15
11626: PPUSH
11627: LD_VAR 0 3
11631: PPUSH
11632: LD_INT 1
11634: PPUSH
11635: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11639: LD_INT 16
11641: PPUSH
11642: LD_VAR 0 3
11646: PPUSH
11647: LD_INT 1
11649: PPUSH
11650: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11654: LD_INT 17
11656: PPUSH
11657: LD_VAR 0 3
11661: PPUSH
11662: LD_INT 1
11664: PPUSH
11665: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
11669: LD_INT 18
11671: PPUSH
11672: LD_VAR 0 3
11676: PPUSH
11677: LD_INT 1
11679: PPUSH
11680: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11684: LD_INT 19
11686: PPUSH
11687: LD_VAR 0 3
11691: PPUSH
11692: LD_INT 1
11694: PPUSH
11695: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11699: LD_INT 20
11701: PPUSH
11702: LD_VAR 0 3
11706: PPUSH
11707: LD_INT 1
11709: PPUSH
11710: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11714: LD_INT 21
11716: PPUSH
11717: LD_VAR 0 3
11721: PPUSH
11722: LD_INT 1
11724: PPUSH
11725: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11729: LD_INT 23
11731: PPUSH
11732: LD_VAR 0 3
11736: PPUSH
11737: LD_INT 1
11739: PPUSH
11740: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11744: LD_INT 26
11746: PPUSH
11747: LD_VAR 0 3
11751: PPUSH
11752: LD_INT 1
11754: PPUSH
11755: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11759: LD_INT 27
11761: PPUSH
11762: LD_VAR 0 3
11766: PPUSH
11767: LD_INT 1
11769: PPUSH
11770: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11774: LD_INT 28
11776: PPUSH
11777: LD_VAR 0 3
11781: PPUSH
11782: LD_INT 1
11784: PPUSH
11785: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11789: LD_INT 29
11791: PPUSH
11792: LD_VAR 0 3
11796: PPUSH
11797: LD_INT 1
11799: PPUSH
11800: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11804: LD_INT 30
11806: PPUSH
11807: LD_VAR 0 3
11811: PPUSH
11812: LD_INT 1
11814: PPUSH
11815: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11819: LD_INT 31
11821: PPUSH
11822: LD_VAR 0 3
11826: PPUSH
11827: LD_INT 1
11829: PPUSH
11830: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11834: LD_INT 32
11836: PPUSH
11837: LD_VAR 0 3
11841: PPUSH
11842: LD_INT 1
11844: PPUSH
11845: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
11849: LD_INT 33
11851: PPUSH
11852: LD_VAR 0 3
11856: PPUSH
11857: LD_INT 1
11859: PPUSH
11860: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11864: LD_INT 36
11866: PPUSH
11867: LD_VAR 0 3
11871: PPUSH
11872: LD_INT 1
11874: PPUSH
11875: CALL_OW 324
// end ; 6 :
11879: GO 12889
11881: LD_INT 6
11883: DOUBLE
11884: EQUAL
11885: IFTRUE 11889
11887: GO 12814
11889: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11890: LD_INT 35
11892: PPUSH
11893: LD_VAR 0 3
11897: PPUSH
11898: LD_INT 1
11900: PPUSH
11901: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11905: LD_INT 45
11907: PPUSH
11908: LD_VAR 0 3
11912: PPUSH
11913: LD_INT 1
11915: PPUSH
11916: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11920: LD_INT 46
11922: PPUSH
11923: LD_VAR 0 3
11927: PPUSH
11928: LD_INT 1
11930: PPUSH
11931: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11935: LD_INT 47
11937: PPUSH
11938: LD_VAR 0 3
11942: PPUSH
11943: LD_INT 1
11945: PPUSH
11946: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11950: LD_INT 1
11952: PPUSH
11953: LD_VAR 0 3
11957: PPUSH
11958: LD_INT 1
11960: PPUSH
11961: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11965: LD_INT 2
11967: PPUSH
11968: LD_VAR 0 3
11972: PPUSH
11973: LD_INT 1
11975: PPUSH
11976: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11980: LD_INT 11
11982: PPUSH
11983: LD_VAR 0 3
11987: PPUSH
11988: LD_INT 1
11990: PPUSH
11991: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11995: LD_INT 20
11997: PPUSH
11998: LD_VAR 0 3
12002: PPUSH
12003: LD_INT 1
12005: PPUSH
12006: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12010: LD_INT 48
12012: PPUSH
12013: LD_VAR 0 3
12017: PPUSH
12018: LD_INT 1
12020: PPUSH
12021: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12025: LD_INT 49
12027: PPUSH
12028: LD_VAR 0 3
12032: PPUSH
12033: LD_INT 1
12035: PPUSH
12036: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12040: LD_INT 50
12042: PPUSH
12043: LD_VAR 0 3
12047: PPUSH
12048: LD_INT 1
12050: PPUSH
12051: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12055: LD_INT 69
12057: PPUSH
12058: LD_VAR 0 3
12062: PPUSH
12063: LD_INT 1
12065: PPUSH
12066: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12070: LD_INT 39
12072: PPUSH
12073: LD_VAR 0 3
12077: PPUSH
12078: LD_INT 1
12080: PPUSH
12081: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12085: LD_INT 34
12087: PPUSH
12088: LD_VAR 0 3
12092: PPUSH
12093: LD_INT 1
12095: PPUSH
12096: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12100: LD_INT 42
12102: PPUSH
12103: LD_VAR 0 3
12107: PPUSH
12108: LD_INT 1
12110: PPUSH
12111: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12115: LD_INT 44
12117: PPUSH
12118: LD_VAR 0 3
12122: PPUSH
12123: LD_INT 1
12125: PPUSH
12126: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12130: LD_INT 41
12132: PPUSH
12133: LD_VAR 0 3
12137: PPUSH
12138: LD_INT 1
12140: PPUSH
12141: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
12145: LD_INT 13
12147: PPUSH
12148: LD_VAR 0 3
12152: PPUSH
12153: LD_INT 1
12155: PPUSH
12156: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12160: LD_INT 40
12162: PPUSH
12163: LD_VAR 0 3
12167: PPUSH
12168: LD_INT 1
12170: PPUSH
12171: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12175: LD_INT 43
12177: PPUSH
12178: LD_VAR 0 3
12182: PPUSH
12183: LD_INT 1
12185: PPUSH
12186: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12190: LD_INT 70
12192: PPUSH
12193: LD_VAR 0 3
12197: PPUSH
12198: LD_INT 1
12200: PPUSH
12201: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
12205: LD_INT 23
12207: PPUSH
12208: LD_VAR 0 3
12212: PPUSH
12213: LD_INT 1
12215: PPUSH
12216: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12220: LD_INT 51
12222: PPUSH
12223: LD_VAR 0 3
12227: PPUSH
12228: LD_INT 1
12230: PPUSH
12231: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12235: LD_INT 52
12237: PPUSH
12238: LD_VAR 0 3
12242: PPUSH
12243: LD_INT 1
12245: PPUSH
12246: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12250: LD_INT 6
12252: PPUSH
12253: LD_VAR 0 3
12257: PPUSH
12258: LD_INT 1
12260: PPUSH
12261: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12265: LD_INT 15
12267: PPUSH
12268: LD_VAR 0 3
12272: PPUSH
12273: LD_INT 1
12275: PPUSH
12276: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12280: LD_INT 7
12282: PPUSH
12283: LD_VAR 0 3
12287: PPUSH
12288: LD_INT 1
12290: PPUSH
12291: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12295: LD_INT 12
12297: PPUSH
12298: LD_VAR 0 3
12302: PPUSH
12303: LD_INT 1
12305: PPUSH
12306: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
12310: LD_INT 10
12312: PPUSH
12313: LD_VAR 0 3
12317: PPUSH
12318: LD_INT 1
12320: PPUSH
12321: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12325: LD_INT 17
12327: PPUSH
12328: LD_VAR 0 3
12332: PPUSH
12333: LD_INT 1
12335: PPUSH
12336: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12340: LD_INT 18
12342: PPUSH
12343: LD_VAR 0 3
12347: PPUSH
12348: LD_INT 1
12350: PPUSH
12351: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12355: LD_INT 60
12357: PPUSH
12358: LD_VAR 0 3
12362: PPUSH
12363: LD_INT 1
12365: PPUSH
12366: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
12370: LD_INT 61
12372: PPUSH
12373: LD_VAR 0 3
12377: PPUSH
12378: LD_INT 1
12380: PPUSH
12381: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12385: LD_INT 32
12387: PPUSH
12388: LD_VAR 0 3
12392: PPUSH
12393: LD_INT 1
12395: PPUSH
12396: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
12400: LD_INT 27
12402: PPUSH
12403: LD_VAR 0 3
12407: PPUSH
12408: LD_INT 1
12410: PPUSH
12411: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
12415: LD_INT 36
12417: PPUSH
12418: LD_VAR 0 3
12422: PPUSH
12423: LD_INT 1
12425: PPUSH
12426: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
12430: LD_INT 33
12432: PPUSH
12433: LD_VAR 0 3
12437: PPUSH
12438: LD_INT 1
12440: PPUSH
12441: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12445: LD_INT 9
12447: PPUSH
12448: LD_VAR 0 3
12452: PPUSH
12453: LD_INT 1
12455: PPUSH
12456: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
12460: LD_INT 38
12462: PPUSH
12463: LD_VAR 0 3
12467: PPUSH
12468: LD_INT 1
12470: PPUSH
12471: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12475: LD_INT 57
12477: PPUSH
12478: LD_VAR 0 3
12482: PPUSH
12483: LD_INT 1
12485: PPUSH
12486: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
12490: LD_INT 58
12492: PPUSH
12493: LD_VAR 0 3
12497: PPUSH
12498: LD_INT 1
12500: PPUSH
12501: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
12505: LD_INT 28
12507: PPUSH
12508: LD_VAR 0 3
12512: PPUSH
12513: LD_INT 1
12515: PPUSH
12516: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
12520: LD_INT 29
12522: PPUSH
12523: LD_VAR 0 3
12527: PPUSH
12528: LD_INT 1
12530: PPUSH
12531: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12535: LD_INT 30
12537: PPUSH
12538: LD_VAR 0 3
12542: PPUSH
12543: LD_INT 1
12545: PPUSH
12546: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12550: LD_INT 37
12552: PPUSH
12553: LD_VAR 0 3
12557: PPUSH
12558: LD_INT 1
12560: PPUSH
12561: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12565: LD_INT 63
12567: PPUSH
12568: LD_VAR 0 3
12572: PPUSH
12573: LD_INT 1
12575: PPUSH
12576: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
12580: LD_INT 64
12582: PPUSH
12583: LD_VAR 0 3
12587: PPUSH
12588: LD_INT 1
12590: PPUSH
12591: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12595: LD_INT 3
12597: PPUSH
12598: LD_VAR 0 3
12602: PPUSH
12603: LD_INT 1
12605: PPUSH
12606: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12610: LD_INT 4
12612: PPUSH
12613: LD_VAR 0 3
12617: PPUSH
12618: LD_INT 1
12620: PPUSH
12621: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12625: LD_INT 5
12627: PPUSH
12628: LD_VAR 0 3
12632: PPUSH
12633: LD_INT 1
12635: PPUSH
12636: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
12640: LD_INT 8
12642: PPUSH
12643: LD_VAR 0 3
12647: PPUSH
12648: LD_INT 1
12650: PPUSH
12651: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12655: LD_INT 66
12657: PPUSH
12658: LD_VAR 0 3
12662: PPUSH
12663: LD_INT 1
12665: PPUSH
12666: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
12670: LD_INT 67
12672: PPUSH
12673: LD_VAR 0 3
12677: PPUSH
12678: LD_INT 1
12680: PPUSH
12681: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12685: LD_INT 21
12687: PPUSH
12688: LD_VAR 0 3
12692: PPUSH
12693: LD_INT 1
12695: PPUSH
12696: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12700: LD_INT 22
12702: PPUSH
12703: LD_VAR 0 3
12707: PPUSH
12708: LD_INT 1
12710: PPUSH
12711: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12715: LD_INT 19
12717: PPUSH
12718: LD_VAR 0 3
12722: PPUSH
12723: LD_INT 1
12725: PPUSH
12726: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
12730: LD_INT 26
12732: PPUSH
12733: LD_VAR 0 3
12737: PPUSH
12738: LD_INT 1
12740: PPUSH
12741: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12745: LD_INT 54
12747: PPUSH
12748: LD_VAR 0 3
12752: PPUSH
12753: LD_INT 1
12755: PPUSH
12756: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12760: LD_INT 55
12762: PPUSH
12763: LD_VAR 0 3
12767: PPUSH
12768: LD_INT 1
12770: PPUSH
12771: CALL_OW 322
// for i = 0 to 39 do
12775: LD_ADDR_VAR 0 4
12779: PUSH
12780: DOUBLE
12781: LD_INT 0
12783: DEC
12784: ST_TO_ADDR
12785: LD_INT 39
12787: PUSH
12788: FOR_TO
12789: IFFALSE 12810
// SetRestrict ( i , side , true ) ;
12791: LD_VAR 0 4
12795: PPUSH
12796: LD_VAR 0 3
12800: PPUSH
12801: LD_INT 1
12803: PPUSH
12804: CALL_OW 324
12808: GO 12788
12810: POP
12811: POP
// end ; else
12812: GO 12889
12814: POP
// begin for i = 1 to 73 do
12815: LD_ADDR_VAR 0 4
12819: PUSH
12820: DOUBLE
12821: LD_INT 1
12823: DEC
12824: ST_TO_ADDR
12825: LD_INT 73
12827: PUSH
12828: FOR_TO
12829: IFFALSE 12850
// SetTech ( i , side , state_enabled ) ;
12831: LD_VAR 0 4
12835: PPUSH
12836: LD_VAR 0 3
12840: PPUSH
12841: LD_INT 1
12843: PPUSH
12844: CALL_OW 322
12848: GO 12828
12850: POP
12851: POP
// for i = 0 to 39 do
12852: LD_ADDR_VAR 0 4
12856: PUSH
12857: DOUBLE
12858: LD_INT 0
12860: DEC
12861: ST_TO_ADDR
12862: LD_INT 39
12864: PUSH
12865: FOR_TO
12866: IFFALSE 12887
// SetRestrict ( i , side , true ) ;
12868: LD_VAR 0 4
12872: PPUSH
12873: LD_VAR 0 3
12877: PPUSH
12878: LD_INT 1
12880: PPUSH
12881: CALL_OW 324
12885: GO 12865
12887: POP
12888: POP
// end ; end ; end ;
12889: GO 8894
12891: POP
12892: POP
// end ;
12893: LD_VAR 0 2
12897: RET
