// export Game_Type ; export def_base_level , def_amount_of_people , def_initial_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_amount_of_apemen , def_people_respawning , def_siberite_bomb , def_builduptime ; export is_depot , number_of_breastworks , number_of_people , initial_level , amount_of_apemen , starting_crates , starting_resources , shipments_density , siberite_bomb_Delay , spawning_koef_of_apemen , respawning_time_min , respawning_time_max , def_win_rules , buildUpTime_Delay ; export Side_Count , Team_Count , Player_Side , Player_Team , Side_Teams , Teams ; export Side_Positions , Side_Nations , Side_Names , Team_Names , Team_Game , Side_Comps ; export depot_def , start_def , extra_oil_deposits_locations ; export heroes ; export commander , battle_flags_id , morale_decreasing_time ; var global_units , global_defined , soldiers_created ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function create_forest ; var area ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
// PlaceTreesToArea ( BigForest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , Rand ( 500 , 570 ) , 50 , 2 ) ;
  72: LD_INT 6
  74: PPUSH
  75: LD_INT 21
  77: PUSH
  78: LD_INT 22
  80: PUSH
  81: LD_INT 24
  83: PUSH
  84: LD_INT 21
  86: PUSH
  87: LD_INT 22
  89: PUSH
  90: LD_INT 24
  92: PUSH
  93: LD_INT 38
  95: PUSH
  96: LD_INT 39
  98: PUSH
  99: EMPTY
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: PPUSH
 109: LD_INT 500
 111: PPUSH
 112: LD_INT 570
 114: PPUSH
 115: CALL_OW 12
 119: PPUSH
 120: LD_INT 50
 122: PPUSH
 123: LD_INT 2
 125: PPUSH
 126: CALL_OW 352
// if def_base_level then
 130: LD_EXP 2
 134: IFFALSE 146
// area := bush_forest_small else
 136: LD_ADDR_VAR 0 2
 140: PUSH
 141: LD_INT 9
 143: ST_TO_ADDR
 144: GO 154
// area := bush_forest_big ;
 146: LD_ADDR_VAR 0 2
 150: PUSH
 151: LD_INT 8
 153: ST_TO_ADDR
// PlaceTreesToArea ( area , [ 38 , 39 , 37 ] , Rand ( 300 , 350 ) , 10 , 3 ) ;
 154: LD_VAR 0 2
 158: PPUSH
 159: LD_INT 38
 161: PUSH
 162: LD_INT 39
 164: PUSH
 165: LD_INT 37
 167: PUSH
 168: EMPTY
 169: LIST
 170: LIST
 171: LIST
 172: PPUSH
 173: LD_INT 300
 175: PPUSH
 176: LD_INT 350
 178: PPUSH
 179: CALL_OW 12
 183: PPUSH
 184: LD_INT 10
 186: PPUSH
 187: LD_INT 3
 189: PPUSH
 190: CALL_OW 352
// PlaceTreesToArea ( BigForest , [ 38 , 39 , 37 ] , 80 , 10 , 3 ) ;
 194: LD_INT 6
 196: PPUSH
 197: LD_INT 38
 199: PUSH
 200: LD_INT 39
 202: PUSH
 203: LD_INT 37
 205: PUSH
 206: EMPTY
 207: LIST
 208: LIST
 209: LIST
 210: PPUSH
 211: LD_INT 80
 213: PPUSH
 214: LD_INT 10
 216: PPUSH
 217: LD_INT 3
 219: PPUSH
 220: CALL_OW 352
// end ;
 224: LD_VAR 0 1
 228: RET
// function create_map_resources ; var un , oil_pos , sib_pos ; begin
 229: LD_INT 0
 231: PPUSH
 232: PPUSH
 233: PPUSH
 234: PPUSH
// oil_pos := [ [ 24 , 10 ] , [ 82 , 9 ] , [ 79 , 115 ] , [ 135 , 112 ] ] ;
 235: LD_ADDR_VAR 0 3
 239: PUSH
 240: LD_INT 24
 242: PUSH
 243: LD_INT 10
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: PUSH
 250: LD_INT 82
 252: PUSH
 253: LD_INT 9
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 79
 262: PUSH
 263: LD_INT 115
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 135
 272: PUSH
 273: LD_INT 112
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: PUSH
 280: EMPTY
 281: LIST
 282: LIST
 283: LIST
 284: LIST
 285: ST_TO_ADDR
// sib_pos := [ [ 24 , 29 ] , [ 102 , 29 ] , [ 60 , 93 ] , [ 134 , 91 ] ] ;
 286: LD_ADDR_VAR 0 4
 290: PUSH
 291: LD_INT 24
 293: PUSH
 294: LD_INT 29
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: PUSH
 301: LD_INT 102
 303: PUSH
 304: LD_INT 29
 306: PUSH
 307: EMPTY
 308: LIST
 309: LIST
 310: PUSH
 311: LD_INT 60
 313: PUSH
 314: LD_INT 93
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 134
 323: PUSH
 324: LD_INT 91
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: LIST
 335: LIST
 336: ST_TO_ADDR
// for un = 1 to 4 do
 337: LD_ADDR_VAR 0 2
 341: PUSH
 342: DOUBLE
 343: LD_INT 1
 345: DEC
 346: ST_TO_ADDR
 347: LD_INT 4
 349: PUSH
 350: FOR_TO
 351: IFFALSE 429
// begin CreateDepositXY ( oil_pos [ un ] [ 1 ] , oil_pos [ un ] [ 2 ] , mat_oil ) ;
 353: LD_VAR 0 3
 357: PUSH
 358: LD_VAR 0 2
 362: ARRAY
 363: PUSH
 364: LD_INT 1
 366: ARRAY
 367: PPUSH
 368: LD_VAR 0 3
 372: PUSH
 373: LD_VAR 0 2
 377: ARRAY
 378: PUSH
 379: LD_INT 2
 381: ARRAY
 382: PPUSH
 383: LD_INT 2
 385: PPUSH
 386: CALL_OW 62
// CreateDepositXY ( sib_pos [ un ] [ 1 ] , sib_pos [ un ] [ 2 ] , mat_siberit ) ;
 390: LD_VAR 0 4
 394: PUSH
 395: LD_VAR 0 2
 399: ARRAY
 400: PUSH
 401: LD_INT 1
 403: ARRAY
 404: PPUSH
 405: LD_VAR 0 4
 409: PUSH
 410: LD_VAR 0 2
 414: ARRAY
 415: PUSH
 416: LD_INT 2
 418: ARRAY
 419: PPUSH
 420: LD_INT 3
 422: PPUSH
 423: CALL_OW 62
// end ;
 427: GO 350
 429: POP
 430: POP
// end ;
 431: LD_VAR 0 1
 435: RET
// function init_map ; var i ; begin
 436: LD_INT 0
 438: PPUSH
 439: PPUSH
// extra_oil_deposits_locations := [ [ 38 , 6 ] , [ 67 , 6 ] , [ 94 , 115 ] , [ 116 , 99 ] ] ;
 440: LD_ADDR_EXP 43
 444: PUSH
 445: LD_INT 38
 447: PUSH
 448: LD_INT 6
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 67
 457: PUSH
 458: LD_INT 6
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: LD_INT 94
 467: PUSH
 468: LD_INT 115
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: LD_INT 116
 477: PUSH
 478: LD_INT 99
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: ST_TO_ADDR
// create_forest ;
 491: CALL 68 0 0
// create_map_resources ;
 495: CALL 229 0 0
// depot_def := [ [ 12 , 10 , 2 ] , [ 97 , 10 , 3 ] , [ 64 , 108 , 0 ] , [ 146 , 110 , 5 ] ] ;
 499: LD_ADDR_EXP 41
 503: PUSH
 504: LD_INT 12
 506: PUSH
 507: LD_INT 10
 509: PUSH
 510: LD_INT 2
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: LIST
 517: PUSH
 518: LD_INT 97
 520: PUSH
 521: LD_INT 10
 523: PUSH
 524: LD_INT 3
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: LIST
 531: PUSH
 532: LD_INT 64
 534: PUSH
 535: LD_INT 108
 537: PUSH
 538: LD_INT 0
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: LIST
 545: PUSH
 546: LD_INT 146
 548: PUSH
 549: LD_INT 110
 551: PUSH
 552: LD_INT 5
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: LIST
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: LIST
 565: ST_TO_ADDR
// if def_base_level then
 566: LD_EXP 2
 570: IFFALSE 625
// start_def := [ [ 16 , 14 ] , [ 96 , 13 ] , [ 65 , 105 ] , [ 141 , 105 ] ] else
 572: LD_ADDR_EXP 42
 576: PUSH
 577: LD_INT 16
 579: PUSH
 580: LD_INT 14
 582: PUSH
 583: EMPTY
 584: LIST
 585: LIST
 586: PUSH
 587: LD_INT 96
 589: PUSH
 590: LD_INT 13
 592: PUSH
 593: EMPTY
 594: LIST
 595: LIST
 596: PUSH
 597: LD_INT 65
 599: PUSH
 600: LD_INT 105
 602: PUSH
 603: EMPTY
 604: LIST
 605: LIST
 606: PUSH
 607: LD_INT 141
 609: PUSH
 610: LD_INT 105
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: ST_TO_ADDR
 623: GO 676
// start_def := [ [ 7 , 5 ] , [ 98 , 6 ] , [ 63 , 113 ] , [ 151 , 113 ] ] ;
 625: LD_ADDR_EXP 42
 629: PUSH
 630: LD_INT 7
 632: PUSH
 633: LD_INT 5
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: PUSH
 640: LD_INT 98
 642: PUSH
 643: LD_INT 6
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: PUSH
 650: LD_INT 63
 652: PUSH
 653: LD_INT 113
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: PUSH
 660: LD_INT 151
 662: PUSH
 663: LD_INT 113
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: ST_TO_ADDR
// end ;
 676: LD_VAR 0 1
 680: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
 681: LD_INT 0
 683: PPUSH
 684: PPUSH
 685: PPUSH
 686: PPUSH
 687: PPUSH
 688: PPUSH
 689: PPUSH
 690: PPUSH
 691: PPUSH
// if MultiPlayer then
 692: LD_OWVAR 4
 696: IFFALSE 780
// begin Game_Type = mp_game_type ;
 698: LD_ADDR_EXP 1
 702: PUSH
 703: LD_OWVAR 6
 707: ST_TO_ADDR
// Player_Side = mp_player_side ;
 708: LD_ADDR_EXP 31
 712: PUSH
 713: LD_OWVAR 7
 717: ST_TO_ADDR
// Player_Team = mp_player_team ;
 718: LD_ADDR_EXP 32
 722: PUSH
 723: LD_OWVAR 8
 727: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
 728: LD_ADDR_EXP 35
 732: PUSH
 733: LD_OWVAR 17
 737: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 738: LD_ADDR_EXP 33
 742: PUSH
 743: LD_OWVAR 15
 747: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 748: LD_ADDR_EXP 36
 752: PUSH
 753: LD_OWVAR 16
 757: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 758: LD_ADDR_EXP 40
 762: PUSH
 763: CALL 0 0 0
 767: ST_TO_ADDR
// Teams = mp_teams ;
 768: LD_ADDR_EXP 34
 772: PUSH
 773: LD_OWVAR 12
 777: ST_TO_ADDR
// end else
 778: GO 981
// begin Game_Type = 2 ;
 780: LD_ADDR_EXP 1
 784: PUSH
 785: LD_INT 2
 787: ST_TO_ADDR
// Player_Side = 4 ;
 788: LD_ADDR_EXP 31
 792: PUSH
 793: LD_INT 4
 795: ST_TO_ADDR
// Side_Positions = [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 796: LD_ADDR_EXP 35
 800: PUSH
 801: LD_INT 0
 803: PUSH
 804: LD_INT 3
 806: PUSH
 807: LD_INT 0
 809: PUSH
 810: LD_INT 1
 812: PUSH
 813: LD_INT 0
 815: PUSH
 816: LD_INT 2
 818: PUSH
 819: LD_INT 4
 821: PUSH
 822: LD_INT 0
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: LIST
 834: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 2 , 0 , 1 , 2 , 0 ] ;
 835: LD_ADDR_EXP 33
 839: PUSH
 840: LD_INT 0
 842: PUSH
 843: LD_INT 1
 845: PUSH
 846: LD_INT 0
 848: PUSH
 849: LD_INT 2
 851: PUSH
 852: LD_INT 0
 854: PUSH
 855: LD_INT 1
 857: PUSH
 858: LD_INT 2
 860: PUSH
 861: LD_INT 0
 863: PUSH
 864: EMPTY
 865: LIST
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: LIST
 871: LIST
 872: LIST
 873: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 2 , 0 , 1 , 3 , 0 ] ;
 874: LD_ADDR_EXP 36
 878: PUSH
 879: LD_INT 0
 881: PUSH
 882: LD_INT 3
 884: PUSH
 885: LD_INT 0
 887: PUSH
 888: LD_INT 2
 890: PUSH
 891: LD_INT 0
 893: PUSH
 894: LD_INT 1
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: LD_INT 0
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 913: LD_ADDR_EXP 40
 917: PUSH
 918: LD_INT 0
 920: PUSH
 921: LD_INT 0
 923: PUSH
 924: LD_INT 0
 926: PUSH
 927: LD_INT 0
 929: PUSH
 930: LD_INT 0
 932: PUSH
 933: LD_INT 0
 935: PUSH
 936: LD_INT 0
 938: PUSH
 939: LD_INT 0
 941: PUSH
 942: EMPTY
 943: LIST
 944: LIST
 945: LIST
 946: LIST
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: ST_TO_ADDR
// Teams = [ [ 2 , 6 ] , [ 4 , 7 ] ] ;
 952: LD_ADDR_EXP 34
 956: PUSH
 957: LD_INT 2
 959: PUSH
 960: LD_INT 6
 962: PUSH
 963: EMPTY
 964: LIST
 965: LIST
 966: PUSH
 967: LD_INT 4
 969: PUSH
 970: LD_INT 7
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: ST_TO_ADDR
// end ; Side_Count = ( Side_Positions diff [ 0 ] ) + 0 ;
 981: LD_ADDR_EXP 29
 985: PUSH
 986: LD_EXP 35
 990: PUSH
 991: LD_INT 0
 993: PUSH
 994: EMPTY
 995: LIST
 996: DIFF
 997: PUSH
 998: LD_INT 0
1000: PLUS
1001: ST_TO_ADDR
// Team_Count = ( Side_Teams diff [ 0 ] ) + 0 ;
1002: LD_ADDR_EXP 30
1006: PUSH
1007: LD_EXP 33
1011: PUSH
1012: LD_INT 0
1014: PUSH
1015: EMPTY
1016: LIST
1017: DIFF
1018: PUSH
1019: LD_INT 0
1021: PLUS
1022: ST_TO_ADDR
// if MultiPlayer then
1023: LD_OWVAR 4
1027: IFFALSE 1221
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
1029: LD_ADDR_EXP 2
1033: PUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL_OW 426
1041: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
1042: LD_ADDR_EXP 3
1046: PUSH
1047: LD_INT 1
1049: PPUSH
1050: CALL_OW 426
1054: ST_TO_ADDR
// def_initial_level = GetMultiplayerSetting ( 2 ) ;
1055: LD_ADDR_EXP 4
1059: PUSH
1060: LD_INT 2
1062: PPUSH
1063: CALL_OW 426
1067: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
1068: LD_ADDR_EXP 5
1072: PUSH
1073: LD_INT 3
1075: PPUSH
1076: CALL_OW 426
1080: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
1081: LD_ADDR_EXP 6
1085: PUSH
1086: LD_INT 4
1088: PPUSH
1089: CALL_OW 426
1093: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
1094: LD_ADDR_EXP 7
1098: PUSH
1099: LD_INT 5
1101: PPUSH
1102: CALL_OW 426
1106: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
1107: LD_ADDR_EXP 8
1111: PUSH
1112: LD_INT 10
1114: PPUSH
1115: CALL_OW 426
1119: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
1120: LD_ADDR_EXP 9
1124: PUSH
1125: LD_INT 11
1127: PPUSH
1128: CALL_OW 426
1132: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
1133: LD_ADDR_EXP 10
1137: PUSH
1138: LD_INT 12
1140: PPUSH
1141: CALL_OW 426
1145: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
1146: LD_ADDR_EXP 11
1150: PUSH
1151: LD_INT 13
1153: PPUSH
1154: CALL_OW 426
1158: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
1159: LD_ADDR_EXP 12
1163: PUSH
1164: LD_INT 14
1166: PPUSH
1167: CALL_OW 426
1171: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
1172: LD_ADDR_EXP 13
1176: PUSH
1177: LD_INT 15
1179: PPUSH
1180: CALL_OW 426
1184: ST_TO_ADDR
// def_win_rules = 0 ;
1185: LD_ADDR_EXP 27
1189: PUSH
1190: LD_INT 0
1192: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
1193: LD_ADDR_EXP 14
1197: PUSH
1198: LD_INT 20
1200: PPUSH
1201: CALL_OW 426
1205: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
1206: LD_ADDR_VAR 0 9
1210: PUSH
1211: LD_INT 22
1213: PPUSH
1214: CALL_OW 426
1218: ST_TO_ADDR
// end else
1219: GO 1345
// begin randomize ;
1221: CALL_OW 10
// def_base_level = 0 ;
1225: LD_ADDR_EXP 2
1229: PUSH
1230: LD_INT 0
1232: ST_TO_ADDR
// def_amount_of_people = 1 ;
1233: LD_ADDR_EXP 3
1237: PUSH
1238: LD_INT 1
1240: ST_TO_ADDR
// def_initial_level = 1 ;
1241: LD_ADDR_EXP 4
1245: PUSH
1246: LD_INT 1
1248: ST_TO_ADDR
// def_starting_resources = 2 ;
1249: LD_ADDR_EXP 5
1253: PUSH
1254: LD_INT 2
1256: ST_TO_ADDR
// def_shipments_density = 1 ;
1257: LD_ADDR_EXP 6
1261: PUSH
1262: LD_INT 1
1264: ST_TO_ADDR
// def_extra_oil_deposits = 0 ;
1265: LD_ADDR_EXP 7
1269: PUSH
1270: LD_INT 0
1272: ST_TO_ADDR
// def_shared_vision = 1 ;
1273: LD_ADDR_EXP 8
1277: PUSH
1278: LD_INT 1
1280: ST_TO_ADDR
// def_morale_flags = 1 ;
1281: LD_ADDR_EXP 9
1285: PUSH
1286: LD_INT 1
1288: ST_TO_ADDR
// def_siberite_detection = 1 ;
1289: LD_ADDR_EXP 10
1293: PUSH
1294: LD_INT 1
1296: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
1297: LD_ADDR_EXP 11
1301: PUSH
1302: LD_INT 3
1304: ST_TO_ADDR
// def_people_respawning = 2 ;
1305: LD_ADDR_EXP 12
1309: PUSH
1310: LD_INT 2
1312: ST_TO_ADDR
// def_siberite_bomb = 0 ;
1313: LD_ADDR_EXP 13
1317: PUSH
1318: LD_INT 0
1320: ST_TO_ADDR
// def_win_rules = 0 ;
1321: LD_ADDR_EXP 27
1325: PUSH
1326: LD_INT 0
1328: ST_TO_ADDR
// def_builduptime := 1 ;
1329: LD_ADDR_EXP 14
1333: PUSH
1334: LD_INT 1
1336: ST_TO_ADDR
// tech_level = 4 ;
1337: LD_ADDR_VAR 0 9
1341: PUSH
1342: LD_INT 4
1344: ST_TO_ADDR
// end ; if isSGUI then
1345: LD_OWVAR 83
1349: IFFALSE 1357
// setMpTechs ( ) else
1351: CALL 9412 0 0
1355: GO 1370
// begin SetMpTechLevel ( tech_level + 1 ) ;
1357: LD_VAR 0 9
1361: PUSH
1362: LD_INT 1
1364: PLUS
1365: PPUSH
1366: CALL 9559 0 1
// end ; is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1370: LD_ADDR_EXP 15
1374: PUSH
1375: LD_INT 0
1377: PUSH
1378: LD_INT 1
1380: PUSH
1381: LD_INT 1
1383: PUSH
1384: LD_INT 1
1386: PUSH
1387: EMPTY
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: PUSH
1393: LD_EXP 2
1397: PUSH
1398: LD_INT 1
1400: PLUS
1401: ARRAY
1402: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 0 , 0 ] [ def_base_level + 1 ] ;
1403: LD_ADDR_EXP 16
1407: PUSH
1408: LD_INT 0
1410: PUSH
1411: LD_INT 0
1413: PUSH
1414: LD_INT 0
1416: PUSH
1417: LD_INT 0
1419: PUSH
1420: EMPTY
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: PUSH
1426: LD_EXP 2
1430: PUSH
1431: LD_INT 1
1433: PLUS
1434: ARRAY
1435: ST_TO_ADDR
// number_of_people = [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
1436: LD_ADDR_EXP 17
1440: PUSH
1441: LD_INT 9
1443: PUSH
1444: LD_INT 12
1446: PUSH
1447: LD_INT 15
1449: PUSH
1450: LD_INT 24
1452: PUSH
1453: EMPTY
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: PUSH
1459: LD_EXP 3
1463: PUSH
1464: LD_INT 1
1466: PLUS
1467: ARRAY
1468: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_initial_level + 1 ] ;
1469: LD_ADDR_EXP 18
1473: PUSH
1474: LD_INT 2
1476: PUSH
1477: LD_INT 3
1479: PUSH
1480: LD_INT 4
1482: PUSH
1483: LD_INT 5
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: PUSH
1492: LD_EXP 4
1496: PUSH
1497: LD_INT 1
1499: PLUS
1500: ARRAY
1501: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1502: LD_ADDR_EXP 21
1506: PUSH
1507: LD_INT 0
1509: PUSH
1510: LD_INT 0
1512: PUSH
1513: LD_INT 0
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: LIST
1520: PUSH
1521: LD_INT 30
1523: PUSH
1524: LD_INT 0
1526: PUSH
1527: LD_INT 0
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: PUSH
1535: LD_INT 50
1537: PUSH
1538: LD_INT 20
1540: PUSH
1541: LD_INT 0
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 80
1551: PUSH
1552: LD_INT 40
1554: PUSH
1555: LD_INT 20
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: PUSH
1563: EMPTY
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: PUSH
1569: LD_EXP 5
1573: PUSH
1574: LD_INT 1
1576: PLUS
1577: ARRAY
1578: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1579: LD_ADDR_EXP 20
1583: PUSH
1584: LD_INT 10
1586: PUSH
1587: EMPTY
1588: LIST
1589: PUSH
1590: LD_INT 7
1592: PUSH
1593: LD_INT 14
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: PUSH
1600: LD_INT 6
1602: PUSH
1603: LD_INT 12
1605: PUSH
1606: LD_INT 18
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: PUSH
1614: LD_INT 5
1616: PUSH
1617: LD_INT 10
1619: PUSH
1620: LD_INT 15
1622: PUSH
1623: LD_INT 20
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: PUSH
1638: LD_EXP 5
1642: PUSH
1643: LD_INT 1
1645: PLUS
1646: ARRAY
1647: ST_TO_ADDR
// shipments_density = [ 20 , 30 , 40 ] [ def_shipments_density + 1 ] ;
1648: LD_ADDR_EXP 22
1652: PUSH
1653: LD_INT 20
1655: PUSH
1656: LD_INT 30
1658: PUSH
1659: LD_INT 40
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: LIST
1666: PUSH
1667: LD_EXP 6
1671: PUSH
1672: LD_INT 1
1674: PLUS
1675: ARRAY
1676: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1677: LD_ADDR_EXP 19
1681: PUSH
1682: LD_INT 0
1684: PUSH
1685: LD_INT 1
1687: PUSH
1688: LD_INT 2
1690: PUSH
1691: LD_INT 3
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: PUSH
1700: LD_EXP 11
1704: PUSH
1705: LD_INT 1
1707: PLUS
1708: ARRAY
1709: ST_TO_ADDR
// spawning_koef_of_apemen = [ 0 , 165 , 140 , 115 ] [ def_amount_of_apemen + 1 ] ;
1710: LD_ADDR_EXP 24
1714: PUSH
1715: LD_INT 0
1717: PUSH
1718: LD_INT 165
1720: PUSH
1721: LD_INT 140
1723: PUSH
1724: LD_INT 115
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: PUSH
1733: LD_EXP 11
1737: PUSH
1738: LD_INT 1
1740: PLUS
1741: ARRAY
1742: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1743: LD_ADDR_EXP 25
1747: PUSH
1748: LD_INT 0
1750: PUSH
1751: LD_INT 8400
1753: PUSH
1754: LD_INT 1750
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: LIST
1761: PUSH
1762: LD_EXP 12
1766: PUSH
1767: LD_INT 1
1769: PLUS
1770: ARRAY
1771: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1772: LD_ADDR_EXP 26
1776: PUSH
1777: LD_INT 0
1779: PUSH
1780: LD_INT 21000
1782: PUSH
1783: LD_INT 4200
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: LIST
1790: PUSH
1791: LD_EXP 12
1795: PUSH
1796: LD_INT 1
1798: PLUS
1799: ARRAY
1800: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1801: LD_ADDR_EXP 23
1805: PUSH
1806: LD_INT 0
1808: PUSH
1809: LD_INT 1
1811: PUSH
1812: LD_INT 63000
1814: PUSH
1815: LD_INT 126000
1817: PUSH
1818: LD_INT 189000
1820: PUSH
1821: LD_INT 252000
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: PUSH
1832: LD_EXP 13
1836: PUSH
1837: LD_INT 1
1839: PLUS
1840: ARRAY
1841: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1842: LD_ADDR_EXP 47
1846: PUSH
1847: LD_INT 1
1849: NEG
1850: PUSH
1851: LD_INT 350
1853: PUSH
1854: LD_INT 700
1856: PUSH
1857: LD_INT 1400
1859: PUSH
1860: LD_INT 0
1862: PUSH
1863: EMPTY
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: PUSH
1870: LD_EXP 9
1874: PUSH
1875: LD_INT 1
1877: PLUS
1878: ARRAY
1879: ST_TO_ADDR
// battle_flags_id = [ ] ;
1880: LD_ADDR_EXP 46
1884: PUSH
1885: EMPTY
1886: ST_TO_ADDR
// end ;
1887: LD_VAR 0 1
1891: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1892: LD_INT 0
1894: PPUSH
1895: PPUSH
1896: PPUSH
// Team_Game := 0 ;
1897: LD_ADDR_EXP 39
1901: PUSH
1902: LD_INT 0
1904: ST_TO_ADDR
// for i = 1 to 8 do
1905: LD_ADDR_VAR 0 2
1909: PUSH
1910: DOUBLE
1911: LD_INT 1
1913: DEC
1914: ST_TO_ADDR
1915: LD_INT 8
1917: PUSH
1918: FOR_TO
1919: IFFALSE 1945
// Team_Game := Team_Game + Side_Teams [ i ] ;
1921: LD_ADDR_EXP 39
1925: PUSH
1926: LD_EXP 39
1930: PUSH
1931: LD_EXP 33
1935: PUSH
1936: LD_VAR 0 2
1940: ARRAY
1941: PLUS
1942: ST_TO_ADDR
1943: GO 1918
1945: POP
1946: POP
// if not Team_Game then
1947: LD_EXP 39
1951: NOT
1952: IFFALSE 1964
// Team_Game := false else
1954: LD_ADDR_EXP 39
1958: PUSH
1959: LD_INT 0
1961: ST_TO_ADDR
1962: GO 1972
// Team_Game := true ;
1964: LD_ADDR_EXP 39
1968: PUSH
1969: LD_INT 1
1971: ST_TO_ADDR
// if not Team_Game then
1972: LD_EXP 39
1976: NOT
1977: IFFALSE 2075
// begin for i = 1 to 8 do
1979: LD_ADDR_VAR 0 2
1983: PUSH
1984: DOUBLE
1985: LD_INT 1
1987: DEC
1988: ST_TO_ADDR
1989: LD_INT 8
1991: PUSH
1992: FOR_TO
1993: IFFALSE 2071
// for j = 1 to 8 do
1995: LD_ADDR_VAR 0 3
1999: PUSH
2000: DOUBLE
2001: LD_INT 1
2003: DEC
2004: ST_TO_ADDR
2005: LD_INT 8
2007: PUSH
2008: FOR_TO
2009: IFFALSE 2067
// if i <> j then
2011: LD_VAR 0 2
2015: PUSH
2016: LD_VAR 0 3
2020: NONEQUAL
2021: IFFALSE 2045
// SetAttitude ( i , j , att_neutral , true ) else
2023: LD_VAR 0 2
2027: PPUSH
2028: LD_VAR 0 3
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: LD_INT 1
2038: PPUSH
2039: CALL_OW 80
2043: GO 2065
// SetAttitude ( i , j , att_friend , true ) ;
2045: LD_VAR 0 2
2049: PPUSH
2050: LD_VAR 0 3
2054: PPUSH
2055: LD_INT 1
2057: PPUSH
2058: LD_INT 1
2060: PPUSH
2061: CALL_OW 80
2065: GO 2008
2067: POP
2068: POP
2069: GO 1992
2071: POP
2072: POP
// end else
2073: GO 2250
// begin if def_shared_vision then
2075: LD_EXP 8
2079: IFFALSE 2144
// begin for i in Teams do
2081: LD_ADDR_VAR 0 2
2085: PUSH
2086: LD_EXP 34
2090: PUSH
2091: FOR_IN
2092: IFFALSE 2142
// for j = 2 to i do
2094: LD_ADDR_VAR 0 3
2098: PUSH
2099: DOUBLE
2100: LD_INT 2
2102: DEC
2103: ST_TO_ADDR
2104: LD_VAR 0 2
2108: PUSH
2109: FOR_TO
2110: IFFALSE 2138
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2112: LD_VAR 0 2
2116: PUSH
2117: LD_VAR 0 3
2121: ARRAY
2122: PPUSH
2123: LD_VAR 0 2
2127: PUSH
2128: LD_INT 1
2130: ARRAY
2131: PPUSH
2132: CALL_OW 343
2136: GO 2109
2138: POP
2139: POP
2140: GO 2091
2142: POP
2143: POP
// end ; for i = 1 to 8 do
2144: LD_ADDR_VAR 0 2
2148: PUSH
2149: DOUBLE
2150: LD_INT 1
2152: DEC
2153: ST_TO_ADDR
2154: LD_INT 8
2156: PUSH
2157: FOR_TO
2158: IFFALSE 2248
// for j = 1 to 8 do
2160: LD_ADDR_VAR 0 3
2164: PUSH
2165: DOUBLE
2166: LD_INT 1
2168: DEC
2169: ST_TO_ADDR
2170: LD_INT 8
2172: PUSH
2173: FOR_TO
2174: IFFALSE 2244
// if Side_Teams [ i ] = Side_Teams [ j ] then
2176: LD_EXP 33
2180: PUSH
2181: LD_VAR 0 2
2185: ARRAY
2186: PUSH
2187: LD_EXP 33
2191: PUSH
2192: LD_VAR 0 3
2196: ARRAY
2197: EQUAL
2198: IFFALSE 2222
// SetAttitude ( i , j , att_friend , true ) else
2200: LD_VAR 0 2
2204: PPUSH
2205: LD_VAR 0 3
2209: PPUSH
2210: LD_INT 1
2212: PPUSH
2213: LD_INT 1
2215: PPUSH
2216: CALL_OW 80
2220: GO 2242
// SetAttitude ( i , j , att_enemy , true ) ;
2222: LD_VAR 0 2
2226: PPUSH
2227: LD_VAR 0 3
2231: PPUSH
2232: LD_INT 2
2234: PPUSH
2235: LD_INT 1
2237: PPUSH
2238: CALL_OW 80
2242: GO 2173
2244: POP
2245: POP
2246: GO 2157
2248: POP
2249: POP
// end ; end ;
2250: LD_VAR 0 1
2254: RET
// function prepare_people ( side , count , cl , x , y , r , var commander ) ; var i , j , un ; begin
2255: LD_INT 0
2257: PPUSH
2258: PPUSH
2259: PPUSH
2260: PPUSH
// result := [ ] ;
2261: LD_ADDR_VAR 0 8
2265: PUSH
2266: EMPTY
2267: ST_TO_ADDR
// for i := 1 to count do
2268: LD_ADDR_VAR 0 9
2272: PUSH
2273: DOUBLE
2274: LD_INT 1
2276: DEC
2277: ST_TO_ADDR
2278: LD_VAR 0 2
2282: PUSH
2283: FOR_TO
2284: IFFALSE 2678
// begin uc_direction := Rand ( 0 , 5 ) ;
2286: LD_ADDR_OWVAR 24
2290: PUSH
2291: LD_INT 0
2293: PPUSH
2294: LD_INT 5
2296: PPUSH
2297: CALL_OW 12
2301: ST_TO_ADDR
// if commander then
2302: LD_FROM_VAR 0 7
2306: IFFALSE 2415
// begin hc_name := mp_sides_players_names [ side ] ;
2308: LD_ADDR_OWVAR 26
2312: PUSH
2313: LD_OWVAR 19
2317: PUSH
2318: LD_VAR 0 1
2322: ARRAY
2323: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
2324: LD_INT 1
2326: PPUSH
2327: LD_INT 2
2329: PPUSH
2330: CALL_OW 12
2334: PPUSH
2335: LD_VAR 0 3
2339: PPUSH
2340: LD_EXP 18
2344: PUSH
2345: LD_INT 2
2347: PLUS
2348: PPUSH
2349: CALL_OW 380
// hc_importance := 105 ;
2353: LD_ADDR_OWVAR 32
2357: PUSH
2358: LD_INT 105
2360: ST_TO_ADDR
// commander := false ;
2361: LD_VAR 0 7
2365: PUSH
2366: LD_INT 0
2368: ST_TO_ADDR
// if Multiplayer then
2369: LD_OWVAR 4
2373: IFFALSE 2413
// begin hc_gallery := MULTIAVATARS ;
2375: LD_ADDR_OWVAR 33
2379: PUSH
2380: LD_STRING MULTIAVATARS
2382: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( Side ) ;
2383: LD_ADDR_OWVAR 34
2387: PUSH
2388: LD_VAR 0 1
2392: PPUSH
2393: CALL_OW 525
2397: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( Side ) ;
2398: LD_ADDR_OWVAR 27
2402: PUSH
2403: LD_VAR 0 1
2407: PPUSH
2408: CALL_OW 526
2412: ST_TO_ADDR
// end ; end else
2413: GO 2478
// begin hc_name :=  ;
2415: LD_ADDR_OWVAR 26
2419: PUSH
2420: LD_STRING 
2422: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
2423: LD_INT 1
2425: PPUSH
2426: LD_INT 2
2428: PPUSH
2429: CALL_OW 12
2433: PPUSH
2434: LD_VAR 0 3
2438: PPUSH
2439: LD_EXP 18
2443: PPUSH
2444: CALL_OW 380
// hc_importance := 0 ;
2448: LD_ADDR_OWVAR 32
2452: PUSH
2453: LD_INT 0
2455: ST_TO_ADDR
// if Multiplayer then
2456: LD_OWVAR 4
2460: IFFALSE 2478
// begin hc_gallery :=  ;
2462: LD_ADDR_OWVAR 33
2466: PUSH
2467: LD_STRING 
2469: ST_TO_ADDR
// hc_face_number := 0 ;
2470: LD_ADDR_OWVAR 34
2474: PUSH
2475: LD_INT 0
2477: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2478: LD_ADDR_VAR 0 11
2482: PUSH
2483: CALL_OW 44
2487: ST_TO_ADDR
// if global_defined then
2488: LD_LOC 2
2492: IFFALSE 2630
// begin j := i ;
2494: LD_ADDR_VAR 0 10
2498: PUSH
2499: LD_VAR 0 9
2503: ST_TO_ADDR
// if cl = class_soldier then
2504: LD_VAR 0 3
2508: PUSH
2509: LD_INT 1
2511: EQUAL
2512: IFFALSE 2530
// j := i + soldiers_created ;
2514: LD_ADDR_VAR 0 10
2518: PUSH
2519: LD_VAR 0 9
2523: PUSH
2524: LD_LOC 3
2528: PLUS
2529: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2530: LD_LOC 1
2534: PUSH
2535: LD_VAR 0 3
2539: ARRAY
2540: PUSH
2541: LD_VAR 0 10
2545: ARRAY
2546: PPUSH
2547: LD_VAR 0 11
2551: PPUSH
2552: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2556: LD_VAR 0 11
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_LOC 1
2568: PUSH
2569: LD_VAR 0 3
2573: ARRAY
2574: PUSH
2575: LD_VAR 0 10
2579: ARRAY
2580: PPUSH
2581: LD_INT 2
2583: PPUSH
2584: CALL_OW 260
2588: PPUSH
2589: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2593: LD_VAR 0 11
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: LD_LOC 1
2605: PUSH
2606: LD_VAR 0 3
2610: ARRAY
2611: PUSH
2612: LD_VAR 0 10
2616: ARRAY
2617: PPUSH
2618: LD_INT 1
2620: PPUSH
2621: CALL_OW 260
2625: PPUSH
2626: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2630: LD_VAR 0 11
2634: PPUSH
2635: LD_VAR 0 4
2639: PPUSH
2640: LD_VAR 0 5
2644: PPUSH
2645: LD_VAR 0 6
2649: PPUSH
2650: LD_INT 0
2652: PPUSH
2653: CALL_OW 50
// result := result ^ [ un ] ;
2657: LD_ADDR_VAR 0 8
2661: PUSH
2662: LD_VAR 0 8
2666: PUSH
2667: LD_VAR 0 11
2671: PUSH
2672: EMPTY
2673: LIST
2674: ADD
2675: ST_TO_ADDR
// end ;
2676: GO 2283
2678: POP
2679: POP
// if not global_defined then
2680: LD_LOC 2
2684: NOT
2685: IFFALSE 2747
// if cl = class_soldier and global_units then
2687: LD_VAR 0 3
2691: PUSH
2692: LD_INT 1
2694: EQUAL
2695: PUSH
2696: LD_LOC 1
2700: AND
2701: IFFALSE 2728
// global_units := [ global_units [ 1 ] ^ result ] else
2703: LD_ADDR_LOC 1
2707: PUSH
2708: LD_LOC 1
2712: PUSH
2713: LD_INT 1
2715: ARRAY
2716: PUSH
2717: LD_VAR 0 8
2721: ADD
2722: PUSH
2723: EMPTY
2724: LIST
2725: ST_TO_ADDR
2726: GO 2747
// global_units := global_units ^ [ result ] ;
2728: LD_ADDR_LOC 1
2732: PUSH
2733: LD_LOC 1
2737: PUSH
2738: LD_VAR 0 8
2742: PUSH
2743: EMPTY
2744: LIST
2745: ADD
2746: ST_TO_ADDR
// if commander then
2747: LD_FROM_VAR 0 7
2751: IFFALSE 2798
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2753: LD_ADDR_EXP 44
2757: PUSH
2758: LD_EXP 44
2762: PPUSH
2763: LD_OWVAR 20
2767: PPUSH
2768: LD_EXP 44
2772: PUSH
2773: LD_OWVAR 20
2777: ARRAY
2778: PUSH
2779: LD_VAR 0 11
2783: ADD
2784: PPUSH
2785: CALL_OW 1
2789: ST_TO_ADDR
// commander := false ;
2790: LD_VAR 0 7
2794: PUSH
2795: LD_INT 0
2797: ST_TO_ADDR
// end ; end ;
2798: LD_VAR 0 8
2802: RET
// function prepare_buldozer ( x , y , r , pos ) ; var nation ; begin
2803: LD_INT 0
2805: PPUSH
2806: PPUSH
// if uc_nation = 2 then
2807: LD_OWVAR 21
2811: PUSH
2812: LD_INT 2
2814: EQUAL
2815: IFFALSE 2837
// begin nation := uc_nation ;
2817: LD_ADDR_VAR 0 6
2821: PUSH
2822: LD_OWVAR 21
2826: ST_TO_ADDR
// uc_nation := 1 ;
2827: LD_ADDR_OWVAR 21
2831: PUSH
2832: LD_INT 1
2834: ST_TO_ADDR
// end else
2835: GO 2845
// nation := false ;
2837: LD_ADDR_VAR 0 6
2841: PUSH
2842: LD_INT 0
2844: ST_TO_ADDR
// vc_engine = engine_combustion ;
2845: LD_ADDR_OWVAR 39
2849: PUSH
2850: LD_INT 1
2852: ST_TO_ADDR
// vc_control = control_manual ;
2853: LD_ADDR_OWVAR 38
2857: PUSH
2858: LD_INT 1
2860: ST_TO_ADDR
// if uc_nation = nation_russian then
2861: LD_OWVAR 21
2865: PUSH
2866: LD_INT 3
2868: EQUAL
2869: IFFALSE 2889
// begin vc_chassis = ru_heavy_tracked ;
2871: LD_ADDR_OWVAR 37
2875: PUSH
2876: LD_INT 24
2878: ST_TO_ADDR
// vc_weapon = ru_bulldozer ;
2879: LD_ADDR_OWVAR 40
2883: PUSH
2884: LD_INT 53
2886: ST_TO_ADDR
// end else
2887: GO 2905
// begin vc_chassis = us_heavy_tracked ;
2889: LD_ADDR_OWVAR 37
2893: PUSH
2894: LD_INT 4
2896: ST_TO_ADDR
// vc_weapon = us_bulldozer ;
2897: LD_ADDR_OWVAR 40
2901: PUSH
2902: LD_INT 14
2904: ST_TO_ADDR
// end ; case pos of 1 :
2905: LD_VAR 0 4
2909: PUSH
2910: LD_INT 1
2912: DOUBLE
2913: EQUAL
2914: IFTRUE 2918
2916: GO 2929
2918: POP
// uc_direction := 2 ; 2 :
2919: LD_ADDR_OWVAR 24
2923: PUSH
2924: LD_INT 2
2926: ST_TO_ADDR
2927: GO 2987
2929: LD_INT 2
2931: DOUBLE
2932: EQUAL
2933: IFTRUE 2937
2935: GO 2948
2937: POP
// uc_direction := 3 ; 3 :
2938: LD_ADDR_OWVAR 24
2942: PUSH
2943: LD_INT 3
2945: ST_TO_ADDR
2946: GO 2987
2948: LD_INT 3
2950: DOUBLE
2951: EQUAL
2952: IFTRUE 2956
2954: GO 2967
2956: POP
// uc_direction := 0 ; 4 :
2957: LD_ADDR_OWVAR 24
2961: PUSH
2962: LD_INT 0
2964: ST_TO_ADDR
2965: GO 2987
2967: LD_INT 4
2969: DOUBLE
2970: EQUAL
2971: IFTRUE 2975
2973: GO 2986
2975: POP
// uc_direction := 5 ; end ;
2976: LD_ADDR_OWVAR 24
2980: PUSH
2981: LD_INT 5
2983: ST_TO_ADDR
2984: GO 2987
2986: POP
// PlaceUnitXYR ( CreateVehicle , x , y , r , false ) ;
2987: CALL_OW 45
2991: PPUSH
2992: LD_VAR 0 1
2996: PPUSH
2997: LD_VAR 0 2
3001: PPUSH
3002: LD_VAR 0 3
3006: PPUSH
3007: LD_INT 0
3009: PPUSH
3010: CALL_OW 50
// if nation then
3014: LD_VAR 0 6
3018: IFFALSE 3030
// uc_nation := nation ;
3020: LD_ADDR_OWVAR 21
3024: PUSH
3025: LD_VAR 0 6
3029: ST_TO_ADDR
// end ;
3030: LD_VAR 0 5
3034: RET
// function prepare_side ( side ) ; var pos , x , y , i , r , sol , br , dep , neng , nsci , nmech , nsol ; begin
3035: LD_INT 0
3037: PPUSH
3038: PPUSH
3039: PPUSH
3040: PPUSH
3041: PPUSH
3042: PPUSH
3043: PPUSH
3044: PPUSH
3045: PPUSH
3046: PPUSH
3047: PPUSH
3048: PPUSH
3049: PPUSH
// pos := Side_Positions [ side ] ;
3050: LD_ADDR_VAR 0 3
3054: PUSH
3055: LD_EXP 35
3059: PUSH
3060: LD_VAR 0 1
3064: ARRAY
3065: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3066: LD_ADDR_OWVAR 21
3070: PUSH
3071: LD_EXP 36
3075: PUSH
3076: LD_VAR 0 1
3080: ARRAY
3081: ST_TO_ADDR
// uc_side := side ;
3082: LD_ADDR_OWVAR 20
3086: PUSH
3087: LD_VAR 0 1
3091: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3092: LD_ADDR_VAR 0 4
3096: PUSH
3097: LD_EXP 41
3101: PUSH
3102: LD_VAR 0 3
3106: ARRAY
3107: PUSH
3108: LD_INT 1
3110: ARRAY
3111: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3112: LD_ADDR_VAR 0 5
3116: PUSH
3117: LD_EXP 41
3121: PUSH
3122: LD_VAR 0 3
3126: ARRAY
3127: PUSH
3128: LD_INT 2
3130: ARRAY
3131: ST_TO_ADDR
// if is_depot then
3132: LD_EXP 15
3136: IFFALSE 3261
// begin bc_type = b_depot ;
3138: LD_ADDR_OWVAR 42
3142: PUSH
3143: LD_INT 0
3145: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , Depot_Def [ pos ] [ 3 ] ) ;
3146: LD_ADDR_VAR 0 10
3150: PUSH
3151: LD_VAR 0 4
3155: PPUSH
3156: LD_VAR 0 5
3160: PPUSH
3161: LD_EXP 41
3165: PUSH
3166: LD_VAR 0 3
3170: ARRAY
3171: PUSH
3172: LD_INT 3
3174: ARRAY
3175: PPUSH
3176: CALL_OW 47
3180: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3181: LD_VAR 0 10
3185: PPUSH
3186: CALL_OW 274
3190: PPUSH
3191: LD_INT 1
3193: PPUSH
3194: LD_EXP 21
3198: PUSH
3199: LD_INT 1
3201: ARRAY
3202: PPUSH
3203: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3207: LD_VAR 0 10
3211: PPUSH
3212: CALL_OW 274
3216: PPUSH
3217: LD_INT 2
3219: PPUSH
3220: LD_EXP 21
3224: PUSH
3225: LD_INT 2
3227: ARRAY
3228: PPUSH
3229: CALL_OW 277
// SetResourceType ( GetBase ( result ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3233: LD_VAR 0 2
3237: PPUSH
3238: CALL_OW 274
3242: PPUSH
3243: LD_INT 3
3245: PPUSH
3246: LD_EXP 21
3250: PUSH
3251: LD_INT 3
3253: ARRAY
3254: PPUSH
3255: CALL_OW 277
// end else
3259: GO 3405
// begin for i := 1 to 3 do
3261: LD_ADDR_VAR 0 6
3265: PUSH
3266: DOUBLE
3267: LD_INT 1
3269: DEC
3270: ST_TO_ADDR
3271: LD_INT 3
3273: PUSH
3274: FOR_TO
3275: IFFALSE 3403
// begin r := starting_resources [ i ] ;
3277: LD_ADDR_VAR 0 7
3281: PUSH
3282: LD_EXP 21
3286: PUSH
3287: LD_VAR 0 6
3291: ARRAY
3292: ST_TO_ADDR
// while r >= 10 do
3293: LD_VAR 0 7
3297: PUSH
3298: LD_INT 10
3300: GREATEREQUAL
3301: IFFALSE 3401
// if r > 50 then
3303: LD_VAR 0 7
3307: PUSH
3308: LD_INT 50
3310: GREATER
3311: IFFALSE 3357
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3313: LD_VAR 0 6
3317: PPUSH
3318: LD_INT 5
3320: PPUSH
3321: LD_VAR 0 4
3325: PPUSH
3326: LD_VAR 0 5
3330: PPUSH
3331: LD_INT 4
3333: PPUSH
3334: LD_INT 0
3336: PPUSH
3337: CALL_OW 60
// r := r - 50 ;
3341: LD_ADDR_VAR 0 7
3345: PUSH
3346: LD_VAR 0 7
3350: PUSH
3351: LD_INT 50
3353: MINUS
3354: ST_TO_ADDR
// end else
3355: GO 3399
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3357: LD_VAR 0 6
3361: PPUSH
3362: LD_VAR 0 7
3366: PUSH
3367: LD_INT 10
3369: DIV
3370: PPUSH
3371: LD_VAR 0 4
3375: PPUSH
3376: LD_VAR 0 5
3380: PPUSH
3381: LD_INT 4
3383: PPUSH
3384: LD_INT 0
3386: PPUSH
3387: CALL_OW 60
// r := 0 ;
3391: LD_ADDR_VAR 0 7
3395: PUSH
3396: LD_INT 0
3398: ST_TO_ADDR
// end ;
3399: GO 3293
// end ;
3401: GO 3274
3403: POP
3404: POP
// end ; x := start_def [ pos ] [ 1 ] ;
3405: LD_ADDR_VAR 0 4
3409: PUSH
3410: LD_EXP 42
3414: PUSH
3415: LD_VAR 0 3
3419: ARRAY
3420: PUSH
3421: LD_INT 1
3423: ARRAY
3424: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3425: LD_ADDR_VAR 0 5
3429: PUSH
3430: LD_EXP 42
3434: PUSH
3435: LD_VAR 0 3
3439: ARRAY
3440: PUSH
3441: LD_INT 2
3443: ARRAY
3444: ST_TO_ADDR
// for r in starting_crates do
3445: LD_ADDR_VAR 0 7
3449: PUSH
3450: LD_EXP 20
3454: PUSH
3455: FOR_IN
3456: IFFALSE 3488
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3458: LD_INT 1
3460: PPUSH
3461: LD_INT 5
3463: PPUSH
3464: LD_VAR 0 4
3468: PPUSH
3469: LD_VAR 0 5
3473: PPUSH
3474: LD_VAR 0 7
3478: PPUSH
3479: LD_INT 0
3481: PPUSH
3482: CALL_OW 60
3486: GO 3455
3488: POP
3489: POP
// if def_morale_flags then
3490: LD_EXP 9
3494: IFFALSE 3573
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3496: LD_ADDR_EXP 46
3500: PUSH
3501: LD_EXP 46
3505: PUSH
3506: LD_VAR 0 1
3510: PPUSH
3511: LD_VAR 0 4
3515: PPUSH
3516: LD_VAR 0 5
3520: PPUSH
3521: LD_INT 1
3523: PUSH
3524: LD_INT 100
3526: PUSH
3527: EMPTY
3528: LIST
3529: LIST
3530: PUSH
3531: LD_INT 2
3533: PUSH
3534: LD_INT 50
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: PUSH
3541: LD_INT 3
3543: PUSH
3544: LD_INT 20
3546: PUSH
3547: EMPTY
3548: LIST
3549: LIST
3550: PUSH
3551: LD_INT 20
3553: PUSH
3554: LD_INT 100
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: PUSH
3561: EMPTY
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: PPUSH
3567: CALL_OW 418
3571: ADD
3572: ST_TO_ADDR
// neng := number_of_people ;
3573: LD_ADDR_VAR 0 11
3577: PUSH
3578: LD_EXP 17
3582: ST_TO_ADDR
// nsol := neng div 4 ;
3583: LD_ADDR_VAR 0 14
3587: PUSH
3588: LD_VAR 0 11
3592: PUSH
3593: LD_INT 4
3595: DIV
3596: ST_TO_ADDR
// neng := neng - nsol ;
3597: LD_ADDR_VAR 0 11
3601: PUSH
3602: LD_VAR 0 11
3606: PUSH
3607: LD_VAR 0 14
3611: MINUS
3612: ST_TO_ADDR
// nsci := neng div 3 ;
3613: LD_ADDR_VAR 0 12
3617: PUSH
3618: LD_VAR 0 11
3622: PUSH
3623: LD_INT 3
3625: DIV
3626: ST_TO_ADDR
// if nsci < 1 then
3627: LD_VAR 0 12
3631: PUSH
3632: LD_INT 1
3634: LESS
3635: IFFALSE 3645
// nsci := 1 ;
3637: LD_ADDR_VAR 0 12
3641: PUSH
3642: LD_INT 1
3644: ST_TO_ADDR
// neng := neng - nsci ;
3645: LD_ADDR_VAR 0 11
3649: PUSH
3650: LD_VAR 0 11
3654: PUSH
3655: LD_VAR 0 12
3659: MINUS
3660: ST_TO_ADDR
// nmech := neng div 2 ;
3661: LD_ADDR_VAR 0 13
3665: PUSH
3666: LD_VAR 0 11
3670: PUSH
3671: LD_INT 2
3673: DIV
3674: ST_TO_ADDR
// neng := neng - nmech ;
3675: LD_ADDR_VAR 0 11
3679: PUSH
3680: LD_VAR 0 11
3684: PUSH
3685: LD_VAR 0 13
3689: MINUS
3690: ST_TO_ADDR
// if neng < 1 then
3691: LD_VAR 0 11
3695: PUSH
3696: LD_INT 1
3698: LESS
3699: IFFALSE 3709
// neng := 1 ;
3701: LD_ADDR_VAR 0 11
3705: PUSH
3706: LD_INT 1
3708: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
3709: LD_ADDR_VAR 0 4
3713: PUSH
3714: LD_EXP 42
3718: PUSH
3719: LD_VAR 0 3
3723: ARRAY
3724: PUSH
3725: LD_INT 1
3727: ARRAY
3728: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3729: LD_ADDR_VAR 0 5
3733: PUSH
3734: LD_EXP 42
3738: PUSH
3739: LD_VAR 0 3
3743: ARRAY
3744: PUSH
3745: LD_INT 2
3747: ARRAY
3748: ST_TO_ADDR
// if not is_depot then
3749: LD_EXP 15
3753: NOT
3754: IFFALSE 3778
// prepare_buldozer ( x , y , 2 , pos ) ;
3756: LD_VAR 0 4
3760: PPUSH
3761: LD_VAR 0 5
3765: PPUSH
3766: LD_INT 2
3768: PPUSH
3769: LD_VAR 0 3
3773: PPUSH
3774: CALL 2803 0 4
// commander := true ;
3778: LD_ADDR_EXP 45
3782: PUSH
3783: LD_INT 1
3785: ST_TO_ADDR
// prepare_people ( side , 1 , class_soldier , x , y , 5 , commander ) ;
3786: LD_VAR 0 1
3790: PPUSH
3791: LD_INT 1
3793: PPUSH
3794: LD_INT 1
3796: PPUSH
3797: LD_VAR 0 4
3801: PPUSH
3802: LD_VAR 0 5
3806: PPUSH
3807: LD_INT 5
3809: PPUSH
3810: LD_ADDR_EXP 45
3814: PPUSH
3815: CALL 2255 0 7
// commander := false ;
3819: LD_ADDR_EXP 45
3823: PUSH
3824: LD_INT 0
3826: ST_TO_ADDR
// prepare_people ( side , nsol - 1 , class_soldier , x , y , 5 , commander ) ;
3827: LD_VAR 0 1
3831: PPUSH
3832: LD_VAR 0 14
3836: PUSH
3837: LD_INT 1
3839: MINUS
3840: PPUSH
3841: LD_INT 1
3843: PPUSH
3844: LD_VAR 0 4
3848: PPUSH
3849: LD_VAR 0 5
3853: PPUSH
3854: LD_INT 5
3856: PPUSH
3857: LD_ADDR_EXP 45
3861: PPUSH
3862: CALL 2255 0 7
// prepare_people ( side , neng , class_engineer , x , y , 5 , commander ) ;
3866: LD_VAR 0 1
3870: PPUSH
3871: LD_VAR 0 11
3875: PPUSH
3876: LD_INT 2
3878: PPUSH
3879: LD_VAR 0 4
3883: PPUSH
3884: LD_VAR 0 5
3888: PPUSH
3889: LD_INT 5
3891: PPUSH
3892: LD_ADDR_EXP 45
3896: PPUSH
3897: CALL 2255 0 7
// prepare_people ( side , nmech , class_mechanic , x , y , 5 , commander ) ;
3901: LD_VAR 0 1
3905: PPUSH
3906: LD_VAR 0 13
3910: PPUSH
3911: LD_INT 3
3913: PPUSH
3914: LD_VAR 0 4
3918: PPUSH
3919: LD_VAR 0 5
3923: PPUSH
3924: LD_INT 5
3926: PPUSH
3927: LD_ADDR_EXP 45
3931: PPUSH
3932: CALL 2255 0 7
// prepare_people ( side , nsci , class_scientistic , x , y , 5 , commander ) ;
3936: LD_VAR 0 1
3940: PPUSH
3941: LD_VAR 0 12
3945: PPUSH
3946: LD_INT 4
3948: PPUSH
3949: LD_VAR 0 4
3953: PPUSH
3954: LD_VAR 0 5
3958: PPUSH
3959: LD_INT 5
3961: PPUSH
3962: LD_ADDR_EXP 45
3966: PPUSH
3967: CALL 2255 0 7
// if not global_defined then
3971: LD_LOC 2
3975: NOT
3976: IFFALSE 3986
// global_defined := true ;
3978: LD_ADDR_LOC 2
3982: PUSH
3983: LD_INT 1
3985: ST_TO_ADDR
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3986: LD_EXP 10
3990: PUSH
3991: LD_INT 20
3993: PPUSH
3994: LD_VAR 0 1
3998: PPUSH
3999: CALL_OW 321
4003: PUSH
4004: LD_INT 1
4006: EQUAL
4007: AND
4008: IFFALSE 4025
// SetTech ( tech_SibDet , side , state_researched ) ;
4010: LD_INT 20
4012: PPUSH
4013: LD_VAR 0 1
4017: PPUSH
4018: LD_INT 2
4020: PPUSH
4021: CALL_OW 322
// if def_siberite_bomb = 1 then
4025: LD_EXP 13
4029: PUSH
4030: LD_INT 1
4032: EQUAL
4033: IFFALSE 4067
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4035: LD_INT 25
4037: PPUSH
4038: LD_VAR 0 1
4042: PPUSH
4043: LD_INT 1
4045: PPUSH
4046: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4050: LD_INT 73
4052: PPUSH
4053: LD_VAR 0 1
4057: PPUSH
4058: LD_INT 1
4060: PPUSH
4061: CALL_OW 322
// end else
4065: GO 4097
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4067: LD_INT 25
4069: PPUSH
4070: LD_VAR 0 1
4074: PPUSH
4075: LD_INT 0
4077: PPUSH
4078: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4082: LD_INT 73
4084: PPUSH
4085: LD_VAR 0 1
4089: PPUSH
4090: LD_INT 0
4092: PPUSH
4093: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4097: LD_INT 24
4099: PPUSH
4100: LD_VAR 0 1
4104: PPUSH
4105: LD_INT 0
4107: PPUSH
4108: CALL_OW 322
// end ;
4112: LD_VAR 0 2
4116: RET
// every 0 0$1 do
4117: GO 4119
4119: DISABLE
// if ( def_siberite_bomb > 1 ) then
4120: LD_EXP 13
4124: PUSH
4125: LD_INT 1
4127: GREATER
4128: IFFALSE 4143
// begin wait ( siberite_bomb_Delay ) ;
4130: LD_EXP 23
4134: PPUSH
4135: CALL_OW 67
// EnableSibFiss ;
4139: CALL 4144 0 0
// end ;
4143: END
// function EnableSibFiss ; var i ; begin
4144: LD_INT 0
4146: PPUSH
4147: PPUSH
// for i := 1 to 8 do
4148: LD_ADDR_VAR 0 2
4152: PUSH
4153: DOUBLE
4154: LD_INT 1
4156: DEC
4157: ST_TO_ADDR
4158: LD_INT 8
4160: PUSH
4161: FOR_TO
4162: IFFALSE 4208
// if Side_Positions [ i ] then
4164: LD_EXP 35
4168: PUSH
4169: LD_VAR 0 2
4173: ARRAY
4174: IFFALSE 4206
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4176: LD_INT 25
4178: PPUSH
4179: LD_VAR 0 2
4183: PPUSH
4184: LD_INT 1
4186: PPUSH
4187: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4191: LD_INT 73
4193: PPUSH
4194: LD_VAR 0 2
4198: PPUSH
4199: LD_INT 1
4201: PPUSH
4202: CALL_OW 322
// end ;
4206: GO 4161
4208: POP
4209: POP
// end ;
4210: LD_VAR 0 1
4214: RET
// function prepare_sides ; var i ; begin
4215: LD_INT 0
4217: PPUSH
4218: PPUSH
// global_units := [ ] ;
4219: LD_ADDR_LOC 1
4223: PUSH
4224: EMPTY
4225: ST_TO_ADDR
// global_defined := false ;
4226: LD_ADDR_LOC 2
4230: PUSH
4231: LD_INT 0
4233: ST_TO_ADDR
// for i := 1 to 8 do
4234: LD_ADDR_VAR 0 2
4238: PUSH
4239: DOUBLE
4240: LD_INT 1
4242: DEC
4243: ST_TO_ADDR
4244: LD_INT 8
4246: PUSH
4247: FOR_TO
4248: IFFALSE 4273
// if Side_Positions [ i ] then
4250: LD_EXP 35
4254: PUSH
4255: LD_VAR 0 2
4259: ARRAY
4260: IFFALSE 4271
// prepare_side ( i ) ;
4262: LD_VAR 0 2
4266: PPUSH
4267: CALL 3035 0 1
4271: GO 4247
4273: POP
4274: POP
// end ;
4275: LD_VAR 0 1
4279: RET
// starting begin disable ( 98 ) ;
4280: LD_INT 98
4282: DISABLE_MARKED
// disable ( 99 ) ;
4283: LD_INT 99
4285: DISABLE_MARKED
// disable ( 400 ) ;
4286: LD_INT 400
4288: DISABLE_MARKED
// disable ( 401 ) ;
4289: LD_INT 401
4291: DISABLE_MARKED
// mp_selectmsg := true ;
4292: LD_ADDR_OWVAR 13
4296: PUSH
4297: LD_INT 1
4299: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4300: CALL 681 0 0
// init_map ;
4304: CALL 436 0 0
// set_shared_visions_and_alliances ;
4308: CALL 1892 0 0
// ResetFog ;
4312: CALL_OW 335
// ClearAllFogForSide ( Player_Side ) ;
4316: LD_EXP 31
4320: PPUSH
4321: CALL_OW 520
// prepare_sides ;
4325: CALL 4215 0 0
// Init_Win_Condition ;
4329: CALL 8186 0 0
// init_shipments ;
4333: CALL 5489 0 0
// init_respawn ;
4337: CALL 5982 0 0
// InitApeman ;
4341: CALL 4664 0 0
// your_side := Player_Side ;
4345: LD_ADDR_OWVAR 2
4349: PUSH
4350: LD_EXP 31
4354: ST_TO_ADDR
// music_nat := Side_Nations [ your_side ] ;
4355: LD_ADDR_OWVAR 71
4359: PUSH
4360: LD_EXP 36
4364: PUSH
4365: LD_OWVAR 2
4369: ARRAY
4370: ST_TO_ADDR
// if IAmSpec then
4371: CALL_OW 531
4375: IFFALSE 4399
// begin fogOff ( true ) ;
4377: LD_INT 1
4379: PPUSH
4380: CALL_OW 344
// CenterNowOnXY ( 104 , 69 ) ;
4384: LD_INT 104
4386: PPUSH
4387: LD_INT 69
4389: PPUSH
4390: CALL_OW 86
// enable ( 400 ) ;
4394: LD_INT 400
4396: ENABLE_MARKED
// end else
4397: GO 4445
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4399: LD_EXP 42
4403: PUSH
4404: LD_EXP 35
4408: PUSH
4409: LD_OWVAR 2
4413: ARRAY
4414: ARRAY
4415: PUSH
4416: LD_INT 1
4418: ARRAY
4419: PPUSH
4420: LD_EXP 42
4424: PUSH
4425: LD_EXP 35
4429: PUSH
4430: LD_OWVAR 2
4434: ARRAY
4435: ARRAY
4436: PUSH
4437: LD_INT 2
4439: ARRAY
4440: PPUSH
4441: CALL_OW 86
// end ; BuildUpAreas := [ nw , ne , sw , se ] ;
4445: LD_ADDR_EXP 57
4449: PUSH
4450: LD_INT 12
4452: PUSH
4453: LD_INT 13
4455: PUSH
4456: LD_INT 14
4458: PUSH
4459: LD_INT 15
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: LIST
4466: LIST
4467: ST_TO_ADDR
// BeginBuildUp ;
4468: CALL 7349 0 0
// end ; end_of_file
4472: END
// every 20 20$00 trigger apemanNumber do
4473: LD_EXP 48
4477: IFFALSE 4510
4479: GO 4481
4481: DISABLE
// begin enable ;
4482: ENABLE
// if apeLevel >= 8 then
4483: LD_EXP 53
4487: PUSH
4488: LD_INT 8
4490: GREATEREQUAL
4491: IFFALSE 4496
// disable else
4493: DISABLE
4494: GO 4510
// apeLevel := apeLevel + 1 ;
4496: LD_ADDR_EXP 53
4500: PUSH
4501: LD_EXP 53
4505: PUSH
4506: LD_INT 1
4508: PLUS
4509: ST_TO_ADDR
// end ;
4510: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
4511: LD_EXP 48
4515: PUSH
4516: LD_EXP 49
4520: LESS
4521: IFFALSE 4661
4523: GO 4525
4525: DISABLE
4526: LD_INT 0
4528: PPUSH
4529: PPUSH
4530: PPUSH
4531: PPUSH
// begin enable ;
4532: ENABLE
// for i := 1 to apemanPos do
4533: LD_ADDR_VAR 0 1
4537: PUSH
4538: DOUBLE
4539: LD_INT 1
4541: DEC
4542: ST_TO_ADDR
4543: LD_EXP 51
4547: PUSH
4548: FOR_TO
4549: IFFALSE 4659
// begin if apemanPlayerCount [ i ] then
4551: LD_EXP 52
4555: PUSH
4556: LD_VAR 0 1
4560: ARRAY
4561: IFFALSE 4657
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
4563: LD_EXP 52
4567: PUSH
4568: LD_VAR 0 1
4572: ARRAY
4573: PUSH
4574: LD_EXP 51
4578: PUSH
4579: LD_VAR 0 1
4583: ARRAY
4584: GREATER
4585: IFFALSE 4657
// begin ape := PrepareApeman ;
4587: LD_ADDR_VAR 0 2
4591: PUSH
4592: CALL 5164 0 0
4596: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
4597: LD_VAR 0 2
4601: PPUSH
4602: LD_EXP 54
4606: PUSH
4607: LD_VAR 0 1
4611: ARRAY
4612: PPUSH
4613: LD_INT 0
4615: PPUSH
4616: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
4620: LD_ADDR_EXP 51
4624: PUSH
4625: LD_EXP 51
4629: PPUSH
4630: LD_VAR 0 1
4634: PPUSH
4635: LD_EXP 51
4639: PUSH
4640: LD_VAR 0 1
4644: ARRAY
4645: PUSH
4646: LD_VAR 0 2
4650: UNION
4651: PPUSH
4652: CALL_OW 1
4656: ST_TO_ADDR
// end ; end ; end ;
4657: GO 4548
4659: POP
4660: POP
// end ;
4661: PPOPN 4
4663: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
4664: LD_INT 0
4666: PPUSH
4667: PPUSH
4668: PPUSH
4669: PPUSH
4670: PPUSH
4671: PPUSH
4672: PPUSH
// playersAmount := 0 ;
4673: LD_ADDR_VAR 0 3
4677: PUSH
4678: LD_INT 0
4680: ST_TO_ADDR
// _apeAreas := [ nw , ne , sw , se , ] ;
4681: LD_ADDR_VAR 0 7
4685: PUSH
4686: LD_INT 12
4688: PUSH
4689: LD_INT 13
4691: PUSH
4692: LD_INT 14
4694: PUSH
4695: LD_INT 15
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4704: LD_ADDR_EXP 54
4708: PUSH
4709: LD_INT 0
4711: PUSH
4712: LD_INT 0
4714: PUSH
4715: LD_INT 0
4717: PUSH
4718: LD_INT 0
4720: PUSH
4721: LD_INT 0
4723: PUSH
4724: LD_INT 0
4726: PUSH
4727: LD_INT 0
4729: PUSH
4730: LD_INT 0
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: ST_TO_ADDR
// for j = 1 to Side_Positions do
4743: LD_ADDR_VAR 0 4
4747: PUSH
4748: DOUBLE
4749: LD_INT 1
4751: DEC
4752: ST_TO_ADDR
4753: LD_EXP 35
4757: PUSH
4758: FOR_TO
4759: IFFALSE 4826
// if Side_Positions [ j ] then
4761: LD_EXP 35
4765: PUSH
4766: LD_VAR 0 4
4770: ARRAY
4771: IFFALSE 4824
// begin playersAmount := playersAmount + 1 ;
4773: LD_ADDR_VAR 0 3
4777: PUSH
4778: LD_VAR 0 3
4782: PUSH
4783: LD_INT 1
4785: PLUS
4786: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
4787: LD_ADDR_EXP 54
4791: PUSH
4792: LD_EXP 54
4796: PPUSH
4797: LD_VAR 0 4
4801: PPUSH
4802: LD_VAR 0 7
4806: PUSH
4807: LD_EXP 35
4811: PUSH
4812: LD_VAR 0 4
4816: ARRAY
4817: ARRAY
4818: PPUSH
4819: CALL_OW 1
4823: ST_TO_ADDR
// end ;
4824: GO 4758
4826: POP
4827: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
4828: LD_ADDR_EXP 50
4832: PUSH
4833: LD_INT 3
4835: PUSH
4836: LD_EXP 19
4840: MUL
4841: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
4842: LD_ADDR_EXP 48
4846: PUSH
4847: LD_VAR 0 3
4851: PUSH
4852: LD_EXP 50
4856: MUL
4857: ST_TO_ADDR
// apemanLimit := apemanNumber ;
4858: LD_ADDR_EXP 49
4862: PUSH
4863: LD_EXP 48
4867: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4868: LD_ADDR_EXP 51
4872: PUSH
4873: LD_INT 0
4875: PUSH
4876: LD_INT 0
4878: PUSH
4879: LD_INT 0
4881: PUSH
4882: LD_INT 0
4884: PUSH
4885: LD_INT 0
4887: PUSH
4888: LD_INT 0
4890: PUSH
4891: LD_INT 0
4893: PUSH
4894: LD_INT 0
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4907: LD_ADDR_EXP 52
4911: PUSH
4912: LD_INT 0
4914: PUSH
4915: LD_INT 0
4917: PUSH
4918: LD_INT 0
4920: PUSH
4921: LD_INT 0
4923: PUSH
4924: LD_INT 0
4926: PUSH
4927: LD_INT 0
4929: PUSH
4930: LD_INT 0
4932: PUSH
4933: LD_INT 0
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: LIST
4944: LIST
4945: ST_TO_ADDR
// apeLevel := 1 ;
4946: LD_ADDR_EXP 53
4950: PUSH
4951: LD_INT 1
4953: ST_TO_ADDR
// if not apemanNumber then
4954: LD_EXP 48
4958: NOT
4959: IFFALSE 4963
// exit ;
4961: GO 5159
// for i := 1 to apemanPerPlayer do
4963: LD_ADDR_VAR 0 2
4967: PUSH
4968: DOUBLE
4969: LD_INT 1
4971: DEC
4972: ST_TO_ADDR
4973: LD_EXP 50
4977: PUSH
4978: FOR_TO
4979: IFFALSE 5157
// begin for j := 1 to Side_Positions do
4981: LD_ADDR_VAR 0 4
4985: PUSH
4986: DOUBLE
4987: LD_INT 1
4989: DEC
4990: ST_TO_ADDR
4991: LD_EXP 35
4995: PUSH
4996: FOR_TO
4997: IFFALSE 5153
// if Side_Positions [ j ] then
4999: LD_EXP 35
5003: PUSH
5004: LD_VAR 0 4
5008: ARRAY
5009: IFFALSE 5151
// begin pos := Side_Positions [ j ] ;
5011: LD_ADDR_VAR 0 6
5015: PUSH
5016: LD_EXP 35
5020: PUSH
5021: LD_VAR 0 4
5025: ARRAY
5026: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5027: LD_ADDR_EXP 52
5031: PUSH
5032: LD_EXP 52
5036: PPUSH
5037: LD_VAR 0 4
5041: PPUSH
5042: LD_EXP 52
5046: PUSH
5047: LD_VAR 0 4
5051: ARRAY
5052: PUSH
5053: LD_INT 1
5055: PLUS
5056: PPUSH
5057: CALL_OW 1
5061: ST_TO_ADDR
// ape := PrepareApeman ;
5062: LD_ADDR_VAR 0 5
5066: PUSH
5067: CALL 5164 0 0
5071: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5072: LD_ADDR_EXP 51
5076: PUSH
5077: LD_EXP 51
5081: PPUSH
5082: LD_VAR 0 4
5086: PPUSH
5087: LD_EXP 51
5091: PUSH
5092: LD_VAR 0 4
5096: ARRAY
5097: PPUSH
5098: LD_EXP 51
5102: PUSH
5103: LD_VAR 0 4
5107: ARRAY
5108: PUSH
5109: LD_INT 1
5111: PLUS
5112: PPUSH
5113: LD_VAR 0 5
5117: PPUSH
5118: CALL_OW 1
5122: PPUSH
5123: CALL_OW 1
5127: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5128: LD_VAR 0 5
5132: PPUSH
5133: LD_EXP 54
5137: PUSH
5138: LD_VAR 0 4
5142: ARRAY
5143: PPUSH
5144: LD_INT 0
5146: PPUSH
5147: CALL_OW 49
// end ;
5151: GO 4996
5153: POP
5154: POP
// end ;
5155: GO 4978
5157: POP
5158: POP
// end ;
5159: LD_VAR 0 1
5163: RET
// export function PrepareApeman ; var bonus ; begin
5164: LD_INT 0
5166: PPUSH
5167: PPUSH
// uc_side := 0 ;
5168: LD_ADDR_OWVAR 20
5172: PUSH
5173: LD_INT 0
5175: ST_TO_ADDR
// uc_nation := 0 ;
5176: LD_ADDR_OWVAR 21
5180: PUSH
5181: LD_INT 0
5183: ST_TO_ADDR
// InitHc ;
5184: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
5188: LD_ADDR_VAR 0 2
5192: PUSH
5193: LD_INT 1
5195: NEG
5196: PUSH
5197: LD_INT 0
5199: PUSH
5200: LD_INT 1
5202: PUSH
5203: EMPTY
5204: LIST
5205: LIST
5206: LIST
5207: PUSH
5208: LD_OWVAR 1
5212: PUSH
5213: LD_INT 3
5215: MOD
5216: PUSH
5217: LD_INT 1
5219: PLUS
5220: ARRAY
5221: ST_TO_ADDR
// hc_class := class_apeman ;
5222: LD_ADDR_OWVAR 28
5226: PUSH
5227: LD_INT 12
5229: ST_TO_ADDR
// hc_gallery :=  ;
5230: LD_ADDR_OWVAR 33
5234: PUSH
5235: LD_STRING 
5237: ST_TO_ADDR
// hc_name :=  ;
5238: LD_ADDR_OWVAR 26
5242: PUSH
5243: LD_STRING 
5245: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
5246: LD_ADDR_OWVAR 31
5250: PUSH
5251: LD_EXP 53
5255: PUSH
5256: LD_VAR 0 2
5260: PLUS
5261: PUSH
5262: LD_EXP 53
5266: PUSH
5267: LD_VAR 0 2
5271: PLUS
5272: PUSH
5273: LD_EXP 53
5277: PUSH
5278: LD_VAR 0 2
5282: PLUS
5283: PUSH
5284: LD_EXP 53
5288: PUSH
5289: LD_VAR 0 2
5293: PLUS
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
5301: LD_ADDR_OWVAR 35
5305: PUSH
5306: LD_INT 10
5308: PUSH
5309: LD_VAR 0 2
5313: MUL
5314: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5315: LD_ADDR_OWVAR 29
5319: PUSH
5320: LD_INT 12
5322: PUSH
5323: LD_INT 10
5325: PUSH
5326: EMPTY
5327: LIST
5328: LIST
5329: ST_TO_ADDR
// result := CreateHuman ;
5330: LD_ADDR_VAR 0 1
5334: PUSH
5335: CALL_OW 44
5339: ST_TO_ADDR
// end ;
5340: LD_VAR 0 1
5344: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
5345: LD_INT 0
5347: PPUSH
5348: PPUSH
5349: PPUSH
// if not ape then
5350: LD_VAR 0 1
5354: NOT
5355: IFFALSE 5359
// exit ;
5357: GO 5484
// side := GetSide ( ape ) ;
5359: LD_ADDR_VAR 0 3
5363: PUSH
5364: LD_VAR 0 1
5368: PPUSH
5369: CALL_OW 255
5373: ST_TO_ADDR
// if not side then
5374: LD_VAR 0 3
5378: NOT
5379: IFFALSE 5433
// begin for i = 1 to apemanPos do
5381: LD_ADDR_VAR 0 4
5385: PUSH
5386: DOUBLE
5387: LD_INT 1
5389: DEC
5390: ST_TO_ADDR
5391: LD_EXP 51
5395: PUSH
5396: FOR_TO
5397: IFFALSE 5431
// if ape in apemanPos [ i ] then
5399: LD_VAR 0 1
5403: PUSH
5404: LD_EXP 51
5408: PUSH
5409: LD_VAR 0 4
5413: ARRAY
5414: IN
5415: IFFALSE 5429
// begin side := i ;
5417: LD_ADDR_VAR 0 3
5421: PUSH
5422: LD_VAR 0 4
5426: ST_TO_ADDR
// break ;
5427: GO 5431
// end ;
5429: GO 5396
5431: POP
5432: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
5433: LD_ADDR_EXP 51
5437: PUSH
5438: LD_EXP 51
5442: PPUSH
5443: LD_VAR 0 3
5447: PPUSH
5448: LD_EXP 51
5452: PUSH
5453: LD_VAR 0 3
5457: ARRAY
5458: PUSH
5459: LD_VAR 0 1
5463: DIFF
5464: PPUSH
5465: CALL_OW 1
5469: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
5470: LD_ADDR_EXP 48
5474: PUSH
5475: LD_EXP 48
5479: PUSH
5480: LD_INT 1
5482: MINUS
5483: ST_TO_ADDR
// end ; end_of_file
5484: LD_VAR 0 2
5488: RET
// var shipment , tictac ; export function init_shipments ; begin
5489: LD_INT 0
5491: PPUSH
// shipment := Rand ( 0 , 3 ) ;
5492: LD_ADDR_LOC 4
5496: PUSH
5497: LD_INT 0
5499: PPUSH
5500: LD_INT 3
5502: PPUSH
5503: CALL_OW 12
5507: ST_TO_ADDR
// tictac := 0 ;
5508: LD_ADDR_LOC 5
5512: PUSH
5513: LD_INT 0
5515: ST_TO_ADDR
// end ;
5516: LD_VAR 0 1
5520: RET
// every 0 0$5 + 0 0$1.1 do var d ;
5521: GO 5523
5523: DISABLE
5524: LD_INT 0
5526: PPUSH
// begin case tick of 1 .. 1 1$0 :
5527: LD_OWVAR 1
5531: PUSH
5532: LD_INT 1
5534: DOUBLE
5535: GREATEREQUAL
5536: IFFALSE 5544
5538: LD_INT 2100
5540: DOUBLE
5541: LESSEQUAL
5542: IFTRUE 5546
5544: GO 5557
5546: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5547: LD_ADDR_VAR 0 1
5551: PUSH
5552: LD_INT 150
5554: ST_TO_ADDR
5555: GO 5740
5557: LD_INT 2100
5559: PUSH
5560: LD_INT 1
5562: PLUS
5563: DOUBLE
5564: GREATEREQUAL
5565: IFFALSE 5573
5567: LD_INT 10500
5569: DOUBLE
5570: LESSEQUAL
5571: IFTRUE 5575
5573: GO 5586
5575: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5576: LD_ADDR_VAR 0 1
5580: PUSH
5581: LD_INT 100
5583: ST_TO_ADDR
5584: GO 5740
5586: LD_INT 10500
5588: PUSH
5589: LD_INT 1
5591: PLUS
5592: DOUBLE
5593: GREATEREQUAL
5594: IFFALSE 5602
5596: LD_INT 21000
5598: DOUBLE
5599: LESSEQUAL
5600: IFTRUE 5604
5602: GO 5615
5604: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5605: LD_ADDR_VAR 0 1
5609: PUSH
5610: LD_INT 90
5612: ST_TO_ADDR
5613: GO 5740
5615: LD_INT 21000
5617: PUSH
5618: LD_INT 1
5620: PLUS
5621: DOUBLE
5622: GREATEREQUAL
5623: IFFALSE 5631
5625: LD_INT 42000
5627: DOUBLE
5628: LESSEQUAL
5629: IFTRUE 5633
5631: GO 5644
5633: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5634: LD_ADDR_VAR 0 1
5638: PUSH
5639: LD_INT 70
5641: ST_TO_ADDR
5642: GO 5740
5644: LD_INT 42000
5646: PUSH
5647: LD_INT 1
5649: PLUS
5650: DOUBLE
5651: GREATEREQUAL
5652: IFFALSE 5660
5654: LD_INT 63000
5656: DOUBLE
5657: LESSEQUAL
5658: IFTRUE 5662
5660: GO 5673
5662: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5663: LD_ADDR_VAR 0 1
5667: PUSH
5668: LD_INT 60
5670: ST_TO_ADDR
5671: GO 5740
5673: LD_INT 63000
5675: PUSH
5676: LD_INT 1
5678: PLUS
5679: DOUBLE
5680: GREATEREQUAL
5681: IFFALSE 5689
5683: LD_INT 105000
5685: DOUBLE
5686: LESSEQUAL
5687: IFTRUE 5691
5689: GO 5702
5691: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5692: LD_ADDR_VAR 0 1
5696: PUSH
5697: LD_INT 35
5699: ST_TO_ADDR
5700: GO 5740
5702: LD_INT 105000
5704: PUSH
5705: LD_INT 1
5707: PLUS
5708: DOUBLE
5709: GREATEREQUAL
5710: IFFALSE 5718
5712: LD_INT 630000
5714: DOUBLE
5715: LESSEQUAL
5716: IFTRUE 5720
5718: GO 5731
5720: POP
// d := 20 ; else
5721: LD_ADDR_VAR 0 1
5725: PUSH
5726: LD_INT 20
5728: ST_TO_ADDR
5729: GO 5740
5731: POP
// d := 0 ; end ;
5732: LD_ADDR_VAR 0 1
5736: PUSH
5737: LD_INT 0
5739: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5740: LD_INT 1
5742: PPUSH
5743: LD_INT 10000
5745: PPUSH
5746: CALL_OW 12
5750: PUSH
5751: LD_VAR 0 1
5755: PUSH
5756: LD_EXP 22
5760: MUL
5761: LESSEQUAL
5762: IFFALSE 5838
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5764: LD_INT 1
5766: PPUSH
5767: LD_INT 140
5769: PPUSH
5770: CALL_OW 12
5774: PPUSH
5775: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
5779: LD_ADDR_LOC 4
5783: PUSH
5784: LD_LOC 4
5788: PUSH
5789: LD_INT 1
5791: PLUS
5792: PUSH
5793: LD_INT 4
5795: MOD
5796: ST_TO_ADDR
// if GetResourceArea ( nw + shipment , mat_cans ) < 50 then
5797: LD_INT 12
5799: PUSH
5800: LD_LOC 4
5804: PLUS
5805: PPUSH
5806: LD_INT 1
5808: PPUSH
5809: CALL_OW 287
5813: PUSH
5814: LD_INT 50
5816: LESS
5817: IFFALSE 5838
// CreateCratesArea ( 5 , nw + shipment , true ) ;
5819: LD_INT 5
5821: PPUSH
5822: LD_INT 12
5824: PUSH
5825: LD_LOC 4
5829: PLUS
5830: PPUSH
5831: LD_INT 1
5833: PPUSH
5834: CALL_OW 55
// end ; enable ;
5838: ENABLE
// end ;
5839: PPOPN 1
5841: END
// every 0 0$10 trigger TICK > ( ( 3 3$0 * tictac ) + tictac * ( 1 1$30 - shipments_density * ( 0 0$2 ) ) ) do var i , amount ;
5842: LD_OWVAR 1
5846: PUSH
5847: LD_INT 6300
5849: PUSH
5850: LD_LOC 5
5854: MUL
5855: PUSH
5856: LD_LOC 5
5860: PUSH
5861: LD_INT 3150
5863: PUSH
5864: LD_EXP 22
5868: PUSH
5869: LD_INT 70
5871: MUL
5872: MINUS
5873: MUL
5874: PLUS
5875: GREATER
5876: IFFALSE 5979
5878: GO 5880
5880: DISABLE
5881: LD_INT 0
5883: PPUSH
5884: PPUSH
// begin tictac := tictac + 1 ;
5885: LD_ADDR_LOC 5
5889: PUSH
5890: LD_LOC 5
5894: PUSH
5895: LD_INT 1
5897: PLUS
5898: ST_TO_ADDR
// amount := Rand ( 3 , 5 ) ;
5899: LD_ADDR_VAR 0 2
5903: PUSH
5904: LD_INT 3
5906: PPUSH
5907: LD_INT 5
5909: PPUSH
5910: CALL_OW 12
5914: ST_TO_ADDR
// for i = 0 to 3 do
5915: LD_ADDR_VAR 0 1
5919: PUSH
5920: DOUBLE
5921: LD_INT 0
5923: DEC
5924: ST_TO_ADDR
5925: LD_INT 3
5927: PUSH
5928: FOR_TO
5929: IFFALSE 5976
// if GetResourceArea ( Base1 + i , mat_cans ) < 20 then
5931: LD_INT 1
5933: PUSH
5934: LD_VAR 0 1
5938: PLUS
5939: PPUSH
5940: LD_INT 1
5942: PPUSH
5943: CALL_OW 287
5947: PUSH
5948: LD_INT 20
5950: LESS
5951: IFFALSE 5974
// CreateCratesArea ( amount , Base1 + i , true ) ;
5953: LD_VAR 0 2
5957: PPUSH
5958: LD_INT 1
5960: PUSH
5961: LD_VAR 0 1
5965: PLUS
5966: PPUSH
5967: LD_INT 1
5969: PPUSH
5970: CALL_OW 55
5974: GO 5928
5976: POP
5977: POP
// enable ;
5978: ENABLE
// end ; end_of_file
5979: PPOPN 2
5981: END
// var respawn_queue ; export function init_respawn ; begin
5982: LD_INT 0
5984: PPUSH
// if not def_people_respawning then
5985: LD_EXP 12
5989: NOT
5990: IFFALSE 5994
// exit ;
5992: GO 6033
// respawn_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5994: LD_ADDR_LOC 6
5998: PUSH
5999: LD_INT 0
6001: PUSH
6002: LD_INT 0
6004: PUSH
6005: LD_INT 0
6007: PUSH
6008: LD_INT 0
6010: PUSH
6011: LD_INT 0
6013: PUSH
6014: LD_INT 0
6016: PUSH
6017: LD_INT 0
6019: PUSH
6020: LD_INT 0
6022: PUSH
6023: EMPTY
6024: LIST
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: ST_TO_ADDR
// end ;
6033: LD_VAR 0 1
6037: RET
// every 0 0$10 trigger def_people_respawning do var un , list , time , side ;
6038: LD_EXP 12
6042: IFFALSE 6238
6044: GO 6046
6046: DISABLE
6047: LD_INT 0
6049: PPUSH
6050: PPUSH
6051: PPUSH
6052: PPUSH
// begin for side = 1 to Side_Positions do
6053: LD_ADDR_VAR 0 4
6057: PUSH
6058: DOUBLE
6059: LD_INT 1
6061: DEC
6062: ST_TO_ADDR
6063: LD_EXP 35
6067: PUSH
6068: FOR_TO
6069: IFFALSE 6235
// if Side_Positions [ side ] then
6071: LD_EXP 35
6075: PUSH
6076: LD_VAR 0 4
6080: ARRAY
6081: IFFALSE 6233
// begin list := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6083: LD_ADDR_VAR 0 2
6087: PUSH
6088: LD_INT 22
6090: PUSH
6091: LD_VAR 0 4
6095: PUSH
6096: EMPTY
6097: LIST
6098: LIST
6099: PUSH
6100: LD_INT 21
6102: PUSH
6103: LD_INT 1
6105: PUSH
6106: EMPTY
6107: LIST
6108: LIST
6109: PUSH
6110: LD_INT 3
6112: PUSH
6113: LD_INT 23
6115: PUSH
6116: LD_INT 0
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PUSH
6123: EMPTY
6124: LIST
6125: LIST
6126: LIST
6127: LIST
6128: PPUSH
6129: CALL_OW 69
6133: ST_TO_ADDR
// if ( list < number_of_people ) and ( not respawn_queue [ side ] ) then
6134: LD_VAR 0 2
6138: PUSH
6139: LD_EXP 17
6143: LESS
6144: PUSH
6145: LD_LOC 6
6149: PUSH
6150: LD_VAR 0 4
6154: ARRAY
6155: NOT
6156: AND
6157: IFFALSE 6173
// set_queue ( side , TICK ) ;
6159: LD_VAR 0 4
6163: PPUSH
6164: LD_OWVAR 1
6168: PPUSH
6169: CALL 6472 0 2
// time := TICK - respawn_queue [ side ] ;
6173: LD_ADDR_VAR 0 3
6177: PUSH
6178: LD_OWVAR 1
6182: PUSH
6183: LD_LOC 6
6187: PUSH
6188: LD_VAR 0 4
6192: ARRAY
6193: MINUS
6194: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6195: LD_LOC 6
6199: PUSH
6200: LD_VAR 0 4
6204: ARRAY
6205: PUSH
6206: LD_VAR 0 3
6210: PUSH
6211: LD_EXP 25
6215: GREATER
6216: AND
6217: IFFALSE 6233
// respawn_character ( side , time ) ;
6219: LD_VAR 0 4
6223: PPUSH
6224: LD_VAR 0 3
6228: PPUSH
6229: CALL 6241 0 2
// end ;
6233: GO 6068
6235: POP
6236: POP
// enable ;
6237: ENABLE
// end ;
6238: PPOPN 4
6240: END
// function respawn_character ( side , time ) ; var dep ; begin
6241: LD_INT 0
6243: PPUSH
6244: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6245: LD_INT 0
6247: PPUSH
6248: LD_INT 1
6250: PPUSH
6251: CALL_OW 12
6255: PUSH
6256: LD_VAR 0 2
6260: PUSH
6261: LD_EXP 26
6265: LESS
6266: AND
6267: IFFALSE 6271
// exit ;
6269: GO 6467
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6271: LD_ADDR_VAR 0 4
6275: PUSH
6276: LD_INT 22
6278: PUSH
6279: LD_VAR 0 1
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PUSH
6288: LD_INT 2
6290: PUSH
6291: LD_INT 30
6293: PUSH
6294: LD_INT 0
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: PUSH
6301: LD_INT 30
6303: PUSH
6304: LD_INT 1
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: LIST
6315: PUSH
6316: LD_INT 50
6318: PUSH
6319: EMPTY
6320: LIST
6321: PUSH
6322: EMPTY
6323: LIST
6324: LIST
6325: LIST
6326: PPUSH
6327: CALL_OW 69
6331: ST_TO_ADDR
// if not dep then
6332: LD_VAR 0 4
6336: NOT
6337: IFFALSE 6343
// exit else
6339: GO 6467
6341: GO 6367
// dep := dep [ Rand ( 1 , dep ) ] ;
6343: LD_ADDR_VAR 0 4
6347: PUSH
6348: LD_VAR 0 4
6352: PUSH
6353: LD_INT 1
6355: PPUSH
6356: LD_VAR 0 4
6360: PPUSH
6361: CALL_OW 12
6365: ARRAY
6366: ST_TO_ADDR
// uc_side := side ;
6367: LD_ADDR_OWVAR 20
6371: PUSH
6372: LD_VAR 0 1
6376: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6377: LD_ADDR_OWVAR 21
6381: PUSH
6382: LD_EXP 36
6386: PUSH
6387: LD_VAR 0 1
6391: ARRAY
6392: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , initial_level div 2 ) ;
6393: LD_INT 0
6395: PPUSH
6396: LD_INT 0
6398: PPUSH
6399: LD_EXP 18
6403: PUSH
6404: LD_INT 2
6406: DIV
6407: PPUSH
6408: CALL_OW 380
// hc_importance := 0 ;
6412: LD_ADDR_OWVAR 32
6416: PUSH
6417: LD_INT 0
6419: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
6420: CALL_OW 44
6424: PPUSH
6425: LD_VAR 0 4
6429: PPUSH
6430: CALL_OW 250
6434: PPUSH
6435: LD_VAR 0 4
6439: PPUSH
6440: CALL_OW 251
6444: PPUSH
6445: LD_INT 10
6447: PPUSH
6448: LD_INT 1
6450: PPUSH
6451: CALL_OW 50
// set_queue ( side , 0 ) ;
6455: LD_VAR 0 1
6459: PPUSH
6460: LD_INT 0
6462: PPUSH
6463: CALL 6472 0 2
// end ;
6467: LD_VAR 0 3
6471: RET
// function set_queue ( side , time ) ; begin
6472: LD_INT 0
6474: PPUSH
// respawn_queue := Delete ( respawn_queue , side ) ;
6475: LD_ADDR_LOC 6
6479: PUSH
6480: LD_LOC 6
6484: PPUSH
6485: LD_VAR 0 1
6489: PPUSH
6490: CALL_OW 3
6494: ST_TO_ADDR
// respawn_queue := Insert ( respawn_queue , side , time ) ;
6495: LD_ADDR_LOC 6
6499: PUSH
6500: LD_LOC 6
6504: PPUSH
6505: LD_VAR 0 1
6509: PPUSH
6510: LD_VAR 0 2
6514: PPUSH
6515: CALL_OW 2
6519: ST_TO_ADDR
// end ; end_of_file
6520: LD_VAR 0 3
6524: RET
// var strength ; function Update_Flags ; var un ; begin
6525: LD_INT 0
6527: PPUSH
6528: PPUSH
// for un in battle_flags_id do
6529: LD_ADDR_VAR 0 2
6533: PUSH
6534: LD_EXP 46
6538: PUSH
6539: FOR_IN
6540: IFFALSE 6615
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6542: LD_VAR 0 2
6546: PPUSH
6547: LD_INT 1
6549: PUSH
6550: LD_LOC 7
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PUSH
6559: LD_INT 2
6561: PUSH
6562: LD_LOC 7
6566: PUSH
6567: LD_INT 2
6569: DIV
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: PUSH
6575: LD_INT 3
6577: PUSH
6578: LD_LOC 7
6582: PUSH
6583: LD_INT 5
6585: DIV
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: PUSH
6591: LD_INT 20
6593: PUSH
6594: LD_LOC 7
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: PPUSH
6609: CALL_OW 423
6613: GO 6539
6615: POP
6616: POP
// end ;
6617: LD_VAR 0 1
6621: RET
// every 0 0$0.1 do var un ;
6622: GO 6624
6624: DISABLE
6625: LD_INT 0
6627: PPUSH
// begin if not def_morale_flags then
6628: LD_EXP 9
6632: NOT
6633: IFFALSE 6637
// exit ;
6635: GO 6714
// if not morale_decreasing_time then
6637: LD_EXP 47
6641: NOT
6642: IFFALSE 6646
// exit ;
6644: GO 6714
// strength = 100 ;
6646: LD_ADDR_LOC 7
6650: PUSH
6651: LD_INT 100
6653: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
6654: LD_EXP 47
6658: PPUSH
6659: CALL_OW 67
// strength := strength - 1 ;
6663: LD_ADDR_LOC 7
6667: PUSH
6668: LD_LOC 7
6672: PUSH
6673: LD_INT 1
6675: MINUS
6676: ST_TO_ADDR
// Update_Flags ;
6677: CALL 6525 0 0
// until not strength ;
6681: LD_LOC 7
6685: NOT
6686: IFFALSE 6654
// for un in battle_flags_id do
6688: LD_ADDR_VAR 0 1
6692: PUSH
6693: LD_EXP 46
6697: PUSH
6698: FOR_IN
6699: IFFALSE 6712
// KillBattleFlag ( un ) ;
6701: LD_VAR 0 1
6705: PPUSH
6706: CALL_OW 419
6710: GO 6698
6712: POP
6713: POP
// end ; end_of_file
6714: PPOPN 1
6716: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
6717: LD_INT 0
6719: PPUSH
6720: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
6721: LD_ADDR_VAR 0 2
6725: PUSH
6726: LD_STRING #Multi1x1-Time
6728: PUSH
6729: LD_OWVAR 1
6733: PUSH
6734: EMPTY
6735: LIST
6736: LIST
6737: ST_TO_ADDR
// if WaitServerStrings then
6738: LD_EXP 56
6742: IFFALSE 6760
// AllStrings = AllStrings ^ WaitServerStrings ;
6744: LD_ADDR_VAR 0 2
6748: PUSH
6749: LD_VAR 0 2
6753: PUSH
6754: LD_EXP 56
6758: ADD
6759: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
6760: LD_INT 0
6762: PUSH
6763: LD_EXP 23
6767: PUSH
6768: LD_OWVAR 1
6772: MINUS
6773: LESSEQUAL
6774: IFFALSE 6805
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
6776: LD_ADDR_VAR 0 2
6780: PUSH
6781: LD_VAR 0 2
6785: PUSH
6786: LD_STRING #allowedsibbomb
6788: PUSH
6789: LD_EXP 23
6793: PUSH
6794: LD_OWVAR 1
6798: MINUS
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: ADD
6804: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
6805: LD_INT 0
6807: PUSH
6808: LD_EXP 28
6812: PUSH
6813: LD_OWVAR 1
6817: MINUS
6818: LESSEQUAL
6819: IFFALSE 6850
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
6821: LD_ADDR_VAR 0 2
6825: PUSH
6826: LD_VAR 0 2
6830: PUSH
6831: LD_STRING #builduptime
6833: PUSH
6834: LD_EXP 28
6838: PUSH
6839: LD_OWVAR 1
6843: MINUS
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: ADD
6849: ST_TO_ADDR
// if ( ExtraStrings ) then
6850: LD_EXP 55
6854: IFFALSE 6876
// AllStrings := AllStrings ^  ^ ExtraStrings ;
6856: LD_ADDR_VAR 0 2
6860: PUSH
6861: LD_VAR 0 2
6865: PUSH
6866: LD_STRING 
6868: ADD
6869: PUSH
6870: LD_EXP 55
6874: ADD
6875: ST_TO_ADDR
// Display_Strings := AllStrings ;
6876: LD_ADDR_OWVAR 47
6880: PUSH
6881: LD_VAR 0 2
6885: ST_TO_ADDR
// end ;
6886: LD_VAR 0 1
6890: RET
// every 0 0$1 do
6891: GO 6893
6893: DISABLE
// begin ShowTimer ;
6894: CALL 6717 0 0
// enable ;
6898: ENABLE
// end ; end_of_file
6899: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6900: LD_VAR 0 1
6904: PPUSH
6905: CALL_OW 266
6909: PUSH
6910: LD_INT 0
6912: PUSH
6913: LD_INT 1
6915: PUSH
6916: EMPTY
6917: LIST
6918: LIST
6919: IN
6920: IFFALSE 6945
// SetBName ( b , @ & GetSide ( b ) ) ;
6922: LD_VAR 0 1
6926: PPUSH
6927: LD_STRING @
6929: PUSH
6930: LD_VAR 0 1
6934: PPUSH
6935: CALL_OW 255
6939: STR
6940: PPUSH
6941: CALL_OW 500
// end ;
6945: PPOPN 2
6947: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6948: LD_VAR 0 1
6952: PPUSH
6953: CALL_OW 266
6957: PUSH
6958: LD_INT 0
6960: PUSH
6961: LD_INT 1
6963: PUSH
6964: EMPTY
6965: LIST
6966: LIST
6967: IN
6968: IFFALSE 6993
// SetBName ( b , @ & GetSide ( b ) ) ;
6970: LD_VAR 0 1
6974: PPUSH
6975: LD_STRING @
6977: PUSH
6978: LD_VAR 0 1
6982: PPUSH
6983: CALL_OW 255
6987: STR
6988: PPUSH
6989: CALL_OW 500
// end ;
6993: PPOPN 3
6995: END
// on VehicleConstructed ( veh , fac ) do var side ;
6996: LD_INT 0
6998: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6999: LD_VAR 0 1
7003: PPUSH
7004: CALL_OW 263
7008: PUSH
7009: LD_INT 5
7011: EQUAL
7012: IFFALSE 7154
// begin side := GetSide ( veh ) ;
7014: LD_ADDR_VAR 0 3
7018: PUSH
7019: LD_VAR 0 1
7023: PPUSH
7024: CALL_OW 255
7028: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7029: LD_ADDR_EXP 51
7033: PUSH
7034: LD_EXP 51
7038: PPUSH
7039: LD_VAR 0 3
7043: PPUSH
7044: LD_EXP 51
7048: PUSH
7049: LD_VAR 0 3
7053: ARRAY
7054: PPUSH
7055: LD_INT 52
7057: PUSH
7058: EMPTY
7059: LIST
7060: PPUSH
7061: CALL_OW 72
7065: PUSH
7066: LD_INT 22
7068: PUSH
7069: LD_VAR 0 3
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: PUSH
7078: LD_INT 2
7080: PUSH
7081: LD_INT 33
7083: PUSH
7084: LD_INT 5
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: PUSH
7091: LD_INT 25
7093: PUSH
7094: LD_INT 12
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PUSH
7101: LD_INT 25
7103: PUSH
7104: LD_INT 15
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: PUSH
7111: LD_INT 25
7113: PUSH
7114: LD_INT 16
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: PUSH
7121: LD_INT 25
7123: PUSH
7124: LD_INT 17
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: LIST
7135: LIST
7136: LIST
7137: LIST
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: PPUSH
7143: CALL_OW 69
7147: UNION
7148: PPUSH
7149: CALL_OW 1
7153: ST_TO_ADDR
// end ; end ;
7154: PPOPN 3
7156: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7157: LD_INT 0
7159: PPUSH
7160: PPUSH
7161: PPUSH
7162: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7163: LD_VAR 0 1
7167: PPUSH
7168: CALL_OW 257
7172: PUSH
7173: LD_INT 12
7175: PUSH
7176: LD_INT 15
7178: PUSH
7179: LD_INT 17
7181: PUSH
7182: LD_INT 16
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: IN
7191: PUSH
7192: LD_VAR 0 1
7196: PPUSH
7197: CALL_OW 263
7201: PUSH
7202: LD_INT 5
7204: EQUAL
7205: OR
7206: IFFALSE 7217
// ApeKilled ( j ) ;
7208: LD_VAR 0 1
7212: PPUSH
7213: CALL 5345 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7217: LD_VAR 0 1
7221: PPUSH
7222: CALL_OW 266
7226: PUSH
7227: LD_INT 0
7229: PUSH
7230: LD_INT 1
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: IN
7237: IFFALSE 7319
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7239: LD_ADDR_VAR 0 4
7243: PUSH
7244: LD_EXP 35
7248: PUSH
7249: LD_VAR 0 1
7253: PPUSH
7254: CALL_OW 255
7258: ARRAY
7259: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7260: LD_ADDR_VAR 0 2
7264: PUSH
7265: LD_EXP 42
7269: PUSH
7270: LD_VAR 0 4
7274: ARRAY
7275: PUSH
7276: LD_INT 1
7278: ARRAY
7279: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7280: LD_ADDR_VAR 0 3
7284: PUSH
7285: LD_EXP 42
7289: PUSH
7290: LD_VAR 0 4
7294: ARRAY
7295: PUSH
7296: LD_INT 2
7298: ARRAY
7299: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7300: LD_VAR 0 2
7304: PPUSH
7305: LD_VAR 0 3
7309: PPUSH
7310: CALL_OW 420
7314: PPUSH
7315: CALL_OW 419
// end ; end ;
7319: PPOPN 5
7321: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7322: LD_VAR 0 1
7326: PPUSH
7327: LD_VAR 0 2
7331: PPUSH
7332: LD_VAR 0 3
7336: PPUSH
7337: LD_OWVAR 2
7341: PPUSH
7342: CALL 7947 0 4
7346: PPOPN 3
7348: END
// export BuildUpAreas ; export buildUpTimeActive ; export function BeginBuildUp ; var i , j ; begin
7349: LD_INT 0
7351: PPUSH
7352: PPUSH
7353: PPUSH
// buildUpTime_Delay = 0 ;
7354: LD_ADDR_EXP 28
7358: PUSH
7359: LD_INT 0
7361: ST_TO_ADDR
// if not def_builduptime then
7362: LD_EXP 14
7366: NOT
7367: IFFALSE 7371
// exit ;
7369: GO 7554
// buildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
7371: LD_ADDR_EXP 28
7375: PUSH
7376: LD_INT 8400
7378: PUSH
7379: LD_INT 2100
7381: PUSH
7382: LD_EXP 14
7386: MUL
7387: PLUS
7388: ST_TO_ADDR
// buildUpTimeActive := true ;
7389: LD_ADDR_EXP 58
7393: PUSH
7394: LD_INT 1
7396: ST_TO_ADDR
// for i := 1 to 8 do
7397: LD_ADDR_VAR 0 2
7401: PUSH
7402: DOUBLE
7403: LD_INT 1
7405: DEC
7406: ST_TO_ADDR
7407: LD_INT 8
7409: PUSH
7410: FOR_TO
7411: IFFALSE 7552
// if Side_Positions [ i ] then
7413: LD_EXP 35
7417: PUSH
7418: LD_VAR 0 2
7422: ARRAY
7423: IFFALSE 7550
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
7425: LD_EXP 57
7429: PUSH
7430: LD_EXP 35
7434: PUSH
7435: LD_VAR 0 2
7439: ARRAY
7440: ARRAY
7441: PPUSH
7442: LD_INT 5
7444: PPUSH
7445: CALL_OW 424
// for j := 1 to 8 do
7449: LD_ADDR_VAR 0 3
7453: PUSH
7454: DOUBLE
7455: LD_INT 1
7457: DEC
7458: ST_TO_ADDR
7459: LD_INT 8
7461: PUSH
7462: FOR_TO
7463: IFFALSE 7548
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
7465: LD_EXP 35
7469: PUSH
7470: LD_VAR 0 3
7474: ARRAY
7475: PUSH
7476: LD_EXP 33
7480: PUSH
7481: LD_VAR 0 2
7485: ARRAY
7486: PUSH
7487: LD_EXP 33
7491: PUSH
7492: LD_VAR 0 3
7496: ARRAY
7497: NONEQUAL
7498: PUSH
7499: LD_EXP 39
7503: NOT
7504: PUSH
7505: LD_VAR 0 2
7509: PUSH
7510: LD_VAR 0 3
7514: NONEQUAL
7515: AND
7516: OR
7517: AND
7518: IFFALSE 7546
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
7520: LD_VAR 0 3
7524: PPUSH
7525: LD_EXP 57
7529: PUSH
7530: LD_EXP 35
7534: PUSH
7535: LD_VAR 0 2
7539: ARRAY
7540: ARRAY
7541: PPUSH
7542: CALL_OW 333
7546: GO 7462
7548: POP
7549: POP
// end ;
7550: GO 7410
7552: POP
7553: POP
// end ;
7554: LD_VAR 0 1
7558: RET
// export function EndBuildUp ; var i , j ; begin
7559: LD_INT 0
7561: PPUSH
7562: PPUSH
7563: PPUSH
// buildUpTimeActive := false ;
7564: LD_ADDR_EXP 58
7568: PUSH
7569: LD_INT 0
7571: ST_TO_ADDR
// for i := 1 to 8 do
7572: LD_ADDR_VAR 0 2
7576: PUSH
7577: DOUBLE
7578: LD_INT 1
7580: DEC
7581: ST_TO_ADDR
7582: LD_INT 8
7584: PUSH
7585: FOR_TO
7586: IFFALSE 7727
// if Side_Positions [ i ] then
7588: LD_EXP 35
7592: PUSH
7593: LD_VAR 0 2
7597: ARRAY
7598: IFFALSE 7725
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
7600: LD_EXP 57
7604: PUSH
7605: LD_EXP 35
7609: PUSH
7610: LD_VAR 0 2
7614: ARRAY
7615: ARRAY
7616: PPUSH
7617: LD_INT 0
7619: PPUSH
7620: CALL_OW 424
// for j := 1 to 8 do
7624: LD_ADDR_VAR 0 3
7628: PUSH
7629: DOUBLE
7630: LD_INT 1
7632: DEC
7633: ST_TO_ADDR
7634: LD_INT 8
7636: PUSH
7637: FOR_TO
7638: IFFALSE 7723
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
7640: LD_EXP 35
7644: PUSH
7645: LD_VAR 0 3
7649: ARRAY
7650: PUSH
7651: LD_EXP 33
7655: PUSH
7656: LD_VAR 0 2
7660: ARRAY
7661: PUSH
7662: LD_EXP 33
7666: PUSH
7667: LD_VAR 0 3
7671: ARRAY
7672: NONEQUAL
7673: PUSH
7674: LD_EXP 39
7678: NOT
7679: PUSH
7680: LD_VAR 0 2
7684: PUSH
7685: LD_VAR 0 3
7689: NONEQUAL
7690: AND
7691: OR
7692: AND
7693: IFFALSE 7721
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
7695: LD_VAR 0 3
7699: PPUSH
7700: LD_EXP 57
7704: PUSH
7705: LD_EXP 35
7709: PUSH
7710: LD_VAR 0 2
7714: ARRAY
7715: ARRAY
7716: PPUSH
7717: CALL_OW 334
7721: GO 7637
7723: POP
7724: POP
// end ;
7725: GO 7585
7727: POP
7728: POP
// end ;
7729: LD_VAR 0 1
7733: RET
// every 5 trigger buildUpTimeActive do var i , un ;
7734: LD_EXP 58
7738: IFFALSE 7913
7740: GO 7742
7742: DISABLE
7743: LD_INT 0
7745: PPUSH
7746: PPUSH
// begin for i := 1 to 8 do
7747: LD_ADDR_VAR 0 1
7751: PUSH
7752: DOUBLE
7753: LD_INT 1
7755: DEC
7756: ST_TO_ADDR
7757: LD_INT 8
7759: PUSH
7760: FOR_TO
7761: IFFALSE 7910
// if Side_Positions [ i ] then
7763: LD_EXP 35
7767: PUSH
7768: LD_VAR 0 1
7772: ARRAY
7773: IFFALSE 7908
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
7775: LD_ADDR_VAR 0 2
7779: PUSH
7780: LD_EXP 57
7784: PUSH
7785: LD_EXP 35
7789: PUSH
7790: LD_VAR 0 1
7794: ARRAY
7795: ARRAY
7796: PPUSH
7797: LD_INT 2
7799: PUSH
7800: LD_INT 21
7802: PUSH
7803: LD_INT 1
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: PUSH
7810: LD_INT 21
7812: PUSH
7813: LD_INT 2
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: LIST
7824: PUSH
7825: LD_INT 22
7827: PUSH
7828: LD_OWVAR 2
7832: PUSH
7833: EMPTY
7834: LIST
7835: LIST
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: PPUSH
7841: CALL_OW 70
7845: PUSH
7846: FOR_IN
7847: IFFALSE 7906
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
7849: LD_EXP 33
7853: PUSH
7854: LD_VAR 0 1
7858: ARRAY
7859: PUSH
7860: LD_EXP 33
7864: PUSH
7865: LD_OWVAR 2
7869: ARRAY
7870: NONEQUAL
7871: PUSH
7872: LD_EXP 39
7876: NOT
7877: PUSH
7878: LD_VAR 0 1
7882: PUSH
7883: LD_OWVAR 2
7887: NONEQUAL
7888: AND
7889: OR
7890: IFFALSE 7904
// ComMoveToArea ( un , BuildUpEscape ) ;
7892: LD_VAR 0 2
7896: PPUSH
7897: LD_INT 16
7899: PPUSH
7900: CALL_OW 113
7904: GO 7846
7906: POP
7907: POP
7908: GO 7760
7910: POP
7911: POP
// enable ;
7912: ENABLE
// end ;
7913: PPOPN 2
7915: END
// every 0 0$1 trigger def_builduptime do
7916: LD_EXP 14
7920: IFFALSE 7946
7922: GO 7924
7924: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
7925: LD_INT 8400
7927: PUSH
7928: LD_EXP 14
7932: PUSH
7933: LD_INT 2100
7935: MUL
7936: PLUS
7937: PPUSH
7938: CALL_OW 67
// EndBuildUp ;
7942: CALL 7559 0 0
// end ; end_of_file
7946: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
7947: LD_INT 0
7949: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
7950: LD_VAR 0 1
7954: PPUSH
7955: CALL_OW 255
7959: PUSH
7960: LD_VAR 0 4
7964: EQUAL
7965: IFFALSE 7984
// begin SetAchievement ( ACH_RAD ) ;
7967: LD_STRING ACH_RAD
7969: PPUSH
7970: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
7974: LD_STRING ACH_NL
7976: PPUSH
7977: LD_INT 1
7979: PPUSH
7980: CALL_OW 564
// end end ;
7984: LD_VAR 0 5
7988: RET
// export function SA_Win ( side ) ; begin
7989: LD_INT 0
7991: PPUSH
// case side of 1 :
7992: LD_VAR 0 1
7996: PUSH
7997: LD_INT 1
7999: DOUBLE
8000: EQUAL
8001: IFTRUE 8005
8003: GO 8018
8005: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
8006: LD_STRING ACH_AH
8008: PPUSH
8009: LD_INT 1
8011: PPUSH
8012: CALL_OW 564
8016: GO 8181
8018: LD_INT 2
8020: DOUBLE
8021: EQUAL
8022: IFTRUE 8026
8024: GO 8039
8026: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
8027: LD_STRING ACH_E
8029: PPUSH
8030: LD_INT 1
8032: PPUSH
8033: CALL_OW 564
8037: GO 8181
8039: LD_INT 3
8041: DOUBLE
8042: EQUAL
8043: IFTRUE 8047
8045: GO 8060
8047: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
8048: LD_STRING ACH_OOL
8050: PPUSH
8051: LD_INT 1
8053: PPUSH
8054: CALL_OW 564
8058: GO 8181
8060: LD_INT 1
8062: PUSH
8063: LD_INT 2
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: DOUBLE
8070: EQUAL
8071: IFTRUE 8075
8073: GO 8100
8075: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8076: LD_STRING ACH_AH
8078: PPUSH
8079: LD_REAL  5.00000000000000E-0001
8082: PPUSH
8083: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8087: LD_STRING ACH_E
8089: PPUSH
8090: LD_REAL  5.00000000000000E-0001
8093: PPUSH
8094: CALL_OW 564
// end ; [ 2 , 3 ] :
8098: GO 8181
8100: LD_INT 2
8102: PUSH
8103: LD_INT 3
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: DOUBLE
8110: EQUAL
8111: IFTRUE 8115
8113: GO 8140
8115: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
8116: LD_STRING ACH_OOL
8118: PPUSH
8119: LD_REAL  5.00000000000000E-0001
8122: PPUSH
8123: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8127: LD_STRING ACH_E
8129: PPUSH
8130: LD_REAL  5.00000000000000E-0001
8133: PPUSH
8134: CALL_OW 564
// end ; [ 3 , 1 ] :
8138: GO 8181
8140: LD_INT 3
8142: PUSH
8143: LD_INT 1
8145: PUSH
8146: EMPTY
8147: LIST
8148: LIST
8149: DOUBLE
8150: EQUAL
8151: IFTRUE 8155
8153: GO 8180
8155: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8156: LD_STRING ACH_AH
8158: PPUSH
8159: LD_REAL  5.00000000000000E-0001
8162: PPUSH
8163: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
8167: LD_STRING ACH_OOL
8169: PPUSH
8170: LD_REAL  5.00000000000000E-0001
8173: PPUSH
8174: CALL_OW 564
// end ; end ;
8178: GO 8181
8180: POP
// end ; end_of_file
8181: LD_VAR 0 2
8185: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
8186: LD_INT 0
8188: PPUSH
8189: PPUSH
// enable ( 98 ) ;
8190: LD_INT 98
8192: ENABLE_MARKED
// GameEnded = false ;
8193: LD_ADDR_LOC 9
8197: PUSH
8198: LD_INT 0
8200: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8201: LD_ADDR_LOC 8
8205: PUSH
8206: LD_INT 0
8208: PUSH
8209: LD_INT 0
8211: PUSH
8212: LD_INT 0
8214: PUSH
8215: LD_INT 0
8217: PUSH
8218: LD_INT 0
8220: PUSH
8221: LD_INT 0
8223: PUSH
8224: LD_INT 0
8226: PUSH
8227: LD_INT 0
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: ST_TO_ADDR
// unfoged = false ;
8240: LD_ADDR_LOC 10
8244: PUSH
8245: LD_INT 0
8247: ST_TO_ADDR
// for i = 1 to side_positions do
8248: LD_ADDR_VAR 0 2
8252: PUSH
8253: DOUBLE
8254: LD_INT 1
8256: DEC
8257: ST_TO_ADDR
8258: LD_EXP 35
8262: PUSH
8263: FOR_TO
8264: IFFALSE 8304
// if not side_positions [ i ] then
8266: LD_EXP 35
8270: PUSH
8271: LD_VAR 0 2
8275: ARRAY
8276: NOT
8277: IFFALSE 8302
// defaited = replace ( defaited , i , true ) ;
8279: LD_ADDR_LOC 8
8283: PUSH
8284: LD_LOC 8
8288: PPUSH
8289: LD_VAR 0 2
8293: PPUSH
8294: LD_INT 1
8296: PPUSH
8297: CALL_OW 1
8301: ST_TO_ADDR
8302: GO 8263
8304: POP
8305: POP
// end ;
8306: LD_VAR 0 1
8310: RET
// function CanWinLoose ; begin
8311: LD_INT 0
8313: PPUSH
// Result := true ;
8314: LD_ADDR_VAR 0 1
8318: PUSH
8319: LD_INT 1
8321: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8322: CALL_OW 518
8326: PUSH
8327: CALL_OW 519
8331: PUSH
8332: LD_INT 0
8334: GREATER
8335: AND
8336: IFFALSE 8346
// Result := false ;
8338: LD_ADDR_VAR 0 1
8342: PUSH
8343: LD_INT 0
8345: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8346: CALL_OW 531
8350: PUSH
8351: CALL_OW 519
8355: PUSH
8356: LD_INT 1
8358: GREATER
8359: AND
8360: IFFALSE 8370
// Result := false ;
8362: LD_ADDR_VAR 0 1
8366: PUSH
8367: LD_INT 0
8369: ST_TO_ADDR
// end ;
8370: LD_VAR 0 1
8374: RET
// export function HasPower ( i ) ; var k , h ; begin
8375: LD_INT 0
8377: PPUSH
8378: PPUSH
8379: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
8380: LD_VAR 0 1
8384: PPUSH
8385: CALL_OW 108
8389: NOT
8390: PUSH
8391: LD_EXP 40
8395: PUSH
8396: LD_VAR 0 1
8400: ARRAY
8401: NOT
8402: AND
8403: PUSH
8404: LD_OWVAR 4
8408: AND
8409: IFFALSE 8421
// begin result = false ;
8411: LD_ADDR_VAR 0 2
8415: PUSH
8416: LD_INT 0
8418: ST_TO_ADDR
// end else
8419: GO 8716
// case def_win_rules of 0 :
8421: LD_EXP 27
8425: PUSH
8426: LD_INT 0
8428: DOUBLE
8429: EQUAL
8430: IFTRUE 8434
8432: GO 8597
8434: POP
// if def_people_respawning then
8435: LD_EXP 12
8439: IFFALSE 8530
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8441: LD_ADDR_VAR 0 2
8445: PUSH
8446: LD_INT 22
8448: PUSH
8449: LD_VAR 0 1
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: PUSH
8458: LD_INT 2
8460: PUSH
8461: LD_INT 21
8463: PUSH
8464: LD_INT 1
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: PUSH
8471: LD_INT 33
8473: PUSH
8474: LD_INT 3
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: PUSH
8481: LD_INT 33
8483: PUSH
8484: LD_INT 5
8486: PUSH
8487: EMPTY
8488: LIST
8489: LIST
8490: PUSH
8491: LD_INT 30
8493: PUSH
8494: LD_INT 0
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: PUSH
8501: LD_INT 30
8503: PUSH
8504: LD_INT 1
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: PUSH
8511: EMPTY
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: PPUSH
8523: CALL_OW 69
8527: ST_TO_ADDR
8528: GO 8595
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
8530: LD_ADDR_VAR 0 2
8534: PUSH
8535: LD_INT 22
8537: PUSH
8538: LD_VAR 0 1
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: PUSH
8547: LD_INT 2
8549: PUSH
8550: LD_INT 21
8552: PUSH
8553: LD_INT 1
8555: PUSH
8556: EMPTY
8557: LIST
8558: LIST
8559: PUSH
8560: LD_INT 33
8562: PUSH
8563: LD_INT 3
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: PUSH
8570: LD_INT 33
8572: PUSH
8573: LD_INT 5
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: PPUSH
8590: CALL_OW 69
8594: ST_TO_ADDR
8595: GO 8716
8597: LD_INT 1
8599: DOUBLE
8600: EQUAL
8601: IFTRUE 8605
8603: GO 8644
8605: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
8606: LD_ADDR_VAR 0 2
8610: PUSH
8611: LD_INT 22
8613: PUSH
8614: LD_VAR 0 1
8618: PUSH
8619: EMPTY
8620: LIST
8621: LIST
8622: PUSH
8623: LD_INT 21
8625: PUSH
8626: LD_INT 1
8628: PUSH
8629: EMPTY
8630: LIST
8631: LIST
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: PPUSH
8637: CALL_OW 69
8641: ST_TO_ADDR
8642: GO 8716
8644: LD_INT 2
8646: DOUBLE
8647: EQUAL
8648: IFTRUE 8652
8650: GO 8715
8652: POP
// begin h = false ;
8653: LD_ADDR_VAR 0 4
8657: PUSH
8658: LD_INT 0
8660: ST_TO_ADDR
// for k in heroes [ i ] do
8661: LD_ADDR_VAR 0 3
8665: PUSH
8666: LD_EXP 44
8670: PUSH
8671: LD_VAR 0 1
8675: ARRAY
8676: PUSH
8677: FOR_IN
8678: IFFALSE 8701
// if IsLive ( k ) then
8680: LD_VAR 0 3
8684: PPUSH
8685: CALL_OW 300
8689: IFFALSE 8699
// h = true ;
8691: LD_ADDR_VAR 0 4
8695: PUSH
8696: LD_INT 1
8698: ST_TO_ADDR
8699: GO 8677
8701: POP
8702: POP
// Result := h ;
8703: LD_ADDR_VAR 0 2
8707: PUSH
8708: LD_VAR 0 4
8712: ST_TO_ADDR
// end ; end ;
8713: GO 8716
8715: POP
// end ;
8716: LD_VAR 0 2
8720: RET
// function AlliedSides ( i , j ) ; begin
8721: LD_INT 0
8723: PPUSH
// Result := false ;
8724: LD_ADDR_VAR 0 3
8728: PUSH
8729: LD_INT 0
8731: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8732: LD_VAR 0 1
8736: PPUSH
8737: LD_VAR 0 2
8741: PPUSH
8742: CALL_OW 81
8746: PUSH
8747: LD_INT 1
8749: EQUAL
8750: PUSH
8751: LD_VAR 0 2
8755: PPUSH
8756: LD_VAR 0 1
8760: PPUSH
8761: CALL_OW 81
8765: PUSH
8766: LD_INT 1
8768: EQUAL
8769: AND
8770: PUSH
8771: LD_VAR 0 1
8775: PPUSH
8776: CALL_OW 83
8780: AND
8781: PUSH
8782: LD_VAR 0 2
8786: PPUSH
8787: CALL_OW 83
8791: AND
8792: IFFALSE 8802
// Result := true ;
8794: LD_ADDR_VAR 0 3
8798: PUSH
8799: LD_INT 1
8801: ST_TO_ADDR
// end ;
8802: LD_VAR 0 3
8806: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
8807: CALL 8311 0 0
8811: PUSH
8812: LD_LOC 9
8816: NOT
8817: AND
8818: IFFALSE 8834
8820: GO 8822
8822: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
8823: LD_ADDR_EXP 56
8827: PUSH
8828: LD_STRING #Player-Ended
8830: PUSH
8831: EMPTY
8832: LIST
8833: ST_TO_ADDR
8834: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
8835: CALL 8311 0 0
8839: PUSH
8840: LD_LOC 9
8844: AND
8845: IFFALSE 8854
8847: GO 8849
8849: DISABLE
// YouLostInMultiplayer ;
8850: CALL_OW 107
8854: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
8855: CALL 8311 0 0
8859: NOT
8860: PUSH
8861: CALL_OW 531
8865: NOT
8866: AND
8867: IFFALSE 8883
8869: GO 8871
8871: DISABLE
// WaitServerStrings = [ #server-wait ] ;
8872: LD_ADDR_EXP 56
8876: PUSH
8877: LD_STRING #server-wait
8879: PUSH
8880: EMPTY
8881: LIST
8882: ST_TO_ADDR
8883: END
// every 100 trigger IAmSpec do
8884: CALL_OW 531
8888: IFFALSE 8904
8890: GO 8892
8892: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
8893: LD_ADDR_EXP 56
8897: PUSH
8898: LD_STRING #Player-IAmSpec
8900: PUSH
8901: EMPTY
8902: LIST
8903: ST_TO_ADDR
8904: END
// every 100 trigger GameEnded and IAmSpec do
8905: LD_LOC 9
8909: PUSH
8910: CALL_OW 531
8914: AND
8915: IFFALSE 8924
8917: GO 8919
8919: DISABLE
// YouLostInMultiplayer ;
8920: CALL_OW 107
8924: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
8925: CALL 8311 0 0
8929: PUSH
8930: LD_LOC 9
8934: NOT
8935: AND
8936: IFFALSE 8952
8938: GO 8940
8940: DISABLE
// WaitServerStrings = [ $player-win ] ;
8941: LD_ADDR_EXP 56
8945: PUSH
8946: LD_STRING $player-win
8948: PUSH
8949: EMPTY
8950: LIST
8951: ST_TO_ADDR
8952: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
8953: CALL 8311 0 0
8957: PUSH
8958: LD_LOC 9
8962: AND
8963: IFFALSE 8987
8965: GO 8967
8967: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
8968: LD_EXP 36
8972: PUSH
8973: LD_OWVAR 2
8977: ARRAY
8978: PPUSH
8979: CALL 7989 0 1
// YouWinInMultiplayer ;
8983: CALL_OW 106
// end ;
8987: END
// every 100 trigger isEditor marked 401 do
8988: LD_OWVAR 84
8992: IFFALSE 9008
8994: GO 8996
8996: DISABLE
// Debug_Strings = [ You won ] ;
8997: LD_ADDR_OWVAR 48
9001: PUSH
9002: LD_STRING You won
9004: PUSH
9005: EMPTY
9006: LIST
9007: ST_TO_ADDR
9008: END
// every 100 trigger isEditor marked 400 do
9009: LD_OWVAR 84
9013: IFFALSE 9029
9015: GO 9017
9017: DISABLE
// Debug_Strings = [ You loss ] ;
9018: LD_ADDR_OWVAR 48
9022: PUSH
9023: LD_STRING You loss
9025: PUSH
9026: EMPTY
9027: LIST
9028: ST_TO_ADDR
9029: END
// every 100 marked 98 do var i , un ;
9030: GO 9032
9032: DISABLE
9033: LD_INT 0
9035: PPUSH
9036: PPUSH
// begin for i = 1 to side_positions do
9037: LD_ADDR_VAR 0 1
9041: PUSH
9042: DOUBLE
9043: LD_INT 1
9045: DEC
9046: ST_TO_ADDR
9047: LD_EXP 35
9051: PUSH
9052: FOR_TO
9053: IFFALSE 9136
// if side_positions [ i ] then
9055: LD_EXP 35
9059: PUSH
9060: LD_VAR 0 1
9064: ARRAY
9065: IFFALSE 9134
// if not HasPower ( i ) and not Defaited [ i ] then
9067: LD_VAR 0 1
9071: PPUSH
9072: CALL 8375 0 1
9076: NOT
9077: PUSH
9078: LD_LOC 8
9082: PUSH
9083: LD_VAR 0 1
9087: ARRAY
9088: NOT
9089: AND
9090: IFFALSE 9134
// begin Defaited = replace ( Defaited , i , true ) ;
9092: LD_ADDR_LOC 8
9096: PUSH
9097: LD_LOC 8
9101: PPUSH
9102: LD_VAR 0 1
9106: PPUSH
9107: LD_INT 1
9109: PPUSH
9110: CALL_OW 1
9114: ST_TO_ADDR
// if i = your_side then
9115: LD_VAR 0 1
9119: PUSH
9120: LD_OWVAR 2
9124: EQUAL
9125: IFFALSE 9134
// begin Multiplayer_Loose_Message ;
9127: CALL_OW 521
// enable ( 400 ) ;
9131: LD_INT 400
9133: ENABLE_MARKED
// end ; end ;
9134: GO 9052
9136: POP
9137: POP
// if not Unfoged and defaited [ your_side ] then
9138: LD_LOC 10
9142: NOT
9143: PUSH
9144: LD_LOC 8
9148: PUSH
9149: LD_OWVAR 2
9153: ARRAY
9154: AND
9155: IFFALSE 9161
// Unfog ;
9157: CALL 9337 0 0
// DidGameEnd ;
9161: CALL 9176 0 0
// if not GameEnded then
9165: LD_LOC 9
9169: NOT
9170: IFFALSE 9173
// enable ;
9172: ENABLE
// end ;
9173: PPOPN 2
9175: END
// function DidGameEnd ; var i , k , enemy ; begin
9176: LD_INT 0
9178: PPUSH
9179: PPUSH
9180: PPUSH
9181: PPUSH
// enemy = [ ] ;
9182: LD_ADDR_VAR 0 4
9186: PUSH
9187: EMPTY
9188: ST_TO_ADDR
// for i = 1 to side_positions do
9189: LD_ADDR_VAR 0 2
9193: PUSH
9194: DOUBLE
9195: LD_INT 1
9197: DEC
9198: ST_TO_ADDR
9199: LD_EXP 35
9203: PUSH
9204: FOR_TO
9205: IFFALSE 9299
// if not defaited [ i ] then
9207: LD_LOC 8
9211: PUSH
9212: LD_VAR 0 2
9216: ARRAY
9217: NOT
9218: IFFALSE 9297
// for k = 1 to side_positions do
9220: LD_ADDR_VAR 0 3
9224: PUSH
9225: DOUBLE
9226: LD_INT 1
9228: DEC
9229: ST_TO_ADDR
9230: LD_EXP 35
9234: PUSH
9235: FOR_TO
9236: IFFALSE 9295
// if not defaited [ k ] then
9238: LD_LOC 8
9242: PUSH
9243: LD_VAR 0 3
9247: ARRAY
9248: NOT
9249: IFFALSE 9293
// if not AlliedSides ( i , k ) then
9251: LD_VAR 0 2
9255: PPUSH
9256: LD_VAR 0 3
9260: PPUSH
9261: CALL 8721 0 2
9265: NOT
9266: IFFALSE 9293
// enemy = enemy ^ [ i , k ] ;
9268: LD_ADDR_VAR 0 4
9272: PUSH
9273: LD_VAR 0 4
9277: PUSH
9278: LD_VAR 0 2
9282: PUSH
9283: LD_VAR 0 3
9287: PUSH
9288: EMPTY
9289: LIST
9290: LIST
9291: ADD
9292: ST_TO_ADDR
9293: GO 9235
9295: POP
9296: POP
9297: GO 9204
9299: POP
9300: POP
// if not enemy then
9301: LD_VAR 0 4
9305: NOT
9306: IFFALSE 9332
// begin GameEnded = true ;
9308: LD_ADDR_LOC 9
9312: PUSH
9313: LD_INT 1
9315: ST_TO_ADDR
// if not defaited [ your_side ] then
9316: LD_LOC 8
9320: PUSH
9321: LD_OWVAR 2
9325: ARRAY
9326: NOT
9327: IFFALSE 9332
// enable ( 401 ) ;
9329: LD_INT 401
9331: ENABLE_MARKED
// end ; end ;
9332: LD_VAR 0 1
9336: RET
// function unfog ; var k , friends ; begin
9337: LD_INT 0
9339: PPUSH
9340: PPUSH
9341: PPUSH
// SetPlayerSpectator ( ) ;
9342: CALL_OW 572
// unfoged = true ;
9346: LD_ADDR_LOC 10
9350: PUSH
9351: LD_INT 1
9353: ST_TO_ADDR
// end ;
9354: LD_VAR 0 1
9358: RET
// export function MakeGameEnd ; begin
9359: LD_INT 0
9361: PPUSH
// SetPlayerSpectator ( ) ;
9362: CALL_OW 572
// unfoged = true ;
9366: LD_ADDR_LOC 10
9370: PUSH
9371: LD_INT 1
9373: ST_TO_ADDR
// wait ( 0 0$5 ) ;
9374: LD_INT 175
9376: PPUSH
9377: CALL_OW 67
// GameEnded = true ;
9381: LD_ADDR_LOC 9
9385: PUSH
9386: LD_INT 1
9388: ST_TO_ADDR
// end ;
9389: LD_VAR 0 1
9393: RET
// export function GetGameEnded ; begin
9394: LD_INT 0
9396: PPUSH
// result = GameEnded ;
9397: LD_ADDR_VAR 0 1
9401: PUSH
9402: LD_LOC 9
9406: ST_TO_ADDR
// end ; end_of_file
9407: LD_VAR 0 1
9411: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9412: LD_INT 0
9414: PPUSH
9415: PPUSH
9416: PPUSH
// for side = 1 to 8 do
9417: LD_ADDR_VAR 0 2
9421: PUSH
9422: DOUBLE
9423: LD_INT 1
9425: DEC
9426: ST_TO_ADDR
9427: LD_INT 8
9429: PUSH
9430: FOR_TO
9431: IFFALSE 9552
// begin for i = 1 to 72 do
9433: LD_ADDR_VAR 0 3
9437: PUSH
9438: DOUBLE
9439: LD_INT 1
9441: DEC
9442: ST_TO_ADDR
9443: LD_INT 72
9445: PUSH
9446: FOR_TO
9447: IFFALSE 9478
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9449: LD_VAR 0 3
9453: PPUSH
9454: LD_VAR 0 2
9458: PPUSH
9459: LD_INT 0
9461: PPUSH
9462: LD_VAR 0 3
9466: PPUSH
9467: CALL_OW 565
9471: PPUSH
9472: CALL_OW 322
9476: GO 9446
9478: POP
9479: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9480: LD_INT 73
9482: PPUSH
9483: LD_VAR 0 2
9487: PPUSH
9488: LD_INT 0
9490: PPUSH
9491: LD_INT 25
9493: PPUSH
9494: CALL_OW 565
9498: PPUSH
9499: CALL_OW 322
// for i = 0 to 40 do
9503: LD_ADDR_VAR 0 3
9507: PUSH
9508: DOUBLE
9509: LD_INT 0
9511: DEC
9512: ST_TO_ADDR
9513: LD_INT 40
9515: PUSH
9516: FOR_TO
9517: IFFALSE 9548
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9519: LD_VAR 0 3
9523: PPUSH
9524: LD_VAR 0 2
9528: PPUSH
9529: LD_INT 1
9531: PPUSH
9532: LD_VAR 0 3
9536: PPUSH
9537: CALL_OW 565
9541: PPUSH
9542: CALL_OW 324
9546: GO 9516
9548: POP
9549: POP
// end ;
9550: GO 9430
9552: POP
9553: POP
// end ;
9554: LD_VAR 0 1
9558: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9559: LD_INT 0
9561: PPUSH
9562: PPUSH
9563: PPUSH
// for side = 1 to 8 do
9564: LD_ADDR_VAR 0 3
9568: PUSH
9569: DOUBLE
9570: LD_INT 1
9572: DEC
9573: ST_TO_ADDR
9574: LD_INT 8
9576: PUSH
9577: FOR_TO
9578: IFFALSE 13574
// begin for i = 1 to 73 do
9580: LD_ADDR_VAR 0 4
9584: PUSH
9585: DOUBLE
9586: LD_INT 1
9588: DEC
9589: ST_TO_ADDR
9590: LD_INT 73
9592: PUSH
9593: FOR_TO
9594: IFFALSE 9615
// SetTech ( i , side , state_disabled ) ;
9596: LD_VAR 0 4
9600: PPUSH
9601: LD_VAR 0 3
9605: PPUSH
9606: LD_INT 0
9608: PPUSH
9609: CALL_OW 322
9613: GO 9593
9615: POP
9616: POP
// for i = 0 to 40 do
9617: LD_ADDR_VAR 0 4
9621: PUSH
9622: DOUBLE
9623: LD_INT 0
9625: DEC
9626: ST_TO_ADDR
9627: LD_INT 40
9629: PUSH
9630: FOR_TO
9631: IFFALSE 9652
// SetRestrict ( i , side , false ) ;
9633: LD_VAR 0 4
9637: PPUSH
9638: LD_VAR 0 3
9642: PPUSH
9643: LD_INT 0
9645: PPUSH
9646: CALL_OW 324
9650: GO 9630
9652: POP
9653: POP
// case level of 1 :
9654: LD_VAR 0 1
9658: PUSH
9659: LD_INT 1
9661: DOUBLE
9662: EQUAL
9663: IFTRUE 9667
9665: GO 9820
9667: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9668: LD_INT 35
9670: PPUSH
9671: LD_VAR 0 3
9675: PPUSH
9676: LD_INT 1
9678: PPUSH
9679: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9683: LD_INT 45
9685: PPUSH
9686: LD_VAR 0 3
9690: PPUSH
9691: LD_INT 1
9693: PPUSH
9694: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9698: LD_INT 46
9700: PPUSH
9701: LD_VAR 0 3
9705: PPUSH
9706: LD_INT 1
9708: PPUSH
9709: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9713: LD_INT 47
9715: PPUSH
9716: LD_VAR 0 3
9720: PPUSH
9721: LD_INT 1
9723: PPUSH
9724: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9728: LD_INT 0
9730: PPUSH
9731: LD_VAR 0 3
9735: PPUSH
9736: LD_INT 1
9738: PPUSH
9739: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9743: LD_INT 2
9745: PPUSH
9746: LD_VAR 0 3
9750: PPUSH
9751: LD_INT 1
9753: PPUSH
9754: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9758: LD_INT 4
9760: PPUSH
9761: LD_VAR 0 3
9765: PPUSH
9766: LD_INT 1
9768: PPUSH
9769: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9773: LD_INT 6
9775: PPUSH
9776: LD_VAR 0 3
9780: PPUSH
9781: LD_INT 1
9783: PPUSH
9784: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9788: LD_INT 29
9790: PPUSH
9791: LD_VAR 0 3
9795: PPUSH
9796: LD_INT 1
9798: PPUSH
9799: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9803: LD_INT 31
9805: PPUSH
9806: LD_VAR 0 3
9810: PPUSH
9811: LD_INT 1
9813: PPUSH
9814: CALL_OW 324
// end ; 2 :
9818: GO 13572
9820: LD_INT 2
9822: DOUBLE
9823: EQUAL
9824: IFTRUE 9828
9826: GO 10026
9828: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9829: LD_INT 35
9831: PPUSH
9832: LD_VAR 0 3
9836: PPUSH
9837: LD_INT 1
9839: PPUSH
9840: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9844: LD_INT 45
9846: PPUSH
9847: LD_VAR 0 3
9851: PPUSH
9852: LD_INT 1
9854: PPUSH
9855: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9859: LD_INT 46
9861: PPUSH
9862: LD_VAR 0 3
9866: PPUSH
9867: LD_INT 1
9869: PPUSH
9870: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9874: LD_INT 47
9876: PPUSH
9877: LD_VAR 0 3
9881: PPUSH
9882: LD_INT 1
9884: PPUSH
9885: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9889: LD_INT 1
9891: PPUSH
9892: LD_VAR 0 3
9896: PPUSH
9897: LD_INT 1
9899: PPUSH
9900: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9904: LD_INT 2
9906: PPUSH
9907: LD_VAR 0 3
9911: PPUSH
9912: LD_INT 1
9914: PPUSH
9915: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9919: LD_INT 11
9921: PPUSH
9922: LD_VAR 0 3
9926: PPUSH
9927: LD_INT 1
9929: PPUSH
9930: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9934: LD_INT 0
9936: PPUSH
9937: LD_VAR 0 3
9941: PPUSH
9942: LD_INT 1
9944: PPUSH
9945: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9949: LD_INT 2
9951: PPUSH
9952: LD_VAR 0 3
9956: PPUSH
9957: LD_INT 1
9959: PPUSH
9960: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9964: LD_INT 4
9966: PPUSH
9967: LD_VAR 0 3
9971: PPUSH
9972: LD_INT 1
9974: PPUSH
9975: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9979: LD_INT 6
9981: PPUSH
9982: LD_VAR 0 3
9986: PPUSH
9987: LD_INT 1
9989: PPUSH
9990: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9994: LD_INT 29
9996: PPUSH
9997: LD_VAR 0 3
10001: PPUSH
10002: LD_INT 1
10004: PPUSH
10005: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10009: LD_INT 31
10011: PPUSH
10012: LD_VAR 0 3
10016: PPUSH
10017: LD_INT 1
10019: PPUSH
10020: CALL_OW 324
// end ; 3 :
10024: GO 13572
10026: LD_INT 3
10028: DOUBLE
10029: EQUAL
10030: IFTRUE 10034
10032: GO 10487
10034: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10035: LD_INT 35
10037: PPUSH
10038: LD_VAR 0 3
10042: PPUSH
10043: LD_INT 1
10045: PPUSH
10046: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10050: LD_INT 45
10052: PPUSH
10053: LD_VAR 0 3
10057: PPUSH
10058: LD_INT 1
10060: PPUSH
10061: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10065: LD_INT 46
10067: PPUSH
10068: LD_VAR 0 3
10072: PPUSH
10073: LD_INT 1
10075: PPUSH
10076: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10080: LD_INT 47
10082: PPUSH
10083: LD_VAR 0 3
10087: PPUSH
10088: LD_INT 1
10090: PPUSH
10091: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10095: LD_INT 1
10097: PPUSH
10098: LD_VAR 0 3
10102: PPUSH
10103: LD_INT 1
10105: PPUSH
10106: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10110: LD_INT 2
10112: PPUSH
10113: LD_VAR 0 3
10117: PPUSH
10118: LD_INT 1
10120: PPUSH
10121: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10125: LD_INT 11
10127: PPUSH
10128: LD_VAR 0 3
10132: PPUSH
10133: LD_INT 1
10135: PPUSH
10136: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10140: LD_INT 48
10142: PPUSH
10143: LD_VAR 0 3
10147: PPUSH
10148: LD_INT 1
10150: PPUSH
10151: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10155: LD_INT 69
10157: PPUSH
10158: LD_VAR 0 3
10162: PPUSH
10163: LD_INT 1
10165: PPUSH
10166: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10170: LD_INT 39
10172: PPUSH
10173: LD_VAR 0 3
10177: PPUSH
10178: LD_INT 1
10180: PPUSH
10181: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10185: LD_INT 43
10187: PPUSH
10188: LD_VAR 0 3
10192: PPUSH
10193: LD_INT 1
10195: PPUSH
10196: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10200: LD_INT 51
10202: PPUSH
10203: LD_VAR 0 3
10207: PPUSH
10208: LD_INT 1
10210: PPUSH
10211: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10215: LD_INT 6
10217: PPUSH
10218: LD_VAR 0 3
10222: PPUSH
10223: LD_INT 1
10225: PPUSH
10226: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10230: LD_INT 0
10232: PPUSH
10233: LD_VAR 0 3
10237: PPUSH
10238: LD_INT 1
10240: PPUSH
10241: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10245: LD_INT 2
10247: PPUSH
10248: LD_VAR 0 3
10252: PPUSH
10253: LD_INT 1
10255: PPUSH
10256: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10260: LD_INT 3
10262: PPUSH
10263: LD_VAR 0 3
10267: PPUSH
10268: LD_INT 1
10270: PPUSH
10271: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10275: LD_INT 4
10277: PPUSH
10278: LD_VAR 0 3
10282: PPUSH
10283: LD_INT 1
10285: PPUSH
10286: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10290: LD_INT 6
10292: PPUSH
10293: LD_VAR 0 3
10297: PPUSH
10298: LD_INT 1
10300: PPUSH
10301: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10305: LD_INT 7
10307: PPUSH
10308: LD_VAR 0 3
10312: PPUSH
10313: LD_INT 1
10315: PPUSH
10316: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10320: LD_INT 8
10322: PPUSH
10323: LD_VAR 0 3
10327: PPUSH
10328: LD_INT 1
10330: PPUSH
10331: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10335: LD_INT 10
10337: PPUSH
10338: LD_VAR 0 3
10342: PPUSH
10343: LD_INT 1
10345: PPUSH
10346: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10350: LD_INT 15
10352: PPUSH
10353: LD_VAR 0 3
10357: PPUSH
10358: LD_INT 1
10360: PPUSH
10361: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10365: LD_INT 16
10367: PPUSH
10368: LD_VAR 0 3
10372: PPUSH
10373: LD_INT 1
10375: PPUSH
10376: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10380: LD_INT 17
10382: PPUSH
10383: LD_VAR 0 3
10387: PPUSH
10388: LD_INT 1
10390: PPUSH
10391: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10395: LD_INT 20
10397: PPUSH
10398: LD_VAR 0 3
10402: PPUSH
10403: LD_INT 1
10405: PPUSH
10406: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10410: LD_INT 26
10412: PPUSH
10413: LD_VAR 0 3
10417: PPUSH
10418: LD_INT 1
10420: PPUSH
10421: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10425: LD_INT 27
10427: PPUSH
10428: LD_VAR 0 3
10432: PPUSH
10433: LD_INT 1
10435: PPUSH
10436: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10440: LD_INT 29
10442: PPUSH
10443: LD_VAR 0 3
10447: PPUSH
10448: LD_INT 1
10450: PPUSH
10451: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10455: LD_INT 31
10457: PPUSH
10458: LD_VAR 0 3
10462: PPUSH
10463: LD_INT 1
10465: PPUSH
10466: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10470: LD_INT 32
10472: PPUSH
10473: LD_VAR 0 3
10477: PPUSH
10478: LD_INT 1
10480: PPUSH
10481: CALL_OW 324
// end ; 4 :
10485: GO 13572
10487: LD_INT 4
10489: DOUBLE
10490: EQUAL
10491: IFTRUE 10495
10493: GO 11443
10495: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10496: LD_INT 35
10498: PPUSH
10499: LD_VAR 0 3
10503: PPUSH
10504: LD_INT 1
10506: PPUSH
10507: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10511: LD_INT 45
10513: PPUSH
10514: LD_VAR 0 3
10518: PPUSH
10519: LD_INT 1
10521: PPUSH
10522: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10526: LD_INT 46
10528: PPUSH
10529: LD_VAR 0 3
10533: PPUSH
10534: LD_INT 1
10536: PPUSH
10537: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10541: LD_INT 47
10543: PPUSH
10544: LD_VAR 0 3
10548: PPUSH
10549: LD_INT 1
10551: PPUSH
10552: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10556: LD_INT 1
10558: PPUSH
10559: LD_VAR 0 3
10563: PPUSH
10564: LD_INT 1
10566: PPUSH
10567: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10571: LD_INT 2
10573: PPUSH
10574: LD_VAR 0 3
10578: PPUSH
10579: LD_INT 1
10581: PPUSH
10582: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10586: LD_INT 11
10588: PPUSH
10589: LD_VAR 0 3
10593: PPUSH
10594: LD_INT 1
10596: PPUSH
10597: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10601: LD_INT 20
10603: PPUSH
10604: LD_VAR 0 3
10608: PPUSH
10609: LD_INT 1
10611: PPUSH
10612: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10616: LD_INT 48
10618: PPUSH
10619: LD_VAR 0 3
10623: PPUSH
10624: LD_INT 1
10626: PPUSH
10627: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10631: LD_INT 49
10633: PPUSH
10634: LD_VAR 0 3
10638: PPUSH
10639: LD_INT 1
10641: PPUSH
10642: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10646: LD_INT 69
10648: PPUSH
10649: LD_VAR 0 3
10653: PPUSH
10654: LD_INT 1
10656: PPUSH
10657: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10661: LD_INT 39
10663: PPUSH
10664: LD_VAR 0 3
10668: PPUSH
10669: LD_INT 1
10671: PPUSH
10672: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10676: LD_INT 34
10678: PPUSH
10679: LD_VAR 0 3
10683: PPUSH
10684: LD_INT 1
10686: PPUSH
10687: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10691: LD_INT 42
10693: PPUSH
10694: LD_VAR 0 3
10698: PPUSH
10699: LD_INT 1
10701: PPUSH
10702: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10706: LD_INT 44
10708: PPUSH
10709: LD_VAR 0 3
10713: PPUSH
10714: LD_INT 1
10716: PPUSH
10717: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10721: LD_INT 41
10723: PPUSH
10724: LD_VAR 0 3
10728: PPUSH
10729: LD_INT 1
10731: PPUSH
10732: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10736: LD_INT 43
10738: PPUSH
10739: LD_VAR 0 3
10743: PPUSH
10744: LD_INT 1
10746: PPUSH
10747: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10751: LD_INT 70
10753: PPUSH
10754: LD_VAR 0 3
10758: PPUSH
10759: LD_INT 1
10761: PPUSH
10762: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10766: LD_INT 51
10768: PPUSH
10769: LD_VAR 0 3
10773: PPUSH
10774: LD_INT 1
10776: PPUSH
10777: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10781: LD_INT 52
10783: PPUSH
10784: LD_VAR 0 3
10788: PPUSH
10789: LD_INT 1
10791: PPUSH
10792: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10796: LD_INT 6
10798: PPUSH
10799: LD_VAR 0 3
10803: PPUSH
10804: LD_INT 1
10806: PPUSH
10807: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10811: LD_INT 15
10813: PPUSH
10814: LD_VAR 0 3
10818: PPUSH
10819: LD_INT 1
10821: PPUSH
10822: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10826: LD_INT 7
10828: PPUSH
10829: LD_VAR 0 3
10833: PPUSH
10834: LD_INT 1
10836: PPUSH
10837: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10841: LD_INT 12
10843: PPUSH
10844: LD_VAR 0 3
10848: PPUSH
10849: LD_INT 1
10851: PPUSH
10852: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10856: LD_INT 18
10858: PPUSH
10859: LD_VAR 0 3
10863: PPUSH
10864: LD_INT 1
10866: PPUSH
10867: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10871: LD_INT 60
10873: PPUSH
10874: LD_VAR 0 3
10878: PPUSH
10879: LD_INT 1
10881: PPUSH
10882: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10886: LD_INT 9
10888: PPUSH
10889: LD_VAR 0 3
10893: PPUSH
10894: LD_INT 1
10896: PPUSH
10897: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10901: LD_INT 30
10903: PPUSH
10904: LD_VAR 0 3
10908: PPUSH
10909: LD_INT 1
10911: PPUSH
10912: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10916: LD_INT 37
10918: PPUSH
10919: LD_VAR 0 3
10923: PPUSH
10924: LD_INT 1
10926: PPUSH
10927: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10931: LD_INT 5
10933: PPUSH
10934: LD_VAR 0 3
10938: PPUSH
10939: LD_INT 1
10941: PPUSH
10942: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10946: LD_INT 66
10948: PPUSH
10949: LD_VAR 0 3
10953: PPUSH
10954: LD_INT 1
10956: PPUSH
10957: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10961: LD_INT 21
10963: PPUSH
10964: LD_VAR 0 3
10968: PPUSH
10969: LD_INT 1
10971: PPUSH
10972: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10976: LD_INT 22
10978: PPUSH
10979: LD_VAR 0 3
10983: PPUSH
10984: LD_INT 1
10986: PPUSH
10987: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10991: LD_INT 54
10993: PPUSH
10994: LD_VAR 0 3
10998: PPUSH
10999: LD_INT 1
11001: PPUSH
11002: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11006: LD_INT 0
11008: PPUSH
11009: LD_VAR 0 3
11013: PPUSH
11014: LD_INT 1
11016: PPUSH
11017: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11021: LD_INT 1
11023: PPUSH
11024: LD_VAR 0 3
11028: PPUSH
11029: LD_INT 1
11031: PPUSH
11032: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11036: LD_INT 2
11038: PPUSH
11039: LD_VAR 0 3
11043: PPUSH
11044: LD_INT 1
11046: PPUSH
11047: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11051: LD_INT 3
11053: PPUSH
11054: LD_VAR 0 3
11058: PPUSH
11059: LD_INT 1
11061: PPUSH
11062: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11066: LD_INT 4
11068: PPUSH
11069: LD_VAR 0 3
11073: PPUSH
11074: LD_INT 1
11076: PPUSH
11077: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11081: LD_INT 5
11083: PPUSH
11084: LD_VAR 0 3
11088: PPUSH
11089: LD_INT 1
11091: PPUSH
11092: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11096: LD_INT 6
11098: PPUSH
11099: LD_VAR 0 3
11103: PPUSH
11104: LD_INT 1
11106: PPUSH
11107: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11111: LD_INT 7
11113: PPUSH
11114: LD_VAR 0 3
11118: PPUSH
11119: LD_INT 1
11121: PPUSH
11122: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11126: LD_INT 8
11128: PPUSH
11129: LD_VAR 0 3
11133: PPUSH
11134: LD_INT 1
11136: PPUSH
11137: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11141: LD_INT 10
11143: PPUSH
11144: LD_VAR 0 3
11148: PPUSH
11149: LD_INT 1
11151: PPUSH
11152: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11156: LD_INT 11
11158: PPUSH
11159: LD_VAR 0 3
11163: PPUSH
11164: LD_INT 1
11166: PPUSH
11167: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11171: LD_INT 12
11173: PPUSH
11174: LD_VAR 0 3
11178: PPUSH
11179: LD_INT 1
11181: PPUSH
11182: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11186: LD_INT 13
11188: PPUSH
11189: LD_VAR 0 3
11193: PPUSH
11194: LD_INT 1
11196: PPUSH
11197: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11201: LD_INT 14
11203: PPUSH
11204: LD_VAR 0 3
11208: PPUSH
11209: LD_INT 1
11211: PPUSH
11212: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11216: LD_INT 15
11218: PPUSH
11219: LD_VAR 0 3
11223: PPUSH
11224: LD_INT 1
11226: PPUSH
11227: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11231: LD_INT 16
11233: PPUSH
11234: LD_VAR 0 3
11238: PPUSH
11239: LD_INT 1
11241: PPUSH
11242: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11246: LD_INT 17
11248: PPUSH
11249: LD_VAR 0 3
11253: PPUSH
11254: LD_INT 1
11256: PPUSH
11257: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11261: LD_INT 19
11263: PPUSH
11264: LD_VAR 0 3
11268: PPUSH
11269: LD_INT 1
11271: PPUSH
11272: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11276: LD_INT 20
11278: PPUSH
11279: LD_VAR 0 3
11283: PPUSH
11284: LD_INT 1
11286: PPUSH
11287: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11291: LD_INT 21
11293: PPUSH
11294: LD_VAR 0 3
11298: PPUSH
11299: LD_INT 1
11301: PPUSH
11302: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11306: LD_INT 23
11308: PPUSH
11309: LD_VAR 0 3
11313: PPUSH
11314: LD_INT 1
11316: PPUSH
11317: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11321: LD_INT 26
11323: PPUSH
11324: LD_VAR 0 3
11328: PPUSH
11329: LD_INT 1
11331: PPUSH
11332: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11336: LD_INT 27
11338: PPUSH
11339: LD_VAR 0 3
11343: PPUSH
11344: LD_INT 1
11346: PPUSH
11347: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11351: LD_INT 28
11353: PPUSH
11354: LD_VAR 0 3
11358: PPUSH
11359: LD_INT 1
11361: PPUSH
11362: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11366: LD_INT 29
11368: PPUSH
11369: LD_VAR 0 3
11373: PPUSH
11374: LD_INT 1
11376: PPUSH
11377: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11381: LD_INT 30
11383: PPUSH
11384: LD_VAR 0 3
11388: PPUSH
11389: LD_INT 1
11391: PPUSH
11392: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11396: LD_INT 31
11398: PPUSH
11399: LD_VAR 0 3
11403: PPUSH
11404: LD_INT 1
11406: PPUSH
11407: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11411: LD_INT 32
11413: PPUSH
11414: LD_VAR 0 3
11418: PPUSH
11419: LD_INT 1
11421: PPUSH
11422: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11426: LD_INT 36
11428: PPUSH
11429: LD_VAR 0 3
11433: PPUSH
11434: LD_INT 1
11436: PPUSH
11437: CALL_OW 324
// end ; 5 :
11441: GO 13572
11443: LD_INT 5
11445: DOUBLE
11446: EQUAL
11447: IFTRUE 11451
11449: GO 12564
11451: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11452: LD_INT 35
11454: PPUSH
11455: LD_VAR 0 3
11459: PPUSH
11460: LD_INT 1
11462: PPUSH
11463: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11467: LD_INT 45
11469: PPUSH
11470: LD_VAR 0 3
11474: PPUSH
11475: LD_INT 1
11477: PPUSH
11478: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11482: LD_INT 46
11484: PPUSH
11485: LD_VAR 0 3
11489: PPUSH
11490: LD_INT 1
11492: PPUSH
11493: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11497: LD_INT 47
11499: PPUSH
11500: LD_VAR 0 3
11504: PPUSH
11505: LD_INT 1
11507: PPUSH
11508: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11512: LD_INT 1
11514: PPUSH
11515: LD_VAR 0 3
11519: PPUSH
11520: LD_INT 1
11522: PPUSH
11523: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11527: LD_INT 2
11529: PPUSH
11530: LD_VAR 0 3
11534: PPUSH
11535: LD_INT 1
11537: PPUSH
11538: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11542: LD_INT 11
11544: PPUSH
11545: LD_VAR 0 3
11549: PPUSH
11550: LD_INT 1
11552: PPUSH
11553: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11557: LD_INT 20
11559: PPUSH
11560: LD_VAR 0 3
11564: PPUSH
11565: LD_INT 1
11567: PPUSH
11568: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11572: LD_INT 48
11574: PPUSH
11575: LD_VAR 0 3
11579: PPUSH
11580: LD_INT 1
11582: PPUSH
11583: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11587: LD_INT 49
11589: PPUSH
11590: LD_VAR 0 3
11594: PPUSH
11595: LD_INT 1
11597: PPUSH
11598: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11602: LD_INT 69
11604: PPUSH
11605: LD_VAR 0 3
11609: PPUSH
11610: LD_INT 1
11612: PPUSH
11613: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11617: LD_INT 39
11619: PPUSH
11620: LD_VAR 0 3
11624: PPUSH
11625: LD_INT 1
11627: PPUSH
11628: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11632: LD_INT 34
11634: PPUSH
11635: LD_VAR 0 3
11639: PPUSH
11640: LD_INT 1
11642: PPUSH
11643: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11647: LD_INT 42
11649: PPUSH
11650: LD_VAR 0 3
11654: PPUSH
11655: LD_INT 1
11657: PPUSH
11658: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11662: LD_INT 44
11664: PPUSH
11665: LD_VAR 0 3
11669: PPUSH
11670: LD_INT 1
11672: PPUSH
11673: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11677: LD_INT 41
11679: PPUSH
11680: LD_VAR 0 3
11684: PPUSH
11685: LD_INT 1
11687: PPUSH
11688: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11692: LD_INT 40
11694: PPUSH
11695: LD_VAR 0 3
11699: PPUSH
11700: LD_INT 1
11702: PPUSH
11703: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11707: LD_INT 43
11709: PPUSH
11710: LD_VAR 0 3
11714: PPUSH
11715: LD_INT 1
11717: PPUSH
11718: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11722: LD_INT 70
11724: PPUSH
11725: LD_VAR 0 3
11729: PPUSH
11730: LD_INT 1
11732: PPUSH
11733: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11737: LD_INT 51
11739: PPUSH
11740: LD_VAR 0 3
11744: PPUSH
11745: LD_INT 1
11747: PPUSH
11748: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11752: LD_INT 52
11754: PPUSH
11755: LD_VAR 0 3
11759: PPUSH
11760: LD_INT 1
11762: PPUSH
11763: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11767: LD_INT 6
11769: PPUSH
11770: LD_VAR 0 3
11774: PPUSH
11775: LD_INT 1
11777: PPUSH
11778: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11782: LD_INT 15
11784: PPUSH
11785: LD_VAR 0 3
11789: PPUSH
11790: LD_INT 1
11792: PPUSH
11793: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11797: LD_INT 7
11799: PPUSH
11800: LD_VAR 0 3
11804: PPUSH
11805: LD_INT 1
11807: PPUSH
11808: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11812: LD_INT 12
11814: PPUSH
11815: LD_VAR 0 3
11819: PPUSH
11820: LD_INT 1
11822: PPUSH
11823: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11827: LD_INT 17
11829: PPUSH
11830: LD_VAR 0 3
11834: PPUSH
11835: LD_INT 1
11837: PPUSH
11838: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11842: LD_INT 18
11844: PPUSH
11845: LD_VAR 0 3
11849: PPUSH
11850: LD_INT 1
11852: PPUSH
11853: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11857: LD_INT 60
11859: PPUSH
11860: LD_VAR 0 3
11864: PPUSH
11865: LD_INT 1
11867: PPUSH
11868: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11872: LD_INT 32
11874: PPUSH
11875: LD_VAR 0 3
11879: PPUSH
11880: LD_INT 1
11882: PPUSH
11883: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11887: LD_INT 9
11889: PPUSH
11890: LD_VAR 0 3
11894: PPUSH
11895: LD_INT 1
11897: PPUSH
11898: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11902: LD_INT 57
11904: PPUSH
11905: LD_VAR 0 3
11909: PPUSH
11910: LD_INT 1
11912: PPUSH
11913: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11917: LD_INT 30
11919: PPUSH
11920: LD_VAR 0 3
11924: PPUSH
11925: LD_INT 1
11927: PPUSH
11928: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11932: LD_INT 37
11934: PPUSH
11935: LD_VAR 0 3
11939: PPUSH
11940: LD_INT 1
11942: PPUSH
11943: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11947: LD_INT 63
11949: PPUSH
11950: LD_VAR 0 3
11954: PPUSH
11955: LD_INT 1
11957: PPUSH
11958: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11962: LD_INT 3
11964: PPUSH
11965: LD_VAR 0 3
11969: PPUSH
11970: LD_INT 1
11972: PPUSH
11973: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11977: LD_INT 4
11979: PPUSH
11980: LD_VAR 0 3
11984: PPUSH
11985: LD_INT 1
11987: PPUSH
11988: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11992: LD_INT 5
11994: PPUSH
11995: LD_VAR 0 3
11999: PPUSH
12000: LD_INT 1
12002: PPUSH
12003: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12007: LD_INT 66
12009: PPUSH
12010: LD_VAR 0 3
12014: PPUSH
12015: LD_INT 1
12017: PPUSH
12018: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12022: LD_INT 21
12024: PPUSH
12025: LD_VAR 0 3
12029: PPUSH
12030: LD_INT 1
12032: PPUSH
12033: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12037: LD_INT 22
12039: PPUSH
12040: LD_VAR 0 3
12044: PPUSH
12045: LD_INT 1
12047: PPUSH
12048: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12052: LD_INT 19
12054: PPUSH
12055: LD_VAR 0 3
12059: PPUSH
12060: LD_INT 1
12062: PPUSH
12063: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12067: LD_INT 54
12069: PPUSH
12070: LD_VAR 0 3
12074: PPUSH
12075: LD_INT 1
12077: PPUSH
12078: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12082: LD_INT 55
12084: PPUSH
12085: LD_VAR 0 3
12089: PPUSH
12090: LD_INT 1
12092: PPUSH
12093: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12097: LD_INT 0
12099: PPUSH
12100: LD_VAR 0 3
12104: PPUSH
12105: LD_INT 1
12107: PPUSH
12108: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12112: LD_INT 1
12114: PPUSH
12115: LD_VAR 0 3
12119: PPUSH
12120: LD_INT 1
12122: PPUSH
12123: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12127: LD_INT 2
12129: PPUSH
12130: LD_VAR 0 3
12134: PPUSH
12135: LD_INT 1
12137: PPUSH
12138: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12142: LD_INT 3
12144: PPUSH
12145: LD_VAR 0 3
12149: PPUSH
12150: LD_INT 1
12152: PPUSH
12153: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12157: LD_INT 4
12159: PPUSH
12160: LD_VAR 0 3
12164: PPUSH
12165: LD_INT 1
12167: PPUSH
12168: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12172: LD_INT 5
12174: PPUSH
12175: LD_VAR 0 3
12179: PPUSH
12180: LD_INT 1
12182: PPUSH
12183: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12187: LD_INT 6
12189: PPUSH
12190: LD_VAR 0 3
12194: PPUSH
12195: LD_INT 1
12197: PPUSH
12198: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12202: LD_INT 7
12204: PPUSH
12205: LD_VAR 0 3
12209: PPUSH
12210: LD_INT 1
12212: PPUSH
12213: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12217: LD_INT 8
12219: PPUSH
12220: LD_VAR 0 3
12224: PPUSH
12225: LD_INT 1
12227: PPUSH
12228: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12232: LD_INT 10
12234: PPUSH
12235: LD_VAR 0 3
12239: PPUSH
12240: LD_INT 1
12242: PPUSH
12243: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12247: LD_INT 11
12249: PPUSH
12250: LD_VAR 0 3
12254: PPUSH
12255: LD_INT 1
12257: PPUSH
12258: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12262: LD_INT 12
12264: PPUSH
12265: LD_VAR 0 3
12269: PPUSH
12270: LD_INT 1
12272: PPUSH
12273: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12277: LD_INT 13
12279: PPUSH
12280: LD_VAR 0 3
12284: PPUSH
12285: LD_INT 1
12287: PPUSH
12288: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12292: LD_INT 14
12294: PPUSH
12295: LD_VAR 0 3
12299: PPUSH
12300: LD_INT 1
12302: PPUSH
12303: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12307: LD_INT 15
12309: PPUSH
12310: LD_VAR 0 3
12314: PPUSH
12315: LD_INT 1
12317: PPUSH
12318: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12322: LD_INT 16
12324: PPUSH
12325: LD_VAR 0 3
12329: PPUSH
12330: LD_INT 1
12332: PPUSH
12333: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12337: LD_INT 17
12339: PPUSH
12340: LD_VAR 0 3
12344: PPUSH
12345: LD_INT 1
12347: PPUSH
12348: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
12352: LD_INT 18
12354: PPUSH
12355: LD_VAR 0 3
12359: PPUSH
12360: LD_INT 1
12362: PPUSH
12363: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12367: LD_INT 19
12369: PPUSH
12370: LD_VAR 0 3
12374: PPUSH
12375: LD_INT 1
12377: PPUSH
12378: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12382: LD_INT 20
12384: PPUSH
12385: LD_VAR 0 3
12389: PPUSH
12390: LD_INT 1
12392: PPUSH
12393: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12397: LD_INT 21
12399: PPUSH
12400: LD_VAR 0 3
12404: PPUSH
12405: LD_INT 1
12407: PPUSH
12408: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12412: LD_INT 23
12414: PPUSH
12415: LD_VAR 0 3
12419: PPUSH
12420: LD_INT 1
12422: PPUSH
12423: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12427: LD_INT 26
12429: PPUSH
12430: LD_VAR 0 3
12434: PPUSH
12435: LD_INT 1
12437: PPUSH
12438: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12442: LD_INT 27
12444: PPUSH
12445: LD_VAR 0 3
12449: PPUSH
12450: LD_INT 1
12452: PPUSH
12453: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12457: LD_INT 28
12459: PPUSH
12460: LD_VAR 0 3
12464: PPUSH
12465: LD_INT 1
12467: PPUSH
12468: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12472: LD_INT 29
12474: PPUSH
12475: LD_VAR 0 3
12479: PPUSH
12480: LD_INT 1
12482: PPUSH
12483: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12487: LD_INT 30
12489: PPUSH
12490: LD_VAR 0 3
12494: PPUSH
12495: LD_INT 1
12497: PPUSH
12498: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12502: LD_INT 31
12504: PPUSH
12505: LD_VAR 0 3
12509: PPUSH
12510: LD_INT 1
12512: PPUSH
12513: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12517: LD_INT 32
12519: PPUSH
12520: LD_VAR 0 3
12524: PPUSH
12525: LD_INT 1
12527: PPUSH
12528: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
12532: LD_INT 33
12534: PPUSH
12535: LD_VAR 0 3
12539: PPUSH
12540: LD_INT 1
12542: PPUSH
12543: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12547: LD_INT 36
12549: PPUSH
12550: LD_VAR 0 3
12554: PPUSH
12555: LD_INT 1
12557: PPUSH
12558: CALL_OW 324
// end ; 6 :
12562: GO 13572
12564: LD_INT 6
12566: DOUBLE
12567: EQUAL
12568: IFTRUE 12572
12570: GO 13497
12572: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12573: LD_INT 35
12575: PPUSH
12576: LD_VAR 0 3
12580: PPUSH
12581: LD_INT 1
12583: PPUSH
12584: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12588: LD_INT 45
12590: PPUSH
12591: LD_VAR 0 3
12595: PPUSH
12596: LD_INT 1
12598: PPUSH
12599: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12603: LD_INT 46
12605: PPUSH
12606: LD_VAR 0 3
12610: PPUSH
12611: LD_INT 1
12613: PPUSH
12614: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12618: LD_INT 47
12620: PPUSH
12621: LD_VAR 0 3
12625: PPUSH
12626: LD_INT 1
12628: PPUSH
12629: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12633: LD_INT 1
12635: PPUSH
12636: LD_VAR 0 3
12640: PPUSH
12641: LD_INT 1
12643: PPUSH
12644: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12648: LD_INT 2
12650: PPUSH
12651: LD_VAR 0 3
12655: PPUSH
12656: LD_INT 1
12658: PPUSH
12659: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12663: LD_INT 11
12665: PPUSH
12666: LD_VAR 0 3
12670: PPUSH
12671: LD_INT 1
12673: PPUSH
12674: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12678: LD_INT 20
12680: PPUSH
12681: LD_VAR 0 3
12685: PPUSH
12686: LD_INT 1
12688: PPUSH
12689: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12693: LD_INT 48
12695: PPUSH
12696: LD_VAR 0 3
12700: PPUSH
12701: LD_INT 1
12703: PPUSH
12704: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12708: LD_INT 49
12710: PPUSH
12711: LD_VAR 0 3
12715: PPUSH
12716: LD_INT 1
12718: PPUSH
12719: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12723: LD_INT 50
12725: PPUSH
12726: LD_VAR 0 3
12730: PPUSH
12731: LD_INT 1
12733: PPUSH
12734: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12738: LD_INT 69
12740: PPUSH
12741: LD_VAR 0 3
12745: PPUSH
12746: LD_INT 1
12748: PPUSH
12749: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12753: LD_INT 39
12755: PPUSH
12756: LD_VAR 0 3
12760: PPUSH
12761: LD_INT 1
12763: PPUSH
12764: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12768: LD_INT 34
12770: PPUSH
12771: LD_VAR 0 3
12775: PPUSH
12776: LD_INT 1
12778: PPUSH
12779: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12783: LD_INT 42
12785: PPUSH
12786: LD_VAR 0 3
12790: PPUSH
12791: LD_INT 1
12793: PPUSH
12794: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12798: LD_INT 44
12800: PPUSH
12801: LD_VAR 0 3
12805: PPUSH
12806: LD_INT 1
12808: PPUSH
12809: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12813: LD_INT 41
12815: PPUSH
12816: LD_VAR 0 3
12820: PPUSH
12821: LD_INT 1
12823: PPUSH
12824: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
12828: LD_INT 13
12830: PPUSH
12831: LD_VAR 0 3
12835: PPUSH
12836: LD_INT 1
12838: PPUSH
12839: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12843: LD_INT 40
12845: PPUSH
12846: LD_VAR 0 3
12850: PPUSH
12851: LD_INT 1
12853: PPUSH
12854: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12858: LD_INT 43
12860: PPUSH
12861: LD_VAR 0 3
12865: PPUSH
12866: LD_INT 1
12868: PPUSH
12869: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12873: LD_INT 70
12875: PPUSH
12876: LD_VAR 0 3
12880: PPUSH
12881: LD_INT 1
12883: PPUSH
12884: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
12888: LD_INT 23
12890: PPUSH
12891: LD_VAR 0 3
12895: PPUSH
12896: LD_INT 1
12898: PPUSH
12899: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12903: LD_INT 51
12905: PPUSH
12906: LD_VAR 0 3
12910: PPUSH
12911: LD_INT 1
12913: PPUSH
12914: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12918: LD_INT 52
12920: PPUSH
12921: LD_VAR 0 3
12925: PPUSH
12926: LD_INT 1
12928: PPUSH
12929: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12933: LD_INT 6
12935: PPUSH
12936: LD_VAR 0 3
12940: PPUSH
12941: LD_INT 1
12943: PPUSH
12944: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12948: LD_INT 15
12950: PPUSH
12951: LD_VAR 0 3
12955: PPUSH
12956: LD_INT 1
12958: PPUSH
12959: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12963: LD_INT 7
12965: PPUSH
12966: LD_VAR 0 3
12970: PPUSH
12971: LD_INT 1
12973: PPUSH
12974: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12978: LD_INT 12
12980: PPUSH
12981: LD_VAR 0 3
12985: PPUSH
12986: LD_INT 1
12988: PPUSH
12989: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
12993: LD_INT 10
12995: PPUSH
12996: LD_VAR 0 3
13000: PPUSH
13001: LD_INT 1
13003: PPUSH
13004: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
13008: LD_INT 17
13010: PPUSH
13011: LD_VAR 0 3
13015: PPUSH
13016: LD_INT 1
13018: PPUSH
13019: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13023: LD_INT 18
13025: PPUSH
13026: LD_VAR 0 3
13030: PPUSH
13031: LD_INT 1
13033: PPUSH
13034: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13038: LD_INT 60
13040: PPUSH
13041: LD_VAR 0 3
13045: PPUSH
13046: LD_INT 1
13048: PPUSH
13049: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
13053: LD_INT 61
13055: PPUSH
13056: LD_VAR 0 3
13060: PPUSH
13061: LD_INT 1
13063: PPUSH
13064: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13068: LD_INT 32
13070: PPUSH
13071: LD_VAR 0 3
13075: PPUSH
13076: LD_INT 1
13078: PPUSH
13079: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
13083: LD_INT 27
13085: PPUSH
13086: LD_VAR 0 3
13090: PPUSH
13091: LD_INT 1
13093: PPUSH
13094: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
13098: LD_INT 36
13100: PPUSH
13101: LD_VAR 0 3
13105: PPUSH
13106: LD_INT 1
13108: PPUSH
13109: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
13113: LD_INT 33
13115: PPUSH
13116: LD_VAR 0 3
13120: PPUSH
13121: LD_INT 1
13123: PPUSH
13124: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13128: LD_INT 9
13130: PPUSH
13131: LD_VAR 0 3
13135: PPUSH
13136: LD_INT 1
13138: PPUSH
13139: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13143: LD_INT 38
13145: PPUSH
13146: LD_VAR 0 3
13150: PPUSH
13151: LD_INT 1
13153: PPUSH
13154: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13158: LD_INT 57
13160: PPUSH
13161: LD_VAR 0 3
13165: PPUSH
13166: LD_INT 1
13168: PPUSH
13169: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13173: LD_INT 58
13175: PPUSH
13176: LD_VAR 0 3
13180: PPUSH
13181: LD_INT 1
13183: PPUSH
13184: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13188: LD_INT 28
13190: PPUSH
13191: LD_VAR 0 3
13195: PPUSH
13196: LD_INT 1
13198: PPUSH
13199: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13203: LD_INT 29
13205: PPUSH
13206: LD_VAR 0 3
13210: PPUSH
13211: LD_INT 1
13213: PPUSH
13214: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13218: LD_INT 30
13220: PPUSH
13221: LD_VAR 0 3
13225: PPUSH
13226: LD_INT 1
13228: PPUSH
13229: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13233: LD_INT 37
13235: PPUSH
13236: LD_VAR 0 3
13240: PPUSH
13241: LD_INT 1
13243: PPUSH
13244: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13248: LD_INT 63
13250: PPUSH
13251: LD_VAR 0 3
13255: PPUSH
13256: LD_INT 1
13258: PPUSH
13259: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13263: LD_INT 64
13265: PPUSH
13266: LD_VAR 0 3
13270: PPUSH
13271: LD_INT 1
13273: PPUSH
13274: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13278: LD_INT 3
13280: PPUSH
13281: LD_VAR 0 3
13285: PPUSH
13286: LD_INT 1
13288: PPUSH
13289: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13293: LD_INT 4
13295: PPUSH
13296: LD_VAR 0 3
13300: PPUSH
13301: LD_INT 1
13303: PPUSH
13304: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13308: LD_INT 5
13310: PPUSH
13311: LD_VAR 0 3
13315: PPUSH
13316: LD_INT 1
13318: PPUSH
13319: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13323: LD_INT 8
13325: PPUSH
13326: LD_VAR 0 3
13330: PPUSH
13331: LD_INT 1
13333: PPUSH
13334: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13338: LD_INT 66
13340: PPUSH
13341: LD_VAR 0 3
13345: PPUSH
13346: LD_INT 1
13348: PPUSH
13349: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
13353: LD_INT 67
13355: PPUSH
13356: LD_VAR 0 3
13360: PPUSH
13361: LD_INT 1
13363: PPUSH
13364: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13368: LD_INT 21
13370: PPUSH
13371: LD_VAR 0 3
13375: PPUSH
13376: LD_INT 1
13378: PPUSH
13379: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13383: LD_INT 22
13385: PPUSH
13386: LD_VAR 0 3
13390: PPUSH
13391: LD_INT 1
13393: PPUSH
13394: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13398: LD_INT 19
13400: PPUSH
13401: LD_VAR 0 3
13405: PPUSH
13406: LD_INT 1
13408: PPUSH
13409: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13413: LD_INT 26
13415: PPUSH
13416: LD_VAR 0 3
13420: PPUSH
13421: LD_INT 1
13423: PPUSH
13424: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13428: LD_INT 54
13430: PPUSH
13431: LD_VAR 0 3
13435: PPUSH
13436: LD_INT 1
13438: PPUSH
13439: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13443: LD_INT 55
13445: PPUSH
13446: LD_VAR 0 3
13450: PPUSH
13451: LD_INT 1
13453: PPUSH
13454: CALL_OW 322
// for i = 0 to 39 do
13458: LD_ADDR_VAR 0 4
13462: PUSH
13463: DOUBLE
13464: LD_INT 0
13466: DEC
13467: ST_TO_ADDR
13468: LD_INT 39
13470: PUSH
13471: FOR_TO
13472: IFFALSE 13493
// SetRestrict ( i , side , true ) ;
13474: LD_VAR 0 4
13478: PPUSH
13479: LD_VAR 0 3
13483: PPUSH
13484: LD_INT 1
13486: PPUSH
13487: CALL_OW 324
13491: GO 13471
13493: POP
13494: POP
// end ; else
13495: GO 13572
13497: POP
// begin for i = 1 to 73 do
13498: LD_ADDR_VAR 0 4
13502: PUSH
13503: DOUBLE
13504: LD_INT 1
13506: DEC
13507: ST_TO_ADDR
13508: LD_INT 73
13510: PUSH
13511: FOR_TO
13512: IFFALSE 13533
// SetTech ( i , side , state_enabled ) ;
13514: LD_VAR 0 4
13518: PPUSH
13519: LD_VAR 0 3
13523: PPUSH
13524: LD_INT 1
13526: PPUSH
13527: CALL_OW 322
13531: GO 13511
13533: POP
13534: POP
// for i = 0 to 39 do
13535: LD_ADDR_VAR 0 4
13539: PUSH
13540: DOUBLE
13541: LD_INT 0
13543: DEC
13544: ST_TO_ADDR
13545: LD_INT 39
13547: PUSH
13548: FOR_TO
13549: IFFALSE 13570
// SetRestrict ( i , side , true ) ;
13551: LD_VAR 0 4
13555: PPUSH
13556: LD_VAR 0 3
13560: PPUSH
13561: LD_INT 1
13563: PPUSH
13564: CALL_OW 324
13568: GO 13548
13570: POP
13571: POP
// end ; end ; end ;
13572: GO 9577
13574: POP
13575: POP
// end ;
13576: LD_VAR 0 2
13580: RET
