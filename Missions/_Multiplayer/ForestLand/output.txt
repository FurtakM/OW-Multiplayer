// export Game_Type ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_amount_of_apemen , def_people_respawning , def_siberite_bomb , def_builduptime ; export is_depot , number_of_breastworks , number_of_people , skill_level , amount_of_apemen , starting_crates , starting_resources , shipments_density , siberite_bomb_Delay , spawning_koef_of_apemen , respawning_time_min , respawning_time_max , def_win_rules ; export Side_Count , Team_Count , Player_Side , Player_Team , Side_Teams , Teams ; export Side_Positions , Side_Nations , Side_Names , Team_Names , Team_Game , Side_Comps ; export depot_def , start_def , extra_oil_deposits_locations ; export heroes ; export commander , battle_flags_id , morale_decreasing_time ; var global_units , global_defined , soldiers_created ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function create_forest ; var area ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
// PlaceTreesToArea ( BigForest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , Rand ( 500 , 570 ) , 50 , 2 ) ;
  72: LD_INT 6
  74: PPUSH
  75: LD_INT 21
  77: PUSH
  78: LD_INT 22
  80: PUSH
  81: LD_INT 24
  83: PUSH
  84: LD_INT 21
  86: PUSH
  87: LD_INT 22
  89: PUSH
  90: LD_INT 24
  92: PUSH
  93: LD_INT 38
  95: PUSH
  96: LD_INT 39
  98: PUSH
  99: EMPTY
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: PPUSH
 109: LD_INT 500
 111: PPUSH
 112: LD_INT 570
 114: PPUSH
 115: CALL_OW 12
 119: PPUSH
 120: LD_INT 50
 122: PPUSH
 123: LD_INT 2
 125: PPUSH
 126: CALL_OW 352
// if def_base_level then
 130: LD_EXP 2
 134: IFFALSE 146
// area := bush_forest_small else
 136: LD_ADDR_VAR 0 2
 140: PUSH
 141: LD_INT 9
 143: ST_TO_ADDR
 144: GO 154
// area := bush_forest_big ;
 146: LD_ADDR_VAR 0 2
 150: PUSH
 151: LD_INT 8
 153: ST_TO_ADDR
// PlaceTreesToArea ( area , [ 38 , 39 , 37 ] , Rand ( 300 , 350 ) , 10 , 3 ) ;
 154: LD_VAR 0 2
 158: PPUSH
 159: LD_INT 38
 161: PUSH
 162: LD_INT 39
 164: PUSH
 165: LD_INT 37
 167: PUSH
 168: EMPTY
 169: LIST
 170: LIST
 171: LIST
 172: PPUSH
 173: LD_INT 300
 175: PPUSH
 176: LD_INT 350
 178: PPUSH
 179: CALL_OW 12
 183: PPUSH
 184: LD_INT 10
 186: PPUSH
 187: LD_INT 3
 189: PPUSH
 190: CALL_OW 352
// PlaceTreesToArea ( BigForest , [ 38 , 39 , 37 ] , 80 , 10 , 3 ) ;
 194: LD_INT 6
 196: PPUSH
 197: LD_INT 38
 199: PUSH
 200: LD_INT 39
 202: PUSH
 203: LD_INT 37
 205: PUSH
 206: EMPTY
 207: LIST
 208: LIST
 209: LIST
 210: PPUSH
 211: LD_INT 80
 213: PPUSH
 214: LD_INT 10
 216: PPUSH
 217: LD_INT 3
 219: PPUSH
 220: CALL_OW 352
// end ;
 224: LD_VAR 0 1
 228: RET
// function create_map_resources ; var un , oil_pos , sib_pos ; begin
 229: LD_INT 0
 231: PPUSH
 232: PPUSH
 233: PPUSH
 234: PPUSH
// oil_pos := [ [ 24 , 10 ] , [ 82 , 9 ] , [ 79 , 115 ] , [ 135 , 112 ] ] ;
 235: LD_ADDR_VAR 0 3
 239: PUSH
 240: LD_INT 24
 242: PUSH
 243: LD_INT 10
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: PUSH
 250: LD_INT 82
 252: PUSH
 253: LD_INT 9
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 79
 262: PUSH
 263: LD_INT 115
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 135
 272: PUSH
 273: LD_INT 112
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: PUSH
 280: EMPTY
 281: LIST
 282: LIST
 283: LIST
 284: LIST
 285: ST_TO_ADDR
// sib_pos := [ [ 24 , 29 ] , [ 102 , 29 ] , [ 60 , 93 ] , [ 134 , 91 ] ] ;
 286: LD_ADDR_VAR 0 4
 290: PUSH
 291: LD_INT 24
 293: PUSH
 294: LD_INT 29
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: PUSH
 301: LD_INT 102
 303: PUSH
 304: LD_INT 29
 306: PUSH
 307: EMPTY
 308: LIST
 309: LIST
 310: PUSH
 311: LD_INT 60
 313: PUSH
 314: LD_INT 93
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 134
 323: PUSH
 324: LD_INT 91
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: LIST
 335: LIST
 336: ST_TO_ADDR
// for un = 1 to 4 do
 337: LD_ADDR_VAR 0 2
 341: PUSH
 342: DOUBLE
 343: LD_INT 1
 345: DEC
 346: ST_TO_ADDR
 347: LD_INT 4
 349: PUSH
 350: FOR_TO
 351: IFFALSE 429
// begin CreateDepositXY ( oil_pos [ un ] [ 1 ] , oil_pos [ un ] [ 2 ] , mat_oil ) ;
 353: LD_VAR 0 3
 357: PUSH
 358: LD_VAR 0 2
 362: ARRAY
 363: PUSH
 364: LD_INT 1
 366: ARRAY
 367: PPUSH
 368: LD_VAR 0 3
 372: PUSH
 373: LD_VAR 0 2
 377: ARRAY
 378: PUSH
 379: LD_INT 2
 381: ARRAY
 382: PPUSH
 383: LD_INT 2
 385: PPUSH
 386: CALL_OW 62
// CreateDepositXY ( sib_pos [ un ] [ 1 ] , sib_pos [ un ] [ 2 ] , mat_siberit ) ;
 390: LD_VAR 0 4
 394: PUSH
 395: LD_VAR 0 2
 399: ARRAY
 400: PUSH
 401: LD_INT 1
 403: ARRAY
 404: PPUSH
 405: LD_VAR 0 4
 409: PUSH
 410: LD_VAR 0 2
 414: ARRAY
 415: PUSH
 416: LD_INT 2
 418: ARRAY
 419: PPUSH
 420: LD_INT 3
 422: PPUSH
 423: CALL_OW 62
// end ;
 427: GO 350
 429: POP
 430: POP
// end ;
 431: LD_VAR 0 1
 435: RET
// function init_map ; var i ; begin
 436: LD_INT 0
 438: PPUSH
 439: PPUSH
// extra_oil_deposits_locations := [ [ 38 , 6 ] , [ 67 , 6 ] , [ 94 , 115 ] , [ 116 , 99 ] ] ;
 440: LD_ADDR_EXP 42
 444: PUSH
 445: LD_INT 38
 447: PUSH
 448: LD_INT 6
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 67
 457: PUSH
 458: LD_INT 6
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: LD_INT 94
 467: PUSH
 468: LD_INT 115
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: LD_INT 116
 477: PUSH
 478: LD_INT 99
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: ST_TO_ADDR
// create_forest ;
 491: CALL 68 0 0
// create_map_resources ;
 495: CALL 229 0 0
// depot_def := [ [ 12 , 10 , 2 ] , [ 97 , 10 , 3 ] , [ 64 , 108 , 0 ] , [ 146 , 110 , 5 ] ] ;
 499: LD_ADDR_EXP 40
 503: PUSH
 504: LD_INT 12
 506: PUSH
 507: LD_INT 10
 509: PUSH
 510: LD_INT 2
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: LIST
 517: PUSH
 518: LD_INT 97
 520: PUSH
 521: LD_INT 10
 523: PUSH
 524: LD_INT 3
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: LIST
 531: PUSH
 532: LD_INT 64
 534: PUSH
 535: LD_INT 108
 537: PUSH
 538: LD_INT 0
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: LIST
 545: PUSH
 546: LD_INT 146
 548: PUSH
 549: LD_INT 110
 551: PUSH
 552: LD_INT 5
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: LIST
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: LIST
 565: ST_TO_ADDR
// if def_base_level then
 566: LD_EXP 2
 570: IFFALSE 625
// start_def := [ [ 16 , 14 ] , [ 96 , 13 ] , [ 65 , 105 ] , [ 141 , 105 ] ] else
 572: LD_ADDR_EXP 41
 576: PUSH
 577: LD_INT 16
 579: PUSH
 580: LD_INT 14
 582: PUSH
 583: EMPTY
 584: LIST
 585: LIST
 586: PUSH
 587: LD_INT 96
 589: PUSH
 590: LD_INT 13
 592: PUSH
 593: EMPTY
 594: LIST
 595: LIST
 596: PUSH
 597: LD_INT 65
 599: PUSH
 600: LD_INT 105
 602: PUSH
 603: EMPTY
 604: LIST
 605: LIST
 606: PUSH
 607: LD_INT 141
 609: PUSH
 610: LD_INT 105
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: ST_TO_ADDR
 623: GO 676
// start_def := [ [ 7 , 5 ] , [ 98 , 6 ] , [ 63 , 113 ] , [ 151 , 113 ] ] ;
 625: LD_ADDR_EXP 41
 629: PUSH
 630: LD_INT 7
 632: PUSH
 633: LD_INT 5
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: PUSH
 640: LD_INT 98
 642: PUSH
 643: LD_INT 6
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: PUSH
 650: LD_INT 63
 652: PUSH
 653: LD_INT 113
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: PUSH
 660: LD_INT 151
 662: PUSH
 663: LD_INT 113
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: ST_TO_ADDR
// end ;
 676: LD_VAR 0 1
 680: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
 681: LD_INT 0
 683: PPUSH
 684: PPUSH
 685: PPUSH
 686: PPUSH
 687: PPUSH
 688: PPUSH
 689: PPUSH
 690: PPUSH
 691: PPUSH
// if MultiPlayer then
 692: LD_OWVAR 4
 696: IFFALSE 780
// begin Game_Type = mp_game_type ;
 698: LD_ADDR_EXP 1
 702: PUSH
 703: LD_OWVAR 6
 707: ST_TO_ADDR
// Player_Side = mp_player_side ;
 708: LD_ADDR_EXP 30
 712: PUSH
 713: LD_OWVAR 7
 717: ST_TO_ADDR
// Player_Team = mp_player_team ;
 718: LD_ADDR_EXP 31
 722: PUSH
 723: LD_OWVAR 8
 727: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
 728: LD_ADDR_EXP 34
 732: PUSH
 733: LD_OWVAR 17
 737: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 738: LD_ADDR_EXP 32
 742: PUSH
 743: LD_OWVAR 15
 747: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 748: LD_ADDR_EXP 35
 752: PUSH
 753: LD_OWVAR 16
 757: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 758: LD_ADDR_EXP 39
 762: PUSH
 763: CALL 0 0 0
 767: ST_TO_ADDR
// Teams = mp_teams ;
 768: LD_ADDR_EXP 33
 772: PUSH
 773: LD_OWVAR 12
 777: ST_TO_ADDR
// end else
 778: GO 981
// begin Game_Type = 2 ;
 780: LD_ADDR_EXP 1
 784: PUSH
 785: LD_INT 2
 787: ST_TO_ADDR
// Player_Side = 4 ;
 788: LD_ADDR_EXP 30
 792: PUSH
 793: LD_INT 4
 795: ST_TO_ADDR
// Side_Positions = [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 796: LD_ADDR_EXP 34
 800: PUSH
 801: LD_INT 0
 803: PUSH
 804: LD_INT 3
 806: PUSH
 807: LD_INT 0
 809: PUSH
 810: LD_INT 1
 812: PUSH
 813: LD_INT 0
 815: PUSH
 816: LD_INT 2
 818: PUSH
 819: LD_INT 4
 821: PUSH
 822: LD_INT 0
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: LIST
 834: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 2 , 0 , 1 , 2 , 0 ] ;
 835: LD_ADDR_EXP 32
 839: PUSH
 840: LD_INT 0
 842: PUSH
 843: LD_INT 1
 845: PUSH
 846: LD_INT 0
 848: PUSH
 849: LD_INT 2
 851: PUSH
 852: LD_INT 0
 854: PUSH
 855: LD_INT 1
 857: PUSH
 858: LD_INT 2
 860: PUSH
 861: LD_INT 0
 863: PUSH
 864: EMPTY
 865: LIST
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: LIST
 871: LIST
 872: LIST
 873: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 2 , 0 , 1 , 3 , 0 ] ;
 874: LD_ADDR_EXP 35
 878: PUSH
 879: LD_INT 0
 881: PUSH
 882: LD_INT 3
 884: PUSH
 885: LD_INT 0
 887: PUSH
 888: LD_INT 2
 890: PUSH
 891: LD_INT 0
 893: PUSH
 894: LD_INT 1
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: LD_INT 0
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 913: LD_ADDR_EXP 39
 917: PUSH
 918: LD_INT 0
 920: PUSH
 921: LD_INT 0
 923: PUSH
 924: LD_INT 0
 926: PUSH
 927: LD_INT 0
 929: PUSH
 930: LD_INT 0
 932: PUSH
 933: LD_INT 0
 935: PUSH
 936: LD_INT 0
 938: PUSH
 939: LD_INT 0
 941: PUSH
 942: EMPTY
 943: LIST
 944: LIST
 945: LIST
 946: LIST
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: ST_TO_ADDR
// Teams = [ [ 2 , 6 ] , [ 4 , 7 ] ] ;
 952: LD_ADDR_EXP 33
 956: PUSH
 957: LD_INT 2
 959: PUSH
 960: LD_INT 6
 962: PUSH
 963: EMPTY
 964: LIST
 965: LIST
 966: PUSH
 967: LD_INT 4
 969: PUSH
 970: LD_INT 7
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: ST_TO_ADDR
// end ; Side_Count = ( Side_Positions diff [ 0 ] ) + 0 ;
 981: LD_ADDR_EXP 28
 985: PUSH
 986: LD_EXP 34
 990: PUSH
 991: LD_INT 0
 993: PUSH
 994: EMPTY
 995: LIST
 996: DIFF
 997: PUSH
 998: LD_INT 0
1000: PLUS
1001: ST_TO_ADDR
// Team_Count = ( Side_Teams diff [ 0 ] ) + 0 ;
1002: LD_ADDR_EXP 29
1006: PUSH
1007: LD_EXP 32
1011: PUSH
1012: LD_INT 0
1014: PUSH
1015: EMPTY
1016: LIST
1017: DIFF
1018: PUSH
1019: LD_INT 0
1021: PLUS
1022: ST_TO_ADDR
// if MultiPlayer then
1023: LD_OWVAR 4
1027: IFFALSE 1221
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
1029: LD_ADDR_EXP 2
1033: PUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL_OW 426
1041: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
1042: LD_ADDR_EXP 3
1046: PUSH
1047: LD_INT 1
1049: PPUSH
1050: CALL_OW 426
1054: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
1055: LD_ADDR_EXP 4
1059: PUSH
1060: LD_INT 2
1062: PPUSH
1063: CALL_OW 426
1067: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
1068: LD_ADDR_EXP 5
1072: PUSH
1073: LD_INT 3
1075: PPUSH
1076: CALL_OW 426
1080: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
1081: LD_ADDR_EXP 6
1085: PUSH
1086: LD_INT 4
1088: PPUSH
1089: CALL_OW 426
1093: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
1094: LD_ADDR_EXP 7
1098: PUSH
1099: LD_INT 5
1101: PPUSH
1102: CALL_OW 426
1106: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
1107: LD_ADDR_EXP 8
1111: PUSH
1112: LD_INT 10
1114: PPUSH
1115: CALL_OW 426
1119: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
1120: LD_ADDR_EXP 9
1124: PUSH
1125: LD_INT 11
1127: PPUSH
1128: CALL_OW 426
1132: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
1133: LD_ADDR_EXP 10
1137: PUSH
1138: LD_INT 12
1140: PPUSH
1141: CALL_OW 426
1145: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
1146: LD_ADDR_EXP 11
1150: PUSH
1151: LD_INT 13
1153: PPUSH
1154: CALL_OW 426
1158: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
1159: LD_ADDR_EXP 12
1163: PUSH
1164: LD_INT 14
1166: PPUSH
1167: CALL_OW 426
1171: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
1172: LD_ADDR_EXP 13
1176: PUSH
1177: LD_INT 15
1179: PPUSH
1180: CALL_OW 426
1184: ST_TO_ADDR
// def_win_rules = 0 ;
1185: LD_ADDR_EXP 27
1189: PUSH
1190: LD_INT 0
1192: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
1193: LD_ADDR_EXP 14
1197: PUSH
1198: LD_INT 20
1200: PPUSH
1201: CALL_OW 426
1205: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
1206: LD_ADDR_VAR 0 9
1210: PUSH
1211: LD_INT 22
1213: PPUSH
1214: CALL_OW 426
1218: ST_TO_ADDR
// end else
1219: GO 1345
// begin randomize ;
1221: CALL_OW 10
// def_base_level = 1 ;
1225: LD_ADDR_EXP 2
1229: PUSH
1230: LD_INT 1
1232: ST_TO_ADDR
// def_amount_of_people = 1 ;
1233: LD_ADDR_EXP 3
1237: PUSH
1238: LD_INT 1
1240: ST_TO_ADDR
// def_skill_level = 1 ;
1241: LD_ADDR_EXP 4
1245: PUSH
1246: LD_INT 1
1248: ST_TO_ADDR
// def_starting_resources = 2 ;
1249: LD_ADDR_EXP 5
1253: PUSH
1254: LD_INT 2
1256: ST_TO_ADDR
// def_shipments_density = 1 ;
1257: LD_ADDR_EXP 6
1261: PUSH
1262: LD_INT 1
1264: ST_TO_ADDR
// def_extra_oil_deposits = 0 ;
1265: LD_ADDR_EXP 7
1269: PUSH
1270: LD_INT 0
1272: ST_TO_ADDR
// def_shared_vision = 1 ;
1273: LD_ADDR_EXP 8
1277: PUSH
1278: LD_INT 1
1280: ST_TO_ADDR
// def_morale_flags = 1 ;
1281: LD_ADDR_EXP 9
1285: PUSH
1286: LD_INT 1
1288: ST_TO_ADDR
// def_siberite_detection = 1 ;
1289: LD_ADDR_EXP 10
1293: PUSH
1294: LD_INT 1
1296: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
1297: LD_ADDR_EXP 11
1301: PUSH
1302: LD_INT 3
1304: ST_TO_ADDR
// def_people_respawning = 2 ;
1305: LD_ADDR_EXP 12
1309: PUSH
1310: LD_INT 2
1312: ST_TO_ADDR
// def_siberite_bomb = 0 ;
1313: LD_ADDR_EXP 13
1317: PUSH
1318: LD_INT 0
1320: ST_TO_ADDR
// def_win_rules = 0 ;
1321: LD_ADDR_EXP 27
1325: PUSH
1326: LD_INT 0
1328: ST_TO_ADDR
// def_builduptime := 1 ;
1329: LD_ADDR_EXP 14
1333: PUSH
1334: LD_INT 1
1336: ST_TO_ADDR
// tech_level = 4 ;
1337: LD_ADDR_VAR 0 9
1341: PUSH
1342: LD_INT 4
1344: ST_TO_ADDR
// end ; if isSGUI then
1345: LD_OWVAR 83
1349: IFFALSE 1357
// setMpTechs ( ) else
1351: CALL 8375 0 0
1355: GO 1370
// begin SetMpTechLevel ( tech_level + 1 ) ;
1357: LD_VAR 0 9
1361: PUSH
1362: LD_INT 1
1364: PLUS
1365: PPUSH
1366: CALL 8522 0 1
// end ; is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1370: LD_ADDR_EXP 15
1374: PUSH
1375: LD_INT 0
1377: PUSH
1378: LD_INT 1
1380: PUSH
1381: LD_INT 1
1383: PUSH
1384: LD_INT 1
1386: PUSH
1387: EMPTY
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: PUSH
1393: LD_EXP 2
1397: PUSH
1398: LD_INT 1
1400: PLUS
1401: ARRAY
1402: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 0 , 0 ] [ def_base_level + 1 ] ;
1403: LD_ADDR_EXP 16
1407: PUSH
1408: LD_INT 0
1410: PUSH
1411: LD_INT 0
1413: PUSH
1414: LD_INT 0
1416: PUSH
1417: LD_INT 0
1419: PUSH
1420: EMPTY
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: PUSH
1426: LD_EXP 2
1430: PUSH
1431: LD_INT 1
1433: PLUS
1434: ARRAY
1435: ST_TO_ADDR
// number_of_people = [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
1436: LD_ADDR_EXP 17
1440: PUSH
1441: LD_INT 9
1443: PUSH
1444: LD_INT 12
1446: PUSH
1447: LD_INT 15
1449: PUSH
1450: LD_INT 24
1452: PUSH
1453: EMPTY
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: PUSH
1459: LD_EXP 3
1463: PUSH
1464: LD_INT 1
1466: PLUS
1467: ARRAY
1468: ST_TO_ADDR
// skill_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1469: LD_ADDR_EXP 18
1473: PUSH
1474: LD_INT 2
1476: PUSH
1477: LD_INT 3
1479: PUSH
1480: LD_INT 4
1482: PUSH
1483: LD_INT 5
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: PUSH
1492: LD_EXP 4
1496: PUSH
1497: LD_INT 1
1499: PLUS
1500: ARRAY
1501: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1502: LD_ADDR_EXP 21
1506: PUSH
1507: LD_INT 0
1509: PUSH
1510: LD_INT 0
1512: PUSH
1513: LD_INT 0
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: LIST
1520: PUSH
1521: LD_INT 30
1523: PUSH
1524: LD_INT 0
1526: PUSH
1527: LD_INT 0
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: PUSH
1535: LD_INT 50
1537: PUSH
1538: LD_INT 20
1540: PUSH
1541: LD_INT 0
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 80
1551: PUSH
1552: LD_INT 40
1554: PUSH
1555: LD_INT 20
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: PUSH
1563: EMPTY
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: PUSH
1569: LD_EXP 5
1573: PUSH
1574: LD_INT 1
1576: PLUS
1577: ARRAY
1578: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1579: LD_ADDR_EXP 20
1583: PUSH
1584: LD_INT 10
1586: PUSH
1587: EMPTY
1588: LIST
1589: PUSH
1590: LD_INT 7
1592: PUSH
1593: LD_INT 14
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: PUSH
1600: LD_INT 6
1602: PUSH
1603: LD_INT 12
1605: PUSH
1606: LD_INT 18
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: PUSH
1614: LD_INT 5
1616: PUSH
1617: LD_INT 10
1619: PUSH
1620: LD_INT 15
1622: PUSH
1623: LD_INT 20
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: PUSH
1638: LD_EXP 5
1642: PUSH
1643: LD_INT 1
1645: PLUS
1646: ARRAY
1647: ST_TO_ADDR
// shipments_density = [ 20 , 30 , 40 ] [ def_shipments_density + 1 ] ;
1648: LD_ADDR_EXP 22
1652: PUSH
1653: LD_INT 20
1655: PUSH
1656: LD_INT 30
1658: PUSH
1659: LD_INT 40
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: LIST
1666: PUSH
1667: LD_EXP 6
1671: PUSH
1672: LD_INT 1
1674: PLUS
1675: ARRAY
1676: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1677: LD_ADDR_EXP 19
1681: PUSH
1682: LD_INT 0
1684: PUSH
1685: LD_INT 1
1687: PUSH
1688: LD_INT 2
1690: PUSH
1691: LD_INT 3
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: PUSH
1700: LD_EXP 11
1704: PUSH
1705: LD_INT 1
1707: PLUS
1708: ARRAY
1709: ST_TO_ADDR
// spawning_koef_of_apemen = [ 0 , 165 , 140 , 115 ] [ def_amount_of_apemen + 1 ] ;
1710: LD_ADDR_EXP 24
1714: PUSH
1715: LD_INT 0
1717: PUSH
1718: LD_INT 165
1720: PUSH
1721: LD_INT 140
1723: PUSH
1724: LD_INT 115
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: PUSH
1733: LD_EXP 11
1737: PUSH
1738: LD_INT 1
1740: PLUS
1741: ARRAY
1742: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1743: LD_ADDR_EXP 25
1747: PUSH
1748: LD_INT 0
1750: PUSH
1751: LD_INT 8400
1753: PUSH
1754: LD_INT 1750
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: LIST
1761: PUSH
1762: LD_EXP 12
1766: PUSH
1767: LD_INT 1
1769: PLUS
1770: ARRAY
1771: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1772: LD_ADDR_EXP 26
1776: PUSH
1777: LD_INT 0
1779: PUSH
1780: LD_INT 21000
1782: PUSH
1783: LD_INT 4200
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: LIST
1790: PUSH
1791: LD_EXP 12
1795: PUSH
1796: LD_INT 1
1798: PLUS
1799: ARRAY
1800: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1801: LD_ADDR_EXP 23
1805: PUSH
1806: LD_INT 0
1808: PUSH
1809: LD_INT 1
1811: PUSH
1812: LD_INT 63000
1814: PUSH
1815: LD_INT 126000
1817: PUSH
1818: LD_INT 189000
1820: PUSH
1821: LD_INT 252000
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: PUSH
1832: LD_EXP 13
1836: PUSH
1837: LD_INT 1
1839: PLUS
1840: ARRAY
1841: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1842: LD_ADDR_EXP 46
1846: PUSH
1847: LD_INT 1
1849: NEG
1850: PUSH
1851: LD_INT 350
1853: PUSH
1854: LD_INT 700
1856: PUSH
1857: LD_INT 1400
1859: PUSH
1860: LD_INT 0
1862: PUSH
1863: EMPTY
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: PUSH
1870: LD_EXP 9
1874: PUSH
1875: LD_INT 1
1877: PLUS
1878: ARRAY
1879: ST_TO_ADDR
// battle_flags_id = [ ] ;
1880: LD_ADDR_EXP 45
1884: PUSH
1885: EMPTY
1886: ST_TO_ADDR
// end ;
1887: LD_VAR 0 1
1891: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1892: LD_INT 0
1894: PPUSH
1895: PPUSH
1896: PPUSH
// Team_Game := 0 ;
1897: LD_ADDR_EXP 38
1901: PUSH
1902: LD_INT 0
1904: ST_TO_ADDR
// for i = 1 to 8 do
1905: LD_ADDR_VAR 0 2
1909: PUSH
1910: DOUBLE
1911: LD_INT 1
1913: DEC
1914: ST_TO_ADDR
1915: LD_INT 8
1917: PUSH
1918: FOR_TO
1919: IFFALSE 1945
// Team_Game := Team_Game + Side_Teams [ i ] ;
1921: LD_ADDR_EXP 38
1925: PUSH
1926: LD_EXP 38
1930: PUSH
1931: LD_EXP 32
1935: PUSH
1936: LD_VAR 0 2
1940: ARRAY
1941: PLUS
1942: ST_TO_ADDR
1943: GO 1918
1945: POP
1946: POP
// if not Team_Game then
1947: LD_EXP 38
1951: NOT
1952: IFFALSE 1964
// Team_Game := false else
1954: LD_ADDR_EXP 38
1958: PUSH
1959: LD_INT 0
1961: ST_TO_ADDR
1962: GO 1972
// Team_Game := true ;
1964: LD_ADDR_EXP 38
1968: PUSH
1969: LD_INT 1
1971: ST_TO_ADDR
// if not Team_Game then
1972: LD_EXP 38
1976: NOT
1977: IFFALSE 2075
// begin for i = 1 to 8 do
1979: LD_ADDR_VAR 0 2
1983: PUSH
1984: DOUBLE
1985: LD_INT 1
1987: DEC
1988: ST_TO_ADDR
1989: LD_INT 8
1991: PUSH
1992: FOR_TO
1993: IFFALSE 2071
// for j = 1 to 8 do
1995: LD_ADDR_VAR 0 3
1999: PUSH
2000: DOUBLE
2001: LD_INT 1
2003: DEC
2004: ST_TO_ADDR
2005: LD_INT 8
2007: PUSH
2008: FOR_TO
2009: IFFALSE 2067
// if i <> j then
2011: LD_VAR 0 2
2015: PUSH
2016: LD_VAR 0 3
2020: NONEQUAL
2021: IFFALSE 2045
// SetAttitude ( i , j , att_neutral , true ) else
2023: LD_VAR 0 2
2027: PPUSH
2028: LD_VAR 0 3
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: LD_INT 1
2038: PPUSH
2039: CALL_OW 80
2043: GO 2065
// SetAttitude ( i , j , att_friend , true ) ;
2045: LD_VAR 0 2
2049: PPUSH
2050: LD_VAR 0 3
2054: PPUSH
2055: LD_INT 1
2057: PPUSH
2058: LD_INT 1
2060: PPUSH
2061: CALL_OW 80
2065: GO 2008
2067: POP
2068: POP
2069: GO 1992
2071: POP
2072: POP
// end else
2073: GO 2250
// begin if def_shared_vision then
2075: LD_EXP 8
2079: IFFALSE 2144
// begin for i in Teams do
2081: LD_ADDR_VAR 0 2
2085: PUSH
2086: LD_EXP 33
2090: PUSH
2091: FOR_IN
2092: IFFALSE 2142
// for j = 2 to i do
2094: LD_ADDR_VAR 0 3
2098: PUSH
2099: DOUBLE
2100: LD_INT 2
2102: DEC
2103: ST_TO_ADDR
2104: LD_VAR 0 2
2108: PUSH
2109: FOR_TO
2110: IFFALSE 2138
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2112: LD_VAR 0 2
2116: PUSH
2117: LD_VAR 0 3
2121: ARRAY
2122: PPUSH
2123: LD_VAR 0 2
2127: PUSH
2128: LD_INT 1
2130: ARRAY
2131: PPUSH
2132: CALL_OW 343
2136: GO 2109
2138: POP
2139: POP
2140: GO 2091
2142: POP
2143: POP
// end ; for i = 1 to 8 do
2144: LD_ADDR_VAR 0 2
2148: PUSH
2149: DOUBLE
2150: LD_INT 1
2152: DEC
2153: ST_TO_ADDR
2154: LD_INT 8
2156: PUSH
2157: FOR_TO
2158: IFFALSE 2248
// for j = 1 to 8 do
2160: LD_ADDR_VAR 0 3
2164: PUSH
2165: DOUBLE
2166: LD_INT 1
2168: DEC
2169: ST_TO_ADDR
2170: LD_INT 8
2172: PUSH
2173: FOR_TO
2174: IFFALSE 2244
// if Side_Teams [ i ] = Side_Teams [ j ] then
2176: LD_EXP 32
2180: PUSH
2181: LD_VAR 0 2
2185: ARRAY
2186: PUSH
2187: LD_EXP 32
2191: PUSH
2192: LD_VAR 0 3
2196: ARRAY
2197: EQUAL
2198: IFFALSE 2222
// SetAttitude ( i , j , att_friend , true ) else
2200: LD_VAR 0 2
2204: PPUSH
2205: LD_VAR 0 3
2209: PPUSH
2210: LD_INT 1
2212: PPUSH
2213: LD_INT 1
2215: PPUSH
2216: CALL_OW 80
2220: GO 2242
// SetAttitude ( i , j , att_enemy , true ) ;
2222: LD_VAR 0 2
2226: PPUSH
2227: LD_VAR 0 3
2231: PPUSH
2232: LD_INT 2
2234: PPUSH
2235: LD_INT 1
2237: PPUSH
2238: CALL_OW 80
2242: GO 2173
2244: POP
2245: POP
2246: GO 2157
2248: POP
2249: POP
// end ; end ;
2250: LD_VAR 0 1
2254: RET
// function prepare_people ( side , count , cl , x , y , r , var commander ) ; var i , j , un ; begin
2255: LD_INT 0
2257: PPUSH
2258: PPUSH
2259: PPUSH
2260: PPUSH
// result := [ ] ;
2261: LD_ADDR_VAR 0 8
2265: PUSH
2266: EMPTY
2267: ST_TO_ADDR
// for i := 1 to count do
2268: LD_ADDR_VAR 0 9
2272: PUSH
2273: DOUBLE
2274: LD_INT 1
2276: DEC
2277: ST_TO_ADDR
2278: LD_VAR 0 2
2282: PUSH
2283: FOR_TO
2284: IFFALSE 2678
// begin uc_direction := Rand ( 0 , 5 ) ;
2286: LD_ADDR_OWVAR 24
2290: PUSH
2291: LD_INT 0
2293: PPUSH
2294: LD_INT 5
2296: PPUSH
2297: CALL_OW 12
2301: ST_TO_ADDR
// if commander then
2302: LD_FROM_VAR 0 7
2306: IFFALSE 2415
// begin hc_name := mp_sides_players_names [ side ] ;
2308: LD_ADDR_OWVAR 26
2312: PUSH
2313: LD_OWVAR 19
2317: PUSH
2318: LD_VAR 0 1
2322: ARRAY
2323: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2324: LD_INT 1
2326: PPUSH
2327: LD_INT 2
2329: PPUSH
2330: CALL_OW 12
2334: PPUSH
2335: LD_VAR 0 3
2339: PPUSH
2340: LD_EXP 18
2344: PUSH
2345: LD_INT 2
2347: PLUS
2348: PPUSH
2349: CALL_OW 380
// hc_importance := 105 ;
2353: LD_ADDR_OWVAR 32
2357: PUSH
2358: LD_INT 105
2360: ST_TO_ADDR
// commander := false ;
2361: LD_VAR 0 7
2365: PUSH
2366: LD_INT 0
2368: ST_TO_ADDR
// if Multiplayer then
2369: LD_OWVAR 4
2373: IFFALSE 2413
// begin hc_gallery := MULTIAVATARS ;
2375: LD_ADDR_OWVAR 33
2379: PUSH
2380: LD_STRING MULTIAVATARS
2382: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( Side ) ;
2383: LD_ADDR_OWVAR 34
2387: PUSH
2388: LD_VAR 0 1
2392: PPUSH
2393: CALL_OW 525
2397: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( Side ) ;
2398: LD_ADDR_OWVAR 27
2402: PUSH
2403: LD_VAR 0 1
2407: PPUSH
2408: CALL_OW 526
2412: ST_TO_ADDR
// end ; end else
2413: GO 2478
// begin hc_name :=  ;
2415: LD_ADDR_OWVAR 26
2419: PUSH
2420: LD_STRING 
2422: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2423: LD_INT 1
2425: PPUSH
2426: LD_INT 2
2428: PPUSH
2429: CALL_OW 12
2433: PPUSH
2434: LD_VAR 0 3
2438: PPUSH
2439: LD_EXP 18
2443: PPUSH
2444: CALL_OW 380
// hc_importance := 0 ;
2448: LD_ADDR_OWVAR 32
2452: PUSH
2453: LD_INT 0
2455: ST_TO_ADDR
// if Multiplayer then
2456: LD_OWVAR 4
2460: IFFALSE 2478
// begin hc_gallery :=  ;
2462: LD_ADDR_OWVAR 33
2466: PUSH
2467: LD_STRING 
2469: ST_TO_ADDR
// hc_face_number := 0 ;
2470: LD_ADDR_OWVAR 34
2474: PUSH
2475: LD_INT 0
2477: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2478: LD_ADDR_VAR 0 11
2482: PUSH
2483: CALL_OW 44
2487: ST_TO_ADDR
// if global_defined then
2488: LD_LOC 2
2492: IFFALSE 2630
// begin j := i ;
2494: LD_ADDR_VAR 0 10
2498: PUSH
2499: LD_VAR 0 9
2503: ST_TO_ADDR
// if cl = class_soldier then
2504: LD_VAR 0 3
2508: PUSH
2509: LD_INT 1
2511: EQUAL
2512: IFFALSE 2530
// j := i + soldiers_created ;
2514: LD_ADDR_VAR 0 10
2518: PUSH
2519: LD_VAR 0 9
2523: PUSH
2524: LD_LOC 3
2528: PLUS
2529: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2530: LD_LOC 1
2534: PUSH
2535: LD_VAR 0 3
2539: ARRAY
2540: PUSH
2541: LD_VAR 0 10
2545: ARRAY
2546: PPUSH
2547: LD_VAR 0 11
2551: PPUSH
2552: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2556: LD_VAR 0 11
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_LOC 1
2568: PUSH
2569: LD_VAR 0 3
2573: ARRAY
2574: PUSH
2575: LD_VAR 0 10
2579: ARRAY
2580: PPUSH
2581: LD_INT 2
2583: PPUSH
2584: CALL_OW 260
2588: PPUSH
2589: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2593: LD_VAR 0 11
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: LD_LOC 1
2605: PUSH
2606: LD_VAR 0 3
2610: ARRAY
2611: PUSH
2612: LD_VAR 0 10
2616: ARRAY
2617: PPUSH
2618: LD_INT 1
2620: PPUSH
2621: CALL_OW 260
2625: PPUSH
2626: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2630: LD_VAR 0 11
2634: PPUSH
2635: LD_VAR 0 4
2639: PPUSH
2640: LD_VAR 0 5
2644: PPUSH
2645: LD_VAR 0 6
2649: PPUSH
2650: LD_INT 0
2652: PPUSH
2653: CALL_OW 50
// result := result ^ [ un ] ;
2657: LD_ADDR_VAR 0 8
2661: PUSH
2662: LD_VAR 0 8
2666: PUSH
2667: LD_VAR 0 11
2671: PUSH
2672: EMPTY
2673: LIST
2674: ADD
2675: ST_TO_ADDR
// end ;
2676: GO 2283
2678: POP
2679: POP
// if not global_defined then
2680: LD_LOC 2
2684: NOT
2685: IFFALSE 2747
// if cl = class_soldier and global_units then
2687: LD_VAR 0 3
2691: PUSH
2692: LD_INT 1
2694: EQUAL
2695: PUSH
2696: LD_LOC 1
2700: AND
2701: IFFALSE 2728
// global_units := [ global_units [ 1 ] ^ result ] else
2703: LD_ADDR_LOC 1
2707: PUSH
2708: LD_LOC 1
2712: PUSH
2713: LD_INT 1
2715: ARRAY
2716: PUSH
2717: LD_VAR 0 8
2721: ADD
2722: PUSH
2723: EMPTY
2724: LIST
2725: ST_TO_ADDR
2726: GO 2747
// global_units := global_units ^ [ result ] ;
2728: LD_ADDR_LOC 1
2732: PUSH
2733: LD_LOC 1
2737: PUSH
2738: LD_VAR 0 8
2742: PUSH
2743: EMPTY
2744: LIST
2745: ADD
2746: ST_TO_ADDR
// if commander then
2747: LD_FROM_VAR 0 7
2751: IFFALSE 2798
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2753: LD_ADDR_EXP 43
2757: PUSH
2758: LD_EXP 43
2762: PPUSH
2763: LD_OWVAR 20
2767: PPUSH
2768: LD_EXP 43
2772: PUSH
2773: LD_OWVAR 20
2777: ARRAY
2778: PUSH
2779: LD_VAR 0 11
2783: ADD
2784: PPUSH
2785: CALL_OW 1
2789: ST_TO_ADDR
// commander := false ;
2790: LD_VAR 0 7
2794: PUSH
2795: LD_INT 0
2797: ST_TO_ADDR
// end ; end ;
2798: LD_VAR 0 8
2802: RET
// function prepare_buldozer ( x , y , r , pos ) ; var nation ; begin
2803: LD_INT 0
2805: PPUSH
2806: PPUSH
// if uc_nation = 2 then
2807: LD_OWVAR 21
2811: PUSH
2812: LD_INT 2
2814: EQUAL
2815: IFFALSE 2837
// begin nation := uc_nation ;
2817: LD_ADDR_VAR 0 6
2821: PUSH
2822: LD_OWVAR 21
2826: ST_TO_ADDR
// uc_nation := 1 ;
2827: LD_ADDR_OWVAR 21
2831: PUSH
2832: LD_INT 1
2834: ST_TO_ADDR
// end else
2835: GO 2845
// nation := false ;
2837: LD_ADDR_VAR 0 6
2841: PUSH
2842: LD_INT 0
2844: ST_TO_ADDR
// vc_engine = engine_combustion ;
2845: LD_ADDR_OWVAR 39
2849: PUSH
2850: LD_INT 1
2852: ST_TO_ADDR
// vc_control = control_manual ;
2853: LD_ADDR_OWVAR 38
2857: PUSH
2858: LD_INT 1
2860: ST_TO_ADDR
// if uc_nation = nation_russian then
2861: LD_OWVAR 21
2865: PUSH
2866: LD_INT 3
2868: EQUAL
2869: IFFALSE 2889
// begin vc_chassis = ru_heavy_tracked ;
2871: LD_ADDR_OWVAR 37
2875: PUSH
2876: LD_INT 24
2878: ST_TO_ADDR
// vc_weapon = ru_bulldozer ;
2879: LD_ADDR_OWVAR 40
2883: PUSH
2884: LD_INT 53
2886: ST_TO_ADDR
// end else
2887: GO 2905
// begin vc_chassis = us_heavy_tracked ;
2889: LD_ADDR_OWVAR 37
2893: PUSH
2894: LD_INT 4
2896: ST_TO_ADDR
// vc_weapon = us_bulldozer ;
2897: LD_ADDR_OWVAR 40
2901: PUSH
2902: LD_INT 14
2904: ST_TO_ADDR
// end ; case pos of 1 :
2905: LD_VAR 0 4
2909: PUSH
2910: LD_INT 1
2912: DOUBLE
2913: EQUAL
2914: IFTRUE 2918
2916: GO 2929
2918: POP
// uc_direction := 2 ; 2 :
2919: LD_ADDR_OWVAR 24
2923: PUSH
2924: LD_INT 2
2926: ST_TO_ADDR
2927: GO 2987
2929: LD_INT 2
2931: DOUBLE
2932: EQUAL
2933: IFTRUE 2937
2935: GO 2948
2937: POP
// uc_direction := 3 ; 3 :
2938: LD_ADDR_OWVAR 24
2942: PUSH
2943: LD_INT 3
2945: ST_TO_ADDR
2946: GO 2987
2948: LD_INT 3
2950: DOUBLE
2951: EQUAL
2952: IFTRUE 2956
2954: GO 2967
2956: POP
// uc_direction := 0 ; 4 :
2957: LD_ADDR_OWVAR 24
2961: PUSH
2962: LD_INT 0
2964: ST_TO_ADDR
2965: GO 2987
2967: LD_INT 4
2969: DOUBLE
2970: EQUAL
2971: IFTRUE 2975
2973: GO 2986
2975: POP
// uc_direction := 5 ; end ;
2976: LD_ADDR_OWVAR 24
2980: PUSH
2981: LD_INT 5
2983: ST_TO_ADDR
2984: GO 2987
2986: POP
// PlaceUnitXYR ( CreateVehicle , x , y , r , false ) ;
2987: CALL_OW 45
2991: PPUSH
2992: LD_VAR 0 1
2996: PPUSH
2997: LD_VAR 0 2
3001: PPUSH
3002: LD_VAR 0 3
3006: PPUSH
3007: LD_INT 0
3009: PPUSH
3010: CALL_OW 50
// if nation then
3014: LD_VAR 0 6
3018: IFFALSE 3030
// uc_nation := nation ;
3020: LD_ADDR_OWVAR 21
3024: PUSH
3025: LD_VAR 0 6
3029: ST_TO_ADDR
// end ;
3030: LD_VAR 0 5
3034: RET
// function prepare_side ( side ) ; var pos , x , y , i , r , sol , br , dep , neng , nsci , nmech , nsol ; begin
3035: LD_INT 0
3037: PPUSH
3038: PPUSH
3039: PPUSH
3040: PPUSH
3041: PPUSH
3042: PPUSH
3043: PPUSH
3044: PPUSH
3045: PPUSH
3046: PPUSH
3047: PPUSH
3048: PPUSH
3049: PPUSH
// pos := Side_Positions [ side ] ;
3050: LD_ADDR_VAR 0 3
3054: PUSH
3055: LD_EXP 34
3059: PUSH
3060: LD_VAR 0 1
3064: ARRAY
3065: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3066: LD_ADDR_OWVAR 21
3070: PUSH
3071: LD_EXP 35
3075: PUSH
3076: LD_VAR 0 1
3080: ARRAY
3081: ST_TO_ADDR
// uc_side := side ;
3082: LD_ADDR_OWVAR 20
3086: PUSH
3087: LD_VAR 0 1
3091: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3092: LD_ADDR_VAR 0 4
3096: PUSH
3097: LD_EXP 40
3101: PUSH
3102: LD_VAR 0 3
3106: ARRAY
3107: PUSH
3108: LD_INT 1
3110: ARRAY
3111: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3112: LD_ADDR_VAR 0 5
3116: PUSH
3117: LD_EXP 40
3121: PUSH
3122: LD_VAR 0 3
3126: ARRAY
3127: PUSH
3128: LD_INT 2
3130: ARRAY
3131: ST_TO_ADDR
// if is_depot then
3132: LD_EXP 15
3136: IFFALSE 3279
// begin bc_type = b_depot ;
3138: LD_ADDR_OWVAR 42
3142: PUSH
3143: LD_INT 0
3145: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , Depot_Def [ pos ] [ 3 ] ) ;
3146: LD_ADDR_VAR 0 10
3150: PUSH
3151: LD_VAR 0 4
3155: PPUSH
3156: LD_VAR 0 5
3160: PPUSH
3161: LD_EXP 40
3165: PUSH
3166: LD_VAR 0 3
3170: ARRAY
3171: PUSH
3172: LD_INT 3
3174: ARRAY
3175: PPUSH
3176: CALL_OW 47
3180: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3181: LD_VAR 0 10
3185: PPUSH
3186: LD_STRING @
3188: PUSH
3189: LD_VAR 0 1
3193: STR
3194: PPUSH
3195: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3199: LD_VAR 0 10
3203: PPUSH
3204: CALL_OW 274
3208: PPUSH
3209: LD_INT 1
3211: PPUSH
3212: LD_EXP 21
3216: PUSH
3217: LD_INT 1
3219: ARRAY
3220: PPUSH
3221: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3225: LD_VAR 0 10
3229: PPUSH
3230: CALL_OW 274
3234: PPUSH
3235: LD_INT 2
3237: PPUSH
3238: LD_EXP 21
3242: PUSH
3243: LD_INT 2
3245: ARRAY
3246: PPUSH
3247: CALL_OW 277
// SetResourceType ( GetBase ( result ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3251: LD_VAR 0 2
3255: PPUSH
3256: CALL_OW 274
3260: PPUSH
3261: LD_INT 3
3263: PPUSH
3264: LD_EXP 21
3268: PUSH
3269: LD_INT 3
3271: ARRAY
3272: PPUSH
3273: CALL_OW 277
// end else
3277: GO 3423
// begin for i := 1 to 3 do
3279: LD_ADDR_VAR 0 6
3283: PUSH
3284: DOUBLE
3285: LD_INT 1
3287: DEC
3288: ST_TO_ADDR
3289: LD_INT 3
3291: PUSH
3292: FOR_TO
3293: IFFALSE 3421
// begin r := starting_resources [ i ] ;
3295: LD_ADDR_VAR 0 7
3299: PUSH
3300: LD_EXP 21
3304: PUSH
3305: LD_VAR 0 6
3309: ARRAY
3310: ST_TO_ADDR
// while r >= 10 do
3311: LD_VAR 0 7
3315: PUSH
3316: LD_INT 10
3318: GREATEREQUAL
3319: IFFALSE 3419
// if r > 50 then
3321: LD_VAR 0 7
3325: PUSH
3326: LD_INT 50
3328: GREATER
3329: IFFALSE 3375
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3331: LD_VAR 0 6
3335: PPUSH
3336: LD_INT 5
3338: PPUSH
3339: LD_VAR 0 4
3343: PPUSH
3344: LD_VAR 0 5
3348: PPUSH
3349: LD_INT 4
3351: PPUSH
3352: LD_INT 0
3354: PPUSH
3355: CALL_OW 60
// r := r - 50 ;
3359: LD_ADDR_VAR 0 7
3363: PUSH
3364: LD_VAR 0 7
3368: PUSH
3369: LD_INT 50
3371: MINUS
3372: ST_TO_ADDR
// end else
3373: GO 3417
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3375: LD_VAR 0 6
3379: PPUSH
3380: LD_VAR 0 7
3384: PUSH
3385: LD_INT 10
3387: DIV
3388: PPUSH
3389: LD_VAR 0 4
3393: PPUSH
3394: LD_VAR 0 5
3398: PPUSH
3399: LD_INT 4
3401: PPUSH
3402: LD_INT 0
3404: PPUSH
3405: CALL_OW 60
// r := 0 ;
3409: LD_ADDR_VAR 0 7
3413: PUSH
3414: LD_INT 0
3416: ST_TO_ADDR
// end ;
3417: GO 3311
// end ;
3419: GO 3292
3421: POP
3422: POP
// end ; x := start_def [ pos ] [ 1 ] ;
3423: LD_ADDR_VAR 0 4
3427: PUSH
3428: LD_EXP 41
3432: PUSH
3433: LD_VAR 0 3
3437: ARRAY
3438: PUSH
3439: LD_INT 1
3441: ARRAY
3442: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3443: LD_ADDR_VAR 0 5
3447: PUSH
3448: LD_EXP 41
3452: PUSH
3453: LD_VAR 0 3
3457: ARRAY
3458: PUSH
3459: LD_INT 2
3461: ARRAY
3462: ST_TO_ADDR
// for r in starting_crates do
3463: LD_ADDR_VAR 0 7
3467: PUSH
3468: LD_EXP 20
3472: PUSH
3473: FOR_IN
3474: IFFALSE 3506
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3476: LD_INT 1
3478: PPUSH
3479: LD_INT 5
3481: PPUSH
3482: LD_VAR 0 4
3486: PPUSH
3487: LD_VAR 0 5
3491: PPUSH
3492: LD_VAR 0 7
3496: PPUSH
3497: LD_INT 0
3499: PPUSH
3500: CALL_OW 60
3504: GO 3473
3506: POP
3507: POP
// if def_morale_flags then
3508: LD_EXP 9
3512: IFFALSE 3591
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3514: LD_ADDR_EXP 45
3518: PUSH
3519: LD_EXP 45
3523: PUSH
3524: LD_VAR 0 1
3528: PPUSH
3529: LD_VAR 0 4
3533: PPUSH
3534: LD_VAR 0 5
3538: PPUSH
3539: LD_INT 1
3541: PUSH
3542: LD_INT 100
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: PUSH
3549: LD_INT 2
3551: PUSH
3552: LD_INT 50
3554: PUSH
3555: EMPTY
3556: LIST
3557: LIST
3558: PUSH
3559: LD_INT 3
3561: PUSH
3562: LD_INT 20
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: PUSH
3569: LD_INT 20
3571: PUSH
3572: LD_INT 100
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: PPUSH
3585: CALL_OW 418
3589: ADD
3590: ST_TO_ADDR
// neng := number_of_people ;
3591: LD_ADDR_VAR 0 11
3595: PUSH
3596: LD_EXP 17
3600: ST_TO_ADDR
// nsol := neng div 4 ;
3601: LD_ADDR_VAR 0 14
3605: PUSH
3606: LD_VAR 0 11
3610: PUSH
3611: LD_INT 4
3613: DIV
3614: ST_TO_ADDR
// neng := neng - nsol ;
3615: LD_ADDR_VAR 0 11
3619: PUSH
3620: LD_VAR 0 11
3624: PUSH
3625: LD_VAR 0 14
3629: MINUS
3630: ST_TO_ADDR
// nsci := neng div 3 ;
3631: LD_ADDR_VAR 0 12
3635: PUSH
3636: LD_VAR 0 11
3640: PUSH
3641: LD_INT 3
3643: DIV
3644: ST_TO_ADDR
// if nsci < 1 then
3645: LD_VAR 0 12
3649: PUSH
3650: LD_INT 1
3652: LESS
3653: IFFALSE 3663
// nsci := 1 ;
3655: LD_ADDR_VAR 0 12
3659: PUSH
3660: LD_INT 1
3662: ST_TO_ADDR
// neng := neng - nsci ;
3663: LD_ADDR_VAR 0 11
3667: PUSH
3668: LD_VAR 0 11
3672: PUSH
3673: LD_VAR 0 12
3677: MINUS
3678: ST_TO_ADDR
// nmech := neng div 2 ;
3679: LD_ADDR_VAR 0 13
3683: PUSH
3684: LD_VAR 0 11
3688: PUSH
3689: LD_INT 2
3691: DIV
3692: ST_TO_ADDR
// neng := neng - nmech ;
3693: LD_ADDR_VAR 0 11
3697: PUSH
3698: LD_VAR 0 11
3702: PUSH
3703: LD_VAR 0 13
3707: MINUS
3708: ST_TO_ADDR
// if neng < 1 then
3709: LD_VAR 0 11
3713: PUSH
3714: LD_INT 1
3716: LESS
3717: IFFALSE 3727
// neng := 1 ;
3719: LD_ADDR_VAR 0 11
3723: PUSH
3724: LD_INT 1
3726: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
3727: LD_ADDR_VAR 0 4
3731: PUSH
3732: LD_EXP 41
3736: PUSH
3737: LD_VAR 0 3
3741: ARRAY
3742: PUSH
3743: LD_INT 1
3745: ARRAY
3746: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3747: LD_ADDR_VAR 0 5
3751: PUSH
3752: LD_EXP 41
3756: PUSH
3757: LD_VAR 0 3
3761: ARRAY
3762: PUSH
3763: LD_INT 2
3765: ARRAY
3766: ST_TO_ADDR
// if not is_depot then
3767: LD_EXP 15
3771: NOT
3772: IFFALSE 3796
// prepare_buldozer ( x , y , 2 , pos ) ;
3774: LD_VAR 0 4
3778: PPUSH
3779: LD_VAR 0 5
3783: PPUSH
3784: LD_INT 2
3786: PPUSH
3787: LD_VAR 0 3
3791: PPUSH
3792: CALL 2803 0 4
// commander := true ;
3796: LD_ADDR_EXP 44
3800: PUSH
3801: LD_INT 1
3803: ST_TO_ADDR
// prepare_people ( side , 1 , class_soldier , x , y , 5 , commander ) ;
3804: LD_VAR 0 1
3808: PPUSH
3809: LD_INT 1
3811: PPUSH
3812: LD_INT 1
3814: PPUSH
3815: LD_VAR 0 4
3819: PPUSH
3820: LD_VAR 0 5
3824: PPUSH
3825: LD_INT 5
3827: PPUSH
3828: LD_ADDR_EXP 44
3832: PPUSH
3833: CALL 2255 0 7
// commander := false ;
3837: LD_ADDR_EXP 44
3841: PUSH
3842: LD_INT 0
3844: ST_TO_ADDR
// prepare_people ( side , nsol - 1 , class_soldier , x , y , 5 , commander ) ;
3845: LD_VAR 0 1
3849: PPUSH
3850: LD_VAR 0 14
3854: PUSH
3855: LD_INT 1
3857: MINUS
3858: PPUSH
3859: LD_INT 1
3861: PPUSH
3862: LD_VAR 0 4
3866: PPUSH
3867: LD_VAR 0 5
3871: PPUSH
3872: LD_INT 5
3874: PPUSH
3875: LD_ADDR_EXP 44
3879: PPUSH
3880: CALL 2255 0 7
// prepare_people ( side , neng , class_engineer , x , y , 5 , commander ) ;
3884: LD_VAR 0 1
3888: PPUSH
3889: LD_VAR 0 11
3893: PPUSH
3894: LD_INT 2
3896: PPUSH
3897: LD_VAR 0 4
3901: PPUSH
3902: LD_VAR 0 5
3906: PPUSH
3907: LD_INT 5
3909: PPUSH
3910: LD_ADDR_EXP 44
3914: PPUSH
3915: CALL 2255 0 7
// prepare_people ( side , nmech , class_mechanic , x , y , 5 , commander ) ;
3919: LD_VAR 0 1
3923: PPUSH
3924: LD_VAR 0 13
3928: PPUSH
3929: LD_INT 3
3931: PPUSH
3932: LD_VAR 0 4
3936: PPUSH
3937: LD_VAR 0 5
3941: PPUSH
3942: LD_INT 5
3944: PPUSH
3945: LD_ADDR_EXP 44
3949: PPUSH
3950: CALL 2255 0 7
// prepare_people ( side , nsci , class_scientistic , x , y , 5 , commander ) ;
3954: LD_VAR 0 1
3958: PPUSH
3959: LD_VAR 0 12
3963: PPUSH
3964: LD_INT 4
3966: PPUSH
3967: LD_VAR 0 4
3971: PPUSH
3972: LD_VAR 0 5
3976: PPUSH
3977: LD_INT 5
3979: PPUSH
3980: LD_ADDR_EXP 44
3984: PPUSH
3985: CALL 2255 0 7
// if not global_defined then
3989: LD_LOC 2
3993: NOT
3994: IFFALSE 4004
// global_defined := true ;
3996: LD_ADDR_LOC 2
4000: PUSH
4001: LD_INT 1
4003: ST_TO_ADDR
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4004: LD_EXP 10
4008: PUSH
4009: LD_INT 20
4011: PPUSH
4012: LD_VAR 0 1
4016: PPUSH
4017: CALL_OW 321
4021: PUSH
4022: LD_INT 1
4024: EQUAL
4025: AND
4026: IFFALSE 4043
// SetTech ( tech_SibDet , side , state_researched ) ;
4028: LD_INT 20
4030: PPUSH
4031: LD_VAR 0 1
4035: PPUSH
4036: LD_INT 2
4038: PPUSH
4039: CALL_OW 322
// if def_siberite_bomb = 1 then
4043: LD_EXP 13
4047: PUSH
4048: LD_INT 1
4050: EQUAL
4051: IFFALSE 4085
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4053: LD_INT 25
4055: PPUSH
4056: LD_VAR 0 1
4060: PPUSH
4061: LD_INT 1
4063: PPUSH
4064: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4068: LD_INT 73
4070: PPUSH
4071: LD_VAR 0 1
4075: PPUSH
4076: LD_INT 1
4078: PPUSH
4079: CALL_OW 322
// end else
4083: GO 4115
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4085: LD_INT 25
4087: PPUSH
4088: LD_VAR 0 1
4092: PPUSH
4093: LD_INT 0
4095: PPUSH
4096: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4100: LD_INT 73
4102: PPUSH
4103: LD_VAR 0 1
4107: PPUSH
4108: LD_INT 0
4110: PPUSH
4111: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4115: LD_INT 24
4117: PPUSH
4118: LD_VAR 0 1
4122: PPUSH
4123: LD_INT 0
4125: PPUSH
4126: CALL_OW 322
// end ;
4130: LD_VAR 0 2
4134: RET
// every 0 0$1 do
4135: GO 4137
4137: DISABLE
// if ( def_siberite_bomb > 1 ) then
4138: LD_EXP 13
4142: PUSH
4143: LD_INT 1
4145: GREATER
4146: IFFALSE 4161
// begin wait ( siberite_bomb_Delay ) ;
4148: LD_EXP 23
4152: PPUSH
4153: CALL_OW 67
// EnableSibFiss ;
4157: CALL 4162 0 0
// end ;
4161: END
// function EnableSibFiss ; var i ; begin
4162: LD_INT 0
4164: PPUSH
4165: PPUSH
// for i := 1 to 8 do
4166: LD_ADDR_VAR 0 2
4170: PUSH
4171: DOUBLE
4172: LD_INT 1
4174: DEC
4175: ST_TO_ADDR
4176: LD_INT 8
4178: PUSH
4179: FOR_TO
4180: IFFALSE 4226
// if Side_Positions [ i ] then
4182: LD_EXP 34
4186: PUSH
4187: LD_VAR 0 2
4191: ARRAY
4192: IFFALSE 4224
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4194: LD_INT 25
4196: PPUSH
4197: LD_VAR 0 2
4201: PPUSH
4202: LD_INT 1
4204: PPUSH
4205: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4209: LD_INT 73
4211: PPUSH
4212: LD_VAR 0 2
4216: PPUSH
4217: LD_INT 1
4219: PPUSH
4220: CALL_OW 322
// end ;
4224: GO 4179
4226: POP
4227: POP
// end ;
4228: LD_VAR 0 1
4232: RET
// function prepare_sides ; var i ; begin
4233: LD_INT 0
4235: PPUSH
4236: PPUSH
// global_units := [ ] ;
4237: LD_ADDR_LOC 1
4241: PUSH
4242: EMPTY
4243: ST_TO_ADDR
// global_defined := false ;
4244: LD_ADDR_LOC 2
4248: PUSH
4249: LD_INT 0
4251: ST_TO_ADDR
// for i := 1 to 8 do
4252: LD_ADDR_VAR 0 2
4256: PUSH
4257: DOUBLE
4258: LD_INT 1
4260: DEC
4261: ST_TO_ADDR
4262: LD_INT 8
4264: PUSH
4265: FOR_TO
4266: IFFALSE 4291
// if Side_Positions [ i ] then
4268: LD_EXP 34
4272: PUSH
4273: LD_VAR 0 2
4277: ARRAY
4278: IFFALSE 4289
// prepare_side ( i ) ;
4280: LD_VAR 0 2
4284: PPUSH
4285: CALL 3035 0 1
4289: GO 4265
4291: POP
4292: POP
// end ;
4293: LD_VAR 0 1
4297: RET
// starting begin disable ( 98 ) ;
4298: LD_INT 98
4300: DISABLE_MARKED
// disable ( 99 ) ;
4301: LD_INT 99
4303: DISABLE_MARKED
// disable ( 400 ) ;
4304: LD_INT 400
4306: DISABLE_MARKED
// disable ( 401 ) ;
4307: LD_INT 401
4309: DISABLE_MARKED
// mp_selectmsg := true ;
4310: LD_ADDR_OWVAR 13
4314: PUSH
4315: LD_INT 1
4317: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4318: CALL 681 0 0
// init_map ;
4322: CALL 436 0 0
// init_respawning ;
4326: CALL 13099 0 0
// set_shared_visions_and_alliances ;
4330: CALL 1892 0 0
// ResetFog ;
4334: CALL_OW 335
// ClearAllFogForSide ( Player_Side ) ;
4338: LD_EXP 30
4342: PPUSH
4343: CALL_OW 520
// AnimateTrees ( true ) ;
4347: LD_INT 1
4349: PPUSH
4350: CALL_OW 573
// prepare_sides ;
4354: CALL 4233 0 0
// Init_Win_Condition ;
4358: CALL 7080 0 0
// init_shipments ;
4362: CALL 5524 0 0
// InitApeman ;
4366: CALL 4689 0 0
// your_side := Player_Side ;
4370: LD_ADDR_OWVAR 2
4374: PUSH
4375: LD_EXP 30
4379: ST_TO_ADDR
// music_nat := Side_Nations [ your_side ] ;
4380: LD_ADDR_OWVAR 71
4384: PUSH
4385: LD_EXP 35
4389: PUSH
4390: LD_OWVAR 2
4394: ARRAY
4395: ST_TO_ADDR
// if IAmSpec then
4396: CALL_OW 531
4400: IFFALSE 4424
// begin fogOff ( true ) ;
4402: LD_INT 1
4404: PPUSH
4405: CALL_OW 344
// CenterNowOnXY ( 104 , 69 ) ;
4409: LD_INT 104
4411: PPUSH
4412: LD_INT 69
4414: PPUSH
4415: CALL_OW 86
// enable ( 400 ) ;
4419: LD_INT 400
4421: ENABLE_MARKED
// end else
4422: GO 4470
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4424: LD_EXP 41
4428: PUSH
4429: LD_EXP 34
4433: PUSH
4434: LD_OWVAR 2
4438: ARRAY
4439: ARRAY
4440: PUSH
4441: LD_INT 1
4443: ARRAY
4444: PPUSH
4445: LD_EXP 41
4449: PUSH
4450: LD_EXP 34
4454: PUSH
4455: LD_OWVAR 2
4459: ARRAY
4460: ARRAY
4461: PUSH
4462: LD_INT 2
4464: ARRAY
4465: PPUSH
4466: CALL_OW 86
// end ; BuildUpAreas := [ nw , ne , sw , se ] ;
4470: LD_ADDR_EXP 56
4474: PUSH
4475: LD_INT 12
4477: PUSH
4478: LD_INT 13
4480: PUSH
4481: LD_INT 14
4483: PUSH
4484: LD_INT 15
4486: PUSH
4487: EMPTY
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: ST_TO_ADDR
// BeginBuildUp ;
4493: CALL 13593 0 0
// end ; end_of_file
4497: END
// every 20 20$00 trigger apemanNumber do
4498: LD_EXP 47
4502: IFFALSE 4535
4504: GO 4506
4506: DISABLE
// begin enable ;
4507: ENABLE
// if apeLevel >= 8 then
4508: LD_EXP 52
4512: PUSH
4513: LD_INT 8
4515: GREATEREQUAL
4516: IFFALSE 4521
// disable else
4518: DISABLE
4519: GO 4535
// apeLevel := apeLevel + 1 ;
4521: LD_ADDR_EXP 52
4525: PUSH
4526: LD_EXP 52
4530: PUSH
4531: LD_INT 1
4533: PLUS
4534: ST_TO_ADDR
// end ;
4535: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
4536: LD_EXP 47
4540: PUSH
4541: LD_EXP 48
4545: LESS
4546: IFFALSE 4686
4548: GO 4550
4550: DISABLE
4551: LD_INT 0
4553: PPUSH
4554: PPUSH
4555: PPUSH
4556: PPUSH
// begin enable ;
4557: ENABLE
// for i := 1 to apemanPos do
4558: LD_ADDR_VAR 0 1
4562: PUSH
4563: DOUBLE
4564: LD_INT 1
4566: DEC
4567: ST_TO_ADDR
4568: LD_EXP 50
4572: PUSH
4573: FOR_TO
4574: IFFALSE 4684
// begin if apemanPlayerCount [ i ] then
4576: LD_EXP 51
4580: PUSH
4581: LD_VAR 0 1
4585: ARRAY
4586: IFFALSE 4682
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
4588: LD_EXP 51
4592: PUSH
4593: LD_VAR 0 1
4597: ARRAY
4598: PUSH
4599: LD_EXP 50
4603: PUSH
4604: LD_VAR 0 1
4608: ARRAY
4609: GREATER
4610: IFFALSE 4682
// begin ape := PrepareApeman ;
4612: LD_ADDR_VAR 0 2
4616: PUSH
4617: CALL 5189 0 0
4621: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
4622: LD_VAR 0 2
4626: PPUSH
4627: LD_EXP 53
4631: PUSH
4632: LD_VAR 0 1
4636: ARRAY
4637: PPUSH
4638: LD_INT 0
4640: PPUSH
4641: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
4645: LD_ADDR_EXP 50
4649: PUSH
4650: LD_EXP 50
4654: PPUSH
4655: LD_VAR 0 1
4659: PPUSH
4660: LD_EXP 50
4664: PUSH
4665: LD_VAR 0 1
4669: ARRAY
4670: PUSH
4671: LD_VAR 0 2
4675: UNION
4676: PPUSH
4677: CALL_OW 1
4681: ST_TO_ADDR
// end ; end ; end ;
4682: GO 4573
4684: POP
4685: POP
// end ;
4686: PPOPN 4
4688: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
4689: LD_INT 0
4691: PPUSH
4692: PPUSH
4693: PPUSH
4694: PPUSH
4695: PPUSH
4696: PPUSH
4697: PPUSH
// playersAmount := 0 ;
4698: LD_ADDR_VAR 0 3
4702: PUSH
4703: LD_INT 0
4705: ST_TO_ADDR
// _apeAreas := [ nw , ne , sw , se , ] ;
4706: LD_ADDR_VAR 0 7
4710: PUSH
4711: LD_INT 12
4713: PUSH
4714: LD_INT 13
4716: PUSH
4717: LD_INT 14
4719: PUSH
4720: LD_INT 15
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4729: LD_ADDR_EXP 53
4733: PUSH
4734: LD_INT 0
4736: PUSH
4737: LD_INT 0
4739: PUSH
4740: LD_INT 0
4742: PUSH
4743: LD_INT 0
4745: PUSH
4746: LD_INT 0
4748: PUSH
4749: LD_INT 0
4751: PUSH
4752: LD_INT 0
4754: PUSH
4755: LD_INT 0
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: ST_TO_ADDR
// for j = 1 to Side_Positions do
4768: LD_ADDR_VAR 0 4
4772: PUSH
4773: DOUBLE
4774: LD_INT 1
4776: DEC
4777: ST_TO_ADDR
4778: LD_EXP 34
4782: PUSH
4783: FOR_TO
4784: IFFALSE 4851
// if Side_Positions [ j ] then
4786: LD_EXP 34
4790: PUSH
4791: LD_VAR 0 4
4795: ARRAY
4796: IFFALSE 4849
// begin playersAmount := playersAmount + 1 ;
4798: LD_ADDR_VAR 0 3
4802: PUSH
4803: LD_VAR 0 3
4807: PUSH
4808: LD_INT 1
4810: PLUS
4811: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
4812: LD_ADDR_EXP 53
4816: PUSH
4817: LD_EXP 53
4821: PPUSH
4822: LD_VAR 0 4
4826: PPUSH
4827: LD_VAR 0 7
4831: PUSH
4832: LD_EXP 34
4836: PUSH
4837: LD_VAR 0 4
4841: ARRAY
4842: ARRAY
4843: PPUSH
4844: CALL_OW 1
4848: ST_TO_ADDR
// end ;
4849: GO 4783
4851: POP
4852: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
4853: LD_ADDR_EXP 49
4857: PUSH
4858: LD_INT 3
4860: PUSH
4861: LD_EXP 19
4865: MUL
4866: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
4867: LD_ADDR_EXP 47
4871: PUSH
4872: LD_VAR 0 3
4876: PUSH
4877: LD_EXP 49
4881: MUL
4882: ST_TO_ADDR
// apemanLimit := apemanNumber ;
4883: LD_ADDR_EXP 48
4887: PUSH
4888: LD_EXP 47
4892: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4893: LD_ADDR_EXP 50
4897: PUSH
4898: LD_INT 0
4900: PUSH
4901: LD_INT 0
4903: PUSH
4904: LD_INT 0
4906: PUSH
4907: LD_INT 0
4909: PUSH
4910: LD_INT 0
4912: PUSH
4913: LD_INT 0
4915: PUSH
4916: LD_INT 0
4918: PUSH
4919: LD_INT 0
4921: PUSH
4922: EMPTY
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4932: LD_ADDR_EXP 51
4936: PUSH
4937: LD_INT 0
4939: PUSH
4940: LD_INT 0
4942: PUSH
4943: LD_INT 0
4945: PUSH
4946: LD_INT 0
4948: PUSH
4949: LD_INT 0
4951: PUSH
4952: LD_INT 0
4954: PUSH
4955: LD_INT 0
4957: PUSH
4958: LD_INT 0
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: ST_TO_ADDR
// apeLevel := 1 ;
4971: LD_ADDR_EXP 52
4975: PUSH
4976: LD_INT 1
4978: ST_TO_ADDR
// if not apemanNumber then
4979: LD_EXP 47
4983: NOT
4984: IFFALSE 4988
// exit ;
4986: GO 5184
// for i := 1 to apemanPerPlayer do
4988: LD_ADDR_VAR 0 2
4992: PUSH
4993: DOUBLE
4994: LD_INT 1
4996: DEC
4997: ST_TO_ADDR
4998: LD_EXP 49
5002: PUSH
5003: FOR_TO
5004: IFFALSE 5182
// begin for j := 1 to Side_Positions do
5006: LD_ADDR_VAR 0 4
5010: PUSH
5011: DOUBLE
5012: LD_INT 1
5014: DEC
5015: ST_TO_ADDR
5016: LD_EXP 34
5020: PUSH
5021: FOR_TO
5022: IFFALSE 5178
// if Side_Positions [ j ] then
5024: LD_EXP 34
5028: PUSH
5029: LD_VAR 0 4
5033: ARRAY
5034: IFFALSE 5176
// begin pos := Side_Positions [ j ] ;
5036: LD_ADDR_VAR 0 6
5040: PUSH
5041: LD_EXP 34
5045: PUSH
5046: LD_VAR 0 4
5050: ARRAY
5051: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5052: LD_ADDR_EXP 51
5056: PUSH
5057: LD_EXP 51
5061: PPUSH
5062: LD_VAR 0 4
5066: PPUSH
5067: LD_EXP 51
5071: PUSH
5072: LD_VAR 0 4
5076: ARRAY
5077: PUSH
5078: LD_INT 1
5080: PLUS
5081: PPUSH
5082: CALL_OW 1
5086: ST_TO_ADDR
// ape := PrepareApeman ;
5087: LD_ADDR_VAR 0 5
5091: PUSH
5092: CALL 5189 0 0
5096: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5097: LD_ADDR_EXP 50
5101: PUSH
5102: LD_EXP 50
5106: PPUSH
5107: LD_VAR 0 4
5111: PPUSH
5112: LD_EXP 50
5116: PUSH
5117: LD_VAR 0 4
5121: ARRAY
5122: PPUSH
5123: LD_EXP 50
5127: PUSH
5128: LD_VAR 0 4
5132: ARRAY
5133: PUSH
5134: LD_INT 1
5136: PLUS
5137: PPUSH
5138: LD_VAR 0 5
5142: PPUSH
5143: CALL_OW 1
5147: PPUSH
5148: CALL_OW 1
5152: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5153: LD_VAR 0 5
5157: PPUSH
5158: LD_EXP 53
5162: PUSH
5163: LD_VAR 0 4
5167: ARRAY
5168: PPUSH
5169: LD_INT 0
5171: PPUSH
5172: CALL_OW 49
// end ;
5176: GO 5021
5178: POP
5179: POP
// end ;
5180: GO 5003
5182: POP
5183: POP
// end ;
5184: LD_VAR 0 1
5188: RET
// export function PrepareApeman ; var bonus ; begin
5189: LD_INT 0
5191: PPUSH
5192: PPUSH
// uc_side := 0 ;
5193: LD_ADDR_OWVAR 20
5197: PUSH
5198: LD_INT 0
5200: ST_TO_ADDR
// uc_nation := 0 ;
5201: LD_ADDR_OWVAR 21
5205: PUSH
5206: LD_INT 0
5208: ST_TO_ADDR
// InitHc ;
5209: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
5213: LD_ADDR_VAR 0 2
5217: PUSH
5218: LD_INT 1
5220: NEG
5221: PUSH
5222: LD_INT 0
5224: PUSH
5225: LD_INT 1
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: LIST
5232: PUSH
5233: LD_INT 25
5235: PUSH
5236: LD_INT 12
5238: PUSH
5239: EMPTY
5240: LIST
5241: LIST
5242: PPUSH
5243: CALL_OW 69
5247: PUSH
5248: LD_INT 3
5250: MOD
5251: PUSH
5252: LD_INT 1
5254: PLUS
5255: ARRAY
5256: ST_TO_ADDR
// hc_class := class_apeman ;
5257: LD_ADDR_OWVAR 28
5261: PUSH
5262: LD_INT 12
5264: ST_TO_ADDR
// hc_gallery :=  ;
5265: LD_ADDR_OWVAR 33
5269: PUSH
5270: LD_STRING 
5272: ST_TO_ADDR
// hc_name :=  ;
5273: LD_ADDR_OWVAR 26
5277: PUSH
5278: LD_STRING 
5280: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
5281: LD_ADDR_OWVAR 31
5285: PUSH
5286: LD_EXP 52
5290: PUSH
5291: LD_VAR 0 2
5295: PLUS
5296: PUSH
5297: LD_EXP 52
5301: PUSH
5302: LD_VAR 0 2
5306: PLUS
5307: PUSH
5308: LD_EXP 52
5312: PUSH
5313: LD_VAR 0 2
5317: PLUS
5318: PUSH
5319: LD_EXP 52
5323: PUSH
5324: LD_VAR 0 2
5328: PLUS
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
5336: LD_ADDR_OWVAR 35
5340: PUSH
5341: LD_INT 10
5343: PUSH
5344: LD_VAR 0 2
5348: MUL
5349: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
5350: LD_ADDR_OWVAR 29
5354: PUSH
5355: LD_INT 12
5357: PUSH
5358: LD_INT 12
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: ST_TO_ADDR
// result := CreateHuman ;
5365: LD_ADDR_VAR 0 1
5369: PUSH
5370: CALL_OW 44
5374: ST_TO_ADDR
// end ;
5375: LD_VAR 0 1
5379: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
5380: LD_INT 0
5382: PPUSH
5383: PPUSH
5384: PPUSH
// if not ape then
5385: LD_VAR 0 1
5389: NOT
5390: IFFALSE 5394
// exit ;
5392: GO 5519
// side := GetSide ( ape ) ;
5394: LD_ADDR_VAR 0 3
5398: PUSH
5399: LD_VAR 0 1
5403: PPUSH
5404: CALL_OW 255
5408: ST_TO_ADDR
// if not side then
5409: LD_VAR 0 3
5413: NOT
5414: IFFALSE 5468
// begin for i = 1 to apemanPos do
5416: LD_ADDR_VAR 0 4
5420: PUSH
5421: DOUBLE
5422: LD_INT 1
5424: DEC
5425: ST_TO_ADDR
5426: LD_EXP 50
5430: PUSH
5431: FOR_TO
5432: IFFALSE 5466
// if ape in apemanPos [ i ] then
5434: LD_VAR 0 1
5438: PUSH
5439: LD_EXP 50
5443: PUSH
5444: LD_VAR 0 4
5448: ARRAY
5449: IN
5450: IFFALSE 5464
// begin side := i ;
5452: LD_ADDR_VAR 0 3
5456: PUSH
5457: LD_VAR 0 4
5461: ST_TO_ADDR
// break ;
5462: GO 5466
// end ;
5464: GO 5431
5466: POP
5467: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
5468: LD_ADDR_EXP 50
5472: PUSH
5473: LD_EXP 50
5477: PPUSH
5478: LD_VAR 0 3
5482: PPUSH
5483: LD_EXP 50
5487: PUSH
5488: LD_VAR 0 3
5492: ARRAY
5493: PUSH
5494: LD_VAR 0 1
5498: DIFF
5499: PPUSH
5500: CALL_OW 1
5504: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
5505: LD_ADDR_EXP 47
5509: PUSH
5510: LD_EXP 47
5514: PUSH
5515: LD_INT 1
5517: MINUS
5518: ST_TO_ADDR
// end ; end_of_file
5519: LD_VAR 0 2
5523: RET
// var shipment , tictac ; export function init_shipments ; begin
5524: LD_INT 0
5526: PPUSH
// shipment := Rand ( 0 , 3 ) ;
5527: LD_ADDR_LOC 4
5531: PUSH
5532: LD_INT 0
5534: PPUSH
5535: LD_INT 3
5537: PPUSH
5538: CALL_OW 12
5542: ST_TO_ADDR
// tictac := 0 ;
5543: LD_ADDR_LOC 5
5547: PUSH
5548: LD_INT 0
5550: ST_TO_ADDR
// end ;
5551: LD_VAR 0 1
5555: RET
// every 0 0$5 + 0 0$1.1 do var d ;
5556: GO 5558
5558: DISABLE
5559: LD_INT 0
5561: PPUSH
// begin case tick of 1 .. 1 1$0 :
5562: LD_OWVAR 1
5566: PUSH
5567: LD_INT 1
5569: DOUBLE
5570: GREATEREQUAL
5571: IFFALSE 5579
5573: LD_INT 2100
5575: DOUBLE
5576: LESSEQUAL
5577: IFTRUE 5581
5579: GO 5592
5581: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5582: LD_ADDR_VAR 0 1
5586: PUSH
5587: LD_INT 150
5589: ST_TO_ADDR
5590: GO 5775
5592: LD_INT 2100
5594: PUSH
5595: LD_INT 1
5597: PLUS
5598: DOUBLE
5599: GREATEREQUAL
5600: IFFALSE 5608
5602: LD_INT 10500
5604: DOUBLE
5605: LESSEQUAL
5606: IFTRUE 5610
5608: GO 5621
5610: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5611: LD_ADDR_VAR 0 1
5615: PUSH
5616: LD_INT 100
5618: ST_TO_ADDR
5619: GO 5775
5621: LD_INT 10500
5623: PUSH
5624: LD_INT 1
5626: PLUS
5627: DOUBLE
5628: GREATEREQUAL
5629: IFFALSE 5637
5631: LD_INT 21000
5633: DOUBLE
5634: LESSEQUAL
5635: IFTRUE 5639
5637: GO 5650
5639: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5640: LD_ADDR_VAR 0 1
5644: PUSH
5645: LD_INT 90
5647: ST_TO_ADDR
5648: GO 5775
5650: LD_INT 21000
5652: PUSH
5653: LD_INT 1
5655: PLUS
5656: DOUBLE
5657: GREATEREQUAL
5658: IFFALSE 5666
5660: LD_INT 42000
5662: DOUBLE
5663: LESSEQUAL
5664: IFTRUE 5668
5666: GO 5679
5668: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5669: LD_ADDR_VAR 0 1
5673: PUSH
5674: LD_INT 70
5676: ST_TO_ADDR
5677: GO 5775
5679: LD_INT 42000
5681: PUSH
5682: LD_INT 1
5684: PLUS
5685: DOUBLE
5686: GREATEREQUAL
5687: IFFALSE 5695
5689: LD_INT 63000
5691: DOUBLE
5692: LESSEQUAL
5693: IFTRUE 5697
5695: GO 5708
5697: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5698: LD_ADDR_VAR 0 1
5702: PUSH
5703: LD_INT 60
5705: ST_TO_ADDR
5706: GO 5775
5708: LD_INT 63000
5710: PUSH
5711: LD_INT 1
5713: PLUS
5714: DOUBLE
5715: GREATEREQUAL
5716: IFFALSE 5724
5718: LD_INT 105000
5720: DOUBLE
5721: LESSEQUAL
5722: IFTRUE 5726
5724: GO 5737
5726: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5727: LD_ADDR_VAR 0 1
5731: PUSH
5732: LD_INT 35
5734: ST_TO_ADDR
5735: GO 5775
5737: LD_INT 105000
5739: PUSH
5740: LD_INT 1
5742: PLUS
5743: DOUBLE
5744: GREATEREQUAL
5745: IFFALSE 5753
5747: LD_INT 630000
5749: DOUBLE
5750: LESSEQUAL
5751: IFTRUE 5755
5753: GO 5766
5755: POP
// d := 20 ; else
5756: LD_ADDR_VAR 0 1
5760: PUSH
5761: LD_INT 20
5763: ST_TO_ADDR
5764: GO 5775
5766: POP
// d := 0 ; end ;
5767: LD_ADDR_VAR 0 1
5771: PUSH
5772: LD_INT 0
5774: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5775: LD_INT 1
5777: PPUSH
5778: LD_INT 10000
5780: PPUSH
5781: CALL_OW 12
5785: PUSH
5786: LD_VAR 0 1
5790: PUSH
5791: LD_EXP 22
5795: MUL
5796: LESSEQUAL
5797: IFFALSE 5873
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5799: LD_INT 1
5801: PPUSH
5802: LD_INT 140
5804: PPUSH
5805: CALL_OW 12
5809: PPUSH
5810: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
5814: LD_ADDR_LOC 4
5818: PUSH
5819: LD_LOC 4
5823: PUSH
5824: LD_INT 1
5826: PLUS
5827: PUSH
5828: LD_INT 4
5830: MOD
5831: ST_TO_ADDR
// if GetResourceArea ( nw + shipment , mat_cans ) < 50 then
5832: LD_INT 12
5834: PUSH
5835: LD_LOC 4
5839: PLUS
5840: PPUSH
5841: LD_INT 1
5843: PPUSH
5844: CALL_OW 287
5848: PUSH
5849: LD_INT 50
5851: LESS
5852: IFFALSE 5873
// CreateCratesArea ( 5 , nw + shipment , true ) ;
5854: LD_INT 5
5856: PPUSH
5857: LD_INT 12
5859: PUSH
5860: LD_LOC 4
5864: PLUS
5865: PPUSH
5866: LD_INT 1
5868: PPUSH
5869: CALL_OW 55
// end ; enable ;
5873: ENABLE
// end ;
5874: PPOPN 1
5876: END
// every 0 0$10 trigger TICK > ( ( 3 3$0 * tictac ) + tictac * ( 1 1$30 - shipments_density * ( 0 0$2 ) ) ) do var i , amount ;
5877: LD_OWVAR 1
5881: PUSH
5882: LD_INT 6300
5884: PUSH
5885: LD_LOC 5
5889: MUL
5890: PUSH
5891: LD_LOC 5
5895: PUSH
5896: LD_INT 3150
5898: PUSH
5899: LD_EXP 22
5903: PUSH
5904: LD_INT 70
5906: MUL
5907: MINUS
5908: MUL
5909: PLUS
5910: GREATER
5911: IFFALSE 6014
5913: GO 5915
5915: DISABLE
5916: LD_INT 0
5918: PPUSH
5919: PPUSH
// begin tictac := tictac + 1 ;
5920: LD_ADDR_LOC 5
5924: PUSH
5925: LD_LOC 5
5929: PUSH
5930: LD_INT 1
5932: PLUS
5933: ST_TO_ADDR
// amount := Rand ( 3 , 5 ) ;
5934: LD_ADDR_VAR 0 2
5938: PUSH
5939: LD_INT 3
5941: PPUSH
5942: LD_INT 5
5944: PPUSH
5945: CALL_OW 12
5949: ST_TO_ADDR
// for i = 0 to 3 do
5950: LD_ADDR_VAR 0 1
5954: PUSH
5955: DOUBLE
5956: LD_INT 0
5958: DEC
5959: ST_TO_ADDR
5960: LD_INT 3
5962: PUSH
5963: FOR_TO
5964: IFFALSE 6011
// if GetResourceArea ( Base1 + i , mat_cans ) < 20 then
5966: LD_INT 1
5968: PUSH
5969: LD_VAR 0 1
5973: PLUS
5974: PPUSH
5975: LD_INT 1
5977: PPUSH
5978: CALL_OW 287
5982: PUSH
5983: LD_INT 20
5985: LESS
5986: IFFALSE 6009
// CreateCratesArea ( amount , Base1 + i , true ) ;
5988: LD_VAR 0 2
5992: PPUSH
5993: LD_INT 1
5995: PUSH
5996: LD_VAR 0 1
6000: PLUS
6001: PPUSH
6002: LD_INT 1
6004: PPUSH
6005: CALL_OW 55
6009: GO 5963
6011: POP
6012: POP
// enable ;
6013: ENABLE
// end ; end_of_file
6014: PPOPN 2
6016: END
// var strength ; function Update_Flags ; var un ; begin
6017: LD_INT 0
6019: PPUSH
6020: PPUSH
// for un in battle_flags_id do
6021: LD_ADDR_VAR 0 2
6025: PUSH
6026: LD_EXP 45
6030: PUSH
6031: FOR_IN
6032: IFFALSE 6107
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6034: LD_VAR 0 2
6038: PPUSH
6039: LD_INT 1
6041: PUSH
6042: LD_LOC 6
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: PUSH
6051: LD_INT 2
6053: PUSH
6054: LD_LOC 6
6058: PUSH
6059: LD_INT 2
6061: DIV
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: PUSH
6067: LD_INT 3
6069: PUSH
6070: LD_LOC 6
6074: PUSH
6075: LD_INT 5
6077: DIV
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PUSH
6083: LD_INT 20
6085: PUSH
6086: LD_LOC 6
6090: PUSH
6091: EMPTY
6092: LIST
6093: LIST
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: PPUSH
6101: CALL_OW 423
6105: GO 6031
6107: POP
6108: POP
// end ;
6109: LD_VAR 0 1
6113: RET
// every 0 0$0.1 do var un ;
6114: GO 6116
6116: DISABLE
6117: LD_INT 0
6119: PPUSH
// begin if not def_morale_flags then
6120: LD_EXP 9
6124: NOT
6125: IFFALSE 6129
// exit ;
6127: GO 6206
// if not morale_decreasing_time then
6129: LD_EXP 46
6133: NOT
6134: IFFALSE 6138
// exit ;
6136: GO 6206
// strength = 100 ;
6138: LD_ADDR_LOC 6
6142: PUSH
6143: LD_INT 100
6145: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
6146: LD_EXP 46
6150: PPUSH
6151: CALL_OW 67
// strength := strength - 1 ;
6155: LD_ADDR_LOC 6
6159: PUSH
6160: LD_LOC 6
6164: PUSH
6165: LD_INT 1
6167: MINUS
6168: ST_TO_ADDR
// Update_Flags ;
6169: CALL 6017 0 0
// until not strength ;
6173: LD_LOC 6
6177: NOT
6178: IFFALSE 6146
// for un in battle_flags_id do
6180: LD_ADDR_VAR 0 1
6184: PUSH
6185: LD_EXP 45
6189: PUSH
6190: FOR_IN
6191: IFFALSE 6204
// KillBattleFlag ( un ) ;
6193: LD_VAR 0 1
6197: PPUSH
6198: CALL_OW 419
6202: GO 6190
6204: POP
6205: POP
// end ; end_of_file
6206: PPOPN 1
6208: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
6209: LD_INT 0
6211: PPUSH
6212: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
6213: LD_ADDR_VAR 0 2
6217: PUSH
6218: LD_STRING #Multi1x1-Time
6220: PUSH
6221: LD_OWVAR 1
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: ST_TO_ADDR
// if WaitServerStrings then
6230: LD_EXP 55
6234: IFFALSE 6252
// AllStrings = AllStrings ^ WaitServerStrings ;
6236: LD_ADDR_VAR 0 2
6240: PUSH
6241: LD_VAR 0 2
6245: PUSH
6246: LD_EXP 55
6250: ADD
6251: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
6252: LD_INT 0
6254: PUSH
6255: LD_EXP 23
6259: PUSH
6260: LD_OWVAR 1
6264: MINUS
6265: LESSEQUAL
6266: IFFALSE 6297
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
6268: LD_ADDR_VAR 0 2
6272: PUSH
6273: LD_VAR 0 2
6277: PUSH
6278: LD_STRING #allowedsibbomb
6280: PUSH
6281: LD_EXP 23
6285: PUSH
6286: LD_OWVAR 1
6290: MINUS
6291: PUSH
6292: EMPTY
6293: LIST
6294: LIST
6295: ADD
6296: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
6297: LD_INT 0
6299: PUSH
6300: LD_EXP 58
6304: PUSH
6305: LD_OWVAR 1
6309: MINUS
6310: LESSEQUAL
6311: IFFALSE 6342
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
6313: LD_ADDR_VAR 0 2
6317: PUSH
6318: LD_VAR 0 2
6322: PUSH
6323: LD_STRING #builduptime
6325: PUSH
6326: LD_EXP 58
6330: PUSH
6331: LD_OWVAR 1
6335: MINUS
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: ADD
6341: ST_TO_ADDR
// if ( ExtraStrings ) then
6342: LD_EXP 54
6346: IFFALSE 6368
// AllStrings := AllStrings ^  ^ ExtraStrings ;
6348: LD_ADDR_VAR 0 2
6352: PUSH
6353: LD_VAR 0 2
6357: PUSH
6358: LD_STRING 
6360: ADD
6361: PUSH
6362: LD_EXP 54
6366: ADD
6367: ST_TO_ADDR
// Display_Strings := AllStrings ;
6368: LD_ADDR_OWVAR 47
6372: PUSH
6373: LD_VAR 0 2
6377: ST_TO_ADDR
// end ;
6378: LD_VAR 0 1
6382: RET
// every 0 0$1 do
6383: GO 6385
6385: DISABLE
// begin ShowTimer ;
6386: CALL 6209 0 0
// enable ;
6390: ENABLE
// end ; end_of_file
6391: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6392: LD_VAR 0 1
6396: PPUSH
6397: CALL_OW 266
6401: PUSH
6402: LD_INT 0
6404: PUSH
6405: LD_INT 1
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: IN
6412: IFFALSE 6437
// SetBName ( b , @ & GetSide ( b ) ) ;
6414: LD_VAR 0 1
6418: PPUSH
6419: LD_STRING @
6421: PUSH
6422: LD_VAR 0 1
6426: PPUSH
6427: CALL_OW 255
6431: STR
6432: PPUSH
6433: CALL_OW 500
// end ;
6437: PPOPN 2
6439: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6440: LD_VAR 0 1
6444: PPUSH
6445: CALL_OW 266
6449: PUSH
6450: LD_INT 0
6452: PUSH
6453: LD_INT 1
6455: PUSH
6456: EMPTY
6457: LIST
6458: LIST
6459: IN
6460: IFFALSE 6485
// SetBName ( b , @ & GetSide ( b ) ) ;
6462: LD_VAR 0 1
6466: PPUSH
6467: LD_STRING @
6469: PUSH
6470: LD_VAR 0 1
6474: PPUSH
6475: CALL_OW 255
6479: STR
6480: PPUSH
6481: CALL_OW 500
// end ;
6485: PPOPN 3
6487: END
// on VehicleConstructed ( veh , fac ) do var side ;
6488: LD_INT 0
6490: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6491: LD_VAR 0 1
6495: PPUSH
6496: CALL_OW 263
6500: PUSH
6501: LD_INT 5
6503: EQUAL
6504: IFFALSE 6646
// begin side := GetSide ( veh ) ;
6506: LD_ADDR_VAR 0 3
6510: PUSH
6511: LD_VAR 0 1
6515: PPUSH
6516: CALL_OW 255
6520: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6521: LD_ADDR_EXP 50
6525: PUSH
6526: LD_EXP 50
6530: PPUSH
6531: LD_VAR 0 3
6535: PPUSH
6536: LD_EXP 50
6540: PUSH
6541: LD_VAR 0 3
6545: ARRAY
6546: PPUSH
6547: LD_INT 52
6549: PUSH
6550: EMPTY
6551: LIST
6552: PPUSH
6553: CALL_OW 72
6557: PUSH
6558: LD_INT 22
6560: PUSH
6561: LD_VAR 0 3
6565: PUSH
6566: EMPTY
6567: LIST
6568: LIST
6569: PUSH
6570: LD_INT 2
6572: PUSH
6573: LD_INT 33
6575: PUSH
6576: LD_INT 5
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: PUSH
6583: LD_INT 25
6585: PUSH
6586: LD_INT 12
6588: PUSH
6589: EMPTY
6590: LIST
6591: LIST
6592: PUSH
6593: LD_INT 25
6595: PUSH
6596: LD_INT 15
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: PUSH
6603: LD_INT 25
6605: PUSH
6606: LD_INT 16
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: PUSH
6613: LD_INT 25
6615: PUSH
6616: LD_INT 17
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: PUSH
6623: EMPTY
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PPUSH
6635: CALL_OW 69
6639: UNION
6640: PPUSH
6641: CALL_OW 1
6645: ST_TO_ADDR
// end ; end ;
6646: PPOPN 3
6648: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6649: LD_INT 0
6651: PPUSH
6652: PPUSH
6653: PPUSH
6654: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6655: LD_VAR 0 1
6659: PPUSH
6660: CALL_OW 257
6664: PUSH
6665: LD_INT 12
6667: PUSH
6668: LD_INT 15
6670: PUSH
6671: LD_INT 17
6673: PUSH
6674: LD_INT 16
6676: PUSH
6677: EMPTY
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: IN
6683: PUSH
6684: LD_VAR 0 1
6688: PPUSH
6689: CALL_OW 263
6693: PUSH
6694: LD_INT 5
6696: EQUAL
6697: OR
6698: IFFALSE 6709
// ApeKilled ( j ) ;
6700: LD_VAR 0 1
6704: PPUSH
6705: CALL 5380 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6709: LD_VAR 0 1
6713: PPUSH
6714: CALL_OW 266
6718: PUSH
6719: LD_INT 0
6721: PUSH
6722: LD_INT 1
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: IN
6729: IFFALSE 6811
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6731: LD_ADDR_VAR 0 4
6735: PUSH
6736: LD_EXP 34
6740: PUSH
6741: LD_VAR 0 1
6745: PPUSH
6746: CALL_OW 255
6750: ARRAY
6751: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6752: LD_ADDR_VAR 0 2
6756: PUSH
6757: LD_EXP 41
6761: PUSH
6762: LD_VAR 0 4
6766: ARRAY
6767: PUSH
6768: LD_INT 1
6770: ARRAY
6771: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6772: LD_ADDR_VAR 0 3
6776: PUSH
6777: LD_EXP 41
6781: PUSH
6782: LD_VAR 0 4
6786: ARRAY
6787: PUSH
6788: LD_INT 2
6790: ARRAY
6791: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
6792: LD_VAR 0 2
6796: PPUSH
6797: LD_VAR 0 3
6801: PPUSH
6802: CALL_OW 420
6806: PPUSH
6807: CALL_OW 419
// end ; end ;
6811: PPOPN 5
6813: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
6814: LD_VAR 0 1
6818: PPUSH
6819: LD_VAR 0 2
6823: PPUSH
6824: LD_VAR 0 3
6828: PPUSH
6829: LD_OWVAR 2
6833: PPUSH
6834: CALL 6841 0 4
6838: PPOPN 3
6840: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
6841: LD_INT 0
6843: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
6844: LD_VAR 0 1
6848: PPUSH
6849: CALL_OW 255
6853: PUSH
6854: LD_VAR 0 4
6858: EQUAL
6859: IFFALSE 6878
// begin SetAchievement ( ACH_RAD ) ;
6861: LD_STRING ACH_RAD
6863: PPUSH
6864: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
6868: LD_STRING ACH_NL
6870: PPUSH
6871: LD_INT 1
6873: PPUSH
6874: CALL_OW 564
// end end ;
6878: LD_VAR 0 5
6882: RET
// export function SA_Win ( side ) ; begin
6883: LD_INT 0
6885: PPUSH
// case side of 1 :
6886: LD_VAR 0 1
6890: PUSH
6891: LD_INT 1
6893: DOUBLE
6894: EQUAL
6895: IFTRUE 6899
6897: GO 6912
6899: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
6900: LD_STRING ACH_AH
6902: PPUSH
6903: LD_INT 1
6905: PPUSH
6906: CALL_OW 564
6910: GO 7075
6912: LD_INT 2
6914: DOUBLE
6915: EQUAL
6916: IFTRUE 6920
6918: GO 6933
6920: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
6921: LD_STRING ACH_E
6923: PPUSH
6924: LD_INT 1
6926: PPUSH
6927: CALL_OW 564
6931: GO 7075
6933: LD_INT 3
6935: DOUBLE
6936: EQUAL
6937: IFTRUE 6941
6939: GO 6954
6941: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
6942: LD_STRING ACH_OOL
6944: PPUSH
6945: LD_INT 1
6947: PPUSH
6948: CALL_OW 564
6952: GO 7075
6954: LD_INT 1
6956: PUSH
6957: LD_INT 2
6959: PUSH
6960: EMPTY
6961: LIST
6962: LIST
6963: DOUBLE
6964: EQUAL
6965: IFTRUE 6969
6967: GO 6994
6969: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
6970: LD_STRING ACH_AH
6972: PPUSH
6973: LD_REAL  5.00000000000000E-0001
6976: PPUSH
6977: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
6981: LD_STRING ACH_E
6983: PPUSH
6984: LD_REAL  5.00000000000000E-0001
6987: PPUSH
6988: CALL_OW 564
// end ; [ 2 , 3 ] :
6992: GO 7075
6994: LD_INT 2
6996: PUSH
6997: LD_INT 3
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: DOUBLE
7004: EQUAL
7005: IFTRUE 7009
7007: GO 7034
7009: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
7010: LD_STRING ACH_OOL
7012: PPUSH
7013: LD_REAL  5.00000000000000E-0001
7016: PPUSH
7017: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7021: LD_STRING ACH_E
7023: PPUSH
7024: LD_REAL  5.00000000000000E-0001
7027: PPUSH
7028: CALL_OW 564
// end ; [ 3 , 1 ] :
7032: GO 7075
7034: LD_INT 3
7036: PUSH
7037: LD_INT 1
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: DOUBLE
7044: EQUAL
7045: IFTRUE 7049
7047: GO 7074
7049: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7050: LD_STRING ACH_AH
7052: PPUSH
7053: LD_REAL  5.00000000000000E-0001
7056: PPUSH
7057: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
7061: LD_STRING ACH_OOL
7063: PPUSH
7064: LD_REAL  5.00000000000000E-0001
7067: PPUSH
7068: CALL_OW 564
// end ; end ;
7072: GO 7075
7074: POP
// end ; end_of_file
7075: LD_VAR 0 2
7079: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
7080: LD_INT 0
7082: PPUSH
7083: PPUSH
// enable ( 98 ) ;
7084: LD_INT 98
7086: ENABLE_MARKED
// GameEnded = false ;
7087: LD_ADDR_LOC 8
7091: PUSH
7092: LD_INT 0
7094: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7095: LD_ADDR_LOC 7
7099: PUSH
7100: LD_INT 0
7102: PUSH
7103: LD_INT 0
7105: PUSH
7106: LD_INT 0
7108: PUSH
7109: LD_INT 0
7111: PUSH
7112: LD_INT 0
7114: PUSH
7115: LD_INT 0
7117: PUSH
7118: LD_INT 0
7120: PUSH
7121: LD_INT 0
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: LIST
7131: LIST
7132: LIST
7133: ST_TO_ADDR
// unfoged = false ;
7134: LD_ADDR_LOC 9
7138: PUSH
7139: LD_INT 0
7141: ST_TO_ADDR
// defeated_specs := [ ] ;
7142: LD_ADDR_LOC 10
7146: PUSH
7147: EMPTY
7148: ST_TO_ADDR
// for i = 1 to side_positions do
7149: LD_ADDR_VAR 0 2
7153: PUSH
7154: DOUBLE
7155: LD_INT 1
7157: DEC
7158: ST_TO_ADDR
7159: LD_EXP 34
7163: PUSH
7164: FOR_TO
7165: IFFALSE 7205
// if not side_positions [ i ] then
7167: LD_EXP 34
7171: PUSH
7172: LD_VAR 0 2
7176: ARRAY
7177: NOT
7178: IFFALSE 7203
// defeated = replace ( defeated , i , true ) ;
7180: LD_ADDR_LOC 7
7184: PUSH
7185: LD_LOC 7
7189: PPUSH
7190: LD_VAR 0 2
7194: PPUSH
7195: LD_INT 1
7197: PPUSH
7198: CALL_OW 1
7202: ST_TO_ADDR
7203: GO 7164
7205: POP
7206: POP
// end ;
7207: LD_VAR 0 1
7211: RET
// function CanWinLoose ; begin
7212: LD_INT 0
7214: PPUSH
// Result := true ;
7215: LD_ADDR_VAR 0 1
7219: PUSH
7220: LD_INT 1
7222: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
7223: CALL_OW 518
7227: PUSH
7228: CALL_OW 519
7232: PUSH
7233: LD_INT 0
7235: GREATER
7236: AND
7237: IFFALSE 7247
// Result := false ;
7239: LD_ADDR_VAR 0 1
7243: PUSH
7244: LD_INT 0
7246: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7247: CALL_OW 531
7251: PUSH
7252: CALL_OW 519
7256: PUSH
7257: LD_INT 1
7259: GREATER
7260: AND
7261: IFFALSE 7271
// Result := false ;
7263: LD_ADDR_VAR 0 1
7267: PUSH
7268: LD_INT 0
7270: ST_TO_ADDR
// end ;
7271: LD_VAR 0 1
7275: RET
// export function HasPower ( i ) ; var k , h ; begin
7276: LD_INT 0
7278: PPUSH
7279: PPUSH
7280: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
7281: LD_VAR 0 1
7285: PPUSH
7286: CALL_OW 108
7290: NOT
7291: PUSH
7292: LD_EXP 39
7296: PUSH
7297: LD_VAR 0 1
7301: ARRAY
7302: NOT
7303: AND
7304: PUSH
7305: LD_OWVAR 4
7309: AND
7310: IFFALSE 7322
// begin result = false ;
7312: LD_ADDR_VAR 0 2
7316: PUSH
7317: LD_INT 0
7319: ST_TO_ADDR
// end else
7320: GO 7617
// case def_win_rules of 0 :
7322: LD_EXP 27
7326: PUSH
7327: LD_INT 0
7329: DOUBLE
7330: EQUAL
7331: IFTRUE 7335
7333: GO 7498
7335: POP
// if def_people_respawning then
7336: LD_EXP 12
7340: IFFALSE 7431
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
7342: LD_ADDR_VAR 0 2
7346: PUSH
7347: LD_INT 22
7349: PUSH
7350: LD_VAR 0 1
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: PUSH
7359: LD_INT 2
7361: PUSH
7362: LD_INT 21
7364: PUSH
7365: LD_INT 1
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: PUSH
7372: LD_INT 33
7374: PUSH
7375: LD_INT 3
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: PUSH
7382: LD_INT 33
7384: PUSH
7385: LD_INT 5
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: PUSH
7392: LD_INT 30
7394: PUSH
7395: LD_INT 0
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PUSH
7402: LD_INT 30
7404: PUSH
7405: LD_INT 1
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: PPUSH
7424: CALL_OW 69
7428: ST_TO_ADDR
7429: GO 7496
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
7431: LD_ADDR_VAR 0 2
7435: PUSH
7436: LD_INT 22
7438: PUSH
7439: LD_VAR 0 1
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: PUSH
7448: LD_INT 2
7450: PUSH
7451: LD_INT 21
7453: PUSH
7454: LD_INT 1
7456: PUSH
7457: EMPTY
7458: LIST
7459: LIST
7460: PUSH
7461: LD_INT 33
7463: PUSH
7464: LD_INT 3
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: PUSH
7471: LD_INT 33
7473: PUSH
7474: LD_INT 5
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PPUSH
7491: CALL_OW 69
7495: ST_TO_ADDR
7496: GO 7617
7498: LD_INT 1
7500: DOUBLE
7501: EQUAL
7502: IFTRUE 7506
7504: GO 7545
7506: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
7507: LD_ADDR_VAR 0 2
7511: PUSH
7512: LD_INT 22
7514: PUSH
7515: LD_VAR 0 1
7519: PUSH
7520: EMPTY
7521: LIST
7522: LIST
7523: PUSH
7524: LD_INT 21
7526: PUSH
7527: LD_INT 1
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: PUSH
7534: EMPTY
7535: LIST
7536: LIST
7537: PPUSH
7538: CALL_OW 69
7542: ST_TO_ADDR
7543: GO 7617
7545: LD_INT 2
7547: DOUBLE
7548: EQUAL
7549: IFTRUE 7553
7551: GO 7616
7553: POP
// begin h = false ;
7554: LD_ADDR_VAR 0 4
7558: PUSH
7559: LD_INT 0
7561: ST_TO_ADDR
// for k in heroes [ i ] do
7562: LD_ADDR_VAR 0 3
7566: PUSH
7567: LD_EXP 43
7571: PUSH
7572: LD_VAR 0 1
7576: ARRAY
7577: PUSH
7578: FOR_IN
7579: IFFALSE 7602
// if IsLive ( k ) then
7581: LD_VAR 0 3
7585: PPUSH
7586: CALL_OW 300
7590: IFFALSE 7600
// h = true ;
7592: LD_ADDR_VAR 0 4
7596: PUSH
7597: LD_INT 1
7599: ST_TO_ADDR
7600: GO 7578
7602: POP
7603: POP
// Result := h ;
7604: LD_ADDR_VAR 0 2
7608: PUSH
7609: LD_VAR 0 4
7613: ST_TO_ADDR
// end ; end ;
7614: GO 7617
7616: POP
// end ;
7617: LD_VAR 0 2
7621: RET
// function AlliedSides ( i , j ) ; begin
7622: LD_INT 0
7624: PPUSH
// Result := false ;
7625: LD_ADDR_VAR 0 3
7629: PUSH
7630: LD_INT 0
7632: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
7633: LD_VAR 0 1
7637: PPUSH
7638: LD_VAR 0 2
7642: PPUSH
7643: CALL_OW 81
7647: PUSH
7648: LD_INT 1
7650: EQUAL
7651: PUSH
7652: LD_VAR 0 2
7656: PPUSH
7657: LD_VAR 0 1
7661: PPUSH
7662: CALL_OW 81
7666: PUSH
7667: LD_INT 1
7669: EQUAL
7670: AND
7671: PUSH
7672: LD_VAR 0 1
7676: PPUSH
7677: CALL_OW 83
7681: AND
7682: PUSH
7683: LD_VAR 0 2
7687: PPUSH
7688: CALL_OW 83
7692: AND
7693: IFFALSE 7703
// Result := true ;
7695: LD_ADDR_VAR 0 3
7699: PUSH
7700: LD_INT 1
7702: ST_TO_ADDR
// end ;
7703: LD_VAR 0 3
7707: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
7708: CALL 7212 0 0
7712: PUSH
7713: LD_LOC 8
7717: NOT
7718: AND
7719: IFFALSE 7735
7721: GO 7723
7723: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
7724: LD_ADDR_EXP 55
7728: PUSH
7729: LD_STRING #Player-Ended
7731: PUSH
7732: EMPTY
7733: LIST
7734: ST_TO_ADDR
7735: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
7736: CALL 7212 0 0
7740: PUSH
7741: LD_LOC 8
7745: AND
7746: IFFALSE 7755
7748: GO 7750
7750: DISABLE
// YouLostInMultiplayer ;
7751: CALL_OW 107
7755: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
7756: CALL 7212 0 0
7760: NOT
7761: PUSH
7762: CALL_OW 531
7766: NOT
7767: AND
7768: IFFALSE 7784
7770: GO 7772
7772: DISABLE
// WaitServerStrings = [ #server-wait ] ;
7773: LD_ADDR_EXP 55
7777: PUSH
7778: LD_STRING #server-wait
7780: PUSH
7781: EMPTY
7782: LIST
7783: ST_TO_ADDR
7784: END
// every 100 trigger IAmSpec do
7785: CALL_OW 531
7789: IFFALSE 7805
7791: GO 7793
7793: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
7794: LD_ADDR_EXP 55
7798: PUSH
7799: LD_STRING #Player-IAmSpec
7801: PUSH
7802: EMPTY
7803: LIST
7804: ST_TO_ADDR
7805: END
// every 100 trigger GameEnded and IAmSpec do
7806: LD_LOC 8
7810: PUSH
7811: CALL_OW 531
7815: AND
7816: IFFALSE 7825
7818: GO 7820
7820: DISABLE
// YouLostInMultiplayer ;
7821: CALL_OW 107
7825: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
7826: CALL 7212 0 0
7830: PUSH
7831: LD_LOC 8
7835: NOT
7836: AND
7837: IFFALSE 7853
7839: GO 7841
7841: DISABLE
// WaitServerStrings = [ $player-win ] ;
7842: LD_ADDR_EXP 55
7846: PUSH
7847: LD_STRING $player-win
7849: PUSH
7850: EMPTY
7851: LIST
7852: ST_TO_ADDR
7853: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
7854: CALL 7212 0 0
7858: PUSH
7859: LD_LOC 8
7863: AND
7864: IFFALSE 7888
7866: GO 7868
7868: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
7869: LD_EXP 35
7873: PUSH
7874: LD_OWVAR 7
7878: ARRAY
7879: PPUSH
7880: CALL 6883 0 1
// YouWinInMultiplayer ;
7884: CALL_OW 106
// end ;
7888: END
// every 100 trigger isEditor marked 401 do
7889: LD_OWVAR 84
7893: IFFALSE 7909
7895: GO 7897
7897: DISABLE
// Debug_Strings = [ You won ] ;
7898: LD_ADDR_OWVAR 48
7902: PUSH
7903: LD_STRING You won
7905: PUSH
7906: EMPTY
7907: LIST
7908: ST_TO_ADDR
7909: END
// every 100 trigger isEditor marked 400 do
7910: LD_OWVAR 84
7914: IFFALSE 7930
7916: GO 7918
7918: DISABLE
// Debug_Strings = [ You loss ] ;
7919: LD_ADDR_OWVAR 48
7923: PUSH
7924: LD_STRING You loss
7926: PUSH
7927: EMPTY
7928: LIST
7929: ST_TO_ADDR
7930: END
// every 100 marked 98 do var i , un ;
7931: GO 7933
7933: DISABLE
7934: LD_INT 0
7936: PPUSH
7937: PPUSH
// begin for i = 1 to side_positions do
7938: LD_ADDR_VAR 0 1
7942: PUSH
7943: DOUBLE
7944: LD_INT 1
7946: DEC
7947: ST_TO_ADDR
7948: LD_EXP 34
7952: PUSH
7953: FOR_TO
7954: IFFALSE 8041
// begin if side_positions [ i ] then
7956: LD_EXP 34
7960: PUSH
7961: LD_VAR 0 1
7965: ARRAY
7966: IFFALSE 8039
// if not HasPower ( i ) and not defeated [ i ] then
7968: LD_VAR 0 1
7972: PPUSH
7973: CALL 7276 0 1
7977: NOT
7978: PUSH
7979: LD_LOC 7
7983: PUSH
7984: LD_VAR 0 1
7988: ARRAY
7989: NOT
7990: AND
7991: IFFALSE 8039
// begin defeated = replace ( defeated , i , true ) ;
7993: LD_ADDR_LOC 7
7997: PUSH
7998: LD_LOC 7
8002: PPUSH
8003: LD_VAR 0 1
8007: PPUSH
8008: LD_INT 1
8010: PPUSH
8011: CALL_OW 1
8015: ST_TO_ADDR
// if i = mp_player_side then
8016: LD_VAR 0 1
8020: PUSH
8021: LD_OWVAR 7
8025: EQUAL
8026: IFFALSE 8039
// begin Multiplayer_Loose_Message ;
8028: CALL_OW 521
// SetPlayerSpectator ( ) ;
8032: CALL_OW 572
// enable ( 400 ) ;
8036: LD_INT 400
8038: ENABLE_MARKED
// end ; end ; end ;
8039: GO 7953
8041: POP
8042: POP
// DidGameEnd ;
8043: CALL 8058 0 0
// if not GameEnded then
8047: LD_LOC 8
8051: NOT
8052: IFFALSE 8055
// enable ;
8054: ENABLE
// end ;
8055: PPOPN 2
8057: END
// function DidGameEnd ; var i , k , enemy ; begin
8058: LD_INT 0
8060: PPUSH
8061: PPUSH
8062: PPUSH
8063: PPUSH
// enemy = [ ] ;
8064: LD_ADDR_VAR 0 4
8068: PUSH
8069: EMPTY
8070: ST_TO_ADDR
// for i = 1 to side_positions do
8071: LD_ADDR_VAR 0 2
8075: PUSH
8076: DOUBLE
8077: LD_INT 1
8079: DEC
8080: ST_TO_ADDR
8081: LD_EXP 34
8085: PUSH
8086: FOR_TO
8087: IFFALSE 8181
// if not defeated [ i ] then
8089: LD_LOC 7
8093: PUSH
8094: LD_VAR 0 2
8098: ARRAY
8099: NOT
8100: IFFALSE 8179
// for k = 1 to side_positions do
8102: LD_ADDR_VAR 0 3
8106: PUSH
8107: DOUBLE
8108: LD_INT 1
8110: DEC
8111: ST_TO_ADDR
8112: LD_EXP 34
8116: PUSH
8117: FOR_TO
8118: IFFALSE 8177
// if not defeated [ k ] then
8120: LD_LOC 7
8124: PUSH
8125: LD_VAR 0 3
8129: ARRAY
8130: NOT
8131: IFFALSE 8175
// if not AlliedSides ( i , k ) then
8133: LD_VAR 0 2
8137: PPUSH
8138: LD_VAR 0 3
8142: PPUSH
8143: CALL 7622 0 2
8147: NOT
8148: IFFALSE 8175
// enemy = enemy ^ [ i , k ] ;
8150: LD_ADDR_VAR 0 4
8154: PUSH
8155: LD_VAR 0 4
8159: PUSH
8160: LD_VAR 0 2
8164: PUSH
8165: LD_VAR 0 3
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: ADD
8174: ST_TO_ADDR
8175: GO 8117
8177: POP
8178: POP
8179: GO 8086
8181: POP
8182: POP
// if not enemy then
8183: LD_VAR 0 4
8187: NOT
8188: IFFALSE 8214
// begin GameEnded = true ;
8190: LD_ADDR_LOC 8
8194: PUSH
8195: LD_INT 1
8197: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
8198: LD_LOC 7
8202: PUSH
8203: LD_OWVAR 7
8207: ARRAY
8208: NOT
8209: IFFALSE 8214
// enable ( 401 ) ;
8211: LD_INT 401
8213: ENABLE_MARKED
// end ; end ;
8214: LD_VAR 0 1
8218: RET
// function unfog ; var k , friends ; begin
8219: LD_INT 0
8221: PPUSH
8222: PPUSH
8223: PPUSH
// for k = 1 to side_positions do
8224: LD_ADDR_VAR 0 2
8228: PUSH
8229: DOUBLE
8230: LD_INT 1
8232: DEC
8233: ST_TO_ADDR
8234: LD_EXP 34
8238: PUSH
8239: FOR_TO
8240: IFFALSE 8296
// if not defeated [ k ] then
8242: LD_LOC 7
8246: PUSH
8247: LD_VAR 0 2
8251: ARRAY
8252: NOT
8253: IFFALSE 8294
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
8255: LD_OWVAR 7
8259: PPUSH
8260: LD_VAR 0 2
8264: PPUSH
8265: CALL_OW 81
8269: PUSH
8270: LD_INT 1
8272: PUSH
8273: EMPTY
8274: LIST
8275: IN
8276: IFFALSE 8294
// friends = friends ^ k ;
8278: LD_ADDR_VAR 0 3
8282: PUSH
8283: LD_VAR 0 3
8287: PUSH
8288: LD_VAR 0 2
8292: ADD
8293: ST_TO_ADDR
8294: GO 8239
8296: POP
8297: POP
// if not friends then
8298: LD_VAR 0 3
8302: NOT
8303: IFFALSE 8317
// begin SetPlayerSpectator ( ) ;
8305: CALL_OW 572
// unfoged = true ;
8309: LD_ADDR_LOC 9
8313: PUSH
8314: LD_INT 1
8316: ST_TO_ADDR
// end ; end ;
8317: LD_VAR 0 1
8321: RET
// export function MakeGameEnd ; begin
8322: LD_INT 0
8324: PPUSH
// SetPlayerSpectator ( ) ;
8325: CALL_OW 572
// unfoged = true ;
8329: LD_ADDR_LOC 9
8333: PUSH
8334: LD_INT 1
8336: ST_TO_ADDR
// wait ( 0 0$5 ) ;
8337: LD_INT 175
8339: PPUSH
8340: CALL_OW 67
// GameEnded = true ;
8344: LD_ADDR_LOC 8
8348: PUSH
8349: LD_INT 1
8351: ST_TO_ADDR
// end ;
8352: LD_VAR 0 1
8356: RET
// export function GetGameEnded ; begin
8357: LD_INT 0
8359: PPUSH
// result = GameEnded ;
8360: LD_ADDR_VAR 0 1
8364: PUSH
8365: LD_LOC 8
8369: ST_TO_ADDR
// end ; end_of_file
8370: LD_VAR 0 1
8374: RET
// export function SetMpTechs ( ) ; var side , i ; begin
8375: LD_INT 0
8377: PPUSH
8378: PPUSH
8379: PPUSH
// for side = 1 to 8 do
8380: LD_ADDR_VAR 0 2
8384: PUSH
8385: DOUBLE
8386: LD_INT 1
8388: DEC
8389: ST_TO_ADDR
8390: LD_INT 8
8392: PUSH
8393: FOR_TO
8394: IFFALSE 8515
// begin for i = 1 to 72 do
8396: LD_ADDR_VAR 0 3
8400: PUSH
8401: DOUBLE
8402: LD_INT 1
8404: DEC
8405: ST_TO_ADDR
8406: LD_INT 72
8408: PUSH
8409: FOR_TO
8410: IFFALSE 8441
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
8412: LD_VAR 0 3
8416: PPUSH
8417: LD_VAR 0 2
8421: PPUSH
8422: LD_INT 0
8424: PPUSH
8425: LD_VAR 0 3
8429: PPUSH
8430: CALL_OW 565
8434: PPUSH
8435: CALL_OW 322
8439: GO 8409
8441: POP
8442: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
8443: LD_INT 73
8445: PPUSH
8446: LD_VAR 0 2
8450: PPUSH
8451: LD_INT 0
8453: PPUSH
8454: LD_INT 25
8456: PPUSH
8457: CALL_OW 565
8461: PPUSH
8462: CALL_OW 322
// for i = 0 to 40 do
8466: LD_ADDR_VAR 0 3
8470: PUSH
8471: DOUBLE
8472: LD_INT 0
8474: DEC
8475: ST_TO_ADDR
8476: LD_INT 40
8478: PUSH
8479: FOR_TO
8480: IFFALSE 8511
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
8482: LD_VAR 0 3
8486: PPUSH
8487: LD_VAR 0 2
8491: PPUSH
8492: LD_INT 1
8494: PPUSH
8495: LD_VAR 0 3
8499: PPUSH
8500: CALL_OW 565
8504: PPUSH
8505: CALL_OW 324
8509: GO 8479
8511: POP
8512: POP
// end ;
8513: GO 8393
8515: POP
8516: POP
// end ;
8517: LD_VAR 0 1
8521: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
8522: LD_INT 0
8524: PPUSH
8525: PPUSH
8526: PPUSH
// for side = 1 to 8 do
8527: LD_ADDR_VAR 0 3
8531: PUSH
8532: DOUBLE
8533: LD_INT 1
8535: DEC
8536: ST_TO_ADDR
8537: LD_INT 8
8539: PUSH
8540: FOR_TO
8541: IFFALSE 12537
// begin for i = 1 to 73 do
8543: LD_ADDR_VAR 0 4
8547: PUSH
8548: DOUBLE
8549: LD_INT 1
8551: DEC
8552: ST_TO_ADDR
8553: LD_INT 73
8555: PUSH
8556: FOR_TO
8557: IFFALSE 8578
// SetTech ( i , side , state_disabled ) ;
8559: LD_VAR 0 4
8563: PPUSH
8564: LD_VAR 0 3
8568: PPUSH
8569: LD_INT 0
8571: PPUSH
8572: CALL_OW 322
8576: GO 8556
8578: POP
8579: POP
// for i = 0 to 40 do
8580: LD_ADDR_VAR 0 4
8584: PUSH
8585: DOUBLE
8586: LD_INT 0
8588: DEC
8589: ST_TO_ADDR
8590: LD_INT 40
8592: PUSH
8593: FOR_TO
8594: IFFALSE 8615
// SetRestrict ( i , side , false ) ;
8596: LD_VAR 0 4
8600: PPUSH
8601: LD_VAR 0 3
8605: PPUSH
8606: LD_INT 0
8608: PPUSH
8609: CALL_OW 324
8613: GO 8593
8615: POP
8616: POP
// case level of 1 :
8617: LD_VAR 0 1
8621: PUSH
8622: LD_INT 1
8624: DOUBLE
8625: EQUAL
8626: IFTRUE 8630
8628: GO 8783
8630: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8631: LD_INT 35
8633: PPUSH
8634: LD_VAR 0 3
8638: PPUSH
8639: LD_INT 1
8641: PPUSH
8642: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8646: LD_INT 45
8648: PPUSH
8649: LD_VAR 0 3
8653: PPUSH
8654: LD_INT 1
8656: PPUSH
8657: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8661: LD_INT 46
8663: PPUSH
8664: LD_VAR 0 3
8668: PPUSH
8669: LD_INT 1
8671: PPUSH
8672: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8676: LD_INT 47
8678: PPUSH
8679: LD_VAR 0 3
8683: PPUSH
8684: LD_INT 1
8686: PPUSH
8687: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
8691: LD_INT 0
8693: PPUSH
8694: LD_VAR 0 3
8698: PPUSH
8699: LD_INT 1
8701: PPUSH
8702: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
8706: LD_INT 2
8708: PPUSH
8709: LD_VAR 0 3
8713: PPUSH
8714: LD_INT 1
8716: PPUSH
8717: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
8721: LD_INT 4
8723: PPUSH
8724: LD_VAR 0 3
8728: PPUSH
8729: LD_INT 1
8731: PPUSH
8732: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
8736: LD_INT 6
8738: PPUSH
8739: LD_VAR 0 3
8743: PPUSH
8744: LD_INT 1
8746: PPUSH
8747: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
8751: LD_INT 29
8753: PPUSH
8754: LD_VAR 0 3
8758: PPUSH
8759: LD_INT 1
8761: PPUSH
8762: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8766: LD_INT 31
8768: PPUSH
8769: LD_VAR 0 3
8773: PPUSH
8774: LD_INT 1
8776: PPUSH
8777: CALL_OW 324
// end ; 2 :
8781: GO 12535
8783: LD_INT 2
8785: DOUBLE
8786: EQUAL
8787: IFTRUE 8791
8789: GO 8989
8791: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8792: LD_INT 35
8794: PPUSH
8795: LD_VAR 0 3
8799: PPUSH
8800: LD_INT 1
8802: PPUSH
8803: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8807: LD_INT 45
8809: PPUSH
8810: LD_VAR 0 3
8814: PPUSH
8815: LD_INT 1
8817: PPUSH
8818: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8822: LD_INT 46
8824: PPUSH
8825: LD_VAR 0 3
8829: PPUSH
8830: LD_INT 1
8832: PPUSH
8833: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8837: LD_INT 47
8839: PPUSH
8840: LD_VAR 0 3
8844: PPUSH
8845: LD_INT 1
8847: PPUSH
8848: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
8852: LD_INT 1
8854: PPUSH
8855: LD_VAR 0 3
8859: PPUSH
8860: LD_INT 1
8862: PPUSH
8863: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
8867: LD_INT 2
8869: PPUSH
8870: LD_VAR 0 3
8874: PPUSH
8875: LD_INT 1
8877: PPUSH
8878: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
8882: LD_INT 11
8884: PPUSH
8885: LD_VAR 0 3
8889: PPUSH
8890: LD_INT 1
8892: PPUSH
8893: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
8897: LD_INT 0
8899: PPUSH
8900: LD_VAR 0 3
8904: PPUSH
8905: LD_INT 1
8907: PPUSH
8908: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
8912: LD_INT 2
8914: PPUSH
8915: LD_VAR 0 3
8919: PPUSH
8920: LD_INT 1
8922: PPUSH
8923: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
8927: LD_INT 4
8929: PPUSH
8930: LD_VAR 0 3
8934: PPUSH
8935: LD_INT 1
8937: PPUSH
8938: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
8942: LD_INT 6
8944: PPUSH
8945: LD_VAR 0 3
8949: PPUSH
8950: LD_INT 1
8952: PPUSH
8953: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
8957: LD_INT 29
8959: PPUSH
8960: LD_VAR 0 3
8964: PPUSH
8965: LD_INT 1
8967: PPUSH
8968: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8972: LD_INT 31
8974: PPUSH
8975: LD_VAR 0 3
8979: PPUSH
8980: LD_INT 1
8982: PPUSH
8983: CALL_OW 324
// end ; 3 :
8987: GO 12535
8989: LD_INT 3
8991: DOUBLE
8992: EQUAL
8993: IFTRUE 8997
8995: GO 9450
8997: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8998: LD_INT 35
9000: PPUSH
9001: LD_VAR 0 3
9005: PPUSH
9006: LD_INT 1
9008: PPUSH
9009: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9013: LD_INT 45
9015: PPUSH
9016: LD_VAR 0 3
9020: PPUSH
9021: LD_INT 1
9023: PPUSH
9024: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9028: LD_INT 46
9030: PPUSH
9031: LD_VAR 0 3
9035: PPUSH
9036: LD_INT 1
9038: PPUSH
9039: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9043: LD_INT 47
9045: PPUSH
9046: LD_VAR 0 3
9050: PPUSH
9051: LD_INT 1
9053: PPUSH
9054: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9058: LD_INT 1
9060: PPUSH
9061: LD_VAR 0 3
9065: PPUSH
9066: LD_INT 1
9068: PPUSH
9069: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9073: LD_INT 2
9075: PPUSH
9076: LD_VAR 0 3
9080: PPUSH
9081: LD_INT 1
9083: PPUSH
9084: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9088: LD_INT 11
9090: PPUSH
9091: LD_VAR 0 3
9095: PPUSH
9096: LD_INT 1
9098: PPUSH
9099: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9103: LD_INT 48
9105: PPUSH
9106: LD_VAR 0 3
9110: PPUSH
9111: LD_INT 1
9113: PPUSH
9114: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9118: LD_INT 69
9120: PPUSH
9121: LD_VAR 0 3
9125: PPUSH
9126: LD_INT 1
9128: PPUSH
9129: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9133: LD_INT 39
9135: PPUSH
9136: LD_VAR 0 3
9140: PPUSH
9141: LD_INT 1
9143: PPUSH
9144: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9148: LD_INT 43
9150: PPUSH
9151: LD_VAR 0 3
9155: PPUSH
9156: LD_INT 1
9158: PPUSH
9159: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9163: LD_INT 51
9165: PPUSH
9166: LD_VAR 0 3
9170: PPUSH
9171: LD_INT 1
9173: PPUSH
9174: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9178: LD_INT 6
9180: PPUSH
9181: LD_VAR 0 3
9185: PPUSH
9186: LD_INT 1
9188: PPUSH
9189: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9193: LD_INT 0
9195: PPUSH
9196: LD_VAR 0 3
9200: PPUSH
9201: LD_INT 1
9203: PPUSH
9204: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9208: LD_INT 2
9210: PPUSH
9211: LD_VAR 0 3
9215: PPUSH
9216: LD_INT 1
9218: PPUSH
9219: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
9223: LD_INT 3
9225: PPUSH
9226: LD_VAR 0 3
9230: PPUSH
9231: LD_INT 1
9233: PPUSH
9234: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9238: LD_INT 4
9240: PPUSH
9241: LD_VAR 0 3
9245: PPUSH
9246: LD_INT 1
9248: PPUSH
9249: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9253: LD_INT 6
9255: PPUSH
9256: LD_VAR 0 3
9260: PPUSH
9261: LD_INT 1
9263: PPUSH
9264: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
9268: LD_INT 7
9270: PPUSH
9271: LD_VAR 0 3
9275: PPUSH
9276: LD_INT 1
9278: PPUSH
9279: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
9283: LD_INT 8
9285: PPUSH
9286: LD_VAR 0 3
9290: PPUSH
9291: LD_INT 1
9293: PPUSH
9294: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
9298: LD_INT 10
9300: PPUSH
9301: LD_VAR 0 3
9305: PPUSH
9306: LD_INT 1
9308: PPUSH
9309: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
9313: LD_INT 15
9315: PPUSH
9316: LD_VAR 0 3
9320: PPUSH
9321: LD_INT 1
9323: PPUSH
9324: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
9328: LD_INT 16
9330: PPUSH
9331: LD_VAR 0 3
9335: PPUSH
9336: LD_INT 1
9338: PPUSH
9339: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
9343: LD_INT 17
9345: PPUSH
9346: LD_VAR 0 3
9350: PPUSH
9351: LD_INT 1
9353: PPUSH
9354: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
9358: LD_INT 20
9360: PPUSH
9361: LD_VAR 0 3
9365: PPUSH
9366: LD_INT 1
9368: PPUSH
9369: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
9373: LD_INT 26
9375: PPUSH
9376: LD_VAR 0 3
9380: PPUSH
9381: LD_INT 1
9383: PPUSH
9384: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
9388: LD_INT 27
9390: PPUSH
9391: LD_VAR 0 3
9395: PPUSH
9396: LD_INT 1
9398: PPUSH
9399: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9403: LD_INT 29
9405: PPUSH
9406: LD_VAR 0 3
9410: PPUSH
9411: LD_INT 1
9413: PPUSH
9414: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9418: LD_INT 31
9420: PPUSH
9421: LD_VAR 0 3
9425: PPUSH
9426: LD_INT 1
9428: PPUSH
9429: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
9433: LD_INT 32
9435: PPUSH
9436: LD_VAR 0 3
9440: PPUSH
9441: LD_INT 1
9443: PPUSH
9444: CALL_OW 324
// end ; 4 :
9448: GO 12535
9450: LD_INT 4
9452: DOUBLE
9453: EQUAL
9454: IFTRUE 9458
9456: GO 10406
9458: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9459: LD_INT 35
9461: PPUSH
9462: LD_VAR 0 3
9466: PPUSH
9467: LD_INT 1
9469: PPUSH
9470: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9474: LD_INT 45
9476: PPUSH
9477: LD_VAR 0 3
9481: PPUSH
9482: LD_INT 1
9484: PPUSH
9485: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9489: LD_INT 46
9491: PPUSH
9492: LD_VAR 0 3
9496: PPUSH
9497: LD_INT 1
9499: PPUSH
9500: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9504: LD_INT 47
9506: PPUSH
9507: LD_VAR 0 3
9511: PPUSH
9512: LD_INT 1
9514: PPUSH
9515: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9519: LD_INT 1
9521: PPUSH
9522: LD_VAR 0 3
9526: PPUSH
9527: LD_INT 1
9529: PPUSH
9530: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9534: LD_INT 2
9536: PPUSH
9537: LD_VAR 0 3
9541: PPUSH
9542: LD_INT 1
9544: PPUSH
9545: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9549: LD_INT 11
9551: PPUSH
9552: LD_VAR 0 3
9556: PPUSH
9557: LD_INT 1
9559: PPUSH
9560: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
9564: LD_INT 20
9566: PPUSH
9567: LD_VAR 0 3
9571: PPUSH
9572: LD_INT 1
9574: PPUSH
9575: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9579: LD_INT 48
9581: PPUSH
9582: LD_VAR 0 3
9586: PPUSH
9587: LD_INT 1
9589: PPUSH
9590: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
9594: LD_INT 49
9596: PPUSH
9597: LD_VAR 0 3
9601: PPUSH
9602: LD_INT 1
9604: PPUSH
9605: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9609: LD_INT 69
9611: PPUSH
9612: LD_VAR 0 3
9616: PPUSH
9617: LD_INT 1
9619: PPUSH
9620: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9624: LD_INT 39
9626: PPUSH
9627: LD_VAR 0 3
9631: PPUSH
9632: LD_INT 1
9634: PPUSH
9635: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
9639: LD_INT 34
9641: PPUSH
9642: LD_VAR 0 3
9646: PPUSH
9647: LD_INT 1
9649: PPUSH
9650: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
9654: LD_INT 42
9656: PPUSH
9657: LD_VAR 0 3
9661: PPUSH
9662: LD_INT 1
9664: PPUSH
9665: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
9669: LD_INT 44
9671: PPUSH
9672: LD_VAR 0 3
9676: PPUSH
9677: LD_INT 1
9679: PPUSH
9680: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
9684: LD_INT 41
9686: PPUSH
9687: LD_VAR 0 3
9691: PPUSH
9692: LD_INT 1
9694: PPUSH
9695: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9699: LD_INT 43
9701: PPUSH
9702: LD_VAR 0 3
9706: PPUSH
9707: LD_INT 1
9709: PPUSH
9710: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
9714: LD_INT 70
9716: PPUSH
9717: LD_VAR 0 3
9721: PPUSH
9722: LD_INT 1
9724: PPUSH
9725: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9729: LD_INT 51
9731: PPUSH
9732: LD_VAR 0 3
9736: PPUSH
9737: LD_INT 1
9739: PPUSH
9740: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
9744: LD_INT 52
9746: PPUSH
9747: LD_VAR 0 3
9751: PPUSH
9752: LD_INT 1
9754: PPUSH
9755: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9759: LD_INT 6
9761: PPUSH
9762: LD_VAR 0 3
9766: PPUSH
9767: LD_INT 1
9769: PPUSH
9770: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
9774: LD_INT 15
9776: PPUSH
9777: LD_VAR 0 3
9781: PPUSH
9782: LD_INT 1
9784: PPUSH
9785: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
9789: LD_INT 7
9791: PPUSH
9792: LD_VAR 0 3
9796: PPUSH
9797: LD_INT 1
9799: PPUSH
9800: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
9804: LD_INT 12
9806: PPUSH
9807: LD_VAR 0 3
9811: PPUSH
9812: LD_INT 1
9814: PPUSH
9815: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
9819: LD_INT 18
9821: PPUSH
9822: LD_VAR 0 3
9826: PPUSH
9827: LD_INT 1
9829: PPUSH
9830: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
9834: LD_INT 60
9836: PPUSH
9837: LD_VAR 0 3
9841: PPUSH
9842: LD_INT 1
9844: PPUSH
9845: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
9849: LD_INT 9
9851: PPUSH
9852: LD_VAR 0 3
9856: PPUSH
9857: LD_INT 1
9859: PPUSH
9860: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
9864: LD_INT 30
9866: PPUSH
9867: LD_VAR 0 3
9871: PPUSH
9872: LD_INT 1
9874: PPUSH
9875: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
9879: LD_INT 37
9881: PPUSH
9882: LD_VAR 0 3
9886: PPUSH
9887: LD_INT 1
9889: PPUSH
9890: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
9894: LD_INT 5
9896: PPUSH
9897: LD_VAR 0 3
9901: PPUSH
9902: LD_INT 1
9904: PPUSH
9905: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
9909: LD_INT 66
9911: PPUSH
9912: LD_VAR 0 3
9916: PPUSH
9917: LD_INT 1
9919: PPUSH
9920: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
9924: LD_INT 21
9926: PPUSH
9927: LD_VAR 0 3
9931: PPUSH
9932: LD_INT 1
9934: PPUSH
9935: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
9939: LD_INT 22
9941: PPUSH
9942: LD_VAR 0 3
9946: PPUSH
9947: LD_INT 1
9949: PPUSH
9950: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
9954: LD_INT 54
9956: PPUSH
9957: LD_VAR 0 3
9961: PPUSH
9962: LD_INT 1
9964: PPUSH
9965: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9969: LD_INT 0
9971: PPUSH
9972: LD_VAR 0 3
9976: PPUSH
9977: LD_INT 1
9979: PPUSH
9980: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
9984: LD_INT 1
9986: PPUSH
9987: LD_VAR 0 3
9991: PPUSH
9992: LD_INT 1
9994: PPUSH
9995: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9999: LD_INT 2
10001: PPUSH
10002: LD_VAR 0 3
10006: PPUSH
10007: LD_INT 1
10009: PPUSH
10010: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10014: LD_INT 3
10016: PPUSH
10017: LD_VAR 0 3
10021: PPUSH
10022: LD_INT 1
10024: PPUSH
10025: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10029: LD_INT 4
10031: PPUSH
10032: LD_VAR 0 3
10036: PPUSH
10037: LD_INT 1
10039: PPUSH
10040: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10044: LD_INT 5
10046: PPUSH
10047: LD_VAR 0 3
10051: PPUSH
10052: LD_INT 1
10054: PPUSH
10055: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10059: LD_INT 6
10061: PPUSH
10062: LD_VAR 0 3
10066: PPUSH
10067: LD_INT 1
10069: PPUSH
10070: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10074: LD_INT 7
10076: PPUSH
10077: LD_VAR 0 3
10081: PPUSH
10082: LD_INT 1
10084: PPUSH
10085: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10089: LD_INT 8
10091: PPUSH
10092: LD_VAR 0 3
10096: PPUSH
10097: LD_INT 1
10099: PPUSH
10100: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10104: LD_INT 10
10106: PPUSH
10107: LD_VAR 0 3
10111: PPUSH
10112: LD_INT 1
10114: PPUSH
10115: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
10119: LD_INT 11
10121: PPUSH
10122: LD_VAR 0 3
10126: PPUSH
10127: LD_INT 1
10129: PPUSH
10130: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
10134: LD_INT 12
10136: PPUSH
10137: LD_VAR 0 3
10141: PPUSH
10142: LD_INT 1
10144: PPUSH
10145: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
10149: LD_INT 13
10151: PPUSH
10152: LD_VAR 0 3
10156: PPUSH
10157: LD_INT 1
10159: PPUSH
10160: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
10164: LD_INT 14
10166: PPUSH
10167: LD_VAR 0 3
10171: PPUSH
10172: LD_INT 1
10174: PPUSH
10175: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10179: LD_INT 15
10181: PPUSH
10182: LD_VAR 0 3
10186: PPUSH
10187: LD_INT 1
10189: PPUSH
10190: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10194: LD_INT 16
10196: PPUSH
10197: LD_VAR 0 3
10201: PPUSH
10202: LD_INT 1
10204: PPUSH
10205: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10209: LD_INT 17
10211: PPUSH
10212: LD_VAR 0 3
10216: PPUSH
10217: LD_INT 1
10219: PPUSH
10220: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
10224: LD_INT 19
10226: PPUSH
10227: LD_VAR 0 3
10231: PPUSH
10232: LD_INT 1
10234: PPUSH
10235: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10239: LD_INT 20
10241: PPUSH
10242: LD_VAR 0 3
10246: PPUSH
10247: LD_INT 1
10249: PPUSH
10250: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
10254: LD_INT 21
10256: PPUSH
10257: LD_VAR 0 3
10261: PPUSH
10262: LD_INT 1
10264: PPUSH
10265: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
10269: LD_INT 23
10271: PPUSH
10272: LD_VAR 0 3
10276: PPUSH
10277: LD_INT 1
10279: PPUSH
10280: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10284: LD_INT 26
10286: PPUSH
10287: LD_VAR 0 3
10291: PPUSH
10292: LD_INT 1
10294: PPUSH
10295: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10299: LD_INT 27
10301: PPUSH
10302: LD_VAR 0 3
10306: PPUSH
10307: LD_INT 1
10309: PPUSH
10310: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
10314: LD_INT 28
10316: PPUSH
10317: LD_VAR 0 3
10321: PPUSH
10322: LD_INT 1
10324: PPUSH
10325: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10329: LD_INT 29
10331: PPUSH
10332: LD_VAR 0 3
10336: PPUSH
10337: LD_INT 1
10339: PPUSH
10340: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
10344: LD_INT 30
10346: PPUSH
10347: LD_VAR 0 3
10351: PPUSH
10352: LD_INT 1
10354: PPUSH
10355: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10359: LD_INT 31
10361: PPUSH
10362: LD_VAR 0 3
10366: PPUSH
10367: LD_INT 1
10369: PPUSH
10370: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10374: LD_INT 32
10376: PPUSH
10377: LD_VAR 0 3
10381: PPUSH
10382: LD_INT 1
10384: PPUSH
10385: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
10389: LD_INT 36
10391: PPUSH
10392: LD_VAR 0 3
10396: PPUSH
10397: LD_INT 1
10399: PPUSH
10400: CALL_OW 324
// end ; 5 :
10404: GO 12535
10406: LD_INT 5
10408: DOUBLE
10409: EQUAL
10410: IFTRUE 10414
10412: GO 11527
10414: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10415: LD_INT 35
10417: PPUSH
10418: LD_VAR 0 3
10422: PPUSH
10423: LD_INT 1
10425: PPUSH
10426: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10430: LD_INT 45
10432: PPUSH
10433: LD_VAR 0 3
10437: PPUSH
10438: LD_INT 1
10440: PPUSH
10441: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10445: LD_INT 46
10447: PPUSH
10448: LD_VAR 0 3
10452: PPUSH
10453: LD_INT 1
10455: PPUSH
10456: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10460: LD_INT 47
10462: PPUSH
10463: LD_VAR 0 3
10467: PPUSH
10468: LD_INT 1
10470: PPUSH
10471: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10475: LD_INT 1
10477: PPUSH
10478: LD_VAR 0 3
10482: PPUSH
10483: LD_INT 1
10485: PPUSH
10486: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10490: LD_INT 2
10492: PPUSH
10493: LD_VAR 0 3
10497: PPUSH
10498: LD_INT 1
10500: PPUSH
10501: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10505: LD_INT 11
10507: PPUSH
10508: LD_VAR 0 3
10512: PPUSH
10513: LD_INT 1
10515: PPUSH
10516: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10520: LD_INT 20
10522: PPUSH
10523: LD_VAR 0 3
10527: PPUSH
10528: LD_INT 1
10530: PPUSH
10531: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10535: LD_INT 48
10537: PPUSH
10538: LD_VAR 0 3
10542: PPUSH
10543: LD_INT 1
10545: PPUSH
10546: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10550: LD_INT 49
10552: PPUSH
10553: LD_VAR 0 3
10557: PPUSH
10558: LD_INT 1
10560: PPUSH
10561: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10565: LD_INT 69
10567: PPUSH
10568: LD_VAR 0 3
10572: PPUSH
10573: LD_INT 1
10575: PPUSH
10576: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10580: LD_INT 39
10582: PPUSH
10583: LD_VAR 0 3
10587: PPUSH
10588: LD_INT 1
10590: PPUSH
10591: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10595: LD_INT 34
10597: PPUSH
10598: LD_VAR 0 3
10602: PPUSH
10603: LD_INT 1
10605: PPUSH
10606: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10610: LD_INT 42
10612: PPUSH
10613: LD_VAR 0 3
10617: PPUSH
10618: LD_INT 1
10620: PPUSH
10621: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10625: LD_INT 44
10627: PPUSH
10628: LD_VAR 0 3
10632: PPUSH
10633: LD_INT 1
10635: PPUSH
10636: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10640: LD_INT 41
10642: PPUSH
10643: LD_VAR 0 3
10647: PPUSH
10648: LD_INT 1
10650: PPUSH
10651: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
10655: LD_INT 40
10657: PPUSH
10658: LD_VAR 0 3
10662: PPUSH
10663: LD_INT 1
10665: PPUSH
10666: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10670: LD_INT 43
10672: PPUSH
10673: LD_VAR 0 3
10677: PPUSH
10678: LD_INT 1
10680: PPUSH
10681: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10685: LD_INT 70
10687: PPUSH
10688: LD_VAR 0 3
10692: PPUSH
10693: LD_INT 1
10695: PPUSH
10696: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10700: LD_INT 51
10702: PPUSH
10703: LD_VAR 0 3
10707: PPUSH
10708: LD_INT 1
10710: PPUSH
10711: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10715: LD_INT 52
10717: PPUSH
10718: LD_VAR 0 3
10722: PPUSH
10723: LD_INT 1
10725: PPUSH
10726: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10730: LD_INT 6
10732: PPUSH
10733: LD_VAR 0 3
10737: PPUSH
10738: LD_INT 1
10740: PPUSH
10741: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10745: LD_INT 15
10747: PPUSH
10748: LD_VAR 0 3
10752: PPUSH
10753: LD_INT 1
10755: PPUSH
10756: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10760: LD_INT 7
10762: PPUSH
10763: LD_VAR 0 3
10767: PPUSH
10768: LD_INT 1
10770: PPUSH
10771: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10775: LD_INT 12
10777: PPUSH
10778: LD_VAR 0 3
10782: PPUSH
10783: LD_INT 1
10785: PPUSH
10786: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
10790: LD_INT 17
10792: PPUSH
10793: LD_VAR 0 3
10797: PPUSH
10798: LD_INT 1
10800: PPUSH
10801: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10805: LD_INT 18
10807: PPUSH
10808: LD_VAR 0 3
10812: PPUSH
10813: LD_INT 1
10815: PPUSH
10816: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10820: LD_INT 60
10822: PPUSH
10823: LD_VAR 0 3
10827: PPUSH
10828: LD_INT 1
10830: PPUSH
10831: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
10835: LD_INT 32
10837: PPUSH
10838: LD_VAR 0 3
10842: PPUSH
10843: LD_INT 1
10845: PPUSH
10846: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10850: LD_INT 9
10852: PPUSH
10853: LD_VAR 0 3
10857: PPUSH
10858: LD_INT 1
10860: PPUSH
10861: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
10865: LD_INT 57
10867: PPUSH
10868: LD_VAR 0 3
10872: PPUSH
10873: LD_INT 1
10875: PPUSH
10876: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10880: LD_INT 30
10882: PPUSH
10883: LD_VAR 0 3
10887: PPUSH
10888: LD_INT 1
10890: PPUSH
10891: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10895: LD_INT 37
10897: PPUSH
10898: LD_VAR 0 3
10902: PPUSH
10903: LD_INT 1
10905: PPUSH
10906: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
10910: LD_INT 63
10912: PPUSH
10913: LD_VAR 0 3
10917: PPUSH
10918: LD_INT 1
10920: PPUSH
10921: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
10925: LD_INT 3
10927: PPUSH
10928: LD_VAR 0 3
10932: PPUSH
10933: LD_INT 1
10935: PPUSH
10936: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
10940: LD_INT 4
10942: PPUSH
10943: LD_VAR 0 3
10947: PPUSH
10948: LD_INT 1
10950: PPUSH
10951: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10955: LD_INT 5
10957: PPUSH
10958: LD_VAR 0 3
10962: PPUSH
10963: LD_INT 1
10965: PPUSH
10966: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10970: LD_INT 66
10972: PPUSH
10973: LD_VAR 0 3
10977: PPUSH
10978: LD_INT 1
10980: PPUSH
10981: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10985: LD_INT 21
10987: PPUSH
10988: LD_VAR 0 3
10992: PPUSH
10993: LD_INT 1
10995: PPUSH
10996: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11000: LD_INT 22
11002: PPUSH
11003: LD_VAR 0 3
11007: PPUSH
11008: LD_INT 1
11010: PPUSH
11011: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11015: LD_INT 19
11017: PPUSH
11018: LD_VAR 0 3
11022: PPUSH
11023: LD_INT 1
11025: PPUSH
11026: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11030: LD_INT 54
11032: PPUSH
11033: LD_VAR 0 3
11037: PPUSH
11038: LD_INT 1
11040: PPUSH
11041: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
11045: LD_INT 55
11047: PPUSH
11048: LD_VAR 0 3
11052: PPUSH
11053: LD_INT 1
11055: PPUSH
11056: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11060: LD_INT 0
11062: PPUSH
11063: LD_VAR 0 3
11067: PPUSH
11068: LD_INT 1
11070: PPUSH
11071: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11075: LD_INT 1
11077: PPUSH
11078: LD_VAR 0 3
11082: PPUSH
11083: LD_INT 1
11085: PPUSH
11086: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11090: LD_INT 2
11092: PPUSH
11093: LD_VAR 0 3
11097: PPUSH
11098: LD_INT 1
11100: PPUSH
11101: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11105: LD_INT 3
11107: PPUSH
11108: LD_VAR 0 3
11112: PPUSH
11113: LD_INT 1
11115: PPUSH
11116: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11120: LD_INT 4
11122: PPUSH
11123: LD_VAR 0 3
11127: PPUSH
11128: LD_INT 1
11130: PPUSH
11131: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11135: LD_INT 5
11137: PPUSH
11138: LD_VAR 0 3
11142: PPUSH
11143: LD_INT 1
11145: PPUSH
11146: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11150: LD_INT 6
11152: PPUSH
11153: LD_VAR 0 3
11157: PPUSH
11158: LD_INT 1
11160: PPUSH
11161: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11165: LD_INT 7
11167: PPUSH
11168: LD_VAR 0 3
11172: PPUSH
11173: LD_INT 1
11175: PPUSH
11176: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11180: LD_INT 8
11182: PPUSH
11183: LD_VAR 0 3
11187: PPUSH
11188: LD_INT 1
11190: PPUSH
11191: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11195: LD_INT 10
11197: PPUSH
11198: LD_VAR 0 3
11202: PPUSH
11203: LD_INT 1
11205: PPUSH
11206: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11210: LD_INT 11
11212: PPUSH
11213: LD_VAR 0 3
11217: PPUSH
11218: LD_INT 1
11220: PPUSH
11221: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11225: LD_INT 12
11227: PPUSH
11228: LD_VAR 0 3
11232: PPUSH
11233: LD_INT 1
11235: PPUSH
11236: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11240: LD_INT 13
11242: PPUSH
11243: LD_VAR 0 3
11247: PPUSH
11248: LD_INT 1
11250: PPUSH
11251: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11255: LD_INT 14
11257: PPUSH
11258: LD_VAR 0 3
11262: PPUSH
11263: LD_INT 1
11265: PPUSH
11266: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11270: LD_INT 15
11272: PPUSH
11273: LD_VAR 0 3
11277: PPUSH
11278: LD_INT 1
11280: PPUSH
11281: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11285: LD_INT 16
11287: PPUSH
11288: LD_VAR 0 3
11292: PPUSH
11293: LD_INT 1
11295: PPUSH
11296: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11300: LD_INT 17
11302: PPUSH
11303: LD_VAR 0 3
11307: PPUSH
11308: LD_INT 1
11310: PPUSH
11311: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
11315: LD_INT 18
11317: PPUSH
11318: LD_VAR 0 3
11322: PPUSH
11323: LD_INT 1
11325: PPUSH
11326: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11330: LD_INT 19
11332: PPUSH
11333: LD_VAR 0 3
11337: PPUSH
11338: LD_INT 1
11340: PPUSH
11341: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11345: LD_INT 20
11347: PPUSH
11348: LD_VAR 0 3
11352: PPUSH
11353: LD_INT 1
11355: PPUSH
11356: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11360: LD_INT 21
11362: PPUSH
11363: LD_VAR 0 3
11367: PPUSH
11368: LD_INT 1
11370: PPUSH
11371: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11375: LD_INT 23
11377: PPUSH
11378: LD_VAR 0 3
11382: PPUSH
11383: LD_INT 1
11385: PPUSH
11386: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11390: LD_INT 26
11392: PPUSH
11393: LD_VAR 0 3
11397: PPUSH
11398: LD_INT 1
11400: PPUSH
11401: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11405: LD_INT 27
11407: PPUSH
11408: LD_VAR 0 3
11412: PPUSH
11413: LD_INT 1
11415: PPUSH
11416: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11420: LD_INT 28
11422: PPUSH
11423: LD_VAR 0 3
11427: PPUSH
11428: LD_INT 1
11430: PPUSH
11431: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11435: LD_INT 29
11437: PPUSH
11438: LD_VAR 0 3
11442: PPUSH
11443: LD_INT 1
11445: PPUSH
11446: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11450: LD_INT 30
11452: PPUSH
11453: LD_VAR 0 3
11457: PPUSH
11458: LD_INT 1
11460: PPUSH
11461: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11465: LD_INT 31
11467: PPUSH
11468: LD_VAR 0 3
11472: PPUSH
11473: LD_INT 1
11475: PPUSH
11476: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11480: LD_INT 32
11482: PPUSH
11483: LD_VAR 0 3
11487: PPUSH
11488: LD_INT 1
11490: PPUSH
11491: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
11495: LD_INT 33
11497: PPUSH
11498: LD_VAR 0 3
11502: PPUSH
11503: LD_INT 1
11505: PPUSH
11506: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11510: LD_INT 36
11512: PPUSH
11513: LD_VAR 0 3
11517: PPUSH
11518: LD_INT 1
11520: PPUSH
11521: CALL_OW 324
// end ; 6 :
11525: GO 12535
11527: LD_INT 6
11529: DOUBLE
11530: EQUAL
11531: IFTRUE 11535
11533: GO 12460
11535: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11536: LD_INT 35
11538: PPUSH
11539: LD_VAR 0 3
11543: PPUSH
11544: LD_INT 1
11546: PPUSH
11547: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11551: LD_INT 45
11553: PPUSH
11554: LD_VAR 0 3
11558: PPUSH
11559: LD_INT 1
11561: PPUSH
11562: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11566: LD_INT 46
11568: PPUSH
11569: LD_VAR 0 3
11573: PPUSH
11574: LD_INT 1
11576: PPUSH
11577: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11581: LD_INT 47
11583: PPUSH
11584: LD_VAR 0 3
11588: PPUSH
11589: LD_INT 1
11591: PPUSH
11592: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11596: LD_INT 1
11598: PPUSH
11599: LD_VAR 0 3
11603: PPUSH
11604: LD_INT 1
11606: PPUSH
11607: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11611: LD_INT 2
11613: PPUSH
11614: LD_VAR 0 3
11618: PPUSH
11619: LD_INT 1
11621: PPUSH
11622: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11626: LD_INT 11
11628: PPUSH
11629: LD_VAR 0 3
11633: PPUSH
11634: LD_INT 1
11636: PPUSH
11637: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11641: LD_INT 20
11643: PPUSH
11644: LD_VAR 0 3
11648: PPUSH
11649: LD_INT 1
11651: PPUSH
11652: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11656: LD_INT 48
11658: PPUSH
11659: LD_VAR 0 3
11663: PPUSH
11664: LD_INT 1
11666: PPUSH
11667: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11671: LD_INT 49
11673: PPUSH
11674: LD_VAR 0 3
11678: PPUSH
11679: LD_INT 1
11681: PPUSH
11682: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
11686: LD_INT 50
11688: PPUSH
11689: LD_VAR 0 3
11693: PPUSH
11694: LD_INT 1
11696: PPUSH
11697: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11701: LD_INT 69
11703: PPUSH
11704: LD_VAR 0 3
11708: PPUSH
11709: LD_INT 1
11711: PPUSH
11712: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11716: LD_INT 39
11718: PPUSH
11719: LD_VAR 0 3
11723: PPUSH
11724: LD_INT 1
11726: PPUSH
11727: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11731: LD_INT 34
11733: PPUSH
11734: LD_VAR 0 3
11738: PPUSH
11739: LD_INT 1
11741: PPUSH
11742: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11746: LD_INT 42
11748: PPUSH
11749: LD_VAR 0 3
11753: PPUSH
11754: LD_INT 1
11756: PPUSH
11757: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11761: LD_INT 44
11763: PPUSH
11764: LD_VAR 0 3
11768: PPUSH
11769: LD_INT 1
11771: PPUSH
11772: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11776: LD_INT 41
11778: PPUSH
11779: LD_VAR 0 3
11783: PPUSH
11784: LD_INT 1
11786: PPUSH
11787: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
11791: LD_INT 13
11793: PPUSH
11794: LD_VAR 0 3
11798: PPUSH
11799: LD_INT 1
11801: PPUSH
11802: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11806: LD_INT 40
11808: PPUSH
11809: LD_VAR 0 3
11813: PPUSH
11814: LD_INT 1
11816: PPUSH
11817: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11821: LD_INT 43
11823: PPUSH
11824: LD_VAR 0 3
11828: PPUSH
11829: LD_INT 1
11831: PPUSH
11832: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11836: LD_INT 70
11838: PPUSH
11839: LD_VAR 0 3
11843: PPUSH
11844: LD_INT 1
11846: PPUSH
11847: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
11851: LD_INT 23
11853: PPUSH
11854: LD_VAR 0 3
11858: PPUSH
11859: LD_INT 1
11861: PPUSH
11862: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11866: LD_INT 51
11868: PPUSH
11869: LD_VAR 0 3
11873: PPUSH
11874: LD_INT 1
11876: PPUSH
11877: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11881: LD_INT 52
11883: PPUSH
11884: LD_VAR 0 3
11888: PPUSH
11889: LD_INT 1
11891: PPUSH
11892: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11896: LD_INT 6
11898: PPUSH
11899: LD_VAR 0 3
11903: PPUSH
11904: LD_INT 1
11906: PPUSH
11907: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11911: LD_INT 15
11913: PPUSH
11914: LD_VAR 0 3
11918: PPUSH
11919: LD_INT 1
11921: PPUSH
11922: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11926: LD_INT 7
11928: PPUSH
11929: LD_VAR 0 3
11933: PPUSH
11934: LD_INT 1
11936: PPUSH
11937: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11941: LD_INT 12
11943: PPUSH
11944: LD_VAR 0 3
11948: PPUSH
11949: LD_INT 1
11951: PPUSH
11952: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
11956: LD_INT 10
11958: PPUSH
11959: LD_VAR 0 3
11963: PPUSH
11964: LD_INT 1
11966: PPUSH
11967: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11971: LD_INT 17
11973: PPUSH
11974: LD_VAR 0 3
11978: PPUSH
11979: LD_INT 1
11981: PPUSH
11982: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11986: LD_INT 18
11988: PPUSH
11989: LD_VAR 0 3
11993: PPUSH
11994: LD_INT 1
11996: PPUSH
11997: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12001: LD_INT 60
12003: PPUSH
12004: LD_VAR 0 3
12008: PPUSH
12009: LD_INT 1
12011: PPUSH
12012: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
12016: LD_INT 61
12018: PPUSH
12019: LD_VAR 0 3
12023: PPUSH
12024: LD_INT 1
12026: PPUSH
12027: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12031: LD_INT 32
12033: PPUSH
12034: LD_VAR 0 3
12038: PPUSH
12039: LD_INT 1
12041: PPUSH
12042: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
12046: LD_INT 27
12048: PPUSH
12049: LD_VAR 0 3
12053: PPUSH
12054: LD_INT 1
12056: PPUSH
12057: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
12061: LD_INT 36
12063: PPUSH
12064: LD_VAR 0 3
12068: PPUSH
12069: LD_INT 1
12071: PPUSH
12072: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
12076: LD_INT 33
12078: PPUSH
12079: LD_VAR 0 3
12083: PPUSH
12084: LD_INT 1
12086: PPUSH
12087: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12091: LD_INT 9
12093: PPUSH
12094: LD_VAR 0 3
12098: PPUSH
12099: LD_INT 1
12101: PPUSH
12102: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
12106: LD_INT 38
12108: PPUSH
12109: LD_VAR 0 3
12113: PPUSH
12114: LD_INT 1
12116: PPUSH
12117: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12121: LD_INT 57
12123: PPUSH
12124: LD_VAR 0 3
12128: PPUSH
12129: LD_INT 1
12131: PPUSH
12132: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
12136: LD_INT 58
12138: PPUSH
12139: LD_VAR 0 3
12143: PPUSH
12144: LD_INT 1
12146: PPUSH
12147: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
12151: LD_INT 28
12153: PPUSH
12154: LD_VAR 0 3
12158: PPUSH
12159: LD_INT 1
12161: PPUSH
12162: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
12166: LD_INT 29
12168: PPUSH
12169: LD_VAR 0 3
12173: PPUSH
12174: LD_INT 1
12176: PPUSH
12177: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12181: LD_INT 30
12183: PPUSH
12184: LD_VAR 0 3
12188: PPUSH
12189: LD_INT 1
12191: PPUSH
12192: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12196: LD_INT 37
12198: PPUSH
12199: LD_VAR 0 3
12203: PPUSH
12204: LD_INT 1
12206: PPUSH
12207: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12211: LD_INT 63
12213: PPUSH
12214: LD_VAR 0 3
12218: PPUSH
12219: LD_INT 1
12221: PPUSH
12222: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
12226: LD_INT 64
12228: PPUSH
12229: LD_VAR 0 3
12233: PPUSH
12234: LD_INT 1
12236: PPUSH
12237: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12241: LD_INT 3
12243: PPUSH
12244: LD_VAR 0 3
12248: PPUSH
12249: LD_INT 1
12251: PPUSH
12252: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12256: LD_INT 4
12258: PPUSH
12259: LD_VAR 0 3
12263: PPUSH
12264: LD_INT 1
12266: PPUSH
12267: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12271: LD_INT 5
12273: PPUSH
12274: LD_VAR 0 3
12278: PPUSH
12279: LD_INT 1
12281: PPUSH
12282: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
12286: LD_INT 8
12288: PPUSH
12289: LD_VAR 0 3
12293: PPUSH
12294: LD_INT 1
12296: PPUSH
12297: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12301: LD_INT 66
12303: PPUSH
12304: LD_VAR 0 3
12308: PPUSH
12309: LD_INT 1
12311: PPUSH
12312: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
12316: LD_INT 67
12318: PPUSH
12319: LD_VAR 0 3
12323: PPUSH
12324: LD_INT 1
12326: PPUSH
12327: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12331: LD_INT 21
12333: PPUSH
12334: LD_VAR 0 3
12338: PPUSH
12339: LD_INT 1
12341: PPUSH
12342: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12346: LD_INT 22
12348: PPUSH
12349: LD_VAR 0 3
12353: PPUSH
12354: LD_INT 1
12356: PPUSH
12357: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12361: LD_INT 19
12363: PPUSH
12364: LD_VAR 0 3
12368: PPUSH
12369: LD_INT 1
12371: PPUSH
12372: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
12376: LD_INT 26
12378: PPUSH
12379: LD_VAR 0 3
12383: PPUSH
12384: LD_INT 1
12386: PPUSH
12387: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12391: LD_INT 54
12393: PPUSH
12394: LD_VAR 0 3
12398: PPUSH
12399: LD_INT 1
12401: PPUSH
12402: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12406: LD_INT 55
12408: PPUSH
12409: LD_VAR 0 3
12413: PPUSH
12414: LD_INT 1
12416: PPUSH
12417: CALL_OW 322
// for i = 0 to 39 do
12421: LD_ADDR_VAR 0 4
12425: PUSH
12426: DOUBLE
12427: LD_INT 0
12429: DEC
12430: ST_TO_ADDR
12431: LD_INT 39
12433: PUSH
12434: FOR_TO
12435: IFFALSE 12456
// SetRestrict ( i , side , true ) ;
12437: LD_VAR 0 4
12441: PPUSH
12442: LD_VAR 0 3
12446: PPUSH
12447: LD_INT 1
12449: PPUSH
12450: CALL_OW 324
12454: GO 12434
12456: POP
12457: POP
// end ; else
12458: GO 12535
12460: POP
// begin for i = 1 to 73 do
12461: LD_ADDR_VAR 0 4
12465: PUSH
12466: DOUBLE
12467: LD_INT 1
12469: DEC
12470: ST_TO_ADDR
12471: LD_INT 73
12473: PUSH
12474: FOR_TO
12475: IFFALSE 12496
// SetTech ( i , side , state_enabled ) ;
12477: LD_VAR 0 4
12481: PPUSH
12482: LD_VAR 0 3
12486: PPUSH
12487: LD_INT 1
12489: PPUSH
12490: CALL_OW 322
12494: GO 12474
12496: POP
12497: POP
// for i = 0 to 39 do
12498: LD_ADDR_VAR 0 4
12502: PUSH
12503: DOUBLE
12504: LD_INT 0
12506: DEC
12507: ST_TO_ADDR
12508: LD_INT 39
12510: PUSH
12511: FOR_TO
12512: IFFALSE 12533
// SetRestrict ( i , side , true ) ;
12514: LD_VAR 0 4
12518: PPUSH
12519: LD_VAR 0 3
12523: PPUSH
12524: LD_INT 1
12526: PPUSH
12527: CALL_OW 324
12531: GO 12511
12533: POP
12534: POP
// end ; end ; end ;
12535: GO 8540
12537: POP
12538: POP
// end ; end_of_file
12539: LD_VAR 0 2
12543: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
12544: LD_INT 0
12546: PPUSH
12547: PPUSH
12548: PPUSH
12549: PPUSH
12550: PPUSH
12551: PPUSH
12552: PPUSH
12553: PPUSH
12554: PPUSH
// for i := 1 to 8 do
12555: LD_ADDR_VAR 0 2
12559: PUSH
12560: DOUBLE
12561: LD_INT 1
12563: DEC
12564: ST_TO_ADDR
12565: LD_INT 8
12567: PUSH
12568: FOR_TO
12569: IFFALSE 12953
// begin if Side_Positions [ i ] then
12571: LD_EXP 34
12575: PUSH
12576: LD_VAR 0 2
12580: ARRAY
12581: IFFALSE 12951
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
12583: LD_ADDR_VAR 0 7
12587: PUSH
12588: LD_INT 22
12590: PUSH
12591: LD_VAR 0 2
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: PUSH
12600: LD_INT 21
12602: PUSH
12603: LD_INT 1
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: PUSH
12610: EMPTY
12611: LIST
12612: LIST
12613: PPUSH
12614: CALL_OW 69
12618: PUSH
12619: LD_INT 0
12621: PLUS
12622: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12623: LD_ADDR_VAR 0 9
12627: PUSH
12628: LD_INT 22
12630: PUSH
12631: LD_VAR 0 2
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PUSH
12640: LD_INT 2
12642: PUSH
12643: LD_INT 30
12645: PUSH
12646: LD_INT 0
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: PUSH
12653: LD_INT 30
12655: PUSH
12656: LD_INT 1
12658: PUSH
12659: EMPTY
12660: LIST
12661: LIST
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: LIST
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: PPUSH
12672: CALL_OW 69
12676: ST_TO_ADDR
// crates := 0 ;
12677: LD_ADDR_VAR 0 4
12681: PUSH
12682: LD_INT 0
12684: ST_TO_ADDR
// oil := 0 ;
12685: LD_ADDR_VAR 0 5
12689: PUSH
12690: LD_INT 0
12692: ST_TO_ADDR
// sib := 0 ;
12693: LD_ADDR_VAR 0 6
12697: PUSH
12698: LD_INT 0
12700: ST_TO_ADDR
// if bases then
12701: LD_VAR 0 9
12705: IFFALSE 12811
// begin for j in bases do
12707: LD_ADDR_VAR 0 3
12711: PUSH
12712: LD_VAR 0 9
12716: PUSH
12717: FOR_IN
12718: IFFALSE 12809
// begin base := GetBase ( j ) ;
12720: LD_ADDR_VAR 0 8
12724: PUSH
12725: LD_VAR 0 3
12729: PPUSH
12730: CALL_OW 274
12734: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
12735: LD_ADDR_VAR 0 4
12739: PUSH
12740: LD_VAR 0 4
12744: PUSH
12745: LD_VAR 0 8
12749: PPUSH
12750: LD_INT 1
12752: PPUSH
12753: CALL_OW 275
12757: PLUS
12758: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
12759: LD_ADDR_VAR 0 5
12763: PUSH
12764: LD_VAR 0 5
12768: PUSH
12769: LD_VAR 0 8
12773: PPUSH
12774: LD_INT 2
12776: PPUSH
12777: CALL_OW 275
12781: PLUS
12782: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
12783: LD_ADDR_VAR 0 6
12787: PUSH
12788: LD_VAR 0 6
12792: PUSH
12793: LD_VAR 0 8
12797: PPUSH
12798: LD_INT 3
12800: PPUSH
12801: CALL_OW 275
12805: PLUS
12806: ST_TO_ADDR
// end ;
12807: GO 12717
12809: POP
12810: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
12811: LD_STRING setSpecText(
12813: PUSH
12814: LD_VAR 0 2
12818: STR
12819: PUSH
12820: LD_STRING ,
12822: STR
12823: PUSH
12824: LD_INT 2
12826: STR
12827: PUSH
12828: LD_STRING ,
12830: STR
12831: PUSH
12832: LD_VAR 0 4
12836: STR
12837: PUSH
12838: LD_STRING )
12840: STR
12841: PPUSH
12842: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
12846: LD_STRING setSpecText(
12848: PUSH
12849: LD_VAR 0 2
12853: STR
12854: PUSH
12855: LD_STRING ,
12857: STR
12858: PUSH
12859: LD_INT 3
12861: STR
12862: PUSH
12863: LD_STRING ,
12865: STR
12866: PUSH
12867: LD_VAR 0 5
12871: STR
12872: PUSH
12873: LD_STRING )
12875: STR
12876: PPUSH
12877: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
12881: LD_STRING setSpecText(
12883: PUSH
12884: LD_VAR 0 2
12888: STR
12889: PUSH
12890: LD_STRING ,
12892: STR
12893: PUSH
12894: LD_INT 4
12896: STR
12897: PUSH
12898: LD_STRING ,
12900: STR
12901: PUSH
12902: LD_VAR 0 6
12906: STR
12907: PUSH
12908: LD_STRING )
12910: STR
12911: PPUSH
12912: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
12916: LD_STRING setSpecText(
12918: PUSH
12919: LD_VAR 0 2
12923: STR
12924: PUSH
12925: LD_STRING ,
12927: STR
12928: PUSH
12929: LD_INT 5
12931: STR
12932: PUSH
12933: LD_STRING ,
12935: STR
12936: PUSH
12937: LD_VAR 0 7
12941: STR
12942: PUSH
12943: LD_STRING )
12945: STR
12946: PPUSH
12947: CALL_OW 559
// end ; end ;
12951: GO 12568
12953: POP
12954: POP
// end ;
12955: LD_VAR 0 1
12959: RET
// every 0 0$1 do
12960: GO 12962
12962: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
12963: LD_STRING setSpecLogoNumber(
12965: PUSH
12966: LD_INT 2
12968: STR
12969: PUSH
12970: LD_STRING ,
12972: STR
12973: PUSH
12974: LD_INT 1
12976: STR
12977: PUSH
12978: LD_STRING )
12980: STR
12981: PPUSH
12982: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
12986: LD_STRING setSpecLogoNumber(
12988: PUSH
12989: LD_INT 3
12991: STR
12992: PUSH
12993: LD_STRING ,
12995: STR
12996: PUSH
12997: LD_INT 2
12999: STR
13000: PUSH
13001: LD_STRING )
13003: STR
13004: PPUSH
13005: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
13009: LD_STRING setSpecLogoNumber(
13011: PUSH
13012: LD_INT 4
13014: STR
13015: PUSH
13016: LD_STRING ,
13018: STR
13019: PUSH
13020: LD_INT 3
13022: STR
13023: PUSH
13024: LD_STRING )
13026: STR
13027: PPUSH
13028: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
13032: LD_STRING setSpecLogoNumber(
13034: PUSH
13035: LD_INT 5
13037: STR
13038: PUSH
13039: LD_STRING ,
13041: STR
13042: PUSH
13043: LD_INT 4
13045: STR
13046: PUSH
13047: LD_STRING )
13049: STR
13050: PPUSH
13051: CALL_OW 559
// end ;
13055: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
13056: LD_INT 2
13058: PUSH
13059: LD_INT 30
13061: PUSH
13062: LD_INT 0
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: PUSH
13069: LD_INT 30
13071: PUSH
13072: LD_INT 1
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: LIST
13083: PPUSH
13084: CALL_OW 69
13088: IFFALSE 13098
13090: GO 13092
13092: DISABLE
// begin enable ;
13093: ENABLE
// UpdateSpectatorBar ;
13094: CALL 12544 0 0
// end ; end_of_file
13098: END
// var respawn , inqueue ; export function init_respawning ; begin
13099: LD_INT 0
13101: PPUSH
// respawn := Rand ( 1 , 8 ) ;
13102: LD_ADDR_LOC 11
13106: PUSH
13107: LD_INT 1
13109: PPUSH
13110: LD_INT 8
13112: PPUSH
13113: CALL_OW 12
13117: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13118: LD_ADDR_LOC 12
13122: PUSH
13123: LD_INT 0
13125: PUSH
13126: LD_INT 0
13128: PUSH
13129: LD_INT 0
13131: PUSH
13132: LD_INT 0
13134: PUSH
13135: LD_INT 0
13137: PUSH
13138: LD_INT 0
13140: PUSH
13141: LD_INT 0
13143: PUSH
13144: LD_INT 0
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: ST_TO_ADDR
// end ;
13157: LD_VAR 0 1
13161: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
13162: GO 13164
13164: DISABLE
13165: LD_INT 0
13167: PPUSH
13168: PPUSH
13169: PPUSH
// begin if respawning_time_max = 0 then
13170: LD_EXP 26
13174: PUSH
13175: LD_INT 0
13177: EQUAL
13178: IFFALSE 13182
// exit ;
13180: GO 13590
// if respawn = 8 then
13182: LD_LOC 11
13186: PUSH
13187: LD_INT 8
13189: EQUAL
13190: IFFALSE 13202
// respawn := 1 else
13192: LD_ADDR_LOC 11
13196: PUSH
13197: LD_INT 1
13199: ST_TO_ADDR
13200: GO 13216
// respawn := respawn + 1 ;
13202: LD_ADDR_LOC 11
13206: PUSH
13207: LD_LOC 11
13211: PUSH
13212: LD_INT 1
13214: PLUS
13215: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
13216: LD_EXP 34
13220: PUSH
13221: LD_LOC 11
13225: ARRAY
13226: PUSH
13227: LD_LOC 12
13231: PUSH
13232: LD_LOC 11
13236: ARRAY
13237: NOT
13238: AND
13239: IFFALSE 13589
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
13241: LD_ADDR_VAR 0 1
13245: PUSH
13246: LD_INT 21
13248: PUSH
13249: LD_INT 1
13251: PUSH
13252: EMPTY
13253: LIST
13254: LIST
13255: PUSH
13256: LD_INT 22
13258: PUSH
13259: LD_LOC 11
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 3
13270: PUSH
13271: LD_INT 23
13273: PUSH
13274: LD_INT 0
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: PPUSH
13287: CALL_OW 69
13291: ST_TO_ADDR
// if n < number_of_people then
13292: LD_VAR 0 1
13296: PUSH
13297: LD_EXP 17
13301: LESS
13302: IFFALSE 13586
// begin aktresp := respawn ;
13304: LD_ADDR_VAR 0 3
13308: PUSH
13309: LD_LOC 11
13313: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
13314: LD_ADDR_LOC 12
13318: PUSH
13319: LD_LOC 12
13323: PPUSH
13324: LD_VAR 0 3
13328: PPUSH
13329: LD_INT 1
13331: PPUSH
13332: CALL_OW 1
13336: ST_TO_ADDR
// enable ;
13337: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
13338: LD_EXP 25
13342: PPUSH
13343: LD_EXP 26
13347: PPUSH
13348: CALL_OW 12
13352: PPUSH
13353: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
13357: LD_ADDR_LOC 12
13361: PUSH
13362: LD_LOC 12
13366: PPUSH
13367: LD_VAR 0 3
13371: PPUSH
13372: LD_INT 0
13374: PPUSH
13375: CALL_OW 1
13379: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
13380: LD_ADDR_VAR 0 2
13384: PUSH
13385: LD_INT 21
13387: PUSH
13388: LD_INT 3
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 2
13397: PUSH
13398: LD_INT 30
13400: PUSH
13401: LD_INT 0
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: PUSH
13408: LD_INT 30
13410: PUSH
13411: LD_INT 1
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: LIST
13422: PUSH
13423: LD_INT 50
13425: PUSH
13426: EMPTY
13427: LIST
13428: PUSH
13429: LD_INT 22
13431: PUSH
13432: LD_VAR 0 3
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: PUSH
13441: EMPTY
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: PPUSH
13447: CALL_OW 69
13451: ST_TO_ADDR
// if dep = 0 then
13452: LD_VAR 0 2
13456: PUSH
13457: LD_INT 0
13459: EQUAL
13460: IFFALSE 13464
// exit ;
13462: GO 13590
// hc_name :=  ;
13464: LD_ADDR_OWVAR 26
13468: PUSH
13469: LD_STRING 
13471: ST_TO_ADDR
// hc_importance := 0 ;
13472: LD_ADDR_OWVAR 32
13476: PUSH
13477: LD_INT 0
13479: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
13480: LD_INT 0
13482: PPUSH
13483: LD_INT 0
13485: PPUSH
13486: LD_EXP 18
13490: PUSH
13491: LD_INT 2
13493: DIV
13494: PPUSH
13495: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
13499: LD_ADDR_OWVAR 21
13503: PUSH
13504: LD_EXP 35
13508: PUSH
13509: LD_VAR 0 3
13513: ARRAY
13514: ST_TO_ADDR
// uc_side := aktresp ;
13515: LD_ADDR_OWVAR 20
13519: PUSH
13520: LD_VAR 0 3
13524: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
13525: LD_ADDR_VAR 0 2
13529: PUSH
13530: LD_VAR 0 2
13534: PUSH
13535: LD_INT 1
13537: PPUSH
13538: LD_VAR 0 2
13542: PPUSH
13543: CALL_OW 12
13547: ARRAY
13548: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
13549: CALL_OW 44
13553: PPUSH
13554: LD_VAR 0 2
13558: PPUSH
13559: CALL_OW 250
13563: PPUSH
13564: LD_VAR 0 2
13568: PPUSH
13569: CALL_OW 251
13573: PPUSH
13574: LD_INT 7
13576: PPUSH
13577: LD_INT 1
13579: PPUSH
13580: CALL_OW 50
// end else
13584: GO 13587
// enable ;
13586: ENABLE
// end else
13587: GO 13590
// enable ;
13589: ENABLE
// end ; end_of_file
13590: PPOPN 3
13592: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
13593: LD_INT 0
13595: PPUSH
13596: PPUSH
13597: PPUSH
// BuildUpTime_Delay = 0 ;
13598: LD_ADDR_EXP 58
13602: PUSH
13603: LD_INT 0
13605: ST_TO_ADDR
// if not def_builduptime then
13606: LD_EXP 14
13610: NOT
13611: IFFALSE 13615
// exit ;
13613: GO 13798
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
13615: LD_ADDR_EXP 58
13619: PUSH
13620: LD_INT 8400
13622: PUSH
13623: LD_INT 2100
13625: PUSH
13626: LD_EXP 14
13630: MUL
13631: PLUS
13632: ST_TO_ADDR
// BuildUpTimeActive := true ;
13633: LD_ADDR_EXP 57
13637: PUSH
13638: LD_INT 1
13640: ST_TO_ADDR
// for i := 1 to 8 do
13641: LD_ADDR_VAR 0 2
13645: PUSH
13646: DOUBLE
13647: LD_INT 1
13649: DEC
13650: ST_TO_ADDR
13651: LD_INT 8
13653: PUSH
13654: FOR_TO
13655: IFFALSE 13796
// if Side_Positions [ i ] then
13657: LD_EXP 34
13661: PUSH
13662: LD_VAR 0 2
13666: ARRAY
13667: IFFALSE 13794
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
13669: LD_EXP 56
13673: PUSH
13674: LD_EXP 34
13678: PUSH
13679: LD_VAR 0 2
13683: ARRAY
13684: ARRAY
13685: PPUSH
13686: LD_INT 5
13688: PPUSH
13689: CALL_OW 424
// for j := 1 to 8 do
13693: LD_ADDR_VAR 0 3
13697: PUSH
13698: DOUBLE
13699: LD_INT 1
13701: DEC
13702: ST_TO_ADDR
13703: LD_INT 8
13705: PUSH
13706: FOR_TO
13707: IFFALSE 13792
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
13709: LD_EXP 34
13713: PUSH
13714: LD_VAR 0 3
13718: ARRAY
13719: PUSH
13720: LD_EXP 32
13724: PUSH
13725: LD_VAR 0 2
13729: ARRAY
13730: PUSH
13731: LD_EXP 32
13735: PUSH
13736: LD_VAR 0 3
13740: ARRAY
13741: NONEQUAL
13742: PUSH
13743: LD_EXP 38
13747: NOT
13748: PUSH
13749: LD_VAR 0 2
13753: PUSH
13754: LD_VAR 0 3
13758: NONEQUAL
13759: AND
13760: OR
13761: AND
13762: IFFALSE 13790
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
13764: LD_VAR 0 3
13768: PPUSH
13769: LD_EXP 56
13773: PUSH
13774: LD_EXP 34
13778: PUSH
13779: LD_VAR 0 2
13783: ARRAY
13784: ARRAY
13785: PPUSH
13786: CALL_OW 333
13790: GO 13706
13792: POP
13793: POP
// end ;
13794: GO 13654
13796: POP
13797: POP
// end ;
13798: LD_VAR 0 1
13802: RET
// export function EndBuildUp ; var i , j ; begin
13803: LD_INT 0
13805: PPUSH
13806: PPUSH
13807: PPUSH
// BuildUpTimeActive := false ;
13808: LD_ADDR_EXP 57
13812: PUSH
13813: LD_INT 0
13815: ST_TO_ADDR
// for i := 1 to 8 do
13816: LD_ADDR_VAR 0 2
13820: PUSH
13821: DOUBLE
13822: LD_INT 1
13824: DEC
13825: ST_TO_ADDR
13826: LD_INT 8
13828: PUSH
13829: FOR_TO
13830: IFFALSE 13971
// if Side_Positions [ i ] then
13832: LD_EXP 34
13836: PUSH
13837: LD_VAR 0 2
13841: ARRAY
13842: IFFALSE 13969
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
13844: LD_EXP 56
13848: PUSH
13849: LD_EXP 34
13853: PUSH
13854: LD_VAR 0 2
13858: ARRAY
13859: ARRAY
13860: PPUSH
13861: LD_INT 0
13863: PPUSH
13864: CALL_OW 424
// for j := 1 to 8 do
13868: LD_ADDR_VAR 0 3
13872: PUSH
13873: DOUBLE
13874: LD_INT 1
13876: DEC
13877: ST_TO_ADDR
13878: LD_INT 8
13880: PUSH
13881: FOR_TO
13882: IFFALSE 13967
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
13884: LD_EXP 34
13888: PUSH
13889: LD_VAR 0 3
13893: ARRAY
13894: PUSH
13895: LD_EXP 32
13899: PUSH
13900: LD_VAR 0 2
13904: ARRAY
13905: PUSH
13906: LD_EXP 32
13910: PUSH
13911: LD_VAR 0 3
13915: ARRAY
13916: NONEQUAL
13917: PUSH
13918: LD_EXP 38
13922: NOT
13923: PUSH
13924: LD_VAR 0 2
13928: PUSH
13929: LD_VAR 0 3
13933: NONEQUAL
13934: AND
13935: OR
13936: AND
13937: IFFALSE 13965
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
13939: LD_VAR 0 3
13943: PPUSH
13944: LD_EXP 56
13948: PUSH
13949: LD_EXP 34
13953: PUSH
13954: LD_VAR 0 2
13958: ARRAY
13959: ARRAY
13960: PPUSH
13961: CALL_OW 334
13965: GO 13881
13967: POP
13968: POP
// end ;
13969: GO 13829
13971: POP
13972: POP
// end ;
13973: LD_VAR 0 1
13977: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
13978: LD_EXP 57
13982: IFFALSE 14157
13984: GO 13986
13986: DISABLE
13987: LD_INT 0
13989: PPUSH
13990: PPUSH
// begin for i := 1 to 8 do
13991: LD_ADDR_VAR 0 1
13995: PUSH
13996: DOUBLE
13997: LD_INT 1
13999: DEC
14000: ST_TO_ADDR
14001: LD_INT 8
14003: PUSH
14004: FOR_TO
14005: IFFALSE 14154
// if Side_Positions [ i ] then
14007: LD_EXP 34
14011: PUSH
14012: LD_VAR 0 1
14016: ARRAY
14017: IFFALSE 14152
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
14019: LD_ADDR_VAR 0 2
14023: PUSH
14024: LD_EXP 56
14028: PUSH
14029: LD_EXP 34
14033: PUSH
14034: LD_VAR 0 1
14038: ARRAY
14039: ARRAY
14040: PPUSH
14041: LD_INT 2
14043: PUSH
14044: LD_INT 21
14046: PUSH
14047: LD_INT 1
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: PUSH
14054: LD_INT 21
14056: PUSH
14057: LD_INT 2
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: LIST
14068: PUSH
14069: LD_INT 22
14071: PUSH
14072: LD_OWVAR 2
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: PUSH
14081: EMPTY
14082: LIST
14083: LIST
14084: PPUSH
14085: CALL_OW 70
14089: PUSH
14090: FOR_IN
14091: IFFALSE 14150
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
14093: LD_EXP 32
14097: PUSH
14098: LD_VAR 0 1
14102: ARRAY
14103: PUSH
14104: LD_EXP 32
14108: PUSH
14109: LD_OWVAR 2
14113: ARRAY
14114: NONEQUAL
14115: PUSH
14116: LD_EXP 38
14120: NOT
14121: PUSH
14122: LD_VAR 0 1
14126: PUSH
14127: LD_OWVAR 2
14131: NONEQUAL
14132: AND
14133: OR
14134: IFFALSE 14148
// ComMoveToArea ( un , BuildUpEscape ) ;
14136: LD_VAR 0 2
14140: PPUSH
14141: LD_INT 16
14143: PPUSH
14144: CALL_OW 113
14148: GO 14090
14150: POP
14151: POP
14152: GO 14004
14154: POP
14155: POP
// enable ;
14156: ENABLE
// end ;
14157: PPOPN 2
14159: END
// every 0 0$1 trigger def_builduptime do
14160: LD_EXP 14
14164: IFFALSE 14190
14166: GO 14168
14168: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
14169: LD_INT 8400
14171: PUSH
14172: LD_EXP 14
14176: PUSH
14177: LD_INT 2100
14179: MUL
14180: PLUS
14181: PPUSH
14182: CALL_OW 67
// EndBuildUp ;
14186: CALL 13803 0 0
// end ;
14190: END
