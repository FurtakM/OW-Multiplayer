// export Game_Type ; export def_base_level , def_amount_of_people , def_initial_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_amount_of_apemen , def_people_respawning , def_siberite_bomb , def_builduptime ; export is_depot , number_of_breastworks , number_of_people , initial_level , amount_of_apemen , starting_crates , starting_resources , shipments_density , siberite_bomb_Delay , spawning_koef_of_apemen , respawning_time_min , respawning_time_max , def_win_rules ; export Side_Count , Team_Count , Player_Side , Player_Team , Side_Teams , Teams ; export Side_Positions , Side_Nations , Side_Names , Team_Names , Team_Game , Side_Comps ; export depot_def , start_def , extra_oil_deposits_locations ; export heroes ; export commander , battle_flags_id , morale_decreasing_time ; var global_units , global_defined , soldiers_created ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function create_forest ; var area ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
// PlaceTreesToArea ( BigForest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , Rand ( 500 , 570 ) , 50 , 2 ) ;
  72: LD_INT 6
  74: PPUSH
  75: LD_INT 21
  77: PUSH
  78: LD_INT 22
  80: PUSH
  81: LD_INT 24
  83: PUSH
  84: LD_INT 21
  86: PUSH
  87: LD_INT 22
  89: PUSH
  90: LD_INT 24
  92: PUSH
  93: LD_INT 38
  95: PUSH
  96: LD_INT 39
  98: PUSH
  99: EMPTY
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: PPUSH
 109: LD_INT 500
 111: PPUSH
 112: LD_INT 570
 114: PPUSH
 115: CALL_OW 12
 119: PPUSH
 120: LD_INT 50
 122: PPUSH
 123: LD_INT 2
 125: PPUSH
 126: CALL_OW 352
// if def_base_level then
 130: LD_EXP 2
 134: IFFALSE 146
// area := bush_forest_small else
 136: LD_ADDR_VAR 0 2
 140: PUSH
 141: LD_INT 9
 143: ST_TO_ADDR
 144: GO 154
// area := bush_forest_big ;
 146: LD_ADDR_VAR 0 2
 150: PUSH
 151: LD_INT 8
 153: ST_TO_ADDR
// PlaceTreesToArea ( area , [ 38 , 39 , 37 ] , Rand ( 300 , 350 ) , 10 , 3 ) ;
 154: LD_VAR 0 2
 158: PPUSH
 159: LD_INT 38
 161: PUSH
 162: LD_INT 39
 164: PUSH
 165: LD_INT 37
 167: PUSH
 168: EMPTY
 169: LIST
 170: LIST
 171: LIST
 172: PPUSH
 173: LD_INT 300
 175: PPUSH
 176: LD_INT 350
 178: PPUSH
 179: CALL_OW 12
 183: PPUSH
 184: LD_INT 10
 186: PPUSH
 187: LD_INT 3
 189: PPUSH
 190: CALL_OW 352
// PlaceTreesToArea ( BigForest , [ 38 , 39 , 37 ] , 80 , 10 , 3 ) ;
 194: LD_INT 6
 196: PPUSH
 197: LD_INT 38
 199: PUSH
 200: LD_INT 39
 202: PUSH
 203: LD_INT 37
 205: PUSH
 206: EMPTY
 207: LIST
 208: LIST
 209: LIST
 210: PPUSH
 211: LD_INT 80
 213: PPUSH
 214: LD_INT 10
 216: PPUSH
 217: LD_INT 3
 219: PPUSH
 220: CALL_OW 352
// end ;
 224: LD_VAR 0 1
 228: RET
// function create_map_resources ; var un , oil_pos , sib_pos ; begin
 229: LD_INT 0
 231: PPUSH
 232: PPUSH
 233: PPUSH
 234: PPUSH
// oil_pos := [ [ 24 , 10 ] , [ 82 , 9 ] , [ 79 , 115 ] , [ 135 , 112 ] ] ;
 235: LD_ADDR_VAR 0 3
 239: PUSH
 240: LD_INT 24
 242: PUSH
 243: LD_INT 10
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: PUSH
 250: LD_INT 82
 252: PUSH
 253: LD_INT 9
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 79
 262: PUSH
 263: LD_INT 115
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 135
 272: PUSH
 273: LD_INT 112
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: PUSH
 280: EMPTY
 281: LIST
 282: LIST
 283: LIST
 284: LIST
 285: ST_TO_ADDR
// sib_pos := [ [ 24 , 29 ] , [ 102 , 29 ] , [ 60 , 93 ] , [ 134 , 91 ] ] ;
 286: LD_ADDR_VAR 0 4
 290: PUSH
 291: LD_INT 24
 293: PUSH
 294: LD_INT 29
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: PUSH
 301: LD_INT 102
 303: PUSH
 304: LD_INT 29
 306: PUSH
 307: EMPTY
 308: LIST
 309: LIST
 310: PUSH
 311: LD_INT 60
 313: PUSH
 314: LD_INT 93
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 134
 323: PUSH
 324: LD_INT 91
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: LIST
 335: LIST
 336: ST_TO_ADDR
// for un = 1 to 4 do
 337: LD_ADDR_VAR 0 2
 341: PUSH
 342: DOUBLE
 343: LD_INT 1
 345: DEC
 346: ST_TO_ADDR
 347: LD_INT 4
 349: PUSH
 350: FOR_TO
 351: IFFALSE 429
// begin CreateDepositXY ( oil_pos [ un ] [ 1 ] , oil_pos [ un ] [ 2 ] , mat_oil ) ;
 353: LD_VAR 0 3
 357: PUSH
 358: LD_VAR 0 2
 362: ARRAY
 363: PUSH
 364: LD_INT 1
 366: ARRAY
 367: PPUSH
 368: LD_VAR 0 3
 372: PUSH
 373: LD_VAR 0 2
 377: ARRAY
 378: PUSH
 379: LD_INT 2
 381: ARRAY
 382: PPUSH
 383: LD_INT 2
 385: PPUSH
 386: CALL_OW 62
// CreateDepositXY ( sib_pos [ un ] [ 1 ] , sib_pos [ un ] [ 2 ] , mat_siberit ) ;
 390: LD_VAR 0 4
 394: PUSH
 395: LD_VAR 0 2
 399: ARRAY
 400: PUSH
 401: LD_INT 1
 403: ARRAY
 404: PPUSH
 405: LD_VAR 0 4
 409: PUSH
 410: LD_VAR 0 2
 414: ARRAY
 415: PUSH
 416: LD_INT 2
 418: ARRAY
 419: PPUSH
 420: LD_INT 3
 422: PPUSH
 423: CALL_OW 62
// end ;
 427: GO 350
 429: POP
 430: POP
// end ;
 431: LD_VAR 0 1
 435: RET
// function init_map ; var i ; begin
 436: LD_INT 0
 438: PPUSH
 439: PPUSH
// extra_oil_deposits_locations := [ [ 38 , 6 ] , [ 67 , 6 ] , [ 94 , 115 ] , [ 116 , 99 ] ] ;
 440: LD_ADDR_EXP 42
 444: PUSH
 445: LD_INT 38
 447: PUSH
 448: LD_INT 6
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 67
 457: PUSH
 458: LD_INT 6
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: LD_INT 94
 467: PUSH
 468: LD_INT 115
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: LD_INT 116
 477: PUSH
 478: LD_INT 99
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: ST_TO_ADDR
// create_forest ;
 491: CALL 68 0 0
// create_map_resources ;
 495: CALL 229 0 0
// depot_def := [ [ 12 , 10 , 2 ] , [ 97 , 10 , 3 ] , [ 64 , 108 , 0 ] , [ 146 , 110 , 5 ] ] ;
 499: LD_ADDR_EXP 40
 503: PUSH
 504: LD_INT 12
 506: PUSH
 507: LD_INT 10
 509: PUSH
 510: LD_INT 2
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: LIST
 517: PUSH
 518: LD_INT 97
 520: PUSH
 521: LD_INT 10
 523: PUSH
 524: LD_INT 3
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: LIST
 531: PUSH
 532: LD_INT 64
 534: PUSH
 535: LD_INT 108
 537: PUSH
 538: LD_INT 0
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: LIST
 545: PUSH
 546: LD_INT 146
 548: PUSH
 549: LD_INT 110
 551: PUSH
 552: LD_INT 5
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: LIST
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: LIST
 565: ST_TO_ADDR
// if def_base_level then
 566: LD_EXP 2
 570: IFFALSE 625
// start_def := [ [ 16 , 14 ] , [ 96 , 13 ] , [ 65 , 105 ] , [ 141 , 105 ] ] else
 572: LD_ADDR_EXP 41
 576: PUSH
 577: LD_INT 16
 579: PUSH
 580: LD_INT 14
 582: PUSH
 583: EMPTY
 584: LIST
 585: LIST
 586: PUSH
 587: LD_INT 96
 589: PUSH
 590: LD_INT 13
 592: PUSH
 593: EMPTY
 594: LIST
 595: LIST
 596: PUSH
 597: LD_INT 65
 599: PUSH
 600: LD_INT 105
 602: PUSH
 603: EMPTY
 604: LIST
 605: LIST
 606: PUSH
 607: LD_INT 141
 609: PUSH
 610: LD_INT 105
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: ST_TO_ADDR
 623: GO 676
// start_def := [ [ 7 , 5 ] , [ 98 , 6 ] , [ 63 , 113 ] , [ 151 , 113 ] ] ;
 625: LD_ADDR_EXP 41
 629: PUSH
 630: LD_INT 7
 632: PUSH
 633: LD_INT 5
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: PUSH
 640: LD_INT 98
 642: PUSH
 643: LD_INT 6
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: PUSH
 650: LD_INT 63
 652: PUSH
 653: LD_INT 113
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: PUSH
 660: LD_INT 151
 662: PUSH
 663: LD_INT 113
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: ST_TO_ADDR
// end ;
 676: LD_VAR 0 1
 680: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
 681: LD_INT 0
 683: PPUSH
 684: PPUSH
 685: PPUSH
 686: PPUSH
 687: PPUSH
 688: PPUSH
 689: PPUSH
 690: PPUSH
 691: PPUSH
// if MultiPlayer then
 692: LD_OWVAR 4
 696: IFFALSE 780
// begin Game_Type = mp_game_type ;
 698: LD_ADDR_EXP 1
 702: PUSH
 703: LD_OWVAR 6
 707: ST_TO_ADDR
// Player_Side = mp_player_side ;
 708: LD_ADDR_EXP 30
 712: PUSH
 713: LD_OWVAR 7
 717: ST_TO_ADDR
// Player_Team = mp_player_team ;
 718: LD_ADDR_EXP 31
 722: PUSH
 723: LD_OWVAR 8
 727: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
 728: LD_ADDR_EXP 34
 732: PUSH
 733: LD_OWVAR 17
 737: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 738: LD_ADDR_EXP 32
 742: PUSH
 743: LD_OWVAR 15
 747: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 748: LD_ADDR_EXP 35
 752: PUSH
 753: LD_OWVAR 16
 757: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 758: LD_ADDR_EXP 39
 762: PUSH
 763: CALL 0 0 0
 767: ST_TO_ADDR
// Teams = mp_teams ;
 768: LD_ADDR_EXP 33
 772: PUSH
 773: LD_OWVAR 12
 777: ST_TO_ADDR
// end else
 778: GO 981
// begin Game_Type = 2 ;
 780: LD_ADDR_EXP 1
 784: PUSH
 785: LD_INT 2
 787: ST_TO_ADDR
// Player_Side = 4 ;
 788: LD_ADDR_EXP 30
 792: PUSH
 793: LD_INT 4
 795: ST_TO_ADDR
// Side_Positions = [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 796: LD_ADDR_EXP 34
 800: PUSH
 801: LD_INT 0
 803: PUSH
 804: LD_INT 3
 806: PUSH
 807: LD_INT 0
 809: PUSH
 810: LD_INT 1
 812: PUSH
 813: LD_INT 0
 815: PUSH
 816: LD_INT 2
 818: PUSH
 819: LD_INT 4
 821: PUSH
 822: LD_INT 0
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: LIST
 834: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 2 , 0 , 1 , 2 , 0 ] ;
 835: LD_ADDR_EXP 32
 839: PUSH
 840: LD_INT 0
 842: PUSH
 843: LD_INT 1
 845: PUSH
 846: LD_INT 0
 848: PUSH
 849: LD_INT 2
 851: PUSH
 852: LD_INT 0
 854: PUSH
 855: LD_INT 1
 857: PUSH
 858: LD_INT 2
 860: PUSH
 861: LD_INT 0
 863: PUSH
 864: EMPTY
 865: LIST
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: LIST
 871: LIST
 872: LIST
 873: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 2 , 0 , 1 , 3 , 0 ] ;
 874: LD_ADDR_EXP 35
 878: PUSH
 879: LD_INT 0
 881: PUSH
 882: LD_INT 3
 884: PUSH
 885: LD_INT 0
 887: PUSH
 888: LD_INT 2
 890: PUSH
 891: LD_INT 0
 893: PUSH
 894: LD_INT 1
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: LD_INT 0
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 913: LD_ADDR_EXP 39
 917: PUSH
 918: LD_INT 0
 920: PUSH
 921: LD_INT 0
 923: PUSH
 924: LD_INT 0
 926: PUSH
 927: LD_INT 0
 929: PUSH
 930: LD_INT 0
 932: PUSH
 933: LD_INT 0
 935: PUSH
 936: LD_INT 0
 938: PUSH
 939: LD_INT 0
 941: PUSH
 942: EMPTY
 943: LIST
 944: LIST
 945: LIST
 946: LIST
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: ST_TO_ADDR
// Teams = [ [ 2 , 6 ] , [ 4 , 7 ] ] ;
 952: LD_ADDR_EXP 33
 956: PUSH
 957: LD_INT 2
 959: PUSH
 960: LD_INT 6
 962: PUSH
 963: EMPTY
 964: LIST
 965: LIST
 966: PUSH
 967: LD_INT 4
 969: PUSH
 970: LD_INT 7
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: ST_TO_ADDR
// end ; Side_Count = ( Side_Positions diff [ 0 ] ) + 0 ;
 981: LD_ADDR_EXP 28
 985: PUSH
 986: LD_EXP 34
 990: PUSH
 991: LD_INT 0
 993: PUSH
 994: EMPTY
 995: LIST
 996: DIFF
 997: PUSH
 998: LD_INT 0
1000: PLUS
1001: ST_TO_ADDR
// Team_Count = ( Side_Teams diff [ 0 ] ) + 0 ;
1002: LD_ADDR_EXP 29
1006: PUSH
1007: LD_EXP 32
1011: PUSH
1012: LD_INT 0
1014: PUSH
1015: EMPTY
1016: LIST
1017: DIFF
1018: PUSH
1019: LD_INT 0
1021: PLUS
1022: ST_TO_ADDR
// if MultiPlayer then
1023: LD_OWVAR 4
1027: IFFALSE 1221
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
1029: LD_ADDR_EXP 2
1033: PUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL_OW 426
1041: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
1042: LD_ADDR_EXP 3
1046: PUSH
1047: LD_INT 1
1049: PPUSH
1050: CALL_OW 426
1054: ST_TO_ADDR
// def_initial_level = GetMultiplayerSetting ( 2 ) ;
1055: LD_ADDR_EXP 4
1059: PUSH
1060: LD_INT 2
1062: PPUSH
1063: CALL_OW 426
1067: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
1068: LD_ADDR_EXP 5
1072: PUSH
1073: LD_INT 3
1075: PPUSH
1076: CALL_OW 426
1080: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
1081: LD_ADDR_EXP 6
1085: PUSH
1086: LD_INT 4
1088: PPUSH
1089: CALL_OW 426
1093: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
1094: LD_ADDR_EXP 7
1098: PUSH
1099: LD_INT 5
1101: PPUSH
1102: CALL_OW 426
1106: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
1107: LD_ADDR_EXP 8
1111: PUSH
1112: LD_INT 10
1114: PPUSH
1115: CALL_OW 426
1119: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
1120: LD_ADDR_EXP 9
1124: PUSH
1125: LD_INT 11
1127: PPUSH
1128: CALL_OW 426
1132: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
1133: LD_ADDR_EXP 10
1137: PUSH
1138: LD_INT 12
1140: PPUSH
1141: CALL_OW 426
1145: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
1146: LD_ADDR_EXP 11
1150: PUSH
1151: LD_INT 13
1153: PPUSH
1154: CALL_OW 426
1158: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
1159: LD_ADDR_EXP 12
1163: PUSH
1164: LD_INT 14
1166: PPUSH
1167: CALL_OW 426
1171: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
1172: LD_ADDR_EXP 13
1176: PUSH
1177: LD_INT 15
1179: PPUSH
1180: CALL_OW 426
1184: ST_TO_ADDR
// def_win_rules = 0 ;
1185: LD_ADDR_EXP 27
1189: PUSH
1190: LD_INT 0
1192: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
1193: LD_ADDR_EXP 14
1197: PUSH
1198: LD_INT 20
1200: PPUSH
1201: CALL_OW 426
1205: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
1206: LD_ADDR_VAR 0 9
1210: PUSH
1211: LD_INT 22
1213: PPUSH
1214: CALL_OW 426
1218: ST_TO_ADDR
// end else
1219: GO 1345
// begin randomize ;
1221: CALL_OW 10
// def_base_level = 1 ;
1225: LD_ADDR_EXP 2
1229: PUSH
1230: LD_INT 1
1232: ST_TO_ADDR
// def_amount_of_people = 1 ;
1233: LD_ADDR_EXP 3
1237: PUSH
1238: LD_INT 1
1240: ST_TO_ADDR
// def_initial_level = 1 ;
1241: LD_ADDR_EXP 4
1245: PUSH
1246: LD_INT 1
1248: ST_TO_ADDR
// def_starting_resources = 2 ;
1249: LD_ADDR_EXP 5
1253: PUSH
1254: LD_INT 2
1256: ST_TO_ADDR
// def_shipments_density = 1 ;
1257: LD_ADDR_EXP 6
1261: PUSH
1262: LD_INT 1
1264: ST_TO_ADDR
// def_extra_oil_deposits = 0 ;
1265: LD_ADDR_EXP 7
1269: PUSH
1270: LD_INT 0
1272: ST_TO_ADDR
// def_shared_vision = 1 ;
1273: LD_ADDR_EXP 8
1277: PUSH
1278: LD_INT 1
1280: ST_TO_ADDR
// def_morale_flags = 1 ;
1281: LD_ADDR_EXP 9
1285: PUSH
1286: LD_INT 1
1288: ST_TO_ADDR
// def_siberite_detection = 1 ;
1289: LD_ADDR_EXP 10
1293: PUSH
1294: LD_INT 1
1296: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
1297: LD_ADDR_EXP 11
1301: PUSH
1302: LD_INT 3
1304: ST_TO_ADDR
// def_people_respawning = 2 ;
1305: LD_ADDR_EXP 12
1309: PUSH
1310: LD_INT 2
1312: ST_TO_ADDR
// def_siberite_bomb = 0 ;
1313: LD_ADDR_EXP 13
1317: PUSH
1318: LD_INT 0
1320: ST_TO_ADDR
// def_win_rules = 0 ;
1321: LD_ADDR_EXP 27
1325: PUSH
1326: LD_INT 0
1328: ST_TO_ADDR
// def_builduptime := 1 ;
1329: LD_ADDR_EXP 14
1333: PUSH
1334: LD_INT 1
1336: ST_TO_ADDR
// tech_level = 4 ;
1337: LD_ADDR_VAR 0 9
1341: PUSH
1342: LD_INT 4
1344: ST_TO_ADDR
// end ; if isSGUI then
1345: LD_OWVAR 83
1349: IFFALSE 1357
// setMpTechs ( ) else
1351: CALL 9506 0 0
1355: GO 1370
// begin SetMpTechLevel ( tech_level + 1 ) ;
1357: LD_VAR 0 9
1361: PUSH
1362: LD_INT 1
1364: PLUS
1365: PPUSH
1366: CALL 9653 0 1
// end ; is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1370: LD_ADDR_EXP 15
1374: PUSH
1375: LD_INT 0
1377: PUSH
1378: LD_INT 1
1380: PUSH
1381: LD_INT 1
1383: PUSH
1384: LD_INT 1
1386: PUSH
1387: EMPTY
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: PUSH
1393: LD_EXP 2
1397: PUSH
1398: LD_INT 1
1400: PLUS
1401: ARRAY
1402: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 0 , 0 ] [ def_base_level + 1 ] ;
1403: LD_ADDR_EXP 16
1407: PUSH
1408: LD_INT 0
1410: PUSH
1411: LD_INT 0
1413: PUSH
1414: LD_INT 0
1416: PUSH
1417: LD_INT 0
1419: PUSH
1420: EMPTY
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: PUSH
1426: LD_EXP 2
1430: PUSH
1431: LD_INT 1
1433: PLUS
1434: ARRAY
1435: ST_TO_ADDR
// number_of_people = [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
1436: LD_ADDR_EXP 17
1440: PUSH
1441: LD_INT 9
1443: PUSH
1444: LD_INT 12
1446: PUSH
1447: LD_INT 15
1449: PUSH
1450: LD_INT 24
1452: PUSH
1453: EMPTY
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: PUSH
1459: LD_EXP 3
1463: PUSH
1464: LD_INT 1
1466: PLUS
1467: ARRAY
1468: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_initial_level + 1 ] ;
1469: LD_ADDR_EXP 18
1473: PUSH
1474: LD_INT 2
1476: PUSH
1477: LD_INT 3
1479: PUSH
1480: LD_INT 4
1482: PUSH
1483: LD_INT 5
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: PUSH
1492: LD_EXP 4
1496: PUSH
1497: LD_INT 1
1499: PLUS
1500: ARRAY
1501: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1502: LD_ADDR_EXP 21
1506: PUSH
1507: LD_INT 0
1509: PUSH
1510: LD_INT 0
1512: PUSH
1513: LD_INT 0
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: LIST
1520: PUSH
1521: LD_INT 30
1523: PUSH
1524: LD_INT 0
1526: PUSH
1527: LD_INT 0
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: PUSH
1535: LD_INT 50
1537: PUSH
1538: LD_INT 20
1540: PUSH
1541: LD_INT 0
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 80
1551: PUSH
1552: LD_INT 40
1554: PUSH
1555: LD_INT 20
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: PUSH
1563: EMPTY
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: PUSH
1569: LD_EXP 5
1573: PUSH
1574: LD_INT 1
1576: PLUS
1577: ARRAY
1578: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1579: LD_ADDR_EXP 20
1583: PUSH
1584: LD_INT 10
1586: PUSH
1587: EMPTY
1588: LIST
1589: PUSH
1590: LD_INT 7
1592: PUSH
1593: LD_INT 14
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: PUSH
1600: LD_INT 6
1602: PUSH
1603: LD_INT 12
1605: PUSH
1606: LD_INT 18
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: PUSH
1614: LD_INT 5
1616: PUSH
1617: LD_INT 10
1619: PUSH
1620: LD_INT 15
1622: PUSH
1623: LD_INT 20
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: PUSH
1638: LD_EXP 5
1642: PUSH
1643: LD_INT 1
1645: PLUS
1646: ARRAY
1647: ST_TO_ADDR
// shipments_density = [ 20 , 30 , 40 ] [ def_shipments_density + 1 ] ;
1648: LD_ADDR_EXP 22
1652: PUSH
1653: LD_INT 20
1655: PUSH
1656: LD_INT 30
1658: PUSH
1659: LD_INT 40
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: LIST
1666: PUSH
1667: LD_EXP 6
1671: PUSH
1672: LD_INT 1
1674: PLUS
1675: ARRAY
1676: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1677: LD_ADDR_EXP 19
1681: PUSH
1682: LD_INT 0
1684: PUSH
1685: LD_INT 1
1687: PUSH
1688: LD_INT 2
1690: PUSH
1691: LD_INT 3
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: PUSH
1700: LD_EXP 11
1704: PUSH
1705: LD_INT 1
1707: PLUS
1708: ARRAY
1709: ST_TO_ADDR
// spawning_koef_of_apemen = [ 0 , 165 , 140 , 115 ] [ def_amount_of_apemen + 1 ] ;
1710: LD_ADDR_EXP 24
1714: PUSH
1715: LD_INT 0
1717: PUSH
1718: LD_INT 165
1720: PUSH
1721: LD_INT 140
1723: PUSH
1724: LD_INT 115
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: PUSH
1733: LD_EXP 11
1737: PUSH
1738: LD_INT 1
1740: PLUS
1741: ARRAY
1742: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1743: LD_ADDR_EXP 25
1747: PUSH
1748: LD_INT 0
1750: PUSH
1751: LD_INT 8400
1753: PUSH
1754: LD_INT 1750
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: LIST
1761: PUSH
1762: LD_EXP 12
1766: PUSH
1767: LD_INT 1
1769: PLUS
1770: ARRAY
1771: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1772: LD_ADDR_EXP 26
1776: PUSH
1777: LD_INT 0
1779: PUSH
1780: LD_INT 21000
1782: PUSH
1783: LD_INT 4200
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: LIST
1790: PUSH
1791: LD_EXP 12
1795: PUSH
1796: LD_INT 1
1798: PLUS
1799: ARRAY
1800: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1801: LD_ADDR_EXP 23
1805: PUSH
1806: LD_INT 0
1808: PUSH
1809: LD_INT 1
1811: PUSH
1812: LD_INT 63000
1814: PUSH
1815: LD_INT 126000
1817: PUSH
1818: LD_INT 189000
1820: PUSH
1821: LD_INT 252000
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: PUSH
1832: LD_EXP 13
1836: PUSH
1837: LD_INT 1
1839: PLUS
1840: ARRAY
1841: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1842: LD_ADDR_EXP 46
1846: PUSH
1847: LD_INT 1
1849: NEG
1850: PUSH
1851: LD_INT 350
1853: PUSH
1854: LD_INT 700
1856: PUSH
1857: LD_INT 1400
1859: PUSH
1860: LD_INT 0
1862: PUSH
1863: EMPTY
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: PUSH
1870: LD_EXP 9
1874: PUSH
1875: LD_INT 1
1877: PLUS
1878: ARRAY
1879: ST_TO_ADDR
// battle_flags_id = [ ] ;
1880: LD_ADDR_EXP 45
1884: PUSH
1885: EMPTY
1886: ST_TO_ADDR
// end ;
1887: LD_VAR 0 1
1891: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1892: LD_INT 0
1894: PPUSH
1895: PPUSH
1896: PPUSH
// Team_Game := 0 ;
1897: LD_ADDR_EXP 38
1901: PUSH
1902: LD_INT 0
1904: ST_TO_ADDR
// for i = 1 to 8 do
1905: LD_ADDR_VAR 0 2
1909: PUSH
1910: DOUBLE
1911: LD_INT 1
1913: DEC
1914: ST_TO_ADDR
1915: LD_INT 8
1917: PUSH
1918: FOR_TO
1919: IFFALSE 1945
// Team_Game := Team_Game + Side_Teams [ i ] ;
1921: LD_ADDR_EXP 38
1925: PUSH
1926: LD_EXP 38
1930: PUSH
1931: LD_EXP 32
1935: PUSH
1936: LD_VAR 0 2
1940: ARRAY
1941: PLUS
1942: ST_TO_ADDR
1943: GO 1918
1945: POP
1946: POP
// if not Team_Game then
1947: LD_EXP 38
1951: NOT
1952: IFFALSE 1964
// Team_Game := false else
1954: LD_ADDR_EXP 38
1958: PUSH
1959: LD_INT 0
1961: ST_TO_ADDR
1962: GO 1972
// Team_Game := true ;
1964: LD_ADDR_EXP 38
1968: PUSH
1969: LD_INT 1
1971: ST_TO_ADDR
// if not Team_Game then
1972: LD_EXP 38
1976: NOT
1977: IFFALSE 2075
// begin for i = 1 to 8 do
1979: LD_ADDR_VAR 0 2
1983: PUSH
1984: DOUBLE
1985: LD_INT 1
1987: DEC
1988: ST_TO_ADDR
1989: LD_INT 8
1991: PUSH
1992: FOR_TO
1993: IFFALSE 2071
// for j = 1 to 8 do
1995: LD_ADDR_VAR 0 3
1999: PUSH
2000: DOUBLE
2001: LD_INT 1
2003: DEC
2004: ST_TO_ADDR
2005: LD_INT 8
2007: PUSH
2008: FOR_TO
2009: IFFALSE 2067
// if i <> j then
2011: LD_VAR 0 2
2015: PUSH
2016: LD_VAR 0 3
2020: NONEQUAL
2021: IFFALSE 2045
// SetAttitude ( i , j , att_neutral , true ) else
2023: LD_VAR 0 2
2027: PPUSH
2028: LD_VAR 0 3
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: LD_INT 1
2038: PPUSH
2039: CALL_OW 80
2043: GO 2065
// SetAttitude ( i , j , att_friend , true ) ;
2045: LD_VAR 0 2
2049: PPUSH
2050: LD_VAR 0 3
2054: PPUSH
2055: LD_INT 1
2057: PPUSH
2058: LD_INT 1
2060: PPUSH
2061: CALL_OW 80
2065: GO 2008
2067: POP
2068: POP
2069: GO 1992
2071: POP
2072: POP
// end else
2073: GO 2250
// begin if def_shared_vision then
2075: LD_EXP 8
2079: IFFALSE 2144
// begin for i in Teams do
2081: LD_ADDR_VAR 0 2
2085: PUSH
2086: LD_EXP 33
2090: PUSH
2091: FOR_IN
2092: IFFALSE 2142
// for j = 2 to i do
2094: LD_ADDR_VAR 0 3
2098: PUSH
2099: DOUBLE
2100: LD_INT 2
2102: DEC
2103: ST_TO_ADDR
2104: LD_VAR 0 2
2108: PUSH
2109: FOR_TO
2110: IFFALSE 2138
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2112: LD_VAR 0 2
2116: PUSH
2117: LD_VAR 0 3
2121: ARRAY
2122: PPUSH
2123: LD_VAR 0 2
2127: PUSH
2128: LD_INT 1
2130: ARRAY
2131: PPUSH
2132: CALL_OW 343
2136: GO 2109
2138: POP
2139: POP
2140: GO 2091
2142: POP
2143: POP
// end ; for i = 1 to 8 do
2144: LD_ADDR_VAR 0 2
2148: PUSH
2149: DOUBLE
2150: LD_INT 1
2152: DEC
2153: ST_TO_ADDR
2154: LD_INT 8
2156: PUSH
2157: FOR_TO
2158: IFFALSE 2248
// for j = 1 to 8 do
2160: LD_ADDR_VAR 0 3
2164: PUSH
2165: DOUBLE
2166: LD_INT 1
2168: DEC
2169: ST_TO_ADDR
2170: LD_INT 8
2172: PUSH
2173: FOR_TO
2174: IFFALSE 2244
// if Side_Teams [ i ] = Side_Teams [ j ] then
2176: LD_EXP 32
2180: PUSH
2181: LD_VAR 0 2
2185: ARRAY
2186: PUSH
2187: LD_EXP 32
2191: PUSH
2192: LD_VAR 0 3
2196: ARRAY
2197: EQUAL
2198: IFFALSE 2222
// SetAttitude ( i , j , att_friend , true ) else
2200: LD_VAR 0 2
2204: PPUSH
2205: LD_VAR 0 3
2209: PPUSH
2210: LD_INT 1
2212: PPUSH
2213: LD_INT 1
2215: PPUSH
2216: CALL_OW 80
2220: GO 2242
// SetAttitude ( i , j , att_enemy , true ) ;
2222: LD_VAR 0 2
2226: PPUSH
2227: LD_VAR 0 3
2231: PPUSH
2232: LD_INT 2
2234: PPUSH
2235: LD_INT 1
2237: PPUSH
2238: CALL_OW 80
2242: GO 2173
2244: POP
2245: POP
2246: GO 2157
2248: POP
2249: POP
// end ; end ;
2250: LD_VAR 0 1
2254: RET
// function prepare_people ( side , count , cl , x , y , r , var commander ) ; var i , j , un ; begin
2255: LD_INT 0
2257: PPUSH
2258: PPUSH
2259: PPUSH
2260: PPUSH
// result := [ ] ;
2261: LD_ADDR_VAR 0 8
2265: PUSH
2266: EMPTY
2267: ST_TO_ADDR
// for i := 1 to count do
2268: LD_ADDR_VAR 0 9
2272: PUSH
2273: DOUBLE
2274: LD_INT 1
2276: DEC
2277: ST_TO_ADDR
2278: LD_VAR 0 2
2282: PUSH
2283: FOR_TO
2284: IFFALSE 2678
// begin uc_direction := Rand ( 0 , 5 ) ;
2286: LD_ADDR_OWVAR 24
2290: PUSH
2291: LD_INT 0
2293: PPUSH
2294: LD_INT 5
2296: PPUSH
2297: CALL_OW 12
2301: ST_TO_ADDR
// if commander then
2302: LD_FROM_VAR 0 7
2306: IFFALSE 2415
// begin hc_name := mp_sides_players_names [ side ] ;
2308: LD_ADDR_OWVAR 26
2312: PUSH
2313: LD_OWVAR 19
2317: PUSH
2318: LD_VAR 0 1
2322: ARRAY
2323: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
2324: LD_INT 1
2326: PPUSH
2327: LD_INT 2
2329: PPUSH
2330: CALL_OW 12
2334: PPUSH
2335: LD_VAR 0 3
2339: PPUSH
2340: LD_EXP 18
2344: PUSH
2345: LD_INT 2
2347: PLUS
2348: PPUSH
2349: CALL_OW 380
// hc_importance := 105 ;
2353: LD_ADDR_OWVAR 32
2357: PUSH
2358: LD_INT 105
2360: ST_TO_ADDR
// commander := false ;
2361: LD_VAR 0 7
2365: PUSH
2366: LD_INT 0
2368: ST_TO_ADDR
// if Multiplayer then
2369: LD_OWVAR 4
2373: IFFALSE 2413
// begin hc_gallery := MULTIAVATARS ;
2375: LD_ADDR_OWVAR 33
2379: PUSH
2380: LD_STRING MULTIAVATARS
2382: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( Side ) ;
2383: LD_ADDR_OWVAR 34
2387: PUSH
2388: LD_VAR 0 1
2392: PPUSH
2393: CALL_OW 525
2397: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( Side ) ;
2398: LD_ADDR_OWVAR 27
2402: PUSH
2403: LD_VAR 0 1
2407: PPUSH
2408: CALL_OW 526
2412: ST_TO_ADDR
// end ; end else
2413: GO 2478
// begin hc_name :=  ;
2415: LD_ADDR_OWVAR 26
2419: PUSH
2420: LD_STRING 
2422: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
2423: LD_INT 1
2425: PPUSH
2426: LD_INT 2
2428: PPUSH
2429: CALL_OW 12
2433: PPUSH
2434: LD_VAR 0 3
2438: PPUSH
2439: LD_EXP 18
2443: PPUSH
2444: CALL_OW 380
// hc_importance := 0 ;
2448: LD_ADDR_OWVAR 32
2452: PUSH
2453: LD_INT 0
2455: ST_TO_ADDR
// if Multiplayer then
2456: LD_OWVAR 4
2460: IFFALSE 2478
// begin hc_gallery :=  ;
2462: LD_ADDR_OWVAR 33
2466: PUSH
2467: LD_STRING 
2469: ST_TO_ADDR
// hc_face_number := 0 ;
2470: LD_ADDR_OWVAR 34
2474: PUSH
2475: LD_INT 0
2477: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2478: LD_ADDR_VAR 0 11
2482: PUSH
2483: CALL_OW 44
2487: ST_TO_ADDR
// if global_defined then
2488: LD_LOC 2
2492: IFFALSE 2630
// begin j := i ;
2494: LD_ADDR_VAR 0 10
2498: PUSH
2499: LD_VAR 0 9
2503: ST_TO_ADDR
// if cl = class_soldier then
2504: LD_VAR 0 3
2508: PUSH
2509: LD_INT 1
2511: EQUAL
2512: IFFALSE 2530
// j := i + soldiers_created ;
2514: LD_ADDR_VAR 0 10
2518: PUSH
2519: LD_VAR 0 9
2523: PUSH
2524: LD_LOC 3
2528: PLUS
2529: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2530: LD_LOC 1
2534: PUSH
2535: LD_VAR 0 3
2539: ARRAY
2540: PUSH
2541: LD_VAR 0 10
2545: ARRAY
2546: PPUSH
2547: LD_VAR 0 11
2551: PPUSH
2552: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2556: LD_VAR 0 11
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_LOC 1
2568: PUSH
2569: LD_VAR 0 3
2573: ARRAY
2574: PUSH
2575: LD_VAR 0 10
2579: ARRAY
2580: PPUSH
2581: LD_INT 2
2583: PPUSH
2584: CALL_OW 260
2588: PPUSH
2589: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2593: LD_VAR 0 11
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: LD_LOC 1
2605: PUSH
2606: LD_VAR 0 3
2610: ARRAY
2611: PUSH
2612: LD_VAR 0 10
2616: ARRAY
2617: PPUSH
2618: LD_INT 1
2620: PPUSH
2621: CALL_OW 260
2625: PPUSH
2626: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2630: LD_VAR 0 11
2634: PPUSH
2635: LD_VAR 0 4
2639: PPUSH
2640: LD_VAR 0 5
2644: PPUSH
2645: LD_VAR 0 6
2649: PPUSH
2650: LD_INT 0
2652: PPUSH
2653: CALL_OW 50
// result := result ^ [ un ] ;
2657: LD_ADDR_VAR 0 8
2661: PUSH
2662: LD_VAR 0 8
2666: PUSH
2667: LD_VAR 0 11
2671: PUSH
2672: EMPTY
2673: LIST
2674: ADD
2675: ST_TO_ADDR
// end ;
2676: GO 2283
2678: POP
2679: POP
// if not global_defined then
2680: LD_LOC 2
2684: NOT
2685: IFFALSE 2747
// if cl = class_soldier and global_units then
2687: LD_VAR 0 3
2691: PUSH
2692: LD_INT 1
2694: EQUAL
2695: PUSH
2696: LD_LOC 1
2700: AND
2701: IFFALSE 2728
// global_units := [ global_units [ 1 ] ^ result ] else
2703: LD_ADDR_LOC 1
2707: PUSH
2708: LD_LOC 1
2712: PUSH
2713: LD_INT 1
2715: ARRAY
2716: PUSH
2717: LD_VAR 0 8
2721: ADD
2722: PUSH
2723: EMPTY
2724: LIST
2725: ST_TO_ADDR
2726: GO 2747
// global_units := global_units ^ [ result ] ;
2728: LD_ADDR_LOC 1
2732: PUSH
2733: LD_LOC 1
2737: PUSH
2738: LD_VAR 0 8
2742: PUSH
2743: EMPTY
2744: LIST
2745: ADD
2746: ST_TO_ADDR
// if commander then
2747: LD_FROM_VAR 0 7
2751: IFFALSE 2798
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2753: LD_ADDR_EXP 43
2757: PUSH
2758: LD_EXP 43
2762: PPUSH
2763: LD_OWVAR 20
2767: PPUSH
2768: LD_EXP 43
2772: PUSH
2773: LD_OWVAR 20
2777: ARRAY
2778: PUSH
2779: LD_VAR 0 11
2783: ADD
2784: PPUSH
2785: CALL_OW 1
2789: ST_TO_ADDR
// commander := false ;
2790: LD_VAR 0 7
2794: PUSH
2795: LD_INT 0
2797: ST_TO_ADDR
// end ; end ;
2798: LD_VAR 0 8
2802: RET
// function prepare_buldozer ( x , y , r , pos ) ; var nation ; begin
2803: LD_INT 0
2805: PPUSH
2806: PPUSH
// if uc_nation = 2 then
2807: LD_OWVAR 21
2811: PUSH
2812: LD_INT 2
2814: EQUAL
2815: IFFALSE 2837
// begin nation := uc_nation ;
2817: LD_ADDR_VAR 0 6
2821: PUSH
2822: LD_OWVAR 21
2826: ST_TO_ADDR
// uc_nation := 1 ;
2827: LD_ADDR_OWVAR 21
2831: PUSH
2832: LD_INT 1
2834: ST_TO_ADDR
// end else
2835: GO 2845
// nation := false ;
2837: LD_ADDR_VAR 0 6
2841: PUSH
2842: LD_INT 0
2844: ST_TO_ADDR
// vc_engine = engine_combustion ;
2845: LD_ADDR_OWVAR 39
2849: PUSH
2850: LD_INT 1
2852: ST_TO_ADDR
// vc_control = control_manual ;
2853: LD_ADDR_OWVAR 38
2857: PUSH
2858: LD_INT 1
2860: ST_TO_ADDR
// if uc_nation = nation_russian then
2861: LD_OWVAR 21
2865: PUSH
2866: LD_INT 3
2868: EQUAL
2869: IFFALSE 2889
// begin vc_chassis = ru_heavy_tracked ;
2871: LD_ADDR_OWVAR 37
2875: PUSH
2876: LD_INT 24
2878: ST_TO_ADDR
// vc_weapon = ru_bulldozer ;
2879: LD_ADDR_OWVAR 40
2883: PUSH
2884: LD_INT 53
2886: ST_TO_ADDR
// end else
2887: GO 2905
// begin vc_chassis = us_heavy_tracked ;
2889: LD_ADDR_OWVAR 37
2893: PUSH
2894: LD_INT 4
2896: ST_TO_ADDR
// vc_weapon = us_bulldozer ;
2897: LD_ADDR_OWVAR 40
2901: PUSH
2902: LD_INT 14
2904: ST_TO_ADDR
// end ; case pos of 1 :
2905: LD_VAR 0 4
2909: PUSH
2910: LD_INT 1
2912: DOUBLE
2913: EQUAL
2914: IFTRUE 2918
2916: GO 2929
2918: POP
// uc_direction := 2 ; 2 :
2919: LD_ADDR_OWVAR 24
2923: PUSH
2924: LD_INT 2
2926: ST_TO_ADDR
2927: GO 2987
2929: LD_INT 2
2931: DOUBLE
2932: EQUAL
2933: IFTRUE 2937
2935: GO 2948
2937: POP
// uc_direction := 3 ; 3 :
2938: LD_ADDR_OWVAR 24
2942: PUSH
2943: LD_INT 3
2945: ST_TO_ADDR
2946: GO 2987
2948: LD_INT 3
2950: DOUBLE
2951: EQUAL
2952: IFTRUE 2956
2954: GO 2967
2956: POP
// uc_direction := 0 ; 4 :
2957: LD_ADDR_OWVAR 24
2961: PUSH
2962: LD_INT 0
2964: ST_TO_ADDR
2965: GO 2987
2967: LD_INT 4
2969: DOUBLE
2970: EQUAL
2971: IFTRUE 2975
2973: GO 2986
2975: POP
// uc_direction := 5 ; end ;
2976: LD_ADDR_OWVAR 24
2980: PUSH
2981: LD_INT 5
2983: ST_TO_ADDR
2984: GO 2987
2986: POP
// PlaceUnitXYR ( CreateVehicle , x , y , r , false ) ;
2987: CALL_OW 45
2991: PPUSH
2992: LD_VAR 0 1
2996: PPUSH
2997: LD_VAR 0 2
3001: PPUSH
3002: LD_VAR 0 3
3006: PPUSH
3007: LD_INT 0
3009: PPUSH
3010: CALL_OW 50
// if nation then
3014: LD_VAR 0 6
3018: IFFALSE 3030
// uc_nation := nation ;
3020: LD_ADDR_OWVAR 21
3024: PUSH
3025: LD_VAR 0 6
3029: ST_TO_ADDR
// end ;
3030: LD_VAR 0 5
3034: RET
// function prepare_side ( side ) ; var pos , x , y , i , r , sol , br , dep , neng , nsci , nmech , nsol ; begin
3035: LD_INT 0
3037: PPUSH
3038: PPUSH
3039: PPUSH
3040: PPUSH
3041: PPUSH
3042: PPUSH
3043: PPUSH
3044: PPUSH
3045: PPUSH
3046: PPUSH
3047: PPUSH
3048: PPUSH
3049: PPUSH
// pos := Side_Positions [ side ] ;
3050: LD_ADDR_VAR 0 3
3054: PUSH
3055: LD_EXP 34
3059: PUSH
3060: LD_VAR 0 1
3064: ARRAY
3065: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3066: LD_ADDR_OWVAR 21
3070: PUSH
3071: LD_EXP 35
3075: PUSH
3076: LD_VAR 0 1
3080: ARRAY
3081: ST_TO_ADDR
// uc_side := side ;
3082: LD_ADDR_OWVAR 20
3086: PUSH
3087: LD_VAR 0 1
3091: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3092: LD_ADDR_VAR 0 4
3096: PUSH
3097: LD_EXP 40
3101: PUSH
3102: LD_VAR 0 3
3106: ARRAY
3107: PUSH
3108: LD_INT 1
3110: ARRAY
3111: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3112: LD_ADDR_VAR 0 5
3116: PUSH
3117: LD_EXP 40
3121: PUSH
3122: LD_VAR 0 3
3126: ARRAY
3127: PUSH
3128: LD_INT 2
3130: ARRAY
3131: ST_TO_ADDR
// if is_depot then
3132: LD_EXP 15
3136: IFFALSE 3279
// begin bc_type = b_depot ;
3138: LD_ADDR_OWVAR 42
3142: PUSH
3143: LD_INT 0
3145: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , Depot_Def [ pos ] [ 3 ] ) ;
3146: LD_ADDR_VAR 0 10
3150: PUSH
3151: LD_VAR 0 4
3155: PPUSH
3156: LD_VAR 0 5
3160: PPUSH
3161: LD_EXP 40
3165: PUSH
3166: LD_VAR 0 3
3170: ARRAY
3171: PUSH
3172: LD_INT 3
3174: ARRAY
3175: PPUSH
3176: CALL_OW 47
3180: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3181: LD_VAR 0 10
3185: PPUSH
3186: LD_STRING @
3188: PUSH
3189: LD_VAR 0 1
3193: STR
3194: PPUSH
3195: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3199: LD_VAR 0 10
3203: PPUSH
3204: CALL_OW 274
3208: PPUSH
3209: LD_INT 1
3211: PPUSH
3212: LD_EXP 21
3216: PUSH
3217: LD_INT 1
3219: ARRAY
3220: PPUSH
3221: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3225: LD_VAR 0 10
3229: PPUSH
3230: CALL_OW 274
3234: PPUSH
3235: LD_INT 2
3237: PPUSH
3238: LD_EXP 21
3242: PUSH
3243: LD_INT 2
3245: ARRAY
3246: PPUSH
3247: CALL_OW 277
// SetResourceType ( GetBase ( result ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3251: LD_VAR 0 2
3255: PPUSH
3256: CALL_OW 274
3260: PPUSH
3261: LD_INT 3
3263: PPUSH
3264: LD_EXP 21
3268: PUSH
3269: LD_INT 3
3271: ARRAY
3272: PPUSH
3273: CALL_OW 277
// end else
3277: GO 3423
// begin for i := 1 to 3 do
3279: LD_ADDR_VAR 0 6
3283: PUSH
3284: DOUBLE
3285: LD_INT 1
3287: DEC
3288: ST_TO_ADDR
3289: LD_INT 3
3291: PUSH
3292: FOR_TO
3293: IFFALSE 3421
// begin r := starting_resources [ i ] ;
3295: LD_ADDR_VAR 0 7
3299: PUSH
3300: LD_EXP 21
3304: PUSH
3305: LD_VAR 0 6
3309: ARRAY
3310: ST_TO_ADDR
// while r >= 10 do
3311: LD_VAR 0 7
3315: PUSH
3316: LD_INT 10
3318: GREATEREQUAL
3319: IFFALSE 3419
// if r > 50 then
3321: LD_VAR 0 7
3325: PUSH
3326: LD_INT 50
3328: GREATER
3329: IFFALSE 3375
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3331: LD_VAR 0 6
3335: PPUSH
3336: LD_INT 5
3338: PPUSH
3339: LD_VAR 0 4
3343: PPUSH
3344: LD_VAR 0 5
3348: PPUSH
3349: LD_INT 4
3351: PPUSH
3352: LD_INT 0
3354: PPUSH
3355: CALL_OW 60
// r := r - 50 ;
3359: LD_ADDR_VAR 0 7
3363: PUSH
3364: LD_VAR 0 7
3368: PUSH
3369: LD_INT 50
3371: MINUS
3372: ST_TO_ADDR
// end else
3373: GO 3417
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3375: LD_VAR 0 6
3379: PPUSH
3380: LD_VAR 0 7
3384: PUSH
3385: LD_INT 10
3387: DIV
3388: PPUSH
3389: LD_VAR 0 4
3393: PPUSH
3394: LD_VAR 0 5
3398: PPUSH
3399: LD_INT 4
3401: PPUSH
3402: LD_INT 0
3404: PPUSH
3405: CALL_OW 60
// r := 0 ;
3409: LD_ADDR_VAR 0 7
3413: PUSH
3414: LD_INT 0
3416: ST_TO_ADDR
// end ;
3417: GO 3311
// end ;
3419: GO 3292
3421: POP
3422: POP
// end ; x := start_def [ pos ] [ 1 ] ;
3423: LD_ADDR_VAR 0 4
3427: PUSH
3428: LD_EXP 41
3432: PUSH
3433: LD_VAR 0 3
3437: ARRAY
3438: PUSH
3439: LD_INT 1
3441: ARRAY
3442: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3443: LD_ADDR_VAR 0 5
3447: PUSH
3448: LD_EXP 41
3452: PUSH
3453: LD_VAR 0 3
3457: ARRAY
3458: PUSH
3459: LD_INT 2
3461: ARRAY
3462: ST_TO_ADDR
// for r in starting_crates do
3463: LD_ADDR_VAR 0 7
3467: PUSH
3468: LD_EXP 20
3472: PUSH
3473: FOR_IN
3474: IFFALSE 3506
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3476: LD_INT 1
3478: PPUSH
3479: LD_INT 5
3481: PPUSH
3482: LD_VAR 0 4
3486: PPUSH
3487: LD_VAR 0 5
3491: PPUSH
3492: LD_VAR 0 7
3496: PPUSH
3497: LD_INT 0
3499: PPUSH
3500: CALL_OW 60
3504: GO 3473
3506: POP
3507: POP
// if def_morale_flags then
3508: LD_EXP 9
3512: IFFALSE 3591
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3514: LD_ADDR_EXP 45
3518: PUSH
3519: LD_EXP 45
3523: PUSH
3524: LD_VAR 0 1
3528: PPUSH
3529: LD_VAR 0 4
3533: PPUSH
3534: LD_VAR 0 5
3538: PPUSH
3539: LD_INT 1
3541: PUSH
3542: LD_INT 100
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: PUSH
3549: LD_INT 2
3551: PUSH
3552: LD_INT 50
3554: PUSH
3555: EMPTY
3556: LIST
3557: LIST
3558: PUSH
3559: LD_INT 3
3561: PUSH
3562: LD_INT 20
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: PUSH
3569: LD_INT 20
3571: PUSH
3572: LD_INT 100
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: PPUSH
3585: CALL_OW 418
3589: ADD
3590: ST_TO_ADDR
// neng := number_of_people ;
3591: LD_ADDR_VAR 0 11
3595: PUSH
3596: LD_EXP 17
3600: ST_TO_ADDR
// nsol := neng div 4 ;
3601: LD_ADDR_VAR 0 14
3605: PUSH
3606: LD_VAR 0 11
3610: PUSH
3611: LD_INT 4
3613: DIV
3614: ST_TO_ADDR
// neng := neng - nsol ;
3615: LD_ADDR_VAR 0 11
3619: PUSH
3620: LD_VAR 0 11
3624: PUSH
3625: LD_VAR 0 14
3629: MINUS
3630: ST_TO_ADDR
// nsci := neng div 3 ;
3631: LD_ADDR_VAR 0 12
3635: PUSH
3636: LD_VAR 0 11
3640: PUSH
3641: LD_INT 3
3643: DIV
3644: ST_TO_ADDR
// if nsci < 1 then
3645: LD_VAR 0 12
3649: PUSH
3650: LD_INT 1
3652: LESS
3653: IFFALSE 3663
// nsci := 1 ;
3655: LD_ADDR_VAR 0 12
3659: PUSH
3660: LD_INT 1
3662: ST_TO_ADDR
// neng := neng - nsci ;
3663: LD_ADDR_VAR 0 11
3667: PUSH
3668: LD_VAR 0 11
3672: PUSH
3673: LD_VAR 0 12
3677: MINUS
3678: ST_TO_ADDR
// nmech := neng div 2 ;
3679: LD_ADDR_VAR 0 13
3683: PUSH
3684: LD_VAR 0 11
3688: PUSH
3689: LD_INT 2
3691: DIV
3692: ST_TO_ADDR
// neng := neng - nmech ;
3693: LD_ADDR_VAR 0 11
3697: PUSH
3698: LD_VAR 0 11
3702: PUSH
3703: LD_VAR 0 13
3707: MINUS
3708: ST_TO_ADDR
// if neng < 1 then
3709: LD_VAR 0 11
3713: PUSH
3714: LD_INT 1
3716: LESS
3717: IFFALSE 3727
// neng := 1 ;
3719: LD_ADDR_VAR 0 11
3723: PUSH
3724: LD_INT 1
3726: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
3727: LD_ADDR_VAR 0 4
3731: PUSH
3732: LD_EXP 41
3736: PUSH
3737: LD_VAR 0 3
3741: ARRAY
3742: PUSH
3743: LD_INT 1
3745: ARRAY
3746: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3747: LD_ADDR_VAR 0 5
3751: PUSH
3752: LD_EXP 41
3756: PUSH
3757: LD_VAR 0 3
3761: ARRAY
3762: PUSH
3763: LD_INT 2
3765: ARRAY
3766: ST_TO_ADDR
// if not is_depot then
3767: LD_EXP 15
3771: NOT
3772: IFFALSE 3796
// prepare_buldozer ( x , y , 2 , pos ) ;
3774: LD_VAR 0 4
3778: PPUSH
3779: LD_VAR 0 5
3783: PPUSH
3784: LD_INT 2
3786: PPUSH
3787: LD_VAR 0 3
3791: PPUSH
3792: CALL 2803 0 4
// commander := true ;
3796: LD_ADDR_EXP 44
3800: PUSH
3801: LD_INT 1
3803: ST_TO_ADDR
// prepare_people ( side , 1 , class_soldier , x , y , 5 , commander ) ;
3804: LD_VAR 0 1
3808: PPUSH
3809: LD_INT 1
3811: PPUSH
3812: LD_INT 1
3814: PPUSH
3815: LD_VAR 0 4
3819: PPUSH
3820: LD_VAR 0 5
3824: PPUSH
3825: LD_INT 5
3827: PPUSH
3828: LD_ADDR_EXP 44
3832: PPUSH
3833: CALL 2255 0 7
// commander := false ;
3837: LD_ADDR_EXP 44
3841: PUSH
3842: LD_INT 0
3844: ST_TO_ADDR
// prepare_people ( side , nsol - 1 , class_soldier , x , y , 5 , commander ) ;
3845: LD_VAR 0 1
3849: PPUSH
3850: LD_VAR 0 14
3854: PUSH
3855: LD_INT 1
3857: MINUS
3858: PPUSH
3859: LD_INT 1
3861: PPUSH
3862: LD_VAR 0 4
3866: PPUSH
3867: LD_VAR 0 5
3871: PPUSH
3872: LD_INT 5
3874: PPUSH
3875: LD_ADDR_EXP 44
3879: PPUSH
3880: CALL 2255 0 7
// prepare_people ( side , neng , class_engineer , x , y , 5 , commander ) ;
3884: LD_VAR 0 1
3888: PPUSH
3889: LD_VAR 0 11
3893: PPUSH
3894: LD_INT 2
3896: PPUSH
3897: LD_VAR 0 4
3901: PPUSH
3902: LD_VAR 0 5
3906: PPUSH
3907: LD_INT 5
3909: PPUSH
3910: LD_ADDR_EXP 44
3914: PPUSH
3915: CALL 2255 0 7
// prepare_people ( side , nmech , class_mechanic , x , y , 5 , commander ) ;
3919: LD_VAR 0 1
3923: PPUSH
3924: LD_VAR 0 13
3928: PPUSH
3929: LD_INT 3
3931: PPUSH
3932: LD_VAR 0 4
3936: PPUSH
3937: LD_VAR 0 5
3941: PPUSH
3942: LD_INT 5
3944: PPUSH
3945: LD_ADDR_EXP 44
3949: PPUSH
3950: CALL 2255 0 7
// prepare_people ( side , nsci , class_scientistic , x , y , 5 , commander ) ;
3954: LD_VAR 0 1
3958: PPUSH
3959: LD_VAR 0 12
3963: PPUSH
3964: LD_INT 4
3966: PPUSH
3967: LD_VAR 0 4
3971: PPUSH
3972: LD_VAR 0 5
3976: PPUSH
3977: LD_INT 5
3979: PPUSH
3980: LD_ADDR_EXP 44
3984: PPUSH
3985: CALL 2255 0 7
// if not global_defined then
3989: LD_LOC 2
3993: NOT
3994: IFFALSE 4004
// global_defined := true ;
3996: LD_ADDR_LOC 2
4000: PUSH
4001: LD_INT 1
4003: ST_TO_ADDR
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4004: LD_EXP 10
4008: PUSH
4009: LD_INT 20
4011: PPUSH
4012: LD_VAR 0 1
4016: PPUSH
4017: CALL_OW 321
4021: PUSH
4022: LD_INT 1
4024: EQUAL
4025: AND
4026: IFFALSE 4043
// SetTech ( tech_SibDet , side , state_researched ) ;
4028: LD_INT 20
4030: PPUSH
4031: LD_VAR 0 1
4035: PPUSH
4036: LD_INT 2
4038: PPUSH
4039: CALL_OW 322
// if def_siberite_bomb = 1 then
4043: LD_EXP 13
4047: PUSH
4048: LD_INT 1
4050: EQUAL
4051: IFFALSE 4085
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4053: LD_INT 25
4055: PPUSH
4056: LD_VAR 0 1
4060: PPUSH
4061: LD_INT 1
4063: PPUSH
4064: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4068: LD_INT 73
4070: PPUSH
4071: LD_VAR 0 1
4075: PPUSH
4076: LD_INT 1
4078: PPUSH
4079: CALL_OW 322
// end else
4083: GO 4115
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4085: LD_INT 25
4087: PPUSH
4088: LD_VAR 0 1
4092: PPUSH
4093: LD_INT 0
4095: PPUSH
4096: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4100: LD_INT 73
4102: PPUSH
4103: LD_VAR 0 1
4107: PPUSH
4108: LD_INT 0
4110: PPUSH
4111: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4115: LD_INT 24
4117: PPUSH
4118: LD_VAR 0 1
4122: PPUSH
4123: LD_INT 0
4125: PPUSH
4126: CALL_OW 322
// end ;
4130: LD_VAR 0 2
4134: RET
// every 0 0$1 do
4135: GO 4137
4137: DISABLE
// if ( def_siberite_bomb > 1 ) then
4138: LD_EXP 13
4142: PUSH
4143: LD_INT 1
4145: GREATER
4146: IFFALSE 4161
// begin wait ( siberite_bomb_Delay ) ;
4148: LD_EXP 23
4152: PPUSH
4153: CALL_OW 67
// EnableSibFiss ;
4157: CALL 4162 0 0
// end ;
4161: END
// function EnableSibFiss ; var i ; begin
4162: LD_INT 0
4164: PPUSH
4165: PPUSH
// for i := 1 to 8 do
4166: LD_ADDR_VAR 0 2
4170: PUSH
4171: DOUBLE
4172: LD_INT 1
4174: DEC
4175: ST_TO_ADDR
4176: LD_INT 8
4178: PUSH
4179: FOR_TO
4180: IFFALSE 4226
// if Side_Positions [ i ] then
4182: LD_EXP 34
4186: PUSH
4187: LD_VAR 0 2
4191: ARRAY
4192: IFFALSE 4224
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4194: LD_INT 25
4196: PPUSH
4197: LD_VAR 0 2
4201: PPUSH
4202: LD_INT 1
4204: PPUSH
4205: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4209: LD_INT 73
4211: PPUSH
4212: LD_VAR 0 2
4216: PPUSH
4217: LD_INT 1
4219: PPUSH
4220: CALL_OW 322
// end ;
4224: GO 4179
4226: POP
4227: POP
// end ;
4228: LD_VAR 0 1
4232: RET
// function prepare_sides ; var i ; begin
4233: LD_INT 0
4235: PPUSH
4236: PPUSH
// global_units := [ ] ;
4237: LD_ADDR_LOC 1
4241: PUSH
4242: EMPTY
4243: ST_TO_ADDR
// global_defined := false ;
4244: LD_ADDR_LOC 2
4248: PUSH
4249: LD_INT 0
4251: ST_TO_ADDR
// for i := 1 to 8 do
4252: LD_ADDR_VAR 0 2
4256: PUSH
4257: DOUBLE
4258: LD_INT 1
4260: DEC
4261: ST_TO_ADDR
4262: LD_INT 8
4264: PUSH
4265: FOR_TO
4266: IFFALSE 4291
// if Side_Positions [ i ] then
4268: LD_EXP 34
4272: PUSH
4273: LD_VAR 0 2
4277: ARRAY
4278: IFFALSE 4289
// prepare_side ( i ) ;
4280: LD_VAR 0 2
4284: PPUSH
4285: CALL 3035 0 1
4289: GO 4265
4291: POP
4292: POP
// end ;
4293: LD_VAR 0 1
4297: RET
// starting begin disable ( 98 ) ;
4298: LD_INT 98
4300: DISABLE_MARKED
// disable ( 99 ) ;
4301: LD_INT 99
4303: DISABLE_MARKED
// disable ( 400 ) ;
4304: LD_INT 400
4306: DISABLE_MARKED
// disable ( 401 ) ;
4307: LD_INT 401
4309: DISABLE_MARKED
// mp_selectmsg := true ;
4310: LD_ADDR_OWVAR 13
4314: PUSH
4315: LD_INT 1
4317: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4318: CALL 681 0 0
// init_map ;
4322: CALL 436 0 0
// set_shared_visions_and_alliances ;
4326: CALL 1892 0 0
// ResetFog ;
4330: CALL_OW 335
// ClearAllFogForSide ( Player_Side ) ;
4334: LD_EXP 30
4338: PPUSH
4339: CALL_OW 520
// AnimateTrees ( true ) ;
4343: LD_INT 1
4345: PPUSH
4346: CALL_OW 573
// prepare_sides ;
4350: CALL 4233 0 0
// Init_Win_Condition ;
4354: CALL 8211 0 0
// init_shipments ;
4358: CALL 5514 0 0
// init_respawn ;
4362: CALL 6007 0 0
// InitApeman ;
4366: CALL 4689 0 0
// your_side := Player_Side ;
4370: LD_ADDR_OWVAR 2
4374: PUSH
4375: LD_EXP 30
4379: ST_TO_ADDR
// music_nat := Side_Nations [ your_side ] ;
4380: LD_ADDR_OWVAR 71
4384: PUSH
4385: LD_EXP 35
4389: PUSH
4390: LD_OWVAR 2
4394: ARRAY
4395: ST_TO_ADDR
// if IAmSpec then
4396: CALL_OW 531
4400: IFFALSE 4424
// begin fogOff ( true ) ;
4402: LD_INT 1
4404: PPUSH
4405: CALL_OW 344
// CenterNowOnXY ( 104 , 69 ) ;
4409: LD_INT 104
4411: PPUSH
4412: LD_INT 69
4414: PPUSH
4415: CALL_OW 86
// enable ( 400 ) ;
4419: LD_INT 400
4421: ENABLE_MARKED
// end else
4422: GO 4470
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4424: LD_EXP 41
4428: PUSH
4429: LD_EXP 34
4433: PUSH
4434: LD_OWVAR 2
4438: ARRAY
4439: ARRAY
4440: PUSH
4441: LD_INT 1
4443: ARRAY
4444: PPUSH
4445: LD_EXP 41
4449: PUSH
4450: LD_EXP 34
4454: PUSH
4455: LD_OWVAR 2
4459: ARRAY
4460: ARRAY
4461: PUSH
4462: LD_INT 2
4464: ARRAY
4465: PPUSH
4466: CALL_OW 86
// end ; BuildUpAreas := [ nw , ne , sw , se ] ;
4470: LD_ADDR_EXP 56
4474: PUSH
4475: LD_INT 12
4477: PUSH
4478: LD_INT 13
4480: PUSH
4481: LD_INT 14
4483: PUSH
4484: LD_INT 15
4486: PUSH
4487: EMPTY
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: ST_TO_ADDR
// BeginBuildUp ;
4493: CALL 7374 0 0
// end ; end_of_file
4497: END
// every 20 20$00 trigger apemanNumber do
4498: LD_EXP 47
4502: IFFALSE 4535
4504: GO 4506
4506: DISABLE
// begin enable ;
4507: ENABLE
// if apeLevel >= 8 then
4508: LD_EXP 52
4512: PUSH
4513: LD_INT 8
4515: GREATEREQUAL
4516: IFFALSE 4521
// disable else
4518: DISABLE
4519: GO 4535
// apeLevel := apeLevel + 1 ;
4521: LD_ADDR_EXP 52
4525: PUSH
4526: LD_EXP 52
4530: PUSH
4531: LD_INT 1
4533: PLUS
4534: ST_TO_ADDR
// end ;
4535: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
4536: LD_EXP 47
4540: PUSH
4541: LD_EXP 48
4545: LESS
4546: IFFALSE 4686
4548: GO 4550
4550: DISABLE
4551: LD_INT 0
4553: PPUSH
4554: PPUSH
4555: PPUSH
4556: PPUSH
// begin enable ;
4557: ENABLE
// for i := 1 to apemanPos do
4558: LD_ADDR_VAR 0 1
4562: PUSH
4563: DOUBLE
4564: LD_INT 1
4566: DEC
4567: ST_TO_ADDR
4568: LD_EXP 50
4572: PUSH
4573: FOR_TO
4574: IFFALSE 4684
// begin if apemanPlayerCount [ i ] then
4576: LD_EXP 51
4580: PUSH
4581: LD_VAR 0 1
4585: ARRAY
4586: IFFALSE 4682
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
4588: LD_EXP 51
4592: PUSH
4593: LD_VAR 0 1
4597: ARRAY
4598: PUSH
4599: LD_EXP 50
4603: PUSH
4604: LD_VAR 0 1
4608: ARRAY
4609: GREATER
4610: IFFALSE 4682
// begin ape := PrepareApeman ;
4612: LD_ADDR_VAR 0 2
4616: PUSH
4617: CALL 5189 0 0
4621: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
4622: LD_VAR 0 2
4626: PPUSH
4627: LD_EXP 53
4631: PUSH
4632: LD_VAR 0 1
4636: ARRAY
4637: PPUSH
4638: LD_INT 0
4640: PPUSH
4641: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
4645: LD_ADDR_EXP 50
4649: PUSH
4650: LD_EXP 50
4654: PPUSH
4655: LD_VAR 0 1
4659: PPUSH
4660: LD_EXP 50
4664: PUSH
4665: LD_VAR 0 1
4669: ARRAY
4670: PUSH
4671: LD_VAR 0 2
4675: UNION
4676: PPUSH
4677: CALL_OW 1
4681: ST_TO_ADDR
// end ; end ; end ;
4682: GO 4573
4684: POP
4685: POP
// end ;
4686: PPOPN 4
4688: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
4689: LD_INT 0
4691: PPUSH
4692: PPUSH
4693: PPUSH
4694: PPUSH
4695: PPUSH
4696: PPUSH
4697: PPUSH
// playersAmount := 0 ;
4698: LD_ADDR_VAR 0 3
4702: PUSH
4703: LD_INT 0
4705: ST_TO_ADDR
// _apeAreas := [ nw , ne , sw , se , ] ;
4706: LD_ADDR_VAR 0 7
4710: PUSH
4711: LD_INT 12
4713: PUSH
4714: LD_INT 13
4716: PUSH
4717: LD_INT 14
4719: PUSH
4720: LD_INT 15
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4729: LD_ADDR_EXP 53
4733: PUSH
4734: LD_INT 0
4736: PUSH
4737: LD_INT 0
4739: PUSH
4740: LD_INT 0
4742: PUSH
4743: LD_INT 0
4745: PUSH
4746: LD_INT 0
4748: PUSH
4749: LD_INT 0
4751: PUSH
4752: LD_INT 0
4754: PUSH
4755: LD_INT 0
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: ST_TO_ADDR
// for j = 1 to Side_Positions do
4768: LD_ADDR_VAR 0 4
4772: PUSH
4773: DOUBLE
4774: LD_INT 1
4776: DEC
4777: ST_TO_ADDR
4778: LD_EXP 34
4782: PUSH
4783: FOR_TO
4784: IFFALSE 4851
// if Side_Positions [ j ] then
4786: LD_EXP 34
4790: PUSH
4791: LD_VAR 0 4
4795: ARRAY
4796: IFFALSE 4849
// begin playersAmount := playersAmount + 1 ;
4798: LD_ADDR_VAR 0 3
4802: PUSH
4803: LD_VAR 0 3
4807: PUSH
4808: LD_INT 1
4810: PLUS
4811: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
4812: LD_ADDR_EXP 53
4816: PUSH
4817: LD_EXP 53
4821: PPUSH
4822: LD_VAR 0 4
4826: PPUSH
4827: LD_VAR 0 7
4831: PUSH
4832: LD_EXP 34
4836: PUSH
4837: LD_VAR 0 4
4841: ARRAY
4842: ARRAY
4843: PPUSH
4844: CALL_OW 1
4848: ST_TO_ADDR
// end ;
4849: GO 4783
4851: POP
4852: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
4853: LD_ADDR_EXP 49
4857: PUSH
4858: LD_INT 3
4860: PUSH
4861: LD_EXP 19
4865: MUL
4866: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
4867: LD_ADDR_EXP 47
4871: PUSH
4872: LD_VAR 0 3
4876: PUSH
4877: LD_EXP 49
4881: MUL
4882: ST_TO_ADDR
// apemanLimit := apemanNumber ;
4883: LD_ADDR_EXP 48
4887: PUSH
4888: LD_EXP 47
4892: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4893: LD_ADDR_EXP 50
4897: PUSH
4898: LD_INT 0
4900: PUSH
4901: LD_INT 0
4903: PUSH
4904: LD_INT 0
4906: PUSH
4907: LD_INT 0
4909: PUSH
4910: LD_INT 0
4912: PUSH
4913: LD_INT 0
4915: PUSH
4916: LD_INT 0
4918: PUSH
4919: LD_INT 0
4921: PUSH
4922: EMPTY
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4932: LD_ADDR_EXP 51
4936: PUSH
4937: LD_INT 0
4939: PUSH
4940: LD_INT 0
4942: PUSH
4943: LD_INT 0
4945: PUSH
4946: LD_INT 0
4948: PUSH
4949: LD_INT 0
4951: PUSH
4952: LD_INT 0
4954: PUSH
4955: LD_INT 0
4957: PUSH
4958: LD_INT 0
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: ST_TO_ADDR
// apeLevel := 1 ;
4971: LD_ADDR_EXP 52
4975: PUSH
4976: LD_INT 1
4978: ST_TO_ADDR
// if not apemanNumber then
4979: LD_EXP 47
4983: NOT
4984: IFFALSE 4988
// exit ;
4986: GO 5184
// for i := 1 to apemanPerPlayer do
4988: LD_ADDR_VAR 0 2
4992: PUSH
4993: DOUBLE
4994: LD_INT 1
4996: DEC
4997: ST_TO_ADDR
4998: LD_EXP 49
5002: PUSH
5003: FOR_TO
5004: IFFALSE 5182
// begin for j := 1 to Side_Positions do
5006: LD_ADDR_VAR 0 4
5010: PUSH
5011: DOUBLE
5012: LD_INT 1
5014: DEC
5015: ST_TO_ADDR
5016: LD_EXP 34
5020: PUSH
5021: FOR_TO
5022: IFFALSE 5178
// if Side_Positions [ j ] then
5024: LD_EXP 34
5028: PUSH
5029: LD_VAR 0 4
5033: ARRAY
5034: IFFALSE 5176
// begin pos := Side_Positions [ j ] ;
5036: LD_ADDR_VAR 0 6
5040: PUSH
5041: LD_EXP 34
5045: PUSH
5046: LD_VAR 0 4
5050: ARRAY
5051: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5052: LD_ADDR_EXP 51
5056: PUSH
5057: LD_EXP 51
5061: PPUSH
5062: LD_VAR 0 4
5066: PPUSH
5067: LD_EXP 51
5071: PUSH
5072: LD_VAR 0 4
5076: ARRAY
5077: PUSH
5078: LD_INT 1
5080: PLUS
5081: PPUSH
5082: CALL_OW 1
5086: ST_TO_ADDR
// ape := PrepareApeman ;
5087: LD_ADDR_VAR 0 5
5091: PUSH
5092: CALL 5189 0 0
5096: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5097: LD_ADDR_EXP 50
5101: PUSH
5102: LD_EXP 50
5106: PPUSH
5107: LD_VAR 0 4
5111: PPUSH
5112: LD_EXP 50
5116: PUSH
5117: LD_VAR 0 4
5121: ARRAY
5122: PPUSH
5123: LD_EXP 50
5127: PUSH
5128: LD_VAR 0 4
5132: ARRAY
5133: PUSH
5134: LD_INT 1
5136: PLUS
5137: PPUSH
5138: LD_VAR 0 5
5142: PPUSH
5143: CALL_OW 1
5147: PPUSH
5148: CALL_OW 1
5152: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5153: LD_VAR 0 5
5157: PPUSH
5158: LD_EXP 53
5162: PUSH
5163: LD_VAR 0 4
5167: ARRAY
5168: PPUSH
5169: LD_INT 0
5171: PPUSH
5172: CALL_OW 49
// end ;
5176: GO 5021
5178: POP
5179: POP
// end ;
5180: GO 5003
5182: POP
5183: POP
// end ;
5184: LD_VAR 0 1
5188: RET
// export function PrepareApeman ; var bonus ; begin
5189: LD_INT 0
5191: PPUSH
5192: PPUSH
// uc_side := 0 ;
5193: LD_ADDR_OWVAR 20
5197: PUSH
5198: LD_INT 0
5200: ST_TO_ADDR
// uc_nation := 0 ;
5201: LD_ADDR_OWVAR 21
5205: PUSH
5206: LD_INT 0
5208: ST_TO_ADDR
// InitHc ;
5209: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
5213: LD_ADDR_VAR 0 2
5217: PUSH
5218: LD_INT 1
5220: NEG
5221: PUSH
5222: LD_INT 0
5224: PUSH
5225: LD_INT 1
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: LIST
5232: PUSH
5233: LD_OWVAR 1
5237: PUSH
5238: LD_INT 3
5240: MOD
5241: PUSH
5242: LD_INT 1
5244: PLUS
5245: ARRAY
5246: ST_TO_ADDR
// hc_class := class_apeman ;
5247: LD_ADDR_OWVAR 28
5251: PUSH
5252: LD_INT 12
5254: ST_TO_ADDR
// hc_gallery :=  ;
5255: LD_ADDR_OWVAR 33
5259: PUSH
5260: LD_STRING 
5262: ST_TO_ADDR
// hc_name :=  ;
5263: LD_ADDR_OWVAR 26
5267: PUSH
5268: LD_STRING 
5270: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
5271: LD_ADDR_OWVAR 31
5275: PUSH
5276: LD_EXP 52
5280: PUSH
5281: LD_VAR 0 2
5285: PLUS
5286: PUSH
5287: LD_EXP 52
5291: PUSH
5292: LD_VAR 0 2
5296: PLUS
5297: PUSH
5298: LD_EXP 52
5302: PUSH
5303: LD_VAR 0 2
5307: PLUS
5308: PUSH
5309: LD_EXP 52
5313: PUSH
5314: LD_VAR 0 2
5318: PLUS
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
5326: LD_ADDR_OWVAR 35
5330: PUSH
5331: LD_INT 10
5333: PUSH
5334: LD_VAR 0 2
5338: MUL
5339: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5340: LD_ADDR_OWVAR 29
5344: PUSH
5345: LD_INT 12
5347: PUSH
5348: LD_INT 10
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: ST_TO_ADDR
// result := CreateHuman ;
5355: LD_ADDR_VAR 0 1
5359: PUSH
5360: CALL_OW 44
5364: ST_TO_ADDR
// end ;
5365: LD_VAR 0 1
5369: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
5370: LD_INT 0
5372: PPUSH
5373: PPUSH
5374: PPUSH
// if not ape then
5375: LD_VAR 0 1
5379: NOT
5380: IFFALSE 5384
// exit ;
5382: GO 5509
// side := GetSide ( ape ) ;
5384: LD_ADDR_VAR 0 3
5388: PUSH
5389: LD_VAR 0 1
5393: PPUSH
5394: CALL_OW 255
5398: ST_TO_ADDR
// if not side then
5399: LD_VAR 0 3
5403: NOT
5404: IFFALSE 5458
// begin for i = 1 to apemanPos do
5406: LD_ADDR_VAR 0 4
5410: PUSH
5411: DOUBLE
5412: LD_INT 1
5414: DEC
5415: ST_TO_ADDR
5416: LD_EXP 50
5420: PUSH
5421: FOR_TO
5422: IFFALSE 5456
// if ape in apemanPos [ i ] then
5424: LD_VAR 0 1
5428: PUSH
5429: LD_EXP 50
5433: PUSH
5434: LD_VAR 0 4
5438: ARRAY
5439: IN
5440: IFFALSE 5454
// begin side := i ;
5442: LD_ADDR_VAR 0 3
5446: PUSH
5447: LD_VAR 0 4
5451: ST_TO_ADDR
// break ;
5452: GO 5456
// end ;
5454: GO 5421
5456: POP
5457: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
5458: LD_ADDR_EXP 50
5462: PUSH
5463: LD_EXP 50
5467: PPUSH
5468: LD_VAR 0 3
5472: PPUSH
5473: LD_EXP 50
5477: PUSH
5478: LD_VAR 0 3
5482: ARRAY
5483: PUSH
5484: LD_VAR 0 1
5488: DIFF
5489: PPUSH
5490: CALL_OW 1
5494: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
5495: LD_ADDR_EXP 47
5499: PUSH
5500: LD_EXP 47
5504: PUSH
5505: LD_INT 1
5507: MINUS
5508: ST_TO_ADDR
// end ; end_of_file
5509: LD_VAR 0 2
5513: RET
// var shipment , tictac ; export function init_shipments ; begin
5514: LD_INT 0
5516: PPUSH
// shipment := Rand ( 0 , 3 ) ;
5517: LD_ADDR_LOC 4
5521: PUSH
5522: LD_INT 0
5524: PPUSH
5525: LD_INT 3
5527: PPUSH
5528: CALL_OW 12
5532: ST_TO_ADDR
// tictac := 0 ;
5533: LD_ADDR_LOC 5
5537: PUSH
5538: LD_INT 0
5540: ST_TO_ADDR
// end ;
5541: LD_VAR 0 1
5545: RET
// every 0 0$5 + 0 0$1.1 do var d ;
5546: GO 5548
5548: DISABLE
5549: LD_INT 0
5551: PPUSH
// begin case tick of 1 .. 1 1$0 :
5552: LD_OWVAR 1
5556: PUSH
5557: LD_INT 1
5559: DOUBLE
5560: GREATEREQUAL
5561: IFFALSE 5569
5563: LD_INT 2100
5565: DOUBLE
5566: LESSEQUAL
5567: IFTRUE 5571
5569: GO 5582
5571: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5572: LD_ADDR_VAR 0 1
5576: PUSH
5577: LD_INT 150
5579: ST_TO_ADDR
5580: GO 5765
5582: LD_INT 2100
5584: PUSH
5585: LD_INT 1
5587: PLUS
5588: DOUBLE
5589: GREATEREQUAL
5590: IFFALSE 5598
5592: LD_INT 10500
5594: DOUBLE
5595: LESSEQUAL
5596: IFTRUE 5600
5598: GO 5611
5600: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5601: LD_ADDR_VAR 0 1
5605: PUSH
5606: LD_INT 100
5608: ST_TO_ADDR
5609: GO 5765
5611: LD_INT 10500
5613: PUSH
5614: LD_INT 1
5616: PLUS
5617: DOUBLE
5618: GREATEREQUAL
5619: IFFALSE 5627
5621: LD_INT 21000
5623: DOUBLE
5624: LESSEQUAL
5625: IFTRUE 5629
5627: GO 5640
5629: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5630: LD_ADDR_VAR 0 1
5634: PUSH
5635: LD_INT 90
5637: ST_TO_ADDR
5638: GO 5765
5640: LD_INT 21000
5642: PUSH
5643: LD_INT 1
5645: PLUS
5646: DOUBLE
5647: GREATEREQUAL
5648: IFFALSE 5656
5650: LD_INT 42000
5652: DOUBLE
5653: LESSEQUAL
5654: IFTRUE 5658
5656: GO 5669
5658: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5659: LD_ADDR_VAR 0 1
5663: PUSH
5664: LD_INT 70
5666: ST_TO_ADDR
5667: GO 5765
5669: LD_INT 42000
5671: PUSH
5672: LD_INT 1
5674: PLUS
5675: DOUBLE
5676: GREATEREQUAL
5677: IFFALSE 5685
5679: LD_INT 63000
5681: DOUBLE
5682: LESSEQUAL
5683: IFTRUE 5687
5685: GO 5698
5687: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5688: LD_ADDR_VAR 0 1
5692: PUSH
5693: LD_INT 60
5695: ST_TO_ADDR
5696: GO 5765
5698: LD_INT 63000
5700: PUSH
5701: LD_INT 1
5703: PLUS
5704: DOUBLE
5705: GREATEREQUAL
5706: IFFALSE 5714
5708: LD_INT 105000
5710: DOUBLE
5711: LESSEQUAL
5712: IFTRUE 5716
5714: GO 5727
5716: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5717: LD_ADDR_VAR 0 1
5721: PUSH
5722: LD_INT 35
5724: ST_TO_ADDR
5725: GO 5765
5727: LD_INT 105000
5729: PUSH
5730: LD_INT 1
5732: PLUS
5733: DOUBLE
5734: GREATEREQUAL
5735: IFFALSE 5743
5737: LD_INT 630000
5739: DOUBLE
5740: LESSEQUAL
5741: IFTRUE 5745
5743: GO 5756
5745: POP
// d := 20 ; else
5746: LD_ADDR_VAR 0 1
5750: PUSH
5751: LD_INT 20
5753: ST_TO_ADDR
5754: GO 5765
5756: POP
// d := 0 ; end ;
5757: LD_ADDR_VAR 0 1
5761: PUSH
5762: LD_INT 0
5764: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5765: LD_INT 1
5767: PPUSH
5768: LD_INT 10000
5770: PPUSH
5771: CALL_OW 12
5775: PUSH
5776: LD_VAR 0 1
5780: PUSH
5781: LD_EXP 22
5785: MUL
5786: LESSEQUAL
5787: IFFALSE 5863
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5789: LD_INT 1
5791: PPUSH
5792: LD_INT 140
5794: PPUSH
5795: CALL_OW 12
5799: PPUSH
5800: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
5804: LD_ADDR_LOC 4
5808: PUSH
5809: LD_LOC 4
5813: PUSH
5814: LD_INT 1
5816: PLUS
5817: PUSH
5818: LD_INT 4
5820: MOD
5821: ST_TO_ADDR
// if GetResourceArea ( nw + shipment , mat_cans ) < 50 then
5822: LD_INT 12
5824: PUSH
5825: LD_LOC 4
5829: PLUS
5830: PPUSH
5831: LD_INT 1
5833: PPUSH
5834: CALL_OW 287
5838: PUSH
5839: LD_INT 50
5841: LESS
5842: IFFALSE 5863
// CreateCratesArea ( 5 , nw + shipment , true ) ;
5844: LD_INT 5
5846: PPUSH
5847: LD_INT 12
5849: PUSH
5850: LD_LOC 4
5854: PLUS
5855: PPUSH
5856: LD_INT 1
5858: PPUSH
5859: CALL_OW 55
// end ; enable ;
5863: ENABLE
// end ;
5864: PPOPN 1
5866: END
// every 0 0$10 trigger TICK > ( ( 3 3$0 * tictac ) + tictac * ( 1 1$30 - shipments_density * ( 0 0$2 ) ) ) do var i , amount ;
5867: LD_OWVAR 1
5871: PUSH
5872: LD_INT 6300
5874: PUSH
5875: LD_LOC 5
5879: MUL
5880: PUSH
5881: LD_LOC 5
5885: PUSH
5886: LD_INT 3150
5888: PUSH
5889: LD_EXP 22
5893: PUSH
5894: LD_INT 70
5896: MUL
5897: MINUS
5898: MUL
5899: PLUS
5900: GREATER
5901: IFFALSE 6004
5903: GO 5905
5905: DISABLE
5906: LD_INT 0
5908: PPUSH
5909: PPUSH
// begin tictac := tictac + 1 ;
5910: LD_ADDR_LOC 5
5914: PUSH
5915: LD_LOC 5
5919: PUSH
5920: LD_INT 1
5922: PLUS
5923: ST_TO_ADDR
// amount := Rand ( 3 , 5 ) ;
5924: LD_ADDR_VAR 0 2
5928: PUSH
5929: LD_INT 3
5931: PPUSH
5932: LD_INT 5
5934: PPUSH
5935: CALL_OW 12
5939: ST_TO_ADDR
// for i = 0 to 3 do
5940: LD_ADDR_VAR 0 1
5944: PUSH
5945: DOUBLE
5946: LD_INT 0
5948: DEC
5949: ST_TO_ADDR
5950: LD_INT 3
5952: PUSH
5953: FOR_TO
5954: IFFALSE 6001
// if GetResourceArea ( Base1 + i , mat_cans ) < 20 then
5956: LD_INT 1
5958: PUSH
5959: LD_VAR 0 1
5963: PLUS
5964: PPUSH
5965: LD_INT 1
5967: PPUSH
5968: CALL_OW 287
5972: PUSH
5973: LD_INT 20
5975: LESS
5976: IFFALSE 5999
// CreateCratesArea ( amount , Base1 + i , true ) ;
5978: LD_VAR 0 2
5982: PPUSH
5983: LD_INT 1
5985: PUSH
5986: LD_VAR 0 1
5990: PLUS
5991: PPUSH
5992: LD_INT 1
5994: PPUSH
5995: CALL_OW 55
5999: GO 5953
6001: POP
6002: POP
// enable ;
6003: ENABLE
// end ; end_of_file
6004: PPOPN 2
6006: END
// var respawn_queue ; export function init_respawn ; begin
6007: LD_INT 0
6009: PPUSH
// if not def_people_respawning then
6010: LD_EXP 12
6014: NOT
6015: IFFALSE 6019
// exit ;
6017: GO 6058
// respawn_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6019: LD_ADDR_LOC 6
6023: PUSH
6024: LD_INT 0
6026: PUSH
6027: LD_INT 0
6029: PUSH
6030: LD_INT 0
6032: PUSH
6033: LD_INT 0
6035: PUSH
6036: LD_INT 0
6038: PUSH
6039: LD_INT 0
6041: PUSH
6042: LD_INT 0
6044: PUSH
6045: LD_INT 0
6047: PUSH
6048: EMPTY
6049: LIST
6050: LIST
6051: LIST
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: ST_TO_ADDR
// end ;
6058: LD_VAR 0 1
6062: RET
// every 0 0$10 trigger def_people_respawning do var un , list , time , side ;
6063: LD_EXP 12
6067: IFFALSE 6263
6069: GO 6071
6071: DISABLE
6072: LD_INT 0
6074: PPUSH
6075: PPUSH
6076: PPUSH
6077: PPUSH
// begin for side = 1 to Side_Positions do
6078: LD_ADDR_VAR 0 4
6082: PUSH
6083: DOUBLE
6084: LD_INT 1
6086: DEC
6087: ST_TO_ADDR
6088: LD_EXP 34
6092: PUSH
6093: FOR_TO
6094: IFFALSE 6260
// if Side_Positions [ side ] then
6096: LD_EXP 34
6100: PUSH
6101: LD_VAR 0 4
6105: ARRAY
6106: IFFALSE 6258
// begin list := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6108: LD_ADDR_VAR 0 2
6112: PUSH
6113: LD_INT 22
6115: PUSH
6116: LD_VAR 0 4
6120: PUSH
6121: EMPTY
6122: LIST
6123: LIST
6124: PUSH
6125: LD_INT 21
6127: PUSH
6128: LD_INT 1
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: PUSH
6135: LD_INT 3
6137: PUSH
6138: LD_INT 23
6140: PUSH
6141: LD_INT 0
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: PPUSH
6154: CALL_OW 69
6158: ST_TO_ADDR
// if ( list < number_of_people ) and ( not respawn_queue [ side ] ) then
6159: LD_VAR 0 2
6163: PUSH
6164: LD_EXP 17
6168: LESS
6169: PUSH
6170: LD_LOC 6
6174: PUSH
6175: LD_VAR 0 4
6179: ARRAY
6180: NOT
6181: AND
6182: IFFALSE 6198
// set_queue ( side , TICK ) ;
6184: LD_VAR 0 4
6188: PPUSH
6189: LD_OWVAR 1
6193: PPUSH
6194: CALL 6497 0 2
// time := TICK - respawn_queue [ side ] ;
6198: LD_ADDR_VAR 0 3
6202: PUSH
6203: LD_OWVAR 1
6207: PUSH
6208: LD_LOC 6
6212: PUSH
6213: LD_VAR 0 4
6217: ARRAY
6218: MINUS
6219: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6220: LD_LOC 6
6224: PUSH
6225: LD_VAR 0 4
6229: ARRAY
6230: PUSH
6231: LD_VAR 0 3
6235: PUSH
6236: LD_EXP 25
6240: GREATER
6241: AND
6242: IFFALSE 6258
// respawn_character ( side , time ) ;
6244: LD_VAR 0 4
6248: PPUSH
6249: LD_VAR 0 3
6253: PPUSH
6254: CALL 6266 0 2
// end ;
6258: GO 6093
6260: POP
6261: POP
// enable ;
6262: ENABLE
// end ;
6263: PPOPN 4
6265: END
// function respawn_character ( side , time ) ; var dep ; begin
6266: LD_INT 0
6268: PPUSH
6269: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6270: LD_INT 0
6272: PPUSH
6273: LD_INT 1
6275: PPUSH
6276: CALL_OW 12
6280: PUSH
6281: LD_VAR 0 2
6285: PUSH
6286: LD_EXP 26
6290: LESS
6291: AND
6292: IFFALSE 6296
// exit ;
6294: GO 6492
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6296: LD_ADDR_VAR 0 4
6300: PUSH
6301: LD_INT 22
6303: PUSH
6304: LD_VAR 0 1
6308: PUSH
6309: EMPTY
6310: LIST
6311: LIST
6312: PUSH
6313: LD_INT 2
6315: PUSH
6316: LD_INT 30
6318: PUSH
6319: LD_INT 0
6321: PUSH
6322: EMPTY
6323: LIST
6324: LIST
6325: PUSH
6326: LD_INT 30
6328: PUSH
6329: LD_INT 1
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: LIST
6340: PUSH
6341: LD_INT 50
6343: PUSH
6344: EMPTY
6345: LIST
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: LIST
6351: PPUSH
6352: CALL_OW 69
6356: ST_TO_ADDR
// if not dep then
6357: LD_VAR 0 4
6361: NOT
6362: IFFALSE 6368
// exit else
6364: GO 6492
6366: GO 6392
// dep := dep [ Rand ( 1 , dep ) ] ;
6368: LD_ADDR_VAR 0 4
6372: PUSH
6373: LD_VAR 0 4
6377: PUSH
6378: LD_INT 1
6380: PPUSH
6381: LD_VAR 0 4
6385: PPUSH
6386: CALL_OW 12
6390: ARRAY
6391: ST_TO_ADDR
// uc_side := side ;
6392: LD_ADDR_OWVAR 20
6396: PUSH
6397: LD_VAR 0 1
6401: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6402: LD_ADDR_OWVAR 21
6406: PUSH
6407: LD_EXP 35
6411: PUSH
6412: LD_VAR 0 1
6416: ARRAY
6417: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , initial_level div 2 ) ;
6418: LD_INT 0
6420: PPUSH
6421: LD_INT 0
6423: PPUSH
6424: LD_EXP 18
6428: PUSH
6429: LD_INT 2
6431: DIV
6432: PPUSH
6433: CALL_OW 380
// hc_importance := 0 ;
6437: LD_ADDR_OWVAR 32
6441: PUSH
6442: LD_INT 0
6444: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
6445: CALL_OW 44
6449: PPUSH
6450: LD_VAR 0 4
6454: PPUSH
6455: CALL_OW 250
6459: PPUSH
6460: LD_VAR 0 4
6464: PPUSH
6465: CALL_OW 251
6469: PPUSH
6470: LD_INT 10
6472: PPUSH
6473: LD_INT 1
6475: PPUSH
6476: CALL_OW 50
// set_queue ( side , 0 ) ;
6480: LD_VAR 0 1
6484: PPUSH
6485: LD_INT 0
6487: PPUSH
6488: CALL 6497 0 2
// end ;
6492: LD_VAR 0 3
6496: RET
// function set_queue ( side , time ) ; begin
6497: LD_INT 0
6499: PPUSH
// respawn_queue := Delete ( respawn_queue , side ) ;
6500: LD_ADDR_LOC 6
6504: PUSH
6505: LD_LOC 6
6509: PPUSH
6510: LD_VAR 0 1
6514: PPUSH
6515: CALL_OW 3
6519: ST_TO_ADDR
// respawn_queue := Insert ( respawn_queue , side , time ) ;
6520: LD_ADDR_LOC 6
6524: PUSH
6525: LD_LOC 6
6529: PPUSH
6530: LD_VAR 0 1
6534: PPUSH
6535: LD_VAR 0 2
6539: PPUSH
6540: CALL_OW 2
6544: ST_TO_ADDR
// end ; end_of_file
6545: LD_VAR 0 3
6549: RET
// var strength ; function Update_Flags ; var un ; begin
6550: LD_INT 0
6552: PPUSH
6553: PPUSH
// for un in battle_flags_id do
6554: LD_ADDR_VAR 0 2
6558: PUSH
6559: LD_EXP 45
6563: PUSH
6564: FOR_IN
6565: IFFALSE 6640
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6567: LD_VAR 0 2
6571: PPUSH
6572: LD_INT 1
6574: PUSH
6575: LD_LOC 7
6579: PUSH
6580: EMPTY
6581: LIST
6582: LIST
6583: PUSH
6584: LD_INT 2
6586: PUSH
6587: LD_LOC 7
6591: PUSH
6592: LD_INT 2
6594: DIV
6595: PUSH
6596: EMPTY
6597: LIST
6598: LIST
6599: PUSH
6600: LD_INT 3
6602: PUSH
6603: LD_LOC 7
6607: PUSH
6608: LD_INT 5
6610: DIV
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: PUSH
6616: LD_INT 20
6618: PUSH
6619: LD_LOC 7
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: PPUSH
6634: CALL_OW 423
6638: GO 6564
6640: POP
6641: POP
// end ;
6642: LD_VAR 0 1
6646: RET
// every 0 0$0.1 do var un ;
6647: GO 6649
6649: DISABLE
6650: LD_INT 0
6652: PPUSH
// begin if not def_morale_flags then
6653: LD_EXP 9
6657: NOT
6658: IFFALSE 6662
// exit ;
6660: GO 6739
// if not morale_decreasing_time then
6662: LD_EXP 46
6666: NOT
6667: IFFALSE 6671
// exit ;
6669: GO 6739
// strength = 100 ;
6671: LD_ADDR_LOC 7
6675: PUSH
6676: LD_INT 100
6678: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
6679: LD_EXP 46
6683: PPUSH
6684: CALL_OW 67
// strength := strength - 1 ;
6688: LD_ADDR_LOC 7
6692: PUSH
6693: LD_LOC 7
6697: PUSH
6698: LD_INT 1
6700: MINUS
6701: ST_TO_ADDR
// Update_Flags ;
6702: CALL 6550 0 0
// until not strength ;
6706: LD_LOC 7
6710: NOT
6711: IFFALSE 6679
// for un in battle_flags_id do
6713: LD_ADDR_VAR 0 1
6717: PUSH
6718: LD_EXP 45
6722: PUSH
6723: FOR_IN
6724: IFFALSE 6737
// KillBattleFlag ( un ) ;
6726: LD_VAR 0 1
6730: PPUSH
6731: CALL_OW 419
6735: GO 6723
6737: POP
6738: POP
// end ; end_of_file
6739: PPOPN 1
6741: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
6742: LD_INT 0
6744: PPUSH
6745: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
6746: LD_ADDR_VAR 0 2
6750: PUSH
6751: LD_STRING #Multi1x1-Time
6753: PUSH
6754: LD_OWVAR 1
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: ST_TO_ADDR
// if WaitServerStrings then
6763: LD_EXP 55
6767: IFFALSE 6785
// AllStrings = AllStrings ^ WaitServerStrings ;
6769: LD_ADDR_VAR 0 2
6773: PUSH
6774: LD_VAR 0 2
6778: PUSH
6779: LD_EXP 55
6783: ADD
6784: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
6785: LD_INT 0
6787: PUSH
6788: LD_EXP 23
6792: PUSH
6793: LD_OWVAR 1
6797: MINUS
6798: LESSEQUAL
6799: IFFALSE 6830
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
6801: LD_ADDR_VAR 0 2
6805: PUSH
6806: LD_VAR 0 2
6810: PUSH
6811: LD_STRING #allowedsibbomb
6813: PUSH
6814: LD_EXP 23
6818: PUSH
6819: LD_OWVAR 1
6823: MINUS
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: ADD
6829: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
6830: LD_INT 0
6832: PUSH
6833: LD_EXP 58
6837: PUSH
6838: LD_OWVAR 1
6842: MINUS
6843: LESSEQUAL
6844: IFFALSE 6875
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
6846: LD_ADDR_VAR 0 2
6850: PUSH
6851: LD_VAR 0 2
6855: PUSH
6856: LD_STRING #builduptime
6858: PUSH
6859: LD_EXP 58
6863: PUSH
6864: LD_OWVAR 1
6868: MINUS
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: ADD
6874: ST_TO_ADDR
// if ( ExtraStrings ) then
6875: LD_EXP 54
6879: IFFALSE 6901
// AllStrings := AllStrings ^  ^ ExtraStrings ;
6881: LD_ADDR_VAR 0 2
6885: PUSH
6886: LD_VAR 0 2
6890: PUSH
6891: LD_STRING 
6893: ADD
6894: PUSH
6895: LD_EXP 54
6899: ADD
6900: ST_TO_ADDR
// Display_Strings := AllStrings ;
6901: LD_ADDR_OWVAR 47
6905: PUSH
6906: LD_VAR 0 2
6910: ST_TO_ADDR
// end ;
6911: LD_VAR 0 1
6915: RET
// every 0 0$1 do
6916: GO 6918
6918: DISABLE
// begin ShowTimer ;
6919: CALL 6742 0 0
// enable ;
6923: ENABLE
// end ; end_of_file
6924: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6925: LD_VAR 0 1
6929: PPUSH
6930: CALL_OW 266
6934: PUSH
6935: LD_INT 0
6937: PUSH
6938: LD_INT 1
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: IN
6945: IFFALSE 6970
// SetBName ( b , @ & GetSide ( b ) ) ;
6947: LD_VAR 0 1
6951: PPUSH
6952: LD_STRING @
6954: PUSH
6955: LD_VAR 0 1
6959: PPUSH
6960: CALL_OW 255
6964: STR
6965: PPUSH
6966: CALL_OW 500
// end ;
6970: PPOPN 2
6972: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6973: LD_VAR 0 1
6977: PPUSH
6978: CALL_OW 266
6982: PUSH
6983: LD_INT 0
6985: PUSH
6986: LD_INT 1
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: IN
6993: IFFALSE 7018
// SetBName ( b , @ & GetSide ( b ) ) ;
6995: LD_VAR 0 1
6999: PPUSH
7000: LD_STRING @
7002: PUSH
7003: LD_VAR 0 1
7007: PPUSH
7008: CALL_OW 255
7012: STR
7013: PPUSH
7014: CALL_OW 500
// end ;
7018: PPOPN 3
7020: END
// on VehicleConstructed ( veh , fac ) do var side ;
7021: LD_INT 0
7023: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7024: LD_VAR 0 1
7028: PPUSH
7029: CALL_OW 263
7033: PUSH
7034: LD_INT 5
7036: EQUAL
7037: IFFALSE 7179
// begin side := GetSide ( veh ) ;
7039: LD_ADDR_VAR 0 3
7043: PUSH
7044: LD_VAR 0 1
7048: PPUSH
7049: CALL_OW 255
7053: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7054: LD_ADDR_EXP 50
7058: PUSH
7059: LD_EXP 50
7063: PPUSH
7064: LD_VAR 0 3
7068: PPUSH
7069: LD_EXP 50
7073: PUSH
7074: LD_VAR 0 3
7078: ARRAY
7079: PPUSH
7080: LD_INT 52
7082: PUSH
7083: EMPTY
7084: LIST
7085: PPUSH
7086: CALL_OW 72
7090: PUSH
7091: LD_INT 22
7093: PUSH
7094: LD_VAR 0 3
7098: PUSH
7099: EMPTY
7100: LIST
7101: LIST
7102: PUSH
7103: LD_INT 2
7105: PUSH
7106: LD_INT 33
7108: PUSH
7109: LD_INT 5
7111: PUSH
7112: EMPTY
7113: LIST
7114: LIST
7115: PUSH
7116: LD_INT 25
7118: PUSH
7119: LD_INT 12
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: PUSH
7126: LD_INT 25
7128: PUSH
7129: LD_INT 15
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: PUSH
7136: LD_INT 25
7138: PUSH
7139: LD_INT 16
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: PUSH
7146: LD_INT 25
7148: PUSH
7149: LD_INT 17
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: PPUSH
7168: CALL_OW 69
7172: UNION
7173: PPUSH
7174: CALL_OW 1
7178: ST_TO_ADDR
// end ; end ;
7179: PPOPN 3
7181: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7182: LD_INT 0
7184: PPUSH
7185: PPUSH
7186: PPUSH
7187: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7188: LD_VAR 0 1
7192: PPUSH
7193: CALL_OW 257
7197: PUSH
7198: LD_INT 12
7200: PUSH
7201: LD_INT 15
7203: PUSH
7204: LD_INT 17
7206: PUSH
7207: LD_INT 16
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: IN
7216: PUSH
7217: LD_VAR 0 1
7221: PPUSH
7222: CALL_OW 263
7226: PUSH
7227: LD_INT 5
7229: EQUAL
7230: OR
7231: IFFALSE 7242
// ApeKilled ( j ) ;
7233: LD_VAR 0 1
7237: PPUSH
7238: CALL 5370 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7242: LD_VAR 0 1
7246: PPUSH
7247: CALL_OW 266
7251: PUSH
7252: LD_INT 0
7254: PUSH
7255: LD_INT 1
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: IN
7262: IFFALSE 7344
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7264: LD_ADDR_VAR 0 4
7268: PUSH
7269: LD_EXP 34
7273: PUSH
7274: LD_VAR 0 1
7278: PPUSH
7279: CALL_OW 255
7283: ARRAY
7284: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7285: LD_ADDR_VAR 0 2
7289: PUSH
7290: LD_EXP 41
7294: PUSH
7295: LD_VAR 0 4
7299: ARRAY
7300: PUSH
7301: LD_INT 1
7303: ARRAY
7304: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7305: LD_ADDR_VAR 0 3
7309: PUSH
7310: LD_EXP 41
7314: PUSH
7315: LD_VAR 0 4
7319: ARRAY
7320: PUSH
7321: LD_INT 2
7323: ARRAY
7324: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7325: LD_VAR 0 2
7329: PPUSH
7330: LD_VAR 0 3
7334: PPUSH
7335: CALL_OW 420
7339: PPUSH
7340: CALL_OW 419
// end ; end ;
7344: PPOPN 5
7346: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7347: LD_VAR 0 1
7351: PPUSH
7352: LD_VAR 0 2
7356: PPUSH
7357: LD_VAR 0 3
7361: PPUSH
7362: LD_OWVAR 2
7366: PPUSH
7367: CALL 7972 0 4
7371: PPOPN 3
7373: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
7374: LD_INT 0
7376: PPUSH
7377: PPUSH
7378: PPUSH
// BuildUpTime_Delay = 0 ;
7379: LD_ADDR_EXP 58
7383: PUSH
7384: LD_INT 0
7386: ST_TO_ADDR
// if not def_builduptime then
7387: LD_EXP 14
7391: NOT
7392: IFFALSE 7396
// exit ;
7394: GO 7579
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
7396: LD_ADDR_EXP 58
7400: PUSH
7401: LD_INT 8400
7403: PUSH
7404: LD_INT 2100
7406: PUSH
7407: LD_EXP 14
7411: MUL
7412: PLUS
7413: ST_TO_ADDR
// BuildUpTimeActive := true ;
7414: LD_ADDR_EXP 57
7418: PUSH
7419: LD_INT 1
7421: ST_TO_ADDR
// for i := 1 to 8 do
7422: LD_ADDR_VAR 0 2
7426: PUSH
7427: DOUBLE
7428: LD_INT 1
7430: DEC
7431: ST_TO_ADDR
7432: LD_INT 8
7434: PUSH
7435: FOR_TO
7436: IFFALSE 7577
// if Side_Positions [ i ] then
7438: LD_EXP 34
7442: PUSH
7443: LD_VAR 0 2
7447: ARRAY
7448: IFFALSE 7575
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
7450: LD_EXP 56
7454: PUSH
7455: LD_EXP 34
7459: PUSH
7460: LD_VAR 0 2
7464: ARRAY
7465: ARRAY
7466: PPUSH
7467: LD_INT 5
7469: PPUSH
7470: CALL_OW 424
// for j := 1 to 8 do
7474: LD_ADDR_VAR 0 3
7478: PUSH
7479: DOUBLE
7480: LD_INT 1
7482: DEC
7483: ST_TO_ADDR
7484: LD_INT 8
7486: PUSH
7487: FOR_TO
7488: IFFALSE 7573
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
7490: LD_EXP 34
7494: PUSH
7495: LD_VAR 0 3
7499: ARRAY
7500: PUSH
7501: LD_EXP 32
7505: PUSH
7506: LD_VAR 0 2
7510: ARRAY
7511: PUSH
7512: LD_EXP 32
7516: PUSH
7517: LD_VAR 0 3
7521: ARRAY
7522: NONEQUAL
7523: PUSH
7524: LD_EXP 38
7528: NOT
7529: PUSH
7530: LD_VAR 0 2
7534: PUSH
7535: LD_VAR 0 3
7539: NONEQUAL
7540: AND
7541: OR
7542: AND
7543: IFFALSE 7571
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
7545: LD_VAR 0 3
7549: PPUSH
7550: LD_EXP 56
7554: PUSH
7555: LD_EXP 34
7559: PUSH
7560: LD_VAR 0 2
7564: ARRAY
7565: ARRAY
7566: PPUSH
7567: CALL_OW 333
7571: GO 7487
7573: POP
7574: POP
// end ;
7575: GO 7435
7577: POP
7578: POP
// end ;
7579: LD_VAR 0 1
7583: RET
// export function EndBuildUp ; var i , j ; begin
7584: LD_INT 0
7586: PPUSH
7587: PPUSH
7588: PPUSH
// BuildUpTimeActive := false ;
7589: LD_ADDR_EXP 57
7593: PUSH
7594: LD_INT 0
7596: ST_TO_ADDR
// for i := 1 to 8 do
7597: LD_ADDR_VAR 0 2
7601: PUSH
7602: DOUBLE
7603: LD_INT 1
7605: DEC
7606: ST_TO_ADDR
7607: LD_INT 8
7609: PUSH
7610: FOR_TO
7611: IFFALSE 7752
// if Side_Positions [ i ] then
7613: LD_EXP 34
7617: PUSH
7618: LD_VAR 0 2
7622: ARRAY
7623: IFFALSE 7750
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
7625: LD_EXP 56
7629: PUSH
7630: LD_EXP 34
7634: PUSH
7635: LD_VAR 0 2
7639: ARRAY
7640: ARRAY
7641: PPUSH
7642: LD_INT 0
7644: PPUSH
7645: CALL_OW 424
// for j := 1 to 8 do
7649: LD_ADDR_VAR 0 3
7653: PUSH
7654: DOUBLE
7655: LD_INT 1
7657: DEC
7658: ST_TO_ADDR
7659: LD_INT 8
7661: PUSH
7662: FOR_TO
7663: IFFALSE 7748
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
7665: LD_EXP 34
7669: PUSH
7670: LD_VAR 0 3
7674: ARRAY
7675: PUSH
7676: LD_EXP 32
7680: PUSH
7681: LD_VAR 0 2
7685: ARRAY
7686: PUSH
7687: LD_EXP 32
7691: PUSH
7692: LD_VAR 0 3
7696: ARRAY
7697: NONEQUAL
7698: PUSH
7699: LD_EXP 38
7703: NOT
7704: PUSH
7705: LD_VAR 0 2
7709: PUSH
7710: LD_VAR 0 3
7714: NONEQUAL
7715: AND
7716: OR
7717: AND
7718: IFFALSE 7746
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
7720: LD_VAR 0 3
7724: PPUSH
7725: LD_EXP 56
7729: PUSH
7730: LD_EXP 34
7734: PUSH
7735: LD_VAR 0 2
7739: ARRAY
7740: ARRAY
7741: PPUSH
7742: CALL_OW 334
7746: GO 7662
7748: POP
7749: POP
// end ;
7750: GO 7610
7752: POP
7753: POP
// end ;
7754: LD_VAR 0 1
7758: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
7759: LD_EXP 57
7763: IFFALSE 7938
7765: GO 7767
7767: DISABLE
7768: LD_INT 0
7770: PPUSH
7771: PPUSH
// begin for i := 1 to 8 do
7772: LD_ADDR_VAR 0 1
7776: PUSH
7777: DOUBLE
7778: LD_INT 1
7780: DEC
7781: ST_TO_ADDR
7782: LD_INT 8
7784: PUSH
7785: FOR_TO
7786: IFFALSE 7935
// if Side_Positions [ i ] then
7788: LD_EXP 34
7792: PUSH
7793: LD_VAR 0 1
7797: ARRAY
7798: IFFALSE 7933
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
7800: LD_ADDR_VAR 0 2
7804: PUSH
7805: LD_EXP 56
7809: PUSH
7810: LD_EXP 34
7814: PUSH
7815: LD_VAR 0 1
7819: ARRAY
7820: ARRAY
7821: PPUSH
7822: LD_INT 2
7824: PUSH
7825: LD_INT 21
7827: PUSH
7828: LD_INT 1
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: LD_INT 21
7837: PUSH
7838: LD_INT 2
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: LIST
7849: PUSH
7850: LD_INT 22
7852: PUSH
7853: LD_OWVAR 2
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: PPUSH
7866: CALL_OW 70
7870: PUSH
7871: FOR_IN
7872: IFFALSE 7931
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
7874: LD_EXP 32
7878: PUSH
7879: LD_VAR 0 1
7883: ARRAY
7884: PUSH
7885: LD_EXP 32
7889: PUSH
7890: LD_OWVAR 2
7894: ARRAY
7895: NONEQUAL
7896: PUSH
7897: LD_EXP 38
7901: NOT
7902: PUSH
7903: LD_VAR 0 1
7907: PUSH
7908: LD_OWVAR 2
7912: NONEQUAL
7913: AND
7914: OR
7915: IFFALSE 7929
// ComMoveToArea ( un , BuildUpEscape ) ;
7917: LD_VAR 0 2
7921: PPUSH
7922: LD_INT 16
7924: PPUSH
7925: CALL_OW 113
7929: GO 7871
7931: POP
7932: POP
7933: GO 7785
7935: POP
7936: POP
// enable ;
7937: ENABLE
// end ;
7938: PPOPN 2
7940: END
// every 0 0$1 trigger def_builduptime do
7941: LD_EXP 14
7945: IFFALSE 7971
7947: GO 7949
7949: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
7950: LD_INT 8400
7952: PUSH
7953: LD_EXP 14
7957: PUSH
7958: LD_INT 2100
7960: MUL
7961: PLUS
7962: PPUSH
7963: CALL_OW 67
// EndBuildUp ;
7967: CALL 7584 0 0
// end ; end_of_file
7971: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
7972: LD_INT 0
7974: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
7975: LD_VAR 0 1
7979: PPUSH
7980: CALL_OW 255
7984: PUSH
7985: LD_VAR 0 4
7989: EQUAL
7990: IFFALSE 8009
// begin SetAchievement ( ACH_RAD ) ;
7992: LD_STRING ACH_RAD
7994: PPUSH
7995: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
7999: LD_STRING ACH_NL
8001: PPUSH
8002: LD_INT 1
8004: PPUSH
8005: CALL_OW 564
// end end ;
8009: LD_VAR 0 5
8013: RET
// export function SA_Win ( side ) ; begin
8014: LD_INT 0
8016: PPUSH
// case side of 1 :
8017: LD_VAR 0 1
8021: PUSH
8022: LD_INT 1
8024: DOUBLE
8025: EQUAL
8026: IFTRUE 8030
8028: GO 8043
8030: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
8031: LD_STRING ACH_AH
8033: PPUSH
8034: LD_INT 1
8036: PPUSH
8037: CALL_OW 564
8041: GO 8206
8043: LD_INT 2
8045: DOUBLE
8046: EQUAL
8047: IFTRUE 8051
8049: GO 8064
8051: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
8052: LD_STRING ACH_E
8054: PPUSH
8055: LD_INT 1
8057: PPUSH
8058: CALL_OW 564
8062: GO 8206
8064: LD_INT 3
8066: DOUBLE
8067: EQUAL
8068: IFTRUE 8072
8070: GO 8085
8072: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
8073: LD_STRING ACH_OOL
8075: PPUSH
8076: LD_INT 1
8078: PPUSH
8079: CALL_OW 564
8083: GO 8206
8085: LD_INT 1
8087: PUSH
8088: LD_INT 2
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: DOUBLE
8095: EQUAL
8096: IFTRUE 8100
8098: GO 8125
8100: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8101: LD_STRING ACH_AH
8103: PPUSH
8104: LD_REAL  5.00000000000000E-0001
8107: PPUSH
8108: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8112: LD_STRING ACH_E
8114: PPUSH
8115: LD_REAL  5.00000000000000E-0001
8118: PPUSH
8119: CALL_OW 564
// end ; [ 2 , 3 ] :
8123: GO 8206
8125: LD_INT 2
8127: PUSH
8128: LD_INT 3
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: DOUBLE
8135: EQUAL
8136: IFTRUE 8140
8138: GO 8165
8140: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
8141: LD_STRING ACH_OOL
8143: PPUSH
8144: LD_REAL  5.00000000000000E-0001
8147: PPUSH
8148: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8152: LD_STRING ACH_E
8154: PPUSH
8155: LD_REAL  5.00000000000000E-0001
8158: PPUSH
8159: CALL_OW 564
// end ; [ 3 , 1 ] :
8163: GO 8206
8165: LD_INT 3
8167: PUSH
8168: LD_INT 1
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: DOUBLE
8175: EQUAL
8176: IFTRUE 8180
8178: GO 8205
8180: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8181: LD_STRING ACH_AH
8183: PPUSH
8184: LD_REAL  5.00000000000000E-0001
8187: PPUSH
8188: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
8192: LD_STRING ACH_OOL
8194: PPUSH
8195: LD_REAL  5.00000000000000E-0001
8198: PPUSH
8199: CALL_OW 564
// end ; end ;
8203: GO 8206
8205: POP
// end ; end_of_file
8206: LD_VAR 0 2
8210: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
8211: LD_INT 0
8213: PPUSH
8214: PPUSH
// enable ( 98 ) ;
8215: LD_INT 98
8217: ENABLE_MARKED
// GameEnded = false ;
8218: LD_ADDR_LOC 9
8222: PUSH
8223: LD_INT 0
8225: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8226: LD_ADDR_LOC 8
8230: PUSH
8231: LD_INT 0
8233: PUSH
8234: LD_INT 0
8236: PUSH
8237: LD_INT 0
8239: PUSH
8240: LD_INT 0
8242: PUSH
8243: LD_INT 0
8245: PUSH
8246: LD_INT 0
8248: PUSH
8249: LD_INT 0
8251: PUSH
8252: LD_INT 0
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: ST_TO_ADDR
// unfoged = false ;
8265: LD_ADDR_LOC 10
8269: PUSH
8270: LD_INT 0
8272: ST_TO_ADDR
// defeated_specs := [ ] ;
8273: LD_ADDR_LOC 11
8277: PUSH
8278: EMPTY
8279: ST_TO_ADDR
// for i = 1 to side_positions do
8280: LD_ADDR_VAR 0 2
8284: PUSH
8285: DOUBLE
8286: LD_INT 1
8288: DEC
8289: ST_TO_ADDR
8290: LD_EXP 34
8294: PUSH
8295: FOR_TO
8296: IFFALSE 8336
// if not side_positions [ i ] then
8298: LD_EXP 34
8302: PUSH
8303: LD_VAR 0 2
8307: ARRAY
8308: NOT
8309: IFFALSE 8334
// defeated = replace ( defeated , i , true ) ;
8311: LD_ADDR_LOC 8
8315: PUSH
8316: LD_LOC 8
8320: PPUSH
8321: LD_VAR 0 2
8325: PPUSH
8326: LD_INT 1
8328: PPUSH
8329: CALL_OW 1
8333: ST_TO_ADDR
8334: GO 8295
8336: POP
8337: POP
// end ;
8338: LD_VAR 0 1
8342: RET
// function CanWinLoose ; begin
8343: LD_INT 0
8345: PPUSH
// Result := true ;
8346: LD_ADDR_VAR 0 1
8350: PUSH
8351: LD_INT 1
8353: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8354: CALL_OW 518
8358: PUSH
8359: CALL_OW 519
8363: PUSH
8364: LD_INT 0
8366: GREATER
8367: AND
8368: IFFALSE 8378
// Result := false ;
8370: LD_ADDR_VAR 0 1
8374: PUSH
8375: LD_INT 0
8377: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8378: CALL_OW 531
8382: PUSH
8383: CALL_OW 519
8387: PUSH
8388: LD_INT 1
8390: GREATER
8391: AND
8392: IFFALSE 8402
// Result := false ;
8394: LD_ADDR_VAR 0 1
8398: PUSH
8399: LD_INT 0
8401: ST_TO_ADDR
// end ;
8402: LD_VAR 0 1
8406: RET
// export function HasPower ( i ) ; var k , h ; begin
8407: LD_INT 0
8409: PPUSH
8410: PPUSH
8411: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
8412: LD_VAR 0 1
8416: PPUSH
8417: CALL_OW 108
8421: NOT
8422: PUSH
8423: LD_EXP 39
8427: PUSH
8428: LD_VAR 0 1
8432: ARRAY
8433: NOT
8434: AND
8435: PUSH
8436: LD_OWVAR 4
8440: AND
8441: IFFALSE 8453
// begin result = false ;
8443: LD_ADDR_VAR 0 2
8447: PUSH
8448: LD_INT 0
8450: ST_TO_ADDR
// end else
8451: GO 8748
// case def_win_rules of 0 :
8453: LD_EXP 27
8457: PUSH
8458: LD_INT 0
8460: DOUBLE
8461: EQUAL
8462: IFTRUE 8466
8464: GO 8629
8466: POP
// if def_people_respawning then
8467: LD_EXP 12
8471: IFFALSE 8562
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8473: LD_ADDR_VAR 0 2
8477: PUSH
8478: LD_INT 22
8480: PUSH
8481: LD_VAR 0 1
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: PUSH
8490: LD_INT 2
8492: PUSH
8493: LD_INT 21
8495: PUSH
8496: LD_INT 1
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: PUSH
8503: LD_INT 33
8505: PUSH
8506: LD_INT 3
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: PUSH
8513: LD_INT 33
8515: PUSH
8516: LD_INT 5
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: PUSH
8523: LD_INT 30
8525: PUSH
8526: LD_INT 0
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 30
8535: PUSH
8536: LD_INT 1
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: PPUSH
8555: CALL_OW 69
8559: ST_TO_ADDR
8560: GO 8627
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
8562: LD_ADDR_VAR 0 2
8566: PUSH
8567: LD_INT 22
8569: PUSH
8570: LD_VAR 0 1
8574: PUSH
8575: EMPTY
8576: LIST
8577: LIST
8578: PUSH
8579: LD_INT 2
8581: PUSH
8582: LD_INT 21
8584: PUSH
8585: LD_INT 1
8587: PUSH
8588: EMPTY
8589: LIST
8590: LIST
8591: PUSH
8592: LD_INT 33
8594: PUSH
8595: LD_INT 3
8597: PUSH
8598: EMPTY
8599: LIST
8600: LIST
8601: PUSH
8602: LD_INT 33
8604: PUSH
8605: LD_INT 5
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: PUSH
8612: EMPTY
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: PUSH
8618: EMPTY
8619: LIST
8620: LIST
8621: PPUSH
8622: CALL_OW 69
8626: ST_TO_ADDR
8627: GO 8748
8629: LD_INT 1
8631: DOUBLE
8632: EQUAL
8633: IFTRUE 8637
8635: GO 8676
8637: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
8638: LD_ADDR_VAR 0 2
8642: PUSH
8643: LD_INT 22
8645: PUSH
8646: LD_VAR 0 1
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PUSH
8655: LD_INT 21
8657: PUSH
8658: LD_INT 1
8660: PUSH
8661: EMPTY
8662: LIST
8663: LIST
8664: PUSH
8665: EMPTY
8666: LIST
8667: LIST
8668: PPUSH
8669: CALL_OW 69
8673: ST_TO_ADDR
8674: GO 8748
8676: LD_INT 2
8678: DOUBLE
8679: EQUAL
8680: IFTRUE 8684
8682: GO 8747
8684: POP
// begin h = false ;
8685: LD_ADDR_VAR 0 4
8689: PUSH
8690: LD_INT 0
8692: ST_TO_ADDR
// for k in heroes [ i ] do
8693: LD_ADDR_VAR 0 3
8697: PUSH
8698: LD_EXP 43
8702: PUSH
8703: LD_VAR 0 1
8707: ARRAY
8708: PUSH
8709: FOR_IN
8710: IFFALSE 8733
// if IsLive ( k ) then
8712: LD_VAR 0 3
8716: PPUSH
8717: CALL_OW 300
8721: IFFALSE 8731
// h = true ;
8723: LD_ADDR_VAR 0 4
8727: PUSH
8728: LD_INT 1
8730: ST_TO_ADDR
8731: GO 8709
8733: POP
8734: POP
// Result := h ;
8735: LD_ADDR_VAR 0 2
8739: PUSH
8740: LD_VAR 0 4
8744: ST_TO_ADDR
// end ; end ;
8745: GO 8748
8747: POP
// end ;
8748: LD_VAR 0 2
8752: RET
// function AlliedSides ( i , j ) ; begin
8753: LD_INT 0
8755: PPUSH
// Result := false ;
8756: LD_ADDR_VAR 0 3
8760: PUSH
8761: LD_INT 0
8763: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8764: LD_VAR 0 1
8768: PPUSH
8769: LD_VAR 0 2
8773: PPUSH
8774: CALL_OW 81
8778: PUSH
8779: LD_INT 1
8781: EQUAL
8782: PUSH
8783: LD_VAR 0 2
8787: PPUSH
8788: LD_VAR 0 1
8792: PPUSH
8793: CALL_OW 81
8797: PUSH
8798: LD_INT 1
8800: EQUAL
8801: AND
8802: PUSH
8803: LD_VAR 0 1
8807: PPUSH
8808: CALL_OW 83
8812: AND
8813: PUSH
8814: LD_VAR 0 2
8818: PPUSH
8819: CALL_OW 83
8823: AND
8824: IFFALSE 8834
// Result := true ;
8826: LD_ADDR_VAR 0 3
8830: PUSH
8831: LD_INT 1
8833: ST_TO_ADDR
// end ;
8834: LD_VAR 0 3
8838: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
8839: CALL 8343 0 0
8843: PUSH
8844: LD_LOC 9
8848: NOT
8849: AND
8850: IFFALSE 8866
8852: GO 8854
8854: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
8855: LD_ADDR_EXP 55
8859: PUSH
8860: LD_STRING #Player-Ended
8862: PUSH
8863: EMPTY
8864: LIST
8865: ST_TO_ADDR
8866: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
8867: CALL 8343 0 0
8871: PUSH
8872: LD_LOC 9
8876: AND
8877: IFFALSE 8886
8879: GO 8881
8881: DISABLE
// YouLostInMultiplayer ;
8882: CALL_OW 107
8886: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
8887: CALL 8343 0 0
8891: NOT
8892: PUSH
8893: CALL_OW 531
8897: NOT
8898: AND
8899: IFFALSE 8915
8901: GO 8903
8903: DISABLE
// WaitServerStrings = [ #server-wait ] ;
8904: LD_ADDR_EXP 55
8908: PUSH
8909: LD_STRING #server-wait
8911: PUSH
8912: EMPTY
8913: LIST
8914: ST_TO_ADDR
8915: END
// every 100 trigger IAmSpec do
8916: CALL_OW 531
8920: IFFALSE 8936
8922: GO 8924
8924: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
8925: LD_ADDR_EXP 55
8929: PUSH
8930: LD_STRING #Player-IAmSpec
8932: PUSH
8933: EMPTY
8934: LIST
8935: ST_TO_ADDR
8936: END
// every 100 trigger GameEnded and IAmSpec do
8937: LD_LOC 9
8941: PUSH
8942: CALL_OW 531
8946: AND
8947: IFFALSE 8956
8949: GO 8951
8951: DISABLE
// YouLostInMultiplayer ;
8952: CALL_OW 107
8956: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
8957: CALL 8343 0 0
8961: PUSH
8962: LD_LOC 9
8966: NOT
8967: AND
8968: IFFALSE 8984
8970: GO 8972
8972: DISABLE
// WaitServerStrings = [ $player-win ] ;
8973: LD_ADDR_EXP 55
8977: PUSH
8978: LD_STRING $player-win
8980: PUSH
8981: EMPTY
8982: LIST
8983: ST_TO_ADDR
8984: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
8985: CALL 8343 0 0
8989: PUSH
8990: LD_LOC 9
8994: AND
8995: IFFALSE 9019
8997: GO 8999
8999: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
9000: LD_EXP 35
9004: PUSH
9005: LD_OWVAR 7
9009: ARRAY
9010: PPUSH
9011: CALL 8014 0 1
// YouWinInMultiplayer ;
9015: CALL_OW 106
// end ;
9019: END
// every 100 trigger isEditor marked 401 do
9020: LD_OWVAR 84
9024: IFFALSE 9040
9026: GO 9028
9028: DISABLE
// Debug_Strings = [ You won ] ;
9029: LD_ADDR_OWVAR 48
9033: PUSH
9034: LD_STRING You won
9036: PUSH
9037: EMPTY
9038: LIST
9039: ST_TO_ADDR
9040: END
// every 100 trigger isEditor marked 400 do
9041: LD_OWVAR 84
9045: IFFALSE 9061
9047: GO 9049
9049: DISABLE
// Debug_Strings = [ You loss ] ;
9050: LD_ADDR_OWVAR 48
9054: PUSH
9055: LD_STRING You loss
9057: PUSH
9058: EMPTY
9059: LIST
9060: ST_TO_ADDR
9061: END
// every 100 marked 98 do var i , un ;
9062: GO 9064
9064: DISABLE
9065: LD_INT 0
9067: PPUSH
9068: PPUSH
// begin for i = 1 to side_positions do
9069: LD_ADDR_VAR 0 1
9073: PUSH
9074: DOUBLE
9075: LD_INT 1
9077: DEC
9078: ST_TO_ADDR
9079: LD_EXP 34
9083: PUSH
9084: FOR_TO
9085: IFFALSE 9172
// begin if side_positions [ i ] then
9087: LD_EXP 34
9091: PUSH
9092: LD_VAR 0 1
9096: ARRAY
9097: IFFALSE 9170
// if not HasPower ( i ) and not defeated [ i ] then
9099: LD_VAR 0 1
9103: PPUSH
9104: CALL 8407 0 1
9108: NOT
9109: PUSH
9110: LD_LOC 8
9114: PUSH
9115: LD_VAR 0 1
9119: ARRAY
9120: NOT
9121: AND
9122: IFFALSE 9170
// begin defeated = replace ( defeated , i , true ) ;
9124: LD_ADDR_LOC 8
9128: PUSH
9129: LD_LOC 8
9133: PPUSH
9134: LD_VAR 0 1
9138: PPUSH
9139: LD_INT 1
9141: PPUSH
9142: CALL_OW 1
9146: ST_TO_ADDR
// if i = mp_player_side then
9147: LD_VAR 0 1
9151: PUSH
9152: LD_OWVAR 7
9156: EQUAL
9157: IFFALSE 9170
// begin Multiplayer_Loose_Message ;
9159: CALL_OW 521
// SetPlayerSpectator ( ) ;
9163: CALL_OW 572
// enable ( 400 ) ;
9167: LD_INT 400
9169: ENABLE_MARKED
// end ; end ; end ;
9170: GO 9084
9172: POP
9173: POP
// DidGameEnd ;
9174: CALL 9189 0 0
// if not GameEnded then
9178: LD_LOC 9
9182: NOT
9183: IFFALSE 9186
// enable ;
9185: ENABLE
// end ;
9186: PPOPN 2
9188: END
// function DidGameEnd ; var i , k , enemy ; begin
9189: LD_INT 0
9191: PPUSH
9192: PPUSH
9193: PPUSH
9194: PPUSH
// enemy = [ ] ;
9195: LD_ADDR_VAR 0 4
9199: PUSH
9200: EMPTY
9201: ST_TO_ADDR
// for i = 1 to side_positions do
9202: LD_ADDR_VAR 0 2
9206: PUSH
9207: DOUBLE
9208: LD_INT 1
9210: DEC
9211: ST_TO_ADDR
9212: LD_EXP 34
9216: PUSH
9217: FOR_TO
9218: IFFALSE 9312
// if not defeated [ i ] then
9220: LD_LOC 8
9224: PUSH
9225: LD_VAR 0 2
9229: ARRAY
9230: NOT
9231: IFFALSE 9310
// for k = 1 to side_positions do
9233: LD_ADDR_VAR 0 3
9237: PUSH
9238: DOUBLE
9239: LD_INT 1
9241: DEC
9242: ST_TO_ADDR
9243: LD_EXP 34
9247: PUSH
9248: FOR_TO
9249: IFFALSE 9308
// if not defeated [ k ] then
9251: LD_LOC 8
9255: PUSH
9256: LD_VAR 0 3
9260: ARRAY
9261: NOT
9262: IFFALSE 9306
// if not AlliedSides ( i , k ) then
9264: LD_VAR 0 2
9268: PPUSH
9269: LD_VAR 0 3
9273: PPUSH
9274: CALL 8753 0 2
9278: NOT
9279: IFFALSE 9306
// enemy = enemy ^ [ i , k ] ;
9281: LD_ADDR_VAR 0 4
9285: PUSH
9286: LD_VAR 0 4
9290: PUSH
9291: LD_VAR 0 2
9295: PUSH
9296: LD_VAR 0 3
9300: PUSH
9301: EMPTY
9302: LIST
9303: LIST
9304: ADD
9305: ST_TO_ADDR
9306: GO 9248
9308: POP
9309: POP
9310: GO 9217
9312: POP
9313: POP
// if not enemy then
9314: LD_VAR 0 4
9318: NOT
9319: IFFALSE 9345
// begin GameEnded = true ;
9321: LD_ADDR_LOC 9
9325: PUSH
9326: LD_INT 1
9328: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
9329: LD_LOC 8
9333: PUSH
9334: LD_OWVAR 7
9338: ARRAY
9339: NOT
9340: IFFALSE 9345
// enable ( 401 ) ;
9342: LD_INT 401
9344: ENABLE_MARKED
// end ; end ;
9345: LD_VAR 0 1
9349: RET
// function unfog ; var k , friends ; begin
9350: LD_INT 0
9352: PPUSH
9353: PPUSH
9354: PPUSH
// for k = 1 to side_positions do
9355: LD_ADDR_VAR 0 2
9359: PUSH
9360: DOUBLE
9361: LD_INT 1
9363: DEC
9364: ST_TO_ADDR
9365: LD_EXP 34
9369: PUSH
9370: FOR_TO
9371: IFFALSE 9427
// if not defeated [ k ] then
9373: LD_LOC 8
9377: PUSH
9378: LD_VAR 0 2
9382: ARRAY
9383: NOT
9384: IFFALSE 9425
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
9386: LD_OWVAR 7
9390: PPUSH
9391: LD_VAR 0 2
9395: PPUSH
9396: CALL_OW 81
9400: PUSH
9401: LD_INT 1
9403: PUSH
9404: EMPTY
9405: LIST
9406: IN
9407: IFFALSE 9425
// friends = friends ^ k ;
9409: LD_ADDR_VAR 0 3
9413: PUSH
9414: LD_VAR 0 3
9418: PUSH
9419: LD_VAR 0 2
9423: ADD
9424: ST_TO_ADDR
9425: GO 9370
9427: POP
9428: POP
// if not friends then
9429: LD_VAR 0 3
9433: NOT
9434: IFFALSE 9448
// begin SetPlayerSpectator ( ) ;
9436: CALL_OW 572
// unfoged = true ;
9440: LD_ADDR_LOC 10
9444: PUSH
9445: LD_INT 1
9447: ST_TO_ADDR
// end ; end ;
9448: LD_VAR 0 1
9452: RET
// export function MakeGameEnd ; begin
9453: LD_INT 0
9455: PPUSH
// SetPlayerSpectator ( ) ;
9456: CALL_OW 572
// unfoged = true ;
9460: LD_ADDR_LOC 10
9464: PUSH
9465: LD_INT 1
9467: ST_TO_ADDR
// wait ( 0 0$5 ) ;
9468: LD_INT 175
9470: PPUSH
9471: CALL_OW 67
// GameEnded = true ;
9475: LD_ADDR_LOC 9
9479: PUSH
9480: LD_INT 1
9482: ST_TO_ADDR
// end ;
9483: LD_VAR 0 1
9487: RET
// export function GetGameEnded ; begin
9488: LD_INT 0
9490: PPUSH
// result = GameEnded ;
9491: LD_ADDR_VAR 0 1
9495: PUSH
9496: LD_LOC 9
9500: ST_TO_ADDR
// end ; end_of_file
9501: LD_VAR 0 1
9505: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9506: LD_INT 0
9508: PPUSH
9509: PPUSH
9510: PPUSH
// for side = 1 to 8 do
9511: LD_ADDR_VAR 0 2
9515: PUSH
9516: DOUBLE
9517: LD_INT 1
9519: DEC
9520: ST_TO_ADDR
9521: LD_INT 8
9523: PUSH
9524: FOR_TO
9525: IFFALSE 9646
// begin for i = 1 to 72 do
9527: LD_ADDR_VAR 0 3
9531: PUSH
9532: DOUBLE
9533: LD_INT 1
9535: DEC
9536: ST_TO_ADDR
9537: LD_INT 72
9539: PUSH
9540: FOR_TO
9541: IFFALSE 9572
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9543: LD_VAR 0 3
9547: PPUSH
9548: LD_VAR 0 2
9552: PPUSH
9553: LD_INT 0
9555: PPUSH
9556: LD_VAR 0 3
9560: PPUSH
9561: CALL_OW 565
9565: PPUSH
9566: CALL_OW 322
9570: GO 9540
9572: POP
9573: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9574: LD_INT 73
9576: PPUSH
9577: LD_VAR 0 2
9581: PPUSH
9582: LD_INT 0
9584: PPUSH
9585: LD_INT 25
9587: PPUSH
9588: CALL_OW 565
9592: PPUSH
9593: CALL_OW 322
// for i = 0 to 40 do
9597: LD_ADDR_VAR 0 3
9601: PUSH
9602: DOUBLE
9603: LD_INT 0
9605: DEC
9606: ST_TO_ADDR
9607: LD_INT 40
9609: PUSH
9610: FOR_TO
9611: IFFALSE 9642
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9613: LD_VAR 0 3
9617: PPUSH
9618: LD_VAR 0 2
9622: PPUSH
9623: LD_INT 1
9625: PPUSH
9626: LD_VAR 0 3
9630: PPUSH
9631: CALL_OW 565
9635: PPUSH
9636: CALL_OW 324
9640: GO 9610
9642: POP
9643: POP
// end ;
9644: GO 9524
9646: POP
9647: POP
// end ;
9648: LD_VAR 0 1
9652: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9653: LD_INT 0
9655: PPUSH
9656: PPUSH
9657: PPUSH
// for side = 1 to 8 do
9658: LD_ADDR_VAR 0 3
9662: PUSH
9663: DOUBLE
9664: LD_INT 1
9666: DEC
9667: ST_TO_ADDR
9668: LD_INT 8
9670: PUSH
9671: FOR_TO
9672: IFFALSE 13668
// begin for i = 1 to 73 do
9674: LD_ADDR_VAR 0 4
9678: PUSH
9679: DOUBLE
9680: LD_INT 1
9682: DEC
9683: ST_TO_ADDR
9684: LD_INT 73
9686: PUSH
9687: FOR_TO
9688: IFFALSE 9709
// SetTech ( i , side , state_disabled ) ;
9690: LD_VAR 0 4
9694: PPUSH
9695: LD_VAR 0 3
9699: PPUSH
9700: LD_INT 0
9702: PPUSH
9703: CALL_OW 322
9707: GO 9687
9709: POP
9710: POP
// for i = 0 to 40 do
9711: LD_ADDR_VAR 0 4
9715: PUSH
9716: DOUBLE
9717: LD_INT 0
9719: DEC
9720: ST_TO_ADDR
9721: LD_INT 40
9723: PUSH
9724: FOR_TO
9725: IFFALSE 9746
// SetRestrict ( i , side , false ) ;
9727: LD_VAR 0 4
9731: PPUSH
9732: LD_VAR 0 3
9736: PPUSH
9737: LD_INT 0
9739: PPUSH
9740: CALL_OW 324
9744: GO 9724
9746: POP
9747: POP
// case level of 1 :
9748: LD_VAR 0 1
9752: PUSH
9753: LD_INT 1
9755: DOUBLE
9756: EQUAL
9757: IFTRUE 9761
9759: GO 9914
9761: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9762: LD_INT 35
9764: PPUSH
9765: LD_VAR 0 3
9769: PPUSH
9770: LD_INT 1
9772: PPUSH
9773: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9777: LD_INT 45
9779: PPUSH
9780: LD_VAR 0 3
9784: PPUSH
9785: LD_INT 1
9787: PPUSH
9788: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9792: LD_INT 46
9794: PPUSH
9795: LD_VAR 0 3
9799: PPUSH
9800: LD_INT 1
9802: PPUSH
9803: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9807: LD_INT 47
9809: PPUSH
9810: LD_VAR 0 3
9814: PPUSH
9815: LD_INT 1
9817: PPUSH
9818: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9822: LD_INT 0
9824: PPUSH
9825: LD_VAR 0 3
9829: PPUSH
9830: LD_INT 1
9832: PPUSH
9833: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9837: LD_INT 2
9839: PPUSH
9840: LD_VAR 0 3
9844: PPUSH
9845: LD_INT 1
9847: PPUSH
9848: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9852: LD_INT 4
9854: PPUSH
9855: LD_VAR 0 3
9859: PPUSH
9860: LD_INT 1
9862: PPUSH
9863: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9867: LD_INT 6
9869: PPUSH
9870: LD_VAR 0 3
9874: PPUSH
9875: LD_INT 1
9877: PPUSH
9878: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9882: LD_INT 29
9884: PPUSH
9885: LD_VAR 0 3
9889: PPUSH
9890: LD_INT 1
9892: PPUSH
9893: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9897: LD_INT 31
9899: PPUSH
9900: LD_VAR 0 3
9904: PPUSH
9905: LD_INT 1
9907: PPUSH
9908: CALL_OW 324
// end ; 2 :
9912: GO 13666
9914: LD_INT 2
9916: DOUBLE
9917: EQUAL
9918: IFTRUE 9922
9920: GO 10120
9922: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9923: LD_INT 35
9925: PPUSH
9926: LD_VAR 0 3
9930: PPUSH
9931: LD_INT 1
9933: PPUSH
9934: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9938: LD_INT 45
9940: PPUSH
9941: LD_VAR 0 3
9945: PPUSH
9946: LD_INT 1
9948: PPUSH
9949: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9953: LD_INT 46
9955: PPUSH
9956: LD_VAR 0 3
9960: PPUSH
9961: LD_INT 1
9963: PPUSH
9964: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9968: LD_INT 47
9970: PPUSH
9971: LD_VAR 0 3
9975: PPUSH
9976: LD_INT 1
9978: PPUSH
9979: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9983: LD_INT 1
9985: PPUSH
9986: LD_VAR 0 3
9990: PPUSH
9991: LD_INT 1
9993: PPUSH
9994: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9998: LD_INT 2
10000: PPUSH
10001: LD_VAR 0 3
10005: PPUSH
10006: LD_INT 1
10008: PPUSH
10009: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10013: LD_INT 11
10015: PPUSH
10016: LD_VAR 0 3
10020: PPUSH
10021: LD_INT 1
10023: PPUSH
10024: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10028: LD_INT 0
10030: PPUSH
10031: LD_VAR 0 3
10035: PPUSH
10036: LD_INT 1
10038: PPUSH
10039: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10043: LD_INT 2
10045: PPUSH
10046: LD_VAR 0 3
10050: PPUSH
10051: LD_INT 1
10053: PPUSH
10054: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10058: LD_INT 4
10060: PPUSH
10061: LD_VAR 0 3
10065: PPUSH
10066: LD_INT 1
10068: PPUSH
10069: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10073: LD_INT 6
10075: PPUSH
10076: LD_VAR 0 3
10080: PPUSH
10081: LD_INT 1
10083: PPUSH
10084: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10088: LD_INT 29
10090: PPUSH
10091: LD_VAR 0 3
10095: PPUSH
10096: LD_INT 1
10098: PPUSH
10099: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10103: LD_INT 31
10105: PPUSH
10106: LD_VAR 0 3
10110: PPUSH
10111: LD_INT 1
10113: PPUSH
10114: CALL_OW 324
// end ; 3 :
10118: GO 13666
10120: LD_INT 3
10122: DOUBLE
10123: EQUAL
10124: IFTRUE 10128
10126: GO 10581
10128: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10129: LD_INT 35
10131: PPUSH
10132: LD_VAR 0 3
10136: PPUSH
10137: LD_INT 1
10139: PPUSH
10140: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10144: LD_INT 45
10146: PPUSH
10147: LD_VAR 0 3
10151: PPUSH
10152: LD_INT 1
10154: PPUSH
10155: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10159: LD_INT 46
10161: PPUSH
10162: LD_VAR 0 3
10166: PPUSH
10167: LD_INT 1
10169: PPUSH
10170: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10174: LD_INT 47
10176: PPUSH
10177: LD_VAR 0 3
10181: PPUSH
10182: LD_INT 1
10184: PPUSH
10185: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10189: LD_INT 1
10191: PPUSH
10192: LD_VAR 0 3
10196: PPUSH
10197: LD_INT 1
10199: PPUSH
10200: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10204: LD_INT 2
10206: PPUSH
10207: LD_VAR 0 3
10211: PPUSH
10212: LD_INT 1
10214: PPUSH
10215: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10219: LD_INT 11
10221: PPUSH
10222: LD_VAR 0 3
10226: PPUSH
10227: LD_INT 1
10229: PPUSH
10230: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10234: LD_INT 48
10236: PPUSH
10237: LD_VAR 0 3
10241: PPUSH
10242: LD_INT 1
10244: PPUSH
10245: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10249: LD_INT 69
10251: PPUSH
10252: LD_VAR 0 3
10256: PPUSH
10257: LD_INT 1
10259: PPUSH
10260: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10264: LD_INT 39
10266: PPUSH
10267: LD_VAR 0 3
10271: PPUSH
10272: LD_INT 1
10274: PPUSH
10275: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10279: LD_INT 43
10281: PPUSH
10282: LD_VAR 0 3
10286: PPUSH
10287: LD_INT 1
10289: PPUSH
10290: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10294: LD_INT 51
10296: PPUSH
10297: LD_VAR 0 3
10301: PPUSH
10302: LD_INT 1
10304: PPUSH
10305: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10309: LD_INT 6
10311: PPUSH
10312: LD_VAR 0 3
10316: PPUSH
10317: LD_INT 1
10319: PPUSH
10320: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10324: LD_INT 0
10326: PPUSH
10327: LD_VAR 0 3
10331: PPUSH
10332: LD_INT 1
10334: PPUSH
10335: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10339: LD_INT 2
10341: PPUSH
10342: LD_VAR 0 3
10346: PPUSH
10347: LD_INT 1
10349: PPUSH
10350: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10354: LD_INT 3
10356: PPUSH
10357: LD_VAR 0 3
10361: PPUSH
10362: LD_INT 1
10364: PPUSH
10365: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10369: LD_INT 4
10371: PPUSH
10372: LD_VAR 0 3
10376: PPUSH
10377: LD_INT 1
10379: PPUSH
10380: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10384: LD_INT 6
10386: PPUSH
10387: LD_VAR 0 3
10391: PPUSH
10392: LD_INT 1
10394: PPUSH
10395: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10399: LD_INT 7
10401: PPUSH
10402: LD_VAR 0 3
10406: PPUSH
10407: LD_INT 1
10409: PPUSH
10410: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10414: LD_INT 8
10416: PPUSH
10417: LD_VAR 0 3
10421: PPUSH
10422: LD_INT 1
10424: PPUSH
10425: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10429: LD_INT 10
10431: PPUSH
10432: LD_VAR 0 3
10436: PPUSH
10437: LD_INT 1
10439: PPUSH
10440: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10444: LD_INT 15
10446: PPUSH
10447: LD_VAR 0 3
10451: PPUSH
10452: LD_INT 1
10454: PPUSH
10455: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10459: LD_INT 16
10461: PPUSH
10462: LD_VAR 0 3
10466: PPUSH
10467: LD_INT 1
10469: PPUSH
10470: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10474: LD_INT 17
10476: PPUSH
10477: LD_VAR 0 3
10481: PPUSH
10482: LD_INT 1
10484: PPUSH
10485: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10489: LD_INT 20
10491: PPUSH
10492: LD_VAR 0 3
10496: PPUSH
10497: LD_INT 1
10499: PPUSH
10500: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10504: LD_INT 26
10506: PPUSH
10507: LD_VAR 0 3
10511: PPUSH
10512: LD_INT 1
10514: PPUSH
10515: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10519: LD_INT 27
10521: PPUSH
10522: LD_VAR 0 3
10526: PPUSH
10527: LD_INT 1
10529: PPUSH
10530: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10534: LD_INT 29
10536: PPUSH
10537: LD_VAR 0 3
10541: PPUSH
10542: LD_INT 1
10544: PPUSH
10545: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10549: LD_INT 31
10551: PPUSH
10552: LD_VAR 0 3
10556: PPUSH
10557: LD_INT 1
10559: PPUSH
10560: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10564: LD_INT 32
10566: PPUSH
10567: LD_VAR 0 3
10571: PPUSH
10572: LD_INT 1
10574: PPUSH
10575: CALL_OW 324
// end ; 4 :
10579: GO 13666
10581: LD_INT 4
10583: DOUBLE
10584: EQUAL
10585: IFTRUE 10589
10587: GO 11537
10589: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10590: LD_INT 35
10592: PPUSH
10593: LD_VAR 0 3
10597: PPUSH
10598: LD_INT 1
10600: PPUSH
10601: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10605: LD_INT 45
10607: PPUSH
10608: LD_VAR 0 3
10612: PPUSH
10613: LD_INT 1
10615: PPUSH
10616: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10620: LD_INT 46
10622: PPUSH
10623: LD_VAR 0 3
10627: PPUSH
10628: LD_INT 1
10630: PPUSH
10631: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10635: LD_INT 47
10637: PPUSH
10638: LD_VAR 0 3
10642: PPUSH
10643: LD_INT 1
10645: PPUSH
10646: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10650: LD_INT 1
10652: PPUSH
10653: LD_VAR 0 3
10657: PPUSH
10658: LD_INT 1
10660: PPUSH
10661: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10665: LD_INT 2
10667: PPUSH
10668: LD_VAR 0 3
10672: PPUSH
10673: LD_INT 1
10675: PPUSH
10676: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10680: LD_INT 11
10682: PPUSH
10683: LD_VAR 0 3
10687: PPUSH
10688: LD_INT 1
10690: PPUSH
10691: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10695: LD_INT 20
10697: PPUSH
10698: LD_VAR 0 3
10702: PPUSH
10703: LD_INT 1
10705: PPUSH
10706: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10710: LD_INT 48
10712: PPUSH
10713: LD_VAR 0 3
10717: PPUSH
10718: LD_INT 1
10720: PPUSH
10721: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10725: LD_INT 49
10727: PPUSH
10728: LD_VAR 0 3
10732: PPUSH
10733: LD_INT 1
10735: PPUSH
10736: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10740: LD_INT 69
10742: PPUSH
10743: LD_VAR 0 3
10747: PPUSH
10748: LD_INT 1
10750: PPUSH
10751: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10755: LD_INT 39
10757: PPUSH
10758: LD_VAR 0 3
10762: PPUSH
10763: LD_INT 1
10765: PPUSH
10766: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10770: LD_INT 34
10772: PPUSH
10773: LD_VAR 0 3
10777: PPUSH
10778: LD_INT 1
10780: PPUSH
10781: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10785: LD_INT 42
10787: PPUSH
10788: LD_VAR 0 3
10792: PPUSH
10793: LD_INT 1
10795: PPUSH
10796: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10800: LD_INT 44
10802: PPUSH
10803: LD_VAR 0 3
10807: PPUSH
10808: LD_INT 1
10810: PPUSH
10811: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10815: LD_INT 41
10817: PPUSH
10818: LD_VAR 0 3
10822: PPUSH
10823: LD_INT 1
10825: PPUSH
10826: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10830: LD_INT 43
10832: PPUSH
10833: LD_VAR 0 3
10837: PPUSH
10838: LD_INT 1
10840: PPUSH
10841: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10845: LD_INT 70
10847: PPUSH
10848: LD_VAR 0 3
10852: PPUSH
10853: LD_INT 1
10855: PPUSH
10856: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10860: LD_INT 51
10862: PPUSH
10863: LD_VAR 0 3
10867: PPUSH
10868: LD_INT 1
10870: PPUSH
10871: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10875: LD_INT 52
10877: PPUSH
10878: LD_VAR 0 3
10882: PPUSH
10883: LD_INT 1
10885: PPUSH
10886: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10890: LD_INT 6
10892: PPUSH
10893: LD_VAR 0 3
10897: PPUSH
10898: LD_INT 1
10900: PPUSH
10901: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10905: LD_INT 15
10907: PPUSH
10908: LD_VAR 0 3
10912: PPUSH
10913: LD_INT 1
10915: PPUSH
10916: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10920: LD_INT 7
10922: PPUSH
10923: LD_VAR 0 3
10927: PPUSH
10928: LD_INT 1
10930: PPUSH
10931: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10935: LD_INT 12
10937: PPUSH
10938: LD_VAR 0 3
10942: PPUSH
10943: LD_INT 1
10945: PPUSH
10946: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10950: LD_INT 18
10952: PPUSH
10953: LD_VAR 0 3
10957: PPUSH
10958: LD_INT 1
10960: PPUSH
10961: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10965: LD_INT 60
10967: PPUSH
10968: LD_VAR 0 3
10972: PPUSH
10973: LD_INT 1
10975: PPUSH
10976: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10980: LD_INT 9
10982: PPUSH
10983: LD_VAR 0 3
10987: PPUSH
10988: LD_INT 1
10990: PPUSH
10991: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10995: LD_INT 30
10997: PPUSH
10998: LD_VAR 0 3
11002: PPUSH
11003: LD_INT 1
11005: PPUSH
11006: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11010: LD_INT 37
11012: PPUSH
11013: LD_VAR 0 3
11017: PPUSH
11018: LD_INT 1
11020: PPUSH
11021: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11025: LD_INT 5
11027: PPUSH
11028: LD_VAR 0 3
11032: PPUSH
11033: LD_INT 1
11035: PPUSH
11036: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11040: LD_INT 66
11042: PPUSH
11043: LD_VAR 0 3
11047: PPUSH
11048: LD_INT 1
11050: PPUSH
11051: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11055: LD_INT 21
11057: PPUSH
11058: LD_VAR 0 3
11062: PPUSH
11063: LD_INT 1
11065: PPUSH
11066: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11070: LD_INT 22
11072: PPUSH
11073: LD_VAR 0 3
11077: PPUSH
11078: LD_INT 1
11080: PPUSH
11081: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11085: LD_INT 54
11087: PPUSH
11088: LD_VAR 0 3
11092: PPUSH
11093: LD_INT 1
11095: PPUSH
11096: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11100: LD_INT 0
11102: PPUSH
11103: LD_VAR 0 3
11107: PPUSH
11108: LD_INT 1
11110: PPUSH
11111: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11115: LD_INT 1
11117: PPUSH
11118: LD_VAR 0 3
11122: PPUSH
11123: LD_INT 1
11125: PPUSH
11126: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11130: LD_INT 2
11132: PPUSH
11133: LD_VAR 0 3
11137: PPUSH
11138: LD_INT 1
11140: PPUSH
11141: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11145: LD_INT 3
11147: PPUSH
11148: LD_VAR 0 3
11152: PPUSH
11153: LD_INT 1
11155: PPUSH
11156: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11160: LD_INT 4
11162: PPUSH
11163: LD_VAR 0 3
11167: PPUSH
11168: LD_INT 1
11170: PPUSH
11171: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11175: LD_INT 5
11177: PPUSH
11178: LD_VAR 0 3
11182: PPUSH
11183: LD_INT 1
11185: PPUSH
11186: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11190: LD_INT 6
11192: PPUSH
11193: LD_VAR 0 3
11197: PPUSH
11198: LD_INT 1
11200: PPUSH
11201: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11205: LD_INT 7
11207: PPUSH
11208: LD_VAR 0 3
11212: PPUSH
11213: LD_INT 1
11215: PPUSH
11216: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11220: LD_INT 8
11222: PPUSH
11223: LD_VAR 0 3
11227: PPUSH
11228: LD_INT 1
11230: PPUSH
11231: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11235: LD_INT 10
11237: PPUSH
11238: LD_VAR 0 3
11242: PPUSH
11243: LD_INT 1
11245: PPUSH
11246: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11250: LD_INT 11
11252: PPUSH
11253: LD_VAR 0 3
11257: PPUSH
11258: LD_INT 1
11260: PPUSH
11261: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11265: LD_INT 12
11267: PPUSH
11268: LD_VAR 0 3
11272: PPUSH
11273: LD_INT 1
11275: PPUSH
11276: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11280: LD_INT 13
11282: PPUSH
11283: LD_VAR 0 3
11287: PPUSH
11288: LD_INT 1
11290: PPUSH
11291: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11295: LD_INT 14
11297: PPUSH
11298: LD_VAR 0 3
11302: PPUSH
11303: LD_INT 1
11305: PPUSH
11306: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11310: LD_INT 15
11312: PPUSH
11313: LD_VAR 0 3
11317: PPUSH
11318: LD_INT 1
11320: PPUSH
11321: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11325: LD_INT 16
11327: PPUSH
11328: LD_VAR 0 3
11332: PPUSH
11333: LD_INT 1
11335: PPUSH
11336: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11340: LD_INT 17
11342: PPUSH
11343: LD_VAR 0 3
11347: PPUSH
11348: LD_INT 1
11350: PPUSH
11351: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11355: LD_INT 19
11357: PPUSH
11358: LD_VAR 0 3
11362: PPUSH
11363: LD_INT 1
11365: PPUSH
11366: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11370: LD_INT 20
11372: PPUSH
11373: LD_VAR 0 3
11377: PPUSH
11378: LD_INT 1
11380: PPUSH
11381: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11385: LD_INT 21
11387: PPUSH
11388: LD_VAR 0 3
11392: PPUSH
11393: LD_INT 1
11395: PPUSH
11396: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11400: LD_INT 23
11402: PPUSH
11403: LD_VAR 0 3
11407: PPUSH
11408: LD_INT 1
11410: PPUSH
11411: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11415: LD_INT 26
11417: PPUSH
11418: LD_VAR 0 3
11422: PPUSH
11423: LD_INT 1
11425: PPUSH
11426: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11430: LD_INT 27
11432: PPUSH
11433: LD_VAR 0 3
11437: PPUSH
11438: LD_INT 1
11440: PPUSH
11441: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11445: LD_INT 28
11447: PPUSH
11448: LD_VAR 0 3
11452: PPUSH
11453: LD_INT 1
11455: PPUSH
11456: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11460: LD_INT 29
11462: PPUSH
11463: LD_VAR 0 3
11467: PPUSH
11468: LD_INT 1
11470: PPUSH
11471: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11475: LD_INT 30
11477: PPUSH
11478: LD_VAR 0 3
11482: PPUSH
11483: LD_INT 1
11485: PPUSH
11486: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11490: LD_INT 31
11492: PPUSH
11493: LD_VAR 0 3
11497: PPUSH
11498: LD_INT 1
11500: PPUSH
11501: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11505: LD_INT 32
11507: PPUSH
11508: LD_VAR 0 3
11512: PPUSH
11513: LD_INT 1
11515: PPUSH
11516: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11520: LD_INT 36
11522: PPUSH
11523: LD_VAR 0 3
11527: PPUSH
11528: LD_INT 1
11530: PPUSH
11531: CALL_OW 324
// end ; 5 :
11535: GO 13666
11537: LD_INT 5
11539: DOUBLE
11540: EQUAL
11541: IFTRUE 11545
11543: GO 12658
11545: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11546: LD_INT 35
11548: PPUSH
11549: LD_VAR 0 3
11553: PPUSH
11554: LD_INT 1
11556: PPUSH
11557: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11561: LD_INT 45
11563: PPUSH
11564: LD_VAR 0 3
11568: PPUSH
11569: LD_INT 1
11571: PPUSH
11572: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11576: LD_INT 46
11578: PPUSH
11579: LD_VAR 0 3
11583: PPUSH
11584: LD_INT 1
11586: PPUSH
11587: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11591: LD_INT 47
11593: PPUSH
11594: LD_VAR 0 3
11598: PPUSH
11599: LD_INT 1
11601: PPUSH
11602: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11606: LD_INT 1
11608: PPUSH
11609: LD_VAR 0 3
11613: PPUSH
11614: LD_INT 1
11616: PPUSH
11617: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11621: LD_INT 2
11623: PPUSH
11624: LD_VAR 0 3
11628: PPUSH
11629: LD_INT 1
11631: PPUSH
11632: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11636: LD_INT 11
11638: PPUSH
11639: LD_VAR 0 3
11643: PPUSH
11644: LD_INT 1
11646: PPUSH
11647: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11651: LD_INT 20
11653: PPUSH
11654: LD_VAR 0 3
11658: PPUSH
11659: LD_INT 1
11661: PPUSH
11662: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11666: LD_INT 48
11668: PPUSH
11669: LD_VAR 0 3
11673: PPUSH
11674: LD_INT 1
11676: PPUSH
11677: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11681: LD_INT 49
11683: PPUSH
11684: LD_VAR 0 3
11688: PPUSH
11689: LD_INT 1
11691: PPUSH
11692: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11696: LD_INT 69
11698: PPUSH
11699: LD_VAR 0 3
11703: PPUSH
11704: LD_INT 1
11706: PPUSH
11707: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11711: LD_INT 39
11713: PPUSH
11714: LD_VAR 0 3
11718: PPUSH
11719: LD_INT 1
11721: PPUSH
11722: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11726: LD_INT 34
11728: PPUSH
11729: LD_VAR 0 3
11733: PPUSH
11734: LD_INT 1
11736: PPUSH
11737: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11741: LD_INT 42
11743: PPUSH
11744: LD_VAR 0 3
11748: PPUSH
11749: LD_INT 1
11751: PPUSH
11752: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11756: LD_INT 44
11758: PPUSH
11759: LD_VAR 0 3
11763: PPUSH
11764: LD_INT 1
11766: PPUSH
11767: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11771: LD_INT 41
11773: PPUSH
11774: LD_VAR 0 3
11778: PPUSH
11779: LD_INT 1
11781: PPUSH
11782: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11786: LD_INT 40
11788: PPUSH
11789: LD_VAR 0 3
11793: PPUSH
11794: LD_INT 1
11796: PPUSH
11797: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11801: LD_INT 43
11803: PPUSH
11804: LD_VAR 0 3
11808: PPUSH
11809: LD_INT 1
11811: PPUSH
11812: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11816: LD_INT 70
11818: PPUSH
11819: LD_VAR 0 3
11823: PPUSH
11824: LD_INT 1
11826: PPUSH
11827: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11831: LD_INT 51
11833: PPUSH
11834: LD_VAR 0 3
11838: PPUSH
11839: LD_INT 1
11841: PPUSH
11842: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11846: LD_INT 52
11848: PPUSH
11849: LD_VAR 0 3
11853: PPUSH
11854: LD_INT 1
11856: PPUSH
11857: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11861: LD_INT 6
11863: PPUSH
11864: LD_VAR 0 3
11868: PPUSH
11869: LD_INT 1
11871: PPUSH
11872: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11876: LD_INT 15
11878: PPUSH
11879: LD_VAR 0 3
11883: PPUSH
11884: LD_INT 1
11886: PPUSH
11887: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11891: LD_INT 7
11893: PPUSH
11894: LD_VAR 0 3
11898: PPUSH
11899: LD_INT 1
11901: PPUSH
11902: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11906: LD_INT 12
11908: PPUSH
11909: LD_VAR 0 3
11913: PPUSH
11914: LD_INT 1
11916: PPUSH
11917: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11921: LD_INT 17
11923: PPUSH
11924: LD_VAR 0 3
11928: PPUSH
11929: LD_INT 1
11931: PPUSH
11932: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11936: LD_INT 18
11938: PPUSH
11939: LD_VAR 0 3
11943: PPUSH
11944: LD_INT 1
11946: PPUSH
11947: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11951: LD_INT 60
11953: PPUSH
11954: LD_VAR 0 3
11958: PPUSH
11959: LD_INT 1
11961: PPUSH
11962: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11966: LD_INT 32
11968: PPUSH
11969: LD_VAR 0 3
11973: PPUSH
11974: LD_INT 1
11976: PPUSH
11977: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11981: LD_INT 9
11983: PPUSH
11984: LD_VAR 0 3
11988: PPUSH
11989: LD_INT 1
11991: PPUSH
11992: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11996: LD_INT 57
11998: PPUSH
11999: LD_VAR 0 3
12003: PPUSH
12004: LD_INT 1
12006: PPUSH
12007: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12011: LD_INT 30
12013: PPUSH
12014: LD_VAR 0 3
12018: PPUSH
12019: LD_INT 1
12021: PPUSH
12022: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12026: LD_INT 37
12028: PPUSH
12029: LD_VAR 0 3
12033: PPUSH
12034: LD_INT 1
12036: PPUSH
12037: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12041: LD_INT 63
12043: PPUSH
12044: LD_VAR 0 3
12048: PPUSH
12049: LD_INT 1
12051: PPUSH
12052: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12056: LD_INT 3
12058: PPUSH
12059: LD_VAR 0 3
12063: PPUSH
12064: LD_INT 1
12066: PPUSH
12067: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12071: LD_INT 4
12073: PPUSH
12074: LD_VAR 0 3
12078: PPUSH
12079: LD_INT 1
12081: PPUSH
12082: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12086: LD_INT 5
12088: PPUSH
12089: LD_VAR 0 3
12093: PPUSH
12094: LD_INT 1
12096: PPUSH
12097: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12101: LD_INT 66
12103: PPUSH
12104: LD_VAR 0 3
12108: PPUSH
12109: LD_INT 1
12111: PPUSH
12112: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12116: LD_INT 21
12118: PPUSH
12119: LD_VAR 0 3
12123: PPUSH
12124: LD_INT 1
12126: PPUSH
12127: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12131: LD_INT 22
12133: PPUSH
12134: LD_VAR 0 3
12138: PPUSH
12139: LD_INT 1
12141: PPUSH
12142: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12146: LD_INT 19
12148: PPUSH
12149: LD_VAR 0 3
12153: PPUSH
12154: LD_INT 1
12156: PPUSH
12157: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12161: LD_INT 54
12163: PPUSH
12164: LD_VAR 0 3
12168: PPUSH
12169: LD_INT 1
12171: PPUSH
12172: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12176: LD_INT 55
12178: PPUSH
12179: LD_VAR 0 3
12183: PPUSH
12184: LD_INT 1
12186: PPUSH
12187: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12191: LD_INT 0
12193: PPUSH
12194: LD_VAR 0 3
12198: PPUSH
12199: LD_INT 1
12201: PPUSH
12202: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12206: LD_INT 1
12208: PPUSH
12209: LD_VAR 0 3
12213: PPUSH
12214: LD_INT 1
12216: PPUSH
12217: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12221: LD_INT 2
12223: PPUSH
12224: LD_VAR 0 3
12228: PPUSH
12229: LD_INT 1
12231: PPUSH
12232: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12236: LD_INT 3
12238: PPUSH
12239: LD_VAR 0 3
12243: PPUSH
12244: LD_INT 1
12246: PPUSH
12247: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12251: LD_INT 4
12253: PPUSH
12254: LD_VAR 0 3
12258: PPUSH
12259: LD_INT 1
12261: PPUSH
12262: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12266: LD_INT 5
12268: PPUSH
12269: LD_VAR 0 3
12273: PPUSH
12274: LD_INT 1
12276: PPUSH
12277: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12281: LD_INT 6
12283: PPUSH
12284: LD_VAR 0 3
12288: PPUSH
12289: LD_INT 1
12291: PPUSH
12292: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12296: LD_INT 7
12298: PPUSH
12299: LD_VAR 0 3
12303: PPUSH
12304: LD_INT 1
12306: PPUSH
12307: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12311: LD_INT 8
12313: PPUSH
12314: LD_VAR 0 3
12318: PPUSH
12319: LD_INT 1
12321: PPUSH
12322: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12326: LD_INT 10
12328: PPUSH
12329: LD_VAR 0 3
12333: PPUSH
12334: LD_INT 1
12336: PPUSH
12337: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12341: LD_INT 11
12343: PPUSH
12344: LD_VAR 0 3
12348: PPUSH
12349: LD_INT 1
12351: PPUSH
12352: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12356: LD_INT 12
12358: PPUSH
12359: LD_VAR 0 3
12363: PPUSH
12364: LD_INT 1
12366: PPUSH
12367: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12371: LD_INT 13
12373: PPUSH
12374: LD_VAR 0 3
12378: PPUSH
12379: LD_INT 1
12381: PPUSH
12382: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12386: LD_INT 14
12388: PPUSH
12389: LD_VAR 0 3
12393: PPUSH
12394: LD_INT 1
12396: PPUSH
12397: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12401: LD_INT 15
12403: PPUSH
12404: LD_VAR 0 3
12408: PPUSH
12409: LD_INT 1
12411: PPUSH
12412: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12416: LD_INT 16
12418: PPUSH
12419: LD_VAR 0 3
12423: PPUSH
12424: LD_INT 1
12426: PPUSH
12427: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12431: LD_INT 17
12433: PPUSH
12434: LD_VAR 0 3
12438: PPUSH
12439: LD_INT 1
12441: PPUSH
12442: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
12446: LD_INT 18
12448: PPUSH
12449: LD_VAR 0 3
12453: PPUSH
12454: LD_INT 1
12456: PPUSH
12457: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12461: LD_INT 19
12463: PPUSH
12464: LD_VAR 0 3
12468: PPUSH
12469: LD_INT 1
12471: PPUSH
12472: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12476: LD_INT 20
12478: PPUSH
12479: LD_VAR 0 3
12483: PPUSH
12484: LD_INT 1
12486: PPUSH
12487: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12491: LD_INT 21
12493: PPUSH
12494: LD_VAR 0 3
12498: PPUSH
12499: LD_INT 1
12501: PPUSH
12502: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12506: LD_INT 23
12508: PPUSH
12509: LD_VAR 0 3
12513: PPUSH
12514: LD_INT 1
12516: PPUSH
12517: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12521: LD_INT 26
12523: PPUSH
12524: LD_VAR 0 3
12528: PPUSH
12529: LD_INT 1
12531: PPUSH
12532: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12536: LD_INT 27
12538: PPUSH
12539: LD_VAR 0 3
12543: PPUSH
12544: LD_INT 1
12546: PPUSH
12547: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12551: LD_INT 28
12553: PPUSH
12554: LD_VAR 0 3
12558: PPUSH
12559: LD_INT 1
12561: PPUSH
12562: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12566: LD_INT 29
12568: PPUSH
12569: LD_VAR 0 3
12573: PPUSH
12574: LD_INT 1
12576: PPUSH
12577: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12581: LD_INT 30
12583: PPUSH
12584: LD_VAR 0 3
12588: PPUSH
12589: LD_INT 1
12591: PPUSH
12592: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12596: LD_INT 31
12598: PPUSH
12599: LD_VAR 0 3
12603: PPUSH
12604: LD_INT 1
12606: PPUSH
12607: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12611: LD_INT 32
12613: PPUSH
12614: LD_VAR 0 3
12618: PPUSH
12619: LD_INT 1
12621: PPUSH
12622: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
12626: LD_INT 33
12628: PPUSH
12629: LD_VAR 0 3
12633: PPUSH
12634: LD_INT 1
12636: PPUSH
12637: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12641: LD_INT 36
12643: PPUSH
12644: LD_VAR 0 3
12648: PPUSH
12649: LD_INT 1
12651: PPUSH
12652: CALL_OW 324
// end ; 6 :
12656: GO 13666
12658: LD_INT 6
12660: DOUBLE
12661: EQUAL
12662: IFTRUE 12666
12664: GO 13591
12666: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12667: LD_INT 35
12669: PPUSH
12670: LD_VAR 0 3
12674: PPUSH
12675: LD_INT 1
12677: PPUSH
12678: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12682: LD_INT 45
12684: PPUSH
12685: LD_VAR 0 3
12689: PPUSH
12690: LD_INT 1
12692: PPUSH
12693: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12697: LD_INT 46
12699: PPUSH
12700: LD_VAR 0 3
12704: PPUSH
12705: LD_INT 1
12707: PPUSH
12708: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12712: LD_INT 47
12714: PPUSH
12715: LD_VAR 0 3
12719: PPUSH
12720: LD_INT 1
12722: PPUSH
12723: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12727: LD_INT 1
12729: PPUSH
12730: LD_VAR 0 3
12734: PPUSH
12735: LD_INT 1
12737: PPUSH
12738: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12742: LD_INT 2
12744: PPUSH
12745: LD_VAR 0 3
12749: PPUSH
12750: LD_INT 1
12752: PPUSH
12753: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12757: LD_INT 11
12759: PPUSH
12760: LD_VAR 0 3
12764: PPUSH
12765: LD_INT 1
12767: PPUSH
12768: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12772: LD_INT 20
12774: PPUSH
12775: LD_VAR 0 3
12779: PPUSH
12780: LD_INT 1
12782: PPUSH
12783: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12787: LD_INT 48
12789: PPUSH
12790: LD_VAR 0 3
12794: PPUSH
12795: LD_INT 1
12797: PPUSH
12798: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12802: LD_INT 49
12804: PPUSH
12805: LD_VAR 0 3
12809: PPUSH
12810: LD_INT 1
12812: PPUSH
12813: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12817: LD_INT 50
12819: PPUSH
12820: LD_VAR 0 3
12824: PPUSH
12825: LD_INT 1
12827: PPUSH
12828: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12832: LD_INT 69
12834: PPUSH
12835: LD_VAR 0 3
12839: PPUSH
12840: LD_INT 1
12842: PPUSH
12843: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12847: LD_INT 39
12849: PPUSH
12850: LD_VAR 0 3
12854: PPUSH
12855: LD_INT 1
12857: PPUSH
12858: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12862: LD_INT 34
12864: PPUSH
12865: LD_VAR 0 3
12869: PPUSH
12870: LD_INT 1
12872: PPUSH
12873: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12877: LD_INT 42
12879: PPUSH
12880: LD_VAR 0 3
12884: PPUSH
12885: LD_INT 1
12887: PPUSH
12888: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12892: LD_INT 44
12894: PPUSH
12895: LD_VAR 0 3
12899: PPUSH
12900: LD_INT 1
12902: PPUSH
12903: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12907: LD_INT 41
12909: PPUSH
12910: LD_VAR 0 3
12914: PPUSH
12915: LD_INT 1
12917: PPUSH
12918: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
12922: LD_INT 13
12924: PPUSH
12925: LD_VAR 0 3
12929: PPUSH
12930: LD_INT 1
12932: PPUSH
12933: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12937: LD_INT 40
12939: PPUSH
12940: LD_VAR 0 3
12944: PPUSH
12945: LD_INT 1
12947: PPUSH
12948: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12952: LD_INT 43
12954: PPUSH
12955: LD_VAR 0 3
12959: PPUSH
12960: LD_INT 1
12962: PPUSH
12963: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12967: LD_INT 70
12969: PPUSH
12970: LD_VAR 0 3
12974: PPUSH
12975: LD_INT 1
12977: PPUSH
12978: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
12982: LD_INT 23
12984: PPUSH
12985: LD_VAR 0 3
12989: PPUSH
12990: LD_INT 1
12992: PPUSH
12993: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12997: LD_INT 51
12999: PPUSH
13000: LD_VAR 0 3
13004: PPUSH
13005: LD_INT 1
13007: PPUSH
13008: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13012: LD_INT 52
13014: PPUSH
13015: LD_VAR 0 3
13019: PPUSH
13020: LD_INT 1
13022: PPUSH
13023: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13027: LD_INT 6
13029: PPUSH
13030: LD_VAR 0 3
13034: PPUSH
13035: LD_INT 1
13037: PPUSH
13038: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13042: LD_INT 15
13044: PPUSH
13045: LD_VAR 0 3
13049: PPUSH
13050: LD_INT 1
13052: PPUSH
13053: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13057: LD_INT 7
13059: PPUSH
13060: LD_VAR 0 3
13064: PPUSH
13065: LD_INT 1
13067: PPUSH
13068: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13072: LD_INT 12
13074: PPUSH
13075: LD_VAR 0 3
13079: PPUSH
13080: LD_INT 1
13082: PPUSH
13083: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
13087: LD_INT 10
13089: PPUSH
13090: LD_VAR 0 3
13094: PPUSH
13095: LD_INT 1
13097: PPUSH
13098: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
13102: LD_INT 17
13104: PPUSH
13105: LD_VAR 0 3
13109: PPUSH
13110: LD_INT 1
13112: PPUSH
13113: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13117: LD_INT 18
13119: PPUSH
13120: LD_VAR 0 3
13124: PPUSH
13125: LD_INT 1
13127: PPUSH
13128: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13132: LD_INT 60
13134: PPUSH
13135: LD_VAR 0 3
13139: PPUSH
13140: LD_INT 1
13142: PPUSH
13143: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
13147: LD_INT 61
13149: PPUSH
13150: LD_VAR 0 3
13154: PPUSH
13155: LD_INT 1
13157: PPUSH
13158: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13162: LD_INT 32
13164: PPUSH
13165: LD_VAR 0 3
13169: PPUSH
13170: LD_INT 1
13172: PPUSH
13173: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
13177: LD_INT 27
13179: PPUSH
13180: LD_VAR 0 3
13184: PPUSH
13185: LD_INT 1
13187: PPUSH
13188: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
13192: LD_INT 36
13194: PPUSH
13195: LD_VAR 0 3
13199: PPUSH
13200: LD_INT 1
13202: PPUSH
13203: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
13207: LD_INT 33
13209: PPUSH
13210: LD_VAR 0 3
13214: PPUSH
13215: LD_INT 1
13217: PPUSH
13218: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13222: LD_INT 9
13224: PPUSH
13225: LD_VAR 0 3
13229: PPUSH
13230: LD_INT 1
13232: PPUSH
13233: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13237: LD_INT 38
13239: PPUSH
13240: LD_VAR 0 3
13244: PPUSH
13245: LD_INT 1
13247: PPUSH
13248: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13252: LD_INT 57
13254: PPUSH
13255: LD_VAR 0 3
13259: PPUSH
13260: LD_INT 1
13262: PPUSH
13263: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13267: LD_INT 58
13269: PPUSH
13270: LD_VAR 0 3
13274: PPUSH
13275: LD_INT 1
13277: PPUSH
13278: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13282: LD_INT 28
13284: PPUSH
13285: LD_VAR 0 3
13289: PPUSH
13290: LD_INT 1
13292: PPUSH
13293: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13297: LD_INT 29
13299: PPUSH
13300: LD_VAR 0 3
13304: PPUSH
13305: LD_INT 1
13307: PPUSH
13308: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13312: LD_INT 30
13314: PPUSH
13315: LD_VAR 0 3
13319: PPUSH
13320: LD_INT 1
13322: PPUSH
13323: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13327: LD_INT 37
13329: PPUSH
13330: LD_VAR 0 3
13334: PPUSH
13335: LD_INT 1
13337: PPUSH
13338: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13342: LD_INT 63
13344: PPUSH
13345: LD_VAR 0 3
13349: PPUSH
13350: LD_INT 1
13352: PPUSH
13353: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13357: LD_INT 64
13359: PPUSH
13360: LD_VAR 0 3
13364: PPUSH
13365: LD_INT 1
13367: PPUSH
13368: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13372: LD_INT 3
13374: PPUSH
13375: LD_VAR 0 3
13379: PPUSH
13380: LD_INT 1
13382: PPUSH
13383: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13387: LD_INT 4
13389: PPUSH
13390: LD_VAR 0 3
13394: PPUSH
13395: LD_INT 1
13397: PPUSH
13398: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13402: LD_INT 5
13404: PPUSH
13405: LD_VAR 0 3
13409: PPUSH
13410: LD_INT 1
13412: PPUSH
13413: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13417: LD_INT 8
13419: PPUSH
13420: LD_VAR 0 3
13424: PPUSH
13425: LD_INT 1
13427: PPUSH
13428: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13432: LD_INT 66
13434: PPUSH
13435: LD_VAR 0 3
13439: PPUSH
13440: LD_INT 1
13442: PPUSH
13443: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
13447: LD_INT 67
13449: PPUSH
13450: LD_VAR 0 3
13454: PPUSH
13455: LD_INT 1
13457: PPUSH
13458: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13462: LD_INT 21
13464: PPUSH
13465: LD_VAR 0 3
13469: PPUSH
13470: LD_INT 1
13472: PPUSH
13473: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13477: LD_INT 22
13479: PPUSH
13480: LD_VAR 0 3
13484: PPUSH
13485: LD_INT 1
13487: PPUSH
13488: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13492: LD_INT 19
13494: PPUSH
13495: LD_VAR 0 3
13499: PPUSH
13500: LD_INT 1
13502: PPUSH
13503: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13507: LD_INT 26
13509: PPUSH
13510: LD_VAR 0 3
13514: PPUSH
13515: LD_INT 1
13517: PPUSH
13518: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13522: LD_INT 54
13524: PPUSH
13525: LD_VAR 0 3
13529: PPUSH
13530: LD_INT 1
13532: PPUSH
13533: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13537: LD_INT 55
13539: PPUSH
13540: LD_VAR 0 3
13544: PPUSH
13545: LD_INT 1
13547: PPUSH
13548: CALL_OW 322
// for i = 0 to 39 do
13552: LD_ADDR_VAR 0 4
13556: PUSH
13557: DOUBLE
13558: LD_INT 0
13560: DEC
13561: ST_TO_ADDR
13562: LD_INT 39
13564: PUSH
13565: FOR_TO
13566: IFFALSE 13587
// SetRestrict ( i , side , true ) ;
13568: LD_VAR 0 4
13572: PPUSH
13573: LD_VAR 0 3
13577: PPUSH
13578: LD_INT 1
13580: PPUSH
13581: CALL_OW 324
13585: GO 13565
13587: POP
13588: POP
// end ; else
13589: GO 13666
13591: POP
// begin for i = 1 to 73 do
13592: LD_ADDR_VAR 0 4
13596: PUSH
13597: DOUBLE
13598: LD_INT 1
13600: DEC
13601: ST_TO_ADDR
13602: LD_INT 73
13604: PUSH
13605: FOR_TO
13606: IFFALSE 13627
// SetTech ( i , side , state_enabled ) ;
13608: LD_VAR 0 4
13612: PPUSH
13613: LD_VAR 0 3
13617: PPUSH
13618: LD_INT 1
13620: PPUSH
13621: CALL_OW 322
13625: GO 13605
13627: POP
13628: POP
// for i = 0 to 39 do
13629: LD_ADDR_VAR 0 4
13633: PUSH
13634: DOUBLE
13635: LD_INT 0
13637: DEC
13638: ST_TO_ADDR
13639: LD_INT 39
13641: PUSH
13642: FOR_TO
13643: IFFALSE 13664
// SetRestrict ( i , side , true ) ;
13645: LD_VAR 0 4
13649: PPUSH
13650: LD_VAR 0 3
13654: PPUSH
13655: LD_INT 1
13657: PPUSH
13658: CALL_OW 324
13662: GO 13642
13664: POP
13665: POP
// end ; end ; end ;
13666: GO 9671
13668: POP
13669: POP
// end ; end_of_file
13670: LD_VAR 0 2
13674: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
13675: LD_INT 0
13677: PPUSH
13678: PPUSH
13679: PPUSH
13680: PPUSH
13681: PPUSH
13682: PPUSH
13683: PPUSH
13684: PPUSH
13685: PPUSH
// for i := 1 to 8 do
13686: LD_ADDR_VAR 0 2
13690: PUSH
13691: DOUBLE
13692: LD_INT 1
13694: DEC
13695: ST_TO_ADDR
13696: LD_INT 8
13698: PUSH
13699: FOR_TO
13700: IFFALSE 14084
// begin if Side_Positions [ i ] then
13702: LD_EXP 34
13706: PUSH
13707: LD_VAR 0 2
13711: ARRAY
13712: IFFALSE 14082
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
13714: LD_ADDR_VAR 0 7
13718: PUSH
13719: LD_INT 22
13721: PUSH
13722: LD_VAR 0 2
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: PUSH
13731: LD_INT 21
13733: PUSH
13734: LD_INT 1
13736: PUSH
13737: EMPTY
13738: LIST
13739: LIST
13740: PUSH
13741: EMPTY
13742: LIST
13743: LIST
13744: PPUSH
13745: CALL_OW 69
13749: PUSH
13750: LD_INT 0
13752: PLUS
13753: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13754: LD_ADDR_VAR 0 9
13758: PUSH
13759: LD_INT 22
13761: PUSH
13762: LD_VAR 0 2
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: PUSH
13771: LD_INT 2
13773: PUSH
13774: LD_INT 30
13776: PUSH
13777: LD_INT 0
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: PUSH
13784: LD_INT 30
13786: PUSH
13787: LD_INT 1
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: LIST
13798: PUSH
13799: EMPTY
13800: LIST
13801: LIST
13802: PPUSH
13803: CALL_OW 69
13807: ST_TO_ADDR
// crates := 0 ;
13808: LD_ADDR_VAR 0 4
13812: PUSH
13813: LD_INT 0
13815: ST_TO_ADDR
// oil := 0 ;
13816: LD_ADDR_VAR 0 5
13820: PUSH
13821: LD_INT 0
13823: ST_TO_ADDR
// sib := 0 ;
13824: LD_ADDR_VAR 0 6
13828: PUSH
13829: LD_INT 0
13831: ST_TO_ADDR
// if bases then
13832: LD_VAR 0 9
13836: IFFALSE 13942
// begin for j in bases do
13838: LD_ADDR_VAR 0 3
13842: PUSH
13843: LD_VAR 0 9
13847: PUSH
13848: FOR_IN
13849: IFFALSE 13940
// begin base := GetBase ( j ) ;
13851: LD_ADDR_VAR 0 8
13855: PUSH
13856: LD_VAR 0 3
13860: PPUSH
13861: CALL_OW 274
13865: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
13866: LD_ADDR_VAR 0 4
13870: PUSH
13871: LD_VAR 0 4
13875: PUSH
13876: LD_VAR 0 8
13880: PPUSH
13881: LD_INT 1
13883: PPUSH
13884: CALL_OW 275
13888: PLUS
13889: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
13890: LD_ADDR_VAR 0 5
13894: PUSH
13895: LD_VAR 0 5
13899: PUSH
13900: LD_VAR 0 8
13904: PPUSH
13905: LD_INT 2
13907: PPUSH
13908: CALL_OW 275
13912: PLUS
13913: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
13914: LD_ADDR_VAR 0 6
13918: PUSH
13919: LD_VAR 0 6
13923: PUSH
13924: LD_VAR 0 8
13928: PPUSH
13929: LD_INT 3
13931: PPUSH
13932: CALL_OW 275
13936: PLUS
13937: ST_TO_ADDR
// end ;
13938: GO 13848
13940: POP
13941: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
13942: LD_STRING setSpecText(
13944: PUSH
13945: LD_VAR 0 2
13949: STR
13950: PUSH
13951: LD_STRING ,
13953: STR
13954: PUSH
13955: LD_INT 2
13957: STR
13958: PUSH
13959: LD_STRING ,
13961: STR
13962: PUSH
13963: LD_VAR 0 4
13967: STR
13968: PUSH
13969: LD_STRING )
13971: STR
13972: PPUSH
13973: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
13977: LD_STRING setSpecText(
13979: PUSH
13980: LD_VAR 0 2
13984: STR
13985: PUSH
13986: LD_STRING ,
13988: STR
13989: PUSH
13990: LD_INT 3
13992: STR
13993: PUSH
13994: LD_STRING ,
13996: STR
13997: PUSH
13998: LD_VAR 0 5
14002: STR
14003: PUSH
14004: LD_STRING )
14006: STR
14007: PPUSH
14008: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
14012: LD_STRING setSpecText(
14014: PUSH
14015: LD_VAR 0 2
14019: STR
14020: PUSH
14021: LD_STRING ,
14023: STR
14024: PUSH
14025: LD_INT 4
14027: STR
14028: PUSH
14029: LD_STRING ,
14031: STR
14032: PUSH
14033: LD_VAR 0 6
14037: STR
14038: PUSH
14039: LD_STRING )
14041: STR
14042: PPUSH
14043: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
14047: LD_STRING setSpecText(
14049: PUSH
14050: LD_VAR 0 2
14054: STR
14055: PUSH
14056: LD_STRING ,
14058: STR
14059: PUSH
14060: LD_INT 5
14062: STR
14063: PUSH
14064: LD_STRING ,
14066: STR
14067: PUSH
14068: LD_VAR 0 7
14072: STR
14073: PUSH
14074: LD_STRING )
14076: STR
14077: PPUSH
14078: CALL_OW 559
// end ; end ;
14082: GO 13699
14084: POP
14085: POP
// end ;
14086: LD_VAR 0 1
14090: RET
// every 0 0$1 do
14091: GO 14093
14093: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
14094: LD_STRING setSpecLogoNumber(
14096: PUSH
14097: LD_INT 2
14099: STR
14100: PUSH
14101: LD_STRING ,
14103: STR
14104: PUSH
14105: LD_INT 1
14107: STR
14108: PUSH
14109: LD_STRING )
14111: STR
14112: PPUSH
14113: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
14117: LD_STRING setSpecLogoNumber(
14119: PUSH
14120: LD_INT 3
14122: STR
14123: PUSH
14124: LD_STRING ,
14126: STR
14127: PUSH
14128: LD_INT 2
14130: STR
14131: PUSH
14132: LD_STRING )
14134: STR
14135: PPUSH
14136: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
14140: LD_STRING setSpecLogoNumber(
14142: PUSH
14143: LD_INT 4
14145: STR
14146: PUSH
14147: LD_STRING ,
14149: STR
14150: PUSH
14151: LD_INT 3
14153: STR
14154: PUSH
14155: LD_STRING )
14157: STR
14158: PPUSH
14159: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
14163: LD_STRING setSpecLogoNumber(
14165: PUSH
14166: LD_INT 5
14168: STR
14169: PUSH
14170: LD_STRING ,
14172: STR
14173: PUSH
14174: LD_INT 4
14176: STR
14177: PUSH
14178: LD_STRING )
14180: STR
14181: PPUSH
14182: CALL_OW 559
// end ;
14186: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
14187: LD_INT 2
14189: PUSH
14190: LD_INT 30
14192: PUSH
14193: LD_INT 0
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: PUSH
14200: LD_INT 30
14202: PUSH
14203: LD_INT 1
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: LIST
14214: PPUSH
14215: CALL_OW 69
14219: IFFALSE 14229
14221: GO 14223
14223: DISABLE
// begin enable ;
14224: ENABLE
// UpdateSpectatorBar ;
14225: CALL 13675 0 0
// end ;
14229: END
