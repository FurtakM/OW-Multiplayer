// export Game_Type ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_amount_of_apemen , def_people_respawning , def_siberite_bomb , def_builduptime ; export is_depot , number_of_breastworks , number_of_people , skill_level , amount_of_apemen , starting_crates , starting_resources , shipments_density , siberite_bomb_Delay , spawning_koef_of_apemen , respawning_time_min , respawning_time_max , def_win_rules ; export Side_Count , Team_Count , Player_Side , Player_Team , Side_Teams , Teams ; export Side_Positions , Side_Nations , Side_Names , Team_Names , Team_Game , Side_Comps ; export depot_def , start_def , extra_oil_deposits_locations ; export heroes ; export commander , battle_flags_id , morale_decreasing_time ; var global_units , global_defined , soldiers_created ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function create_forest ; var area ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
// PlaceTreesToArea ( BigForest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , Rand ( 500 , 570 ) , 50 , 2 ) ;
  72: LD_INT 6
  74: PPUSH
  75: LD_INT 21
  77: PUSH
  78: LD_INT 22
  80: PUSH
  81: LD_INT 24
  83: PUSH
  84: LD_INT 21
  86: PUSH
  87: LD_INT 22
  89: PUSH
  90: LD_INT 24
  92: PUSH
  93: LD_INT 38
  95: PUSH
  96: LD_INT 39
  98: PUSH
  99: EMPTY
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: PPUSH
 109: LD_INT 500
 111: PPUSH
 112: LD_INT 570
 114: PPUSH
 115: CALL_OW 12
 119: PPUSH
 120: LD_INT 50
 122: PPUSH
 123: LD_INT 2
 125: PPUSH
 126: CALL_OW 352
// if def_base_level then
 130: LD_EXP 2
 134: IFFALSE 146
// area := bush_forest_small else
 136: LD_ADDR_VAR 0 2
 140: PUSH
 141: LD_INT 9
 143: ST_TO_ADDR
 144: GO 154
// area := bush_forest_big ;
 146: LD_ADDR_VAR 0 2
 150: PUSH
 151: LD_INT 8
 153: ST_TO_ADDR
// PlaceTreesToArea ( area , [ 38 , 39 , 37 ] , Rand ( 300 , 350 ) , 10 , 3 ) ;
 154: LD_VAR 0 2
 158: PPUSH
 159: LD_INT 38
 161: PUSH
 162: LD_INT 39
 164: PUSH
 165: LD_INT 37
 167: PUSH
 168: EMPTY
 169: LIST
 170: LIST
 171: LIST
 172: PPUSH
 173: LD_INT 300
 175: PPUSH
 176: LD_INT 350
 178: PPUSH
 179: CALL_OW 12
 183: PPUSH
 184: LD_INT 10
 186: PPUSH
 187: LD_INT 3
 189: PPUSH
 190: CALL_OW 352
// PlaceTreesToArea ( BigForest , [ 38 , 39 , 37 ] , 80 , 10 , 3 ) ;
 194: LD_INT 6
 196: PPUSH
 197: LD_INT 38
 199: PUSH
 200: LD_INT 39
 202: PUSH
 203: LD_INT 37
 205: PUSH
 206: EMPTY
 207: LIST
 208: LIST
 209: LIST
 210: PPUSH
 211: LD_INT 80
 213: PPUSH
 214: LD_INT 10
 216: PPUSH
 217: LD_INT 3
 219: PPUSH
 220: CALL_OW 352
// end ;
 224: LD_VAR 0 1
 228: RET
// function create_map_resources ; var un , oil_pos , sib_pos ; begin
 229: LD_INT 0
 231: PPUSH
 232: PPUSH
 233: PPUSH
 234: PPUSH
// oil_pos := [ [ 24 , 10 ] , [ 82 , 9 ] , [ 79 , 115 ] , [ 135 , 112 ] ] ;
 235: LD_ADDR_VAR 0 3
 239: PUSH
 240: LD_INT 24
 242: PUSH
 243: LD_INT 10
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: PUSH
 250: LD_INT 82
 252: PUSH
 253: LD_INT 9
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 79
 262: PUSH
 263: LD_INT 115
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 135
 272: PUSH
 273: LD_INT 112
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: PUSH
 280: EMPTY
 281: LIST
 282: LIST
 283: LIST
 284: LIST
 285: ST_TO_ADDR
// sib_pos := [ [ 24 , 29 ] , [ 102 , 29 ] , [ 60 , 93 ] , [ 134 , 91 ] ] ;
 286: LD_ADDR_VAR 0 4
 290: PUSH
 291: LD_INT 24
 293: PUSH
 294: LD_INT 29
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: PUSH
 301: LD_INT 102
 303: PUSH
 304: LD_INT 29
 306: PUSH
 307: EMPTY
 308: LIST
 309: LIST
 310: PUSH
 311: LD_INT 60
 313: PUSH
 314: LD_INT 93
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 134
 323: PUSH
 324: LD_INT 91
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: LIST
 335: LIST
 336: ST_TO_ADDR
// for un = 1 to 4 do
 337: LD_ADDR_VAR 0 2
 341: PUSH
 342: DOUBLE
 343: LD_INT 1
 345: DEC
 346: ST_TO_ADDR
 347: LD_INT 4
 349: PUSH
 350: FOR_TO
 351: IFFALSE 429
// begin CreateDepositXY ( oil_pos [ un ] [ 1 ] , oil_pos [ un ] [ 2 ] , mat_oil ) ;
 353: LD_VAR 0 3
 357: PUSH
 358: LD_VAR 0 2
 362: ARRAY
 363: PUSH
 364: LD_INT 1
 366: ARRAY
 367: PPUSH
 368: LD_VAR 0 3
 372: PUSH
 373: LD_VAR 0 2
 377: ARRAY
 378: PUSH
 379: LD_INT 2
 381: ARRAY
 382: PPUSH
 383: LD_INT 2
 385: PPUSH
 386: CALL_OW 62
// CreateDepositXY ( sib_pos [ un ] [ 1 ] , sib_pos [ un ] [ 2 ] , mat_siberit ) ;
 390: LD_VAR 0 4
 394: PUSH
 395: LD_VAR 0 2
 399: ARRAY
 400: PUSH
 401: LD_INT 1
 403: ARRAY
 404: PPUSH
 405: LD_VAR 0 4
 409: PUSH
 410: LD_VAR 0 2
 414: ARRAY
 415: PUSH
 416: LD_INT 2
 418: ARRAY
 419: PPUSH
 420: LD_INT 3
 422: PPUSH
 423: CALL_OW 62
// end ;
 427: GO 350
 429: POP
 430: POP
// end ;
 431: LD_VAR 0 1
 435: RET
// function init_map ; var i ; begin
 436: LD_INT 0
 438: PPUSH
 439: PPUSH
// extra_oil_deposits_locations := [ [ 38 , 6 ] , [ 67 , 6 ] , [ 94 , 115 ] , [ 116 , 99 ] ] ;
 440: LD_ADDR_EXP 42
 444: PUSH
 445: LD_INT 38
 447: PUSH
 448: LD_INT 6
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 67
 457: PUSH
 458: LD_INT 6
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: LD_INT 94
 467: PUSH
 468: LD_INT 115
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: LD_INT 116
 477: PUSH
 478: LD_INT 99
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: ST_TO_ADDR
// create_forest ;
 491: CALL 68 0 0
// create_map_resources ;
 495: CALL 229 0 0
// depot_def := [ [ 12 , 10 , 2 ] , [ 97 , 10 , 3 ] , [ 64 , 108 , 0 ] , [ 146 , 110 , 5 ] ] ;
 499: LD_ADDR_EXP 40
 503: PUSH
 504: LD_INT 12
 506: PUSH
 507: LD_INT 10
 509: PUSH
 510: LD_INT 2
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: LIST
 517: PUSH
 518: LD_INT 97
 520: PUSH
 521: LD_INT 10
 523: PUSH
 524: LD_INT 3
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: LIST
 531: PUSH
 532: LD_INT 64
 534: PUSH
 535: LD_INT 108
 537: PUSH
 538: LD_INT 0
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: LIST
 545: PUSH
 546: LD_INT 146
 548: PUSH
 549: LD_INT 110
 551: PUSH
 552: LD_INT 5
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: LIST
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: LIST
 565: ST_TO_ADDR
// if def_base_level then
 566: LD_EXP 2
 570: IFFALSE 625
// start_def := [ [ 16 , 14 ] , [ 96 , 13 ] , [ 65 , 105 ] , [ 141 , 105 ] ] else
 572: LD_ADDR_EXP 41
 576: PUSH
 577: LD_INT 16
 579: PUSH
 580: LD_INT 14
 582: PUSH
 583: EMPTY
 584: LIST
 585: LIST
 586: PUSH
 587: LD_INT 96
 589: PUSH
 590: LD_INT 13
 592: PUSH
 593: EMPTY
 594: LIST
 595: LIST
 596: PUSH
 597: LD_INT 65
 599: PUSH
 600: LD_INT 105
 602: PUSH
 603: EMPTY
 604: LIST
 605: LIST
 606: PUSH
 607: LD_INT 141
 609: PUSH
 610: LD_INT 105
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: ST_TO_ADDR
 623: GO 676
// start_def := [ [ 7 , 5 ] , [ 98 , 6 ] , [ 63 , 113 ] , [ 151 , 113 ] ] ;
 625: LD_ADDR_EXP 41
 629: PUSH
 630: LD_INT 7
 632: PUSH
 633: LD_INT 5
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: PUSH
 640: LD_INT 98
 642: PUSH
 643: LD_INT 6
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: PUSH
 650: LD_INT 63
 652: PUSH
 653: LD_INT 113
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: PUSH
 660: LD_INT 151
 662: PUSH
 663: LD_INT 113
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: ST_TO_ADDR
// end ;
 676: LD_VAR 0 1
 680: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
 681: LD_INT 0
 683: PPUSH
 684: PPUSH
 685: PPUSH
 686: PPUSH
 687: PPUSH
 688: PPUSH
 689: PPUSH
 690: PPUSH
 691: PPUSH
// if MultiPlayer then
 692: LD_OWVAR 4
 696: IFFALSE 780
// begin Game_Type = mp_game_type ;
 698: LD_ADDR_EXP 1
 702: PUSH
 703: LD_OWVAR 6
 707: ST_TO_ADDR
// Player_Side = mp_player_side ;
 708: LD_ADDR_EXP 30
 712: PUSH
 713: LD_OWVAR 7
 717: ST_TO_ADDR
// Player_Team = mp_player_team ;
 718: LD_ADDR_EXP 31
 722: PUSH
 723: LD_OWVAR 8
 727: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
 728: LD_ADDR_EXP 34
 732: PUSH
 733: LD_OWVAR 17
 737: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 738: LD_ADDR_EXP 32
 742: PUSH
 743: LD_OWVAR 15
 747: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 748: LD_ADDR_EXP 35
 752: PUSH
 753: LD_OWVAR 16
 757: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 758: LD_ADDR_EXP 39
 762: PUSH
 763: CALL 0 0 0
 767: ST_TO_ADDR
// Teams = mp_teams ;
 768: LD_ADDR_EXP 33
 772: PUSH
 773: LD_OWVAR 12
 777: ST_TO_ADDR
// end else
 778: GO 981
// begin Game_Type = 2 ;
 780: LD_ADDR_EXP 1
 784: PUSH
 785: LD_INT 2
 787: ST_TO_ADDR
// Player_Side = 4 ;
 788: LD_ADDR_EXP 30
 792: PUSH
 793: LD_INT 4
 795: ST_TO_ADDR
// Side_Positions = [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 796: LD_ADDR_EXP 34
 800: PUSH
 801: LD_INT 0
 803: PUSH
 804: LD_INT 3
 806: PUSH
 807: LD_INT 0
 809: PUSH
 810: LD_INT 1
 812: PUSH
 813: LD_INT 0
 815: PUSH
 816: LD_INT 2
 818: PUSH
 819: LD_INT 4
 821: PUSH
 822: LD_INT 0
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: LIST
 834: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 2 , 0 , 1 , 2 , 0 ] ;
 835: LD_ADDR_EXP 32
 839: PUSH
 840: LD_INT 0
 842: PUSH
 843: LD_INT 1
 845: PUSH
 846: LD_INT 0
 848: PUSH
 849: LD_INT 2
 851: PUSH
 852: LD_INT 0
 854: PUSH
 855: LD_INT 1
 857: PUSH
 858: LD_INT 2
 860: PUSH
 861: LD_INT 0
 863: PUSH
 864: EMPTY
 865: LIST
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: LIST
 871: LIST
 872: LIST
 873: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 2 , 0 , 1 , 3 , 0 ] ;
 874: LD_ADDR_EXP 35
 878: PUSH
 879: LD_INT 0
 881: PUSH
 882: LD_INT 3
 884: PUSH
 885: LD_INT 0
 887: PUSH
 888: LD_INT 2
 890: PUSH
 891: LD_INT 0
 893: PUSH
 894: LD_INT 1
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: LD_INT 0
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 913: LD_ADDR_EXP 39
 917: PUSH
 918: LD_INT 0
 920: PUSH
 921: LD_INT 0
 923: PUSH
 924: LD_INT 0
 926: PUSH
 927: LD_INT 0
 929: PUSH
 930: LD_INT 0
 932: PUSH
 933: LD_INT 0
 935: PUSH
 936: LD_INT 0
 938: PUSH
 939: LD_INT 0
 941: PUSH
 942: EMPTY
 943: LIST
 944: LIST
 945: LIST
 946: LIST
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: ST_TO_ADDR
// Teams = [ [ 2 , 6 ] , [ 4 , 7 ] ] ;
 952: LD_ADDR_EXP 33
 956: PUSH
 957: LD_INT 2
 959: PUSH
 960: LD_INT 6
 962: PUSH
 963: EMPTY
 964: LIST
 965: LIST
 966: PUSH
 967: LD_INT 4
 969: PUSH
 970: LD_INT 7
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: ST_TO_ADDR
// end ; Side_Count = ( Side_Positions diff [ 0 ] ) + 0 ;
 981: LD_ADDR_EXP 28
 985: PUSH
 986: LD_EXP 34
 990: PUSH
 991: LD_INT 0
 993: PUSH
 994: EMPTY
 995: LIST
 996: DIFF
 997: PUSH
 998: LD_INT 0
1000: PLUS
1001: ST_TO_ADDR
// Team_Count = ( Side_Teams diff [ 0 ] ) + 0 ;
1002: LD_ADDR_EXP 29
1006: PUSH
1007: LD_EXP 32
1011: PUSH
1012: LD_INT 0
1014: PUSH
1015: EMPTY
1016: LIST
1017: DIFF
1018: PUSH
1019: LD_INT 0
1021: PLUS
1022: ST_TO_ADDR
// if MultiPlayer then
1023: LD_OWVAR 4
1027: IFFALSE 1221
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
1029: LD_ADDR_EXP 2
1033: PUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL_OW 426
1041: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
1042: LD_ADDR_EXP 3
1046: PUSH
1047: LD_INT 1
1049: PPUSH
1050: CALL_OW 426
1054: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
1055: LD_ADDR_EXP 4
1059: PUSH
1060: LD_INT 2
1062: PPUSH
1063: CALL_OW 426
1067: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
1068: LD_ADDR_EXP 5
1072: PUSH
1073: LD_INT 3
1075: PPUSH
1076: CALL_OW 426
1080: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
1081: LD_ADDR_EXP 6
1085: PUSH
1086: LD_INT 4
1088: PPUSH
1089: CALL_OW 426
1093: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
1094: LD_ADDR_EXP 7
1098: PUSH
1099: LD_INT 5
1101: PPUSH
1102: CALL_OW 426
1106: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
1107: LD_ADDR_EXP 8
1111: PUSH
1112: LD_INT 10
1114: PPUSH
1115: CALL_OW 426
1119: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
1120: LD_ADDR_EXP 9
1124: PUSH
1125: LD_INT 11
1127: PPUSH
1128: CALL_OW 426
1132: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
1133: LD_ADDR_EXP 10
1137: PUSH
1138: LD_INT 12
1140: PPUSH
1141: CALL_OW 426
1145: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
1146: LD_ADDR_EXP 11
1150: PUSH
1151: LD_INT 13
1153: PPUSH
1154: CALL_OW 426
1158: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
1159: LD_ADDR_EXP 12
1163: PUSH
1164: LD_INT 14
1166: PPUSH
1167: CALL_OW 426
1171: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
1172: LD_ADDR_EXP 13
1176: PUSH
1177: LD_INT 15
1179: PPUSH
1180: CALL_OW 426
1184: ST_TO_ADDR
// def_win_rules = 0 ;
1185: LD_ADDR_EXP 27
1189: PUSH
1190: LD_INT 0
1192: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
1193: LD_ADDR_EXP 14
1197: PUSH
1198: LD_INT 20
1200: PPUSH
1201: CALL_OW 426
1205: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
1206: LD_ADDR_VAR 0 9
1210: PUSH
1211: LD_INT 22
1213: PPUSH
1214: CALL_OW 426
1218: ST_TO_ADDR
// end else
1219: GO 1345
// begin randomize ;
1221: CALL_OW 10
// def_base_level = 1 ;
1225: LD_ADDR_EXP 2
1229: PUSH
1230: LD_INT 1
1232: ST_TO_ADDR
// def_amount_of_people = 1 ;
1233: LD_ADDR_EXP 3
1237: PUSH
1238: LD_INT 1
1240: ST_TO_ADDR
// def_skill_level = 1 ;
1241: LD_ADDR_EXP 4
1245: PUSH
1246: LD_INT 1
1248: ST_TO_ADDR
// def_starting_resources = 2 ;
1249: LD_ADDR_EXP 5
1253: PUSH
1254: LD_INT 2
1256: ST_TO_ADDR
// def_shipments_density = 1 ;
1257: LD_ADDR_EXP 6
1261: PUSH
1262: LD_INT 1
1264: ST_TO_ADDR
// def_extra_oil_deposits = 0 ;
1265: LD_ADDR_EXP 7
1269: PUSH
1270: LD_INT 0
1272: ST_TO_ADDR
// def_shared_vision = 1 ;
1273: LD_ADDR_EXP 8
1277: PUSH
1278: LD_INT 1
1280: ST_TO_ADDR
// def_morale_flags = 1 ;
1281: LD_ADDR_EXP 9
1285: PUSH
1286: LD_INT 1
1288: ST_TO_ADDR
// def_siberite_detection = 1 ;
1289: LD_ADDR_EXP 10
1293: PUSH
1294: LD_INT 1
1296: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
1297: LD_ADDR_EXP 11
1301: PUSH
1302: LD_INT 3
1304: ST_TO_ADDR
// def_people_respawning = 2 ;
1305: LD_ADDR_EXP 12
1309: PUSH
1310: LD_INT 2
1312: ST_TO_ADDR
// def_siberite_bomb = 0 ;
1313: LD_ADDR_EXP 13
1317: PUSH
1318: LD_INT 0
1320: ST_TO_ADDR
// def_win_rules = 0 ;
1321: LD_ADDR_EXP 27
1325: PUSH
1326: LD_INT 0
1328: ST_TO_ADDR
// def_builduptime := 1 ;
1329: LD_ADDR_EXP 14
1333: PUSH
1334: LD_INT 1
1336: ST_TO_ADDR
// tech_level = 4 ;
1337: LD_ADDR_VAR 0 9
1341: PUSH
1342: LD_INT 4
1344: ST_TO_ADDR
// end ; if isSGUI then
1345: LD_OWVAR 83
1349: IFFALSE 1357
// setMpTechs ( ) else
1351: CALL 8353 0 0
1355: GO 1370
// begin SetMpTechLevel ( tech_level + 1 ) ;
1357: LD_VAR 0 9
1361: PUSH
1362: LD_INT 1
1364: PLUS
1365: PPUSH
1366: CALL 8500 0 1
// end ; is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1370: LD_ADDR_EXP 15
1374: PUSH
1375: LD_INT 0
1377: PUSH
1378: LD_INT 1
1380: PUSH
1381: LD_INT 1
1383: PUSH
1384: LD_INT 1
1386: PUSH
1387: EMPTY
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: PUSH
1393: LD_EXP 2
1397: PUSH
1398: LD_INT 1
1400: PLUS
1401: ARRAY
1402: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 0 , 0 ] [ def_base_level + 1 ] ;
1403: LD_ADDR_EXP 16
1407: PUSH
1408: LD_INT 0
1410: PUSH
1411: LD_INT 0
1413: PUSH
1414: LD_INT 0
1416: PUSH
1417: LD_INT 0
1419: PUSH
1420: EMPTY
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: PUSH
1426: LD_EXP 2
1430: PUSH
1431: LD_INT 1
1433: PLUS
1434: ARRAY
1435: ST_TO_ADDR
// number_of_people = [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
1436: LD_ADDR_EXP 17
1440: PUSH
1441: LD_INT 9
1443: PUSH
1444: LD_INT 12
1446: PUSH
1447: LD_INT 15
1449: PUSH
1450: LD_INT 24
1452: PUSH
1453: EMPTY
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: PUSH
1459: LD_EXP 3
1463: PUSH
1464: LD_INT 1
1466: PLUS
1467: ARRAY
1468: ST_TO_ADDR
// skill_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1469: LD_ADDR_EXP 18
1473: PUSH
1474: LD_INT 2
1476: PUSH
1477: LD_INT 3
1479: PUSH
1480: LD_INT 4
1482: PUSH
1483: LD_INT 5
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: PUSH
1492: LD_EXP 4
1496: PUSH
1497: LD_INT 1
1499: PLUS
1500: ARRAY
1501: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1502: LD_ADDR_EXP 21
1506: PUSH
1507: LD_INT 0
1509: PUSH
1510: LD_INT 0
1512: PUSH
1513: LD_INT 0
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: LIST
1520: PUSH
1521: LD_INT 30
1523: PUSH
1524: LD_INT 0
1526: PUSH
1527: LD_INT 0
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: PUSH
1535: LD_INT 50
1537: PUSH
1538: LD_INT 20
1540: PUSH
1541: LD_INT 0
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 80
1551: PUSH
1552: LD_INT 40
1554: PUSH
1555: LD_INT 20
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: PUSH
1563: EMPTY
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: PUSH
1569: LD_EXP 5
1573: PUSH
1574: LD_INT 1
1576: PLUS
1577: ARRAY
1578: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1579: LD_ADDR_EXP 20
1583: PUSH
1584: LD_INT 10
1586: PUSH
1587: EMPTY
1588: LIST
1589: PUSH
1590: LD_INT 7
1592: PUSH
1593: LD_INT 14
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: PUSH
1600: LD_INT 6
1602: PUSH
1603: LD_INT 12
1605: PUSH
1606: LD_INT 18
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: PUSH
1614: LD_INT 5
1616: PUSH
1617: LD_INT 10
1619: PUSH
1620: LD_INT 15
1622: PUSH
1623: LD_INT 20
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: PUSH
1638: LD_EXP 5
1642: PUSH
1643: LD_INT 1
1645: PLUS
1646: ARRAY
1647: ST_TO_ADDR
// shipments_density = [ 20 , 30 , 40 ] [ def_shipments_density + 1 ] ;
1648: LD_ADDR_EXP 22
1652: PUSH
1653: LD_INT 20
1655: PUSH
1656: LD_INT 30
1658: PUSH
1659: LD_INT 40
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: LIST
1666: PUSH
1667: LD_EXP 6
1671: PUSH
1672: LD_INT 1
1674: PLUS
1675: ARRAY
1676: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1677: LD_ADDR_EXP 19
1681: PUSH
1682: LD_INT 0
1684: PUSH
1685: LD_INT 1
1687: PUSH
1688: LD_INT 2
1690: PUSH
1691: LD_INT 3
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: PUSH
1700: LD_EXP 11
1704: PUSH
1705: LD_INT 1
1707: PLUS
1708: ARRAY
1709: ST_TO_ADDR
// spawning_koef_of_apemen = [ 0 , 165 , 140 , 115 ] [ def_amount_of_apemen + 1 ] ;
1710: LD_ADDR_EXP 24
1714: PUSH
1715: LD_INT 0
1717: PUSH
1718: LD_INT 165
1720: PUSH
1721: LD_INT 140
1723: PUSH
1724: LD_INT 115
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: PUSH
1733: LD_EXP 11
1737: PUSH
1738: LD_INT 1
1740: PLUS
1741: ARRAY
1742: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1743: LD_ADDR_EXP 25
1747: PUSH
1748: LD_INT 0
1750: PUSH
1751: LD_INT 8400
1753: PUSH
1754: LD_INT 1750
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: LIST
1761: PUSH
1762: LD_EXP 12
1766: PUSH
1767: LD_INT 1
1769: PLUS
1770: ARRAY
1771: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1772: LD_ADDR_EXP 26
1776: PUSH
1777: LD_INT 0
1779: PUSH
1780: LD_INT 21000
1782: PUSH
1783: LD_INT 4200
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: LIST
1790: PUSH
1791: LD_EXP 12
1795: PUSH
1796: LD_INT 1
1798: PLUS
1799: ARRAY
1800: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1801: LD_ADDR_EXP 23
1805: PUSH
1806: LD_INT 0
1808: PUSH
1809: LD_INT 1
1811: PUSH
1812: LD_INT 63000
1814: PUSH
1815: LD_INT 126000
1817: PUSH
1818: LD_INT 189000
1820: PUSH
1821: LD_INT 252000
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: PUSH
1832: LD_EXP 13
1836: PUSH
1837: LD_INT 1
1839: PLUS
1840: ARRAY
1841: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1842: LD_ADDR_EXP 46
1846: PUSH
1847: LD_INT 1
1849: NEG
1850: PUSH
1851: LD_INT 350
1853: PUSH
1854: LD_INT 700
1856: PUSH
1857: LD_INT 1400
1859: PUSH
1860: LD_INT 0
1862: PUSH
1863: EMPTY
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: PUSH
1870: LD_EXP 9
1874: PUSH
1875: LD_INT 1
1877: PLUS
1878: ARRAY
1879: ST_TO_ADDR
// battle_flags_id = [ ] ;
1880: LD_ADDR_EXP 45
1884: PUSH
1885: EMPTY
1886: ST_TO_ADDR
// end ;
1887: LD_VAR 0 1
1891: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1892: LD_INT 0
1894: PPUSH
1895: PPUSH
1896: PPUSH
// Team_Game := 0 ;
1897: LD_ADDR_EXP 38
1901: PUSH
1902: LD_INT 0
1904: ST_TO_ADDR
// for i = 1 to 8 do
1905: LD_ADDR_VAR 0 2
1909: PUSH
1910: DOUBLE
1911: LD_INT 1
1913: DEC
1914: ST_TO_ADDR
1915: LD_INT 8
1917: PUSH
1918: FOR_TO
1919: IFFALSE 1945
// Team_Game := Team_Game + Side_Teams [ i ] ;
1921: LD_ADDR_EXP 38
1925: PUSH
1926: LD_EXP 38
1930: PUSH
1931: LD_EXP 32
1935: PUSH
1936: LD_VAR 0 2
1940: ARRAY
1941: PLUS
1942: ST_TO_ADDR
1943: GO 1918
1945: POP
1946: POP
// if not Team_Game then
1947: LD_EXP 38
1951: NOT
1952: IFFALSE 1964
// Team_Game := false else
1954: LD_ADDR_EXP 38
1958: PUSH
1959: LD_INT 0
1961: ST_TO_ADDR
1962: GO 1972
// Team_Game := true ;
1964: LD_ADDR_EXP 38
1968: PUSH
1969: LD_INT 1
1971: ST_TO_ADDR
// if not Team_Game then
1972: LD_EXP 38
1976: NOT
1977: IFFALSE 2075
// begin for i = 1 to 8 do
1979: LD_ADDR_VAR 0 2
1983: PUSH
1984: DOUBLE
1985: LD_INT 1
1987: DEC
1988: ST_TO_ADDR
1989: LD_INT 8
1991: PUSH
1992: FOR_TO
1993: IFFALSE 2071
// for j = 1 to 8 do
1995: LD_ADDR_VAR 0 3
1999: PUSH
2000: DOUBLE
2001: LD_INT 1
2003: DEC
2004: ST_TO_ADDR
2005: LD_INT 8
2007: PUSH
2008: FOR_TO
2009: IFFALSE 2067
// if i <> j then
2011: LD_VAR 0 2
2015: PUSH
2016: LD_VAR 0 3
2020: NONEQUAL
2021: IFFALSE 2045
// SetAttitude ( i , j , att_neutral , true ) else
2023: LD_VAR 0 2
2027: PPUSH
2028: LD_VAR 0 3
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: LD_INT 1
2038: PPUSH
2039: CALL_OW 80
2043: GO 2065
// SetAttitude ( i , j , att_friend , true ) ;
2045: LD_VAR 0 2
2049: PPUSH
2050: LD_VAR 0 3
2054: PPUSH
2055: LD_INT 1
2057: PPUSH
2058: LD_INT 1
2060: PPUSH
2061: CALL_OW 80
2065: GO 2008
2067: POP
2068: POP
2069: GO 1992
2071: POP
2072: POP
// end else
2073: GO 2250
// begin if def_shared_vision then
2075: LD_EXP 8
2079: IFFALSE 2144
// begin for i in Teams do
2081: LD_ADDR_VAR 0 2
2085: PUSH
2086: LD_EXP 33
2090: PUSH
2091: FOR_IN
2092: IFFALSE 2142
// for j = 2 to i do
2094: LD_ADDR_VAR 0 3
2098: PUSH
2099: DOUBLE
2100: LD_INT 2
2102: DEC
2103: ST_TO_ADDR
2104: LD_VAR 0 2
2108: PUSH
2109: FOR_TO
2110: IFFALSE 2138
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2112: LD_VAR 0 2
2116: PUSH
2117: LD_VAR 0 3
2121: ARRAY
2122: PPUSH
2123: LD_VAR 0 2
2127: PUSH
2128: LD_INT 1
2130: ARRAY
2131: PPUSH
2132: CALL_OW 343
2136: GO 2109
2138: POP
2139: POP
2140: GO 2091
2142: POP
2143: POP
// end ; for i = 1 to 8 do
2144: LD_ADDR_VAR 0 2
2148: PUSH
2149: DOUBLE
2150: LD_INT 1
2152: DEC
2153: ST_TO_ADDR
2154: LD_INT 8
2156: PUSH
2157: FOR_TO
2158: IFFALSE 2248
// for j = 1 to 8 do
2160: LD_ADDR_VAR 0 3
2164: PUSH
2165: DOUBLE
2166: LD_INT 1
2168: DEC
2169: ST_TO_ADDR
2170: LD_INT 8
2172: PUSH
2173: FOR_TO
2174: IFFALSE 2244
// if Side_Teams [ i ] = Side_Teams [ j ] then
2176: LD_EXP 32
2180: PUSH
2181: LD_VAR 0 2
2185: ARRAY
2186: PUSH
2187: LD_EXP 32
2191: PUSH
2192: LD_VAR 0 3
2196: ARRAY
2197: EQUAL
2198: IFFALSE 2222
// SetAttitude ( i , j , att_friend , true ) else
2200: LD_VAR 0 2
2204: PPUSH
2205: LD_VAR 0 3
2209: PPUSH
2210: LD_INT 1
2212: PPUSH
2213: LD_INT 1
2215: PPUSH
2216: CALL_OW 80
2220: GO 2242
// SetAttitude ( i , j , att_enemy , true ) ;
2222: LD_VAR 0 2
2226: PPUSH
2227: LD_VAR 0 3
2231: PPUSH
2232: LD_INT 2
2234: PPUSH
2235: LD_INT 1
2237: PPUSH
2238: CALL_OW 80
2242: GO 2173
2244: POP
2245: POP
2246: GO 2157
2248: POP
2249: POP
// end ; end ;
2250: LD_VAR 0 1
2254: RET
// function prepare_people ( side , count , cl , x , y , r , var commander ) ; var i , j , un ; begin
2255: LD_INT 0
2257: PPUSH
2258: PPUSH
2259: PPUSH
2260: PPUSH
// result := [ ] ;
2261: LD_ADDR_VAR 0 8
2265: PUSH
2266: EMPTY
2267: ST_TO_ADDR
// for i := 1 to count do
2268: LD_ADDR_VAR 0 9
2272: PUSH
2273: DOUBLE
2274: LD_INT 1
2276: DEC
2277: ST_TO_ADDR
2278: LD_VAR 0 2
2282: PUSH
2283: FOR_TO
2284: IFFALSE 2678
// begin uc_direction := Rand ( 0 , 5 ) ;
2286: LD_ADDR_OWVAR 24
2290: PUSH
2291: LD_INT 0
2293: PPUSH
2294: LD_INT 5
2296: PPUSH
2297: CALL_OW 12
2301: ST_TO_ADDR
// if commander then
2302: LD_FROM_VAR 0 7
2306: IFFALSE 2415
// begin hc_name := mp_sides_players_names [ side ] ;
2308: LD_ADDR_OWVAR 26
2312: PUSH
2313: LD_OWVAR 19
2317: PUSH
2318: LD_VAR 0 1
2322: ARRAY
2323: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2324: LD_INT 1
2326: PPUSH
2327: LD_INT 2
2329: PPUSH
2330: CALL_OW 12
2334: PPUSH
2335: LD_VAR 0 3
2339: PPUSH
2340: LD_EXP 18
2344: PUSH
2345: LD_INT 2
2347: PLUS
2348: PPUSH
2349: CALL_OW 380
// hc_importance := 105 ;
2353: LD_ADDR_OWVAR 32
2357: PUSH
2358: LD_INT 105
2360: ST_TO_ADDR
// commander := false ;
2361: LD_VAR 0 7
2365: PUSH
2366: LD_INT 0
2368: ST_TO_ADDR
// if Multiplayer then
2369: LD_OWVAR 4
2373: IFFALSE 2413
// begin hc_gallery := MULTIAVATARS ;
2375: LD_ADDR_OWVAR 33
2379: PUSH
2380: LD_STRING MULTIAVATARS
2382: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( Side ) ;
2383: LD_ADDR_OWVAR 34
2387: PUSH
2388: LD_VAR 0 1
2392: PPUSH
2393: CALL_OW 525
2397: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( Side ) ;
2398: LD_ADDR_OWVAR 27
2402: PUSH
2403: LD_VAR 0 1
2407: PPUSH
2408: CALL_OW 526
2412: ST_TO_ADDR
// end ; end else
2413: GO 2478
// begin hc_name :=  ;
2415: LD_ADDR_OWVAR 26
2419: PUSH
2420: LD_STRING 
2422: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2423: LD_INT 1
2425: PPUSH
2426: LD_INT 2
2428: PPUSH
2429: CALL_OW 12
2433: PPUSH
2434: LD_VAR 0 3
2438: PPUSH
2439: LD_EXP 18
2443: PPUSH
2444: CALL_OW 380
// hc_importance := 0 ;
2448: LD_ADDR_OWVAR 32
2452: PUSH
2453: LD_INT 0
2455: ST_TO_ADDR
// if Multiplayer then
2456: LD_OWVAR 4
2460: IFFALSE 2478
// begin hc_gallery :=  ;
2462: LD_ADDR_OWVAR 33
2466: PUSH
2467: LD_STRING 
2469: ST_TO_ADDR
// hc_face_number := 0 ;
2470: LD_ADDR_OWVAR 34
2474: PUSH
2475: LD_INT 0
2477: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2478: LD_ADDR_VAR 0 11
2482: PUSH
2483: CALL_OW 44
2487: ST_TO_ADDR
// if global_defined then
2488: LD_LOC 2
2492: IFFALSE 2630
// begin j := i ;
2494: LD_ADDR_VAR 0 10
2498: PUSH
2499: LD_VAR 0 9
2503: ST_TO_ADDR
// if cl = class_soldier then
2504: LD_VAR 0 3
2508: PUSH
2509: LD_INT 1
2511: EQUAL
2512: IFFALSE 2530
// j := i + soldiers_created ;
2514: LD_ADDR_VAR 0 10
2518: PUSH
2519: LD_VAR 0 9
2523: PUSH
2524: LD_LOC 3
2528: PLUS
2529: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2530: LD_LOC 1
2534: PUSH
2535: LD_VAR 0 3
2539: ARRAY
2540: PUSH
2541: LD_VAR 0 10
2545: ARRAY
2546: PPUSH
2547: LD_VAR 0 11
2551: PPUSH
2552: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2556: LD_VAR 0 11
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_LOC 1
2568: PUSH
2569: LD_VAR 0 3
2573: ARRAY
2574: PUSH
2575: LD_VAR 0 10
2579: ARRAY
2580: PPUSH
2581: LD_INT 2
2583: PPUSH
2584: CALL_OW 260
2588: PPUSH
2589: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2593: LD_VAR 0 11
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: LD_LOC 1
2605: PUSH
2606: LD_VAR 0 3
2610: ARRAY
2611: PUSH
2612: LD_VAR 0 10
2616: ARRAY
2617: PPUSH
2618: LD_INT 1
2620: PPUSH
2621: CALL_OW 260
2625: PPUSH
2626: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2630: LD_VAR 0 11
2634: PPUSH
2635: LD_VAR 0 4
2639: PPUSH
2640: LD_VAR 0 5
2644: PPUSH
2645: LD_VAR 0 6
2649: PPUSH
2650: LD_INT 0
2652: PPUSH
2653: CALL_OW 50
// result := result ^ [ un ] ;
2657: LD_ADDR_VAR 0 8
2661: PUSH
2662: LD_VAR 0 8
2666: PUSH
2667: LD_VAR 0 11
2671: PUSH
2672: EMPTY
2673: LIST
2674: ADD
2675: ST_TO_ADDR
// end ;
2676: GO 2283
2678: POP
2679: POP
// if not global_defined then
2680: LD_LOC 2
2684: NOT
2685: IFFALSE 2747
// if cl = class_soldier and global_units then
2687: LD_VAR 0 3
2691: PUSH
2692: LD_INT 1
2694: EQUAL
2695: PUSH
2696: LD_LOC 1
2700: AND
2701: IFFALSE 2728
// global_units := [ global_units [ 1 ] ^ result ] else
2703: LD_ADDR_LOC 1
2707: PUSH
2708: LD_LOC 1
2712: PUSH
2713: LD_INT 1
2715: ARRAY
2716: PUSH
2717: LD_VAR 0 8
2721: ADD
2722: PUSH
2723: EMPTY
2724: LIST
2725: ST_TO_ADDR
2726: GO 2747
// global_units := global_units ^ [ result ] ;
2728: LD_ADDR_LOC 1
2732: PUSH
2733: LD_LOC 1
2737: PUSH
2738: LD_VAR 0 8
2742: PUSH
2743: EMPTY
2744: LIST
2745: ADD
2746: ST_TO_ADDR
// if commander then
2747: LD_FROM_VAR 0 7
2751: IFFALSE 2798
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2753: LD_ADDR_EXP 43
2757: PUSH
2758: LD_EXP 43
2762: PPUSH
2763: LD_OWVAR 20
2767: PPUSH
2768: LD_EXP 43
2772: PUSH
2773: LD_OWVAR 20
2777: ARRAY
2778: PUSH
2779: LD_VAR 0 11
2783: ADD
2784: PPUSH
2785: CALL_OW 1
2789: ST_TO_ADDR
// commander := false ;
2790: LD_VAR 0 7
2794: PUSH
2795: LD_INT 0
2797: ST_TO_ADDR
// end ; end ;
2798: LD_VAR 0 8
2802: RET
// function prepare_buldozer ( x , y , r , pos ) ; var nation ; begin
2803: LD_INT 0
2805: PPUSH
2806: PPUSH
// if uc_nation = 2 then
2807: LD_OWVAR 21
2811: PUSH
2812: LD_INT 2
2814: EQUAL
2815: IFFALSE 2837
// begin nation := uc_nation ;
2817: LD_ADDR_VAR 0 6
2821: PUSH
2822: LD_OWVAR 21
2826: ST_TO_ADDR
// uc_nation := 1 ;
2827: LD_ADDR_OWVAR 21
2831: PUSH
2832: LD_INT 1
2834: ST_TO_ADDR
// end else
2835: GO 2845
// nation := false ;
2837: LD_ADDR_VAR 0 6
2841: PUSH
2842: LD_INT 0
2844: ST_TO_ADDR
// vc_engine = engine_combustion ;
2845: LD_ADDR_OWVAR 39
2849: PUSH
2850: LD_INT 1
2852: ST_TO_ADDR
// vc_control = control_manual ;
2853: LD_ADDR_OWVAR 38
2857: PUSH
2858: LD_INT 1
2860: ST_TO_ADDR
// if uc_nation = nation_russian then
2861: LD_OWVAR 21
2865: PUSH
2866: LD_INT 3
2868: EQUAL
2869: IFFALSE 2889
// begin vc_chassis = ru_heavy_tracked ;
2871: LD_ADDR_OWVAR 37
2875: PUSH
2876: LD_INT 24
2878: ST_TO_ADDR
// vc_weapon = ru_bulldozer ;
2879: LD_ADDR_OWVAR 40
2883: PUSH
2884: LD_INT 53
2886: ST_TO_ADDR
// end else
2887: GO 2905
// begin vc_chassis = us_heavy_tracked ;
2889: LD_ADDR_OWVAR 37
2893: PUSH
2894: LD_INT 4
2896: ST_TO_ADDR
// vc_weapon = us_bulldozer ;
2897: LD_ADDR_OWVAR 40
2901: PUSH
2902: LD_INT 14
2904: ST_TO_ADDR
// end ; case pos of 1 :
2905: LD_VAR 0 4
2909: PUSH
2910: LD_INT 1
2912: DOUBLE
2913: EQUAL
2914: IFTRUE 2918
2916: GO 2929
2918: POP
// uc_direction := 2 ; 2 :
2919: LD_ADDR_OWVAR 24
2923: PUSH
2924: LD_INT 2
2926: ST_TO_ADDR
2927: GO 2987
2929: LD_INT 2
2931: DOUBLE
2932: EQUAL
2933: IFTRUE 2937
2935: GO 2948
2937: POP
// uc_direction := 3 ; 3 :
2938: LD_ADDR_OWVAR 24
2942: PUSH
2943: LD_INT 3
2945: ST_TO_ADDR
2946: GO 2987
2948: LD_INT 3
2950: DOUBLE
2951: EQUAL
2952: IFTRUE 2956
2954: GO 2967
2956: POP
// uc_direction := 0 ; 4 :
2957: LD_ADDR_OWVAR 24
2961: PUSH
2962: LD_INT 0
2964: ST_TO_ADDR
2965: GO 2987
2967: LD_INT 4
2969: DOUBLE
2970: EQUAL
2971: IFTRUE 2975
2973: GO 2986
2975: POP
// uc_direction := 5 ; end ;
2976: LD_ADDR_OWVAR 24
2980: PUSH
2981: LD_INT 5
2983: ST_TO_ADDR
2984: GO 2987
2986: POP
// PlaceUnitXYR ( CreateVehicle , x , y , r , false ) ;
2987: CALL_OW 45
2991: PPUSH
2992: LD_VAR 0 1
2996: PPUSH
2997: LD_VAR 0 2
3001: PPUSH
3002: LD_VAR 0 3
3006: PPUSH
3007: LD_INT 0
3009: PPUSH
3010: CALL_OW 50
// if nation then
3014: LD_VAR 0 6
3018: IFFALSE 3030
// uc_nation := nation ;
3020: LD_ADDR_OWVAR 21
3024: PUSH
3025: LD_VAR 0 6
3029: ST_TO_ADDR
// end ;
3030: LD_VAR 0 5
3034: RET
// function prepare_side ( side ) ; var pos , x , y , i , r , sol , br , dep , neng , nsci , nmech , nsol ; begin
3035: LD_INT 0
3037: PPUSH
3038: PPUSH
3039: PPUSH
3040: PPUSH
3041: PPUSH
3042: PPUSH
3043: PPUSH
3044: PPUSH
3045: PPUSH
3046: PPUSH
3047: PPUSH
3048: PPUSH
3049: PPUSH
// pos := Side_Positions [ side ] ;
3050: LD_ADDR_VAR 0 3
3054: PUSH
3055: LD_EXP 34
3059: PUSH
3060: LD_VAR 0 1
3064: ARRAY
3065: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3066: LD_ADDR_OWVAR 21
3070: PUSH
3071: LD_EXP 35
3075: PUSH
3076: LD_VAR 0 1
3080: ARRAY
3081: ST_TO_ADDR
// uc_side := side ;
3082: LD_ADDR_OWVAR 20
3086: PUSH
3087: LD_VAR 0 1
3091: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3092: LD_ADDR_VAR 0 4
3096: PUSH
3097: LD_EXP 40
3101: PUSH
3102: LD_VAR 0 3
3106: ARRAY
3107: PUSH
3108: LD_INT 1
3110: ARRAY
3111: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3112: LD_ADDR_VAR 0 5
3116: PUSH
3117: LD_EXP 40
3121: PUSH
3122: LD_VAR 0 3
3126: ARRAY
3127: PUSH
3128: LD_INT 2
3130: ARRAY
3131: ST_TO_ADDR
// if is_depot then
3132: LD_EXP 15
3136: IFFALSE 3279
// begin bc_type = b_depot ;
3138: LD_ADDR_OWVAR 42
3142: PUSH
3143: LD_INT 0
3145: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , Depot_Def [ pos ] [ 3 ] ) ;
3146: LD_ADDR_VAR 0 10
3150: PUSH
3151: LD_VAR 0 4
3155: PPUSH
3156: LD_VAR 0 5
3160: PPUSH
3161: LD_EXP 40
3165: PUSH
3166: LD_VAR 0 3
3170: ARRAY
3171: PUSH
3172: LD_INT 3
3174: ARRAY
3175: PPUSH
3176: CALL_OW 47
3180: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3181: LD_VAR 0 10
3185: PPUSH
3186: LD_STRING @
3188: PUSH
3189: LD_VAR 0 1
3193: STR
3194: PPUSH
3195: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3199: LD_VAR 0 10
3203: PPUSH
3204: CALL_OW 274
3208: PPUSH
3209: LD_INT 1
3211: PPUSH
3212: LD_EXP 21
3216: PUSH
3217: LD_INT 1
3219: ARRAY
3220: PPUSH
3221: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3225: LD_VAR 0 10
3229: PPUSH
3230: CALL_OW 274
3234: PPUSH
3235: LD_INT 2
3237: PPUSH
3238: LD_EXP 21
3242: PUSH
3243: LD_INT 2
3245: ARRAY
3246: PPUSH
3247: CALL_OW 277
// SetResourceType ( GetBase ( result ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3251: LD_VAR 0 2
3255: PPUSH
3256: CALL_OW 274
3260: PPUSH
3261: LD_INT 3
3263: PPUSH
3264: LD_EXP 21
3268: PUSH
3269: LD_INT 3
3271: ARRAY
3272: PPUSH
3273: CALL_OW 277
// end else
3277: GO 3423
// begin for i := 1 to 3 do
3279: LD_ADDR_VAR 0 6
3283: PUSH
3284: DOUBLE
3285: LD_INT 1
3287: DEC
3288: ST_TO_ADDR
3289: LD_INT 3
3291: PUSH
3292: FOR_TO
3293: IFFALSE 3421
// begin r := starting_resources [ i ] ;
3295: LD_ADDR_VAR 0 7
3299: PUSH
3300: LD_EXP 21
3304: PUSH
3305: LD_VAR 0 6
3309: ARRAY
3310: ST_TO_ADDR
// while r >= 10 do
3311: LD_VAR 0 7
3315: PUSH
3316: LD_INT 10
3318: GREATEREQUAL
3319: IFFALSE 3419
// if r > 50 then
3321: LD_VAR 0 7
3325: PUSH
3326: LD_INT 50
3328: GREATER
3329: IFFALSE 3375
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3331: LD_VAR 0 6
3335: PPUSH
3336: LD_INT 5
3338: PPUSH
3339: LD_VAR 0 4
3343: PPUSH
3344: LD_VAR 0 5
3348: PPUSH
3349: LD_INT 4
3351: PPUSH
3352: LD_INT 0
3354: PPUSH
3355: CALL_OW 60
// r := r - 50 ;
3359: LD_ADDR_VAR 0 7
3363: PUSH
3364: LD_VAR 0 7
3368: PUSH
3369: LD_INT 50
3371: MINUS
3372: ST_TO_ADDR
// end else
3373: GO 3417
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3375: LD_VAR 0 6
3379: PPUSH
3380: LD_VAR 0 7
3384: PUSH
3385: LD_INT 10
3387: DIV
3388: PPUSH
3389: LD_VAR 0 4
3393: PPUSH
3394: LD_VAR 0 5
3398: PPUSH
3399: LD_INT 4
3401: PPUSH
3402: LD_INT 0
3404: PPUSH
3405: CALL_OW 60
// r := 0 ;
3409: LD_ADDR_VAR 0 7
3413: PUSH
3414: LD_INT 0
3416: ST_TO_ADDR
// end ;
3417: GO 3311
// end ;
3419: GO 3292
3421: POP
3422: POP
// end ; x := start_def [ pos ] [ 1 ] ;
3423: LD_ADDR_VAR 0 4
3427: PUSH
3428: LD_EXP 41
3432: PUSH
3433: LD_VAR 0 3
3437: ARRAY
3438: PUSH
3439: LD_INT 1
3441: ARRAY
3442: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3443: LD_ADDR_VAR 0 5
3447: PUSH
3448: LD_EXP 41
3452: PUSH
3453: LD_VAR 0 3
3457: ARRAY
3458: PUSH
3459: LD_INT 2
3461: ARRAY
3462: ST_TO_ADDR
// for r in starting_crates do
3463: LD_ADDR_VAR 0 7
3467: PUSH
3468: LD_EXP 20
3472: PUSH
3473: FOR_IN
3474: IFFALSE 3506
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3476: LD_INT 1
3478: PPUSH
3479: LD_INT 5
3481: PPUSH
3482: LD_VAR 0 4
3486: PPUSH
3487: LD_VAR 0 5
3491: PPUSH
3492: LD_VAR 0 7
3496: PPUSH
3497: LD_INT 0
3499: PPUSH
3500: CALL_OW 60
3504: GO 3473
3506: POP
3507: POP
// if def_morale_flags then
3508: LD_EXP 9
3512: IFFALSE 3591
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3514: LD_ADDR_EXP 45
3518: PUSH
3519: LD_EXP 45
3523: PUSH
3524: LD_VAR 0 1
3528: PPUSH
3529: LD_VAR 0 4
3533: PPUSH
3534: LD_VAR 0 5
3538: PPUSH
3539: LD_INT 1
3541: PUSH
3542: LD_INT 100
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: PUSH
3549: LD_INT 2
3551: PUSH
3552: LD_INT 50
3554: PUSH
3555: EMPTY
3556: LIST
3557: LIST
3558: PUSH
3559: LD_INT 3
3561: PUSH
3562: LD_INT 20
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: PUSH
3569: LD_INT 20
3571: PUSH
3572: LD_INT 100
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: PPUSH
3585: CALL_OW 418
3589: ADD
3590: ST_TO_ADDR
// neng := number_of_people ;
3591: LD_ADDR_VAR 0 11
3595: PUSH
3596: LD_EXP 17
3600: ST_TO_ADDR
// nsol := neng div 4 ;
3601: LD_ADDR_VAR 0 14
3605: PUSH
3606: LD_VAR 0 11
3610: PUSH
3611: LD_INT 4
3613: DIV
3614: ST_TO_ADDR
// neng := neng - nsol ;
3615: LD_ADDR_VAR 0 11
3619: PUSH
3620: LD_VAR 0 11
3624: PUSH
3625: LD_VAR 0 14
3629: MINUS
3630: ST_TO_ADDR
// nsci := neng div 3 ;
3631: LD_ADDR_VAR 0 12
3635: PUSH
3636: LD_VAR 0 11
3640: PUSH
3641: LD_INT 3
3643: DIV
3644: ST_TO_ADDR
// if nsci < 1 then
3645: LD_VAR 0 12
3649: PUSH
3650: LD_INT 1
3652: LESS
3653: IFFALSE 3663
// nsci := 1 ;
3655: LD_ADDR_VAR 0 12
3659: PUSH
3660: LD_INT 1
3662: ST_TO_ADDR
// neng := neng - nsci ;
3663: LD_ADDR_VAR 0 11
3667: PUSH
3668: LD_VAR 0 11
3672: PUSH
3673: LD_VAR 0 12
3677: MINUS
3678: ST_TO_ADDR
// nmech := neng div 2 ;
3679: LD_ADDR_VAR 0 13
3683: PUSH
3684: LD_VAR 0 11
3688: PUSH
3689: LD_INT 2
3691: DIV
3692: ST_TO_ADDR
// neng := neng - nmech ;
3693: LD_ADDR_VAR 0 11
3697: PUSH
3698: LD_VAR 0 11
3702: PUSH
3703: LD_VAR 0 13
3707: MINUS
3708: ST_TO_ADDR
// if neng < 1 then
3709: LD_VAR 0 11
3713: PUSH
3714: LD_INT 1
3716: LESS
3717: IFFALSE 3727
// neng := 1 ;
3719: LD_ADDR_VAR 0 11
3723: PUSH
3724: LD_INT 1
3726: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
3727: LD_ADDR_VAR 0 4
3731: PUSH
3732: LD_EXP 41
3736: PUSH
3737: LD_VAR 0 3
3741: ARRAY
3742: PUSH
3743: LD_INT 1
3745: ARRAY
3746: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3747: LD_ADDR_VAR 0 5
3751: PUSH
3752: LD_EXP 41
3756: PUSH
3757: LD_VAR 0 3
3761: ARRAY
3762: PUSH
3763: LD_INT 2
3765: ARRAY
3766: ST_TO_ADDR
// if not is_depot then
3767: LD_EXP 15
3771: NOT
3772: IFFALSE 3796
// prepare_buldozer ( x , y , 2 , pos ) ;
3774: LD_VAR 0 4
3778: PPUSH
3779: LD_VAR 0 5
3783: PPUSH
3784: LD_INT 2
3786: PPUSH
3787: LD_VAR 0 3
3791: PPUSH
3792: CALL 2803 0 4
// commander := true ;
3796: LD_ADDR_EXP 44
3800: PUSH
3801: LD_INT 1
3803: ST_TO_ADDR
// prepare_people ( side , 1 , class_soldier , x , y , 5 , commander ) ;
3804: LD_VAR 0 1
3808: PPUSH
3809: LD_INT 1
3811: PPUSH
3812: LD_INT 1
3814: PPUSH
3815: LD_VAR 0 4
3819: PPUSH
3820: LD_VAR 0 5
3824: PPUSH
3825: LD_INT 5
3827: PPUSH
3828: LD_ADDR_EXP 44
3832: PPUSH
3833: CALL 2255 0 7
// commander := false ;
3837: LD_ADDR_EXP 44
3841: PUSH
3842: LD_INT 0
3844: ST_TO_ADDR
// prepare_people ( side , nsol - 1 , class_soldier , x , y , 5 , commander ) ;
3845: LD_VAR 0 1
3849: PPUSH
3850: LD_VAR 0 14
3854: PUSH
3855: LD_INT 1
3857: MINUS
3858: PPUSH
3859: LD_INT 1
3861: PPUSH
3862: LD_VAR 0 4
3866: PPUSH
3867: LD_VAR 0 5
3871: PPUSH
3872: LD_INT 5
3874: PPUSH
3875: LD_ADDR_EXP 44
3879: PPUSH
3880: CALL 2255 0 7
// prepare_people ( side , neng , class_engineer , x , y , 5 , commander ) ;
3884: LD_VAR 0 1
3888: PPUSH
3889: LD_VAR 0 11
3893: PPUSH
3894: LD_INT 2
3896: PPUSH
3897: LD_VAR 0 4
3901: PPUSH
3902: LD_VAR 0 5
3906: PPUSH
3907: LD_INT 5
3909: PPUSH
3910: LD_ADDR_EXP 44
3914: PPUSH
3915: CALL 2255 0 7
// prepare_people ( side , nmech , class_mechanic , x , y , 5 , commander ) ;
3919: LD_VAR 0 1
3923: PPUSH
3924: LD_VAR 0 13
3928: PPUSH
3929: LD_INT 3
3931: PPUSH
3932: LD_VAR 0 4
3936: PPUSH
3937: LD_VAR 0 5
3941: PPUSH
3942: LD_INT 5
3944: PPUSH
3945: LD_ADDR_EXP 44
3949: PPUSH
3950: CALL 2255 0 7
// prepare_people ( side , nsci , class_scientistic , x , y , 5 , commander ) ;
3954: LD_VAR 0 1
3958: PPUSH
3959: LD_VAR 0 12
3963: PPUSH
3964: LD_INT 4
3966: PPUSH
3967: LD_VAR 0 4
3971: PPUSH
3972: LD_VAR 0 5
3976: PPUSH
3977: LD_INT 5
3979: PPUSH
3980: LD_ADDR_EXP 44
3984: PPUSH
3985: CALL 2255 0 7
// if not global_defined then
3989: LD_LOC 2
3993: NOT
3994: IFFALSE 4004
// global_defined := true ;
3996: LD_ADDR_LOC 2
4000: PUSH
4001: LD_INT 1
4003: ST_TO_ADDR
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4004: LD_EXP 10
4008: PUSH
4009: LD_INT 20
4011: PPUSH
4012: LD_VAR 0 1
4016: PPUSH
4017: CALL_OW 321
4021: PUSH
4022: LD_INT 1
4024: EQUAL
4025: AND
4026: IFFALSE 4043
// SetTech ( tech_SibDet , side , state_researched ) ;
4028: LD_INT 20
4030: PPUSH
4031: LD_VAR 0 1
4035: PPUSH
4036: LD_INT 2
4038: PPUSH
4039: CALL_OW 322
// if def_siberite_bomb = 1 then
4043: LD_EXP 13
4047: PUSH
4048: LD_INT 1
4050: EQUAL
4051: IFFALSE 4085
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4053: LD_INT 25
4055: PPUSH
4056: LD_VAR 0 1
4060: PPUSH
4061: LD_INT 1
4063: PPUSH
4064: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4068: LD_INT 73
4070: PPUSH
4071: LD_VAR 0 1
4075: PPUSH
4076: LD_INT 1
4078: PPUSH
4079: CALL_OW 322
// end else
4083: GO 4115
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4085: LD_INT 25
4087: PPUSH
4088: LD_VAR 0 1
4092: PPUSH
4093: LD_INT 0
4095: PPUSH
4096: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4100: LD_INT 73
4102: PPUSH
4103: LD_VAR 0 1
4107: PPUSH
4108: LD_INT 0
4110: PPUSH
4111: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4115: LD_INT 24
4117: PPUSH
4118: LD_VAR 0 1
4122: PPUSH
4123: LD_INT 0
4125: PPUSH
4126: CALL_OW 322
// end ;
4130: LD_VAR 0 2
4134: RET
// every 0 0$1 do
4135: GO 4137
4137: DISABLE
// if ( def_siberite_bomb > 1 ) then
4138: LD_EXP 13
4142: PUSH
4143: LD_INT 1
4145: GREATER
4146: IFFALSE 4161
// begin wait ( siberite_bomb_Delay ) ;
4148: LD_EXP 23
4152: PPUSH
4153: CALL_OW 67
// EnableSibFiss ;
4157: CALL 4162 0 0
// end ;
4161: END
// function EnableSibFiss ; var i ; begin
4162: LD_INT 0
4164: PPUSH
4165: PPUSH
// for i := 1 to 8 do
4166: LD_ADDR_VAR 0 2
4170: PUSH
4171: DOUBLE
4172: LD_INT 1
4174: DEC
4175: ST_TO_ADDR
4176: LD_INT 8
4178: PUSH
4179: FOR_TO
4180: IFFALSE 4226
// if Side_Positions [ i ] then
4182: LD_EXP 34
4186: PUSH
4187: LD_VAR 0 2
4191: ARRAY
4192: IFFALSE 4224
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4194: LD_INT 25
4196: PPUSH
4197: LD_VAR 0 2
4201: PPUSH
4202: LD_INT 1
4204: PPUSH
4205: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4209: LD_INT 73
4211: PPUSH
4212: LD_VAR 0 2
4216: PPUSH
4217: LD_INT 1
4219: PPUSH
4220: CALL_OW 322
// end ;
4224: GO 4179
4226: POP
4227: POP
// end ;
4228: LD_VAR 0 1
4232: RET
// function prepare_sides ; var i ; begin
4233: LD_INT 0
4235: PPUSH
4236: PPUSH
// global_units := [ ] ;
4237: LD_ADDR_LOC 1
4241: PUSH
4242: EMPTY
4243: ST_TO_ADDR
// global_defined := false ;
4244: LD_ADDR_LOC 2
4248: PUSH
4249: LD_INT 0
4251: ST_TO_ADDR
// for i := 1 to 8 do
4252: LD_ADDR_VAR 0 2
4256: PUSH
4257: DOUBLE
4258: LD_INT 1
4260: DEC
4261: ST_TO_ADDR
4262: LD_INT 8
4264: PUSH
4265: FOR_TO
4266: IFFALSE 4291
// if Side_Positions [ i ] then
4268: LD_EXP 34
4272: PUSH
4273: LD_VAR 0 2
4277: ARRAY
4278: IFFALSE 4289
// prepare_side ( i ) ;
4280: LD_VAR 0 2
4284: PPUSH
4285: CALL 3035 0 1
4289: GO 4265
4291: POP
4292: POP
// end ;
4293: LD_VAR 0 1
4297: RET
// starting begin disable ( 98 ) ;
4298: LD_INT 98
4300: DISABLE_MARKED
// disable ( 99 ) ;
4301: LD_INT 99
4303: DISABLE_MARKED
// disable ( 400 ) ;
4304: LD_INT 400
4306: DISABLE_MARKED
// disable ( 401 ) ;
4307: LD_INT 401
4309: DISABLE_MARKED
// mp_selectmsg := true ;
4310: LD_ADDR_OWVAR 13
4314: PUSH
4315: LD_INT 1
4317: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4318: CALL 681 0 0
// init_map ;
4322: CALL 436 0 0
// init_respawning ;
4326: CALL 13077 0 0
// set_shared_visions_and_alliances ;
4330: CALL 1892 0 0
// ResetFog ;
4334: CALL_OW 335
// ClearAllFogForSide ( Player_Side ) ;
4338: LD_EXP 30
4342: PPUSH
4343: CALL_OW 520
// AnimateTrees ( true ) ;
4347: LD_INT 1
4349: PPUSH
4350: CALL_OW 573
// prepare_sides ;
4354: CALL 4233 0 0
// Init_Win_Condition ;
4358: CALL 7058 0 0
// init_shipments ;
4362: CALL 5502 0 0
// InitApeman ;
4366: CALL 4689 0 0
// your_side := Player_Side ;
4370: LD_ADDR_OWVAR 2
4374: PUSH
4375: LD_EXP 30
4379: ST_TO_ADDR
// music_nat := Side_Nations [ your_side ] ;
4380: LD_ADDR_OWVAR 71
4384: PUSH
4385: LD_EXP 35
4389: PUSH
4390: LD_OWVAR 2
4394: ARRAY
4395: ST_TO_ADDR
// if IAmSpec then
4396: CALL_OW 531
4400: IFFALSE 4424
// begin fogOff ( true ) ;
4402: LD_INT 1
4404: PPUSH
4405: CALL_OW 344
// CenterNowOnXY ( 104 , 69 ) ;
4409: LD_INT 104
4411: PPUSH
4412: LD_INT 69
4414: PPUSH
4415: CALL_OW 86
// enable ( 400 ) ;
4419: LD_INT 400
4421: ENABLE_MARKED
// end else
4422: GO 4470
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4424: LD_EXP 41
4428: PUSH
4429: LD_EXP 34
4433: PUSH
4434: LD_OWVAR 2
4438: ARRAY
4439: ARRAY
4440: PUSH
4441: LD_INT 1
4443: ARRAY
4444: PPUSH
4445: LD_EXP 41
4449: PUSH
4450: LD_EXP 34
4454: PUSH
4455: LD_OWVAR 2
4459: ARRAY
4460: ARRAY
4461: PUSH
4462: LD_INT 2
4464: ARRAY
4465: PPUSH
4466: CALL_OW 86
// end ; BuildUpAreas := [ nw , ne , sw , se ] ;
4470: LD_ADDR_EXP 56
4474: PUSH
4475: LD_INT 12
4477: PUSH
4478: LD_INT 13
4480: PUSH
4481: LD_INT 14
4483: PUSH
4484: LD_INT 15
4486: PUSH
4487: EMPTY
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: ST_TO_ADDR
// BeginBuildUp ;
4493: CALL 13571 0 0
// end ; end_of_file
4497: END
// every 20 20$00 trigger apemanNumber do
4498: LD_EXP 47
4502: IFFALSE 4535
4504: GO 4506
4506: DISABLE
// begin enable ;
4507: ENABLE
// if apeLevel >= 8 then
4508: LD_EXP 52
4512: PUSH
4513: LD_INT 8
4515: GREATEREQUAL
4516: IFFALSE 4521
// disable else
4518: DISABLE
4519: GO 4535
// apeLevel := apeLevel + 1 ;
4521: LD_ADDR_EXP 52
4525: PUSH
4526: LD_EXP 52
4530: PUSH
4531: LD_INT 1
4533: PLUS
4534: ST_TO_ADDR
// end ;
4535: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
4536: LD_EXP 47
4540: PUSH
4541: LD_EXP 48
4545: LESS
4546: IFFALSE 4686
4548: GO 4550
4550: DISABLE
4551: LD_INT 0
4553: PPUSH
4554: PPUSH
4555: PPUSH
4556: PPUSH
// begin enable ;
4557: ENABLE
// for i := 1 to apemanPos do
4558: LD_ADDR_VAR 0 1
4562: PUSH
4563: DOUBLE
4564: LD_INT 1
4566: DEC
4567: ST_TO_ADDR
4568: LD_EXP 50
4572: PUSH
4573: FOR_TO
4574: IFFALSE 4684
// begin if apemanPlayerCount [ i ] then
4576: LD_EXP 51
4580: PUSH
4581: LD_VAR 0 1
4585: ARRAY
4586: IFFALSE 4682
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
4588: LD_EXP 51
4592: PUSH
4593: LD_VAR 0 1
4597: ARRAY
4598: PUSH
4599: LD_EXP 50
4603: PUSH
4604: LD_VAR 0 1
4608: ARRAY
4609: GREATER
4610: IFFALSE 4682
// begin ape := PrepareApeman ;
4612: LD_ADDR_VAR 0 2
4616: PUSH
4617: CALL 5189 0 0
4621: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
4622: LD_VAR 0 2
4626: PPUSH
4627: LD_EXP 53
4631: PUSH
4632: LD_VAR 0 1
4636: ARRAY
4637: PPUSH
4638: LD_INT 0
4640: PPUSH
4641: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
4645: LD_ADDR_EXP 50
4649: PUSH
4650: LD_EXP 50
4654: PPUSH
4655: LD_VAR 0 1
4659: PPUSH
4660: LD_EXP 50
4664: PUSH
4665: LD_VAR 0 1
4669: ARRAY
4670: PUSH
4671: LD_VAR 0 2
4675: UNION
4676: PPUSH
4677: CALL_OW 1
4681: ST_TO_ADDR
// end ; end ; end ;
4682: GO 4573
4684: POP
4685: POP
// end ;
4686: PPOPN 4
4688: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
4689: LD_INT 0
4691: PPUSH
4692: PPUSH
4693: PPUSH
4694: PPUSH
4695: PPUSH
4696: PPUSH
4697: PPUSH
// playersAmount := 0 ;
4698: LD_ADDR_VAR 0 3
4702: PUSH
4703: LD_INT 0
4705: ST_TO_ADDR
// _apeAreas := [ nw , ne , sw , se , ] ;
4706: LD_ADDR_VAR 0 7
4710: PUSH
4711: LD_INT 12
4713: PUSH
4714: LD_INT 13
4716: PUSH
4717: LD_INT 14
4719: PUSH
4720: LD_INT 15
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4729: LD_ADDR_EXP 53
4733: PUSH
4734: LD_INT 0
4736: PUSH
4737: LD_INT 0
4739: PUSH
4740: LD_INT 0
4742: PUSH
4743: LD_INT 0
4745: PUSH
4746: LD_INT 0
4748: PUSH
4749: LD_INT 0
4751: PUSH
4752: LD_INT 0
4754: PUSH
4755: LD_INT 0
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: ST_TO_ADDR
// for j = 1 to Side_Positions do
4768: LD_ADDR_VAR 0 4
4772: PUSH
4773: DOUBLE
4774: LD_INT 1
4776: DEC
4777: ST_TO_ADDR
4778: LD_EXP 34
4782: PUSH
4783: FOR_TO
4784: IFFALSE 4851
// if Side_Positions [ j ] then
4786: LD_EXP 34
4790: PUSH
4791: LD_VAR 0 4
4795: ARRAY
4796: IFFALSE 4849
// begin playersAmount := playersAmount + 1 ;
4798: LD_ADDR_VAR 0 3
4802: PUSH
4803: LD_VAR 0 3
4807: PUSH
4808: LD_INT 1
4810: PLUS
4811: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
4812: LD_ADDR_EXP 53
4816: PUSH
4817: LD_EXP 53
4821: PPUSH
4822: LD_VAR 0 4
4826: PPUSH
4827: LD_VAR 0 7
4831: PUSH
4832: LD_EXP 34
4836: PUSH
4837: LD_VAR 0 4
4841: ARRAY
4842: ARRAY
4843: PPUSH
4844: CALL_OW 1
4848: ST_TO_ADDR
// end ;
4849: GO 4783
4851: POP
4852: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
4853: LD_ADDR_EXP 49
4857: PUSH
4858: LD_INT 3
4860: PUSH
4861: LD_EXP 19
4865: MUL
4866: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
4867: LD_ADDR_EXP 47
4871: PUSH
4872: LD_VAR 0 3
4876: PUSH
4877: LD_EXP 49
4881: MUL
4882: ST_TO_ADDR
// apemanLimit := apemanNumber ;
4883: LD_ADDR_EXP 48
4887: PUSH
4888: LD_EXP 47
4892: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4893: LD_ADDR_EXP 50
4897: PUSH
4898: LD_INT 0
4900: PUSH
4901: LD_INT 0
4903: PUSH
4904: LD_INT 0
4906: PUSH
4907: LD_INT 0
4909: PUSH
4910: LD_INT 0
4912: PUSH
4913: LD_INT 0
4915: PUSH
4916: LD_INT 0
4918: PUSH
4919: LD_INT 0
4921: PUSH
4922: EMPTY
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4932: LD_ADDR_EXP 51
4936: PUSH
4937: LD_INT 0
4939: PUSH
4940: LD_INT 0
4942: PUSH
4943: LD_INT 0
4945: PUSH
4946: LD_INT 0
4948: PUSH
4949: LD_INT 0
4951: PUSH
4952: LD_INT 0
4954: PUSH
4955: LD_INT 0
4957: PUSH
4958: LD_INT 0
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: ST_TO_ADDR
// apeLevel := 1 ;
4971: LD_ADDR_EXP 52
4975: PUSH
4976: LD_INT 1
4978: ST_TO_ADDR
// if not apemanNumber then
4979: LD_EXP 47
4983: NOT
4984: IFFALSE 4988
// exit ;
4986: GO 5184
// for i := 1 to apemanPerPlayer do
4988: LD_ADDR_VAR 0 2
4992: PUSH
4993: DOUBLE
4994: LD_INT 1
4996: DEC
4997: ST_TO_ADDR
4998: LD_EXP 49
5002: PUSH
5003: FOR_TO
5004: IFFALSE 5182
// begin for j := 1 to Side_Positions do
5006: LD_ADDR_VAR 0 4
5010: PUSH
5011: DOUBLE
5012: LD_INT 1
5014: DEC
5015: ST_TO_ADDR
5016: LD_EXP 34
5020: PUSH
5021: FOR_TO
5022: IFFALSE 5178
// if Side_Positions [ j ] then
5024: LD_EXP 34
5028: PUSH
5029: LD_VAR 0 4
5033: ARRAY
5034: IFFALSE 5176
// begin pos := Side_Positions [ j ] ;
5036: LD_ADDR_VAR 0 6
5040: PUSH
5041: LD_EXP 34
5045: PUSH
5046: LD_VAR 0 4
5050: ARRAY
5051: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5052: LD_ADDR_EXP 51
5056: PUSH
5057: LD_EXP 51
5061: PPUSH
5062: LD_VAR 0 4
5066: PPUSH
5067: LD_EXP 51
5071: PUSH
5072: LD_VAR 0 4
5076: ARRAY
5077: PUSH
5078: LD_INT 1
5080: PLUS
5081: PPUSH
5082: CALL_OW 1
5086: ST_TO_ADDR
// ape := PrepareApeman ;
5087: LD_ADDR_VAR 0 5
5091: PUSH
5092: CALL 5189 0 0
5096: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5097: LD_ADDR_EXP 50
5101: PUSH
5102: LD_EXP 50
5106: PPUSH
5107: LD_VAR 0 4
5111: PPUSH
5112: LD_EXP 50
5116: PUSH
5117: LD_VAR 0 4
5121: ARRAY
5122: PPUSH
5123: LD_EXP 50
5127: PUSH
5128: LD_VAR 0 4
5132: ARRAY
5133: PUSH
5134: LD_INT 1
5136: PLUS
5137: PPUSH
5138: LD_VAR 0 5
5142: PPUSH
5143: CALL_OW 1
5147: PPUSH
5148: CALL_OW 1
5152: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5153: LD_VAR 0 5
5157: PPUSH
5158: LD_EXP 53
5162: PUSH
5163: LD_VAR 0 4
5167: ARRAY
5168: PPUSH
5169: LD_INT 0
5171: PPUSH
5172: CALL_OW 49
// end ;
5176: GO 5021
5178: POP
5179: POP
// end ;
5180: GO 5003
5182: POP
5183: POP
// end ;
5184: LD_VAR 0 1
5188: RET
// export function PrepareApeman ; var bonus ; begin
5189: LD_INT 0
5191: PPUSH
5192: PPUSH
// uc_side := 0 ;
5193: LD_ADDR_OWVAR 20
5197: PUSH
5198: LD_INT 0
5200: ST_TO_ADDR
// uc_nation := 0 ;
5201: LD_ADDR_OWVAR 21
5205: PUSH
5206: LD_INT 0
5208: ST_TO_ADDR
// InitHc ;
5209: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
5213: LD_ADDR_VAR 0 2
5217: PUSH
5218: LD_INT 1
5220: NEG
5221: PUSH
5222: LD_INT 0
5224: PUSH
5225: LD_INT 1
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: LIST
5232: PUSH
5233: LD_INT 25
5235: PUSH
5236: LD_INT 12
5238: PUSH
5239: EMPTY
5240: LIST
5241: LIST
5242: PPUSH
5243: CALL_OW 69
5247: PUSH
5248: LD_INT 3
5250: MOD
5251: PUSH
5252: LD_INT 1
5254: PLUS
5255: ARRAY
5256: ST_TO_ADDR
// hc_class := class_apeman ;
5257: LD_ADDR_OWVAR 28
5261: PUSH
5262: LD_INT 12
5264: ST_TO_ADDR
// hc_gallery :=  ;
5265: LD_ADDR_OWVAR 33
5269: PUSH
5270: LD_STRING 
5272: ST_TO_ADDR
// hc_name :=  ;
5273: LD_ADDR_OWVAR 26
5277: PUSH
5278: LD_STRING 
5280: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
5281: LD_ADDR_OWVAR 31
5285: PUSH
5286: LD_EXP 52
5290: PUSH
5291: LD_VAR 0 2
5295: PLUS
5296: PUSH
5297: LD_EXP 52
5301: PUSH
5302: LD_VAR 0 2
5306: PLUS
5307: PUSH
5308: LD_EXP 52
5312: PUSH
5313: LD_VAR 0 2
5317: PLUS
5318: PUSH
5319: LD_EXP 52
5323: PUSH
5324: LD_VAR 0 2
5328: PLUS
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
5336: LD_ADDR_OWVAR 35
5340: PUSH
5341: LD_INT 10
5343: PUSH
5344: LD_VAR 0 2
5348: MUL
5349: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
5350: LD_ADDR_OWVAR 29
5354: PUSH
5355: LD_INT 12
5357: PUSH
5358: LD_INT 12
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: ST_TO_ADDR
// result := CreateHuman ;
5365: LD_ADDR_VAR 0 1
5369: PUSH
5370: CALL_OW 44
5374: ST_TO_ADDR
// end ;
5375: LD_VAR 0 1
5379: RET
// export function ApeKilled ( ape ) ; var s , i ; begin
5380: LD_INT 0
5382: PPUSH
5383: PPUSH
5384: PPUSH
// if not ape then
5385: LD_VAR 0 1
5389: NOT
5390: IFFALSE 5394
// exit ;
5392: GO 5497
// for i = 1 to apemanPos do
5394: LD_ADDR_VAR 0 4
5398: PUSH
5399: DOUBLE
5400: LD_INT 1
5402: DEC
5403: ST_TO_ADDR
5404: LD_EXP 50
5408: PUSH
5409: FOR_TO
5410: IFFALSE 5444
// if ape in apemanPos [ i ] then
5412: LD_VAR 0 1
5416: PUSH
5417: LD_EXP 50
5421: PUSH
5422: LD_VAR 0 4
5426: ARRAY
5427: IN
5428: IFFALSE 5442
// begin s := i ;
5430: LD_ADDR_VAR 0 3
5434: PUSH
5435: LD_VAR 0 4
5439: ST_TO_ADDR
// break ;
5440: GO 5444
// end ;
5442: GO 5409
5444: POP
5445: POP
// apemanPos := Replace ( apemanPos , s , apemanPos [ s ] diff ape ) ;
5446: LD_ADDR_EXP 50
5450: PUSH
5451: LD_EXP 50
5455: PPUSH
5456: LD_VAR 0 3
5460: PPUSH
5461: LD_EXP 50
5465: PUSH
5466: LD_VAR 0 3
5470: ARRAY
5471: PUSH
5472: LD_VAR 0 1
5476: DIFF
5477: PPUSH
5478: CALL_OW 1
5482: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
5483: LD_ADDR_EXP 47
5487: PUSH
5488: LD_EXP 47
5492: PUSH
5493: LD_INT 1
5495: MINUS
5496: ST_TO_ADDR
// end ; end_of_file
5497: LD_VAR 0 2
5501: RET
// var shipment , tictac ; export function init_shipments ; begin
5502: LD_INT 0
5504: PPUSH
// shipment := Rand ( 0 , 3 ) ;
5505: LD_ADDR_LOC 4
5509: PUSH
5510: LD_INT 0
5512: PPUSH
5513: LD_INT 3
5515: PPUSH
5516: CALL_OW 12
5520: ST_TO_ADDR
// tictac := 0 ;
5521: LD_ADDR_LOC 5
5525: PUSH
5526: LD_INT 0
5528: ST_TO_ADDR
// end ;
5529: LD_VAR 0 1
5533: RET
// every 0 0$5 + 0 0$1.1 do var d ;
5534: GO 5536
5536: DISABLE
5537: LD_INT 0
5539: PPUSH
// begin case tick of 1 .. 1 1$0 :
5540: LD_OWVAR 1
5544: PUSH
5545: LD_INT 1
5547: DOUBLE
5548: GREATEREQUAL
5549: IFFALSE 5557
5551: LD_INT 2100
5553: DOUBLE
5554: LESSEQUAL
5555: IFTRUE 5559
5557: GO 5570
5559: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5560: LD_ADDR_VAR 0 1
5564: PUSH
5565: LD_INT 150
5567: ST_TO_ADDR
5568: GO 5753
5570: LD_INT 2100
5572: PUSH
5573: LD_INT 1
5575: PLUS
5576: DOUBLE
5577: GREATEREQUAL
5578: IFFALSE 5586
5580: LD_INT 10500
5582: DOUBLE
5583: LESSEQUAL
5584: IFTRUE 5588
5586: GO 5599
5588: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5589: LD_ADDR_VAR 0 1
5593: PUSH
5594: LD_INT 100
5596: ST_TO_ADDR
5597: GO 5753
5599: LD_INT 10500
5601: PUSH
5602: LD_INT 1
5604: PLUS
5605: DOUBLE
5606: GREATEREQUAL
5607: IFFALSE 5615
5609: LD_INT 21000
5611: DOUBLE
5612: LESSEQUAL
5613: IFTRUE 5617
5615: GO 5628
5617: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5618: LD_ADDR_VAR 0 1
5622: PUSH
5623: LD_INT 90
5625: ST_TO_ADDR
5626: GO 5753
5628: LD_INT 21000
5630: PUSH
5631: LD_INT 1
5633: PLUS
5634: DOUBLE
5635: GREATEREQUAL
5636: IFFALSE 5644
5638: LD_INT 42000
5640: DOUBLE
5641: LESSEQUAL
5642: IFTRUE 5646
5644: GO 5657
5646: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5647: LD_ADDR_VAR 0 1
5651: PUSH
5652: LD_INT 70
5654: ST_TO_ADDR
5655: GO 5753
5657: LD_INT 42000
5659: PUSH
5660: LD_INT 1
5662: PLUS
5663: DOUBLE
5664: GREATEREQUAL
5665: IFFALSE 5673
5667: LD_INT 63000
5669: DOUBLE
5670: LESSEQUAL
5671: IFTRUE 5675
5673: GO 5686
5675: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5676: LD_ADDR_VAR 0 1
5680: PUSH
5681: LD_INT 60
5683: ST_TO_ADDR
5684: GO 5753
5686: LD_INT 63000
5688: PUSH
5689: LD_INT 1
5691: PLUS
5692: DOUBLE
5693: GREATEREQUAL
5694: IFFALSE 5702
5696: LD_INT 105000
5698: DOUBLE
5699: LESSEQUAL
5700: IFTRUE 5704
5702: GO 5715
5704: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5705: LD_ADDR_VAR 0 1
5709: PUSH
5710: LD_INT 35
5712: ST_TO_ADDR
5713: GO 5753
5715: LD_INT 105000
5717: PUSH
5718: LD_INT 1
5720: PLUS
5721: DOUBLE
5722: GREATEREQUAL
5723: IFFALSE 5731
5725: LD_INT 630000
5727: DOUBLE
5728: LESSEQUAL
5729: IFTRUE 5733
5731: GO 5744
5733: POP
// d := 20 ; else
5734: LD_ADDR_VAR 0 1
5738: PUSH
5739: LD_INT 20
5741: ST_TO_ADDR
5742: GO 5753
5744: POP
// d := 0 ; end ;
5745: LD_ADDR_VAR 0 1
5749: PUSH
5750: LD_INT 0
5752: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5753: LD_INT 1
5755: PPUSH
5756: LD_INT 10000
5758: PPUSH
5759: CALL_OW 12
5763: PUSH
5764: LD_VAR 0 1
5768: PUSH
5769: LD_EXP 22
5773: MUL
5774: LESSEQUAL
5775: IFFALSE 5851
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5777: LD_INT 1
5779: PPUSH
5780: LD_INT 140
5782: PPUSH
5783: CALL_OW 12
5787: PPUSH
5788: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
5792: LD_ADDR_LOC 4
5796: PUSH
5797: LD_LOC 4
5801: PUSH
5802: LD_INT 1
5804: PLUS
5805: PUSH
5806: LD_INT 4
5808: MOD
5809: ST_TO_ADDR
// if GetResourceArea ( nw + shipment , mat_cans ) < 50 then
5810: LD_INT 12
5812: PUSH
5813: LD_LOC 4
5817: PLUS
5818: PPUSH
5819: LD_INT 1
5821: PPUSH
5822: CALL_OW 287
5826: PUSH
5827: LD_INT 50
5829: LESS
5830: IFFALSE 5851
// CreateCratesArea ( 5 , nw + shipment , true ) ;
5832: LD_INT 5
5834: PPUSH
5835: LD_INT 12
5837: PUSH
5838: LD_LOC 4
5842: PLUS
5843: PPUSH
5844: LD_INT 1
5846: PPUSH
5847: CALL_OW 55
// end ; enable ;
5851: ENABLE
// end ;
5852: PPOPN 1
5854: END
// every 0 0$10 trigger TICK > ( ( 3 3$0 * tictac ) + tictac * ( 1 1$30 - shipments_density * ( 0 0$2 ) ) ) do var i , amount ;
5855: LD_OWVAR 1
5859: PUSH
5860: LD_INT 6300
5862: PUSH
5863: LD_LOC 5
5867: MUL
5868: PUSH
5869: LD_LOC 5
5873: PUSH
5874: LD_INT 3150
5876: PUSH
5877: LD_EXP 22
5881: PUSH
5882: LD_INT 70
5884: MUL
5885: MINUS
5886: MUL
5887: PLUS
5888: GREATER
5889: IFFALSE 5992
5891: GO 5893
5893: DISABLE
5894: LD_INT 0
5896: PPUSH
5897: PPUSH
// begin tictac := tictac + 1 ;
5898: LD_ADDR_LOC 5
5902: PUSH
5903: LD_LOC 5
5907: PUSH
5908: LD_INT 1
5910: PLUS
5911: ST_TO_ADDR
// amount := Rand ( 3 , 5 ) ;
5912: LD_ADDR_VAR 0 2
5916: PUSH
5917: LD_INT 3
5919: PPUSH
5920: LD_INT 5
5922: PPUSH
5923: CALL_OW 12
5927: ST_TO_ADDR
// for i = 0 to 3 do
5928: LD_ADDR_VAR 0 1
5932: PUSH
5933: DOUBLE
5934: LD_INT 0
5936: DEC
5937: ST_TO_ADDR
5938: LD_INT 3
5940: PUSH
5941: FOR_TO
5942: IFFALSE 5989
// if GetResourceArea ( Base1 + i , mat_cans ) < 20 then
5944: LD_INT 1
5946: PUSH
5947: LD_VAR 0 1
5951: PLUS
5952: PPUSH
5953: LD_INT 1
5955: PPUSH
5956: CALL_OW 287
5960: PUSH
5961: LD_INT 20
5963: LESS
5964: IFFALSE 5987
// CreateCratesArea ( amount , Base1 + i , true ) ;
5966: LD_VAR 0 2
5970: PPUSH
5971: LD_INT 1
5973: PUSH
5974: LD_VAR 0 1
5978: PLUS
5979: PPUSH
5980: LD_INT 1
5982: PPUSH
5983: CALL_OW 55
5987: GO 5941
5989: POP
5990: POP
// enable ;
5991: ENABLE
// end ; end_of_file
5992: PPOPN 2
5994: END
// var strength ; function Update_Flags ; var un ; begin
5995: LD_INT 0
5997: PPUSH
5998: PPUSH
// for un in battle_flags_id do
5999: LD_ADDR_VAR 0 2
6003: PUSH
6004: LD_EXP 45
6008: PUSH
6009: FOR_IN
6010: IFFALSE 6085
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6012: LD_VAR 0 2
6016: PPUSH
6017: LD_INT 1
6019: PUSH
6020: LD_LOC 6
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: PUSH
6029: LD_INT 2
6031: PUSH
6032: LD_LOC 6
6036: PUSH
6037: LD_INT 2
6039: DIV
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: PUSH
6045: LD_INT 3
6047: PUSH
6048: LD_LOC 6
6052: PUSH
6053: LD_INT 5
6055: DIV
6056: PUSH
6057: EMPTY
6058: LIST
6059: LIST
6060: PUSH
6061: LD_INT 20
6063: PUSH
6064: LD_LOC 6
6068: PUSH
6069: EMPTY
6070: LIST
6071: LIST
6072: PUSH
6073: EMPTY
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: PPUSH
6079: CALL_OW 423
6083: GO 6009
6085: POP
6086: POP
// end ;
6087: LD_VAR 0 1
6091: RET
// every 0 0$0.1 do var un ;
6092: GO 6094
6094: DISABLE
6095: LD_INT 0
6097: PPUSH
// begin if not def_morale_flags then
6098: LD_EXP 9
6102: NOT
6103: IFFALSE 6107
// exit ;
6105: GO 6184
// if not morale_decreasing_time then
6107: LD_EXP 46
6111: NOT
6112: IFFALSE 6116
// exit ;
6114: GO 6184
// strength = 100 ;
6116: LD_ADDR_LOC 6
6120: PUSH
6121: LD_INT 100
6123: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
6124: LD_EXP 46
6128: PPUSH
6129: CALL_OW 67
// strength := strength - 1 ;
6133: LD_ADDR_LOC 6
6137: PUSH
6138: LD_LOC 6
6142: PUSH
6143: LD_INT 1
6145: MINUS
6146: ST_TO_ADDR
// Update_Flags ;
6147: CALL 5995 0 0
// until not strength ;
6151: LD_LOC 6
6155: NOT
6156: IFFALSE 6124
// for un in battle_flags_id do
6158: LD_ADDR_VAR 0 1
6162: PUSH
6163: LD_EXP 45
6167: PUSH
6168: FOR_IN
6169: IFFALSE 6182
// KillBattleFlag ( un ) ;
6171: LD_VAR 0 1
6175: PPUSH
6176: CALL_OW 419
6180: GO 6168
6182: POP
6183: POP
// end ; end_of_file
6184: PPOPN 1
6186: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
6187: LD_INT 0
6189: PPUSH
6190: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
6191: LD_ADDR_VAR 0 2
6195: PUSH
6196: LD_STRING #Multi1x1-Time
6198: PUSH
6199: LD_OWVAR 1
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: ST_TO_ADDR
// if WaitServerStrings then
6208: LD_EXP 55
6212: IFFALSE 6230
// AllStrings = AllStrings ^ WaitServerStrings ;
6214: LD_ADDR_VAR 0 2
6218: PUSH
6219: LD_VAR 0 2
6223: PUSH
6224: LD_EXP 55
6228: ADD
6229: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
6230: LD_INT 0
6232: PUSH
6233: LD_EXP 23
6237: PUSH
6238: LD_OWVAR 1
6242: MINUS
6243: LESSEQUAL
6244: IFFALSE 6275
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
6246: LD_ADDR_VAR 0 2
6250: PUSH
6251: LD_VAR 0 2
6255: PUSH
6256: LD_STRING #allowedsibbomb
6258: PUSH
6259: LD_EXP 23
6263: PUSH
6264: LD_OWVAR 1
6268: MINUS
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: ADD
6274: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
6275: LD_INT 0
6277: PUSH
6278: LD_EXP 58
6282: PUSH
6283: LD_OWVAR 1
6287: MINUS
6288: LESSEQUAL
6289: IFFALSE 6320
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
6291: LD_ADDR_VAR 0 2
6295: PUSH
6296: LD_VAR 0 2
6300: PUSH
6301: LD_STRING #builduptime
6303: PUSH
6304: LD_EXP 58
6308: PUSH
6309: LD_OWVAR 1
6313: MINUS
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: ADD
6319: ST_TO_ADDR
// if ( ExtraStrings ) then
6320: LD_EXP 54
6324: IFFALSE 6346
// AllStrings := AllStrings ^  ^ ExtraStrings ;
6326: LD_ADDR_VAR 0 2
6330: PUSH
6331: LD_VAR 0 2
6335: PUSH
6336: LD_STRING 
6338: ADD
6339: PUSH
6340: LD_EXP 54
6344: ADD
6345: ST_TO_ADDR
// Display_Strings := AllStrings ;
6346: LD_ADDR_OWVAR 47
6350: PUSH
6351: LD_VAR 0 2
6355: ST_TO_ADDR
// end ;
6356: LD_VAR 0 1
6360: RET
// every 0 0$1 do
6361: GO 6363
6363: DISABLE
// begin ShowTimer ;
6364: CALL 6187 0 0
// enable ;
6368: ENABLE
// end ; end_of_file
6369: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6370: LD_VAR 0 1
6374: PPUSH
6375: CALL_OW 266
6379: PUSH
6380: LD_INT 0
6382: PUSH
6383: LD_INT 1
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: IN
6390: IFFALSE 6415
// SetBName ( b , @ & GetSide ( b ) ) ;
6392: LD_VAR 0 1
6396: PPUSH
6397: LD_STRING @
6399: PUSH
6400: LD_VAR 0 1
6404: PPUSH
6405: CALL_OW 255
6409: STR
6410: PPUSH
6411: CALL_OW 500
// end ;
6415: PPOPN 2
6417: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6418: LD_VAR 0 1
6422: PPUSH
6423: CALL_OW 266
6427: PUSH
6428: LD_INT 0
6430: PUSH
6431: LD_INT 1
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: IN
6438: IFFALSE 6463
// SetBName ( b , @ & GetSide ( b ) ) ;
6440: LD_VAR 0 1
6444: PPUSH
6445: LD_STRING @
6447: PUSH
6448: LD_VAR 0 1
6452: PPUSH
6453: CALL_OW 255
6457: STR
6458: PPUSH
6459: CALL_OW 500
// end ;
6463: PPOPN 3
6465: END
// on VehicleConstructed ( veh , fac ) do var side ;
6466: LD_INT 0
6468: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6469: LD_VAR 0 1
6473: PPUSH
6474: CALL_OW 263
6478: PUSH
6479: LD_INT 5
6481: EQUAL
6482: IFFALSE 6624
// begin side := GetSide ( veh ) ;
6484: LD_ADDR_VAR 0 3
6488: PUSH
6489: LD_VAR 0 1
6493: PPUSH
6494: CALL_OW 255
6498: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6499: LD_ADDR_EXP 50
6503: PUSH
6504: LD_EXP 50
6508: PPUSH
6509: LD_VAR 0 3
6513: PPUSH
6514: LD_EXP 50
6518: PUSH
6519: LD_VAR 0 3
6523: ARRAY
6524: PPUSH
6525: LD_INT 52
6527: PUSH
6528: EMPTY
6529: LIST
6530: PPUSH
6531: CALL_OW 72
6535: PUSH
6536: LD_INT 22
6538: PUSH
6539: LD_VAR 0 3
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PUSH
6548: LD_INT 2
6550: PUSH
6551: LD_INT 33
6553: PUSH
6554: LD_INT 5
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: LD_INT 25
6563: PUSH
6564: LD_INT 12
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PUSH
6571: LD_INT 25
6573: PUSH
6574: LD_INT 15
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: PUSH
6581: LD_INT 25
6583: PUSH
6584: LD_INT 16
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: PUSH
6591: LD_INT 25
6593: PUSH
6594: LD_INT 17
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: PPUSH
6613: CALL_OW 69
6617: UNION
6618: PPUSH
6619: CALL_OW 1
6623: ST_TO_ADDR
// end ; end ;
6624: PPOPN 3
6626: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6627: LD_INT 0
6629: PPUSH
6630: PPUSH
6631: PPUSH
6632: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6633: LD_VAR 0 1
6637: PPUSH
6638: CALL_OW 257
6642: PUSH
6643: LD_INT 12
6645: PUSH
6646: LD_INT 15
6648: PUSH
6649: LD_INT 17
6651: PUSH
6652: LD_INT 16
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: IN
6661: PUSH
6662: LD_VAR 0 1
6666: PPUSH
6667: CALL_OW 263
6671: PUSH
6672: LD_INT 5
6674: EQUAL
6675: OR
6676: IFFALSE 6687
// ApeKilled ( j ) ;
6678: LD_VAR 0 1
6682: PPUSH
6683: CALL 5380 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6687: LD_VAR 0 1
6691: PPUSH
6692: CALL_OW 266
6696: PUSH
6697: LD_INT 0
6699: PUSH
6700: LD_INT 1
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: IN
6707: IFFALSE 6789
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6709: LD_ADDR_VAR 0 4
6713: PUSH
6714: LD_EXP 34
6718: PUSH
6719: LD_VAR 0 1
6723: PPUSH
6724: CALL_OW 255
6728: ARRAY
6729: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6730: LD_ADDR_VAR 0 2
6734: PUSH
6735: LD_EXP 41
6739: PUSH
6740: LD_VAR 0 4
6744: ARRAY
6745: PUSH
6746: LD_INT 1
6748: ARRAY
6749: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6750: LD_ADDR_VAR 0 3
6754: PUSH
6755: LD_EXP 41
6759: PUSH
6760: LD_VAR 0 4
6764: ARRAY
6765: PUSH
6766: LD_INT 2
6768: ARRAY
6769: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
6770: LD_VAR 0 2
6774: PPUSH
6775: LD_VAR 0 3
6779: PPUSH
6780: CALL_OW 420
6784: PPUSH
6785: CALL_OW 419
// end ; end ;
6789: PPOPN 5
6791: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
6792: LD_VAR 0 1
6796: PPUSH
6797: LD_VAR 0 2
6801: PPUSH
6802: LD_VAR 0 3
6806: PPUSH
6807: LD_OWVAR 2
6811: PPUSH
6812: CALL 6819 0 4
6816: PPOPN 3
6818: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
6819: LD_INT 0
6821: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
6822: LD_VAR 0 1
6826: PPUSH
6827: CALL_OW 255
6831: PUSH
6832: LD_VAR 0 4
6836: EQUAL
6837: IFFALSE 6856
// begin SetAchievement ( ACH_RAD ) ;
6839: LD_STRING ACH_RAD
6841: PPUSH
6842: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
6846: LD_STRING ACH_NL
6848: PPUSH
6849: LD_INT 1
6851: PPUSH
6852: CALL_OW 564
// end end ;
6856: LD_VAR 0 5
6860: RET
// export function SA_Win ( side ) ; begin
6861: LD_INT 0
6863: PPUSH
// case side of 1 :
6864: LD_VAR 0 1
6868: PUSH
6869: LD_INT 1
6871: DOUBLE
6872: EQUAL
6873: IFTRUE 6877
6875: GO 6890
6877: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
6878: LD_STRING ACH_AH
6880: PPUSH
6881: LD_INT 1
6883: PPUSH
6884: CALL_OW 564
6888: GO 7053
6890: LD_INT 2
6892: DOUBLE
6893: EQUAL
6894: IFTRUE 6898
6896: GO 6911
6898: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
6899: LD_STRING ACH_E
6901: PPUSH
6902: LD_INT 1
6904: PPUSH
6905: CALL_OW 564
6909: GO 7053
6911: LD_INT 3
6913: DOUBLE
6914: EQUAL
6915: IFTRUE 6919
6917: GO 6932
6919: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
6920: LD_STRING ACH_OOL
6922: PPUSH
6923: LD_INT 1
6925: PPUSH
6926: CALL_OW 564
6930: GO 7053
6932: LD_INT 1
6934: PUSH
6935: LD_INT 2
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: DOUBLE
6942: EQUAL
6943: IFTRUE 6947
6945: GO 6972
6947: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
6948: LD_STRING ACH_AH
6950: PPUSH
6951: LD_REAL  5.00000000000000E-0001
6954: PPUSH
6955: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
6959: LD_STRING ACH_E
6961: PPUSH
6962: LD_REAL  5.00000000000000E-0001
6965: PPUSH
6966: CALL_OW 564
// end ; [ 2 , 3 ] :
6970: GO 7053
6972: LD_INT 2
6974: PUSH
6975: LD_INT 3
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: DOUBLE
6982: EQUAL
6983: IFTRUE 6987
6985: GO 7012
6987: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
6988: LD_STRING ACH_OOL
6990: PPUSH
6991: LD_REAL  5.00000000000000E-0001
6994: PPUSH
6995: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
6999: LD_STRING ACH_E
7001: PPUSH
7002: LD_REAL  5.00000000000000E-0001
7005: PPUSH
7006: CALL_OW 564
// end ; [ 3 , 1 ] :
7010: GO 7053
7012: LD_INT 3
7014: PUSH
7015: LD_INT 1
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: DOUBLE
7022: EQUAL
7023: IFTRUE 7027
7025: GO 7052
7027: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7028: LD_STRING ACH_AH
7030: PPUSH
7031: LD_REAL  5.00000000000000E-0001
7034: PPUSH
7035: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
7039: LD_STRING ACH_OOL
7041: PPUSH
7042: LD_REAL  5.00000000000000E-0001
7045: PPUSH
7046: CALL_OW 564
// end ; end ;
7050: GO 7053
7052: POP
// end ; end_of_file
7053: LD_VAR 0 2
7057: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
7058: LD_INT 0
7060: PPUSH
7061: PPUSH
// enable ( 98 ) ;
7062: LD_INT 98
7064: ENABLE_MARKED
// GameEnded = false ;
7065: LD_ADDR_LOC 8
7069: PUSH
7070: LD_INT 0
7072: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7073: LD_ADDR_LOC 7
7077: PUSH
7078: LD_INT 0
7080: PUSH
7081: LD_INT 0
7083: PUSH
7084: LD_INT 0
7086: PUSH
7087: LD_INT 0
7089: PUSH
7090: LD_INT 0
7092: PUSH
7093: LD_INT 0
7095: PUSH
7096: LD_INT 0
7098: PUSH
7099: LD_INT 0
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: LIST
7111: ST_TO_ADDR
// unfoged = false ;
7112: LD_ADDR_LOC 9
7116: PUSH
7117: LD_INT 0
7119: ST_TO_ADDR
// defeated_specs := [ ] ;
7120: LD_ADDR_LOC 10
7124: PUSH
7125: EMPTY
7126: ST_TO_ADDR
// for i = 1 to side_positions do
7127: LD_ADDR_VAR 0 2
7131: PUSH
7132: DOUBLE
7133: LD_INT 1
7135: DEC
7136: ST_TO_ADDR
7137: LD_EXP 34
7141: PUSH
7142: FOR_TO
7143: IFFALSE 7183
// if not side_positions [ i ] then
7145: LD_EXP 34
7149: PUSH
7150: LD_VAR 0 2
7154: ARRAY
7155: NOT
7156: IFFALSE 7181
// defeated = replace ( defeated , i , true ) ;
7158: LD_ADDR_LOC 7
7162: PUSH
7163: LD_LOC 7
7167: PPUSH
7168: LD_VAR 0 2
7172: PPUSH
7173: LD_INT 1
7175: PPUSH
7176: CALL_OW 1
7180: ST_TO_ADDR
7181: GO 7142
7183: POP
7184: POP
// end ;
7185: LD_VAR 0 1
7189: RET
// function CanWinLoose ; begin
7190: LD_INT 0
7192: PPUSH
// Result := true ;
7193: LD_ADDR_VAR 0 1
7197: PUSH
7198: LD_INT 1
7200: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
7201: CALL_OW 518
7205: PUSH
7206: CALL_OW 519
7210: PUSH
7211: LD_INT 0
7213: GREATER
7214: AND
7215: IFFALSE 7225
// Result := false ;
7217: LD_ADDR_VAR 0 1
7221: PUSH
7222: LD_INT 0
7224: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7225: CALL_OW 531
7229: PUSH
7230: CALL_OW 519
7234: PUSH
7235: LD_INT 1
7237: GREATER
7238: AND
7239: IFFALSE 7249
// Result := false ;
7241: LD_ADDR_VAR 0 1
7245: PUSH
7246: LD_INT 0
7248: ST_TO_ADDR
// end ;
7249: LD_VAR 0 1
7253: RET
// export function HasPower ( i ) ; var k , h ; begin
7254: LD_INT 0
7256: PPUSH
7257: PPUSH
7258: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
7259: LD_VAR 0 1
7263: PPUSH
7264: CALL_OW 108
7268: NOT
7269: PUSH
7270: LD_EXP 39
7274: PUSH
7275: LD_VAR 0 1
7279: ARRAY
7280: NOT
7281: AND
7282: PUSH
7283: LD_OWVAR 4
7287: AND
7288: IFFALSE 7300
// begin result = false ;
7290: LD_ADDR_VAR 0 2
7294: PUSH
7295: LD_INT 0
7297: ST_TO_ADDR
// end else
7298: GO 7595
// case def_win_rules of 0 :
7300: LD_EXP 27
7304: PUSH
7305: LD_INT 0
7307: DOUBLE
7308: EQUAL
7309: IFTRUE 7313
7311: GO 7476
7313: POP
// if def_people_respawning then
7314: LD_EXP 12
7318: IFFALSE 7409
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
7320: LD_ADDR_VAR 0 2
7324: PUSH
7325: LD_INT 22
7327: PUSH
7328: LD_VAR 0 1
7332: PUSH
7333: EMPTY
7334: LIST
7335: LIST
7336: PUSH
7337: LD_INT 2
7339: PUSH
7340: LD_INT 21
7342: PUSH
7343: LD_INT 1
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: PUSH
7350: LD_INT 33
7352: PUSH
7353: LD_INT 3
7355: PUSH
7356: EMPTY
7357: LIST
7358: LIST
7359: PUSH
7360: LD_INT 33
7362: PUSH
7363: LD_INT 5
7365: PUSH
7366: EMPTY
7367: LIST
7368: LIST
7369: PUSH
7370: LD_INT 30
7372: PUSH
7373: LD_INT 0
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: PUSH
7380: LD_INT 30
7382: PUSH
7383: LD_INT 1
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: PUSH
7390: EMPTY
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: LIST
7396: LIST
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PPUSH
7402: CALL_OW 69
7406: ST_TO_ADDR
7407: GO 7474
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
7409: LD_ADDR_VAR 0 2
7413: PUSH
7414: LD_INT 22
7416: PUSH
7417: LD_VAR 0 1
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: PUSH
7426: LD_INT 2
7428: PUSH
7429: LD_INT 21
7431: PUSH
7432: LD_INT 1
7434: PUSH
7435: EMPTY
7436: LIST
7437: LIST
7438: PUSH
7439: LD_INT 33
7441: PUSH
7442: LD_INT 3
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: PUSH
7449: LD_INT 33
7451: PUSH
7452: LD_INT 5
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: PUSH
7459: EMPTY
7460: LIST
7461: LIST
7462: LIST
7463: LIST
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: PPUSH
7469: CALL_OW 69
7473: ST_TO_ADDR
7474: GO 7595
7476: LD_INT 1
7478: DOUBLE
7479: EQUAL
7480: IFTRUE 7484
7482: GO 7523
7484: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
7485: LD_ADDR_VAR 0 2
7489: PUSH
7490: LD_INT 22
7492: PUSH
7493: LD_VAR 0 1
7497: PUSH
7498: EMPTY
7499: LIST
7500: LIST
7501: PUSH
7502: LD_INT 21
7504: PUSH
7505: LD_INT 1
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PPUSH
7516: CALL_OW 69
7520: ST_TO_ADDR
7521: GO 7595
7523: LD_INT 2
7525: DOUBLE
7526: EQUAL
7527: IFTRUE 7531
7529: GO 7594
7531: POP
// begin h = false ;
7532: LD_ADDR_VAR 0 4
7536: PUSH
7537: LD_INT 0
7539: ST_TO_ADDR
// for k in heroes [ i ] do
7540: LD_ADDR_VAR 0 3
7544: PUSH
7545: LD_EXP 43
7549: PUSH
7550: LD_VAR 0 1
7554: ARRAY
7555: PUSH
7556: FOR_IN
7557: IFFALSE 7580
// if IsLive ( k ) then
7559: LD_VAR 0 3
7563: PPUSH
7564: CALL_OW 300
7568: IFFALSE 7578
// h = true ;
7570: LD_ADDR_VAR 0 4
7574: PUSH
7575: LD_INT 1
7577: ST_TO_ADDR
7578: GO 7556
7580: POP
7581: POP
// Result := h ;
7582: LD_ADDR_VAR 0 2
7586: PUSH
7587: LD_VAR 0 4
7591: ST_TO_ADDR
// end ; end ;
7592: GO 7595
7594: POP
// end ;
7595: LD_VAR 0 2
7599: RET
// function AlliedSides ( i , j ) ; begin
7600: LD_INT 0
7602: PPUSH
// Result := false ;
7603: LD_ADDR_VAR 0 3
7607: PUSH
7608: LD_INT 0
7610: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
7611: LD_VAR 0 1
7615: PPUSH
7616: LD_VAR 0 2
7620: PPUSH
7621: CALL_OW 81
7625: PUSH
7626: LD_INT 1
7628: EQUAL
7629: PUSH
7630: LD_VAR 0 2
7634: PPUSH
7635: LD_VAR 0 1
7639: PPUSH
7640: CALL_OW 81
7644: PUSH
7645: LD_INT 1
7647: EQUAL
7648: AND
7649: PUSH
7650: LD_VAR 0 1
7654: PPUSH
7655: CALL_OW 83
7659: AND
7660: PUSH
7661: LD_VAR 0 2
7665: PPUSH
7666: CALL_OW 83
7670: AND
7671: IFFALSE 7681
// Result := true ;
7673: LD_ADDR_VAR 0 3
7677: PUSH
7678: LD_INT 1
7680: ST_TO_ADDR
// end ;
7681: LD_VAR 0 3
7685: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
7686: CALL 7190 0 0
7690: PUSH
7691: LD_LOC 8
7695: NOT
7696: AND
7697: IFFALSE 7713
7699: GO 7701
7701: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
7702: LD_ADDR_EXP 55
7706: PUSH
7707: LD_STRING #Player-Ended
7709: PUSH
7710: EMPTY
7711: LIST
7712: ST_TO_ADDR
7713: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
7714: CALL 7190 0 0
7718: PUSH
7719: LD_LOC 8
7723: AND
7724: IFFALSE 7733
7726: GO 7728
7728: DISABLE
// YouLostInMultiplayer ;
7729: CALL_OW 107
7733: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
7734: CALL 7190 0 0
7738: NOT
7739: PUSH
7740: CALL_OW 531
7744: NOT
7745: AND
7746: IFFALSE 7762
7748: GO 7750
7750: DISABLE
// WaitServerStrings = [ #server-wait ] ;
7751: LD_ADDR_EXP 55
7755: PUSH
7756: LD_STRING #server-wait
7758: PUSH
7759: EMPTY
7760: LIST
7761: ST_TO_ADDR
7762: END
// every 100 trigger IAmSpec do
7763: CALL_OW 531
7767: IFFALSE 7783
7769: GO 7771
7771: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
7772: LD_ADDR_EXP 55
7776: PUSH
7777: LD_STRING #Player-IAmSpec
7779: PUSH
7780: EMPTY
7781: LIST
7782: ST_TO_ADDR
7783: END
// every 100 trigger GameEnded and IAmSpec do
7784: LD_LOC 8
7788: PUSH
7789: CALL_OW 531
7793: AND
7794: IFFALSE 7803
7796: GO 7798
7798: DISABLE
// YouLostInMultiplayer ;
7799: CALL_OW 107
7803: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
7804: CALL 7190 0 0
7808: PUSH
7809: LD_LOC 8
7813: NOT
7814: AND
7815: IFFALSE 7831
7817: GO 7819
7819: DISABLE
// WaitServerStrings = [ $player-win ] ;
7820: LD_ADDR_EXP 55
7824: PUSH
7825: LD_STRING $player-win
7827: PUSH
7828: EMPTY
7829: LIST
7830: ST_TO_ADDR
7831: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
7832: CALL 7190 0 0
7836: PUSH
7837: LD_LOC 8
7841: AND
7842: IFFALSE 7866
7844: GO 7846
7846: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
7847: LD_EXP 35
7851: PUSH
7852: LD_OWVAR 7
7856: ARRAY
7857: PPUSH
7858: CALL 6861 0 1
// YouWinInMultiplayer ;
7862: CALL_OW 106
// end ;
7866: END
// every 100 trigger isEditor marked 401 do
7867: LD_OWVAR 84
7871: IFFALSE 7887
7873: GO 7875
7875: DISABLE
// Debug_Strings = [ You won ] ;
7876: LD_ADDR_OWVAR 48
7880: PUSH
7881: LD_STRING You won
7883: PUSH
7884: EMPTY
7885: LIST
7886: ST_TO_ADDR
7887: END
// every 100 trigger isEditor marked 400 do
7888: LD_OWVAR 84
7892: IFFALSE 7908
7894: GO 7896
7896: DISABLE
// Debug_Strings = [ You loss ] ;
7897: LD_ADDR_OWVAR 48
7901: PUSH
7902: LD_STRING You loss
7904: PUSH
7905: EMPTY
7906: LIST
7907: ST_TO_ADDR
7908: END
// every 100 marked 98 do var i , un ;
7909: GO 7911
7911: DISABLE
7912: LD_INT 0
7914: PPUSH
7915: PPUSH
// begin for i = 1 to side_positions do
7916: LD_ADDR_VAR 0 1
7920: PUSH
7921: DOUBLE
7922: LD_INT 1
7924: DEC
7925: ST_TO_ADDR
7926: LD_EXP 34
7930: PUSH
7931: FOR_TO
7932: IFFALSE 8019
// begin if side_positions [ i ] then
7934: LD_EXP 34
7938: PUSH
7939: LD_VAR 0 1
7943: ARRAY
7944: IFFALSE 8017
// if not HasPower ( i ) and not defeated [ i ] then
7946: LD_VAR 0 1
7950: PPUSH
7951: CALL 7254 0 1
7955: NOT
7956: PUSH
7957: LD_LOC 7
7961: PUSH
7962: LD_VAR 0 1
7966: ARRAY
7967: NOT
7968: AND
7969: IFFALSE 8017
// begin defeated = replace ( defeated , i , true ) ;
7971: LD_ADDR_LOC 7
7975: PUSH
7976: LD_LOC 7
7980: PPUSH
7981: LD_VAR 0 1
7985: PPUSH
7986: LD_INT 1
7988: PPUSH
7989: CALL_OW 1
7993: ST_TO_ADDR
// if i = mp_player_side then
7994: LD_VAR 0 1
7998: PUSH
7999: LD_OWVAR 7
8003: EQUAL
8004: IFFALSE 8017
// begin Multiplayer_Loose_Message ;
8006: CALL_OW 521
// SetPlayerSpectator ( ) ;
8010: CALL_OW 572
// enable ( 400 ) ;
8014: LD_INT 400
8016: ENABLE_MARKED
// end ; end ; end ;
8017: GO 7931
8019: POP
8020: POP
// DidGameEnd ;
8021: CALL 8036 0 0
// if not GameEnded then
8025: LD_LOC 8
8029: NOT
8030: IFFALSE 8033
// enable ;
8032: ENABLE
// end ;
8033: PPOPN 2
8035: END
// function DidGameEnd ; var i , k , enemy ; begin
8036: LD_INT 0
8038: PPUSH
8039: PPUSH
8040: PPUSH
8041: PPUSH
// enemy = [ ] ;
8042: LD_ADDR_VAR 0 4
8046: PUSH
8047: EMPTY
8048: ST_TO_ADDR
// for i = 1 to side_positions do
8049: LD_ADDR_VAR 0 2
8053: PUSH
8054: DOUBLE
8055: LD_INT 1
8057: DEC
8058: ST_TO_ADDR
8059: LD_EXP 34
8063: PUSH
8064: FOR_TO
8065: IFFALSE 8159
// if not defeated [ i ] then
8067: LD_LOC 7
8071: PUSH
8072: LD_VAR 0 2
8076: ARRAY
8077: NOT
8078: IFFALSE 8157
// for k = 1 to side_positions do
8080: LD_ADDR_VAR 0 3
8084: PUSH
8085: DOUBLE
8086: LD_INT 1
8088: DEC
8089: ST_TO_ADDR
8090: LD_EXP 34
8094: PUSH
8095: FOR_TO
8096: IFFALSE 8155
// if not defeated [ k ] then
8098: LD_LOC 7
8102: PUSH
8103: LD_VAR 0 3
8107: ARRAY
8108: NOT
8109: IFFALSE 8153
// if not AlliedSides ( i , k ) then
8111: LD_VAR 0 2
8115: PPUSH
8116: LD_VAR 0 3
8120: PPUSH
8121: CALL 7600 0 2
8125: NOT
8126: IFFALSE 8153
// enemy = enemy ^ [ i , k ] ;
8128: LD_ADDR_VAR 0 4
8132: PUSH
8133: LD_VAR 0 4
8137: PUSH
8138: LD_VAR 0 2
8142: PUSH
8143: LD_VAR 0 3
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: ADD
8152: ST_TO_ADDR
8153: GO 8095
8155: POP
8156: POP
8157: GO 8064
8159: POP
8160: POP
// if not enemy then
8161: LD_VAR 0 4
8165: NOT
8166: IFFALSE 8192
// begin GameEnded = true ;
8168: LD_ADDR_LOC 8
8172: PUSH
8173: LD_INT 1
8175: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
8176: LD_LOC 7
8180: PUSH
8181: LD_OWVAR 7
8185: ARRAY
8186: NOT
8187: IFFALSE 8192
// enable ( 401 ) ;
8189: LD_INT 401
8191: ENABLE_MARKED
// end ; end ;
8192: LD_VAR 0 1
8196: RET
// function unfog ; var k , friends ; begin
8197: LD_INT 0
8199: PPUSH
8200: PPUSH
8201: PPUSH
// for k = 1 to side_positions do
8202: LD_ADDR_VAR 0 2
8206: PUSH
8207: DOUBLE
8208: LD_INT 1
8210: DEC
8211: ST_TO_ADDR
8212: LD_EXP 34
8216: PUSH
8217: FOR_TO
8218: IFFALSE 8274
// if not defeated [ k ] then
8220: LD_LOC 7
8224: PUSH
8225: LD_VAR 0 2
8229: ARRAY
8230: NOT
8231: IFFALSE 8272
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
8233: LD_OWVAR 7
8237: PPUSH
8238: LD_VAR 0 2
8242: PPUSH
8243: CALL_OW 81
8247: PUSH
8248: LD_INT 1
8250: PUSH
8251: EMPTY
8252: LIST
8253: IN
8254: IFFALSE 8272
// friends = friends ^ k ;
8256: LD_ADDR_VAR 0 3
8260: PUSH
8261: LD_VAR 0 3
8265: PUSH
8266: LD_VAR 0 2
8270: ADD
8271: ST_TO_ADDR
8272: GO 8217
8274: POP
8275: POP
// if not friends then
8276: LD_VAR 0 3
8280: NOT
8281: IFFALSE 8295
// begin SetPlayerSpectator ( ) ;
8283: CALL_OW 572
// unfoged = true ;
8287: LD_ADDR_LOC 9
8291: PUSH
8292: LD_INT 1
8294: ST_TO_ADDR
// end ; end ;
8295: LD_VAR 0 1
8299: RET
// export function MakeGameEnd ; begin
8300: LD_INT 0
8302: PPUSH
// SetPlayerSpectator ( ) ;
8303: CALL_OW 572
// unfoged = true ;
8307: LD_ADDR_LOC 9
8311: PUSH
8312: LD_INT 1
8314: ST_TO_ADDR
// wait ( 0 0$5 ) ;
8315: LD_INT 175
8317: PPUSH
8318: CALL_OW 67
// GameEnded = true ;
8322: LD_ADDR_LOC 8
8326: PUSH
8327: LD_INT 1
8329: ST_TO_ADDR
// end ;
8330: LD_VAR 0 1
8334: RET
// export function GetGameEnded ; begin
8335: LD_INT 0
8337: PPUSH
// result = GameEnded ;
8338: LD_ADDR_VAR 0 1
8342: PUSH
8343: LD_LOC 8
8347: ST_TO_ADDR
// end ; end_of_file
8348: LD_VAR 0 1
8352: RET
// export function SetMpTechs ( ) ; var side , i ; begin
8353: LD_INT 0
8355: PPUSH
8356: PPUSH
8357: PPUSH
// for side = 1 to 8 do
8358: LD_ADDR_VAR 0 2
8362: PUSH
8363: DOUBLE
8364: LD_INT 1
8366: DEC
8367: ST_TO_ADDR
8368: LD_INT 8
8370: PUSH
8371: FOR_TO
8372: IFFALSE 8493
// begin for i = 1 to 72 do
8374: LD_ADDR_VAR 0 3
8378: PUSH
8379: DOUBLE
8380: LD_INT 1
8382: DEC
8383: ST_TO_ADDR
8384: LD_INT 72
8386: PUSH
8387: FOR_TO
8388: IFFALSE 8419
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
8390: LD_VAR 0 3
8394: PPUSH
8395: LD_VAR 0 2
8399: PPUSH
8400: LD_INT 0
8402: PPUSH
8403: LD_VAR 0 3
8407: PPUSH
8408: CALL_OW 565
8412: PPUSH
8413: CALL_OW 322
8417: GO 8387
8419: POP
8420: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
8421: LD_INT 73
8423: PPUSH
8424: LD_VAR 0 2
8428: PPUSH
8429: LD_INT 0
8431: PPUSH
8432: LD_INT 25
8434: PPUSH
8435: CALL_OW 565
8439: PPUSH
8440: CALL_OW 322
// for i = 0 to 40 do
8444: LD_ADDR_VAR 0 3
8448: PUSH
8449: DOUBLE
8450: LD_INT 0
8452: DEC
8453: ST_TO_ADDR
8454: LD_INT 40
8456: PUSH
8457: FOR_TO
8458: IFFALSE 8489
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
8460: LD_VAR 0 3
8464: PPUSH
8465: LD_VAR 0 2
8469: PPUSH
8470: LD_INT 1
8472: PPUSH
8473: LD_VAR 0 3
8477: PPUSH
8478: CALL_OW 565
8482: PPUSH
8483: CALL_OW 324
8487: GO 8457
8489: POP
8490: POP
// end ;
8491: GO 8371
8493: POP
8494: POP
// end ;
8495: LD_VAR 0 1
8499: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
8500: LD_INT 0
8502: PPUSH
8503: PPUSH
8504: PPUSH
// for side = 1 to 8 do
8505: LD_ADDR_VAR 0 3
8509: PUSH
8510: DOUBLE
8511: LD_INT 1
8513: DEC
8514: ST_TO_ADDR
8515: LD_INT 8
8517: PUSH
8518: FOR_TO
8519: IFFALSE 12515
// begin for i = 1 to 73 do
8521: LD_ADDR_VAR 0 4
8525: PUSH
8526: DOUBLE
8527: LD_INT 1
8529: DEC
8530: ST_TO_ADDR
8531: LD_INT 73
8533: PUSH
8534: FOR_TO
8535: IFFALSE 8556
// SetTech ( i , side , state_disabled ) ;
8537: LD_VAR 0 4
8541: PPUSH
8542: LD_VAR 0 3
8546: PPUSH
8547: LD_INT 0
8549: PPUSH
8550: CALL_OW 322
8554: GO 8534
8556: POP
8557: POP
// for i = 0 to 40 do
8558: LD_ADDR_VAR 0 4
8562: PUSH
8563: DOUBLE
8564: LD_INT 0
8566: DEC
8567: ST_TO_ADDR
8568: LD_INT 40
8570: PUSH
8571: FOR_TO
8572: IFFALSE 8593
// SetRestrict ( i , side , false ) ;
8574: LD_VAR 0 4
8578: PPUSH
8579: LD_VAR 0 3
8583: PPUSH
8584: LD_INT 0
8586: PPUSH
8587: CALL_OW 324
8591: GO 8571
8593: POP
8594: POP
// case level of 1 :
8595: LD_VAR 0 1
8599: PUSH
8600: LD_INT 1
8602: DOUBLE
8603: EQUAL
8604: IFTRUE 8608
8606: GO 8761
8608: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8609: LD_INT 35
8611: PPUSH
8612: LD_VAR 0 3
8616: PPUSH
8617: LD_INT 1
8619: PPUSH
8620: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8624: LD_INT 45
8626: PPUSH
8627: LD_VAR 0 3
8631: PPUSH
8632: LD_INT 1
8634: PPUSH
8635: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8639: LD_INT 46
8641: PPUSH
8642: LD_VAR 0 3
8646: PPUSH
8647: LD_INT 1
8649: PPUSH
8650: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8654: LD_INT 47
8656: PPUSH
8657: LD_VAR 0 3
8661: PPUSH
8662: LD_INT 1
8664: PPUSH
8665: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
8669: LD_INT 0
8671: PPUSH
8672: LD_VAR 0 3
8676: PPUSH
8677: LD_INT 1
8679: PPUSH
8680: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
8684: LD_INT 2
8686: PPUSH
8687: LD_VAR 0 3
8691: PPUSH
8692: LD_INT 1
8694: PPUSH
8695: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
8699: LD_INT 4
8701: PPUSH
8702: LD_VAR 0 3
8706: PPUSH
8707: LD_INT 1
8709: PPUSH
8710: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
8714: LD_INT 6
8716: PPUSH
8717: LD_VAR 0 3
8721: PPUSH
8722: LD_INT 1
8724: PPUSH
8725: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
8729: LD_INT 29
8731: PPUSH
8732: LD_VAR 0 3
8736: PPUSH
8737: LD_INT 1
8739: PPUSH
8740: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8744: LD_INT 31
8746: PPUSH
8747: LD_VAR 0 3
8751: PPUSH
8752: LD_INT 1
8754: PPUSH
8755: CALL_OW 324
// end ; 2 :
8759: GO 12513
8761: LD_INT 2
8763: DOUBLE
8764: EQUAL
8765: IFTRUE 8769
8767: GO 8967
8769: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8770: LD_INT 35
8772: PPUSH
8773: LD_VAR 0 3
8777: PPUSH
8778: LD_INT 1
8780: PPUSH
8781: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8785: LD_INT 45
8787: PPUSH
8788: LD_VAR 0 3
8792: PPUSH
8793: LD_INT 1
8795: PPUSH
8796: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8800: LD_INT 46
8802: PPUSH
8803: LD_VAR 0 3
8807: PPUSH
8808: LD_INT 1
8810: PPUSH
8811: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8815: LD_INT 47
8817: PPUSH
8818: LD_VAR 0 3
8822: PPUSH
8823: LD_INT 1
8825: PPUSH
8826: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
8830: LD_INT 1
8832: PPUSH
8833: LD_VAR 0 3
8837: PPUSH
8838: LD_INT 1
8840: PPUSH
8841: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
8845: LD_INT 2
8847: PPUSH
8848: LD_VAR 0 3
8852: PPUSH
8853: LD_INT 1
8855: PPUSH
8856: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
8860: LD_INT 11
8862: PPUSH
8863: LD_VAR 0 3
8867: PPUSH
8868: LD_INT 1
8870: PPUSH
8871: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
8875: LD_INT 0
8877: PPUSH
8878: LD_VAR 0 3
8882: PPUSH
8883: LD_INT 1
8885: PPUSH
8886: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
8890: LD_INT 2
8892: PPUSH
8893: LD_VAR 0 3
8897: PPUSH
8898: LD_INT 1
8900: PPUSH
8901: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
8905: LD_INT 4
8907: PPUSH
8908: LD_VAR 0 3
8912: PPUSH
8913: LD_INT 1
8915: PPUSH
8916: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
8920: LD_INT 6
8922: PPUSH
8923: LD_VAR 0 3
8927: PPUSH
8928: LD_INT 1
8930: PPUSH
8931: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
8935: LD_INT 29
8937: PPUSH
8938: LD_VAR 0 3
8942: PPUSH
8943: LD_INT 1
8945: PPUSH
8946: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8950: LD_INT 31
8952: PPUSH
8953: LD_VAR 0 3
8957: PPUSH
8958: LD_INT 1
8960: PPUSH
8961: CALL_OW 324
// end ; 3 :
8965: GO 12513
8967: LD_INT 3
8969: DOUBLE
8970: EQUAL
8971: IFTRUE 8975
8973: GO 9428
8975: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8976: LD_INT 35
8978: PPUSH
8979: LD_VAR 0 3
8983: PPUSH
8984: LD_INT 1
8986: PPUSH
8987: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8991: LD_INT 45
8993: PPUSH
8994: LD_VAR 0 3
8998: PPUSH
8999: LD_INT 1
9001: PPUSH
9002: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9006: LD_INT 46
9008: PPUSH
9009: LD_VAR 0 3
9013: PPUSH
9014: LD_INT 1
9016: PPUSH
9017: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9021: LD_INT 47
9023: PPUSH
9024: LD_VAR 0 3
9028: PPUSH
9029: LD_INT 1
9031: PPUSH
9032: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9036: LD_INT 1
9038: PPUSH
9039: LD_VAR 0 3
9043: PPUSH
9044: LD_INT 1
9046: PPUSH
9047: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9051: LD_INT 2
9053: PPUSH
9054: LD_VAR 0 3
9058: PPUSH
9059: LD_INT 1
9061: PPUSH
9062: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9066: LD_INT 11
9068: PPUSH
9069: LD_VAR 0 3
9073: PPUSH
9074: LD_INT 1
9076: PPUSH
9077: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9081: LD_INT 48
9083: PPUSH
9084: LD_VAR 0 3
9088: PPUSH
9089: LD_INT 1
9091: PPUSH
9092: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9096: LD_INT 69
9098: PPUSH
9099: LD_VAR 0 3
9103: PPUSH
9104: LD_INT 1
9106: PPUSH
9107: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9111: LD_INT 39
9113: PPUSH
9114: LD_VAR 0 3
9118: PPUSH
9119: LD_INT 1
9121: PPUSH
9122: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9126: LD_INT 43
9128: PPUSH
9129: LD_VAR 0 3
9133: PPUSH
9134: LD_INT 1
9136: PPUSH
9137: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9141: LD_INT 51
9143: PPUSH
9144: LD_VAR 0 3
9148: PPUSH
9149: LD_INT 1
9151: PPUSH
9152: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9156: LD_INT 6
9158: PPUSH
9159: LD_VAR 0 3
9163: PPUSH
9164: LD_INT 1
9166: PPUSH
9167: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9171: LD_INT 0
9173: PPUSH
9174: LD_VAR 0 3
9178: PPUSH
9179: LD_INT 1
9181: PPUSH
9182: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9186: LD_INT 2
9188: PPUSH
9189: LD_VAR 0 3
9193: PPUSH
9194: LD_INT 1
9196: PPUSH
9197: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
9201: LD_INT 3
9203: PPUSH
9204: LD_VAR 0 3
9208: PPUSH
9209: LD_INT 1
9211: PPUSH
9212: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9216: LD_INT 4
9218: PPUSH
9219: LD_VAR 0 3
9223: PPUSH
9224: LD_INT 1
9226: PPUSH
9227: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9231: LD_INT 6
9233: PPUSH
9234: LD_VAR 0 3
9238: PPUSH
9239: LD_INT 1
9241: PPUSH
9242: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
9246: LD_INT 7
9248: PPUSH
9249: LD_VAR 0 3
9253: PPUSH
9254: LD_INT 1
9256: PPUSH
9257: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
9261: LD_INT 8
9263: PPUSH
9264: LD_VAR 0 3
9268: PPUSH
9269: LD_INT 1
9271: PPUSH
9272: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
9276: LD_INT 10
9278: PPUSH
9279: LD_VAR 0 3
9283: PPUSH
9284: LD_INT 1
9286: PPUSH
9287: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
9291: LD_INT 15
9293: PPUSH
9294: LD_VAR 0 3
9298: PPUSH
9299: LD_INT 1
9301: PPUSH
9302: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
9306: LD_INT 16
9308: PPUSH
9309: LD_VAR 0 3
9313: PPUSH
9314: LD_INT 1
9316: PPUSH
9317: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
9321: LD_INT 17
9323: PPUSH
9324: LD_VAR 0 3
9328: PPUSH
9329: LD_INT 1
9331: PPUSH
9332: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
9336: LD_INT 20
9338: PPUSH
9339: LD_VAR 0 3
9343: PPUSH
9344: LD_INT 1
9346: PPUSH
9347: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
9351: LD_INT 26
9353: PPUSH
9354: LD_VAR 0 3
9358: PPUSH
9359: LD_INT 1
9361: PPUSH
9362: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
9366: LD_INT 27
9368: PPUSH
9369: LD_VAR 0 3
9373: PPUSH
9374: LD_INT 1
9376: PPUSH
9377: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9381: LD_INT 29
9383: PPUSH
9384: LD_VAR 0 3
9388: PPUSH
9389: LD_INT 1
9391: PPUSH
9392: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9396: LD_INT 31
9398: PPUSH
9399: LD_VAR 0 3
9403: PPUSH
9404: LD_INT 1
9406: PPUSH
9407: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
9411: LD_INT 32
9413: PPUSH
9414: LD_VAR 0 3
9418: PPUSH
9419: LD_INT 1
9421: PPUSH
9422: CALL_OW 324
// end ; 4 :
9426: GO 12513
9428: LD_INT 4
9430: DOUBLE
9431: EQUAL
9432: IFTRUE 9436
9434: GO 10384
9436: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9437: LD_INT 35
9439: PPUSH
9440: LD_VAR 0 3
9444: PPUSH
9445: LD_INT 1
9447: PPUSH
9448: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9452: LD_INT 45
9454: PPUSH
9455: LD_VAR 0 3
9459: PPUSH
9460: LD_INT 1
9462: PPUSH
9463: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9467: LD_INT 46
9469: PPUSH
9470: LD_VAR 0 3
9474: PPUSH
9475: LD_INT 1
9477: PPUSH
9478: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9482: LD_INT 47
9484: PPUSH
9485: LD_VAR 0 3
9489: PPUSH
9490: LD_INT 1
9492: PPUSH
9493: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9497: LD_INT 1
9499: PPUSH
9500: LD_VAR 0 3
9504: PPUSH
9505: LD_INT 1
9507: PPUSH
9508: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9512: LD_INT 2
9514: PPUSH
9515: LD_VAR 0 3
9519: PPUSH
9520: LD_INT 1
9522: PPUSH
9523: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9527: LD_INT 11
9529: PPUSH
9530: LD_VAR 0 3
9534: PPUSH
9535: LD_INT 1
9537: PPUSH
9538: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
9542: LD_INT 20
9544: PPUSH
9545: LD_VAR 0 3
9549: PPUSH
9550: LD_INT 1
9552: PPUSH
9553: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9557: LD_INT 48
9559: PPUSH
9560: LD_VAR 0 3
9564: PPUSH
9565: LD_INT 1
9567: PPUSH
9568: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
9572: LD_INT 49
9574: PPUSH
9575: LD_VAR 0 3
9579: PPUSH
9580: LD_INT 1
9582: PPUSH
9583: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9587: LD_INT 69
9589: PPUSH
9590: LD_VAR 0 3
9594: PPUSH
9595: LD_INT 1
9597: PPUSH
9598: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9602: LD_INT 39
9604: PPUSH
9605: LD_VAR 0 3
9609: PPUSH
9610: LD_INT 1
9612: PPUSH
9613: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
9617: LD_INT 34
9619: PPUSH
9620: LD_VAR 0 3
9624: PPUSH
9625: LD_INT 1
9627: PPUSH
9628: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
9632: LD_INT 42
9634: PPUSH
9635: LD_VAR 0 3
9639: PPUSH
9640: LD_INT 1
9642: PPUSH
9643: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
9647: LD_INT 44
9649: PPUSH
9650: LD_VAR 0 3
9654: PPUSH
9655: LD_INT 1
9657: PPUSH
9658: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
9662: LD_INT 41
9664: PPUSH
9665: LD_VAR 0 3
9669: PPUSH
9670: LD_INT 1
9672: PPUSH
9673: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9677: LD_INT 43
9679: PPUSH
9680: LD_VAR 0 3
9684: PPUSH
9685: LD_INT 1
9687: PPUSH
9688: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
9692: LD_INT 70
9694: PPUSH
9695: LD_VAR 0 3
9699: PPUSH
9700: LD_INT 1
9702: PPUSH
9703: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9707: LD_INT 51
9709: PPUSH
9710: LD_VAR 0 3
9714: PPUSH
9715: LD_INT 1
9717: PPUSH
9718: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
9722: LD_INT 52
9724: PPUSH
9725: LD_VAR 0 3
9729: PPUSH
9730: LD_INT 1
9732: PPUSH
9733: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9737: LD_INT 6
9739: PPUSH
9740: LD_VAR 0 3
9744: PPUSH
9745: LD_INT 1
9747: PPUSH
9748: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
9752: LD_INT 15
9754: PPUSH
9755: LD_VAR 0 3
9759: PPUSH
9760: LD_INT 1
9762: PPUSH
9763: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
9767: LD_INT 7
9769: PPUSH
9770: LD_VAR 0 3
9774: PPUSH
9775: LD_INT 1
9777: PPUSH
9778: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
9782: LD_INT 12
9784: PPUSH
9785: LD_VAR 0 3
9789: PPUSH
9790: LD_INT 1
9792: PPUSH
9793: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
9797: LD_INT 18
9799: PPUSH
9800: LD_VAR 0 3
9804: PPUSH
9805: LD_INT 1
9807: PPUSH
9808: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
9812: LD_INT 60
9814: PPUSH
9815: LD_VAR 0 3
9819: PPUSH
9820: LD_INT 1
9822: PPUSH
9823: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
9827: LD_INT 9
9829: PPUSH
9830: LD_VAR 0 3
9834: PPUSH
9835: LD_INT 1
9837: PPUSH
9838: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
9842: LD_INT 30
9844: PPUSH
9845: LD_VAR 0 3
9849: PPUSH
9850: LD_INT 1
9852: PPUSH
9853: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
9857: LD_INT 37
9859: PPUSH
9860: LD_VAR 0 3
9864: PPUSH
9865: LD_INT 1
9867: PPUSH
9868: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
9872: LD_INT 5
9874: PPUSH
9875: LD_VAR 0 3
9879: PPUSH
9880: LD_INT 1
9882: PPUSH
9883: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
9887: LD_INT 66
9889: PPUSH
9890: LD_VAR 0 3
9894: PPUSH
9895: LD_INT 1
9897: PPUSH
9898: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
9902: LD_INT 21
9904: PPUSH
9905: LD_VAR 0 3
9909: PPUSH
9910: LD_INT 1
9912: PPUSH
9913: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
9917: LD_INT 22
9919: PPUSH
9920: LD_VAR 0 3
9924: PPUSH
9925: LD_INT 1
9927: PPUSH
9928: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
9932: LD_INT 54
9934: PPUSH
9935: LD_VAR 0 3
9939: PPUSH
9940: LD_INT 1
9942: PPUSH
9943: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9947: LD_INT 0
9949: PPUSH
9950: LD_VAR 0 3
9954: PPUSH
9955: LD_INT 1
9957: PPUSH
9958: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
9962: LD_INT 1
9964: PPUSH
9965: LD_VAR 0 3
9969: PPUSH
9970: LD_INT 1
9972: PPUSH
9973: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9977: LD_INT 2
9979: PPUSH
9980: LD_VAR 0 3
9984: PPUSH
9985: LD_INT 1
9987: PPUSH
9988: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
9992: LD_INT 3
9994: PPUSH
9995: LD_VAR 0 3
9999: PPUSH
10000: LD_INT 1
10002: PPUSH
10003: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10007: LD_INT 4
10009: PPUSH
10010: LD_VAR 0 3
10014: PPUSH
10015: LD_INT 1
10017: PPUSH
10018: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10022: LD_INT 5
10024: PPUSH
10025: LD_VAR 0 3
10029: PPUSH
10030: LD_INT 1
10032: PPUSH
10033: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10037: LD_INT 6
10039: PPUSH
10040: LD_VAR 0 3
10044: PPUSH
10045: LD_INT 1
10047: PPUSH
10048: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10052: LD_INT 7
10054: PPUSH
10055: LD_VAR 0 3
10059: PPUSH
10060: LD_INT 1
10062: PPUSH
10063: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10067: LD_INT 8
10069: PPUSH
10070: LD_VAR 0 3
10074: PPUSH
10075: LD_INT 1
10077: PPUSH
10078: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10082: LD_INT 10
10084: PPUSH
10085: LD_VAR 0 3
10089: PPUSH
10090: LD_INT 1
10092: PPUSH
10093: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
10097: LD_INT 11
10099: PPUSH
10100: LD_VAR 0 3
10104: PPUSH
10105: LD_INT 1
10107: PPUSH
10108: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
10112: LD_INT 12
10114: PPUSH
10115: LD_VAR 0 3
10119: PPUSH
10120: LD_INT 1
10122: PPUSH
10123: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
10127: LD_INT 13
10129: PPUSH
10130: LD_VAR 0 3
10134: PPUSH
10135: LD_INT 1
10137: PPUSH
10138: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
10142: LD_INT 14
10144: PPUSH
10145: LD_VAR 0 3
10149: PPUSH
10150: LD_INT 1
10152: PPUSH
10153: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10157: LD_INT 15
10159: PPUSH
10160: LD_VAR 0 3
10164: PPUSH
10165: LD_INT 1
10167: PPUSH
10168: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10172: LD_INT 16
10174: PPUSH
10175: LD_VAR 0 3
10179: PPUSH
10180: LD_INT 1
10182: PPUSH
10183: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10187: LD_INT 17
10189: PPUSH
10190: LD_VAR 0 3
10194: PPUSH
10195: LD_INT 1
10197: PPUSH
10198: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
10202: LD_INT 19
10204: PPUSH
10205: LD_VAR 0 3
10209: PPUSH
10210: LD_INT 1
10212: PPUSH
10213: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10217: LD_INT 20
10219: PPUSH
10220: LD_VAR 0 3
10224: PPUSH
10225: LD_INT 1
10227: PPUSH
10228: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
10232: LD_INT 21
10234: PPUSH
10235: LD_VAR 0 3
10239: PPUSH
10240: LD_INT 1
10242: PPUSH
10243: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
10247: LD_INT 23
10249: PPUSH
10250: LD_VAR 0 3
10254: PPUSH
10255: LD_INT 1
10257: PPUSH
10258: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10262: LD_INT 26
10264: PPUSH
10265: LD_VAR 0 3
10269: PPUSH
10270: LD_INT 1
10272: PPUSH
10273: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10277: LD_INT 27
10279: PPUSH
10280: LD_VAR 0 3
10284: PPUSH
10285: LD_INT 1
10287: PPUSH
10288: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
10292: LD_INT 28
10294: PPUSH
10295: LD_VAR 0 3
10299: PPUSH
10300: LD_INT 1
10302: PPUSH
10303: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10307: LD_INT 29
10309: PPUSH
10310: LD_VAR 0 3
10314: PPUSH
10315: LD_INT 1
10317: PPUSH
10318: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
10322: LD_INT 30
10324: PPUSH
10325: LD_VAR 0 3
10329: PPUSH
10330: LD_INT 1
10332: PPUSH
10333: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10337: LD_INT 31
10339: PPUSH
10340: LD_VAR 0 3
10344: PPUSH
10345: LD_INT 1
10347: PPUSH
10348: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10352: LD_INT 32
10354: PPUSH
10355: LD_VAR 0 3
10359: PPUSH
10360: LD_INT 1
10362: PPUSH
10363: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
10367: LD_INT 36
10369: PPUSH
10370: LD_VAR 0 3
10374: PPUSH
10375: LD_INT 1
10377: PPUSH
10378: CALL_OW 324
// end ; 5 :
10382: GO 12513
10384: LD_INT 5
10386: DOUBLE
10387: EQUAL
10388: IFTRUE 10392
10390: GO 11505
10392: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10393: LD_INT 35
10395: PPUSH
10396: LD_VAR 0 3
10400: PPUSH
10401: LD_INT 1
10403: PPUSH
10404: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10408: LD_INT 45
10410: PPUSH
10411: LD_VAR 0 3
10415: PPUSH
10416: LD_INT 1
10418: PPUSH
10419: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10423: LD_INT 46
10425: PPUSH
10426: LD_VAR 0 3
10430: PPUSH
10431: LD_INT 1
10433: PPUSH
10434: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10438: LD_INT 47
10440: PPUSH
10441: LD_VAR 0 3
10445: PPUSH
10446: LD_INT 1
10448: PPUSH
10449: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10453: LD_INT 1
10455: PPUSH
10456: LD_VAR 0 3
10460: PPUSH
10461: LD_INT 1
10463: PPUSH
10464: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10468: LD_INT 2
10470: PPUSH
10471: LD_VAR 0 3
10475: PPUSH
10476: LD_INT 1
10478: PPUSH
10479: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10483: LD_INT 11
10485: PPUSH
10486: LD_VAR 0 3
10490: PPUSH
10491: LD_INT 1
10493: PPUSH
10494: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10498: LD_INT 20
10500: PPUSH
10501: LD_VAR 0 3
10505: PPUSH
10506: LD_INT 1
10508: PPUSH
10509: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10513: LD_INT 48
10515: PPUSH
10516: LD_VAR 0 3
10520: PPUSH
10521: LD_INT 1
10523: PPUSH
10524: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10528: LD_INT 49
10530: PPUSH
10531: LD_VAR 0 3
10535: PPUSH
10536: LD_INT 1
10538: PPUSH
10539: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10543: LD_INT 69
10545: PPUSH
10546: LD_VAR 0 3
10550: PPUSH
10551: LD_INT 1
10553: PPUSH
10554: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10558: LD_INT 39
10560: PPUSH
10561: LD_VAR 0 3
10565: PPUSH
10566: LD_INT 1
10568: PPUSH
10569: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10573: LD_INT 34
10575: PPUSH
10576: LD_VAR 0 3
10580: PPUSH
10581: LD_INT 1
10583: PPUSH
10584: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10588: LD_INT 42
10590: PPUSH
10591: LD_VAR 0 3
10595: PPUSH
10596: LD_INT 1
10598: PPUSH
10599: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10603: LD_INT 44
10605: PPUSH
10606: LD_VAR 0 3
10610: PPUSH
10611: LD_INT 1
10613: PPUSH
10614: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10618: LD_INT 41
10620: PPUSH
10621: LD_VAR 0 3
10625: PPUSH
10626: LD_INT 1
10628: PPUSH
10629: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
10633: LD_INT 40
10635: PPUSH
10636: LD_VAR 0 3
10640: PPUSH
10641: LD_INT 1
10643: PPUSH
10644: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10648: LD_INT 43
10650: PPUSH
10651: LD_VAR 0 3
10655: PPUSH
10656: LD_INT 1
10658: PPUSH
10659: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10663: LD_INT 70
10665: PPUSH
10666: LD_VAR 0 3
10670: PPUSH
10671: LD_INT 1
10673: PPUSH
10674: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10678: LD_INT 51
10680: PPUSH
10681: LD_VAR 0 3
10685: PPUSH
10686: LD_INT 1
10688: PPUSH
10689: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10693: LD_INT 52
10695: PPUSH
10696: LD_VAR 0 3
10700: PPUSH
10701: LD_INT 1
10703: PPUSH
10704: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10708: LD_INT 6
10710: PPUSH
10711: LD_VAR 0 3
10715: PPUSH
10716: LD_INT 1
10718: PPUSH
10719: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10723: LD_INT 15
10725: PPUSH
10726: LD_VAR 0 3
10730: PPUSH
10731: LD_INT 1
10733: PPUSH
10734: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10738: LD_INT 7
10740: PPUSH
10741: LD_VAR 0 3
10745: PPUSH
10746: LD_INT 1
10748: PPUSH
10749: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10753: LD_INT 12
10755: PPUSH
10756: LD_VAR 0 3
10760: PPUSH
10761: LD_INT 1
10763: PPUSH
10764: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
10768: LD_INT 17
10770: PPUSH
10771: LD_VAR 0 3
10775: PPUSH
10776: LD_INT 1
10778: PPUSH
10779: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10783: LD_INT 18
10785: PPUSH
10786: LD_VAR 0 3
10790: PPUSH
10791: LD_INT 1
10793: PPUSH
10794: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10798: LD_INT 60
10800: PPUSH
10801: LD_VAR 0 3
10805: PPUSH
10806: LD_INT 1
10808: PPUSH
10809: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
10813: LD_INT 32
10815: PPUSH
10816: LD_VAR 0 3
10820: PPUSH
10821: LD_INT 1
10823: PPUSH
10824: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10828: LD_INT 9
10830: PPUSH
10831: LD_VAR 0 3
10835: PPUSH
10836: LD_INT 1
10838: PPUSH
10839: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
10843: LD_INT 57
10845: PPUSH
10846: LD_VAR 0 3
10850: PPUSH
10851: LD_INT 1
10853: PPUSH
10854: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10858: LD_INT 30
10860: PPUSH
10861: LD_VAR 0 3
10865: PPUSH
10866: LD_INT 1
10868: PPUSH
10869: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10873: LD_INT 37
10875: PPUSH
10876: LD_VAR 0 3
10880: PPUSH
10881: LD_INT 1
10883: PPUSH
10884: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
10888: LD_INT 63
10890: PPUSH
10891: LD_VAR 0 3
10895: PPUSH
10896: LD_INT 1
10898: PPUSH
10899: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
10903: LD_INT 3
10905: PPUSH
10906: LD_VAR 0 3
10910: PPUSH
10911: LD_INT 1
10913: PPUSH
10914: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
10918: LD_INT 4
10920: PPUSH
10921: LD_VAR 0 3
10925: PPUSH
10926: LD_INT 1
10928: PPUSH
10929: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10933: LD_INT 5
10935: PPUSH
10936: LD_VAR 0 3
10940: PPUSH
10941: LD_INT 1
10943: PPUSH
10944: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10948: LD_INT 66
10950: PPUSH
10951: LD_VAR 0 3
10955: PPUSH
10956: LD_INT 1
10958: PPUSH
10959: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10963: LD_INT 21
10965: PPUSH
10966: LD_VAR 0 3
10970: PPUSH
10971: LD_INT 1
10973: PPUSH
10974: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10978: LD_INT 22
10980: PPUSH
10981: LD_VAR 0 3
10985: PPUSH
10986: LD_INT 1
10988: PPUSH
10989: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
10993: LD_INT 19
10995: PPUSH
10996: LD_VAR 0 3
11000: PPUSH
11001: LD_INT 1
11003: PPUSH
11004: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11008: LD_INT 54
11010: PPUSH
11011: LD_VAR 0 3
11015: PPUSH
11016: LD_INT 1
11018: PPUSH
11019: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
11023: LD_INT 55
11025: PPUSH
11026: LD_VAR 0 3
11030: PPUSH
11031: LD_INT 1
11033: PPUSH
11034: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11038: LD_INT 0
11040: PPUSH
11041: LD_VAR 0 3
11045: PPUSH
11046: LD_INT 1
11048: PPUSH
11049: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11053: LD_INT 1
11055: PPUSH
11056: LD_VAR 0 3
11060: PPUSH
11061: LD_INT 1
11063: PPUSH
11064: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11068: LD_INT 2
11070: PPUSH
11071: LD_VAR 0 3
11075: PPUSH
11076: LD_INT 1
11078: PPUSH
11079: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11083: LD_INT 3
11085: PPUSH
11086: LD_VAR 0 3
11090: PPUSH
11091: LD_INT 1
11093: PPUSH
11094: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11098: LD_INT 4
11100: PPUSH
11101: LD_VAR 0 3
11105: PPUSH
11106: LD_INT 1
11108: PPUSH
11109: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11113: LD_INT 5
11115: PPUSH
11116: LD_VAR 0 3
11120: PPUSH
11121: LD_INT 1
11123: PPUSH
11124: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11128: LD_INT 6
11130: PPUSH
11131: LD_VAR 0 3
11135: PPUSH
11136: LD_INT 1
11138: PPUSH
11139: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11143: LD_INT 7
11145: PPUSH
11146: LD_VAR 0 3
11150: PPUSH
11151: LD_INT 1
11153: PPUSH
11154: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11158: LD_INT 8
11160: PPUSH
11161: LD_VAR 0 3
11165: PPUSH
11166: LD_INT 1
11168: PPUSH
11169: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11173: LD_INT 10
11175: PPUSH
11176: LD_VAR 0 3
11180: PPUSH
11181: LD_INT 1
11183: PPUSH
11184: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11188: LD_INT 11
11190: PPUSH
11191: LD_VAR 0 3
11195: PPUSH
11196: LD_INT 1
11198: PPUSH
11199: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11203: LD_INT 12
11205: PPUSH
11206: LD_VAR 0 3
11210: PPUSH
11211: LD_INT 1
11213: PPUSH
11214: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11218: LD_INT 13
11220: PPUSH
11221: LD_VAR 0 3
11225: PPUSH
11226: LD_INT 1
11228: PPUSH
11229: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11233: LD_INT 14
11235: PPUSH
11236: LD_VAR 0 3
11240: PPUSH
11241: LD_INT 1
11243: PPUSH
11244: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11248: LD_INT 15
11250: PPUSH
11251: LD_VAR 0 3
11255: PPUSH
11256: LD_INT 1
11258: PPUSH
11259: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11263: LD_INT 16
11265: PPUSH
11266: LD_VAR 0 3
11270: PPUSH
11271: LD_INT 1
11273: PPUSH
11274: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11278: LD_INT 17
11280: PPUSH
11281: LD_VAR 0 3
11285: PPUSH
11286: LD_INT 1
11288: PPUSH
11289: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
11293: LD_INT 18
11295: PPUSH
11296: LD_VAR 0 3
11300: PPUSH
11301: LD_INT 1
11303: PPUSH
11304: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11308: LD_INT 19
11310: PPUSH
11311: LD_VAR 0 3
11315: PPUSH
11316: LD_INT 1
11318: PPUSH
11319: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11323: LD_INT 20
11325: PPUSH
11326: LD_VAR 0 3
11330: PPUSH
11331: LD_INT 1
11333: PPUSH
11334: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11338: LD_INT 21
11340: PPUSH
11341: LD_VAR 0 3
11345: PPUSH
11346: LD_INT 1
11348: PPUSH
11349: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11353: LD_INT 23
11355: PPUSH
11356: LD_VAR 0 3
11360: PPUSH
11361: LD_INT 1
11363: PPUSH
11364: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11368: LD_INT 26
11370: PPUSH
11371: LD_VAR 0 3
11375: PPUSH
11376: LD_INT 1
11378: PPUSH
11379: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11383: LD_INT 27
11385: PPUSH
11386: LD_VAR 0 3
11390: PPUSH
11391: LD_INT 1
11393: PPUSH
11394: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11398: LD_INT 28
11400: PPUSH
11401: LD_VAR 0 3
11405: PPUSH
11406: LD_INT 1
11408: PPUSH
11409: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11413: LD_INT 29
11415: PPUSH
11416: LD_VAR 0 3
11420: PPUSH
11421: LD_INT 1
11423: PPUSH
11424: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11428: LD_INT 30
11430: PPUSH
11431: LD_VAR 0 3
11435: PPUSH
11436: LD_INT 1
11438: PPUSH
11439: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11443: LD_INT 31
11445: PPUSH
11446: LD_VAR 0 3
11450: PPUSH
11451: LD_INT 1
11453: PPUSH
11454: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11458: LD_INT 32
11460: PPUSH
11461: LD_VAR 0 3
11465: PPUSH
11466: LD_INT 1
11468: PPUSH
11469: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
11473: LD_INT 33
11475: PPUSH
11476: LD_VAR 0 3
11480: PPUSH
11481: LD_INT 1
11483: PPUSH
11484: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11488: LD_INT 36
11490: PPUSH
11491: LD_VAR 0 3
11495: PPUSH
11496: LD_INT 1
11498: PPUSH
11499: CALL_OW 324
// end ; 6 :
11503: GO 12513
11505: LD_INT 6
11507: DOUBLE
11508: EQUAL
11509: IFTRUE 11513
11511: GO 12438
11513: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11514: LD_INT 35
11516: PPUSH
11517: LD_VAR 0 3
11521: PPUSH
11522: LD_INT 1
11524: PPUSH
11525: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11529: LD_INT 45
11531: PPUSH
11532: LD_VAR 0 3
11536: PPUSH
11537: LD_INT 1
11539: PPUSH
11540: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11544: LD_INT 46
11546: PPUSH
11547: LD_VAR 0 3
11551: PPUSH
11552: LD_INT 1
11554: PPUSH
11555: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11559: LD_INT 47
11561: PPUSH
11562: LD_VAR 0 3
11566: PPUSH
11567: LD_INT 1
11569: PPUSH
11570: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11574: LD_INT 1
11576: PPUSH
11577: LD_VAR 0 3
11581: PPUSH
11582: LD_INT 1
11584: PPUSH
11585: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11589: LD_INT 2
11591: PPUSH
11592: LD_VAR 0 3
11596: PPUSH
11597: LD_INT 1
11599: PPUSH
11600: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11604: LD_INT 11
11606: PPUSH
11607: LD_VAR 0 3
11611: PPUSH
11612: LD_INT 1
11614: PPUSH
11615: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11619: LD_INT 20
11621: PPUSH
11622: LD_VAR 0 3
11626: PPUSH
11627: LD_INT 1
11629: PPUSH
11630: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11634: LD_INT 48
11636: PPUSH
11637: LD_VAR 0 3
11641: PPUSH
11642: LD_INT 1
11644: PPUSH
11645: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11649: LD_INT 49
11651: PPUSH
11652: LD_VAR 0 3
11656: PPUSH
11657: LD_INT 1
11659: PPUSH
11660: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
11664: LD_INT 50
11666: PPUSH
11667: LD_VAR 0 3
11671: PPUSH
11672: LD_INT 1
11674: PPUSH
11675: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11679: LD_INT 69
11681: PPUSH
11682: LD_VAR 0 3
11686: PPUSH
11687: LD_INT 1
11689: PPUSH
11690: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11694: LD_INT 39
11696: PPUSH
11697: LD_VAR 0 3
11701: PPUSH
11702: LD_INT 1
11704: PPUSH
11705: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11709: LD_INT 34
11711: PPUSH
11712: LD_VAR 0 3
11716: PPUSH
11717: LD_INT 1
11719: PPUSH
11720: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11724: LD_INT 42
11726: PPUSH
11727: LD_VAR 0 3
11731: PPUSH
11732: LD_INT 1
11734: PPUSH
11735: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11739: LD_INT 44
11741: PPUSH
11742: LD_VAR 0 3
11746: PPUSH
11747: LD_INT 1
11749: PPUSH
11750: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11754: LD_INT 41
11756: PPUSH
11757: LD_VAR 0 3
11761: PPUSH
11762: LD_INT 1
11764: PPUSH
11765: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
11769: LD_INT 13
11771: PPUSH
11772: LD_VAR 0 3
11776: PPUSH
11777: LD_INT 1
11779: PPUSH
11780: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11784: LD_INT 40
11786: PPUSH
11787: LD_VAR 0 3
11791: PPUSH
11792: LD_INT 1
11794: PPUSH
11795: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11799: LD_INT 43
11801: PPUSH
11802: LD_VAR 0 3
11806: PPUSH
11807: LD_INT 1
11809: PPUSH
11810: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11814: LD_INT 70
11816: PPUSH
11817: LD_VAR 0 3
11821: PPUSH
11822: LD_INT 1
11824: PPUSH
11825: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
11829: LD_INT 23
11831: PPUSH
11832: LD_VAR 0 3
11836: PPUSH
11837: LD_INT 1
11839: PPUSH
11840: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11844: LD_INT 51
11846: PPUSH
11847: LD_VAR 0 3
11851: PPUSH
11852: LD_INT 1
11854: PPUSH
11855: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11859: LD_INT 52
11861: PPUSH
11862: LD_VAR 0 3
11866: PPUSH
11867: LD_INT 1
11869: PPUSH
11870: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11874: LD_INT 6
11876: PPUSH
11877: LD_VAR 0 3
11881: PPUSH
11882: LD_INT 1
11884: PPUSH
11885: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11889: LD_INT 15
11891: PPUSH
11892: LD_VAR 0 3
11896: PPUSH
11897: LD_INT 1
11899: PPUSH
11900: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11904: LD_INT 7
11906: PPUSH
11907: LD_VAR 0 3
11911: PPUSH
11912: LD_INT 1
11914: PPUSH
11915: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11919: LD_INT 12
11921: PPUSH
11922: LD_VAR 0 3
11926: PPUSH
11927: LD_INT 1
11929: PPUSH
11930: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
11934: LD_INT 10
11936: PPUSH
11937: LD_VAR 0 3
11941: PPUSH
11942: LD_INT 1
11944: PPUSH
11945: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11949: LD_INT 17
11951: PPUSH
11952: LD_VAR 0 3
11956: PPUSH
11957: LD_INT 1
11959: PPUSH
11960: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11964: LD_INT 18
11966: PPUSH
11967: LD_VAR 0 3
11971: PPUSH
11972: LD_INT 1
11974: PPUSH
11975: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11979: LD_INT 60
11981: PPUSH
11982: LD_VAR 0 3
11986: PPUSH
11987: LD_INT 1
11989: PPUSH
11990: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
11994: LD_INT 61
11996: PPUSH
11997: LD_VAR 0 3
12001: PPUSH
12002: LD_INT 1
12004: PPUSH
12005: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12009: LD_INT 32
12011: PPUSH
12012: LD_VAR 0 3
12016: PPUSH
12017: LD_INT 1
12019: PPUSH
12020: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
12024: LD_INT 27
12026: PPUSH
12027: LD_VAR 0 3
12031: PPUSH
12032: LD_INT 1
12034: PPUSH
12035: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
12039: LD_INT 36
12041: PPUSH
12042: LD_VAR 0 3
12046: PPUSH
12047: LD_INT 1
12049: PPUSH
12050: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
12054: LD_INT 33
12056: PPUSH
12057: LD_VAR 0 3
12061: PPUSH
12062: LD_INT 1
12064: PPUSH
12065: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12069: LD_INT 9
12071: PPUSH
12072: LD_VAR 0 3
12076: PPUSH
12077: LD_INT 1
12079: PPUSH
12080: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
12084: LD_INT 38
12086: PPUSH
12087: LD_VAR 0 3
12091: PPUSH
12092: LD_INT 1
12094: PPUSH
12095: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12099: LD_INT 57
12101: PPUSH
12102: LD_VAR 0 3
12106: PPUSH
12107: LD_INT 1
12109: PPUSH
12110: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
12114: LD_INT 58
12116: PPUSH
12117: LD_VAR 0 3
12121: PPUSH
12122: LD_INT 1
12124: PPUSH
12125: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
12129: LD_INT 28
12131: PPUSH
12132: LD_VAR 0 3
12136: PPUSH
12137: LD_INT 1
12139: PPUSH
12140: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
12144: LD_INT 29
12146: PPUSH
12147: LD_VAR 0 3
12151: PPUSH
12152: LD_INT 1
12154: PPUSH
12155: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12159: LD_INT 30
12161: PPUSH
12162: LD_VAR 0 3
12166: PPUSH
12167: LD_INT 1
12169: PPUSH
12170: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12174: LD_INT 37
12176: PPUSH
12177: LD_VAR 0 3
12181: PPUSH
12182: LD_INT 1
12184: PPUSH
12185: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12189: LD_INT 63
12191: PPUSH
12192: LD_VAR 0 3
12196: PPUSH
12197: LD_INT 1
12199: PPUSH
12200: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
12204: LD_INT 64
12206: PPUSH
12207: LD_VAR 0 3
12211: PPUSH
12212: LD_INT 1
12214: PPUSH
12215: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12219: LD_INT 3
12221: PPUSH
12222: LD_VAR 0 3
12226: PPUSH
12227: LD_INT 1
12229: PPUSH
12230: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12234: LD_INT 4
12236: PPUSH
12237: LD_VAR 0 3
12241: PPUSH
12242: LD_INT 1
12244: PPUSH
12245: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12249: LD_INT 5
12251: PPUSH
12252: LD_VAR 0 3
12256: PPUSH
12257: LD_INT 1
12259: PPUSH
12260: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
12264: LD_INT 8
12266: PPUSH
12267: LD_VAR 0 3
12271: PPUSH
12272: LD_INT 1
12274: PPUSH
12275: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12279: LD_INT 66
12281: PPUSH
12282: LD_VAR 0 3
12286: PPUSH
12287: LD_INT 1
12289: PPUSH
12290: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
12294: LD_INT 67
12296: PPUSH
12297: LD_VAR 0 3
12301: PPUSH
12302: LD_INT 1
12304: PPUSH
12305: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12309: LD_INT 21
12311: PPUSH
12312: LD_VAR 0 3
12316: PPUSH
12317: LD_INT 1
12319: PPUSH
12320: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12324: LD_INT 22
12326: PPUSH
12327: LD_VAR 0 3
12331: PPUSH
12332: LD_INT 1
12334: PPUSH
12335: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12339: LD_INT 19
12341: PPUSH
12342: LD_VAR 0 3
12346: PPUSH
12347: LD_INT 1
12349: PPUSH
12350: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
12354: LD_INT 26
12356: PPUSH
12357: LD_VAR 0 3
12361: PPUSH
12362: LD_INT 1
12364: PPUSH
12365: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12369: LD_INT 54
12371: PPUSH
12372: LD_VAR 0 3
12376: PPUSH
12377: LD_INT 1
12379: PPUSH
12380: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12384: LD_INT 55
12386: PPUSH
12387: LD_VAR 0 3
12391: PPUSH
12392: LD_INT 1
12394: PPUSH
12395: CALL_OW 322
// for i = 0 to 39 do
12399: LD_ADDR_VAR 0 4
12403: PUSH
12404: DOUBLE
12405: LD_INT 0
12407: DEC
12408: ST_TO_ADDR
12409: LD_INT 39
12411: PUSH
12412: FOR_TO
12413: IFFALSE 12434
// SetRestrict ( i , side , true ) ;
12415: LD_VAR 0 4
12419: PPUSH
12420: LD_VAR 0 3
12424: PPUSH
12425: LD_INT 1
12427: PPUSH
12428: CALL_OW 324
12432: GO 12412
12434: POP
12435: POP
// end ; else
12436: GO 12513
12438: POP
// begin for i = 1 to 73 do
12439: LD_ADDR_VAR 0 4
12443: PUSH
12444: DOUBLE
12445: LD_INT 1
12447: DEC
12448: ST_TO_ADDR
12449: LD_INT 73
12451: PUSH
12452: FOR_TO
12453: IFFALSE 12474
// SetTech ( i , side , state_enabled ) ;
12455: LD_VAR 0 4
12459: PPUSH
12460: LD_VAR 0 3
12464: PPUSH
12465: LD_INT 1
12467: PPUSH
12468: CALL_OW 322
12472: GO 12452
12474: POP
12475: POP
// for i = 0 to 39 do
12476: LD_ADDR_VAR 0 4
12480: PUSH
12481: DOUBLE
12482: LD_INT 0
12484: DEC
12485: ST_TO_ADDR
12486: LD_INT 39
12488: PUSH
12489: FOR_TO
12490: IFFALSE 12511
// SetRestrict ( i , side , true ) ;
12492: LD_VAR 0 4
12496: PPUSH
12497: LD_VAR 0 3
12501: PPUSH
12502: LD_INT 1
12504: PPUSH
12505: CALL_OW 324
12509: GO 12489
12511: POP
12512: POP
// end ; end ; end ;
12513: GO 8518
12515: POP
12516: POP
// end ; end_of_file
12517: LD_VAR 0 2
12521: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
12522: LD_INT 0
12524: PPUSH
12525: PPUSH
12526: PPUSH
12527: PPUSH
12528: PPUSH
12529: PPUSH
12530: PPUSH
12531: PPUSH
12532: PPUSH
// for i := 1 to 8 do
12533: LD_ADDR_VAR 0 2
12537: PUSH
12538: DOUBLE
12539: LD_INT 1
12541: DEC
12542: ST_TO_ADDR
12543: LD_INT 8
12545: PUSH
12546: FOR_TO
12547: IFFALSE 12931
// begin if Side_Positions [ i ] then
12549: LD_EXP 34
12553: PUSH
12554: LD_VAR 0 2
12558: ARRAY
12559: IFFALSE 12929
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
12561: LD_ADDR_VAR 0 7
12565: PUSH
12566: LD_INT 22
12568: PUSH
12569: LD_VAR 0 2
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: PUSH
12578: LD_INT 21
12580: PUSH
12581: LD_INT 1
12583: PUSH
12584: EMPTY
12585: LIST
12586: LIST
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: PPUSH
12592: CALL_OW 69
12596: PUSH
12597: LD_INT 0
12599: PLUS
12600: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12601: LD_ADDR_VAR 0 9
12605: PUSH
12606: LD_INT 22
12608: PUSH
12609: LD_VAR 0 2
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: PUSH
12618: LD_INT 2
12620: PUSH
12621: LD_INT 30
12623: PUSH
12624: LD_INT 0
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: PUSH
12631: LD_INT 30
12633: PUSH
12634: LD_INT 1
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: PUSH
12641: EMPTY
12642: LIST
12643: LIST
12644: LIST
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PPUSH
12650: CALL_OW 69
12654: ST_TO_ADDR
// crates := 0 ;
12655: LD_ADDR_VAR 0 4
12659: PUSH
12660: LD_INT 0
12662: ST_TO_ADDR
// oil := 0 ;
12663: LD_ADDR_VAR 0 5
12667: PUSH
12668: LD_INT 0
12670: ST_TO_ADDR
// sib := 0 ;
12671: LD_ADDR_VAR 0 6
12675: PUSH
12676: LD_INT 0
12678: ST_TO_ADDR
// if bases then
12679: LD_VAR 0 9
12683: IFFALSE 12789
// begin for j in bases do
12685: LD_ADDR_VAR 0 3
12689: PUSH
12690: LD_VAR 0 9
12694: PUSH
12695: FOR_IN
12696: IFFALSE 12787
// begin base := GetBase ( j ) ;
12698: LD_ADDR_VAR 0 8
12702: PUSH
12703: LD_VAR 0 3
12707: PPUSH
12708: CALL_OW 274
12712: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
12713: LD_ADDR_VAR 0 4
12717: PUSH
12718: LD_VAR 0 4
12722: PUSH
12723: LD_VAR 0 8
12727: PPUSH
12728: LD_INT 1
12730: PPUSH
12731: CALL_OW 275
12735: PLUS
12736: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
12737: LD_ADDR_VAR 0 5
12741: PUSH
12742: LD_VAR 0 5
12746: PUSH
12747: LD_VAR 0 8
12751: PPUSH
12752: LD_INT 2
12754: PPUSH
12755: CALL_OW 275
12759: PLUS
12760: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
12761: LD_ADDR_VAR 0 6
12765: PUSH
12766: LD_VAR 0 6
12770: PUSH
12771: LD_VAR 0 8
12775: PPUSH
12776: LD_INT 3
12778: PPUSH
12779: CALL_OW 275
12783: PLUS
12784: ST_TO_ADDR
// end ;
12785: GO 12695
12787: POP
12788: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
12789: LD_STRING setSpecText(
12791: PUSH
12792: LD_VAR 0 2
12796: STR
12797: PUSH
12798: LD_STRING ,
12800: STR
12801: PUSH
12802: LD_INT 2
12804: STR
12805: PUSH
12806: LD_STRING ,
12808: STR
12809: PUSH
12810: LD_VAR 0 4
12814: STR
12815: PUSH
12816: LD_STRING )
12818: STR
12819: PPUSH
12820: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
12824: LD_STRING setSpecText(
12826: PUSH
12827: LD_VAR 0 2
12831: STR
12832: PUSH
12833: LD_STRING ,
12835: STR
12836: PUSH
12837: LD_INT 3
12839: STR
12840: PUSH
12841: LD_STRING ,
12843: STR
12844: PUSH
12845: LD_VAR 0 5
12849: STR
12850: PUSH
12851: LD_STRING )
12853: STR
12854: PPUSH
12855: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
12859: LD_STRING setSpecText(
12861: PUSH
12862: LD_VAR 0 2
12866: STR
12867: PUSH
12868: LD_STRING ,
12870: STR
12871: PUSH
12872: LD_INT 4
12874: STR
12875: PUSH
12876: LD_STRING ,
12878: STR
12879: PUSH
12880: LD_VAR 0 6
12884: STR
12885: PUSH
12886: LD_STRING )
12888: STR
12889: PPUSH
12890: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
12894: LD_STRING setSpecText(
12896: PUSH
12897: LD_VAR 0 2
12901: STR
12902: PUSH
12903: LD_STRING ,
12905: STR
12906: PUSH
12907: LD_INT 5
12909: STR
12910: PUSH
12911: LD_STRING ,
12913: STR
12914: PUSH
12915: LD_VAR 0 7
12919: STR
12920: PUSH
12921: LD_STRING )
12923: STR
12924: PPUSH
12925: CALL_OW 559
// end ; end ;
12929: GO 12546
12931: POP
12932: POP
// end ;
12933: LD_VAR 0 1
12937: RET
// every 0 0$1 do
12938: GO 12940
12940: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
12941: LD_STRING setSpecLogoNumber(
12943: PUSH
12944: LD_INT 2
12946: STR
12947: PUSH
12948: LD_STRING ,
12950: STR
12951: PUSH
12952: LD_INT 1
12954: STR
12955: PUSH
12956: LD_STRING )
12958: STR
12959: PPUSH
12960: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
12964: LD_STRING setSpecLogoNumber(
12966: PUSH
12967: LD_INT 3
12969: STR
12970: PUSH
12971: LD_STRING ,
12973: STR
12974: PUSH
12975: LD_INT 2
12977: STR
12978: PUSH
12979: LD_STRING )
12981: STR
12982: PPUSH
12983: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
12987: LD_STRING setSpecLogoNumber(
12989: PUSH
12990: LD_INT 4
12992: STR
12993: PUSH
12994: LD_STRING ,
12996: STR
12997: PUSH
12998: LD_INT 3
13000: STR
13001: PUSH
13002: LD_STRING )
13004: STR
13005: PPUSH
13006: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
13010: LD_STRING setSpecLogoNumber(
13012: PUSH
13013: LD_INT 5
13015: STR
13016: PUSH
13017: LD_STRING ,
13019: STR
13020: PUSH
13021: LD_INT 4
13023: STR
13024: PUSH
13025: LD_STRING )
13027: STR
13028: PPUSH
13029: CALL_OW 559
// end ;
13033: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
13034: LD_INT 2
13036: PUSH
13037: LD_INT 30
13039: PUSH
13040: LD_INT 0
13042: PUSH
13043: EMPTY
13044: LIST
13045: LIST
13046: PUSH
13047: LD_INT 30
13049: PUSH
13050: LD_INT 1
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: LIST
13061: PPUSH
13062: CALL_OW 69
13066: IFFALSE 13076
13068: GO 13070
13070: DISABLE
// begin enable ;
13071: ENABLE
// UpdateSpectatorBar ;
13072: CALL 12522 0 0
// end ; end_of_file
13076: END
// var respawn , inqueue ; export function init_respawning ; begin
13077: LD_INT 0
13079: PPUSH
// respawn := Rand ( 1 , 8 ) ;
13080: LD_ADDR_LOC 11
13084: PUSH
13085: LD_INT 1
13087: PPUSH
13088: LD_INT 8
13090: PPUSH
13091: CALL_OW 12
13095: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13096: LD_ADDR_LOC 12
13100: PUSH
13101: LD_INT 0
13103: PUSH
13104: LD_INT 0
13106: PUSH
13107: LD_INT 0
13109: PUSH
13110: LD_INT 0
13112: PUSH
13113: LD_INT 0
13115: PUSH
13116: LD_INT 0
13118: PUSH
13119: LD_INT 0
13121: PUSH
13122: LD_INT 0
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: ST_TO_ADDR
// end ;
13135: LD_VAR 0 1
13139: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
13140: GO 13142
13142: DISABLE
13143: LD_INT 0
13145: PPUSH
13146: PPUSH
13147: PPUSH
// begin if respawning_time_max = 0 then
13148: LD_EXP 26
13152: PUSH
13153: LD_INT 0
13155: EQUAL
13156: IFFALSE 13160
// exit ;
13158: GO 13568
// if respawn = 8 then
13160: LD_LOC 11
13164: PUSH
13165: LD_INT 8
13167: EQUAL
13168: IFFALSE 13180
// respawn := 1 else
13170: LD_ADDR_LOC 11
13174: PUSH
13175: LD_INT 1
13177: ST_TO_ADDR
13178: GO 13194
// respawn := respawn + 1 ;
13180: LD_ADDR_LOC 11
13184: PUSH
13185: LD_LOC 11
13189: PUSH
13190: LD_INT 1
13192: PLUS
13193: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
13194: LD_EXP 34
13198: PUSH
13199: LD_LOC 11
13203: ARRAY
13204: PUSH
13205: LD_LOC 12
13209: PUSH
13210: LD_LOC 11
13214: ARRAY
13215: NOT
13216: AND
13217: IFFALSE 13567
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
13219: LD_ADDR_VAR 0 1
13223: PUSH
13224: LD_INT 21
13226: PUSH
13227: LD_INT 1
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: PUSH
13234: LD_INT 22
13236: PUSH
13237: LD_LOC 11
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: PUSH
13246: LD_INT 3
13248: PUSH
13249: LD_INT 23
13251: PUSH
13252: LD_INT 0
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: PPUSH
13265: CALL_OW 69
13269: ST_TO_ADDR
// if n < number_of_people then
13270: LD_VAR 0 1
13274: PUSH
13275: LD_EXP 17
13279: LESS
13280: IFFALSE 13564
// begin aktresp := respawn ;
13282: LD_ADDR_VAR 0 3
13286: PUSH
13287: LD_LOC 11
13291: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
13292: LD_ADDR_LOC 12
13296: PUSH
13297: LD_LOC 12
13301: PPUSH
13302: LD_VAR 0 3
13306: PPUSH
13307: LD_INT 1
13309: PPUSH
13310: CALL_OW 1
13314: ST_TO_ADDR
// enable ;
13315: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
13316: LD_EXP 25
13320: PPUSH
13321: LD_EXP 26
13325: PPUSH
13326: CALL_OW 12
13330: PPUSH
13331: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
13335: LD_ADDR_LOC 12
13339: PUSH
13340: LD_LOC 12
13344: PPUSH
13345: LD_VAR 0 3
13349: PPUSH
13350: LD_INT 0
13352: PPUSH
13353: CALL_OW 1
13357: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
13358: LD_ADDR_VAR 0 2
13362: PUSH
13363: LD_INT 21
13365: PUSH
13366: LD_INT 3
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: PUSH
13373: LD_INT 2
13375: PUSH
13376: LD_INT 30
13378: PUSH
13379: LD_INT 0
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: PUSH
13386: LD_INT 30
13388: PUSH
13389: LD_INT 1
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: LIST
13400: PUSH
13401: LD_INT 50
13403: PUSH
13404: EMPTY
13405: LIST
13406: PUSH
13407: LD_INT 22
13409: PUSH
13410: LD_VAR 0 3
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: PPUSH
13425: CALL_OW 69
13429: ST_TO_ADDR
// if dep = 0 then
13430: LD_VAR 0 2
13434: PUSH
13435: LD_INT 0
13437: EQUAL
13438: IFFALSE 13442
// exit ;
13440: GO 13568
// hc_name :=  ;
13442: LD_ADDR_OWVAR 26
13446: PUSH
13447: LD_STRING 
13449: ST_TO_ADDR
// hc_importance := 0 ;
13450: LD_ADDR_OWVAR 32
13454: PUSH
13455: LD_INT 0
13457: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
13458: LD_INT 0
13460: PPUSH
13461: LD_INT 0
13463: PPUSH
13464: LD_EXP 18
13468: PUSH
13469: LD_INT 2
13471: DIV
13472: PPUSH
13473: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
13477: LD_ADDR_OWVAR 21
13481: PUSH
13482: LD_EXP 35
13486: PUSH
13487: LD_VAR 0 3
13491: ARRAY
13492: ST_TO_ADDR
// uc_side := aktresp ;
13493: LD_ADDR_OWVAR 20
13497: PUSH
13498: LD_VAR 0 3
13502: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
13503: LD_ADDR_VAR 0 2
13507: PUSH
13508: LD_VAR 0 2
13512: PUSH
13513: LD_INT 1
13515: PPUSH
13516: LD_VAR 0 2
13520: PPUSH
13521: CALL_OW 12
13525: ARRAY
13526: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
13527: CALL_OW 44
13531: PPUSH
13532: LD_VAR 0 2
13536: PPUSH
13537: CALL_OW 250
13541: PPUSH
13542: LD_VAR 0 2
13546: PPUSH
13547: CALL_OW 251
13551: PPUSH
13552: LD_INT 7
13554: PPUSH
13555: LD_INT 1
13557: PPUSH
13558: CALL_OW 50
// end else
13562: GO 13565
// enable ;
13564: ENABLE
// end else
13565: GO 13568
// enable ;
13567: ENABLE
// end ; end_of_file
13568: PPOPN 3
13570: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
13571: LD_INT 0
13573: PPUSH
13574: PPUSH
13575: PPUSH
// BuildUpTime_Delay = 0 ;
13576: LD_ADDR_EXP 58
13580: PUSH
13581: LD_INT 0
13583: ST_TO_ADDR
// if not def_builduptime then
13584: LD_EXP 14
13588: NOT
13589: IFFALSE 13593
// exit ;
13591: GO 13776
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
13593: LD_ADDR_EXP 58
13597: PUSH
13598: LD_INT 8400
13600: PUSH
13601: LD_INT 2100
13603: PUSH
13604: LD_EXP 14
13608: MUL
13609: PLUS
13610: ST_TO_ADDR
// BuildUpTimeActive := true ;
13611: LD_ADDR_EXP 57
13615: PUSH
13616: LD_INT 1
13618: ST_TO_ADDR
// for i := 1 to 8 do
13619: LD_ADDR_VAR 0 2
13623: PUSH
13624: DOUBLE
13625: LD_INT 1
13627: DEC
13628: ST_TO_ADDR
13629: LD_INT 8
13631: PUSH
13632: FOR_TO
13633: IFFALSE 13774
// if Side_Positions [ i ] then
13635: LD_EXP 34
13639: PUSH
13640: LD_VAR 0 2
13644: ARRAY
13645: IFFALSE 13772
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
13647: LD_EXP 56
13651: PUSH
13652: LD_EXP 34
13656: PUSH
13657: LD_VAR 0 2
13661: ARRAY
13662: ARRAY
13663: PPUSH
13664: LD_INT 5
13666: PPUSH
13667: CALL_OW 424
// for j := 1 to 8 do
13671: LD_ADDR_VAR 0 3
13675: PUSH
13676: DOUBLE
13677: LD_INT 1
13679: DEC
13680: ST_TO_ADDR
13681: LD_INT 8
13683: PUSH
13684: FOR_TO
13685: IFFALSE 13770
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
13687: LD_EXP 34
13691: PUSH
13692: LD_VAR 0 3
13696: ARRAY
13697: PUSH
13698: LD_EXP 32
13702: PUSH
13703: LD_VAR 0 2
13707: ARRAY
13708: PUSH
13709: LD_EXP 32
13713: PUSH
13714: LD_VAR 0 3
13718: ARRAY
13719: NONEQUAL
13720: PUSH
13721: LD_EXP 38
13725: NOT
13726: PUSH
13727: LD_VAR 0 2
13731: PUSH
13732: LD_VAR 0 3
13736: NONEQUAL
13737: AND
13738: OR
13739: AND
13740: IFFALSE 13768
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
13742: LD_VAR 0 3
13746: PPUSH
13747: LD_EXP 56
13751: PUSH
13752: LD_EXP 34
13756: PUSH
13757: LD_VAR 0 2
13761: ARRAY
13762: ARRAY
13763: PPUSH
13764: CALL_OW 333
13768: GO 13684
13770: POP
13771: POP
// end ;
13772: GO 13632
13774: POP
13775: POP
// end ;
13776: LD_VAR 0 1
13780: RET
// export function EndBuildUp ; var i , j ; begin
13781: LD_INT 0
13783: PPUSH
13784: PPUSH
13785: PPUSH
// BuildUpTimeActive := false ;
13786: LD_ADDR_EXP 57
13790: PUSH
13791: LD_INT 0
13793: ST_TO_ADDR
// for i := 1 to 8 do
13794: LD_ADDR_VAR 0 2
13798: PUSH
13799: DOUBLE
13800: LD_INT 1
13802: DEC
13803: ST_TO_ADDR
13804: LD_INT 8
13806: PUSH
13807: FOR_TO
13808: IFFALSE 13949
// if Side_Positions [ i ] then
13810: LD_EXP 34
13814: PUSH
13815: LD_VAR 0 2
13819: ARRAY
13820: IFFALSE 13947
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
13822: LD_EXP 56
13826: PUSH
13827: LD_EXP 34
13831: PUSH
13832: LD_VAR 0 2
13836: ARRAY
13837: ARRAY
13838: PPUSH
13839: LD_INT 0
13841: PPUSH
13842: CALL_OW 424
// for j := 1 to 8 do
13846: LD_ADDR_VAR 0 3
13850: PUSH
13851: DOUBLE
13852: LD_INT 1
13854: DEC
13855: ST_TO_ADDR
13856: LD_INT 8
13858: PUSH
13859: FOR_TO
13860: IFFALSE 13945
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
13862: LD_EXP 34
13866: PUSH
13867: LD_VAR 0 3
13871: ARRAY
13872: PUSH
13873: LD_EXP 32
13877: PUSH
13878: LD_VAR 0 2
13882: ARRAY
13883: PUSH
13884: LD_EXP 32
13888: PUSH
13889: LD_VAR 0 3
13893: ARRAY
13894: NONEQUAL
13895: PUSH
13896: LD_EXP 38
13900: NOT
13901: PUSH
13902: LD_VAR 0 2
13906: PUSH
13907: LD_VAR 0 3
13911: NONEQUAL
13912: AND
13913: OR
13914: AND
13915: IFFALSE 13943
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
13917: LD_VAR 0 3
13921: PPUSH
13922: LD_EXP 56
13926: PUSH
13927: LD_EXP 34
13931: PUSH
13932: LD_VAR 0 2
13936: ARRAY
13937: ARRAY
13938: PPUSH
13939: CALL_OW 334
13943: GO 13859
13945: POP
13946: POP
// end ;
13947: GO 13807
13949: POP
13950: POP
// end ;
13951: LD_VAR 0 1
13955: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
13956: LD_EXP 57
13960: IFFALSE 14135
13962: GO 13964
13964: DISABLE
13965: LD_INT 0
13967: PPUSH
13968: PPUSH
// begin for i := 1 to 8 do
13969: LD_ADDR_VAR 0 1
13973: PUSH
13974: DOUBLE
13975: LD_INT 1
13977: DEC
13978: ST_TO_ADDR
13979: LD_INT 8
13981: PUSH
13982: FOR_TO
13983: IFFALSE 14132
// if Side_Positions [ i ] then
13985: LD_EXP 34
13989: PUSH
13990: LD_VAR 0 1
13994: ARRAY
13995: IFFALSE 14130
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
13997: LD_ADDR_VAR 0 2
14001: PUSH
14002: LD_EXP 56
14006: PUSH
14007: LD_EXP 34
14011: PUSH
14012: LD_VAR 0 1
14016: ARRAY
14017: ARRAY
14018: PPUSH
14019: LD_INT 2
14021: PUSH
14022: LD_INT 21
14024: PUSH
14025: LD_INT 1
14027: PUSH
14028: EMPTY
14029: LIST
14030: LIST
14031: PUSH
14032: LD_INT 21
14034: PUSH
14035: LD_INT 2
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: LIST
14046: PUSH
14047: LD_INT 22
14049: PUSH
14050: LD_OWVAR 2
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: PUSH
14059: EMPTY
14060: LIST
14061: LIST
14062: PPUSH
14063: CALL_OW 70
14067: PUSH
14068: FOR_IN
14069: IFFALSE 14128
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
14071: LD_EXP 32
14075: PUSH
14076: LD_VAR 0 1
14080: ARRAY
14081: PUSH
14082: LD_EXP 32
14086: PUSH
14087: LD_OWVAR 2
14091: ARRAY
14092: NONEQUAL
14093: PUSH
14094: LD_EXP 38
14098: NOT
14099: PUSH
14100: LD_VAR 0 1
14104: PUSH
14105: LD_OWVAR 2
14109: NONEQUAL
14110: AND
14111: OR
14112: IFFALSE 14126
// ComMoveToArea ( un , BuildUpEscape ) ;
14114: LD_VAR 0 2
14118: PPUSH
14119: LD_INT 16
14121: PPUSH
14122: CALL_OW 113
14126: GO 14068
14128: POP
14129: POP
14130: GO 13982
14132: POP
14133: POP
// enable ;
14134: ENABLE
// end ;
14135: PPOPN 2
14137: END
// every 0 0$1 trigger def_builduptime do
14138: LD_EXP 14
14142: IFFALSE 14168
14144: GO 14146
14146: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
14147: LD_INT 8400
14149: PUSH
14150: LD_EXP 14
14154: PUSH
14155: LD_INT 2100
14157: MUL
14158: PLUS
14159: PPUSH
14160: CALL_OW 67
// EndBuildUp ;
14164: CALL 13781 0 0
// end ;
14168: END
