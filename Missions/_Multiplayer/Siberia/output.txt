// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_amount_of_siberit , def_public_score , def_siberite_bomb , def_builduptime , def_game_rules , def_sheik , def_mastodont ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id , def_win_rules , heroes , sheik , mastodont ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function read_multiplayer_and_game_parameters ; var i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// if Multiplayer then
   4: LD_OWVAR 4
   8: IFFALSE 72
// begin Game_Type := mp_game_type ;
  10: LD_ADDR_EXP 21
  14: PUSH
  15: LD_OWVAR 6
  19: ST_TO_ADDR
// Your_Side := mp_player_side ;
  20: LD_ADDR_OWVAR 2
  24: PUSH
  25: LD_OWVAR 7
  29: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  30: LD_ADDR_EXP 38
  34: PUSH
  35: LD_OWVAR 17
  39: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  40: LD_ADDR_EXP 35
  44: PUSH
  45: LD_OWVAR 15
  49: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
  50: LD_ADDR_EXP 39
  54: PUSH
  55: LD_OWVAR 16
  59: ST_TO_ADDR
// Teams := mp_teams ;
  60: LD_ADDR_EXP 36
  64: PUSH
  65: LD_OWVAR 12
  69: ST_TO_ADDR
// end else
  70: GO 293
// begin Game_Type := 1 ;
  72: LD_ADDR_EXP 21
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// Your_Side := 3 ;
  80: LD_ADDR_OWVAR 2
  84: PUSH
  85: LD_INT 3
  87: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
  88: LD_ADDR_EXP 38
  92: PUSH
  93: LD_INT 1
  95: PUSH
  96: LD_INT 2
  98: PUSH
  99: LD_INT 3
 101: PUSH
 102: LD_INT 4
 104: PUSH
 105: LD_INT 5
 107: PUSH
 108: LD_INT 6
 110: PUSH
 111: LD_INT 0
 113: PUSH
 114: LD_INT 0
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: LIST
 126: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 127: LD_ADDR_EXP 35
 131: PUSH
 132: LD_INT 1
 134: PUSH
 135: LD_INT 2
 137: PUSH
 138: LD_INT 3
 140: PUSH
 141: LD_INT 4
 143: PUSH
 144: LD_INT 5
 146: PUSH
 147: LD_INT 6
 149: PUSH
 150: LD_INT 0
 152: PUSH
 153: LD_INT 0
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: LIST
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 166: LD_ADDR_EXP 39
 170: PUSH
 171: LD_INT 1
 173: PUSH
 174: LD_INT 2
 176: PUSH
 177: LD_INT 3
 179: PUSH
 180: LD_INT 1
 182: PUSH
 183: LD_INT 2
 185: PUSH
 186: LD_INT 3
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 0
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: ST_TO_ADDR
// Side_Comps := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 205: LD_ADDR_EXP 37
 209: PUSH
 210: LD_INT 0
 212: PUSH
 213: LD_INT 0
 215: PUSH
 216: LD_INT 0
 218: PUSH
 219: LD_INT 0
 221: PUSH
 222: LD_INT 0
 224: PUSH
 225: LD_INT 0
 227: PUSH
 228: LD_INT 0
 230: PUSH
 231: LD_INT 0
 233: PUSH
 234: EMPTY
 235: LIST
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 244: LD_ADDR_EXP 36
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: EMPTY
 253: LIST
 254: PUSH
 255: LD_INT 2
 257: PUSH
 258: EMPTY
 259: LIST
 260: PUSH
 261: LD_INT 3
 263: PUSH
 264: EMPTY
 265: LIST
 266: PUSH
 267: LD_INT 4
 269: PUSH
 270: EMPTY
 271: LIST
 272: PUSH
 273: LD_INT 5
 275: PUSH
 276: EMPTY
 277: LIST
 278: PUSH
 279: LD_INT 6
 281: PUSH
 282: EMPTY
 283: LIST
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: LIST
 289: LIST
 290: LIST
 291: LIST
 292: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 293: LD_ADDR_EXP 40
 297: PUSH
 298: LD_EXP 35
 302: PUSH
 303: LD_INT 0
 305: PUSH
 306: EMPTY
 307: LIST
 308: DIFF
 309: PUSH
 310: LD_INT 1
 312: GREATER
 313: ST_TO_ADDR
// if Multiplayer then
 314: LD_OWVAR 4
 318: IFFALSE 564
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 320: LD_ADDR_EXP 1
 324: PUSH
 325: LD_INT 0
 327: PPUSH
 328: CALL_OW 426
 332: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 333: LD_ADDR_EXP 2
 337: PUSH
 338: LD_INT 1
 340: PPUSH
 341: CALL_OW 426
 345: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 346: LD_ADDR_EXP 3
 350: PUSH
 351: LD_INT 2
 353: PPUSH
 354: CALL_OW 426
 358: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 359: LD_ADDR_EXP 4
 363: PUSH
 364: LD_INT 3
 366: PPUSH
 367: CALL_OW 426
 371: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 372: LD_ADDR_EXP 5
 376: PUSH
 377: LD_INT 4
 379: PPUSH
 380: CALL_OW 426
 384: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 385: LD_ADDR_EXP 6
 389: PUSH
 390: LD_INT 5
 392: PPUSH
 393: CALL_OW 426
 397: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 398: LD_ADDR_EXP 7
 402: PUSH
 403: LD_INT 6
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 411: LD_ADDR_EXP 8
 415: PUSH
 416: LD_INT 10
 418: PPUSH
 419: CALL_OW 426
 423: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 424: LD_ADDR_EXP 9
 428: PUSH
 429: LD_INT 11
 431: PPUSH
 432: CALL_OW 426
 436: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 437: LD_ADDR_EXP 10
 441: PUSH
 442: LD_INT 12
 444: PPUSH
 445: CALL_OW 426
 449: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 450: LD_ADDR_EXP 11
 454: PUSH
 455: LD_INT 13
 457: PPUSH
 458: CALL_OW 426
 462: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 463: LD_ADDR_EXP 12
 467: PUSH
 468: LD_INT 14
 470: PPUSH
 471: CALL_OW 426
 475: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 476: LD_ADDR_EXP 13
 480: PUSH
 481: LD_INT 15
 483: PPUSH
 484: CALL_OW 426
 488: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 489: LD_ADDR_EXP 14
 493: PUSH
 494: LD_INT 16
 496: PPUSH
 497: CALL_OW 426
 501: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 502: LD_ADDR_EXP 15
 506: PUSH
 507: LD_INT 17
 509: PPUSH
 510: CALL_OW 426
 514: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 515: LD_ADDR_EXP 16
 519: PUSH
 520: LD_INT 20
 522: PPUSH
 523: CALL_OW 426
 527: ST_TO_ADDR
// def_game_rules := 0 ;
 528: LD_ADDR_EXP 17
 532: PUSH
 533: LD_INT 0
 535: ST_TO_ADDR
// def_sheik := GetMultiplayerSetting ( 22 ) ;
 536: LD_ADDR_EXP 18
 540: PUSH
 541: LD_INT 22
 543: PPUSH
 544: CALL_OW 426
 548: ST_TO_ADDR
// def_mastodont := GetMultiplayerSetting ( 23 ) ;
 549: LD_ADDR_EXP 19
 553: PUSH
 554: LD_INT 23
 556: PPUSH
 557: CALL_OW 426
 561: ST_TO_ADDR
// end else
 562: GO 720
// begin Randomize ;
 564: CALL_OW 10
// def_base_level := 2 ;
 568: LD_ADDR_EXP 1
 572: PUSH
 573: LD_INT 2
 575: ST_TO_ADDR
// def_amount_of_people := 0 ;
 576: LD_ADDR_EXP 2
 580: PUSH
 581: LD_INT 0
 583: ST_TO_ADDR
// def_skill_level := 1 ;
 584: LD_ADDR_EXP 3
 588: PUSH
 589: LD_INT 1
 591: ST_TO_ADDR
// def_starting_resources := 2 ;
 592: LD_ADDR_EXP 4
 596: PUSH
 597: LD_INT 2
 599: ST_TO_ADDR
// def_shipments_density := 1 ;
 600: LD_ADDR_EXP 5
 604: PUSH
 605: LD_INT 1
 607: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
 608: LD_ADDR_EXP 6
 612: PUSH
 613: LD_INT 1
 615: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
 616: LD_ADDR_EXP 7
 620: PUSH
 621: LD_INT 2
 623: ST_TO_ADDR
// def_shared_vision := 1 ;
 624: LD_ADDR_EXP 8
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// def_morale_flags := 1 ;
 632: LD_ADDR_EXP 9
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// def_siberite_detection := 1 ;
 640: LD_ADDR_EXP 10
 644: PUSH
 645: LD_INT 1
 647: ST_TO_ADDR
// def_people_respawning := 2 ;
 648: LD_ADDR_EXP 11
 652: PUSH
 653: LD_INT 2
 655: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 656: LD_ADDR_EXP 12
 660: PUSH
 661: LD_INT 3
 663: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 664: LD_ADDR_EXP 13
 668: PUSH
 669: LD_INT 0
 671: ST_TO_ADDR
// def_public_score := 0 ;
 672: LD_ADDR_EXP 14
 676: PUSH
 677: LD_INT 0
 679: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 680: LD_ADDR_EXP 15
 684: PUSH
 685: LD_INT 0
 687: ST_TO_ADDR
// def_builduptime := 1 ;
 688: LD_ADDR_EXP 16
 692: PUSH
 693: LD_INT 1
 695: ST_TO_ADDR
// def_game_rules := 0 ;
 696: LD_ADDR_EXP 17
 700: PUSH
 701: LD_INT 0
 703: ST_TO_ADDR
// def_sheik := 0 ;
 704: LD_ADDR_EXP 18
 708: PUSH
 709: LD_INT 0
 711: ST_TO_ADDR
// def_mastodont := 0 ;
 712: LD_ADDR_EXP 19
 716: PUSH
 717: LD_INT 0
 719: ST_TO_ADDR
// end ; if isSGUI then
 720: LD_OWVAR 83
 724: IFFALSE 730
// setMpTechs ( ) ;
 726: CALL 9342 0 0
// if ( Game_Type = 5 ) then
 730: LD_EXP 21
 734: PUSH
 735: LD_INT 5
 737: EQUAL
 738: IFFALSE 767
// begin def_base_level := 1 ;
 740: LD_ADDR_EXP 1
 744: PUSH
 745: LD_INT 1
 747: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 748: LD_ADDR_EXP 6
 752: PUSH
 753: LD_INT 0
 755: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
 756: LD_ADDR_EXP 7
 760: PUSH
 761: LD_INT 0
 763: ST_TO_ADDR
// disable ( 10 ) ;
 764: LD_INT 10
 766: DISABLE_MARKED
// end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 767: LD_ADDR_EXP 22
 771: PUSH
 772: LD_INT 0
 774: PUSH
 775: LD_INT 1
 777: PUSH
 778: LD_INT 1
 780: PUSH
 781: EMPTY
 782: LIST
 783: LIST
 784: LIST
 785: PUSH
 786: LD_EXP 1
 790: PUSH
 791: LD_INT 1
 793: PLUS
 794: ARRAY
 795: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 ] [ def_base_level + 1 ] ;
 796: LD_ADDR_EXP 23
 800: PUSH
 801: LD_INT 0
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: LD_INT 2
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: LIST
 814: PUSH
 815: LD_EXP 1
 819: PUSH
 820: LD_INT 1
 822: PLUS
 823: ARRAY
 824: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 825: LD_ADDR_EXP 24
 829: PUSH
 830: LD_INT 9
 832: PUSH
 833: LD_INT 12
 835: PUSH
 836: LD_INT 15
 838: PUSH
 839: LD_INT 24
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: LIST
 846: LIST
 847: PUSH
 848: LD_EXP 2
 852: PUSH
 853: LD_INT 1
 855: PLUS
 856: ARRAY
 857: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 , 8 ] [ def_skill_level + 1 ] ;
 858: LD_ADDR_EXP 25
 862: PUSH
 863: LD_INT 2
 865: PUSH
 866: LD_INT 3
 868: PUSH
 869: LD_INT 4
 871: PUSH
 872: LD_INT 5
 874: PUSH
 875: LD_INT 8
 877: PUSH
 878: EMPTY
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: LIST
 884: PUSH
 885: LD_EXP 3
 889: PUSH
 890: LD_INT 1
 892: PLUS
 893: ARRAY
 894: ST_TO_ADDR
// if ( Game_Type = 5 ) then
 895: LD_EXP 21
 899: PUSH
 900: LD_INT 5
 902: EQUAL
 903: IFFALSE 1021
// begin starting_resources := [ [ 1000 , 100 , 100 ] , [ 2000 , 200 , 200 ] , [ 5000 , 500 , 500 ] , [ 10000 , 1000 , 1000 ] , [ 25000 , 2500 , 2500 ] , [ 50000 , 5000 , 5000 ] ] [ def_starting_resources + 1 ] ;
 905: LD_ADDR_EXP 27
 909: PUSH
 910: LD_INT 1000
 912: PUSH
 913: LD_INT 100
 915: PUSH
 916: LD_INT 100
 918: PUSH
 919: EMPTY
 920: LIST
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 2000
 926: PUSH
 927: LD_INT 200
 929: PUSH
 930: LD_INT 200
 932: PUSH
 933: EMPTY
 934: LIST
 935: LIST
 936: LIST
 937: PUSH
 938: LD_INT 5000
 940: PUSH
 941: LD_INT 500
 943: PUSH
 944: LD_INT 500
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: PUSH
 952: LD_INT 10000
 954: PUSH
 955: LD_INT 1000
 957: PUSH
 958: LD_INT 1000
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: LIST
 965: PUSH
 966: LD_INT 25000
 968: PUSH
 969: LD_INT 2500
 971: PUSH
 972: LD_INT 2500
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: LIST
 979: PUSH
 980: LD_INT 50000
 982: PUSH
 983: LD_INT 5000
 985: PUSH
 986: LD_INT 5000
 988: PUSH
 989: EMPTY
 990: LIST
 991: LIST
 992: LIST
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: LIST
1000: LIST
1001: PUSH
1002: LD_EXP 4
1006: PUSH
1007: LD_INT 1
1009: PLUS
1010: ARRAY
1011: ST_TO_ADDR
// starting_crates := [ ] ;
1012: LD_ADDR_EXP 26
1016: PUSH
1017: EMPTY
1018: ST_TO_ADDR
// end else
1019: GO 1167
// begin starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1021: LD_ADDR_EXP 27
1025: PUSH
1026: LD_INT 0
1028: PUSH
1029: LD_INT 0
1031: PUSH
1032: LD_INT 0
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: LIST
1039: PUSH
1040: LD_INT 30
1042: PUSH
1043: LD_INT 0
1045: PUSH
1046: LD_INT 0
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: LIST
1053: PUSH
1054: LD_INT 50
1056: PUSH
1057: LD_INT 20
1059: PUSH
1060: LD_INT 0
1062: PUSH
1063: EMPTY
1064: LIST
1065: LIST
1066: LIST
1067: PUSH
1068: LD_INT 80
1070: PUSH
1071: LD_INT 40
1073: PUSH
1074: LD_INT 20
1076: PUSH
1077: EMPTY
1078: LIST
1079: LIST
1080: LIST
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: LD_EXP 4
1092: PUSH
1093: LD_INT 1
1095: PLUS
1096: ARRAY
1097: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1098: LD_ADDR_EXP 26
1102: PUSH
1103: LD_INT 10
1105: PUSH
1106: EMPTY
1107: LIST
1108: PUSH
1109: LD_INT 7
1111: PUSH
1112: LD_INT 14
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: PUSH
1119: LD_INT 6
1121: PUSH
1122: LD_INT 12
1124: PUSH
1125: LD_INT 18
1127: PUSH
1128: EMPTY
1129: LIST
1130: LIST
1131: LIST
1132: PUSH
1133: LD_INT 5
1135: PUSH
1136: LD_INT 10
1138: PUSH
1139: LD_INT 15
1141: PUSH
1142: LD_INT 20
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: LIST
1155: LIST
1156: PUSH
1157: LD_EXP 4
1161: PUSH
1162: LD_INT 1
1164: PLUS
1165: ARRAY
1166: ST_TO_ADDR
// end ; shipments_density := [ 150 , 125 , 100 , 50 ] [ def_shipments_density + 1 ] ;
1167: LD_ADDR_EXP 28
1171: PUSH
1172: LD_INT 150
1174: PUSH
1175: LD_INT 125
1177: PUSH
1178: LD_INT 100
1180: PUSH
1181: LD_INT 50
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: LIST
1188: LIST
1189: PUSH
1190: LD_EXP 5
1194: PUSH
1195: LD_INT 1
1197: PLUS
1198: ARRAY
1199: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1200: LD_ADDR_EXP 32
1204: PUSH
1205: LD_INT 0
1207: PUSH
1208: LD_INT 10500
1210: PUSH
1211: LD_INT 6300
1213: PUSH
1214: EMPTY
1215: LIST
1216: LIST
1217: LIST
1218: PUSH
1219: LD_EXP 11
1223: PUSH
1224: LD_INT 1
1226: PLUS
1227: ARRAY
1228: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1229: LD_ADDR_EXP 33
1233: PUSH
1234: LD_INT 0
1236: PUSH
1237: LD_INT 31500
1239: PUSH
1240: LD_INT 10500
1242: PUSH
1243: EMPTY
1244: LIST
1245: LIST
1246: LIST
1247: PUSH
1248: LD_EXP 11
1252: PUSH
1253: LD_INT 1
1255: PLUS
1256: ARRAY
1257: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1258: LD_ADDR_EXP 30
1262: PUSH
1263: LD_INT 0
1265: PUSH
1266: LD_INT 1
1268: PUSH
1269: LD_INT 2
1271: PUSH
1272: LD_INT 3
1274: PUSH
1275: EMPTY
1276: LIST
1277: LIST
1278: LIST
1279: LIST
1280: PUSH
1281: LD_EXP 12
1285: PUSH
1286: LD_INT 1
1288: PLUS
1289: ARRAY
1290: ST_TO_ADDR
// amount_of_siberit := [ 30 , 50 , 80 , 100 , 130 , 150 , 200 ] [ def_amount_of_siberit + 1 ] ;
1291: LD_ADDR_EXP 31
1295: PUSH
1296: LD_INT 30
1298: PUSH
1299: LD_INT 50
1301: PUSH
1302: LD_INT 80
1304: PUSH
1305: LD_INT 100
1307: PUSH
1308: LD_INT 130
1310: PUSH
1311: LD_INT 150
1313: PUSH
1314: LD_INT 200
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: LIST
1324: LIST
1325: PUSH
1326: LD_EXP 13
1330: PUSH
1331: LD_INT 1
1333: PLUS
1334: ARRAY
1335: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1336: LD_ADDR_EXP 29
1340: PUSH
1341: LD_INT 1
1343: NEG
1344: PUSH
1345: LD_INT 350
1347: PUSH
1348: LD_INT 700
1350: PUSH
1351: LD_INT 1400
1353: PUSH
1354: LD_INT 0
1356: PUSH
1357: EMPTY
1358: LIST
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: PUSH
1364: LD_EXP 9
1368: PUSH
1369: LD_INT 1
1371: PLUS
1372: ARRAY
1373: ST_TO_ADDR
// battle_flags_id := [ ] ;
1374: LD_ADDR_EXP 48
1378: PUSH
1379: EMPTY
1380: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1381: LD_ADDR_EXP 34
1385: PUSH
1386: LD_INT 0
1388: PUSH
1389: LD_INT 1
1391: PUSH
1392: LD_INT 63000
1394: PUSH
1395: LD_INT 126000
1397: PUSH
1398: LD_INT 189000
1400: PUSH
1401: LD_INT 252000
1403: PUSH
1404: EMPTY
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: PUSH
1412: LD_EXP 15
1416: PUSH
1417: LD_INT 1
1419: PLUS
1420: ARRAY
1421: ST_TO_ADDR
// if ( Game_Type = 12 ) then
1422: LD_EXP 21
1426: PUSH
1427: LD_INT 12
1429: EQUAL
1430: IFFALSE 1488
// begin sheik := [ 0 , 1 ] [ def_sheik + 1 ] ;
1432: LD_ADDR_EXP 51
1436: PUSH
1437: LD_INT 0
1439: PUSH
1440: LD_INT 1
1442: PUSH
1443: EMPTY
1444: LIST
1445: LIST
1446: PUSH
1447: LD_EXP 18
1451: PUSH
1452: LD_INT 1
1454: PLUS
1455: ARRAY
1456: ST_TO_ADDR
// mastodont := [ 0 , 1 , 2 ] [ def_mastodont + 1 ] end else
1457: LD_ADDR_EXP 52
1461: PUSH
1462: LD_INT 0
1464: PUSH
1465: LD_INT 1
1467: PUSH
1468: LD_INT 2
1470: PUSH
1471: EMPTY
1472: LIST
1473: LIST
1474: LIST
1475: PUSH
1476: LD_EXP 19
1480: PUSH
1481: LD_INT 1
1483: PLUS
1484: ARRAY
1485: ST_TO_ADDR
1486: GO 1504
// begin sheik := 0 ;
1488: LD_ADDR_EXP 51
1492: PUSH
1493: LD_INT 0
1495: ST_TO_ADDR
// mastodont := 0 ;
1496: LD_ADDR_EXP 52
1500: PUSH
1501: LD_INT 0
1503: ST_TO_ADDR
// end ; end ;
1504: LD_VAR 0 1
1508: RET
// function init_map ; var i , j ; begin
1509: LD_INT 0
1511: PPUSH
1512: PPUSH
1513: PPUSH
// normal_oil_deposits_locations := [ [ 101 , 187 ] , [ 18 , 26 ] , [ 50 , 89 ] , [ 123 , 3 ] , [ 182 , 69 ] , [ 231 , 174 ] ] ;
1514: LD_ADDR_EXP 44
1518: PUSH
1519: LD_INT 101
1521: PUSH
1522: LD_INT 187
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 18
1531: PUSH
1532: LD_INT 26
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 50
1541: PUSH
1542: LD_INT 89
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 123
1551: PUSH
1552: LD_INT 3
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 182
1561: PUSH
1562: LD_INT 69
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 231
1571: PUSH
1572: LD_INT 174
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 101 , 187 ] , [ 108 , 183 ] ] , [ [ 18 , 26 ] , [ 7 , 8 ] ] , [ [ 50 , 89 ] , [ 62 , 99 ] ] , [ [ 123 , 3 ] , [ 149 , 18 ] ] , [ [ 182 , 69 ] , [ 202 , 90 ] ] , [ [ 231 , 174 ] , [ 239 , 164 ] ] ] ;
1587: LD_ADDR_EXP 45
1591: PUSH
1592: LD_INT 101
1594: PUSH
1595: LD_INT 187
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: PUSH
1602: LD_INT 108
1604: PUSH
1605: LD_INT 183
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: PUSH
1616: LD_INT 18
1618: PUSH
1619: LD_INT 26
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PUSH
1626: LD_INT 7
1628: PUSH
1629: LD_INT 8
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: PUSH
1640: LD_INT 50
1642: PUSH
1643: LD_INT 89
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: LD_INT 62
1652: PUSH
1653: LD_INT 99
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 123
1666: PUSH
1667: LD_INT 3
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: PUSH
1674: LD_INT 149
1676: PUSH
1677: LD_INT 18
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: LD_INT 182
1690: PUSH
1691: LD_INT 69
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: PUSH
1698: LD_INT 202
1700: PUSH
1701: LD_INT 90
1703: PUSH
1704: EMPTY
1705: LIST
1706: LIST
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: PUSH
1712: LD_INT 231
1714: PUSH
1715: LD_INT 174
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: PUSH
1722: LD_INT 239
1724: PUSH
1725: LD_INT 164
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 96 , 185 ] , [ 21 , 29 ] , [ 50 , 85 ] , [ 128 , 2 ] , [ 186 , 72 ] , [ 234 , 174 ] ] ;
1744: LD_ADDR_EXP 46
1748: PUSH
1749: LD_INT 96
1751: PUSH
1752: LD_INT 185
1754: PUSH
1755: EMPTY
1756: LIST
1757: LIST
1758: PUSH
1759: LD_INT 21
1761: PUSH
1762: LD_INT 29
1764: PUSH
1765: EMPTY
1766: LIST
1767: LIST
1768: PUSH
1769: LD_INT 50
1771: PUSH
1772: LD_INT 85
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: PUSH
1779: LD_INT 128
1781: PUSH
1782: LD_INT 2
1784: PUSH
1785: EMPTY
1786: LIST
1787: LIST
1788: PUSH
1789: LD_INT 186
1791: PUSH
1792: LD_INT 72
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: PUSH
1799: LD_INT 234
1801: PUSH
1802: LD_INT 174
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 96 , 185 ] , [ 109 , 179 ] ] , [ [ 21 , 29 ] , [ 9 , 5 ] ] , [ [ 50 , 85 ] , [ 66 , 102 ] ] , [ [ 128 , 2 ] , [ 152 , 15 ] ] , [ [ 186 , 72 ] , [ 200 , 86 ] ] , [ [ 234 , 174 ] , [ 237 , 160 ] ] ] ;
1817: LD_ADDR_EXP 47
1821: PUSH
1822: LD_INT 96
1824: PUSH
1825: LD_INT 185
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: LD_INT 109
1834: PUSH
1835: LD_INT 179
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PUSH
1842: EMPTY
1843: LIST
1844: LIST
1845: PUSH
1846: LD_INT 21
1848: PUSH
1849: LD_INT 29
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: PUSH
1856: LD_INT 9
1858: PUSH
1859: LD_INT 5
1861: PUSH
1862: EMPTY
1863: LIST
1864: LIST
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: PUSH
1870: LD_INT 50
1872: PUSH
1873: LD_INT 85
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: PUSH
1880: LD_INT 66
1882: PUSH
1883: LD_INT 102
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: PUSH
1894: LD_INT 128
1896: PUSH
1897: LD_INT 2
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: PUSH
1904: LD_INT 152
1906: PUSH
1907: LD_INT 15
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: PUSH
1918: LD_INT 186
1920: PUSH
1921: LD_INT 72
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: PUSH
1928: LD_INT 200
1930: PUSH
1931: LD_INT 86
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 234
1944: PUSH
1945: LD_INT 174
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: PUSH
1952: LD_INT 237
1954: PUSH
1955: LD_INT 160
1957: PUSH
1958: EMPTY
1959: LIST
1960: LIST
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: ST_TO_ADDR
// depot_def := [ [ 100 , 179 , 0 ] , [ 21 , 18 , 2 ] , [ 65 , 90 , 2 ] , [ 132 , 11 , 1 ] , [ 190 , 82 , 4 ] , [ 230 , 164 , 4 ] ] ;
1974: LD_ADDR_EXP 41
1978: PUSH
1979: LD_INT 100
1981: PUSH
1982: LD_INT 179
1984: PUSH
1985: LD_INT 0
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: PUSH
1993: LD_INT 21
1995: PUSH
1996: LD_INT 18
1998: PUSH
1999: LD_INT 2
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 65
2009: PUSH
2010: LD_INT 90
2012: PUSH
2013: LD_INT 2
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 132
2023: PUSH
2024: LD_INT 11
2026: PUSH
2027: LD_INT 1
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: PUSH
2035: LD_INT 190
2037: PUSH
2038: LD_INT 82
2040: PUSH
2041: LD_INT 4
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: LIST
2048: PUSH
2049: LD_INT 230
2051: PUSH
2052: LD_INT 164
2054: PUSH
2055: LD_INT 4
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: ST_TO_ADDR
// for i in depot_def do
2071: LD_ADDR_VAR 0 2
2075: PUSH
2076: LD_EXP 41
2080: PUSH
2081: FOR_IN
2082: IFFALSE 2156
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 10 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 10 ) ] ] ;
2084: LD_ADDR_EXP 43
2088: PUSH
2089: LD_EXP 43
2093: PUSH
2094: LD_VAR 0 2
2098: PUSH
2099: LD_INT 1
2101: ARRAY
2102: PPUSH
2103: LD_VAR 0 2
2107: PUSH
2108: LD_INT 3
2110: ARRAY
2111: PPUSH
2112: LD_INT 10
2114: PPUSH
2115: CALL_OW 272
2119: PUSH
2120: LD_VAR 0 2
2124: PUSH
2125: LD_INT 2
2127: ARRAY
2128: PPUSH
2129: LD_VAR 0 2
2133: PUSH
2134: LD_INT 3
2136: ARRAY
2137: PPUSH
2138: LD_INT 10
2140: PPUSH
2141: CALL_OW 273
2145: PUSH
2146: EMPTY
2147: LIST
2148: LIST
2149: PUSH
2150: EMPTY
2151: LIST
2152: ADD
2153: ST_TO_ADDR
2154: GO 2081
2156: POP
2157: POP
// breastworks_def := [ [ [ 88 , 154 , 3 ] , [ 105 , 167 , 4 ] ] , [ [ 27 , 32 , 5 ] , [ 40 , 24 , 4 ] ] , [ [ 78 , 102 , 5 ] , [ 74 , 84 , 3 ] ] , [ [ 128 , 20 , 0 ] , [ 122 , 6 , 1 ] ] , [ [ 185 , 92 , 0 ] , [ 175 , 73 , 1 ] ] , [ [ 219 , 171 , 1 ] , [ 219 , 151 , 2 ] ] ] ;
2158: LD_ADDR_EXP 42
2162: PUSH
2163: LD_INT 88
2165: PUSH
2166: LD_INT 154
2168: PUSH
2169: LD_INT 3
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: LIST
2176: PUSH
2177: LD_INT 105
2179: PUSH
2180: LD_INT 167
2182: PUSH
2183: LD_INT 4
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: LIST
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 27
2197: PUSH
2198: LD_INT 32
2200: PUSH
2201: LD_INT 5
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: LIST
2208: PUSH
2209: LD_INT 40
2211: PUSH
2212: LD_INT 24
2214: PUSH
2215: LD_INT 4
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: LIST
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: PUSH
2227: LD_INT 78
2229: PUSH
2230: LD_INT 102
2232: PUSH
2233: LD_INT 5
2235: PUSH
2236: EMPTY
2237: LIST
2238: LIST
2239: LIST
2240: PUSH
2241: LD_INT 74
2243: PUSH
2244: LD_INT 84
2246: PUSH
2247: LD_INT 3
2249: PUSH
2250: EMPTY
2251: LIST
2252: LIST
2253: LIST
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 128
2261: PUSH
2262: LD_INT 20
2264: PUSH
2265: LD_INT 0
2267: PUSH
2268: EMPTY
2269: LIST
2270: LIST
2271: LIST
2272: PUSH
2273: LD_INT 122
2275: PUSH
2276: LD_INT 6
2278: PUSH
2279: LD_INT 1
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: LIST
2286: PUSH
2287: EMPTY
2288: LIST
2289: LIST
2290: PUSH
2291: LD_INT 185
2293: PUSH
2294: LD_INT 92
2296: PUSH
2297: LD_INT 0
2299: PUSH
2300: EMPTY
2301: LIST
2302: LIST
2303: LIST
2304: PUSH
2305: LD_INT 175
2307: PUSH
2308: LD_INT 73
2310: PUSH
2311: LD_INT 1
2313: PUSH
2314: EMPTY
2315: LIST
2316: LIST
2317: LIST
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PUSH
2323: LD_INT 219
2325: PUSH
2326: LD_INT 171
2328: PUSH
2329: LD_INT 1
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: LIST
2336: PUSH
2337: LD_INT 219
2339: PUSH
2340: LD_INT 151
2342: PUSH
2343: LD_INT 2
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: LIST
2350: PUSH
2351: EMPTY
2352: LIST
2353: LIST
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: LIST
2359: LIST
2360: LIST
2361: LIST
2362: ST_TO_ADDR
// for i = 1 to Side_Positions do
2363: LD_ADDR_VAR 0 2
2367: PUSH
2368: DOUBLE
2369: LD_INT 1
2371: DEC
2372: ST_TO_ADDR
2373: LD_EXP 38
2377: PUSH
2378: FOR_TO
2379: IFFALSE 2509
// begin if not Side_Positions [ i ] then
2381: LD_EXP 38
2385: PUSH
2386: LD_VAR 0 2
2390: ARRAY
2391: NOT
2392: IFFALSE 2396
// continue ;
2394: GO 2378
// if def_extra_oil_deposits then
2396: LD_EXP 6
2400: IFFALSE 2458
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2402: LD_ADDR_VAR 0 3
2406: PUSH
2407: LD_EXP 45
2411: PUSH
2412: LD_EXP 38
2416: PUSH
2417: LD_VAR 0 2
2421: ARRAY
2422: ARRAY
2423: PUSH
2424: FOR_IN
2425: IFFALSE 2454
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2427: LD_VAR 0 3
2431: PUSH
2432: LD_INT 1
2434: ARRAY
2435: PPUSH
2436: LD_VAR 0 3
2440: PUSH
2441: LD_INT 2
2443: ARRAY
2444: PPUSH
2445: LD_INT 2
2447: PPUSH
2448: CALL_OW 62
2452: GO 2424
2454: POP
2455: POP
2456: GO 2507
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2458: LD_EXP 44
2462: PUSH
2463: LD_EXP 38
2467: PUSH
2468: LD_VAR 0 2
2472: ARRAY
2473: ARRAY
2474: PUSH
2475: LD_INT 1
2477: ARRAY
2478: PPUSH
2479: LD_EXP 44
2483: PUSH
2484: LD_EXP 38
2488: PUSH
2489: LD_VAR 0 2
2493: ARRAY
2494: ARRAY
2495: PUSH
2496: LD_INT 2
2498: ARRAY
2499: PPUSH
2500: LD_INT 2
2502: PPUSH
2503: CALL_OW 62
// end ;
2507: GO 2378
2509: POP
2510: POP
// if def_extra_sib_deposits then
2511: LD_EXP 7
2515: IFFALSE 2669
// for i = 1 to Side_Positions do
2517: LD_ADDR_VAR 0 2
2521: PUSH
2522: DOUBLE
2523: LD_INT 1
2525: DEC
2526: ST_TO_ADDR
2527: LD_EXP 38
2531: PUSH
2532: FOR_TO
2533: IFFALSE 2667
// begin if not Side_Positions [ i ] then
2535: LD_EXP 38
2539: PUSH
2540: LD_VAR 0 2
2544: ARRAY
2545: NOT
2546: IFFALSE 2550
// continue ;
2548: GO 2532
// if def_extra_sib_deposits = 2 then
2550: LD_EXP 7
2554: PUSH
2555: LD_INT 2
2557: EQUAL
2558: IFFALSE 2616
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
2560: LD_ADDR_VAR 0 3
2564: PUSH
2565: LD_EXP 47
2569: PUSH
2570: LD_EXP 38
2574: PUSH
2575: LD_VAR 0 2
2579: ARRAY
2580: ARRAY
2581: PUSH
2582: FOR_IN
2583: IFFALSE 2612
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2585: LD_VAR 0 3
2589: PUSH
2590: LD_INT 1
2592: ARRAY
2593: PPUSH
2594: LD_VAR 0 3
2598: PUSH
2599: LD_INT 2
2601: ARRAY
2602: PPUSH
2603: LD_INT 3
2605: PPUSH
2606: CALL_OW 62
2610: GO 2582
2612: POP
2613: POP
2614: GO 2665
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2616: LD_EXP 46
2620: PUSH
2621: LD_EXP 38
2625: PUSH
2626: LD_VAR 0 2
2630: ARRAY
2631: ARRAY
2632: PUSH
2633: LD_INT 1
2635: ARRAY
2636: PPUSH
2637: LD_EXP 46
2641: PUSH
2642: LD_EXP 38
2646: PUSH
2647: LD_VAR 0 2
2651: ARRAY
2652: ARRAY
2653: PUSH
2654: LD_INT 2
2656: ARRAY
2657: PPUSH
2658: LD_INT 3
2660: PPUSH
2661: CALL_OW 62
// end ;
2665: GO 2532
2667: POP
2668: POP
// end ;
2669: LD_VAR 0 1
2673: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2674: LD_INT 0
2676: PPUSH
2677: PPUSH
2678: PPUSH
// if not Team_Game then
2679: LD_EXP 40
2683: NOT
2684: IFFALSE 2782
// begin for i = 1 to 8 do
2686: LD_ADDR_VAR 0 2
2690: PUSH
2691: DOUBLE
2692: LD_INT 1
2694: DEC
2695: ST_TO_ADDR
2696: LD_INT 8
2698: PUSH
2699: FOR_TO
2700: IFFALSE 2778
// for j = 1 to 8 do
2702: LD_ADDR_VAR 0 3
2706: PUSH
2707: DOUBLE
2708: LD_INT 1
2710: DEC
2711: ST_TO_ADDR
2712: LD_INT 8
2714: PUSH
2715: FOR_TO
2716: IFFALSE 2774
// if i <> j then
2718: LD_VAR 0 2
2722: PUSH
2723: LD_VAR 0 3
2727: NONEQUAL
2728: IFFALSE 2752
// SetAttitude ( i , j , att_neutral , true ) else
2730: LD_VAR 0 2
2734: PPUSH
2735: LD_VAR 0 3
2739: PPUSH
2740: LD_INT 0
2742: PPUSH
2743: LD_INT 1
2745: PPUSH
2746: CALL_OW 80
2750: GO 2772
// SetAttitude ( i , j , att_friend , true ) ;
2752: LD_VAR 0 2
2756: PPUSH
2757: LD_VAR 0 3
2761: PPUSH
2762: LD_INT 1
2764: PPUSH
2765: LD_INT 1
2767: PPUSH
2768: CALL_OW 80
2772: GO 2715
2774: POP
2775: POP
2776: GO 2699
2778: POP
2779: POP
// end else
2780: GO 2957
// begin if def_shared_vision then
2782: LD_EXP 8
2786: IFFALSE 2851
// begin for i in Teams do
2788: LD_ADDR_VAR 0 2
2792: PUSH
2793: LD_EXP 36
2797: PUSH
2798: FOR_IN
2799: IFFALSE 2849
// for j = 2 to i do
2801: LD_ADDR_VAR 0 3
2805: PUSH
2806: DOUBLE
2807: LD_INT 2
2809: DEC
2810: ST_TO_ADDR
2811: LD_VAR 0 2
2815: PUSH
2816: FOR_TO
2817: IFFALSE 2845
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2819: LD_VAR 0 2
2823: PUSH
2824: LD_VAR 0 3
2828: ARRAY
2829: PPUSH
2830: LD_VAR 0 2
2834: PUSH
2835: LD_INT 1
2837: ARRAY
2838: PPUSH
2839: CALL_OW 343
2843: GO 2816
2845: POP
2846: POP
2847: GO 2798
2849: POP
2850: POP
// end ; for i = 1 to 8 do
2851: LD_ADDR_VAR 0 2
2855: PUSH
2856: DOUBLE
2857: LD_INT 1
2859: DEC
2860: ST_TO_ADDR
2861: LD_INT 8
2863: PUSH
2864: FOR_TO
2865: IFFALSE 2955
// for j = 1 to 8 do
2867: LD_ADDR_VAR 0 3
2871: PUSH
2872: DOUBLE
2873: LD_INT 1
2875: DEC
2876: ST_TO_ADDR
2877: LD_INT 8
2879: PUSH
2880: FOR_TO
2881: IFFALSE 2951
// if Side_Teams [ i ] = Side_Teams [ j ] then
2883: LD_EXP 35
2887: PUSH
2888: LD_VAR 0 2
2892: ARRAY
2893: PUSH
2894: LD_EXP 35
2898: PUSH
2899: LD_VAR 0 3
2903: ARRAY
2904: EQUAL
2905: IFFALSE 2929
// SetAttitude ( i , j , att_friend , true ) else
2907: LD_VAR 0 2
2911: PPUSH
2912: LD_VAR 0 3
2916: PPUSH
2917: LD_INT 1
2919: PPUSH
2920: LD_INT 1
2922: PPUSH
2923: CALL_OW 80
2927: GO 2949
// SetAttitude ( i , j , att_enemy , true ) ;
2929: LD_VAR 0 2
2933: PPUSH
2934: LD_VAR 0 3
2938: PPUSH
2939: LD_INT 2
2941: PPUSH
2942: LD_INT 1
2944: PPUSH
2945: CALL_OW 80
2949: GO 2880
2951: POP
2952: POP
2953: GO 2864
2955: POP
2956: POP
// end ; end ;
2957: LD_VAR 0 1
2961: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2962: LD_INT 0
2964: PPUSH
2965: PPUSH
2966: PPUSH
2967: PPUSH
// result := [ ] ;
2968: LD_ADDR_VAR 0 7
2972: PUSH
2973: EMPTY
2974: ST_TO_ADDR
// for i := 1 to count do
2975: LD_ADDR_VAR 0 8
2979: PUSH
2980: DOUBLE
2981: LD_INT 1
2983: DEC
2984: ST_TO_ADDR
2985: LD_VAR 0 1
2989: PUSH
2990: FOR_TO
2991: IFFALSE 3441
// begin uc_direction := Rand ( 0 , 5 ) ;
2993: LD_ADDR_OWVAR 24
2997: PUSH
2998: LD_INT 0
3000: PPUSH
3001: LD_INT 5
3003: PPUSH
3004: CALL_OW 12
3008: ST_TO_ADDR
// if commander then
3009: LD_LOC 1
3013: IFFALSE 3154
// begin hc_name := mp_sides_players_names [ uc_side ] ;
3015: LD_ADDR_OWVAR 26
3019: PUSH
3020: LD_OWVAR 19
3024: PUSH
3025: LD_OWVAR 20
3029: ARRAY
3030: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3031: LD_INT 1
3033: PPUSH
3034: LD_INT 2
3036: PPUSH
3037: CALL_OW 12
3041: PPUSH
3042: LD_VAR 0 2
3046: PPUSH
3047: LD_EXP 25
3051: PUSH
3052: LD_INT 2
3054: PLUS
3055: PPUSH
3056: CALL_OW 380
// hc_importance := 105 ;
3060: LD_ADDR_OWVAR 32
3064: PUSH
3065: LD_INT 105
3067: ST_TO_ADDR
// commander := false ;
3068: LD_ADDR_LOC 1
3072: PUSH
3073: LD_INT 0
3075: ST_TO_ADDR
// if Multiplayer then
3076: LD_OWVAR 4
3080: IFFALSE 3152
// begin if sheik then
3082: LD_EXP 51
3086: IFFALSE 3114
// begin hc_gallery :=  ;
3088: LD_ADDR_OWVAR 33
3092: PUSH
3093: LD_STRING 
3095: ST_TO_ADDR
// hc_class := class_desert_warior ;
3096: LD_ADDR_OWVAR 28
3100: PUSH
3101: LD_INT 11
3103: ST_TO_ADDR
// hc_sex := sex_male ;
3104: LD_ADDR_OWVAR 27
3108: PUSH
3109: LD_INT 1
3111: ST_TO_ADDR
// end else
3112: GO 3152
// begin hc_gallery := MULTIAVATARS ;
3114: LD_ADDR_OWVAR 33
3118: PUSH
3119: LD_STRING MULTIAVATARS
3121: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3122: LD_ADDR_OWVAR 34
3126: PUSH
3127: LD_OWVAR 20
3131: PPUSH
3132: CALL_OW 525
3136: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3137: LD_ADDR_OWVAR 27
3141: PUSH
3142: LD_OWVAR 20
3146: PPUSH
3147: CALL_OW 526
3151: ST_TO_ADDR
// end ; end ; end else
3152: GO 3217
// begin hc_name :=  ;
3154: LD_ADDR_OWVAR 26
3158: PUSH
3159: LD_STRING 
3161: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3162: LD_INT 1
3164: PPUSH
3165: LD_INT 2
3167: PPUSH
3168: CALL_OW 12
3172: PPUSH
3173: LD_VAR 0 2
3177: PPUSH
3178: LD_EXP 25
3182: PPUSH
3183: CALL_OW 380
// hc_importance := 0 ;
3187: LD_ADDR_OWVAR 32
3191: PUSH
3192: LD_INT 0
3194: ST_TO_ADDR
// if Multiplayer then
3195: LD_OWVAR 4
3199: IFFALSE 3217
// begin hc_gallery :=  ;
3201: LD_ADDR_OWVAR 33
3205: PUSH
3206: LD_STRING 
3208: ST_TO_ADDR
// hc_face_number := 0 ;
3209: LD_ADDR_OWVAR 34
3213: PUSH
3214: LD_INT 0
3216: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3217: LD_ADDR_VAR 0 10
3221: PUSH
3222: CALL_OW 44
3226: ST_TO_ADDR
// if global_defined then
3227: LD_LOC 3
3231: IFFALSE 3371
// begin if ( cl = class_soldier ) then
3233: LD_VAR 0 2
3237: PUSH
3238: LD_INT 1
3240: EQUAL
3241: IFFALSE 3261
// j := i + soldiers_created else
3243: LD_ADDR_VAR 0 9
3247: PUSH
3248: LD_VAR 0 8
3252: PUSH
3253: LD_LOC 4
3257: PLUS
3258: ST_TO_ADDR
3259: GO 3271
// j := i ;
3261: LD_ADDR_VAR 0 9
3265: PUSH
3266: LD_VAR 0 8
3270: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3271: LD_LOC 2
3275: PUSH
3276: LD_VAR 0 2
3280: ARRAY
3281: PUSH
3282: LD_VAR 0 9
3286: ARRAY
3287: PPUSH
3288: LD_VAR 0 10
3292: PPUSH
3293: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3297: LD_VAR 0 10
3301: PPUSH
3302: LD_INT 2
3304: PPUSH
3305: LD_LOC 2
3309: PUSH
3310: LD_VAR 0 2
3314: ARRAY
3315: PUSH
3316: LD_VAR 0 9
3320: ARRAY
3321: PPUSH
3322: LD_INT 2
3324: PPUSH
3325: CALL_OW 260
3329: PPUSH
3330: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3334: LD_VAR 0 10
3338: PPUSH
3339: LD_INT 1
3341: PPUSH
3342: LD_LOC 2
3346: PUSH
3347: LD_VAR 0 2
3351: ARRAY
3352: PUSH
3353: LD_VAR 0 9
3357: ARRAY
3358: PPUSH
3359: LD_INT 1
3361: PPUSH
3362: CALL_OW 260
3366: PPUSH
3367: CALL_OW 239
// end ; if building then
3371: LD_VAR 0 6
3375: IFFALSE 3393
// PlaceHumanInUnit ( un , building ) else
3377: LD_VAR 0 10
3381: PPUSH
3382: LD_VAR 0 6
3386: PPUSH
3387: CALL_OW 52
3391: GO 3420
// PlaceUnitXYR ( un , x , y , r , false ) ;
3393: LD_VAR 0 10
3397: PPUSH
3398: LD_VAR 0 3
3402: PPUSH
3403: LD_VAR 0 4
3407: PPUSH
3408: LD_VAR 0 5
3412: PPUSH
3413: LD_INT 0
3415: PPUSH
3416: CALL_OW 50
// result := result ^ [ un ] ;
3420: LD_ADDR_VAR 0 7
3424: PUSH
3425: LD_VAR 0 7
3429: PUSH
3430: LD_VAR 0 10
3434: PUSH
3435: EMPTY
3436: LIST
3437: ADD
3438: ST_TO_ADDR
// end ;
3439: GO 2990
3441: POP
3442: POP
// if not global_defined then
3443: LD_LOC 3
3447: NOT
3448: IFFALSE 3526
// if ( global_units >= cl ) then
3450: LD_LOC 2
3454: PUSH
3455: LD_VAR 0 2
3459: GREATEREQUAL
3460: IFFALSE 3501
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3462: LD_ADDR_LOC 2
3466: PUSH
3467: LD_LOC 2
3471: PPUSH
3472: LD_VAR 0 2
3476: PPUSH
3477: LD_LOC 2
3481: PUSH
3482: LD_VAR 0 2
3486: ARRAY
3487: PUSH
3488: LD_VAR 0 7
3492: ADD
3493: PPUSH
3494: CALL_OW 1
3498: ST_TO_ADDR
3499: GO 3526
// global_units := Replace ( global_units , cl , result ) ;
3501: LD_ADDR_LOC 2
3505: PUSH
3506: LD_LOC 2
3510: PPUSH
3511: LD_VAR 0 2
3515: PPUSH
3516: LD_VAR 0 7
3520: PPUSH
3521: CALL_OW 1
3525: ST_TO_ADDR
// end ;
3526: LD_VAR 0 7
3530: RET
// function prepare_mastodonts ( n ) ; var i ; begin
3531: LD_INT 0
3533: PPUSH
3534: PPUSH
// uc_side := 0 ;
3535: LD_ADDR_OWVAR 20
3539: PUSH
3540: LD_INT 0
3542: ST_TO_ADDR
// uc_nation := 0 ;
3543: LD_ADDR_OWVAR 21
3547: PUSH
3548: LD_INT 0
3550: ST_TO_ADDR
// vc_chassis := 31 ;
3551: LD_ADDR_OWVAR 37
3555: PUSH
3556: LD_INT 31
3558: ST_TO_ADDR
// vc_control := control_rider ;
3559: LD_ADDR_OWVAR 38
3563: PUSH
3564: LD_INT 4
3566: ST_TO_ADDR
// for i = 1 to n do
3567: LD_ADDR_VAR 0 3
3571: PUSH
3572: DOUBLE
3573: LD_INT 1
3575: DEC
3576: ST_TO_ADDR
3577: LD_VAR 0 1
3581: PUSH
3582: FOR_TO
3583: IFFALSE 3602
// PlaceUnitArea ( CreateVehicle , MastodontSpawn , false ) ;
3585: CALL_OW 45
3589: PPUSH
3590: LD_INT 15
3592: PPUSH
3593: LD_INT 0
3595: PPUSH
3596: CALL_OW 49
3600: GO 3582
3602: POP
3603: POP
// end ;
3604: LD_VAR 0 2
3608: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3609: LD_INT 0
3611: PPUSH
3612: PPUSH
3613: PPUSH
3614: PPUSH
3615: PPUSH
3616: PPUSH
3617: PPUSH
3618: PPUSH
3619: PPUSH
// if side in [ 0 , 9 ] then
3620: LD_VAR 0 1
3624: PUSH
3625: LD_INT 0
3627: PUSH
3628: LD_INT 9
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: IN
3635: IFFALSE 3639
// exit ;
3637: GO 4656
// pos := Side_Positions [ side ] ;
3639: LD_ADDR_VAR 0 3
3643: PUSH
3644: LD_EXP 38
3648: PUSH
3649: LD_VAR 0 1
3653: ARRAY
3654: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3655: LD_ADDR_OWVAR 21
3659: PUSH
3660: LD_EXP 39
3664: PUSH
3665: LD_VAR 0 1
3669: ARRAY
3670: ST_TO_ADDR
// uc_side := side ;
3671: LD_ADDR_OWVAR 20
3675: PUSH
3676: LD_VAR 0 1
3680: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3681: LD_ADDR_VAR 0 4
3685: PUSH
3686: LD_EXP 41
3690: PUSH
3691: LD_VAR 0 3
3695: ARRAY
3696: PUSH
3697: LD_INT 1
3699: ARRAY
3700: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3701: LD_ADDR_VAR 0 5
3705: PUSH
3706: LD_EXP 41
3710: PUSH
3711: LD_VAR 0 3
3715: ARRAY
3716: PUSH
3717: LD_INT 2
3719: ARRAY
3720: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3721: LD_ADDR_VAR 0 6
3725: PUSH
3726: LD_EXP 41
3730: PUSH
3731: LD_VAR 0 3
3735: ARRAY
3736: PUSH
3737: LD_INT 3
3739: ARRAY
3740: ST_TO_ADDR
// if is_depot then
3741: LD_EXP 22
3745: IFFALSE 3878
// begin bc_type = b_depot ;
3747: LD_ADDR_OWVAR 42
3751: PUSH
3752: LD_INT 0
3754: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3755: LD_ADDR_VAR 0 10
3759: PUSH
3760: LD_VAR 0 4
3764: PPUSH
3765: LD_VAR 0 5
3769: PPUSH
3770: LD_VAR 0 6
3774: PPUSH
3775: CALL_OW 47
3779: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3780: LD_VAR 0 10
3784: PPUSH
3785: LD_STRING @
3787: PUSH
3788: LD_VAR 0 1
3792: STR
3793: PPUSH
3794: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3798: LD_VAR 0 10
3802: PPUSH
3803: CALL_OW 274
3807: PPUSH
3808: LD_INT 1
3810: PPUSH
3811: LD_EXP 27
3815: PUSH
3816: LD_INT 1
3818: ARRAY
3819: PPUSH
3820: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3824: LD_VAR 0 10
3828: PPUSH
3829: CALL_OW 274
3833: PPUSH
3834: LD_INT 2
3836: PPUSH
3837: LD_EXP 27
3841: PUSH
3842: LD_INT 2
3844: ARRAY
3845: PPUSH
3846: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3850: LD_VAR 0 10
3854: PPUSH
3855: CALL_OW 274
3859: PPUSH
3860: LD_INT 3
3862: PPUSH
3863: LD_EXP 27
3867: PUSH
3868: LD_INT 3
3870: ARRAY
3871: PPUSH
3872: CALL_OW 277
// end else
3876: GO 4022
// begin for i := 1 to 3 do
3878: LD_ADDR_VAR 0 7
3882: PUSH
3883: DOUBLE
3884: LD_INT 1
3886: DEC
3887: ST_TO_ADDR
3888: LD_INT 3
3890: PUSH
3891: FOR_TO
3892: IFFALSE 4020
// begin r := starting_resources [ i ] ;
3894: LD_ADDR_VAR 0 8
3898: PUSH
3899: LD_EXP 27
3903: PUSH
3904: LD_VAR 0 7
3908: ARRAY
3909: ST_TO_ADDR
// while r >= 10 do
3910: LD_VAR 0 8
3914: PUSH
3915: LD_INT 10
3917: GREATEREQUAL
3918: IFFALSE 4018
// if r > 50 then
3920: LD_VAR 0 8
3924: PUSH
3925: LD_INT 50
3927: GREATER
3928: IFFALSE 3974
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3930: LD_VAR 0 7
3934: PPUSH
3935: LD_INT 5
3937: PPUSH
3938: LD_VAR 0 4
3942: PPUSH
3943: LD_VAR 0 5
3947: PPUSH
3948: LD_INT 4
3950: PPUSH
3951: LD_INT 0
3953: PPUSH
3954: CALL_OW 60
// r := r - 50 ;
3958: LD_ADDR_VAR 0 8
3962: PUSH
3963: LD_VAR 0 8
3967: PUSH
3968: LD_INT 50
3970: MINUS
3971: ST_TO_ADDR
// end else
3972: GO 4016
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3974: LD_VAR 0 7
3978: PPUSH
3979: LD_VAR 0 8
3983: PUSH
3984: LD_INT 10
3986: DIV
3987: PPUSH
3988: LD_VAR 0 4
3992: PPUSH
3993: LD_VAR 0 5
3997: PPUSH
3998: LD_INT 4
4000: PPUSH
4001: LD_INT 0
4003: PPUSH
4004: CALL_OW 60
// r := 0 ;
4008: LD_ADDR_VAR 0 8
4012: PUSH
4013: LD_INT 0
4015: ST_TO_ADDR
// end ;
4016: GO 3910
// end ;
4018: GO 3891
4020: POP
4021: POP
// end ; for r in starting_crates do
4022: LD_ADDR_VAR 0 8
4026: PUSH
4027: LD_EXP 26
4031: PUSH
4032: FOR_IN
4033: IFFALSE 4065
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
4035: LD_INT 1
4037: PPUSH
4038: LD_INT 5
4040: PPUSH
4041: LD_VAR 0 4
4045: PPUSH
4046: LD_VAR 0 5
4050: PPUSH
4051: LD_VAR 0 8
4055: PPUSH
4056: LD_INT 0
4058: PPUSH
4059: CALL_OW 60
4063: GO 4032
4065: POP
4066: POP
// if def_morale_flags then
4067: LD_EXP 9
4071: IFFALSE 4210
// begin x := start_def [ pos ] [ 1 ] ;
4073: LD_ADDR_VAR 0 4
4077: PUSH
4078: LD_EXP 43
4082: PUSH
4083: LD_VAR 0 3
4087: ARRAY
4088: PUSH
4089: LD_INT 1
4091: ARRAY
4092: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4093: LD_ADDR_VAR 0 5
4097: PUSH
4098: LD_EXP 43
4102: PUSH
4103: LD_VAR 0 3
4107: ARRAY
4108: PUSH
4109: LD_INT 2
4111: ARRAY
4112: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4113: LD_VAR 0 4
4117: PPUSH
4118: LD_VAR 0 5
4122: PPUSH
4123: LD_INT 12
4125: PPUSH
4126: LD_INT 2
4128: PPUSH
4129: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4133: LD_ADDR_EXP 48
4137: PUSH
4138: LD_EXP 48
4142: PUSH
4143: LD_VAR 0 1
4147: PPUSH
4148: LD_VAR 0 4
4152: PPUSH
4153: LD_VAR 0 5
4157: PPUSH
4158: LD_INT 1
4160: PUSH
4161: LD_INT 100
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: PUSH
4168: LD_INT 2
4170: PUSH
4171: LD_INT 50
4173: PUSH
4174: EMPTY
4175: LIST
4176: LIST
4177: PUSH
4178: LD_INT 3
4180: PUSH
4181: LD_INT 20
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 20
4190: PUSH
4191: LD_INT 100
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: EMPTY
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: PPUSH
4204: CALL_OW 418
4208: ADD
4209: ST_TO_ADDR
// end ; commander := true ;
4210: LD_ADDR_LOC 1
4214: PUSH
4215: LD_INT 1
4217: ST_TO_ADDR
// soldiers_created := 0 ;
4218: LD_ADDR_LOC 4
4222: PUSH
4223: LD_INT 0
4225: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4226: LD_ADDR_VAR 0 7
4230: PUSH
4231: DOUBLE
4232: LD_INT 1
4234: DEC
4235: ST_TO_ADDR
4236: LD_EXP 23
4240: PUSH
4241: FOR_TO
4242: IFFALSE 4395
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4244: LD_ADDR_VAR 0 4
4248: PUSH
4249: LD_EXP 42
4253: PUSH
4254: LD_VAR 0 3
4258: ARRAY
4259: PUSH
4260: LD_VAR 0 7
4264: ARRAY
4265: PUSH
4266: LD_INT 1
4268: ARRAY
4269: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4270: LD_ADDR_VAR 0 5
4274: PUSH
4275: LD_EXP 42
4279: PUSH
4280: LD_VAR 0 3
4284: ARRAY
4285: PUSH
4286: LD_VAR 0 7
4290: ARRAY
4291: PUSH
4292: LD_INT 2
4294: ARRAY
4295: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4296: LD_ADDR_VAR 0 6
4300: PUSH
4301: LD_EXP 42
4305: PUSH
4306: LD_VAR 0 3
4310: ARRAY
4311: PUSH
4312: LD_VAR 0 7
4316: ARRAY
4317: PUSH
4318: LD_INT 3
4320: ARRAY
4321: ST_TO_ADDR
// bc_type := b_breastwork ;
4322: LD_ADDR_OWVAR 42
4326: PUSH
4327: LD_INT 31
4329: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4330: LD_ADDR_VAR 0 9
4334: PUSH
4335: LD_VAR 0 4
4339: PPUSH
4340: LD_VAR 0 5
4344: PPUSH
4345: LD_VAR 0 6
4349: PPUSH
4350: CALL_OW 47
4354: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4355: LD_INT 1
4357: PPUSH
4358: LD_INT 1
4360: PPUSH
4361: LD_INT 0
4363: PPUSH
4364: LD_INT 0
4366: PPUSH
4367: LD_INT 0
4369: PPUSH
4370: LD_VAR 0 9
4374: PPUSH
4375: CALL 2962 0 6
// soldiers_created := soldiers_created + 1 ;
4379: LD_ADDR_LOC 4
4383: PUSH
4384: LD_LOC 4
4388: PUSH
4389: LD_INT 1
4391: PLUS
4392: ST_TO_ADDR
// end ;
4393: GO 4241
4395: POP
4396: POP
// x := start_def [ pos ] [ 1 ] ;
4397: LD_ADDR_VAR 0 4
4401: PUSH
4402: LD_EXP 43
4406: PUSH
4407: LD_VAR 0 3
4411: ARRAY
4412: PUSH
4413: LD_INT 1
4415: ARRAY
4416: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4417: LD_ADDR_VAR 0 5
4421: PUSH
4422: LD_EXP 43
4426: PUSH
4427: LD_VAR 0 3
4431: ARRAY
4432: PUSH
4433: LD_INT 2
4435: ARRAY
4436: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4437: LD_LOC 8
4441: PUSH
4442: LD_EXP 23
4446: MINUS
4447: PPUSH
4448: LD_INT 1
4450: PPUSH
4451: LD_VAR 0 4
4455: PPUSH
4456: LD_VAR 0 5
4460: PPUSH
4461: LD_INT 5
4463: PPUSH
4464: LD_INT 0
4466: PPUSH
4467: CALL 2962 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4471: LD_LOC 5
4475: PPUSH
4476: LD_INT 2
4478: PPUSH
4479: LD_VAR 0 4
4483: PPUSH
4484: LD_VAR 0 5
4488: PPUSH
4489: LD_INT 5
4491: PPUSH
4492: LD_INT 0
4494: PPUSH
4495: CALL 2962 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4499: LD_LOC 7
4503: PPUSH
4504: LD_INT 3
4506: PPUSH
4507: LD_VAR 0 4
4511: PPUSH
4512: LD_VAR 0 5
4516: PPUSH
4517: LD_INT 5
4519: PPUSH
4520: LD_INT 0
4522: PPUSH
4523: CALL 2962 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4527: LD_LOC 6
4531: PPUSH
4532: LD_INT 4
4534: PPUSH
4535: LD_VAR 0 4
4539: PPUSH
4540: LD_VAR 0 5
4544: PPUSH
4545: LD_INT 5
4547: PPUSH
4548: LD_INT 0
4550: PPUSH
4551: CALL 2962 0 6
// if def_siberite_detection then
4555: LD_EXP 10
4559: IFFALSE 4576
// SetTech ( tech_SibDet , side , state_researched ) ;
4561: LD_INT 20
4563: PPUSH
4564: LD_VAR 0 1
4568: PPUSH
4569: LD_INT 2
4571: PPUSH
4572: CALL_OW 322
// if def_siberite_bomb = 1 then
4576: LD_EXP 15
4580: PUSH
4581: LD_INT 1
4583: EQUAL
4584: IFFALSE 4618
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4586: LD_INT 25
4588: PPUSH
4589: LD_VAR 0 1
4593: PPUSH
4594: LD_INT 1
4596: PPUSH
4597: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4601: LD_INT 73
4603: PPUSH
4604: LD_VAR 0 1
4608: PPUSH
4609: LD_INT 1
4611: PPUSH
4612: CALL_OW 322
// end else
4616: GO 4648
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4618: LD_INT 25
4620: PPUSH
4621: LD_VAR 0 1
4625: PPUSH
4626: LD_INT 0
4628: PPUSH
4629: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4633: LD_INT 73
4635: PPUSH
4636: LD_VAR 0 1
4640: PPUSH
4641: LD_INT 0
4643: PPUSH
4644: CALL_OW 322
// end ; global_defined := true ;
4648: LD_ADDR_LOC 3
4652: PUSH
4653: LD_INT 1
4655: ST_TO_ADDR
// end ;
4656: LD_VAR 0 2
4660: RET
// every 0 0$1 do
4661: GO 4663
4663: DISABLE
// if ( def_siberite_bomb > 1 ) then
4664: LD_EXP 15
4668: PUSH
4669: LD_INT 1
4671: GREATER
4672: IFFALSE 4687
// begin wait ( siberite_bomb_Delay ) ;
4674: LD_EXP 34
4678: PPUSH
4679: CALL_OW 67
// EnableSibFiss ;
4683: CALL 4688 0 0
// end ;
4687: END
// function EnableSibFiss ; var i ; begin
4688: LD_INT 0
4690: PPUSH
4691: PPUSH
// for i := 1 to 8 do
4692: LD_ADDR_VAR 0 2
4696: PUSH
4697: DOUBLE
4698: LD_INT 1
4700: DEC
4701: ST_TO_ADDR
4702: LD_INT 8
4704: PUSH
4705: FOR_TO
4706: IFFALSE 4752
// if Side_Positions [ i ] then
4708: LD_EXP 38
4712: PUSH
4713: LD_VAR 0 2
4717: ARRAY
4718: IFFALSE 4750
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4720: LD_INT 25
4722: PPUSH
4723: LD_VAR 0 2
4727: PPUSH
4728: LD_INT 1
4730: PPUSH
4731: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4735: LD_INT 73
4737: PPUSH
4738: LD_VAR 0 2
4742: PPUSH
4743: LD_INT 1
4745: PPUSH
4746: CALL_OW 322
// end ;
4750: GO 4705
4752: POP
4753: POP
// end ;
4754: LD_VAR 0 1
4758: RET
// function prepare_sides ; var i ; begin
4759: LD_INT 0
4761: PPUSH
4762: PPUSH
// global_units := [ ] ;
4763: LD_ADDR_LOC 2
4767: PUSH
4768: EMPTY
4769: ST_TO_ADDR
// global_defined := false ;
4770: LD_ADDR_LOC 3
4774: PUSH
4775: LD_INT 0
4777: ST_TO_ADDR
// CountClassMembers ;
4778: CALL 4857 0 0
// for i := 1 to 8 do
4782: LD_ADDR_VAR 0 2
4786: PUSH
4787: DOUBLE
4788: LD_INT 1
4790: DEC
4791: ST_TO_ADDR
4792: LD_INT 8
4794: PUSH
4795: FOR_TO
4796: IFFALSE 4850
// if Side_Positions [ i ] then
4798: LD_EXP 38
4802: PUSH
4803: LD_VAR 0 2
4807: ARRAY
4808: IFFALSE 4848
// begin prepare_side ( i ) ;
4810: LD_VAR 0 2
4814: PPUSH
4815: CALL 3609 0 1
// if ( Game_Type = 12 ) and mastodont > 0 then
4819: LD_EXP 21
4823: PUSH
4824: LD_INT 12
4826: EQUAL
4827: PUSH
4828: LD_EXP 52
4832: PUSH
4833: LD_INT 0
4835: GREATER
4836: AND
4837: IFFALSE 4848
// prepare_mastodonts ( mastodont ) ;
4839: LD_EXP 52
4843: PPUSH
4844: CALL 3531 0 1
// end ;
4848: GO 4795
4850: POP
4851: POP
// end ;
4852: LD_VAR 0 1
4856: RET
// function CountClassMembers ; var Mode ; begin
4857: LD_INT 0
4859: PPUSH
4860: PPUSH
// if No_Mechs then
4861: LD_EXP 20
4865: IFFALSE 4877
// Mode := 2 else
4867: LD_ADDR_VAR 0 2
4871: PUSH
4872: LD_INT 2
4874: ST_TO_ADDR
4875: GO 4885
// Mode := 1 ;
4877: LD_ADDR_VAR 0 2
4881: PUSH
4882: LD_INT 1
4884: ST_TO_ADDR
// neng := number_of_people ;
4885: LD_ADDR_LOC 5
4889: PUSH
4890: LD_EXP 24
4894: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4895: LD_ADDR_LOC 8
4899: PUSH
4900: LD_LOC 5
4904: PUSH
4905: LD_INT 4
4907: PUSH
4908: LD_INT 3
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PUSH
4915: LD_VAR 0 2
4919: ARRAY
4920: DIV
4921: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4922: LD_LOC 8
4926: PUSH
4927: LD_EXP 23
4931: LESS
4932: IFFALSE 4944
// nsol := number_of_breastworks ;
4934: LD_ADDR_LOC 8
4938: PUSH
4939: LD_EXP 23
4943: ST_TO_ADDR
// neng := neng - nsol ;
4944: LD_ADDR_LOC 5
4948: PUSH
4949: LD_LOC 5
4953: PUSH
4954: LD_LOC 8
4958: MINUS
4959: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4960: LD_ADDR_LOC 6
4964: PUSH
4965: LD_LOC 5
4969: PUSH
4970: LD_INT 3
4972: PUSH
4973: LD_INT 2
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: PUSH
4980: LD_VAR 0 2
4984: ARRAY
4985: DIV
4986: ST_TO_ADDR
// if ( nsci < 1 ) then
4987: LD_LOC 6
4991: PUSH
4992: LD_INT 1
4994: LESS
4995: IFFALSE 5005
// nsci := 1 ;
4997: LD_ADDR_LOC 6
5001: PUSH
5002: LD_INT 1
5004: ST_TO_ADDR
// neng := neng - nsci ;
5005: LD_ADDR_LOC 5
5009: PUSH
5010: LD_LOC 5
5014: PUSH
5015: LD_LOC 6
5019: MINUS
5020: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5021: LD_ADDR_LOC 7
5025: PUSH
5026: LD_LOC 5
5030: PUSH
5031: LD_INT 2
5033: DIV
5034: PUSH
5035: LD_INT 0
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: PUSH
5042: LD_VAR 0 2
5046: ARRAY
5047: ST_TO_ADDR
// neng := neng - nmech ;
5048: LD_ADDR_LOC 5
5052: PUSH
5053: LD_LOC 5
5057: PUSH
5058: LD_LOC 7
5062: MINUS
5063: ST_TO_ADDR
// if ( neng < 1 ) then
5064: LD_LOC 5
5068: PUSH
5069: LD_INT 1
5071: LESS
5072: IFFALSE 5082
// neng := 1 ;
5074: LD_ADDR_LOC 5
5078: PUSH
5079: LD_INT 1
5081: ST_TO_ADDR
// end ;
5082: LD_VAR 0 1
5086: RET
// starting begin disable ( 98 ) ;
5087: LD_INT 98
5089: DISABLE_MARKED
// disable ( 99 ) ;
5090: LD_INT 99
5092: DISABLE_MARKED
// disable ( 100 ) ;
5093: LD_INT 100
5095: DISABLE_MARKED
// disable ( 200 ) ;
5096: LD_INT 200
5098: DISABLE_MARKED
// disable ( 400 ) ;
5099: LD_INT 400
5101: DISABLE_MARKED
// disable ( 401 ) ;
5102: LD_INT 401
5104: DISABLE_MARKED
// mp_selectmsg := true ;
5105: LD_ADDR_OWVAR 13
5109: PUSH
5110: LD_INT 1
5112: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5113: CALL 0 0 0
// init_map ;
5117: CALL 1509 0 0
// init_respawning ;
5121: CALL 13927 0 0
// set_shared_visions_and_alliances ;
5125: CALL 2674 0 0
// prepare_sides ;
5129: CALL 4759 0 0
// Init_Win_Condition ;
5133: CALL 15019 0 0
// ShowTimer ;
5137: CALL 8942 0 0
// if ( Game_Type = 4 ) then
5141: LD_EXP 21
5145: PUSH
5146: LD_INT 4
5148: EQUAL
5149: IFFALSE 5155
// InitBloodGods ;
5151: CALL 8707 0 0
// music_nat := Side_Nations [ your_side ] ;
5155: LD_ADDR_OWVAR 71
5159: PUSH
5160: LD_EXP 39
5164: PUSH
5165: LD_OWVAR 2
5169: ARRAY
5170: ST_TO_ADDR
// if IAmSpec then
5171: CALL_OW 531
5175: IFFALSE 5211
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
5177: LD_INT 0
5179: PPUSH
5180: LD_INT 0
5182: PPUSH
5183: LD_OWVAR 2
5187: PPUSH
5188: LD_INT 32767
5190: NEG
5191: PPUSH
5192: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
5196: LD_INT 104
5198: PPUSH
5199: LD_INT 69
5201: PPUSH
5202: CALL_OW 86
// enable ( 400 ) ;
5206: LD_INT 400
5208: ENABLE_MARKED
// end else
5209: GO 5265
// begin ResetFog ;
5211: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5215: LD_EXP 43
5219: PUSH
5220: LD_EXP 38
5224: PUSH
5225: LD_OWVAR 2
5229: ARRAY
5230: ARRAY
5231: PUSH
5232: LD_INT 1
5234: ARRAY
5235: PPUSH
5236: LD_EXP 43
5240: PUSH
5241: LD_EXP 38
5245: PUSH
5246: LD_OWVAR 2
5250: ARRAY
5251: ARRAY
5252: PUSH
5253: LD_INT 2
5255: ARRAY
5256: PPUSH
5257: CALL_OW 86
// Init_Win_Condition ;
5261: CALL 15019 0 0
// end ; AnimateTrees ( true ) ;
5265: LD_INT 1
5267: PPUSH
5268: CALL_OW 573
// InitApeman ;
5272: CALL 6047 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
5276: LD_ADDR_EXP 62
5280: PUSH
5281: LD_INT 9
5283: PUSH
5284: LD_INT 10
5286: PUSH
5287: LD_INT 11
5289: PUSH
5290: LD_INT 12
5292: PUSH
5293: LD_INT 13
5295: PUSH
5296: LD_INT 14
5298: PUSH
5299: EMPTY
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: ST_TO_ADDR
// BeginBuildUp ;
5307: CALL 14421 0 0
// end ; end_of_file
5311: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5312: GO 5314
5314: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5315: LD_INT 4
5317: PPUSH
5318: LD_INT 5
5320: PPUSH
5321: CALL_OW 12
5325: PPUSH
5326: LD_INT 1
5328: PPUSH
5329: CALL_OW 57
// enable ;
5333: ENABLE
// end ;
5334: END
// every 1 1$0 marked 10 do
5335: GO 5337
5337: DISABLE
// begin repeat wait ( shipments_density / 100 * rand ( 0 0$50 , 1 1$00 ) ) ;
5338: LD_EXP 28
5342: PUSH
5343: LD_INT 100
5345: DIVREAL
5346: PUSH
5347: LD_INT 1750
5349: PPUSH
5350: LD_INT 2100
5352: PPUSH
5353: CALL_OW 12
5357: MUL
5358: PPUSH
5359: CALL_OW 67
// if GetResourceArea ( MZSpecialArea , mat_cans ) < 60 then
5363: LD_INT 17
5365: PPUSH
5366: LD_INT 1
5368: PPUSH
5369: CALL_OW 287
5373: PUSH
5374: LD_INT 60
5376: LESS
5377: IFFALSE 5400
// CreateCratesArea ( Rand ( 3 , 5 ) , MZSpecialArea , true ) ;
5379: LD_INT 3
5381: PPUSH
5382: LD_INT 5
5384: PPUSH
5385: CALL_OW 12
5389: PPUSH
5390: LD_INT 17
5392: PPUSH
5393: LD_INT 1
5395: PPUSH
5396: CALL_OW 55
// until tick >= 300 300$00 ;
5400: LD_OWVAR 1
5404: PUSH
5405: LD_INT 630000
5407: GREATEREQUAL
5408: IFFALSE 5338
// end ;
5410: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5411: GO 5413
5413: DISABLE
5414: LD_INT 0
5416: PPUSH
5417: PPUSH
// begin case tick of 1 .. 1 1$0 :
5418: LD_OWVAR 1
5422: PUSH
5423: LD_INT 1
5425: DOUBLE
5426: GREATEREQUAL
5427: IFFALSE 5435
5429: LD_INT 2100
5431: DOUBLE
5432: LESSEQUAL
5433: IFTRUE 5437
5435: GO 5465
5437: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5438: LD_EXP 28
5442: PUSH
5443: LD_INT 100
5445: DIVREAL
5446: PUSH
5447: LD_INT 525
5449: PPUSH
5450: LD_INT 1050
5452: PPUSH
5453: CALL_OW 12
5457: MUL
5458: PPUSH
5459: CALL_OW 67
5463: GO 5767
5465: LD_INT 2100
5467: PUSH
5468: LD_INT 1
5470: PLUS
5471: DOUBLE
5472: GREATEREQUAL
5473: IFFALSE 5481
5475: LD_INT 10500
5477: DOUBLE
5478: LESSEQUAL
5479: IFTRUE 5483
5481: GO 5511
5483: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5484: LD_EXP 28
5488: PUSH
5489: LD_INT 100
5491: DIVREAL
5492: PUSH
5493: LD_INT 1050
5495: PPUSH
5496: LD_INT 1750
5498: PPUSH
5499: CALL_OW 12
5503: MUL
5504: PPUSH
5505: CALL_OW 67
5509: GO 5767
5511: LD_INT 10500
5513: PUSH
5514: LD_INT 1
5516: PLUS
5517: DOUBLE
5518: GREATEREQUAL
5519: IFFALSE 5527
5521: LD_INT 21000
5523: DOUBLE
5524: LESSEQUAL
5525: IFTRUE 5529
5527: GO 5557
5529: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5530: LD_EXP 28
5534: PUSH
5535: LD_INT 100
5537: DIVREAL
5538: PUSH
5539: LD_INT 1750
5541: PPUSH
5542: LD_INT 2100
5544: PPUSH
5545: CALL_OW 12
5549: MUL
5550: PPUSH
5551: CALL_OW 67
5555: GO 5767
5557: LD_INT 21000
5559: PUSH
5560: LD_INT 1
5562: PLUS
5563: DOUBLE
5564: GREATEREQUAL
5565: IFFALSE 5573
5567: LD_INT 42000
5569: DOUBLE
5570: LESSEQUAL
5571: IFTRUE 5575
5573: GO 5603
5575: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5576: LD_EXP 28
5580: PUSH
5581: LD_INT 100
5583: DIVREAL
5584: PUSH
5585: LD_INT 2100
5587: PPUSH
5588: LD_INT 2275
5590: PPUSH
5591: CALL_OW 12
5595: MUL
5596: PPUSH
5597: CALL_OW 67
5601: GO 5767
5603: LD_INT 42000
5605: PUSH
5606: LD_INT 1
5608: PLUS
5609: DOUBLE
5610: GREATEREQUAL
5611: IFFALSE 5619
5613: LD_INT 63000
5615: DOUBLE
5616: LESSEQUAL
5617: IFTRUE 5621
5619: GO 5649
5621: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5622: LD_EXP 28
5626: PUSH
5627: LD_INT 100
5629: DIVREAL
5630: PUSH
5631: LD_INT 2275
5633: PPUSH
5634: LD_INT 2450
5636: PPUSH
5637: CALL_OW 12
5641: MUL
5642: PPUSH
5643: CALL_OW 67
5647: GO 5767
5649: LD_INT 63000
5651: PUSH
5652: LD_INT 1
5654: PLUS
5655: DOUBLE
5656: GREATEREQUAL
5657: IFFALSE 5665
5659: LD_INT 105000
5661: DOUBLE
5662: LESSEQUAL
5663: IFTRUE 5667
5665: GO 5695
5667: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5668: LD_EXP 28
5672: PUSH
5673: LD_INT 100
5675: DIVREAL
5676: PUSH
5677: LD_INT 2450
5679: PPUSH
5680: LD_INT 2800
5682: PPUSH
5683: CALL_OW 12
5687: MUL
5688: PPUSH
5689: CALL_OW 67
5693: GO 5767
5695: LD_INT 105000
5697: PUSH
5698: LD_INT 1
5700: PLUS
5701: DOUBLE
5702: GREATEREQUAL
5703: IFFALSE 5711
5705: LD_INT 630000
5707: DOUBLE
5708: LESSEQUAL
5709: IFTRUE 5713
5711: GO 5741
5713: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5714: LD_EXP 28
5718: PUSH
5719: LD_INT 100
5721: DIVREAL
5722: PUSH
5723: LD_INT 2800
5725: PPUSH
5726: LD_INT 3500
5728: PPUSH
5729: CALL_OW 12
5733: MUL
5734: PPUSH
5735: CALL_OW 67
5739: GO 5767
5741: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5742: LD_EXP 28
5746: PUSH
5747: LD_INT 100
5749: DIVREAL
5750: PUSH
5751: LD_INT 3500
5753: PPUSH
5754: LD_INT 3850
5756: PPUSH
5757: CALL_OW 12
5761: MUL
5762: PPUSH
5763: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5767: LD_ADDR_VAR 0 2
5771: PUSH
5772: LD_INT 3
5774: PPUSH
5775: LD_INT 5
5777: PPUSH
5778: CALL_OW 12
5782: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5783: LD_ADDR_VAR 0 1
5787: PUSH
5788: LD_EXP 38
5792: PUSH
5793: LD_INT 0
5795: PUSH
5796: EMPTY
5797: LIST
5798: DIFF
5799: PUSH
5800: FOR_IN
5801: IFFALSE 5850
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5803: LD_VAR 0 2
5807: PPUSH
5808: LD_EXP 43
5812: PUSH
5813: LD_VAR 0 1
5817: ARRAY
5818: PUSH
5819: LD_INT 1
5821: ARRAY
5822: PPUSH
5823: LD_EXP 43
5827: PUSH
5828: LD_VAR 0 1
5832: ARRAY
5833: PUSH
5834: LD_INT 2
5836: ARRAY
5837: PPUSH
5838: LD_INT 20
5840: PPUSH
5841: LD_INT 1
5843: PPUSH
5844: CALL_OW 56
5848: GO 5800
5850: POP
5851: POP
// enable ;
5852: ENABLE
// end ; end_of_file
5853: PPOPN 2
5855: END
// every 20 20$00 trigger apemanNumber do
5856: LD_EXP 53
5860: IFFALSE 5893
5862: GO 5864
5864: DISABLE
// begin enable ;
5865: ENABLE
// if apeLevel >= 8 then
5866: LD_EXP 58
5870: PUSH
5871: LD_INT 8
5873: GREATEREQUAL
5874: IFFALSE 5879
// disable else
5876: DISABLE
5877: GO 5893
// apeLevel := apeLevel + 1 ;
5879: LD_ADDR_EXP 58
5883: PUSH
5884: LD_EXP 58
5888: PUSH
5889: LD_INT 1
5891: PLUS
5892: ST_TO_ADDR
// end ;
5893: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5894: LD_EXP 53
5898: PUSH
5899: LD_EXP 54
5903: LESS
5904: IFFALSE 6044
5906: GO 5908
5908: DISABLE
5909: LD_INT 0
5911: PPUSH
5912: PPUSH
5913: PPUSH
5914: PPUSH
// begin enable ;
5915: ENABLE
// for i := 1 to apemanPos do
5916: LD_ADDR_VAR 0 1
5920: PUSH
5921: DOUBLE
5922: LD_INT 1
5924: DEC
5925: ST_TO_ADDR
5926: LD_EXP 56
5930: PUSH
5931: FOR_TO
5932: IFFALSE 6042
// begin if apemanPlayerCount [ i ] then
5934: LD_EXP 57
5938: PUSH
5939: LD_VAR 0 1
5943: ARRAY
5944: IFFALSE 6040
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5946: LD_EXP 57
5950: PUSH
5951: LD_VAR 0 1
5955: ARRAY
5956: PUSH
5957: LD_EXP 56
5961: PUSH
5962: LD_VAR 0 1
5966: ARRAY
5967: GREATER
5968: IFFALSE 6040
// begin ape := PrepareApeman ;
5970: LD_ADDR_VAR 0 2
5974: PUSH
5975: CALL 6555 0 0
5979: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5980: LD_VAR 0 2
5984: PPUSH
5985: LD_EXP 59
5989: PUSH
5990: LD_VAR 0 1
5994: ARRAY
5995: PPUSH
5996: LD_INT 0
5998: PPUSH
5999: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6003: LD_ADDR_EXP 56
6007: PUSH
6008: LD_EXP 56
6012: PPUSH
6013: LD_VAR 0 1
6017: PPUSH
6018: LD_EXP 56
6022: PUSH
6023: LD_VAR 0 1
6027: ARRAY
6028: PUSH
6029: LD_VAR 0 2
6033: UNION
6034: PPUSH
6035: CALL_OW 1
6039: ST_TO_ADDR
// end ; end ; end ;
6040: GO 5931
6042: POP
6043: POP
// end ;
6044: PPOPN 4
6046: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6047: LD_INT 0
6049: PPUSH
6050: PPUSH
6051: PPUSH
6052: PPUSH
6053: PPUSH
6054: PPUSH
6055: PPUSH
// playersAmount := 0 ;
6056: LD_ADDR_VAR 0 3
6060: PUSH
6061: LD_INT 0
6063: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
6064: LD_ADDR_VAR 0 7
6068: PUSH
6069: LD_INT 1
6071: PUSH
6072: LD_INT 2
6074: PUSH
6075: LD_INT 3
6077: PUSH
6078: LD_INT 4
6080: PUSH
6081: LD_INT 5
6083: PUSH
6084: LD_INT 6
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6095: LD_ADDR_EXP 59
6099: PUSH
6100: LD_INT 0
6102: PUSH
6103: LD_INT 0
6105: PUSH
6106: LD_INT 0
6108: PUSH
6109: LD_INT 0
6111: PUSH
6112: LD_INT 0
6114: PUSH
6115: LD_INT 0
6117: PUSH
6118: LD_INT 0
6120: PUSH
6121: LD_INT 0
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: ST_TO_ADDR
// for j = 1 to Side_Positions do
6134: LD_ADDR_VAR 0 4
6138: PUSH
6139: DOUBLE
6140: LD_INT 1
6142: DEC
6143: ST_TO_ADDR
6144: LD_EXP 38
6148: PUSH
6149: FOR_TO
6150: IFFALSE 6217
// if Side_Positions [ j ] then
6152: LD_EXP 38
6156: PUSH
6157: LD_VAR 0 4
6161: ARRAY
6162: IFFALSE 6215
// begin playersAmount := playersAmount + 1 ;
6164: LD_ADDR_VAR 0 3
6168: PUSH
6169: LD_VAR 0 3
6173: PUSH
6174: LD_INT 1
6176: PLUS
6177: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6178: LD_ADDR_EXP 59
6182: PUSH
6183: LD_EXP 59
6187: PPUSH
6188: LD_VAR 0 4
6192: PPUSH
6193: LD_VAR 0 7
6197: PUSH
6198: LD_EXP 38
6202: PUSH
6203: LD_VAR 0 4
6207: ARRAY
6208: ARRAY
6209: PPUSH
6210: CALL_OW 1
6214: ST_TO_ADDR
// end ;
6215: GO 6149
6217: POP
6218: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6219: LD_ADDR_EXP 55
6223: PUSH
6224: LD_INT 3
6226: PUSH
6227: LD_EXP 30
6231: MUL
6232: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6233: LD_ADDR_EXP 53
6237: PUSH
6238: LD_VAR 0 3
6242: PUSH
6243: LD_EXP 55
6247: MUL
6248: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6249: LD_ADDR_EXP 54
6253: PUSH
6254: LD_EXP 53
6258: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6259: LD_ADDR_EXP 56
6263: PUSH
6264: LD_INT 0
6266: PUSH
6267: LD_INT 0
6269: PUSH
6270: LD_INT 0
6272: PUSH
6273: LD_INT 0
6275: PUSH
6276: LD_INT 0
6278: PUSH
6279: LD_INT 0
6281: PUSH
6282: LD_INT 0
6284: PUSH
6285: LD_INT 0
6287: PUSH
6288: EMPTY
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6298: LD_ADDR_EXP 57
6302: PUSH
6303: LD_INT 0
6305: PUSH
6306: LD_INT 0
6308: PUSH
6309: LD_INT 0
6311: PUSH
6312: LD_INT 0
6314: PUSH
6315: LD_INT 0
6317: PUSH
6318: LD_INT 0
6320: PUSH
6321: LD_INT 0
6323: PUSH
6324: LD_INT 0
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: ST_TO_ADDR
// apeLevel := 1 ;
6337: LD_ADDR_EXP 58
6341: PUSH
6342: LD_INT 1
6344: ST_TO_ADDR
// if not apemanNumber then
6345: LD_EXP 53
6349: NOT
6350: IFFALSE 6354
// exit ;
6352: GO 6550
// for i := 1 to apemanPerPlayer do
6354: LD_ADDR_VAR 0 2
6358: PUSH
6359: DOUBLE
6360: LD_INT 1
6362: DEC
6363: ST_TO_ADDR
6364: LD_EXP 55
6368: PUSH
6369: FOR_TO
6370: IFFALSE 6548
// begin for j := 1 to Side_Positions do
6372: LD_ADDR_VAR 0 4
6376: PUSH
6377: DOUBLE
6378: LD_INT 1
6380: DEC
6381: ST_TO_ADDR
6382: LD_EXP 38
6386: PUSH
6387: FOR_TO
6388: IFFALSE 6544
// if Side_Positions [ j ] then
6390: LD_EXP 38
6394: PUSH
6395: LD_VAR 0 4
6399: ARRAY
6400: IFFALSE 6542
// begin pos := Side_Positions [ j ] ;
6402: LD_ADDR_VAR 0 6
6406: PUSH
6407: LD_EXP 38
6411: PUSH
6412: LD_VAR 0 4
6416: ARRAY
6417: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6418: LD_ADDR_EXP 57
6422: PUSH
6423: LD_EXP 57
6427: PPUSH
6428: LD_VAR 0 4
6432: PPUSH
6433: LD_EXP 57
6437: PUSH
6438: LD_VAR 0 4
6442: ARRAY
6443: PUSH
6444: LD_INT 1
6446: PLUS
6447: PPUSH
6448: CALL_OW 1
6452: ST_TO_ADDR
// ape := PrepareApeman ;
6453: LD_ADDR_VAR 0 5
6457: PUSH
6458: CALL 6555 0 0
6462: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6463: LD_ADDR_EXP 56
6467: PUSH
6468: LD_EXP 56
6472: PPUSH
6473: LD_VAR 0 4
6477: PPUSH
6478: LD_EXP 56
6482: PUSH
6483: LD_VAR 0 4
6487: ARRAY
6488: PPUSH
6489: LD_EXP 56
6493: PUSH
6494: LD_VAR 0 4
6498: ARRAY
6499: PUSH
6500: LD_INT 1
6502: PLUS
6503: PPUSH
6504: LD_VAR 0 5
6508: PPUSH
6509: CALL_OW 1
6513: PPUSH
6514: CALL_OW 1
6518: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6519: LD_VAR 0 5
6523: PPUSH
6524: LD_EXP 59
6528: PUSH
6529: LD_VAR 0 4
6533: ARRAY
6534: PPUSH
6535: LD_INT 0
6537: PPUSH
6538: CALL_OW 49
// end ;
6542: GO 6387
6544: POP
6545: POP
// end ;
6546: GO 6369
6548: POP
6549: POP
// end ;
6550: LD_VAR 0 1
6554: RET
// export function PrepareApeman ; var bonus ; begin
6555: LD_INT 0
6557: PPUSH
6558: PPUSH
// uc_side := 0 ;
6559: LD_ADDR_OWVAR 20
6563: PUSH
6564: LD_INT 0
6566: ST_TO_ADDR
// uc_nation := 0 ;
6567: LD_ADDR_OWVAR 21
6571: PUSH
6572: LD_INT 0
6574: ST_TO_ADDR
// InitHc ;
6575: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
6579: LD_ADDR_VAR 0 2
6583: PUSH
6584: LD_INT 1
6586: NEG
6587: PUSH
6588: LD_INT 0
6590: PUSH
6591: LD_INT 1
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 25
6601: PUSH
6602: LD_INT 12
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PPUSH
6609: CALL_OW 69
6613: PUSH
6614: LD_INT 3
6616: MOD
6617: PUSH
6618: LD_INT 1
6620: PLUS
6621: ARRAY
6622: ST_TO_ADDR
// hc_class := class_apeman ;
6623: LD_ADDR_OWVAR 28
6627: PUSH
6628: LD_INT 12
6630: ST_TO_ADDR
// hc_gallery :=  ;
6631: LD_ADDR_OWVAR 33
6635: PUSH
6636: LD_STRING 
6638: ST_TO_ADDR
// hc_name :=  ;
6639: LD_ADDR_OWVAR 26
6643: PUSH
6644: LD_STRING 
6646: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6647: LD_ADDR_OWVAR 31
6651: PUSH
6652: LD_EXP 58
6656: PUSH
6657: LD_VAR 0 2
6661: PLUS
6662: PUSH
6663: LD_EXP 58
6667: PUSH
6668: LD_VAR 0 2
6672: PLUS
6673: PUSH
6674: LD_EXP 58
6678: PUSH
6679: LD_VAR 0 2
6683: PLUS
6684: PUSH
6685: LD_EXP 58
6689: PUSH
6690: LD_VAR 0 2
6694: PLUS
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6702: LD_ADDR_OWVAR 35
6706: PUSH
6707: LD_INT 10
6709: PUSH
6710: LD_VAR 0 2
6714: MUL
6715: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
6716: LD_ADDR_OWVAR 29
6720: PUSH
6721: LD_INT 12
6723: PUSH
6724: LD_INT 12
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: ST_TO_ADDR
// result := CreateHuman ;
6731: LD_ADDR_VAR 0 1
6735: PUSH
6736: CALL_OW 44
6740: ST_TO_ADDR
// end ;
6741: LD_VAR 0 1
6745: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6746: LD_INT 0
6748: PPUSH
6749: PPUSH
6750: PPUSH
// if not ape then
6751: LD_VAR 0 1
6755: NOT
6756: IFFALSE 6760
// exit ;
6758: GO 6885
// side := GetSide ( ape ) ;
6760: LD_ADDR_VAR 0 3
6764: PUSH
6765: LD_VAR 0 1
6769: PPUSH
6770: CALL_OW 255
6774: ST_TO_ADDR
// if not side then
6775: LD_VAR 0 3
6779: NOT
6780: IFFALSE 6834
// begin for i = 1 to apemanPos do
6782: LD_ADDR_VAR 0 4
6786: PUSH
6787: DOUBLE
6788: LD_INT 1
6790: DEC
6791: ST_TO_ADDR
6792: LD_EXP 56
6796: PUSH
6797: FOR_TO
6798: IFFALSE 6832
// if ape in apemanPos [ i ] then
6800: LD_VAR 0 1
6804: PUSH
6805: LD_EXP 56
6809: PUSH
6810: LD_VAR 0 4
6814: ARRAY
6815: IN
6816: IFFALSE 6830
// begin side := i ;
6818: LD_ADDR_VAR 0 3
6822: PUSH
6823: LD_VAR 0 4
6827: ST_TO_ADDR
// break ;
6828: GO 6832
// end ;
6830: GO 6797
6832: POP
6833: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6834: LD_ADDR_EXP 56
6838: PUSH
6839: LD_EXP 56
6843: PPUSH
6844: LD_VAR 0 3
6848: PPUSH
6849: LD_EXP 56
6853: PUSH
6854: LD_VAR 0 3
6858: ARRAY
6859: PUSH
6860: LD_VAR 0 1
6864: DIFF
6865: PPUSH
6866: CALL_OW 1
6870: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6871: LD_ADDR_EXP 53
6875: PUSH
6876: LD_EXP 53
6880: PUSH
6881: LD_INT 1
6883: MINUS
6884: ST_TO_ADDR
// end ; end_of_file
6885: LD_VAR 0 2
6889: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6890: LD_VAR 0 1
6894: PPUSH
6895: CALL_OW 266
6899: PUSH
6900: LD_INT 0
6902: PUSH
6903: LD_INT 1
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: IN
6910: IFFALSE 6935
// SetBName ( b , @ & GetSide ( b ) ) ;
6912: LD_VAR 0 1
6916: PPUSH
6917: LD_STRING @
6919: PUSH
6920: LD_VAR 0 1
6924: PPUSH
6925: CALL_OW 255
6929: STR
6930: PPUSH
6931: CALL_OW 500
// end ;
6935: PPOPN 2
6937: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6938: LD_VAR 0 1
6942: PPUSH
6943: CALL_OW 266
6947: PUSH
6948: LD_INT 0
6950: PUSH
6951: LD_INT 1
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: IN
6958: IFFALSE 6983
// SetBName ( b , @ & GetSide ( b ) ) ;
6960: LD_VAR 0 1
6964: PPUSH
6965: LD_STRING @
6967: PUSH
6968: LD_VAR 0 1
6972: PPUSH
6973: CALL_OW 255
6977: STR
6978: PPUSH
6979: CALL_OW 500
// end ;
6983: PPOPN 3
6985: END
// on VehicleConstructed ( veh , fac ) do var side ;
6986: LD_INT 0
6988: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6989: LD_VAR 0 1
6993: PPUSH
6994: CALL_OW 263
6998: PUSH
6999: LD_INT 5
7001: EQUAL
7002: IFFALSE 7144
// begin side := GetSide ( veh ) ;
7004: LD_ADDR_VAR 0 3
7008: PUSH
7009: LD_VAR 0 1
7013: PPUSH
7014: CALL_OW 255
7018: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7019: LD_ADDR_EXP 56
7023: PUSH
7024: LD_EXP 56
7028: PPUSH
7029: LD_VAR 0 3
7033: PPUSH
7034: LD_EXP 56
7038: PUSH
7039: LD_VAR 0 3
7043: ARRAY
7044: PPUSH
7045: LD_INT 52
7047: PUSH
7048: EMPTY
7049: LIST
7050: PPUSH
7051: CALL_OW 72
7055: PUSH
7056: LD_INT 22
7058: PUSH
7059: LD_VAR 0 3
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: PUSH
7068: LD_INT 2
7070: PUSH
7071: LD_INT 33
7073: PUSH
7074: LD_INT 5
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: PUSH
7081: LD_INT 25
7083: PUSH
7084: LD_INT 12
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: PUSH
7091: LD_INT 25
7093: PUSH
7094: LD_INT 15
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PUSH
7101: LD_INT 25
7103: PUSH
7104: LD_INT 16
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: PUSH
7111: LD_INT 25
7113: PUSH
7114: LD_INT 17
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: PPUSH
7133: CALL_OW 69
7137: UNION
7138: PPUSH
7139: CALL_OW 1
7143: ST_TO_ADDR
// end ; end ;
7144: PPOPN 3
7146: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7147: LD_INT 0
7149: PPUSH
7150: PPUSH
7151: PPUSH
7152: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7153: LD_VAR 0 1
7157: PPUSH
7158: CALL_OW 257
7162: PUSH
7163: LD_INT 12
7165: PUSH
7166: LD_INT 15
7168: PUSH
7169: LD_INT 17
7171: PUSH
7172: LD_INT 16
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: IN
7181: PUSH
7182: LD_VAR 0 1
7186: PPUSH
7187: CALL_OW 263
7191: PUSH
7192: LD_INT 5
7194: EQUAL
7195: OR
7196: IFFALSE 7207
// ApeKilled ( j ) ;
7198: LD_VAR 0 1
7202: PPUSH
7203: CALL 6746 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7207: LD_VAR 0 1
7211: PPUSH
7212: CALL_OW 266
7216: PUSH
7217: LD_INT 0
7219: PUSH
7220: LD_INT 1
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: IN
7227: IFFALSE 7309
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7229: LD_ADDR_VAR 0 4
7233: PUSH
7234: LD_EXP 38
7238: PUSH
7239: LD_VAR 0 1
7243: PPUSH
7244: CALL_OW 255
7248: ARRAY
7249: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7250: LD_ADDR_VAR 0 2
7254: PUSH
7255: LD_EXP 43
7259: PUSH
7260: LD_VAR 0 4
7264: ARRAY
7265: PUSH
7266: LD_INT 1
7268: ARRAY
7269: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7270: LD_ADDR_VAR 0 3
7274: PUSH
7275: LD_EXP 43
7279: PUSH
7280: LD_VAR 0 4
7284: ARRAY
7285: PUSH
7286: LD_INT 2
7288: ARRAY
7289: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7290: LD_VAR 0 2
7294: PPUSH
7295: LD_VAR 0 3
7299: PPUSH
7300: CALL_OW 420
7304: PPUSH
7305: CALL_OW 419
// end ; end ;
7309: PPOPN 5
7311: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7312: LD_VAR 0 1
7316: PPUSH
7317: LD_VAR 0 2
7321: PPUSH
7322: LD_VAR 0 3
7326: PPUSH
7327: LD_OWVAR 2
7331: PPUSH
7332: CALL 9103 0 4
7336: PPOPN 3
7338: END
// every 0 0$1 marked 100 do var i , base , pom , filter , sib_mined ;
7339: GO 7341
7341: DISABLE
7342: LD_INT 0
7344: PPUSH
7345: PPUSH
7346: PPUSH
7347: PPUSH
7348: PPUSH
// begin sib_mined := [ ] ;
7349: LD_ADDR_VAR 0 5
7353: PUSH
7354: EMPTY
7355: ST_TO_ADDR
// for i := 1 to 8 do
7356: LD_ADDR_VAR 0 1
7360: PUSH
7361: DOUBLE
7362: LD_INT 1
7364: DEC
7365: ST_TO_ADDR
7366: LD_INT 8
7368: PUSH
7369: FOR_TO
7370: IFFALSE 7526
// if Side_Positions [ i ] then
7372: LD_EXP 38
7376: PUSH
7377: LD_VAR 0 1
7381: ARRAY
7382: IFFALSE 7510
// begin filter := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7384: LD_ADDR_VAR 0 4
7388: PUSH
7389: LD_INT 22
7391: PUSH
7392: LD_VAR 0 1
7396: PUSH
7397: EMPTY
7398: LIST
7399: LIST
7400: PUSH
7401: LD_INT 2
7403: PUSH
7404: LD_INT 30
7406: PUSH
7407: LD_INT 0
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PUSH
7414: LD_INT 30
7416: PUSH
7417: LD_INT 1
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: LIST
7428: PUSH
7429: EMPTY
7430: LIST
7431: LIST
7432: PPUSH
7433: CALL_OW 69
7437: ST_TO_ADDR
// pom := 0 ;
7438: LD_ADDR_VAR 0 3
7442: PUSH
7443: LD_INT 0
7445: ST_TO_ADDR
// for base in filter do
7446: LD_ADDR_VAR 0 2
7450: PUSH
7451: LD_VAR 0 4
7455: PUSH
7456: FOR_IN
7457: IFFALSE 7490
// pom := pom + GetResourceType ( GetBase ( base ) , mat_siberit ) ;
7459: LD_ADDR_VAR 0 3
7463: PUSH
7464: LD_VAR 0 3
7468: PUSH
7469: LD_VAR 0 2
7473: PPUSH
7474: CALL_OW 274
7478: PPUSH
7479: LD_INT 3
7481: PPUSH
7482: CALL_OW 275
7486: PLUS
7487: ST_TO_ADDR
7488: GO 7456
7490: POP
7491: POP
// sib_mined := sib_mined ^ pom ;
7492: LD_ADDR_VAR 0 5
7496: PUSH
7497: LD_VAR 0 5
7501: PUSH
7502: LD_VAR 0 3
7506: ADD
7507: ST_TO_ADDR
// end else
7508: GO 7524
// sib_mined := sib_mined ^ 0 ;
7510: LD_ADDR_VAR 0 5
7514: PUSH
7515: LD_VAR 0 5
7519: PUSH
7520: LD_INT 0
7522: ADD
7523: ST_TO_ADDR
7524: GO 7369
7526: POP
7527: POP
// if not def_public_score then
7528: LD_EXP 14
7532: NOT
7533: IFFALSE 7623
// begin ExtraStrings := [ ] ;
7535: LD_ADDR_EXP 60
7539: PUSH
7540: EMPTY
7541: ST_TO_ADDR
// for i := 1 to 8 do
7542: LD_ADDR_VAR 0 1
7546: PUSH
7547: DOUBLE
7548: LD_INT 1
7550: DEC
7551: ST_TO_ADDR
7552: LD_INT 8
7554: PUSH
7555: FOR_TO
7556: IFFALSE 7619
// if Side_Positions [ i ] then
7558: LD_EXP 38
7562: PUSH
7563: LD_VAR 0 1
7567: ARRAY
7568: IFFALSE 7617
// ExtraStrings := ExtraStrings ^ [ #AlienBase-MinedPublic , i , i , sib_mined [ i ] , amount_of_siberit ] ;
7570: LD_ADDR_EXP 60
7574: PUSH
7575: LD_EXP 60
7579: PUSH
7580: LD_STRING #AlienBase-MinedPublic
7582: PUSH
7583: LD_VAR 0 1
7587: PUSH
7588: LD_VAR 0 1
7592: PUSH
7593: LD_VAR 0 5
7597: PUSH
7598: LD_VAR 0 1
7602: ARRAY
7603: PUSH
7604: LD_EXP 31
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: ADD
7616: ST_TO_ADDR
7617: GO 7555
7619: POP
7620: POP
// end else
7621: GO 7652
// ExtraStrings := [ #AlienBase-Mined , sib_mined [ Your_Side ] , amount_of_siberit ] ;
7623: LD_ADDR_EXP 60
7627: PUSH
7628: LD_STRING #AlienBase-Mined
7630: PUSH
7631: LD_VAR 0 5
7635: PUSH
7636: LD_OWVAR 2
7640: ARRAY
7641: PUSH
7642: LD_EXP 31
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: LIST
7651: ST_TO_ADDR
// for i := 1 to 8 do
7652: LD_ADDR_VAR 0 1
7656: PUSH
7657: DOUBLE
7658: LD_INT 1
7660: DEC
7661: ST_TO_ADDR
7662: LD_INT 8
7664: PUSH
7665: FOR_TO
7666: IFFALSE 7723
// if sib_mined [ i ] >= amount_of_siberit then
7668: LD_VAR 0 5
7672: PUSH
7673: LD_VAR 0 1
7677: ARRAY
7678: PUSH
7679: LD_EXP 31
7683: GREATEREQUAL
7684: IFFALSE 7721
// begin wait ( 0 0$1 ) ;
7686: LD_INT 35
7688: PPUSH
7689: CALL_OW 67
// if sib_mined [ your_side ] >= amount_of_siberit then
7693: LD_VAR 0 5
7697: PUSH
7698: LD_OWVAR 2
7702: ARRAY
7703: PUSH
7704: LD_EXP 31
7708: GREATEREQUAL
7709: IFFALSE 7717
// YouWinInMultiplayer else
7711: CALL_OW 106
7715: GO 7721
// YouLostInMultiplayer ;
7717: CALL_OW 107
// end ;
7721: GO 7665
7723: POP
7724: POP
// enable ;
7725: ENABLE
// end ; end_of_file
7726: PPOPN 5
7728: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7729: LD_INT 0
7731: PPUSH
7732: PPUSH
// for un in battle_flags_id do
7733: LD_ADDR_VAR 0 2
7737: PUSH
7738: LD_EXP 48
7742: PUSH
7743: FOR_IN
7744: IFFALSE 7819
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7746: LD_VAR 0 2
7750: PPUSH
7751: LD_INT 1
7753: PUSH
7754: LD_LOC 9
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: PUSH
7763: LD_INT 2
7765: PUSH
7766: LD_LOC 9
7770: PUSH
7771: LD_INT 2
7773: DIV
7774: PUSH
7775: EMPTY
7776: LIST
7777: LIST
7778: PUSH
7779: LD_INT 3
7781: PUSH
7782: LD_LOC 9
7786: PUSH
7787: LD_INT 5
7789: DIV
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: PUSH
7795: LD_INT 20
7797: PUSH
7798: LD_LOC 9
7802: PUSH
7803: EMPTY
7804: LIST
7805: LIST
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: PPUSH
7813: CALL_OW 423
7817: GO 7743
7819: POP
7820: POP
// end ;
7821: LD_VAR 0 1
7825: RET
// every 1 do var un ;
7826: GO 7828
7828: DISABLE
7829: LD_INT 0
7831: PPUSH
// begin if not def_morale_flags then
7832: LD_EXP 9
7836: NOT
7837: IFFALSE 7841
// exit ;
7839: GO 7918
// if not morale_decreasing_time then
7841: LD_EXP 29
7845: NOT
7846: IFFALSE 7850
// exit ;
7848: GO 7918
// strength = 100 ;
7850: LD_ADDR_LOC 9
7854: PUSH
7855: LD_INT 100
7857: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7858: LD_EXP 29
7862: PPUSH
7863: CALL_OW 67
// strength := strength - 1 ;
7867: LD_ADDR_LOC 9
7871: PUSH
7872: LD_LOC 9
7876: PUSH
7877: LD_INT 1
7879: MINUS
7880: ST_TO_ADDR
// Update_Flags ;
7881: CALL 7729 0 0
// until not strength ;
7885: LD_LOC 9
7889: NOT
7890: IFFALSE 7858
// for un in battle_flags_id do
7892: LD_ADDR_VAR 0 1
7896: PUSH
7897: LD_EXP 48
7901: PUSH
7902: FOR_IN
7903: IFFALSE 7916
// KillBattleFlag ( un ) ;
7905: LD_VAR 0 1
7909: PPUSH
7910: CALL_OW 419
7914: GO 7902
7916: POP
7917: POP
// end ; end_of_file
7918: PPOPN 1
7920: END
// var BloodGods , BloodGods_LastKills , BloodGods_CurrentKills , BloodGods_Positions ; every 0 0$3 marked 200 do var x ;
7921: GO 7923
7923: DISABLE
7924: LD_INT 0
7926: PPUSH
// begin enable ;
7927: ENABLE
// for x := 1 to 8 do
7928: LD_ADDR_VAR 0 1
7932: PUSH
7933: DOUBLE
7934: LD_INT 1
7936: DEC
7937: ST_TO_ADDR
7938: LD_INT 8
7940: PUSH
7941: FOR_TO
7942: IFFALSE 8026
// if ( BloodGods_CurrentKills [ x ] > 5 ) and ( BloodGods [ x ] = - 1 ) then
7944: LD_LOC 16
7948: PUSH
7949: LD_VAR 0 1
7953: ARRAY
7954: PUSH
7955: LD_INT 5
7957: GREATER
7958: PUSH
7959: LD_LOC 14
7963: PUSH
7964: LD_VAR 0 1
7968: ARRAY
7969: PUSH
7970: LD_INT 1
7972: NEG
7973: EQUAL
7974: AND
7975: IFFALSE 8024
// begin BloodGods_LastKills := Replace ( BloodGods_LastKills , x , BloodGods_LastKills [ x ] + 6 ) ;
7977: LD_ADDR_LOC 15
7981: PUSH
7982: LD_LOC 15
7986: PPUSH
7987: LD_VAR 0 1
7991: PPUSH
7992: LD_LOC 15
7996: PUSH
7997: LD_VAR 0 1
8001: ARRAY
8002: PUSH
8003: LD_INT 6
8005: PLUS
8006: PPUSH
8007: CALL_OW 1
8011: ST_TO_ADDR
// AwakenBloodGod ( x , false ) ;
8012: LD_VAR 0 1
8016: PPUSH
8017: LD_INT 0
8019: PPUSH
8020: CALL 8198 0 2
// end ;
8024: GO 7941
8026: POP
8027: POP
// end ;
8028: PPOPN 1
8030: END
// every 0 0$1 marked 200 do var BGL , x ;
8031: GO 8033
8033: DISABLE
8034: LD_INT 0
8036: PPUSH
8037: PPUSH
// begin enable ;
8038: ENABLE
// for x := 1 to 8 do
8039: LD_ADDR_VAR 0 2
8043: PUSH
8044: DOUBLE
8045: LD_INT 1
8047: DEC
8048: ST_TO_ADDR
8049: LD_INT 8
8051: PUSH
8052: FOR_TO
8053: IFFALSE 8184
// if ( BloodGods [ x ] > - 1 ) and IsLive ( BloodGods [ x ] ) then
8055: LD_LOC 14
8059: PUSH
8060: LD_VAR 0 2
8064: ARRAY
8065: PUSH
8066: LD_INT 1
8068: NEG
8069: GREATER
8070: PUSH
8071: LD_LOC 14
8075: PUSH
8076: LD_VAR 0 2
8080: ARRAY
8081: PPUSH
8082: CALL_OW 300
8086: AND
8087: IFFALSE 8182
// begin BGL := GetLives ( BloodGods [ x ] ) ;
8089: LD_ADDR_VAR 0 1
8093: PUSH
8094: LD_LOC 14
8098: PUSH
8099: LD_VAR 0 2
8103: ARRAY
8104: PPUSH
8105: CALL_OW 256
8109: ST_TO_ADDR
// if ( BGL < 1000 ) and ( BGL > 100 ) then
8110: LD_VAR 0 1
8114: PUSH
8115: LD_INT 1000
8117: LESS
8118: PUSH
8119: LD_VAR 0 1
8123: PUSH
8124: LD_INT 100
8126: GREATER
8127: AND
8128: IFFALSE 8182
// begin BGL := BGL + 10 ;
8130: LD_ADDR_VAR 0 1
8134: PUSH
8135: LD_VAR 0 1
8139: PUSH
8140: LD_INT 10
8142: PLUS
8143: ST_TO_ADDR
// if BGL > 1000 then
8144: LD_VAR 0 1
8148: PUSH
8149: LD_INT 1000
8151: GREATER
8152: IFFALSE 8162
// BGL := 1000 ;
8154: LD_ADDR_VAR 0 1
8158: PUSH
8159: LD_INT 1000
8161: ST_TO_ADDR
// SetLives ( BloodGods [ x ] , BGL ) ;
8162: LD_LOC 14
8166: PUSH
8167: LD_VAR 0 2
8171: ARRAY
8172: PPUSH
8173: LD_VAR 0 1
8177: PPUSH
8178: CALL_OW 234
// end ; end ;
8182: GO 8052
8184: POP
8185: POP
// end ;
8186: PPOPN 2
8188: END
// every 0 0$1 marked 200 do
8189: GO 8191
8191: DISABLE
// begin DisplayTimeWithKills ;
8192: CALL 8439 0 0
// enable ;
8196: ENABLE
// end ;
8197: END
// function AwakenBloodGod ( side , NoDialog ) ; begin
8198: LD_INT 0
8200: PPUSH
// uc_direction := Rand ( 0 , 5 ) ;
8201: LD_ADDR_OWVAR 24
8205: PUSH
8206: LD_INT 0
8208: PPUSH
8209: LD_INT 5
8211: PPUSH
8212: CALL_OW 12
8216: ST_TO_ADDR
// PrepareHuman ( 1 , class_soldier , 15 ) ;
8217: LD_INT 1
8219: PPUSH
8220: LD_INT 1
8222: PPUSH
8223: LD_INT 15
8225: PPUSH
8226: CALL_OW 380
// hc_importance := 106 ;
8230: LD_ADDR_OWVAR 32
8234: PUSH
8235: LD_INT 106
8237: ST_TO_ADDR
// hc_name := Blood God of  & mp_sides_players_names [ side ] ;
8238: LD_ADDR_OWVAR 26
8242: PUSH
8243: LD_STRING Blood God of 
8245: PUSH
8246: LD_OWVAR 19
8250: PUSH
8251: LD_VAR 0 1
8255: ARRAY
8256: STR
8257: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
8258: LD_ADDR_OWVAR 21
8262: PUSH
8263: LD_EXP 39
8267: PUSH
8268: LD_VAR 0 1
8272: ARRAY
8273: ST_TO_ADDR
// uc_side := side ;
8274: LD_ADDR_OWVAR 20
8278: PUSH
8279: LD_VAR 0 1
8283: ST_TO_ADDR
// hc_noskilllimit := true ;
8284: LD_ADDR_OWVAR 76
8288: PUSH
8289: LD_INT 1
8291: ST_TO_ADDR
// hc_agressivity := 50 ;
8292: LD_ADDR_OWVAR 35
8296: PUSH
8297: LD_INT 50
8299: ST_TO_ADDR
// BloodGods := Replace ( BloodGods , Side , CreateHuman ) ;
8300: LD_ADDR_LOC 14
8304: PUSH
8305: LD_LOC 14
8309: PPUSH
8310: LD_VAR 0 1
8314: PPUSH
8315: CALL_OW 44
8319: PPUSH
8320: CALL_OW 1
8324: ST_TO_ADDR
// PlaceUnitXYR ( BloodGods [ side ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 1 ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 2 ] , 10 , false ) ;
8325: LD_LOC 14
8329: PUSH
8330: LD_VAR 0 1
8334: ARRAY
8335: PPUSH
8336: LD_LOC 17
8340: PUSH
8341: LD_EXP 38
8345: PUSH
8346: LD_VAR 0 1
8350: ARRAY
8351: ARRAY
8352: PUSH
8353: LD_INT 1
8355: ARRAY
8356: PPUSH
8357: LD_LOC 17
8361: PUSH
8362: LD_EXP 38
8366: PUSH
8367: LD_VAR 0 1
8371: ARRAY
8372: ARRAY
8373: PUSH
8374: LD_INT 2
8376: ARRAY
8377: PPUSH
8378: LD_INT 10
8380: PPUSH
8381: LD_INT 0
8383: PPUSH
8384: CALL_OW 50
// SetAttr ( BloodGods [ side ] , attr_stamina , 300 ) ;
8388: LD_LOC 14
8392: PUSH
8393: LD_VAR 0 1
8397: ARRAY
8398: PPUSH
8399: LD_INT 1
8401: PPUSH
8402: LD_INT 300
8404: PPUSH
8405: CALL_OW 239
// if not NoDialog then
8409: LD_VAR 0 2
8413: NOT
8414: IFFALSE 8434
// SayRadio ( BloodGods [ side ] , DLAwaken ) ;
8416: LD_LOC 14
8420: PUSH
8421: LD_VAR 0 1
8425: ARRAY
8426: PPUSH
8427: LD_STRING DLAwaken
8429: PPUSH
8430: CALL_OW 94
// end ;
8434: LD_VAR 0 3
8438: RET
// function DisplayTimeWithKills ; var x ; begin
8439: LD_INT 0
8441: PPUSH
8442: PPUSH
// ExtraStrings :=  ;
8443: LD_ADDR_EXP 60
8447: PUSH
8448: LD_STRING 
8450: ST_TO_ADDR
// for x = 1 to Side_Positions do
8451: LD_ADDR_VAR 0 2
8455: PUSH
8456: DOUBLE
8457: LD_INT 1
8459: DEC
8460: ST_TO_ADDR
8461: LD_EXP 38
8465: PUSH
8466: FOR_TO
8467: IFFALSE 8700
// if Side_Positions [ x ] then
8469: LD_EXP 38
8473: PUSH
8474: LD_VAR 0 2
8478: ARRAY
8479: IFFALSE 8698
// begin BloodGods_CurrentKills := Replace ( BloodGods_CurrentKills , x , GetHumansKilled ( x ) - BloodGods_LastKills [ x ] ) ;
8481: LD_ADDR_LOC 16
8485: PUSH
8486: LD_LOC 16
8490: PPUSH
8491: LD_VAR 0 2
8495: PPUSH
8496: LD_VAR 0 2
8500: PPUSH
8501: CALL_OW 515
8505: PUSH
8506: LD_LOC 15
8510: PUSH
8511: LD_VAR 0 2
8515: ARRAY
8516: MINUS
8517: PPUSH
8518: CALL_OW 1
8522: ST_TO_ADDR
// if ( BloodGods [ x ] > - 1 ) and ( IsLive ( BloodGods [ x ] ) ) then
8523: LD_LOC 14
8527: PUSH
8528: LD_VAR 0 2
8532: ARRAY
8533: PUSH
8534: LD_INT 1
8536: NEG
8537: GREATER
8538: PUSH
8539: LD_LOC 14
8543: PUSH
8544: LD_VAR 0 2
8548: ARRAY
8549: PPUSH
8550: CALL_OW 300
8554: AND
8555: IFFALSE 8588
// ExtraStrings = ExtraStrings ^ [ #godawoken , x , x ] else
8557: LD_ADDR_EXP 60
8561: PUSH
8562: LD_EXP 60
8566: PUSH
8567: LD_STRING #godawoken
8569: PUSH
8570: LD_VAR 0 2
8574: PUSH
8575: LD_VAR 0 2
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: LIST
8584: ADD
8585: ST_TO_ADDR
8586: GO 8698
// if ( BloodGods [ x ] > - 1 ) and ( IsDead ( BloodGods [ x ] ) ) then
8588: LD_LOC 14
8592: PUSH
8593: LD_VAR 0 2
8597: ARRAY
8598: PUSH
8599: LD_INT 1
8601: NEG
8602: GREATER
8603: PUSH
8604: LD_LOC 14
8608: PUSH
8609: LD_VAR 0 2
8613: ARRAY
8614: PPUSH
8615: CALL_OW 301
8619: AND
8620: IFFALSE 8653
// ExtraStrings = ExtraStrings ^ [ #goddied , x , x ] else
8622: LD_ADDR_EXP 60
8626: PUSH
8627: LD_EXP 60
8631: PUSH
8632: LD_STRING #goddied
8634: PUSH
8635: LD_VAR 0 2
8639: PUSH
8640: LD_VAR 0 2
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: LIST
8649: ADD
8650: ST_TO_ADDR
8651: GO 8698
// ExtraStrings = ExtraStrings ^ [ #godssacrifise , x , x , BloodGods_CurrentKills [ x ] , 6 ] end ;
8653: LD_ADDR_EXP 60
8657: PUSH
8658: LD_EXP 60
8662: PUSH
8663: LD_STRING #godssacrifise
8665: PUSH
8666: LD_VAR 0 2
8670: PUSH
8671: LD_VAR 0 2
8675: PUSH
8676: LD_LOC 16
8680: PUSH
8681: LD_VAR 0 2
8685: ARRAY
8686: PUSH
8687: LD_INT 6
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: ADD
8697: ST_TO_ADDR
8698: GO 8466
8700: POP
8701: POP
// end ;
8702: LD_VAR 0 1
8706: RET
// export function InitBloodGods ; begin
8707: LD_INT 0
8709: PPUSH
// BloodGods = [ - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 ] ;
8710: LD_ADDR_LOC 14
8714: PUSH
8715: LD_INT 1
8717: NEG
8718: PUSH
8719: LD_INT 1
8721: NEG
8722: PUSH
8723: LD_INT 1
8725: NEG
8726: PUSH
8727: LD_INT 1
8729: NEG
8730: PUSH
8731: LD_INT 1
8733: NEG
8734: PUSH
8735: LD_INT 1
8737: NEG
8738: PUSH
8739: LD_INT 1
8741: NEG
8742: PUSH
8743: LD_INT 1
8745: NEG
8746: PUSH
8747: EMPTY
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: ST_TO_ADDR
// BloodGods_LastKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8757: LD_ADDR_LOC 15
8761: PUSH
8762: LD_INT 0
8764: PUSH
8765: LD_INT 0
8767: PUSH
8768: LD_INT 0
8770: PUSH
8771: LD_INT 0
8773: PUSH
8774: LD_INT 0
8776: PUSH
8777: LD_INT 0
8779: PUSH
8780: LD_INT 0
8782: PUSH
8783: LD_INT 0
8785: PUSH
8786: EMPTY
8787: LIST
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: ST_TO_ADDR
// BloodGods_CurrentKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8796: LD_ADDR_LOC 16
8800: PUSH
8801: LD_INT 0
8803: PUSH
8804: LD_INT 0
8806: PUSH
8807: LD_INT 0
8809: PUSH
8810: LD_INT 0
8812: PUSH
8813: LD_INT 0
8815: PUSH
8816: LD_INT 0
8818: PUSH
8819: LD_INT 0
8821: PUSH
8822: LD_INT 0
8824: PUSH
8825: EMPTY
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: ST_TO_ADDR
// BloodGods_Positions = [ [ 60 , 47 ] , [ 82 , 26 ] , [ 124 , 45 ] , [ 147 , 90 ] , [ 126 , 112 ] , [ 84 , 92 ] , [ 106 , 73 ] , [ 106 , 73 ] ] ;
8835: LD_ADDR_LOC 17
8839: PUSH
8840: LD_INT 60
8842: PUSH
8843: LD_INT 47
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: PUSH
8850: LD_INT 82
8852: PUSH
8853: LD_INT 26
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: PUSH
8860: LD_INT 124
8862: PUSH
8863: LD_INT 45
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: PUSH
8870: LD_INT 147
8872: PUSH
8873: LD_INT 90
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: PUSH
8880: LD_INT 126
8882: PUSH
8883: LD_INT 112
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PUSH
8890: LD_INT 84
8892: PUSH
8893: LD_INT 92
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: PUSH
8900: LD_INT 106
8902: PUSH
8903: LD_INT 73
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: PUSH
8910: LD_INT 106
8912: PUSH
8913: LD_INT 73
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: ST_TO_ADDR
// ClearHumansKilled ;
8930: CALL_OW 516
// enable ( 200 ) ;
8934: LD_INT 200
8936: ENABLE_MARKED
// end ; end_of_file
8937: LD_VAR 0 1
8941: RET
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
8942: LD_INT 0
8944: PPUSH
8945: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
8946: LD_ADDR_VAR 0 2
8950: PUSH
8951: LD_STRING #Multi1x1-Time
8953: PUSH
8954: LD_OWVAR 1
8958: PUSH
8959: EMPTY
8960: LIST
8961: LIST
8962: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
8963: LD_INT 0
8965: PUSH
8966: LD_EXP 34
8970: PUSH
8971: LD_OWVAR 1
8975: MINUS
8976: LESSEQUAL
8977: IFFALSE 9008
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
8979: LD_ADDR_VAR 0 2
8983: PUSH
8984: LD_VAR 0 2
8988: PUSH
8989: LD_STRING #allowedsibbomb
8991: PUSH
8992: LD_EXP 34
8996: PUSH
8997: LD_OWVAR 1
9001: MINUS
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: ADD
9007: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
9008: LD_INT 0
9010: PUSH
9011: LD_EXP 64
9015: PUSH
9016: LD_OWVAR 1
9020: MINUS
9021: LESSEQUAL
9022: IFFALSE 9053
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
9024: LD_ADDR_VAR 0 2
9028: PUSH
9029: LD_VAR 0 2
9033: PUSH
9034: LD_STRING #builduptime
9036: PUSH
9037: LD_EXP 64
9041: PUSH
9042: LD_OWVAR 1
9046: MINUS
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: ADD
9052: ST_TO_ADDR
// if ( ExtraStrings ) then
9053: LD_EXP 60
9057: IFFALSE 9079
// AllStrings := AllStrings ^  ^ ExtraStrings ;
9059: LD_ADDR_VAR 0 2
9063: PUSH
9064: LD_VAR 0 2
9068: PUSH
9069: LD_STRING 
9071: ADD
9072: PUSH
9073: LD_EXP 60
9077: ADD
9078: ST_TO_ADDR
// Display_Strings := AllStrings ;
9079: LD_ADDR_OWVAR 47
9083: PUSH
9084: LD_VAR 0 2
9088: ST_TO_ADDR
// end ;
9089: LD_VAR 0 1
9093: RET
// every 0 0$1 do
9094: GO 9096
9096: DISABLE
// begin ShowTimer ;
9097: CALL 8942 0 0
// enable ;
9101: ENABLE
// end ; end_of_file
9102: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
9103: LD_INT 0
9105: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
9106: LD_VAR 0 1
9110: PPUSH
9111: CALL_OW 255
9115: PUSH
9116: LD_VAR 0 4
9120: EQUAL
9121: IFFALSE 9140
// begin SetAchievement ( ACH_RAD ) ;
9123: LD_STRING ACH_RAD
9125: PPUSH
9126: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
9130: LD_STRING ACH_NL
9132: PPUSH
9133: LD_INT 1
9135: PPUSH
9136: CALL_OW 564
// end end ;
9140: LD_VAR 0 5
9144: RET
// export function SA_Win ( side ) ; begin
9145: LD_INT 0
9147: PPUSH
// case side of 1 :
9148: LD_VAR 0 1
9152: PUSH
9153: LD_INT 1
9155: DOUBLE
9156: EQUAL
9157: IFTRUE 9161
9159: GO 9174
9161: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
9162: LD_STRING ACH_AH
9164: PPUSH
9165: LD_INT 1
9167: PPUSH
9168: CALL_OW 564
9172: GO 9337
9174: LD_INT 2
9176: DOUBLE
9177: EQUAL
9178: IFTRUE 9182
9180: GO 9195
9182: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
9183: LD_STRING ACH_E
9185: PPUSH
9186: LD_INT 1
9188: PPUSH
9189: CALL_OW 564
9193: GO 9337
9195: LD_INT 3
9197: DOUBLE
9198: EQUAL
9199: IFTRUE 9203
9201: GO 9216
9203: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
9204: LD_STRING ACH_OOL
9206: PPUSH
9207: LD_INT 1
9209: PPUSH
9210: CALL_OW 564
9214: GO 9337
9216: LD_INT 1
9218: PUSH
9219: LD_INT 2
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: DOUBLE
9226: EQUAL
9227: IFTRUE 9231
9229: GO 9256
9231: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
9232: LD_STRING ACH_AH
9234: PPUSH
9235: LD_REAL  5.00000000000000E-0001
9238: PPUSH
9239: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
9243: LD_STRING ACH_E
9245: PPUSH
9246: LD_REAL  5.00000000000000E-0001
9249: PPUSH
9250: CALL_OW 564
// end ; [ 2 , 3 ] :
9254: GO 9337
9256: LD_INT 2
9258: PUSH
9259: LD_INT 3
9261: PUSH
9262: EMPTY
9263: LIST
9264: LIST
9265: DOUBLE
9266: EQUAL
9267: IFTRUE 9271
9269: GO 9296
9271: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
9272: LD_STRING ACH_OOL
9274: PPUSH
9275: LD_REAL  5.00000000000000E-0001
9278: PPUSH
9279: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
9283: LD_STRING ACH_E
9285: PPUSH
9286: LD_REAL  5.00000000000000E-0001
9289: PPUSH
9290: CALL_OW 564
// end ; [ 3 , 1 ] :
9294: GO 9337
9296: LD_INT 3
9298: PUSH
9299: LD_INT 1
9301: PUSH
9302: EMPTY
9303: LIST
9304: LIST
9305: DOUBLE
9306: EQUAL
9307: IFTRUE 9311
9309: GO 9336
9311: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
9312: LD_STRING ACH_AH
9314: PPUSH
9315: LD_REAL  5.00000000000000E-0001
9318: PPUSH
9319: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
9323: LD_STRING ACH_OOL
9325: PPUSH
9326: LD_REAL  5.00000000000000E-0001
9329: PPUSH
9330: CALL_OW 564
// end ; end ;
9334: GO 9337
9336: POP
// end ; end_of_file
9337: LD_VAR 0 2
9341: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9342: LD_INT 0
9344: PPUSH
9345: PPUSH
9346: PPUSH
// for side = 1 to 8 do
9347: LD_ADDR_VAR 0 2
9351: PUSH
9352: DOUBLE
9353: LD_INT 1
9355: DEC
9356: ST_TO_ADDR
9357: LD_INT 8
9359: PUSH
9360: FOR_TO
9361: IFFALSE 9482
// begin for i = 1 to 72 do
9363: LD_ADDR_VAR 0 3
9367: PUSH
9368: DOUBLE
9369: LD_INT 1
9371: DEC
9372: ST_TO_ADDR
9373: LD_INT 72
9375: PUSH
9376: FOR_TO
9377: IFFALSE 9408
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9379: LD_VAR 0 3
9383: PPUSH
9384: LD_VAR 0 2
9388: PPUSH
9389: LD_INT 0
9391: PPUSH
9392: LD_VAR 0 3
9396: PPUSH
9397: CALL_OW 565
9401: PPUSH
9402: CALL_OW 322
9406: GO 9376
9408: POP
9409: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9410: LD_INT 73
9412: PPUSH
9413: LD_VAR 0 2
9417: PPUSH
9418: LD_INT 0
9420: PPUSH
9421: LD_INT 25
9423: PPUSH
9424: CALL_OW 565
9428: PPUSH
9429: CALL_OW 322
// for i = 0 to 40 do
9433: LD_ADDR_VAR 0 3
9437: PUSH
9438: DOUBLE
9439: LD_INT 0
9441: DEC
9442: ST_TO_ADDR
9443: LD_INT 40
9445: PUSH
9446: FOR_TO
9447: IFFALSE 9478
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9449: LD_VAR 0 3
9453: PPUSH
9454: LD_VAR 0 2
9458: PPUSH
9459: LD_INT 1
9461: PPUSH
9462: LD_VAR 0 3
9466: PPUSH
9467: CALL_OW 565
9471: PPUSH
9472: CALL_OW 324
9476: GO 9446
9478: POP
9479: POP
// end ;
9480: GO 9360
9482: POP
9483: POP
// end ;
9484: LD_VAR 0 1
9488: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9489: LD_INT 0
9491: PPUSH
9492: PPUSH
9493: PPUSH
// for side = 1 to 8 do
9494: LD_ADDR_VAR 0 3
9498: PUSH
9499: DOUBLE
9500: LD_INT 1
9502: DEC
9503: ST_TO_ADDR
9504: LD_INT 8
9506: PUSH
9507: FOR_TO
9508: IFFALSE 13504
// begin for i = 1 to 73 do
9510: LD_ADDR_VAR 0 4
9514: PUSH
9515: DOUBLE
9516: LD_INT 1
9518: DEC
9519: ST_TO_ADDR
9520: LD_INT 73
9522: PUSH
9523: FOR_TO
9524: IFFALSE 9545
// SetTech ( i , side , state_disabled ) ;
9526: LD_VAR 0 4
9530: PPUSH
9531: LD_VAR 0 3
9535: PPUSH
9536: LD_INT 0
9538: PPUSH
9539: CALL_OW 322
9543: GO 9523
9545: POP
9546: POP
// for i = 0 to 40 do
9547: LD_ADDR_VAR 0 4
9551: PUSH
9552: DOUBLE
9553: LD_INT 0
9555: DEC
9556: ST_TO_ADDR
9557: LD_INT 40
9559: PUSH
9560: FOR_TO
9561: IFFALSE 9582
// SetRestrict ( i , side , false ) ;
9563: LD_VAR 0 4
9567: PPUSH
9568: LD_VAR 0 3
9572: PPUSH
9573: LD_INT 0
9575: PPUSH
9576: CALL_OW 324
9580: GO 9560
9582: POP
9583: POP
// case level of 1 :
9584: LD_VAR 0 1
9588: PUSH
9589: LD_INT 1
9591: DOUBLE
9592: EQUAL
9593: IFTRUE 9597
9595: GO 9750
9597: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9598: LD_INT 35
9600: PPUSH
9601: LD_VAR 0 3
9605: PPUSH
9606: LD_INT 1
9608: PPUSH
9609: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9613: LD_INT 45
9615: PPUSH
9616: LD_VAR 0 3
9620: PPUSH
9621: LD_INT 1
9623: PPUSH
9624: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9628: LD_INT 46
9630: PPUSH
9631: LD_VAR 0 3
9635: PPUSH
9636: LD_INT 1
9638: PPUSH
9639: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9643: LD_INT 47
9645: PPUSH
9646: LD_VAR 0 3
9650: PPUSH
9651: LD_INT 1
9653: PPUSH
9654: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9658: LD_INT 0
9660: PPUSH
9661: LD_VAR 0 3
9665: PPUSH
9666: LD_INT 1
9668: PPUSH
9669: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9673: LD_INT 2
9675: PPUSH
9676: LD_VAR 0 3
9680: PPUSH
9681: LD_INT 1
9683: PPUSH
9684: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9688: LD_INT 4
9690: PPUSH
9691: LD_VAR 0 3
9695: PPUSH
9696: LD_INT 1
9698: PPUSH
9699: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9703: LD_INT 6
9705: PPUSH
9706: LD_VAR 0 3
9710: PPUSH
9711: LD_INT 1
9713: PPUSH
9714: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9718: LD_INT 29
9720: PPUSH
9721: LD_VAR 0 3
9725: PPUSH
9726: LD_INT 1
9728: PPUSH
9729: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9733: LD_INT 31
9735: PPUSH
9736: LD_VAR 0 3
9740: PPUSH
9741: LD_INT 1
9743: PPUSH
9744: CALL_OW 324
// end ; 2 :
9748: GO 13502
9750: LD_INT 2
9752: DOUBLE
9753: EQUAL
9754: IFTRUE 9758
9756: GO 9956
9758: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9759: LD_INT 35
9761: PPUSH
9762: LD_VAR 0 3
9766: PPUSH
9767: LD_INT 1
9769: PPUSH
9770: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9774: LD_INT 45
9776: PPUSH
9777: LD_VAR 0 3
9781: PPUSH
9782: LD_INT 1
9784: PPUSH
9785: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9789: LD_INT 46
9791: PPUSH
9792: LD_VAR 0 3
9796: PPUSH
9797: LD_INT 1
9799: PPUSH
9800: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9804: LD_INT 47
9806: PPUSH
9807: LD_VAR 0 3
9811: PPUSH
9812: LD_INT 1
9814: PPUSH
9815: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9819: LD_INT 1
9821: PPUSH
9822: LD_VAR 0 3
9826: PPUSH
9827: LD_INT 1
9829: PPUSH
9830: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9834: LD_INT 2
9836: PPUSH
9837: LD_VAR 0 3
9841: PPUSH
9842: LD_INT 1
9844: PPUSH
9845: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9849: LD_INT 11
9851: PPUSH
9852: LD_VAR 0 3
9856: PPUSH
9857: LD_INT 1
9859: PPUSH
9860: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9864: LD_INT 0
9866: PPUSH
9867: LD_VAR 0 3
9871: PPUSH
9872: LD_INT 1
9874: PPUSH
9875: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9879: LD_INT 2
9881: PPUSH
9882: LD_VAR 0 3
9886: PPUSH
9887: LD_INT 1
9889: PPUSH
9890: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9894: LD_INT 4
9896: PPUSH
9897: LD_VAR 0 3
9901: PPUSH
9902: LD_INT 1
9904: PPUSH
9905: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9909: LD_INT 6
9911: PPUSH
9912: LD_VAR 0 3
9916: PPUSH
9917: LD_INT 1
9919: PPUSH
9920: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9924: LD_INT 29
9926: PPUSH
9927: LD_VAR 0 3
9931: PPUSH
9932: LD_INT 1
9934: PPUSH
9935: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9939: LD_INT 31
9941: PPUSH
9942: LD_VAR 0 3
9946: PPUSH
9947: LD_INT 1
9949: PPUSH
9950: CALL_OW 324
// end ; 3 :
9954: GO 13502
9956: LD_INT 3
9958: DOUBLE
9959: EQUAL
9960: IFTRUE 9964
9962: GO 10417
9964: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9965: LD_INT 35
9967: PPUSH
9968: LD_VAR 0 3
9972: PPUSH
9973: LD_INT 1
9975: PPUSH
9976: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9980: LD_INT 45
9982: PPUSH
9983: LD_VAR 0 3
9987: PPUSH
9988: LD_INT 1
9990: PPUSH
9991: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9995: LD_INT 46
9997: PPUSH
9998: LD_VAR 0 3
10002: PPUSH
10003: LD_INT 1
10005: PPUSH
10006: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10010: LD_INT 47
10012: PPUSH
10013: LD_VAR 0 3
10017: PPUSH
10018: LD_INT 1
10020: PPUSH
10021: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10025: LD_INT 1
10027: PPUSH
10028: LD_VAR 0 3
10032: PPUSH
10033: LD_INT 1
10035: PPUSH
10036: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10040: LD_INT 2
10042: PPUSH
10043: LD_VAR 0 3
10047: PPUSH
10048: LD_INT 1
10050: PPUSH
10051: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10055: LD_INT 11
10057: PPUSH
10058: LD_VAR 0 3
10062: PPUSH
10063: LD_INT 1
10065: PPUSH
10066: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10070: LD_INT 48
10072: PPUSH
10073: LD_VAR 0 3
10077: PPUSH
10078: LD_INT 1
10080: PPUSH
10081: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10085: LD_INT 69
10087: PPUSH
10088: LD_VAR 0 3
10092: PPUSH
10093: LD_INT 1
10095: PPUSH
10096: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10100: LD_INT 39
10102: PPUSH
10103: LD_VAR 0 3
10107: PPUSH
10108: LD_INT 1
10110: PPUSH
10111: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10115: LD_INT 43
10117: PPUSH
10118: LD_VAR 0 3
10122: PPUSH
10123: LD_INT 1
10125: PPUSH
10126: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10130: LD_INT 51
10132: PPUSH
10133: LD_VAR 0 3
10137: PPUSH
10138: LD_INT 1
10140: PPUSH
10141: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10145: LD_INT 6
10147: PPUSH
10148: LD_VAR 0 3
10152: PPUSH
10153: LD_INT 1
10155: PPUSH
10156: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10160: LD_INT 0
10162: PPUSH
10163: LD_VAR 0 3
10167: PPUSH
10168: LD_INT 1
10170: PPUSH
10171: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10175: LD_INT 2
10177: PPUSH
10178: LD_VAR 0 3
10182: PPUSH
10183: LD_INT 1
10185: PPUSH
10186: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10190: LD_INT 3
10192: PPUSH
10193: LD_VAR 0 3
10197: PPUSH
10198: LD_INT 1
10200: PPUSH
10201: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10205: LD_INT 4
10207: PPUSH
10208: LD_VAR 0 3
10212: PPUSH
10213: LD_INT 1
10215: PPUSH
10216: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10220: LD_INT 6
10222: PPUSH
10223: LD_VAR 0 3
10227: PPUSH
10228: LD_INT 1
10230: PPUSH
10231: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10235: LD_INT 7
10237: PPUSH
10238: LD_VAR 0 3
10242: PPUSH
10243: LD_INT 1
10245: PPUSH
10246: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10250: LD_INT 8
10252: PPUSH
10253: LD_VAR 0 3
10257: PPUSH
10258: LD_INT 1
10260: PPUSH
10261: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10265: LD_INT 10
10267: PPUSH
10268: LD_VAR 0 3
10272: PPUSH
10273: LD_INT 1
10275: PPUSH
10276: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10280: LD_INT 15
10282: PPUSH
10283: LD_VAR 0 3
10287: PPUSH
10288: LD_INT 1
10290: PPUSH
10291: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10295: LD_INT 16
10297: PPUSH
10298: LD_VAR 0 3
10302: PPUSH
10303: LD_INT 1
10305: PPUSH
10306: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10310: LD_INT 17
10312: PPUSH
10313: LD_VAR 0 3
10317: PPUSH
10318: LD_INT 1
10320: PPUSH
10321: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10325: LD_INT 20
10327: PPUSH
10328: LD_VAR 0 3
10332: PPUSH
10333: LD_INT 1
10335: PPUSH
10336: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10340: LD_INT 26
10342: PPUSH
10343: LD_VAR 0 3
10347: PPUSH
10348: LD_INT 1
10350: PPUSH
10351: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10355: LD_INT 27
10357: PPUSH
10358: LD_VAR 0 3
10362: PPUSH
10363: LD_INT 1
10365: PPUSH
10366: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10370: LD_INT 29
10372: PPUSH
10373: LD_VAR 0 3
10377: PPUSH
10378: LD_INT 1
10380: PPUSH
10381: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10385: LD_INT 31
10387: PPUSH
10388: LD_VAR 0 3
10392: PPUSH
10393: LD_INT 1
10395: PPUSH
10396: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10400: LD_INT 32
10402: PPUSH
10403: LD_VAR 0 3
10407: PPUSH
10408: LD_INT 1
10410: PPUSH
10411: CALL_OW 324
// end ; 4 :
10415: GO 13502
10417: LD_INT 4
10419: DOUBLE
10420: EQUAL
10421: IFTRUE 10425
10423: GO 11373
10425: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10426: LD_INT 35
10428: PPUSH
10429: LD_VAR 0 3
10433: PPUSH
10434: LD_INT 1
10436: PPUSH
10437: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10441: LD_INT 45
10443: PPUSH
10444: LD_VAR 0 3
10448: PPUSH
10449: LD_INT 1
10451: PPUSH
10452: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10456: LD_INT 46
10458: PPUSH
10459: LD_VAR 0 3
10463: PPUSH
10464: LD_INT 1
10466: PPUSH
10467: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10471: LD_INT 47
10473: PPUSH
10474: LD_VAR 0 3
10478: PPUSH
10479: LD_INT 1
10481: PPUSH
10482: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10486: LD_INT 1
10488: PPUSH
10489: LD_VAR 0 3
10493: PPUSH
10494: LD_INT 1
10496: PPUSH
10497: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10501: LD_INT 2
10503: PPUSH
10504: LD_VAR 0 3
10508: PPUSH
10509: LD_INT 1
10511: PPUSH
10512: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10516: LD_INT 11
10518: PPUSH
10519: LD_VAR 0 3
10523: PPUSH
10524: LD_INT 1
10526: PPUSH
10527: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10531: LD_INT 20
10533: PPUSH
10534: LD_VAR 0 3
10538: PPUSH
10539: LD_INT 1
10541: PPUSH
10542: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10546: LD_INT 48
10548: PPUSH
10549: LD_VAR 0 3
10553: PPUSH
10554: LD_INT 1
10556: PPUSH
10557: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10561: LD_INT 49
10563: PPUSH
10564: LD_VAR 0 3
10568: PPUSH
10569: LD_INT 1
10571: PPUSH
10572: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10576: LD_INT 69
10578: PPUSH
10579: LD_VAR 0 3
10583: PPUSH
10584: LD_INT 1
10586: PPUSH
10587: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10591: LD_INT 39
10593: PPUSH
10594: LD_VAR 0 3
10598: PPUSH
10599: LD_INT 1
10601: PPUSH
10602: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10606: LD_INT 34
10608: PPUSH
10609: LD_VAR 0 3
10613: PPUSH
10614: LD_INT 1
10616: PPUSH
10617: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10621: LD_INT 42
10623: PPUSH
10624: LD_VAR 0 3
10628: PPUSH
10629: LD_INT 1
10631: PPUSH
10632: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10636: LD_INT 44
10638: PPUSH
10639: LD_VAR 0 3
10643: PPUSH
10644: LD_INT 1
10646: PPUSH
10647: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10651: LD_INT 41
10653: PPUSH
10654: LD_VAR 0 3
10658: PPUSH
10659: LD_INT 1
10661: PPUSH
10662: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10666: LD_INT 43
10668: PPUSH
10669: LD_VAR 0 3
10673: PPUSH
10674: LD_INT 1
10676: PPUSH
10677: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10681: LD_INT 70
10683: PPUSH
10684: LD_VAR 0 3
10688: PPUSH
10689: LD_INT 1
10691: PPUSH
10692: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10696: LD_INT 51
10698: PPUSH
10699: LD_VAR 0 3
10703: PPUSH
10704: LD_INT 1
10706: PPUSH
10707: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10711: LD_INT 52
10713: PPUSH
10714: LD_VAR 0 3
10718: PPUSH
10719: LD_INT 1
10721: PPUSH
10722: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10726: LD_INT 6
10728: PPUSH
10729: LD_VAR 0 3
10733: PPUSH
10734: LD_INT 1
10736: PPUSH
10737: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10741: LD_INT 15
10743: PPUSH
10744: LD_VAR 0 3
10748: PPUSH
10749: LD_INT 1
10751: PPUSH
10752: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10756: LD_INT 7
10758: PPUSH
10759: LD_VAR 0 3
10763: PPUSH
10764: LD_INT 1
10766: PPUSH
10767: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10771: LD_INT 12
10773: PPUSH
10774: LD_VAR 0 3
10778: PPUSH
10779: LD_INT 1
10781: PPUSH
10782: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10786: LD_INT 18
10788: PPUSH
10789: LD_VAR 0 3
10793: PPUSH
10794: LD_INT 1
10796: PPUSH
10797: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10801: LD_INT 60
10803: PPUSH
10804: LD_VAR 0 3
10808: PPUSH
10809: LD_INT 1
10811: PPUSH
10812: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10816: LD_INT 9
10818: PPUSH
10819: LD_VAR 0 3
10823: PPUSH
10824: LD_INT 1
10826: PPUSH
10827: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10831: LD_INT 30
10833: PPUSH
10834: LD_VAR 0 3
10838: PPUSH
10839: LD_INT 1
10841: PPUSH
10842: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10846: LD_INT 37
10848: PPUSH
10849: LD_VAR 0 3
10853: PPUSH
10854: LD_INT 1
10856: PPUSH
10857: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10861: LD_INT 5
10863: PPUSH
10864: LD_VAR 0 3
10868: PPUSH
10869: LD_INT 1
10871: PPUSH
10872: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10876: LD_INT 66
10878: PPUSH
10879: LD_VAR 0 3
10883: PPUSH
10884: LD_INT 1
10886: PPUSH
10887: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10891: LD_INT 21
10893: PPUSH
10894: LD_VAR 0 3
10898: PPUSH
10899: LD_INT 1
10901: PPUSH
10902: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10906: LD_INT 22
10908: PPUSH
10909: LD_VAR 0 3
10913: PPUSH
10914: LD_INT 1
10916: PPUSH
10917: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10921: LD_INT 54
10923: PPUSH
10924: LD_VAR 0 3
10928: PPUSH
10929: LD_INT 1
10931: PPUSH
10932: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10936: LD_INT 0
10938: PPUSH
10939: LD_VAR 0 3
10943: PPUSH
10944: LD_INT 1
10946: PPUSH
10947: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10951: LD_INT 1
10953: PPUSH
10954: LD_VAR 0 3
10958: PPUSH
10959: LD_INT 1
10961: PPUSH
10962: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10966: LD_INT 2
10968: PPUSH
10969: LD_VAR 0 3
10973: PPUSH
10974: LD_INT 1
10976: PPUSH
10977: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10981: LD_INT 3
10983: PPUSH
10984: LD_VAR 0 3
10988: PPUSH
10989: LD_INT 1
10991: PPUSH
10992: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10996: LD_INT 4
10998: PPUSH
10999: LD_VAR 0 3
11003: PPUSH
11004: LD_INT 1
11006: PPUSH
11007: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11011: LD_INT 5
11013: PPUSH
11014: LD_VAR 0 3
11018: PPUSH
11019: LD_INT 1
11021: PPUSH
11022: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11026: LD_INT 6
11028: PPUSH
11029: LD_VAR 0 3
11033: PPUSH
11034: LD_INT 1
11036: PPUSH
11037: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11041: LD_INT 7
11043: PPUSH
11044: LD_VAR 0 3
11048: PPUSH
11049: LD_INT 1
11051: PPUSH
11052: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11056: LD_INT 8
11058: PPUSH
11059: LD_VAR 0 3
11063: PPUSH
11064: LD_INT 1
11066: PPUSH
11067: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11071: LD_INT 10
11073: PPUSH
11074: LD_VAR 0 3
11078: PPUSH
11079: LD_INT 1
11081: PPUSH
11082: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11086: LD_INT 11
11088: PPUSH
11089: LD_VAR 0 3
11093: PPUSH
11094: LD_INT 1
11096: PPUSH
11097: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11101: LD_INT 12
11103: PPUSH
11104: LD_VAR 0 3
11108: PPUSH
11109: LD_INT 1
11111: PPUSH
11112: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11116: LD_INT 13
11118: PPUSH
11119: LD_VAR 0 3
11123: PPUSH
11124: LD_INT 1
11126: PPUSH
11127: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11131: LD_INT 14
11133: PPUSH
11134: LD_VAR 0 3
11138: PPUSH
11139: LD_INT 1
11141: PPUSH
11142: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11146: LD_INT 15
11148: PPUSH
11149: LD_VAR 0 3
11153: PPUSH
11154: LD_INT 1
11156: PPUSH
11157: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11161: LD_INT 16
11163: PPUSH
11164: LD_VAR 0 3
11168: PPUSH
11169: LD_INT 1
11171: PPUSH
11172: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11176: LD_INT 17
11178: PPUSH
11179: LD_VAR 0 3
11183: PPUSH
11184: LD_INT 1
11186: PPUSH
11187: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11191: LD_INT 19
11193: PPUSH
11194: LD_VAR 0 3
11198: PPUSH
11199: LD_INT 1
11201: PPUSH
11202: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11206: LD_INT 20
11208: PPUSH
11209: LD_VAR 0 3
11213: PPUSH
11214: LD_INT 1
11216: PPUSH
11217: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11221: LD_INT 21
11223: PPUSH
11224: LD_VAR 0 3
11228: PPUSH
11229: LD_INT 1
11231: PPUSH
11232: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11236: LD_INT 23
11238: PPUSH
11239: LD_VAR 0 3
11243: PPUSH
11244: LD_INT 1
11246: PPUSH
11247: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11251: LD_INT 26
11253: PPUSH
11254: LD_VAR 0 3
11258: PPUSH
11259: LD_INT 1
11261: PPUSH
11262: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11266: LD_INT 27
11268: PPUSH
11269: LD_VAR 0 3
11273: PPUSH
11274: LD_INT 1
11276: PPUSH
11277: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11281: LD_INT 28
11283: PPUSH
11284: LD_VAR 0 3
11288: PPUSH
11289: LD_INT 1
11291: PPUSH
11292: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11296: LD_INT 29
11298: PPUSH
11299: LD_VAR 0 3
11303: PPUSH
11304: LD_INT 1
11306: PPUSH
11307: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11311: LD_INT 30
11313: PPUSH
11314: LD_VAR 0 3
11318: PPUSH
11319: LD_INT 1
11321: PPUSH
11322: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11326: LD_INT 31
11328: PPUSH
11329: LD_VAR 0 3
11333: PPUSH
11334: LD_INT 1
11336: PPUSH
11337: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11341: LD_INT 32
11343: PPUSH
11344: LD_VAR 0 3
11348: PPUSH
11349: LD_INT 1
11351: PPUSH
11352: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11356: LD_INT 36
11358: PPUSH
11359: LD_VAR 0 3
11363: PPUSH
11364: LD_INT 1
11366: PPUSH
11367: CALL_OW 324
// end ; 5 :
11371: GO 13502
11373: LD_INT 5
11375: DOUBLE
11376: EQUAL
11377: IFTRUE 11381
11379: GO 12494
11381: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11382: LD_INT 35
11384: PPUSH
11385: LD_VAR 0 3
11389: PPUSH
11390: LD_INT 1
11392: PPUSH
11393: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11397: LD_INT 45
11399: PPUSH
11400: LD_VAR 0 3
11404: PPUSH
11405: LD_INT 1
11407: PPUSH
11408: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11412: LD_INT 46
11414: PPUSH
11415: LD_VAR 0 3
11419: PPUSH
11420: LD_INT 1
11422: PPUSH
11423: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11427: LD_INT 47
11429: PPUSH
11430: LD_VAR 0 3
11434: PPUSH
11435: LD_INT 1
11437: PPUSH
11438: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11442: LD_INT 1
11444: PPUSH
11445: LD_VAR 0 3
11449: PPUSH
11450: LD_INT 1
11452: PPUSH
11453: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11457: LD_INT 2
11459: PPUSH
11460: LD_VAR 0 3
11464: PPUSH
11465: LD_INT 1
11467: PPUSH
11468: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11472: LD_INT 11
11474: PPUSH
11475: LD_VAR 0 3
11479: PPUSH
11480: LD_INT 1
11482: PPUSH
11483: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11487: LD_INT 20
11489: PPUSH
11490: LD_VAR 0 3
11494: PPUSH
11495: LD_INT 1
11497: PPUSH
11498: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11502: LD_INT 48
11504: PPUSH
11505: LD_VAR 0 3
11509: PPUSH
11510: LD_INT 1
11512: PPUSH
11513: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11517: LD_INT 49
11519: PPUSH
11520: LD_VAR 0 3
11524: PPUSH
11525: LD_INT 1
11527: PPUSH
11528: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11532: LD_INT 69
11534: PPUSH
11535: LD_VAR 0 3
11539: PPUSH
11540: LD_INT 1
11542: PPUSH
11543: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11547: LD_INT 39
11549: PPUSH
11550: LD_VAR 0 3
11554: PPUSH
11555: LD_INT 1
11557: PPUSH
11558: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11562: LD_INT 34
11564: PPUSH
11565: LD_VAR 0 3
11569: PPUSH
11570: LD_INT 1
11572: PPUSH
11573: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11577: LD_INT 42
11579: PPUSH
11580: LD_VAR 0 3
11584: PPUSH
11585: LD_INT 1
11587: PPUSH
11588: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11592: LD_INT 44
11594: PPUSH
11595: LD_VAR 0 3
11599: PPUSH
11600: LD_INT 1
11602: PPUSH
11603: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11607: LD_INT 41
11609: PPUSH
11610: LD_VAR 0 3
11614: PPUSH
11615: LD_INT 1
11617: PPUSH
11618: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11622: LD_INT 40
11624: PPUSH
11625: LD_VAR 0 3
11629: PPUSH
11630: LD_INT 1
11632: PPUSH
11633: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11637: LD_INT 43
11639: PPUSH
11640: LD_VAR 0 3
11644: PPUSH
11645: LD_INT 1
11647: PPUSH
11648: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11652: LD_INT 70
11654: PPUSH
11655: LD_VAR 0 3
11659: PPUSH
11660: LD_INT 1
11662: PPUSH
11663: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11667: LD_INT 51
11669: PPUSH
11670: LD_VAR 0 3
11674: PPUSH
11675: LD_INT 1
11677: PPUSH
11678: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11682: LD_INT 52
11684: PPUSH
11685: LD_VAR 0 3
11689: PPUSH
11690: LD_INT 1
11692: PPUSH
11693: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11697: LD_INT 6
11699: PPUSH
11700: LD_VAR 0 3
11704: PPUSH
11705: LD_INT 1
11707: PPUSH
11708: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11712: LD_INT 15
11714: PPUSH
11715: LD_VAR 0 3
11719: PPUSH
11720: LD_INT 1
11722: PPUSH
11723: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11727: LD_INT 7
11729: PPUSH
11730: LD_VAR 0 3
11734: PPUSH
11735: LD_INT 1
11737: PPUSH
11738: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11742: LD_INT 12
11744: PPUSH
11745: LD_VAR 0 3
11749: PPUSH
11750: LD_INT 1
11752: PPUSH
11753: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11757: LD_INT 17
11759: PPUSH
11760: LD_VAR 0 3
11764: PPUSH
11765: LD_INT 1
11767: PPUSH
11768: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11772: LD_INT 18
11774: PPUSH
11775: LD_VAR 0 3
11779: PPUSH
11780: LD_INT 1
11782: PPUSH
11783: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11787: LD_INT 60
11789: PPUSH
11790: LD_VAR 0 3
11794: PPUSH
11795: LD_INT 1
11797: PPUSH
11798: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11802: LD_INT 32
11804: PPUSH
11805: LD_VAR 0 3
11809: PPUSH
11810: LD_INT 1
11812: PPUSH
11813: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11817: LD_INT 9
11819: PPUSH
11820: LD_VAR 0 3
11824: PPUSH
11825: LD_INT 1
11827: PPUSH
11828: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11832: LD_INT 57
11834: PPUSH
11835: LD_VAR 0 3
11839: PPUSH
11840: LD_INT 1
11842: PPUSH
11843: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11847: LD_INT 30
11849: PPUSH
11850: LD_VAR 0 3
11854: PPUSH
11855: LD_INT 1
11857: PPUSH
11858: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11862: LD_INT 37
11864: PPUSH
11865: LD_VAR 0 3
11869: PPUSH
11870: LD_INT 1
11872: PPUSH
11873: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11877: LD_INT 63
11879: PPUSH
11880: LD_VAR 0 3
11884: PPUSH
11885: LD_INT 1
11887: PPUSH
11888: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11892: LD_INT 3
11894: PPUSH
11895: LD_VAR 0 3
11899: PPUSH
11900: LD_INT 1
11902: PPUSH
11903: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11907: LD_INT 4
11909: PPUSH
11910: LD_VAR 0 3
11914: PPUSH
11915: LD_INT 1
11917: PPUSH
11918: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11922: LD_INT 5
11924: PPUSH
11925: LD_VAR 0 3
11929: PPUSH
11930: LD_INT 1
11932: PPUSH
11933: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11937: LD_INT 66
11939: PPUSH
11940: LD_VAR 0 3
11944: PPUSH
11945: LD_INT 1
11947: PPUSH
11948: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11952: LD_INT 21
11954: PPUSH
11955: LD_VAR 0 3
11959: PPUSH
11960: LD_INT 1
11962: PPUSH
11963: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11967: LD_INT 22
11969: PPUSH
11970: LD_VAR 0 3
11974: PPUSH
11975: LD_INT 1
11977: PPUSH
11978: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11982: LD_INT 19
11984: PPUSH
11985: LD_VAR 0 3
11989: PPUSH
11990: LD_INT 1
11992: PPUSH
11993: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11997: LD_INT 54
11999: PPUSH
12000: LD_VAR 0 3
12004: PPUSH
12005: LD_INT 1
12007: PPUSH
12008: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12012: LD_INT 55
12014: PPUSH
12015: LD_VAR 0 3
12019: PPUSH
12020: LD_INT 1
12022: PPUSH
12023: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12027: LD_INT 0
12029: PPUSH
12030: LD_VAR 0 3
12034: PPUSH
12035: LD_INT 1
12037: PPUSH
12038: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12042: LD_INT 1
12044: PPUSH
12045: LD_VAR 0 3
12049: PPUSH
12050: LD_INT 1
12052: PPUSH
12053: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12057: LD_INT 2
12059: PPUSH
12060: LD_VAR 0 3
12064: PPUSH
12065: LD_INT 1
12067: PPUSH
12068: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12072: LD_INT 3
12074: PPUSH
12075: LD_VAR 0 3
12079: PPUSH
12080: LD_INT 1
12082: PPUSH
12083: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12087: LD_INT 4
12089: PPUSH
12090: LD_VAR 0 3
12094: PPUSH
12095: LD_INT 1
12097: PPUSH
12098: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12102: LD_INT 5
12104: PPUSH
12105: LD_VAR 0 3
12109: PPUSH
12110: LD_INT 1
12112: PPUSH
12113: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12117: LD_INT 6
12119: PPUSH
12120: LD_VAR 0 3
12124: PPUSH
12125: LD_INT 1
12127: PPUSH
12128: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12132: LD_INT 7
12134: PPUSH
12135: LD_VAR 0 3
12139: PPUSH
12140: LD_INT 1
12142: PPUSH
12143: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12147: LD_INT 8
12149: PPUSH
12150: LD_VAR 0 3
12154: PPUSH
12155: LD_INT 1
12157: PPUSH
12158: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12162: LD_INT 10
12164: PPUSH
12165: LD_VAR 0 3
12169: PPUSH
12170: LD_INT 1
12172: PPUSH
12173: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12177: LD_INT 11
12179: PPUSH
12180: LD_VAR 0 3
12184: PPUSH
12185: LD_INT 1
12187: PPUSH
12188: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12192: LD_INT 12
12194: PPUSH
12195: LD_VAR 0 3
12199: PPUSH
12200: LD_INT 1
12202: PPUSH
12203: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12207: LD_INT 13
12209: PPUSH
12210: LD_VAR 0 3
12214: PPUSH
12215: LD_INT 1
12217: PPUSH
12218: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12222: LD_INT 14
12224: PPUSH
12225: LD_VAR 0 3
12229: PPUSH
12230: LD_INT 1
12232: PPUSH
12233: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12237: LD_INT 15
12239: PPUSH
12240: LD_VAR 0 3
12244: PPUSH
12245: LD_INT 1
12247: PPUSH
12248: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12252: LD_INT 16
12254: PPUSH
12255: LD_VAR 0 3
12259: PPUSH
12260: LD_INT 1
12262: PPUSH
12263: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12267: LD_INT 17
12269: PPUSH
12270: LD_VAR 0 3
12274: PPUSH
12275: LD_INT 1
12277: PPUSH
12278: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
12282: LD_INT 18
12284: PPUSH
12285: LD_VAR 0 3
12289: PPUSH
12290: LD_INT 1
12292: PPUSH
12293: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12297: LD_INT 19
12299: PPUSH
12300: LD_VAR 0 3
12304: PPUSH
12305: LD_INT 1
12307: PPUSH
12308: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12312: LD_INT 20
12314: PPUSH
12315: LD_VAR 0 3
12319: PPUSH
12320: LD_INT 1
12322: PPUSH
12323: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12327: LD_INT 21
12329: PPUSH
12330: LD_VAR 0 3
12334: PPUSH
12335: LD_INT 1
12337: PPUSH
12338: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12342: LD_INT 23
12344: PPUSH
12345: LD_VAR 0 3
12349: PPUSH
12350: LD_INT 1
12352: PPUSH
12353: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12357: LD_INT 26
12359: PPUSH
12360: LD_VAR 0 3
12364: PPUSH
12365: LD_INT 1
12367: PPUSH
12368: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12372: LD_INT 27
12374: PPUSH
12375: LD_VAR 0 3
12379: PPUSH
12380: LD_INT 1
12382: PPUSH
12383: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12387: LD_INT 28
12389: PPUSH
12390: LD_VAR 0 3
12394: PPUSH
12395: LD_INT 1
12397: PPUSH
12398: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12402: LD_INT 29
12404: PPUSH
12405: LD_VAR 0 3
12409: PPUSH
12410: LD_INT 1
12412: PPUSH
12413: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12417: LD_INT 30
12419: PPUSH
12420: LD_VAR 0 3
12424: PPUSH
12425: LD_INT 1
12427: PPUSH
12428: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12432: LD_INT 31
12434: PPUSH
12435: LD_VAR 0 3
12439: PPUSH
12440: LD_INT 1
12442: PPUSH
12443: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12447: LD_INT 32
12449: PPUSH
12450: LD_VAR 0 3
12454: PPUSH
12455: LD_INT 1
12457: PPUSH
12458: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
12462: LD_INT 33
12464: PPUSH
12465: LD_VAR 0 3
12469: PPUSH
12470: LD_INT 1
12472: PPUSH
12473: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12477: LD_INT 36
12479: PPUSH
12480: LD_VAR 0 3
12484: PPUSH
12485: LD_INT 1
12487: PPUSH
12488: CALL_OW 324
// end ; 6 :
12492: GO 13502
12494: LD_INT 6
12496: DOUBLE
12497: EQUAL
12498: IFTRUE 12502
12500: GO 13427
12502: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12503: LD_INT 35
12505: PPUSH
12506: LD_VAR 0 3
12510: PPUSH
12511: LD_INT 1
12513: PPUSH
12514: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12518: LD_INT 45
12520: PPUSH
12521: LD_VAR 0 3
12525: PPUSH
12526: LD_INT 1
12528: PPUSH
12529: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12533: LD_INT 46
12535: PPUSH
12536: LD_VAR 0 3
12540: PPUSH
12541: LD_INT 1
12543: PPUSH
12544: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12548: LD_INT 47
12550: PPUSH
12551: LD_VAR 0 3
12555: PPUSH
12556: LD_INT 1
12558: PPUSH
12559: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12563: LD_INT 1
12565: PPUSH
12566: LD_VAR 0 3
12570: PPUSH
12571: LD_INT 1
12573: PPUSH
12574: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12578: LD_INT 2
12580: PPUSH
12581: LD_VAR 0 3
12585: PPUSH
12586: LD_INT 1
12588: PPUSH
12589: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12593: LD_INT 11
12595: PPUSH
12596: LD_VAR 0 3
12600: PPUSH
12601: LD_INT 1
12603: PPUSH
12604: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12608: LD_INT 20
12610: PPUSH
12611: LD_VAR 0 3
12615: PPUSH
12616: LD_INT 1
12618: PPUSH
12619: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12623: LD_INT 48
12625: PPUSH
12626: LD_VAR 0 3
12630: PPUSH
12631: LD_INT 1
12633: PPUSH
12634: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12638: LD_INT 49
12640: PPUSH
12641: LD_VAR 0 3
12645: PPUSH
12646: LD_INT 1
12648: PPUSH
12649: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12653: LD_INT 50
12655: PPUSH
12656: LD_VAR 0 3
12660: PPUSH
12661: LD_INT 1
12663: PPUSH
12664: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12668: LD_INT 69
12670: PPUSH
12671: LD_VAR 0 3
12675: PPUSH
12676: LD_INT 1
12678: PPUSH
12679: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12683: LD_INT 39
12685: PPUSH
12686: LD_VAR 0 3
12690: PPUSH
12691: LD_INT 1
12693: PPUSH
12694: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12698: LD_INT 34
12700: PPUSH
12701: LD_VAR 0 3
12705: PPUSH
12706: LD_INT 1
12708: PPUSH
12709: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12713: LD_INT 42
12715: PPUSH
12716: LD_VAR 0 3
12720: PPUSH
12721: LD_INT 1
12723: PPUSH
12724: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12728: LD_INT 44
12730: PPUSH
12731: LD_VAR 0 3
12735: PPUSH
12736: LD_INT 1
12738: PPUSH
12739: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12743: LD_INT 41
12745: PPUSH
12746: LD_VAR 0 3
12750: PPUSH
12751: LD_INT 1
12753: PPUSH
12754: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
12758: LD_INT 13
12760: PPUSH
12761: LD_VAR 0 3
12765: PPUSH
12766: LD_INT 1
12768: PPUSH
12769: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12773: LD_INT 40
12775: PPUSH
12776: LD_VAR 0 3
12780: PPUSH
12781: LD_INT 1
12783: PPUSH
12784: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12788: LD_INT 43
12790: PPUSH
12791: LD_VAR 0 3
12795: PPUSH
12796: LD_INT 1
12798: PPUSH
12799: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12803: LD_INT 70
12805: PPUSH
12806: LD_VAR 0 3
12810: PPUSH
12811: LD_INT 1
12813: PPUSH
12814: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
12818: LD_INT 23
12820: PPUSH
12821: LD_VAR 0 3
12825: PPUSH
12826: LD_INT 1
12828: PPUSH
12829: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12833: LD_INT 51
12835: PPUSH
12836: LD_VAR 0 3
12840: PPUSH
12841: LD_INT 1
12843: PPUSH
12844: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12848: LD_INT 52
12850: PPUSH
12851: LD_VAR 0 3
12855: PPUSH
12856: LD_INT 1
12858: PPUSH
12859: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12863: LD_INT 6
12865: PPUSH
12866: LD_VAR 0 3
12870: PPUSH
12871: LD_INT 1
12873: PPUSH
12874: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12878: LD_INT 15
12880: PPUSH
12881: LD_VAR 0 3
12885: PPUSH
12886: LD_INT 1
12888: PPUSH
12889: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12893: LD_INT 7
12895: PPUSH
12896: LD_VAR 0 3
12900: PPUSH
12901: LD_INT 1
12903: PPUSH
12904: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12908: LD_INT 12
12910: PPUSH
12911: LD_VAR 0 3
12915: PPUSH
12916: LD_INT 1
12918: PPUSH
12919: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
12923: LD_INT 10
12925: PPUSH
12926: LD_VAR 0 3
12930: PPUSH
12931: LD_INT 1
12933: PPUSH
12934: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12938: LD_INT 17
12940: PPUSH
12941: LD_VAR 0 3
12945: PPUSH
12946: LD_INT 1
12948: PPUSH
12949: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12953: LD_INT 18
12955: PPUSH
12956: LD_VAR 0 3
12960: PPUSH
12961: LD_INT 1
12963: PPUSH
12964: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12968: LD_INT 60
12970: PPUSH
12971: LD_VAR 0 3
12975: PPUSH
12976: LD_INT 1
12978: PPUSH
12979: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
12983: LD_INT 61
12985: PPUSH
12986: LD_VAR 0 3
12990: PPUSH
12991: LD_INT 1
12993: PPUSH
12994: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12998: LD_INT 32
13000: PPUSH
13001: LD_VAR 0 3
13005: PPUSH
13006: LD_INT 1
13008: PPUSH
13009: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
13013: LD_INT 27
13015: PPUSH
13016: LD_VAR 0 3
13020: PPUSH
13021: LD_INT 1
13023: PPUSH
13024: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
13028: LD_INT 36
13030: PPUSH
13031: LD_VAR 0 3
13035: PPUSH
13036: LD_INT 1
13038: PPUSH
13039: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
13043: LD_INT 33
13045: PPUSH
13046: LD_VAR 0 3
13050: PPUSH
13051: LD_INT 1
13053: PPUSH
13054: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13058: LD_INT 9
13060: PPUSH
13061: LD_VAR 0 3
13065: PPUSH
13066: LD_INT 1
13068: PPUSH
13069: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13073: LD_INT 38
13075: PPUSH
13076: LD_VAR 0 3
13080: PPUSH
13081: LD_INT 1
13083: PPUSH
13084: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13088: LD_INT 57
13090: PPUSH
13091: LD_VAR 0 3
13095: PPUSH
13096: LD_INT 1
13098: PPUSH
13099: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13103: LD_INT 58
13105: PPUSH
13106: LD_VAR 0 3
13110: PPUSH
13111: LD_INT 1
13113: PPUSH
13114: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13118: LD_INT 28
13120: PPUSH
13121: LD_VAR 0 3
13125: PPUSH
13126: LD_INT 1
13128: PPUSH
13129: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13133: LD_INT 29
13135: PPUSH
13136: LD_VAR 0 3
13140: PPUSH
13141: LD_INT 1
13143: PPUSH
13144: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13148: LD_INT 30
13150: PPUSH
13151: LD_VAR 0 3
13155: PPUSH
13156: LD_INT 1
13158: PPUSH
13159: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13163: LD_INT 37
13165: PPUSH
13166: LD_VAR 0 3
13170: PPUSH
13171: LD_INT 1
13173: PPUSH
13174: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13178: LD_INT 63
13180: PPUSH
13181: LD_VAR 0 3
13185: PPUSH
13186: LD_INT 1
13188: PPUSH
13189: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13193: LD_INT 64
13195: PPUSH
13196: LD_VAR 0 3
13200: PPUSH
13201: LD_INT 1
13203: PPUSH
13204: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13208: LD_INT 3
13210: PPUSH
13211: LD_VAR 0 3
13215: PPUSH
13216: LD_INT 1
13218: PPUSH
13219: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13223: LD_INT 4
13225: PPUSH
13226: LD_VAR 0 3
13230: PPUSH
13231: LD_INT 1
13233: PPUSH
13234: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13238: LD_INT 5
13240: PPUSH
13241: LD_VAR 0 3
13245: PPUSH
13246: LD_INT 1
13248: PPUSH
13249: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13253: LD_INT 8
13255: PPUSH
13256: LD_VAR 0 3
13260: PPUSH
13261: LD_INT 1
13263: PPUSH
13264: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13268: LD_INT 66
13270: PPUSH
13271: LD_VAR 0 3
13275: PPUSH
13276: LD_INT 1
13278: PPUSH
13279: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
13283: LD_INT 67
13285: PPUSH
13286: LD_VAR 0 3
13290: PPUSH
13291: LD_INT 1
13293: PPUSH
13294: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13298: LD_INT 21
13300: PPUSH
13301: LD_VAR 0 3
13305: PPUSH
13306: LD_INT 1
13308: PPUSH
13309: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13313: LD_INT 22
13315: PPUSH
13316: LD_VAR 0 3
13320: PPUSH
13321: LD_INT 1
13323: PPUSH
13324: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13328: LD_INT 19
13330: PPUSH
13331: LD_VAR 0 3
13335: PPUSH
13336: LD_INT 1
13338: PPUSH
13339: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13343: LD_INT 26
13345: PPUSH
13346: LD_VAR 0 3
13350: PPUSH
13351: LD_INT 1
13353: PPUSH
13354: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13358: LD_INT 54
13360: PPUSH
13361: LD_VAR 0 3
13365: PPUSH
13366: LD_INT 1
13368: PPUSH
13369: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13373: LD_INT 55
13375: PPUSH
13376: LD_VAR 0 3
13380: PPUSH
13381: LD_INT 1
13383: PPUSH
13384: CALL_OW 322
// for i = 0 to 39 do
13388: LD_ADDR_VAR 0 4
13392: PUSH
13393: DOUBLE
13394: LD_INT 0
13396: DEC
13397: ST_TO_ADDR
13398: LD_INT 39
13400: PUSH
13401: FOR_TO
13402: IFFALSE 13423
// SetRestrict ( i , side , true ) ;
13404: LD_VAR 0 4
13408: PPUSH
13409: LD_VAR 0 3
13413: PPUSH
13414: LD_INT 1
13416: PPUSH
13417: CALL_OW 324
13421: GO 13401
13423: POP
13424: POP
// end ; else
13425: GO 13502
13427: POP
// begin for i = 1 to 73 do
13428: LD_ADDR_VAR 0 4
13432: PUSH
13433: DOUBLE
13434: LD_INT 1
13436: DEC
13437: ST_TO_ADDR
13438: LD_INT 73
13440: PUSH
13441: FOR_TO
13442: IFFALSE 13463
// SetTech ( i , side , state_enabled ) ;
13444: LD_VAR 0 4
13448: PPUSH
13449: LD_VAR 0 3
13453: PPUSH
13454: LD_INT 1
13456: PPUSH
13457: CALL_OW 322
13461: GO 13441
13463: POP
13464: POP
// for i = 0 to 39 do
13465: LD_ADDR_VAR 0 4
13469: PUSH
13470: DOUBLE
13471: LD_INT 0
13473: DEC
13474: ST_TO_ADDR
13475: LD_INT 39
13477: PUSH
13478: FOR_TO
13479: IFFALSE 13500
// SetRestrict ( i , side , true ) ;
13481: LD_VAR 0 4
13485: PPUSH
13486: LD_VAR 0 3
13490: PPUSH
13491: LD_INT 1
13493: PPUSH
13494: CALL_OW 324
13498: GO 13478
13500: POP
13501: POP
// end ; end ; end ;
13502: GO 9507
13504: POP
13505: POP
// end ; end_of_file
13506: LD_VAR 0 2
13510: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
13511: LD_INT 0
13513: PPUSH
13514: PPUSH
13515: PPUSH
13516: PPUSH
13517: PPUSH
13518: PPUSH
13519: PPUSH
13520: PPUSH
13521: PPUSH
// for i := 1 to 8 do
13522: LD_ADDR_VAR 0 2
13526: PUSH
13527: DOUBLE
13528: LD_INT 1
13530: DEC
13531: ST_TO_ADDR
13532: LD_INT 8
13534: PUSH
13535: FOR_TO
13536: IFFALSE 13920
// begin if Side_Positions [ i ] then
13538: LD_EXP 38
13542: PUSH
13543: LD_VAR 0 2
13547: ARRAY
13548: IFFALSE 13918
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
13550: LD_ADDR_VAR 0 7
13554: PUSH
13555: LD_INT 22
13557: PUSH
13558: LD_VAR 0 2
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: PUSH
13567: LD_INT 21
13569: PUSH
13570: LD_INT 1
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: PPUSH
13581: CALL_OW 69
13585: PUSH
13586: LD_INT 0
13588: PLUS
13589: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13590: LD_ADDR_VAR 0 9
13594: PUSH
13595: LD_INT 22
13597: PUSH
13598: LD_VAR 0 2
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: PUSH
13607: LD_INT 2
13609: PUSH
13610: LD_INT 30
13612: PUSH
13613: LD_INT 0
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PUSH
13620: LD_INT 30
13622: PUSH
13623: LD_INT 1
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: LIST
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: PPUSH
13639: CALL_OW 69
13643: ST_TO_ADDR
// crates := 0 ;
13644: LD_ADDR_VAR 0 4
13648: PUSH
13649: LD_INT 0
13651: ST_TO_ADDR
// oil := 0 ;
13652: LD_ADDR_VAR 0 5
13656: PUSH
13657: LD_INT 0
13659: ST_TO_ADDR
// sib := 0 ;
13660: LD_ADDR_VAR 0 6
13664: PUSH
13665: LD_INT 0
13667: ST_TO_ADDR
// if bases then
13668: LD_VAR 0 9
13672: IFFALSE 13778
// begin for j in bases do
13674: LD_ADDR_VAR 0 3
13678: PUSH
13679: LD_VAR 0 9
13683: PUSH
13684: FOR_IN
13685: IFFALSE 13776
// begin base := GetBase ( j ) ;
13687: LD_ADDR_VAR 0 8
13691: PUSH
13692: LD_VAR 0 3
13696: PPUSH
13697: CALL_OW 274
13701: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
13702: LD_ADDR_VAR 0 4
13706: PUSH
13707: LD_VAR 0 4
13711: PUSH
13712: LD_VAR 0 8
13716: PPUSH
13717: LD_INT 1
13719: PPUSH
13720: CALL_OW 275
13724: PLUS
13725: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
13726: LD_ADDR_VAR 0 5
13730: PUSH
13731: LD_VAR 0 5
13735: PUSH
13736: LD_VAR 0 8
13740: PPUSH
13741: LD_INT 2
13743: PPUSH
13744: CALL_OW 275
13748: PLUS
13749: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
13750: LD_ADDR_VAR 0 6
13754: PUSH
13755: LD_VAR 0 6
13759: PUSH
13760: LD_VAR 0 8
13764: PPUSH
13765: LD_INT 3
13767: PPUSH
13768: CALL_OW 275
13772: PLUS
13773: ST_TO_ADDR
// end ;
13774: GO 13684
13776: POP
13777: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
13778: LD_STRING setSpecText(
13780: PUSH
13781: LD_VAR 0 2
13785: STR
13786: PUSH
13787: LD_STRING ,
13789: STR
13790: PUSH
13791: LD_INT 2
13793: STR
13794: PUSH
13795: LD_STRING ,
13797: STR
13798: PUSH
13799: LD_VAR 0 4
13803: STR
13804: PUSH
13805: LD_STRING )
13807: STR
13808: PPUSH
13809: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
13813: LD_STRING setSpecText(
13815: PUSH
13816: LD_VAR 0 2
13820: STR
13821: PUSH
13822: LD_STRING ,
13824: STR
13825: PUSH
13826: LD_INT 3
13828: STR
13829: PUSH
13830: LD_STRING ,
13832: STR
13833: PUSH
13834: LD_VAR 0 5
13838: STR
13839: PUSH
13840: LD_STRING )
13842: STR
13843: PPUSH
13844: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
13848: LD_STRING setSpecText(
13850: PUSH
13851: LD_VAR 0 2
13855: STR
13856: PUSH
13857: LD_STRING ,
13859: STR
13860: PUSH
13861: LD_INT 4
13863: STR
13864: PUSH
13865: LD_STRING ,
13867: STR
13868: PUSH
13869: LD_VAR 0 6
13873: STR
13874: PUSH
13875: LD_STRING )
13877: STR
13878: PPUSH
13879: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
13883: LD_STRING setSpecText(
13885: PUSH
13886: LD_VAR 0 2
13890: STR
13891: PUSH
13892: LD_STRING ,
13894: STR
13895: PUSH
13896: LD_INT 5
13898: STR
13899: PUSH
13900: LD_STRING ,
13902: STR
13903: PUSH
13904: LD_VAR 0 7
13908: STR
13909: PUSH
13910: LD_STRING )
13912: STR
13913: PPUSH
13914: CALL_OW 559
// end ; end ;
13918: GO 13535
13920: POP
13921: POP
// end ; end_of_file
13922: LD_VAR 0 1
13926: RET
// var respawn , inqueue ; export function init_respawning ; begin
13927: LD_INT 0
13929: PPUSH
// respawn := Rand ( 1 , 8 ) ;
13930: LD_ADDR_LOC 18
13934: PUSH
13935: LD_INT 1
13937: PPUSH
13938: LD_INT 8
13940: PPUSH
13941: CALL_OW 12
13945: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13946: LD_ADDR_LOC 19
13950: PUSH
13951: LD_INT 0
13953: PUSH
13954: LD_INT 0
13956: PUSH
13957: LD_INT 0
13959: PUSH
13960: LD_INT 0
13962: PUSH
13963: LD_INT 0
13965: PUSH
13966: LD_INT 0
13968: PUSH
13969: LD_INT 0
13971: PUSH
13972: LD_INT 0
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: ST_TO_ADDR
// end ;
13985: LD_VAR 0 1
13989: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
13990: GO 13992
13992: DISABLE
13993: LD_INT 0
13995: PPUSH
13996: PPUSH
13997: PPUSH
// begin if respawning_time_max = 0 then
13998: LD_EXP 33
14002: PUSH
14003: LD_INT 0
14005: EQUAL
14006: IFFALSE 14010
// exit ;
14008: GO 14418
// if respawn = 8 then
14010: LD_LOC 18
14014: PUSH
14015: LD_INT 8
14017: EQUAL
14018: IFFALSE 14030
// respawn := 1 else
14020: LD_ADDR_LOC 18
14024: PUSH
14025: LD_INT 1
14027: ST_TO_ADDR
14028: GO 14044
// respawn := respawn + 1 ;
14030: LD_ADDR_LOC 18
14034: PUSH
14035: LD_LOC 18
14039: PUSH
14040: LD_INT 1
14042: PLUS
14043: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
14044: LD_EXP 38
14048: PUSH
14049: LD_LOC 18
14053: ARRAY
14054: PUSH
14055: LD_LOC 19
14059: PUSH
14060: LD_LOC 18
14064: ARRAY
14065: NOT
14066: AND
14067: IFFALSE 14417
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
14069: LD_ADDR_VAR 0 1
14073: PUSH
14074: LD_INT 21
14076: PUSH
14077: LD_INT 1
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: PUSH
14084: LD_INT 22
14086: PUSH
14087: LD_LOC 18
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: PUSH
14096: LD_INT 3
14098: PUSH
14099: LD_INT 23
14101: PUSH
14102: LD_INT 0
14104: PUSH
14105: EMPTY
14106: LIST
14107: LIST
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: PPUSH
14115: CALL_OW 69
14119: ST_TO_ADDR
// if n < number_of_people then
14120: LD_VAR 0 1
14124: PUSH
14125: LD_EXP 24
14129: LESS
14130: IFFALSE 14414
// begin aktresp := respawn ;
14132: LD_ADDR_VAR 0 3
14136: PUSH
14137: LD_LOC 18
14141: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
14142: LD_ADDR_LOC 19
14146: PUSH
14147: LD_LOC 19
14151: PPUSH
14152: LD_VAR 0 3
14156: PPUSH
14157: LD_INT 1
14159: PPUSH
14160: CALL_OW 1
14164: ST_TO_ADDR
// enable ;
14165: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
14166: LD_EXP 32
14170: PPUSH
14171: LD_EXP 33
14175: PPUSH
14176: CALL_OW 12
14180: PPUSH
14181: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
14185: LD_ADDR_LOC 19
14189: PUSH
14190: LD_LOC 19
14194: PPUSH
14195: LD_VAR 0 3
14199: PPUSH
14200: LD_INT 0
14202: PPUSH
14203: CALL_OW 1
14207: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
14208: LD_ADDR_VAR 0 2
14212: PUSH
14213: LD_INT 21
14215: PUSH
14216: LD_INT 3
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: PUSH
14223: LD_INT 2
14225: PUSH
14226: LD_INT 30
14228: PUSH
14229: LD_INT 0
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PUSH
14236: LD_INT 30
14238: PUSH
14239: LD_INT 1
14241: PUSH
14242: EMPTY
14243: LIST
14244: LIST
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: LIST
14250: PUSH
14251: LD_INT 50
14253: PUSH
14254: EMPTY
14255: LIST
14256: PUSH
14257: LD_INT 22
14259: PUSH
14260: LD_VAR 0 3
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: PPUSH
14275: CALL_OW 69
14279: ST_TO_ADDR
// if dep = 0 then
14280: LD_VAR 0 2
14284: PUSH
14285: LD_INT 0
14287: EQUAL
14288: IFFALSE 14292
// exit ;
14290: GO 14418
// hc_name :=  ;
14292: LD_ADDR_OWVAR 26
14296: PUSH
14297: LD_STRING 
14299: ST_TO_ADDR
// hc_importance := 0 ;
14300: LD_ADDR_OWVAR 32
14304: PUSH
14305: LD_INT 0
14307: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
14308: LD_INT 0
14310: PPUSH
14311: LD_INT 0
14313: PPUSH
14314: LD_EXP 25
14318: PUSH
14319: LD_INT 2
14321: DIV
14322: PPUSH
14323: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
14327: LD_ADDR_OWVAR 21
14331: PUSH
14332: LD_EXP 39
14336: PUSH
14337: LD_VAR 0 3
14341: ARRAY
14342: ST_TO_ADDR
// uc_side := aktresp ;
14343: LD_ADDR_OWVAR 20
14347: PUSH
14348: LD_VAR 0 3
14352: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
14353: LD_ADDR_VAR 0 2
14357: PUSH
14358: LD_VAR 0 2
14362: PUSH
14363: LD_INT 1
14365: PPUSH
14366: LD_VAR 0 2
14370: PPUSH
14371: CALL_OW 12
14375: ARRAY
14376: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
14377: CALL_OW 44
14381: PPUSH
14382: LD_VAR 0 2
14386: PPUSH
14387: CALL_OW 250
14391: PPUSH
14392: LD_VAR 0 2
14396: PPUSH
14397: CALL_OW 251
14401: PPUSH
14402: LD_INT 7
14404: PPUSH
14405: LD_INT 1
14407: PPUSH
14408: CALL_OW 50
// end else
14412: GO 14415
// enable ;
14414: ENABLE
// end else
14415: GO 14418
// enable ;
14417: ENABLE
// end ; end_of_file
14418: PPOPN 3
14420: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
14421: LD_INT 0
14423: PPUSH
14424: PPUSH
14425: PPUSH
// BuildUpTime_Delay = 0 ;
14426: LD_ADDR_EXP 64
14430: PUSH
14431: LD_INT 0
14433: ST_TO_ADDR
// if not def_builduptime then
14434: LD_EXP 16
14438: NOT
14439: IFFALSE 14443
// exit ;
14441: GO 14626
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
14443: LD_ADDR_EXP 64
14447: PUSH
14448: LD_INT 8400
14450: PUSH
14451: LD_INT 2100
14453: PUSH
14454: LD_EXP 16
14458: MUL
14459: PLUS
14460: ST_TO_ADDR
// BuildUpTimeActive := true ;
14461: LD_ADDR_EXP 63
14465: PUSH
14466: LD_INT 1
14468: ST_TO_ADDR
// for i := 1 to 8 do
14469: LD_ADDR_VAR 0 2
14473: PUSH
14474: DOUBLE
14475: LD_INT 1
14477: DEC
14478: ST_TO_ADDR
14479: LD_INT 8
14481: PUSH
14482: FOR_TO
14483: IFFALSE 14624
// if Side_Positions [ i ] then
14485: LD_EXP 38
14489: PUSH
14490: LD_VAR 0 2
14494: ARRAY
14495: IFFALSE 14622
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
14497: LD_EXP 62
14501: PUSH
14502: LD_EXP 38
14506: PUSH
14507: LD_VAR 0 2
14511: ARRAY
14512: ARRAY
14513: PPUSH
14514: LD_INT 5
14516: PPUSH
14517: CALL_OW 424
// for j := 1 to 8 do
14521: LD_ADDR_VAR 0 3
14525: PUSH
14526: DOUBLE
14527: LD_INT 1
14529: DEC
14530: ST_TO_ADDR
14531: LD_INT 8
14533: PUSH
14534: FOR_TO
14535: IFFALSE 14620
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14537: LD_EXP 38
14541: PUSH
14542: LD_VAR 0 3
14546: ARRAY
14547: PUSH
14548: LD_EXP 35
14552: PUSH
14553: LD_VAR 0 2
14557: ARRAY
14558: PUSH
14559: LD_EXP 35
14563: PUSH
14564: LD_VAR 0 3
14568: ARRAY
14569: NONEQUAL
14570: PUSH
14571: LD_EXP 40
14575: NOT
14576: PUSH
14577: LD_VAR 0 2
14581: PUSH
14582: LD_VAR 0 3
14586: NONEQUAL
14587: AND
14588: OR
14589: AND
14590: IFFALSE 14618
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14592: LD_VAR 0 3
14596: PPUSH
14597: LD_EXP 62
14601: PUSH
14602: LD_EXP 38
14606: PUSH
14607: LD_VAR 0 2
14611: ARRAY
14612: ARRAY
14613: PPUSH
14614: CALL_OW 333
14618: GO 14534
14620: POP
14621: POP
// end ;
14622: GO 14482
14624: POP
14625: POP
// end ;
14626: LD_VAR 0 1
14630: RET
// export function EndBuildUp ; var i , j ; begin
14631: LD_INT 0
14633: PPUSH
14634: PPUSH
14635: PPUSH
// BuildUpTimeActive := false ;
14636: LD_ADDR_EXP 63
14640: PUSH
14641: LD_INT 0
14643: ST_TO_ADDR
// for i := 1 to 8 do
14644: LD_ADDR_VAR 0 2
14648: PUSH
14649: DOUBLE
14650: LD_INT 1
14652: DEC
14653: ST_TO_ADDR
14654: LD_INT 8
14656: PUSH
14657: FOR_TO
14658: IFFALSE 14799
// if Side_Positions [ i ] then
14660: LD_EXP 38
14664: PUSH
14665: LD_VAR 0 2
14669: ARRAY
14670: IFFALSE 14797
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
14672: LD_EXP 62
14676: PUSH
14677: LD_EXP 38
14681: PUSH
14682: LD_VAR 0 2
14686: ARRAY
14687: ARRAY
14688: PPUSH
14689: LD_INT 0
14691: PPUSH
14692: CALL_OW 424
// for j := 1 to 8 do
14696: LD_ADDR_VAR 0 3
14700: PUSH
14701: DOUBLE
14702: LD_INT 1
14704: DEC
14705: ST_TO_ADDR
14706: LD_INT 8
14708: PUSH
14709: FOR_TO
14710: IFFALSE 14795
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14712: LD_EXP 38
14716: PUSH
14717: LD_VAR 0 3
14721: ARRAY
14722: PUSH
14723: LD_EXP 35
14727: PUSH
14728: LD_VAR 0 2
14732: ARRAY
14733: PUSH
14734: LD_EXP 35
14738: PUSH
14739: LD_VAR 0 3
14743: ARRAY
14744: NONEQUAL
14745: PUSH
14746: LD_EXP 40
14750: NOT
14751: PUSH
14752: LD_VAR 0 2
14756: PUSH
14757: LD_VAR 0 3
14761: NONEQUAL
14762: AND
14763: OR
14764: AND
14765: IFFALSE 14793
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14767: LD_VAR 0 3
14771: PPUSH
14772: LD_EXP 62
14776: PUSH
14777: LD_EXP 38
14781: PUSH
14782: LD_VAR 0 2
14786: ARRAY
14787: ARRAY
14788: PPUSH
14789: CALL_OW 334
14793: GO 14709
14795: POP
14796: POP
// end ;
14797: GO 14657
14799: POP
14800: POP
// end ;
14801: LD_VAR 0 1
14805: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
14806: LD_EXP 63
14810: IFFALSE 14985
14812: GO 14814
14814: DISABLE
14815: LD_INT 0
14817: PPUSH
14818: PPUSH
// begin for i := 1 to 8 do
14819: LD_ADDR_VAR 0 1
14823: PUSH
14824: DOUBLE
14825: LD_INT 1
14827: DEC
14828: ST_TO_ADDR
14829: LD_INT 8
14831: PUSH
14832: FOR_TO
14833: IFFALSE 14982
// if Side_Positions [ i ] then
14835: LD_EXP 38
14839: PUSH
14840: LD_VAR 0 1
14844: ARRAY
14845: IFFALSE 14980
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
14847: LD_ADDR_VAR 0 2
14851: PUSH
14852: LD_EXP 62
14856: PUSH
14857: LD_EXP 38
14861: PUSH
14862: LD_VAR 0 1
14866: ARRAY
14867: ARRAY
14868: PPUSH
14869: LD_INT 2
14871: PUSH
14872: LD_INT 21
14874: PUSH
14875: LD_INT 1
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: PUSH
14882: LD_INT 21
14884: PUSH
14885: LD_INT 2
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: LIST
14896: PUSH
14897: LD_INT 22
14899: PUSH
14900: LD_OWVAR 2
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: PPUSH
14913: CALL_OW 70
14917: PUSH
14918: FOR_IN
14919: IFFALSE 14978
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
14921: LD_EXP 35
14925: PUSH
14926: LD_VAR 0 1
14930: ARRAY
14931: PUSH
14932: LD_EXP 35
14936: PUSH
14937: LD_OWVAR 2
14941: ARRAY
14942: NONEQUAL
14943: PUSH
14944: LD_EXP 40
14948: NOT
14949: PUSH
14950: LD_VAR 0 1
14954: PUSH
14955: LD_OWVAR 2
14959: NONEQUAL
14960: AND
14961: OR
14962: IFFALSE 14976
// ComMoveToArea ( un , BuildUpEscape ) ;
14964: LD_VAR 0 2
14968: PPUSH
14969: LD_INT 16
14971: PPUSH
14972: CALL_OW 113
14976: GO 14918
14978: POP
14979: POP
14980: GO 14832
14982: POP
14983: POP
// enable ;
14984: ENABLE
// end ;
14985: PPOPN 2
14987: END
// every 0 0$1 trigger def_builduptime do
14988: LD_EXP 16
14992: IFFALSE 15018
14994: GO 14996
14996: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
14997: LD_INT 8400
14999: PUSH
15000: LD_EXP 16
15004: PUSH
15005: LD_INT 2100
15007: MUL
15008: PLUS
15009: PPUSH
15010: CALL_OW 67
// EndBuildUp ;
15014: CALL 14631 0 0
// end ; end_of_file
15018: END
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
15019: LD_INT 0
15021: PPUSH
15022: PPUSH
// enable ( 98 ) ;
15023: LD_INT 98
15025: ENABLE_MARKED
// GameEnded = false ;
15026: LD_ADDR_LOC 21
15030: PUSH
15031: LD_INT 0
15033: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
15034: LD_ADDR_LOC 20
15038: PUSH
15039: LD_INT 0
15041: PUSH
15042: LD_INT 0
15044: PUSH
15045: LD_INT 0
15047: PUSH
15048: LD_INT 0
15050: PUSH
15051: LD_INT 0
15053: PUSH
15054: LD_INT 0
15056: PUSH
15057: LD_INT 0
15059: PUSH
15060: LD_INT 0
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: ST_TO_ADDR
// unfoged = false ;
15073: LD_ADDR_LOC 22
15077: PUSH
15078: LD_INT 0
15080: ST_TO_ADDR
// defeated_specs := [ ] ;
15081: LD_ADDR_LOC 23
15085: PUSH
15086: EMPTY
15087: ST_TO_ADDR
// for i = 1 to side_positions do
15088: LD_ADDR_VAR 0 2
15092: PUSH
15093: DOUBLE
15094: LD_INT 1
15096: DEC
15097: ST_TO_ADDR
15098: LD_EXP 38
15102: PUSH
15103: FOR_TO
15104: IFFALSE 15144
// if not side_positions [ i ] then
15106: LD_EXP 38
15110: PUSH
15111: LD_VAR 0 2
15115: ARRAY
15116: NOT
15117: IFFALSE 15142
// defeated = replace ( defeated , i , true ) ;
15119: LD_ADDR_LOC 20
15123: PUSH
15124: LD_LOC 20
15128: PPUSH
15129: LD_VAR 0 2
15133: PPUSH
15134: LD_INT 1
15136: PPUSH
15137: CALL_OW 1
15141: ST_TO_ADDR
15142: GO 15103
15144: POP
15145: POP
// end ;
15146: LD_VAR 0 1
15150: RET
// function CanWinLoose ; begin
15151: LD_INT 0
15153: PPUSH
// Result := true ;
15154: LD_ADDR_VAR 0 1
15158: PUSH
15159: LD_INT 1
15161: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
15162: CALL_OW 518
15166: PUSH
15167: CALL_OW 519
15171: PUSH
15172: LD_INT 0
15174: GREATER
15175: AND
15176: IFFALSE 15186
// Result := false ;
15178: LD_ADDR_VAR 0 1
15182: PUSH
15183: LD_INT 0
15185: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
15186: CALL_OW 531
15190: PUSH
15191: CALL_OW 519
15195: PUSH
15196: LD_INT 1
15198: GREATER
15199: AND
15200: IFFALSE 15210
// Result := false ;
15202: LD_ADDR_VAR 0 1
15206: PUSH
15207: LD_INT 0
15209: ST_TO_ADDR
// end ;
15210: LD_VAR 0 1
15214: RET
// export function HasPower ( i ) ; var k , h ; begin
15215: LD_INT 0
15217: PPUSH
15218: PPUSH
15219: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
15220: LD_VAR 0 1
15224: PPUSH
15225: CALL_OW 108
15229: NOT
15230: PUSH
15231: LD_EXP 37
15235: PUSH
15236: LD_VAR 0 1
15240: ARRAY
15241: NOT
15242: AND
15243: PUSH
15244: LD_OWVAR 4
15248: AND
15249: IFFALSE 15261
// begin result = false ;
15251: LD_ADDR_VAR 0 2
15255: PUSH
15256: LD_INT 0
15258: ST_TO_ADDR
// end else
15259: GO 15556
// case def_win_rules of 0 :
15261: LD_EXP 49
15265: PUSH
15266: LD_INT 0
15268: DOUBLE
15269: EQUAL
15270: IFTRUE 15274
15272: GO 15437
15274: POP
// if def_people_respawning then
15275: LD_EXP 11
15279: IFFALSE 15370
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
15281: LD_ADDR_VAR 0 2
15285: PUSH
15286: LD_INT 22
15288: PUSH
15289: LD_VAR 0 1
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: PUSH
15298: LD_INT 2
15300: PUSH
15301: LD_INT 21
15303: PUSH
15304: LD_INT 1
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: PUSH
15311: LD_INT 33
15313: PUSH
15314: LD_INT 3
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: PUSH
15321: LD_INT 33
15323: PUSH
15324: LD_INT 5
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: PUSH
15331: LD_INT 30
15333: PUSH
15334: LD_INT 0
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PUSH
15341: LD_INT 30
15343: PUSH
15344: LD_INT 1
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: PPUSH
15363: CALL_OW 69
15367: ST_TO_ADDR
15368: GO 15435
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
15370: LD_ADDR_VAR 0 2
15374: PUSH
15375: LD_INT 22
15377: PUSH
15378: LD_VAR 0 1
15382: PUSH
15383: EMPTY
15384: LIST
15385: LIST
15386: PUSH
15387: LD_INT 2
15389: PUSH
15390: LD_INT 21
15392: PUSH
15393: LD_INT 1
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: LD_INT 33
15402: PUSH
15403: LD_INT 3
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: PUSH
15410: LD_INT 33
15412: PUSH
15413: LD_INT 5
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: PUSH
15426: EMPTY
15427: LIST
15428: LIST
15429: PPUSH
15430: CALL_OW 69
15434: ST_TO_ADDR
15435: GO 15556
15437: LD_INT 1
15439: DOUBLE
15440: EQUAL
15441: IFTRUE 15445
15443: GO 15484
15445: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
15446: LD_ADDR_VAR 0 2
15450: PUSH
15451: LD_INT 22
15453: PUSH
15454: LD_VAR 0 1
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: PUSH
15463: LD_INT 21
15465: PUSH
15466: LD_INT 1
15468: PUSH
15469: EMPTY
15470: LIST
15471: LIST
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PPUSH
15477: CALL_OW 69
15481: ST_TO_ADDR
15482: GO 15556
15484: LD_INT 2
15486: DOUBLE
15487: EQUAL
15488: IFTRUE 15492
15490: GO 15555
15492: POP
// begin h = false ;
15493: LD_ADDR_VAR 0 4
15497: PUSH
15498: LD_INT 0
15500: ST_TO_ADDR
// for k in heroes [ i ] do
15501: LD_ADDR_VAR 0 3
15505: PUSH
15506: LD_EXP 50
15510: PUSH
15511: LD_VAR 0 1
15515: ARRAY
15516: PUSH
15517: FOR_IN
15518: IFFALSE 15541
// if IsLive ( k ) then
15520: LD_VAR 0 3
15524: PPUSH
15525: CALL_OW 300
15529: IFFALSE 15539
// h = true ;
15531: LD_ADDR_VAR 0 4
15535: PUSH
15536: LD_INT 1
15538: ST_TO_ADDR
15539: GO 15517
15541: POP
15542: POP
// Result := h ;
15543: LD_ADDR_VAR 0 2
15547: PUSH
15548: LD_VAR 0 4
15552: ST_TO_ADDR
// end ; end ;
15553: GO 15556
15555: POP
// end ;
15556: LD_VAR 0 2
15560: RET
// function AlliedSides ( i , j ) ; begin
15561: LD_INT 0
15563: PPUSH
// Result := false ;
15564: LD_ADDR_VAR 0 3
15568: PUSH
15569: LD_INT 0
15571: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
15572: LD_VAR 0 1
15576: PPUSH
15577: LD_VAR 0 2
15581: PPUSH
15582: CALL_OW 81
15586: PUSH
15587: LD_INT 1
15589: EQUAL
15590: PUSH
15591: LD_VAR 0 2
15595: PPUSH
15596: LD_VAR 0 1
15600: PPUSH
15601: CALL_OW 81
15605: PUSH
15606: LD_INT 1
15608: EQUAL
15609: AND
15610: PUSH
15611: LD_VAR 0 1
15615: PPUSH
15616: CALL_OW 83
15620: AND
15621: PUSH
15622: LD_VAR 0 2
15626: PPUSH
15627: CALL_OW 83
15631: AND
15632: IFFALSE 15642
// Result := true ;
15634: LD_ADDR_VAR 0 3
15638: PUSH
15639: LD_INT 1
15641: ST_TO_ADDR
// end ;
15642: LD_VAR 0 3
15646: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
15647: CALL 15151 0 0
15651: PUSH
15652: LD_LOC 21
15656: NOT
15657: AND
15658: IFFALSE 15674
15660: GO 15662
15662: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
15663: LD_ADDR_EXP 61
15667: PUSH
15668: LD_STRING #Player-Ended
15670: PUSH
15671: EMPTY
15672: LIST
15673: ST_TO_ADDR
15674: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
15675: CALL 15151 0 0
15679: PUSH
15680: LD_LOC 21
15684: AND
15685: IFFALSE 15694
15687: GO 15689
15689: DISABLE
// YouLostInMultiplayer ;
15690: CALL_OW 107
15694: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
15695: CALL 15151 0 0
15699: NOT
15700: PUSH
15701: CALL_OW 531
15705: NOT
15706: AND
15707: IFFALSE 15723
15709: GO 15711
15711: DISABLE
// WaitServerStrings = [ #server-wait ] ;
15712: LD_ADDR_EXP 61
15716: PUSH
15717: LD_STRING #server-wait
15719: PUSH
15720: EMPTY
15721: LIST
15722: ST_TO_ADDR
15723: END
// every 100 trigger IAmSpec do
15724: CALL_OW 531
15728: IFFALSE 15744
15730: GO 15732
15732: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
15733: LD_ADDR_EXP 61
15737: PUSH
15738: LD_STRING #Player-IAmSpec
15740: PUSH
15741: EMPTY
15742: LIST
15743: ST_TO_ADDR
15744: END
// every 100 trigger GameEnded and IAmSpec do
15745: LD_LOC 21
15749: PUSH
15750: CALL_OW 531
15754: AND
15755: IFFALSE 15764
15757: GO 15759
15759: DISABLE
// YouLostInMultiplayer ;
15760: CALL_OW 107
15764: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
15765: CALL 15151 0 0
15769: PUSH
15770: LD_LOC 21
15774: NOT
15775: AND
15776: IFFALSE 15792
15778: GO 15780
15780: DISABLE
// WaitServerStrings = [ $player-win ] ;
15781: LD_ADDR_EXP 61
15785: PUSH
15786: LD_STRING $player-win
15788: PUSH
15789: EMPTY
15790: LIST
15791: ST_TO_ADDR
15792: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
15793: CALL 15151 0 0
15797: PUSH
15798: LD_LOC 21
15802: AND
15803: IFFALSE 15827
15805: GO 15807
15807: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
15808: LD_EXP 39
15812: PUSH
15813: LD_OWVAR 7
15817: ARRAY
15818: PPUSH
15819: CALL 9145 0 1
// YouWinInMultiplayer ;
15823: CALL_OW 106
// end ;
15827: END
// every 100 trigger isEditor marked 401 do
15828: LD_OWVAR 84
15832: IFFALSE 15848
15834: GO 15836
15836: DISABLE
// Debug_Strings = [ You won ] ;
15837: LD_ADDR_OWVAR 48
15841: PUSH
15842: LD_STRING You won
15844: PUSH
15845: EMPTY
15846: LIST
15847: ST_TO_ADDR
15848: END
// every 100 trigger isEditor marked 400 do
15849: LD_OWVAR 84
15853: IFFALSE 15869
15855: GO 15857
15857: DISABLE
// Debug_Strings = [ You loss ] ;
15858: LD_ADDR_OWVAR 48
15862: PUSH
15863: LD_STRING You loss
15865: PUSH
15866: EMPTY
15867: LIST
15868: ST_TO_ADDR
15869: END
// every 100 marked 98 do var i , un ;
15870: GO 15872
15872: DISABLE
15873: LD_INT 0
15875: PPUSH
15876: PPUSH
// begin for i = 1 to side_positions do
15877: LD_ADDR_VAR 0 1
15881: PUSH
15882: DOUBLE
15883: LD_INT 1
15885: DEC
15886: ST_TO_ADDR
15887: LD_EXP 38
15891: PUSH
15892: FOR_TO
15893: IFFALSE 15980
// begin if side_positions [ i ] then
15895: LD_EXP 38
15899: PUSH
15900: LD_VAR 0 1
15904: ARRAY
15905: IFFALSE 15978
// if not HasPower ( i ) and not defeated [ i ] then
15907: LD_VAR 0 1
15911: PPUSH
15912: CALL 15215 0 1
15916: NOT
15917: PUSH
15918: LD_LOC 20
15922: PUSH
15923: LD_VAR 0 1
15927: ARRAY
15928: NOT
15929: AND
15930: IFFALSE 15978
// begin defeated = replace ( defeated , i , true ) ;
15932: LD_ADDR_LOC 20
15936: PUSH
15937: LD_LOC 20
15941: PPUSH
15942: LD_VAR 0 1
15946: PPUSH
15947: LD_INT 1
15949: PPUSH
15950: CALL_OW 1
15954: ST_TO_ADDR
// if i = mp_player_side then
15955: LD_VAR 0 1
15959: PUSH
15960: LD_OWVAR 7
15964: EQUAL
15965: IFFALSE 15978
// begin Multiplayer_Loose_Message ;
15967: CALL_OW 521
// SetPlayerSpectator ( ) ;
15971: CALL_OW 572
// enable ( 400 ) ;
15975: LD_INT 400
15977: ENABLE_MARKED
// end ; end ; end ;
15978: GO 15892
15980: POP
15981: POP
// DidGameEnd ;
15982: CALL 15997 0 0
// if not GameEnded then
15986: LD_LOC 21
15990: NOT
15991: IFFALSE 15994
// enable ;
15993: ENABLE
// end ;
15994: PPOPN 2
15996: END
// function DidGameEnd ; var i , k , enemy ; begin
15997: LD_INT 0
15999: PPUSH
16000: PPUSH
16001: PPUSH
16002: PPUSH
// enemy = [ ] ;
16003: LD_ADDR_VAR 0 4
16007: PUSH
16008: EMPTY
16009: ST_TO_ADDR
// for i = 1 to side_positions do
16010: LD_ADDR_VAR 0 2
16014: PUSH
16015: DOUBLE
16016: LD_INT 1
16018: DEC
16019: ST_TO_ADDR
16020: LD_EXP 38
16024: PUSH
16025: FOR_TO
16026: IFFALSE 16120
// if not defeated [ i ] then
16028: LD_LOC 20
16032: PUSH
16033: LD_VAR 0 2
16037: ARRAY
16038: NOT
16039: IFFALSE 16118
// for k = 1 to side_positions do
16041: LD_ADDR_VAR 0 3
16045: PUSH
16046: DOUBLE
16047: LD_INT 1
16049: DEC
16050: ST_TO_ADDR
16051: LD_EXP 38
16055: PUSH
16056: FOR_TO
16057: IFFALSE 16116
// if not defeated [ k ] then
16059: LD_LOC 20
16063: PUSH
16064: LD_VAR 0 3
16068: ARRAY
16069: NOT
16070: IFFALSE 16114
// if not AlliedSides ( i , k ) then
16072: LD_VAR 0 2
16076: PPUSH
16077: LD_VAR 0 3
16081: PPUSH
16082: CALL 15561 0 2
16086: NOT
16087: IFFALSE 16114
// enemy = enemy ^ [ i , k ] ;
16089: LD_ADDR_VAR 0 4
16093: PUSH
16094: LD_VAR 0 4
16098: PUSH
16099: LD_VAR 0 2
16103: PUSH
16104: LD_VAR 0 3
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: ADD
16113: ST_TO_ADDR
16114: GO 16056
16116: POP
16117: POP
16118: GO 16025
16120: POP
16121: POP
// if not enemy then
16122: LD_VAR 0 4
16126: NOT
16127: IFFALSE 16153
// begin GameEnded = true ;
16129: LD_ADDR_LOC 21
16133: PUSH
16134: LD_INT 1
16136: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
16137: LD_LOC 20
16141: PUSH
16142: LD_OWVAR 7
16146: ARRAY
16147: NOT
16148: IFFALSE 16153
// enable ( 401 ) ;
16150: LD_INT 401
16152: ENABLE_MARKED
// end ; end ;
16153: LD_VAR 0 1
16157: RET
// function unfog ; var k , friends ; begin
16158: LD_INT 0
16160: PPUSH
16161: PPUSH
16162: PPUSH
// for k = 1 to side_positions do
16163: LD_ADDR_VAR 0 2
16167: PUSH
16168: DOUBLE
16169: LD_INT 1
16171: DEC
16172: ST_TO_ADDR
16173: LD_EXP 38
16177: PUSH
16178: FOR_TO
16179: IFFALSE 16235
// if not defeated [ k ] then
16181: LD_LOC 20
16185: PUSH
16186: LD_VAR 0 2
16190: ARRAY
16191: NOT
16192: IFFALSE 16233
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
16194: LD_OWVAR 7
16198: PPUSH
16199: LD_VAR 0 2
16203: PPUSH
16204: CALL_OW 81
16208: PUSH
16209: LD_INT 1
16211: PUSH
16212: EMPTY
16213: LIST
16214: IN
16215: IFFALSE 16233
// friends = friends ^ k ;
16217: LD_ADDR_VAR 0 3
16221: PUSH
16222: LD_VAR 0 3
16226: PUSH
16227: LD_VAR 0 2
16231: ADD
16232: ST_TO_ADDR
16233: GO 16178
16235: POP
16236: POP
// if not friends then
16237: LD_VAR 0 3
16241: NOT
16242: IFFALSE 16256
// begin SetPlayerSpectator ( ) ;
16244: CALL_OW 572
// unfoged = true ;
16248: LD_ADDR_LOC 22
16252: PUSH
16253: LD_INT 1
16255: ST_TO_ADDR
// end ; end ;
16256: LD_VAR 0 1
16260: RET
// export function MakeGameEnd ; begin
16261: LD_INT 0
16263: PPUSH
// SetPlayerSpectator ( ) ;
16264: CALL_OW 572
// unfoged = true ;
16268: LD_ADDR_LOC 22
16272: PUSH
16273: LD_INT 1
16275: ST_TO_ADDR
// wait ( 0 0$5 ) ;
16276: LD_INT 175
16278: PPUSH
16279: CALL_OW 67
// GameEnded = true ;
16283: LD_ADDR_LOC 21
16287: PUSH
16288: LD_INT 1
16290: ST_TO_ADDR
// end ;
16291: LD_VAR 0 1
16295: RET
// export function GetGameEnded ; begin
16296: LD_INT 0
16298: PPUSH
// result = GameEnded ;
16299: LD_ADDR_VAR 0 1
16303: PUSH
16304: LD_LOC 21
16308: ST_TO_ADDR
// end ;
16309: LD_VAR 0 1
16313: RET
