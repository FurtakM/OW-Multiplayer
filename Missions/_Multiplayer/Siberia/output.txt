// export def_amount_of_siberit , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game ; export Position_Sides ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id , sheik , mastodont ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function read_multiplayer_and_game_parameters ; var i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// if Multiplayer then
   4: LD_OWVAR 4
   8: IFFALSE 72
// begin Game_Type := mp_game_type ;
  10: LD_ADDR_EXP 40
  14: PUSH
  15: LD_OWVAR 6
  19: ST_TO_ADDR
// Your_Side := mp_player_side ;
  20: LD_ADDR_OWVAR 2
  24: PUSH
  25: LD_OWVAR 7
  29: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  30: LD_ADDR_EXP 18
  34: PUSH
  35: LD_OWVAR 17
  39: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  40: LD_ADDR_EXP 16
  44: PUSH
  45: LD_OWVAR 15
  49: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
  50: LD_ADDR_EXP 19
  54: PUSH
  55: LD_OWVAR 16
  59: ST_TO_ADDR
// Teams := mp_teams ;
  60: LD_ADDR_EXP 17
  64: PUSH
  65: LD_OWVAR 12
  69: ST_TO_ADDR
// end else
  70: GO 254
// begin Game_Type := 1 ;
  72: LD_ADDR_EXP 40
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// Your_Side := 3 ;
  80: LD_ADDR_OWVAR 2
  84: PUSH
  85: LD_INT 3
  87: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
  88: LD_ADDR_EXP 18
  92: PUSH
  93: LD_INT 1
  95: PUSH
  96: LD_INT 2
  98: PUSH
  99: LD_INT 3
 101: PUSH
 102: LD_INT 4
 104: PUSH
 105: LD_INT 5
 107: PUSH
 108: LD_INT 6
 110: PUSH
 111: LD_INT 0
 113: PUSH
 114: LD_INT 0
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: LIST
 126: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 127: LD_ADDR_EXP 16
 131: PUSH
 132: LD_INT 1
 134: PUSH
 135: LD_INT 2
 137: PUSH
 138: LD_INT 3
 140: PUSH
 141: LD_INT 4
 143: PUSH
 144: LD_INT 5
 146: PUSH
 147: LD_INT 6
 149: PUSH
 150: LD_INT 0
 152: PUSH
 153: LD_INT 0
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: LIST
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 166: LD_ADDR_EXP 19
 170: PUSH
 171: LD_INT 1
 173: PUSH
 174: LD_INT 2
 176: PUSH
 177: LD_INT 3
 179: PUSH
 180: LD_INT 1
 182: PUSH
 183: LD_INT 2
 185: PUSH
 186: LD_INT 3
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 0
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 205: LD_ADDR_EXP 17
 209: PUSH
 210: LD_INT 1
 212: PUSH
 213: EMPTY
 214: LIST
 215: PUSH
 216: LD_INT 2
 218: PUSH
 219: EMPTY
 220: LIST
 221: PUSH
 222: LD_INT 3
 224: PUSH
 225: EMPTY
 226: LIST
 227: PUSH
 228: LD_INT 4
 230: PUSH
 231: EMPTY
 232: LIST
 233: PUSH
 234: LD_INT 5
 236: PUSH
 237: EMPTY
 238: LIST
 239: PUSH
 240: LD_INT 6
 242: PUSH
 243: EMPTY
 244: LIST
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: LIST
 252: LIST
 253: ST_TO_ADDR
// end ; for i := 1 to 8 do
 254: LD_ADDR_VAR 0 2
 258: PUSH
 259: DOUBLE
 260: LD_INT 1
 262: DEC
 263: ST_TO_ADDR
 264: LD_INT 8
 266: PUSH
 267: FOR_TO
 268: IFFALSE 355
// if Multiplayer_GetPlayerIsSpec ( i ) then
 270: LD_VAR 0 2
 274: PPUSH
 275: CALL_OW 530
 279: IFFALSE 353
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 281: LD_ADDR_EXP 18
 285: PUSH
 286: LD_EXP 18
 290: PPUSH
 291: LD_VAR 0 2
 295: PPUSH
 296: LD_INT 0
 298: PPUSH
 299: CALL_OW 1
 303: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 304: LD_ADDR_EXP 17
 308: PUSH
 309: LD_EXP 17
 313: PPUSH
 314: LD_EXP 16
 318: PUSH
 319: LD_VAR 0 2
 323: ARRAY
 324: PPUSH
 325: LD_EXP 17
 329: PUSH
 330: LD_EXP 16
 334: PUSH
 335: LD_VAR 0 2
 339: ARRAY
 340: ARRAY
 341: PUSH
 342: LD_VAR 0 2
 346: DIFF
 347: PPUSH
 348: CALL_OW 1
 352: ST_TO_ADDR
// end ;
 353: GO 267
 355: POP
 356: POP
// Position_Sides := [ 0 , 0 , 0 , 0 , 0 , 0 ] ;
 357: LD_ADDR_EXP 21
 361: PUSH
 362: LD_INT 0
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 0
 370: PUSH
 371: LD_INT 0
 373: PUSH
 374: LD_INT 0
 376: PUSH
 377: LD_INT 0
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: LIST
 387: ST_TO_ADDR
// for i := 1 to 8 do
 388: LD_ADDR_VAR 0 2
 392: PUSH
 393: DOUBLE
 394: LD_INT 1
 396: DEC
 397: ST_TO_ADDR
 398: LD_INT 8
 400: PUSH
 401: FOR_TO
 402: IFFALSE 449
// if Side_Positions [ i ] then
 404: LD_EXP 18
 408: PUSH
 409: LD_VAR 0 2
 413: ARRAY
 414: IFFALSE 447
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 416: LD_ADDR_EXP 21
 420: PUSH
 421: LD_EXP 21
 425: PPUSH
 426: LD_EXP 18
 430: PUSH
 431: LD_VAR 0 2
 435: ARRAY
 436: PPUSH
 437: LD_VAR 0 2
 441: PPUSH
 442: CALL_OW 1
 446: ST_TO_ADDR
 447: GO 401
 449: POP
 450: POP
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 451: LD_ADDR_EXP 20
 455: PUSH
 456: LD_EXP 16
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: EMPTY
 465: LIST
 466: DIFF
 467: PUSH
 468: LD_INT 1
 470: GREATER
 471: ST_TO_ADDR
// if Multiplayer then
 472: LD_OWVAR 4
 476: IFFALSE 722
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 478: LD_ADDR_EXP 42
 482: PUSH
 483: LD_INT 0
 485: PPUSH
 486: CALL_OW 426
 490: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 491: LD_ADDR_EXP 43
 495: PUSH
 496: LD_INT 1
 498: PPUSH
 499: CALL_OW 426
 503: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 504: LD_ADDR_EXP 44
 508: PUSH
 509: LD_INT 2
 511: PPUSH
 512: CALL_OW 426
 516: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 517: LD_ADDR_EXP 45
 521: PUSH
 522: LD_INT 3
 524: PPUSH
 525: CALL_OW 426
 529: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 530: LD_ADDR_EXP 46
 534: PUSH
 535: LD_INT 4
 537: PPUSH
 538: CALL_OW 426
 542: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 543: LD_ADDR_EXP 47
 547: PUSH
 548: LD_INT 5
 550: PPUSH
 551: CALL_OW 426
 555: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 556: LD_ADDR_EXP 48
 560: PUSH
 561: LD_INT 6
 563: PPUSH
 564: CALL_OW 426
 568: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 569: LD_ADDR_EXP 49
 573: PUSH
 574: LD_INT 10
 576: PPUSH
 577: CALL_OW 426
 581: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 582: LD_ADDR_EXP 50
 586: PUSH
 587: LD_INT 11
 589: PPUSH
 590: CALL_OW 426
 594: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 595: LD_ADDR_EXP 51
 599: PUSH
 600: LD_INT 12
 602: PPUSH
 603: CALL_OW 426
 607: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 608: LD_ADDR_EXP 52
 612: PUSH
 613: LD_INT 13
 615: PPUSH
 616: CALL_OW 426
 620: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 621: LD_ADDR_EXP 53
 625: PUSH
 626: LD_INT 14
 628: PPUSH
 629: CALL_OW 426
 633: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 634: LD_ADDR_EXP 1
 638: PUSH
 639: LD_INT 15
 641: PPUSH
 642: CALL_OW 426
 646: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 647: LD_ADDR_EXP 2
 651: PUSH
 652: LD_INT 16
 654: PPUSH
 655: CALL_OW 426
 659: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 660: LD_ADDR_EXP 54
 664: PUSH
 665: LD_INT 17
 667: PPUSH
 668: CALL_OW 426
 672: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 673: LD_ADDR_EXP 55
 677: PUSH
 678: LD_INT 20
 680: PPUSH
 681: CALL_OW 426
 685: ST_TO_ADDR
// def_game_rules := 0 ;
 686: LD_ADDR_EXP 41
 690: PUSH
 691: LD_INT 0
 693: ST_TO_ADDR
// def_sheik := GetMultiplayerSetting ( 22 ) ;
 694: LD_ADDR_EXP 56
 698: PUSH
 699: LD_INT 22
 701: PPUSH
 702: CALL_OW 426
 706: ST_TO_ADDR
// def_mastodont := GetMultiplayerSetting ( 23 ) ;
 707: LD_ADDR_EXP 57
 711: PUSH
 712: LD_INT 23
 714: PPUSH
 715: CALL_OW 426
 719: ST_TO_ADDR
// end else
 720: GO 878
// begin Randomize ;
 722: CALL_OW 10
// def_base_level := 2 ;
 726: LD_ADDR_EXP 42
 730: PUSH
 731: LD_INT 2
 733: ST_TO_ADDR
// def_amount_of_people := 0 ;
 734: LD_ADDR_EXP 43
 738: PUSH
 739: LD_INT 0
 741: ST_TO_ADDR
// def_skill_level := 1 ;
 742: LD_ADDR_EXP 44
 746: PUSH
 747: LD_INT 1
 749: ST_TO_ADDR
// def_starting_resources := 2 ;
 750: LD_ADDR_EXP 45
 754: PUSH
 755: LD_INT 2
 757: ST_TO_ADDR
// def_shipments_density := 1 ;
 758: LD_ADDR_EXP 46
 762: PUSH
 763: LD_INT 1
 765: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
 766: LD_ADDR_EXP 47
 770: PUSH
 771: LD_INT 1
 773: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
 774: LD_ADDR_EXP 48
 778: PUSH
 779: LD_INT 2
 781: ST_TO_ADDR
// def_shared_vision := 1 ;
 782: LD_ADDR_EXP 49
 786: PUSH
 787: LD_INT 1
 789: ST_TO_ADDR
// def_morale_flags := 1 ;
 790: LD_ADDR_EXP 50
 794: PUSH
 795: LD_INT 1
 797: ST_TO_ADDR
// def_siberite_detection := 1 ;
 798: LD_ADDR_EXP 51
 802: PUSH
 803: LD_INT 1
 805: ST_TO_ADDR
// def_people_respawning := 2 ;
 806: LD_ADDR_EXP 52
 810: PUSH
 811: LD_INT 2
 813: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 814: LD_ADDR_EXP 53
 818: PUSH
 819: LD_INT 3
 821: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 822: LD_ADDR_EXP 1
 826: PUSH
 827: LD_INT 0
 829: ST_TO_ADDR
// def_public_score := 0 ;
 830: LD_ADDR_EXP 2
 834: PUSH
 835: LD_INT 0
 837: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 838: LD_ADDR_EXP 54
 842: PUSH
 843: LD_INT 0
 845: ST_TO_ADDR
// def_builduptime := 0 ;
 846: LD_ADDR_EXP 55
 850: PUSH
 851: LD_INT 0
 853: ST_TO_ADDR
// def_game_rules := 0 ;
 854: LD_ADDR_EXP 41
 858: PUSH
 859: LD_INT 0
 861: ST_TO_ADDR
// def_sheik := 0 ;
 862: LD_ADDR_EXP 56
 866: PUSH
 867: LD_INT 0
 869: ST_TO_ADDR
// def_mastodont := 0 ;
 870: LD_ADDR_EXP 57
 874: PUSH
 875: LD_INT 0
 877: ST_TO_ADDR
// end ; InitGameRules ;
 878: CALL 11155 0 0
// if def_game_rules = 0 then
 882: LD_EXP 41
 886: PUSH
 887: LD_INT 0
 889: EQUAL
 890: IFFALSE 902
// begin if isSGUI then
 892: LD_OWVAR 83
 896: IFFALSE 902
// setMpTechs ( ) end ;
 898: CALL 14605 0 0
// if ( Game_Type = 5 ) then
 902: LD_EXP 40
 906: PUSH
 907: LD_INT 5
 909: EQUAL
 910: IFFALSE 939
// begin def_base_level := 1 ;
 912: LD_ADDR_EXP 42
 916: PUSH
 917: LD_INT 1
 919: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 920: LD_ADDR_EXP 47
 924: PUSH
 925: LD_INT 0
 927: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
 928: LD_ADDR_EXP 48
 932: PUSH
 933: LD_INT 0
 935: ST_TO_ADDR
// disable ( 10 ) ;
 936: LD_INT 10
 938: DISABLE_MARKED
// end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 939: LD_ADDR_EXP 3
 943: PUSH
 944: LD_INT 0
 946: PUSH
 947: LD_INT 1
 949: PUSH
 950: LD_INT 1
 952: PUSH
 953: EMPTY
 954: LIST
 955: LIST
 956: LIST
 957: PUSH
 958: LD_EXP 42
 962: PUSH
 963: LD_INT 1
 965: PLUS
 966: ARRAY
 967: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 ] [ def_base_level + 1 ] ;
 968: LD_ADDR_EXP 4
 972: PUSH
 973: LD_INT 0
 975: PUSH
 976: LD_INT 0
 978: PUSH
 979: LD_INT 2
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: LIST
 986: PUSH
 987: LD_EXP 42
 991: PUSH
 992: LD_INT 1
 994: PLUS
 995: ARRAY
 996: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 997: LD_ADDR_EXP 5
1001: PUSH
1002: LD_INT 9
1004: PUSH
1005: LD_INT 12
1007: PUSH
1008: LD_INT 15
1010: PUSH
1011: LD_INT 24
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: PUSH
1020: LD_EXP 43
1024: PUSH
1025: LD_INT 1
1027: PLUS
1028: ARRAY
1029: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 , 8 ] [ def_skill_level + 1 ] ;
1030: LD_ADDR_EXP 6
1034: PUSH
1035: LD_INT 2
1037: PUSH
1038: LD_INT 3
1040: PUSH
1041: LD_INT 4
1043: PUSH
1044: LD_INT 5
1046: PUSH
1047: LD_INT 8
1049: PUSH
1050: EMPTY
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: PUSH
1057: LD_EXP 44
1061: PUSH
1062: LD_INT 1
1064: PLUS
1065: ARRAY
1066: ST_TO_ADDR
// if ( Game_Type = 5 ) then
1067: LD_EXP 40
1071: PUSH
1072: LD_INT 5
1074: EQUAL
1075: IFFALSE 1193
// begin starting_resources := [ [ 1000 , 100 , 100 ] , [ 2000 , 200 , 200 ] , [ 5000 , 500 , 500 ] , [ 10000 , 1000 , 1000 ] , [ 25000 , 2500 , 2500 ] , [ 50000 , 5000 , 5000 ] ] [ def_starting_resources + 1 ] ;
1077: LD_ADDR_EXP 8
1081: PUSH
1082: LD_INT 1000
1084: PUSH
1085: LD_INT 100
1087: PUSH
1088: LD_INT 100
1090: PUSH
1091: EMPTY
1092: LIST
1093: LIST
1094: LIST
1095: PUSH
1096: LD_INT 2000
1098: PUSH
1099: LD_INT 200
1101: PUSH
1102: LD_INT 200
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: LIST
1109: PUSH
1110: LD_INT 5000
1112: PUSH
1113: LD_INT 500
1115: PUSH
1116: LD_INT 500
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: PUSH
1124: LD_INT 10000
1126: PUSH
1127: LD_INT 1000
1129: PUSH
1130: LD_INT 1000
1132: PUSH
1133: EMPTY
1134: LIST
1135: LIST
1136: LIST
1137: PUSH
1138: LD_INT 25000
1140: PUSH
1141: LD_INT 2500
1143: PUSH
1144: LD_INT 2500
1146: PUSH
1147: EMPTY
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 50000
1154: PUSH
1155: LD_INT 5000
1157: PUSH
1158: LD_INT 5000
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: PUSH
1174: LD_EXP 45
1178: PUSH
1179: LD_INT 1
1181: PLUS
1182: ARRAY
1183: ST_TO_ADDR
// starting_crates := [ ] ;
1184: LD_ADDR_EXP 7
1188: PUSH
1189: EMPTY
1190: ST_TO_ADDR
// end else
1191: GO 1339
// begin starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1193: LD_ADDR_EXP 8
1197: PUSH
1198: LD_INT 0
1200: PUSH
1201: LD_INT 0
1203: PUSH
1204: LD_INT 0
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: LIST
1211: PUSH
1212: LD_INT 30
1214: PUSH
1215: LD_INT 0
1217: PUSH
1218: LD_INT 0
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: LIST
1225: PUSH
1226: LD_INT 50
1228: PUSH
1229: LD_INT 20
1231: PUSH
1232: LD_INT 0
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: LIST
1239: PUSH
1240: LD_INT 80
1242: PUSH
1243: LD_INT 40
1245: PUSH
1246: LD_INT 20
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: PUSH
1260: LD_EXP 45
1264: PUSH
1265: LD_INT 1
1267: PLUS
1268: ARRAY
1269: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1270: LD_ADDR_EXP 7
1274: PUSH
1275: LD_INT 10
1277: PUSH
1278: EMPTY
1279: LIST
1280: PUSH
1281: LD_INT 7
1283: PUSH
1284: LD_INT 14
1286: PUSH
1287: EMPTY
1288: LIST
1289: LIST
1290: PUSH
1291: LD_INT 6
1293: PUSH
1294: LD_INT 12
1296: PUSH
1297: LD_INT 18
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: LIST
1304: PUSH
1305: LD_INT 5
1307: PUSH
1308: LD_INT 10
1310: PUSH
1311: LD_INT 15
1313: PUSH
1314: LD_INT 20
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: PUSH
1329: LD_EXP 45
1333: PUSH
1334: LD_INT 1
1336: PLUS
1337: ARRAY
1338: ST_TO_ADDR
// end ; shipments_density := [ 150 , 125 , 100 , 50 ] [ def_shipments_density + 1 ] ;
1339: LD_ADDR_EXP 9
1343: PUSH
1344: LD_INT 150
1346: PUSH
1347: LD_INT 125
1349: PUSH
1350: LD_INT 100
1352: PUSH
1353: LD_INT 50
1355: PUSH
1356: EMPTY
1357: LIST
1358: LIST
1359: LIST
1360: LIST
1361: PUSH
1362: LD_EXP 46
1366: PUSH
1367: LD_INT 1
1369: PLUS
1370: ARRAY
1371: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1372: LD_ADDR_EXP 13
1376: PUSH
1377: LD_INT 0
1379: PUSH
1380: LD_INT 10500
1382: PUSH
1383: LD_INT 6300
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: LIST
1390: PUSH
1391: LD_EXP 52
1395: PUSH
1396: LD_INT 1
1398: PLUS
1399: ARRAY
1400: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1401: LD_ADDR_EXP 14
1405: PUSH
1406: LD_INT 0
1408: PUSH
1409: LD_INT 31500
1411: PUSH
1412: LD_INT 10500
1414: PUSH
1415: EMPTY
1416: LIST
1417: LIST
1418: LIST
1419: PUSH
1420: LD_EXP 52
1424: PUSH
1425: LD_INT 1
1427: PLUS
1428: ARRAY
1429: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1430: LD_ADDR_EXP 11
1434: PUSH
1435: LD_INT 0
1437: PUSH
1438: LD_INT 1
1440: PUSH
1441: LD_INT 2
1443: PUSH
1444: LD_INT 3
1446: PUSH
1447: EMPTY
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: PUSH
1453: LD_EXP 53
1457: PUSH
1458: LD_INT 1
1460: PLUS
1461: ARRAY
1462: ST_TO_ADDR
// amount_of_siberit := [ 30 , 50 , 80 , 100 , 130 , 150 , 200 ] [ def_amount_of_siberit + 1 ] ;
1463: LD_ADDR_EXP 12
1467: PUSH
1468: LD_INT 30
1470: PUSH
1471: LD_INT 50
1473: PUSH
1474: LD_INT 80
1476: PUSH
1477: LD_INT 100
1479: PUSH
1480: LD_INT 130
1482: PUSH
1483: LD_INT 150
1485: PUSH
1486: LD_INT 200
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: PUSH
1498: LD_EXP 1
1502: PUSH
1503: LD_INT 1
1505: PLUS
1506: ARRAY
1507: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1508: LD_ADDR_EXP 10
1512: PUSH
1513: LD_INT 1
1515: NEG
1516: PUSH
1517: LD_INT 350
1519: PUSH
1520: LD_INT 700
1522: PUSH
1523: LD_INT 1400
1525: PUSH
1526: LD_INT 0
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: PUSH
1536: LD_EXP 50
1540: PUSH
1541: LD_INT 1
1543: PLUS
1544: ARRAY
1545: ST_TO_ADDR
// battle_flags_id := [ ] ;
1546: LD_ADDR_EXP 29
1550: PUSH
1551: EMPTY
1552: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1553: LD_ADDR_EXP 15
1557: PUSH
1558: LD_INT 0
1560: PUSH
1561: LD_INT 1
1563: PUSH
1564: LD_INT 63000
1566: PUSH
1567: LD_INT 126000
1569: PUSH
1570: LD_INT 189000
1572: PUSH
1573: LD_INT 252000
1575: PUSH
1576: EMPTY
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: PUSH
1584: LD_EXP 54
1588: PUSH
1589: LD_INT 1
1591: PLUS
1592: ARRAY
1593: ST_TO_ADDR
// if ( Game_Type = 12 ) then
1594: LD_EXP 40
1598: PUSH
1599: LD_INT 12
1601: EQUAL
1602: IFFALSE 1660
// begin sheik := [ 0 , 1 ] [ def_sheik + 1 ] ;
1604: LD_ADDR_EXP 30
1608: PUSH
1609: LD_INT 0
1611: PUSH
1612: LD_INT 1
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PUSH
1619: LD_EXP 56
1623: PUSH
1624: LD_INT 1
1626: PLUS
1627: ARRAY
1628: ST_TO_ADDR
// mastodont := [ 0 , 1 , 2 ] [ def_mastodont + 1 ] end else
1629: LD_ADDR_EXP 31
1633: PUSH
1634: LD_INT 0
1636: PUSH
1637: LD_INT 1
1639: PUSH
1640: LD_INT 2
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: LIST
1647: PUSH
1648: LD_EXP 57
1652: PUSH
1653: LD_INT 1
1655: PLUS
1656: ARRAY
1657: ST_TO_ADDR
1658: GO 1676
// begin sheik := 0 ;
1660: LD_ADDR_EXP 30
1664: PUSH
1665: LD_INT 0
1667: ST_TO_ADDR
// mastodont := 0 ;
1668: LD_ADDR_EXP 31
1672: PUSH
1673: LD_INT 0
1675: ST_TO_ADDR
// end ; BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
1676: LD_ADDR_EXP 39
1680: PUSH
1681: LD_INT 9
1683: PUSH
1684: LD_INT 10
1686: PUSH
1687: LD_INT 11
1689: PUSH
1690: LD_INT 12
1692: PUSH
1693: LD_INT 13
1695: PUSH
1696: LD_INT 14
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: ST_TO_ADDR
// end ;
1707: LD_VAR 0 1
1711: RET
// function init_map ; var i , j ; begin
1712: LD_INT 0
1714: PPUSH
1715: PPUSH
1716: PPUSH
// normal_oil_deposits_locations := [ [ 101 , 187 ] , [ 18 , 26 ] , [ 50 , 89 ] , [ 123 , 3 ] , [ 182 , 69 ] , [ 231 , 174 ] ] ;
1717: LD_ADDR_EXP 25
1721: PUSH
1722: LD_INT 101
1724: PUSH
1725: LD_INT 187
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: PUSH
1732: LD_INT 18
1734: PUSH
1735: LD_INT 26
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: PUSH
1742: LD_INT 50
1744: PUSH
1745: LD_INT 89
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: PUSH
1752: LD_INT 123
1754: PUSH
1755: LD_INT 3
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: PUSH
1762: LD_INT 182
1764: PUSH
1765: LD_INT 69
1767: PUSH
1768: EMPTY
1769: LIST
1770: LIST
1771: PUSH
1772: LD_INT 231
1774: PUSH
1775: LD_INT 174
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 101 , 187 ] , [ 108 , 183 ] ] , [ [ 18 , 26 ] , [ 7 , 8 ] ] , [ [ 50 , 89 ] , [ 62 , 99 ] ] , [ [ 123 , 3 ] , [ 149 , 18 ] ] , [ [ 182 , 69 ] , [ 202 , 90 ] ] , [ [ 231 , 174 ] , [ 239 , 164 ] ] ] ;
1790: LD_ADDR_EXP 26
1794: PUSH
1795: LD_INT 101
1797: PUSH
1798: LD_INT 187
1800: PUSH
1801: EMPTY
1802: LIST
1803: LIST
1804: PUSH
1805: LD_INT 108
1807: PUSH
1808: LD_INT 183
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: PUSH
1819: LD_INT 18
1821: PUSH
1822: LD_INT 26
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: PUSH
1829: LD_INT 7
1831: PUSH
1832: LD_INT 8
1834: PUSH
1835: EMPTY
1836: LIST
1837: LIST
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 50
1845: PUSH
1846: LD_INT 89
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PUSH
1853: LD_INT 62
1855: PUSH
1856: LD_INT 99
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: PUSH
1863: EMPTY
1864: LIST
1865: LIST
1866: PUSH
1867: LD_INT 123
1869: PUSH
1870: LD_INT 3
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 149
1879: PUSH
1880: LD_INT 18
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PUSH
1891: LD_INT 182
1893: PUSH
1894: LD_INT 69
1896: PUSH
1897: EMPTY
1898: LIST
1899: LIST
1900: PUSH
1901: LD_INT 202
1903: PUSH
1904: LD_INT 90
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: PUSH
1915: LD_INT 231
1917: PUSH
1918: LD_INT 174
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: PUSH
1925: LD_INT 239
1927: PUSH
1928: LD_INT 164
1930: PUSH
1931: EMPTY
1932: LIST
1933: LIST
1934: PUSH
1935: EMPTY
1936: LIST
1937: LIST
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 96 , 185 ] , [ 21 , 29 ] , [ 50 , 85 ] , [ 128 , 2 ] , [ 186 , 72 ] , [ 234 , 174 ] ] ;
1947: LD_ADDR_EXP 27
1951: PUSH
1952: LD_INT 96
1954: PUSH
1955: LD_INT 185
1957: PUSH
1958: EMPTY
1959: LIST
1960: LIST
1961: PUSH
1962: LD_INT 21
1964: PUSH
1965: LD_INT 29
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PUSH
1972: LD_INT 50
1974: PUSH
1975: LD_INT 85
1977: PUSH
1978: EMPTY
1979: LIST
1980: LIST
1981: PUSH
1982: LD_INT 128
1984: PUSH
1985: LD_INT 2
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: PUSH
1992: LD_INT 186
1994: PUSH
1995: LD_INT 72
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: PUSH
2002: LD_INT 234
2004: PUSH
2005: LD_INT 174
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 96 , 185 ] , [ 109 , 179 ] ] , [ [ 21 , 29 ] , [ 9 , 5 ] ] , [ [ 50 , 85 ] , [ 66 , 102 ] ] , [ [ 128 , 2 ] , [ 152 , 15 ] ] , [ [ 186 , 72 ] , [ 200 , 86 ] ] , [ [ 234 , 174 ] , [ 237 , 160 ] ] ] ;
2020: LD_ADDR_EXP 28
2024: PUSH
2025: LD_INT 96
2027: PUSH
2028: LD_INT 185
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: PUSH
2035: LD_INT 109
2037: PUSH
2038: LD_INT 179
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PUSH
2049: LD_INT 21
2051: PUSH
2052: LD_INT 29
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: PUSH
2059: LD_INT 9
2061: PUSH
2062: LD_INT 5
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: PUSH
2069: EMPTY
2070: LIST
2071: LIST
2072: PUSH
2073: LD_INT 50
2075: PUSH
2076: LD_INT 85
2078: PUSH
2079: EMPTY
2080: LIST
2081: LIST
2082: PUSH
2083: LD_INT 66
2085: PUSH
2086: LD_INT 102
2088: PUSH
2089: EMPTY
2090: LIST
2091: LIST
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 128
2099: PUSH
2100: LD_INT 2
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: LD_INT 152
2109: PUSH
2110: LD_INT 15
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: PUSH
2121: LD_INT 186
2123: PUSH
2124: LD_INT 72
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: PUSH
2131: LD_INT 200
2133: PUSH
2134: LD_INT 86
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: PUSH
2141: EMPTY
2142: LIST
2143: LIST
2144: PUSH
2145: LD_INT 234
2147: PUSH
2148: LD_INT 174
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: PUSH
2155: LD_INT 237
2157: PUSH
2158: LD_INT 160
2160: PUSH
2161: EMPTY
2162: LIST
2163: LIST
2164: PUSH
2165: EMPTY
2166: LIST
2167: LIST
2168: PUSH
2169: EMPTY
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: ST_TO_ADDR
// depot_def := [ [ 100 , 179 , 0 ] , [ 21 , 18 , 2 ] , [ 65 , 90 , 2 ] , [ 132 , 11 , 1 ] , [ 190 , 82 , 4 ] , [ 230 , 164 , 4 ] ] ;
2177: LD_ADDR_EXP 22
2181: PUSH
2182: LD_INT 100
2184: PUSH
2185: LD_INT 179
2187: PUSH
2188: LD_INT 0
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: LIST
2195: PUSH
2196: LD_INT 21
2198: PUSH
2199: LD_INT 18
2201: PUSH
2202: LD_INT 2
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: LIST
2209: PUSH
2210: LD_INT 65
2212: PUSH
2213: LD_INT 90
2215: PUSH
2216: LD_INT 2
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: LIST
2223: PUSH
2224: LD_INT 132
2226: PUSH
2227: LD_INT 11
2229: PUSH
2230: LD_INT 1
2232: PUSH
2233: EMPTY
2234: LIST
2235: LIST
2236: LIST
2237: PUSH
2238: LD_INT 190
2240: PUSH
2241: LD_INT 82
2243: PUSH
2244: LD_INT 4
2246: PUSH
2247: EMPTY
2248: LIST
2249: LIST
2250: LIST
2251: PUSH
2252: LD_INT 230
2254: PUSH
2255: LD_INT 164
2257: PUSH
2258: LD_INT 4
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: LIST
2265: PUSH
2266: EMPTY
2267: LIST
2268: LIST
2269: LIST
2270: LIST
2271: LIST
2272: LIST
2273: ST_TO_ADDR
// for i in depot_def do
2274: LD_ADDR_VAR 0 2
2278: PUSH
2279: LD_EXP 22
2283: PUSH
2284: FOR_IN
2285: IFFALSE 2359
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 10 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 10 ) ] ] ;
2287: LD_ADDR_EXP 24
2291: PUSH
2292: LD_EXP 24
2296: PUSH
2297: LD_VAR 0 2
2301: PUSH
2302: LD_INT 1
2304: ARRAY
2305: PPUSH
2306: LD_VAR 0 2
2310: PUSH
2311: LD_INT 3
2313: ARRAY
2314: PPUSH
2315: LD_INT 10
2317: PPUSH
2318: CALL_OW 272
2322: PUSH
2323: LD_VAR 0 2
2327: PUSH
2328: LD_INT 2
2330: ARRAY
2331: PPUSH
2332: LD_VAR 0 2
2336: PUSH
2337: LD_INT 3
2339: ARRAY
2340: PPUSH
2341: LD_INT 10
2343: PPUSH
2344: CALL_OW 273
2348: PUSH
2349: EMPTY
2350: LIST
2351: LIST
2352: PUSH
2353: EMPTY
2354: LIST
2355: ADD
2356: ST_TO_ADDR
2357: GO 2284
2359: POP
2360: POP
// breastworks_def := [ [ [ 88 , 154 , 3 ] , [ 105 , 167 , 4 ] ] , [ [ 27 , 32 , 5 ] , [ 40 , 24 , 4 ] ] , [ [ 78 , 102 , 5 ] , [ 74 , 84 , 3 ] ] , [ [ 128 , 20 , 0 ] , [ 122 , 6 , 1 ] ] , [ [ 185 , 92 , 0 ] , [ 175 , 73 , 1 ] ] , [ [ 219 , 171 , 1 ] , [ 219 , 151 , 2 ] ] ] ;
2361: LD_ADDR_EXP 23
2365: PUSH
2366: LD_INT 88
2368: PUSH
2369: LD_INT 154
2371: PUSH
2372: LD_INT 3
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: LIST
2379: PUSH
2380: LD_INT 105
2382: PUSH
2383: LD_INT 167
2385: PUSH
2386: LD_INT 4
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: LIST
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: PUSH
2398: LD_INT 27
2400: PUSH
2401: LD_INT 32
2403: PUSH
2404: LD_INT 5
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: LIST
2411: PUSH
2412: LD_INT 40
2414: PUSH
2415: LD_INT 24
2417: PUSH
2418: LD_INT 4
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: LIST
2425: PUSH
2426: EMPTY
2427: LIST
2428: LIST
2429: PUSH
2430: LD_INT 78
2432: PUSH
2433: LD_INT 102
2435: PUSH
2436: LD_INT 5
2438: PUSH
2439: EMPTY
2440: LIST
2441: LIST
2442: LIST
2443: PUSH
2444: LD_INT 74
2446: PUSH
2447: LD_INT 84
2449: PUSH
2450: LD_INT 3
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: LIST
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: PUSH
2462: LD_INT 128
2464: PUSH
2465: LD_INT 20
2467: PUSH
2468: LD_INT 0
2470: PUSH
2471: EMPTY
2472: LIST
2473: LIST
2474: LIST
2475: PUSH
2476: LD_INT 122
2478: PUSH
2479: LD_INT 6
2481: PUSH
2482: LD_INT 1
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: LIST
2489: PUSH
2490: EMPTY
2491: LIST
2492: LIST
2493: PUSH
2494: LD_INT 185
2496: PUSH
2497: LD_INT 92
2499: PUSH
2500: LD_INT 0
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: LIST
2507: PUSH
2508: LD_INT 175
2510: PUSH
2511: LD_INT 73
2513: PUSH
2514: LD_INT 1
2516: PUSH
2517: EMPTY
2518: LIST
2519: LIST
2520: LIST
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: PUSH
2526: LD_INT 219
2528: PUSH
2529: LD_INT 171
2531: PUSH
2532: LD_INT 1
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: LIST
2539: PUSH
2540: LD_INT 219
2542: PUSH
2543: LD_INT 151
2545: PUSH
2546: LD_INT 2
2548: PUSH
2549: EMPTY
2550: LIST
2551: LIST
2552: LIST
2553: PUSH
2554: EMPTY
2555: LIST
2556: LIST
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: LIST
2562: LIST
2563: LIST
2564: LIST
2565: ST_TO_ADDR
// for i = 1 to Side_Positions do
2566: LD_ADDR_VAR 0 2
2570: PUSH
2571: DOUBLE
2572: LD_INT 1
2574: DEC
2575: ST_TO_ADDR
2576: LD_EXP 18
2580: PUSH
2581: FOR_TO
2582: IFFALSE 2712
// begin if not Side_Positions [ i ] then
2584: LD_EXP 18
2588: PUSH
2589: LD_VAR 0 2
2593: ARRAY
2594: NOT
2595: IFFALSE 2599
// continue ;
2597: GO 2581
// if def_extra_oil_deposits then
2599: LD_EXP 47
2603: IFFALSE 2661
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2605: LD_ADDR_VAR 0 3
2609: PUSH
2610: LD_EXP 26
2614: PUSH
2615: LD_EXP 18
2619: PUSH
2620: LD_VAR 0 2
2624: ARRAY
2625: ARRAY
2626: PUSH
2627: FOR_IN
2628: IFFALSE 2657
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2630: LD_VAR 0 3
2634: PUSH
2635: LD_INT 1
2637: ARRAY
2638: PPUSH
2639: LD_VAR 0 3
2643: PUSH
2644: LD_INT 2
2646: ARRAY
2647: PPUSH
2648: LD_INT 2
2650: PPUSH
2651: CALL_OW 62
2655: GO 2627
2657: POP
2658: POP
2659: GO 2710
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2661: LD_EXP 25
2665: PUSH
2666: LD_EXP 18
2670: PUSH
2671: LD_VAR 0 2
2675: ARRAY
2676: ARRAY
2677: PUSH
2678: LD_INT 1
2680: ARRAY
2681: PPUSH
2682: LD_EXP 25
2686: PUSH
2687: LD_EXP 18
2691: PUSH
2692: LD_VAR 0 2
2696: ARRAY
2697: ARRAY
2698: PUSH
2699: LD_INT 2
2701: ARRAY
2702: PPUSH
2703: LD_INT 2
2705: PPUSH
2706: CALL_OW 62
// end ;
2710: GO 2581
2712: POP
2713: POP
// if def_extra_sib_deposits then
2714: LD_EXP 48
2718: IFFALSE 2872
// for i = 1 to Side_Positions do
2720: LD_ADDR_VAR 0 2
2724: PUSH
2725: DOUBLE
2726: LD_INT 1
2728: DEC
2729: ST_TO_ADDR
2730: LD_EXP 18
2734: PUSH
2735: FOR_TO
2736: IFFALSE 2870
// begin if not Side_Positions [ i ] then
2738: LD_EXP 18
2742: PUSH
2743: LD_VAR 0 2
2747: ARRAY
2748: NOT
2749: IFFALSE 2753
// continue ;
2751: GO 2735
// if def_extra_sib_deposits = 2 then
2753: LD_EXP 48
2757: PUSH
2758: LD_INT 2
2760: EQUAL
2761: IFFALSE 2819
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
2763: LD_ADDR_VAR 0 3
2767: PUSH
2768: LD_EXP 28
2772: PUSH
2773: LD_EXP 18
2777: PUSH
2778: LD_VAR 0 2
2782: ARRAY
2783: ARRAY
2784: PUSH
2785: FOR_IN
2786: IFFALSE 2815
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2788: LD_VAR 0 3
2792: PUSH
2793: LD_INT 1
2795: ARRAY
2796: PPUSH
2797: LD_VAR 0 3
2801: PUSH
2802: LD_INT 2
2804: ARRAY
2805: PPUSH
2806: LD_INT 3
2808: PPUSH
2809: CALL_OW 62
2813: GO 2785
2815: POP
2816: POP
2817: GO 2868
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2819: LD_EXP 27
2823: PUSH
2824: LD_EXP 18
2828: PUSH
2829: LD_VAR 0 2
2833: ARRAY
2834: ARRAY
2835: PUSH
2836: LD_INT 1
2838: ARRAY
2839: PPUSH
2840: LD_EXP 27
2844: PUSH
2845: LD_EXP 18
2849: PUSH
2850: LD_VAR 0 2
2854: ARRAY
2855: ARRAY
2856: PUSH
2857: LD_INT 2
2859: ARRAY
2860: PPUSH
2861: LD_INT 3
2863: PPUSH
2864: CALL_OW 62
// end ;
2868: GO 2735
2870: POP
2871: POP
// end ;
2872: LD_VAR 0 1
2876: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2877: LD_INT 0
2879: PPUSH
2880: PPUSH
2881: PPUSH
// if not Team_Game then
2882: LD_EXP 20
2886: NOT
2887: IFFALSE 2985
// begin for i = 1 to 8 do
2889: LD_ADDR_VAR 0 2
2893: PUSH
2894: DOUBLE
2895: LD_INT 1
2897: DEC
2898: ST_TO_ADDR
2899: LD_INT 8
2901: PUSH
2902: FOR_TO
2903: IFFALSE 2981
// for j = 1 to 8 do
2905: LD_ADDR_VAR 0 3
2909: PUSH
2910: DOUBLE
2911: LD_INT 1
2913: DEC
2914: ST_TO_ADDR
2915: LD_INT 8
2917: PUSH
2918: FOR_TO
2919: IFFALSE 2977
// if i <> j then
2921: LD_VAR 0 2
2925: PUSH
2926: LD_VAR 0 3
2930: NONEQUAL
2931: IFFALSE 2955
// SetAttitude ( i , j , att_neutral , true ) else
2933: LD_VAR 0 2
2937: PPUSH
2938: LD_VAR 0 3
2942: PPUSH
2943: LD_INT 0
2945: PPUSH
2946: LD_INT 1
2948: PPUSH
2949: CALL_OW 80
2953: GO 2975
// SetAttitude ( i , j , att_friend , true ) ;
2955: LD_VAR 0 2
2959: PPUSH
2960: LD_VAR 0 3
2964: PPUSH
2965: LD_INT 1
2967: PPUSH
2968: LD_INT 1
2970: PPUSH
2971: CALL_OW 80
2975: GO 2918
2977: POP
2978: POP
2979: GO 2902
2981: POP
2982: POP
// end else
2983: GO 3160
// begin if def_shared_vision then
2985: LD_EXP 49
2989: IFFALSE 3054
// begin for i in Teams do
2991: LD_ADDR_VAR 0 2
2995: PUSH
2996: LD_EXP 17
3000: PUSH
3001: FOR_IN
3002: IFFALSE 3052
// for j = 2 to i do
3004: LD_ADDR_VAR 0 3
3008: PUSH
3009: DOUBLE
3010: LD_INT 2
3012: DEC
3013: ST_TO_ADDR
3014: LD_VAR 0 2
3018: PUSH
3019: FOR_TO
3020: IFFALSE 3048
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
3022: LD_VAR 0 2
3026: PUSH
3027: LD_VAR 0 3
3031: ARRAY
3032: PPUSH
3033: LD_VAR 0 2
3037: PUSH
3038: LD_INT 1
3040: ARRAY
3041: PPUSH
3042: CALL_OW 343
3046: GO 3019
3048: POP
3049: POP
3050: GO 3001
3052: POP
3053: POP
// end ; for i = 1 to 8 do
3054: LD_ADDR_VAR 0 2
3058: PUSH
3059: DOUBLE
3060: LD_INT 1
3062: DEC
3063: ST_TO_ADDR
3064: LD_INT 8
3066: PUSH
3067: FOR_TO
3068: IFFALSE 3158
// for j = 1 to 8 do
3070: LD_ADDR_VAR 0 3
3074: PUSH
3075: DOUBLE
3076: LD_INT 1
3078: DEC
3079: ST_TO_ADDR
3080: LD_INT 8
3082: PUSH
3083: FOR_TO
3084: IFFALSE 3154
// if Side_Teams [ i ] = Side_Teams [ j ] then
3086: LD_EXP 16
3090: PUSH
3091: LD_VAR 0 2
3095: ARRAY
3096: PUSH
3097: LD_EXP 16
3101: PUSH
3102: LD_VAR 0 3
3106: ARRAY
3107: EQUAL
3108: IFFALSE 3132
// SetAttitude ( i , j , att_friend , true ) else
3110: LD_VAR 0 2
3114: PPUSH
3115: LD_VAR 0 3
3119: PPUSH
3120: LD_INT 1
3122: PPUSH
3123: LD_INT 1
3125: PPUSH
3126: CALL_OW 80
3130: GO 3152
// SetAttitude ( i , j , att_enemy , true ) ;
3132: LD_VAR 0 2
3136: PPUSH
3137: LD_VAR 0 3
3141: PPUSH
3142: LD_INT 2
3144: PPUSH
3145: LD_INT 1
3147: PPUSH
3148: CALL_OW 80
3152: GO 3083
3154: POP
3155: POP
3156: GO 3067
3158: POP
3159: POP
// end ; end ;
3160: LD_VAR 0 1
3164: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
3165: LD_INT 0
3167: PPUSH
3168: PPUSH
3169: PPUSH
3170: PPUSH
// result := [ ] ;
3171: LD_ADDR_VAR 0 7
3175: PUSH
3176: EMPTY
3177: ST_TO_ADDR
// for i := 1 to count do
3178: LD_ADDR_VAR 0 8
3182: PUSH
3183: DOUBLE
3184: LD_INT 1
3186: DEC
3187: ST_TO_ADDR
3188: LD_VAR 0 1
3192: PUSH
3193: FOR_TO
3194: IFFALSE 3644
// begin uc_direction := Rand ( 0 , 5 ) ;
3196: LD_ADDR_OWVAR 24
3200: PUSH
3201: LD_INT 0
3203: PPUSH
3204: LD_INT 5
3206: PPUSH
3207: CALL_OW 12
3211: ST_TO_ADDR
// if commander then
3212: LD_LOC 1
3216: IFFALSE 3357
// begin hc_name := mp_sides_players_names [ uc_side ] ;
3218: LD_ADDR_OWVAR 26
3222: PUSH
3223: LD_OWVAR 19
3227: PUSH
3228: LD_OWVAR 20
3232: ARRAY
3233: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3234: LD_INT 1
3236: PPUSH
3237: LD_INT 2
3239: PPUSH
3240: CALL_OW 12
3244: PPUSH
3245: LD_VAR 0 2
3249: PPUSH
3250: LD_EXP 6
3254: PUSH
3255: LD_INT 2
3257: PLUS
3258: PPUSH
3259: CALL_OW 380
// hc_importance := 105 ;
3263: LD_ADDR_OWVAR 32
3267: PUSH
3268: LD_INT 105
3270: ST_TO_ADDR
// commander := false ;
3271: LD_ADDR_LOC 1
3275: PUSH
3276: LD_INT 0
3278: ST_TO_ADDR
// if Multiplayer then
3279: LD_OWVAR 4
3283: IFFALSE 3355
// begin if sheik then
3285: LD_EXP 30
3289: IFFALSE 3317
// begin hc_gallery :=  ;
3291: LD_ADDR_OWVAR 33
3295: PUSH
3296: LD_STRING 
3298: ST_TO_ADDR
// hc_class := class_desert_warior ;
3299: LD_ADDR_OWVAR 28
3303: PUSH
3304: LD_INT 11
3306: ST_TO_ADDR
// hc_sex := sex_male ;
3307: LD_ADDR_OWVAR 27
3311: PUSH
3312: LD_INT 1
3314: ST_TO_ADDR
// end else
3315: GO 3355
// begin hc_gallery := MULTIAVATARS ;
3317: LD_ADDR_OWVAR 33
3321: PUSH
3322: LD_STRING MULTIAVATARS
3324: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3325: LD_ADDR_OWVAR 34
3329: PUSH
3330: LD_OWVAR 20
3334: PPUSH
3335: CALL_OW 525
3339: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3340: LD_ADDR_OWVAR 27
3344: PUSH
3345: LD_OWVAR 20
3349: PPUSH
3350: CALL_OW 526
3354: ST_TO_ADDR
// end ; end ; end else
3355: GO 3420
// begin hc_name :=  ;
3357: LD_ADDR_OWVAR 26
3361: PUSH
3362: LD_STRING 
3364: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3365: LD_INT 1
3367: PPUSH
3368: LD_INT 2
3370: PPUSH
3371: CALL_OW 12
3375: PPUSH
3376: LD_VAR 0 2
3380: PPUSH
3381: LD_EXP 6
3385: PPUSH
3386: CALL_OW 380
// hc_importance := 0 ;
3390: LD_ADDR_OWVAR 32
3394: PUSH
3395: LD_INT 0
3397: ST_TO_ADDR
// if Multiplayer then
3398: LD_OWVAR 4
3402: IFFALSE 3420
// begin hc_gallery :=  ;
3404: LD_ADDR_OWVAR 33
3408: PUSH
3409: LD_STRING 
3411: ST_TO_ADDR
// hc_face_number := 0 ;
3412: LD_ADDR_OWVAR 34
3416: PUSH
3417: LD_INT 0
3419: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3420: LD_ADDR_VAR 0 10
3424: PUSH
3425: CALL_OW 44
3429: ST_TO_ADDR
// if global_defined then
3430: LD_LOC 3
3434: IFFALSE 3574
// begin if ( cl = class_soldier ) then
3436: LD_VAR 0 2
3440: PUSH
3441: LD_INT 1
3443: EQUAL
3444: IFFALSE 3464
// j := i + soldiers_created else
3446: LD_ADDR_VAR 0 9
3450: PUSH
3451: LD_VAR 0 8
3455: PUSH
3456: LD_LOC 4
3460: PLUS
3461: ST_TO_ADDR
3462: GO 3474
// j := i ;
3464: LD_ADDR_VAR 0 9
3468: PUSH
3469: LD_VAR 0 8
3473: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3474: LD_LOC 2
3478: PUSH
3479: LD_VAR 0 2
3483: ARRAY
3484: PUSH
3485: LD_VAR 0 9
3489: ARRAY
3490: PPUSH
3491: LD_VAR 0 10
3495: PPUSH
3496: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3500: LD_VAR 0 10
3504: PPUSH
3505: LD_INT 2
3507: PPUSH
3508: LD_LOC 2
3512: PUSH
3513: LD_VAR 0 2
3517: ARRAY
3518: PUSH
3519: LD_VAR 0 9
3523: ARRAY
3524: PPUSH
3525: LD_INT 2
3527: PPUSH
3528: CALL_OW 260
3532: PPUSH
3533: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3537: LD_VAR 0 10
3541: PPUSH
3542: LD_INT 1
3544: PPUSH
3545: LD_LOC 2
3549: PUSH
3550: LD_VAR 0 2
3554: ARRAY
3555: PUSH
3556: LD_VAR 0 9
3560: ARRAY
3561: PPUSH
3562: LD_INT 1
3564: PPUSH
3565: CALL_OW 260
3569: PPUSH
3570: CALL_OW 239
// end ; if building then
3574: LD_VAR 0 6
3578: IFFALSE 3596
// PlaceHumanInUnit ( un , building ) else
3580: LD_VAR 0 10
3584: PPUSH
3585: LD_VAR 0 6
3589: PPUSH
3590: CALL_OW 52
3594: GO 3623
// PlaceUnitXYR ( un , x , y , r , false ) ;
3596: LD_VAR 0 10
3600: PPUSH
3601: LD_VAR 0 3
3605: PPUSH
3606: LD_VAR 0 4
3610: PPUSH
3611: LD_VAR 0 5
3615: PPUSH
3616: LD_INT 0
3618: PPUSH
3619: CALL_OW 50
// result := result ^ [ un ] ;
3623: LD_ADDR_VAR 0 7
3627: PUSH
3628: LD_VAR 0 7
3632: PUSH
3633: LD_VAR 0 10
3637: PUSH
3638: EMPTY
3639: LIST
3640: ADD
3641: ST_TO_ADDR
// end ;
3642: GO 3193
3644: POP
3645: POP
// if not global_defined then
3646: LD_LOC 3
3650: NOT
3651: IFFALSE 3729
// if ( global_units >= cl ) then
3653: LD_LOC 2
3657: PUSH
3658: LD_VAR 0 2
3662: GREATEREQUAL
3663: IFFALSE 3704
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3665: LD_ADDR_LOC 2
3669: PUSH
3670: LD_LOC 2
3674: PPUSH
3675: LD_VAR 0 2
3679: PPUSH
3680: LD_LOC 2
3684: PUSH
3685: LD_VAR 0 2
3689: ARRAY
3690: PUSH
3691: LD_VAR 0 7
3695: ADD
3696: PPUSH
3697: CALL_OW 1
3701: ST_TO_ADDR
3702: GO 3729
// global_units := Replace ( global_units , cl , result ) ;
3704: LD_ADDR_LOC 2
3708: PUSH
3709: LD_LOC 2
3713: PPUSH
3714: LD_VAR 0 2
3718: PPUSH
3719: LD_VAR 0 7
3723: PPUSH
3724: CALL_OW 1
3728: ST_TO_ADDR
// end ;
3729: LD_VAR 0 7
3733: RET
// function prepare_mastodonts ( n ) ; var i ; begin
3734: LD_INT 0
3736: PPUSH
3737: PPUSH
// uc_side := 0 ;
3738: LD_ADDR_OWVAR 20
3742: PUSH
3743: LD_INT 0
3745: ST_TO_ADDR
// uc_nation := 0 ;
3746: LD_ADDR_OWVAR 21
3750: PUSH
3751: LD_INT 0
3753: ST_TO_ADDR
// vc_chassis := 31 ;
3754: LD_ADDR_OWVAR 37
3758: PUSH
3759: LD_INT 31
3761: ST_TO_ADDR
// vc_control := control_rider ;
3762: LD_ADDR_OWVAR 38
3766: PUSH
3767: LD_INT 4
3769: ST_TO_ADDR
// for i = 1 to n do
3770: LD_ADDR_VAR 0 3
3774: PUSH
3775: DOUBLE
3776: LD_INT 1
3778: DEC
3779: ST_TO_ADDR
3780: LD_VAR 0 1
3784: PUSH
3785: FOR_TO
3786: IFFALSE 3805
// PlaceUnitArea ( CreateVehicle , MastodontSpawn , false ) ;
3788: CALL_OW 45
3792: PPUSH
3793: LD_INT 15
3795: PPUSH
3796: LD_INT 0
3798: PPUSH
3799: CALL_OW 49
3803: GO 3785
3805: POP
3806: POP
// end ;
3807: LD_VAR 0 2
3811: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3812: LD_INT 0
3814: PPUSH
3815: PPUSH
3816: PPUSH
3817: PPUSH
3818: PPUSH
3819: PPUSH
3820: PPUSH
3821: PPUSH
3822: PPUSH
// pos := Side_Positions [ side ] ;
3823: LD_ADDR_VAR 0 3
3827: PUSH
3828: LD_EXP 18
3832: PUSH
3833: LD_VAR 0 1
3837: ARRAY
3838: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3839: LD_ADDR_OWVAR 21
3843: PUSH
3844: LD_EXP 19
3848: PUSH
3849: LD_VAR 0 1
3853: ARRAY
3854: ST_TO_ADDR
// uc_side := side ;
3855: LD_ADDR_OWVAR 20
3859: PUSH
3860: LD_VAR 0 1
3864: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3865: LD_ADDR_VAR 0 4
3869: PUSH
3870: LD_EXP 22
3874: PUSH
3875: LD_VAR 0 3
3879: ARRAY
3880: PUSH
3881: LD_INT 1
3883: ARRAY
3884: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3885: LD_ADDR_VAR 0 5
3889: PUSH
3890: LD_EXP 22
3894: PUSH
3895: LD_VAR 0 3
3899: ARRAY
3900: PUSH
3901: LD_INT 2
3903: ARRAY
3904: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3905: LD_ADDR_VAR 0 6
3909: PUSH
3910: LD_EXP 22
3914: PUSH
3915: LD_VAR 0 3
3919: ARRAY
3920: PUSH
3921: LD_INT 3
3923: ARRAY
3924: ST_TO_ADDR
// if is_depot then
3925: LD_EXP 3
3929: IFFALSE 4062
// begin bc_type = b_depot ;
3931: LD_ADDR_OWVAR 42
3935: PUSH
3936: LD_INT 0
3938: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3939: LD_ADDR_VAR 0 10
3943: PUSH
3944: LD_VAR 0 4
3948: PPUSH
3949: LD_VAR 0 5
3953: PPUSH
3954: LD_VAR 0 6
3958: PPUSH
3959: CALL_OW 47
3963: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3964: LD_VAR 0 10
3968: PPUSH
3969: LD_STRING @
3971: PUSH
3972: LD_VAR 0 1
3976: STR
3977: PPUSH
3978: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3982: LD_VAR 0 10
3986: PPUSH
3987: CALL_OW 274
3991: PPUSH
3992: LD_INT 1
3994: PPUSH
3995: LD_EXP 8
3999: PUSH
4000: LD_INT 1
4002: ARRAY
4003: PPUSH
4004: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
4008: LD_VAR 0 10
4012: PPUSH
4013: CALL_OW 274
4017: PPUSH
4018: LD_INT 2
4020: PPUSH
4021: LD_EXP 8
4025: PUSH
4026: LD_INT 2
4028: ARRAY
4029: PPUSH
4030: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
4034: LD_VAR 0 10
4038: PPUSH
4039: CALL_OW 274
4043: PPUSH
4044: LD_INT 3
4046: PPUSH
4047: LD_EXP 8
4051: PUSH
4052: LD_INT 3
4054: ARRAY
4055: PPUSH
4056: CALL_OW 277
// end else
4060: GO 4206
// begin for i := 1 to 3 do
4062: LD_ADDR_VAR 0 7
4066: PUSH
4067: DOUBLE
4068: LD_INT 1
4070: DEC
4071: ST_TO_ADDR
4072: LD_INT 3
4074: PUSH
4075: FOR_TO
4076: IFFALSE 4204
// begin r := starting_resources [ i ] ;
4078: LD_ADDR_VAR 0 8
4082: PUSH
4083: LD_EXP 8
4087: PUSH
4088: LD_VAR 0 7
4092: ARRAY
4093: ST_TO_ADDR
// while r >= 10 do
4094: LD_VAR 0 8
4098: PUSH
4099: LD_INT 10
4101: GREATEREQUAL
4102: IFFALSE 4202
// if r > 50 then
4104: LD_VAR 0 8
4108: PUSH
4109: LD_INT 50
4111: GREATER
4112: IFFALSE 4158
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
4114: LD_VAR 0 7
4118: PPUSH
4119: LD_INT 5
4121: PPUSH
4122: LD_VAR 0 4
4126: PPUSH
4127: LD_VAR 0 5
4131: PPUSH
4132: LD_INT 4
4134: PPUSH
4135: LD_INT 0
4137: PPUSH
4138: CALL_OW 60
// r := r - 50 ;
4142: LD_ADDR_VAR 0 8
4146: PUSH
4147: LD_VAR 0 8
4151: PUSH
4152: LD_INT 50
4154: MINUS
4155: ST_TO_ADDR
// end else
4156: GO 4200
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
4158: LD_VAR 0 7
4162: PPUSH
4163: LD_VAR 0 8
4167: PUSH
4168: LD_INT 10
4170: DIV
4171: PPUSH
4172: LD_VAR 0 4
4176: PPUSH
4177: LD_VAR 0 5
4181: PPUSH
4182: LD_INT 4
4184: PPUSH
4185: LD_INT 0
4187: PPUSH
4188: CALL_OW 60
// r := 0 ;
4192: LD_ADDR_VAR 0 8
4196: PUSH
4197: LD_INT 0
4199: ST_TO_ADDR
// end ;
4200: GO 4094
// end ;
4202: GO 4075
4204: POP
4205: POP
// end ; for r in starting_crates do
4206: LD_ADDR_VAR 0 8
4210: PUSH
4211: LD_EXP 7
4215: PUSH
4216: FOR_IN
4217: IFFALSE 4249
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
4219: LD_INT 1
4221: PPUSH
4222: LD_INT 5
4224: PPUSH
4225: LD_VAR 0 4
4229: PPUSH
4230: LD_VAR 0 5
4234: PPUSH
4235: LD_VAR 0 8
4239: PPUSH
4240: LD_INT 0
4242: PPUSH
4243: CALL_OW 60
4247: GO 4216
4249: POP
4250: POP
// if def_morale_flags then
4251: LD_EXP 50
4255: IFFALSE 4394
// begin x := start_def [ pos ] [ 1 ] ;
4257: LD_ADDR_VAR 0 4
4261: PUSH
4262: LD_EXP 24
4266: PUSH
4267: LD_VAR 0 3
4271: ARRAY
4272: PUSH
4273: LD_INT 1
4275: ARRAY
4276: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4277: LD_ADDR_VAR 0 5
4281: PUSH
4282: LD_EXP 24
4286: PUSH
4287: LD_VAR 0 3
4291: ARRAY
4292: PUSH
4293: LD_INT 2
4295: ARRAY
4296: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4297: LD_VAR 0 4
4301: PPUSH
4302: LD_VAR 0 5
4306: PPUSH
4307: LD_INT 12
4309: PPUSH
4310: LD_INT 2
4312: PPUSH
4313: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4317: LD_ADDR_EXP 29
4321: PUSH
4322: LD_EXP 29
4326: PUSH
4327: LD_VAR 0 1
4331: PPUSH
4332: LD_VAR 0 4
4336: PPUSH
4337: LD_VAR 0 5
4341: PPUSH
4342: LD_INT 1
4344: PUSH
4345: LD_INT 100
4347: PUSH
4348: EMPTY
4349: LIST
4350: LIST
4351: PUSH
4352: LD_INT 2
4354: PUSH
4355: LD_INT 50
4357: PUSH
4358: EMPTY
4359: LIST
4360: LIST
4361: PUSH
4362: LD_INT 3
4364: PUSH
4365: LD_INT 20
4367: PUSH
4368: EMPTY
4369: LIST
4370: LIST
4371: PUSH
4372: LD_INT 20
4374: PUSH
4375: LD_INT 100
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: PUSH
4382: EMPTY
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: PPUSH
4388: CALL_OW 418
4392: ADD
4393: ST_TO_ADDR
// end ; commander := true ;
4394: LD_ADDR_LOC 1
4398: PUSH
4399: LD_INT 1
4401: ST_TO_ADDR
// soldiers_created := 0 ;
4402: LD_ADDR_LOC 4
4406: PUSH
4407: LD_INT 0
4409: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4410: LD_ADDR_VAR 0 7
4414: PUSH
4415: DOUBLE
4416: LD_INT 1
4418: DEC
4419: ST_TO_ADDR
4420: LD_EXP 4
4424: PUSH
4425: FOR_TO
4426: IFFALSE 4579
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4428: LD_ADDR_VAR 0 4
4432: PUSH
4433: LD_EXP 23
4437: PUSH
4438: LD_VAR 0 3
4442: ARRAY
4443: PUSH
4444: LD_VAR 0 7
4448: ARRAY
4449: PUSH
4450: LD_INT 1
4452: ARRAY
4453: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4454: LD_ADDR_VAR 0 5
4458: PUSH
4459: LD_EXP 23
4463: PUSH
4464: LD_VAR 0 3
4468: ARRAY
4469: PUSH
4470: LD_VAR 0 7
4474: ARRAY
4475: PUSH
4476: LD_INT 2
4478: ARRAY
4479: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4480: LD_ADDR_VAR 0 6
4484: PUSH
4485: LD_EXP 23
4489: PUSH
4490: LD_VAR 0 3
4494: ARRAY
4495: PUSH
4496: LD_VAR 0 7
4500: ARRAY
4501: PUSH
4502: LD_INT 3
4504: ARRAY
4505: ST_TO_ADDR
// bc_type := b_breastwork ;
4506: LD_ADDR_OWVAR 42
4510: PUSH
4511: LD_INT 31
4513: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4514: LD_ADDR_VAR 0 9
4518: PUSH
4519: LD_VAR 0 4
4523: PPUSH
4524: LD_VAR 0 5
4528: PPUSH
4529: LD_VAR 0 6
4533: PPUSH
4534: CALL_OW 47
4538: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4539: LD_INT 1
4541: PPUSH
4542: LD_INT 1
4544: PPUSH
4545: LD_INT 0
4547: PPUSH
4548: LD_INT 0
4550: PPUSH
4551: LD_INT 0
4553: PPUSH
4554: LD_VAR 0 9
4558: PPUSH
4559: CALL 3165 0 6
// soldiers_created := soldiers_created + 1 ;
4563: LD_ADDR_LOC 4
4567: PUSH
4568: LD_LOC 4
4572: PUSH
4573: LD_INT 1
4575: PLUS
4576: ST_TO_ADDR
// end ;
4577: GO 4425
4579: POP
4580: POP
// x := start_def [ pos ] [ 1 ] ;
4581: LD_ADDR_VAR 0 4
4585: PUSH
4586: LD_EXP 24
4590: PUSH
4591: LD_VAR 0 3
4595: ARRAY
4596: PUSH
4597: LD_INT 1
4599: ARRAY
4600: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4601: LD_ADDR_VAR 0 5
4605: PUSH
4606: LD_EXP 24
4610: PUSH
4611: LD_VAR 0 3
4615: ARRAY
4616: PUSH
4617: LD_INT 2
4619: ARRAY
4620: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4621: LD_LOC 8
4625: PUSH
4626: LD_EXP 4
4630: MINUS
4631: PPUSH
4632: LD_INT 1
4634: PPUSH
4635: LD_VAR 0 4
4639: PPUSH
4640: LD_VAR 0 5
4644: PPUSH
4645: LD_INT 5
4647: PPUSH
4648: LD_INT 0
4650: PPUSH
4651: CALL 3165 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4655: LD_LOC 5
4659: PPUSH
4660: LD_INT 2
4662: PPUSH
4663: LD_VAR 0 4
4667: PPUSH
4668: LD_VAR 0 5
4672: PPUSH
4673: LD_INT 5
4675: PPUSH
4676: LD_INT 0
4678: PPUSH
4679: CALL 3165 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4683: LD_LOC 7
4687: PPUSH
4688: LD_INT 3
4690: PPUSH
4691: LD_VAR 0 4
4695: PPUSH
4696: LD_VAR 0 5
4700: PPUSH
4701: LD_INT 5
4703: PPUSH
4704: LD_INT 0
4706: PPUSH
4707: CALL 3165 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4711: LD_LOC 6
4715: PPUSH
4716: LD_INT 4
4718: PPUSH
4719: LD_VAR 0 4
4723: PPUSH
4724: LD_VAR 0 5
4728: PPUSH
4729: LD_INT 5
4731: PPUSH
4732: LD_INT 0
4734: PPUSH
4735: CALL 3165 0 6
// if def_siberite_detection then
4739: LD_EXP 51
4743: IFFALSE 4760
// SetTech ( tech_SibDet , side , state_researched ) ;
4745: LD_INT 20
4747: PPUSH
4748: LD_VAR 0 1
4752: PPUSH
4753: LD_INT 2
4755: PPUSH
4756: CALL_OW 322
// if def_siberite_bomb = 1 then
4760: LD_EXP 54
4764: PUSH
4765: LD_INT 1
4767: EQUAL
4768: IFFALSE 4802
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4770: LD_INT 25
4772: PPUSH
4773: LD_VAR 0 1
4777: PPUSH
4778: LD_INT 1
4780: PPUSH
4781: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4785: LD_INT 73
4787: PPUSH
4788: LD_VAR 0 1
4792: PPUSH
4793: LD_INT 1
4795: PPUSH
4796: CALL_OW 322
// end else
4800: GO 4832
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4802: LD_INT 25
4804: PPUSH
4805: LD_VAR 0 1
4809: PPUSH
4810: LD_INT 0
4812: PPUSH
4813: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4817: LD_INT 73
4819: PPUSH
4820: LD_VAR 0 1
4824: PPUSH
4825: LD_INT 0
4827: PPUSH
4828: CALL_OW 322
// end ; global_defined := true ;
4832: LD_ADDR_LOC 3
4836: PUSH
4837: LD_INT 1
4839: ST_TO_ADDR
// end ;
4840: LD_VAR 0 2
4844: RET
// every 0 0$1 do
4845: GO 4847
4847: DISABLE
// if ( def_siberite_bomb > 1 ) then
4848: LD_EXP 54
4852: PUSH
4853: LD_INT 1
4855: GREATER
4856: IFFALSE 4871
// begin wait ( siberite_bomb_Delay ) ;
4858: LD_EXP 15
4862: PPUSH
4863: CALL_OW 67
// EnableSibFiss ;
4867: CALL 4872 0 0
// end ;
4871: END
// function EnableSibFiss ; var i ; begin
4872: LD_INT 0
4874: PPUSH
4875: PPUSH
// for i := 1 to 8 do
4876: LD_ADDR_VAR 0 2
4880: PUSH
4881: DOUBLE
4882: LD_INT 1
4884: DEC
4885: ST_TO_ADDR
4886: LD_INT 8
4888: PUSH
4889: FOR_TO
4890: IFFALSE 4936
// if Side_Positions [ i ] then
4892: LD_EXP 18
4896: PUSH
4897: LD_VAR 0 2
4901: ARRAY
4902: IFFALSE 4934
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4904: LD_INT 25
4906: PPUSH
4907: LD_VAR 0 2
4911: PPUSH
4912: LD_INT 1
4914: PPUSH
4915: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4919: LD_INT 73
4921: PPUSH
4922: LD_VAR 0 2
4926: PPUSH
4927: LD_INT 1
4929: PPUSH
4930: CALL_OW 322
// end ;
4934: GO 4889
4936: POP
4937: POP
// end ;
4938: LD_VAR 0 1
4942: RET
// function prepare_sides ; var i ; begin
4943: LD_INT 0
4945: PPUSH
4946: PPUSH
// global_units := [ ] ;
4947: LD_ADDR_LOC 2
4951: PUSH
4952: EMPTY
4953: ST_TO_ADDR
// global_defined := false ;
4954: LD_ADDR_LOC 3
4958: PUSH
4959: LD_INT 0
4961: ST_TO_ADDR
// CountClassMembers ;
4962: CALL 5041 0 0
// for i := 1 to 8 do
4966: LD_ADDR_VAR 0 2
4970: PUSH
4971: DOUBLE
4972: LD_INT 1
4974: DEC
4975: ST_TO_ADDR
4976: LD_INT 8
4978: PUSH
4979: FOR_TO
4980: IFFALSE 5034
// if Side_Positions [ i ] then
4982: LD_EXP 18
4986: PUSH
4987: LD_VAR 0 2
4991: ARRAY
4992: IFFALSE 5032
// begin prepare_side ( i ) ;
4994: LD_VAR 0 2
4998: PPUSH
4999: CALL 3812 0 1
// if ( Game_Type = 12 ) and mastodont > 0 then
5003: LD_EXP 40
5007: PUSH
5008: LD_INT 12
5010: EQUAL
5011: PUSH
5012: LD_EXP 31
5016: PUSH
5017: LD_INT 0
5019: GREATER
5020: AND
5021: IFFALSE 5032
// prepare_mastodonts ( mastodont ) ;
5023: LD_EXP 31
5027: PPUSH
5028: CALL 3734 0 1
// end ;
5032: GO 4979
5034: POP
5035: POP
// end ;
5036: LD_VAR 0 1
5040: RET
// function CountClassMembers ; var Mode ; begin
5041: LD_INT 0
5043: PPUSH
5044: PPUSH
// if No_Mechs then
5045: LD_EXP 58
5049: IFFALSE 5061
// Mode := 2 else
5051: LD_ADDR_VAR 0 2
5055: PUSH
5056: LD_INT 2
5058: ST_TO_ADDR
5059: GO 5069
// Mode := 1 ;
5061: LD_ADDR_VAR 0 2
5065: PUSH
5066: LD_INT 1
5068: ST_TO_ADDR
// neng := number_of_people ;
5069: LD_ADDR_LOC 5
5073: PUSH
5074: LD_EXP 5
5078: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
5079: LD_ADDR_LOC 8
5083: PUSH
5084: LD_LOC 5
5088: PUSH
5089: LD_INT 4
5091: PUSH
5092: LD_INT 3
5094: PUSH
5095: EMPTY
5096: LIST
5097: LIST
5098: PUSH
5099: LD_VAR 0 2
5103: ARRAY
5104: DIV
5105: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
5106: LD_LOC 8
5110: PUSH
5111: LD_EXP 4
5115: LESS
5116: IFFALSE 5128
// nsol := number_of_breastworks ;
5118: LD_ADDR_LOC 8
5122: PUSH
5123: LD_EXP 4
5127: ST_TO_ADDR
// neng := neng - nsol ;
5128: LD_ADDR_LOC 5
5132: PUSH
5133: LD_LOC 5
5137: PUSH
5138: LD_LOC 8
5142: MINUS
5143: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
5144: LD_ADDR_LOC 6
5148: PUSH
5149: LD_LOC 5
5153: PUSH
5154: LD_INT 3
5156: PUSH
5157: LD_INT 2
5159: PUSH
5160: EMPTY
5161: LIST
5162: LIST
5163: PUSH
5164: LD_VAR 0 2
5168: ARRAY
5169: DIV
5170: ST_TO_ADDR
// if ( nsci < 1 ) then
5171: LD_LOC 6
5175: PUSH
5176: LD_INT 1
5178: LESS
5179: IFFALSE 5189
// nsci := 1 ;
5181: LD_ADDR_LOC 6
5185: PUSH
5186: LD_INT 1
5188: ST_TO_ADDR
// neng := neng - nsci ;
5189: LD_ADDR_LOC 5
5193: PUSH
5194: LD_LOC 5
5198: PUSH
5199: LD_LOC 6
5203: MINUS
5204: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5205: LD_ADDR_LOC 7
5209: PUSH
5210: LD_LOC 5
5214: PUSH
5215: LD_INT 2
5217: DIV
5218: PUSH
5219: LD_INT 0
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: PUSH
5226: LD_VAR 0 2
5230: ARRAY
5231: ST_TO_ADDR
// neng := neng - nmech ;
5232: LD_ADDR_LOC 5
5236: PUSH
5237: LD_LOC 5
5241: PUSH
5242: LD_LOC 7
5246: MINUS
5247: ST_TO_ADDR
// if ( neng < 1 ) then
5248: LD_LOC 5
5252: PUSH
5253: LD_INT 1
5255: LESS
5256: IFFALSE 5266
// neng := 1 ;
5258: LD_ADDR_LOC 5
5262: PUSH
5263: LD_INT 1
5265: ST_TO_ADDR
// end ;
5266: LD_VAR 0 1
5270: RET
// function Init_Win_Condition ; begin
5271: LD_INT 0
5273: PPUSH
// if Team_Game then
5274: LD_EXP 20
5278: IFFALSE 5285
// enable ( 98 ) else
5280: LD_INT 98
5282: ENABLE_MARKED
5283: GO 5288
// enable ( 99 ) ;
5285: LD_INT 99
5287: ENABLE_MARKED
// case Game_Type of 3 :
5288: LD_EXP 40
5292: PUSH
5293: LD_INT 3
5295: DOUBLE
5296: EQUAL
5297: IFTRUE 5301
5299: GO 5307
5301: POP
// enable ( 100 ) ; end ;
5302: LD_INT 100
5304: ENABLE_MARKED
5305: GO 5308
5307: POP
// end ;
5308: LD_VAR 0 1
5312: RET
// starting begin disable ( 98 ) ;
5313: LD_INT 98
5315: DISABLE_MARKED
// disable ( 99 ) ;
5316: LD_INT 99
5318: DISABLE_MARKED
// disable ( 100 ) ;
5319: LD_INT 100
5321: DISABLE_MARKED
// disable ( 200 ) ;
5322: LD_INT 200
5324: DISABLE_MARKED
// disable ( 400 ) ;
5325: LD_INT 400
5327: DISABLE_MARKED
// disable ( 401 ) ;
5328: LD_INT 401
5330: DISABLE_MARKED
// disable ( 600 ) ;
5331: LD_INT 600
5333: DISABLE_MARKED
// mp_selectmsg := true ;
5334: LD_ADDR_OWVAR 13
5338: PUSH
5339: LD_INT 1
5341: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5342: CALL 0 0 0
// init_map ;
5346: CALL 1712 0 0
// init_respawning ;
5350: CALL 7001 0 0
// set_shared_visions_and_alliances ;
5354: CALL 2877 0 0
// prepare_sides ;
5358: CALL 4943 0 0
// InitLimits ;
5362: CALL 13287 0 0
// ShowTimer ;
5366: CALL 14224 0 0
// if ( Game_Type = 4 ) then
5370: LD_EXP 40
5374: PUSH
5375: LD_INT 4
5377: EQUAL
5378: IFFALSE 5384
// InitBloodGods ;
5380: CALL 10829 0 0
// music_nat := Side_Nations [ your_side ] ;
5384: LD_ADDR_OWVAR 71
5388: PUSH
5389: LD_EXP 19
5393: PUSH
5394: LD_OWVAR 2
5398: ARRAY
5399: ST_TO_ADDR
// if IAmSpec then
5400: CALL_OW 531
5404: IFFALSE 5440
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
5406: LD_INT 0
5408: PPUSH
5409: LD_INT 0
5411: PPUSH
5412: LD_OWVAR 2
5416: PPUSH
5417: LD_INT 32767
5419: NEG
5420: PPUSH
5421: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
5425: LD_INT 104
5427: PPUSH
5428: LD_INT 69
5430: PPUSH
5431: CALL_OW 86
// enable ( 400 ) ;
5435: LD_INT 400
5437: ENABLE_MARKED
// end else
5438: GO 5494
// begin ResetFog ;
5440: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5444: LD_EXP 24
5448: PUSH
5449: LD_EXP 18
5453: PUSH
5454: LD_OWVAR 2
5458: ARRAY
5459: ARRAY
5460: PUSH
5461: LD_INT 1
5463: ARRAY
5464: PPUSH
5465: LD_EXP 24
5469: PUSH
5470: LD_EXP 18
5474: PUSH
5475: LD_OWVAR 2
5479: ARRAY
5480: ARRAY
5481: PUSH
5482: LD_INT 2
5484: ARRAY
5485: PPUSH
5486: CALL_OW 86
// Init_Win_Condition ;
5490: CALL 5271 0 0
// end ; InitApeman ;
5494: CALL 6168 0 0
// if def_builduptime then
5498: LD_EXP 55
5502: IFFALSE 5508
// BeginBuildUp ;
5504: CALL 9433 0 0
// end ; end_of_file
5508: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5509: GO 5511
5511: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5512: LD_INT 4
5514: PPUSH
5515: LD_INT 5
5517: PPUSH
5518: CALL_OW 12
5522: PPUSH
5523: LD_INT 1
5525: PPUSH
5526: CALL_OW 57
// enable ;
5530: ENABLE
// end ;
5531: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5532: GO 5534
5534: DISABLE
5535: LD_INT 0
5537: PPUSH
5538: PPUSH
// begin case tick of 1 .. 1 1$0 :
5539: LD_OWVAR 1
5543: PUSH
5544: LD_INT 1
5546: DOUBLE
5547: GREATEREQUAL
5548: IFFALSE 5556
5550: LD_INT 2100
5552: DOUBLE
5553: LESSEQUAL
5554: IFTRUE 5558
5556: GO 5586
5558: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5559: LD_EXP 9
5563: PUSH
5564: LD_INT 100
5566: DIVREAL
5567: PUSH
5568: LD_INT 350
5570: PPUSH
5571: LD_INT 1050
5573: PPUSH
5574: CALL_OW 12
5578: MUL
5579: PPUSH
5580: CALL_OW 67
5584: GO 5888
5586: LD_INT 2100
5588: PUSH
5589: LD_INT 1
5591: PLUS
5592: DOUBLE
5593: GREATEREQUAL
5594: IFFALSE 5602
5596: LD_INT 10500
5598: DOUBLE
5599: LESSEQUAL
5600: IFTRUE 5604
5602: GO 5632
5604: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5605: LD_EXP 9
5609: PUSH
5610: LD_INT 100
5612: DIVREAL
5613: PUSH
5614: LD_INT 1050
5616: PPUSH
5617: LD_INT 1575
5619: PPUSH
5620: CALL_OW 12
5624: MUL
5625: PPUSH
5626: CALL_OW 67
5630: GO 5888
5632: LD_INT 10500
5634: PUSH
5635: LD_INT 1
5637: PLUS
5638: DOUBLE
5639: GREATEREQUAL
5640: IFFALSE 5648
5642: LD_INT 21000
5644: DOUBLE
5645: LESSEQUAL
5646: IFTRUE 5650
5648: GO 5678
5650: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5651: LD_EXP 9
5655: PUSH
5656: LD_INT 100
5658: DIVREAL
5659: PUSH
5660: LD_INT 1575
5662: PPUSH
5663: LD_INT 2100
5665: PPUSH
5666: CALL_OW 12
5670: MUL
5671: PPUSH
5672: CALL_OW 67
5676: GO 5888
5678: LD_INT 21000
5680: PUSH
5681: LD_INT 1
5683: PLUS
5684: DOUBLE
5685: GREATEREQUAL
5686: IFFALSE 5694
5688: LD_INT 42000
5690: DOUBLE
5691: LESSEQUAL
5692: IFTRUE 5696
5694: GO 5724
5696: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5697: LD_EXP 9
5701: PUSH
5702: LD_INT 100
5704: DIVREAL
5705: PUSH
5706: LD_INT 2100
5708: PPUSH
5709: LD_INT 2625
5711: PPUSH
5712: CALL_OW 12
5716: MUL
5717: PPUSH
5718: CALL_OW 67
5722: GO 5888
5724: LD_INT 42000
5726: PUSH
5727: LD_INT 1
5729: PLUS
5730: DOUBLE
5731: GREATEREQUAL
5732: IFFALSE 5740
5734: LD_INT 63000
5736: DOUBLE
5737: LESSEQUAL
5738: IFTRUE 5742
5740: GO 5770
5742: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5743: LD_EXP 9
5747: PUSH
5748: LD_INT 100
5750: DIVREAL
5751: PUSH
5752: LD_INT 2625
5754: PPUSH
5755: LD_INT 3150
5757: PPUSH
5758: CALL_OW 12
5762: MUL
5763: PPUSH
5764: CALL_OW 67
5768: GO 5888
5770: LD_INT 63000
5772: PUSH
5773: LD_INT 1
5775: PLUS
5776: DOUBLE
5777: GREATEREQUAL
5778: IFFALSE 5786
5780: LD_INT 105000
5782: DOUBLE
5783: LESSEQUAL
5784: IFTRUE 5788
5786: GO 5816
5788: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5789: LD_EXP 9
5793: PUSH
5794: LD_INT 100
5796: DIVREAL
5797: PUSH
5798: LD_INT 3150
5800: PPUSH
5801: LD_INT 3675
5803: PPUSH
5804: CALL_OW 12
5808: MUL
5809: PPUSH
5810: CALL_OW 67
5814: GO 5888
5816: LD_INT 105000
5818: PUSH
5819: LD_INT 1
5821: PLUS
5822: DOUBLE
5823: GREATEREQUAL
5824: IFFALSE 5832
5826: LD_INT 630000
5828: DOUBLE
5829: LESSEQUAL
5830: IFTRUE 5834
5832: GO 5862
5834: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
5835: LD_EXP 9
5839: PUSH
5840: LD_INT 100
5842: DIVREAL
5843: PUSH
5844: LD_INT 3675
5846: PPUSH
5847: LD_INT 4200
5849: PPUSH
5850: CALL_OW 12
5854: MUL
5855: PPUSH
5856: CALL_OW 67
5860: GO 5888
5862: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5863: LD_EXP 9
5867: PUSH
5868: LD_INT 100
5870: DIVREAL
5871: PUSH
5872: LD_INT 4200
5874: PPUSH
5875: LD_INT 5250
5877: PPUSH
5878: CALL_OW 12
5882: MUL
5883: PPUSH
5884: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5888: LD_ADDR_VAR 0 2
5892: PUSH
5893: LD_INT 3
5895: PPUSH
5896: LD_INT 5
5898: PPUSH
5899: CALL_OW 12
5903: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5904: LD_ADDR_VAR 0 1
5908: PUSH
5909: LD_EXP 18
5913: PUSH
5914: LD_INT 0
5916: PUSH
5917: EMPTY
5918: LIST
5919: DIFF
5920: PUSH
5921: FOR_IN
5922: IFFALSE 5971
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5924: LD_VAR 0 2
5928: PPUSH
5929: LD_EXP 24
5933: PUSH
5934: LD_VAR 0 1
5938: ARRAY
5939: PUSH
5940: LD_INT 1
5942: ARRAY
5943: PPUSH
5944: LD_EXP 24
5948: PUSH
5949: LD_VAR 0 1
5953: ARRAY
5954: PUSH
5955: LD_INT 2
5957: ARRAY
5958: PPUSH
5959: LD_INT 20
5961: PPUSH
5962: LD_INT 1
5964: PPUSH
5965: CALL_OW 56
5969: GO 5921
5971: POP
5972: POP
// enable ;
5973: ENABLE
// end ; end_of_file
5974: PPOPN 2
5976: END
// every 20 20$00 trigger apemanNumber do
5977: LD_EXP 32
5981: IFFALSE 6014
5983: GO 5985
5985: DISABLE
// begin enable ;
5986: ENABLE
// if apeLevel >= 8 then
5987: LD_EXP 37
5991: PUSH
5992: LD_INT 8
5994: GREATEREQUAL
5995: IFFALSE 6000
// disable else
5997: DISABLE
5998: GO 6014
// apeLevel := apeLevel + 1 ;
6000: LD_ADDR_EXP 37
6004: PUSH
6005: LD_EXP 37
6009: PUSH
6010: LD_INT 1
6012: PLUS
6013: ST_TO_ADDR
// end ;
6014: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
6015: LD_EXP 32
6019: PUSH
6020: LD_EXP 33
6024: LESS
6025: IFFALSE 6165
6027: GO 6029
6029: DISABLE
6030: LD_INT 0
6032: PPUSH
6033: PPUSH
6034: PPUSH
6035: PPUSH
// begin enable ;
6036: ENABLE
// for i := 1 to apemanPos do
6037: LD_ADDR_VAR 0 1
6041: PUSH
6042: DOUBLE
6043: LD_INT 1
6045: DEC
6046: ST_TO_ADDR
6047: LD_EXP 35
6051: PUSH
6052: FOR_TO
6053: IFFALSE 6163
// begin if apemanPlayerCount [ i ] then
6055: LD_EXP 36
6059: PUSH
6060: LD_VAR 0 1
6064: ARRAY
6065: IFFALSE 6161
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
6067: LD_EXP 36
6071: PUSH
6072: LD_VAR 0 1
6076: ARRAY
6077: PUSH
6078: LD_EXP 35
6082: PUSH
6083: LD_VAR 0 1
6087: ARRAY
6088: GREATER
6089: IFFALSE 6161
// begin ape := PrepareApeman ;
6091: LD_ADDR_VAR 0 2
6095: PUSH
6096: CALL 6676 0 0
6100: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6101: LD_VAR 0 2
6105: PPUSH
6106: LD_EXP 38
6110: PUSH
6111: LD_VAR 0 1
6115: ARRAY
6116: PPUSH
6117: LD_INT 0
6119: PPUSH
6120: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6124: LD_ADDR_EXP 35
6128: PUSH
6129: LD_EXP 35
6133: PPUSH
6134: LD_VAR 0 1
6138: PPUSH
6139: LD_EXP 35
6143: PUSH
6144: LD_VAR 0 1
6148: ARRAY
6149: PUSH
6150: LD_VAR 0 2
6154: UNION
6155: PPUSH
6156: CALL_OW 1
6160: ST_TO_ADDR
// end ; end ; end ;
6161: GO 6052
6163: POP
6164: POP
// end ;
6165: PPOPN 4
6167: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6168: LD_INT 0
6170: PPUSH
6171: PPUSH
6172: PPUSH
6173: PPUSH
6174: PPUSH
6175: PPUSH
6176: PPUSH
// playersAmount := 0 ;
6177: LD_ADDR_VAR 0 3
6181: PUSH
6182: LD_INT 0
6184: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
6185: LD_ADDR_VAR 0 7
6189: PUSH
6190: LD_INT 1
6192: PUSH
6193: LD_INT 2
6195: PUSH
6196: LD_INT 3
6198: PUSH
6199: LD_INT 4
6201: PUSH
6202: LD_INT 5
6204: PUSH
6205: LD_INT 6
6207: PUSH
6208: EMPTY
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: LIST
6215: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6216: LD_ADDR_EXP 38
6220: PUSH
6221: LD_INT 0
6223: PUSH
6224: LD_INT 0
6226: PUSH
6227: LD_INT 0
6229: PUSH
6230: LD_INT 0
6232: PUSH
6233: LD_INT 0
6235: PUSH
6236: LD_INT 0
6238: PUSH
6239: LD_INT 0
6241: PUSH
6242: LD_INT 0
6244: PUSH
6245: EMPTY
6246: LIST
6247: LIST
6248: LIST
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: ST_TO_ADDR
// for j = 1 to Side_Positions do
6255: LD_ADDR_VAR 0 4
6259: PUSH
6260: DOUBLE
6261: LD_INT 1
6263: DEC
6264: ST_TO_ADDR
6265: LD_EXP 18
6269: PUSH
6270: FOR_TO
6271: IFFALSE 6338
// if Side_Positions [ j ] then
6273: LD_EXP 18
6277: PUSH
6278: LD_VAR 0 4
6282: ARRAY
6283: IFFALSE 6336
// begin playersAmount := playersAmount + 1 ;
6285: LD_ADDR_VAR 0 3
6289: PUSH
6290: LD_VAR 0 3
6294: PUSH
6295: LD_INT 1
6297: PLUS
6298: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6299: LD_ADDR_EXP 38
6303: PUSH
6304: LD_EXP 38
6308: PPUSH
6309: LD_VAR 0 4
6313: PPUSH
6314: LD_VAR 0 7
6318: PUSH
6319: LD_EXP 18
6323: PUSH
6324: LD_VAR 0 4
6328: ARRAY
6329: ARRAY
6330: PPUSH
6331: CALL_OW 1
6335: ST_TO_ADDR
// end ;
6336: GO 6270
6338: POP
6339: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6340: LD_ADDR_EXP 34
6344: PUSH
6345: LD_INT 3
6347: PUSH
6348: LD_EXP 11
6352: MUL
6353: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6354: LD_ADDR_EXP 32
6358: PUSH
6359: LD_VAR 0 3
6363: PUSH
6364: LD_EXP 34
6368: MUL
6369: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6370: LD_ADDR_EXP 33
6374: PUSH
6375: LD_EXP 32
6379: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6380: LD_ADDR_EXP 35
6384: PUSH
6385: LD_INT 0
6387: PUSH
6388: LD_INT 0
6390: PUSH
6391: LD_INT 0
6393: PUSH
6394: LD_INT 0
6396: PUSH
6397: LD_INT 0
6399: PUSH
6400: LD_INT 0
6402: PUSH
6403: LD_INT 0
6405: PUSH
6406: LD_INT 0
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6419: LD_ADDR_EXP 36
6423: PUSH
6424: LD_INT 0
6426: PUSH
6427: LD_INT 0
6429: PUSH
6430: LD_INT 0
6432: PUSH
6433: LD_INT 0
6435: PUSH
6436: LD_INT 0
6438: PUSH
6439: LD_INT 0
6441: PUSH
6442: LD_INT 0
6444: PUSH
6445: LD_INT 0
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: LIST
6455: LIST
6456: LIST
6457: ST_TO_ADDR
// apeLevel := 1 ;
6458: LD_ADDR_EXP 37
6462: PUSH
6463: LD_INT 1
6465: ST_TO_ADDR
// if not apemanNumber then
6466: LD_EXP 32
6470: NOT
6471: IFFALSE 6475
// exit ;
6473: GO 6671
// for i := 1 to apemanPerPlayer do
6475: LD_ADDR_VAR 0 2
6479: PUSH
6480: DOUBLE
6481: LD_INT 1
6483: DEC
6484: ST_TO_ADDR
6485: LD_EXP 34
6489: PUSH
6490: FOR_TO
6491: IFFALSE 6669
// begin for j := 1 to Side_Positions do
6493: LD_ADDR_VAR 0 4
6497: PUSH
6498: DOUBLE
6499: LD_INT 1
6501: DEC
6502: ST_TO_ADDR
6503: LD_EXP 18
6507: PUSH
6508: FOR_TO
6509: IFFALSE 6665
// if Side_Positions [ j ] then
6511: LD_EXP 18
6515: PUSH
6516: LD_VAR 0 4
6520: ARRAY
6521: IFFALSE 6663
// begin pos := Side_Positions [ j ] ;
6523: LD_ADDR_VAR 0 6
6527: PUSH
6528: LD_EXP 18
6532: PUSH
6533: LD_VAR 0 4
6537: ARRAY
6538: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6539: LD_ADDR_EXP 36
6543: PUSH
6544: LD_EXP 36
6548: PPUSH
6549: LD_VAR 0 4
6553: PPUSH
6554: LD_EXP 36
6558: PUSH
6559: LD_VAR 0 4
6563: ARRAY
6564: PUSH
6565: LD_INT 1
6567: PLUS
6568: PPUSH
6569: CALL_OW 1
6573: ST_TO_ADDR
// ape := PrepareApeman ;
6574: LD_ADDR_VAR 0 5
6578: PUSH
6579: CALL 6676 0 0
6583: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6584: LD_ADDR_EXP 35
6588: PUSH
6589: LD_EXP 35
6593: PPUSH
6594: LD_VAR 0 4
6598: PPUSH
6599: LD_EXP 35
6603: PUSH
6604: LD_VAR 0 4
6608: ARRAY
6609: PPUSH
6610: LD_EXP 35
6614: PUSH
6615: LD_VAR 0 4
6619: ARRAY
6620: PUSH
6621: LD_INT 1
6623: PLUS
6624: PPUSH
6625: LD_VAR 0 5
6629: PPUSH
6630: CALL_OW 1
6634: PPUSH
6635: CALL_OW 1
6639: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6640: LD_VAR 0 5
6644: PPUSH
6645: LD_EXP 38
6649: PUSH
6650: LD_VAR 0 4
6654: ARRAY
6655: PPUSH
6656: LD_INT 0
6658: PPUSH
6659: CALL_OW 49
// end ;
6663: GO 6508
6665: POP
6666: POP
// end ;
6667: GO 6490
6669: POP
6670: POP
// end ;
6671: LD_VAR 0 1
6675: RET
// export function PrepareApeman ; var bonus ; begin
6676: LD_INT 0
6678: PPUSH
6679: PPUSH
// uc_side := 0 ;
6680: LD_ADDR_OWVAR 20
6684: PUSH
6685: LD_INT 0
6687: ST_TO_ADDR
// uc_nation := 0 ;
6688: LD_ADDR_OWVAR 21
6692: PUSH
6693: LD_INT 0
6695: ST_TO_ADDR
// InitHc ;
6696: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6700: LD_ADDR_VAR 0 2
6704: PUSH
6705: LD_INT 1
6707: NEG
6708: PUSH
6709: LD_INT 0
6711: PUSH
6712: LD_INT 1
6714: PUSH
6715: EMPTY
6716: LIST
6717: LIST
6718: LIST
6719: PUSH
6720: LD_OWVAR 1
6724: PUSH
6725: LD_INT 3
6727: MOD
6728: PUSH
6729: LD_INT 1
6731: PLUS
6732: ARRAY
6733: ST_TO_ADDR
// hc_class := class_apeman ;
6734: LD_ADDR_OWVAR 28
6738: PUSH
6739: LD_INT 12
6741: ST_TO_ADDR
// hc_gallery :=  ;
6742: LD_ADDR_OWVAR 33
6746: PUSH
6747: LD_STRING 
6749: ST_TO_ADDR
// hc_name :=  ;
6750: LD_ADDR_OWVAR 26
6754: PUSH
6755: LD_STRING 
6757: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6758: LD_ADDR_OWVAR 31
6762: PUSH
6763: LD_EXP 37
6767: PUSH
6768: LD_VAR 0 2
6772: PLUS
6773: PUSH
6774: LD_EXP 37
6778: PUSH
6779: LD_VAR 0 2
6783: PLUS
6784: PUSH
6785: LD_EXP 37
6789: PUSH
6790: LD_VAR 0 2
6794: PLUS
6795: PUSH
6796: LD_EXP 37
6800: PUSH
6801: LD_VAR 0 2
6805: PLUS
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6813: LD_ADDR_OWVAR 35
6817: PUSH
6818: LD_INT 10
6820: PUSH
6821: LD_VAR 0 2
6825: MUL
6826: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6827: LD_ADDR_OWVAR 29
6831: PUSH
6832: LD_INT 12
6834: PUSH
6835: LD_INT 10
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: ST_TO_ADDR
// result := CreateHuman ;
6842: LD_ADDR_VAR 0 1
6846: PUSH
6847: CALL_OW 44
6851: ST_TO_ADDR
// end ;
6852: LD_VAR 0 1
6856: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6857: LD_INT 0
6859: PPUSH
6860: PPUSH
6861: PPUSH
// if not ape then
6862: LD_VAR 0 1
6866: NOT
6867: IFFALSE 6871
// exit ;
6869: GO 6996
// side := GetSide ( ape ) ;
6871: LD_ADDR_VAR 0 3
6875: PUSH
6876: LD_VAR 0 1
6880: PPUSH
6881: CALL_OW 255
6885: ST_TO_ADDR
// if not side then
6886: LD_VAR 0 3
6890: NOT
6891: IFFALSE 6945
// begin for i = 1 to apemanPos do
6893: LD_ADDR_VAR 0 4
6897: PUSH
6898: DOUBLE
6899: LD_INT 1
6901: DEC
6902: ST_TO_ADDR
6903: LD_EXP 35
6907: PUSH
6908: FOR_TO
6909: IFFALSE 6943
// if ape in apemanPos [ i ] then
6911: LD_VAR 0 1
6915: PUSH
6916: LD_EXP 35
6920: PUSH
6921: LD_VAR 0 4
6925: ARRAY
6926: IN
6927: IFFALSE 6941
// begin side := i ;
6929: LD_ADDR_VAR 0 3
6933: PUSH
6934: LD_VAR 0 4
6938: ST_TO_ADDR
// break ;
6939: GO 6943
// end ;
6941: GO 6908
6943: POP
6944: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6945: LD_ADDR_EXP 35
6949: PUSH
6950: LD_EXP 35
6954: PPUSH
6955: LD_VAR 0 3
6959: PPUSH
6960: LD_EXP 35
6964: PUSH
6965: LD_VAR 0 3
6969: ARRAY
6970: PUSH
6971: LD_VAR 0 1
6975: DIFF
6976: PPUSH
6977: CALL_OW 1
6981: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6982: LD_ADDR_EXP 32
6986: PUSH
6987: LD_EXP 32
6991: PUSH
6992: LD_INT 1
6994: MINUS
6995: ST_TO_ADDR
// end ; end_of_file
6996: LD_VAR 0 2
7000: RET
// var respawn , inqueue ; export function init_respawning ; begin
7001: LD_INT 0
7003: PPUSH
// respawn := Rand ( 1 , 8 ) ;
7004: LD_ADDR_LOC 9
7008: PUSH
7009: LD_INT 1
7011: PPUSH
7012: LD_INT 8
7014: PPUSH
7015: CALL_OW 12
7019: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7020: LD_ADDR_LOC 10
7024: PUSH
7025: LD_INT 0
7027: PUSH
7028: LD_INT 0
7030: PUSH
7031: LD_INT 0
7033: PUSH
7034: LD_INT 0
7036: PUSH
7037: LD_INT 0
7039: PUSH
7040: LD_INT 0
7042: PUSH
7043: LD_INT 0
7045: PUSH
7046: LD_INT 0
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: ST_TO_ADDR
// end ;
7059: LD_VAR 0 1
7063: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
7064: GO 7066
7066: DISABLE
7067: LD_INT 0
7069: PPUSH
7070: PPUSH
7071: PPUSH
// begin if respawning_time_max = 0 then
7072: LD_EXP 14
7076: PUSH
7077: LD_INT 0
7079: EQUAL
7080: IFFALSE 7084
// exit ;
7082: GO 7489
// if respawn = 8 then
7084: LD_LOC 9
7088: PUSH
7089: LD_INT 8
7091: EQUAL
7092: IFFALSE 7104
// respawn := 1 else
7094: LD_ADDR_LOC 9
7098: PUSH
7099: LD_INT 1
7101: ST_TO_ADDR
7102: GO 7118
// respawn := respawn + 1 ;
7104: LD_ADDR_LOC 9
7108: PUSH
7109: LD_LOC 9
7113: PUSH
7114: LD_INT 1
7116: PLUS
7117: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
7118: LD_EXP 18
7122: PUSH
7123: LD_LOC 9
7127: ARRAY
7128: PUSH
7129: LD_LOC 10
7133: PUSH
7134: LD_LOC 9
7138: ARRAY
7139: NOT
7140: AND
7141: IFFALSE 7488
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
7143: LD_ADDR_VAR 0 1
7147: PUSH
7148: LD_INT 21
7150: PUSH
7151: LD_INT 1
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PUSH
7158: LD_INT 22
7160: PUSH
7161: LD_LOC 9
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: LD_INT 3
7172: PUSH
7173: LD_INT 23
7175: PUSH
7176: LD_INT 0
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: PPUSH
7189: CALL_OW 69
7193: ST_TO_ADDR
// if n < number_of_people then
7194: LD_VAR 0 1
7198: PUSH
7199: LD_EXP 5
7203: LESS
7204: IFFALSE 7485
// begin dep := FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , respawn ] ] ) ;
7206: LD_ADDR_VAR 0 2
7210: PUSH
7211: LD_INT 21
7213: PUSH
7214: LD_INT 3
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: PUSH
7221: LD_INT 2
7223: PUSH
7224: LD_INT 30
7226: PUSH
7227: LD_INT 0
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: PUSH
7234: LD_INT 30
7236: PUSH
7237: LD_INT 1
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: PUSH
7244: EMPTY
7245: LIST
7246: LIST
7247: LIST
7248: PUSH
7249: LD_INT 50
7251: PUSH
7252: EMPTY
7253: LIST
7254: PUSH
7255: LD_INT 22
7257: PUSH
7258: LD_LOC 9
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: PPUSH
7273: CALL_OW 69
7277: ST_TO_ADDR
// if dep then
7278: LD_VAR 0 2
7282: IFFALSE 7482
// begin aktresp := respawn ;
7284: LD_ADDR_VAR 0 3
7288: PUSH
7289: LD_LOC 9
7293: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
7294: LD_ADDR_LOC 10
7298: PUSH
7299: LD_LOC 10
7303: PPUSH
7304: LD_VAR 0 3
7308: PPUSH
7309: LD_INT 1
7311: PPUSH
7312: CALL_OW 1
7316: ST_TO_ADDR
// enable ;
7317: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
7318: LD_EXP 13
7322: PPUSH
7323: LD_EXP 14
7327: PPUSH
7328: CALL_OW 12
7332: PPUSH
7333: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
7337: LD_ADDR_LOC 10
7341: PUSH
7342: LD_LOC 10
7346: PPUSH
7347: LD_VAR 0 3
7351: PPUSH
7352: LD_INT 0
7354: PPUSH
7355: CALL_OW 1
7359: ST_TO_ADDR
// hc_name :=  ;
7360: LD_ADDR_OWVAR 26
7364: PUSH
7365: LD_STRING 
7367: ST_TO_ADDR
// hc_importance := 0 ;
7368: LD_ADDR_OWVAR 32
7372: PUSH
7373: LD_INT 0
7375: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
7376: LD_INT 0
7378: PPUSH
7379: LD_INT 0
7381: PPUSH
7382: LD_EXP 6
7386: PUSH
7387: LD_INT 2
7389: DIV
7390: PPUSH
7391: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
7395: LD_ADDR_OWVAR 21
7399: PUSH
7400: LD_EXP 19
7404: PUSH
7405: LD_VAR 0 3
7409: ARRAY
7410: ST_TO_ADDR
// uc_side := aktresp ;
7411: LD_ADDR_OWVAR 20
7415: PUSH
7416: LD_VAR 0 3
7420: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
7421: LD_ADDR_VAR 0 2
7425: PUSH
7426: LD_VAR 0 2
7430: PUSH
7431: LD_INT 1
7433: PPUSH
7434: LD_VAR 0 2
7438: PPUSH
7439: CALL_OW 12
7443: ARRAY
7444: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
7445: CALL_OW 44
7449: PPUSH
7450: LD_VAR 0 2
7454: PPUSH
7455: CALL_OW 250
7459: PPUSH
7460: LD_VAR 0 2
7464: PPUSH
7465: CALL_OW 251
7469: PPUSH
7470: LD_INT 7
7472: PPUSH
7473: LD_INT 1
7475: PPUSH
7476: CALL_OW 50
// end else
7480: GO 7483
// enable ;
7482: ENABLE
// end else
7483: GO 7486
// enable ;
7485: ENABLE
// end else
7486: GO 7489
// enable ;
7488: ENABLE
// end ; end_of_file
7489: PPOPN 3
7491: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7492: LD_VAR 0 1
7496: PPUSH
7497: CALL_OW 266
7501: PUSH
7502: LD_INT 0
7504: PUSH
7505: LD_INT 1
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: IN
7512: IFFALSE 7537
// SetBName ( b , @ & GetSide ( b ) ) ;
7514: LD_VAR 0 1
7518: PPUSH
7519: LD_STRING @
7521: PUSH
7522: LD_VAR 0 1
7526: PPUSH
7527: CALL_OW 255
7531: STR
7532: PPUSH
7533: CALL_OW 500
// if def_game_rules then
7537: LD_EXP 41
7541: IFFALSE 7578
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
7543: LD_VAR 0 1
7547: PPUSH
7548: LD_VAR 0 1
7552: PPUSH
7553: CALL_OW 266
7557: PPUSH
7558: LD_VAR 0 1
7562: PPUSH
7563: CALL_OW 255
7567: PPUSH
7568: LD_INT 0
7570: PPUSH
7571: LD_INT 1
7573: PPUSH
7574: CALL 13688 0 5
// end ;
7578: PPOPN 2
7580: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7581: LD_VAR 0 1
7585: PPUSH
7586: CALL_OW 266
7590: PUSH
7591: LD_INT 0
7593: PUSH
7594: LD_INT 1
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: IN
7601: IFFALSE 7626
// SetBName ( b , @ & GetSide ( b ) ) ;
7603: LD_VAR 0 1
7607: PPUSH
7608: LD_STRING @
7610: PUSH
7611: LD_VAR 0 1
7615: PPUSH
7616: CALL_OW 255
7620: STR
7621: PPUSH
7622: CALL_OW 500
// if def_game_rules then
7626: LD_EXP 41
7630: IFFALSE 7669
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7632: LD_VAR 0 1
7636: PPUSH
7637: LD_VAR 0 1
7641: PPUSH
7642: CALL_OW 266
7646: PPUSH
7647: LD_VAR 0 1
7651: PPUSH
7652: CALL_OW 255
7656: PPUSH
7657: LD_VAR 0 2
7661: PPUSH
7662: LD_INT 1
7664: PPUSH
7665: CALL 13688 0 5
// end ;
7669: PPOPN 3
7671: END
// on VehicleConstructed ( veh , fac ) do var side ;
7672: LD_INT 0
7674: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7675: LD_VAR 0 1
7679: PPUSH
7680: CALL_OW 263
7684: PUSH
7685: LD_INT 5
7687: EQUAL
7688: IFFALSE 7830
// begin side := GetSide ( veh ) ;
7690: LD_ADDR_VAR 0 3
7694: PUSH
7695: LD_VAR 0 1
7699: PPUSH
7700: CALL_OW 255
7704: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7705: LD_ADDR_EXP 35
7709: PUSH
7710: LD_EXP 35
7714: PPUSH
7715: LD_VAR 0 3
7719: PPUSH
7720: LD_EXP 35
7724: PUSH
7725: LD_VAR 0 3
7729: ARRAY
7730: PPUSH
7731: LD_INT 52
7733: PUSH
7734: EMPTY
7735: LIST
7736: PPUSH
7737: CALL_OW 72
7741: PUSH
7742: LD_INT 22
7744: PUSH
7745: LD_VAR 0 3
7749: PUSH
7750: EMPTY
7751: LIST
7752: LIST
7753: PUSH
7754: LD_INT 2
7756: PUSH
7757: LD_INT 33
7759: PUSH
7760: LD_INT 5
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: PUSH
7767: LD_INT 25
7769: PUSH
7770: LD_INT 12
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: PUSH
7777: LD_INT 25
7779: PUSH
7780: LD_INT 15
7782: PUSH
7783: EMPTY
7784: LIST
7785: LIST
7786: PUSH
7787: LD_INT 25
7789: PUSH
7790: LD_INT 16
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: PUSH
7797: LD_INT 25
7799: PUSH
7800: LD_INT 17
7802: PUSH
7803: EMPTY
7804: LIST
7805: LIST
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PPUSH
7819: CALL_OW 69
7823: UNION
7824: PPUSH
7825: CALL_OW 1
7829: ST_TO_ADDR
// end ; end ;
7830: PPOPN 3
7832: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7833: LD_INT 0
7835: PPUSH
7836: PPUSH
7837: PPUSH
7838: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7839: LD_VAR 0 1
7843: PPUSH
7844: CALL_OW 257
7848: PUSH
7849: LD_INT 12
7851: PUSH
7852: LD_INT 15
7854: PUSH
7855: LD_INT 17
7857: PUSH
7858: LD_INT 16
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: IN
7867: PUSH
7868: LD_VAR 0 1
7872: PPUSH
7873: CALL_OW 263
7877: PUSH
7878: LD_INT 5
7880: EQUAL
7881: OR
7882: IFFALSE 7893
// ApeKilled ( j ) ;
7884: LD_VAR 0 1
7888: PPUSH
7889: CALL 6857 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7893: LD_VAR 0 1
7897: PPUSH
7898: CALL_OW 266
7902: PUSH
7903: LD_INT 0
7905: PUSH
7906: LD_INT 1
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: IN
7913: IFFALSE 7995
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7915: LD_ADDR_VAR 0 4
7919: PUSH
7920: LD_EXP 18
7924: PUSH
7925: LD_VAR 0 1
7929: PPUSH
7930: CALL_OW 255
7934: ARRAY
7935: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7936: LD_ADDR_VAR 0 2
7940: PUSH
7941: LD_EXP 24
7945: PUSH
7946: LD_VAR 0 4
7950: ARRAY
7951: PUSH
7952: LD_INT 1
7954: ARRAY
7955: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7956: LD_ADDR_VAR 0 3
7960: PUSH
7961: LD_EXP 24
7965: PUSH
7966: LD_VAR 0 4
7970: ARRAY
7971: PUSH
7972: LD_INT 2
7974: ARRAY
7975: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7976: LD_VAR 0 2
7980: PPUSH
7981: LD_VAR 0 3
7985: PPUSH
7986: CALL_OW 420
7990: PPUSH
7991: CALL_OW 419
// end ; if def_game_rules then
7995: LD_EXP 41
7999: IFFALSE 8098
// if ( GetType ( j ) = 3 ) then
8001: LD_VAR 0 1
8005: PPUSH
8006: CALL_OW 247
8010: PUSH
8011: LD_INT 3
8013: EQUAL
8014: IFFALSE 8054
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
8016: LD_VAR 0 1
8020: PPUSH
8021: LD_VAR 0 1
8025: PPUSH
8026: CALL_OW 266
8030: PPUSH
8031: LD_VAR 0 1
8035: PPUSH
8036: CALL_OW 255
8040: PPUSH
8041: LD_INT 0
8043: PPUSH
8044: LD_INT 1
8046: NEG
8047: PPUSH
8048: CALL 13688 0 5
8052: GO 8098
// if ( GetChassis ( j ) = 25 ) then
8054: LD_VAR 0 1
8058: PPUSH
8059: CALL_OW 265
8063: PUSH
8064: LD_INT 25
8066: EQUAL
8067: IFFALSE 8098
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
8069: LD_VAR 0 1
8073: PPUSH
8074: LD_INT 37
8076: PPUSH
8077: LD_VAR 0 1
8081: PPUSH
8082: CALL_OW 255
8086: PPUSH
8087: LD_INT 0
8089: PPUSH
8090: LD_INT 1
8092: NEG
8093: PPUSH
8094: CALL 13688 0 5
// end ;
8098: PPOPN 5
8100: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
8101: LD_EXP 41
8105: PUSH
8106: LD_VAR 0 1
8110: PPUSH
8111: CALL_OW 265
8115: PUSH
8116: LD_INT 25
8118: EQUAL
8119: AND
8120: IFFALSE 8152
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
8122: LD_VAR 0 1
8126: PPUSH
8127: LD_INT 37
8129: PPUSH
8130: LD_VAR 0 1
8134: PPUSH
8135: CALL_OW 255
8139: PPUSH
8140: LD_VAR 0 3
8144: PPUSH
8145: LD_INT 1
8147: PPUSH
8148: CALL 13688 0 5
// end ;
8152: PPOPN 4
8154: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
8155: LD_VAR 0 1
8159: PPUSH
8160: LD_VAR 0 2
8164: PPUSH
8165: LD_VAR 0 3
8169: PPUSH
8170: LD_OWVAR 2
8174: PPUSH
8175: CALL 14366 0 4
8179: PPOPN 3
8181: END
// function CanWinLoose ; begin
8182: LD_INT 0
8184: PPUSH
// Result := true ;
8185: LD_ADDR_VAR 0 1
8189: PUSH
8190: LD_INT 1
8192: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8193: CALL_OW 518
8197: PUSH
8198: CALL_OW 519
8202: PUSH
8203: LD_INT 0
8205: GREATER
8206: AND
8207: IFFALSE 8217
// Result := false ;
8209: LD_ADDR_VAR 0 1
8213: PUSH
8214: LD_INT 0
8216: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8217: CALL_OW 531
8221: PUSH
8222: CALL_OW 519
8226: PUSH
8227: LD_INT 1
8229: GREATER
8230: AND
8231: IFFALSE 8241
// Result := false ;
8233: LD_ADDR_VAR 0 1
8237: PUSH
8238: LD_INT 0
8240: ST_TO_ADDR
// end ;
8241: LD_VAR 0 1
8245: RET
// function HasPower ( i ) ; begin
8246: LD_INT 0
8248: PPUSH
// if def_people_respawning then
8249: LD_EXP 52
8253: IFFALSE 8344
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8255: LD_ADDR_VAR 0 2
8259: PUSH
8260: LD_INT 22
8262: PUSH
8263: LD_VAR 0 1
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: PUSH
8272: LD_INT 2
8274: PUSH
8275: LD_INT 21
8277: PUSH
8278: LD_INT 1
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: PUSH
8285: LD_INT 33
8287: PUSH
8288: LD_INT 3
8290: PUSH
8291: EMPTY
8292: LIST
8293: LIST
8294: PUSH
8295: LD_INT 33
8297: PUSH
8298: LD_INT 5
8300: PUSH
8301: EMPTY
8302: LIST
8303: LIST
8304: PUSH
8305: LD_INT 30
8307: PUSH
8308: LD_INT 0
8310: PUSH
8311: EMPTY
8312: LIST
8313: LIST
8314: PUSH
8315: LD_INT 30
8317: PUSH
8318: LD_INT 1
8320: PUSH
8321: EMPTY
8322: LIST
8323: LIST
8324: PUSH
8325: EMPTY
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: PUSH
8333: EMPTY
8334: LIST
8335: LIST
8336: PPUSH
8337: CALL_OW 69
8341: ST_TO_ADDR
8342: GO 8409
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
8344: LD_ADDR_VAR 0 2
8348: PUSH
8349: LD_INT 22
8351: PUSH
8352: LD_VAR 0 1
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: PUSH
8361: LD_INT 2
8363: PUSH
8364: LD_INT 21
8366: PUSH
8367: LD_INT 1
8369: PUSH
8370: EMPTY
8371: LIST
8372: LIST
8373: PUSH
8374: LD_INT 33
8376: PUSH
8377: LD_INT 3
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: PUSH
8384: LD_INT 33
8386: PUSH
8387: LD_INT 5
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: LIST
8398: LIST
8399: PUSH
8400: EMPTY
8401: LIST
8402: LIST
8403: PPUSH
8404: CALL_OW 69
8408: ST_TO_ADDR
// end ;
8409: LD_VAR 0 2
8413: RET
// function AlliedSides ( i , j ) ; begin
8414: LD_INT 0
8416: PPUSH
// Result := false ;
8417: LD_ADDR_VAR 0 3
8421: PUSH
8422: LD_INT 0
8424: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8425: LD_VAR 0 1
8429: PPUSH
8430: LD_VAR 0 2
8434: PPUSH
8435: CALL_OW 81
8439: PUSH
8440: LD_INT 1
8442: EQUAL
8443: PUSH
8444: LD_VAR 0 2
8448: PPUSH
8449: LD_VAR 0 1
8453: PPUSH
8454: CALL_OW 81
8458: PUSH
8459: LD_INT 1
8461: EQUAL
8462: AND
8463: PUSH
8464: LD_VAR 0 1
8468: PPUSH
8469: CALL_OW 83
8473: AND
8474: PUSH
8475: LD_VAR 0 2
8479: PPUSH
8480: CALL_OW 83
8484: AND
8485: IFFALSE 8495
// Result := true ;
8487: LD_ADDR_VAR 0 3
8491: PUSH
8492: LD_INT 1
8494: ST_TO_ADDR
// end ;
8495: LD_VAR 0 3
8499: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
8500: CALL 8182 0 0
8504: IFFALSE 8513
8506: GO 8508
8508: DISABLE
// YouLostInMultiplayer ;
8509: CALL_OW 107
8513: END
// every 0 0$3 trigger CanWinLoose marked 401 do
8514: CALL 8182 0 0
8518: IFFALSE 8542
8520: GO 8522
8522: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
8523: LD_EXP 19
8527: PUSH
8528: LD_OWVAR 2
8532: ARRAY
8533: PPUSH
8534: CALL 14408 0 1
// YouWinInMultiplayer ;
8538: CALL_OW 106
// end ;
8542: END
// every 0 0$3 marked 98 do var i , CanWin ;
8543: GO 8545
8545: DISABLE
8546: LD_INT 0
8548: PPUSH
8549: PPUSH
// begin if not HasPower ( your_side ) then
8550: LD_OWVAR 2
8554: PPUSH
8555: CALL 8246 0 1
8559: NOT
8560: IFFALSE 8571
// begin Multiplayer_Loose_Message ;
8562: CALL_OW 521
// enable ( 400 ) ;
8566: LD_INT 400
8568: ENABLE_MARKED
// end else
8569: GO 8704
// begin CanWin := true ;
8571: LD_ADDR_VAR 0 2
8575: PUSH
8576: LD_INT 1
8578: ST_TO_ADDR
// for i := 1 to 8 do
8579: LD_ADDR_VAR 0 1
8583: PUSH
8584: DOUBLE
8585: LD_INT 1
8587: DEC
8588: ST_TO_ADDR
8589: LD_INT 8
8591: PUSH
8592: FOR_TO
8593: IFFALSE 8690
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8595: LD_EXP 18
8599: PUSH
8600: LD_VAR 0 1
8604: ARRAY
8605: PUSH
8606: LD_VAR 0 1
8610: PPUSH
8611: CALL_OW 108
8615: AND
8616: PUSH
8617: LD_VAR 0 1
8621: PUSH
8622: LD_OWVAR 2
8626: NONEQUAL
8627: AND
8628: IFFALSE 8688
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
8630: LD_EXP 16
8634: PUSH
8635: LD_VAR 0 1
8639: ARRAY
8640: NOT
8641: PUSH
8642: LD_EXP 16
8646: PUSH
8647: LD_VAR 0 1
8651: ARRAY
8652: PUSH
8653: LD_EXP 16
8657: PUSH
8658: LD_OWVAR 2
8662: ARRAY
8663: NONEQUAL
8664: OR
8665: IFFALSE 8688
// if HasPower ( i ) then
8667: LD_VAR 0 1
8671: PPUSH
8672: CALL 8246 0 1
8676: IFFALSE 8688
// begin CanWin := false ;
8678: LD_ADDR_VAR 0 2
8682: PUSH
8683: LD_INT 0
8685: ST_TO_ADDR
// break ;
8686: GO 8690
// end ;
8688: GO 8592
8690: POP
8691: POP
// if CanWin then
8692: LD_VAR 0 2
8696: IFFALSE 8703
// enable ( 401 ) else
8698: LD_INT 401
8700: ENABLE_MARKED
8701: GO 8704
// enable ;
8703: ENABLE
// end ; end ;
8704: PPOPN 2
8706: END
// every 0 0$3 marked 99 do var i , CanWin ;
8707: GO 8709
8709: DISABLE
8710: LD_INT 0
8712: PPUSH
8713: PPUSH
// begin if not HasPower ( your_side ) then
8714: LD_OWVAR 2
8718: PPUSH
8719: CALL 8246 0 1
8723: NOT
8724: IFFALSE 8735
// begin Multiplayer_Loose_Message ;
8726: CALL_OW 521
// enable ( 400 ) ;
8730: LD_INT 400
8732: ENABLE_MARKED
// end else
8733: GO 8848
// begin CanWin := true ;
8735: LD_ADDR_VAR 0 2
8739: PUSH
8740: LD_INT 1
8742: ST_TO_ADDR
// for i := 1 to 8 do
8743: LD_ADDR_VAR 0 1
8747: PUSH
8748: DOUBLE
8749: LD_INT 1
8751: DEC
8752: ST_TO_ADDR
8753: LD_INT 8
8755: PUSH
8756: FOR_TO
8757: IFFALSE 8834
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8759: LD_EXP 18
8763: PUSH
8764: LD_VAR 0 1
8768: ARRAY
8769: PUSH
8770: LD_VAR 0 1
8774: PPUSH
8775: CALL_OW 108
8779: AND
8780: PUSH
8781: LD_VAR 0 1
8785: PUSH
8786: LD_OWVAR 2
8790: NONEQUAL
8791: AND
8792: IFFALSE 8832
// if not AlliedSides ( i , your_side ) then
8794: LD_VAR 0 1
8798: PPUSH
8799: LD_OWVAR 2
8803: PPUSH
8804: CALL 8414 0 2
8808: NOT
8809: IFFALSE 8832
// if HasPower ( i ) then
8811: LD_VAR 0 1
8815: PPUSH
8816: CALL 8246 0 1
8820: IFFALSE 8832
// begin CanWin := false ;
8822: LD_ADDR_VAR 0 2
8826: PUSH
8827: LD_INT 0
8829: ST_TO_ADDR
// break ;
8830: GO 8834
// end ;
8832: GO 8756
8834: POP
8835: POP
// if CanWin then
8836: LD_VAR 0 2
8840: IFFALSE 8847
// enable ( 401 ) else
8842: LD_INT 401
8844: ENABLE_MARKED
8845: GO 8848
// enable ;
8847: ENABLE
// end ; end ; end_of_file
8848: PPOPN 2
8850: END
// every 0 0$1 marked 100 do var i , base , pom , filter , sib_mined ;
8851: GO 8853
8853: DISABLE
8854: LD_INT 0
8856: PPUSH
8857: PPUSH
8858: PPUSH
8859: PPUSH
8860: PPUSH
// begin sib_mined := [ ] ;
8861: LD_ADDR_VAR 0 5
8865: PUSH
8866: EMPTY
8867: ST_TO_ADDR
// for i := 1 to 8 do
8868: LD_ADDR_VAR 0 1
8872: PUSH
8873: DOUBLE
8874: LD_INT 1
8876: DEC
8877: ST_TO_ADDR
8878: LD_INT 8
8880: PUSH
8881: FOR_TO
8882: IFFALSE 9038
// if Side_Positions [ i ] then
8884: LD_EXP 18
8888: PUSH
8889: LD_VAR 0 1
8893: ARRAY
8894: IFFALSE 9022
// begin filter := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8896: LD_ADDR_VAR 0 4
8900: PUSH
8901: LD_INT 22
8903: PUSH
8904: LD_VAR 0 1
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: PUSH
8913: LD_INT 2
8915: PUSH
8916: LD_INT 30
8918: PUSH
8919: LD_INT 0
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PUSH
8926: LD_INT 30
8928: PUSH
8929: LD_INT 1
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: LIST
8940: PUSH
8941: EMPTY
8942: LIST
8943: LIST
8944: PPUSH
8945: CALL_OW 69
8949: ST_TO_ADDR
// pom := 0 ;
8950: LD_ADDR_VAR 0 3
8954: PUSH
8955: LD_INT 0
8957: ST_TO_ADDR
// for base in filter do
8958: LD_ADDR_VAR 0 2
8962: PUSH
8963: LD_VAR 0 4
8967: PUSH
8968: FOR_IN
8969: IFFALSE 9002
// pom := pom + GetResourceType ( GetBase ( base ) , mat_siberit ) ;
8971: LD_ADDR_VAR 0 3
8975: PUSH
8976: LD_VAR 0 3
8980: PUSH
8981: LD_VAR 0 2
8985: PPUSH
8986: CALL_OW 274
8990: PPUSH
8991: LD_INT 3
8993: PPUSH
8994: CALL_OW 275
8998: PLUS
8999: ST_TO_ADDR
9000: GO 8968
9002: POP
9003: POP
// sib_mined := sib_mined ^ pom ;
9004: LD_ADDR_VAR 0 5
9008: PUSH
9009: LD_VAR 0 5
9013: PUSH
9014: LD_VAR 0 3
9018: ADD
9019: ST_TO_ADDR
// end else
9020: GO 9036
// sib_mined := sib_mined ^ 0 ;
9022: LD_ADDR_VAR 0 5
9026: PUSH
9027: LD_VAR 0 5
9031: PUSH
9032: LD_INT 0
9034: ADD
9035: ST_TO_ADDR
9036: GO 8881
9038: POP
9039: POP
// if not def_public_score then
9040: LD_EXP 2
9044: NOT
9045: IFFALSE 9135
// begin ExtraStrings := [ ] ;
9047: LD_ADDR_EXP 59
9051: PUSH
9052: EMPTY
9053: ST_TO_ADDR
// for i := 1 to 8 do
9054: LD_ADDR_VAR 0 1
9058: PUSH
9059: DOUBLE
9060: LD_INT 1
9062: DEC
9063: ST_TO_ADDR
9064: LD_INT 8
9066: PUSH
9067: FOR_TO
9068: IFFALSE 9131
// if Side_Positions [ i ] then
9070: LD_EXP 18
9074: PUSH
9075: LD_VAR 0 1
9079: ARRAY
9080: IFFALSE 9129
// ExtraStrings := ExtraStrings ^ [ #AlienBase-MinedPublic , i , i , sib_mined [ i ] , amount_of_siberit ] ;
9082: LD_ADDR_EXP 59
9086: PUSH
9087: LD_EXP 59
9091: PUSH
9092: LD_STRING #AlienBase-MinedPublic
9094: PUSH
9095: LD_VAR 0 1
9099: PUSH
9100: LD_VAR 0 1
9104: PUSH
9105: LD_VAR 0 5
9109: PUSH
9110: LD_VAR 0 1
9114: ARRAY
9115: PUSH
9116: LD_EXP 12
9120: PUSH
9121: EMPTY
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: ADD
9128: ST_TO_ADDR
9129: GO 9067
9131: POP
9132: POP
// end else
9133: GO 9164
// ExtraStrings := [ #AlienBase-Mined , sib_mined [ Your_Side ] , amount_of_siberit ] ;
9135: LD_ADDR_EXP 59
9139: PUSH
9140: LD_STRING #AlienBase-Mined
9142: PUSH
9143: LD_VAR 0 5
9147: PUSH
9148: LD_OWVAR 2
9152: ARRAY
9153: PUSH
9154: LD_EXP 12
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: LIST
9163: ST_TO_ADDR
// for i := 1 to 8 do
9164: LD_ADDR_VAR 0 1
9168: PUSH
9169: DOUBLE
9170: LD_INT 1
9172: DEC
9173: ST_TO_ADDR
9174: LD_INT 8
9176: PUSH
9177: FOR_TO
9178: IFFALSE 9235
// if sib_mined [ i ] >= amount_of_siberit then
9180: LD_VAR 0 5
9184: PUSH
9185: LD_VAR 0 1
9189: ARRAY
9190: PUSH
9191: LD_EXP 12
9195: GREATEREQUAL
9196: IFFALSE 9233
// begin wait ( 0 0$1 ) ;
9198: LD_INT 35
9200: PPUSH
9201: CALL_OW 67
// if sib_mined [ your_side ] >= amount_of_siberit then
9205: LD_VAR 0 5
9209: PUSH
9210: LD_OWVAR 2
9214: ARRAY
9215: PUSH
9216: LD_EXP 12
9220: GREATEREQUAL
9221: IFFALSE 9229
// YouWinInMultiplayer else
9223: CALL_OW 106
9227: GO 9233
// YouLostInMultiplayer ;
9229: CALL_OW 107
// end ;
9233: GO 9177
9235: POP
9236: POP
// enable ;
9237: ENABLE
// end ; end_of_file
9238: PPOPN 5
9240: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
9241: LD_INT 0
9243: PPUSH
9244: PPUSH
// for un in battle_flags_id do
9245: LD_ADDR_VAR 0 2
9249: PUSH
9250: LD_EXP 29
9254: PUSH
9255: FOR_IN
9256: IFFALSE 9331
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
9258: LD_VAR 0 2
9262: PPUSH
9263: LD_INT 1
9265: PUSH
9266: LD_LOC 11
9270: PUSH
9271: EMPTY
9272: LIST
9273: LIST
9274: PUSH
9275: LD_INT 2
9277: PUSH
9278: LD_LOC 11
9282: PUSH
9283: LD_INT 2
9285: DIV
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: PUSH
9291: LD_INT 3
9293: PUSH
9294: LD_LOC 11
9298: PUSH
9299: LD_INT 5
9301: DIV
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: PUSH
9307: LD_INT 20
9309: PUSH
9310: LD_LOC 11
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: PPUSH
9325: CALL_OW 423
9329: GO 9255
9331: POP
9332: POP
// end ;
9333: LD_VAR 0 1
9337: RET
// every 1 do var un ;
9338: GO 9340
9340: DISABLE
9341: LD_INT 0
9343: PPUSH
// begin if not def_morale_flags then
9344: LD_EXP 50
9348: NOT
9349: IFFALSE 9353
// exit ;
9351: GO 9430
// if not morale_decreasing_time then
9353: LD_EXP 10
9357: NOT
9358: IFFALSE 9362
// exit ;
9360: GO 9430
// strength = 100 ;
9362: LD_ADDR_LOC 11
9366: PUSH
9367: LD_INT 100
9369: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
9370: LD_EXP 10
9374: PPUSH
9375: CALL_OW 67
// strength := strength - 1 ;
9379: LD_ADDR_LOC 11
9383: PUSH
9384: LD_LOC 11
9388: PUSH
9389: LD_INT 1
9391: MINUS
9392: ST_TO_ADDR
// Update_Flags ;
9393: CALL 9241 0 0
// until not strength ;
9397: LD_LOC 11
9401: NOT
9402: IFFALSE 9370
// for un in battle_flags_id do
9404: LD_ADDR_VAR 0 1
9408: PUSH
9409: LD_EXP 29
9413: PUSH
9414: FOR_IN
9415: IFFALSE 9428
// KillBattleFlag ( un ) ;
9417: LD_VAR 0 1
9421: PPUSH
9422: CALL_OW 419
9426: GO 9414
9428: POP
9429: POP
// end ; end_of_file
9430: PPOPN 1
9432: END
// export BuildUpAreas ; export function BeginBuildUp ; var i , j ; begin
9433: LD_INT 0
9435: PPUSH
9436: PPUSH
9437: PPUSH
// enable ( 600 ) ;
9438: LD_INT 600
9440: ENABLE_MARKED
// for i := 1 to BuildUpAreas do
9441: LD_ADDR_VAR 0 2
9445: PUSH
9446: DOUBLE
9447: LD_INT 1
9449: DEC
9450: ST_TO_ADDR
9451: LD_EXP 39
9455: PUSH
9456: FOR_TO
9457: IFFALSE 9612
// if Position_Sides [ i ] then
9459: LD_EXP 21
9463: PUSH
9464: LD_VAR 0 2
9468: ARRAY
9469: IFFALSE 9610
// for j := 1 to 8 do
9471: LD_ADDR_VAR 0 3
9475: PUSH
9476: DOUBLE
9477: LD_INT 1
9479: DEC
9480: ST_TO_ADDR
9481: LD_INT 8
9483: PUSH
9484: FOR_TO
9485: IFFALSE 9608
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
9487: LD_EXP 18
9491: PUSH
9492: LD_VAR 0 3
9496: ARRAY
9497: PUSH
9498: LD_EXP 16
9502: PUSH
9503: LD_EXP 21
9507: PUSH
9508: LD_VAR 0 2
9512: ARRAY
9513: ARRAY
9514: PUSH
9515: LD_EXP 16
9519: PUSH
9520: LD_VAR 0 3
9524: ARRAY
9525: NONEQUAL
9526: PUSH
9527: LD_EXP 20
9531: NOT
9532: PUSH
9533: LD_EXP 21
9537: PUSH
9538: LD_VAR 0 2
9542: ARRAY
9543: PUSH
9544: LD_VAR 0 3
9548: NONEQUAL
9549: AND
9550: OR
9551: AND
9552: IFFALSE 9576
// HideArea ( j , BuildUpAreas [ i ] ) else
9554: LD_VAR 0 3
9558: PPUSH
9559: LD_EXP 39
9563: PUSH
9564: LD_VAR 0 2
9568: ARRAY
9569: PPUSH
9570: CALL_OW 333
9574: GO 9606
// if ( j = your_side ) then
9576: LD_VAR 0 3
9580: PUSH
9581: LD_OWVAR 2
9585: EQUAL
9586: IFFALSE 9606
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
9588: LD_EXP 39
9592: PUSH
9593: LD_VAR 0 2
9597: ARRAY
9598: PPUSH
9599: LD_INT 5
9601: PPUSH
9602: CALL_OW 424
9606: GO 9484
9608: POP
9609: POP
9610: GO 9456
9612: POP
9613: POP
// end ;
9614: LD_VAR 0 1
9618: RET
// export function EndBuildUp ; var i , j ; begin
9619: LD_INT 0
9621: PPUSH
9622: PPUSH
9623: PPUSH
// disable ( 600 ) ;
9624: LD_INT 600
9626: DISABLE_MARKED
// for i := 1 to BuildUpAreas do
9627: LD_ADDR_VAR 0 2
9631: PUSH
9632: DOUBLE
9633: LD_INT 1
9635: DEC
9636: ST_TO_ADDR
9637: LD_EXP 39
9641: PUSH
9642: FOR_TO
9643: IFFALSE 9798
// if Position_Sides [ i ] then
9645: LD_EXP 21
9649: PUSH
9650: LD_VAR 0 2
9654: ARRAY
9655: IFFALSE 9796
// for j := 1 to 8 do
9657: LD_ADDR_VAR 0 3
9661: PUSH
9662: DOUBLE
9663: LD_INT 1
9665: DEC
9666: ST_TO_ADDR
9667: LD_INT 8
9669: PUSH
9670: FOR_TO
9671: IFFALSE 9794
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
9673: LD_EXP 18
9677: PUSH
9678: LD_VAR 0 3
9682: ARRAY
9683: PUSH
9684: LD_EXP 16
9688: PUSH
9689: LD_EXP 21
9693: PUSH
9694: LD_VAR 0 2
9698: ARRAY
9699: ARRAY
9700: PUSH
9701: LD_EXP 16
9705: PUSH
9706: LD_VAR 0 3
9710: ARRAY
9711: NONEQUAL
9712: PUSH
9713: LD_EXP 20
9717: NOT
9718: PUSH
9719: LD_EXP 21
9723: PUSH
9724: LD_VAR 0 2
9728: ARRAY
9729: PUSH
9730: LD_VAR 0 3
9734: NONEQUAL
9735: AND
9736: OR
9737: AND
9738: IFFALSE 9762
// ShowArea ( j , BuildUpAreas [ i ] ) else
9740: LD_VAR 0 3
9744: PPUSH
9745: LD_EXP 39
9749: PUSH
9750: LD_VAR 0 2
9754: ARRAY
9755: PPUSH
9756: CALL_OW 334
9760: GO 9792
// if ( j = your_side ) then
9762: LD_VAR 0 3
9766: PUSH
9767: LD_OWVAR 2
9771: EQUAL
9772: IFFALSE 9792
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
9774: LD_EXP 39
9778: PUSH
9779: LD_VAR 0 2
9783: ARRAY
9784: PPUSH
9785: LD_INT 0
9787: PPUSH
9788: CALL_OW 424
9792: GO 9670
9794: POP
9795: POP
9796: GO 9642
9798: POP
9799: POP
// end ;
9800: LD_VAR 0 1
9804: RET
// every 5 marked 600 do var i , un ;
9805: GO 9807
9807: DISABLE
9808: LD_INT 0
9810: PPUSH
9811: PPUSH
// begin for i := 1 to BuildUpAreas do
9812: LD_ADDR_VAR 0 1
9816: PUSH
9817: DOUBLE
9818: LD_INT 1
9820: DEC
9821: ST_TO_ADDR
9822: LD_EXP 39
9826: PUSH
9827: FOR_TO
9828: IFFALSE 9983
// if Position_Sides [ i ] then
9830: LD_EXP 21
9834: PUSH
9835: LD_VAR 0 1
9839: ARRAY
9840: IFFALSE 9981
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
9842: LD_ADDR_VAR 0 2
9846: PUSH
9847: LD_EXP 39
9851: PUSH
9852: LD_VAR 0 1
9856: ARRAY
9857: PPUSH
9858: LD_INT 2
9860: PUSH
9861: LD_INT 21
9863: PUSH
9864: LD_INT 1
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: PUSH
9871: LD_INT 21
9873: PUSH
9874: LD_INT 2
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: LIST
9885: PUSH
9886: LD_INT 22
9888: PUSH
9889: LD_OWVAR 2
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: PPUSH
9902: CALL_OW 70
9906: PUSH
9907: FOR_IN
9908: IFFALSE 9979
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
9910: LD_EXP 16
9914: PUSH
9915: LD_EXP 21
9919: PUSH
9920: LD_VAR 0 1
9924: ARRAY
9925: ARRAY
9926: PUSH
9927: LD_EXP 16
9931: PUSH
9932: LD_OWVAR 2
9936: ARRAY
9937: NONEQUAL
9938: PUSH
9939: LD_EXP 20
9943: NOT
9944: PUSH
9945: LD_EXP 21
9949: PUSH
9950: LD_VAR 0 1
9954: ARRAY
9955: PUSH
9956: LD_OWVAR 2
9960: NONEQUAL
9961: AND
9962: OR
9963: IFFALSE 9977
// ComMoveToArea ( un , BuildUpEscape ) ;
9965: LD_VAR 0 2
9969: PPUSH
9970: LD_INT 16
9972: PPUSH
9973: CALL_OW 113
9977: GO 9907
9979: POP
9980: POP
9981: GO 9827
9983: POP
9984: POP
// enable ;
9985: ENABLE
// end ;
9986: PPOPN 2
9988: END
// every 5 5$00 do
9989: GO 9991
9991: DISABLE
// if ( def_builduptime = 1 ) then
9992: LD_EXP 55
9996: PUSH
9997: LD_INT 1
9999: EQUAL
10000: IFFALSE 10006
// EndBuildUp ;
10002: CALL 9619 0 0
10006: END
// every 10 10$00 do
10007: GO 10009
10009: DISABLE
// if ( def_builduptime = 2 ) then
10010: LD_EXP 55
10014: PUSH
10015: LD_INT 2
10017: EQUAL
10018: IFFALSE 10024
// EndBuildUp ;
10020: CALL 9619 0 0
10024: END
// every 15 15$00 do
10025: GO 10027
10027: DISABLE
// if ( def_builduptime = 3 ) then
10028: LD_EXP 55
10032: PUSH
10033: LD_INT 3
10035: EQUAL
10036: IFFALSE 10042
// EndBuildUp ; end_of_file
10038: CALL 9619 0 0
10042: END
// var BloodGods , BloodGods_LastKills , BloodGods_CurrentKills , BloodGods_Positions ; every 0 0$3 marked 200 do var x ;
10043: GO 10045
10045: DISABLE
10046: LD_INT 0
10048: PPUSH
// begin enable ;
10049: ENABLE
// for x := 1 to 8 do
10050: LD_ADDR_VAR 0 1
10054: PUSH
10055: DOUBLE
10056: LD_INT 1
10058: DEC
10059: ST_TO_ADDR
10060: LD_INT 8
10062: PUSH
10063: FOR_TO
10064: IFFALSE 10148
// if ( BloodGods_CurrentKills [ x ] > 5 ) and ( BloodGods [ x ] = - 1 ) then
10066: LD_LOC 18
10070: PUSH
10071: LD_VAR 0 1
10075: ARRAY
10076: PUSH
10077: LD_INT 5
10079: GREATER
10080: PUSH
10081: LD_LOC 16
10085: PUSH
10086: LD_VAR 0 1
10090: ARRAY
10091: PUSH
10092: LD_INT 1
10094: NEG
10095: EQUAL
10096: AND
10097: IFFALSE 10146
// begin BloodGods_LastKills := Replace ( BloodGods_LastKills , x , BloodGods_LastKills [ x ] + 6 ) ;
10099: LD_ADDR_LOC 17
10103: PUSH
10104: LD_LOC 17
10108: PPUSH
10109: LD_VAR 0 1
10113: PPUSH
10114: LD_LOC 17
10118: PUSH
10119: LD_VAR 0 1
10123: ARRAY
10124: PUSH
10125: LD_INT 6
10127: PLUS
10128: PPUSH
10129: CALL_OW 1
10133: ST_TO_ADDR
// AwakenBloodGod ( x , false ) ;
10134: LD_VAR 0 1
10138: PPUSH
10139: LD_INT 0
10141: PPUSH
10142: CALL 10320 0 2
// end ;
10146: GO 10063
10148: POP
10149: POP
// end ;
10150: PPOPN 1
10152: END
// every 0 0$1 marked 200 do var BGL , x ;
10153: GO 10155
10155: DISABLE
10156: LD_INT 0
10158: PPUSH
10159: PPUSH
// begin enable ;
10160: ENABLE
// for x := 1 to 8 do
10161: LD_ADDR_VAR 0 2
10165: PUSH
10166: DOUBLE
10167: LD_INT 1
10169: DEC
10170: ST_TO_ADDR
10171: LD_INT 8
10173: PUSH
10174: FOR_TO
10175: IFFALSE 10306
// if ( BloodGods [ x ] > - 1 ) and IsLive ( BloodGods [ x ] ) then
10177: LD_LOC 16
10181: PUSH
10182: LD_VAR 0 2
10186: ARRAY
10187: PUSH
10188: LD_INT 1
10190: NEG
10191: GREATER
10192: PUSH
10193: LD_LOC 16
10197: PUSH
10198: LD_VAR 0 2
10202: ARRAY
10203: PPUSH
10204: CALL_OW 300
10208: AND
10209: IFFALSE 10304
// begin BGL := GetLives ( BloodGods [ x ] ) ;
10211: LD_ADDR_VAR 0 1
10215: PUSH
10216: LD_LOC 16
10220: PUSH
10221: LD_VAR 0 2
10225: ARRAY
10226: PPUSH
10227: CALL_OW 256
10231: ST_TO_ADDR
// if ( BGL < 1000 ) and ( BGL > 100 ) then
10232: LD_VAR 0 1
10236: PUSH
10237: LD_INT 1000
10239: LESS
10240: PUSH
10241: LD_VAR 0 1
10245: PUSH
10246: LD_INT 100
10248: GREATER
10249: AND
10250: IFFALSE 10304
// begin BGL := BGL + 10 ;
10252: LD_ADDR_VAR 0 1
10256: PUSH
10257: LD_VAR 0 1
10261: PUSH
10262: LD_INT 10
10264: PLUS
10265: ST_TO_ADDR
// if BGL > 1000 then
10266: LD_VAR 0 1
10270: PUSH
10271: LD_INT 1000
10273: GREATER
10274: IFFALSE 10284
// BGL := 1000 ;
10276: LD_ADDR_VAR 0 1
10280: PUSH
10281: LD_INT 1000
10283: ST_TO_ADDR
// SetLives ( BloodGods [ x ] , BGL ) ;
10284: LD_LOC 16
10288: PUSH
10289: LD_VAR 0 2
10293: ARRAY
10294: PPUSH
10295: LD_VAR 0 1
10299: PPUSH
10300: CALL_OW 234
// end ; end ;
10304: GO 10174
10306: POP
10307: POP
// end ;
10308: PPOPN 2
10310: END
// every 0 0$1 marked 200 do
10311: GO 10313
10313: DISABLE
// begin DisplayTimeWithKills ;
10314: CALL 10561 0 0
// enable ;
10318: ENABLE
// end ;
10319: END
// function AwakenBloodGod ( side , NoDialog ) ; begin
10320: LD_INT 0
10322: PPUSH
// uc_direction := Rand ( 0 , 5 ) ;
10323: LD_ADDR_OWVAR 24
10327: PUSH
10328: LD_INT 0
10330: PPUSH
10331: LD_INT 5
10333: PPUSH
10334: CALL_OW 12
10338: ST_TO_ADDR
// PrepareHuman ( 1 , class_soldier , 15 ) ;
10339: LD_INT 1
10341: PPUSH
10342: LD_INT 1
10344: PPUSH
10345: LD_INT 15
10347: PPUSH
10348: CALL_OW 380
// hc_importance := 106 ;
10352: LD_ADDR_OWVAR 32
10356: PUSH
10357: LD_INT 106
10359: ST_TO_ADDR
// hc_name := Blood God of  & mp_sides_players_names [ side ] ;
10360: LD_ADDR_OWVAR 26
10364: PUSH
10365: LD_STRING Blood God of 
10367: PUSH
10368: LD_OWVAR 19
10372: PUSH
10373: LD_VAR 0 1
10377: ARRAY
10378: STR
10379: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
10380: LD_ADDR_OWVAR 21
10384: PUSH
10385: LD_EXP 19
10389: PUSH
10390: LD_VAR 0 1
10394: ARRAY
10395: ST_TO_ADDR
// uc_side := side ;
10396: LD_ADDR_OWVAR 20
10400: PUSH
10401: LD_VAR 0 1
10405: ST_TO_ADDR
// hc_noskilllimit := true ;
10406: LD_ADDR_OWVAR 76
10410: PUSH
10411: LD_INT 1
10413: ST_TO_ADDR
// hc_agressivity := 50 ;
10414: LD_ADDR_OWVAR 35
10418: PUSH
10419: LD_INT 50
10421: ST_TO_ADDR
// BloodGods := Replace ( BloodGods , Side , CreateHuman ) ;
10422: LD_ADDR_LOC 16
10426: PUSH
10427: LD_LOC 16
10431: PPUSH
10432: LD_VAR 0 1
10436: PPUSH
10437: CALL_OW 44
10441: PPUSH
10442: CALL_OW 1
10446: ST_TO_ADDR
// PlaceUnitXYR ( BloodGods [ side ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 1 ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 2 ] , 10 , false ) ;
10447: LD_LOC 16
10451: PUSH
10452: LD_VAR 0 1
10456: ARRAY
10457: PPUSH
10458: LD_LOC 19
10462: PUSH
10463: LD_EXP 18
10467: PUSH
10468: LD_VAR 0 1
10472: ARRAY
10473: ARRAY
10474: PUSH
10475: LD_INT 1
10477: ARRAY
10478: PPUSH
10479: LD_LOC 19
10483: PUSH
10484: LD_EXP 18
10488: PUSH
10489: LD_VAR 0 1
10493: ARRAY
10494: ARRAY
10495: PUSH
10496: LD_INT 2
10498: ARRAY
10499: PPUSH
10500: LD_INT 10
10502: PPUSH
10503: LD_INT 0
10505: PPUSH
10506: CALL_OW 50
// SetAttr ( BloodGods [ side ] , attr_stamina , 300 ) ;
10510: LD_LOC 16
10514: PUSH
10515: LD_VAR 0 1
10519: ARRAY
10520: PPUSH
10521: LD_INT 1
10523: PPUSH
10524: LD_INT 300
10526: PPUSH
10527: CALL_OW 239
// if not NoDialog then
10531: LD_VAR 0 2
10535: NOT
10536: IFFALSE 10556
// SayRadio ( BloodGods [ side ] , DLAwaken ) ;
10538: LD_LOC 16
10542: PUSH
10543: LD_VAR 0 1
10547: ARRAY
10548: PPUSH
10549: LD_STRING DLAwaken
10551: PPUSH
10552: CALL_OW 94
// end ;
10556: LD_VAR 0 3
10560: RET
// function DisplayTimeWithKills ; var x ; begin
10561: LD_INT 0
10563: PPUSH
10564: PPUSH
// ExtraStrings :=  ;
10565: LD_ADDR_EXP 59
10569: PUSH
10570: LD_STRING 
10572: ST_TO_ADDR
// for x = 1 to Side_Positions do
10573: LD_ADDR_VAR 0 2
10577: PUSH
10578: DOUBLE
10579: LD_INT 1
10581: DEC
10582: ST_TO_ADDR
10583: LD_EXP 18
10587: PUSH
10588: FOR_TO
10589: IFFALSE 10822
// if Side_Positions [ x ] then
10591: LD_EXP 18
10595: PUSH
10596: LD_VAR 0 2
10600: ARRAY
10601: IFFALSE 10820
// begin BloodGods_CurrentKills := Replace ( BloodGods_CurrentKills , x , GetHumansKilled ( x ) - BloodGods_LastKills [ x ] ) ;
10603: LD_ADDR_LOC 18
10607: PUSH
10608: LD_LOC 18
10612: PPUSH
10613: LD_VAR 0 2
10617: PPUSH
10618: LD_VAR 0 2
10622: PPUSH
10623: CALL_OW 515
10627: PUSH
10628: LD_LOC 17
10632: PUSH
10633: LD_VAR 0 2
10637: ARRAY
10638: MINUS
10639: PPUSH
10640: CALL_OW 1
10644: ST_TO_ADDR
// if ( BloodGods [ x ] > - 1 ) and ( IsLive ( BloodGods [ x ] ) ) then
10645: LD_LOC 16
10649: PUSH
10650: LD_VAR 0 2
10654: ARRAY
10655: PUSH
10656: LD_INT 1
10658: NEG
10659: GREATER
10660: PUSH
10661: LD_LOC 16
10665: PUSH
10666: LD_VAR 0 2
10670: ARRAY
10671: PPUSH
10672: CALL_OW 300
10676: AND
10677: IFFALSE 10710
// ExtraStrings = ExtraStrings ^ [ #godawoken , x , x ] else
10679: LD_ADDR_EXP 59
10683: PUSH
10684: LD_EXP 59
10688: PUSH
10689: LD_STRING #godawoken
10691: PUSH
10692: LD_VAR 0 2
10696: PUSH
10697: LD_VAR 0 2
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: LIST
10706: ADD
10707: ST_TO_ADDR
10708: GO 10820
// if ( BloodGods [ x ] > - 1 ) and ( IsDead ( BloodGods [ x ] ) ) then
10710: LD_LOC 16
10714: PUSH
10715: LD_VAR 0 2
10719: ARRAY
10720: PUSH
10721: LD_INT 1
10723: NEG
10724: GREATER
10725: PUSH
10726: LD_LOC 16
10730: PUSH
10731: LD_VAR 0 2
10735: ARRAY
10736: PPUSH
10737: CALL_OW 301
10741: AND
10742: IFFALSE 10775
// ExtraStrings = ExtraStrings ^ [ #goddied , x , x ] else
10744: LD_ADDR_EXP 59
10748: PUSH
10749: LD_EXP 59
10753: PUSH
10754: LD_STRING #goddied
10756: PUSH
10757: LD_VAR 0 2
10761: PUSH
10762: LD_VAR 0 2
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: LIST
10771: ADD
10772: ST_TO_ADDR
10773: GO 10820
// ExtraStrings = ExtraStrings ^ [ #godssacrifise , x , x , BloodGods_CurrentKills [ x ] , 6 ] end ;
10775: LD_ADDR_EXP 59
10779: PUSH
10780: LD_EXP 59
10784: PUSH
10785: LD_STRING #godssacrifise
10787: PUSH
10788: LD_VAR 0 2
10792: PUSH
10793: LD_VAR 0 2
10797: PUSH
10798: LD_LOC 18
10802: PUSH
10803: LD_VAR 0 2
10807: ARRAY
10808: PUSH
10809: LD_INT 6
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: ADD
10819: ST_TO_ADDR
10820: GO 10588
10822: POP
10823: POP
// end ;
10824: LD_VAR 0 1
10828: RET
// export function InitBloodGods ; begin
10829: LD_INT 0
10831: PPUSH
// BloodGods = [ - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 ] ;
10832: LD_ADDR_LOC 16
10836: PUSH
10837: LD_INT 1
10839: NEG
10840: PUSH
10841: LD_INT 1
10843: NEG
10844: PUSH
10845: LD_INT 1
10847: NEG
10848: PUSH
10849: LD_INT 1
10851: NEG
10852: PUSH
10853: LD_INT 1
10855: NEG
10856: PUSH
10857: LD_INT 1
10859: NEG
10860: PUSH
10861: LD_INT 1
10863: NEG
10864: PUSH
10865: LD_INT 1
10867: NEG
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: ST_TO_ADDR
// BloodGods_LastKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10879: LD_ADDR_LOC 17
10883: PUSH
10884: LD_INT 0
10886: PUSH
10887: LD_INT 0
10889: PUSH
10890: LD_INT 0
10892: PUSH
10893: LD_INT 0
10895: PUSH
10896: LD_INT 0
10898: PUSH
10899: LD_INT 0
10901: PUSH
10902: LD_INT 0
10904: PUSH
10905: LD_INT 0
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: ST_TO_ADDR
// BloodGods_CurrentKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10918: LD_ADDR_LOC 18
10922: PUSH
10923: LD_INT 0
10925: PUSH
10926: LD_INT 0
10928: PUSH
10929: LD_INT 0
10931: PUSH
10932: LD_INT 0
10934: PUSH
10935: LD_INT 0
10937: PUSH
10938: LD_INT 0
10940: PUSH
10941: LD_INT 0
10943: PUSH
10944: LD_INT 0
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: ST_TO_ADDR
// BloodGods_Positions = [ [ 60 , 47 ] , [ 82 , 26 ] , [ 124 , 45 ] , [ 147 , 90 ] , [ 126 , 112 ] , [ 84 , 92 ] , [ 106 , 73 ] , [ 106 , 73 ] ] ;
10957: LD_ADDR_LOC 19
10961: PUSH
10962: LD_INT 60
10964: PUSH
10965: LD_INT 47
10967: PUSH
10968: EMPTY
10969: LIST
10970: LIST
10971: PUSH
10972: LD_INT 82
10974: PUSH
10975: LD_INT 26
10977: PUSH
10978: EMPTY
10979: LIST
10980: LIST
10981: PUSH
10982: LD_INT 124
10984: PUSH
10985: LD_INT 45
10987: PUSH
10988: EMPTY
10989: LIST
10990: LIST
10991: PUSH
10992: LD_INT 147
10994: PUSH
10995: LD_INT 90
10997: PUSH
10998: EMPTY
10999: LIST
11000: LIST
11001: PUSH
11002: LD_INT 126
11004: PUSH
11005: LD_INT 112
11007: PUSH
11008: EMPTY
11009: LIST
11010: LIST
11011: PUSH
11012: LD_INT 84
11014: PUSH
11015: LD_INT 92
11017: PUSH
11018: EMPTY
11019: LIST
11020: LIST
11021: PUSH
11022: LD_INT 106
11024: PUSH
11025: LD_INT 73
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: PUSH
11032: LD_INT 106
11034: PUSH
11035: LD_INT 73
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: PUSH
11042: EMPTY
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: ST_TO_ADDR
// ClearHumansKilled ;
11052: CALL_OW 516
// enable ( 200 ) ;
11056: LD_INT 200
11058: ENABLE_MARKED
// end ; end_of_file
11059: LD_VAR 0 1
11063: RET
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime , def_sheik , def_mastodont ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
11064: LD_INT 0
11066: PPUSH
11067: PPUSH
// if ( not IAmSpec ) then
11068: CALL_OW 531
11072: NOT
11073: IFFALSE 11089
// Result := Limits_Info ^  ;
11075: LD_ADDR_VAR 0 1
11079: PUSH
11080: LD_LOC 27
11084: PUSH
11085: LD_STRING 
11087: ADD
11088: ST_TO_ADDR
// for i := 1 to 8 do
11089: LD_ADDR_VAR 0 2
11093: PUSH
11094: DOUBLE
11095: LD_INT 1
11097: DEC
11098: ST_TO_ADDR
11099: LD_INT 8
11101: PUSH
11102: FOR_TO
11103: IFFALSE 11148
// if Cheaters [ i ] then
11105: LD_LOC 28
11109: PUSH
11110: LD_VAR 0 2
11114: ARRAY
11115: IFFALSE 11146
// Result := Result ^ [ #Cheater , i , i ] ;
11117: LD_ADDR_VAR 0 1
11121: PUSH
11122: LD_VAR 0 1
11126: PUSH
11127: LD_STRING #Cheater
11129: PUSH
11130: LD_VAR 0 2
11134: PUSH
11135: LD_VAR 0 2
11139: PUSH
11140: EMPTY
11141: LIST
11142: LIST
11143: LIST
11144: ADD
11145: ST_TO_ADDR
11146: GO 11102
11148: POP
11149: POP
// end ;
11150: LD_VAR 0 1
11154: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
11155: LD_INT 0
11157: PPUSH
11158: PPUSH
11159: PPUSH
11160: PPUSH
11161: PPUSH
// case Game_Type of 10 :
11162: LD_EXP 40
11166: PUSH
11167: LD_INT 10
11169: DOUBLE
11170: EQUAL
11171: IFTRUE 11175
11173: GO 11186
11175: POP
// def_game_rules := 1 ; 11 :
11176: LD_ADDR_EXP 41
11180: PUSH
11181: LD_INT 1
11183: ST_TO_ADDR
11184: GO 11206
11186: LD_INT 11
11188: DOUBLE
11189: EQUAL
11190: IFTRUE 11194
11192: GO 11205
11194: POP
// def_game_rules := 3 ; end ;
11195: LD_ADDR_EXP 41
11199: PUSH
11200: LD_INT 3
11202: ST_TO_ADDR
11203: GO 11206
11205: POP
// case def_game_rules of 0 :
11206: LD_EXP 41
11210: PUSH
11211: LD_INT 0
11213: DOUBLE
11214: EQUAL
11215: IFTRUE 11219
11217: GO 11224
11219: POP
// exit ; 1 :
11220: GO 13282
11222: GO 13182
11224: LD_INT 1
11226: DOUBLE
11227: EQUAL
11228: IFTRUE 11232
11230: GO 11448
11232: POP
// begin def_base_level := 2 ;
11233: LD_ADDR_EXP 42
11237: PUSH
11238: LD_INT 2
11240: ST_TO_ADDR
// def_amount_of_people := 2 ;
11241: LD_ADDR_EXP 43
11245: PUSH
11246: LD_INT 2
11248: ST_TO_ADDR
// def_skill_level := 1 ;
11249: LD_ADDR_EXP 44
11253: PUSH
11254: LD_INT 1
11256: ST_TO_ADDR
// def_starting_resources := 2 ;
11257: LD_ADDR_EXP 45
11261: PUSH
11262: LD_INT 2
11264: ST_TO_ADDR
// def_shipments_density := 1 ;
11265: LD_ADDR_EXP 46
11269: PUSH
11270: LD_INT 1
11272: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11273: LD_ADDR_EXP 47
11277: PUSH
11278: LD_INT 0
11280: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
11281: LD_ADDR_EXP 48
11285: PUSH
11286: LD_INT 1
11288: ST_TO_ADDR
// def_shared_vision := 1 ;
11289: LD_ADDR_EXP 49
11293: PUSH
11294: LD_INT 1
11296: ST_TO_ADDR
// def_morale_flags := 3 ;
11297: LD_ADDR_EXP 50
11301: PUSH
11302: LD_INT 3
11304: ST_TO_ADDR
// def_siberite_detection := 1 ;
11305: LD_ADDR_EXP 51
11309: PUSH
11310: LD_INT 1
11312: ST_TO_ADDR
// def_people_respawning := 1 ;
11313: LD_ADDR_EXP 52
11317: PUSH
11318: LD_INT 1
11320: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
11321: LD_ADDR_EXP 53
11325: PUSH
11326: LD_INT 1
11328: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11329: LD_ADDR_EXP 54
11333: PUSH
11334: LD_INT 0
11336: ST_TO_ADDR
// def_builduptime := 2 ;
11337: LD_ADDR_EXP 55
11341: PUSH
11342: LD_INT 2
11344: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
11345: LD_ADDR_VAR 0 2
11349: PUSH
11350: EMPTY
11351: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
11352: LD_ADDR_VAR 0 3
11356: PUSH
11357: EMPTY
11358: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11359: LD_ADDR_LOC 22
11363: PUSH
11364: EMPTY
11365: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11366: LD_ADDR_LOC 23
11370: PUSH
11371: EMPTY
11372: ST_TO_ADDR
// Banned_Controls := [ ] ;
11373: LD_ADDR_LOC 24
11377: PUSH
11378: EMPTY
11379: ST_TO_ADDR
// Banned_Engines := [ ] ;
11380: LD_ADDR_LOC 25
11384: PUSH
11385: EMPTY
11386: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
11387: LD_ADDR_LOC 20
11391: PUSH
11392: LD_INT 37
11394: PUSH
11395: EMPTY
11396: LIST
11397: PUSH
11398: LD_INT 4
11400: PUSH
11401: LD_INT 5
11403: PUSH
11404: EMPTY
11405: LIST
11406: LIST
11407: PUSH
11408: LD_INT 31
11410: PUSH
11411: LD_INT 32
11413: PUSH
11414: LD_INT 33
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: LIST
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: LIST
11426: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
11427: LD_ADDR_LOC 21
11431: PUSH
11432: LD_INT 2
11434: PUSH
11435: LD_INT 2
11437: PUSH
11438: LD_INT 4
11440: PUSH
11441: EMPTY
11442: LIST
11443: LIST
11444: LIST
11445: ST_TO_ADDR
// end ; 2 :
11446: GO 13182
11448: LD_INT 2
11450: DOUBLE
11451: EQUAL
11452: IFTRUE 11456
11454: GO 11665
11456: POP
// begin def_base_level := 1 ;
11457: LD_ADDR_EXP 42
11461: PUSH
11462: LD_INT 1
11464: ST_TO_ADDR
// def_amount_of_people := 2 ;
11465: LD_ADDR_EXP 43
11469: PUSH
11470: LD_INT 2
11472: ST_TO_ADDR
// def_skill_level := 3 ;
11473: LD_ADDR_EXP 44
11477: PUSH
11478: LD_INT 3
11480: ST_TO_ADDR
// def_starting_resources := 3 ;
11481: LD_ADDR_EXP 45
11485: PUSH
11486: LD_INT 3
11488: ST_TO_ADDR
// def_shipments_density := 2 ;
11489: LD_ADDR_EXP 46
11493: PUSH
11494: LD_INT 2
11496: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
11497: LD_ADDR_EXP 47
11501: PUSH
11502: LD_INT 1
11504: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
11505: LD_ADDR_EXP 48
11509: PUSH
11510: LD_INT 2
11512: ST_TO_ADDR
// def_shared_vision := 1 ;
11513: LD_ADDR_EXP 49
11517: PUSH
11518: LD_INT 1
11520: ST_TO_ADDR
// def_morale_flags := 0 ;
11521: LD_ADDR_EXP 50
11525: PUSH
11526: LD_INT 0
11528: ST_TO_ADDR
// def_siberite_detection := 1 ;
11529: LD_ADDR_EXP 51
11533: PUSH
11534: LD_INT 1
11536: ST_TO_ADDR
// def_people_respawning := 0 ;
11537: LD_ADDR_EXP 52
11541: PUSH
11542: LD_INT 0
11544: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
11545: LD_ADDR_EXP 53
11549: PUSH
11550: LD_INT 0
11552: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11553: LD_ADDR_EXP 54
11557: PUSH
11558: LD_INT 0
11560: ST_TO_ADDR
// def_builduptime := 2 ;
11561: LD_ADDR_EXP 55
11565: PUSH
11566: LD_INT 2
11568: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
11569: LD_ADDR_VAR 0 2
11573: PUSH
11574: LD_INT 1
11576: PUSH
11577: EMPTY
11578: LIST
11579: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
11580: LD_ADDR_VAR 0 3
11584: PUSH
11585: EMPTY
11586: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11587: LD_ADDR_LOC 22
11591: PUSH
11592: EMPTY
11593: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11594: LD_ADDR_LOC 23
11598: PUSH
11599: EMPTY
11600: ST_TO_ADDR
// Banned_Controls := [ ] ;
11601: LD_ADDR_LOC 24
11605: PUSH
11606: EMPTY
11607: ST_TO_ADDR
// Banned_Engines := [ ] ;
11608: LD_ADDR_LOC 25
11612: PUSH
11613: EMPTY
11614: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
11615: LD_ADDR_LOC 20
11619: PUSH
11620: LD_INT 4
11622: PUSH
11623: LD_INT 5
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: PUSH
11630: LD_INT 31
11632: PUSH
11633: LD_INT 32
11635: PUSH
11636: LD_INT 33
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: LIST
11643: PUSH
11644: EMPTY
11645: LIST
11646: LIST
11647: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
11648: LD_ADDR_LOC 21
11652: PUSH
11653: LD_INT 1
11655: PUSH
11656: LD_INT 2
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: ST_TO_ADDR
// end ; 3 :
11663: GO 13182
11665: LD_INT 3
11667: DOUBLE
11668: EQUAL
11669: IFTRUE 11673
11671: GO 11916
11673: POP
// begin def_base_level := 1 ;
11674: LD_ADDR_EXP 42
11678: PUSH
11679: LD_INT 1
11681: ST_TO_ADDR
// def_amount_of_people := 2 ;
11682: LD_ADDR_EXP 43
11686: PUSH
11687: LD_INT 2
11689: ST_TO_ADDR
// def_skill_level := 3 ;
11690: LD_ADDR_EXP 44
11694: PUSH
11695: LD_INT 3
11697: ST_TO_ADDR
// def_starting_resources := 3 ;
11698: LD_ADDR_EXP 45
11702: PUSH
11703: LD_INT 3
11705: ST_TO_ADDR
// def_shipments_density := 1 ;
11706: LD_ADDR_EXP 46
11710: PUSH
11711: LD_INT 1
11713: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11714: LD_ADDR_EXP 47
11718: PUSH
11719: LD_INT 0
11721: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
11722: LD_ADDR_EXP 48
11726: PUSH
11727: LD_INT 1
11729: ST_TO_ADDR
// def_shared_vision := 1 ;
11730: LD_ADDR_EXP 49
11734: PUSH
11735: LD_INT 1
11737: ST_TO_ADDR
// def_morale_flags := 0 ;
11738: LD_ADDR_EXP 50
11742: PUSH
11743: LD_INT 0
11745: ST_TO_ADDR
// def_siberite_detection := 1 ;
11746: LD_ADDR_EXP 51
11750: PUSH
11751: LD_INT 1
11753: ST_TO_ADDR
// def_people_respawning := 0 ;
11754: LD_ADDR_EXP 52
11758: PUSH
11759: LD_INT 0
11761: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
11762: LD_ADDR_EXP 53
11766: PUSH
11767: LD_INT 2
11769: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11770: LD_ADDR_EXP 54
11774: PUSH
11775: LD_INT 0
11777: ST_TO_ADDR
// def_builduptime := 1 ;
11778: LD_ADDR_EXP 55
11782: PUSH
11783: LD_INT 1
11785: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
11786: LD_ADDR_VAR 0 2
11790: PUSH
11791: LD_INT 23
11793: PUSH
11794: EMPTY
11795: LIST
11796: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
11797: LD_ADDR_VAR 0 3
11801: PUSH
11802: LD_INT 2
11804: PUSH
11805: LD_INT 37
11807: PUSH
11808: LD_INT 32
11810: PUSH
11811: LD_INT 33
11813: PUSH
11814: LD_INT 36
11816: PUSH
11817: LD_INT 16
11819: PUSH
11820: LD_INT 23
11822: PUSH
11823: LD_INT 21
11825: PUSH
11826: LD_INT 18
11828: PUSH
11829: LD_INT 22
11831: PUSH
11832: LD_INT 20
11834: PUSH
11835: LD_INT 19
11837: PUSH
11838: LD_INT 25
11840: PUSH
11841: LD_INT 17
11843: PUSH
11844: LD_INT 24
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11864: LD_ADDR_LOC 22
11868: PUSH
11869: EMPTY
11870: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11871: LD_ADDR_LOC 23
11875: PUSH
11876: EMPTY
11877: ST_TO_ADDR
// Banned_Controls := [ ] ;
11878: LD_ADDR_LOC 24
11882: PUSH
11883: EMPTY
11884: ST_TO_ADDR
// Banned_Engines := [ ] ;
11885: LD_ADDR_LOC 25
11889: PUSH
11890: EMPTY
11891: ST_TO_ADDR
// Restricted_Builds := [ ] ;
11892: LD_ADDR_LOC 20
11896: PUSH
11897: EMPTY
11898: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
11899: LD_ADDR_LOC 21
11903: PUSH
11904: EMPTY
11905: ST_TO_ADDR
// No_Mechs := true ;
11906: LD_ADDR_EXP 58
11910: PUSH
11911: LD_INT 1
11913: ST_TO_ADDR
// end ; 4 :
11914: GO 13182
11916: LD_INT 4
11918: DOUBLE
11919: EQUAL
11920: IFTRUE 11924
11922: GO 12099
11924: POP
// begin def_base_level := 1 ;
11925: LD_ADDR_EXP 42
11929: PUSH
11930: LD_INT 1
11932: ST_TO_ADDR
// def_amount_of_people := 2 ;
11933: LD_ADDR_EXP 43
11937: PUSH
11938: LD_INT 2
11940: ST_TO_ADDR
// def_skill_level := 3 ;
11941: LD_ADDR_EXP 44
11945: PUSH
11946: LD_INT 3
11948: ST_TO_ADDR
// def_starting_resources := 3 ;
11949: LD_ADDR_EXP 45
11953: PUSH
11954: LD_INT 3
11956: ST_TO_ADDR
// def_shipments_density := 2 ;
11957: LD_ADDR_EXP 46
11961: PUSH
11962: LD_INT 2
11964: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
11965: LD_ADDR_EXP 47
11969: PUSH
11970: LD_INT 1
11972: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
11973: LD_ADDR_EXP 48
11977: PUSH
11978: LD_INT 2
11980: ST_TO_ADDR
// def_shared_vision := 1 ;
11981: LD_ADDR_EXP 49
11985: PUSH
11986: LD_INT 1
11988: ST_TO_ADDR
// def_morale_flags := 0 ;
11989: LD_ADDR_EXP 50
11993: PUSH
11994: LD_INT 0
11996: ST_TO_ADDR
// def_siberite_detection := 1 ;
11997: LD_ADDR_EXP 51
12001: PUSH
12002: LD_INT 1
12004: ST_TO_ADDR
// def_people_respawning := 0 ;
12005: LD_ADDR_EXP 52
12009: PUSH
12010: LD_INT 0
12012: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
12013: LD_ADDR_EXP 53
12017: PUSH
12018: LD_INT 0
12020: ST_TO_ADDR
// def_siberite_bomb := 1 ;
12021: LD_ADDR_EXP 54
12025: PUSH
12026: LD_INT 1
12028: ST_TO_ADDR
// def_builduptime := 3 ;
12029: LD_ADDR_EXP 55
12033: PUSH
12034: LD_INT 3
12036: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
12037: LD_ADDR_VAR 0 2
12041: PUSH
12042: LD_INT 1
12044: PUSH
12045: EMPTY
12046: LIST
12047: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
12048: LD_ADDR_VAR 0 3
12052: PUSH
12053: EMPTY
12054: ST_TO_ADDR
// Banned_Weapons := [ ] ;
12055: LD_ADDR_LOC 22
12059: PUSH
12060: EMPTY
12061: ST_TO_ADDR
// Banned_Chassis := [ ] ;
12062: LD_ADDR_LOC 23
12066: PUSH
12067: EMPTY
12068: ST_TO_ADDR
// Banned_Controls := [ ] ;
12069: LD_ADDR_LOC 24
12073: PUSH
12074: EMPTY
12075: ST_TO_ADDR
// Banned_Engines := [ ] ;
12076: LD_ADDR_LOC 25
12080: PUSH
12081: EMPTY
12082: ST_TO_ADDR
// Restricted_Builds := [ ] ;
12083: LD_ADDR_LOC 20
12087: PUSH
12088: EMPTY
12089: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
12090: LD_ADDR_LOC 21
12094: PUSH
12095: EMPTY
12096: ST_TO_ADDR
// end ; 5 :
12097: GO 13182
12099: LD_INT 5
12101: DOUBLE
12102: EQUAL
12103: IFTRUE 12107
12105: GO 12356
12107: POP
// begin def_base_level := 0 ;
12108: LD_ADDR_EXP 42
12112: PUSH
12113: LD_INT 0
12115: ST_TO_ADDR
// def_amount_of_people := 0 ;
12116: LD_ADDR_EXP 43
12120: PUSH
12121: LD_INT 0
12123: ST_TO_ADDR
// def_skill_level := 0 ;
12124: LD_ADDR_EXP 44
12128: PUSH
12129: LD_INT 0
12131: ST_TO_ADDR
// def_starting_resources := 0 ;
12132: LD_ADDR_EXP 45
12136: PUSH
12137: LD_INT 0
12139: ST_TO_ADDR
// def_shipments_density := 0 ;
12140: LD_ADDR_EXP 46
12144: PUSH
12145: LD_INT 0
12147: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
12148: LD_ADDR_EXP 47
12152: PUSH
12153: LD_INT 0
12155: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
12156: LD_ADDR_EXP 48
12160: PUSH
12161: LD_INT 0
12163: ST_TO_ADDR
// def_shared_vision := 1 ;
12164: LD_ADDR_EXP 49
12168: PUSH
12169: LD_INT 1
12171: ST_TO_ADDR
// def_morale_flags := 0 ;
12172: LD_ADDR_EXP 50
12176: PUSH
12177: LD_INT 0
12179: ST_TO_ADDR
// def_siberite_detection := 0 ;
12180: LD_ADDR_EXP 51
12184: PUSH
12185: LD_INT 0
12187: ST_TO_ADDR
// def_people_respawning := 1 ;
12188: LD_ADDR_EXP 52
12192: PUSH
12193: LD_INT 1
12195: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
12196: LD_ADDR_EXP 53
12200: PUSH
12201: LD_INT 1
12203: ST_TO_ADDR
// def_siberite_bomb := 0 ;
12204: LD_ADDR_EXP 54
12208: PUSH
12209: LD_INT 0
12211: ST_TO_ADDR
// def_builduptime := 0 ;
12212: LD_ADDR_EXP 55
12216: PUSH
12217: LD_INT 0
12219: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
12220: LD_ADDR_VAR 0 2
12224: PUSH
12225: LD_INT 10
12227: PUSH
12228: LD_INT 3
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
12235: LD_ADDR_VAR 0 3
12239: PUSH
12240: LD_INT 12
12242: PUSH
12243: LD_INT 11
12245: PUSH
12246: LD_INT 14
12248: PUSH
12249: LD_INT 13
12251: PUSH
12252: LD_INT 5
12254: PUSH
12255: LD_INT 24
12257: PUSH
12258: LD_INT 21
12260: PUSH
12261: LD_INT 33
12263: PUSH
12264: LD_INT 36
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
12278: LD_ADDR_LOC 22
12282: PUSH
12283: LD_INT 31
12285: PUSH
12286: EMPTY
12287: LIST
12288: ST_TO_ADDR
// Banned_Chassis := [ ] ;
12289: LD_ADDR_LOC 23
12293: PUSH
12294: EMPTY
12295: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
12296: LD_ADDR_LOC 24
12300: PUSH
12301: LD_INT 2
12303: PUSH
12304: EMPTY
12305: LIST
12306: ST_TO_ADDR
// Banned_Engines := [ ] ;
12307: LD_ADDR_LOC 25
12311: PUSH
12312: EMPTY
12313: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
12314: LD_ADDR_LOC 20
12318: PUSH
12319: LD_INT 4
12321: PUSH
12322: EMPTY
12323: LIST
12324: PUSH
12325: LD_INT 31
12327: PUSH
12328: LD_INT 32
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
12339: LD_ADDR_LOC 21
12343: PUSH
12344: LD_INT 1
12346: PUSH
12347: LD_INT 1
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: ST_TO_ADDR
// end ; 6 :
12354: GO 13182
12356: LD_INT 6
12358: DOUBLE
12359: EQUAL
12360: IFTRUE 12364
12362: GO 12567
12364: POP
// begin def_base_level := 1 ;
12365: LD_ADDR_EXP 42
12369: PUSH
12370: LD_INT 1
12372: ST_TO_ADDR
// def_amount_of_people := 2 ;
12373: LD_ADDR_EXP 43
12377: PUSH
12378: LD_INT 2
12380: ST_TO_ADDR
// def_skill_level := 3 ;
12381: LD_ADDR_EXP 44
12385: PUSH
12386: LD_INT 3
12388: ST_TO_ADDR
// def_starting_resources := 3 ;
12389: LD_ADDR_EXP 45
12393: PUSH
12394: LD_INT 3
12396: ST_TO_ADDR
// def_shipments_density := 1 ;
12397: LD_ADDR_EXP 46
12401: PUSH
12402: LD_INT 1
12404: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
12405: LD_ADDR_EXP 47
12409: PUSH
12410: LD_INT 0
12412: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
12413: LD_ADDR_EXP 48
12417: PUSH
12418: LD_INT 1
12420: ST_TO_ADDR
// def_shared_vision := 1 ;
12421: LD_ADDR_EXP 49
12425: PUSH
12426: LD_INT 1
12428: ST_TO_ADDR
// def_morale_flags := 0 ;
12429: LD_ADDR_EXP 50
12433: PUSH
12434: LD_INT 0
12436: ST_TO_ADDR
// def_siberite_detection := 1 ;
12437: LD_ADDR_EXP 51
12441: PUSH
12442: LD_INT 1
12444: ST_TO_ADDR
// def_people_respawning := 2 ;
12445: LD_ADDR_EXP 52
12449: PUSH
12450: LD_INT 2
12452: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
12453: LD_ADDR_EXP 53
12457: PUSH
12458: LD_INT 1
12460: ST_TO_ADDR
// def_siberite_bomb := 0 ;
12461: LD_ADDR_EXP 54
12465: PUSH
12466: LD_INT 0
12468: ST_TO_ADDR
// def_builduptime := 1 ;
12469: LD_ADDR_EXP 55
12473: PUSH
12474: LD_INT 1
12476: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
12477: LD_ADDR_VAR 0 2
12481: PUSH
12482: LD_INT 23
12484: PUSH
12485: EMPTY
12486: LIST
12487: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
12488: LD_ADDR_VAR 0 3
12492: PUSH
12493: LD_INT 2
12495: PUSH
12496: LD_INT 37
12498: PUSH
12499: LD_INT 31
12501: PUSH
12502: LD_INT 32
12504: PUSH
12505: LD_INT 33
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: ST_TO_ADDR
// Banned_Weapons := [ ] ;
12515: LD_ADDR_LOC 22
12519: PUSH
12520: EMPTY
12521: ST_TO_ADDR
// Banned_Chassis := [ ] ;
12522: LD_ADDR_LOC 23
12526: PUSH
12527: EMPTY
12528: ST_TO_ADDR
// Banned_Controls := [ ] ;
12529: LD_ADDR_LOC 24
12533: PUSH
12534: EMPTY
12535: ST_TO_ADDR
// Banned_Engines := [ ] ;
12536: LD_ADDR_LOC 25
12540: PUSH
12541: EMPTY
12542: ST_TO_ADDR
// Restricted_Builds := [ ] ;
12543: LD_ADDR_LOC 20
12547: PUSH
12548: EMPTY
12549: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
12550: LD_ADDR_LOC 21
12554: PUSH
12555: EMPTY
12556: ST_TO_ADDR
// No_Mechs := true ;
12557: LD_ADDR_EXP 58
12561: PUSH
12562: LD_INT 1
12564: ST_TO_ADDR
// end ; 7 :
12565: GO 13182
12567: LD_INT 7
12569: DOUBLE
12570: EQUAL
12571: IFTRUE 12575
12573: GO 12773
12575: POP
// begin def_base_level := 1 ;
12576: LD_ADDR_EXP 42
12580: PUSH
12581: LD_INT 1
12583: ST_TO_ADDR
// def_amount_of_people := 2 ;
12584: LD_ADDR_EXP 43
12588: PUSH
12589: LD_INT 2
12591: ST_TO_ADDR
// def_skill_level := 3 ;
12592: LD_ADDR_EXP 44
12596: PUSH
12597: LD_INT 3
12599: ST_TO_ADDR
// def_starting_resources := 3 ;
12600: LD_ADDR_EXP 45
12604: PUSH
12605: LD_INT 3
12607: ST_TO_ADDR
// def_shipments_density := 1 ;
12608: LD_ADDR_EXP 46
12612: PUSH
12613: LD_INT 1
12615: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
12616: LD_ADDR_EXP 47
12620: PUSH
12621: LD_INT 1
12623: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
12624: LD_ADDR_EXP 48
12628: PUSH
12629: LD_INT 2
12631: ST_TO_ADDR
// def_shared_vision := 1 ;
12632: LD_ADDR_EXP 49
12636: PUSH
12637: LD_INT 1
12639: ST_TO_ADDR
// def_morale_flags := 0 ;
12640: LD_ADDR_EXP 50
12644: PUSH
12645: LD_INT 0
12647: ST_TO_ADDR
// def_siberite_detection := 1 ;
12648: LD_ADDR_EXP 51
12652: PUSH
12653: LD_INT 1
12655: ST_TO_ADDR
// def_people_respawning := 0 ;
12656: LD_ADDR_EXP 52
12660: PUSH
12661: LD_INT 0
12663: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
12664: LD_ADDR_EXP 53
12668: PUSH
12669: LD_INT 1
12671: ST_TO_ADDR
// def_siberite_bomb := 0 ;
12672: LD_ADDR_EXP 54
12676: PUSH
12677: LD_INT 0
12679: ST_TO_ADDR
// def_builduptime := 3 ;
12680: LD_ADDR_EXP 55
12684: PUSH
12685: LD_INT 3
12687: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
12688: LD_ADDR_VAR 0 2
12692: PUSH
12693: LD_INT 23
12695: PUSH
12696: EMPTY
12697: LIST
12698: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
12699: LD_ADDR_VAR 0 3
12703: PUSH
12704: LD_INT 37
12706: PUSH
12707: EMPTY
12708: LIST
12709: ST_TO_ADDR
// Banned_Weapons := [ ] ;
12710: LD_ADDR_LOC 22
12714: PUSH
12715: EMPTY
12716: ST_TO_ADDR
// Banned_Chassis := [ ] ;
12717: LD_ADDR_LOC 23
12721: PUSH
12722: EMPTY
12723: ST_TO_ADDR
// Banned_Controls := [ ] ;
12724: LD_ADDR_LOC 24
12728: PUSH
12729: EMPTY
12730: ST_TO_ADDR
// Banned_Engines := [ ] ;
12731: LD_ADDR_LOC 25
12735: PUSH
12736: EMPTY
12737: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
12738: LD_ADDR_LOC 20
12742: PUSH
12743: LD_INT 31
12745: PUSH
12746: LD_INT 32
12748: PUSH
12749: LD_INT 33
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: LIST
12756: PUSH
12757: EMPTY
12758: LIST
12759: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
12760: LD_ADDR_LOC 21
12764: PUSH
12765: LD_INT 10
12767: PUSH
12768: EMPTY
12769: LIST
12770: ST_TO_ADDR
// end ; 8 :
12771: GO 13182
12773: LD_INT 8
12775: DOUBLE
12776: EQUAL
12777: IFTRUE 12781
12779: GO 13181
12781: POP
// begin def_base_level := 0 ;
12782: LD_ADDR_EXP 42
12786: PUSH
12787: LD_INT 0
12789: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
12790: LD_ADDR_EXP 43
12794: PUSH
12795: LD_INT 0
12797: PPUSH
12798: LD_INT 1
12800: PPUSH
12801: CALL_OW 12
12805: ST_TO_ADDR
// def_skill_level := 0 ;
12806: LD_ADDR_EXP 44
12810: PUSH
12811: LD_INT 0
12813: ST_TO_ADDR
// def_starting_resources := 2 ;
12814: LD_ADDR_EXP 45
12818: PUSH
12819: LD_INT 2
12821: ST_TO_ADDR
// def_shipments_density := 1 ;
12822: LD_ADDR_EXP 46
12826: PUSH
12827: LD_INT 1
12829: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
12830: LD_ADDR_EXP 47
12834: PUSH
12835: LD_INT 0
12837: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
12838: LD_ADDR_EXP 48
12842: PUSH
12843: LD_INT 0
12845: ST_TO_ADDR
// def_shared_vision := 1 ;
12846: LD_ADDR_EXP 49
12850: PUSH
12851: LD_INT 1
12853: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
12854: LD_ADDR_EXP 50
12858: PUSH
12859: LD_INT 0
12861: PPUSH
12862: LD_INT 2
12864: PPUSH
12865: CALL_OW 12
12869: ST_TO_ADDR
// def_siberite_detection := 0 ;
12870: LD_ADDR_EXP 51
12874: PUSH
12875: LD_INT 0
12877: ST_TO_ADDR
// def_people_respawning := 0 ;
12878: LD_ADDR_EXP 52
12882: PUSH
12883: LD_INT 0
12885: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
12886: LD_ADDR_EXP 53
12890: PUSH
12891: LD_INT 2
12893: ST_TO_ADDR
// def_siberite_bomb := 0 ;
12894: LD_ADDR_EXP 54
12898: PUSH
12899: LD_INT 0
12901: ST_TO_ADDR
// def_builduptime := 0 ;
12902: LD_ADDR_EXP 55
12906: PUSH
12907: LD_INT 0
12909: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
12910: LD_ADDR_VAR 0 2
12914: PUSH
12915: LD_INT 23
12917: PUSH
12918: LD_INT 20
12920: PUSH
12921: LD_INT 40
12923: PUSH
12924: LD_INT 47
12926: PUSH
12927: LD_INT 46
12929: PUSH
12930: LD_INT 39
12932: PUSH
12933: LD_INT 71
12935: PUSH
12936: LD_INT 34
12938: PUSH
12939: LD_INT 41
12941: PUSH
12942: LD_INT 44
12944: PUSH
12945: LD_INT 17
12947: PUSH
12948: LD_INT 16
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
12965: LD_ADDR_VAR 0 3
12969: PUSH
12970: LD_INT 37
12972: PUSH
12973: LD_INT 5
12975: PUSH
12976: LD_INT 13
12978: PUSH
12979: LD_INT 34
12981: PUSH
12982: LD_INT 12
12984: PUSH
12985: LD_INT 15
12987: PUSH
12988: LD_INT 11
12990: PUSH
12991: LD_INT 14
12993: PUSH
12994: LD_INT 29
12996: PUSH
12997: LD_INT 30
12999: PUSH
13000: LD_INT 28
13002: PUSH
13003: LD_INT 24
13005: PUSH
13006: LD_INT 25
13008: PUSH
13009: LD_INT 20
13011: PUSH
13012: LD_INT 21
13014: PUSH
13015: LD_INT 22
13017: PUSH
13018: LD_INT 36
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13040: LD_ADDR_LOC 22
13044: PUSH
13045: EMPTY
13046: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
13047: LD_ADDR_LOC 23
13051: PUSH
13052: LD_INT 14
13054: PUSH
13055: EMPTY
13056: LIST
13057: ST_TO_ADDR
// Banned_Controls := [ ] ;
13058: LD_ADDR_LOC 24
13062: PUSH
13063: EMPTY
13064: ST_TO_ADDR
// Banned_Engines := [ ] ;
13065: LD_ADDR_LOC 25
13069: PUSH
13070: EMPTY
13071: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
13072: LD_ADDR_LOC 20
13076: PUSH
13077: LD_INT 31
13079: PUSH
13080: LD_INT 32
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: PUSH
13087: LD_INT 4
13089: PUSH
13090: EMPTY
13091: LIST
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
13097: LD_ADDR_LOC 21
13101: PUSH
13102: LD_INT 2
13104: PUSH
13105: LD_INT 1
13107: PUSH
13108: EMPTY
13109: LIST
13110: LIST
13111: ST_TO_ADDR
// for i := 1 to 8 do
13112: LD_ADDR_VAR 0 4
13116: PUSH
13117: DOUBLE
13118: LD_INT 1
13120: DEC
13121: ST_TO_ADDR
13122: LD_INT 8
13124: PUSH
13125: FOR_TO
13126: IFFALSE 13177
// if ( Side_Nations [ i ] = 3 ) then
13128: LD_EXP 19
13132: PUSH
13133: LD_VAR 0 4
13137: ARRAY
13138: PUSH
13139: LD_INT 3
13141: EQUAL
13142: IFFALSE 13175
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
13144: LD_ADDR_EXP 19
13148: PUSH
13149: LD_EXP 19
13153: PPUSH
13154: LD_VAR 0 4
13158: PPUSH
13159: LD_INT 1
13161: PPUSH
13162: LD_INT 2
13164: PPUSH
13165: CALL_OW 12
13169: PPUSH
13170: CALL_OW 1
13174: ST_TO_ADDR
13175: GO 13125
13177: POP
13178: POP
// end ; end ;
13179: GO 13182
13181: POP
// for i := 1 to 8 do
13182: LD_ADDR_VAR 0 4
13186: PUSH
13187: DOUBLE
13188: LD_INT 1
13190: DEC
13191: ST_TO_ADDR
13192: LD_INT 8
13194: PUSH
13195: FOR_TO
13196: IFFALSE 13280
// if Side_Positions [ i ] then
13198: LD_EXP 18
13202: PUSH
13203: LD_VAR 0 4
13207: ARRAY
13208: IFFALSE 13278
// begin for j in Unavailable_Techs do
13210: LD_ADDR_VAR 0 5
13214: PUSH
13215: LD_VAR 0 2
13219: PUSH
13220: FOR_IN
13221: IFFALSE 13242
// SetTech ( j , i , 0 ) ;
13223: LD_VAR 0 5
13227: PPUSH
13228: LD_VAR 0 4
13232: PPUSH
13233: LD_INT 0
13235: PPUSH
13236: CALL_OW 322
13240: GO 13220
13242: POP
13243: POP
// for j in Unavailable_Builds do
13244: LD_ADDR_VAR 0 5
13248: PUSH
13249: LD_VAR 0 3
13253: PUSH
13254: FOR_IN
13255: IFFALSE 13276
// SetRestrict ( j , i , 0 ) ;
13257: LD_VAR 0 5
13261: PPUSH
13262: LD_VAR 0 4
13266: PPUSH
13267: LD_INT 0
13269: PPUSH
13270: CALL_OW 324
13274: GO 13254
13276: POP
13277: POP
// end ;
13278: GO 13195
13280: POP
13281: POP
// end ;
13282: LD_VAR 0 1
13286: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
13287: LD_INT 0
13289: PPUSH
13290: PPUSH
13291: PPUSH
13292: PPUSH
13293: PPUSH
13294: PPUSH
13295: PPUSH
// for i := 1 to Restricted_Builds do
13296: LD_ADDR_VAR 0 2
13300: PUSH
13301: DOUBLE
13302: LD_INT 1
13304: DEC
13305: ST_TO_ADDR
13306: LD_LOC 20
13310: PUSH
13311: FOR_TO
13312: IFFALSE 13622
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
13314: LD_LOC 20
13318: PUSH
13319: LD_VAR 0 2
13323: ARRAY
13324: PUSH
13325: LD_INT 1
13327: ARRAY
13328: PUSH
13329: LD_INT 31
13331: DOUBLE
13332: EQUAL
13333: IFTRUE 13349
13335: LD_INT 32
13337: DOUBLE
13338: EQUAL
13339: IFTRUE 13349
13341: LD_INT 33
13343: DOUBLE
13344: EQUAL
13345: IFTRUE 13349
13347: GO 13360
13349: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
13350: LD_ADDR_VAR 0 6
13354: PUSH
13355: LD_STRING #Turrets
13357: ST_TO_ADDR
13358: GO 13405
13360: LD_INT 4
13362: DOUBLE
13363: EQUAL
13364: IFTRUE 13374
13366: LD_INT 5
13368: DOUBLE
13369: EQUAL
13370: IFTRUE 13374
13372: GO 13385
13374: POP
// btype := #Armouries ; b_Behemoth :
13375: LD_ADDR_VAR 0 6
13379: PUSH
13380: LD_STRING #Armouries
13382: ST_TO_ADDR
13383: GO 13405
13385: LD_INT 37
13387: DOUBLE
13388: EQUAL
13389: IFTRUE 13393
13391: GO 13404
13393: POP
// btype := #Behemoths ; end ;
13394: LD_ADDR_VAR 0 6
13398: PUSH
13399: LD_STRING #Behemoths
13401: ST_TO_ADDR
13402: GO 13405
13404: POP
// list := [ ] ;
13405: LD_ADDR_VAR 0 7
13409: PUSH
13410: EMPTY
13411: ST_TO_ADDR
// for j := 1 to 8 do
13412: LD_ADDR_VAR 0 3
13416: PUSH
13417: DOUBLE
13418: LD_INT 1
13420: DEC
13421: ST_TO_ADDR
13422: LD_INT 8
13424: PUSH
13425: FOR_TO
13426: IFFALSE 13519
// if Side_Positions [ j ] then
13428: LD_EXP 18
13432: PUSH
13433: LD_VAR 0 3
13437: ARRAY
13438: IFFALSE 13517
// begin amount := 0 ;
13440: LD_ADDR_VAR 0 5
13444: PUSH
13445: LD_INT 0
13447: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
13448: LD_ADDR_VAR 0 4
13452: PUSH
13453: LD_LOC 20
13457: PUSH
13458: LD_VAR 0 2
13462: ARRAY
13463: PUSH
13464: FOR_IN
13465: IFFALSE 13513
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
13467: LD_ADDR_VAR 0 5
13471: PUSH
13472: LD_VAR 0 5
13476: PUSH
13477: LD_INT 22
13479: PUSH
13480: LD_VAR 0 3
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: PUSH
13489: LD_INT 30
13491: PUSH
13492: LD_VAR 0 4
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: PPUSH
13505: CALL_OW 69
13509: PLUS
13510: ST_TO_ADDR
13511: GO 13464
13513: POP
13514: POP
// break ;
13515: GO 13519
// end ;
13517: GO 13425
13519: POP
13520: POP
// list := [ ] ;
13521: LD_ADDR_VAR 0 7
13525: PUSH
13526: EMPTY
13527: ST_TO_ADDR
// for j := 1 to 8 do
13528: LD_ADDR_VAR 0 3
13532: PUSH
13533: DOUBLE
13534: LD_INT 1
13536: DEC
13537: ST_TO_ADDR
13538: LD_INT 8
13540: PUSH
13541: FOR_TO
13542: IFFALSE 13562
// list := list ^ amount ;
13544: LD_ADDR_VAR 0 7
13548: PUSH
13549: LD_VAR 0 7
13553: PUSH
13554: LD_VAR 0 5
13558: ADD
13559: ST_TO_ADDR
13560: GO 13541
13562: POP
13563: POP
// Already_Built := Already_Built ^ [ list ] ;
13564: LD_ADDR_LOC 26
13568: PUSH
13569: LD_LOC 26
13573: PUSH
13574: LD_VAR 0 7
13578: PUSH
13579: EMPTY
13580: LIST
13581: ADD
13582: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
13583: LD_ADDR_LOC 27
13587: PUSH
13588: LD_LOC 27
13592: PUSH
13593: LD_VAR 0 6
13597: PUSH
13598: LD_VAR 0 5
13602: PUSH
13603: LD_LOC 21
13607: PUSH
13608: LD_VAR 0 2
13612: ARRAY
13613: PUSH
13614: EMPTY
13615: LIST
13616: LIST
13617: LIST
13618: ADD
13619: ST_TO_ADDR
// end ;
13620: GO 13311
13622: POP
13623: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13624: LD_ADDR_LOC 28
13628: PUSH
13629: LD_INT 0
13631: PUSH
13632: LD_INT 0
13634: PUSH
13635: LD_INT 0
13637: PUSH
13638: LD_INT 0
13640: PUSH
13641: LD_INT 0
13643: PUSH
13644: LD_INT 0
13646: PUSH
13647: LD_INT 0
13649: PUSH
13650: LD_INT 0
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: ST_TO_ADDR
// if Limits_Info then
13663: LD_LOC 27
13667: IFFALSE 13683
// Limits_Info := #Limits ^ Limits_Info ;
13669: LD_ADDR_LOC 27
13673: PUSH
13674: LD_STRING #Limits
13676: PUSH
13677: LD_LOC 27
13681: ADD
13682: ST_TO_ADDR
// end ;
13683: LD_VAR 0 1
13687: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
13688: LD_INT 0
13690: PPUSH
13691: PPUSH
13692: PPUSH
13693: PPUSH
// for i := 1 to Restricted_Builds do
13694: LD_ADDR_VAR 0 7
13698: PUSH
13699: DOUBLE
13700: LD_INT 1
13702: DEC
13703: ST_TO_ADDR
13704: LD_LOC 20
13708: PUSH
13709: FOR_TO
13710: IFFALSE 14133
// if BType in Restricted_Builds [ i ] then
13712: LD_VAR 0 2
13716: PUSH
13717: LD_LOC 20
13721: PUSH
13722: LD_VAR 0 7
13726: ARRAY
13727: IN
13728: IFFALSE 14131
// begin if old_side then
13730: LD_VAR 0 4
13734: IFFALSE 13860
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
13736: LD_LOC 26
13740: PUSH
13741: LD_VAR 0 7
13745: ARRAY
13746: PUSH
13747: LD_VAR 0 3
13751: ARRAY
13752: PUSH
13753: LD_VAR 0 5
13757: PLUS
13758: PUSH
13759: LD_LOC 21
13763: PUSH
13764: LD_VAR 0 7
13768: ARRAY
13769: GREATER
13770: IFFALSE 13796
// begin SetSide ( un , old_side ) ;
13772: LD_VAR 0 1
13776: PPUSH
13777: LD_VAR 0 4
13781: PPUSH
13782: CALL_OW 235
// count := 0 ;
13786: LD_ADDR_VAR 0 5
13790: PUSH
13791: LD_INT 0
13793: ST_TO_ADDR
// end else
13794: GO 13860
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
13796: LD_ADDR_LOC 26
13800: PUSH
13801: LD_LOC 26
13805: PPUSH
13806: LD_VAR 0 7
13810: PPUSH
13811: LD_LOC 26
13815: PUSH
13816: LD_VAR 0 7
13820: ARRAY
13821: PPUSH
13822: LD_VAR 0 4
13826: PPUSH
13827: LD_LOC 26
13831: PUSH
13832: LD_VAR 0 7
13836: ARRAY
13837: PUSH
13838: LD_VAR 0 4
13842: ARRAY
13843: PUSH
13844: LD_VAR 0 5
13848: MINUS
13849: PPUSH
13850: CALL_OW 1
13854: PPUSH
13855: CALL_OW 1
13859: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
13860: LD_ADDR_LOC 26
13864: PUSH
13865: LD_LOC 26
13869: PPUSH
13870: LD_VAR 0 7
13874: PPUSH
13875: LD_LOC 26
13879: PUSH
13880: LD_VAR 0 7
13884: ARRAY
13885: PPUSH
13886: LD_VAR 0 3
13890: PPUSH
13891: LD_LOC 26
13895: PUSH
13896: LD_VAR 0 7
13900: ARRAY
13901: PUSH
13902: LD_VAR 0 3
13906: ARRAY
13907: PUSH
13908: LD_VAR 0 5
13912: PLUS
13913: PPUSH
13914: CALL_OW 1
13918: PPUSH
13919: CALL_OW 1
13923: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
13924: LD_VAR 0 5
13928: PUSH
13929: LD_INT 0
13931: NONEQUAL
13932: PUSH
13933: LD_VAR 0 3
13937: PUSH
13938: LD_OWVAR 2
13942: EQUAL
13943: AND
13944: IFFALSE 13987
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
13946: LD_ADDR_LOC 27
13950: PUSH
13951: LD_LOC 27
13955: PPUSH
13956: LD_INT 3
13958: PUSH
13959: LD_VAR 0 7
13963: MUL
13964: PPUSH
13965: LD_LOC 26
13969: PUSH
13970: LD_VAR 0 7
13974: ARRAY
13975: PUSH
13976: LD_VAR 0 3
13980: ARRAY
13981: PPUSH
13982: CALL_OW 1
13986: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
13987: LD_LOC 26
13991: PUSH
13992: LD_VAR 0 7
13996: ARRAY
13997: PUSH
13998: LD_VAR 0 3
14002: ARRAY
14003: PUSH
14004: LD_LOC 21
14008: PUSH
14009: LD_VAR 0 7
14013: ARRAY
14014: GREATER
14015: IFFALSE 14042
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
14017: LD_ADDR_LOC 28
14021: PUSH
14022: LD_LOC 28
14026: PPUSH
14027: LD_VAR 0 3
14031: PPUSH
14032: LD_INT 1
14034: PPUSH
14035: CALL_OW 1
14039: ST_TO_ADDR
// end else
14040: GO 14129
// begin for j := 1 to Restricted_Builds do
14042: LD_ADDR_VAR 0 8
14046: PUSH
14047: DOUBLE
14048: LD_INT 1
14050: DEC
14051: ST_TO_ADDR
14052: LD_LOC 20
14056: PUSH
14057: FOR_TO
14058: IFFALSE 14102
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
14060: LD_LOC 26
14064: PUSH
14065: LD_VAR 0 8
14069: ARRAY
14070: PUSH
14071: LD_VAR 0 3
14075: ARRAY
14076: PUSH
14077: LD_LOC 21
14081: PUSH
14082: LD_VAR 0 8
14086: ARRAY
14087: GREATER
14088: IFFALSE 14100
// begin Is_Cheater := true ;
14090: LD_ADDR_VAR 0 9
14094: PUSH
14095: LD_INT 1
14097: ST_TO_ADDR
// break ;
14098: GO 14102
// end ;
14100: GO 14057
14102: POP
14103: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
14104: LD_ADDR_LOC 28
14108: PUSH
14109: LD_LOC 28
14113: PPUSH
14114: LD_VAR 0 3
14118: PPUSH
14119: LD_VAR 0 9
14123: PPUSH
14124: CALL_OW 1
14128: ST_TO_ADDR
// end ; break ;
14129: GO 14133
// end ;
14131: GO 13709
14133: POP
14134: POP
// end ;
14135: LD_VAR 0 6
14139: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
14140: LD_VAR 0 5
14144: PUSH
14145: LD_LOC 22
14149: IN
14150: PUSH
14151: LD_VAR 0 2
14155: PUSH
14156: LD_LOC 23
14160: IN
14161: OR
14162: PUSH
14163: LD_VAR 0 4
14167: PUSH
14168: LD_LOC 24
14172: IN
14173: OR
14174: PUSH
14175: LD_VAR 0 3
14179: PUSH
14180: LD_LOC 25
14184: IN
14185: OR
14186: IFFALSE 14197
// ComCancel ( factory ) ;
14188: LD_VAR 0 1
14192: PPUSH
14193: CALL_OW 127
// end ;
14197: PPOPN 5
14199: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
14200: LD_VAR 0 2
14204: PUSH
14205: LD_LOC 22
14209: IN
14210: IFFALSE 14221
// ComCancel ( building ) ;
14212: LD_VAR 0 1
14216: PPUSH
14217: CALL_OW 127
// end ; end_of_file
14221: PPOPN 2
14223: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
14224: LD_INT 0
14226: PPUSH
14227: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
14228: LD_ADDR_VAR 0 2
14232: PUSH
14233: LD_STRING #Multi1x1-Time
14235: PUSH
14236: LD_OWVAR 1
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
14245: LD_INT 0
14247: PUSH
14248: LD_EXP 15
14252: PUSH
14253: LD_OWVAR 1
14257: MINUS
14258: LESSEQUAL
14259: IFFALSE 14290
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
14261: LD_ADDR_VAR 0 2
14265: PUSH
14266: LD_VAR 0 2
14270: PUSH
14271: LD_STRING #allowedsibbomb
14273: PUSH
14274: LD_EXP 15
14278: PUSH
14279: LD_OWVAR 1
14283: MINUS
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: ADD
14289: ST_TO_ADDR
// if ( ExtraStrings ) then
14290: LD_EXP 59
14294: IFFALSE 14316
// AllStrings := AllStrings ^  ^ ExtraStrings ;
14296: LD_ADDR_VAR 0 2
14300: PUSH
14301: LD_VAR 0 2
14305: PUSH
14306: LD_STRING 
14308: ADD
14309: PUSH
14310: LD_EXP 59
14314: ADD
14315: ST_TO_ADDR
// if ( LimitsStrings ) then
14316: CALL 11064 0 0
14320: IFFALSE 14342
// AllStrings := AllStrings ^  ^ LimitsStrings ;
14322: LD_ADDR_VAR 0 2
14326: PUSH
14327: LD_VAR 0 2
14331: PUSH
14332: LD_STRING 
14334: ADD
14335: PUSH
14336: CALL 11064 0 0
14340: ADD
14341: ST_TO_ADDR
// Display_Strings := AllStrings ;
14342: LD_ADDR_OWVAR 47
14346: PUSH
14347: LD_VAR 0 2
14351: ST_TO_ADDR
// end ;
14352: LD_VAR 0 1
14356: RET
// every 0 0$1 do
14357: GO 14359
14359: DISABLE
// begin ShowTimer ;
14360: CALL 14224 0 0
// enable ;
14364: ENABLE
// end ; end_of_file
14365: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
14366: LD_INT 0
14368: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
14369: LD_VAR 0 1
14373: PPUSH
14374: CALL_OW 255
14378: PUSH
14379: LD_VAR 0 4
14383: EQUAL
14384: IFFALSE 14403
// begin SetAchievement ( ACH_RAD ) ;
14386: LD_STRING ACH_RAD
14388: PPUSH
14389: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
14393: LD_STRING ACH_NL
14395: PPUSH
14396: LD_INT 1
14398: PPUSH
14399: CALL_OW 564
// end end ;
14403: LD_VAR 0 5
14407: RET
// export function SA_Win ( side ) ; begin
14408: LD_INT 0
14410: PPUSH
// case side of 1 :
14411: LD_VAR 0 1
14415: PUSH
14416: LD_INT 1
14418: DOUBLE
14419: EQUAL
14420: IFTRUE 14424
14422: GO 14437
14424: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
14425: LD_STRING ACH_AH
14427: PPUSH
14428: LD_INT 1
14430: PPUSH
14431: CALL_OW 564
14435: GO 14600
14437: LD_INT 2
14439: DOUBLE
14440: EQUAL
14441: IFTRUE 14445
14443: GO 14458
14445: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
14446: LD_STRING ACH_E
14448: PPUSH
14449: LD_INT 1
14451: PPUSH
14452: CALL_OW 564
14456: GO 14600
14458: LD_INT 3
14460: DOUBLE
14461: EQUAL
14462: IFTRUE 14466
14464: GO 14479
14466: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
14467: LD_STRING ACH_OOL
14469: PPUSH
14470: LD_INT 1
14472: PPUSH
14473: CALL_OW 564
14477: GO 14600
14479: LD_INT 1
14481: PUSH
14482: LD_INT 2
14484: PUSH
14485: EMPTY
14486: LIST
14487: LIST
14488: DOUBLE
14489: EQUAL
14490: IFTRUE 14494
14492: GO 14519
14494: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
14495: LD_STRING ACH_AH
14497: PPUSH
14498: LD_REAL  5.00000000000000E-0001
14501: PPUSH
14502: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
14506: LD_STRING ACH_E
14508: PPUSH
14509: LD_REAL  5.00000000000000E-0001
14512: PPUSH
14513: CALL_OW 564
// end ; [ 2 , 3 ] :
14517: GO 14600
14519: LD_INT 2
14521: PUSH
14522: LD_INT 3
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: DOUBLE
14529: EQUAL
14530: IFTRUE 14534
14532: GO 14559
14534: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
14535: LD_STRING ACH_OOL
14537: PPUSH
14538: LD_REAL  5.00000000000000E-0001
14541: PPUSH
14542: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
14546: LD_STRING ACH_E
14548: PPUSH
14549: LD_REAL  5.00000000000000E-0001
14552: PPUSH
14553: CALL_OW 564
// end ; [ 3 , 1 ] :
14557: GO 14600
14559: LD_INT 3
14561: PUSH
14562: LD_INT 1
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: DOUBLE
14569: EQUAL
14570: IFTRUE 14574
14572: GO 14599
14574: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
14575: LD_STRING ACH_AH
14577: PPUSH
14578: LD_REAL  5.00000000000000E-0001
14581: PPUSH
14582: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
14586: LD_STRING ACH_OOL
14588: PPUSH
14589: LD_REAL  5.00000000000000E-0001
14592: PPUSH
14593: CALL_OW 564
// end ; end ;
14597: GO 14600
14599: POP
// end ; end_of_file
14600: LD_VAR 0 2
14604: RET
// export function SetMpTechs ( ) ; var side , i ; begin
14605: LD_INT 0
14607: PPUSH
14608: PPUSH
14609: PPUSH
// for side = 1 to 8 do
14610: LD_ADDR_VAR 0 2
14614: PUSH
14615: DOUBLE
14616: LD_INT 1
14618: DEC
14619: ST_TO_ADDR
14620: LD_INT 8
14622: PUSH
14623: FOR_TO
14624: IFFALSE 14745
// begin for i = 1 to 72 do
14626: LD_ADDR_VAR 0 3
14630: PUSH
14631: DOUBLE
14632: LD_INT 1
14634: DEC
14635: ST_TO_ADDR
14636: LD_INT 72
14638: PUSH
14639: FOR_TO
14640: IFFALSE 14671
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
14642: LD_VAR 0 3
14646: PPUSH
14647: LD_VAR 0 2
14651: PPUSH
14652: LD_INT 0
14654: PPUSH
14655: LD_VAR 0 3
14659: PPUSH
14660: CALL_OW 565
14664: PPUSH
14665: CALL_OW 322
14669: GO 14639
14671: POP
14672: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
14673: LD_INT 73
14675: PPUSH
14676: LD_VAR 0 2
14680: PPUSH
14681: LD_INT 0
14683: PPUSH
14684: LD_INT 25
14686: PPUSH
14687: CALL_OW 565
14691: PPUSH
14692: CALL_OW 322
// for i = 0 to 40 do
14696: LD_ADDR_VAR 0 3
14700: PUSH
14701: DOUBLE
14702: LD_INT 0
14704: DEC
14705: ST_TO_ADDR
14706: LD_INT 40
14708: PUSH
14709: FOR_TO
14710: IFFALSE 14741
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
14712: LD_VAR 0 3
14716: PPUSH
14717: LD_VAR 0 2
14721: PPUSH
14722: LD_INT 1
14724: PPUSH
14725: LD_VAR 0 3
14729: PPUSH
14730: CALL_OW 565
14734: PPUSH
14735: CALL_OW 324
14739: GO 14709
14741: POP
14742: POP
// end ;
14743: GO 14623
14745: POP
14746: POP
// end ;
14747: LD_VAR 0 1
14751: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
14752: LD_INT 0
14754: PPUSH
14755: PPUSH
14756: PPUSH
// for side = 1 to 8 do
14757: LD_ADDR_VAR 0 3
14761: PUSH
14762: DOUBLE
14763: LD_INT 1
14765: DEC
14766: ST_TO_ADDR
14767: LD_INT 8
14769: PUSH
14770: FOR_TO
14771: IFFALSE 18767
// begin for i = 1 to 73 do
14773: LD_ADDR_VAR 0 4
14777: PUSH
14778: DOUBLE
14779: LD_INT 1
14781: DEC
14782: ST_TO_ADDR
14783: LD_INT 73
14785: PUSH
14786: FOR_TO
14787: IFFALSE 14808
// SetTech ( i , side , state_disabled ) ;
14789: LD_VAR 0 4
14793: PPUSH
14794: LD_VAR 0 3
14798: PPUSH
14799: LD_INT 0
14801: PPUSH
14802: CALL_OW 322
14806: GO 14786
14808: POP
14809: POP
// for i = 0 to 40 do
14810: LD_ADDR_VAR 0 4
14814: PUSH
14815: DOUBLE
14816: LD_INT 0
14818: DEC
14819: ST_TO_ADDR
14820: LD_INT 40
14822: PUSH
14823: FOR_TO
14824: IFFALSE 14845
// SetRestrict ( i , side , false ) ;
14826: LD_VAR 0 4
14830: PPUSH
14831: LD_VAR 0 3
14835: PPUSH
14836: LD_INT 0
14838: PPUSH
14839: CALL_OW 324
14843: GO 14823
14845: POP
14846: POP
// case level of 1 :
14847: LD_VAR 0 1
14851: PUSH
14852: LD_INT 1
14854: DOUBLE
14855: EQUAL
14856: IFTRUE 14860
14858: GO 15013
14860: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14861: LD_INT 35
14863: PPUSH
14864: LD_VAR 0 3
14868: PPUSH
14869: LD_INT 1
14871: PPUSH
14872: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14876: LD_INT 45
14878: PPUSH
14879: LD_VAR 0 3
14883: PPUSH
14884: LD_INT 1
14886: PPUSH
14887: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14891: LD_INT 46
14893: PPUSH
14894: LD_VAR 0 3
14898: PPUSH
14899: LD_INT 1
14901: PPUSH
14902: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14906: LD_INT 47
14908: PPUSH
14909: LD_VAR 0 3
14913: PPUSH
14914: LD_INT 1
14916: PPUSH
14917: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14921: LD_INT 0
14923: PPUSH
14924: LD_VAR 0 3
14928: PPUSH
14929: LD_INT 1
14931: PPUSH
14932: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14936: LD_INT 2
14938: PPUSH
14939: LD_VAR 0 3
14943: PPUSH
14944: LD_INT 1
14946: PPUSH
14947: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14951: LD_INT 4
14953: PPUSH
14954: LD_VAR 0 3
14958: PPUSH
14959: LD_INT 1
14961: PPUSH
14962: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14966: LD_INT 6
14968: PPUSH
14969: LD_VAR 0 3
14973: PPUSH
14974: LD_INT 1
14976: PPUSH
14977: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14981: LD_INT 29
14983: PPUSH
14984: LD_VAR 0 3
14988: PPUSH
14989: LD_INT 1
14991: PPUSH
14992: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14996: LD_INT 31
14998: PPUSH
14999: LD_VAR 0 3
15003: PPUSH
15004: LD_INT 1
15006: PPUSH
15007: CALL_OW 324
// end ; 2 :
15011: GO 18765
15013: LD_INT 2
15015: DOUBLE
15016: EQUAL
15017: IFTRUE 15021
15019: GO 15219
15021: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15022: LD_INT 35
15024: PPUSH
15025: LD_VAR 0 3
15029: PPUSH
15030: LD_INT 1
15032: PPUSH
15033: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15037: LD_INT 45
15039: PPUSH
15040: LD_VAR 0 3
15044: PPUSH
15045: LD_INT 1
15047: PPUSH
15048: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15052: LD_INT 46
15054: PPUSH
15055: LD_VAR 0 3
15059: PPUSH
15060: LD_INT 1
15062: PPUSH
15063: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15067: LD_INT 47
15069: PPUSH
15070: LD_VAR 0 3
15074: PPUSH
15075: LD_INT 1
15077: PPUSH
15078: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15082: LD_INT 1
15084: PPUSH
15085: LD_VAR 0 3
15089: PPUSH
15090: LD_INT 1
15092: PPUSH
15093: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15097: LD_INT 2
15099: PPUSH
15100: LD_VAR 0 3
15104: PPUSH
15105: LD_INT 1
15107: PPUSH
15108: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15112: LD_INT 11
15114: PPUSH
15115: LD_VAR 0 3
15119: PPUSH
15120: LD_INT 1
15122: PPUSH
15123: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15127: LD_INT 0
15129: PPUSH
15130: LD_VAR 0 3
15134: PPUSH
15135: LD_INT 1
15137: PPUSH
15138: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15142: LD_INT 2
15144: PPUSH
15145: LD_VAR 0 3
15149: PPUSH
15150: LD_INT 1
15152: PPUSH
15153: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15157: LD_INT 4
15159: PPUSH
15160: LD_VAR 0 3
15164: PPUSH
15165: LD_INT 1
15167: PPUSH
15168: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15172: LD_INT 6
15174: PPUSH
15175: LD_VAR 0 3
15179: PPUSH
15180: LD_INT 1
15182: PPUSH
15183: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15187: LD_INT 29
15189: PPUSH
15190: LD_VAR 0 3
15194: PPUSH
15195: LD_INT 1
15197: PPUSH
15198: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15202: LD_INT 31
15204: PPUSH
15205: LD_VAR 0 3
15209: PPUSH
15210: LD_INT 1
15212: PPUSH
15213: CALL_OW 324
// end ; 3 :
15217: GO 18765
15219: LD_INT 3
15221: DOUBLE
15222: EQUAL
15223: IFTRUE 15227
15225: GO 15680
15227: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15228: LD_INT 35
15230: PPUSH
15231: LD_VAR 0 3
15235: PPUSH
15236: LD_INT 1
15238: PPUSH
15239: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15243: LD_INT 45
15245: PPUSH
15246: LD_VAR 0 3
15250: PPUSH
15251: LD_INT 1
15253: PPUSH
15254: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15258: LD_INT 46
15260: PPUSH
15261: LD_VAR 0 3
15265: PPUSH
15266: LD_INT 1
15268: PPUSH
15269: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15273: LD_INT 47
15275: PPUSH
15276: LD_VAR 0 3
15280: PPUSH
15281: LD_INT 1
15283: PPUSH
15284: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15288: LD_INT 1
15290: PPUSH
15291: LD_VAR 0 3
15295: PPUSH
15296: LD_INT 1
15298: PPUSH
15299: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15303: LD_INT 2
15305: PPUSH
15306: LD_VAR 0 3
15310: PPUSH
15311: LD_INT 1
15313: PPUSH
15314: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15318: LD_INT 11
15320: PPUSH
15321: LD_VAR 0 3
15325: PPUSH
15326: LD_INT 1
15328: PPUSH
15329: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15333: LD_INT 48
15335: PPUSH
15336: LD_VAR 0 3
15340: PPUSH
15341: LD_INT 1
15343: PPUSH
15344: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15348: LD_INT 69
15350: PPUSH
15351: LD_VAR 0 3
15355: PPUSH
15356: LD_INT 1
15358: PPUSH
15359: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15363: LD_INT 39
15365: PPUSH
15366: LD_VAR 0 3
15370: PPUSH
15371: LD_INT 1
15373: PPUSH
15374: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15378: LD_INT 43
15380: PPUSH
15381: LD_VAR 0 3
15385: PPUSH
15386: LD_INT 1
15388: PPUSH
15389: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15393: LD_INT 51
15395: PPUSH
15396: LD_VAR 0 3
15400: PPUSH
15401: LD_INT 1
15403: PPUSH
15404: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15408: LD_INT 6
15410: PPUSH
15411: LD_VAR 0 3
15415: PPUSH
15416: LD_INT 1
15418: PPUSH
15419: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15423: LD_INT 0
15425: PPUSH
15426: LD_VAR 0 3
15430: PPUSH
15431: LD_INT 1
15433: PPUSH
15434: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15438: LD_INT 2
15440: PPUSH
15441: LD_VAR 0 3
15445: PPUSH
15446: LD_INT 1
15448: PPUSH
15449: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
15453: LD_INT 3
15455: PPUSH
15456: LD_VAR 0 3
15460: PPUSH
15461: LD_INT 1
15463: PPUSH
15464: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15468: LD_INT 4
15470: PPUSH
15471: LD_VAR 0 3
15475: PPUSH
15476: LD_INT 1
15478: PPUSH
15479: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15483: LD_INT 6
15485: PPUSH
15486: LD_VAR 0 3
15490: PPUSH
15491: LD_INT 1
15493: PPUSH
15494: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
15498: LD_INT 7
15500: PPUSH
15501: LD_VAR 0 3
15505: PPUSH
15506: LD_INT 1
15508: PPUSH
15509: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
15513: LD_INT 8
15515: PPUSH
15516: LD_VAR 0 3
15520: PPUSH
15521: LD_INT 1
15523: PPUSH
15524: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
15528: LD_INT 10
15530: PPUSH
15531: LD_VAR 0 3
15535: PPUSH
15536: LD_INT 1
15538: PPUSH
15539: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
15543: LD_INT 15
15545: PPUSH
15546: LD_VAR 0 3
15550: PPUSH
15551: LD_INT 1
15553: PPUSH
15554: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
15558: LD_INT 16
15560: PPUSH
15561: LD_VAR 0 3
15565: PPUSH
15566: LD_INT 1
15568: PPUSH
15569: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
15573: LD_INT 17
15575: PPUSH
15576: LD_VAR 0 3
15580: PPUSH
15581: LD_INT 1
15583: PPUSH
15584: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
15588: LD_INT 20
15590: PPUSH
15591: LD_VAR 0 3
15595: PPUSH
15596: LD_INT 1
15598: PPUSH
15599: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
15603: LD_INT 26
15605: PPUSH
15606: LD_VAR 0 3
15610: PPUSH
15611: LD_INT 1
15613: PPUSH
15614: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15618: LD_INT 27
15620: PPUSH
15621: LD_VAR 0 3
15625: PPUSH
15626: LD_INT 1
15628: PPUSH
15629: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15633: LD_INT 29
15635: PPUSH
15636: LD_VAR 0 3
15640: PPUSH
15641: LD_INT 1
15643: PPUSH
15644: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15648: LD_INT 31
15650: PPUSH
15651: LD_VAR 0 3
15655: PPUSH
15656: LD_INT 1
15658: PPUSH
15659: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15663: LD_INT 32
15665: PPUSH
15666: LD_VAR 0 3
15670: PPUSH
15671: LD_INT 1
15673: PPUSH
15674: CALL_OW 324
// end ; 4 :
15678: GO 18765
15680: LD_INT 4
15682: DOUBLE
15683: EQUAL
15684: IFTRUE 15688
15686: GO 16636
15688: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15689: LD_INT 35
15691: PPUSH
15692: LD_VAR 0 3
15696: PPUSH
15697: LD_INT 1
15699: PPUSH
15700: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15704: LD_INT 45
15706: PPUSH
15707: LD_VAR 0 3
15711: PPUSH
15712: LD_INT 1
15714: PPUSH
15715: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15719: LD_INT 46
15721: PPUSH
15722: LD_VAR 0 3
15726: PPUSH
15727: LD_INT 1
15729: PPUSH
15730: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15734: LD_INT 47
15736: PPUSH
15737: LD_VAR 0 3
15741: PPUSH
15742: LD_INT 1
15744: PPUSH
15745: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15749: LD_INT 1
15751: PPUSH
15752: LD_VAR 0 3
15756: PPUSH
15757: LD_INT 1
15759: PPUSH
15760: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15764: LD_INT 2
15766: PPUSH
15767: LD_VAR 0 3
15771: PPUSH
15772: LD_INT 1
15774: PPUSH
15775: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15779: LD_INT 11
15781: PPUSH
15782: LD_VAR 0 3
15786: PPUSH
15787: LD_INT 1
15789: PPUSH
15790: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15794: LD_INT 20
15796: PPUSH
15797: LD_VAR 0 3
15801: PPUSH
15802: LD_INT 1
15804: PPUSH
15805: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15809: LD_INT 48
15811: PPUSH
15812: LD_VAR 0 3
15816: PPUSH
15817: LD_INT 1
15819: PPUSH
15820: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15824: LD_INT 49
15826: PPUSH
15827: LD_VAR 0 3
15831: PPUSH
15832: LD_INT 1
15834: PPUSH
15835: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15839: LD_INT 69
15841: PPUSH
15842: LD_VAR 0 3
15846: PPUSH
15847: LD_INT 1
15849: PPUSH
15850: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15854: LD_INT 39
15856: PPUSH
15857: LD_VAR 0 3
15861: PPUSH
15862: LD_INT 1
15864: PPUSH
15865: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15869: LD_INT 34
15871: PPUSH
15872: LD_VAR 0 3
15876: PPUSH
15877: LD_INT 1
15879: PPUSH
15880: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15884: LD_INT 42
15886: PPUSH
15887: LD_VAR 0 3
15891: PPUSH
15892: LD_INT 1
15894: PPUSH
15895: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15899: LD_INT 44
15901: PPUSH
15902: LD_VAR 0 3
15906: PPUSH
15907: LD_INT 1
15909: PPUSH
15910: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15914: LD_INT 41
15916: PPUSH
15917: LD_VAR 0 3
15921: PPUSH
15922: LD_INT 1
15924: PPUSH
15925: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15929: LD_INT 43
15931: PPUSH
15932: LD_VAR 0 3
15936: PPUSH
15937: LD_INT 1
15939: PPUSH
15940: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15944: LD_INT 70
15946: PPUSH
15947: LD_VAR 0 3
15951: PPUSH
15952: LD_INT 1
15954: PPUSH
15955: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15959: LD_INT 51
15961: PPUSH
15962: LD_VAR 0 3
15966: PPUSH
15967: LD_INT 1
15969: PPUSH
15970: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15974: LD_INT 52
15976: PPUSH
15977: LD_VAR 0 3
15981: PPUSH
15982: LD_INT 1
15984: PPUSH
15985: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15989: LD_INT 6
15991: PPUSH
15992: LD_VAR 0 3
15996: PPUSH
15997: LD_INT 1
15999: PPUSH
16000: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16004: LD_INT 15
16006: PPUSH
16007: LD_VAR 0 3
16011: PPUSH
16012: LD_INT 1
16014: PPUSH
16015: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16019: LD_INT 7
16021: PPUSH
16022: LD_VAR 0 3
16026: PPUSH
16027: LD_INT 1
16029: PPUSH
16030: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16034: LD_INT 12
16036: PPUSH
16037: LD_VAR 0 3
16041: PPUSH
16042: LD_INT 1
16044: PPUSH
16045: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
16049: LD_INT 18
16051: PPUSH
16052: LD_VAR 0 3
16056: PPUSH
16057: LD_INT 1
16059: PPUSH
16060: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
16064: LD_INT 60
16066: PPUSH
16067: LD_VAR 0 3
16071: PPUSH
16072: LD_INT 1
16074: PPUSH
16075: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
16079: LD_INT 9
16081: PPUSH
16082: LD_VAR 0 3
16086: PPUSH
16087: LD_INT 1
16089: PPUSH
16090: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
16094: LD_INT 30
16096: PPUSH
16097: LD_VAR 0 3
16101: PPUSH
16102: LD_INT 1
16104: PPUSH
16105: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
16109: LD_INT 37
16111: PPUSH
16112: LD_VAR 0 3
16116: PPUSH
16117: LD_INT 1
16119: PPUSH
16120: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
16124: LD_INT 5
16126: PPUSH
16127: LD_VAR 0 3
16131: PPUSH
16132: LD_INT 1
16134: PPUSH
16135: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
16139: LD_INT 66
16141: PPUSH
16142: LD_VAR 0 3
16146: PPUSH
16147: LD_INT 1
16149: PPUSH
16150: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
16154: LD_INT 21
16156: PPUSH
16157: LD_VAR 0 3
16161: PPUSH
16162: LD_INT 1
16164: PPUSH
16165: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
16169: LD_INT 22
16171: PPUSH
16172: LD_VAR 0 3
16176: PPUSH
16177: LD_INT 1
16179: PPUSH
16180: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
16184: LD_INT 54
16186: PPUSH
16187: LD_VAR 0 3
16191: PPUSH
16192: LD_INT 1
16194: PPUSH
16195: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16199: LD_INT 0
16201: PPUSH
16202: LD_VAR 0 3
16206: PPUSH
16207: LD_INT 1
16209: PPUSH
16210: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
16214: LD_INT 1
16216: PPUSH
16217: LD_VAR 0 3
16221: PPUSH
16222: LD_INT 1
16224: PPUSH
16225: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16229: LD_INT 2
16231: PPUSH
16232: LD_VAR 0 3
16236: PPUSH
16237: LD_INT 1
16239: PPUSH
16240: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
16244: LD_INT 3
16246: PPUSH
16247: LD_VAR 0 3
16251: PPUSH
16252: LD_INT 1
16254: PPUSH
16255: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16259: LD_INT 4
16261: PPUSH
16262: LD_VAR 0 3
16266: PPUSH
16267: LD_INT 1
16269: PPUSH
16270: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
16274: LD_INT 5
16276: PPUSH
16277: LD_VAR 0 3
16281: PPUSH
16282: LD_INT 1
16284: PPUSH
16285: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16289: LD_INT 6
16291: PPUSH
16292: LD_VAR 0 3
16296: PPUSH
16297: LD_INT 1
16299: PPUSH
16300: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
16304: LD_INT 7
16306: PPUSH
16307: LD_VAR 0 3
16311: PPUSH
16312: LD_INT 1
16314: PPUSH
16315: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
16319: LD_INT 8
16321: PPUSH
16322: LD_VAR 0 3
16326: PPUSH
16327: LD_INT 1
16329: PPUSH
16330: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
16334: LD_INT 10
16336: PPUSH
16337: LD_VAR 0 3
16341: PPUSH
16342: LD_INT 1
16344: PPUSH
16345: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
16349: LD_INT 11
16351: PPUSH
16352: LD_VAR 0 3
16356: PPUSH
16357: LD_INT 1
16359: PPUSH
16360: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
16364: LD_INT 12
16366: PPUSH
16367: LD_VAR 0 3
16371: PPUSH
16372: LD_INT 1
16374: PPUSH
16375: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
16379: LD_INT 13
16381: PPUSH
16382: LD_VAR 0 3
16386: PPUSH
16387: LD_INT 1
16389: PPUSH
16390: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
16394: LD_INT 14
16396: PPUSH
16397: LD_VAR 0 3
16401: PPUSH
16402: LD_INT 1
16404: PPUSH
16405: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
16409: LD_INT 15
16411: PPUSH
16412: LD_VAR 0 3
16416: PPUSH
16417: LD_INT 1
16419: PPUSH
16420: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
16424: LD_INT 16
16426: PPUSH
16427: LD_VAR 0 3
16431: PPUSH
16432: LD_INT 1
16434: PPUSH
16435: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
16439: LD_INT 17
16441: PPUSH
16442: LD_VAR 0 3
16446: PPUSH
16447: LD_INT 1
16449: PPUSH
16450: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
16454: LD_INT 19
16456: PPUSH
16457: LD_VAR 0 3
16461: PPUSH
16462: LD_INT 1
16464: PPUSH
16465: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
16469: LD_INT 20
16471: PPUSH
16472: LD_VAR 0 3
16476: PPUSH
16477: LD_INT 1
16479: PPUSH
16480: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
16484: LD_INT 21
16486: PPUSH
16487: LD_VAR 0 3
16491: PPUSH
16492: LD_INT 1
16494: PPUSH
16495: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
16499: LD_INT 23
16501: PPUSH
16502: LD_VAR 0 3
16506: PPUSH
16507: LD_INT 1
16509: PPUSH
16510: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
16514: LD_INT 26
16516: PPUSH
16517: LD_VAR 0 3
16521: PPUSH
16522: LD_INT 1
16524: PPUSH
16525: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16529: LD_INT 27
16531: PPUSH
16532: LD_VAR 0 3
16536: PPUSH
16537: LD_INT 1
16539: PPUSH
16540: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
16544: LD_INT 28
16546: PPUSH
16547: LD_VAR 0 3
16551: PPUSH
16552: LD_INT 1
16554: PPUSH
16555: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16559: LD_INT 29
16561: PPUSH
16562: LD_VAR 0 3
16566: PPUSH
16567: LD_INT 1
16569: PPUSH
16570: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
16574: LD_INT 30
16576: PPUSH
16577: LD_VAR 0 3
16581: PPUSH
16582: LD_INT 1
16584: PPUSH
16585: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16589: LD_INT 31
16591: PPUSH
16592: LD_VAR 0 3
16596: PPUSH
16597: LD_INT 1
16599: PPUSH
16600: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16604: LD_INT 32
16606: PPUSH
16607: LD_VAR 0 3
16611: PPUSH
16612: LD_INT 1
16614: PPUSH
16615: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
16619: LD_INT 36
16621: PPUSH
16622: LD_VAR 0 3
16626: PPUSH
16627: LD_INT 1
16629: PPUSH
16630: CALL_OW 324
// end ; 5 :
16634: GO 18765
16636: LD_INT 5
16638: DOUBLE
16639: EQUAL
16640: IFTRUE 16644
16642: GO 17757
16644: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16645: LD_INT 35
16647: PPUSH
16648: LD_VAR 0 3
16652: PPUSH
16653: LD_INT 1
16655: PPUSH
16656: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16660: LD_INT 45
16662: PPUSH
16663: LD_VAR 0 3
16667: PPUSH
16668: LD_INT 1
16670: PPUSH
16671: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16675: LD_INT 46
16677: PPUSH
16678: LD_VAR 0 3
16682: PPUSH
16683: LD_INT 1
16685: PPUSH
16686: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16690: LD_INT 47
16692: PPUSH
16693: LD_VAR 0 3
16697: PPUSH
16698: LD_INT 1
16700: PPUSH
16701: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16705: LD_INT 1
16707: PPUSH
16708: LD_VAR 0 3
16712: PPUSH
16713: LD_INT 1
16715: PPUSH
16716: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16720: LD_INT 2
16722: PPUSH
16723: LD_VAR 0 3
16727: PPUSH
16728: LD_INT 1
16730: PPUSH
16731: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16735: LD_INT 11
16737: PPUSH
16738: LD_VAR 0 3
16742: PPUSH
16743: LD_INT 1
16745: PPUSH
16746: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
16750: LD_INT 20
16752: PPUSH
16753: LD_VAR 0 3
16757: PPUSH
16758: LD_INT 1
16760: PPUSH
16761: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16765: LD_INT 48
16767: PPUSH
16768: LD_VAR 0 3
16772: PPUSH
16773: LD_INT 1
16775: PPUSH
16776: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16780: LD_INT 49
16782: PPUSH
16783: LD_VAR 0 3
16787: PPUSH
16788: LD_INT 1
16790: PPUSH
16791: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16795: LD_INT 69
16797: PPUSH
16798: LD_VAR 0 3
16802: PPUSH
16803: LD_INT 1
16805: PPUSH
16806: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16810: LD_INT 39
16812: PPUSH
16813: LD_VAR 0 3
16817: PPUSH
16818: LD_INT 1
16820: PPUSH
16821: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16825: LD_INT 34
16827: PPUSH
16828: LD_VAR 0 3
16832: PPUSH
16833: LD_INT 1
16835: PPUSH
16836: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16840: LD_INT 42
16842: PPUSH
16843: LD_VAR 0 3
16847: PPUSH
16848: LD_INT 1
16850: PPUSH
16851: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16855: LD_INT 44
16857: PPUSH
16858: LD_VAR 0 3
16862: PPUSH
16863: LD_INT 1
16865: PPUSH
16866: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16870: LD_INT 41
16872: PPUSH
16873: LD_VAR 0 3
16877: PPUSH
16878: LD_INT 1
16880: PPUSH
16881: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
16885: LD_INT 40
16887: PPUSH
16888: LD_VAR 0 3
16892: PPUSH
16893: LD_INT 1
16895: PPUSH
16896: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16900: LD_INT 43
16902: PPUSH
16903: LD_VAR 0 3
16907: PPUSH
16908: LD_INT 1
16910: PPUSH
16911: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16915: LD_INT 70
16917: PPUSH
16918: LD_VAR 0 3
16922: PPUSH
16923: LD_INT 1
16925: PPUSH
16926: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16930: LD_INT 51
16932: PPUSH
16933: LD_VAR 0 3
16937: PPUSH
16938: LD_INT 1
16940: PPUSH
16941: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16945: LD_INT 52
16947: PPUSH
16948: LD_VAR 0 3
16952: PPUSH
16953: LD_INT 1
16955: PPUSH
16956: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16960: LD_INT 6
16962: PPUSH
16963: LD_VAR 0 3
16967: PPUSH
16968: LD_INT 1
16970: PPUSH
16971: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16975: LD_INT 15
16977: PPUSH
16978: LD_VAR 0 3
16982: PPUSH
16983: LD_INT 1
16985: PPUSH
16986: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16990: LD_INT 7
16992: PPUSH
16993: LD_VAR 0 3
16997: PPUSH
16998: LD_INT 1
17000: PPUSH
17001: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17005: LD_INT 12
17007: PPUSH
17008: LD_VAR 0 3
17012: PPUSH
17013: LD_INT 1
17015: PPUSH
17016: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
17020: LD_INT 17
17022: PPUSH
17023: LD_VAR 0 3
17027: PPUSH
17028: LD_INT 1
17030: PPUSH
17031: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17035: LD_INT 18
17037: PPUSH
17038: LD_VAR 0 3
17042: PPUSH
17043: LD_INT 1
17045: PPUSH
17046: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17050: LD_INT 60
17052: PPUSH
17053: LD_VAR 0 3
17057: PPUSH
17058: LD_INT 1
17060: PPUSH
17061: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
17065: LD_INT 32
17067: PPUSH
17068: LD_VAR 0 3
17072: PPUSH
17073: LD_INT 1
17075: PPUSH
17076: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
17080: LD_INT 9
17082: PPUSH
17083: LD_VAR 0 3
17087: PPUSH
17088: LD_INT 1
17090: PPUSH
17091: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
17095: LD_INT 57
17097: PPUSH
17098: LD_VAR 0 3
17102: PPUSH
17103: LD_INT 1
17105: PPUSH
17106: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
17110: LD_INT 30
17112: PPUSH
17113: LD_VAR 0 3
17117: PPUSH
17118: LD_INT 1
17120: PPUSH
17121: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
17125: LD_INT 37
17127: PPUSH
17128: LD_VAR 0 3
17132: PPUSH
17133: LD_INT 1
17135: PPUSH
17136: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
17140: LD_INT 63
17142: PPUSH
17143: LD_VAR 0 3
17147: PPUSH
17148: LD_INT 1
17150: PPUSH
17151: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
17155: LD_INT 3
17157: PPUSH
17158: LD_VAR 0 3
17162: PPUSH
17163: LD_INT 1
17165: PPUSH
17166: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
17170: LD_INT 4
17172: PPUSH
17173: LD_VAR 0 3
17177: PPUSH
17178: LD_INT 1
17180: PPUSH
17181: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
17185: LD_INT 5
17187: PPUSH
17188: LD_VAR 0 3
17192: PPUSH
17193: LD_INT 1
17195: PPUSH
17196: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
17200: LD_INT 66
17202: PPUSH
17203: LD_VAR 0 3
17207: PPUSH
17208: LD_INT 1
17210: PPUSH
17211: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
17215: LD_INT 21
17217: PPUSH
17218: LD_VAR 0 3
17222: PPUSH
17223: LD_INT 1
17225: PPUSH
17226: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
17230: LD_INT 22
17232: PPUSH
17233: LD_VAR 0 3
17237: PPUSH
17238: LD_INT 1
17240: PPUSH
17241: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
17245: LD_INT 19
17247: PPUSH
17248: LD_VAR 0 3
17252: PPUSH
17253: LD_INT 1
17255: PPUSH
17256: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
17260: LD_INT 54
17262: PPUSH
17263: LD_VAR 0 3
17267: PPUSH
17268: LD_INT 1
17270: PPUSH
17271: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
17275: LD_INT 55
17277: PPUSH
17278: LD_VAR 0 3
17282: PPUSH
17283: LD_INT 1
17285: PPUSH
17286: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17290: LD_INT 0
17292: PPUSH
17293: LD_VAR 0 3
17297: PPUSH
17298: LD_INT 1
17300: PPUSH
17301: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
17305: LD_INT 1
17307: PPUSH
17308: LD_VAR 0 3
17312: PPUSH
17313: LD_INT 1
17315: PPUSH
17316: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17320: LD_INT 2
17322: PPUSH
17323: LD_VAR 0 3
17327: PPUSH
17328: LD_INT 1
17330: PPUSH
17331: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
17335: LD_INT 3
17337: PPUSH
17338: LD_VAR 0 3
17342: PPUSH
17343: LD_INT 1
17345: PPUSH
17346: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17350: LD_INT 4
17352: PPUSH
17353: LD_VAR 0 3
17357: PPUSH
17358: LD_INT 1
17360: PPUSH
17361: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
17365: LD_INT 5
17367: PPUSH
17368: LD_VAR 0 3
17372: PPUSH
17373: LD_INT 1
17375: PPUSH
17376: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17380: LD_INT 6
17382: PPUSH
17383: LD_VAR 0 3
17387: PPUSH
17388: LD_INT 1
17390: PPUSH
17391: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
17395: LD_INT 7
17397: PPUSH
17398: LD_VAR 0 3
17402: PPUSH
17403: LD_INT 1
17405: PPUSH
17406: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
17410: LD_INT 8
17412: PPUSH
17413: LD_VAR 0 3
17417: PPUSH
17418: LD_INT 1
17420: PPUSH
17421: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
17425: LD_INT 10
17427: PPUSH
17428: LD_VAR 0 3
17432: PPUSH
17433: LD_INT 1
17435: PPUSH
17436: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
17440: LD_INT 11
17442: PPUSH
17443: LD_VAR 0 3
17447: PPUSH
17448: LD_INT 1
17450: PPUSH
17451: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
17455: LD_INT 12
17457: PPUSH
17458: LD_VAR 0 3
17462: PPUSH
17463: LD_INT 1
17465: PPUSH
17466: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
17470: LD_INT 13
17472: PPUSH
17473: LD_VAR 0 3
17477: PPUSH
17478: LD_INT 1
17480: PPUSH
17481: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
17485: LD_INT 14
17487: PPUSH
17488: LD_VAR 0 3
17492: PPUSH
17493: LD_INT 1
17495: PPUSH
17496: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
17500: LD_INT 15
17502: PPUSH
17503: LD_VAR 0 3
17507: PPUSH
17508: LD_INT 1
17510: PPUSH
17511: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
17515: LD_INT 16
17517: PPUSH
17518: LD_VAR 0 3
17522: PPUSH
17523: LD_INT 1
17525: PPUSH
17526: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
17530: LD_INT 17
17532: PPUSH
17533: LD_VAR 0 3
17537: PPUSH
17538: LD_INT 1
17540: PPUSH
17541: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
17545: LD_INT 18
17547: PPUSH
17548: LD_VAR 0 3
17552: PPUSH
17553: LD_INT 1
17555: PPUSH
17556: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
17560: LD_INT 19
17562: PPUSH
17563: LD_VAR 0 3
17567: PPUSH
17568: LD_INT 1
17570: PPUSH
17571: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
17575: LD_INT 20
17577: PPUSH
17578: LD_VAR 0 3
17582: PPUSH
17583: LD_INT 1
17585: PPUSH
17586: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
17590: LD_INT 21
17592: PPUSH
17593: LD_VAR 0 3
17597: PPUSH
17598: LD_INT 1
17600: PPUSH
17601: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
17605: LD_INT 23
17607: PPUSH
17608: LD_VAR 0 3
17612: PPUSH
17613: LD_INT 1
17615: PPUSH
17616: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
17620: LD_INT 26
17622: PPUSH
17623: LD_VAR 0 3
17627: PPUSH
17628: LD_INT 1
17630: PPUSH
17631: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
17635: LD_INT 27
17637: PPUSH
17638: LD_VAR 0 3
17642: PPUSH
17643: LD_INT 1
17645: PPUSH
17646: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
17650: LD_INT 28
17652: PPUSH
17653: LD_VAR 0 3
17657: PPUSH
17658: LD_INT 1
17660: PPUSH
17661: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17665: LD_INT 29
17667: PPUSH
17668: LD_VAR 0 3
17672: PPUSH
17673: LD_INT 1
17675: PPUSH
17676: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
17680: LD_INT 30
17682: PPUSH
17683: LD_VAR 0 3
17687: PPUSH
17688: LD_INT 1
17690: PPUSH
17691: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17695: LD_INT 31
17697: PPUSH
17698: LD_VAR 0 3
17702: PPUSH
17703: LD_INT 1
17705: PPUSH
17706: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
17710: LD_INT 32
17712: PPUSH
17713: LD_VAR 0 3
17717: PPUSH
17718: LD_INT 1
17720: PPUSH
17721: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
17725: LD_INT 33
17727: PPUSH
17728: LD_VAR 0 3
17732: PPUSH
17733: LD_INT 1
17735: PPUSH
17736: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
17740: LD_INT 36
17742: PPUSH
17743: LD_VAR 0 3
17747: PPUSH
17748: LD_INT 1
17750: PPUSH
17751: CALL_OW 324
// end ; 6 :
17755: GO 18765
17757: LD_INT 6
17759: DOUBLE
17760: EQUAL
17761: IFTRUE 17765
17763: GO 18690
17765: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17766: LD_INT 35
17768: PPUSH
17769: LD_VAR 0 3
17773: PPUSH
17774: LD_INT 1
17776: PPUSH
17777: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17781: LD_INT 45
17783: PPUSH
17784: LD_VAR 0 3
17788: PPUSH
17789: LD_INT 1
17791: PPUSH
17792: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17796: LD_INT 46
17798: PPUSH
17799: LD_VAR 0 3
17803: PPUSH
17804: LD_INT 1
17806: PPUSH
17807: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17811: LD_INT 47
17813: PPUSH
17814: LD_VAR 0 3
17818: PPUSH
17819: LD_INT 1
17821: PPUSH
17822: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17826: LD_INT 1
17828: PPUSH
17829: LD_VAR 0 3
17833: PPUSH
17834: LD_INT 1
17836: PPUSH
17837: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17841: LD_INT 2
17843: PPUSH
17844: LD_VAR 0 3
17848: PPUSH
17849: LD_INT 1
17851: PPUSH
17852: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17856: LD_INT 11
17858: PPUSH
17859: LD_VAR 0 3
17863: PPUSH
17864: LD_INT 1
17866: PPUSH
17867: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17871: LD_INT 20
17873: PPUSH
17874: LD_VAR 0 3
17878: PPUSH
17879: LD_INT 1
17881: PPUSH
17882: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17886: LD_INT 48
17888: PPUSH
17889: LD_VAR 0 3
17893: PPUSH
17894: LD_INT 1
17896: PPUSH
17897: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17901: LD_INT 49
17903: PPUSH
17904: LD_VAR 0 3
17908: PPUSH
17909: LD_INT 1
17911: PPUSH
17912: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
17916: LD_INT 50
17918: PPUSH
17919: LD_VAR 0 3
17923: PPUSH
17924: LD_INT 1
17926: PPUSH
17927: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17931: LD_INT 69
17933: PPUSH
17934: LD_VAR 0 3
17938: PPUSH
17939: LD_INT 1
17941: PPUSH
17942: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17946: LD_INT 39
17948: PPUSH
17949: LD_VAR 0 3
17953: PPUSH
17954: LD_INT 1
17956: PPUSH
17957: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17961: LD_INT 34
17963: PPUSH
17964: LD_VAR 0 3
17968: PPUSH
17969: LD_INT 1
17971: PPUSH
17972: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17976: LD_INT 42
17978: PPUSH
17979: LD_VAR 0 3
17983: PPUSH
17984: LD_INT 1
17986: PPUSH
17987: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17991: LD_INT 44
17993: PPUSH
17994: LD_VAR 0 3
17998: PPUSH
17999: LD_INT 1
18001: PPUSH
18002: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
18006: LD_INT 41
18008: PPUSH
18009: LD_VAR 0 3
18013: PPUSH
18014: LD_INT 1
18016: PPUSH
18017: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
18021: LD_INT 13
18023: PPUSH
18024: LD_VAR 0 3
18028: PPUSH
18029: LD_INT 1
18031: PPUSH
18032: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
18036: LD_INT 40
18038: PPUSH
18039: LD_VAR 0 3
18043: PPUSH
18044: LD_INT 1
18046: PPUSH
18047: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18051: LD_INT 43
18053: PPUSH
18054: LD_VAR 0 3
18058: PPUSH
18059: LD_INT 1
18061: PPUSH
18062: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
18066: LD_INT 70
18068: PPUSH
18069: LD_VAR 0 3
18073: PPUSH
18074: LD_INT 1
18076: PPUSH
18077: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
18081: LD_INT 23
18083: PPUSH
18084: LD_VAR 0 3
18088: PPUSH
18089: LD_INT 1
18091: PPUSH
18092: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18096: LD_INT 51
18098: PPUSH
18099: LD_VAR 0 3
18103: PPUSH
18104: LD_INT 1
18106: PPUSH
18107: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
18111: LD_INT 52
18113: PPUSH
18114: LD_VAR 0 3
18118: PPUSH
18119: LD_INT 1
18121: PPUSH
18122: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
18126: LD_INT 6
18128: PPUSH
18129: LD_VAR 0 3
18133: PPUSH
18134: LD_INT 1
18136: PPUSH
18137: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
18141: LD_INT 15
18143: PPUSH
18144: LD_VAR 0 3
18148: PPUSH
18149: LD_INT 1
18151: PPUSH
18152: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
18156: LD_INT 7
18158: PPUSH
18159: LD_VAR 0 3
18163: PPUSH
18164: LD_INT 1
18166: PPUSH
18167: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
18171: LD_INT 12
18173: PPUSH
18174: LD_VAR 0 3
18178: PPUSH
18179: LD_INT 1
18181: PPUSH
18182: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
18186: LD_INT 10
18188: PPUSH
18189: LD_VAR 0 3
18193: PPUSH
18194: LD_INT 1
18196: PPUSH
18197: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
18201: LD_INT 17
18203: PPUSH
18204: LD_VAR 0 3
18208: PPUSH
18209: LD_INT 1
18211: PPUSH
18212: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
18216: LD_INT 18
18218: PPUSH
18219: LD_VAR 0 3
18223: PPUSH
18224: LD_INT 1
18226: PPUSH
18227: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
18231: LD_INT 60
18233: PPUSH
18234: LD_VAR 0 3
18238: PPUSH
18239: LD_INT 1
18241: PPUSH
18242: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
18246: LD_INT 61
18248: PPUSH
18249: LD_VAR 0 3
18253: PPUSH
18254: LD_INT 1
18256: PPUSH
18257: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
18261: LD_INT 32
18263: PPUSH
18264: LD_VAR 0 3
18268: PPUSH
18269: LD_INT 1
18271: PPUSH
18272: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
18276: LD_INT 27
18278: PPUSH
18279: LD_VAR 0 3
18283: PPUSH
18284: LD_INT 1
18286: PPUSH
18287: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
18291: LD_INT 36
18293: PPUSH
18294: LD_VAR 0 3
18298: PPUSH
18299: LD_INT 1
18301: PPUSH
18302: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
18306: LD_INT 33
18308: PPUSH
18309: LD_VAR 0 3
18313: PPUSH
18314: LD_INT 1
18316: PPUSH
18317: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
18321: LD_INT 9
18323: PPUSH
18324: LD_VAR 0 3
18328: PPUSH
18329: LD_INT 1
18331: PPUSH
18332: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
18336: LD_INT 38
18338: PPUSH
18339: LD_VAR 0 3
18343: PPUSH
18344: LD_INT 1
18346: PPUSH
18347: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
18351: LD_INT 57
18353: PPUSH
18354: LD_VAR 0 3
18358: PPUSH
18359: LD_INT 1
18361: PPUSH
18362: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
18366: LD_INT 58
18368: PPUSH
18369: LD_VAR 0 3
18373: PPUSH
18374: LD_INT 1
18376: PPUSH
18377: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
18381: LD_INT 28
18383: PPUSH
18384: LD_VAR 0 3
18388: PPUSH
18389: LD_INT 1
18391: PPUSH
18392: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
18396: LD_INT 29
18398: PPUSH
18399: LD_VAR 0 3
18403: PPUSH
18404: LD_INT 1
18406: PPUSH
18407: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18411: LD_INT 30
18413: PPUSH
18414: LD_VAR 0 3
18418: PPUSH
18419: LD_INT 1
18421: PPUSH
18422: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
18426: LD_INT 37
18428: PPUSH
18429: LD_VAR 0 3
18433: PPUSH
18434: LD_INT 1
18436: PPUSH
18437: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
18441: LD_INT 63
18443: PPUSH
18444: LD_VAR 0 3
18448: PPUSH
18449: LD_INT 1
18451: PPUSH
18452: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
18456: LD_INT 64
18458: PPUSH
18459: LD_VAR 0 3
18463: PPUSH
18464: LD_INT 1
18466: PPUSH
18467: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
18471: LD_INT 3
18473: PPUSH
18474: LD_VAR 0 3
18478: PPUSH
18479: LD_INT 1
18481: PPUSH
18482: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
18486: LD_INT 4
18488: PPUSH
18489: LD_VAR 0 3
18493: PPUSH
18494: LD_INT 1
18496: PPUSH
18497: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18501: LD_INT 5
18503: PPUSH
18504: LD_VAR 0 3
18508: PPUSH
18509: LD_INT 1
18511: PPUSH
18512: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
18516: LD_INT 8
18518: PPUSH
18519: LD_VAR 0 3
18523: PPUSH
18524: LD_INT 1
18526: PPUSH
18527: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18531: LD_INT 66
18533: PPUSH
18534: LD_VAR 0 3
18538: PPUSH
18539: LD_INT 1
18541: PPUSH
18542: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
18546: LD_INT 67
18548: PPUSH
18549: LD_VAR 0 3
18553: PPUSH
18554: LD_INT 1
18556: PPUSH
18557: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18561: LD_INT 21
18563: PPUSH
18564: LD_VAR 0 3
18568: PPUSH
18569: LD_INT 1
18571: PPUSH
18572: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18576: LD_INT 22
18578: PPUSH
18579: LD_VAR 0 3
18583: PPUSH
18584: LD_INT 1
18586: PPUSH
18587: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
18591: LD_INT 19
18593: PPUSH
18594: LD_VAR 0 3
18598: PPUSH
18599: LD_INT 1
18601: PPUSH
18602: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
18606: LD_INT 26
18608: PPUSH
18609: LD_VAR 0 3
18613: PPUSH
18614: LD_INT 1
18616: PPUSH
18617: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
18621: LD_INT 54
18623: PPUSH
18624: LD_VAR 0 3
18628: PPUSH
18629: LD_INT 1
18631: PPUSH
18632: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
18636: LD_INT 55
18638: PPUSH
18639: LD_VAR 0 3
18643: PPUSH
18644: LD_INT 1
18646: PPUSH
18647: CALL_OW 322
// for i = 0 to 39 do
18651: LD_ADDR_VAR 0 4
18655: PUSH
18656: DOUBLE
18657: LD_INT 0
18659: DEC
18660: ST_TO_ADDR
18661: LD_INT 39
18663: PUSH
18664: FOR_TO
18665: IFFALSE 18686
// SetRestrict ( i , side , true ) ;
18667: LD_VAR 0 4
18671: PPUSH
18672: LD_VAR 0 3
18676: PPUSH
18677: LD_INT 1
18679: PPUSH
18680: CALL_OW 324
18684: GO 18664
18686: POP
18687: POP
// end ; else
18688: GO 18765
18690: POP
// begin for i = 1 to 73 do
18691: LD_ADDR_VAR 0 4
18695: PUSH
18696: DOUBLE
18697: LD_INT 1
18699: DEC
18700: ST_TO_ADDR
18701: LD_INT 73
18703: PUSH
18704: FOR_TO
18705: IFFALSE 18726
// SetTech ( i , side , state_enabled ) ;
18707: LD_VAR 0 4
18711: PPUSH
18712: LD_VAR 0 3
18716: PPUSH
18717: LD_INT 1
18719: PPUSH
18720: CALL_OW 322
18724: GO 18704
18726: POP
18727: POP
// for i = 0 to 39 do
18728: LD_ADDR_VAR 0 4
18732: PUSH
18733: DOUBLE
18734: LD_INT 0
18736: DEC
18737: ST_TO_ADDR
18738: LD_INT 39
18740: PUSH
18741: FOR_TO
18742: IFFALSE 18763
// SetRestrict ( i , side , true ) ;
18744: LD_VAR 0 4
18748: PPUSH
18749: LD_VAR 0 3
18753: PPUSH
18754: LD_INT 1
18756: PPUSH
18757: CALL_OW 324
18761: GO 18741
18763: POP
18764: POP
// end ; end ; end ;
18765: GO 14770
18767: POP
18768: POP
// end ;
18769: LD_VAR 0 2
18773: RET
