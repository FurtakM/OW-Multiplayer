// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_amount_of_siberit , def_public_score , def_siberite_bomb , def_builduptime , def_sheik , def_mastodont ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id , sheik , mastodont ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function read_multiplayer_and_game_parameters ; var i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// if Multiplayer then
   4: LD_OWVAR 4
   8: IFFALSE 72
// begin Game_Type := mp_game_type ;
  10: LD_ADDR_EXP 20
  14: PUSH
  15: LD_OWVAR 6
  19: ST_TO_ADDR
// Your_Side := mp_player_side ;
  20: LD_ADDR_OWVAR 2
  24: PUSH
  25: LD_OWVAR 7
  29: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  30: LD_ADDR_EXP 36
  34: PUSH
  35: LD_OWVAR 17
  39: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  40: LD_ADDR_EXP 34
  44: PUSH
  45: LD_OWVAR 15
  49: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
  50: LD_ADDR_EXP 37
  54: PUSH
  55: LD_OWVAR 16
  59: ST_TO_ADDR
// Teams := mp_teams ;
  60: LD_ADDR_EXP 35
  64: PUSH
  65: LD_OWVAR 12
  69: ST_TO_ADDR
// end else
  70: GO 254
// begin Game_Type := 1 ;
  72: LD_ADDR_EXP 20
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// Your_Side := 3 ;
  80: LD_ADDR_OWVAR 2
  84: PUSH
  85: LD_INT 3
  87: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
  88: LD_ADDR_EXP 36
  92: PUSH
  93: LD_INT 1
  95: PUSH
  96: LD_INT 2
  98: PUSH
  99: LD_INT 3
 101: PUSH
 102: LD_INT 4
 104: PUSH
 105: LD_INT 5
 107: PUSH
 108: LD_INT 6
 110: PUSH
 111: LD_INT 0
 113: PUSH
 114: LD_INT 0
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: LIST
 126: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 127: LD_ADDR_EXP 34
 131: PUSH
 132: LD_INT 1
 134: PUSH
 135: LD_INT 2
 137: PUSH
 138: LD_INT 3
 140: PUSH
 141: LD_INT 4
 143: PUSH
 144: LD_INT 5
 146: PUSH
 147: LD_INT 6
 149: PUSH
 150: LD_INT 0
 152: PUSH
 153: LD_INT 0
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: LIST
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 166: LD_ADDR_EXP 37
 170: PUSH
 171: LD_INT 1
 173: PUSH
 174: LD_INT 2
 176: PUSH
 177: LD_INT 3
 179: PUSH
 180: LD_INT 1
 182: PUSH
 183: LD_INT 2
 185: PUSH
 186: LD_INT 3
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 0
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 205: LD_ADDR_EXP 35
 209: PUSH
 210: LD_INT 1
 212: PUSH
 213: EMPTY
 214: LIST
 215: PUSH
 216: LD_INT 2
 218: PUSH
 219: EMPTY
 220: LIST
 221: PUSH
 222: LD_INT 3
 224: PUSH
 225: EMPTY
 226: LIST
 227: PUSH
 228: LD_INT 4
 230: PUSH
 231: EMPTY
 232: LIST
 233: PUSH
 234: LD_INT 5
 236: PUSH
 237: EMPTY
 238: LIST
 239: PUSH
 240: LD_INT 6
 242: PUSH
 243: EMPTY
 244: LIST
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: LIST
 252: LIST
 253: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 254: LD_ADDR_EXP 38
 258: PUSH
 259: LD_EXP 34
 263: PUSH
 264: LD_INT 0
 266: PUSH
 267: EMPTY
 268: LIST
 269: DIFF
 270: PUSH
 271: LD_INT 1
 273: GREATER
 274: ST_TO_ADDR
// if Multiplayer then
 275: LD_OWVAR 4
 279: IFFALSE 517
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 281: LD_ADDR_EXP 1
 285: PUSH
 286: LD_INT 0
 288: PPUSH
 289: CALL_OW 426
 293: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 294: LD_ADDR_EXP 2
 298: PUSH
 299: LD_INT 1
 301: PPUSH
 302: CALL_OW 426
 306: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 307: LD_ADDR_EXP 3
 311: PUSH
 312: LD_INT 2
 314: PPUSH
 315: CALL_OW 426
 319: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 320: LD_ADDR_EXP 4
 324: PUSH
 325: LD_INT 3
 327: PPUSH
 328: CALL_OW 426
 332: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 333: LD_ADDR_EXP 5
 337: PUSH
 338: LD_INT 4
 340: PPUSH
 341: CALL_OW 426
 345: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 346: LD_ADDR_EXP 6
 350: PUSH
 351: LD_INT 5
 353: PPUSH
 354: CALL_OW 426
 358: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 359: LD_ADDR_EXP 7
 363: PUSH
 364: LD_INT 6
 366: PPUSH
 367: CALL_OW 426
 371: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 372: LD_ADDR_EXP 8
 376: PUSH
 377: LD_INT 10
 379: PPUSH
 380: CALL_OW 426
 384: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 385: LD_ADDR_EXP 9
 389: PUSH
 390: LD_INT 11
 392: PPUSH
 393: CALL_OW 426
 397: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 398: LD_ADDR_EXP 10
 402: PUSH
 403: LD_INT 12
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 411: LD_ADDR_EXP 11
 415: PUSH
 416: LD_INT 13
 418: PPUSH
 419: CALL_OW 426
 423: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 424: LD_ADDR_EXP 12
 428: PUSH
 429: LD_INT 14
 431: PPUSH
 432: CALL_OW 426
 436: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 437: LD_ADDR_EXP 13
 441: PUSH
 442: LD_INT 15
 444: PPUSH
 445: CALL_OW 426
 449: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 450: LD_ADDR_EXP 14
 454: PUSH
 455: LD_INT 16
 457: PPUSH
 458: CALL_OW 426
 462: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 463: LD_ADDR_EXP 15
 467: PUSH
 468: LD_INT 17
 470: PPUSH
 471: CALL_OW 426
 475: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 476: LD_ADDR_EXP 16
 480: PUSH
 481: LD_INT 20
 483: PPUSH
 484: CALL_OW 426
 488: ST_TO_ADDR
// def_sheik := GetMultiplayerSetting ( 22 ) ;
 489: LD_ADDR_EXP 17
 493: PUSH
 494: LD_INT 22
 496: PPUSH
 497: CALL_OW 426
 501: ST_TO_ADDR
// def_mastodont := GetMultiplayerSetting ( 23 ) ;
 502: LD_ADDR_EXP 18
 506: PUSH
 507: LD_INT 23
 509: PPUSH
 510: CALL_OW 426
 514: ST_TO_ADDR
// end else
 515: GO 665
// begin Randomize ;
 517: CALL_OW 10
// def_base_level := 2 ;
 521: LD_ADDR_EXP 1
 525: PUSH
 526: LD_INT 2
 528: ST_TO_ADDR
// def_amount_of_people := 0 ;
 529: LD_ADDR_EXP 2
 533: PUSH
 534: LD_INT 0
 536: ST_TO_ADDR
// def_skill_level := 1 ;
 537: LD_ADDR_EXP 3
 541: PUSH
 542: LD_INT 1
 544: ST_TO_ADDR
// def_starting_resources := 2 ;
 545: LD_ADDR_EXP 4
 549: PUSH
 550: LD_INT 2
 552: ST_TO_ADDR
// def_shipments_density := 1 ;
 553: LD_ADDR_EXP 5
 557: PUSH
 558: LD_INT 1
 560: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
 561: LD_ADDR_EXP 6
 565: PUSH
 566: LD_INT 1
 568: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
 569: LD_ADDR_EXP 7
 573: PUSH
 574: LD_INT 2
 576: ST_TO_ADDR
// def_shared_vision := 1 ;
 577: LD_ADDR_EXP 8
 581: PUSH
 582: LD_INT 1
 584: ST_TO_ADDR
// def_morale_flags := 1 ;
 585: LD_ADDR_EXP 9
 589: PUSH
 590: LD_INT 1
 592: ST_TO_ADDR
// def_siberite_detection := 1 ;
 593: LD_ADDR_EXP 10
 597: PUSH
 598: LD_INT 1
 600: ST_TO_ADDR
// def_people_respawning := 2 ;
 601: LD_ADDR_EXP 11
 605: PUSH
 606: LD_INT 2
 608: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 609: LD_ADDR_EXP 12
 613: PUSH
 614: LD_INT 3
 616: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 617: LD_ADDR_EXP 13
 621: PUSH
 622: LD_INT 0
 624: ST_TO_ADDR
// def_public_score := 0 ;
 625: LD_ADDR_EXP 14
 629: PUSH
 630: LD_INT 0
 632: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 633: LD_ADDR_EXP 15
 637: PUSH
 638: LD_INT 0
 640: ST_TO_ADDR
// def_builduptime := 1 ;
 641: LD_ADDR_EXP 16
 645: PUSH
 646: LD_INT 1
 648: ST_TO_ADDR
// def_sheik := 0 ;
 649: LD_ADDR_EXP 17
 653: PUSH
 654: LD_INT 0
 656: ST_TO_ADDR
// def_mastodont := 0 ;
 657: LD_ADDR_EXP 18
 661: PUSH
 662: LD_INT 0
 664: ST_TO_ADDR
// end ; if isSGUI then
 665: LD_OWVAR 83
 669: IFFALSE 675
// setMpTechs ( ) ;
 671: CALL 10990 0 0
// if ( Game_Type = 5 ) then
 675: LD_EXP 20
 679: PUSH
 680: LD_INT 5
 682: EQUAL
 683: IFFALSE 712
// begin def_base_level := 1 ;
 685: LD_ADDR_EXP 1
 689: PUSH
 690: LD_INT 1
 692: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 693: LD_ADDR_EXP 6
 697: PUSH
 698: LD_INT 0
 700: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
 701: LD_ADDR_EXP 7
 705: PUSH
 706: LD_INT 0
 708: ST_TO_ADDR
// disable ( 10 ) ;
 709: LD_INT 10
 711: DISABLE_MARKED
// end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 712: LD_ADDR_EXP 21
 716: PUSH
 717: LD_INT 0
 719: PUSH
 720: LD_INT 1
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: LIST
 730: PUSH
 731: LD_EXP 1
 735: PUSH
 736: LD_INT 1
 738: PLUS
 739: ARRAY
 740: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 ] [ def_base_level + 1 ] ;
 741: LD_ADDR_EXP 22
 745: PUSH
 746: LD_INT 0
 748: PUSH
 749: LD_INT 0
 751: PUSH
 752: LD_INT 2
 754: PUSH
 755: EMPTY
 756: LIST
 757: LIST
 758: LIST
 759: PUSH
 760: LD_EXP 1
 764: PUSH
 765: LD_INT 1
 767: PLUS
 768: ARRAY
 769: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 770: LD_ADDR_EXP 23
 774: PUSH
 775: LD_INT 9
 777: PUSH
 778: LD_INT 12
 780: PUSH
 781: LD_INT 15
 783: PUSH
 784: LD_INT 24
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: LIST
 791: LIST
 792: PUSH
 793: LD_EXP 2
 797: PUSH
 798: LD_INT 1
 800: PLUS
 801: ARRAY
 802: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 , 8 ] [ def_skill_level + 1 ] ;
 803: LD_ADDR_EXP 24
 807: PUSH
 808: LD_INT 2
 810: PUSH
 811: LD_INT 3
 813: PUSH
 814: LD_INT 4
 816: PUSH
 817: LD_INT 5
 819: PUSH
 820: LD_INT 8
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: LIST
 827: LIST
 828: LIST
 829: PUSH
 830: LD_EXP 3
 834: PUSH
 835: LD_INT 1
 837: PLUS
 838: ARRAY
 839: ST_TO_ADDR
// if ( Game_Type = 5 ) then
 840: LD_EXP 20
 844: PUSH
 845: LD_INT 5
 847: EQUAL
 848: IFFALSE 966
// begin starting_resources := [ [ 1000 , 100 , 100 ] , [ 2000 , 200 , 200 ] , [ 5000 , 500 , 500 ] , [ 10000 , 1000 , 1000 ] , [ 25000 , 2500 , 2500 ] , [ 50000 , 5000 , 5000 ] ] [ def_starting_resources + 1 ] ;
 850: LD_ADDR_EXP 26
 854: PUSH
 855: LD_INT 1000
 857: PUSH
 858: LD_INT 100
 860: PUSH
 861: LD_INT 100
 863: PUSH
 864: EMPTY
 865: LIST
 866: LIST
 867: LIST
 868: PUSH
 869: LD_INT 2000
 871: PUSH
 872: LD_INT 200
 874: PUSH
 875: LD_INT 200
 877: PUSH
 878: EMPTY
 879: LIST
 880: LIST
 881: LIST
 882: PUSH
 883: LD_INT 5000
 885: PUSH
 886: LD_INT 500
 888: PUSH
 889: LD_INT 500
 891: PUSH
 892: EMPTY
 893: LIST
 894: LIST
 895: LIST
 896: PUSH
 897: LD_INT 10000
 899: PUSH
 900: LD_INT 1000
 902: PUSH
 903: LD_INT 1000
 905: PUSH
 906: EMPTY
 907: LIST
 908: LIST
 909: LIST
 910: PUSH
 911: LD_INT 25000
 913: PUSH
 914: LD_INT 2500
 916: PUSH
 917: LD_INT 2500
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: LIST
 924: PUSH
 925: LD_INT 50000
 927: PUSH
 928: LD_INT 5000
 930: PUSH
 931: LD_INT 5000
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: LIST
 938: PUSH
 939: EMPTY
 940: LIST
 941: LIST
 942: LIST
 943: LIST
 944: LIST
 945: LIST
 946: PUSH
 947: LD_EXP 4
 951: PUSH
 952: LD_INT 1
 954: PLUS
 955: ARRAY
 956: ST_TO_ADDR
// starting_crates := [ ] ;
 957: LD_ADDR_EXP 25
 961: PUSH
 962: EMPTY
 963: ST_TO_ADDR
// end else
 964: GO 1112
// begin starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 966: LD_ADDR_EXP 26
 970: PUSH
 971: LD_INT 0
 973: PUSH
 974: LD_INT 0
 976: PUSH
 977: LD_INT 0
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: LIST
 984: PUSH
 985: LD_INT 30
 987: PUSH
 988: LD_INT 0
 990: PUSH
 991: LD_INT 0
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 50
1001: PUSH
1002: LD_INT 20
1004: PUSH
1005: LD_INT 0
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: LIST
1012: PUSH
1013: LD_INT 80
1015: PUSH
1016: LD_INT 40
1018: PUSH
1019: LD_INT 20
1021: PUSH
1022: EMPTY
1023: LIST
1024: LIST
1025: LIST
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: PUSH
1033: LD_EXP 4
1037: PUSH
1038: LD_INT 1
1040: PLUS
1041: ARRAY
1042: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1043: LD_ADDR_EXP 25
1047: PUSH
1048: LD_INT 10
1050: PUSH
1051: EMPTY
1052: LIST
1053: PUSH
1054: LD_INT 7
1056: PUSH
1057: LD_INT 14
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: PUSH
1064: LD_INT 6
1066: PUSH
1067: LD_INT 12
1069: PUSH
1070: LD_INT 18
1072: PUSH
1073: EMPTY
1074: LIST
1075: LIST
1076: LIST
1077: PUSH
1078: LD_INT 5
1080: PUSH
1081: LD_INT 10
1083: PUSH
1084: LD_INT 15
1086: PUSH
1087: LD_INT 20
1089: PUSH
1090: EMPTY
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: LIST
1100: LIST
1101: PUSH
1102: LD_EXP 4
1106: PUSH
1107: LD_INT 1
1109: PLUS
1110: ARRAY
1111: ST_TO_ADDR
// end ; shipments_density := [ 150 , 125 , 100 , 50 ] [ def_shipments_density + 1 ] ;
1112: LD_ADDR_EXP 27
1116: PUSH
1117: LD_INT 150
1119: PUSH
1120: LD_INT 125
1122: PUSH
1123: LD_INT 100
1125: PUSH
1126: LD_INT 50
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: LIST
1133: LIST
1134: PUSH
1135: LD_EXP 5
1139: PUSH
1140: LD_INT 1
1142: PLUS
1143: ARRAY
1144: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1145: LD_ADDR_EXP 31
1149: PUSH
1150: LD_INT 0
1152: PUSH
1153: LD_INT 10500
1155: PUSH
1156: LD_INT 6300
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: LIST
1163: PUSH
1164: LD_EXP 11
1168: PUSH
1169: LD_INT 1
1171: PLUS
1172: ARRAY
1173: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1174: LD_ADDR_EXP 32
1178: PUSH
1179: LD_INT 0
1181: PUSH
1182: LD_INT 31500
1184: PUSH
1185: LD_INT 10500
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: PUSH
1193: LD_EXP 11
1197: PUSH
1198: LD_INT 1
1200: PLUS
1201: ARRAY
1202: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1203: LD_ADDR_EXP 29
1207: PUSH
1208: LD_INT 0
1210: PUSH
1211: LD_INT 1
1213: PUSH
1214: LD_INT 2
1216: PUSH
1217: LD_INT 3
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: PUSH
1226: LD_EXP 12
1230: PUSH
1231: LD_INT 1
1233: PLUS
1234: ARRAY
1235: ST_TO_ADDR
// amount_of_siberit := [ 30 , 50 , 80 , 100 , 130 , 150 , 200 ] [ def_amount_of_siberit + 1 ] ;
1236: LD_ADDR_EXP 30
1240: PUSH
1241: LD_INT 30
1243: PUSH
1244: LD_INT 50
1246: PUSH
1247: LD_INT 80
1249: PUSH
1250: LD_INT 100
1252: PUSH
1253: LD_INT 130
1255: PUSH
1256: LD_INT 150
1258: PUSH
1259: LD_INT 200
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: LIST
1270: PUSH
1271: LD_EXP 13
1275: PUSH
1276: LD_INT 1
1278: PLUS
1279: ARRAY
1280: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1281: LD_ADDR_EXP 28
1285: PUSH
1286: LD_INT 1
1288: NEG
1289: PUSH
1290: LD_INT 350
1292: PUSH
1293: LD_INT 700
1295: PUSH
1296: LD_INT 1400
1298: PUSH
1299: LD_INT 0
1301: PUSH
1302: EMPTY
1303: LIST
1304: LIST
1305: LIST
1306: LIST
1307: LIST
1308: PUSH
1309: LD_EXP 9
1313: PUSH
1314: LD_INT 1
1316: PLUS
1317: ARRAY
1318: ST_TO_ADDR
// battle_flags_id := [ ] ;
1319: LD_ADDR_EXP 46
1323: PUSH
1324: EMPTY
1325: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1326: LD_ADDR_EXP 33
1330: PUSH
1331: LD_INT 0
1333: PUSH
1334: LD_INT 1
1336: PUSH
1337: LD_INT 63000
1339: PUSH
1340: LD_INT 126000
1342: PUSH
1343: LD_INT 189000
1345: PUSH
1346: LD_INT 252000
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: PUSH
1357: LD_EXP 15
1361: PUSH
1362: LD_INT 1
1364: PLUS
1365: ARRAY
1366: ST_TO_ADDR
// if ( Game_Type = 12 ) then
1367: LD_EXP 20
1371: PUSH
1372: LD_INT 12
1374: EQUAL
1375: IFFALSE 1433
// begin sheik := [ 0 , 1 ] [ def_sheik + 1 ] ;
1377: LD_ADDR_EXP 47
1381: PUSH
1382: LD_INT 0
1384: PUSH
1385: LD_INT 1
1387: PUSH
1388: EMPTY
1389: LIST
1390: LIST
1391: PUSH
1392: LD_EXP 17
1396: PUSH
1397: LD_INT 1
1399: PLUS
1400: ARRAY
1401: ST_TO_ADDR
// mastodont := [ 0 , 1 , 2 ] [ def_mastodont + 1 ] end else
1402: LD_ADDR_EXP 48
1406: PUSH
1407: LD_INT 0
1409: PUSH
1410: LD_INT 1
1412: PUSH
1413: LD_INT 2
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: LIST
1420: PUSH
1421: LD_EXP 18
1425: PUSH
1426: LD_INT 1
1428: PLUS
1429: ARRAY
1430: ST_TO_ADDR
1431: GO 1449
// begin sheik := 0 ;
1433: LD_ADDR_EXP 47
1437: PUSH
1438: LD_INT 0
1440: ST_TO_ADDR
// mastodont := 0 ;
1441: LD_ADDR_EXP 48
1445: PUSH
1446: LD_INT 0
1448: ST_TO_ADDR
// end ; end ;
1449: LD_VAR 0 1
1453: RET
// function init_map ; var i , j ; begin
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
1458: PPUSH
// normal_oil_deposits_locations := [ [ 101 , 187 ] , [ 18 , 26 ] , [ 50 , 89 ] , [ 123 , 3 ] , [ 182 , 69 ] , [ 231 , 174 ] ] ;
1459: LD_ADDR_EXP 42
1463: PUSH
1464: LD_INT 101
1466: PUSH
1467: LD_INT 187
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: PUSH
1474: LD_INT 18
1476: PUSH
1477: LD_INT 26
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: PUSH
1484: LD_INT 50
1486: PUSH
1487: LD_INT 89
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 123
1496: PUSH
1497: LD_INT 3
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PUSH
1504: LD_INT 182
1506: PUSH
1507: LD_INT 69
1509: PUSH
1510: EMPTY
1511: LIST
1512: LIST
1513: PUSH
1514: LD_INT 231
1516: PUSH
1517: LD_INT 174
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: LIST
1531: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 101 , 187 ] , [ 108 , 183 ] ] , [ [ 18 , 26 ] , [ 7 , 8 ] ] , [ [ 50 , 89 ] , [ 62 , 99 ] ] , [ [ 123 , 3 ] , [ 149 , 18 ] ] , [ [ 182 , 69 ] , [ 202 , 90 ] ] , [ [ 231 , 174 ] , [ 239 , 164 ] ] ] ;
1532: LD_ADDR_EXP 43
1536: PUSH
1537: LD_INT 101
1539: PUSH
1540: LD_INT 187
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: PUSH
1547: LD_INT 108
1549: PUSH
1550: LD_INT 183
1552: PUSH
1553: EMPTY
1554: LIST
1555: LIST
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: PUSH
1561: LD_INT 18
1563: PUSH
1564: LD_INT 26
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: PUSH
1571: LD_INT 7
1573: PUSH
1574: LD_INT 8
1576: PUSH
1577: EMPTY
1578: LIST
1579: LIST
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: PUSH
1585: LD_INT 50
1587: PUSH
1588: LD_INT 89
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PUSH
1595: LD_INT 62
1597: PUSH
1598: LD_INT 99
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: PUSH
1605: EMPTY
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 123
1611: PUSH
1612: LD_INT 3
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PUSH
1619: LD_INT 149
1621: PUSH
1622: LD_INT 18
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: PUSH
1633: LD_INT 182
1635: PUSH
1636: LD_INT 69
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: PUSH
1643: LD_INT 202
1645: PUSH
1646: LD_INT 90
1648: PUSH
1649: EMPTY
1650: LIST
1651: LIST
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PUSH
1657: LD_INT 231
1659: PUSH
1660: LD_INT 174
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: PUSH
1667: LD_INT 239
1669: PUSH
1670: LD_INT 164
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: PUSH
1677: EMPTY
1678: LIST
1679: LIST
1680: PUSH
1681: EMPTY
1682: LIST
1683: LIST
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 96 , 185 ] , [ 21 , 29 ] , [ 50 , 85 ] , [ 128 , 2 ] , [ 186 , 72 ] , [ 234 , 174 ] ] ;
1689: LD_ADDR_EXP 44
1693: PUSH
1694: LD_INT 96
1696: PUSH
1697: LD_INT 185
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 21
1706: PUSH
1707: LD_INT 29
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: PUSH
1714: LD_INT 50
1716: PUSH
1717: LD_INT 85
1719: PUSH
1720: EMPTY
1721: LIST
1722: LIST
1723: PUSH
1724: LD_INT 128
1726: PUSH
1727: LD_INT 2
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: PUSH
1734: LD_INT 186
1736: PUSH
1737: LD_INT 72
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: PUSH
1744: LD_INT 234
1746: PUSH
1747: LD_INT 174
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: LIST
1758: LIST
1759: LIST
1760: LIST
1761: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 96 , 185 ] , [ 109 , 179 ] ] , [ [ 21 , 29 ] , [ 9 , 5 ] ] , [ [ 50 , 85 ] , [ 66 , 102 ] ] , [ [ 128 , 2 ] , [ 152 , 15 ] ] , [ [ 186 , 72 ] , [ 200 , 86 ] ] , [ [ 234 , 174 ] , [ 237 , 160 ] ] ] ;
1762: LD_ADDR_EXP 45
1766: PUSH
1767: LD_INT 96
1769: PUSH
1770: LD_INT 185
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: PUSH
1777: LD_INT 109
1779: PUSH
1780: LD_INT 179
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: PUSH
1791: LD_INT 21
1793: PUSH
1794: LD_INT 29
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: PUSH
1801: LD_INT 9
1803: PUSH
1804: LD_INT 5
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: PUSH
1815: LD_INT 50
1817: PUSH
1818: LD_INT 85
1820: PUSH
1821: EMPTY
1822: LIST
1823: LIST
1824: PUSH
1825: LD_INT 66
1827: PUSH
1828: LD_INT 102
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: PUSH
1835: EMPTY
1836: LIST
1837: LIST
1838: PUSH
1839: LD_INT 128
1841: PUSH
1842: LD_INT 2
1844: PUSH
1845: EMPTY
1846: LIST
1847: LIST
1848: PUSH
1849: LD_INT 152
1851: PUSH
1852: LD_INT 15
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: PUSH
1863: LD_INT 186
1865: PUSH
1866: LD_INT 72
1868: PUSH
1869: EMPTY
1870: LIST
1871: LIST
1872: PUSH
1873: LD_INT 200
1875: PUSH
1876: LD_INT 86
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: LD_INT 234
1889: PUSH
1890: LD_INT 174
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: PUSH
1897: LD_INT 237
1899: PUSH
1900: LD_INT 160
1902: PUSH
1903: EMPTY
1904: LIST
1905: LIST
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: ST_TO_ADDR
// depot_def := [ [ 100 , 179 , 0 ] , [ 21 , 18 , 2 ] , [ 65 , 90 , 2 ] , [ 132 , 11 , 1 ] , [ 190 , 82 , 4 ] , [ 230 , 164 , 4 ] ] ;
1919: LD_ADDR_EXP 39
1923: PUSH
1924: LD_INT 100
1926: PUSH
1927: LD_INT 179
1929: PUSH
1930: LD_INT 0
1932: PUSH
1933: EMPTY
1934: LIST
1935: LIST
1936: LIST
1937: PUSH
1938: LD_INT 21
1940: PUSH
1941: LD_INT 18
1943: PUSH
1944: LD_INT 2
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: PUSH
1952: LD_INT 65
1954: PUSH
1955: LD_INT 90
1957: PUSH
1958: LD_INT 2
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: LIST
1965: PUSH
1966: LD_INT 132
1968: PUSH
1969: LD_INT 11
1971: PUSH
1972: LD_INT 1
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: LIST
1979: PUSH
1980: LD_INT 190
1982: PUSH
1983: LD_INT 82
1985: PUSH
1986: LD_INT 4
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: LIST
1993: PUSH
1994: LD_INT 230
1996: PUSH
1997: LD_INT 164
1999: PUSH
2000: LD_INT 4
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: LIST
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: LIST
2015: ST_TO_ADDR
// for i in depot_def do
2016: LD_ADDR_VAR 0 2
2020: PUSH
2021: LD_EXP 39
2025: PUSH
2026: FOR_IN
2027: IFFALSE 2101
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 10 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 10 ) ] ] ;
2029: LD_ADDR_EXP 41
2033: PUSH
2034: LD_EXP 41
2038: PUSH
2039: LD_VAR 0 2
2043: PUSH
2044: LD_INT 1
2046: ARRAY
2047: PPUSH
2048: LD_VAR 0 2
2052: PUSH
2053: LD_INT 3
2055: ARRAY
2056: PPUSH
2057: LD_INT 10
2059: PPUSH
2060: CALL_OW 272
2064: PUSH
2065: LD_VAR 0 2
2069: PUSH
2070: LD_INT 2
2072: ARRAY
2073: PPUSH
2074: LD_VAR 0 2
2078: PUSH
2079: LD_INT 3
2081: ARRAY
2082: PPUSH
2083: LD_INT 10
2085: PPUSH
2086: CALL_OW 273
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: PUSH
2095: EMPTY
2096: LIST
2097: ADD
2098: ST_TO_ADDR
2099: GO 2026
2101: POP
2102: POP
// breastworks_def := [ [ [ 88 , 154 , 3 ] , [ 105 , 167 , 4 ] ] , [ [ 27 , 32 , 5 ] , [ 40 , 24 , 4 ] ] , [ [ 78 , 102 , 5 ] , [ 74 , 84 , 3 ] ] , [ [ 128 , 20 , 0 ] , [ 122 , 6 , 1 ] ] , [ [ 185 , 92 , 0 ] , [ 175 , 73 , 1 ] ] , [ [ 219 , 171 , 1 ] , [ 219 , 151 , 2 ] ] ] ;
2103: LD_ADDR_EXP 40
2107: PUSH
2108: LD_INT 88
2110: PUSH
2111: LD_INT 154
2113: PUSH
2114: LD_INT 3
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: LIST
2121: PUSH
2122: LD_INT 105
2124: PUSH
2125: LD_INT 167
2127: PUSH
2128: LD_INT 4
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: LIST
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: PUSH
2140: LD_INT 27
2142: PUSH
2143: LD_INT 32
2145: PUSH
2146: LD_INT 5
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: LIST
2153: PUSH
2154: LD_INT 40
2156: PUSH
2157: LD_INT 24
2159: PUSH
2160: LD_INT 4
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: LIST
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: PUSH
2172: LD_INT 78
2174: PUSH
2175: LD_INT 102
2177: PUSH
2178: LD_INT 5
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: LIST
2185: PUSH
2186: LD_INT 74
2188: PUSH
2189: LD_INT 84
2191: PUSH
2192: LD_INT 3
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: LIST
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: PUSH
2204: LD_INT 128
2206: PUSH
2207: LD_INT 20
2209: PUSH
2210: LD_INT 0
2212: PUSH
2213: EMPTY
2214: LIST
2215: LIST
2216: LIST
2217: PUSH
2218: LD_INT 122
2220: PUSH
2221: LD_INT 6
2223: PUSH
2224: LD_INT 1
2226: PUSH
2227: EMPTY
2228: LIST
2229: LIST
2230: LIST
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PUSH
2236: LD_INT 185
2238: PUSH
2239: LD_INT 92
2241: PUSH
2242: LD_INT 0
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: LIST
2249: PUSH
2250: LD_INT 175
2252: PUSH
2253: LD_INT 73
2255: PUSH
2256: LD_INT 1
2258: PUSH
2259: EMPTY
2260: LIST
2261: LIST
2262: LIST
2263: PUSH
2264: EMPTY
2265: LIST
2266: LIST
2267: PUSH
2268: LD_INT 219
2270: PUSH
2271: LD_INT 171
2273: PUSH
2274: LD_INT 1
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: LIST
2281: PUSH
2282: LD_INT 219
2284: PUSH
2285: LD_INT 151
2287: PUSH
2288: LD_INT 2
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: LIST
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: EMPTY
2301: LIST
2302: LIST
2303: LIST
2304: LIST
2305: LIST
2306: LIST
2307: ST_TO_ADDR
// for i = 1 to Side_Positions do
2308: LD_ADDR_VAR 0 2
2312: PUSH
2313: DOUBLE
2314: LD_INT 1
2316: DEC
2317: ST_TO_ADDR
2318: LD_EXP 36
2322: PUSH
2323: FOR_TO
2324: IFFALSE 2454
// begin if not Side_Positions [ i ] then
2326: LD_EXP 36
2330: PUSH
2331: LD_VAR 0 2
2335: ARRAY
2336: NOT
2337: IFFALSE 2341
// continue ;
2339: GO 2323
// if def_extra_oil_deposits then
2341: LD_EXP 6
2345: IFFALSE 2403
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2347: LD_ADDR_VAR 0 3
2351: PUSH
2352: LD_EXP 43
2356: PUSH
2357: LD_EXP 36
2361: PUSH
2362: LD_VAR 0 2
2366: ARRAY
2367: ARRAY
2368: PUSH
2369: FOR_IN
2370: IFFALSE 2399
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2372: LD_VAR 0 3
2376: PUSH
2377: LD_INT 1
2379: ARRAY
2380: PPUSH
2381: LD_VAR 0 3
2385: PUSH
2386: LD_INT 2
2388: ARRAY
2389: PPUSH
2390: LD_INT 2
2392: PPUSH
2393: CALL_OW 62
2397: GO 2369
2399: POP
2400: POP
2401: GO 2452
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2403: LD_EXP 42
2407: PUSH
2408: LD_EXP 36
2412: PUSH
2413: LD_VAR 0 2
2417: ARRAY
2418: ARRAY
2419: PUSH
2420: LD_INT 1
2422: ARRAY
2423: PPUSH
2424: LD_EXP 42
2428: PUSH
2429: LD_EXP 36
2433: PUSH
2434: LD_VAR 0 2
2438: ARRAY
2439: ARRAY
2440: PUSH
2441: LD_INT 2
2443: ARRAY
2444: PPUSH
2445: LD_INT 2
2447: PPUSH
2448: CALL_OW 62
// end ;
2452: GO 2323
2454: POP
2455: POP
// if def_extra_sib_deposits then
2456: LD_EXP 7
2460: IFFALSE 2614
// for i = 1 to Side_Positions do
2462: LD_ADDR_VAR 0 2
2466: PUSH
2467: DOUBLE
2468: LD_INT 1
2470: DEC
2471: ST_TO_ADDR
2472: LD_EXP 36
2476: PUSH
2477: FOR_TO
2478: IFFALSE 2612
// begin if not Side_Positions [ i ] then
2480: LD_EXP 36
2484: PUSH
2485: LD_VAR 0 2
2489: ARRAY
2490: NOT
2491: IFFALSE 2495
// continue ;
2493: GO 2477
// if def_extra_sib_deposits = 2 then
2495: LD_EXP 7
2499: PUSH
2500: LD_INT 2
2502: EQUAL
2503: IFFALSE 2561
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
2505: LD_ADDR_VAR 0 3
2509: PUSH
2510: LD_EXP 45
2514: PUSH
2515: LD_EXP 36
2519: PUSH
2520: LD_VAR 0 2
2524: ARRAY
2525: ARRAY
2526: PUSH
2527: FOR_IN
2528: IFFALSE 2557
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2530: LD_VAR 0 3
2534: PUSH
2535: LD_INT 1
2537: ARRAY
2538: PPUSH
2539: LD_VAR 0 3
2543: PUSH
2544: LD_INT 2
2546: ARRAY
2547: PPUSH
2548: LD_INT 3
2550: PPUSH
2551: CALL_OW 62
2555: GO 2527
2557: POP
2558: POP
2559: GO 2610
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2561: LD_EXP 44
2565: PUSH
2566: LD_EXP 36
2570: PUSH
2571: LD_VAR 0 2
2575: ARRAY
2576: ARRAY
2577: PUSH
2578: LD_INT 1
2580: ARRAY
2581: PPUSH
2582: LD_EXP 44
2586: PUSH
2587: LD_EXP 36
2591: PUSH
2592: LD_VAR 0 2
2596: ARRAY
2597: ARRAY
2598: PUSH
2599: LD_INT 2
2601: ARRAY
2602: PPUSH
2603: LD_INT 3
2605: PPUSH
2606: CALL_OW 62
// end ;
2610: GO 2477
2612: POP
2613: POP
// end ;
2614: LD_VAR 0 1
2618: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2619: LD_INT 0
2621: PPUSH
2622: PPUSH
2623: PPUSH
// if not Team_Game then
2624: LD_EXP 38
2628: NOT
2629: IFFALSE 2727
// begin for i = 1 to 8 do
2631: LD_ADDR_VAR 0 2
2635: PUSH
2636: DOUBLE
2637: LD_INT 1
2639: DEC
2640: ST_TO_ADDR
2641: LD_INT 8
2643: PUSH
2644: FOR_TO
2645: IFFALSE 2723
// for j = 1 to 8 do
2647: LD_ADDR_VAR 0 3
2651: PUSH
2652: DOUBLE
2653: LD_INT 1
2655: DEC
2656: ST_TO_ADDR
2657: LD_INT 8
2659: PUSH
2660: FOR_TO
2661: IFFALSE 2719
// if i <> j then
2663: LD_VAR 0 2
2667: PUSH
2668: LD_VAR 0 3
2672: NONEQUAL
2673: IFFALSE 2697
// SetAttitude ( i , j , att_neutral , true ) else
2675: LD_VAR 0 2
2679: PPUSH
2680: LD_VAR 0 3
2684: PPUSH
2685: LD_INT 0
2687: PPUSH
2688: LD_INT 1
2690: PPUSH
2691: CALL_OW 80
2695: GO 2717
// SetAttitude ( i , j , att_friend , true ) ;
2697: LD_VAR 0 2
2701: PPUSH
2702: LD_VAR 0 3
2706: PPUSH
2707: LD_INT 1
2709: PPUSH
2710: LD_INT 1
2712: PPUSH
2713: CALL_OW 80
2717: GO 2660
2719: POP
2720: POP
2721: GO 2644
2723: POP
2724: POP
// end else
2725: GO 2902
// begin if def_shared_vision then
2727: LD_EXP 8
2731: IFFALSE 2796
// begin for i in Teams do
2733: LD_ADDR_VAR 0 2
2737: PUSH
2738: LD_EXP 35
2742: PUSH
2743: FOR_IN
2744: IFFALSE 2794
// for j = 2 to i do
2746: LD_ADDR_VAR 0 3
2750: PUSH
2751: DOUBLE
2752: LD_INT 2
2754: DEC
2755: ST_TO_ADDR
2756: LD_VAR 0 2
2760: PUSH
2761: FOR_TO
2762: IFFALSE 2790
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2764: LD_VAR 0 2
2768: PUSH
2769: LD_VAR 0 3
2773: ARRAY
2774: PPUSH
2775: LD_VAR 0 2
2779: PUSH
2780: LD_INT 1
2782: ARRAY
2783: PPUSH
2784: CALL_OW 343
2788: GO 2761
2790: POP
2791: POP
2792: GO 2743
2794: POP
2795: POP
// end ; for i = 1 to 8 do
2796: LD_ADDR_VAR 0 2
2800: PUSH
2801: DOUBLE
2802: LD_INT 1
2804: DEC
2805: ST_TO_ADDR
2806: LD_INT 8
2808: PUSH
2809: FOR_TO
2810: IFFALSE 2900
// for j = 1 to 8 do
2812: LD_ADDR_VAR 0 3
2816: PUSH
2817: DOUBLE
2818: LD_INT 1
2820: DEC
2821: ST_TO_ADDR
2822: LD_INT 8
2824: PUSH
2825: FOR_TO
2826: IFFALSE 2896
// if Side_Teams [ i ] = Side_Teams [ j ] then
2828: LD_EXP 34
2832: PUSH
2833: LD_VAR 0 2
2837: ARRAY
2838: PUSH
2839: LD_EXP 34
2843: PUSH
2844: LD_VAR 0 3
2848: ARRAY
2849: EQUAL
2850: IFFALSE 2874
// SetAttitude ( i , j , att_friend , true ) else
2852: LD_VAR 0 2
2856: PPUSH
2857: LD_VAR 0 3
2861: PPUSH
2862: LD_INT 1
2864: PPUSH
2865: LD_INT 1
2867: PPUSH
2868: CALL_OW 80
2872: GO 2894
// SetAttitude ( i , j , att_enemy , true ) ;
2874: LD_VAR 0 2
2878: PPUSH
2879: LD_VAR 0 3
2883: PPUSH
2884: LD_INT 2
2886: PPUSH
2887: LD_INT 1
2889: PPUSH
2890: CALL_OW 80
2894: GO 2825
2896: POP
2897: POP
2898: GO 2809
2900: POP
2901: POP
// end ; end ;
2902: LD_VAR 0 1
2906: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2907: LD_INT 0
2909: PPUSH
2910: PPUSH
2911: PPUSH
2912: PPUSH
// result := [ ] ;
2913: LD_ADDR_VAR 0 7
2917: PUSH
2918: EMPTY
2919: ST_TO_ADDR
// for i := 1 to count do
2920: LD_ADDR_VAR 0 8
2924: PUSH
2925: DOUBLE
2926: LD_INT 1
2928: DEC
2929: ST_TO_ADDR
2930: LD_VAR 0 1
2934: PUSH
2935: FOR_TO
2936: IFFALSE 3386
// begin uc_direction := Rand ( 0 , 5 ) ;
2938: LD_ADDR_OWVAR 24
2942: PUSH
2943: LD_INT 0
2945: PPUSH
2946: LD_INT 5
2948: PPUSH
2949: CALL_OW 12
2953: ST_TO_ADDR
// if commander then
2954: LD_LOC 1
2958: IFFALSE 3099
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2960: LD_ADDR_OWVAR 26
2964: PUSH
2965: LD_OWVAR 19
2969: PUSH
2970: LD_OWVAR 20
2974: ARRAY
2975: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2976: LD_INT 1
2978: PPUSH
2979: LD_INT 2
2981: PPUSH
2982: CALL_OW 12
2986: PPUSH
2987: LD_VAR 0 2
2991: PPUSH
2992: LD_EXP 24
2996: PUSH
2997: LD_INT 2
2999: PLUS
3000: PPUSH
3001: CALL_OW 380
// hc_importance := 105 ;
3005: LD_ADDR_OWVAR 32
3009: PUSH
3010: LD_INT 105
3012: ST_TO_ADDR
// commander := false ;
3013: LD_ADDR_LOC 1
3017: PUSH
3018: LD_INT 0
3020: ST_TO_ADDR
// if Multiplayer then
3021: LD_OWVAR 4
3025: IFFALSE 3097
// begin if sheik then
3027: LD_EXP 47
3031: IFFALSE 3059
// begin hc_gallery :=  ;
3033: LD_ADDR_OWVAR 33
3037: PUSH
3038: LD_STRING 
3040: ST_TO_ADDR
// hc_class := class_desert_warior ;
3041: LD_ADDR_OWVAR 28
3045: PUSH
3046: LD_INT 11
3048: ST_TO_ADDR
// hc_sex := sex_male ;
3049: LD_ADDR_OWVAR 27
3053: PUSH
3054: LD_INT 1
3056: ST_TO_ADDR
// end else
3057: GO 3097
// begin hc_gallery := MULTIAVATARS ;
3059: LD_ADDR_OWVAR 33
3063: PUSH
3064: LD_STRING MULTIAVATARS
3066: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3067: LD_ADDR_OWVAR 34
3071: PUSH
3072: LD_OWVAR 20
3076: PPUSH
3077: CALL_OW 525
3081: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3082: LD_ADDR_OWVAR 27
3086: PUSH
3087: LD_OWVAR 20
3091: PPUSH
3092: CALL_OW 526
3096: ST_TO_ADDR
// end ; end ; end else
3097: GO 3162
// begin hc_name :=  ;
3099: LD_ADDR_OWVAR 26
3103: PUSH
3104: LD_STRING 
3106: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3107: LD_INT 1
3109: PPUSH
3110: LD_INT 2
3112: PPUSH
3113: CALL_OW 12
3117: PPUSH
3118: LD_VAR 0 2
3122: PPUSH
3123: LD_EXP 24
3127: PPUSH
3128: CALL_OW 380
// hc_importance := 0 ;
3132: LD_ADDR_OWVAR 32
3136: PUSH
3137: LD_INT 0
3139: ST_TO_ADDR
// if Multiplayer then
3140: LD_OWVAR 4
3144: IFFALSE 3162
// begin hc_gallery :=  ;
3146: LD_ADDR_OWVAR 33
3150: PUSH
3151: LD_STRING 
3153: ST_TO_ADDR
// hc_face_number := 0 ;
3154: LD_ADDR_OWVAR 34
3158: PUSH
3159: LD_INT 0
3161: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3162: LD_ADDR_VAR 0 10
3166: PUSH
3167: CALL_OW 44
3171: ST_TO_ADDR
// if global_defined then
3172: LD_LOC 3
3176: IFFALSE 3316
// begin if ( cl = class_soldier ) then
3178: LD_VAR 0 2
3182: PUSH
3183: LD_INT 1
3185: EQUAL
3186: IFFALSE 3206
// j := i + soldiers_created else
3188: LD_ADDR_VAR 0 9
3192: PUSH
3193: LD_VAR 0 8
3197: PUSH
3198: LD_LOC 4
3202: PLUS
3203: ST_TO_ADDR
3204: GO 3216
// j := i ;
3206: LD_ADDR_VAR 0 9
3210: PUSH
3211: LD_VAR 0 8
3215: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3216: LD_LOC 2
3220: PUSH
3221: LD_VAR 0 2
3225: ARRAY
3226: PUSH
3227: LD_VAR 0 9
3231: ARRAY
3232: PPUSH
3233: LD_VAR 0 10
3237: PPUSH
3238: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3242: LD_VAR 0 10
3246: PPUSH
3247: LD_INT 2
3249: PPUSH
3250: LD_LOC 2
3254: PUSH
3255: LD_VAR 0 2
3259: ARRAY
3260: PUSH
3261: LD_VAR 0 9
3265: ARRAY
3266: PPUSH
3267: LD_INT 2
3269: PPUSH
3270: CALL_OW 260
3274: PPUSH
3275: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3279: LD_VAR 0 10
3283: PPUSH
3284: LD_INT 1
3286: PPUSH
3287: LD_LOC 2
3291: PUSH
3292: LD_VAR 0 2
3296: ARRAY
3297: PUSH
3298: LD_VAR 0 9
3302: ARRAY
3303: PPUSH
3304: LD_INT 1
3306: PPUSH
3307: CALL_OW 260
3311: PPUSH
3312: CALL_OW 239
// end ; if building then
3316: LD_VAR 0 6
3320: IFFALSE 3338
// PlaceHumanInUnit ( un , building ) else
3322: LD_VAR 0 10
3326: PPUSH
3327: LD_VAR 0 6
3331: PPUSH
3332: CALL_OW 52
3336: GO 3365
// PlaceUnitXYR ( un , x , y , r , false ) ;
3338: LD_VAR 0 10
3342: PPUSH
3343: LD_VAR 0 3
3347: PPUSH
3348: LD_VAR 0 4
3352: PPUSH
3353: LD_VAR 0 5
3357: PPUSH
3358: LD_INT 0
3360: PPUSH
3361: CALL_OW 50
// result := result ^ [ un ] ;
3365: LD_ADDR_VAR 0 7
3369: PUSH
3370: LD_VAR 0 7
3374: PUSH
3375: LD_VAR 0 10
3379: PUSH
3380: EMPTY
3381: LIST
3382: ADD
3383: ST_TO_ADDR
// end ;
3384: GO 2935
3386: POP
3387: POP
// if not global_defined then
3388: LD_LOC 3
3392: NOT
3393: IFFALSE 3471
// if ( global_units >= cl ) then
3395: LD_LOC 2
3399: PUSH
3400: LD_VAR 0 2
3404: GREATEREQUAL
3405: IFFALSE 3446
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3407: LD_ADDR_LOC 2
3411: PUSH
3412: LD_LOC 2
3416: PPUSH
3417: LD_VAR 0 2
3421: PPUSH
3422: LD_LOC 2
3426: PUSH
3427: LD_VAR 0 2
3431: ARRAY
3432: PUSH
3433: LD_VAR 0 7
3437: ADD
3438: PPUSH
3439: CALL_OW 1
3443: ST_TO_ADDR
3444: GO 3471
// global_units := Replace ( global_units , cl , result ) ;
3446: LD_ADDR_LOC 2
3450: PUSH
3451: LD_LOC 2
3455: PPUSH
3456: LD_VAR 0 2
3460: PPUSH
3461: LD_VAR 0 7
3465: PPUSH
3466: CALL_OW 1
3470: ST_TO_ADDR
// end ;
3471: LD_VAR 0 7
3475: RET
// function prepare_mastodonts ( n ) ; var i ; begin
3476: LD_INT 0
3478: PPUSH
3479: PPUSH
// uc_side := 0 ;
3480: LD_ADDR_OWVAR 20
3484: PUSH
3485: LD_INT 0
3487: ST_TO_ADDR
// uc_nation := 0 ;
3488: LD_ADDR_OWVAR 21
3492: PUSH
3493: LD_INT 0
3495: ST_TO_ADDR
// vc_chassis := 31 ;
3496: LD_ADDR_OWVAR 37
3500: PUSH
3501: LD_INT 31
3503: ST_TO_ADDR
// vc_control := control_rider ;
3504: LD_ADDR_OWVAR 38
3508: PUSH
3509: LD_INT 4
3511: ST_TO_ADDR
// for i = 1 to n do
3512: LD_ADDR_VAR 0 3
3516: PUSH
3517: DOUBLE
3518: LD_INT 1
3520: DEC
3521: ST_TO_ADDR
3522: LD_VAR 0 1
3526: PUSH
3527: FOR_TO
3528: IFFALSE 3547
// PlaceUnitArea ( CreateVehicle , MastodontSpawn , false ) ;
3530: CALL_OW 45
3534: PPUSH
3535: LD_INT 15
3537: PPUSH
3538: LD_INT 0
3540: PPUSH
3541: CALL_OW 49
3545: GO 3527
3547: POP
3548: POP
// end ;
3549: LD_VAR 0 2
3553: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3554: LD_INT 0
3556: PPUSH
3557: PPUSH
3558: PPUSH
3559: PPUSH
3560: PPUSH
3561: PPUSH
3562: PPUSH
3563: PPUSH
3564: PPUSH
// if side in [ 0 , 9 ] then
3565: LD_VAR 0 1
3569: PUSH
3570: LD_INT 0
3572: PUSH
3573: LD_INT 9
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: IN
3580: IFFALSE 3584
// exit ;
3582: GO 4601
// pos := Side_Positions [ side ] ;
3584: LD_ADDR_VAR 0 3
3588: PUSH
3589: LD_EXP 36
3593: PUSH
3594: LD_VAR 0 1
3598: ARRAY
3599: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3600: LD_ADDR_OWVAR 21
3604: PUSH
3605: LD_EXP 37
3609: PUSH
3610: LD_VAR 0 1
3614: ARRAY
3615: ST_TO_ADDR
// uc_side := side ;
3616: LD_ADDR_OWVAR 20
3620: PUSH
3621: LD_VAR 0 1
3625: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3626: LD_ADDR_VAR 0 4
3630: PUSH
3631: LD_EXP 39
3635: PUSH
3636: LD_VAR 0 3
3640: ARRAY
3641: PUSH
3642: LD_INT 1
3644: ARRAY
3645: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3646: LD_ADDR_VAR 0 5
3650: PUSH
3651: LD_EXP 39
3655: PUSH
3656: LD_VAR 0 3
3660: ARRAY
3661: PUSH
3662: LD_INT 2
3664: ARRAY
3665: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3666: LD_ADDR_VAR 0 6
3670: PUSH
3671: LD_EXP 39
3675: PUSH
3676: LD_VAR 0 3
3680: ARRAY
3681: PUSH
3682: LD_INT 3
3684: ARRAY
3685: ST_TO_ADDR
// if is_depot then
3686: LD_EXP 21
3690: IFFALSE 3823
// begin bc_type = b_depot ;
3692: LD_ADDR_OWVAR 42
3696: PUSH
3697: LD_INT 0
3699: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3700: LD_ADDR_VAR 0 10
3704: PUSH
3705: LD_VAR 0 4
3709: PPUSH
3710: LD_VAR 0 5
3714: PPUSH
3715: LD_VAR 0 6
3719: PPUSH
3720: CALL_OW 47
3724: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3725: LD_VAR 0 10
3729: PPUSH
3730: LD_STRING @
3732: PUSH
3733: LD_VAR 0 1
3737: STR
3738: PPUSH
3739: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3743: LD_VAR 0 10
3747: PPUSH
3748: CALL_OW 274
3752: PPUSH
3753: LD_INT 1
3755: PPUSH
3756: LD_EXP 26
3760: PUSH
3761: LD_INT 1
3763: ARRAY
3764: PPUSH
3765: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3769: LD_VAR 0 10
3773: PPUSH
3774: CALL_OW 274
3778: PPUSH
3779: LD_INT 2
3781: PPUSH
3782: LD_EXP 26
3786: PUSH
3787: LD_INT 2
3789: ARRAY
3790: PPUSH
3791: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3795: LD_VAR 0 10
3799: PPUSH
3800: CALL_OW 274
3804: PPUSH
3805: LD_INT 3
3807: PPUSH
3808: LD_EXP 26
3812: PUSH
3813: LD_INT 3
3815: ARRAY
3816: PPUSH
3817: CALL_OW 277
// end else
3821: GO 3967
// begin for i := 1 to 3 do
3823: LD_ADDR_VAR 0 7
3827: PUSH
3828: DOUBLE
3829: LD_INT 1
3831: DEC
3832: ST_TO_ADDR
3833: LD_INT 3
3835: PUSH
3836: FOR_TO
3837: IFFALSE 3965
// begin r := starting_resources [ i ] ;
3839: LD_ADDR_VAR 0 8
3843: PUSH
3844: LD_EXP 26
3848: PUSH
3849: LD_VAR 0 7
3853: ARRAY
3854: ST_TO_ADDR
// while r >= 10 do
3855: LD_VAR 0 8
3859: PUSH
3860: LD_INT 10
3862: GREATEREQUAL
3863: IFFALSE 3963
// if r > 50 then
3865: LD_VAR 0 8
3869: PUSH
3870: LD_INT 50
3872: GREATER
3873: IFFALSE 3919
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3875: LD_VAR 0 7
3879: PPUSH
3880: LD_INT 5
3882: PPUSH
3883: LD_VAR 0 4
3887: PPUSH
3888: LD_VAR 0 5
3892: PPUSH
3893: LD_INT 4
3895: PPUSH
3896: LD_INT 0
3898: PPUSH
3899: CALL_OW 60
// r := r - 50 ;
3903: LD_ADDR_VAR 0 8
3907: PUSH
3908: LD_VAR 0 8
3912: PUSH
3913: LD_INT 50
3915: MINUS
3916: ST_TO_ADDR
// end else
3917: GO 3961
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3919: LD_VAR 0 7
3923: PPUSH
3924: LD_VAR 0 8
3928: PUSH
3929: LD_INT 10
3931: DIV
3932: PPUSH
3933: LD_VAR 0 4
3937: PPUSH
3938: LD_VAR 0 5
3942: PPUSH
3943: LD_INT 4
3945: PPUSH
3946: LD_INT 0
3948: PPUSH
3949: CALL_OW 60
// r := 0 ;
3953: LD_ADDR_VAR 0 8
3957: PUSH
3958: LD_INT 0
3960: ST_TO_ADDR
// end ;
3961: GO 3855
// end ;
3963: GO 3836
3965: POP
3966: POP
// end ; for r in starting_crates do
3967: LD_ADDR_VAR 0 8
3971: PUSH
3972: LD_EXP 25
3976: PUSH
3977: FOR_IN
3978: IFFALSE 4010
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3980: LD_INT 1
3982: PPUSH
3983: LD_INT 5
3985: PPUSH
3986: LD_VAR 0 4
3990: PPUSH
3991: LD_VAR 0 5
3995: PPUSH
3996: LD_VAR 0 8
4000: PPUSH
4001: LD_INT 0
4003: PPUSH
4004: CALL_OW 60
4008: GO 3977
4010: POP
4011: POP
// if def_morale_flags then
4012: LD_EXP 9
4016: IFFALSE 4155
// begin x := start_def [ pos ] [ 1 ] ;
4018: LD_ADDR_VAR 0 4
4022: PUSH
4023: LD_EXP 41
4027: PUSH
4028: LD_VAR 0 3
4032: ARRAY
4033: PUSH
4034: LD_INT 1
4036: ARRAY
4037: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4038: LD_ADDR_VAR 0 5
4042: PUSH
4043: LD_EXP 41
4047: PUSH
4048: LD_VAR 0 3
4052: ARRAY
4053: PUSH
4054: LD_INT 2
4056: ARRAY
4057: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4058: LD_VAR 0 4
4062: PPUSH
4063: LD_VAR 0 5
4067: PPUSH
4068: LD_INT 12
4070: PPUSH
4071: LD_INT 2
4073: PPUSH
4074: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4078: LD_ADDR_EXP 46
4082: PUSH
4083: LD_EXP 46
4087: PUSH
4088: LD_VAR 0 1
4092: PPUSH
4093: LD_VAR 0 4
4097: PPUSH
4098: LD_VAR 0 5
4102: PPUSH
4103: LD_INT 1
4105: PUSH
4106: LD_INT 100
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: PUSH
4113: LD_INT 2
4115: PUSH
4116: LD_INT 50
4118: PUSH
4119: EMPTY
4120: LIST
4121: LIST
4122: PUSH
4123: LD_INT 3
4125: PUSH
4126: LD_INT 20
4128: PUSH
4129: EMPTY
4130: LIST
4131: LIST
4132: PUSH
4133: LD_INT 20
4135: PUSH
4136: LD_INT 100
4138: PUSH
4139: EMPTY
4140: LIST
4141: LIST
4142: PUSH
4143: EMPTY
4144: LIST
4145: LIST
4146: LIST
4147: LIST
4148: PPUSH
4149: CALL_OW 418
4153: ADD
4154: ST_TO_ADDR
// end ; commander := true ;
4155: LD_ADDR_LOC 1
4159: PUSH
4160: LD_INT 1
4162: ST_TO_ADDR
// soldiers_created := 0 ;
4163: LD_ADDR_LOC 4
4167: PUSH
4168: LD_INT 0
4170: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4171: LD_ADDR_VAR 0 7
4175: PUSH
4176: DOUBLE
4177: LD_INT 1
4179: DEC
4180: ST_TO_ADDR
4181: LD_EXP 22
4185: PUSH
4186: FOR_TO
4187: IFFALSE 4340
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4189: LD_ADDR_VAR 0 4
4193: PUSH
4194: LD_EXP 40
4198: PUSH
4199: LD_VAR 0 3
4203: ARRAY
4204: PUSH
4205: LD_VAR 0 7
4209: ARRAY
4210: PUSH
4211: LD_INT 1
4213: ARRAY
4214: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4215: LD_ADDR_VAR 0 5
4219: PUSH
4220: LD_EXP 40
4224: PUSH
4225: LD_VAR 0 3
4229: ARRAY
4230: PUSH
4231: LD_VAR 0 7
4235: ARRAY
4236: PUSH
4237: LD_INT 2
4239: ARRAY
4240: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4241: LD_ADDR_VAR 0 6
4245: PUSH
4246: LD_EXP 40
4250: PUSH
4251: LD_VAR 0 3
4255: ARRAY
4256: PUSH
4257: LD_VAR 0 7
4261: ARRAY
4262: PUSH
4263: LD_INT 3
4265: ARRAY
4266: ST_TO_ADDR
// bc_type := b_breastwork ;
4267: LD_ADDR_OWVAR 42
4271: PUSH
4272: LD_INT 31
4274: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4275: LD_ADDR_VAR 0 9
4279: PUSH
4280: LD_VAR 0 4
4284: PPUSH
4285: LD_VAR 0 5
4289: PPUSH
4290: LD_VAR 0 6
4294: PPUSH
4295: CALL_OW 47
4299: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4300: LD_INT 1
4302: PPUSH
4303: LD_INT 1
4305: PPUSH
4306: LD_INT 0
4308: PPUSH
4309: LD_INT 0
4311: PPUSH
4312: LD_INT 0
4314: PPUSH
4315: LD_VAR 0 9
4319: PPUSH
4320: CALL 2907 0 6
// soldiers_created := soldiers_created + 1 ;
4324: LD_ADDR_LOC 4
4328: PUSH
4329: LD_LOC 4
4333: PUSH
4334: LD_INT 1
4336: PLUS
4337: ST_TO_ADDR
// end ;
4338: GO 4186
4340: POP
4341: POP
// x := start_def [ pos ] [ 1 ] ;
4342: LD_ADDR_VAR 0 4
4346: PUSH
4347: LD_EXP 41
4351: PUSH
4352: LD_VAR 0 3
4356: ARRAY
4357: PUSH
4358: LD_INT 1
4360: ARRAY
4361: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4362: LD_ADDR_VAR 0 5
4366: PUSH
4367: LD_EXP 41
4371: PUSH
4372: LD_VAR 0 3
4376: ARRAY
4377: PUSH
4378: LD_INT 2
4380: ARRAY
4381: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4382: LD_LOC 8
4386: PUSH
4387: LD_EXP 22
4391: MINUS
4392: PPUSH
4393: LD_INT 1
4395: PPUSH
4396: LD_VAR 0 4
4400: PPUSH
4401: LD_VAR 0 5
4405: PPUSH
4406: LD_INT 5
4408: PPUSH
4409: LD_INT 0
4411: PPUSH
4412: CALL 2907 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4416: LD_LOC 5
4420: PPUSH
4421: LD_INT 2
4423: PPUSH
4424: LD_VAR 0 4
4428: PPUSH
4429: LD_VAR 0 5
4433: PPUSH
4434: LD_INT 5
4436: PPUSH
4437: LD_INT 0
4439: PPUSH
4440: CALL 2907 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4444: LD_LOC 7
4448: PPUSH
4449: LD_INT 3
4451: PPUSH
4452: LD_VAR 0 4
4456: PPUSH
4457: LD_VAR 0 5
4461: PPUSH
4462: LD_INT 5
4464: PPUSH
4465: LD_INT 0
4467: PPUSH
4468: CALL 2907 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4472: LD_LOC 6
4476: PPUSH
4477: LD_INT 4
4479: PPUSH
4480: LD_VAR 0 4
4484: PPUSH
4485: LD_VAR 0 5
4489: PPUSH
4490: LD_INT 5
4492: PPUSH
4493: LD_INT 0
4495: PPUSH
4496: CALL 2907 0 6
// if def_siberite_detection then
4500: LD_EXP 10
4504: IFFALSE 4521
// SetTech ( tech_SibDet , side , state_researched ) ;
4506: LD_INT 20
4508: PPUSH
4509: LD_VAR 0 1
4513: PPUSH
4514: LD_INT 2
4516: PPUSH
4517: CALL_OW 322
// if def_siberite_bomb = 1 then
4521: LD_EXP 15
4525: PUSH
4526: LD_INT 1
4528: EQUAL
4529: IFFALSE 4563
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4531: LD_INT 25
4533: PPUSH
4534: LD_VAR 0 1
4538: PPUSH
4539: LD_INT 1
4541: PPUSH
4542: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4546: LD_INT 73
4548: PPUSH
4549: LD_VAR 0 1
4553: PPUSH
4554: LD_INT 1
4556: PPUSH
4557: CALL_OW 322
// end else
4561: GO 4593
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4563: LD_INT 25
4565: PPUSH
4566: LD_VAR 0 1
4570: PPUSH
4571: LD_INT 0
4573: PPUSH
4574: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4578: LD_INT 73
4580: PPUSH
4581: LD_VAR 0 1
4585: PPUSH
4586: LD_INT 0
4588: PPUSH
4589: CALL_OW 322
// end ; global_defined := true ;
4593: LD_ADDR_LOC 3
4597: PUSH
4598: LD_INT 1
4600: ST_TO_ADDR
// end ;
4601: LD_VAR 0 2
4605: RET
// every 0 0$1 do
4606: GO 4608
4608: DISABLE
// if ( def_siberite_bomb > 1 ) then
4609: LD_EXP 15
4613: PUSH
4614: LD_INT 1
4616: GREATER
4617: IFFALSE 4632
// begin wait ( siberite_bomb_Delay ) ;
4619: LD_EXP 33
4623: PPUSH
4624: CALL_OW 67
// EnableSibFiss ;
4628: CALL 4633 0 0
// end ;
4632: END
// function EnableSibFiss ; var i ; begin
4633: LD_INT 0
4635: PPUSH
4636: PPUSH
// for i := 1 to 8 do
4637: LD_ADDR_VAR 0 2
4641: PUSH
4642: DOUBLE
4643: LD_INT 1
4645: DEC
4646: ST_TO_ADDR
4647: LD_INT 8
4649: PUSH
4650: FOR_TO
4651: IFFALSE 4697
// if Side_Positions [ i ] then
4653: LD_EXP 36
4657: PUSH
4658: LD_VAR 0 2
4662: ARRAY
4663: IFFALSE 4695
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4665: LD_INT 25
4667: PPUSH
4668: LD_VAR 0 2
4672: PPUSH
4673: LD_INT 1
4675: PPUSH
4676: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4680: LD_INT 73
4682: PPUSH
4683: LD_VAR 0 2
4687: PPUSH
4688: LD_INT 1
4690: PPUSH
4691: CALL_OW 322
// end ;
4695: GO 4650
4697: POP
4698: POP
// end ;
4699: LD_VAR 0 1
4703: RET
// function prepare_sides ; var i ; begin
4704: LD_INT 0
4706: PPUSH
4707: PPUSH
// global_units := [ ] ;
4708: LD_ADDR_LOC 2
4712: PUSH
4713: EMPTY
4714: ST_TO_ADDR
// global_defined := false ;
4715: LD_ADDR_LOC 3
4719: PUSH
4720: LD_INT 0
4722: ST_TO_ADDR
// CountClassMembers ;
4723: CALL 4802 0 0
// for i := 1 to 8 do
4727: LD_ADDR_VAR 0 2
4731: PUSH
4732: DOUBLE
4733: LD_INT 1
4735: DEC
4736: ST_TO_ADDR
4737: LD_INT 8
4739: PUSH
4740: FOR_TO
4741: IFFALSE 4795
// if Side_Positions [ i ] then
4743: LD_EXP 36
4747: PUSH
4748: LD_VAR 0 2
4752: ARRAY
4753: IFFALSE 4793
// begin prepare_side ( i ) ;
4755: LD_VAR 0 2
4759: PPUSH
4760: CALL 3554 0 1
// if ( Game_Type = 12 ) and mastodont > 0 then
4764: LD_EXP 20
4768: PUSH
4769: LD_INT 12
4771: EQUAL
4772: PUSH
4773: LD_EXP 48
4777: PUSH
4778: LD_INT 0
4780: GREATER
4781: AND
4782: IFFALSE 4793
// prepare_mastodonts ( mastodont ) ;
4784: LD_EXP 48
4788: PPUSH
4789: CALL 3476 0 1
// end ;
4793: GO 4740
4795: POP
4796: POP
// end ;
4797: LD_VAR 0 1
4801: RET
// function CountClassMembers ; var Mode ; begin
4802: LD_INT 0
4804: PPUSH
4805: PPUSH
// if No_Mechs then
4806: LD_EXP 19
4810: IFFALSE 4822
// Mode := 2 else
4812: LD_ADDR_VAR 0 2
4816: PUSH
4817: LD_INT 2
4819: ST_TO_ADDR
4820: GO 4830
// Mode := 1 ;
4822: LD_ADDR_VAR 0 2
4826: PUSH
4827: LD_INT 1
4829: ST_TO_ADDR
// neng := number_of_people ;
4830: LD_ADDR_LOC 5
4834: PUSH
4835: LD_EXP 23
4839: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4840: LD_ADDR_LOC 8
4844: PUSH
4845: LD_LOC 5
4849: PUSH
4850: LD_INT 4
4852: PUSH
4853: LD_INT 3
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: PUSH
4860: LD_VAR 0 2
4864: ARRAY
4865: DIV
4866: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4867: LD_LOC 8
4871: PUSH
4872: LD_EXP 22
4876: LESS
4877: IFFALSE 4889
// nsol := number_of_breastworks ;
4879: LD_ADDR_LOC 8
4883: PUSH
4884: LD_EXP 22
4888: ST_TO_ADDR
// neng := neng - nsol ;
4889: LD_ADDR_LOC 5
4893: PUSH
4894: LD_LOC 5
4898: PUSH
4899: LD_LOC 8
4903: MINUS
4904: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4905: LD_ADDR_LOC 6
4909: PUSH
4910: LD_LOC 5
4914: PUSH
4915: LD_INT 3
4917: PUSH
4918: LD_INT 2
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: PUSH
4925: LD_VAR 0 2
4929: ARRAY
4930: DIV
4931: ST_TO_ADDR
// if ( nsci < 1 ) then
4932: LD_LOC 6
4936: PUSH
4937: LD_INT 1
4939: LESS
4940: IFFALSE 4950
// nsci := 1 ;
4942: LD_ADDR_LOC 6
4946: PUSH
4947: LD_INT 1
4949: ST_TO_ADDR
// neng := neng - nsci ;
4950: LD_ADDR_LOC 5
4954: PUSH
4955: LD_LOC 5
4959: PUSH
4960: LD_LOC 6
4964: MINUS
4965: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4966: LD_ADDR_LOC 7
4970: PUSH
4971: LD_LOC 5
4975: PUSH
4976: LD_INT 2
4978: DIV
4979: PUSH
4980: LD_INT 0
4982: PUSH
4983: EMPTY
4984: LIST
4985: LIST
4986: PUSH
4987: LD_VAR 0 2
4991: ARRAY
4992: ST_TO_ADDR
// neng := neng - nmech ;
4993: LD_ADDR_LOC 5
4997: PUSH
4998: LD_LOC 5
5002: PUSH
5003: LD_LOC 7
5007: MINUS
5008: ST_TO_ADDR
// if ( neng < 1 ) then
5009: LD_LOC 5
5013: PUSH
5014: LD_INT 1
5016: LESS
5017: IFFALSE 5027
// neng := 1 ;
5019: LD_ADDR_LOC 5
5023: PUSH
5024: LD_INT 1
5026: ST_TO_ADDR
// end ;
5027: LD_VAR 0 1
5031: RET
// function Init_Win_Condition ; begin
5032: LD_INT 0
5034: PPUSH
// if Team_Game then
5035: LD_EXP 38
5039: IFFALSE 5046
// enable ( 98 ) else
5041: LD_INT 98
5043: ENABLE_MARKED
5044: GO 5049
// enable ( 99 ) ;
5046: LD_INT 99
5048: ENABLE_MARKED
// case Game_Type of 3 :
5049: LD_EXP 20
5053: PUSH
5054: LD_INT 3
5056: DOUBLE
5057: EQUAL
5058: IFTRUE 5062
5060: GO 5068
5062: POP
// enable ( 100 ) ; end ;
5063: LD_INT 100
5065: ENABLE_MARKED
5066: GO 5069
5068: POP
// end ;
5069: LD_VAR 0 1
5073: RET
// starting begin disable ( 98 ) ;
5074: LD_INT 98
5076: DISABLE_MARKED
// disable ( 99 ) ;
5077: LD_INT 99
5079: DISABLE_MARKED
// disable ( 100 ) ;
5080: LD_INT 100
5082: DISABLE_MARKED
// disable ( 200 ) ;
5083: LD_INT 200
5085: DISABLE_MARKED
// disable ( 400 ) ;
5086: LD_INT 400
5088: DISABLE_MARKED
// disable ( 401 ) ;
5089: LD_INT 401
5091: DISABLE_MARKED
// mp_selectmsg := true ;
5092: LD_ADDR_OWVAR 13
5096: PUSH
5097: LD_INT 1
5099: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5100: CALL 0 0 0
// init_map ;
5104: CALL 1454 0 0
// init_respawning ;
5108: CALL 6780 0 0
// set_shared_visions_and_alliances ;
5112: CALL 2619 0 0
// prepare_sides ;
5116: CALL 4704 0 0
// ShowTimer ;
5120: CALL 9992 0 0
// if ( Game_Type = 4 ) then
5124: LD_EXP 20
5128: PUSH
5129: LD_INT 4
5131: EQUAL
5132: IFFALSE 5138
// InitBloodGods ;
5134: CALL 9757 0 0
// music_nat := Side_Nations [ your_side ] ;
5138: LD_ADDR_OWVAR 71
5142: PUSH
5143: LD_EXP 37
5147: PUSH
5148: LD_OWVAR 2
5152: ARRAY
5153: ST_TO_ADDR
// if IAmSpec then
5154: CALL_OW 531
5158: IFFALSE 5194
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
5160: LD_INT 0
5162: PPUSH
5163: LD_INT 0
5165: PPUSH
5166: LD_OWVAR 2
5170: PPUSH
5171: LD_INT 32767
5173: NEG
5174: PPUSH
5175: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
5179: LD_INT 104
5181: PPUSH
5182: LD_INT 69
5184: PPUSH
5185: CALL_OW 86
// enable ( 400 ) ;
5189: LD_INT 400
5191: ENABLE_MARKED
// end else
5192: GO 5248
// begin ResetFog ;
5194: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5198: LD_EXP 41
5202: PUSH
5203: LD_EXP 36
5207: PUSH
5208: LD_OWVAR 2
5212: ARRAY
5213: ARRAY
5214: PUSH
5215: LD_INT 1
5217: ARRAY
5218: PPUSH
5219: LD_EXP 41
5223: PUSH
5224: LD_EXP 36
5228: PUSH
5229: LD_OWVAR 2
5233: ARRAY
5234: ARRAY
5235: PUSH
5236: LD_INT 2
5238: ARRAY
5239: PPUSH
5240: CALL_OW 86
// Init_Win_Condition ;
5244: CALL 5032 0 0
// end ; InitApeman ;
5248: CALL 5947 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
5252: LD_ADDR_EXP 57
5256: PUSH
5257: LD_INT 9
5259: PUSH
5260: LD_INT 10
5262: PUSH
5263: LD_INT 11
5265: PUSH
5266: LD_INT 12
5268: PUSH
5269: LD_INT 13
5271: PUSH
5272: LD_INT 14
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: ST_TO_ADDR
// BeginBuildUp ;
5283: CALL 10153 0 0
// end ; end_of_file
5287: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5288: GO 5290
5290: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5291: LD_INT 4
5293: PPUSH
5294: LD_INT 5
5296: PPUSH
5297: CALL_OW 12
5301: PPUSH
5302: LD_INT 1
5304: PPUSH
5305: CALL_OW 57
// enable ;
5309: ENABLE
// end ;
5310: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5311: GO 5313
5313: DISABLE
5314: LD_INT 0
5316: PPUSH
5317: PPUSH
// begin case tick of 1 .. 1 1$0 :
5318: LD_OWVAR 1
5322: PUSH
5323: LD_INT 1
5325: DOUBLE
5326: GREATEREQUAL
5327: IFFALSE 5335
5329: LD_INT 2100
5331: DOUBLE
5332: LESSEQUAL
5333: IFTRUE 5337
5335: GO 5365
5337: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5338: LD_EXP 27
5342: PUSH
5343: LD_INT 100
5345: DIVREAL
5346: PUSH
5347: LD_INT 350
5349: PPUSH
5350: LD_INT 1050
5352: PPUSH
5353: CALL_OW 12
5357: MUL
5358: PPUSH
5359: CALL_OW 67
5363: GO 5667
5365: LD_INT 2100
5367: PUSH
5368: LD_INT 1
5370: PLUS
5371: DOUBLE
5372: GREATEREQUAL
5373: IFFALSE 5381
5375: LD_INT 10500
5377: DOUBLE
5378: LESSEQUAL
5379: IFTRUE 5383
5381: GO 5411
5383: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5384: LD_EXP 27
5388: PUSH
5389: LD_INT 100
5391: DIVREAL
5392: PUSH
5393: LD_INT 1050
5395: PPUSH
5396: LD_INT 1575
5398: PPUSH
5399: CALL_OW 12
5403: MUL
5404: PPUSH
5405: CALL_OW 67
5409: GO 5667
5411: LD_INT 10500
5413: PUSH
5414: LD_INT 1
5416: PLUS
5417: DOUBLE
5418: GREATEREQUAL
5419: IFFALSE 5427
5421: LD_INT 21000
5423: DOUBLE
5424: LESSEQUAL
5425: IFTRUE 5429
5427: GO 5457
5429: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5430: LD_EXP 27
5434: PUSH
5435: LD_INT 100
5437: DIVREAL
5438: PUSH
5439: LD_INT 1575
5441: PPUSH
5442: LD_INT 2100
5444: PPUSH
5445: CALL_OW 12
5449: MUL
5450: PPUSH
5451: CALL_OW 67
5455: GO 5667
5457: LD_INT 21000
5459: PUSH
5460: LD_INT 1
5462: PLUS
5463: DOUBLE
5464: GREATEREQUAL
5465: IFFALSE 5473
5467: LD_INT 42000
5469: DOUBLE
5470: LESSEQUAL
5471: IFTRUE 5475
5473: GO 5503
5475: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5476: LD_EXP 27
5480: PUSH
5481: LD_INT 100
5483: DIVREAL
5484: PUSH
5485: LD_INT 2100
5487: PPUSH
5488: LD_INT 2625
5490: PPUSH
5491: CALL_OW 12
5495: MUL
5496: PPUSH
5497: CALL_OW 67
5501: GO 5667
5503: LD_INT 42000
5505: PUSH
5506: LD_INT 1
5508: PLUS
5509: DOUBLE
5510: GREATEREQUAL
5511: IFFALSE 5519
5513: LD_INT 63000
5515: DOUBLE
5516: LESSEQUAL
5517: IFTRUE 5521
5519: GO 5549
5521: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5522: LD_EXP 27
5526: PUSH
5527: LD_INT 100
5529: DIVREAL
5530: PUSH
5531: LD_INT 2625
5533: PPUSH
5534: LD_INT 3150
5536: PPUSH
5537: CALL_OW 12
5541: MUL
5542: PPUSH
5543: CALL_OW 67
5547: GO 5667
5549: LD_INT 63000
5551: PUSH
5552: LD_INT 1
5554: PLUS
5555: DOUBLE
5556: GREATEREQUAL
5557: IFFALSE 5565
5559: LD_INT 105000
5561: DOUBLE
5562: LESSEQUAL
5563: IFTRUE 5567
5565: GO 5595
5567: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5568: LD_EXP 27
5572: PUSH
5573: LD_INT 100
5575: DIVREAL
5576: PUSH
5577: LD_INT 3150
5579: PPUSH
5580: LD_INT 3675
5582: PPUSH
5583: CALL_OW 12
5587: MUL
5588: PPUSH
5589: CALL_OW 67
5593: GO 5667
5595: LD_INT 105000
5597: PUSH
5598: LD_INT 1
5600: PLUS
5601: DOUBLE
5602: GREATEREQUAL
5603: IFFALSE 5611
5605: LD_INT 630000
5607: DOUBLE
5608: LESSEQUAL
5609: IFTRUE 5613
5611: GO 5641
5613: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
5614: LD_EXP 27
5618: PUSH
5619: LD_INT 100
5621: DIVREAL
5622: PUSH
5623: LD_INT 3675
5625: PPUSH
5626: LD_INT 4200
5628: PPUSH
5629: CALL_OW 12
5633: MUL
5634: PPUSH
5635: CALL_OW 67
5639: GO 5667
5641: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5642: LD_EXP 27
5646: PUSH
5647: LD_INT 100
5649: DIVREAL
5650: PUSH
5651: LD_INT 4200
5653: PPUSH
5654: LD_INT 5250
5656: PPUSH
5657: CALL_OW 12
5661: MUL
5662: PPUSH
5663: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5667: LD_ADDR_VAR 0 2
5671: PUSH
5672: LD_INT 3
5674: PPUSH
5675: LD_INT 5
5677: PPUSH
5678: CALL_OW 12
5682: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5683: LD_ADDR_VAR 0 1
5687: PUSH
5688: LD_EXP 36
5692: PUSH
5693: LD_INT 0
5695: PUSH
5696: EMPTY
5697: LIST
5698: DIFF
5699: PUSH
5700: FOR_IN
5701: IFFALSE 5750
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5703: LD_VAR 0 2
5707: PPUSH
5708: LD_EXP 41
5712: PUSH
5713: LD_VAR 0 1
5717: ARRAY
5718: PUSH
5719: LD_INT 1
5721: ARRAY
5722: PPUSH
5723: LD_EXP 41
5727: PUSH
5728: LD_VAR 0 1
5732: ARRAY
5733: PUSH
5734: LD_INT 2
5736: ARRAY
5737: PPUSH
5738: LD_INT 20
5740: PPUSH
5741: LD_INT 1
5743: PPUSH
5744: CALL_OW 56
5748: GO 5700
5750: POP
5751: POP
// enable ;
5752: ENABLE
// end ; end_of_file
5753: PPOPN 2
5755: END
// every 20 20$00 trigger apemanNumber do
5756: LD_EXP 49
5760: IFFALSE 5793
5762: GO 5764
5764: DISABLE
// begin enable ;
5765: ENABLE
// if apeLevel >= 8 then
5766: LD_EXP 54
5770: PUSH
5771: LD_INT 8
5773: GREATEREQUAL
5774: IFFALSE 5779
// disable else
5776: DISABLE
5777: GO 5793
// apeLevel := apeLevel + 1 ;
5779: LD_ADDR_EXP 54
5783: PUSH
5784: LD_EXP 54
5788: PUSH
5789: LD_INT 1
5791: PLUS
5792: ST_TO_ADDR
// end ;
5793: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5794: LD_EXP 49
5798: PUSH
5799: LD_EXP 50
5803: LESS
5804: IFFALSE 5944
5806: GO 5808
5808: DISABLE
5809: LD_INT 0
5811: PPUSH
5812: PPUSH
5813: PPUSH
5814: PPUSH
// begin enable ;
5815: ENABLE
// for i := 1 to apemanPos do
5816: LD_ADDR_VAR 0 1
5820: PUSH
5821: DOUBLE
5822: LD_INT 1
5824: DEC
5825: ST_TO_ADDR
5826: LD_EXP 52
5830: PUSH
5831: FOR_TO
5832: IFFALSE 5942
// begin if apemanPlayerCount [ i ] then
5834: LD_EXP 53
5838: PUSH
5839: LD_VAR 0 1
5843: ARRAY
5844: IFFALSE 5940
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5846: LD_EXP 53
5850: PUSH
5851: LD_VAR 0 1
5855: ARRAY
5856: PUSH
5857: LD_EXP 52
5861: PUSH
5862: LD_VAR 0 1
5866: ARRAY
5867: GREATER
5868: IFFALSE 5940
// begin ape := PrepareApeman ;
5870: LD_ADDR_VAR 0 2
5874: PUSH
5875: CALL 6455 0 0
5879: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5880: LD_VAR 0 2
5884: PPUSH
5885: LD_EXP 55
5889: PUSH
5890: LD_VAR 0 1
5894: ARRAY
5895: PPUSH
5896: LD_INT 0
5898: PPUSH
5899: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5903: LD_ADDR_EXP 52
5907: PUSH
5908: LD_EXP 52
5912: PPUSH
5913: LD_VAR 0 1
5917: PPUSH
5918: LD_EXP 52
5922: PUSH
5923: LD_VAR 0 1
5927: ARRAY
5928: PUSH
5929: LD_VAR 0 2
5933: UNION
5934: PPUSH
5935: CALL_OW 1
5939: ST_TO_ADDR
// end ; end ; end ;
5940: GO 5831
5942: POP
5943: POP
// end ;
5944: PPOPN 4
5946: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5947: LD_INT 0
5949: PPUSH
5950: PPUSH
5951: PPUSH
5952: PPUSH
5953: PPUSH
5954: PPUSH
5955: PPUSH
// playersAmount := 0 ;
5956: LD_ADDR_VAR 0 3
5960: PUSH
5961: LD_INT 0
5963: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
5964: LD_ADDR_VAR 0 7
5968: PUSH
5969: LD_INT 1
5971: PUSH
5972: LD_INT 2
5974: PUSH
5975: LD_INT 3
5977: PUSH
5978: LD_INT 4
5980: PUSH
5981: LD_INT 5
5983: PUSH
5984: LD_INT 6
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5995: LD_ADDR_EXP 55
5999: PUSH
6000: LD_INT 0
6002: PUSH
6003: LD_INT 0
6005: PUSH
6006: LD_INT 0
6008: PUSH
6009: LD_INT 0
6011: PUSH
6012: LD_INT 0
6014: PUSH
6015: LD_INT 0
6017: PUSH
6018: LD_INT 0
6020: PUSH
6021: LD_INT 0
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: ST_TO_ADDR
// for j = 1 to Side_Positions do
6034: LD_ADDR_VAR 0 4
6038: PUSH
6039: DOUBLE
6040: LD_INT 1
6042: DEC
6043: ST_TO_ADDR
6044: LD_EXP 36
6048: PUSH
6049: FOR_TO
6050: IFFALSE 6117
// if Side_Positions [ j ] then
6052: LD_EXP 36
6056: PUSH
6057: LD_VAR 0 4
6061: ARRAY
6062: IFFALSE 6115
// begin playersAmount := playersAmount + 1 ;
6064: LD_ADDR_VAR 0 3
6068: PUSH
6069: LD_VAR 0 3
6073: PUSH
6074: LD_INT 1
6076: PLUS
6077: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6078: LD_ADDR_EXP 55
6082: PUSH
6083: LD_EXP 55
6087: PPUSH
6088: LD_VAR 0 4
6092: PPUSH
6093: LD_VAR 0 7
6097: PUSH
6098: LD_EXP 36
6102: PUSH
6103: LD_VAR 0 4
6107: ARRAY
6108: ARRAY
6109: PPUSH
6110: CALL_OW 1
6114: ST_TO_ADDR
// end ;
6115: GO 6049
6117: POP
6118: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6119: LD_ADDR_EXP 51
6123: PUSH
6124: LD_INT 3
6126: PUSH
6127: LD_EXP 29
6131: MUL
6132: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6133: LD_ADDR_EXP 49
6137: PUSH
6138: LD_VAR 0 3
6142: PUSH
6143: LD_EXP 51
6147: MUL
6148: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6149: LD_ADDR_EXP 50
6153: PUSH
6154: LD_EXP 49
6158: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6159: LD_ADDR_EXP 52
6163: PUSH
6164: LD_INT 0
6166: PUSH
6167: LD_INT 0
6169: PUSH
6170: LD_INT 0
6172: PUSH
6173: LD_INT 0
6175: PUSH
6176: LD_INT 0
6178: PUSH
6179: LD_INT 0
6181: PUSH
6182: LD_INT 0
6184: PUSH
6185: LD_INT 0
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6198: LD_ADDR_EXP 53
6202: PUSH
6203: LD_INT 0
6205: PUSH
6206: LD_INT 0
6208: PUSH
6209: LD_INT 0
6211: PUSH
6212: LD_INT 0
6214: PUSH
6215: LD_INT 0
6217: PUSH
6218: LD_INT 0
6220: PUSH
6221: LD_INT 0
6223: PUSH
6224: LD_INT 0
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: ST_TO_ADDR
// apeLevel := 1 ;
6237: LD_ADDR_EXP 54
6241: PUSH
6242: LD_INT 1
6244: ST_TO_ADDR
// if not apemanNumber then
6245: LD_EXP 49
6249: NOT
6250: IFFALSE 6254
// exit ;
6252: GO 6450
// for i := 1 to apemanPerPlayer do
6254: LD_ADDR_VAR 0 2
6258: PUSH
6259: DOUBLE
6260: LD_INT 1
6262: DEC
6263: ST_TO_ADDR
6264: LD_EXP 51
6268: PUSH
6269: FOR_TO
6270: IFFALSE 6448
// begin for j := 1 to Side_Positions do
6272: LD_ADDR_VAR 0 4
6276: PUSH
6277: DOUBLE
6278: LD_INT 1
6280: DEC
6281: ST_TO_ADDR
6282: LD_EXP 36
6286: PUSH
6287: FOR_TO
6288: IFFALSE 6444
// if Side_Positions [ j ] then
6290: LD_EXP 36
6294: PUSH
6295: LD_VAR 0 4
6299: ARRAY
6300: IFFALSE 6442
// begin pos := Side_Positions [ j ] ;
6302: LD_ADDR_VAR 0 6
6306: PUSH
6307: LD_EXP 36
6311: PUSH
6312: LD_VAR 0 4
6316: ARRAY
6317: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6318: LD_ADDR_EXP 53
6322: PUSH
6323: LD_EXP 53
6327: PPUSH
6328: LD_VAR 0 4
6332: PPUSH
6333: LD_EXP 53
6337: PUSH
6338: LD_VAR 0 4
6342: ARRAY
6343: PUSH
6344: LD_INT 1
6346: PLUS
6347: PPUSH
6348: CALL_OW 1
6352: ST_TO_ADDR
// ape := PrepareApeman ;
6353: LD_ADDR_VAR 0 5
6357: PUSH
6358: CALL 6455 0 0
6362: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6363: LD_ADDR_EXP 52
6367: PUSH
6368: LD_EXP 52
6372: PPUSH
6373: LD_VAR 0 4
6377: PPUSH
6378: LD_EXP 52
6382: PUSH
6383: LD_VAR 0 4
6387: ARRAY
6388: PPUSH
6389: LD_EXP 52
6393: PUSH
6394: LD_VAR 0 4
6398: ARRAY
6399: PUSH
6400: LD_INT 1
6402: PLUS
6403: PPUSH
6404: LD_VAR 0 5
6408: PPUSH
6409: CALL_OW 1
6413: PPUSH
6414: CALL_OW 1
6418: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6419: LD_VAR 0 5
6423: PPUSH
6424: LD_EXP 55
6428: PUSH
6429: LD_VAR 0 4
6433: ARRAY
6434: PPUSH
6435: LD_INT 0
6437: PPUSH
6438: CALL_OW 49
// end ;
6442: GO 6287
6444: POP
6445: POP
// end ;
6446: GO 6269
6448: POP
6449: POP
// end ;
6450: LD_VAR 0 1
6454: RET
// export function PrepareApeman ; var bonus ; begin
6455: LD_INT 0
6457: PPUSH
6458: PPUSH
// uc_side := 0 ;
6459: LD_ADDR_OWVAR 20
6463: PUSH
6464: LD_INT 0
6466: ST_TO_ADDR
// uc_nation := 0 ;
6467: LD_ADDR_OWVAR 21
6471: PUSH
6472: LD_INT 0
6474: ST_TO_ADDR
// InitHc ;
6475: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6479: LD_ADDR_VAR 0 2
6483: PUSH
6484: LD_INT 1
6486: NEG
6487: PUSH
6488: LD_INT 0
6490: PUSH
6491: LD_INT 1
6493: PUSH
6494: EMPTY
6495: LIST
6496: LIST
6497: LIST
6498: PUSH
6499: LD_OWVAR 1
6503: PUSH
6504: LD_INT 3
6506: MOD
6507: PUSH
6508: LD_INT 1
6510: PLUS
6511: ARRAY
6512: ST_TO_ADDR
// hc_class := class_apeman ;
6513: LD_ADDR_OWVAR 28
6517: PUSH
6518: LD_INT 12
6520: ST_TO_ADDR
// hc_gallery :=  ;
6521: LD_ADDR_OWVAR 33
6525: PUSH
6526: LD_STRING 
6528: ST_TO_ADDR
// hc_name :=  ;
6529: LD_ADDR_OWVAR 26
6533: PUSH
6534: LD_STRING 
6536: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6537: LD_ADDR_OWVAR 31
6541: PUSH
6542: LD_EXP 54
6546: PUSH
6547: LD_VAR 0 2
6551: PLUS
6552: PUSH
6553: LD_EXP 54
6557: PUSH
6558: LD_VAR 0 2
6562: PLUS
6563: PUSH
6564: LD_EXP 54
6568: PUSH
6569: LD_VAR 0 2
6573: PLUS
6574: PUSH
6575: LD_EXP 54
6579: PUSH
6580: LD_VAR 0 2
6584: PLUS
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6592: LD_ADDR_OWVAR 35
6596: PUSH
6597: LD_INT 10
6599: PUSH
6600: LD_VAR 0 2
6604: MUL
6605: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6606: LD_ADDR_OWVAR 29
6610: PUSH
6611: LD_INT 12
6613: PUSH
6614: LD_INT 10
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: ST_TO_ADDR
// result := CreateHuman ;
6621: LD_ADDR_VAR 0 1
6625: PUSH
6626: CALL_OW 44
6630: ST_TO_ADDR
// end ;
6631: LD_VAR 0 1
6635: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6636: LD_INT 0
6638: PPUSH
6639: PPUSH
6640: PPUSH
// if not ape then
6641: LD_VAR 0 1
6645: NOT
6646: IFFALSE 6650
// exit ;
6648: GO 6775
// side := GetSide ( ape ) ;
6650: LD_ADDR_VAR 0 3
6654: PUSH
6655: LD_VAR 0 1
6659: PPUSH
6660: CALL_OW 255
6664: ST_TO_ADDR
// if not side then
6665: LD_VAR 0 3
6669: NOT
6670: IFFALSE 6724
// begin for i = 1 to apemanPos do
6672: LD_ADDR_VAR 0 4
6676: PUSH
6677: DOUBLE
6678: LD_INT 1
6680: DEC
6681: ST_TO_ADDR
6682: LD_EXP 52
6686: PUSH
6687: FOR_TO
6688: IFFALSE 6722
// if ape in apemanPos [ i ] then
6690: LD_VAR 0 1
6694: PUSH
6695: LD_EXP 52
6699: PUSH
6700: LD_VAR 0 4
6704: ARRAY
6705: IN
6706: IFFALSE 6720
// begin side := i ;
6708: LD_ADDR_VAR 0 3
6712: PUSH
6713: LD_VAR 0 4
6717: ST_TO_ADDR
// break ;
6718: GO 6722
// end ;
6720: GO 6687
6722: POP
6723: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6724: LD_ADDR_EXP 52
6728: PUSH
6729: LD_EXP 52
6733: PPUSH
6734: LD_VAR 0 3
6738: PPUSH
6739: LD_EXP 52
6743: PUSH
6744: LD_VAR 0 3
6748: ARRAY
6749: PUSH
6750: LD_VAR 0 1
6754: DIFF
6755: PPUSH
6756: CALL_OW 1
6760: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6761: LD_ADDR_EXP 49
6765: PUSH
6766: LD_EXP 49
6770: PUSH
6771: LD_INT 1
6773: MINUS
6774: ST_TO_ADDR
// end ; end_of_file
6775: LD_VAR 0 2
6779: RET
// var respawn , inqueue ; export function init_respawning ; begin
6780: LD_INT 0
6782: PPUSH
// respawn := Rand ( 1 , 8 ) ;
6783: LD_ADDR_LOC 9
6787: PUSH
6788: LD_INT 1
6790: PPUSH
6791: LD_INT 8
6793: PPUSH
6794: CALL_OW 12
6798: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6799: LD_ADDR_LOC 10
6803: PUSH
6804: LD_INT 0
6806: PUSH
6807: LD_INT 0
6809: PUSH
6810: LD_INT 0
6812: PUSH
6813: LD_INT 0
6815: PUSH
6816: LD_INT 0
6818: PUSH
6819: LD_INT 0
6821: PUSH
6822: LD_INT 0
6824: PUSH
6825: LD_INT 0
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: ST_TO_ADDR
// end ;
6838: LD_VAR 0 1
6842: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
6843: GO 6845
6845: DISABLE
6846: LD_INT 0
6848: PPUSH
6849: PPUSH
6850: PPUSH
// begin if respawning_time_max = 0 then
6851: LD_EXP 32
6855: PUSH
6856: LD_INT 0
6858: EQUAL
6859: IFFALSE 6863
// exit ;
6861: GO 7268
// if respawn = 8 then
6863: LD_LOC 9
6867: PUSH
6868: LD_INT 8
6870: EQUAL
6871: IFFALSE 6883
// respawn := 1 else
6873: LD_ADDR_LOC 9
6877: PUSH
6878: LD_INT 1
6880: ST_TO_ADDR
6881: GO 6897
// respawn := respawn + 1 ;
6883: LD_ADDR_LOC 9
6887: PUSH
6888: LD_LOC 9
6892: PUSH
6893: LD_INT 1
6895: PLUS
6896: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
6897: LD_EXP 36
6901: PUSH
6902: LD_LOC 9
6906: ARRAY
6907: PUSH
6908: LD_LOC 10
6912: PUSH
6913: LD_LOC 9
6917: ARRAY
6918: NOT
6919: AND
6920: IFFALSE 7267
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
6922: LD_ADDR_VAR 0 1
6926: PUSH
6927: LD_INT 21
6929: PUSH
6930: LD_INT 1
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: LD_INT 22
6939: PUSH
6940: LD_LOC 9
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: LD_INT 3
6951: PUSH
6952: LD_INT 23
6954: PUSH
6955: LD_INT 0
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: PUSH
6962: EMPTY
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: PPUSH
6968: CALL_OW 69
6972: ST_TO_ADDR
// if n < number_of_people then
6973: LD_VAR 0 1
6977: PUSH
6978: LD_EXP 23
6982: LESS
6983: IFFALSE 7264
// begin dep := FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , respawn ] ] ) ;
6985: LD_ADDR_VAR 0 2
6989: PUSH
6990: LD_INT 21
6992: PUSH
6993: LD_INT 3
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PUSH
7000: LD_INT 2
7002: PUSH
7003: LD_INT 30
7005: PUSH
7006: LD_INT 0
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: PUSH
7013: LD_INT 30
7015: PUSH
7016: LD_INT 1
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: LIST
7027: PUSH
7028: LD_INT 50
7030: PUSH
7031: EMPTY
7032: LIST
7033: PUSH
7034: LD_INT 22
7036: PUSH
7037: LD_LOC 9
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: PPUSH
7052: CALL_OW 69
7056: ST_TO_ADDR
// if dep then
7057: LD_VAR 0 2
7061: IFFALSE 7261
// begin aktresp := respawn ;
7063: LD_ADDR_VAR 0 3
7067: PUSH
7068: LD_LOC 9
7072: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
7073: LD_ADDR_LOC 10
7077: PUSH
7078: LD_LOC 10
7082: PPUSH
7083: LD_VAR 0 3
7087: PPUSH
7088: LD_INT 1
7090: PPUSH
7091: CALL_OW 1
7095: ST_TO_ADDR
// enable ;
7096: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
7097: LD_EXP 31
7101: PPUSH
7102: LD_EXP 32
7106: PPUSH
7107: CALL_OW 12
7111: PPUSH
7112: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
7116: LD_ADDR_LOC 10
7120: PUSH
7121: LD_LOC 10
7125: PPUSH
7126: LD_VAR 0 3
7130: PPUSH
7131: LD_INT 0
7133: PPUSH
7134: CALL_OW 1
7138: ST_TO_ADDR
// hc_name :=  ;
7139: LD_ADDR_OWVAR 26
7143: PUSH
7144: LD_STRING 
7146: ST_TO_ADDR
// hc_importance := 0 ;
7147: LD_ADDR_OWVAR 32
7151: PUSH
7152: LD_INT 0
7154: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
7155: LD_INT 0
7157: PPUSH
7158: LD_INT 0
7160: PPUSH
7161: LD_EXP 24
7165: PUSH
7166: LD_INT 2
7168: DIV
7169: PPUSH
7170: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
7174: LD_ADDR_OWVAR 21
7178: PUSH
7179: LD_EXP 37
7183: PUSH
7184: LD_VAR 0 3
7188: ARRAY
7189: ST_TO_ADDR
// uc_side := aktresp ;
7190: LD_ADDR_OWVAR 20
7194: PUSH
7195: LD_VAR 0 3
7199: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
7200: LD_ADDR_VAR 0 2
7204: PUSH
7205: LD_VAR 0 2
7209: PUSH
7210: LD_INT 1
7212: PPUSH
7213: LD_VAR 0 2
7217: PPUSH
7218: CALL_OW 12
7222: ARRAY
7223: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
7224: CALL_OW 44
7228: PPUSH
7229: LD_VAR 0 2
7233: PPUSH
7234: CALL_OW 250
7238: PPUSH
7239: LD_VAR 0 2
7243: PPUSH
7244: CALL_OW 251
7248: PPUSH
7249: LD_INT 7
7251: PPUSH
7252: LD_INT 1
7254: PPUSH
7255: CALL_OW 50
// end else
7259: GO 7262
// enable ;
7261: ENABLE
// end else
7262: GO 7265
// enable ;
7264: ENABLE
// end else
7265: GO 7268
// enable ;
7267: ENABLE
// end ; end_of_file
7268: PPOPN 3
7270: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7271: LD_VAR 0 1
7275: PPUSH
7276: CALL_OW 266
7280: PUSH
7281: LD_INT 0
7283: PUSH
7284: LD_INT 1
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: IN
7291: IFFALSE 7316
// SetBName ( b , @ & GetSide ( b ) ) ;
7293: LD_VAR 0 1
7297: PPUSH
7298: LD_STRING @
7300: PUSH
7301: LD_VAR 0 1
7305: PPUSH
7306: CALL_OW 255
7310: STR
7311: PPUSH
7312: CALL_OW 500
// end ;
7316: PPOPN 2
7318: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7319: LD_VAR 0 1
7323: PPUSH
7324: CALL_OW 266
7328: PUSH
7329: LD_INT 0
7331: PUSH
7332: LD_INT 1
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: IN
7339: IFFALSE 7364
// SetBName ( b , @ & GetSide ( b ) ) ;
7341: LD_VAR 0 1
7345: PPUSH
7346: LD_STRING @
7348: PUSH
7349: LD_VAR 0 1
7353: PPUSH
7354: CALL_OW 255
7358: STR
7359: PPUSH
7360: CALL_OW 500
// end ;
7364: PPOPN 3
7366: END
// on VehicleConstructed ( veh , fac ) do var side ;
7367: LD_INT 0
7369: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7370: LD_VAR 0 1
7374: PPUSH
7375: CALL_OW 263
7379: PUSH
7380: LD_INT 5
7382: EQUAL
7383: IFFALSE 7525
// begin side := GetSide ( veh ) ;
7385: LD_ADDR_VAR 0 3
7389: PUSH
7390: LD_VAR 0 1
7394: PPUSH
7395: CALL_OW 255
7399: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7400: LD_ADDR_EXP 52
7404: PUSH
7405: LD_EXP 52
7409: PPUSH
7410: LD_VAR 0 3
7414: PPUSH
7415: LD_EXP 52
7419: PUSH
7420: LD_VAR 0 3
7424: ARRAY
7425: PPUSH
7426: LD_INT 52
7428: PUSH
7429: EMPTY
7430: LIST
7431: PPUSH
7432: CALL_OW 72
7436: PUSH
7437: LD_INT 22
7439: PUSH
7440: LD_VAR 0 3
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: PUSH
7449: LD_INT 2
7451: PUSH
7452: LD_INT 33
7454: PUSH
7455: LD_INT 5
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PUSH
7462: LD_INT 25
7464: PUSH
7465: LD_INT 12
7467: PUSH
7468: EMPTY
7469: LIST
7470: LIST
7471: PUSH
7472: LD_INT 25
7474: PUSH
7475: LD_INT 15
7477: PUSH
7478: EMPTY
7479: LIST
7480: LIST
7481: PUSH
7482: LD_INT 25
7484: PUSH
7485: LD_INT 16
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: PUSH
7492: LD_INT 25
7494: PUSH
7495: LD_INT 17
7497: PUSH
7498: EMPTY
7499: LIST
7500: LIST
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: PPUSH
7514: CALL_OW 69
7518: UNION
7519: PPUSH
7520: CALL_OW 1
7524: ST_TO_ADDR
// end ; end ;
7525: PPOPN 3
7527: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7528: LD_INT 0
7530: PPUSH
7531: PPUSH
7532: PPUSH
7533: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7534: LD_VAR 0 1
7538: PPUSH
7539: CALL_OW 257
7543: PUSH
7544: LD_INT 12
7546: PUSH
7547: LD_INT 15
7549: PUSH
7550: LD_INT 17
7552: PUSH
7553: LD_INT 16
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: IN
7562: PUSH
7563: LD_VAR 0 1
7567: PPUSH
7568: CALL_OW 263
7572: PUSH
7573: LD_INT 5
7575: EQUAL
7576: OR
7577: IFFALSE 7588
// ApeKilled ( j ) ;
7579: LD_VAR 0 1
7583: PPUSH
7584: CALL 6636 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7588: LD_VAR 0 1
7592: PPUSH
7593: CALL_OW 266
7597: PUSH
7598: LD_INT 0
7600: PUSH
7601: LD_INT 1
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: IN
7608: IFFALSE 7690
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7610: LD_ADDR_VAR 0 4
7614: PUSH
7615: LD_EXP 36
7619: PUSH
7620: LD_VAR 0 1
7624: PPUSH
7625: CALL_OW 255
7629: ARRAY
7630: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7631: LD_ADDR_VAR 0 2
7635: PUSH
7636: LD_EXP 41
7640: PUSH
7641: LD_VAR 0 4
7645: ARRAY
7646: PUSH
7647: LD_INT 1
7649: ARRAY
7650: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7651: LD_ADDR_VAR 0 3
7655: PUSH
7656: LD_EXP 41
7660: PUSH
7661: LD_VAR 0 4
7665: ARRAY
7666: PUSH
7667: LD_INT 2
7669: ARRAY
7670: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7671: LD_VAR 0 2
7675: PPUSH
7676: LD_VAR 0 3
7680: PPUSH
7681: CALL_OW 420
7685: PPUSH
7686: CALL_OW 419
// end ; end ;
7690: PPOPN 5
7692: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7693: LD_VAR 0 1
7697: PPUSH
7698: LD_VAR 0 2
7702: PPUSH
7703: LD_VAR 0 3
7707: PPUSH
7708: LD_OWVAR 2
7712: PPUSH
7713: CALL 10751 0 4
7717: PPOPN 3
7719: END
// function CanWinLoose ; begin
7720: LD_INT 0
7722: PPUSH
// Result := true ;
7723: LD_ADDR_VAR 0 1
7727: PUSH
7728: LD_INT 1
7730: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
7731: CALL_OW 518
7735: PUSH
7736: CALL_OW 519
7740: PUSH
7741: LD_INT 0
7743: GREATER
7744: AND
7745: IFFALSE 7755
// Result := false ;
7747: LD_ADDR_VAR 0 1
7751: PUSH
7752: LD_INT 0
7754: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7755: CALL_OW 531
7759: PUSH
7760: CALL_OW 519
7764: PUSH
7765: LD_INT 1
7767: GREATER
7768: AND
7769: IFFALSE 7779
// Result := false ;
7771: LD_ADDR_VAR 0 1
7775: PUSH
7776: LD_INT 0
7778: ST_TO_ADDR
// end ;
7779: LD_VAR 0 1
7783: RET
// function HasPower ( i ) ; begin
7784: LD_INT 0
7786: PPUSH
// if def_people_respawning then
7787: LD_EXP 11
7791: IFFALSE 7882
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
7793: LD_ADDR_VAR 0 2
7797: PUSH
7798: LD_INT 22
7800: PUSH
7801: LD_VAR 0 1
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: PUSH
7810: LD_INT 2
7812: PUSH
7813: LD_INT 21
7815: PUSH
7816: LD_INT 1
7818: PUSH
7819: EMPTY
7820: LIST
7821: LIST
7822: PUSH
7823: LD_INT 33
7825: PUSH
7826: LD_INT 3
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: PUSH
7833: LD_INT 33
7835: PUSH
7836: LD_INT 5
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: PUSH
7843: LD_INT 30
7845: PUSH
7846: LD_INT 0
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: PUSH
7853: LD_INT 30
7855: PUSH
7856: LD_INT 1
7858: PUSH
7859: EMPTY
7860: LIST
7861: LIST
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: PPUSH
7875: CALL_OW 69
7879: ST_TO_ADDR
7880: GO 7947
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
7882: LD_ADDR_VAR 0 2
7886: PUSH
7887: LD_INT 22
7889: PUSH
7890: LD_VAR 0 1
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: PUSH
7899: LD_INT 2
7901: PUSH
7902: LD_INT 21
7904: PUSH
7905: LD_INT 1
7907: PUSH
7908: EMPTY
7909: LIST
7910: LIST
7911: PUSH
7912: LD_INT 33
7914: PUSH
7915: LD_INT 3
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: LD_INT 33
7924: PUSH
7925: LD_INT 5
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: PPUSH
7942: CALL_OW 69
7946: ST_TO_ADDR
// end ;
7947: LD_VAR 0 2
7951: RET
// function AlliedSides ( i , j ) ; begin
7952: LD_INT 0
7954: PPUSH
// Result := false ;
7955: LD_ADDR_VAR 0 3
7959: PUSH
7960: LD_INT 0
7962: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
7963: LD_VAR 0 1
7967: PPUSH
7968: LD_VAR 0 2
7972: PPUSH
7973: CALL_OW 81
7977: PUSH
7978: LD_INT 1
7980: EQUAL
7981: PUSH
7982: LD_VAR 0 2
7986: PPUSH
7987: LD_VAR 0 1
7991: PPUSH
7992: CALL_OW 81
7996: PUSH
7997: LD_INT 1
7999: EQUAL
8000: AND
8001: PUSH
8002: LD_VAR 0 1
8006: PPUSH
8007: CALL_OW 83
8011: AND
8012: PUSH
8013: LD_VAR 0 2
8017: PPUSH
8018: CALL_OW 83
8022: AND
8023: IFFALSE 8033
// Result := true ;
8025: LD_ADDR_VAR 0 3
8029: PUSH
8030: LD_INT 1
8032: ST_TO_ADDR
// end ;
8033: LD_VAR 0 3
8037: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
8038: CALL 7720 0 0
8042: IFFALSE 8051
8044: GO 8046
8046: DISABLE
// YouLostInMultiplayer ;
8047: CALL_OW 107
8051: END
// every 0 0$3 trigger CanWinLoose marked 401 do
8052: CALL 7720 0 0
8056: IFFALSE 8080
8058: GO 8060
8060: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
8061: LD_EXP 37
8065: PUSH
8066: LD_OWVAR 2
8070: ARRAY
8071: PPUSH
8072: CALL 10793 0 1
// YouWinInMultiplayer ;
8076: CALL_OW 106
// end ;
8080: END
// every 0 0$3 marked 98 do var i , CanWin ;
8081: GO 8083
8083: DISABLE
8084: LD_INT 0
8086: PPUSH
8087: PPUSH
// begin if not HasPower ( your_side ) then
8088: LD_OWVAR 2
8092: PPUSH
8093: CALL 7784 0 1
8097: NOT
8098: IFFALSE 8109
// begin Multiplayer_Loose_Message ;
8100: CALL_OW 521
// enable ( 400 ) ;
8104: LD_INT 400
8106: ENABLE_MARKED
// end else
8107: GO 8242
// begin CanWin := true ;
8109: LD_ADDR_VAR 0 2
8113: PUSH
8114: LD_INT 1
8116: ST_TO_ADDR
// for i := 1 to 8 do
8117: LD_ADDR_VAR 0 1
8121: PUSH
8122: DOUBLE
8123: LD_INT 1
8125: DEC
8126: ST_TO_ADDR
8127: LD_INT 8
8129: PUSH
8130: FOR_TO
8131: IFFALSE 8228
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8133: LD_EXP 36
8137: PUSH
8138: LD_VAR 0 1
8142: ARRAY
8143: PUSH
8144: LD_VAR 0 1
8148: PPUSH
8149: CALL_OW 108
8153: AND
8154: PUSH
8155: LD_VAR 0 1
8159: PUSH
8160: LD_OWVAR 2
8164: NONEQUAL
8165: AND
8166: IFFALSE 8226
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
8168: LD_EXP 34
8172: PUSH
8173: LD_VAR 0 1
8177: ARRAY
8178: NOT
8179: PUSH
8180: LD_EXP 34
8184: PUSH
8185: LD_VAR 0 1
8189: ARRAY
8190: PUSH
8191: LD_EXP 34
8195: PUSH
8196: LD_OWVAR 2
8200: ARRAY
8201: NONEQUAL
8202: OR
8203: IFFALSE 8226
// if HasPower ( i ) then
8205: LD_VAR 0 1
8209: PPUSH
8210: CALL 7784 0 1
8214: IFFALSE 8226
// begin CanWin := false ;
8216: LD_ADDR_VAR 0 2
8220: PUSH
8221: LD_INT 0
8223: ST_TO_ADDR
// break ;
8224: GO 8228
// end ;
8226: GO 8130
8228: POP
8229: POP
// if CanWin then
8230: LD_VAR 0 2
8234: IFFALSE 8241
// enable ( 401 ) else
8236: LD_INT 401
8238: ENABLE_MARKED
8239: GO 8242
// enable ;
8241: ENABLE
// end ; end ;
8242: PPOPN 2
8244: END
// every 0 0$3 marked 99 do var i , CanWin ;
8245: GO 8247
8247: DISABLE
8248: LD_INT 0
8250: PPUSH
8251: PPUSH
// begin if not HasPower ( your_side ) then
8252: LD_OWVAR 2
8256: PPUSH
8257: CALL 7784 0 1
8261: NOT
8262: IFFALSE 8273
// begin Multiplayer_Loose_Message ;
8264: CALL_OW 521
// enable ( 400 ) ;
8268: LD_INT 400
8270: ENABLE_MARKED
// end else
8271: GO 8386
// begin CanWin := true ;
8273: LD_ADDR_VAR 0 2
8277: PUSH
8278: LD_INT 1
8280: ST_TO_ADDR
// for i := 1 to 8 do
8281: LD_ADDR_VAR 0 1
8285: PUSH
8286: DOUBLE
8287: LD_INT 1
8289: DEC
8290: ST_TO_ADDR
8291: LD_INT 8
8293: PUSH
8294: FOR_TO
8295: IFFALSE 8372
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8297: LD_EXP 36
8301: PUSH
8302: LD_VAR 0 1
8306: ARRAY
8307: PUSH
8308: LD_VAR 0 1
8312: PPUSH
8313: CALL_OW 108
8317: AND
8318: PUSH
8319: LD_VAR 0 1
8323: PUSH
8324: LD_OWVAR 2
8328: NONEQUAL
8329: AND
8330: IFFALSE 8370
// if not AlliedSides ( i , your_side ) then
8332: LD_VAR 0 1
8336: PPUSH
8337: LD_OWVAR 2
8341: PPUSH
8342: CALL 7952 0 2
8346: NOT
8347: IFFALSE 8370
// if HasPower ( i ) then
8349: LD_VAR 0 1
8353: PPUSH
8354: CALL 7784 0 1
8358: IFFALSE 8370
// begin CanWin := false ;
8360: LD_ADDR_VAR 0 2
8364: PUSH
8365: LD_INT 0
8367: ST_TO_ADDR
// break ;
8368: GO 8372
// end ;
8370: GO 8294
8372: POP
8373: POP
// if CanWin then
8374: LD_VAR 0 2
8378: IFFALSE 8385
// enable ( 401 ) else
8380: LD_INT 401
8382: ENABLE_MARKED
8383: GO 8386
// enable ;
8385: ENABLE
// end ; end ; end_of_file
8386: PPOPN 2
8388: END
// every 0 0$1 marked 100 do var i , base , pom , filter , sib_mined ;
8389: GO 8391
8391: DISABLE
8392: LD_INT 0
8394: PPUSH
8395: PPUSH
8396: PPUSH
8397: PPUSH
8398: PPUSH
// begin sib_mined := [ ] ;
8399: LD_ADDR_VAR 0 5
8403: PUSH
8404: EMPTY
8405: ST_TO_ADDR
// for i := 1 to 8 do
8406: LD_ADDR_VAR 0 1
8410: PUSH
8411: DOUBLE
8412: LD_INT 1
8414: DEC
8415: ST_TO_ADDR
8416: LD_INT 8
8418: PUSH
8419: FOR_TO
8420: IFFALSE 8576
// if Side_Positions [ i ] then
8422: LD_EXP 36
8426: PUSH
8427: LD_VAR 0 1
8431: ARRAY
8432: IFFALSE 8560
// begin filter := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8434: LD_ADDR_VAR 0 4
8438: PUSH
8439: LD_INT 22
8441: PUSH
8442: LD_VAR 0 1
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: PUSH
8451: LD_INT 2
8453: PUSH
8454: LD_INT 30
8456: PUSH
8457: LD_INT 0
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: PUSH
8464: LD_INT 30
8466: PUSH
8467: LD_INT 1
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: LIST
8478: PUSH
8479: EMPTY
8480: LIST
8481: LIST
8482: PPUSH
8483: CALL_OW 69
8487: ST_TO_ADDR
// pom := 0 ;
8488: LD_ADDR_VAR 0 3
8492: PUSH
8493: LD_INT 0
8495: ST_TO_ADDR
// for base in filter do
8496: LD_ADDR_VAR 0 2
8500: PUSH
8501: LD_VAR 0 4
8505: PUSH
8506: FOR_IN
8507: IFFALSE 8540
// pom := pom + GetResourceType ( GetBase ( base ) , mat_siberit ) ;
8509: LD_ADDR_VAR 0 3
8513: PUSH
8514: LD_VAR 0 3
8518: PUSH
8519: LD_VAR 0 2
8523: PPUSH
8524: CALL_OW 274
8528: PPUSH
8529: LD_INT 3
8531: PPUSH
8532: CALL_OW 275
8536: PLUS
8537: ST_TO_ADDR
8538: GO 8506
8540: POP
8541: POP
// sib_mined := sib_mined ^ pom ;
8542: LD_ADDR_VAR 0 5
8546: PUSH
8547: LD_VAR 0 5
8551: PUSH
8552: LD_VAR 0 3
8556: ADD
8557: ST_TO_ADDR
// end else
8558: GO 8574
// sib_mined := sib_mined ^ 0 ;
8560: LD_ADDR_VAR 0 5
8564: PUSH
8565: LD_VAR 0 5
8569: PUSH
8570: LD_INT 0
8572: ADD
8573: ST_TO_ADDR
8574: GO 8419
8576: POP
8577: POP
// if not def_public_score then
8578: LD_EXP 14
8582: NOT
8583: IFFALSE 8673
// begin ExtraStrings := [ ] ;
8585: LD_ADDR_EXP 56
8589: PUSH
8590: EMPTY
8591: ST_TO_ADDR
// for i := 1 to 8 do
8592: LD_ADDR_VAR 0 1
8596: PUSH
8597: DOUBLE
8598: LD_INT 1
8600: DEC
8601: ST_TO_ADDR
8602: LD_INT 8
8604: PUSH
8605: FOR_TO
8606: IFFALSE 8669
// if Side_Positions [ i ] then
8608: LD_EXP 36
8612: PUSH
8613: LD_VAR 0 1
8617: ARRAY
8618: IFFALSE 8667
// ExtraStrings := ExtraStrings ^ [ #AlienBase-MinedPublic , i , i , sib_mined [ i ] , amount_of_siberit ] ;
8620: LD_ADDR_EXP 56
8624: PUSH
8625: LD_EXP 56
8629: PUSH
8630: LD_STRING #AlienBase-MinedPublic
8632: PUSH
8633: LD_VAR 0 1
8637: PUSH
8638: LD_VAR 0 1
8642: PUSH
8643: LD_VAR 0 5
8647: PUSH
8648: LD_VAR 0 1
8652: ARRAY
8653: PUSH
8654: LD_EXP 30
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: ADD
8666: ST_TO_ADDR
8667: GO 8605
8669: POP
8670: POP
// end else
8671: GO 8702
// ExtraStrings := [ #AlienBase-Mined , sib_mined [ Your_Side ] , amount_of_siberit ] ;
8673: LD_ADDR_EXP 56
8677: PUSH
8678: LD_STRING #AlienBase-Mined
8680: PUSH
8681: LD_VAR 0 5
8685: PUSH
8686: LD_OWVAR 2
8690: ARRAY
8691: PUSH
8692: LD_EXP 30
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: LIST
8701: ST_TO_ADDR
// for i := 1 to 8 do
8702: LD_ADDR_VAR 0 1
8706: PUSH
8707: DOUBLE
8708: LD_INT 1
8710: DEC
8711: ST_TO_ADDR
8712: LD_INT 8
8714: PUSH
8715: FOR_TO
8716: IFFALSE 8773
// if sib_mined [ i ] >= amount_of_siberit then
8718: LD_VAR 0 5
8722: PUSH
8723: LD_VAR 0 1
8727: ARRAY
8728: PUSH
8729: LD_EXP 30
8733: GREATEREQUAL
8734: IFFALSE 8771
// begin wait ( 0 0$1 ) ;
8736: LD_INT 35
8738: PPUSH
8739: CALL_OW 67
// if sib_mined [ your_side ] >= amount_of_siberit then
8743: LD_VAR 0 5
8747: PUSH
8748: LD_OWVAR 2
8752: ARRAY
8753: PUSH
8754: LD_EXP 30
8758: GREATEREQUAL
8759: IFFALSE 8767
// YouWinInMultiplayer else
8761: CALL_OW 106
8765: GO 8771
// YouLostInMultiplayer ;
8767: CALL_OW 107
// end ;
8771: GO 8715
8773: POP
8774: POP
// enable ;
8775: ENABLE
// end ; end_of_file
8776: PPOPN 5
8778: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
8779: LD_INT 0
8781: PPUSH
8782: PPUSH
// for un in battle_flags_id do
8783: LD_ADDR_VAR 0 2
8787: PUSH
8788: LD_EXP 46
8792: PUSH
8793: FOR_IN
8794: IFFALSE 8869
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
8796: LD_VAR 0 2
8800: PPUSH
8801: LD_INT 1
8803: PUSH
8804: LD_LOC 11
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: PUSH
8813: LD_INT 2
8815: PUSH
8816: LD_LOC 11
8820: PUSH
8821: LD_INT 2
8823: DIV
8824: PUSH
8825: EMPTY
8826: LIST
8827: LIST
8828: PUSH
8829: LD_INT 3
8831: PUSH
8832: LD_LOC 11
8836: PUSH
8837: LD_INT 5
8839: DIV
8840: PUSH
8841: EMPTY
8842: LIST
8843: LIST
8844: PUSH
8845: LD_INT 20
8847: PUSH
8848: LD_LOC 11
8852: PUSH
8853: EMPTY
8854: LIST
8855: LIST
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: PPUSH
8863: CALL_OW 423
8867: GO 8793
8869: POP
8870: POP
// end ;
8871: LD_VAR 0 1
8875: RET
// every 1 do var un ;
8876: GO 8878
8878: DISABLE
8879: LD_INT 0
8881: PPUSH
// begin if not def_morale_flags then
8882: LD_EXP 9
8886: NOT
8887: IFFALSE 8891
// exit ;
8889: GO 8968
// if not morale_decreasing_time then
8891: LD_EXP 28
8895: NOT
8896: IFFALSE 8900
// exit ;
8898: GO 8968
// strength = 100 ;
8900: LD_ADDR_LOC 11
8904: PUSH
8905: LD_INT 100
8907: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8908: LD_EXP 28
8912: PPUSH
8913: CALL_OW 67
// strength := strength - 1 ;
8917: LD_ADDR_LOC 11
8921: PUSH
8922: LD_LOC 11
8926: PUSH
8927: LD_INT 1
8929: MINUS
8930: ST_TO_ADDR
// Update_Flags ;
8931: CALL 8779 0 0
// until not strength ;
8935: LD_LOC 11
8939: NOT
8940: IFFALSE 8908
// for un in battle_flags_id do
8942: LD_ADDR_VAR 0 1
8946: PUSH
8947: LD_EXP 46
8951: PUSH
8952: FOR_IN
8953: IFFALSE 8966
// KillBattleFlag ( un ) ;
8955: LD_VAR 0 1
8959: PPUSH
8960: CALL_OW 419
8964: GO 8952
8966: POP
8967: POP
// end ; end_of_file
8968: PPOPN 1
8970: END
// var BloodGods , BloodGods_LastKills , BloodGods_CurrentKills , BloodGods_Positions ; every 0 0$3 marked 200 do var x ;
8971: GO 8973
8973: DISABLE
8974: LD_INT 0
8976: PPUSH
// begin enable ;
8977: ENABLE
// for x := 1 to 8 do
8978: LD_ADDR_VAR 0 1
8982: PUSH
8983: DOUBLE
8984: LD_INT 1
8986: DEC
8987: ST_TO_ADDR
8988: LD_INT 8
8990: PUSH
8991: FOR_TO
8992: IFFALSE 9076
// if ( BloodGods_CurrentKills [ x ] > 5 ) and ( BloodGods [ x ] = - 1 ) then
8994: LD_LOC 18
8998: PUSH
8999: LD_VAR 0 1
9003: ARRAY
9004: PUSH
9005: LD_INT 5
9007: GREATER
9008: PUSH
9009: LD_LOC 16
9013: PUSH
9014: LD_VAR 0 1
9018: ARRAY
9019: PUSH
9020: LD_INT 1
9022: NEG
9023: EQUAL
9024: AND
9025: IFFALSE 9074
// begin BloodGods_LastKills := Replace ( BloodGods_LastKills , x , BloodGods_LastKills [ x ] + 6 ) ;
9027: LD_ADDR_LOC 17
9031: PUSH
9032: LD_LOC 17
9036: PPUSH
9037: LD_VAR 0 1
9041: PPUSH
9042: LD_LOC 17
9046: PUSH
9047: LD_VAR 0 1
9051: ARRAY
9052: PUSH
9053: LD_INT 6
9055: PLUS
9056: PPUSH
9057: CALL_OW 1
9061: ST_TO_ADDR
// AwakenBloodGod ( x , false ) ;
9062: LD_VAR 0 1
9066: PPUSH
9067: LD_INT 0
9069: PPUSH
9070: CALL 9248 0 2
// end ;
9074: GO 8991
9076: POP
9077: POP
// end ;
9078: PPOPN 1
9080: END
// every 0 0$1 marked 200 do var BGL , x ;
9081: GO 9083
9083: DISABLE
9084: LD_INT 0
9086: PPUSH
9087: PPUSH
// begin enable ;
9088: ENABLE
// for x := 1 to 8 do
9089: LD_ADDR_VAR 0 2
9093: PUSH
9094: DOUBLE
9095: LD_INT 1
9097: DEC
9098: ST_TO_ADDR
9099: LD_INT 8
9101: PUSH
9102: FOR_TO
9103: IFFALSE 9234
// if ( BloodGods [ x ] > - 1 ) and IsLive ( BloodGods [ x ] ) then
9105: LD_LOC 16
9109: PUSH
9110: LD_VAR 0 2
9114: ARRAY
9115: PUSH
9116: LD_INT 1
9118: NEG
9119: GREATER
9120: PUSH
9121: LD_LOC 16
9125: PUSH
9126: LD_VAR 0 2
9130: ARRAY
9131: PPUSH
9132: CALL_OW 300
9136: AND
9137: IFFALSE 9232
// begin BGL := GetLives ( BloodGods [ x ] ) ;
9139: LD_ADDR_VAR 0 1
9143: PUSH
9144: LD_LOC 16
9148: PUSH
9149: LD_VAR 0 2
9153: ARRAY
9154: PPUSH
9155: CALL_OW 256
9159: ST_TO_ADDR
// if ( BGL < 1000 ) and ( BGL > 100 ) then
9160: LD_VAR 0 1
9164: PUSH
9165: LD_INT 1000
9167: LESS
9168: PUSH
9169: LD_VAR 0 1
9173: PUSH
9174: LD_INT 100
9176: GREATER
9177: AND
9178: IFFALSE 9232
// begin BGL := BGL + 10 ;
9180: LD_ADDR_VAR 0 1
9184: PUSH
9185: LD_VAR 0 1
9189: PUSH
9190: LD_INT 10
9192: PLUS
9193: ST_TO_ADDR
// if BGL > 1000 then
9194: LD_VAR 0 1
9198: PUSH
9199: LD_INT 1000
9201: GREATER
9202: IFFALSE 9212
// BGL := 1000 ;
9204: LD_ADDR_VAR 0 1
9208: PUSH
9209: LD_INT 1000
9211: ST_TO_ADDR
// SetLives ( BloodGods [ x ] , BGL ) ;
9212: LD_LOC 16
9216: PUSH
9217: LD_VAR 0 2
9221: ARRAY
9222: PPUSH
9223: LD_VAR 0 1
9227: PPUSH
9228: CALL_OW 234
// end ; end ;
9232: GO 9102
9234: POP
9235: POP
// end ;
9236: PPOPN 2
9238: END
// every 0 0$1 marked 200 do
9239: GO 9241
9241: DISABLE
// begin DisplayTimeWithKills ;
9242: CALL 9489 0 0
// enable ;
9246: ENABLE
// end ;
9247: END
// function AwakenBloodGod ( side , NoDialog ) ; begin
9248: LD_INT 0
9250: PPUSH
// uc_direction := Rand ( 0 , 5 ) ;
9251: LD_ADDR_OWVAR 24
9255: PUSH
9256: LD_INT 0
9258: PPUSH
9259: LD_INT 5
9261: PPUSH
9262: CALL_OW 12
9266: ST_TO_ADDR
// PrepareHuman ( 1 , class_soldier , 15 ) ;
9267: LD_INT 1
9269: PPUSH
9270: LD_INT 1
9272: PPUSH
9273: LD_INT 15
9275: PPUSH
9276: CALL_OW 380
// hc_importance := 106 ;
9280: LD_ADDR_OWVAR 32
9284: PUSH
9285: LD_INT 106
9287: ST_TO_ADDR
// hc_name := Blood God of  & mp_sides_players_names [ side ] ;
9288: LD_ADDR_OWVAR 26
9292: PUSH
9293: LD_STRING Blood God of 
9295: PUSH
9296: LD_OWVAR 19
9300: PUSH
9301: LD_VAR 0 1
9305: ARRAY
9306: STR
9307: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
9308: LD_ADDR_OWVAR 21
9312: PUSH
9313: LD_EXP 37
9317: PUSH
9318: LD_VAR 0 1
9322: ARRAY
9323: ST_TO_ADDR
// uc_side := side ;
9324: LD_ADDR_OWVAR 20
9328: PUSH
9329: LD_VAR 0 1
9333: ST_TO_ADDR
// hc_noskilllimit := true ;
9334: LD_ADDR_OWVAR 76
9338: PUSH
9339: LD_INT 1
9341: ST_TO_ADDR
// hc_agressivity := 50 ;
9342: LD_ADDR_OWVAR 35
9346: PUSH
9347: LD_INT 50
9349: ST_TO_ADDR
// BloodGods := Replace ( BloodGods , Side , CreateHuman ) ;
9350: LD_ADDR_LOC 16
9354: PUSH
9355: LD_LOC 16
9359: PPUSH
9360: LD_VAR 0 1
9364: PPUSH
9365: CALL_OW 44
9369: PPUSH
9370: CALL_OW 1
9374: ST_TO_ADDR
// PlaceUnitXYR ( BloodGods [ side ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 1 ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 2 ] , 10 , false ) ;
9375: LD_LOC 16
9379: PUSH
9380: LD_VAR 0 1
9384: ARRAY
9385: PPUSH
9386: LD_LOC 19
9390: PUSH
9391: LD_EXP 36
9395: PUSH
9396: LD_VAR 0 1
9400: ARRAY
9401: ARRAY
9402: PUSH
9403: LD_INT 1
9405: ARRAY
9406: PPUSH
9407: LD_LOC 19
9411: PUSH
9412: LD_EXP 36
9416: PUSH
9417: LD_VAR 0 1
9421: ARRAY
9422: ARRAY
9423: PUSH
9424: LD_INT 2
9426: ARRAY
9427: PPUSH
9428: LD_INT 10
9430: PPUSH
9431: LD_INT 0
9433: PPUSH
9434: CALL_OW 50
// SetAttr ( BloodGods [ side ] , attr_stamina , 300 ) ;
9438: LD_LOC 16
9442: PUSH
9443: LD_VAR 0 1
9447: ARRAY
9448: PPUSH
9449: LD_INT 1
9451: PPUSH
9452: LD_INT 300
9454: PPUSH
9455: CALL_OW 239
// if not NoDialog then
9459: LD_VAR 0 2
9463: NOT
9464: IFFALSE 9484
// SayRadio ( BloodGods [ side ] , DLAwaken ) ;
9466: LD_LOC 16
9470: PUSH
9471: LD_VAR 0 1
9475: ARRAY
9476: PPUSH
9477: LD_STRING DLAwaken
9479: PPUSH
9480: CALL_OW 94
// end ;
9484: LD_VAR 0 3
9488: RET
// function DisplayTimeWithKills ; var x ; begin
9489: LD_INT 0
9491: PPUSH
9492: PPUSH
// ExtraStrings :=  ;
9493: LD_ADDR_EXP 56
9497: PUSH
9498: LD_STRING 
9500: ST_TO_ADDR
// for x = 1 to Side_Positions do
9501: LD_ADDR_VAR 0 2
9505: PUSH
9506: DOUBLE
9507: LD_INT 1
9509: DEC
9510: ST_TO_ADDR
9511: LD_EXP 36
9515: PUSH
9516: FOR_TO
9517: IFFALSE 9750
// if Side_Positions [ x ] then
9519: LD_EXP 36
9523: PUSH
9524: LD_VAR 0 2
9528: ARRAY
9529: IFFALSE 9748
// begin BloodGods_CurrentKills := Replace ( BloodGods_CurrentKills , x , GetHumansKilled ( x ) - BloodGods_LastKills [ x ] ) ;
9531: LD_ADDR_LOC 18
9535: PUSH
9536: LD_LOC 18
9540: PPUSH
9541: LD_VAR 0 2
9545: PPUSH
9546: LD_VAR 0 2
9550: PPUSH
9551: CALL_OW 515
9555: PUSH
9556: LD_LOC 17
9560: PUSH
9561: LD_VAR 0 2
9565: ARRAY
9566: MINUS
9567: PPUSH
9568: CALL_OW 1
9572: ST_TO_ADDR
// if ( BloodGods [ x ] > - 1 ) and ( IsLive ( BloodGods [ x ] ) ) then
9573: LD_LOC 16
9577: PUSH
9578: LD_VAR 0 2
9582: ARRAY
9583: PUSH
9584: LD_INT 1
9586: NEG
9587: GREATER
9588: PUSH
9589: LD_LOC 16
9593: PUSH
9594: LD_VAR 0 2
9598: ARRAY
9599: PPUSH
9600: CALL_OW 300
9604: AND
9605: IFFALSE 9638
// ExtraStrings = ExtraStrings ^ [ #godawoken , x , x ] else
9607: LD_ADDR_EXP 56
9611: PUSH
9612: LD_EXP 56
9616: PUSH
9617: LD_STRING #godawoken
9619: PUSH
9620: LD_VAR 0 2
9624: PUSH
9625: LD_VAR 0 2
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: LIST
9634: ADD
9635: ST_TO_ADDR
9636: GO 9748
// if ( BloodGods [ x ] > - 1 ) and ( IsDead ( BloodGods [ x ] ) ) then
9638: LD_LOC 16
9642: PUSH
9643: LD_VAR 0 2
9647: ARRAY
9648: PUSH
9649: LD_INT 1
9651: NEG
9652: GREATER
9653: PUSH
9654: LD_LOC 16
9658: PUSH
9659: LD_VAR 0 2
9663: ARRAY
9664: PPUSH
9665: CALL_OW 301
9669: AND
9670: IFFALSE 9703
// ExtraStrings = ExtraStrings ^ [ #goddied , x , x ] else
9672: LD_ADDR_EXP 56
9676: PUSH
9677: LD_EXP 56
9681: PUSH
9682: LD_STRING #goddied
9684: PUSH
9685: LD_VAR 0 2
9689: PUSH
9690: LD_VAR 0 2
9694: PUSH
9695: EMPTY
9696: LIST
9697: LIST
9698: LIST
9699: ADD
9700: ST_TO_ADDR
9701: GO 9748
// ExtraStrings = ExtraStrings ^ [ #godssacrifise , x , x , BloodGods_CurrentKills [ x ] , 6 ] end ;
9703: LD_ADDR_EXP 56
9707: PUSH
9708: LD_EXP 56
9712: PUSH
9713: LD_STRING #godssacrifise
9715: PUSH
9716: LD_VAR 0 2
9720: PUSH
9721: LD_VAR 0 2
9725: PUSH
9726: LD_LOC 18
9730: PUSH
9731: LD_VAR 0 2
9735: ARRAY
9736: PUSH
9737: LD_INT 6
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: ADD
9747: ST_TO_ADDR
9748: GO 9516
9750: POP
9751: POP
// end ;
9752: LD_VAR 0 1
9756: RET
// export function InitBloodGods ; begin
9757: LD_INT 0
9759: PPUSH
// BloodGods = [ - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 ] ;
9760: LD_ADDR_LOC 16
9764: PUSH
9765: LD_INT 1
9767: NEG
9768: PUSH
9769: LD_INT 1
9771: NEG
9772: PUSH
9773: LD_INT 1
9775: NEG
9776: PUSH
9777: LD_INT 1
9779: NEG
9780: PUSH
9781: LD_INT 1
9783: NEG
9784: PUSH
9785: LD_INT 1
9787: NEG
9788: PUSH
9789: LD_INT 1
9791: NEG
9792: PUSH
9793: LD_INT 1
9795: NEG
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: ST_TO_ADDR
// BloodGods_LastKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9807: LD_ADDR_LOC 17
9811: PUSH
9812: LD_INT 0
9814: PUSH
9815: LD_INT 0
9817: PUSH
9818: LD_INT 0
9820: PUSH
9821: LD_INT 0
9823: PUSH
9824: LD_INT 0
9826: PUSH
9827: LD_INT 0
9829: PUSH
9830: LD_INT 0
9832: PUSH
9833: LD_INT 0
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: ST_TO_ADDR
// BloodGods_CurrentKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9846: LD_ADDR_LOC 18
9850: PUSH
9851: LD_INT 0
9853: PUSH
9854: LD_INT 0
9856: PUSH
9857: LD_INT 0
9859: PUSH
9860: LD_INT 0
9862: PUSH
9863: LD_INT 0
9865: PUSH
9866: LD_INT 0
9868: PUSH
9869: LD_INT 0
9871: PUSH
9872: LD_INT 0
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: ST_TO_ADDR
// BloodGods_Positions = [ [ 60 , 47 ] , [ 82 , 26 ] , [ 124 , 45 ] , [ 147 , 90 ] , [ 126 , 112 ] , [ 84 , 92 ] , [ 106 , 73 ] , [ 106 , 73 ] ] ;
9885: LD_ADDR_LOC 19
9889: PUSH
9890: LD_INT 60
9892: PUSH
9893: LD_INT 47
9895: PUSH
9896: EMPTY
9897: LIST
9898: LIST
9899: PUSH
9900: LD_INT 82
9902: PUSH
9903: LD_INT 26
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: PUSH
9910: LD_INT 124
9912: PUSH
9913: LD_INT 45
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: PUSH
9920: LD_INT 147
9922: PUSH
9923: LD_INT 90
9925: PUSH
9926: EMPTY
9927: LIST
9928: LIST
9929: PUSH
9930: LD_INT 126
9932: PUSH
9933: LD_INT 112
9935: PUSH
9936: EMPTY
9937: LIST
9938: LIST
9939: PUSH
9940: LD_INT 84
9942: PUSH
9943: LD_INT 92
9945: PUSH
9946: EMPTY
9947: LIST
9948: LIST
9949: PUSH
9950: LD_INT 106
9952: PUSH
9953: LD_INT 73
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: PUSH
9960: LD_INT 106
9962: PUSH
9963: LD_INT 73
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: ST_TO_ADDR
// ClearHumansKilled ;
9980: CALL_OW 516
// enable ( 200 ) ;
9984: LD_INT 200
9986: ENABLE_MARKED
// end ; end_of_file
9987: LD_VAR 0 1
9991: RET
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
9992: LD_INT 0
9994: PPUSH
9995: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
9996: LD_ADDR_VAR 0 2
10000: PUSH
10001: LD_STRING #Multi1x1-Time
10003: PUSH
10004: LD_OWVAR 1
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
10013: LD_INT 0
10015: PUSH
10016: LD_EXP 33
10020: PUSH
10021: LD_OWVAR 1
10025: MINUS
10026: LESSEQUAL
10027: IFFALSE 10058
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
10029: LD_ADDR_VAR 0 2
10033: PUSH
10034: LD_VAR 0 2
10038: PUSH
10039: LD_STRING #allowedsibbomb
10041: PUSH
10042: LD_EXP 33
10046: PUSH
10047: LD_OWVAR 1
10051: MINUS
10052: PUSH
10053: EMPTY
10054: LIST
10055: LIST
10056: ADD
10057: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
10058: LD_INT 0
10060: PUSH
10061: LD_EXP 59
10065: PUSH
10066: LD_OWVAR 1
10070: MINUS
10071: LESSEQUAL
10072: IFFALSE 10103
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
10074: LD_ADDR_VAR 0 2
10078: PUSH
10079: LD_VAR 0 2
10083: PUSH
10084: LD_STRING #builduptime
10086: PUSH
10087: LD_EXP 59
10091: PUSH
10092: LD_OWVAR 1
10096: MINUS
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: ADD
10102: ST_TO_ADDR
// if ( ExtraStrings ) then
10103: LD_EXP 56
10107: IFFALSE 10129
// AllStrings := AllStrings ^  ^ ExtraStrings ;
10109: LD_ADDR_VAR 0 2
10113: PUSH
10114: LD_VAR 0 2
10118: PUSH
10119: LD_STRING 
10121: ADD
10122: PUSH
10123: LD_EXP 56
10127: ADD
10128: ST_TO_ADDR
// Display_Strings := AllStrings ;
10129: LD_ADDR_OWVAR 47
10133: PUSH
10134: LD_VAR 0 2
10138: ST_TO_ADDR
// end ;
10139: LD_VAR 0 1
10143: RET
// every 0 0$1 do
10144: GO 10146
10146: DISABLE
// begin ShowTimer ;
10147: CALL 9992 0 0
// enable ;
10151: ENABLE
// end ; end_of_file
10152: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
10153: LD_INT 0
10155: PPUSH
10156: PPUSH
10157: PPUSH
// BuildUpTime_Delay = 0 ;
10158: LD_ADDR_EXP 59
10162: PUSH
10163: LD_INT 0
10165: ST_TO_ADDR
// if not def_builduptime then
10166: LD_EXP 16
10170: NOT
10171: IFFALSE 10175
// exit ;
10173: GO 10358
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
10175: LD_ADDR_EXP 59
10179: PUSH
10180: LD_INT 8400
10182: PUSH
10183: LD_INT 2100
10185: PUSH
10186: LD_EXP 16
10190: MUL
10191: PLUS
10192: ST_TO_ADDR
// BuildUpTimeActive := true ;
10193: LD_ADDR_EXP 58
10197: PUSH
10198: LD_INT 1
10200: ST_TO_ADDR
// for i := 1 to 8 do
10201: LD_ADDR_VAR 0 2
10205: PUSH
10206: DOUBLE
10207: LD_INT 1
10209: DEC
10210: ST_TO_ADDR
10211: LD_INT 8
10213: PUSH
10214: FOR_TO
10215: IFFALSE 10356
// if Side_Positions [ i ] then
10217: LD_EXP 36
10221: PUSH
10222: LD_VAR 0 2
10226: ARRAY
10227: IFFALSE 10354
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
10229: LD_EXP 57
10233: PUSH
10234: LD_EXP 36
10238: PUSH
10239: LD_VAR 0 2
10243: ARRAY
10244: ARRAY
10245: PPUSH
10246: LD_INT 5
10248: PPUSH
10249: CALL_OW 424
// for j := 1 to 8 do
10253: LD_ADDR_VAR 0 3
10257: PUSH
10258: DOUBLE
10259: LD_INT 1
10261: DEC
10262: ST_TO_ADDR
10263: LD_INT 8
10265: PUSH
10266: FOR_TO
10267: IFFALSE 10352
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
10269: LD_EXP 36
10273: PUSH
10274: LD_VAR 0 3
10278: ARRAY
10279: PUSH
10280: LD_EXP 34
10284: PUSH
10285: LD_VAR 0 2
10289: ARRAY
10290: PUSH
10291: LD_EXP 34
10295: PUSH
10296: LD_VAR 0 3
10300: ARRAY
10301: NONEQUAL
10302: PUSH
10303: LD_EXP 38
10307: NOT
10308: PUSH
10309: LD_VAR 0 2
10313: PUSH
10314: LD_VAR 0 3
10318: NONEQUAL
10319: AND
10320: OR
10321: AND
10322: IFFALSE 10350
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
10324: LD_VAR 0 3
10328: PPUSH
10329: LD_EXP 57
10333: PUSH
10334: LD_EXP 36
10338: PUSH
10339: LD_VAR 0 2
10343: ARRAY
10344: ARRAY
10345: PPUSH
10346: CALL_OW 333
10350: GO 10266
10352: POP
10353: POP
// end ;
10354: GO 10214
10356: POP
10357: POP
// end ;
10358: LD_VAR 0 1
10362: RET
// export function EndBuildUp ; var i , j ; begin
10363: LD_INT 0
10365: PPUSH
10366: PPUSH
10367: PPUSH
// BuildUpTimeActive := false ;
10368: LD_ADDR_EXP 58
10372: PUSH
10373: LD_INT 0
10375: ST_TO_ADDR
// for i := 1 to 8 do
10376: LD_ADDR_VAR 0 2
10380: PUSH
10381: DOUBLE
10382: LD_INT 1
10384: DEC
10385: ST_TO_ADDR
10386: LD_INT 8
10388: PUSH
10389: FOR_TO
10390: IFFALSE 10531
// if Side_Positions [ i ] then
10392: LD_EXP 36
10396: PUSH
10397: LD_VAR 0 2
10401: ARRAY
10402: IFFALSE 10529
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
10404: LD_EXP 57
10408: PUSH
10409: LD_EXP 36
10413: PUSH
10414: LD_VAR 0 2
10418: ARRAY
10419: ARRAY
10420: PPUSH
10421: LD_INT 0
10423: PPUSH
10424: CALL_OW 424
// for j := 1 to 8 do
10428: LD_ADDR_VAR 0 3
10432: PUSH
10433: DOUBLE
10434: LD_INT 1
10436: DEC
10437: ST_TO_ADDR
10438: LD_INT 8
10440: PUSH
10441: FOR_TO
10442: IFFALSE 10527
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
10444: LD_EXP 36
10448: PUSH
10449: LD_VAR 0 3
10453: ARRAY
10454: PUSH
10455: LD_EXP 34
10459: PUSH
10460: LD_VAR 0 2
10464: ARRAY
10465: PUSH
10466: LD_EXP 34
10470: PUSH
10471: LD_VAR 0 3
10475: ARRAY
10476: NONEQUAL
10477: PUSH
10478: LD_EXP 38
10482: NOT
10483: PUSH
10484: LD_VAR 0 2
10488: PUSH
10489: LD_VAR 0 3
10493: NONEQUAL
10494: AND
10495: OR
10496: AND
10497: IFFALSE 10525
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
10499: LD_VAR 0 3
10503: PPUSH
10504: LD_EXP 57
10508: PUSH
10509: LD_EXP 36
10513: PUSH
10514: LD_VAR 0 2
10518: ARRAY
10519: ARRAY
10520: PPUSH
10521: CALL_OW 334
10525: GO 10441
10527: POP
10528: POP
// end ;
10529: GO 10389
10531: POP
10532: POP
// end ;
10533: LD_VAR 0 1
10537: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
10538: LD_EXP 58
10542: IFFALSE 10717
10544: GO 10546
10546: DISABLE
10547: LD_INT 0
10549: PPUSH
10550: PPUSH
// begin for i := 1 to 8 do
10551: LD_ADDR_VAR 0 1
10555: PUSH
10556: DOUBLE
10557: LD_INT 1
10559: DEC
10560: ST_TO_ADDR
10561: LD_INT 8
10563: PUSH
10564: FOR_TO
10565: IFFALSE 10714
// if Side_Positions [ i ] then
10567: LD_EXP 36
10571: PUSH
10572: LD_VAR 0 1
10576: ARRAY
10577: IFFALSE 10712
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
10579: LD_ADDR_VAR 0 2
10583: PUSH
10584: LD_EXP 57
10588: PUSH
10589: LD_EXP 36
10593: PUSH
10594: LD_VAR 0 1
10598: ARRAY
10599: ARRAY
10600: PPUSH
10601: LD_INT 2
10603: PUSH
10604: LD_INT 21
10606: PUSH
10607: LD_INT 1
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: PUSH
10614: LD_INT 21
10616: PUSH
10617: LD_INT 2
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: LIST
10628: PUSH
10629: LD_INT 22
10631: PUSH
10632: LD_OWVAR 2
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: PPUSH
10645: CALL_OW 70
10649: PUSH
10650: FOR_IN
10651: IFFALSE 10710
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
10653: LD_EXP 34
10657: PUSH
10658: LD_VAR 0 1
10662: ARRAY
10663: PUSH
10664: LD_EXP 34
10668: PUSH
10669: LD_OWVAR 2
10673: ARRAY
10674: NONEQUAL
10675: PUSH
10676: LD_EXP 38
10680: NOT
10681: PUSH
10682: LD_VAR 0 1
10686: PUSH
10687: LD_OWVAR 2
10691: NONEQUAL
10692: AND
10693: OR
10694: IFFALSE 10708
// ComMoveToArea ( un , BuildUpEscape ) ;
10696: LD_VAR 0 2
10700: PPUSH
10701: LD_INT 16
10703: PPUSH
10704: CALL_OW 113
10708: GO 10650
10710: POP
10711: POP
10712: GO 10564
10714: POP
10715: POP
// enable ;
10716: ENABLE
// end ;
10717: PPOPN 2
10719: END
// every 0 0$1 trigger def_builduptime do
10720: LD_EXP 16
10724: IFFALSE 10750
10726: GO 10728
10728: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
10729: LD_INT 8400
10731: PUSH
10732: LD_EXP 16
10736: PUSH
10737: LD_INT 2100
10739: MUL
10740: PLUS
10741: PPUSH
10742: CALL_OW 67
// EndBuildUp ;
10746: CALL 10363 0 0
// end ; end_of_file
10750: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
10751: LD_INT 0
10753: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
10754: LD_VAR 0 1
10758: PPUSH
10759: CALL_OW 255
10763: PUSH
10764: LD_VAR 0 4
10768: EQUAL
10769: IFFALSE 10788
// begin SetAchievement ( ACH_RAD ) ;
10771: LD_STRING ACH_RAD
10773: PPUSH
10774: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
10778: LD_STRING ACH_NL
10780: PPUSH
10781: LD_INT 1
10783: PPUSH
10784: CALL_OW 564
// end end ;
10788: LD_VAR 0 5
10792: RET
// export function SA_Win ( side ) ; begin
10793: LD_INT 0
10795: PPUSH
// case side of 1 :
10796: LD_VAR 0 1
10800: PUSH
10801: LD_INT 1
10803: DOUBLE
10804: EQUAL
10805: IFTRUE 10809
10807: GO 10822
10809: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
10810: LD_STRING ACH_AH
10812: PPUSH
10813: LD_INT 1
10815: PPUSH
10816: CALL_OW 564
10820: GO 10985
10822: LD_INT 2
10824: DOUBLE
10825: EQUAL
10826: IFTRUE 10830
10828: GO 10843
10830: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
10831: LD_STRING ACH_E
10833: PPUSH
10834: LD_INT 1
10836: PPUSH
10837: CALL_OW 564
10841: GO 10985
10843: LD_INT 3
10845: DOUBLE
10846: EQUAL
10847: IFTRUE 10851
10849: GO 10864
10851: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
10852: LD_STRING ACH_OOL
10854: PPUSH
10855: LD_INT 1
10857: PPUSH
10858: CALL_OW 564
10862: GO 10985
10864: LD_INT 1
10866: PUSH
10867: LD_INT 2
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: DOUBLE
10874: EQUAL
10875: IFTRUE 10879
10877: GO 10904
10879: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
10880: LD_STRING ACH_AH
10882: PPUSH
10883: LD_REAL  5.00000000000000E-0001
10886: PPUSH
10887: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
10891: LD_STRING ACH_E
10893: PPUSH
10894: LD_REAL  5.00000000000000E-0001
10897: PPUSH
10898: CALL_OW 564
// end ; [ 2 , 3 ] :
10902: GO 10985
10904: LD_INT 2
10906: PUSH
10907: LD_INT 3
10909: PUSH
10910: EMPTY
10911: LIST
10912: LIST
10913: DOUBLE
10914: EQUAL
10915: IFTRUE 10919
10917: GO 10944
10919: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
10920: LD_STRING ACH_OOL
10922: PPUSH
10923: LD_REAL  5.00000000000000E-0001
10926: PPUSH
10927: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
10931: LD_STRING ACH_E
10933: PPUSH
10934: LD_REAL  5.00000000000000E-0001
10937: PPUSH
10938: CALL_OW 564
// end ; [ 3 , 1 ] :
10942: GO 10985
10944: LD_INT 3
10946: PUSH
10947: LD_INT 1
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: DOUBLE
10954: EQUAL
10955: IFTRUE 10959
10957: GO 10984
10959: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
10960: LD_STRING ACH_AH
10962: PPUSH
10963: LD_REAL  5.00000000000000E-0001
10966: PPUSH
10967: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
10971: LD_STRING ACH_OOL
10973: PPUSH
10974: LD_REAL  5.00000000000000E-0001
10977: PPUSH
10978: CALL_OW 564
// end ; end ;
10982: GO 10985
10984: POP
// end ; end_of_file
10985: LD_VAR 0 2
10989: RET
// export function SetMpTechs ( ) ; var side , i ; begin
10990: LD_INT 0
10992: PPUSH
10993: PPUSH
10994: PPUSH
// for side = 1 to 8 do
10995: LD_ADDR_VAR 0 2
10999: PUSH
11000: DOUBLE
11001: LD_INT 1
11003: DEC
11004: ST_TO_ADDR
11005: LD_INT 8
11007: PUSH
11008: FOR_TO
11009: IFFALSE 11130
// begin for i = 1 to 72 do
11011: LD_ADDR_VAR 0 3
11015: PUSH
11016: DOUBLE
11017: LD_INT 1
11019: DEC
11020: ST_TO_ADDR
11021: LD_INT 72
11023: PUSH
11024: FOR_TO
11025: IFFALSE 11056
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
11027: LD_VAR 0 3
11031: PPUSH
11032: LD_VAR 0 2
11036: PPUSH
11037: LD_INT 0
11039: PPUSH
11040: LD_VAR 0 3
11044: PPUSH
11045: CALL_OW 565
11049: PPUSH
11050: CALL_OW 322
11054: GO 11024
11056: POP
11057: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
11058: LD_INT 73
11060: PPUSH
11061: LD_VAR 0 2
11065: PPUSH
11066: LD_INT 0
11068: PPUSH
11069: LD_INT 25
11071: PPUSH
11072: CALL_OW 565
11076: PPUSH
11077: CALL_OW 322
// for i = 0 to 40 do
11081: LD_ADDR_VAR 0 3
11085: PUSH
11086: DOUBLE
11087: LD_INT 0
11089: DEC
11090: ST_TO_ADDR
11091: LD_INT 40
11093: PUSH
11094: FOR_TO
11095: IFFALSE 11126
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
11097: LD_VAR 0 3
11101: PPUSH
11102: LD_VAR 0 2
11106: PPUSH
11107: LD_INT 1
11109: PPUSH
11110: LD_VAR 0 3
11114: PPUSH
11115: CALL_OW 565
11119: PPUSH
11120: CALL_OW 324
11124: GO 11094
11126: POP
11127: POP
// end ;
11128: GO 11008
11130: POP
11131: POP
// end ;
11132: LD_VAR 0 1
11136: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
11137: LD_INT 0
11139: PPUSH
11140: PPUSH
11141: PPUSH
// for side = 1 to 8 do
11142: LD_ADDR_VAR 0 3
11146: PUSH
11147: DOUBLE
11148: LD_INT 1
11150: DEC
11151: ST_TO_ADDR
11152: LD_INT 8
11154: PUSH
11155: FOR_TO
11156: IFFALSE 15152
// begin for i = 1 to 73 do
11158: LD_ADDR_VAR 0 4
11162: PUSH
11163: DOUBLE
11164: LD_INT 1
11166: DEC
11167: ST_TO_ADDR
11168: LD_INT 73
11170: PUSH
11171: FOR_TO
11172: IFFALSE 11193
// SetTech ( i , side , state_disabled ) ;
11174: LD_VAR 0 4
11178: PPUSH
11179: LD_VAR 0 3
11183: PPUSH
11184: LD_INT 0
11186: PPUSH
11187: CALL_OW 322
11191: GO 11171
11193: POP
11194: POP
// for i = 0 to 40 do
11195: LD_ADDR_VAR 0 4
11199: PUSH
11200: DOUBLE
11201: LD_INT 0
11203: DEC
11204: ST_TO_ADDR
11205: LD_INT 40
11207: PUSH
11208: FOR_TO
11209: IFFALSE 11230
// SetRestrict ( i , side , false ) ;
11211: LD_VAR 0 4
11215: PPUSH
11216: LD_VAR 0 3
11220: PPUSH
11221: LD_INT 0
11223: PPUSH
11224: CALL_OW 324
11228: GO 11208
11230: POP
11231: POP
// case level of 1 :
11232: LD_VAR 0 1
11236: PUSH
11237: LD_INT 1
11239: DOUBLE
11240: EQUAL
11241: IFTRUE 11245
11243: GO 11398
11245: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11246: LD_INT 35
11248: PPUSH
11249: LD_VAR 0 3
11253: PPUSH
11254: LD_INT 1
11256: PPUSH
11257: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11261: LD_INT 45
11263: PPUSH
11264: LD_VAR 0 3
11268: PPUSH
11269: LD_INT 1
11271: PPUSH
11272: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11276: LD_INT 46
11278: PPUSH
11279: LD_VAR 0 3
11283: PPUSH
11284: LD_INT 1
11286: PPUSH
11287: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11291: LD_INT 47
11293: PPUSH
11294: LD_VAR 0 3
11298: PPUSH
11299: LD_INT 1
11301: PPUSH
11302: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11306: LD_INT 0
11308: PPUSH
11309: LD_VAR 0 3
11313: PPUSH
11314: LD_INT 1
11316: PPUSH
11317: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11321: LD_INT 2
11323: PPUSH
11324: LD_VAR 0 3
11328: PPUSH
11329: LD_INT 1
11331: PPUSH
11332: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11336: LD_INT 4
11338: PPUSH
11339: LD_VAR 0 3
11343: PPUSH
11344: LD_INT 1
11346: PPUSH
11347: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11351: LD_INT 6
11353: PPUSH
11354: LD_VAR 0 3
11358: PPUSH
11359: LD_INT 1
11361: PPUSH
11362: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11366: LD_INT 29
11368: PPUSH
11369: LD_VAR 0 3
11373: PPUSH
11374: LD_INT 1
11376: PPUSH
11377: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11381: LD_INT 31
11383: PPUSH
11384: LD_VAR 0 3
11388: PPUSH
11389: LD_INT 1
11391: PPUSH
11392: CALL_OW 324
// end ; 2 :
11396: GO 15150
11398: LD_INT 2
11400: DOUBLE
11401: EQUAL
11402: IFTRUE 11406
11404: GO 11604
11406: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11407: LD_INT 35
11409: PPUSH
11410: LD_VAR 0 3
11414: PPUSH
11415: LD_INT 1
11417: PPUSH
11418: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11422: LD_INT 45
11424: PPUSH
11425: LD_VAR 0 3
11429: PPUSH
11430: LD_INT 1
11432: PPUSH
11433: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11437: LD_INT 46
11439: PPUSH
11440: LD_VAR 0 3
11444: PPUSH
11445: LD_INT 1
11447: PPUSH
11448: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11452: LD_INT 47
11454: PPUSH
11455: LD_VAR 0 3
11459: PPUSH
11460: LD_INT 1
11462: PPUSH
11463: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11467: LD_INT 1
11469: PPUSH
11470: LD_VAR 0 3
11474: PPUSH
11475: LD_INT 1
11477: PPUSH
11478: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11482: LD_INT 2
11484: PPUSH
11485: LD_VAR 0 3
11489: PPUSH
11490: LD_INT 1
11492: PPUSH
11493: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11497: LD_INT 11
11499: PPUSH
11500: LD_VAR 0 3
11504: PPUSH
11505: LD_INT 1
11507: PPUSH
11508: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11512: LD_INT 0
11514: PPUSH
11515: LD_VAR 0 3
11519: PPUSH
11520: LD_INT 1
11522: PPUSH
11523: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11527: LD_INT 2
11529: PPUSH
11530: LD_VAR 0 3
11534: PPUSH
11535: LD_INT 1
11537: PPUSH
11538: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11542: LD_INT 4
11544: PPUSH
11545: LD_VAR 0 3
11549: PPUSH
11550: LD_INT 1
11552: PPUSH
11553: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11557: LD_INT 6
11559: PPUSH
11560: LD_VAR 0 3
11564: PPUSH
11565: LD_INT 1
11567: PPUSH
11568: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11572: LD_INT 29
11574: PPUSH
11575: LD_VAR 0 3
11579: PPUSH
11580: LD_INT 1
11582: PPUSH
11583: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11587: LD_INT 31
11589: PPUSH
11590: LD_VAR 0 3
11594: PPUSH
11595: LD_INT 1
11597: PPUSH
11598: CALL_OW 324
// end ; 3 :
11602: GO 15150
11604: LD_INT 3
11606: DOUBLE
11607: EQUAL
11608: IFTRUE 11612
11610: GO 12065
11612: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11613: LD_INT 35
11615: PPUSH
11616: LD_VAR 0 3
11620: PPUSH
11621: LD_INT 1
11623: PPUSH
11624: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11628: LD_INT 45
11630: PPUSH
11631: LD_VAR 0 3
11635: PPUSH
11636: LD_INT 1
11638: PPUSH
11639: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11643: LD_INT 46
11645: PPUSH
11646: LD_VAR 0 3
11650: PPUSH
11651: LD_INT 1
11653: PPUSH
11654: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11658: LD_INT 47
11660: PPUSH
11661: LD_VAR 0 3
11665: PPUSH
11666: LD_INT 1
11668: PPUSH
11669: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11673: LD_INT 1
11675: PPUSH
11676: LD_VAR 0 3
11680: PPUSH
11681: LD_INT 1
11683: PPUSH
11684: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11688: LD_INT 2
11690: PPUSH
11691: LD_VAR 0 3
11695: PPUSH
11696: LD_INT 1
11698: PPUSH
11699: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11703: LD_INT 11
11705: PPUSH
11706: LD_VAR 0 3
11710: PPUSH
11711: LD_INT 1
11713: PPUSH
11714: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11718: LD_INT 48
11720: PPUSH
11721: LD_VAR 0 3
11725: PPUSH
11726: LD_INT 1
11728: PPUSH
11729: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11733: LD_INT 69
11735: PPUSH
11736: LD_VAR 0 3
11740: PPUSH
11741: LD_INT 1
11743: PPUSH
11744: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11748: LD_INT 39
11750: PPUSH
11751: LD_VAR 0 3
11755: PPUSH
11756: LD_INT 1
11758: PPUSH
11759: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11763: LD_INT 43
11765: PPUSH
11766: LD_VAR 0 3
11770: PPUSH
11771: LD_INT 1
11773: PPUSH
11774: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11778: LD_INT 51
11780: PPUSH
11781: LD_VAR 0 3
11785: PPUSH
11786: LD_INT 1
11788: PPUSH
11789: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11793: LD_INT 6
11795: PPUSH
11796: LD_VAR 0 3
11800: PPUSH
11801: LD_INT 1
11803: PPUSH
11804: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11808: LD_INT 0
11810: PPUSH
11811: LD_VAR 0 3
11815: PPUSH
11816: LD_INT 1
11818: PPUSH
11819: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11823: LD_INT 2
11825: PPUSH
11826: LD_VAR 0 3
11830: PPUSH
11831: LD_INT 1
11833: PPUSH
11834: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11838: LD_INT 3
11840: PPUSH
11841: LD_VAR 0 3
11845: PPUSH
11846: LD_INT 1
11848: PPUSH
11849: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11853: LD_INT 4
11855: PPUSH
11856: LD_VAR 0 3
11860: PPUSH
11861: LD_INT 1
11863: PPUSH
11864: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11868: LD_INT 6
11870: PPUSH
11871: LD_VAR 0 3
11875: PPUSH
11876: LD_INT 1
11878: PPUSH
11879: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11883: LD_INT 7
11885: PPUSH
11886: LD_VAR 0 3
11890: PPUSH
11891: LD_INT 1
11893: PPUSH
11894: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11898: LD_INT 8
11900: PPUSH
11901: LD_VAR 0 3
11905: PPUSH
11906: LD_INT 1
11908: PPUSH
11909: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11913: LD_INT 10
11915: PPUSH
11916: LD_VAR 0 3
11920: PPUSH
11921: LD_INT 1
11923: PPUSH
11924: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11928: LD_INT 15
11930: PPUSH
11931: LD_VAR 0 3
11935: PPUSH
11936: LD_INT 1
11938: PPUSH
11939: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11943: LD_INT 16
11945: PPUSH
11946: LD_VAR 0 3
11950: PPUSH
11951: LD_INT 1
11953: PPUSH
11954: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11958: LD_INT 17
11960: PPUSH
11961: LD_VAR 0 3
11965: PPUSH
11966: LD_INT 1
11968: PPUSH
11969: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11973: LD_INT 20
11975: PPUSH
11976: LD_VAR 0 3
11980: PPUSH
11981: LD_INT 1
11983: PPUSH
11984: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11988: LD_INT 26
11990: PPUSH
11991: LD_VAR 0 3
11995: PPUSH
11996: LD_INT 1
11998: PPUSH
11999: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12003: LD_INT 27
12005: PPUSH
12006: LD_VAR 0 3
12010: PPUSH
12011: LD_INT 1
12013: PPUSH
12014: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12018: LD_INT 29
12020: PPUSH
12021: LD_VAR 0 3
12025: PPUSH
12026: LD_INT 1
12028: PPUSH
12029: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12033: LD_INT 31
12035: PPUSH
12036: LD_VAR 0 3
12040: PPUSH
12041: LD_INT 1
12043: PPUSH
12044: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12048: LD_INT 32
12050: PPUSH
12051: LD_VAR 0 3
12055: PPUSH
12056: LD_INT 1
12058: PPUSH
12059: CALL_OW 324
// end ; 4 :
12063: GO 15150
12065: LD_INT 4
12067: DOUBLE
12068: EQUAL
12069: IFTRUE 12073
12071: GO 13021
12073: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12074: LD_INT 35
12076: PPUSH
12077: LD_VAR 0 3
12081: PPUSH
12082: LD_INT 1
12084: PPUSH
12085: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12089: LD_INT 45
12091: PPUSH
12092: LD_VAR 0 3
12096: PPUSH
12097: LD_INT 1
12099: PPUSH
12100: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12104: LD_INT 46
12106: PPUSH
12107: LD_VAR 0 3
12111: PPUSH
12112: LD_INT 1
12114: PPUSH
12115: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12119: LD_INT 47
12121: PPUSH
12122: LD_VAR 0 3
12126: PPUSH
12127: LD_INT 1
12129: PPUSH
12130: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12134: LD_INT 1
12136: PPUSH
12137: LD_VAR 0 3
12141: PPUSH
12142: LD_INT 1
12144: PPUSH
12145: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12149: LD_INT 2
12151: PPUSH
12152: LD_VAR 0 3
12156: PPUSH
12157: LD_INT 1
12159: PPUSH
12160: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12164: LD_INT 11
12166: PPUSH
12167: LD_VAR 0 3
12171: PPUSH
12172: LD_INT 1
12174: PPUSH
12175: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12179: LD_INT 20
12181: PPUSH
12182: LD_VAR 0 3
12186: PPUSH
12187: LD_INT 1
12189: PPUSH
12190: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12194: LD_INT 48
12196: PPUSH
12197: LD_VAR 0 3
12201: PPUSH
12202: LD_INT 1
12204: PPUSH
12205: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12209: LD_INT 49
12211: PPUSH
12212: LD_VAR 0 3
12216: PPUSH
12217: LD_INT 1
12219: PPUSH
12220: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12224: LD_INT 69
12226: PPUSH
12227: LD_VAR 0 3
12231: PPUSH
12232: LD_INT 1
12234: PPUSH
12235: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12239: LD_INT 39
12241: PPUSH
12242: LD_VAR 0 3
12246: PPUSH
12247: LD_INT 1
12249: PPUSH
12250: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12254: LD_INT 34
12256: PPUSH
12257: LD_VAR 0 3
12261: PPUSH
12262: LD_INT 1
12264: PPUSH
12265: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12269: LD_INT 42
12271: PPUSH
12272: LD_VAR 0 3
12276: PPUSH
12277: LD_INT 1
12279: PPUSH
12280: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12284: LD_INT 44
12286: PPUSH
12287: LD_VAR 0 3
12291: PPUSH
12292: LD_INT 1
12294: PPUSH
12295: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12299: LD_INT 41
12301: PPUSH
12302: LD_VAR 0 3
12306: PPUSH
12307: LD_INT 1
12309: PPUSH
12310: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12314: LD_INT 43
12316: PPUSH
12317: LD_VAR 0 3
12321: PPUSH
12322: LD_INT 1
12324: PPUSH
12325: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12329: LD_INT 70
12331: PPUSH
12332: LD_VAR 0 3
12336: PPUSH
12337: LD_INT 1
12339: PPUSH
12340: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12344: LD_INT 51
12346: PPUSH
12347: LD_VAR 0 3
12351: PPUSH
12352: LD_INT 1
12354: PPUSH
12355: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12359: LD_INT 52
12361: PPUSH
12362: LD_VAR 0 3
12366: PPUSH
12367: LD_INT 1
12369: PPUSH
12370: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12374: LD_INT 6
12376: PPUSH
12377: LD_VAR 0 3
12381: PPUSH
12382: LD_INT 1
12384: PPUSH
12385: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12389: LD_INT 15
12391: PPUSH
12392: LD_VAR 0 3
12396: PPUSH
12397: LD_INT 1
12399: PPUSH
12400: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12404: LD_INT 7
12406: PPUSH
12407: LD_VAR 0 3
12411: PPUSH
12412: LD_INT 1
12414: PPUSH
12415: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12419: LD_INT 12
12421: PPUSH
12422: LD_VAR 0 3
12426: PPUSH
12427: LD_INT 1
12429: PPUSH
12430: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12434: LD_INT 18
12436: PPUSH
12437: LD_VAR 0 3
12441: PPUSH
12442: LD_INT 1
12444: PPUSH
12445: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12449: LD_INT 60
12451: PPUSH
12452: LD_VAR 0 3
12456: PPUSH
12457: LD_INT 1
12459: PPUSH
12460: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12464: LD_INT 9
12466: PPUSH
12467: LD_VAR 0 3
12471: PPUSH
12472: LD_INT 1
12474: PPUSH
12475: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12479: LD_INT 30
12481: PPUSH
12482: LD_VAR 0 3
12486: PPUSH
12487: LD_INT 1
12489: PPUSH
12490: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12494: LD_INT 37
12496: PPUSH
12497: LD_VAR 0 3
12501: PPUSH
12502: LD_INT 1
12504: PPUSH
12505: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12509: LD_INT 5
12511: PPUSH
12512: LD_VAR 0 3
12516: PPUSH
12517: LD_INT 1
12519: PPUSH
12520: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12524: LD_INT 66
12526: PPUSH
12527: LD_VAR 0 3
12531: PPUSH
12532: LD_INT 1
12534: PPUSH
12535: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12539: LD_INT 21
12541: PPUSH
12542: LD_VAR 0 3
12546: PPUSH
12547: LD_INT 1
12549: PPUSH
12550: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12554: LD_INT 22
12556: PPUSH
12557: LD_VAR 0 3
12561: PPUSH
12562: LD_INT 1
12564: PPUSH
12565: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12569: LD_INT 54
12571: PPUSH
12572: LD_VAR 0 3
12576: PPUSH
12577: LD_INT 1
12579: PPUSH
12580: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12584: LD_INT 0
12586: PPUSH
12587: LD_VAR 0 3
12591: PPUSH
12592: LD_INT 1
12594: PPUSH
12595: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12599: LD_INT 1
12601: PPUSH
12602: LD_VAR 0 3
12606: PPUSH
12607: LD_INT 1
12609: PPUSH
12610: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12614: LD_INT 2
12616: PPUSH
12617: LD_VAR 0 3
12621: PPUSH
12622: LD_INT 1
12624: PPUSH
12625: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12629: LD_INT 3
12631: PPUSH
12632: LD_VAR 0 3
12636: PPUSH
12637: LD_INT 1
12639: PPUSH
12640: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12644: LD_INT 4
12646: PPUSH
12647: LD_VAR 0 3
12651: PPUSH
12652: LD_INT 1
12654: PPUSH
12655: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12659: LD_INT 5
12661: PPUSH
12662: LD_VAR 0 3
12666: PPUSH
12667: LD_INT 1
12669: PPUSH
12670: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12674: LD_INT 6
12676: PPUSH
12677: LD_VAR 0 3
12681: PPUSH
12682: LD_INT 1
12684: PPUSH
12685: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12689: LD_INT 7
12691: PPUSH
12692: LD_VAR 0 3
12696: PPUSH
12697: LD_INT 1
12699: PPUSH
12700: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12704: LD_INT 8
12706: PPUSH
12707: LD_VAR 0 3
12711: PPUSH
12712: LD_INT 1
12714: PPUSH
12715: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12719: LD_INT 10
12721: PPUSH
12722: LD_VAR 0 3
12726: PPUSH
12727: LD_INT 1
12729: PPUSH
12730: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12734: LD_INT 11
12736: PPUSH
12737: LD_VAR 0 3
12741: PPUSH
12742: LD_INT 1
12744: PPUSH
12745: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12749: LD_INT 12
12751: PPUSH
12752: LD_VAR 0 3
12756: PPUSH
12757: LD_INT 1
12759: PPUSH
12760: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12764: LD_INT 13
12766: PPUSH
12767: LD_VAR 0 3
12771: PPUSH
12772: LD_INT 1
12774: PPUSH
12775: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12779: LD_INT 14
12781: PPUSH
12782: LD_VAR 0 3
12786: PPUSH
12787: LD_INT 1
12789: PPUSH
12790: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12794: LD_INT 15
12796: PPUSH
12797: LD_VAR 0 3
12801: PPUSH
12802: LD_INT 1
12804: PPUSH
12805: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12809: LD_INT 16
12811: PPUSH
12812: LD_VAR 0 3
12816: PPUSH
12817: LD_INT 1
12819: PPUSH
12820: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12824: LD_INT 17
12826: PPUSH
12827: LD_VAR 0 3
12831: PPUSH
12832: LD_INT 1
12834: PPUSH
12835: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12839: LD_INT 19
12841: PPUSH
12842: LD_VAR 0 3
12846: PPUSH
12847: LD_INT 1
12849: PPUSH
12850: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12854: LD_INT 20
12856: PPUSH
12857: LD_VAR 0 3
12861: PPUSH
12862: LD_INT 1
12864: PPUSH
12865: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12869: LD_INT 21
12871: PPUSH
12872: LD_VAR 0 3
12876: PPUSH
12877: LD_INT 1
12879: PPUSH
12880: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12884: LD_INT 23
12886: PPUSH
12887: LD_VAR 0 3
12891: PPUSH
12892: LD_INT 1
12894: PPUSH
12895: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12899: LD_INT 26
12901: PPUSH
12902: LD_VAR 0 3
12906: PPUSH
12907: LD_INT 1
12909: PPUSH
12910: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12914: LD_INT 27
12916: PPUSH
12917: LD_VAR 0 3
12921: PPUSH
12922: LD_INT 1
12924: PPUSH
12925: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12929: LD_INT 28
12931: PPUSH
12932: LD_VAR 0 3
12936: PPUSH
12937: LD_INT 1
12939: PPUSH
12940: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12944: LD_INT 29
12946: PPUSH
12947: LD_VAR 0 3
12951: PPUSH
12952: LD_INT 1
12954: PPUSH
12955: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12959: LD_INT 30
12961: PPUSH
12962: LD_VAR 0 3
12966: PPUSH
12967: LD_INT 1
12969: PPUSH
12970: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12974: LD_INT 31
12976: PPUSH
12977: LD_VAR 0 3
12981: PPUSH
12982: LD_INT 1
12984: PPUSH
12985: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12989: LD_INT 32
12991: PPUSH
12992: LD_VAR 0 3
12996: PPUSH
12997: LD_INT 1
12999: PPUSH
13000: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
13004: LD_INT 36
13006: PPUSH
13007: LD_VAR 0 3
13011: PPUSH
13012: LD_INT 1
13014: PPUSH
13015: CALL_OW 324
// end ; 5 :
13019: GO 15150
13021: LD_INT 5
13023: DOUBLE
13024: EQUAL
13025: IFTRUE 13029
13027: GO 14142
13029: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13030: LD_INT 35
13032: PPUSH
13033: LD_VAR 0 3
13037: PPUSH
13038: LD_INT 1
13040: PPUSH
13041: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13045: LD_INT 45
13047: PPUSH
13048: LD_VAR 0 3
13052: PPUSH
13053: LD_INT 1
13055: PPUSH
13056: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13060: LD_INT 46
13062: PPUSH
13063: LD_VAR 0 3
13067: PPUSH
13068: LD_INT 1
13070: PPUSH
13071: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13075: LD_INT 47
13077: PPUSH
13078: LD_VAR 0 3
13082: PPUSH
13083: LD_INT 1
13085: PPUSH
13086: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13090: LD_INT 1
13092: PPUSH
13093: LD_VAR 0 3
13097: PPUSH
13098: LD_INT 1
13100: PPUSH
13101: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13105: LD_INT 2
13107: PPUSH
13108: LD_VAR 0 3
13112: PPUSH
13113: LD_INT 1
13115: PPUSH
13116: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13120: LD_INT 11
13122: PPUSH
13123: LD_VAR 0 3
13127: PPUSH
13128: LD_INT 1
13130: PPUSH
13131: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13135: LD_INT 20
13137: PPUSH
13138: LD_VAR 0 3
13142: PPUSH
13143: LD_INT 1
13145: PPUSH
13146: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13150: LD_INT 48
13152: PPUSH
13153: LD_VAR 0 3
13157: PPUSH
13158: LD_INT 1
13160: PPUSH
13161: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13165: LD_INT 49
13167: PPUSH
13168: LD_VAR 0 3
13172: PPUSH
13173: LD_INT 1
13175: PPUSH
13176: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13180: LD_INT 69
13182: PPUSH
13183: LD_VAR 0 3
13187: PPUSH
13188: LD_INT 1
13190: PPUSH
13191: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13195: LD_INT 39
13197: PPUSH
13198: LD_VAR 0 3
13202: PPUSH
13203: LD_INT 1
13205: PPUSH
13206: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13210: LD_INT 34
13212: PPUSH
13213: LD_VAR 0 3
13217: PPUSH
13218: LD_INT 1
13220: PPUSH
13221: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13225: LD_INT 42
13227: PPUSH
13228: LD_VAR 0 3
13232: PPUSH
13233: LD_INT 1
13235: PPUSH
13236: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13240: LD_INT 44
13242: PPUSH
13243: LD_VAR 0 3
13247: PPUSH
13248: LD_INT 1
13250: PPUSH
13251: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13255: LD_INT 41
13257: PPUSH
13258: LD_VAR 0 3
13262: PPUSH
13263: LD_INT 1
13265: PPUSH
13266: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
13270: LD_INT 40
13272: PPUSH
13273: LD_VAR 0 3
13277: PPUSH
13278: LD_INT 1
13280: PPUSH
13281: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13285: LD_INT 43
13287: PPUSH
13288: LD_VAR 0 3
13292: PPUSH
13293: LD_INT 1
13295: PPUSH
13296: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13300: LD_INT 70
13302: PPUSH
13303: LD_VAR 0 3
13307: PPUSH
13308: LD_INT 1
13310: PPUSH
13311: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13315: LD_INT 51
13317: PPUSH
13318: LD_VAR 0 3
13322: PPUSH
13323: LD_INT 1
13325: PPUSH
13326: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13330: LD_INT 52
13332: PPUSH
13333: LD_VAR 0 3
13337: PPUSH
13338: LD_INT 1
13340: PPUSH
13341: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13345: LD_INT 6
13347: PPUSH
13348: LD_VAR 0 3
13352: PPUSH
13353: LD_INT 1
13355: PPUSH
13356: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13360: LD_INT 15
13362: PPUSH
13363: LD_VAR 0 3
13367: PPUSH
13368: LD_INT 1
13370: PPUSH
13371: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13375: LD_INT 7
13377: PPUSH
13378: LD_VAR 0 3
13382: PPUSH
13383: LD_INT 1
13385: PPUSH
13386: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13390: LD_INT 12
13392: PPUSH
13393: LD_VAR 0 3
13397: PPUSH
13398: LD_INT 1
13400: PPUSH
13401: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
13405: LD_INT 17
13407: PPUSH
13408: LD_VAR 0 3
13412: PPUSH
13413: LD_INT 1
13415: PPUSH
13416: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13420: LD_INT 18
13422: PPUSH
13423: LD_VAR 0 3
13427: PPUSH
13428: LD_INT 1
13430: PPUSH
13431: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13435: LD_INT 60
13437: PPUSH
13438: LD_VAR 0 3
13442: PPUSH
13443: LD_INT 1
13445: PPUSH
13446: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13450: LD_INT 32
13452: PPUSH
13453: LD_VAR 0 3
13457: PPUSH
13458: LD_INT 1
13460: PPUSH
13461: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13465: LD_INT 9
13467: PPUSH
13468: LD_VAR 0 3
13472: PPUSH
13473: LD_INT 1
13475: PPUSH
13476: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13480: LD_INT 57
13482: PPUSH
13483: LD_VAR 0 3
13487: PPUSH
13488: LD_INT 1
13490: PPUSH
13491: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13495: LD_INT 30
13497: PPUSH
13498: LD_VAR 0 3
13502: PPUSH
13503: LD_INT 1
13505: PPUSH
13506: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13510: LD_INT 37
13512: PPUSH
13513: LD_VAR 0 3
13517: PPUSH
13518: LD_INT 1
13520: PPUSH
13521: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13525: LD_INT 63
13527: PPUSH
13528: LD_VAR 0 3
13532: PPUSH
13533: LD_INT 1
13535: PPUSH
13536: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13540: LD_INT 3
13542: PPUSH
13543: LD_VAR 0 3
13547: PPUSH
13548: LD_INT 1
13550: PPUSH
13551: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13555: LD_INT 4
13557: PPUSH
13558: LD_VAR 0 3
13562: PPUSH
13563: LD_INT 1
13565: PPUSH
13566: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13570: LD_INT 5
13572: PPUSH
13573: LD_VAR 0 3
13577: PPUSH
13578: LD_INT 1
13580: PPUSH
13581: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13585: LD_INT 66
13587: PPUSH
13588: LD_VAR 0 3
13592: PPUSH
13593: LD_INT 1
13595: PPUSH
13596: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13600: LD_INT 21
13602: PPUSH
13603: LD_VAR 0 3
13607: PPUSH
13608: LD_INT 1
13610: PPUSH
13611: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13615: LD_INT 22
13617: PPUSH
13618: LD_VAR 0 3
13622: PPUSH
13623: LD_INT 1
13625: PPUSH
13626: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13630: LD_INT 19
13632: PPUSH
13633: LD_VAR 0 3
13637: PPUSH
13638: LD_INT 1
13640: PPUSH
13641: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13645: LD_INT 54
13647: PPUSH
13648: LD_VAR 0 3
13652: PPUSH
13653: LD_INT 1
13655: PPUSH
13656: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13660: LD_INT 55
13662: PPUSH
13663: LD_VAR 0 3
13667: PPUSH
13668: LD_INT 1
13670: PPUSH
13671: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13675: LD_INT 0
13677: PPUSH
13678: LD_VAR 0 3
13682: PPUSH
13683: LD_INT 1
13685: PPUSH
13686: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
13690: LD_INT 1
13692: PPUSH
13693: LD_VAR 0 3
13697: PPUSH
13698: LD_INT 1
13700: PPUSH
13701: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13705: LD_INT 2
13707: PPUSH
13708: LD_VAR 0 3
13712: PPUSH
13713: LD_INT 1
13715: PPUSH
13716: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
13720: LD_INT 3
13722: PPUSH
13723: LD_VAR 0 3
13727: PPUSH
13728: LD_INT 1
13730: PPUSH
13731: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13735: LD_INT 4
13737: PPUSH
13738: LD_VAR 0 3
13742: PPUSH
13743: LD_INT 1
13745: PPUSH
13746: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
13750: LD_INT 5
13752: PPUSH
13753: LD_VAR 0 3
13757: PPUSH
13758: LD_INT 1
13760: PPUSH
13761: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13765: LD_INT 6
13767: PPUSH
13768: LD_VAR 0 3
13772: PPUSH
13773: LD_INT 1
13775: PPUSH
13776: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13780: LD_INT 7
13782: PPUSH
13783: LD_VAR 0 3
13787: PPUSH
13788: LD_INT 1
13790: PPUSH
13791: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13795: LD_INT 8
13797: PPUSH
13798: LD_VAR 0 3
13802: PPUSH
13803: LD_INT 1
13805: PPUSH
13806: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13810: LD_INT 10
13812: PPUSH
13813: LD_VAR 0 3
13817: PPUSH
13818: LD_INT 1
13820: PPUSH
13821: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
13825: LD_INT 11
13827: PPUSH
13828: LD_VAR 0 3
13832: PPUSH
13833: LD_INT 1
13835: PPUSH
13836: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
13840: LD_INT 12
13842: PPUSH
13843: LD_VAR 0 3
13847: PPUSH
13848: LD_INT 1
13850: PPUSH
13851: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
13855: LD_INT 13
13857: PPUSH
13858: LD_VAR 0 3
13862: PPUSH
13863: LD_INT 1
13865: PPUSH
13866: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
13870: LD_INT 14
13872: PPUSH
13873: LD_VAR 0 3
13877: PPUSH
13878: LD_INT 1
13880: PPUSH
13881: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13885: LD_INT 15
13887: PPUSH
13888: LD_VAR 0 3
13892: PPUSH
13893: LD_INT 1
13895: PPUSH
13896: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13900: LD_INT 16
13902: PPUSH
13903: LD_VAR 0 3
13907: PPUSH
13908: LD_INT 1
13910: PPUSH
13911: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13915: LD_INT 17
13917: PPUSH
13918: LD_VAR 0 3
13922: PPUSH
13923: LD_INT 1
13925: PPUSH
13926: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
13930: LD_INT 18
13932: PPUSH
13933: LD_VAR 0 3
13937: PPUSH
13938: LD_INT 1
13940: PPUSH
13941: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
13945: LD_INT 19
13947: PPUSH
13948: LD_VAR 0 3
13952: PPUSH
13953: LD_INT 1
13955: PPUSH
13956: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13960: LD_INT 20
13962: PPUSH
13963: LD_VAR 0 3
13967: PPUSH
13968: LD_INT 1
13970: PPUSH
13971: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
13975: LD_INT 21
13977: PPUSH
13978: LD_VAR 0 3
13982: PPUSH
13983: LD_INT 1
13985: PPUSH
13986: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
13990: LD_INT 23
13992: PPUSH
13993: LD_VAR 0 3
13997: PPUSH
13998: LD_INT 1
14000: PPUSH
14001: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
14005: LD_INT 26
14007: PPUSH
14008: LD_VAR 0 3
14012: PPUSH
14013: LD_INT 1
14015: PPUSH
14016: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
14020: LD_INT 27
14022: PPUSH
14023: LD_VAR 0 3
14027: PPUSH
14028: LD_INT 1
14030: PPUSH
14031: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
14035: LD_INT 28
14037: PPUSH
14038: LD_VAR 0 3
14042: PPUSH
14043: LD_INT 1
14045: PPUSH
14046: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14050: LD_INT 29
14052: PPUSH
14053: LD_VAR 0 3
14057: PPUSH
14058: LD_INT 1
14060: PPUSH
14061: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
14065: LD_INT 30
14067: PPUSH
14068: LD_VAR 0 3
14072: PPUSH
14073: LD_INT 1
14075: PPUSH
14076: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14080: LD_INT 31
14082: PPUSH
14083: LD_VAR 0 3
14087: PPUSH
14088: LD_INT 1
14090: PPUSH
14091: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
14095: LD_INT 32
14097: PPUSH
14098: LD_VAR 0 3
14102: PPUSH
14103: LD_INT 1
14105: PPUSH
14106: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
14110: LD_INT 33
14112: PPUSH
14113: LD_VAR 0 3
14117: PPUSH
14118: LD_INT 1
14120: PPUSH
14121: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
14125: LD_INT 36
14127: PPUSH
14128: LD_VAR 0 3
14132: PPUSH
14133: LD_INT 1
14135: PPUSH
14136: CALL_OW 324
// end ; 6 :
14140: GO 15150
14142: LD_INT 6
14144: DOUBLE
14145: EQUAL
14146: IFTRUE 14150
14148: GO 15075
14150: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14151: LD_INT 35
14153: PPUSH
14154: LD_VAR 0 3
14158: PPUSH
14159: LD_INT 1
14161: PPUSH
14162: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14166: LD_INT 45
14168: PPUSH
14169: LD_VAR 0 3
14173: PPUSH
14174: LD_INT 1
14176: PPUSH
14177: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14181: LD_INT 46
14183: PPUSH
14184: LD_VAR 0 3
14188: PPUSH
14189: LD_INT 1
14191: PPUSH
14192: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14196: LD_INT 47
14198: PPUSH
14199: LD_VAR 0 3
14203: PPUSH
14204: LD_INT 1
14206: PPUSH
14207: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14211: LD_INT 1
14213: PPUSH
14214: LD_VAR 0 3
14218: PPUSH
14219: LD_INT 1
14221: PPUSH
14222: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14226: LD_INT 2
14228: PPUSH
14229: LD_VAR 0 3
14233: PPUSH
14234: LD_INT 1
14236: PPUSH
14237: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14241: LD_INT 11
14243: PPUSH
14244: LD_VAR 0 3
14248: PPUSH
14249: LD_INT 1
14251: PPUSH
14252: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
14256: LD_INT 20
14258: PPUSH
14259: LD_VAR 0 3
14263: PPUSH
14264: LD_INT 1
14266: PPUSH
14267: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14271: LD_INT 48
14273: PPUSH
14274: LD_VAR 0 3
14278: PPUSH
14279: LD_INT 1
14281: PPUSH
14282: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
14286: LD_INT 49
14288: PPUSH
14289: LD_VAR 0 3
14293: PPUSH
14294: LD_INT 1
14296: PPUSH
14297: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
14301: LD_INT 50
14303: PPUSH
14304: LD_VAR 0 3
14308: PPUSH
14309: LD_INT 1
14311: PPUSH
14312: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14316: LD_INT 69
14318: PPUSH
14319: LD_VAR 0 3
14323: PPUSH
14324: LD_INT 1
14326: PPUSH
14327: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14331: LD_INT 39
14333: PPUSH
14334: LD_VAR 0 3
14338: PPUSH
14339: LD_INT 1
14341: PPUSH
14342: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
14346: LD_INT 34
14348: PPUSH
14349: LD_VAR 0 3
14353: PPUSH
14354: LD_INT 1
14356: PPUSH
14357: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
14361: LD_INT 42
14363: PPUSH
14364: LD_VAR 0 3
14368: PPUSH
14369: LD_INT 1
14371: PPUSH
14372: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
14376: LD_INT 44
14378: PPUSH
14379: LD_VAR 0 3
14383: PPUSH
14384: LD_INT 1
14386: PPUSH
14387: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
14391: LD_INT 41
14393: PPUSH
14394: LD_VAR 0 3
14398: PPUSH
14399: LD_INT 1
14401: PPUSH
14402: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
14406: LD_INT 13
14408: PPUSH
14409: LD_VAR 0 3
14413: PPUSH
14414: LD_INT 1
14416: PPUSH
14417: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
14421: LD_INT 40
14423: PPUSH
14424: LD_VAR 0 3
14428: PPUSH
14429: LD_INT 1
14431: PPUSH
14432: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14436: LD_INT 43
14438: PPUSH
14439: LD_VAR 0 3
14443: PPUSH
14444: LD_INT 1
14446: PPUSH
14447: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
14451: LD_INT 70
14453: PPUSH
14454: LD_VAR 0 3
14458: PPUSH
14459: LD_INT 1
14461: PPUSH
14462: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
14466: LD_INT 23
14468: PPUSH
14469: LD_VAR 0 3
14473: PPUSH
14474: LD_INT 1
14476: PPUSH
14477: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14481: LD_INT 51
14483: PPUSH
14484: LD_VAR 0 3
14488: PPUSH
14489: LD_INT 1
14491: PPUSH
14492: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
14496: LD_INT 52
14498: PPUSH
14499: LD_VAR 0 3
14503: PPUSH
14504: LD_INT 1
14506: PPUSH
14507: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14511: LD_INT 6
14513: PPUSH
14514: LD_VAR 0 3
14518: PPUSH
14519: LD_INT 1
14521: PPUSH
14522: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
14526: LD_INT 15
14528: PPUSH
14529: LD_VAR 0 3
14533: PPUSH
14534: LD_INT 1
14536: PPUSH
14537: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
14541: LD_INT 7
14543: PPUSH
14544: LD_VAR 0 3
14548: PPUSH
14549: LD_INT 1
14551: PPUSH
14552: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
14556: LD_INT 12
14558: PPUSH
14559: LD_VAR 0 3
14563: PPUSH
14564: LD_INT 1
14566: PPUSH
14567: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
14571: LD_INT 10
14573: PPUSH
14574: LD_VAR 0 3
14578: PPUSH
14579: LD_INT 1
14581: PPUSH
14582: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
14586: LD_INT 17
14588: PPUSH
14589: LD_VAR 0 3
14593: PPUSH
14594: LD_INT 1
14596: PPUSH
14597: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
14601: LD_INT 18
14603: PPUSH
14604: LD_VAR 0 3
14608: PPUSH
14609: LD_INT 1
14611: PPUSH
14612: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
14616: LD_INT 60
14618: PPUSH
14619: LD_VAR 0 3
14623: PPUSH
14624: LD_INT 1
14626: PPUSH
14627: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
14631: LD_INT 61
14633: PPUSH
14634: LD_VAR 0 3
14638: PPUSH
14639: LD_INT 1
14641: PPUSH
14642: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
14646: LD_INT 32
14648: PPUSH
14649: LD_VAR 0 3
14653: PPUSH
14654: LD_INT 1
14656: PPUSH
14657: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
14661: LD_INT 27
14663: PPUSH
14664: LD_VAR 0 3
14668: PPUSH
14669: LD_INT 1
14671: PPUSH
14672: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
14676: LD_INT 36
14678: PPUSH
14679: LD_VAR 0 3
14683: PPUSH
14684: LD_INT 1
14686: PPUSH
14687: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
14691: LD_INT 33
14693: PPUSH
14694: LD_VAR 0 3
14698: PPUSH
14699: LD_INT 1
14701: PPUSH
14702: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
14706: LD_INT 9
14708: PPUSH
14709: LD_VAR 0 3
14713: PPUSH
14714: LD_INT 1
14716: PPUSH
14717: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
14721: LD_INT 38
14723: PPUSH
14724: LD_VAR 0 3
14728: PPUSH
14729: LD_INT 1
14731: PPUSH
14732: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
14736: LD_INT 57
14738: PPUSH
14739: LD_VAR 0 3
14743: PPUSH
14744: LD_INT 1
14746: PPUSH
14747: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
14751: LD_INT 58
14753: PPUSH
14754: LD_VAR 0 3
14758: PPUSH
14759: LD_INT 1
14761: PPUSH
14762: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
14766: LD_INT 28
14768: PPUSH
14769: LD_VAR 0 3
14773: PPUSH
14774: LD_INT 1
14776: PPUSH
14777: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
14781: LD_INT 29
14783: PPUSH
14784: LD_VAR 0 3
14788: PPUSH
14789: LD_INT 1
14791: PPUSH
14792: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
14796: LD_INT 30
14798: PPUSH
14799: LD_VAR 0 3
14803: PPUSH
14804: LD_INT 1
14806: PPUSH
14807: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
14811: LD_INT 37
14813: PPUSH
14814: LD_VAR 0 3
14818: PPUSH
14819: LD_INT 1
14821: PPUSH
14822: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
14826: LD_INT 63
14828: PPUSH
14829: LD_VAR 0 3
14833: PPUSH
14834: LD_INT 1
14836: PPUSH
14837: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
14841: LD_INT 64
14843: PPUSH
14844: LD_VAR 0 3
14848: PPUSH
14849: LD_INT 1
14851: PPUSH
14852: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
14856: LD_INT 3
14858: PPUSH
14859: LD_VAR 0 3
14863: PPUSH
14864: LD_INT 1
14866: PPUSH
14867: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
14871: LD_INT 4
14873: PPUSH
14874: LD_VAR 0 3
14878: PPUSH
14879: LD_INT 1
14881: PPUSH
14882: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14886: LD_INT 5
14888: PPUSH
14889: LD_VAR 0 3
14893: PPUSH
14894: LD_INT 1
14896: PPUSH
14897: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
14901: LD_INT 8
14903: PPUSH
14904: LD_VAR 0 3
14908: PPUSH
14909: LD_INT 1
14911: PPUSH
14912: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14916: LD_INT 66
14918: PPUSH
14919: LD_VAR 0 3
14923: PPUSH
14924: LD_INT 1
14926: PPUSH
14927: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
14931: LD_INT 67
14933: PPUSH
14934: LD_VAR 0 3
14938: PPUSH
14939: LD_INT 1
14941: PPUSH
14942: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14946: LD_INT 21
14948: PPUSH
14949: LD_VAR 0 3
14953: PPUSH
14954: LD_INT 1
14956: PPUSH
14957: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14961: LD_INT 22
14963: PPUSH
14964: LD_VAR 0 3
14968: PPUSH
14969: LD_INT 1
14971: PPUSH
14972: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
14976: LD_INT 19
14978: PPUSH
14979: LD_VAR 0 3
14983: PPUSH
14984: LD_INT 1
14986: PPUSH
14987: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
14991: LD_INT 26
14993: PPUSH
14994: LD_VAR 0 3
14998: PPUSH
14999: LD_INT 1
15001: PPUSH
15002: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
15006: LD_INT 54
15008: PPUSH
15009: LD_VAR 0 3
15013: PPUSH
15014: LD_INT 1
15016: PPUSH
15017: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
15021: LD_INT 55
15023: PPUSH
15024: LD_VAR 0 3
15028: PPUSH
15029: LD_INT 1
15031: PPUSH
15032: CALL_OW 322
// for i = 0 to 39 do
15036: LD_ADDR_VAR 0 4
15040: PUSH
15041: DOUBLE
15042: LD_INT 0
15044: DEC
15045: ST_TO_ADDR
15046: LD_INT 39
15048: PUSH
15049: FOR_TO
15050: IFFALSE 15071
// SetRestrict ( i , side , true ) ;
15052: LD_VAR 0 4
15056: PPUSH
15057: LD_VAR 0 3
15061: PPUSH
15062: LD_INT 1
15064: PPUSH
15065: CALL_OW 324
15069: GO 15049
15071: POP
15072: POP
// end ; else
15073: GO 15150
15075: POP
// begin for i = 1 to 73 do
15076: LD_ADDR_VAR 0 4
15080: PUSH
15081: DOUBLE
15082: LD_INT 1
15084: DEC
15085: ST_TO_ADDR
15086: LD_INT 73
15088: PUSH
15089: FOR_TO
15090: IFFALSE 15111
// SetTech ( i , side , state_enabled ) ;
15092: LD_VAR 0 4
15096: PPUSH
15097: LD_VAR 0 3
15101: PPUSH
15102: LD_INT 1
15104: PPUSH
15105: CALL_OW 322
15109: GO 15089
15111: POP
15112: POP
// for i = 0 to 39 do
15113: LD_ADDR_VAR 0 4
15117: PUSH
15118: DOUBLE
15119: LD_INT 0
15121: DEC
15122: ST_TO_ADDR
15123: LD_INT 39
15125: PUSH
15126: FOR_TO
15127: IFFALSE 15148
// SetRestrict ( i , side , true ) ;
15129: LD_VAR 0 4
15133: PPUSH
15134: LD_VAR 0 3
15138: PPUSH
15139: LD_INT 1
15141: PPUSH
15142: CALL_OW 324
15146: GO 15126
15148: POP
15149: POP
// end ; end ; end ;
15150: GO 11155
15152: POP
15153: POP
// end ;
15154: LD_VAR 0 2
15158: RET
