// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_amount_of_siberit , def_public_score , def_siberite_bomb , def_builduptime , def_sheik , def_mastodont ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id , sheik , mastodont ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function read_multiplayer_and_game_parameters ; var i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// if Multiplayer then
   4: NOP4
   8: IFFALSE 72
// begin Game_Type := mp_game_type ;
  10: NOP4
  14: PUSH
  15: NOP4
  19: ST_TO_ADDR
// Your_Side := mp_player_side ;
  20: LD_ADDR_OWVAR 2
  24: PUSH
  25: NOP4
  29: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  30: NOP4
  34: PUSH
  35: NOP4
  39: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  40: NOP4
  44: PUSH
  45: NOP4
  49: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
  50: NOP4
  54: PUSH
  55: NOP4
  59: ST_TO_ADDR
// Teams := mp_teams ;
  60: NOP4
  64: PUSH
  65: NOP4
  69: ST_TO_ADDR
// end else
  70: GO 254
// begin Game_Type := 1 ;
  72: NOP4
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// Your_Side := 3 ;
  80: LD_ADDR_OWVAR 2
  84: PUSH
  85: LD_INT 3
  87: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
  88: NOP4
  92: PUSH
  93: LD_INT 1
  95: PUSH
  96: LD_INT 2
  98: PUSH
  99: LD_INT 3
 101: PUSH
 102: LD_INT 4
 104: PUSH
 105: LD_INT 5
 107: PUSH
 108: LD_INT 6
 110: PUSH
 111: LD_INT 0
 113: PUSH
 114: LD_INT 0
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: LIST
 126: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 127: NOP4
 131: PUSH
 132: LD_INT 1
 134: PUSH
 135: LD_INT 2
 137: PUSH
 138: LD_INT 3
 140: PUSH
 141: LD_INT 4
 143: PUSH
 144: LD_INT 5
 146: PUSH
 147: LD_INT 6
 149: PUSH
 150: LD_INT 0
 152: PUSH
 153: LD_INT 0
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: LIST
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 166: NOP4
 170: PUSH
 171: LD_INT 1
 173: PUSH
 174: LD_INT 2
 176: PUSH
 177: LD_INT 3
 179: PUSH
 180: LD_INT 1
 182: PUSH
 183: LD_INT 2
 185: PUSH
 186: LD_INT 3
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 0
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 205: NOP4
 209: PUSH
 210: LD_INT 1
 212: PUSH
 213: EMPTY
 214: LIST
 215: PUSH
 216: LD_INT 2
 218: PUSH
 219: EMPTY
 220: LIST
 221: PUSH
 222: LD_INT 3
 224: PUSH
 225: EMPTY
 226: LIST
 227: PUSH
 228: LD_INT 4
 230: PUSH
 231: EMPTY
 232: LIST
 233: PUSH
 234: LD_INT 5
 236: PUSH
 237: EMPTY
 238: LIST
 239: PUSH
 240: LD_INT 6
 242: PUSH
 243: EMPTY
 244: LIST
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: LIST
 252: LIST
 253: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 254: NOP4
 258: PUSH
 259: NOP4
 263: PUSH
 264: LD_INT 0
 266: PUSH
 267: EMPTY
 268: LIST
 269: DIFF
 270: PUSH
 271: LD_INT 1
 273: GREATER
 274: ST_TO_ADDR
// if Multiplayer then
 275: NOP4
 279: IFFALSE 517
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 281: NOP4
 285: PUSH
 286: LD_INT 0
 288: PPUSH
 289: NOP4
 293: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 294: NOP4
 298: PUSH
 299: LD_INT 1
 301: PPUSH
 302: NOP4
 306: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 307: NOP4
 311: PUSH
 312: LD_INT 2
 314: PPUSH
 315: NOP4
 319: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 320: NOP4
 324: PUSH
 325: LD_INT 3
 327: PPUSH
 328: NOP4
 332: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 333: NOP4
 337: PUSH
 338: LD_INT 4
 340: PPUSH
 341: NOP4
 345: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 346: NOP4
 350: PUSH
 351: LD_INT 5
 353: PPUSH
 354: NOP4
 358: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 359: NOP4
 363: PUSH
 364: LD_INT 6
 366: PPUSH
 367: NOP4
 371: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 372: NOP4
 376: PUSH
 377: LD_INT 10
 379: PPUSH
 380: NOP4
 384: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 385: NOP4
 389: PUSH
 390: LD_INT 11
 392: PPUSH
 393: NOP4
 397: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 398: NOP4
 402: PUSH
 403: LD_INT 12
 405: PPUSH
 406: NOP4
 410: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 411: NOP4
 415: PUSH
 416: LD_INT 13
 418: PPUSH
 419: NOP4
 423: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 424: NOP4
 428: PUSH
 429: LD_INT 14
 431: PPUSH
 432: NOP4
 436: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 437: NOP4
 441: PUSH
 442: LD_INT 15
 444: PPUSH
 445: NOP4
 449: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 450: NOP4
 454: PUSH
 455: LD_INT 16
 457: PPUSH
 458: NOP4
 462: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 463: NOP4
 467: PUSH
 468: LD_INT 17
 470: PPUSH
 471: NOP4
 475: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 476: NOP4
 480: PUSH
 481: LD_INT 20
 483: PPUSH
 484: NOP4
 488: ST_TO_ADDR
// def_sheik := GetMultiplayerSetting ( 22 ) ;
 489: NOP4
 493: PUSH
 494: LD_INT 22
 496: PPUSH
 497: NOP4
 501: ST_TO_ADDR
// def_mastodont := GetMultiplayerSetting ( 23 ) ;
 502: NOP4
 506: PUSH
 507: LD_INT 23
 509: PPUSH
 510: NOP4
 514: ST_TO_ADDR
// end else
 515: GO 665
// begin Randomize ;
 517: NOP4
// def_base_level := 2 ;
 521: NOP4
 525: PUSH
 526: LD_INT 2
 528: ST_TO_ADDR
// def_amount_of_people := 0 ;
 529: NOP4
 533: PUSH
 534: LD_INT 0
 536: ST_TO_ADDR
// def_skill_level := 1 ;
 537: NOP4
 541: PUSH
 542: LD_INT 1
 544: ST_TO_ADDR
// def_starting_resources := 2 ;
 545: NOP4
 549: PUSH
 550: LD_INT 2
 552: ST_TO_ADDR
// def_shipments_density := 1 ;
 553: NOP4
 557: PUSH
 558: LD_INT 1
 560: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
 561: NOP4
 565: PUSH
 566: LD_INT 1
 568: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
 569: NOP4
 573: PUSH
 574: LD_INT 2
 576: ST_TO_ADDR
// def_shared_vision := 1 ;
 577: NOP4
 581: PUSH
 582: LD_INT 1
 584: ST_TO_ADDR
// def_morale_flags := 1 ;
 585: NOP4
 589: PUSH
 590: LD_INT 1
 592: ST_TO_ADDR
// def_siberite_detection := 1 ;
 593: NOP4
 597: PUSH
 598: LD_INT 1
 600: ST_TO_ADDR
// def_people_respawning := 2 ;
 601: NOP4
 605: PUSH
 606: LD_INT 2
 608: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 609: NOP4
 613: PUSH
 614: LD_INT 3
 616: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 617: NOP4
 621: PUSH
 622: LD_INT 0
 624: ST_TO_ADDR
// def_public_score := 0 ;
 625: NOP4
 629: PUSH
 630: LD_INT 0
 632: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 633: NOP4
 637: PUSH
 638: LD_INT 0
 640: ST_TO_ADDR
// def_builduptime := 1 ;
 641: NOP4
 645: PUSH
 646: LD_INT 1
 648: ST_TO_ADDR
// def_sheik := 0 ;
 649: NOP4
 653: PUSH
 654: LD_INT 0
 656: ST_TO_ADDR
// def_mastodont := 0 ;
 657: NOP4
 661: PUSH
 662: LD_INT 0
 664: ST_TO_ADDR
// end ; if isSGUI then
 665: NOP4
 669: IFFALSE 675
// setMpTechs ( ) ;
 671: NOP4
// if ( Game_Type = 5 ) then
 675: NOP4
 679: PUSH
 680: LD_INT 5
 682: EQUAL
 683: IFFALSE 712
// begin def_base_level := 1 ;
 685: NOP4
 689: PUSH
 690: LD_INT 1
 692: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 693: NOP4
 697: PUSH
 698: LD_INT 0
 700: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
 701: NOP4
 705: PUSH
 706: LD_INT 0
 708: ST_TO_ADDR
// disable ( 10 ) ;
 709: LD_INT 10
 711: DISABLE_MARKED
// end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 712: NOP4
 716: PUSH
 717: LD_INT 0
 719: PUSH
 720: LD_INT 1
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: LIST
 730: PUSH
 731: NOP4
 735: PUSH
 736: LD_INT 1
 738: PLUS
 739: ARRAY
 740: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 ] [ def_base_level + 1 ] ;
 741: NOP4
 745: PUSH
 746: LD_INT 0
 748: PUSH
 749: LD_INT 0
 751: PUSH
 752: LD_INT 2
 754: PUSH
 755: EMPTY
 756: LIST
 757: LIST
 758: LIST
 759: PUSH
 760: NOP4
 764: PUSH
 765: LD_INT 1
 767: PLUS
 768: ARRAY
 769: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 770: NOP4
 774: PUSH
 775: LD_INT 9
 777: PUSH
 778: LD_INT 12
 780: PUSH
 781: LD_INT 15
 783: PUSH
 784: LD_INT 24
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: LIST
 791: LIST
 792: PUSH
 793: NOP4
 797: PUSH
 798: LD_INT 1
 800: PLUS
 801: ARRAY
 802: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 , 8 ] [ def_skill_level + 1 ] ;
 803: NOP4
 807: PUSH
 808: LD_INT 2
 810: PUSH
 811: LD_INT 3
 813: PUSH
 814: LD_INT 4
 816: PUSH
 817: LD_INT 5
 819: PUSH
 820: LD_INT 8
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: LIST
 827: LIST
 828: LIST
 829: PUSH
 830: NOP4
 834: PUSH
 835: LD_INT 1
 837: PLUS
 838: ARRAY
 839: ST_TO_ADDR
// if ( Game_Type = 5 ) then
 840: NOP4
 844: PUSH
 845: LD_INT 5
 847: EQUAL
 848: IFFALSE 966
// begin starting_resources := [ [ 1000 , 100 , 100 ] , [ 2000 , 200 , 200 ] , [ 5000 , 500 , 500 ] , [ 10000 , 1000 , 1000 ] , [ 25000 , 2500 , 2500 ] , [ 50000 , 5000 , 5000 ] ] [ def_starting_resources + 1 ] ;
 850: NOP4
 854: PUSH
 855: LD_INT 1000
 857: PUSH
 858: LD_INT 100
 860: PUSH
 861: LD_INT 100
 863: PUSH
 864: EMPTY
 865: LIST
 866: LIST
 867: LIST
 868: PUSH
 869: LD_INT 2000
 871: PUSH
 872: LD_INT 200
 874: PUSH
 875: LD_INT 200
 877: PUSH
 878: EMPTY
 879: LIST
 880: LIST
 881: LIST
 882: PUSH
 883: LD_INT 5000
 885: PUSH
 886: LD_INT 500
 888: PUSH
 889: LD_INT 500
 891: PUSH
 892: EMPTY
 893: LIST
 894: LIST
 895: LIST
 896: PUSH
 897: LD_INT 10000
 899: PUSH
 900: LD_INT 1000
 902: PUSH
 903: LD_INT 1000
 905: PUSH
 906: EMPTY
 907: LIST
 908: LIST
 909: LIST
 910: PUSH
 911: LD_INT 25000
 913: PUSH
 914: LD_INT 2500
 916: PUSH
 917: LD_INT 2500
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: LIST
 924: PUSH
 925: LD_INT 50000
 927: PUSH
 928: LD_INT 5000
 930: PUSH
 931: LD_INT 5000
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: LIST
 938: PUSH
 939: EMPTY
 940: LIST
 941: LIST
 942: LIST
 943: LIST
 944: LIST
 945: LIST
 946: PUSH
 947: NOP4
 951: PUSH
 952: LD_INT 1
 954: PLUS
 955: ARRAY
 956: ST_TO_ADDR
// starting_crates := [ ] ;
 957: NOP4
 961: PUSH
 962: EMPTY
 963: ST_TO_ADDR
// end else
 964: GO 1112
// begin starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 966: NOP4
 970: PUSH
 971: LD_INT 0
 973: PUSH
 974: LD_INT 0
 976: PUSH
 977: LD_INT 0
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: LIST
 984: PUSH
 985: LD_INT 30
 987: PUSH
 988: LD_INT 0
 990: PUSH
 991: LD_INT 0
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 50
1001: PUSH
1002: LD_INT 20
1004: PUSH
1005: LD_INT 0
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: LIST
1012: PUSH
1013: LD_INT 80
1015: PUSH
1016: LD_INT 40
1018: PUSH
1019: LD_INT 20
1021: PUSH
1022: EMPTY
1023: LIST
1024: LIST
1025: LIST
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: PUSH
1033: NOP4
1037: PUSH
1038: LD_INT 1
1040: PLUS
1041: ARRAY
1042: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1043: NOP4
1047: PUSH
1048: LD_INT 10
1050: PUSH
1051: EMPTY
1052: LIST
1053: PUSH
1054: LD_INT 7
1056: PUSH
1057: LD_INT 14
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: PUSH
1064: LD_INT 6
1066: PUSH
1067: LD_INT 12
1069: PUSH
1070: LD_INT 18
1072: PUSH
1073: EMPTY
1074: LIST
1075: LIST
1076: LIST
1077: PUSH
1078: LD_INT 5
1080: PUSH
1081: LD_INT 10
1083: PUSH
1084: LD_INT 15
1086: PUSH
1087: LD_INT 20
1089: PUSH
1090: EMPTY
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: LIST
1100: LIST
1101: PUSH
1102: NOP4
1106: PUSH
1107: LD_INT 1
1109: PLUS
1110: ARRAY
1111: ST_TO_ADDR
// end ; shipments_density := [ 150 , 125 , 100 , 50 ] [ def_shipments_density + 1 ] ;
1112: NOP4
1116: PUSH
1117: LD_INT 150
1119: PUSH
1120: LD_INT 125
1122: PUSH
1123: LD_INT 100
1125: PUSH
1126: LD_INT 50
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: LIST
1133: LIST
1134: PUSH
1135: NOP4
1139: PUSH
1140: LD_INT 1
1142: PLUS
1143: ARRAY
1144: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1145: NOP4
1149: PUSH
1150: LD_INT 0
1152: PUSH
1153: LD_INT 10500
1155: PUSH
1156: LD_INT 6300
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: LIST
1163: PUSH
1164: NOP4
1168: PUSH
1169: LD_INT 1
1171: PLUS
1172: ARRAY
1173: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1174: NOP4
1178: PUSH
1179: LD_INT 0
1181: PUSH
1182: LD_INT 31500
1184: PUSH
1185: LD_INT 10500
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: PUSH
1193: NOP4
1197: PUSH
1198: LD_INT 1
1200: PLUS
1201: ARRAY
1202: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1203: NOP4
1207: PUSH
1208: LD_INT 0
1210: PUSH
1211: LD_INT 1
1213: PUSH
1214: LD_INT 2
1216: PUSH
1217: LD_INT 3
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: PUSH
1226: NOP4
1230: PUSH
1231: LD_INT 1
1233: PLUS
1234: ARRAY
1235: ST_TO_ADDR
// amount_of_siberit := [ 30 , 50 , 80 , 100 , 130 , 150 , 200 ] [ def_amount_of_siberit + 1 ] ;
1236: NOP4
1240: PUSH
1241: LD_INT 30
1243: PUSH
1244: LD_INT 50
1246: PUSH
1247: LD_INT 80
1249: PUSH
1250: LD_INT 100
1252: PUSH
1253: LD_INT 130
1255: PUSH
1256: LD_INT 150
1258: PUSH
1259: LD_INT 200
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: LIST
1270: PUSH
1271: NOP4
1275: PUSH
1276: LD_INT 1
1278: PLUS
1279: ARRAY
1280: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1281: NOP4
1285: PUSH
1286: LD_INT 1
1288: NEG
1289: PUSH
1290: LD_INT 350
1292: PUSH
1293: LD_INT 700
1295: PUSH
1296: LD_INT 1400
1298: PUSH
1299: LD_INT 0
1301: PUSH
1302: EMPTY
1303: LIST
1304: LIST
1305: LIST
1306: LIST
1307: LIST
1308: PUSH
1309: NOP4
1313: PUSH
1314: LD_INT 1
1316: PLUS
1317: ARRAY
1318: ST_TO_ADDR
// battle_flags_id := [ ] ;
1319: NOP4
1323: PUSH
1324: EMPTY
1325: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1326: NOP4
1330: PUSH
1331: LD_INT 0
1333: PUSH
1334: LD_INT 1
1336: PUSH
1337: LD_INT 63000
1339: PUSH
1340: LD_INT 126000
1342: PUSH
1343: LD_INT 189000
1345: PUSH
1346: LD_INT 252000
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: PUSH
1357: NOP4
1361: PUSH
1362: LD_INT 1
1364: PLUS
1365: ARRAY
1366: ST_TO_ADDR
// if ( Game_Type = 12 ) then
1367: NOP4
1371: PUSH
1372: LD_INT 12
1374: EQUAL
1375: IFFALSE 1433
// begin sheik := [ 0 , 1 ] [ def_sheik + 1 ] ;
1377: NOP4
1381: PUSH
1382: LD_INT 0
1384: PUSH
1385: LD_INT 1
1387: PUSH
1388: EMPTY
1389: LIST
1390: LIST
1391: PUSH
1392: NOP4
1396: PUSH
1397: LD_INT 1
1399: PLUS
1400: ARRAY
1401: ST_TO_ADDR
// mastodont := [ 0 , 1 , 2 ] [ def_mastodont + 1 ] end else
1402: NOP4
1406: PUSH
1407: LD_INT 0
1409: PUSH
1410: LD_INT 1
1412: PUSH
1413: LD_INT 2
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: LIST
1420: PUSH
1421: NOP4
1425: PUSH
1426: LD_INT 1
1428: PLUS
1429: ARRAY
1430: ST_TO_ADDR
1431: GO 1449
// begin sheik := 0 ;
1433: NOP4
1437: PUSH
1438: LD_INT 0
1440: ST_TO_ADDR
// mastodont := 0 ;
1441: NOP4
1445: PUSH
1446: LD_INT 0
1448: ST_TO_ADDR
// end ; end ;
1449: LD_VAR 0 1
1453: RET
// function init_map ; var i , j ; begin
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
1458: PPUSH
// normal_oil_deposits_locations := [ [ 101 , 187 ] , [ 18 , 26 ] , [ 50 , 89 ] , [ 123 , 3 ] , [ 182 , 69 ] , [ 231 , 174 ] ] ;
1459: NOP4
1463: PUSH
1464: LD_INT 101
1466: PUSH
1467: LD_INT 187
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: PUSH
1474: LD_INT 18
1476: PUSH
1477: LD_INT 26
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: PUSH
1484: LD_INT 50
1486: PUSH
1487: LD_INT 89
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 123
1496: PUSH
1497: LD_INT 3
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PUSH
1504: LD_INT 182
1506: PUSH
1507: LD_INT 69
1509: PUSH
1510: EMPTY
1511: LIST
1512: LIST
1513: PUSH
1514: LD_INT 231
1516: PUSH
1517: LD_INT 174
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: LIST
1531: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 101 , 187 ] , [ 108 , 183 ] ] , [ [ 18 , 26 ] , [ 7 , 8 ] ] , [ [ 50 , 89 ] , [ 62 , 99 ] ] , [ [ 123 , 3 ] , [ 149 , 18 ] ] , [ [ 182 , 69 ] , [ 202 , 90 ] ] , [ [ 231 , 174 ] , [ 239 , 164 ] ] ] ;
1532: NOP4
1536: PUSH
1537: LD_INT 101
1539: PUSH
1540: LD_INT 187
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: PUSH
1547: LD_INT 108
1549: PUSH
1550: LD_INT 183
1552: PUSH
1553: EMPTY
1554: LIST
1555: LIST
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: PUSH
1561: LD_INT 18
1563: PUSH
1564: LD_INT 26
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: PUSH
1571: LD_INT 7
1573: PUSH
1574: LD_INT 8
1576: PUSH
1577: EMPTY
1578: LIST
1579: LIST
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: PUSH
1585: LD_INT 50
1587: PUSH
1588: LD_INT 89
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PUSH
1595: LD_INT 62
1597: PUSH
1598: LD_INT 99
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: PUSH
1605: EMPTY
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 123
1611: PUSH
1612: LD_INT 3
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PUSH
1619: LD_INT 149
1621: PUSH
1622: LD_INT 18
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: PUSH
1633: LD_INT 182
1635: PUSH
1636: LD_INT 69
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: PUSH
1643: LD_INT 202
1645: PUSH
1646: LD_INT 90
1648: PUSH
1649: EMPTY
1650: LIST
1651: LIST
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PUSH
1657: LD_INT 231
1659: PUSH
1660: LD_INT 174
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: PUSH
1667: LD_INT 239
1669: PUSH
1670: LD_INT 164
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: PUSH
1677: EMPTY
1678: LIST
1679: LIST
1680: PUSH
1681: EMPTY
1682: LIST
1683: LIST
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 96 , 185 ] , [ 21 , 29 ] , [ 50 , 85 ] , [ 128 , 2 ] , [ 186 , 72 ] , [ 234 , 174 ] ] ;
1689: NOP4
1693: PUSH
1694: LD_INT 96
1696: PUSH
1697: LD_INT 185
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 21
1706: PUSH
1707: LD_INT 29
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: PUSH
1714: LD_INT 50
1716: PUSH
1717: LD_INT 85
1719: PUSH
1720: EMPTY
1721: LIST
1722: LIST
1723: PUSH
1724: LD_INT 128
1726: PUSH
1727: LD_INT 2
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: PUSH
1734: LD_INT 186
1736: PUSH
1737: LD_INT 72
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: PUSH
1744: LD_INT 234
1746: PUSH
1747: LD_INT 174
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: LIST
1758: LIST
1759: LIST
1760: LIST
1761: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 96 , 185 ] , [ 109 , 179 ] ] , [ [ 21 , 29 ] , [ 9 , 5 ] ] , [ [ 50 , 85 ] , [ 66 , 102 ] ] , [ [ 128 , 2 ] , [ 152 , 15 ] ] , [ [ 186 , 72 ] , [ 200 , 86 ] ] , [ [ 234 , 174 ] , [ 237 , 160 ] ] ] ;
1762: NOP4
1766: PUSH
1767: LD_INT 96
1769: PUSH
1770: LD_INT 185
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: PUSH
1777: LD_INT 109
1779: PUSH
1780: LD_INT 179
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: PUSH
1791: LD_INT 21
1793: PUSH
1794: LD_INT 29
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: PUSH
1801: LD_INT 9
1803: PUSH
1804: LD_INT 5
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: PUSH
1815: LD_INT 50
1817: PUSH
1818: LD_INT 85
1820: PUSH
1821: EMPTY
1822: LIST
1823: LIST
1824: PUSH
1825: LD_INT 66
1827: PUSH
1828: LD_INT 102
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: PUSH
1835: EMPTY
1836: LIST
1837: LIST
1838: PUSH
1839: LD_INT 128
1841: PUSH
1842: LD_INT 2
1844: PUSH
1845: EMPTY
1846: LIST
1847: LIST
1848: PUSH
1849: LD_INT 152
1851: PUSH
1852: LD_INT 15
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: PUSH
1863: LD_INT 186
1865: PUSH
1866: LD_INT 72
1868: PUSH
1869: EMPTY
1870: LIST
1871: LIST
1872: PUSH
1873: LD_INT 200
1875: PUSH
1876: LD_INT 86
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: LD_INT 234
1889: PUSH
1890: LD_INT 174
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: PUSH
1897: LD_INT 237
1899: PUSH
1900: LD_INT 160
1902: PUSH
1903: EMPTY
1904: LIST
1905: LIST
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: ST_TO_ADDR
// depot_def := [ [ 100 , 179 , 0 ] , [ 21 , 18 , 2 ] , [ 65 , 90 , 2 ] , [ 132 , 11 , 1 ] , [ 190 , 82 , 4 ] , [ 230 , 164 , 4 ] ] ;
1919: NOP4
1923: PUSH
1924: LD_INT 100
1926: PUSH
1927: LD_INT 179
1929: PUSH
1930: LD_INT 0
1932: PUSH
1933: EMPTY
1934: LIST
1935: LIST
1936: LIST
1937: PUSH
1938: LD_INT 21
1940: PUSH
1941: LD_INT 18
1943: PUSH
1944: LD_INT 2
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: PUSH
1952: LD_INT 65
1954: PUSH
1955: LD_INT 90
1957: PUSH
1958: LD_INT 2
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: LIST
1965: PUSH
1966: LD_INT 132
1968: PUSH
1969: LD_INT 11
1971: PUSH
1972: LD_INT 1
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: LIST
1979: PUSH
1980: LD_INT 190
1982: PUSH
1983: LD_INT 82
1985: PUSH
1986: LD_INT 4
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: LIST
1993: PUSH
1994: LD_INT 230
1996: PUSH
1997: LD_INT 164
1999: PUSH
2000: LD_INT 4
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: LIST
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: LIST
2015: ST_TO_ADDR
// for i in depot_def do
2016: NOP4
2020: PUSH
2021: NOP4
2025: PUSH
2026: FOR_IN
2027: IFFALSE 2101
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 10 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 10 ) ] ] ;
2029: NOP4
2033: PUSH
2034: NOP4
2038: PUSH
2039: NOP4
2043: PUSH
2044: LD_INT 1
2046: ARRAY
2047: PPUSH
2048: NOP4
2052: PUSH
2053: LD_INT 3
2055: ARRAY
2056: PPUSH
2057: LD_INT 10
2059: PPUSH
2060: NOP4
2064: PUSH
2065: NOP4
2069: PUSH
2070: LD_INT 2
2072: ARRAY
2073: PPUSH
2074: NOP4
2078: PUSH
2079: LD_INT 3
2081: ARRAY
2082: PPUSH
2083: LD_INT 10
2085: PPUSH
2086: NOP4
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: PUSH
2095: EMPTY
2096: LIST
2097: ADD
2098: ST_TO_ADDR
2099: GO 2026
2101: POP
2102: POP
// breastworks_def := [ [ [ 88 , 154 , 3 ] , [ 105 , 167 , 4 ] ] , [ [ 27 , 32 , 5 ] , [ 40 , 24 , 4 ] ] , [ [ 78 , 102 , 5 ] , [ 74 , 84 , 3 ] ] , [ [ 128 , 20 , 0 ] , [ 122 , 6 , 1 ] ] , [ [ 185 , 92 , 0 ] , [ 175 , 73 , 1 ] ] , [ [ 219 , 171 , 1 ] , [ 219 , 151 , 2 ] ] ] ;
2103: NOP4
2107: PUSH
2108: LD_INT 88
2110: PUSH
2111: LD_INT 154
2113: PUSH
2114: LD_INT 3
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: LIST
2121: PUSH
2122: LD_INT 105
2124: PUSH
2125: LD_INT 167
2127: PUSH
2128: LD_INT 4
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: LIST
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: PUSH
2140: LD_INT 27
2142: PUSH
2143: LD_INT 32
2145: PUSH
2146: LD_INT 5
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: LIST
2153: PUSH
2154: LD_INT 40
2156: PUSH
2157: LD_INT 24
2159: PUSH
2160: LD_INT 4
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: LIST
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: PUSH
2172: LD_INT 78
2174: PUSH
2175: LD_INT 102
2177: PUSH
2178: LD_INT 5
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: LIST
2185: PUSH
2186: LD_INT 74
2188: PUSH
2189: LD_INT 84
2191: PUSH
2192: LD_INT 3
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: LIST
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: PUSH
2204: LD_INT 128
2206: PUSH
2207: LD_INT 20
2209: PUSH
2210: LD_INT 0
2212: PUSH
2213: EMPTY
2214: LIST
2215: LIST
2216: LIST
2217: PUSH
2218: LD_INT 122
2220: PUSH
2221: LD_INT 6
2223: PUSH
2224: LD_INT 1
2226: PUSH
2227: EMPTY
2228: LIST
2229: LIST
2230: LIST
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PUSH
2236: LD_INT 185
2238: PUSH
2239: LD_INT 92
2241: PUSH
2242: LD_INT 0
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: LIST
2249: PUSH
2250: LD_INT 175
2252: PUSH
2253: LD_INT 73
2255: PUSH
2256: LD_INT 1
2258: PUSH
2259: EMPTY
2260: LIST
2261: LIST
2262: LIST
2263: PUSH
2264: EMPTY
2265: LIST
2266: LIST
2267: PUSH
2268: LD_INT 219
2270: PUSH
2271: LD_INT 171
2273: PUSH
2274: LD_INT 1
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: LIST
2281: PUSH
2282: LD_INT 219
2284: PUSH
2285: LD_INT 151
2287: PUSH
2288: LD_INT 2
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: LIST
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: EMPTY
2301: LIST
2302: LIST
2303: LIST
2304: LIST
2305: LIST
2306: LIST
2307: ST_TO_ADDR
// for i = 1 to Side_Positions do
2308: NOP4
2312: PUSH
2313: DOUBLE
2314: LD_INT 1
2316: DEC
2317: ST_TO_ADDR
2318: NOP4
2322: PUSH
2323: FOR_TO
2324: IFFALSE 2454
// begin if not Side_Positions [ i ] then
2326: NOP4
2330: PUSH
2331: NOP4
2335: ARRAY
2336: NOT
2337: IFFALSE 2341
// continue ;
2339: GO 2323
// if def_extra_oil_deposits then
2341: NOP4
2345: IFFALSE 2403
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2347: NOP4
2351: PUSH
2352: NOP4
2356: PUSH
2357: NOP4
2361: PUSH
2362: NOP4
2366: ARRAY
2367: ARRAY
2368: PUSH
2369: FOR_IN
2370: IFFALSE 2399
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2372: NOP4
2376: PUSH
2377: LD_INT 1
2379: ARRAY
2380: PPUSH
2381: NOP4
2385: PUSH
2386: LD_INT 2
2388: ARRAY
2389: PPUSH
2390: LD_INT 2
2392: PPUSH
2393: NOP4
2397: GO 2369
2399: POP
2400: POP
2401: GO 2452
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2403: NOP4
2407: PUSH
2408: NOP4
2412: PUSH
2413: NOP4
2417: ARRAY
2418: ARRAY
2419: PUSH
2420: LD_INT 1
2422: ARRAY
2423: PPUSH
2424: NOP4
2428: PUSH
2429: NOP4
2433: PUSH
2434: NOP4
2438: ARRAY
2439: ARRAY
2440: PUSH
2441: LD_INT 2
2443: ARRAY
2444: PPUSH
2445: LD_INT 2
2447: PPUSH
2448: NOP4
// end ;
2452: GO 2323
2454: POP
2455: POP
// if def_extra_sib_deposits then
2456: NOP4
2460: IFFALSE 2614
// for i = 1 to Side_Positions do
2462: NOP4
2466: PUSH
2467: DOUBLE
2468: LD_INT 1
2470: DEC
2471: ST_TO_ADDR
2472: NOP4
2476: PUSH
2477: FOR_TO
2478: IFFALSE 2612
// begin if not Side_Positions [ i ] then
2480: NOP4
2484: PUSH
2485: NOP4
2489: ARRAY
2490: NOT
2491: IFFALSE 2495
// continue ;
2493: GO 2477
// if def_extra_sib_deposits = 2 then
2495: NOP4
2499: PUSH
2500: LD_INT 2
2502: EQUAL
2503: IFFALSE 2561
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
2505: NOP4
2509: PUSH
2510: NOP4
2514: PUSH
2515: NOP4
2519: PUSH
2520: NOP4
2524: ARRAY
2525: ARRAY
2526: PUSH
2527: FOR_IN
2528: IFFALSE 2557
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2530: NOP4
2534: PUSH
2535: LD_INT 1
2537: ARRAY
2538: PPUSH
2539: NOP4
2543: PUSH
2544: LD_INT 2
2546: ARRAY
2547: PPUSH
2548: LD_INT 3
2550: PPUSH
2551: NOP4
2555: GO 2527
2557: POP
2558: POP
2559: GO 2610
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2561: NOP4
2565: PUSH
2566: NOP4
2570: PUSH
2571: NOP4
2575: ARRAY
2576: ARRAY
2577: PUSH
2578: LD_INT 1
2580: ARRAY
2581: PPUSH
2582: NOP4
2586: PUSH
2587: NOP4
2591: PUSH
2592: NOP4
2596: ARRAY
2597: ARRAY
2598: PUSH
2599: LD_INT 2
2601: ARRAY
2602: PPUSH
2603: LD_INT 3
2605: PPUSH
2606: NOP4
// end ;
2610: GO 2477
2612: POP
2613: POP
// end ;
2614: LD_VAR 0 1
2618: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2619: LD_INT 0
2621: PPUSH
2622: PPUSH
2623: PPUSH
// if not Team_Game then
2624: NOP4
2628: NOT
2629: IFFALSE 2727
// begin for i = 1 to 8 do
2631: NOP4
2635: PUSH
2636: DOUBLE
2637: LD_INT 1
2639: DEC
2640: ST_TO_ADDR
2641: LD_INT 8
2643: PUSH
2644: FOR_TO
2645: IFFALSE 2723
// for j = 1 to 8 do
2647: NOP4
2651: PUSH
2652: DOUBLE
2653: LD_INT 1
2655: DEC
2656: ST_TO_ADDR
2657: LD_INT 8
2659: PUSH
2660: FOR_TO
2661: IFFALSE 2719
// if i <> j then
2663: NOP4
2667: PUSH
2668: NOP4
2672: NONEQUAL
2673: IFFALSE 2697
// SetAttitude ( i , j , att_neutral , true ) else
2675: NOP4
2679: PPUSH
2680: NOP4
2684: PPUSH
2685: LD_INT 0
2687: PPUSH
2688: LD_INT 1
2690: PPUSH
2691: NOP4
2695: GO 2717
// SetAttitude ( i , j , att_friend , true ) ;
2697: NOP4
2701: PPUSH
2702: NOP4
2706: PPUSH
2707: LD_INT 1
2709: PPUSH
2710: LD_INT 1
2712: PPUSH
2713: NOP4
2717: GO 2660
2719: POP
2720: POP
2721: GO 2644
2723: POP
2724: POP
// end else
2725: GO 2902
// begin if def_shared_vision then
2727: NOP4
2731: IFFALSE 2796
// begin for i in Teams do
2733: NOP4
2737: PUSH
2738: NOP4
2742: PUSH
2743: FOR_IN
2744: IFFALSE 2794
// for j = 2 to i do
2746: NOP4
2750: PUSH
2751: DOUBLE
2752: LD_INT 2
2754: DEC
2755: ST_TO_ADDR
2756: NOP4
2760: PUSH
2761: FOR_TO
2762: IFFALSE 2790
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2764: NOP4
2768: PUSH
2769: NOP4
2773: ARRAY
2774: PPUSH
2775: NOP4
2779: PUSH
2780: LD_INT 1
2782: ARRAY
2783: PPUSH
2784: NOP4
2788: GO 2761
2790: POP
2791: POP
2792: GO 2743
2794: POP
2795: POP
// end ; for i = 1 to 8 do
2796: NOP4
2800: PUSH
2801: DOUBLE
2802: LD_INT 1
2804: DEC
2805: ST_TO_ADDR
2806: LD_INT 8
2808: PUSH
2809: FOR_TO
2810: IFFALSE 2900
// for j = 1 to 8 do
2812: NOP4
2816: PUSH
2817: DOUBLE
2818: LD_INT 1
2820: DEC
2821: ST_TO_ADDR
2822: LD_INT 8
2824: PUSH
2825: FOR_TO
2826: IFFALSE 2896
// if Side_Teams [ i ] = Side_Teams [ j ] then
2828: NOP4
2832: PUSH
2833: NOP4
2837: ARRAY
2838: PUSH
2839: NOP4
2843: PUSH
2844: NOP4
2848: ARRAY
2849: EQUAL
2850: IFFALSE 2874
// SetAttitude ( i , j , att_friend , true ) else
2852: NOP4
2856: PPUSH
2857: NOP4
2861: PPUSH
2862: LD_INT 1
2864: PPUSH
2865: LD_INT 1
2867: PPUSH
2868: NOP4
2872: GO 2894
// SetAttitude ( i , j , att_enemy , true ) ;
2874: NOP4
2878: PPUSH
2879: NOP4
2883: PPUSH
2884: LD_INT 2
2886: PPUSH
2887: LD_INT 1
2889: PPUSH
2890: NOP4
2894: GO 2825
2896: POP
2897: POP
2898: GO 2809
2900: POP
2901: POP
// end ; end ;
2902: LD_VAR 0 1
2906: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2907: LD_INT 0
2909: PPUSH
2910: PPUSH
2911: PPUSH
2912: PPUSH
// result := [ ] ;
2913: NOP4
2917: PUSH
2918: EMPTY
2919: ST_TO_ADDR
// for i := 1 to count do
2920: NOP4
2924: PUSH
2925: DOUBLE
2926: LD_INT 1
2928: DEC
2929: ST_TO_ADDR
2930: NOP4
2934: PUSH
2935: FOR_TO
2936: IFFALSE 3386
// begin uc_direction := Rand ( 0 , 5 ) ;
2938: LD_ADDR_OWVAR 24
2942: PUSH
2943: LD_INT 0
2945: PPUSH
2946: LD_INT 5
2948: PPUSH
2949: NOP4
2953: ST_TO_ADDR
// if commander then
2954: NOP4
2958: IFFALSE 3099
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2960: LD_ADDR_OWVAR 26
2964: PUSH
2965: NOP4
2969: PUSH
2970: NOP4
2974: ARRAY
2975: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2976: LD_INT 1
2978: PPUSH
2979: LD_INT 2
2981: PPUSH
2982: NOP4
2986: PPUSH
2987: NOP4
2991: PPUSH
2992: NOP4
2996: PUSH
2997: LD_INT 2
2999: PLUS
3000: PPUSH
3001: NOP4
// hc_importance := 105 ;
3005: LD_ADDR_OWVAR 32
3009: PUSH
3010: LD_INT 105
3012: ST_TO_ADDR
// commander := false ;
3013: NOP4
3017: PUSH
3018: LD_INT 0
3020: ST_TO_ADDR
// if Multiplayer then
3021: NOP4
3025: IFFALSE 3097
// begin if sheik then
3027: NOP4
3031: IFFALSE 3059
// begin hc_gallery :=  ;
3033: LD_ADDR_OWVAR 33
3037: PUSH
3038: LD_STRING 
3040: ST_TO_ADDR
// hc_class := class_desert_warior ;
3041: LD_ADDR_OWVAR 28
3045: PUSH
3046: LD_INT 11
3048: ST_TO_ADDR
// hc_sex := sex_male ;
3049: LD_ADDR_OWVAR 27
3053: PUSH
3054: LD_INT 1
3056: ST_TO_ADDR
// end else
3057: GO 3097
// begin hc_gallery := MULTIAVATARS ;
3059: LD_ADDR_OWVAR 33
3063: PUSH
3064: LD_STRING MULTIAVATARS
3066: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3067: LD_ADDR_OWVAR 34
3071: PUSH
3072: NOP4
3076: PPUSH
3077: NOP4
3081: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3082: LD_ADDR_OWVAR 27
3086: PUSH
3087: NOP4
3091: PPUSH
3092: NOP4
3096: ST_TO_ADDR
// end ; end ; end else
3097: GO 3162
// begin hc_name :=  ;
3099: LD_ADDR_OWVAR 26
3103: PUSH
3104: LD_STRING 
3106: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3107: LD_INT 1
3109: PPUSH
3110: LD_INT 2
3112: PPUSH
3113: NOP4
3117: PPUSH
3118: NOP4
3122: PPUSH
3123: NOP4
3127: PPUSH
3128: NOP4
// hc_importance := 0 ;
3132: LD_ADDR_OWVAR 32
3136: PUSH
3137: LD_INT 0
3139: ST_TO_ADDR
// if Multiplayer then
3140: NOP4
3144: IFFALSE 3162
// begin hc_gallery :=  ;
3146: LD_ADDR_OWVAR 33
3150: PUSH
3151: LD_STRING 
3153: ST_TO_ADDR
// hc_face_number := 0 ;
3154: LD_ADDR_OWVAR 34
3158: PUSH
3159: LD_INT 0
3161: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3162: NOP4
3166: PUSH
3167: NOP4
3171: ST_TO_ADDR
// if global_defined then
3172: NOP4
3176: IFFALSE 3316
// begin if ( cl = class_soldier ) then
3178: NOP4
3182: PUSH
3183: LD_INT 1
3185: EQUAL
3186: IFFALSE 3206
// j := i + soldiers_created else
3188: NOP4
3192: PUSH
3193: NOP4
3197: PUSH
3198: NOP4
3202: PLUS
3203: ST_TO_ADDR
3204: GO 3216
// j := i ;
3206: NOP4
3210: PUSH
3211: NOP4
3215: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3216: NOP4
3220: PUSH
3221: NOP4
3225: ARRAY
3226: PUSH
3227: NOP4
3231: ARRAY
3232: PPUSH
3233: NOP4
3237: PPUSH
3238: NOP4
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3242: NOP4
3246: PPUSH
3247: LD_INT 2
3249: PPUSH
3250: NOP4
3254: PUSH
3255: NOP4
3259: ARRAY
3260: PUSH
3261: NOP4
3265: ARRAY
3266: PPUSH
3267: LD_INT 2
3269: PPUSH
3270: NOP4
3274: PPUSH
3275: NOP4
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3279: NOP4
3283: PPUSH
3284: LD_INT 1
3286: PPUSH
3287: NOP4
3291: PUSH
3292: NOP4
3296: ARRAY
3297: PUSH
3298: NOP4
3302: ARRAY
3303: PPUSH
3304: LD_INT 1
3306: PPUSH
3307: NOP4
3311: PPUSH
3312: NOP4
// end ; if building then
3316: NOP4
3320: IFFALSE 3338
// PlaceHumanInUnit ( un , building ) else
3322: NOP4
3326: PPUSH
3327: NOP4
3331: PPUSH
3332: NOP4
3336: GO 3365
// PlaceUnitXYR ( un , x , y , r , false ) ;
3338: NOP4
3342: PPUSH
3343: NOP4
3347: PPUSH
3348: NOP4
3352: PPUSH
3353: NOP4
3357: PPUSH
3358: LD_INT 0
3360: PPUSH
3361: NOP4
// result := result ^ [ un ] ;
3365: NOP4
3369: PUSH
3370: NOP4
3374: PUSH
3375: NOP4
3379: PUSH
3380: EMPTY
3381: LIST
3382: ADD
3383: ST_TO_ADDR
// end ;
3384: GO 2935
3386: POP
3387: POP
// if not global_defined then
3388: NOP4
3392: NOT
3393: IFFALSE 3471
// if ( global_units >= cl ) then
3395: NOP4
3399: PUSH
3400: NOP4
3404: GREATEREQUAL
3405: IFFALSE 3446
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3407: NOP4
3411: PUSH
3412: NOP4
3416: PPUSH
3417: NOP4
3421: PPUSH
3422: NOP4
3426: PUSH
3427: NOP4
3431: ARRAY
3432: PUSH
3433: NOP4
3437: ADD
3438: PPUSH
3439: NOP4
3443: ST_TO_ADDR
3444: GO 3471
// global_units := Replace ( global_units , cl , result ) ;
3446: NOP4
3450: PUSH
3451: NOP4
3455: PPUSH
3456: NOP4
3460: PPUSH
3461: NOP4
3465: PPUSH
3466: NOP4
3470: ST_TO_ADDR
// end ;
3471: LD_VAR 0 7
3475: RET
// function prepare_mastodonts ( n ) ; var i ; begin
3476: LD_INT 0
3478: PPUSH
3479: PPUSH
// uc_side := 0 ;
3480: LD_ADDR_OWVAR 20
3484: PUSH
3485: LD_INT 0
3487: ST_TO_ADDR
// uc_nation := 0 ;
3488: LD_ADDR_OWVAR 21
3492: PUSH
3493: LD_INT 0
3495: ST_TO_ADDR
// vc_chassis := 31 ;
3496: LD_ADDR_OWVAR 37
3500: PUSH
3501: LD_INT 31
3503: ST_TO_ADDR
// vc_control := control_rider ;
3504: LD_ADDR_OWVAR 38
3508: PUSH
3509: LD_INT 4
3511: ST_TO_ADDR
// for i = 1 to n do
3512: NOP4
3516: PUSH
3517: DOUBLE
3518: LD_INT 1
3520: DEC
3521: ST_TO_ADDR
3522: NOP4
3526: PUSH
3527: FOR_TO
3528: IFFALSE 3547
// PlaceUnitArea ( CreateVehicle , MastodontSpawn , false ) ;
3530: NOP4
3534: PPUSH
3535: LD_INT 15
3537: PPUSH
3538: LD_INT 0
3540: PPUSH
3541: NOP4
3545: GO 3527
3547: POP
3548: POP
// end ;
3549: LD_VAR 0 2
3553: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3554: LD_INT 0
3556: PPUSH
3557: PPUSH
3558: PPUSH
3559: PPUSH
3560: PPUSH
3561: PPUSH
3562: PPUSH
3563: PPUSH
3564: PPUSH
// if side in [ 0 , 9 ] then
3565: NOP4
3569: PUSH
3570: LD_INT 0
3572: PUSH
3573: LD_INT 9
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: IN
3580: IFFALSE 3584
// exit ;
3582: GO 4601
// pos := Side_Positions [ side ] ;
3584: NOP4
3588: PUSH
3589: NOP4
3593: PUSH
3594: NOP4
3598: ARRAY
3599: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3600: LD_ADDR_OWVAR 21
3604: PUSH
3605: NOP4
3609: PUSH
3610: NOP4
3614: ARRAY
3615: ST_TO_ADDR
// uc_side := side ;
3616: LD_ADDR_OWVAR 20
3620: PUSH
3621: NOP4
3625: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3626: NOP4
3630: PUSH
3631: NOP4
3635: PUSH
3636: NOP4
3640: ARRAY
3641: PUSH
3642: LD_INT 1
3644: ARRAY
3645: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3646: NOP4
3650: PUSH
3651: NOP4
3655: PUSH
3656: NOP4
3660: ARRAY
3661: PUSH
3662: LD_INT 2
3664: ARRAY
3665: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3666: NOP4
3670: PUSH
3671: NOP4
3675: PUSH
3676: NOP4
3680: ARRAY
3681: PUSH
3682: LD_INT 3
3684: ARRAY
3685: ST_TO_ADDR
// if is_depot then
3686: NOP4
3690: IFFALSE 3823
// begin bc_type = b_depot ;
3692: LD_ADDR_OWVAR 42
3696: PUSH
3697: LD_INT 0
3699: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3700: NOP4
3704: PUSH
3705: NOP4
3709: PPUSH
3710: NOP4
3714: PPUSH
3715: NOP4
3719: PPUSH
3720: NOP4
3724: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3725: NOP4
3729: PPUSH
3730: LD_STRING @
3732: PUSH
3733: NOP4
3737: STR
3738: PPUSH
3739: NOP4
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3743: NOP4
3747: PPUSH
3748: NOP4
3752: PPUSH
3753: LD_INT 1
3755: PPUSH
3756: NOP4
3760: PUSH
3761: LD_INT 1
3763: ARRAY
3764: PPUSH
3765: NOP4
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3769: NOP4
3773: PPUSH
3774: NOP4
3778: PPUSH
3779: LD_INT 2
3781: PPUSH
3782: NOP4
3786: PUSH
3787: LD_INT 2
3789: ARRAY
3790: PPUSH
3791: NOP4
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3795: NOP4
3799: PPUSH
3800: NOP4
3804: PPUSH
3805: LD_INT 3
3807: PPUSH
3808: NOP4
3812: PUSH
3813: LD_INT 3
3815: ARRAY
3816: PPUSH
3817: NOP4
// end else
3821: GO 3967
// begin for i := 1 to 3 do
3823: NOP4
3827: PUSH
3828: DOUBLE
3829: LD_INT 1
3831: DEC
3832: ST_TO_ADDR
3833: LD_INT 3
3835: PUSH
3836: FOR_TO
3837: IFFALSE 3965
// begin r := starting_resources [ i ] ;
3839: NOP4
3843: PUSH
3844: NOP4
3848: PUSH
3849: NOP4
3853: ARRAY
3854: ST_TO_ADDR
// while r >= 10 do
3855: NOP4
3859: PUSH
3860: LD_INT 10
3862: GREATEREQUAL
3863: IFFALSE 3963
// if r > 50 then
3865: NOP4
3869: PUSH
3870: LD_INT 50
3872: GREATER
3873: IFFALSE 3919
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3875: NOP4
3879: PPUSH
3880: LD_INT 5
3882: PPUSH
3883: NOP4
3887: PPUSH
3888: NOP4
3892: PPUSH
3893: LD_INT 4
3895: PPUSH
3896: LD_INT 0
3898: PPUSH
3899: NOP4
// r := r - 50 ;
3903: NOP4
3907: PUSH
3908: NOP4
3912: PUSH
3913: LD_INT 50
3915: MINUS
3916: ST_TO_ADDR
// end else
3917: GO 3961
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3919: NOP4
3923: PPUSH
3924: NOP4
3928: PUSH
3929: LD_INT 10
3931: DIV
3932: PPUSH
3933: NOP4
3937: PPUSH
3938: NOP4
3942: PPUSH
3943: LD_INT 4
3945: PPUSH
3946: LD_INT 0
3948: PPUSH
3949: NOP4
// r := 0 ;
3953: NOP4
3957: PUSH
3958: LD_INT 0
3960: ST_TO_ADDR
// end ;
3961: GO 3855
// end ;
3963: GO 3836
3965: POP
3966: POP
// end ; for r in starting_crates do
3967: NOP4
3971: PUSH
3972: NOP4
3976: PUSH
3977: FOR_IN
3978: IFFALSE 4010
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3980: LD_INT 1
3982: PPUSH
3983: LD_INT 5
3985: PPUSH
3986: NOP4
3990: PPUSH
3991: NOP4
3995: PPUSH
3996: NOP4
4000: PPUSH
4001: LD_INT 0
4003: PPUSH
4004: NOP4
4008: GO 3977
4010: POP
4011: POP
// if def_morale_flags then
4012: NOP4
4016: IFFALSE 4155
// begin x := start_def [ pos ] [ 1 ] ;
4018: NOP4
4022: PUSH
4023: NOP4
4027: PUSH
4028: NOP4
4032: ARRAY
4033: PUSH
4034: LD_INT 1
4036: ARRAY
4037: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4038: NOP4
4042: PUSH
4043: NOP4
4047: PUSH
4048: NOP4
4052: ARRAY
4053: PUSH
4054: LD_INT 2
4056: ARRAY
4057: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4058: NOP4
4062: PPUSH
4063: NOP4
4067: PPUSH
4068: LD_INT 12
4070: PPUSH
4071: LD_INT 2
4073: PPUSH
4074: NOP4
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4078: NOP4
4082: PUSH
4083: NOP4
4087: PUSH
4088: NOP4
4092: PPUSH
4093: NOP4
4097: PPUSH
4098: NOP4
4102: PPUSH
4103: LD_INT 1
4105: PUSH
4106: LD_INT 100
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: PUSH
4113: LD_INT 2
4115: PUSH
4116: LD_INT 50
4118: PUSH
4119: EMPTY
4120: LIST
4121: LIST
4122: PUSH
4123: LD_INT 3
4125: PUSH
4126: LD_INT 20
4128: PUSH
4129: EMPTY
4130: LIST
4131: LIST
4132: PUSH
4133: LD_INT 20
4135: PUSH
4136: LD_INT 100
4138: PUSH
4139: EMPTY
4140: LIST
4141: LIST
4142: PUSH
4143: EMPTY
4144: LIST
4145: LIST
4146: LIST
4147: LIST
4148: PPUSH
4149: NOP4
4153: ADD
4154: ST_TO_ADDR
// end ; commander := true ;
4155: NOP4
4159: PUSH
4160: LD_INT 1
4162: ST_TO_ADDR
// soldiers_created := 0 ;
4163: NOP4
4167: PUSH
4168: LD_INT 0
4170: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4171: NOP4
4175: PUSH
4176: DOUBLE
4177: LD_INT 1
4179: DEC
4180: ST_TO_ADDR
4181: NOP4
4185: PUSH
4186: FOR_TO
4187: IFFALSE 4340
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4189: NOP4
4193: PUSH
4194: NOP4
4198: PUSH
4199: NOP4
4203: ARRAY
4204: PUSH
4205: NOP4
4209: ARRAY
4210: PUSH
4211: LD_INT 1
4213: ARRAY
4214: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4215: NOP4
4219: PUSH
4220: NOP4
4224: PUSH
4225: NOP4
4229: ARRAY
4230: PUSH
4231: NOP4
4235: ARRAY
4236: PUSH
4237: LD_INT 2
4239: ARRAY
4240: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4241: NOP4
4245: PUSH
4246: NOP4
4250: PUSH
4251: NOP4
4255: ARRAY
4256: PUSH
4257: NOP4
4261: ARRAY
4262: PUSH
4263: LD_INT 3
4265: ARRAY
4266: ST_TO_ADDR
// bc_type := b_breastwork ;
4267: LD_ADDR_OWVAR 42
4271: PUSH
4272: LD_INT 31
4274: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4275: NOP4
4279: PUSH
4280: NOP4
4284: PPUSH
4285: NOP4
4289: PPUSH
4290: NOP4
4294: PPUSH
4295: NOP4
4299: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4300: LD_INT 1
4302: PPUSH
4303: LD_INT 1
4305: PPUSH
4306: LD_INT 0
4308: PPUSH
4309: LD_INT 0
4311: PPUSH
4312: LD_INT 0
4314: PPUSH
4315: NOP4
4319: PPUSH
4320: NOP4
// soldiers_created := soldiers_created + 1 ;
4324: NOP4
4328: PUSH
4329: NOP4
4333: PUSH
4334: LD_INT 1
4336: PLUS
4337: ST_TO_ADDR
// end ;
4338: GO 4186
4340: POP
4341: POP
// x := start_def [ pos ] [ 1 ] ;
4342: NOP4
4346: PUSH
4347: NOP4
4351: PUSH
4352: NOP4
4356: ARRAY
4357: PUSH
4358: LD_INT 1
4360: ARRAY
4361: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4362: NOP4
4366: PUSH
4367: NOP4
4371: PUSH
4372: NOP4
4376: ARRAY
4377: PUSH
4378: LD_INT 2
4380: ARRAY
4381: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4382: NOP4
4386: PUSH
4387: NOP4
4391: MINUS
4392: PPUSH
4393: LD_INT 1
4395: PPUSH
4396: NOP4
4400: PPUSH
4401: NOP4
4405: PPUSH
4406: LD_INT 5
4408: PPUSH
4409: LD_INT 0
4411: PPUSH
4412: NOP4
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4416: NOP4
4420: PPUSH
4421: LD_INT 2
4423: PPUSH
4424: NOP4
4428: PPUSH
4429: NOP4
4433: PPUSH
4434: LD_INT 5
4436: PPUSH
4437: LD_INT 0
4439: PPUSH
4440: NOP4
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4444: NOP4
4448: PPUSH
4449: LD_INT 3
4451: PPUSH
4452: NOP4
4456: PPUSH
4457: NOP4
4461: PPUSH
4462: LD_INT 5
4464: PPUSH
4465: LD_INT 0
4467: PPUSH
4468: NOP4
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4472: NOP4
4476: PPUSH
4477: LD_INT 4
4479: PPUSH
4480: NOP4
4484: PPUSH
4485: NOP4
4489: PPUSH
4490: LD_INT 5
4492: PPUSH
4493: LD_INT 0
4495: PPUSH
4496: NOP4
// if def_siberite_detection then
4500: NOP4
4504: IFFALSE 4521
// SetTech ( tech_SibDet , side , state_researched ) ;
4506: LD_INT 20
4508: PPUSH
4509: NOP4
4513: PPUSH
4514: LD_INT 2
4516: PPUSH
4517: NOP4
// if def_siberite_bomb = 1 then
4521: NOP4
4525: PUSH
4526: LD_INT 1
4528: EQUAL
4529: IFFALSE 4563
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4531: LD_INT 25
4533: PPUSH
4534: NOP4
4538: PPUSH
4539: LD_INT 1
4541: PPUSH
4542: NOP4
// SetTech ( 73 , side , state_enabled ) ;
4546: LD_INT 73
4548: PPUSH
4549: NOP4
4553: PPUSH
4554: LD_INT 1
4556: PPUSH
4557: NOP4
// end else
4561: GO 4593
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4563: LD_INT 25
4565: PPUSH
4566: NOP4
4570: PPUSH
4571: LD_INT 0
4573: PPUSH
4574: NOP4
// SetTech ( 73 , side , state_disabled ) ;
4578: LD_INT 73
4580: PPUSH
4581: NOP4
4585: PPUSH
4586: LD_INT 0
4588: PPUSH
4589: NOP4
// end ; global_defined := true ;
4593: NOP4
4597: PUSH
4598: LD_INT 1
4600: ST_TO_ADDR
// end ;
4601: LD_VAR 0 2
4605: RET
// every 0 0$1 do
4606: GO 4608
4608: DISABLE
// if ( def_siberite_bomb > 1 ) then
4609: NOP4
4613: PUSH
4614: LD_INT 1
4616: GREATER
4617: IFFALSE 4632
// begin wait ( siberite_bomb_Delay ) ;
4619: NOP4
4623: PPUSH
4624: NOP4
// EnableSibFiss ;
4628: NOP4
// end ;
4632: END
// function EnableSibFiss ; var i ; begin
4633: LD_INT 0
4635: PPUSH
4636: PPUSH
// for i := 1 to 8 do
4637: NOP4
4641: PUSH
4642: DOUBLE
4643: LD_INT 1
4645: DEC
4646: ST_TO_ADDR
4647: LD_INT 8
4649: PUSH
4650: FOR_TO
4651: IFFALSE 4697
// if Side_Positions [ i ] then
4653: NOP4
4657: PUSH
4658: NOP4
4662: ARRAY
4663: IFFALSE 4695
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4665: LD_INT 25
4667: PPUSH
4668: NOP4
4672: PPUSH
4673: LD_INT 1
4675: PPUSH
4676: NOP4
// SetTech ( 73 , i , state_enabled ) ;
4680: LD_INT 73
4682: PPUSH
4683: NOP4
4687: PPUSH
4688: LD_INT 1
4690: PPUSH
4691: NOP4
// end ;
4695: GO 4650
4697: POP
4698: POP
// end ;
4699: LD_VAR 0 1
4703: RET
// function prepare_sides ; var i ; begin
4704: LD_INT 0
4706: PPUSH
4707: PPUSH
// global_units := [ ] ;
4708: NOP4
4712: PUSH
4713: EMPTY
4714: ST_TO_ADDR
// global_defined := false ;
4715: NOP4
4719: PUSH
4720: LD_INT 0
4722: ST_TO_ADDR
// CountClassMembers ;
4723: NOP4
// for i := 1 to 8 do
4727: NOP4
4731: PUSH
4732: DOUBLE
4733: LD_INT 1
4735: DEC
4736: ST_TO_ADDR
4737: LD_INT 8
4739: PUSH
4740: FOR_TO
4741: IFFALSE 4795
// if Side_Positions [ i ] then
4743: NOP4
4747: PUSH
4748: NOP4
4752: ARRAY
4753: IFFALSE 4793
// begin prepare_side ( i ) ;
4755: NOP4
4759: PPUSH
4760: NOP4
// if ( Game_Type = 12 ) and mastodont > 0 then
4764: NOP4
4768: PUSH
4769: LD_INT 12
4771: EQUAL
4772: PUSH
4773: NOP4
4777: PUSH
4778: LD_INT 0
4780: GREATER
4781: AND
4782: IFFALSE 4793
// prepare_mastodonts ( mastodont ) ;
4784: NOP4
4788: PPUSH
4789: NOP4
// end ;
4793: GO 4740
4795: POP
4796: POP
// end ;
4797: LD_VAR 0 1
4801: RET
// function CountClassMembers ; var Mode ; begin
4802: LD_INT 0
4804: PPUSH
4805: PPUSH
// if No_Mechs then
4806: NOP4
4810: IFFALSE 4822
// Mode := 2 else
4812: NOP4
4816: PUSH
4817: LD_INT 2
4819: ST_TO_ADDR
4820: GO 4830
// Mode := 1 ;
4822: NOP4
4826: PUSH
4827: LD_INT 1
4829: ST_TO_ADDR
// neng := number_of_people ;
4830: NOP4
4834: PUSH
4835: NOP4
4839: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4840: NOP4
4844: PUSH
4845: NOP4
4849: PUSH
4850: LD_INT 4
4852: PUSH
4853: LD_INT 3
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: PUSH
4860: NOP4
4864: ARRAY
4865: DIV
4866: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4867: NOP4
4871: PUSH
4872: NOP4
4876: LESS
4877: IFFALSE 4889
// nsol := number_of_breastworks ;
4879: NOP4
4883: PUSH
4884: NOP4
4888: ST_TO_ADDR
// neng := neng - nsol ;
4889: NOP4
4893: PUSH
4894: NOP4
4898: PUSH
4899: NOP4
4903: MINUS
4904: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4905: NOP4
4909: PUSH
4910: NOP4
4914: PUSH
4915: LD_INT 3
4917: PUSH
4918: LD_INT 2
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: PUSH
4925: NOP4
4929: ARRAY
4930: DIV
4931: ST_TO_ADDR
// if ( nsci < 1 ) then
4932: NOP4
4936: PUSH
4937: LD_INT 1
4939: LESS
4940: IFFALSE 4950
// nsci := 1 ;
4942: NOP4
4946: PUSH
4947: LD_INT 1
4949: ST_TO_ADDR
// neng := neng - nsci ;
4950: NOP4
4954: PUSH
4955: NOP4
4959: PUSH
4960: NOP4
4964: MINUS
4965: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4966: NOP4
4970: PUSH
4971: NOP4
4975: PUSH
4976: LD_INT 2
4978: DIV
4979: PUSH
4980: LD_INT 0
4982: PUSH
4983: EMPTY
4984: LIST
4985: LIST
4986: PUSH
4987: NOP4
4991: ARRAY
4992: ST_TO_ADDR
// neng := neng - nmech ;
4993: NOP4
4997: PUSH
4998: NOP4
5002: PUSH
5003: NOP4
5007: MINUS
5008: ST_TO_ADDR
// if ( neng < 1 ) then
5009: NOP4
5013: PUSH
5014: LD_INT 1
5016: LESS
5017: IFFALSE 5027
// neng := 1 ;
5019: NOP4
5023: PUSH
5024: LD_INT 1
5026: ST_TO_ADDR
// end ;
5027: LD_VAR 0 1
5031: RET
// function Init_Win_Condition ; begin
5032: LD_INT 0
5034: PPUSH
// if Team_Game then
5035: NOP4
5039: IFFALSE 5046
// enable ( 98 ) else
5041: LD_INT 98
5043: ENABLE_MARKED
5044: GO 5049
// enable ( 99 ) ;
5046: LD_INT 99
5048: ENABLE_MARKED
// case Game_Type of 3 :
5049: NOP4
5053: PUSH
5054: LD_INT 3
5056: DOUBLE
5057: EQUAL
5058: IFTRUE 5062
5060: GO 5068
5062: POP
// enable ( 100 ) ; end ;
5063: LD_INT 100
5065: ENABLE_MARKED
5066: GO 5069
5068: POP
// end ;
5069: LD_VAR 0 1
5073: RET
// starting begin disable ( 98 ) ;
5074: LD_INT 98
5076: DISABLE_MARKED
// disable ( 99 ) ;
5077: LD_INT 99
5079: DISABLE_MARKED
// disable ( 100 ) ;
5080: LD_INT 100
5082: DISABLE_MARKED
// disable ( 200 ) ;
5083: LD_INT 200
5085: DISABLE_MARKED
// disable ( 400 ) ;
5086: LD_INT 400
5088: DISABLE_MARKED
// disable ( 401 ) ;
5089: LD_INT 401
5091: DISABLE_MARKED
// mp_selectmsg := true ;
5092: LD_ADDR_OWVAR 13
5096: PUSH
5097: LD_INT 1
5099: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5100: NOP4
// init_map ;
5104: NOP4
// init_respawning ;
5108: NOP4
// set_shared_visions_and_alliances ;
5112: NOP4
// prepare_sides ;
5116: NOP4
// ShowTimer ;
5120: NOP4
// if ( Game_Type = 4 ) then
5124: NOP4
5128: PUSH
5129: LD_INT 4
5131: EQUAL
5132: IFFALSE 5138
// InitBloodGods ;
5134: NOP4
// music_nat := Side_Nations [ your_side ] ;
5138: LD_ADDR_OWVAR 71
5142: PUSH
5143: NOP4
5147: PUSH
5148: NOP4
5152: ARRAY
5153: ST_TO_ADDR
// if IAmSpec then
5154: NOP4
5158: IFFALSE 5194
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
5160: LD_INT 0
5162: PPUSH
5163: LD_INT 0
5165: PPUSH
5166: NOP4
5170: PPUSH
5171: LD_INT 32767
5173: NEG
5174: PPUSH
5175: NOP4
// CenterNowOnXY ( 104 , 69 ) ;
5179: LD_INT 104
5181: PPUSH
5182: LD_INT 69
5184: PPUSH
5185: NOP4
// enable ( 400 ) ;
5189: LD_INT 400
5191: ENABLE_MARKED
// end else
5192: GO 5248
// begin ResetFog ;
5194: NOP4
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5198: NOP4
5202: PUSH
5203: NOP4
5207: PUSH
5208: NOP4
5212: ARRAY
5213: ARRAY
5214: PUSH
5215: LD_INT 1
5217: ARRAY
5218: PPUSH
5219: NOP4
5223: PUSH
5224: NOP4
5228: PUSH
5229: NOP4
5233: ARRAY
5234: ARRAY
5235: PUSH
5236: LD_INT 2
5238: ARRAY
5239: PPUSH
5240: NOP4
// Init_Win_Condition ;
5244: NOP4
// end ; AnimateTrees ( true ) ;
5248: LD_INT 1
5250: PPUSH
5251: NOP4
// InitApeman ;
5255: NOP4
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
5259: NOP4
5263: PUSH
5264: LD_INT 9
5266: PUSH
5267: LD_INT 10
5269: PUSH
5270: LD_INT 11
5272: PUSH
5273: LD_INT 12
5275: PUSH
5276: LD_INT 13
5278: PUSH
5279: LD_INT 14
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: LIST
5286: LIST
5287: LIST
5288: LIST
5289: ST_TO_ADDR
// BeginBuildUp ;
5290: NOP4
// end ; end_of_file
5294: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5295: GO 5297
5297: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5298: LD_INT 4
5300: PPUSH
5301: LD_INT 5
5303: PPUSH
5304: NOP4
5308: PPUSH
5309: LD_INT 1
5311: PPUSH
5312: NOP4
// enable ;
5316: ENABLE
// end ;
5317: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5318: GO 5320
5320: DISABLE
5321: LD_INT 0
5323: PPUSH
5324: PPUSH
// begin case tick of 1 .. 1 1$0 :
5325: NOP4
5329: PUSH
5330: LD_INT 1
5332: DOUBLE
5333: GREATEREQUAL
5334: IFFALSE 5342
5336: LD_INT 2100
5338: DOUBLE
5339: LESSEQUAL
5340: IFTRUE 5344
5342: GO 5372
5344: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5345: NOP4
5349: PUSH
5350: LD_INT 100
5352: DIVREAL
5353: PUSH
5354: LD_INT 350
5356: PPUSH
5357: LD_INT 1050
5359: PPUSH
5360: NOP4
5364: MUL
5365: PPUSH
5366: NOP4
5370: GO 5674
5372: LD_INT 2100
5374: PUSH
5375: LD_INT 1
5377: PLUS
5378: DOUBLE
5379: GREATEREQUAL
5380: IFFALSE 5388
5382: LD_INT 10500
5384: DOUBLE
5385: LESSEQUAL
5386: IFTRUE 5390
5388: GO 5418
5390: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5391: NOP4
5395: PUSH
5396: LD_INT 100
5398: DIVREAL
5399: PUSH
5400: LD_INT 1050
5402: PPUSH
5403: LD_INT 1575
5405: PPUSH
5406: NOP4
5410: MUL
5411: PPUSH
5412: NOP4
5416: GO 5674
5418: LD_INT 10500
5420: PUSH
5421: LD_INT 1
5423: PLUS
5424: DOUBLE
5425: GREATEREQUAL
5426: IFFALSE 5434
5428: LD_INT 21000
5430: DOUBLE
5431: LESSEQUAL
5432: IFTRUE 5436
5434: GO 5464
5436: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5437: NOP4
5441: PUSH
5442: LD_INT 100
5444: DIVREAL
5445: PUSH
5446: LD_INT 1575
5448: PPUSH
5449: LD_INT 2100
5451: PPUSH
5452: NOP4
5456: MUL
5457: PPUSH
5458: NOP4
5462: GO 5674
5464: LD_INT 21000
5466: PUSH
5467: LD_INT 1
5469: PLUS
5470: DOUBLE
5471: GREATEREQUAL
5472: IFFALSE 5480
5474: LD_INT 42000
5476: DOUBLE
5477: LESSEQUAL
5478: IFTRUE 5482
5480: GO 5510
5482: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5483: NOP4
5487: PUSH
5488: LD_INT 100
5490: DIVREAL
5491: PUSH
5492: LD_INT 2100
5494: PPUSH
5495: LD_INT 2625
5497: PPUSH
5498: NOP4
5502: MUL
5503: PPUSH
5504: NOP4
5508: GO 5674
5510: LD_INT 42000
5512: PUSH
5513: LD_INT 1
5515: PLUS
5516: DOUBLE
5517: GREATEREQUAL
5518: IFFALSE 5526
5520: LD_INT 63000
5522: DOUBLE
5523: LESSEQUAL
5524: IFTRUE 5528
5526: GO 5556
5528: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5529: NOP4
5533: PUSH
5534: LD_INT 100
5536: DIVREAL
5537: PUSH
5538: LD_INT 2625
5540: PPUSH
5541: LD_INT 3150
5543: PPUSH
5544: NOP4
5548: MUL
5549: PPUSH
5550: NOP4
5554: GO 5674
5556: LD_INT 63000
5558: PUSH
5559: LD_INT 1
5561: PLUS
5562: DOUBLE
5563: GREATEREQUAL
5564: IFFALSE 5572
5566: LD_INT 105000
5568: DOUBLE
5569: LESSEQUAL
5570: IFTRUE 5574
5572: GO 5602
5574: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5575: NOP4
5579: PUSH
5580: LD_INT 100
5582: DIVREAL
5583: PUSH
5584: LD_INT 3150
5586: PPUSH
5587: LD_INT 3675
5589: PPUSH
5590: NOP4
5594: MUL
5595: PPUSH
5596: NOP4
5600: GO 5674
5602: LD_INT 105000
5604: PUSH
5605: LD_INT 1
5607: PLUS
5608: DOUBLE
5609: GREATEREQUAL
5610: IFFALSE 5618
5612: LD_INT 630000
5614: DOUBLE
5615: LESSEQUAL
5616: IFTRUE 5620
5618: GO 5648
5620: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
5621: NOP4
5625: PUSH
5626: LD_INT 100
5628: DIVREAL
5629: PUSH
5630: LD_INT 3675
5632: PPUSH
5633: LD_INT 4200
5635: PPUSH
5636: NOP4
5640: MUL
5641: PPUSH
5642: NOP4
5646: GO 5674
5648: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5649: NOP4
5653: PUSH
5654: LD_INT 100
5656: DIVREAL
5657: PUSH
5658: LD_INT 4200
5660: PPUSH
5661: LD_INT 5250
5663: PPUSH
5664: NOP4
5668: MUL
5669: PPUSH
5670: NOP4
// amount := Rand ( 3 , 5 ) ;
5674: NOP4
5678: PUSH
5679: LD_INT 3
5681: PPUSH
5682: LD_INT 5
5684: PPUSH
5685: NOP4
5689: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5690: NOP4
5694: PUSH
5695: NOP4
5699: PUSH
5700: LD_INT 0
5702: PUSH
5703: EMPTY
5704: LIST
5705: DIFF
5706: PUSH
5707: FOR_IN
5708: IFFALSE 5757
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5710: NOP4
5714: PPUSH
5715: NOP4
5719: PUSH
5720: NOP4
5724: ARRAY
5725: PUSH
5726: LD_INT 1
5728: ARRAY
5729: PPUSH
5730: NOP4
5734: PUSH
5735: NOP4
5739: ARRAY
5740: PUSH
5741: LD_INT 2
5743: ARRAY
5744: PPUSH
5745: LD_INT 20
5747: PPUSH
5748: LD_INT 1
5750: PPUSH
5751: NOP4
5755: GO 5707
5757: POP
5758: POP
// enable ;
5759: ENABLE
// end ; end_of_file
5760: PPOPN 2
5762: END
// every 20 20$00 trigger apemanNumber do
5763: NOP4
5767: IFFALSE 5800
5769: GO 5771
5771: DISABLE
// begin enable ;
5772: ENABLE
// if apeLevel >= 8 then
5773: NOP4
5777: PUSH
5778: LD_INT 8
5780: GREATEREQUAL
5781: IFFALSE 5786
// disable else
5783: DISABLE
5784: GO 5800
// apeLevel := apeLevel + 1 ;
5786: NOP4
5790: PUSH
5791: NOP4
5795: PUSH
5796: LD_INT 1
5798: PLUS
5799: ST_TO_ADDR
// end ;
5800: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5801: NOP4
5805: PUSH
5806: NOP4
5810: LESS
5811: IFFALSE 5951
5813: GO 5815
5815: DISABLE
5816: LD_INT 0
5818: PPUSH
5819: PPUSH
5820: PPUSH
5821: PPUSH
// begin enable ;
5822: ENABLE
// for i := 1 to apemanPos do
5823: NOP4
5827: PUSH
5828: DOUBLE
5829: LD_INT 1
5831: DEC
5832: ST_TO_ADDR
5833: NOP4
5837: PUSH
5838: FOR_TO
5839: IFFALSE 5949
// begin if apemanPlayerCount [ i ] then
5841: NOP4
5845: PUSH
5846: NOP4
5850: ARRAY
5851: IFFALSE 5947
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5853: NOP4
5857: PUSH
5858: NOP4
5862: ARRAY
5863: PUSH
5864: NOP4
5868: PUSH
5869: NOP4
5873: ARRAY
5874: GREATER
5875: IFFALSE 5947
// begin ape := PrepareApeman ;
5877: NOP4
5881: PUSH
5882: NOP4
5886: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5887: NOP4
5891: PPUSH
5892: NOP4
5896: PUSH
5897: NOP4
5901: ARRAY
5902: PPUSH
5903: LD_INT 0
5905: PPUSH
5906: NOP4
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5910: NOP4
5914: PUSH
5915: NOP4
5919: PPUSH
5920: NOP4
5924: PPUSH
5925: NOP4
5929: PUSH
5930: NOP4
5934: ARRAY
5935: PUSH
5936: NOP4
5940: UNION
5941: PPUSH
5942: NOP4
5946: ST_TO_ADDR
// end ; end ; end ;
5947: GO 5838
5949: POP
5950: POP
// end ;
5951: PPOPN 4
5953: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5954: LD_INT 0
5956: PPUSH
5957: PPUSH
5958: PPUSH
5959: PPUSH
5960: PPUSH
5961: PPUSH
5962: PPUSH
// playersAmount := 0 ;
5963: NOP4
5967: PUSH
5968: LD_INT 0
5970: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
5971: NOP4
5975: PUSH
5976: LD_INT 1
5978: PUSH
5979: LD_INT 2
5981: PUSH
5982: LD_INT 3
5984: PUSH
5985: LD_INT 4
5987: PUSH
5988: LD_INT 5
5990: PUSH
5991: LD_INT 6
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6002: NOP4
6006: PUSH
6007: LD_INT 0
6009: PUSH
6010: LD_INT 0
6012: PUSH
6013: LD_INT 0
6015: PUSH
6016: LD_INT 0
6018: PUSH
6019: LD_INT 0
6021: PUSH
6022: LD_INT 0
6024: PUSH
6025: LD_INT 0
6027: PUSH
6028: LD_INT 0
6030: PUSH
6031: EMPTY
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: ST_TO_ADDR
// for j = 1 to Side_Positions do
6041: NOP4
6045: PUSH
6046: DOUBLE
6047: LD_INT 1
6049: DEC
6050: ST_TO_ADDR
6051: NOP4
6055: PUSH
6056: FOR_TO
6057: IFFALSE 6124
// if Side_Positions [ j ] then
6059: NOP4
6063: PUSH
6064: NOP4
6068: ARRAY
6069: IFFALSE 6122
// begin playersAmount := playersAmount + 1 ;
6071: NOP4
6075: PUSH
6076: NOP4
6080: PUSH
6081: LD_INT 1
6083: PLUS
6084: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6085: NOP4
6089: PUSH
6090: NOP4
6094: PPUSH
6095: NOP4
6099: PPUSH
6100: NOP4
6104: PUSH
6105: NOP4
6109: PUSH
6110: NOP4
6114: ARRAY
6115: ARRAY
6116: PPUSH
6117: NOP4
6121: ST_TO_ADDR
// end ;
6122: GO 6056
6124: POP
6125: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6126: NOP4
6130: PUSH
6131: LD_INT 3
6133: PUSH
6134: NOP4
6138: MUL
6139: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6140: NOP4
6144: PUSH
6145: NOP4
6149: PUSH
6150: NOP4
6154: MUL
6155: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6156: NOP4
6160: PUSH
6161: NOP4
6165: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6166: NOP4
6170: PUSH
6171: LD_INT 0
6173: PUSH
6174: LD_INT 0
6176: PUSH
6177: LD_INT 0
6179: PUSH
6180: LD_INT 0
6182: PUSH
6183: LD_INT 0
6185: PUSH
6186: LD_INT 0
6188: PUSH
6189: LD_INT 0
6191: PUSH
6192: LD_INT 0
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6205: NOP4
6209: PUSH
6210: LD_INT 0
6212: PUSH
6213: LD_INT 0
6215: PUSH
6216: LD_INT 0
6218: PUSH
6219: LD_INT 0
6221: PUSH
6222: LD_INT 0
6224: PUSH
6225: LD_INT 0
6227: PUSH
6228: LD_INT 0
6230: PUSH
6231: LD_INT 0
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: ST_TO_ADDR
// apeLevel := 1 ;
6244: NOP4
6248: PUSH
6249: LD_INT 1
6251: ST_TO_ADDR
// if not apemanNumber then
6252: NOP4
6256: NOT
6257: IFFALSE 6261
// exit ;
6259: GO 6457
// for i := 1 to apemanPerPlayer do
6261: NOP4
6265: PUSH
6266: DOUBLE
6267: LD_INT 1
6269: DEC
6270: ST_TO_ADDR
6271: NOP4
6275: PUSH
6276: FOR_TO
6277: IFFALSE 6455
// begin for j := 1 to Side_Positions do
6279: NOP4
6283: PUSH
6284: DOUBLE
6285: LD_INT 1
6287: DEC
6288: ST_TO_ADDR
6289: NOP4
6293: PUSH
6294: FOR_TO
6295: IFFALSE 6451
// if Side_Positions [ j ] then
6297: NOP4
6301: PUSH
6302: NOP4
6306: ARRAY
6307: IFFALSE 6449
// begin pos := Side_Positions [ j ] ;
6309: NOP4
6313: PUSH
6314: NOP4
6318: PUSH
6319: NOP4
6323: ARRAY
6324: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6325: NOP4
6329: PUSH
6330: NOP4
6334: PPUSH
6335: NOP4
6339: PPUSH
6340: NOP4
6344: PUSH
6345: NOP4
6349: ARRAY
6350: PUSH
6351: LD_INT 1
6353: PLUS
6354: PPUSH
6355: NOP4
6359: ST_TO_ADDR
// ape := PrepareApeman ;
6360: NOP4
6364: PUSH
6365: NOP4
6369: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6370: NOP4
6374: PUSH
6375: NOP4
6379: PPUSH
6380: NOP4
6384: PPUSH
6385: NOP4
6389: PUSH
6390: NOP4
6394: ARRAY
6395: PPUSH
6396: NOP4
6400: PUSH
6401: NOP4
6405: ARRAY
6406: PUSH
6407: LD_INT 1
6409: PLUS
6410: PPUSH
6411: NOP4
6415: PPUSH
6416: NOP4
6420: PPUSH
6421: NOP4
6425: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6426: NOP4
6430: PPUSH
6431: NOP4
6435: PUSH
6436: NOP4
6440: ARRAY
6441: PPUSH
6442: LD_INT 0
6444: PPUSH
6445: NOP4
// end ;
6449: GO 6294
6451: POP
6452: POP
// end ;
6453: GO 6276
6455: POP
6456: POP
// end ;
6457: LD_VAR 0 1
6461: RET
// export function PrepareApeman ; var bonus ; begin
6462: LD_INT 0
6464: PPUSH
6465: PPUSH
// uc_side := 0 ;
6466: LD_ADDR_OWVAR 20
6470: PUSH
6471: LD_INT 0
6473: ST_TO_ADDR
// uc_nation := 0 ;
6474: LD_ADDR_OWVAR 21
6478: PUSH
6479: LD_INT 0
6481: ST_TO_ADDR
// InitHc ;
6482: NOP4
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6486: NOP4
6490: PUSH
6491: LD_INT 1
6493: NEG
6494: PUSH
6495: LD_INT 0
6497: PUSH
6498: LD_INT 1
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: LIST
6505: PUSH
6506: NOP4
6510: PUSH
6511: LD_INT 3
6513: MOD
6514: PUSH
6515: LD_INT 1
6517: PLUS
6518: ARRAY
6519: ST_TO_ADDR
// hc_class := class_apeman ;
6520: LD_ADDR_OWVAR 28
6524: PUSH
6525: LD_INT 12
6527: ST_TO_ADDR
// hc_gallery :=  ;
6528: LD_ADDR_OWVAR 33
6532: PUSH
6533: LD_STRING 
6535: ST_TO_ADDR
// hc_name :=  ;
6536: LD_ADDR_OWVAR 26
6540: PUSH
6541: LD_STRING 
6543: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6544: LD_ADDR_OWVAR 31
6548: PUSH
6549: NOP4
6553: PUSH
6554: NOP4
6558: PLUS
6559: PUSH
6560: NOP4
6564: PUSH
6565: NOP4
6569: PLUS
6570: PUSH
6571: NOP4
6575: PUSH
6576: NOP4
6580: PLUS
6581: PUSH
6582: NOP4
6586: PUSH
6587: NOP4
6591: PLUS
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6599: LD_ADDR_OWVAR 35
6603: PUSH
6604: LD_INT 10
6606: PUSH
6607: NOP4
6611: MUL
6612: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6613: LD_ADDR_OWVAR 29
6617: PUSH
6618: LD_INT 12
6620: PUSH
6621: LD_INT 10
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: ST_TO_ADDR
// result := CreateHuman ;
6628: NOP4
6632: PUSH
6633: NOP4
6637: ST_TO_ADDR
// end ;
6638: LD_VAR 0 1
6642: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6643: LD_INT 0
6645: PPUSH
6646: PPUSH
6647: PPUSH
// if not ape then
6648: NOP4
6652: NOT
6653: IFFALSE 6657
// exit ;
6655: GO 6782
// side := GetSide ( ape ) ;
6657: NOP4
6661: PUSH
6662: NOP4
6666: PPUSH
6667: NOP4
6671: ST_TO_ADDR
// if not side then
6672: NOP4
6676: NOT
6677: IFFALSE 6731
// begin for i = 1 to apemanPos do
6679: NOP4
6683: PUSH
6684: DOUBLE
6685: LD_INT 1
6687: DEC
6688: ST_TO_ADDR
6689: NOP4
6693: PUSH
6694: FOR_TO
6695: IFFALSE 6729
// if ape in apemanPos [ i ] then
6697: NOP4
6701: PUSH
6702: NOP4
6706: PUSH
6707: NOP4
6711: ARRAY
6712: IN
6713: IFFALSE 6727
// begin side := i ;
6715: NOP4
6719: PUSH
6720: NOP4
6724: ST_TO_ADDR
// break ;
6725: GO 6729
// end ;
6727: GO 6694
6729: POP
6730: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6731: NOP4
6735: PUSH
6736: NOP4
6740: PPUSH
6741: NOP4
6745: PPUSH
6746: NOP4
6750: PUSH
6751: NOP4
6755: ARRAY
6756: PUSH
6757: NOP4
6761: DIFF
6762: PPUSH
6763: NOP4
6767: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6768: NOP4
6772: PUSH
6773: NOP4
6777: PUSH
6778: LD_INT 1
6780: MINUS
6781: ST_TO_ADDR
// end ; end_of_file
6782: LD_VAR 0 2
6786: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6787: NOP4
6791: PPUSH
6792: NOP4
6796: PUSH
6797: LD_INT 0
6799: PUSH
6800: LD_INT 1
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: IN
6807: IFFALSE 6832
// SetBName ( b , @ & GetSide ( b ) ) ;
6809: NOP4
6813: PPUSH
6814: LD_STRING @
6816: PUSH
6817: NOP4
6821: PPUSH
6822: NOP4
6826: STR
6827: PPUSH
6828: NOP4
// end ;
6832: PPOPN 2
6834: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6835: NOP4
6839: PPUSH
6840: NOP4
6844: PUSH
6845: LD_INT 0
6847: PUSH
6848: LD_INT 1
6850: PUSH
6851: EMPTY
6852: LIST
6853: LIST
6854: IN
6855: IFFALSE 6880
// SetBName ( b , @ & GetSide ( b ) ) ;
6857: NOP4
6861: PPUSH
6862: LD_STRING @
6864: PUSH
6865: NOP4
6869: PPUSH
6870: NOP4
6874: STR
6875: PPUSH
6876: NOP4
// end ;
6880: PPOPN 3
6882: END
// on VehicleConstructed ( veh , fac ) do var side ;
6883: LD_INT 0
6885: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6886: NOP4
6890: PPUSH
6891: NOP4
6895: PUSH
6896: LD_INT 5
6898: EQUAL
6899: IFFALSE 7041
// begin side := GetSide ( veh ) ;
6901: NOP4
6905: PUSH
6906: NOP4
6910: PPUSH
6911: NOP4
6915: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6916: NOP4
6920: PUSH
6921: NOP4
6925: PPUSH
6926: NOP4
6930: PPUSH
6931: NOP4
6935: PUSH
6936: NOP4
6940: ARRAY
6941: PPUSH
6942: LD_INT 52
6944: PUSH
6945: EMPTY
6946: LIST
6947: PPUSH
6948: NOP4
6952: PUSH
6953: LD_INT 22
6955: PUSH
6956: NOP4
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: LD_INT 2
6967: PUSH
6968: LD_INT 33
6970: PUSH
6971: LD_INT 5
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: PUSH
6978: LD_INT 25
6980: PUSH
6981: LD_INT 12
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: PUSH
6988: LD_INT 25
6990: PUSH
6991: LD_INT 15
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: PUSH
6998: LD_INT 25
7000: PUSH
7001: LD_INT 16
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: PUSH
7008: LD_INT 25
7010: PUSH
7011: LD_INT 17
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: PPUSH
7030: NOP4
7034: UNION
7035: PPUSH
7036: NOP4
7040: ST_TO_ADDR
// end ; end ;
7041: PPOPN 3
7043: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7044: LD_INT 0
7046: PPUSH
7047: PPUSH
7048: PPUSH
7049: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7050: NOP4
7054: PPUSH
7055: NOP4
7059: PUSH
7060: LD_INT 12
7062: PUSH
7063: LD_INT 15
7065: PUSH
7066: LD_INT 17
7068: PUSH
7069: LD_INT 16
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: LIST
7076: LIST
7077: IN
7078: PUSH
7079: NOP4
7083: PPUSH
7084: NOP4
7088: PUSH
7089: LD_INT 5
7091: EQUAL
7092: OR
7093: IFFALSE 7104
// ApeKilled ( j ) ;
7095: NOP4
7099: PPUSH
7100: NOP4
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7104: NOP4
7108: PPUSH
7109: NOP4
7113: PUSH
7114: LD_INT 0
7116: PUSH
7117: LD_INT 1
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: IN
7124: IFFALSE 7206
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7126: NOP4
7130: PUSH
7131: NOP4
7135: PUSH
7136: NOP4
7140: PPUSH
7141: NOP4
7145: ARRAY
7146: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7147: NOP4
7151: PUSH
7152: NOP4
7156: PUSH
7157: NOP4
7161: ARRAY
7162: PUSH
7163: LD_INT 1
7165: ARRAY
7166: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7167: NOP4
7171: PUSH
7172: NOP4
7176: PUSH
7177: NOP4
7181: ARRAY
7182: PUSH
7183: LD_INT 2
7185: ARRAY
7186: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7187: NOP4
7191: PPUSH
7192: NOP4
7196: PPUSH
7197: NOP4
7201: PPUSH
7202: NOP4
// end ; end ;
7206: PPOPN 5
7208: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7209: NOP4
7213: PPUSH
7214: NOP4
7218: PPUSH
7219: NOP4
7223: PPUSH
7224: NOP4
7228: PPUSH
7229: NOP4
7233: PPOPN 3
7235: END
// every 0 0$1 marked 100 do var i , base , pom , filter , sib_mined ;
7236: GO 7238
7238: DISABLE
7239: LD_INT 0
7241: PPUSH
7242: PPUSH
7243: PPUSH
7244: PPUSH
7245: PPUSH
// begin sib_mined := [ ] ;
7246: NOP4
7250: PUSH
7251: EMPTY
7252: ST_TO_ADDR
// for i := 1 to 8 do
7253: NOP4
7257: PUSH
7258: DOUBLE
7259: LD_INT 1
7261: DEC
7262: ST_TO_ADDR
7263: LD_INT 8
7265: PUSH
7266: FOR_TO
7267: IFFALSE 7423
// if Side_Positions [ i ] then
7269: NOP4
7273: PUSH
7274: NOP4
7278: ARRAY
7279: IFFALSE 7407
// begin filter := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7281: NOP4
7285: PUSH
7286: LD_INT 22
7288: PUSH
7289: NOP4
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: PUSH
7298: LD_INT 2
7300: PUSH
7301: LD_INT 30
7303: PUSH
7304: LD_INT 0
7306: PUSH
7307: EMPTY
7308: LIST
7309: LIST
7310: PUSH
7311: LD_INT 30
7313: PUSH
7314: LD_INT 1
7316: PUSH
7317: EMPTY
7318: LIST
7319: LIST
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: LIST
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: PPUSH
7330: NOP4
7334: ST_TO_ADDR
// pom := 0 ;
7335: NOP4
7339: PUSH
7340: LD_INT 0
7342: ST_TO_ADDR
// for base in filter do
7343: NOP4
7347: PUSH
7348: NOP4
7352: PUSH
7353: FOR_IN
7354: IFFALSE 7387
// pom := pom + GetResourceType ( GetBase ( base ) , mat_siberit ) ;
7356: NOP4
7360: PUSH
7361: NOP4
7365: PUSH
7366: NOP4
7370: PPUSH
7371: NOP4
7375: PPUSH
7376: LD_INT 3
7378: PPUSH
7379: NOP4
7383: PLUS
7384: ST_TO_ADDR
7385: GO 7353
7387: POP
7388: POP
// sib_mined := sib_mined ^ pom ;
7389: NOP4
7393: PUSH
7394: NOP4
7398: PUSH
7399: NOP4
7403: ADD
7404: ST_TO_ADDR
// end else
7405: GO 7421
// sib_mined := sib_mined ^ 0 ;
7407: NOP4
7411: PUSH
7412: NOP4
7416: PUSH
7417: LD_INT 0
7419: ADD
7420: ST_TO_ADDR
7421: GO 7266
7423: POP
7424: POP
// if not def_public_score then
7425: NOP4
7429: NOT
7430: IFFALSE 7520
// begin ExtraStrings := [ ] ;
7432: NOP4
7436: PUSH
7437: EMPTY
7438: ST_TO_ADDR
// for i := 1 to 8 do
7439: NOP4
7443: PUSH
7444: DOUBLE
7445: LD_INT 1
7447: DEC
7448: ST_TO_ADDR
7449: LD_INT 8
7451: PUSH
7452: FOR_TO
7453: IFFALSE 7516
// if Side_Positions [ i ] then
7455: NOP4
7459: PUSH
7460: NOP4
7464: ARRAY
7465: IFFALSE 7514
// ExtraStrings := ExtraStrings ^ [ #AlienBase-MinedPublic , i , i , sib_mined [ i ] , amount_of_siberit ] ;
7467: NOP4
7471: PUSH
7472: NOP4
7476: PUSH
7477: LD_STRING #AlienBase-MinedPublic
7479: PUSH
7480: NOP4
7484: PUSH
7485: NOP4
7489: PUSH
7490: NOP4
7494: PUSH
7495: NOP4
7499: ARRAY
7500: PUSH
7501: NOP4
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: LIST
7512: ADD
7513: ST_TO_ADDR
7514: GO 7452
7516: POP
7517: POP
// end else
7518: GO 7549
// ExtraStrings := [ #AlienBase-Mined , sib_mined [ Your_Side ] , amount_of_siberit ] ;
7520: NOP4
7524: PUSH
7525: LD_STRING #AlienBase-Mined
7527: PUSH
7528: NOP4
7532: PUSH
7533: NOP4
7537: ARRAY
7538: PUSH
7539: NOP4
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: LIST
7548: ST_TO_ADDR
// for i := 1 to 8 do
7549: NOP4
7553: PUSH
7554: DOUBLE
7555: LD_INT 1
7557: DEC
7558: ST_TO_ADDR
7559: LD_INT 8
7561: PUSH
7562: FOR_TO
7563: IFFALSE 7620
// if sib_mined [ i ] >= amount_of_siberit then
7565: NOP4
7569: PUSH
7570: NOP4
7574: ARRAY
7575: PUSH
7576: NOP4
7580: GREATEREQUAL
7581: IFFALSE 7618
// begin wait ( 0 0$1 ) ;
7583: LD_INT 35
7585: PPUSH
7586: NOP4
// if sib_mined [ your_side ] >= amount_of_siberit then
7590: NOP4
7594: PUSH
7595: NOP4
7599: ARRAY
7600: PUSH
7601: NOP4
7605: GREATEREQUAL
7606: IFFALSE 7614
// YouWinInMultiplayer else
7608: NOP4
7612: GO 7618
// YouLostInMultiplayer ;
7614: NOP4
// end ;
7618: GO 7562
7620: POP
7621: POP
// enable ;
7622: ENABLE
// end ; end_of_file
7623: PPOPN 5
7625: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7626: LD_INT 0
7628: PPUSH
7629: PPUSH
// for un in battle_flags_id do
7630: NOP4
7634: PUSH
7635: NOP4
7639: PUSH
7640: FOR_IN
7641: IFFALSE 7716
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7643: NOP4
7647: PPUSH
7648: LD_INT 1
7650: PUSH
7651: NOP4
7655: PUSH
7656: EMPTY
7657: LIST
7658: LIST
7659: PUSH
7660: LD_INT 2
7662: PUSH
7663: NOP4
7667: PUSH
7668: LD_INT 2
7670: DIV
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PUSH
7676: LD_INT 3
7678: PUSH
7679: NOP4
7683: PUSH
7684: LD_INT 5
7686: DIV
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: PUSH
7692: LD_INT 20
7694: PUSH
7695: NOP4
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: PPUSH
7710: NOP4
7714: GO 7640
7716: POP
7717: POP
// end ;
7718: LD_VAR 0 1
7722: RET
// every 1 do var un ;
7723: GO 7725
7725: DISABLE
7726: LD_INT 0
7728: PPUSH
// begin if not def_morale_flags then
7729: NOP4
7733: NOT
7734: IFFALSE 7738
// exit ;
7736: GO 7815
// if not morale_decreasing_time then
7738: NOP4
7742: NOT
7743: IFFALSE 7747
// exit ;
7745: GO 7815
// strength = 100 ;
7747: NOP4
7751: PUSH
7752: LD_INT 100
7754: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7755: NOP4
7759: PPUSH
7760: NOP4
// strength := strength - 1 ;
7764: NOP4
7768: PUSH
7769: NOP4
7773: PUSH
7774: LD_INT 1
7776: MINUS
7777: ST_TO_ADDR
// Update_Flags ;
7778: NOP4
// until not strength ;
7782: NOP4
7786: NOT
7787: IFFALSE 7755
// for un in battle_flags_id do
7789: NOP4
7793: PUSH
7794: NOP4
7798: PUSH
7799: FOR_IN
7800: IFFALSE 7813
// KillBattleFlag ( un ) ;
7802: NOP4
7806: PPUSH
7807: NOP4
7811: GO 7799
7813: POP
7814: POP
// end ; end_of_file
7815: PPOPN 1
7817: END
// var BloodGods , BloodGods_LastKills , BloodGods_CurrentKills , BloodGods_Positions ; every 0 0$3 marked 200 do var x ;
7818: GO 7820
7820: DISABLE
7821: LD_INT 0
7823: PPUSH
// begin enable ;
7824: ENABLE
// for x := 1 to 8 do
7825: NOP4
7829: PUSH
7830: DOUBLE
7831: LD_INT 1
7833: DEC
7834: ST_TO_ADDR
7835: LD_INT 8
7837: PUSH
7838: FOR_TO
7839: IFFALSE 7923
// if ( BloodGods_CurrentKills [ x ] > 5 ) and ( BloodGods [ x ] = - 1 ) then
7841: NOP4
7845: PUSH
7846: NOP4
7850: ARRAY
7851: PUSH
7852: LD_INT 5
7854: GREATER
7855: PUSH
7856: NOP4
7860: PUSH
7861: NOP4
7865: ARRAY
7866: PUSH
7867: LD_INT 1
7869: NEG
7870: EQUAL
7871: AND
7872: IFFALSE 7921
// begin BloodGods_LastKills := Replace ( BloodGods_LastKills , x , BloodGods_LastKills [ x ] + 6 ) ;
7874: NOP4
7878: PUSH
7879: NOP4
7883: PPUSH
7884: NOP4
7888: PPUSH
7889: NOP4
7893: PUSH
7894: NOP4
7898: ARRAY
7899: PUSH
7900: LD_INT 6
7902: PLUS
7903: PPUSH
7904: NOP4
7908: ST_TO_ADDR
// AwakenBloodGod ( x , false ) ;
7909: NOP4
7913: PPUSH
7914: LD_INT 0
7916: PPUSH
7917: NOP4
// end ;
7921: GO 7838
7923: POP
7924: POP
// end ;
7925: PPOPN 1
7927: END
// every 0 0$1 marked 200 do var BGL , x ;
7928: GO 7930
7930: DISABLE
7931: LD_INT 0
7933: PPUSH
7934: PPUSH
// begin enable ;
7935: ENABLE
// for x := 1 to 8 do
7936: NOP4
7940: PUSH
7941: DOUBLE
7942: LD_INT 1
7944: DEC
7945: ST_TO_ADDR
7946: LD_INT 8
7948: PUSH
7949: FOR_TO
7950: IFFALSE 8081
// if ( BloodGods [ x ] > - 1 ) and IsLive ( BloodGods [ x ] ) then
7952: NOP4
7956: PUSH
7957: NOP4
7961: ARRAY
7962: PUSH
7963: LD_INT 1
7965: NEG
7966: GREATER
7967: PUSH
7968: NOP4
7972: PUSH
7973: NOP4
7977: ARRAY
7978: PPUSH
7979: NOP4
7983: AND
7984: IFFALSE 8079
// begin BGL := GetLives ( BloodGods [ x ] ) ;
7986: NOP4
7990: PUSH
7991: NOP4
7995: PUSH
7996: NOP4
8000: ARRAY
8001: PPUSH
8002: NOP4
8006: ST_TO_ADDR
// if ( BGL < 1000 ) and ( BGL > 100 ) then
8007: NOP4
8011: PUSH
8012: LD_INT 1000
8014: LESS
8015: PUSH
8016: NOP4
8020: PUSH
8021: LD_INT 100
8023: GREATER
8024: AND
8025: IFFALSE 8079
// begin BGL := BGL + 10 ;
8027: NOP4
8031: PUSH
8032: NOP4
8036: PUSH
8037: LD_INT 10
8039: PLUS
8040: ST_TO_ADDR
// if BGL > 1000 then
8041: NOP4
8045: PUSH
8046: LD_INT 1000
8048: GREATER
8049: IFFALSE 8059
// BGL := 1000 ;
8051: NOP4
8055: PUSH
8056: LD_INT 1000
8058: ST_TO_ADDR
// SetLives ( BloodGods [ x ] , BGL ) ;
8059: NOP4
8063: PUSH
8064: NOP4
8068: ARRAY
8069: PPUSH
8070: NOP4
8074: PPUSH
8075: NOP4
// end ; end ;
8079: GO 7949
8081: POP
8082: POP
// end ;
8083: PPOPN 2
8085: END
// every 0 0$1 marked 200 do
8086: GO 8088
8088: DISABLE
// begin DisplayTimeWithKills ;
8089: NOP4
// enable ;
8093: ENABLE
// end ;
8094: END
// function AwakenBloodGod ( side , NoDialog ) ; begin
8095: LD_INT 0
8097: PPUSH
// uc_direction := Rand ( 0 , 5 ) ;
8098: LD_ADDR_OWVAR 24
8102: PUSH
8103: LD_INT 0
8105: PPUSH
8106: LD_INT 5
8108: PPUSH
8109: NOP4
8113: ST_TO_ADDR
// PrepareHuman ( 1 , class_soldier , 15 ) ;
8114: LD_INT 1
8116: PPUSH
8117: LD_INT 1
8119: PPUSH
8120: LD_INT 15
8122: PPUSH
8123: NOP4
// hc_importance := 106 ;
8127: LD_ADDR_OWVAR 32
8131: PUSH
8132: LD_INT 106
8134: ST_TO_ADDR
// hc_name := Blood God of  & mp_sides_players_names [ side ] ;
8135: LD_ADDR_OWVAR 26
8139: PUSH
8140: LD_STRING Blood God of 
8142: PUSH
8143: NOP4
8147: PUSH
8148: NOP4
8152: ARRAY
8153: STR
8154: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
8155: LD_ADDR_OWVAR 21
8159: PUSH
8160: NOP4
8164: PUSH
8165: NOP4
8169: ARRAY
8170: ST_TO_ADDR
// uc_side := side ;
8171: LD_ADDR_OWVAR 20
8175: PUSH
8176: NOP4
8180: ST_TO_ADDR
// hc_noskilllimit := true ;
8181: LD_ADDR_OWVAR 76
8185: PUSH
8186: LD_INT 1
8188: ST_TO_ADDR
// hc_agressivity := 50 ;
8189: LD_ADDR_OWVAR 35
8193: PUSH
8194: LD_INT 50
8196: ST_TO_ADDR
// BloodGods := Replace ( BloodGods , Side , CreateHuman ) ;
8197: NOP4
8201: PUSH
8202: NOP4
8206: PPUSH
8207: NOP4
8211: PPUSH
8212: NOP4
8216: PPUSH
8217: NOP4
8221: ST_TO_ADDR
// PlaceUnitXYR ( BloodGods [ side ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 1 ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 2 ] , 10 , false ) ;
8222: NOP4
8226: PUSH
8227: NOP4
8231: ARRAY
8232: PPUSH
8233: NOP4
8237: PUSH
8238: NOP4
8242: PUSH
8243: NOP4
8247: ARRAY
8248: ARRAY
8249: PUSH
8250: LD_INT 1
8252: ARRAY
8253: PPUSH
8254: NOP4
8258: PUSH
8259: NOP4
8263: PUSH
8264: NOP4
8268: ARRAY
8269: ARRAY
8270: PUSH
8271: LD_INT 2
8273: ARRAY
8274: PPUSH
8275: LD_INT 10
8277: PPUSH
8278: LD_INT 0
8280: PPUSH
8281: NOP4
// SetAttr ( BloodGods [ side ] , attr_stamina , 300 ) ;
8285: NOP4
8289: PUSH
8290: NOP4
8294: ARRAY
8295: PPUSH
8296: LD_INT 1
8298: PPUSH
8299: LD_INT 300
8301: PPUSH
8302: NOP4
// if not NoDialog then
8306: NOP4
8310: NOT
8311: IFFALSE 8331
// SayRadio ( BloodGods [ side ] , DLAwaken ) ;
8313: NOP4
8317: PUSH
8318: NOP4
8322: ARRAY
8323: PPUSH
8324: LD_STRING DLAwaken
8326: PPUSH
8327: NOP4
// end ;
8331: LD_VAR 0 3
8335: RET
// function DisplayTimeWithKills ; var x ; begin
8336: LD_INT 0
8338: PPUSH
8339: PPUSH
// ExtraStrings :=  ;
8340: NOP4
8344: PUSH
8345: LD_STRING 
8347: ST_TO_ADDR
// for x = 1 to Side_Positions do
8348: NOP4
8352: PUSH
8353: DOUBLE
8354: LD_INT 1
8356: DEC
8357: ST_TO_ADDR
8358: NOP4
8362: PUSH
8363: FOR_TO
8364: IFFALSE 8597
// if Side_Positions [ x ] then
8366: NOP4
8370: PUSH
8371: NOP4
8375: ARRAY
8376: IFFALSE 8595
// begin BloodGods_CurrentKills := Replace ( BloodGods_CurrentKills , x , GetHumansKilled ( x ) - BloodGods_LastKills [ x ] ) ;
8378: NOP4
8382: PUSH
8383: NOP4
8387: PPUSH
8388: NOP4
8392: PPUSH
8393: NOP4
8397: PPUSH
8398: NOP4
8402: PUSH
8403: NOP4
8407: PUSH
8408: NOP4
8412: ARRAY
8413: MINUS
8414: PPUSH
8415: NOP4
8419: ST_TO_ADDR
// if ( BloodGods [ x ] > - 1 ) and ( IsLive ( BloodGods [ x ] ) ) then
8420: NOP4
8424: PUSH
8425: NOP4
8429: ARRAY
8430: PUSH
8431: LD_INT 1
8433: NEG
8434: GREATER
8435: PUSH
8436: NOP4
8440: PUSH
8441: NOP4
8445: ARRAY
8446: PPUSH
8447: NOP4
8451: AND
8452: IFFALSE 8485
// ExtraStrings = ExtraStrings ^ [ #godawoken , x , x ] else
8454: NOP4
8458: PUSH
8459: NOP4
8463: PUSH
8464: LD_STRING #godawoken
8466: PUSH
8467: NOP4
8471: PUSH
8472: NOP4
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: LIST
8481: ADD
8482: ST_TO_ADDR
8483: GO 8595
// if ( BloodGods [ x ] > - 1 ) and ( IsDead ( BloodGods [ x ] ) ) then
8485: NOP4
8489: PUSH
8490: NOP4
8494: ARRAY
8495: PUSH
8496: LD_INT 1
8498: NEG
8499: GREATER
8500: PUSH
8501: NOP4
8505: PUSH
8506: NOP4
8510: ARRAY
8511: PPUSH
8512: NOP4
8516: AND
8517: IFFALSE 8550
// ExtraStrings = ExtraStrings ^ [ #goddied , x , x ] else
8519: NOP4
8523: PUSH
8524: NOP4
8528: PUSH
8529: LD_STRING #goddied
8531: PUSH
8532: NOP4
8536: PUSH
8537: NOP4
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: LIST
8546: ADD
8547: ST_TO_ADDR
8548: GO 8595
// ExtraStrings = ExtraStrings ^ [ #godssacrifise , x , x , BloodGods_CurrentKills [ x ] , 6 ] end ;
8550: NOP4
8554: PUSH
8555: NOP4
8559: PUSH
8560: LD_STRING #godssacrifise
8562: PUSH
8563: NOP4
8567: PUSH
8568: NOP4
8572: PUSH
8573: NOP4
8577: PUSH
8578: NOP4
8582: ARRAY
8583: PUSH
8584: LD_INT 6
8586: PUSH
8587: EMPTY
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: ADD
8594: ST_TO_ADDR
8595: GO 8363
8597: POP
8598: POP
// end ;
8599: LD_VAR 0 1
8603: RET
// export function InitBloodGods ; begin
8604: LD_INT 0
8606: PPUSH
// BloodGods = [ - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 ] ;
8607: NOP4
8611: PUSH
8612: LD_INT 1
8614: NEG
8615: PUSH
8616: LD_INT 1
8618: NEG
8619: PUSH
8620: LD_INT 1
8622: NEG
8623: PUSH
8624: LD_INT 1
8626: NEG
8627: PUSH
8628: LD_INT 1
8630: NEG
8631: PUSH
8632: LD_INT 1
8634: NEG
8635: PUSH
8636: LD_INT 1
8638: NEG
8639: PUSH
8640: LD_INT 1
8642: NEG
8643: PUSH
8644: EMPTY
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: ST_TO_ADDR
// BloodGods_LastKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8654: NOP4
8658: PUSH
8659: LD_INT 0
8661: PUSH
8662: LD_INT 0
8664: PUSH
8665: LD_INT 0
8667: PUSH
8668: LD_INT 0
8670: PUSH
8671: LD_INT 0
8673: PUSH
8674: LD_INT 0
8676: PUSH
8677: LD_INT 0
8679: PUSH
8680: LD_INT 0
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: ST_TO_ADDR
// BloodGods_CurrentKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8693: NOP4
8697: PUSH
8698: LD_INT 0
8700: PUSH
8701: LD_INT 0
8703: PUSH
8704: LD_INT 0
8706: PUSH
8707: LD_INT 0
8709: PUSH
8710: LD_INT 0
8712: PUSH
8713: LD_INT 0
8715: PUSH
8716: LD_INT 0
8718: PUSH
8719: LD_INT 0
8721: PUSH
8722: EMPTY
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: ST_TO_ADDR
// BloodGods_Positions = [ [ 60 , 47 ] , [ 82 , 26 ] , [ 124 , 45 ] , [ 147 , 90 ] , [ 126 , 112 ] , [ 84 , 92 ] , [ 106 , 73 ] , [ 106 , 73 ] ] ;
8732: NOP4
8736: PUSH
8737: LD_INT 60
8739: PUSH
8740: LD_INT 47
8742: PUSH
8743: EMPTY
8744: LIST
8745: LIST
8746: PUSH
8747: LD_INT 82
8749: PUSH
8750: LD_INT 26
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: PUSH
8757: LD_INT 124
8759: PUSH
8760: LD_INT 45
8762: PUSH
8763: EMPTY
8764: LIST
8765: LIST
8766: PUSH
8767: LD_INT 147
8769: PUSH
8770: LD_INT 90
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: PUSH
8777: LD_INT 126
8779: PUSH
8780: LD_INT 112
8782: PUSH
8783: EMPTY
8784: LIST
8785: LIST
8786: PUSH
8787: LD_INT 84
8789: PUSH
8790: LD_INT 92
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: PUSH
8797: LD_INT 106
8799: PUSH
8800: LD_INT 73
8802: PUSH
8803: EMPTY
8804: LIST
8805: LIST
8806: PUSH
8807: LD_INT 106
8809: PUSH
8810: LD_INT 73
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: PUSH
8817: EMPTY
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: ST_TO_ADDR
// ClearHumansKilled ;
8827: NOP4
// enable ( 200 ) ;
8831: LD_INT 200
8833: ENABLE_MARKED
// end ; end_of_file
8834: LD_VAR 0 1
8838: RET
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
8839: LD_INT 0
8841: PPUSH
8842: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
8843: NOP4
8847: PUSH
8848: LD_STRING #Multi1x1-Time
8850: PUSH
8851: NOP4
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
8860: LD_INT 0
8862: PUSH
8863: NOP4
8867: PUSH
8868: NOP4
8872: MINUS
8873: LESSEQUAL
8874: IFFALSE 8905
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
8876: NOP4
8880: PUSH
8881: NOP4
8885: PUSH
8886: LD_STRING #allowedsibbomb
8888: PUSH
8889: NOP4
8893: PUSH
8894: NOP4
8898: MINUS
8899: PUSH
8900: EMPTY
8901: LIST
8902: LIST
8903: ADD
8904: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
8905: LD_INT 0
8907: PUSH
8908: NOP4
8912: PUSH
8913: NOP4
8917: MINUS
8918: LESSEQUAL
8919: IFFALSE 8950
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
8921: NOP4
8925: PUSH
8926: NOP4
8930: PUSH
8931: LD_STRING #builduptime
8933: PUSH
8934: NOP4
8938: PUSH
8939: NOP4
8943: MINUS
8944: PUSH
8945: EMPTY
8946: LIST
8947: LIST
8948: ADD
8949: ST_TO_ADDR
// if ( ExtraStrings ) then
8950: NOP4
8954: IFFALSE 8976
// AllStrings := AllStrings ^  ^ ExtraStrings ;
8956: NOP4
8960: PUSH
8961: NOP4
8965: PUSH
8966: LD_STRING 
8968: ADD
8969: PUSH
8970: NOP4
8974: ADD
8975: ST_TO_ADDR
// Display_Strings := AllStrings ;
8976: LD_ADDR_OWVAR 47
8980: PUSH
8981: NOP4
8985: ST_TO_ADDR
// end ;
8986: LD_VAR 0 1
8990: RET
// every 0 0$1 do
8991: GO 8993
8993: DISABLE
// begin ShowTimer ;
8994: NOP4
// enable ;
8998: ENABLE
// end ; end_of_file
8999: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
9000: LD_INT 0
9002: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
9003: NOP4
9007: PPUSH
9008: NOP4
9012: PUSH
9013: NOP4
9017: EQUAL
9018: IFFALSE 9037
// begin SetAchievement ( ACH_RAD ) ;
9020: LD_STRING ACH_RAD
9022: PPUSH
9023: NOP4
// SetAchievementEx ( ACH_NL , 1 ) ;
9027: LD_STRING ACH_NL
9029: PPUSH
9030: LD_INT 1
9032: PPUSH
9033: NOP4
// end end ;
9037: LD_VAR 0 5
9041: RET
// export function SA_Win ( side ) ; begin
9042: LD_INT 0
9044: PPUSH
// case side of 1 :
9045: NOP4
9049: PUSH
9050: LD_INT 1
9052: DOUBLE
9053: EQUAL
9054: IFTRUE 9058
9056: GO 9071
9058: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
9059: LD_STRING ACH_AH
9061: PPUSH
9062: LD_INT 1
9064: PPUSH
9065: NOP4
9069: GO 9234
9071: LD_INT 2
9073: DOUBLE
9074: EQUAL
9075: IFTRUE 9079
9077: GO 9092
9079: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
9080: LD_STRING ACH_E
9082: PPUSH
9083: LD_INT 1
9085: PPUSH
9086: NOP4
9090: GO 9234
9092: LD_INT 3
9094: DOUBLE
9095: EQUAL
9096: IFTRUE 9100
9098: GO 9113
9100: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
9101: LD_STRING ACH_OOL
9103: PPUSH
9104: LD_INT 1
9106: PPUSH
9107: NOP4
9111: GO 9234
9113: LD_INT 1
9115: PUSH
9116: LD_INT 2
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: DOUBLE
9123: EQUAL
9124: IFTRUE 9128
9126: GO 9153
9128: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
9129: LD_STRING ACH_AH
9131: PPUSH
9132: LD_REAL  5.00000000000000E-0001
9135: PPUSH
9136: NOP4
// SetAchievementEx ( ACH_E , 0.5 ) ;
9140: LD_STRING ACH_E
9142: PPUSH
9143: LD_REAL  5.00000000000000E-0001
9146: PPUSH
9147: NOP4
// end ; [ 2 , 3 ] :
9151: GO 9234
9153: LD_INT 2
9155: PUSH
9156: LD_INT 3
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: DOUBLE
9163: EQUAL
9164: IFTRUE 9168
9166: GO 9193
9168: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
9169: LD_STRING ACH_OOL
9171: PPUSH
9172: LD_REAL  5.00000000000000E-0001
9175: PPUSH
9176: NOP4
// SetAchievementEx ( ACH_E , 0.5 ) ;
9180: LD_STRING ACH_E
9182: PPUSH
9183: LD_REAL  5.00000000000000E-0001
9186: PPUSH
9187: NOP4
// end ; [ 3 , 1 ] :
9191: GO 9234
9193: LD_INT 3
9195: PUSH
9196: LD_INT 1
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: DOUBLE
9203: EQUAL
9204: IFTRUE 9208
9206: GO 9233
9208: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
9209: LD_STRING ACH_AH
9211: PPUSH
9212: LD_REAL  5.00000000000000E-0001
9215: PPUSH
9216: NOP4
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
9220: LD_STRING ACH_OOL
9222: PPUSH
9223: LD_REAL  5.00000000000000E-0001
9226: PPUSH
9227: NOP4
// end ; end ;
9231: GO 9234
9233: POP
// end ; end_of_file
9234: LD_VAR 0 2
9238: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9239: LD_INT 0
9241: PPUSH
9242: PPUSH
9243: PPUSH
// for side = 1 to 8 do
9244: NOP4
9248: PUSH
9249: DOUBLE
9250: LD_INT 1
9252: DEC
9253: ST_TO_ADDR
9254: LD_INT 8
9256: PUSH
9257: FOR_TO
9258: IFFALSE 9379
// begin for i = 1 to 72 do
9260: NOP4
9264: PUSH
9265: DOUBLE
9266: LD_INT 1
9268: DEC
9269: ST_TO_ADDR
9270: LD_INT 72
9272: PUSH
9273: FOR_TO
9274: IFFALSE 9305
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9276: NOP4
9280: PPUSH
9281: NOP4
9285: PPUSH
9286: LD_INT 0
9288: PPUSH
9289: NOP4
9293: PPUSH
9294: NOP4
9298: PPUSH
9299: NOP4
9303: GO 9273
9305: POP
9306: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9307: LD_INT 73
9309: PPUSH
9310: NOP4
9314: PPUSH
9315: LD_INT 0
9317: PPUSH
9318: LD_INT 25
9320: PPUSH
9321: NOP4
9325: PPUSH
9326: NOP4
// for i = 0 to 40 do
9330: NOP4
9334: PUSH
9335: DOUBLE
9336: LD_INT 0
9338: DEC
9339: ST_TO_ADDR
9340: LD_INT 40
9342: PUSH
9343: FOR_TO
9344: IFFALSE 9375
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9346: NOP4
9350: PPUSH
9351: NOP4
9355: PPUSH
9356: LD_INT 1
9358: PPUSH
9359: NOP4
9363: PPUSH
9364: NOP4
9368: PPUSH
9369: NOP4
9373: GO 9343
9375: POP
9376: POP
// end ;
9377: GO 9257
9379: POP
9380: POP
// end ;
9381: LD_VAR 0 1
9385: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9386: LD_INT 0
9388: PPUSH
9389: PPUSH
9390: PPUSH
// for side = 1 to 8 do
9391: NOP4
9395: PUSH
9396: DOUBLE
9397: LD_INT 1
9399: DEC
9400: ST_TO_ADDR
9401: LD_INT 8
9403: PUSH
9404: FOR_TO
9405: IFFALSE 13401
// begin for i = 1 to 73 do
9407: NOP4
9411: PUSH
9412: DOUBLE
9413: LD_INT 1
9415: DEC
9416: ST_TO_ADDR
9417: LD_INT 73
9419: PUSH
9420: FOR_TO
9421: IFFALSE 9442
// SetTech ( i , side , state_disabled ) ;
9423: NOP4
9427: PPUSH
9428: NOP4
9432: PPUSH
9433: LD_INT 0
9435: PPUSH
9436: NOP4
9440: GO 9420
9442: POP
9443: POP
// for i = 0 to 40 do
9444: NOP4
9448: PUSH
9449: DOUBLE
9450: LD_INT 0
9452: DEC
9453: ST_TO_ADDR
9454: LD_INT 40
9456: PUSH
9457: FOR_TO
9458: IFFALSE 9479
// SetRestrict ( i , side , false ) ;
9460: NOP4
9464: PPUSH
9465: NOP4
9469: PPUSH
9470: LD_INT 0
9472: PPUSH
9473: NOP4
9477: GO 9457
9479: POP
9480: POP
// case level of 1 :
9481: NOP4
9485: PUSH
9486: LD_INT 1
9488: DOUBLE
9489: EQUAL
9490: IFTRUE 9494
9492: GO 9647
9494: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9495: LD_INT 35
9497: PPUSH
9498: NOP4
9502: PPUSH
9503: LD_INT 1
9505: PPUSH
9506: NOP4
// SetTech ( tech_soleng , side , state_enabled ) ;
9510: LD_INT 45
9512: PPUSH
9513: NOP4
9517: PPUSH
9518: LD_INT 1
9520: PPUSH
9521: NOP4
// SetTech ( tech_oilpow , side , state_enabled ) ;
9525: LD_INT 46
9527: PPUSH
9528: NOP4
9532: PPUSH
9533: LD_INT 1
9535: PPUSH
9536: NOP4
// SetTech ( tech_oileng , side , state_enabled ) ;
9540: LD_INT 47
9542: PPUSH
9543: NOP4
9547: PPUSH
9548: LD_INT 1
9550: PPUSH
9551: NOP4
// SetRestrict ( b_depot , side , true ) ;
9555: LD_INT 0
9557: PPUSH
9558: NOP4
9562: PPUSH
9563: LD_INT 1
9565: PPUSH
9566: NOP4
// SetRestrict ( b_workshop , side , true ) ;
9570: LD_INT 2
9572: PPUSH
9573: NOP4
9577: PPUSH
9578: LD_INT 1
9580: PPUSH
9581: NOP4
// SetRestrict ( b_armoury , side , true ) ;
9585: LD_INT 4
9587: PPUSH
9588: NOP4
9592: PPUSH
9593: LD_INT 1
9595: PPUSH
9596: NOP4
// SetRestrict ( b_lab , side , true ) ;
9600: LD_INT 6
9602: PPUSH
9603: NOP4
9607: PPUSH
9608: LD_INT 1
9610: PPUSH
9611: NOP4
// SetRestrict ( b_oil_mine , side , true ) ;
9615: LD_INT 29
9617: PPUSH
9618: NOP4
9622: PPUSH
9623: LD_INT 1
9625: PPUSH
9626: NOP4
// SetRestrict ( b_breastwork , side , true ) ;
9630: LD_INT 31
9632: PPUSH
9633: NOP4
9637: PPUSH
9638: LD_INT 1
9640: PPUSH
9641: NOP4
// end ; 2 :
9645: GO 13399
9647: LD_INT 2
9649: DOUBLE
9650: EQUAL
9651: IFTRUE 9655
9653: GO 9853
9655: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9656: LD_INT 35
9658: PPUSH
9659: NOP4
9663: PPUSH
9664: LD_INT 1
9666: PPUSH
9667: NOP4
// SetTech ( tech_soleng , side , state_enabled ) ;
9671: LD_INT 45
9673: PPUSH
9674: NOP4
9678: PPUSH
9679: LD_INT 1
9681: PPUSH
9682: NOP4
// SetTech ( tech_oilpow , side , state_enabled ) ;
9686: LD_INT 46
9688: PPUSH
9689: NOP4
9693: PPUSH
9694: LD_INT 1
9696: PPUSH
9697: NOP4
// SetTech ( tech_oileng , side , state_enabled ) ;
9701: LD_INT 47
9703: PPUSH
9704: NOP4
9708: PPUSH
9709: LD_INT 1
9711: PPUSH
9712: NOP4
// SetTech ( tech_apelang , side , state_enabled ) ;
9716: LD_INT 1
9718: PPUSH
9719: NOP4
9723: PPUSH
9724: LD_INT 1
9726: PPUSH
9727: NOP4
// SetTech ( tech_apepsych , side , state_enabled ) ;
9731: LD_INT 2
9733: PPUSH
9734: NOP4
9738: PPUSH
9739: LD_INT 1
9741: PPUSH
9742: NOP4
// SetTech ( tech_apeagres , side , state_enabled ) ;
9746: LD_INT 11
9748: PPUSH
9749: NOP4
9753: PPUSH
9754: LD_INT 1
9756: PPUSH
9757: NOP4
// SetRestrict ( b_depot , side , true ) ;
9761: LD_INT 0
9763: PPUSH
9764: NOP4
9768: PPUSH
9769: LD_INT 1
9771: PPUSH
9772: NOP4
// SetRestrict ( b_workshop , side , true ) ;
9776: LD_INT 2
9778: PPUSH
9779: NOP4
9783: PPUSH
9784: LD_INT 1
9786: PPUSH
9787: NOP4
// SetRestrict ( b_armoury , side , true ) ;
9791: LD_INT 4
9793: PPUSH
9794: NOP4
9798: PPUSH
9799: LD_INT 1
9801: PPUSH
9802: NOP4
// SetRestrict ( b_lab , side , true ) ;
9806: LD_INT 6
9808: PPUSH
9809: NOP4
9813: PPUSH
9814: LD_INT 1
9816: PPUSH
9817: NOP4
// SetRestrict ( b_oil_mine , side , true ) ;
9821: LD_INT 29
9823: PPUSH
9824: NOP4
9828: PPUSH
9829: LD_INT 1
9831: PPUSH
9832: NOP4
// SetRestrict ( b_breastwork , side , true ) ;
9836: LD_INT 31
9838: PPUSH
9839: NOP4
9843: PPUSH
9844: LD_INT 1
9846: PPUSH
9847: NOP4
// end ; 3 :
9851: GO 13399
9853: LD_INT 3
9855: DOUBLE
9856: EQUAL
9857: IFTRUE 9861
9859: GO 10314
9861: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9862: LD_INT 35
9864: PPUSH
9865: NOP4
9869: PPUSH
9870: LD_INT 1
9872: PPUSH
9873: NOP4
// SetTech ( tech_soleng , side , state_enabled ) ;
9877: LD_INT 45
9879: PPUSH
9880: NOP4
9884: PPUSH
9885: LD_INT 1
9887: PPUSH
9888: NOP4
// SetTech ( tech_oilpow , side , state_enabled ) ;
9892: LD_INT 46
9894: PPUSH
9895: NOP4
9899: PPUSH
9900: LD_INT 1
9902: PPUSH
9903: NOP4
// SetTech ( tech_oileng , side , state_enabled ) ;
9907: LD_INT 47
9909: PPUSH
9910: NOP4
9914: PPUSH
9915: LD_INT 1
9917: PPUSH
9918: NOP4
// SetTech ( tech_apelang , side , state_enabled ) ;
9922: LD_INT 1
9924: PPUSH
9925: NOP4
9929: PPUSH
9930: LD_INT 1
9932: PPUSH
9933: NOP4
// SetTech ( tech_apepsych , side , state_enabled ) ;
9937: LD_INT 2
9939: PPUSH
9940: NOP4
9944: PPUSH
9945: LD_INT 1
9947: PPUSH
9948: NOP4
// SetTech ( tech_apeagres , side , state_enabled ) ;
9952: LD_INT 11
9954: PPUSH
9955: NOP4
9959: PPUSH
9960: LD_INT 1
9962: PPUSH
9963: NOP4
// SetTech ( tech_tech1 , side , state_enabled ) ;
9967: LD_INT 48
9969: PPUSH
9970: NOP4
9974: PPUSH
9975: LD_INT 1
9977: PPUSH
9978: NOP4
// SetTech ( tech_gatling , side , state_enabled ) ;
9982: LD_INT 69
9984: PPUSH
9985: NOP4
9989: PPUSH
9990: LD_INT 1
9992: PPUSH
9993: NOP4
// SetTech ( tech_gun , side , state_enabled ) ;
9997: LD_INT 39
9999: PPUSH
10000: NOP4
10004: PPUSH
10005: LD_INT 1
10007: PPUSH
10008: NOP4
// SetTech ( tech_selfdest , side , state_enabled ) ;
10012: LD_INT 43
10014: PPUSH
10015: NOP4
10019: PPUSH
10020: LD_INT 1
10022: PPUSH
10023: NOP4
// SetTech ( tech_weap1 , side , state_enabled ) ;
10027: LD_INT 51
10029: PPUSH
10030: NOP4
10034: PPUSH
10035: LD_INT 1
10037: PPUSH
10038: NOP4
// SetTech ( tech_radar , side , state_enabled ) ;
10042: LD_INT 6
10044: PPUSH
10045: NOP4
10049: PPUSH
10050: LD_INT 1
10052: PPUSH
10053: NOP4
// SetRestrict ( b_depot , side , true ) ;
10057: LD_INT 0
10059: PPUSH
10060: NOP4
10064: PPUSH
10065: LD_INT 1
10067: PPUSH
10068: NOP4
// SetRestrict ( b_workshop , side , true ) ;
10072: LD_INT 2
10074: PPUSH
10075: NOP4
10079: PPUSH
10080: LD_INT 1
10082: PPUSH
10083: NOP4
// SetRestrict ( b_factory , side , true ) ;
10087: LD_INT 3
10089: PPUSH
10090: NOP4
10094: PPUSH
10095: LD_INT 1
10097: PPUSH
10098: NOP4
// SetRestrict ( b_armoury , side , true ) ;
10102: LD_INT 4
10104: PPUSH
10105: NOP4
10109: PPUSH
10110: LD_INT 1
10112: PPUSH
10113: NOP4
// SetRestrict ( b_lab , side , true ) ;
10117: LD_INT 6
10119: PPUSH
10120: NOP4
10124: PPUSH
10125: LD_INT 1
10127: PPUSH
10128: NOP4
// SetRestrict ( b_lab_half , side , true ) ;
10132: LD_INT 7
10134: PPUSH
10135: NOP4
10139: PPUSH
10140: LD_INT 1
10142: PPUSH
10143: NOP4
// SetRestrict ( b_lab_full , side , true ) ;
10147: LD_INT 8
10149: PPUSH
10150: NOP4
10154: PPUSH
10155: LD_INT 1
10157: PPUSH
10158: NOP4
// SetRestrict ( b_lab_weapon , side , true ) ;
10162: LD_INT 10
10164: PPUSH
10165: NOP4
10169: PPUSH
10170: LD_INT 1
10172: PPUSH
10173: NOP4
// SetRestrict ( b_lab_opto , side , true ) ;
10177: LD_INT 15
10179: PPUSH
10180: NOP4
10184: PPUSH
10185: LD_INT 1
10187: PPUSH
10188: NOP4
// SetRestrict ( b_ext_track , side , true ) ;
10192: LD_INT 16
10194: PPUSH
10195: NOP4
10199: PPUSH
10200: LD_INT 1
10202: PPUSH
10203: NOP4
// SetRestrict ( b_ext_gun , side , true ) ;
10207: LD_INT 17
10209: PPUSH
10210: NOP4
10214: PPUSH
10215: LD_INT 1
10217: PPUSH
10218: NOP4
// SetRestrict ( b_ext_radar , side , true ) ;
10222: LD_INT 20
10224: PPUSH
10225: NOP4
10229: PPUSH
10230: LD_INT 1
10232: PPUSH
10233: NOP4
// SetRestrict ( b_oil_power , side , true ) ;
10237: LD_INT 26
10239: PPUSH
10240: NOP4
10244: PPUSH
10245: LD_INT 1
10247: PPUSH
10248: NOP4
// SetRestrict ( b_solar_power , side , true ) ;
10252: LD_INT 27
10254: PPUSH
10255: NOP4
10259: PPUSH
10260: LD_INT 1
10262: PPUSH
10263: NOP4
// SetRestrict ( b_oil_mine , side , true ) ;
10267: LD_INT 29
10269: PPUSH
10270: NOP4
10274: PPUSH
10275: LD_INT 1
10277: PPUSH
10278: NOP4
// SetRestrict ( b_breastwork , side , true ) ;
10282: LD_INT 31
10284: PPUSH
10285: NOP4
10289: PPUSH
10290: LD_INT 1
10292: PPUSH
10293: NOP4
// SetRestrict ( b_bunker , side , true ) ;
10297: LD_INT 32
10299: PPUSH
10300: NOP4
10304: PPUSH
10305: LD_INT 1
10307: PPUSH
10308: NOP4
// end ; 4 :
10312: GO 13399
10314: LD_INT 4
10316: DOUBLE
10317: EQUAL
10318: IFTRUE 10322
10320: GO 11270
10322: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10323: LD_INT 35
10325: PPUSH
10326: NOP4
10330: PPUSH
10331: LD_INT 1
10333: PPUSH
10334: NOP4
// SetTech ( tech_soleng , side , state_enabled ) ;
10338: LD_INT 45
10340: PPUSH
10341: NOP4
10345: PPUSH
10346: LD_INT 1
10348: PPUSH
10349: NOP4
// SetTech ( tech_oilpow , side , state_enabled ) ;
10353: LD_INT 46
10355: PPUSH
10356: NOP4
10360: PPUSH
10361: LD_INT 1
10363: PPUSH
10364: NOP4
// SetTech ( tech_oileng , side , state_enabled ) ;
10368: LD_INT 47
10370: PPUSH
10371: NOP4
10375: PPUSH
10376: LD_INT 1
10378: PPUSH
10379: NOP4
// SetTech ( tech_apelang , side , state_enabled ) ;
10383: LD_INT 1
10385: PPUSH
10386: NOP4
10390: PPUSH
10391: LD_INT 1
10393: PPUSH
10394: NOP4
// SetTech ( tech_apepsych , side , state_enabled ) ;
10398: LD_INT 2
10400: PPUSH
10401: NOP4
10405: PPUSH
10406: LD_INT 1
10408: PPUSH
10409: NOP4
// SetTech ( tech_apeagres , side , state_enabled ) ;
10413: LD_INT 11
10415: PPUSH
10416: NOP4
10420: PPUSH
10421: LD_INT 1
10423: PPUSH
10424: NOP4
// SetTech ( tech_sibdet , side , state_enabled ) ;
10428: LD_INT 20
10430: PPUSH
10431: NOP4
10435: PPUSH
10436: LD_INT 1
10438: PPUSH
10439: NOP4
// SetTech ( tech_tech1 , side , state_enabled ) ;
10443: LD_INT 48
10445: PPUSH
10446: NOP4
10450: PPUSH
10451: LD_INT 1
10453: PPUSH
10454: NOP4
// SetTech ( tech_tech2 , side , state_enabled ) ;
10458: LD_INT 49
10460: PPUSH
10461: NOP4
10465: PPUSH
10466: LD_INT 1
10468: PPUSH
10469: NOP4
// SetTech ( tech_gatling , side , state_enabled ) ;
10473: LD_INT 69
10475: PPUSH
10476: NOP4
10480: PPUSH
10481: LD_INT 1
10483: PPUSH
10484: NOP4
// SetTech ( tech_gun , side , state_enabled ) ;
10488: LD_INT 39
10490: PPUSH
10491: NOP4
10495: PPUSH
10496: LD_INT 1
10498: PPUSH
10499: NOP4
// SetTech ( tech_advmet , side , state_enabled ) ;
10503: LD_INT 34
10505: PPUSH
10506: NOP4
10510: PPUSH
10511: LD_INT 1
10513: PPUSH
10514: NOP4
// SetTech ( tech_explos , side , state_enabled ) ;
10518: LD_INT 42
10520: PPUSH
10521: NOP4
10525: PPUSH
10526: LD_INT 1
10528: PPUSH
10529: NOP4
// SetTech ( tech_bazooka , side , state_enabled ) ;
10533: LD_INT 44
10535: PPUSH
10536: NOP4
10540: PPUSH
10541: LD_INT 1
10543: PPUSH
10544: NOP4
// SetTech ( tech_mortar , side , state_enabled ) ;
10548: LD_INT 41
10550: PPUSH
10551: NOP4
10555: PPUSH
10556: LD_INT 1
10558: PPUSH
10559: NOP4
// SetTech ( tech_selfdest , side , state_enabled ) ;
10563: LD_INT 43
10565: PPUSH
10566: NOP4
10570: PPUSH
10571: LD_INT 1
10573: PPUSH
10574: NOP4
// SetTech ( tech_flame , side , state_enabled ) ;
10578: LD_INT 70
10580: PPUSH
10581: NOP4
10585: PPUSH
10586: LD_INT 1
10588: PPUSH
10589: NOP4
// SetTech ( tech_weap1 , side , state_enabled ) ;
10593: LD_INT 51
10595: PPUSH
10596: NOP4
10600: PPUSH
10601: LD_INT 1
10603: PPUSH
10604: NOP4
// SetTech ( tech_weap2 , side , state_enabled ) ;
10608: LD_INT 52
10610: PPUSH
10611: NOP4
10615: PPUSH
10616: LD_INT 1
10618: PPUSH
10619: NOP4
// SetTech ( tech_radar , side , state_enabled ) ;
10623: LD_INT 6
10625: PPUSH
10626: NOP4
10630: PPUSH
10631: LD_INT 1
10633: PPUSH
10634: NOP4
// SetTech ( tech_remcont , side , state_enabled ) ;
10638: LD_INT 15
10640: PPUSH
10641: NOP4
10645: PPUSH
10646: LD_INT 1
10648: PPUSH
10649: NOP4
// SetTech ( tech_matdet , side , state_enabled ) ;
10653: LD_INT 7
10655: PPUSH
10656: NOP4
10660: PPUSH
10661: LD_INT 1
10663: PPUSH
10664: NOP4
// SetTech ( tech_lassight , side , state_enabled ) ;
10668: LD_INT 12
10670: PPUSH
10671: NOP4
10675: PPUSH
10676: LD_INT 1
10678: PPUSH
10679: NOP4
// SetTech ( tech_remcharge , side , state_enabled ) ;
10683: LD_INT 18
10685: PPUSH
10686: NOP4
10690: PPUSH
10691: LD_INT 1
10693: PPUSH
10694: NOP4
// SetTech ( tech_opto1 , side , state_enabled ) ;
10698: LD_INT 60
10700: PPUSH
10701: NOP4
10705: PPUSH
10706: LD_INT 1
10708: PPUSH
10709: NOP4
// SetTech ( tech_matpred , side , state_enabled ) ;
10713: LD_INT 9
10715: PPUSH
10716: NOP4
10720: PPUSH
10721: LD_INT 1
10723: PPUSH
10724: NOP4
// SetTech ( tech_taufield , side , state_enabled ) ;
10728: LD_INT 30
10730: PPUSH
10731: NOP4
10735: PPUSH
10736: LD_INT 1
10738: PPUSH
10739: NOP4
// SetTech ( tech_limteleport , side , state_enabled ) ;
10743: LD_INT 37
10745: PPUSH
10746: NOP4
10750: PPUSH
10751: LD_INT 1
10753: PPUSH
10754: NOP4
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10758: LD_INT 5
10760: PPUSH
10761: NOP4
10765: PPUSH
10766: LD_INT 1
10768: PPUSH
10769: NOP4
// SetTech ( tech_bio1 , side , state_enabled ) ;
10773: LD_INT 66
10775: PPUSH
10776: NOP4
10780: PPUSH
10781: LD_INT 1
10783: PPUSH
10784: NOP4
// SetTech ( tech_sibpow , side , state_enabled ) ;
10788: LD_INT 21
10790: PPUSH
10791: NOP4
10795: PPUSH
10796: LD_INT 1
10798: PPUSH
10799: NOP4
// SetTech ( tech_sibeng , side , state_enabled ) ;
10803: LD_INT 22
10805: PPUSH
10806: NOP4
10810: PPUSH
10811: LD_INT 1
10813: PPUSH
10814: NOP4
// SetTech ( tech_sib1 , side , state_enabled ) ;
10818: LD_INT 54
10820: PPUSH
10821: NOP4
10825: PPUSH
10826: LD_INT 1
10828: PPUSH
10829: NOP4
// SetRestrict ( b_depot , side , true ) ;
10833: LD_INT 0
10835: PPUSH
10836: NOP4
10840: PPUSH
10841: LD_INT 1
10843: PPUSH
10844: NOP4
// SetRestrict ( b_warehouse , side , true ) ;
10848: LD_INT 1
10850: PPUSH
10851: NOP4
10855: PPUSH
10856: LD_INT 1
10858: PPUSH
10859: NOP4
// SetRestrict ( b_workshop , side , true ) ;
10863: LD_INT 2
10865: PPUSH
10866: NOP4
10870: PPUSH
10871: LD_INT 1
10873: PPUSH
10874: NOP4
// SetRestrict ( b_factory , side , true ) ;
10878: LD_INT 3
10880: PPUSH
10881: NOP4
10885: PPUSH
10886: LD_INT 1
10888: PPUSH
10889: NOP4
// SetRestrict ( b_armoury , side , true ) ;
10893: LD_INT 4
10895: PPUSH
10896: NOP4
10900: PPUSH
10901: LD_INT 1
10903: PPUSH
10904: NOP4
// SetRestrict ( b_barracks , side , true ) ;
10908: LD_INT 5
10910: PPUSH
10911: NOP4
10915: PPUSH
10916: LD_INT 1
10918: PPUSH
10919: NOP4
// SetRestrict ( b_lab , side , true ) ;
10923: LD_INT 6
10925: PPUSH
10926: NOP4
10930: PPUSH
10931: LD_INT 1
10933: PPUSH
10934: NOP4
// SetRestrict ( b_lab_half , side , true ) ;
10938: LD_INT 7
10940: PPUSH
10941: NOP4
10945: PPUSH
10946: LD_INT 1
10948: PPUSH
10949: NOP4
// SetRestrict ( b_lab_full , side , true ) ;
10953: LD_INT 8
10955: PPUSH
10956: NOP4
10960: PPUSH
10961: LD_INT 1
10963: PPUSH
10964: NOP4
// SetRestrict ( b_lab_weapon , side , true ) ;
10968: LD_INT 10
10970: PPUSH
10971: NOP4
10975: PPUSH
10976: LD_INT 1
10978: PPUSH
10979: NOP4
// SetRestrict ( b_lab_siberium , side , true ) ;
10983: LD_INT 11
10985: PPUSH
10986: NOP4
10990: PPUSH
10991: LD_INT 1
10993: PPUSH
10994: NOP4
// SetRestrict ( b_lab_computer , side , true ) ;
10998: LD_INT 12
11000: PPUSH
11001: NOP4
11005: PPUSH
11006: LD_INT 1
11008: PPUSH
11009: NOP4
// SetRestrict ( b_lab_biological , side , true ) ;
11013: LD_INT 13
11015: PPUSH
11016: NOP4
11020: PPUSH
11021: LD_INT 1
11023: PPUSH
11024: NOP4
// SetRestrict ( b_lab_spacetime , side , true ) ;
11028: LD_INT 14
11030: PPUSH
11031: NOP4
11035: PPUSH
11036: LD_INT 1
11038: PPUSH
11039: NOP4
// SetRestrict ( b_lab_opto , side , true ) ;
11043: LD_INT 15
11045: PPUSH
11046: NOP4
11050: PPUSH
11051: LD_INT 1
11053: PPUSH
11054: NOP4
// SetRestrict ( b_ext_track , side , true ) ;
11058: LD_INT 16
11060: PPUSH
11061: NOP4
11065: PPUSH
11066: LD_INT 1
11068: PPUSH
11069: NOP4
// SetRestrict ( b_ext_gun , side , true ) ;
11073: LD_INT 17
11075: PPUSH
11076: NOP4
11080: PPUSH
11081: LD_INT 1
11083: PPUSH
11084: NOP4
// SetRestrict ( b_ext_noncombat , side , true ) ;
11088: LD_INT 19
11090: PPUSH
11091: NOP4
11095: PPUSH
11096: LD_INT 1
11098: PPUSH
11099: NOP4
// SetRestrict ( b_ext_radar , side , true ) ;
11103: LD_INT 20
11105: PPUSH
11106: NOP4
11110: PPUSH
11111: LD_INT 1
11113: PPUSH
11114: NOP4
// SetRestrict ( b_ext_siberium , side , true ) ;
11118: LD_INT 21
11120: PPUSH
11121: NOP4
11125: PPUSH
11126: LD_INT 1
11128: PPUSH
11129: NOP4
// SetRestrict ( b_ext_stitch , side , true ) ;
11133: LD_INT 23
11135: PPUSH
11136: NOP4
11140: PPUSH
11141: LD_INT 1
11143: PPUSH
11144: NOP4
// SetRestrict ( b_oil_power , side , true ) ;
11148: LD_INT 26
11150: PPUSH
11151: NOP4
11155: PPUSH
11156: LD_INT 1
11158: PPUSH
11159: NOP4
// SetRestrict ( b_solar_power , side , true ) ;
11163: LD_INT 27
11165: PPUSH
11166: NOP4
11170: PPUSH
11171: LD_INT 1
11173: PPUSH
11174: NOP4
// SetRestrict ( b_siberite_power , side , true ) ;
11178: LD_INT 28
11180: PPUSH
11181: NOP4
11185: PPUSH
11186: LD_INT 1
11188: PPUSH
11189: NOP4
// SetRestrict ( b_oil_mine , side , true ) ;
11193: LD_INT 29
11195: PPUSH
11196: NOP4
11200: PPUSH
11201: LD_INT 1
11203: PPUSH
11204: NOP4
// SetRestrict ( b_siberite_mine , side , true ) ;
11208: LD_INT 30
11210: PPUSH
11211: NOP4
11215: PPUSH
11216: LD_INT 1
11218: PPUSH
11219: NOP4
// SetRestrict ( b_breastwork , side , true ) ;
11223: LD_INT 31
11225: PPUSH
11226: NOP4
11230: PPUSH
11231: LD_INT 1
11233: PPUSH
11234: NOP4
// SetRestrict ( b_bunker , side , true ) ;
11238: LD_INT 32
11240: PPUSH
11241: NOP4
11245: PPUSH
11246: LD_INT 1
11248: PPUSH
11249: NOP4
// SetRestrict ( b_control_tower , side , true ) ;
11253: LD_INT 36
11255: PPUSH
11256: NOP4
11260: PPUSH
11261: LD_INT 1
11263: PPUSH
11264: NOP4
// end ; 5 :
11268: GO 13399
11270: LD_INT 5
11272: DOUBLE
11273: EQUAL
11274: IFTRUE 11278
11276: GO 12391
11278: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11279: LD_INT 35
11281: PPUSH
11282: NOP4
11286: PPUSH
11287: LD_INT 1
11289: PPUSH
11290: NOP4
// SetTech ( tech_soleng , side , state_enabled ) ;
11294: LD_INT 45
11296: PPUSH
11297: NOP4
11301: PPUSH
11302: LD_INT 1
11304: PPUSH
11305: NOP4
// SetTech ( tech_oilpow , side , state_enabled ) ;
11309: LD_INT 46
11311: PPUSH
11312: NOP4
11316: PPUSH
11317: LD_INT 1
11319: PPUSH
11320: NOP4
// SetTech ( tech_oileng , side , state_enabled ) ;
11324: LD_INT 47
11326: PPUSH
11327: NOP4
11331: PPUSH
11332: LD_INT 1
11334: PPUSH
11335: NOP4
// SetTech ( tech_apelang , side , state_enabled ) ;
11339: LD_INT 1
11341: PPUSH
11342: NOP4
11346: PPUSH
11347: LD_INT 1
11349: PPUSH
11350: NOP4
// SetTech ( tech_apepsych , side , state_enabled ) ;
11354: LD_INT 2
11356: PPUSH
11357: NOP4
11361: PPUSH
11362: LD_INT 1
11364: PPUSH
11365: NOP4
// SetTech ( tech_apeagres , side , state_enabled ) ;
11369: LD_INT 11
11371: PPUSH
11372: NOP4
11376: PPUSH
11377: LD_INT 1
11379: PPUSH
11380: NOP4
// SetTech ( tech_sibdet , side , state_enabled ) ;
11384: LD_INT 20
11386: PPUSH
11387: NOP4
11391: PPUSH
11392: LD_INT 1
11394: PPUSH
11395: NOP4
// SetTech ( tech_tech1 , side , state_enabled ) ;
11399: LD_INT 48
11401: PPUSH
11402: NOP4
11406: PPUSH
11407: LD_INT 1
11409: PPUSH
11410: NOP4
// SetTech ( tech_tech2 , side , state_enabled ) ;
11414: LD_INT 49
11416: PPUSH
11417: NOP4
11421: PPUSH
11422: LD_INT 1
11424: PPUSH
11425: NOP4
// SetTech ( tech_gatling , side , state_enabled ) ;
11429: LD_INT 69
11431: PPUSH
11432: NOP4
11436: PPUSH
11437: LD_INT 1
11439: PPUSH
11440: NOP4
// SetTech ( tech_gun , side , state_enabled ) ;
11444: LD_INT 39
11446: PPUSH
11447: NOP4
11451: PPUSH
11452: LD_INT 1
11454: PPUSH
11455: NOP4
// SetTech ( tech_advmet , side , state_enabled ) ;
11459: LD_INT 34
11461: PPUSH
11462: NOP4
11466: PPUSH
11467: LD_INT 1
11469: PPUSH
11470: NOP4
// SetTech ( tech_explos , side , state_enabled ) ;
11474: LD_INT 42
11476: PPUSH
11477: NOP4
11481: PPUSH
11482: LD_INT 1
11484: PPUSH
11485: NOP4
// SetTech ( tech_bazooka , side , state_enabled ) ;
11489: LD_INT 44
11491: PPUSH
11492: NOP4
11496: PPUSH
11497: LD_INT 1
11499: PPUSH
11500: NOP4
// SetTech ( tech_mortar , side , state_enabled ) ;
11504: LD_INT 41
11506: PPUSH
11507: NOP4
11511: PPUSH
11512: LD_INT 1
11514: PPUSH
11515: NOP4
// SetTech ( tech_rocket , side , state_enabled ) ;
11519: LD_INT 40
11521: PPUSH
11522: NOP4
11526: PPUSH
11527: LD_INT 1
11529: PPUSH
11530: NOP4
// SetTech ( tech_selfdest , side , state_enabled ) ;
11534: LD_INT 43
11536: PPUSH
11537: NOP4
11541: PPUSH
11542: LD_INT 1
11544: PPUSH
11545: NOP4
// SetTech ( tech_flame , side , state_enabled ) ;
11549: LD_INT 70
11551: PPUSH
11552: NOP4
11556: PPUSH
11557: LD_INT 1
11559: PPUSH
11560: NOP4
// SetTech ( tech_weap1 , side , state_enabled ) ;
11564: LD_INT 51
11566: PPUSH
11567: NOP4
11571: PPUSH
11572: LD_INT 1
11574: PPUSH
11575: NOP4
// SetTech ( tech_weap2 , side , state_enabled ) ;
11579: LD_INT 52
11581: PPUSH
11582: NOP4
11586: PPUSH
11587: LD_INT 1
11589: PPUSH
11590: NOP4
// SetTech ( tech_radar , side , state_enabled ) ;
11594: LD_INT 6
11596: PPUSH
11597: NOP4
11601: PPUSH
11602: LD_INT 1
11604: PPUSH
11605: NOP4
// SetTech ( tech_remcont , side , state_enabled ) ;
11609: LD_INT 15
11611: PPUSH
11612: NOP4
11616: PPUSH
11617: LD_INT 1
11619: PPUSH
11620: NOP4
// SetTech ( tech_matdet , side , state_enabled ) ;
11624: LD_INT 7
11626: PPUSH
11627: NOP4
11631: PPUSH
11632: LD_INT 1
11634: PPUSH
11635: NOP4
// SetTech ( tech_lassight , side , state_enabled ) ;
11639: LD_INT 12
11641: PPUSH
11642: NOP4
11646: PPUSH
11647: LD_INT 1
11649: PPUSH
11650: NOP4
// SetTech ( tech_hidcam , side , state_enabled ) ;
11654: LD_INT 17
11656: PPUSH
11657: NOP4
11661: PPUSH
11662: LD_INT 1
11664: PPUSH
11665: NOP4
// SetTech ( tech_remcharge , side , state_enabled ) ;
11669: LD_INT 18
11671: PPUSH
11672: NOP4
11676: PPUSH
11677: LD_INT 1
11679: PPUSH
11680: NOP4
// SetTech ( tech_opto1 , side , state_enabled ) ;
11684: LD_INT 60
11686: PPUSH
11687: NOP4
11691: PPUSH
11692: LD_INT 1
11694: PPUSH
11695: NOP4
// SetTech ( tech_ai , side , state_enabled ) ;
11699: LD_INT 32
11701: PPUSH
11702: NOP4
11706: PPUSH
11707: LD_INT 1
11709: PPUSH
11710: NOP4
// SetTech ( tech_matpred , side , state_enabled ) ;
11714: LD_INT 9
11716: PPUSH
11717: NOP4
11721: PPUSH
11722: LD_INT 1
11724: PPUSH
11725: NOP4
// SetTech ( tech_comp1 , side , state_enabled ) ;
11729: LD_INT 57
11731: PPUSH
11732: NOP4
11736: PPUSH
11737: LD_INT 1
11739: PPUSH
11740: NOP4
// SetTech ( tech_taufield , side , state_enabled ) ;
11744: LD_INT 30
11746: PPUSH
11747: NOP4
11751: PPUSH
11752: LD_INT 1
11754: PPUSH
11755: NOP4
// SetTech ( tech_limteleport , side , state_enabled ) ;
11759: LD_INT 37
11761: PPUSH
11762: NOP4
11766: PPUSH
11767: LD_INT 1
11769: PPUSH
11770: NOP4
// SetTech ( tech_st1 , side , state_enabled ) ;
11774: LD_INT 63
11776: PPUSH
11777: NOP4
11781: PPUSH
11782: LD_INT 1
11784: PPUSH
11785: NOP4
// SetTech ( tech_apeneural , side , state_enabled ) ;
11789: LD_INT 3
11791: PPUSH
11792: NOP4
11796: PPUSH
11797: LD_INT 1
11799: PPUSH
11800: NOP4
// SetTech ( tech_apebrain , side , state_enabled ) ;
11804: LD_INT 4
11806: PPUSH
11807: NOP4
11811: PPUSH
11812: LD_INT 1
11814: PPUSH
11815: NOP4
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11819: LD_INT 5
11821: PPUSH
11822: NOP4
11826: PPUSH
11827: LD_INT 1
11829: PPUSH
11830: NOP4
// SetTech ( tech_bio1 , side , state_enabled ) ;
11834: LD_INT 66
11836: PPUSH
11837: NOP4
11841: PPUSH
11842: LD_INT 1
11844: PPUSH
11845: NOP4
// SetTech ( tech_sibpow , side , state_enabled ) ;
11849: LD_INT 21
11851: PPUSH
11852: NOP4
11856: PPUSH
11857: LD_INT 1
11859: PPUSH
11860: NOP4
// SetTech ( tech_sibeng , side , state_enabled ) ;
11864: LD_INT 22
11866: PPUSH
11867: NOP4
11871: PPUSH
11872: LD_INT 1
11874: PPUSH
11875: NOP4
// SetTech ( tech_sibloc , side , state_enabled ) ;
11879: LD_INT 19
11881: PPUSH
11882: NOP4
11886: PPUSH
11887: LD_INT 1
11889: PPUSH
11890: NOP4
// SetTech ( tech_sib1 , side , state_enabled ) ;
11894: LD_INT 54
11896: PPUSH
11897: NOP4
11901: PPUSH
11902: LD_INT 1
11904: PPUSH
11905: NOP4
// SetTech ( tech_sib2 , side , state_enabled ) ;
11909: LD_INT 55
11911: PPUSH
11912: NOP4
11916: PPUSH
11917: LD_INT 1
11919: PPUSH
11920: NOP4
// SetRestrict ( b_depot , side , true ) ;
11924: LD_INT 0
11926: PPUSH
11927: NOP4
11931: PPUSH
11932: LD_INT 1
11934: PPUSH
11935: NOP4
// SetRestrict ( b_warehouse , side , true ) ;
11939: LD_INT 1
11941: PPUSH
11942: NOP4
11946: PPUSH
11947: LD_INT 1
11949: PPUSH
11950: NOP4
// SetRestrict ( b_workshop , side , true ) ;
11954: LD_INT 2
11956: PPUSH
11957: NOP4
11961: PPUSH
11962: LD_INT 1
11964: PPUSH
11965: NOP4
// SetRestrict ( b_factory , side , true ) ;
11969: LD_INT 3
11971: PPUSH
11972: NOP4
11976: PPUSH
11977: LD_INT 1
11979: PPUSH
11980: NOP4
// SetRestrict ( b_armoury , side , true ) ;
11984: LD_INT 4
11986: PPUSH
11987: NOP4
11991: PPUSH
11992: LD_INT 1
11994: PPUSH
11995: NOP4
// SetRestrict ( b_barracks , side , true ) ;
11999: LD_INT 5
12001: PPUSH
12002: NOP4
12006: PPUSH
12007: LD_INT 1
12009: PPUSH
12010: NOP4
// SetRestrict ( b_lab , side , true ) ;
12014: LD_INT 6
12016: PPUSH
12017: NOP4
12021: PPUSH
12022: LD_INT 1
12024: PPUSH
12025: NOP4
// SetRestrict ( b_lab_half , side , true ) ;
12029: LD_INT 7
12031: PPUSH
12032: NOP4
12036: PPUSH
12037: LD_INT 1
12039: PPUSH
12040: NOP4
// SetRestrict ( b_lab_full , side , true ) ;
12044: LD_INT 8
12046: PPUSH
12047: NOP4
12051: PPUSH
12052: LD_INT 1
12054: PPUSH
12055: NOP4
// SetRestrict ( b_lab_weapon , side , true ) ;
12059: LD_INT 10
12061: PPUSH
12062: NOP4
12066: PPUSH
12067: LD_INT 1
12069: PPUSH
12070: NOP4
// SetRestrict ( b_lab_siberium , side , true ) ;
12074: LD_INT 11
12076: PPUSH
12077: NOP4
12081: PPUSH
12082: LD_INT 1
12084: PPUSH
12085: NOP4
// SetRestrict ( b_lab_computer , side , true ) ;
12089: LD_INT 12
12091: PPUSH
12092: NOP4
12096: PPUSH
12097: LD_INT 1
12099: PPUSH
12100: NOP4
// SetRestrict ( b_lab_biological , side , true ) ;
12104: LD_INT 13
12106: PPUSH
12107: NOP4
12111: PPUSH
12112: LD_INT 1
12114: PPUSH
12115: NOP4
// SetRestrict ( b_lab_spacetime , side , true ) ;
12119: LD_INT 14
12121: PPUSH
12122: NOP4
12126: PPUSH
12127: LD_INT 1
12129: PPUSH
12130: NOP4
// SetRestrict ( b_lab_opto , side , true ) ;
12134: LD_INT 15
12136: PPUSH
12137: NOP4
12141: PPUSH
12142: LD_INT 1
12144: PPUSH
12145: NOP4
// SetRestrict ( b_ext_track , side , true ) ;
12149: LD_INT 16
12151: PPUSH
12152: NOP4
12156: PPUSH
12157: LD_INT 1
12159: PPUSH
12160: NOP4
// SetRestrict ( b_ext_gun , side , true ) ;
12164: LD_INT 17
12166: PPUSH
12167: NOP4
12171: PPUSH
12172: LD_INT 1
12174: PPUSH
12175: NOP4
// SetRestrict ( b_ext_rocket , side , true ) ;
12179: LD_INT 18
12181: PPUSH
12182: NOP4
12186: PPUSH
12187: LD_INT 1
12189: PPUSH
12190: NOP4
// SetRestrict ( b_ext_noncombat , side , true ) ;
12194: LD_INT 19
12196: PPUSH
12197: NOP4
12201: PPUSH
12202: LD_INT 1
12204: PPUSH
12205: NOP4
// SetRestrict ( b_ext_radar , side , true ) ;
12209: LD_INT 20
12211: PPUSH
12212: NOP4
12216: PPUSH
12217: LD_INT 1
12219: PPUSH
12220: NOP4
// SetRestrict ( b_ext_siberium , side , true ) ;
12224: LD_INT 21
12226: PPUSH
12227: NOP4
12231: PPUSH
12232: LD_INT 1
12234: PPUSH
12235: NOP4
// SetRestrict ( b_ext_stitch , side , true ) ;
12239: LD_INT 23
12241: PPUSH
12242: NOP4
12246: PPUSH
12247: LD_INT 1
12249: PPUSH
12250: NOP4
// SetRestrict ( b_oil_power , side , true ) ;
12254: LD_INT 26
12256: PPUSH
12257: NOP4
12261: PPUSH
12262: LD_INT 1
12264: PPUSH
12265: NOP4
// SetRestrict ( b_solar_power , side , true ) ;
12269: LD_INT 27
12271: PPUSH
12272: NOP4
12276: PPUSH
12277: LD_INT 1
12279: PPUSH
12280: NOP4
// SetRestrict ( b_siberite_power , side , true ) ;
12284: LD_INT 28
12286: PPUSH
12287: NOP4
12291: PPUSH
12292: LD_INT 1
12294: PPUSH
12295: NOP4
// SetRestrict ( b_oil_mine , side , true ) ;
12299: LD_INT 29
12301: PPUSH
12302: NOP4
12306: PPUSH
12307: LD_INT 1
12309: PPUSH
12310: NOP4
// SetRestrict ( b_siberite_mine , side , true ) ;
12314: LD_INT 30
12316: PPUSH
12317: NOP4
12321: PPUSH
12322: LD_INT 1
12324: PPUSH
12325: NOP4
// SetRestrict ( b_breastwork , side , true ) ;
12329: LD_INT 31
12331: PPUSH
12332: NOP4
12336: PPUSH
12337: LD_INT 1
12339: PPUSH
12340: NOP4
// SetRestrict ( b_bunker , side , true ) ;
12344: LD_INT 32
12346: PPUSH
12347: NOP4
12351: PPUSH
12352: LD_INT 1
12354: PPUSH
12355: NOP4
// SetRestrict ( b_turret , side , true ) ;
12359: LD_INT 33
12361: PPUSH
12362: NOP4
12366: PPUSH
12367: LD_INT 1
12369: PPUSH
12370: NOP4
// SetRestrict ( b_control_tower , side , true ) ;
12374: LD_INT 36
12376: PPUSH
12377: NOP4
12381: PPUSH
12382: LD_INT 1
12384: PPUSH
12385: NOP4
// end ; 6 :
12389: GO 13399
12391: LD_INT 6
12393: DOUBLE
12394: EQUAL
12395: IFTRUE 12399
12397: GO 13324
12399: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12400: LD_INT 35
12402: PPUSH
12403: NOP4
12407: PPUSH
12408: LD_INT 1
12410: PPUSH
12411: NOP4
// SetTech ( tech_soleng , side , state_enabled ) ;
12415: LD_INT 45
12417: PPUSH
12418: NOP4
12422: PPUSH
12423: LD_INT 1
12425: PPUSH
12426: NOP4
// SetTech ( tech_oilpow , side , state_enabled ) ;
12430: LD_INT 46
12432: PPUSH
12433: NOP4
12437: PPUSH
12438: LD_INT 1
12440: PPUSH
12441: NOP4
// SetTech ( tech_oileng , side , state_enabled ) ;
12445: LD_INT 47
12447: PPUSH
12448: NOP4
12452: PPUSH
12453: LD_INT 1
12455: PPUSH
12456: NOP4
// SetTech ( tech_apelang , side , state_enabled ) ;
12460: LD_INT 1
12462: PPUSH
12463: NOP4
12467: PPUSH
12468: LD_INT 1
12470: PPUSH
12471: NOP4
// SetTech ( tech_apepsych , side , state_enabled ) ;
12475: LD_INT 2
12477: PPUSH
12478: NOP4
12482: PPUSH
12483: LD_INT 1
12485: PPUSH
12486: NOP4
// SetTech ( tech_apeagres , side , state_enabled ) ;
12490: LD_INT 11
12492: PPUSH
12493: NOP4
12497: PPUSH
12498: LD_INT 1
12500: PPUSH
12501: NOP4
// SetTech ( tech_sibdet , side , state_enabled ) ;
12505: LD_INT 20
12507: PPUSH
12508: NOP4
12512: PPUSH
12513: LD_INT 1
12515: PPUSH
12516: NOP4
// SetTech ( tech_tech1 , side , state_enabled ) ;
12520: LD_INT 48
12522: PPUSH
12523: NOP4
12527: PPUSH
12528: LD_INT 1
12530: PPUSH
12531: NOP4
// SetTech ( tech_tech2 , side , state_enabled ) ;
12535: LD_INT 49
12537: PPUSH
12538: NOP4
12542: PPUSH
12543: LD_INT 1
12545: PPUSH
12546: NOP4
// SetTech ( tech_tech3 , side , state_enabled ) ;
12550: LD_INT 50
12552: PPUSH
12553: NOP4
12557: PPUSH
12558: LD_INT 1
12560: PPUSH
12561: NOP4
// SetTech ( tech_gatling , side , state_enabled ) ;
12565: LD_INT 69
12567: PPUSH
12568: NOP4
12572: PPUSH
12573: LD_INT 1
12575: PPUSH
12576: NOP4
// SetTech ( tech_gun , side , state_enabled ) ;
12580: LD_INT 39
12582: PPUSH
12583: NOP4
12587: PPUSH
12588: LD_INT 1
12590: PPUSH
12591: NOP4
// SetTech ( tech_advmet , side , state_enabled ) ;
12595: LD_INT 34
12597: PPUSH
12598: NOP4
12602: PPUSH
12603: LD_INT 1
12605: PPUSH
12606: NOP4
// SetTech ( tech_explos , side , state_enabled ) ;
12610: LD_INT 42
12612: PPUSH
12613: NOP4
12617: PPUSH
12618: LD_INT 1
12620: PPUSH
12621: NOP4
// SetTech ( tech_bazooka , side , state_enabled ) ;
12625: LD_INT 44
12627: PPUSH
12628: NOP4
12632: PPUSH
12633: LD_INT 1
12635: PPUSH
12636: NOP4
// SetTech ( tech_mortar , side , state_enabled ) ;
12640: LD_INT 41
12642: PPUSH
12643: NOP4
12647: PPUSH
12648: LD_INT 1
12650: PPUSH
12651: NOP4
// SetTech ( tech_soporific , side , state_enabled ) ;
12655: LD_INT 13
12657: PPUSH
12658: NOP4
12662: PPUSH
12663: LD_INT 1
12665: PPUSH
12666: NOP4
// SetTech ( tech_rocket , side , state_enabled ) ;
12670: LD_INT 40
12672: PPUSH
12673: NOP4
12677: PPUSH
12678: LD_INT 1
12680: PPUSH
12681: NOP4
// SetTech ( tech_selfdest , side , state_enabled ) ;
12685: LD_INT 43
12687: PPUSH
12688: NOP4
12692: PPUSH
12693: LD_INT 1
12695: PPUSH
12696: NOP4
// SetTech ( tech_flame , side , state_enabled ) ;
12700: LD_INT 70
12702: PPUSH
12703: NOP4
12707: PPUSH
12708: LD_INT 1
12710: PPUSH
12711: NOP4
// SetTech ( tech_behemoth , side , state_enabled ) ;
12715: LD_INT 23
12717: PPUSH
12718: NOP4
12722: PPUSH
12723: LD_INT 1
12725: PPUSH
12726: NOP4
// SetTech ( tech_weap1 , side , state_enabled ) ;
12730: LD_INT 51
12732: PPUSH
12733: NOP4
12737: PPUSH
12738: LD_INT 1
12740: PPUSH
12741: NOP4
// SetTech ( tech_weap2 , side , state_enabled ) ;
12745: LD_INT 52
12747: PPUSH
12748: NOP4
12752: PPUSH
12753: LD_INT 1
12755: PPUSH
12756: NOP4
// SetTech ( tech_radar , side , state_enabled ) ;
12760: LD_INT 6
12762: PPUSH
12763: NOP4
12767: PPUSH
12768: LD_INT 1
12770: PPUSH
12771: NOP4
// SetTech ( tech_remcont , side , state_enabled ) ;
12775: LD_INT 15
12777: PPUSH
12778: NOP4
12782: PPUSH
12783: LD_INT 1
12785: PPUSH
12786: NOP4
// SetTech ( tech_matdet , side , state_enabled ) ;
12790: LD_INT 7
12792: PPUSH
12793: NOP4
12797: PPUSH
12798: LD_INT 1
12800: PPUSH
12801: NOP4
// SetTech ( tech_lassight , side , state_enabled ) ;
12805: LD_INT 12
12807: PPUSH
12808: NOP4
12812: PPUSH
12813: LD_INT 1
12815: PPUSH
12816: NOP4
// SetTech ( tech_laser , side , state_enabled ) ;
12820: LD_INT 10
12822: PPUSH
12823: NOP4
12827: PPUSH
12828: LD_INT 1
12830: PPUSH
12831: NOP4
// SetTech ( tech_hidcam , side , state_enabled ) ;
12835: LD_INT 17
12837: PPUSH
12838: NOP4
12842: PPUSH
12843: LD_INT 1
12845: PPUSH
12846: NOP4
// SetTech ( tech_remcharge , side , state_enabled ) ;
12850: LD_INT 18
12852: PPUSH
12853: NOP4
12857: PPUSH
12858: LD_INT 1
12860: PPUSH
12861: NOP4
// SetTech ( tech_opto1 , side , state_enabled ) ;
12865: LD_INT 60
12867: PPUSH
12868: NOP4
12872: PPUSH
12873: LD_INT 1
12875: PPUSH
12876: NOP4
// SetTech ( tech_opto2 , side , state_enabled ) ;
12880: LD_INT 61
12882: PPUSH
12883: NOP4
12887: PPUSH
12888: LD_INT 1
12890: PPUSH
12891: NOP4
// SetTech ( tech_ai , side , state_enabled ) ;
12895: LD_INT 32
12897: PPUSH
12898: NOP4
12902: PPUSH
12903: LD_INT 1
12905: PPUSH
12906: NOP4
// SetTech ( tech_advai , side , state_enabled ) ;
12910: LD_INT 27
12912: PPUSH
12913: NOP4
12917: PPUSH
12918: LD_INT 1
12920: PPUSH
12921: NOP4
// SetTech ( tech_advchassis , side , state_enabled ) ;
12925: LD_INT 36
12927: PPUSH
12928: NOP4
12932: PPUSH
12933: LD_INT 1
12935: PPUSH
12936: NOP4
// SetTech ( tech_virus , side , state_enabled ) ;
12940: LD_INT 33
12942: PPUSH
12943: NOP4
12947: PPUSH
12948: LD_INT 1
12950: PPUSH
12951: NOP4
// SetTech ( tech_matpred , side , state_enabled ) ;
12955: LD_INT 9
12957: PPUSH
12958: NOP4
12962: PPUSH
12963: LD_INT 1
12965: PPUSH
12966: NOP4
// SetTech ( tech_targteleport , side , state_enabled ) ;
12970: LD_INT 38
12972: PPUSH
12973: NOP4
12977: PPUSH
12978: LD_INT 1
12980: PPUSH
12981: NOP4
// SetTech ( tech_comp1 , side , state_enabled ) ;
12985: LD_INT 57
12987: PPUSH
12988: NOP4
12992: PPUSH
12993: LD_INT 1
12995: PPUSH
12996: NOP4
// SetTech ( tech_comp2 , side , state_enabled ) ;
13000: LD_INT 58
13002: PPUSH
13003: NOP4
13007: PPUSH
13008: LD_INT 1
13010: PPUSH
13011: NOP4
// SetTech ( tech_taurad , side , state_enabled ) ;
13015: LD_INT 28
13017: PPUSH
13018: NOP4
13022: PPUSH
13023: LD_INT 1
13025: PPUSH
13026: NOP4
// SetTech ( tech_spacanom , side , state_enabled ) ;
13030: LD_INT 29
13032: PPUSH
13033: NOP4
13037: PPUSH
13038: LD_INT 1
13040: PPUSH
13041: NOP4
// SetTech ( tech_taufield , side , state_enabled ) ;
13045: LD_INT 30
13047: PPUSH
13048: NOP4
13052: PPUSH
13053: LD_INT 1
13055: PPUSH
13056: NOP4
// SetTech ( tech_limteleport , side , state_enabled ) ;
13060: LD_INT 37
13062: PPUSH
13063: NOP4
13067: PPUSH
13068: LD_INT 1
13070: PPUSH
13071: NOP4
// SetTech ( tech_st1 , side , state_enabled ) ;
13075: LD_INT 63
13077: PPUSH
13078: NOP4
13082: PPUSH
13083: LD_INT 1
13085: PPUSH
13086: NOP4
// SetTech ( tech_st2 , side , state_enabled ) ;
13090: LD_INT 64
13092: PPUSH
13093: NOP4
13097: PPUSH
13098: LD_INT 1
13100: PPUSH
13101: NOP4
// SetTech ( tech_apeneural , side , state_enabled ) ;
13105: LD_INT 3
13107: PPUSH
13108: NOP4
13112: PPUSH
13113: LD_INT 1
13115: PPUSH
13116: NOP4
// SetTech ( tech_apebrain , side , state_enabled ) ;
13120: LD_INT 4
13122: PPUSH
13123: NOP4
13127: PPUSH
13128: LD_INT 1
13130: PPUSH
13131: NOP4
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13135: LD_INT 5
13137: PPUSH
13138: NOP4
13142: PPUSH
13143: LD_INT 1
13145: PPUSH
13146: NOP4
// SetTech ( tech_biodet , side , state_enabled ) ;
13150: LD_INT 8
13152: PPUSH
13153: NOP4
13157: PPUSH
13158: LD_INT 1
13160: PPUSH
13161: NOP4
// SetTech ( tech_bio1 , side , state_enabled ) ;
13165: LD_INT 66
13167: PPUSH
13168: NOP4
13172: PPUSH
13173: LD_INT 1
13175: PPUSH
13176: NOP4
// SetTech ( tech_bio2 , side , state_enabled ) ;
13180: LD_INT 67
13182: PPUSH
13183: NOP4
13187: PPUSH
13188: LD_INT 1
13190: PPUSH
13191: NOP4
// SetTech ( tech_sibpow , side , state_enabled ) ;
13195: LD_INT 21
13197: PPUSH
13198: NOP4
13202: PPUSH
13203: LD_INT 1
13205: PPUSH
13206: NOP4
// SetTech ( tech_sibeng , side , state_enabled ) ;
13210: LD_INT 22
13212: PPUSH
13213: NOP4
13217: PPUSH
13218: LD_INT 1
13220: PPUSH
13221: NOP4
// SetTech ( tech_sibloc , side , state_enabled ) ;
13225: LD_INT 19
13227: PPUSH
13228: NOP4
13232: PPUSH
13233: LD_INT 1
13235: PPUSH
13236: NOP4
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13240: LD_INT 26
13242: PPUSH
13243: NOP4
13247: PPUSH
13248: LD_INT 1
13250: PPUSH
13251: NOP4
// SetTech ( tech_sib1 , side , state_enabled ) ;
13255: LD_INT 54
13257: PPUSH
13258: NOP4
13262: PPUSH
13263: LD_INT 1
13265: PPUSH
13266: NOP4
// SetTech ( tech_sib2 , side , state_enabled ) ;
13270: LD_INT 55
13272: PPUSH
13273: NOP4
13277: PPUSH
13278: LD_INT 1
13280: PPUSH
13281: NOP4
// for i = 0 to 39 do
13285: NOP4
13289: PUSH
13290: DOUBLE
13291: LD_INT 0
13293: DEC
13294: ST_TO_ADDR
13295: LD_INT 39
13297: PUSH
13298: FOR_TO
13299: IFFALSE 13320
// SetRestrict ( i , side , true ) ;
13301: NOP4
13305: PPUSH
13306: NOP4
13310: PPUSH
13311: LD_INT 1
13313: PPUSH
13314: NOP4
13318: GO 13298
13320: POP
13321: POP
// end ; else
13322: GO 13399
13324: POP
// begin for i = 1 to 73 do
13325: NOP4
13329: PUSH
13330: DOUBLE
13331: LD_INT 1
13333: DEC
13334: ST_TO_ADDR
13335: LD_INT 73
13337: PUSH
13338: FOR_TO
13339: IFFALSE 13360
// SetTech ( i , side , state_enabled ) ;
13341: NOP4
13345: PPUSH
13346: NOP4
13350: PPUSH
13351: LD_INT 1
13353: PPUSH
13354: NOP4
13358: GO 13338
13360: POP
13361: POP
// for i = 0 to 39 do
13362: NOP4
13366: PUSH
13367: DOUBLE
13368: LD_INT 0
13370: DEC
13371: ST_TO_ADDR
13372: LD_INT 39
13374: PUSH
13375: FOR_TO
13376: IFFALSE 13397
// SetRestrict ( i , side , true ) ;
13378: NOP4
13382: PPUSH
13383: NOP4
13387: PPUSH
13388: LD_INT 1
13390: PPUSH
13391: NOP4
13395: GO 13375
13397: POP
13398: POP
// end ; end ; end ;
13399: GO 9404
13401: POP
13402: POP
// end ; end_of_file
13403: LD_VAR 0 2
13407: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
13408: LD_INT 0
13410: PPUSH
13411: PPUSH
13412: PPUSH
13413: PPUSH
13414: PPUSH
13415: PPUSH
13416: PPUSH
13417: PPUSH
13418: PPUSH
// for i := 1 to 8 do
13419: NOP4
13423: PUSH
13424: DOUBLE
13425: LD_INT 1
13427: DEC
13428: ST_TO_ADDR
13429: LD_INT 8
13431: PUSH
13432: FOR_TO
13433: IFFALSE 13817
// begin if Side_Positions [ i ] then
13435: NOP4
13439: PUSH
13440: NOP4
13444: ARRAY
13445: IFFALSE 13815
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
13447: NOP4
13451: PUSH
13452: LD_INT 22
13454: PUSH
13455: NOP4
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 21
13466: PUSH
13467: LD_INT 1
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: PPUSH
13478: NOP4
13482: PUSH
13483: LD_INT 0
13485: PLUS
13486: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13487: NOP4
13491: PUSH
13492: LD_INT 22
13494: PUSH
13495: NOP4
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: PUSH
13504: LD_INT 2
13506: PUSH
13507: LD_INT 30
13509: PUSH
13510: LD_INT 0
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: PUSH
13517: LD_INT 30
13519: PUSH
13520: LD_INT 1
13522: PUSH
13523: EMPTY
13524: LIST
13525: LIST
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: LIST
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: PPUSH
13536: NOP4
13540: ST_TO_ADDR
// crates := 0 ;
13541: NOP4
13545: PUSH
13546: LD_INT 0
13548: ST_TO_ADDR
// oil := 0 ;
13549: NOP4
13553: PUSH
13554: LD_INT 0
13556: ST_TO_ADDR
// sib := 0 ;
13557: NOP4
13561: PUSH
13562: LD_INT 0
13564: ST_TO_ADDR
// if bases then
13565: NOP4
13569: IFFALSE 13675
// begin for j in bases do
13571: NOP4
13575: PUSH
13576: NOP4
13580: PUSH
13581: FOR_IN
13582: IFFALSE 13673
// begin base := GetBase ( j ) ;
13584: NOP4
13588: PUSH
13589: NOP4
13593: PPUSH
13594: NOP4
13598: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
13599: NOP4
13603: PUSH
13604: NOP4
13608: PUSH
13609: NOP4
13613: PPUSH
13614: LD_INT 1
13616: PPUSH
13617: NOP4
13621: PLUS
13622: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
13623: NOP4
13627: PUSH
13628: NOP4
13632: PUSH
13633: NOP4
13637: PPUSH
13638: LD_INT 2
13640: PPUSH
13641: NOP4
13645: PLUS
13646: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
13647: NOP4
13651: PUSH
13652: NOP4
13656: PUSH
13657: NOP4
13661: PPUSH
13662: LD_INT 3
13664: PPUSH
13665: NOP4
13669: PLUS
13670: ST_TO_ADDR
// end ;
13671: GO 13581
13673: POP
13674: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
13675: LD_STRING setSpecText(
13677: PUSH
13678: NOP4
13682: STR
13683: PUSH
13684: LD_STRING ,
13686: STR
13687: PUSH
13688: LD_INT 2
13690: STR
13691: PUSH
13692: LD_STRING ,
13694: STR
13695: PUSH
13696: NOP4
13700: STR
13701: PUSH
13702: LD_STRING )
13704: STR
13705: PPUSH
13706: NOP4
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
13710: LD_STRING setSpecText(
13712: PUSH
13713: NOP4
13717: STR
13718: PUSH
13719: LD_STRING ,
13721: STR
13722: PUSH
13723: LD_INT 3
13725: STR
13726: PUSH
13727: LD_STRING ,
13729: STR
13730: PUSH
13731: NOP4
13735: STR
13736: PUSH
13737: LD_STRING )
13739: STR
13740: PPUSH
13741: NOP4
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
13745: LD_STRING setSpecText(
13747: PUSH
13748: NOP4
13752: STR
13753: PUSH
13754: LD_STRING ,
13756: STR
13757: PUSH
13758: LD_INT 4
13760: STR
13761: PUSH
13762: LD_STRING ,
13764: STR
13765: PUSH
13766: NOP4
13770: STR
13771: PUSH
13772: LD_STRING )
13774: STR
13775: PPUSH
13776: NOP4
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
13780: LD_STRING setSpecText(
13782: PUSH
13783: NOP4
13787: STR
13788: PUSH
13789: LD_STRING ,
13791: STR
13792: PUSH
13793: LD_INT 5
13795: STR
13796: PUSH
13797: LD_STRING ,
13799: STR
13800: PUSH
13801: NOP4
13805: STR
13806: PUSH
13807: LD_STRING )
13809: STR
13810: PPUSH
13811: NOP4
// end ; end ;
13815: GO 13432
13817: POP
13818: POP
// end ;
13819: LD_VAR 0 1
13823: RET
// every 0 0$1 do
13824: GO 13826
13826: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
13827: LD_STRING setSpecLogoNumber(
13829: PUSH
13830: LD_INT 2
13832: STR
13833: PUSH
13834: LD_STRING ,
13836: STR
13837: PUSH
13838: LD_INT 1
13840: STR
13841: PUSH
13842: LD_STRING )
13844: STR
13845: PPUSH
13846: NOP4
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
13850: LD_STRING setSpecLogoNumber(
13852: PUSH
13853: LD_INT 3
13855: STR
13856: PUSH
13857: LD_STRING ,
13859: STR
13860: PUSH
13861: LD_INT 2
13863: STR
13864: PUSH
13865: LD_STRING )
13867: STR
13868: PPUSH
13869: NOP4
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
13873: LD_STRING setSpecLogoNumber(
13875: PUSH
13876: LD_INT 4
13878: STR
13879: PUSH
13880: LD_STRING ,
13882: STR
13883: PUSH
13884: LD_INT 3
13886: STR
13887: PUSH
13888: LD_STRING )
13890: STR
13891: PPUSH
13892: NOP4
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
13896: LD_STRING setSpecLogoNumber(
13898: PUSH
13899: LD_INT 5
13901: STR
13902: PUSH
13903: LD_STRING ,
13905: STR
13906: PUSH
13907: LD_INT 4
13909: STR
13910: PUSH
13911: LD_STRING )
13913: STR
13914: PPUSH
13915: NOP4
// end ;
13919: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
13920: LD_INT 2
13922: PUSH
13923: LD_INT 30
13925: PUSH
13926: LD_INT 0
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: PUSH
13933: LD_INT 30
13935: PUSH
13936: LD_INT 1
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: PUSH
13943: EMPTY
13944: LIST
13945: LIST
13946: LIST
13947: PPUSH
13948: NOP4
13952: IFFALSE 13962
13954: GO 13956
13956: DISABLE
// begin enable ;
13957: ENABLE
// UpdateSpectatorBar ;
13958: NOP4
// end ; end_of_file
13962: END
// var respawn , inqueue ; export function init_respawning ; begin
13963: LD_INT 0
13965: PPUSH
// respawn := Rand ( 1 , 8 ) ;
13966: NOP4
13970: PUSH
13971: LD_INT 1
13973: PPUSH
13974: LD_INT 8
13976: PPUSH
13977: NOP4
13981: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13982: NOP4
13986: PUSH
13987: LD_INT 0
13989: PUSH
13990: LD_INT 0
13992: PUSH
13993: LD_INT 0
13995: PUSH
13996: LD_INT 0
13998: PUSH
13999: LD_INT 0
14001: PUSH
14002: LD_INT 0
14004: PUSH
14005: LD_INT 0
14007: PUSH
14008: LD_INT 0
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: ST_TO_ADDR
// end ;
14021: LD_VAR 0 1
14025: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
14026: GO 14028
14028: DISABLE
14029: LD_INT 0
14031: PPUSH
14032: PPUSH
14033: PPUSH
// begin if respawning_time_max = 0 then
14034: NOP4
14038: PUSH
14039: LD_INT 0
14041: EQUAL
14042: IFFALSE 14046
// exit ;
14044: GO 14454
// if respawn = 8 then
14046: NOP4
14050: PUSH
14051: LD_INT 8
14053: EQUAL
14054: IFFALSE 14066
// respawn := 1 else
14056: NOP4
14060: PUSH
14061: LD_INT 1
14063: ST_TO_ADDR
14064: GO 14080
// respawn := respawn + 1 ;
14066: NOP4
14070: PUSH
14071: NOP4
14075: PUSH
14076: LD_INT 1
14078: PLUS
14079: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
14080: NOP4
14084: PUSH
14085: NOP4
14089: ARRAY
14090: PUSH
14091: NOP4
14095: PUSH
14096: NOP4
14100: ARRAY
14101: NOT
14102: AND
14103: IFFALSE 14453
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
14105: NOP4
14109: PUSH
14110: LD_INT 21
14112: PUSH
14113: LD_INT 1
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PUSH
14120: LD_INT 22
14122: PUSH
14123: NOP4
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: PUSH
14132: LD_INT 3
14134: PUSH
14135: LD_INT 23
14137: PUSH
14138: LD_INT 0
14140: PUSH
14141: EMPTY
14142: LIST
14143: LIST
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: PPUSH
14151: NOP4
14155: ST_TO_ADDR
// if n < number_of_people then
14156: NOP4
14160: PUSH
14161: NOP4
14165: LESS
14166: IFFALSE 14450
// begin aktresp := respawn ;
14168: NOP4
14172: PUSH
14173: NOP4
14177: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
14178: NOP4
14182: PUSH
14183: NOP4
14187: PPUSH
14188: NOP4
14192: PPUSH
14193: LD_INT 1
14195: PPUSH
14196: NOP4
14200: ST_TO_ADDR
// enable ;
14201: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
14202: NOP4
14206: PPUSH
14207: NOP4
14211: PPUSH
14212: NOP4
14216: PPUSH
14217: NOP4
// inqueue := Replace ( inqueue , aktresp , false ) ;
14221: NOP4
14225: PUSH
14226: NOP4
14230: PPUSH
14231: NOP4
14235: PPUSH
14236: LD_INT 0
14238: PPUSH
14239: NOP4
14243: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
14244: NOP4
14248: PUSH
14249: LD_INT 21
14251: PUSH
14252: LD_INT 3
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: PUSH
14259: LD_INT 2
14261: PUSH
14262: LD_INT 30
14264: PUSH
14265: LD_INT 0
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PUSH
14272: LD_INT 30
14274: PUSH
14275: LD_INT 1
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: LIST
14286: PUSH
14287: LD_INT 50
14289: PUSH
14290: EMPTY
14291: LIST
14292: PUSH
14293: LD_INT 22
14295: PUSH
14296: NOP4
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: PPUSH
14311: NOP4
14315: ST_TO_ADDR
// if dep = 0 then
14316: NOP4
14320: PUSH
14321: LD_INT 0
14323: EQUAL
14324: IFFALSE 14328
// exit ;
14326: GO 14454
// hc_name :=  ;
14328: LD_ADDR_OWVAR 26
14332: PUSH
14333: LD_STRING 
14335: ST_TO_ADDR
// hc_importance := 0 ;
14336: LD_ADDR_OWVAR 32
14340: PUSH
14341: LD_INT 0
14343: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
14344: LD_INT 0
14346: PPUSH
14347: LD_INT 0
14349: PPUSH
14350: NOP4
14354: PUSH
14355: LD_INT 2
14357: DIV
14358: PPUSH
14359: NOP4
// uc_nation := Side_Nations [ aktresp ] ;
14363: LD_ADDR_OWVAR 21
14367: PUSH
14368: NOP4
14372: PUSH
14373: NOP4
14377: ARRAY
14378: ST_TO_ADDR
// uc_side := aktresp ;
14379: LD_ADDR_OWVAR 20
14383: PUSH
14384: NOP4
14388: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
14389: NOP4
14393: PUSH
14394: NOP4
14398: PUSH
14399: LD_INT 1
14401: PPUSH
14402: NOP4
14406: PPUSH
14407: NOP4
14411: ARRAY
14412: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
14413: NOP4
14417: PPUSH
14418: NOP4
14422: PPUSH
14423: NOP4
14427: PPUSH
14428: NOP4
14432: PPUSH
14433: NOP4
14437: PPUSH
14438: LD_INT 7
14440: PPUSH
14441: LD_INT 1
14443: PPUSH
14444: NOP4
// end else
14448: GO 14451
// enable ;
14450: ENABLE
// end else
14451: GO 14454
// enable ;
14453: ENABLE
// end ; end_of_file
14454: PPOPN 3
14456: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
14457: LD_INT 0
14459: PPUSH
14460: PPUSH
14461: PPUSH
// BuildUpTime_Delay = 0 ;
14462: NOP4
14466: PUSH
14467: LD_INT 0
14469: ST_TO_ADDR
// if not def_builduptime then
14470: NOP4
14474: NOT
14475: IFFALSE 14479
// exit ;
14477: GO 14662
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
14479: NOP4
14483: PUSH
14484: LD_INT 8400
14486: PUSH
14487: LD_INT 2100
14489: PUSH
14490: NOP4
14494: MUL
14495: PLUS
14496: ST_TO_ADDR
// BuildUpTimeActive := true ;
14497: NOP4
14501: PUSH
14502: LD_INT 1
14504: ST_TO_ADDR
// for i := 1 to 8 do
14505: NOP4
14509: PUSH
14510: DOUBLE
14511: LD_INT 1
14513: DEC
14514: ST_TO_ADDR
14515: LD_INT 8
14517: PUSH
14518: FOR_TO
14519: IFFALSE 14660
// if Side_Positions [ i ] then
14521: NOP4
14525: PUSH
14526: NOP4
14530: ARRAY
14531: IFFALSE 14658
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
14533: NOP4
14537: PUSH
14538: NOP4
14542: PUSH
14543: NOP4
14547: ARRAY
14548: ARRAY
14549: PPUSH
14550: LD_INT 5
14552: PPUSH
14553: NOP4
// for j := 1 to 8 do
14557: NOP4
14561: PUSH
14562: DOUBLE
14563: LD_INT 1
14565: DEC
14566: ST_TO_ADDR
14567: LD_INT 8
14569: PUSH
14570: FOR_TO
14571: IFFALSE 14656
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14573: NOP4
14577: PUSH
14578: NOP4
14582: ARRAY
14583: PUSH
14584: NOP4
14588: PUSH
14589: NOP4
14593: ARRAY
14594: PUSH
14595: NOP4
14599: PUSH
14600: NOP4
14604: ARRAY
14605: NONEQUAL
14606: PUSH
14607: NOP4
14611: NOT
14612: PUSH
14613: NOP4
14617: PUSH
14618: NOP4
14622: NONEQUAL
14623: AND
14624: OR
14625: AND
14626: IFFALSE 14654
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14628: NOP4
14632: PPUSH
14633: NOP4
14637: PUSH
14638: NOP4
14642: PUSH
14643: NOP4
14647: ARRAY
14648: ARRAY
14649: PPUSH
14650: NOP4
14654: GO 14570
14656: POP
14657: POP
// end ;
14658: GO 14518
14660: POP
14661: POP
// end ;
14662: LD_VAR 0 1
14666: RET
// export function EndBuildUp ; var i , j ; begin
14667: LD_INT 0
14669: PPUSH
14670: PPUSH
14671: PPUSH
// BuildUpTimeActive := false ;
14672: NOP4
14676: PUSH
14677: LD_INT 0
14679: ST_TO_ADDR
// for i := 1 to 8 do
14680: NOP4
14684: PUSH
14685: DOUBLE
14686: LD_INT 1
14688: DEC
14689: ST_TO_ADDR
14690: LD_INT 8
14692: PUSH
14693: FOR_TO
14694: IFFALSE 14835
// if Side_Positions [ i ] then
14696: NOP4
14700: PUSH
14701: NOP4
14705: ARRAY
14706: IFFALSE 14833
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
14708: NOP4
14712: PUSH
14713: NOP4
14717: PUSH
14718: NOP4
14722: ARRAY
14723: ARRAY
14724: PPUSH
14725: LD_INT 0
14727: PPUSH
14728: NOP4
// for j := 1 to 8 do
14732: NOP4
14736: PUSH
14737: DOUBLE
14738: LD_INT 1
14740: DEC
14741: ST_TO_ADDR
14742: LD_INT 8
14744: PUSH
14745: FOR_TO
14746: IFFALSE 14831
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14748: NOP4
14752: PUSH
14753: NOP4
14757: ARRAY
14758: PUSH
14759: NOP4
14763: PUSH
14764: NOP4
14768: ARRAY
14769: PUSH
14770: NOP4
14774: PUSH
14775: NOP4
14779: ARRAY
14780: NONEQUAL
14781: PUSH
14782: NOP4
14786: NOT
14787: PUSH
14788: NOP4
14792: PUSH
14793: NOP4
14797: NONEQUAL
14798: AND
14799: OR
14800: AND
14801: IFFALSE 14829
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14803: NOP4
14807: PPUSH
14808: NOP4
14812: PUSH
14813: NOP4
14817: PUSH
14818: NOP4
14822: ARRAY
14823: ARRAY
14824: PPUSH
14825: NOP4
14829: GO 14745
14831: POP
14832: POP
// end ;
14833: GO 14693
14835: POP
14836: POP
// end ;
14837: LD_VAR 0 1
14841: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
14842: NOP4
14846: IFFALSE 15021
14848: GO 14850
14850: DISABLE
14851: LD_INT 0
14853: PPUSH
14854: PPUSH
// begin for i := 1 to 8 do
14855: NOP4
14859: PUSH
14860: DOUBLE
14861: LD_INT 1
14863: DEC
14864: ST_TO_ADDR
14865: LD_INT 8
14867: PUSH
14868: FOR_TO
14869: IFFALSE 15018
// if Side_Positions [ i ] then
14871: NOP4
14875: PUSH
14876: NOP4
14880: ARRAY
14881: IFFALSE 15016
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
14883: NOP4
14887: PUSH
14888: NOP4
14892: PUSH
14893: NOP4
14897: PUSH
14898: NOP4
14902: ARRAY
14903: ARRAY
14904: PPUSH
14905: LD_INT 2
14907: PUSH
14908: LD_INT 21
14910: PUSH
14911: LD_INT 1
14913: PUSH
14914: EMPTY
14915: LIST
14916: LIST
14917: PUSH
14918: LD_INT 21
14920: PUSH
14921: LD_INT 2
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: PUSH
14928: EMPTY
14929: LIST
14930: LIST
14931: LIST
14932: PUSH
14933: LD_INT 22
14935: PUSH
14936: NOP4
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: PPUSH
14949: NOP4
14953: PUSH
14954: FOR_IN
14955: IFFALSE 15014
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
14957: NOP4
14961: PUSH
14962: NOP4
14966: ARRAY
14967: PUSH
14968: NOP4
14972: PUSH
14973: NOP4
14977: ARRAY
14978: NONEQUAL
14979: PUSH
14980: NOP4
14984: NOT
14985: PUSH
14986: NOP4
14990: PUSH
14991: NOP4
14995: NONEQUAL
14996: AND
14997: OR
14998: IFFALSE 15012
// ComMoveToArea ( un , BuildUpEscape ) ;
15000: NOP4
15004: PPUSH
15005: LD_INT 16
15007: PPUSH
15008: NOP4
15012: GO 14954
15014: POP
15015: POP
15016: GO 14868
15018: POP
15019: POP
// enable ;
15020: ENABLE
// end ;
15021: PPOPN 2
15023: END
// every 0 0$1 trigger def_builduptime do
15024: NOP4
15028: IFFALSE 15054
15030: GO 15032
15032: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
15033: LD_INT 8400
15035: PUSH
15036: NOP4
15040: PUSH
15041: LD_INT 2100
15043: MUL
15044: PLUS
15045: PPUSH
15046: NOP4
// EndBuildUp ;
15050: NOP4
// end ; end_of_file
15054: END
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
15055: LD_INT 0
15057: PPUSH
15058: PPUSH
// enable ( 98 ) ;
15059: LD_INT 98
15061: ENABLE_MARKED
// GameEnded = false ;
15062: NOP4
15066: PUSH
15067: LD_INT 0
15069: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
15070: NOP4
15074: PUSH
15075: LD_INT 0
15077: PUSH
15078: LD_INT 0
15080: PUSH
15081: LD_INT 0
15083: PUSH
15084: LD_INT 0
15086: PUSH
15087: LD_INT 0
15089: PUSH
15090: LD_INT 0
15092: PUSH
15093: LD_INT 0
15095: PUSH
15096: LD_INT 0
15098: PUSH
15099: EMPTY
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: ST_TO_ADDR
// unfoged = false ;
15109: NOP4
15113: PUSH
15114: LD_INT 0
15116: ST_TO_ADDR
// defeated_specs := [ ] ;
15117: NOP4
15121: PUSH
15122: EMPTY
15123: ST_TO_ADDR
// for i = 1 to side_positions do
15124: NOP4
15128: PUSH
15129: DOUBLE
15130: LD_INT 1
15132: DEC
15133: ST_TO_ADDR
15134: NOP4
15138: PUSH
15139: FOR_TO
15140: IFFALSE 15180
// if not side_positions [ i ] then
15142: NOP4
15146: PUSH
15147: NOP4
15151: ARRAY
15152: NOT
15153: IFFALSE 15178
// defeated = replace ( defeated , i , true ) ;
15155: NOP4
15159: PUSH
15160: NOP4
15164: PPUSH
15165: NOP4
15169: PPUSH
15170: LD_INT 1
15172: PPUSH
15173: NOP4
15177: ST_TO_ADDR
15178: GO 15139
15180: POP
15181: POP
// end ;
15182: LD_VAR 0 1
15186: RET
// function CanWinLoose ; begin
15187: LD_INT 0
15189: PPUSH
// Result := true ;
15190: NOP4
15194: PUSH
15195: LD_INT 1
15197: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
15198: NOP4
15202: PUSH
15203: NOP4
15207: PUSH
15208: LD_INT 0
15210: GREATER
15211: AND
15212: IFFALSE 15222
// Result := false ;
15214: NOP4
15218: PUSH
15219: LD_INT 0
15221: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
15222: NOP4
15226: PUSH
15227: NOP4
15231: PUSH
15232: LD_INT 1
15234: GREATER
15235: AND
15236: IFFALSE 15246
// Result := false ;
15238: NOP4
15242: PUSH
15243: LD_INT 0
15245: ST_TO_ADDR
// end ;
15246: LD_VAR 0 1
15250: RET
// export function HasPower ( i ) ; var k , h ; begin
15251: LD_INT 0
15253: PPUSH
15254: PPUSH
15255: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
15256: NOP4
15260: PPUSH
15261: NOP4
15265: NOT
15266: PUSH
15267: NOP4
15271: PUSH
15272: NOP4
15276: ARRAY
15277: NOT
15278: AND
15279: PUSH
15280: NOP4
15284: AND
15285: IFFALSE 15297
// begin result = false ;
15287: NOP4
15291: PUSH
15292: LD_INT 0
15294: ST_TO_ADDR
// end else
15295: GO 15592
// case def_win_rules of 0 :
15297: NOP4
15301: PUSH
15302: LD_INT 0
15304: DOUBLE
15305: EQUAL
15306: IFTRUE 15310
15308: GO 15473
15310: POP
// if def_people_respawning then
15311: NOP4
15315: IFFALSE 15406
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
15317: NOP4
15321: PUSH
15322: LD_INT 22
15324: PUSH
15325: NOP4
15329: PUSH
15330: EMPTY
15331: LIST
15332: LIST
15333: PUSH
15334: LD_INT 2
15336: PUSH
15337: LD_INT 21
15339: PUSH
15340: LD_INT 1
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PUSH
15347: LD_INT 33
15349: PUSH
15350: LD_INT 3
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PUSH
15357: LD_INT 33
15359: PUSH
15360: LD_INT 5
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PUSH
15367: LD_INT 30
15369: PUSH
15370: LD_INT 0
15372: PUSH
15373: EMPTY
15374: LIST
15375: LIST
15376: PUSH
15377: LD_INT 30
15379: PUSH
15380: LD_INT 1
15382: PUSH
15383: EMPTY
15384: LIST
15385: LIST
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PPUSH
15399: NOP4
15403: ST_TO_ADDR
15404: GO 15471
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
15406: NOP4
15410: PUSH
15411: LD_INT 22
15413: PUSH
15414: NOP4
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: LD_INT 2
15425: PUSH
15426: LD_INT 21
15428: PUSH
15429: LD_INT 1
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: PUSH
15436: LD_INT 33
15438: PUSH
15439: LD_INT 3
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: PUSH
15446: LD_INT 33
15448: PUSH
15449: LD_INT 5
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: PUSH
15456: EMPTY
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: PPUSH
15466: NOP4
15470: ST_TO_ADDR
15471: GO 15592
15473: LD_INT 1
15475: DOUBLE
15476: EQUAL
15477: IFTRUE 15481
15479: GO 15520
15481: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
15482: NOP4
15486: PUSH
15487: LD_INT 22
15489: PUSH
15490: NOP4
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PUSH
15499: LD_INT 21
15501: PUSH
15502: LD_INT 1
15504: PUSH
15505: EMPTY
15506: LIST
15507: LIST
15508: PUSH
15509: EMPTY
15510: LIST
15511: LIST
15512: PPUSH
15513: NOP4
15517: ST_TO_ADDR
15518: GO 15592
15520: LD_INT 2
15522: DOUBLE
15523: EQUAL
15524: IFTRUE 15528
15526: GO 15591
15528: POP
// begin h = false ;
15529: NOP4
15533: PUSH
15534: LD_INT 0
15536: ST_TO_ADDR
// for k in heroes [ i ] do
15537: NOP4
15541: PUSH
15542: NOP4
15546: PUSH
15547: NOP4
15551: ARRAY
15552: PUSH
15553: FOR_IN
15554: IFFALSE 15577
// if IsLive ( k ) then
15556: NOP4
15560: PPUSH
15561: NOP4
15565: IFFALSE 15575
// h = true ;
15567: NOP4
15571: PUSH
15572: LD_INT 1
15574: ST_TO_ADDR
15575: GO 15553
15577: POP
15578: POP
// Result := h ;
15579: NOP4
15583: PUSH
15584: NOP4
15588: ST_TO_ADDR
// end ; end ;
15589: GO 15592
15591: POP
// end ;
15592: LD_VAR 0 2
15596: RET
// function AlliedSides ( i , j ) ; begin
15597: LD_INT 0
15599: PPUSH
// Result := false ;
15600: NOP4
15604: PUSH
15605: LD_INT 0
15607: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
15608: NOP4
15612: PPUSH
15613: NOP4
15617: PPUSH
15618: NOP4
15622: PUSH
15623: LD_INT 1
15625: EQUAL
15626: PUSH
15627: NOP4
15631: PPUSH
15632: NOP4
15636: PPUSH
15637: NOP4
15641: PUSH
15642: LD_INT 1
15644: EQUAL
15645: AND
15646: PUSH
15647: NOP4
15651: PPUSH
15652: NOP4
15656: AND
15657: PUSH
15658: NOP4
15662: PPUSH
15663: NOP4
15667: AND
15668: IFFALSE 15678
// Result := true ;
15670: NOP4
15674: PUSH
15675: LD_INT 1
15677: ST_TO_ADDR
// end ;
15678: LD_VAR 0 3
15682: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
15683: NOP4
15687: PUSH
15688: NOP4
15692: NOT
15693: AND
15694: IFFALSE 15710
15696: GO 15698
15698: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
15699: NOP4
15703: PUSH
15704: LD_STRING #Player-Ended
15706: PUSH
15707: EMPTY
15708: LIST
15709: ST_TO_ADDR
15710: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
15711: NOP4
15715: PUSH
15716: NOP4
15720: AND
15721: IFFALSE 15730
15723: GO 15725
15725: DISABLE
// YouLostInMultiplayer ;
15726: NOP4
15730: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
15731: NOP4
15735: NOT
15736: PUSH
15737: NOP4
15741: NOT
15742: AND
15743: IFFALSE 15759
15745: GO 15747
15747: DISABLE
// WaitServerStrings = [ #server-wait ] ;
15748: NOP4
15752: PUSH
15753: LD_STRING #server-wait
15755: PUSH
15756: EMPTY
15757: LIST
15758: ST_TO_ADDR
15759: END
// every 100 trigger IAmSpec do
15760: NOP4
15764: IFFALSE 15780
15766: GO 15768
15768: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
15769: NOP4
15773: PUSH
15774: LD_STRING #Player-IAmSpec
15776: PUSH
15777: EMPTY
15778: LIST
15779: ST_TO_ADDR
15780: END
// every 100 trigger GameEnded and IAmSpec do
15781: NOP4
15785: PUSH
15786: NOP4
15790: AND
15791: IFFALSE 15800
15793: GO 15795
15795: DISABLE
// YouLostInMultiplayer ;
15796: NOP4
15800: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
15801: NOP4
15805: PUSH
15806: NOP4
15810: NOT
15811: AND
15812: IFFALSE 15828
15814: GO 15816
15816: DISABLE
// WaitServerStrings = [ $player-win ] ;
15817: NOP4
15821: PUSH
15822: LD_STRING $player-win
15824: PUSH
15825: EMPTY
15826: LIST
15827: ST_TO_ADDR
15828: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
15829: NOP4
15833: PUSH
15834: NOP4
15838: AND
15839: IFFALSE 15863
15841: GO 15843
15843: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
15844: NOP4
15848: PUSH
15849: NOP4
15853: ARRAY
15854: PPUSH
15855: NOP4
// YouWinInMultiplayer ;
15859: NOP4
// end ;
15863: END
// every 100 trigger isEditor marked 401 do
15864: NOP4
15868: IFFALSE 15884
15870: GO 15872
15872: DISABLE
// Debug_Strings = [ You won ] ;
15873: LD_ADDR_OWVAR 48
15877: PUSH
15878: LD_STRING You won
15880: PUSH
15881: EMPTY
15882: LIST
15883: ST_TO_ADDR
15884: END
// every 100 trigger isEditor marked 400 do
15885: NOP4
15889: IFFALSE 15905
15891: GO 15893
15893: DISABLE
// Debug_Strings = [ You loss ] ;
15894: LD_ADDR_OWVAR 48
15898: PUSH
15899: LD_STRING You loss
15901: PUSH
15902: EMPTY
15903: LIST
15904: ST_TO_ADDR
15905: END
// every 100 marked 98 do var i , un ;
15906: GO 15908
15908: DISABLE
15909: LD_INT 0
15911: PPUSH
15912: PPUSH
// begin for i = 1 to side_positions do
15913: NOP4
15917: PUSH
15918: DOUBLE
15919: LD_INT 1
15921: DEC
15922: ST_TO_ADDR
15923: NOP4
15927: PUSH
15928: FOR_TO
15929: IFFALSE 16016
// begin if side_positions [ i ] then
15931: NOP4
15935: PUSH
15936: NOP4
15940: ARRAY
15941: IFFALSE 16014
// if not HasPower ( i ) and not defeated [ i ] then
15943: NOP4
15947: PPUSH
15948: NOP4
15952: NOT
15953: PUSH
15954: NOP4
15958: PUSH
15959: NOP4
15963: ARRAY
15964: NOT
15965: AND
15966: IFFALSE 16014
// begin defeated = replace ( defeated , i , true ) ;
15968: NOP4
15972: PUSH
15973: NOP4
15977: PPUSH
15978: NOP4
15982: PPUSH
15983: LD_INT 1
15985: PPUSH
15986: NOP4
15990: ST_TO_ADDR
// if i = mp_player_side then
15991: NOP4
15995: PUSH
15996: NOP4
16000: EQUAL
16001: IFFALSE 16014
// begin Multiplayer_Loose_Message ;
16003: NOP4
// SetPlayerSpectator ( ) ;
16007: NOP4
// enable ( 400 ) ;
16011: LD_INT 400
16013: ENABLE_MARKED
// end ; end ; end ;
16014: GO 15928
16016: POP
16017: POP
// DidGameEnd ;
16018: NOP4
// if not GameEnded then
16022: NOP4
16026: NOT
16027: IFFALSE 16030
// enable ;
16029: ENABLE
// end ;
16030: PPOPN 2
16032: END
// function DidGameEnd ; var i , k , enemy ; begin
16033: LD_INT 0
16035: PPUSH
16036: PPUSH
16037: PPUSH
16038: PPUSH
// enemy = [ ] ;
16039: NOP4
16043: PUSH
16044: EMPTY
16045: ST_TO_ADDR
// for i = 1 to side_positions do
16046: NOP4
16050: PUSH
16051: DOUBLE
16052: LD_INT 1
16054: DEC
16055: ST_TO_ADDR
16056: NOP4
16060: PUSH
16061: FOR_TO
16062: IFFALSE 16156
// if not defeated [ i ] then
16064: NOP4
16068: PUSH
16069: NOP4
16073: ARRAY
16074: NOT
16075: IFFALSE 16154
// for k = 1 to side_positions do
16077: NOP4
16081: PUSH
16082: DOUBLE
16083: LD_INT 1
16085: DEC
16086: ST_TO_ADDR
16087: NOP4
16091: PUSH
16092: FOR_TO
16093: IFFALSE 16152
// if not defeated [ k ] then
16095: NOP4
16099: PUSH
16100: NOP4
16104: ARRAY
16105: NOT
16106: IFFALSE 16150
// if not AlliedSides ( i , k ) then
16108: NOP4
16112: PPUSH
16113: NOP4
16117: PPUSH
16118: NOP4
16122: NOT
16123: IFFALSE 16150
// enemy = enemy ^ [ i , k ] ;
16125: NOP4
16129: PUSH
16130: NOP4
16134: PUSH
16135: NOP4
16139: PUSH
16140: NOP4
16144: PUSH
16145: EMPTY
16146: LIST
16147: LIST
16148: ADD
16149: ST_TO_ADDR
16150: GO 16092
16152: POP
16153: POP
16154: GO 16061
16156: POP
16157: POP
// if not enemy then
16158: NOP4
16162: NOT
16163: IFFALSE 16189
// begin GameEnded = true ;
16165: NOP4
16169: PUSH
16170: LD_INT 1
16172: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
16173: NOP4
16177: PUSH
16178: NOP4
16182: ARRAY
16183: NOT
16184: IFFALSE 16189
// enable ( 401 ) ;
16186: LD_INT 401
16188: ENABLE_MARKED
// end ; end ;
16189: LD_VAR 0 1
16193: RET
// function unfog ; var k , friends ; begin
16194: LD_INT 0
16196: PPUSH
16197: PPUSH
16198: PPUSH
// for k = 1 to side_positions do
16199: NOP4
16203: PUSH
16204: DOUBLE
16205: LD_INT 1
16207: DEC
16208: ST_TO_ADDR
16209: NOP4
16213: PUSH
16214: FOR_TO
16215: IFFALSE 16271
// if not defeated [ k ] then
16217: NOP4
16221: PUSH
16222: NOP4
16226: ARRAY
16227: NOT
16228: IFFALSE 16269
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
16230: NOP4
16234: PPUSH
16235: NOP4
16239: PPUSH
16240: NOP4
16244: PUSH
16245: LD_INT 1
16247: PUSH
16248: EMPTY
16249: LIST
16250: IN
16251: IFFALSE 16269
// friends = friends ^ k ;
16253: NOP4
16257: PUSH
16258: NOP4
16262: PUSH
16263: NOP4
16267: ADD
16268: ST_TO_ADDR
16269: GO 16214
16271: POP
16272: POP
// if not friends then
16273: NOP4
16277: NOT
16278: IFFALSE 16292
// begin SetPlayerSpectator ( ) ;
16280: NOP4
// unfoged = true ;
16284: NOP4
16288: PUSH
16289: LD_INT 1
16291: ST_TO_ADDR
// end ; end ;
16292: LD_VAR 0 1
16296: RET
// export function MakeGameEnd ; begin
16297: LD_INT 0
16299: PPUSH
// SetPlayerSpectator ( ) ;
16300: NOP4
// unfoged = true ;
16304: NOP4
16308: PUSH
16309: LD_INT 1
16311: ST_TO_ADDR
// wait ( 0 0$5 ) ;
16312: LD_INT 175
16314: PPUSH
16315: NOP4
// GameEnded = true ;
16319: NOP4
16323: PUSH
16324: LD_INT 1
16326: ST_TO_ADDR
// end ;
16327: LD_VAR 0 1
16331: RET
// export function GetGameEnded ; begin
16332: LD_INT 0
16334: PPUSH
// result = GameEnded ;
16335: NOP4
16339: PUSH
16340: NOP4
16344: ST_TO_ADDR
// end ;
16345: LD_VAR 0 1
16349: RET
