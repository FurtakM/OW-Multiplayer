// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_amount_of_siberit , def_public_score , def_siberite_bomb , def_builduptime , def_game_rules , def_sheik , def_mastodont ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id , def_win_rules , heroes , sheik , mastodont ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function read_multiplayer_and_game_parameters ; var i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// if Multiplayer then
   4: LD_OWVAR 4
   8: IFFALSE 72
// begin Game_Type := mp_game_type ;
  10: LD_ADDR_EXP 21
  14: PUSH
  15: LD_OWVAR 6
  19: ST_TO_ADDR
// Your_Side := mp_player_side ;
  20: LD_ADDR_OWVAR 2
  24: PUSH
  25: LD_OWVAR 7
  29: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  30: LD_ADDR_EXP 38
  34: PUSH
  35: LD_OWVAR 17
  39: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  40: LD_ADDR_EXP 35
  44: PUSH
  45: LD_OWVAR 15
  49: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
  50: LD_ADDR_EXP 39
  54: PUSH
  55: LD_OWVAR 16
  59: ST_TO_ADDR
// Teams := mp_teams ;
  60: LD_ADDR_EXP 36
  64: PUSH
  65: LD_OWVAR 12
  69: ST_TO_ADDR
// end else
  70: GO 293
// begin Game_Type := 1 ;
  72: LD_ADDR_EXP 21
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// Your_Side := 3 ;
  80: LD_ADDR_OWVAR 2
  84: PUSH
  85: LD_INT 3
  87: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
  88: LD_ADDR_EXP 38
  92: PUSH
  93: LD_INT 1
  95: PUSH
  96: LD_INT 2
  98: PUSH
  99: LD_INT 3
 101: PUSH
 102: LD_INT 4
 104: PUSH
 105: LD_INT 5
 107: PUSH
 108: LD_INT 6
 110: PUSH
 111: LD_INT 0
 113: PUSH
 114: LD_INT 0
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: LIST
 126: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 127: LD_ADDR_EXP 35
 131: PUSH
 132: LD_INT 1
 134: PUSH
 135: LD_INT 2
 137: PUSH
 138: LD_INT 3
 140: PUSH
 141: LD_INT 4
 143: PUSH
 144: LD_INT 5
 146: PUSH
 147: LD_INT 6
 149: PUSH
 150: LD_INT 0
 152: PUSH
 153: LD_INT 0
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: LIST
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 166: LD_ADDR_EXP 39
 170: PUSH
 171: LD_INT 1
 173: PUSH
 174: LD_INT 2
 176: PUSH
 177: LD_INT 3
 179: PUSH
 180: LD_INT 1
 182: PUSH
 183: LD_INT 2
 185: PUSH
 186: LD_INT 3
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 0
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: ST_TO_ADDR
// Side_Comps := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 205: LD_ADDR_EXP 37
 209: PUSH
 210: LD_INT 0
 212: PUSH
 213: LD_INT 0
 215: PUSH
 216: LD_INT 0
 218: PUSH
 219: LD_INT 0
 221: PUSH
 222: LD_INT 0
 224: PUSH
 225: LD_INT 0
 227: PUSH
 228: LD_INT 0
 230: PUSH
 231: LD_INT 0
 233: PUSH
 234: EMPTY
 235: LIST
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 244: LD_ADDR_EXP 36
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: EMPTY
 253: LIST
 254: PUSH
 255: LD_INT 2
 257: PUSH
 258: EMPTY
 259: LIST
 260: PUSH
 261: LD_INT 3
 263: PUSH
 264: EMPTY
 265: LIST
 266: PUSH
 267: LD_INT 4
 269: PUSH
 270: EMPTY
 271: LIST
 272: PUSH
 273: LD_INT 5
 275: PUSH
 276: EMPTY
 277: LIST
 278: PUSH
 279: LD_INT 6
 281: PUSH
 282: EMPTY
 283: LIST
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: LIST
 289: LIST
 290: LIST
 291: LIST
 292: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 293: LD_ADDR_EXP 40
 297: PUSH
 298: LD_EXP 35
 302: PUSH
 303: LD_INT 0
 305: PUSH
 306: EMPTY
 307: LIST
 308: DIFF
 309: PUSH
 310: LD_INT 1
 312: GREATER
 313: ST_TO_ADDR
// if Multiplayer then
 314: LD_OWVAR 4
 318: IFFALSE 564
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 320: LD_ADDR_EXP 1
 324: PUSH
 325: LD_INT 0
 327: PPUSH
 328: CALL_OW 426
 332: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 333: LD_ADDR_EXP 2
 337: PUSH
 338: LD_INT 1
 340: PPUSH
 341: CALL_OW 426
 345: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 346: LD_ADDR_EXP 3
 350: PUSH
 351: LD_INT 2
 353: PPUSH
 354: CALL_OW 426
 358: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 359: LD_ADDR_EXP 4
 363: PUSH
 364: LD_INT 3
 366: PPUSH
 367: CALL_OW 426
 371: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 372: LD_ADDR_EXP 5
 376: PUSH
 377: LD_INT 4
 379: PPUSH
 380: CALL_OW 426
 384: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 385: LD_ADDR_EXP 6
 389: PUSH
 390: LD_INT 5
 392: PPUSH
 393: CALL_OW 426
 397: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 398: LD_ADDR_EXP 7
 402: PUSH
 403: LD_INT 6
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 411: LD_ADDR_EXP 8
 415: PUSH
 416: LD_INT 10
 418: PPUSH
 419: CALL_OW 426
 423: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 424: LD_ADDR_EXP 9
 428: PUSH
 429: LD_INT 11
 431: PPUSH
 432: CALL_OW 426
 436: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 437: LD_ADDR_EXP 10
 441: PUSH
 442: LD_INT 12
 444: PPUSH
 445: CALL_OW 426
 449: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 450: LD_ADDR_EXP 11
 454: PUSH
 455: LD_INT 13
 457: PPUSH
 458: CALL_OW 426
 462: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 463: LD_ADDR_EXP 12
 467: PUSH
 468: LD_INT 14
 470: PPUSH
 471: CALL_OW 426
 475: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 476: LD_ADDR_EXP 13
 480: PUSH
 481: LD_INT 15
 483: PPUSH
 484: CALL_OW 426
 488: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 489: LD_ADDR_EXP 14
 493: PUSH
 494: LD_INT 16
 496: PPUSH
 497: CALL_OW 426
 501: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 502: LD_ADDR_EXP 15
 506: PUSH
 507: LD_INT 17
 509: PPUSH
 510: CALL_OW 426
 514: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 515: LD_ADDR_EXP 16
 519: PUSH
 520: LD_INT 20
 522: PPUSH
 523: CALL_OW 426
 527: ST_TO_ADDR
// def_game_rules := 0 ;
 528: LD_ADDR_EXP 17
 532: PUSH
 533: LD_INT 0
 535: ST_TO_ADDR
// def_sheik := GetMultiplayerSetting ( 22 ) ;
 536: LD_ADDR_EXP 18
 540: PUSH
 541: LD_INT 22
 543: PPUSH
 544: CALL_OW 426
 548: ST_TO_ADDR
// def_mastodont := GetMultiplayerSetting ( 23 ) ;
 549: LD_ADDR_EXP 19
 553: PUSH
 554: LD_INT 23
 556: PPUSH
 557: CALL_OW 426
 561: ST_TO_ADDR
// end else
 562: GO 720
// begin Randomize ;
 564: CALL_OW 10
// def_base_level := 2 ;
 568: LD_ADDR_EXP 1
 572: PUSH
 573: LD_INT 2
 575: ST_TO_ADDR
// def_amount_of_people := 0 ;
 576: LD_ADDR_EXP 2
 580: PUSH
 581: LD_INT 0
 583: ST_TO_ADDR
// def_skill_level := 1 ;
 584: LD_ADDR_EXP 3
 588: PUSH
 589: LD_INT 1
 591: ST_TO_ADDR
// def_starting_resources := 2 ;
 592: LD_ADDR_EXP 4
 596: PUSH
 597: LD_INT 2
 599: ST_TO_ADDR
// def_shipments_density := 1 ;
 600: LD_ADDR_EXP 5
 604: PUSH
 605: LD_INT 1
 607: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
 608: LD_ADDR_EXP 6
 612: PUSH
 613: LD_INT 1
 615: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
 616: LD_ADDR_EXP 7
 620: PUSH
 621: LD_INT 2
 623: ST_TO_ADDR
// def_shared_vision := 1 ;
 624: LD_ADDR_EXP 8
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// def_morale_flags := 1 ;
 632: LD_ADDR_EXP 9
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// def_siberite_detection := 1 ;
 640: LD_ADDR_EXP 10
 644: PUSH
 645: LD_INT 1
 647: ST_TO_ADDR
// def_people_respawning := 2 ;
 648: LD_ADDR_EXP 11
 652: PUSH
 653: LD_INT 2
 655: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 656: LD_ADDR_EXP 12
 660: PUSH
 661: LD_INT 3
 663: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 664: LD_ADDR_EXP 13
 668: PUSH
 669: LD_INT 0
 671: ST_TO_ADDR
// def_public_score := 0 ;
 672: LD_ADDR_EXP 14
 676: PUSH
 677: LD_INT 0
 679: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 680: LD_ADDR_EXP 15
 684: PUSH
 685: LD_INT 0
 687: ST_TO_ADDR
// def_builduptime := 1 ;
 688: LD_ADDR_EXP 16
 692: PUSH
 693: LD_INT 1
 695: ST_TO_ADDR
// def_game_rules := 0 ;
 696: LD_ADDR_EXP 17
 700: PUSH
 701: LD_INT 0
 703: ST_TO_ADDR
// def_sheik := 0 ;
 704: LD_ADDR_EXP 18
 708: PUSH
 709: LD_INT 0
 711: ST_TO_ADDR
// def_mastodont := 0 ;
 712: LD_ADDR_EXP 19
 716: PUSH
 717: LD_INT 0
 719: ST_TO_ADDR
// end ; if isSGUI then
 720: LD_OWVAR 83
 724: IFFALSE 730
// setMpTechs ( ) ;
 726: CALL 9294 0 0
// if ( Game_Type = 5 ) then
 730: LD_EXP 21
 734: PUSH
 735: LD_INT 5
 737: EQUAL
 738: IFFALSE 767
// begin def_base_level := 1 ;
 740: LD_ADDR_EXP 1
 744: PUSH
 745: LD_INT 1
 747: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 748: LD_ADDR_EXP 6
 752: PUSH
 753: LD_INT 0
 755: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
 756: LD_ADDR_EXP 7
 760: PUSH
 761: LD_INT 0
 763: ST_TO_ADDR
// disable ( 10 ) ;
 764: LD_INT 10
 766: DISABLE_MARKED
// end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 767: LD_ADDR_EXP 22
 771: PUSH
 772: LD_INT 0
 774: PUSH
 775: LD_INT 1
 777: PUSH
 778: LD_INT 1
 780: PUSH
 781: EMPTY
 782: LIST
 783: LIST
 784: LIST
 785: PUSH
 786: LD_EXP 1
 790: PUSH
 791: LD_INT 1
 793: PLUS
 794: ARRAY
 795: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 ] [ def_base_level + 1 ] ;
 796: LD_ADDR_EXP 23
 800: PUSH
 801: LD_INT 0
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: LD_INT 2
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: LIST
 814: PUSH
 815: LD_EXP 1
 819: PUSH
 820: LD_INT 1
 822: PLUS
 823: ARRAY
 824: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 825: LD_ADDR_EXP 24
 829: PUSH
 830: LD_INT 9
 832: PUSH
 833: LD_INT 12
 835: PUSH
 836: LD_INT 15
 838: PUSH
 839: LD_INT 24
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: LIST
 846: LIST
 847: PUSH
 848: LD_EXP 2
 852: PUSH
 853: LD_INT 1
 855: PLUS
 856: ARRAY
 857: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 , 8 ] [ def_skill_level + 1 ] ;
 858: LD_ADDR_EXP 25
 862: PUSH
 863: LD_INT 2
 865: PUSH
 866: LD_INT 3
 868: PUSH
 869: LD_INT 4
 871: PUSH
 872: LD_INT 5
 874: PUSH
 875: LD_INT 8
 877: PUSH
 878: EMPTY
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: LIST
 884: PUSH
 885: LD_EXP 3
 889: PUSH
 890: LD_INT 1
 892: PLUS
 893: ARRAY
 894: ST_TO_ADDR
// if ( Game_Type = 5 ) then
 895: LD_EXP 21
 899: PUSH
 900: LD_INT 5
 902: EQUAL
 903: IFFALSE 1021
// begin starting_resources := [ [ 1000 , 100 , 100 ] , [ 2000 , 200 , 200 ] , [ 5000 , 500 , 500 ] , [ 10000 , 1000 , 1000 ] , [ 25000 , 2500 , 2500 ] , [ 50000 , 5000 , 5000 ] ] [ def_starting_resources + 1 ] ;
 905: LD_ADDR_EXP 27
 909: PUSH
 910: LD_INT 1000
 912: PUSH
 913: LD_INT 100
 915: PUSH
 916: LD_INT 100
 918: PUSH
 919: EMPTY
 920: LIST
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 2000
 926: PUSH
 927: LD_INT 200
 929: PUSH
 930: LD_INT 200
 932: PUSH
 933: EMPTY
 934: LIST
 935: LIST
 936: LIST
 937: PUSH
 938: LD_INT 5000
 940: PUSH
 941: LD_INT 500
 943: PUSH
 944: LD_INT 500
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: PUSH
 952: LD_INT 10000
 954: PUSH
 955: LD_INT 1000
 957: PUSH
 958: LD_INT 1000
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: LIST
 965: PUSH
 966: LD_INT 25000
 968: PUSH
 969: LD_INT 2500
 971: PUSH
 972: LD_INT 2500
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: LIST
 979: PUSH
 980: LD_INT 50000
 982: PUSH
 983: LD_INT 5000
 985: PUSH
 986: LD_INT 5000
 988: PUSH
 989: EMPTY
 990: LIST
 991: LIST
 992: LIST
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: LIST
1000: LIST
1001: PUSH
1002: LD_EXP 4
1006: PUSH
1007: LD_INT 1
1009: PLUS
1010: ARRAY
1011: ST_TO_ADDR
// starting_crates := [ ] ;
1012: LD_ADDR_EXP 26
1016: PUSH
1017: EMPTY
1018: ST_TO_ADDR
// end else
1019: GO 1167
// begin starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1021: LD_ADDR_EXP 27
1025: PUSH
1026: LD_INT 0
1028: PUSH
1029: LD_INT 0
1031: PUSH
1032: LD_INT 0
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: LIST
1039: PUSH
1040: LD_INT 30
1042: PUSH
1043: LD_INT 0
1045: PUSH
1046: LD_INT 0
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: LIST
1053: PUSH
1054: LD_INT 50
1056: PUSH
1057: LD_INT 20
1059: PUSH
1060: LD_INT 0
1062: PUSH
1063: EMPTY
1064: LIST
1065: LIST
1066: LIST
1067: PUSH
1068: LD_INT 80
1070: PUSH
1071: LD_INT 40
1073: PUSH
1074: LD_INT 20
1076: PUSH
1077: EMPTY
1078: LIST
1079: LIST
1080: LIST
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: LD_EXP 4
1092: PUSH
1093: LD_INT 1
1095: PLUS
1096: ARRAY
1097: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1098: LD_ADDR_EXP 26
1102: PUSH
1103: LD_INT 10
1105: PUSH
1106: EMPTY
1107: LIST
1108: PUSH
1109: LD_INT 7
1111: PUSH
1112: LD_INT 14
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: PUSH
1119: LD_INT 6
1121: PUSH
1122: LD_INT 12
1124: PUSH
1125: LD_INT 18
1127: PUSH
1128: EMPTY
1129: LIST
1130: LIST
1131: LIST
1132: PUSH
1133: LD_INT 5
1135: PUSH
1136: LD_INT 10
1138: PUSH
1139: LD_INT 15
1141: PUSH
1142: LD_INT 20
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: LIST
1155: LIST
1156: PUSH
1157: LD_EXP 4
1161: PUSH
1162: LD_INT 1
1164: PLUS
1165: ARRAY
1166: ST_TO_ADDR
// end ; shipments_density := [ 150 , 125 , 100 , 50 ] [ def_shipments_density + 1 ] ;
1167: LD_ADDR_EXP 28
1171: PUSH
1172: LD_INT 150
1174: PUSH
1175: LD_INT 125
1177: PUSH
1178: LD_INT 100
1180: PUSH
1181: LD_INT 50
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: LIST
1188: LIST
1189: PUSH
1190: LD_EXP 5
1194: PUSH
1195: LD_INT 1
1197: PLUS
1198: ARRAY
1199: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1200: LD_ADDR_EXP 32
1204: PUSH
1205: LD_INT 0
1207: PUSH
1208: LD_INT 10500
1210: PUSH
1211: LD_INT 6300
1213: PUSH
1214: EMPTY
1215: LIST
1216: LIST
1217: LIST
1218: PUSH
1219: LD_EXP 11
1223: PUSH
1224: LD_INT 1
1226: PLUS
1227: ARRAY
1228: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1229: LD_ADDR_EXP 33
1233: PUSH
1234: LD_INT 0
1236: PUSH
1237: LD_INT 31500
1239: PUSH
1240: LD_INT 10500
1242: PUSH
1243: EMPTY
1244: LIST
1245: LIST
1246: LIST
1247: PUSH
1248: LD_EXP 11
1252: PUSH
1253: LD_INT 1
1255: PLUS
1256: ARRAY
1257: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1258: LD_ADDR_EXP 30
1262: PUSH
1263: LD_INT 0
1265: PUSH
1266: LD_INT 1
1268: PUSH
1269: LD_INT 2
1271: PUSH
1272: LD_INT 3
1274: PUSH
1275: EMPTY
1276: LIST
1277: LIST
1278: LIST
1279: LIST
1280: PUSH
1281: LD_EXP 12
1285: PUSH
1286: LD_INT 1
1288: PLUS
1289: ARRAY
1290: ST_TO_ADDR
// amount_of_siberit := [ 30 , 50 , 80 , 100 , 130 , 150 , 200 ] [ def_amount_of_siberit + 1 ] ;
1291: LD_ADDR_EXP 31
1295: PUSH
1296: LD_INT 30
1298: PUSH
1299: LD_INT 50
1301: PUSH
1302: LD_INT 80
1304: PUSH
1305: LD_INT 100
1307: PUSH
1308: LD_INT 130
1310: PUSH
1311: LD_INT 150
1313: PUSH
1314: LD_INT 200
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: LIST
1324: LIST
1325: PUSH
1326: LD_EXP 13
1330: PUSH
1331: LD_INT 1
1333: PLUS
1334: ARRAY
1335: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1336: LD_ADDR_EXP 29
1340: PUSH
1341: LD_INT 1
1343: NEG
1344: PUSH
1345: LD_INT 350
1347: PUSH
1348: LD_INT 700
1350: PUSH
1351: LD_INT 1400
1353: PUSH
1354: LD_INT 0
1356: PUSH
1357: EMPTY
1358: LIST
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: PUSH
1364: LD_EXP 9
1368: PUSH
1369: LD_INT 1
1371: PLUS
1372: ARRAY
1373: ST_TO_ADDR
// battle_flags_id := [ ] ;
1374: LD_ADDR_EXP 48
1378: PUSH
1379: EMPTY
1380: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1381: LD_ADDR_EXP 34
1385: PUSH
1386: LD_INT 0
1388: PUSH
1389: LD_INT 1
1391: PUSH
1392: LD_INT 63000
1394: PUSH
1395: LD_INT 126000
1397: PUSH
1398: LD_INT 189000
1400: PUSH
1401: LD_INT 252000
1403: PUSH
1404: EMPTY
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: PUSH
1412: LD_EXP 15
1416: PUSH
1417: LD_INT 1
1419: PLUS
1420: ARRAY
1421: ST_TO_ADDR
// if ( Game_Type = 12 ) then
1422: LD_EXP 21
1426: PUSH
1427: LD_INT 12
1429: EQUAL
1430: IFFALSE 1488
// begin sheik := [ 0 , 1 ] [ def_sheik + 1 ] ;
1432: LD_ADDR_EXP 51
1436: PUSH
1437: LD_INT 0
1439: PUSH
1440: LD_INT 1
1442: PUSH
1443: EMPTY
1444: LIST
1445: LIST
1446: PUSH
1447: LD_EXP 18
1451: PUSH
1452: LD_INT 1
1454: PLUS
1455: ARRAY
1456: ST_TO_ADDR
// mastodont := [ 0 , 1 , 2 ] [ def_mastodont + 1 ] end else
1457: LD_ADDR_EXP 52
1461: PUSH
1462: LD_INT 0
1464: PUSH
1465: LD_INT 1
1467: PUSH
1468: LD_INT 2
1470: PUSH
1471: EMPTY
1472: LIST
1473: LIST
1474: LIST
1475: PUSH
1476: LD_EXP 19
1480: PUSH
1481: LD_INT 1
1483: PLUS
1484: ARRAY
1485: ST_TO_ADDR
1486: GO 1504
// begin sheik := 0 ;
1488: LD_ADDR_EXP 51
1492: PUSH
1493: LD_INT 0
1495: ST_TO_ADDR
// mastodont := 0 ;
1496: LD_ADDR_EXP 52
1500: PUSH
1501: LD_INT 0
1503: ST_TO_ADDR
// end ; end ;
1504: LD_VAR 0 1
1508: RET
// function init_map ; var i , j ; begin
1509: LD_INT 0
1511: PPUSH
1512: PPUSH
1513: PPUSH
// normal_oil_deposits_locations := [ [ 101 , 187 ] , [ 18 , 26 ] , [ 50 , 89 ] , [ 123 , 3 ] , [ 182 , 69 ] , [ 231 , 174 ] ] ;
1514: LD_ADDR_EXP 44
1518: PUSH
1519: LD_INT 101
1521: PUSH
1522: LD_INT 187
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 18
1531: PUSH
1532: LD_INT 26
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 50
1541: PUSH
1542: LD_INT 89
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 123
1551: PUSH
1552: LD_INT 3
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 182
1561: PUSH
1562: LD_INT 69
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 231
1571: PUSH
1572: LD_INT 174
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 101 , 187 ] , [ 108 , 183 ] ] , [ [ 18 , 26 ] , [ 7 , 8 ] ] , [ [ 50 , 89 ] , [ 62 , 99 ] ] , [ [ 123 , 3 ] , [ 149 , 18 ] ] , [ [ 182 , 69 ] , [ 202 , 90 ] ] , [ [ 231 , 174 ] , [ 239 , 164 ] ] ] ;
1587: LD_ADDR_EXP 45
1591: PUSH
1592: LD_INT 101
1594: PUSH
1595: LD_INT 187
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: PUSH
1602: LD_INT 108
1604: PUSH
1605: LD_INT 183
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: PUSH
1616: LD_INT 18
1618: PUSH
1619: LD_INT 26
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PUSH
1626: LD_INT 7
1628: PUSH
1629: LD_INT 8
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: PUSH
1640: LD_INT 50
1642: PUSH
1643: LD_INT 89
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: LD_INT 62
1652: PUSH
1653: LD_INT 99
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 123
1666: PUSH
1667: LD_INT 3
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: PUSH
1674: LD_INT 149
1676: PUSH
1677: LD_INT 18
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: LD_INT 182
1690: PUSH
1691: LD_INT 69
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: PUSH
1698: LD_INT 202
1700: PUSH
1701: LD_INT 90
1703: PUSH
1704: EMPTY
1705: LIST
1706: LIST
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: PUSH
1712: LD_INT 231
1714: PUSH
1715: LD_INT 174
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: PUSH
1722: LD_INT 239
1724: PUSH
1725: LD_INT 164
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 96 , 185 ] , [ 21 , 29 ] , [ 50 , 85 ] , [ 128 , 2 ] , [ 186 , 72 ] , [ 234 , 174 ] ] ;
1744: LD_ADDR_EXP 46
1748: PUSH
1749: LD_INT 96
1751: PUSH
1752: LD_INT 185
1754: PUSH
1755: EMPTY
1756: LIST
1757: LIST
1758: PUSH
1759: LD_INT 21
1761: PUSH
1762: LD_INT 29
1764: PUSH
1765: EMPTY
1766: LIST
1767: LIST
1768: PUSH
1769: LD_INT 50
1771: PUSH
1772: LD_INT 85
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: PUSH
1779: LD_INT 128
1781: PUSH
1782: LD_INT 2
1784: PUSH
1785: EMPTY
1786: LIST
1787: LIST
1788: PUSH
1789: LD_INT 186
1791: PUSH
1792: LD_INT 72
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: PUSH
1799: LD_INT 234
1801: PUSH
1802: LD_INT 174
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 96 , 185 ] , [ 109 , 179 ] ] , [ [ 21 , 29 ] , [ 9 , 5 ] ] , [ [ 50 , 85 ] , [ 66 , 102 ] ] , [ [ 128 , 2 ] , [ 152 , 15 ] ] , [ [ 186 , 72 ] , [ 200 , 86 ] ] , [ [ 234 , 174 ] , [ 237 , 160 ] ] ] ;
1817: LD_ADDR_EXP 47
1821: PUSH
1822: LD_INT 96
1824: PUSH
1825: LD_INT 185
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: LD_INT 109
1834: PUSH
1835: LD_INT 179
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PUSH
1842: EMPTY
1843: LIST
1844: LIST
1845: PUSH
1846: LD_INT 21
1848: PUSH
1849: LD_INT 29
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: PUSH
1856: LD_INT 9
1858: PUSH
1859: LD_INT 5
1861: PUSH
1862: EMPTY
1863: LIST
1864: LIST
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: PUSH
1870: LD_INT 50
1872: PUSH
1873: LD_INT 85
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: PUSH
1880: LD_INT 66
1882: PUSH
1883: LD_INT 102
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: PUSH
1894: LD_INT 128
1896: PUSH
1897: LD_INT 2
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: PUSH
1904: LD_INT 152
1906: PUSH
1907: LD_INT 15
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: PUSH
1918: LD_INT 186
1920: PUSH
1921: LD_INT 72
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: PUSH
1928: LD_INT 200
1930: PUSH
1931: LD_INT 86
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 234
1944: PUSH
1945: LD_INT 174
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: PUSH
1952: LD_INT 237
1954: PUSH
1955: LD_INT 160
1957: PUSH
1958: EMPTY
1959: LIST
1960: LIST
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: ST_TO_ADDR
// depot_def := [ [ 100 , 179 , 0 ] , [ 21 , 18 , 2 ] , [ 65 , 90 , 2 ] , [ 132 , 11 , 1 ] , [ 190 , 82 , 4 ] , [ 230 , 164 , 4 ] ] ;
1974: LD_ADDR_EXP 41
1978: PUSH
1979: LD_INT 100
1981: PUSH
1982: LD_INT 179
1984: PUSH
1985: LD_INT 0
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: PUSH
1993: LD_INT 21
1995: PUSH
1996: LD_INT 18
1998: PUSH
1999: LD_INT 2
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 65
2009: PUSH
2010: LD_INT 90
2012: PUSH
2013: LD_INT 2
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 132
2023: PUSH
2024: LD_INT 11
2026: PUSH
2027: LD_INT 1
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: PUSH
2035: LD_INT 190
2037: PUSH
2038: LD_INT 82
2040: PUSH
2041: LD_INT 4
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: LIST
2048: PUSH
2049: LD_INT 230
2051: PUSH
2052: LD_INT 164
2054: PUSH
2055: LD_INT 4
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: ST_TO_ADDR
// for i in depot_def do
2071: LD_ADDR_VAR 0 2
2075: PUSH
2076: LD_EXP 41
2080: PUSH
2081: FOR_IN
2082: IFFALSE 2156
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 10 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 10 ) ] ] ;
2084: LD_ADDR_EXP 43
2088: PUSH
2089: LD_EXP 43
2093: PUSH
2094: LD_VAR 0 2
2098: PUSH
2099: LD_INT 1
2101: ARRAY
2102: PPUSH
2103: LD_VAR 0 2
2107: PUSH
2108: LD_INT 3
2110: ARRAY
2111: PPUSH
2112: LD_INT 10
2114: PPUSH
2115: CALL_OW 272
2119: PUSH
2120: LD_VAR 0 2
2124: PUSH
2125: LD_INT 2
2127: ARRAY
2128: PPUSH
2129: LD_VAR 0 2
2133: PUSH
2134: LD_INT 3
2136: ARRAY
2137: PPUSH
2138: LD_INT 10
2140: PPUSH
2141: CALL_OW 273
2145: PUSH
2146: EMPTY
2147: LIST
2148: LIST
2149: PUSH
2150: EMPTY
2151: LIST
2152: ADD
2153: ST_TO_ADDR
2154: GO 2081
2156: POP
2157: POP
// breastworks_def := [ [ [ 88 , 154 , 3 ] , [ 105 , 167 , 4 ] ] , [ [ 27 , 32 , 5 ] , [ 40 , 24 , 4 ] ] , [ [ 78 , 102 , 5 ] , [ 74 , 84 , 3 ] ] , [ [ 128 , 20 , 0 ] , [ 122 , 6 , 1 ] ] , [ [ 185 , 92 , 0 ] , [ 175 , 73 , 1 ] ] , [ [ 219 , 171 , 1 ] , [ 219 , 151 , 2 ] ] ] ;
2158: LD_ADDR_EXP 42
2162: PUSH
2163: LD_INT 88
2165: PUSH
2166: LD_INT 154
2168: PUSH
2169: LD_INT 3
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: LIST
2176: PUSH
2177: LD_INT 105
2179: PUSH
2180: LD_INT 167
2182: PUSH
2183: LD_INT 4
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: LIST
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 27
2197: PUSH
2198: LD_INT 32
2200: PUSH
2201: LD_INT 5
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: LIST
2208: PUSH
2209: LD_INT 40
2211: PUSH
2212: LD_INT 24
2214: PUSH
2215: LD_INT 4
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: LIST
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: PUSH
2227: LD_INT 78
2229: PUSH
2230: LD_INT 102
2232: PUSH
2233: LD_INT 5
2235: PUSH
2236: EMPTY
2237: LIST
2238: LIST
2239: LIST
2240: PUSH
2241: LD_INT 74
2243: PUSH
2244: LD_INT 84
2246: PUSH
2247: LD_INT 3
2249: PUSH
2250: EMPTY
2251: LIST
2252: LIST
2253: LIST
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 128
2261: PUSH
2262: LD_INT 20
2264: PUSH
2265: LD_INT 0
2267: PUSH
2268: EMPTY
2269: LIST
2270: LIST
2271: LIST
2272: PUSH
2273: LD_INT 122
2275: PUSH
2276: LD_INT 6
2278: PUSH
2279: LD_INT 1
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: LIST
2286: PUSH
2287: EMPTY
2288: LIST
2289: LIST
2290: PUSH
2291: LD_INT 185
2293: PUSH
2294: LD_INT 92
2296: PUSH
2297: LD_INT 0
2299: PUSH
2300: EMPTY
2301: LIST
2302: LIST
2303: LIST
2304: PUSH
2305: LD_INT 175
2307: PUSH
2308: LD_INT 73
2310: PUSH
2311: LD_INT 1
2313: PUSH
2314: EMPTY
2315: LIST
2316: LIST
2317: LIST
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PUSH
2323: LD_INT 219
2325: PUSH
2326: LD_INT 171
2328: PUSH
2329: LD_INT 1
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: LIST
2336: PUSH
2337: LD_INT 219
2339: PUSH
2340: LD_INT 151
2342: PUSH
2343: LD_INT 2
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: LIST
2350: PUSH
2351: EMPTY
2352: LIST
2353: LIST
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: LIST
2359: LIST
2360: LIST
2361: LIST
2362: ST_TO_ADDR
// for i = 1 to Side_Positions do
2363: LD_ADDR_VAR 0 2
2367: PUSH
2368: DOUBLE
2369: LD_INT 1
2371: DEC
2372: ST_TO_ADDR
2373: LD_EXP 38
2377: PUSH
2378: FOR_TO
2379: IFFALSE 2509
// begin if not Side_Positions [ i ] then
2381: LD_EXP 38
2385: PUSH
2386: LD_VAR 0 2
2390: ARRAY
2391: NOT
2392: IFFALSE 2396
// continue ;
2394: GO 2378
// if def_extra_oil_deposits then
2396: LD_EXP 6
2400: IFFALSE 2458
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2402: LD_ADDR_VAR 0 3
2406: PUSH
2407: LD_EXP 45
2411: PUSH
2412: LD_EXP 38
2416: PUSH
2417: LD_VAR 0 2
2421: ARRAY
2422: ARRAY
2423: PUSH
2424: FOR_IN
2425: IFFALSE 2454
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2427: LD_VAR 0 3
2431: PUSH
2432: LD_INT 1
2434: ARRAY
2435: PPUSH
2436: LD_VAR 0 3
2440: PUSH
2441: LD_INT 2
2443: ARRAY
2444: PPUSH
2445: LD_INT 2
2447: PPUSH
2448: CALL_OW 62
2452: GO 2424
2454: POP
2455: POP
2456: GO 2507
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2458: LD_EXP 44
2462: PUSH
2463: LD_EXP 38
2467: PUSH
2468: LD_VAR 0 2
2472: ARRAY
2473: ARRAY
2474: PUSH
2475: LD_INT 1
2477: ARRAY
2478: PPUSH
2479: LD_EXP 44
2483: PUSH
2484: LD_EXP 38
2488: PUSH
2489: LD_VAR 0 2
2493: ARRAY
2494: ARRAY
2495: PUSH
2496: LD_INT 2
2498: ARRAY
2499: PPUSH
2500: LD_INT 2
2502: PPUSH
2503: CALL_OW 62
// end ;
2507: GO 2378
2509: POP
2510: POP
// if def_extra_sib_deposits then
2511: LD_EXP 7
2515: IFFALSE 2669
// for i = 1 to Side_Positions do
2517: LD_ADDR_VAR 0 2
2521: PUSH
2522: DOUBLE
2523: LD_INT 1
2525: DEC
2526: ST_TO_ADDR
2527: LD_EXP 38
2531: PUSH
2532: FOR_TO
2533: IFFALSE 2667
// begin if not Side_Positions [ i ] then
2535: LD_EXP 38
2539: PUSH
2540: LD_VAR 0 2
2544: ARRAY
2545: NOT
2546: IFFALSE 2550
// continue ;
2548: GO 2532
// if def_extra_sib_deposits = 2 then
2550: LD_EXP 7
2554: PUSH
2555: LD_INT 2
2557: EQUAL
2558: IFFALSE 2616
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
2560: LD_ADDR_VAR 0 3
2564: PUSH
2565: LD_EXP 47
2569: PUSH
2570: LD_EXP 38
2574: PUSH
2575: LD_VAR 0 2
2579: ARRAY
2580: ARRAY
2581: PUSH
2582: FOR_IN
2583: IFFALSE 2612
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2585: LD_VAR 0 3
2589: PUSH
2590: LD_INT 1
2592: ARRAY
2593: PPUSH
2594: LD_VAR 0 3
2598: PUSH
2599: LD_INT 2
2601: ARRAY
2602: PPUSH
2603: LD_INT 3
2605: PPUSH
2606: CALL_OW 62
2610: GO 2582
2612: POP
2613: POP
2614: GO 2665
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2616: LD_EXP 46
2620: PUSH
2621: LD_EXP 38
2625: PUSH
2626: LD_VAR 0 2
2630: ARRAY
2631: ARRAY
2632: PUSH
2633: LD_INT 1
2635: ARRAY
2636: PPUSH
2637: LD_EXP 46
2641: PUSH
2642: LD_EXP 38
2646: PUSH
2647: LD_VAR 0 2
2651: ARRAY
2652: ARRAY
2653: PUSH
2654: LD_INT 2
2656: ARRAY
2657: PPUSH
2658: LD_INT 3
2660: PPUSH
2661: CALL_OW 62
// end ;
2665: GO 2532
2667: POP
2668: POP
// end ;
2669: LD_VAR 0 1
2673: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2674: LD_INT 0
2676: PPUSH
2677: PPUSH
2678: PPUSH
// if not Team_Game then
2679: LD_EXP 40
2683: NOT
2684: IFFALSE 2782
// begin for i = 1 to 8 do
2686: LD_ADDR_VAR 0 2
2690: PUSH
2691: DOUBLE
2692: LD_INT 1
2694: DEC
2695: ST_TO_ADDR
2696: LD_INT 8
2698: PUSH
2699: FOR_TO
2700: IFFALSE 2778
// for j = 1 to 8 do
2702: LD_ADDR_VAR 0 3
2706: PUSH
2707: DOUBLE
2708: LD_INT 1
2710: DEC
2711: ST_TO_ADDR
2712: LD_INT 8
2714: PUSH
2715: FOR_TO
2716: IFFALSE 2774
// if i <> j then
2718: LD_VAR 0 2
2722: PUSH
2723: LD_VAR 0 3
2727: NONEQUAL
2728: IFFALSE 2752
// SetAttitude ( i , j , att_neutral , true ) else
2730: LD_VAR 0 2
2734: PPUSH
2735: LD_VAR 0 3
2739: PPUSH
2740: LD_INT 0
2742: PPUSH
2743: LD_INT 1
2745: PPUSH
2746: CALL_OW 80
2750: GO 2772
// SetAttitude ( i , j , att_friend , true ) ;
2752: LD_VAR 0 2
2756: PPUSH
2757: LD_VAR 0 3
2761: PPUSH
2762: LD_INT 1
2764: PPUSH
2765: LD_INT 1
2767: PPUSH
2768: CALL_OW 80
2772: GO 2715
2774: POP
2775: POP
2776: GO 2699
2778: POP
2779: POP
// end else
2780: GO 2957
// begin if def_shared_vision then
2782: LD_EXP 8
2786: IFFALSE 2851
// begin for i in Teams do
2788: LD_ADDR_VAR 0 2
2792: PUSH
2793: LD_EXP 36
2797: PUSH
2798: FOR_IN
2799: IFFALSE 2849
// for j = 2 to i do
2801: LD_ADDR_VAR 0 3
2805: PUSH
2806: DOUBLE
2807: LD_INT 2
2809: DEC
2810: ST_TO_ADDR
2811: LD_VAR 0 2
2815: PUSH
2816: FOR_TO
2817: IFFALSE 2845
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2819: LD_VAR 0 2
2823: PUSH
2824: LD_VAR 0 3
2828: ARRAY
2829: PPUSH
2830: LD_VAR 0 2
2834: PUSH
2835: LD_INT 1
2837: ARRAY
2838: PPUSH
2839: CALL_OW 343
2843: GO 2816
2845: POP
2846: POP
2847: GO 2798
2849: POP
2850: POP
// end ; for i = 1 to 8 do
2851: LD_ADDR_VAR 0 2
2855: PUSH
2856: DOUBLE
2857: LD_INT 1
2859: DEC
2860: ST_TO_ADDR
2861: LD_INT 8
2863: PUSH
2864: FOR_TO
2865: IFFALSE 2955
// for j = 1 to 8 do
2867: LD_ADDR_VAR 0 3
2871: PUSH
2872: DOUBLE
2873: LD_INT 1
2875: DEC
2876: ST_TO_ADDR
2877: LD_INT 8
2879: PUSH
2880: FOR_TO
2881: IFFALSE 2951
// if Side_Teams [ i ] = Side_Teams [ j ] then
2883: LD_EXP 35
2887: PUSH
2888: LD_VAR 0 2
2892: ARRAY
2893: PUSH
2894: LD_EXP 35
2898: PUSH
2899: LD_VAR 0 3
2903: ARRAY
2904: EQUAL
2905: IFFALSE 2929
// SetAttitude ( i , j , att_friend , true ) else
2907: LD_VAR 0 2
2911: PPUSH
2912: LD_VAR 0 3
2916: PPUSH
2917: LD_INT 1
2919: PPUSH
2920: LD_INT 1
2922: PPUSH
2923: CALL_OW 80
2927: GO 2949
// SetAttitude ( i , j , att_enemy , true ) ;
2929: LD_VAR 0 2
2933: PPUSH
2934: LD_VAR 0 3
2938: PPUSH
2939: LD_INT 2
2941: PPUSH
2942: LD_INT 1
2944: PPUSH
2945: CALL_OW 80
2949: GO 2880
2951: POP
2952: POP
2953: GO 2864
2955: POP
2956: POP
// end ; end ;
2957: LD_VAR 0 1
2961: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2962: LD_INT 0
2964: PPUSH
2965: PPUSH
2966: PPUSH
2967: PPUSH
// result := [ ] ;
2968: LD_ADDR_VAR 0 7
2972: PUSH
2973: EMPTY
2974: ST_TO_ADDR
// for i := 1 to count do
2975: LD_ADDR_VAR 0 8
2979: PUSH
2980: DOUBLE
2981: LD_INT 1
2983: DEC
2984: ST_TO_ADDR
2985: LD_VAR 0 1
2989: PUSH
2990: FOR_TO
2991: IFFALSE 3441
// begin uc_direction := Rand ( 0 , 5 ) ;
2993: LD_ADDR_OWVAR 24
2997: PUSH
2998: LD_INT 0
3000: PPUSH
3001: LD_INT 5
3003: PPUSH
3004: CALL_OW 12
3008: ST_TO_ADDR
// if commander then
3009: LD_LOC 1
3013: IFFALSE 3154
// begin hc_name := mp_sides_players_names [ uc_side ] ;
3015: LD_ADDR_OWVAR 26
3019: PUSH
3020: LD_OWVAR 19
3024: PUSH
3025: LD_OWVAR 20
3029: ARRAY
3030: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3031: LD_INT 1
3033: PPUSH
3034: LD_INT 2
3036: PPUSH
3037: CALL_OW 12
3041: PPUSH
3042: LD_VAR 0 2
3046: PPUSH
3047: LD_EXP 25
3051: PUSH
3052: LD_INT 2
3054: PLUS
3055: PPUSH
3056: CALL_OW 380
// hc_importance := 105 ;
3060: LD_ADDR_OWVAR 32
3064: PUSH
3065: LD_INT 105
3067: ST_TO_ADDR
// commander := false ;
3068: LD_ADDR_LOC 1
3072: PUSH
3073: LD_INT 0
3075: ST_TO_ADDR
// if Multiplayer then
3076: LD_OWVAR 4
3080: IFFALSE 3152
// begin if sheik then
3082: LD_EXP 51
3086: IFFALSE 3114
// begin hc_gallery :=  ;
3088: LD_ADDR_OWVAR 33
3092: PUSH
3093: LD_STRING 
3095: ST_TO_ADDR
// hc_class := class_desert_warior ;
3096: LD_ADDR_OWVAR 28
3100: PUSH
3101: LD_INT 11
3103: ST_TO_ADDR
// hc_sex := sex_male ;
3104: LD_ADDR_OWVAR 27
3108: PUSH
3109: LD_INT 1
3111: ST_TO_ADDR
// end else
3112: GO 3152
// begin hc_gallery := MULTIAVATARS ;
3114: LD_ADDR_OWVAR 33
3118: PUSH
3119: LD_STRING MULTIAVATARS
3121: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3122: LD_ADDR_OWVAR 34
3126: PUSH
3127: LD_OWVAR 20
3131: PPUSH
3132: CALL_OW 525
3136: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3137: LD_ADDR_OWVAR 27
3141: PUSH
3142: LD_OWVAR 20
3146: PPUSH
3147: CALL_OW 526
3151: ST_TO_ADDR
// end ; end ; end else
3152: GO 3217
// begin hc_name :=  ;
3154: LD_ADDR_OWVAR 26
3158: PUSH
3159: LD_STRING 
3161: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3162: LD_INT 1
3164: PPUSH
3165: LD_INT 2
3167: PPUSH
3168: CALL_OW 12
3172: PPUSH
3173: LD_VAR 0 2
3177: PPUSH
3178: LD_EXP 25
3182: PPUSH
3183: CALL_OW 380
// hc_importance := 0 ;
3187: LD_ADDR_OWVAR 32
3191: PUSH
3192: LD_INT 0
3194: ST_TO_ADDR
// if Multiplayer then
3195: LD_OWVAR 4
3199: IFFALSE 3217
// begin hc_gallery :=  ;
3201: LD_ADDR_OWVAR 33
3205: PUSH
3206: LD_STRING 
3208: ST_TO_ADDR
// hc_face_number := 0 ;
3209: LD_ADDR_OWVAR 34
3213: PUSH
3214: LD_INT 0
3216: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3217: LD_ADDR_VAR 0 10
3221: PUSH
3222: CALL_OW 44
3226: ST_TO_ADDR
// if global_defined then
3227: LD_LOC 3
3231: IFFALSE 3371
// begin if ( cl = class_soldier ) then
3233: LD_VAR 0 2
3237: PUSH
3238: LD_INT 1
3240: EQUAL
3241: IFFALSE 3261
// j := i + soldiers_created else
3243: LD_ADDR_VAR 0 9
3247: PUSH
3248: LD_VAR 0 8
3252: PUSH
3253: LD_LOC 4
3257: PLUS
3258: ST_TO_ADDR
3259: GO 3271
// j := i ;
3261: LD_ADDR_VAR 0 9
3265: PUSH
3266: LD_VAR 0 8
3270: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3271: LD_LOC 2
3275: PUSH
3276: LD_VAR 0 2
3280: ARRAY
3281: PUSH
3282: LD_VAR 0 9
3286: ARRAY
3287: PPUSH
3288: LD_VAR 0 10
3292: PPUSH
3293: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3297: LD_VAR 0 10
3301: PPUSH
3302: LD_INT 2
3304: PPUSH
3305: LD_LOC 2
3309: PUSH
3310: LD_VAR 0 2
3314: ARRAY
3315: PUSH
3316: LD_VAR 0 9
3320: ARRAY
3321: PPUSH
3322: LD_INT 2
3324: PPUSH
3325: CALL_OW 260
3329: PPUSH
3330: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3334: LD_VAR 0 10
3338: PPUSH
3339: LD_INT 1
3341: PPUSH
3342: LD_LOC 2
3346: PUSH
3347: LD_VAR 0 2
3351: ARRAY
3352: PUSH
3353: LD_VAR 0 9
3357: ARRAY
3358: PPUSH
3359: LD_INT 1
3361: PPUSH
3362: CALL_OW 260
3366: PPUSH
3367: CALL_OW 239
// end ; if building then
3371: LD_VAR 0 6
3375: IFFALSE 3393
// PlaceHumanInUnit ( un , building ) else
3377: LD_VAR 0 10
3381: PPUSH
3382: LD_VAR 0 6
3386: PPUSH
3387: CALL_OW 52
3391: GO 3420
// PlaceUnitXYR ( un , x , y , r , false ) ;
3393: LD_VAR 0 10
3397: PPUSH
3398: LD_VAR 0 3
3402: PPUSH
3403: LD_VAR 0 4
3407: PPUSH
3408: LD_VAR 0 5
3412: PPUSH
3413: LD_INT 0
3415: PPUSH
3416: CALL_OW 50
// result := result ^ [ un ] ;
3420: LD_ADDR_VAR 0 7
3424: PUSH
3425: LD_VAR 0 7
3429: PUSH
3430: LD_VAR 0 10
3434: PUSH
3435: EMPTY
3436: LIST
3437: ADD
3438: ST_TO_ADDR
// end ;
3439: GO 2990
3441: POP
3442: POP
// if not global_defined then
3443: LD_LOC 3
3447: NOT
3448: IFFALSE 3526
// if ( global_units >= cl ) then
3450: LD_LOC 2
3454: PUSH
3455: LD_VAR 0 2
3459: GREATEREQUAL
3460: IFFALSE 3501
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3462: LD_ADDR_LOC 2
3466: PUSH
3467: LD_LOC 2
3471: PPUSH
3472: LD_VAR 0 2
3476: PPUSH
3477: LD_LOC 2
3481: PUSH
3482: LD_VAR 0 2
3486: ARRAY
3487: PUSH
3488: LD_VAR 0 7
3492: ADD
3493: PPUSH
3494: CALL_OW 1
3498: ST_TO_ADDR
3499: GO 3526
// global_units := Replace ( global_units , cl , result ) ;
3501: LD_ADDR_LOC 2
3505: PUSH
3506: LD_LOC 2
3510: PPUSH
3511: LD_VAR 0 2
3515: PPUSH
3516: LD_VAR 0 7
3520: PPUSH
3521: CALL_OW 1
3525: ST_TO_ADDR
// end ;
3526: LD_VAR 0 7
3530: RET
// function prepare_mastodonts ( n ) ; var i ; begin
3531: LD_INT 0
3533: PPUSH
3534: PPUSH
// uc_side := 0 ;
3535: LD_ADDR_OWVAR 20
3539: PUSH
3540: LD_INT 0
3542: ST_TO_ADDR
// uc_nation := 0 ;
3543: LD_ADDR_OWVAR 21
3547: PUSH
3548: LD_INT 0
3550: ST_TO_ADDR
// vc_chassis := 31 ;
3551: LD_ADDR_OWVAR 37
3555: PUSH
3556: LD_INT 31
3558: ST_TO_ADDR
// vc_control := control_rider ;
3559: LD_ADDR_OWVAR 38
3563: PUSH
3564: LD_INT 4
3566: ST_TO_ADDR
// for i = 1 to n do
3567: LD_ADDR_VAR 0 3
3571: PUSH
3572: DOUBLE
3573: LD_INT 1
3575: DEC
3576: ST_TO_ADDR
3577: LD_VAR 0 1
3581: PUSH
3582: FOR_TO
3583: IFFALSE 3602
// PlaceUnitArea ( CreateVehicle , MastodontSpawn , false ) ;
3585: CALL_OW 45
3589: PPUSH
3590: LD_INT 15
3592: PPUSH
3593: LD_INT 0
3595: PPUSH
3596: CALL_OW 49
3600: GO 3582
3602: POP
3603: POP
// end ;
3604: LD_VAR 0 2
3608: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3609: LD_INT 0
3611: PPUSH
3612: PPUSH
3613: PPUSH
3614: PPUSH
3615: PPUSH
3616: PPUSH
3617: PPUSH
3618: PPUSH
3619: PPUSH
// if side in [ 0 , 9 ] then
3620: LD_VAR 0 1
3624: PUSH
3625: LD_INT 0
3627: PUSH
3628: LD_INT 9
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: IN
3635: IFFALSE 3639
// exit ;
3637: GO 4656
// pos := Side_Positions [ side ] ;
3639: LD_ADDR_VAR 0 3
3643: PUSH
3644: LD_EXP 38
3648: PUSH
3649: LD_VAR 0 1
3653: ARRAY
3654: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3655: LD_ADDR_OWVAR 21
3659: PUSH
3660: LD_EXP 39
3664: PUSH
3665: LD_VAR 0 1
3669: ARRAY
3670: ST_TO_ADDR
// uc_side := side ;
3671: LD_ADDR_OWVAR 20
3675: PUSH
3676: LD_VAR 0 1
3680: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3681: LD_ADDR_VAR 0 4
3685: PUSH
3686: LD_EXP 41
3690: PUSH
3691: LD_VAR 0 3
3695: ARRAY
3696: PUSH
3697: LD_INT 1
3699: ARRAY
3700: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3701: LD_ADDR_VAR 0 5
3705: PUSH
3706: LD_EXP 41
3710: PUSH
3711: LD_VAR 0 3
3715: ARRAY
3716: PUSH
3717: LD_INT 2
3719: ARRAY
3720: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3721: LD_ADDR_VAR 0 6
3725: PUSH
3726: LD_EXP 41
3730: PUSH
3731: LD_VAR 0 3
3735: ARRAY
3736: PUSH
3737: LD_INT 3
3739: ARRAY
3740: ST_TO_ADDR
// if is_depot then
3741: LD_EXP 22
3745: IFFALSE 3878
// begin bc_type = b_depot ;
3747: LD_ADDR_OWVAR 42
3751: PUSH
3752: LD_INT 0
3754: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3755: LD_ADDR_VAR 0 10
3759: PUSH
3760: LD_VAR 0 4
3764: PPUSH
3765: LD_VAR 0 5
3769: PPUSH
3770: LD_VAR 0 6
3774: PPUSH
3775: CALL_OW 47
3779: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3780: LD_VAR 0 10
3784: PPUSH
3785: LD_STRING @
3787: PUSH
3788: LD_VAR 0 1
3792: STR
3793: PPUSH
3794: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3798: LD_VAR 0 10
3802: PPUSH
3803: CALL_OW 274
3807: PPUSH
3808: LD_INT 1
3810: PPUSH
3811: LD_EXP 27
3815: PUSH
3816: LD_INT 1
3818: ARRAY
3819: PPUSH
3820: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3824: LD_VAR 0 10
3828: PPUSH
3829: CALL_OW 274
3833: PPUSH
3834: LD_INT 2
3836: PPUSH
3837: LD_EXP 27
3841: PUSH
3842: LD_INT 2
3844: ARRAY
3845: PPUSH
3846: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3850: LD_VAR 0 10
3854: PPUSH
3855: CALL_OW 274
3859: PPUSH
3860: LD_INT 3
3862: PPUSH
3863: LD_EXP 27
3867: PUSH
3868: LD_INT 3
3870: ARRAY
3871: PPUSH
3872: CALL_OW 277
// end else
3876: GO 4022
// begin for i := 1 to 3 do
3878: LD_ADDR_VAR 0 7
3882: PUSH
3883: DOUBLE
3884: LD_INT 1
3886: DEC
3887: ST_TO_ADDR
3888: LD_INT 3
3890: PUSH
3891: FOR_TO
3892: IFFALSE 4020
// begin r := starting_resources [ i ] ;
3894: LD_ADDR_VAR 0 8
3898: PUSH
3899: LD_EXP 27
3903: PUSH
3904: LD_VAR 0 7
3908: ARRAY
3909: ST_TO_ADDR
// while r >= 10 do
3910: LD_VAR 0 8
3914: PUSH
3915: LD_INT 10
3917: GREATEREQUAL
3918: IFFALSE 4018
// if r > 50 then
3920: LD_VAR 0 8
3924: PUSH
3925: LD_INT 50
3927: GREATER
3928: IFFALSE 3974
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3930: LD_VAR 0 7
3934: PPUSH
3935: LD_INT 5
3937: PPUSH
3938: LD_VAR 0 4
3942: PPUSH
3943: LD_VAR 0 5
3947: PPUSH
3948: LD_INT 4
3950: PPUSH
3951: LD_INT 0
3953: PPUSH
3954: CALL_OW 60
// r := r - 50 ;
3958: LD_ADDR_VAR 0 8
3962: PUSH
3963: LD_VAR 0 8
3967: PUSH
3968: LD_INT 50
3970: MINUS
3971: ST_TO_ADDR
// end else
3972: GO 4016
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3974: LD_VAR 0 7
3978: PPUSH
3979: LD_VAR 0 8
3983: PUSH
3984: LD_INT 10
3986: DIV
3987: PPUSH
3988: LD_VAR 0 4
3992: PPUSH
3993: LD_VAR 0 5
3997: PPUSH
3998: LD_INT 4
4000: PPUSH
4001: LD_INT 0
4003: PPUSH
4004: CALL_OW 60
// r := 0 ;
4008: LD_ADDR_VAR 0 8
4012: PUSH
4013: LD_INT 0
4015: ST_TO_ADDR
// end ;
4016: GO 3910
// end ;
4018: GO 3891
4020: POP
4021: POP
// end ; for r in starting_crates do
4022: LD_ADDR_VAR 0 8
4026: PUSH
4027: LD_EXP 26
4031: PUSH
4032: FOR_IN
4033: IFFALSE 4065
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
4035: LD_INT 1
4037: PPUSH
4038: LD_INT 5
4040: PPUSH
4041: LD_VAR 0 4
4045: PPUSH
4046: LD_VAR 0 5
4050: PPUSH
4051: LD_VAR 0 8
4055: PPUSH
4056: LD_INT 0
4058: PPUSH
4059: CALL_OW 60
4063: GO 4032
4065: POP
4066: POP
// if def_morale_flags then
4067: LD_EXP 9
4071: IFFALSE 4210
// begin x := start_def [ pos ] [ 1 ] ;
4073: LD_ADDR_VAR 0 4
4077: PUSH
4078: LD_EXP 43
4082: PUSH
4083: LD_VAR 0 3
4087: ARRAY
4088: PUSH
4089: LD_INT 1
4091: ARRAY
4092: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4093: LD_ADDR_VAR 0 5
4097: PUSH
4098: LD_EXP 43
4102: PUSH
4103: LD_VAR 0 3
4107: ARRAY
4108: PUSH
4109: LD_INT 2
4111: ARRAY
4112: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4113: LD_VAR 0 4
4117: PPUSH
4118: LD_VAR 0 5
4122: PPUSH
4123: LD_INT 12
4125: PPUSH
4126: LD_INT 2
4128: PPUSH
4129: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4133: LD_ADDR_EXP 48
4137: PUSH
4138: LD_EXP 48
4142: PUSH
4143: LD_VAR 0 1
4147: PPUSH
4148: LD_VAR 0 4
4152: PPUSH
4153: LD_VAR 0 5
4157: PPUSH
4158: LD_INT 1
4160: PUSH
4161: LD_INT 100
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: PUSH
4168: LD_INT 2
4170: PUSH
4171: LD_INT 50
4173: PUSH
4174: EMPTY
4175: LIST
4176: LIST
4177: PUSH
4178: LD_INT 3
4180: PUSH
4181: LD_INT 20
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 20
4190: PUSH
4191: LD_INT 100
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: EMPTY
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: PPUSH
4204: CALL_OW 418
4208: ADD
4209: ST_TO_ADDR
// end ; commander := true ;
4210: LD_ADDR_LOC 1
4214: PUSH
4215: LD_INT 1
4217: ST_TO_ADDR
// soldiers_created := 0 ;
4218: LD_ADDR_LOC 4
4222: PUSH
4223: LD_INT 0
4225: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4226: LD_ADDR_VAR 0 7
4230: PUSH
4231: DOUBLE
4232: LD_INT 1
4234: DEC
4235: ST_TO_ADDR
4236: LD_EXP 23
4240: PUSH
4241: FOR_TO
4242: IFFALSE 4395
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4244: LD_ADDR_VAR 0 4
4248: PUSH
4249: LD_EXP 42
4253: PUSH
4254: LD_VAR 0 3
4258: ARRAY
4259: PUSH
4260: LD_VAR 0 7
4264: ARRAY
4265: PUSH
4266: LD_INT 1
4268: ARRAY
4269: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4270: LD_ADDR_VAR 0 5
4274: PUSH
4275: LD_EXP 42
4279: PUSH
4280: LD_VAR 0 3
4284: ARRAY
4285: PUSH
4286: LD_VAR 0 7
4290: ARRAY
4291: PUSH
4292: LD_INT 2
4294: ARRAY
4295: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4296: LD_ADDR_VAR 0 6
4300: PUSH
4301: LD_EXP 42
4305: PUSH
4306: LD_VAR 0 3
4310: ARRAY
4311: PUSH
4312: LD_VAR 0 7
4316: ARRAY
4317: PUSH
4318: LD_INT 3
4320: ARRAY
4321: ST_TO_ADDR
// bc_type := b_breastwork ;
4322: LD_ADDR_OWVAR 42
4326: PUSH
4327: LD_INT 31
4329: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4330: LD_ADDR_VAR 0 9
4334: PUSH
4335: LD_VAR 0 4
4339: PPUSH
4340: LD_VAR 0 5
4344: PPUSH
4345: LD_VAR 0 6
4349: PPUSH
4350: CALL_OW 47
4354: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4355: LD_INT 1
4357: PPUSH
4358: LD_INT 1
4360: PPUSH
4361: LD_INT 0
4363: PPUSH
4364: LD_INT 0
4366: PPUSH
4367: LD_INT 0
4369: PPUSH
4370: LD_VAR 0 9
4374: PPUSH
4375: CALL 2962 0 6
// soldiers_created := soldiers_created + 1 ;
4379: LD_ADDR_LOC 4
4383: PUSH
4384: LD_LOC 4
4388: PUSH
4389: LD_INT 1
4391: PLUS
4392: ST_TO_ADDR
// end ;
4393: GO 4241
4395: POP
4396: POP
// x := start_def [ pos ] [ 1 ] ;
4397: LD_ADDR_VAR 0 4
4401: PUSH
4402: LD_EXP 43
4406: PUSH
4407: LD_VAR 0 3
4411: ARRAY
4412: PUSH
4413: LD_INT 1
4415: ARRAY
4416: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4417: LD_ADDR_VAR 0 5
4421: PUSH
4422: LD_EXP 43
4426: PUSH
4427: LD_VAR 0 3
4431: ARRAY
4432: PUSH
4433: LD_INT 2
4435: ARRAY
4436: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4437: LD_LOC 8
4441: PUSH
4442: LD_EXP 23
4446: MINUS
4447: PPUSH
4448: LD_INT 1
4450: PPUSH
4451: LD_VAR 0 4
4455: PPUSH
4456: LD_VAR 0 5
4460: PPUSH
4461: LD_INT 5
4463: PPUSH
4464: LD_INT 0
4466: PPUSH
4467: CALL 2962 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4471: LD_LOC 5
4475: PPUSH
4476: LD_INT 2
4478: PPUSH
4479: LD_VAR 0 4
4483: PPUSH
4484: LD_VAR 0 5
4488: PPUSH
4489: LD_INT 5
4491: PPUSH
4492: LD_INT 0
4494: PPUSH
4495: CALL 2962 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4499: LD_LOC 7
4503: PPUSH
4504: LD_INT 3
4506: PPUSH
4507: LD_VAR 0 4
4511: PPUSH
4512: LD_VAR 0 5
4516: PPUSH
4517: LD_INT 5
4519: PPUSH
4520: LD_INT 0
4522: PPUSH
4523: CALL 2962 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4527: LD_LOC 6
4531: PPUSH
4532: LD_INT 4
4534: PPUSH
4535: LD_VAR 0 4
4539: PPUSH
4540: LD_VAR 0 5
4544: PPUSH
4545: LD_INT 5
4547: PPUSH
4548: LD_INT 0
4550: PPUSH
4551: CALL 2962 0 6
// if def_siberite_detection then
4555: LD_EXP 10
4559: IFFALSE 4576
// SetTech ( tech_SibDet , side , state_researched ) ;
4561: LD_INT 20
4563: PPUSH
4564: LD_VAR 0 1
4568: PPUSH
4569: LD_INT 2
4571: PPUSH
4572: CALL_OW 322
// if def_siberite_bomb = 1 then
4576: LD_EXP 15
4580: PUSH
4581: LD_INT 1
4583: EQUAL
4584: IFFALSE 4618
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4586: LD_INT 25
4588: PPUSH
4589: LD_VAR 0 1
4593: PPUSH
4594: LD_INT 1
4596: PPUSH
4597: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4601: LD_INT 73
4603: PPUSH
4604: LD_VAR 0 1
4608: PPUSH
4609: LD_INT 1
4611: PPUSH
4612: CALL_OW 322
// end else
4616: GO 4648
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4618: LD_INT 25
4620: PPUSH
4621: LD_VAR 0 1
4625: PPUSH
4626: LD_INT 0
4628: PPUSH
4629: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4633: LD_INT 73
4635: PPUSH
4636: LD_VAR 0 1
4640: PPUSH
4641: LD_INT 0
4643: PPUSH
4644: CALL_OW 322
// end ; global_defined := true ;
4648: LD_ADDR_LOC 3
4652: PUSH
4653: LD_INT 1
4655: ST_TO_ADDR
// end ;
4656: LD_VAR 0 2
4660: RET
// every 0 0$1 do
4661: GO 4663
4663: DISABLE
// if ( def_siberite_bomb > 1 ) then
4664: LD_EXP 15
4668: PUSH
4669: LD_INT 1
4671: GREATER
4672: IFFALSE 4687
// begin wait ( siberite_bomb_Delay ) ;
4674: LD_EXP 34
4678: PPUSH
4679: CALL_OW 67
// EnableSibFiss ;
4683: CALL 4688 0 0
// end ;
4687: END
// function EnableSibFiss ; var i ; begin
4688: LD_INT 0
4690: PPUSH
4691: PPUSH
// for i := 1 to 8 do
4692: LD_ADDR_VAR 0 2
4696: PUSH
4697: DOUBLE
4698: LD_INT 1
4700: DEC
4701: ST_TO_ADDR
4702: LD_INT 8
4704: PUSH
4705: FOR_TO
4706: IFFALSE 4752
// if Side_Positions [ i ] then
4708: LD_EXP 38
4712: PUSH
4713: LD_VAR 0 2
4717: ARRAY
4718: IFFALSE 4750
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4720: LD_INT 25
4722: PPUSH
4723: LD_VAR 0 2
4727: PPUSH
4728: LD_INT 1
4730: PPUSH
4731: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4735: LD_INT 73
4737: PPUSH
4738: LD_VAR 0 2
4742: PPUSH
4743: LD_INT 1
4745: PPUSH
4746: CALL_OW 322
// end ;
4750: GO 4705
4752: POP
4753: POP
// end ;
4754: LD_VAR 0 1
4758: RET
// function prepare_sides ; var i ; begin
4759: LD_INT 0
4761: PPUSH
4762: PPUSH
// global_units := [ ] ;
4763: LD_ADDR_LOC 2
4767: PUSH
4768: EMPTY
4769: ST_TO_ADDR
// global_defined := false ;
4770: LD_ADDR_LOC 3
4774: PUSH
4775: LD_INT 0
4777: ST_TO_ADDR
// CountClassMembers ;
4778: CALL 4857 0 0
// for i := 1 to 8 do
4782: LD_ADDR_VAR 0 2
4786: PUSH
4787: DOUBLE
4788: LD_INT 1
4790: DEC
4791: ST_TO_ADDR
4792: LD_INT 8
4794: PUSH
4795: FOR_TO
4796: IFFALSE 4850
// if Side_Positions [ i ] then
4798: LD_EXP 38
4802: PUSH
4803: LD_VAR 0 2
4807: ARRAY
4808: IFFALSE 4848
// begin prepare_side ( i ) ;
4810: LD_VAR 0 2
4814: PPUSH
4815: CALL 3609 0 1
// if ( Game_Type = 12 ) and mastodont > 0 then
4819: LD_EXP 21
4823: PUSH
4824: LD_INT 12
4826: EQUAL
4827: PUSH
4828: LD_EXP 52
4832: PUSH
4833: LD_INT 0
4835: GREATER
4836: AND
4837: IFFALSE 4848
// prepare_mastodonts ( mastodont ) ;
4839: LD_EXP 52
4843: PPUSH
4844: CALL 3531 0 1
// end ;
4848: GO 4795
4850: POP
4851: POP
// end ;
4852: LD_VAR 0 1
4856: RET
// function CountClassMembers ; var Mode ; begin
4857: LD_INT 0
4859: PPUSH
4860: PPUSH
// if No_Mechs then
4861: LD_EXP 20
4865: IFFALSE 4877
// Mode := 2 else
4867: LD_ADDR_VAR 0 2
4871: PUSH
4872: LD_INT 2
4874: ST_TO_ADDR
4875: GO 4885
// Mode := 1 ;
4877: LD_ADDR_VAR 0 2
4881: PUSH
4882: LD_INT 1
4884: ST_TO_ADDR
// neng := number_of_people ;
4885: LD_ADDR_LOC 5
4889: PUSH
4890: LD_EXP 24
4894: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4895: LD_ADDR_LOC 8
4899: PUSH
4900: LD_LOC 5
4904: PUSH
4905: LD_INT 4
4907: PUSH
4908: LD_INT 3
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PUSH
4915: LD_VAR 0 2
4919: ARRAY
4920: DIV
4921: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4922: LD_LOC 8
4926: PUSH
4927: LD_EXP 23
4931: LESS
4932: IFFALSE 4944
// nsol := number_of_breastworks ;
4934: LD_ADDR_LOC 8
4938: PUSH
4939: LD_EXP 23
4943: ST_TO_ADDR
// neng := neng - nsol ;
4944: LD_ADDR_LOC 5
4948: PUSH
4949: LD_LOC 5
4953: PUSH
4954: LD_LOC 8
4958: MINUS
4959: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4960: LD_ADDR_LOC 6
4964: PUSH
4965: LD_LOC 5
4969: PUSH
4970: LD_INT 3
4972: PUSH
4973: LD_INT 2
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: PUSH
4980: LD_VAR 0 2
4984: ARRAY
4985: DIV
4986: ST_TO_ADDR
// if ( nsci < 1 ) then
4987: LD_LOC 6
4991: PUSH
4992: LD_INT 1
4994: LESS
4995: IFFALSE 5005
// nsci := 1 ;
4997: LD_ADDR_LOC 6
5001: PUSH
5002: LD_INT 1
5004: ST_TO_ADDR
// neng := neng - nsci ;
5005: LD_ADDR_LOC 5
5009: PUSH
5010: LD_LOC 5
5014: PUSH
5015: LD_LOC 6
5019: MINUS
5020: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5021: LD_ADDR_LOC 7
5025: PUSH
5026: LD_LOC 5
5030: PUSH
5031: LD_INT 2
5033: DIV
5034: PUSH
5035: LD_INT 0
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: PUSH
5042: LD_VAR 0 2
5046: ARRAY
5047: ST_TO_ADDR
// neng := neng - nmech ;
5048: LD_ADDR_LOC 5
5052: PUSH
5053: LD_LOC 5
5057: PUSH
5058: LD_LOC 7
5062: MINUS
5063: ST_TO_ADDR
// if ( neng < 1 ) then
5064: LD_LOC 5
5068: PUSH
5069: LD_INT 1
5071: LESS
5072: IFFALSE 5082
// neng := 1 ;
5074: LD_ADDR_LOC 5
5078: PUSH
5079: LD_INT 1
5081: ST_TO_ADDR
// end ;
5082: LD_VAR 0 1
5086: RET
// function Init_Win_Condition ; begin
5087: LD_INT 0
5089: PPUSH
// if Team_Game then
5090: LD_EXP 40
5094: IFFALSE 5101
// enable ( 98 ) else
5096: LD_INT 98
5098: ENABLE_MARKED
5099: GO 5104
// enable ( 99 ) ;
5101: LD_INT 99
5103: ENABLE_MARKED
// case Game_Type of 3 :
5104: LD_EXP 21
5108: PUSH
5109: LD_INT 3
5111: DOUBLE
5112: EQUAL
5113: IFTRUE 5117
5115: GO 5123
5117: POP
// enable ( 100 ) ; end ;
5118: LD_INT 100
5120: ENABLE_MARKED
5121: GO 5124
5123: POP
// end ;
5124: LD_VAR 0 1
5128: RET
// starting begin disable ( 98 ) ;
5129: LD_INT 98
5131: DISABLE_MARKED
// disable ( 99 ) ;
5132: LD_INT 99
5134: DISABLE_MARKED
// disable ( 100 ) ;
5135: LD_INT 100
5137: DISABLE_MARKED
// disable ( 200 ) ;
5138: LD_INT 200
5140: DISABLE_MARKED
// disable ( 400 ) ;
5141: LD_INT 400
5143: DISABLE_MARKED
// disable ( 401 ) ;
5144: LD_INT 401
5146: DISABLE_MARKED
// mp_selectmsg := true ;
5147: LD_ADDR_OWVAR 13
5151: PUSH
5152: LD_INT 1
5154: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5155: CALL 0 0 0
// init_map ;
5159: CALL 1509 0 0
// init_respawning ;
5163: CALL 14018 0 0
// set_shared_visions_and_alliances ;
5167: CALL 2674 0 0
// prepare_sides ;
5171: CALL 4759 0 0
// ShowTimer ;
5175: CALL 8894 0 0
// if ( Game_Type = 4 ) then
5179: LD_EXP 21
5183: PUSH
5184: LD_INT 4
5186: EQUAL
5187: IFFALSE 5193
// InitBloodGods ;
5189: CALL 8659 0 0
// music_nat := Side_Nations [ your_side ] ;
5193: LD_ADDR_OWVAR 71
5197: PUSH
5198: LD_EXP 39
5202: PUSH
5203: LD_OWVAR 2
5207: ARRAY
5208: ST_TO_ADDR
// if IAmSpec then
5209: CALL_OW 531
5213: IFFALSE 5249
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
5215: LD_INT 0
5217: PPUSH
5218: LD_INT 0
5220: PPUSH
5221: LD_OWVAR 2
5225: PPUSH
5226: LD_INT 32767
5228: NEG
5229: PPUSH
5230: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
5234: LD_INT 104
5236: PPUSH
5237: LD_INT 69
5239: PPUSH
5240: CALL_OW 86
// enable ( 400 ) ;
5244: LD_INT 400
5246: ENABLE_MARKED
// end else
5247: GO 5303
// begin ResetFog ;
5249: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5253: LD_EXP 43
5257: PUSH
5258: LD_EXP 38
5262: PUSH
5263: LD_OWVAR 2
5267: ARRAY
5268: ARRAY
5269: PUSH
5270: LD_INT 1
5272: ARRAY
5273: PPUSH
5274: LD_EXP 43
5278: PUSH
5279: LD_EXP 38
5283: PUSH
5284: LD_OWVAR 2
5288: ARRAY
5289: ARRAY
5290: PUSH
5291: LD_INT 2
5293: ARRAY
5294: PPUSH
5295: CALL_OW 86
// Init_Win_Condition ;
5299: CALL 5087 0 0
// end ; AnimateTrees ( true ) ;
5303: LD_INT 1
5305: PPUSH
5306: CALL_OW 573
// InitApeman ;
5310: CALL 6009 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
5314: LD_ADDR_EXP 62
5318: PUSH
5319: LD_INT 9
5321: PUSH
5322: LD_INT 10
5324: PUSH
5325: LD_INT 11
5327: PUSH
5328: LD_INT 12
5330: PUSH
5331: LD_INT 13
5333: PUSH
5334: LD_INT 14
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: LIST
5341: LIST
5342: LIST
5343: LIST
5344: ST_TO_ADDR
// BeginBuildUp ;
5345: CALL 14512 0 0
// end ; end_of_file
5349: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5350: GO 5352
5352: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5353: LD_INT 4
5355: PPUSH
5356: LD_INT 5
5358: PPUSH
5359: CALL_OW 12
5363: PPUSH
5364: LD_INT 1
5366: PPUSH
5367: CALL_OW 57
// enable ;
5371: ENABLE
// end ;
5372: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5373: GO 5375
5375: DISABLE
5376: LD_INT 0
5378: PPUSH
5379: PPUSH
// begin case tick of 1 .. 1 1$0 :
5380: LD_OWVAR 1
5384: PUSH
5385: LD_INT 1
5387: DOUBLE
5388: GREATEREQUAL
5389: IFFALSE 5397
5391: LD_INT 2100
5393: DOUBLE
5394: LESSEQUAL
5395: IFTRUE 5399
5397: GO 5427
5399: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5400: LD_EXP 28
5404: PUSH
5405: LD_INT 100
5407: DIVREAL
5408: PUSH
5409: LD_INT 525
5411: PPUSH
5412: LD_INT 1050
5414: PPUSH
5415: CALL_OW 12
5419: MUL
5420: PPUSH
5421: CALL_OW 67
5425: GO 5729
5427: LD_INT 2100
5429: PUSH
5430: LD_INT 1
5432: PLUS
5433: DOUBLE
5434: GREATEREQUAL
5435: IFFALSE 5443
5437: LD_INT 10500
5439: DOUBLE
5440: LESSEQUAL
5441: IFTRUE 5445
5443: GO 5473
5445: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5446: LD_EXP 28
5450: PUSH
5451: LD_INT 100
5453: DIVREAL
5454: PUSH
5455: LD_INT 1050
5457: PPUSH
5458: LD_INT 1750
5460: PPUSH
5461: CALL_OW 12
5465: MUL
5466: PPUSH
5467: CALL_OW 67
5471: GO 5729
5473: LD_INT 10500
5475: PUSH
5476: LD_INT 1
5478: PLUS
5479: DOUBLE
5480: GREATEREQUAL
5481: IFFALSE 5489
5483: LD_INT 21000
5485: DOUBLE
5486: LESSEQUAL
5487: IFTRUE 5491
5489: GO 5519
5491: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5492: LD_EXP 28
5496: PUSH
5497: LD_INT 100
5499: DIVREAL
5500: PUSH
5501: LD_INT 1750
5503: PPUSH
5504: LD_INT 2100
5506: PPUSH
5507: CALL_OW 12
5511: MUL
5512: PPUSH
5513: CALL_OW 67
5517: GO 5729
5519: LD_INT 21000
5521: PUSH
5522: LD_INT 1
5524: PLUS
5525: DOUBLE
5526: GREATEREQUAL
5527: IFFALSE 5535
5529: LD_INT 42000
5531: DOUBLE
5532: LESSEQUAL
5533: IFTRUE 5537
5535: GO 5565
5537: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5538: LD_EXP 28
5542: PUSH
5543: LD_INT 100
5545: DIVREAL
5546: PUSH
5547: LD_INT 2100
5549: PPUSH
5550: LD_INT 2275
5552: PPUSH
5553: CALL_OW 12
5557: MUL
5558: PPUSH
5559: CALL_OW 67
5563: GO 5729
5565: LD_INT 42000
5567: PUSH
5568: LD_INT 1
5570: PLUS
5571: DOUBLE
5572: GREATEREQUAL
5573: IFFALSE 5581
5575: LD_INT 63000
5577: DOUBLE
5578: LESSEQUAL
5579: IFTRUE 5583
5581: GO 5611
5583: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5584: LD_EXP 28
5588: PUSH
5589: LD_INT 100
5591: DIVREAL
5592: PUSH
5593: LD_INT 2275
5595: PPUSH
5596: LD_INT 2450
5598: PPUSH
5599: CALL_OW 12
5603: MUL
5604: PPUSH
5605: CALL_OW 67
5609: GO 5729
5611: LD_INT 63000
5613: PUSH
5614: LD_INT 1
5616: PLUS
5617: DOUBLE
5618: GREATEREQUAL
5619: IFFALSE 5627
5621: LD_INT 105000
5623: DOUBLE
5624: LESSEQUAL
5625: IFTRUE 5629
5627: GO 5657
5629: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5630: LD_EXP 28
5634: PUSH
5635: LD_INT 100
5637: DIVREAL
5638: PUSH
5639: LD_INT 2450
5641: PPUSH
5642: LD_INT 2800
5644: PPUSH
5645: CALL_OW 12
5649: MUL
5650: PPUSH
5651: CALL_OW 67
5655: GO 5729
5657: LD_INT 105000
5659: PUSH
5660: LD_INT 1
5662: PLUS
5663: DOUBLE
5664: GREATEREQUAL
5665: IFFALSE 5673
5667: LD_INT 630000
5669: DOUBLE
5670: LESSEQUAL
5671: IFTRUE 5675
5673: GO 5703
5675: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5676: LD_EXP 28
5680: PUSH
5681: LD_INT 100
5683: DIVREAL
5684: PUSH
5685: LD_INT 2800
5687: PPUSH
5688: LD_INT 3500
5690: PPUSH
5691: CALL_OW 12
5695: MUL
5696: PPUSH
5697: CALL_OW 67
5701: GO 5729
5703: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5704: LD_EXP 28
5708: PUSH
5709: LD_INT 100
5711: DIVREAL
5712: PUSH
5713: LD_INT 3500
5715: PPUSH
5716: LD_INT 3850
5718: PPUSH
5719: CALL_OW 12
5723: MUL
5724: PPUSH
5725: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5729: LD_ADDR_VAR 0 2
5733: PUSH
5734: LD_INT 3
5736: PPUSH
5737: LD_INT 5
5739: PPUSH
5740: CALL_OW 12
5744: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5745: LD_ADDR_VAR 0 1
5749: PUSH
5750: LD_EXP 38
5754: PUSH
5755: LD_INT 0
5757: PUSH
5758: EMPTY
5759: LIST
5760: DIFF
5761: PUSH
5762: FOR_IN
5763: IFFALSE 5812
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5765: LD_VAR 0 2
5769: PPUSH
5770: LD_EXP 43
5774: PUSH
5775: LD_VAR 0 1
5779: ARRAY
5780: PUSH
5781: LD_INT 1
5783: ARRAY
5784: PPUSH
5785: LD_EXP 43
5789: PUSH
5790: LD_VAR 0 1
5794: ARRAY
5795: PUSH
5796: LD_INT 2
5798: ARRAY
5799: PPUSH
5800: LD_INT 20
5802: PPUSH
5803: LD_INT 1
5805: PPUSH
5806: CALL_OW 56
5810: GO 5762
5812: POP
5813: POP
// enable ;
5814: ENABLE
// end ; end_of_file
5815: PPOPN 2
5817: END
// every 20 20$00 trigger apemanNumber do
5818: LD_EXP 53
5822: IFFALSE 5855
5824: GO 5826
5826: DISABLE
// begin enable ;
5827: ENABLE
// if apeLevel >= 8 then
5828: LD_EXP 58
5832: PUSH
5833: LD_INT 8
5835: GREATEREQUAL
5836: IFFALSE 5841
// disable else
5838: DISABLE
5839: GO 5855
// apeLevel := apeLevel + 1 ;
5841: LD_ADDR_EXP 58
5845: PUSH
5846: LD_EXP 58
5850: PUSH
5851: LD_INT 1
5853: PLUS
5854: ST_TO_ADDR
// end ;
5855: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5856: LD_EXP 53
5860: PUSH
5861: LD_EXP 54
5865: LESS
5866: IFFALSE 6006
5868: GO 5870
5870: DISABLE
5871: LD_INT 0
5873: PPUSH
5874: PPUSH
5875: PPUSH
5876: PPUSH
// begin enable ;
5877: ENABLE
// for i := 1 to apemanPos do
5878: LD_ADDR_VAR 0 1
5882: PUSH
5883: DOUBLE
5884: LD_INT 1
5886: DEC
5887: ST_TO_ADDR
5888: LD_EXP 56
5892: PUSH
5893: FOR_TO
5894: IFFALSE 6004
// begin if apemanPlayerCount [ i ] then
5896: LD_EXP 57
5900: PUSH
5901: LD_VAR 0 1
5905: ARRAY
5906: IFFALSE 6002
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5908: LD_EXP 57
5912: PUSH
5913: LD_VAR 0 1
5917: ARRAY
5918: PUSH
5919: LD_EXP 56
5923: PUSH
5924: LD_VAR 0 1
5928: ARRAY
5929: GREATER
5930: IFFALSE 6002
// begin ape := PrepareApeman ;
5932: LD_ADDR_VAR 0 2
5936: PUSH
5937: CALL 6517 0 0
5941: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5942: LD_VAR 0 2
5946: PPUSH
5947: LD_EXP 59
5951: PUSH
5952: LD_VAR 0 1
5956: ARRAY
5957: PPUSH
5958: LD_INT 0
5960: PPUSH
5961: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5965: LD_ADDR_EXP 56
5969: PUSH
5970: LD_EXP 56
5974: PPUSH
5975: LD_VAR 0 1
5979: PPUSH
5980: LD_EXP 56
5984: PUSH
5985: LD_VAR 0 1
5989: ARRAY
5990: PUSH
5991: LD_VAR 0 2
5995: UNION
5996: PPUSH
5997: CALL_OW 1
6001: ST_TO_ADDR
// end ; end ; end ;
6002: GO 5893
6004: POP
6005: POP
// end ;
6006: PPOPN 4
6008: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6009: LD_INT 0
6011: PPUSH
6012: PPUSH
6013: PPUSH
6014: PPUSH
6015: PPUSH
6016: PPUSH
6017: PPUSH
// playersAmount := 0 ;
6018: LD_ADDR_VAR 0 3
6022: PUSH
6023: LD_INT 0
6025: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
6026: LD_ADDR_VAR 0 7
6030: PUSH
6031: LD_INT 1
6033: PUSH
6034: LD_INT 2
6036: PUSH
6037: LD_INT 3
6039: PUSH
6040: LD_INT 4
6042: PUSH
6043: LD_INT 5
6045: PUSH
6046: LD_INT 6
6048: PUSH
6049: EMPTY
6050: LIST
6051: LIST
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6057: LD_ADDR_EXP 59
6061: PUSH
6062: LD_INT 0
6064: PUSH
6065: LD_INT 0
6067: PUSH
6068: LD_INT 0
6070: PUSH
6071: LD_INT 0
6073: PUSH
6074: LD_INT 0
6076: PUSH
6077: LD_INT 0
6079: PUSH
6080: LD_INT 0
6082: PUSH
6083: LD_INT 0
6085: PUSH
6086: EMPTY
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: ST_TO_ADDR
// for j = 1 to Side_Positions do
6096: LD_ADDR_VAR 0 4
6100: PUSH
6101: DOUBLE
6102: LD_INT 1
6104: DEC
6105: ST_TO_ADDR
6106: LD_EXP 38
6110: PUSH
6111: FOR_TO
6112: IFFALSE 6179
// if Side_Positions [ j ] then
6114: LD_EXP 38
6118: PUSH
6119: LD_VAR 0 4
6123: ARRAY
6124: IFFALSE 6177
// begin playersAmount := playersAmount + 1 ;
6126: LD_ADDR_VAR 0 3
6130: PUSH
6131: LD_VAR 0 3
6135: PUSH
6136: LD_INT 1
6138: PLUS
6139: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6140: LD_ADDR_EXP 59
6144: PUSH
6145: LD_EXP 59
6149: PPUSH
6150: LD_VAR 0 4
6154: PPUSH
6155: LD_VAR 0 7
6159: PUSH
6160: LD_EXP 38
6164: PUSH
6165: LD_VAR 0 4
6169: ARRAY
6170: ARRAY
6171: PPUSH
6172: CALL_OW 1
6176: ST_TO_ADDR
// end ;
6177: GO 6111
6179: POP
6180: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6181: LD_ADDR_EXP 55
6185: PUSH
6186: LD_INT 3
6188: PUSH
6189: LD_EXP 30
6193: MUL
6194: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6195: LD_ADDR_EXP 53
6199: PUSH
6200: LD_VAR 0 3
6204: PUSH
6205: LD_EXP 55
6209: MUL
6210: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6211: LD_ADDR_EXP 54
6215: PUSH
6216: LD_EXP 53
6220: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6221: LD_ADDR_EXP 56
6225: PUSH
6226: LD_INT 0
6228: PUSH
6229: LD_INT 0
6231: PUSH
6232: LD_INT 0
6234: PUSH
6235: LD_INT 0
6237: PUSH
6238: LD_INT 0
6240: PUSH
6241: LD_INT 0
6243: PUSH
6244: LD_INT 0
6246: PUSH
6247: LD_INT 0
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6260: LD_ADDR_EXP 57
6264: PUSH
6265: LD_INT 0
6267: PUSH
6268: LD_INT 0
6270: PUSH
6271: LD_INT 0
6273: PUSH
6274: LD_INT 0
6276: PUSH
6277: LD_INT 0
6279: PUSH
6280: LD_INT 0
6282: PUSH
6283: LD_INT 0
6285: PUSH
6286: LD_INT 0
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: ST_TO_ADDR
// apeLevel := 1 ;
6299: LD_ADDR_EXP 58
6303: PUSH
6304: LD_INT 1
6306: ST_TO_ADDR
// if not apemanNumber then
6307: LD_EXP 53
6311: NOT
6312: IFFALSE 6316
// exit ;
6314: GO 6512
// for i := 1 to apemanPerPlayer do
6316: LD_ADDR_VAR 0 2
6320: PUSH
6321: DOUBLE
6322: LD_INT 1
6324: DEC
6325: ST_TO_ADDR
6326: LD_EXP 55
6330: PUSH
6331: FOR_TO
6332: IFFALSE 6510
// begin for j := 1 to Side_Positions do
6334: LD_ADDR_VAR 0 4
6338: PUSH
6339: DOUBLE
6340: LD_INT 1
6342: DEC
6343: ST_TO_ADDR
6344: LD_EXP 38
6348: PUSH
6349: FOR_TO
6350: IFFALSE 6506
// if Side_Positions [ j ] then
6352: LD_EXP 38
6356: PUSH
6357: LD_VAR 0 4
6361: ARRAY
6362: IFFALSE 6504
// begin pos := Side_Positions [ j ] ;
6364: LD_ADDR_VAR 0 6
6368: PUSH
6369: LD_EXP 38
6373: PUSH
6374: LD_VAR 0 4
6378: ARRAY
6379: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6380: LD_ADDR_EXP 57
6384: PUSH
6385: LD_EXP 57
6389: PPUSH
6390: LD_VAR 0 4
6394: PPUSH
6395: LD_EXP 57
6399: PUSH
6400: LD_VAR 0 4
6404: ARRAY
6405: PUSH
6406: LD_INT 1
6408: PLUS
6409: PPUSH
6410: CALL_OW 1
6414: ST_TO_ADDR
// ape := PrepareApeman ;
6415: LD_ADDR_VAR 0 5
6419: PUSH
6420: CALL 6517 0 0
6424: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6425: LD_ADDR_EXP 56
6429: PUSH
6430: LD_EXP 56
6434: PPUSH
6435: LD_VAR 0 4
6439: PPUSH
6440: LD_EXP 56
6444: PUSH
6445: LD_VAR 0 4
6449: ARRAY
6450: PPUSH
6451: LD_EXP 56
6455: PUSH
6456: LD_VAR 0 4
6460: ARRAY
6461: PUSH
6462: LD_INT 1
6464: PLUS
6465: PPUSH
6466: LD_VAR 0 5
6470: PPUSH
6471: CALL_OW 1
6475: PPUSH
6476: CALL_OW 1
6480: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6481: LD_VAR 0 5
6485: PPUSH
6486: LD_EXP 59
6490: PUSH
6491: LD_VAR 0 4
6495: ARRAY
6496: PPUSH
6497: LD_INT 0
6499: PPUSH
6500: CALL_OW 49
// end ;
6504: GO 6349
6506: POP
6507: POP
// end ;
6508: GO 6331
6510: POP
6511: POP
// end ;
6512: LD_VAR 0 1
6516: RET
// export function PrepareApeman ; var bonus ; begin
6517: LD_INT 0
6519: PPUSH
6520: PPUSH
// uc_side := 0 ;
6521: LD_ADDR_OWVAR 20
6525: PUSH
6526: LD_INT 0
6528: ST_TO_ADDR
// uc_nation := 0 ;
6529: LD_ADDR_OWVAR 21
6533: PUSH
6534: LD_INT 0
6536: ST_TO_ADDR
// InitHc ;
6537: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6541: LD_ADDR_VAR 0 2
6545: PUSH
6546: LD_INT 1
6548: NEG
6549: PUSH
6550: LD_INT 0
6552: PUSH
6553: LD_INT 1
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: LIST
6560: PUSH
6561: LD_OWVAR 1
6565: PUSH
6566: LD_INT 3
6568: MOD
6569: PUSH
6570: LD_INT 1
6572: PLUS
6573: ARRAY
6574: ST_TO_ADDR
// hc_class := class_apeman ;
6575: LD_ADDR_OWVAR 28
6579: PUSH
6580: LD_INT 12
6582: ST_TO_ADDR
// hc_gallery :=  ;
6583: LD_ADDR_OWVAR 33
6587: PUSH
6588: LD_STRING 
6590: ST_TO_ADDR
// hc_name :=  ;
6591: LD_ADDR_OWVAR 26
6595: PUSH
6596: LD_STRING 
6598: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6599: LD_ADDR_OWVAR 31
6603: PUSH
6604: LD_EXP 58
6608: PUSH
6609: LD_VAR 0 2
6613: PLUS
6614: PUSH
6615: LD_EXP 58
6619: PUSH
6620: LD_VAR 0 2
6624: PLUS
6625: PUSH
6626: LD_EXP 58
6630: PUSH
6631: LD_VAR 0 2
6635: PLUS
6636: PUSH
6637: LD_EXP 58
6641: PUSH
6642: LD_VAR 0 2
6646: PLUS
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6654: LD_ADDR_OWVAR 35
6658: PUSH
6659: LD_INT 10
6661: PUSH
6662: LD_VAR 0 2
6666: MUL
6667: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6668: LD_ADDR_OWVAR 29
6672: PUSH
6673: LD_INT 12
6675: PUSH
6676: LD_INT 10
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: ST_TO_ADDR
// result := CreateHuman ;
6683: LD_ADDR_VAR 0 1
6687: PUSH
6688: CALL_OW 44
6692: ST_TO_ADDR
// end ;
6693: LD_VAR 0 1
6697: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6698: LD_INT 0
6700: PPUSH
6701: PPUSH
6702: PPUSH
// if not ape then
6703: LD_VAR 0 1
6707: NOT
6708: IFFALSE 6712
// exit ;
6710: GO 6837
// side := GetSide ( ape ) ;
6712: LD_ADDR_VAR 0 3
6716: PUSH
6717: LD_VAR 0 1
6721: PPUSH
6722: CALL_OW 255
6726: ST_TO_ADDR
// if not side then
6727: LD_VAR 0 3
6731: NOT
6732: IFFALSE 6786
// begin for i = 1 to apemanPos do
6734: LD_ADDR_VAR 0 4
6738: PUSH
6739: DOUBLE
6740: LD_INT 1
6742: DEC
6743: ST_TO_ADDR
6744: LD_EXP 56
6748: PUSH
6749: FOR_TO
6750: IFFALSE 6784
// if ape in apemanPos [ i ] then
6752: LD_VAR 0 1
6756: PUSH
6757: LD_EXP 56
6761: PUSH
6762: LD_VAR 0 4
6766: ARRAY
6767: IN
6768: IFFALSE 6782
// begin side := i ;
6770: LD_ADDR_VAR 0 3
6774: PUSH
6775: LD_VAR 0 4
6779: ST_TO_ADDR
// break ;
6780: GO 6784
// end ;
6782: GO 6749
6784: POP
6785: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6786: LD_ADDR_EXP 56
6790: PUSH
6791: LD_EXP 56
6795: PPUSH
6796: LD_VAR 0 3
6800: PPUSH
6801: LD_EXP 56
6805: PUSH
6806: LD_VAR 0 3
6810: ARRAY
6811: PUSH
6812: LD_VAR 0 1
6816: DIFF
6817: PPUSH
6818: CALL_OW 1
6822: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6823: LD_ADDR_EXP 53
6827: PUSH
6828: LD_EXP 53
6832: PUSH
6833: LD_INT 1
6835: MINUS
6836: ST_TO_ADDR
// end ; end_of_file
6837: LD_VAR 0 2
6841: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6842: LD_VAR 0 1
6846: PPUSH
6847: CALL_OW 266
6851: PUSH
6852: LD_INT 0
6854: PUSH
6855: LD_INT 1
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: IN
6862: IFFALSE 6887
// SetBName ( b , @ & GetSide ( b ) ) ;
6864: LD_VAR 0 1
6868: PPUSH
6869: LD_STRING @
6871: PUSH
6872: LD_VAR 0 1
6876: PPUSH
6877: CALL_OW 255
6881: STR
6882: PPUSH
6883: CALL_OW 500
// end ;
6887: PPOPN 2
6889: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6890: LD_VAR 0 1
6894: PPUSH
6895: CALL_OW 266
6899: PUSH
6900: LD_INT 0
6902: PUSH
6903: LD_INT 1
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: IN
6910: IFFALSE 6935
// SetBName ( b , @ & GetSide ( b ) ) ;
6912: LD_VAR 0 1
6916: PPUSH
6917: LD_STRING @
6919: PUSH
6920: LD_VAR 0 1
6924: PPUSH
6925: CALL_OW 255
6929: STR
6930: PPUSH
6931: CALL_OW 500
// end ;
6935: PPOPN 3
6937: END
// on VehicleConstructed ( veh , fac ) do var side ;
6938: LD_INT 0
6940: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6941: LD_VAR 0 1
6945: PPUSH
6946: CALL_OW 263
6950: PUSH
6951: LD_INT 5
6953: EQUAL
6954: IFFALSE 7096
// begin side := GetSide ( veh ) ;
6956: LD_ADDR_VAR 0 3
6960: PUSH
6961: LD_VAR 0 1
6965: PPUSH
6966: CALL_OW 255
6970: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6971: LD_ADDR_EXP 56
6975: PUSH
6976: LD_EXP 56
6980: PPUSH
6981: LD_VAR 0 3
6985: PPUSH
6986: LD_EXP 56
6990: PUSH
6991: LD_VAR 0 3
6995: ARRAY
6996: PPUSH
6997: LD_INT 52
6999: PUSH
7000: EMPTY
7001: LIST
7002: PPUSH
7003: CALL_OW 72
7007: PUSH
7008: LD_INT 22
7010: PUSH
7011: LD_VAR 0 3
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PUSH
7020: LD_INT 2
7022: PUSH
7023: LD_INT 33
7025: PUSH
7026: LD_INT 5
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PUSH
7033: LD_INT 25
7035: PUSH
7036: LD_INT 12
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PUSH
7043: LD_INT 25
7045: PUSH
7046: LD_INT 15
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: PUSH
7053: LD_INT 25
7055: PUSH
7056: LD_INT 16
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: PUSH
7063: LD_INT 25
7065: PUSH
7066: LD_INT 17
7068: PUSH
7069: EMPTY
7070: LIST
7071: LIST
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: PPUSH
7085: CALL_OW 69
7089: UNION
7090: PPUSH
7091: CALL_OW 1
7095: ST_TO_ADDR
// end ; end ;
7096: PPOPN 3
7098: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7099: LD_INT 0
7101: PPUSH
7102: PPUSH
7103: PPUSH
7104: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7105: LD_VAR 0 1
7109: PPUSH
7110: CALL_OW 257
7114: PUSH
7115: LD_INT 12
7117: PUSH
7118: LD_INT 15
7120: PUSH
7121: LD_INT 17
7123: PUSH
7124: LD_INT 16
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: LIST
7131: LIST
7132: IN
7133: PUSH
7134: LD_VAR 0 1
7138: PPUSH
7139: CALL_OW 263
7143: PUSH
7144: LD_INT 5
7146: EQUAL
7147: OR
7148: IFFALSE 7159
// ApeKilled ( j ) ;
7150: LD_VAR 0 1
7154: PPUSH
7155: CALL 6698 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7159: LD_VAR 0 1
7163: PPUSH
7164: CALL_OW 266
7168: PUSH
7169: LD_INT 0
7171: PUSH
7172: LD_INT 1
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: IN
7179: IFFALSE 7261
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7181: LD_ADDR_VAR 0 4
7185: PUSH
7186: LD_EXP 38
7190: PUSH
7191: LD_VAR 0 1
7195: PPUSH
7196: CALL_OW 255
7200: ARRAY
7201: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7202: LD_ADDR_VAR 0 2
7206: PUSH
7207: LD_EXP 43
7211: PUSH
7212: LD_VAR 0 4
7216: ARRAY
7217: PUSH
7218: LD_INT 1
7220: ARRAY
7221: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7222: LD_ADDR_VAR 0 3
7226: PUSH
7227: LD_EXP 43
7231: PUSH
7232: LD_VAR 0 4
7236: ARRAY
7237: PUSH
7238: LD_INT 2
7240: ARRAY
7241: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7242: LD_VAR 0 2
7246: PPUSH
7247: LD_VAR 0 3
7251: PPUSH
7252: CALL_OW 420
7256: PPUSH
7257: CALL_OW 419
// end ; end ;
7261: PPOPN 5
7263: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7264: LD_VAR 0 1
7268: PPUSH
7269: LD_VAR 0 2
7273: PPUSH
7274: LD_VAR 0 3
7278: PPUSH
7279: LD_OWVAR 2
7283: PPUSH
7284: CALL 9055 0 4
7288: PPOPN 3
7290: END
// every 0 0$1 marked 100 do var i , base , pom , filter , sib_mined ;
7291: GO 7293
7293: DISABLE
7294: LD_INT 0
7296: PPUSH
7297: PPUSH
7298: PPUSH
7299: PPUSH
7300: PPUSH
// begin sib_mined := [ ] ;
7301: LD_ADDR_VAR 0 5
7305: PUSH
7306: EMPTY
7307: ST_TO_ADDR
// for i := 1 to 8 do
7308: LD_ADDR_VAR 0 1
7312: PUSH
7313: DOUBLE
7314: LD_INT 1
7316: DEC
7317: ST_TO_ADDR
7318: LD_INT 8
7320: PUSH
7321: FOR_TO
7322: IFFALSE 7478
// if Side_Positions [ i ] then
7324: LD_EXP 38
7328: PUSH
7329: LD_VAR 0 1
7333: ARRAY
7334: IFFALSE 7462
// begin filter := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7336: LD_ADDR_VAR 0 4
7340: PUSH
7341: LD_INT 22
7343: PUSH
7344: LD_VAR 0 1
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: PUSH
7353: LD_INT 2
7355: PUSH
7356: LD_INT 30
7358: PUSH
7359: LD_INT 0
7361: PUSH
7362: EMPTY
7363: LIST
7364: LIST
7365: PUSH
7366: LD_INT 30
7368: PUSH
7369: LD_INT 1
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: LIST
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: PPUSH
7385: CALL_OW 69
7389: ST_TO_ADDR
// pom := 0 ;
7390: LD_ADDR_VAR 0 3
7394: PUSH
7395: LD_INT 0
7397: ST_TO_ADDR
// for base in filter do
7398: LD_ADDR_VAR 0 2
7402: PUSH
7403: LD_VAR 0 4
7407: PUSH
7408: FOR_IN
7409: IFFALSE 7442
// pom := pom + GetResourceType ( GetBase ( base ) , mat_siberit ) ;
7411: LD_ADDR_VAR 0 3
7415: PUSH
7416: LD_VAR 0 3
7420: PUSH
7421: LD_VAR 0 2
7425: PPUSH
7426: CALL_OW 274
7430: PPUSH
7431: LD_INT 3
7433: PPUSH
7434: CALL_OW 275
7438: PLUS
7439: ST_TO_ADDR
7440: GO 7408
7442: POP
7443: POP
// sib_mined := sib_mined ^ pom ;
7444: LD_ADDR_VAR 0 5
7448: PUSH
7449: LD_VAR 0 5
7453: PUSH
7454: LD_VAR 0 3
7458: ADD
7459: ST_TO_ADDR
// end else
7460: GO 7476
// sib_mined := sib_mined ^ 0 ;
7462: LD_ADDR_VAR 0 5
7466: PUSH
7467: LD_VAR 0 5
7471: PUSH
7472: LD_INT 0
7474: ADD
7475: ST_TO_ADDR
7476: GO 7321
7478: POP
7479: POP
// if not def_public_score then
7480: LD_EXP 14
7484: NOT
7485: IFFALSE 7575
// begin ExtraStrings := [ ] ;
7487: LD_ADDR_EXP 60
7491: PUSH
7492: EMPTY
7493: ST_TO_ADDR
// for i := 1 to 8 do
7494: LD_ADDR_VAR 0 1
7498: PUSH
7499: DOUBLE
7500: LD_INT 1
7502: DEC
7503: ST_TO_ADDR
7504: LD_INT 8
7506: PUSH
7507: FOR_TO
7508: IFFALSE 7571
// if Side_Positions [ i ] then
7510: LD_EXP 38
7514: PUSH
7515: LD_VAR 0 1
7519: ARRAY
7520: IFFALSE 7569
// ExtraStrings := ExtraStrings ^ [ #AlienBase-MinedPublic , i , i , sib_mined [ i ] , amount_of_siberit ] ;
7522: LD_ADDR_EXP 60
7526: PUSH
7527: LD_EXP 60
7531: PUSH
7532: LD_STRING #AlienBase-MinedPublic
7534: PUSH
7535: LD_VAR 0 1
7539: PUSH
7540: LD_VAR 0 1
7544: PUSH
7545: LD_VAR 0 5
7549: PUSH
7550: LD_VAR 0 1
7554: ARRAY
7555: PUSH
7556: LD_EXP 31
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: ADD
7568: ST_TO_ADDR
7569: GO 7507
7571: POP
7572: POP
// end else
7573: GO 7604
// ExtraStrings := [ #AlienBase-Mined , sib_mined [ Your_Side ] , amount_of_siberit ] ;
7575: LD_ADDR_EXP 60
7579: PUSH
7580: LD_STRING #AlienBase-Mined
7582: PUSH
7583: LD_VAR 0 5
7587: PUSH
7588: LD_OWVAR 2
7592: ARRAY
7593: PUSH
7594: LD_EXP 31
7598: PUSH
7599: EMPTY
7600: LIST
7601: LIST
7602: LIST
7603: ST_TO_ADDR
// for i := 1 to 8 do
7604: LD_ADDR_VAR 0 1
7608: PUSH
7609: DOUBLE
7610: LD_INT 1
7612: DEC
7613: ST_TO_ADDR
7614: LD_INT 8
7616: PUSH
7617: FOR_TO
7618: IFFALSE 7675
// if sib_mined [ i ] >= amount_of_siberit then
7620: LD_VAR 0 5
7624: PUSH
7625: LD_VAR 0 1
7629: ARRAY
7630: PUSH
7631: LD_EXP 31
7635: GREATEREQUAL
7636: IFFALSE 7673
// begin wait ( 0 0$1 ) ;
7638: LD_INT 35
7640: PPUSH
7641: CALL_OW 67
// if sib_mined [ your_side ] >= amount_of_siberit then
7645: LD_VAR 0 5
7649: PUSH
7650: LD_OWVAR 2
7654: ARRAY
7655: PUSH
7656: LD_EXP 31
7660: GREATEREQUAL
7661: IFFALSE 7669
// YouWinInMultiplayer else
7663: CALL_OW 106
7667: GO 7673
// YouLostInMultiplayer ;
7669: CALL_OW 107
// end ;
7673: GO 7617
7675: POP
7676: POP
// enable ;
7677: ENABLE
// end ; end_of_file
7678: PPOPN 5
7680: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7681: LD_INT 0
7683: PPUSH
7684: PPUSH
// for un in battle_flags_id do
7685: LD_ADDR_VAR 0 2
7689: PUSH
7690: LD_EXP 48
7694: PUSH
7695: FOR_IN
7696: IFFALSE 7771
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7698: LD_VAR 0 2
7702: PPUSH
7703: LD_INT 1
7705: PUSH
7706: LD_LOC 9
7710: PUSH
7711: EMPTY
7712: LIST
7713: LIST
7714: PUSH
7715: LD_INT 2
7717: PUSH
7718: LD_LOC 9
7722: PUSH
7723: LD_INT 2
7725: DIV
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: PUSH
7731: LD_INT 3
7733: PUSH
7734: LD_LOC 9
7738: PUSH
7739: LD_INT 5
7741: DIV
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: PUSH
7747: LD_INT 20
7749: PUSH
7750: LD_LOC 9
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: PPUSH
7765: CALL_OW 423
7769: GO 7695
7771: POP
7772: POP
// end ;
7773: LD_VAR 0 1
7777: RET
// every 1 do var un ;
7778: GO 7780
7780: DISABLE
7781: LD_INT 0
7783: PPUSH
// begin if not def_morale_flags then
7784: LD_EXP 9
7788: NOT
7789: IFFALSE 7793
// exit ;
7791: GO 7870
// if not morale_decreasing_time then
7793: LD_EXP 29
7797: NOT
7798: IFFALSE 7802
// exit ;
7800: GO 7870
// strength = 100 ;
7802: LD_ADDR_LOC 9
7806: PUSH
7807: LD_INT 100
7809: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7810: LD_EXP 29
7814: PPUSH
7815: CALL_OW 67
// strength := strength - 1 ;
7819: LD_ADDR_LOC 9
7823: PUSH
7824: LD_LOC 9
7828: PUSH
7829: LD_INT 1
7831: MINUS
7832: ST_TO_ADDR
// Update_Flags ;
7833: CALL 7681 0 0
// until not strength ;
7837: LD_LOC 9
7841: NOT
7842: IFFALSE 7810
// for un in battle_flags_id do
7844: LD_ADDR_VAR 0 1
7848: PUSH
7849: LD_EXP 48
7853: PUSH
7854: FOR_IN
7855: IFFALSE 7868
// KillBattleFlag ( un ) ;
7857: LD_VAR 0 1
7861: PPUSH
7862: CALL_OW 419
7866: GO 7854
7868: POP
7869: POP
// end ; end_of_file
7870: PPOPN 1
7872: END
// var BloodGods , BloodGods_LastKills , BloodGods_CurrentKills , BloodGods_Positions ; every 0 0$3 marked 200 do var x ;
7873: GO 7875
7875: DISABLE
7876: LD_INT 0
7878: PPUSH
// begin enable ;
7879: ENABLE
// for x := 1 to 8 do
7880: LD_ADDR_VAR 0 1
7884: PUSH
7885: DOUBLE
7886: LD_INT 1
7888: DEC
7889: ST_TO_ADDR
7890: LD_INT 8
7892: PUSH
7893: FOR_TO
7894: IFFALSE 7978
// if ( BloodGods_CurrentKills [ x ] > 5 ) and ( BloodGods [ x ] = - 1 ) then
7896: LD_LOC 16
7900: PUSH
7901: LD_VAR 0 1
7905: ARRAY
7906: PUSH
7907: LD_INT 5
7909: GREATER
7910: PUSH
7911: LD_LOC 14
7915: PUSH
7916: LD_VAR 0 1
7920: ARRAY
7921: PUSH
7922: LD_INT 1
7924: NEG
7925: EQUAL
7926: AND
7927: IFFALSE 7976
// begin BloodGods_LastKills := Replace ( BloodGods_LastKills , x , BloodGods_LastKills [ x ] + 6 ) ;
7929: LD_ADDR_LOC 15
7933: PUSH
7934: LD_LOC 15
7938: PPUSH
7939: LD_VAR 0 1
7943: PPUSH
7944: LD_LOC 15
7948: PUSH
7949: LD_VAR 0 1
7953: ARRAY
7954: PUSH
7955: LD_INT 6
7957: PLUS
7958: PPUSH
7959: CALL_OW 1
7963: ST_TO_ADDR
// AwakenBloodGod ( x , false ) ;
7964: LD_VAR 0 1
7968: PPUSH
7969: LD_INT 0
7971: PPUSH
7972: CALL 8150 0 2
// end ;
7976: GO 7893
7978: POP
7979: POP
// end ;
7980: PPOPN 1
7982: END
// every 0 0$1 marked 200 do var BGL , x ;
7983: GO 7985
7985: DISABLE
7986: LD_INT 0
7988: PPUSH
7989: PPUSH
// begin enable ;
7990: ENABLE
// for x := 1 to 8 do
7991: LD_ADDR_VAR 0 2
7995: PUSH
7996: DOUBLE
7997: LD_INT 1
7999: DEC
8000: ST_TO_ADDR
8001: LD_INT 8
8003: PUSH
8004: FOR_TO
8005: IFFALSE 8136
// if ( BloodGods [ x ] > - 1 ) and IsLive ( BloodGods [ x ] ) then
8007: LD_LOC 14
8011: PUSH
8012: LD_VAR 0 2
8016: ARRAY
8017: PUSH
8018: LD_INT 1
8020: NEG
8021: GREATER
8022: PUSH
8023: LD_LOC 14
8027: PUSH
8028: LD_VAR 0 2
8032: ARRAY
8033: PPUSH
8034: CALL_OW 300
8038: AND
8039: IFFALSE 8134
// begin BGL := GetLives ( BloodGods [ x ] ) ;
8041: LD_ADDR_VAR 0 1
8045: PUSH
8046: LD_LOC 14
8050: PUSH
8051: LD_VAR 0 2
8055: ARRAY
8056: PPUSH
8057: CALL_OW 256
8061: ST_TO_ADDR
// if ( BGL < 1000 ) and ( BGL > 100 ) then
8062: LD_VAR 0 1
8066: PUSH
8067: LD_INT 1000
8069: LESS
8070: PUSH
8071: LD_VAR 0 1
8075: PUSH
8076: LD_INT 100
8078: GREATER
8079: AND
8080: IFFALSE 8134
// begin BGL := BGL + 10 ;
8082: LD_ADDR_VAR 0 1
8086: PUSH
8087: LD_VAR 0 1
8091: PUSH
8092: LD_INT 10
8094: PLUS
8095: ST_TO_ADDR
// if BGL > 1000 then
8096: LD_VAR 0 1
8100: PUSH
8101: LD_INT 1000
8103: GREATER
8104: IFFALSE 8114
// BGL := 1000 ;
8106: LD_ADDR_VAR 0 1
8110: PUSH
8111: LD_INT 1000
8113: ST_TO_ADDR
// SetLives ( BloodGods [ x ] , BGL ) ;
8114: LD_LOC 14
8118: PUSH
8119: LD_VAR 0 2
8123: ARRAY
8124: PPUSH
8125: LD_VAR 0 1
8129: PPUSH
8130: CALL_OW 234
// end ; end ;
8134: GO 8004
8136: POP
8137: POP
// end ;
8138: PPOPN 2
8140: END
// every 0 0$1 marked 200 do
8141: GO 8143
8143: DISABLE
// begin DisplayTimeWithKills ;
8144: CALL 8391 0 0
// enable ;
8148: ENABLE
// end ;
8149: END
// function AwakenBloodGod ( side , NoDialog ) ; begin
8150: LD_INT 0
8152: PPUSH
// uc_direction := Rand ( 0 , 5 ) ;
8153: LD_ADDR_OWVAR 24
8157: PUSH
8158: LD_INT 0
8160: PPUSH
8161: LD_INT 5
8163: PPUSH
8164: CALL_OW 12
8168: ST_TO_ADDR
// PrepareHuman ( 1 , class_soldier , 15 ) ;
8169: LD_INT 1
8171: PPUSH
8172: LD_INT 1
8174: PPUSH
8175: LD_INT 15
8177: PPUSH
8178: CALL_OW 380
// hc_importance := 106 ;
8182: LD_ADDR_OWVAR 32
8186: PUSH
8187: LD_INT 106
8189: ST_TO_ADDR
// hc_name := Blood God of  & mp_sides_players_names [ side ] ;
8190: LD_ADDR_OWVAR 26
8194: PUSH
8195: LD_STRING Blood God of 
8197: PUSH
8198: LD_OWVAR 19
8202: PUSH
8203: LD_VAR 0 1
8207: ARRAY
8208: STR
8209: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
8210: LD_ADDR_OWVAR 21
8214: PUSH
8215: LD_EXP 39
8219: PUSH
8220: LD_VAR 0 1
8224: ARRAY
8225: ST_TO_ADDR
// uc_side := side ;
8226: LD_ADDR_OWVAR 20
8230: PUSH
8231: LD_VAR 0 1
8235: ST_TO_ADDR
// hc_noskilllimit := true ;
8236: LD_ADDR_OWVAR 76
8240: PUSH
8241: LD_INT 1
8243: ST_TO_ADDR
// hc_agressivity := 50 ;
8244: LD_ADDR_OWVAR 35
8248: PUSH
8249: LD_INT 50
8251: ST_TO_ADDR
// BloodGods := Replace ( BloodGods , Side , CreateHuman ) ;
8252: LD_ADDR_LOC 14
8256: PUSH
8257: LD_LOC 14
8261: PPUSH
8262: LD_VAR 0 1
8266: PPUSH
8267: CALL_OW 44
8271: PPUSH
8272: CALL_OW 1
8276: ST_TO_ADDR
// PlaceUnitXYR ( BloodGods [ side ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 1 ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 2 ] , 10 , false ) ;
8277: LD_LOC 14
8281: PUSH
8282: LD_VAR 0 1
8286: ARRAY
8287: PPUSH
8288: LD_LOC 17
8292: PUSH
8293: LD_EXP 38
8297: PUSH
8298: LD_VAR 0 1
8302: ARRAY
8303: ARRAY
8304: PUSH
8305: LD_INT 1
8307: ARRAY
8308: PPUSH
8309: LD_LOC 17
8313: PUSH
8314: LD_EXP 38
8318: PUSH
8319: LD_VAR 0 1
8323: ARRAY
8324: ARRAY
8325: PUSH
8326: LD_INT 2
8328: ARRAY
8329: PPUSH
8330: LD_INT 10
8332: PPUSH
8333: LD_INT 0
8335: PPUSH
8336: CALL_OW 50
// SetAttr ( BloodGods [ side ] , attr_stamina , 300 ) ;
8340: LD_LOC 14
8344: PUSH
8345: LD_VAR 0 1
8349: ARRAY
8350: PPUSH
8351: LD_INT 1
8353: PPUSH
8354: LD_INT 300
8356: PPUSH
8357: CALL_OW 239
// if not NoDialog then
8361: LD_VAR 0 2
8365: NOT
8366: IFFALSE 8386
// SayRadio ( BloodGods [ side ] , DLAwaken ) ;
8368: LD_LOC 14
8372: PUSH
8373: LD_VAR 0 1
8377: ARRAY
8378: PPUSH
8379: LD_STRING DLAwaken
8381: PPUSH
8382: CALL_OW 94
// end ;
8386: LD_VAR 0 3
8390: RET
// function DisplayTimeWithKills ; var x ; begin
8391: LD_INT 0
8393: PPUSH
8394: PPUSH
// ExtraStrings :=  ;
8395: LD_ADDR_EXP 60
8399: PUSH
8400: LD_STRING 
8402: ST_TO_ADDR
// for x = 1 to Side_Positions do
8403: LD_ADDR_VAR 0 2
8407: PUSH
8408: DOUBLE
8409: LD_INT 1
8411: DEC
8412: ST_TO_ADDR
8413: LD_EXP 38
8417: PUSH
8418: FOR_TO
8419: IFFALSE 8652
// if Side_Positions [ x ] then
8421: LD_EXP 38
8425: PUSH
8426: LD_VAR 0 2
8430: ARRAY
8431: IFFALSE 8650
// begin BloodGods_CurrentKills := Replace ( BloodGods_CurrentKills , x , GetHumansKilled ( x ) - BloodGods_LastKills [ x ] ) ;
8433: LD_ADDR_LOC 16
8437: PUSH
8438: LD_LOC 16
8442: PPUSH
8443: LD_VAR 0 2
8447: PPUSH
8448: LD_VAR 0 2
8452: PPUSH
8453: CALL_OW 515
8457: PUSH
8458: LD_LOC 15
8462: PUSH
8463: LD_VAR 0 2
8467: ARRAY
8468: MINUS
8469: PPUSH
8470: CALL_OW 1
8474: ST_TO_ADDR
// if ( BloodGods [ x ] > - 1 ) and ( IsLive ( BloodGods [ x ] ) ) then
8475: LD_LOC 14
8479: PUSH
8480: LD_VAR 0 2
8484: ARRAY
8485: PUSH
8486: LD_INT 1
8488: NEG
8489: GREATER
8490: PUSH
8491: LD_LOC 14
8495: PUSH
8496: LD_VAR 0 2
8500: ARRAY
8501: PPUSH
8502: CALL_OW 300
8506: AND
8507: IFFALSE 8540
// ExtraStrings = ExtraStrings ^ [ #godawoken , x , x ] else
8509: LD_ADDR_EXP 60
8513: PUSH
8514: LD_EXP 60
8518: PUSH
8519: LD_STRING #godawoken
8521: PUSH
8522: LD_VAR 0 2
8526: PUSH
8527: LD_VAR 0 2
8531: PUSH
8532: EMPTY
8533: LIST
8534: LIST
8535: LIST
8536: ADD
8537: ST_TO_ADDR
8538: GO 8650
// if ( BloodGods [ x ] > - 1 ) and ( IsDead ( BloodGods [ x ] ) ) then
8540: LD_LOC 14
8544: PUSH
8545: LD_VAR 0 2
8549: ARRAY
8550: PUSH
8551: LD_INT 1
8553: NEG
8554: GREATER
8555: PUSH
8556: LD_LOC 14
8560: PUSH
8561: LD_VAR 0 2
8565: ARRAY
8566: PPUSH
8567: CALL_OW 301
8571: AND
8572: IFFALSE 8605
// ExtraStrings = ExtraStrings ^ [ #goddied , x , x ] else
8574: LD_ADDR_EXP 60
8578: PUSH
8579: LD_EXP 60
8583: PUSH
8584: LD_STRING #goddied
8586: PUSH
8587: LD_VAR 0 2
8591: PUSH
8592: LD_VAR 0 2
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: LIST
8601: ADD
8602: ST_TO_ADDR
8603: GO 8650
// ExtraStrings = ExtraStrings ^ [ #godssacrifise , x , x , BloodGods_CurrentKills [ x ] , 6 ] end ;
8605: LD_ADDR_EXP 60
8609: PUSH
8610: LD_EXP 60
8614: PUSH
8615: LD_STRING #godssacrifise
8617: PUSH
8618: LD_VAR 0 2
8622: PUSH
8623: LD_VAR 0 2
8627: PUSH
8628: LD_LOC 16
8632: PUSH
8633: LD_VAR 0 2
8637: ARRAY
8638: PUSH
8639: LD_INT 6
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: ADD
8649: ST_TO_ADDR
8650: GO 8418
8652: POP
8653: POP
// end ;
8654: LD_VAR 0 1
8658: RET
// export function InitBloodGods ; begin
8659: LD_INT 0
8661: PPUSH
// BloodGods = [ - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 ] ;
8662: LD_ADDR_LOC 14
8666: PUSH
8667: LD_INT 1
8669: NEG
8670: PUSH
8671: LD_INT 1
8673: NEG
8674: PUSH
8675: LD_INT 1
8677: NEG
8678: PUSH
8679: LD_INT 1
8681: NEG
8682: PUSH
8683: LD_INT 1
8685: NEG
8686: PUSH
8687: LD_INT 1
8689: NEG
8690: PUSH
8691: LD_INT 1
8693: NEG
8694: PUSH
8695: LD_INT 1
8697: NEG
8698: PUSH
8699: EMPTY
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: ST_TO_ADDR
// BloodGods_LastKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8709: LD_ADDR_LOC 15
8713: PUSH
8714: LD_INT 0
8716: PUSH
8717: LD_INT 0
8719: PUSH
8720: LD_INT 0
8722: PUSH
8723: LD_INT 0
8725: PUSH
8726: LD_INT 0
8728: PUSH
8729: LD_INT 0
8731: PUSH
8732: LD_INT 0
8734: PUSH
8735: LD_INT 0
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: ST_TO_ADDR
// BloodGods_CurrentKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8748: LD_ADDR_LOC 16
8752: PUSH
8753: LD_INT 0
8755: PUSH
8756: LD_INT 0
8758: PUSH
8759: LD_INT 0
8761: PUSH
8762: LD_INT 0
8764: PUSH
8765: LD_INT 0
8767: PUSH
8768: LD_INT 0
8770: PUSH
8771: LD_INT 0
8773: PUSH
8774: LD_INT 0
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: LIST
8781: LIST
8782: LIST
8783: LIST
8784: LIST
8785: LIST
8786: ST_TO_ADDR
// BloodGods_Positions = [ [ 60 , 47 ] , [ 82 , 26 ] , [ 124 , 45 ] , [ 147 , 90 ] , [ 126 , 112 ] , [ 84 , 92 ] , [ 106 , 73 ] , [ 106 , 73 ] ] ;
8787: LD_ADDR_LOC 17
8791: PUSH
8792: LD_INT 60
8794: PUSH
8795: LD_INT 47
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: PUSH
8802: LD_INT 82
8804: PUSH
8805: LD_INT 26
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: PUSH
8812: LD_INT 124
8814: PUSH
8815: LD_INT 45
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: PUSH
8822: LD_INT 147
8824: PUSH
8825: LD_INT 90
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: PUSH
8832: LD_INT 126
8834: PUSH
8835: LD_INT 112
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: PUSH
8842: LD_INT 84
8844: PUSH
8845: LD_INT 92
8847: PUSH
8848: EMPTY
8849: LIST
8850: LIST
8851: PUSH
8852: LD_INT 106
8854: PUSH
8855: LD_INT 73
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: PUSH
8862: LD_INT 106
8864: PUSH
8865: LD_INT 73
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: ST_TO_ADDR
// ClearHumansKilled ;
8882: CALL_OW 516
// enable ( 200 ) ;
8886: LD_INT 200
8888: ENABLE_MARKED
// end ; end_of_file
8889: LD_VAR 0 1
8893: RET
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
8894: LD_INT 0
8896: PPUSH
8897: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
8898: LD_ADDR_VAR 0 2
8902: PUSH
8903: LD_STRING #Multi1x1-Time
8905: PUSH
8906: LD_OWVAR 1
8910: PUSH
8911: EMPTY
8912: LIST
8913: LIST
8914: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
8915: LD_INT 0
8917: PUSH
8918: LD_EXP 34
8922: PUSH
8923: LD_OWVAR 1
8927: MINUS
8928: LESSEQUAL
8929: IFFALSE 8960
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
8931: LD_ADDR_VAR 0 2
8935: PUSH
8936: LD_VAR 0 2
8940: PUSH
8941: LD_STRING #allowedsibbomb
8943: PUSH
8944: LD_EXP 34
8948: PUSH
8949: LD_OWVAR 1
8953: MINUS
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: ADD
8959: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
8960: LD_INT 0
8962: PUSH
8963: LD_EXP 64
8967: PUSH
8968: LD_OWVAR 1
8972: MINUS
8973: LESSEQUAL
8974: IFFALSE 9005
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
8976: LD_ADDR_VAR 0 2
8980: PUSH
8981: LD_VAR 0 2
8985: PUSH
8986: LD_STRING #builduptime
8988: PUSH
8989: LD_EXP 64
8993: PUSH
8994: LD_OWVAR 1
8998: MINUS
8999: PUSH
9000: EMPTY
9001: LIST
9002: LIST
9003: ADD
9004: ST_TO_ADDR
// if ( ExtraStrings ) then
9005: LD_EXP 60
9009: IFFALSE 9031
// AllStrings := AllStrings ^  ^ ExtraStrings ;
9011: LD_ADDR_VAR 0 2
9015: PUSH
9016: LD_VAR 0 2
9020: PUSH
9021: LD_STRING 
9023: ADD
9024: PUSH
9025: LD_EXP 60
9029: ADD
9030: ST_TO_ADDR
// Display_Strings := AllStrings ;
9031: LD_ADDR_OWVAR 47
9035: PUSH
9036: LD_VAR 0 2
9040: ST_TO_ADDR
// end ;
9041: LD_VAR 0 1
9045: RET
// every 0 0$1 do
9046: GO 9048
9048: DISABLE
// begin ShowTimer ;
9049: CALL 8894 0 0
// enable ;
9053: ENABLE
// end ; end_of_file
9054: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
9055: LD_INT 0
9057: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
9058: LD_VAR 0 1
9062: PPUSH
9063: CALL_OW 255
9067: PUSH
9068: LD_VAR 0 4
9072: EQUAL
9073: IFFALSE 9092
// begin SetAchievement ( ACH_RAD ) ;
9075: LD_STRING ACH_RAD
9077: PPUSH
9078: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
9082: LD_STRING ACH_NL
9084: PPUSH
9085: LD_INT 1
9087: PPUSH
9088: CALL_OW 564
// end end ;
9092: LD_VAR 0 5
9096: RET
// export function SA_Win ( side ) ; begin
9097: LD_INT 0
9099: PPUSH
// case side of 1 :
9100: LD_VAR 0 1
9104: PUSH
9105: LD_INT 1
9107: DOUBLE
9108: EQUAL
9109: IFTRUE 9113
9111: GO 9126
9113: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
9114: LD_STRING ACH_AH
9116: PPUSH
9117: LD_INT 1
9119: PPUSH
9120: CALL_OW 564
9124: GO 9289
9126: LD_INT 2
9128: DOUBLE
9129: EQUAL
9130: IFTRUE 9134
9132: GO 9147
9134: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
9135: LD_STRING ACH_E
9137: PPUSH
9138: LD_INT 1
9140: PPUSH
9141: CALL_OW 564
9145: GO 9289
9147: LD_INT 3
9149: DOUBLE
9150: EQUAL
9151: IFTRUE 9155
9153: GO 9168
9155: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
9156: LD_STRING ACH_OOL
9158: PPUSH
9159: LD_INT 1
9161: PPUSH
9162: CALL_OW 564
9166: GO 9289
9168: LD_INT 1
9170: PUSH
9171: LD_INT 2
9173: PUSH
9174: EMPTY
9175: LIST
9176: LIST
9177: DOUBLE
9178: EQUAL
9179: IFTRUE 9183
9181: GO 9208
9183: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
9184: LD_STRING ACH_AH
9186: PPUSH
9187: LD_REAL  5.00000000000000E-0001
9190: PPUSH
9191: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
9195: LD_STRING ACH_E
9197: PPUSH
9198: LD_REAL  5.00000000000000E-0001
9201: PPUSH
9202: CALL_OW 564
// end ; [ 2 , 3 ] :
9206: GO 9289
9208: LD_INT 2
9210: PUSH
9211: LD_INT 3
9213: PUSH
9214: EMPTY
9215: LIST
9216: LIST
9217: DOUBLE
9218: EQUAL
9219: IFTRUE 9223
9221: GO 9248
9223: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
9224: LD_STRING ACH_OOL
9226: PPUSH
9227: LD_REAL  5.00000000000000E-0001
9230: PPUSH
9231: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
9235: LD_STRING ACH_E
9237: PPUSH
9238: LD_REAL  5.00000000000000E-0001
9241: PPUSH
9242: CALL_OW 564
// end ; [ 3 , 1 ] :
9246: GO 9289
9248: LD_INT 3
9250: PUSH
9251: LD_INT 1
9253: PUSH
9254: EMPTY
9255: LIST
9256: LIST
9257: DOUBLE
9258: EQUAL
9259: IFTRUE 9263
9261: GO 9288
9263: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
9264: LD_STRING ACH_AH
9266: PPUSH
9267: LD_REAL  5.00000000000000E-0001
9270: PPUSH
9271: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
9275: LD_STRING ACH_OOL
9277: PPUSH
9278: LD_REAL  5.00000000000000E-0001
9281: PPUSH
9282: CALL_OW 564
// end ; end ;
9286: GO 9289
9288: POP
// end ; end_of_file
9289: LD_VAR 0 2
9293: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9294: LD_INT 0
9296: PPUSH
9297: PPUSH
9298: PPUSH
// for side = 1 to 8 do
9299: LD_ADDR_VAR 0 2
9303: PUSH
9304: DOUBLE
9305: LD_INT 1
9307: DEC
9308: ST_TO_ADDR
9309: LD_INT 8
9311: PUSH
9312: FOR_TO
9313: IFFALSE 9434
// begin for i = 1 to 72 do
9315: LD_ADDR_VAR 0 3
9319: PUSH
9320: DOUBLE
9321: LD_INT 1
9323: DEC
9324: ST_TO_ADDR
9325: LD_INT 72
9327: PUSH
9328: FOR_TO
9329: IFFALSE 9360
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9331: LD_VAR 0 3
9335: PPUSH
9336: LD_VAR 0 2
9340: PPUSH
9341: LD_INT 0
9343: PPUSH
9344: LD_VAR 0 3
9348: PPUSH
9349: CALL_OW 565
9353: PPUSH
9354: CALL_OW 322
9358: GO 9328
9360: POP
9361: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9362: LD_INT 73
9364: PPUSH
9365: LD_VAR 0 2
9369: PPUSH
9370: LD_INT 0
9372: PPUSH
9373: LD_INT 25
9375: PPUSH
9376: CALL_OW 565
9380: PPUSH
9381: CALL_OW 322
// for i = 0 to 40 do
9385: LD_ADDR_VAR 0 3
9389: PUSH
9390: DOUBLE
9391: LD_INT 0
9393: DEC
9394: ST_TO_ADDR
9395: LD_INT 40
9397: PUSH
9398: FOR_TO
9399: IFFALSE 9430
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9401: LD_VAR 0 3
9405: PPUSH
9406: LD_VAR 0 2
9410: PPUSH
9411: LD_INT 1
9413: PPUSH
9414: LD_VAR 0 3
9418: PPUSH
9419: CALL_OW 565
9423: PPUSH
9424: CALL_OW 324
9428: GO 9398
9430: POP
9431: POP
// end ;
9432: GO 9312
9434: POP
9435: POP
// end ;
9436: LD_VAR 0 1
9440: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9441: LD_INT 0
9443: PPUSH
9444: PPUSH
9445: PPUSH
// for side = 1 to 8 do
9446: LD_ADDR_VAR 0 3
9450: PUSH
9451: DOUBLE
9452: LD_INT 1
9454: DEC
9455: ST_TO_ADDR
9456: LD_INT 8
9458: PUSH
9459: FOR_TO
9460: IFFALSE 13456
// begin for i = 1 to 73 do
9462: LD_ADDR_VAR 0 4
9466: PUSH
9467: DOUBLE
9468: LD_INT 1
9470: DEC
9471: ST_TO_ADDR
9472: LD_INT 73
9474: PUSH
9475: FOR_TO
9476: IFFALSE 9497
// SetTech ( i , side , state_disabled ) ;
9478: LD_VAR 0 4
9482: PPUSH
9483: LD_VAR 0 3
9487: PPUSH
9488: LD_INT 0
9490: PPUSH
9491: CALL_OW 322
9495: GO 9475
9497: POP
9498: POP
// for i = 0 to 40 do
9499: LD_ADDR_VAR 0 4
9503: PUSH
9504: DOUBLE
9505: LD_INT 0
9507: DEC
9508: ST_TO_ADDR
9509: LD_INT 40
9511: PUSH
9512: FOR_TO
9513: IFFALSE 9534
// SetRestrict ( i , side , false ) ;
9515: LD_VAR 0 4
9519: PPUSH
9520: LD_VAR 0 3
9524: PPUSH
9525: LD_INT 0
9527: PPUSH
9528: CALL_OW 324
9532: GO 9512
9534: POP
9535: POP
// case level of 1 :
9536: LD_VAR 0 1
9540: PUSH
9541: LD_INT 1
9543: DOUBLE
9544: EQUAL
9545: IFTRUE 9549
9547: GO 9702
9549: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9550: LD_INT 35
9552: PPUSH
9553: LD_VAR 0 3
9557: PPUSH
9558: LD_INT 1
9560: PPUSH
9561: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9565: LD_INT 45
9567: PPUSH
9568: LD_VAR 0 3
9572: PPUSH
9573: LD_INT 1
9575: PPUSH
9576: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9580: LD_INT 46
9582: PPUSH
9583: LD_VAR 0 3
9587: PPUSH
9588: LD_INT 1
9590: PPUSH
9591: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9595: LD_INT 47
9597: PPUSH
9598: LD_VAR 0 3
9602: PPUSH
9603: LD_INT 1
9605: PPUSH
9606: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9610: LD_INT 0
9612: PPUSH
9613: LD_VAR 0 3
9617: PPUSH
9618: LD_INT 1
9620: PPUSH
9621: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9625: LD_INT 2
9627: PPUSH
9628: LD_VAR 0 3
9632: PPUSH
9633: LD_INT 1
9635: PPUSH
9636: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9640: LD_INT 4
9642: PPUSH
9643: LD_VAR 0 3
9647: PPUSH
9648: LD_INT 1
9650: PPUSH
9651: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9655: LD_INT 6
9657: PPUSH
9658: LD_VAR 0 3
9662: PPUSH
9663: LD_INT 1
9665: PPUSH
9666: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9670: LD_INT 29
9672: PPUSH
9673: LD_VAR 0 3
9677: PPUSH
9678: LD_INT 1
9680: PPUSH
9681: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9685: LD_INT 31
9687: PPUSH
9688: LD_VAR 0 3
9692: PPUSH
9693: LD_INT 1
9695: PPUSH
9696: CALL_OW 324
// end ; 2 :
9700: GO 13454
9702: LD_INT 2
9704: DOUBLE
9705: EQUAL
9706: IFTRUE 9710
9708: GO 9908
9710: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9711: LD_INT 35
9713: PPUSH
9714: LD_VAR 0 3
9718: PPUSH
9719: LD_INT 1
9721: PPUSH
9722: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9726: LD_INT 45
9728: PPUSH
9729: LD_VAR 0 3
9733: PPUSH
9734: LD_INT 1
9736: PPUSH
9737: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9741: LD_INT 46
9743: PPUSH
9744: LD_VAR 0 3
9748: PPUSH
9749: LD_INT 1
9751: PPUSH
9752: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9756: LD_INT 47
9758: PPUSH
9759: LD_VAR 0 3
9763: PPUSH
9764: LD_INT 1
9766: PPUSH
9767: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9771: LD_INT 1
9773: PPUSH
9774: LD_VAR 0 3
9778: PPUSH
9779: LD_INT 1
9781: PPUSH
9782: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9786: LD_INT 2
9788: PPUSH
9789: LD_VAR 0 3
9793: PPUSH
9794: LD_INT 1
9796: PPUSH
9797: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9801: LD_INT 11
9803: PPUSH
9804: LD_VAR 0 3
9808: PPUSH
9809: LD_INT 1
9811: PPUSH
9812: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9816: LD_INT 0
9818: PPUSH
9819: LD_VAR 0 3
9823: PPUSH
9824: LD_INT 1
9826: PPUSH
9827: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9831: LD_INT 2
9833: PPUSH
9834: LD_VAR 0 3
9838: PPUSH
9839: LD_INT 1
9841: PPUSH
9842: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9846: LD_INT 4
9848: PPUSH
9849: LD_VAR 0 3
9853: PPUSH
9854: LD_INT 1
9856: PPUSH
9857: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9861: LD_INT 6
9863: PPUSH
9864: LD_VAR 0 3
9868: PPUSH
9869: LD_INT 1
9871: PPUSH
9872: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9876: LD_INT 29
9878: PPUSH
9879: LD_VAR 0 3
9883: PPUSH
9884: LD_INT 1
9886: PPUSH
9887: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9891: LD_INT 31
9893: PPUSH
9894: LD_VAR 0 3
9898: PPUSH
9899: LD_INT 1
9901: PPUSH
9902: CALL_OW 324
// end ; 3 :
9906: GO 13454
9908: LD_INT 3
9910: DOUBLE
9911: EQUAL
9912: IFTRUE 9916
9914: GO 10369
9916: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9917: LD_INT 35
9919: PPUSH
9920: LD_VAR 0 3
9924: PPUSH
9925: LD_INT 1
9927: PPUSH
9928: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9932: LD_INT 45
9934: PPUSH
9935: LD_VAR 0 3
9939: PPUSH
9940: LD_INT 1
9942: PPUSH
9943: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9947: LD_INT 46
9949: PPUSH
9950: LD_VAR 0 3
9954: PPUSH
9955: LD_INT 1
9957: PPUSH
9958: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9962: LD_INT 47
9964: PPUSH
9965: LD_VAR 0 3
9969: PPUSH
9970: LD_INT 1
9972: PPUSH
9973: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9977: LD_INT 1
9979: PPUSH
9980: LD_VAR 0 3
9984: PPUSH
9985: LD_INT 1
9987: PPUSH
9988: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9992: LD_INT 2
9994: PPUSH
9995: LD_VAR 0 3
9999: PPUSH
10000: LD_INT 1
10002: PPUSH
10003: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10007: LD_INT 11
10009: PPUSH
10010: LD_VAR 0 3
10014: PPUSH
10015: LD_INT 1
10017: PPUSH
10018: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10022: LD_INT 48
10024: PPUSH
10025: LD_VAR 0 3
10029: PPUSH
10030: LD_INT 1
10032: PPUSH
10033: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10037: LD_INT 69
10039: PPUSH
10040: LD_VAR 0 3
10044: PPUSH
10045: LD_INT 1
10047: PPUSH
10048: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10052: LD_INT 39
10054: PPUSH
10055: LD_VAR 0 3
10059: PPUSH
10060: LD_INT 1
10062: PPUSH
10063: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10067: LD_INT 43
10069: PPUSH
10070: LD_VAR 0 3
10074: PPUSH
10075: LD_INT 1
10077: PPUSH
10078: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10082: LD_INT 51
10084: PPUSH
10085: LD_VAR 0 3
10089: PPUSH
10090: LD_INT 1
10092: PPUSH
10093: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10097: LD_INT 6
10099: PPUSH
10100: LD_VAR 0 3
10104: PPUSH
10105: LD_INT 1
10107: PPUSH
10108: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10112: LD_INT 0
10114: PPUSH
10115: LD_VAR 0 3
10119: PPUSH
10120: LD_INT 1
10122: PPUSH
10123: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10127: LD_INT 2
10129: PPUSH
10130: LD_VAR 0 3
10134: PPUSH
10135: LD_INT 1
10137: PPUSH
10138: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10142: LD_INT 3
10144: PPUSH
10145: LD_VAR 0 3
10149: PPUSH
10150: LD_INT 1
10152: PPUSH
10153: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10157: LD_INT 4
10159: PPUSH
10160: LD_VAR 0 3
10164: PPUSH
10165: LD_INT 1
10167: PPUSH
10168: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10172: LD_INT 6
10174: PPUSH
10175: LD_VAR 0 3
10179: PPUSH
10180: LD_INT 1
10182: PPUSH
10183: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10187: LD_INT 7
10189: PPUSH
10190: LD_VAR 0 3
10194: PPUSH
10195: LD_INT 1
10197: PPUSH
10198: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10202: LD_INT 8
10204: PPUSH
10205: LD_VAR 0 3
10209: PPUSH
10210: LD_INT 1
10212: PPUSH
10213: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10217: LD_INT 10
10219: PPUSH
10220: LD_VAR 0 3
10224: PPUSH
10225: LD_INT 1
10227: PPUSH
10228: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10232: LD_INT 15
10234: PPUSH
10235: LD_VAR 0 3
10239: PPUSH
10240: LD_INT 1
10242: PPUSH
10243: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10247: LD_INT 16
10249: PPUSH
10250: LD_VAR 0 3
10254: PPUSH
10255: LD_INT 1
10257: PPUSH
10258: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10262: LD_INT 17
10264: PPUSH
10265: LD_VAR 0 3
10269: PPUSH
10270: LD_INT 1
10272: PPUSH
10273: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10277: LD_INT 20
10279: PPUSH
10280: LD_VAR 0 3
10284: PPUSH
10285: LD_INT 1
10287: PPUSH
10288: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10292: LD_INT 26
10294: PPUSH
10295: LD_VAR 0 3
10299: PPUSH
10300: LD_INT 1
10302: PPUSH
10303: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10307: LD_INT 27
10309: PPUSH
10310: LD_VAR 0 3
10314: PPUSH
10315: LD_INT 1
10317: PPUSH
10318: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10322: LD_INT 29
10324: PPUSH
10325: LD_VAR 0 3
10329: PPUSH
10330: LD_INT 1
10332: PPUSH
10333: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10337: LD_INT 31
10339: PPUSH
10340: LD_VAR 0 3
10344: PPUSH
10345: LD_INT 1
10347: PPUSH
10348: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10352: LD_INT 32
10354: PPUSH
10355: LD_VAR 0 3
10359: PPUSH
10360: LD_INT 1
10362: PPUSH
10363: CALL_OW 324
// end ; 4 :
10367: GO 13454
10369: LD_INT 4
10371: DOUBLE
10372: EQUAL
10373: IFTRUE 10377
10375: GO 11325
10377: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10378: LD_INT 35
10380: PPUSH
10381: LD_VAR 0 3
10385: PPUSH
10386: LD_INT 1
10388: PPUSH
10389: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10393: LD_INT 45
10395: PPUSH
10396: LD_VAR 0 3
10400: PPUSH
10401: LD_INT 1
10403: PPUSH
10404: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10408: LD_INT 46
10410: PPUSH
10411: LD_VAR 0 3
10415: PPUSH
10416: LD_INT 1
10418: PPUSH
10419: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10423: LD_INT 47
10425: PPUSH
10426: LD_VAR 0 3
10430: PPUSH
10431: LD_INT 1
10433: PPUSH
10434: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10438: LD_INT 1
10440: PPUSH
10441: LD_VAR 0 3
10445: PPUSH
10446: LD_INT 1
10448: PPUSH
10449: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10453: LD_INT 2
10455: PPUSH
10456: LD_VAR 0 3
10460: PPUSH
10461: LD_INT 1
10463: PPUSH
10464: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10468: LD_INT 11
10470: PPUSH
10471: LD_VAR 0 3
10475: PPUSH
10476: LD_INT 1
10478: PPUSH
10479: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10483: LD_INT 20
10485: PPUSH
10486: LD_VAR 0 3
10490: PPUSH
10491: LD_INT 1
10493: PPUSH
10494: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10498: LD_INT 48
10500: PPUSH
10501: LD_VAR 0 3
10505: PPUSH
10506: LD_INT 1
10508: PPUSH
10509: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10513: LD_INT 49
10515: PPUSH
10516: LD_VAR 0 3
10520: PPUSH
10521: LD_INT 1
10523: PPUSH
10524: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10528: LD_INT 69
10530: PPUSH
10531: LD_VAR 0 3
10535: PPUSH
10536: LD_INT 1
10538: PPUSH
10539: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10543: LD_INT 39
10545: PPUSH
10546: LD_VAR 0 3
10550: PPUSH
10551: LD_INT 1
10553: PPUSH
10554: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10558: LD_INT 34
10560: PPUSH
10561: LD_VAR 0 3
10565: PPUSH
10566: LD_INT 1
10568: PPUSH
10569: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10573: LD_INT 42
10575: PPUSH
10576: LD_VAR 0 3
10580: PPUSH
10581: LD_INT 1
10583: PPUSH
10584: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10588: LD_INT 44
10590: PPUSH
10591: LD_VAR 0 3
10595: PPUSH
10596: LD_INT 1
10598: PPUSH
10599: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10603: LD_INT 41
10605: PPUSH
10606: LD_VAR 0 3
10610: PPUSH
10611: LD_INT 1
10613: PPUSH
10614: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10618: LD_INT 43
10620: PPUSH
10621: LD_VAR 0 3
10625: PPUSH
10626: LD_INT 1
10628: PPUSH
10629: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10633: LD_INT 70
10635: PPUSH
10636: LD_VAR 0 3
10640: PPUSH
10641: LD_INT 1
10643: PPUSH
10644: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10648: LD_INT 51
10650: PPUSH
10651: LD_VAR 0 3
10655: PPUSH
10656: LD_INT 1
10658: PPUSH
10659: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10663: LD_INT 52
10665: PPUSH
10666: LD_VAR 0 3
10670: PPUSH
10671: LD_INT 1
10673: PPUSH
10674: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10678: LD_INT 6
10680: PPUSH
10681: LD_VAR 0 3
10685: PPUSH
10686: LD_INT 1
10688: PPUSH
10689: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10693: LD_INT 15
10695: PPUSH
10696: LD_VAR 0 3
10700: PPUSH
10701: LD_INT 1
10703: PPUSH
10704: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10708: LD_INT 7
10710: PPUSH
10711: LD_VAR 0 3
10715: PPUSH
10716: LD_INT 1
10718: PPUSH
10719: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10723: LD_INT 12
10725: PPUSH
10726: LD_VAR 0 3
10730: PPUSH
10731: LD_INT 1
10733: PPUSH
10734: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10738: LD_INT 18
10740: PPUSH
10741: LD_VAR 0 3
10745: PPUSH
10746: LD_INT 1
10748: PPUSH
10749: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10753: LD_INT 60
10755: PPUSH
10756: LD_VAR 0 3
10760: PPUSH
10761: LD_INT 1
10763: PPUSH
10764: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10768: LD_INT 9
10770: PPUSH
10771: LD_VAR 0 3
10775: PPUSH
10776: LD_INT 1
10778: PPUSH
10779: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10783: LD_INT 30
10785: PPUSH
10786: LD_VAR 0 3
10790: PPUSH
10791: LD_INT 1
10793: PPUSH
10794: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10798: LD_INT 37
10800: PPUSH
10801: LD_VAR 0 3
10805: PPUSH
10806: LD_INT 1
10808: PPUSH
10809: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10813: LD_INT 5
10815: PPUSH
10816: LD_VAR 0 3
10820: PPUSH
10821: LD_INT 1
10823: PPUSH
10824: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10828: LD_INT 66
10830: PPUSH
10831: LD_VAR 0 3
10835: PPUSH
10836: LD_INT 1
10838: PPUSH
10839: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10843: LD_INT 21
10845: PPUSH
10846: LD_VAR 0 3
10850: PPUSH
10851: LD_INT 1
10853: PPUSH
10854: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10858: LD_INT 22
10860: PPUSH
10861: LD_VAR 0 3
10865: PPUSH
10866: LD_INT 1
10868: PPUSH
10869: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10873: LD_INT 54
10875: PPUSH
10876: LD_VAR 0 3
10880: PPUSH
10881: LD_INT 1
10883: PPUSH
10884: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10888: LD_INT 0
10890: PPUSH
10891: LD_VAR 0 3
10895: PPUSH
10896: LD_INT 1
10898: PPUSH
10899: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10903: LD_INT 1
10905: PPUSH
10906: LD_VAR 0 3
10910: PPUSH
10911: LD_INT 1
10913: PPUSH
10914: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10918: LD_INT 2
10920: PPUSH
10921: LD_VAR 0 3
10925: PPUSH
10926: LD_INT 1
10928: PPUSH
10929: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10933: LD_INT 3
10935: PPUSH
10936: LD_VAR 0 3
10940: PPUSH
10941: LD_INT 1
10943: PPUSH
10944: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10948: LD_INT 4
10950: PPUSH
10951: LD_VAR 0 3
10955: PPUSH
10956: LD_INT 1
10958: PPUSH
10959: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10963: LD_INT 5
10965: PPUSH
10966: LD_VAR 0 3
10970: PPUSH
10971: LD_INT 1
10973: PPUSH
10974: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10978: LD_INT 6
10980: PPUSH
10981: LD_VAR 0 3
10985: PPUSH
10986: LD_INT 1
10988: PPUSH
10989: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10993: LD_INT 7
10995: PPUSH
10996: LD_VAR 0 3
11000: PPUSH
11001: LD_INT 1
11003: PPUSH
11004: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11008: LD_INT 8
11010: PPUSH
11011: LD_VAR 0 3
11015: PPUSH
11016: LD_INT 1
11018: PPUSH
11019: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11023: LD_INT 10
11025: PPUSH
11026: LD_VAR 0 3
11030: PPUSH
11031: LD_INT 1
11033: PPUSH
11034: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11038: LD_INT 11
11040: PPUSH
11041: LD_VAR 0 3
11045: PPUSH
11046: LD_INT 1
11048: PPUSH
11049: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11053: LD_INT 12
11055: PPUSH
11056: LD_VAR 0 3
11060: PPUSH
11061: LD_INT 1
11063: PPUSH
11064: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11068: LD_INT 13
11070: PPUSH
11071: LD_VAR 0 3
11075: PPUSH
11076: LD_INT 1
11078: PPUSH
11079: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11083: LD_INT 14
11085: PPUSH
11086: LD_VAR 0 3
11090: PPUSH
11091: LD_INT 1
11093: PPUSH
11094: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11098: LD_INT 15
11100: PPUSH
11101: LD_VAR 0 3
11105: PPUSH
11106: LD_INT 1
11108: PPUSH
11109: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11113: LD_INT 16
11115: PPUSH
11116: LD_VAR 0 3
11120: PPUSH
11121: LD_INT 1
11123: PPUSH
11124: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11128: LD_INT 17
11130: PPUSH
11131: LD_VAR 0 3
11135: PPUSH
11136: LD_INT 1
11138: PPUSH
11139: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11143: LD_INT 19
11145: PPUSH
11146: LD_VAR 0 3
11150: PPUSH
11151: LD_INT 1
11153: PPUSH
11154: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11158: LD_INT 20
11160: PPUSH
11161: LD_VAR 0 3
11165: PPUSH
11166: LD_INT 1
11168: PPUSH
11169: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11173: LD_INT 21
11175: PPUSH
11176: LD_VAR 0 3
11180: PPUSH
11181: LD_INT 1
11183: PPUSH
11184: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11188: LD_INT 23
11190: PPUSH
11191: LD_VAR 0 3
11195: PPUSH
11196: LD_INT 1
11198: PPUSH
11199: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11203: LD_INT 26
11205: PPUSH
11206: LD_VAR 0 3
11210: PPUSH
11211: LD_INT 1
11213: PPUSH
11214: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11218: LD_INT 27
11220: PPUSH
11221: LD_VAR 0 3
11225: PPUSH
11226: LD_INT 1
11228: PPUSH
11229: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11233: LD_INT 28
11235: PPUSH
11236: LD_VAR 0 3
11240: PPUSH
11241: LD_INT 1
11243: PPUSH
11244: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11248: LD_INT 29
11250: PPUSH
11251: LD_VAR 0 3
11255: PPUSH
11256: LD_INT 1
11258: PPUSH
11259: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11263: LD_INT 30
11265: PPUSH
11266: LD_VAR 0 3
11270: PPUSH
11271: LD_INT 1
11273: PPUSH
11274: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11278: LD_INT 31
11280: PPUSH
11281: LD_VAR 0 3
11285: PPUSH
11286: LD_INT 1
11288: PPUSH
11289: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11293: LD_INT 32
11295: PPUSH
11296: LD_VAR 0 3
11300: PPUSH
11301: LD_INT 1
11303: PPUSH
11304: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11308: LD_INT 36
11310: PPUSH
11311: LD_VAR 0 3
11315: PPUSH
11316: LD_INT 1
11318: PPUSH
11319: CALL_OW 324
// end ; 5 :
11323: GO 13454
11325: LD_INT 5
11327: DOUBLE
11328: EQUAL
11329: IFTRUE 11333
11331: GO 12446
11333: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11334: LD_INT 35
11336: PPUSH
11337: LD_VAR 0 3
11341: PPUSH
11342: LD_INT 1
11344: PPUSH
11345: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11349: LD_INT 45
11351: PPUSH
11352: LD_VAR 0 3
11356: PPUSH
11357: LD_INT 1
11359: PPUSH
11360: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11364: LD_INT 46
11366: PPUSH
11367: LD_VAR 0 3
11371: PPUSH
11372: LD_INT 1
11374: PPUSH
11375: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11379: LD_INT 47
11381: PPUSH
11382: LD_VAR 0 3
11386: PPUSH
11387: LD_INT 1
11389: PPUSH
11390: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11394: LD_INT 1
11396: PPUSH
11397: LD_VAR 0 3
11401: PPUSH
11402: LD_INT 1
11404: PPUSH
11405: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11409: LD_INT 2
11411: PPUSH
11412: LD_VAR 0 3
11416: PPUSH
11417: LD_INT 1
11419: PPUSH
11420: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11424: LD_INT 11
11426: PPUSH
11427: LD_VAR 0 3
11431: PPUSH
11432: LD_INT 1
11434: PPUSH
11435: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11439: LD_INT 20
11441: PPUSH
11442: LD_VAR 0 3
11446: PPUSH
11447: LD_INT 1
11449: PPUSH
11450: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11454: LD_INT 48
11456: PPUSH
11457: LD_VAR 0 3
11461: PPUSH
11462: LD_INT 1
11464: PPUSH
11465: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11469: LD_INT 49
11471: PPUSH
11472: LD_VAR 0 3
11476: PPUSH
11477: LD_INT 1
11479: PPUSH
11480: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11484: LD_INT 69
11486: PPUSH
11487: LD_VAR 0 3
11491: PPUSH
11492: LD_INT 1
11494: PPUSH
11495: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11499: LD_INT 39
11501: PPUSH
11502: LD_VAR 0 3
11506: PPUSH
11507: LD_INT 1
11509: PPUSH
11510: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11514: LD_INT 34
11516: PPUSH
11517: LD_VAR 0 3
11521: PPUSH
11522: LD_INT 1
11524: PPUSH
11525: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11529: LD_INT 42
11531: PPUSH
11532: LD_VAR 0 3
11536: PPUSH
11537: LD_INT 1
11539: PPUSH
11540: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11544: LD_INT 44
11546: PPUSH
11547: LD_VAR 0 3
11551: PPUSH
11552: LD_INT 1
11554: PPUSH
11555: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11559: LD_INT 41
11561: PPUSH
11562: LD_VAR 0 3
11566: PPUSH
11567: LD_INT 1
11569: PPUSH
11570: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11574: LD_INT 40
11576: PPUSH
11577: LD_VAR 0 3
11581: PPUSH
11582: LD_INT 1
11584: PPUSH
11585: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11589: LD_INT 43
11591: PPUSH
11592: LD_VAR 0 3
11596: PPUSH
11597: LD_INT 1
11599: PPUSH
11600: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11604: LD_INT 70
11606: PPUSH
11607: LD_VAR 0 3
11611: PPUSH
11612: LD_INT 1
11614: PPUSH
11615: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11619: LD_INT 51
11621: PPUSH
11622: LD_VAR 0 3
11626: PPUSH
11627: LD_INT 1
11629: PPUSH
11630: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11634: LD_INT 52
11636: PPUSH
11637: LD_VAR 0 3
11641: PPUSH
11642: LD_INT 1
11644: PPUSH
11645: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11649: LD_INT 6
11651: PPUSH
11652: LD_VAR 0 3
11656: PPUSH
11657: LD_INT 1
11659: PPUSH
11660: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11664: LD_INT 15
11666: PPUSH
11667: LD_VAR 0 3
11671: PPUSH
11672: LD_INT 1
11674: PPUSH
11675: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11679: LD_INT 7
11681: PPUSH
11682: LD_VAR 0 3
11686: PPUSH
11687: LD_INT 1
11689: PPUSH
11690: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11694: LD_INT 12
11696: PPUSH
11697: LD_VAR 0 3
11701: PPUSH
11702: LD_INT 1
11704: PPUSH
11705: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11709: LD_INT 17
11711: PPUSH
11712: LD_VAR 0 3
11716: PPUSH
11717: LD_INT 1
11719: PPUSH
11720: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11724: LD_INT 18
11726: PPUSH
11727: LD_VAR 0 3
11731: PPUSH
11732: LD_INT 1
11734: PPUSH
11735: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11739: LD_INT 60
11741: PPUSH
11742: LD_VAR 0 3
11746: PPUSH
11747: LD_INT 1
11749: PPUSH
11750: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11754: LD_INT 32
11756: PPUSH
11757: LD_VAR 0 3
11761: PPUSH
11762: LD_INT 1
11764: PPUSH
11765: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11769: LD_INT 9
11771: PPUSH
11772: LD_VAR 0 3
11776: PPUSH
11777: LD_INT 1
11779: PPUSH
11780: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11784: LD_INT 57
11786: PPUSH
11787: LD_VAR 0 3
11791: PPUSH
11792: LD_INT 1
11794: PPUSH
11795: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11799: LD_INT 30
11801: PPUSH
11802: LD_VAR 0 3
11806: PPUSH
11807: LD_INT 1
11809: PPUSH
11810: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11814: LD_INT 37
11816: PPUSH
11817: LD_VAR 0 3
11821: PPUSH
11822: LD_INT 1
11824: PPUSH
11825: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11829: LD_INT 63
11831: PPUSH
11832: LD_VAR 0 3
11836: PPUSH
11837: LD_INT 1
11839: PPUSH
11840: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11844: LD_INT 3
11846: PPUSH
11847: LD_VAR 0 3
11851: PPUSH
11852: LD_INT 1
11854: PPUSH
11855: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11859: LD_INT 4
11861: PPUSH
11862: LD_VAR 0 3
11866: PPUSH
11867: LD_INT 1
11869: PPUSH
11870: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11874: LD_INT 5
11876: PPUSH
11877: LD_VAR 0 3
11881: PPUSH
11882: LD_INT 1
11884: PPUSH
11885: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11889: LD_INT 66
11891: PPUSH
11892: LD_VAR 0 3
11896: PPUSH
11897: LD_INT 1
11899: PPUSH
11900: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11904: LD_INT 21
11906: PPUSH
11907: LD_VAR 0 3
11911: PPUSH
11912: LD_INT 1
11914: PPUSH
11915: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11919: LD_INT 22
11921: PPUSH
11922: LD_VAR 0 3
11926: PPUSH
11927: LD_INT 1
11929: PPUSH
11930: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11934: LD_INT 19
11936: PPUSH
11937: LD_VAR 0 3
11941: PPUSH
11942: LD_INT 1
11944: PPUSH
11945: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11949: LD_INT 54
11951: PPUSH
11952: LD_VAR 0 3
11956: PPUSH
11957: LD_INT 1
11959: PPUSH
11960: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
11964: LD_INT 55
11966: PPUSH
11967: LD_VAR 0 3
11971: PPUSH
11972: LD_INT 1
11974: PPUSH
11975: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11979: LD_INT 0
11981: PPUSH
11982: LD_VAR 0 3
11986: PPUSH
11987: LD_INT 1
11989: PPUSH
11990: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11994: LD_INT 1
11996: PPUSH
11997: LD_VAR 0 3
12001: PPUSH
12002: LD_INT 1
12004: PPUSH
12005: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12009: LD_INT 2
12011: PPUSH
12012: LD_VAR 0 3
12016: PPUSH
12017: LD_INT 1
12019: PPUSH
12020: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12024: LD_INT 3
12026: PPUSH
12027: LD_VAR 0 3
12031: PPUSH
12032: LD_INT 1
12034: PPUSH
12035: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12039: LD_INT 4
12041: PPUSH
12042: LD_VAR 0 3
12046: PPUSH
12047: LD_INT 1
12049: PPUSH
12050: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12054: LD_INT 5
12056: PPUSH
12057: LD_VAR 0 3
12061: PPUSH
12062: LD_INT 1
12064: PPUSH
12065: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12069: LD_INT 6
12071: PPUSH
12072: LD_VAR 0 3
12076: PPUSH
12077: LD_INT 1
12079: PPUSH
12080: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12084: LD_INT 7
12086: PPUSH
12087: LD_VAR 0 3
12091: PPUSH
12092: LD_INT 1
12094: PPUSH
12095: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12099: LD_INT 8
12101: PPUSH
12102: LD_VAR 0 3
12106: PPUSH
12107: LD_INT 1
12109: PPUSH
12110: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12114: LD_INT 10
12116: PPUSH
12117: LD_VAR 0 3
12121: PPUSH
12122: LD_INT 1
12124: PPUSH
12125: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12129: LD_INT 11
12131: PPUSH
12132: LD_VAR 0 3
12136: PPUSH
12137: LD_INT 1
12139: PPUSH
12140: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12144: LD_INT 12
12146: PPUSH
12147: LD_VAR 0 3
12151: PPUSH
12152: LD_INT 1
12154: PPUSH
12155: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12159: LD_INT 13
12161: PPUSH
12162: LD_VAR 0 3
12166: PPUSH
12167: LD_INT 1
12169: PPUSH
12170: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12174: LD_INT 14
12176: PPUSH
12177: LD_VAR 0 3
12181: PPUSH
12182: LD_INT 1
12184: PPUSH
12185: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12189: LD_INT 15
12191: PPUSH
12192: LD_VAR 0 3
12196: PPUSH
12197: LD_INT 1
12199: PPUSH
12200: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12204: LD_INT 16
12206: PPUSH
12207: LD_VAR 0 3
12211: PPUSH
12212: LD_INT 1
12214: PPUSH
12215: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12219: LD_INT 17
12221: PPUSH
12222: LD_VAR 0 3
12226: PPUSH
12227: LD_INT 1
12229: PPUSH
12230: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
12234: LD_INT 18
12236: PPUSH
12237: LD_VAR 0 3
12241: PPUSH
12242: LD_INT 1
12244: PPUSH
12245: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12249: LD_INT 19
12251: PPUSH
12252: LD_VAR 0 3
12256: PPUSH
12257: LD_INT 1
12259: PPUSH
12260: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12264: LD_INT 20
12266: PPUSH
12267: LD_VAR 0 3
12271: PPUSH
12272: LD_INT 1
12274: PPUSH
12275: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12279: LD_INT 21
12281: PPUSH
12282: LD_VAR 0 3
12286: PPUSH
12287: LD_INT 1
12289: PPUSH
12290: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12294: LD_INT 23
12296: PPUSH
12297: LD_VAR 0 3
12301: PPUSH
12302: LD_INT 1
12304: PPUSH
12305: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12309: LD_INT 26
12311: PPUSH
12312: LD_VAR 0 3
12316: PPUSH
12317: LD_INT 1
12319: PPUSH
12320: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12324: LD_INT 27
12326: PPUSH
12327: LD_VAR 0 3
12331: PPUSH
12332: LD_INT 1
12334: PPUSH
12335: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12339: LD_INT 28
12341: PPUSH
12342: LD_VAR 0 3
12346: PPUSH
12347: LD_INT 1
12349: PPUSH
12350: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12354: LD_INT 29
12356: PPUSH
12357: LD_VAR 0 3
12361: PPUSH
12362: LD_INT 1
12364: PPUSH
12365: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12369: LD_INT 30
12371: PPUSH
12372: LD_VAR 0 3
12376: PPUSH
12377: LD_INT 1
12379: PPUSH
12380: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12384: LD_INT 31
12386: PPUSH
12387: LD_VAR 0 3
12391: PPUSH
12392: LD_INT 1
12394: PPUSH
12395: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12399: LD_INT 32
12401: PPUSH
12402: LD_VAR 0 3
12406: PPUSH
12407: LD_INT 1
12409: PPUSH
12410: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
12414: LD_INT 33
12416: PPUSH
12417: LD_VAR 0 3
12421: PPUSH
12422: LD_INT 1
12424: PPUSH
12425: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12429: LD_INT 36
12431: PPUSH
12432: LD_VAR 0 3
12436: PPUSH
12437: LD_INT 1
12439: PPUSH
12440: CALL_OW 324
// end ; 6 :
12444: GO 13454
12446: LD_INT 6
12448: DOUBLE
12449: EQUAL
12450: IFTRUE 12454
12452: GO 13379
12454: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12455: LD_INT 35
12457: PPUSH
12458: LD_VAR 0 3
12462: PPUSH
12463: LD_INT 1
12465: PPUSH
12466: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12470: LD_INT 45
12472: PPUSH
12473: LD_VAR 0 3
12477: PPUSH
12478: LD_INT 1
12480: PPUSH
12481: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12485: LD_INT 46
12487: PPUSH
12488: LD_VAR 0 3
12492: PPUSH
12493: LD_INT 1
12495: PPUSH
12496: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12500: LD_INT 47
12502: PPUSH
12503: LD_VAR 0 3
12507: PPUSH
12508: LD_INT 1
12510: PPUSH
12511: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12515: LD_INT 1
12517: PPUSH
12518: LD_VAR 0 3
12522: PPUSH
12523: LD_INT 1
12525: PPUSH
12526: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12530: LD_INT 2
12532: PPUSH
12533: LD_VAR 0 3
12537: PPUSH
12538: LD_INT 1
12540: PPUSH
12541: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12545: LD_INT 11
12547: PPUSH
12548: LD_VAR 0 3
12552: PPUSH
12553: LD_INT 1
12555: PPUSH
12556: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12560: LD_INT 20
12562: PPUSH
12563: LD_VAR 0 3
12567: PPUSH
12568: LD_INT 1
12570: PPUSH
12571: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12575: LD_INT 48
12577: PPUSH
12578: LD_VAR 0 3
12582: PPUSH
12583: LD_INT 1
12585: PPUSH
12586: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12590: LD_INT 49
12592: PPUSH
12593: LD_VAR 0 3
12597: PPUSH
12598: LD_INT 1
12600: PPUSH
12601: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12605: LD_INT 50
12607: PPUSH
12608: LD_VAR 0 3
12612: PPUSH
12613: LD_INT 1
12615: PPUSH
12616: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12620: LD_INT 69
12622: PPUSH
12623: LD_VAR 0 3
12627: PPUSH
12628: LD_INT 1
12630: PPUSH
12631: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12635: LD_INT 39
12637: PPUSH
12638: LD_VAR 0 3
12642: PPUSH
12643: LD_INT 1
12645: PPUSH
12646: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12650: LD_INT 34
12652: PPUSH
12653: LD_VAR 0 3
12657: PPUSH
12658: LD_INT 1
12660: PPUSH
12661: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12665: LD_INT 42
12667: PPUSH
12668: LD_VAR 0 3
12672: PPUSH
12673: LD_INT 1
12675: PPUSH
12676: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12680: LD_INT 44
12682: PPUSH
12683: LD_VAR 0 3
12687: PPUSH
12688: LD_INT 1
12690: PPUSH
12691: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12695: LD_INT 41
12697: PPUSH
12698: LD_VAR 0 3
12702: PPUSH
12703: LD_INT 1
12705: PPUSH
12706: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
12710: LD_INT 13
12712: PPUSH
12713: LD_VAR 0 3
12717: PPUSH
12718: LD_INT 1
12720: PPUSH
12721: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12725: LD_INT 40
12727: PPUSH
12728: LD_VAR 0 3
12732: PPUSH
12733: LD_INT 1
12735: PPUSH
12736: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12740: LD_INT 43
12742: PPUSH
12743: LD_VAR 0 3
12747: PPUSH
12748: LD_INT 1
12750: PPUSH
12751: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12755: LD_INT 70
12757: PPUSH
12758: LD_VAR 0 3
12762: PPUSH
12763: LD_INT 1
12765: PPUSH
12766: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
12770: LD_INT 23
12772: PPUSH
12773: LD_VAR 0 3
12777: PPUSH
12778: LD_INT 1
12780: PPUSH
12781: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12785: LD_INT 51
12787: PPUSH
12788: LD_VAR 0 3
12792: PPUSH
12793: LD_INT 1
12795: PPUSH
12796: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12800: LD_INT 52
12802: PPUSH
12803: LD_VAR 0 3
12807: PPUSH
12808: LD_INT 1
12810: PPUSH
12811: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12815: LD_INT 6
12817: PPUSH
12818: LD_VAR 0 3
12822: PPUSH
12823: LD_INT 1
12825: PPUSH
12826: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12830: LD_INT 15
12832: PPUSH
12833: LD_VAR 0 3
12837: PPUSH
12838: LD_INT 1
12840: PPUSH
12841: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12845: LD_INT 7
12847: PPUSH
12848: LD_VAR 0 3
12852: PPUSH
12853: LD_INT 1
12855: PPUSH
12856: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12860: LD_INT 12
12862: PPUSH
12863: LD_VAR 0 3
12867: PPUSH
12868: LD_INT 1
12870: PPUSH
12871: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
12875: LD_INT 10
12877: PPUSH
12878: LD_VAR 0 3
12882: PPUSH
12883: LD_INT 1
12885: PPUSH
12886: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12890: LD_INT 17
12892: PPUSH
12893: LD_VAR 0 3
12897: PPUSH
12898: LD_INT 1
12900: PPUSH
12901: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12905: LD_INT 18
12907: PPUSH
12908: LD_VAR 0 3
12912: PPUSH
12913: LD_INT 1
12915: PPUSH
12916: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12920: LD_INT 60
12922: PPUSH
12923: LD_VAR 0 3
12927: PPUSH
12928: LD_INT 1
12930: PPUSH
12931: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
12935: LD_INT 61
12937: PPUSH
12938: LD_VAR 0 3
12942: PPUSH
12943: LD_INT 1
12945: PPUSH
12946: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12950: LD_INT 32
12952: PPUSH
12953: LD_VAR 0 3
12957: PPUSH
12958: LD_INT 1
12960: PPUSH
12961: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
12965: LD_INT 27
12967: PPUSH
12968: LD_VAR 0 3
12972: PPUSH
12973: LD_INT 1
12975: PPUSH
12976: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
12980: LD_INT 36
12982: PPUSH
12983: LD_VAR 0 3
12987: PPUSH
12988: LD_INT 1
12990: PPUSH
12991: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
12995: LD_INT 33
12997: PPUSH
12998: LD_VAR 0 3
13002: PPUSH
13003: LD_INT 1
13005: PPUSH
13006: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13010: LD_INT 9
13012: PPUSH
13013: LD_VAR 0 3
13017: PPUSH
13018: LD_INT 1
13020: PPUSH
13021: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13025: LD_INT 38
13027: PPUSH
13028: LD_VAR 0 3
13032: PPUSH
13033: LD_INT 1
13035: PPUSH
13036: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13040: LD_INT 57
13042: PPUSH
13043: LD_VAR 0 3
13047: PPUSH
13048: LD_INT 1
13050: PPUSH
13051: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13055: LD_INT 58
13057: PPUSH
13058: LD_VAR 0 3
13062: PPUSH
13063: LD_INT 1
13065: PPUSH
13066: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13070: LD_INT 28
13072: PPUSH
13073: LD_VAR 0 3
13077: PPUSH
13078: LD_INT 1
13080: PPUSH
13081: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13085: LD_INT 29
13087: PPUSH
13088: LD_VAR 0 3
13092: PPUSH
13093: LD_INT 1
13095: PPUSH
13096: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13100: LD_INT 30
13102: PPUSH
13103: LD_VAR 0 3
13107: PPUSH
13108: LD_INT 1
13110: PPUSH
13111: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13115: LD_INT 37
13117: PPUSH
13118: LD_VAR 0 3
13122: PPUSH
13123: LD_INT 1
13125: PPUSH
13126: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13130: LD_INT 63
13132: PPUSH
13133: LD_VAR 0 3
13137: PPUSH
13138: LD_INT 1
13140: PPUSH
13141: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13145: LD_INT 64
13147: PPUSH
13148: LD_VAR 0 3
13152: PPUSH
13153: LD_INT 1
13155: PPUSH
13156: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13160: LD_INT 3
13162: PPUSH
13163: LD_VAR 0 3
13167: PPUSH
13168: LD_INT 1
13170: PPUSH
13171: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13175: LD_INT 4
13177: PPUSH
13178: LD_VAR 0 3
13182: PPUSH
13183: LD_INT 1
13185: PPUSH
13186: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13190: LD_INT 5
13192: PPUSH
13193: LD_VAR 0 3
13197: PPUSH
13198: LD_INT 1
13200: PPUSH
13201: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13205: LD_INT 8
13207: PPUSH
13208: LD_VAR 0 3
13212: PPUSH
13213: LD_INT 1
13215: PPUSH
13216: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13220: LD_INT 66
13222: PPUSH
13223: LD_VAR 0 3
13227: PPUSH
13228: LD_INT 1
13230: PPUSH
13231: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
13235: LD_INT 67
13237: PPUSH
13238: LD_VAR 0 3
13242: PPUSH
13243: LD_INT 1
13245: PPUSH
13246: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13250: LD_INT 21
13252: PPUSH
13253: LD_VAR 0 3
13257: PPUSH
13258: LD_INT 1
13260: PPUSH
13261: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13265: LD_INT 22
13267: PPUSH
13268: LD_VAR 0 3
13272: PPUSH
13273: LD_INT 1
13275: PPUSH
13276: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13280: LD_INT 19
13282: PPUSH
13283: LD_VAR 0 3
13287: PPUSH
13288: LD_INT 1
13290: PPUSH
13291: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13295: LD_INT 26
13297: PPUSH
13298: LD_VAR 0 3
13302: PPUSH
13303: LD_INT 1
13305: PPUSH
13306: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13310: LD_INT 54
13312: PPUSH
13313: LD_VAR 0 3
13317: PPUSH
13318: LD_INT 1
13320: PPUSH
13321: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13325: LD_INT 55
13327: PPUSH
13328: LD_VAR 0 3
13332: PPUSH
13333: LD_INT 1
13335: PPUSH
13336: CALL_OW 322
// for i = 0 to 39 do
13340: LD_ADDR_VAR 0 4
13344: PUSH
13345: DOUBLE
13346: LD_INT 0
13348: DEC
13349: ST_TO_ADDR
13350: LD_INT 39
13352: PUSH
13353: FOR_TO
13354: IFFALSE 13375
// SetRestrict ( i , side , true ) ;
13356: LD_VAR 0 4
13360: PPUSH
13361: LD_VAR 0 3
13365: PPUSH
13366: LD_INT 1
13368: PPUSH
13369: CALL_OW 324
13373: GO 13353
13375: POP
13376: POP
// end ; else
13377: GO 13454
13379: POP
// begin for i = 1 to 73 do
13380: LD_ADDR_VAR 0 4
13384: PUSH
13385: DOUBLE
13386: LD_INT 1
13388: DEC
13389: ST_TO_ADDR
13390: LD_INT 73
13392: PUSH
13393: FOR_TO
13394: IFFALSE 13415
// SetTech ( i , side , state_enabled ) ;
13396: LD_VAR 0 4
13400: PPUSH
13401: LD_VAR 0 3
13405: PPUSH
13406: LD_INT 1
13408: PPUSH
13409: CALL_OW 322
13413: GO 13393
13415: POP
13416: POP
// for i = 0 to 39 do
13417: LD_ADDR_VAR 0 4
13421: PUSH
13422: DOUBLE
13423: LD_INT 0
13425: DEC
13426: ST_TO_ADDR
13427: LD_INT 39
13429: PUSH
13430: FOR_TO
13431: IFFALSE 13452
// SetRestrict ( i , side , true ) ;
13433: LD_VAR 0 4
13437: PPUSH
13438: LD_VAR 0 3
13442: PPUSH
13443: LD_INT 1
13445: PPUSH
13446: CALL_OW 324
13450: GO 13430
13452: POP
13453: POP
// end ; end ; end ;
13454: GO 9459
13456: POP
13457: POP
// end ; end_of_file
13458: LD_VAR 0 2
13462: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
13463: LD_INT 0
13465: PPUSH
13466: PPUSH
13467: PPUSH
13468: PPUSH
13469: PPUSH
13470: PPUSH
13471: PPUSH
13472: PPUSH
13473: PPUSH
// for i := 1 to 8 do
13474: LD_ADDR_VAR 0 2
13478: PUSH
13479: DOUBLE
13480: LD_INT 1
13482: DEC
13483: ST_TO_ADDR
13484: LD_INT 8
13486: PUSH
13487: FOR_TO
13488: IFFALSE 13872
// begin if Side_Positions [ i ] then
13490: LD_EXP 38
13494: PUSH
13495: LD_VAR 0 2
13499: ARRAY
13500: IFFALSE 13870
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
13502: LD_ADDR_VAR 0 7
13506: PUSH
13507: LD_INT 22
13509: PUSH
13510: LD_VAR 0 2
13514: PUSH
13515: EMPTY
13516: LIST
13517: LIST
13518: PUSH
13519: LD_INT 21
13521: PUSH
13522: LD_INT 1
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: PUSH
13529: EMPTY
13530: LIST
13531: LIST
13532: PPUSH
13533: CALL_OW 69
13537: PUSH
13538: LD_INT 0
13540: PLUS
13541: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13542: LD_ADDR_VAR 0 9
13546: PUSH
13547: LD_INT 22
13549: PUSH
13550: LD_VAR 0 2
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: PUSH
13559: LD_INT 2
13561: PUSH
13562: LD_INT 30
13564: PUSH
13565: LD_INT 0
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: PUSH
13572: LD_INT 30
13574: PUSH
13575: LD_INT 1
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: LIST
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: PPUSH
13591: CALL_OW 69
13595: ST_TO_ADDR
// crates := 0 ;
13596: LD_ADDR_VAR 0 4
13600: PUSH
13601: LD_INT 0
13603: ST_TO_ADDR
// oil := 0 ;
13604: LD_ADDR_VAR 0 5
13608: PUSH
13609: LD_INT 0
13611: ST_TO_ADDR
// sib := 0 ;
13612: LD_ADDR_VAR 0 6
13616: PUSH
13617: LD_INT 0
13619: ST_TO_ADDR
// if bases then
13620: LD_VAR 0 9
13624: IFFALSE 13730
// begin for j in bases do
13626: LD_ADDR_VAR 0 3
13630: PUSH
13631: LD_VAR 0 9
13635: PUSH
13636: FOR_IN
13637: IFFALSE 13728
// begin base := GetBase ( j ) ;
13639: LD_ADDR_VAR 0 8
13643: PUSH
13644: LD_VAR 0 3
13648: PPUSH
13649: CALL_OW 274
13653: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
13654: LD_ADDR_VAR 0 4
13658: PUSH
13659: LD_VAR 0 4
13663: PUSH
13664: LD_VAR 0 8
13668: PPUSH
13669: LD_INT 1
13671: PPUSH
13672: CALL_OW 275
13676: PLUS
13677: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
13678: LD_ADDR_VAR 0 5
13682: PUSH
13683: LD_VAR 0 5
13687: PUSH
13688: LD_VAR 0 8
13692: PPUSH
13693: LD_INT 2
13695: PPUSH
13696: CALL_OW 275
13700: PLUS
13701: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
13702: LD_ADDR_VAR 0 6
13706: PUSH
13707: LD_VAR 0 6
13711: PUSH
13712: LD_VAR 0 8
13716: PPUSH
13717: LD_INT 3
13719: PPUSH
13720: CALL_OW 275
13724: PLUS
13725: ST_TO_ADDR
// end ;
13726: GO 13636
13728: POP
13729: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
13730: LD_STRING setSpecText(
13732: PUSH
13733: LD_VAR 0 2
13737: STR
13738: PUSH
13739: LD_STRING ,
13741: STR
13742: PUSH
13743: LD_INT 2
13745: STR
13746: PUSH
13747: LD_STRING ,
13749: STR
13750: PUSH
13751: LD_VAR 0 4
13755: STR
13756: PUSH
13757: LD_STRING )
13759: STR
13760: PPUSH
13761: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
13765: LD_STRING setSpecText(
13767: PUSH
13768: LD_VAR 0 2
13772: STR
13773: PUSH
13774: LD_STRING ,
13776: STR
13777: PUSH
13778: LD_INT 3
13780: STR
13781: PUSH
13782: LD_STRING ,
13784: STR
13785: PUSH
13786: LD_VAR 0 5
13790: STR
13791: PUSH
13792: LD_STRING )
13794: STR
13795: PPUSH
13796: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
13800: LD_STRING setSpecText(
13802: PUSH
13803: LD_VAR 0 2
13807: STR
13808: PUSH
13809: LD_STRING ,
13811: STR
13812: PUSH
13813: LD_INT 4
13815: STR
13816: PUSH
13817: LD_STRING ,
13819: STR
13820: PUSH
13821: LD_VAR 0 6
13825: STR
13826: PUSH
13827: LD_STRING )
13829: STR
13830: PPUSH
13831: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
13835: LD_STRING setSpecText(
13837: PUSH
13838: LD_VAR 0 2
13842: STR
13843: PUSH
13844: LD_STRING ,
13846: STR
13847: PUSH
13848: LD_INT 5
13850: STR
13851: PUSH
13852: LD_STRING ,
13854: STR
13855: PUSH
13856: LD_VAR 0 7
13860: STR
13861: PUSH
13862: LD_STRING )
13864: STR
13865: PPUSH
13866: CALL_OW 559
// end ; end ;
13870: GO 13487
13872: POP
13873: POP
// end ;
13874: LD_VAR 0 1
13878: RET
// every 0 0$1 do
13879: GO 13881
13881: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
13882: LD_STRING setSpecLogoNumber(
13884: PUSH
13885: LD_INT 2
13887: STR
13888: PUSH
13889: LD_STRING ,
13891: STR
13892: PUSH
13893: LD_INT 1
13895: STR
13896: PUSH
13897: LD_STRING )
13899: STR
13900: PPUSH
13901: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
13905: LD_STRING setSpecLogoNumber(
13907: PUSH
13908: LD_INT 3
13910: STR
13911: PUSH
13912: LD_STRING ,
13914: STR
13915: PUSH
13916: LD_INT 2
13918: STR
13919: PUSH
13920: LD_STRING )
13922: STR
13923: PPUSH
13924: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
13928: LD_STRING setSpecLogoNumber(
13930: PUSH
13931: LD_INT 4
13933: STR
13934: PUSH
13935: LD_STRING ,
13937: STR
13938: PUSH
13939: LD_INT 3
13941: STR
13942: PUSH
13943: LD_STRING )
13945: STR
13946: PPUSH
13947: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
13951: LD_STRING setSpecLogoNumber(
13953: PUSH
13954: LD_INT 5
13956: STR
13957: PUSH
13958: LD_STRING ,
13960: STR
13961: PUSH
13962: LD_INT 4
13964: STR
13965: PUSH
13966: LD_STRING )
13968: STR
13969: PPUSH
13970: CALL_OW 559
// end ;
13974: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
13975: LD_INT 2
13977: PUSH
13978: LD_INT 30
13980: PUSH
13981: LD_INT 0
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: PUSH
13988: LD_INT 30
13990: PUSH
13991: LD_INT 1
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: LIST
14002: PPUSH
14003: CALL_OW 69
14007: IFFALSE 14017
14009: GO 14011
14011: DISABLE
// begin enable ;
14012: ENABLE
// UpdateSpectatorBar ;
14013: CALL 13463 0 0
// end ; end_of_file
14017: END
// var respawn , inqueue ; export function init_respawning ; begin
14018: LD_INT 0
14020: PPUSH
// respawn := Rand ( 1 , 8 ) ;
14021: LD_ADDR_LOC 18
14025: PUSH
14026: LD_INT 1
14028: PPUSH
14029: LD_INT 8
14031: PPUSH
14032: CALL_OW 12
14036: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
14037: LD_ADDR_LOC 19
14041: PUSH
14042: LD_INT 0
14044: PUSH
14045: LD_INT 0
14047: PUSH
14048: LD_INT 0
14050: PUSH
14051: LD_INT 0
14053: PUSH
14054: LD_INT 0
14056: PUSH
14057: LD_INT 0
14059: PUSH
14060: LD_INT 0
14062: PUSH
14063: LD_INT 0
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: ST_TO_ADDR
// end ;
14076: LD_VAR 0 1
14080: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
14081: GO 14083
14083: DISABLE
14084: LD_INT 0
14086: PPUSH
14087: PPUSH
14088: PPUSH
// begin if respawning_time_max = 0 then
14089: LD_EXP 33
14093: PUSH
14094: LD_INT 0
14096: EQUAL
14097: IFFALSE 14101
// exit ;
14099: GO 14509
// if respawn = 8 then
14101: LD_LOC 18
14105: PUSH
14106: LD_INT 8
14108: EQUAL
14109: IFFALSE 14121
// respawn := 1 else
14111: LD_ADDR_LOC 18
14115: PUSH
14116: LD_INT 1
14118: ST_TO_ADDR
14119: GO 14135
// respawn := respawn + 1 ;
14121: LD_ADDR_LOC 18
14125: PUSH
14126: LD_LOC 18
14130: PUSH
14131: LD_INT 1
14133: PLUS
14134: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
14135: LD_EXP 38
14139: PUSH
14140: LD_LOC 18
14144: ARRAY
14145: PUSH
14146: LD_LOC 19
14150: PUSH
14151: LD_LOC 18
14155: ARRAY
14156: NOT
14157: AND
14158: IFFALSE 14508
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
14160: LD_ADDR_VAR 0 1
14164: PUSH
14165: LD_INT 21
14167: PUSH
14168: LD_INT 1
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: PUSH
14175: LD_INT 22
14177: PUSH
14178: LD_LOC 18
14182: PUSH
14183: EMPTY
14184: LIST
14185: LIST
14186: PUSH
14187: LD_INT 3
14189: PUSH
14190: LD_INT 23
14192: PUSH
14193: LD_INT 0
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: PPUSH
14206: CALL_OW 69
14210: ST_TO_ADDR
// if n < number_of_people then
14211: LD_VAR 0 1
14215: PUSH
14216: LD_EXP 24
14220: LESS
14221: IFFALSE 14505
// begin aktresp := respawn ;
14223: LD_ADDR_VAR 0 3
14227: PUSH
14228: LD_LOC 18
14232: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
14233: LD_ADDR_LOC 19
14237: PUSH
14238: LD_LOC 19
14242: PPUSH
14243: LD_VAR 0 3
14247: PPUSH
14248: LD_INT 1
14250: PPUSH
14251: CALL_OW 1
14255: ST_TO_ADDR
// enable ;
14256: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
14257: LD_EXP 32
14261: PPUSH
14262: LD_EXP 33
14266: PPUSH
14267: CALL_OW 12
14271: PPUSH
14272: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
14276: LD_ADDR_LOC 19
14280: PUSH
14281: LD_LOC 19
14285: PPUSH
14286: LD_VAR 0 3
14290: PPUSH
14291: LD_INT 0
14293: PPUSH
14294: CALL_OW 1
14298: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
14299: LD_ADDR_VAR 0 2
14303: PUSH
14304: LD_INT 21
14306: PUSH
14307: LD_INT 3
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: PUSH
14314: LD_INT 2
14316: PUSH
14317: LD_INT 30
14319: PUSH
14320: LD_INT 0
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: PUSH
14327: LD_INT 30
14329: PUSH
14330: LD_INT 1
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: LIST
14341: PUSH
14342: LD_INT 50
14344: PUSH
14345: EMPTY
14346: LIST
14347: PUSH
14348: LD_INT 22
14350: PUSH
14351: LD_VAR 0 3
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: PPUSH
14366: CALL_OW 69
14370: ST_TO_ADDR
// if dep = 0 then
14371: LD_VAR 0 2
14375: PUSH
14376: LD_INT 0
14378: EQUAL
14379: IFFALSE 14383
// exit ;
14381: GO 14509
// hc_name :=  ;
14383: LD_ADDR_OWVAR 26
14387: PUSH
14388: LD_STRING 
14390: ST_TO_ADDR
// hc_importance := 0 ;
14391: LD_ADDR_OWVAR 32
14395: PUSH
14396: LD_INT 0
14398: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
14399: LD_INT 0
14401: PPUSH
14402: LD_INT 0
14404: PPUSH
14405: LD_EXP 25
14409: PUSH
14410: LD_INT 2
14412: DIV
14413: PPUSH
14414: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
14418: LD_ADDR_OWVAR 21
14422: PUSH
14423: LD_EXP 39
14427: PUSH
14428: LD_VAR 0 3
14432: ARRAY
14433: ST_TO_ADDR
// uc_side := aktresp ;
14434: LD_ADDR_OWVAR 20
14438: PUSH
14439: LD_VAR 0 3
14443: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
14444: LD_ADDR_VAR 0 2
14448: PUSH
14449: LD_VAR 0 2
14453: PUSH
14454: LD_INT 1
14456: PPUSH
14457: LD_VAR 0 2
14461: PPUSH
14462: CALL_OW 12
14466: ARRAY
14467: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
14468: CALL_OW 44
14472: PPUSH
14473: LD_VAR 0 2
14477: PPUSH
14478: CALL_OW 250
14482: PPUSH
14483: LD_VAR 0 2
14487: PPUSH
14488: CALL_OW 251
14492: PPUSH
14493: LD_INT 7
14495: PPUSH
14496: LD_INT 1
14498: PPUSH
14499: CALL_OW 50
// end else
14503: GO 14506
// enable ;
14505: ENABLE
// end else
14506: GO 14509
// enable ;
14508: ENABLE
// end ; end_of_file
14509: PPOPN 3
14511: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
14512: LD_INT 0
14514: PPUSH
14515: PPUSH
14516: PPUSH
// BuildUpTime_Delay = 0 ;
14517: LD_ADDR_EXP 64
14521: PUSH
14522: LD_INT 0
14524: ST_TO_ADDR
// if not def_builduptime then
14525: LD_EXP 16
14529: NOT
14530: IFFALSE 14534
// exit ;
14532: GO 14717
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
14534: LD_ADDR_EXP 64
14538: PUSH
14539: LD_INT 8400
14541: PUSH
14542: LD_INT 2100
14544: PUSH
14545: LD_EXP 16
14549: MUL
14550: PLUS
14551: ST_TO_ADDR
// BuildUpTimeActive := true ;
14552: LD_ADDR_EXP 63
14556: PUSH
14557: LD_INT 1
14559: ST_TO_ADDR
// for i := 1 to 8 do
14560: LD_ADDR_VAR 0 2
14564: PUSH
14565: DOUBLE
14566: LD_INT 1
14568: DEC
14569: ST_TO_ADDR
14570: LD_INT 8
14572: PUSH
14573: FOR_TO
14574: IFFALSE 14715
// if Side_Positions [ i ] then
14576: LD_EXP 38
14580: PUSH
14581: LD_VAR 0 2
14585: ARRAY
14586: IFFALSE 14713
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
14588: LD_EXP 62
14592: PUSH
14593: LD_EXP 38
14597: PUSH
14598: LD_VAR 0 2
14602: ARRAY
14603: ARRAY
14604: PPUSH
14605: LD_INT 5
14607: PPUSH
14608: CALL_OW 424
// for j := 1 to 8 do
14612: LD_ADDR_VAR 0 3
14616: PUSH
14617: DOUBLE
14618: LD_INT 1
14620: DEC
14621: ST_TO_ADDR
14622: LD_INT 8
14624: PUSH
14625: FOR_TO
14626: IFFALSE 14711
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14628: LD_EXP 38
14632: PUSH
14633: LD_VAR 0 3
14637: ARRAY
14638: PUSH
14639: LD_EXP 35
14643: PUSH
14644: LD_VAR 0 2
14648: ARRAY
14649: PUSH
14650: LD_EXP 35
14654: PUSH
14655: LD_VAR 0 3
14659: ARRAY
14660: NONEQUAL
14661: PUSH
14662: LD_EXP 40
14666: NOT
14667: PUSH
14668: LD_VAR 0 2
14672: PUSH
14673: LD_VAR 0 3
14677: NONEQUAL
14678: AND
14679: OR
14680: AND
14681: IFFALSE 14709
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14683: LD_VAR 0 3
14687: PPUSH
14688: LD_EXP 62
14692: PUSH
14693: LD_EXP 38
14697: PUSH
14698: LD_VAR 0 2
14702: ARRAY
14703: ARRAY
14704: PPUSH
14705: CALL_OW 333
14709: GO 14625
14711: POP
14712: POP
// end ;
14713: GO 14573
14715: POP
14716: POP
// end ;
14717: LD_VAR 0 1
14721: RET
// export function EndBuildUp ; var i , j ; begin
14722: LD_INT 0
14724: PPUSH
14725: PPUSH
14726: PPUSH
// BuildUpTimeActive := false ;
14727: LD_ADDR_EXP 63
14731: PUSH
14732: LD_INT 0
14734: ST_TO_ADDR
// for i := 1 to 8 do
14735: LD_ADDR_VAR 0 2
14739: PUSH
14740: DOUBLE
14741: LD_INT 1
14743: DEC
14744: ST_TO_ADDR
14745: LD_INT 8
14747: PUSH
14748: FOR_TO
14749: IFFALSE 14890
// if Side_Positions [ i ] then
14751: LD_EXP 38
14755: PUSH
14756: LD_VAR 0 2
14760: ARRAY
14761: IFFALSE 14888
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
14763: LD_EXP 62
14767: PUSH
14768: LD_EXP 38
14772: PUSH
14773: LD_VAR 0 2
14777: ARRAY
14778: ARRAY
14779: PPUSH
14780: LD_INT 0
14782: PPUSH
14783: CALL_OW 424
// for j := 1 to 8 do
14787: LD_ADDR_VAR 0 3
14791: PUSH
14792: DOUBLE
14793: LD_INT 1
14795: DEC
14796: ST_TO_ADDR
14797: LD_INT 8
14799: PUSH
14800: FOR_TO
14801: IFFALSE 14886
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14803: LD_EXP 38
14807: PUSH
14808: LD_VAR 0 3
14812: ARRAY
14813: PUSH
14814: LD_EXP 35
14818: PUSH
14819: LD_VAR 0 2
14823: ARRAY
14824: PUSH
14825: LD_EXP 35
14829: PUSH
14830: LD_VAR 0 3
14834: ARRAY
14835: NONEQUAL
14836: PUSH
14837: LD_EXP 40
14841: NOT
14842: PUSH
14843: LD_VAR 0 2
14847: PUSH
14848: LD_VAR 0 3
14852: NONEQUAL
14853: AND
14854: OR
14855: AND
14856: IFFALSE 14884
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14858: LD_VAR 0 3
14862: PPUSH
14863: LD_EXP 62
14867: PUSH
14868: LD_EXP 38
14872: PUSH
14873: LD_VAR 0 2
14877: ARRAY
14878: ARRAY
14879: PPUSH
14880: CALL_OW 334
14884: GO 14800
14886: POP
14887: POP
// end ;
14888: GO 14748
14890: POP
14891: POP
// end ;
14892: LD_VAR 0 1
14896: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
14897: LD_EXP 63
14901: IFFALSE 15076
14903: GO 14905
14905: DISABLE
14906: LD_INT 0
14908: PPUSH
14909: PPUSH
// begin for i := 1 to 8 do
14910: LD_ADDR_VAR 0 1
14914: PUSH
14915: DOUBLE
14916: LD_INT 1
14918: DEC
14919: ST_TO_ADDR
14920: LD_INT 8
14922: PUSH
14923: FOR_TO
14924: IFFALSE 15073
// if Side_Positions [ i ] then
14926: LD_EXP 38
14930: PUSH
14931: LD_VAR 0 1
14935: ARRAY
14936: IFFALSE 15071
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
14938: LD_ADDR_VAR 0 2
14942: PUSH
14943: LD_EXP 62
14947: PUSH
14948: LD_EXP 38
14952: PUSH
14953: LD_VAR 0 1
14957: ARRAY
14958: ARRAY
14959: PPUSH
14960: LD_INT 2
14962: PUSH
14963: LD_INT 21
14965: PUSH
14966: LD_INT 1
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: PUSH
14973: LD_INT 21
14975: PUSH
14976: LD_INT 2
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: LIST
14987: PUSH
14988: LD_INT 22
14990: PUSH
14991: LD_OWVAR 2
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: PPUSH
15004: CALL_OW 70
15008: PUSH
15009: FOR_IN
15010: IFFALSE 15069
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
15012: LD_EXP 35
15016: PUSH
15017: LD_VAR 0 1
15021: ARRAY
15022: PUSH
15023: LD_EXP 35
15027: PUSH
15028: LD_OWVAR 2
15032: ARRAY
15033: NONEQUAL
15034: PUSH
15035: LD_EXP 40
15039: NOT
15040: PUSH
15041: LD_VAR 0 1
15045: PUSH
15046: LD_OWVAR 2
15050: NONEQUAL
15051: AND
15052: OR
15053: IFFALSE 15067
// ComMoveToArea ( un , BuildUpEscape ) ;
15055: LD_VAR 0 2
15059: PPUSH
15060: LD_INT 16
15062: PPUSH
15063: CALL_OW 113
15067: GO 15009
15069: POP
15070: POP
15071: GO 14923
15073: POP
15074: POP
// enable ;
15075: ENABLE
// end ;
15076: PPOPN 2
15078: END
// every 0 0$1 trigger def_builduptime do
15079: LD_EXP 16
15083: IFFALSE 15109
15085: GO 15087
15087: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
15088: LD_INT 8400
15090: PUSH
15091: LD_EXP 16
15095: PUSH
15096: LD_INT 2100
15098: MUL
15099: PLUS
15100: PPUSH
15101: CALL_OW 67
// EndBuildUp ;
15105: CALL 14722 0 0
// end ; end_of_file
15109: END
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
15110: LD_INT 0
15112: PPUSH
15113: PPUSH
// enable ( 98 ) ;
15114: LD_INT 98
15116: ENABLE_MARKED
// GameEnded = false ;
15117: LD_ADDR_LOC 21
15121: PUSH
15122: LD_INT 0
15124: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
15125: LD_ADDR_LOC 20
15129: PUSH
15130: LD_INT 0
15132: PUSH
15133: LD_INT 0
15135: PUSH
15136: LD_INT 0
15138: PUSH
15139: LD_INT 0
15141: PUSH
15142: LD_INT 0
15144: PUSH
15145: LD_INT 0
15147: PUSH
15148: LD_INT 0
15150: PUSH
15151: LD_INT 0
15153: PUSH
15154: EMPTY
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: ST_TO_ADDR
// unfoged = false ;
15164: LD_ADDR_LOC 22
15168: PUSH
15169: LD_INT 0
15171: ST_TO_ADDR
// defeated_specs := [ ] ;
15172: LD_ADDR_LOC 23
15176: PUSH
15177: EMPTY
15178: ST_TO_ADDR
// for i = 1 to side_positions do
15179: LD_ADDR_VAR 0 2
15183: PUSH
15184: DOUBLE
15185: LD_INT 1
15187: DEC
15188: ST_TO_ADDR
15189: LD_EXP 38
15193: PUSH
15194: FOR_TO
15195: IFFALSE 15235
// if not side_positions [ i ] then
15197: LD_EXP 38
15201: PUSH
15202: LD_VAR 0 2
15206: ARRAY
15207: NOT
15208: IFFALSE 15233
// defeated = replace ( defeated , i , true ) ;
15210: LD_ADDR_LOC 20
15214: PUSH
15215: LD_LOC 20
15219: PPUSH
15220: LD_VAR 0 2
15224: PPUSH
15225: LD_INT 1
15227: PPUSH
15228: CALL_OW 1
15232: ST_TO_ADDR
15233: GO 15194
15235: POP
15236: POP
// end ;
15237: LD_VAR 0 1
15241: RET
// function CanWinLoose ; begin
15242: LD_INT 0
15244: PPUSH
// Result := true ;
15245: LD_ADDR_VAR 0 1
15249: PUSH
15250: LD_INT 1
15252: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
15253: CALL_OW 518
15257: PUSH
15258: CALL_OW 519
15262: PUSH
15263: LD_INT 0
15265: GREATER
15266: AND
15267: IFFALSE 15277
// Result := false ;
15269: LD_ADDR_VAR 0 1
15273: PUSH
15274: LD_INT 0
15276: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
15277: CALL_OW 531
15281: PUSH
15282: CALL_OW 519
15286: PUSH
15287: LD_INT 1
15289: GREATER
15290: AND
15291: IFFALSE 15301
// Result := false ;
15293: LD_ADDR_VAR 0 1
15297: PUSH
15298: LD_INT 0
15300: ST_TO_ADDR
// end ;
15301: LD_VAR 0 1
15305: RET
// export function HasPower ( i ) ; var k , h ; begin
15306: LD_INT 0
15308: PPUSH
15309: PPUSH
15310: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
15311: LD_VAR 0 1
15315: PPUSH
15316: CALL_OW 108
15320: NOT
15321: PUSH
15322: LD_EXP 37
15326: PUSH
15327: LD_VAR 0 1
15331: ARRAY
15332: NOT
15333: AND
15334: PUSH
15335: LD_OWVAR 4
15339: AND
15340: IFFALSE 15352
// begin result = false ;
15342: LD_ADDR_VAR 0 2
15346: PUSH
15347: LD_INT 0
15349: ST_TO_ADDR
// end else
15350: GO 15647
// case def_win_rules of 0 :
15352: LD_EXP 49
15356: PUSH
15357: LD_INT 0
15359: DOUBLE
15360: EQUAL
15361: IFTRUE 15365
15363: GO 15528
15365: POP
// if def_people_respawning then
15366: LD_EXP 11
15370: IFFALSE 15461
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
15372: LD_ADDR_VAR 0 2
15376: PUSH
15377: LD_INT 22
15379: PUSH
15380: LD_VAR 0 1
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: PUSH
15389: LD_INT 2
15391: PUSH
15392: LD_INT 21
15394: PUSH
15395: LD_INT 1
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: PUSH
15402: LD_INT 33
15404: PUSH
15405: LD_INT 3
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: PUSH
15412: LD_INT 33
15414: PUSH
15415: LD_INT 5
15417: PUSH
15418: EMPTY
15419: LIST
15420: LIST
15421: PUSH
15422: LD_INT 30
15424: PUSH
15425: LD_INT 0
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PUSH
15432: LD_INT 30
15434: PUSH
15435: LD_INT 1
15437: PUSH
15438: EMPTY
15439: LIST
15440: LIST
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: PPUSH
15454: CALL_OW 69
15458: ST_TO_ADDR
15459: GO 15526
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
15461: LD_ADDR_VAR 0 2
15465: PUSH
15466: LD_INT 22
15468: PUSH
15469: LD_VAR 0 1
15473: PUSH
15474: EMPTY
15475: LIST
15476: LIST
15477: PUSH
15478: LD_INT 2
15480: PUSH
15481: LD_INT 21
15483: PUSH
15484: LD_INT 1
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: PUSH
15491: LD_INT 33
15493: PUSH
15494: LD_INT 3
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: LD_INT 33
15503: PUSH
15504: LD_INT 5
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PPUSH
15521: CALL_OW 69
15525: ST_TO_ADDR
15526: GO 15647
15528: LD_INT 1
15530: DOUBLE
15531: EQUAL
15532: IFTRUE 15536
15534: GO 15575
15536: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
15537: LD_ADDR_VAR 0 2
15541: PUSH
15542: LD_INT 22
15544: PUSH
15545: LD_VAR 0 1
15549: PUSH
15550: EMPTY
15551: LIST
15552: LIST
15553: PUSH
15554: LD_INT 21
15556: PUSH
15557: LD_INT 1
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: PPUSH
15568: CALL_OW 69
15572: ST_TO_ADDR
15573: GO 15647
15575: LD_INT 2
15577: DOUBLE
15578: EQUAL
15579: IFTRUE 15583
15581: GO 15646
15583: POP
// begin h = false ;
15584: LD_ADDR_VAR 0 4
15588: PUSH
15589: LD_INT 0
15591: ST_TO_ADDR
// for k in heroes [ i ] do
15592: LD_ADDR_VAR 0 3
15596: PUSH
15597: LD_EXP 50
15601: PUSH
15602: LD_VAR 0 1
15606: ARRAY
15607: PUSH
15608: FOR_IN
15609: IFFALSE 15632
// if IsLive ( k ) then
15611: LD_VAR 0 3
15615: PPUSH
15616: CALL_OW 300
15620: IFFALSE 15630
// h = true ;
15622: LD_ADDR_VAR 0 4
15626: PUSH
15627: LD_INT 1
15629: ST_TO_ADDR
15630: GO 15608
15632: POP
15633: POP
// Result := h ;
15634: LD_ADDR_VAR 0 2
15638: PUSH
15639: LD_VAR 0 4
15643: ST_TO_ADDR
// end ; end ;
15644: GO 15647
15646: POP
// end ;
15647: LD_VAR 0 2
15651: RET
// function AlliedSides ( i , j ) ; begin
15652: LD_INT 0
15654: PPUSH
// Result := false ;
15655: LD_ADDR_VAR 0 3
15659: PUSH
15660: LD_INT 0
15662: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
15663: LD_VAR 0 1
15667: PPUSH
15668: LD_VAR 0 2
15672: PPUSH
15673: CALL_OW 81
15677: PUSH
15678: LD_INT 1
15680: EQUAL
15681: PUSH
15682: LD_VAR 0 2
15686: PPUSH
15687: LD_VAR 0 1
15691: PPUSH
15692: CALL_OW 81
15696: PUSH
15697: LD_INT 1
15699: EQUAL
15700: AND
15701: PUSH
15702: LD_VAR 0 1
15706: PPUSH
15707: CALL_OW 83
15711: AND
15712: PUSH
15713: LD_VAR 0 2
15717: PPUSH
15718: CALL_OW 83
15722: AND
15723: IFFALSE 15733
// Result := true ;
15725: LD_ADDR_VAR 0 3
15729: PUSH
15730: LD_INT 1
15732: ST_TO_ADDR
// end ;
15733: LD_VAR 0 3
15737: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
15738: CALL 15242 0 0
15742: PUSH
15743: LD_LOC 21
15747: NOT
15748: AND
15749: IFFALSE 15765
15751: GO 15753
15753: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
15754: LD_ADDR_EXP 61
15758: PUSH
15759: LD_STRING #Player-Ended
15761: PUSH
15762: EMPTY
15763: LIST
15764: ST_TO_ADDR
15765: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
15766: CALL 15242 0 0
15770: PUSH
15771: LD_LOC 21
15775: AND
15776: IFFALSE 15785
15778: GO 15780
15780: DISABLE
// YouLostInMultiplayer ;
15781: CALL_OW 107
15785: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
15786: CALL 15242 0 0
15790: NOT
15791: PUSH
15792: CALL_OW 531
15796: NOT
15797: AND
15798: IFFALSE 15814
15800: GO 15802
15802: DISABLE
// WaitServerStrings = [ #server-wait ] ;
15803: LD_ADDR_EXP 61
15807: PUSH
15808: LD_STRING #server-wait
15810: PUSH
15811: EMPTY
15812: LIST
15813: ST_TO_ADDR
15814: END
// every 100 trigger IAmSpec do
15815: CALL_OW 531
15819: IFFALSE 15835
15821: GO 15823
15823: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
15824: LD_ADDR_EXP 61
15828: PUSH
15829: LD_STRING #Player-IAmSpec
15831: PUSH
15832: EMPTY
15833: LIST
15834: ST_TO_ADDR
15835: END
// every 100 trigger GameEnded and IAmSpec do
15836: LD_LOC 21
15840: PUSH
15841: CALL_OW 531
15845: AND
15846: IFFALSE 15855
15848: GO 15850
15850: DISABLE
// YouLostInMultiplayer ;
15851: CALL_OW 107
15855: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
15856: CALL 15242 0 0
15860: PUSH
15861: LD_LOC 21
15865: NOT
15866: AND
15867: IFFALSE 15883
15869: GO 15871
15871: DISABLE
// WaitServerStrings = [ $player-win ] ;
15872: LD_ADDR_EXP 61
15876: PUSH
15877: LD_STRING $player-win
15879: PUSH
15880: EMPTY
15881: LIST
15882: ST_TO_ADDR
15883: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
15884: CALL 15242 0 0
15888: PUSH
15889: LD_LOC 21
15893: AND
15894: IFFALSE 15918
15896: GO 15898
15898: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
15899: LD_EXP 39
15903: PUSH
15904: LD_OWVAR 7
15908: ARRAY
15909: PPUSH
15910: CALL 9097 0 1
// YouWinInMultiplayer ;
15914: CALL_OW 106
// end ;
15918: END
// every 100 trigger isEditor marked 401 do
15919: LD_OWVAR 84
15923: IFFALSE 15939
15925: GO 15927
15927: DISABLE
// Debug_Strings = [ You won ] ;
15928: LD_ADDR_OWVAR 48
15932: PUSH
15933: LD_STRING You won
15935: PUSH
15936: EMPTY
15937: LIST
15938: ST_TO_ADDR
15939: END
// every 100 trigger isEditor marked 400 do
15940: LD_OWVAR 84
15944: IFFALSE 15960
15946: GO 15948
15948: DISABLE
// Debug_Strings = [ You loss ] ;
15949: LD_ADDR_OWVAR 48
15953: PUSH
15954: LD_STRING You loss
15956: PUSH
15957: EMPTY
15958: LIST
15959: ST_TO_ADDR
15960: END
// every 100 marked 98 do var i , un ;
15961: GO 15963
15963: DISABLE
15964: LD_INT 0
15966: PPUSH
15967: PPUSH
// begin for i = 1 to side_positions do
15968: LD_ADDR_VAR 0 1
15972: PUSH
15973: DOUBLE
15974: LD_INT 1
15976: DEC
15977: ST_TO_ADDR
15978: LD_EXP 38
15982: PUSH
15983: FOR_TO
15984: IFFALSE 16071
// begin if side_positions [ i ] then
15986: LD_EXP 38
15990: PUSH
15991: LD_VAR 0 1
15995: ARRAY
15996: IFFALSE 16069
// if not HasPower ( i ) and not defeated [ i ] then
15998: LD_VAR 0 1
16002: PPUSH
16003: CALL 15306 0 1
16007: NOT
16008: PUSH
16009: LD_LOC 20
16013: PUSH
16014: LD_VAR 0 1
16018: ARRAY
16019: NOT
16020: AND
16021: IFFALSE 16069
// begin defeated = replace ( defeated , i , true ) ;
16023: LD_ADDR_LOC 20
16027: PUSH
16028: LD_LOC 20
16032: PPUSH
16033: LD_VAR 0 1
16037: PPUSH
16038: LD_INT 1
16040: PPUSH
16041: CALL_OW 1
16045: ST_TO_ADDR
// if i = mp_player_side then
16046: LD_VAR 0 1
16050: PUSH
16051: LD_OWVAR 7
16055: EQUAL
16056: IFFALSE 16069
// begin Multiplayer_Loose_Message ;
16058: CALL_OW 521
// SetPlayerSpectator ( ) ;
16062: CALL_OW 572
// enable ( 400 ) ;
16066: LD_INT 400
16068: ENABLE_MARKED
// end ; end ; end ;
16069: GO 15983
16071: POP
16072: POP
// DidGameEnd ;
16073: CALL 16088 0 0
// if not GameEnded then
16077: LD_LOC 21
16081: NOT
16082: IFFALSE 16085
// enable ;
16084: ENABLE
// end ;
16085: PPOPN 2
16087: END
// function DidGameEnd ; var i , k , enemy ; begin
16088: LD_INT 0
16090: PPUSH
16091: PPUSH
16092: PPUSH
16093: PPUSH
// enemy = [ ] ;
16094: LD_ADDR_VAR 0 4
16098: PUSH
16099: EMPTY
16100: ST_TO_ADDR
// for i = 1 to side_positions do
16101: LD_ADDR_VAR 0 2
16105: PUSH
16106: DOUBLE
16107: LD_INT 1
16109: DEC
16110: ST_TO_ADDR
16111: LD_EXP 38
16115: PUSH
16116: FOR_TO
16117: IFFALSE 16211
// if not defeated [ i ] then
16119: LD_LOC 20
16123: PUSH
16124: LD_VAR 0 2
16128: ARRAY
16129: NOT
16130: IFFALSE 16209
// for k = 1 to side_positions do
16132: LD_ADDR_VAR 0 3
16136: PUSH
16137: DOUBLE
16138: LD_INT 1
16140: DEC
16141: ST_TO_ADDR
16142: LD_EXP 38
16146: PUSH
16147: FOR_TO
16148: IFFALSE 16207
// if not defeated [ k ] then
16150: LD_LOC 20
16154: PUSH
16155: LD_VAR 0 3
16159: ARRAY
16160: NOT
16161: IFFALSE 16205
// if not AlliedSides ( i , k ) then
16163: LD_VAR 0 2
16167: PPUSH
16168: LD_VAR 0 3
16172: PPUSH
16173: CALL 15652 0 2
16177: NOT
16178: IFFALSE 16205
// enemy = enemy ^ [ i , k ] ;
16180: LD_ADDR_VAR 0 4
16184: PUSH
16185: LD_VAR 0 4
16189: PUSH
16190: LD_VAR 0 2
16194: PUSH
16195: LD_VAR 0 3
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: ADD
16204: ST_TO_ADDR
16205: GO 16147
16207: POP
16208: POP
16209: GO 16116
16211: POP
16212: POP
// if not enemy then
16213: LD_VAR 0 4
16217: NOT
16218: IFFALSE 16244
// begin GameEnded = true ;
16220: LD_ADDR_LOC 21
16224: PUSH
16225: LD_INT 1
16227: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
16228: LD_LOC 20
16232: PUSH
16233: LD_OWVAR 7
16237: ARRAY
16238: NOT
16239: IFFALSE 16244
// enable ( 401 ) ;
16241: LD_INT 401
16243: ENABLE_MARKED
// end ; end ;
16244: LD_VAR 0 1
16248: RET
// function unfog ; var k , friends ; begin
16249: LD_INT 0
16251: PPUSH
16252: PPUSH
16253: PPUSH
// for k = 1 to side_positions do
16254: LD_ADDR_VAR 0 2
16258: PUSH
16259: DOUBLE
16260: LD_INT 1
16262: DEC
16263: ST_TO_ADDR
16264: LD_EXP 38
16268: PUSH
16269: FOR_TO
16270: IFFALSE 16326
// if not defeated [ k ] then
16272: LD_LOC 20
16276: PUSH
16277: LD_VAR 0 2
16281: ARRAY
16282: NOT
16283: IFFALSE 16324
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
16285: LD_OWVAR 7
16289: PPUSH
16290: LD_VAR 0 2
16294: PPUSH
16295: CALL_OW 81
16299: PUSH
16300: LD_INT 1
16302: PUSH
16303: EMPTY
16304: LIST
16305: IN
16306: IFFALSE 16324
// friends = friends ^ k ;
16308: LD_ADDR_VAR 0 3
16312: PUSH
16313: LD_VAR 0 3
16317: PUSH
16318: LD_VAR 0 2
16322: ADD
16323: ST_TO_ADDR
16324: GO 16269
16326: POP
16327: POP
// if not friends then
16328: LD_VAR 0 3
16332: NOT
16333: IFFALSE 16347
// begin SetPlayerSpectator ( ) ;
16335: CALL_OW 572
// unfoged = true ;
16339: LD_ADDR_LOC 22
16343: PUSH
16344: LD_INT 1
16346: ST_TO_ADDR
// end ; end ;
16347: LD_VAR 0 1
16351: RET
// export function MakeGameEnd ; begin
16352: LD_INT 0
16354: PPUSH
// SetPlayerSpectator ( ) ;
16355: CALL_OW 572
// unfoged = true ;
16359: LD_ADDR_LOC 22
16363: PUSH
16364: LD_INT 1
16366: ST_TO_ADDR
// wait ( 0 0$5 ) ;
16367: LD_INT 175
16369: PPUSH
16370: CALL_OW 67
// GameEnded = true ;
16374: LD_ADDR_LOC 21
16378: PUSH
16379: LD_INT 1
16381: ST_TO_ADDR
// end ;
16382: LD_VAR 0 1
16386: RET
// export function GetGameEnded ; begin
16387: LD_INT 0
16389: PPUSH
// result = GameEnded ;
16390: LD_ADDR_VAR 0 1
16394: PUSH
16395: LD_LOC 21
16399: ST_TO_ADDR
// end ;
16400: LD_VAR 0 1
16404: RET
