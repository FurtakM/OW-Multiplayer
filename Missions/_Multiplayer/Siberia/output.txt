// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_amount_of_siberit , def_public_score , def_siberite_bomb , def_builduptime , def_game_rules , def_sheik , def_mastodont ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id , def_win_rules , heroes , sheik , mastodont ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function read_multiplayer_and_game_parameters ; var i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// if Multiplayer then
   4: LD_OWVAR 4
   8: IFFALSE 72
// begin Game_Type := mp_game_type ;
  10: LD_ADDR_EXP 21
  14: PUSH
  15: LD_OWVAR 6
  19: ST_TO_ADDR
// Your_Side := mp_player_side ;
  20: LD_ADDR_OWVAR 2
  24: PUSH
  25: LD_OWVAR 7
  29: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  30: LD_ADDR_EXP 38
  34: PUSH
  35: LD_OWVAR 17
  39: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  40: LD_ADDR_EXP 35
  44: PUSH
  45: LD_OWVAR 15
  49: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
  50: LD_ADDR_EXP 39
  54: PUSH
  55: LD_OWVAR 16
  59: ST_TO_ADDR
// Teams := mp_teams ;
  60: LD_ADDR_EXP 36
  64: PUSH
  65: LD_OWVAR 12
  69: ST_TO_ADDR
// end else
  70: GO 293
// begin Game_Type := 1 ;
  72: LD_ADDR_EXP 21
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// Your_Side := 3 ;
  80: LD_ADDR_OWVAR 2
  84: PUSH
  85: LD_INT 3
  87: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
  88: LD_ADDR_EXP 38
  92: PUSH
  93: LD_INT 1
  95: PUSH
  96: LD_INT 2
  98: PUSH
  99: LD_INT 3
 101: PUSH
 102: LD_INT 4
 104: PUSH
 105: LD_INT 5
 107: PUSH
 108: LD_INT 6
 110: PUSH
 111: LD_INT 0
 113: PUSH
 114: LD_INT 0
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: LIST
 126: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 127: LD_ADDR_EXP 35
 131: PUSH
 132: LD_INT 1
 134: PUSH
 135: LD_INT 2
 137: PUSH
 138: LD_INT 3
 140: PUSH
 141: LD_INT 4
 143: PUSH
 144: LD_INT 5
 146: PUSH
 147: LD_INT 6
 149: PUSH
 150: LD_INT 0
 152: PUSH
 153: LD_INT 0
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: LIST
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 166: LD_ADDR_EXP 39
 170: PUSH
 171: LD_INT 1
 173: PUSH
 174: LD_INT 2
 176: PUSH
 177: LD_INT 3
 179: PUSH
 180: LD_INT 1
 182: PUSH
 183: LD_INT 2
 185: PUSH
 186: LD_INT 3
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 0
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: ST_TO_ADDR
// Side_Comps := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 205: LD_ADDR_EXP 37
 209: PUSH
 210: LD_INT 0
 212: PUSH
 213: LD_INT 0
 215: PUSH
 216: LD_INT 0
 218: PUSH
 219: LD_INT 0
 221: PUSH
 222: LD_INT 0
 224: PUSH
 225: LD_INT 0
 227: PUSH
 228: LD_INT 0
 230: PUSH
 231: LD_INT 0
 233: PUSH
 234: EMPTY
 235: LIST
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 244: LD_ADDR_EXP 36
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: EMPTY
 253: LIST
 254: PUSH
 255: LD_INT 2
 257: PUSH
 258: EMPTY
 259: LIST
 260: PUSH
 261: LD_INT 3
 263: PUSH
 264: EMPTY
 265: LIST
 266: PUSH
 267: LD_INT 4
 269: PUSH
 270: EMPTY
 271: LIST
 272: PUSH
 273: LD_INT 5
 275: PUSH
 276: EMPTY
 277: LIST
 278: PUSH
 279: LD_INT 6
 281: PUSH
 282: EMPTY
 283: LIST
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: LIST
 289: LIST
 290: LIST
 291: LIST
 292: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 293: LD_ADDR_EXP 40
 297: PUSH
 298: LD_EXP 35
 302: PUSH
 303: LD_INT 0
 305: PUSH
 306: EMPTY
 307: LIST
 308: DIFF
 309: PUSH
 310: LD_INT 1
 312: GREATER
 313: ST_TO_ADDR
// if Multiplayer then
 314: LD_OWVAR 4
 318: IFFALSE 564
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 320: LD_ADDR_EXP 1
 324: PUSH
 325: LD_INT 0
 327: PPUSH
 328: CALL_OW 426
 332: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 333: LD_ADDR_EXP 2
 337: PUSH
 338: LD_INT 1
 340: PPUSH
 341: CALL_OW 426
 345: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 346: LD_ADDR_EXP 3
 350: PUSH
 351: LD_INT 2
 353: PPUSH
 354: CALL_OW 426
 358: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 359: LD_ADDR_EXP 4
 363: PUSH
 364: LD_INT 3
 366: PPUSH
 367: CALL_OW 426
 371: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 372: LD_ADDR_EXP 5
 376: PUSH
 377: LD_INT 4
 379: PPUSH
 380: CALL_OW 426
 384: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 385: LD_ADDR_EXP 6
 389: PUSH
 390: LD_INT 5
 392: PPUSH
 393: CALL_OW 426
 397: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 398: LD_ADDR_EXP 7
 402: PUSH
 403: LD_INT 6
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 411: LD_ADDR_EXP 8
 415: PUSH
 416: LD_INT 10
 418: PPUSH
 419: CALL_OW 426
 423: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 424: LD_ADDR_EXP 9
 428: PUSH
 429: LD_INT 11
 431: PPUSH
 432: CALL_OW 426
 436: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 437: LD_ADDR_EXP 10
 441: PUSH
 442: LD_INT 12
 444: PPUSH
 445: CALL_OW 426
 449: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 450: LD_ADDR_EXP 11
 454: PUSH
 455: LD_INT 13
 457: PPUSH
 458: CALL_OW 426
 462: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 463: LD_ADDR_EXP 12
 467: PUSH
 468: LD_INT 14
 470: PPUSH
 471: CALL_OW 426
 475: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 476: LD_ADDR_EXP 13
 480: PUSH
 481: LD_INT 15
 483: PPUSH
 484: CALL_OW 426
 488: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 489: LD_ADDR_EXP 14
 493: PUSH
 494: LD_INT 16
 496: PPUSH
 497: CALL_OW 426
 501: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 502: LD_ADDR_EXP 15
 506: PUSH
 507: LD_INT 17
 509: PPUSH
 510: CALL_OW 426
 514: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 515: LD_ADDR_EXP 16
 519: PUSH
 520: LD_INT 20
 522: PPUSH
 523: CALL_OW 426
 527: ST_TO_ADDR
// def_game_rules := 0 ;
 528: LD_ADDR_EXP 17
 532: PUSH
 533: LD_INT 0
 535: ST_TO_ADDR
// def_sheik := GetMultiplayerSetting ( 22 ) ;
 536: LD_ADDR_EXP 18
 540: PUSH
 541: LD_INT 22
 543: PPUSH
 544: CALL_OW 426
 548: ST_TO_ADDR
// def_mastodont := GetMultiplayerSetting ( 23 ) ;
 549: LD_ADDR_EXP 19
 553: PUSH
 554: LD_INT 23
 556: PPUSH
 557: CALL_OW 426
 561: ST_TO_ADDR
// end else
 562: GO 720
// begin Randomize ;
 564: CALL_OW 10
// def_base_level := 2 ;
 568: LD_ADDR_EXP 1
 572: PUSH
 573: LD_INT 2
 575: ST_TO_ADDR
// def_amount_of_people := 0 ;
 576: LD_ADDR_EXP 2
 580: PUSH
 581: LD_INT 0
 583: ST_TO_ADDR
// def_skill_level := 1 ;
 584: LD_ADDR_EXP 3
 588: PUSH
 589: LD_INT 1
 591: ST_TO_ADDR
// def_starting_resources := 2 ;
 592: LD_ADDR_EXP 4
 596: PUSH
 597: LD_INT 2
 599: ST_TO_ADDR
// def_shipments_density := 1 ;
 600: LD_ADDR_EXP 5
 604: PUSH
 605: LD_INT 1
 607: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
 608: LD_ADDR_EXP 6
 612: PUSH
 613: LD_INT 1
 615: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
 616: LD_ADDR_EXP 7
 620: PUSH
 621: LD_INT 2
 623: ST_TO_ADDR
// def_shared_vision := 1 ;
 624: LD_ADDR_EXP 8
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// def_morale_flags := 1 ;
 632: LD_ADDR_EXP 9
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// def_siberite_detection := 1 ;
 640: LD_ADDR_EXP 10
 644: PUSH
 645: LD_INT 1
 647: ST_TO_ADDR
// def_people_respawning := 2 ;
 648: LD_ADDR_EXP 11
 652: PUSH
 653: LD_INT 2
 655: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 656: LD_ADDR_EXP 12
 660: PUSH
 661: LD_INT 3
 663: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 664: LD_ADDR_EXP 13
 668: PUSH
 669: LD_INT 0
 671: ST_TO_ADDR
// def_public_score := 0 ;
 672: LD_ADDR_EXP 14
 676: PUSH
 677: LD_INT 0
 679: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 680: LD_ADDR_EXP 15
 684: PUSH
 685: LD_INT 0
 687: ST_TO_ADDR
// def_builduptime := 1 ;
 688: LD_ADDR_EXP 16
 692: PUSH
 693: LD_INT 1
 695: ST_TO_ADDR
// def_game_rules := 0 ;
 696: LD_ADDR_EXP 17
 700: PUSH
 701: LD_INT 0
 703: ST_TO_ADDR
// def_sheik := 0 ;
 704: LD_ADDR_EXP 18
 708: PUSH
 709: LD_INT 0
 711: ST_TO_ADDR
// def_mastodont := 0 ;
 712: LD_ADDR_EXP 19
 716: PUSH
 717: LD_INT 0
 719: ST_TO_ADDR
// end ; if isSGUI then
 720: LD_OWVAR 83
 724: IFFALSE 730
// setMpTechs ( ) ;
 726: CALL 9304 0 0
// if ( Game_Type = 5 ) then
 730: LD_EXP 21
 734: PUSH
 735: LD_INT 5
 737: EQUAL
 738: IFFALSE 767
// begin def_base_level := 1 ;
 740: LD_ADDR_EXP 1
 744: PUSH
 745: LD_INT 1
 747: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 748: LD_ADDR_EXP 6
 752: PUSH
 753: LD_INT 0
 755: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
 756: LD_ADDR_EXP 7
 760: PUSH
 761: LD_INT 0
 763: ST_TO_ADDR
// disable ( 10 ) ;
 764: LD_INT 10
 766: DISABLE_MARKED
// end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 767: LD_ADDR_EXP 22
 771: PUSH
 772: LD_INT 0
 774: PUSH
 775: LD_INT 1
 777: PUSH
 778: LD_INT 1
 780: PUSH
 781: EMPTY
 782: LIST
 783: LIST
 784: LIST
 785: PUSH
 786: LD_EXP 1
 790: PUSH
 791: LD_INT 1
 793: PLUS
 794: ARRAY
 795: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 ] [ def_base_level + 1 ] ;
 796: LD_ADDR_EXP 23
 800: PUSH
 801: LD_INT 0
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: LD_INT 2
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: LIST
 814: PUSH
 815: LD_EXP 1
 819: PUSH
 820: LD_INT 1
 822: PLUS
 823: ARRAY
 824: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 825: LD_ADDR_EXP 24
 829: PUSH
 830: LD_INT 9
 832: PUSH
 833: LD_INT 12
 835: PUSH
 836: LD_INT 15
 838: PUSH
 839: LD_INT 24
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: LIST
 846: LIST
 847: PUSH
 848: LD_EXP 2
 852: PUSH
 853: LD_INT 1
 855: PLUS
 856: ARRAY
 857: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 , 8 ] [ def_skill_level + 1 ] ;
 858: LD_ADDR_EXP 25
 862: PUSH
 863: LD_INT 2
 865: PUSH
 866: LD_INT 3
 868: PUSH
 869: LD_INT 4
 871: PUSH
 872: LD_INT 5
 874: PUSH
 875: LD_INT 8
 877: PUSH
 878: EMPTY
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: LIST
 884: PUSH
 885: LD_EXP 3
 889: PUSH
 890: LD_INT 1
 892: PLUS
 893: ARRAY
 894: ST_TO_ADDR
// if ( Game_Type = 5 ) then
 895: LD_EXP 21
 899: PUSH
 900: LD_INT 5
 902: EQUAL
 903: IFFALSE 1021
// begin starting_resources := [ [ 1000 , 100 , 100 ] , [ 2000 , 200 , 200 ] , [ 5000 , 500 , 500 ] , [ 10000 , 1000 , 1000 ] , [ 25000 , 2500 , 2500 ] , [ 50000 , 5000 , 5000 ] ] [ def_starting_resources + 1 ] ;
 905: LD_ADDR_EXP 27
 909: PUSH
 910: LD_INT 1000
 912: PUSH
 913: LD_INT 100
 915: PUSH
 916: LD_INT 100
 918: PUSH
 919: EMPTY
 920: LIST
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 2000
 926: PUSH
 927: LD_INT 200
 929: PUSH
 930: LD_INT 200
 932: PUSH
 933: EMPTY
 934: LIST
 935: LIST
 936: LIST
 937: PUSH
 938: LD_INT 5000
 940: PUSH
 941: LD_INT 500
 943: PUSH
 944: LD_INT 500
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: PUSH
 952: LD_INT 10000
 954: PUSH
 955: LD_INT 1000
 957: PUSH
 958: LD_INT 1000
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: LIST
 965: PUSH
 966: LD_INT 25000
 968: PUSH
 969: LD_INT 2500
 971: PUSH
 972: LD_INT 2500
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: LIST
 979: PUSH
 980: LD_INT 50000
 982: PUSH
 983: LD_INT 5000
 985: PUSH
 986: LD_INT 5000
 988: PUSH
 989: EMPTY
 990: LIST
 991: LIST
 992: LIST
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: LIST
1000: LIST
1001: PUSH
1002: LD_EXP 4
1006: PUSH
1007: LD_INT 1
1009: PLUS
1010: ARRAY
1011: ST_TO_ADDR
// starting_crates := [ ] ;
1012: LD_ADDR_EXP 26
1016: PUSH
1017: EMPTY
1018: ST_TO_ADDR
// end else
1019: GO 1167
// begin starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1021: LD_ADDR_EXP 27
1025: PUSH
1026: LD_INT 0
1028: PUSH
1029: LD_INT 0
1031: PUSH
1032: LD_INT 0
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: LIST
1039: PUSH
1040: LD_INT 30
1042: PUSH
1043: LD_INT 0
1045: PUSH
1046: LD_INT 0
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: LIST
1053: PUSH
1054: LD_INT 50
1056: PUSH
1057: LD_INT 20
1059: PUSH
1060: LD_INT 0
1062: PUSH
1063: EMPTY
1064: LIST
1065: LIST
1066: LIST
1067: PUSH
1068: LD_INT 80
1070: PUSH
1071: LD_INT 40
1073: PUSH
1074: LD_INT 20
1076: PUSH
1077: EMPTY
1078: LIST
1079: LIST
1080: LIST
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: LD_EXP 4
1092: PUSH
1093: LD_INT 1
1095: PLUS
1096: ARRAY
1097: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1098: LD_ADDR_EXP 26
1102: PUSH
1103: LD_INT 10
1105: PUSH
1106: EMPTY
1107: LIST
1108: PUSH
1109: LD_INT 7
1111: PUSH
1112: LD_INT 14
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: PUSH
1119: LD_INT 6
1121: PUSH
1122: LD_INT 12
1124: PUSH
1125: LD_INT 18
1127: PUSH
1128: EMPTY
1129: LIST
1130: LIST
1131: LIST
1132: PUSH
1133: LD_INT 5
1135: PUSH
1136: LD_INT 10
1138: PUSH
1139: LD_INT 15
1141: PUSH
1142: LD_INT 20
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: LIST
1155: LIST
1156: PUSH
1157: LD_EXP 4
1161: PUSH
1162: LD_INT 1
1164: PLUS
1165: ARRAY
1166: ST_TO_ADDR
// end ; shipments_density := [ 150 , 125 , 100 , 50 ] [ def_shipments_density + 1 ] ;
1167: LD_ADDR_EXP 28
1171: PUSH
1172: LD_INT 150
1174: PUSH
1175: LD_INT 125
1177: PUSH
1178: LD_INT 100
1180: PUSH
1181: LD_INT 50
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: LIST
1188: LIST
1189: PUSH
1190: LD_EXP 5
1194: PUSH
1195: LD_INT 1
1197: PLUS
1198: ARRAY
1199: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1200: LD_ADDR_EXP 32
1204: PUSH
1205: LD_INT 0
1207: PUSH
1208: LD_INT 10500
1210: PUSH
1211: LD_INT 6300
1213: PUSH
1214: EMPTY
1215: LIST
1216: LIST
1217: LIST
1218: PUSH
1219: LD_EXP 11
1223: PUSH
1224: LD_INT 1
1226: PLUS
1227: ARRAY
1228: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1229: LD_ADDR_EXP 33
1233: PUSH
1234: LD_INT 0
1236: PUSH
1237: LD_INT 31500
1239: PUSH
1240: LD_INT 10500
1242: PUSH
1243: EMPTY
1244: LIST
1245: LIST
1246: LIST
1247: PUSH
1248: LD_EXP 11
1252: PUSH
1253: LD_INT 1
1255: PLUS
1256: ARRAY
1257: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1258: LD_ADDR_EXP 30
1262: PUSH
1263: LD_INT 0
1265: PUSH
1266: LD_INT 1
1268: PUSH
1269: LD_INT 2
1271: PUSH
1272: LD_INT 3
1274: PUSH
1275: EMPTY
1276: LIST
1277: LIST
1278: LIST
1279: LIST
1280: PUSH
1281: LD_EXP 12
1285: PUSH
1286: LD_INT 1
1288: PLUS
1289: ARRAY
1290: ST_TO_ADDR
// amount_of_siberit := [ 30 , 50 , 80 , 100 , 130 , 150 , 200 ] [ def_amount_of_siberit + 1 ] ;
1291: LD_ADDR_EXP 31
1295: PUSH
1296: LD_INT 30
1298: PUSH
1299: LD_INT 50
1301: PUSH
1302: LD_INT 80
1304: PUSH
1305: LD_INT 100
1307: PUSH
1308: LD_INT 130
1310: PUSH
1311: LD_INT 150
1313: PUSH
1314: LD_INT 200
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: LIST
1324: LIST
1325: PUSH
1326: LD_EXP 13
1330: PUSH
1331: LD_INT 1
1333: PLUS
1334: ARRAY
1335: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1336: LD_ADDR_EXP 29
1340: PUSH
1341: LD_INT 1
1343: NEG
1344: PUSH
1345: LD_INT 350
1347: PUSH
1348: LD_INT 700
1350: PUSH
1351: LD_INT 1400
1353: PUSH
1354: LD_INT 0
1356: PUSH
1357: EMPTY
1358: LIST
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: PUSH
1364: LD_EXP 9
1368: PUSH
1369: LD_INT 1
1371: PLUS
1372: ARRAY
1373: ST_TO_ADDR
// battle_flags_id := [ ] ;
1374: LD_ADDR_EXP 48
1378: PUSH
1379: EMPTY
1380: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1381: LD_ADDR_EXP 34
1385: PUSH
1386: LD_INT 0
1388: PUSH
1389: LD_INT 1
1391: PUSH
1392: LD_INT 63000
1394: PUSH
1395: LD_INT 126000
1397: PUSH
1398: LD_INT 189000
1400: PUSH
1401: LD_INT 252000
1403: PUSH
1404: EMPTY
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: PUSH
1412: LD_EXP 15
1416: PUSH
1417: LD_INT 1
1419: PLUS
1420: ARRAY
1421: ST_TO_ADDR
// if ( Game_Type = 12 ) then
1422: LD_EXP 21
1426: PUSH
1427: LD_INT 12
1429: EQUAL
1430: IFFALSE 1488
// begin sheik := [ 0 , 1 ] [ def_sheik + 1 ] ;
1432: LD_ADDR_EXP 51
1436: PUSH
1437: LD_INT 0
1439: PUSH
1440: LD_INT 1
1442: PUSH
1443: EMPTY
1444: LIST
1445: LIST
1446: PUSH
1447: LD_EXP 18
1451: PUSH
1452: LD_INT 1
1454: PLUS
1455: ARRAY
1456: ST_TO_ADDR
// mastodont := [ 0 , 1 , 2 ] [ def_mastodont + 1 ] end else
1457: LD_ADDR_EXP 52
1461: PUSH
1462: LD_INT 0
1464: PUSH
1465: LD_INT 1
1467: PUSH
1468: LD_INT 2
1470: PUSH
1471: EMPTY
1472: LIST
1473: LIST
1474: LIST
1475: PUSH
1476: LD_EXP 19
1480: PUSH
1481: LD_INT 1
1483: PLUS
1484: ARRAY
1485: ST_TO_ADDR
1486: GO 1504
// begin sheik := 0 ;
1488: LD_ADDR_EXP 51
1492: PUSH
1493: LD_INT 0
1495: ST_TO_ADDR
// mastodont := 0 ;
1496: LD_ADDR_EXP 52
1500: PUSH
1501: LD_INT 0
1503: ST_TO_ADDR
// end ; end ;
1504: LD_VAR 0 1
1508: RET
// function init_map ; var i , j ; begin
1509: LD_INT 0
1511: PPUSH
1512: PPUSH
1513: PPUSH
// normal_oil_deposits_locations := [ [ 101 , 187 ] , [ 18 , 26 ] , [ 50 , 89 ] , [ 123 , 3 ] , [ 182 , 69 ] , [ 231 , 174 ] ] ;
1514: LD_ADDR_EXP 44
1518: PUSH
1519: LD_INT 101
1521: PUSH
1522: LD_INT 187
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 18
1531: PUSH
1532: LD_INT 26
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 50
1541: PUSH
1542: LD_INT 89
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 123
1551: PUSH
1552: LD_INT 3
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 182
1561: PUSH
1562: LD_INT 69
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 231
1571: PUSH
1572: LD_INT 174
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 101 , 187 ] , [ 108 , 183 ] ] , [ [ 18 , 26 ] , [ 7 , 8 ] ] , [ [ 50 , 89 ] , [ 62 , 99 ] ] , [ [ 123 , 3 ] , [ 149 , 18 ] ] , [ [ 182 , 69 ] , [ 202 , 90 ] ] , [ [ 231 , 174 ] , [ 239 , 164 ] ] ] ;
1587: LD_ADDR_EXP 45
1591: PUSH
1592: LD_INT 101
1594: PUSH
1595: LD_INT 187
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: PUSH
1602: LD_INT 108
1604: PUSH
1605: LD_INT 183
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: PUSH
1616: LD_INT 18
1618: PUSH
1619: LD_INT 26
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PUSH
1626: LD_INT 7
1628: PUSH
1629: LD_INT 8
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: PUSH
1640: LD_INT 50
1642: PUSH
1643: LD_INT 89
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: LD_INT 62
1652: PUSH
1653: LD_INT 99
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 123
1666: PUSH
1667: LD_INT 3
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: PUSH
1674: LD_INT 149
1676: PUSH
1677: LD_INT 18
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: LD_INT 182
1690: PUSH
1691: LD_INT 69
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: PUSH
1698: LD_INT 202
1700: PUSH
1701: LD_INT 90
1703: PUSH
1704: EMPTY
1705: LIST
1706: LIST
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: PUSH
1712: LD_INT 231
1714: PUSH
1715: LD_INT 174
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: PUSH
1722: LD_INT 239
1724: PUSH
1725: LD_INT 164
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 96 , 185 ] , [ 21 , 29 ] , [ 50 , 85 ] , [ 128 , 2 ] , [ 186 , 72 ] , [ 234 , 174 ] ] ;
1744: LD_ADDR_EXP 46
1748: PUSH
1749: LD_INT 96
1751: PUSH
1752: LD_INT 185
1754: PUSH
1755: EMPTY
1756: LIST
1757: LIST
1758: PUSH
1759: LD_INT 21
1761: PUSH
1762: LD_INT 29
1764: PUSH
1765: EMPTY
1766: LIST
1767: LIST
1768: PUSH
1769: LD_INT 50
1771: PUSH
1772: LD_INT 85
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: PUSH
1779: LD_INT 128
1781: PUSH
1782: LD_INT 2
1784: PUSH
1785: EMPTY
1786: LIST
1787: LIST
1788: PUSH
1789: LD_INT 186
1791: PUSH
1792: LD_INT 72
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: PUSH
1799: LD_INT 234
1801: PUSH
1802: LD_INT 174
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 96 , 185 ] , [ 109 , 179 ] ] , [ [ 21 , 29 ] , [ 9 , 5 ] ] , [ [ 50 , 85 ] , [ 66 , 102 ] ] , [ [ 128 , 2 ] , [ 152 , 15 ] ] , [ [ 186 , 72 ] , [ 200 , 86 ] ] , [ [ 234 , 174 ] , [ 237 , 160 ] ] ] ;
1817: LD_ADDR_EXP 47
1821: PUSH
1822: LD_INT 96
1824: PUSH
1825: LD_INT 185
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: LD_INT 109
1834: PUSH
1835: LD_INT 179
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PUSH
1842: EMPTY
1843: LIST
1844: LIST
1845: PUSH
1846: LD_INT 21
1848: PUSH
1849: LD_INT 29
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: PUSH
1856: LD_INT 9
1858: PUSH
1859: LD_INT 5
1861: PUSH
1862: EMPTY
1863: LIST
1864: LIST
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: PUSH
1870: LD_INT 50
1872: PUSH
1873: LD_INT 85
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: PUSH
1880: LD_INT 66
1882: PUSH
1883: LD_INT 102
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: PUSH
1894: LD_INT 128
1896: PUSH
1897: LD_INT 2
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: PUSH
1904: LD_INT 152
1906: PUSH
1907: LD_INT 15
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: PUSH
1918: LD_INT 186
1920: PUSH
1921: LD_INT 72
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: PUSH
1928: LD_INT 200
1930: PUSH
1931: LD_INT 86
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 234
1944: PUSH
1945: LD_INT 174
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: PUSH
1952: LD_INT 237
1954: PUSH
1955: LD_INT 160
1957: PUSH
1958: EMPTY
1959: LIST
1960: LIST
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: ST_TO_ADDR
// depot_def := [ [ 100 , 179 , 0 ] , [ 21 , 18 , 2 ] , [ 65 , 90 , 2 ] , [ 132 , 11 , 1 ] , [ 190 , 82 , 4 ] , [ 230 , 164 , 4 ] ] ;
1974: LD_ADDR_EXP 41
1978: PUSH
1979: LD_INT 100
1981: PUSH
1982: LD_INT 179
1984: PUSH
1985: LD_INT 0
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: PUSH
1993: LD_INT 21
1995: PUSH
1996: LD_INT 18
1998: PUSH
1999: LD_INT 2
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 65
2009: PUSH
2010: LD_INT 90
2012: PUSH
2013: LD_INT 2
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 132
2023: PUSH
2024: LD_INT 11
2026: PUSH
2027: LD_INT 1
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: PUSH
2035: LD_INT 190
2037: PUSH
2038: LD_INT 82
2040: PUSH
2041: LD_INT 4
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: LIST
2048: PUSH
2049: LD_INT 230
2051: PUSH
2052: LD_INT 164
2054: PUSH
2055: LD_INT 4
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: ST_TO_ADDR
// for i in depot_def do
2071: LD_ADDR_VAR 0 2
2075: PUSH
2076: LD_EXP 41
2080: PUSH
2081: FOR_IN
2082: IFFALSE 2156
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 10 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 10 ) ] ] ;
2084: LD_ADDR_EXP 43
2088: PUSH
2089: LD_EXP 43
2093: PUSH
2094: LD_VAR 0 2
2098: PUSH
2099: LD_INT 1
2101: ARRAY
2102: PPUSH
2103: LD_VAR 0 2
2107: PUSH
2108: LD_INT 3
2110: ARRAY
2111: PPUSH
2112: LD_INT 10
2114: PPUSH
2115: CALL_OW 272
2119: PUSH
2120: LD_VAR 0 2
2124: PUSH
2125: LD_INT 2
2127: ARRAY
2128: PPUSH
2129: LD_VAR 0 2
2133: PUSH
2134: LD_INT 3
2136: ARRAY
2137: PPUSH
2138: LD_INT 10
2140: PPUSH
2141: CALL_OW 273
2145: PUSH
2146: EMPTY
2147: LIST
2148: LIST
2149: PUSH
2150: EMPTY
2151: LIST
2152: ADD
2153: ST_TO_ADDR
2154: GO 2081
2156: POP
2157: POP
// breastworks_def := [ [ [ 88 , 154 , 3 ] , [ 105 , 167 , 4 ] ] , [ [ 27 , 32 , 5 ] , [ 40 , 24 , 4 ] ] , [ [ 78 , 102 , 5 ] , [ 74 , 84 , 3 ] ] , [ [ 128 , 20 , 0 ] , [ 122 , 6 , 1 ] ] , [ [ 185 , 92 , 0 ] , [ 175 , 73 , 1 ] ] , [ [ 219 , 171 , 1 ] , [ 219 , 151 , 2 ] ] ] ;
2158: LD_ADDR_EXP 42
2162: PUSH
2163: LD_INT 88
2165: PUSH
2166: LD_INT 154
2168: PUSH
2169: LD_INT 3
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: LIST
2176: PUSH
2177: LD_INT 105
2179: PUSH
2180: LD_INT 167
2182: PUSH
2183: LD_INT 4
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: LIST
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 27
2197: PUSH
2198: LD_INT 32
2200: PUSH
2201: LD_INT 5
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: LIST
2208: PUSH
2209: LD_INT 40
2211: PUSH
2212: LD_INT 24
2214: PUSH
2215: LD_INT 4
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: LIST
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: PUSH
2227: LD_INT 78
2229: PUSH
2230: LD_INT 102
2232: PUSH
2233: LD_INT 5
2235: PUSH
2236: EMPTY
2237: LIST
2238: LIST
2239: LIST
2240: PUSH
2241: LD_INT 74
2243: PUSH
2244: LD_INT 84
2246: PUSH
2247: LD_INT 3
2249: PUSH
2250: EMPTY
2251: LIST
2252: LIST
2253: LIST
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 128
2261: PUSH
2262: LD_INT 20
2264: PUSH
2265: LD_INT 0
2267: PUSH
2268: EMPTY
2269: LIST
2270: LIST
2271: LIST
2272: PUSH
2273: LD_INT 122
2275: PUSH
2276: LD_INT 6
2278: PUSH
2279: LD_INT 1
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: LIST
2286: PUSH
2287: EMPTY
2288: LIST
2289: LIST
2290: PUSH
2291: LD_INT 185
2293: PUSH
2294: LD_INT 92
2296: PUSH
2297: LD_INT 0
2299: PUSH
2300: EMPTY
2301: LIST
2302: LIST
2303: LIST
2304: PUSH
2305: LD_INT 175
2307: PUSH
2308: LD_INT 73
2310: PUSH
2311: LD_INT 1
2313: PUSH
2314: EMPTY
2315: LIST
2316: LIST
2317: LIST
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PUSH
2323: LD_INT 219
2325: PUSH
2326: LD_INT 171
2328: PUSH
2329: LD_INT 1
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: LIST
2336: PUSH
2337: LD_INT 219
2339: PUSH
2340: LD_INT 151
2342: PUSH
2343: LD_INT 2
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: LIST
2350: PUSH
2351: EMPTY
2352: LIST
2353: LIST
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: LIST
2359: LIST
2360: LIST
2361: LIST
2362: ST_TO_ADDR
// for i = 1 to Side_Positions do
2363: LD_ADDR_VAR 0 2
2367: PUSH
2368: DOUBLE
2369: LD_INT 1
2371: DEC
2372: ST_TO_ADDR
2373: LD_EXP 38
2377: PUSH
2378: FOR_TO
2379: IFFALSE 2509
// begin if not Side_Positions [ i ] then
2381: LD_EXP 38
2385: PUSH
2386: LD_VAR 0 2
2390: ARRAY
2391: NOT
2392: IFFALSE 2396
// continue ;
2394: GO 2378
// if def_extra_oil_deposits then
2396: LD_EXP 6
2400: IFFALSE 2458
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2402: LD_ADDR_VAR 0 3
2406: PUSH
2407: LD_EXP 45
2411: PUSH
2412: LD_EXP 38
2416: PUSH
2417: LD_VAR 0 2
2421: ARRAY
2422: ARRAY
2423: PUSH
2424: FOR_IN
2425: IFFALSE 2454
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2427: LD_VAR 0 3
2431: PUSH
2432: LD_INT 1
2434: ARRAY
2435: PPUSH
2436: LD_VAR 0 3
2440: PUSH
2441: LD_INT 2
2443: ARRAY
2444: PPUSH
2445: LD_INT 2
2447: PPUSH
2448: CALL_OW 62
2452: GO 2424
2454: POP
2455: POP
2456: GO 2507
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2458: LD_EXP 44
2462: PUSH
2463: LD_EXP 38
2467: PUSH
2468: LD_VAR 0 2
2472: ARRAY
2473: ARRAY
2474: PUSH
2475: LD_INT 1
2477: ARRAY
2478: PPUSH
2479: LD_EXP 44
2483: PUSH
2484: LD_EXP 38
2488: PUSH
2489: LD_VAR 0 2
2493: ARRAY
2494: ARRAY
2495: PUSH
2496: LD_INT 2
2498: ARRAY
2499: PPUSH
2500: LD_INT 2
2502: PPUSH
2503: CALL_OW 62
// end ;
2507: GO 2378
2509: POP
2510: POP
// if def_extra_sib_deposits then
2511: LD_EXP 7
2515: IFFALSE 2669
// for i = 1 to Side_Positions do
2517: LD_ADDR_VAR 0 2
2521: PUSH
2522: DOUBLE
2523: LD_INT 1
2525: DEC
2526: ST_TO_ADDR
2527: LD_EXP 38
2531: PUSH
2532: FOR_TO
2533: IFFALSE 2667
// begin if not Side_Positions [ i ] then
2535: LD_EXP 38
2539: PUSH
2540: LD_VAR 0 2
2544: ARRAY
2545: NOT
2546: IFFALSE 2550
// continue ;
2548: GO 2532
// if def_extra_sib_deposits = 2 then
2550: LD_EXP 7
2554: PUSH
2555: LD_INT 2
2557: EQUAL
2558: IFFALSE 2616
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
2560: LD_ADDR_VAR 0 3
2564: PUSH
2565: LD_EXP 47
2569: PUSH
2570: LD_EXP 38
2574: PUSH
2575: LD_VAR 0 2
2579: ARRAY
2580: ARRAY
2581: PUSH
2582: FOR_IN
2583: IFFALSE 2612
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2585: LD_VAR 0 3
2589: PUSH
2590: LD_INT 1
2592: ARRAY
2593: PPUSH
2594: LD_VAR 0 3
2598: PUSH
2599: LD_INT 2
2601: ARRAY
2602: PPUSH
2603: LD_INT 3
2605: PPUSH
2606: CALL_OW 62
2610: GO 2582
2612: POP
2613: POP
2614: GO 2665
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2616: LD_EXP 46
2620: PUSH
2621: LD_EXP 38
2625: PUSH
2626: LD_VAR 0 2
2630: ARRAY
2631: ARRAY
2632: PUSH
2633: LD_INT 1
2635: ARRAY
2636: PPUSH
2637: LD_EXP 46
2641: PUSH
2642: LD_EXP 38
2646: PUSH
2647: LD_VAR 0 2
2651: ARRAY
2652: ARRAY
2653: PUSH
2654: LD_INT 2
2656: ARRAY
2657: PPUSH
2658: LD_INT 3
2660: PPUSH
2661: CALL_OW 62
// end ;
2665: GO 2532
2667: POP
2668: POP
// end ;
2669: LD_VAR 0 1
2673: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2674: LD_INT 0
2676: PPUSH
2677: PPUSH
2678: PPUSH
// if not Team_Game then
2679: LD_EXP 40
2683: NOT
2684: IFFALSE 2782
// begin for i = 1 to 8 do
2686: LD_ADDR_VAR 0 2
2690: PUSH
2691: DOUBLE
2692: LD_INT 1
2694: DEC
2695: ST_TO_ADDR
2696: LD_INT 8
2698: PUSH
2699: FOR_TO
2700: IFFALSE 2778
// for j = 1 to 8 do
2702: LD_ADDR_VAR 0 3
2706: PUSH
2707: DOUBLE
2708: LD_INT 1
2710: DEC
2711: ST_TO_ADDR
2712: LD_INT 8
2714: PUSH
2715: FOR_TO
2716: IFFALSE 2774
// if i <> j then
2718: LD_VAR 0 2
2722: PUSH
2723: LD_VAR 0 3
2727: NONEQUAL
2728: IFFALSE 2752
// SetAttitude ( i , j , att_neutral , true ) else
2730: LD_VAR 0 2
2734: PPUSH
2735: LD_VAR 0 3
2739: PPUSH
2740: LD_INT 0
2742: PPUSH
2743: LD_INT 1
2745: PPUSH
2746: CALL_OW 80
2750: GO 2772
// SetAttitude ( i , j , att_friend , true ) ;
2752: LD_VAR 0 2
2756: PPUSH
2757: LD_VAR 0 3
2761: PPUSH
2762: LD_INT 1
2764: PPUSH
2765: LD_INT 1
2767: PPUSH
2768: CALL_OW 80
2772: GO 2715
2774: POP
2775: POP
2776: GO 2699
2778: POP
2779: POP
// end else
2780: GO 2957
// begin if def_shared_vision then
2782: LD_EXP 8
2786: IFFALSE 2851
// begin for i in Teams do
2788: LD_ADDR_VAR 0 2
2792: PUSH
2793: LD_EXP 36
2797: PUSH
2798: FOR_IN
2799: IFFALSE 2849
// for j = 2 to i do
2801: LD_ADDR_VAR 0 3
2805: PUSH
2806: DOUBLE
2807: LD_INT 2
2809: DEC
2810: ST_TO_ADDR
2811: LD_VAR 0 2
2815: PUSH
2816: FOR_TO
2817: IFFALSE 2845
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2819: LD_VAR 0 2
2823: PUSH
2824: LD_VAR 0 3
2828: ARRAY
2829: PPUSH
2830: LD_VAR 0 2
2834: PUSH
2835: LD_INT 1
2837: ARRAY
2838: PPUSH
2839: CALL_OW 343
2843: GO 2816
2845: POP
2846: POP
2847: GO 2798
2849: POP
2850: POP
// end ; for i = 1 to 8 do
2851: LD_ADDR_VAR 0 2
2855: PUSH
2856: DOUBLE
2857: LD_INT 1
2859: DEC
2860: ST_TO_ADDR
2861: LD_INT 8
2863: PUSH
2864: FOR_TO
2865: IFFALSE 2955
// for j = 1 to 8 do
2867: LD_ADDR_VAR 0 3
2871: PUSH
2872: DOUBLE
2873: LD_INT 1
2875: DEC
2876: ST_TO_ADDR
2877: LD_INT 8
2879: PUSH
2880: FOR_TO
2881: IFFALSE 2951
// if Side_Teams [ i ] = Side_Teams [ j ] then
2883: LD_EXP 35
2887: PUSH
2888: LD_VAR 0 2
2892: ARRAY
2893: PUSH
2894: LD_EXP 35
2898: PUSH
2899: LD_VAR 0 3
2903: ARRAY
2904: EQUAL
2905: IFFALSE 2929
// SetAttitude ( i , j , att_friend , true ) else
2907: LD_VAR 0 2
2911: PPUSH
2912: LD_VAR 0 3
2916: PPUSH
2917: LD_INT 1
2919: PPUSH
2920: LD_INT 1
2922: PPUSH
2923: CALL_OW 80
2927: GO 2949
// SetAttitude ( i , j , att_enemy , true ) ;
2929: LD_VAR 0 2
2933: PPUSH
2934: LD_VAR 0 3
2938: PPUSH
2939: LD_INT 2
2941: PPUSH
2942: LD_INT 1
2944: PPUSH
2945: CALL_OW 80
2949: GO 2880
2951: POP
2952: POP
2953: GO 2864
2955: POP
2956: POP
// end ; end ;
2957: LD_VAR 0 1
2961: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2962: LD_INT 0
2964: PPUSH
2965: PPUSH
2966: PPUSH
2967: PPUSH
// result := [ ] ;
2968: LD_ADDR_VAR 0 7
2972: PUSH
2973: EMPTY
2974: ST_TO_ADDR
// for i := 1 to count do
2975: LD_ADDR_VAR 0 8
2979: PUSH
2980: DOUBLE
2981: LD_INT 1
2983: DEC
2984: ST_TO_ADDR
2985: LD_VAR 0 1
2989: PUSH
2990: FOR_TO
2991: IFFALSE 3441
// begin uc_direction := Rand ( 0 , 5 ) ;
2993: LD_ADDR_OWVAR 24
2997: PUSH
2998: LD_INT 0
3000: PPUSH
3001: LD_INT 5
3003: PPUSH
3004: CALL_OW 12
3008: ST_TO_ADDR
// if commander then
3009: LD_LOC 1
3013: IFFALSE 3154
// begin hc_name := mp_sides_players_names [ uc_side ] ;
3015: LD_ADDR_OWVAR 26
3019: PUSH
3020: LD_OWVAR 19
3024: PUSH
3025: LD_OWVAR 20
3029: ARRAY
3030: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3031: LD_INT 1
3033: PPUSH
3034: LD_INT 2
3036: PPUSH
3037: CALL_OW 12
3041: PPUSH
3042: LD_VAR 0 2
3046: PPUSH
3047: LD_EXP 25
3051: PUSH
3052: LD_INT 2
3054: PLUS
3055: PPUSH
3056: CALL_OW 380
// hc_importance := 105 ;
3060: LD_ADDR_OWVAR 32
3064: PUSH
3065: LD_INT 105
3067: ST_TO_ADDR
// commander := false ;
3068: LD_ADDR_LOC 1
3072: PUSH
3073: LD_INT 0
3075: ST_TO_ADDR
// if Multiplayer then
3076: LD_OWVAR 4
3080: IFFALSE 3152
// begin if sheik then
3082: LD_EXP 51
3086: IFFALSE 3114
// begin hc_gallery :=  ;
3088: LD_ADDR_OWVAR 33
3092: PUSH
3093: LD_STRING 
3095: ST_TO_ADDR
// hc_class := class_desert_warior ;
3096: LD_ADDR_OWVAR 28
3100: PUSH
3101: LD_INT 11
3103: ST_TO_ADDR
// hc_sex := sex_male ;
3104: LD_ADDR_OWVAR 27
3108: PUSH
3109: LD_INT 1
3111: ST_TO_ADDR
// end else
3112: GO 3152
// begin hc_gallery := MULTIAVATARS ;
3114: LD_ADDR_OWVAR 33
3118: PUSH
3119: LD_STRING MULTIAVATARS
3121: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3122: LD_ADDR_OWVAR 34
3126: PUSH
3127: LD_OWVAR 20
3131: PPUSH
3132: CALL_OW 525
3136: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3137: LD_ADDR_OWVAR 27
3141: PUSH
3142: LD_OWVAR 20
3146: PPUSH
3147: CALL_OW 526
3151: ST_TO_ADDR
// end ; end ; end else
3152: GO 3217
// begin hc_name :=  ;
3154: LD_ADDR_OWVAR 26
3158: PUSH
3159: LD_STRING 
3161: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3162: LD_INT 1
3164: PPUSH
3165: LD_INT 2
3167: PPUSH
3168: CALL_OW 12
3172: PPUSH
3173: LD_VAR 0 2
3177: PPUSH
3178: LD_EXP 25
3182: PPUSH
3183: CALL_OW 380
// hc_importance := 0 ;
3187: LD_ADDR_OWVAR 32
3191: PUSH
3192: LD_INT 0
3194: ST_TO_ADDR
// if Multiplayer then
3195: LD_OWVAR 4
3199: IFFALSE 3217
// begin hc_gallery :=  ;
3201: LD_ADDR_OWVAR 33
3205: PUSH
3206: LD_STRING 
3208: ST_TO_ADDR
// hc_face_number := 0 ;
3209: LD_ADDR_OWVAR 34
3213: PUSH
3214: LD_INT 0
3216: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3217: LD_ADDR_VAR 0 10
3221: PUSH
3222: CALL_OW 44
3226: ST_TO_ADDR
// if global_defined then
3227: LD_LOC 3
3231: IFFALSE 3371
// begin if ( cl = class_soldier ) then
3233: LD_VAR 0 2
3237: PUSH
3238: LD_INT 1
3240: EQUAL
3241: IFFALSE 3261
// j := i + soldiers_created else
3243: LD_ADDR_VAR 0 9
3247: PUSH
3248: LD_VAR 0 8
3252: PUSH
3253: LD_LOC 4
3257: PLUS
3258: ST_TO_ADDR
3259: GO 3271
// j := i ;
3261: LD_ADDR_VAR 0 9
3265: PUSH
3266: LD_VAR 0 8
3270: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3271: LD_LOC 2
3275: PUSH
3276: LD_VAR 0 2
3280: ARRAY
3281: PUSH
3282: LD_VAR 0 9
3286: ARRAY
3287: PPUSH
3288: LD_VAR 0 10
3292: PPUSH
3293: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3297: LD_VAR 0 10
3301: PPUSH
3302: LD_INT 2
3304: PPUSH
3305: LD_LOC 2
3309: PUSH
3310: LD_VAR 0 2
3314: ARRAY
3315: PUSH
3316: LD_VAR 0 9
3320: ARRAY
3321: PPUSH
3322: LD_INT 2
3324: PPUSH
3325: CALL_OW 260
3329: PPUSH
3330: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3334: LD_VAR 0 10
3338: PPUSH
3339: LD_INT 1
3341: PPUSH
3342: LD_LOC 2
3346: PUSH
3347: LD_VAR 0 2
3351: ARRAY
3352: PUSH
3353: LD_VAR 0 9
3357: ARRAY
3358: PPUSH
3359: LD_INT 1
3361: PPUSH
3362: CALL_OW 260
3366: PPUSH
3367: CALL_OW 239
// end ; if building then
3371: LD_VAR 0 6
3375: IFFALSE 3393
// PlaceHumanInUnit ( un , building ) else
3377: LD_VAR 0 10
3381: PPUSH
3382: LD_VAR 0 6
3386: PPUSH
3387: CALL_OW 52
3391: GO 3420
// PlaceUnitXYR ( un , x , y , r , false ) ;
3393: LD_VAR 0 10
3397: PPUSH
3398: LD_VAR 0 3
3402: PPUSH
3403: LD_VAR 0 4
3407: PPUSH
3408: LD_VAR 0 5
3412: PPUSH
3413: LD_INT 0
3415: PPUSH
3416: CALL_OW 50
// result := result ^ [ un ] ;
3420: LD_ADDR_VAR 0 7
3424: PUSH
3425: LD_VAR 0 7
3429: PUSH
3430: LD_VAR 0 10
3434: PUSH
3435: EMPTY
3436: LIST
3437: ADD
3438: ST_TO_ADDR
// end ;
3439: GO 2990
3441: POP
3442: POP
// if not global_defined then
3443: LD_LOC 3
3447: NOT
3448: IFFALSE 3526
// if ( global_units >= cl ) then
3450: LD_LOC 2
3454: PUSH
3455: LD_VAR 0 2
3459: GREATEREQUAL
3460: IFFALSE 3501
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3462: LD_ADDR_LOC 2
3466: PUSH
3467: LD_LOC 2
3471: PPUSH
3472: LD_VAR 0 2
3476: PPUSH
3477: LD_LOC 2
3481: PUSH
3482: LD_VAR 0 2
3486: ARRAY
3487: PUSH
3488: LD_VAR 0 7
3492: ADD
3493: PPUSH
3494: CALL_OW 1
3498: ST_TO_ADDR
3499: GO 3526
// global_units := Replace ( global_units , cl , result ) ;
3501: LD_ADDR_LOC 2
3505: PUSH
3506: LD_LOC 2
3510: PPUSH
3511: LD_VAR 0 2
3515: PPUSH
3516: LD_VAR 0 7
3520: PPUSH
3521: CALL_OW 1
3525: ST_TO_ADDR
// end ;
3526: LD_VAR 0 7
3530: RET
// function prepare_mastodonts ( n ) ; var i ; begin
3531: LD_INT 0
3533: PPUSH
3534: PPUSH
// uc_side := 0 ;
3535: LD_ADDR_OWVAR 20
3539: PUSH
3540: LD_INT 0
3542: ST_TO_ADDR
// uc_nation := 0 ;
3543: LD_ADDR_OWVAR 21
3547: PUSH
3548: LD_INT 0
3550: ST_TO_ADDR
// vc_chassis := 31 ;
3551: LD_ADDR_OWVAR 37
3555: PUSH
3556: LD_INT 31
3558: ST_TO_ADDR
// vc_control := control_rider ;
3559: LD_ADDR_OWVAR 38
3563: PUSH
3564: LD_INT 4
3566: ST_TO_ADDR
// for i = 1 to n do
3567: LD_ADDR_VAR 0 3
3571: PUSH
3572: DOUBLE
3573: LD_INT 1
3575: DEC
3576: ST_TO_ADDR
3577: LD_VAR 0 1
3581: PUSH
3582: FOR_TO
3583: IFFALSE 3602
// PlaceUnitArea ( CreateVehicle , MastodontSpawn , false ) ;
3585: CALL_OW 45
3589: PPUSH
3590: LD_INT 15
3592: PPUSH
3593: LD_INT 0
3595: PPUSH
3596: CALL_OW 49
3600: GO 3582
3602: POP
3603: POP
// end ;
3604: LD_VAR 0 2
3608: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3609: LD_INT 0
3611: PPUSH
3612: PPUSH
3613: PPUSH
3614: PPUSH
3615: PPUSH
3616: PPUSH
3617: PPUSH
3618: PPUSH
3619: PPUSH
// if side in [ 0 , 9 ] then
3620: LD_VAR 0 1
3624: PUSH
3625: LD_INT 0
3627: PUSH
3628: LD_INT 9
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: IN
3635: IFFALSE 3639
// exit ;
3637: GO 4656
// pos := Side_Positions [ side ] ;
3639: LD_ADDR_VAR 0 3
3643: PUSH
3644: LD_EXP 38
3648: PUSH
3649: LD_VAR 0 1
3653: ARRAY
3654: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3655: LD_ADDR_OWVAR 21
3659: PUSH
3660: LD_EXP 39
3664: PUSH
3665: LD_VAR 0 1
3669: ARRAY
3670: ST_TO_ADDR
// uc_side := side ;
3671: LD_ADDR_OWVAR 20
3675: PUSH
3676: LD_VAR 0 1
3680: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3681: LD_ADDR_VAR 0 4
3685: PUSH
3686: LD_EXP 41
3690: PUSH
3691: LD_VAR 0 3
3695: ARRAY
3696: PUSH
3697: LD_INT 1
3699: ARRAY
3700: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3701: LD_ADDR_VAR 0 5
3705: PUSH
3706: LD_EXP 41
3710: PUSH
3711: LD_VAR 0 3
3715: ARRAY
3716: PUSH
3717: LD_INT 2
3719: ARRAY
3720: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3721: LD_ADDR_VAR 0 6
3725: PUSH
3726: LD_EXP 41
3730: PUSH
3731: LD_VAR 0 3
3735: ARRAY
3736: PUSH
3737: LD_INT 3
3739: ARRAY
3740: ST_TO_ADDR
// if is_depot then
3741: LD_EXP 22
3745: IFFALSE 3878
// begin bc_type = b_depot ;
3747: LD_ADDR_OWVAR 42
3751: PUSH
3752: LD_INT 0
3754: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3755: LD_ADDR_VAR 0 10
3759: PUSH
3760: LD_VAR 0 4
3764: PPUSH
3765: LD_VAR 0 5
3769: PPUSH
3770: LD_VAR 0 6
3774: PPUSH
3775: CALL_OW 47
3779: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3780: LD_VAR 0 10
3784: PPUSH
3785: LD_STRING @
3787: PUSH
3788: LD_VAR 0 1
3792: STR
3793: PPUSH
3794: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3798: LD_VAR 0 10
3802: PPUSH
3803: CALL_OW 274
3807: PPUSH
3808: LD_INT 1
3810: PPUSH
3811: LD_EXP 27
3815: PUSH
3816: LD_INT 1
3818: ARRAY
3819: PPUSH
3820: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3824: LD_VAR 0 10
3828: PPUSH
3829: CALL_OW 274
3833: PPUSH
3834: LD_INT 2
3836: PPUSH
3837: LD_EXP 27
3841: PUSH
3842: LD_INT 2
3844: ARRAY
3845: PPUSH
3846: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3850: LD_VAR 0 10
3854: PPUSH
3855: CALL_OW 274
3859: PPUSH
3860: LD_INT 3
3862: PPUSH
3863: LD_EXP 27
3867: PUSH
3868: LD_INT 3
3870: ARRAY
3871: PPUSH
3872: CALL_OW 277
// end else
3876: GO 4022
// begin for i := 1 to 3 do
3878: LD_ADDR_VAR 0 7
3882: PUSH
3883: DOUBLE
3884: LD_INT 1
3886: DEC
3887: ST_TO_ADDR
3888: LD_INT 3
3890: PUSH
3891: FOR_TO
3892: IFFALSE 4020
// begin r := starting_resources [ i ] ;
3894: LD_ADDR_VAR 0 8
3898: PUSH
3899: LD_EXP 27
3903: PUSH
3904: LD_VAR 0 7
3908: ARRAY
3909: ST_TO_ADDR
// while r >= 10 do
3910: LD_VAR 0 8
3914: PUSH
3915: LD_INT 10
3917: GREATEREQUAL
3918: IFFALSE 4018
// if r > 50 then
3920: LD_VAR 0 8
3924: PUSH
3925: LD_INT 50
3927: GREATER
3928: IFFALSE 3974
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3930: LD_VAR 0 7
3934: PPUSH
3935: LD_INT 5
3937: PPUSH
3938: LD_VAR 0 4
3942: PPUSH
3943: LD_VAR 0 5
3947: PPUSH
3948: LD_INT 4
3950: PPUSH
3951: LD_INT 0
3953: PPUSH
3954: CALL_OW 60
// r := r - 50 ;
3958: LD_ADDR_VAR 0 8
3962: PUSH
3963: LD_VAR 0 8
3967: PUSH
3968: LD_INT 50
3970: MINUS
3971: ST_TO_ADDR
// end else
3972: GO 4016
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3974: LD_VAR 0 7
3978: PPUSH
3979: LD_VAR 0 8
3983: PUSH
3984: LD_INT 10
3986: DIV
3987: PPUSH
3988: LD_VAR 0 4
3992: PPUSH
3993: LD_VAR 0 5
3997: PPUSH
3998: LD_INT 4
4000: PPUSH
4001: LD_INT 0
4003: PPUSH
4004: CALL_OW 60
// r := 0 ;
4008: LD_ADDR_VAR 0 8
4012: PUSH
4013: LD_INT 0
4015: ST_TO_ADDR
// end ;
4016: GO 3910
// end ;
4018: GO 3891
4020: POP
4021: POP
// end ; for r in starting_crates do
4022: LD_ADDR_VAR 0 8
4026: PUSH
4027: LD_EXP 26
4031: PUSH
4032: FOR_IN
4033: IFFALSE 4065
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
4035: LD_INT 1
4037: PPUSH
4038: LD_INT 5
4040: PPUSH
4041: LD_VAR 0 4
4045: PPUSH
4046: LD_VAR 0 5
4050: PPUSH
4051: LD_VAR 0 8
4055: PPUSH
4056: LD_INT 0
4058: PPUSH
4059: CALL_OW 60
4063: GO 4032
4065: POP
4066: POP
// if def_morale_flags then
4067: LD_EXP 9
4071: IFFALSE 4210
// begin x := start_def [ pos ] [ 1 ] ;
4073: LD_ADDR_VAR 0 4
4077: PUSH
4078: LD_EXP 43
4082: PUSH
4083: LD_VAR 0 3
4087: ARRAY
4088: PUSH
4089: LD_INT 1
4091: ARRAY
4092: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4093: LD_ADDR_VAR 0 5
4097: PUSH
4098: LD_EXP 43
4102: PUSH
4103: LD_VAR 0 3
4107: ARRAY
4108: PUSH
4109: LD_INT 2
4111: ARRAY
4112: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4113: LD_VAR 0 4
4117: PPUSH
4118: LD_VAR 0 5
4122: PPUSH
4123: LD_INT 12
4125: PPUSH
4126: LD_INT 2
4128: PPUSH
4129: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4133: LD_ADDR_EXP 48
4137: PUSH
4138: LD_EXP 48
4142: PUSH
4143: LD_VAR 0 1
4147: PPUSH
4148: LD_VAR 0 4
4152: PPUSH
4153: LD_VAR 0 5
4157: PPUSH
4158: LD_INT 1
4160: PUSH
4161: LD_INT 100
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: PUSH
4168: LD_INT 2
4170: PUSH
4171: LD_INT 50
4173: PUSH
4174: EMPTY
4175: LIST
4176: LIST
4177: PUSH
4178: LD_INT 3
4180: PUSH
4181: LD_INT 20
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 20
4190: PUSH
4191: LD_INT 100
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: EMPTY
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: PPUSH
4204: CALL_OW 418
4208: ADD
4209: ST_TO_ADDR
// end ; commander := true ;
4210: LD_ADDR_LOC 1
4214: PUSH
4215: LD_INT 1
4217: ST_TO_ADDR
// soldiers_created := 0 ;
4218: LD_ADDR_LOC 4
4222: PUSH
4223: LD_INT 0
4225: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4226: LD_ADDR_VAR 0 7
4230: PUSH
4231: DOUBLE
4232: LD_INT 1
4234: DEC
4235: ST_TO_ADDR
4236: LD_EXP 23
4240: PUSH
4241: FOR_TO
4242: IFFALSE 4395
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4244: LD_ADDR_VAR 0 4
4248: PUSH
4249: LD_EXP 42
4253: PUSH
4254: LD_VAR 0 3
4258: ARRAY
4259: PUSH
4260: LD_VAR 0 7
4264: ARRAY
4265: PUSH
4266: LD_INT 1
4268: ARRAY
4269: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4270: LD_ADDR_VAR 0 5
4274: PUSH
4275: LD_EXP 42
4279: PUSH
4280: LD_VAR 0 3
4284: ARRAY
4285: PUSH
4286: LD_VAR 0 7
4290: ARRAY
4291: PUSH
4292: LD_INT 2
4294: ARRAY
4295: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4296: LD_ADDR_VAR 0 6
4300: PUSH
4301: LD_EXP 42
4305: PUSH
4306: LD_VAR 0 3
4310: ARRAY
4311: PUSH
4312: LD_VAR 0 7
4316: ARRAY
4317: PUSH
4318: LD_INT 3
4320: ARRAY
4321: ST_TO_ADDR
// bc_type := b_breastwork ;
4322: LD_ADDR_OWVAR 42
4326: PUSH
4327: LD_INT 31
4329: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4330: LD_ADDR_VAR 0 9
4334: PUSH
4335: LD_VAR 0 4
4339: PPUSH
4340: LD_VAR 0 5
4344: PPUSH
4345: LD_VAR 0 6
4349: PPUSH
4350: CALL_OW 47
4354: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4355: LD_INT 1
4357: PPUSH
4358: LD_INT 1
4360: PPUSH
4361: LD_INT 0
4363: PPUSH
4364: LD_INT 0
4366: PPUSH
4367: LD_INT 0
4369: PPUSH
4370: LD_VAR 0 9
4374: PPUSH
4375: CALL 2962 0 6
// soldiers_created := soldiers_created + 1 ;
4379: LD_ADDR_LOC 4
4383: PUSH
4384: LD_LOC 4
4388: PUSH
4389: LD_INT 1
4391: PLUS
4392: ST_TO_ADDR
// end ;
4393: GO 4241
4395: POP
4396: POP
// x := start_def [ pos ] [ 1 ] ;
4397: LD_ADDR_VAR 0 4
4401: PUSH
4402: LD_EXP 43
4406: PUSH
4407: LD_VAR 0 3
4411: ARRAY
4412: PUSH
4413: LD_INT 1
4415: ARRAY
4416: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4417: LD_ADDR_VAR 0 5
4421: PUSH
4422: LD_EXP 43
4426: PUSH
4427: LD_VAR 0 3
4431: ARRAY
4432: PUSH
4433: LD_INT 2
4435: ARRAY
4436: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4437: LD_LOC 8
4441: PUSH
4442: LD_EXP 23
4446: MINUS
4447: PPUSH
4448: LD_INT 1
4450: PPUSH
4451: LD_VAR 0 4
4455: PPUSH
4456: LD_VAR 0 5
4460: PPUSH
4461: LD_INT 5
4463: PPUSH
4464: LD_INT 0
4466: PPUSH
4467: CALL 2962 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4471: LD_LOC 5
4475: PPUSH
4476: LD_INT 2
4478: PPUSH
4479: LD_VAR 0 4
4483: PPUSH
4484: LD_VAR 0 5
4488: PPUSH
4489: LD_INT 5
4491: PPUSH
4492: LD_INT 0
4494: PPUSH
4495: CALL 2962 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4499: LD_LOC 7
4503: PPUSH
4504: LD_INT 3
4506: PPUSH
4507: LD_VAR 0 4
4511: PPUSH
4512: LD_VAR 0 5
4516: PPUSH
4517: LD_INT 5
4519: PPUSH
4520: LD_INT 0
4522: PPUSH
4523: CALL 2962 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4527: LD_LOC 6
4531: PPUSH
4532: LD_INT 4
4534: PPUSH
4535: LD_VAR 0 4
4539: PPUSH
4540: LD_VAR 0 5
4544: PPUSH
4545: LD_INT 5
4547: PPUSH
4548: LD_INT 0
4550: PPUSH
4551: CALL 2962 0 6
// if def_siberite_detection then
4555: LD_EXP 10
4559: IFFALSE 4576
// SetTech ( tech_SibDet , side , state_researched ) ;
4561: LD_INT 20
4563: PPUSH
4564: LD_VAR 0 1
4568: PPUSH
4569: LD_INT 2
4571: PPUSH
4572: CALL_OW 322
// if def_siberite_bomb = 1 then
4576: LD_EXP 15
4580: PUSH
4581: LD_INT 1
4583: EQUAL
4584: IFFALSE 4618
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4586: LD_INT 25
4588: PPUSH
4589: LD_VAR 0 1
4593: PPUSH
4594: LD_INT 1
4596: PPUSH
4597: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4601: LD_INT 73
4603: PPUSH
4604: LD_VAR 0 1
4608: PPUSH
4609: LD_INT 1
4611: PPUSH
4612: CALL_OW 322
// end else
4616: GO 4648
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4618: LD_INT 25
4620: PPUSH
4621: LD_VAR 0 1
4625: PPUSH
4626: LD_INT 0
4628: PPUSH
4629: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4633: LD_INT 73
4635: PPUSH
4636: LD_VAR 0 1
4640: PPUSH
4641: LD_INT 0
4643: PPUSH
4644: CALL_OW 322
// end ; global_defined := true ;
4648: LD_ADDR_LOC 3
4652: PUSH
4653: LD_INT 1
4655: ST_TO_ADDR
// end ;
4656: LD_VAR 0 2
4660: RET
// every 0 0$1 do
4661: GO 4663
4663: DISABLE
// if ( def_siberite_bomb > 1 ) then
4664: LD_EXP 15
4668: PUSH
4669: LD_INT 1
4671: GREATER
4672: IFFALSE 4687
// begin wait ( siberite_bomb_Delay ) ;
4674: LD_EXP 34
4678: PPUSH
4679: CALL_OW 67
// EnableSibFiss ;
4683: CALL 4688 0 0
// end ;
4687: END
// function EnableSibFiss ; var i ; begin
4688: LD_INT 0
4690: PPUSH
4691: PPUSH
// for i := 1 to 8 do
4692: LD_ADDR_VAR 0 2
4696: PUSH
4697: DOUBLE
4698: LD_INT 1
4700: DEC
4701: ST_TO_ADDR
4702: LD_INT 8
4704: PUSH
4705: FOR_TO
4706: IFFALSE 4752
// if Side_Positions [ i ] then
4708: LD_EXP 38
4712: PUSH
4713: LD_VAR 0 2
4717: ARRAY
4718: IFFALSE 4750
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4720: LD_INT 25
4722: PPUSH
4723: LD_VAR 0 2
4727: PPUSH
4728: LD_INT 1
4730: PPUSH
4731: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4735: LD_INT 73
4737: PPUSH
4738: LD_VAR 0 2
4742: PPUSH
4743: LD_INT 1
4745: PPUSH
4746: CALL_OW 322
// end ;
4750: GO 4705
4752: POP
4753: POP
// end ;
4754: LD_VAR 0 1
4758: RET
// function prepare_sides ; var i ; begin
4759: LD_INT 0
4761: PPUSH
4762: PPUSH
// global_units := [ ] ;
4763: LD_ADDR_LOC 2
4767: PUSH
4768: EMPTY
4769: ST_TO_ADDR
// global_defined := false ;
4770: LD_ADDR_LOC 3
4774: PUSH
4775: LD_INT 0
4777: ST_TO_ADDR
// CountClassMembers ;
4778: CALL 4857 0 0
// for i := 1 to 8 do
4782: LD_ADDR_VAR 0 2
4786: PUSH
4787: DOUBLE
4788: LD_INT 1
4790: DEC
4791: ST_TO_ADDR
4792: LD_INT 8
4794: PUSH
4795: FOR_TO
4796: IFFALSE 4850
// if Side_Positions [ i ] then
4798: LD_EXP 38
4802: PUSH
4803: LD_VAR 0 2
4807: ARRAY
4808: IFFALSE 4848
// begin prepare_side ( i ) ;
4810: LD_VAR 0 2
4814: PPUSH
4815: CALL 3609 0 1
// if ( Game_Type = 12 ) and mastodont > 0 then
4819: LD_EXP 21
4823: PUSH
4824: LD_INT 12
4826: EQUAL
4827: PUSH
4828: LD_EXP 52
4832: PUSH
4833: LD_INT 0
4835: GREATER
4836: AND
4837: IFFALSE 4848
// prepare_mastodonts ( mastodont ) ;
4839: LD_EXP 52
4843: PPUSH
4844: CALL 3531 0 1
// end ;
4848: GO 4795
4850: POP
4851: POP
// end ;
4852: LD_VAR 0 1
4856: RET
// function CountClassMembers ; var Mode ; begin
4857: LD_INT 0
4859: PPUSH
4860: PPUSH
// if No_Mechs then
4861: LD_EXP 20
4865: IFFALSE 4877
// Mode := 2 else
4867: LD_ADDR_VAR 0 2
4871: PUSH
4872: LD_INT 2
4874: ST_TO_ADDR
4875: GO 4885
// Mode := 1 ;
4877: LD_ADDR_VAR 0 2
4881: PUSH
4882: LD_INT 1
4884: ST_TO_ADDR
// neng := number_of_people ;
4885: LD_ADDR_LOC 5
4889: PUSH
4890: LD_EXP 24
4894: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4895: LD_ADDR_LOC 8
4899: PUSH
4900: LD_LOC 5
4904: PUSH
4905: LD_INT 4
4907: PUSH
4908: LD_INT 3
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PUSH
4915: LD_VAR 0 2
4919: ARRAY
4920: DIV
4921: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4922: LD_LOC 8
4926: PUSH
4927: LD_EXP 23
4931: LESS
4932: IFFALSE 4944
// nsol := number_of_breastworks ;
4934: LD_ADDR_LOC 8
4938: PUSH
4939: LD_EXP 23
4943: ST_TO_ADDR
// neng := neng - nsol ;
4944: LD_ADDR_LOC 5
4948: PUSH
4949: LD_LOC 5
4953: PUSH
4954: LD_LOC 8
4958: MINUS
4959: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4960: LD_ADDR_LOC 6
4964: PUSH
4965: LD_LOC 5
4969: PUSH
4970: LD_INT 3
4972: PUSH
4973: LD_INT 2
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: PUSH
4980: LD_VAR 0 2
4984: ARRAY
4985: DIV
4986: ST_TO_ADDR
// if ( nsci < 1 ) then
4987: LD_LOC 6
4991: PUSH
4992: LD_INT 1
4994: LESS
4995: IFFALSE 5005
// nsci := 1 ;
4997: LD_ADDR_LOC 6
5001: PUSH
5002: LD_INT 1
5004: ST_TO_ADDR
// neng := neng - nsci ;
5005: LD_ADDR_LOC 5
5009: PUSH
5010: LD_LOC 5
5014: PUSH
5015: LD_LOC 6
5019: MINUS
5020: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5021: LD_ADDR_LOC 7
5025: PUSH
5026: LD_LOC 5
5030: PUSH
5031: LD_INT 2
5033: DIV
5034: PUSH
5035: LD_INT 0
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: PUSH
5042: LD_VAR 0 2
5046: ARRAY
5047: ST_TO_ADDR
// neng := neng - nmech ;
5048: LD_ADDR_LOC 5
5052: PUSH
5053: LD_LOC 5
5057: PUSH
5058: LD_LOC 7
5062: MINUS
5063: ST_TO_ADDR
// if ( neng < 1 ) then
5064: LD_LOC 5
5068: PUSH
5069: LD_INT 1
5071: LESS
5072: IFFALSE 5082
// neng := 1 ;
5074: LD_ADDR_LOC 5
5078: PUSH
5079: LD_INT 1
5081: ST_TO_ADDR
// end ;
5082: LD_VAR 0 1
5086: RET
// function Init_Win_Condition ; begin
5087: LD_INT 0
5089: PPUSH
// if Team_Game then
5090: LD_EXP 40
5094: IFFALSE 5101
// enable ( 98 ) else
5096: LD_INT 98
5098: ENABLE_MARKED
5099: GO 5104
// enable ( 99 ) ;
5101: LD_INT 99
5103: ENABLE_MARKED
// case Game_Type of 3 :
5104: LD_EXP 21
5108: PUSH
5109: LD_INT 3
5111: DOUBLE
5112: EQUAL
5113: IFTRUE 5117
5115: GO 5123
5117: POP
// enable ( 100 ) ; end ;
5118: LD_INT 100
5120: ENABLE_MARKED
5121: GO 5124
5123: POP
// end ;
5124: LD_VAR 0 1
5128: RET
// starting begin disable ( 98 ) ;
5129: LD_INT 98
5131: DISABLE_MARKED
// disable ( 99 ) ;
5132: LD_INT 99
5134: DISABLE_MARKED
// disable ( 100 ) ;
5135: LD_INT 100
5137: DISABLE_MARKED
// disable ( 200 ) ;
5138: LD_INT 200
5140: DISABLE_MARKED
// disable ( 400 ) ;
5141: LD_INT 400
5143: DISABLE_MARKED
// disable ( 401 ) ;
5144: LD_INT 401
5146: DISABLE_MARKED
// mp_selectmsg := true ;
5147: LD_ADDR_OWVAR 13
5151: PUSH
5152: LD_INT 1
5154: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5155: CALL 0 0 0
// init_map ;
5159: CALL 1509 0 0
// init_respawning ;
5163: CALL 14028 0 0
// set_shared_visions_and_alliances ;
5167: CALL 2674 0 0
// prepare_sides ;
5171: CALL 4759 0 0
// ShowTimer ;
5175: CALL 8904 0 0
// if ( Game_Type = 4 ) then
5179: LD_EXP 21
5183: PUSH
5184: LD_INT 4
5186: EQUAL
5187: IFFALSE 5193
// InitBloodGods ;
5189: CALL 8669 0 0
// music_nat := Side_Nations [ your_side ] ;
5193: LD_ADDR_OWVAR 71
5197: PUSH
5198: LD_EXP 39
5202: PUSH
5203: LD_OWVAR 2
5207: ARRAY
5208: ST_TO_ADDR
// if IAmSpec then
5209: CALL_OW 531
5213: IFFALSE 5249
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
5215: LD_INT 0
5217: PPUSH
5218: LD_INT 0
5220: PPUSH
5221: LD_OWVAR 2
5225: PPUSH
5226: LD_INT 32767
5228: NEG
5229: PPUSH
5230: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
5234: LD_INT 104
5236: PPUSH
5237: LD_INT 69
5239: PPUSH
5240: CALL_OW 86
// enable ( 400 ) ;
5244: LD_INT 400
5246: ENABLE_MARKED
// end else
5247: GO 5303
// begin ResetFog ;
5249: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5253: LD_EXP 43
5257: PUSH
5258: LD_EXP 38
5262: PUSH
5263: LD_OWVAR 2
5267: ARRAY
5268: ARRAY
5269: PUSH
5270: LD_INT 1
5272: ARRAY
5273: PPUSH
5274: LD_EXP 43
5278: PUSH
5279: LD_EXP 38
5283: PUSH
5284: LD_OWVAR 2
5288: ARRAY
5289: ARRAY
5290: PUSH
5291: LD_INT 2
5293: ARRAY
5294: PPUSH
5295: CALL_OW 86
// Init_Win_Condition ;
5299: CALL 5087 0 0
// end ; AnimateTrees ( true ) ;
5303: LD_INT 1
5305: PPUSH
5306: CALL_OW 573
// InitApeman ;
5310: CALL 6009 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
5314: LD_ADDR_EXP 62
5318: PUSH
5319: LD_INT 9
5321: PUSH
5322: LD_INT 10
5324: PUSH
5325: LD_INT 11
5327: PUSH
5328: LD_INT 12
5330: PUSH
5331: LD_INT 13
5333: PUSH
5334: LD_INT 14
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: LIST
5341: LIST
5342: LIST
5343: LIST
5344: ST_TO_ADDR
// BeginBuildUp ;
5345: CALL 14522 0 0
// end ; end_of_file
5349: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5350: GO 5352
5352: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5353: LD_INT 4
5355: PPUSH
5356: LD_INT 5
5358: PPUSH
5359: CALL_OW 12
5363: PPUSH
5364: LD_INT 1
5366: PPUSH
5367: CALL_OW 57
// enable ;
5371: ENABLE
// end ;
5372: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5373: GO 5375
5375: DISABLE
5376: LD_INT 0
5378: PPUSH
5379: PPUSH
// begin case tick of 1 .. 1 1$0 :
5380: LD_OWVAR 1
5384: PUSH
5385: LD_INT 1
5387: DOUBLE
5388: GREATEREQUAL
5389: IFFALSE 5397
5391: LD_INT 2100
5393: DOUBLE
5394: LESSEQUAL
5395: IFTRUE 5399
5397: GO 5427
5399: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5400: LD_EXP 28
5404: PUSH
5405: LD_INT 100
5407: DIVREAL
5408: PUSH
5409: LD_INT 525
5411: PPUSH
5412: LD_INT 1050
5414: PPUSH
5415: CALL_OW 12
5419: MUL
5420: PPUSH
5421: CALL_OW 67
5425: GO 5729
5427: LD_INT 2100
5429: PUSH
5430: LD_INT 1
5432: PLUS
5433: DOUBLE
5434: GREATEREQUAL
5435: IFFALSE 5443
5437: LD_INT 10500
5439: DOUBLE
5440: LESSEQUAL
5441: IFTRUE 5445
5443: GO 5473
5445: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5446: LD_EXP 28
5450: PUSH
5451: LD_INT 100
5453: DIVREAL
5454: PUSH
5455: LD_INT 1050
5457: PPUSH
5458: LD_INT 1750
5460: PPUSH
5461: CALL_OW 12
5465: MUL
5466: PPUSH
5467: CALL_OW 67
5471: GO 5729
5473: LD_INT 10500
5475: PUSH
5476: LD_INT 1
5478: PLUS
5479: DOUBLE
5480: GREATEREQUAL
5481: IFFALSE 5489
5483: LD_INT 21000
5485: DOUBLE
5486: LESSEQUAL
5487: IFTRUE 5491
5489: GO 5519
5491: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5492: LD_EXP 28
5496: PUSH
5497: LD_INT 100
5499: DIVREAL
5500: PUSH
5501: LD_INT 1750
5503: PPUSH
5504: LD_INT 2100
5506: PPUSH
5507: CALL_OW 12
5511: MUL
5512: PPUSH
5513: CALL_OW 67
5517: GO 5729
5519: LD_INT 21000
5521: PUSH
5522: LD_INT 1
5524: PLUS
5525: DOUBLE
5526: GREATEREQUAL
5527: IFFALSE 5535
5529: LD_INT 42000
5531: DOUBLE
5532: LESSEQUAL
5533: IFTRUE 5537
5535: GO 5565
5537: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5538: LD_EXP 28
5542: PUSH
5543: LD_INT 100
5545: DIVREAL
5546: PUSH
5547: LD_INT 2100
5549: PPUSH
5550: LD_INT 2275
5552: PPUSH
5553: CALL_OW 12
5557: MUL
5558: PPUSH
5559: CALL_OW 67
5563: GO 5729
5565: LD_INT 42000
5567: PUSH
5568: LD_INT 1
5570: PLUS
5571: DOUBLE
5572: GREATEREQUAL
5573: IFFALSE 5581
5575: LD_INT 63000
5577: DOUBLE
5578: LESSEQUAL
5579: IFTRUE 5583
5581: GO 5611
5583: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5584: LD_EXP 28
5588: PUSH
5589: LD_INT 100
5591: DIVREAL
5592: PUSH
5593: LD_INT 2275
5595: PPUSH
5596: LD_INT 2450
5598: PPUSH
5599: CALL_OW 12
5603: MUL
5604: PPUSH
5605: CALL_OW 67
5609: GO 5729
5611: LD_INT 63000
5613: PUSH
5614: LD_INT 1
5616: PLUS
5617: DOUBLE
5618: GREATEREQUAL
5619: IFFALSE 5627
5621: LD_INT 105000
5623: DOUBLE
5624: LESSEQUAL
5625: IFTRUE 5629
5627: GO 5657
5629: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5630: LD_EXP 28
5634: PUSH
5635: LD_INT 100
5637: DIVREAL
5638: PUSH
5639: LD_INT 2450
5641: PPUSH
5642: LD_INT 2800
5644: PPUSH
5645: CALL_OW 12
5649: MUL
5650: PPUSH
5651: CALL_OW 67
5655: GO 5729
5657: LD_INT 105000
5659: PUSH
5660: LD_INT 1
5662: PLUS
5663: DOUBLE
5664: GREATEREQUAL
5665: IFFALSE 5673
5667: LD_INT 630000
5669: DOUBLE
5670: LESSEQUAL
5671: IFTRUE 5675
5673: GO 5703
5675: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5676: LD_EXP 28
5680: PUSH
5681: LD_INT 100
5683: DIVREAL
5684: PUSH
5685: LD_INT 2800
5687: PPUSH
5688: LD_INT 3500
5690: PPUSH
5691: CALL_OW 12
5695: MUL
5696: PPUSH
5697: CALL_OW 67
5701: GO 5729
5703: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5704: LD_EXP 28
5708: PUSH
5709: LD_INT 100
5711: DIVREAL
5712: PUSH
5713: LD_INT 3500
5715: PPUSH
5716: LD_INT 3850
5718: PPUSH
5719: CALL_OW 12
5723: MUL
5724: PPUSH
5725: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5729: LD_ADDR_VAR 0 2
5733: PUSH
5734: LD_INT 3
5736: PPUSH
5737: LD_INT 5
5739: PPUSH
5740: CALL_OW 12
5744: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5745: LD_ADDR_VAR 0 1
5749: PUSH
5750: LD_EXP 38
5754: PUSH
5755: LD_INT 0
5757: PUSH
5758: EMPTY
5759: LIST
5760: DIFF
5761: PUSH
5762: FOR_IN
5763: IFFALSE 5812
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5765: LD_VAR 0 2
5769: PPUSH
5770: LD_EXP 43
5774: PUSH
5775: LD_VAR 0 1
5779: ARRAY
5780: PUSH
5781: LD_INT 1
5783: ARRAY
5784: PPUSH
5785: LD_EXP 43
5789: PUSH
5790: LD_VAR 0 1
5794: ARRAY
5795: PUSH
5796: LD_INT 2
5798: ARRAY
5799: PPUSH
5800: LD_INT 20
5802: PPUSH
5803: LD_INT 1
5805: PPUSH
5806: CALL_OW 56
5810: GO 5762
5812: POP
5813: POP
// enable ;
5814: ENABLE
// end ; end_of_file
5815: PPOPN 2
5817: END
// every 20 20$00 trigger apemanNumber do
5818: LD_EXP 53
5822: IFFALSE 5855
5824: GO 5826
5826: DISABLE
// begin enable ;
5827: ENABLE
// if apeLevel >= 8 then
5828: LD_EXP 58
5832: PUSH
5833: LD_INT 8
5835: GREATEREQUAL
5836: IFFALSE 5841
// disable else
5838: DISABLE
5839: GO 5855
// apeLevel := apeLevel + 1 ;
5841: LD_ADDR_EXP 58
5845: PUSH
5846: LD_EXP 58
5850: PUSH
5851: LD_INT 1
5853: PLUS
5854: ST_TO_ADDR
// end ;
5855: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5856: LD_EXP 53
5860: PUSH
5861: LD_EXP 54
5865: LESS
5866: IFFALSE 6006
5868: GO 5870
5870: DISABLE
5871: LD_INT 0
5873: PPUSH
5874: PPUSH
5875: PPUSH
5876: PPUSH
// begin enable ;
5877: ENABLE
// for i := 1 to apemanPos do
5878: LD_ADDR_VAR 0 1
5882: PUSH
5883: DOUBLE
5884: LD_INT 1
5886: DEC
5887: ST_TO_ADDR
5888: LD_EXP 56
5892: PUSH
5893: FOR_TO
5894: IFFALSE 6004
// begin if apemanPlayerCount [ i ] then
5896: LD_EXP 57
5900: PUSH
5901: LD_VAR 0 1
5905: ARRAY
5906: IFFALSE 6002
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5908: LD_EXP 57
5912: PUSH
5913: LD_VAR 0 1
5917: ARRAY
5918: PUSH
5919: LD_EXP 56
5923: PUSH
5924: LD_VAR 0 1
5928: ARRAY
5929: GREATER
5930: IFFALSE 6002
// begin ape := PrepareApeman ;
5932: LD_ADDR_VAR 0 2
5936: PUSH
5937: CALL 6517 0 0
5941: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5942: LD_VAR 0 2
5946: PPUSH
5947: LD_EXP 59
5951: PUSH
5952: LD_VAR 0 1
5956: ARRAY
5957: PPUSH
5958: LD_INT 0
5960: PPUSH
5961: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5965: LD_ADDR_EXP 56
5969: PUSH
5970: LD_EXP 56
5974: PPUSH
5975: LD_VAR 0 1
5979: PPUSH
5980: LD_EXP 56
5984: PUSH
5985: LD_VAR 0 1
5989: ARRAY
5990: PUSH
5991: LD_VAR 0 2
5995: UNION
5996: PPUSH
5997: CALL_OW 1
6001: ST_TO_ADDR
// end ; end ; end ;
6002: GO 5893
6004: POP
6005: POP
// end ;
6006: PPOPN 4
6008: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6009: LD_INT 0
6011: PPUSH
6012: PPUSH
6013: PPUSH
6014: PPUSH
6015: PPUSH
6016: PPUSH
6017: PPUSH
// playersAmount := 0 ;
6018: LD_ADDR_VAR 0 3
6022: PUSH
6023: LD_INT 0
6025: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
6026: LD_ADDR_VAR 0 7
6030: PUSH
6031: LD_INT 1
6033: PUSH
6034: LD_INT 2
6036: PUSH
6037: LD_INT 3
6039: PUSH
6040: LD_INT 4
6042: PUSH
6043: LD_INT 5
6045: PUSH
6046: LD_INT 6
6048: PUSH
6049: EMPTY
6050: LIST
6051: LIST
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6057: LD_ADDR_EXP 59
6061: PUSH
6062: LD_INT 0
6064: PUSH
6065: LD_INT 0
6067: PUSH
6068: LD_INT 0
6070: PUSH
6071: LD_INT 0
6073: PUSH
6074: LD_INT 0
6076: PUSH
6077: LD_INT 0
6079: PUSH
6080: LD_INT 0
6082: PUSH
6083: LD_INT 0
6085: PUSH
6086: EMPTY
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: ST_TO_ADDR
// for j = 1 to Side_Positions do
6096: LD_ADDR_VAR 0 4
6100: PUSH
6101: DOUBLE
6102: LD_INT 1
6104: DEC
6105: ST_TO_ADDR
6106: LD_EXP 38
6110: PUSH
6111: FOR_TO
6112: IFFALSE 6179
// if Side_Positions [ j ] then
6114: LD_EXP 38
6118: PUSH
6119: LD_VAR 0 4
6123: ARRAY
6124: IFFALSE 6177
// begin playersAmount := playersAmount + 1 ;
6126: LD_ADDR_VAR 0 3
6130: PUSH
6131: LD_VAR 0 3
6135: PUSH
6136: LD_INT 1
6138: PLUS
6139: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6140: LD_ADDR_EXP 59
6144: PUSH
6145: LD_EXP 59
6149: PPUSH
6150: LD_VAR 0 4
6154: PPUSH
6155: LD_VAR 0 7
6159: PUSH
6160: LD_EXP 38
6164: PUSH
6165: LD_VAR 0 4
6169: ARRAY
6170: ARRAY
6171: PPUSH
6172: CALL_OW 1
6176: ST_TO_ADDR
// end ;
6177: GO 6111
6179: POP
6180: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6181: LD_ADDR_EXP 55
6185: PUSH
6186: LD_INT 3
6188: PUSH
6189: LD_EXP 30
6193: MUL
6194: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6195: LD_ADDR_EXP 53
6199: PUSH
6200: LD_VAR 0 3
6204: PUSH
6205: LD_EXP 55
6209: MUL
6210: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6211: LD_ADDR_EXP 54
6215: PUSH
6216: LD_EXP 53
6220: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6221: LD_ADDR_EXP 56
6225: PUSH
6226: LD_INT 0
6228: PUSH
6229: LD_INT 0
6231: PUSH
6232: LD_INT 0
6234: PUSH
6235: LD_INT 0
6237: PUSH
6238: LD_INT 0
6240: PUSH
6241: LD_INT 0
6243: PUSH
6244: LD_INT 0
6246: PUSH
6247: LD_INT 0
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6260: LD_ADDR_EXP 57
6264: PUSH
6265: LD_INT 0
6267: PUSH
6268: LD_INT 0
6270: PUSH
6271: LD_INT 0
6273: PUSH
6274: LD_INT 0
6276: PUSH
6277: LD_INT 0
6279: PUSH
6280: LD_INT 0
6282: PUSH
6283: LD_INT 0
6285: PUSH
6286: LD_INT 0
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: ST_TO_ADDR
// apeLevel := 1 ;
6299: LD_ADDR_EXP 58
6303: PUSH
6304: LD_INT 1
6306: ST_TO_ADDR
// if not apemanNumber then
6307: LD_EXP 53
6311: NOT
6312: IFFALSE 6316
// exit ;
6314: GO 6512
// for i := 1 to apemanPerPlayer do
6316: LD_ADDR_VAR 0 2
6320: PUSH
6321: DOUBLE
6322: LD_INT 1
6324: DEC
6325: ST_TO_ADDR
6326: LD_EXP 55
6330: PUSH
6331: FOR_TO
6332: IFFALSE 6510
// begin for j := 1 to Side_Positions do
6334: LD_ADDR_VAR 0 4
6338: PUSH
6339: DOUBLE
6340: LD_INT 1
6342: DEC
6343: ST_TO_ADDR
6344: LD_EXP 38
6348: PUSH
6349: FOR_TO
6350: IFFALSE 6506
// if Side_Positions [ j ] then
6352: LD_EXP 38
6356: PUSH
6357: LD_VAR 0 4
6361: ARRAY
6362: IFFALSE 6504
// begin pos := Side_Positions [ j ] ;
6364: LD_ADDR_VAR 0 6
6368: PUSH
6369: LD_EXP 38
6373: PUSH
6374: LD_VAR 0 4
6378: ARRAY
6379: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6380: LD_ADDR_EXP 57
6384: PUSH
6385: LD_EXP 57
6389: PPUSH
6390: LD_VAR 0 4
6394: PPUSH
6395: LD_EXP 57
6399: PUSH
6400: LD_VAR 0 4
6404: ARRAY
6405: PUSH
6406: LD_INT 1
6408: PLUS
6409: PPUSH
6410: CALL_OW 1
6414: ST_TO_ADDR
// ape := PrepareApeman ;
6415: LD_ADDR_VAR 0 5
6419: PUSH
6420: CALL 6517 0 0
6424: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6425: LD_ADDR_EXP 56
6429: PUSH
6430: LD_EXP 56
6434: PPUSH
6435: LD_VAR 0 4
6439: PPUSH
6440: LD_EXP 56
6444: PUSH
6445: LD_VAR 0 4
6449: ARRAY
6450: PPUSH
6451: LD_EXP 56
6455: PUSH
6456: LD_VAR 0 4
6460: ARRAY
6461: PUSH
6462: LD_INT 1
6464: PLUS
6465: PPUSH
6466: LD_VAR 0 5
6470: PPUSH
6471: CALL_OW 1
6475: PPUSH
6476: CALL_OW 1
6480: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6481: LD_VAR 0 5
6485: PPUSH
6486: LD_EXP 59
6490: PUSH
6491: LD_VAR 0 4
6495: ARRAY
6496: PPUSH
6497: LD_INT 0
6499: PPUSH
6500: CALL_OW 49
// end ;
6504: GO 6349
6506: POP
6507: POP
// end ;
6508: GO 6331
6510: POP
6511: POP
// end ;
6512: LD_VAR 0 1
6516: RET
// export function PrepareApeman ; var bonus ; begin
6517: LD_INT 0
6519: PPUSH
6520: PPUSH
// uc_side := 0 ;
6521: LD_ADDR_OWVAR 20
6525: PUSH
6526: LD_INT 0
6528: ST_TO_ADDR
// uc_nation := 0 ;
6529: LD_ADDR_OWVAR 21
6533: PUSH
6534: LD_INT 0
6536: ST_TO_ADDR
// InitHc ;
6537: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
6541: LD_ADDR_VAR 0 2
6545: PUSH
6546: LD_INT 1
6548: NEG
6549: PUSH
6550: LD_INT 0
6552: PUSH
6553: LD_INT 1
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: LIST
6560: PUSH
6561: LD_INT 25
6563: PUSH
6564: LD_INT 12
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PPUSH
6571: CALL_OW 69
6575: PUSH
6576: LD_INT 3
6578: MOD
6579: PUSH
6580: LD_INT 1
6582: PLUS
6583: ARRAY
6584: ST_TO_ADDR
// hc_class := class_apeman ;
6585: LD_ADDR_OWVAR 28
6589: PUSH
6590: LD_INT 12
6592: ST_TO_ADDR
// hc_gallery :=  ;
6593: LD_ADDR_OWVAR 33
6597: PUSH
6598: LD_STRING 
6600: ST_TO_ADDR
// hc_name :=  ;
6601: LD_ADDR_OWVAR 26
6605: PUSH
6606: LD_STRING 
6608: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6609: LD_ADDR_OWVAR 31
6613: PUSH
6614: LD_EXP 58
6618: PUSH
6619: LD_VAR 0 2
6623: PLUS
6624: PUSH
6625: LD_EXP 58
6629: PUSH
6630: LD_VAR 0 2
6634: PLUS
6635: PUSH
6636: LD_EXP 58
6640: PUSH
6641: LD_VAR 0 2
6645: PLUS
6646: PUSH
6647: LD_EXP 58
6651: PUSH
6652: LD_VAR 0 2
6656: PLUS
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: LIST
6662: LIST
6663: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6664: LD_ADDR_OWVAR 35
6668: PUSH
6669: LD_INT 10
6671: PUSH
6672: LD_VAR 0 2
6676: MUL
6677: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
6678: LD_ADDR_OWVAR 29
6682: PUSH
6683: LD_INT 12
6685: PUSH
6686: LD_INT 12
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: ST_TO_ADDR
// result := CreateHuman ;
6693: LD_ADDR_VAR 0 1
6697: PUSH
6698: CALL_OW 44
6702: ST_TO_ADDR
// end ;
6703: LD_VAR 0 1
6707: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6708: LD_INT 0
6710: PPUSH
6711: PPUSH
6712: PPUSH
// if not ape then
6713: LD_VAR 0 1
6717: NOT
6718: IFFALSE 6722
// exit ;
6720: GO 6847
// side := GetSide ( ape ) ;
6722: LD_ADDR_VAR 0 3
6726: PUSH
6727: LD_VAR 0 1
6731: PPUSH
6732: CALL_OW 255
6736: ST_TO_ADDR
// if not side then
6737: LD_VAR 0 3
6741: NOT
6742: IFFALSE 6796
// begin for i = 1 to apemanPos do
6744: LD_ADDR_VAR 0 4
6748: PUSH
6749: DOUBLE
6750: LD_INT 1
6752: DEC
6753: ST_TO_ADDR
6754: LD_EXP 56
6758: PUSH
6759: FOR_TO
6760: IFFALSE 6794
// if ape in apemanPos [ i ] then
6762: LD_VAR 0 1
6766: PUSH
6767: LD_EXP 56
6771: PUSH
6772: LD_VAR 0 4
6776: ARRAY
6777: IN
6778: IFFALSE 6792
// begin side := i ;
6780: LD_ADDR_VAR 0 3
6784: PUSH
6785: LD_VAR 0 4
6789: ST_TO_ADDR
// break ;
6790: GO 6794
// end ;
6792: GO 6759
6794: POP
6795: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6796: LD_ADDR_EXP 56
6800: PUSH
6801: LD_EXP 56
6805: PPUSH
6806: LD_VAR 0 3
6810: PPUSH
6811: LD_EXP 56
6815: PUSH
6816: LD_VAR 0 3
6820: ARRAY
6821: PUSH
6822: LD_VAR 0 1
6826: DIFF
6827: PPUSH
6828: CALL_OW 1
6832: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6833: LD_ADDR_EXP 53
6837: PUSH
6838: LD_EXP 53
6842: PUSH
6843: LD_INT 1
6845: MINUS
6846: ST_TO_ADDR
// end ; end_of_file
6847: LD_VAR 0 2
6851: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6852: LD_VAR 0 1
6856: PPUSH
6857: CALL_OW 266
6861: PUSH
6862: LD_INT 0
6864: PUSH
6865: LD_INT 1
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: IN
6872: IFFALSE 6897
// SetBName ( b , @ & GetSide ( b ) ) ;
6874: LD_VAR 0 1
6878: PPUSH
6879: LD_STRING @
6881: PUSH
6882: LD_VAR 0 1
6886: PPUSH
6887: CALL_OW 255
6891: STR
6892: PPUSH
6893: CALL_OW 500
// end ;
6897: PPOPN 2
6899: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6900: LD_VAR 0 1
6904: PPUSH
6905: CALL_OW 266
6909: PUSH
6910: LD_INT 0
6912: PUSH
6913: LD_INT 1
6915: PUSH
6916: EMPTY
6917: LIST
6918: LIST
6919: IN
6920: IFFALSE 6945
// SetBName ( b , @ & GetSide ( b ) ) ;
6922: LD_VAR 0 1
6926: PPUSH
6927: LD_STRING @
6929: PUSH
6930: LD_VAR 0 1
6934: PPUSH
6935: CALL_OW 255
6939: STR
6940: PPUSH
6941: CALL_OW 500
// end ;
6945: PPOPN 3
6947: END
// on VehicleConstructed ( veh , fac ) do var side ;
6948: LD_INT 0
6950: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6951: LD_VAR 0 1
6955: PPUSH
6956: CALL_OW 263
6960: PUSH
6961: LD_INT 5
6963: EQUAL
6964: IFFALSE 7106
// begin side := GetSide ( veh ) ;
6966: LD_ADDR_VAR 0 3
6970: PUSH
6971: LD_VAR 0 1
6975: PPUSH
6976: CALL_OW 255
6980: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6981: LD_ADDR_EXP 56
6985: PUSH
6986: LD_EXP 56
6990: PPUSH
6991: LD_VAR 0 3
6995: PPUSH
6996: LD_EXP 56
7000: PUSH
7001: LD_VAR 0 3
7005: ARRAY
7006: PPUSH
7007: LD_INT 52
7009: PUSH
7010: EMPTY
7011: LIST
7012: PPUSH
7013: CALL_OW 72
7017: PUSH
7018: LD_INT 22
7020: PUSH
7021: LD_VAR 0 3
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: PUSH
7030: LD_INT 2
7032: PUSH
7033: LD_INT 33
7035: PUSH
7036: LD_INT 5
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PUSH
7043: LD_INT 25
7045: PUSH
7046: LD_INT 12
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: PUSH
7053: LD_INT 25
7055: PUSH
7056: LD_INT 15
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: PUSH
7063: LD_INT 25
7065: PUSH
7066: LD_INT 16
7068: PUSH
7069: EMPTY
7070: LIST
7071: LIST
7072: PUSH
7073: LD_INT 25
7075: PUSH
7076: LD_INT 17
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: LIST
7087: LIST
7088: LIST
7089: LIST
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: PPUSH
7095: CALL_OW 69
7099: UNION
7100: PPUSH
7101: CALL_OW 1
7105: ST_TO_ADDR
// end ; end ;
7106: PPOPN 3
7108: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7109: LD_INT 0
7111: PPUSH
7112: PPUSH
7113: PPUSH
7114: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7115: LD_VAR 0 1
7119: PPUSH
7120: CALL_OW 257
7124: PUSH
7125: LD_INT 12
7127: PUSH
7128: LD_INT 15
7130: PUSH
7131: LD_INT 17
7133: PUSH
7134: LD_INT 16
7136: PUSH
7137: EMPTY
7138: LIST
7139: LIST
7140: LIST
7141: LIST
7142: IN
7143: PUSH
7144: LD_VAR 0 1
7148: PPUSH
7149: CALL_OW 263
7153: PUSH
7154: LD_INT 5
7156: EQUAL
7157: OR
7158: IFFALSE 7169
// ApeKilled ( j ) ;
7160: LD_VAR 0 1
7164: PPUSH
7165: CALL 6708 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7169: LD_VAR 0 1
7173: PPUSH
7174: CALL_OW 266
7178: PUSH
7179: LD_INT 0
7181: PUSH
7182: LD_INT 1
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: IN
7189: IFFALSE 7271
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7191: LD_ADDR_VAR 0 4
7195: PUSH
7196: LD_EXP 38
7200: PUSH
7201: LD_VAR 0 1
7205: PPUSH
7206: CALL_OW 255
7210: ARRAY
7211: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7212: LD_ADDR_VAR 0 2
7216: PUSH
7217: LD_EXP 43
7221: PUSH
7222: LD_VAR 0 4
7226: ARRAY
7227: PUSH
7228: LD_INT 1
7230: ARRAY
7231: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7232: LD_ADDR_VAR 0 3
7236: PUSH
7237: LD_EXP 43
7241: PUSH
7242: LD_VAR 0 4
7246: ARRAY
7247: PUSH
7248: LD_INT 2
7250: ARRAY
7251: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7252: LD_VAR 0 2
7256: PPUSH
7257: LD_VAR 0 3
7261: PPUSH
7262: CALL_OW 420
7266: PPUSH
7267: CALL_OW 419
// end ; end ;
7271: PPOPN 5
7273: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7274: LD_VAR 0 1
7278: PPUSH
7279: LD_VAR 0 2
7283: PPUSH
7284: LD_VAR 0 3
7288: PPUSH
7289: LD_OWVAR 2
7293: PPUSH
7294: CALL 9065 0 4
7298: PPOPN 3
7300: END
// every 0 0$1 marked 100 do var i , base , pom , filter , sib_mined ;
7301: GO 7303
7303: DISABLE
7304: LD_INT 0
7306: PPUSH
7307: PPUSH
7308: PPUSH
7309: PPUSH
7310: PPUSH
// begin sib_mined := [ ] ;
7311: LD_ADDR_VAR 0 5
7315: PUSH
7316: EMPTY
7317: ST_TO_ADDR
// for i := 1 to 8 do
7318: LD_ADDR_VAR 0 1
7322: PUSH
7323: DOUBLE
7324: LD_INT 1
7326: DEC
7327: ST_TO_ADDR
7328: LD_INT 8
7330: PUSH
7331: FOR_TO
7332: IFFALSE 7488
// if Side_Positions [ i ] then
7334: LD_EXP 38
7338: PUSH
7339: LD_VAR 0 1
7343: ARRAY
7344: IFFALSE 7472
// begin filter := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7346: LD_ADDR_VAR 0 4
7350: PUSH
7351: LD_INT 22
7353: PUSH
7354: LD_VAR 0 1
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: PUSH
7363: LD_INT 2
7365: PUSH
7366: LD_INT 30
7368: PUSH
7369: LD_INT 0
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: PUSH
7376: LD_INT 30
7378: PUSH
7379: LD_INT 1
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: LIST
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: PPUSH
7395: CALL_OW 69
7399: ST_TO_ADDR
// pom := 0 ;
7400: LD_ADDR_VAR 0 3
7404: PUSH
7405: LD_INT 0
7407: ST_TO_ADDR
// for base in filter do
7408: LD_ADDR_VAR 0 2
7412: PUSH
7413: LD_VAR 0 4
7417: PUSH
7418: FOR_IN
7419: IFFALSE 7452
// pom := pom + GetResourceType ( GetBase ( base ) , mat_siberit ) ;
7421: LD_ADDR_VAR 0 3
7425: PUSH
7426: LD_VAR 0 3
7430: PUSH
7431: LD_VAR 0 2
7435: PPUSH
7436: CALL_OW 274
7440: PPUSH
7441: LD_INT 3
7443: PPUSH
7444: CALL_OW 275
7448: PLUS
7449: ST_TO_ADDR
7450: GO 7418
7452: POP
7453: POP
// sib_mined := sib_mined ^ pom ;
7454: LD_ADDR_VAR 0 5
7458: PUSH
7459: LD_VAR 0 5
7463: PUSH
7464: LD_VAR 0 3
7468: ADD
7469: ST_TO_ADDR
// end else
7470: GO 7486
// sib_mined := sib_mined ^ 0 ;
7472: LD_ADDR_VAR 0 5
7476: PUSH
7477: LD_VAR 0 5
7481: PUSH
7482: LD_INT 0
7484: ADD
7485: ST_TO_ADDR
7486: GO 7331
7488: POP
7489: POP
// if not def_public_score then
7490: LD_EXP 14
7494: NOT
7495: IFFALSE 7585
// begin ExtraStrings := [ ] ;
7497: LD_ADDR_EXP 60
7501: PUSH
7502: EMPTY
7503: ST_TO_ADDR
// for i := 1 to 8 do
7504: LD_ADDR_VAR 0 1
7508: PUSH
7509: DOUBLE
7510: LD_INT 1
7512: DEC
7513: ST_TO_ADDR
7514: LD_INT 8
7516: PUSH
7517: FOR_TO
7518: IFFALSE 7581
// if Side_Positions [ i ] then
7520: LD_EXP 38
7524: PUSH
7525: LD_VAR 0 1
7529: ARRAY
7530: IFFALSE 7579
// ExtraStrings := ExtraStrings ^ [ #AlienBase-MinedPublic , i , i , sib_mined [ i ] , amount_of_siberit ] ;
7532: LD_ADDR_EXP 60
7536: PUSH
7537: LD_EXP 60
7541: PUSH
7542: LD_STRING #AlienBase-MinedPublic
7544: PUSH
7545: LD_VAR 0 1
7549: PUSH
7550: LD_VAR 0 1
7554: PUSH
7555: LD_VAR 0 5
7559: PUSH
7560: LD_VAR 0 1
7564: ARRAY
7565: PUSH
7566: LD_EXP 31
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: ADD
7578: ST_TO_ADDR
7579: GO 7517
7581: POP
7582: POP
// end else
7583: GO 7614
// ExtraStrings := [ #AlienBase-Mined , sib_mined [ Your_Side ] , amount_of_siberit ] ;
7585: LD_ADDR_EXP 60
7589: PUSH
7590: LD_STRING #AlienBase-Mined
7592: PUSH
7593: LD_VAR 0 5
7597: PUSH
7598: LD_OWVAR 2
7602: ARRAY
7603: PUSH
7604: LD_EXP 31
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: LIST
7613: ST_TO_ADDR
// for i := 1 to 8 do
7614: LD_ADDR_VAR 0 1
7618: PUSH
7619: DOUBLE
7620: LD_INT 1
7622: DEC
7623: ST_TO_ADDR
7624: LD_INT 8
7626: PUSH
7627: FOR_TO
7628: IFFALSE 7685
// if sib_mined [ i ] >= amount_of_siberit then
7630: LD_VAR 0 5
7634: PUSH
7635: LD_VAR 0 1
7639: ARRAY
7640: PUSH
7641: LD_EXP 31
7645: GREATEREQUAL
7646: IFFALSE 7683
// begin wait ( 0 0$1 ) ;
7648: LD_INT 35
7650: PPUSH
7651: CALL_OW 67
// if sib_mined [ your_side ] >= amount_of_siberit then
7655: LD_VAR 0 5
7659: PUSH
7660: LD_OWVAR 2
7664: ARRAY
7665: PUSH
7666: LD_EXP 31
7670: GREATEREQUAL
7671: IFFALSE 7679
// YouWinInMultiplayer else
7673: CALL_OW 106
7677: GO 7683
// YouLostInMultiplayer ;
7679: CALL_OW 107
// end ;
7683: GO 7627
7685: POP
7686: POP
// enable ;
7687: ENABLE
// end ; end_of_file
7688: PPOPN 5
7690: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7691: LD_INT 0
7693: PPUSH
7694: PPUSH
// for un in battle_flags_id do
7695: LD_ADDR_VAR 0 2
7699: PUSH
7700: LD_EXP 48
7704: PUSH
7705: FOR_IN
7706: IFFALSE 7781
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7708: LD_VAR 0 2
7712: PPUSH
7713: LD_INT 1
7715: PUSH
7716: LD_LOC 9
7720: PUSH
7721: EMPTY
7722: LIST
7723: LIST
7724: PUSH
7725: LD_INT 2
7727: PUSH
7728: LD_LOC 9
7732: PUSH
7733: LD_INT 2
7735: DIV
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: PUSH
7741: LD_INT 3
7743: PUSH
7744: LD_LOC 9
7748: PUSH
7749: LD_INT 5
7751: DIV
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: PUSH
7757: LD_INT 20
7759: PUSH
7760: LD_LOC 9
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: LIST
7773: LIST
7774: PPUSH
7775: CALL_OW 423
7779: GO 7705
7781: POP
7782: POP
// end ;
7783: LD_VAR 0 1
7787: RET
// every 1 do var un ;
7788: GO 7790
7790: DISABLE
7791: LD_INT 0
7793: PPUSH
// begin if not def_morale_flags then
7794: LD_EXP 9
7798: NOT
7799: IFFALSE 7803
// exit ;
7801: GO 7880
// if not morale_decreasing_time then
7803: LD_EXP 29
7807: NOT
7808: IFFALSE 7812
// exit ;
7810: GO 7880
// strength = 100 ;
7812: LD_ADDR_LOC 9
7816: PUSH
7817: LD_INT 100
7819: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7820: LD_EXP 29
7824: PPUSH
7825: CALL_OW 67
// strength := strength - 1 ;
7829: LD_ADDR_LOC 9
7833: PUSH
7834: LD_LOC 9
7838: PUSH
7839: LD_INT 1
7841: MINUS
7842: ST_TO_ADDR
// Update_Flags ;
7843: CALL 7691 0 0
// until not strength ;
7847: LD_LOC 9
7851: NOT
7852: IFFALSE 7820
// for un in battle_flags_id do
7854: LD_ADDR_VAR 0 1
7858: PUSH
7859: LD_EXP 48
7863: PUSH
7864: FOR_IN
7865: IFFALSE 7878
// KillBattleFlag ( un ) ;
7867: LD_VAR 0 1
7871: PPUSH
7872: CALL_OW 419
7876: GO 7864
7878: POP
7879: POP
// end ; end_of_file
7880: PPOPN 1
7882: END
// var BloodGods , BloodGods_LastKills , BloodGods_CurrentKills , BloodGods_Positions ; every 0 0$3 marked 200 do var x ;
7883: GO 7885
7885: DISABLE
7886: LD_INT 0
7888: PPUSH
// begin enable ;
7889: ENABLE
// for x := 1 to 8 do
7890: LD_ADDR_VAR 0 1
7894: PUSH
7895: DOUBLE
7896: LD_INT 1
7898: DEC
7899: ST_TO_ADDR
7900: LD_INT 8
7902: PUSH
7903: FOR_TO
7904: IFFALSE 7988
// if ( BloodGods_CurrentKills [ x ] > 5 ) and ( BloodGods [ x ] = - 1 ) then
7906: LD_LOC 16
7910: PUSH
7911: LD_VAR 0 1
7915: ARRAY
7916: PUSH
7917: LD_INT 5
7919: GREATER
7920: PUSH
7921: LD_LOC 14
7925: PUSH
7926: LD_VAR 0 1
7930: ARRAY
7931: PUSH
7932: LD_INT 1
7934: NEG
7935: EQUAL
7936: AND
7937: IFFALSE 7986
// begin BloodGods_LastKills := Replace ( BloodGods_LastKills , x , BloodGods_LastKills [ x ] + 6 ) ;
7939: LD_ADDR_LOC 15
7943: PUSH
7944: LD_LOC 15
7948: PPUSH
7949: LD_VAR 0 1
7953: PPUSH
7954: LD_LOC 15
7958: PUSH
7959: LD_VAR 0 1
7963: ARRAY
7964: PUSH
7965: LD_INT 6
7967: PLUS
7968: PPUSH
7969: CALL_OW 1
7973: ST_TO_ADDR
// AwakenBloodGod ( x , false ) ;
7974: LD_VAR 0 1
7978: PPUSH
7979: LD_INT 0
7981: PPUSH
7982: CALL 8160 0 2
// end ;
7986: GO 7903
7988: POP
7989: POP
// end ;
7990: PPOPN 1
7992: END
// every 0 0$1 marked 200 do var BGL , x ;
7993: GO 7995
7995: DISABLE
7996: LD_INT 0
7998: PPUSH
7999: PPUSH
// begin enable ;
8000: ENABLE
// for x := 1 to 8 do
8001: LD_ADDR_VAR 0 2
8005: PUSH
8006: DOUBLE
8007: LD_INT 1
8009: DEC
8010: ST_TO_ADDR
8011: LD_INT 8
8013: PUSH
8014: FOR_TO
8015: IFFALSE 8146
// if ( BloodGods [ x ] > - 1 ) and IsLive ( BloodGods [ x ] ) then
8017: LD_LOC 14
8021: PUSH
8022: LD_VAR 0 2
8026: ARRAY
8027: PUSH
8028: LD_INT 1
8030: NEG
8031: GREATER
8032: PUSH
8033: LD_LOC 14
8037: PUSH
8038: LD_VAR 0 2
8042: ARRAY
8043: PPUSH
8044: CALL_OW 300
8048: AND
8049: IFFALSE 8144
// begin BGL := GetLives ( BloodGods [ x ] ) ;
8051: LD_ADDR_VAR 0 1
8055: PUSH
8056: LD_LOC 14
8060: PUSH
8061: LD_VAR 0 2
8065: ARRAY
8066: PPUSH
8067: CALL_OW 256
8071: ST_TO_ADDR
// if ( BGL < 1000 ) and ( BGL > 100 ) then
8072: LD_VAR 0 1
8076: PUSH
8077: LD_INT 1000
8079: LESS
8080: PUSH
8081: LD_VAR 0 1
8085: PUSH
8086: LD_INT 100
8088: GREATER
8089: AND
8090: IFFALSE 8144
// begin BGL := BGL + 10 ;
8092: LD_ADDR_VAR 0 1
8096: PUSH
8097: LD_VAR 0 1
8101: PUSH
8102: LD_INT 10
8104: PLUS
8105: ST_TO_ADDR
// if BGL > 1000 then
8106: LD_VAR 0 1
8110: PUSH
8111: LD_INT 1000
8113: GREATER
8114: IFFALSE 8124
// BGL := 1000 ;
8116: LD_ADDR_VAR 0 1
8120: PUSH
8121: LD_INT 1000
8123: ST_TO_ADDR
// SetLives ( BloodGods [ x ] , BGL ) ;
8124: LD_LOC 14
8128: PUSH
8129: LD_VAR 0 2
8133: ARRAY
8134: PPUSH
8135: LD_VAR 0 1
8139: PPUSH
8140: CALL_OW 234
// end ; end ;
8144: GO 8014
8146: POP
8147: POP
// end ;
8148: PPOPN 2
8150: END
// every 0 0$1 marked 200 do
8151: GO 8153
8153: DISABLE
// begin DisplayTimeWithKills ;
8154: CALL 8401 0 0
// enable ;
8158: ENABLE
// end ;
8159: END
// function AwakenBloodGod ( side , NoDialog ) ; begin
8160: LD_INT 0
8162: PPUSH
// uc_direction := Rand ( 0 , 5 ) ;
8163: LD_ADDR_OWVAR 24
8167: PUSH
8168: LD_INT 0
8170: PPUSH
8171: LD_INT 5
8173: PPUSH
8174: CALL_OW 12
8178: ST_TO_ADDR
// PrepareHuman ( 1 , class_soldier , 15 ) ;
8179: LD_INT 1
8181: PPUSH
8182: LD_INT 1
8184: PPUSH
8185: LD_INT 15
8187: PPUSH
8188: CALL_OW 380
// hc_importance := 106 ;
8192: LD_ADDR_OWVAR 32
8196: PUSH
8197: LD_INT 106
8199: ST_TO_ADDR
// hc_name := Blood God of  & mp_sides_players_names [ side ] ;
8200: LD_ADDR_OWVAR 26
8204: PUSH
8205: LD_STRING Blood God of 
8207: PUSH
8208: LD_OWVAR 19
8212: PUSH
8213: LD_VAR 0 1
8217: ARRAY
8218: STR
8219: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
8220: LD_ADDR_OWVAR 21
8224: PUSH
8225: LD_EXP 39
8229: PUSH
8230: LD_VAR 0 1
8234: ARRAY
8235: ST_TO_ADDR
// uc_side := side ;
8236: LD_ADDR_OWVAR 20
8240: PUSH
8241: LD_VAR 0 1
8245: ST_TO_ADDR
// hc_noskilllimit := true ;
8246: LD_ADDR_OWVAR 76
8250: PUSH
8251: LD_INT 1
8253: ST_TO_ADDR
// hc_agressivity := 50 ;
8254: LD_ADDR_OWVAR 35
8258: PUSH
8259: LD_INT 50
8261: ST_TO_ADDR
// BloodGods := Replace ( BloodGods , Side , CreateHuman ) ;
8262: LD_ADDR_LOC 14
8266: PUSH
8267: LD_LOC 14
8271: PPUSH
8272: LD_VAR 0 1
8276: PPUSH
8277: CALL_OW 44
8281: PPUSH
8282: CALL_OW 1
8286: ST_TO_ADDR
// PlaceUnitXYR ( BloodGods [ side ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 1 ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 2 ] , 10 , false ) ;
8287: LD_LOC 14
8291: PUSH
8292: LD_VAR 0 1
8296: ARRAY
8297: PPUSH
8298: LD_LOC 17
8302: PUSH
8303: LD_EXP 38
8307: PUSH
8308: LD_VAR 0 1
8312: ARRAY
8313: ARRAY
8314: PUSH
8315: LD_INT 1
8317: ARRAY
8318: PPUSH
8319: LD_LOC 17
8323: PUSH
8324: LD_EXP 38
8328: PUSH
8329: LD_VAR 0 1
8333: ARRAY
8334: ARRAY
8335: PUSH
8336: LD_INT 2
8338: ARRAY
8339: PPUSH
8340: LD_INT 10
8342: PPUSH
8343: LD_INT 0
8345: PPUSH
8346: CALL_OW 50
// SetAttr ( BloodGods [ side ] , attr_stamina , 300 ) ;
8350: LD_LOC 14
8354: PUSH
8355: LD_VAR 0 1
8359: ARRAY
8360: PPUSH
8361: LD_INT 1
8363: PPUSH
8364: LD_INT 300
8366: PPUSH
8367: CALL_OW 239
// if not NoDialog then
8371: LD_VAR 0 2
8375: NOT
8376: IFFALSE 8396
// SayRadio ( BloodGods [ side ] , DLAwaken ) ;
8378: LD_LOC 14
8382: PUSH
8383: LD_VAR 0 1
8387: ARRAY
8388: PPUSH
8389: LD_STRING DLAwaken
8391: PPUSH
8392: CALL_OW 94
// end ;
8396: LD_VAR 0 3
8400: RET
// function DisplayTimeWithKills ; var x ; begin
8401: LD_INT 0
8403: PPUSH
8404: PPUSH
// ExtraStrings :=  ;
8405: LD_ADDR_EXP 60
8409: PUSH
8410: LD_STRING 
8412: ST_TO_ADDR
// for x = 1 to Side_Positions do
8413: LD_ADDR_VAR 0 2
8417: PUSH
8418: DOUBLE
8419: LD_INT 1
8421: DEC
8422: ST_TO_ADDR
8423: LD_EXP 38
8427: PUSH
8428: FOR_TO
8429: IFFALSE 8662
// if Side_Positions [ x ] then
8431: LD_EXP 38
8435: PUSH
8436: LD_VAR 0 2
8440: ARRAY
8441: IFFALSE 8660
// begin BloodGods_CurrentKills := Replace ( BloodGods_CurrentKills , x , GetHumansKilled ( x ) - BloodGods_LastKills [ x ] ) ;
8443: LD_ADDR_LOC 16
8447: PUSH
8448: LD_LOC 16
8452: PPUSH
8453: LD_VAR 0 2
8457: PPUSH
8458: LD_VAR 0 2
8462: PPUSH
8463: CALL_OW 515
8467: PUSH
8468: LD_LOC 15
8472: PUSH
8473: LD_VAR 0 2
8477: ARRAY
8478: MINUS
8479: PPUSH
8480: CALL_OW 1
8484: ST_TO_ADDR
// if ( BloodGods [ x ] > - 1 ) and ( IsLive ( BloodGods [ x ] ) ) then
8485: LD_LOC 14
8489: PUSH
8490: LD_VAR 0 2
8494: ARRAY
8495: PUSH
8496: LD_INT 1
8498: NEG
8499: GREATER
8500: PUSH
8501: LD_LOC 14
8505: PUSH
8506: LD_VAR 0 2
8510: ARRAY
8511: PPUSH
8512: CALL_OW 300
8516: AND
8517: IFFALSE 8550
// ExtraStrings = ExtraStrings ^ [ #godawoken , x , x ] else
8519: LD_ADDR_EXP 60
8523: PUSH
8524: LD_EXP 60
8528: PUSH
8529: LD_STRING #godawoken
8531: PUSH
8532: LD_VAR 0 2
8536: PUSH
8537: LD_VAR 0 2
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: LIST
8546: ADD
8547: ST_TO_ADDR
8548: GO 8660
// if ( BloodGods [ x ] > - 1 ) and ( IsDead ( BloodGods [ x ] ) ) then
8550: LD_LOC 14
8554: PUSH
8555: LD_VAR 0 2
8559: ARRAY
8560: PUSH
8561: LD_INT 1
8563: NEG
8564: GREATER
8565: PUSH
8566: LD_LOC 14
8570: PUSH
8571: LD_VAR 0 2
8575: ARRAY
8576: PPUSH
8577: CALL_OW 301
8581: AND
8582: IFFALSE 8615
// ExtraStrings = ExtraStrings ^ [ #goddied , x , x ] else
8584: LD_ADDR_EXP 60
8588: PUSH
8589: LD_EXP 60
8593: PUSH
8594: LD_STRING #goddied
8596: PUSH
8597: LD_VAR 0 2
8601: PUSH
8602: LD_VAR 0 2
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: LIST
8611: ADD
8612: ST_TO_ADDR
8613: GO 8660
// ExtraStrings = ExtraStrings ^ [ #godssacrifise , x , x , BloodGods_CurrentKills [ x ] , 6 ] end ;
8615: LD_ADDR_EXP 60
8619: PUSH
8620: LD_EXP 60
8624: PUSH
8625: LD_STRING #godssacrifise
8627: PUSH
8628: LD_VAR 0 2
8632: PUSH
8633: LD_VAR 0 2
8637: PUSH
8638: LD_LOC 16
8642: PUSH
8643: LD_VAR 0 2
8647: ARRAY
8648: PUSH
8649: LD_INT 6
8651: PUSH
8652: EMPTY
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: ADD
8659: ST_TO_ADDR
8660: GO 8428
8662: POP
8663: POP
// end ;
8664: LD_VAR 0 1
8668: RET
// export function InitBloodGods ; begin
8669: LD_INT 0
8671: PPUSH
// BloodGods = [ - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 ] ;
8672: LD_ADDR_LOC 14
8676: PUSH
8677: LD_INT 1
8679: NEG
8680: PUSH
8681: LD_INT 1
8683: NEG
8684: PUSH
8685: LD_INT 1
8687: NEG
8688: PUSH
8689: LD_INT 1
8691: NEG
8692: PUSH
8693: LD_INT 1
8695: NEG
8696: PUSH
8697: LD_INT 1
8699: NEG
8700: PUSH
8701: LD_INT 1
8703: NEG
8704: PUSH
8705: LD_INT 1
8707: NEG
8708: PUSH
8709: EMPTY
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: ST_TO_ADDR
// BloodGods_LastKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8719: LD_ADDR_LOC 15
8723: PUSH
8724: LD_INT 0
8726: PUSH
8727: LD_INT 0
8729: PUSH
8730: LD_INT 0
8732: PUSH
8733: LD_INT 0
8735: PUSH
8736: LD_INT 0
8738: PUSH
8739: LD_INT 0
8741: PUSH
8742: LD_INT 0
8744: PUSH
8745: LD_INT 0
8747: PUSH
8748: EMPTY
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: ST_TO_ADDR
// BloodGods_CurrentKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8758: LD_ADDR_LOC 16
8762: PUSH
8763: LD_INT 0
8765: PUSH
8766: LD_INT 0
8768: PUSH
8769: LD_INT 0
8771: PUSH
8772: LD_INT 0
8774: PUSH
8775: LD_INT 0
8777: PUSH
8778: LD_INT 0
8780: PUSH
8781: LD_INT 0
8783: PUSH
8784: LD_INT 0
8786: PUSH
8787: EMPTY
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: ST_TO_ADDR
// BloodGods_Positions = [ [ 60 , 47 ] , [ 82 , 26 ] , [ 124 , 45 ] , [ 147 , 90 ] , [ 126 , 112 ] , [ 84 , 92 ] , [ 106 , 73 ] , [ 106 , 73 ] ] ;
8797: LD_ADDR_LOC 17
8801: PUSH
8802: LD_INT 60
8804: PUSH
8805: LD_INT 47
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: PUSH
8812: LD_INT 82
8814: PUSH
8815: LD_INT 26
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: PUSH
8822: LD_INT 124
8824: PUSH
8825: LD_INT 45
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: PUSH
8832: LD_INT 147
8834: PUSH
8835: LD_INT 90
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: PUSH
8842: LD_INT 126
8844: PUSH
8845: LD_INT 112
8847: PUSH
8848: EMPTY
8849: LIST
8850: LIST
8851: PUSH
8852: LD_INT 84
8854: PUSH
8855: LD_INT 92
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: PUSH
8862: LD_INT 106
8864: PUSH
8865: LD_INT 73
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: PUSH
8872: LD_INT 106
8874: PUSH
8875: LD_INT 73
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: ST_TO_ADDR
// ClearHumansKilled ;
8892: CALL_OW 516
// enable ( 200 ) ;
8896: LD_INT 200
8898: ENABLE_MARKED
// end ; end_of_file
8899: LD_VAR 0 1
8903: RET
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
8904: LD_INT 0
8906: PPUSH
8907: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
8908: LD_ADDR_VAR 0 2
8912: PUSH
8913: LD_STRING #Multi1x1-Time
8915: PUSH
8916: LD_OWVAR 1
8920: PUSH
8921: EMPTY
8922: LIST
8923: LIST
8924: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
8925: LD_INT 0
8927: PUSH
8928: LD_EXP 34
8932: PUSH
8933: LD_OWVAR 1
8937: MINUS
8938: LESSEQUAL
8939: IFFALSE 8970
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
8941: LD_ADDR_VAR 0 2
8945: PUSH
8946: LD_VAR 0 2
8950: PUSH
8951: LD_STRING #allowedsibbomb
8953: PUSH
8954: LD_EXP 34
8958: PUSH
8959: LD_OWVAR 1
8963: MINUS
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: ADD
8969: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
8970: LD_INT 0
8972: PUSH
8973: LD_EXP 64
8977: PUSH
8978: LD_OWVAR 1
8982: MINUS
8983: LESSEQUAL
8984: IFFALSE 9015
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
8986: LD_ADDR_VAR 0 2
8990: PUSH
8991: LD_VAR 0 2
8995: PUSH
8996: LD_STRING #builduptime
8998: PUSH
8999: LD_EXP 64
9003: PUSH
9004: LD_OWVAR 1
9008: MINUS
9009: PUSH
9010: EMPTY
9011: LIST
9012: LIST
9013: ADD
9014: ST_TO_ADDR
// if ( ExtraStrings ) then
9015: LD_EXP 60
9019: IFFALSE 9041
// AllStrings := AllStrings ^  ^ ExtraStrings ;
9021: LD_ADDR_VAR 0 2
9025: PUSH
9026: LD_VAR 0 2
9030: PUSH
9031: LD_STRING 
9033: ADD
9034: PUSH
9035: LD_EXP 60
9039: ADD
9040: ST_TO_ADDR
// Display_Strings := AllStrings ;
9041: LD_ADDR_OWVAR 47
9045: PUSH
9046: LD_VAR 0 2
9050: ST_TO_ADDR
// end ;
9051: LD_VAR 0 1
9055: RET
// every 0 0$1 do
9056: GO 9058
9058: DISABLE
// begin ShowTimer ;
9059: CALL 8904 0 0
// enable ;
9063: ENABLE
// end ; end_of_file
9064: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
9065: LD_INT 0
9067: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
9068: LD_VAR 0 1
9072: PPUSH
9073: CALL_OW 255
9077: PUSH
9078: LD_VAR 0 4
9082: EQUAL
9083: IFFALSE 9102
// begin SetAchievement ( ACH_RAD ) ;
9085: LD_STRING ACH_RAD
9087: PPUSH
9088: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
9092: LD_STRING ACH_NL
9094: PPUSH
9095: LD_INT 1
9097: PPUSH
9098: CALL_OW 564
// end end ;
9102: LD_VAR 0 5
9106: RET
// export function SA_Win ( side ) ; begin
9107: LD_INT 0
9109: PPUSH
// case side of 1 :
9110: LD_VAR 0 1
9114: PUSH
9115: LD_INT 1
9117: DOUBLE
9118: EQUAL
9119: IFTRUE 9123
9121: GO 9136
9123: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
9124: LD_STRING ACH_AH
9126: PPUSH
9127: LD_INT 1
9129: PPUSH
9130: CALL_OW 564
9134: GO 9299
9136: LD_INT 2
9138: DOUBLE
9139: EQUAL
9140: IFTRUE 9144
9142: GO 9157
9144: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
9145: LD_STRING ACH_E
9147: PPUSH
9148: LD_INT 1
9150: PPUSH
9151: CALL_OW 564
9155: GO 9299
9157: LD_INT 3
9159: DOUBLE
9160: EQUAL
9161: IFTRUE 9165
9163: GO 9178
9165: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
9166: LD_STRING ACH_OOL
9168: PPUSH
9169: LD_INT 1
9171: PPUSH
9172: CALL_OW 564
9176: GO 9299
9178: LD_INT 1
9180: PUSH
9181: LD_INT 2
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: DOUBLE
9188: EQUAL
9189: IFTRUE 9193
9191: GO 9218
9193: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
9194: LD_STRING ACH_AH
9196: PPUSH
9197: LD_REAL  5.00000000000000E-0001
9200: PPUSH
9201: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
9205: LD_STRING ACH_E
9207: PPUSH
9208: LD_REAL  5.00000000000000E-0001
9211: PPUSH
9212: CALL_OW 564
// end ; [ 2 , 3 ] :
9216: GO 9299
9218: LD_INT 2
9220: PUSH
9221: LD_INT 3
9223: PUSH
9224: EMPTY
9225: LIST
9226: LIST
9227: DOUBLE
9228: EQUAL
9229: IFTRUE 9233
9231: GO 9258
9233: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
9234: LD_STRING ACH_OOL
9236: PPUSH
9237: LD_REAL  5.00000000000000E-0001
9240: PPUSH
9241: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
9245: LD_STRING ACH_E
9247: PPUSH
9248: LD_REAL  5.00000000000000E-0001
9251: PPUSH
9252: CALL_OW 564
// end ; [ 3 , 1 ] :
9256: GO 9299
9258: LD_INT 3
9260: PUSH
9261: LD_INT 1
9263: PUSH
9264: EMPTY
9265: LIST
9266: LIST
9267: DOUBLE
9268: EQUAL
9269: IFTRUE 9273
9271: GO 9298
9273: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
9274: LD_STRING ACH_AH
9276: PPUSH
9277: LD_REAL  5.00000000000000E-0001
9280: PPUSH
9281: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
9285: LD_STRING ACH_OOL
9287: PPUSH
9288: LD_REAL  5.00000000000000E-0001
9291: PPUSH
9292: CALL_OW 564
// end ; end ;
9296: GO 9299
9298: POP
// end ; end_of_file
9299: LD_VAR 0 2
9303: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9304: LD_INT 0
9306: PPUSH
9307: PPUSH
9308: PPUSH
// for side = 1 to 8 do
9309: LD_ADDR_VAR 0 2
9313: PUSH
9314: DOUBLE
9315: LD_INT 1
9317: DEC
9318: ST_TO_ADDR
9319: LD_INT 8
9321: PUSH
9322: FOR_TO
9323: IFFALSE 9444
// begin for i = 1 to 72 do
9325: LD_ADDR_VAR 0 3
9329: PUSH
9330: DOUBLE
9331: LD_INT 1
9333: DEC
9334: ST_TO_ADDR
9335: LD_INT 72
9337: PUSH
9338: FOR_TO
9339: IFFALSE 9370
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9341: LD_VAR 0 3
9345: PPUSH
9346: LD_VAR 0 2
9350: PPUSH
9351: LD_INT 0
9353: PPUSH
9354: LD_VAR 0 3
9358: PPUSH
9359: CALL_OW 565
9363: PPUSH
9364: CALL_OW 322
9368: GO 9338
9370: POP
9371: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9372: LD_INT 73
9374: PPUSH
9375: LD_VAR 0 2
9379: PPUSH
9380: LD_INT 0
9382: PPUSH
9383: LD_INT 25
9385: PPUSH
9386: CALL_OW 565
9390: PPUSH
9391: CALL_OW 322
// for i = 0 to 40 do
9395: LD_ADDR_VAR 0 3
9399: PUSH
9400: DOUBLE
9401: LD_INT 0
9403: DEC
9404: ST_TO_ADDR
9405: LD_INT 40
9407: PUSH
9408: FOR_TO
9409: IFFALSE 9440
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9411: LD_VAR 0 3
9415: PPUSH
9416: LD_VAR 0 2
9420: PPUSH
9421: LD_INT 1
9423: PPUSH
9424: LD_VAR 0 3
9428: PPUSH
9429: CALL_OW 565
9433: PPUSH
9434: CALL_OW 324
9438: GO 9408
9440: POP
9441: POP
// end ;
9442: GO 9322
9444: POP
9445: POP
// end ;
9446: LD_VAR 0 1
9450: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9451: LD_INT 0
9453: PPUSH
9454: PPUSH
9455: PPUSH
// for side = 1 to 8 do
9456: LD_ADDR_VAR 0 3
9460: PUSH
9461: DOUBLE
9462: LD_INT 1
9464: DEC
9465: ST_TO_ADDR
9466: LD_INT 8
9468: PUSH
9469: FOR_TO
9470: IFFALSE 13466
// begin for i = 1 to 73 do
9472: LD_ADDR_VAR 0 4
9476: PUSH
9477: DOUBLE
9478: LD_INT 1
9480: DEC
9481: ST_TO_ADDR
9482: LD_INT 73
9484: PUSH
9485: FOR_TO
9486: IFFALSE 9507
// SetTech ( i , side , state_disabled ) ;
9488: LD_VAR 0 4
9492: PPUSH
9493: LD_VAR 0 3
9497: PPUSH
9498: LD_INT 0
9500: PPUSH
9501: CALL_OW 322
9505: GO 9485
9507: POP
9508: POP
// for i = 0 to 40 do
9509: LD_ADDR_VAR 0 4
9513: PUSH
9514: DOUBLE
9515: LD_INT 0
9517: DEC
9518: ST_TO_ADDR
9519: LD_INT 40
9521: PUSH
9522: FOR_TO
9523: IFFALSE 9544
// SetRestrict ( i , side , false ) ;
9525: LD_VAR 0 4
9529: PPUSH
9530: LD_VAR 0 3
9534: PPUSH
9535: LD_INT 0
9537: PPUSH
9538: CALL_OW 324
9542: GO 9522
9544: POP
9545: POP
// case level of 1 :
9546: LD_VAR 0 1
9550: PUSH
9551: LD_INT 1
9553: DOUBLE
9554: EQUAL
9555: IFTRUE 9559
9557: GO 9712
9559: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9560: LD_INT 35
9562: PPUSH
9563: LD_VAR 0 3
9567: PPUSH
9568: LD_INT 1
9570: PPUSH
9571: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9575: LD_INT 45
9577: PPUSH
9578: LD_VAR 0 3
9582: PPUSH
9583: LD_INT 1
9585: PPUSH
9586: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9590: LD_INT 46
9592: PPUSH
9593: LD_VAR 0 3
9597: PPUSH
9598: LD_INT 1
9600: PPUSH
9601: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9605: LD_INT 47
9607: PPUSH
9608: LD_VAR 0 3
9612: PPUSH
9613: LD_INT 1
9615: PPUSH
9616: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9620: LD_INT 0
9622: PPUSH
9623: LD_VAR 0 3
9627: PPUSH
9628: LD_INT 1
9630: PPUSH
9631: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9635: LD_INT 2
9637: PPUSH
9638: LD_VAR 0 3
9642: PPUSH
9643: LD_INT 1
9645: PPUSH
9646: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9650: LD_INT 4
9652: PPUSH
9653: LD_VAR 0 3
9657: PPUSH
9658: LD_INT 1
9660: PPUSH
9661: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9665: LD_INT 6
9667: PPUSH
9668: LD_VAR 0 3
9672: PPUSH
9673: LD_INT 1
9675: PPUSH
9676: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9680: LD_INT 29
9682: PPUSH
9683: LD_VAR 0 3
9687: PPUSH
9688: LD_INT 1
9690: PPUSH
9691: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9695: LD_INT 31
9697: PPUSH
9698: LD_VAR 0 3
9702: PPUSH
9703: LD_INT 1
9705: PPUSH
9706: CALL_OW 324
// end ; 2 :
9710: GO 13464
9712: LD_INT 2
9714: DOUBLE
9715: EQUAL
9716: IFTRUE 9720
9718: GO 9918
9720: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9721: LD_INT 35
9723: PPUSH
9724: LD_VAR 0 3
9728: PPUSH
9729: LD_INT 1
9731: PPUSH
9732: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9736: LD_INT 45
9738: PPUSH
9739: LD_VAR 0 3
9743: PPUSH
9744: LD_INT 1
9746: PPUSH
9747: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9751: LD_INT 46
9753: PPUSH
9754: LD_VAR 0 3
9758: PPUSH
9759: LD_INT 1
9761: PPUSH
9762: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9766: LD_INT 47
9768: PPUSH
9769: LD_VAR 0 3
9773: PPUSH
9774: LD_INT 1
9776: PPUSH
9777: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9781: LD_INT 1
9783: PPUSH
9784: LD_VAR 0 3
9788: PPUSH
9789: LD_INT 1
9791: PPUSH
9792: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9796: LD_INT 2
9798: PPUSH
9799: LD_VAR 0 3
9803: PPUSH
9804: LD_INT 1
9806: PPUSH
9807: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9811: LD_INT 11
9813: PPUSH
9814: LD_VAR 0 3
9818: PPUSH
9819: LD_INT 1
9821: PPUSH
9822: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9826: LD_INT 0
9828: PPUSH
9829: LD_VAR 0 3
9833: PPUSH
9834: LD_INT 1
9836: PPUSH
9837: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9841: LD_INT 2
9843: PPUSH
9844: LD_VAR 0 3
9848: PPUSH
9849: LD_INT 1
9851: PPUSH
9852: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9856: LD_INT 4
9858: PPUSH
9859: LD_VAR 0 3
9863: PPUSH
9864: LD_INT 1
9866: PPUSH
9867: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9871: LD_INT 6
9873: PPUSH
9874: LD_VAR 0 3
9878: PPUSH
9879: LD_INT 1
9881: PPUSH
9882: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9886: LD_INT 29
9888: PPUSH
9889: LD_VAR 0 3
9893: PPUSH
9894: LD_INT 1
9896: PPUSH
9897: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9901: LD_INT 31
9903: PPUSH
9904: LD_VAR 0 3
9908: PPUSH
9909: LD_INT 1
9911: PPUSH
9912: CALL_OW 324
// end ; 3 :
9916: GO 13464
9918: LD_INT 3
9920: DOUBLE
9921: EQUAL
9922: IFTRUE 9926
9924: GO 10379
9926: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9927: LD_INT 35
9929: PPUSH
9930: LD_VAR 0 3
9934: PPUSH
9935: LD_INT 1
9937: PPUSH
9938: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9942: LD_INT 45
9944: PPUSH
9945: LD_VAR 0 3
9949: PPUSH
9950: LD_INT 1
9952: PPUSH
9953: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9957: LD_INT 46
9959: PPUSH
9960: LD_VAR 0 3
9964: PPUSH
9965: LD_INT 1
9967: PPUSH
9968: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9972: LD_INT 47
9974: PPUSH
9975: LD_VAR 0 3
9979: PPUSH
9980: LD_INT 1
9982: PPUSH
9983: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9987: LD_INT 1
9989: PPUSH
9990: LD_VAR 0 3
9994: PPUSH
9995: LD_INT 1
9997: PPUSH
9998: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10002: LD_INT 2
10004: PPUSH
10005: LD_VAR 0 3
10009: PPUSH
10010: LD_INT 1
10012: PPUSH
10013: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10017: LD_INT 11
10019: PPUSH
10020: LD_VAR 0 3
10024: PPUSH
10025: LD_INT 1
10027: PPUSH
10028: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10032: LD_INT 48
10034: PPUSH
10035: LD_VAR 0 3
10039: PPUSH
10040: LD_INT 1
10042: PPUSH
10043: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10047: LD_INT 69
10049: PPUSH
10050: LD_VAR 0 3
10054: PPUSH
10055: LD_INT 1
10057: PPUSH
10058: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10062: LD_INT 39
10064: PPUSH
10065: LD_VAR 0 3
10069: PPUSH
10070: LD_INT 1
10072: PPUSH
10073: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10077: LD_INT 43
10079: PPUSH
10080: LD_VAR 0 3
10084: PPUSH
10085: LD_INT 1
10087: PPUSH
10088: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10092: LD_INT 51
10094: PPUSH
10095: LD_VAR 0 3
10099: PPUSH
10100: LD_INT 1
10102: PPUSH
10103: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10107: LD_INT 6
10109: PPUSH
10110: LD_VAR 0 3
10114: PPUSH
10115: LD_INT 1
10117: PPUSH
10118: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10122: LD_INT 0
10124: PPUSH
10125: LD_VAR 0 3
10129: PPUSH
10130: LD_INT 1
10132: PPUSH
10133: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10137: LD_INT 2
10139: PPUSH
10140: LD_VAR 0 3
10144: PPUSH
10145: LD_INT 1
10147: PPUSH
10148: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10152: LD_INT 3
10154: PPUSH
10155: LD_VAR 0 3
10159: PPUSH
10160: LD_INT 1
10162: PPUSH
10163: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10167: LD_INT 4
10169: PPUSH
10170: LD_VAR 0 3
10174: PPUSH
10175: LD_INT 1
10177: PPUSH
10178: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10182: LD_INT 6
10184: PPUSH
10185: LD_VAR 0 3
10189: PPUSH
10190: LD_INT 1
10192: PPUSH
10193: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10197: LD_INT 7
10199: PPUSH
10200: LD_VAR 0 3
10204: PPUSH
10205: LD_INT 1
10207: PPUSH
10208: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10212: LD_INT 8
10214: PPUSH
10215: LD_VAR 0 3
10219: PPUSH
10220: LD_INT 1
10222: PPUSH
10223: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10227: LD_INT 10
10229: PPUSH
10230: LD_VAR 0 3
10234: PPUSH
10235: LD_INT 1
10237: PPUSH
10238: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10242: LD_INT 15
10244: PPUSH
10245: LD_VAR 0 3
10249: PPUSH
10250: LD_INT 1
10252: PPUSH
10253: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10257: LD_INT 16
10259: PPUSH
10260: LD_VAR 0 3
10264: PPUSH
10265: LD_INT 1
10267: PPUSH
10268: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10272: LD_INT 17
10274: PPUSH
10275: LD_VAR 0 3
10279: PPUSH
10280: LD_INT 1
10282: PPUSH
10283: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10287: LD_INT 20
10289: PPUSH
10290: LD_VAR 0 3
10294: PPUSH
10295: LD_INT 1
10297: PPUSH
10298: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10302: LD_INT 26
10304: PPUSH
10305: LD_VAR 0 3
10309: PPUSH
10310: LD_INT 1
10312: PPUSH
10313: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10317: LD_INT 27
10319: PPUSH
10320: LD_VAR 0 3
10324: PPUSH
10325: LD_INT 1
10327: PPUSH
10328: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10332: LD_INT 29
10334: PPUSH
10335: LD_VAR 0 3
10339: PPUSH
10340: LD_INT 1
10342: PPUSH
10343: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10347: LD_INT 31
10349: PPUSH
10350: LD_VAR 0 3
10354: PPUSH
10355: LD_INT 1
10357: PPUSH
10358: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10362: LD_INT 32
10364: PPUSH
10365: LD_VAR 0 3
10369: PPUSH
10370: LD_INT 1
10372: PPUSH
10373: CALL_OW 324
// end ; 4 :
10377: GO 13464
10379: LD_INT 4
10381: DOUBLE
10382: EQUAL
10383: IFTRUE 10387
10385: GO 11335
10387: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10388: LD_INT 35
10390: PPUSH
10391: LD_VAR 0 3
10395: PPUSH
10396: LD_INT 1
10398: PPUSH
10399: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10403: LD_INT 45
10405: PPUSH
10406: LD_VAR 0 3
10410: PPUSH
10411: LD_INT 1
10413: PPUSH
10414: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10418: LD_INT 46
10420: PPUSH
10421: LD_VAR 0 3
10425: PPUSH
10426: LD_INT 1
10428: PPUSH
10429: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10433: LD_INT 47
10435: PPUSH
10436: LD_VAR 0 3
10440: PPUSH
10441: LD_INT 1
10443: PPUSH
10444: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10448: LD_INT 1
10450: PPUSH
10451: LD_VAR 0 3
10455: PPUSH
10456: LD_INT 1
10458: PPUSH
10459: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10463: LD_INT 2
10465: PPUSH
10466: LD_VAR 0 3
10470: PPUSH
10471: LD_INT 1
10473: PPUSH
10474: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10478: LD_INT 11
10480: PPUSH
10481: LD_VAR 0 3
10485: PPUSH
10486: LD_INT 1
10488: PPUSH
10489: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10493: LD_INT 20
10495: PPUSH
10496: LD_VAR 0 3
10500: PPUSH
10501: LD_INT 1
10503: PPUSH
10504: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10508: LD_INT 48
10510: PPUSH
10511: LD_VAR 0 3
10515: PPUSH
10516: LD_INT 1
10518: PPUSH
10519: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10523: LD_INT 49
10525: PPUSH
10526: LD_VAR 0 3
10530: PPUSH
10531: LD_INT 1
10533: PPUSH
10534: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10538: LD_INT 69
10540: PPUSH
10541: LD_VAR 0 3
10545: PPUSH
10546: LD_INT 1
10548: PPUSH
10549: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10553: LD_INT 39
10555: PPUSH
10556: LD_VAR 0 3
10560: PPUSH
10561: LD_INT 1
10563: PPUSH
10564: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10568: LD_INT 34
10570: PPUSH
10571: LD_VAR 0 3
10575: PPUSH
10576: LD_INT 1
10578: PPUSH
10579: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10583: LD_INT 42
10585: PPUSH
10586: LD_VAR 0 3
10590: PPUSH
10591: LD_INT 1
10593: PPUSH
10594: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10598: LD_INT 44
10600: PPUSH
10601: LD_VAR 0 3
10605: PPUSH
10606: LD_INT 1
10608: PPUSH
10609: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10613: LD_INT 41
10615: PPUSH
10616: LD_VAR 0 3
10620: PPUSH
10621: LD_INT 1
10623: PPUSH
10624: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10628: LD_INT 43
10630: PPUSH
10631: LD_VAR 0 3
10635: PPUSH
10636: LD_INT 1
10638: PPUSH
10639: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10643: LD_INT 70
10645: PPUSH
10646: LD_VAR 0 3
10650: PPUSH
10651: LD_INT 1
10653: PPUSH
10654: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10658: LD_INT 51
10660: PPUSH
10661: LD_VAR 0 3
10665: PPUSH
10666: LD_INT 1
10668: PPUSH
10669: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10673: LD_INT 52
10675: PPUSH
10676: LD_VAR 0 3
10680: PPUSH
10681: LD_INT 1
10683: PPUSH
10684: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10688: LD_INT 6
10690: PPUSH
10691: LD_VAR 0 3
10695: PPUSH
10696: LD_INT 1
10698: PPUSH
10699: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10703: LD_INT 15
10705: PPUSH
10706: LD_VAR 0 3
10710: PPUSH
10711: LD_INT 1
10713: PPUSH
10714: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10718: LD_INT 7
10720: PPUSH
10721: LD_VAR 0 3
10725: PPUSH
10726: LD_INT 1
10728: PPUSH
10729: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10733: LD_INT 12
10735: PPUSH
10736: LD_VAR 0 3
10740: PPUSH
10741: LD_INT 1
10743: PPUSH
10744: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10748: LD_INT 18
10750: PPUSH
10751: LD_VAR 0 3
10755: PPUSH
10756: LD_INT 1
10758: PPUSH
10759: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10763: LD_INT 60
10765: PPUSH
10766: LD_VAR 0 3
10770: PPUSH
10771: LD_INT 1
10773: PPUSH
10774: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10778: LD_INT 9
10780: PPUSH
10781: LD_VAR 0 3
10785: PPUSH
10786: LD_INT 1
10788: PPUSH
10789: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10793: LD_INT 30
10795: PPUSH
10796: LD_VAR 0 3
10800: PPUSH
10801: LD_INT 1
10803: PPUSH
10804: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10808: LD_INT 37
10810: PPUSH
10811: LD_VAR 0 3
10815: PPUSH
10816: LD_INT 1
10818: PPUSH
10819: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10823: LD_INT 5
10825: PPUSH
10826: LD_VAR 0 3
10830: PPUSH
10831: LD_INT 1
10833: PPUSH
10834: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10838: LD_INT 66
10840: PPUSH
10841: LD_VAR 0 3
10845: PPUSH
10846: LD_INT 1
10848: PPUSH
10849: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10853: LD_INT 21
10855: PPUSH
10856: LD_VAR 0 3
10860: PPUSH
10861: LD_INT 1
10863: PPUSH
10864: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10868: LD_INT 22
10870: PPUSH
10871: LD_VAR 0 3
10875: PPUSH
10876: LD_INT 1
10878: PPUSH
10879: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10883: LD_INT 54
10885: PPUSH
10886: LD_VAR 0 3
10890: PPUSH
10891: LD_INT 1
10893: PPUSH
10894: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10898: LD_INT 0
10900: PPUSH
10901: LD_VAR 0 3
10905: PPUSH
10906: LD_INT 1
10908: PPUSH
10909: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10913: LD_INT 1
10915: PPUSH
10916: LD_VAR 0 3
10920: PPUSH
10921: LD_INT 1
10923: PPUSH
10924: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10928: LD_INT 2
10930: PPUSH
10931: LD_VAR 0 3
10935: PPUSH
10936: LD_INT 1
10938: PPUSH
10939: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10943: LD_INT 3
10945: PPUSH
10946: LD_VAR 0 3
10950: PPUSH
10951: LD_INT 1
10953: PPUSH
10954: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10958: LD_INT 4
10960: PPUSH
10961: LD_VAR 0 3
10965: PPUSH
10966: LD_INT 1
10968: PPUSH
10969: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10973: LD_INT 5
10975: PPUSH
10976: LD_VAR 0 3
10980: PPUSH
10981: LD_INT 1
10983: PPUSH
10984: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10988: LD_INT 6
10990: PPUSH
10991: LD_VAR 0 3
10995: PPUSH
10996: LD_INT 1
10998: PPUSH
10999: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11003: LD_INT 7
11005: PPUSH
11006: LD_VAR 0 3
11010: PPUSH
11011: LD_INT 1
11013: PPUSH
11014: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11018: LD_INT 8
11020: PPUSH
11021: LD_VAR 0 3
11025: PPUSH
11026: LD_INT 1
11028: PPUSH
11029: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11033: LD_INT 10
11035: PPUSH
11036: LD_VAR 0 3
11040: PPUSH
11041: LD_INT 1
11043: PPUSH
11044: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11048: LD_INT 11
11050: PPUSH
11051: LD_VAR 0 3
11055: PPUSH
11056: LD_INT 1
11058: PPUSH
11059: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11063: LD_INT 12
11065: PPUSH
11066: LD_VAR 0 3
11070: PPUSH
11071: LD_INT 1
11073: PPUSH
11074: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11078: LD_INT 13
11080: PPUSH
11081: LD_VAR 0 3
11085: PPUSH
11086: LD_INT 1
11088: PPUSH
11089: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11093: LD_INT 14
11095: PPUSH
11096: LD_VAR 0 3
11100: PPUSH
11101: LD_INT 1
11103: PPUSH
11104: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11108: LD_INT 15
11110: PPUSH
11111: LD_VAR 0 3
11115: PPUSH
11116: LD_INT 1
11118: PPUSH
11119: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11123: LD_INT 16
11125: PPUSH
11126: LD_VAR 0 3
11130: PPUSH
11131: LD_INT 1
11133: PPUSH
11134: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11138: LD_INT 17
11140: PPUSH
11141: LD_VAR 0 3
11145: PPUSH
11146: LD_INT 1
11148: PPUSH
11149: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11153: LD_INT 19
11155: PPUSH
11156: LD_VAR 0 3
11160: PPUSH
11161: LD_INT 1
11163: PPUSH
11164: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11168: LD_INT 20
11170: PPUSH
11171: LD_VAR 0 3
11175: PPUSH
11176: LD_INT 1
11178: PPUSH
11179: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11183: LD_INT 21
11185: PPUSH
11186: LD_VAR 0 3
11190: PPUSH
11191: LD_INT 1
11193: PPUSH
11194: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11198: LD_INT 23
11200: PPUSH
11201: LD_VAR 0 3
11205: PPUSH
11206: LD_INT 1
11208: PPUSH
11209: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11213: LD_INT 26
11215: PPUSH
11216: LD_VAR 0 3
11220: PPUSH
11221: LD_INT 1
11223: PPUSH
11224: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11228: LD_INT 27
11230: PPUSH
11231: LD_VAR 0 3
11235: PPUSH
11236: LD_INT 1
11238: PPUSH
11239: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11243: LD_INT 28
11245: PPUSH
11246: LD_VAR 0 3
11250: PPUSH
11251: LD_INT 1
11253: PPUSH
11254: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11258: LD_INT 29
11260: PPUSH
11261: LD_VAR 0 3
11265: PPUSH
11266: LD_INT 1
11268: PPUSH
11269: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11273: LD_INT 30
11275: PPUSH
11276: LD_VAR 0 3
11280: PPUSH
11281: LD_INT 1
11283: PPUSH
11284: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11288: LD_INT 31
11290: PPUSH
11291: LD_VAR 0 3
11295: PPUSH
11296: LD_INT 1
11298: PPUSH
11299: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11303: LD_INT 32
11305: PPUSH
11306: LD_VAR 0 3
11310: PPUSH
11311: LD_INT 1
11313: PPUSH
11314: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11318: LD_INT 36
11320: PPUSH
11321: LD_VAR 0 3
11325: PPUSH
11326: LD_INT 1
11328: PPUSH
11329: CALL_OW 324
// end ; 5 :
11333: GO 13464
11335: LD_INT 5
11337: DOUBLE
11338: EQUAL
11339: IFTRUE 11343
11341: GO 12456
11343: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11344: LD_INT 35
11346: PPUSH
11347: LD_VAR 0 3
11351: PPUSH
11352: LD_INT 1
11354: PPUSH
11355: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11359: LD_INT 45
11361: PPUSH
11362: LD_VAR 0 3
11366: PPUSH
11367: LD_INT 1
11369: PPUSH
11370: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11374: LD_INT 46
11376: PPUSH
11377: LD_VAR 0 3
11381: PPUSH
11382: LD_INT 1
11384: PPUSH
11385: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11389: LD_INT 47
11391: PPUSH
11392: LD_VAR 0 3
11396: PPUSH
11397: LD_INT 1
11399: PPUSH
11400: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11404: LD_INT 1
11406: PPUSH
11407: LD_VAR 0 3
11411: PPUSH
11412: LD_INT 1
11414: PPUSH
11415: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11419: LD_INT 2
11421: PPUSH
11422: LD_VAR 0 3
11426: PPUSH
11427: LD_INT 1
11429: PPUSH
11430: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11434: LD_INT 11
11436: PPUSH
11437: LD_VAR 0 3
11441: PPUSH
11442: LD_INT 1
11444: PPUSH
11445: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11449: LD_INT 20
11451: PPUSH
11452: LD_VAR 0 3
11456: PPUSH
11457: LD_INT 1
11459: PPUSH
11460: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11464: LD_INT 48
11466: PPUSH
11467: LD_VAR 0 3
11471: PPUSH
11472: LD_INT 1
11474: PPUSH
11475: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11479: LD_INT 49
11481: PPUSH
11482: LD_VAR 0 3
11486: PPUSH
11487: LD_INT 1
11489: PPUSH
11490: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11494: LD_INT 69
11496: PPUSH
11497: LD_VAR 0 3
11501: PPUSH
11502: LD_INT 1
11504: PPUSH
11505: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11509: LD_INT 39
11511: PPUSH
11512: LD_VAR 0 3
11516: PPUSH
11517: LD_INT 1
11519: PPUSH
11520: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11524: LD_INT 34
11526: PPUSH
11527: LD_VAR 0 3
11531: PPUSH
11532: LD_INT 1
11534: PPUSH
11535: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11539: LD_INT 42
11541: PPUSH
11542: LD_VAR 0 3
11546: PPUSH
11547: LD_INT 1
11549: PPUSH
11550: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11554: LD_INT 44
11556: PPUSH
11557: LD_VAR 0 3
11561: PPUSH
11562: LD_INT 1
11564: PPUSH
11565: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11569: LD_INT 41
11571: PPUSH
11572: LD_VAR 0 3
11576: PPUSH
11577: LD_INT 1
11579: PPUSH
11580: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11584: LD_INT 40
11586: PPUSH
11587: LD_VAR 0 3
11591: PPUSH
11592: LD_INT 1
11594: PPUSH
11595: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11599: LD_INT 43
11601: PPUSH
11602: LD_VAR 0 3
11606: PPUSH
11607: LD_INT 1
11609: PPUSH
11610: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11614: LD_INT 70
11616: PPUSH
11617: LD_VAR 0 3
11621: PPUSH
11622: LD_INT 1
11624: PPUSH
11625: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11629: LD_INT 51
11631: PPUSH
11632: LD_VAR 0 3
11636: PPUSH
11637: LD_INT 1
11639: PPUSH
11640: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11644: LD_INT 52
11646: PPUSH
11647: LD_VAR 0 3
11651: PPUSH
11652: LD_INT 1
11654: PPUSH
11655: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11659: LD_INT 6
11661: PPUSH
11662: LD_VAR 0 3
11666: PPUSH
11667: LD_INT 1
11669: PPUSH
11670: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11674: LD_INT 15
11676: PPUSH
11677: LD_VAR 0 3
11681: PPUSH
11682: LD_INT 1
11684: PPUSH
11685: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11689: LD_INT 7
11691: PPUSH
11692: LD_VAR 0 3
11696: PPUSH
11697: LD_INT 1
11699: PPUSH
11700: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11704: LD_INT 12
11706: PPUSH
11707: LD_VAR 0 3
11711: PPUSH
11712: LD_INT 1
11714: PPUSH
11715: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11719: LD_INT 17
11721: PPUSH
11722: LD_VAR 0 3
11726: PPUSH
11727: LD_INT 1
11729: PPUSH
11730: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11734: LD_INT 18
11736: PPUSH
11737: LD_VAR 0 3
11741: PPUSH
11742: LD_INT 1
11744: PPUSH
11745: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11749: LD_INT 60
11751: PPUSH
11752: LD_VAR 0 3
11756: PPUSH
11757: LD_INT 1
11759: PPUSH
11760: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11764: LD_INT 32
11766: PPUSH
11767: LD_VAR 0 3
11771: PPUSH
11772: LD_INT 1
11774: PPUSH
11775: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11779: LD_INT 9
11781: PPUSH
11782: LD_VAR 0 3
11786: PPUSH
11787: LD_INT 1
11789: PPUSH
11790: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11794: LD_INT 57
11796: PPUSH
11797: LD_VAR 0 3
11801: PPUSH
11802: LD_INT 1
11804: PPUSH
11805: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11809: LD_INT 30
11811: PPUSH
11812: LD_VAR 0 3
11816: PPUSH
11817: LD_INT 1
11819: PPUSH
11820: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11824: LD_INT 37
11826: PPUSH
11827: LD_VAR 0 3
11831: PPUSH
11832: LD_INT 1
11834: PPUSH
11835: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11839: LD_INT 63
11841: PPUSH
11842: LD_VAR 0 3
11846: PPUSH
11847: LD_INT 1
11849: PPUSH
11850: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11854: LD_INT 3
11856: PPUSH
11857: LD_VAR 0 3
11861: PPUSH
11862: LD_INT 1
11864: PPUSH
11865: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11869: LD_INT 4
11871: PPUSH
11872: LD_VAR 0 3
11876: PPUSH
11877: LD_INT 1
11879: PPUSH
11880: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11884: LD_INT 5
11886: PPUSH
11887: LD_VAR 0 3
11891: PPUSH
11892: LD_INT 1
11894: PPUSH
11895: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11899: LD_INT 66
11901: PPUSH
11902: LD_VAR 0 3
11906: PPUSH
11907: LD_INT 1
11909: PPUSH
11910: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11914: LD_INT 21
11916: PPUSH
11917: LD_VAR 0 3
11921: PPUSH
11922: LD_INT 1
11924: PPUSH
11925: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11929: LD_INT 22
11931: PPUSH
11932: LD_VAR 0 3
11936: PPUSH
11937: LD_INT 1
11939: PPUSH
11940: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11944: LD_INT 19
11946: PPUSH
11947: LD_VAR 0 3
11951: PPUSH
11952: LD_INT 1
11954: PPUSH
11955: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11959: LD_INT 54
11961: PPUSH
11962: LD_VAR 0 3
11966: PPUSH
11967: LD_INT 1
11969: PPUSH
11970: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
11974: LD_INT 55
11976: PPUSH
11977: LD_VAR 0 3
11981: PPUSH
11982: LD_INT 1
11984: PPUSH
11985: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11989: LD_INT 0
11991: PPUSH
11992: LD_VAR 0 3
11996: PPUSH
11997: LD_INT 1
11999: PPUSH
12000: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12004: LD_INT 1
12006: PPUSH
12007: LD_VAR 0 3
12011: PPUSH
12012: LD_INT 1
12014: PPUSH
12015: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12019: LD_INT 2
12021: PPUSH
12022: LD_VAR 0 3
12026: PPUSH
12027: LD_INT 1
12029: PPUSH
12030: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12034: LD_INT 3
12036: PPUSH
12037: LD_VAR 0 3
12041: PPUSH
12042: LD_INT 1
12044: PPUSH
12045: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12049: LD_INT 4
12051: PPUSH
12052: LD_VAR 0 3
12056: PPUSH
12057: LD_INT 1
12059: PPUSH
12060: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12064: LD_INT 5
12066: PPUSH
12067: LD_VAR 0 3
12071: PPUSH
12072: LD_INT 1
12074: PPUSH
12075: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12079: LD_INT 6
12081: PPUSH
12082: LD_VAR 0 3
12086: PPUSH
12087: LD_INT 1
12089: PPUSH
12090: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12094: LD_INT 7
12096: PPUSH
12097: LD_VAR 0 3
12101: PPUSH
12102: LD_INT 1
12104: PPUSH
12105: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12109: LD_INT 8
12111: PPUSH
12112: LD_VAR 0 3
12116: PPUSH
12117: LD_INT 1
12119: PPUSH
12120: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12124: LD_INT 10
12126: PPUSH
12127: LD_VAR 0 3
12131: PPUSH
12132: LD_INT 1
12134: PPUSH
12135: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12139: LD_INT 11
12141: PPUSH
12142: LD_VAR 0 3
12146: PPUSH
12147: LD_INT 1
12149: PPUSH
12150: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12154: LD_INT 12
12156: PPUSH
12157: LD_VAR 0 3
12161: PPUSH
12162: LD_INT 1
12164: PPUSH
12165: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12169: LD_INT 13
12171: PPUSH
12172: LD_VAR 0 3
12176: PPUSH
12177: LD_INT 1
12179: PPUSH
12180: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12184: LD_INT 14
12186: PPUSH
12187: LD_VAR 0 3
12191: PPUSH
12192: LD_INT 1
12194: PPUSH
12195: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12199: LD_INT 15
12201: PPUSH
12202: LD_VAR 0 3
12206: PPUSH
12207: LD_INT 1
12209: PPUSH
12210: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12214: LD_INT 16
12216: PPUSH
12217: LD_VAR 0 3
12221: PPUSH
12222: LD_INT 1
12224: PPUSH
12225: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12229: LD_INT 17
12231: PPUSH
12232: LD_VAR 0 3
12236: PPUSH
12237: LD_INT 1
12239: PPUSH
12240: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
12244: LD_INT 18
12246: PPUSH
12247: LD_VAR 0 3
12251: PPUSH
12252: LD_INT 1
12254: PPUSH
12255: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12259: LD_INT 19
12261: PPUSH
12262: LD_VAR 0 3
12266: PPUSH
12267: LD_INT 1
12269: PPUSH
12270: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12274: LD_INT 20
12276: PPUSH
12277: LD_VAR 0 3
12281: PPUSH
12282: LD_INT 1
12284: PPUSH
12285: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12289: LD_INT 21
12291: PPUSH
12292: LD_VAR 0 3
12296: PPUSH
12297: LD_INT 1
12299: PPUSH
12300: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12304: LD_INT 23
12306: PPUSH
12307: LD_VAR 0 3
12311: PPUSH
12312: LD_INT 1
12314: PPUSH
12315: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12319: LD_INT 26
12321: PPUSH
12322: LD_VAR 0 3
12326: PPUSH
12327: LD_INT 1
12329: PPUSH
12330: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12334: LD_INT 27
12336: PPUSH
12337: LD_VAR 0 3
12341: PPUSH
12342: LD_INT 1
12344: PPUSH
12345: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12349: LD_INT 28
12351: PPUSH
12352: LD_VAR 0 3
12356: PPUSH
12357: LD_INT 1
12359: PPUSH
12360: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12364: LD_INT 29
12366: PPUSH
12367: LD_VAR 0 3
12371: PPUSH
12372: LD_INT 1
12374: PPUSH
12375: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12379: LD_INT 30
12381: PPUSH
12382: LD_VAR 0 3
12386: PPUSH
12387: LD_INT 1
12389: PPUSH
12390: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12394: LD_INT 31
12396: PPUSH
12397: LD_VAR 0 3
12401: PPUSH
12402: LD_INT 1
12404: PPUSH
12405: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12409: LD_INT 32
12411: PPUSH
12412: LD_VAR 0 3
12416: PPUSH
12417: LD_INT 1
12419: PPUSH
12420: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
12424: LD_INT 33
12426: PPUSH
12427: LD_VAR 0 3
12431: PPUSH
12432: LD_INT 1
12434: PPUSH
12435: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12439: LD_INT 36
12441: PPUSH
12442: LD_VAR 0 3
12446: PPUSH
12447: LD_INT 1
12449: PPUSH
12450: CALL_OW 324
// end ; 6 :
12454: GO 13464
12456: LD_INT 6
12458: DOUBLE
12459: EQUAL
12460: IFTRUE 12464
12462: GO 13389
12464: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12465: LD_INT 35
12467: PPUSH
12468: LD_VAR 0 3
12472: PPUSH
12473: LD_INT 1
12475: PPUSH
12476: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12480: LD_INT 45
12482: PPUSH
12483: LD_VAR 0 3
12487: PPUSH
12488: LD_INT 1
12490: PPUSH
12491: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12495: LD_INT 46
12497: PPUSH
12498: LD_VAR 0 3
12502: PPUSH
12503: LD_INT 1
12505: PPUSH
12506: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12510: LD_INT 47
12512: PPUSH
12513: LD_VAR 0 3
12517: PPUSH
12518: LD_INT 1
12520: PPUSH
12521: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12525: LD_INT 1
12527: PPUSH
12528: LD_VAR 0 3
12532: PPUSH
12533: LD_INT 1
12535: PPUSH
12536: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12540: LD_INT 2
12542: PPUSH
12543: LD_VAR 0 3
12547: PPUSH
12548: LD_INT 1
12550: PPUSH
12551: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12555: LD_INT 11
12557: PPUSH
12558: LD_VAR 0 3
12562: PPUSH
12563: LD_INT 1
12565: PPUSH
12566: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12570: LD_INT 20
12572: PPUSH
12573: LD_VAR 0 3
12577: PPUSH
12578: LD_INT 1
12580: PPUSH
12581: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12585: LD_INT 48
12587: PPUSH
12588: LD_VAR 0 3
12592: PPUSH
12593: LD_INT 1
12595: PPUSH
12596: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12600: LD_INT 49
12602: PPUSH
12603: LD_VAR 0 3
12607: PPUSH
12608: LD_INT 1
12610: PPUSH
12611: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12615: LD_INT 50
12617: PPUSH
12618: LD_VAR 0 3
12622: PPUSH
12623: LD_INT 1
12625: PPUSH
12626: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12630: LD_INT 69
12632: PPUSH
12633: LD_VAR 0 3
12637: PPUSH
12638: LD_INT 1
12640: PPUSH
12641: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12645: LD_INT 39
12647: PPUSH
12648: LD_VAR 0 3
12652: PPUSH
12653: LD_INT 1
12655: PPUSH
12656: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12660: LD_INT 34
12662: PPUSH
12663: LD_VAR 0 3
12667: PPUSH
12668: LD_INT 1
12670: PPUSH
12671: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12675: LD_INT 42
12677: PPUSH
12678: LD_VAR 0 3
12682: PPUSH
12683: LD_INT 1
12685: PPUSH
12686: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12690: LD_INT 44
12692: PPUSH
12693: LD_VAR 0 3
12697: PPUSH
12698: LD_INT 1
12700: PPUSH
12701: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12705: LD_INT 41
12707: PPUSH
12708: LD_VAR 0 3
12712: PPUSH
12713: LD_INT 1
12715: PPUSH
12716: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
12720: LD_INT 13
12722: PPUSH
12723: LD_VAR 0 3
12727: PPUSH
12728: LD_INT 1
12730: PPUSH
12731: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12735: LD_INT 40
12737: PPUSH
12738: LD_VAR 0 3
12742: PPUSH
12743: LD_INT 1
12745: PPUSH
12746: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12750: LD_INT 43
12752: PPUSH
12753: LD_VAR 0 3
12757: PPUSH
12758: LD_INT 1
12760: PPUSH
12761: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12765: LD_INT 70
12767: PPUSH
12768: LD_VAR 0 3
12772: PPUSH
12773: LD_INT 1
12775: PPUSH
12776: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
12780: LD_INT 23
12782: PPUSH
12783: LD_VAR 0 3
12787: PPUSH
12788: LD_INT 1
12790: PPUSH
12791: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12795: LD_INT 51
12797: PPUSH
12798: LD_VAR 0 3
12802: PPUSH
12803: LD_INT 1
12805: PPUSH
12806: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12810: LD_INT 52
12812: PPUSH
12813: LD_VAR 0 3
12817: PPUSH
12818: LD_INT 1
12820: PPUSH
12821: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12825: LD_INT 6
12827: PPUSH
12828: LD_VAR 0 3
12832: PPUSH
12833: LD_INT 1
12835: PPUSH
12836: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12840: LD_INT 15
12842: PPUSH
12843: LD_VAR 0 3
12847: PPUSH
12848: LD_INT 1
12850: PPUSH
12851: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12855: LD_INT 7
12857: PPUSH
12858: LD_VAR 0 3
12862: PPUSH
12863: LD_INT 1
12865: PPUSH
12866: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12870: LD_INT 12
12872: PPUSH
12873: LD_VAR 0 3
12877: PPUSH
12878: LD_INT 1
12880: PPUSH
12881: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
12885: LD_INT 10
12887: PPUSH
12888: LD_VAR 0 3
12892: PPUSH
12893: LD_INT 1
12895: PPUSH
12896: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12900: LD_INT 17
12902: PPUSH
12903: LD_VAR 0 3
12907: PPUSH
12908: LD_INT 1
12910: PPUSH
12911: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12915: LD_INT 18
12917: PPUSH
12918: LD_VAR 0 3
12922: PPUSH
12923: LD_INT 1
12925: PPUSH
12926: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12930: LD_INT 60
12932: PPUSH
12933: LD_VAR 0 3
12937: PPUSH
12938: LD_INT 1
12940: PPUSH
12941: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
12945: LD_INT 61
12947: PPUSH
12948: LD_VAR 0 3
12952: PPUSH
12953: LD_INT 1
12955: PPUSH
12956: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12960: LD_INT 32
12962: PPUSH
12963: LD_VAR 0 3
12967: PPUSH
12968: LD_INT 1
12970: PPUSH
12971: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
12975: LD_INT 27
12977: PPUSH
12978: LD_VAR 0 3
12982: PPUSH
12983: LD_INT 1
12985: PPUSH
12986: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
12990: LD_INT 36
12992: PPUSH
12993: LD_VAR 0 3
12997: PPUSH
12998: LD_INT 1
13000: PPUSH
13001: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
13005: LD_INT 33
13007: PPUSH
13008: LD_VAR 0 3
13012: PPUSH
13013: LD_INT 1
13015: PPUSH
13016: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13020: LD_INT 9
13022: PPUSH
13023: LD_VAR 0 3
13027: PPUSH
13028: LD_INT 1
13030: PPUSH
13031: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13035: LD_INT 38
13037: PPUSH
13038: LD_VAR 0 3
13042: PPUSH
13043: LD_INT 1
13045: PPUSH
13046: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13050: LD_INT 57
13052: PPUSH
13053: LD_VAR 0 3
13057: PPUSH
13058: LD_INT 1
13060: PPUSH
13061: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13065: LD_INT 58
13067: PPUSH
13068: LD_VAR 0 3
13072: PPUSH
13073: LD_INT 1
13075: PPUSH
13076: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13080: LD_INT 28
13082: PPUSH
13083: LD_VAR 0 3
13087: PPUSH
13088: LD_INT 1
13090: PPUSH
13091: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13095: LD_INT 29
13097: PPUSH
13098: LD_VAR 0 3
13102: PPUSH
13103: LD_INT 1
13105: PPUSH
13106: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13110: LD_INT 30
13112: PPUSH
13113: LD_VAR 0 3
13117: PPUSH
13118: LD_INT 1
13120: PPUSH
13121: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13125: LD_INT 37
13127: PPUSH
13128: LD_VAR 0 3
13132: PPUSH
13133: LD_INT 1
13135: PPUSH
13136: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13140: LD_INT 63
13142: PPUSH
13143: LD_VAR 0 3
13147: PPUSH
13148: LD_INT 1
13150: PPUSH
13151: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13155: LD_INT 64
13157: PPUSH
13158: LD_VAR 0 3
13162: PPUSH
13163: LD_INT 1
13165: PPUSH
13166: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13170: LD_INT 3
13172: PPUSH
13173: LD_VAR 0 3
13177: PPUSH
13178: LD_INT 1
13180: PPUSH
13181: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13185: LD_INT 4
13187: PPUSH
13188: LD_VAR 0 3
13192: PPUSH
13193: LD_INT 1
13195: PPUSH
13196: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13200: LD_INT 5
13202: PPUSH
13203: LD_VAR 0 3
13207: PPUSH
13208: LD_INT 1
13210: PPUSH
13211: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13215: LD_INT 8
13217: PPUSH
13218: LD_VAR 0 3
13222: PPUSH
13223: LD_INT 1
13225: PPUSH
13226: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13230: LD_INT 66
13232: PPUSH
13233: LD_VAR 0 3
13237: PPUSH
13238: LD_INT 1
13240: PPUSH
13241: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
13245: LD_INT 67
13247: PPUSH
13248: LD_VAR 0 3
13252: PPUSH
13253: LD_INT 1
13255: PPUSH
13256: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13260: LD_INT 21
13262: PPUSH
13263: LD_VAR 0 3
13267: PPUSH
13268: LD_INT 1
13270: PPUSH
13271: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13275: LD_INT 22
13277: PPUSH
13278: LD_VAR 0 3
13282: PPUSH
13283: LD_INT 1
13285: PPUSH
13286: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13290: LD_INT 19
13292: PPUSH
13293: LD_VAR 0 3
13297: PPUSH
13298: LD_INT 1
13300: PPUSH
13301: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13305: LD_INT 26
13307: PPUSH
13308: LD_VAR 0 3
13312: PPUSH
13313: LD_INT 1
13315: PPUSH
13316: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13320: LD_INT 54
13322: PPUSH
13323: LD_VAR 0 3
13327: PPUSH
13328: LD_INT 1
13330: PPUSH
13331: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13335: LD_INT 55
13337: PPUSH
13338: LD_VAR 0 3
13342: PPUSH
13343: LD_INT 1
13345: PPUSH
13346: CALL_OW 322
// for i = 0 to 39 do
13350: LD_ADDR_VAR 0 4
13354: PUSH
13355: DOUBLE
13356: LD_INT 0
13358: DEC
13359: ST_TO_ADDR
13360: LD_INT 39
13362: PUSH
13363: FOR_TO
13364: IFFALSE 13385
// SetRestrict ( i , side , true ) ;
13366: LD_VAR 0 4
13370: PPUSH
13371: LD_VAR 0 3
13375: PPUSH
13376: LD_INT 1
13378: PPUSH
13379: CALL_OW 324
13383: GO 13363
13385: POP
13386: POP
// end ; else
13387: GO 13464
13389: POP
// begin for i = 1 to 73 do
13390: LD_ADDR_VAR 0 4
13394: PUSH
13395: DOUBLE
13396: LD_INT 1
13398: DEC
13399: ST_TO_ADDR
13400: LD_INT 73
13402: PUSH
13403: FOR_TO
13404: IFFALSE 13425
// SetTech ( i , side , state_enabled ) ;
13406: LD_VAR 0 4
13410: PPUSH
13411: LD_VAR 0 3
13415: PPUSH
13416: LD_INT 1
13418: PPUSH
13419: CALL_OW 322
13423: GO 13403
13425: POP
13426: POP
// for i = 0 to 39 do
13427: LD_ADDR_VAR 0 4
13431: PUSH
13432: DOUBLE
13433: LD_INT 0
13435: DEC
13436: ST_TO_ADDR
13437: LD_INT 39
13439: PUSH
13440: FOR_TO
13441: IFFALSE 13462
// SetRestrict ( i , side , true ) ;
13443: LD_VAR 0 4
13447: PPUSH
13448: LD_VAR 0 3
13452: PPUSH
13453: LD_INT 1
13455: PPUSH
13456: CALL_OW 324
13460: GO 13440
13462: POP
13463: POP
// end ; end ; end ;
13464: GO 9469
13466: POP
13467: POP
// end ; end_of_file
13468: LD_VAR 0 2
13472: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
13473: LD_INT 0
13475: PPUSH
13476: PPUSH
13477: PPUSH
13478: PPUSH
13479: PPUSH
13480: PPUSH
13481: PPUSH
13482: PPUSH
13483: PPUSH
// for i := 1 to 8 do
13484: LD_ADDR_VAR 0 2
13488: PUSH
13489: DOUBLE
13490: LD_INT 1
13492: DEC
13493: ST_TO_ADDR
13494: LD_INT 8
13496: PUSH
13497: FOR_TO
13498: IFFALSE 13882
// begin if Side_Positions [ i ] then
13500: LD_EXP 38
13504: PUSH
13505: LD_VAR 0 2
13509: ARRAY
13510: IFFALSE 13880
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
13512: LD_ADDR_VAR 0 7
13516: PUSH
13517: LD_INT 22
13519: PUSH
13520: LD_VAR 0 2
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: PUSH
13529: LD_INT 21
13531: PUSH
13532: LD_INT 1
13534: PUSH
13535: EMPTY
13536: LIST
13537: LIST
13538: PUSH
13539: EMPTY
13540: LIST
13541: LIST
13542: PPUSH
13543: CALL_OW 69
13547: PUSH
13548: LD_INT 0
13550: PLUS
13551: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13552: LD_ADDR_VAR 0 9
13556: PUSH
13557: LD_INT 22
13559: PUSH
13560: LD_VAR 0 2
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: PUSH
13569: LD_INT 2
13571: PUSH
13572: LD_INT 30
13574: PUSH
13575: LD_INT 0
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: PUSH
13582: LD_INT 30
13584: PUSH
13585: LD_INT 1
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: LIST
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: PPUSH
13601: CALL_OW 69
13605: ST_TO_ADDR
// crates := 0 ;
13606: LD_ADDR_VAR 0 4
13610: PUSH
13611: LD_INT 0
13613: ST_TO_ADDR
// oil := 0 ;
13614: LD_ADDR_VAR 0 5
13618: PUSH
13619: LD_INT 0
13621: ST_TO_ADDR
// sib := 0 ;
13622: LD_ADDR_VAR 0 6
13626: PUSH
13627: LD_INT 0
13629: ST_TO_ADDR
// if bases then
13630: LD_VAR 0 9
13634: IFFALSE 13740
// begin for j in bases do
13636: LD_ADDR_VAR 0 3
13640: PUSH
13641: LD_VAR 0 9
13645: PUSH
13646: FOR_IN
13647: IFFALSE 13738
// begin base := GetBase ( j ) ;
13649: LD_ADDR_VAR 0 8
13653: PUSH
13654: LD_VAR 0 3
13658: PPUSH
13659: CALL_OW 274
13663: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
13664: LD_ADDR_VAR 0 4
13668: PUSH
13669: LD_VAR 0 4
13673: PUSH
13674: LD_VAR 0 8
13678: PPUSH
13679: LD_INT 1
13681: PPUSH
13682: CALL_OW 275
13686: PLUS
13687: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
13688: LD_ADDR_VAR 0 5
13692: PUSH
13693: LD_VAR 0 5
13697: PUSH
13698: LD_VAR 0 8
13702: PPUSH
13703: LD_INT 2
13705: PPUSH
13706: CALL_OW 275
13710: PLUS
13711: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
13712: LD_ADDR_VAR 0 6
13716: PUSH
13717: LD_VAR 0 6
13721: PUSH
13722: LD_VAR 0 8
13726: PPUSH
13727: LD_INT 3
13729: PPUSH
13730: CALL_OW 275
13734: PLUS
13735: ST_TO_ADDR
// end ;
13736: GO 13646
13738: POP
13739: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
13740: LD_STRING setSpecText(
13742: PUSH
13743: LD_VAR 0 2
13747: STR
13748: PUSH
13749: LD_STRING ,
13751: STR
13752: PUSH
13753: LD_INT 2
13755: STR
13756: PUSH
13757: LD_STRING ,
13759: STR
13760: PUSH
13761: LD_VAR 0 4
13765: STR
13766: PUSH
13767: LD_STRING )
13769: STR
13770: PPUSH
13771: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
13775: LD_STRING setSpecText(
13777: PUSH
13778: LD_VAR 0 2
13782: STR
13783: PUSH
13784: LD_STRING ,
13786: STR
13787: PUSH
13788: LD_INT 3
13790: STR
13791: PUSH
13792: LD_STRING ,
13794: STR
13795: PUSH
13796: LD_VAR 0 5
13800: STR
13801: PUSH
13802: LD_STRING )
13804: STR
13805: PPUSH
13806: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
13810: LD_STRING setSpecText(
13812: PUSH
13813: LD_VAR 0 2
13817: STR
13818: PUSH
13819: LD_STRING ,
13821: STR
13822: PUSH
13823: LD_INT 4
13825: STR
13826: PUSH
13827: LD_STRING ,
13829: STR
13830: PUSH
13831: LD_VAR 0 6
13835: STR
13836: PUSH
13837: LD_STRING )
13839: STR
13840: PPUSH
13841: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
13845: LD_STRING setSpecText(
13847: PUSH
13848: LD_VAR 0 2
13852: STR
13853: PUSH
13854: LD_STRING ,
13856: STR
13857: PUSH
13858: LD_INT 5
13860: STR
13861: PUSH
13862: LD_STRING ,
13864: STR
13865: PUSH
13866: LD_VAR 0 7
13870: STR
13871: PUSH
13872: LD_STRING )
13874: STR
13875: PPUSH
13876: CALL_OW 559
// end ; end ;
13880: GO 13497
13882: POP
13883: POP
// end ;
13884: LD_VAR 0 1
13888: RET
// every 0 0$1 do
13889: GO 13891
13891: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
13892: LD_STRING setSpecLogoNumber(
13894: PUSH
13895: LD_INT 2
13897: STR
13898: PUSH
13899: LD_STRING ,
13901: STR
13902: PUSH
13903: LD_INT 1
13905: STR
13906: PUSH
13907: LD_STRING )
13909: STR
13910: PPUSH
13911: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
13915: LD_STRING setSpecLogoNumber(
13917: PUSH
13918: LD_INT 3
13920: STR
13921: PUSH
13922: LD_STRING ,
13924: STR
13925: PUSH
13926: LD_INT 2
13928: STR
13929: PUSH
13930: LD_STRING )
13932: STR
13933: PPUSH
13934: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
13938: LD_STRING setSpecLogoNumber(
13940: PUSH
13941: LD_INT 4
13943: STR
13944: PUSH
13945: LD_STRING ,
13947: STR
13948: PUSH
13949: LD_INT 3
13951: STR
13952: PUSH
13953: LD_STRING )
13955: STR
13956: PPUSH
13957: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
13961: LD_STRING setSpecLogoNumber(
13963: PUSH
13964: LD_INT 5
13966: STR
13967: PUSH
13968: LD_STRING ,
13970: STR
13971: PUSH
13972: LD_INT 4
13974: STR
13975: PUSH
13976: LD_STRING )
13978: STR
13979: PPUSH
13980: CALL_OW 559
// end ;
13984: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
13985: LD_INT 2
13987: PUSH
13988: LD_INT 30
13990: PUSH
13991: LD_INT 0
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: PUSH
13998: LD_INT 30
14000: PUSH
14001: LD_INT 1
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: LIST
14012: PPUSH
14013: CALL_OW 69
14017: IFFALSE 14027
14019: GO 14021
14021: DISABLE
// begin enable ;
14022: ENABLE
// UpdateSpectatorBar ;
14023: CALL 13473 0 0
// end ; end_of_file
14027: END
// var respawn , inqueue ; export function init_respawning ; begin
14028: LD_INT 0
14030: PPUSH
// respawn := Rand ( 1 , 8 ) ;
14031: LD_ADDR_LOC 18
14035: PUSH
14036: LD_INT 1
14038: PPUSH
14039: LD_INT 8
14041: PPUSH
14042: CALL_OW 12
14046: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
14047: LD_ADDR_LOC 19
14051: PUSH
14052: LD_INT 0
14054: PUSH
14055: LD_INT 0
14057: PUSH
14058: LD_INT 0
14060: PUSH
14061: LD_INT 0
14063: PUSH
14064: LD_INT 0
14066: PUSH
14067: LD_INT 0
14069: PUSH
14070: LD_INT 0
14072: PUSH
14073: LD_INT 0
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: ST_TO_ADDR
// end ;
14086: LD_VAR 0 1
14090: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
14091: GO 14093
14093: DISABLE
14094: LD_INT 0
14096: PPUSH
14097: PPUSH
14098: PPUSH
// begin if respawning_time_max = 0 then
14099: LD_EXP 33
14103: PUSH
14104: LD_INT 0
14106: EQUAL
14107: IFFALSE 14111
// exit ;
14109: GO 14519
// if respawn = 8 then
14111: LD_LOC 18
14115: PUSH
14116: LD_INT 8
14118: EQUAL
14119: IFFALSE 14131
// respawn := 1 else
14121: LD_ADDR_LOC 18
14125: PUSH
14126: LD_INT 1
14128: ST_TO_ADDR
14129: GO 14145
// respawn := respawn + 1 ;
14131: LD_ADDR_LOC 18
14135: PUSH
14136: LD_LOC 18
14140: PUSH
14141: LD_INT 1
14143: PLUS
14144: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
14145: LD_EXP 38
14149: PUSH
14150: LD_LOC 18
14154: ARRAY
14155: PUSH
14156: LD_LOC 19
14160: PUSH
14161: LD_LOC 18
14165: ARRAY
14166: NOT
14167: AND
14168: IFFALSE 14518
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
14170: LD_ADDR_VAR 0 1
14174: PUSH
14175: LD_INT 21
14177: PUSH
14178: LD_INT 1
14180: PUSH
14181: EMPTY
14182: LIST
14183: LIST
14184: PUSH
14185: LD_INT 22
14187: PUSH
14188: LD_LOC 18
14192: PUSH
14193: EMPTY
14194: LIST
14195: LIST
14196: PUSH
14197: LD_INT 3
14199: PUSH
14200: LD_INT 23
14202: PUSH
14203: LD_INT 0
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: PPUSH
14216: CALL_OW 69
14220: ST_TO_ADDR
// if n < number_of_people then
14221: LD_VAR 0 1
14225: PUSH
14226: LD_EXP 24
14230: LESS
14231: IFFALSE 14515
// begin aktresp := respawn ;
14233: LD_ADDR_VAR 0 3
14237: PUSH
14238: LD_LOC 18
14242: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
14243: LD_ADDR_LOC 19
14247: PUSH
14248: LD_LOC 19
14252: PPUSH
14253: LD_VAR 0 3
14257: PPUSH
14258: LD_INT 1
14260: PPUSH
14261: CALL_OW 1
14265: ST_TO_ADDR
// enable ;
14266: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
14267: LD_EXP 32
14271: PPUSH
14272: LD_EXP 33
14276: PPUSH
14277: CALL_OW 12
14281: PPUSH
14282: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
14286: LD_ADDR_LOC 19
14290: PUSH
14291: LD_LOC 19
14295: PPUSH
14296: LD_VAR 0 3
14300: PPUSH
14301: LD_INT 0
14303: PPUSH
14304: CALL_OW 1
14308: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
14309: LD_ADDR_VAR 0 2
14313: PUSH
14314: LD_INT 21
14316: PUSH
14317: LD_INT 3
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: PUSH
14324: LD_INT 2
14326: PUSH
14327: LD_INT 30
14329: PUSH
14330: LD_INT 0
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: PUSH
14337: LD_INT 30
14339: PUSH
14340: LD_INT 1
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: LIST
14351: PUSH
14352: LD_INT 50
14354: PUSH
14355: EMPTY
14356: LIST
14357: PUSH
14358: LD_INT 22
14360: PUSH
14361: LD_VAR 0 3
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: PPUSH
14376: CALL_OW 69
14380: ST_TO_ADDR
// if dep = 0 then
14381: LD_VAR 0 2
14385: PUSH
14386: LD_INT 0
14388: EQUAL
14389: IFFALSE 14393
// exit ;
14391: GO 14519
// hc_name :=  ;
14393: LD_ADDR_OWVAR 26
14397: PUSH
14398: LD_STRING 
14400: ST_TO_ADDR
// hc_importance := 0 ;
14401: LD_ADDR_OWVAR 32
14405: PUSH
14406: LD_INT 0
14408: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
14409: LD_INT 0
14411: PPUSH
14412: LD_INT 0
14414: PPUSH
14415: LD_EXP 25
14419: PUSH
14420: LD_INT 2
14422: DIV
14423: PPUSH
14424: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
14428: LD_ADDR_OWVAR 21
14432: PUSH
14433: LD_EXP 39
14437: PUSH
14438: LD_VAR 0 3
14442: ARRAY
14443: ST_TO_ADDR
// uc_side := aktresp ;
14444: LD_ADDR_OWVAR 20
14448: PUSH
14449: LD_VAR 0 3
14453: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
14454: LD_ADDR_VAR 0 2
14458: PUSH
14459: LD_VAR 0 2
14463: PUSH
14464: LD_INT 1
14466: PPUSH
14467: LD_VAR 0 2
14471: PPUSH
14472: CALL_OW 12
14476: ARRAY
14477: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
14478: CALL_OW 44
14482: PPUSH
14483: LD_VAR 0 2
14487: PPUSH
14488: CALL_OW 250
14492: PPUSH
14493: LD_VAR 0 2
14497: PPUSH
14498: CALL_OW 251
14502: PPUSH
14503: LD_INT 7
14505: PPUSH
14506: LD_INT 1
14508: PPUSH
14509: CALL_OW 50
// end else
14513: GO 14516
// enable ;
14515: ENABLE
// end else
14516: GO 14519
// enable ;
14518: ENABLE
// end ; end_of_file
14519: PPOPN 3
14521: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
14522: LD_INT 0
14524: PPUSH
14525: PPUSH
14526: PPUSH
// BuildUpTime_Delay = 0 ;
14527: LD_ADDR_EXP 64
14531: PUSH
14532: LD_INT 0
14534: ST_TO_ADDR
// if not def_builduptime then
14535: LD_EXP 16
14539: NOT
14540: IFFALSE 14544
// exit ;
14542: GO 14727
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
14544: LD_ADDR_EXP 64
14548: PUSH
14549: LD_INT 8400
14551: PUSH
14552: LD_INT 2100
14554: PUSH
14555: LD_EXP 16
14559: MUL
14560: PLUS
14561: ST_TO_ADDR
// BuildUpTimeActive := true ;
14562: LD_ADDR_EXP 63
14566: PUSH
14567: LD_INT 1
14569: ST_TO_ADDR
// for i := 1 to 8 do
14570: LD_ADDR_VAR 0 2
14574: PUSH
14575: DOUBLE
14576: LD_INT 1
14578: DEC
14579: ST_TO_ADDR
14580: LD_INT 8
14582: PUSH
14583: FOR_TO
14584: IFFALSE 14725
// if Side_Positions [ i ] then
14586: LD_EXP 38
14590: PUSH
14591: LD_VAR 0 2
14595: ARRAY
14596: IFFALSE 14723
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
14598: LD_EXP 62
14602: PUSH
14603: LD_EXP 38
14607: PUSH
14608: LD_VAR 0 2
14612: ARRAY
14613: ARRAY
14614: PPUSH
14615: LD_INT 5
14617: PPUSH
14618: CALL_OW 424
// for j := 1 to 8 do
14622: LD_ADDR_VAR 0 3
14626: PUSH
14627: DOUBLE
14628: LD_INT 1
14630: DEC
14631: ST_TO_ADDR
14632: LD_INT 8
14634: PUSH
14635: FOR_TO
14636: IFFALSE 14721
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14638: LD_EXP 38
14642: PUSH
14643: LD_VAR 0 3
14647: ARRAY
14648: PUSH
14649: LD_EXP 35
14653: PUSH
14654: LD_VAR 0 2
14658: ARRAY
14659: PUSH
14660: LD_EXP 35
14664: PUSH
14665: LD_VAR 0 3
14669: ARRAY
14670: NONEQUAL
14671: PUSH
14672: LD_EXP 40
14676: NOT
14677: PUSH
14678: LD_VAR 0 2
14682: PUSH
14683: LD_VAR 0 3
14687: NONEQUAL
14688: AND
14689: OR
14690: AND
14691: IFFALSE 14719
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14693: LD_VAR 0 3
14697: PPUSH
14698: LD_EXP 62
14702: PUSH
14703: LD_EXP 38
14707: PUSH
14708: LD_VAR 0 2
14712: ARRAY
14713: ARRAY
14714: PPUSH
14715: CALL_OW 333
14719: GO 14635
14721: POP
14722: POP
// end ;
14723: GO 14583
14725: POP
14726: POP
// end ;
14727: LD_VAR 0 1
14731: RET
// export function EndBuildUp ; var i , j ; begin
14732: LD_INT 0
14734: PPUSH
14735: PPUSH
14736: PPUSH
// BuildUpTimeActive := false ;
14737: LD_ADDR_EXP 63
14741: PUSH
14742: LD_INT 0
14744: ST_TO_ADDR
// for i := 1 to 8 do
14745: LD_ADDR_VAR 0 2
14749: PUSH
14750: DOUBLE
14751: LD_INT 1
14753: DEC
14754: ST_TO_ADDR
14755: LD_INT 8
14757: PUSH
14758: FOR_TO
14759: IFFALSE 14900
// if Side_Positions [ i ] then
14761: LD_EXP 38
14765: PUSH
14766: LD_VAR 0 2
14770: ARRAY
14771: IFFALSE 14898
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
14773: LD_EXP 62
14777: PUSH
14778: LD_EXP 38
14782: PUSH
14783: LD_VAR 0 2
14787: ARRAY
14788: ARRAY
14789: PPUSH
14790: LD_INT 0
14792: PPUSH
14793: CALL_OW 424
// for j := 1 to 8 do
14797: LD_ADDR_VAR 0 3
14801: PUSH
14802: DOUBLE
14803: LD_INT 1
14805: DEC
14806: ST_TO_ADDR
14807: LD_INT 8
14809: PUSH
14810: FOR_TO
14811: IFFALSE 14896
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14813: LD_EXP 38
14817: PUSH
14818: LD_VAR 0 3
14822: ARRAY
14823: PUSH
14824: LD_EXP 35
14828: PUSH
14829: LD_VAR 0 2
14833: ARRAY
14834: PUSH
14835: LD_EXP 35
14839: PUSH
14840: LD_VAR 0 3
14844: ARRAY
14845: NONEQUAL
14846: PUSH
14847: LD_EXP 40
14851: NOT
14852: PUSH
14853: LD_VAR 0 2
14857: PUSH
14858: LD_VAR 0 3
14862: NONEQUAL
14863: AND
14864: OR
14865: AND
14866: IFFALSE 14894
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14868: LD_VAR 0 3
14872: PPUSH
14873: LD_EXP 62
14877: PUSH
14878: LD_EXP 38
14882: PUSH
14883: LD_VAR 0 2
14887: ARRAY
14888: ARRAY
14889: PPUSH
14890: CALL_OW 334
14894: GO 14810
14896: POP
14897: POP
// end ;
14898: GO 14758
14900: POP
14901: POP
// end ;
14902: LD_VAR 0 1
14906: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
14907: LD_EXP 63
14911: IFFALSE 15086
14913: GO 14915
14915: DISABLE
14916: LD_INT 0
14918: PPUSH
14919: PPUSH
// begin for i := 1 to 8 do
14920: LD_ADDR_VAR 0 1
14924: PUSH
14925: DOUBLE
14926: LD_INT 1
14928: DEC
14929: ST_TO_ADDR
14930: LD_INT 8
14932: PUSH
14933: FOR_TO
14934: IFFALSE 15083
// if Side_Positions [ i ] then
14936: LD_EXP 38
14940: PUSH
14941: LD_VAR 0 1
14945: ARRAY
14946: IFFALSE 15081
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
14948: LD_ADDR_VAR 0 2
14952: PUSH
14953: LD_EXP 62
14957: PUSH
14958: LD_EXP 38
14962: PUSH
14963: LD_VAR 0 1
14967: ARRAY
14968: ARRAY
14969: PPUSH
14970: LD_INT 2
14972: PUSH
14973: LD_INT 21
14975: PUSH
14976: LD_INT 1
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: PUSH
14983: LD_INT 21
14985: PUSH
14986: LD_INT 2
14988: PUSH
14989: EMPTY
14990: LIST
14991: LIST
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: LIST
14997: PUSH
14998: LD_INT 22
15000: PUSH
15001: LD_OWVAR 2
15005: PUSH
15006: EMPTY
15007: LIST
15008: LIST
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: PPUSH
15014: CALL_OW 70
15018: PUSH
15019: FOR_IN
15020: IFFALSE 15079
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
15022: LD_EXP 35
15026: PUSH
15027: LD_VAR 0 1
15031: ARRAY
15032: PUSH
15033: LD_EXP 35
15037: PUSH
15038: LD_OWVAR 2
15042: ARRAY
15043: NONEQUAL
15044: PUSH
15045: LD_EXP 40
15049: NOT
15050: PUSH
15051: LD_VAR 0 1
15055: PUSH
15056: LD_OWVAR 2
15060: NONEQUAL
15061: AND
15062: OR
15063: IFFALSE 15077
// ComMoveToArea ( un , BuildUpEscape ) ;
15065: LD_VAR 0 2
15069: PPUSH
15070: LD_INT 16
15072: PPUSH
15073: CALL_OW 113
15077: GO 15019
15079: POP
15080: POP
15081: GO 14933
15083: POP
15084: POP
// enable ;
15085: ENABLE
// end ;
15086: PPOPN 2
15088: END
// every 0 0$1 trigger def_builduptime do
15089: LD_EXP 16
15093: IFFALSE 15119
15095: GO 15097
15097: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
15098: LD_INT 8400
15100: PUSH
15101: LD_EXP 16
15105: PUSH
15106: LD_INT 2100
15108: MUL
15109: PLUS
15110: PPUSH
15111: CALL_OW 67
// EndBuildUp ;
15115: CALL 14732 0 0
// end ; end_of_file
15119: END
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
15120: LD_INT 0
15122: PPUSH
15123: PPUSH
// enable ( 98 ) ;
15124: LD_INT 98
15126: ENABLE_MARKED
// GameEnded = false ;
15127: LD_ADDR_LOC 21
15131: PUSH
15132: LD_INT 0
15134: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
15135: LD_ADDR_LOC 20
15139: PUSH
15140: LD_INT 0
15142: PUSH
15143: LD_INT 0
15145: PUSH
15146: LD_INT 0
15148: PUSH
15149: LD_INT 0
15151: PUSH
15152: LD_INT 0
15154: PUSH
15155: LD_INT 0
15157: PUSH
15158: LD_INT 0
15160: PUSH
15161: LD_INT 0
15163: PUSH
15164: EMPTY
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: ST_TO_ADDR
// unfoged = false ;
15174: LD_ADDR_LOC 22
15178: PUSH
15179: LD_INT 0
15181: ST_TO_ADDR
// defeated_specs := [ ] ;
15182: LD_ADDR_LOC 23
15186: PUSH
15187: EMPTY
15188: ST_TO_ADDR
// for i = 1 to side_positions do
15189: LD_ADDR_VAR 0 2
15193: PUSH
15194: DOUBLE
15195: LD_INT 1
15197: DEC
15198: ST_TO_ADDR
15199: LD_EXP 38
15203: PUSH
15204: FOR_TO
15205: IFFALSE 15245
// if not side_positions [ i ] then
15207: LD_EXP 38
15211: PUSH
15212: LD_VAR 0 2
15216: ARRAY
15217: NOT
15218: IFFALSE 15243
// defeated = replace ( defeated , i , true ) ;
15220: LD_ADDR_LOC 20
15224: PUSH
15225: LD_LOC 20
15229: PPUSH
15230: LD_VAR 0 2
15234: PPUSH
15235: LD_INT 1
15237: PPUSH
15238: CALL_OW 1
15242: ST_TO_ADDR
15243: GO 15204
15245: POP
15246: POP
// end ;
15247: LD_VAR 0 1
15251: RET
// function CanWinLoose ; begin
15252: LD_INT 0
15254: PPUSH
// Result := true ;
15255: LD_ADDR_VAR 0 1
15259: PUSH
15260: LD_INT 1
15262: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
15263: CALL_OW 518
15267: PUSH
15268: CALL_OW 519
15272: PUSH
15273: LD_INT 0
15275: GREATER
15276: AND
15277: IFFALSE 15287
// Result := false ;
15279: LD_ADDR_VAR 0 1
15283: PUSH
15284: LD_INT 0
15286: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
15287: CALL_OW 531
15291: PUSH
15292: CALL_OW 519
15296: PUSH
15297: LD_INT 1
15299: GREATER
15300: AND
15301: IFFALSE 15311
// Result := false ;
15303: LD_ADDR_VAR 0 1
15307: PUSH
15308: LD_INT 0
15310: ST_TO_ADDR
// end ;
15311: LD_VAR 0 1
15315: RET
// export function HasPower ( i ) ; var k , h ; begin
15316: LD_INT 0
15318: PPUSH
15319: PPUSH
15320: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
15321: LD_VAR 0 1
15325: PPUSH
15326: CALL_OW 108
15330: NOT
15331: PUSH
15332: LD_EXP 37
15336: PUSH
15337: LD_VAR 0 1
15341: ARRAY
15342: NOT
15343: AND
15344: PUSH
15345: LD_OWVAR 4
15349: AND
15350: IFFALSE 15362
// begin result = false ;
15352: LD_ADDR_VAR 0 2
15356: PUSH
15357: LD_INT 0
15359: ST_TO_ADDR
// end else
15360: GO 15657
// case def_win_rules of 0 :
15362: LD_EXP 49
15366: PUSH
15367: LD_INT 0
15369: DOUBLE
15370: EQUAL
15371: IFTRUE 15375
15373: GO 15538
15375: POP
// if def_people_respawning then
15376: LD_EXP 11
15380: IFFALSE 15471
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
15382: LD_ADDR_VAR 0 2
15386: PUSH
15387: LD_INT 22
15389: PUSH
15390: LD_VAR 0 1
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PUSH
15399: LD_INT 2
15401: PUSH
15402: LD_INT 21
15404: PUSH
15405: LD_INT 1
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: PUSH
15412: LD_INT 33
15414: PUSH
15415: LD_INT 3
15417: PUSH
15418: EMPTY
15419: LIST
15420: LIST
15421: PUSH
15422: LD_INT 33
15424: PUSH
15425: LD_INT 5
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PUSH
15432: LD_INT 30
15434: PUSH
15435: LD_INT 0
15437: PUSH
15438: EMPTY
15439: LIST
15440: LIST
15441: PUSH
15442: LD_INT 30
15444: PUSH
15445: LD_INT 1
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: PPUSH
15464: CALL_OW 69
15468: ST_TO_ADDR
15469: GO 15536
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
15471: LD_ADDR_VAR 0 2
15475: PUSH
15476: LD_INT 22
15478: PUSH
15479: LD_VAR 0 1
15483: PUSH
15484: EMPTY
15485: LIST
15486: LIST
15487: PUSH
15488: LD_INT 2
15490: PUSH
15491: LD_INT 21
15493: PUSH
15494: LD_INT 1
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: LD_INT 33
15503: PUSH
15504: LD_INT 3
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: LD_INT 33
15513: PUSH
15514: LD_INT 5
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: PPUSH
15531: CALL_OW 69
15535: ST_TO_ADDR
15536: GO 15657
15538: LD_INT 1
15540: DOUBLE
15541: EQUAL
15542: IFTRUE 15546
15544: GO 15585
15546: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
15547: LD_ADDR_VAR 0 2
15551: PUSH
15552: LD_INT 22
15554: PUSH
15555: LD_VAR 0 1
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: LD_INT 21
15566: PUSH
15567: LD_INT 1
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: PPUSH
15578: CALL_OW 69
15582: ST_TO_ADDR
15583: GO 15657
15585: LD_INT 2
15587: DOUBLE
15588: EQUAL
15589: IFTRUE 15593
15591: GO 15656
15593: POP
// begin h = false ;
15594: LD_ADDR_VAR 0 4
15598: PUSH
15599: LD_INT 0
15601: ST_TO_ADDR
// for k in heroes [ i ] do
15602: LD_ADDR_VAR 0 3
15606: PUSH
15607: LD_EXP 50
15611: PUSH
15612: LD_VAR 0 1
15616: ARRAY
15617: PUSH
15618: FOR_IN
15619: IFFALSE 15642
// if IsLive ( k ) then
15621: LD_VAR 0 3
15625: PPUSH
15626: CALL_OW 300
15630: IFFALSE 15640
// h = true ;
15632: LD_ADDR_VAR 0 4
15636: PUSH
15637: LD_INT 1
15639: ST_TO_ADDR
15640: GO 15618
15642: POP
15643: POP
// Result := h ;
15644: LD_ADDR_VAR 0 2
15648: PUSH
15649: LD_VAR 0 4
15653: ST_TO_ADDR
// end ; end ;
15654: GO 15657
15656: POP
// end ;
15657: LD_VAR 0 2
15661: RET
// function AlliedSides ( i , j ) ; begin
15662: LD_INT 0
15664: PPUSH
// Result := false ;
15665: LD_ADDR_VAR 0 3
15669: PUSH
15670: LD_INT 0
15672: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
15673: LD_VAR 0 1
15677: PPUSH
15678: LD_VAR 0 2
15682: PPUSH
15683: CALL_OW 81
15687: PUSH
15688: LD_INT 1
15690: EQUAL
15691: PUSH
15692: LD_VAR 0 2
15696: PPUSH
15697: LD_VAR 0 1
15701: PPUSH
15702: CALL_OW 81
15706: PUSH
15707: LD_INT 1
15709: EQUAL
15710: AND
15711: PUSH
15712: LD_VAR 0 1
15716: PPUSH
15717: CALL_OW 83
15721: AND
15722: PUSH
15723: LD_VAR 0 2
15727: PPUSH
15728: CALL_OW 83
15732: AND
15733: IFFALSE 15743
// Result := true ;
15735: LD_ADDR_VAR 0 3
15739: PUSH
15740: LD_INT 1
15742: ST_TO_ADDR
// end ;
15743: LD_VAR 0 3
15747: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
15748: CALL 15252 0 0
15752: PUSH
15753: LD_LOC 21
15757: NOT
15758: AND
15759: IFFALSE 15775
15761: GO 15763
15763: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
15764: LD_ADDR_EXP 61
15768: PUSH
15769: LD_STRING #Player-Ended
15771: PUSH
15772: EMPTY
15773: LIST
15774: ST_TO_ADDR
15775: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
15776: CALL 15252 0 0
15780: PUSH
15781: LD_LOC 21
15785: AND
15786: IFFALSE 15795
15788: GO 15790
15790: DISABLE
// YouLostInMultiplayer ;
15791: CALL_OW 107
15795: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
15796: CALL 15252 0 0
15800: NOT
15801: PUSH
15802: CALL_OW 531
15806: NOT
15807: AND
15808: IFFALSE 15824
15810: GO 15812
15812: DISABLE
// WaitServerStrings = [ #server-wait ] ;
15813: LD_ADDR_EXP 61
15817: PUSH
15818: LD_STRING #server-wait
15820: PUSH
15821: EMPTY
15822: LIST
15823: ST_TO_ADDR
15824: END
// every 100 trigger IAmSpec do
15825: CALL_OW 531
15829: IFFALSE 15845
15831: GO 15833
15833: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
15834: LD_ADDR_EXP 61
15838: PUSH
15839: LD_STRING #Player-IAmSpec
15841: PUSH
15842: EMPTY
15843: LIST
15844: ST_TO_ADDR
15845: END
// every 100 trigger GameEnded and IAmSpec do
15846: LD_LOC 21
15850: PUSH
15851: CALL_OW 531
15855: AND
15856: IFFALSE 15865
15858: GO 15860
15860: DISABLE
// YouLostInMultiplayer ;
15861: CALL_OW 107
15865: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
15866: CALL 15252 0 0
15870: PUSH
15871: LD_LOC 21
15875: NOT
15876: AND
15877: IFFALSE 15893
15879: GO 15881
15881: DISABLE
// WaitServerStrings = [ $player-win ] ;
15882: LD_ADDR_EXP 61
15886: PUSH
15887: LD_STRING $player-win
15889: PUSH
15890: EMPTY
15891: LIST
15892: ST_TO_ADDR
15893: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
15894: CALL 15252 0 0
15898: PUSH
15899: LD_LOC 21
15903: AND
15904: IFFALSE 15928
15906: GO 15908
15908: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
15909: LD_EXP 39
15913: PUSH
15914: LD_OWVAR 7
15918: ARRAY
15919: PPUSH
15920: CALL 9107 0 1
// YouWinInMultiplayer ;
15924: CALL_OW 106
// end ;
15928: END
// every 100 trigger isEditor marked 401 do
15929: LD_OWVAR 84
15933: IFFALSE 15949
15935: GO 15937
15937: DISABLE
// Debug_Strings = [ You won ] ;
15938: LD_ADDR_OWVAR 48
15942: PUSH
15943: LD_STRING You won
15945: PUSH
15946: EMPTY
15947: LIST
15948: ST_TO_ADDR
15949: END
// every 100 trigger isEditor marked 400 do
15950: LD_OWVAR 84
15954: IFFALSE 15970
15956: GO 15958
15958: DISABLE
// Debug_Strings = [ You loss ] ;
15959: LD_ADDR_OWVAR 48
15963: PUSH
15964: LD_STRING You loss
15966: PUSH
15967: EMPTY
15968: LIST
15969: ST_TO_ADDR
15970: END
// every 100 marked 98 do var i , un ;
15971: GO 15973
15973: DISABLE
15974: LD_INT 0
15976: PPUSH
15977: PPUSH
// begin for i = 1 to side_positions do
15978: LD_ADDR_VAR 0 1
15982: PUSH
15983: DOUBLE
15984: LD_INT 1
15986: DEC
15987: ST_TO_ADDR
15988: LD_EXP 38
15992: PUSH
15993: FOR_TO
15994: IFFALSE 16081
// begin if side_positions [ i ] then
15996: LD_EXP 38
16000: PUSH
16001: LD_VAR 0 1
16005: ARRAY
16006: IFFALSE 16079
// if not HasPower ( i ) and not defeated [ i ] then
16008: LD_VAR 0 1
16012: PPUSH
16013: CALL 15316 0 1
16017: NOT
16018: PUSH
16019: LD_LOC 20
16023: PUSH
16024: LD_VAR 0 1
16028: ARRAY
16029: NOT
16030: AND
16031: IFFALSE 16079
// begin defeated = replace ( defeated , i , true ) ;
16033: LD_ADDR_LOC 20
16037: PUSH
16038: LD_LOC 20
16042: PPUSH
16043: LD_VAR 0 1
16047: PPUSH
16048: LD_INT 1
16050: PPUSH
16051: CALL_OW 1
16055: ST_TO_ADDR
// if i = mp_player_side then
16056: LD_VAR 0 1
16060: PUSH
16061: LD_OWVAR 7
16065: EQUAL
16066: IFFALSE 16079
// begin Multiplayer_Loose_Message ;
16068: CALL_OW 521
// SetPlayerSpectator ( ) ;
16072: CALL_OW 572
// enable ( 400 ) ;
16076: LD_INT 400
16078: ENABLE_MARKED
// end ; end ; end ;
16079: GO 15993
16081: POP
16082: POP
// DidGameEnd ;
16083: CALL 16098 0 0
// if not GameEnded then
16087: LD_LOC 21
16091: NOT
16092: IFFALSE 16095
// enable ;
16094: ENABLE
// end ;
16095: PPOPN 2
16097: END
// function DidGameEnd ; var i , k , enemy ; begin
16098: LD_INT 0
16100: PPUSH
16101: PPUSH
16102: PPUSH
16103: PPUSH
// enemy = [ ] ;
16104: LD_ADDR_VAR 0 4
16108: PUSH
16109: EMPTY
16110: ST_TO_ADDR
// for i = 1 to side_positions do
16111: LD_ADDR_VAR 0 2
16115: PUSH
16116: DOUBLE
16117: LD_INT 1
16119: DEC
16120: ST_TO_ADDR
16121: LD_EXP 38
16125: PUSH
16126: FOR_TO
16127: IFFALSE 16221
// if not defeated [ i ] then
16129: LD_LOC 20
16133: PUSH
16134: LD_VAR 0 2
16138: ARRAY
16139: NOT
16140: IFFALSE 16219
// for k = 1 to side_positions do
16142: LD_ADDR_VAR 0 3
16146: PUSH
16147: DOUBLE
16148: LD_INT 1
16150: DEC
16151: ST_TO_ADDR
16152: LD_EXP 38
16156: PUSH
16157: FOR_TO
16158: IFFALSE 16217
// if not defeated [ k ] then
16160: LD_LOC 20
16164: PUSH
16165: LD_VAR 0 3
16169: ARRAY
16170: NOT
16171: IFFALSE 16215
// if not AlliedSides ( i , k ) then
16173: LD_VAR 0 2
16177: PPUSH
16178: LD_VAR 0 3
16182: PPUSH
16183: CALL 15662 0 2
16187: NOT
16188: IFFALSE 16215
// enemy = enemy ^ [ i , k ] ;
16190: LD_ADDR_VAR 0 4
16194: PUSH
16195: LD_VAR 0 4
16199: PUSH
16200: LD_VAR 0 2
16204: PUSH
16205: LD_VAR 0 3
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: ADD
16214: ST_TO_ADDR
16215: GO 16157
16217: POP
16218: POP
16219: GO 16126
16221: POP
16222: POP
// if not enemy then
16223: LD_VAR 0 4
16227: NOT
16228: IFFALSE 16254
// begin GameEnded = true ;
16230: LD_ADDR_LOC 21
16234: PUSH
16235: LD_INT 1
16237: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
16238: LD_LOC 20
16242: PUSH
16243: LD_OWVAR 7
16247: ARRAY
16248: NOT
16249: IFFALSE 16254
// enable ( 401 ) ;
16251: LD_INT 401
16253: ENABLE_MARKED
// end ; end ;
16254: LD_VAR 0 1
16258: RET
// function unfog ; var k , friends ; begin
16259: LD_INT 0
16261: PPUSH
16262: PPUSH
16263: PPUSH
// for k = 1 to side_positions do
16264: LD_ADDR_VAR 0 2
16268: PUSH
16269: DOUBLE
16270: LD_INT 1
16272: DEC
16273: ST_TO_ADDR
16274: LD_EXP 38
16278: PUSH
16279: FOR_TO
16280: IFFALSE 16336
// if not defeated [ k ] then
16282: LD_LOC 20
16286: PUSH
16287: LD_VAR 0 2
16291: ARRAY
16292: NOT
16293: IFFALSE 16334
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
16295: LD_OWVAR 7
16299: PPUSH
16300: LD_VAR 0 2
16304: PPUSH
16305: CALL_OW 81
16309: PUSH
16310: LD_INT 1
16312: PUSH
16313: EMPTY
16314: LIST
16315: IN
16316: IFFALSE 16334
// friends = friends ^ k ;
16318: LD_ADDR_VAR 0 3
16322: PUSH
16323: LD_VAR 0 3
16327: PUSH
16328: LD_VAR 0 2
16332: ADD
16333: ST_TO_ADDR
16334: GO 16279
16336: POP
16337: POP
// if not friends then
16338: LD_VAR 0 3
16342: NOT
16343: IFFALSE 16357
// begin SetPlayerSpectator ( ) ;
16345: CALL_OW 572
// unfoged = true ;
16349: LD_ADDR_LOC 22
16353: PUSH
16354: LD_INT 1
16356: ST_TO_ADDR
// end ; end ;
16357: LD_VAR 0 1
16361: RET
// export function MakeGameEnd ; begin
16362: LD_INT 0
16364: PPUSH
// SetPlayerSpectator ( ) ;
16365: CALL_OW 572
// unfoged = true ;
16369: LD_ADDR_LOC 22
16373: PUSH
16374: LD_INT 1
16376: ST_TO_ADDR
// wait ( 0 0$5 ) ;
16377: LD_INT 175
16379: PPUSH
16380: CALL_OW 67
// GameEnded = true ;
16384: LD_ADDR_LOC 21
16388: PUSH
16389: LD_INT 1
16391: ST_TO_ADDR
// end ;
16392: LD_VAR 0 1
16396: RET
// export function GetGameEnded ; begin
16397: LD_INT 0
16399: PPUSH
// result = GameEnded ;
16400: LD_ADDR_VAR 0 1
16404: PUSH
16405: LD_LOC 21
16409: ST_TO_ADDR
// end ;
16410: LD_VAR 0 1
16414: RET
