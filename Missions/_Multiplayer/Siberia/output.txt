// export def_amount_of_siberit , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game ; export Position_Sides ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id , sheik , mastodont ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function read_multiplayer_and_game_parameters ; var i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// if Multiplayer then
   4: LD_OWVAR 4
   8: IFFALSE 72
// begin Game_Type := mp_game_type ;
  10: LD_ADDR_EXP 40
  14: PUSH
  15: LD_OWVAR 6
  19: ST_TO_ADDR
// Your_Side := mp_player_side ;
  20: LD_ADDR_OWVAR 2
  24: PUSH
  25: LD_OWVAR 7
  29: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  30: LD_ADDR_EXP 18
  34: PUSH
  35: LD_OWVAR 17
  39: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  40: LD_ADDR_EXP 16
  44: PUSH
  45: LD_OWVAR 15
  49: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
  50: LD_ADDR_EXP 19
  54: PUSH
  55: LD_OWVAR 16
  59: ST_TO_ADDR
// Teams := mp_teams ;
  60: LD_ADDR_EXP 17
  64: PUSH
  65: LD_OWVAR 12
  69: ST_TO_ADDR
// end else
  70: GO 254
// begin Game_Type := 1 ;
  72: LD_ADDR_EXP 40
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// Your_Side := 3 ;
  80: LD_ADDR_OWVAR 2
  84: PUSH
  85: LD_INT 3
  87: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
  88: LD_ADDR_EXP 18
  92: PUSH
  93: LD_INT 1
  95: PUSH
  96: LD_INT 2
  98: PUSH
  99: LD_INT 3
 101: PUSH
 102: LD_INT 4
 104: PUSH
 105: LD_INT 5
 107: PUSH
 108: LD_INT 6
 110: PUSH
 111: LD_INT 0
 113: PUSH
 114: LD_INT 0
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: LIST
 126: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 127: LD_ADDR_EXP 16
 131: PUSH
 132: LD_INT 1
 134: PUSH
 135: LD_INT 2
 137: PUSH
 138: LD_INT 3
 140: PUSH
 141: LD_INT 4
 143: PUSH
 144: LD_INT 5
 146: PUSH
 147: LD_INT 6
 149: PUSH
 150: LD_INT 0
 152: PUSH
 153: LD_INT 0
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: LIST
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 166: LD_ADDR_EXP 19
 170: PUSH
 171: LD_INT 1
 173: PUSH
 174: LD_INT 2
 176: PUSH
 177: LD_INT 3
 179: PUSH
 180: LD_INT 1
 182: PUSH
 183: LD_INT 2
 185: PUSH
 186: LD_INT 3
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 0
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 205: LD_ADDR_EXP 17
 209: PUSH
 210: LD_INT 1
 212: PUSH
 213: EMPTY
 214: LIST
 215: PUSH
 216: LD_INT 2
 218: PUSH
 219: EMPTY
 220: LIST
 221: PUSH
 222: LD_INT 3
 224: PUSH
 225: EMPTY
 226: LIST
 227: PUSH
 228: LD_INT 4
 230: PUSH
 231: EMPTY
 232: LIST
 233: PUSH
 234: LD_INT 5
 236: PUSH
 237: EMPTY
 238: LIST
 239: PUSH
 240: LD_INT 6
 242: PUSH
 243: EMPTY
 244: LIST
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: LIST
 252: LIST
 253: ST_TO_ADDR
// end ; for i := 1 to 8 do
 254: LD_ADDR_VAR 0 2
 258: PUSH
 259: DOUBLE
 260: LD_INT 1
 262: DEC
 263: ST_TO_ADDR
 264: LD_INT 8
 266: PUSH
 267: FOR_TO
 268: IFFALSE 355
// if Multiplayer_GetPlayerIsSpec ( i ) then
 270: LD_VAR 0 2
 274: PPUSH
 275: CALL_OW 530
 279: IFFALSE 353
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 281: LD_ADDR_EXP 18
 285: PUSH
 286: LD_EXP 18
 290: PPUSH
 291: LD_VAR 0 2
 295: PPUSH
 296: LD_INT 0
 298: PPUSH
 299: CALL_OW 1
 303: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 304: LD_ADDR_EXP 17
 308: PUSH
 309: LD_EXP 17
 313: PPUSH
 314: LD_EXP 16
 318: PUSH
 319: LD_VAR 0 2
 323: ARRAY
 324: PPUSH
 325: LD_EXP 17
 329: PUSH
 330: LD_EXP 16
 334: PUSH
 335: LD_VAR 0 2
 339: ARRAY
 340: ARRAY
 341: PUSH
 342: LD_VAR 0 2
 346: DIFF
 347: PPUSH
 348: CALL_OW 1
 352: ST_TO_ADDR
// end ;
 353: GO 267
 355: POP
 356: POP
// Position_Sides := [ 0 , 0 , 0 , 0 , 0 , 0 ] ;
 357: LD_ADDR_EXP 21
 361: PUSH
 362: LD_INT 0
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 0
 370: PUSH
 371: LD_INT 0
 373: PUSH
 374: LD_INT 0
 376: PUSH
 377: LD_INT 0
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: LIST
 387: ST_TO_ADDR
// for i := 1 to 8 do
 388: LD_ADDR_VAR 0 2
 392: PUSH
 393: DOUBLE
 394: LD_INT 1
 396: DEC
 397: ST_TO_ADDR
 398: LD_INT 8
 400: PUSH
 401: FOR_TO
 402: IFFALSE 449
// if Side_Positions [ i ] then
 404: LD_EXP 18
 408: PUSH
 409: LD_VAR 0 2
 413: ARRAY
 414: IFFALSE 447
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 416: LD_ADDR_EXP 21
 420: PUSH
 421: LD_EXP 21
 425: PPUSH
 426: LD_EXP 18
 430: PUSH
 431: LD_VAR 0 2
 435: ARRAY
 436: PPUSH
 437: LD_VAR 0 2
 441: PPUSH
 442: CALL_OW 1
 446: ST_TO_ADDR
 447: GO 401
 449: POP
 450: POP
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 451: LD_ADDR_EXP 20
 455: PUSH
 456: LD_EXP 16
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: EMPTY
 465: LIST
 466: DIFF
 467: PUSH
 468: LD_INT 1
 470: GREATER
 471: ST_TO_ADDR
// if Multiplayer then
 472: LD_OWVAR 4
 476: IFFALSE 722
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 478: LD_ADDR_EXP 42
 482: PUSH
 483: LD_INT 0
 485: PPUSH
 486: CALL_OW 426
 490: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 491: LD_ADDR_EXP 43
 495: PUSH
 496: LD_INT 1
 498: PPUSH
 499: CALL_OW 426
 503: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 504: LD_ADDR_EXP 44
 508: PUSH
 509: LD_INT 2
 511: PPUSH
 512: CALL_OW 426
 516: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 517: LD_ADDR_EXP 45
 521: PUSH
 522: LD_INT 3
 524: PPUSH
 525: CALL_OW 426
 529: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 530: LD_ADDR_EXP 46
 534: PUSH
 535: LD_INT 4
 537: PPUSH
 538: CALL_OW 426
 542: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 543: LD_ADDR_EXP 47
 547: PUSH
 548: LD_INT 5
 550: PPUSH
 551: CALL_OW 426
 555: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 556: LD_ADDR_EXP 48
 560: PUSH
 561: LD_INT 6
 563: PPUSH
 564: CALL_OW 426
 568: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 569: LD_ADDR_EXP 49
 573: PUSH
 574: LD_INT 10
 576: PPUSH
 577: CALL_OW 426
 581: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 582: LD_ADDR_EXP 50
 586: PUSH
 587: LD_INT 11
 589: PPUSH
 590: CALL_OW 426
 594: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 595: LD_ADDR_EXP 51
 599: PUSH
 600: LD_INT 12
 602: PPUSH
 603: CALL_OW 426
 607: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 608: LD_ADDR_EXP 52
 612: PUSH
 613: LD_INT 13
 615: PPUSH
 616: CALL_OW 426
 620: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 621: LD_ADDR_EXP 53
 625: PUSH
 626: LD_INT 14
 628: PPUSH
 629: CALL_OW 426
 633: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 634: LD_ADDR_EXP 1
 638: PUSH
 639: LD_INT 15
 641: PPUSH
 642: CALL_OW 426
 646: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 647: LD_ADDR_EXP 2
 651: PUSH
 652: LD_INT 16
 654: PPUSH
 655: CALL_OW 426
 659: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 660: LD_ADDR_EXP 54
 664: PUSH
 665: LD_INT 17
 667: PPUSH
 668: CALL_OW 426
 672: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 673: LD_ADDR_EXP 55
 677: PUSH
 678: LD_INT 20
 680: PPUSH
 681: CALL_OW 426
 685: ST_TO_ADDR
// def_game_rules := 0 ;
 686: LD_ADDR_EXP 41
 690: PUSH
 691: LD_INT 0
 693: ST_TO_ADDR
// def_sheik := GetMultiplayerSetting ( 22 ) ;
 694: LD_ADDR_EXP 56
 698: PUSH
 699: LD_INT 22
 701: PPUSH
 702: CALL_OW 426
 706: ST_TO_ADDR
// def_mastodont := GetMultiplayerSetting ( 23 ) ;
 707: LD_ADDR_EXP 57
 711: PUSH
 712: LD_INT 23
 714: PPUSH
 715: CALL_OW 426
 719: ST_TO_ADDR
// end else
 720: GO 878
// begin Randomize ;
 722: CALL_OW 10
// def_base_level := 2 ;
 726: LD_ADDR_EXP 42
 730: PUSH
 731: LD_INT 2
 733: ST_TO_ADDR
// def_amount_of_people := 0 ;
 734: LD_ADDR_EXP 43
 738: PUSH
 739: LD_INT 0
 741: ST_TO_ADDR
// def_skill_level := 1 ;
 742: LD_ADDR_EXP 44
 746: PUSH
 747: LD_INT 1
 749: ST_TO_ADDR
// def_starting_resources := 2 ;
 750: LD_ADDR_EXP 45
 754: PUSH
 755: LD_INT 2
 757: ST_TO_ADDR
// def_shipments_density := 1 ;
 758: LD_ADDR_EXP 46
 762: PUSH
 763: LD_INT 1
 765: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
 766: LD_ADDR_EXP 47
 770: PUSH
 771: LD_INT 1
 773: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
 774: LD_ADDR_EXP 48
 778: PUSH
 779: LD_INT 2
 781: ST_TO_ADDR
// def_shared_vision := 1 ;
 782: LD_ADDR_EXP 49
 786: PUSH
 787: LD_INT 1
 789: ST_TO_ADDR
// def_morale_flags := 1 ;
 790: LD_ADDR_EXP 50
 794: PUSH
 795: LD_INT 1
 797: ST_TO_ADDR
// def_siberite_detection := 1 ;
 798: LD_ADDR_EXP 51
 802: PUSH
 803: LD_INT 1
 805: ST_TO_ADDR
// def_people_respawning := 2 ;
 806: LD_ADDR_EXP 52
 810: PUSH
 811: LD_INT 2
 813: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 814: LD_ADDR_EXP 53
 818: PUSH
 819: LD_INT 3
 821: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 822: LD_ADDR_EXP 1
 826: PUSH
 827: LD_INT 0
 829: ST_TO_ADDR
// def_public_score := 0 ;
 830: LD_ADDR_EXP 2
 834: PUSH
 835: LD_INT 0
 837: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 838: LD_ADDR_EXP 54
 842: PUSH
 843: LD_INT 0
 845: ST_TO_ADDR
// def_builduptime := 0 ;
 846: LD_ADDR_EXP 55
 850: PUSH
 851: LD_INT 0
 853: ST_TO_ADDR
// def_game_rules := 0 ;
 854: LD_ADDR_EXP 41
 858: PUSH
 859: LD_INT 0
 861: ST_TO_ADDR
// def_sheik := 0 ;
 862: LD_ADDR_EXP 56
 866: PUSH
 867: LD_INT 0
 869: ST_TO_ADDR
// def_mastodont := 0 ;
 870: LD_ADDR_EXP 57
 874: PUSH
 875: LD_INT 0
 877: ST_TO_ADDR
// end ; InitGameRules ;
 878: CALL 11174 0 0
// if def_game_rules = 0 then
 882: LD_EXP 41
 886: PUSH
 887: LD_INT 0
 889: EQUAL
 890: IFFALSE 902
// begin if isSGUI then
 892: LD_OWVAR 83
 896: IFFALSE 902
// setMpTechs ( ) end ;
 898: CALL 14624 0 0
// if ( Game_Type = 5 ) then
 902: LD_EXP 40
 906: PUSH
 907: LD_INT 5
 909: EQUAL
 910: IFFALSE 939
// begin def_base_level := 1 ;
 912: LD_ADDR_EXP 42
 916: PUSH
 917: LD_INT 1
 919: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 920: LD_ADDR_EXP 47
 924: PUSH
 925: LD_INT 0
 927: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
 928: LD_ADDR_EXP 48
 932: PUSH
 933: LD_INT 0
 935: ST_TO_ADDR
// disable ( 10 ) ;
 936: LD_INT 10
 938: DISABLE_MARKED
// end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 939: LD_ADDR_EXP 3
 943: PUSH
 944: LD_INT 0
 946: PUSH
 947: LD_INT 1
 949: PUSH
 950: LD_INT 1
 952: PUSH
 953: EMPTY
 954: LIST
 955: LIST
 956: LIST
 957: PUSH
 958: LD_EXP 42
 962: PUSH
 963: LD_INT 1
 965: PLUS
 966: ARRAY
 967: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 ] [ def_base_level + 1 ] ;
 968: LD_ADDR_EXP 4
 972: PUSH
 973: LD_INT 0
 975: PUSH
 976: LD_INT 0
 978: PUSH
 979: LD_INT 2
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: LIST
 986: PUSH
 987: LD_EXP 42
 991: PUSH
 992: LD_INT 1
 994: PLUS
 995: ARRAY
 996: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 997: LD_ADDR_EXP 5
1001: PUSH
1002: LD_INT 9
1004: PUSH
1005: LD_INT 12
1007: PUSH
1008: LD_INT 15
1010: PUSH
1011: LD_INT 24
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: PUSH
1020: LD_EXP 43
1024: PUSH
1025: LD_INT 1
1027: PLUS
1028: ARRAY
1029: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 , 8 ] [ def_skill_level + 1 ] ;
1030: LD_ADDR_EXP 6
1034: PUSH
1035: LD_INT 2
1037: PUSH
1038: LD_INT 3
1040: PUSH
1041: LD_INT 4
1043: PUSH
1044: LD_INT 5
1046: PUSH
1047: LD_INT 8
1049: PUSH
1050: EMPTY
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: PUSH
1057: LD_EXP 44
1061: PUSH
1062: LD_INT 1
1064: PLUS
1065: ARRAY
1066: ST_TO_ADDR
// if ( Game_Type = 5 ) then
1067: LD_EXP 40
1071: PUSH
1072: LD_INT 5
1074: EQUAL
1075: IFFALSE 1193
// begin starting_resources := [ [ 1000 , 100 , 100 ] , [ 2000 , 200 , 200 ] , [ 5000 , 500 , 500 ] , [ 10000 , 1000 , 1000 ] , [ 25000 , 2500 , 2500 ] , [ 50000 , 5000 , 5000 ] ] [ def_starting_resources + 1 ] ;
1077: LD_ADDR_EXP 8
1081: PUSH
1082: LD_INT 1000
1084: PUSH
1085: LD_INT 100
1087: PUSH
1088: LD_INT 100
1090: PUSH
1091: EMPTY
1092: LIST
1093: LIST
1094: LIST
1095: PUSH
1096: LD_INT 2000
1098: PUSH
1099: LD_INT 200
1101: PUSH
1102: LD_INT 200
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: LIST
1109: PUSH
1110: LD_INT 5000
1112: PUSH
1113: LD_INT 500
1115: PUSH
1116: LD_INT 500
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: PUSH
1124: LD_INT 10000
1126: PUSH
1127: LD_INT 1000
1129: PUSH
1130: LD_INT 1000
1132: PUSH
1133: EMPTY
1134: LIST
1135: LIST
1136: LIST
1137: PUSH
1138: LD_INT 25000
1140: PUSH
1141: LD_INT 2500
1143: PUSH
1144: LD_INT 2500
1146: PUSH
1147: EMPTY
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 50000
1154: PUSH
1155: LD_INT 5000
1157: PUSH
1158: LD_INT 5000
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: PUSH
1174: LD_EXP 45
1178: PUSH
1179: LD_INT 1
1181: PLUS
1182: ARRAY
1183: ST_TO_ADDR
// starting_crates := [ ] ;
1184: LD_ADDR_EXP 7
1188: PUSH
1189: EMPTY
1190: ST_TO_ADDR
// end else
1191: GO 1339
// begin starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1193: LD_ADDR_EXP 8
1197: PUSH
1198: LD_INT 0
1200: PUSH
1201: LD_INT 0
1203: PUSH
1204: LD_INT 0
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: LIST
1211: PUSH
1212: LD_INT 30
1214: PUSH
1215: LD_INT 0
1217: PUSH
1218: LD_INT 0
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: LIST
1225: PUSH
1226: LD_INT 50
1228: PUSH
1229: LD_INT 20
1231: PUSH
1232: LD_INT 0
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: LIST
1239: PUSH
1240: LD_INT 80
1242: PUSH
1243: LD_INT 40
1245: PUSH
1246: LD_INT 20
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: PUSH
1260: LD_EXP 45
1264: PUSH
1265: LD_INT 1
1267: PLUS
1268: ARRAY
1269: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1270: LD_ADDR_EXP 7
1274: PUSH
1275: LD_INT 10
1277: PUSH
1278: EMPTY
1279: LIST
1280: PUSH
1281: LD_INT 7
1283: PUSH
1284: LD_INT 14
1286: PUSH
1287: EMPTY
1288: LIST
1289: LIST
1290: PUSH
1291: LD_INT 6
1293: PUSH
1294: LD_INT 12
1296: PUSH
1297: LD_INT 18
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: LIST
1304: PUSH
1305: LD_INT 5
1307: PUSH
1308: LD_INT 10
1310: PUSH
1311: LD_INT 15
1313: PUSH
1314: LD_INT 20
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: PUSH
1329: LD_EXP 45
1333: PUSH
1334: LD_INT 1
1336: PLUS
1337: ARRAY
1338: ST_TO_ADDR
// end ; shipments_density := [ 150 , 125 , 100 , 50 ] [ def_shipments_density + 1 ] ;
1339: LD_ADDR_EXP 9
1343: PUSH
1344: LD_INT 150
1346: PUSH
1347: LD_INT 125
1349: PUSH
1350: LD_INT 100
1352: PUSH
1353: LD_INT 50
1355: PUSH
1356: EMPTY
1357: LIST
1358: LIST
1359: LIST
1360: LIST
1361: PUSH
1362: LD_EXP 46
1366: PUSH
1367: LD_INT 1
1369: PLUS
1370: ARRAY
1371: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1372: LD_ADDR_EXP 13
1376: PUSH
1377: LD_INT 0
1379: PUSH
1380: LD_INT 10500
1382: PUSH
1383: LD_INT 6300
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: LIST
1390: PUSH
1391: LD_EXP 52
1395: PUSH
1396: LD_INT 1
1398: PLUS
1399: ARRAY
1400: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1401: LD_ADDR_EXP 14
1405: PUSH
1406: LD_INT 0
1408: PUSH
1409: LD_INT 31500
1411: PUSH
1412: LD_INT 10500
1414: PUSH
1415: EMPTY
1416: LIST
1417: LIST
1418: LIST
1419: PUSH
1420: LD_EXP 52
1424: PUSH
1425: LD_INT 1
1427: PLUS
1428: ARRAY
1429: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1430: LD_ADDR_EXP 11
1434: PUSH
1435: LD_INT 0
1437: PUSH
1438: LD_INT 1
1440: PUSH
1441: LD_INT 2
1443: PUSH
1444: LD_INT 3
1446: PUSH
1447: EMPTY
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: PUSH
1453: LD_EXP 53
1457: PUSH
1458: LD_INT 1
1460: PLUS
1461: ARRAY
1462: ST_TO_ADDR
// amount_of_siberit := [ 30 , 50 , 80 , 100 , 130 , 150 , 200 ] [ def_amount_of_siberit + 1 ] ;
1463: LD_ADDR_EXP 12
1467: PUSH
1468: LD_INT 30
1470: PUSH
1471: LD_INT 50
1473: PUSH
1474: LD_INT 80
1476: PUSH
1477: LD_INT 100
1479: PUSH
1480: LD_INT 130
1482: PUSH
1483: LD_INT 150
1485: PUSH
1486: LD_INT 200
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: PUSH
1498: LD_EXP 1
1502: PUSH
1503: LD_INT 1
1505: PLUS
1506: ARRAY
1507: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1508: LD_ADDR_EXP 10
1512: PUSH
1513: LD_INT 1
1515: NEG
1516: PUSH
1517: LD_INT 350
1519: PUSH
1520: LD_INT 700
1522: PUSH
1523: LD_INT 1400
1525: PUSH
1526: LD_INT 0
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: PUSH
1536: LD_EXP 50
1540: PUSH
1541: LD_INT 1
1543: PLUS
1544: ARRAY
1545: ST_TO_ADDR
// battle_flags_id := [ ] ;
1546: LD_ADDR_EXP 29
1550: PUSH
1551: EMPTY
1552: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1553: LD_ADDR_EXP 15
1557: PUSH
1558: LD_INT 0
1560: PUSH
1561: LD_INT 1
1563: PUSH
1564: LD_INT 63000
1566: PUSH
1567: LD_INT 126000
1569: PUSH
1570: LD_INT 189000
1572: PUSH
1573: LD_INT 252000
1575: PUSH
1576: EMPTY
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: PUSH
1584: LD_EXP 54
1588: PUSH
1589: LD_INT 1
1591: PLUS
1592: ARRAY
1593: ST_TO_ADDR
// if ( Game_Type = 12 ) then
1594: LD_EXP 40
1598: PUSH
1599: LD_INT 12
1601: EQUAL
1602: IFFALSE 1660
// begin sheik := [ 0 , 1 ] [ def_sheik + 1 ] ;
1604: LD_ADDR_EXP 30
1608: PUSH
1609: LD_INT 0
1611: PUSH
1612: LD_INT 1
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PUSH
1619: LD_EXP 56
1623: PUSH
1624: LD_INT 1
1626: PLUS
1627: ARRAY
1628: ST_TO_ADDR
// mastodont := [ 0 , 1 , 2 ] [ def_mastodont + 1 ] end else
1629: LD_ADDR_EXP 31
1633: PUSH
1634: LD_INT 0
1636: PUSH
1637: LD_INT 1
1639: PUSH
1640: LD_INT 2
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: LIST
1647: PUSH
1648: LD_EXP 57
1652: PUSH
1653: LD_INT 1
1655: PLUS
1656: ARRAY
1657: ST_TO_ADDR
1658: GO 1676
// begin sheik := 0 ;
1660: LD_ADDR_EXP 30
1664: PUSH
1665: LD_INT 0
1667: ST_TO_ADDR
// mastodont := 0 ;
1668: LD_ADDR_EXP 31
1672: PUSH
1673: LD_INT 0
1675: ST_TO_ADDR
// end ; BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
1676: LD_ADDR_EXP 39
1680: PUSH
1681: LD_INT 9
1683: PUSH
1684: LD_INT 10
1686: PUSH
1687: LD_INT 11
1689: PUSH
1690: LD_INT 12
1692: PUSH
1693: LD_INT 13
1695: PUSH
1696: LD_INT 14
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: ST_TO_ADDR
// end ;
1707: LD_VAR 0 1
1711: RET
// function init_map ; var i , j ; begin
1712: LD_INT 0
1714: PPUSH
1715: PPUSH
1716: PPUSH
// normal_oil_deposits_locations := [ [ 101 , 187 ] , [ 18 , 26 ] , [ 50 , 89 ] , [ 123 , 3 ] , [ 182 , 69 ] , [ 231 , 174 ] ] ;
1717: LD_ADDR_EXP 25
1721: PUSH
1722: LD_INT 101
1724: PUSH
1725: LD_INT 187
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: PUSH
1732: LD_INT 18
1734: PUSH
1735: LD_INT 26
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: PUSH
1742: LD_INT 50
1744: PUSH
1745: LD_INT 89
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: PUSH
1752: LD_INT 123
1754: PUSH
1755: LD_INT 3
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: PUSH
1762: LD_INT 182
1764: PUSH
1765: LD_INT 69
1767: PUSH
1768: EMPTY
1769: LIST
1770: LIST
1771: PUSH
1772: LD_INT 231
1774: PUSH
1775: LD_INT 174
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 101 , 187 ] , [ 108 , 183 ] ] , [ [ 18 , 26 ] , [ 7 , 8 ] ] , [ [ 50 , 89 ] , [ 62 , 99 ] ] , [ [ 123 , 3 ] , [ 149 , 18 ] ] , [ [ 182 , 69 ] , [ 202 , 90 ] ] , [ [ 231 , 174 ] , [ 239 , 164 ] ] ] ;
1790: LD_ADDR_EXP 26
1794: PUSH
1795: LD_INT 101
1797: PUSH
1798: LD_INT 187
1800: PUSH
1801: EMPTY
1802: LIST
1803: LIST
1804: PUSH
1805: LD_INT 108
1807: PUSH
1808: LD_INT 183
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: PUSH
1819: LD_INT 18
1821: PUSH
1822: LD_INT 26
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: PUSH
1829: LD_INT 7
1831: PUSH
1832: LD_INT 8
1834: PUSH
1835: EMPTY
1836: LIST
1837: LIST
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 50
1845: PUSH
1846: LD_INT 89
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PUSH
1853: LD_INT 62
1855: PUSH
1856: LD_INT 99
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: PUSH
1863: EMPTY
1864: LIST
1865: LIST
1866: PUSH
1867: LD_INT 123
1869: PUSH
1870: LD_INT 3
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 149
1879: PUSH
1880: LD_INT 18
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PUSH
1891: LD_INT 182
1893: PUSH
1894: LD_INT 69
1896: PUSH
1897: EMPTY
1898: LIST
1899: LIST
1900: PUSH
1901: LD_INT 202
1903: PUSH
1904: LD_INT 90
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: PUSH
1915: LD_INT 231
1917: PUSH
1918: LD_INT 174
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: PUSH
1925: LD_INT 239
1927: PUSH
1928: LD_INT 164
1930: PUSH
1931: EMPTY
1932: LIST
1933: LIST
1934: PUSH
1935: EMPTY
1936: LIST
1937: LIST
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 96 , 185 ] , [ 21 , 29 ] , [ 50 , 85 ] , [ 128 , 2 ] , [ 186 , 72 ] , [ 234 , 174 ] ] ;
1947: LD_ADDR_EXP 27
1951: PUSH
1952: LD_INT 96
1954: PUSH
1955: LD_INT 185
1957: PUSH
1958: EMPTY
1959: LIST
1960: LIST
1961: PUSH
1962: LD_INT 21
1964: PUSH
1965: LD_INT 29
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PUSH
1972: LD_INT 50
1974: PUSH
1975: LD_INT 85
1977: PUSH
1978: EMPTY
1979: LIST
1980: LIST
1981: PUSH
1982: LD_INT 128
1984: PUSH
1985: LD_INT 2
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: PUSH
1992: LD_INT 186
1994: PUSH
1995: LD_INT 72
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: PUSH
2002: LD_INT 234
2004: PUSH
2005: LD_INT 174
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 96 , 185 ] , [ 109 , 179 ] ] , [ [ 21 , 29 ] , [ 9 , 5 ] ] , [ [ 50 , 85 ] , [ 66 , 102 ] ] , [ [ 128 , 2 ] , [ 152 , 15 ] ] , [ [ 186 , 72 ] , [ 200 , 86 ] ] , [ [ 234 , 174 ] , [ 237 , 160 ] ] ] ;
2020: LD_ADDR_EXP 28
2024: PUSH
2025: LD_INT 96
2027: PUSH
2028: LD_INT 185
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: PUSH
2035: LD_INT 109
2037: PUSH
2038: LD_INT 179
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PUSH
2049: LD_INT 21
2051: PUSH
2052: LD_INT 29
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: PUSH
2059: LD_INT 9
2061: PUSH
2062: LD_INT 5
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: PUSH
2069: EMPTY
2070: LIST
2071: LIST
2072: PUSH
2073: LD_INT 50
2075: PUSH
2076: LD_INT 85
2078: PUSH
2079: EMPTY
2080: LIST
2081: LIST
2082: PUSH
2083: LD_INT 66
2085: PUSH
2086: LD_INT 102
2088: PUSH
2089: EMPTY
2090: LIST
2091: LIST
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 128
2099: PUSH
2100: LD_INT 2
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: LD_INT 152
2109: PUSH
2110: LD_INT 15
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: PUSH
2121: LD_INT 186
2123: PUSH
2124: LD_INT 72
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: PUSH
2131: LD_INT 200
2133: PUSH
2134: LD_INT 86
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: PUSH
2141: EMPTY
2142: LIST
2143: LIST
2144: PUSH
2145: LD_INT 234
2147: PUSH
2148: LD_INT 174
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: PUSH
2155: LD_INT 237
2157: PUSH
2158: LD_INT 160
2160: PUSH
2161: EMPTY
2162: LIST
2163: LIST
2164: PUSH
2165: EMPTY
2166: LIST
2167: LIST
2168: PUSH
2169: EMPTY
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: ST_TO_ADDR
// depot_def := [ [ 100 , 179 , 0 ] , [ 21 , 18 , 2 ] , [ 65 , 90 , 2 ] , [ 132 , 11 , 1 ] , [ 190 , 82 , 4 ] , [ 230 , 164 , 4 ] ] ;
2177: LD_ADDR_EXP 22
2181: PUSH
2182: LD_INT 100
2184: PUSH
2185: LD_INT 179
2187: PUSH
2188: LD_INT 0
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: LIST
2195: PUSH
2196: LD_INT 21
2198: PUSH
2199: LD_INT 18
2201: PUSH
2202: LD_INT 2
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: LIST
2209: PUSH
2210: LD_INT 65
2212: PUSH
2213: LD_INT 90
2215: PUSH
2216: LD_INT 2
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: LIST
2223: PUSH
2224: LD_INT 132
2226: PUSH
2227: LD_INT 11
2229: PUSH
2230: LD_INT 1
2232: PUSH
2233: EMPTY
2234: LIST
2235: LIST
2236: LIST
2237: PUSH
2238: LD_INT 190
2240: PUSH
2241: LD_INT 82
2243: PUSH
2244: LD_INT 4
2246: PUSH
2247: EMPTY
2248: LIST
2249: LIST
2250: LIST
2251: PUSH
2252: LD_INT 230
2254: PUSH
2255: LD_INT 164
2257: PUSH
2258: LD_INT 4
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: LIST
2265: PUSH
2266: EMPTY
2267: LIST
2268: LIST
2269: LIST
2270: LIST
2271: LIST
2272: LIST
2273: ST_TO_ADDR
// for i in depot_def do
2274: LD_ADDR_VAR 0 2
2278: PUSH
2279: LD_EXP 22
2283: PUSH
2284: FOR_IN
2285: IFFALSE 2359
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 10 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 10 ) ] ] ;
2287: LD_ADDR_EXP 24
2291: PUSH
2292: LD_EXP 24
2296: PUSH
2297: LD_VAR 0 2
2301: PUSH
2302: LD_INT 1
2304: ARRAY
2305: PPUSH
2306: LD_VAR 0 2
2310: PUSH
2311: LD_INT 3
2313: ARRAY
2314: PPUSH
2315: LD_INT 10
2317: PPUSH
2318: CALL_OW 272
2322: PUSH
2323: LD_VAR 0 2
2327: PUSH
2328: LD_INT 2
2330: ARRAY
2331: PPUSH
2332: LD_VAR 0 2
2336: PUSH
2337: LD_INT 3
2339: ARRAY
2340: PPUSH
2341: LD_INT 10
2343: PPUSH
2344: CALL_OW 273
2348: PUSH
2349: EMPTY
2350: LIST
2351: LIST
2352: PUSH
2353: EMPTY
2354: LIST
2355: ADD
2356: ST_TO_ADDR
2357: GO 2284
2359: POP
2360: POP
// breastworks_def := [ [ [ 88 , 154 , 3 ] , [ 105 , 167 , 4 ] ] , [ [ 27 , 32 , 5 ] , [ 40 , 24 , 4 ] ] , [ [ 78 , 102 , 5 ] , [ 74 , 84 , 3 ] ] , [ [ 128 , 20 , 0 ] , [ 122 , 6 , 1 ] ] , [ [ 185 , 92 , 0 ] , [ 175 , 73 , 1 ] ] , [ [ 219 , 171 , 1 ] , [ 219 , 151 , 2 ] ] ] ;
2361: LD_ADDR_EXP 23
2365: PUSH
2366: LD_INT 88
2368: PUSH
2369: LD_INT 154
2371: PUSH
2372: LD_INT 3
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: LIST
2379: PUSH
2380: LD_INT 105
2382: PUSH
2383: LD_INT 167
2385: PUSH
2386: LD_INT 4
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: LIST
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: PUSH
2398: LD_INT 27
2400: PUSH
2401: LD_INT 32
2403: PUSH
2404: LD_INT 5
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: LIST
2411: PUSH
2412: LD_INT 40
2414: PUSH
2415: LD_INT 24
2417: PUSH
2418: LD_INT 4
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: LIST
2425: PUSH
2426: EMPTY
2427: LIST
2428: LIST
2429: PUSH
2430: LD_INT 78
2432: PUSH
2433: LD_INT 102
2435: PUSH
2436: LD_INT 5
2438: PUSH
2439: EMPTY
2440: LIST
2441: LIST
2442: LIST
2443: PUSH
2444: LD_INT 74
2446: PUSH
2447: LD_INT 84
2449: PUSH
2450: LD_INT 3
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: LIST
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: PUSH
2462: LD_INT 128
2464: PUSH
2465: LD_INT 20
2467: PUSH
2468: LD_INT 0
2470: PUSH
2471: EMPTY
2472: LIST
2473: LIST
2474: LIST
2475: PUSH
2476: LD_INT 122
2478: PUSH
2479: LD_INT 6
2481: PUSH
2482: LD_INT 1
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: LIST
2489: PUSH
2490: EMPTY
2491: LIST
2492: LIST
2493: PUSH
2494: LD_INT 185
2496: PUSH
2497: LD_INT 92
2499: PUSH
2500: LD_INT 0
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: LIST
2507: PUSH
2508: LD_INT 175
2510: PUSH
2511: LD_INT 73
2513: PUSH
2514: LD_INT 1
2516: PUSH
2517: EMPTY
2518: LIST
2519: LIST
2520: LIST
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: PUSH
2526: LD_INT 219
2528: PUSH
2529: LD_INT 171
2531: PUSH
2532: LD_INT 1
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: LIST
2539: PUSH
2540: LD_INT 219
2542: PUSH
2543: LD_INT 151
2545: PUSH
2546: LD_INT 2
2548: PUSH
2549: EMPTY
2550: LIST
2551: LIST
2552: LIST
2553: PUSH
2554: EMPTY
2555: LIST
2556: LIST
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: LIST
2562: LIST
2563: LIST
2564: LIST
2565: ST_TO_ADDR
// for i = 1 to Side_Positions do
2566: LD_ADDR_VAR 0 2
2570: PUSH
2571: DOUBLE
2572: LD_INT 1
2574: DEC
2575: ST_TO_ADDR
2576: LD_EXP 18
2580: PUSH
2581: FOR_TO
2582: IFFALSE 2712
// begin if not Side_Positions [ i ] then
2584: LD_EXP 18
2588: PUSH
2589: LD_VAR 0 2
2593: ARRAY
2594: NOT
2595: IFFALSE 2599
// continue ;
2597: GO 2581
// if def_extra_oil_deposits then
2599: LD_EXP 47
2603: IFFALSE 2661
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2605: LD_ADDR_VAR 0 3
2609: PUSH
2610: LD_EXP 26
2614: PUSH
2615: LD_EXP 18
2619: PUSH
2620: LD_VAR 0 2
2624: ARRAY
2625: ARRAY
2626: PUSH
2627: FOR_IN
2628: IFFALSE 2657
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2630: LD_VAR 0 3
2634: PUSH
2635: LD_INT 1
2637: ARRAY
2638: PPUSH
2639: LD_VAR 0 3
2643: PUSH
2644: LD_INT 2
2646: ARRAY
2647: PPUSH
2648: LD_INT 2
2650: PPUSH
2651: CALL_OW 62
2655: GO 2627
2657: POP
2658: POP
2659: GO 2710
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2661: LD_EXP 25
2665: PUSH
2666: LD_EXP 18
2670: PUSH
2671: LD_VAR 0 2
2675: ARRAY
2676: ARRAY
2677: PUSH
2678: LD_INT 1
2680: ARRAY
2681: PPUSH
2682: LD_EXP 25
2686: PUSH
2687: LD_EXP 18
2691: PUSH
2692: LD_VAR 0 2
2696: ARRAY
2697: ARRAY
2698: PUSH
2699: LD_INT 2
2701: ARRAY
2702: PPUSH
2703: LD_INT 2
2705: PPUSH
2706: CALL_OW 62
// end ;
2710: GO 2581
2712: POP
2713: POP
// if def_extra_sib_deposits then
2714: LD_EXP 48
2718: IFFALSE 2872
// for i = 1 to Side_Positions do
2720: LD_ADDR_VAR 0 2
2724: PUSH
2725: DOUBLE
2726: LD_INT 1
2728: DEC
2729: ST_TO_ADDR
2730: LD_EXP 18
2734: PUSH
2735: FOR_TO
2736: IFFALSE 2870
// begin if not Side_Positions [ i ] then
2738: LD_EXP 18
2742: PUSH
2743: LD_VAR 0 2
2747: ARRAY
2748: NOT
2749: IFFALSE 2753
// continue ;
2751: GO 2735
// if def_extra_sib_deposits = 2 then
2753: LD_EXP 48
2757: PUSH
2758: LD_INT 2
2760: EQUAL
2761: IFFALSE 2819
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
2763: LD_ADDR_VAR 0 3
2767: PUSH
2768: LD_EXP 28
2772: PUSH
2773: LD_EXP 18
2777: PUSH
2778: LD_VAR 0 2
2782: ARRAY
2783: ARRAY
2784: PUSH
2785: FOR_IN
2786: IFFALSE 2815
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2788: LD_VAR 0 3
2792: PUSH
2793: LD_INT 1
2795: ARRAY
2796: PPUSH
2797: LD_VAR 0 3
2801: PUSH
2802: LD_INT 2
2804: ARRAY
2805: PPUSH
2806: LD_INT 3
2808: PPUSH
2809: CALL_OW 62
2813: GO 2785
2815: POP
2816: POP
2817: GO 2868
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2819: LD_EXP 27
2823: PUSH
2824: LD_EXP 18
2828: PUSH
2829: LD_VAR 0 2
2833: ARRAY
2834: ARRAY
2835: PUSH
2836: LD_INT 1
2838: ARRAY
2839: PPUSH
2840: LD_EXP 27
2844: PUSH
2845: LD_EXP 18
2849: PUSH
2850: LD_VAR 0 2
2854: ARRAY
2855: ARRAY
2856: PUSH
2857: LD_INT 2
2859: ARRAY
2860: PPUSH
2861: LD_INT 3
2863: PPUSH
2864: CALL_OW 62
// end ;
2868: GO 2735
2870: POP
2871: POP
// end ;
2872: LD_VAR 0 1
2876: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2877: LD_INT 0
2879: PPUSH
2880: PPUSH
2881: PPUSH
// if not Team_Game then
2882: LD_EXP 20
2886: NOT
2887: IFFALSE 2985
// begin for i = 1 to 8 do
2889: LD_ADDR_VAR 0 2
2893: PUSH
2894: DOUBLE
2895: LD_INT 1
2897: DEC
2898: ST_TO_ADDR
2899: LD_INT 8
2901: PUSH
2902: FOR_TO
2903: IFFALSE 2981
// for j = 1 to 8 do
2905: LD_ADDR_VAR 0 3
2909: PUSH
2910: DOUBLE
2911: LD_INT 1
2913: DEC
2914: ST_TO_ADDR
2915: LD_INT 8
2917: PUSH
2918: FOR_TO
2919: IFFALSE 2977
// if i <> j then
2921: LD_VAR 0 2
2925: PUSH
2926: LD_VAR 0 3
2930: NONEQUAL
2931: IFFALSE 2955
// SetAttitude ( i , j , att_neutral , true ) else
2933: LD_VAR 0 2
2937: PPUSH
2938: LD_VAR 0 3
2942: PPUSH
2943: LD_INT 0
2945: PPUSH
2946: LD_INT 1
2948: PPUSH
2949: CALL_OW 80
2953: GO 2975
// SetAttitude ( i , j , att_friend , true ) ;
2955: LD_VAR 0 2
2959: PPUSH
2960: LD_VAR 0 3
2964: PPUSH
2965: LD_INT 1
2967: PPUSH
2968: LD_INT 1
2970: PPUSH
2971: CALL_OW 80
2975: GO 2918
2977: POP
2978: POP
2979: GO 2902
2981: POP
2982: POP
// end else
2983: GO 3160
// begin if def_shared_vision then
2985: LD_EXP 49
2989: IFFALSE 3054
// begin for i in Teams do
2991: LD_ADDR_VAR 0 2
2995: PUSH
2996: LD_EXP 17
3000: PUSH
3001: FOR_IN
3002: IFFALSE 3052
// for j = 2 to i do
3004: LD_ADDR_VAR 0 3
3008: PUSH
3009: DOUBLE
3010: LD_INT 2
3012: DEC
3013: ST_TO_ADDR
3014: LD_VAR 0 2
3018: PUSH
3019: FOR_TO
3020: IFFALSE 3048
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
3022: LD_VAR 0 2
3026: PUSH
3027: LD_VAR 0 3
3031: ARRAY
3032: PPUSH
3033: LD_VAR 0 2
3037: PUSH
3038: LD_INT 1
3040: ARRAY
3041: PPUSH
3042: CALL_OW 343
3046: GO 3019
3048: POP
3049: POP
3050: GO 3001
3052: POP
3053: POP
// end ; for i = 1 to 8 do
3054: LD_ADDR_VAR 0 2
3058: PUSH
3059: DOUBLE
3060: LD_INT 1
3062: DEC
3063: ST_TO_ADDR
3064: LD_INT 8
3066: PUSH
3067: FOR_TO
3068: IFFALSE 3158
// for j = 1 to 8 do
3070: LD_ADDR_VAR 0 3
3074: PUSH
3075: DOUBLE
3076: LD_INT 1
3078: DEC
3079: ST_TO_ADDR
3080: LD_INT 8
3082: PUSH
3083: FOR_TO
3084: IFFALSE 3154
// if Side_Teams [ i ] = Side_Teams [ j ] then
3086: LD_EXP 16
3090: PUSH
3091: LD_VAR 0 2
3095: ARRAY
3096: PUSH
3097: LD_EXP 16
3101: PUSH
3102: LD_VAR 0 3
3106: ARRAY
3107: EQUAL
3108: IFFALSE 3132
// SetAttitude ( i , j , att_friend , true ) else
3110: LD_VAR 0 2
3114: PPUSH
3115: LD_VAR 0 3
3119: PPUSH
3120: LD_INT 1
3122: PPUSH
3123: LD_INT 1
3125: PPUSH
3126: CALL_OW 80
3130: GO 3152
// SetAttitude ( i , j , att_enemy , true ) ;
3132: LD_VAR 0 2
3136: PPUSH
3137: LD_VAR 0 3
3141: PPUSH
3142: LD_INT 2
3144: PPUSH
3145: LD_INT 1
3147: PPUSH
3148: CALL_OW 80
3152: GO 3083
3154: POP
3155: POP
3156: GO 3067
3158: POP
3159: POP
// end ; end ;
3160: LD_VAR 0 1
3164: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
3165: LD_INT 0
3167: PPUSH
3168: PPUSH
3169: PPUSH
3170: PPUSH
// result := [ ] ;
3171: LD_ADDR_VAR 0 7
3175: PUSH
3176: EMPTY
3177: ST_TO_ADDR
// for i := 1 to count do
3178: LD_ADDR_VAR 0 8
3182: PUSH
3183: DOUBLE
3184: LD_INT 1
3186: DEC
3187: ST_TO_ADDR
3188: LD_VAR 0 1
3192: PUSH
3193: FOR_TO
3194: IFFALSE 3644
// begin uc_direction := Rand ( 0 , 5 ) ;
3196: LD_ADDR_OWVAR 24
3200: PUSH
3201: LD_INT 0
3203: PPUSH
3204: LD_INT 5
3206: PPUSH
3207: CALL_OW 12
3211: ST_TO_ADDR
// if commander then
3212: LD_LOC 1
3216: IFFALSE 3357
// begin hc_name := mp_sides_players_names [ uc_side ] ;
3218: LD_ADDR_OWVAR 26
3222: PUSH
3223: LD_OWVAR 19
3227: PUSH
3228: LD_OWVAR 20
3232: ARRAY
3233: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3234: LD_INT 1
3236: PPUSH
3237: LD_INT 2
3239: PPUSH
3240: CALL_OW 12
3244: PPUSH
3245: LD_VAR 0 2
3249: PPUSH
3250: LD_EXP 6
3254: PUSH
3255: LD_INT 2
3257: PLUS
3258: PPUSH
3259: CALL_OW 380
// hc_importance := 105 ;
3263: LD_ADDR_OWVAR 32
3267: PUSH
3268: LD_INT 105
3270: ST_TO_ADDR
// commander := false ;
3271: LD_ADDR_LOC 1
3275: PUSH
3276: LD_INT 0
3278: ST_TO_ADDR
// if Multiplayer then
3279: LD_OWVAR 4
3283: IFFALSE 3355
// begin if sheik then
3285: LD_EXP 30
3289: IFFALSE 3317
// begin hc_gallery :=  ;
3291: LD_ADDR_OWVAR 33
3295: PUSH
3296: LD_STRING 
3298: ST_TO_ADDR
// hc_class := class_desert_warior ;
3299: LD_ADDR_OWVAR 28
3303: PUSH
3304: LD_INT 11
3306: ST_TO_ADDR
// hc_sex := sex_male ;
3307: LD_ADDR_OWVAR 27
3311: PUSH
3312: LD_INT 1
3314: ST_TO_ADDR
// end else
3315: GO 3355
// begin hc_gallery := MULTIAVATARS ;
3317: LD_ADDR_OWVAR 33
3321: PUSH
3322: LD_STRING MULTIAVATARS
3324: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3325: LD_ADDR_OWVAR 34
3329: PUSH
3330: LD_OWVAR 20
3334: PPUSH
3335: CALL_OW 525
3339: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3340: LD_ADDR_OWVAR 27
3344: PUSH
3345: LD_OWVAR 20
3349: PPUSH
3350: CALL_OW 526
3354: ST_TO_ADDR
// end ; end ; end else
3355: GO 3420
// begin hc_name :=  ;
3357: LD_ADDR_OWVAR 26
3361: PUSH
3362: LD_STRING 
3364: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3365: LD_INT 1
3367: PPUSH
3368: LD_INT 2
3370: PPUSH
3371: CALL_OW 12
3375: PPUSH
3376: LD_VAR 0 2
3380: PPUSH
3381: LD_EXP 6
3385: PPUSH
3386: CALL_OW 380
// hc_importance := 0 ;
3390: LD_ADDR_OWVAR 32
3394: PUSH
3395: LD_INT 0
3397: ST_TO_ADDR
// if Multiplayer then
3398: LD_OWVAR 4
3402: IFFALSE 3420
// begin hc_gallery :=  ;
3404: LD_ADDR_OWVAR 33
3408: PUSH
3409: LD_STRING 
3411: ST_TO_ADDR
// hc_face_number := 0 ;
3412: LD_ADDR_OWVAR 34
3416: PUSH
3417: LD_INT 0
3419: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3420: LD_ADDR_VAR 0 10
3424: PUSH
3425: CALL_OW 44
3429: ST_TO_ADDR
// if global_defined then
3430: LD_LOC 3
3434: IFFALSE 3574
// begin if ( cl = class_soldier ) then
3436: LD_VAR 0 2
3440: PUSH
3441: LD_INT 1
3443: EQUAL
3444: IFFALSE 3464
// j := i + soldiers_created else
3446: LD_ADDR_VAR 0 9
3450: PUSH
3451: LD_VAR 0 8
3455: PUSH
3456: LD_LOC 4
3460: PLUS
3461: ST_TO_ADDR
3462: GO 3474
// j := i ;
3464: LD_ADDR_VAR 0 9
3468: PUSH
3469: LD_VAR 0 8
3473: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3474: LD_LOC 2
3478: PUSH
3479: LD_VAR 0 2
3483: ARRAY
3484: PUSH
3485: LD_VAR 0 9
3489: ARRAY
3490: PPUSH
3491: LD_VAR 0 10
3495: PPUSH
3496: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3500: LD_VAR 0 10
3504: PPUSH
3505: LD_INT 2
3507: PPUSH
3508: LD_LOC 2
3512: PUSH
3513: LD_VAR 0 2
3517: ARRAY
3518: PUSH
3519: LD_VAR 0 9
3523: ARRAY
3524: PPUSH
3525: LD_INT 2
3527: PPUSH
3528: CALL_OW 260
3532: PPUSH
3533: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3537: LD_VAR 0 10
3541: PPUSH
3542: LD_INT 1
3544: PPUSH
3545: LD_LOC 2
3549: PUSH
3550: LD_VAR 0 2
3554: ARRAY
3555: PUSH
3556: LD_VAR 0 9
3560: ARRAY
3561: PPUSH
3562: LD_INT 1
3564: PPUSH
3565: CALL_OW 260
3569: PPUSH
3570: CALL_OW 239
// end ; if building then
3574: LD_VAR 0 6
3578: IFFALSE 3596
// PlaceHumanInUnit ( un , building ) else
3580: LD_VAR 0 10
3584: PPUSH
3585: LD_VAR 0 6
3589: PPUSH
3590: CALL_OW 52
3594: GO 3623
// PlaceUnitXYR ( un , x , y , r , false ) ;
3596: LD_VAR 0 10
3600: PPUSH
3601: LD_VAR 0 3
3605: PPUSH
3606: LD_VAR 0 4
3610: PPUSH
3611: LD_VAR 0 5
3615: PPUSH
3616: LD_INT 0
3618: PPUSH
3619: CALL_OW 50
// result := result ^ [ un ] ;
3623: LD_ADDR_VAR 0 7
3627: PUSH
3628: LD_VAR 0 7
3632: PUSH
3633: LD_VAR 0 10
3637: PUSH
3638: EMPTY
3639: LIST
3640: ADD
3641: ST_TO_ADDR
// end ;
3642: GO 3193
3644: POP
3645: POP
// if not global_defined then
3646: LD_LOC 3
3650: NOT
3651: IFFALSE 3729
// if ( global_units >= cl ) then
3653: LD_LOC 2
3657: PUSH
3658: LD_VAR 0 2
3662: GREATEREQUAL
3663: IFFALSE 3704
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3665: LD_ADDR_LOC 2
3669: PUSH
3670: LD_LOC 2
3674: PPUSH
3675: LD_VAR 0 2
3679: PPUSH
3680: LD_LOC 2
3684: PUSH
3685: LD_VAR 0 2
3689: ARRAY
3690: PUSH
3691: LD_VAR 0 7
3695: ADD
3696: PPUSH
3697: CALL_OW 1
3701: ST_TO_ADDR
3702: GO 3729
// global_units := Replace ( global_units , cl , result ) ;
3704: LD_ADDR_LOC 2
3708: PUSH
3709: LD_LOC 2
3713: PPUSH
3714: LD_VAR 0 2
3718: PPUSH
3719: LD_VAR 0 7
3723: PPUSH
3724: CALL_OW 1
3728: ST_TO_ADDR
// end ;
3729: LD_VAR 0 7
3733: RET
// function prepare_mastodonts ( n ) ; var i ; begin
3734: LD_INT 0
3736: PPUSH
3737: PPUSH
// uc_side := 0 ;
3738: LD_ADDR_OWVAR 20
3742: PUSH
3743: LD_INT 0
3745: ST_TO_ADDR
// uc_nation := 0 ;
3746: LD_ADDR_OWVAR 21
3750: PUSH
3751: LD_INT 0
3753: ST_TO_ADDR
// vc_chassis := 31 ;
3754: LD_ADDR_OWVAR 37
3758: PUSH
3759: LD_INT 31
3761: ST_TO_ADDR
// vc_control := control_rider ;
3762: LD_ADDR_OWVAR 38
3766: PUSH
3767: LD_INT 4
3769: ST_TO_ADDR
// for i = 1 to n do
3770: LD_ADDR_VAR 0 3
3774: PUSH
3775: DOUBLE
3776: LD_INT 1
3778: DEC
3779: ST_TO_ADDR
3780: LD_VAR 0 1
3784: PUSH
3785: FOR_TO
3786: IFFALSE 3805
// PlaceUnitArea ( CreateVehicle , MastodontSpawn , false ) ;
3788: CALL_OW 45
3792: PPUSH
3793: LD_INT 15
3795: PPUSH
3796: LD_INT 0
3798: PPUSH
3799: CALL_OW 49
3803: GO 3785
3805: POP
3806: POP
// end ;
3807: LD_VAR 0 2
3811: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3812: LD_INT 0
3814: PPUSH
3815: PPUSH
3816: PPUSH
3817: PPUSH
3818: PPUSH
3819: PPUSH
3820: PPUSH
3821: PPUSH
3822: PPUSH
// if side in [ 0 , 9 ] then
3823: LD_VAR 0 1
3827: PUSH
3828: LD_INT 0
3830: PUSH
3831: LD_INT 9
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: IN
3838: IFFALSE 3842
// exit ;
3840: GO 4859
// pos := Side_Positions [ side ] ;
3842: LD_ADDR_VAR 0 3
3846: PUSH
3847: LD_EXP 18
3851: PUSH
3852: LD_VAR 0 1
3856: ARRAY
3857: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3858: LD_ADDR_OWVAR 21
3862: PUSH
3863: LD_EXP 19
3867: PUSH
3868: LD_VAR 0 1
3872: ARRAY
3873: ST_TO_ADDR
// uc_side := side ;
3874: LD_ADDR_OWVAR 20
3878: PUSH
3879: LD_VAR 0 1
3883: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3884: LD_ADDR_VAR 0 4
3888: PUSH
3889: LD_EXP 22
3893: PUSH
3894: LD_VAR 0 3
3898: ARRAY
3899: PUSH
3900: LD_INT 1
3902: ARRAY
3903: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3904: LD_ADDR_VAR 0 5
3908: PUSH
3909: LD_EXP 22
3913: PUSH
3914: LD_VAR 0 3
3918: ARRAY
3919: PUSH
3920: LD_INT 2
3922: ARRAY
3923: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3924: LD_ADDR_VAR 0 6
3928: PUSH
3929: LD_EXP 22
3933: PUSH
3934: LD_VAR 0 3
3938: ARRAY
3939: PUSH
3940: LD_INT 3
3942: ARRAY
3943: ST_TO_ADDR
// if is_depot then
3944: LD_EXP 3
3948: IFFALSE 4081
// begin bc_type = b_depot ;
3950: LD_ADDR_OWVAR 42
3954: PUSH
3955: LD_INT 0
3957: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3958: LD_ADDR_VAR 0 10
3962: PUSH
3963: LD_VAR 0 4
3967: PPUSH
3968: LD_VAR 0 5
3972: PPUSH
3973: LD_VAR 0 6
3977: PPUSH
3978: CALL_OW 47
3982: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3983: LD_VAR 0 10
3987: PPUSH
3988: LD_STRING @
3990: PUSH
3991: LD_VAR 0 1
3995: STR
3996: PPUSH
3997: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
4001: LD_VAR 0 10
4005: PPUSH
4006: CALL_OW 274
4010: PPUSH
4011: LD_INT 1
4013: PPUSH
4014: LD_EXP 8
4018: PUSH
4019: LD_INT 1
4021: ARRAY
4022: PPUSH
4023: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
4027: LD_VAR 0 10
4031: PPUSH
4032: CALL_OW 274
4036: PPUSH
4037: LD_INT 2
4039: PPUSH
4040: LD_EXP 8
4044: PUSH
4045: LD_INT 2
4047: ARRAY
4048: PPUSH
4049: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
4053: LD_VAR 0 10
4057: PPUSH
4058: CALL_OW 274
4062: PPUSH
4063: LD_INT 3
4065: PPUSH
4066: LD_EXP 8
4070: PUSH
4071: LD_INT 3
4073: ARRAY
4074: PPUSH
4075: CALL_OW 277
// end else
4079: GO 4225
// begin for i := 1 to 3 do
4081: LD_ADDR_VAR 0 7
4085: PUSH
4086: DOUBLE
4087: LD_INT 1
4089: DEC
4090: ST_TO_ADDR
4091: LD_INT 3
4093: PUSH
4094: FOR_TO
4095: IFFALSE 4223
// begin r := starting_resources [ i ] ;
4097: LD_ADDR_VAR 0 8
4101: PUSH
4102: LD_EXP 8
4106: PUSH
4107: LD_VAR 0 7
4111: ARRAY
4112: ST_TO_ADDR
// while r >= 10 do
4113: LD_VAR 0 8
4117: PUSH
4118: LD_INT 10
4120: GREATEREQUAL
4121: IFFALSE 4221
// if r > 50 then
4123: LD_VAR 0 8
4127: PUSH
4128: LD_INT 50
4130: GREATER
4131: IFFALSE 4177
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
4133: LD_VAR 0 7
4137: PPUSH
4138: LD_INT 5
4140: PPUSH
4141: LD_VAR 0 4
4145: PPUSH
4146: LD_VAR 0 5
4150: PPUSH
4151: LD_INT 4
4153: PPUSH
4154: LD_INT 0
4156: PPUSH
4157: CALL_OW 60
// r := r - 50 ;
4161: LD_ADDR_VAR 0 8
4165: PUSH
4166: LD_VAR 0 8
4170: PUSH
4171: LD_INT 50
4173: MINUS
4174: ST_TO_ADDR
// end else
4175: GO 4219
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
4177: LD_VAR 0 7
4181: PPUSH
4182: LD_VAR 0 8
4186: PUSH
4187: LD_INT 10
4189: DIV
4190: PPUSH
4191: LD_VAR 0 4
4195: PPUSH
4196: LD_VAR 0 5
4200: PPUSH
4201: LD_INT 4
4203: PPUSH
4204: LD_INT 0
4206: PPUSH
4207: CALL_OW 60
// r := 0 ;
4211: LD_ADDR_VAR 0 8
4215: PUSH
4216: LD_INT 0
4218: ST_TO_ADDR
// end ;
4219: GO 4113
// end ;
4221: GO 4094
4223: POP
4224: POP
// end ; for r in starting_crates do
4225: LD_ADDR_VAR 0 8
4229: PUSH
4230: LD_EXP 7
4234: PUSH
4235: FOR_IN
4236: IFFALSE 4268
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
4238: LD_INT 1
4240: PPUSH
4241: LD_INT 5
4243: PPUSH
4244: LD_VAR 0 4
4248: PPUSH
4249: LD_VAR 0 5
4253: PPUSH
4254: LD_VAR 0 8
4258: PPUSH
4259: LD_INT 0
4261: PPUSH
4262: CALL_OW 60
4266: GO 4235
4268: POP
4269: POP
// if def_morale_flags then
4270: LD_EXP 50
4274: IFFALSE 4413
// begin x := start_def [ pos ] [ 1 ] ;
4276: LD_ADDR_VAR 0 4
4280: PUSH
4281: LD_EXP 24
4285: PUSH
4286: LD_VAR 0 3
4290: ARRAY
4291: PUSH
4292: LD_INT 1
4294: ARRAY
4295: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4296: LD_ADDR_VAR 0 5
4300: PUSH
4301: LD_EXP 24
4305: PUSH
4306: LD_VAR 0 3
4310: ARRAY
4311: PUSH
4312: LD_INT 2
4314: ARRAY
4315: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4316: LD_VAR 0 4
4320: PPUSH
4321: LD_VAR 0 5
4325: PPUSH
4326: LD_INT 12
4328: PPUSH
4329: LD_INT 2
4331: PPUSH
4332: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4336: LD_ADDR_EXP 29
4340: PUSH
4341: LD_EXP 29
4345: PUSH
4346: LD_VAR 0 1
4350: PPUSH
4351: LD_VAR 0 4
4355: PPUSH
4356: LD_VAR 0 5
4360: PPUSH
4361: LD_INT 1
4363: PUSH
4364: LD_INT 100
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: PUSH
4371: LD_INT 2
4373: PUSH
4374: LD_INT 50
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: PUSH
4381: LD_INT 3
4383: PUSH
4384: LD_INT 20
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: PUSH
4391: LD_INT 20
4393: PUSH
4394: LD_INT 100
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: PPUSH
4407: CALL_OW 418
4411: ADD
4412: ST_TO_ADDR
// end ; commander := true ;
4413: LD_ADDR_LOC 1
4417: PUSH
4418: LD_INT 1
4420: ST_TO_ADDR
// soldiers_created := 0 ;
4421: LD_ADDR_LOC 4
4425: PUSH
4426: LD_INT 0
4428: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4429: LD_ADDR_VAR 0 7
4433: PUSH
4434: DOUBLE
4435: LD_INT 1
4437: DEC
4438: ST_TO_ADDR
4439: LD_EXP 4
4443: PUSH
4444: FOR_TO
4445: IFFALSE 4598
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4447: LD_ADDR_VAR 0 4
4451: PUSH
4452: LD_EXP 23
4456: PUSH
4457: LD_VAR 0 3
4461: ARRAY
4462: PUSH
4463: LD_VAR 0 7
4467: ARRAY
4468: PUSH
4469: LD_INT 1
4471: ARRAY
4472: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4473: LD_ADDR_VAR 0 5
4477: PUSH
4478: LD_EXP 23
4482: PUSH
4483: LD_VAR 0 3
4487: ARRAY
4488: PUSH
4489: LD_VAR 0 7
4493: ARRAY
4494: PUSH
4495: LD_INT 2
4497: ARRAY
4498: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4499: LD_ADDR_VAR 0 6
4503: PUSH
4504: LD_EXP 23
4508: PUSH
4509: LD_VAR 0 3
4513: ARRAY
4514: PUSH
4515: LD_VAR 0 7
4519: ARRAY
4520: PUSH
4521: LD_INT 3
4523: ARRAY
4524: ST_TO_ADDR
// bc_type := b_breastwork ;
4525: LD_ADDR_OWVAR 42
4529: PUSH
4530: LD_INT 31
4532: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4533: LD_ADDR_VAR 0 9
4537: PUSH
4538: LD_VAR 0 4
4542: PPUSH
4543: LD_VAR 0 5
4547: PPUSH
4548: LD_VAR 0 6
4552: PPUSH
4553: CALL_OW 47
4557: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4558: LD_INT 1
4560: PPUSH
4561: LD_INT 1
4563: PPUSH
4564: LD_INT 0
4566: PPUSH
4567: LD_INT 0
4569: PPUSH
4570: LD_INT 0
4572: PPUSH
4573: LD_VAR 0 9
4577: PPUSH
4578: CALL 3165 0 6
// soldiers_created := soldiers_created + 1 ;
4582: LD_ADDR_LOC 4
4586: PUSH
4587: LD_LOC 4
4591: PUSH
4592: LD_INT 1
4594: PLUS
4595: ST_TO_ADDR
// end ;
4596: GO 4444
4598: POP
4599: POP
// x := start_def [ pos ] [ 1 ] ;
4600: LD_ADDR_VAR 0 4
4604: PUSH
4605: LD_EXP 24
4609: PUSH
4610: LD_VAR 0 3
4614: ARRAY
4615: PUSH
4616: LD_INT 1
4618: ARRAY
4619: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4620: LD_ADDR_VAR 0 5
4624: PUSH
4625: LD_EXP 24
4629: PUSH
4630: LD_VAR 0 3
4634: ARRAY
4635: PUSH
4636: LD_INT 2
4638: ARRAY
4639: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4640: LD_LOC 8
4644: PUSH
4645: LD_EXP 4
4649: MINUS
4650: PPUSH
4651: LD_INT 1
4653: PPUSH
4654: LD_VAR 0 4
4658: PPUSH
4659: LD_VAR 0 5
4663: PPUSH
4664: LD_INT 5
4666: PPUSH
4667: LD_INT 0
4669: PPUSH
4670: CALL 3165 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4674: LD_LOC 5
4678: PPUSH
4679: LD_INT 2
4681: PPUSH
4682: LD_VAR 0 4
4686: PPUSH
4687: LD_VAR 0 5
4691: PPUSH
4692: LD_INT 5
4694: PPUSH
4695: LD_INT 0
4697: PPUSH
4698: CALL 3165 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4702: LD_LOC 7
4706: PPUSH
4707: LD_INT 3
4709: PPUSH
4710: LD_VAR 0 4
4714: PPUSH
4715: LD_VAR 0 5
4719: PPUSH
4720: LD_INT 5
4722: PPUSH
4723: LD_INT 0
4725: PPUSH
4726: CALL 3165 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4730: LD_LOC 6
4734: PPUSH
4735: LD_INT 4
4737: PPUSH
4738: LD_VAR 0 4
4742: PPUSH
4743: LD_VAR 0 5
4747: PPUSH
4748: LD_INT 5
4750: PPUSH
4751: LD_INT 0
4753: PPUSH
4754: CALL 3165 0 6
// if def_siberite_detection then
4758: LD_EXP 51
4762: IFFALSE 4779
// SetTech ( tech_SibDet , side , state_researched ) ;
4764: LD_INT 20
4766: PPUSH
4767: LD_VAR 0 1
4771: PPUSH
4772: LD_INT 2
4774: PPUSH
4775: CALL_OW 322
// if def_siberite_bomb = 1 then
4779: LD_EXP 54
4783: PUSH
4784: LD_INT 1
4786: EQUAL
4787: IFFALSE 4821
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4789: LD_INT 25
4791: PPUSH
4792: LD_VAR 0 1
4796: PPUSH
4797: LD_INT 1
4799: PPUSH
4800: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4804: LD_INT 73
4806: PPUSH
4807: LD_VAR 0 1
4811: PPUSH
4812: LD_INT 1
4814: PPUSH
4815: CALL_OW 322
// end else
4819: GO 4851
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4821: LD_INT 25
4823: PPUSH
4824: LD_VAR 0 1
4828: PPUSH
4829: LD_INT 0
4831: PPUSH
4832: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4836: LD_INT 73
4838: PPUSH
4839: LD_VAR 0 1
4843: PPUSH
4844: LD_INT 0
4846: PPUSH
4847: CALL_OW 322
// end ; global_defined := true ;
4851: LD_ADDR_LOC 3
4855: PUSH
4856: LD_INT 1
4858: ST_TO_ADDR
// end ;
4859: LD_VAR 0 2
4863: RET
// every 0 0$1 do
4864: GO 4866
4866: DISABLE
// if ( def_siberite_bomb > 1 ) then
4867: LD_EXP 54
4871: PUSH
4872: LD_INT 1
4874: GREATER
4875: IFFALSE 4890
// begin wait ( siberite_bomb_Delay ) ;
4877: LD_EXP 15
4881: PPUSH
4882: CALL_OW 67
// EnableSibFiss ;
4886: CALL 4891 0 0
// end ;
4890: END
// function EnableSibFiss ; var i ; begin
4891: LD_INT 0
4893: PPUSH
4894: PPUSH
// for i := 1 to 8 do
4895: LD_ADDR_VAR 0 2
4899: PUSH
4900: DOUBLE
4901: LD_INT 1
4903: DEC
4904: ST_TO_ADDR
4905: LD_INT 8
4907: PUSH
4908: FOR_TO
4909: IFFALSE 4955
// if Side_Positions [ i ] then
4911: LD_EXP 18
4915: PUSH
4916: LD_VAR 0 2
4920: ARRAY
4921: IFFALSE 4953
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4923: LD_INT 25
4925: PPUSH
4926: LD_VAR 0 2
4930: PPUSH
4931: LD_INT 1
4933: PPUSH
4934: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4938: LD_INT 73
4940: PPUSH
4941: LD_VAR 0 2
4945: PPUSH
4946: LD_INT 1
4948: PPUSH
4949: CALL_OW 322
// end ;
4953: GO 4908
4955: POP
4956: POP
// end ;
4957: LD_VAR 0 1
4961: RET
// function prepare_sides ; var i ; begin
4962: LD_INT 0
4964: PPUSH
4965: PPUSH
// global_units := [ ] ;
4966: LD_ADDR_LOC 2
4970: PUSH
4971: EMPTY
4972: ST_TO_ADDR
// global_defined := false ;
4973: LD_ADDR_LOC 3
4977: PUSH
4978: LD_INT 0
4980: ST_TO_ADDR
// CountClassMembers ;
4981: CALL 5060 0 0
// for i := 1 to 8 do
4985: LD_ADDR_VAR 0 2
4989: PUSH
4990: DOUBLE
4991: LD_INT 1
4993: DEC
4994: ST_TO_ADDR
4995: LD_INT 8
4997: PUSH
4998: FOR_TO
4999: IFFALSE 5053
// if Side_Positions [ i ] then
5001: LD_EXP 18
5005: PUSH
5006: LD_VAR 0 2
5010: ARRAY
5011: IFFALSE 5051
// begin prepare_side ( i ) ;
5013: LD_VAR 0 2
5017: PPUSH
5018: CALL 3812 0 1
// if ( Game_Type = 12 ) and mastodont > 0 then
5022: LD_EXP 40
5026: PUSH
5027: LD_INT 12
5029: EQUAL
5030: PUSH
5031: LD_EXP 31
5035: PUSH
5036: LD_INT 0
5038: GREATER
5039: AND
5040: IFFALSE 5051
// prepare_mastodonts ( mastodont ) ;
5042: LD_EXP 31
5046: PPUSH
5047: CALL 3734 0 1
// end ;
5051: GO 4998
5053: POP
5054: POP
// end ;
5055: LD_VAR 0 1
5059: RET
// function CountClassMembers ; var Mode ; begin
5060: LD_INT 0
5062: PPUSH
5063: PPUSH
// if No_Mechs then
5064: LD_EXP 58
5068: IFFALSE 5080
// Mode := 2 else
5070: LD_ADDR_VAR 0 2
5074: PUSH
5075: LD_INT 2
5077: ST_TO_ADDR
5078: GO 5088
// Mode := 1 ;
5080: LD_ADDR_VAR 0 2
5084: PUSH
5085: LD_INT 1
5087: ST_TO_ADDR
// neng := number_of_people ;
5088: LD_ADDR_LOC 5
5092: PUSH
5093: LD_EXP 5
5097: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
5098: LD_ADDR_LOC 8
5102: PUSH
5103: LD_LOC 5
5107: PUSH
5108: LD_INT 4
5110: PUSH
5111: LD_INT 3
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: PUSH
5118: LD_VAR 0 2
5122: ARRAY
5123: DIV
5124: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
5125: LD_LOC 8
5129: PUSH
5130: LD_EXP 4
5134: LESS
5135: IFFALSE 5147
// nsol := number_of_breastworks ;
5137: LD_ADDR_LOC 8
5141: PUSH
5142: LD_EXP 4
5146: ST_TO_ADDR
// neng := neng - nsol ;
5147: LD_ADDR_LOC 5
5151: PUSH
5152: LD_LOC 5
5156: PUSH
5157: LD_LOC 8
5161: MINUS
5162: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
5163: LD_ADDR_LOC 6
5167: PUSH
5168: LD_LOC 5
5172: PUSH
5173: LD_INT 3
5175: PUSH
5176: LD_INT 2
5178: PUSH
5179: EMPTY
5180: LIST
5181: LIST
5182: PUSH
5183: LD_VAR 0 2
5187: ARRAY
5188: DIV
5189: ST_TO_ADDR
// if ( nsci < 1 ) then
5190: LD_LOC 6
5194: PUSH
5195: LD_INT 1
5197: LESS
5198: IFFALSE 5208
// nsci := 1 ;
5200: LD_ADDR_LOC 6
5204: PUSH
5205: LD_INT 1
5207: ST_TO_ADDR
// neng := neng - nsci ;
5208: LD_ADDR_LOC 5
5212: PUSH
5213: LD_LOC 5
5217: PUSH
5218: LD_LOC 6
5222: MINUS
5223: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5224: LD_ADDR_LOC 7
5228: PUSH
5229: LD_LOC 5
5233: PUSH
5234: LD_INT 2
5236: DIV
5237: PUSH
5238: LD_INT 0
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PUSH
5245: LD_VAR 0 2
5249: ARRAY
5250: ST_TO_ADDR
// neng := neng - nmech ;
5251: LD_ADDR_LOC 5
5255: PUSH
5256: LD_LOC 5
5260: PUSH
5261: LD_LOC 7
5265: MINUS
5266: ST_TO_ADDR
// if ( neng < 1 ) then
5267: LD_LOC 5
5271: PUSH
5272: LD_INT 1
5274: LESS
5275: IFFALSE 5285
// neng := 1 ;
5277: LD_ADDR_LOC 5
5281: PUSH
5282: LD_INT 1
5284: ST_TO_ADDR
// end ;
5285: LD_VAR 0 1
5289: RET
// function Init_Win_Condition ; begin
5290: LD_INT 0
5292: PPUSH
// if Team_Game then
5293: LD_EXP 20
5297: IFFALSE 5304
// enable ( 98 ) else
5299: LD_INT 98
5301: ENABLE_MARKED
5302: GO 5307
// enable ( 99 ) ;
5304: LD_INT 99
5306: ENABLE_MARKED
// case Game_Type of 3 :
5307: LD_EXP 40
5311: PUSH
5312: LD_INT 3
5314: DOUBLE
5315: EQUAL
5316: IFTRUE 5320
5318: GO 5326
5320: POP
// enable ( 100 ) ; end ;
5321: LD_INT 100
5323: ENABLE_MARKED
5324: GO 5327
5326: POP
// end ;
5327: LD_VAR 0 1
5331: RET
// starting begin disable ( 98 ) ;
5332: LD_INT 98
5334: DISABLE_MARKED
// disable ( 99 ) ;
5335: LD_INT 99
5337: DISABLE_MARKED
// disable ( 100 ) ;
5338: LD_INT 100
5340: DISABLE_MARKED
// disable ( 200 ) ;
5341: LD_INT 200
5343: DISABLE_MARKED
// disable ( 400 ) ;
5344: LD_INT 400
5346: DISABLE_MARKED
// disable ( 401 ) ;
5347: LD_INT 401
5349: DISABLE_MARKED
// disable ( 600 ) ;
5350: LD_INT 600
5352: DISABLE_MARKED
// mp_selectmsg := true ;
5353: LD_ADDR_OWVAR 13
5357: PUSH
5358: LD_INT 1
5360: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5361: CALL 0 0 0
// init_map ;
5365: CALL 1712 0 0
// init_respawning ;
5369: CALL 7020 0 0
// set_shared_visions_and_alliances ;
5373: CALL 2877 0 0
// prepare_sides ;
5377: CALL 4962 0 0
// InitLimits ;
5381: CALL 13306 0 0
// ShowTimer ;
5385: CALL 14243 0 0
// if ( Game_Type = 4 ) then
5389: LD_EXP 40
5393: PUSH
5394: LD_INT 4
5396: EQUAL
5397: IFFALSE 5403
// InitBloodGods ;
5399: CALL 10848 0 0
// music_nat := Side_Nations [ your_side ] ;
5403: LD_ADDR_OWVAR 71
5407: PUSH
5408: LD_EXP 19
5412: PUSH
5413: LD_OWVAR 2
5417: ARRAY
5418: ST_TO_ADDR
// if IAmSpec then
5419: CALL_OW 531
5423: IFFALSE 5459
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
5425: LD_INT 0
5427: PPUSH
5428: LD_INT 0
5430: PPUSH
5431: LD_OWVAR 2
5435: PPUSH
5436: LD_INT 32767
5438: NEG
5439: PPUSH
5440: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
5444: LD_INT 104
5446: PPUSH
5447: LD_INT 69
5449: PPUSH
5450: CALL_OW 86
// enable ( 400 ) ;
5454: LD_INT 400
5456: ENABLE_MARKED
// end else
5457: GO 5513
// begin ResetFog ;
5459: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5463: LD_EXP 24
5467: PUSH
5468: LD_EXP 18
5472: PUSH
5473: LD_OWVAR 2
5477: ARRAY
5478: ARRAY
5479: PUSH
5480: LD_INT 1
5482: ARRAY
5483: PPUSH
5484: LD_EXP 24
5488: PUSH
5489: LD_EXP 18
5493: PUSH
5494: LD_OWVAR 2
5498: ARRAY
5499: ARRAY
5500: PUSH
5501: LD_INT 2
5503: ARRAY
5504: PPUSH
5505: CALL_OW 86
// Init_Win_Condition ;
5509: CALL 5290 0 0
// end ; InitApeman ;
5513: CALL 6187 0 0
// if def_builduptime then
5517: LD_EXP 55
5521: IFFALSE 5527
// BeginBuildUp ;
5523: CALL 9452 0 0
// end ; end_of_file
5527: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5528: GO 5530
5530: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5531: LD_INT 4
5533: PPUSH
5534: LD_INT 5
5536: PPUSH
5537: CALL_OW 12
5541: PPUSH
5542: LD_INT 1
5544: PPUSH
5545: CALL_OW 57
// enable ;
5549: ENABLE
// end ;
5550: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5551: GO 5553
5553: DISABLE
5554: LD_INT 0
5556: PPUSH
5557: PPUSH
// begin case tick of 1 .. 1 1$0 :
5558: LD_OWVAR 1
5562: PUSH
5563: LD_INT 1
5565: DOUBLE
5566: GREATEREQUAL
5567: IFFALSE 5575
5569: LD_INT 2100
5571: DOUBLE
5572: LESSEQUAL
5573: IFTRUE 5577
5575: GO 5605
5577: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5578: LD_EXP 9
5582: PUSH
5583: LD_INT 100
5585: DIVREAL
5586: PUSH
5587: LD_INT 350
5589: PPUSH
5590: LD_INT 1050
5592: PPUSH
5593: CALL_OW 12
5597: MUL
5598: PPUSH
5599: CALL_OW 67
5603: GO 5907
5605: LD_INT 2100
5607: PUSH
5608: LD_INT 1
5610: PLUS
5611: DOUBLE
5612: GREATEREQUAL
5613: IFFALSE 5621
5615: LD_INT 10500
5617: DOUBLE
5618: LESSEQUAL
5619: IFTRUE 5623
5621: GO 5651
5623: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5624: LD_EXP 9
5628: PUSH
5629: LD_INT 100
5631: DIVREAL
5632: PUSH
5633: LD_INT 1050
5635: PPUSH
5636: LD_INT 1575
5638: PPUSH
5639: CALL_OW 12
5643: MUL
5644: PPUSH
5645: CALL_OW 67
5649: GO 5907
5651: LD_INT 10500
5653: PUSH
5654: LD_INT 1
5656: PLUS
5657: DOUBLE
5658: GREATEREQUAL
5659: IFFALSE 5667
5661: LD_INT 21000
5663: DOUBLE
5664: LESSEQUAL
5665: IFTRUE 5669
5667: GO 5697
5669: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5670: LD_EXP 9
5674: PUSH
5675: LD_INT 100
5677: DIVREAL
5678: PUSH
5679: LD_INT 1575
5681: PPUSH
5682: LD_INT 2100
5684: PPUSH
5685: CALL_OW 12
5689: MUL
5690: PPUSH
5691: CALL_OW 67
5695: GO 5907
5697: LD_INT 21000
5699: PUSH
5700: LD_INT 1
5702: PLUS
5703: DOUBLE
5704: GREATEREQUAL
5705: IFFALSE 5713
5707: LD_INT 42000
5709: DOUBLE
5710: LESSEQUAL
5711: IFTRUE 5715
5713: GO 5743
5715: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5716: LD_EXP 9
5720: PUSH
5721: LD_INT 100
5723: DIVREAL
5724: PUSH
5725: LD_INT 2100
5727: PPUSH
5728: LD_INT 2625
5730: PPUSH
5731: CALL_OW 12
5735: MUL
5736: PPUSH
5737: CALL_OW 67
5741: GO 5907
5743: LD_INT 42000
5745: PUSH
5746: LD_INT 1
5748: PLUS
5749: DOUBLE
5750: GREATEREQUAL
5751: IFFALSE 5759
5753: LD_INT 63000
5755: DOUBLE
5756: LESSEQUAL
5757: IFTRUE 5761
5759: GO 5789
5761: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5762: LD_EXP 9
5766: PUSH
5767: LD_INT 100
5769: DIVREAL
5770: PUSH
5771: LD_INT 2625
5773: PPUSH
5774: LD_INT 3150
5776: PPUSH
5777: CALL_OW 12
5781: MUL
5782: PPUSH
5783: CALL_OW 67
5787: GO 5907
5789: LD_INT 63000
5791: PUSH
5792: LD_INT 1
5794: PLUS
5795: DOUBLE
5796: GREATEREQUAL
5797: IFFALSE 5805
5799: LD_INT 105000
5801: DOUBLE
5802: LESSEQUAL
5803: IFTRUE 5807
5805: GO 5835
5807: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5808: LD_EXP 9
5812: PUSH
5813: LD_INT 100
5815: DIVREAL
5816: PUSH
5817: LD_INT 3150
5819: PPUSH
5820: LD_INT 3675
5822: PPUSH
5823: CALL_OW 12
5827: MUL
5828: PPUSH
5829: CALL_OW 67
5833: GO 5907
5835: LD_INT 105000
5837: PUSH
5838: LD_INT 1
5840: PLUS
5841: DOUBLE
5842: GREATEREQUAL
5843: IFFALSE 5851
5845: LD_INT 630000
5847: DOUBLE
5848: LESSEQUAL
5849: IFTRUE 5853
5851: GO 5881
5853: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
5854: LD_EXP 9
5858: PUSH
5859: LD_INT 100
5861: DIVREAL
5862: PUSH
5863: LD_INT 3675
5865: PPUSH
5866: LD_INT 4200
5868: PPUSH
5869: CALL_OW 12
5873: MUL
5874: PPUSH
5875: CALL_OW 67
5879: GO 5907
5881: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5882: LD_EXP 9
5886: PUSH
5887: LD_INT 100
5889: DIVREAL
5890: PUSH
5891: LD_INT 4200
5893: PPUSH
5894: LD_INT 5250
5896: PPUSH
5897: CALL_OW 12
5901: MUL
5902: PPUSH
5903: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5907: LD_ADDR_VAR 0 2
5911: PUSH
5912: LD_INT 3
5914: PPUSH
5915: LD_INT 5
5917: PPUSH
5918: CALL_OW 12
5922: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5923: LD_ADDR_VAR 0 1
5927: PUSH
5928: LD_EXP 18
5932: PUSH
5933: LD_INT 0
5935: PUSH
5936: EMPTY
5937: LIST
5938: DIFF
5939: PUSH
5940: FOR_IN
5941: IFFALSE 5990
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5943: LD_VAR 0 2
5947: PPUSH
5948: LD_EXP 24
5952: PUSH
5953: LD_VAR 0 1
5957: ARRAY
5958: PUSH
5959: LD_INT 1
5961: ARRAY
5962: PPUSH
5963: LD_EXP 24
5967: PUSH
5968: LD_VAR 0 1
5972: ARRAY
5973: PUSH
5974: LD_INT 2
5976: ARRAY
5977: PPUSH
5978: LD_INT 20
5980: PPUSH
5981: LD_INT 1
5983: PPUSH
5984: CALL_OW 56
5988: GO 5940
5990: POP
5991: POP
// enable ;
5992: ENABLE
// end ; end_of_file
5993: PPOPN 2
5995: END
// every 20 20$00 trigger apemanNumber do
5996: LD_EXP 32
6000: IFFALSE 6033
6002: GO 6004
6004: DISABLE
// begin enable ;
6005: ENABLE
// if apeLevel >= 8 then
6006: LD_EXP 37
6010: PUSH
6011: LD_INT 8
6013: GREATEREQUAL
6014: IFFALSE 6019
// disable else
6016: DISABLE
6017: GO 6033
// apeLevel := apeLevel + 1 ;
6019: LD_ADDR_EXP 37
6023: PUSH
6024: LD_EXP 37
6028: PUSH
6029: LD_INT 1
6031: PLUS
6032: ST_TO_ADDR
// end ;
6033: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
6034: LD_EXP 32
6038: PUSH
6039: LD_EXP 33
6043: LESS
6044: IFFALSE 6184
6046: GO 6048
6048: DISABLE
6049: LD_INT 0
6051: PPUSH
6052: PPUSH
6053: PPUSH
6054: PPUSH
// begin enable ;
6055: ENABLE
// for i := 1 to apemanPos do
6056: LD_ADDR_VAR 0 1
6060: PUSH
6061: DOUBLE
6062: LD_INT 1
6064: DEC
6065: ST_TO_ADDR
6066: LD_EXP 35
6070: PUSH
6071: FOR_TO
6072: IFFALSE 6182
// begin if apemanPlayerCount [ i ] then
6074: LD_EXP 36
6078: PUSH
6079: LD_VAR 0 1
6083: ARRAY
6084: IFFALSE 6180
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
6086: LD_EXP 36
6090: PUSH
6091: LD_VAR 0 1
6095: ARRAY
6096: PUSH
6097: LD_EXP 35
6101: PUSH
6102: LD_VAR 0 1
6106: ARRAY
6107: GREATER
6108: IFFALSE 6180
// begin ape := PrepareApeman ;
6110: LD_ADDR_VAR 0 2
6114: PUSH
6115: CALL 6695 0 0
6119: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6120: LD_VAR 0 2
6124: PPUSH
6125: LD_EXP 38
6129: PUSH
6130: LD_VAR 0 1
6134: ARRAY
6135: PPUSH
6136: LD_INT 0
6138: PPUSH
6139: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6143: LD_ADDR_EXP 35
6147: PUSH
6148: LD_EXP 35
6152: PPUSH
6153: LD_VAR 0 1
6157: PPUSH
6158: LD_EXP 35
6162: PUSH
6163: LD_VAR 0 1
6167: ARRAY
6168: PUSH
6169: LD_VAR 0 2
6173: UNION
6174: PPUSH
6175: CALL_OW 1
6179: ST_TO_ADDR
// end ; end ; end ;
6180: GO 6071
6182: POP
6183: POP
// end ;
6184: PPOPN 4
6186: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6187: LD_INT 0
6189: PPUSH
6190: PPUSH
6191: PPUSH
6192: PPUSH
6193: PPUSH
6194: PPUSH
6195: PPUSH
// playersAmount := 0 ;
6196: LD_ADDR_VAR 0 3
6200: PUSH
6201: LD_INT 0
6203: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
6204: LD_ADDR_VAR 0 7
6208: PUSH
6209: LD_INT 1
6211: PUSH
6212: LD_INT 2
6214: PUSH
6215: LD_INT 3
6217: PUSH
6218: LD_INT 4
6220: PUSH
6221: LD_INT 5
6223: PUSH
6224: LD_INT 6
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6235: LD_ADDR_EXP 38
6239: PUSH
6240: LD_INT 0
6242: PUSH
6243: LD_INT 0
6245: PUSH
6246: LD_INT 0
6248: PUSH
6249: LD_INT 0
6251: PUSH
6252: LD_INT 0
6254: PUSH
6255: LD_INT 0
6257: PUSH
6258: LD_INT 0
6260: PUSH
6261: LD_INT 0
6263: PUSH
6264: EMPTY
6265: LIST
6266: LIST
6267: LIST
6268: LIST
6269: LIST
6270: LIST
6271: LIST
6272: LIST
6273: ST_TO_ADDR
// for j = 1 to Side_Positions do
6274: LD_ADDR_VAR 0 4
6278: PUSH
6279: DOUBLE
6280: LD_INT 1
6282: DEC
6283: ST_TO_ADDR
6284: LD_EXP 18
6288: PUSH
6289: FOR_TO
6290: IFFALSE 6357
// if Side_Positions [ j ] then
6292: LD_EXP 18
6296: PUSH
6297: LD_VAR 0 4
6301: ARRAY
6302: IFFALSE 6355
// begin playersAmount := playersAmount + 1 ;
6304: LD_ADDR_VAR 0 3
6308: PUSH
6309: LD_VAR 0 3
6313: PUSH
6314: LD_INT 1
6316: PLUS
6317: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6318: LD_ADDR_EXP 38
6322: PUSH
6323: LD_EXP 38
6327: PPUSH
6328: LD_VAR 0 4
6332: PPUSH
6333: LD_VAR 0 7
6337: PUSH
6338: LD_EXP 18
6342: PUSH
6343: LD_VAR 0 4
6347: ARRAY
6348: ARRAY
6349: PPUSH
6350: CALL_OW 1
6354: ST_TO_ADDR
// end ;
6355: GO 6289
6357: POP
6358: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6359: LD_ADDR_EXP 34
6363: PUSH
6364: LD_INT 3
6366: PUSH
6367: LD_EXP 11
6371: MUL
6372: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6373: LD_ADDR_EXP 32
6377: PUSH
6378: LD_VAR 0 3
6382: PUSH
6383: LD_EXP 34
6387: MUL
6388: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6389: LD_ADDR_EXP 33
6393: PUSH
6394: LD_EXP 32
6398: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6399: LD_ADDR_EXP 35
6403: PUSH
6404: LD_INT 0
6406: PUSH
6407: LD_INT 0
6409: PUSH
6410: LD_INT 0
6412: PUSH
6413: LD_INT 0
6415: PUSH
6416: LD_INT 0
6418: PUSH
6419: LD_INT 0
6421: PUSH
6422: LD_INT 0
6424: PUSH
6425: LD_INT 0
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6438: LD_ADDR_EXP 36
6442: PUSH
6443: LD_INT 0
6445: PUSH
6446: LD_INT 0
6448: PUSH
6449: LD_INT 0
6451: PUSH
6452: LD_INT 0
6454: PUSH
6455: LD_INT 0
6457: PUSH
6458: LD_INT 0
6460: PUSH
6461: LD_INT 0
6463: PUSH
6464: LD_INT 0
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: ST_TO_ADDR
// apeLevel := 1 ;
6477: LD_ADDR_EXP 37
6481: PUSH
6482: LD_INT 1
6484: ST_TO_ADDR
// if not apemanNumber then
6485: LD_EXP 32
6489: NOT
6490: IFFALSE 6494
// exit ;
6492: GO 6690
// for i := 1 to apemanPerPlayer do
6494: LD_ADDR_VAR 0 2
6498: PUSH
6499: DOUBLE
6500: LD_INT 1
6502: DEC
6503: ST_TO_ADDR
6504: LD_EXP 34
6508: PUSH
6509: FOR_TO
6510: IFFALSE 6688
// begin for j := 1 to Side_Positions do
6512: LD_ADDR_VAR 0 4
6516: PUSH
6517: DOUBLE
6518: LD_INT 1
6520: DEC
6521: ST_TO_ADDR
6522: LD_EXP 18
6526: PUSH
6527: FOR_TO
6528: IFFALSE 6684
// if Side_Positions [ j ] then
6530: LD_EXP 18
6534: PUSH
6535: LD_VAR 0 4
6539: ARRAY
6540: IFFALSE 6682
// begin pos := Side_Positions [ j ] ;
6542: LD_ADDR_VAR 0 6
6546: PUSH
6547: LD_EXP 18
6551: PUSH
6552: LD_VAR 0 4
6556: ARRAY
6557: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6558: LD_ADDR_EXP 36
6562: PUSH
6563: LD_EXP 36
6567: PPUSH
6568: LD_VAR 0 4
6572: PPUSH
6573: LD_EXP 36
6577: PUSH
6578: LD_VAR 0 4
6582: ARRAY
6583: PUSH
6584: LD_INT 1
6586: PLUS
6587: PPUSH
6588: CALL_OW 1
6592: ST_TO_ADDR
// ape := PrepareApeman ;
6593: LD_ADDR_VAR 0 5
6597: PUSH
6598: CALL 6695 0 0
6602: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6603: LD_ADDR_EXP 35
6607: PUSH
6608: LD_EXP 35
6612: PPUSH
6613: LD_VAR 0 4
6617: PPUSH
6618: LD_EXP 35
6622: PUSH
6623: LD_VAR 0 4
6627: ARRAY
6628: PPUSH
6629: LD_EXP 35
6633: PUSH
6634: LD_VAR 0 4
6638: ARRAY
6639: PUSH
6640: LD_INT 1
6642: PLUS
6643: PPUSH
6644: LD_VAR 0 5
6648: PPUSH
6649: CALL_OW 1
6653: PPUSH
6654: CALL_OW 1
6658: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6659: LD_VAR 0 5
6663: PPUSH
6664: LD_EXP 38
6668: PUSH
6669: LD_VAR 0 4
6673: ARRAY
6674: PPUSH
6675: LD_INT 0
6677: PPUSH
6678: CALL_OW 49
// end ;
6682: GO 6527
6684: POP
6685: POP
// end ;
6686: GO 6509
6688: POP
6689: POP
// end ;
6690: LD_VAR 0 1
6694: RET
// export function PrepareApeman ; var bonus ; begin
6695: LD_INT 0
6697: PPUSH
6698: PPUSH
// uc_side := 0 ;
6699: LD_ADDR_OWVAR 20
6703: PUSH
6704: LD_INT 0
6706: ST_TO_ADDR
// uc_nation := 0 ;
6707: LD_ADDR_OWVAR 21
6711: PUSH
6712: LD_INT 0
6714: ST_TO_ADDR
// InitHc ;
6715: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6719: LD_ADDR_VAR 0 2
6723: PUSH
6724: LD_INT 1
6726: NEG
6727: PUSH
6728: LD_INT 0
6730: PUSH
6731: LD_INT 1
6733: PUSH
6734: EMPTY
6735: LIST
6736: LIST
6737: LIST
6738: PUSH
6739: LD_OWVAR 1
6743: PUSH
6744: LD_INT 3
6746: MOD
6747: PUSH
6748: LD_INT 1
6750: PLUS
6751: ARRAY
6752: ST_TO_ADDR
// hc_class := class_apeman ;
6753: LD_ADDR_OWVAR 28
6757: PUSH
6758: LD_INT 12
6760: ST_TO_ADDR
// hc_gallery :=  ;
6761: LD_ADDR_OWVAR 33
6765: PUSH
6766: LD_STRING 
6768: ST_TO_ADDR
// hc_name :=  ;
6769: LD_ADDR_OWVAR 26
6773: PUSH
6774: LD_STRING 
6776: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6777: LD_ADDR_OWVAR 31
6781: PUSH
6782: LD_EXP 37
6786: PUSH
6787: LD_VAR 0 2
6791: PLUS
6792: PUSH
6793: LD_EXP 37
6797: PUSH
6798: LD_VAR 0 2
6802: PLUS
6803: PUSH
6804: LD_EXP 37
6808: PUSH
6809: LD_VAR 0 2
6813: PLUS
6814: PUSH
6815: LD_EXP 37
6819: PUSH
6820: LD_VAR 0 2
6824: PLUS
6825: PUSH
6826: EMPTY
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6832: LD_ADDR_OWVAR 35
6836: PUSH
6837: LD_INT 10
6839: PUSH
6840: LD_VAR 0 2
6844: MUL
6845: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6846: LD_ADDR_OWVAR 29
6850: PUSH
6851: LD_INT 12
6853: PUSH
6854: LD_INT 10
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: ST_TO_ADDR
// result := CreateHuman ;
6861: LD_ADDR_VAR 0 1
6865: PUSH
6866: CALL_OW 44
6870: ST_TO_ADDR
// end ;
6871: LD_VAR 0 1
6875: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6876: LD_INT 0
6878: PPUSH
6879: PPUSH
6880: PPUSH
// if not ape then
6881: LD_VAR 0 1
6885: NOT
6886: IFFALSE 6890
// exit ;
6888: GO 7015
// side := GetSide ( ape ) ;
6890: LD_ADDR_VAR 0 3
6894: PUSH
6895: LD_VAR 0 1
6899: PPUSH
6900: CALL_OW 255
6904: ST_TO_ADDR
// if not side then
6905: LD_VAR 0 3
6909: NOT
6910: IFFALSE 6964
// begin for i = 1 to apemanPos do
6912: LD_ADDR_VAR 0 4
6916: PUSH
6917: DOUBLE
6918: LD_INT 1
6920: DEC
6921: ST_TO_ADDR
6922: LD_EXP 35
6926: PUSH
6927: FOR_TO
6928: IFFALSE 6962
// if ape in apemanPos [ i ] then
6930: LD_VAR 0 1
6934: PUSH
6935: LD_EXP 35
6939: PUSH
6940: LD_VAR 0 4
6944: ARRAY
6945: IN
6946: IFFALSE 6960
// begin side := i ;
6948: LD_ADDR_VAR 0 3
6952: PUSH
6953: LD_VAR 0 4
6957: ST_TO_ADDR
// break ;
6958: GO 6962
// end ;
6960: GO 6927
6962: POP
6963: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6964: LD_ADDR_EXP 35
6968: PUSH
6969: LD_EXP 35
6973: PPUSH
6974: LD_VAR 0 3
6978: PPUSH
6979: LD_EXP 35
6983: PUSH
6984: LD_VAR 0 3
6988: ARRAY
6989: PUSH
6990: LD_VAR 0 1
6994: DIFF
6995: PPUSH
6996: CALL_OW 1
7000: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
7001: LD_ADDR_EXP 32
7005: PUSH
7006: LD_EXP 32
7010: PUSH
7011: LD_INT 1
7013: MINUS
7014: ST_TO_ADDR
// end ; end_of_file
7015: LD_VAR 0 2
7019: RET
// var respawn , inqueue ; export function init_respawning ; begin
7020: LD_INT 0
7022: PPUSH
// respawn := Rand ( 1 , 8 ) ;
7023: LD_ADDR_LOC 9
7027: PUSH
7028: LD_INT 1
7030: PPUSH
7031: LD_INT 8
7033: PPUSH
7034: CALL_OW 12
7038: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7039: LD_ADDR_LOC 10
7043: PUSH
7044: LD_INT 0
7046: PUSH
7047: LD_INT 0
7049: PUSH
7050: LD_INT 0
7052: PUSH
7053: LD_INT 0
7055: PUSH
7056: LD_INT 0
7058: PUSH
7059: LD_INT 0
7061: PUSH
7062: LD_INT 0
7064: PUSH
7065: LD_INT 0
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: LIST
7074: LIST
7075: LIST
7076: LIST
7077: ST_TO_ADDR
// end ;
7078: LD_VAR 0 1
7082: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
7083: GO 7085
7085: DISABLE
7086: LD_INT 0
7088: PPUSH
7089: PPUSH
7090: PPUSH
// begin if respawning_time_max = 0 then
7091: LD_EXP 14
7095: PUSH
7096: LD_INT 0
7098: EQUAL
7099: IFFALSE 7103
// exit ;
7101: GO 7508
// if respawn = 8 then
7103: LD_LOC 9
7107: PUSH
7108: LD_INT 8
7110: EQUAL
7111: IFFALSE 7123
// respawn := 1 else
7113: LD_ADDR_LOC 9
7117: PUSH
7118: LD_INT 1
7120: ST_TO_ADDR
7121: GO 7137
// respawn := respawn + 1 ;
7123: LD_ADDR_LOC 9
7127: PUSH
7128: LD_LOC 9
7132: PUSH
7133: LD_INT 1
7135: PLUS
7136: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
7137: LD_EXP 18
7141: PUSH
7142: LD_LOC 9
7146: ARRAY
7147: PUSH
7148: LD_LOC 10
7152: PUSH
7153: LD_LOC 9
7157: ARRAY
7158: NOT
7159: AND
7160: IFFALSE 7507
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
7162: LD_ADDR_VAR 0 1
7166: PUSH
7167: LD_INT 21
7169: PUSH
7170: LD_INT 1
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: LD_INT 22
7179: PUSH
7180: LD_LOC 9
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 3
7191: PUSH
7192: LD_INT 23
7194: PUSH
7195: LD_INT 0
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: PPUSH
7208: CALL_OW 69
7212: ST_TO_ADDR
// if n < number_of_people then
7213: LD_VAR 0 1
7217: PUSH
7218: LD_EXP 5
7222: LESS
7223: IFFALSE 7504
// begin dep := FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , respawn ] ] ) ;
7225: LD_ADDR_VAR 0 2
7229: PUSH
7230: LD_INT 21
7232: PUSH
7233: LD_INT 3
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: PUSH
7240: LD_INT 2
7242: PUSH
7243: LD_INT 30
7245: PUSH
7246: LD_INT 0
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: LD_INT 30
7255: PUSH
7256: LD_INT 1
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: LIST
7267: PUSH
7268: LD_INT 50
7270: PUSH
7271: EMPTY
7272: LIST
7273: PUSH
7274: LD_INT 22
7276: PUSH
7277: LD_LOC 9
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: PPUSH
7292: CALL_OW 69
7296: ST_TO_ADDR
// if dep then
7297: LD_VAR 0 2
7301: IFFALSE 7501
// begin aktresp := respawn ;
7303: LD_ADDR_VAR 0 3
7307: PUSH
7308: LD_LOC 9
7312: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
7313: LD_ADDR_LOC 10
7317: PUSH
7318: LD_LOC 10
7322: PPUSH
7323: LD_VAR 0 3
7327: PPUSH
7328: LD_INT 1
7330: PPUSH
7331: CALL_OW 1
7335: ST_TO_ADDR
// enable ;
7336: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
7337: LD_EXP 13
7341: PPUSH
7342: LD_EXP 14
7346: PPUSH
7347: CALL_OW 12
7351: PPUSH
7352: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
7356: LD_ADDR_LOC 10
7360: PUSH
7361: LD_LOC 10
7365: PPUSH
7366: LD_VAR 0 3
7370: PPUSH
7371: LD_INT 0
7373: PPUSH
7374: CALL_OW 1
7378: ST_TO_ADDR
// hc_name :=  ;
7379: LD_ADDR_OWVAR 26
7383: PUSH
7384: LD_STRING 
7386: ST_TO_ADDR
// hc_importance := 0 ;
7387: LD_ADDR_OWVAR 32
7391: PUSH
7392: LD_INT 0
7394: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
7395: LD_INT 0
7397: PPUSH
7398: LD_INT 0
7400: PPUSH
7401: LD_EXP 6
7405: PUSH
7406: LD_INT 2
7408: DIV
7409: PPUSH
7410: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
7414: LD_ADDR_OWVAR 21
7418: PUSH
7419: LD_EXP 19
7423: PUSH
7424: LD_VAR 0 3
7428: ARRAY
7429: ST_TO_ADDR
// uc_side := aktresp ;
7430: LD_ADDR_OWVAR 20
7434: PUSH
7435: LD_VAR 0 3
7439: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
7440: LD_ADDR_VAR 0 2
7444: PUSH
7445: LD_VAR 0 2
7449: PUSH
7450: LD_INT 1
7452: PPUSH
7453: LD_VAR 0 2
7457: PPUSH
7458: CALL_OW 12
7462: ARRAY
7463: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
7464: CALL_OW 44
7468: PPUSH
7469: LD_VAR 0 2
7473: PPUSH
7474: CALL_OW 250
7478: PPUSH
7479: LD_VAR 0 2
7483: PPUSH
7484: CALL_OW 251
7488: PPUSH
7489: LD_INT 7
7491: PPUSH
7492: LD_INT 1
7494: PPUSH
7495: CALL_OW 50
// end else
7499: GO 7502
// enable ;
7501: ENABLE
// end else
7502: GO 7505
// enable ;
7504: ENABLE
// end else
7505: GO 7508
// enable ;
7507: ENABLE
// end ; end_of_file
7508: PPOPN 3
7510: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7511: LD_VAR 0 1
7515: PPUSH
7516: CALL_OW 266
7520: PUSH
7521: LD_INT 0
7523: PUSH
7524: LD_INT 1
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: IN
7531: IFFALSE 7556
// SetBName ( b , @ & GetSide ( b ) ) ;
7533: LD_VAR 0 1
7537: PPUSH
7538: LD_STRING @
7540: PUSH
7541: LD_VAR 0 1
7545: PPUSH
7546: CALL_OW 255
7550: STR
7551: PPUSH
7552: CALL_OW 500
// if def_game_rules then
7556: LD_EXP 41
7560: IFFALSE 7597
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
7562: LD_VAR 0 1
7566: PPUSH
7567: LD_VAR 0 1
7571: PPUSH
7572: CALL_OW 266
7576: PPUSH
7577: LD_VAR 0 1
7581: PPUSH
7582: CALL_OW 255
7586: PPUSH
7587: LD_INT 0
7589: PPUSH
7590: LD_INT 1
7592: PPUSH
7593: CALL 13707 0 5
// end ;
7597: PPOPN 2
7599: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7600: LD_VAR 0 1
7604: PPUSH
7605: CALL_OW 266
7609: PUSH
7610: LD_INT 0
7612: PUSH
7613: LD_INT 1
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: IN
7620: IFFALSE 7645
// SetBName ( b , @ & GetSide ( b ) ) ;
7622: LD_VAR 0 1
7626: PPUSH
7627: LD_STRING @
7629: PUSH
7630: LD_VAR 0 1
7634: PPUSH
7635: CALL_OW 255
7639: STR
7640: PPUSH
7641: CALL_OW 500
// if def_game_rules then
7645: LD_EXP 41
7649: IFFALSE 7688
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7651: LD_VAR 0 1
7655: PPUSH
7656: LD_VAR 0 1
7660: PPUSH
7661: CALL_OW 266
7665: PPUSH
7666: LD_VAR 0 1
7670: PPUSH
7671: CALL_OW 255
7675: PPUSH
7676: LD_VAR 0 2
7680: PPUSH
7681: LD_INT 1
7683: PPUSH
7684: CALL 13707 0 5
// end ;
7688: PPOPN 3
7690: END
// on VehicleConstructed ( veh , fac ) do var side ;
7691: LD_INT 0
7693: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7694: LD_VAR 0 1
7698: PPUSH
7699: CALL_OW 263
7703: PUSH
7704: LD_INT 5
7706: EQUAL
7707: IFFALSE 7849
// begin side := GetSide ( veh ) ;
7709: LD_ADDR_VAR 0 3
7713: PUSH
7714: LD_VAR 0 1
7718: PPUSH
7719: CALL_OW 255
7723: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7724: LD_ADDR_EXP 35
7728: PUSH
7729: LD_EXP 35
7733: PPUSH
7734: LD_VAR 0 3
7738: PPUSH
7739: LD_EXP 35
7743: PUSH
7744: LD_VAR 0 3
7748: ARRAY
7749: PPUSH
7750: LD_INT 52
7752: PUSH
7753: EMPTY
7754: LIST
7755: PPUSH
7756: CALL_OW 72
7760: PUSH
7761: LD_INT 22
7763: PUSH
7764: LD_VAR 0 3
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: PUSH
7773: LD_INT 2
7775: PUSH
7776: LD_INT 33
7778: PUSH
7779: LD_INT 5
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: PUSH
7786: LD_INT 25
7788: PUSH
7789: LD_INT 12
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: PUSH
7796: LD_INT 25
7798: PUSH
7799: LD_INT 15
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: PUSH
7806: LD_INT 25
7808: PUSH
7809: LD_INT 16
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: PUSH
7816: LD_INT 25
7818: PUSH
7819: LD_INT 17
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PPUSH
7838: CALL_OW 69
7842: UNION
7843: PPUSH
7844: CALL_OW 1
7848: ST_TO_ADDR
// end ; end ;
7849: PPOPN 3
7851: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7852: LD_INT 0
7854: PPUSH
7855: PPUSH
7856: PPUSH
7857: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7858: LD_VAR 0 1
7862: PPUSH
7863: CALL_OW 257
7867: PUSH
7868: LD_INT 12
7870: PUSH
7871: LD_INT 15
7873: PUSH
7874: LD_INT 17
7876: PUSH
7877: LD_INT 16
7879: PUSH
7880: EMPTY
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: IN
7886: PUSH
7887: LD_VAR 0 1
7891: PPUSH
7892: CALL_OW 263
7896: PUSH
7897: LD_INT 5
7899: EQUAL
7900: OR
7901: IFFALSE 7912
// ApeKilled ( j ) ;
7903: LD_VAR 0 1
7907: PPUSH
7908: CALL 6876 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7912: LD_VAR 0 1
7916: PPUSH
7917: CALL_OW 266
7921: PUSH
7922: LD_INT 0
7924: PUSH
7925: LD_INT 1
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: IN
7932: IFFALSE 8014
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7934: LD_ADDR_VAR 0 4
7938: PUSH
7939: LD_EXP 18
7943: PUSH
7944: LD_VAR 0 1
7948: PPUSH
7949: CALL_OW 255
7953: ARRAY
7954: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7955: LD_ADDR_VAR 0 2
7959: PUSH
7960: LD_EXP 24
7964: PUSH
7965: LD_VAR 0 4
7969: ARRAY
7970: PUSH
7971: LD_INT 1
7973: ARRAY
7974: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7975: LD_ADDR_VAR 0 3
7979: PUSH
7980: LD_EXP 24
7984: PUSH
7985: LD_VAR 0 4
7989: ARRAY
7990: PUSH
7991: LD_INT 2
7993: ARRAY
7994: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7995: LD_VAR 0 2
7999: PPUSH
8000: LD_VAR 0 3
8004: PPUSH
8005: CALL_OW 420
8009: PPUSH
8010: CALL_OW 419
// end ; if def_game_rules then
8014: LD_EXP 41
8018: IFFALSE 8117
// if ( GetType ( j ) = 3 ) then
8020: LD_VAR 0 1
8024: PPUSH
8025: CALL_OW 247
8029: PUSH
8030: LD_INT 3
8032: EQUAL
8033: IFFALSE 8073
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
8035: LD_VAR 0 1
8039: PPUSH
8040: LD_VAR 0 1
8044: PPUSH
8045: CALL_OW 266
8049: PPUSH
8050: LD_VAR 0 1
8054: PPUSH
8055: CALL_OW 255
8059: PPUSH
8060: LD_INT 0
8062: PPUSH
8063: LD_INT 1
8065: NEG
8066: PPUSH
8067: CALL 13707 0 5
8071: GO 8117
// if ( GetChassis ( j ) = 25 ) then
8073: LD_VAR 0 1
8077: PPUSH
8078: CALL_OW 265
8082: PUSH
8083: LD_INT 25
8085: EQUAL
8086: IFFALSE 8117
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
8088: LD_VAR 0 1
8092: PPUSH
8093: LD_INT 37
8095: PPUSH
8096: LD_VAR 0 1
8100: PPUSH
8101: CALL_OW 255
8105: PPUSH
8106: LD_INT 0
8108: PPUSH
8109: LD_INT 1
8111: NEG
8112: PPUSH
8113: CALL 13707 0 5
// end ;
8117: PPOPN 5
8119: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
8120: LD_EXP 41
8124: PUSH
8125: LD_VAR 0 1
8129: PPUSH
8130: CALL_OW 265
8134: PUSH
8135: LD_INT 25
8137: EQUAL
8138: AND
8139: IFFALSE 8171
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
8141: LD_VAR 0 1
8145: PPUSH
8146: LD_INT 37
8148: PPUSH
8149: LD_VAR 0 1
8153: PPUSH
8154: CALL_OW 255
8158: PPUSH
8159: LD_VAR 0 3
8163: PPUSH
8164: LD_INT 1
8166: PPUSH
8167: CALL 13707 0 5
// end ;
8171: PPOPN 4
8173: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
8174: LD_VAR 0 1
8178: PPUSH
8179: LD_VAR 0 2
8183: PPUSH
8184: LD_VAR 0 3
8188: PPUSH
8189: LD_OWVAR 2
8193: PPUSH
8194: CALL 14385 0 4
8198: PPOPN 3
8200: END
// function CanWinLoose ; begin
8201: LD_INT 0
8203: PPUSH
// Result := true ;
8204: LD_ADDR_VAR 0 1
8208: PUSH
8209: LD_INT 1
8211: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8212: CALL_OW 518
8216: PUSH
8217: CALL_OW 519
8221: PUSH
8222: LD_INT 0
8224: GREATER
8225: AND
8226: IFFALSE 8236
// Result := false ;
8228: LD_ADDR_VAR 0 1
8232: PUSH
8233: LD_INT 0
8235: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8236: CALL_OW 531
8240: PUSH
8241: CALL_OW 519
8245: PUSH
8246: LD_INT 1
8248: GREATER
8249: AND
8250: IFFALSE 8260
// Result := false ;
8252: LD_ADDR_VAR 0 1
8256: PUSH
8257: LD_INT 0
8259: ST_TO_ADDR
// end ;
8260: LD_VAR 0 1
8264: RET
// function HasPower ( i ) ; begin
8265: LD_INT 0
8267: PPUSH
// if def_people_respawning then
8268: LD_EXP 52
8272: IFFALSE 8363
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8274: LD_ADDR_VAR 0 2
8278: PUSH
8279: LD_INT 22
8281: PUSH
8282: LD_VAR 0 1
8286: PUSH
8287: EMPTY
8288: LIST
8289: LIST
8290: PUSH
8291: LD_INT 2
8293: PUSH
8294: LD_INT 21
8296: PUSH
8297: LD_INT 1
8299: PUSH
8300: EMPTY
8301: LIST
8302: LIST
8303: PUSH
8304: LD_INT 33
8306: PUSH
8307: LD_INT 3
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: PUSH
8314: LD_INT 33
8316: PUSH
8317: LD_INT 5
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: PUSH
8324: LD_INT 30
8326: PUSH
8327: LD_INT 0
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: PUSH
8334: LD_INT 30
8336: PUSH
8337: LD_INT 1
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: PUSH
8352: EMPTY
8353: LIST
8354: LIST
8355: PPUSH
8356: CALL_OW 69
8360: ST_TO_ADDR
8361: GO 8428
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
8363: LD_ADDR_VAR 0 2
8367: PUSH
8368: LD_INT 22
8370: PUSH
8371: LD_VAR 0 1
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: PUSH
8380: LD_INT 2
8382: PUSH
8383: LD_INT 21
8385: PUSH
8386: LD_INT 1
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: PUSH
8393: LD_INT 33
8395: PUSH
8396: LD_INT 3
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: PUSH
8403: LD_INT 33
8405: PUSH
8406: LD_INT 5
8408: PUSH
8409: EMPTY
8410: LIST
8411: LIST
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: PUSH
8419: EMPTY
8420: LIST
8421: LIST
8422: PPUSH
8423: CALL_OW 69
8427: ST_TO_ADDR
// end ;
8428: LD_VAR 0 2
8432: RET
// function AlliedSides ( i , j ) ; begin
8433: LD_INT 0
8435: PPUSH
// Result := false ;
8436: LD_ADDR_VAR 0 3
8440: PUSH
8441: LD_INT 0
8443: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8444: LD_VAR 0 1
8448: PPUSH
8449: LD_VAR 0 2
8453: PPUSH
8454: CALL_OW 81
8458: PUSH
8459: LD_INT 1
8461: EQUAL
8462: PUSH
8463: LD_VAR 0 2
8467: PPUSH
8468: LD_VAR 0 1
8472: PPUSH
8473: CALL_OW 81
8477: PUSH
8478: LD_INT 1
8480: EQUAL
8481: AND
8482: PUSH
8483: LD_VAR 0 1
8487: PPUSH
8488: CALL_OW 83
8492: AND
8493: PUSH
8494: LD_VAR 0 2
8498: PPUSH
8499: CALL_OW 83
8503: AND
8504: IFFALSE 8514
// Result := true ;
8506: LD_ADDR_VAR 0 3
8510: PUSH
8511: LD_INT 1
8513: ST_TO_ADDR
// end ;
8514: LD_VAR 0 3
8518: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
8519: CALL 8201 0 0
8523: IFFALSE 8532
8525: GO 8527
8527: DISABLE
// YouLostInMultiplayer ;
8528: CALL_OW 107
8532: END
// every 0 0$3 trigger CanWinLoose marked 401 do
8533: CALL 8201 0 0
8537: IFFALSE 8561
8539: GO 8541
8541: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
8542: LD_EXP 19
8546: PUSH
8547: LD_OWVAR 2
8551: ARRAY
8552: PPUSH
8553: CALL 14427 0 1
// YouWinInMultiplayer ;
8557: CALL_OW 106
// end ;
8561: END
// every 0 0$3 marked 98 do var i , CanWin ;
8562: GO 8564
8564: DISABLE
8565: LD_INT 0
8567: PPUSH
8568: PPUSH
// begin if not HasPower ( your_side ) then
8569: LD_OWVAR 2
8573: PPUSH
8574: CALL 8265 0 1
8578: NOT
8579: IFFALSE 8590
// begin Multiplayer_Loose_Message ;
8581: CALL_OW 521
// enable ( 400 ) ;
8585: LD_INT 400
8587: ENABLE_MARKED
// end else
8588: GO 8723
// begin CanWin := true ;
8590: LD_ADDR_VAR 0 2
8594: PUSH
8595: LD_INT 1
8597: ST_TO_ADDR
// for i := 1 to 8 do
8598: LD_ADDR_VAR 0 1
8602: PUSH
8603: DOUBLE
8604: LD_INT 1
8606: DEC
8607: ST_TO_ADDR
8608: LD_INT 8
8610: PUSH
8611: FOR_TO
8612: IFFALSE 8709
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8614: LD_EXP 18
8618: PUSH
8619: LD_VAR 0 1
8623: ARRAY
8624: PUSH
8625: LD_VAR 0 1
8629: PPUSH
8630: CALL_OW 108
8634: AND
8635: PUSH
8636: LD_VAR 0 1
8640: PUSH
8641: LD_OWVAR 2
8645: NONEQUAL
8646: AND
8647: IFFALSE 8707
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
8649: LD_EXP 16
8653: PUSH
8654: LD_VAR 0 1
8658: ARRAY
8659: NOT
8660: PUSH
8661: LD_EXP 16
8665: PUSH
8666: LD_VAR 0 1
8670: ARRAY
8671: PUSH
8672: LD_EXP 16
8676: PUSH
8677: LD_OWVAR 2
8681: ARRAY
8682: NONEQUAL
8683: OR
8684: IFFALSE 8707
// if HasPower ( i ) then
8686: LD_VAR 0 1
8690: PPUSH
8691: CALL 8265 0 1
8695: IFFALSE 8707
// begin CanWin := false ;
8697: LD_ADDR_VAR 0 2
8701: PUSH
8702: LD_INT 0
8704: ST_TO_ADDR
// break ;
8705: GO 8709
// end ;
8707: GO 8611
8709: POP
8710: POP
// if CanWin then
8711: LD_VAR 0 2
8715: IFFALSE 8722
// enable ( 401 ) else
8717: LD_INT 401
8719: ENABLE_MARKED
8720: GO 8723
// enable ;
8722: ENABLE
// end ; end ;
8723: PPOPN 2
8725: END
// every 0 0$3 marked 99 do var i , CanWin ;
8726: GO 8728
8728: DISABLE
8729: LD_INT 0
8731: PPUSH
8732: PPUSH
// begin if not HasPower ( your_side ) then
8733: LD_OWVAR 2
8737: PPUSH
8738: CALL 8265 0 1
8742: NOT
8743: IFFALSE 8754
// begin Multiplayer_Loose_Message ;
8745: CALL_OW 521
// enable ( 400 ) ;
8749: LD_INT 400
8751: ENABLE_MARKED
// end else
8752: GO 8867
// begin CanWin := true ;
8754: LD_ADDR_VAR 0 2
8758: PUSH
8759: LD_INT 1
8761: ST_TO_ADDR
// for i := 1 to 8 do
8762: LD_ADDR_VAR 0 1
8766: PUSH
8767: DOUBLE
8768: LD_INT 1
8770: DEC
8771: ST_TO_ADDR
8772: LD_INT 8
8774: PUSH
8775: FOR_TO
8776: IFFALSE 8853
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8778: LD_EXP 18
8782: PUSH
8783: LD_VAR 0 1
8787: ARRAY
8788: PUSH
8789: LD_VAR 0 1
8793: PPUSH
8794: CALL_OW 108
8798: AND
8799: PUSH
8800: LD_VAR 0 1
8804: PUSH
8805: LD_OWVAR 2
8809: NONEQUAL
8810: AND
8811: IFFALSE 8851
// if not AlliedSides ( i , your_side ) then
8813: LD_VAR 0 1
8817: PPUSH
8818: LD_OWVAR 2
8822: PPUSH
8823: CALL 8433 0 2
8827: NOT
8828: IFFALSE 8851
// if HasPower ( i ) then
8830: LD_VAR 0 1
8834: PPUSH
8835: CALL 8265 0 1
8839: IFFALSE 8851
// begin CanWin := false ;
8841: LD_ADDR_VAR 0 2
8845: PUSH
8846: LD_INT 0
8848: ST_TO_ADDR
// break ;
8849: GO 8853
// end ;
8851: GO 8775
8853: POP
8854: POP
// if CanWin then
8855: LD_VAR 0 2
8859: IFFALSE 8866
// enable ( 401 ) else
8861: LD_INT 401
8863: ENABLE_MARKED
8864: GO 8867
// enable ;
8866: ENABLE
// end ; end ; end_of_file
8867: PPOPN 2
8869: END
// every 0 0$1 marked 100 do var i , base , pom , filter , sib_mined ;
8870: GO 8872
8872: DISABLE
8873: LD_INT 0
8875: PPUSH
8876: PPUSH
8877: PPUSH
8878: PPUSH
8879: PPUSH
// begin sib_mined := [ ] ;
8880: LD_ADDR_VAR 0 5
8884: PUSH
8885: EMPTY
8886: ST_TO_ADDR
// for i := 1 to 8 do
8887: LD_ADDR_VAR 0 1
8891: PUSH
8892: DOUBLE
8893: LD_INT 1
8895: DEC
8896: ST_TO_ADDR
8897: LD_INT 8
8899: PUSH
8900: FOR_TO
8901: IFFALSE 9057
// if Side_Positions [ i ] then
8903: LD_EXP 18
8907: PUSH
8908: LD_VAR 0 1
8912: ARRAY
8913: IFFALSE 9041
// begin filter := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8915: LD_ADDR_VAR 0 4
8919: PUSH
8920: LD_INT 22
8922: PUSH
8923: LD_VAR 0 1
8927: PUSH
8928: EMPTY
8929: LIST
8930: LIST
8931: PUSH
8932: LD_INT 2
8934: PUSH
8935: LD_INT 30
8937: PUSH
8938: LD_INT 0
8940: PUSH
8941: EMPTY
8942: LIST
8943: LIST
8944: PUSH
8945: LD_INT 30
8947: PUSH
8948: LD_INT 1
8950: PUSH
8951: EMPTY
8952: LIST
8953: LIST
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: LIST
8959: PUSH
8960: EMPTY
8961: LIST
8962: LIST
8963: PPUSH
8964: CALL_OW 69
8968: ST_TO_ADDR
// pom := 0 ;
8969: LD_ADDR_VAR 0 3
8973: PUSH
8974: LD_INT 0
8976: ST_TO_ADDR
// for base in filter do
8977: LD_ADDR_VAR 0 2
8981: PUSH
8982: LD_VAR 0 4
8986: PUSH
8987: FOR_IN
8988: IFFALSE 9021
// pom := pom + GetResourceType ( GetBase ( base ) , mat_siberit ) ;
8990: LD_ADDR_VAR 0 3
8994: PUSH
8995: LD_VAR 0 3
8999: PUSH
9000: LD_VAR 0 2
9004: PPUSH
9005: CALL_OW 274
9009: PPUSH
9010: LD_INT 3
9012: PPUSH
9013: CALL_OW 275
9017: PLUS
9018: ST_TO_ADDR
9019: GO 8987
9021: POP
9022: POP
// sib_mined := sib_mined ^ pom ;
9023: LD_ADDR_VAR 0 5
9027: PUSH
9028: LD_VAR 0 5
9032: PUSH
9033: LD_VAR 0 3
9037: ADD
9038: ST_TO_ADDR
// end else
9039: GO 9055
// sib_mined := sib_mined ^ 0 ;
9041: LD_ADDR_VAR 0 5
9045: PUSH
9046: LD_VAR 0 5
9050: PUSH
9051: LD_INT 0
9053: ADD
9054: ST_TO_ADDR
9055: GO 8900
9057: POP
9058: POP
// if not def_public_score then
9059: LD_EXP 2
9063: NOT
9064: IFFALSE 9154
// begin ExtraStrings := [ ] ;
9066: LD_ADDR_EXP 59
9070: PUSH
9071: EMPTY
9072: ST_TO_ADDR
// for i := 1 to 8 do
9073: LD_ADDR_VAR 0 1
9077: PUSH
9078: DOUBLE
9079: LD_INT 1
9081: DEC
9082: ST_TO_ADDR
9083: LD_INT 8
9085: PUSH
9086: FOR_TO
9087: IFFALSE 9150
// if Side_Positions [ i ] then
9089: LD_EXP 18
9093: PUSH
9094: LD_VAR 0 1
9098: ARRAY
9099: IFFALSE 9148
// ExtraStrings := ExtraStrings ^ [ #AlienBase-MinedPublic , i , i , sib_mined [ i ] , amount_of_siberit ] ;
9101: LD_ADDR_EXP 59
9105: PUSH
9106: LD_EXP 59
9110: PUSH
9111: LD_STRING #AlienBase-MinedPublic
9113: PUSH
9114: LD_VAR 0 1
9118: PUSH
9119: LD_VAR 0 1
9123: PUSH
9124: LD_VAR 0 5
9128: PUSH
9129: LD_VAR 0 1
9133: ARRAY
9134: PUSH
9135: LD_EXP 12
9139: PUSH
9140: EMPTY
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: ADD
9147: ST_TO_ADDR
9148: GO 9086
9150: POP
9151: POP
// end else
9152: GO 9183
// ExtraStrings := [ #AlienBase-Mined , sib_mined [ Your_Side ] , amount_of_siberit ] ;
9154: LD_ADDR_EXP 59
9158: PUSH
9159: LD_STRING #AlienBase-Mined
9161: PUSH
9162: LD_VAR 0 5
9166: PUSH
9167: LD_OWVAR 2
9171: ARRAY
9172: PUSH
9173: LD_EXP 12
9177: PUSH
9178: EMPTY
9179: LIST
9180: LIST
9181: LIST
9182: ST_TO_ADDR
// for i := 1 to 8 do
9183: LD_ADDR_VAR 0 1
9187: PUSH
9188: DOUBLE
9189: LD_INT 1
9191: DEC
9192: ST_TO_ADDR
9193: LD_INT 8
9195: PUSH
9196: FOR_TO
9197: IFFALSE 9254
// if sib_mined [ i ] >= amount_of_siberit then
9199: LD_VAR 0 5
9203: PUSH
9204: LD_VAR 0 1
9208: ARRAY
9209: PUSH
9210: LD_EXP 12
9214: GREATEREQUAL
9215: IFFALSE 9252
// begin wait ( 0 0$1 ) ;
9217: LD_INT 35
9219: PPUSH
9220: CALL_OW 67
// if sib_mined [ your_side ] >= amount_of_siberit then
9224: LD_VAR 0 5
9228: PUSH
9229: LD_OWVAR 2
9233: ARRAY
9234: PUSH
9235: LD_EXP 12
9239: GREATEREQUAL
9240: IFFALSE 9248
// YouWinInMultiplayer else
9242: CALL_OW 106
9246: GO 9252
// YouLostInMultiplayer ;
9248: CALL_OW 107
// end ;
9252: GO 9196
9254: POP
9255: POP
// enable ;
9256: ENABLE
// end ; end_of_file
9257: PPOPN 5
9259: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
9260: LD_INT 0
9262: PPUSH
9263: PPUSH
// for un in battle_flags_id do
9264: LD_ADDR_VAR 0 2
9268: PUSH
9269: LD_EXP 29
9273: PUSH
9274: FOR_IN
9275: IFFALSE 9350
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
9277: LD_VAR 0 2
9281: PPUSH
9282: LD_INT 1
9284: PUSH
9285: LD_LOC 11
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PUSH
9294: LD_INT 2
9296: PUSH
9297: LD_LOC 11
9301: PUSH
9302: LD_INT 2
9304: DIV
9305: PUSH
9306: EMPTY
9307: LIST
9308: LIST
9309: PUSH
9310: LD_INT 3
9312: PUSH
9313: LD_LOC 11
9317: PUSH
9318: LD_INT 5
9320: DIV
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: PUSH
9326: LD_INT 20
9328: PUSH
9329: LD_LOC 11
9333: PUSH
9334: EMPTY
9335: LIST
9336: LIST
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: PPUSH
9344: CALL_OW 423
9348: GO 9274
9350: POP
9351: POP
// end ;
9352: LD_VAR 0 1
9356: RET
// every 1 do var un ;
9357: GO 9359
9359: DISABLE
9360: LD_INT 0
9362: PPUSH
// begin if not def_morale_flags then
9363: LD_EXP 50
9367: NOT
9368: IFFALSE 9372
// exit ;
9370: GO 9449
// if not morale_decreasing_time then
9372: LD_EXP 10
9376: NOT
9377: IFFALSE 9381
// exit ;
9379: GO 9449
// strength = 100 ;
9381: LD_ADDR_LOC 11
9385: PUSH
9386: LD_INT 100
9388: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
9389: LD_EXP 10
9393: PPUSH
9394: CALL_OW 67
// strength := strength - 1 ;
9398: LD_ADDR_LOC 11
9402: PUSH
9403: LD_LOC 11
9407: PUSH
9408: LD_INT 1
9410: MINUS
9411: ST_TO_ADDR
// Update_Flags ;
9412: CALL 9260 0 0
// until not strength ;
9416: LD_LOC 11
9420: NOT
9421: IFFALSE 9389
// for un in battle_flags_id do
9423: LD_ADDR_VAR 0 1
9427: PUSH
9428: LD_EXP 29
9432: PUSH
9433: FOR_IN
9434: IFFALSE 9447
// KillBattleFlag ( un ) ;
9436: LD_VAR 0 1
9440: PPUSH
9441: CALL_OW 419
9445: GO 9433
9447: POP
9448: POP
// end ; end_of_file
9449: PPOPN 1
9451: END
// export BuildUpAreas ; export function BeginBuildUp ; var i , j ; begin
9452: LD_INT 0
9454: PPUSH
9455: PPUSH
9456: PPUSH
// enable ( 600 ) ;
9457: LD_INT 600
9459: ENABLE_MARKED
// for i := 1 to BuildUpAreas do
9460: LD_ADDR_VAR 0 2
9464: PUSH
9465: DOUBLE
9466: LD_INT 1
9468: DEC
9469: ST_TO_ADDR
9470: LD_EXP 39
9474: PUSH
9475: FOR_TO
9476: IFFALSE 9631
// if Position_Sides [ i ] then
9478: LD_EXP 21
9482: PUSH
9483: LD_VAR 0 2
9487: ARRAY
9488: IFFALSE 9629
// for j := 1 to 8 do
9490: LD_ADDR_VAR 0 3
9494: PUSH
9495: DOUBLE
9496: LD_INT 1
9498: DEC
9499: ST_TO_ADDR
9500: LD_INT 8
9502: PUSH
9503: FOR_TO
9504: IFFALSE 9627
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
9506: LD_EXP 18
9510: PUSH
9511: LD_VAR 0 3
9515: ARRAY
9516: PUSH
9517: LD_EXP 16
9521: PUSH
9522: LD_EXP 21
9526: PUSH
9527: LD_VAR 0 2
9531: ARRAY
9532: ARRAY
9533: PUSH
9534: LD_EXP 16
9538: PUSH
9539: LD_VAR 0 3
9543: ARRAY
9544: NONEQUAL
9545: PUSH
9546: LD_EXP 20
9550: NOT
9551: PUSH
9552: LD_EXP 21
9556: PUSH
9557: LD_VAR 0 2
9561: ARRAY
9562: PUSH
9563: LD_VAR 0 3
9567: NONEQUAL
9568: AND
9569: OR
9570: AND
9571: IFFALSE 9595
// HideArea ( j , BuildUpAreas [ i ] ) else
9573: LD_VAR 0 3
9577: PPUSH
9578: LD_EXP 39
9582: PUSH
9583: LD_VAR 0 2
9587: ARRAY
9588: PPUSH
9589: CALL_OW 333
9593: GO 9625
// if ( j = your_side ) then
9595: LD_VAR 0 3
9599: PUSH
9600: LD_OWVAR 2
9604: EQUAL
9605: IFFALSE 9625
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
9607: LD_EXP 39
9611: PUSH
9612: LD_VAR 0 2
9616: ARRAY
9617: PPUSH
9618: LD_INT 5
9620: PPUSH
9621: CALL_OW 424
9625: GO 9503
9627: POP
9628: POP
9629: GO 9475
9631: POP
9632: POP
// end ;
9633: LD_VAR 0 1
9637: RET
// export function EndBuildUp ; var i , j ; begin
9638: LD_INT 0
9640: PPUSH
9641: PPUSH
9642: PPUSH
// disable ( 600 ) ;
9643: LD_INT 600
9645: DISABLE_MARKED
// for i := 1 to BuildUpAreas do
9646: LD_ADDR_VAR 0 2
9650: PUSH
9651: DOUBLE
9652: LD_INT 1
9654: DEC
9655: ST_TO_ADDR
9656: LD_EXP 39
9660: PUSH
9661: FOR_TO
9662: IFFALSE 9817
// if Position_Sides [ i ] then
9664: LD_EXP 21
9668: PUSH
9669: LD_VAR 0 2
9673: ARRAY
9674: IFFALSE 9815
// for j := 1 to 8 do
9676: LD_ADDR_VAR 0 3
9680: PUSH
9681: DOUBLE
9682: LD_INT 1
9684: DEC
9685: ST_TO_ADDR
9686: LD_INT 8
9688: PUSH
9689: FOR_TO
9690: IFFALSE 9813
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
9692: LD_EXP 18
9696: PUSH
9697: LD_VAR 0 3
9701: ARRAY
9702: PUSH
9703: LD_EXP 16
9707: PUSH
9708: LD_EXP 21
9712: PUSH
9713: LD_VAR 0 2
9717: ARRAY
9718: ARRAY
9719: PUSH
9720: LD_EXP 16
9724: PUSH
9725: LD_VAR 0 3
9729: ARRAY
9730: NONEQUAL
9731: PUSH
9732: LD_EXP 20
9736: NOT
9737: PUSH
9738: LD_EXP 21
9742: PUSH
9743: LD_VAR 0 2
9747: ARRAY
9748: PUSH
9749: LD_VAR 0 3
9753: NONEQUAL
9754: AND
9755: OR
9756: AND
9757: IFFALSE 9781
// ShowArea ( j , BuildUpAreas [ i ] ) else
9759: LD_VAR 0 3
9763: PPUSH
9764: LD_EXP 39
9768: PUSH
9769: LD_VAR 0 2
9773: ARRAY
9774: PPUSH
9775: CALL_OW 334
9779: GO 9811
// if ( j = your_side ) then
9781: LD_VAR 0 3
9785: PUSH
9786: LD_OWVAR 2
9790: EQUAL
9791: IFFALSE 9811
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
9793: LD_EXP 39
9797: PUSH
9798: LD_VAR 0 2
9802: ARRAY
9803: PPUSH
9804: LD_INT 0
9806: PPUSH
9807: CALL_OW 424
9811: GO 9689
9813: POP
9814: POP
9815: GO 9661
9817: POP
9818: POP
// end ;
9819: LD_VAR 0 1
9823: RET
// every 5 marked 600 do var i , un ;
9824: GO 9826
9826: DISABLE
9827: LD_INT 0
9829: PPUSH
9830: PPUSH
// begin for i := 1 to BuildUpAreas do
9831: LD_ADDR_VAR 0 1
9835: PUSH
9836: DOUBLE
9837: LD_INT 1
9839: DEC
9840: ST_TO_ADDR
9841: LD_EXP 39
9845: PUSH
9846: FOR_TO
9847: IFFALSE 10002
// if Position_Sides [ i ] then
9849: LD_EXP 21
9853: PUSH
9854: LD_VAR 0 1
9858: ARRAY
9859: IFFALSE 10000
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
9861: LD_ADDR_VAR 0 2
9865: PUSH
9866: LD_EXP 39
9870: PUSH
9871: LD_VAR 0 1
9875: ARRAY
9876: PPUSH
9877: LD_INT 2
9879: PUSH
9880: LD_INT 21
9882: PUSH
9883: LD_INT 1
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PUSH
9890: LD_INT 21
9892: PUSH
9893: LD_INT 2
9895: PUSH
9896: EMPTY
9897: LIST
9898: LIST
9899: PUSH
9900: EMPTY
9901: LIST
9902: LIST
9903: LIST
9904: PUSH
9905: LD_INT 22
9907: PUSH
9908: LD_OWVAR 2
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: PUSH
9917: EMPTY
9918: LIST
9919: LIST
9920: PPUSH
9921: CALL_OW 70
9925: PUSH
9926: FOR_IN
9927: IFFALSE 9998
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
9929: LD_EXP 16
9933: PUSH
9934: LD_EXP 21
9938: PUSH
9939: LD_VAR 0 1
9943: ARRAY
9944: ARRAY
9945: PUSH
9946: LD_EXP 16
9950: PUSH
9951: LD_OWVAR 2
9955: ARRAY
9956: NONEQUAL
9957: PUSH
9958: LD_EXP 20
9962: NOT
9963: PUSH
9964: LD_EXP 21
9968: PUSH
9969: LD_VAR 0 1
9973: ARRAY
9974: PUSH
9975: LD_OWVAR 2
9979: NONEQUAL
9980: AND
9981: OR
9982: IFFALSE 9996
// ComMoveToArea ( un , BuildUpEscape ) ;
9984: LD_VAR 0 2
9988: PPUSH
9989: LD_INT 16
9991: PPUSH
9992: CALL_OW 113
9996: GO 9926
9998: POP
9999: POP
10000: GO 9846
10002: POP
10003: POP
// enable ;
10004: ENABLE
// end ;
10005: PPOPN 2
10007: END
// every 5 5$00 do
10008: GO 10010
10010: DISABLE
// if ( def_builduptime = 1 ) then
10011: LD_EXP 55
10015: PUSH
10016: LD_INT 1
10018: EQUAL
10019: IFFALSE 10025
// EndBuildUp ;
10021: CALL 9638 0 0
10025: END
// every 10 10$00 do
10026: GO 10028
10028: DISABLE
// if ( def_builduptime = 2 ) then
10029: LD_EXP 55
10033: PUSH
10034: LD_INT 2
10036: EQUAL
10037: IFFALSE 10043
// EndBuildUp ;
10039: CALL 9638 0 0
10043: END
// every 15 15$00 do
10044: GO 10046
10046: DISABLE
// if ( def_builduptime = 3 ) then
10047: LD_EXP 55
10051: PUSH
10052: LD_INT 3
10054: EQUAL
10055: IFFALSE 10061
// EndBuildUp ; end_of_file
10057: CALL 9638 0 0
10061: END
// var BloodGods , BloodGods_LastKills , BloodGods_CurrentKills , BloodGods_Positions ; every 0 0$3 marked 200 do var x ;
10062: GO 10064
10064: DISABLE
10065: LD_INT 0
10067: PPUSH
// begin enable ;
10068: ENABLE
// for x := 1 to 8 do
10069: LD_ADDR_VAR 0 1
10073: PUSH
10074: DOUBLE
10075: LD_INT 1
10077: DEC
10078: ST_TO_ADDR
10079: LD_INT 8
10081: PUSH
10082: FOR_TO
10083: IFFALSE 10167
// if ( BloodGods_CurrentKills [ x ] > 5 ) and ( BloodGods [ x ] = - 1 ) then
10085: LD_LOC 18
10089: PUSH
10090: LD_VAR 0 1
10094: ARRAY
10095: PUSH
10096: LD_INT 5
10098: GREATER
10099: PUSH
10100: LD_LOC 16
10104: PUSH
10105: LD_VAR 0 1
10109: ARRAY
10110: PUSH
10111: LD_INT 1
10113: NEG
10114: EQUAL
10115: AND
10116: IFFALSE 10165
// begin BloodGods_LastKills := Replace ( BloodGods_LastKills , x , BloodGods_LastKills [ x ] + 6 ) ;
10118: LD_ADDR_LOC 17
10122: PUSH
10123: LD_LOC 17
10127: PPUSH
10128: LD_VAR 0 1
10132: PPUSH
10133: LD_LOC 17
10137: PUSH
10138: LD_VAR 0 1
10142: ARRAY
10143: PUSH
10144: LD_INT 6
10146: PLUS
10147: PPUSH
10148: CALL_OW 1
10152: ST_TO_ADDR
// AwakenBloodGod ( x , false ) ;
10153: LD_VAR 0 1
10157: PPUSH
10158: LD_INT 0
10160: PPUSH
10161: CALL 10339 0 2
// end ;
10165: GO 10082
10167: POP
10168: POP
// end ;
10169: PPOPN 1
10171: END
// every 0 0$1 marked 200 do var BGL , x ;
10172: GO 10174
10174: DISABLE
10175: LD_INT 0
10177: PPUSH
10178: PPUSH
// begin enable ;
10179: ENABLE
// for x := 1 to 8 do
10180: LD_ADDR_VAR 0 2
10184: PUSH
10185: DOUBLE
10186: LD_INT 1
10188: DEC
10189: ST_TO_ADDR
10190: LD_INT 8
10192: PUSH
10193: FOR_TO
10194: IFFALSE 10325
// if ( BloodGods [ x ] > - 1 ) and IsLive ( BloodGods [ x ] ) then
10196: LD_LOC 16
10200: PUSH
10201: LD_VAR 0 2
10205: ARRAY
10206: PUSH
10207: LD_INT 1
10209: NEG
10210: GREATER
10211: PUSH
10212: LD_LOC 16
10216: PUSH
10217: LD_VAR 0 2
10221: ARRAY
10222: PPUSH
10223: CALL_OW 300
10227: AND
10228: IFFALSE 10323
// begin BGL := GetLives ( BloodGods [ x ] ) ;
10230: LD_ADDR_VAR 0 1
10234: PUSH
10235: LD_LOC 16
10239: PUSH
10240: LD_VAR 0 2
10244: ARRAY
10245: PPUSH
10246: CALL_OW 256
10250: ST_TO_ADDR
// if ( BGL < 1000 ) and ( BGL > 100 ) then
10251: LD_VAR 0 1
10255: PUSH
10256: LD_INT 1000
10258: LESS
10259: PUSH
10260: LD_VAR 0 1
10264: PUSH
10265: LD_INT 100
10267: GREATER
10268: AND
10269: IFFALSE 10323
// begin BGL := BGL + 10 ;
10271: LD_ADDR_VAR 0 1
10275: PUSH
10276: LD_VAR 0 1
10280: PUSH
10281: LD_INT 10
10283: PLUS
10284: ST_TO_ADDR
// if BGL > 1000 then
10285: LD_VAR 0 1
10289: PUSH
10290: LD_INT 1000
10292: GREATER
10293: IFFALSE 10303
// BGL := 1000 ;
10295: LD_ADDR_VAR 0 1
10299: PUSH
10300: LD_INT 1000
10302: ST_TO_ADDR
// SetLives ( BloodGods [ x ] , BGL ) ;
10303: LD_LOC 16
10307: PUSH
10308: LD_VAR 0 2
10312: ARRAY
10313: PPUSH
10314: LD_VAR 0 1
10318: PPUSH
10319: CALL_OW 234
// end ; end ;
10323: GO 10193
10325: POP
10326: POP
// end ;
10327: PPOPN 2
10329: END
// every 0 0$1 marked 200 do
10330: GO 10332
10332: DISABLE
// begin DisplayTimeWithKills ;
10333: CALL 10580 0 0
// enable ;
10337: ENABLE
// end ;
10338: END
// function AwakenBloodGod ( side , NoDialog ) ; begin
10339: LD_INT 0
10341: PPUSH
// uc_direction := Rand ( 0 , 5 ) ;
10342: LD_ADDR_OWVAR 24
10346: PUSH
10347: LD_INT 0
10349: PPUSH
10350: LD_INT 5
10352: PPUSH
10353: CALL_OW 12
10357: ST_TO_ADDR
// PrepareHuman ( 1 , class_soldier , 15 ) ;
10358: LD_INT 1
10360: PPUSH
10361: LD_INT 1
10363: PPUSH
10364: LD_INT 15
10366: PPUSH
10367: CALL_OW 380
// hc_importance := 106 ;
10371: LD_ADDR_OWVAR 32
10375: PUSH
10376: LD_INT 106
10378: ST_TO_ADDR
// hc_name := Blood God of  & mp_sides_players_names [ side ] ;
10379: LD_ADDR_OWVAR 26
10383: PUSH
10384: LD_STRING Blood God of 
10386: PUSH
10387: LD_OWVAR 19
10391: PUSH
10392: LD_VAR 0 1
10396: ARRAY
10397: STR
10398: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
10399: LD_ADDR_OWVAR 21
10403: PUSH
10404: LD_EXP 19
10408: PUSH
10409: LD_VAR 0 1
10413: ARRAY
10414: ST_TO_ADDR
// uc_side := side ;
10415: LD_ADDR_OWVAR 20
10419: PUSH
10420: LD_VAR 0 1
10424: ST_TO_ADDR
// hc_noskilllimit := true ;
10425: LD_ADDR_OWVAR 76
10429: PUSH
10430: LD_INT 1
10432: ST_TO_ADDR
// hc_agressivity := 50 ;
10433: LD_ADDR_OWVAR 35
10437: PUSH
10438: LD_INT 50
10440: ST_TO_ADDR
// BloodGods := Replace ( BloodGods , Side , CreateHuman ) ;
10441: LD_ADDR_LOC 16
10445: PUSH
10446: LD_LOC 16
10450: PPUSH
10451: LD_VAR 0 1
10455: PPUSH
10456: CALL_OW 44
10460: PPUSH
10461: CALL_OW 1
10465: ST_TO_ADDR
// PlaceUnitXYR ( BloodGods [ side ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 1 ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 2 ] , 10 , false ) ;
10466: LD_LOC 16
10470: PUSH
10471: LD_VAR 0 1
10475: ARRAY
10476: PPUSH
10477: LD_LOC 19
10481: PUSH
10482: LD_EXP 18
10486: PUSH
10487: LD_VAR 0 1
10491: ARRAY
10492: ARRAY
10493: PUSH
10494: LD_INT 1
10496: ARRAY
10497: PPUSH
10498: LD_LOC 19
10502: PUSH
10503: LD_EXP 18
10507: PUSH
10508: LD_VAR 0 1
10512: ARRAY
10513: ARRAY
10514: PUSH
10515: LD_INT 2
10517: ARRAY
10518: PPUSH
10519: LD_INT 10
10521: PPUSH
10522: LD_INT 0
10524: PPUSH
10525: CALL_OW 50
// SetAttr ( BloodGods [ side ] , attr_stamina , 300 ) ;
10529: LD_LOC 16
10533: PUSH
10534: LD_VAR 0 1
10538: ARRAY
10539: PPUSH
10540: LD_INT 1
10542: PPUSH
10543: LD_INT 300
10545: PPUSH
10546: CALL_OW 239
// if not NoDialog then
10550: LD_VAR 0 2
10554: NOT
10555: IFFALSE 10575
// SayRadio ( BloodGods [ side ] , DLAwaken ) ;
10557: LD_LOC 16
10561: PUSH
10562: LD_VAR 0 1
10566: ARRAY
10567: PPUSH
10568: LD_STRING DLAwaken
10570: PPUSH
10571: CALL_OW 94
// end ;
10575: LD_VAR 0 3
10579: RET
// function DisplayTimeWithKills ; var x ; begin
10580: LD_INT 0
10582: PPUSH
10583: PPUSH
// ExtraStrings :=  ;
10584: LD_ADDR_EXP 59
10588: PUSH
10589: LD_STRING 
10591: ST_TO_ADDR
// for x = 1 to Side_Positions do
10592: LD_ADDR_VAR 0 2
10596: PUSH
10597: DOUBLE
10598: LD_INT 1
10600: DEC
10601: ST_TO_ADDR
10602: LD_EXP 18
10606: PUSH
10607: FOR_TO
10608: IFFALSE 10841
// if Side_Positions [ x ] then
10610: LD_EXP 18
10614: PUSH
10615: LD_VAR 0 2
10619: ARRAY
10620: IFFALSE 10839
// begin BloodGods_CurrentKills := Replace ( BloodGods_CurrentKills , x , GetHumansKilled ( x ) - BloodGods_LastKills [ x ] ) ;
10622: LD_ADDR_LOC 18
10626: PUSH
10627: LD_LOC 18
10631: PPUSH
10632: LD_VAR 0 2
10636: PPUSH
10637: LD_VAR 0 2
10641: PPUSH
10642: CALL_OW 515
10646: PUSH
10647: LD_LOC 17
10651: PUSH
10652: LD_VAR 0 2
10656: ARRAY
10657: MINUS
10658: PPUSH
10659: CALL_OW 1
10663: ST_TO_ADDR
// if ( BloodGods [ x ] > - 1 ) and ( IsLive ( BloodGods [ x ] ) ) then
10664: LD_LOC 16
10668: PUSH
10669: LD_VAR 0 2
10673: ARRAY
10674: PUSH
10675: LD_INT 1
10677: NEG
10678: GREATER
10679: PUSH
10680: LD_LOC 16
10684: PUSH
10685: LD_VAR 0 2
10689: ARRAY
10690: PPUSH
10691: CALL_OW 300
10695: AND
10696: IFFALSE 10729
// ExtraStrings = ExtraStrings ^ [ #godawoken , x , x ] else
10698: LD_ADDR_EXP 59
10702: PUSH
10703: LD_EXP 59
10707: PUSH
10708: LD_STRING #godawoken
10710: PUSH
10711: LD_VAR 0 2
10715: PUSH
10716: LD_VAR 0 2
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: LIST
10725: ADD
10726: ST_TO_ADDR
10727: GO 10839
// if ( BloodGods [ x ] > - 1 ) and ( IsDead ( BloodGods [ x ] ) ) then
10729: LD_LOC 16
10733: PUSH
10734: LD_VAR 0 2
10738: ARRAY
10739: PUSH
10740: LD_INT 1
10742: NEG
10743: GREATER
10744: PUSH
10745: LD_LOC 16
10749: PUSH
10750: LD_VAR 0 2
10754: ARRAY
10755: PPUSH
10756: CALL_OW 301
10760: AND
10761: IFFALSE 10794
// ExtraStrings = ExtraStrings ^ [ #goddied , x , x ] else
10763: LD_ADDR_EXP 59
10767: PUSH
10768: LD_EXP 59
10772: PUSH
10773: LD_STRING #goddied
10775: PUSH
10776: LD_VAR 0 2
10780: PUSH
10781: LD_VAR 0 2
10785: PUSH
10786: EMPTY
10787: LIST
10788: LIST
10789: LIST
10790: ADD
10791: ST_TO_ADDR
10792: GO 10839
// ExtraStrings = ExtraStrings ^ [ #godssacrifise , x , x , BloodGods_CurrentKills [ x ] , 6 ] end ;
10794: LD_ADDR_EXP 59
10798: PUSH
10799: LD_EXP 59
10803: PUSH
10804: LD_STRING #godssacrifise
10806: PUSH
10807: LD_VAR 0 2
10811: PUSH
10812: LD_VAR 0 2
10816: PUSH
10817: LD_LOC 18
10821: PUSH
10822: LD_VAR 0 2
10826: ARRAY
10827: PUSH
10828: LD_INT 6
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: ADD
10838: ST_TO_ADDR
10839: GO 10607
10841: POP
10842: POP
// end ;
10843: LD_VAR 0 1
10847: RET
// export function InitBloodGods ; begin
10848: LD_INT 0
10850: PPUSH
// BloodGods = [ - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 ] ;
10851: LD_ADDR_LOC 16
10855: PUSH
10856: LD_INT 1
10858: NEG
10859: PUSH
10860: LD_INT 1
10862: NEG
10863: PUSH
10864: LD_INT 1
10866: NEG
10867: PUSH
10868: LD_INT 1
10870: NEG
10871: PUSH
10872: LD_INT 1
10874: NEG
10875: PUSH
10876: LD_INT 1
10878: NEG
10879: PUSH
10880: LD_INT 1
10882: NEG
10883: PUSH
10884: LD_INT 1
10886: NEG
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: ST_TO_ADDR
// BloodGods_LastKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10898: LD_ADDR_LOC 17
10902: PUSH
10903: LD_INT 0
10905: PUSH
10906: LD_INT 0
10908: PUSH
10909: LD_INT 0
10911: PUSH
10912: LD_INT 0
10914: PUSH
10915: LD_INT 0
10917: PUSH
10918: LD_INT 0
10920: PUSH
10921: LD_INT 0
10923: PUSH
10924: LD_INT 0
10926: PUSH
10927: EMPTY
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: ST_TO_ADDR
// BloodGods_CurrentKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10937: LD_ADDR_LOC 18
10941: PUSH
10942: LD_INT 0
10944: PUSH
10945: LD_INT 0
10947: PUSH
10948: LD_INT 0
10950: PUSH
10951: LD_INT 0
10953: PUSH
10954: LD_INT 0
10956: PUSH
10957: LD_INT 0
10959: PUSH
10960: LD_INT 0
10962: PUSH
10963: LD_INT 0
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: ST_TO_ADDR
// BloodGods_Positions = [ [ 60 , 47 ] , [ 82 , 26 ] , [ 124 , 45 ] , [ 147 , 90 ] , [ 126 , 112 ] , [ 84 , 92 ] , [ 106 , 73 ] , [ 106 , 73 ] ] ;
10976: LD_ADDR_LOC 19
10980: PUSH
10981: LD_INT 60
10983: PUSH
10984: LD_INT 47
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: PUSH
10991: LD_INT 82
10993: PUSH
10994: LD_INT 26
10996: PUSH
10997: EMPTY
10998: LIST
10999: LIST
11000: PUSH
11001: LD_INT 124
11003: PUSH
11004: LD_INT 45
11006: PUSH
11007: EMPTY
11008: LIST
11009: LIST
11010: PUSH
11011: LD_INT 147
11013: PUSH
11014: LD_INT 90
11016: PUSH
11017: EMPTY
11018: LIST
11019: LIST
11020: PUSH
11021: LD_INT 126
11023: PUSH
11024: LD_INT 112
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: PUSH
11031: LD_INT 84
11033: PUSH
11034: LD_INT 92
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: PUSH
11041: LD_INT 106
11043: PUSH
11044: LD_INT 73
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: PUSH
11051: LD_INT 106
11053: PUSH
11054: LD_INT 73
11056: PUSH
11057: EMPTY
11058: LIST
11059: LIST
11060: PUSH
11061: EMPTY
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: ST_TO_ADDR
// ClearHumansKilled ;
11071: CALL_OW 516
// enable ( 200 ) ;
11075: LD_INT 200
11077: ENABLE_MARKED
// end ; end_of_file
11078: LD_VAR 0 1
11082: RET
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime , def_sheik , def_mastodont ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
11083: LD_INT 0
11085: PPUSH
11086: PPUSH
// if ( not IAmSpec ) then
11087: CALL_OW 531
11091: NOT
11092: IFFALSE 11108
// Result := Limits_Info ^  ;
11094: LD_ADDR_VAR 0 1
11098: PUSH
11099: LD_LOC 27
11103: PUSH
11104: LD_STRING 
11106: ADD
11107: ST_TO_ADDR
// for i := 1 to 8 do
11108: LD_ADDR_VAR 0 2
11112: PUSH
11113: DOUBLE
11114: LD_INT 1
11116: DEC
11117: ST_TO_ADDR
11118: LD_INT 8
11120: PUSH
11121: FOR_TO
11122: IFFALSE 11167
// if Cheaters [ i ] then
11124: LD_LOC 28
11128: PUSH
11129: LD_VAR 0 2
11133: ARRAY
11134: IFFALSE 11165
// Result := Result ^ [ #Cheater , i , i ] ;
11136: LD_ADDR_VAR 0 1
11140: PUSH
11141: LD_VAR 0 1
11145: PUSH
11146: LD_STRING #Cheater
11148: PUSH
11149: LD_VAR 0 2
11153: PUSH
11154: LD_VAR 0 2
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: LIST
11163: ADD
11164: ST_TO_ADDR
11165: GO 11121
11167: POP
11168: POP
// end ;
11169: LD_VAR 0 1
11173: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
11174: LD_INT 0
11176: PPUSH
11177: PPUSH
11178: PPUSH
11179: PPUSH
11180: PPUSH
// case Game_Type of 10 :
11181: LD_EXP 40
11185: PUSH
11186: LD_INT 10
11188: DOUBLE
11189: EQUAL
11190: IFTRUE 11194
11192: GO 11205
11194: POP
// def_game_rules := 1 ; 11 :
11195: LD_ADDR_EXP 41
11199: PUSH
11200: LD_INT 1
11202: ST_TO_ADDR
11203: GO 11225
11205: LD_INT 11
11207: DOUBLE
11208: EQUAL
11209: IFTRUE 11213
11211: GO 11224
11213: POP
// def_game_rules := 3 ; end ;
11214: LD_ADDR_EXP 41
11218: PUSH
11219: LD_INT 3
11221: ST_TO_ADDR
11222: GO 11225
11224: POP
// case def_game_rules of 0 :
11225: LD_EXP 41
11229: PUSH
11230: LD_INT 0
11232: DOUBLE
11233: EQUAL
11234: IFTRUE 11238
11236: GO 11243
11238: POP
// exit ; 1 :
11239: GO 13301
11241: GO 13201
11243: LD_INT 1
11245: DOUBLE
11246: EQUAL
11247: IFTRUE 11251
11249: GO 11467
11251: POP
// begin def_base_level := 2 ;
11252: LD_ADDR_EXP 42
11256: PUSH
11257: LD_INT 2
11259: ST_TO_ADDR
// def_amount_of_people := 2 ;
11260: LD_ADDR_EXP 43
11264: PUSH
11265: LD_INT 2
11267: ST_TO_ADDR
// def_skill_level := 1 ;
11268: LD_ADDR_EXP 44
11272: PUSH
11273: LD_INT 1
11275: ST_TO_ADDR
// def_starting_resources := 2 ;
11276: LD_ADDR_EXP 45
11280: PUSH
11281: LD_INT 2
11283: ST_TO_ADDR
// def_shipments_density := 1 ;
11284: LD_ADDR_EXP 46
11288: PUSH
11289: LD_INT 1
11291: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11292: LD_ADDR_EXP 47
11296: PUSH
11297: LD_INT 0
11299: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
11300: LD_ADDR_EXP 48
11304: PUSH
11305: LD_INT 1
11307: ST_TO_ADDR
// def_shared_vision := 1 ;
11308: LD_ADDR_EXP 49
11312: PUSH
11313: LD_INT 1
11315: ST_TO_ADDR
// def_morale_flags := 3 ;
11316: LD_ADDR_EXP 50
11320: PUSH
11321: LD_INT 3
11323: ST_TO_ADDR
// def_siberite_detection := 1 ;
11324: LD_ADDR_EXP 51
11328: PUSH
11329: LD_INT 1
11331: ST_TO_ADDR
// def_people_respawning := 1 ;
11332: LD_ADDR_EXP 52
11336: PUSH
11337: LD_INT 1
11339: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
11340: LD_ADDR_EXP 53
11344: PUSH
11345: LD_INT 1
11347: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11348: LD_ADDR_EXP 54
11352: PUSH
11353: LD_INT 0
11355: ST_TO_ADDR
// def_builduptime := 2 ;
11356: LD_ADDR_EXP 55
11360: PUSH
11361: LD_INT 2
11363: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
11364: LD_ADDR_VAR 0 2
11368: PUSH
11369: EMPTY
11370: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
11371: LD_ADDR_VAR 0 3
11375: PUSH
11376: EMPTY
11377: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11378: LD_ADDR_LOC 22
11382: PUSH
11383: EMPTY
11384: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11385: LD_ADDR_LOC 23
11389: PUSH
11390: EMPTY
11391: ST_TO_ADDR
// Banned_Controls := [ ] ;
11392: LD_ADDR_LOC 24
11396: PUSH
11397: EMPTY
11398: ST_TO_ADDR
// Banned_Engines := [ ] ;
11399: LD_ADDR_LOC 25
11403: PUSH
11404: EMPTY
11405: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
11406: LD_ADDR_LOC 20
11410: PUSH
11411: LD_INT 37
11413: PUSH
11414: EMPTY
11415: LIST
11416: PUSH
11417: LD_INT 4
11419: PUSH
11420: LD_INT 5
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: PUSH
11427: LD_INT 31
11429: PUSH
11430: LD_INT 32
11432: PUSH
11433: LD_INT 33
11435: PUSH
11436: EMPTY
11437: LIST
11438: LIST
11439: LIST
11440: PUSH
11441: EMPTY
11442: LIST
11443: LIST
11444: LIST
11445: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
11446: LD_ADDR_LOC 21
11450: PUSH
11451: LD_INT 2
11453: PUSH
11454: LD_INT 2
11456: PUSH
11457: LD_INT 4
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: LIST
11464: ST_TO_ADDR
// end ; 2 :
11465: GO 13201
11467: LD_INT 2
11469: DOUBLE
11470: EQUAL
11471: IFTRUE 11475
11473: GO 11684
11475: POP
// begin def_base_level := 1 ;
11476: LD_ADDR_EXP 42
11480: PUSH
11481: LD_INT 1
11483: ST_TO_ADDR
// def_amount_of_people := 2 ;
11484: LD_ADDR_EXP 43
11488: PUSH
11489: LD_INT 2
11491: ST_TO_ADDR
// def_skill_level := 3 ;
11492: LD_ADDR_EXP 44
11496: PUSH
11497: LD_INT 3
11499: ST_TO_ADDR
// def_starting_resources := 3 ;
11500: LD_ADDR_EXP 45
11504: PUSH
11505: LD_INT 3
11507: ST_TO_ADDR
// def_shipments_density := 2 ;
11508: LD_ADDR_EXP 46
11512: PUSH
11513: LD_INT 2
11515: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
11516: LD_ADDR_EXP 47
11520: PUSH
11521: LD_INT 1
11523: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
11524: LD_ADDR_EXP 48
11528: PUSH
11529: LD_INT 2
11531: ST_TO_ADDR
// def_shared_vision := 1 ;
11532: LD_ADDR_EXP 49
11536: PUSH
11537: LD_INT 1
11539: ST_TO_ADDR
// def_morale_flags := 0 ;
11540: LD_ADDR_EXP 50
11544: PUSH
11545: LD_INT 0
11547: ST_TO_ADDR
// def_siberite_detection := 1 ;
11548: LD_ADDR_EXP 51
11552: PUSH
11553: LD_INT 1
11555: ST_TO_ADDR
// def_people_respawning := 0 ;
11556: LD_ADDR_EXP 52
11560: PUSH
11561: LD_INT 0
11563: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
11564: LD_ADDR_EXP 53
11568: PUSH
11569: LD_INT 0
11571: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11572: LD_ADDR_EXP 54
11576: PUSH
11577: LD_INT 0
11579: ST_TO_ADDR
// def_builduptime := 2 ;
11580: LD_ADDR_EXP 55
11584: PUSH
11585: LD_INT 2
11587: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
11588: LD_ADDR_VAR 0 2
11592: PUSH
11593: LD_INT 1
11595: PUSH
11596: EMPTY
11597: LIST
11598: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
11599: LD_ADDR_VAR 0 3
11603: PUSH
11604: EMPTY
11605: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11606: LD_ADDR_LOC 22
11610: PUSH
11611: EMPTY
11612: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11613: LD_ADDR_LOC 23
11617: PUSH
11618: EMPTY
11619: ST_TO_ADDR
// Banned_Controls := [ ] ;
11620: LD_ADDR_LOC 24
11624: PUSH
11625: EMPTY
11626: ST_TO_ADDR
// Banned_Engines := [ ] ;
11627: LD_ADDR_LOC 25
11631: PUSH
11632: EMPTY
11633: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
11634: LD_ADDR_LOC 20
11638: PUSH
11639: LD_INT 4
11641: PUSH
11642: LD_INT 5
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: PUSH
11649: LD_INT 31
11651: PUSH
11652: LD_INT 32
11654: PUSH
11655: LD_INT 33
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: LIST
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
11667: LD_ADDR_LOC 21
11671: PUSH
11672: LD_INT 1
11674: PUSH
11675: LD_INT 2
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: ST_TO_ADDR
// end ; 3 :
11682: GO 13201
11684: LD_INT 3
11686: DOUBLE
11687: EQUAL
11688: IFTRUE 11692
11690: GO 11935
11692: POP
// begin def_base_level := 1 ;
11693: LD_ADDR_EXP 42
11697: PUSH
11698: LD_INT 1
11700: ST_TO_ADDR
// def_amount_of_people := 2 ;
11701: LD_ADDR_EXP 43
11705: PUSH
11706: LD_INT 2
11708: ST_TO_ADDR
// def_skill_level := 3 ;
11709: LD_ADDR_EXP 44
11713: PUSH
11714: LD_INT 3
11716: ST_TO_ADDR
// def_starting_resources := 3 ;
11717: LD_ADDR_EXP 45
11721: PUSH
11722: LD_INT 3
11724: ST_TO_ADDR
// def_shipments_density := 1 ;
11725: LD_ADDR_EXP 46
11729: PUSH
11730: LD_INT 1
11732: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11733: LD_ADDR_EXP 47
11737: PUSH
11738: LD_INT 0
11740: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
11741: LD_ADDR_EXP 48
11745: PUSH
11746: LD_INT 1
11748: ST_TO_ADDR
// def_shared_vision := 1 ;
11749: LD_ADDR_EXP 49
11753: PUSH
11754: LD_INT 1
11756: ST_TO_ADDR
// def_morale_flags := 0 ;
11757: LD_ADDR_EXP 50
11761: PUSH
11762: LD_INT 0
11764: ST_TO_ADDR
// def_siberite_detection := 1 ;
11765: LD_ADDR_EXP 51
11769: PUSH
11770: LD_INT 1
11772: ST_TO_ADDR
// def_people_respawning := 0 ;
11773: LD_ADDR_EXP 52
11777: PUSH
11778: LD_INT 0
11780: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
11781: LD_ADDR_EXP 53
11785: PUSH
11786: LD_INT 2
11788: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11789: LD_ADDR_EXP 54
11793: PUSH
11794: LD_INT 0
11796: ST_TO_ADDR
// def_builduptime := 1 ;
11797: LD_ADDR_EXP 55
11801: PUSH
11802: LD_INT 1
11804: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
11805: LD_ADDR_VAR 0 2
11809: PUSH
11810: LD_INT 23
11812: PUSH
11813: EMPTY
11814: LIST
11815: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
11816: LD_ADDR_VAR 0 3
11820: PUSH
11821: LD_INT 2
11823: PUSH
11824: LD_INT 37
11826: PUSH
11827: LD_INT 32
11829: PUSH
11830: LD_INT 33
11832: PUSH
11833: LD_INT 36
11835: PUSH
11836: LD_INT 16
11838: PUSH
11839: LD_INT 23
11841: PUSH
11842: LD_INT 21
11844: PUSH
11845: LD_INT 18
11847: PUSH
11848: LD_INT 22
11850: PUSH
11851: LD_INT 20
11853: PUSH
11854: LD_INT 19
11856: PUSH
11857: LD_INT 25
11859: PUSH
11860: LD_INT 17
11862: PUSH
11863: LD_INT 24
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11883: LD_ADDR_LOC 22
11887: PUSH
11888: EMPTY
11889: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11890: LD_ADDR_LOC 23
11894: PUSH
11895: EMPTY
11896: ST_TO_ADDR
// Banned_Controls := [ ] ;
11897: LD_ADDR_LOC 24
11901: PUSH
11902: EMPTY
11903: ST_TO_ADDR
// Banned_Engines := [ ] ;
11904: LD_ADDR_LOC 25
11908: PUSH
11909: EMPTY
11910: ST_TO_ADDR
// Restricted_Builds := [ ] ;
11911: LD_ADDR_LOC 20
11915: PUSH
11916: EMPTY
11917: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
11918: LD_ADDR_LOC 21
11922: PUSH
11923: EMPTY
11924: ST_TO_ADDR
// No_Mechs := true ;
11925: LD_ADDR_EXP 58
11929: PUSH
11930: LD_INT 1
11932: ST_TO_ADDR
// end ; 4 :
11933: GO 13201
11935: LD_INT 4
11937: DOUBLE
11938: EQUAL
11939: IFTRUE 11943
11941: GO 12118
11943: POP
// begin def_base_level := 1 ;
11944: LD_ADDR_EXP 42
11948: PUSH
11949: LD_INT 1
11951: ST_TO_ADDR
// def_amount_of_people := 2 ;
11952: LD_ADDR_EXP 43
11956: PUSH
11957: LD_INT 2
11959: ST_TO_ADDR
// def_skill_level := 3 ;
11960: LD_ADDR_EXP 44
11964: PUSH
11965: LD_INT 3
11967: ST_TO_ADDR
// def_starting_resources := 3 ;
11968: LD_ADDR_EXP 45
11972: PUSH
11973: LD_INT 3
11975: ST_TO_ADDR
// def_shipments_density := 2 ;
11976: LD_ADDR_EXP 46
11980: PUSH
11981: LD_INT 2
11983: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
11984: LD_ADDR_EXP 47
11988: PUSH
11989: LD_INT 1
11991: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
11992: LD_ADDR_EXP 48
11996: PUSH
11997: LD_INT 2
11999: ST_TO_ADDR
// def_shared_vision := 1 ;
12000: LD_ADDR_EXP 49
12004: PUSH
12005: LD_INT 1
12007: ST_TO_ADDR
// def_morale_flags := 0 ;
12008: LD_ADDR_EXP 50
12012: PUSH
12013: LD_INT 0
12015: ST_TO_ADDR
// def_siberite_detection := 1 ;
12016: LD_ADDR_EXP 51
12020: PUSH
12021: LD_INT 1
12023: ST_TO_ADDR
// def_people_respawning := 0 ;
12024: LD_ADDR_EXP 52
12028: PUSH
12029: LD_INT 0
12031: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
12032: LD_ADDR_EXP 53
12036: PUSH
12037: LD_INT 0
12039: ST_TO_ADDR
// def_siberite_bomb := 1 ;
12040: LD_ADDR_EXP 54
12044: PUSH
12045: LD_INT 1
12047: ST_TO_ADDR
// def_builduptime := 3 ;
12048: LD_ADDR_EXP 55
12052: PUSH
12053: LD_INT 3
12055: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
12056: LD_ADDR_VAR 0 2
12060: PUSH
12061: LD_INT 1
12063: PUSH
12064: EMPTY
12065: LIST
12066: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
12067: LD_ADDR_VAR 0 3
12071: PUSH
12072: EMPTY
12073: ST_TO_ADDR
// Banned_Weapons := [ ] ;
12074: LD_ADDR_LOC 22
12078: PUSH
12079: EMPTY
12080: ST_TO_ADDR
// Banned_Chassis := [ ] ;
12081: LD_ADDR_LOC 23
12085: PUSH
12086: EMPTY
12087: ST_TO_ADDR
// Banned_Controls := [ ] ;
12088: LD_ADDR_LOC 24
12092: PUSH
12093: EMPTY
12094: ST_TO_ADDR
// Banned_Engines := [ ] ;
12095: LD_ADDR_LOC 25
12099: PUSH
12100: EMPTY
12101: ST_TO_ADDR
// Restricted_Builds := [ ] ;
12102: LD_ADDR_LOC 20
12106: PUSH
12107: EMPTY
12108: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
12109: LD_ADDR_LOC 21
12113: PUSH
12114: EMPTY
12115: ST_TO_ADDR
// end ; 5 :
12116: GO 13201
12118: LD_INT 5
12120: DOUBLE
12121: EQUAL
12122: IFTRUE 12126
12124: GO 12375
12126: POP
// begin def_base_level := 0 ;
12127: LD_ADDR_EXP 42
12131: PUSH
12132: LD_INT 0
12134: ST_TO_ADDR
// def_amount_of_people := 0 ;
12135: LD_ADDR_EXP 43
12139: PUSH
12140: LD_INT 0
12142: ST_TO_ADDR
// def_skill_level := 0 ;
12143: LD_ADDR_EXP 44
12147: PUSH
12148: LD_INT 0
12150: ST_TO_ADDR
// def_starting_resources := 0 ;
12151: LD_ADDR_EXP 45
12155: PUSH
12156: LD_INT 0
12158: ST_TO_ADDR
// def_shipments_density := 0 ;
12159: LD_ADDR_EXP 46
12163: PUSH
12164: LD_INT 0
12166: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
12167: LD_ADDR_EXP 47
12171: PUSH
12172: LD_INT 0
12174: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
12175: LD_ADDR_EXP 48
12179: PUSH
12180: LD_INT 0
12182: ST_TO_ADDR
// def_shared_vision := 1 ;
12183: LD_ADDR_EXP 49
12187: PUSH
12188: LD_INT 1
12190: ST_TO_ADDR
// def_morale_flags := 0 ;
12191: LD_ADDR_EXP 50
12195: PUSH
12196: LD_INT 0
12198: ST_TO_ADDR
// def_siberite_detection := 0 ;
12199: LD_ADDR_EXP 51
12203: PUSH
12204: LD_INT 0
12206: ST_TO_ADDR
// def_people_respawning := 1 ;
12207: LD_ADDR_EXP 52
12211: PUSH
12212: LD_INT 1
12214: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
12215: LD_ADDR_EXP 53
12219: PUSH
12220: LD_INT 1
12222: ST_TO_ADDR
// def_siberite_bomb := 0 ;
12223: LD_ADDR_EXP 54
12227: PUSH
12228: LD_INT 0
12230: ST_TO_ADDR
// def_builduptime := 0 ;
12231: LD_ADDR_EXP 55
12235: PUSH
12236: LD_INT 0
12238: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
12239: LD_ADDR_VAR 0 2
12243: PUSH
12244: LD_INT 10
12246: PUSH
12247: LD_INT 3
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
12254: LD_ADDR_VAR 0 3
12258: PUSH
12259: LD_INT 12
12261: PUSH
12262: LD_INT 11
12264: PUSH
12265: LD_INT 14
12267: PUSH
12268: LD_INT 13
12270: PUSH
12271: LD_INT 5
12273: PUSH
12274: LD_INT 24
12276: PUSH
12277: LD_INT 21
12279: PUSH
12280: LD_INT 33
12282: PUSH
12283: LD_INT 36
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
12297: LD_ADDR_LOC 22
12301: PUSH
12302: LD_INT 31
12304: PUSH
12305: EMPTY
12306: LIST
12307: ST_TO_ADDR
// Banned_Chassis := [ ] ;
12308: LD_ADDR_LOC 23
12312: PUSH
12313: EMPTY
12314: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
12315: LD_ADDR_LOC 24
12319: PUSH
12320: LD_INT 2
12322: PUSH
12323: EMPTY
12324: LIST
12325: ST_TO_ADDR
// Banned_Engines := [ ] ;
12326: LD_ADDR_LOC 25
12330: PUSH
12331: EMPTY
12332: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
12333: LD_ADDR_LOC 20
12337: PUSH
12338: LD_INT 4
12340: PUSH
12341: EMPTY
12342: LIST
12343: PUSH
12344: LD_INT 31
12346: PUSH
12347: LD_INT 32
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
12358: LD_ADDR_LOC 21
12362: PUSH
12363: LD_INT 1
12365: PUSH
12366: LD_INT 1
12368: PUSH
12369: EMPTY
12370: LIST
12371: LIST
12372: ST_TO_ADDR
// end ; 6 :
12373: GO 13201
12375: LD_INT 6
12377: DOUBLE
12378: EQUAL
12379: IFTRUE 12383
12381: GO 12586
12383: POP
// begin def_base_level := 1 ;
12384: LD_ADDR_EXP 42
12388: PUSH
12389: LD_INT 1
12391: ST_TO_ADDR
// def_amount_of_people := 2 ;
12392: LD_ADDR_EXP 43
12396: PUSH
12397: LD_INT 2
12399: ST_TO_ADDR
// def_skill_level := 3 ;
12400: LD_ADDR_EXP 44
12404: PUSH
12405: LD_INT 3
12407: ST_TO_ADDR
// def_starting_resources := 3 ;
12408: LD_ADDR_EXP 45
12412: PUSH
12413: LD_INT 3
12415: ST_TO_ADDR
// def_shipments_density := 1 ;
12416: LD_ADDR_EXP 46
12420: PUSH
12421: LD_INT 1
12423: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
12424: LD_ADDR_EXP 47
12428: PUSH
12429: LD_INT 0
12431: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
12432: LD_ADDR_EXP 48
12436: PUSH
12437: LD_INT 1
12439: ST_TO_ADDR
// def_shared_vision := 1 ;
12440: LD_ADDR_EXP 49
12444: PUSH
12445: LD_INT 1
12447: ST_TO_ADDR
// def_morale_flags := 0 ;
12448: LD_ADDR_EXP 50
12452: PUSH
12453: LD_INT 0
12455: ST_TO_ADDR
// def_siberite_detection := 1 ;
12456: LD_ADDR_EXP 51
12460: PUSH
12461: LD_INT 1
12463: ST_TO_ADDR
// def_people_respawning := 2 ;
12464: LD_ADDR_EXP 52
12468: PUSH
12469: LD_INT 2
12471: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
12472: LD_ADDR_EXP 53
12476: PUSH
12477: LD_INT 1
12479: ST_TO_ADDR
// def_siberite_bomb := 0 ;
12480: LD_ADDR_EXP 54
12484: PUSH
12485: LD_INT 0
12487: ST_TO_ADDR
// def_builduptime := 1 ;
12488: LD_ADDR_EXP 55
12492: PUSH
12493: LD_INT 1
12495: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
12496: LD_ADDR_VAR 0 2
12500: PUSH
12501: LD_INT 23
12503: PUSH
12504: EMPTY
12505: LIST
12506: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
12507: LD_ADDR_VAR 0 3
12511: PUSH
12512: LD_INT 2
12514: PUSH
12515: LD_INT 37
12517: PUSH
12518: LD_INT 31
12520: PUSH
12521: LD_INT 32
12523: PUSH
12524: LD_INT 33
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: ST_TO_ADDR
// Banned_Weapons := [ ] ;
12534: LD_ADDR_LOC 22
12538: PUSH
12539: EMPTY
12540: ST_TO_ADDR
// Banned_Chassis := [ ] ;
12541: LD_ADDR_LOC 23
12545: PUSH
12546: EMPTY
12547: ST_TO_ADDR
// Banned_Controls := [ ] ;
12548: LD_ADDR_LOC 24
12552: PUSH
12553: EMPTY
12554: ST_TO_ADDR
// Banned_Engines := [ ] ;
12555: LD_ADDR_LOC 25
12559: PUSH
12560: EMPTY
12561: ST_TO_ADDR
// Restricted_Builds := [ ] ;
12562: LD_ADDR_LOC 20
12566: PUSH
12567: EMPTY
12568: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
12569: LD_ADDR_LOC 21
12573: PUSH
12574: EMPTY
12575: ST_TO_ADDR
// No_Mechs := true ;
12576: LD_ADDR_EXP 58
12580: PUSH
12581: LD_INT 1
12583: ST_TO_ADDR
// end ; 7 :
12584: GO 13201
12586: LD_INT 7
12588: DOUBLE
12589: EQUAL
12590: IFTRUE 12594
12592: GO 12792
12594: POP
// begin def_base_level := 1 ;
12595: LD_ADDR_EXP 42
12599: PUSH
12600: LD_INT 1
12602: ST_TO_ADDR
// def_amount_of_people := 2 ;
12603: LD_ADDR_EXP 43
12607: PUSH
12608: LD_INT 2
12610: ST_TO_ADDR
// def_skill_level := 3 ;
12611: LD_ADDR_EXP 44
12615: PUSH
12616: LD_INT 3
12618: ST_TO_ADDR
// def_starting_resources := 3 ;
12619: LD_ADDR_EXP 45
12623: PUSH
12624: LD_INT 3
12626: ST_TO_ADDR
// def_shipments_density := 1 ;
12627: LD_ADDR_EXP 46
12631: PUSH
12632: LD_INT 1
12634: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
12635: LD_ADDR_EXP 47
12639: PUSH
12640: LD_INT 1
12642: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
12643: LD_ADDR_EXP 48
12647: PUSH
12648: LD_INT 2
12650: ST_TO_ADDR
// def_shared_vision := 1 ;
12651: LD_ADDR_EXP 49
12655: PUSH
12656: LD_INT 1
12658: ST_TO_ADDR
// def_morale_flags := 0 ;
12659: LD_ADDR_EXP 50
12663: PUSH
12664: LD_INT 0
12666: ST_TO_ADDR
// def_siberite_detection := 1 ;
12667: LD_ADDR_EXP 51
12671: PUSH
12672: LD_INT 1
12674: ST_TO_ADDR
// def_people_respawning := 0 ;
12675: LD_ADDR_EXP 52
12679: PUSH
12680: LD_INT 0
12682: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
12683: LD_ADDR_EXP 53
12687: PUSH
12688: LD_INT 1
12690: ST_TO_ADDR
// def_siberite_bomb := 0 ;
12691: LD_ADDR_EXP 54
12695: PUSH
12696: LD_INT 0
12698: ST_TO_ADDR
// def_builduptime := 3 ;
12699: LD_ADDR_EXP 55
12703: PUSH
12704: LD_INT 3
12706: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
12707: LD_ADDR_VAR 0 2
12711: PUSH
12712: LD_INT 23
12714: PUSH
12715: EMPTY
12716: LIST
12717: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
12718: LD_ADDR_VAR 0 3
12722: PUSH
12723: LD_INT 37
12725: PUSH
12726: EMPTY
12727: LIST
12728: ST_TO_ADDR
// Banned_Weapons := [ ] ;
12729: LD_ADDR_LOC 22
12733: PUSH
12734: EMPTY
12735: ST_TO_ADDR
// Banned_Chassis := [ ] ;
12736: LD_ADDR_LOC 23
12740: PUSH
12741: EMPTY
12742: ST_TO_ADDR
// Banned_Controls := [ ] ;
12743: LD_ADDR_LOC 24
12747: PUSH
12748: EMPTY
12749: ST_TO_ADDR
// Banned_Engines := [ ] ;
12750: LD_ADDR_LOC 25
12754: PUSH
12755: EMPTY
12756: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
12757: LD_ADDR_LOC 20
12761: PUSH
12762: LD_INT 31
12764: PUSH
12765: LD_INT 32
12767: PUSH
12768: LD_INT 33
12770: PUSH
12771: EMPTY
12772: LIST
12773: LIST
12774: LIST
12775: PUSH
12776: EMPTY
12777: LIST
12778: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
12779: LD_ADDR_LOC 21
12783: PUSH
12784: LD_INT 10
12786: PUSH
12787: EMPTY
12788: LIST
12789: ST_TO_ADDR
// end ; 8 :
12790: GO 13201
12792: LD_INT 8
12794: DOUBLE
12795: EQUAL
12796: IFTRUE 12800
12798: GO 13200
12800: POP
// begin def_base_level := 0 ;
12801: LD_ADDR_EXP 42
12805: PUSH
12806: LD_INT 0
12808: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
12809: LD_ADDR_EXP 43
12813: PUSH
12814: LD_INT 0
12816: PPUSH
12817: LD_INT 1
12819: PPUSH
12820: CALL_OW 12
12824: ST_TO_ADDR
// def_skill_level := 0 ;
12825: LD_ADDR_EXP 44
12829: PUSH
12830: LD_INT 0
12832: ST_TO_ADDR
// def_starting_resources := 2 ;
12833: LD_ADDR_EXP 45
12837: PUSH
12838: LD_INT 2
12840: ST_TO_ADDR
// def_shipments_density := 1 ;
12841: LD_ADDR_EXP 46
12845: PUSH
12846: LD_INT 1
12848: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
12849: LD_ADDR_EXP 47
12853: PUSH
12854: LD_INT 0
12856: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
12857: LD_ADDR_EXP 48
12861: PUSH
12862: LD_INT 0
12864: ST_TO_ADDR
// def_shared_vision := 1 ;
12865: LD_ADDR_EXP 49
12869: PUSH
12870: LD_INT 1
12872: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
12873: LD_ADDR_EXP 50
12877: PUSH
12878: LD_INT 0
12880: PPUSH
12881: LD_INT 2
12883: PPUSH
12884: CALL_OW 12
12888: ST_TO_ADDR
// def_siberite_detection := 0 ;
12889: LD_ADDR_EXP 51
12893: PUSH
12894: LD_INT 0
12896: ST_TO_ADDR
// def_people_respawning := 0 ;
12897: LD_ADDR_EXP 52
12901: PUSH
12902: LD_INT 0
12904: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
12905: LD_ADDR_EXP 53
12909: PUSH
12910: LD_INT 2
12912: ST_TO_ADDR
// def_siberite_bomb := 0 ;
12913: LD_ADDR_EXP 54
12917: PUSH
12918: LD_INT 0
12920: ST_TO_ADDR
// def_builduptime := 0 ;
12921: LD_ADDR_EXP 55
12925: PUSH
12926: LD_INT 0
12928: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
12929: LD_ADDR_VAR 0 2
12933: PUSH
12934: LD_INT 23
12936: PUSH
12937: LD_INT 20
12939: PUSH
12940: LD_INT 40
12942: PUSH
12943: LD_INT 47
12945: PUSH
12946: LD_INT 46
12948: PUSH
12949: LD_INT 39
12951: PUSH
12952: LD_INT 71
12954: PUSH
12955: LD_INT 34
12957: PUSH
12958: LD_INT 41
12960: PUSH
12961: LD_INT 44
12963: PUSH
12964: LD_INT 17
12966: PUSH
12967: LD_INT 16
12969: PUSH
12970: EMPTY
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
12984: LD_ADDR_VAR 0 3
12988: PUSH
12989: LD_INT 37
12991: PUSH
12992: LD_INT 5
12994: PUSH
12995: LD_INT 13
12997: PUSH
12998: LD_INT 34
13000: PUSH
13001: LD_INT 12
13003: PUSH
13004: LD_INT 15
13006: PUSH
13007: LD_INT 11
13009: PUSH
13010: LD_INT 14
13012: PUSH
13013: LD_INT 29
13015: PUSH
13016: LD_INT 30
13018: PUSH
13019: LD_INT 28
13021: PUSH
13022: LD_INT 24
13024: PUSH
13025: LD_INT 25
13027: PUSH
13028: LD_INT 20
13030: PUSH
13031: LD_INT 21
13033: PUSH
13034: LD_INT 22
13036: PUSH
13037: LD_INT 36
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13059: LD_ADDR_LOC 22
13063: PUSH
13064: EMPTY
13065: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
13066: LD_ADDR_LOC 23
13070: PUSH
13071: LD_INT 14
13073: PUSH
13074: EMPTY
13075: LIST
13076: ST_TO_ADDR
// Banned_Controls := [ ] ;
13077: LD_ADDR_LOC 24
13081: PUSH
13082: EMPTY
13083: ST_TO_ADDR
// Banned_Engines := [ ] ;
13084: LD_ADDR_LOC 25
13088: PUSH
13089: EMPTY
13090: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
13091: LD_ADDR_LOC 20
13095: PUSH
13096: LD_INT 31
13098: PUSH
13099: LD_INT 32
13101: PUSH
13102: EMPTY
13103: LIST
13104: LIST
13105: PUSH
13106: LD_INT 4
13108: PUSH
13109: EMPTY
13110: LIST
13111: PUSH
13112: EMPTY
13113: LIST
13114: LIST
13115: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
13116: LD_ADDR_LOC 21
13120: PUSH
13121: LD_INT 2
13123: PUSH
13124: LD_INT 1
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: ST_TO_ADDR
// for i := 1 to 8 do
13131: LD_ADDR_VAR 0 4
13135: PUSH
13136: DOUBLE
13137: LD_INT 1
13139: DEC
13140: ST_TO_ADDR
13141: LD_INT 8
13143: PUSH
13144: FOR_TO
13145: IFFALSE 13196
// if ( Side_Nations [ i ] = 3 ) then
13147: LD_EXP 19
13151: PUSH
13152: LD_VAR 0 4
13156: ARRAY
13157: PUSH
13158: LD_INT 3
13160: EQUAL
13161: IFFALSE 13194
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
13163: LD_ADDR_EXP 19
13167: PUSH
13168: LD_EXP 19
13172: PPUSH
13173: LD_VAR 0 4
13177: PPUSH
13178: LD_INT 1
13180: PPUSH
13181: LD_INT 2
13183: PPUSH
13184: CALL_OW 12
13188: PPUSH
13189: CALL_OW 1
13193: ST_TO_ADDR
13194: GO 13144
13196: POP
13197: POP
// end ; end ;
13198: GO 13201
13200: POP
// for i := 1 to 8 do
13201: LD_ADDR_VAR 0 4
13205: PUSH
13206: DOUBLE
13207: LD_INT 1
13209: DEC
13210: ST_TO_ADDR
13211: LD_INT 8
13213: PUSH
13214: FOR_TO
13215: IFFALSE 13299
// if Side_Positions [ i ] then
13217: LD_EXP 18
13221: PUSH
13222: LD_VAR 0 4
13226: ARRAY
13227: IFFALSE 13297
// begin for j in Unavailable_Techs do
13229: LD_ADDR_VAR 0 5
13233: PUSH
13234: LD_VAR 0 2
13238: PUSH
13239: FOR_IN
13240: IFFALSE 13261
// SetTech ( j , i , 0 ) ;
13242: LD_VAR 0 5
13246: PPUSH
13247: LD_VAR 0 4
13251: PPUSH
13252: LD_INT 0
13254: PPUSH
13255: CALL_OW 322
13259: GO 13239
13261: POP
13262: POP
// for j in Unavailable_Builds do
13263: LD_ADDR_VAR 0 5
13267: PUSH
13268: LD_VAR 0 3
13272: PUSH
13273: FOR_IN
13274: IFFALSE 13295
// SetRestrict ( j , i , 0 ) ;
13276: LD_VAR 0 5
13280: PPUSH
13281: LD_VAR 0 4
13285: PPUSH
13286: LD_INT 0
13288: PPUSH
13289: CALL_OW 324
13293: GO 13273
13295: POP
13296: POP
// end ;
13297: GO 13214
13299: POP
13300: POP
// end ;
13301: LD_VAR 0 1
13305: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
13306: LD_INT 0
13308: PPUSH
13309: PPUSH
13310: PPUSH
13311: PPUSH
13312: PPUSH
13313: PPUSH
13314: PPUSH
// for i := 1 to Restricted_Builds do
13315: LD_ADDR_VAR 0 2
13319: PUSH
13320: DOUBLE
13321: LD_INT 1
13323: DEC
13324: ST_TO_ADDR
13325: LD_LOC 20
13329: PUSH
13330: FOR_TO
13331: IFFALSE 13641
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
13333: LD_LOC 20
13337: PUSH
13338: LD_VAR 0 2
13342: ARRAY
13343: PUSH
13344: LD_INT 1
13346: ARRAY
13347: PUSH
13348: LD_INT 31
13350: DOUBLE
13351: EQUAL
13352: IFTRUE 13368
13354: LD_INT 32
13356: DOUBLE
13357: EQUAL
13358: IFTRUE 13368
13360: LD_INT 33
13362: DOUBLE
13363: EQUAL
13364: IFTRUE 13368
13366: GO 13379
13368: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
13369: LD_ADDR_VAR 0 6
13373: PUSH
13374: LD_STRING #Turrets
13376: ST_TO_ADDR
13377: GO 13424
13379: LD_INT 4
13381: DOUBLE
13382: EQUAL
13383: IFTRUE 13393
13385: LD_INT 5
13387: DOUBLE
13388: EQUAL
13389: IFTRUE 13393
13391: GO 13404
13393: POP
// btype := #Armouries ; b_Behemoth :
13394: LD_ADDR_VAR 0 6
13398: PUSH
13399: LD_STRING #Armouries
13401: ST_TO_ADDR
13402: GO 13424
13404: LD_INT 37
13406: DOUBLE
13407: EQUAL
13408: IFTRUE 13412
13410: GO 13423
13412: POP
// btype := #Behemoths ; end ;
13413: LD_ADDR_VAR 0 6
13417: PUSH
13418: LD_STRING #Behemoths
13420: ST_TO_ADDR
13421: GO 13424
13423: POP
// list := [ ] ;
13424: LD_ADDR_VAR 0 7
13428: PUSH
13429: EMPTY
13430: ST_TO_ADDR
// for j := 1 to 8 do
13431: LD_ADDR_VAR 0 3
13435: PUSH
13436: DOUBLE
13437: LD_INT 1
13439: DEC
13440: ST_TO_ADDR
13441: LD_INT 8
13443: PUSH
13444: FOR_TO
13445: IFFALSE 13538
// if Side_Positions [ j ] then
13447: LD_EXP 18
13451: PUSH
13452: LD_VAR 0 3
13456: ARRAY
13457: IFFALSE 13536
// begin amount := 0 ;
13459: LD_ADDR_VAR 0 5
13463: PUSH
13464: LD_INT 0
13466: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
13467: LD_ADDR_VAR 0 4
13471: PUSH
13472: LD_LOC 20
13476: PUSH
13477: LD_VAR 0 2
13481: ARRAY
13482: PUSH
13483: FOR_IN
13484: IFFALSE 13532
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
13486: LD_ADDR_VAR 0 5
13490: PUSH
13491: LD_VAR 0 5
13495: PUSH
13496: LD_INT 22
13498: PUSH
13499: LD_VAR 0 3
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: PUSH
13508: LD_INT 30
13510: PUSH
13511: LD_VAR 0 4
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: PPUSH
13524: CALL_OW 69
13528: PLUS
13529: ST_TO_ADDR
13530: GO 13483
13532: POP
13533: POP
// break ;
13534: GO 13538
// end ;
13536: GO 13444
13538: POP
13539: POP
// list := [ ] ;
13540: LD_ADDR_VAR 0 7
13544: PUSH
13545: EMPTY
13546: ST_TO_ADDR
// for j := 1 to 8 do
13547: LD_ADDR_VAR 0 3
13551: PUSH
13552: DOUBLE
13553: LD_INT 1
13555: DEC
13556: ST_TO_ADDR
13557: LD_INT 8
13559: PUSH
13560: FOR_TO
13561: IFFALSE 13581
// list := list ^ amount ;
13563: LD_ADDR_VAR 0 7
13567: PUSH
13568: LD_VAR 0 7
13572: PUSH
13573: LD_VAR 0 5
13577: ADD
13578: ST_TO_ADDR
13579: GO 13560
13581: POP
13582: POP
// Already_Built := Already_Built ^ [ list ] ;
13583: LD_ADDR_LOC 26
13587: PUSH
13588: LD_LOC 26
13592: PUSH
13593: LD_VAR 0 7
13597: PUSH
13598: EMPTY
13599: LIST
13600: ADD
13601: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
13602: LD_ADDR_LOC 27
13606: PUSH
13607: LD_LOC 27
13611: PUSH
13612: LD_VAR 0 6
13616: PUSH
13617: LD_VAR 0 5
13621: PUSH
13622: LD_LOC 21
13626: PUSH
13627: LD_VAR 0 2
13631: ARRAY
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: LIST
13637: ADD
13638: ST_TO_ADDR
// end ;
13639: GO 13330
13641: POP
13642: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13643: LD_ADDR_LOC 28
13647: PUSH
13648: LD_INT 0
13650: PUSH
13651: LD_INT 0
13653: PUSH
13654: LD_INT 0
13656: PUSH
13657: LD_INT 0
13659: PUSH
13660: LD_INT 0
13662: PUSH
13663: LD_INT 0
13665: PUSH
13666: LD_INT 0
13668: PUSH
13669: LD_INT 0
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: ST_TO_ADDR
// if Limits_Info then
13682: LD_LOC 27
13686: IFFALSE 13702
// Limits_Info := #Limits ^ Limits_Info ;
13688: LD_ADDR_LOC 27
13692: PUSH
13693: LD_STRING #Limits
13695: PUSH
13696: LD_LOC 27
13700: ADD
13701: ST_TO_ADDR
// end ;
13702: LD_VAR 0 1
13706: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
13707: LD_INT 0
13709: PPUSH
13710: PPUSH
13711: PPUSH
13712: PPUSH
// for i := 1 to Restricted_Builds do
13713: LD_ADDR_VAR 0 7
13717: PUSH
13718: DOUBLE
13719: LD_INT 1
13721: DEC
13722: ST_TO_ADDR
13723: LD_LOC 20
13727: PUSH
13728: FOR_TO
13729: IFFALSE 14152
// if BType in Restricted_Builds [ i ] then
13731: LD_VAR 0 2
13735: PUSH
13736: LD_LOC 20
13740: PUSH
13741: LD_VAR 0 7
13745: ARRAY
13746: IN
13747: IFFALSE 14150
// begin if old_side then
13749: LD_VAR 0 4
13753: IFFALSE 13879
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
13755: LD_LOC 26
13759: PUSH
13760: LD_VAR 0 7
13764: ARRAY
13765: PUSH
13766: LD_VAR 0 3
13770: ARRAY
13771: PUSH
13772: LD_VAR 0 5
13776: PLUS
13777: PUSH
13778: LD_LOC 21
13782: PUSH
13783: LD_VAR 0 7
13787: ARRAY
13788: GREATER
13789: IFFALSE 13815
// begin SetSide ( un , old_side ) ;
13791: LD_VAR 0 1
13795: PPUSH
13796: LD_VAR 0 4
13800: PPUSH
13801: CALL_OW 235
// count := 0 ;
13805: LD_ADDR_VAR 0 5
13809: PUSH
13810: LD_INT 0
13812: ST_TO_ADDR
// end else
13813: GO 13879
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
13815: LD_ADDR_LOC 26
13819: PUSH
13820: LD_LOC 26
13824: PPUSH
13825: LD_VAR 0 7
13829: PPUSH
13830: LD_LOC 26
13834: PUSH
13835: LD_VAR 0 7
13839: ARRAY
13840: PPUSH
13841: LD_VAR 0 4
13845: PPUSH
13846: LD_LOC 26
13850: PUSH
13851: LD_VAR 0 7
13855: ARRAY
13856: PUSH
13857: LD_VAR 0 4
13861: ARRAY
13862: PUSH
13863: LD_VAR 0 5
13867: MINUS
13868: PPUSH
13869: CALL_OW 1
13873: PPUSH
13874: CALL_OW 1
13878: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
13879: LD_ADDR_LOC 26
13883: PUSH
13884: LD_LOC 26
13888: PPUSH
13889: LD_VAR 0 7
13893: PPUSH
13894: LD_LOC 26
13898: PUSH
13899: LD_VAR 0 7
13903: ARRAY
13904: PPUSH
13905: LD_VAR 0 3
13909: PPUSH
13910: LD_LOC 26
13914: PUSH
13915: LD_VAR 0 7
13919: ARRAY
13920: PUSH
13921: LD_VAR 0 3
13925: ARRAY
13926: PUSH
13927: LD_VAR 0 5
13931: PLUS
13932: PPUSH
13933: CALL_OW 1
13937: PPUSH
13938: CALL_OW 1
13942: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
13943: LD_VAR 0 5
13947: PUSH
13948: LD_INT 0
13950: NONEQUAL
13951: PUSH
13952: LD_VAR 0 3
13956: PUSH
13957: LD_OWVAR 2
13961: EQUAL
13962: AND
13963: IFFALSE 14006
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
13965: LD_ADDR_LOC 27
13969: PUSH
13970: LD_LOC 27
13974: PPUSH
13975: LD_INT 3
13977: PUSH
13978: LD_VAR 0 7
13982: MUL
13983: PPUSH
13984: LD_LOC 26
13988: PUSH
13989: LD_VAR 0 7
13993: ARRAY
13994: PUSH
13995: LD_VAR 0 3
13999: ARRAY
14000: PPUSH
14001: CALL_OW 1
14005: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
14006: LD_LOC 26
14010: PUSH
14011: LD_VAR 0 7
14015: ARRAY
14016: PUSH
14017: LD_VAR 0 3
14021: ARRAY
14022: PUSH
14023: LD_LOC 21
14027: PUSH
14028: LD_VAR 0 7
14032: ARRAY
14033: GREATER
14034: IFFALSE 14061
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
14036: LD_ADDR_LOC 28
14040: PUSH
14041: LD_LOC 28
14045: PPUSH
14046: LD_VAR 0 3
14050: PPUSH
14051: LD_INT 1
14053: PPUSH
14054: CALL_OW 1
14058: ST_TO_ADDR
// end else
14059: GO 14148
// begin for j := 1 to Restricted_Builds do
14061: LD_ADDR_VAR 0 8
14065: PUSH
14066: DOUBLE
14067: LD_INT 1
14069: DEC
14070: ST_TO_ADDR
14071: LD_LOC 20
14075: PUSH
14076: FOR_TO
14077: IFFALSE 14121
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
14079: LD_LOC 26
14083: PUSH
14084: LD_VAR 0 8
14088: ARRAY
14089: PUSH
14090: LD_VAR 0 3
14094: ARRAY
14095: PUSH
14096: LD_LOC 21
14100: PUSH
14101: LD_VAR 0 8
14105: ARRAY
14106: GREATER
14107: IFFALSE 14119
// begin Is_Cheater := true ;
14109: LD_ADDR_VAR 0 9
14113: PUSH
14114: LD_INT 1
14116: ST_TO_ADDR
// break ;
14117: GO 14121
// end ;
14119: GO 14076
14121: POP
14122: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
14123: LD_ADDR_LOC 28
14127: PUSH
14128: LD_LOC 28
14132: PPUSH
14133: LD_VAR 0 3
14137: PPUSH
14138: LD_VAR 0 9
14142: PPUSH
14143: CALL_OW 1
14147: ST_TO_ADDR
// end ; break ;
14148: GO 14152
// end ;
14150: GO 13728
14152: POP
14153: POP
// end ;
14154: LD_VAR 0 6
14158: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
14159: LD_VAR 0 5
14163: PUSH
14164: LD_LOC 22
14168: IN
14169: PUSH
14170: LD_VAR 0 2
14174: PUSH
14175: LD_LOC 23
14179: IN
14180: OR
14181: PUSH
14182: LD_VAR 0 4
14186: PUSH
14187: LD_LOC 24
14191: IN
14192: OR
14193: PUSH
14194: LD_VAR 0 3
14198: PUSH
14199: LD_LOC 25
14203: IN
14204: OR
14205: IFFALSE 14216
// ComCancel ( factory ) ;
14207: LD_VAR 0 1
14211: PPUSH
14212: CALL_OW 127
// end ;
14216: PPOPN 5
14218: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
14219: LD_VAR 0 2
14223: PUSH
14224: LD_LOC 22
14228: IN
14229: IFFALSE 14240
// ComCancel ( building ) ;
14231: LD_VAR 0 1
14235: PPUSH
14236: CALL_OW 127
// end ; end_of_file
14240: PPOPN 2
14242: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
14243: LD_INT 0
14245: PPUSH
14246: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
14247: LD_ADDR_VAR 0 2
14251: PUSH
14252: LD_STRING #Multi1x1-Time
14254: PUSH
14255: LD_OWVAR 1
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
14264: LD_INT 0
14266: PUSH
14267: LD_EXP 15
14271: PUSH
14272: LD_OWVAR 1
14276: MINUS
14277: LESSEQUAL
14278: IFFALSE 14309
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
14280: LD_ADDR_VAR 0 2
14284: PUSH
14285: LD_VAR 0 2
14289: PUSH
14290: LD_STRING #allowedsibbomb
14292: PUSH
14293: LD_EXP 15
14297: PUSH
14298: LD_OWVAR 1
14302: MINUS
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: ADD
14308: ST_TO_ADDR
// if ( ExtraStrings ) then
14309: LD_EXP 59
14313: IFFALSE 14335
// AllStrings := AllStrings ^  ^ ExtraStrings ;
14315: LD_ADDR_VAR 0 2
14319: PUSH
14320: LD_VAR 0 2
14324: PUSH
14325: LD_STRING 
14327: ADD
14328: PUSH
14329: LD_EXP 59
14333: ADD
14334: ST_TO_ADDR
// if ( LimitsStrings ) then
14335: CALL 11083 0 0
14339: IFFALSE 14361
// AllStrings := AllStrings ^  ^ LimitsStrings ;
14341: LD_ADDR_VAR 0 2
14345: PUSH
14346: LD_VAR 0 2
14350: PUSH
14351: LD_STRING 
14353: ADD
14354: PUSH
14355: CALL 11083 0 0
14359: ADD
14360: ST_TO_ADDR
// Display_Strings := AllStrings ;
14361: LD_ADDR_OWVAR 47
14365: PUSH
14366: LD_VAR 0 2
14370: ST_TO_ADDR
// end ;
14371: LD_VAR 0 1
14375: RET
// every 0 0$1 do
14376: GO 14378
14378: DISABLE
// begin ShowTimer ;
14379: CALL 14243 0 0
// enable ;
14383: ENABLE
// end ; end_of_file
14384: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
14385: LD_INT 0
14387: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
14388: LD_VAR 0 1
14392: PPUSH
14393: CALL_OW 255
14397: PUSH
14398: LD_VAR 0 4
14402: EQUAL
14403: IFFALSE 14422
// begin SetAchievement ( ACH_RAD ) ;
14405: LD_STRING ACH_RAD
14407: PPUSH
14408: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
14412: LD_STRING ACH_NL
14414: PPUSH
14415: LD_INT 1
14417: PPUSH
14418: CALL_OW 564
// end end ;
14422: LD_VAR 0 5
14426: RET
// export function SA_Win ( side ) ; begin
14427: LD_INT 0
14429: PPUSH
// case side of 1 :
14430: LD_VAR 0 1
14434: PUSH
14435: LD_INT 1
14437: DOUBLE
14438: EQUAL
14439: IFTRUE 14443
14441: GO 14456
14443: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
14444: LD_STRING ACH_AH
14446: PPUSH
14447: LD_INT 1
14449: PPUSH
14450: CALL_OW 564
14454: GO 14619
14456: LD_INT 2
14458: DOUBLE
14459: EQUAL
14460: IFTRUE 14464
14462: GO 14477
14464: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
14465: LD_STRING ACH_E
14467: PPUSH
14468: LD_INT 1
14470: PPUSH
14471: CALL_OW 564
14475: GO 14619
14477: LD_INT 3
14479: DOUBLE
14480: EQUAL
14481: IFTRUE 14485
14483: GO 14498
14485: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
14486: LD_STRING ACH_OOL
14488: PPUSH
14489: LD_INT 1
14491: PPUSH
14492: CALL_OW 564
14496: GO 14619
14498: LD_INT 1
14500: PUSH
14501: LD_INT 2
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: DOUBLE
14508: EQUAL
14509: IFTRUE 14513
14511: GO 14538
14513: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
14514: LD_STRING ACH_AH
14516: PPUSH
14517: LD_REAL  5.00000000000000E-0001
14520: PPUSH
14521: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
14525: LD_STRING ACH_E
14527: PPUSH
14528: LD_REAL  5.00000000000000E-0001
14531: PPUSH
14532: CALL_OW 564
// end ; [ 2 , 3 ] :
14536: GO 14619
14538: LD_INT 2
14540: PUSH
14541: LD_INT 3
14543: PUSH
14544: EMPTY
14545: LIST
14546: LIST
14547: DOUBLE
14548: EQUAL
14549: IFTRUE 14553
14551: GO 14578
14553: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
14554: LD_STRING ACH_OOL
14556: PPUSH
14557: LD_REAL  5.00000000000000E-0001
14560: PPUSH
14561: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
14565: LD_STRING ACH_E
14567: PPUSH
14568: LD_REAL  5.00000000000000E-0001
14571: PPUSH
14572: CALL_OW 564
// end ; [ 3 , 1 ] :
14576: GO 14619
14578: LD_INT 3
14580: PUSH
14581: LD_INT 1
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: DOUBLE
14588: EQUAL
14589: IFTRUE 14593
14591: GO 14618
14593: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
14594: LD_STRING ACH_AH
14596: PPUSH
14597: LD_REAL  5.00000000000000E-0001
14600: PPUSH
14601: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
14605: LD_STRING ACH_OOL
14607: PPUSH
14608: LD_REAL  5.00000000000000E-0001
14611: PPUSH
14612: CALL_OW 564
// end ; end ;
14616: GO 14619
14618: POP
// end ; end_of_file
14619: LD_VAR 0 2
14623: RET
// export function SetMpTechs ( ) ; var side , i ; begin
14624: LD_INT 0
14626: PPUSH
14627: PPUSH
14628: PPUSH
// for side = 1 to 8 do
14629: LD_ADDR_VAR 0 2
14633: PUSH
14634: DOUBLE
14635: LD_INT 1
14637: DEC
14638: ST_TO_ADDR
14639: LD_INT 8
14641: PUSH
14642: FOR_TO
14643: IFFALSE 14764
// begin for i = 1 to 72 do
14645: LD_ADDR_VAR 0 3
14649: PUSH
14650: DOUBLE
14651: LD_INT 1
14653: DEC
14654: ST_TO_ADDR
14655: LD_INT 72
14657: PUSH
14658: FOR_TO
14659: IFFALSE 14690
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
14661: LD_VAR 0 3
14665: PPUSH
14666: LD_VAR 0 2
14670: PPUSH
14671: LD_INT 0
14673: PPUSH
14674: LD_VAR 0 3
14678: PPUSH
14679: CALL_OW 565
14683: PPUSH
14684: CALL_OW 322
14688: GO 14658
14690: POP
14691: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
14692: LD_INT 73
14694: PPUSH
14695: LD_VAR 0 2
14699: PPUSH
14700: LD_INT 0
14702: PPUSH
14703: LD_INT 25
14705: PPUSH
14706: CALL_OW 565
14710: PPUSH
14711: CALL_OW 322
// for i = 0 to 40 do
14715: LD_ADDR_VAR 0 3
14719: PUSH
14720: DOUBLE
14721: LD_INT 0
14723: DEC
14724: ST_TO_ADDR
14725: LD_INT 40
14727: PUSH
14728: FOR_TO
14729: IFFALSE 14760
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
14731: LD_VAR 0 3
14735: PPUSH
14736: LD_VAR 0 2
14740: PPUSH
14741: LD_INT 1
14743: PPUSH
14744: LD_VAR 0 3
14748: PPUSH
14749: CALL_OW 565
14753: PPUSH
14754: CALL_OW 324
14758: GO 14728
14760: POP
14761: POP
// end ;
14762: GO 14642
14764: POP
14765: POP
// end ;
14766: LD_VAR 0 1
14770: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
14771: LD_INT 0
14773: PPUSH
14774: PPUSH
14775: PPUSH
// for side = 1 to 8 do
14776: LD_ADDR_VAR 0 3
14780: PUSH
14781: DOUBLE
14782: LD_INT 1
14784: DEC
14785: ST_TO_ADDR
14786: LD_INT 8
14788: PUSH
14789: FOR_TO
14790: IFFALSE 18786
// begin for i = 1 to 73 do
14792: LD_ADDR_VAR 0 4
14796: PUSH
14797: DOUBLE
14798: LD_INT 1
14800: DEC
14801: ST_TO_ADDR
14802: LD_INT 73
14804: PUSH
14805: FOR_TO
14806: IFFALSE 14827
// SetTech ( i , side , state_disabled ) ;
14808: LD_VAR 0 4
14812: PPUSH
14813: LD_VAR 0 3
14817: PPUSH
14818: LD_INT 0
14820: PPUSH
14821: CALL_OW 322
14825: GO 14805
14827: POP
14828: POP
// for i = 0 to 40 do
14829: LD_ADDR_VAR 0 4
14833: PUSH
14834: DOUBLE
14835: LD_INT 0
14837: DEC
14838: ST_TO_ADDR
14839: LD_INT 40
14841: PUSH
14842: FOR_TO
14843: IFFALSE 14864
// SetRestrict ( i , side , false ) ;
14845: LD_VAR 0 4
14849: PPUSH
14850: LD_VAR 0 3
14854: PPUSH
14855: LD_INT 0
14857: PPUSH
14858: CALL_OW 324
14862: GO 14842
14864: POP
14865: POP
// case level of 1 :
14866: LD_VAR 0 1
14870: PUSH
14871: LD_INT 1
14873: DOUBLE
14874: EQUAL
14875: IFTRUE 14879
14877: GO 15032
14879: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14880: LD_INT 35
14882: PPUSH
14883: LD_VAR 0 3
14887: PPUSH
14888: LD_INT 1
14890: PPUSH
14891: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14895: LD_INT 45
14897: PPUSH
14898: LD_VAR 0 3
14902: PPUSH
14903: LD_INT 1
14905: PPUSH
14906: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14910: LD_INT 46
14912: PPUSH
14913: LD_VAR 0 3
14917: PPUSH
14918: LD_INT 1
14920: PPUSH
14921: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14925: LD_INT 47
14927: PPUSH
14928: LD_VAR 0 3
14932: PPUSH
14933: LD_INT 1
14935: PPUSH
14936: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14940: LD_INT 0
14942: PPUSH
14943: LD_VAR 0 3
14947: PPUSH
14948: LD_INT 1
14950: PPUSH
14951: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14955: LD_INT 2
14957: PPUSH
14958: LD_VAR 0 3
14962: PPUSH
14963: LD_INT 1
14965: PPUSH
14966: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14970: LD_INT 4
14972: PPUSH
14973: LD_VAR 0 3
14977: PPUSH
14978: LD_INT 1
14980: PPUSH
14981: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14985: LD_INT 6
14987: PPUSH
14988: LD_VAR 0 3
14992: PPUSH
14993: LD_INT 1
14995: PPUSH
14996: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15000: LD_INT 29
15002: PPUSH
15003: LD_VAR 0 3
15007: PPUSH
15008: LD_INT 1
15010: PPUSH
15011: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15015: LD_INT 31
15017: PPUSH
15018: LD_VAR 0 3
15022: PPUSH
15023: LD_INT 1
15025: PPUSH
15026: CALL_OW 324
// end ; 2 :
15030: GO 18784
15032: LD_INT 2
15034: DOUBLE
15035: EQUAL
15036: IFTRUE 15040
15038: GO 15238
15040: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15041: LD_INT 35
15043: PPUSH
15044: LD_VAR 0 3
15048: PPUSH
15049: LD_INT 1
15051: PPUSH
15052: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15056: LD_INT 45
15058: PPUSH
15059: LD_VAR 0 3
15063: PPUSH
15064: LD_INT 1
15066: PPUSH
15067: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15071: LD_INT 46
15073: PPUSH
15074: LD_VAR 0 3
15078: PPUSH
15079: LD_INT 1
15081: PPUSH
15082: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15086: LD_INT 47
15088: PPUSH
15089: LD_VAR 0 3
15093: PPUSH
15094: LD_INT 1
15096: PPUSH
15097: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15101: LD_INT 1
15103: PPUSH
15104: LD_VAR 0 3
15108: PPUSH
15109: LD_INT 1
15111: PPUSH
15112: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15116: LD_INT 2
15118: PPUSH
15119: LD_VAR 0 3
15123: PPUSH
15124: LD_INT 1
15126: PPUSH
15127: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15131: LD_INT 11
15133: PPUSH
15134: LD_VAR 0 3
15138: PPUSH
15139: LD_INT 1
15141: PPUSH
15142: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15146: LD_INT 0
15148: PPUSH
15149: LD_VAR 0 3
15153: PPUSH
15154: LD_INT 1
15156: PPUSH
15157: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15161: LD_INT 2
15163: PPUSH
15164: LD_VAR 0 3
15168: PPUSH
15169: LD_INT 1
15171: PPUSH
15172: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15176: LD_INT 4
15178: PPUSH
15179: LD_VAR 0 3
15183: PPUSH
15184: LD_INT 1
15186: PPUSH
15187: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15191: LD_INT 6
15193: PPUSH
15194: LD_VAR 0 3
15198: PPUSH
15199: LD_INT 1
15201: PPUSH
15202: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15206: LD_INT 29
15208: PPUSH
15209: LD_VAR 0 3
15213: PPUSH
15214: LD_INT 1
15216: PPUSH
15217: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15221: LD_INT 31
15223: PPUSH
15224: LD_VAR 0 3
15228: PPUSH
15229: LD_INT 1
15231: PPUSH
15232: CALL_OW 324
// end ; 3 :
15236: GO 18784
15238: LD_INT 3
15240: DOUBLE
15241: EQUAL
15242: IFTRUE 15246
15244: GO 15699
15246: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15247: LD_INT 35
15249: PPUSH
15250: LD_VAR 0 3
15254: PPUSH
15255: LD_INT 1
15257: PPUSH
15258: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15262: LD_INT 45
15264: PPUSH
15265: LD_VAR 0 3
15269: PPUSH
15270: LD_INT 1
15272: PPUSH
15273: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15277: LD_INT 46
15279: PPUSH
15280: LD_VAR 0 3
15284: PPUSH
15285: LD_INT 1
15287: PPUSH
15288: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15292: LD_INT 47
15294: PPUSH
15295: LD_VAR 0 3
15299: PPUSH
15300: LD_INT 1
15302: PPUSH
15303: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15307: LD_INT 1
15309: PPUSH
15310: LD_VAR 0 3
15314: PPUSH
15315: LD_INT 1
15317: PPUSH
15318: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15322: LD_INT 2
15324: PPUSH
15325: LD_VAR 0 3
15329: PPUSH
15330: LD_INT 1
15332: PPUSH
15333: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15337: LD_INT 11
15339: PPUSH
15340: LD_VAR 0 3
15344: PPUSH
15345: LD_INT 1
15347: PPUSH
15348: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15352: LD_INT 48
15354: PPUSH
15355: LD_VAR 0 3
15359: PPUSH
15360: LD_INT 1
15362: PPUSH
15363: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15367: LD_INT 69
15369: PPUSH
15370: LD_VAR 0 3
15374: PPUSH
15375: LD_INT 1
15377: PPUSH
15378: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15382: LD_INT 39
15384: PPUSH
15385: LD_VAR 0 3
15389: PPUSH
15390: LD_INT 1
15392: PPUSH
15393: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15397: LD_INT 43
15399: PPUSH
15400: LD_VAR 0 3
15404: PPUSH
15405: LD_INT 1
15407: PPUSH
15408: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15412: LD_INT 51
15414: PPUSH
15415: LD_VAR 0 3
15419: PPUSH
15420: LD_INT 1
15422: PPUSH
15423: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15427: LD_INT 6
15429: PPUSH
15430: LD_VAR 0 3
15434: PPUSH
15435: LD_INT 1
15437: PPUSH
15438: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15442: LD_INT 0
15444: PPUSH
15445: LD_VAR 0 3
15449: PPUSH
15450: LD_INT 1
15452: PPUSH
15453: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15457: LD_INT 2
15459: PPUSH
15460: LD_VAR 0 3
15464: PPUSH
15465: LD_INT 1
15467: PPUSH
15468: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
15472: LD_INT 3
15474: PPUSH
15475: LD_VAR 0 3
15479: PPUSH
15480: LD_INT 1
15482: PPUSH
15483: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15487: LD_INT 4
15489: PPUSH
15490: LD_VAR 0 3
15494: PPUSH
15495: LD_INT 1
15497: PPUSH
15498: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15502: LD_INT 6
15504: PPUSH
15505: LD_VAR 0 3
15509: PPUSH
15510: LD_INT 1
15512: PPUSH
15513: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
15517: LD_INT 7
15519: PPUSH
15520: LD_VAR 0 3
15524: PPUSH
15525: LD_INT 1
15527: PPUSH
15528: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
15532: LD_INT 8
15534: PPUSH
15535: LD_VAR 0 3
15539: PPUSH
15540: LD_INT 1
15542: PPUSH
15543: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
15547: LD_INT 10
15549: PPUSH
15550: LD_VAR 0 3
15554: PPUSH
15555: LD_INT 1
15557: PPUSH
15558: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
15562: LD_INT 15
15564: PPUSH
15565: LD_VAR 0 3
15569: PPUSH
15570: LD_INT 1
15572: PPUSH
15573: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
15577: LD_INT 16
15579: PPUSH
15580: LD_VAR 0 3
15584: PPUSH
15585: LD_INT 1
15587: PPUSH
15588: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
15592: LD_INT 17
15594: PPUSH
15595: LD_VAR 0 3
15599: PPUSH
15600: LD_INT 1
15602: PPUSH
15603: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
15607: LD_INT 20
15609: PPUSH
15610: LD_VAR 0 3
15614: PPUSH
15615: LD_INT 1
15617: PPUSH
15618: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
15622: LD_INT 26
15624: PPUSH
15625: LD_VAR 0 3
15629: PPUSH
15630: LD_INT 1
15632: PPUSH
15633: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15637: LD_INT 27
15639: PPUSH
15640: LD_VAR 0 3
15644: PPUSH
15645: LD_INT 1
15647: PPUSH
15648: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15652: LD_INT 29
15654: PPUSH
15655: LD_VAR 0 3
15659: PPUSH
15660: LD_INT 1
15662: PPUSH
15663: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15667: LD_INT 31
15669: PPUSH
15670: LD_VAR 0 3
15674: PPUSH
15675: LD_INT 1
15677: PPUSH
15678: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15682: LD_INT 32
15684: PPUSH
15685: LD_VAR 0 3
15689: PPUSH
15690: LD_INT 1
15692: PPUSH
15693: CALL_OW 324
// end ; 4 :
15697: GO 18784
15699: LD_INT 4
15701: DOUBLE
15702: EQUAL
15703: IFTRUE 15707
15705: GO 16655
15707: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15708: LD_INT 35
15710: PPUSH
15711: LD_VAR 0 3
15715: PPUSH
15716: LD_INT 1
15718: PPUSH
15719: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15723: LD_INT 45
15725: PPUSH
15726: LD_VAR 0 3
15730: PPUSH
15731: LD_INT 1
15733: PPUSH
15734: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15738: LD_INT 46
15740: PPUSH
15741: LD_VAR 0 3
15745: PPUSH
15746: LD_INT 1
15748: PPUSH
15749: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15753: LD_INT 47
15755: PPUSH
15756: LD_VAR 0 3
15760: PPUSH
15761: LD_INT 1
15763: PPUSH
15764: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15768: LD_INT 1
15770: PPUSH
15771: LD_VAR 0 3
15775: PPUSH
15776: LD_INT 1
15778: PPUSH
15779: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15783: LD_INT 2
15785: PPUSH
15786: LD_VAR 0 3
15790: PPUSH
15791: LD_INT 1
15793: PPUSH
15794: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15798: LD_INT 11
15800: PPUSH
15801: LD_VAR 0 3
15805: PPUSH
15806: LD_INT 1
15808: PPUSH
15809: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15813: LD_INT 20
15815: PPUSH
15816: LD_VAR 0 3
15820: PPUSH
15821: LD_INT 1
15823: PPUSH
15824: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15828: LD_INT 48
15830: PPUSH
15831: LD_VAR 0 3
15835: PPUSH
15836: LD_INT 1
15838: PPUSH
15839: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15843: LD_INT 49
15845: PPUSH
15846: LD_VAR 0 3
15850: PPUSH
15851: LD_INT 1
15853: PPUSH
15854: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15858: LD_INT 69
15860: PPUSH
15861: LD_VAR 0 3
15865: PPUSH
15866: LD_INT 1
15868: PPUSH
15869: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15873: LD_INT 39
15875: PPUSH
15876: LD_VAR 0 3
15880: PPUSH
15881: LD_INT 1
15883: PPUSH
15884: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15888: LD_INT 34
15890: PPUSH
15891: LD_VAR 0 3
15895: PPUSH
15896: LD_INT 1
15898: PPUSH
15899: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15903: LD_INT 42
15905: PPUSH
15906: LD_VAR 0 3
15910: PPUSH
15911: LD_INT 1
15913: PPUSH
15914: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15918: LD_INT 44
15920: PPUSH
15921: LD_VAR 0 3
15925: PPUSH
15926: LD_INT 1
15928: PPUSH
15929: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15933: LD_INT 41
15935: PPUSH
15936: LD_VAR 0 3
15940: PPUSH
15941: LD_INT 1
15943: PPUSH
15944: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15948: LD_INT 43
15950: PPUSH
15951: LD_VAR 0 3
15955: PPUSH
15956: LD_INT 1
15958: PPUSH
15959: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15963: LD_INT 70
15965: PPUSH
15966: LD_VAR 0 3
15970: PPUSH
15971: LD_INT 1
15973: PPUSH
15974: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15978: LD_INT 51
15980: PPUSH
15981: LD_VAR 0 3
15985: PPUSH
15986: LD_INT 1
15988: PPUSH
15989: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15993: LD_INT 52
15995: PPUSH
15996: LD_VAR 0 3
16000: PPUSH
16001: LD_INT 1
16003: PPUSH
16004: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16008: LD_INT 6
16010: PPUSH
16011: LD_VAR 0 3
16015: PPUSH
16016: LD_INT 1
16018: PPUSH
16019: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16023: LD_INT 15
16025: PPUSH
16026: LD_VAR 0 3
16030: PPUSH
16031: LD_INT 1
16033: PPUSH
16034: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16038: LD_INT 7
16040: PPUSH
16041: LD_VAR 0 3
16045: PPUSH
16046: LD_INT 1
16048: PPUSH
16049: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16053: LD_INT 12
16055: PPUSH
16056: LD_VAR 0 3
16060: PPUSH
16061: LD_INT 1
16063: PPUSH
16064: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
16068: LD_INT 18
16070: PPUSH
16071: LD_VAR 0 3
16075: PPUSH
16076: LD_INT 1
16078: PPUSH
16079: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
16083: LD_INT 60
16085: PPUSH
16086: LD_VAR 0 3
16090: PPUSH
16091: LD_INT 1
16093: PPUSH
16094: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
16098: LD_INT 9
16100: PPUSH
16101: LD_VAR 0 3
16105: PPUSH
16106: LD_INT 1
16108: PPUSH
16109: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
16113: LD_INT 30
16115: PPUSH
16116: LD_VAR 0 3
16120: PPUSH
16121: LD_INT 1
16123: PPUSH
16124: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
16128: LD_INT 37
16130: PPUSH
16131: LD_VAR 0 3
16135: PPUSH
16136: LD_INT 1
16138: PPUSH
16139: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
16143: LD_INT 5
16145: PPUSH
16146: LD_VAR 0 3
16150: PPUSH
16151: LD_INT 1
16153: PPUSH
16154: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
16158: LD_INT 66
16160: PPUSH
16161: LD_VAR 0 3
16165: PPUSH
16166: LD_INT 1
16168: PPUSH
16169: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
16173: LD_INT 21
16175: PPUSH
16176: LD_VAR 0 3
16180: PPUSH
16181: LD_INT 1
16183: PPUSH
16184: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
16188: LD_INT 22
16190: PPUSH
16191: LD_VAR 0 3
16195: PPUSH
16196: LD_INT 1
16198: PPUSH
16199: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
16203: LD_INT 54
16205: PPUSH
16206: LD_VAR 0 3
16210: PPUSH
16211: LD_INT 1
16213: PPUSH
16214: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16218: LD_INT 0
16220: PPUSH
16221: LD_VAR 0 3
16225: PPUSH
16226: LD_INT 1
16228: PPUSH
16229: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
16233: LD_INT 1
16235: PPUSH
16236: LD_VAR 0 3
16240: PPUSH
16241: LD_INT 1
16243: PPUSH
16244: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16248: LD_INT 2
16250: PPUSH
16251: LD_VAR 0 3
16255: PPUSH
16256: LD_INT 1
16258: PPUSH
16259: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
16263: LD_INT 3
16265: PPUSH
16266: LD_VAR 0 3
16270: PPUSH
16271: LD_INT 1
16273: PPUSH
16274: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16278: LD_INT 4
16280: PPUSH
16281: LD_VAR 0 3
16285: PPUSH
16286: LD_INT 1
16288: PPUSH
16289: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
16293: LD_INT 5
16295: PPUSH
16296: LD_VAR 0 3
16300: PPUSH
16301: LD_INT 1
16303: PPUSH
16304: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16308: LD_INT 6
16310: PPUSH
16311: LD_VAR 0 3
16315: PPUSH
16316: LD_INT 1
16318: PPUSH
16319: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
16323: LD_INT 7
16325: PPUSH
16326: LD_VAR 0 3
16330: PPUSH
16331: LD_INT 1
16333: PPUSH
16334: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
16338: LD_INT 8
16340: PPUSH
16341: LD_VAR 0 3
16345: PPUSH
16346: LD_INT 1
16348: PPUSH
16349: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
16353: LD_INT 10
16355: PPUSH
16356: LD_VAR 0 3
16360: PPUSH
16361: LD_INT 1
16363: PPUSH
16364: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
16368: LD_INT 11
16370: PPUSH
16371: LD_VAR 0 3
16375: PPUSH
16376: LD_INT 1
16378: PPUSH
16379: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
16383: LD_INT 12
16385: PPUSH
16386: LD_VAR 0 3
16390: PPUSH
16391: LD_INT 1
16393: PPUSH
16394: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
16398: LD_INT 13
16400: PPUSH
16401: LD_VAR 0 3
16405: PPUSH
16406: LD_INT 1
16408: PPUSH
16409: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
16413: LD_INT 14
16415: PPUSH
16416: LD_VAR 0 3
16420: PPUSH
16421: LD_INT 1
16423: PPUSH
16424: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
16428: LD_INT 15
16430: PPUSH
16431: LD_VAR 0 3
16435: PPUSH
16436: LD_INT 1
16438: PPUSH
16439: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
16443: LD_INT 16
16445: PPUSH
16446: LD_VAR 0 3
16450: PPUSH
16451: LD_INT 1
16453: PPUSH
16454: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
16458: LD_INT 17
16460: PPUSH
16461: LD_VAR 0 3
16465: PPUSH
16466: LD_INT 1
16468: PPUSH
16469: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
16473: LD_INT 19
16475: PPUSH
16476: LD_VAR 0 3
16480: PPUSH
16481: LD_INT 1
16483: PPUSH
16484: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
16488: LD_INT 20
16490: PPUSH
16491: LD_VAR 0 3
16495: PPUSH
16496: LD_INT 1
16498: PPUSH
16499: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
16503: LD_INT 21
16505: PPUSH
16506: LD_VAR 0 3
16510: PPUSH
16511: LD_INT 1
16513: PPUSH
16514: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
16518: LD_INT 23
16520: PPUSH
16521: LD_VAR 0 3
16525: PPUSH
16526: LD_INT 1
16528: PPUSH
16529: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
16533: LD_INT 26
16535: PPUSH
16536: LD_VAR 0 3
16540: PPUSH
16541: LD_INT 1
16543: PPUSH
16544: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16548: LD_INT 27
16550: PPUSH
16551: LD_VAR 0 3
16555: PPUSH
16556: LD_INT 1
16558: PPUSH
16559: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
16563: LD_INT 28
16565: PPUSH
16566: LD_VAR 0 3
16570: PPUSH
16571: LD_INT 1
16573: PPUSH
16574: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16578: LD_INT 29
16580: PPUSH
16581: LD_VAR 0 3
16585: PPUSH
16586: LD_INT 1
16588: PPUSH
16589: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
16593: LD_INT 30
16595: PPUSH
16596: LD_VAR 0 3
16600: PPUSH
16601: LD_INT 1
16603: PPUSH
16604: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16608: LD_INT 31
16610: PPUSH
16611: LD_VAR 0 3
16615: PPUSH
16616: LD_INT 1
16618: PPUSH
16619: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16623: LD_INT 32
16625: PPUSH
16626: LD_VAR 0 3
16630: PPUSH
16631: LD_INT 1
16633: PPUSH
16634: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
16638: LD_INT 36
16640: PPUSH
16641: LD_VAR 0 3
16645: PPUSH
16646: LD_INT 1
16648: PPUSH
16649: CALL_OW 324
// end ; 5 :
16653: GO 18784
16655: LD_INT 5
16657: DOUBLE
16658: EQUAL
16659: IFTRUE 16663
16661: GO 17776
16663: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16664: LD_INT 35
16666: PPUSH
16667: LD_VAR 0 3
16671: PPUSH
16672: LD_INT 1
16674: PPUSH
16675: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16679: LD_INT 45
16681: PPUSH
16682: LD_VAR 0 3
16686: PPUSH
16687: LD_INT 1
16689: PPUSH
16690: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16694: LD_INT 46
16696: PPUSH
16697: LD_VAR 0 3
16701: PPUSH
16702: LD_INT 1
16704: PPUSH
16705: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16709: LD_INT 47
16711: PPUSH
16712: LD_VAR 0 3
16716: PPUSH
16717: LD_INT 1
16719: PPUSH
16720: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16724: LD_INT 1
16726: PPUSH
16727: LD_VAR 0 3
16731: PPUSH
16732: LD_INT 1
16734: PPUSH
16735: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16739: LD_INT 2
16741: PPUSH
16742: LD_VAR 0 3
16746: PPUSH
16747: LD_INT 1
16749: PPUSH
16750: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16754: LD_INT 11
16756: PPUSH
16757: LD_VAR 0 3
16761: PPUSH
16762: LD_INT 1
16764: PPUSH
16765: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
16769: LD_INT 20
16771: PPUSH
16772: LD_VAR 0 3
16776: PPUSH
16777: LD_INT 1
16779: PPUSH
16780: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16784: LD_INT 48
16786: PPUSH
16787: LD_VAR 0 3
16791: PPUSH
16792: LD_INT 1
16794: PPUSH
16795: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16799: LD_INT 49
16801: PPUSH
16802: LD_VAR 0 3
16806: PPUSH
16807: LD_INT 1
16809: PPUSH
16810: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16814: LD_INT 69
16816: PPUSH
16817: LD_VAR 0 3
16821: PPUSH
16822: LD_INT 1
16824: PPUSH
16825: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16829: LD_INT 39
16831: PPUSH
16832: LD_VAR 0 3
16836: PPUSH
16837: LD_INT 1
16839: PPUSH
16840: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16844: LD_INT 34
16846: PPUSH
16847: LD_VAR 0 3
16851: PPUSH
16852: LD_INT 1
16854: PPUSH
16855: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16859: LD_INT 42
16861: PPUSH
16862: LD_VAR 0 3
16866: PPUSH
16867: LD_INT 1
16869: PPUSH
16870: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16874: LD_INT 44
16876: PPUSH
16877: LD_VAR 0 3
16881: PPUSH
16882: LD_INT 1
16884: PPUSH
16885: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16889: LD_INT 41
16891: PPUSH
16892: LD_VAR 0 3
16896: PPUSH
16897: LD_INT 1
16899: PPUSH
16900: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
16904: LD_INT 40
16906: PPUSH
16907: LD_VAR 0 3
16911: PPUSH
16912: LD_INT 1
16914: PPUSH
16915: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16919: LD_INT 43
16921: PPUSH
16922: LD_VAR 0 3
16926: PPUSH
16927: LD_INT 1
16929: PPUSH
16930: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16934: LD_INT 70
16936: PPUSH
16937: LD_VAR 0 3
16941: PPUSH
16942: LD_INT 1
16944: PPUSH
16945: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16949: LD_INT 51
16951: PPUSH
16952: LD_VAR 0 3
16956: PPUSH
16957: LD_INT 1
16959: PPUSH
16960: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16964: LD_INT 52
16966: PPUSH
16967: LD_VAR 0 3
16971: PPUSH
16972: LD_INT 1
16974: PPUSH
16975: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16979: LD_INT 6
16981: PPUSH
16982: LD_VAR 0 3
16986: PPUSH
16987: LD_INT 1
16989: PPUSH
16990: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16994: LD_INT 15
16996: PPUSH
16997: LD_VAR 0 3
17001: PPUSH
17002: LD_INT 1
17004: PPUSH
17005: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
17009: LD_INT 7
17011: PPUSH
17012: LD_VAR 0 3
17016: PPUSH
17017: LD_INT 1
17019: PPUSH
17020: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17024: LD_INT 12
17026: PPUSH
17027: LD_VAR 0 3
17031: PPUSH
17032: LD_INT 1
17034: PPUSH
17035: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
17039: LD_INT 17
17041: PPUSH
17042: LD_VAR 0 3
17046: PPUSH
17047: LD_INT 1
17049: PPUSH
17050: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17054: LD_INT 18
17056: PPUSH
17057: LD_VAR 0 3
17061: PPUSH
17062: LD_INT 1
17064: PPUSH
17065: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17069: LD_INT 60
17071: PPUSH
17072: LD_VAR 0 3
17076: PPUSH
17077: LD_INT 1
17079: PPUSH
17080: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
17084: LD_INT 32
17086: PPUSH
17087: LD_VAR 0 3
17091: PPUSH
17092: LD_INT 1
17094: PPUSH
17095: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
17099: LD_INT 9
17101: PPUSH
17102: LD_VAR 0 3
17106: PPUSH
17107: LD_INT 1
17109: PPUSH
17110: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
17114: LD_INT 57
17116: PPUSH
17117: LD_VAR 0 3
17121: PPUSH
17122: LD_INT 1
17124: PPUSH
17125: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
17129: LD_INT 30
17131: PPUSH
17132: LD_VAR 0 3
17136: PPUSH
17137: LD_INT 1
17139: PPUSH
17140: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
17144: LD_INT 37
17146: PPUSH
17147: LD_VAR 0 3
17151: PPUSH
17152: LD_INT 1
17154: PPUSH
17155: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
17159: LD_INT 63
17161: PPUSH
17162: LD_VAR 0 3
17166: PPUSH
17167: LD_INT 1
17169: PPUSH
17170: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
17174: LD_INT 3
17176: PPUSH
17177: LD_VAR 0 3
17181: PPUSH
17182: LD_INT 1
17184: PPUSH
17185: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
17189: LD_INT 4
17191: PPUSH
17192: LD_VAR 0 3
17196: PPUSH
17197: LD_INT 1
17199: PPUSH
17200: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
17204: LD_INT 5
17206: PPUSH
17207: LD_VAR 0 3
17211: PPUSH
17212: LD_INT 1
17214: PPUSH
17215: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
17219: LD_INT 66
17221: PPUSH
17222: LD_VAR 0 3
17226: PPUSH
17227: LD_INT 1
17229: PPUSH
17230: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
17234: LD_INT 21
17236: PPUSH
17237: LD_VAR 0 3
17241: PPUSH
17242: LD_INT 1
17244: PPUSH
17245: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
17249: LD_INT 22
17251: PPUSH
17252: LD_VAR 0 3
17256: PPUSH
17257: LD_INT 1
17259: PPUSH
17260: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
17264: LD_INT 19
17266: PPUSH
17267: LD_VAR 0 3
17271: PPUSH
17272: LD_INT 1
17274: PPUSH
17275: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
17279: LD_INT 54
17281: PPUSH
17282: LD_VAR 0 3
17286: PPUSH
17287: LD_INT 1
17289: PPUSH
17290: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
17294: LD_INT 55
17296: PPUSH
17297: LD_VAR 0 3
17301: PPUSH
17302: LD_INT 1
17304: PPUSH
17305: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17309: LD_INT 0
17311: PPUSH
17312: LD_VAR 0 3
17316: PPUSH
17317: LD_INT 1
17319: PPUSH
17320: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
17324: LD_INT 1
17326: PPUSH
17327: LD_VAR 0 3
17331: PPUSH
17332: LD_INT 1
17334: PPUSH
17335: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17339: LD_INT 2
17341: PPUSH
17342: LD_VAR 0 3
17346: PPUSH
17347: LD_INT 1
17349: PPUSH
17350: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
17354: LD_INT 3
17356: PPUSH
17357: LD_VAR 0 3
17361: PPUSH
17362: LD_INT 1
17364: PPUSH
17365: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17369: LD_INT 4
17371: PPUSH
17372: LD_VAR 0 3
17376: PPUSH
17377: LD_INT 1
17379: PPUSH
17380: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
17384: LD_INT 5
17386: PPUSH
17387: LD_VAR 0 3
17391: PPUSH
17392: LD_INT 1
17394: PPUSH
17395: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17399: LD_INT 6
17401: PPUSH
17402: LD_VAR 0 3
17406: PPUSH
17407: LD_INT 1
17409: PPUSH
17410: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
17414: LD_INT 7
17416: PPUSH
17417: LD_VAR 0 3
17421: PPUSH
17422: LD_INT 1
17424: PPUSH
17425: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
17429: LD_INT 8
17431: PPUSH
17432: LD_VAR 0 3
17436: PPUSH
17437: LD_INT 1
17439: PPUSH
17440: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
17444: LD_INT 10
17446: PPUSH
17447: LD_VAR 0 3
17451: PPUSH
17452: LD_INT 1
17454: PPUSH
17455: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
17459: LD_INT 11
17461: PPUSH
17462: LD_VAR 0 3
17466: PPUSH
17467: LD_INT 1
17469: PPUSH
17470: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
17474: LD_INT 12
17476: PPUSH
17477: LD_VAR 0 3
17481: PPUSH
17482: LD_INT 1
17484: PPUSH
17485: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
17489: LD_INT 13
17491: PPUSH
17492: LD_VAR 0 3
17496: PPUSH
17497: LD_INT 1
17499: PPUSH
17500: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
17504: LD_INT 14
17506: PPUSH
17507: LD_VAR 0 3
17511: PPUSH
17512: LD_INT 1
17514: PPUSH
17515: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
17519: LD_INT 15
17521: PPUSH
17522: LD_VAR 0 3
17526: PPUSH
17527: LD_INT 1
17529: PPUSH
17530: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
17534: LD_INT 16
17536: PPUSH
17537: LD_VAR 0 3
17541: PPUSH
17542: LD_INT 1
17544: PPUSH
17545: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
17549: LD_INT 17
17551: PPUSH
17552: LD_VAR 0 3
17556: PPUSH
17557: LD_INT 1
17559: PPUSH
17560: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
17564: LD_INT 18
17566: PPUSH
17567: LD_VAR 0 3
17571: PPUSH
17572: LD_INT 1
17574: PPUSH
17575: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
17579: LD_INT 19
17581: PPUSH
17582: LD_VAR 0 3
17586: PPUSH
17587: LD_INT 1
17589: PPUSH
17590: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
17594: LD_INT 20
17596: PPUSH
17597: LD_VAR 0 3
17601: PPUSH
17602: LD_INT 1
17604: PPUSH
17605: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
17609: LD_INT 21
17611: PPUSH
17612: LD_VAR 0 3
17616: PPUSH
17617: LD_INT 1
17619: PPUSH
17620: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
17624: LD_INT 23
17626: PPUSH
17627: LD_VAR 0 3
17631: PPUSH
17632: LD_INT 1
17634: PPUSH
17635: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
17639: LD_INT 26
17641: PPUSH
17642: LD_VAR 0 3
17646: PPUSH
17647: LD_INT 1
17649: PPUSH
17650: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
17654: LD_INT 27
17656: PPUSH
17657: LD_VAR 0 3
17661: PPUSH
17662: LD_INT 1
17664: PPUSH
17665: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
17669: LD_INT 28
17671: PPUSH
17672: LD_VAR 0 3
17676: PPUSH
17677: LD_INT 1
17679: PPUSH
17680: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17684: LD_INT 29
17686: PPUSH
17687: LD_VAR 0 3
17691: PPUSH
17692: LD_INT 1
17694: PPUSH
17695: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
17699: LD_INT 30
17701: PPUSH
17702: LD_VAR 0 3
17706: PPUSH
17707: LD_INT 1
17709: PPUSH
17710: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17714: LD_INT 31
17716: PPUSH
17717: LD_VAR 0 3
17721: PPUSH
17722: LD_INT 1
17724: PPUSH
17725: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
17729: LD_INT 32
17731: PPUSH
17732: LD_VAR 0 3
17736: PPUSH
17737: LD_INT 1
17739: PPUSH
17740: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
17744: LD_INT 33
17746: PPUSH
17747: LD_VAR 0 3
17751: PPUSH
17752: LD_INT 1
17754: PPUSH
17755: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
17759: LD_INT 36
17761: PPUSH
17762: LD_VAR 0 3
17766: PPUSH
17767: LD_INT 1
17769: PPUSH
17770: CALL_OW 324
// end ; 6 :
17774: GO 18784
17776: LD_INT 6
17778: DOUBLE
17779: EQUAL
17780: IFTRUE 17784
17782: GO 18709
17784: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17785: LD_INT 35
17787: PPUSH
17788: LD_VAR 0 3
17792: PPUSH
17793: LD_INT 1
17795: PPUSH
17796: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17800: LD_INT 45
17802: PPUSH
17803: LD_VAR 0 3
17807: PPUSH
17808: LD_INT 1
17810: PPUSH
17811: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17815: LD_INT 46
17817: PPUSH
17818: LD_VAR 0 3
17822: PPUSH
17823: LD_INT 1
17825: PPUSH
17826: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17830: LD_INT 47
17832: PPUSH
17833: LD_VAR 0 3
17837: PPUSH
17838: LD_INT 1
17840: PPUSH
17841: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17845: LD_INT 1
17847: PPUSH
17848: LD_VAR 0 3
17852: PPUSH
17853: LD_INT 1
17855: PPUSH
17856: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17860: LD_INT 2
17862: PPUSH
17863: LD_VAR 0 3
17867: PPUSH
17868: LD_INT 1
17870: PPUSH
17871: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17875: LD_INT 11
17877: PPUSH
17878: LD_VAR 0 3
17882: PPUSH
17883: LD_INT 1
17885: PPUSH
17886: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17890: LD_INT 20
17892: PPUSH
17893: LD_VAR 0 3
17897: PPUSH
17898: LD_INT 1
17900: PPUSH
17901: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17905: LD_INT 48
17907: PPUSH
17908: LD_VAR 0 3
17912: PPUSH
17913: LD_INT 1
17915: PPUSH
17916: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17920: LD_INT 49
17922: PPUSH
17923: LD_VAR 0 3
17927: PPUSH
17928: LD_INT 1
17930: PPUSH
17931: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
17935: LD_INT 50
17937: PPUSH
17938: LD_VAR 0 3
17942: PPUSH
17943: LD_INT 1
17945: PPUSH
17946: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17950: LD_INT 69
17952: PPUSH
17953: LD_VAR 0 3
17957: PPUSH
17958: LD_INT 1
17960: PPUSH
17961: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17965: LD_INT 39
17967: PPUSH
17968: LD_VAR 0 3
17972: PPUSH
17973: LD_INT 1
17975: PPUSH
17976: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17980: LD_INT 34
17982: PPUSH
17983: LD_VAR 0 3
17987: PPUSH
17988: LD_INT 1
17990: PPUSH
17991: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17995: LD_INT 42
17997: PPUSH
17998: LD_VAR 0 3
18002: PPUSH
18003: LD_INT 1
18005: PPUSH
18006: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
18010: LD_INT 44
18012: PPUSH
18013: LD_VAR 0 3
18017: PPUSH
18018: LD_INT 1
18020: PPUSH
18021: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
18025: LD_INT 41
18027: PPUSH
18028: LD_VAR 0 3
18032: PPUSH
18033: LD_INT 1
18035: PPUSH
18036: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
18040: LD_INT 13
18042: PPUSH
18043: LD_VAR 0 3
18047: PPUSH
18048: LD_INT 1
18050: PPUSH
18051: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
18055: LD_INT 40
18057: PPUSH
18058: LD_VAR 0 3
18062: PPUSH
18063: LD_INT 1
18065: PPUSH
18066: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18070: LD_INT 43
18072: PPUSH
18073: LD_VAR 0 3
18077: PPUSH
18078: LD_INT 1
18080: PPUSH
18081: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
18085: LD_INT 70
18087: PPUSH
18088: LD_VAR 0 3
18092: PPUSH
18093: LD_INT 1
18095: PPUSH
18096: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
18100: LD_INT 23
18102: PPUSH
18103: LD_VAR 0 3
18107: PPUSH
18108: LD_INT 1
18110: PPUSH
18111: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18115: LD_INT 51
18117: PPUSH
18118: LD_VAR 0 3
18122: PPUSH
18123: LD_INT 1
18125: PPUSH
18126: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
18130: LD_INT 52
18132: PPUSH
18133: LD_VAR 0 3
18137: PPUSH
18138: LD_INT 1
18140: PPUSH
18141: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
18145: LD_INT 6
18147: PPUSH
18148: LD_VAR 0 3
18152: PPUSH
18153: LD_INT 1
18155: PPUSH
18156: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
18160: LD_INT 15
18162: PPUSH
18163: LD_VAR 0 3
18167: PPUSH
18168: LD_INT 1
18170: PPUSH
18171: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
18175: LD_INT 7
18177: PPUSH
18178: LD_VAR 0 3
18182: PPUSH
18183: LD_INT 1
18185: PPUSH
18186: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
18190: LD_INT 12
18192: PPUSH
18193: LD_VAR 0 3
18197: PPUSH
18198: LD_INT 1
18200: PPUSH
18201: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
18205: LD_INT 10
18207: PPUSH
18208: LD_VAR 0 3
18212: PPUSH
18213: LD_INT 1
18215: PPUSH
18216: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
18220: LD_INT 17
18222: PPUSH
18223: LD_VAR 0 3
18227: PPUSH
18228: LD_INT 1
18230: PPUSH
18231: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
18235: LD_INT 18
18237: PPUSH
18238: LD_VAR 0 3
18242: PPUSH
18243: LD_INT 1
18245: PPUSH
18246: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
18250: LD_INT 60
18252: PPUSH
18253: LD_VAR 0 3
18257: PPUSH
18258: LD_INT 1
18260: PPUSH
18261: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
18265: LD_INT 61
18267: PPUSH
18268: LD_VAR 0 3
18272: PPUSH
18273: LD_INT 1
18275: PPUSH
18276: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
18280: LD_INT 32
18282: PPUSH
18283: LD_VAR 0 3
18287: PPUSH
18288: LD_INT 1
18290: PPUSH
18291: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
18295: LD_INT 27
18297: PPUSH
18298: LD_VAR 0 3
18302: PPUSH
18303: LD_INT 1
18305: PPUSH
18306: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
18310: LD_INT 36
18312: PPUSH
18313: LD_VAR 0 3
18317: PPUSH
18318: LD_INT 1
18320: PPUSH
18321: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
18325: LD_INT 33
18327: PPUSH
18328: LD_VAR 0 3
18332: PPUSH
18333: LD_INT 1
18335: PPUSH
18336: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
18340: LD_INT 9
18342: PPUSH
18343: LD_VAR 0 3
18347: PPUSH
18348: LD_INT 1
18350: PPUSH
18351: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
18355: LD_INT 38
18357: PPUSH
18358: LD_VAR 0 3
18362: PPUSH
18363: LD_INT 1
18365: PPUSH
18366: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
18370: LD_INT 57
18372: PPUSH
18373: LD_VAR 0 3
18377: PPUSH
18378: LD_INT 1
18380: PPUSH
18381: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
18385: LD_INT 58
18387: PPUSH
18388: LD_VAR 0 3
18392: PPUSH
18393: LD_INT 1
18395: PPUSH
18396: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
18400: LD_INT 28
18402: PPUSH
18403: LD_VAR 0 3
18407: PPUSH
18408: LD_INT 1
18410: PPUSH
18411: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
18415: LD_INT 29
18417: PPUSH
18418: LD_VAR 0 3
18422: PPUSH
18423: LD_INT 1
18425: PPUSH
18426: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18430: LD_INT 30
18432: PPUSH
18433: LD_VAR 0 3
18437: PPUSH
18438: LD_INT 1
18440: PPUSH
18441: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
18445: LD_INT 37
18447: PPUSH
18448: LD_VAR 0 3
18452: PPUSH
18453: LD_INT 1
18455: PPUSH
18456: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
18460: LD_INT 63
18462: PPUSH
18463: LD_VAR 0 3
18467: PPUSH
18468: LD_INT 1
18470: PPUSH
18471: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
18475: LD_INT 64
18477: PPUSH
18478: LD_VAR 0 3
18482: PPUSH
18483: LD_INT 1
18485: PPUSH
18486: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
18490: LD_INT 3
18492: PPUSH
18493: LD_VAR 0 3
18497: PPUSH
18498: LD_INT 1
18500: PPUSH
18501: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
18505: LD_INT 4
18507: PPUSH
18508: LD_VAR 0 3
18512: PPUSH
18513: LD_INT 1
18515: PPUSH
18516: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18520: LD_INT 5
18522: PPUSH
18523: LD_VAR 0 3
18527: PPUSH
18528: LD_INT 1
18530: PPUSH
18531: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
18535: LD_INT 8
18537: PPUSH
18538: LD_VAR 0 3
18542: PPUSH
18543: LD_INT 1
18545: PPUSH
18546: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18550: LD_INT 66
18552: PPUSH
18553: LD_VAR 0 3
18557: PPUSH
18558: LD_INT 1
18560: PPUSH
18561: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
18565: LD_INT 67
18567: PPUSH
18568: LD_VAR 0 3
18572: PPUSH
18573: LD_INT 1
18575: PPUSH
18576: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18580: LD_INT 21
18582: PPUSH
18583: LD_VAR 0 3
18587: PPUSH
18588: LD_INT 1
18590: PPUSH
18591: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18595: LD_INT 22
18597: PPUSH
18598: LD_VAR 0 3
18602: PPUSH
18603: LD_INT 1
18605: PPUSH
18606: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
18610: LD_INT 19
18612: PPUSH
18613: LD_VAR 0 3
18617: PPUSH
18618: LD_INT 1
18620: PPUSH
18621: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
18625: LD_INT 26
18627: PPUSH
18628: LD_VAR 0 3
18632: PPUSH
18633: LD_INT 1
18635: PPUSH
18636: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
18640: LD_INT 54
18642: PPUSH
18643: LD_VAR 0 3
18647: PPUSH
18648: LD_INT 1
18650: PPUSH
18651: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
18655: LD_INT 55
18657: PPUSH
18658: LD_VAR 0 3
18662: PPUSH
18663: LD_INT 1
18665: PPUSH
18666: CALL_OW 322
// for i = 0 to 39 do
18670: LD_ADDR_VAR 0 4
18674: PUSH
18675: DOUBLE
18676: LD_INT 0
18678: DEC
18679: ST_TO_ADDR
18680: LD_INT 39
18682: PUSH
18683: FOR_TO
18684: IFFALSE 18705
// SetRestrict ( i , side , true ) ;
18686: LD_VAR 0 4
18690: PPUSH
18691: LD_VAR 0 3
18695: PPUSH
18696: LD_INT 1
18698: PPUSH
18699: CALL_OW 324
18703: GO 18683
18705: POP
18706: POP
// end ; else
18707: GO 18784
18709: POP
// begin for i = 1 to 73 do
18710: LD_ADDR_VAR 0 4
18714: PUSH
18715: DOUBLE
18716: LD_INT 1
18718: DEC
18719: ST_TO_ADDR
18720: LD_INT 73
18722: PUSH
18723: FOR_TO
18724: IFFALSE 18745
// SetTech ( i , side , state_enabled ) ;
18726: LD_VAR 0 4
18730: PPUSH
18731: LD_VAR 0 3
18735: PPUSH
18736: LD_INT 1
18738: PPUSH
18739: CALL_OW 322
18743: GO 18723
18745: POP
18746: POP
// for i = 0 to 39 do
18747: LD_ADDR_VAR 0 4
18751: PUSH
18752: DOUBLE
18753: LD_INT 0
18755: DEC
18756: ST_TO_ADDR
18757: LD_INT 39
18759: PUSH
18760: FOR_TO
18761: IFFALSE 18782
// SetRestrict ( i , side , true ) ;
18763: LD_VAR 0 4
18767: PPUSH
18768: LD_VAR 0 3
18772: PPUSH
18773: LD_INT 1
18775: PPUSH
18776: CALL_OW 324
18780: GO 18760
18782: POP
18783: POP
// end ; end ; end ;
18784: GO 14789
18786: POP
18787: POP
// end ;
18788: LD_VAR 0 2
18792: RET
