// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_amount_of_siberit , def_public_score , def_siberite_bomb , def_builduptime , def_game_rules , def_sheik , def_mastodont ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id , def_win_rules , heroes , sheik , mastodont ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function read_multiplayer_and_game_parameters ; var i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// if Multiplayer then
   4: LD_OWVAR 4
   8: IFFALSE 72
// begin Game_Type := mp_game_type ;
  10: LD_ADDR_EXP 21
  14: PUSH
  15: LD_OWVAR 6
  19: ST_TO_ADDR
// Your_Side := mp_player_side ;
  20: LD_ADDR_OWVAR 2
  24: PUSH
  25: LD_OWVAR 7
  29: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  30: LD_ADDR_EXP 38
  34: PUSH
  35: LD_OWVAR 17
  39: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  40: LD_ADDR_EXP 35
  44: PUSH
  45: LD_OWVAR 15
  49: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
  50: LD_ADDR_EXP 39
  54: PUSH
  55: LD_OWVAR 16
  59: ST_TO_ADDR
// Teams := mp_teams ;
  60: LD_ADDR_EXP 36
  64: PUSH
  65: LD_OWVAR 12
  69: ST_TO_ADDR
// end else
  70: GO 293
// begin Game_Type := 1 ;
  72: LD_ADDR_EXP 21
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// Your_Side := 3 ;
  80: LD_ADDR_OWVAR 2
  84: PUSH
  85: LD_INT 3
  87: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
  88: LD_ADDR_EXP 38
  92: PUSH
  93: LD_INT 1
  95: PUSH
  96: LD_INT 2
  98: PUSH
  99: LD_INT 3
 101: PUSH
 102: LD_INT 4
 104: PUSH
 105: LD_INT 5
 107: PUSH
 108: LD_INT 6
 110: PUSH
 111: LD_INT 0
 113: PUSH
 114: LD_INT 0
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: LIST
 126: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 127: LD_ADDR_EXP 35
 131: PUSH
 132: LD_INT 1
 134: PUSH
 135: LD_INT 2
 137: PUSH
 138: LD_INT 3
 140: PUSH
 141: LD_INT 4
 143: PUSH
 144: LD_INT 5
 146: PUSH
 147: LD_INT 6
 149: PUSH
 150: LD_INT 0
 152: PUSH
 153: LD_INT 0
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: LIST
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 166: LD_ADDR_EXP 39
 170: PUSH
 171: LD_INT 1
 173: PUSH
 174: LD_INT 2
 176: PUSH
 177: LD_INT 3
 179: PUSH
 180: LD_INT 1
 182: PUSH
 183: LD_INT 2
 185: PUSH
 186: LD_INT 3
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 0
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: ST_TO_ADDR
// Side_Comps := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 205: LD_ADDR_EXP 37
 209: PUSH
 210: LD_INT 0
 212: PUSH
 213: LD_INT 0
 215: PUSH
 216: LD_INT 0
 218: PUSH
 219: LD_INT 0
 221: PUSH
 222: LD_INT 0
 224: PUSH
 225: LD_INT 0
 227: PUSH
 228: LD_INT 0
 230: PUSH
 231: LD_INT 0
 233: PUSH
 234: EMPTY
 235: LIST
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 244: LD_ADDR_EXP 36
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: EMPTY
 253: LIST
 254: PUSH
 255: LD_INT 2
 257: PUSH
 258: EMPTY
 259: LIST
 260: PUSH
 261: LD_INT 3
 263: PUSH
 264: EMPTY
 265: LIST
 266: PUSH
 267: LD_INT 4
 269: PUSH
 270: EMPTY
 271: LIST
 272: PUSH
 273: LD_INT 5
 275: PUSH
 276: EMPTY
 277: LIST
 278: PUSH
 279: LD_INT 6
 281: PUSH
 282: EMPTY
 283: LIST
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: LIST
 289: LIST
 290: LIST
 291: LIST
 292: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 293: LD_ADDR_EXP 40
 297: PUSH
 298: LD_EXP 35
 302: PUSH
 303: LD_INT 0
 305: PUSH
 306: EMPTY
 307: LIST
 308: DIFF
 309: PUSH
 310: LD_INT 1
 312: GREATER
 313: ST_TO_ADDR
// if Multiplayer then
 314: LD_OWVAR 4
 318: IFFALSE 564
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 320: LD_ADDR_EXP 1
 324: PUSH
 325: LD_INT 0
 327: PPUSH
 328: CALL_OW 426
 332: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 333: LD_ADDR_EXP 2
 337: PUSH
 338: LD_INT 1
 340: PPUSH
 341: CALL_OW 426
 345: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 346: LD_ADDR_EXP 3
 350: PUSH
 351: LD_INT 2
 353: PPUSH
 354: CALL_OW 426
 358: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 359: LD_ADDR_EXP 4
 363: PUSH
 364: LD_INT 3
 366: PPUSH
 367: CALL_OW 426
 371: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 372: LD_ADDR_EXP 5
 376: PUSH
 377: LD_INT 4
 379: PPUSH
 380: CALL_OW 426
 384: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 385: LD_ADDR_EXP 6
 389: PUSH
 390: LD_INT 5
 392: PPUSH
 393: CALL_OW 426
 397: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 398: LD_ADDR_EXP 7
 402: PUSH
 403: LD_INT 6
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 411: LD_ADDR_EXP 8
 415: PUSH
 416: LD_INT 10
 418: PPUSH
 419: CALL_OW 426
 423: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 424: LD_ADDR_EXP 9
 428: PUSH
 429: LD_INT 11
 431: PPUSH
 432: CALL_OW 426
 436: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 437: LD_ADDR_EXP 10
 441: PUSH
 442: LD_INT 12
 444: PPUSH
 445: CALL_OW 426
 449: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 450: LD_ADDR_EXP 11
 454: PUSH
 455: LD_INT 13
 457: PPUSH
 458: CALL_OW 426
 462: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 463: LD_ADDR_EXP 12
 467: PUSH
 468: LD_INT 14
 470: PPUSH
 471: CALL_OW 426
 475: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 476: LD_ADDR_EXP 13
 480: PUSH
 481: LD_INT 15
 483: PPUSH
 484: CALL_OW 426
 488: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 489: LD_ADDR_EXP 14
 493: PUSH
 494: LD_INT 16
 496: PPUSH
 497: CALL_OW 426
 501: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 502: LD_ADDR_EXP 15
 506: PUSH
 507: LD_INT 17
 509: PPUSH
 510: CALL_OW 426
 514: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 515: LD_ADDR_EXP 16
 519: PUSH
 520: LD_INT 20
 522: PPUSH
 523: CALL_OW 426
 527: ST_TO_ADDR
// def_game_rules := 0 ;
 528: LD_ADDR_EXP 17
 532: PUSH
 533: LD_INT 0
 535: ST_TO_ADDR
// def_sheik := GetMultiplayerSetting ( 22 ) ;
 536: LD_ADDR_EXP 18
 540: PUSH
 541: LD_INT 22
 543: PPUSH
 544: CALL_OW 426
 548: ST_TO_ADDR
// def_mastodont := GetMultiplayerSetting ( 23 ) ;
 549: LD_ADDR_EXP 19
 553: PUSH
 554: LD_INT 23
 556: PPUSH
 557: CALL_OW 426
 561: ST_TO_ADDR
// end else
 562: GO 720
// begin Randomize ;
 564: CALL_OW 10
// def_base_level := 2 ;
 568: LD_ADDR_EXP 1
 572: PUSH
 573: LD_INT 2
 575: ST_TO_ADDR
// def_amount_of_people := 0 ;
 576: LD_ADDR_EXP 2
 580: PUSH
 581: LD_INT 0
 583: ST_TO_ADDR
// def_skill_level := 1 ;
 584: LD_ADDR_EXP 3
 588: PUSH
 589: LD_INT 1
 591: ST_TO_ADDR
// def_starting_resources := 2 ;
 592: LD_ADDR_EXP 4
 596: PUSH
 597: LD_INT 2
 599: ST_TO_ADDR
// def_shipments_density := 1 ;
 600: LD_ADDR_EXP 5
 604: PUSH
 605: LD_INT 1
 607: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
 608: LD_ADDR_EXP 6
 612: PUSH
 613: LD_INT 1
 615: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
 616: LD_ADDR_EXP 7
 620: PUSH
 621: LD_INT 2
 623: ST_TO_ADDR
// def_shared_vision := 1 ;
 624: LD_ADDR_EXP 8
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// def_morale_flags := 1 ;
 632: LD_ADDR_EXP 9
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// def_siberite_detection := 1 ;
 640: LD_ADDR_EXP 10
 644: PUSH
 645: LD_INT 1
 647: ST_TO_ADDR
// def_people_respawning := 2 ;
 648: LD_ADDR_EXP 11
 652: PUSH
 653: LD_INT 2
 655: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 656: LD_ADDR_EXP 12
 660: PUSH
 661: LD_INT 3
 663: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 664: LD_ADDR_EXP 13
 668: PUSH
 669: LD_INT 0
 671: ST_TO_ADDR
// def_public_score := 0 ;
 672: LD_ADDR_EXP 14
 676: PUSH
 677: LD_INT 0
 679: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 680: LD_ADDR_EXP 15
 684: PUSH
 685: LD_INT 0
 687: ST_TO_ADDR
// def_builduptime := 1 ;
 688: LD_ADDR_EXP 16
 692: PUSH
 693: LD_INT 1
 695: ST_TO_ADDR
// def_game_rules := 0 ;
 696: LD_ADDR_EXP 17
 700: PUSH
 701: LD_INT 0
 703: ST_TO_ADDR
// def_sheik := 0 ;
 704: LD_ADDR_EXP 18
 708: PUSH
 709: LD_INT 0
 711: ST_TO_ADDR
// def_mastodont := 0 ;
 712: LD_ADDR_EXP 19
 716: PUSH
 717: LD_INT 0
 719: ST_TO_ADDR
// end ; if isSGUI then
 720: LD_OWVAR 83
 724: IFFALSE 730
// setMpTechs ( ) ;
 726: CALL 9380 0 0
// if ( Game_Type = 5 ) then
 730: LD_EXP 21
 734: PUSH
 735: LD_INT 5
 737: EQUAL
 738: IFFALSE 767
// begin def_base_level := 1 ;
 740: LD_ADDR_EXP 1
 744: PUSH
 745: LD_INT 1
 747: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 748: LD_ADDR_EXP 6
 752: PUSH
 753: LD_INT 0
 755: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
 756: LD_ADDR_EXP 7
 760: PUSH
 761: LD_INT 0
 763: ST_TO_ADDR
// disable ( 10 ) ;
 764: LD_INT 10
 766: DISABLE_MARKED
// end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 767: LD_ADDR_EXP 22
 771: PUSH
 772: LD_INT 0
 774: PUSH
 775: LD_INT 1
 777: PUSH
 778: LD_INT 1
 780: PUSH
 781: EMPTY
 782: LIST
 783: LIST
 784: LIST
 785: PUSH
 786: LD_EXP 1
 790: PUSH
 791: LD_INT 1
 793: PLUS
 794: ARRAY
 795: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 ] [ def_base_level + 1 ] ;
 796: LD_ADDR_EXP 23
 800: PUSH
 801: LD_INT 0
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: LD_INT 2
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: LIST
 814: PUSH
 815: LD_EXP 1
 819: PUSH
 820: LD_INT 1
 822: PLUS
 823: ARRAY
 824: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 825: LD_ADDR_EXP 24
 829: PUSH
 830: LD_INT 9
 832: PUSH
 833: LD_INT 12
 835: PUSH
 836: LD_INT 15
 838: PUSH
 839: LD_INT 24
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: LIST
 846: LIST
 847: PUSH
 848: LD_EXP 2
 852: PUSH
 853: LD_INT 1
 855: PLUS
 856: ARRAY
 857: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 , 8 ] [ def_skill_level + 1 ] ;
 858: LD_ADDR_EXP 25
 862: PUSH
 863: LD_INT 2
 865: PUSH
 866: LD_INT 3
 868: PUSH
 869: LD_INT 4
 871: PUSH
 872: LD_INT 5
 874: PUSH
 875: LD_INT 8
 877: PUSH
 878: EMPTY
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: LIST
 884: PUSH
 885: LD_EXP 3
 889: PUSH
 890: LD_INT 1
 892: PLUS
 893: ARRAY
 894: ST_TO_ADDR
// if ( Game_Type = 5 ) then
 895: LD_EXP 21
 899: PUSH
 900: LD_INT 5
 902: EQUAL
 903: IFFALSE 1021
// begin starting_resources := [ [ 1000 , 100 , 100 ] , [ 2000 , 200 , 200 ] , [ 5000 , 500 , 500 ] , [ 10000 , 1000 , 1000 ] , [ 25000 , 2500 , 2500 ] , [ 50000 , 5000 , 5000 ] ] [ def_starting_resources + 1 ] ;
 905: LD_ADDR_EXP 27
 909: PUSH
 910: LD_INT 1000
 912: PUSH
 913: LD_INT 100
 915: PUSH
 916: LD_INT 100
 918: PUSH
 919: EMPTY
 920: LIST
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 2000
 926: PUSH
 927: LD_INT 200
 929: PUSH
 930: LD_INT 200
 932: PUSH
 933: EMPTY
 934: LIST
 935: LIST
 936: LIST
 937: PUSH
 938: LD_INT 5000
 940: PUSH
 941: LD_INT 500
 943: PUSH
 944: LD_INT 500
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: PUSH
 952: LD_INT 10000
 954: PUSH
 955: LD_INT 1000
 957: PUSH
 958: LD_INT 1000
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: LIST
 965: PUSH
 966: LD_INT 25000
 968: PUSH
 969: LD_INT 2500
 971: PUSH
 972: LD_INT 2500
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: LIST
 979: PUSH
 980: LD_INT 50000
 982: PUSH
 983: LD_INT 5000
 985: PUSH
 986: LD_INT 5000
 988: PUSH
 989: EMPTY
 990: LIST
 991: LIST
 992: LIST
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: LIST
1000: LIST
1001: PUSH
1002: LD_EXP 4
1006: PUSH
1007: LD_INT 1
1009: PLUS
1010: ARRAY
1011: ST_TO_ADDR
// starting_crates := [ ] ;
1012: LD_ADDR_EXP 26
1016: PUSH
1017: EMPTY
1018: ST_TO_ADDR
// end else
1019: GO 1167
// begin starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1021: LD_ADDR_EXP 27
1025: PUSH
1026: LD_INT 0
1028: PUSH
1029: LD_INT 0
1031: PUSH
1032: LD_INT 0
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: LIST
1039: PUSH
1040: LD_INT 30
1042: PUSH
1043: LD_INT 0
1045: PUSH
1046: LD_INT 0
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: LIST
1053: PUSH
1054: LD_INT 50
1056: PUSH
1057: LD_INT 20
1059: PUSH
1060: LD_INT 0
1062: PUSH
1063: EMPTY
1064: LIST
1065: LIST
1066: LIST
1067: PUSH
1068: LD_INT 80
1070: PUSH
1071: LD_INT 40
1073: PUSH
1074: LD_INT 20
1076: PUSH
1077: EMPTY
1078: LIST
1079: LIST
1080: LIST
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: LD_EXP 4
1092: PUSH
1093: LD_INT 1
1095: PLUS
1096: ARRAY
1097: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1098: LD_ADDR_EXP 26
1102: PUSH
1103: LD_INT 10
1105: PUSH
1106: EMPTY
1107: LIST
1108: PUSH
1109: LD_INT 7
1111: PUSH
1112: LD_INT 14
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: PUSH
1119: LD_INT 6
1121: PUSH
1122: LD_INT 12
1124: PUSH
1125: LD_INT 18
1127: PUSH
1128: EMPTY
1129: LIST
1130: LIST
1131: LIST
1132: PUSH
1133: LD_INT 5
1135: PUSH
1136: LD_INT 10
1138: PUSH
1139: LD_INT 15
1141: PUSH
1142: LD_INT 20
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: LIST
1155: LIST
1156: PUSH
1157: LD_EXP 4
1161: PUSH
1162: LD_INT 1
1164: PLUS
1165: ARRAY
1166: ST_TO_ADDR
// end ; shipments_density := [ 150 , 125 , 100 , 50 ] [ def_shipments_density + 1 ] ;
1167: LD_ADDR_EXP 28
1171: PUSH
1172: LD_INT 150
1174: PUSH
1175: LD_INT 125
1177: PUSH
1178: LD_INT 100
1180: PUSH
1181: LD_INT 50
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: LIST
1188: LIST
1189: PUSH
1190: LD_EXP 5
1194: PUSH
1195: LD_INT 1
1197: PLUS
1198: ARRAY
1199: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1200: LD_ADDR_EXP 32
1204: PUSH
1205: LD_INT 0
1207: PUSH
1208: LD_INT 10500
1210: PUSH
1211: LD_INT 6300
1213: PUSH
1214: EMPTY
1215: LIST
1216: LIST
1217: LIST
1218: PUSH
1219: LD_EXP 11
1223: PUSH
1224: LD_INT 1
1226: PLUS
1227: ARRAY
1228: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1229: LD_ADDR_EXP 33
1233: PUSH
1234: LD_INT 0
1236: PUSH
1237: LD_INT 31500
1239: PUSH
1240: LD_INT 10500
1242: PUSH
1243: EMPTY
1244: LIST
1245: LIST
1246: LIST
1247: PUSH
1248: LD_EXP 11
1252: PUSH
1253: LD_INT 1
1255: PLUS
1256: ARRAY
1257: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1258: LD_ADDR_EXP 30
1262: PUSH
1263: LD_INT 0
1265: PUSH
1266: LD_INT 1
1268: PUSH
1269: LD_INT 2
1271: PUSH
1272: LD_INT 3
1274: PUSH
1275: EMPTY
1276: LIST
1277: LIST
1278: LIST
1279: LIST
1280: PUSH
1281: LD_EXP 12
1285: PUSH
1286: LD_INT 1
1288: PLUS
1289: ARRAY
1290: ST_TO_ADDR
// amount_of_siberit := [ 30 , 50 , 80 , 100 , 130 , 150 , 200 ] [ def_amount_of_siberit + 1 ] ;
1291: LD_ADDR_EXP 31
1295: PUSH
1296: LD_INT 30
1298: PUSH
1299: LD_INT 50
1301: PUSH
1302: LD_INT 80
1304: PUSH
1305: LD_INT 100
1307: PUSH
1308: LD_INT 130
1310: PUSH
1311: LD_INT 150
1313: PUSH
1314: LD_INT 200
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: LIST
1324: LIST
1325: PUSH
1326: LD_EXP 13
1330: PUSH
1331: LD_INT 1
1333: PLUS
1334: ARRAY
1335: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1336: LD_ADDR_EXP 29
1340: PUSH
1341: LD_INT 1
1343: NEG
1344: PUSH
1345: LD_INT 350
1347: PUSH
1348: LD_INT 700
1350: PUSH
1351: LD_INT 1400
1353: PUSH
1354: LD_INT 0
1356: PUSH
1357: EMPTY
1358: LIST
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: PUSH
1364: LD_EXP 9
1368: PUSH
1369: LD_INT 1
1371: PLUS
1372: ARRAY
1373: ST_TO_ADDR
// battle_flags_id := [ ] ;
1374: LD_ADDR_EXP 48
1378: PUSH
1379: EMPTY
1380: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1381: LD_ADDR_EXP 34
1385: PUSH
1386: LD_INT 0
1388: PUSH
1389: LD_INT 1
1391: PUSH
1392: LD_INT 63000
1394: PUSH
1395: LD_INT 126000
1397: PUSH
1398: LD_INT 189000
1400: PUSH
1401: LD_INT 252000
1403: PUSH
1404: EMPTY
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: PUSH
1412: LD_EXP 15
1416: PUSH
1417: LD_INT 1
1419: PLUS
1420: ARRAY
1421: ST_TO_ADDR
// if ( Game_Type = 12 ) then
1422: LD_EXP 21
1426: PUSH
1427: LD_INT 12
1429: EQUAL
1430: IFFALSE 1488
// begin sheik := [ 0 , 1 ] [ def_sheik + 1 ] ;
1432: LD_ADDR_EXP 51
1436: PUSH
1437: LD_INT 0
1439: PUSH
1440: LD_INT 1
1442: PUSH
1443: EMPTY
1444: LIST
1445: LIST
1446: PUSH
1447: LD_EXP 18
1451: PUSH
1452: LD_INT 1
1454: PLUS
1455: ARRAY
1456: ST_TO_ADDR
// mastodont := [ 0 , 1 , 2 ] [ def_mastodont + 1 ] end else
1457: LD_ADDR_EXP 52
1461: PUSH
1462: LD_INT 0
1464: PUSH
1465: LD_INT 1
1467: PUSH
1468: LD_INT 2
1470: PUSH
1471: EMPTY
1472: LIST
1473: LIST
1474: LIST
1475: PUSH
1476: LD_EXP 19
1480: PUSH
1481: LD_INT 1
1483: PLUS
1484: ARRAY
1485: ST_TO_ADDR
1486: GO 1504
// begin sheik := 0 ;
1488: LD_ADDR_EXP 51
1492: PUSH
1493: LD_INT 0
1495: ST_TO_ADDR
// mastodont := 0 ;
1496: LD_ADDR_EXP 52
1500: PUSH
1501: LD_INT 0
1503: ST_TO_ADDR
// end ; end ;
1504: LD_VAR 0 1
1508: RET
// function init_map ; var i , j ; begin
1509: LD_INT 0
1511: PPUSH
1512: PPUSH
1513: PPUSH
// normal_oil_deposits_locations := [ [ 101 , 187 ] , [ 18 , 26 ] , [ 50 , 89 ] , [ 123 , 3 ] , [ 182 , 69 ] , [ 231 , 174 ] ] ;
1514: LD_ADDR_EXP 44
1518: PUSH
1519: LD_INT 101
1521: PUSH
1522: LD_INT 187
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 18
1531: PUSH
1532: LD_INT 26
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 50
1541: PUSH
1542: LD_INT 89
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 123
1551: PUSH
1552: LD_INT 3
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 182
1561: PUSH
1562: LD_INT 69
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 231
1571: PUSH
1572: LD_INT 174
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 101 , 187 ] , [ 108 , 183 ] ] , [ [ 18 , 26 ] , [ 7 , 8 ] ] , [ [ 50 , 89 ] , [ 62 , 99 ] ] , [ [ 123 , 3 ] , [ 149 , 18 ] ] , [ [ 182 , 69 ] , [ 202 , 90 ] ] , [ [ 231 , 174 ] , [ 239 , 164 ] ] ] ;
1587: LD_ADDR_EXP 45
1591: PUSH
1592: LD_INT 101
1594: PUSH
1595: LD_INT 187
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: PUSH
1602: LD_INT 108
1604: PUSH
1605: LD_INT 183
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: PUSH
1616: LD_INT 18
1618: PUSH
1619: LD_INT 26
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PUSH
1626: LD_INT 7
1628: PUSH
1629: LD_INT 8
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: PUSH
1640: LD_INT 50
1642: PUSH
1643: LD_INT 89
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: LD_INT 62
1652: PUSH
1653: LD_INT 99
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 123
1666: PUSH
1667: LD_INT 3
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: PUSH
1674: LD_INT 149
1676: PUSH
1677: LD_INT 18
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: LD_INT 182
1690: PUSH
1691: LD_INT 69
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: PUSH
1698: LD_INT 202
1700: PUSH
1701: LD_INT 90
1703: PUSH
1704: EMPTY
1705: LIST
1706: LIST
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: PUSH
1712: LD_INT 231
1714: PUSH
1715: LD_INT 174
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: PUSH
1722: LD_INT 239
1724: PUSH
1725: LD_INT 164
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 96 , 185 ] , [ 21 , 29 ] , [ 50 , 85 ] , [ 128 , 2 ] , [ 186 , 72 ] , [ 234 , 174 ] ] ;
1744: LD_ADDR_EXP 46
1748: PUSH
1749: LD_INT 96
1751: PUSH
1752: LD_INT 185
1754: PUSH
1755: EMPTY
1756: LIST
1757: LIST
1758: PUSH
1759: LD_INT 21
1761: PUSH
1762: LD_INT 29
1764: PUSH
1765: EMPTY
1766: LIST
1767: LIST
1768: PUSH
1769: LD_INT 50
1771: PUSH
1772: LD_INT 85
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: PUSH
1779: LD_INT 128
1781: PUSH
1782: LD_INT 2
1784: PUSH
1785: EMPTY
1786: LIST
1787: LIST
1788: PUSH
1789: LD_INT 186
1791: PUSH
1792: LD_INT 72
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: PUSH
1799: LD_INT 234
1801: PUSH
1802: LD_INT 174
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 96 , 185 ] , [ 109 , 179 ] ] , [ [ 21 , 29 ] , [ 9 , 5 ] ] , [ [ 50 , 85 ] , [ 66 , 102 ] ] , [ [ 128 , 2 ] , [ 152 , 15 ] ] , [ [ 186 , 72 ] , [ 200 , 86 ] ] , [ [ 234 , 174 ] , [ 237 , 160 ] ] ] ;
1817: LD_ADDR_EXP 47
1821: PUSH
1822: LD_INT 96
1824: PUSH
1825: LD_INT 185
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: LD_INT 109
1834: PUSH
1835: LD_INT 179
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PUSH
1842: EMPTY
1843: LIST
1844: LIST
1845: PUSH
1846: LD_INT 21
1848: PUSH
1849: LD_INT 29
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: PUSH
1856: LD_INT 9
1858: PUSH
1859: LD_INT 5
1861: PUSH
1862: EMPTY
1863: LIST
1864: LIST
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: PUSH
1870: LD_INT 50
1872: PUSH
1873: LD_INT 85
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: PUSH
1880: LD_INT 66
1882: PUSH
1883: LD_INT 102
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: PUSH
1894: LD_INT 128
1896: PUSH
1897: LD_INT 2
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: PUSH
1904: LD_INT 152
1906: PUSH
1907: LD_INT 15
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: PUSH
1918: LD_INT 186
1920: PUSH
1921: LD_INT 72
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: PUSH
1928: LD_INT 200
1930: PUSH
1931: LD_INT 86
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 234
1944: PUSH
1945: LD_INT 174
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: PUSH
1952: LD_INT 237
1954: PUSH
1955: LD_INT 160
1957: PUSH
1958: EMPTY
1959: LIST
1960: LIST
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: ST_TO_ADDR
// depot_def := [ [ 100 , 179 , 0 ] , [ 21 , 18 , 2 ] , [ 65 , 90 , 2 ] , [ 132 , 11 , 1 ] , [ 190 , 82 , 4 ] , [ 230 , 164 , 4 ] ] ;
1974: LD_ADDR_EXP 41
1978: PUSH
1979: LD_INT 100
1981: PUSH
1982: LD_INT 179
1984: PUSH
1985: LD_INT 0
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: PUSH
1993: LD_INT 21
1995: PUSH
1996: LD_INT 18
1998: PUSH
1999: LD_INT 2
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 65
2009: PUSH
2010: LD_INT 90
2012: PUSH
2013: LD_INT 2
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 132
2023: PUSH
2024: LD_INT 11
2026: PUSH
2027: LD_INT 1
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: PUSH
2035: LD_INT 190
2037: PUSH
2038: LD_INT 82
2040: PUSH
2041: LD_INT 4
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: LIST
2048: PUSH
2049: LD_INT 230
2051: PUSH
2052: LD_INT 164
2054: PUSH
2055: LD_INT 4
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: ST_TO_ADDR
// for i in depot_def do
2071: LD_ADDR_VAR 0 2
2075: PUSH
2076: LD_EXP 41
2080: PUSH
2081: FOR_IN
2082: IFFALSE 2156
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 10 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 10 ) ] ] ;
2084: LD_ADDR_EXP 43
2088: PUSH
2089: LD_EXP 43
2093: PUSH
2094: LD_VAR 0 2
2098: PUSH
2099: LD_INT 1
2101: ARRAY
2102: PPUSH
2103: LD_VAR 0 2
2107: PUSH
2108: LD_INT 3
2110: ARRAY
2111: PPUSH
2112: LD_INT 10
2114: PPUSH
2115: CALL_OW 272
2119: PUSH
2120: LD_VAR 0 2
2124: PUSH
2125: LD_INT 2
2127: ARRAY
2128: PPUSH
2129: LD_VAR 0 2
2133: PUSH
2134: LD_INT 3
2136: ARRAY
2137: PPUSH
2138: LD_INT 10
2140: PPUSH
2141: CALL_OW 273
2145: PUSH
2146: EMPTY
2147: LIST
2148: LIST
2149: PUSH
2150: EMPTY
2151: LIST
2152: ADD
2153: ST_TO_ADDR
2154: GO 2081
2156: POP
2157: POP
// breastworks_def := [ [ [ 88 , 154 , 3 ] , [ 105 , 167 , 4 ] ] , [ [ 27 , 32 , 5 ] , [ 40 , 24 , 4 ] ] , [ [ 78 , 102 , 5 ] , [ 74 , 84 , 3 ] ] , [ [ 128 , 20 , 0 ] , [ 122 , 6 , 1 ] ] , [ [ 185 , 92 , 0 ] , [ 175 , 73 , 1 ] ] , [ [ 219 , 171 , 1 ] , [ 219 , 151 , 2 ] ] ] ;
2158: LD_ADDR_EXP 42
2162: PUSH
2163: LD_INT 88
2165: PUSH
2166: LD_INT 154
2168: PUSH
2169: LD_INT 3
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: LIST
2176: PUSH
2177: LD_INT 105
2179: PUSH
2180: LD_INT 167
2182: PUSH
2183: LD_INT 4
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: LIST
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 27
2197: PUSH
2198: LD_INT 32
2200: PUSH
2201: LD_INT 5
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: LIST
2208: PUSH
2209: LD_INT 40
2211: PUSH
2212: LD_INT 24
2214: PUSH
2215: LD_INT 4
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: LIST
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: PUSH
2227: LD_INT 78
2229: PUSH
2230: LD_INT 102
2232: PUSH
2233: LD_INT 5
2235: PUSH
2236: EMPTY
2237: LIST
2238: LIST
2239: LIST
2240: PUSH
2241: LD_INT 74
2243: PUSH
2244: LD_INT 84
2246: PUSH
2247: LD_INT 3
2249: PUSH
2250: EMPTY
2251: LIST
2252: LIST
2253: LIST
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 128
2261: PUSH
2262: LD_INT 20
2264: PUSH
2265: LD_INT 0
2267: PUSH
2268: EMPTY
2269: LIST
2270: LIST
2271: LIST
2272: PUSH
2273: LD_INT 122
2275: PUSH
2276: LD_INT 6
2278: PUSH
2279: LD_INT 1
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: LIST
2286: PUSH
2287: EMPTY
2288: LIST
2289: LIST
2290: PUSH
2291: LD_INT 185
2293: PUSH
2294: LD_INT 92
2296: PUSH
2297: LD_INT 0
2299: PUSH
2300: EMPTY
2301: LIST
2302: LIST
2303: LIST
2304: PUSH
2305: LD_INT 175
2307: PUSH
2308: LD_INT 73
2310: PUSH
2311: LD_INT 1
2313: PUSH
2314: EMPTY
2315: LIST
2316: LIST
2317: LIST
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PUSH
2323: LD_INT 219
2325: PUSH
2326: LD_INT 171
2328: PUSH
2329: LD_INT 1
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: LIST
2336: PUSH
2337: LD_INT 219
2339: PUSH
2340: LD_INT 151
2342: PUSH
2343: LD_INT 2
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: LIST
2350: PUSH
2351: EMPTY
2352: LIST
2353: LIST
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: LIST
2359: LIST
2360: LIST
2361: LIST
2362: ST_TO_ADDR
// for i = 1 to Side_Positions do
2363: LD_ADDR_VAR 0 2
2367: PUSH
2368: DOUBLE
2369: LD_INT 1
2371: DEC
2372: ST_TO_ADDR
2373: LD_EXP 38
2377: PUSH
2378: FOR_TO
2379: IFFALSE 2509
// begin if not Side_Positions [ i ] then
2381: LD_EXP 38
2385: PUSH
2386: LD_VAR 0 2
2390: ARRAY
2391: NOT
2392: IFFALSE 2396
// continue ;
2394: GO 2378
// if def_extra_oil_deposits then
2396: LD_EXP 6
2400: IFFALSE 2458
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2402: LD_ADDR_VAR 0 3
2406: PUSH
2407: LD_EXP 45
2411: PUSH
2412: LD_EXP 38
2416: PUSH
2417: LD_VAR 0 2
2421: ARRAY
2422: ARRAY
2423: PUSH
2424: FOR_IN
2425: IFFALSE 2454
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2427: LD_VAR 0 3
2431: PUSH
2432: LD_INT 1
2434: ARRAY
2435: PPUSH
2436: LD_VAR 0 3
2440: PUSH
2441: LD_INT 2
2443: ARRAY
2444: PPUSH
2445: LD_INT 2
2447: PPUSH
2448: CALL_OW 62
2452: GO 2424
2454: POP
2455: POP
2456: GO 2507
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2458: LD_EXP 44
2462: PUSH
2463: LD_EXP 38
2467: PUSH
2468: LD_VAR 0 2
2472: ARRAY
2473: ARRAY
2474: PUSH
2475: LD_INT 1
2477: ARRAY
2478: PPUSH
2479: LD_EXP 44
2483: PUSH
2484: LD_EXP 38
2488: PUSH
2489: LD_VAR 0 2
2493: ARRAY
2494: ARRAY
2495: PUSH
2496: LD_INT 2
2498: ARRAY
2499: PPUSH
2500: LD_INT 2
2502: PPUSH
2503: CALL_OW 62
// end ;
2507: GO 2378
2509: POP
2510: POP
// if def_extra_sib_deposits then
2511: LD_EXP 7
2515: IFFALSE 2669
// for i = 1 to Side_Positions do
2517: LD_ADDR_VAR 0 2
2521: PUSH
2522: DOUBLE
2523: LD_INT 1
2525: DEC
2526: ST_TO_ADDR
2527: LD_EXP 38
2531: PUSH
2532: FOR_TO
2533: IFFALSE 2667
// begin if not Side_Positions [ i ] then
2535: LD_EXP 38
2539: PUSH
2540: LD_VAR 0 2
2544: ARRAY
2545: NOT
2546: IFFALSE 2550
// continue ;
2548: GO 2532
// if def_extra_sib_deposits = 2 then
2550: LD_EXP 7
2554: PUSH
2555: LD_INT 2
2557: EQUAL
2558: IFFALSE 2616
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
2560: LD_ADDR_VAR 0 3
2564: PUSH
2565: LD_EXP 47
2569: PUSH
2570: LD_EXP 38
2574: PUSH
2575: LD_VAR 0 2
2579: ARRAY
2580: ARRAY
2581: PUSH
2582: FOR_IN
2583: IFFALSE 2612
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2585: LD_VAR 0 3
2589: PUSH
2590: LD_INT 1
2592: ARRAY
2593: PPUSH
2594: LD_VAR 0 3
2598: PUSH
2599: LD_INT 2
2601: ARRAY
2602: PPUSH
2603: LD_INT 3
2605: PPUSH
2606: CALL_OW 62
2610: GO 2582
2612: POP
2613: POP
2614: GO 2665
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2616: LD_EXP 46
2620: PUSH
2621: LD_EXP 38
2625: PUSH
2626: LD_VAR 0 2
2630: ARRAY
2631: ARRAY
2632: PUSH
2633: LD_INT 1
2635: ARRAY
2636: PPUSH
2637: LD_EXP 46
2641: PUSH
2642: LD_EXP 38
2646: PUSH
2647: LD_VAR 0 2
2651: ARRAY
2652: ARRAY
2653: PUSH
2654: LD_INT 2
2656: ARRAY
2657: PPUSH
2658: LD_INT 3
2660: PPUSH
2661: CALL_OW 62
// end ;
2665: GO 2532
2667: POP
2668: POP
// end ;
2669: LD_VAR 0 1
2673: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2674: LD_INT 0
2676: PPUSH
2677: PPUSH
2678: PPUSH
// if not Team_Game then
2679: LD_EXP 40
2683: NOT
2684: IFFALSE 2782
// begin for i = 1 to 8 do
2686: LD_ADDR_VAR 0 2
2690: PUSH
2691: DOUBLE
2692: LD_INT 1
2694: DEC
2695: ST_TO_ADDR
2696: LD_INT 8
2698: PUSH
2699: FOR_TO
2700: IFFALSE 2778
// for j = 1 to 8 do
2702: LD_ADDR_VAR 0 3
2706: PUSH
2707: DOUBLE
2708: LD_INT 1
2710: DEC
2711: ST_TO_ADDR
2712: LD_INT 8
2714: PUSH
2715: FOR_TO
2716: IFFALSE 2774
// if i <> j then
2718: LD_VAR 0 2
2722: PUSH
2723: LD_VAR 0 3
2727: NONEQUAL
2728: IFFALSE 2752
// SetAttitude ( i , j , att_neutral , true ) else
2730: LD_VAR 0 2
2734: PPUSH
2735: LD_VAR 0 3
2739: PPUSH
2740: LD_INT 0
2742: PPUSH
2743: LD_INT 1
2745: PPUSH
2746: CALL_OW 80
2750: GO 2772
// SetAttitude ( i , j , att_friend , true ) ;
2752: LD_VAR 0 2
2756: PPUSH
2757: LD_VAR 0 3
2761: PPUSH
2762: LD_INT 1
2764: PPUSH
2765: LD_INT 1
2767: PPUSH
2768: CALL_OW 80
2772: GO 2715
2774: POP
2775: POP
2776: GO 2699
2778: POP
2779: POP
// end else
2780: GO 2957
// begin if def_shared_vision then
2782: LD_EXP 8
2786: IFFALSE 2851
// begin for i in Teams do
2788: LD_ADDR_VAR 0 2
2792: PUSH
2793: LD_EXP 36
2797: PUSH
2798: FOR_IN
2799: IFFALSE 2849
// for j = 2 to i do
2801: LD_ADDR_VAR 0 3
2805: PUSH
2806: DOUBLE
2807: LD_INT 2
2809: DEC
2810: ST_TO_ADDR
2811: LD_VAR 0 2
2815: PUSH
2816: FOR_TO
2817: IFFALSE 2845
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2819: LD_VAR 0 2
2823: PUSH
2824: LD_VAR 0 3
2828: ARRAY
2829: PPUSH
2830: LD_VAR 0 2
2834: PUSH
2835: LD_INT 1
2837: ARRAY
2838: PPUSH
2839: CALL_OW 343
2843: GO 2816
2845: POP
2846: POP
2847: GO 2798
2849: POP
2850: POP
// end ; for i = 1 to 8 do
2851: LD_ADDR_VAR 0 2
2855: PUSH
2856: DOUBLE
2857: LD_INT 1
2859: DEC
2860: ST_TO_ADDR
2861: LD_INT 8
2863: PUSH
2864: FOR_TO
2865: IFFALSE 2955
// for j = 1 to 8 do
2867: LD_ADDR_VAR 0 3
2871: PUSH
2872: DOUBLE
2873: LD_INT 1
2875: DEC
2876: ST_TO_ADDR
2877: LD_INT 8
2879: PUSH
2880: FOR_TO
2881: IFFALSE 2951
// if Side_Teams [ i ] = Side_Teams [ j ] then
2883: LD_EXP 35
2887: PUSH
2888: LD_VAR 0 2
2892: ARRAY
2893: PUSH
2894: LD_EXP 35
2898: PUSH
2899: LD_VAR 0 3
2903: ARRAY
2904: EQUAL
2905: IFFALSE 2929
// SetAttitude ( i , j , att_friend , true ) else
2907: LD_VAR 0 2
2911: PPUSH
2912: LD_VAR 0 3
2916: PPUSH
2917: LD_INT 1
2919: PPUSH
2920: LD_INT 1
2922: PPUSH
2923: CALL_OW 80
2927: GO 2949
// SetAttitude ( i , j , att_enemy , true ) ;
2929: LD_VAR 0 2
2933: PPUSH
2934: LD_VAR 0 3
2938: PPUSH
2939: LD_INT 2
2941: PPUSH
2942: LD_INT 1
2944: PPUSH
2945: CALL_OW 80
2949: GO 2880
2951: POP
2952: POP
2953: GO 2864
2955: POP
2956: POP
// end ; end ;
2957: LD_VAR 0 1
2961: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2962: LD_INT 0
2964: PPUSH
2965: PPUSH
2966: PPUSH
2967: PPUSH
// result := [ ] ;
2968: LD_ADDR_VAR 0 7
2972: PUSH
2973: EMPTY
2974: ST_TO_ADDR
// for i := 1 to count do
2975: LD_ADDR_VAR 0 8
2979: PUSH
2980: DOUBLE
2981: LD_INT 1
2983: DEC
2984: ST_TO_ADDR
2985: LD_VAR 0 1
2989: PUSH
2990: FOR_TO
2991: IFFALSE 3441
// begin uc_direction := Rand ( 0 , 5 ) ;
2993: LD_ADDR_OWVAR 24
2997: PUSH
2998: LD_INT 0
3000: PPUSH
3001: LD_INT 5
3003: PPUSH
3004: CALL_OW 12
3008: ST_TO_ADDR
// if commander then
3009: LD_LOC 1
3013: IFFALSE 3154
// begin hc_name := mp_sides_players_names [ uc_side ] ;
3015: LD_ADDR_OWVAR 26
3019: PUSH
3020: LD_OWVAR 19
3024: PUSH
3025: LD_OWVAR 20
3029: ARRAY
3030: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3031: LD_INT 1
3033: PPUSH
3034: LD_INT 2
3036: PPUSH
3037: CALL_OW 12
3041: PPUSH
3042: LD_VAR 0 2
3046: PPUSH
3047: LD_EXP 25
3051: PUSH
3052: LD_INT 2
3054: PLUS
3055: PPUSH
3056: CALL_OW 380
// hc_importance := 105 ;
3060: LD_ADDR_OWVAR 32
3064: PUSH
3065: LD_INT 105
3067: ST_TO_ADDR
// commander := false ;
3068: LD_ADDR_LOC 1
3072: PUSH
3073: LD_INT 0
3075: ST_TO_ADDR
// if Multiplayer then
3076: LD_OWVAR 4
3080: IFFALSE 3152
// begin if sheik then
3082: LD_EXP 51
3086: IFFALSE 3114
// begin hc_gallery :=  ;
3088: LD_ADDR_OWVAR 33
3092: PUSH
3093: LD_STRING 
3095: ST_TO_ADDR
// hc_class := class_desert_warior ;
3096: LD_ADDR_OWVAR 28
3100: PUSH
3101: LD_INT 11
3103: ST_TO_ADDR
// hc_sex := sex_male ;
3104: LD_ADDR_OWVAR 27
3108: PUSH
3109: LD_INT 1
3111: ST_TO_ADDR
// end else
3112: GO 3152
// begin hc_gallery := MULTIAVATARS ;
3114: LD_ADDR_OWVAR 33
3118: PUSH
3119: LD_STRING MULTIAVATARS
3121: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3122: LD_ADDR_OWVAR 34
3126: PUSH
3127: LD_OWVAR 20
3131: PPUSH
3132: CALL_OW 525
3136: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3137: LD_ADDR_OWVAR 27
3141: PUSH
3142: LD_OWVAR 20
3146: PPUSH
3147: CALL_OW 526
3151: ST_TO_ADDR
// end ; end ; end else
3152: GO 3217
// begin hc_name :=  ;
3154: LD_ADDR_OWVAR 26
3158: PUSH
3159: LD_STRING 
3161: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3162: LD_INT 1
3164: PPUSH
3165: LD_INT 2
3167: PPUSH
3168: CALL_OW 12
3172: PPUSH
3173: LD_VAR 0 2
3177: PPUSH
3178: LD_EXP 25
3182: PPUSH
3183: CALL_OW 380
// hc_importance := 0 ;
3187: LD_ADDR_OWVAR 32
3191: PUSH
3192: LD_INT 0
3194: ST_TO_ADDR
// if Multiplayer then
3195: LD_OWVAR 4
3199: IFFALSE 3217
// begin hc_gallery :=  ;
3201: LD_ADDR_OWVAR 33
3205: PUSH
3206: LD_STRING 
3208: ST_TO_ADDR
// hc_face_number := 0 ;
3209: LD_ADDR_OWVAR 34
3213: PUSH
3214: LD_INT 0
3216: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3217: LD_ADDR_VAR 0 10
3221: PUSH
3222: CALL_OW 44
3226: ST_TO_ADDR
// if global_defined then
3227: LD_LOC 3
3231: IFFALSE 3371
// begin if ( cl = class_soldier ) then
3233: LD_VAR 0 2
3237: PUSH
3238: LD_INT 1
3240: EQUAL
3241: IFFALSE 3261
// j := i + soldiers_created else
3243: LD_ADDR_VAR 0 9
3247: PUSH
3248: LD_VAR 0 8
3252: PUSH
3253: LD_LOC 4
3257: PLUS
3258: ST_TO_ADDR
3259: GO 3271
// j := i ;
3261: LD_ADDR_VAR 0 9
3265: PUSH
3266: LD_VAR 0 8
3270: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3271: LD_LOC 2
3275: PUSH
3276: LD_VAR 0 2
3280: ARRAY
3281: PUSH
3282: LD_VAR 0 9
3286: ARRAY
3287: PPUSH
3288: LD_VAR 0 10
3292: PPUSH
3293: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3297: LD_VAR 0 10
3301: PPUSH
3302: LD_INT 2
3304: PPUSH
3305: LD_LOC 2
3309: PUSH
3310: LD_VAR 0 2
3314: ARRAY
3315: PUSH
3316: LD_VAR 0 9
3320: ARRAY
3321: PPUSH
3322: LD_INT 2
3324: PPUSH
3325: CALL_OW 260
3329: PPUSH
3330: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3334: LD_VAR 0 10
3338: PPUSH
3339: LD_INT 1
3341: PPUSH
3342: LD_LOC 2
3346: PUSH
3347: LD_VAR 0 2
3351: ARRAY
3352: PUSH
3353: LD_VAR 0 9
3357: ARRAY
3358: PPUSH
3359: LD_INT 1
3361: PPUSH
3362: CALL_OW 260
3366: PPUSH
3367: CALL_OW 239
// end ; if building then
3371: LD_VAR 0 6
3375: IFFALSE 3393
// PlaceHumanInUnit ( un , building ) else
3377: LD_VAR 0 10
3381: PPUSH
3382: LD_VAR 0 6
3386: PPUSH
3387: CALL_OW 52
3391: GO 3420
// PlaceUnitXYR ( un , x , y , r , false ) ;
3393: LD_VAR 0 10
3397: PPUSH
3398: LD_VAR 0 3
3402: PPUSH
3403: LD_VAR 0 4
3407: PPUSH
3408: LD_VAR 0 5
3412: PPUSH
3413: LD_INT 0
3415: PPUSH
3416: CALL_OW 50
// result := result ^ [ un ] ;
3420: LD_ADDR_VAR 0 7
3424: PUSH
3425: LD_VAR 0 7
3429: PUSH
3430: LD_VAR 0 10
3434: PUSH
3435: EMPTY
3436: LIST
3437: ADD
3438: ST_TO_ADDR
// end ;
3439: GO 2990
3441: POP
3442: POP
// if not global_defined then
3443: LD_LOC 3
3447: NOT
3448: IFFALSE 3526
// if ( global_units >= cl ) then
3450: LD_LOC 2
3454: PUSH
3455: LD_VAR 0 2
3459: GREATEREQUAL
3460: IFFALSE 3501
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3462: LD_ADDR_LOC 2
3466: PUSH
3467: LD_LOC 2
3471: PPUSH
3472: LD_VAR 0 2
3476: PPUSH
3477: LD_LOC 2
3481: PUSH
3482: LD_VAR 0 2
3486: ARRAY
3487: PUSH
3488: LD_VAR 0 7
3492: ADD
3493: PPUSH
3494: CALL_OW 1
3498: ST_TO_ADDR
3499: GO 3526
// global_units := Replace ( global_units , cl , result ) ;
3501: LD_ADDR_LOC 2
3505: PUSH
3506: LD_LOC 2
3510: PPUSH
3511: LD_VAR 0 2
3515: PPUSH
3516: LD_VAR 0 7
3520: PPUSH
3521: CALL_OW 1
3525: ST_TO_ADDR
// end ;
3526: LD_VAR 0 7
3530: RET
// function prepare_mastodonts ( n ) ; var i ; begin
3531: LD_INT 0
3533: PPUSH
3534: PPUSH
// uc_side := 0 ;
3535: LD_ADDR_OWVAR 20
3539: PUSH
3540: LD_INT 0
3542: ST_TO_ADDR
// uc_nation := 0 ;
3543: LD_ADDR_OWVAR 21
3547: PUSH
3548: LD_INT 0
3550: ST_TO_ADDR
// vc_chassis := 31 ;
3551: LD_ADDR_OWVAR 37
3555: PUSH
3556: LD_INT 31
3558: ST_TO_ADDR
// vc_control := control_rider ;
3559: LD_ADDR_OWVAR 38
3563: PUSH
3564: LD_INT 4
3566: ST_TO_ADDR
// for i = 1 to n do
3567: LD_ADDR_VAR 0 3
3571: PUSH
3572: DOUBLE
3573: LD_INT 1
3575: DEC
3576: ST_TO_ADDR
3577: LD_VAR 0 1
3581: PUSH
3582: FOR_TO
3583: IFFALSE 3602
// PlaceUnitArea ( CreateVehicle , MastodontSpawn , false ) ;
3585: CALL_OW 45
3589: PPUSH
3590: LD_INT 15
3592: PPUSH
3593: LD_INT 0
3595: PPUSH
3596: CALL_OW 49
3600: GO 3582
3602: POP
3603: POP
// end ;
3604: LD_VAR 0 2
3608: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3609: LD_INT 0
3611: PPUSH
3612: PPUSH
3613: PPUSH
3614: PPUSH
3615: PPUSH
3616: PPUSH
3617: PPUSH
3618: PPUSH
3619: PPUSH
// if side in [ 0 , 9 ] then
3620: LD_VAR 0 1
3624: PUSH
3625: LD_INT 0
3627: PUSH
3628: LD_INT 9
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: IN
3635: IFFALSE 3639
// exit ;
3637: GO 4656
// pos := Side_Positions [ side ] ;
3639: LD_ADDR_VAR 0 3
3643: PUSH
3644: LD_EXP 38
3648: PUSH
3649: LD_VAR 0 1
3653: ARRAY
3654: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3655: LD_ADDR_OWVAR 21
3659: PUSH
3660: LD_EXP 39
3664: PUSH
3665: LD_VAR 0 1
3669: ARRAY
3670: ST_TO_ADDR
// uc_side := side ;
3671: LD_ADDR_OWVAR 20
3675: PUSH
3676: LD_VAR 0 1
3680: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3681: LD_ADDR_VAR 0 4
3685: PUSH
3686: LD_EXP 41
3690: PUSH
3691: LD_VAR 0 3
3695: ARRAY
3696: PUSH
3697: LD_INT 1
3699: ARRAY
3700: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3701: LD_ADDR_VAR 0 5
3705: PUSH
3706: LD_EXP 41
3710: PUSH
3711: LD_VAR 0 3
3715: ARRAY
3716: PUSH
3717: LD_INT 2
3719: ARRAY
3720: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3721: LD_ADDR_VAR 0 6
3725: PUSH
3726: LD_EXP 41
3730: PUSH
3731: LD_VAR 0 3
3735: ARRAY
3736: PUSH
3737: LD_INT 3
3739: ARRAY
3740: ST_TO_ADDR
// if is_depot then
3741: LD_EXP 22
3745: IFFALSE 3878
// begin bc_type = b_depot ;
3747: LD_ADDR_OWVAR 42
3751: PUSH
3752: LD_INT 0
3754: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3755: LD_ADDR_VAR 0 10
3759: PUSH
3760: LD_VAR 0 4
3764: PPUSH
3765: LD_VAR 0 5
3769: PPUSH
3770: LD_VAR 0 6
3774: PPUSH
3775: CALL_OW 47
3779: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3780: LD_VAR 0 10
3784: PPUSH
3785: LD_STRING @
3787: PUSH
3788: LD_VAR 0 1
3792: STR
3793: PPUSH
3794: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3798: LD_VAR 0 10
3802: PPUSH
3803: CALL_OW 274
3807: PPUSH
3808: LD_INT 1
3810: PPUSH
3811: LD_EXP 27
3815: PUSH
3816: LD_INT 1
3818: ARRAY
3819: PPUSH
3820: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3824: LD_VAR 0 10
3828: PPUSH
3829: CALL_OW 274
3833: PPUSH
3834: LD_INT 2
3836: PPUSH
3837: LD_EXP 27
3841: PUSH
3842: LD_INT 2
3844: ARRAY
3845: PPUSH
3846: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3850: LD_VAR 0 10
3854: PPUSH
3855: CALL_OW 274
3859: PPUSH
3860: LD_INT 3
3862: PPUSH
3863: LD_EXP 27
3867: PUSH
3868: LD_INT 3
3870: ARRAY
3871: PPUSH
3872: CALL_OW 277
// end else
3876: GO 4022
// begin for i := 1 to 3 do
3878: LD_ADDR_VAR 0 7
3882: PUSH
3883: DOUBLE
3884: LD_INT 1
3886: DEC
3887: ST_TO_ADDR
3888: LD_INT 3
3890: PUSH
3891: FOR_TO
3892: IFFALSE 4020
// begin r := starting_resources [ i ] ;
3894: LD_ADDR_VAR 0 8
3898: PUSH
3899: LD_EXP 27
3903: PUSH
3904: LD_VAR 0 7
3908: ARRAY
3909: ST_TO_ADDR
// while r >= 10 do
3910: LD_VAR 0 8
3914: PUSH
3915: LD_INT 10
3917: GREATEREQUAL
3918: IFFALSE 4018
// if r > 50 then
3920: LD_VAR 0 8
3924: PUSH
3925: LD_INT 50
3927: GREATER
3928: IFFALSE 3974
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3930: LD_VAR 0 7
3934: PPUSH
3935: LD_INT 5
3937: PPUSH
3938: LD_VAR 0 4
3942: PPUSH
3943: LD_VAR 0 5
3947: PPUSH
3948: LD_INT 4
3950: PPUSH
3951: LD_INT 0
3953: PPUSH
3954: CALL_OW 60
// r := r - 50 ;
3958: LD_ADDR_VAR 0 8
3962: PUSH
3963: LD_VAR 0 8
3967: PUSH
3968: LD_INT 50
3970: MINUS
3971: ST_TO_ADDR
// end else
3972: GO 4016
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3974: LD_VAR 0 7
3978: PPUSH
3979: LD_VAR 0 8
3983: PUSH
3984: LD_INT 10
3986: DIV
3987: PPUSH
3988: LD_VAR 0 4
3992: PPUSH
3993: LD_VAR 0 5
3997: PPUSH
3998: LD_INT 4
4000: PPUSH
4001: LD_INT 0
4003: PPUSH
4004: CALL_OW 60
// r := 0 ;
4008: LD_ADDR_VAR 0 8
4012: PUSH
4013: LD_INT 0
4015: ST_TO_ADDR
// end ;
4016: GO 3910
// end ;
4018: GO 3891
4020: POP
4021: POP
// end ; for r in starting_crates do
4022: LD_ADDR_VAR 0 8
4026: PUSH
4027: LD_EXP 26
4031: PUSH
4032: FOR_IN
4033: IFFALSE 4065
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
4035: LD_INT 1
4037: PPUSH
4038: LD_INT 5
4040: PPUSH
4041: LD_VAR 0 4
4045: PPUSH
4046: LD_VAR 0 5
4050: PPUSH
4051: LD_VAR 0 8
4055: PPUSH
4056: LD_INT 0
4058: PPUSH
4059: CALL_OW 60
4063: GO 4032
4065: POP
4066: POP
// if def_morale_flags then
4067: LD_EXP 9
4071: IFFALSE 4210
// begin x := start_def [ pos ] [ 1 ] ;
4073: LD_ADDR_VAR 0 4
4077: PUSH
4078: LD_EXP 43
4082: PUSH
4083: LD_VAR 0 3
4087: ARRAY
4088: PUSH
4089: LD_INT 1
4091: ARRAY
4092: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4093: LD_ADDR_VAR 0 5
4097: PUSH
4098: LD_EXP 43
4102: PUSH
4103: LD_VAR 0 3
4107: ARRAY
4108: PUSH
4109: LD_INT 2
4111: ARRAY
4112: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4113: LD_VAR 0 4
4117: PPUSH
4118: LD_VAR 0 5
4122: PPUSH
4123: LD_INT 12
4125: PPUSH
4126: LD_INT 2
4128: PPUSH
4129: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4133: LD_ADDR_EXP 48
4137: PUSH
4138: LD_EXP 48
4142: PUSH
4143: LD_VAR 0 1
4147: PPUSH
4148: LD_VAR 0 4
4152: PPUSH
4153: LD_VAR 0 5
4157: PPUSH
4158: LD_INT 1
4160: PUSH
4161: LD_INT 100
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: PUSH
4168: LD_INT 2
4170: PUSH
4171: LD_INT 50
4173: PUSH
4174: EMPTY
4175: LIST
4176: LIST
4177: PUSH
4178: LD_INT 3
4180: PUSH
4181: LD_INT 20
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 20
4190: PUSH
4191: LD_INT 100
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: EMPTY
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: PPUSH
4204: CALL_OW 418
4208: ADD
4209: ST_TO_ADDR
// end ; commander := true ;
4210: LD_ADDR_LOC 1
4214: PUSH
4215: LD_INT 1
4217: ST_TO_ADDR
// soldiers_created := 0 ;
4218: LD_ADDR_LOC 4
4222: PUSH
4223: LD_INT 0
4225: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4226: LD_ADDR_VAR 0 7
4230: PUSH
4231: DOUBLE
4232: LD_INT 1
4234: DEC
4235: ST_TO_ADDR
4236: LD_EXP 23
4240: PUSH
4241: FOR_TO
4242: IFFALSE 4395
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4244: LD_ADDR_VAR 0 4
4248: PUSH
4249: LD_EXP 42
4253: PUSH
4254: LD_VAR 0 3
4258: ARRAY
4259: PUSH
4260: LD_VAR 0 7
4264: ARRAY
4265: PUSH
4266: LD_INT 1
4268: ARRAY
4269: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4270: LD_ADDR_VAR 0 5
4274: PUSH
4275: LD_EXP 42
4279: PUSH
4280: LD_VAR 0 3
4284: ARRAY
4285: PUSH
4286: LD_VAR 0 7
4290: ARRAY
4291: PUSH
4292: LD_INT 2
4294: ARRAY
4295: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4296: LD_ADDR_VAR 0 6
4300: PUSH
4301: LD_EXP 42
4305: PUSH
4306: LD_VAR 0 3
4310: ARRAY
4311: PUSH
4312: LD_VAR 0 7
4316: ARRAY
4317: PUSH
4318: LD_INT 3
4320: ARRAY
4321: ST_TO_ADDR
// bc_type := b_breastwork ;
4322: LD_ADDR_OWVAR 42
4326: PUSH
4327: LD_INT 31
4329: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4330: LD_ADDR_VAR 0 9
4334: PUSH
4335: LD_VAR 0 4
4339: PPUSH
4340: LD_VAR 0 5
4344: PPUSH
4345: LD_VAR 0 6
4349: PPUSH
4350: CALL_OW 47
4354: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4355: LD_INT 1
4357: PPUSH
4358: LD_INT 1
4360: PPUSH
4361: LD_INT 0
4363: PPUSH
4364: LD_INT 0
4366: PPUSH
4367: LD_INT 0
4369: PPUSH
4370: LD_VAR 0 9
4374: PPUSH
4375: CALL 2962 0 6
// soldiers_created := soldiers_created + 1 ;
4379: LD_ADDR_LOC 4
4383: PUSH
4384: LD_LOC 4
4388: PUSH
4389: LD_INT 1
4391: PLUS
4392: ST_TO_ADDR
// end ;
4393: GO 4241
4395: POP
4396: POP
// x := start_def [ pos ] [ 1 ] ;
4397: LD_ADDR_VAR 0 4
4401: PUSH
4402: LD_EXP 43
4406: PUSH
4407: LD_VAR 0 3
4411: ARRAY
4412: PUSH
4413: LD_INT 1
4415: ARRAY
4416: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4417: LD_ADDR_VAR 0 5
4421: PUSH
4422: LD_EXP 43
4426: PUSH
4427: LD_VAR 0 3
4431: ARRAY
4432: PUSH
4433: LD_INT 2
4435: ARRAY
4436: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4437: LD_LOC 8
4441: PUSH
4442: LD_EXP 23
4446: MINUS
4447: PPUSH
4448: LD_INT 1
4450: PPUSH
4451: LD_VAR 0 4
4455: PPUSH
4456: LD_VAR 0 5
4460: PPUSH
4461: LD_INT 5
4463: PPUSH
4464: LD_INT 0
4466: PPUSH
4467: CALL 2962 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4471: LD_LOC 5
4475: PPUSH
4476: LD_INT 2
4478: PPUSH
4479: LD_VAR 0 4
4483: PPUSH
4484: LD_VAR 0 5
4488: PPUSH
4489: LD_INT 5
4491: PPUSH
4492: LD_INT 0
4494: PPUSH
4495: CALL 2962 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4499: LD_LOC 7
4503: PPUSH
4504: LD_INT 3
4506: PPUSH
4507: LD_VAR 0 4
4511: PPUSH
4512: LD_VAR 0 5
4516: PPUSH
4517: LD_INT 5
4519: PPUSH
4520: LD_INT 0
4522: PPUSH
4523: CALL 2962 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4527: LD_LOC 6
4531: PPUSH
4532: LD_INT 4
4534: PPUSH
4535: LD_VAR 0 4
4539: PPUSH
4540: LD_VAR 0 5
4544: PPUSH
4545: LD_INT 5
4547: PPUSH
4548: LD_INT 0
4550: PPUSH
4551: CALL 2962 0 6
// if def_siberite_detection then
4555: LD_EXP 10
4559: IFFALSE 4576
// SetTech ( tech_SibDet , side , state_researched ) ;
4561: LD_INT 20
4563: PPUSH
4564: LD_VAR 0 1
4568: PPUSH
4569: LD_INT 2
4571: PPUSH
4572: CALL_OW 322
// if def_siberite_bomb = 1 then
4576: LD_EXP 15
4580: PUSH
4581: LD_INT 1
4583: EQUAL
4584: IFFALSE 4618
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4586: LD_INT 25
4588: PPUSH
4589: LD_VAR 0 1
4593: PPUSH
4594: LD_INT 1
4596: PPUSH
4597: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4601: LD_INT 73
4603: PPUSH
4604: LD_VAR 0 1
4608: PPUSH
4609: LD_INT 1
4611: PPUSH
4612: CALL_OW 322
// end else
4616: GO 4648
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4618: LD_INT 25
4620: PPUSH
4621: LD_VAR 0 1
4625: PPUSH
4626: LD_INT 0
4628: PPUSH
4629: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4633: LD_INT 73
4635: PPUSH
4636: LD_VAR 0 1
4640: PPUSH
4641: LD_INT 0
4643: PPUSH
4644: CALL_OW 322
// end ; global_defined := true ;
4648: LD_ADDR_LOC 3
4652: PUSH
4653: LD_INT 1
4655: ST_TO_ADDR
// end ;
4656: LD_VAR 0 2
4660: RET
// every 0 0$1 do
4661: GO 4663
4663: DISABLE
// if ( def_siberite_bomb > 1 ) then
4664: LD_EXP 15
4668: PUSH
4669: LD_INT 1
4671: GREATER
4672: IFFALSE 4687
// begin wait ( siberite_bomb_Delay ) ;
4674: LD_EXP 34
4678: PPUSH
4679: CALL_OW 67
// EnableSibFiss ;
4683: CALL 4688 0 0
// end ;
4687: END
// function EnableSibFiss ; var i ; begin
4688: LD_INT 0
4690: PPUSH
4691: PPUSH
// for i := 1 to 8 do
4692: LD_ADDR_VAR 0 2
4696: PUSH
4697: DOUBLE
4698: LD_INT 1
4700: DEC
4701: ST_TO_ADDR
4702: LD_INT 8
4704: PUSH
4705: FOR_TO
4706: IFFALSE 4752
// if Side_Positions [ i ] then
4708: LD_EXP 38
4712: PUSH
4713: LD_VAR 0 2
4717: ARRAY
4718: IFFALSE 4750
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4720: LD_INT 25
4722: PPUSH
4723: LD_VAR 0 2
4727: PPUSH
4728: LD_INT 1
4730: PPUSH
4731: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4735: LD_INT 73
4737: PPUSH
4738: LD_VAR 0 2
4742: PPUSH
4743: LD_INT 1
4745: PPUSH
4746: CALL_OW 322
// end ;
4750: GO 4705
4752: POP
4753: POP
// end ;
4754: LD_VAR 0 1
4758: RET
// function prepare_sides ; var i ; begin
4759: LD_INT 0
4761: PPUSH
4762: PPUSH
// global_units := [ ] ;
4763: LD_ADDR_LOC 2
4767: PUSH
4768: EMPTY
4769: ST_TO_ADDR
// global_defined := false ;
4770: LD_ADDR_LOC 3
4774: PUSH
4775: LD_INT 0
4777: ST_TO_ADDR
// CountClassMembers ;
4778: CALL 4857 0 0
// for i := 1 to 8 do
4782: LD_ADDR_VAR 0 2
4786: PUSH
4787: DOUBLE
4788: LD_INT 1
4790: DEC
4791: ST_TO_ADDR
4792: LD_INT 8
4794: PUSH
4795: FOR_TO
4796: IFFALSE 4850
// if Side_Positions [ i ] then
4798: LD_EXP 38
4802: PUSH
4803: LD_VAR 0 2
4807: ARRAY
4808: IFFALSE 4848
// begin prepare_side ( i ) ;
4810: LD_VAR 0 2
4814: PPUSH
4815: CALL 3609 0 1
// if ( Game_Type = 12 ) and mastodont > 0 then
4819: LD_EXP 21
4823: PUSH
4824: LD_INT 12
4826: EQUAL
4827: PUSH
4828: LD_EXP 52
4832: PUSH
4833: LD_INT 0
4835: GREATER
4836: AND
4837: IFFALSE 4848
// prepare_mastodonts ( mastodont ) ;
4839: LD_EXP 52
4843: PPUSH
4844: CALL 3531 0 1
// end ;
4848: GO 4795
4850: POP
4851: POP
// end ;
4852: LD_VAR 0 1
4856: RET
// function CountClassMembers ; var Mode ; begin
4857: LD_INT 0
4859: PPUSH
4860: PPUSH
// if No_Mechs then
4861: LD_EXP 20
4865: IFFALSE 4877
// Mode := 2 else
4867: LD_ADDR_VAR 0 2
4871: PUSH
4872: LD_INT 2
4874: ST_TO_ADDR
4875: GO 4885
// Mode := 1 ;
4877: LD_ADDR_VAR 0 2
4881: PUSH
4882: LD_INT 1
4884: ST_TO_ADDR
// neng := number_of_people ;
4885: LD_ADDR_LOC 5
4889: PUSH
4890: LD_EXP 24
4894: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4895: LD_ADDR_LOC 8
4899: PUSH
4900: LD_LOC 5
4904: PUSH
4905: LD_INT 4
4907: PUSH
4908: LD_INT 3
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PUSH
4915: LD_VAR 0 2
4919: ARRAY
4920: DIV
4921: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4922: LD_LOC 8
4926: PUSH
4927: LD_EXP 23
4931: LESS
4932: IFFALSE 4944
// nsol := number_of_breastworks ;
4934: LD_ADDR_LOC 8
4938: PUSH
4939: LD_EXP 23
4943: ST_TO_ADDR
// neng := neng - nsol ;
4944: LD_ADDR_LOC 5
4948: PUSH
4949: LD_LOC 5
4953: PUSH
4954: LD_LOC 8
4958: MINUS
4959: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4960: LD_ADDR_LOC 6
4964: PUSH
4965: LD_LOC 5
4969: PUSH
4970: LD_INT 3
4972: PUSH
4973: LD_INT 2
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: PUSH
4980: LD_VAR 0 2
4984: ARRAY
4985: DIV
4986: ST_TO_ADDR
// if ( nsci < 1 ) then
4987: LD_LOC 6
4991: PUSH
4992: LD_INT 1
4994: LESS
4995: IFFALSE 5005
// nsci := 1 ;
4997: LD_ADDR_LOC 6
5001: PUSH
5002: LD_INT 1
5004: ST_TO_ADDR
// neng := neng - nsci ;
5005: LD_ADDR_LOC 5
5009: PUSH
5010: LD_LOC 5
5014: PUSH
5015: LD_LOC 6
5019: MINUS
5020: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5021: LD_ADDR_LOC 7
5025: PUSH
5026: LD_LOC 5
5030: PUSH
5031: LD_INT 2
5033: DIV
5034: PUSH
5035: LD_INT 0
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: PUSH
5042: LD_VAR 0 2
5046: ARRAY
5047: ST_TO_ADDR
// neng := neng - nmech ;
5048: LD_ADDR_LOC 5
5052: PUSH
5053: LD_LOC 5
5057: PUSH
5058: LD_LOC 7
5062: MINUS
5063: ST_TO_ADDR
// if ( neng < 1 ) then
5064: LD_LOC 5
5068: PUSH
5069: LD_INT 1
5071: LESS
5072: IFFALSE 5082
// neng := 1 ;
5074: LD_ADDR_LOC 5
5078: PUSH
5079: LD_INT 1
5081: ST_TO_ADDR
// end ;
5082: LD_VAR 0 1
5086: RET
// function Init_Win_Condition ; begin
5087: LD_INT 0
5089: PPUSH
// if Team_Game then
5090: LD_EXP 40
5094: IFFALSE 5101
// enable ( 98 ) else
5096: LD_INT 98
5098: ENABLE_MARKED
5099: GO 5104
// enable ( 99 ) ;
5101: LD_INT 99
5103: ENABLE_MARKED
// case Game_Type of 3 :
5104: LD_EXP 21
5108: PUSH
5109: LD_INT 3
5111: DOUBLE
5112: EQUAL
5113: IFTRUE 5117
5115: GO 5123
5117: POP
// enable ( 100 ) ; end ;
5118: LD_INT 100
5120: ENABLE_MARKED
5121: GO 5124
5123: POP
// end ;
5124: LD_VAR 0 1
5128: RET
// starting begin disable ( 98 ) ;
5129: LD_INT 98
5131: DISABLE_MARKED
// disable ( 99 ) ;
5132: LD_INT 99
5134: DISABLE_MARKED
// disable ( 100 ) ;
5135: LD_INT 100
5137: DISABLE_MARKED
// disable ( 200 ) ;
5138: LD_INT 200
5140: DISABLE_MARKED
// disable ( 400 ) ;
5141: LD_INT 400
5143: DISABLE_MARKED
// disable ( 401 ) ;
5144: LD_INT 401
5146: DISABLE_MARKED
// mp_selectmsg := true ;
5147: LD_ADDR_OWVAR 13
5151: PUSH
5152: LD_INT 1
5154: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5155: CALL 0 0 0
// init_map ;
5159: CALL 1509 0 0
// init_respawning ;
5163: CALL 14104 0 0
// set_shared_visions_and_alliances ;
5167: CALL 2674 0 0
// prepare_sides ;
5171: CALL 4759 0 0
// ShowTimer ;
5175: CALL 8980 0 0
// if ( Game_Type = 4 ) then
5179: LD_EXP 21
5183: PUSH
5184: LD_INT 4
5186: EQUAL
5187: IFFALSE 5193
// InitBloodGods ;
5189: CALL 8745 0 0
// music_nat := Side_Nations [ your_side ] ;
5193: LD_ADDR_OWVAR 71
5197: PUSH
5198: LD_EXP 39
5202: PUSH
5203: LD_OWVAR 2
5207: ARRAY
5208: ST_TO_ADDR
// if IAmSpec then
5209: CALL_OW 531
5213: IFFALSE 5249
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
5215: LD_INT 0
5217: PPUSH
5218: LD_INT 0
5220: PPUSH
5221: LD_OWVAR 2
5225: PPUSH
5226: LD_INT 32767
5228: NEG
5229: PPUSH
5230: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
5234: LD_INT 104
5236: PPUSH
5237: LD_INT 69
5239: PPUSH
5240: CALL_OW 86
// enable ( 400 ) ;
5244: LD_INT 400
5246: ENABLE_MARKED
// end else
5247: GO 5303
// begin ResetFog ;
5249: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5253: LD_EXP 43
5257: PUSH
5258: LD_EXP 38
5262: PUSH
5263: LD_OWVAR 2
5267: ARRAY
5268: ARRAY
5269: PUSH
5270: LD_INT 1
5272: ARRAY
5273: PPUSH
5274: LD_EXP 43
5278: PUSH
5279: LD_EXP 38
5283: PUSH
5284: LD_OWVAR 2
5288: ARRAY
5289: ARRAY
5290: PUSH
5291: LD_INT 2
5293: ARRAY
5294: PPUSH
5295: CALL_OW 86
// Init_Win_Condition ;
5299: CALL 5087 0 0
// end ; AnimateTrees ( true ) ;
5303: LD_INT 1
5305: PPUSH
5306: CALL_OW 573
// InitApeman ;
5310: CALL 6085 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
5314: LD_ADDR_EXP 62
5318: PUSH
5319: LD_INT 9
5321: PUSH
5322: LD_INT 10
5324: PUSH
5325: LD_INT 11
5327: PUSH
5328: LD_INT 12
5330: PUSH
5331: LD_INT 13
5333: PUSH
5334: LD_INT 14
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: LIST
5341: LIST
5342: LIST
5343: LIST
5344: ST_TO_ADDR
// BeginBuildUp ;
5345: CALL 14598 0 0
// end ; end_of_file
5349: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5350: GO 5352
5352: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5353: LD_INT 4
5355: PPUSH
5356: LD_INT 5
5358: PPUSH
5359: CALL_OW 12
5363: PPUSH
5364: LD_INT 1
5366: PPUSH
5367: CALL_OW 57
// enable ;
5371: ENABLE
// end ;
5372: END
// every 1 1$0 marked 10 do
5373: GO 5375
5375: DISABLE
// begin repeat wait ( shipments_density / 100 * rand ( 0 0$50 , 1 1$00 ) ) ;
5376: LD_EXP 28
5380: PUSH
5381: LD_INT 100
5383: DIVREAL
5384: PUSH
5385: LD_INT 1750
5387: PPUSH
5388: LD_INT 2100
5390: PPUSH
5391: CALL_OW 12
5395: MUL
5396: PPUSH
5397: CALL_OW 67
// if GetResourceArea ( MZSpecialArea , mat_cans ) < 60 then
5401: LD_INT 17
5403: PPUSH
5404: LD_INT 1
5406: PPUSH
5407: CALL_OW 287
5411: PUSH
5412: LD_INT 60
5414: LESS
5415: IFFALSE 5438
// CreateCratesArea ( Rand ( 3 , 5 ) , MZSpecialArea , true ) ;
5417: LD_INT 3
5419: PPUSH
5420: LD_INT 5
5422: PPUSH
5423: CALL_OW 12
5427: PPUSH
5428: LD_INT 17
5430: PPUSH
5431: LD_INT 1
5433: PPUSH
5434: CALL_OW 55
// until tick >= 300 300$00 ;
5438: LD_OWVAR 1
5442: PUSH
5443: LD_INT 630000
5445: GREATEREQUAL
5446: IFFALSE 5376
// end ;
5448: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5449: GO 5451
5451: DISABLE
5452: LD_INT 0
5454: PPUSH
5455: PPUSH
// begin case tick of 1 .. 1 1$0 :
5456: LD_OWVAR 1
5460: PUSH
5461: LD_INT 1
5463: DOUBLE
5464: GREATEREQUAL
5465: IFFALSE 5473
5467: LD_INT 2100
5469: DOUBLE
5470: LESSEQUAL
5471: IFTRUE 5475
5473: GO 5503
5475: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5476: LD_EXP 28
5480: PUSH
5481: LD_INT 100
5483: DIVREAL
5484: PUSH
5485: LD_INT 525
5487: PPUSH
5488: LD_INT 1050
5490: PPUSH
5491: CALL_OW 12
5495: MUL
5496: PPUSH
5497: CALL_OW 67
5501: GO 5805
5503: LD_INT 2100
5505: PUSH
5506: LD_INT 1
5508: PLUS
5509: DOUBLE
5510: GREATEREQUAL
5511: IFFALSE 5519
5513: LD_INT 10500
5515: DOUBLE
5516: LESSEQUAL
5517: IFTRUE 5521
5519: GO 5549
5521: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5522: LD_EXP 28
5526: PUSH
5527: LD_INT 100
5529: DIVREAL
5530: PUSH
5531: LD_INT 1050
5533: PPUSH
5534: LD_INT 1750
5536: PPUSH
5537: CALL_OW 12
5541: MUL
5542: PPUSH
5543: CALL_OW 67
5547: GO 5805
5549: LD_INT 10500
5551: PUSH
5552: LD_INT 1
5554: PLUS
5555: DOUBLE
5556: GREATEREQUAL
5557: IFFALSE 5565
5559: LD_INT 21000
5561: DOUBLE
5562: LESSEQUAL
5563: IFTRUE 5567
5565: GO 5595
5567: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5568: LD_EXP 28
5572: PUSH
5573: LD_INT 100
5575: DIVREAL
5576: PUSH
5577: LD_INT 1750
5579: PPUSH
5580: LD_INT 2100
5582: PPUSH
5583: CALL_OW 12
5587: MUL
5588: PPUSH
5589: CALL_OW 67
5593: GO 5805
5595: LD_INT 21000
5597: PUSH
5598: LD_INT 1
5600: PLUS
5601: DOUBLE
5602: GREATEREQUAL
5603: IFFALSE 5611
5605: LD_INT 42000
5607: DOUBLE
5608: LESSEQUAL
5609: IFTRUE 5613
5611: GO 5641
5613: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5614: LD_EXP 28
5618: PUSH
5619: LD_INT 100
5621: DIVREAL
5622: PUSH
5623: LD_INT 2100
5625: PPUSH
5626: LD_INT 2275
5628: PPUSH
5629: CALL_OW 12
5633: MUL
5634: PPUSH
5635: CALL_OW 67
5639: GO 5805
5641: LD_INT 42000
5643: PUSH
5644: LD_INT 1
5646: PLUS
5647: DOUBLE
5648: GREATEREQUAL
5649: IFFALSE 5657
5651: LD_INT 63000
5653: DOUBLE
5654: LESSEQUAL
5655: IFTRUE 5659
5657: GO 5687
5659: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5660: LD_EXP 28
5664: PUSH
5665: LD_INT 100
5667: DIVREAL
5668: PUSH
5669: LD_INT 2275
5671: PPUSH
5672: LD_INT 2450
5674: PPUSH
5675: CALL_OW 12
5679: MUL
5680: PPUSH
5681: CALL_OW 67
5685: GO 5805
5687: LD_INT 63000
5689: PUSH
5690: LD_INT 1
5692: PLUS
5693: DOUBLE
5694: GREATEREQUAL
5695: IFFALSE 5703
5697: LD_INT 105000
5699: DOUBLE
5700: LESSEQUAL
5701: IFTRUE 5705
5703: GO 5733
5705: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5706: LD_EXP 28
5710: PUSH
5711: LD_INT 100
5713: DIVREAL
5714: PUSH
5715: LD_INT 2450
5717: PPUSH
5718: LD_INT 2800
5720: PPUSH
5721: CALL_OW 12
5725: MUL
5726: PPUSH
5727: CALL_OW 67
5731: GO 5805
5733: LD_INT 105000
5735: PUSH
5736: LD_INT 1
5738: PLUS
5739: DOUBLE
5740: GREATEREQUAL
5741: IFFALSE 5749
5743: LD_INT 630000
5745: DOUBLE
5746: LESSEQUAL
5747: IFTRUE 5751
5749: GO 5779
5751: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5752: LD_EXP 28
5756: PUSH
5757: LD_INT 100
5759: DIVREAL
5760: PUSH
5761: LD_INT 2800
5763: PPUSH
5764: LD_INT 3500
5766: PPUSH
5767: CALL_OW 12
5771: MUL
5772: PPUSH
5773: CALL_OW 67
5777: GO 5805
5779: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5780: LD_EXP 28
5784: PUSH
5785: LD_INT 100
5787: DIVREAL
5788: PUSH
5789: LD_INT 3500
5791: PPUSH
5792: LD_INT 3850
5794: PPUSH
5795: CALL_OW 12
5799: MUL
5800: PPUSH
5801: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5805: LD_ADDR_VAR 0 2
5809: PUSH
5810: LD_INT 3
5812: PPUSH
5813: LD_INT 5
5815: PPUSH
5816: CALL_OW 12
5820: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5821: LD_ADDR_VAR 0 1
5825: PUSH
5826: LD_EXP 38
5830: PUSH
5831: LD_INT 0
5833: PUSH
5834: EMPTY
5835: LIST
5836: DIFF
5837: PUSH
5838: FOR_IN
5839: IFFALSE 5888
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5841: LD_VAR 0 2
5845: PPUSH
5846: LD_EXP 43
5850: PUSH
5851: LD_VAR 0 1
5855: ARRAY
5856: PUSH
5857: LD_INT 1
5859: ARRAY
5860: PPUSH
5861: LD_EXP 43
5865: PUSH
5866: LD_VAR 0 1
5870: ARRAY
5871: PUSH
5872: LD_INT 2
5874: ARRAY
5875: PPUSH
5876: LD_INT 20
5878: PPUSH
5879: LD_INT 1
5881: PPUSH
5882: CALL_OW 56
5886: GO 5838
5888: POP
5889: POP
// enable ;
5890: ENABLE
// end ; end_of_file
5891: PPOPN 2
5893: END
// every 20 20$00 trigger apemanNumber do
5894: LD_EXP 53
5898: IFFALSE 5931
5900: GO 5902
5902: DISABLE
// begin enable ;
5903: ENABLE
// if apeLevel >= 8 then
5904: LD_EXP 58
5908: PUSH
5909: LD_INT 8
5911: GREATEREQUAL
5912: IFFALSE 5917
// disable else
5914: DISABLE
5915: GO 5931
// apeLevel := apeLevel + 1 ;
5917: LD_ADDR_EXP 58
5921: PUSH
5922: LD_EXP 58
5926: PUSH
5927: LD_INT 1
5929: PLUS
5930: ST_TO_ADDR
// end ;
5931: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5932: LD_EXP 53
5936: PUSH
5937: LD_EXP 54
5941: LESS
5942: IFFALSE 6082
5944: GO 5946
5946: DISABLE
5947: LD_INT 0
5949: PPUSH
5950: PPUSH
5951: PPUSH
5952: PPUSH
// begin enable ;
5953: ENABLE
// for i := 1 to apemanPos do
5954: LD_ADDR_VAR 0 1
5958: PUSH
5959: DOUBLE
5960: LD_INT 1
5962: DEC
5963: ST_TO_ADDR
5964: LD_EXP 56
5968: PUSH
5969: FOR_TO
5970: IFFALSE 6080
// begin if apemanPlayerCount [ i ] then
5972: LD_EXP 57
5976: PUSH
5977: LD_VAR 0 1
5981: ARRAY
5982: IFFALSE 6078
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5984: LD_EXP 57
5988: PUSH
5989: LD_VAR 0 1
5993: ARRAY
5994: PUSH
5995: LD_EXP 56
5999: PUSH
6000: LD_VAR 0 1
6004: ARRAY
6005: GREATER
6006: IFFALSE 6078
// begin ape := PrepareApeman ;
6008: LD_ADDR_VAR 0 2
6012: PUSH
6013: CALL 6593 0 0
6017: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6018: LD_VAR 0 2
6022: PPUSH
6023: LD_EXP 59
6027: PUSH
6028: LD_VAR 0 1
6032: ARRAY
6033: PPUSH
6034: LD_INT 0
6036: PPUSH
6037: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6041: LD_ADDR_EXP 56
6045: PUSH
6046: LD_EXP 56
6050: PPUSH
6051: LD_VAR 0 1
6055: PPUSH
6056: LD_EXP 56
6060: PUSH
6061: LD_VAR 0 1
6065: ARRAY
6066: PUSH
6067: LD_VAR 0 2
6071: UNION
6072: PPUSH
6073: CALL_OW 1
6077: ST_TO_ADDR
// end ; end ; end ;
6078: GO 5969
6080: POP
6081: POP
// end ;
6082: PPOPN 4
6084: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6085: LD_INT 0
6087: PPUSH
6088: PPUSH
6089: PPUSH
6090: PPUSH
6091: PPUSH
6092: PPUSH
6093: PPUSH
// playersAmount := 0 ;
6094: LD_ADDR_VAR 0 3
6098: PUSH
6099: LD_INT 0
6101: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
6102: LD_ADDR_VAR 0 7
6106: PUSH
6107: LD_INT 1
6109: PUSH
6110: LD_INT 2
6112: PUSH
6113: LD_INT 3
6115: PUSH
6116: LD_INT 4
6118: PUSH
6119: LD_INT 5
6121: PUSH
6122: LD_INT 6
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: LIST
6131: LIST
6132: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6133: LD_ADDR_EXP 59
6137: PUSH
6138: LD_INT 0
6140: PUSH
6141: LD_INT 0
6143: PUSH
6144: LD_INT 0
6146: PUSH
6147: LD_INT 0
6149: PUSH
6150: LD_INT 0
6152: PUSH
6153: LD_INT 0
6155: PUSH
6156: LD_INT 0
6158: PUSH
6159: LD_INT 0
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: LIST
6166: LIST
6167: LIST
6168: LIST
6169: LIST
6170: LIST
6171: ST_TO_ADDR
// for j = 1 to Side_Positions do
6172: LD_ADDR_VAR 0 4
6176: PUSH
6177: DOUBLE
6178: LD_INT 1
6180: DEC
6181: ST_TO_ADDR
6182: LD_EXP 38
6186: PUSH
6187: FOR_TO
6188: IFFALSE 6255
// if Side_Positions [ j ] then
6190: LD_EXP 38
6194: PUSH
6195: LD_VAR 0 4
6199: ARRAY
6200: IFFALSE 6253
// begin playersAmount := playersAmount + 1 ;
6202: LD_ADDR_VAR 0 3
6206: PUSH
6207: LD_VAR 0 3
6211: PUSH
6212: LD_INT 1
6214: PLUS
6215: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6216: LD_ADDR_EXP 59
6220: PUSH
6221: LD_EXP 59
6225: PPUSH
6226: LD_VAR 0 4
6230: PPUSH
6231: LD_VAR 0 7
6235: PUSH
6236: LD_EXP 38
6240: PUSH
6241: LD_VAR 0 4
6245: ARRAY
6246: ARRAY
6247: PPUSH
6248: CALL_OW 1
6252: ST_TO_ADDR
// end ;
6253: GO 6187
6255: POP
6256: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6257: LD_ADDR_EXP 55
6261: PUSH
6262: LD_INT 3
6264: PUSH
6265: LD_EXP 30
6269: MUL
6270: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6271: LD_ADDR_EXP 53
6275: PUSH
6276: LD_VAR 0 3
6280: PUSH
6281: LD_EXP 55
6285: MUL
6286: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6287: LD_ADDR_EXP 54
6291: PUSH
6292: LD_EXP 53
6296: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6297: LD_ADDR_EXP 56
6301: PUSH
6302: LD_INT 0
6304: PUSH
6305: LD_INT 0
6307: PUSH
6308: LD_INT 0
6310: PUSH
6311: LD_INT 0
6313: PUSH
6314: LD_INT 0
6316: PUSH
6317: LD_INT 0
6319: PUSH
6320: LD_INT 0
6322: PUSH
6323: LD_INT 0
6325: PUSH
6326: EMPTY
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6336: LD_ADDR_EXP 57
6340: PUSH
6341: LD_INT 0
6343: PUSH
6344: LD_INT 0
6346: PUSH
6347: LD_INT 0
6349: PUSH
6350: LD_INT 0
6352: PUSH
6353: LD_INT 0
6355: PUSH
6356: LD_INT 0
6358: PUSH
6359: LD_INT 0
6361: PUSH
6362: LD_INT 0
6364: PUSH
6365: EMPTY
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: ST_TO_ADDR
// apeLevel := 1 ;
6375: LD_ADDR_EXP 58
6379: PUSH
6380: LD_INT 1
6382: ST_TO_ADDR
// if not apemanNumber then
6383: LD_EXP 53
6387: NOT
6388: IFFALSE 6392
// exit ;
6390: GO 6588
// for i := 1 to apemanPerPlayer do
6392: LD_ADDR_VAR 0 2
6396: PUSH
6397: DOUBLE
6398: LD_INT 1
6400: DEC
6401: ST_TO_ADDR
6402: LD_EXP 55
6406: PUSH
6407: FOR_TO
6408: IFFALSE 6586
// begin for j := 1 to Side_Positions do
6410: LD_ADDR_VAR 0 4
6414: PUSH
6415: DOUBLE
6416: LD_INT 1
6418: DEC
6419: ST_TO_ADDR
6420: LD_EXP 38
6424: PUSH
6425: FOR_TO
6426: IFFALSE 6582
// if Side_Positions [ j ] then
6428: LD_EXP 38
6432: PUSH
6433: LD_VAR 0 4
6437: ARRAY
6438: IFFALSE 6580
// begin pos := Side_Positions [ j ] ;
6440: LD_ADDR_VAR 0 6
6444: PUSH
6445: LD_EXP 38
6449: PUSH
6450: LD_VAR 0 4
6454: ARRAY
6455: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6456: LD_ADDR_EXP 57
6460: PUSH
6461: LD_EXP 57
6465: PPUSH
6466: LD_VAR 0 4
6470: PPUSH
6471: LD_EXP 57
6475: PUSH
6476: LD_VAR 0 4
6480: ARRAY
6481: PUSH
6482: LD_INT 1
6484: PLUS
6485: PPUSH
6486: CALL_OW 1
6490: ST_TO_ADDR
// ape := PrepareApeman ;
6491: LD_ADDR_VAR 0 5
6495: PUSH
6496: CALL 6593 0 0
6500: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6501: LD_ADDR_EXP 56
6505: PUSH
6506: LD_EXP 56
6510: PPUSH
6511: LD_VAR 0 4
6515: PPUSH
6516: LD_EXP 56
6520: PUSH
6521: LD_VAR 0 4
6525: ARRAY
6526: PPUSH
6527: LD_EXP 56
6531: PUSH
6532: LD_VAR 0 4
6536: ARRAY
6537: PUSH
6538: LD_INT 1
6540: PLUS
6541: PPUSH
6542: LD_VAR 0 5
6546: PPUSH
6547: CALL_OW 1
6551: PPUSH
6552: CALL_OW 1
6556: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6557: LD_VAR 0 5
6561: PPUSH
6562: LD_EXP 59
6566: PUSH
6567: LD_VAR 0 4
6571: ARRAY
6572: PPUSH
6573: LD_INT 0
6575: PPUSH
6576: CALL_OW 49
// end ;
6580: GO 6425
6582: POP
6583: POP
// end ;
6584: GO 6407
6586: POP
6587: POP
// end ;
6588: LD_VAR 0 1
6592: RET
// export function PrepareApeman ; var bonus ; begin
6593: LD_INT 0
6595: PPUSH
6596: PPUSH
// uc_side := 0 ;
6597: LD_ADDR_OWVAR 20
6601: PUSH
6602: LD_INT 0
6604: ST_TO_ADDR
// uc_nation := 0 ;
6605: LD_ADDR_OWVAR 21
6609: PUSH
6610: LD_INT 0
6612: ST_TO_ADDR
// InitHc ;
6613: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
6617: LD_ADDR_VAR 0 2
6621: PUSH
6622: LD_INT 1
6624: NEG
6625: PUSH
6626: LD_INT 0
6628: PUSH
6629: LD_INT 1
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: LIST
6636: PUSH
6637: LD_INT 25
6639: PUSH
6640: LD_INT 12
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: PPUSH
6647: CALL_OW 69
6651: PUSH
6652: LD_INT 3
6654: MOD
6655: PUSH
6656: LD_INT 1
6658: PLUS
6659: ARRAY
6660: ST_TO_ADDR
// hc_class := class_apeman ;
6661: LD_ADDR_OWVAR 28
6665: PUSH
6666: LD_INT 12
6668: ST_TO_ADDR
// hc_gallery :=  ;
6669: LD_ADDR_OWVAR 33
6673: PUSH
6674: LD_STRING 
6676: ST_TO_ADDR
// hc_name :=  ;
6677: LD_ADDR_OWVAR 26
6681: PUSH
6682: LD_STRING 
6684: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6685: LD_ADDR_OWVAR 31
6689: PUSH
6690: LD_EXP 58
6694: PUSH
6695: LD_VAR 0 2
6699: PLUS
6700: PUSH
6701: LD_EXP 58
6705: PUSH
6706: LD_VAR 0 2
6710: PLUS
6711: PUSH
6712: LD_EXP 58
6716: PUSH
6717: LD_VAR 0 2
6721: PLUS
6722: PUSH
6723: LD_EXP 58
6727: PUSH
6728: LD_VAR 0 2
6732: PLUS
6733: PUSH
6734: EMPTY
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6740: LD_ADDR_OWVAR 35
6744: PUSH
6745: LD_INT 10
6747: PUSH
6748: LD_VAR 0 2
6752: MUL
6753: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
6754: LD_ADDR_OWVAR 29
6758: PUSH
6759: LD_INT 12
6761: PUSH
6762: LD_INT 12
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: ST_TO_ADDR
// result := CreateHuman ;
6769: LD_ADDR_VAR 0 1
6773: PUSH
6774: CALL_OW 44
6778: ST_TO_ADDR
// end ;
6779: LD_VAR 0 1
6783: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6784: LD_INT 0
6786: PPUSH
6787: PPUSH
6788: PPUSH
// if not ape then
6789: LD_VAR 0 1
6793: NOT
6794: IFFALSE 6798
// exit ;
6796: GO 6923
// side := GetSide ( ape ) ;
6798: LD_ADDR_VAR 0 3
6802: PUSH
6803: LD_VAR 0 1
6807: PPUSH
6808: CALL_OW 255
6812: ST_TO_ADDR
// if not side then
6813: LD_VAR 0 3
6817: NOT
6818: IFFALSE 6872
// begin for i = 1 to apemanPos do
6820: LD_ADDR_VAR 0 4
6824: PUSH
6825: DOUBLE
6826: LD_INT 1
6828: DEC
6829: ST_TO_ADDR
6830: LD_EXP 56
6834: PUSH
6835: FOR_TO
6836: IFFALSE 6870
// if ape in apemanPos [ i ] then
6838: LD_VAR 0 1
6842: PUSH
6843: LD_EXP 56
6847: PUSH
6848: LD_VAR 0 4
6852: ARRAY
6853: IN
6854: IFFALSE 6868
// begin side := i ;
6856: LD_ADDR_VAR 0 3
6860: PUSH
6861: LD_VAR 0 4
6865: ST_TO_ADDR
// break ;
6866: GO 6870
// end ;
6868: GO 6835
6870: POP
6871: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6872: LD_ADDR_EXP 56
6876: PUSH
6877: LD_EXP 56
6881: PPUSH
6882: LD_VAR 0 3
6886: PPUSH
6887: LD_EXP 56
6891: PUSH
6892: LD_VAR 0 3
6896: ARRAY
6897: PUSH
6898: LD_VAR 0 1
6902: DIFF
6903: PPUSH
6904: CALL_OW 1
6908: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6909: LD_ADDR_EXP 53
6913: PUSH
6914: LD_EXP 53
6918: PUSH
6919: LD_INT 1
6921: MINUS
6922: ST_TO_ADDR
// end ; end_of_file
6923: LD_VAR 0 2
6927: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6928: LD_VAR 0 1
6932: PPUSH
6933: CALL_OW 266
6937: PUSH
6938: LD_INT 0
6940: PUSH
6941: LD_INT 1
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: IN
6948: IFFALSE 6973
// SetBName ( b , @ & GetSide ( b ) ) ;
6950: LD_VAR 0 1
6954: PPUSH
6955: LD_STRING @
6957: PUSH
6958: LD_VAR 0 1
6962: PPUSH
6963: CALL_OW 255
6967: STR
6968: PPUSH
6969: CALL_OW 500
// end ;
6973: PPOPN 2
6975: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6976: LD_VAR 0 1
6980: PPUSH
6981: CALL_OW 266
6985: PUSH
6986: LD_INT 0
6988: PUSH
6989: LD_INT 1
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: IN
6996: IFFALSE 7021
// SetBName ( b , @ & GetSide ( b ) ) ;
6998: LD_VAR 0 1
7002: PPUSH
7003: LD_STRING @
7005: PUSH
7006: LD_VAR 0 1
7010: PPUSH
7011: CALL_OW 255
7015: STR
7016: PPUSH
7017: CALL_OW 500
// end ;
7021: PPOPN 3
7023: END
// on VehicleConstructed ( veh , fac ) do var side ;
7024: LD_INT 0
7026: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7027: LD_VAR 0 1
7031: PPUSH
7032: CALL_OW 263
7036: PUSH
7037: LD_INT 5
7039: EQUAL
7040: IFFALSE 7182
// begin side := GetSide ( veh ) ;
7042: LD_ADDR_VAR 0 3
7046: PUSH
7047: LD_VAR 0 1
7051: PPUSH
7052: CALL_OW 255
7056: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7057: LD_ADDR_EXP 56
7061: PUSH
7062: LD_EXP 56
7066: PPUSH
7067: LD_VAR 0 3
7071: PPUSH
7072: LD_EXP 56
7076: PUSH
7077: LD_VAR 0 3
7081: ARRAY
7082: PPUSH
7083: LD_INT 52
7085: PUSH
7086: EMPTY
7087: LIST
7088: PPUSH
7089: CALL_OW 72
7093: PUSH
7094: LD_INT 22
7096: PUSH
7097: LD_VAR 0 3
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: PUSH
7106: LD_INT 2
7108: PUSH
7109: LD_INT 33
7111: PUSH
7112: LD_INT 5
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: PUSH
7119: LD_INT 25
7121: PUSH
7122: LD_INT 12
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: PUSH
7129: LD_INT 25
7131: PUSH
7132: LD_INT 15
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PUSH
7139: LD_INT 25
7141: PUSH
7142: LD_INT 16
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: LD_INT 25
7151: PUSH
7152: LD_INT 17
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: PUSH
7159: EMPTY
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: PPUSH
7171: CALL_OW 69
7175: UNION
7176: PPUSH
7177: CALL_OW 1
7181: ST_TO_ADDR
// end ; end ;
7182: PPOPN 3
7184: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7185: LD_INT 0
7187: PPUSH
7188: PPUSH
7189: PPUSH
7190: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7191: LD_VAR 0 1
7195: PPUSH
7196: CALL_OW 257
7200: PUSH
7201: LD_INT 12
7203: PUSH
7204: LD_INT 15
7206: PUSH
7207: LD_INT 17
7209: PUSH
7210: LD_INT 16
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: IN
7219: PUSH
7220: LD_VAR 0 1
7224: PPUSH
7225: CALL_OW 263
7229: PUSH
7230: LD_INT 5
7232: EQUAL
7233: OR
7234: IFFALSE 7245
// ApeKilled ( j ) ;
7236: LD_VAR 0 1
7240: PPUSH
7241: CALL 6784 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7245: LD_VAR 0 1
7249: PPUSH
7250: CALL_OW 266
7254: PUSH
7255: LD_INT 0
7257: PUSH
7258: LD_INT 1
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: IN
7265: IFFALSE 7347
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7267: LD_ADDR_VAR 0 4
7271: PUSH
7272: LD_EXP 38
7276: PUSH
7277: LD_VAR 0 1
7281: PPUSH
7282: CALL_OW 255
7286: ARRAY
7287: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7288: LD_ADDR_VAR 0 2
7292: PUSH
7293: LD_EXP 43
7297: PUSH
7298: LD_VAR 0 4
7302: ARRAY
7303: PUSH
7304: LD_INT 1
7306: ARRAY
7307: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7308: LD_ADDR_VAR 0 3
7312: PUSH
7313: LD_EXP 43
7317: PUSH
7318: LD_VAR 0 4
7322: ARRAY
7323: PUSH
7324: LD_INT 2
7326: ARRAY
7327: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7328: LD_VAR 0 2
7332: PPUSH
7333: LD_VAR 0 3
7337: PPUSH
7338: CALL_OW 420
7342: PPUSH
7343: CALL_OW 419
// end ; end ;
7347: PPOPN 5
7349: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7350: LD_VAR 0 1
7354: PPUSH
7355: LD_VAR 0 2
7359: PPUSH
7360: LD_VAR 0 3
7364: PPUSH
7365: LD_OWVAR 2
7369: PPUSH
7370: CALL 9141 0 4
7374: PPOPN 3
7376: END
// every 0 0$1 marked 100 do var i , base , pom , filter , sib_mined ;
7377: GO 7379
7379: DISABLE
7380: LD_INT 0
7382: PPUSH
7383: PPUSH
7384: PPUSH
7385: PPUSH
7386: PPUSH
// begin sib_mined := [ ] ;
7387: LD_ADDR_VAR 0 5
7391: PUSH
7392: EMPTY
7393: ST_TO_ADDR
// for i := 1 to 8 do
7394: LD_ADDR_VAR 0 1
7398: PUSH
7399: DOUBLE
7400: LD_INT 1
7402: DEC
7403: ST_TO_ADDR
7404: LD_INT 8
7406: PUSH
7407: FOR_TO
7408: IFFALSE 7564
// if Side_Positions [ i ] then
7410: LD_EXP 38
7414: PUSH
7415: LD_VAR 0 1
7419: ARRAY
7420: IFFALSE 7548
// begin filter := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7422: LD_ADDR_VAR 0 4
7426: PUSH
7427: LD_INT 22
7429: PUSH
7430: LD_VAR 0 1
7434: PUSH
7435: EMPTY
7436: LIST
7437: LIST
7438: PUSH
7439: LD_INT 2
7441: PUSH
7442: LD_INT 30
7444: PUSH
7445: LD_INT 0
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: PUSH
7452: LD_INT 30
7454: PUSH
7455: LD_INT 1
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: LIST
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: PPUSH
7471: CALL_OW 69
7475: ST_TO_ADDR
// pom := 0 ;
7476: LD_ADDR_VAR 0 3
7480: PUSH
7481: LD_INT 0
7483: ST_TO_ADDR
// for base in filter do
7484: LD_ADDR_VAR 0 2
7488: PUSH
7489: LD_VAR 0 4
7493: PUSH
7494: FOR_IN
7495: IFFALSE 7528
// pom := pom + GetResourceType ( GetBase ( base ) , mat_siberit ) ;
7497: LD_ADDR_VAR 0 3
7501: PUSH
7502: LD_VAR 0 3
7506: PUSH
7507: LD_VAR 0 2
7511: PPUSH
7512: CALL_OW 274
7516: PPUSH
7517: LD_INT 3
7519: PPUSH
7520: CALL_OW 275
7524: PLUS
7525: ST_TO_ADDR
7526: GO 7494
7528: POP
7529: POP
// sib_mined := sib_mined ^ pom ;
7530: LD_ADDR_VAR 0 5
7534: PUSH
7535: LD_VAR 0 5
7539: PUSH
7540: LD_VAR 0 3
7544: ADD
7545: ST_TO_ADDR
// end else
7546: GO 7562
// sib_mined := sib_mined ^ 0 ;
7548: LD_ADDR_VAR 0 5
7552: PUSH
7553: LD_VAR 0 5
7557: PUSH
7558: LD_INT 0
7560: ADD
7561: ST_TO_ADDR
7562: GO 7407
7564: POP
7565: POP
// if not def_public_score then
7566: LD_EXP 14
7570: NOT
7571: IFFALSE 7661
// begin ExtraStrings := [ ] ;
7573: LD_ADDR_EXP 60
7577: PUSH
7578: EMPTY
7579: ST_TO_ADDR
// for i := 1 to 8 do
7580: LD_ADDR_VAR 0 1
7584: PUSH
7585: DOUBLE
7586: LD_INT 1
7588: DEC
7589: ST_TO_ADDR
7590: LD_INT 8
7592: PUSH
7593: FOR_TO
7594: IFFALSE 7657
// if Side_Positions [ i ] then
7596: LD_EXP 38
7600: PUSH
7601: LD_VAR 0 1
7605: ARRAY
7606: IFFALSE 7655
// ExtraStrings := ExtraStrings ^ [ #AlienBase-MinedPublic , i , i , sib_mined [ i ] , amount_of_siberit ] ;
7608: LD_ADDR_EXP 60
7612: PUSH
7613: LD_EXP 60
7617: PUSH
7618: LD_STRING #AlienBase-MinedPublic
7620: PUSH
7621: LD_VAR 0 1
7625: PUSH
7626: LD_VAR 0 1
7630: PUSH
7631: LD_VAR 0 5
7635: PUSH
7636: LD_VAR 0 1
7640: ARRAY
7641: PUSH
7642: LD_EXP 31
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: ADD
7654: ST_TO_ADDR
7655: GO 7593
7657: POP
7658: POP
// end else
7659: GO 7690
// ExtraStrings := [ #AlienBase-Mined , sib_mined [ Your_Side ] , amount_of_siberit ] ;
7661: LD_ADDR_EXP 60
7665: PUSH
7666: LD_STRING #AlienBase-Mined
7668: PUSH
7669: LD_VAR 0 5
7673: PUSH
7674: LD_OWVAR 2
7678: ARRAY
7679: PUSH
7680: LD_EXP 31
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: LIST
7689: ST_TO_ADDR
// for i := 1 to 8 do
7690: LD_ADDR_VAR 0 1
7694: PUSH
7695: DOUBLE
7696: LD_INT 1
7698: DEC
7699: ST_TO_ADDR
7700: LD_INT 8
7702: PUSH
7703: FOR_TO
7704: IFFALSE 7761
// if sib_mined [ i ] >= amount_of_siberit then
7706: LD_VAR 0 5
7710: PUSH
7711: LD_VAR 0 1
7715: ARRAY
7716: PUSH
7717: LD_EXP 31
7721: GREATEREQUAL
7722: IFFALSE 7759
// begin wait ( 0 0$1 ) ;
7724: LD_INT 35
7726: PPUSH
7727: CALL_OW 67
// if sib_mined [ your_side ] >= amount_of_siberit then
7731: LD_VAR 0 5
7735: PUSH
7736: LD_OWVAR 2
7740: ARRAY
7741: PUSH
7742: LD_EXP 31
7746: GREATEREQUAL
7747: IFFALSE 7755
// YouWinInMultiplayer else
7749: CALL_OW 106
7753: GO 7759
// YouLostInMultiplayer ;
7755: CALL_OW 107
// end ;
7759: GO 7703
7761: POP
7762: POP
// enable ;
7763: ENABLE
// end ; end_of_file
7764: PPOPN 5
7766: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7767: LD_INT 0
7769: PPUSH
7770: PPUSH
// for un in battle_flags_id do
7771: LD_ADDR_VAR 0 2
7775: PUSH
7776: LD_EXP 48
7780: PUSH
7781: FOR_IN
7782: IFFALSE 7857
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7784: LD_VAR 0 2
7788: PPUSH
7789: LD_INT 1
7791: PUSH
7792: LD_LOC 9
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: PUSH
7801: LD_INT 2
7803: PUSH
7804: LD_LOC 9
7808: PUSH
7809: LD_INT 2
7811: DIV
7812: PUSH
7813: EMPTY
7814: LIST
7815: LIST
7816: PUSH
7817: LD_INT 3
7819: PUSH
7820: LD_LOC 9
7824: PUSH
7825: LD_INT 5
7827: DIV
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: PUSH
7833: LD_INT 20
7835: PUSH
7836: LD_LOC 9
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: PPUSH
7851: CALL_OW 423
7855: GO 7781
7857: POP
7858: POP
// end ;
7859: LD_VAR 0 1
7863: RET
// every 1 do var un ;
7864: GO 7866
7866: DISABLE
7867: LD_INT 0
7869: PPUSH
// begin if not def_morale_flags then
7870: LD_EXP 9
7874: NOT
7875: IFFALSE 7879
// exit ;
7877: GO 7956
// if not morale_decreasing_time then
7879: LD_EXP 29
7883: NOT
7884: IFFALSE 7888
// exit ;
7886: GO 7956
// strength = 100 ;
7888: LD_ADDR_LOC 9
7892: PUSH
7893: LD_INT 100
7895: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7896: LD_EXP 29
7900: PPUSH
7901: CALL_OW 67
// strength := strength - 1 ;
7905: LD_ADDR_LOC 9
7909: PUSH
7910: LD_LOC 9
7914: PUSH
7915: LD_INT 1
7917: MINUS
7918: ST_TO_ADDR
// Update_Flags ;
7919: CALL 7767 0 0
// until not strength ;
7923: LD_LOC 9
7927: NOT
7928: IFFALSE 7896
// for un in battle_flags_id do
7930: LD_ADDR_VAR 0 1
7934: PUSH
7935: LD_EXP 48
7939: PUSH
7940: FOR_IN
7941: IFFALSE 7954
// KillBattleFlag ( un ) ;
7943: LD_VAR 0 1
7947: PPUSH
7948: CALL_OW 419
7952: GO 7940
7954: POP
7955: POP
// end ; end_of_file
7956: PPOPN 1
7958: END
// var BloodGods , BloodGods_LastKills , BloodGods_CurrentKills , BloodGods_Positions ; every 0 0$3 marked 200 do var x ;
7959: GO 7961
7961: DISABLE
7962: LD_INT 0
7964: PPUSH
// begin enable ;
7965: ENABLE
// for x := 1 to 8 do
7966: LD_ADDR_VAR 0 1
7970: PUSH
7971: DOUBLE
7972: LD_INT 1
7974: DEC
7975: ST_TO_ADDR
7976: LD_INT 8
7978: PUSH
7979: FOR_TO
7980: IFFALSE 8064
// if ( BloodGods_CurrentKills [ x ] > 5 ) and ( BloodGods [ x ] = - 1 ) then
7982: LD_LOC 16
7986: PUSH
7987: LD_VAR 0 1
7991: ARRAY
7992: PUSH
7993: LD_INT 5
7995: GREATER
7996: PUSH
7997: LD_LOC 14
8001: PUSH
8002: LD_VAR 0 1
8006: ARRAY
8007: PUSH
8008: LD_INT 1
8010: NEG
8011: EQUAL
8012: AND
8013: IFFALSE 8062
// begin BloodGods_LastKills := Replace ( BloodGods_LastKills , x , BloodGods_LastKills [ x ] + 6 ) ;
8015: LD_ADDR_LOC 15
8019: PUSH
8020: LD_LOC 15
8024: PPUSH
8025: LD_VAR 0 1
8029: PPUSH
8030: LD_LOC 15
8034: PUSH
8035: LD_VAR 0 1
8039: ARRAY
8040: PUSH
8041: LD_INT 6
8043: PLUS
8044: PPUSH
8045: CALL_OW 1
8049: ST_TO_ADDR
// AwakenBloodGod ( x , false ) ;
8050: LD_VAR 0 1
8054: PPUSH
8055: LD_INT 0
8057: PPUSH
8058: CALL 8236 0 2
// end ;
8062: GO 7979
8064: POP
8065: POP
// end ;
8066: PPOPN 1
8068: END
// every 0 0$1 marked 200 do var BGL , x ;
8069: GO 8071
8071: DISABLE
8072: LD_INT 0
8074: PPUSH
8075: PPUSH
// begin enable ;
8076: ENABLE
// for x := 1 to 8 do
8077: LD_ADDR_VAR 0 2
8081: PUSH
8082: DOUBLE
8083: LD_INT 1
8085: DEC
8086: ST_TO_ADDR
8087: LD_INT 8
8089: PUSH
8090: FOR_TO
8091: IFFALSE 8222
// if ( BloodGods [ x ] > - 1 ) and IsLive ( BloodGods [ x ] ) then
8093: LD_LOC 14
8097: PUSH
8098: LD_VAR 0 2
8102: ARRAY
8103: PUSH
8104: LD_INT 1
8106: NEG
8107: GREATER
8108: PUSH
8109: LD_LOC 14
8113: PUSH
8114: LD_VAR 0 2
8118: ARRAY
8119: PPUSH
8120: CALL_OW 300
8124: AND
8125: IFFALSE 8220
// begin BGL := GetLives ( BloodGods [ x ] ) ;
8127: LD_ADDR_VAR 0 1
8131: PUSH
8132: LD_LOC 14
8136: PUSH
8137: LD_VAR 0 2
8141: ARRAY
8142: PPUSH
8143: CALL_OW 256
8147: ST_TO_ADDR
// if ( BGL < 1000 ) and ( BGL > 100 ) then
8148: LD_VAR 0 1
8152: PUSH
8153: LD_INT 1000
8155: LESS
8156: PUSH
8157: LD_VAR 0 1
8161: PUSH
8162: LD_INT 100
8164: GREATER
8165: AND
8166: IFFALSE 8220
// begin BGL := BGL + 10 ;
8168: LD_ADDR_VAR 0 1
8172: PUSH
8173: LD_VAR 0 1
8177: PUSH
8178: LD_INT 10
8180: PLUS
8181: ST_TO_ADDR
// if BGL > 1000 then
8182: LD_VAR 0 1
8186: PUSH
8187: LD_INT 1000
8189: GREATER
8190: IFFALSE 8200
// BGL := 1000 ;
8192: LD_ADDR_VAR 0 1
8196: PUSH
8197: LD_INT 1000
8199: ST_TO_ADDR
// SetLives ( BloodGods [ x ] , BGL ) ;
8200: LD_LOC 14
8204: PUSH
8205: LD_VAR 0 2
8209: ARRAY
8210: PPUSH
8211: LD_VAR 0 1
8215: PPUSH
8216: CALL_OW 234
// end ; end ;
8220: GO 8090
8222: POP
8223: POP
// end ;
8224: PPOPN 2
8226: END
// every 0 0$1 marked 200 do
8227: GO 8229
8229: DISABLE
// begin DisplayTimeWithKills ;
8230: CALL 8477 0 0
// enable ;
8234: ENABLE
// end ;
8235: END
// function AwakenBloodGod ( side , NoDialog ) ; begin
8236: LD_INT 0
8238: PPUSH
// uc_direction := Rand ( 0 , 5 ) ;
8239: LD_ADDR_OWVAR 24
8243: PUSH
8244: LD_INT 0
8246: PPUSH
8247: LD_INT 5
8249: PPUSH
8250: CALL_OW 12
8254: ST_TO_ADDR
// PrepareHuman ( 1 , class_soldier , 15 ) ;
8255: LD_INT 1
8257: PPUSH
8258: LD_INT 1
8260: PPUSH
8261: LD_INT 15
8263: PPUSH
8264: CALL_OW 380
// hc_importance := 106 ;
8268: LD_ADDR_OWVAR 32
8272: PUSH
8273: LD_INT 106
8275: ST_TO_ADDR
// hc_name := Blood God of  & mp_sides_players_names [ side ] ;
8276: LD_ADDR_OWVAR 26
8280: PUSH
8281: LD_STRING Blood God of 
8283: PUSH
8284: LD_OWVAR 19
8288: PUSH
8289: LD_VAR 0 1
8293: ARRAY
8294: STR
8295: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
8296: LD_ADDR_OWVAR 21
8300: PUSH
8301: LD_EXP 39
8305: PUSH
8306: LD_VAR 0 1
8310: ARRAY
8311: ST_TO_ADDR
// uc_side := side ;
8312: LD_ADDR_OWVAR 20
8316: PUSH
8317: LD_VAR 0 1
8321: ST_TO_ADDR
// hc_noskilllimit := true ;
8322: LD_ADDR_OWVAR 76
8326: PUSH
8327: LD_INT 1
8329: ST_TO_ADDR
// hc_agressivity := 50 ;
8330: LD_ADDR_OWVAR 35
8334: PUSH
8335: LD_INT 50
8337: ST_TO_ADDR
// BloodGods := Replace ( BloodGods , Side , CreateHuman ) ;
8338: LD_ADDR_LOC 14
8342: PUSH
8343: LD_LOC 14
8347: PPUSH
8348: LD_VAR 0 1
8352: PPUSH
8353: CALL_OW 44
8357: PPUSH
8358: CALL_OW 1
8362: ST_TO_ADDR
// PlaceUnitXYR ( BloodGods [ side ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 1 ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 2 ] , 10 , false ) ;
8363: LD_LOC 14
8367: PUSH
8368: LD_VAR 0 1
8372: ARRAY
8373: PPUSH
8374: LD_LOC 17
8378: PUSH
8379: LD_EXP 38
8383: PUSH
8384: LD_VAR 0 1
8388: ARRAY
8389: ARRAY
8390: PUSH
8391: LD_INT 1
8393: ARRAY
8394: PPUSH
8395: LD_LOC 17
8399: PUSH
8400: LD_EXP 38
8404: PUSH
8405: LD_VAR 0 1
8409: ARRAY
8410: ARRAY
8411: PUSH
8412: LD_INT 2
8414: ARRAY
8415: PPUSH
8416: LD_INT 10
8418: PPUSH
8419: LD_INT 0
8421: PPUSH
8422: CALL_OW 50
// SetAttr ( BloodGods [ side ] , attr_stamina , 300 ) ;
8426: LD_LOC 14
8430: PUSH
8431: LD_VAR 0 1
8435: ARRAY
8436: PPUSH
8437: LD_INT 1
8439: PPUSH
8440: LD_INT 300
8442: PPUSH
8443: CALL_OW 239
// if not NoDialog then
8447: LD_VAR 0 2
8451: NOT
8452: IFFALSE 8472
// SayRadio ( BloodGods [ side ] , DLAwaken ) ;
8454: LD_LOC 14
8458: PUSH
8459: LD_VAR 0 1
8463: ARRAY
8464: PPUSH
8465: LD_STRING DLAwaken
8467: PPUSH
8468: CALL_OW 94
// end ;
8472: LD_VAR 0 3
8476: RET
// function DisplayTimeWithKills ; var x ; begin
8477: LD_INT 0
8479: PPUSH
8480: PPUSH
// ExtraStrings :=  ;
8481: LD_ADDR_EXP 60
8485: PUSH
8486: LD_STRING 
8488: ST_TO_ADDR
// for x = 1 to Side_Positions do
8489: LD_ADDR_VAR 0 2
8493: PUSH
8494: DOUBLE
8495: LD_INT 1
8497: DEC
8498: ST_TO_ADDR
8499: LD_EXP 38
8503: PUSH
8504: FOR_TO
8505: IFFALSE 8738
// if Side_Positions [ x ] then
8507: LD_EXP 38
8511: PUSH
8512: LD_VAR 0 2
8516: ARRAY
8517: IFFALSE 8736
// begin BloodGods_CurrentKills := Replace ( BloodGods_CurrentKills , x , GetHumansKilled ( x ) - BloodGods_LastKills [ x ] ) ;
8519: LD_ADDR_LOC 16
8523: PUSH
8524: LD_LOC 16
8528: PPUSH
8529: LD_VAR 0 2
8533: PPUSH
8534: LD_VAR 0 2
8538: PPUSH
8539: CALL_OW 515
8543: PUSH
8544: LD_LOC 15
8548: PUSH
8549: LD_VAR 0 2
8553: ARRAY
8554: MINUS
8555: PPUSH
8556: CALL_OW 1
8560: ST_TO_ADDR
// if ( BloodGods [ x ] > - 1 ) and ( IsLive ( BloodGods [ x ] ) ) then
8561: LD_LOC 14
8565: PUSH
8566: LD_VAR 0 2
8570: ARRAY
8571: PUSH
8572: LD_INT 1
8574: NEG
8575: GREATER
8576: PUSH
8577: LD_LOC 14
8581: PUSH
8582: LD_VAR 0 2
8586: ARRAY
8587: PPUSH
8588: CALL_OW 300
8592: AND
8593: IFFALSE 8626
// ExtraStrings = ExtraStrings ^ [ #godawoken , x , x ] else
8595: LD_ADDR_EXP 60
8599: PUSH
8600: LD_EXP 60
8604: PUSH
8605: LD_STRING #godawoken
8607: PUSH
8608: LD_VAR 0 2
8612: PUSH
8613: LD_VAR 0 2
8617: PUSH
8618: EMPTY
8619: LIST
8620: LIST
8621: LIST
8622: ADD
8623: ST_TO_ADDR
8624: GO 8736
// if ( BloodGods [ x ] > - 1 ) and ( IsDead ( BloodGods [ x ] ) ) then
8626: LD_LOC 14
8630: PUSH
8631: LD_VAR 0 2
8635: ARRAY
8636: PUSH
8637: LD_INT 1
8639: NEG
8640: GREATER
8641: PUSH
8642: LD_LOC 14
8646: PUSH
8647: LD_VAR 0 2
8651: ARRAY
8652: PPUSH
8653: CALL_OW 301
8657: AND
8658: IFFALSE 8691
// ExtraStrings = ExtraStrings ^ [ #goddied , x , x ] else
8660: LD_ADDR_EXP 60
8664: PUSH
8665: LD_EXP 60
8669: PUSH
8670: LD_STRING #goddied
8672: PUSH
8673: LD_VAR 0 2
8677: PUSH
8678: LD_VAR 0 2
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: LIST
8687: ADD
8688: ST_TO_ADDR
8689: GO 8736
// ExtraStrings = ExtraStrings ^ [ #godssacrifise , x , x , BloodGods_CurrentKills [ x ] , 6 ] end ;
8691: LD_ADDR_EXP 60
8695: PUSH
8696: LD_EXP 60
8700: PUSH
8701: LD_STRING #godssacrifise
8703: PUSH
8704: LD_VAR 0 2
8708: PUSH
8709: LD_VAR 0 2
8713: PUSH
8714: LD_LOC 16
8718: PUSH
8719: LD_VAR 0 2
8723: ARRAY
8724: PUSH
8725: LD_INT 6
8727: PUSH
8728: EMPTY
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: ADD
8735: ST_TO_ADDR
8736: GO 8504
8738: POP
8739: POP
// end ;
8740: LD_VAR 0 1
8744: RET
// export function InitBloodGods ; begin
8745: LD_INT 0
8747: PPUSH
// BloodGods = [ - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 ] ;
8748: LD_ADDR_LOC 14
8752: PUSH
8753: LD_INT 1
8755: NEG
8756: PUSH
8757: LD_INT 1
8759: NEG
8760: PUSH
8761: LD_INT 1
8763: NEG
8764: PUSH
8765: LD_INT 1
8767: NEG
8768: PUSH
8769: LD_INT 1
8771: NEG
8772: PUSH
8773: LD_INT 1
8775: NEG
8776: PUSH
8777: LD_INT 1
8779: NEG
8780: PUSH
8781: LD_INT 1
8783: NEG
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: LIST
8794: ST_TO_ADDR
// BloodGods_LastKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8795: LD_ADDR_LOC 15
8799: PUSH
8800: LD_INT 0
8802: PUSH
8803: LD_INT 0
8805: PUSH
8806: LD_INT 0
8808: PUSH
8809: LD_INT 0
8811: PUSH
8812: LD_INT 0
8814: PUSH
8815: LD_INT 0
8817: PUSH
8818: LD_INT 0
8820: PUSH
8821: LD_INT 0
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: ST_TO_ADDR
// BloodGods_CurrentKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8834: LD_ADDR_LOC 16
8838: PUSH
8839: LD_INT 0
8841: PUSH
8842: LD_INT 0
8844: PUSH
8845: LD_INT 0
8847: PUSH
8848: LD_INT 0
8850: PUSH
8851: LD_INT 0
8853: PUSH
8854: LD_INT 0
8856: PUSH
8857: LD_INT 0
8859: PUSH
8860: LD_INT 0
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: ST_TO_ADDR
// BloodGods_Positions = [ [ 60 , 47 ] , [ 82 , 26 ] , [ 124 , 45 ] , [ 147 , 90 ] , [ 126 , 112 ] , [ 84 , 92 ] , [ 106 , 73 ] , [ 106 , 73 ] ] ;
8873: LD_ADDR_LOC 17
8877: PUSH
8878: LD_INT 60
8880: PUSH
8881: LD_INT 47
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: PUSH
8888: LD_INT 82
8890: PUSH
8891: LD_INT 26
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: PUSH
8898: LD_INT 124
8900: PUSH
8901: LD_INT 45
8903: PUSH
8904: EMPTY
8905: LIST
8906: LIST
8907: PUSH
8908: LD_INT 147
8910: PUSH
8911: LD_INT 90
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: PUSH
8918: LD_INT 126
8920: PUSH
8921: LD_INT 112
8923: PUSH
8924: EMPTY
8925: LIST
8926: LIST
8927: PUSH
8928: LD_INT 84
8930: PUSH
8931: LD_INT 92
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: PUSH
8938: LD_INT 106
8940: PUSH
8941: LD_INT 73
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: PUSH
8948: LD_INT 106
8950: PUSH
8951: LD_INT 73
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: ST_TO_ADDR
// ClearHumansKilled ;
8968: CALL_OW 516
// enable ( 200 ) ;
8972: LD_INT 200
8974: ENABLE_MARKED
// end ; end_of_file
8975: LD_VAR 0 1
8979: RET
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
8980: LD_INT 0
8982: PPUSH
8983: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
8984: LD_ADDR_VAR 0 2
8988: PUSH
8989: LD_STRING #Multi1x1-Time
8991: PUSH
8992: LD_OWVAR 1
8996: PUSH
8997: EMPTY
8998: LIST
8999: LIST
9000: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
9001: LD_INT 0
9003: PUSH
9004: LD_EXP 34
9008: PUSH
9009: LD_OWVAR 1
9013: MINUS
9014: LESSEQUAL
9015: IFFALSE 9046
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
9017: LD_ADDR_VAR 0 2
9021: PUSH
9022: LD_VAR 0 2
9026: PUSH
9027: LD_STRING #allowedsibbomb
9029: PUSH
9030: LD_EXP 34
9034: PUSH
9035: LD_OWVAR 1
9039: MINUS
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: ADD
9045: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
9046: LD_INT 0
9048: PUSH
9049: LD_EXP 64
9053: PUSH
9054: LD_OWVAR 1
9058: MINUS
9059: LESSEQUAL
9060: IFFALSE 9091
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
9062: LD_ADDR_VAR 0 2
9066: PUSH
9067: LD_VAR 0 2
9071: PUSH
9072: LD_STRING #builduptime
9074: PUSH
9075: LD_EXP 64
9079: PUSH
9080: LD_OWVAR 1
9084: MINUS
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: ADD
9090: ST_TO_ADDR
// if ( ExtraStrings ) then
9091: LD_EXP 60
9095: IFFALSE 9117
// AllStrings := AllStrings ^  ^ ExtraStrings ;
9097: LD_ADDR_VAR 0 2
9101: PUSH
9102: LD_VAR 0 2
9106: PUSH
9107: LD_STRING 
9109: ADD
9110: PUSH
9111: LD_EXP 60
9115: ADD
9116: ST_TO_ADDR
// Display_Strings := AllStrings ;
9117: LD_ADDR_OWVAR 47
9121: PUSH
9122: LD_VAR 0 2
9126: ST_TO_ADDR
// end ;
9127: LD_VAR 0 1
9131: RET
// every 0 0$1 do
9132: GO 9134
9134: DISABLE
// begin ShowTimer ;
9135: CALL 8980 0 0
// enable ;
9139: ENABLE
// end ; end_of_file
9140: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
9141: LD_INT 0
9143: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
9144: LD_VAR 0 1
9148: PPUSH
9149: CALL_OW 255
9153: PUSH
9154: LD_VAR 0 4
9158: EQUAL
9159: IFFALSE 9178
// begin SetAchievement ( ACH_RAD ) ;
9161: LD_STRING ACH_RAD
9163: PPUSH
9164: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
9168: LD_STRING ACH_NL
9170: PPUSH
9171: LD_INT 1
9173: PPUSH
9174: CALL_OW 564
// end end ;
9178: LD_VAR 0 5
9182: RET
// export function SA_Win ( side ) ; begin
9183: LD_INT 0
9185: PPUSH
// case side of 1 :
9186: LD_VAR 0 1
9190: PUSH
9191: LD_INT 1
9193: DOUBLE
9194: EQUAL
9195: IFTRUE 9199
9197: GO 9212
9199: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
9200: LD_STRING ACH_AH
9202: PPUSH
9203: LD_INT 1
9205: PPUSH
9206: CALL_OW 564
9210: GO 9375
9212: LD_INT 2
9214: DOUBLE
9215: EQUAL
9216: IFTRUE 9220
9218: GO 9233
9220: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
9221: LD_STRING ACH_E
9223: PPUSH
9224: LD_INT 1
9226: PPUSH
9227: CALL_OW 564
9231: GO 9375
9233: LD_INT 3
9235: DOUBLE
9236: EQUAL
9237: IFTRUE 9241
9239: GO 9254
9241: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
9242: LD_STRING ACH_OOL
9244: PPUSH
9245: LD_INT 1
9247: PPUSH
9248: CALL_OW 564
9252: GO 9375
9254: LD_INT 1
9256: PUSH
9257: LD_INT 2
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: DOUBLE
9264: EQUAL
9265: IFTRUE 9269
9267: GO 9294
9269: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
9270: LD_STRING ACH_AH
9272: PPUSH
9273: LD_REAL  5.00000000000000E-0001
9276: PPUSH
9277: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
9281: LD_STRING ACH_E
9283: PPUSH
9284: LD_REAL  5.00000000000000E-0001
9287: PPUSH
9288: CALL_OW 564
// end ; [ 2 , 3 ] :
9292: GO 9375
9294: LD_INT 2
9296: PUSH
9297: LD_INT 3
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: DOUBLE
9304: EQUAL
9305: IFTRUE 9309
9307: GO 9334
9309: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
9310: LD_STRING ACH_OOL
9312: PPUSH
9313: LD_REAL  5.00000000000000E-0001
9316: PPUSH
9317: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
9321: LD_STRING ACH_E
9323: PPUSH
9324: LD_REAL  5.00000000000000E-0001
9327: PPUSH
9328: CALL_OW 564
// end ; [ 3 , 1 ] :
9332: GO 9375
9334: LD_INT 3
9336: PUSH
9337: LD_INT 1
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: DOUBLE
9344: EQUAL
9345: IFTRUE 9349
9347: GO 9374
9349: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
9350: LD_STRING ACH_AH
9352: PPUSH
9353: LD_REAL  5.00000000000000E-0001
9356: PPUSH
9357: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
9361: LD_STRING ACH_OOL
9363: PPUSH
9364: LD_REAL  5.00000000000000E-0001
9367: PPUSH
9368: CALL_OW 564
// end ; end ;
9372: GO 9375
9374: POP
// end ; end_of_file
9375: LD_VAR 0 2
9379: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9380: LD_INT 0
9382: PPUSH
9383: PPUSH
9384: PPUSH
// for side = 1 to 8 do
9385: LD_ADDR_VAR 0 2
9389: PUSH
9390: DOUBLE
9391: LD_INT 1
9393: DEC
9394: ST_TO_ADDR
9395: LD_INT 8
9397: PUSH
9398: FOR_TO
9399: IFFALSE 9520
// begin for i = 1 to 72 do
9401: LD_ADDR_VAR 0 3
9405: PUSH
9406: DOUBLE
9407: LD_INT 1
9409: DEC
9410: ST_TO_ADDR
9411: LD_INT 72
9413: PUSH
9414: FOR_TO
9415: IFFALSE 9446
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9417: LD_VAR 0 3
9421: PPUSH
9422: LD_VAR 0 2
9426: PPUSH
9427: LD_INT 0
9429: PPUSH
9430: LD_VAR 0 3
9434: PPUSH
9435: CALL_OW 565
9439: PPUSH
9440: CALL_OW 322
9444: GO 9414
9446: POP
9447: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9448: LD_INT 73
9450: PPUSH
9451: LD_VAR 0 2
9455: PPUSH
9456: LD_INT 0
9458: PPUSH
9459: LD_INT 25
9461: PPUSH
9462: CALL_OW 565
9466: PPUSH
9467: CALL_OW 322
// for i = 0 to 40 do
9471: LD_ADDR_VAR 0 3
9475: PUSH
9476: DOUBLE
9477: LD_INT 0
9479: DEC
9480: ST_TO_ADDR
9481: LD_INT 40
9483: PUSH
9484: FOR_TO
9485: IFFALSE 9516
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9487: LD_VAR 0 3
9491: PPUSH
9492: LD_VAR 0 2
9496: PPUSH
9497: LD_INT 1
9499: PPUSH
9500: LD_VAR 0 3
9504: PPUSH
9505: CALL_OW 565
9509: PPUSH
9510: CALL_OW 324
9514: GO 9484
9516: POP
9517: POP
// end ;
9518: GO 9398
9520: POP
9521: POP
// end ;
9522: LD_VAR 0 1
9526: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9527: LD_INT 0
9529: PPUSH
9530: PPUSH
9531: PPUSH
// for side = 1 to 8 do
9532: LD_ADDR_VAR 0 3
9536: PUSH
9537: DOUBLE
9538: LD_INT 1
9540: DEC
9541: ST_TO_ADDR
9542: LD_INT 8
9544: PUSH
9545: FOR_TO
9546: IFFALSE 13542
// begin for i = 1 to 73 do
9548: LD_ADDR_VAR 0 4
9552: PUSH
9553: DOUBLE
9554: LD_INT 1
9556: DEC
9557: ST_TO_ADDR
9558: LD_INT 73
9560: PUSH
9561: FOR_TO
9562: IFFALSE 9583
// SetTech ( i , side , state_disabled ) ;
9564: LD_VAR 0 4
9568: PPUSH
9569: LD_VAR 0 3
9573: PPUSH
9574: LD_INT 0
9576: PPUSH
9577: CALL_OW 322
9581: GO 9561
9583: POP
9584: POP
// for i = 0 to 40 do
9585: LD_ADDR_VAR 0 4
9589: PUSH
9590: DOUBLE
9591: LD_INT 0
9593: DEC
9594: ST_TO_ADDR
9595: LD_INT 40
9597: PUSH
9598: FOR_TO
9599: IFFALSE 9620
// SetRestrict ( i , side , false ) ;
9601: LD_VAR 0 4
9605: PPUSH
9606: LD_VAR 0 3
9610: PPUSH
9611: LD_INT 0
9613: PPUSH
9614: CALL_OW 324
9618: GO 9598
9620: POP
9621: POP
// case level of 1 :
9622: LD_VAR 0 1
9626: PUSH
9627: LD_INT 1
9629: DOUBLE
9630: EQUAL
9631: IFTRUE 9635
9633: GO 9788
9635: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9636: LD_INT 35
9638: PPUSH
9639: LD_VAR 0 3
9643: PPUSH
9644: LD_INT 1
9646: PPUSH
9647: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9651: LD_INT 45
9653: PPUSH
9654: LD_VAR 0 3
9658: PPUSH
9659: LD_INT 1
9661: PPUSH
9662: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9666: LD_INT 46
9668: PPUSH
9669: LD_VAR 0 3
9673: PPUSH
9674: LD_INT 1
9676: PPUSH
9677: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9681: LD_INT 47
9683: PPUSH
9684: LD_VAR 0 3
9688: PPUSH
9689: LD_INT 1
9691: PPUSH
9692: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9696: LD_INT 0
9698: PPUSH
9699: LD_VAR 0 3
9703: PPUSH
9704: LD_INT 1
9706: PPUSH
9707: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9711: LD_INT 2
9713: PPUSH
9714: LD_VAR 0 3
9718: PPUSH
9719: LD_INT 1
9721: PPUSH
9722: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9726: LD_INT 4
9728: PPUSH
9729: LD_VAR 0 3
9733: PPUSH
9734: LD_INT 1
9736: PPUSH
9737: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9741: LD_INT 6
9743: PPUSH
9744: LD_VAR 0 3
9748: PPUSH
9749: LD_INT 1
9751: PPUSH
9752: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9756: LD_INT 29
9758: PPUSH
9759: LD_VAR 0 3
9763: PPUSH
9764: LD_INT 1
9766: PPUSH
9767: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9771: LD_INT 31
9773: PPUSH
9774: LD_VAR 0 3
9778: PPUSH
9779: LD_INT 1
9781: PPUSH
9782: CALL_OW 324
// end ; 2 :
9786: GO 13540
9788: LD_INT 2
9790: DOUBLE
9791: EQUAL
9792: IFTRUE 9796
9794: GO 9994
9796: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9797: LD_INT 35
9799: PPUSH
9800: LD_VAR 0 3
9804: PPUSH
9805: LD_INT 1
9807: PPUSH
9808: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9812: LD_INT 45
9814: PPUSH
9815: LD_VAR 0 3
9819: PPUSH
9820: LD_INT 1
9822: PPUSH
9823: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9827: LD_INT 46
9829: PPUSH
9830: LD_VAR 0 3
9834: PPUSH
9835: LD_INT 1
9837: PPUSH
9838: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9842: LD_INT 47
9844: PPUSH
9845: LD_VAR 0 3
9849: PPUSH
9850: LD_INT 1
9852: PPUSH
9853: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9857: LD_INT 1
9859: PPUSH
9860: LD_VAR 0 3
9864: PPUSH
9865: LD_INT 1
9867: PPUSH
9868: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9872: LD_INT 2
9874: PPUSH
9875: LD_VAR 0 3
9879: PPUSH
9880: LD_INT 1
9882: PPUSH
9883: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9887: LD_INT 11
9889: PPUSH
9890: LD_VAR 0 3
9894: PPUSH
9895: LD_INT 1
9897: PPUSH
9898: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9902: LD_INT 0
9904: PPUSH
9905: LD_VAR 0 3
9909: PPUSH
9910: LD_INT 1
9912: PPUSH
9913: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9917: LD_INT 2
9919: PPUSH
9920: LD_VAR 0 3
9924: PPUSH
9925: LD_INT 1
9927: PPUSH
9928: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9932: LD_INT 4
9934: PPUSH
9935: LD_VAR 0 3
9939: PPUSH
9940: LD_INT 1
9942: PPUSH
9943: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9947: LD_INT 6
9949: PPUSH
9950: LD_VAR 0 3
9954: PPUSH
9955: LD_INT 1
9957: PPUSH
9958: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9962: LD_INT 29
9964: PPUSH
9965: LD_VAR 0 3
9969: PPUSH
9970: LD_INT 1
9972: PPUSH
9973: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9977: LD_INT 31
9979: PPUSH
9980: LD_VAR 0 3
9984: PPUSH
9985: LD_INT 1
9987: PPUSH
9988: CALL_OW 324
// end ; 3 :
9992: GO 13540
9994: LD_INT 3
9996: DOUBLE
9997: EQUAL
9998: IFTRUE 10002
10000: GO 10455
10002: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10003: LD_INT 35
10005: PPUSH
10006: LD_VAR 0 3
10010: PPUSH
10011: LD_INT 1
10013: PPUSH
10014: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10018: LD_INT 45
10020: PPUSH
10021: LD_VAR 0 3
10025: PPUSH
10026: LD_INT 1
10028: PPUSH
10029: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10033: LD_INT 46
10035: PPUSH
10036: LD_VAR 0 3
10040: PPUSH
10041: LD_INT 1
10043: PPUSH
10044: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10048: LD_INT 47
10050: PPUSH
10051: LD_VAR 0 3
10055: PPUSH
10056: LD_INT 1
10058: PPUSH
10059: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10063: LD_INT 1
10065: PPUSH
10066: LD_VAR 0 3
10070: PPUSH
10071: LD_INT 1
10073: PPUSH
10074: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10078: LD_INT 2
10080: PPUSH
10081: LD_VAR 0 3
10085: PPUSH
10086: LD_INT 1
10088: PPUSH
10089: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10093: LD_INT 11
10095: PPUSH
10096: LD_VAR 0 3
10100: PPUSH
10101: LD_INT 1
10103: PPUSH
10104: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10108: LD_INT 48
10110: PPUSH
10111: LD_VAR 0 3
10115: PPUSH
10116: LD_INT 1
10118: PPUSH
10119: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10123: LD_INT 69
10125: PPUSH
10126: LD_VAR 0 3
10130: PPUSH
10131: LD_INT 1
10133: PPUSH
10134: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10138: LD_INT 39
10140: PPUSH
10141: LD_VAR 0 3
10145: PPUSH
10146: LD_INT 1
10148: PPUSH
10149: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10153: LD_INT 43
10155: PPUSH
10156: LD_VAR 0 3
10160: PPUSH
10161: LD_INT 1
10163: PPUSH
10164: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10168: LD_INT 51
10170: PPUSH
10171: LD_VAR 0 3
10175: PPUSH
10176: LD_INT 1
10178: PPUSH
10179: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10183: LD_INT 6
10185: PPUSH
10186: LD_VAR 0 3
10190: PPUSH
10191: LD_INT 1
10193: PPUSH
10194: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10198: LD_INT 0
10200: PPUSH
10201: LD_VAR 0 3
10205: PPUSH
10206: LD_INT 1
10208: PPUSH
10209: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10213: LD_INT 2
10215: PPUSH
10216: LD_VAR 0 3
10220: PPUSH
10221: LD_INT 1
10223: PPUSH
10224: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10228: LD_INT 3
10230: PPUSH
10231: LD_VAR 0 3
10235: PPUSH
10236: LD_INT 1
10238: PPUSH
10239: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10243: LD_INT 4
10245: PPUSH
10246: LD_VAR 0 3
10250: PPUSH
10251: LD_INT 1
10253: PPUSH
10254: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10258: LD_INT 6
10260: PPUSH
10261: LD_VAR 0 3
10265: PPUSH
10266: LD_INT 1
10268: PPUSH
10269: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10273: LD_INT 7
10275: PPUSH
10276: LD_VAR 0 3
10280: PPUSH
10281: LD_INT 1
10283: PPUSH
10284: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10288: LD_INT 8
10290: PPUSH
10291: LD_VAR 0 3
10295: PPUSH
10296: LD_INT 1
10298: PPUSH
10299: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10303: LD_INT 10
10305: PPUSH
10306: LD_VAR 0 3
10310: PPUSH
10311: LD_INT 1
10313: PPUSH
10314: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10318: LD_INT 15
10320: PPUSH
10321: LD_VAR 0 3
10325: PPUSH
10326: LD_INT 1
10328: PPUSH
10329: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10333: LD_INT 16
10335: PPUSH
10336: LD_VAR 0 3
10340: PPUSH
10341: LD_INT 1
10343: PPUSH
10344: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10348: LD_INT 17
10350: PPUSH
10351: LD_VAR 0 3
10355: PPUSH
10356: LD_INT 1
10358: PPUSH
10359: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10363: LD_INT 20
10365: PPUSH
10366: LD_VAR 0 3
10370: PPUSH
10371: LD_INT 1
10373: PPUSH
10374: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10378: LD_INT 26
10380: PPUSH
10381: LD_VAR 0 3
10385: PPUSH
10386: LD_INT 1
10388: PPUSH
10389: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10393: LD_INT 27
10395: PPUSH
10396: LD_VAR 0 3
10400: PPUSH
10401: LD_INT 1
10403: PPUSH
10404: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10408: LD_INT 29
10410: PPUSH
10411: LD_VAR 0 3
10415: PPUSH
10416: LD_INT 1
10418: PPUSH
10419: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10423: LD_INT 31
10425: PPUSH
10426: LD_VAR 0 3
10430: PPUSH
10431: LD_INT 1
10433: PPUSH
10434: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10438: LD_INT 32
10440: PPUSH
10441: LD_VAR 0 3
10445: PPUSH
10446: LD_INT 1
10448: PPUSH
10449: CALL_OW 324
// end ; 4 :
10453: GO 13540
10455: LD_INT 4
10457: DOUBLE
10458: EQUAL
10459: IFTRUE 10463
10461: GO 11411
10463: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10464: LD_INT 35
10466: PPUSH
10467: LD_VAR 0 3
10471: PPUSH
10472: LD_INT 1
10474: PPUSH
10475: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10479: LD_INT 45
10481: PPUSH
10482: LD_VAR 0 3
10486: PPUSH
10487: LD_INT 1
10489: PPUSH
10490: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10494: LD_INT 46
10496: PPUSH
10497: LD_VAR 0 3
10501: PPUSH
10502: LD_INT 1
10504: PPUSH
10505: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10509: LD_INT 47
10511: PPUSH
10512: LD_VAR 0 3
10516: PPUSH
10517: LD_INT 1
10519: PPUSH
10520: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10524: LD_INT 1
10526: PPUSH
10527: LD_VAR 0 3
10531: PPUSH
10532: LD_INT 1
10534: PPUSH
10535: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10539: LD_INT 2
10541: PPUSH
10542: LD_VAR 0 3
10546: PPUSH
10547: LD_INT 1
10549: PPUSH
10550: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10554: LD_INT 11
10556: PPUSH
10557: LD_VAR 0 3
10561: PPUSH
10562: LD_INT 1
10564: PPUSH
10565: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10569: LD_INT 20
10571: PPUSH
10572: LD_VAR 0 3
10576: PPUSH
10577: LD_INT 1
10579: PPUSH
10580: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10584: LD_INT 48
10586: PPUSH
10587: LD_VAR 0 3
10591: PPUSH
10592: LD_INT 1
10594: PPUSH
10595: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10599: LD_INT 49
10601: PPUSH
10602: LD_VAR 0 3
10606: PPUSH
10607: LD_INT 1
10609: PPUSH
10610: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10614: LD_INT 69
10616: PPUSH
10617: LD_VAR 0 3
10621: PPUSH
10622: LD_INT 1
10624: PPUSH
10625: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10629: LD_INT 39
10631: PPUSH
10632: LD_VAR 0 3
10636: PPUSH
10637: LD_INT 1
10639: PPUSH
10640: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10644: LD_INT 34
10646: PPUSH
10647: LD_VAR 0 3
10651: PPUSH
10652: LD_INT 1
10654: PPUSH
10655: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10659: LD_INT 42
10661: PPUSH
10662: LD_VAR 0 3
10666: PPUSH
10667: LD_INT 1
10669: PPUSH
10670: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10674: LD_INT 44
10676: PPUSH
10677: LD_VAR 0 3
10681: PPUSH
10682: LD_INT 1
10684: PPUSH
10685: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10689: LD_INT 41
10691: PPUSH
10692: LD_VAR 0 3
10696: PPUSH
10697: LD_INT 1
10699: PPUSH
10700: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10704: LD_INT 43
10706: PPUSH
10707: LD_VAR 0 3
10711: PPUSH
10712: LD_INT 1
10714: PPUSH
10715: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10719: LD_INT 70
10721: PPUSH
10722: LD_VAR 0 3
10726: PPUSH
10727: LD_INT 1
10729: PPUSH
10730: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10734: LD_INT 51
10736: PPUSH
10737: LD_VAR 0 3
10741: PPUSH
10742: LD_INT 1
10744: PPUSH
10745: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10749: LD_INT 52
10751: PPUSH
10752: LD_VAR 0 3
10756: PPUSH
10757: LD_INT 1
10759: PPUSH
10760: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10764: LD_INT 6
10766: PPUSH
10767: LD_VAR 0 3
10771: PPUSH
10772: LD_INT 1
10774: PPUSH
10775: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10779: LD_INT 15
10781: PPUSH
10782: LD_VAR 0 3
10786: PPUSH
10787: LD_INT 1
10789: PPUSH
10790: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10794: LD_INT 7
10796: PPUSH
10797: LD_VAR 0 3
10801: PPUSH
10802: LD_INT 1
10804: PPUSH
10805: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10809: LD_INT 12
10811: PPUSH
10812: LD_VAR 0 3
10816: PPUSH
10817: LD_INT 1
10819: PPUSH
10820: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10824: LD_INT 18
10826: PPUSH
10827: LD_VAR 0 3
10831: PPUSH
10832: LD_INT 1
10834: PPUSH
10835: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10839: LD_INT 60
10841: PPUSH
10842: LD_VAR 0 3
10846: PPUSH
10847: LD_INT 1
10849: PPUSH
10850: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10854: LD_INT 9
10856: PPUSH
10857: LD_VAR 0 3
10861: PPUSH
10862: LD_INT 1
10864: PPUSH
10865: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10869: LD_INT 30
10871: PPUSH
10872: LD_VAR 0 3
10876: PPUSH
10877: LD_INT 1
10879: PPUSH
10880: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10884: LD_INT 37
10886: PPUSH
10887: LD_VAR 0 3
10891: PPUSH
10892: LD_INT 1
10894: PPUSH
10895: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10899: LD_INT 5
10901: PPUSH
10902: LD_VAR 0 3
10906: PPUSH
10907: LD_INT 1
10909: PPUSH
10910: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10914: LD_INT 66
10916: PPUSH
10917: LD_VAR 0 3
10921: PPUSH
10922: LD_INT 1
10924: PPUSH
10925: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10929: LD_INT 21
10931: PPUSH
10932: LD_VAR 0 3
10936: PPUSH
10937: LD_INT 1
10939: PPUSH
10940: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10944: LD_INT 22
10946: PPUSH
10947: LD_VAR 0 3
10951: PPUSH
10952: LD_INT 1
10954: PPUSH
10955: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10959: LD_INT 54
10961: PPUSH
10962: LD_VAR 0 3
10966: PPUSH
10967: LD_INT 1
10969: PPUSH
10970: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10974: LD_INT 0
10976: PPUSH
10977: LD_VAR 0 3
10981: PPUSH
10982: LD_INT 1
10984: PPUSH
10985: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10989: LD_INT 1
10991: PPUSH
10992: LD_VAR 0 3
10996: PPUSH
10997: LD_INT 1
10999: PPUSH
11000: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11004: LD_INT 2
11006: PPUSH
11007: LD_VAR 0 3
11011: PPUSH
11012: LD_INT 1
11014: PPUSH
11015: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11019: LD_INT 3
11021: PPUSH
11022: LD_VAR 0 3
11026: PPUSH
11027: LD_INT 1
11029: PPUSH
11030: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11034: LD_INT 4
11036: PPUSH
11037: LD_VAR 0 3
11041: PPUSH
11042: LD_INT 1
11044: PPUSH
11045: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11049: LD_INT 5
11051: PPUSH
11052: LD_VAR 0 3
11056: PPUSH
11057: LD_INT 1
11059: PPUSH
11060: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11064: LD_INT 6
11066: PPUSH
11067: LD_VAR 0 3
11071: PPUSH
11072: LD_INT 1
11074: PPUSH
11075: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11079: LD_INT 7
11081: PPUSH
11082: LD_VAR 0 3
11086: PPUSH
11087: LD_INT 1
11089: PPUSH
11090: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11094: LD_INT 8
11096: PPUSH
11097: LD_VAR 0 3
11101: PPUSH
11102: LD_INT 1
11104: PPUSH
11105: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11109: LD_INT 10
11111: PPUSH
11112: LD_VAR 0 3
11116: PPUSH
11117: LD_INT 1
11119: PPUSH
11120: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11124: LD_INT 11
11126: PPUSH
11127: LD_VAR 0 3
11131: PPUSH
11132: LD_INT 1
11134: PPUSH
11135: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11139: LD_INT 12
11141: PPUSH
11142: LD_VAR 0 3
11146: PPUSH
11147: LD_INT 1
11149: PPUSH
11150: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11154: LD_INT 13
11156: PPUSH
11157: LD_VAR 0 3
11161: PPUSH
11162: LD_INT 1
11164: PPUSH
11165: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11169: LD_INT 14
11171: PPUSH
11172: LD_VAR 0 3
11176: PPUSH
11177: LD_INT 1
11179: PPUSH
11180: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11184: LD_INT 15
11186: PPUSH
11187: LD_VAR 0 3
11191: PPUSH
11192: LD_INT 1
11194: PPUSH
11195: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11199: LD_INT 16
11201: PPUSH
11202: LD_VAR 0 3
11206: PPUSH
11207: LD_INT 1
11209: PPUSH
11210: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11214: LD_INT 17
11216: PPUSH
11217: LD_VAR 0 3
11221: PPUSH
11222: LD_INT 1
11224: PPUSH
11225: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11229: LD_INT 19
11231: PPUSH
11232: LD_VAR 0 3
11236: PPUSH
11237: LD_INT 1
11239: PPUSH
11240: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11244: LD_INT 20
11246: PPUSH
11247: LD_VAR 0 3
11251: PPUSH
11252: LD_INT 1
11254: PPUSH
11255: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11259: LD_INT 21
11261: PPUSH
11262: LD_VAR 0 3
11266: PPUSH
11267: LD_INT 1
11269: PPUSH
11270: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11274: LD_INT 23
11276: PPUSH
11277: LD_VAR 0 3
11281: PPUSH
11282: LD_INT 1
11284: PPUSH
11285: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11289: LD_INT 26
11291: PPUSH
11292: LD_VAR 0 3
11296: PPUSH
11297: LD_INT 1
11299: PPUSH
11300: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11304: LD_INT 27
11306: PPUSH
11307: LD_VAR 0 3
11311: PPUSH
11312: LD_INT 1
11314: PPUSH
11315: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11319: LD_INT 28
11321: PPUSH
11322: LD_VAR 0 3
11326: PPUSH
11327: LD_INT 1
11329: PPUSH
11330: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11334: LD_INT 29
11336: PPUSH
11337: LD_VAR 0 3
11341: PPUSH
11342: LD_INT 1
11344: PPUSH
11345: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11349: LD_INT 30
11351: PPUSH
11352: LD_VAR 0 3
11356: PPUSH
11357: LD_INT 1
11359: PPUSH
11360: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11364: LD_INT 31
11366: PPUSH
11367: LD_VAR 0 3
11371: PPUSH
11372: LD_INT 1
11374: PPUSH
11375: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11379: LD_INT 32
11381: PPUSH
11382: LD_VAR 0 3
11386: PPUSH
11387: LD_INT 1
11389: PPUSH
11390: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11394: LD_INT 36
11396: PPUSH
11397: LD_VAR 0 3
11401: PPUSH
11402: LD_INT 1
11404: PPUSH
11405: CALL_OW 324
// end ; 5 :
11409: GO 13540
11411: LD_INT 5
11413: DOUBLE
11414: EQUAL
11415: IFTRUE 11419
11417: GO 12532
11419: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11420: LD_INT 35
11422: PPUSH
11423: LD_VAR 0 3
11427: PPUSH
11428: LD_INT 1
11430: PPUSH
11431: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11435: LD_INT 45
11437: PPUSH
11438: LD_VAR 0 3
11442: PPUSH
11443: LD_INT 1
11445: PPUSH
11446: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11450: LD_INT 46
11452: PPUSH
11453: LD_VAR 0 3
11457: PPUSH
11458: LD_INT 1
11460: PPUSH
11461: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11465: LD_INT 47
11467: PPUSH
11468: LD_VAR 0 3
11472: PPUSH
11473: LD_INT 1
11475: PPUSH
11476: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11480: LD_INT 1
11482: PPUSH
11483: LD_VAR 0 3
11487: PPUSH
11488: LD_INT 1
11490: PPUSH
11491: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11495: LD_INT 2
11497: PPUSH
11498: LD_VAR 0 3
11502: PPUSH
11503: LD_INT 1
11505: PPUSH
11506: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11510: LD_INT 11
11512: PPUSH
11513: LD_VAR 0 3
11517: PPUSH
11518: LD_INT 1
11520: PPUSH
11521: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11525: LD_INT 20
11527: PPUSH
11528: LD_VAR 0 3
11532: PPUSH
11533: LD_INT 1
11535: PPUSH
11536: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11540: LD_INT 48
11542: PPUSH
11543: LD_VAR 0 3
11547: PPUSH
11548: LD_INT 1
11550: PPUSH
11551: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11555: LD_INT 49
11557: PPUSH
11558: LD_VAR 0 3
11562: PPUSH
11563: LD_INT 1
11565: PPUSH
11566: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11570: LD_INT 69
11572: PPUSH
11573: LD_VAR 0 3
11577: PPUSH
11578: LD_INT 1
11580: PPUSH
11581: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11585: LD_INT 39
11587: PPUSH
11588: LD_VAR 0 3
11592: PPUSH
11593: LD_INT 1
11595: PPUSH
11596: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11600: LD_INT 34
11602: PPUSH
11603: LD_VAR 0 3
11607: PPUSH
11608: LD_INT 1
11610: PPUSH
11611: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11615: LD_INT 42
11617: PPUSH
11618: LD_VAR 0 3
11622: PPUSH
11623: LD_INT 1
11625: PPUSH
11626: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11630: LD_INT 44
11632: PPUSH
11633: LD_VAR 0 3
11637: PPUSH
11638: LD_INT 1
11640: PPUSH
11641: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11645: LD_INT 41
11647: PPUSH
11648: LD_VAR 0 3
11652: PPUSH
11653: LD_INT 1
11655: PPUSH
11656: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11660: LD_INT 40
11662: PPUSH
11663: LD_VAR 0 3
11667: PPUSH
11668: LD_INT 1
11670: PPUSH
11671: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11675: LD_INT 43
11677: PPUSH
11678: LD_VAR 0 3
11682: PPUSH
11683: LD_INT 1
11685: PPUSH
11686: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11690: LD_INT 70
11692: PPUSH
11693: LD_VAR 0 3
11697: PPUSH
11698: LD_INT 1
11700: PPUSH
11701: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11705: LD_INT 51
11707: PPUSH
11708: LD_VAR 0 3
11712: PPUSH
11713: LD_INT 1
11715: PPUSH
11716: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11720: LD_INT 52
11722: PPUSH
11723: LD_VAR 0 3
11727: PPUSH
11728: LD_INT 1
11730: PPUSH
11731: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11735: LD_INT 6
11737: PPUSH
11738: LD_VAR 0 3
11742: PPUSH
11743: LD_INT 1
11745: PPUSH
11746: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11750: LD_INT 15
11752: PPUSH
11753: LD_VAR 0 3
11757: PPUSH
11758: LD_INT 1
11760: PPUSH
11761: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11765: LD_INT 7
11767: PPUSH
11768: LD_VAR 0 3
11772: PPUSH
11773: LD_INT 1
11775: PPUSH
11776: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11780: LD_INT 12
11782: PPUSH
11783: LD_VAR 0 3
11787: PPUSH
11788: LD_INT 1
11790: PPUSH
11791: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11795: LD_INT 17
11797: PPUSH
11798: LD_VAR 0 3
11802: PPUSH
11803: LD_INT 1
11805: PPUSH
11806: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11810: LD_INT 18
11812: PPUSH
11813: LD_VAR 0 3
11817: PPUSH
11818: LD_INT 1
11820: PPUSH
11821: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11825: LD_INT 60
11827: PPUSH
11828: LD_VAR 0 3
11832: PPUSH
11833: LD_INT 1
11835: PPUSH
11836: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11840: LD_INT 32
11842: PPUSH
11843: LD_VAR 0 3
11847: PPUSH
11848: LD_INT 1
11850: PPUSH
11851: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11855: LD_INT 9
11857: PPUSH
11858: LD_VAR 0 3
11862: PPUSH
11863: LD_INT 1
11865: PPUSH
11866: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11870: LD_INT 57
11872: PPUSH
11873: LD_VAR 0 3
11877: PPUSH
11878: LD_INT 1
11880: PPUSH
11881: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11885: LD_INT 30
11887: PPUSH
11888: LD_VAR 0 3
11892: PPUSH
11893: LD_INT 1
11895: PPUSH
11896: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11900: LD_INT 37
11902: PPUSH
11903: LD_VAR 0 3
11907: PPUSH
11908: LD_INT 1
11910: PPUSH
11911: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11915: LD_INT 63
11917: PPUSH
11918: LD_VAR 0 3
11922: PPUSH
11923: LD_INT 1
11925: PPUSH
11926: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11930: LD_INT 3
11932: PPUSH
11933: LD_VAR 0 3
11937: PPUSH
11938: LD_INT 1
11940: PPUSH
11941: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11945: LD_INT 4
11947: PPUSH
11948: LD_VAR 0 3
11952: PPUSH
11953: LD_INT 1
11955: PPUSH
11956: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11960: LD_INT 5
11962: PPUSH
11963: LD_VAR 0 3
11967: PPUSH
11968: LD_INT 1
11970: PPUSH
11971: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11975: LD_INT 66
11977: PPUSH
11978: LD_VAR 0 3
11982: PPUSH
11983: LD_INT 1
11985: PPUSH
11986: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11990: LD_INT 21
11992: PPUSH
11993: LD_VAR 0 3
11997: PPUSH
11998: LD_INT 1
12000: PPUSH
12001: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12005: LD_INT 22
12007: PPUSH
12008: LD_VAR 0 3
12012: PPUSH
12013: LD_INT 1
12015: PPUSH
12016: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12020: LD_INT 19
12022: PPUSH
12023: LD_VAR 0 3
12027: PPUSH
12028: LD_INT 1
12030: PPUSH
12031: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12035: LD_INT 54
12037: PPUSH
12038: LD_VAR 0 3
12042: PPUSH
12043: LD_INT 1
12045: PPUSH
12046: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12050: LD_INT 55
12052: PPUSH
12053: LD_VAR 0 3
12057: PPUSH
12058: LD_INT 1
12060: PPUSH
12061: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12065: LD_INT 0
12067: PPUSH
12068: LD_VAR 0 3
12072: PPUSH
12073: LD_INT 1
12075: PPUSH
12076: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12080: LD_INT 1
12082: PPUSH
12083: LD_VAR 0 3
12087: PPUSH
12088: LD_INT 1
12090: PPUSH
12091: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12095: LD_INT 2
12097: PPUSH
12098: LD_VAR 0 3
12102: PPUSH
12103: LD_INT 1
12105: PPUSH
12106: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12110: LD_INT 3
12112: PPUSH
12113: LD_VAR 0 3
12117: PPUSH
12118: LD_INT 1
12120: PPUSH
12121: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12125: LD_INT 4
12127: PPUSH
12128: LD_VAR 0 3
12132: PPUSH
12133: LD_INT 1
12135: PPUSH
12136: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12140: LD_INT 5
12142: PPUSH
12143: LD_VAR 0 3
12147: PPUSH
12148: LD_INT 1
12150: PPUSH
12151: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12155: LD_INT 6
12157: PPUSH
12158: LD_VAR 0 3
12162: PPUSH
12163: LD_INT 1
12165: PPUSH
12166: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12170: LD_INT 7
12172: PPUSH
12173: LD_VAR 0 3
12177: PPUSH
12178: LD_INT 1
12180: PPUSH
12181: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12185: LD_INT 8
12187: PPUSH
12188: LD_VAR 0 3
12192: PPUSH
12193: LD_INT 1
12195: PPUSH
12196: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12200: LD_INT 10
12202: PPUSH
12203: LD_VAR 0 3
12207: PPUSH
12208: LD_INT 1
12210: PPUSH
12211: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12215: LD_INT 11
12217: PPUSH
12218: LD_VAR 0 3
12222: PPUSH
12223: LD_INT 1
12225: PPUSH
12226: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12230: LD_INT 12
12232: PPUSH
12233: LD_VAR 0 3
12237: PPUSH
12238: LD_INT 1
12240: PPUSH
12241: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12245: LD_INT 13
12247: PPUSH
12248: LD_VAR 0 3
12252: PPUSH
12253: LD_INT 1
12255: PPUSH
12256: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12260: LD_INT 14
12262: PPUSH
12263: LD_VAR 0 3
12267: PPUSH
12268: LD_INT 1
12270: PPUSH
12271: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12275: LD_INT 15
12277: PPUSH
12278: LD_VAR 0 3
12282: PPUSH
12283: LD_INT 1
12285: PPUSH
12286: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12290: LD_INT 16
12292: PPUSH
12293: LD_VAR 0 3
12297: PPUSH
12298: LD_INT 1
12300: PPUSH
12301: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12305: LD_INT 17
12307: PPUSH
12308: LD_VAR 0 3
12312: PPUSH
12313: LD_INT 1
12315: PPUSH
12316: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
12320: LD_INT 18
12322: PPUSH
12323: LD_VAR 0 3
12327: PPUSH
12328: LD_INT 1
12330: PPUSH
12331: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12335: LD_INT 19
12337: PPUSH
12338: LD_VAR 0 3
12342: PPUSH
12343: LD_INT 1
12345: PPUSH
12346: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12350: LD_INT 20
12352: PPUSH
12353: LD_VAR 0 3
12357: PPUSH
12358: LD_INT 1
12360: PPUSH
12361: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12365: LD_INT 21
12367: PPUSH
12368: LD_VAR 0 3
12372: PPUSH
12373: LD_INT 1
12375: PPUSH
12376: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12380: LD_INT 23
12382: PPUSH
12383: LD_VAR 0 3
12387: PPUSH
12388: LD_INT 1
12390: PPUSH
12391: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12395: LD_INT 26
12397: PPUSH
12398: LD_VAR 0 3
12402: PPUSH
12403: LD_INT 1
12405: PPUSH
12406: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12410: LD_INT 27
12412: PPUSH
12413: LD_VAR 0 3
12417: PPUSH
12418: LD_INT 1
12420: PPUSH
12421: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12425: LD_INT 28
12427: PPUSH
12428: LD_VAR 0 3
12432: PPUSH
12433: LD_INT 1
12435: PPUSH
12436: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12440: LD_INT 29
12442: PPUSH
12443: LD_VAR 0 3
12447: PPUSH
12448: LD_INT 1
12450: PPUSH
12451: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12455: LD_INT 30
12457: PPUSH
12458: LD_VAR 0 3
12462: PPUSH
12463: LD_INT 1
12465: PPUSH
12466: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12470: LD_INT 31
12472: PPUSH
12473: LD_VAR 0 3
12477: PPUSH
12478: LD_INT 1
12480: PPUSH
12481: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12485: LD_INT 32
12487: PPUSH
12488: LD_VAR 0 3
12492: PPUSH
12493: LD_INT 1
12495: PPUSH
12496: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
12500: LD_INT 33
12502: PPUSH
12503: LD_VAR 0 3
12507: PPUSH
12508: LD_INT 1
12510: PPUSH
12511: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12515: LD_INT 36
12517: PPUSH
12518: LD_VAR 0 3
12522: PPUSH
12523: LD_INT 1
12525: PPUSH
12526: CALL_OW 324
// end ; 6 :
12530: GO 13540
12532: LD_INT 6
12534: DOUBLE
12535: EQUAL
12536: IFTRUE 12540
12538: GO 13465
12540: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12541: LD_INT 35
12543: PPUSH
12544: LD_VAR 0 3
12548: PPUSH
12549: LD_INT 1
12551: PPUSH
12552: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12556: LD_INT 45
12558: PPUSH
12559: LD_VAR 0 3
12563: PPUSH
12564: LD_INT 1
12566: PPUSH
12567: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12571: LD_INT 46
12573: PPUSH
12574: LD_VAR 0 3
12578: PPUSH
12579: LD_INT 1
12581: PPUSH
12582: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12586: LD_INT 47
12588: PPUSH
12589: LD_VAR 0 3
12593: PPUSH
12594: LD_INT 1
12596: PPUSH
12597: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12601: LD_INT 1
12603: PPUSH
12604: LD_VAR 0 3
12608: PPUSH
12609: LD_INT 1
12611: PPUSH
12612: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12616: LD_INT 2
12618: PPUSH
12619: LD_VAR 0 3
12623: PPUSH
12624: LD_INT 1
12626: PPUSH
12627: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12631: LD_INT 11
12633: PPUSH
12634: LD_VAR 0 3
12638: PPUSH
12639: LD_INT 1
12641: PPUSH
12642: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12646: LD_INT 20
12648: PPUSH
12649: LD_VAR 0 3
12653: PPUSH
12654: LD_INT 1
12656: PPUSH
12657: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12661: LD_INT 48
12663: PPUSH
12664: LD_VAR 0 3
12668: PPUSH
12669: LD_INT 1
12671: PPUSH
12672: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12676: LD_INT 49
12678: PPUSH
12679: LD_VAR 0 3
12683: PPUSH
12684: LD_INT 1
12686: PPUSH
12687: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12691: LD_INT 50
12693: PPUSH
12694: LD_VAR 0 3
12698: PPUSH
12699: LD_INT 1
12701: PPUSH
12702: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12706: LD_INT 69
12708: PPUSH
12709: LD_VAR 0 3
12713: PPUSH
12714: LD_INT 1
12716: PPUSH
12717: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12721: LD_INT 39
12723: PPUSH
12724: LD_VAR 0 3
12728: PPUSH
12729: LD_INT 1
12731: PPUSH
12732: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12736: LD_INT 34
12738: PPUSH
12739: LD_VAR 0 3
12743: PPUSH
12744: LD_INT 1
12746: PPUSH
12747: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12751: LD_INT 42
12753: PPUSH
12754: LD_VAR 0 3
12758: PPUSH
12759: LD_INT 1
12761: PPUSH
12762: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12766: LD_INT 44
12768: PPUSH
12769: LD_VAR 0 3
12773: PPUSH
12774: LD_INT 1
12776: PPUSH
12777: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12781: LD_INT 41
12783: PPUSH
12784: LD_VAR 0 3
12788: PPUSH
12789: LD_INT 1
12791: PPUSH
12792: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
12796: LD_INT 13
12798: PPUSH
12799: LD_VAR 0 3
12803: PPUSH
12804: LD_INT 1
12806: PPUSH
12807: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12811: LD_INT 40
12813: PPUSH
12814: LD_VAR 0 3
12818: PPUSH
12819: LD_INT 1
12821: PPUSH
12822: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12826: LD_INT 43
12828: PPUSH
12829: LD_VAR 0 3
12833: PPUSH
12834: LD_INT 1
12836: PPUSH
12837: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12841: LD_INT 70
12843: PPUSH
12844: LD_VAR 0 3
12848: PPUSH
12849: LD_INT 1
12851: PPUSH
12852: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
12856: LD_INT 23
12858: PPUSH
12859: LD_VAR 0 3
12863: PPUSH
12864: LD_INT 1
12866: PPUSH
12867: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12871: LD_INT 51
12873: PPUSH
12874: LD_VAR 0 3
12878: PPUSH
12879: LD_INT 1
12881: PPUSH
12882: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12886: LD_INT 52
12888: PPUSH
12889: LD_VAR 0 3
12893: PPUSH
12894: LD_INT 1
12896: PPUSH
12897: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12901: LD_INT 6
12903: PPUSH
12904: LD_VAR 0 3
12908: PPUSH
12909: LD_INT 1
12911: PPUSH
12912: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12916: LD_INT 15
12918: PPUSH
12919: LD_VAR 0 3
12923: PPUSH
12924: LD_INT 1
12926: PPUSH
12927: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12931: LD_INT 7
12933: PPUSH
12934: LD_VAR 0 3
12938: PPUSH
12939: LD_INT 1
12941: PPUSH
12942: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12946: LD_INT 12
12948: PPUSH
12949: LD_VAR 0 3
12953: PPUSH
12954: LD_INT 1
12956: PPUSH
12957: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
12961: LD_INT 10
12963: PPUSH
12964: LD_VAR 0 3
12968: PPUSH
12969: LD_INT 1
12971: PPUSH
12972: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12976: LD_INT 17
12978: PPUSH
12979: LD_VAR 0 3
12983: PPUSH
12984: LD_INT 1
12986: PPUSH
12987: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12991: LD_INT 18
12993: PPUSH
12994: LD_VAR 0 3
12998: PPUSH
12999: LD_INT 1
13001: PPUSH
13002: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13006: LD_INT 60
13008: PPUSH
13009: LD_VAR 0 3
13013: PPUSH
13014: LD_INT 1
13016: PPUSH
13017: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
13021: LD_INT 61
13023: PPUSH
13024: LD_VAR 0 3
13028: PPUSH
13029: LD_INT 1
13031: PPUSH
13032: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13036: LD_INT 32
13038: PPUSH
13039: LD_VAR 0 3
13043: PPUSH
13044: LD_INT 1
13046: PPUSH
13047: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
13051: LD_INT 27
13053: PPUSH
13054: LD_VAR 0 3
13058: PPUSH
13059: LD_INT 1
13061: PPUSH
13062: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
13066: LD_INT 36
13068: PPUSH
13069: LD_VAR 0 3
13073: PPUSH
13074: LD_INT 1
13076: PPUSH
13077: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
13081: LD_INT 33
13083: PPUSH
13084: LD_VAR 0 3
13088: PPUSH
13089: LD_INT 1
13091: PPUSH
13092: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13096: LD_INT 9
13098: PPUSH
13099: LD_VAR 0 3
13103: PPUSH
13104: LD_INT 1
13106: PPUSH
13107: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13111: LD_INT 38
13113: PPUSH
13114: LD_VAR 0 3
13118: PPUSH
13119: LD_INT 1
13121: PPUSH
13122: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13126: LD_INT 57
13128: PPUSH
13129: LD_VAR 0 3
13133: PPUSH
13134: LD_INT 1
13136: PPUSH
13137: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13141: LD_INT 58
13143: PPUSH
13144: LD_VAR 0 3
13148: PPUSH
13149: LD_INT 1
13151: PPUSH
13152: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13156: LD_INT 28
13158: PPUSH
13159: LD_VAR 0 3
13163: PPUSH
13164: LD_INT 1
13166: PPUSH
13167: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13171: LD_INT 29
13173: PPUSH
13174: LD_VAR 0 3
13178: PPUSH
13179: LD_INT 1
13181: PPUSH
13182: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13186: LD_INT 30
13188: PPUSH
13189: LD_VAR 0 3
13193: PPUSH
13194: LD_INT 1
13196: PPUSH
13197: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13201: LD_INT 37
13203: PPUSH
13204: LD_VAR 0 3
13208: PPUSH
13209: LD_INT 1
13211: PPUSH
13212: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13216: LD_INT 63
13218: PPUSH
13219: LD_VAR 0 3
13223: PPUSH
13224: LD_INT 1
13226: PPUSH
13227: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13231: LD_INT 64
13233: PPUSH
13234: LD_VAR 0 3
13238: PPUSH
13239: LD_INT 1
13241: PPUSH
13242: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13246: LD_INT 3
13248: PPUSH
13249: LD_VAR 0 3
13253: PPUSH
13254: LD_INT 1
13256: PPUSH
13257: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13261: LD_INT 4
13263: PPUSH
13264: LD_VAR 0 3
13268: PPUSH
13269: LD_INT 1
13271: PPUSH
13272: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13276: LD_INT 5
13278: PPUSH
13279: LD_VAR 0 3
13283: PPUSH
13284: LD_INT 1
13286: PPUSH
13287: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13291: LD_INT 8
13293: PPUSH
13294: LD_VAR 0 3
13298: PPUSH
13299: LD_INT 1
13301: PPUSH
13302: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13306: LD_INT 66
13308: PPUSH
13309: LD_VAR 0 3
13313: PPUSH
13314: LD_INT 1
13316: PPUSH
13317: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
13321: LD_INT 67
13323: PPUSH
13324: LD_VAR 0 3
13328: PPUSH
13329: LD_INT 1
13331: PPUSH
13332: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13336: LD_INT 21
13338: PPUSH
13339: LD_VAR 0 3
13343: PPUSH
13344: LD_INT 1
13346: PPUSH
13347: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13351: LD_INT 22
13353: PPUSH
13354: LD_VAR 0 3
13358: PPUSH
13359: LD_INT 1
13361: PPUSH
13362: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13366: LD_INT 19
13368: PPUSH
13369: LD_VAR 0 3
13373: PPUSH
13374: LD_INT 1
13376: PPUSH
13377: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13381: LD_INT 26
13383: PPUSH
13384: LD_VAR 0 3
13388: PPUSH
13389: LD_INT 1
13391: PPUSH
13392: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13396: LD_INT 54
13398: PPUSH
13399: LD_VAR 0 3
13403: PPUSH
13404: LD_INT 1
13406: PPUSH
13407: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13411: LD_INT 55
13413: PPUSH
13414: LD_VAR 0 3
13418: PPUSH
13419: LD_INT 1
13421: PPUSH
13422: CALL_OW 322
// for i = 0 to 39 do
13426: LD_ADDR_VAR 0 4
13430: PUSH
13431: DOUBLE
13432: LD_INT 0
13434: DEC
13435: ST_TO_ADDR
13436: LD_INT 39
13438: PUSH
13439: FOR_TO
13440: IFFALSE 13461
// SetRestrict ( i , side , true ) ;
13442: LD_VAR 0 4
13446: PPUSH
13447: LD_VAR 0 3
13451: PPUSH
13452: LD_INT 1
13454: PPUSH
13455: CALL_OW 324
13459: GO 13439
13461: POP
13462: POP
// end ; else
13463: GO 13540
13465: POP
// begin for i = 1 to 73 do
13466: LD_ADDR_VAR 0 4
13470: PUSH
13471: DOUBLE
13472: LD_INT 1
13474: DEC
13475: ST_TO_ADDR
13476: LD_INT 73
13478: PUSH
13479: FOR_TO
13480: IFFALSE 13501
// SetTech ( i , side , state_enabled ) ;
13482: LD_VAR 0 4
13486: PPUSH
13487: LD_VAR 0 3
13491: PPUSH
13492: LD_INT 1
13494: PPUSH
13495: CALL_OW 322
13499: GO 13479
13501: POP
13502: POP
// for i = 0 to 39 do
13503: LD_ADDR_VAR 0 4
13507: PUSH
13508: DOUBLE
13509: LD_INT 0
13511: DEC
13512: ST_TO_ADDR
13513: LD_INT 39
13515: PUSH
13516: FOR_TO
13517: IFFALSE 13538
// SetRestrict ( i , side , true ) ;
13519: LD_VAR 0 4
13523: PPUSH
13524: LD_VAR 0 3
13528: PPUSH
13529: LD_INT 1
13531: PPUSH
13532: CALL_OW 324
13536: GO 13516
13538: POP
13539: POP
// end ; end ; end ;
13540: GO 9545
13542: POP
13543: POP
// end ; end_of_file
13544: LD_VAR 0 2
13548: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
13549: LD_INT 0
13551: PPUSH
13552: PPUSH
13553: PPUSH
13554: PPUSH
13555: PPUSH
13556: PPUSH
13557: PPUSH
13558: PPUSH
13559: PPUSH
// for i := 1 to 8 do
13560: LD_ADDR_VAR 0 2
13564: PUSH
13565: DOUBLE
13566: LD_INT 1
13568: DEC
13569: ST_TO_ADDR
13570: LD_INT 8
13572: PUSH
13573: FOR_TO
13574: IFFALSE 13958
// begin if Side_Positions [ i ] then
13576: LD_EXP 38
13580: PUSH
13581: LD_VAR 0 2
13585: ARRAY
13586: IFFALSE 13956
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
13588: LD_ADDR_VAR 0 7
13592: PUSH
13593: LD_INT 22
13595: PUSH
13596: LD_VAR 0 2
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: PUSH
13605: LD_INT 21
13607: PUSH
13608: LD_INT 1
13610: PUSH
13611: EMPTY
13612: LIST
13613: LIST
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: PPUSH
13619: CALL_OW 69
13623: PUSH
13624: LD_INT 0
13626: PLUS
13627: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13628: LD_ADDR_VAR 0 9
13632: PUSH
13633: LD_INT 22
13635: PUSH
13636: LD_VAR 0 2
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: PUSH
13645: LD_INT 2
13647: PUSH
13648: LD_INT 30
13650: PUSH
13651: LD_INT 0
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: PUSH
13658: LD_INT 30
13660: PUSH
13661: LD_INT 1
13663: PUSH
13664: EMPTY
13665: LIST
13666: LIST
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: LIST
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: PPUSH
13677: CALL_OW 69
13681: ST_TO_ADDR
// crates := 0 ;
13682: LD_ADDR_VAR 0 4
13686: PUSH
13687: LD_INT 0
13689: ST_TO_ADDR
// oil := 0 ;
13690: LD_ADDR_VAR 0 5
13694: PUSH
13695: LD_INT 0
13697: ST_TO_ADDR
// sib := 0 ;
13698: LD_ADDR_VAR 0 6
13702: PUSH
13703: LD_INT 0
13705: ST_TO_ADDR
// if bases then
13706: LD_VAR 0 9
13710: IFFALSE 13816
// begin for j in bases do
13712: LD_ADDR_VAR 0 3
13716: PUSH
13717: LD_VAR 0 9
13721: PUSH
13722: FOR_IN
13723: IFFALSE 13814
// begin base := GetBase ( j ) ;
13725: LD_ADDR_VAR 0 8
13729: PUSH
13730: LD_VAR 0 3
13734: PPUSH
13735: CALL_OW 274
13739: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
13740: LD_ADDR_VAR 0 4
13744: PUSH
13745: LD_VAR 0 4
13749: PUSH
13750: LD_VAR 0 8
13754: PPUSH
13755: LD_INT 1
13757: PPUSH
13758: CALL_OW 275
13762: PLUS
13763: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
13764: LD_ADDR_VAR 0 5
13768: PUSH
13769: LD_VAR 0 5
13773: PUSH
13774: LD_VAR 0 8
13778: PPUSH
13779: LD_INT 2
13781: PPUSH
13782: CALL_OW 275
13786: PLUS
13787: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
13788: LD_ADDR_VAR 0 6
13792: PUSH
13793: LD_VAR 0 6
13797: PUSH
13798: LD_VAR 0 8
13802: PPUSH
13803: LD_INT 3
13805: PPUSH
13806: CALL_OW 275
13810: PLUS
13811: ST_TO_ADDR
// end ;
13812: GO 13722
13814: POP
13815: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
13816: LD_STRING setSpecText(
13818: PUSH
13819: LD_VAR 0 2
13823: STR
13824: PUSH
13825: LD_STRING ,
13827: STR
13828: PUSH
13829: LD_INT 2
13831: STR
13832: PUSH
13833: LD_STRING ,
13835: STR
13836: PUSH
13837: LD_VAR 0 4
13841: STR
13842: PUSH
13843: LD_STRING )
13845: STR
13846: PPUSH
13847: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
13851: LD_STRING setSpecText(
13853: PUSH
13854: LD_VAR 0 2
13858: STR
13859: PUSH
13860: LD_STRING ,
13862: STR
13863: PUSH
13864: LD_INT 3
13866: STR
13867: PUSH
13868: LD_STRING ,
13870: STR
13871: PUSH
13872: LD_VAR 0 5
13876: STR
13877: PUSH
13878: LD_STRING )
13880: STR
13881: PPUSH
13882: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
13886: LD_STRING setSpecText(
13888: PUSH
13889: LD_VAR 0 2
13893: STR
13894: PUSH
13895: LD_STRING ,
13897: STR
13898: PUSH
13899: LD_INT 4
13901: STR
13902: PUSH
13903: LD_STRING ,
13905: STR
13906: PUSH
13907: LD_VAR 0 6
13911: STR
13912: PUSH
13913: LD_STRING )
13915: STR
13916: PPUSH
13917: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
13921: LD_STRING setSpecText(
13923: PUSH
13924: LD_VAR 0 2
13928: STR
13929: PUSH
13930: LD_STRING ,
13932: STR
13933: PUSH
13934: LD_INT 5
13936: STR
13937: PUSH
13938: LD_STRING ,
13940: STR
13941: PUSH
13942: LD_VAR 0 7
13946: STR
13947: PUSH
13948: LD_STRING )
13950: STR
13951: PPUSH
13952: CALL_OW 559
// end ; end ;
13956: GO 13573
13958: POP
13959: POP
// end ;
13960: LD_VAR 0 1
13964: RET
// every 0 0$1 do
13965: GO 13967
13967: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
13968: LD_STRING setSpecLogoNumber(
13970: PUSH
13971: LD_INT 2
13973: STR
13974: PUSH
13975: LD_STRING ,
13977: STR
13978: PUSH
13979: LD_INT 1
13981: STR
13982: PUSH
13983: LD_STRING )
13985: STR
13986: PPUSH
13987: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
13991: LD_STRING setSpecLogoNumber(
13993: PUSH
13994: LD_INT 3
13996: STR
13997: PUSH
13998: LD_STRING ,
14000: STR
14001: PUSH
14002: LD_INT 2
14004: STR
14005: PUSH
14006: LD_STRING )
14008: STR
14009: PPUSH
14010: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
14014: LD_STRING setSpecLogoNumber(
14016: PUSH
14017: LD_INT 4
14019: STR
14020: PUSH
14021: LD_STRING ,
14023: STR
14024: PUSH
14025: LD_INT 3
14027: STR
14028: PUSH
14029: LD_STRING )
14031: STR
14032: PPUSH
14033: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
14037: LD_STRING setSpecLogoNumber(
14039: PUSH
14040: LD_INT 5
14042: STR
14043: PUSH
14044: LD_STRING ,
14046: STR
14047: PUSH
14048: LD_INT 4
14050: STR
14051: PUSH
14052: LD_STRING )
14054: STR
14055: PPUSH
14056: CALL_OW 559
// end ;
14060: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
14061: LD_INT 2
14063: PUSH
14064: LD_INT 30
14066: PUSH
14067: LD_INT 0
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: PUSH
14074: LD_INT 30
14076: PUSH
14077: LD_INT 1
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: LIST
14088: PPUSH
14089: CALL_OW 69
14093: IFFALSE 14103
14095: GO 14097
14097: DISABLE
// begin enable ;
14098: ENABLE
// UpdateSpectatorBar ;
14099: CALL 13549 0 0
// end ; end_of_file
14103: END
// var respawn , inqueue ; export function init_respawning ; begin
14104: LD_INT 0
14106: PPUSH
// respawn := Rand ( 1 , 8 ) ;
14107: LD_ADDR_LOC 18
14111: PUSH
14112: LD_INT 1
14114: PPUSH
14115: LD_INT 8
14117: PPUSH
14118: CALL_OW 12
14122: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
14123: LD_ADDR_LOC 19
14127: PUSH
14128: LD_INT 0
14130: PUSH
14131: LD_INT 0
14133: PUSH
14134: LD_INT 0
14136: PUSH
14137: LD_INT 0
14139: PUSH
14140: LD_INT 0
14142: PUSH
14143: LD_INT 0
14145: PUSH
14146: LD_INT 0
14148: PUSH
14149: LD_INT 0
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: ST_TO_ADDR
// end ;
14162: LD_VAR 0 1
14166: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
14167: GO 14169
14169: DISABLE
14170: LD_INT 0
14172: PPUSH
14173: PPUSH
14174: PPUSH
// begin if respawning_time_max = 0 then
14175: LD_EXP 33
14179: PUSH
14180: LD_INT 0
14182: EQUAL
14183: IFFALSE 14187
// exit ;
14185: GO 14595
// if respawn = 8 then
14187: LD_LOC 18
14191: PUSH
14192: LD_INT 8
14194: EQUAL
14195: IFFALSE 14207
// respawn := 1 else
14197: LD_ADDR_LOC 18
14201: PUSH
14202: LD_INT 1
14204: ST_TO_ADDR
14205: GO 14221
// respawn := respawn + 1 ;
14207: LD_ADDR_LOC 18
14211: PUSH
14212: LD_LOC 18
14216: PUSH
14217: LD_INT 1
14219: PLUS
14220: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
14221: LD_EXP 38
14225: PUSH
14226: LD_LOC 18
14230: ARRAY
14231: PUSH
14232: LD_LOC 19
14236: PUSH
14237: LD_LOC 18
14241: ARRAY
14242: NOT
14243: AND
14244: IFFALSE 14594
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
14246: LD_ADDR_VAR 0 1
14250: PUSH
14251: LD_INT 21
14253: PUSH
14254: LD_INT 1
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: PUSH
14261: LD_INT 22
14263: PUSH
14264: LD_LOC 18
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: PUSH
14273: LD_INT 3
14275: PUSH
14276: LD_INT 23
14278: PUSH
14279: LD_INT 0
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: PPUSH
14292: CALL_OW 69
14296: ST_TO_ADDR
// if n < number_of_people then
14297: LD_VAR 0 1
14301: PUSH
14302: LD_EXP 24
14306: LESS
14307: IFFALSE 14591
// begin aktresp := respawn ;
14309: LD_ADDR_VAR 0 3
14313: PUSH
14314: LD_LOC 18
14318: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
14319: LD_ADDR_LOC 19
14323: PUSH
14324: LD_LOC 19
14328: PPUSH
14329: LD_VAR 0 3
14333: PPUSH
14334: LD_INT 1
14336: PPUSH
14337: CALL_OW 1
14341: ST_TO_ADDR
// enable ;
14342: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
14343: LD_EXP 32
14347: PPUSH
14348: LD_EXP 33
14352: PPUSH
14353: CALL_OW 12
14357: PPUSH
14358: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
14362: LD_ADDR_LOC 19
14366: PUSH
14367: LD_LOC 19
14371: PPUSH
14372: LD_VAR 0 3
14376: PPUSH
14377: LD_INT 0
14379: PPUSH
14380: CALL_OW 1
14384: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
14385: LD_ADDR_VAR 0 2
14389: PUSH
14390: LD_INT 21
14392: PUSH
14393: LD_INT 3
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: PUSH
14400: LD_INT 2
14402: PUSH
14403: LD_INT 30
14405: PUSH
14406: LD_INT 0
14408: PUSH
14409: EMPTY
14410: LIST
14411: LIST
14412: PUSH
14413: LD_INT 30
14415: PUSH
14416: LD_INT 1
14418: PUSH
14419: EMPTY
14420: LIST
14421: LIST
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: LIST
14427: PUSH
14428: LD_INT 50
14430: PUSH
14431: EMPTY
14432: LIST
14433: PUSH
14434: LD_INT 22
14436: PUSH
14437: LD_VAR 0 3
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: PPUSH
14452: CALL_OW 69
14456: ST_TO_ADDR
// if dep = 0 then
14457: LD_VAR 0 2
14461: PUSH
14462: LD_INT 0
14464: EQUAL
14465: IFFALSE 14469
// exit ;
14467: GO 14595
// hc_name :=  ;
14469: LD_ADDR_OWVAR 26
14473: PUSH
14474: LD_STRING 
14476: ST_TO_ADDR
// hc_importance := 0 ;
14477: LD_ADDR_OWVAR 32
14481: PUSH
14482: LD_INT 0
14484: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
14485: LD_INT 0
14487: PPUSH
14488: LD_INT 0
14490: PPUSH
14491: LD_EXP 25
14495: PUSH
14496: LD_INT 2
14498: DIV
14499: PPUSH
14500: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
14504: LD_ADDR_OWVAR 21
14508: PUSH
14509: LD_EXP 39
14513: PUSH
14514: LD_VAR 0 3
14518: ARRAY
14519: ST_TO_ADDR
// uc_side := aktresp ;
14520: LD_ADDR_OWVAR 20
14524: PUSH
14525: LD_VAR 0 3
14529: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
14530: LD_ADDR_VAR 0 2
14534: PUSH
14535: LD_VAR 0 2
14539: PUSH
14540: LD_INT 1
14542: PPUSH
14543: LD_VAR 0 2
14547: PPUSH
14548: CALL_OW 12
14552: ARRAY
14553: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
14554: CALL_OW 44
14558: PPUSH
14559: LD_VAR 0 2
14563: PPUSH
14564: CALL_OW 250
14568: PPUSH
14569: LD_VAR 0 2
14573: PPUSH
14574: CALL_OW 251
14578: PPUSH
14579: LD_INT 7
14581: PPUSH
14582: LD_INT 1
14584: PPUSH
14585: CALL_OW 50
// end else
14589: GO 14592
// enable ;
14591: ENABLE
// end else
14592: GO 14595
// enable ;
14594: ENABLE
// end ; end_of_file
14595: PPOPN 3
14597: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
14598: LD_INT 0
14600: PPUSH
14601: PPUSH
14602: PPUSH
// BuildUpTime_Delay = 0 ;
14603: LD_ADDR_EXP 64
14607: PUSH
14608: LD_INT 0
14610: ST_TO_ADDR
// if not def_builduptime then
14611: LD_EXP 16
14615: NOT
14616: IFFALSE 14620
// exit ;
14618: GO 14803
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
14620: LD_ADDR_EXP 64
14624: PUSH
14625: LD_INT 8400
14627: PUSH
14628: LD_INT 2100
14630: PUSH
14631: LD_EXP 16
14635: MUL
14636: PLUS
14637: ST_TO_ADDR
// BuildUpTimeActive := true ;
14638: LD_ADDR_EXP 63
14642: PUSH
14643: LD_INT 1
14645: ST_TO_ADDR
// for i := 1 to 8 do
14646: LD_ADDR_VAR 0 2
14650: PUSH
14651: DOUBLE
14652: LD_INT 1
14654: DEC
14655: ST_TO_ADDR
14656: LD_INT 8
14658: PUSH
14659: FOR_TO
14660: IFFALSE 14801
// if Side_Positions [ i ] then
14662: LD_EXP 38
14666: PUSH
14667: LD_VAR 0 2
14671: ARRAY
14672: IFFALSE 14799
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
14674: LD_EXP 62
14678: PUSH
14679: LD_EXP 38
14683: PUSH
14684: LD_VAR 0 2
14688: ARRAY
14689: ARRAY
14690: PPUSH
14691: LD_INT 5
14693: PPUSH
14694: CALL_OW 424
// for j := 1 to 8 do
14698: LD_ADDR_VAR 0 3
14702: PUSH
14703: DOUBLE
14704: LD_INT 1
14706: DEC
14707: ST_TO_ADDR
14708: LD_INT 8
14710: PUSH
14711: FOR_TO
14712: IFFALSE 14797
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14714: LD_EXP 38
14718: PUSH
14719: LD_VAR 0 3
14723: ARRAY
14724: PUSH
14725: LD_EXP 35
14729: PUSH
14730: LD_VAR 0 2
14734: ARRAY
14735: PUSH
14736: LD_EXP 35
14740: PUSH
14741: LD_VAR 0 3
14745: ARRAY
14746: NONEQUAL
14747: PUSH
14748: LD_EXP 40
14752: NOT
14753: PUSH
14754: LD_VAR 0 2
14758: PUSH
14759: LD_VAR 0 3
14763: NONEQUAL
14764: AND
14765: OR
14766: AND
14767: IFFALSE 14795
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14769: LD_VAR 0 3
14773: PPUSH
14774: LD_EXP 62
14778: PUSH
14779: LD_EXP 38
14783: PUSH
14784: LD_VAR 0 2
14788: ARRAY
14789: ARRAY
14790: PPUSH
14791: CALL_OW 333
14795: GO 14711
14797: POP
14798: POP
// end ;
14799: GO 14659
14801: POP
14802: POP
// end ;
14803: LD_VAR 0 1
14807: RET
// export function EndBuildUp ; var i , j ; begin
14808: LD_INT 0
14810: PPUSH
14811: PPUSH
14812: PPUSH
// BuildUpTimeActive := false ;
14813: LD_ADDR_EXP 63
14817: PUSH
14818: LD_INT 0
14820: ST_TO_ADDR
// for i := 1 to 8 do
14821: LD_ADDR_VAR 0 2
14825: PUSH
14826: DOUBLE
14827: LD_INT 1
14829: DEC
14830: ST_TO_ADDR
14831: LD_INT 8
14833: PUSH
14834: FOR_TO
14835: IFFALSE 14976
// if Side_Positions [ i ] then
14837: LD_EXP 38
14841: PUSH
14842: LD_VAR 0 2
14846: ARRAY
14847: IFFALSE 14974
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
14849: LD_EXP 62
14853: PUSH
14854: LD_EXP 38
14858: PUSH
14859: LD_VAR 0 2
14863: ARRAY
14864: ARRAY
14865: PPUSH
14866: LD_INT 0
14868: PPUSH
14869: CALL_OW 424
// for j := 1 to 8 do
14873: LD_ADDR_VAR 0 3
14877: PUSH
14878: DOUBLE
14879: LD_INT 1
14881: DEC
14882: ST_TO_ADDR
14883: LD_INT 8
14885: PUSH
14886: FOR_TO
14887: IFFALSE 14972
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14889: LD_EXP 38
14893: PUSH
14894: LD_VAR 0 3
14898: ARRAY
14899: PUSH
14900: LD_EXP 35
14904: PUSH
14905: LD_VAR 0 2
14909: ARRAY
14910: PUSH
14911: LD_EXP 35
14915: PUSH
14916: LD_VAR 0 3
14920: ARRAY
14921: NONEQUAL
14922: PUSH
14923: LD_EXP 40
14927: NOT
14928: PUSH
14929: LD_VAR 0 2
14933: PUSH
14934: LD_VAR 0 3
14938: NONEQUAL
14939: AND
14940: OR
14941: AND
14942: IFFALSE 14970
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14944: LD_VAR 0 3
14948: PPUSH
14949: LD_EXP 62
14953: PUSH
14954: LD_EXP 38
14958: PUSH
14959: LD_VAR 0 2
14963: ARRAY
14964: ARRAY
14965: PPUSH
14966: CALL_OW 334
14970: GO 14886
14972: POP
14973: POP
// end ;
14974: GO 14834
14976: POP
14977: POP
// end ;
14978: LD_VAR 0 1
14982: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
14983: LD_EXP 63
14987: IFFALSE 15162
14989: GO 14991
14991: DISABLE
14992: LD_INT 0
14994: PPUSH
14995: PPUSH
// begin for i := 1 to 8 do
14996: LD_ADDR_VAR 0 1
15000: PUSH
15001: DOUBLE
15002: LD_INT 1
15004: DEC
15005: ST_TO_ADDR
15006: LD_INT 8
15008: PUSH
15009: FOR_TO
15010: IFFALSE 15159
// if Side_Positions [ i ] then
15012: LD_EXP 38
15016: PUSH
15017: LD_VAR 0 1
15021: ARRAY
15022: IFFALSE 15157
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
15024: LD_ADDR_VAR 0 2
15028: PUSH
15029: LD_EXP 62
15033: PUSH
15034: LD_EXP 38
15038: PUSH
15039: LD_VAR 0 1
15043: ARRAY
15044: ARRAY
15045: PPUSH
15046: LD_INT 2
15048: PUSH
15049: LD_INT 21
15051: PUSH
15052: LD_INT 1
15054: PUSH
15055: EMPTY
15056: LIST
15057: LIST
15058: PUSH
15059: LD_INT 21
15061: PUSH
15062: LD_INT 2
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: LIST
15073: PUSH
15074: LD_INT 22
15076: PUSH
15077: LD_OWVAR 2
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PPUSH
15090: CALL_OW 70
15094: PUSH
15095: FOR_IN
15096: IFFALSE 15155
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
15098: LD_EXP 35
15102: PUSH
15103: LD_VAR 0 1
15107: ARRAY
15108: PUSH
15109: LD_EXP 35
15113: PUSH
15114: LD_OWVAR 2
15118: ARRAY
15119: NONEQUAL
15120: PUSH
15121: LD_EXP 40
15125: NOT
15126: PUSH
15127: LD_VAR 0 1
15131: PUSH
15132: LD_OWVAR 2
15136: NONEQUAL
15137: AND
15138: OR
15139: IFFALSE 15153
// ComMoveToArea ( un , BuildUpEscape ) ;
15141: LD_VAR 0 2
15145: PPUSH
15146: LD_INT 16
15148: PPUSH
15149: CALL_OW 113
15153: GO 15095
15155: POP
15156: POP
15157: GO 15009
15159: POP
15160: POP
// enable ;
15161: ENABLE
// end ;
15162: PPOPN 2
15164: END
// every 0 0$1 trigger def_builduptime do
15165: LD_EXP 16
15169: IFFALSE 15195
15171: GO 15173
15173: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
15174: LD_INT 8400
15176: PUSH
15177: LD_EXP 16
15181: PUSH
15182: LD_INT 2100
15184: MUL
15185: PLUS
15186: PPUSH
15187: CALL_OW 67
// EndBuildUp ;
15191: CALL 14808 0 0
// end ; end_of_file
15195: END
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
15196: LD_INT 0
15198: PPUSH
15199: PPUSH
// enable ( 98 ) ;
15200: LD_INT 98
15202: ENABLE_MARKED
// GameEnded = false ;
15203: LD_ADDR_LOC 21
15207: PUSH
15208: LD_INT 0
15210: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
15211: LD_ADDR_LOC 20
15215: PUSH
15216: LD_INT 0
15218: PUSH
15219: LD_INT 0
15221: PUSH
15222: LD_INT 0
15224: PUSH
15225: LD_INT 0
15227: PUSH
15228: LD_INT 0
15230: PUSH
15231: LD_INT 0
15233: PUSH
15234: LD_INT 0
15236: PUSH
15237: LD_INT 0
15239: PUSH
15240: EMPTY
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: ST_TO_ADDR
// unfoged = false ;
15250: LD_ADDR_LOC 22
15254: PUSH
15255: LD_INT 0
15257: ST_TO_ADDR
// defeated_specs := [ ] ;
15258: LD_ADDR_LOC 23
15262: PUSH
15263: EMPTY
15264: ST_TO_ADDR
// for i = 1 to side_positions do
15265: LD_ADDR_VAR 0 2
15269: PUSH
15270: DOUBLE
15271: LD_INT 1
15273: DEC
15274: ST_TO_ADDR
15275: LD_EXP 38
15279: PUSH
15280: FOR_TO
15281: IFFALSE 15321
// if not side_positions [ i ] then
15283: LD_EXP 38
15287: PUSH
15288: LD_VAR 0 2
15292: ARRAY
15293: NOT
15294: IFFALSE 15319
// defeated = replace ( defeated , i , true ) ;
15296: LD_ADDR_LOC 20
15300: PUSH
15301: LD_LOC 20
15305: PPUSH
15306: LD_VAR 0 2
15310: PPUSH
15311: LD_INT 1
15313: PPUSH
15314: CALL_OW 1
15318: ST_TO_ADDR
15319: GO 15280
15321: POP
15322: POP
// end ;
15323: LD_VAR 0 1
15327: RET
// function CanWinLoose ; begin
15328: LD_INT 0
15330: PPUSH
// Result := true ;
15331: LD_ADDR_VAR 0 1
15335: PUSH
15336: LD_INT 1
15338: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
15339: CALL_OW 518
15343: PUSH
15344: CALL_OW 519
15348: PUSH
15349: LD_INT 0
15351: GREATER
15352: AND
15353: IFFALSE 15363
// Result := false ;
15355: LD_ADDR_VAR 0 1
15359: PUSH
15360: LD_INT 0
15362: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
15363: CALL_OW 531
15367: PUSH
15368: CALL_OW 519
15372: PUSH
15373: LD_INT 1
15375: GREATER
15376: AND
15377: IFFALSE 15387
// Result := false ;
15379: LD_ADDR_VAR 0 1
15383: PUSH
15384: LD_INT 0
15386: ST_TO_ADDR
// end ;
15387: LD_VAR 0 1
15391: RET
// export function HasPower ( i ) ; var k , h ; begin
15392: LD_INT 0
15394: PPUSH
15395: PPUSH
15396: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
15397: LD_VAR 0 1
15401: PPUSH
15402: CALL_OW 108
15406: NOT
15407: PUSH
15408: LD_EXP 37
15412: PUSH
15413: LD_VAR 0 1
15417: ARRAY
15418: NOT
15419: AND
15420: PUSH
15421: LD_OWVAR 4
15425: AND
15426: IFFALSE 15438
// begin result = false ;
15428: LD_ADDR_VAR 0 2
15432: PUSH
15433: LD_INT 0
15435: ST_TO_ADDR
// end else
15436: GO 15733
// case def_win_rules of 0 :
15438: LD_EXP 49
15442: PUSH
15443: LD_INT 0
15445: DOUBLE
15446: EQUAL
15447: IFTRUE 15451
15449: GO 15614
15451: POP
// if def_people_respawning then
15452: LD_EXP 11
15456: IFFALSE 15547
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
15458: LD_ADDR_VAR 0 2
15462: PUSH
15463: LD_INT 22
15465: PUSH
15466: LD_VAR 0 1
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PUSH
15475: LD_INT 2
15477: PUSH
15478: LD_INT 21
15480: PUSH
15481: LD_INT 1
15483: PUSH
15484: EMPTY
15485: LIST
15486: LIST
15487: PUSH
15488: LD_INT 33
15490: PUSH
15491: LD_INT 3
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: PUSH
15498: LD_INT 33
15500: PUSH
15501: LD_INT 5
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: PUSH
15508: LD_INT 30
15510: PUSH
15511: LD_INT 0
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: PUSH
15518: LD_INT 30
15520: PUSH
15521: LD_INT 1
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: PPUSH
15540: CALL_OW 69
15544: ST_TO_ADDR
15545: GO 15612
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
15547: LD_ADDR_VAR 0 2
15551: PUSH
15552: LD_INT 22
15554: PUSH
15555: LD_VAR 0 1
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: LD_INT 2
15566: PUSH
15567: LD_INT 21
15569: PUSH
15570: LD_INT 1
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PUSH
15577: LD_INT 33
15579: PUSH
15580: LD_INT 3
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: LD_INT 33
15589: PUSH
15590: LD_INT 5
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PPUSH
15607: CALL_OW 69
15611: ST_TO_ADDR
15612: GO 15733
15614: LD_INT 1
15616: DOUBLE
15617: EQUAL
15618: IFTRUE 15622
15620: GO 15661
15622: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
15623: LD_ADDR_VAR 0 2
15627: PUSH
15628: LD_INT 22
15630: PUSH
15631: LD_VAR 0 1
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: PUSH
15640: LD_INT 21
15642: PUSH
15643: LD_INT 1
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: PPUSH
15654: CALL_OW 69
15658: ST_TO_ADDR
15659: GO 15733
15661: LD_INT 2
15663: DOUBLE
15664: EQUAL
15665: IFTRUE 15669
15667: GO 15732
15669: POP
// begin h = false ;
15670: LD_ADDR_VAR 0 4
15674: PUSH
15675: LD_INT 0
15677: ST_TO_ADDR
// for k in heroes [ i ] do
15678: LD_ADDR_VAR 0 3
15682: PUSH
15683: LD_EXP 50
15687: PUSH
15688: LD_VAR 0 1
15692: ARRAY
15693: PUSH
15694: FOR_IN
15695: IFFALSE 15718
// if IsLive ( k ) then
15697: LD_VAR 0 3
15701: PPUSH
15702: CALL_OW 300
15706: IFFALSE 15716
// h = true ;
15708: LD_ADDR_VAR 0 4
15712: PUSH
15713: LD_INT 1
15715: ST_TO_ADDR
15716: GO 15694
15718: POP
15719: POP
// Result := h ;
15720: LD_ADDR_VAR 0 2
15724: PUSH
15725: LD_VAR 0 4
15729: ST_TO_ADDR
// end ; end ;
15730: GO 15733
15732: POP
// end ;
15733: LD_VAR 0 2
15737: RET
// function AlliedSides ( i , j ) ; begin
15738: LD_INT 0
15740: PPUSH
// Result := false ;
15741: LD_ADDR_VAR 0 3
15745: PUSH
15746: LD_INT 0
15748: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
15749: LD_VAR 0 1
15753: PPUSH
15754: LD_VAR 0 2
15758: PPUSH
15759: CALL_OW 81
15763: PUSH
15764: LD_INT 1
15766: EQUAL
15767: PUSH
15768: LD_VAR 0 2
15772: PPUSH
15773: LD_VAR 0 1
15777: PPUSH
15778: CALL_OW 81
15782: PUSH
15783: LD_INT 1
15785: EQUAL
15786: AND
15787: PUSH
15788: LD_VAR 0 1
15792: PPUSH
15793: CALL_OW 83
15797: AND
15798: PUSH
15799: LD_VAR 0 2
15803: PPUSH
15804: CALL_OW 83
15808: AND
15809: IFFALSE 15819
// Result := true ;
15811: LD_ADDR_VAR 0 3
15815: PUSH
15816: LD_INT 1
15818: ST_TO_ADDR
// end ;
15819: LD_VAR 0 3
15823: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
15824: CALL 15328 0 0
15828: PUSH
15829: LD_LOC 21
15833: NOT
15834: AND
15835: IFFALSE 15851
15837: GO 15839
15839: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
15840: LD_ADDR_EXP 61
15844: PUSH
15845: LD_STRING #Player-Ended
15847: PUSH
15848: EMPTY
15849: LIST
15850: ST_TO_ADDR
15851: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
15852: CALL 15328 0 0
15856: PUSH
15857: LD_LOC 21
15861: AND
15862: IFFALSE 15871
15864: GO 15866
15866: DISABLE
// YouLostInMultiplayer ;
15867: CALL_OW 107
15871: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
15872: CALL 15328 0 0
15876: NOT
15877: PUSH
15878: CALL_OW 531
15882: NOT
15883: AND
15884: IFFALSE 15900
15886: GO 15888
15888: DISABLE
// WaitServerStrings = [ #server-wait ] ;
15889: LD_ADDR_EXP 61
15893: PUSH
15894: LD_STRING #server-wait
15896: PUSH
15897: EMPTY
15898: LIST
15899: ST_TO_ADDR
15900: END
// every 100 trigger IAmSpec do
15901: CALL_OW 531
15905: IFFALSE 15921
15907: GO 15909
15909: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
15910: LD_ADDR_EXP 61
15914: PUSH
15915: LD_STRING #Player-IAmSpec
15917: PUSH
15918: EMPTY
15919: LIST
15920: ST_TO_ADDR
15921: END
// every 100 trigger GameEnded and IAmSpec do
15922: LD_LOC 21
15926: PUSH
15927: CALL_OW 531
15931: AND
15932: IFFALSE 15941
15934: GO 15936
15936: DISABLE
// YouLostInMultiplayer ;
15937: CALL_OW 107
15941: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
15942: CALL 15328 0 0
15946: PUSH
15947: LD_LOC 21
15951: NOT
15952: AND
15953: IFFALSE 15969
15955: GO 15957
15957: DISABLE
// WaitServerStrings = [ $player-win ] ;
15958: LD_ADDR_EXP 61
15962: PUSH
15963: LD_STRING $player-win
15965: PUSH
15966: EMPTY
15967: LIST
15968: ST_TO_ADDR
15969: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
15970: CALL 15328 0 0
15974: PUSH
15975: LD_LOC 21
15979: AND
15980: IFFALSE 16004
15982: GO 15984
15984: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
15985: LD_EXP 39
15989: PUSH
15990: LD_OWVAR 7
15994: ARRAY
15995: PPUSH
15996: CALL 9183 0 1
// YouWinInMultiplayer ;
16000: CALL_OW 106
// end ;
16004: END
// every 100 trigger isEditor marked 401 do
16005: LD_OWVAR 84
16009: IFFALSE 16025
16011: GO 16013
16013: DISABLE
// Debug_Strings = [ You won ] ;
16014: LD_ADDR_OWVAR 48
16018: PUSH
16019: LD_STRING You won
16021: PUSH
16022: EMPTY
16023: LIST
16024: ST_TO_ADDR
16025: END
// every 100 trigger isEditor marked 400 do
16026: LD_OWVAR 84
16030: IFFALSE 16046
16032: GO 16034
16034: DISABLE
// Debug_Strings = [ You loss ] ;
16035: LD_ADDR_OWVAR 48
16039: PUSH
16040: LD_STRING You loss
16042: PUSH
16043: EMPTY
16044: LIST
16045: ST_TO_ADDR
16046: END
// every 100 marked 98 do var i , un ;
16047: GO 16049
16049: DISABLE
16050: LD_INT 0
16052: PPUSH
16053: PPUSH
// begin for i = 1 to side_positions do
16054: LD_ADDR_VAR 0 1
16058: PUSH
16059: DOUBLE
16060: LD_INT 1
16062: DEC
16063: ST_TO_ADDR
16064: LD_EXP 38
16068: PUSH
16069: FOR_TO
16070: IFFALSE 16157
// begin if side_positions [ i ] then
16072: LD_EXP 38
16076: PUSH
16077: LD_VAR 0 1
16081: ARRAY
16082: IFFALSE 16155
// if not HasPower ( i ) and not defeated [ i ] then
16084: LD_VAR 0 1
16088: PPUSH
16089: CALL 15392 0 1
16093: NOT
16094: PUSH
16095: LD_LOC 20
16099: PUSH
16100: LD_VAR 0 1
16104: ARRAY
16105: NOT
16106: AND
16107: IFFALSE 16155
// begin defeated = replace ( defeated , i , true ) ;
16109: LD_ADDR_LOC 20
16113: PUSH
16114: LD_LOC 20
16118: PPUSH
16119: LD_VAR 0 1
16123: PPUSH
16124: LD_INT 1
16126: PPUSH
16127: CALL_OW 1
16131: ST_TO_ADDR
// if i = mp_player_side then
16132: LD_VAR 0 1
16136: PUSH
16137: LD_OWVAR 7
16141: EQUAL
16142: IFFALSE 16155
// begin Multiplayer_Loose_Message ;
16144: CALL_OW 521
// SetPlayerSpectator ( ) ;
16148: CALL_OW 572
// enable ( 400 ) ;
16152: LD_INT 400
16154: ENABLE_MARKED
// end ; end ; end ;
16155: GO 16069
16157: POP
16158: POP
// DidGameEnd ;
16159: CALL 16174 0 0
// if not GameEnded then
16163: LD_LOC 21
16167: NOT
16168: IFFALSE 16171
// enable ;
16170: ENABLE
// end ;
16171: PPOPN 2
16173: END
// function DidGameEnd ; var i , k , enemy ; begin
16174: LD_INT 0
16176: PPUSH
16177: PPUSH
16178: PPUSH
16179: PPUSH
// enemy = [ ] ;
16180: LD_ADDR_VAR 0 4
16184: PUSH
16185: EMPTY
16186: ST_TO_ADDR
// for i = 1 to side_positions do
16187: LD_ADDR_VAR 0 2
16191: PUSH
16192: DOUBLE
16193: LD_INT 1
16195: DEC
16196: ST_TO_ADDR
16197: LD_EXP 38
16201: PUSH
16202: FOR_TO
16203: IFFALSE 16297
// if not defeated [ i ] then
16205: LD_LOC 20
16209: PUSH
16210: LD_VAR 0 2
16214: ARRAY
16215: NOT
16216: IFFALSE 16295
// for k = 1 to side_positions do
16218: LD_ADDR_VAR 0 3
16222: PUSH
16223: DOUBLE
16224: LD_INT 1
16226: DEC
16227: ST_TO_ADDR
16228: LD_EXP 38
16232: PUSH
16233: FOR_TO
16234: IFFALSE 16293
// if not defeated [ k ] then
16236: LD_LOC 20
16240: PUSH
16241: LD_VAR 0 3
16245: ARRAY
16246: NOT
16247: IFFALSE 16291
// if not AlliedSides ( i , k ) then
16249: LD_VAR 0 2
16253: PPUSH
16254: LD_VAR 0 3
16258: PPUSH
16259: CALL 15738 0 2
16263: NOT
16264: IFFALSE 16291
// enemy = enemy ^ [ i , k ] ;
16266: LD_ADDR_VAR 0 4
16270: PUSH
16271: LD_VAR 0 4
16275: PUSH
16276: LD_VAR 0 2
16280: PUSH
16281: LD_VAR 0 3
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: ADD
16290: ST_TO_ADDR
16291: GO 16233
16293: POP
16294: POP
16295: GO 16202
16297: POP
16298: POP
// if not enemy then
16299: LD_VAR 0 4
16303: NOT
16304: IFFALSE 16330
// begin GameEnded = true ;
16306: LD_ADDR_LOC 21
16310: PUSH
16311: LD_INT 1
16313: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
16314: LD_LOC 20
16318: PUSH
16319: LD_OWVAR 7
16323: ARRAY
16324: NOT
16325: IFFALSE 16330
// enable ( 401 ) ;
16327: LD_INT 401
16329: ENABLE_MARKED
// end ; end ;
16330: LD_VAR 0 1
16334: RET
// function unfog ; var k , friends ; begin
16335: LD_INT 0
16337: PPUSH
16338: PPUSH
16339: PPUSH
// for k = 1 to side_positions do
16340: LD_ADDR_VAR 0 2
16344: PUSH
16345: DOUBLE
16346: LD_INT 1
16348: DEC
16349: ST_TO_ADDR
16350: LD_EXP 38
16354: PUSH
16355: FOR_TO
16356: IFFALSE 16412
// if not defeated [ k ] then
16358: LD_LOC 20
16362: PUSH
16363: LD_VAR 0 2
16367: ARRAY
16368: NOT
16369: IFFALSE 16410
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
16371: LD_OWVAR 7
16375: PPUSH
16376: LD_VAR 0 2
16380: PPUSH
16381: CALL_OW 81
16385: PUSH
16386: LD_INT 1
16388: PUSH
16389: EMPTY
16390: LIST
16391: IN
16392: IFFALSE 16410
// friends = friends ^ k ;
16394: LD_ADDR_VAR 0 3
16398: PUSH
16399: LD_VAR 0 3
16403: PUSH
16404: LD_VAR 0 2
16408: ADD
16409: ST_TO_ADDR
16410: GO 16355
16412: POP
16413: POP
// if not friends then
16414: LD_VAR 0 3
16418: NOT
16419: IFFALSE 16433
// begin SetPlayerSpectator ( ) ;
16421: CALL_OW 572
// unfoged = true ;
16425: LD_ADDR_LOC 22
16429: PUSH
16430: LD_INT 1
16432: ST_TO_ADDR
// end ; end ;
16433: LD_VAR 0 1
16437: RET
// export function MakeGameEnd ; begin
16438: LD_INT 0
16440: PPUSH
// SetPlayerSpectator ( ) ;
16441: CALL_OW 572
// unfoged = true ;
16445: LD_ADDR_LOC 22
16449: PUSH
16450: LD_INT 1
16452: ST_TO_ADDR
// wait ( 0 0$5 ) ;
16453: LD_INT 175
16455: PPUSH
16456: CALL_OW 67
// GameEnded = true ;
16460: LD_ADDR_LOC 21
16464: PUSH
16465: LD_INT 1
16467: ST_TO_ADDR
// end ;
16468: LD_VAR 0 1
16472: RET
// export function GetGameEnded ; begin
16473: LD_INT 0
16475: PPUSH
// result = GameEnded ;
16476: LD_ADDR_VAR 0 1
16480: PUSH
16481: LD_LOC 21
16485: ST_TO_ADDR
// end ;
16486: LD_VAR 0 1
16490: RET
