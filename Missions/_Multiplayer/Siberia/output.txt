// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_amount_of_siberit , def_public_score , def_siberite_bomb , def_builduptime , def_sheik , def_mastodont ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id , sheik , mastodont ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function read_multiplayer_and_game_parameters ; var i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// if Multiplayer then
   4: LD_OWVAR 4
   8: IFFALSE 72
// begin Game_Type := mp_game_type ;
  10: LD_ADDR_EXP 20
  14: PUSH
  15: LD_OWVAR 6
  19: ST_TO_ADDR
// Your_Side := mp_player_side ;
  20: LD_ADDR_OWVAR 2
  24: PUSH
  25: LD_OWVAR 7
  29: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  30: LD_ADDR_EXP 36
  34: PUSH
  35: LD_OWVAR 17
  39: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  40: LD_ADDR_EXP 34
  44: PUSH
  45: LD_OWVAR 15
  49: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
  50: LD_ADDR_EXP 37
  54: PUSH
  55: LD_OWVAR 16
  59: ST_TO_ADDR
// Teams := mp_teams ;
  60: LD_ADDR_EXP 35
  64: PUSH
  65: LD_OWVAR 12
  69: ST_TO_ADDR
// end else
  70: GO 254
// begin Game_Type := 1 ;
  72: LD_ADDR_EXP 20
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// Your_Side := 3 ;
  80: LD_ADDR_OWVAR 2
  84: PUSH
  85: LD_INT 3
  87: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
  88: LD_ADDR_EXP 36
  92: PUSH
  93: LD_INT 1
  95: PUSH
  96: LD_INT 2
  98: PUSH
  99: LD_INT 3
 101: PUSH
 102: LD_INT 4
 104: PUSH
 105: LD_INT 5
 107: PUSH
 108: LD_INT 6
 110: PUSH
 111: LD_INT 0
 113: PUSH
 114: LD_INT 0
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: LIST
 126: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 127: LD_ADDR_EXP 34
 131: PUSH
 132: LD_INT 1
 134: PUSH
 135: LD_INT 2
 137: PUSH
 138: LD_INT 3
 140: PUSH
 141: LD_INT 4
 143: PUSH
 144: LD_INT 5
 146: PUSH
 147: LD_INT 6
 149: PUSH
 150: LD_INT 0
 152: PUSH
 153: LD_INT 0
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: LIST
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 166: LD_ADDR_EXP 37
 170: PUSH
 171: LD_INT 1
 173: PUSH
 174: LD_INT 2
 176: PUSH
 177: LD_INT 3
 179: PUSH
 180: LD_INT 1
 182: PUSH
 183: LD_INT 2
 185: PUSH
 186: LD_INT 3
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 0
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 205: LD_ADDR_EXP 35
 209: PUSH
 210: LD_INT 1
 212: PUSH
 213: EMPTY
 214: LIST
 215: PUSH
 216: LD_INT 2
 218: PUSH
 219: EMPTY
 220: LIST
 221: PUSH
 222: LD_INT 3
 224: PUSH
 225: EMPTY
 226: LIST
 227: PUSH
 228: LD_INT 4
 230: PUSH
 231: EMPTY
 232: LIST
 233: PUSH
 234: LD_INT 5
 236: PUSH
 237: EMPTY
 238: LIST
 239: PUSH
 240: LD_INT 6
 242: PUSH
 243: EMPTY
 244: LIST
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: LIST
 252: LIST
 253: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 254: LD_ADDR_EXP 38
 258: PUSH
 259: LD_EXP 34
 263: PUSH
 264: LD_INT 0
 266: PUSH
 267: EMPTY
 268: LIST
 269: DIFF
 270: PUSH
 271: LD_INT 1
 273: GREATER
 274: ST_TO_ADDR
// if Multiplayer then
 275: LD_OWVAR 4
 279: IFFALSE 517
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 281: LD_ADDR_EXP 1
 285: PUSH
 286: LD_INT 0
 288: PPUSH
 289: CALL_OW 426
 293: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 294: LD_ADDR_EXP 2
 298: PUSH
 299: LD_INT 1
 301: PPUSH
 302: CALL_OW 426
 306: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 307: LD_ADDR_EXP 3
 311: PUSH
 312: LD_INT 2
 314: PPUSH
 315: CALL_OW 426
 319: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 320: LD_ADDR_EXP 4
 324: PUSH
 325: LD_INT 3
 327: PPUSH
 328: CALL_OW 426
 332: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 333: LD_ADDR_EXP 5
 337: PUSH
 338: LD_INT 4
 340: PPUSH
 341: CALL_OW 426
 345: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 346: LD_ADDR_EXP 6
 350: PUSH
 351: LD_INT 5
 353: PPUSH
 354: CALL_OW 426
 358: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 359: LD_ADDR_EXP 7
 363: PUSH
 364: LD_INT 6
 366: PPUSH
 367: CALL_OW 426
 371: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 372: LD_ADDR_EXP 8
 376: PUSH
 377: LD_INT 10
 379: PPUSH
 380: CALL_OW 426
 384: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 385: LD_ADDR_EXP 9
 389: PUSH
 390: LD_INT 11
 392: PPUSH
 393: CALL_OW 426
 397: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 398: LD_ADDR_EXP 10
 402: PUSH
 403: LD_INT 12
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 411: LD_ADDR_EXP 11
 415: PUSH
 416: LD_INT 13
 418: PPUSH
 419: CALL_OW 426
 423: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 424: LD_ADDR_EXP 12
 428: PUSH
 429: LD_INT 14
 431: PPUSH
 432: CALL_OW 426
 436: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 437: LD_ADDR_EXP 13
 441: PUSH
 442: LD_INT 15
 444: PPUSH
 445: CALL_OW 426
 449: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 450: LD_ADDR_EXP 14
 454: PUSH
 455: LD_INT 16
 457: PPUSH
 458: CALL_OW 426
 462: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 463: LD_ADDR_EXP 15
 467: PUSH
 468: LD_INT 17
 470: PPUSH
 471: CALL_OW 426
 475: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 476: LD_ADDR_EXP 16
 480: PUSH
 481: LD_INT 20
 483: PPUSH
 484: CALL_OW 426
 488: ST_TO_ADDR
// def_sheik := GetMultiplayerSetting ( 22 ) ;
 489: LD_ADDR_EXP 17
 493: PUSH
 494: LD_INT 22
 496: PPUSH
 497: CALL_OW 426
 501: ST_TO_ADDR
// def_mastodont := GetMultiplayerSetting ( 23 ) ;
 502: LD_ADDR_EXP 18
 506: PUSH
 507: LD_INT 23
 509: PPUSH
 510: CALL_OW 426
 514: ST_TO_ADDR
// end else
 515: GO 665
// begin Randomize ;
 517: CALL_OW 10
// def_base_level := 2 ;
 521: LD_ADDR_EXP 1
 525: PUSH
 526: LD_INT 2
 528: ST_TO_ADDR
// def_amount_of_people := 0 ;
 529: LD_ADDR_EXP 2
 533: PUSH
 534: LD_INT 0
 536: ST_TO_ADDR
// def_skill_level := 1 ;
 537: LD_ADDR_EXP 3
 541: PUSH
 542: LD_INT 1
 544: ST_TO_ADDR
// def_starting_resources := 2 ;
 545: LD_ADDR_EXP 4
 549: PUSH
 550: LD_INT 2
 552: ST_TO_ADDR
// def_shipments_density := 1 ;
 553: LD_ADDR_EXP 5
 557: PUSH
 558: LD_INT 1
 560: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
 561: LD_ADDR_EXP 6
 565: PUSH
 566: LD_INT 1
 568: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
 569: LD_ADDR_EXP 7
 573: PUSH
 574: LD_INT 2
 576: ST_TO_ADDR
// def_shared_vision := 1 ;
 577: LD_ADDR_EXP 8
 581: PUSH
 582: LD_INT 1
 584: ST_TO_ADDR
// def_morale_flags := 1 ;
 585: LD_ADDR_EXP 9
 589: PUSH
 590: LD_INT 1
 592: ST_TO_ADDR
// def_siberite_detection := 1 ;
 593: LD_ADDR_EXP 10
 597: PUSH
 598: LD_INT 1
 600: ST_TO_ADDR
// def_people_respawning := 2 ;
 601: LD_ADDR_EXP 11
 605: PUSH
 606: LD_INT 2
 608: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 609: LD_ADDR_EXP 12
 613: PUSH
 614: LD_INT 3
 616: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 617: LD_ADDR_EXP 13
 621: PUSH
 622: LD_INT 0
 624: ST_TO_ADDR
// def_public_score := 0 ;
 625: LD_ADDR_EXP 14
 629: PUSH
 630: LD_INT 0
 632: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 633: LD_ADDR_EXP 15
 637: PUSH
 638: LD_INT 0
 640: ST_TO_ADDR
// def_builduptime := 1 ;
 641: LD_ADDR_EXP 16
 645: PUSH
 646: LD_INT 1
 648: ST_TO_ADDR
// def_sheik := 0 ;
 649: LD_ADDR_EXP 17
 653: PUSH
 654: LD_INT 0
 656: ST_TO_ADDR
// def_mastodont := 0 ;
 657: LD_ADDR_EXP 18
 661: PUSH
 662: LD_INT 0
 664: ST_TO_ADDR
// end ; if isSGUI then
 665: LD_OWVAR 83
 669: IFFALSE 675
// setMpTechs ( ) ;
 671: CALL 10997 0 0
// if ( Game_Type = 5 ) then
 675: LD_EXP 20
 679: PUSH
 680: LD_INT 5
 682: EQUAL
 683: IFFALSE 712
// begin def_base_level := 1 ;
 685: LD_ADDR_EXP 1
 689: PUSH
 690: LD_INT 1
 692: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 693: LD_ADDR_EXP 6
 697: PUSH
 698: LD_INT 0
 700: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
 701: LD_ADDR_EXP 7
 705: PUSH
 706: LD_INT 0
 708: ST_TO_ADDR
// disable ( 10 ) ;
 709: LD_INT 10
 711: DISABLE_MARKED
// end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 712: LD_ADDR_EXP 21
 716: PUSH
 717: LD_INT 0
 719: PUSH
 720: LD_INT 1
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: LIST
 730: PUSH
 731: LD_EXP 1
 735: PUSH
 736: LD_INT 1
 738: PLUS
 739: ARRAY
 740: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 ] [ def_base_level + 1 ] ;
 741: LD_ADDR_EXP 22
 745: PUSH
 746: LD_INT 0
 748: PUSH
 749: LD_INT 0
 751: PUSH
 752: LD_INT 2
 754: PUSH
 755: EMPTY
 756: LIST
 757: LIST
 758: LIST
 759: PUSH
 760: LD_EXP 1
 764: PUSH
 765: LD_INT 1
 767: PLUS
 768: ARRAY
 769: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 770: LD_ADDR_EXP 23
 774: PUSH
 775: LD_INT 9
 777: PUSH
 778: LD_INT 12
 780: PUSH
 781: LD_INT 15
 783: PUSH
 784: LD_INT 24
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: LIST
 791: LIST
 792: PUSH
 793: LD_EXP 2
 797: PUSH
 798: LD_INT 1
 800: PLUS
 801: ARRAY
 802: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 , 8 ] [ def_skill_level + 1 ] ;
 803: LD_ADDR_EXP 24
 807: PUSH
 808: LD_INT 2
 810: PUSH
 811: LD_INT 3
 813: PUSH
 814: LD_INT 4
 816: PUSH
 817: LD_INT 5
 819: PUSH
 820: LD_INT 8
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: LIST
 827: LIST
 828: LIST
 829: PUSH
 830: LD_EXP 3
 834: PUSH
 835: LD_INT 1
 837: PLUS
 838: ARRAY
 839: ST_TO_ADDR
// if ( Game_Type = 5 ) then
 840: LD_EXP 20
 844: PUSH
 845: LD_INT 5
 847: EQUAL
 848: IFFALSE 966
// begin starting_resources := [ [ 1000 , 100 , 100 ] , [ 2000 , 200 , 200 ] , [ 5000 , 500 , 500 ] , [ 10000 , 1000 , 1000 ] , [ 25000 , 2500 , 2500 ] , [ 50000 , 5000 , 5000 ] ] [ def_starting_resources + 1 ] ;
 850: LD_ADDR_EXP 26
 854: PUSH
 855: LD_INT 1000
 857: PUSH
 858: LD_INT 100
 860: PUSH
 861: LD_INT 100
 863: PUSH
 864: EMPTY
 865: LIST
 866: LIST
 867: LIST
 868: PUSH
 869: LD_INT 2000
 871: PUSH
 872: LD_INT 200
 874: PUSH
 875: LD_INT 200
 877: PUSH
 878: EMPTY
 879: LIST
 880: LIST
 881: LIST
 882: PUSH
 883: LD_INT 5000
 885: PUSH
 886: LD_INT 500
 888: PUSH
 889: LD_INT 500
 891: PUSH
 892: EMPTY
 893: LIST
 894: LIST
 895: LIST
 896: PUSH
 897: LD_INT 10000
 899: PUSH
 900: LD_INT 1000
 902: PUSH
 903: LD_INT 1000
 905: PUSH
 906: EMPTY
 907: LIST
 908: LIST
 909: LIST
 910: PUSH
 911: LD_INT 25000
 913: PUSH
 914: LD_INT 2500
 916: PUSH
 917: LD_INT 2500
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: LIST
 924: PUSH
 925: LD_INT 50000
 927: PUSH
 928: LD_INT 5000
 930: PUSH
 931: LD_INT 5000
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: LIST
 938: PUSH
 939: EMPTY
 940: LIST
 941: LIST
 942: LIST
 943: LIST
 944: LIST
 945: LIST
 946: PUSH
 947: LD_EXP 4
 951: PUSH
 952: LD_INT 1
 954: PLUS
 955: ARRAY
 956: ST_TO_ADDR
// starting_crates := [ ] ;
 957: LD_ADDR_EXP 25
 961: PUSH
 962: EMPTY
 963: ST_TO_ADDR
// end else
 964: GO 1112
// begin starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 966: LD_ADDR_EXP 26
 970: PUSH
 971: LD_INT 0
 973: PUSH
 974: LD_INT 0
 976: PUSH
 977: LD_INT 0
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: LIST
 984: PUSH
 985: LD_INT 30
 987: PUSH
 988: LD_INT 0
 990: PUSH
 991: LD_INT 0
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 50
1001: PUSH
1002: LD_INT 20
1004: PUSH
1005: LD_INT 0
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: LIST
1012: PUSH
1013: LD_INT 80
1015: PUSH
1016: LD_INT 40
1018: PUSH
1019: LD_INT 20
1021: PUSH
1022: EMPTY
1023: LIST
1024: LIST
1025: LIST
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: PUSH
1033: LD_EXP 4
1037: PUSH
1038: LD_INT 1
1040: PLUS
1041: ARRAY
1042: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1043: LD_ADDR_EXP 25
1047: PUSH
1048: LD_INT 10
1050: PUSH
1051: EMPTY
1052: LIST
1053: PUSH
1054: LD_INT 7
1056: PUSH
1057: LD_INT 14
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: PUSH
1064: LD_INT 6
1066: PUSH
1067: LD_INT 12
1069: PUSH
1070: LD_INT 18
1072: PUSH
1073: EMPTY
1074: LIST
1075: LIST
1076: LIST
1077: PUSH
1078: LD_INT 5
1080: PUSH
1081: LD_INT 10
1083: PUSH
1084: LD_INT 15
1086: PUSH
1087: LD_INT 20
1089: PUSH
1090: EMPTY
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: LIST
1100: LIST
1101: PUSH
1102: LD_EXP 4
1106: PUSH
1107: LD_INT 1
1109: PLUS
1110: ARRAY
1111: ST_TO_ADDR
// end ; shipments_density := [ 150 , 125 , 100 , 50 ] [ def_shipments_density + 1 ] ;
1112: LD_ADDR_EXP 27
1116: PUSH
1117: LD_INT 150
1119: PUSH
1120: LD_INT 125
1122: PUSH
1123: LD_INT 100
1125: PUSH
1126: LD_INT 50
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: LIST
1133: LIST
1134: PUSH
1135: LD_EXP 5
1139: PUSH
1140: LD_INT 1
1142: PLUS
1143: ARRAY
1144: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1145: LD_ADDR_EXP 31
1149: PUSH
1150: LD_INT 0
1152: PUSH
1153: LD_INT 10500
1155: PUSH
1156: LD_INT 6300
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: LIST
1163: PUSH
1164: LD_EXP 11
1168: PUSH
1169: LD_INT 1
1171: PLUS
1172: ARRAY
1173: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1174: LD_ADDR_EXP 32
1178: PUSH
1179: LD_INT 0
1181: PUSH
1182: LD_INT 31500
1184: PUSH
1185: LD_INT 10500
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: PUSH
1193: LD_EXP 11
1197: PUSH
1198: LD_INT 1
1200: PLUS
1201: ARRAY
1202: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1203: LD_ADDR_EXP 29
1207: PUSH
1208: LD_INT 0
1210: PUSH
1211: LD_INT 1
1213: PUSH
1214: LD_INT 2
1216: PUSH
1217: LD_INT 3
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: PUSH
1226: LD_EXP 12
1230: PUSH
1231: LD_INT 1
1233: PLUS
1234: ARRAY
1235: ST_TO_ADDR
// amount_of_siberit := [ 30 , 50 , 80 , 100 , 130 , 150 , 200 ] [ def_amount_of_siberit + 1 ] ;
1236: LD_ADDR_EXP 30
1240: PUSH
1241: LD_INT 30
1243: PUSH
1244: LD_INT 50
1246: PUSH
1247: LD_INT 80
1249: PUSH
1250: LD_INT 100
1252: PUSH
1253: LD_INT 130
1255: PUSH
1256: LD_INT 150
1258: PUSH
1259: LD_INT 200
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: LIST
1270: PUSH
1271: LD_EXP 13
1275: PUSH
1276: LD_INT 1
1278: PLUS
1279: ARRAY
1280: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1281: LD_ADDR_EXP 28
1285: PUSH
1286: LD_INT 1
1288: NEG
1289: PUSH
1290: LD_INT 350
1292: PUSH
1293: LD_INT 700
1295: PUSH
1296: LD_INT 1400
1298: PUSH
1299: LD_INT 0
1301: PUSH
1302: EMPTY
1303: LIST
1304: LIST
1305: LIST
1306: LIST
1307: LIST
1308: PUSH
1309: LD_EXP 9
1313: PUSH
1314: LD_INT 1
1316: PLUS
1317: ARRAY
1318: ST_TO_ADDR
// battle_flags_id := [ ] ;
1319: LD_ADDR_EXP 46
1323: PUSH
1324: EMPTY
1325: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1326: LD_ADDR_EXP 33
1330: PUSH
1331: LD_INT 0
1333: PUSH
1334: LD_INT 1
1336: PUSH
1337: LD_INT 63000
1339: PUSH
1340: LD_INT 126000
1342: PUSH
1343: LD_INT 189000
1345: PUSH
1346: LD_INT 252000
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: PUSH
1357: LD_EXP 15
1361: PUSH
1362: LD_INT 1
1364: PLUS
1365: ARRAY
1366: ST_TO_ADDR
// if ( Game_Type = 12 ) then
1367: LD_EXP 20
1371: PUSH
1372: LD_INT 12
1374: EQUAL
1375: IFFALSE 1433
// begin sheik := [ 0 , 1 ] [ def_sheik + 1 ] ;
1377: LD_ADDR_EXP 47
1381: PUSH
1382: LD_INT 0
1384: PUSH
1385: LD_INT 1
1387: PUSH
1388: EMPTY
1389: LIST
1390: LIST
1391: PUSH
1392: LD_EXP 17
1396: PUSH
1397: LD_INT 1
1399: PLUS
1400: ARRAY
1401: ST_TO_ADDR
// mastodont := [ 0 , 1 , 2 ] [ def_mastodont + 1 ] end else
1402: LD_ADDR_EXP 48
1406: PUSH
1407: LD_INT 0
1409: PUSH
1410: LD_INT 1
1412: PUSH
1413: LD_INT 2
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: LIST
1420: PUSH
1421: LD_EXP 18
1425: PUSH
1426: LD_INT 1
1428: PLUS
1429: ARRAY
1430: ST_TO_ADDR
1431: GO 1449
// begin sheik := 0 ;
1433: LD_ADDR_EXP 47
1437: PUSH
1438: LD_INT 0
1440: ST_TO_ADDR
// mastodont := 0 ;
1441: LD_ADDR_EXP 48
1445: PUSH
1446: LD_INT 0
1448: ST_TO_ADDR
// end ; end ;
1449: LD_VAR 0 1
1453: RET
// function init_map ; var i , j ; begin
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
1458: PPUSH
// normal_oil_deposits_locations := [ [ 101 , 187 ] , [ 18 , 26 ] , [ 50 , 89 ] , [ 123 , 3 ] , [ 182 , 69 ] , [ 231 , 174 ] ] ;
1459: LD_ADDR_EXP 42
1463: PUSH
1464: LD_INT 101
1466: PUSH
1467: LD_INT 187
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: PUSH
1474: LD_INT 18
1476: PUSH
1477: LD_INT 26
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: PUSH
1484: LD_INT 50
1486: PUSH
1487: LD_INT 89
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 123
1496: PUSH
1497: LD_INT 3
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PUSH
1504: LD_INT 182
1506: PUSH
1507: LD_INT 69
1509: PUSH
1510: EMPTY
1511: LIST
1512: LIST
1513: PUSH
1514: LD_INT 231
1516: PUSH
1517: LD_INT 174
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: LIST
1531: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 101 , 187 ] , [ 108 , 183 ] ] , [ [ 18 , 26 ] , [ 7 , 8 ] ] , [ [ 50 , 89 ] , [ 62 , 99 ] ] , [ [ 123 , 3 ] , [ 149 , 18 ] ] , [ [ 182 , 69 ] , [ 202 , 90 ] ] , [ [ 231 , 174 ] , [ 239 , 164 ] ] ] ;
1532: LD_ADDR_EXP 43
1536: PUSH
1537: LD_INT 101
1539: PUSH
1540: LD_INT 187
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: PUSH
1547: LD_INT 108
1549: PUSH
1550: LD_INT 183
1552: PUSH
1553: EMPTY
1554: LIST
1555: LIST
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: PUSH
1561: LD_INT 18
1563: PUSH
1564: LD_INT 26
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: PUSH
1571: LD_INT 7
1573: PUSH
1574: LD_INT 8
1576: PUSH
1577: EMPTY
1578: LIST
1579: LIST
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: PUSH
1585: LD_INT 50
1587: PUSH
1588: LD_INT 89
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PUSH
1595: LD_INT 62
1597: PUSH
1598: LD_INT 99
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: PUSH
1605: EMPTY
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 123
1611: PUSH
1612: LD_INT 3
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PUSH
1619: LD_INT 149
1621: PUSH
1622: LD_INT 18
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: PUSH
1633: LD_INT 182
1635: PUSH
1636: LD_INT 69
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: PUSH
1643: LD_INT 202
1645: PUSH
1646: LD_INT 90
1648: PUSH
1649: EMPTY
1650: LIST
1651: LIST
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PUSH
1657: LD_INT 231
1659: PUSH
1660: LD_INT 174
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: PUSH
1667: LD_INT 239
1669: PUSH
1670: LD_INT 164
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: PUSH
1677: EMPTY
1678: LIST
1679: LIST
1680: PUSH
1681: EMPTY
1682: LIST
1683: LIST
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 96 , 185 ] , [ 21 , 29 ] , [ 50 , 85 ] , [ 128 , 2 ] , [ 186 , 72 ] , [ 234 , 174 ] ] ;
1689: LD_ADDR_EXP 44
1693: PUSH
1694: LD_INT 96
1696: PUSH
1697: LD_INT 185
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 21
1706: PUSH
1707: LD_INT 29
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: PUSH
1714: LD_INT 50
1716: PUSH
1717: LD_INT 85
1719: PUSH
1720: EMPTY
1721: LIST
1722: LIST
1723: PUSH
1724: LD_INT 128
1726: PUSH
1727: LD_INT 2
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: PUSH
1734: LD_INT 186
1736: PUSH
1737: LD_INT 72
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: PUSH
1744: LD_INT 234
1746: PUSH
1747: LD_INT 174
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: LIST
1758: LIST
1759: LIST
1760: LIST
1761: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 96 , 185 ] , [ 109 , 179 ] ] , [ [ 21 , 29 ] , [ 9 , 5 ] ] , [ [ 50 , 85 ] , [ 66 , 102 ] ] , [ [ 128 , 2 ] , [ 152 , 15 ] ] , [ [ 186 , 72 ] , [ 200 , 86 ] ] , [ [ 234 , 174 ] , [ 237 , 160 ] ] ] ;
1762: LD_ADDR_EXP 45
1766: PUSH
1767: LD_INT 96
1769: PUSH
1770: LD_INT 185
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: PUSH
1777: LD_INT 109
1779: PUSH
1780: LD_INT 179
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: PUSH
1791: LD_INT 21
1793: PUSH
1794: LD_INT 29
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: PUSH
1801: LD_INT 9
1803: PUSH
1804: LD_INT 5
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: PUSH
1815: LD_INT 50
1817: PUSH
1818: LD_INT 85
1820: PUSH
1821: EMPTY
1822: LIST
1823: LIST
1824: PUSH
1825: LD_INT 66
1827: PUSH
1828: LD_INT 102
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: PUSH
1835: EMPTY
1836: LIST
1837: LIST
1838: PUSH
1839: LD_INT 128
1841: PUSH
1842: LD_INT 2
1844: PUSH
1845: EMPTY
1846: LIST
1847: LIST
1848: PUSH
1849: LD_INT 152
1851: PUSH
1852: LD_INT 15
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: PUSH
1863: LD_INT 186
1865: PUSH
1866: LD_INT 72
1868: PUSH
1869: EMPTY
1870: LIST
1871: LIST
1872: PUSH
1873: LD_INT 200
1875: PUSH
1876: LD_INT 86
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: LD_INT 234
1889: PUSH
1890: LD_INT 174
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: PUSH
1897: LD_INT 237
1899: PUSH
1900: LD_INT 160
1902: PUSH
1903: EMPTY
1904: LIST
1905: LIST
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: ST_TO_ADDR
// depot_def := [ [ 100 , 179 , 0 ] , [ 21 , 18 , 2 ] , [ 65 , 90 , 2 ] , [ 132 , 11 , 1 ] , [ 190 , 82 , 4 ] , [ 230 , 164 , 4 ] ] ;
1919: LD_ADDR_EXP 39
1923: PUSH
1924: LD_INT 100
1926: PUSH
1927: LD_INT 179
1929: PUSH
1930: LD_INT 0
1932: PUSH
1933: EMPTY
1934: LIST
1935: LIST
1936: LIST
1937: PUSH
1938: LD_INT 21
1940: PUSH
1941: LD_INT 18
1943: PUSH
1944: LD_INT 2
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: PUSH
1952: LD_INT 65
1954: PUSH
1955: LD_INT 90
1957: PUSH
1958: LD_INT 2
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: LIST
1965: PUSH
1966: LD_INT 132
1968: PUSH
1969: LD_INT 11
1971: PUSH
1972: LD_INT 1
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: LIST
1979: PUSH
1980: LD_INT 190
1982: PUSH
1983: LD_INT 82
1985: PUSH
1986: LD_INT 4
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: LIST
1993: PUSH
1994: LD_INT 230
1996: PUSH
1997: LD_INT 164
1999: PUSH
2000: LD_INT 4
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: LIST
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: LIST
2015: ST_TO_ADDR
// for i in depot_def do
2016: LD_ADDR_VAR 0 2
2020: PUSH
2021: LD_EXP 39
2025: PUSH
2026: FOR_IN
2027: IFFALSE 2101
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 10 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 10 ) ] ] ;
2029: LD_ADDR_EXP 41
2033: PUSH
2034: LD_EXP 41
2038: PUSH
2039: LD_VAR 0 2
2043: PUSH
2044: LD_INT 1
2046: ARRAY
2047: PPUSH
2048: LD_VAR 0 2
2052: PUSH
2053: LD_INT 3
2055: ARRAY
2056: PPUSH
2057: LD_INT 10
2059: PPUSH
2060: CALL_OW 272
2064: PUSH
2065: LD_VAR 0 2
2069: PUSH
2070: LD_INT 2
2072: ARRAY
2073: PPUSH
2074: LD_VAR 0 2
2078: PUSH
2079: LD_INT 3
2081: ARRAY
2082: PPUSH
2083: LD_INT 10
2085: PPUSH
2086: CALL_OW 273
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: PUSH
2095: EMPTY
2096: LIST
2097: ADD
2098: ST_TO_ADDR
2099: GO 2026
2101: POP
2102: POP
// breastworks_def := [ [ [ 88 , 154 , 3 ] , [ 105 , 167 , 4 ] ] , [ [ 27 , 32 , 5 ] , [ 40 , 24 , 4 ] ] , [ [ 78 , 102 , 5 ] , [ 74 , 84 , 3 ] ] , [ [ 128 , 20 , 0 ] , [ 122 , 6 , 1 ] ] , [ [ 185 , 92 , 0 ] , [ 175 , 73 , 1 ] ] , [ [ 219 , 171 , 1 ] , [ 219 , 151 , 2 ] ] ] ;
2103: LD_ADDR_EXP 40
2107: PUSH
2108: LD_INT 88
2110: PUSH
2111: LD_INT 154
2113: PUSH
2114: LD_INT 3
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: LIST
2121: PUSH
2122: LD_INT 105
2124: PUSH
2125: LD_INT 167
2127: PUSH
2128: LD_INT 4
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: LIST
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: PUSH
2140: LD_INT 27
2142: PUSH
2143: LD_INT 32
2145: PUSH
2146: LD_INT 5
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: LIST
2153: PUSH
2154: LD_INT 40
2156: PUSH
2157: LD_INT 24
2159: PUSH
2160: LD_INT 4
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: LIST
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: PUSH
2172: LD_INT 78
2174: PUSH
2175: LD_INT 102
2177: PUSH
2178: LD_INT 5
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: LIST
2185: PUSH
2186: LD_INT 74
2188: PUSH
2189: LD_INT 84
2191: PUSH
2192: LD_INT 3
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: LIST
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: PUSH
2204: LD_INT 128
2206: PUSH
2207: LD_INT 20
2209: PUSH
2210: LD_INT 0
2212: PUSH
2213: EMPTY
2214: LIST
2215: LIST
2216: LIST
2217: PUSH
2218: LD_INT 122
2220: PUSH
2221: LD_INT 6
2223: PUSH
2224: LD_INT 1
2226: PUSH
2227: EMPTY
2228: LIST
2229: LIST
2230: LIST
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PUSH
2236: LD_INT 185
2238: PUSH
2239: LD_INT 92
2241: PUSH
2242: LD_INT 0
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: LIST
2249: PUSH
2250: LD_INT 175
2252: PUSH
2253: LD_INT 73
2255: PUSH
2256: LD_INT 1
2258: PUSH
2259: EMPTY
2260: LIST
2261: LIST
2262: LIST
2263: PUSH
2264: EMPTY
2265: LIST
2266: LIST
2267: PUSH
2268: LD_INT 219
2270: PUSH
2271: LD_INT 171
2273: PUSH
2274: LD_INT 1
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: LIST
2281: PUSH
2282: LD_INT 219
2284: PUSH
2285: LD_INT 151
2287: PUSH
2288: LD_INT 2
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: LIST
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: EMPTY
2301: LIST
2302: LIST
2303: LIST
2304: LIST
2305: LIST
2306: LIST
2307: ST_TO_ADDR
// for i = 1 to Side_Positions do
2308: LD_ADDR_VAR 0 2
2312: PUSH
2313: DOUBLE
2314: LD_INT 1
2316: DEC
2317: ST_TO_ADDR
2318: LD_EXP 36
2322: PUSH
2323: FOR_TO
2324: IFFALSE 2454
// begin if not Side_Positions [ i ] then
2326: LD_EXP 36
2330: PUSH
2331: LD_VAR 0 2
2335: ARRAY
2336: NOT
2337: IFFALSE 2341
// continue ;
2339: GO 2323
// if def_extra_oil_deposits then
2341: LD_EXP 6
2345: IFFALSE 2403
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2347: LD_ADDR_VAR 0 3
2351: PUSH
2352: LD_EXP 43
2356: PUSH
2357: LD_EXP 36
2361: PUSH
2362: LD_VAR 0 2
2366: ARRAY
2367: ARRAY
2368: PUSH
2369: FOR_IN
2370: IFFALSE 2399
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2372: LD_VAR 0 3
2376: PUSH
2377: LD_INT 1
2379: ARRAY
2380: PPUSH
2381: LD_VAR 0 3
2385: PUSH
2386: LD_INT 2
2388: ARRAY
2389: PPUSH
2390: LD_INT 2
2392: PPUSH
2393: CALL_OW 62
2397: GO 2369
2399: POP
2400: POP
2401: GO 2452
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2403: LD_EXP 42
2407: PUSH
2408: LD_EXP 36
2412: PUSH
2413: LD_VAR 0 2
2417: ARRAY
2418: ARRAY
2419: PUSH
2420: LD_INT 1
2422: ARRAY
2423: PPUSH
2424: LD_EXP 42
2428: PUSH
2429: LD_EXP 36
2433: PUSH
2434: LD_VAR 0 2
2438: ARRAY
2439: ARRAY
2440: PUSH
2441: LD_INT 2
2443: ARRAY
2444: PPUSH
2445: LD_INT 2
2447: PPUSH
2448: CALL_OW 62
// end ;
2452: GO 2323
2454: POP
2455: POP
// if def_extra_sib_deposits then
2456: LD_EXP 7
2460: IFFALSE 2614
// for i = 1 to Side_Positions do
2462: LD_ADDR_VAR 0 2
2466: PUSH
2467: DOUBLE
2468: LD_INT 1
2470: DEC
2471: ST_TO_ADDR
2472: LD_EXP 36
2476: PUSH
2477: FOR_TO
2478: IFFALSE 2612
// begin if not Side_Positions [ i ] then
2480: LD_EXP 36
2484: PUSH
2485: LD_VAR 0 2
2489: ARRAY
2490: NOT
2491: IFFALSE 2495
// continue ;
2493: GO 2477
// if def_extra_sib_deposits = 2 then
2495: LD_EXP 7
2499: PUSH
2500: LD_INT 2
2502: EQUAL
2503: IFFALSE 2561
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
2505: LD_ADDR_VAR 0 3
2509: PUSH
2510: LD_EXP 45
2514: PUSH
2515: LD_EXP 36
2519: PUSH
2520: LD_VAR 0 2
2524: ARRAY
2525: ARRAY
2526: PUSH
2527: FOR_IN
2528: IFFALSE 2557
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2530: LD_VAR 0 3
2534: PUSH
2535: LD_INT 1
2537: ARRAY
2538: PPUSH
2539: LD_VAR 0 3
2543: PUSH
2544: LD_INT 2
2546: ARRAY
2547: PPUSH
2548: LD_INT 3
2550: PPUSH
2551: CALL_OW 62
2555: GO 2527
2557: POP
2558: POP
2559: GO 2610
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2561: LD_EXP 44
2565: PUSH
2566: LD_EXP 36
2570: PUSH
2571: LD_VAR 0 2
2575: ARRAY
2576: ARRAY
2577: PUSH
2578: LD_INT 1
2580: ARRAY
2581: PPUSH
2582: LD_EXP 44
2586: PUSH
2587: LD_EXP 36
2591: PUSH
2592: LD_VAR 0 2
2596: ARRAY
2597: ARRAY
2598: PUSH
2599: LD_INT 2
2601: ARRAY
2602: PPUSH
2603: LD_INT 3
2605: PPUSH
2606: CALL_OW 62
// end ;
2610: GO 2477
2612: POP
2613: POP
// end ;
2614: LD_VAR 0 1
2618: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2619: LD_INT 0
2621: PPUSH
2622: PPUSH
2623: PPUSH
// if not Team_Game then
2624: LD_EXP 38
2628: NOT
2629: IFFALSE 2727
// begin for i = 1 to 8 do
2631: LD_ADDR_VAR 0 2
2635: PUSH
2636: DOUBLE
2637: LD_INT 1
2639: DEC
2640: ST_TO_ADDR
2641: LD_INT 8
2643: PUSH
2644: FOR_TO
2645: IFFALSE 2723
// for j = 1 to 8 do
2647: LD_ADDR_VAR 0 3
2651: PUSH
2652: DOUBLE
2653: LD_INT 1
2655: DEC
2656: ST_TO_ADDR
2657: LD_INT 8
2659: PUSH
2660: FOR_TO
2661: IFFALSE 2719
// if i <> j then
2663: LD_VAR 0 2
2667: PUSH
2668: LD_VAR 0 3
2672: NONEQUAL
2673: IFFALSE 2697
// SetAttitude ( i , j , att_neutral , true ) else
2675: LD_VAR 0 2
2679: PPUSH
2680: LD_VAR 0 3
2684: PPUSH
2685: LD_INT 0
2687: PPUSH
2688: LD_INT 1
2690: PPUSH
2691: CALL_OW 80
2695: GO 2717
// SetAttitude ( i , j , att_friend , true ) ;
2697: LD_VAR 0 2
2701: PPUSH
2702: LD_VAR 0 3
2706: PPUSH
2707: LD_INT 1
2709: PPUSH
2710: LD_INT 1
2712: PPUSH
2713: CALL_OW 80
2717: GO 2660
2719: POP
2720: POP
2721: GO 2644
2723: POP
2724: POP
// end else
2725: GO 2902
// begin if def_shared_vision then
2727: LD_EXP 8
2731: IFFALSE 2796
// begin for i in Teams do
2733: LD_ADDR_VAR 0 2
2737: PUSH
2738: LD_EXP 35
2742: PUSH
2743: FOR_IN
2744: IFFALSE 2794
// for j = 2 to i do
2746: LD_ADDR_VAR 0 3
2750: PUSH
2751: DOUBLE
2752: LD_INT 2
2754: DEC
2755: ST_TO_ADDR
2756: LD_VAR 0 2
2760: PUSH
2761: FOR_TO
2762: IFFALSE 2790
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2764: LD_VAR 0 2
2768: PUSH
2769: LD_VAR 0 3
2773: ARRAY
2774: PPUSH
2775: LD_VAR 0 2
2779: PUSH
2780: LD_INT 1
2782: ARRAY
2783: PPUSH
2784: CALL_OW 343
2788: GO 2761
2790: POP
2791: POP
2792: GO 2743
2794: POP
2795: POP
// end ; for i = 1 to 8 do
2796: LD_ADDR_VAR 0 2
2800: PUSH
2801: DOUBLE
2802: LD_INT 1
2804: DEC
2805: ST_TO_ADDR
2806: LD_INT 8
2808: PUSH
2809: FOR_TO
2810: IFFALSE 2900
// for j = 1 to 8 do
2812: LD_ADDR_VAR 0 3
2816: PUSH
2817: DOUBLE
2818: LD_INT 1
2820: DEC
2821: ST_TO_ADDR
2822: LD_INT 8
2824: PUSH
2825: FOR_TO
2826: IFFALSE 2896
// if Side_Teams [ i ] = Side_Teams [ j ] then
2828: LD_EXP 34
2832: PUSH
2833: LD_VAR 0 2
2837: ARRAY
2838: PUSH
2839: LD_EXP 34
2843: PUSH
2844: LD_VAR 0 3
2848: ARRAY
2849: EQUAL
2850: IFFALSE 2874
// SetAttitude ( i , j , att_friend , true ) else
2852: LD_VAR 0 2
2856: PPUSH
2857: LD_VAR 0 3
2861: PPUSH
2862: LD_INT 1
2864: PPUSH
2865: LD_INT 1
2867: PPUSH
2868: CALL_OW 80
2872: GO 2894
// SetAttitude ( i , j , att_enemy , true ) ;
2874: LD_VAR 0 2
2878: PPUSH
2879: LD_VAR 0 3
2883: PPUSH
2884: LD_INT 2
2886: PPUSH
2887: LD_INT 1
2889: PPUSH
2890: CALL_OW 80
2894: GO 2825
2896: POP
2897: POP
2898: GO 2809
2900: POP
2901: POP
// end ; end ;
2902: LD_VAR 0 1
2906: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2907: LD_INT 0
2909: PPUSH
2910: PPUSH
2911: PPUSH
2912: PPUSH
// result := [ ] ;
2913: LD_ADDR_VAR 0 7
2917: PUSH
2918: EMPTY
2919: ST_TO_ADDR
// for i := 1 to count do
2920: LD_ADDR_VAR 0 8
2924: PUSH
2925: DOUBLE
2926: LD_INT 1
2928: DEC
2929: ST_TO_ADDR
2930: LD_VAR 0 1
2934: PUSH
2935: FOR_TO
2936: IFFALSE 3386
// begin uc_direction := Rand ( 0 , 5 ) ;
2938: LD_ADDR_OWVAR 24
2942: PUSH
2943: LD_INT 0
2945: PPUSH
2946: LD_INT 5
2948: PPUSH
2949: CALL_OW 12
2953: ST_TO_ADDR
// if commander then
2954: LD_LOC 1
2958: IFFALSE 3099
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2960: LD_ADDR_OWVAR 26
2964: PUSH
2965: LD_OWVAR 19
2969: PUSH
2970: LD_OWVAR 20
2974: ARRAY
2975: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2976: LD_INT 1
2978: PPUSH
2979: LD_INT 2
2981: PPUSH
2982: CALL_OW 12
2986: PPUSH
2987: LD_VAR 0 2
2991: PPUSH
2992: LD_EXP 24
2996: PUSH
2997: LD_INT 2
2999: PLUS
3000: PPUSH
3001: CALL_OW 380
// hc_importance := 105 ;
3005: LD_ADDR_OWVAR 32
3009: PUSH
3010: LD_INT 105
3012: ST_TO_ADDR
// commander := false ;
3013: LD_ADDR_LOC 1
3017: PUSH
3018: LD_INT 0
3020: ST_TO_ADDR
// if Multiplayer then
3021: LD_OWVAR 4
3025: IFFALSE 3097
// begin if sheik then
3027: LD_EXP 47
3031: IFFALSE 3059
// begin hc_gallery :=  ;
3033: LD_ADDR_OWVAR 33
3037: PUSH
3038: LD_STRING 
3040: ST_TO_ADDR
// hc_class := class_desert_warior ;
3041: LD_ADDR_OWVAR 28
3045: PUSH
3046: LD_INT 11
3048: ST_TO_ADDR
// hc_sex := sex_male ;
3049: LD_ADDR_OWVAR 27
3053: PUSH
3054: LD_INT 1
3056: ST_TO_ADDR
// end else
3057: GO 3097
// begin hc_gallery := MULTIAVATARS ;
3059: LD_ADDR_OWVAR 33
3063: PUSH
3064: LD_STRING MULTIAVATARS
3066: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3067: LD_ADDR_OWVAR 34
3071: PUSH
3072: LD_OWVAR 20
3076: PPUSH
3077: CALL_OW 525
3081: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3082: LD_ADDR_OWVAR 27
3086: PUSH
3087: LD_OWVAR 20
3091: PPUSH
3092: CALL_OW 526
3096: ST_TO_ADDR
// end ; end ; end else
3097: GO 3162
// begin hc_name :=  ;
3099: LD_ADDR_OWVAR 26
3103: PUSH
3104: LD_STRING 
3106: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3107: LD_INT 1
3109: PPUSH
3110: LD_INT 2
3112: PPUSH
3113: CALL_OW 12
3117: PPUSH
3118: LD_VAR 0 2
3122: PPUSH
3123: LD_EXP 24
3127: PPUSH
3128: CALL_OW 380
// hc_importance := 0 ;
3132: LD_ADDR_OWVAR 32
3136: PUSH
3137: LD_INT 0
3139: ST_TO_ADDR
// if Multiplayer then
3140: LD_OWVAR 4
3144: IFFALSE 3162
// begin hc_gallery :=  ;
3146: LD_ADDR_OWVAR 33
3150: PUSH
3151: LD_STRING 
3153: ST_TO_ADDR
// hc_face_number := 0 ;
3154: LD_ADDR_OWVAR 34
3158: PUSH
3159: LD_INT 0
3161: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3162: LD_ADDR_VAR 0 10
3166: PUSH
3167: CALL_OW 44
3171: ST_TO_ADDR
// if global_defined then
3172: LD_LOC 3
3176: IFFALSE 3316
// begin if ( cl = class_soldier ) then
3178: LD_VAR 0 2
3182: PUSH
3183: LD_INT 1
3185: EQUAL
3186: IFFALSE 3206
// j := i + soldiers_created else
3188: LD_ADDR_VAR 0 9
3192: PUSH
3193: LD_VAR 0 8
3197: PUSH
3198: LD_LOC 4
3202: PLUS
3203: ST_TO_ADDR
3204: GO 3216
// j := i ;
3206: LD_ADDR_VAR 0 9
3210: PUSH
3211: LD_VAR 0 8
3215: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3216: LD_LOC 2
3220: PUSH
3221: LD_VAR 0 2
3225: ARRAY
3226: PUSH
3227: LD_VAR 0 9
3231: ARRAY
3232: PPUSH
3233: LD_VAR 0 10
3237: PPUSH
3238: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3242: LD_VAR 0 10
3246: PPUSH
3247: LD_INT 2
3249: PPUSH
3250: LD_LOC 2
3254: PUSH
3255: LD_VAR 0 2
3259: ARRAY
3260: PUSH
3261: LD_VAR 0 9
3265: ARRAY
3266: PPUSH
3267: LD_INT 2
3269: PPUSH
3270: CALL_OW 260
3274: PPUSH
3275: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3279: LD_VAR 0 10
3283: PPUSH
3284: LD_INT 1
3286: PPUSH
3287: LD_LOC 2
3291: PUSH
3292: LD_VAR 0 2
3296: ARRAY
3297: PUSH
3298: LD_VAR 0 9
3302: ARRAY
3303: PPUSH
3304: LD_INT 1
3306: PPUSH
3307: CALL_OW 260
3311: PPUSH
3312: CALL_OW 239
// end ; if building then
3316: LD_VAR 0 6
3320: IFFALSE 3338
// PlaceHumanInUnit ( un , building ) else
3322: LD_VAR 0 10
3326: PPUSH
3327: LD_VAR 0 6
3331: PPUSH
3332: CALL_OW 52
3336: GO 3365
// PlaceUnitXYR ( un , x , y , r , false ) ;
3338: LD_VAR 0 10
3342: PPUSH
3343: LD_VAR 0 3
3347: PPUSH
3348: LD_VAR 0 4
3352: PPUSH
3353: LD_VAR 0 5
3357: PPUSH
3358: LD_INT 0
3360: PPUSH
3361: CALL_OW 50
// result := result ^ [ un ] ;
3365: LD_ADDR_VAR 0 7
3369: PUSH
3370: LD_VAR 0 7
3374: PUSH
3375: LD_VAR 0 10
3379: PUSH
3380: EMPTY
3381: LIST
3382: ADD
3383: ST_TO_ADDR
// end ;
3384: GO 2935
3386: POP
3387: POP
// if not global_defined then
3388: LD_LOC 3
3392: NOT
3393: IFFALSE 3471
// if ( global_units >= cl ) then
3395: LD_LOC 2
3399: PUSH
3400: LD_VAR 0 2
3404: GREATEREQUAL
3405: IFFALSE 3446
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3407: LD_ADDR_LOC 2
3411: PUSH
3412: LD_LOC 2
3416: PPUSH
3417: LD_VAR 0 2
3421: PPUSH
3422: LD_LOC 2
3426: PUSH
3427: LD_VAR 0 2
3431: ARRAY
3432: PUSH
3433: LD_VAR 0 7
3437: ADD
3438: PPUSH
3439: CALL_OW 1
3443: ST_TO_ADDR
3444: GO 3471
// global_units := Replace ( global_units , cl , result ) ;
3446: LD_ADDR_LOC 2
3450: PUSH
3451: LD_LOC 2
3455: PPUSH
3456: LD_VAR 0 2
3460: PPUSH
3461: LD_VAR 0 7
3465: PPUSH
3466: CALL_OW 1
3470: ST_TO_ADDR
// end ;
3471: LD_VAR 0 7
3475: RET
// function prepare_mastodonts ( n ) ; var i ; begin
3476: LD_INT 0
3478: PPUSH
3479: PPUSH
// uc_side := 0 ;
3480: LD_ADDR_OWVAR 20
3484: PUSH
3485: LD_INT 0
3487: ST_TO_ADDR
// uc_nation := 0 ;
3488: LD_ADDR_OWVAR 21
3492: PUSH
3493: LD_INT 0
3495: ST_TO_ADDR
// vc_chassis := 31 ;
3496: LD_ADDR_OWVAR 37
3500: PUSH
3501: LD_INT 31
3503: ST_TO_ADDR
// vc_control := control_rider ;
3504: LD_ADDR_OWVAR 38
3508: PUSH
3509: LD_INT 4
3511: ST_TO_ADDR
// for i = 1 to n do
3512: LD_ADDR_VAR 0 3
3516: PUSH
3517: DOUBLE
3518: LD_INT 1
3520: DEC
3521: ST_TO_ADDR
3522: LD_VAR 0 1
3526: PUSH
3527: FOR_TO
3528: IFFALSE 3547
// PlaceUnitArea ( CreateVehicle , MastodontSpawn , false ) ;
3530: CALL_OW 45
3534: PPUSH
3535: LD_INT 15
3537: PPUSH
3538: LD_INT 0
3540: PPUSH
3541: CALL_OW 49
3545: GO 3527
3547: POP
3548: POP
// end ;
3549: LD_VAR 0 2
3553: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3554: LD_INT 0
3556: PPUSH
3557: PPUSH
3558: PPUSH
3559: PPUSH
3560: PPUSH
3561: PPUSH
3562: PPUSH
3563: PPUSH
3564: PPUSH
// if side in [ 0 , 9 ] then
3565: LD_VAR 0 1
3569: PUSH
3570: LD_INT 0
3572: PUSH
3573: LD_INT 9
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: IN
3580: IFFALSE 3584
// exit ;
3582: GO 4601
// pos := Side_Positions [ side ] ;
3584: LD_ADDR_VAR 0 3
3588: PUSH
3589: LD_EXP 36
3593: PUSH
3594: LD_VAR 0 1
3598: ARRAY
3599: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3600: LD_ADDR_OWVAR 21
3604: PUSH
3605: LD_EXP 37
3609: PUSH
3610: LD_VAR 0 1
3614: ARRAY
3615: ST_TO_ADDR
// uc_side := side ;
3616: LD_ADDR_OWVAR 20
3620: PUSH
3621: LD_VAR 0 1
3625: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3626: LD_ADDR_VAR 0 4
3630: PUSH
3631: LD_EXP 39
3635: PUSH
3636: LD_VAR 0 3
3640: ARRAY
3641: PUSH
3642: LD_INT 1
3644: ARRAY
3645: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3646: LD_ADDR_VAR 0 5
3650: PUSH
3651: LD_EXP 39
3655: PUSH
3656: LD_VAR 0 3
3660: ARRAY
3661: PUSH
3662: LD_INT 2
3664: ARRAY
3665: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3666: LD_ADDR_VAR 0 6
3670: PUSH
3671: LD_EXP 39
3675: PUSH
3676: LD_VAR 0 3
3680: ARRAY
3681: PUSH
3682: LD_INT 3
3684: ARRAY
3685: ST_TO_ADDR
// if is_depot then
3686: LD_EXP 21
3690: IFFALSE 3823
// begin bc_type = b_depot ;
3692: LD_ADDR_OWVAR 42
3696: PUSH
3697: LD_INT 0
3699: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3700: LD_ADDR_VAR 0 10
3704: PUSH
3705: LD_VAR 0 4
3709: PPUSH
3710: LD_VAR 0 5
3714: PPUSH
3715: LD_VAR 0 6
3719: PPUSH
3720: CALL_OW 47
3724: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3725: LD_VAR 0 10
3729: PPUSH
3730: LD_STRING @
3732: PUSH
3733: LD_VAR 0 1
3737: STR
3738: PPUSH
3739: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3743: LD_VAR 0 10
3747: PPUSH
3748: CALL_OW 274
3752: PPUSH
3753: LD_INT 1
3755: PPUSH
3756: LD_EXP 26
3760: PUSH
3761: LD_INT 1
3763: ARRAY
3764: PPUSH
3765: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3769: LD_VAR 0 10
3773: PPUSH
3774: CALL_OW 274
3778: PPUSH
3779: LD_INT 2
3781: PPUSH
3782: LD_EXP 26
3786: PUSH
3787: LD_INT 2
3789: ARRAY
3790: PPUSH
3791: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3795: LD_VAR 0 10
3799: PPUSH
3800: CALL_OW 274
3804: PPUSH
3805: LD_INT 3
3807: PPUSH
3808: LD_EXP 26
3812: PUSH
3813: LD_INT 3
3815: ARRAY
3816: PPUSH
3817: CALL_OW 277
// end else
3821: GO 3967
// begin for i := 1 to 3 do
3823: LD_ADDR_VAR 0 7
3827: PUSH
3828: DOUBLE
3829: LD_INT 1
3831: DEC
3832: ST_TO_ADDR
3833: LD_INT 3
3835: PUSH
3836: FOR_TO
3837: IFFALSE 3965
// begin r := starting_resources [ i ] ;
3839: LD_ADDR_VAR 0 8
3843: PUSH
3844: LD_EXP 26
3848: PUSH
3849: LD_VAR 0 7
3853: ARRAY
3854: ST_TO_ADDR
// while r >= 10 do
3855: LD_VAR 0 8
3859: PUSH
3860: LD_INT 10
3862: GREATEREQUAL
3863: IFFALSE 3963
// if r > 50 then
3865: LD_VAR 0 8
3869: PUSH
3870: LD_INT 50
3872: GREATER
3873: IFFALSE 3919
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3875: LD_VAR 0 7
3879: PPUSH
3880: LD_INT 5
3882: PPUSH
3883: LD_VAR 0 4
3887: PPUSH
3888: LD_VAR 0 5
3892: PPUSH
3893: LD_INT 4
3895: PPUSH
3896: LD_INT 0
3898: PPUSH
3899: CALL_OW 60
// r := r - 50 ;
3903: LD_ADDR_VAR 0 8
3907: PUSH
3908: LD_VAR 0 8
3912: PUSH
3913: LD_INT 50
3915: MINUS
3916: ST_TO_ADDR
// end else
3917: GO 3961
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3919: LD_VAR 0 7
3923: PPUSH
3924: LD_VAR 0 8
3928: PUSH
3929: LD_INT 10
3931: DIV
3932: PPUSH
3933: LD_VAR 0 4
3937: PPUSH
3938: LD_VAR 0 5
3942: PPUSH
3943: LD_INT 4
3945: PPUSH
3946: LD_INT 0
3948: PPUSH
3949: CALL_OW 60
// r := 0 ;
3953: LD_ADDR_VAR 0 8
3957: PUSH
3958: LD_INT 0
3960: ST_TO_ADDR
// end ;
3961: GO 3855
// end ;
3963: GO 3836
3965: POP
3966: POP
// end ; for r in starting_crates do
3967: LD_ADDR_VAR 0 8
3971: PUSH
3972: LD_EXP 25
3976: PUSH
3977: FOR_IN
3978: IFFALSE 4010
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3980: LD_INT 1
3982: PPUSH
3983: LD_INT 5
3985: PPUSH
3986: LD_VAR 0 4
3990: PPUSH
3991: LD_VAR 0 5
3995: PPUSH
3996: LD_VAR 0 8
4000: PPUSH
4001: LD_INT 0
4003: PPUSH
4004: CALL_OW 60
4008: GO 3977
4010: POP
4011: POP
// if def_morale_flags then
4012: LD_EXP 9
4016: IFFALSE 4155
// begin x := start_def [ pos ] [ 1 ] ;
4018: LD_ADDR_VAR 0 4
4022: PUSH
4023: LD_EXP 41
4027: PUSH
4028: LD_VAR 0 3
4032: ARRAY
4033: PUSH
4034: LD_INT 1
4036: ARRAY
4037: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4038: LD_ADDR_VAR 0 5
4042: PUSH
4043: LD_EXP 41
4047: PUSH
4048: LD_VAR 0 3
4052: ARRAY
4053: PUSH
4054: LD_INT 2
4056: ARRAY
4057: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4058: LD_VAR 0 4
4062: PPUSH
4063: LD_VAR 0 5
4067: PPUSH
4068: LD_INT 12
4070: PPUSH
4071: LD_INT 2
4073: PPUSH
4074: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4078: LD_ADDR_EXP 46
4082: PUSH
4083: LD_EXP 46
4087: PUSH
4088: LD_VAR 0 1
4092: PPUSH
4093: LD_VAR 0 4
4097: PPUSH
4098: LD_VAR 0 5
4102: PPUSH
4103: LD_INT 1
4105: PUSH
4106: LD_INT 100
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: PUSH
4113: LD_INT 2
4115: PUSH
4116: LD_INT 50
4118: PUSH
4119: EMPTY
4120: LIST
4121: LIST
4122: PUSH
4123: LD_INT 3
4125: PUSH
4126: LD_INT 20
4128: PUSH
4129: EMPTY
4130: LIST
4131: LIST
4132: PUSH
4133: LD_INT 20
4135: PUSH
4136: LD_INT 100
4138: PUSH
4139: EMPTY
4140: LIST
4141: LIST
4142: PUSH
4143: EMPTY
4144: LIST
4145: LIST
4146: LIST
4147: LIST
4148: PPUSH
4149: CALL_OW 418
4153: ADD
4154: ST_TO_ADDR
// end ; commander := true ;
4155: LD_ADDR_LOC 1
4159: PUSH
4160: LD_INT 1
4162: ST_TO_ADDR
// soldiers_created := 0 ;
4163: LD_ADDR_LOC 4
4167: PUSH
4168: LD_INT 0
4170: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4171: LD_ADDR_VAR 0 7
4175: PUSH
4176: DOUBLE
4177: LD_INT 1
4179: DEC
4180: ST_TO_ADDR
4181: LD_EXP 22
4185: PUSH
4186: FOR_TO
4187: IFFALSE 4340
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4189: LD_ADDR_VAR 0 4
4193: PUSH
4194: LD_EXP 40
4198: PUSH
4199: LD_VAR 0 3
4203: ARRAY
4204: PUSH
4205: LD_VAR 0 7
4209: ARRAY
4210: PUSH
4211: LD_INT 1
4213: ARRAY
4214: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4215: LD_ADDR_VAR 0 5
4219: PUSH
4220: LD_EXP 40
4224: PUSH
4225: LD_VAR 0 3
4229: ARRAY
4230: PUSH
4231: LD_VAR 0 7
4235: ARRAY
4236: PUSH
4237: LD_INT 2
4239: ARRAY
4240: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4241: LD_ADDR_VAR 0 6
4245: PUSH
4246: LD_EXP 40
4250: PUSH
4251: LD_VAR 0 3
4255: ARRAY
4256: PUSH
4257: LD_VAR 0 7
4261: ARRAY
4262: PUSH
4263: LD_INT 3
4265: ARRAY
4266: ST_TO_ADDR
// bc_type := b_breastwork ;
4267: LD_ADDR_OWVAR 42
4271: PUSH
4272: LD_INT 31
4274: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4275: LD_ADDR_VAR 0 9
4279: PUSH
4280: LD_VAR 0 4
4284: PPUSH
4285: LD_VAR 0 5
4289: PPUSH
4290: LD_VAR 0 6
4294: PPUSH
4295: CALL_OW 47
4299: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4300: LD_INT 1
4302: PPUSH
4303: LD_INT 1
4305: PPUSH
4306: LD_INT 0
4308: PPUSH
4309: LD_INT 0
4311: PPUSH
4312: LD_INT 0
4314: PPUSH
4315: LD_VAR 0 9
4319: PPUSH
4320: CALL 2907 0 6
// soldiers_created := soldiers_created + 1 ;
4324: LD_ADDR_LOC 4
4328: PUSH
4329: LD_LOC 4
4333: PUSH
4334: LD_INT 1
4336: PLUS
4337: ST_TO_ADDR
// end ;
4338: GO 4186
4340: POP
4341: POP
// x := start_def [ pos ] [ 1 ] ;
4342: LD_ADDR_VAR 0 4
4346: PUSH
4347: LD_EXP 41
4351: PUSH
4352: LD_VAR 0 3
4356: ARRAY
4357: PUSH
4358: LD_INT 1
4360: ARRAY
4361: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4362: LD_ADDR_VAR 0 5
4366: PUSH
4367: LD_EXP 41
4371: PUSH
4372: LD_VAR 0 3
4376: ARRAY
4377: PUSH
4378: LD_INT 2
4380: ARRAY
4381: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4382: LD_LOC 8
4386: PUSH
4387: LD_EXP 22
4391: MINUS
4392: PPUSH
4393: LD_INT 1
4395: PPUSH
4396: LD_VAR 0 4
4400: PPUSH
4401: LD_VAR 0 5
4405: PPUSH
4406: LD_INT 5
4408: PPUSH
4409: LD_INT 0
4411: PPUSH
4412: CALL 2907 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4416: LD_LOC 5
4420: PPUSH
4421: LD_INT 2
4423: PPUSH
4424: LD_VAR 0 4
4428: PPUSH
4429: LD_VAR 0 5
4433: PPUSH
4434: LD_INT 5
4436: PPUSH
4437: LD_INT 0
4439: PPUSH
4440: CALL 2907 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4444: LD_LOC 7
4448: PPUSH
4449: LD_INT 3
4451: PPUSH
4452: LD_VAR 0 4
4456: PPUSH
4457: LD_VAR 0 5
4461: PPUSH
4462: LD_INT 5
4464: PPUSH
4465: LD_INT 0
4467: PPUSH
4468: CALL 2907 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4472: LD_LOC 6
4476: PPUSH
4477: LD_INT 4
4479: PPUSH
4480: LD_VAR 0 4
4484: PPUSH
4485: LD_VAR 0 5
4489: PPUSH
4490: LD_INT 5
4492: PPUSH
4493: LD_INT 0
4495: PPUSH
4496: CALL 2907 0 6
// if def_siberite_detection then
4500: LD_EXP 10
4504: IFFALSE 4521
// SetTech ( tech_SibDet , side , state_researched ) ;
4506: LD_INT 20
4508: PPUSH
4509: LD_VAR 0 1
4513: PPUSH
4514: LD_INT 2
4516: PPUSH
4517: CALL_OW 322
// if def_siberite_bomb = 1 then
4521: LD_EXP 15
4525: PUSH
4526: LD_INT 1
4528: EQUAL
4529: IFFALSE 4563
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4531: LD_INT 25
4533: PPUSH
4534: LD_VAR 0 1
4538: PPUSH
4539: LD_INT 1
4541: PPUSH
4542: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4546: LD_INT 73
4548: PPUSH
4549: LD_VAR 0 1
4553: PPUSH
4554: LD_INT 1
4556: PPUSH
4557: CALL_OW 322
// end else
4561: GO 4593
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4563: LD_INT 25
4565: PPUSH
4566: LD_VAR 0 1
4570: PPUSH
4571: LD_INT 0
4573: PPUSH
4574: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4578: LD_INT 73
4580: PPUSH
4581: LD_VAR 0 1
4585: PPUSH
4586: LD_INT 0
4588: PPUSH
4589: CALL_OW 322
// end ; global_defined := true ;
4593: LD_ADDR_LOC 3
4597: PUSH
4598: LD_INT 1
4600: ST_TO_ADDR
// end ;
4601: LD_VAR 0 2
4605: RET
// every 0 0$1 do
4606: GO 4608
4608: DISABLE
// if ( def_siberite_bomb > 1 ) then
4609: LD_EXP 15
4613: PUSH
4614: LD_INT 1
4616: GREATER
4617: IFFALSE 4632
// begin wait ( siberite_bomb_Delay ) ;
4619: LD_EXP 33
4623: PPUSH
4624: CALL_OW 67
// EnableSibFiss ;
4628: CALL 4633 0 0
// end ;
4632: END
// function EnableSibFiss ; var i ; begin
4633: LD_INT 0
4635: PPUSH
4636: PPUSH
// for i := 1 to 8 do
4637: LD_ADDR_VAR 0 2
4641: PUSH
4642: DOUBLE
4643: LD_INT 1
4645: DEC
4646: ST_TO_ADDR
4647: LD_INT 8
4649: PUSH
4650: FOR_TO
4651: IFFALSE 4697
// if Side_Positions [ i ] then
4653: LD_EXP 36
4657: PUSH
4658: LD_VAR 0 2
4662: ARRAY
4663: IFFALSE 4695
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4665: LD_INT 25
4667: PPUSH
4668: LD_VAR 0 2
4672: PPUSH
4673: LD_INT 1
4675: PPUSH
4676: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4680: LD_INT 73
4682: PPUSH
4683: LD_VAR 0 2
4687: PPUSH
4688: LD_INT 1
4690: PPUSH
4691: CALL_OW 322
// end ;
4695: GO 4650
4697: POP
4698: POP
// end ;
4699: LD_VAR 0 1
4703: RET
// function prepare_sides ; var i ; begin
4704: LD_INT 0
4706: PPUSH
4707: PPUSH
// global_units := [ ] ;
4708: LD_ADDR_LOC 2
4712: PUSH
4713: EMPTY
4714: ST_TO_ADDR
// global_defined := false ;
4715: LD_ADDR_LOC 3
4719: PUSH
4720: LD_INT 0
4722: ST_TO_ADDR
// CountClassMembers ;
4723: CALL 4802 0 0
// for i := 1 to 8 do
4727: LD_ADDR_VAR 0 2
4731: PUSH
4732: DOUBLE
4733: LD_INT 1
4735: DEC
4736: ST_TO_ADDR
4737: LD_INT 8
4739: PUSH
4740: FOR_TO
4741: IFFALSE 4795
// if Side_Positions [ i ] then
4743: LD_EXP 36
4747: PUSH
4748: LD_VAR 0 2
4752: ARRAY
4753: IFFALSE 4793
// begin prepare_side ( i ) ;
4755: LD_VAR 0 2
4759: PPUSH
4760: CALL 3554 0 1
// if ( Game_Type = 12 ) and mastodont > 0 then
4764: LD_EXP 20
4768: PUSH
4769: LD_INT 12
4771: EQUAL
4772: PUSH
4773: LD_EXP 48
4777: PUSH
4778: LD_INT 0
4780: GREATER
4781: AND
4782: IFFALSE 4793
// prepare_mastodonts ( mastodont ) ;
4784: LD_EXP 48
4788: PPUSH
4789: CALL 3476 0 1
// end ;
4793: GO 4740
4795: POP
4796: POP
// end ;
4797: LD_VAR 0 1
4801: RET
// function CountClassMembers ; var Mode ; begin
4802: LD_INT 0
4804: PPUSH
4805: PPUSH
// if No_Mechs then
4806: LD_EXP 19
4810: IFFALSE 4822
// Mode := 2 else
4812: LD_ADDR_VAR 0 2
4816: PUSH
4817: LD_INT 2
4819: ST_TO_ADDR
4820: GO 4830
// Mode := 1 ;
4822: LD_ADDR_VAR 0 2
4826: PUSH
4827: LD_INT 1
4829: ST_TO_ADDR
// neng := number_of_people ;
4830: LD_ADDR_LOC 5
4834: PUSH
4835: LD_EXP 23
4839: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4840: LD_ADDR_LOC 8
4844: PUSH
4845: LD_LOC 5
4849: PUSH
4850: LD_INT 4
4852: PUSH
4853: LD_INT 3
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: PUSH
4860: LD_VAR 0 2
4864: ARRAY
4865: DIV
4866: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4867: LD_LOC 8
4871: PUSH
4872: LD_EXP 22
4876: LESS
4877: IFFALSE 4889
// nsol := number_of_breastworks ;
4879: LD_ADDR_LOC 8
4883: PUSH
4884: LD_EXP 22
4888: ST_TO_ADDR
// neng := neng - nsol ;
4889: LD_ADDR_LOC 5
4893: PUSH
4894: LD_LOC 5
4898: PUSH
4899: LD_LOC 8
4903: MINUS
4904: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4905: LD_ADDR_LOC 6
4909: PUSH
4910: LD_LOC 5
4914: PUSH
4915: LD_INT 3
4917: PUSH
4918: LD_INT 2
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: PUSH
4925: LD_VAR 0 2
4929: ARRAY
4930: DIV
4931: ST_TO_ADDR
// if ( nsci < 1 ) then
4932: LD_LOC 6
4936: PUSH
4937: LD_INT 1
4939: LESS
4940: IFFALSE 4950
// nsci := 1 ;
4942: LD_ADDR_LOC 6
4946: PUSH
4947: LD_INT 1
4949: ST_TO_ADDR
// neng := neng - nsci ;
4950: LD_ADDR_LOC 5
4954: PUSH
4955: LD_LOC 5
4959: PUSH
4960: LD_LOC 6
4964: MINUS
4965: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4966: LD_ADDR_LOC 7
4970: PUSH
4971: LD_LOC 5
4975: PUSH
4976: LD_INT 2
4978: DIV
4979: PUSH
4980: LD_INT 0
4982: PUSH
4983: EMPTY
4984: LIST
4985: LIST
4986: PUSH
4987: LD_VAR 0 2
4991: ARRAY
4992: ST_TO_ADDR
// neng := neng - nmech ;
4993: LD_ADDR_LOC 5
4997: PUSH
4998: LD_LOC 5
5002: PUSH
5003: LD_LOC 7
5007: MINUS
5008: ST_TO_ADDR
// if ( neng < 1 ) then
5009: LD_LOC 5
5013: PUSH
5014: LD_INT 1
5016: LESS
5017: IFFALSE 5027
// neng := 1 ;
5019: LD_ADDR_LOC 5
5023: PUSH
5024: LD_INT 1
5026: ST_TO_ADDR
// end ;
5027: LD_VAR 0 1
5031: RET
// function Init_Win_Condition ; begin
5032: LD_INT 0
5034: PPUSH
// if Team_Game then
5035: LD_EXP 38
5039: IFFALSE 5046
// enable ( 98 ) else
5041: LD_INT 98
5043: ENABLE_MARKED
5044: GO 5049
// enable ( 99 ) ;
5046: LD_INT 99
5048: ENABLE_MARKED
// case Game_Type of 3 :
5049: LD_EXP 20
5053: PUSH
5054: LD_INT 3
5056: DOUBLE
5057: EQUAL
5058: IFTRUE 5062
5060: GO 5068
5062: POP
// enable ( 100 ) ; end ;
5063: LD_INT 100
5065: ENABLE_MARKED
5066: GO 5069
5068: POP
// end ;
5069: LD_VAR 0 1
5073: RET
// starting begin disable ( 98 ) ;
5074: LD_INT 98
5076: DISABLE_MARKED
// disable ( 99 ) ;
5077: LD_INT 99
5079: DISABLE_MARKED
// disable ( 100 ) ;
5080: LD_INT 100
5082: DISABLE_MARKED
// disable ( 200 ) ;
5083: LD_INT 200
5085: DISABLE_MARKED
// disable ( 400 ) ;
5086: LD_INT 400
5088: DISABLE_MARKED
// disable ( 401 ) ;
5089: LD_INT 401
5091: DISABLE_MARKED
// mp_selectmsg := true ;
5092: LD_ADDR_OWVAR 13
5096: PUSH
5097: LD_INT 1
5099: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5100: CALL 0 0 0
// init_map ;
5104: CALL 1454 0 0
// init_respawning ;
5108: CALL 6787 0 0
// set_shared_visions_and_alliances ;
5112: CALL 2619 0 0
// prepare_sides ;
5116: CALL 4704 0 0
// ShowTimer ;
5120: CALL 9999 0 0
// if ( Game_Type = 4 ) then
5124: LD_EXP 20
5128: PUSH
5129: LD_INT 4
5131: EQUAL
5132: IFFALSE 5138
// InitBloodGods ;
5134: CALL 9764 0 0
// music_nat := Side_Nations [ your_side ] ;
5138: LD_ADDR_OWVAR 71
5142: PUSH
5143: LD_EXP 37
5147: PUSH
5148: LD_OWVAR 2
5152: ARRAY
5153: ST_TO_ADDR
// if IAmSpec then
5154: CALL_OW 531
5158: IFFALSE 5194
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
5160: LD_INT 0
5162: PPUSH
5163: LD_INT 0
5165: PPUSH
5166: LD_OWVAR 2
5170: PPUSH
5171: LD_INT 32767
5173: NEG
5174: PPUSH
5175: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
5179: LD_INT 104
5181: PPUSH
5182: LD_INT 69
5184: PPUSH
5185: CALL_OW 86
// enable ( 400 ) ;
5189: LD_INT 400
5191: ENABLE_MARKED
// end else
5192: GO 5248
// begin ResetFog ;
5194: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5198: LD_EXP 41
5202: PUSH
5203: LD_EXP 36
5207: PUSH
5208: LD_OWVAR 2
5212: ARRAY
5213: ARRAY
5214: PUSH
5215: LD_INT 1
5217: ARRAY
5218: PPUSH
5219: LD_EXP 41
5223: PUSH
5224: LD_EXP 36
5228: PUSH
5229: LD_OWVAR 2
5233: ARRAY
5234: ARRAY
5235: PUSH
5236: LD_INT 2
5238: ARRAY
5239: PPUSH
5240: CALL_OW 86
// Init_Win_Condition ;
5244: CALL 5032 0 0
// end ; AnimateTrees ( true ) ;
5248: LD_INT 1
5250: PPUSH
5251: CALL_OW 573
// InitApeman ;
5255: CALL 5954 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
5259: LD_ADDR_EXP 57
5263: PUSH
5264: LD_INT 9
5266: PUSH
5267: LD_INT 10
5269: PUSH
5270: LD_INT 11
5272: PUSH
5273: LD_INT 12
5275: PUSH
5276: LD_INT 13
5278: PUSH
5279: LD_INT 14
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: LIST
5286: LIST
5287: LIST
5288: LIST
5289: ST_TO_ADDR
// BeginBuildUp ;
5290: CALL 10160 0 0
// end ; end_of_file
5294: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5295: GO 5297
5297: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5298: LD_INT 4
5300: PPUSH
5301: LD_INT 5
5303: PPUSH
5304: CALL_OW 12
5308: PPUSH
5309: LD_INT 1
5311: PPUSH
5312: CALL_OW 57
// enable ;
5316: ENABLE
// end ;
5317: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5318: GO 5320
5320: DISABLE
5321: LD_INT 0
5323: PPUSH
5324: PPUSH
// begin case tick of 1 .. 1 1$0 :
5325: LD_OWVAR 1
5329: PUSH
5330: LD_INT 1
5332: DOUBLE
5333: GREATEREQUAL
5334: IFFALSE 5342
5336: LD_INT 2100
5338: DOUBLE
5339: LESSEQUAL
5340: IFTRUE 5344
5342: GO 5372
5344: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5345: LD_EXP 27
5349: PUSH
5350: LD_INT 100
5352: DIVREAL
5353: PUSH
5354: LD_INT 350
5356: PPUSH
5357: LD_INT 1050
5359: PPUSH
5360: CALL_OW 12
5364: MUL
5365: PPUSH
5366: CALL_OW 67
5370: GO 5674
5372: LD_INT 2100
5374: PUSH
5375: LD_INT 1
5377: PLUS
5378: DOUBLE
5379: GREATEREQUAL
5380: IFFALSE 5388
5382: LD_INT 10500
5384: DOUBLE
5385: LESSEQUAL
5386: IFTRUE 5390
5388: GO 5418
5390: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5391: LD_EXP 27
5395: PUSH
5396: LD_INT 100
5398: DIVREAL
5399: PUSH
5400: LD_INT 1050
5402: PPUSH
5403: LD_INT 1575
5405: PPUSH
5406: CALL_OW 12
5410: MUL
5411: PPUSH
5412: CALL_OW 67
5416: GO 5674
5418: LD_INT 10500
5420: PUSH
5421: LD_INT 1
5423: PLUS
5424: DOUBLE
5425: GREATEREQUAL
5426: IFFALSE 5434
5428: LD_INT 21000
5430: DOUBLE
5431: LESSEQUAL
5432: IFTRUE 5436
5434: GO 5464
5436: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5437: LD_EXP 27
5441: PUSH
5442: LD_INT 100
5444: DIVREAL
5445: PUSH
5446: LD_INT 1575
5448: PPUSH
5449: LD_INT 2100
5451: PPUSH
5452: CALL_OW 12
5456: MUL
5457: PPUSH
5458: CALL_OW 67
5462: GO 5674
5464: LD_INT 21000
5466: PUSH
5467: LD_INT 1
5469: PLUS
5470: DOUBLE
5471: GREATEREQUAL
5472: IFFALSE 5480
5474: LD_INT 42000
5476: DOUBLE
5477: LESSEQUAL
5478: IFTRUE 5482
5480: GO 5510
5482: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5483: LD_EXP 27
5487: PUSH
5488: LD_INT 100
5490: DIVREAL
5491: PUSH
5492: LD_INT 2100
5494: PPUSH
5495: LD_INT 2625
5497: PPUSH
5498: CALL_OW 12
5502: MUL
5503: PPUSH
5504: CALL_OW 67
5508: GO 5674
5510: LD_INT 42000
5512: PUSH
5513: LD_INT 1
5515: PLUS
5516: DOUBLE
5517: GREATEREQUAL
5518: IFFALSE 5526
5520: LD_INT 63000
5522: DOUBLE
5523: LESSEQUAL
5524: IFTRUE 5528
5526: GO 5556
5528: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5529: LD_EXP 27
5533: PUSH
5534: LD_INT 100
5536: DIVREAL
5537: PUSH
5538: LD_INT 2625
5540: PPUSH
5541: LD_INT 3150
5543: PPUSH
5544: CALL_OW 12
5548: MUL
5549: PPUSH
5550: CALL_OW 67
5554: GO 5674
5556: LD_INT 63000
5558: PUSH
5559: LD_INT 1
5561: PLUS
5562: DOUBLE
5563: GREATEREQUAL
5564: IFFALSE 5572
5566: LD_INT 105000
5568: DOUBLE
5569: LESSEQUAL
5570: IFTRUE 5574
5572: GO 5602
5574: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5575: LD_EXP 27
5579: PUSH
5580: LD_INT 100
5582: DIVREAL
5583: PUSH
5584: LD_INT 3150
5586: PPUSH
5587: LD_INT 3675
5589: PPUSH
5590: CALL_OW 12
5594: MUL
5595: PPUSH
5596: CALL_OW 67
5600: GO 5674
5602: LD_INT 105000
5604: PUSH
5605: LD_INT 1
5607: PLUS
5608: DOUBLE
5609: GREATEREQUAL
5610: IFFALSE 5618
5612: LD_INT 630000
5614: DOUBLE
5615: LESSEQUAL
5616: IFTRUE 5620
5618: GO 5648
5620: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
5621: LD_EXP 27
5625: PUSH
5626: LD_INT 100
5628: DIVREAL
5629: PUSH
5630: LD_INT 3675
5632: PPUSH
5633: LD_INT 4200
5635: PPUSH
5636: CALL_OW 12
5640: MUL
5641: PPUSH
5642: CALL_OW 67
5646: GO 5674
5648: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5649: LD_EXP 27
5653: PUSH
5654: LD_INT 100
5656: DIVREAL
5657: PUSH
5658: LD_INT 4200
5660: PPUSH
5661: LD_INT 5250
5663: PPUSH
5664: CALL_OW 12
5668: MUL
5669: PPUSH
5670: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5674: LD_ADDR_VAR 0 2
5678: PUSH
5679: LD_INT 3
5681: PPUSH
5682: LD_INT 5
5684: PPUSH
5685: CALL_OW 12
5689: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5690: LD_ADDR_VAR 0 1
5694: PUSH
5695: LD_EXP 36
5699: PUSH
5700: LD_INT 0
5702: PUSH
5703: EMPTY
5704: LIST
5705: DIFF
5706: PUSH
5707: FOR_IN
5708: IFFALSE 5757
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5710: LD_VAR 0 2
5714: PPUSH
5715: LD_EXP 41
5719: PUSH
5720: LD_VAR 0 1
5724: ARRAY
5725: PUSH
5726: LD_INT 1
5728: ARRAY
5729: PPUSH
5730: LD_EXP 41
5734: PUSH
5735: LD_VAR 0 1
5739: ARRAY
5740: PUSH
5741: LD_INT 2
5743: ARRAY
5744: PPUSH
5745: LD_INT 20
5747: PPUSH
5748: LD_INT 1
5750: PPUSH
5751: CALL_OW 56
5755: GO 5707
5757: POP
5758: POP
// enable ;
5759: ENABLE
// end ; end_of_file
5760: PPOPN 2
5762: END
// every 20 20$00 trigger apemanNumber do
5763: LD_EXP 49
5767: IFFALSE 5800
5769: GO 5771
5771: DISABLE
// begin enable ;
5772: ENABLE
// if apeLevel >= 8 then
5773: LD_EXP 54
5777: PUSH
5778: LD_INT 8
5780: GREATEREQUAL
5781: IFFALSE 5786
// disable else
5783: DISABLE
5784: GO 5800
// apeLevel := apeLevel + 1 ;
5786: LD_ADDR_EXP 54
5790: PUSH
5791: LD_EXP 54
5795: PUSH
5796: LD_INT 1
5798: PLUS
5799: ST_TO_ADDR
// end ;
5800: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5801: LD_EXP 49
5805: PUSH
5806: LD_EXP 50
5810: LESS
5811: IFFALSE 5951
5813: GO 5815
5815: DISABLE
5816: LD_INT 0
5818: PPUSH
5819: PPUSH
5820: PPUSH
5821: PPUSH
// begin enable ;
5822: ENABLE
// for i := 1 to apemanPos do
5823: LD_ADDR_VAR 0 1
5827: PUSH
5828: DOUBLE
5829: LD_INT 1
5831: DEC
5832: ST_TO_ADDR
5833: LD_EXP 52
5837: PUSH
5838: FOR_TO
5839: IFFALSE 5949
// begin if apemanPlayerCount [ i ] then
5841: LD_EXP 53
5845: PUSH
5846: LD_VAR 0 1
5850: ARRAY
5851: IFFALSE 5947
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5853: LD_EXP 53
5857: PUSH
5858: LD_VAR 0 1
5862: ARRAY
5863: PUSH
5864: LD_EXP 52
5868: PUSH
5869: LD_VAR 0 1
5873: ARRAY
5874: GREATER
5875: IFFALSE 5947
// begin ape := PrepareApeman ;
5877: LD_ADDR_VAR 0 2
5881: PUSH
5882: CALL 6462 0 0
5886: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5887: LD_VAR 0 2
5891: PPUSH
5892: LD_EXP 55
5896: PUSH
5897: LD_VAR 0 1
5901: ARRAY
5902: PPUSH
5903: LD_INT 0
5905: PPUSH
5906: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5910: LD_ADDR_EXP 52
5914: PUSH
5915: LD_EXP 52
5919: PPUSH
5920: LD_VAR 0 1
5924: PPUSH
5925: LD_EXP 52
5929: PUSH
5930: LD_VAR 0 1
5934: ARRAY
5935: PUSH
5936: LD_VAR 0 2
5940: UNION
5941: PPUSH
5942: CALL_OW 1
5946: ST_TO_ADDR
// end ; end ; end ;
5947: GO 5838
5949: POP
5950: POP
// end ;
5951: PPOPN 4
5953: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5954: LD_INT 0
5956: PPUSH
5957: PPUSH
5958: PPUSH
5959: PPUSH
5960: PPUSH
5961: PPUSH
5962: PPUSH
// playersAmount := 0 ;
5963: LD_ADDR_VAR 0 3
5967: PUSH
5968: LD_INT 0
5970: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
5971: LD_ADDR_VAR 0 7
5975: PUSH
5976: LD_INT 1
5978: PUSH
5979: LD_INT 2
5981: PUSH
5982: LD_INT 3
5984: PUSH
5985: LD_INT 4
5987: PUSH
5988: LD_INT 5
5990: PUSH
5991: LD_INT 6
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6002: LD_ADDR_EXP 55
6006: PUSH
6007: LD_INT 0
6009: PUSH
6010: LD_INT 0
6012: PUSH
6013: LD_INT 0
6015: PUSH
6016: LD_INT 0
6018: PUSH
6019: LD_INT 0
6021: PUSH
6022: LD_INT 0
6024: PUSH
6025: LD_INT 0
6027: PUSH
6028: LD_INT 0
6030: PUSH
6031: EMPTY
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: ST_TO_ADDR
// for j = 1 to Side_Positions do
6041: LD_ADDR_VAR 0 4
6045: PUSH
6046: DOUBLE
6047: LD_INT 1
6049: DEC
6050: ST_TO_ADDR
6051: LD_EXP 36
6055: PUSH
6056: FOR_TO
6057: IFFALSE 6124
// if Side_Positions [ j ] then
6059: LD_EXP 36
6063: PUSH
6064: LD_VAR 0 4
6068: ARRAY
6069: IFFALSE 6122
// begin playersAmount := playersAmount + 1 ;
6071: LD_ADDR_VAR 0 3
6075: PUSH
6076: LD_VAR 0 3
6080: PUSH
6081: LD_INT 1
6083: PLUS
6084: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6085: LD_ADDR_EXP 55
6089: PUSH
6090: LD_EXP 55
6094: PPUSH
6095: LD_VAR 0 4
6099: PPUSH
6100: LD_VAR 0 7
6104: PUSH
6105: LD_EXP 36
6109: PUSH
6110: LD_VAR 0 4
6114: ARRAY
6115: ARRAY
6116: PPUSH
6117: CALL_OW 1
6121: ST_TO_ADDR
// end ;
6122: GO 6056
6124: POP
6125: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6126: LD_ADDR_EXP 51
6130: PUSH
6131: LD_INT 3
6133: PUSH
6134: LD_EXP 29
6138: MUL
6139: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6140: LD_ADDR_EXP 49
6144: PUSH
6145: LD_VAR 0 3
6149: PUSH
6150: LD_EXP 51
6154: MUL
6155: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6156: LD_ADDR_EXP 50
6160: PUSH
6161: LD_EXP 49
6165: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6166: LD_ADDR_EXP 52
6170: PUSH
6171: LD_INT 0
6173: PUSH
6174: LD_INT 0
6176: PUSH
6177: LD_INT 0
6179: PUSH
6180: LD_INT 0
6182: PUSH
6183: LD_INT 0
6185: PUSH
6186: LD_INT 0
6188: PUSH
6189: LD_INT 0
6191: PUSH
6192: LD_INT 0
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6205: LD_ADDR_EXP 53
6209: PUSH
6210: LD_INT 0
6212: PUSH
6213: LD_INT 0
6215: PUSH
6216: LD_INT 0
6218: PUSH
6219: LD_INT 0
6221: PUSH
6222: LD_INT 0
6224: PUSH
6225: LD_INT 0
6227: PUSH
6228: LD_INT 0
6230: PUSH
6231: LD_INT 0
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: ST_TO_ADDR
// apeLevel := 1 ;
6244: LD_ADDR_EXP 54
6248: PUSH
6249: LD_INT 1
6251: ST_TO_ADDR
// if not apemanNumber then
6252: LD_EXP 49
6256: NOT
6257: IFFALSE 6261
// exit ;
6259: GO 6457
// for i := 1 to apemanPerPlayer do
6261: LD_ADDR_VAR 0 2
6265: PUSH
6266: DOUBLE
6267: LD_INT 1
6269: DEC
6270: ST_TO_ADDR
6271: LD_EXP 51
6275: PUSH
6276: FOR_TO
6277: IFFALSE 6455
// begin for j := 1 to Side_Positions do
6279: LD_ADDR_VAR 0 4
6283: PUSH
6284: DOUBLE
6285: LD_INT 1
6287: DEC
6288: ST_TO_ADDR
6289: LD_EXP 36
6293: PUSH
6294: FOR_TO
6295: IFFALSE 6451
// if Side_Positions [ j ] then
6297: LD_EXP 36
6301: PUSH
6302: LD_VAR 0 4
6306: ARRAY
6307: IFFALSE 6449
// begin pos := Side_Positions [ j ] ;
6309: LD_ADDR_VAR 0 6
6313: PUSH
6314: LD_EXP 36
6318: PUSH
6319: LD_VAR 0 4
6323: ARRAY
6324: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6325: LD_ADDR_EXP 53
6329: PUSH
6330: LD_EXP 53
6334: PPUSH
6335: LD_VAR 0 4
6339: PPUSH
6340: LD_EXP 53
6344: PUSH
6345: LD_VAR 0 4
6349: ARRAY
6350: PUSH
6351: LD_INT 1
6353: PLUS
6354: PPUSH
6355: CALL_OW 1
6359: ST_TO_ADDR
// ape := PrepareApeman ;
6360: LD_ADDR_VAR 0 5
6364: PUSH
6365: CALL 6462 0 0
6369: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6370: LD_ADDR_EXP 52
6374: PUSH
6375: LD_EXP 52
6379: PPUSH
6380: LD_VAR 0 4
6384: PPUSH
6385: LD_EXP 52
6389: PUSH
6390: LD_VAR 0 4
6394: ARRAY
6395: PPUSH
6396: LD_EXP 52
6400: PUSH
6401: LD_VAR 0 4
6405: ARRAY
6406: PUSH
6407: LD_INT 1
6409: PLUS
6410: PPUSH
6411: LD_VAR 0 5
6415: PPUSH
6416: CALL_OW 1
6420: PPUSH
6421: CALL_OW 1
6425: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6426: LD_VAR 0 5
6430: PPUSH
6431: LD_EXP 55
6435: PUSH
6436: LD_VAR 0 4
6440: ARRAY
6441: PPUSH
6442: LD_INT 0
6444: PPUSH
6445: CALL_OW 49
// end ;
6449: GO 6294
6451: POP
6452: POP
// end ;
6453: GO 6276
6455: POP
6456: POP
// end ;
6457: LD_VAR 0 1
6461: RET
// export function PrepareApeman ; var bonus ; begin
6462: LD_INT 0
6464: PPUSH
6465: PPUSH
// uc_side := 0 ;
6466: LD_ADDR_OWVAR 20
6470: PUSH
6471: LD_INT 0
6473: ST_TO_ADDR
// uc_nation := 0 ;
6474: LD_ADDR_OWVAR 21
6478: PUSH
6479: LD_INT 0
6481: ST_TO_ADDR
// InitHc ;
6482: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6486: LD_ADDR_VAR 0 2
6490: PUSH
6491: LD_INT 1
6493: NEG
6494: PUSH
6495: LD_INT 0
6497: PUSH
6498: LD_INT 1
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: LIST
6505: PUSH
6506: LD_OWVAR 1
6510: PUSH
6511: LD_INT 3
6513: MOD
6514: PUSH
6515: LD_INT 1
6517: PLUS
6518: ARRAY
6519: ST_TO_ADDR
// hc_class := class_apeman ;
6520: LD_ADDR_OWVAR 28
6524: PUSH
6525: LD_INT 12
6527: ST_TO_ADDR
// hc_gallery :=  ;
6528: LD_ADDR_OWVAR 33
6532: PUSH
6533: LD_STRING 
6535: ST_TO_ADDR
// hc_name :=  ;
6536: LD_ADDR_OWVAR 26
6540: PUSH
6541: LD_STRING 
6543: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6544: LD_ADDR_OWVAR 31
6548: PUSH
6549: LD_EXP 54
6553: PUSH
6554: LD_VAR 0 2
6558: PLUS
6559: PUSH
6560: LD_EXP 54
6564: PUSH
6565: LD_VAR 0 2
6569: PLUS
6570: PUSH
6571: LD_EXP 54
6575: PUSH
6576: LD_VAR 0 2
6580: PLUS
6581: PUSH
6582: LD_EXP 54
6586: PUSH
6587: LD_VAR 0 2
6591: PLUS
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6599: LD_ADDR_OWVAR 35
6603: PUSH
6604: LD_INT 10
6606: PUSH
6607: LD_VAR 0 2
6611: MUL
6612: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6613: LD_ADDR_OWVAR 29
6617: PUSH
6618: LD_INT 12
6620: PUSH
6621: LD_INT 10
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: ST_TO_ADDR
// result := CreateHuman ;
6628: LD_ADDR_VAR 0 1
6632: PUSH
6633: CALL_OW 44
6637: ST_TO_ADDR
// end ;
6638: LD_VAR 0 1
6642: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6643: LD_INT 0
6645: PPUSH
6646: PPUSH
6647: PPUSH
// if not ape then
6648: LD_VAR 0 1
6652: NOT
6653: IFFALSE 6657
// exit ;
6655: GO 6782
// side := GetSide ( ape ) ;
6657: LD_ADDR_VAR 0 3
6661: PUSH
6662: LD_VAR 0 1
6666: PPUSH
6667: CALL_OW 255
6671: ST_TO_ADDR
// if not side then
6672: LD_VAR 0 3
6676: NOT
6677: IFFALSE 6731
// begin for i = 1 to apemanPos do
6679: LD_ADDR_VAR 0 4
6683: PUSH
6684: DOUBLE
6685: LD_INT 1
6687: DEC
6688: ST_TO_ADDR
6689: LD_EXP 52
6693: PUSH
6694: FOR_TO
6695: IFFALSE 6729
// if ape in apemanPos [ i ] then
6697: LD_VAR 0 1
6701: PUSH
6702: LD_EXP 52
6706: PUSH
6707: LD_VAR 0 4
6711: ARRAY
6712: IN
6713: IFFALSE 6727
// begin side := i ;
6715: LD_ADDR_VAR 0 3
6719: PUSH
6720: LD_VAR 0 4
6724: ST_TO_ADDR
// break ;
6725: GO 6729
// end ;
6727: GO 6694
6729: POP
6730: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6731: LD_ADDR_EXP 52
6735: PUSH
6736: LD_EXP 52
6740: PPUSH
6741: LD_VAR 0 3
6745: PPUSH
6746: LD_EXP 52
6750: PUSH
6751: LD_VAR 0 3
6755: ARRAY
6756: PUSH
6757: LD_VAR 0 1
6761: DIFF
6762: PPUSH
6763: CALL_OW 1
6767: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6768: LD_ADDR_EXP 49
6772: PUSH
6773: LD_EXP 49
6777: PUSH
6778: LD_INT 1
6780: MINUS
6781: ST_TO_ADDR
// end ; end_of_file
6782: LD_VAR 0 2
6786: RET
// var respawn , inqueue ; export function init_respawning ; begin
6787: LD_INT 0
6789: PPUSH
// respawn := Rand ( 1 , 8 ) ;
6790: LD_ADDR_LOC 9
6794: PUSH
6795: LD_INT 1
6797: PPUSH
6798: LD_INT 8
6800: PPUSH
6801: CALL_OW 12
6805: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6806: LD_ADDR_LOC 10
6810: PUSH
6811: LD_INT 0
6813: PUSH
6814: LD_INT 0
6816: PUSH
6817: LD_INT 0
6819: PUSH
6820: LD_INT 0
6822: PUSH
6823: LD_INT 0
6825: PUSH
6826: LD_INT 0
6828: PUSH
6829: LD_INT 0
6831: PUSH
6832: LD_INT 0
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: LIST
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: ST_TO_ADDR
// end ;
6845: LD_VAR 0 1
6849: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
6850: GO 6852
6852: DISABLE
6853: LD_INT 0
6855: PPUSH
6856: PPUSH
6857: PPUSH
// begin if respawning_time_max = 0 then
6858: LD_EXP 32
6862: PUSH
6863: LD_INT 0
6865: EQUAL
6866: IFFALSE 6870
// exit ;
6868: GO 7275
// if respawn = 8 then
6870: LD_LOC 9
6874: PUSH
6875: LD_INT 8
6877: EQUAL
6878: IFFALSE 6890
// respawn := 1 else
6880: LD_ADDR_LOC 9
6884: PUSH
6885: LD_INT 1
6887: ST_TO_ADDR
6888: GO 6904
// respawn := respawn + 1 ;
6890: LD_ADDR_LOC 9
6894: PUSH
6895: LD_LOC 9
6899: PUSH
6900: LD_INT 1
6902: PLUS
6903: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
6904: LD_EXP 36
6908: PUSH
6909: LD_LOC 9
6913: ARRAY
6914: PUSH
6915: LD_LOC 10
6919: PUSH
6920: LD_LOC 9
6924: ARRAY
6925: NOT
6926: AND
6927: IFFALSE 7274
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
6929: LD_ADDR_VAR 0 1
6933: PUSH
6934: LD_INT 21
6936: PUSH
6937: LD_INT 1
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: PUSH
6944: LD_INT 22
6946: PUSH
6947: LD_LOC 9
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: LD_INT 3
6958: PUSH
6959: LD_INT 23
6961: PUSH
6962: LD_INT 0
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PUSH
6969: EMPTY
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: PPUSH
6975: CALL_OW 69
6979: ST_TO_ADDR
// if n < number_of_people then
6980: LD_VAR 0 1
6984: PUSH
6985: LD_EXP 23
6989: LESS
6990: IFFALSE 7271
// begin dep := FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , respawn ] ] ) ;
6992: LD_ADDR_VAR 0 2
6996: PUSH
6997: LD_INT 21
6999: PUSH
7000: LD_INT 3
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PUSH
7007: LD_INT 2
7009: PUSH
7010: LD_INT 30
7012: PUSH
7013: LD_INT 0
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PUSH
7020: LD_INT 30
7022: PUSH
7023: LD_INT 1
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: LIST
7034: PUSH
7035: LD_INT 50
7037: PUSH
7038: EMPTY
7039: LIST
7040: PUSH
7041: LD_INT 22
7043: PUSH
7044: LD_LOC 9
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: PPUSH
7059: CALL_OW 69
7063: ST_TO_ADDR
// if dep then
7064: LD_VAR 0 2
7068: IFFALSE 7268
// begin aktresp := respawn ;
7070: LD_ADDR_VAR 0 3
7074: PUSH
7075: LD_LOC 9
7079: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
7080: LD_ADDR_LOC 10
7084: PUSH
7085: LD_LOC 10
7089: PPUSH
7090: LD_VAR 0 3
7094: PPUSH
7095: LD_INT 1
7097: PPUSH
7098: CALL_OW 1
7102: ST_TO_ADDR
// enable ;
7103: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
7104: LD_EXP 31
7108: PPUSH
7109: LD_EXP 32
7113: PPUSH
7114: CALL_OW 12
7118: PPUSH
7119: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
7123: LD_ADDR_LOC 10
7127: PUSH
7128: LD_LOC 10
7132: PPUSH
7133: LD_VAR 0 3
7137: PPUSH
7138: LD_INT 0
7140: PPUSH
7141: CALL_OW 1
7145: ST_TO_ADDR
// hc_name :=  ;
7146: LD_ADDR_OWVAR 26
7150: PUSH
7151: LD_STRING 
7153: ST_TO_ADDR
// hc_importance := 0 ;
7154: LD_ADDR_OWVAR 32
7158: PUSH
7159: LD_INT 0
7161: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
7162: LD_INT 0
7164: PPUSH
7165: LD_INT 0
7167: PPUSH
7168: LD_EXP 24
7172: PUSH
7173: LD_INT 2
7175: DIV
7176: PPUSH
7177: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
7181: LD_ADDR_OWVAR 21
7185: PUSH
7186: LD_EXP 37
7190: PUSH
7191: LD_VAR 0 3
7195: ARRAY
7196: ST_TO_ADDR
// uc_side := aktresp ;
7197: LD_ADDR_OWVAR 20
7201: PUSH
7202: LD_VAR 0 3
7206: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
7207: LD_ADDR_VAR 0 2
7211: PUSH
7212: LD_VAR 0 2
7216: PUSH
7217: LD_INT 1
7219: PPUSH
7220: LD_VAR 0 2
7224: PPUSH
7225: CALL_OW 12
7229: ARRAY
7230: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
7231: CALL_OW 44
7235: PPUSH
7236: LD_VAR 0 2
7240: PPUSH
7241: CALL_OW 250
7245: PPUSH
7246: LD_VAR 0 2
7250: PPUSH
7251: CALL_OW 251
7255: PPUSH
7256: LD_INT 7
7258: PPUSH
7259: LD_INT 1
7261: PPUSH
7262: CALL_OW 50
// end else
7266: GO 7269
// enable ;
7268: ENABLE
// end else
7269: GO 7272
// enable ;
7271: ENABLE
// end else
7272: GO 7275
// enable ;
7274: ENABLE
// end ; end_of_file
7275: PPOPN 3
7277: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7278: LD_VAR 0 1
7282: PPUSH
7283: CALL_OW 266
7287: PUSH
7288: LD_INT 0
7290: PUSH
7291: LD_INT 1
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: IN
7298: IFFALSE 7323
// SetBName ( b , @ & GetSide ( b ) ) ;
7300: LD_VAR 0 1
7304: PPUSH
7305: LD_STRING @
7307: PUSH
7308: LD_VAR 0 1
7312: PPUSH
7313: CALL_OW 255
7317: STR
7318: PPUSH
7319: CALL_OW 500
// end ;
7323: PPOPN 2
7325: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7326: LD_VAR 0 1
7330: PPUSH
7331: CALL_OW 266
7335: PUSH
7336: LD_INT 0
7338: PUSH
7339: LD_INT 1
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: IN
7346: IFFALSE 7371
// SetBName ( b , @ & GetSide ( b ) ) ;
7348: LD_VAR 0 1
7352: PPUSH
7353: LD_STRING @
7355: PUSH
7356: LD_VAR 0 1
7360: PPUSH
7361: CALL_OW 255
7365: STR
7366: PPUSH
7367: CALL_OW 500
// end ;
7371: PPOPN 3
7373: END
// on VehicleConstructed ( veh , fac ) do var side ;
7374: LD_INT 0
7376: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7377: LD_VAR 0 1
7381: PPUSH
7382: CALL_OW 263
7386: PUSH
7387: LD_INT 5
7389: EQUAL
7390: IFFALSE 7532
// begin side := GetSide ( veh ) ;
7392: LD_ADDR_VAR 0 3
7396: PUSH
7397: LD_VAR 0 1
7401: PPUSH
7402: CALL_OW 255
7406: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7407: LD_ADDR_EXP 52
7411: PUSH
7412: LD_EXP 52
7416: PPUSH
7417: LD_VAR 0 3
7421: PPUSH
7422: LD_EXP 52
7426: PUSH
7427: LD_VAR 0 3
7431: ARRAY
7432: PPUSH
7433: LD_INT 52
7435: PUSH
7436: EMPTY
7437: LIST
7438: PPUSH
7439: CALL_OW 72
7443: PUSH
7444: LD_INT 22
7446: PUSH
7447: LD_VAR 0 3
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PUSH
7456: LD_INT 2
7458: PUSH
7459: LD_INT 33
7461: PUSH
7462: LD_INT 5
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: PUSH
7469: LD_INT 25
7471: PUSH
7472: LD_INT 12
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: PUSH
7479: LD_INT 25
7481: PUSH
7482: LD_INT 15
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: PUSH
7489: LD_INT 25
7491: PUSH
7492: LD_INT 16
7494: PUSH
7495: EMPTY
7496: LIST
7497: LIST
7498: PUSH
7499: LD_INT 25
7501: PUSH
7502: LD_INT 17
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: LIST
7513: LIST
7514: LIST
7515: LIST
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: PPUSH
7521: CALL_OW 69
7525: UNION
7526: PPUSH
7527: CALL_OW 1
7531: ST_TO_ADDR
// end ; end ;
7532: PPOPN 3
7534: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7535: LD_INT 0
7537: PPUSH
7538: PPUSH
7539: PPUSH
7540: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7541: LD_VAR 0 1
7545: PPUSH
7546: CALL_OW 257
7550: PUSH
7551: LD_INT 12
7553: PUSH
7554: LD_INT 15
7556: PUSH
7557: LD_INT 17
7559: PUSH
7560: LD_INT 16
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: IN
7569: PUSH
7570: LD_VAR 0 1
7574: PPUSH
7575: CALL_OW 263
7579: PUSH
7580: LD_INT 5
7582: EQUAL
7583: OR
7584: IFFALSE 7595
// ApeKilled ( j ) ;
7586: LD_VAR 0 1
7590: PPUSH
7591: CALL 6643 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7595: LD_VAR 0 1
7599: PPUSH
7600: CALL_OW 266
7604: PUSH
7605: LD_INT 0
7607: PUSH
7608: LD_INT 1
7610: PUSH
7611: EMPTY
7612: LIST
7613: LIST
7614: IN
7615: IFFALSE 7697
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7617: LD_ADDR_VAR 0 4
7621: PUSH
7622: LD_EXP 36
7626: PUSH
7627: LD_VAR 0 1
7631: PPUSH
7632: CALL_OW 255
7636: ARRAY
7637: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7638: LD_ADDR_VAR 0 2
7642: PUSH
7643: LD_EXP 41
7647: PUSH
7648: LD_VAR 0 4
7652: ARRAY
7653: PUSH
7654: LD_INT 1
7656: ARRAY
7657: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7658: LD_ADDR_VAR 0 3
7662: PUSH
7663: LD_EXP 41
7667: PUSH
7668: LD_VAR 0 4
7672: ARRAY
7673: PUSH
7674: LD_INT 2
7676: ARRAY
7677: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7678: LD_VAR 0 2
7682: PPUSH
7683: LD_VAR 0 3
7687: PPUSH
7688: CALL_OW 420
7692: PPUSH
7693: CALL_OW 419
// end ; end ;
7697: PPOPN 5
7699: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7700: LD_VAR 0 1
7704: PPUSH
7705: LD_VAR 0 2
7709: PPUSH
7710: LD_VAR 0 3
7714: PPUSH
7715: LD_OWVAR 2
7719: PPUSH
7720: CALL 10758 0 4
7724: PPOPN 3
7726: END
// function CanWinLoose ; begin
7727: LD_INT 0
7729: PPUSH
// Result := true ;
7730: LD_ADDR_VAR 0 1
7734: PUSH
7735: LD_INT 1
7737: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
7738: CALL_OW 518
7742: PUSH
7743: CALL_OW 519
7747: PUSH
7748: LD_INT 0
7750: GREATER
7751: AND
7752: IFFALSE 7762
// Result := false ;
7754: LD_ADDR_VAR 0 1
7758: PUSH
7759: LD_INT 0
7761: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7762: CALL_OW 531
7766: PUSH
7767: CALL_OW 519
7771: PUSH
7772: LD_INT 1
7774: GREATER
7775: AND
7776: IFFALSE 7786
// Result := false ;
7778: LD_ADDR_VAR 0 1
7782: PUSH
7783: LD_INT 0
7785: ST_TO_ADDR
// end ;
7786: LD_VAR 0 1
7790: RET
// function HasPower ( i ) ; begin
7791: LD_INT 0
7793: PPUSH
// if def_people_respawning then
7794: LD_EXP 11
7798: IFFALSE 7889
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
7800: LD_ADDR_VAR 0 2
7804: PUSH
7805: LD_INT 22
7807: PUSH
7808: LD_VAR 0 1
7812: PUSH
7813: EMPTY
7814: LIST
7815: LIST
7816: PUSH
7817: LD_INT 2
7819: PUSH
7820: LD_INT 21
7822: PUSH
7823: LD_INT 1
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: PUSH
7830: LD_INT 33
7832: PUSH
7833: LD_INT 3
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: PUSH
7840: LD_INT 33
7842: PUSH
7843: LD_INT 5
7845: PUSH
7846: EMPTY
7847: LIST
7848: LIST
7849: PUSH
7850: LD_INT 30
7852: PUSH
7853: LD_INT 0
7855: PUSH
7856: EMPTY
7857: LIST
7858: LIST
7859: PUSH
7860: LD_INT 30
7862: PUSH
7863: LD_INT 1
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: PPUSH
7882: CALL_OW 69
7886: ST_TO_ADDR
7887: GO 7954
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
7889: LD_ADDR_VAR 0 2
7893: PUSH
7894: LD_INT 22
7896: PUSH
7897: LD_VAR 0 1
7901: PUSH
7902: EMPTY
7903: LIST
7904: LIST
7905: PUSH
7906: LD_INT 2
7908: PUSH
7909: LD_INT 21
7911: PUSH
7912: LD_INT 1
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: PUSH
7919: LD_INT 33
7921: PUSH
7922: LD_INT 3
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: PUSH
7929: LD_INT 33
7931: PUSH
7932: LD_INT 5
7934: PUSH
7935: EMPTY
7936: LIST
7937: LIST
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: PPUSH
7949: CALL_OW 69
7953: ST_TO_ADDR
// end ;
7954: LD_VAR 0 2
7958: RET
// function AlliedSides ( i , j ) ; begin
7959: LD_INT 0
7961: PPUSH
// Result := false ;
7962: LD_ADDR_VAR 0 3
7966: PUSH
7967: LD_INT 0
7969: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
7970: LD_VAR 0 1
7974: PPUSH
7975: LD_VAR 0 2
7979: PPUSH
7980: CALL_OW 81
7984: PUSH
7985: LD_INT 1
7987: EQUAL
7988: PUSH
7989: LD_VAR 0 2
7993: PPUSH
7994: LD_VAR 0 1
7998: PPUSH
7999: CALL_OW 81
8003: PUSH
8004: LD_INT 1
8006: EQUAL
8007: AND
8008: PUSH
8009: LD_VAR 0 1
8013: PPUSH
8014: CALL_OW 83
8018: AND
8019: PUSH
8020: LD_VAR 0 2
8024: PPUSH
8025: CALL_OW 83
8029: AND
8030: IFFALSE 8040
// Result := true ;
8032: LD_ADDR_VAR 0 3
8036: PUSH
8037: LD_INT 1
8039: ST_TO_ADDR
// end ;
8040: LD_VAR 0 3
8044: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
8045: CALL 7727 0 0
8049: IFFALSE 8058
8051: GO 8053
8053: DISABLE
// YouLostInMultiplayer ;
8054: CALL_OW 107
8058: END
// every 0 0$3 trigger CanWinLoose marked 401 do
8059: CALL 7727 0 0
8063: IFFALSE 8087
8065: GO 8067
8067: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
8068: LD_EXP 37
8072: PUSH
8073: LD_OWVAR 2
8077: ARRAY
8078: PPUSH
8079: CALL 10800 0 1
// YouWinInMultiplayer ;
8083: CALL_OW 106
// end ;
8087: END
// every 0 0$3 marked 98 do var i , CanWin ;
8088: GO 8090
8090: DISABLE
8091: LD_INT 0
8093: PPUSH
8094: PPUSH
// begin if not HasPower ( your_side ) then
8095: LD_OWVAR 2
8099: PPUSH
8100: CALL 7791 0 1
8104: NOT
8105: IFFALSE 8116
// begin Multiplayer_Loose_Message ;
8107: CALL_OW 521
// enable ( 400 ) ;
8111: LD_INT 400
8113: ENABLE_MARKED
// end else
8114: GO 8249
// begin CanWin := true ;
8116: LD_ADDR_VAR 0 2
8120: PUSH
8121: LD_INT 1
8123: ST_TO_ADDR
// for i := 1 to 8 do
8124: LD_ADDR_VAR 0 1
8128: PUSH
8129: DOUBLE
8130: LD_INT 1
8132: DEC
8133: ST_TO_ADDR
8134: LD_INT 8
8136: PUSH
8137: FOR_TO
8138: IFFALSE 8235
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8140: LD_EXP 36
8144: PUSH
8145: LD_VAR 0 1
8149: ARRAY
8150: PUSH
8151: LD_VAR 0 1
8155: PPUSH
8156: CALL_OW 108
8160: AND
8161: PUSH
8162: LD_VAR 0 1
8166: PUSH
8167: LD_OWVAR 2
8171: NONEQUAL
8172: AND
8173: IFFALSE 8233
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
8175: LD_EXP 34
8179: PUSH
8180: LD_VAR 0 1
8184: ARRAY
8185: NOT
8186: PUSH
8187: LD_EXP 34
8191: PUSH
8192: LD_VAR 0 1
8196: ARRAY
8197: PUSH
8198: LD_EXP 34
8202: PUSH
8203: LD_OWVAR 2
8207: ARRAY
8208: NONEQUAL
8209: OR
8210: IFFALSE 8233
// if HasPower ( i ) then
8212: LD_VAR 0 1
8216: PPUSH
8217: CALL 7791 0 1
8221: IFFALSE 8233
// begin CanWin := false ;
8223: LD_ADDR_VAR 0 2
8227: PUSH
8228: LD_INT 0
8230: ST_TO_ADDR
// break ;
8231: GO 8235
// end ;
8233: GO 8137
8235: POP
8236: POP
// if CanWin then
8237: LD_VAR 0 2
8241: IFFALSE 8248
// enable ( 401 ) else
8243: LD_INT 401
8245: ENABLE_MARKED
8246: GO 8249
// enable ;
8248: ENABLE
// end ; end ;
8249: PPOPN 2
8251: END
// every 0 0$3 marked 99 do var i , CanWin ;
8252: GO 8254
8254: DISABLE
8255: LD_INT 0
8257: PPUSH
8258: PPUSH
// begin if not HasPower ( your_side ) then
8259: LD_OWVAR 2
8263: PPUSH
8264: CALL 7791 0 1
8268: NOT
8269: IFFALSE 8280
// begin Multiplayer_Loose_Message ;
8271: CALL_OW 521
// enable ( 400 ) ;
8275: LD_INT 400
8277: ENABLE_MARKED
// end else
8278: GO 8393
// begin CanWin := true ;
8280: LD_ADDR_VAR 0 2
8284: PUSH
8285: LD_INT 1
8287: ST_TO_ADDR
// for i := 1 to 8 do
8288: LD_ADDR_VAR 0 1
8292: PUSH
8293: DOUBLE
8294: LD_INT 1
8296: DEC
8297: ST_TO_ADDR
8298: LD_INT 8
8300: PUSH
8301: FOR_TO
8302: IFFALSE 8379
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8304: LD_EXP 36
8308: PUSH
8309: LD_VAR 0 1
8313: ARRAY
8314: PUSH
8315: LD_VAR 0 1
8319: PPUSH
8320: CALL_OW 108
8324: AND
8325: PUSH
8326: LD_VAR 0 1
8330: PUSH
8331: LD_OWVAR 2
8335: NONEQUAL
8336: AND
8337: IFFALSE 8377
// if not AlliedSides ( i , your_side ) then
8339: LD_VAR 0 1
8343: PPUSH
8344: LD_OWVAR 2
8348: PPUSH
8349: CALL 7959 0 2
8353: NOT
8354: IFFALSE 8377
// if HasPower ( i ) then
8356: LD_VAR 0 1
8360: PPUSH
8361: CALL 7791 0 1
8365: IFFALSE 8377
// begin CanWin := false ;
8367: LD_ADDR_VAR 0 2
8371: PUSH
8372: LD_INT 0
8374: ST_TO_ADDR
// break ;
8375: GO 8379
// end ;
8377: GO 8301
8379: POP
8380: POP
// if CanWin then
8381: LD_VAR 0 2
8385: IFFALSE 8392
// enable ( 401 ) else
8387: LD_INT 401
8389: ENABLE_MARKED
8390: GO 8393
// enable ;
8392: ENABLE
// end ; end ; end_of_file
8393: PPOPN 2
8395: END
// every 0 0$1 marked 100 do var i , base , pom , filter , sib_mined ;
8396: GO 8398
8398: DISABLE
8399: LD_INT 0
8401: PPUSH
8402: PPUSH
8403: PPUSH
8404: PPUSH
8405: PPUSH
// begin sib_mined := [ ] ;
8406: LD_ADDR_VAR 0 5
8410: PUSH
8411: EMPTY
8412: ST_TO_ADDR
// for i := 1 to 8 do
8413: LD_ADDR_VAR 0 1
8417: PUSH
8418: DOUBLE
8419: LD_INT 1
8421: DEC
8422: ST_TO_ADDR
8423: LD_INT 8
8425: PUSH
8426: FOR_TO
8427: IFFALSE 8583
// if Side_Positions [ i ] then
8429: LD_EXP 36
8433: PUSH
8434: LD_VAR 0 1
8438: ARRAY
8439: IFFALSE 8567
// begin filter := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8441: LD_ADDR_VAR 0 4
8445: PUSH
8446: LD_INT 22
8448: PUSH
8449: LD_VAR 0 1
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: PUSH
8458: LD_INT 2
8460: PUSH
8461: LD_INT 30
8463: PUSH
8464: LD_INT 0
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: PUSH
8471: LD_INT 30
8473: PUSH
8474: LD_INT 1
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: LIST
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: PPUSH
8490: CALL_OW 69
8494: ST_TO_ADDR
// pom := 0 ;
8495: LD_ADDR_VAR 0 3
8499: PUSH
8500: LD_INT 0
8502: ST_TO_ADDR
// for base in filter do
8503: LD_ADDR_VAR 0 2
8507: PUSH
8508: LD_VAR 0 4
8512: PUSH
8513: FOR_IN
8514: IFFALSE 8547
// pom := pom + GetResourceType ( GetBase ( base ) , mat_siberit ) ;
8516: LD_ADDR_VAR 0 3
8520: PUSH
8521: LD_VAR 0 3
8525: PUSH
8526: LD_VAR 0 2
8530: PPUSH
8531: CALL_OW 274
8535: PPUSH
8536: LD_INT 3
8538: PPUSH
8539: CALL_OW 275
8543: PLUS
8544: ST_TO_ADDR
8545: GO 8513
8547: POP
8548: POP
// sib_mined := sib_mined ^ pom ;
8549: LD_ADDR_VAR 0 5
8553: PUSH
8554: LD_VAR 0 5
8558: PUSH
8559: LD_VAR 0 3
8563: ADD
8564: ST_TO_ADDR
// end else
8565: GO 8581
// sib_mined := sib_mined ^ 0 ;
8567: LD_ADDR_VAR 0 5
8571: PUSH
8572: LD_VAR 0 5
8576: PUSH
8577: LD_INT 0
8579: ADD
8580: ST_TO_ADDR
8581: GO 8426
8583: POP
8584: POP
// if not def_public_score then
8585: LD_EXP 14
8589: NOT
8590: IFFALSE 8680
// begin ExtraStrings := [ ] ;
8592: LD_ADDR_EXP 56
8596: PUSH
8597: EMPTY
8598: ST_TO_ADDR
// for i := 1 to 8 do
8599: LD_ADDR_VAR 0 1
8603: PUSH
8604: DOUBLE
8605: LD_INT 1
8607: DEC
8608: ST_TO_ADDR
8609: LD_INT 8
8611: PUSH
8612: FOR_TO
8613: IFFALSE 8676
// if Side_Positions [ i ] then
8615: LD_EXP 36
8619: PUSH
8620: LD_VAR 0 1
8624: ARRAY
8625: IFFALSE 8674
// ExtraStrings := ExtraStrings ^ [ #AlienBase-MinedPublic , i , i , sib_mined [ i ] , amount_of_siberit ] ;
8627: LD_ADDR_EXP 56
8631: PUSH
8632: LD_EXP 56
8636: PUSH
8637: LD_STRING #AlienBase-MinedPublic
8639: PUSH
8640: LD_VAR 0 1
8644: PUSH
8645: LD_VAR 0 1
8649: PUSH
8650: LD_VAR 0 5
8654: PUSH
8655: LD_VAR 0 1
8659: ARRAY
8660: PUSH
8661: LD_EXP 30
8665: PUSH
8666: EMPTY
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: ADD
8673: ST_TO_ADDR
8674: GO 8612
8676: POP
8677: POP
// end else
8678: GO 8709
// ExtraStrings := [ #AlienBase-Mined , sib_mined [ Your_Side ] , amount_of_siberit ] ;
8680: LD_ADDR_EXP 56
8684: PUSH
8685: LD_STRING #AlienBase-Mined
8687: PUSH
8688: LD_VAR 0 5
8692: PUSH
8693: LD_OWVAR 2
8697: ARRAY
8698: PUSH
8699: LD_EXP 30
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: LIST
8708: ST_TO_ADDR
// for i := 1 to 8 do
8709: LD_ADDR_VAR 0 1
8713: PUSH
8714: DOUBLE
8715: LD_INT 1
8717: DEC
8718: ST_TO_ADDR
8719: LD_INT 8
8721: PUSH
8722: FOR_TO
8723: IFFALSE 8780
// if sib_mined [ i ] >= amount_of_siberit then
8725: LD_VAR 0 5
8729: PUSH
8730: LD_VAR 0 1
8734: ARRAY
8735: PUSH
8736: LD_EXP 30
8740: GREATEREQUAL
8741: IFFALSE 8778
// begin wait ( 0 0$1 ) ;
8743: LD_INT 35
8745: PPUSH
8746: CALL_OW 67
// if sib_mined [ your_side ] >= amount_of_siberit then
8750: LD_VAR 0 5
8754: PUSH
8755: LD_OWVAR 2
8759: ARRAY
8760: PUSH
8761: LD_EXP 30
8765: GREATEREQUAL
8766: IFFALSE 8774
// YouWinInMultiplayer else
8768: CALL_OW 106
8772: GO 8778
// YouLostInMultiplayer ;
8774: CALL_OW 107
// end ;
8778: GO 8722
8780: POP
8781: POP
// enable ;
8782: ENABLE
// end ; end_of_file
8783: PPOPN 5
8785: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
8786: LD_INT 0
8788: PPUSH
8789: PPUSH
// for un in battle_flags_id do
8790: LD_ADDR_VAR 0 2
8794: PUSH
8795: LD_EXP 46
8799: PUSH
8800: FOR_IN
8801: IFFALSE 8876
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
8803: LD_VAR 0 2
8807: PPUSH
8808: LD_INT 1
8810: PUSH
8811: LD_LOC 11
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: PUSH
8820: LD_INT 2
8822: PUSH
8823: LD_LOC 11
8827: PUSH
8828: LD_INT 2
8830: DIV
8831: PUSH
8832: EMPTY
8833: LIST
8834: LIST
8835: PUSH
8836: LD_INT 3
8838: PUSH
8839: LD_LOC 11
8843: PUSH
8844: LD_INT 5
8846: DIV
8847: PUSH
8848: EMPTY
8849: LIST
8850: LIST
8851: PUSH
8852: LD_INT 20
8854: PUSH
8855: LD_LOC 11
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: PUSH
8864: EMPTY
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: PPUSH
8870: CALL_OW 423
8874: GO 8800
8876: POP
8877: POP
// end ;
8878: LD_VAR 0 1
8882: RET
// every 1 do var un ;
8883: GO 8885
8885: DISABLE
8886: LD_INT 0
8888: PPUSH
// begin if not def_morale_flags then
8889: LD_EXP 9
8893: NOT
8894: IFFALSE 8898
// exit ;
8896: GO 8975
// if not morale_decreasing_time then
8898: LD_EXP 28
8902: NOT
8903: IFFALSE 8907
// exit ;
8905: GO 8975
// strength = 100 ;
8907: LD_ADDR_LOC 11
8911: PUSH
8912: LD_INT 100
8914: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8915: LD_EXP 28
8919: PPUSH
8920: CALL_OW 67
// strength := strength - 1 ;
8924: LD_ADDR_LOC 11
8928: PUSH
8929: LD_LOC 11
8933: PUSH
8934: LD_INT 1
8936: MINUS
8937: ST_TO_ADDR
// Update_Flags ;
8938: CALL 8786 0 0
// until not strength ;
8942: LD_LOC 11
8946: NOT
8947: IFFALSE 8915
// for un in battle_flags_id do
8949: LD_ADDR_VAR 0 1
8953: PUSH
8954: LD_EXP 46
8958: PUSH
8959: FOR_IN
8960: IFFALSE 8973
// KillBattleFlag ( un ) ;
8962: LD_VAR 0 1
8966: PPUSH
8967: CALL_OW 419
8971: GO 8959
8973: POP
8974: POP
// end ; end_of_file
8975: PPOPN 1
8977: END
// var BloodGods , BloodGods_LastKills , BloodGods_CurrentKills , BloodGods_Positions ; every 0 0$3 marked 200 do var x ;
8978: GO 8980
8980: DISABLE
8981: LD_INT 0
8983: PPUSH
// begin enable ;
8984: ENABLE
// for x := 1 to 8 do
8985: LD_ADDR_VAR 0 1
8989: PUSH
8990: DOUBLE
8991: LD_INT 1
8993: DEC
8994: ST_TO_ADDR
8995: LD_INT 8
8997: PUSH
8998: FOR_TO
8999: IFFALSE 9083
// if ( BloodGods_CurrentKills [ x ] > 5 ) and ( BloodGods [ x ] = - 1 ) then
9001: LD_LOC 18
9005: PUSH
9006: LD_VAR 0 1
9010: ARRAY
9011: PUSH
9012: LD_INT 5
9014: GREATER
9015: PUSH
9016: LD_LOC 16
9020: PUSH
9021: LD_VAR 0 1
9025: ARRAY
9026: PUSH
9027: LD_INT 1
9029: NEG
9030: EQUAL
9031: AND
9032: IFFALSE 9081
// begin BloodGods_LastKills := Replace ( BloodGods_LastKills , x , BloodGods_LastKills [ x ] + 6 ) ;
9034: LD_ADDR_LOC 17
9038: PUSH
9039: LD_LOC 17
9043: PPUSH
9044: LD_VAR 0 1
9048: PPUSH
9049: LD_LOC 17
9053: PUSH
9054: LD_VAR 0 1
9058: ARRAY
9059: PUSH
9060: LD_INT 6
9062: PLUS
9063: PPUSH
9064: CALL_OW 1
9068: ST_TO_ADDR
// AwakenBloodGod ( x , false ) ;
9069: LD_VAR 0 1
9073: PPUSH
9074: LD_INT 0
9076: PPUSH
9077: CALL 9255 0 2
// end ;
9081: GO 8998
9083: POP
9084: POP
// end ;
9085: PPOPN 1
9087: END
// every 0 0$1 marked 200 do var BGL , x ;
9088: GO 9090
9090: DISABLE
9091: LD_INT 0
9093: PPUSH
9094: PPUSH
// begin enable ;
9095: ENABLE
// for x := 1 to 8 do
9096: LD_ADDR_VAR 0 2
9100: PUSH
9101: DOUBLE
9102: LD_INT 1
9104: DEC
9105: ST_TO_ADDR
9106: LD_INT 8
9108: PUSH
9109: FOR_TO
9110: IFFALSE 9241
// if ( BloodGods [ x ] > - 1 ) and IsLive ( BloodGods [ x ] ) then
9112: LD_LOC 16
9116: PUSH
9117: LD_VAR 0 2
9121: ARRAY
9122: PUSH
9123: LD_INT 1
9125: NEG
9126: GREATER
9127: PUSH
9128: LD_LOC 16
9132: PUSH
9133: LD_VAR 0 2
9137: ARRAY
9138: PPUSH
9139: CALL_OW 300
9143: AND
9144: IFFALSE 9239
// begin BGL := GetLives ( BloodGods [ x ] ) ;
9146: LD_ADDR_VAR 0 1
9150: PUSH
9151: LD_LOC 16
9155: PUSH
9156: LD_VAR 0 2
9160: ARRAY
9161: PPUSH
9162: CALL_OW 256
9166: ST_TO_ADDR
// if ( BGL < 1000 ) and ( BGL > 100 ) then
9167: LD_VAR 0 1
9171: PUSH
9172: LD_INT 1000
9174: LESS
9175: PUSH
9176: LD_VAR 0 1
9180: PUSH
9181: LD_INT 100
9183: GREATER
9184: AND
9185: IFFALSE 9239
// begin BGL := BGL + 10 ;
9187: LD_ADDR_VAR 0 1
9191: PUSH
9192: LD_VAR 0 1
9196: PUSH
9197: LD_INT 10
9199: PLUS
9200: ST_TO_ADDR
// if BGL > 1000 then
9201: LD_VAR 0 1
9205: PUSH
9206: LD_INT 1000
9208: GREATER
9209: IFFALSE 9219
// BGL := 1000 ;
9211: LD_ADDR_VAR 0 1
9215: PUSH
9216: LD_INT 1000
9218: ST_TO_ADDR
// SetLives ( BloodGods [ x ] , BGL ) ;
9219: LD_LOC 16
9223: PUSH
9224: LD_VAR 0 2
9228: ARRAY
9229: PPUSH
9230: LD_VAR 0 1
9234: PPUSH
9235: CALL_OW 234
// end ; end ;
9239: GO 9109
9241: POP
9242: POP
// end ;
9243: PPOPN 2
9245: END
// every 0 0$1 marked 200 do
9246: GO 9248
9248: DISABLE
// begin DisplayTimeWithKills ;
9249: CALL 9496 0 0
// enable ;
9253: ENABLE
// end ;
9254: END
// function AwakenBloodGod ( side , NoDialog ) ; begin
9255: LD_INT 0
9257: PPUSH
// uc_direction := Rand ( 0 , 5 ) ;
9258: LD_ADDR_OWVAR 24
9262: PUSH
9263: LD_INT 0
9265: PPUSH
9266: LD_INT 5
9268: PPUSH
9269: CALL_OW 12
9273: ST_TO_ADDR
// PrepareHuman ( 1 , class_soldier , 15 ) ;
9274: LD_INT 1
9276: PPUSH
9277: LD_INT 1
9279: PPUSH
9280: LD_INT 15
9282: PPUSH
9283: CALL_OW 380
// hc_importance := 106 ;
9287: LD_ADDR_OWVAR 32
9291: PUSH
9292: LD_INT 106
9294: ST_TO_ADDR
// hc_name := Blood God of  & mp_sides_players_names [ side ] ;
9295: LD_ADDR_OWVAR 26
9299: PUSH
9300: LD_STRING Blood God of 
9302: PUSH
9303: LD_OWVAR 19
9307: PUSH
9308: LD_VAR 0 1
9312: ARRAY
9313: STR
9314: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
9315: LD_ADDR_OWVAR 21
9319: PUSH
9320: LD_EXP 37
9324: PUSH
9325: LD_VAR 0 1
9329: ARRAY
9330: ST_TO_ADDR
// uc_side := side ;
9331: LD_ADDR_OWVAR 20
9335: PUSH
9336: LD_VAR 0 1
9340: ST_TO_ADDR
// hc_noskilllimit := true ;
9341: LD_ADDR_OWVAR 76
9345: PUSH
9346: LD_INT 1
9348: ST_TO_ADDR
// hc_agressivity := 50 ;
9349: LD_ADDR_OWVAR 35
9353: PUSH
9354: LD_INT 50
9356: ST_TO_ADDR
// BloodGods := Replace ( BloodGods , Side , CreateHuman ) ;
9357: LD_ADDR_LOC 16
9361: PUSH
9362: LD_LOC 16
9366: PPUSH
9367: LD_VAR 0 1
9371: PPUSH
9372: CALL_OW 44
9376: PPUSH
9377: CALL_OW 1
9381: ST_TO_ADDR
// PlaceUnitXYR ( BloodGods [ side ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 1 ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 2 ] , 10 , false ) ;
9382: LD_LOC 16
9386: PUSH
9387: LD_VAR 0 1
9391: ARRAY
9392: PPUSH
9393: LD_LOC 19
9397: PUSH
9398: LD_EXP 36
9402: PUSH
9403: LD_VAR 0 1
9407: ARRAY
9408: ARRAY
9409: PUSH
9410: LD_INT 1
9412: ARRAY
9413: PPUSH
9414: LD_LOC 19
9418: PUSH
9419: LD_EXP 36
9423: PUSH
9424: LD_VAR 0 1
9428: ARRAY
9429: ARRAY
9430: PUSH
9431: LD_INT 2
9433: ARRAY
9434: PPUSH
9435: LD_INT 10
9437: PPUSH
9438: LD_INT 0
9440: PPUSH
9441: CALL_OW 50
// SetAttr ( BloodGods [ side ] , attr_stamina , 300 ) ;
9445: LD_LOC 16
9449: PUSH
9450: LD_VAR 0 1
9454: ARRAY
9455: PPUSH
9456: LD_INT 1
9458: PPUSH
9459: LD_INT 300
9461: PPUSH
9462: CALL_OW 239
// if not NoDialog then
9466: LD_VAR 0 2
9470: NOT
9471: IFFALSE 9491
// SayRadio ( BloodGods [ side ] , DLAwaken ) ;
9473: LD_LOC 16
9477: PUSH
9478: LD_VAR 0 1
9482: ARRAY
9483: PPUSH
9484: LD_STRING DLAwaken
9486: PPUSH
9487: CALL_OW 94
// end ;
9491: LD_VAR 0 3
9495: RET
// function DisplayTimeWithKills ; var x ; begin
9496: LD_INT 0
9498: PPUSH
9499: PPUSH
// ExtraStrings :=  ;
9500: LD_ADDR_EXP 56
9504: PUSH
9505: LD_STRING 
9507: ST_TO_ADDR
// for x = 1 to Side_Positions do
9508: LD_ADDR_VAR 0 2
9512: PUSH
9513: DOUBLE
9514: LD_INT 1
9516: DEC
9517: ST_TO_ADDR
9518: LD_EXP 36
9522: PUSH
9523: FOR_TO
9524: IFFALSE 9757
// if Side_Positions [ x ] then
9526: LD_EXP 36
9530: PUSH
9531: LD_VAR 0 2
9535: ARRAY
9536: IFFALSE 9755
// begin BloodGods_CurrentKills := Replace ( BloodGods_CurrentKills , x , GetHumansKilled ( x ) - BloodGods_LastKills [ x ] ) ;
9538: LD_ADDR_LOC 18
9542: PUSH
9543: LD_LOC 18
9547: PPUSH
9548: LD_VAR 0 2
9552: PPUSH
9553: LD_VAR 0 2
9557: PPUSH
9558: CALL_OW 515
9562: PUSH
9563: LD_LOC 17
9567: PUSH
9568: LD_VAR 0 2
9572: ARRAY
9573: MINUS
9574: PPUSH
9575: CALL_OW 1
9579: ST_TO_ADDR
// if ( BloodGods [ x ] > - 1 ) and ( IsLive ( BloodGods [ x ] ) ) then
9580: LD_LOC 16
9584: PUSH
9585: LD_VAR 0 2
9589: ARRAY
9590: PUSH
9591: LD_INT 1
9593: NEG
9594: GREATER
9595: PUSH
9596: LD_LOC 16
9600: PUSH
9601: LD_VAR 0 2
9605: ARRAY
9606: PPUSH
9607: CALL_OW 300
9611: AND
9612: IFFALSE 9645
// ExtraStrings = ExtraStrings ^ [ #godawoken , x , x ] else
9614: LD_ADDR_EXP 56
9618: PUSH
9619: LD_EXP 56
9623: PUSH
9624: LD_STRING #godawoken
9626: PUSH
9627: LD_VAR 0 2
9631: PUSH
9632: LD_VAR 0 2
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: LIST
9641: ADD
9642: ST_TO_ADDR
9643: GO 9755
// if ( BloodGods [ x ] > - 1 ) and ( IsDead ( BloodGods [ x ] ) ) then
9645: LD_LOC 16
9649: PUSH
9650: LD_VAR 0 2
9654: ARRAY
9655: PUSH
9656: LD_INT 1
9658: NEG
9659: GREATER
9660: PUSH
9661: LD_LOC 16
9665: PUSH
9666: LD_VAR 0 2
9670: ARRAY
9671: PPUSH
9672: CALL_OW 301
9676: AND
9677: IFFALSE 9710
// ExtraStrings = ExtraStrings ^ [ #goddied , x , x ] else
9679: LD_ADDR_EXP 56
9683: PUSH
9684: LD_EXP 56
9688: PUSH
9689: LD_STRING #goddied
9691: PUSH
9692: LD_VAR 0 2
9696: PUSH
9697: LD_VAR 0 2
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: LIST
9706: ADD
9707: ST_TO_ADDR
9708: GO 9755
// ExtraStrings = ExtraStrings ^ [ #godssacrifise , x , x , BloodGods_CurrentKills [ x ] , 6 ] end ;
9710: LD_ADDR_EXP 56
9714: PUSH
9715: LD_EXP 56
9719: PUSH
9720: LD_STRING #godssacrifise
9722: PUSH
9723: LD_VAR 0 2
9727: PUSH
9728: LD_VAR 0 2
9732: PUSH
9733: LD_LOC 18
9737: PUSH
9738: LD_VAR 0 2
9742: ARRAY
9743: PUSH
9744: LD_INT 6
9746: PUSH
9747: EMPTY
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: ADD
9754: ST_TO_ADDR
9755: GO 9523
9757: POP
9758: POP
// end ;
9759: LD_VAR 0 1
9763: RET
// export function InitBloodGods ; begin
9764: LD_INT 0
9766: PPUSH
// BloodGods = [ - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 ] ;
9767: LD_ADDR_LOC 16
9771: PUSH
9772: LD_INT 1
9774: NEG
9775: PUSH
9776: LD_INT 1
9778: NEG
9779: PUSH
9780: LD_INT 1
9782: NEG
9783: PUSH
9784: LD_INT 1
9786: NEG
9787: PUSH
9788: LD_INT 1
9790: NEG
9791: PUSH
9792: LD_INT 1
9794: NEG
9795: PUSH
9796: LD_INT 1
9798: NEG
9799: PUSH
9800: LD_INT 1
9802: NEG
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: ST_TO_ADDR
// BloodGods_LastKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9814: LD_ADDR_LOC 17
9818: PUSH
9819: LD_INT 0
9821: PUSH
9822: LD_INT 0
9824: PUSH
9825: LD_INT 0
9827: PUSH
9828: LD_INT 0
9830: PUSH
9831: LD_INT 0
9833: PUSH
9834: LD_INT 0
9836: PUSH
9837: LD_INT 0
9839: PUSH
9840: LD_INT 0
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: ST_TO_ADDR
// BloodGods_CurrentKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9853: LD_ADDR_LOC 18
9857: PUSH
9858: LD_INT 0
9860: PUSH
9861: LD_INT 0
9863: PUSH
9864: LD_INT 0
9866: PUSH
9867: LD_INT 0
9869: PUSH
9870: LD_INT 0
9872: PUSH
9873: LD_INT 0
9875: PUSH
9876: LD_INT 0
9878: PUSH
9879: LD_INT 0
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: ST_TO_ADDR
// BloodGods_Positions = [ [ 60 , 47 ] , [ 82 , 26 ] , [ 124 , 45 ] , [ 147 , 90 ] , [ 126 , 112 ] , [ 84 , 92 ] , [ 106 , 73 ] , [ 106 , 73 ] ] ;
9892: LD_ADDR_LOC 19
9896: PUSH
9897: LD_INT 60
9899: PUSH
9900: LD_INT 47
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: PUSH
9907: LD_INT 82
9909: PUSH
9910: LD_INT 26
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: PUSH
9917: LD_INT 124
9919: PUSH
9920: LD_INT 45
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: PUSH
9927: LD_INT 147
9929: PUSH
9930: LD_INT 90
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: PUSH
9937: LD_INT 126
9939: PUSH
9940: LD_INT 112
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PUSH
9947: LD_INT 84
9949: PUSH
9950: LD_INT 92
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: PUSH
9957: LD_INT 106
9959: PUSH
9960: LD_INT 73
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: PUSH
9967: LD_INT 106
9969: PUSH
9970: LD_INT 73
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: PUSH
9977: EMPTY
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: ST_TO_ADDR
// ClearHumansKilled ;
9987: CALL_OW 516
// enable ( 200 ) ;
9991: LD_INT 200
9993: ENABLE_MARKED
// end ; end_of_file
9994: LD_VAR 0 1
9998: RET
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
9999: LD_INT 0
10001: PPUSH
10002: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
10003: LD_ADDR_VAR 0 2
10007: PUSH
10008: LD_STRING #Multi1x1-Time
10010: PUSH
10011: LD_OWVAR 1
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
10020: LD_INT 0
10022: PUSH
10023: LD_EXP 33
10027: PUSH
10028: LD_OWVAR 1
10032: MINUS
10033: LESSEQUAL
10034: IFFALSE 10065
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
10036: LD_ADDR_VAR 0 2
10040: PUSH
10041: LD_VAR 0 2
10045: PUSH
10046: LD_STRING #allowedsibbomb
10048: PUSH
10049: LD_EXP 33
10053: PUSH
10054: LD_OWVAR 1
10058: MINUS
10059: PUSH
10060: EMPTY
10061: LIST
10062: LIST
10063: ADD
10064: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
10065: LD_INT 0
10067: PUSH
10068: LD_EXP 59
10072: PUSH
10073: LD_OWVAR 1
10077: MINUS
10078: LESSEQUAL
10079: IFFALSE 10110
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
10081: LD_ADDR_VAR 0 2
10085: PUSH
10086: LD_VAR 0 2
10090: PUSH
10091: LD_STRING #builduptime
10093: PUSH
10094: LD_EXP 59
10098: PUSH
10099: LD_OWVAR 1
10103: MINUS
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: ADD
10109: ST_TO_ADDR
// if ( ExtraStrings ) then
10110: LD_EXP 56
10114: IFFALSE 10136
// AllStrings := AllStrings ^  ^ ExtraStrings ;
10116: LD_ADDR_VAR 0 2
10120: PUSH
10121: LD_VAR 0 2
10125: PUSH
10126: LD_STRING 
10128: ADD
10129: PUSH
10130: LD_EXP 56
10134: ADD
10135: ST_TO_ADDR
// Display_Strings := AllStrings ;
10136: LD_ADDR_OWVAR 47
10140: PUSH
10141: LD_VAR 0 2
10145: ST_TO_ADDR
// end ;
10146: LD_VAR 0 1
10150: RET
// every 0 0$1 do
10151: GO 10153
10153: DISABLE
// begin ShowTimer ;
10154: CALL 9999 0 0
// enable ;
10158: ENABLE
// end ; end_of_file
10159: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
10160: LD_INT 0
10162: PPUSH
10163: PPUSH
10164: PPUSH
// BuildUpTime_Delay = 0 ;
10165: LD_ADDR_EXP 59
10169: PUSH
10170: LD_INT 0
10172: ST_TO_ADDR
// if not def_builduptime then
10173: LD_EXP 16
10177: NOT
10178: IFFALSE 10182
// exit ;
10180: GO 10365
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
10182: LD_ADDR_EXP 59
10186: PUSH
10187: LD_INT 8400
10189: PUSH
10190: LD_INT 2100
10192: PUSH
10193: LD_EXP 16
10197: MUL
10198: PLUS
10199: ST_TO_ADDR
// BuildUpTimeActive := true ;
10200: LD_ADDR_EXP 58
10204: PUSH
10205: LD_INT 1
10207: ST_TO_ADDR
// for i := 1 to 8 do
10208: LD_ADDR_VAR 0 2
10212: PUSH
10213: DOUBLE
10214: LD_INT 1
10216: DEC
10217: ST_TO_ADDR
10218: LD_INT 8
10220: PUSH
10221: FOR_TO
10222: IFFALSE 10363
// if Side_Positions [ i ] then
10224: LD_EXP 36
10228: PUSH
10229: LD_VAR 0 2
10233: ARRAY
10234: IFFALSE 10361
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
10236: LD_EXP 57
10240: PUSH
10241: LD_EXP 36
10245: PUSH
10246: LD_VAR 0 2
10250: ARRAY
10251: ARRAY
10252: PPUSH
10253: LD_INT 5
10255: PPUSH
10256: CALL_OW 424
// for j := 1 to 8 do
10260: LD_ADDR_VAR 0 3
10264: PUSH
10265: DOUBLE
10266: LD_INT 1
10268: DEC
10269: ST_TO_ADDR
10270: LD_INT 8
10272: PUSH
10273: FOR_TO
10274: IFFALSE 10359
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
10276: LD_EXP 36
10280: PUSH
10281: LD_VAR 0 3
10285: ARRAY
10286: PUSH
10287: LD_EXP 34
10291: PUSH
10292: LD_VAR 0 2
10296: ARRAY
10297: PUSH
10298: LD_EXP 34
10302: PUSH
10303: LD_VAR 0 3
10307: ARRAY
10308: NONEQUAL
10309: PUSH
10310: LD_EXP 38
10314: NOT
10315: PUSH
10316: LD_VAR 0 2
10320: PUSH
10321: LD_VAR 0 3
10325: NONEQUAL
10326: AND
10327: OR
10328: AND
10329: IFFALSE 10357
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
10331: LD_VAR 0 3
10335: PPUSH
10336: LD_EXP 57
10340: PUSH
10341: LD_EXP 36
10345: PUSH
10346: LD_VAR 0 2
10350: ARRAY
10351: ARRAY
10352: PPUSH
10353: CALL_OW 333
10357: GO 10273
10359: POP
10360: POP
// end ;
10361: GO 10221
10363: POP
10364: POP
// end ;
10365: LD_VAR 0 1
10369: RET
// export function EndBuildUp ; var i , j ; begin
10370: LD_INT 0
10372: PPUSH
10373: PPUSH
10374: PPUSH
// BuildUpTimeActive := false ;
10375: LD_ADDR_EXP 58
10379: PUSH
10380: LD_INT 0
10382: ST_TO_ADDR
// for i := 1 to 8 do
10383: LD_ADDR_VAR 0 2
10387: PUSH
10388: DOUBLE
10389: LD_INT 1
10391: DEC
10392: ST_TO_ADDR
10393: LD_INT 8
10395: PUSH
10396: FOR_TO
10397: IFFALSE 10538
// if Side_Positions [ i ] then
10399: LD_EXP 36
10403: PUSH
10404: LD_VAR 0 2
10408: ARRAY
10409: IFFALSE 10536
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
10411: LD_EXP 57
10415: PUSH
10416: LD_EXP 36
10420: PUSH
10421: LD_VAR 0 2
10425: ARRAY
10426: ARRAY
10427: PPUSH
10428: LD_INT 0
10430: PPUSH
10431: CALL_OW 424
// for j := 1 to 8 do
10435: LD_ADDR_VAR 0 3
10439: PUSH
10440: DOUBLE
10441: LD_INT 1
10443: DEC
10444: ST_TO_ADDR
10445: LD_INT 8
10447: PUSH
10448: FOR_TO
10449: IFFALSE 10534
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
10451: LD_EXP 36
10455: PUSH
10456: LD_VAR 0 3
10460: ARRAY
10461: PUSH
10462: LD_EXP 34
10466: PUSH
10467: LD_VAR 0 2
10471: ARRAY
10472: PUSH
10473: LD_EXP 34
10477: PUSH
10478: LD_VAR 0 3
10482: ARRAY
10483: NONEQUAL
10484: PUSH
10485: LD_EXP 38
10489: NOT
10490: PUSH
10491: LD_VAR 0 2
10495: PUSH
10496: LD_VAR 0 3
10500: NONEQUAL
10501: AND
10502: OR
10503: AND
10504: IFFALSE 10532
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
10506: LD_VAR 0 3
10510: PPUSH
10511: LD_EXP 57
10515: PUSH
10516: LD_EXP 36
10520: PUSH
10521: LD_VAR 0 2
10525: ARRAY
10526: ARRAY
10527: PPUSH
10528: CALL_OW 334
10532: GO 10448
10534: POP
10535: POP
// end ;
10536: GO 10396
10538: POP
10539: POP
// end ;
10540: LD_VAR 0 1
10544: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
10545: LD_EXP 58
10549: IFFALSE 10724
10551: GO 10553
10553: DISABLE
10554: LD_INT 0
10556: PPUSH
10557: PPUSH
// begin for i := 1 to 8 do
10558: LD_ADDR_VAR 0 1
10562: PUSH
10563: DOUBLE
10564: LD_INT 1
10566: DEC
10567: ST_TO_ADDR
10568: LD_INT 8
10570: PUSH
10571: FOR_TO
10572: IFFALSE 10721
// if Side_Positions [ i ] then
10574: LD_EXP 36
10578: PUSH
10579: LD_VAR 0 1
10583: ARRAY
10584: IFFALSE 10719
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
10586: LD_ADDR_VAR 0 2
10590: PUSH
10591: LD_EXP 57
10595: PUSH
10596: LD_EXP 36
10600: PUSH
10601: LD_VAR 0 1
10605: ARRAY
10606: ARRAY
10607: PPUSH
10608: LD_INT 2
10610: PUSH
10611: LD_INT 21
10613: PUSH
10614: LD_INT 1
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: PUSH
10621: LD_INT 21
10623: PUSH
10624: LD_INT 2
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: LIST
10635: PUSH
10636: LD_INT 22
10638: PUSH
10639: LD_OWVAR 2
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: PPUSH
10652: CALL_OW 70
10656: PUSH
10657: FOR_IN
10658: IFFALSE 10717
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
10660: LD_EXP 34
10664: PUSH
10665: LD_VAR 0 1
10669: ARRAY
10670: PUSH
10671: LD_EXP 34
10675: PUSH
10676: LD_OWVAR 2
10680: ARRAY
10681: NONEQUAL
10682: PUSH
10683: LD_EXP 38
10687: NOT
10688: PUSH
10689: LD_VAR 0 1
10693: PUSH
10694: LD_OWVAR 2
10698: NONEQUAL
10699: AND
10700: OR
10701: IFFALSE 10715
// ComMoveToArea ( un , BuildUpEscape ) ;
10703: LD_VAR 0 2
10707: PPUSH
10708: LD_INT 16
10710: PPUSH
10711: CALL_OW 113
10715: GO 10657
10717: POP
10718: POP
10719: GO 10571
10721: POP
10722: POP
// enable ;
10723: ENABLE
// end ;
10724: PPOPN 2
10726: END
// every 0 0$1 trigger def_builduptime do
10727: LD_EXP 16
10731: IFFALSE 10757
10733: GO 10735
10735: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
10736: LD_INT 8400
10738: PUSH
10739: LD_EXP 16
10743: PUSH
10744: LD_INT 2100
10746: MUL
10747: PLUS
10748: PPUSH
10749: CALL_OW 67
// EndBuildUp ;
10753: CALL 10370 0 0
// end ; end_of_file
10757: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
10758: LD_INT 0
10760: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
10761: LD_VAR 0 1
10765: PPUSH
10766: CALL_OW 255
10770: PUSH
10771: LD_VAR 0 4
10775: EQUAL
10776: IFFALSE 10795
// begin SetAchievement ( ACH_RAD ) ;
10778: LD_STRING ACH_RAD
10780: PPUSH
10781: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
10785: LD_STRING ACH_NL
10787: PPUSH
10788: LD_INT 1
10790: PPUSH
10791: CALL_OW 564
// end end ;
10795: LD_VAR 0 5
10799: RET
// export function SA_Win ( side ) ; begin
10800: LD_INT 0
10802: PPUSH
// case side of 1 :
10803: LD_VAR 0 1
10807: PUSH
10808: LD_INT 1
10810: DOUBLE
10811: EQUAL
10812: IFTRUE 10816
10814: GO 10829
10816: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
10817: LD_STRING ACH_AH
10819: PPUSH
10820: LD_INT 1
10822: PPUSH
10823: CALL_OW 564
10827: GO 10992
10829: LD_INT 2
10831: DOUBLE
10832: EQUAL
10833: IFTRUE 10837
10835: GO 10850
10837: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
10838: LD_STRING ACH_E
10840: PPUSH
10841: LD_INT 1
10843: PPUSH
10844: CALL_OW 564
10848: GO 10992
10850: LD_INT 3
10852: DOUBLE
10853: EQUAL
10854: IFTRUE 10858
10856: GO 10871
10858: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
10859: LD_STRING ACH_OOL
10861: PPUSH
10862: LD_INT 1
10864: PPUSH
10865: CALL_OW 564
10869: GO 10992
10871: LD_INT 1
10873: PUSH
10874: LD_INT 2
10876: PUSH
10877: EMPTY
10878: LIST
10879: LIST
10880: DOUBLE
10881: EQUAL
10882: IFTRUE 10886
10884: GO 10911
10886: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
10887: LD_STRING ACH_AH
10889: PPUSH
10890: LD_REAL  5.00000000000000E-0001
10893: PPUSH
10894: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
10898: LD_STRING ACH_E
10900: PPUSH
10901: LD_REAL  5.00000000000000E-0001
10904: PPUSH
10905: CALL_OW 564
// end ; [ 2 , 3 ] :
10909: GO 10992
10911: LD_INT 2
10913: PUSH
10914: LD_INT 3
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: DOUBLE
10921: EQUAL
10922: IFTRUE 10926
10924: GO 10951
10926: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
10927: LD_STRING ACH_OOL
10929: PPUSH
10930: LD_REAL  5.00000000000000E-0001
10933: PPUSH
10934: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
10938: LD_STRING ACH_E
10940: PPUSH
10941: LD_REAL  5.00000000000000E-0001
10944: PPUSH
10945: CALL_OW 564
// end ; [ 3 , 1 ] :
10949: GO 10992
10951: LD_INT 3
10953: PUSH
10954: LD_INT 1
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: DOUBLE
10961: EQUAL
10962: IFTRUE 10966
10964: GO 10991
10966: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
10967: LD_STRING ACH_AH
10969: PPUSH
10970: LD_REAL  5.00000000000000E-0001
10973: PPUSH
10974: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
10978: LD_STRING ACH_OOL
10980: PPUSH
10981: LD_REAL  5.00000000000000E-0001
10984: PPUSH
10985: CALL_OW 564
// end ; end ;
10989: GO 10992
10991: POP
// end ; end_of_file
10992: LD_VAR 0 2
10996: RET
// export function SetMpTechs ( ) ; var side , i ; begin
10997: LD_INT 0
10999: PPUSH
11000: PPUSH
11001: PPUSH
// for side = 1 to 8 do
11002: LD_ADDR_VAR 0 2
11006: PUSH
11007: DOUBLE
11008: LD_INT 1
11010: DEC
11011: ST_TO_ADDR
11012: LD_INT 8
11014: PUSH
11015: FOR_TO
11016: IFFALSE 11137
// begin for i = 1 to 72 do
11018: LD_ADDR_VAR 0 3
11022: PUSH
11023: DOUBLE
11024: LD_INT 1
11026: DEC
11027: ST_TO_ADDR
11028: LD_INT 72
11030: PUSH
11031: FOR_TO
11032: IFFALSE 11063
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
11034: LD_VAR 0 3
11038: PPUSH
11039: LD_VAR 0 2
11043: PPUSH
11044: LD_INT 0
11046: PPUSH
11047: LD_VAR 0 3
11051: PPUSH
11052: CALL_OW 565
11056: PPUSH
11057: CALL_OW 322
11061: GO 11031
11063: POP
11064: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
11065: LD_INT 73
11067: PPUSH
11068: LD_VAR 0 2
11072: PPUSH
11073: LD_INT 0
11075: PPUSH
11076: LD_INT 25
11078: PPUSH
11079: CALL_OW 565
11083: PPUSH
11084: CALL_OW 322
// for i = 0 to 40 do
11088: LD_ADDR_VAR 0 3
11092: PUSH
11093: DOUBLE
11094: LD_INT 0
11096: DEC
11097: ST_TO_ADDR
11098: LD_INT 40
11100: PUSH
11101: FOR_TO
11102: IFFALSE 11133
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
11104: LD_VAR 0 3
11108: PPUSH
11109: LD_VAR 0 2
11113: PPUSH
11114: LD_INT 1
11116: PPUSH
11117: LD_VAR 0 3
11121: PPUSH
11122: CALL_OW 565
11126: PPUSH
11127: CALL_OW 324
11131: GO 11101
11133: POP
11134: POP
// end ;
11135: GO 11015
11137: POP
11138: POP
// end ;
11139: LD_VAR 0 1
11143: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
11144: LD_INT 0
11146: PPUSH
11147: PPUSH
11148: PPUSH
// for side = 1 to 8 do
11149: LD_ADDR_VAR 0 3
11153: PUSH
11154: DOUBLE
11155: LD_INT 1
11157: DEC
11158: ST_TO_ADDR
11159: LD_INT 8
11161: PUSH
11162: FOR_TO
11163: IFFALSE 15159
// begin for i = 1 to 73 do
11165: LD_ADDR_VAR 0 4
11169: PUSH
11170: DOUBLE
11171: LD_INT 1
11173: DEC
11174: ST_TO_ADDR
11175: LD_INT 73
11177: PUSH
11178: FOR_TO
11179: IFFALSE 11200
// SetTech ( i , side , state_disabled ) ;
11181: LD_VAR 0 4
11185: PPUSH
11186: LD_VAR 0 3
11190: PPUSH
11191: LD_INT 0
11193: PPUSH
11194: CALL_OW 322
11198: GO 11178
11200: POP
11201: POP
// for i = 0 to 40 do
11202: LD_ADDR_VAR 0 4
11206: PUSH
11207: DOUBLE
11208: LD_INT 0
11210: DEC
11211: ST_TO_ADDR
11212: LD_INT 40
11214: PUSH
11215: FOR_TO
11216: IFFALSE 11237
// SetRestrict ( i , side , false ) ;
11218: LD_VAR 0 4
11222: PPUSH
11223: LD_VAR 0 3
11227: PPUSH
11228: LD_INT 0
11230: PPUSH
11231: CALL_OW 324
11235: GO 11215
11237: POP
11238: POP
// case level of 1 :
11239: LD_VAR 0 1
11243: PUSH
11244: LD_INT 1
11246: DOUBLE
11247: EQUAL
11248: IFTRUE 11252
11250: GO 11405
11252: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11253: LD_INT 35
11255: PPUSH
11256: LD_VAR 0 3
11260: PPUSH
11261: LD_INT 1
11263: PPUSH
11264: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11268: LD_INT 45
11270: PPUSH
11271: LD_VAR 0 3
11275: PPUSH
11276: LD_INT 1
11278: PPUSH
11279: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11283: LD_INT 46
11285: PPUSH
11286: LD_VAR 0 3
11290: PPUSH
11291: LD_INT 1
11293: PPUSH
11294: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11298: LD_INT 47
11300: PPUSH
11301: LD_VAR 0 3
11305: PPUSH
11306: LD_INT 1
11308: PPUSH
11309: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11313: LD_INT 0
11315: PPUSH
11316: LD_VAR 0 3
11320: PPUSH
11321: LD_INT 1
11323: PPUSH
11324: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11328: LD_INT 2
11330: PPUSH
11331: LD_VAR 0 3
11335: PPUSH
11336: LD_INT 1
11338: PPUSH
11339: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11343: LD_INT 4
11345: PPUSH
11346: LD_VAR 0 3
11350: PPUSH
11351: LD_INT 1
11353: PPUSH
11354: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11358: LD_INT 6
11360: PPUSH
11361: LD_VAR 0 3
11365: PPUSH
11366: LD_INT 1
11368: PPUSH
11369: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11373: LD_INT 29
11375: PPUSH
11376: LD_VAR 0 3
11380: PPUSH
11381: LD_INT 1
11383: PPUSH
11384: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11388: LD_INT 31
11390: PPUSH
11391: LD_VAR 0 3
11395: PPUSH
11396: LD_INT 1
11398: PPUSH
11399: CALL_OW 324
// end ; 2 :
11403: GO 15157
11405: LD_INT 2
11407: DOUBLE
11408: EQUAL
11409: IFTRUE 11413
11411: GO 11611
11413: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11414: LD_INT 35
11416: PPUSH
11417: LD_VAR 0 3
11421: PPUSH
11422: LD_INT 1
11424: PPUSH
11425: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11429: LD_INT 45
11431: PPUSH
11432: LD_VAR 0 3
11436: PPUSH
11437: LD_INT 1
11439: PPUSH
11440: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11444: LD_INT 46
11446: PPUSH
11447: LD_VAR 0 3
11451: PPUSH
11452: LD_INT 1
11454: PPUSH
11455: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11459: LD_INT 47
11461: PPUSH
11462: LD_VAR 0 3
11466: PPUSH
11467: LD_INT 1
11469: PPUSH
11470: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11474: LD_INT 1
11476: PPUSH
11477: LD_VAR 0 3
11481: PPUSH
11482: LD_INT 1
11484: PPUSH
11485: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11489: LD_INT 2
11491: PPUSH
11492: LD_VAR 0 3
11496: PPUSH
11497: LD_INT 1
11499: PPUSH
11500: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11504: LD_INT 11
11506: PPUSH
11507: LD_VAR 0 3
11511: PPUSH
11512: LD_INT 1
11514: PPUSH
11515: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11519: LD_INT 0
11521: PPUSH
11522: LD_VAR 0 3
11526: PPUSH
11527: LD_INT 1
11529: PPUSH
11530: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11534: LD_INT 2
11536: PPUSH
11537: LD_VAR 0 3
11541: PPUSH
11542: LD_INT 1
11544: PPUSH
11545: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11549: LD_INT 4
11551: PPUSH
11552: LD_VAR 0 3
11556: PPUSH
11557: LD_INT 1
11559: PPUSH
11560: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11564: LD_INT 6
11566: PPUSH
11567: LD_VAR 0 3
11571: PPUSH
11572: LD_INT 1
11574: PPUSH
11575: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11579: LD_INT 29
11581: PPUSH
11582: LD_VAR 0 3
11586: PPUSH
11587: LD_INT 1
11589: PPUSH
11590: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11594: LD_INT 31
11596: PPUSH
11597: LD_VAR 0 3
11601: PPUSH
11602: LD_INT 1
11604: PPUSH
11605: CALL_OW 324
// end ; 3 :
11609: GO 15157
11611: LD_INT 3
11613: DOUBLE
11614: EQUAL
11615: IFTRUE 11619
11617: GO 12072
11619: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11620: LD_INT 35
11622: PPUSH
11623: LD_VAR 0 3
11627: PPUSH
11628: LD_INT 1
11630: PPUSH
11631: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11635: LD_INT 45
11637: PPUSH
11638: LD_VAR 0 3
11642: PPUSH
11643: LD_INT 1
11645: PPUSH
11646: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11650: LD_INT 46
11652: PPUSH
11653: LD_VAR 0 3
11657: PPUSH
11658: LD_INT 1
11660: PPUSH
11661: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11665: LD_INT 47
11667: PPUSH
11668: LD_VAR 0 3
11672: PPUSH
11673: LD_INT 1
11675: PPUSH
11676: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11680: LD_INT 1
11682: PPUSH
11683: LD_VAR 0 3
11687: PPUSH
11688: LD_INT 1
11690: PPUSH
11691: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11695: LD_INT 2
11697: PPUSH
11698: LD_VAR 0 3
11702: PPUSH
11703: LD_INT 1
11705: PPUSH
11706: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11710: LD_INT 11
11712: PPUSH
11713: LD_VAR 0 3
11717: PPUSH
11718: LD_INT 1
11720: PPUSH
11721: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11725: LD_INT 48
11727: PPUSH
11728: LD_VAR 0 3
11732: PPUSH
11733: LD_INT 1
11735: PPUSH
11736: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11740: LD_INT 69
11742: PPUSH
11743: LD_VAR 0 3
11747: PPUSH
11748: LD_INT 1
11750: PPUSH
11751: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11755: LD_INT 39
11757: PPUSH
11758: LD_VAR 0 3
11762: PPUSH
11763: LD_INT 1
11765: PPUSH
11766: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11770: LD_INT 43
11772: PPUSH
11773: LD_VAR 0 3
11777: PPUSH
11778: LD_INT 1
11780: PPUSH
11781: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11785: LD_INT 51
11787: PPUSH
11788: LD_VAR 0 3
11792: PPUSH
11793: LD_INT 1
11795: PPUSH
11796: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11800: LD_INT 6
11802: PPUSH
11803: LD_VAR 0 3
11807: PPUSH
11808: LD_INT 1
11810: PPUSH
11811: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11815: LD_INT 0
11817: PPUSH
11818: LD_VAR 0 3
11822: PPUSH
11823: LD_INT 1
11825: PPUSH
11826: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11830: LD_INT 2
11832: PPUSH
11833: LD_VAR 0 3
11837: PPUSH
11838: LD_INT 1
11840: PPUSH
11841: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11845: LD_INT 3
11847: PPUSH
11848: LD_VAR 0 3
11852: PPUSH
11853: LD_INT 1
11855: PPUSH
11856: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11860: LD_INT 4
11862: PPUSH
11863: LD_VAR 0 3
11867: PPUSH
11868: LD_INT 1
11870: PPUSH
11871: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11875: LD_INT 6
11877: PPUSH
11878: LD_VAR 0 3
11882: PPUSH
11883: LD_INT 1
11885: PPUSH
11886: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11890: LD_INT 7
11892: PPUSH
11893: LD_VAR 0 3
11897: PPUSH
11898: LD_INT 1
11900: PPUSH
11901: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11905: LD_INT 8
11907: PPUSH
11908: LD_VAR 0 3
11912: PPUSH
11913: LD_INT 1
11915: PPUSH
11916: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11920: LD_INT 10
11922: PPUSH
11923: LD_VAR 0 3
11927: PPUSH
11928: LD_INT 1
11930: PPUSH
11931: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11935: LD_INT 15
11937: PPUSH
11938: LD_VAR 0 3
11942: PPUSH
11943: LD_INT 1
11945: PPUSH
11946: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11950: LD_INT 16
11952: PPUSH
11953: LD_VAR 0 3
11957: PPUSH
11958: LD_INT 1
11960: PPUSH
11961: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11965: LD_INT 17
11967: PPUSH
11968: LD_VAR 0 3
11972: PPUSH
11973: LD_INT 1
11975: PPUSH
11976: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11980: LD_INT 20
11982: PPUSH
11983: LD_VAR 0 3
11987: PPUSH
11988: LD_INT 1
11990: PPUSH
11991: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11995: LD_INT 26
11997: PPUSH
11998: LD_VAR 0 3
12002: PPUSH
12003: LD_INT 1
12005: PPUSH
12006: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12010: LD_INT 27
12012: PPUSH
12013: LD_VAR 0 3
12017: PPUSH
12018: LD_INT 1
12020: PPUSH
12021: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12025: LD_INT 29
12027: PPUSH
12028: LD_VAR 0 3
12032: PPUSH
12033: LD_INT 1
12035: PPUSH
12036: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12040: LD_INT 31
12042: PPUSH
12043: LD_VAR 0 3
12047: PPUSH
12048: LD_INT 1
12050: PPUSH
12051: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12055: LD_INT 32
12057: PPUSH
12058: LD_VAR 0 3
12062: PPUSH
12063: LD_INT 1
12065: PPUSH
12066: CALL_OW 324
// end ; 4 :
12070: GO 15157
12072: LD_INT 4
12074: DOUBLE
12075: EQUAL
12076: IFTRUE 12080
12078: GO 13028
12080: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12081: LD_INT 35
12083: PPUSH
12084: LD_VAR 0 3
12088: PPUSH
12089: LD_INT 1
12091: PPUSH
12092: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12096: LD_INT 45
12098: PPUSH
12099: LD_VAR 0 3
12103: PPUSH
12104: LD_INT 1
12106: PPUSH
12107: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12111: LD_INT 46
12113: PPUSH
12114: LD_VAR 0 3
12118: PPUSH
12119: LD_INT 1
12121: PPUSH
12122: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12126: LD_INT 47
12128: PPUSH
12129: LD_VAR 0 3
12133: PPUSH
12134: LD_INT 1
12136: PPUSH
12137: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12141: LD_INT 1
12143: PPUSH
12144: LD_VAR 0 3
12148: PPUSH
12149: LD_INT 1
12151: PPUSH
12152: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12156: LD_INT 2
12158: PPUSH
12159: LD_VAR 0 3
12163: PPUSH
12164: LD_INT 1
12166: PPUSH
12167: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12171: LD_INT 11
12173: PPUSH
12174: LD_VAR 0 3
12178: PPUSH
12179: LD_INT 1
12181: PPUSH
12182: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12186: LD_INT 20
12188: PPUSH
12189: LD_VAR 0 3
12193: PPUSH
12194: LD_INT 1
12196: PPUSH
12197: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12201: LD_INT 48
12203: PPUSH
12204: LD_VAR 0 3
12208: PPUSH
12209: LD_INT 1
12211: PPUSH
12212: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12216: LD_INT 49
12218: PPUSH
12219: LD_VAR 0 3
12223: PPUSH
12224: LD_INT 1
12226: PPUSH
12227: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12231: LD_INT 69
12233: PPUSH
12234: LD_VAR 0 3
12238: PPUSH
12239: LD_INT 1
12241: PPUSH
12242: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12246: LD_INT 39
12248: PPUSH
12249: LD_VAR 0 3
12253: PPUSH
12254: LD_INT 1
12256: PPUSH
12257: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12261: LD_INT 34
12263: PPUSH
12264: LD_VAR 0 3
12268: PPUSH
12269: LD_INT 1
12271: PPUSH
12272: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12276: LD_INT 42
12278: PPUSH
12279: LD_VAR 0 3
12283: PPUSH
12284: LD_INT 1
12286: PPUSH
12287: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12291: LD_INT 44
12293: PPUSH
12294: LD_VAR 0 3
12298: PPUSH
12299: LD_INT 1
12301: PPUSH
12302: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12306: LD_INT 41
12308: PPUSH
12309: LD_VAR 0 3
12313: PPUSH
12314: LD_INT 1
12316: PPUSH
12317: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12321: LD_INT 43
12323: PPUSH
12324: LD_VAR 0 3
12328: PPUSH
12329: LD_INT 1
12331: PPUSH
12332: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12336: LD_INT 70
12338: PPUSH
12339: LD_VAR 0 3
12343: PPUSH
12344: LD_INT 1
12346: PPUSH
12347: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12351: LD_INT 51
12353: PPUSH
12354: LD_VAR 0 3
12358: PPUSH
12359: LD_INT 1
12361: PPUSH
12362: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12366: LD_INT 52
12368: PPUSH
12369: LD_VAR 0 3
12373: PPUSH
12374: LD_INT 1
12376: PPUSH
12377: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12381: LD_INT 6
12383: PPUSH
12384: LD_VAR 0 3
12388: PPUSH
12389: LD_INT 1
12391: PPUSH
12392: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12396: LD_INT 15
12398: PPUSH
12399: LD_VAR 0 3
12403: PPUSH
12404: LD_INT 1
12406: PPUSH
12407: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12411: LD_INT 7
12413: PPUSH
12414: LD_VAR 0 3
12418: PPUSH
12419: LD_INT 1
12421: PPUSH
12422: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12426: LD_INT 12
12428: PPUSH
12429: LD_VAR 0 3
12433: PPUSH
12434: LD_INT 1
12436: PPUSH
12437: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12441: LD_INT 18
12443: PPUSH
12444: LD_VAR 0 3
12448: PPUSH
12449: LD_INT 1
12451: PPUSH
12452: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12456: LD_INT 60
12458: PPUSH
12459: LD_VAR 0 3
12463: PPUSH
12464: LD_INT 1
12466: PPUSH
12467: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12471: LD_INT 9
12473: PPUSH
12474: LD_VAR 0 3
12478: PPUSH
12479: LD_INT 1
12481: PPUSH
12482: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12486: LD_INT 30
12488: PPUSH
12489: LD_VAR 0 3
12493: PPUSH
12494: LD_INT 1
12496: PPUSH
12497: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12501: LD_INT 37
12503: PPUSH
12504: LD_VAR 0 3
12508: PPUSH
12509: LD_INT 1
12511: PPUSH
12512: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12516: LD_INT 5
12518: PPUSH
12519: LD_VAR 0 3
12523: PPUSH
12524: LD_INT 1
12526: PPUSH
12527: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12531: LD_INT 66
12533: PPUSH
12534: LD_VAR 0 3
12538: PPUSH
12539: LD_INT 1
12541: PPUSH
12542: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12546: LD_INT 21
12548: PPUSH
12549: LD_VAR 0 3
12553: PPUSH
12554: LD_INT 1
12556: PPUSH
12557: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12561: LD_INT 22
12563: PPUSH
12564: LD_VAR 0 3
12568: PPUSH
12569: LD_INT 1
12571: PPUSH
12572: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12576: LD_INT 54
12578: PPUSH
12579: LD_VAR 0 3
12583: PPUSH
12584: LD_INT 1
12586: PPUSH
12587: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12591: LD_INT 0
12593: PPUSH
12594: LD_VAR 0 3
12598: PPUSH
12599: LD_INT 1
12601: PPUSH
12602: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12606: LD_INT 1
12608: PPUSH
12609: LD_VAR 0 3
12613: PPUSH
12614: LD_INT 1
12616: PPUSH
12617: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12621: LD_INT 2
12623: PPUSH
12624: LD_VAR 0 3
12628: PPUSH
12629: LD_INT 1
12631: PPUSH
12632: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12636: LD_INT 3
12638: PPUSH
12639: LD_VAR 0 3
12643: PPUSH
12644: LD_INT 1
12646: PPUSH
12647: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12651: LD_INT 4
12653: PPUSH
12654: LD_VAR 0 3
12658: PPUSH
12659: LD_INT 1
12661: PPUSH
12662: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12666: LD_INT 5
12668: PPUSH
12669: LD_VAR 0 3
12673: PPUSH
12674: LD_INT 1
12676: PPUSH
12677: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12681: LD_INT 6
12683: PPUSH
12684: LD_VAR 0 3
12688: PPUSH
12689: LD_INT 1
12691: PPUSH
12692: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12696: LD_INT 7
12698: PPUSH
12699: LD_VAR 0 3
12703: PPUSH
12704: LD_INT 1
12706: PPUSH
12707: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12711: LD_INT 8
12713: PPUSH
12714: LD_VAR 0 3
12718: PPUSH
12719: LD_INT 1
12721: PPUSH
12722: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12726: LD_INT 10
12728: PPUSH
12729: LD_VAR 0 3
12733: PPUSH
12734: LD_INT 1
12736: PPUSH
12737: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12741: LD_INT 11
12743: PPUSH
12744: LD_VAR 0 3
12748: PPUSH
12749: LD_INT 1
12751: PPUSH
12752: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12756: LD_INT 12
12758: PPUSH
12759: LD_VAR 0 3
12763: PPUSH
12764: LD_INT 1
12766: PPUSH
12767: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12771: LD_INT 13
12773: PPUSH
12774: LD_VAR 0 3
12778: PPUSH
12779: LD_INT 1
12781: PPUSH
12782: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12786: LD_INT 14
12788: PPUSH
12789: LD_VAR 0 3
12793: PPUSH
12794: LD_INT 1
12796: PPUSH
12797: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12801: LD_INT 15
12803: PPUSH
12804: LD_VAR 0 3
12808: PPUSH
12809: LD_INT 1
12811: PPUSH
12812: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12816: LD_INT 16
12818: PPUSH
12819: LD_VAR 0 3
12823: PPUSH
12824: LD_INT 1
12826: PPUSH
12827: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12831: LD_INT 17
12833: PPUSH
12834: LD_VAR 0 3
12838: PPUSH
12839: LD_INT 1
12841: PPUSH
12842: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12846: LD_INT 19
12848: PPUSH
12849: LD_VAR 0 3
12853: PPUSH
12854: LD_INT 1
12856: PPUSH
12857: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12861: LD_INT 20
12863: PPUSH
12864: LD_VAR 0 3
12868: PPUSH
12869: LD_INT 1
12871: PPUSH
12872: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12876: LD_INT 21
12878: PPUSH
12879: LD_VAR 0 3
12883: PPUSH
12884: LD_INT 1
12886: PPUSH
12887: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12891: LD_INT 23
12893: PPUSH
12894: LD_VAR 0 3
12898: PPUSH
12899: LD_INT 1
12901: PPUSH
12902: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12906: LD_INT 26
12908: PPUSH
12909: LD_VAR 0 3
12913: PPUSH
12914: LD_INT 1
12916: PPUSH
12917: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12921: LD_INT 27
12923: PPUSH
12924: LD_VAR 0 3
12928: PPUSH
12929: LD_INT 1
12931: PPUSH
12932: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12936: LD_INT 28
12938: PPUSH
12939: LD_VAR 0 3
12943: PPUSH
12944: LD_INT 1
12946: PPUSH
12947: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12951: LD_INT 29
12953: PPUSH
12954: LD_VAR 0 3
12958: PPUSH
12959: LD_INT 1
12961: PPUSH
12962: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12966: LD_INT 30
12968: PPUSH
12969: LD_VAR 0 3
12973: PPUSH
12974: LD_INT 1
12976: PPUSH
12977: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12981: LD_INT 31
12983: PPUSH
12984: LD_VAR 0 3
12988: PPUSH
12989: LD_INT 1
12991: PPUSH
12992: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12996: LD_INT 32
12998: PPUSH
12999: LD_VAR 0 3
13003: PPUSH
13004: LD_INT 1
13006: PPUSH
13007: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
13011: LD_INT 36
13013: PPUSH
13014: LD_VAR 0 3
13018: PPUSH
13019: LD_INT 1
13021: PPUSH
13022: CALL_OW 324
// end ; 5 :
13026: GO 15157
13028: LD_INT 5
13030: DOUBLE
13031: EQUAL
13032: IFTRUE 13036
13034: GO 14149
13036: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13037: LD_INT 35
13039: PPUSH
13040: LD_VAR 0 3
13044: PPUSH
13045: LD_INT 1
13047: PPUSH
13048: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13052: LD_INT 45
13054: PPUSH
13055: LD_VAR 0 3
13059: PPUSH
13060: LD_INT 1
13062: PPUSH
13063: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13067: LD_INT 46
13069: PPUSH
13070: LD_VAR 0 3
13074: PPUSH
13075: LD_INT 1
13077: PPUSH
13078: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13082: LD_INT 47
13084: PPUSH
13085: LD_VAR 0 3
13089: PPUSH
13090: LD_INT 1
13092: PPUSH
13093: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13097: LD_INT 1
13099: PPUSH
13100: LD_VAR 0 3
13104: PPUSH
13105: LD_INT 1
13107: PPUSH
13108: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13112: LD_INT 2
13114: PPUSH
13115: LD_VAR 0 3
13119: PPUSH
13120: LD_INT 1
13122: PPUSH
13123: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13127: LD_INT 11
13129: PPUSH
13130: LD_VAR 0 3
13134: PPUSH
13135: LD_INT 1
13137: PPUSH
13138: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13142: LD_INT 20
13144: PPUSH
13145: LD_VAR 0 3
13149: PPUSH
13150: LD_INT 1
13152: PPUSH
13153: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13157: LD_INT 48
13159: PPUSH
13160: LD_VAR 0 3
13164: PPUSH
13165: LD_INT 1
13167: PPUSH
13168: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13172: LD_INT 49
13174: PPUSH
13175: LD_VAR 0 3
13179: PPUSH
13180: LD_INT 1
13182: PPUSH
13183: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13187: LD_INT 69
13189: PPUSH
13190: LD_VAR 0 3
13194: PPUSH
13195: LD_INT 1
13197: PPUSH
13198: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13202: LD_INT 39
13204: PPUSH
13205: LD_VAR 0 3
13209: PPUSH
13210: LD_INT 1
13212: PPUSH
13213: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13217: LD_INT 34
13219: PPUSH
13220: LD_VAR 0 3
13224: PPUSH
13225: LD_INT 1
13227: PPUSH
13228: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13232: LD_INT 42
13234: PPUSH
13235: LD_VAR 0 3
13239: PPUSH
13240: LD_INT 1
13242: PPUSH
13243: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13247: LD_INT 44
13249: PPUSH
13250: LD_VAR 0 3
13254: PPUSH
13255: LD_INT 1
13257: PPUSH
13258: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13262: LD_INT 41
13264: PPUSH
13265: LD_VAR 0 3
13269: PPUSH
13270: LD_INT 1
13272: PPUSH
13273: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
13277: LD_INT 40
13279: PPUSH
13280: LD_VAR 0 3
13284: PPUSH
13285: LD_INT 1
13287: PPUSH
13288: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13292: LD_INT 43
13294: PPUSH
13295: LD_VAR 0 3
13299: PPUSH
13300: LD_INT 1
13302: PPUSH
13303: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13307: LD_INT 70
13309: PPUSH
13310: LD_VAR 0 3
13314: PPUSH
13315: LD_INT 1
13317: PPUSH
13318: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13322: LD_INT 51
13324: PPUSH
13325: LD_VAR 0 3
13329: PPUSH
13330: LD_INT 1
13332: PPUSH
13333: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13337: LD_INT 52
13339: PPUSH
13340: LD_VAR 0 3
13344: PPUSH
13345: LD_INT 1
13347: PPUSH
13348: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13352: LD_INT 6
13354: PPUSH
13355: LD_VAR 0 3
13359: PPUSH
13360: LD_INT 1
13362: PPUSH
13363: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13367: LD_INT 15
13369: PPUSH
13370: LD_VAR 0 3
13374: PPUSH
13375: LD_INT 1
13377: PPUSH
13378: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13382: LD_INT 7
13384: PPUSH
13385: LD_VAR 0 3
13389: PPUSH
13390: LD_INT 1
13392: PPUSH
13393: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13397: LD_INT 12
13399: PPUSH
13400: LD_VAR 0 3
13404: PPUSH
13405: LD_INT 1
13407: PPUSH
13408: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
13412: LD_INT 17
13414: PPUSH
13415: LD_VAR 0 3
13419: PPUSH
13420: LD_INT 1
13422: PPUSH
13423: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13427: LD_INT 18
13429: PPUSH
13430: LD_VAR 0 3
13434: PPUSH
13435: LD_INT 1
13437: PPUSH
13438: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13442: LD_INT 60
13444: PPUSH
13445: LD_VAR 0 3
13449: PPUSH
13450: LD_INT 1
13452: PPUSH
13453: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13457: LD_INT 32
13459: PPUSH
13460: LD_VAR 0 3
13464: PPUSH
13465: LD_INT 1
13467: PPUSH
13468: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13472: LD_INT 9
13474: PPUSH
13475: LD_VAR 0 3
13479: PPUSH
13480: LD_INT 1
13482: PPUSH
13483: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13487: LD_INT 57
13489: PPUSH
13490: LD_VAR 0 3
13494: PPUSH
13495: LD_INT 1
13497: PPUSH
13498: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13502: LD_INT 30
13504: PPUSH
13505: LD_VAR 0 3
13509: PPUSH
13510: LD_INT 1
13512: PPUSH
13513: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13517: LD_INT 37
13519: PPUSH
13520: LD_VAR 0 3
13524: PPUSH
13525: LD_INT 1
13527: PPUSH
13528: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13532: LD_INT 63
13534: PPUSH
13535: LD_VAR 0 3
13539: PPUSH
13540: LD_INT 1
13542: PPUSH
13543: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13547: LD_INT 3
13549: PPUSH
13550: LD_VAR 0 3
13554: PPUSH
13555: LD_INT 1
13557: PPUSH
13558: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13562: LD_INT 4
13564: PPUSH
13565: LD_VAR 0 3
13569: PPUSH
13570: LD_INT 1
13572: PPUSH
13573: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13577: LD_INT 5
13579: PPUSH
13580: LD_VAR 0 3
13584: PPUSH
13585: LD_INT 1
13587: PPUSH
13588: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13592: LD_INT 66
13594: PPUSH
13595: LD_VAR 0 3
13599: PPUSH
13600: LD_INT 1
13602: PPUSH
13603: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13607: LD_INT 21
13609: PPUSH
13610: LD_VAR 0 3
13614: PPUSH
13615: LD_INT 1
13617: PPUSH
13618: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13622: LD_INT 22
13624: PPUSH
13625: LD_VAR 0 3
13629: PPUSH
13630: LD_INT 1
13632: PPUSH
13633: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13637: LD_INT 19
13639: PPUSH
13640: LD_VAR 0 3
13644: PPUSH
13645: LD_INT 1
13647: PPUSH
13648: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13652: LD_INT 54
13654: PPUSH
13655: LD_VAR 0 3
13659: PPUSH
13660: LD_INT 1
13662: PPUSH
13663: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13667: LD_INT 55
13669: PPUSH
13670: LD_VAR 0 3
13674: PPUSH
13675: LD_INT 1
13677: PPUSH
13678: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13682: LD_INT 0
13684: PPUSH
13685: LD_VAR 0 3
13689: PPUSH
13690: LD_INT 1
13692: PPUSH
13693: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
13697: LD_INT 1
13699: PPUSH
13700: LD_VAR 0 3
13704: PPUSH
13705: LD_INT 1
13707: PPUSH
13708: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13712: LD_INT 2
13714: PPUSH
13715: LD_VAR 0 3
13719: PPUSH
13720: LD_INT 1
13722: PPUSH
13723: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
13727: LD_INT 3
13729: PPUSH
13730: LD_VAR 0 3
13734: PPUSH
13735: LD_INT 1
13737: PPUSH
13738: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13742: LD_INT 4
13744: PPUSH
13745: LD_VAR 0 3
13749: PPUSH
13750: LD_INT 1
13752: PPUSH
13753: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
13757: LD_INT 5
13759: PPUSH
13760: LD_VAR 0 3
13764: PPUSH
13765: LD_INT 1
13767: PPUSH
13768: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13772: LD_INT 6
13774: PPUSH
13775: LD_VAR 0 3
13779: PPUSH
13780: LD_INT 1
13782: PPUSH
13783: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13787: LD_INT 7
13789: PPUSH
13790: LD_VAR 0 3
13794: PPUSH
13795: LD_INT 1
13797: PPUSH
13798: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13802: LD_INT 8
13804: PPUSH
13805: LD_VAR 0 3
13809: PPUSH
13810: LD_INT 1
13812: PPUSH
13813: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13817: LD_INT 10
13819: PPUSH
13820: LD_VAR 0 3
13824: PPUSH
13825: LD_INT 1
13827: PPUSH
13828: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
13832: LD_INT 11
13834: PPUSH
13835: LD_VAR 0 3
13839: PPUSH
13840: LD_INT 1
13842: PPUSH
13843: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
13847: LD_INT 12
13849: PPUSH
13850: LD_VAR 0 3
13854: PPUSH
13855: LD_INT 1
13857: PPUSH
13858: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
13862: LD_INT 13
13864: PPUSH
13865: LD_VAR 0 3
13869: PPUSH
13870: LD_INT 1
13872: PPUSH
13873: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
13877: LD_INT 14
13879: PPUSH
13880: LD_VAR 0 3
13884: PPUSH
13885: LD_INT 1
13887: PPUSH
13888: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13892: LD_INT 15
13894: PPUSH
13895: LD_VAR 0 3
13899: PPUSH
13900: LD_INT 1
13902: PPUSH
13903: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13907: LD_INT 16
13909: PPUSH
13910: LD_VAR 0 3
13914: PPUSH
13915: LD_INT 1
13917: PPUSH
13918: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13922: LD_INT 17
13924: PPUSH
13925: LD_VAR 0 3
13929: PPUSH
13930: LD_INT 1
13932: PPUSH
13933: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
13937: LD_INT 18
13939: PPUSH
13940: LD_VAR 0 3
13944: PPUSH
13945: LD_INT 1
13947: PPUSH
13948: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
13952: LD_INT 19
13954: PPUSH
13955: LD_VAR 0 3
13959: PPUSH
13960: LD_INT 1
13962: PPUSH
13963: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13967: LD_INT 20
13969: PPUSH
13970: LD_VAR 0 3
13974: PPUSH
13975: LD_INT 1
13977: PPUSH
13978: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
13982: LD_INT 21
13984: PPUSH
13985: LD_VAR 0 3
13989: PPUSH
13990: LD_INT 1
13992: PPUSH
13993: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
13997: LD_INT 23
13999: PPUSH
14000: LD_VAR 0 3
14004: PPUSH
14005: LD_INT 1
14007: PPUSH
14008: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
14012: LD_INT 26
14014: PPUSH
14015: LD_VAR 0 3
14019: PPUSH
14020: LD_INT 1
14022: PPUSH
14023: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
14027: LD_INT 27
14029: PPUSH
14030: LD_VAR 0 3
14034: PPUSH
14035: LD_INT 1
14037: PPUSH
14038: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
14042: LD_INT 28
14044: PPUSH
14045: LD_VAR 0 3
14049: PPUSH
14050: LD_INT 1
14052: PPUSH
14053: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14057: LD_INT 29
14059: PPUSH
14060: LD_VAR 0 3
14064: PPUSH
14065: LD_INT 1
14067: PPUSH
14068: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
14072: LD_INT 30
14074: PPUSH
14075: LD_VAR 0 3
14079: PPUSH
14080: LD_INT 1
14082: PPUSH
14083: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14087: LD_INT 31
14089: PPUSH
14090: LD_VAR 0 3
14094: PPUSH
14095: LD_INT 1
14097: PPUSH
14098: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
14102: LD_INT 32
14104: PPUSH
14105: LD_VAR 0 3
14109: PPUSH
14110: LD_INT 1
14112: PPUSH
14113: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
14117: LD_INT 33
14119: PPUSH
14120: LD_VAR 0 3
14124: PPUSH
14125: LD_INT 1
14127: PPUSH
14128: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
14132: LD_INT 36
14134: PPUSH
14135: LD_VAR 0 3
14139: PPUSH
14140: LD_INT 1
14142: PPUSH
14143: CALL_OW 324
// end ; 6 :
14147: GO 15157
14149: LD_INT 6
14151: DOUBLE
14152: EQUAL
14153: IFTRUE 14157
14155: GO 15082
14157: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14158: LD_INT 35
14160: PPUSH
14161: LD_VAR 0 3
14165: PPUSH
14166: LD_INT 1
14168: PPUSH
14169: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14173: LD_INT 45
14175: PPUSH
14176: LD_VAR 0 3
14180: PPUSH
14181: LD_INT 1
14183: PPUSH
14184: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14188: LD_INT 46
14190: PPUSH
14191: LD_VAR 0 3
14195: PPUSH
14196: LD_INT 1
14198: PPUSH
14199: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14203: LD_INT 47
14205: PPUSH
14206: LD_VAR 0 3
14210: PPUSH
14211: LD_INT 1
14213: PPUSH
14214: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14218: LD_INT 1
14220: PPUSH
14221: LD_VAR 0 3
14225: PPUSH
14226: LD_INT 1
14228: PPUSH
14229: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14233: LD_INT 2
14235: PPUSH
14236: LD_VAR 0 3
14240: PPUSH
14241: LD_INT 1
14243: PPUSH
14244: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14248: LD_INT 11
14250: PPUSH
14251: LD_VAR 0 3
14255: PPUSH
14256: LD_INT 1
14258: PPUSH
14259: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
14263: LD_INT 20
14265: PPUSH
14266: LD_VAR 0 3
14270: PPUSH
14271: LD_INT 1
14273: PPUSH
14274: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14278: LD_INT 48
14280: PPUSH
14281: LD_VAR 0 3
14285: PPUSH
14286: LD_INT 1
14288: PPUSH
14289: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
14293: LD_INT 49
14295: PPUSH
14296: LD_VAR 0 3
14300: PPUSH
14301: LD_INT 1
14303: PPUSH
14304: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
14308: LD_INT 50
14310: PPUSH
14311: LD_VAR 0 3
14315: PPUSH
14316: LD_INT 1
14318: PPUSH
14319: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14323: LD_INT 69
14325: PPUSH
14326: LD_VAR 0 3
14330: PPUSH
14331: LD_INT 1
14333: PPUSH
14334: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14338: LD_INT 39
14340: PPUSH
14341: LD_VAR 0 3
14345: PPUSH
14346: LD_INT 1
14348: PPUSH
14349: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
14353: LD_INT 34
14355: PPUSH
14356: LD_VAR 0 3
14360: PPUSH
14361: LD_INT 1
14363: PPUSH
14364: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
14368: LD_INT 42
14370: PPUSH
14371: LD_VAR 0 3
14375: PPUSH
14376: LD_INT 1
14378: PPUSH
14379: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
14383: LD_INT 44
14385: PPUSH
14386: LD_VAR 0 3
14390: PPUSH
14391: LD_INT 1
14393: PPUSH
14394: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
14398: LD_INT 41
14400: PPUSH
14401: LD_VAR 0 3
14405: PPUSH
14406: LD_INT 1
14408: PPUSH
14409: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
14413: LD_INT 13
14415: PPUSH
14416: LD_VAR 0 3
14420: PPUSH
14421: LD_INT 1
14423: PPUSH
14424: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
14428: LD_INT 40
14430: PPUSH
14431: LD_VAR 0 3
14435: PPUSH
14436: LD_INT 1
14438: PPUSH
14439: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14443: LD_INT 43
14445: PPUSH
14446: LD_VAR 0 3
14450: PPUSH
14451: LD_INT 1
14453: PPUSH
14454: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
14458: LD_INT 70
14460: PPUSH
14461: LD_VAR 0 3
14465: PPUSH
14466: LD_INT 1
14468: PPUSH
14469: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
14473: LD_INT 23
14475: PPUSH
14476: LD_VAR 0 3
14480: PPUSH
14481: LD_INT 1
14483: PPUSH
14484: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14488: LD_INT 51
14490: PPUSH
14491: LD_VAR 0 3
14495: PPUSH
14496: LD_INT 1
14498: PPUSH
14499: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
14503: LD_INT 52
14505: PPUSH
14506: LD_VAR 0 3
14510: PPUSH
14511: LD_INT 1
14513: PPUSH
14514: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14518: LD_INT 6
14520: PPUSH
14521: LD_VAR 0 3
14525: PPUSH
14526: LD_INT 1
14528: PPUSH
14529: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
14533: LD_INT 15
14535: PPUSH
14536: LD_VAR 0 3
14540: PPUSH
14541: LD_INT 1
14543: PPUSH
14544: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
14548: LD_INT 7
14550: PPUSH
14551: LD_VAR 0 3
14555: PPUSH
14556: LD_INT 1
14558: PPUSH
14559: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
14563: LD_INT 12
14565: PPUSH
14566: LD_VAR 0 3
14570: PPUSH
14571: LD_INT 1
14573: PPUSH
14574: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
14578: LD_INT 10
14580: PPUSH
14581: LD_VAR 0 3
14585: PPUSH
14586: LD_INT 1
14588: PPUSH
14589: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
14593: LD_INT 17
14595: PPUSH
14596: LD_VAR 0 3
14600: PPUSH
14601: LD_INT 1
14603: PPUSH
14604: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
14608: LD_INT 18
14610: PPUSH
14611: LD_VAR 0 3
14615: PPUSH
14616: LD_INT 1
14618: PPUSH
14619: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
14623: LD_INT 60
14625: PPUSH
14626: LD_VAR 0 3
14630: PPUSH
14631: LD_INT 1
14633: PPUSH
14634: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
14638: LD_INT 61
14640: PPUSH
14641: LD_VAR 0 3
14645: PPUSH
14646: LD_INT 1
14648: PPUSH
14649: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
14653: LD_INT 32
14655: PPUSH
14656: LD_VAR 0 3
14660: PPUSH
14661: LD_INT 1
14663: PPUSH
14664: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
14668: LD_INT 27
14670: PPUSH
14671: LD_VAR 0 3
14675: PPUSH
14676: LD_INT 1
14678: PPUSH
14679: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
14683: LD_INT 36
14685: PPUSH
14686: LD_VAR 0 3
14690: PPUSH
14691: LD_INT 1
14693: PPUSH
14694: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
14698: LD_INT 33
14700: PPUSH
14701: LD_VAR 0 3
14705: PPUSH
14706: LD_INT 1
14708: PPUSH
14709: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
14713: LD_INT 9
14715: PPUSH
14716: LD_VAR 0 3
14720: PPUSH
14721: LD_INT 1
14723: PPUSH
14724: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
14728: LD_INT 38
14730: PPUSH
14731: LD_VAR 0 3
14735: PPUSH
14736: LD_INT 1
14738: PPUSH
14739: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
14743: LD_INT 57
14745: PPUSH
14746: LD_VAR 0 3
14750: PPUSH
14751: LD_INT 1
14753: PPUSH
14754: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
14758: LD_INT 58
14760: PPUSH
14761: LD_VAR 0 3
14765: PPUSH
14766: LD_INT 1
14768: PPUSH
14769: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
14773: LD_INT 28
14775: PPUSH
14776: LD_VAR 0 3
14780: PPUSH
14781: LD_INT 1
14783: PPUSH
14784: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
14788: LD_INT 29
14790: PPUSH
14791: LD_VAR 0 3
14795: PPUSH
14796: LD_INT 1
14798: PPUSH
14799: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
14803: LD_INT 30
14805: PPUSH
14806: LD_VAR 0 3
14810: PPUSH
14811: LD_INT 1
14813: PPUSH
14814: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
14818: LD_INT 37
14820: PPUSH
14821: LD_VAR 0 3
14825: PPUSH
14826: LD_INT 1
14828: PPUSH
14829: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
14833: LD_INT 63
14835: PPUSH
14836: LD_VAR 0 3
14840: PPUSH
14841: LD_INT 1
14843: PPUSH
14844: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
14848: LD_INT 64
14850: PPUSH
14851: LD_VAR 0 3
14855: PPUSH
14856: LD_INT 1
14858: PPUSH
14859: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
14863: LD_INT 3
14865: PPUSH
14866: LD_VAR 0 3
14870: PPUSH
14871: LD_INT 1
14873: PPUSH
14874: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
14878: LD_INT 4
14880: PPUSH
14881: LD_VAR 0 3
14885: PPUSH
14886: LD_INT 1
14888: PPUSH
14889: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14893: LD_INT 5
14895: PPUSH
14896: LD_VAR 0 3
14900: PPUSH
14901: LD_INT 1
14903: PPUSH
14904: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
14908: LD_INT 8
14910: PPUSH
14911: LD_VAR 0 3
14915: PPUSH
14916: LD_INT 1
14918: PPUSH
14919: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14923: LD_INT 66
14925: PPUSH
14926: LD_VAR 0 3
14930: PPUSH
14931: LD_INT 1
14933: PPUSH
14934: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
14938: LD_INT 67
14940: PPUSH
14941: LD_VAR 0 3
14945: PPUSH
14946: LD_INT 1
14948: PPUSH
14949: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14953: LD_INT 21
14955: PPUSH
14956: LD_VAR 0 3
14960: PPUSH
14961: LD_INT 1
14963: PPUSH
14964: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14968: LD_INT 22
14970: PPUSH
14971: LD_VAR 0 3
14975: PPUSH
14976: LD_INT 1
14978: PPUSH
14979: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
14983: LD_INT 19
14985: PPUSH
14986: LD_VAR 0 3
14990: PPUSH
14991: LD_INT 1
14993: PPUSH
14994: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
14998: LD_INT 26
15000: PPUSH
15001: LD_VAR 0 3
15005: PPUSH
15006: LD_INT 1
15008: PPUSH
15009: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
15013: LD_INT 54
15015: PPUSH
15016: LD_VAR 0 3
15020: PPUSH
15021: LD_INT 1
15023: PPUSH
15024: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
15028: LD_INT 55
15030: PPUSH
15031: LD_VAR 0 3
15035: PPUSH
15036: LD_INT 1
15038: PPUSH
15039: CALL_OW 322
// for i = 0 to 39 do
15043: LD_ADDR_VAR 0 4
15047: PUSH
15048: DOUBLE
15049: LD_INT 0
15051: DEC
15052: ST_TO_ADDR
15053: LD_INT 39
15055: PUSH
15056: FOR_TO
15057: IFFALSE 15078
// SetRestrict ( i , side , true ) ;
15059: LD_VAR 0 4
15063: PPUSH
15064: LD_VAR 0 3
15068: PPUSH
15069: LD_INT 1
15071: PPUSH
15072: CALL_OW 324
15076: GO 15056
15078: POP
15079: POP
// end ; else
15080: GO 15157
15082: POP
// begin for i = 1 to 73 do
15083: LD_ADDR_VAR 0 4
15087: PUSH
15088: DOUBLE
15089: LD_INT 1
15091: DEC
15092: ST_TO_ADDR
15093: LD_INT 73
15095: PUSH
15096: FOR_TO
15097: IFFALSE 15118
// SetTech ( i , side , state_enabled ) ;
15099: LD_VAR 0 4
15103: PPUSH
15104: LD_VAR 0 3
15108: PPUSH
15109: LD_INT 1
15111: PPUSH
15112: CALL_OW 322
15116: GO 15096
15118: POP
15119: POP
// for i = 0 to 39 do
15120: LD_ADDR_VAR 0 4
15124: PUSH
15125: DOUBLE
15126: LD_INT 0
15128: DEC
15129: ST_TO_ADDR
15130: LD_INT 39
15132: PUSH
15133: FOR_TO
15134: IFFALSE 15155
// SetRestrict ( i , side , true ) ;
15136: LD_VAR 0 4
15140: PPUSH
15141: LD_VAR 0 3
15145: PPUSH
15146: LD_INT 1
15148: PPUSH
15149: CALL_OW 324
15153: GO 15133
15155: POP
15156: POP
// end ; end ; end ;
15157: GO 11162
15159: POP
15160: POP
// end ;
15161: LD_VAR 0 2
15165: RET
