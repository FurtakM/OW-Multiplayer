// export def_amount_of_siberit , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game ; export Position_Sides ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id , sheik , mastodont ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function read_multiplayer_and_game_parameters ; var i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// if Multiplayer then
   4: LD_OWVAR 4
   8: IFFALSE 72
// begin Game_Type := mp_game_type ;
  10: LD_ADDR_EXP 40
  14: PUSH
  15: LD_OWVAR 6
  19: ST_TO_ADDR
// Your_Side := mp_player_side ;
  20: LD_ADDR_OWVAR 2
  24: PUSH
  25: LD_OWVAR 7
  29: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  30: LD_ADDR_EXP 18
  34: PUSH
  35: LD_OWVAR 17
  39: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  40: LD_ADDR_EXP 16
  44: PUSH
  45: LD_OWVAR 15
  49: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
  50: LD_ADDR_EXP 19
  54: PUSH
  55: LD_OWVAR 16
  59: ST_TO_ADDR
// Teams := mp_teams ;
  60: LD_ADDR_EXP 17
  64: PUSH
  65: LD_OWVAR 12
  69: ST_TO_ADDR
// end else
  70: GO 254
// begin Game_Type := 1 ;
  72: LD_ADDR_EXP 40
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// Your_Side := 3 ;
  80: LD_ADDR_OWVAR 2
  84: PUSH
  85: LD_INT 3
  87: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
  88: LD_ADDR_EXP 18
  92: PUSH
  93: LD_INT 1
  95: PUSH
  96: LD_INT 2
  98: PUSH
  99: LD_INT 3
 101: PUSH
 102: LD_INT 4
 104: PUSH
 105: LD_INT 5
 107: PUSH
 108: LD_INT 6
 110: PUSH
 111: LD_INT 0
 113: PUSH
 114: LD_INT 0
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: LIST
 126: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 127: LD_ADDR_EXP 16
 131: PUSH
 132: LD_INT 1
 134: PUSH
 135: LD_INT 2
 137: PUSH
 138: LD_INT 3
 140: PUSH
 141: LD_INT 4
 143: PUSH
 144: LD_INT 5
 146: PUSH
 147: LD_INT 6
 149: PUSH
 150: LD_INT 0
 152: PUSH
 153: LD_INT 0
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: LIST
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 166: LD_ADDR_EXP 19
 170: PUSH
 171: LD_INT 1
 173: PUSH
 174: LD_INT 2
 176: PUSH
 177: LD_INT 3
 179: PUSH
 180: LD_INT 1
 182: PUSH
 183: LD_INT 2
 185: PUSH
 186: LD_INT 3
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 0
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 205: LD_ADDR_EXP 17
 209: PUSH
 210: LD_INT 1
 212: PUSH
 213: EMPTY
 214: LIST
 215: PUSH
 216: LD_INT 2
 218: PUSH
 219: EMPTY
 220: LIST
 221: PUSH
 222: LD_INT 3
 224: PUSH
 225: EMPTY
 226: LIST
 227: PUSH
 228: LD_INT 4
 230: PUSH
 231: EMPTY
 232: LIST
 233: PUSH
 234: LD_INT 5
 236: PUSH
 237: EMPTY
 238: LIST
 239: PUSH
 240: LD_INT 6
 242: PUSH
 243: EMPTY
 244: LIST
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: LIST
 252: LIST
 253: ST_TO_ADDR
// end ; for i := 1 to 8 do
 254: LD_ADDR_VAR 0 2
 258: PUSH
 259: DOUBLE
 260: LD_INT 1
 262: DEC
 263: ST_TO_ADDR
 264: LD_INT 8
 266: PUSH
 267: FOR_TO
 268: IFFALSE 355
// if Multiplayer_GetPlayerIsSpec ( i ) then
 270: LD_VAR 0 2
 274: PPUSH
 275: CALL_OW 530
 279: IFFALSE 353
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 281: LD_ADDR_EXP 18
 285: PUSH
 286: LD_EXP 18
 290: PPUSH
 291: LD_VAR 0 2
 295: PPUSH
 296: LD_INT 0
 298: PPUSH
 299: CALL_OW 1
 303: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 304: LD_ADDR_EXP 17
 308: PUSH
 309: LD_EXP 17
 313: PPUSH
 314: LD_EXP 16
 318: PUSH
 319: LD_VAR 0 2
 323: ARRAY
 324: PPUSH
 325: LD_EXP 17
 329: PUSH
 330: LD_EXP 16
 334: PUSH
 335: LD_VAR 0 2
 339: ARRAY
 340: ARRAY
 341: PUSH
 342: LD_VAR 0 2
 346: DIFF
 347: PPUSH
 348: CALL_OW 1
 352: ST_TO_ADDR
// end ;
 353: GO 267
 355: POP
 356: POP
// Position_Sides := [ 0 , 0 , 0 , 0 , 0 , 0 ] ;
 357: LD_ADDR_EXP 21
 361: PUSH
 362: LD_INT 0
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 0
 370: PUSH
 371: LD_INT 0
 373: PUSH
 374: LD_INT 0
 376: PUSH
 377: LD_INT 0
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: LIST
 387: ST_TO_ADDR
// for i := 1 to 8 do
 388: LD_ADDR_VAR 0 2
 392: PUSH
 393: DOUBLE
 394: LD_INT 1
 396: DEC
 397: ST_TO_ADDR
 398: LD_INT 8
 400: PUSH
 401: FOR_TO
 402: IFFALSE 449
// if Side_Positions [ i ] then
 404: LD_EXP 18
 408: PUSH
 409: LD_VAR 0 2
 413: ARRAY
 414: IFFALSE 447
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 416: LD_ADDR_EXP 21
 420: PUSH
 421: LD_EXP 21
 425: PPUSH
 426: LD_EXP 18
 430: PUSH
 431: LD_VAR 0 2
 435: ARRAY
 436: PPUSH
 437: LD_VAR 0 2
 441: PPUSH
 442: CALL_OW 1
 446: ST_TO_ADDR
 447: GO 401
 449: POP
 450: POP
// Team_Game := Side_Teams [ your_side ] ;
 451: LD_ADDR_EXP 20
 455: PUSH
 456: LD_EXP 16
 460: PUSH
 461: LD_OWVAR 2
 465: ARRAY
 466: ST_TO_ADDR
// if Multiplayer then
 467: LD_OWVAR 4
 471: IFFALSE 717
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 473: LD_ADDR_EXP 42
 477: PUSH
 478: LD_INT 0
 480: PPUSH
 481: CALL_OW 426
 485: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 486: LD_ADDR_EXP 43
 490: PUSH
 491: LD_INT 1
 493: PPUSH
 494: CALL_OW 426
 498: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 499: LD_ADDR_EXP 44
 503: PUSH
 504: LD_INT 2
 506: PPUSH
 507: CALL_OW 426
 511: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 512: LD_ADDR_EXP 45
 516: PUSH
 517: LD_INT 3
 519: PPUSH
 520: CALL_OW 426
 524: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 525: LD_ADDR_EXP 46
 529: PUSH
 530: LD_INT 4
 532: PPUSH
 533: CALL_OW 426
 537: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 538: LD_ADDR_EXP 47
 542: PUSH
 543: LD_INT 5
 545: PPUSH
 546: CALL_OW 426
 550: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 551: LD_ADDR_EXP 48
 555: PUSH
 556: LD_INT 6
 558: PPUSH
 559: CALL_OW 426
 563: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 564: LD_ADDR_EXP 49
 568: PUSH
 569: LD_INT 10
 571: PPUSH
 572: CALL_OW 426
 576: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 577: LD_ADDR_EXP 50
 581: PUSH
 582: LD_INT 11
 584: PPUSH
 585: CALL_OW 426
 589: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 590: LD_ADDR_EXP 51
 594: PUSH
 595: LD_INT 12
 597: PPUSH
 598: CALL_OW 426
 602: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 603: LD_ADDR_EXP 52
 607: PUSH
 608: LD_INT 13
 610: PPUSH
 611: CALL_OW 426
 615: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 616: LD_ADDR_EXP 53
 620: PUSH
 621: LD_INT 14
 623: PPUSH
 624: CALL_OW 426
 628: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 629: LD_ADDR_EXP 1
 633: PUSH
 634: LD_INT 15
 636: PPUSH
 637: CALL_OW 426
 641: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 642: LD_ADDR_EXP 2
 646: PUSH
 647: LD_INT 16
 649: PPUSH
 650: CALL_OW 426
 654: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 655: LD_ADDR_EXP 54
 659: PUSH
 660: LD_INT 17
 662: PPUSH
 663: CALL_OW 426
 667: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 668: LD_ADDR_EXP 55
 672: PUSH
 673: LD_INT 20
 675: PPUSH
 676: CALL_OW 426
 680: ST_TO_ADDR
// def_game_rules := 0 ;
 681: LD_ADDR_EXP 41
 685: PUSH
 686: LD_INT 0
 688: ST_TO_ADDR
// def_sheik := GetMultiplayerSetting ( 22 ) ;
 689: LD_ADDR_EXP 56
 693: PUSH
 694: LD_INT 22
 696: PPUSH
 697: CALL_OW 426
 701: ST_TO_ADDR
// def_mastodont := GetMultiplayerSetting ( 23 ) ;
 702: LD_ADDR_EXP 57
 706: PUSH
 707: LD_INT 23
 709: PPUSH
 710: CALL_OW 426
 714: ST_TO_ADDR
// end else
 715: GO 873
// begin Randomize ;
 717: CALL_OW 10
// def_base_level := 2 ;
 721: LD_ADDR_EXP 42
 725: PUSH
 726: LD_INT 2
 728: ST_TO_ADDR
// def_amount_of_people := 0 ;
 729: LD_ADDR_EXP 43
 733: PUSH
 734: LD_INT 0
 736: ST_TO_ADDR
// def_skill_level := 1 ;
 737: LD_ADDR_EXP 44
 741: PUSH
 742: LD_INT 1
 744: ST_TO_ADDR
// def_starting_resources := 2 ;
 745: LD_ADDR_EXP 45
 749: PUSH
 750: LD_INT 2
 752: ST_TO_ADDR
// def_shipments_density := 1 ;
 753: LD_ADDR_EXP 46
 757: PUSH
 758: LD_INT 1
 760: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
 761: LD_ADDR_EXP 47
 765: PUSH
 766: LD_INT 1
 768: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
 769: LD_ADDR_EXP 48
 773: PUSH
 774: LD_INT 2
 776: ST_TO_ADDR
// def_shared_vision := 1 ;
 777: LD_ADDR_EXP 49
 781: PUSH
 782: LD_INT 1
 784: ST_TO_ADDR
// def_morale_flags := 1 ;
 785: LD_ADDR_EXP 50
 789: PUSH
 790: LD_INT 1
 792: ST_TO_ADDR
// def_siberite_detection := 1 ;
 793: LD_ADDR_EXP 51
 797: PUSH
 798: LD_INT 1
 800: ST_TO_ADDR
// def_people_respawning := 2 ;
 801: LD_ADDR_EXP 52
 805: PUSH
 806: LD_INT 2
 808: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 809: LD_ADDR_EXP 53
 813: PUSH
 814: LD_INT 3
 816: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 817: LD_ADDR_EXP 1
 821: PUSH
 822: LD_INT 0
 824: ST_TO_ADDR
// def_public_score := 0 ;
 825: LD_ADDR_EXP 2
 829: PUSH
 830: LD_INT 0
 832: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 833: LD_ADDR_EXP 54
 837: PUSH
 838: LD_INT 0
 840: ST_TO_ADDR
// def_builduptime := 0 ;
 841: LD_ADDR_EXP 55
 845: PUSH
 846: LD_INT 0
 848: ST_TO_ADDR
// def_game_rules := 0 ;
 849: LD_ADDR_EXP 41
 853: PUSH
 854: LD_INT 0
 856: ST_TO_ADDR
// def_sheik := 0 ;
 857: LD_ADDR_EXP 56
 861: PUSH
 862: LD_INT 0
 864: ST_TO_ADDR
// def_mastodont := 0 ;
 865: LD_ADDR_EXP 57
 869: PUSH
 870: LD_INT 0
 872: ST_TO_ADDR
// end ; InitGameRules ;
 873: CALL 11150 0 0
// if def_game_rules = 0 then
 877: LD_EXP 41
 881: PUSH
 882: LD_INT 0
 884: EQUAL
 885: IFFALSE 897
// begin if isSGUI then
 887: LD_OWVAR 83
 891: IFFALSE 897
// setMpTechs ( ) end ;
 893: CALL 14600 0 0
// if ( Game_Type = 5 ) then
 897: LD_EXP 40
 901: PUSH
 902: LD_INT 5
 904: EQUAL
 905: IFFALSE 934
// begin def_base_level := 1 ;
 907: LD_ADDR_EXP 42
 911: PUSH
 912: LD_INT 1
 914: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 915: LD_ADDR_EXP 47
 919: PUSH
 920: LD_INT 0
 922: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
 923: LD_ADDR_EXP 48
 927: PUSH
 928: LD_INT 0
 930: ST_TO_ADDR
// disable ( 10 ) ;
 931: LD_INT 10
 933: DISABLE_MARKED
// end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 934: LD_ADDR_EXP 3
 938: PUSH
 939: LD_INT 0
 941: PUSH
 942: LD_INT 1
 944: PUSH
 945: LD_INT 1
 947: PUSH
 948: EMPTY
 949: LIST
 950: LIST
 951: LIST
 952: PUSH
 953: LD_EXP 42
 957: PUSH
 958: LD_INT 1
 960: PLUS
 961: ARRAY
 962: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 ] [ def_base_level + 1 ] ;
 963: LD_ADDR_EXP 4
 967: PUSH
 968: LD_INT 0
 970: PUSH
 971: LD_INT 0
 973: PUSH
 974: LD_INT 2
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: LIST
 981: PUSH
 982: LD_EXP 42
 986: PUSH
 987: LD_INT 1
 989: PLUS
 990: ARRAY
 991: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 992: LD_ADDR_EXP 5
 996: PUSH
 997: LD_INT 9
 999: PUSH
1000: LD_INT 12
1002: PUSH
1003: LD_INT 15
1005: PUSH
1006: LD_INT 24
1008: PUSH
1009: EMPTY
1010: LIST
1011: LIST
1012: LIST
1013: LIST
1014: PUSH
1015: LD_EXP 43
1019: PUSH
1020: LD_INT 1
1022: PLUS
1023: ARRAY
1024: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 , 8 ] [ def_skill_level + 1 ] ;
1025: LD_ADDR_EXP 6
1029: PUSH
1030: LD_INT 2
1032: PUSH
1033: LD_INT 3
1035: PUSH
1036: LD_INT 4
1038: PUSH
1039: LD_INT 5
1041: PUSH
1042: LD_INT 8
1044: PUSH
1045: EMPTY
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: PUSH
1052: LD_EXP 44
1056: PUSH
1057: LD_INT 1
1059: PLUS
1060: ARRAY
1061: ST_TO_ADDR
// if ( Game_Type = 5 ) then
1062: LD_EXP 40
1066: PUSH
1067: LD_INT 5
1069: EQUAL
1070: IFFALSE 1188
// begin starting_resources := [ [ 1000 , 100 , 100 ] , [ 2000 , 200 , 200 ] , [ 5000 , 500 , 500 ] , [ 10000 , 1000 , 1000 ] , [ 25000 , 2500 , 2500 ] , [ 50000 , 5000 , 5000 ] ] [ def_starting_resources + 1 ] ;
1072: LD_ADDR_EXP 8
1076: PUSH
1077: LD_INT 1000
1079: PUSH
1080: LD_INT 100
1082: PUSH
1083: LD_INT 100
1085: PUSH
1086: EMPTY
1087: LIST
1088: LIST
1089: LIST
1090: PUSH
1091: LD_INT 2000
1093: PUSH
1094: LD_INT 200
1096: PUSH
1097: LD_INT 200
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: PUSH
1105: LD_INT 5000
1107: PUSH
1108: LD_INT 500
1110: PUSH
1111: LD_INT 500
1113: PUSH
1114: EMPTY
1115: LIST
1116: LIST
1117: LIST
1118: PUSH
1119: LD_INT 10000
1121: PUSH
1122: LD_INT 1000
1124: PUSH
1125: LD_INT 1000
1127: PUSH
1128: EMPTY
1129: LIST
1130: LIST
1131: LIST
1132: PUSH
1133: LD_INT 25000
1135: PUSH
1136: LD_INT 2500
1138: PUSH
1139: LD_INT 2500
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: LIST
1146: PUSH
1147: LD_INT 50000
1149: PUSH
1150: LD_INT 5000
1152: PUSH
1153: LD_INT 5000
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: LIST
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: PUSH
1169: LD_EXP 45
1173: PUSH
1174: LD_INT 1
1176: PLUS
1177: ARRAY
1178: ST_TO_ADDR
// starting_crates := [ ] ;
1179: LD_ADDR_EXP 7
1183: PUSH
1184: EMPTY
1185: ST_TO_ADDR
// end else
1186: GO 1334
// begin starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1188: LD_ADDR_EXP 8
1192: PUSH
1193: LD_INT 0
1195: PUSH
1196: LD_INT 0
1198: PUSH
1199: LD_INT 0
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: LIST
1206: PUSH
1207: LD_INT 30
1209: PUSH
1210: LD_INT 0
1212: PUSH
1213: LD_INT 0
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: LIST
1220: PUSH
1221: LD_INT 50
1223: PUSH
1224: LD_INT 20
1226: PUSH
1227: LD_INT 0
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: LIST
1234: PUSH
1235: LD_INT 80
1237: PUSH
1238: LD_INT 40
1240: PUSH
1241: LD_INT 20
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: LIST
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: PUSH
1255: LD_EXP 45
1259: PUSH
1260: LD_INT 1
1262: PLUS
1263: ARRAY
1264: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1265: LD_ADDR_EXP 7
1269: PUSH
1270: LD_INT 10
1272: PUSH
1273: EMPTY
1274: LIST
1275: PUSH
1276: LD_INT 7
1278: PUSH
1279: LD_INT 14
1281: PUSH
1282: EMPTY
1283: LIST
1284: LIST
1285: PUSH
1286: LD_INT 6
1288: PUSH
1289: LD_INT 12
1291: PUSH
1292: LD_INT 18
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: LIST
1299: PUSH
1300: LD_INT 5
1302: PUSH
1303: LD_INT 10
1305: PUSH
1306: LD_INT 15
1308: PUSH
1309: LD_INT 20
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: PUSH
1324: LD_EXP 45
1328: PUSH
1329: LD_INT 1
1331: PLUS
1332: ARRAY
1333: ST_TO_ADDR
// end ; shipments_density := [ 150 , 125 , 100 , 50 ] [ def_shipments_density + 1 ] ;
1334: LD_ADDR_EXP 9
1338: PUSH
1339: LD_INT 150
1341: PUSH
1342: LD_INT 125
1344: PUSH
1345: LD_INT 100
1347: PUSH
1348: LD_INT 50
1350: PUSH
1351: EMPTY
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: PUSH
1357: LD_EXP 46
1361: PUSH
1362: LD_INT 1
1364: PLUS
1365: ARRAY
1366: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1367: LD_ADDR_EXP 13
1371: PUSH
1372: LD_INT 0
1374: PUSH
1375: LD_INT 10500
1377: PUSH
1378: LD_INT 6300
1380: PUSH
1381: EMPTY
1382: LIST
1383: LIST
1384: LIST
1385: PUSH
1386: LD_EXP 52
1390: PUSH
1391: LD_INT 1
1393: PLUS
1394: ARRAY
1395: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1396: LD_ADDR_EXP 14
1400: PUSH
1401: LD_INT 0
1403: PUSH
1404: LD_INT 31500
1406: PUSH
1407: LD_INT 10500
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: LIST
1414: PUSH
1415: LD_EXP 52
1419: PUSH
1420: LD_INT 1
1422: PLUS
1423: ARRAY
1424: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1425: LD_ADDR_EXP 11
1429: PUSH
1430: LD_INT 0
1432: PUSH
1433: LD_INT 1
1435: PUSH
1436: LD_INT 2
1438: PUSH
1439: LD_INT 3
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: PUSH
1448: LD_EXP 53
1452: PUSH
1453: LD_INT 1
1455: PLUS
1456: ARRAY
1457: ST_TO_ADDR
// amount_of_siberit := [ 30 , 50 , 80 , 100 , 130 , 150 , 200 ] [ def_amount_of_siberit + 1 ] ;
1458: LD_ADDR_EXP 12
1462: PUSH
1463: LD_INT 30
1465: PUSH
1466: LD_INT 50
1468: PUSH
1469: LD_INT 80
1471: PUSH
1472: LD_INT 100
1474: PUSH
1475: LD_INT 130
1477: PUSH
1478: LD_INT 150
1480: PUSH
1481: LD_INT 200
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: PUSH
1493: LD_EXP 1
1497: PUSH
1498: LD_INT 1
1500: PLUS
1501: ARRAY
1502: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1503: LD_ADDR_EXP 10
1507: PUSH
1508: LD_INT 1
1510: NEG
1511: PUSH
1512: LD_INT 350
1514: PUSH
1515: LD_INT 700
1517: PUSH
1518: LD_INT 1400
1520: PUSH
1521: LD_INT 0
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: PUSH
1531: LD_EXP 50
1535: PUSH
1536: LD_INT 1
1538: PLUS
1539: ARRAY
1540: ST_TO_ADDR
// battle_flags_id := [ ] ;
1541: LD_ADDR_EXP 29
1545: PUSH
1546: EMPTY
1547: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1548: LD_ADDR_EXP 15
1552: PUSH
1553: LD_INT 0
1555: PUSH
1556: LD_INT 1
1558: PUSH
1559: LD_INT 63000
1561: PUSH
1562: LD_INT 126000
1564: PUSH
1565: LD_INT 189000
1567: PUSH
1568: LD_INT 252000
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: PUSH
1579: LD_EXP 54
1583: PUSH
1584: LD_INT 1
1586: PLUS
1587: ARRAY
1588: ST_TO_ADDR
// if ( Game_Type = 12 ) then
1589: LD_EXP 40
1593: PUSH
1594: LD_INT 12
1596: EQUAL
1597: IFFALSE 1655
// begin sheik := [ 0 , 1 ] [ def_sheik + 1 ] ;
1599: LD_ADDR_EXP 30
1603: PUSH
1604: LD_INT 0
1606: PUSH
1607: LD_INT 1
1609: PUSH
1610: EMPTY
1611: LIST
1612: LIST
1613: PUSH
1614: LD_EXP 56
1618: PUSH
1619: LD_INT 1
1621: PLUS
1622: ARRAY
1623: ST_TO_ADDR
// mastodont := [ 0 , 1 , 2 ] [ def_mastodont + 1 ] end else
1624: LD_ADDR_EXP 31
1628: PUSH
1629: LD_INT 0
1631: PUSH
1632: LD_INT 1
1634: PUSH
1635: LD_INT 2
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: LIST
1642: PUSH
1643: LD_EXP 57
1647: PUSH
1648: LD_INT 1
1650: PLUS
1651: ARRAY
1652: ST_TO_ADDR
1653: GO 1671
// begin sheik := 0 ;
1655: LD_ADDR_EXP 30
1659: PUSH
1660: LD_INT 0
1662: ST_TO_ADDR
// mastodont := 0 ;
1663: LD_ADDR_EXP 31
1667: PUSH
1668: LD_INT 0
1670: ST_TO_ADDR
// end ; BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
1671: LD_ADDR_EXP 39
1675: PUSH
1676: LD_INT 9
1678: PUSH
1679: LD_INT 10
1681: PUSH
1682: LD_INT 11
1684: PUSH
1685: LD_INT 12
1687: PUSH
1688: LD_INT 13
1690: PUSH
1691: LD_INT 14
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: LIST
1700: LIST
1701: ST_TO_ADDR
// end ;
1702: LD_VAR 0 1
1706: RET
// function init_map ; var i , j ; begin
1707: LD_INT 0
1709: PPUSH
1710: PPUSH
1711: PPUSH
// normal_oil_deposits_locations := [ [ 101 , 187 ] , [ 18 , 26 ] , [ 50 , 89 ] , [ 123 , 3 ] , [ 182 , 69 ] , [ 231 , 174 ] ] ;
1712: LD_ADDR_EXP 25
1716: PUSH
1717: LD_INT 101
1719: PUSH
1720: LD_INT 187
1722: PUSH
1723: EMPTY
1724: LIST
1725: LIST
1726: PUSH
1727: LD_INT 18
1729: PUSH
1730: LD_INT 26
1732: PUSH
1733: EMPTY
1734: LIST
1735: LIST
1736: PUSH
1737: LD_INT 50
1739: PUSH
1740: LD_INT 89
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: PUSH
1747: LD_INT 123
1749: PUSH
1750: LD_INT 3
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: PUSH
1757: LD_INT 182
1759: PUSH
1760: LD_INT 69
1762: PUSH
1763: EMPTY
1764: LIST
1765: LIST
1766: PUSH
1767: LD_INT 231
1769: PUSH
1770: LD_INT 174
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 101 , 187 ] , [ 108 , 183 ] ] , [ [ 18 , 26 ] , [ 7 , 8 ] ] , [ [ 50 , 89 ] , [ 62 , 99 ] ] , [ [ 123 , 3 ] , [ 149 , 18 ] ] , [ [ 182 , 69 ] , [ 202 , 90 ] ] , [ [ 231 , 174 ] , [ 239 , 164 ] ] ] ;
1785: LD_ADDR_EXP 26
1789: PUSH
1790: LD_INT 101
1792: PUSH
1793: LD_INT 187
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: PUSH
1800: LD_INT 108
1802: PUSH
1803: LD_INT 183
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: PUSH
1814: LD_INT 18
1816: PUSH
1817: LD_INT 26
1819: PUSH
1820: EMPTY
1821: LIST
1822: LIST
1823: PUSH
1824: LD_INT 7
1826: PUSH
1827: LD_INT 8
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: PUSH
1834: EMPTY
1835: LIST
1836: LIST
1837: PUSH
1838: LD_INT 50
1840: PUSH
1841: LD_INT 89
1843: PUSH
1844: EMPTY
1845: LIST
1846: LIST
1847: PUSH
1848: LD_INT 62
1850: PUSH
1851: LD_INT 99
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 123
1864: PUSH
1865: LD_INT 3
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: PUSH
1872: LD_INT 149
1874: PUSH
1875: LD_INT 18
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: PUSH
1886: LD_INT 182
1888: PUSH
1889: LD_INT 69
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: PUSH
1896: LD_INT 202
1898: PUSH
1899: LD_INT 90
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: PUSH
1906: EMPTY
1907: LIST
1908: LIST
1909: PUSH
1910: LD_INT 231
1912: PUSH
1913: LD_INT 174
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: PUSH
1920: LD_INT 239
1922: PUSH
1923: LD_INT 164
1925: PUSH
1926: EMPTY
1927: LIST
1928: LIST
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 96 , 185 ] , [ 21 , 29 ] , [ 50 , 85 ] , [ 128 , 2 ] , [ 186 , 72 ] , [ 234 , 174 ] ] ;
1942: LD_ADDR_EXP 27
1946: PUSH
1947: LD_INT 96
1949: PUSH
1950: LD_INT 185
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: PUSH
1957: LD_INT 21
1959: PUSH
1960: LD_INT 29
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: PUSH
1967: LD_INT 50
1969: PUSH
1970: LD_INT 85
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: LD_INT 128
1979: PUSH
1980: LD_INT 2
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: PUSH
1987: LD_INT 186
1989: PUSH
1990: LD_INT 72
1992: PUSH
1993: EMPTY
1994: LIST
1995: LIST
1996: PUSH
1997: LD_INT 234
1999: PUSH
2000: LD_INT 174
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 96 , 185 ] , [ 109 , 179 ] ] , [ [ 21 , 29 ] , [ 9 , 5 ] ] , [ [ 50 , 85 ] , [ 66 , 102 ] ] , [ [ 128 , 2 ] , [ 152 , 15 ] ] , [ [ 186 , 72 ] , [ 200 , 86 ] ] , [ [ 234 , 174 ] , [ 237 , 160 ] ] ] ;
2015: LD_ADDR_EXP 28
2019: PUSH
2020: LD_INT 96
2022: PUSH
2023: LD_INT 185
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: LD_INT 109
2032: PUSH
2033: LD_INT 179
2035: PUSH
2036: EMPTY
2037: LIST
2038: LIST
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PUSH
2044: LD_INT 21
2046: PUSH
2047: LD_INT 29
2049: PUSH
2050: EMPTY
2051: LIST
2052: LIST
2053: PUSH
2054: LD_INT 9
2056: PUSH
2057: LD_INT 5
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: PUSH
2068: LD_INT 50
2070: PUSH
2071: LD_INT 85
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: PUSH
2078: LD_INT 66
2080: PUSH
2081: LD_INT 102
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: PUSH
2092: LD_INT 128
2094: PUSH
2095: LD_INT 2
2097: PUSH
2098: EMPTY
2099: LIST
2100: LIST
2101: PUSH
2102: LD_INT 152
2104: PUSH
2105: LD_INT 15
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: PUSH
2112: EMPTY
2113: LIST
2114: LIST
2115: PUSH
2116: LD_INT 186
2118: PUSH
2119: LD_INT 72
2121: PUSH
2122: EMPTY
2123: LIST
2124: LIST
2125: PUSH
2126: LD_INT 200
2128: PUSH
2129: LD_INT 86
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: PUSH
2140: LD_INT 234
2142: PUSH
2143: LD_INT 174
2145: PUSH
2146: EMPTY
2147: LIST
2148: LIST
2149: PUSH
2150: LD_INT 237
2152: PUSH
2153: LD_INT 160
2155: PUSH
2156: EMPTY
2157: LIST
2158: LIST
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: PUSH
2164: EMPTY
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: ST_TO_ADDR
// depot_def := [ [ 100 , 179 , 0 ] , [ 21 , 18 , 2 ] , [ 65 , 90 , 2 ] , [ 132 , 11 , 1 ] , [ 190 , 82 , 4 ] , [ 230 , 164 , 4 ] ] ;
2172: LD_ADDR_EXP 22
2176: PUSH
2177: LD_INT 100
2179: PUSH
2180: LD_INT 179
2182: PUSH
2183: LD_INT 0
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: LIST
2190: PUSH
2191: LD_INT 21
2193: PUSH
2194: LD_INT 18
2196: PUSH
2197: LD_INT 2
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: LIST
2204: PUSH
2205: LD_INT 65
2207: PUSH
2208: LD_INT 90
2210: PUSH
2211: LD_INT 2
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: LIST
2218: PUSH
2219: LD_INT 132
2221: PUSH
2222: LD_INT 11
2224: PUSH
2225: LD_INT 1
2227: PUSH
2228: EMPTY
2229: LIST
2230: LIST
2231: LIST
2232: PUSH
2233: LD_INT 190
2235: PUSH
2236: LD_INT 82
2238: PUSH
2239: LD_INT 4
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: PUSH
2247: LD_INT 230
2249: PUSH
2250: LD_INT 164
2252: PUSH
2253: LD_INT 4
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: LIST
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: ST_TO_ADDR
// for i in depot_def do
2269: LD_ADDR_VAR 0 2
2273: PUSH
2274: LD_EXP 22
2278: PUSH
2279: FOR_IN
2280: IFFALSE 2354
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 10 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 10 ) ] ] ;
2282: LD_ADDR_EXP 24
2286: PUSH
2287: LD_EXP 24
2291: PUSH
2292: LD_VAR 0 2
2296: PUSH
2297: LD_INT 1
2299: ARRAY
2300: PPUSH
2301: LD_VAR 0 2
2305: PUSH
2306: LD_INT 3
2308: ARRAY
2309: PPUSH
2310: LD_INT 10
2312: PPUSH
2313: CALL_OW 272
2317: PUSH
2318: LD_VAR 0 2
2322: PUSH
2323: LD_INT 2
2325: ARRAY
2326: PPUSH
2327: LD_VAR 0 2
2331: PUSH
2332: LD_INT 3
2334: ARRAY
2335: PPUSH
2336: LD_INT 10
2338: PPUSH
2339: CALL_OW 273
2343: PUSH
2344: EMPTY
2345: LIST
2346: LIST
2347: PUSH
2348: EMPTY
2349: LIST
2350: ADD
2351: ST_TO_ADDR
2352: GO 2279
2354: POP
2355: POP
// breastworks_def := [ [ [ 88 , 154 , 3 ] , [ 105 , 167 , 4 ] ] , [ [ 27 , 32 , 5 ] , [ 40 , 24 , 4 ] ] , [ [ 78 , 102 , 5 ] , [ 74 , 84 , 3 ] ] , [ [ 128 , 20 , 0 ] , [ 122 , 6 , 1 ] ] , [ [ 185 , 92 , 0 ] , [ 175 , 73 , 1 ] ] , [ [ 219 , 171 , 1 ] , [ 219 , 151 , 2 ] ] ] ;
2356: LD_ADDR_EXP 23
2360: PUSH
2361: LD_INT 88
2363: PUSH
2364: LD_INT 154
2366: PUSH
2367: LD_INT 3
2369: PUSH
2370: EMPTY
2371: LIST
2372: LIST
2373: LIST
2374: PUSH
2375: LD_INT 105
2377: PUSH
2378: LD_INT 167
2380: PUSH
2381: LD_INT 4
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: LIST
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: PUSH
2393: LD_INT 27
2395: PUSH
2396: LD_INT 32
2398: PUSH
2399: LD_INT 5
2401: PUSH
2402: EMPTY
2403: LIST
2404: LIST
2405: LIST
2406: PUSH
2407: LD_INT 40
2409: PUSH
2410: LD_INT 24
2412: PUSH
2413: LD_INT 4
2415: PUSH
2416: EMPTY
2417: LIST
2418: LIST
2419: LIST
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: PUSH
2425: LD_INT 78
2427: PUSH
2428: LD_INT 102
2430: PUSH
2431: LD_INT 5
2433: PUSH
2434: EMPTY
2435: LIST
2436: LIST
2437: LIST
2438: PUSH
2439: LD_INT 74
2441: PUSH
2442: LD_INT 84
2444: PUSH
2445: LD_INT 3
2447: PUSH
2448: EMPTY
2449: LIST
2450: LIST
2451: LIST
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: PUSH
2457: LD_INT 128
2459: PUSH
2460: LD_INT 20
2462: PUSH
2463: LD_INT 0
2465: PUSH
2466: EMPTY
2467: LIST
2468: LIST
2469: LIST
2470: PUSH
2471: LD_INT 122
2473: PUSH
2474: LD_INT 6
2476: PUSH
2477: LD_INT 1
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: LIST
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: PUSH
2489: LD_INT 185
2491: PUSH
2492: LD_INT 92
2494: PUSH
2495: LD_INT 0
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: LIST
2502: PUSH
2503: LD_INT 175
2505: PUSH
2506: LD_INT 73
2508: PUSH
2509: LD_INT 1
2511: PUSH
2512: EMPTY
2513: LIST
2514: LIST
2515: LIST
2516: PUSH
2517: EMPTY
2518: LIST
2519: LIST
2520: PUSH
2521: LD_INT 219
2523: PUSH
2524: LD_INT 171
2526: PUSH
2527: LD_INT 1
2529: PUSH
2530: EMPTY
2531: LIST
2532: LIST
2533: LIST
2534: PUSH
2535: LD_INT 219
2537: PUSH
2538: LD_INT 151
2540: PUSH
2541: LD_INT 2
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: LIST
2548: PUSH
2549: EMPTY
2550: LIST
2551: LIST
2552: PUSH
2553: EMPTY
2554: LIST
2555: LIST
2556: LIST
2557: LIST
2558: LIST
2559: LIST
2560: ST_TO_ADDR
// for i = 1 to Side_Positions do
2561: LD_ADDR_VAR 0 2
2565: PUSH
2566: DOUBLE
2567: LD_INT 1
2569: DEC
2570: ST_TO_ADDR
2571: LD_EXP 18
2575: PUSH
2576: FOR_TO
2577: IFFALSE 2707
// begin if not Side_Positions [ i ] then
2579: LD_EXP 18
2583: PUSH
2584: LD_VAR 0 2
2588: ARRAY
2589: NOT
2590: IFFALSE 2594
// continue ;
2592: GO 2576
// if def_extra_oil_deposits then
2594: LD_EXP 47
2598: IFFALSE 2656
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2600: LD_ADDR_VAR 0 3
2604: PUSH
2605: LD_EXP 26
2609: PUSH
2610: LD_EXP 18
2614: PUSH
2615: LD_VAR 0 2
2619: ARRAY
2620: ARRAY
2621: PUSH
2622: FOR_IN
2623: IFFALSE 2652
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2625: LD_VAR 0 3
2629: PUSH
2630: LD_INT 1
2632: ARRAY
2633: PPUSH
2634: LD_VAR 0 3
2638: PUSH
2639: LD_INT 2
2641: ARRAY
2642: PPUSH
2643: LD_INT 2
2645: PPUSH
2646: CALL_OW 62
2650: GO 2622
2652: POP
2653: POP
2654: GO 2705
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2656: LD_EXP 25
2660: PUSH
2661: LD_EXP 18
2665: PUSH
2666: LD_VAR 0 2
2670: ARRAY
2671: ARRAY
2672: PUSH
2673: LD_INT 1
2675: ARRAY
2676: PPUSH
2677: LD_EXP 25
2681: PUSH
2682: LD_EXP 18
2686: PUSH
2687: LD_VAR 0 2
2691: ARRAY
2692: ARRAY
2693: PUSH
2694: LD_INT 2
2696: ARRAY
2697: PPUSH
2698: LD_INT 2
2700: PPUSH
2701: CALL_OW 62
// end ;
2705: GO 2576
2707: POP
2708: POP
// if def_extra_sib_deposits then
2709: LD_EXP 48
2713: IFFALSE 2867
// for i = 1 to Side_Positions do
2715: LD_ADDR_VAR 0 2
2719: PUSH
2720: DOUBLE
2721: LD_INT 1
2723: DEC
2724: ST_TO_ADDR
2725: LD_EXP 18
2729: PUSH
2730: FOR_TO
2731: IFFALSE 2865
// begin if not Side_Positions [ i ] then
2733: LD_EXP 18
2737: PUSH
2738: LD_VAR 0 2
2742: ARRAY
2743: NOT
2744: IFFALSE 2748
// continue ;
2746: GO 2730
// if def_extra_sib_deposits = 2 then
2748: LD_EXP 48
2752: PUSH
2753: LD_INT 2
2755: EQUAL
2756: IFFALSE 2814
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
2758: LD_ADDR_VAR 0 3
2762: PUSH
2763: LD_EXP 28
2767: PUSH
2768: LD_EXP 18
2772: PUSH
2773: LD_VAR 0 2
2777: ARRAY
2778: ARRAY
2779: PUSH
2780: FOR_IN
2781: IFFALSE 2810
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2783: LD_VAR 0 3
2787: PUSH
2788: LD_INT 1
2790: ARRAY
2791: PPUSH
2792: LD_VAR 0 3
2796: PUSH
2797: LD_INT 2
2799: ARRAY
2800: PPUSH
2801: LD_INT 3
2803: PPUSH
2804: CALL_OW 62
2808: GO 2780
2810: POP
2811: POP
2812: GO 2863
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2814: LD_EXP 27
2818: PUSH
2819: LD_EXP 18
2823: PUSH
2824: LD_VAR 0 2
2828: ARRAY
2829: ARRAY
2830: PUSH
2831: LD_INT 1
2833: ARRAY
2834: PPUSH
2835: LD_EXP 27
2839: PUSH
2840: LD_EXP 18
2844: PUSH
2845: LD_VAR 0 2
2849: ARRAY
2850: ARRAY
2851: PUSH
2852: LD_INT 2
2854: ARRAY
2855: PPUSH
2856: LD_INT 3
2858: PPUSH
2859: CALL_OW 62
// end ;
2863: GO 2730
2865: POP
2866: POP
// end ;
2867: LD_VAR 0 1
2871: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2872: LD_INT 0
2874: PPUSH
2875: PPUSH
2876: PPUSH
// if not Team_Game then
2877: LD_EXP 20
2881: NOT
2882: IFFALSE 2980
// begin for i = 1 to 8 do
2884: LD_ADDR_VAR 0 2
2888: PUSH
2889: DOUBLE
2890: LD_INT 1
2892: DEC
2893: ST_TO_ADDR
2894: LD_INT 8
2896: PUSH
2897: FOR_TO
2898: IFFALSE 2976
// for j = 1 to 8 do
2900: LD_ADDR_VAR 0 3
2904: PUSH
2905: DOUBLE
2906: LD_INT 1
2908: DEC
2909: ST_TO_ADDR
2910: LD_INT 8
2912: PUSH
2913: FOR_TO
2914: IFFALSE 2972
// if i <> j then
2916: LD_VAR 0 2
2920: PUSH
2921: LD_VAR 0 3
2925: NONEQUAL
2926: IFFALSE 2950
// SetAttitude ( i , j , att_neutral , true ) else
2928: LD_VAR 0 2
2932: PPUSH
2933: LD_VAR 0 3
2937: PPUSH
2938: LD_INT 0
2940: PPUSH
2941: LD_INT 1
2943: PPUSH
2944: CALL_OW 80
2948: GO 2970
// SetAttitude ( i , j , att_friend , true ) ;
2950: LD_VAR 0 2
2954: PPUSH
2955: LD_VAR 0 3
2959: PPUSH
2960: LD_INT 1
2962: PPUSH
2963: LD_INT 1
2965: PPUSH
2966: CALL_OW 80
2970: GO 2913
2972: POP
2973: POP
2974: GO 2897
2976: POP
2977: POP
// end else
2978: GO 3155
// begin if def_shared_vision then
2980: LD_EXP 49
2984: IFFALSE 3049
// begin for i in Teams do
2986: LD_ADDR_VAR 0 2
2990: PUSH
2991: LD_EXP 17
2995: PUSH
2996: FOR_IN
2997: IFFALSE 3047
// for j = 2 to i do
2999: LD_ADDR_VAR 0 3
3003: PUSH
3004: DOUBLE
3005: LD_INT 2
3007: DEC
3008: ST_TO_ADDR
3009: LD_VAR 0 2
3013: PUSH
3014: FOR_TO
3015: IFFALSE 3043
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
3017: LD_VAR 0 2
3021: PUSH
3022: LD_VAR 0 3
3026: ARRAY
3027: PPUSH
3028: LD_VAR 0 2
3032: PUSH
3033: LD_INT 1
3035: ARRAY
3036: PPUSH
3037: CALL_OW 343
3041: GO 3014
3043: POP
3044: POP
3045: GO 2996
3047: POP
3048: POP
// end ; for i = 1 to 8 do
3049: LD_ADDR_VAR 0 2
3053: PUSH
3054: DOUBLE
3055: LD_INT 1
3057: DEC
3058: ST_TO_ADDR
3059: LD_INT 8
3061: PUSH
3062: FOR_TO
3063: IFFALSE 3153
// for j = 1 to 8 do
3065: LD_ADDR_VAR 0 3
3069: PUSH
3070: DOUBLE
3071: LD_INT 1
3073: DEC
3074: ST_TO_ADDR
3075: LD_INT 8
3077: PUSH
3078: FOR_TO
3079: IFFALSE 3149
// if Side_Teams [ i ] = Side_Teams [ j ] then
3081: LD_EXP 16
3085: PUSH
3086: LD_VAR 0 2
3090: ARRAY
3091: PUSH
3092: LD_EXP 16
3096: PUSH
3097: LD_VAR 0 3
3101: ARRAY
3102: EQUAL
3103: IFFALSE 3127
// SetAttitude ( i , j , att_friend , true ) else
3105: LD_VAR 0 2
3109: PPUSH
3110: LD_VAR 0 3
3114: PPUSH
3115: LD_INT 1
3117: PPUSH
3118: LD_INT 1
3120: PPUSH
3121: CALL_OW 80
3125: GO 3147
// SetAttitude ( i , j , att_enemy , true ) ;
3127: LD_VAR 0 2
3131: PPUSH
3132: LD_VAR 0 3
3136: PPUSH
3137: LD_INT 2
3139: PPUSH
3140: LD_INT 1
3142: PPUSH
3143: CALL_OW 80
3147: GO 3078
3149: POP
3150: POP
3151: GO 3062
3153: POP
3154: POP
// end ; end ;
3155: LD_VAR 0 1
3159: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
3160: LD_INT 0
3162: PPUSH
3163: PPUSH
3164: PPUSH
3165: PPUSH
// result := [ ] ;
3166: LD_ADDR_VAR 0 7
3170: PUSH
3171: EMPTY
3172: ST_TO_ADDR
// for i := 1 to count do
3173: LD_ADDR_VAR 0 8
3177: PUSH
3178: DOUBLE
3179: LD_INT 1
3181: DEC
3182: ST_TO_ADDR
3183: LD_VAR 0 1
3187: PUSH
3188: FOR_TO
3189: IFFALSE 3639
// begin uc_direction := Rand ( 0 , 5 ) ;
3191: LD_ADDR_OWVAR 24
3195: PUSH
3196: LD_INT 0
3198: PPUSH
3199: LD_INT 5
3201: PPUSH
3202: CALL_OW 12
3206: ST_TO_ADDR
// if commander then
3207: LD_LOC 1
3211: IFFALSE 3352
// begin hc_name := mp_sides_players_names [ uc_side ] ;
3213: LD_ADDR_OWVAR 26
3217: PUSH
3218: LD_OWVAR 19
3222: PUSH
3223: LD_OWVAR 20
3227: ARRAY
3228: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3229: LD_INT 1
3231: PPUSH
3232: LD_INT 2
3234: PPUSH
3235: CALL_OW 12
3239: PPUSH
3240: LD_VAR 0 2
3244: PPUSH
3245: LD_EXP 6
3249: PUSH
3250: LD_INT 2
3252: PLUS
3253: PPUSH
3254: CALL_OW 380
// hc_importance := 105 ;
3258: LD_ADDR_OWVAR 32
3262: PUSH
3263: LD_INT 105
3265: ST_TO_ADDR
// commander := false ;
3266: LD_ADDR_LOC 1
3270: PUSH
3271: LD_INT 0
3273: ST_TO_ADDR
// if Multiplayer then
3274: LD_OWVAR 4
3278: IFFALSE 3350
// begin if sheik then
3280: LD_EXP 30
3284: IFFALSE 3312
// begin hc_gallery :=  ;
3286: LD_ADDR_OWVAR 33
3290: PUSH
3291: LD_STRING 
3293: ST_TO_ADDR
// hc_class := class_desert_warior ;
3294: LD_ADDR_OWVAR 28
3298: PUSH
3299: LD_INT 11
3301: ST_TO_ADDR
// hc_sex := sex_male ;
3302: LD_ADDR_OWVAR 27
3306: PUSH
3307: LD_INT 1
3309: ST_TO_ADDR
// end else
3310: GO 3350
// begin hc_gallery := MULTIAVATARS ;
3312: LD_ADDR_OWVAR 33
3316: PUSH
3317: LD_STRING MULTIAVATARS
3319: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3320: LD_ADDR_OWVAR 34
3324: PUSH
3325: LD_OWVAR 20
3329: PPUSH
3330: CALL_OW 525
3334: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3335: LD_ADDR_OWVAR 27
3339: PUSH
3340: LD_OWVAR 20
3344: PPUSH
3345: CALL_OW 526
3349: ST_TO_ADDR
// end ; end ; end else
3350: GO 3415
// begin hc_name :=  ;
3352: LD_ADDR_OWVAR 26
3356: PUSH
3357: LD_STRING 
3359: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3360: LD_INT 1
3362: PPUSH
3363: LD_INT 2
3365: PPUSH
3366: CALL_OW 12
3370: PPUSH
3371: LD_VAR 0 2
3375: PPUSH
3376: LD_EXP 6
3380: PPUSH
3381: CALL_OW 380
// hc_importance := 0 ;
3385: LD_ADDR_OWVAR 32
3389: PUSH
3390: LD_INT 0
3392: ST_TO_ADDR
// if Multiplayer then
3393: LD_OWVAR 4
3397: IFFALSE 3415
// begin hc_gallery :=  ;
3399: LD_ADDR_OWVAR 33
3403: PUSH
3404: LD_STRING 
3406: ST_TO_ADDR
// hc_face_number := 0 ;
3407: LD_ADDR_OWVAR 34
3411: PUSH
3412: LD_INT 0
3414: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3415: LD_ADDR_VAR 0 10
3419: PUSH
3420: CALL_OW 44
3424: ST_TO_ADDR
// if global_defined then
3425: LD_LOC 3
3429: IFFALSE 3569
// begin if ( cl = class_soldier ) then
3431: LD_VAR 0 2
3435: PUSH
3436: LD_INT 1
3438: EQUAL
3439: IFFALSE 3459
// j := i + soldiers_created else
3441: LD_ADDR_VAR 0 9
3445: PUSH
3446: LD_VAR 0 8
3450: PUSH
3451: LD_LOC 4
3455: PLUS
3456: ST_TO_ADDR
3457: GO 3469
// j := i ;
3459: LD_ADDR_VAR 0 9
3463: PUSH
3464: LD_VAR 0 8
3468: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3469: LD_LOC 2
3473: PUSH
3474: LD_VAR 0 2
3478: ARRAY
3479: PUSH
3480: LD_VAR 0 9
3484: ARRAY
3485: PPUSH
3486: LD_VAR 0 10
3490: PPUSH
3491: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3495: LD_VAR 0 10
3499: PPUSH
3500: LD_INT 2
3502: PPUSH
3503: LD_LOC 2
3507: PUSH
3508: LD_VAR 0 2
3512: ARRAY
3513: PUSH
3514: LD_VAR 0 9
3518: ARRAY
3519: PPUSH
3520: LD_INT 2
3522: PPUSH
3523: CALL_OW 260
3527: PPUSH
3528: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3532: LD_VAR 0 10
3536: PPUSH
3537: LD_INT 1
3539: PPUSH
3540: LD_LOC 2
3544: PUSH
3545: LD_VAR 0 2
3549: ARRAY
3550: PUSH
3551: LD_VAR 0 9
3555: ARRAY
3556: PPUSH
3557: LD_INT 1
3559: PPUSH
3560: CALL_OW 260
3564: PPUSH
3565: CALL_OW 239
// end ; if building then
3569: LD_VAR 0 6
3573: IFFALSE 3591
// PlaceHumanInUnit ( un , building ) else
3575: LD_VAR 0 10
3579: PPUSH
3580: LD_VAR 0 6
3584: PPUSH
3585: CALL_OW 52
3589: GO 3618
// PlaceUnitXYR ( un , x , y , r , false ) ;
3591: LD_VAR 0 10
3595: PPUSH
3596: LD_VAR 0 3
3600: PPUSH
3601: LD_VAR 0 4
3605: PPUSH
3606: LD_VAR 0 5
3610: PPUSH
3611: LD_INT 0
3613: PPUSH
3614: CALL_OW 50
// result := result ^ [ un ] ;
3618: LD_ADDR_VAR 0 7
3622: PUSH
3623: LD_VAR 0 7
3627: PUSH
3628: LD_VAR 0 10
3632: PUSH
3633: EMPTY
3634: LIST
3635: ADD
3636: ST_TO_ADDR
// end ;
3637: GO 3188
3639: POP
3640: POP
// if not global_defined then
3641: LD_LOC 3
3645: NOT
3646: IFFALSE 3724
// if ( global_units >= cl ) then
3648: LD_LOC 2
3652: PUSH
3653: LD_VAR 0 2
3657: GREATEREQUAL
3658: IFFALSE 3699
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3660: LD_ADDR_LOC 2
3664: PUSH
3665: LD_LOC 2
3669: PPUSH
3670: LD_VAR 0 2
3674: PPUSH
3675: LD_LOC 2
3679: PUSH
3680: LD_VAR 0 2
3684: ARRAY
3685: PUSH
3686: LD_VAR 0 7
3690: ADD
3691: PPUSH
3692: CALL_OW 1
3696: ST_TO_ADDR
3697: GO 3724
// global_units := Replace ( global_units , cl , result ) ;
3699: LD_ADDR_LOC 2
3703: PUSH
3704: LD_LOC 2
3708: PPUSH
3709: LD_VAR 0 2
3713: PPUSH
3714: LD_VAR 0 7
3718: PPUSH
3719: CALL_OW 1
3723: ST_TO_ADDR
// end ;
3724: LD_VAR 0 7
3728: RET
// function prepare_mastodonts ( n ) ; var i ; begin
3729: LD_INT 0
3731: PPUSH
3732: PPUSH
// uc_side := 0 ;
3733: LD_ADDR_OWVAR 20
3737: PUSH
3738: LD_INT 0
3740: ST_TO_ADDR
// uc_nation := 0 ;
3741: LD_ADDR_OWVAR 21
3745: PUSH
3746: LD_INT 0
3748: ST_TO_ADDR
// vc_chassis := 31 ;
3749: LD_ADDR_OWVAR 37
3753: PUSH
3754: LD_INT 31
3756: ST_TO_ADDR
// vc_control := control_rider ;
3757: LD_ADDR_OWVAR 38
3761: PUSH
3762: LD_INT 4
3764: ST_TO_ADDR
// for i = 1 to n do
3765: LD_ADDR_VAR 0 3
3769: PUSH
3770: DOUBLE
3771: LD_INT 1
3773: DEC
3774: ST_TO_ADDR
3775: LD_VAR 0 1
3779: PUSH
3780: FOR_TO
3781: IFFALSE 3800
// PlaceUnitArea ( CreateVehicle , MastodontSpawn , false ) ;
3783: CALL_OW 45
3787: PPUSH
3788: LD_INT 15
3790: PPUSH
3791: LD_INT 0
3793: PPUSH
3794: CALL_OW 49
3798: GO 3780
3800: POP
3801: POP
// end ;
3802: LD_VAR 0 2
3806: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3807: LD_INT 0
3809: PPUSH
3810: PPUSH
3811: PPUSH
3812: PPUSH
3813: PPUSH
3814: PPUSH
3815: PPUSH
3816: PPUSH
3817: PPUSH
// pos := Side_Positions [ side ] ;
3818: LD_ADDR_VAR 0 3
3822: PUSH
3823: LD_EXP 18
3827: PUSH
3828: LD_VAR 0 1
3832: ARRAY
3833: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3834: LD_ADDR_OWVAR 21
3838: PUSH
3839: LD_EXP 19
3843: PUSH
3844: LD_VAR 0 1
3848: ARRAY
3849: ST_TO_ADDR
// uc_side := side ;
3850: LD_ADDR_OWVAR 20
3854: PUSH
3855: LD_VAR 0 1
3859: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3860: LD_ADDR_VAR 0 4
3864: PUSH
3865: LD_EXP 22
3869: PUSH
3870: LD_VAR 0 3
3874: ARRAY
3875: PUSH
3876: LD_INT 1
3878: ARRAY
3879: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3880: LD_ADDR_VAR 0 5
3884: PUSH
3885: LD_EXP 22
3889: PUSH
3890: LD_VAR 0 3
3894: ARRAY
3895: PUSH
3896: LD_INT 2
3898: ARRAY
3899: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3900: LD_ADDR_VAR 0 6
3904: PUSH
3905: LD_EXP 22
3909: PUSH
3910: LD_VAR 0 3
3914: ARRAY
3915: PUSH
3916: LD_INT 3
3918: ARRAY
3919: ST_TO_ADDR
// if is_depot then
3920: LD_EXP 3
3924: IFFALSE 4057
// begin bc_type = b_depot ;
3926: LD_ADDR_OWVAR 42
3930: PUSH
3931: LD_INT 0
3933: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3934: LD_ADDR_VAR 0 10
3938: PUSH
3939: LD_VAR 0 4
3943: PPUSH
3944: LD_VAR 0 5
3948: PPUSH
3949: LD_VAR 0 6
3953: PPUSH
3954: CALL_OW 47
3958: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3959: LD_VAR 0 10
3963: PPUSH
3964: LD_STRING @
3966: PUSH
3967: LD_VAR 0 1
3971: STR
3972: PPUSH
3973: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3977: LD_VAR 0 10
3981: PPUSH
3982: CALL_OW 274
3986: PPUSH
3987: LD_INT 1
3989: PPUSH
3990: LD_EXP 8
3994: PUSH
3995: LD_INT 1
3997: ARRAY
3998: PPUSH
3999: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
4003: LD_VAR 0 10
4007: PPUSH
4008: CALL_OW 274
4012: PPUSH
4013: LD_INT 2
4015: PPUSH
4016: LD_EXP 8
4020: PUSH
4021: LD_INT 2
4023: ARRAY
4024: PPUSH
4025: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
4029: LD_VAR 0 10
4033: PPUSH
4034: CALL_OW 274
4038: PPUSH
4039: LD_INT 3
4041: PPUSH
4042: LD_EXP 8
4046: PUSH
4047: LD_INT 3
4049: ARRAY
4050: PPUSH
4051: CALL_OW 277
// end else
4055: GO 4201
// begin for i := 1 to 3 do
4057: LD_ADDR_VAR 0 7
4061: PUSH
4062: DOUBLE
4063: LD_INT 1
4065: DEC
4066: ST_TO_ADDR
4067: LD_INT 3
4069: PUSH
4070: FOR_TO
4071: IFFALSE 4199
// begin r := starting_resources [ i ] ;
4073: LD_ADDR_VAR 0 8
4077: PUSH
4078: LD_EXP 8
4082: PUSH
4083: LD_VAR 0 7
4087: ARRAY
4088: ST_TO_ADDR
// while r >= 10 do
4089: LD_VAR 0 8
4093: PUSH
4094: LD_INT 10
4096: GREATEREQUAL
4097: IFFALSE 4197
// if r > 50 then
4099: LD_VAR 0 8
4103: PUSH
4104: LD_INT 50
4106: GREATER
4107: IFFALSE 4153
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
4109: LD_VAR 0 7
4113: PPUSH
4114: LD_INT 5
4116: PPUSH
4117: LD_VAR 0 4
4121: PPUSH
4122: LD_VAR 0 5
4126: PPUSH
4127: LD_INT 4
4129: PPUSH
4130: LD_INT 0
4132: PPUSH
4133: CALL_OW 60
// r := r - 50 ;
4137: LD_ADDR_VAR 0 8
4141: PUSH
4142: LD_VAR 0 8
4146: PUSH
4147: LD_INT 50
4149: MINUS
4150: ST_TO_ADDR
// end else
4151: GO 4195
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
4153: LD_VAR 0 7
4157: PPUSH
4158: LD_VAR 0 8
4162: PUSH
4163: LD_INT 10
4165: DIV
4166: PPUSH
4167: LD_VAR 0 4
4171: PPUSH
4172: LD_VAR 0 5
4176: PPUSH
4177: LD_INT 4
4179: PPUSH
4180: LD_INT 0
4182: PPUSH
4183: CALL_OW 60
// r := 0 ;
4187: LD_ADDR_VAR 0 8
4191: PUSH
4192: LD_INT 0
4194: ST_TO_ADDR
// end ;
4195: GO 4089
// end ;
4197: GO 4070
4199: POP
4200: POP
// end ; for r in starting_crates do
4201: LD_ADDR_VAR 0 8
4205: PUSH
4206: LD_EXP 7
4210: PUSH
4211: FOR_IN
4212: IFFALSE 4244
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
4214: LD_INT 1
4216: PPUSH
4217: LD_INT 5
4219: PPUSH
4220: LD_VAR 0 4
4224: PPUSH
4225: LD_VAR 0 5
4229: PPUSH
4230: LD_VAR 0 8
4234: PPUSH
4235: LD_INT 0
4237: PPUSH
4238: CALL_OW 60
4242: GO 4211
4244: POP
4245: POP
// if def_morale_flags then
4246: LD_EXP 50
4250: IFFALSE 4389
// begin x := start_def [ pos ] [ 1 ] ;
4252: LD_ADDR_VAR 0 4
4256: PUSH
4257: LD_EXP 24
4261: PUSH
4262: LD_VAR 0 3
4266: ARRAY
4267: PUSH
4268: LD_INT 1
4270: ARRAY
4271: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4272: LD_ADDR_VAR 0 5
4276: PUSH
4277: LD_EXP 24
4281: PUSH
4282: LD_VAR 0 3
4286: ARRAY
4287: PUSH
4288: LD_INT 2
4290: ARRAY
4291: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4292: LD_VAR 0 4
4296: PPUSH
4297: LD_VAR 0 5
4301: PPUSH
4302: LD_INT 12
4304: PPUSH
4305: LD_INT 2
4307: PPUSH
4308: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4312: LD_ADDR_EXP 29
4316: PUSH
4317: LD_EXP 29
4321: PUSH
4322: LD_VAR 0 1
4326: PPUSH
4327: LD_VAR 0 4
4331: PPUSH
4332: LD_VAR 0 5
4336: PPUSH
4337: LD_INT 1
4339: PUSH
4340: LD_INT 100
4342: PUSH
4343: EMPTY
4344: LIST
4345: LIST
4346: PUSH
4347: LD_INT 2
4349: PUSH
4350: LD_INT 50
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: PUSH
4357: LD_INT 3
4359: PUSH
4360: LD_INT 20
4362: PUSH
4363: EMPTY
4364: LIST
4365: LIST
4366: PUSH
4367: LD_INT 20
4369: PUSH
4370: LD_INT 100
4372: PUSH
4373: EMPTY
4374: LIST
4375: LIST
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: PPUSH
4383: CALL_OW 418
4387: ADD
4388: ST_TO_ADDR
// end ; commander := true ;
4389: LD_ADDR_LOC 1
4393: PUSH
4394: LD_INT 1
4396: ST_TO_ADDR
// soldiers_created := 0 ;
4397: LD_ADDR_LOC 4
4401: PUSH
4402: LD_INT 0
4404: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4405: LD_ADDR_VAR 0 7
4409: PUSH
4410: DOUBLE
4411: LD_INT 1
4413: DEC
4414: ST_TO_ADDR
4415: LD_EXP 4
4419: PUSH
4420: FOR_TO
4421: IFFALSE 4574
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4423: LD_ADDR_VAR 0 4
4427: PUSH
4428: LD_EXP 23
4432: PUSH
4433: LD_VAR 0 3
4437: ARRAY
4438: PUSH
4439: LD_VAR 0 7
4443: ARRAY
4444: PUSH
4445: LD_INT 1
4447: ARRAY
4448: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4449: LD_ADDR_VAR 0 5
4453: PUSH
4454: LD_EXP 23
4458: PUSH
4459: LD_VAR 0 3
4463: ARRAY
4464: PUSH
4465: LD_VAR 0 7
4469: ARRAY
4470: PUSH
4471: LD_INT 2
4473: ARRAY
4474: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4475: LD_ADDR_VAR 0 6
4479: PUSH
4480: LD_EXP 23
4484: PUSH
4485: LD_VAR 0 3
4489: ARRAY
4490: PUSH
4491: LD_VAR 0 7
4495: ARRAY
4496: PUSH
4497: LD_INT 3
4499: ARRAY
4500: ST_TO_ADDR
// bc_type := b_breastwork ;
4501: LD_ADDR_OWVAR 42
4505: PUSH
4506: LD_INT 31
4508: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4509: LD_ADDR_VAR 0 9
4513: PUSH
4514: LD_VAR 0 4
4518: PPUSH
4519: LD_VAR 0 5
4523: PPUSH
4524: LD_VAR 0 6
4528: PPUSH
4529: CALL_OW 47
4533: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4534: LD_INT 1
4536: PPUSH
4537: LD_INT 1
4539: PPUSH
4540: LD_INT 0
4542: PPUSH
4543: LD_INT 0
4545: PPUSH
4546: LD_INT 0
4548: PPUSH
4549: LD_VAR 0 9
4553: PPUSH
4554: CALL 3160 0 6
// soldiers_created := soldiers_created + 1 ;
4558: LD_ADDR_LOC 4
4562: PUSH
4563: LD_LOC 4
4567: PUSH
4568: LD_INT 1
4570: PLUS
4571: ST_TO_ADDR
// end ;
4572: GO 4420
4574: POP
4575: POP
// x := start_def [ pos ] [ 1 ] ;
4576: LD_ADDR_VAR 0 4
4580: PUSH
4581: LD_EXP 24
4585: PUSH
4586: LD_VAR 0 3
4590: ARRAY
4591: PUSH
4592: LD_INT 1
4594: ARRAY
4595: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4596: LD_ADDR_VAR 0 5
4600: PUSH
4601: LD_EXP 24
4605: PUSH
4606: LD_VAR 0 3
4610: ARRAY
4611: PUSH
4612: LD_INT 2
4614: ARRAY
4615: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4616: LD_LOC 8
4620: PUSH
4621: LD_EXP 4
4625: MINUS
4626: PPUSH
4627: LD_INT 1
4629: PPUSH
4630: LD_VAR 0 4
4634: PPUSH
4635: LD_VAR 0 5
4639: PPUSH
4640: LD_INT 5
4642: PPUSH
4643: LD_INT 0
4645: PPUSH
4646: CALL 3160 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4650: LD_LOC 5
4654: PPUSH
4655: LD_INT 2
4657: PPUSH
4658: LD_VAR 0 4
4662: PPUSH
4663: LD_VAR 0 5
4667: PPUSH
4668: LD_INT 5
4670: PPUSH
4671: LD_INT 0
4673: PPUSH
4674: CALL 3160 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4678: LD_LOC 7
4682: PPUSH
4683: LD_INT 3
4685: PPUSH
4686: LD_VAR 0 4
4690: PPUSH
4691: LD_VAR 0 5
4695: PPUSH
4696: LD_INT 5
4698: PPUSH
4699: LD_INT 0
4701: PPUSH
4702: CALL 3160 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4706: LD_LOC 6
4710: PPUSH
4711: LD_INT 4
4713: PPUSH
4714: LD_VAR 0 4
4718: PPUSH
4719: LD_VAR 0 5
4723: PPUSH
4724: LD_INT 5
4726: PPUSH
4727: LD_INT 0
4729: PPUSH
4730: CALL 3160 0 6
// if def_siberite_detection then
4734: LD_EXP 51
4738: IFFALSE 4755
// SetTech ( tech_SibDet , side , state_researched ) ;
4740: LD_INT 20
4742: PPUSH
4743: LD_VAR 0 1
4747: PPUSH
4748: LD_INT 2
4750: PPUSH
4751: CALL_OW 322
// if def_siberite_bomb = 1 then
4755: LD_EXP 54
4759: PUSH
4760: LD_INT 1
4762: EQUAL
4763: IFFALSE 4797
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4765: LD_INT 25
4767: PPUSH
4768: LD_VAR 0 1
4772: PPUSH
4773: LD_INT 1
4775: PPUSH
4776: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4780: LD_INT 73
4782: PPUSH
4783: LD_VAR 0 1
4787: PPUSH
4788: LD_INT 1
4790: PPUSH
4791: CALL_OW 322
// end else
4795: GO 4827
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4797: LD_INT 25
4799: PPUSH
4800: LD_VAR 0 1
4804: PPUSH
4805: LD_INT 0
4807: PPUSH
4808: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4812: LD_INT 73
4814: PPUSH
4815: LD_VAR 0 1
4819: PPUSH
4820: LD_INT 0
4822: PPUSH
4823: CALL_OW 322
// end ; global_defined := true ;
4827: LD_ADDR_LOC 3
4831: PUSH
4832: LD_INT 1
4834: ST_TO_ADDR
// end ;
4835: LD_VAR 0 2
4839: RET
// every 0 0$1 do
4840: GO 4842
4842: DISABLE
// if ( def_siberite_bomb > 1 ) then
4843: LD_EXP 54
4847: PUSH
4848: LD_INT 1
4850: GREATER
4851: IFFALSE 4866
// begin wait ( siberite_bomb_Delay ) ;
4853: LD_EXP 15
4857: PPUSH
4858: CALL_OW 67
// EnableSibFiss ;
4862: CALL 4867 0 0
// end ;
4866: END
// function EnableSibFiss ; var i ; begin
4867: LD_INT 0
4869: PPUSH
4870: PPUSH
// for i := 1 to 8 do
4871: LD_ADDR_VAR 0 2
4875: PUSH
4876: DOUBLE
4877: LD_INT 1
4879: DEC
4880: ST_TO_ADDR
4881: LD_INT 8
4883: PUSH
4884: FOR_TO
4885: IFFALSE 4931
// if Side_Positions [ i ] then
4887: LD_EXP 18
4891: PUSH
4892: LD_VAR 0 2
4896: ARRAY
4897: IFFALSE 4929
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4899: LD_INT 25
4901: PPUSH
4902: LD_VAR 0 2
4906: PPUSH
4907: LD_INT 1
4909: PPUSH
4910: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4914: LD_INT 73
4916: PPUSH
4917: LD_VAR 0 2
4921: PPUSH
4922: LD_INT 1
4924: PPUSH
4925: CALL_OW 322
// end ;
4929: GO 4884
4931: POP
4932: POP
// end ;
4933: LD_VAR 0 1
4937: RET
// function prepare_sides ; var i ; begin
4938: LD_INT 0
4940: PPUSH
4941: PPUSH
// global_units := [ ] ;
4942: LD_ADDR_LOC 2
4946: PUSH
4947: EMPTY
4948: ST_TO_ADDR
// global_defined := false ;
4949: LD_ADDR_LOC 3
4953: PUSH
4954: LD_INT 0
4956: ST_TO_ADDR
// CountClassMembers ;
4957: CALL 5036 0 0
// for i := 1 to 8 do
4961: LD_ADDR_VAR 0 2
4965: PUSH
4966: DOUBLE
4967: LD_INT 1
4969: DEC
4970: ST_TO_ADDR
4971: LD_INT 8
4973: PUSH
4974: FOR_TO
4975: IFFALSE 5029
// if Side_Positions [ i ] then
4977: LD_EXP 18
4981: PUSH
4982: LD_VAR 0 2
4986: ARRAY
4987: IFFALSE 5027
// begin prepare_side ( i ) ;
4989: LD_VAR 0 2
4993: PPUSH
4994: CALL 3807 0 1
// if ( Game_Type = 12 ) and mastodont > 0 then
4998: LD_EXP 40
5002: PUSH
5003: LD_INT 12
5005: EQUAL
5006: PUSH
5007: LD_EXP 31
5011: PUSH
5012: LD_INT 0
5014: GREATER
5015: AND
5016: IFFALSE 5027
// prepare_mastodonts ( mastodont ) ;
5018: LD_EXP 31
5022: PPUSH
5023: CALL 3729 0 1
// end ;
5027: GO 4974
5029: POP
5030: POP
// end ;
5031: LD_VAR 0 1
5035: RET
// function CountClassMembers ; var Mode ; begin
5036: LD_INT 0
5038: PPUSH
5039: PPUSH
// if No_Mechs then
5040: LD_EXP 58
5044: IFFALSE 5056
// Mode := 2 else
5046: LD_ADDR_VAR 0 2
5050: PUSH
5051: LD_INT 2
5053: ST_TO_ADDR
5054: GO 5064
// Mode := 1 ;
5056: LD_ADDR_VAR 0 2
5060: PUSH
5061: LD_INT 1
5063: ST_TO_ADDR
// neng := number_of_people ;
5064: LD_ADDR_LOC 5
5068: PUSH
5069: LD_EXP 5
5073: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
5074: LD_ADDR_LOC 8
5078: PUSH
5079: LD_LOC 5
5083: PUSH
5084: LD_INT 4
5086: PUSH
5087: LD_INT 3
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: PUSH
5094: LD_VAR 0 2
5098: ARRAY
5099: DIV
5100: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
5101: LD_LOC 8
5105: PUSH
5106: LD_EXP 4
5110: LESS
5111: IFFALSE 5123
// nsol := number_of_breastworks ;
5113: LD_ADDR_LOC 8
5117: PUSH
5118: LD_EXP 4
5122: ST_TO_ADDR
// neng := neng - nsol ;
5123: LD_ADDR_LOC 5
5127: PUSH
5128: LD_LOC 5
5132: PUSH
5133: LD_LOC 8
5137: MINUS
5138: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
5139: LD_ADDR_LOC 6
5143: PUSH
5144: LD_LOC 5
5148: PUSH
5149: LD_INT 3
5151: PUSH
5152: LD_INT 2
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: PUSH
5159: LD_VAR 0 2
5163: ARRAY
5164: DIV
5165: ST_TO_ADDR
// if ( nsci < 1 ) then
5166: LD_LOC 6
5170: PUSH
5171: LD_INT 1
5173: LESS
5174: IFFALSE 5184
// nsci := 1 ;
5176: LD_ADDR_LOC 6
5180: PUSH
5181: LD_INT 1
5183: ST_TO_ADDR
// neng := neng - nsci ;
5184: LD_ADDR_LOC 5
5188: PUSH
5189: LD_LOC 5
5193: PUSH
5194: LD_LOC 6
5198: MINUS
5199: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5200: LD_ADDR_LOC 7
5204: PUSH
5205: LD_LOC 5
5209: PUSH
5210: LD_INT 2
5212: DIV
5213: PUSH
5214: LD_INT 0
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: PUSH
5221: LD_VAR 0 2
5225: ARRAY
5226: ST_TO_ADDR
// neng := neng - nmech ;
5227: LD_ADDR_LOC 5
5231: PUSH
5232: LD_LOC 5
5236: PUSH
5237: LD_LOC 7
5241: MINUS
5242: ST_TO_ADDR
// if ( neng < 1 ) then
5243: LD_LOC 5
5247: PUSH
5248: LD_INT 1
5250: LESS
5251: IFFALSE 5261
// neng := 1 ;
5253: LD_ADDR_LOC 5
5257: PUSH
5258: LD_INT 1
5260: ST_TO_ADDR
// end ;
5261: LD_VAR 0 1
5265: RET
// function Init_Win_Condition ; begin
5266: LD_INT 0
5268: PPUSH
// if Team_Game then
5269: LD_EXP 20
5273: IFFALSE 5280
// enable ( 98 ) else
5275: LD_INT 98
5277: ENABLE_MARKED
5278: GO 5283
// enable ( 99 ) ;
5280: LD_INT 99
5282: ENABLE_MARKED
// case Game_Type of 3 :
5283: LD_EXP 40
5287: PUSH
5288: LD_INT 3
5290: DOUBLE
5291: EQUAL
5292: IFTRUE 5296
5294: GO 5302
5296: POP
// enable ( 100 ) ; end ;
5297: LD_INT 100
5299: ENABLE_MARKED
5300: GO 5303
5302: POP
// end ;
5303: LD_VAR 0 1
5307: RET
// starting begin disable ( 98 ) ;
5308: LD_INT 98
5310: DISABLE_MARKED
// disable ( 99 ) ;
5311: LD_INT 99
5313: DISABLE_MARKED
// disable ( 100 ) ;
5314: LD_INT 100
5316: DISABLE_MARKED
// disable ( 200 ) ;
5317: LD_INT 200
5319: DISABLE_MARKED
// disable ( 400 ) ;
5320: LD_INT 400
5322: DISABLE_MARKED
// disable ( 401 ) ;
5323: LD_INT 401
5325: DISABLE_MARKED
// disable ( 600 ) ;
5326: LD_INT 600
5328: DISABLE_MARKED
// mp_selectmsg := true ;
5329: LD_ADDR_OWVAR 13
5333: PUSH
5334: LD_INT 1
5336: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5337: CALL 0 0 0
// init_map ;
5341: CALL 1707 0 0
// init_respawning ;
5345: CALL 6996 0 0
// set_shared_visions_and_alliances ;
5349: CALL 2872 0 0
// prepare_sides ;
5353: CALL 4938 0 0
// InitLimits ;
5357: CALL 13282 0 0
// ShowTimer ;
5361: CALL 14219 0 0
// if ( Game_Type = 4 ) then
5365: LD_EXP 40
5369: PUSH
5370: LD_INT 4
5372: EQUAL
5373: IFFALSE 5379
// InitBloodGods ;
5375: CALL 10824 0 0
// music_nat := Side_Nations [ your_side ] ;
5379: LD_ADDR_OWVAR 71
5383: PUSH
5384: LD_EXP 19
5388: PUSH
5389: LD_OWVAR 2
5393: ARRAY
5394: ST_TO_ADDR
// if IAmSpec then
5395: CALL_OW 531
5399: IFFALSE 5435
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
5401: LD_INT 0
5403: PPUSH
5404: LD_INT 0
5406: PPUSH
5407: LD_OWVAR 2
5411: PPUSH
5412: LD_INT 32767
5414: NEG
5415: PPUSH
5416: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
5420: LD_INT 104
5422: PPUSH
5423: LD_INT 69
5425: PPUSH
5426: CALL_OW 86
// enable ( 400 ) ;
5430: LD_INT 400
5432: ENABLE_MARKED
// end else
5433: GO 5489
// begin ResetFog ;
5435: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5439: LD_EXP 24
5443: PUSH
5444: LD_EXP 18
5448: PUSH
5449: LD_OWVAR 2
5453: ARRAY
5454: ARRAY
5455: PUSH
5456: LD_INT 1
5458: ARRAY
5459: PPUSH
5460: LD_EXP 24
5464: PUSH
5465: LD_EXP 18
5469: PUSH
5470: LD_OWVAR 2
5474: ARRAY
5475: ARRAY
5476: PUSH
5477: LD_INT 2
5479: ARRAY
5480: PPUSH
5481: CALL_OW 86
// Init_Win_Condition ;
5485: CALL 5266 0 0
// end ; InitApeman ;
5489: CALL 6163 0 0
// if def_builduptime then
5493: LD_EXP 55
5497: IFFALSE 5503
// BeginBuildUp ;
5499: CALL 9428 0 0
// end ; end_of_file
5503: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5504: GO 5506
5506: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5507: LD_INT 4
5509: PPUSH
5510: LD_INT 5
5512: PPUSH
5513: CALL_OW 12
5517: PPUSH
5518: LD_INT 1
5520: PPUSH
5521: CALL_OW 57
// enable ;
5525: ENABLE
// end ;
5526: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5527: GO 5529
5529: DISABLE
5530: LD_INT 0
5532: PPUSH
5533: PPUSH
// begin case tick of 1 .. 1 1$0 :
5534: LD_OWVAR 1
5538: PUSH
5539: LD_INT 1
5541: DOUBLE
5542: GREATEREQUAL
5543: IFFALSE 5551
5545: LD_INT 2100
5547: DOUBLE
5548: LESSEQUAL
5549: IFTRUE 5553
5551: GO 5581
5553: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5554: LD_EXP 9
5558: PUSH
5559: LD_INT 100
5561: DIVREAL
5562: PUSH
5563: LD_INT 350
5565: PPUSH
5566: LD_INT 1050
5568: PPUSH
5569: CALL_OW 12
5573: MUL
5574: PPUSH
5575: CALL_OW 67
5579: GO 5883
5581: LD_INT 2100
5583: PUSH
5584: LD_INT 1
5586: PLUS
5587: DOUBLE
5588: GREATEREQUAL
5589: IFFALSE 5597
5591: LD_INT 10500
5593: DOUBLE
5594: LESSEQUAL
5595: IFTRUE 5599
5597: GO 5627
5599: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5600: LD_EXP 9
5604: PUSH
5605: LD_INT 100
5607: DIVREAL
5608: PUSH
5609: LD_INT 1050
5611: PPUSH
5612: LD_INT 1575
5614: PPUSH
5615: CALL_OW 12
5619: MUL
5620: PPUSH
5621: CALL_OW 67
5625: GO 5883
5627: LD_INT 10500
5629: PUSH
5630: LD_INT 1
5632: PLUS
5633: DOUBLE
5634: GREATEREQUAL
5635: IFFALSE 5643
5637: LD_INT 21000
5639: DOUBLE
5640: LESSEQUAL
5641: IFTRUE 5645
5643: GO 5673
5645: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5646: LD_EXP 9
5650: PUSH
5651: LD_INT 100
5653: DIVREAL
5654: PUSH
5655: LD_INT 1575
5657: PPUSH
5658: LD_INT 2100
5660: PPUSH
5661: CALL_OW 12
5665: MUL
5666: PPUSH
5667: CALL_OW 67
5671: GO 5883
5673: LD_INT 21000
5675: PUSH
5676: LD_INT 1
5678: PLUS
5679: DOUBLE
5680: GREATEREQUAL
5681: IFFALSE 5689
5683: LD_INT 42000
5685: DOUBLE
5686: LESSEQUAL
5687: IFTRUE 5691
5689: GO 5719
5691: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5692: LD_EXP 9
5696: PUSH
5697: LD_INT 100
5699: DIVREAL
5700: PUSH
5701: LD_INT 2100
5703: PPUSH
5704: LD_INT 2625
5706: PPUSH
5707: CALL_OW 12
5711: MUL
5712: PPUSH
5713: CALL_OW 67
5717: GO 5883
5719: LD_INT 42000
5721: PUSH
5722: LD_INT 1
5724: PLUS
5725: DOUBLE
5726: GREATEREQUAL
5727: IFFALSE 5735
5729: LD_INT 63000
5731: DOUBLE
5732: LESSEQUAL
5733: IFTRUE 5737
5735: GO 5765
5737: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5738: LD_EXP 9
5742: PUSH
5743: LD_INT 100
5745: DIVREAL
5746: PUSH
5747: LD_INT 2625
5749: PPUSH
5750: LD_INT 3150
5752: PPUSH
5753: CALL_OW 12
5757: MUL
5758: PPUSH
5759: CALL_OW 67
5763: GO 5883
5765: LD_INT 63000
5767: PUSH
5768: LD_INT 1
5770: PLUS
5771: DOUBLE
5772: GREATEREQUAL
5773: IFFALSE 5781
5775: LD_INT 105000
5777: DOUBLE
5778: LESSEQUAL
5779: IFTRUE 5783
5781: GO 5811
5783: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5784: LD_EXP 9
5788: PUSH
5789: LD_INT 100
5791: DIVREAL
5792: PUSH
5793: LD_INT 3150
5795: PPUSH
5796: LD_INT 3675
5798: PPUSH
5799: CALL_OW 12
5803: MUL
5804: PPUSH
5805: CALL_OW 67
5809: GO 5883
5811: LD_INT 105000
5813: PUSH
5814: LD_INT 1
5816: PLUS
5817: DOUBLE
5818: GREATEREQUAL
5819: IFFALSE 5827
5821: LD_INT 630000
5823: DOUBLE
5824: LESSEQUAL
5825: IFTRUE 5829
5827: GO 5857
5829: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
5830: LD_EXP 9
5834: PUSH
5835: LD_INT 100
5837: DIVREAL
5838: PUSH
5839: LD_INT 3675
5841: PPUSH
5842: LD_INT 4200
5844: PPUSH
5845: CALL_OW 12
5849: MUL
5850: PPUSH
5851: CALL_OW 67
5855: GO 5883
5857: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5858: LD_EXP 9
5862: PUSH
5863: LD_INT 100
5865: DIVREAL
5866: PUSH
5867: LD_INT 4200
5869: PPUSH
5870: LD_INT 5250
5872: PPUSH
5873: CALL_OW 12
5877: MUL
5878: PPUSH
5879: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5883: LD_ADDR_VAR 0 2
5887: PUSH
5888: LD_INT 3
5890: PPUSH
5891: LD_INT 5
5893: PPUSH
5894: CALL_OW 12
5898: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5899: LD_ADDR_VAR 0 1
5903: PUSH
5904: LD_EXP 18
5908: PUSH
5909: LD_INT 0
5911: PUSH
5912: EMPTY
5913: LIST
5914: DIFF
5915: PUSH
5916: FOR_IN
5917: IFFALSE 5966
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5919: LD_VAR 0 2
5923: PPUSH
5924: LD_EXP 24
5928: PUSH
5929: LD_VAR 0 1
5933: ARRAY
5934: PUSH
5935: LD_INT 1
5937: ARRAY
5938: PPUSH
5939: LD_EXP 24
5943: PUSH
5944: LD_VAR 0 1
5948: ARRAY
5949: PUSH
5950: LD_INT 2
5952: ARRAY
5953: PPUSH
5954: LD_INT 20
5956: PPUSH
5957: LD_INT 1
5959: PPUSH
5960: CALL_OW 56
5964: GO 5916
5966: POP
5967: POP
// enable ;
5968: ENABLE
// end ; end_of_file
5969: PPOPN 2
5971: END
// every 20 20$00 trigger apemanNumber do
5972: LD_EXP 32
5976: IFFALSE 6009
5978: GO 5980
5980: DISABLE
// begin enable ;
5981: ENABLE
// if apeLevel >= 8 then
5982: LD_EXP 37
5986: PUSH
5987: LD_INT 8
5989: GREATEREQUAL
5990: IFFALSE 5995
// disable else
5992: DISABLE
5993: GO 6009
// apeLevel := apeLevel + 1 ;
5995: LD_ADDR_EXP 37
5999: PUSH
6000: LD_EXP 37
6004: PUSH
6005: LD_INT 1
6007: PLUS
6008: ST_TO_ADDR
// end ;
6009: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
6010: LD_EXP 32
6014: PUSH
6015: LD_EXP 33
6019: LESS
6020: IFFALSE 6160
6022: GO 6024
6024: DISABLE
6025: LD_INT 0
6027: PPUSH
6028: PPUSH
6029: PPUSH
6030: PPUSH
// begin enable ;
6031: ENABLE
// for i := 1 to apemanPos do
6032: LD_ADDR_VAR 0 1
6036: PUSH
6037: DOUBLE
6038: LD_INT 1
6040: DEC
6041: ST_TO_ADDR
6042: LD_EXP 35
6046: PUSH
6047: FOR_TO
6048: IFFALSE 6158
// begin if apemanPlayerCount [ i ] then
6050: LD_EXP 36
6054: PUSH
6055: LD_VAR 0 1
6059: ARRAY
6060: IFFALSE 6156
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
6062: LD_EXP 36
6066: PUSH
6067: LD_VAR 0 1
6071: ARRAY
6072: PUSH
6073: LD_EXP 35
6077: PUSH
6078: LD_VAR 0 1
6082: ARRAY
6083: GREATER
6084: IFFALSE 6156
// begin ape := PrepareApeman ;
6086: LD_ADDR_VAR 0 2
6090: PUSH
6091: CALL 6671 0 0
6095: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6096: LD_VAR 0 2
6100: PPUSH
6101: LD_EXP 38
6105: PUSH
6106: LD_VAR 0 1
6110: ARRAY
6111: PPUSH
6112: LD_INT 0
6114: PPUSH
6115: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6119: LD_ADDR_EXP 35
6123: PUSH
6124: LD_EXP 35
6128: PPUSH
6129: LD_VAR 0 1
6133: PPUSH
6134: LD_EXP 35
6138: PUSH
6139: LD_VAR 0 1
6143: ARRAY
6144: PUSH
6145: LD_VAR 0 2
6149: UNION
6150: PPUSH
6151: CALL_OW 1
6155: ST_TO_ADDR
// end ; end ; end ;
6156: GO 6047
6158: POP
6159: POP
// end ;
6160: PPOPN 4
6162: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6163: LD_INT 0
6165: PPUSH
6166: PPUSH
6167: PPUSH
6168: PPUSH
6169: PPUSH
6170: PPUSH
6171: PPUSH
// playersAmount := 0 ;
6172: LD_ADDR_VAR 0 3
6176: PUSH
6177: LD_INT 0
6179: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
6180: LD_ADDR_VAR 0 7
6184: PUSH
6185: LD_INT 1
6187: PUSH
6188: LD_INT 2
6190: PUSH
6191: LD_INT 3
6193: PUSH
6194: LD_INT 4
6196: PUSH
6197: LD_INT 5
6199: PUSH
6200: LD_INT 6
6202: PUSH
6203: EMPTY
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6211: LD_ADDR_EXP 38
6215: PUSH
6216: LD_INT 0
6218: PUSH
6219: LD_INT 0
6221: PUSH
6222: LD_INT 0
6224: PUSH
6225: LD_INT 0
6227: PUSH
6228: LD_INT 0
6230: PUSH
6231: LD_INT 0
6233: PUSH
6234: LD_INT 0
6236: PUSH
6237: LD_INT 0
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: ST_TO_ADDR
// for j = 1 to Side_Positions do
6250: LD_ADDR_VAR 0 4
6254: PUSH
6255: DOUBLE
6256: LD_INT 1
6258: DEC
6259: ST_TO_ADDR
6260: LD_EXP 18
6264: PUSH
6265: FOR_TO
6266: IFFALSE 6333
// if Side_Positions [ j ] then
6268: LD_EXP 18
6272: PUSH
6273: LD_VAR 0 4
6277: ARRAY
6278: IFFALSE 6331
// begin playersAmount := playersAmount + 1 ;
6280: LD_ADDR_VAR 0 3
6284: PUSH
6285: LD_VAR 0 3
6289: PUSH
6290: LD_INT 1
6292: PLUS
6293: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6294: LD_ADDR_EXP 38
6298: PUSH
6299: LD_EXP 38
6303: PPUSH
6304: LD_VAR 0 4
6308: PPUSH
6309: LD_VAR 0 7
6313: PUSH
6314: LD_EXP 18
6318: PUSH
6319: LD_VAR 0 4
6323: ARRAY
6324: ARRAY
6325: PPUSH
6326: CALL_OW 1
6330: ST_TO_ADDR
// end ;
6331: GO 6265
6333: POP
6334: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6335: LD_ADDR_EXP 34
6339: PUSH
6340: LD_INT 3
6342: PUSH
6343: LD_EXP 11
6347: MUL
6348: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6349: LD_ADDR_EXP 32
6353: PUSH
6354: LD_VAR 0 3
6358: PUSH
6359: LD_EXP 34
6363: MUL
6364: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6365: LD_ADDR_EXP 33
6369: PUSH
6370: LD_EXP 32
6374: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6375: LD_ADDR_EXP 35
6379: PUSH
6380: LD_INT 0
6382: PUSH
6383: LD_INT 0
6385: PUSH
6386: LD_INT 0
6388: PUSH
6389: LD_INT 0
6391: PUSH
6392: LD_INT 0
6394: PUSH
6395: LD_INT 0
6397: PUSH
6398: LD_INT 0
6400: PUSH
6401: LD_INT 0
6403: PUSH
6404: EMPTY
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6414: LD_ADDR_EXP 36
6418: PUSH
6419: LD_INT 0
6421: PUSH
6422: LD_INT 0
6424: PUSH
6425: LD_INT 0
6427: PUSH
6428: LD_INT 0
6430: PUSH
6431: LD_INT 0
6433: PUSH
6434: LD_INT 0
6436: PUSH
6437: LD_INT 0
6439: PUSH
6440: LD_INT 0
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: LIST
6449: LIST
6450: LIST
6451: LIST
6452: ST_TO_ADDR
// apeLevel := 1 ;
6453: LD_ADDR_EXP 37
6457: PUSH
6458: LD_INT 1
6460: ST_TO_ADDR
// if not apemanNumber then
6461: LD_EXP 32
6465: NOT
6466: IFFALSE 6470
// exit ;
6468: GO 6666
// for i := 1 to apemanPerPlayer do
6470: LD_ADDR_VAR 0 2
6474: PUSH
6475: DOUBLE
6476: LD_INT 1
6478: DEC
6479: ST_TO_ADDR
6480: LD_EXP 34
6484: PUSH
6485: FOR_TO
6486: IFFALSE 6664
// begin for j := 1 to Side_Positions do
6488: LD_ADDR_VAR 0 4
6492: PUSH
6493: DOUBLE
6494: LD_INT 1
6496: DEC
6497: ST_TO_ADDR
6498: LD_EXP 18
6502: PUSH
6503: FOR_TO
6504: IFFALSE 6660
// if Side_Positions [ j ] then
6506: LD_EXP 18
6510: PUSH
6511: LD_VAR 0 4
6515: ARRAY
6516: IFFALSE 6658
// begin pos := Side_Positions [ j ] ;
6518: LD_ADDR_VAR 0 6
6522: PUSH
6523: LD_EXP 18
6527: PUSH
6528: LD_VAR 0 4
6532: ARRAY
6533: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6534: LD_ADDR_EXP 36
6538: PUSH
6539: LD_EXP 36
6543: PPUSH
6544: LD_VAR 0 4
6548: PPUSH
6549: LD_EXP 36
6553: PUSH
6554: LD_VAR 0 4
6558: ARRAY
6559: PUSH
6560: LD_INT 1
6562: PLUS
6563: PPUSH
6564: CALL_OW 1
6568: ST_TO_ADDR
// ape := PrepareApeman ;
6569: LD_ADDR_VAR 0 5
6573: PUSH
6574: CALL 6671 0 0
6578: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6579: LD_ADDR_EXP 35
6583: PUSH
6584: LD_EXP 35
6588: PPUSH
6589: LD_VAR 0 4
6593: PPUSH
6594: LD_EXP 35
6598: PUSH
6599: LD_VAR 0 4
6603: ARRAY
6604: PPUSH
6605: LD_EXP 35
6609: PUSH
6610: LD_VAR 0 4
6614: ARRAY
6615: PUSH
6616: LD_INT 1
6618: PLUS
6619: PPUSH
6620: LD_VAR 0 5
6624: PPUSH
6625: CALL_OW 1
6629: PPUSH
6630: CALL_OW 1
6634: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6635: LD_VAR 0 5
6639: PPUSH
6640: LD_EXP 38
6644: PUSH
6645: LD_VAR 0 4
6649: ARRAY
6650: PPUSH
6651: LD_INT 0
6653: PPUSH
6654: CALL_OW 49
// end ;
6658: GO 6503
6660: POP
6661: POP
// end ;
6662: GO 6485
6664: POP
6665: POP
// end ;
6666: LD_VAR 0 1
6670: RET
// export function PrepareApeman ; var bonus ; begin
6671: LD_INT 0
6673: PPUSH
6674: PPUSH
// uc_side := 0 ;
6675: LD_ADDR_OWVAR 20
6679: PUSH
6680: LD_INT 0
6682: ST_TO_ADDR
// uc_nation := 0 ;
6683: LD_ADDR_OWVAR 21
6687: PUSH
6688: LD_INT 0
6690: ST_TO_ADDR
// InitHc ;
6691: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6695: LD_ADDR_VAR 0 2
6699: PUSH
6700: LD_INT 1
6702: NEG
6703: PUSH
6704: LD_INT 0
6706: PUSH
6707: LD_INT 1
6709: PUSH
6710: EMPTY
6711: LIST
6712: LIST
6713: LIST
6714: PUSH
6715: LD_OWVAR 1
6719: PUSH
6720: LD_INT 3
6722: MOD
6723: PUSH
6724: LD_INT 1
6726: PLUS
6727: ARRAY
6728: ST_TO_ADDR
// hc_class := class_apeman ;
6729: LD_ADDR_OWVAR 28
6733: PUSH
6734: LD_INT 12
6736: ST_TO_ADDR
// hc_gallery :=  ;
6737: LD_ADDR_OWVAR 33
6741: PUSH
6742: LD_STRING 
6744: ST_TO_ADDR
// hc_name :=  ;
6745: LD_ADDR_OWVAR 26
6749: PUSH
6750: LD_STRING 
6752: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6753: LD_ADDR_OWVAR 31
6757: PUSH
6758: LD_EXP 37
6762: PUSH
6763: LD_VAR 0 2
6767: PLUS
6768: PUSH
6769: LD_EXP 37
6773: PUSH
6774: LD_VAR 0 2
6778: PLUS
6779: PUSH
6780: LD_EXP 37
6784: PUSH
6785: LD_VAR 0 2
6789: PLUS
6790: PUSH
6791: LD_EXP 37
6795: PUSH
6796: LD_VAR 0 2
6800: PLUS
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6808: LD_ADDR_OWVAR 35
6812: PUSH
6813: LD_INT 10
6815: PUSH
6816: LD_VAR 0 2
6820: MUL
6821: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6822: LD_ADDR_OWVAR 29
6826: PUSH
6827: LD_INT 12
6829: PUSH
6830: LD_INT 10
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: ST_TO_ADDR
// result := CreateHuman ;
6837: LD_ADDR_VAR 0 1
6841: PUSH
6842: CALL_OW 44
6846: ST_TO_ADDR
// end ;
6847: LD_VAR 0 1
6851: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6852: LD_INT 0
6854: PPUSH
6855: PPUSH
6856: PPUSH
// if not ape then
6857: LD_VAR 0 1
6861: NOT
6862: IFFALSE 6866
// exit ;
6864: GO 6991
// side := GetSide ( ape ) ;
6866: LD_ADDR_VAR 0 3
6870: PUSH
6871: LD_VAR 0 1
6875: PPUSH
6876: CALL_OW 255
6880: ST_TO_ADDR
// if not side then
6881: LD_VAR 0 3
6885: NOT
6886: IFFALSE 6940
// begin for i = 1 to apemanPos do
6888: LD_ADDR_VAR 0 4
6892: PUSH
6893: DOUBLE
6894: LD_INT 1
6896: DEC
6897: ST_TO_ADDR
6898: LD_EXP 35
6902: PUSH
6903: FOR_TO
6904: IFFALSE 6938
// if ape in apemanPos [ i ] then
6906: LD_VAR 0 1
6910: PUSH
6911: LD_EXP 35
6915: PUSH
6916: LD_VAR 0 4
6920: ARRAY
6921: IN
6922: IFFALSE 6936
// begin side := i ;
6924: LD_ADDR_VAR 0 3
6928: PUSH
6929: LD_VAR 0 4
6933: ST_TO_ADDR
// break ;
6934: GO 6938
// end ;
6936: GO 6903
6938: POP
6939: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6940: LD_ADDR_EXP 35
6944: PUSH
6945: LD_EXP 35
6949: PPUSH
6950: LD_VAR 0 3
6954: PPUSH
6955: LD_EXP 35
6959: PUSH
6960: LD_VAR 0 3
6964: ARRAY
6965: PUSH
6966: LD_VAR 0 1
6970: DIFF
6971: PPUSH
6972: CALL_OW 1
6976: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6977: LD_ADDR_EXP 32
6981: PUSH
6982: LD_EXP 32
6986: PUSH
6987: LD_INT 1
6989: MINUS
6990: ST_TO_ADDR
// end ; end_of_file
6991: LD_VAR 0 2
6995: RET
// var respawn , inqueue ; export function init_respawning ; begin
6996: LD_INT 0
6998: PPUSH
// respawn := Rand ( 1 , 8 ) ;
6999: LD_ADDR_LOC 9
7003: PUSH
7004: LD_INT 1
7006: PPUSH
7007: LD_INT 8
7009: PPUSH
7010: CALL_OW 12
7014: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7015: LD_ADDR_LOC 10
7019: PUSH
7020: LD_INT 0
7022: PUSH
7023: LD_INT 0
7025: PUSH
7026: LD_INT 0
7028: PUSH
7029: LD_INT 0
7031: PUSH
7032: LD_INT 0
7034: PUSH
7035: LD_INT 0
7037: PUSH
7038: LD_INT 0
7040: PUSH
7041: LD_INT 0
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: LIST
7053: ST_TO_ADDR
// end ;
7054: LD_VAR 0 1
7058: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
7059: GO 7061
7061: DISABLE
7062: LD_INT 0
7064: PPUSH
7065: PPUSH
7066: PPUSH
// begin if respawning_time_max = 0 then
7067: LD_EXP 14
7071: PUSH
7072: LD_INT 0
7074: EQUAL
7075: IFFALSE 7079
// exit ;
7077: GO 7484
// if respawn = 8 then
7079: LD_LOC 9
7083: PUSH
7084: LD_INT 8
7086: EQUAL
7087: IFFALSE 7099
// respawn := 1 else
7089: LD_ADDR_LOC 9
7093: PUSH
7094: LD_INT 1
7096: ST_TO_ADDR
7097: GO 7113
// respawn := respawn + 1 ;
7099: LD_ADDR_LOC 9
7103: PUSH
7104: LD_LOC 9
7108: PUSH
7109: LD_INT 1
7111: PLUS
7112: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
7113: LD_EXP 18
7117: PUSH
7118: LD_LOC 9
7122: ARRAY
7123: PUSH
7124: LD_LOC 10
7128: PUSH
7129: LD_LOC 9
7133: ARRAY
7134: NOT
7135: AND
7136: IFFALSE 7483
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
7138: LD_ADDR_VAR 0 1
7142: PUSH
7143: LD_INT 21
7145: PUSH
7146: LD_INT 1
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: PUSH
7153: LD_INT 22
7155: PUSH
7156: LD_LOC 9
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: PUSH
7165: LD_INT 3
7167: PUSH
7168: LD_INT 23
7170: PUSH
7171: LD_INT 0
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: PPUSH
7184: CALL_OW 69
7188: ST_TO_ADDR
// if n < number_of_people then
7189: LD_VAR 0 1
7193: PUSH
7194: LD_EXP 5
7198: LESS
7199: IFFALSE 7480
// begin dep := FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , respawn ] ] ) ;
7201: LD_ADDR_VAR 0 2
7205: PUSH
7206: LD_INT 21
7208: PUSH
7209: LD_INT 3
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: PUSH
7216: LD_INT 2
7218: PUSH
7219: LD_INT 30
7221: PUSH
7222: LD_INT 0
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: PUSH
7229: LD_INT 30
7231: PUSH
7232: LD_INT 1
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: LIST
7243: PUSH
7244: LD_INT 50
7246: PUSH
7247: EMPTY
7248: LIST
7249: PUSH
7250: LD_INT 22
7252: PUSH
7253: LD_LOC 9
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: LIST
7266: LIST
7267: PPUSH
7268: CALL_OW 69
7272: ST_TO_ADDR
// if dep then
7273: LD_VAR 0 2
7277: IFFALSE 7477
// begin aktresp := respawn ;
7279: LD_ADDR_VAR 0 3
7283: PUSH
7284: LD_LOC 9
7288: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
7289: LD_ADDR_LOC 10
7293: PUSH
7294: LD_LOC 10
7298: PPUSH
7299: LD_VAR 0 3
7303: PPUSH
7304: LD_INT 1
7306: PPUSH
7307: CALL_OW 1
7311: ST_TO_ADDR
// enable ;
7312: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
7313: LD_EXP 13
7317: PPUSH
7318: LD_EXP 14
7322: PPUSH
7323: CALL_OW 12
7327: PPUSH
7328: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
7332: LD_ADDR_LOC 10
7336: PUSH
7337: LD_LOC 10
7341: PPUSH
7342: LD_VAR 0 3
7346: PPUSH
7347: LD_INT 0
7349: PPUSH
7350: CALL_OW 1
7354: ST_TO_ADDR
// hc_name :=  ;
7355: LD_ADDR_OWVAR 26
7359: PUSH
7360: LD_STRING 
7362: ST_TO_ADDR
// hc_importance := 0 ;
7363: LD_ADDR_OWVAR 32
7367: PUSH
7368: LD_INT 0
7370: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
7371: LD_INT 0
7373: PPUSH
7374: LD_INT 0
7376: PPUSH
7377: LD_EXP 6
7381: PUSH
7382: LD_INT 2
7384: DIV
7385: PPUSH
7386: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
7390: LD_ADDR_OWVAR 21
7394: PUSH
7395: LD_EXP 19
7399: PUSH
7400: LD_VAR 0 3
7404: ARRAY
7405: ST_TO_ADDR
// uc_side := aktresp ;
7406: LD_ADDR_OWVAR 20
7410: PUSH
7411: LD_VAR 0 3
7415: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
7416: LD_ADDR_VAR 0 2
7420: PUSH
7421: LD_VAR 0 2
7425: PUSH
7426: LD_INT 1
7428: PPUSH
7429: LD_VAR 0 2
7433: PPUSH
7434: CALL_OW 12
7438: ARRAY
7439: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
7440: CALL_OW 44
7444: PPUSH
7445: LD_VAR 0 2
7449: PPUSH
7450: CALL_OW 250
7454: PPUSH
7455: LD_VAR 0 2
7459: PPUSH
7460: CALL_OW 251
7464: PPUSH
7465: LD_INT 7
7467: PPUSH
7468: LD_INT 1
7470: PPUSH
7471: CALL_OW 50
// end else
7475: GO 7478
// enable ;
7477: ENABLE
// end else
7478: GO 7481
// enable ;
7480: ENABLE
// end else
7481: GO 7484
// enable ;
7483: ENABLE
// end ; end_of_file
7484: PPOPN 3
7486: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7487: LD_VAR 0 1
7491: PPUSH
7492: CALL_OW 266
7496: PUSH
7497: LD_INT 0
7499: PUSH
7500: LD_INT 1
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: IN
7507: IFFALSE 7532
// SetBName ( b , @ & GetSide ( b ) ) ;
7509: LD_VAR 0 1
7513: PPUSH
7514: LD_STRING @
7516: PUSH
7517: LD_VAR 0 1
7521: PPUSH
7522: CALL_OW 255
7526: STR
7527: PPUSH
7528: CALL_OW 500
// if def_game_rules then
7532: LD_EXP 41
7536: IFFALSE 7573
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
7538: LD_VAR 0 1
7542: PPUSH
7543: LD_VAR 0 1
7547: PPUSH
7548: CALL_OW 266
7552: PPUSH
7553: LD_VAR 0 1
7557: PPUSH
7558: CALL_OW 255
7562: PPUSH
7563: LD_INT 0
7565: PPUSH
7566: LD_INT 1
7568: PPUSH
7569: CALL 13683 0 5
// end ;
7573: PPOPN 2
7575: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7576: LD_VAR 0 1
7580: PPUSH
7581: CALL_OW 266
7585: PUSH
7586: LD_INT 0
7588: PUSH
7589: LD_INT 1
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: IN
7596: IFFALSE 7621
// SetBName ( b , @ & GetSide ( b ) ) ;
7598: LD_VAR 0 1
7602: PPUSH
7603: LD_STRING @
7605: PUSH
7606: LD_VAR 0 1
7610: PPUSH
7611: CALL_OW 255
7615: STR
7616: PPUSH
7617: CALL_OW 500
// if def_game_rules then
7621: LD_EXP 41
7625: IFFALSE 7664
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7627: LD_VAR 0 1
7631: PPUSH
7632: LD_VAR 0 1
7636: PPUSH
7637: CALL_OW 266
7641: PPUSH
7642: LD_VAR 0 1
7646: PPUSH
7647: CALL_OW 255
7651: PPUSH
7652: LD_VAR 0 2
7656: PPUSH
7657: LD_INT 1
7659: PPUSH
7660: CALL 13683 0 5
// end ;
7664: PPOPN 3
7666: END
// on VehicleConstructed ( veh , fac ) do var side ;
7667: LD_INT 0
7669: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7670: LD_VAR 0 1
7674: PPUSH
7675: CALL_OW 263
7679: PUSH
7680: LD_INT 5
7682: EQUAL
7683: IFFALSE 7825
// begin side := GetSide ( veh ) ;
7685: LD_ADDR_VAR 0 3
7689: PUSH
7690: LD_VAR 0 1
7694: PPUSH
7695: CALL_OW 255
7699: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7700: LD_ADDR_EXP 35
7704: PUSH
7705: LD_EXP 35
7709: PPUSH
7710: LD_VAR 0 3
7714: PPUSH
7715: LD_EXP 35
7719: PUSH
7720: LD_VAR 0 3
7724: ARRAY
7725: PPUSH
7726: LD_INT 52
7728: PUSH
7729: EMPTY
7730: LIST
7731: PPUSH
7732: CALL_OW 72
7736: PUSH
7737: LD_INT 22
7739: PUSH
7740: LD_VAR 0 3
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: PUSH
7749: LD_INT 2
7751: PUSH
7752: LD_INT 33
7754: PUSH
7755: LD_INT 5
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: PUSH
7762: LD_INT 25
7764: PUSH
7765: LD_INT 12
7767: PUSH
7768: EMPTY
7769: LIST
7770: LIST
7771: PUSH
7772: LD_INT 25
7774: PUSH
7775: LD_INT 15
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: PUSH
7782: LD_INT 25
7784: PUSH
7785: LD_INT 16
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: PUSH
7792: LD_INT 25
7794: PUSH
7795: LD_INT 17
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PPUSH
7814: CALL_OW 69
7818: UNION
7819: PPUSH
7820: CALL_OW 1
7824: ST_TO_ADDR
// end ; end ;
7825: PPOPN 3
7827: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7828: LD_INT 0
7830: PPUSH
7831: PPUSH
7832: PPUSH
7833: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7834: LD_VAR 0 1
7838: PPUSH
7839: CALL_OW 257
7843: PUSH
7844: LD_INT 12
7846: PUSH
7847: LD_INT 15
7849: PUSH
7850: LD_INT 17
7852: PUSH
7853: LD_INT 16
7855: PUSH
7856: EMPTY
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: IN
7862: PUSH
7863: LD_VAR 0 1
7867: PPUSH
7868: CALL_OW 263
7872: PUSH
7873: LD_INT 5
7875: EQUAL
7876: OR
7877: IFFALSE 7888
// ApeKilled ( j ) ;
7879: LD_VAR 0 1
7883: PPUSH
7884: CALL 6852 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7888: LD_VAR 0 1
7892: PPUSH
7893: CALL_OW 266
7897: PUSH
7898: LD_INT 0
7900: PUSH
7901: LD_INT 1
7903: PUSH
7904: EMPTY
7905: LIST
7906: LIST
7907: IN
7908: IFFALSE 7990
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7910: LD_ADDR_VAR 0 4
7914: PUSH
7915: LD_EXP 18
7919: PUSH
7920: LD_VAR 0 1
7924: PPUSH
7925: CALL_OW 255
7929: ARRAY
7930: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7931: LD_ADDR_VAR 0 2
7935: PUSH
7936: LD_EXP 24
7940: PUSH
7941: LD_VAR 0 4
7945: ARRAY
7946: PUSH
7947: LD_INT 1
7949: ARRAY
7950: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7951: LD_ADDR_VAR 0 3
7955: PUSH
7956: LD_EXP 24
7960: PUSH
7961: LD_VAR 0 4
7965: ARRAY
7966: PUSH
7967: LD_INT 2
7969: ARRAY
7970: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7971: LD_VAR 0 2
7975: PPUSH
7976: LD_VAR 0 3
7980: PPUSH
7981: CALL_OW 420
7985: PPUSH
7986: CALL_OW 419
// end ; if def_game_rules then
7990: LD_EXP 41
7994: IFFALSE 8093
// if ( GetType ( j ) = 3 ) then
7996: LD_VAR 0 1
8000: PPUSH
8001: CALL_OW 247
8005: PUSH
8006: LD_INT 3
8008: EQUAL
8009: IFFALSE 8049
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
8011: LD_VAR 0 1
8015: PPUSH
8016: LD_VAR 0 1
8020: PPUSH
8021: CALL_OW 266
8025: PPUSH
8026: LD_VAR 0 1
8030: PPUSH
8031: CALL_OW 255
8035: PPUSH
8036: LD_INT 0
8038: PPUSH
8039: LD_INT 1
8041: NEG
8042: PPUSH
8043: CALL 13683 0 5
8047: GO 8093
// if ( GetChassis ( j ) = 25 ) then
8049: LD_VAR 0 1
8053: PPUSH
8054: CALL_OW 265
8058: PUSH
8059: LD_INT 25
8061: EQUAL
8062: IFFALSE 8093
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
8064: LD_VAR 0 1
8068: PPUSH
8069: LD_INT 37
8071: PPUSH
8072: LD_VAR 0 1
8076: PPUSH
8077: CALL_OW 255
8081: PPUSH
8082: LD_INT 0
8084: PPUSH
8085: LD_INT 1
8087: NEG
8088: PPUSH
8089: CALL 13683 0 5
// end ;
8093: PPOPN 5
8095: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
8096: LD_EXP 41
8100: PUSH
8101: LD_VAR 0 1
8105: PPUSH
8106: CALL_OW 265
8110: PUSH
8111: LD_INT 25
8113: EQUAL
8114: AND
8115: IFFALSE 8147
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
8117: LD_VAR 0 1
8121: PPUSH
8122: LD_INT 37
8124: PPUSH
8125: LD_VAR 0 1
8129: PPUSH
8130: CALL_OW 255
8134: PPUSH
8135: LD_VAR 0 3
8139: PPUSH
8140: LD_INT 1
8142: PPUSH
8143: CALL 13683 0 5
// end ;
8147: PPOPN 4
8149: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
8150: LD_VAR 0 1
8154: PPUSH
8155: LD_VAR 0 2
8159: PPUSH
8160: LD_VAR 0 3
8164: PPUSH
8165: LD_OWVAR 2
8169: PPUSH
8170: CALL 14361 0 4
8174: PPOPN 3
8176: END
// function CanWinLoose ; begin
8177: LD_INT 0
8179: PPUSH
// Result := true ;
8180: LD_ADDR_VAR 0 1
8184: PUSH
8185: LD_INT 1
8187: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8188: CALL_OW 518
8192: PUSH
8193: CALL_OW 519
8197: PUSH
8198: LD_INT 0
8200: GREATER
8201: AND
8202: IFFALSE 8212
// Result := false ;
8204: LD_ADDR_VAR 0 1
8208: PUSH
8209: LD_INT 0
8211: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8212: CALL_OW 531
8216: PUSH
8217: CALL_OW 519
8221: PUSH
8222: LD_INT 1
8224: GREATER
8225: AND
8226: IFFALSE 8236
// Result := false ;
8228: LD_ADDR_VAR 0 1
8232: PUSH
8233: LD_INT 0
8235: ST_TO_ADDR
// end ;
8236: LD_VAR 0 1
8240: RET
// function HasPower ( i ) ; begin
8241: LD_INT 0
8243: PPUSH
// if def_people_respawning then
8244: LD_EXP 52
8248: IFFALSE 8339
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8250: LD_ADDR_VAR 0 2
8254: PUSH
8255: LD_INT 22
8257: PUSH
8258: LD_VAR 0 1
8262: PUSH
8263: EMPTY
8264: LIST
8265: LIST
8266: PUSH
8267: LD_INT 2
8269: PUSH
8270: LD_INT 21
8272: PUSH
8273: LD_INT 1
8275: PUSH
8276: EMPTY
8277: LIST
8278: LIST
8279: PUSH
8280: LD_INT 33
8282: PUSH
8283: LD_INT 3
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PUSH
8290: LD_INT 33
8292: PUSH
8293: LD_INT 5
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: PUSH
8300: LD_INT 30
8302: PUSH
8303: LD_INT 0
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: PUSH
8310: LD_INT 30
8312: PUSH
8313: LD_INT 1
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: PPUSH
8332: CALL_OW 69
8336: ST_TO_ADDR
8337: GO 8404
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
8339: LD_ADDR_VAR 0 2
8343: PUSH
8344: LD_INT 22
8346: PUSH
8347: LD_VAR 0 1
8351: PUSH
8352: EMPTY
8353: LIST
8354: LIST
8355: PUSH
8356: LD_INT 2
8358: PUSH
8359: LD_INT 21
8361: PUSH
8362: LD_INT 1
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: PUSH
8369: LD_INT 33
8371: PUSH
8372: LD_INT 3
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: PUSH
8379: LD_INT 33
8381: PUSH
8382: LD_INT 5
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: LIST
8393: LIST
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: PPUSH
8399: CALL_OW 69
8403: ST_TO_ADDR
// end ;
8404: LD_VAR 0 2
8408: RET
// function AlliedSides ( i , j ) ; begin
8409: LD_INT 0
8411: PPUSH
// Result := false ;
8412: LD_ADDR_VAR 0 3
8416: PUSH
8417: LD_INT 0
8419: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8420: LD_VAR 0 1
8424: PPUSH
8425: LD_VAR 0 2
8429: PPUSH
8430: CALL_OW 81
8434: PUSH
8435: LD_INT 1
8437: EQUAL
8438: PUSH
8439: LD_VAR 0 2
8443: PPUSH
8444: LD_VAR 0 1
8448: PPUSH
8449: CALL_OW 81
8453: PUSH
8454: LD_INT 1
8456: EQUAL
8457: AND
8458: PUSH
8459: LD_VAR 0 1
8463: PPUSH
8464: CALL_OW 83
8468: AND
8469: PUSH
8470: LD_VAR 0 2
8474: PPUSH
8475: CALL_OW 83
8479: AND
8480: IFFALSE 8490
// Result := true ;
8482: LD_ADDR_VAR 0 3
8486: PUSH
8487: LD_INT 1
8489: ST_TO_ADDR
// end ;
8490: LD_VAR 0 3
8494: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
8495: CALL 8177 0 0
8499: IFFALSE 8508
8501: GO 8503
8503: DISABLE
// YouLostInMultiplayer ;
8504: CALL_OW 107
8508: END
// every 0 0$3 trigger CanWinLoose marked 401 do
8509: CALL 8177 0 0
8513: IFFALSE 8537
8515: GO 8517
8517: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
8518: LD_EXP 19
8522: PUSH
8523: LD_OWVAR 2
8527: ARRAY
8528: PPUSH
8529: CALL 14403 0 1
// YouWinInMultiplayer ;
8533: CALL_OW 106
// end ;
8537: END
// every 0 0$3 marked 98 do var i , CanWin ;
8538: GO 8540
8540: DISABLE
8541: LD_INT 0
8543: PPUSH
8544: PPUSH
// begin if not HasPower ( your_side ) then
8545: LD_OWVAR 2
8549: PPUSH
8550: CALL 8241 0 1
8554: NOT
8555: IFFALSE 8566
// begin Multiplayer_Loose_Message ;
8557: CALL_OW 521
// enable ( 400 ) ;
8561: LD_INT 400
8563: ENABLE_MARKED
// end else
8564: GO 8699
// begin CanWin := true ;
8566: LD_ADDR_VAR 0 2
8570: PUSH
8571: LD_INT 1
8573: ST_TO_ADDR
// for i := 1 to 8 do
8574: LD_ADDR_VAR 0 1
8578: PUSH
8579: DOUBLE
8580: LD_INT 1
8582: DEC
8583: ST_TO_ADDR
8584: LD_INT 8
8586: PUSH
8587: FOR_TO
8588: IFFALSE 8685
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8590: LD_EXP 18
8594: PUSH
8595: LD_VAR 0 1
8599: ARRAY
8600: PUSH
8601: LD_VAR 0 1
8605: PPUSH
8606: CALL_OW 108
8610: AND
8611: PUSH
8612: LD_VAR 0 1
8616: PUSH
8617: LD_OWVAR 2
8621: NONEQUAL
8622: AND
8623: IFFALSE 8683
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
8625: LD_EXP 16
8629: PUSH
8630: LD_VAR 0 1
8634: ARRAY
8635: NOT
8636: PUSH
8637: LD_EXP 16
8641: PUSH
8642: LD_VAR 0 1
8646: ARRAY
8647: PUSH
8648: LD_EXP 16
8652: PUSH
8653: LD_OWVAR 2
8657: ARRAY
8658: NONEQUAL
8659: OR
8660: IFFALSE 8683
// if HasPower ( i ) then
8662: LD_VAR 0 1
8666: PPUSH
8667: CALL 8241 0 1
8671: IFFALSE 8683
// begin CanWin := false ;
8673: LD_ADDR_VAR 0 2
8677: PUSH
8678: LD_INT 0
8680: ST_TO_ADDR
// break ;
8681: GO 8685
// end ;
8683: GO 8587
8685: POP
8686: POP
// if CanWin then
8687: LD_VAR 0 2
8691: IFFALSE 8698
// enable ( 401 ) else
8693: LD_INT 401
8695: ENABLE_MARKED
8696: GO 8699
// enable ;
8698: ENABLE
// end ; end ;
8699: PPOPN 2
8701: END
// every 0 0$3 marked 99 do var i , CanWin ;
8702: GO 8704
8704: DISABLE
8705: LD_INT 0
8707: PPUSH
8708: PPUSH
// begin if not HasPower ( your_side ) then
8709: LD_OWVAR 2
8713: PPUSH
8714: CALL 8241 0 1
8718: NOT
8719: IFFALSE 8730
// begin Multiplayer_Loose_Message ;
8721: CALL_OW 521
// enable ( 400 ) ;
8725: LD_INT 400
8727: ENABLE_MARKED
// end else
8728: GO 8843
// begin CanWin := true ;
8730: LD_ADDR_VAR 0 2
8734: PUSH
8735: LD_INT 1
8737: ST_TO_ADDR
// for i := 1 to 8 do
8738: LD_ADDR_VAR 0 1
8742: PUSH
8743: DOUBLE
8744: LD_INT 1
8746: DEC
8747: ST_TO_ADDR
8748: LD_INT 8
8750: PUSH
8751: FOR_TO
8752: IFFALSE 8829
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8754: LD_EXP 18
8758: PUSH
8759: LD_VAR 0 1
8763: ARRAY
8764: PUSH
8765: LD_VAR 0 1
8769: PPUSH
8770: CALL_OW 108
8774: AND
8775: PUSH
8776: LD_VAR 0 1
8780: PUSH
8781: LD_OWVAR 2
8785: NONEQUAL
8786: AND
8787: IFFALSE 8827
// if not AlliedSides ( i , your_side ) then
8789: LD_VAR 0 1
8793: PPUSH
8794: LD_OWVAR 2
8798: PPUSH
8799: CALL 8409 0 2
8803: NOT
8804: IFFALSE 8827
// if HasPower ( i ) then
8806: LD_VAR 0 1
8810: PPUSH
8811: CALL 8241 0 1
8815: IFFALSE 8827
// begin CanWin := false ;
8817: LD_ADDR_VAR 0 2
8821: PUSH
8822: LD_INT 0
8824: ST_TO_ADDR
// break ;
8825: GO 8829
// end ;
8827: GO 8751
8829: POP
8830: POP
// if CanWin then
8831: LD_VAR 0 2
8835: IFFALSE 8842
// enable ( 401 ) else
8837: LD_INT 401
8839: ENABLE_MARKED
8840: GO 8843
// enable ;
8842: ENABLE
// end ; end ; end_of_file
8843: PPOPN 2
8845: END
// every 0 0$1 marked 100 do var i , base , pom , filter , sib_mined ;
8846: GO 8848
8848: DISABLE
8849: LD_INT 0
8851: PPUSH
8852: PPUSH
8853: PPUSH
8854: PPUSH
8855: PPUSH
// begin sib_mined := [ ] ;
8856: LD_ADDR_VAR 0 5
8860: PUSH
8861: EMPTY
8862: ST_TO_ADDR
// for i := 1 to 8 do
8863: LD_ADDR_VAR 0 1
8867: PUSH
8868: DOUBLE
8869: LD_INT 1
8871: DEC
8872: ST_TO_ADDR
8873: LD_INT 8
8875: PUSH
8876: FOR_TO
8877: IFFALSE 9033
// if Side_Positions [ i ] then
8879: LD_EXP 18
8883: PUSH
8884: LD_VAR 0 1
8888: ARRAY
8889: IFFALSE 9017
// begin filter := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8891: LD_ADDR_VAR 0 4
8895: PUSH
8896: LD_INT 22
8898: PUSH
8899: LD_VAR 0 1
8903: PUSH
8904: EMPTY
8905: LIST
8906: LIST
8907: PUSH
8908: LD_INT 2
8910: PUSH
8911: LD_INT 30
8913: PUSH
8914: LD_INT 0
8916: PUSH
8917: EMPTY
8918: LIST
8919: LIST
8920: PUSH
8921: LD_INT 30
8923: PUSH
8924: LD_INT 1
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: LIST
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: PPUSH
8940: CALL_OW 69
8944: ST_TO_ADDR
// pom := 0 ;
8945: LD_ADDR_VAR 0 3
8949: PUSH
8950: LD_INT 0
8952: ST_TO_ADDR
// for base in filter do
8953: LD_ADDR_VAR 0 2
8957: PUSH
8958: LD_VAR 0 4
8962: PUSH
8963: FOR_IN
8964: IFFALSE 8997
// pom := pom + GetResourceType ( GetBase ( base ) , mat_siberit ) ;
8966: LD_ADDR_VAR 0 3
8970: PUSH
8971: LD_VAR 0 3
8975: PUSH
8976: LD_VAR 0 2
8980: PPUSH
8981: CALL_OW 274
8985: PPUSH
8986: LD_INT 3
8988: PPUSH
8989: CALL_OW 275
8993: PLUS
8994: ST_TO_ADDR
8995: GO 8963
8997: POP
8998: POP
// sib_mined := sib_mined ^ pom ;
8999: LD_ADDR_VAR 0 5
9003: PUSH
9004: LD_VAR 0 5
9008: PUSH
9009: LD_VAR 0 3
9013: ADD
9014: ST_TO_ADDR
// end else
9015: GO 9031
// sib_mined := sib_mined ^ 0 ;
9017: LD_ADDR_VAR 0 5
9021: PUSH
9022: LD_VAR 0 5
9026: PUSH
9027: LD_INT 0
9029: ADD
9030: ST_TO_ADDR
9031: GO 8876
9033: POP
9034: POP
// if not def_public_score then
9035: LD_EXP 2
9039: NOT
9040: IFFALSE 9130
// begin ExtraStrings := [ ] ;
9042: LD_ADDR_EXP 59
9046: PUSH
9047: EMPTY
9048: ST_TO_ADDR
// for i := 1 to 8 do
9049: LD_ADDR_VAR 0 1
9053: PUSH
9054: DOUBLE
9055: LD_INT 1
9057: DEC
9058: ST_TO_ADDR
9059: LD_INT 8
9061: PUSH
9062: FOR_TO
9063: IFFALSE 9126
// if Side_Positions [ i ] then
9065: LD_EXP 18
9069: PUSH
9070: LD_VAR 0 1
9074: ARRAY
9075: IFFALSE 9124
// ExtraStrings := ExtraStrings ^ [ #AlienBase-MinedPublic , i , i , sib_mined [ i ] , amount_of_siberit ] ;
9077: LD_ADDR_EXP 59
9081: PUSH
9082: LD_EXP 59
9086: PUSH
9087: LD_STRING #AlienBase-MinedPublic
9089: PUSH
9090: LD_VAR 0 1
9094: PUSH
9095: LD_VAR 0 1
9099: PUSH
9100: LD_VAR 0 5
9104: PUSH
9105: LD_VAR 0 1
9109: ARRAY
9110: PUSH
9111: LD_EXP 12
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: ADD
9123: ST_TO_ADDR
9124: GO 9062
9126: POP
9127: POP
// end else
9128: GO 9159
// ExtraStrings := [ #AlienBase-Mined , sib_mined [ Your_Side ] , amount_of_siberit ] ;
9130: LD_ADDR_EXP 59
9134: PUSH
9135: LD_STRING #AlienBase-Mined
9137: PUSH
9138: LD_VAR 0 5
9142: PUSH
9143: LD_OWVAR 2
9147: ARRAY
9148: PUSH
9149: LD_EXP 12
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: LIST
9158: ST_TO_ADDR
// for i := 1 to 8 do
9159: LD_ADDR_VAR 0 1
9163: PUSH
9164: DOUBLE
9165: LD_INT 1
9167: DEC
9168: ST_TO_ADDR
9169: LD_INT 8
9171: PUSH
9172: FOR_TO
9173: IFFALSE 9230
// if sib_mined [ i ] >= amount_of_siberit then
9175: LD_VAR 0 5
9179: PUSH
9180: LD_VAR 0 1
9184: ARRAY
9185: PUSH
9186: LD_EXP 12
9190: GREATEREQUAL
9191: IFFALSE 9228
// begin wait ( 0 0$1 ) ;
9193: LD_INT 35
9195: PPUSH
9196: CALL_OW 67
// if sib_mined [ your_side ] >= amount_of_siberit then
9200: LD_VAR 0 5
9204: PUSH
9205: LD_OWVAR 2
9209: ARRAY
9210: PUSH
9211: LD_EXP 12
9215: GREATEREQUAL
9216: IFFALSE 9224
// YouWinInMultiplayer else
9218: CALL_OW 106
9222: GO 9228
// YouLostInMultiplayer ;
9224: CALL_OW 107
// end ;
9228: GO 9172
9230: POP
9231: POP
// enable ;
9232: ENABLE
// end ; end_of_file
9233: PPOPN 5
9235: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
9236: LD_INT 0
9238: PPUSH
9239: PPUSH
// for un in battle_flags_id do
9240: LD_ADDR_VAR 0 2
9244: PUSH
9245: LD_EXP 29
9249: PUSH
9250: FOR_IN
9251: IFFALSE 9326
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
9253: LD_VAR 0 2
9257: PPUSH
9258: LD_INT 1
9260: PUSH
9261: LD_LOC 11
9265: PUSH
9266: EMPTY
9267: LIST
9268: LIST
9269: PUSH
9270: LD_INT 2
9272: PUSH
9273: LD_LOC 11
9277: PUSH
9278: LD_INT 2
9280: DIV
9281: PUSH
9282: EMPTY
9283: LIST
9284: LIST
9285: PUSH
9286: LD_INT 3
9288: PUSH
9289: LD_LOC 11
9293: PUSH
9294: LD_INT 5
9296: DIV
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
9301: PUSH
9302: LD_INT 20
9304: PUSH
9305: LD_LOC 11
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: PUSH
9314: EMPTY
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: PPUSH
9320: CALL_OW 423
9324: GO 9250
9326: POP
9327: POP
// end ;
9328: LD_VAR 0 1
9332: RET
// every 1 do var un ;
9333: GO 9335
9335: DISABLE
9336: LD_INT 0
9338: PPUSH
// begin if not def_morale_flags then
9339: LD_EXP 50
9343: NOT
9344: IFFALSE 9348
// exit ;
9346: GO 9425
// if not morale_decreasing_time then
9348: LD_EXP 10
9352: NOT
9353: IFFALSE 9357
// exit ;
9355: GO 9425
// strength = 100 ;
9357: LD_ADDR_LOC 11
9361: PUSH
9362: LD_INT 100
9364: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
9365: LD_EXP 10
9369: PPUSH
9370: CALL_OW 67
// strength := strength - 1 ;
9374: LD_ADDR_LOC 11
9378: PUSH
9379: LD_LOC 11
9383: PUSH
9384: LD_INT 1
9386: MINUS
9387: ST_TO_ADDR
// Update_Flags ;
9388: CALL 9236 0 0
// until not strength ;
9392: LD_LOC 11
9396: NOT
9397: IFFALSE 9365
// for un in battle_flags_id do
9399: LD_ADDR_VAR 0 1
9403: PUSH
9404: LD_EXP 29
9408: PUSH
9409: FOR_IN
9410: IFFALSE 9423
// KillBattleFlag ( un ) ;
9412: LD_VAR 0 1
9416: PPUSH
9417: CALL_OW 419
9421: GO 9409
9423: POP
9424: POP
// end ; end_of_file
9425: PPOPN 1
9427: END
// export BuildUpAreas ; export function BeginBuildUp ; var i , j ; begin
9428: LD_INT 0
9430: PPUSH
9431: PPUSH
9432: PPUSH
// enable ( 600 ) ;
9433: LD_INT 600
9435: ENABLE_MARKED
// for i := 1 to BuildUpAreas do
9436: LD_ADDR_VAR 0 2
9440: PUSH
9441: DOUBLE
9442: LD_INT 1
9444: DEC
9445: ST_TO_ADDR
9446: LD_EXP 39
9450: PUSH
9451: FOR_TO
9452: IFFALSE 9607
// if Position_Sides [ i ] then
9454: LD_EXP 21
9458: PUSH
9459: LD_VAR 0 2
9463: ARRAY
9464: IFFALSE 9605
// for j := 1 to 8 do
9466: LD_ADDR_VAR 0 3
9470: PUSH
9471: DOUBLE
9472: LD_INT 1
9474: DEC
9475: ST_TO_ADDR
9476: LD_INT 8
9478: PUSH
9479: FOR_TO
9480: IFFALSE 9603
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
9482: LD_EXP 18
9486: PUSH
9487: LD_VAR 0 3
9491: ARRAY
9492: PUSH
9493: LD_EXP 16
9497: PUSH
9498: LD_EXP 21
9502: PUSH
9503: LD_VAR 0 2
9507: ARRAY
9508: ARRAY
9509: PUSH
9510: LD_EXP 16
9514: PUSH
9515: LD_VAR 0 3
9519: ARRAY
9520: NONEQUAL
9521: PUSH
9522: LD_EXP 20
9526: NOT
9527: PUSH
9528: LD_EXP 21
9532: PUSH
9533: LD_VAR 0 2
9537: ARRAY
9538: PUSH
9539: LD_VAR 0 3
9543: NONEQUAL
9544: AND
9545: OR
9546: AND
9547: IFFALSE 9571
// HideArea ( j , BuildUpAreas [ i ] ) else
9549: LD_VAR 0 3
9553: PPUSH
9554: LD_EXP 39
9558: PUSH
9559: LD_VAR 0 2
9563: ARRAY
9564: PPUSH
9565: CALL_OW 333
9569: GO 9601
// if ( j = your_side ) then
9571: LD_VAR 0 3
9575: PUSH
9576: LD_OWVAR 2
9580: EQUAL
9581: IFFALSE 9601
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
9583: LD_EXP 39
9587: PUSH
9588: LD_VAR 0 2
9592: ARRAY
9593: PPUSH
9594: LD_INT 5
9596: PPUSH
9597: CALL_OW 424
9601: GO 9479
9603: POP
9604: POP
9605: GO 9451
9607: POP
9608: POP
// end ;
9609: LD_VAR 0 1
9613: RET
// export function EndBuildUp ; var i , j ; begin
9614: LD_INT 0
9616: PPUSH
9617: PPUSH
9618: PPUSH
// disable ( 600 ) ;
9619: LD_INT 600
9621: DISABLE_MARKED
// for i := 1 to BuildUpAreas do
9622: LD_ADDR_VAR 0 2
9626: PUSH
9627: DOUBLE
9628: LD_INT 1
9630: DEC
9631: ST_TO_ADDR
9632: LD_EXP 39
9636: PUSH
9637: FOR_TO
9638: IFFALSE 9793
// if Position_Sides [ i ] then
9640: LD_EXP 21
9644: PUSH
9645: LD_VAR 0 2
9649: ARRAY
9650: IFFALSE 9791
// for j := 1 to 8 do
9652: LD_ADDR_VAR 0 3
9656: PUSH
9657: DOUBLE
9658: LD_INT 1
9660: DEC
9661: ST_TO_ADDR
9662: LD_INT 8
9664: PUSH
9665: FOR_TO
9666: IFFALSE 9789
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
9668: LD_EXP 18
9672: PUSH
9673: LD_VAR 0 3
9677: ARRAY
9678: PUSH
9679: LD_EXP 16
9683: PUSH
9684: LD_EXP 21
9688: PUSH
9689: LD_VAR 0 2
9693: ARRAY
9694: ARRAY
9695: PUSH
9696: LD_EXP 16
9700: PUSH
9701: LD_VAR 0 3
9705: ARRAY
9706: NONEQUAL
9707: PUSH
9708: LD_EXP 20
9712: NOT
9713: PUSH
9714: LD_EXP 21
9718: PUSH
9719: LD_VAR 0 2
9723: ARRAY
9724: PUSH
9725: LD_VAR 0 3
9729: NONEQUAL
9730: AND
9731: OR
9732: AND
9733: IFFALSE 9757
// ShowArea ( j , BuildUpAreas [ i ] ) else
9735: LD_VAR 0 3
9739: PPUSH
9740: LD_EXP 39
9744: PUSH
9745: LD_VAR 0 2
9749: ARRAY
9750: PPUSH
9751: CALL_OW 334
9755: GO 9787
// if ( j = your_side ) then
9757: LD_VAR 0 3
9761: PUSH
9762: LD_OWVAR 2
9766: EQUAL
9767: IFFALSE 9787
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
9769: LD_EXP 39
9773: PUSH
9774: LD_VAR 0 2
9778: ARRAY
9779: PPUSH
9780: LD_INT 0
9782: PPUSH
9783: CALL_OW 424
9787: GO 9665
9789: POP
9790: POP
9791: GO 9637
9793: POP
9794: POP
// end ;
9795: LD_VAR 0 1
9799: RET
// every 5 marked 600 do var i , un ;
9800: GO 9802
9802: DISABLE
9803: LD_INT 0
9805: PPUSH
9806: PPUSH
// begin for i := 1 to BuildUpAreas do
9807: LD_ADDR_VAR 0 1
9811: PUSH
9812: DOUBLE
9813: LD_INT 1
9815: DEC
9816: ST_TO_ADDR
9817: LD_EXP 39
9821: PUSH
9822: FOR_TO
9823: IFFALSE 9978
// if Position_Sides [ i ] then
9825: LD_EXP 21
9829: PUSH
9830: LD_VAR 0 1
9834: ARRAY
9835: IFFALSE 9976
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
9837: LD_ADDR_VAR 0 2
9841: PUSH
9842: LD_EXP 39
9846: PUSH
9847: LD_VAR 0 1
9851: ARRAY
9852: PPUSH
9853: LD_INT 2
9855: PUSH
9856: LD_INT 21
9858: PUSH
9859: LD_INT 1
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: PUSH
9866: LD_INT 21
9868: PUSH
9869: LD_INT 2
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: LIST
9880: PUSH
9881: LD_INT 22
9883: PUSH
9884: LD_OWVAR 2
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: PUSH
9893: EMPTY
9894: LIST
9895: LIST
9896: PPUSH
9897: CALL_OW 70
9901: PUSH
9902: FOR_IN
9903: IFFALSE 9974
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
9905: LD_EXP 16
9909: PUSH
9910: LD_EXP 21
9914: PUSH
9915: LD_VAR 0 1
9919: ARRAY
9920: ARRAY
9921: PUSH
9922: LD_EXP 16
9926: PUSH
9927: LD_OWVAR 2
9931: ARRAY
9932: NONEQUAL
9933: PUSH
9934: LD_EXP 20
9938: NOT
9939: PUSH
9940: LD_EXP 21
9944: PUSH
9945: LD_VAR 0 1
9949: ARRAY
9950: PUSH
9951: LD_OWVAR 2
9955: NONEQUAL
9956: AND
9957: OR
9958: IFFALSE 9972
// ComMoveToArea ( un , BuildUpEscape ) ;
9960: LD_VAR 0 2
9964: PPUSH
9965: LD_INT 16
9967: PPUSH
9968: CALL_OW 113
9972: GO 9902
9974: POP
9975: POP
9976: GO 9822
9978: POP
9979: POP
// enable ;
9980: ENABLE
// end ;
9981: PPOPN 2
9983: END
// every 5 5$00 do
9984: GO 9986
9986: DISABLE
// if ( def_builduptime = 1 ) then
9987: LD_EXP 55
9991: PUSH
9992: LD_INT 1
9994: EQUAL
9995: IFFALSE 10001
// EndBuildUp ;
9997: CALL 9614 0 0
10001: END
// every 10 10$00 do
10002: GO 10004
10004: DISABLE
// if ( def_builduptime = 2 ) then
10005: LD_EXP 55
10009: PUSH
10010: LD_INT 2
10012: EQUAL
10013: IFFALSE 10019
// EndBuildUp ;
10015: CALL 9614 0 0
10019: END
// every 15 15$00 do
10020: GO 10022
10022: DISABLE
// if ( def_builduptime = 3 ) then
10023: LD_EXP 55
10027: PUSH
10028: LD_INT 3
10030: EQUAL
10031: IFFALSE 10037
// EndBuildUp ; end_of_file
10033: CALL 9614 0 0
10037: END
// var BloodGods , BloodGods_LastKills , BloodGods_CurrentKills , BloodGods_Positions ; every 0 0$3 marked 200 do var x ;
10038: GO 10040
10040: DISABLE
10041: LD_INT 0
10043: PPUSH
// begin enable ;
10044: ENABLE
// for x := 1 to 8 do
10045: LD_ADDR_VAR 0 1
10049: PUSH
10050: DOUBLE
10051: LD_INT 1
10053: DEC
10054: ST_TO_ADDR
10055: LD_INT 8
10057: PUSH
10058: FOR_TO
10059: IFFALSE 10143
// if ( BloodGods_CurrentKills [ x ] > 5 ) and ( BloodGods [ x ] = - 1 ) then
10061: LD_LOC 18
10065: PUSH
10066: LD_VAR 0 1
10070: ARRAY
10071: PUSH
10072: LD_INT 5
10074: GREATER
10075: PUSH
10076: LD_LOC 16
10080: PUSH
10081: LD_VAR 0 1
10085: ARRAY
10086: PUSH
10087: LD_INT 1
10089: NEG
10090: EQUAL
10091: AND
10092: IFFALSE 10141
// begin BloodGods_LastKills := Replace ( BloodGods_LastKills , x , BloodGods_LastKills [ x ] + 6 ) ;
10094: LD_ADDR_LOC 17
10098: PUSH
10099: LD_LOC 17
10103: PPUSH
10104: LD_VAR 0 1
10108: PPUSH
10109: LD_LOC 17
10113: PUSH
10114: LD_VAR 0 1
10118: ARRAY
10119: PUSH
10120: LD_INT 6
10122: PLUS
10123: PPUSH
10124: CALL_OW 1
10128: ST_TO_ADDR
// AwakenBloodGod ( x , false ) ;
10129: LD_VAR 0 1
10133: PPUSH
10134: LD_INT 0
10136: PPUSH
10137: CALL 10315 0 2
// end ;
10141: GO 10058
10143: POP
10144: POP
// end ;
10145: PPOPN 1
10147: END
// every 0 0$1 marked 200 do var BGL , x ;
10148: GO 10150
10150: DISABLE
10151: LD_INT 0
10153: PPUSH
10154: PPUSH
// begin enable ;
10155: ENABLE
// for x := 1 to 8 do
10156: LD_ADDR_VAR 0 2
10160: PUSH
10161: DOUBLE
10162: LD_INT 1
10164: DEC
10165: ST_TO_ADDR
10166: LD_INT 8
10168: PUSH
10169: FOR_TO
10170: IFFALSE 10301
// if ( BloodGods [ x ] > - 1 ) and IsLive ( BloodGods [ x ] ) then
10172: LD_LOC 16
10176: PUSH
10177: LD_VAR 0 2
10181: ARRAY
10182: PUSH
10183: LD_INT 1
10185: NEG
10186: GREATER
10187: PUSH
10188: LD_LOC 16
10192: PUSH
10193: LD_VAR 0 2
10197: ARRAY
10198: PPUSH
10199: CALL_OW 300
10203: AND
10204: IFFALSE 10299
// begin BGL := GetLives ( BloodGods [ x ] ) ;
10206: LD_ADDR_VAR 0 1
10210: PUSH
10211: LD_LOC 16
10215: PUSH
10216: LD_VAR 0 2
10220: ARRAY
10221: PPUSH
10222: CALL_OW 256
10226: ST_TO_ADDR
// if ( BGL < 1000 ) and ( BGL > 100 ) then
10227: LD_VAR 0 1
10231: PUSH
10232: LD_INT 1000
10234: LESS
10235: PUSH
10236: LD_VAR 0 1
10240: PUSH
10241: LD_INT 100
10243: GREATER
10244: AND
10245: IFFALSE 10299
// begin BGL := BGL + 10 ;
10247: LD_ADDR_VAR 0 1
10251: PUSH
10252: LD_VAR 0 1
10256: PUSH
10257: LD_INT 10
10259: PLUS
10260: ST_TO_ADDR
// if BGL > 1000 then
10261: LD_VAR 0 1
10265: PUSH
10266: LD_INT 1000
10268: GREATER
10269: IFFALSE 10279
// BGL := 1000 ;
10271: LD_ADDR_VAR 0 1
10275: PUSH
10276: LD_INT 1000
10278: ST_TO_ADDR
// SetLives ( BloodGods [ x ] , BGL ) ;
10279: LD_LOC 16
10283: PUSH
10284: LD_VAR 0 2
10288: ARRAY
10289: PPUSH
10290: LD_VAR 0 1
10294: PPUSH
10295: CALL_OW 234
// end ; end ;
10299: GO 10169
10301: POP
10302: POP
// end ;
10303: PPOPN 2
10305: END
// every 0 0$1 marked 200 do
10306: GO 10308
10308: DISABLE
// begin DisplayTimeWithKills ;
10309: CALL 10556 0 0
// enable ;
10313: ENABLE
// end ;
10314: END
// function AwakenBloodGod ( side , NoDialog ) ; begin
10315: LD_INT 0
10317: PPUSH
// uc_direction := Rand ( 0 , 5 ) ;
10318: LD_ADDR_OWVAR 24
10322: PUSH
10323: LD_INT 0
10325: PPUSH
10326: LD_INT 5
10328: PPUSH
10329: CALL_OW 12
10333: ST_TO_ADDR
// PrepareHuman ( 1 , class_soldier , 15 ) ;
10334: LD_INT 1
10336: PPUSH
10337: LD_INT 1
10339: PPUSH
10340: LD_INT 15
10342: PPUSH
10343: CALL_OW 380
// hc_importance := 106 ;
10347: LD_ADDR_OWVAR 32
10351: PUSH
10352: LD_INT 106
10354: ST_TO_ADDR
// hc_name := Blood God of  & mp_sides_players_names [ side ] ;
10355: LD_ADDR_OWVAR 26
10359: PUSH
10360: LD_STRING Blood God of 
10362: PUSH
10363: LD_OWVAR 19
10367: PUSH
10368: LD_VAR 0 1
10372: ARRAY
10373: STR
10374: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
10375: LD_ADDR_OWVAR 21
10379: PUSH
10380: LD_EXP 19
10384: PUSH
10385: LD_VAR 0 1
10389: ARRAY
10390: ST_TO_ADDR
// uc_side := side ;
10391: LD_ADDR_OWVAR 20
10395: PUSH
10396: LD_VAR 0 1
10400: ST_TO_ADDR
// hc_noskilllimit := true ;
10401: LD_ADDR_OWVAR 76
10405: PUSH
10406: LD_INT 1
10408: ST_TO_ADDR
// hc_agressivity := 50 ;
10409: LD_ADDR_OWVAR 35
10413: PUSH
10414: LD_INT 50
10416: ST_TO_ADDR
// BloodGods := Replace ( BloodGods , Side , CreateHuman ) ;
10417: LD_ADDR_LOC 16
10421: PUSH
10422: LD_LOC 16
10426: PPUSH
10427: LD_VAR 0 1
10431: PPUSH
10432: CALL_OW 44
10436: PPUSH
10437: CALL_OW 1
10441: ST_TO_ADDR
// PlaceUnitXYR ( BloodGods [ side ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 1 ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 2 ] , 10 , false ) ;
10442: LD_LOC 16
10446: PUSH
10447: LD_VAR 0 1
10451: ARRAY
10452: PPUSH
10453: LD_LOC 19
10457: PUSH
10458: LD_EXP 18
10462: PUSH
10463: LD_VAR 0 1
10467: ARRAY
10468: ARRAY
10469: PUSH
10470: LD_INT 1
10472: ARRAY
10473: PPUSH
10474: LD_LOC 19
10478: PUSH
10479: LD_EXP 18
10483: PUSH
10484: LD_VAR 0 1
10488: ARRAY
10489: ARRAY
10490: PUSH
10491: LD_INT 2
10493: ARRAY
10494: PPUSH
10495: LD_INT 10
10497: PPUSH
10498: LD_INT 0
10500: PPUSH
10501: CALL_OW 50
// SetAttr ( BloodGods [ side ] , attr_stamina , 300 ) ;
10505: LD_LOC 16
10509: PUSH
10510: LD_VAR 0 1
10514: ARRAY
10515: PPUSH
10516: LD_INT 1
10518: PPUSH
10519: LD_INT 300
10521: PPUSH
10522: CALL_OW 239
// if not NoDialog then
10526: LD_VAR 0 2
10530: NOT
10531: IFFALSE 10551
// SayRadio ( BloodGods [ side ] , DLAwaken ) ;
10533: LD_LOC 16
10537: PUSH
10538: LD_VAR 0 1
10542: ARRAY
10543: PPUSH
10544: LD_STRING DLAwaken
10546: PPUSH
10547: CALL_OW 94
// end ;
10551: LD_VAR 0 3
10555: RET
// function DisplayTimeWithKills ; var x ; begin
10556: LD_INT 0
10558: PPUSH
10559: PPUSH
// ExtraStrings :=  ;
10560: LD_ADDR_EXP 59
10564: PUSH
10565: LD_STRING 
10567: ST_TO_ADDR
// for x = 1 to Side_Positions do
10568: LD_ADDR_VAR 0 2
10572: PUSH
10573: DOUBLE
10574: LD_INT 1
10576: DEC
10577: ST_TO_ADDR
10578: LD_EXP 18
10582: PUSH
10583: FOR_TO
10584: IFFALSE 10817
// if Side_Positions [ x ] then
10586: LD_EXP 18
10590: PUSH
10591: LD_VAR 0 2
10595: ARRAY
10596: IFFALSE 10815
// begin BloodGods_CurrentKills := Replace ( BloodGods_CurrentKills , x , GetHumansKilled ( x ) - BloodGods_LastKills [ x ] ) ;
10598: LD_ADDR_LOC 18
10602: PUSH
10603: LD_LOC 18
10607: PPUSH
10608: LD_VAR 0 2
10612: PPUSH
10613: LD_VAR 0 2
10617: PPUSH
10618: CALL_OW 515
10622: PUSH
10623: LD_LOC 17
10627: PUSH
10628: LD_VAR 0 2
10632: ARRAY
10633: MINUS
10634: PPUSH
10635: CALL_OW 1
10639: ST_TO_ADDR
// if ( BloodGods [ x ] > - 1 ) and ( IsLive ( BloodGods [ x ] ) ) then
10640: LD_LOC 16
10644: PUSH
10645: LD_VAR 0 2
10649: ARRAY
10650: PUSH
10651: LD_INT 1
10653: NEG
10654: GREATER
10655: PUSH
10656: LD_LOC 16
10660: PUSH
10661: LD_VAR 0 2
10665: ARRAY
10666: PPUSH
10667: CALL_OW 300
10671: AND
10672: IFFALSE 10705
// ExtraStrings = ExtraStrings ^ [ #godawoken , x , x ] else
10674: LD_ADDR_EXP 59
10678: PUSH
10679: LD_EXP 59
10683: PUSH
10684: LD_STRING #godawoken
10686: PUSH
10687: LD_VAR 0 2
10691: PUSH
10692: LD_VAR 0 2
10696: PUSH
10697: EMPTY
10698: LIST
10699: LIST
10700: LIST
10701: ADD
10702: ST_TO_ADDR
10703: GO 10815
// if ( BloodGods [ x ] > - 1 ) and ( IsDead ( BloodGods [ x ] ) ) then
10705: LD_LOC 16
10709: PUSH
10710: LD_VAR 0 2
10714: ARRAY
10715: PUSH
10716: LD_INT 1
10718: NEG
10719: GREATER
10720: PUSH
10721: LD_LOC 16
10725: PUSH
10726: LD_VAR 0 2
10730: ARRAY
10731: PPUSH
10732: CALL_OW 301
10736: AND
10737: IFFALSE 10770
// ExtraStrings = ExtraStrings ^ [ #goddied , x , x ] else
10739: LD_ADDR_EXP 59
10743: PUSH
10744: LD_EXP 59
10748: PUSH
10749: LD_STRING #goddied
10751: PUSH
10752: LD_VAR 0 2
10756: PUSH
10757: LD_VAR 0 2
10761: PUSH
10762: EMPTY
10763: LIST
10764: LIST
10765: LIST
10766: ADD
10767: ST_TO_ADDR
10768: GO 10815
// ExtraStrings = ExtraStrings ^ [ #godssacrifise , x , x , BloodGods_CurrentKills [ x ] , 6 ] end ;
10770: LD_ADDR_EXP 59
10774: PUSH
10775: LD_EXP 59
10779: PUSH
10780: LD_STRING #godssacrifise
10782: PUSH
10783: LD_VAR 0 2
10787: PUSH
10788: LD_VAR 0 2
10792: PUSH
10793: LD_LOC 18
10797: PUSH
10798: LD_VAR 0 2
10802: ARRAY
10803: PUSH
10804: LD_INT 6
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: ADD
10814: ST_TO_ADDR
10815: GO 10583
10817: POP
10818: POP
// end ;
10819: LD_VAR 0 1
10823: RET
// export function InitBloodGods ; begin
10824: LD_INT 0
10826: PPUSH
// BloodGods = [ - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 ] ;
10827: LD_ADDR_LOC 16
10831: PUSH
10832: LD_INT 1
10834: NEG
10835: PUSH
10836: LD_INT 1
10838: NEG
10839: PUSH
10840: LD_INT 1
10842: NEG
10843: PUSH
10844: LD_INT 1
10846: NEG
10847: PUSH
10848: LD_INT 1
10850: NEG
10851: PUSH
10852: LD_INT 1
10854: NEG
10855: PUSH
10856: LD_INT 1
10858: NEG
10859: PUSH
10860: LD_INT 1
10862: NEG
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: ST_TO_ADDR
// BloodGods_LastKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10874: LD_ADDR_LOC 17
10878: PUSH
10879: LD_INT 0
10881: PUSH
10882: LD_INT 0
10884: PUSH
10885: LD_INT 0
10887: PUSH
10888: LD_INT 0
10890: PUSH
10891: LD_INT 0
10893: PUSH
10894: LD_INT 0
10896: PUSH
10897: LD_INT 0
10899: PUSH
10900: LD_INT 0
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: ST_TO_ADDR
// BloodGods_CurrentKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10913: LD_ADDR_LOC 18
10917: PUSH
10918: LD_INT 0
10920: PUSH
10921: LD_INT 0
10923: PUSH
10924: LD_INT 0
10926: PUSH
10927: LD_INT 0
10929: PUSH
10930: LD_INT 0
10932: PUSH
10933: LD_INT 0
10935: PUSH
10936: LD_INT 0
10938: PUSH
10939: LD_INT 0
10941: PUSH
10942: EMPTY
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: ST_TO_ADDR
// BloodGods_Positions = [ [ 60 , 47 ] , [ 82 , 26 ] , [ 124 , 45 ] , [ 147 , 90 ] , [ 126 , 112 ] , [ 84 , 92 ] , [ 106 , 73 ] , [ 106 , 73 ] ] ;
10952: LD_ADDR_LOC 19
10956: PUSH
10957: LD_INT 60
10959: PUSH
10960: LD_INT 47
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: PUSH
10967: LD_INT 82
10969: PUSH
10970: LD_INT 26
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: PUSH
10977: LD_INT 124
10979: PUSH
10980: LD_INT 45
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: PUSH
10987: LD_INT 147
10989: PUSH
10990: LD_INT 90
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: PUSH
10997: LD_INT 126
10999: PUSH
11000: LD_INT 112
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: PUSH
11007: LD_INT 84
11009: PUSH
11010: LD_INT 92
11012: PUSH
11013: EMPTY
11014: LIST
11015: LIST
11016: PUSH
11017: LD_INT 106
11019: PUSH
11020: LD_INT 73
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: PUSH
11027: LD_INT 106
11029: PUSH
11030: LD_INT 73
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: ST_TO_ADDR
// ClearHumansKilled ;
11047: CALL_OW 516
// enable ( 200 ) ;
11051: LD_INT 200
11053: ENABLE_MARKED
// end ; end_of_file
11054: LD_VAR 0 1
11058: RET
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime , def_sheik , def_mastodont ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
11059: LD_INT 0
11061: PPUSH
11062: PPUSH
// if ( not IAmSpec ) then
11063: CALL_OW 531
11067: NOT
11068: IFFALSE 11084
// Result := Limits_Info ^  ;
11070: LD_ADDR_VAR 0 1
11074: PUSH
11075: LD_LOC 27
11079: PUSH
11080: LD_STRING 
11082: ADD
11083: ST_TO_ADDR
// for i := 1 to 8 do
11084: LD_ADDR_VAR 0 2
11088: PUSH
11089: DOUBLE
11090: LD_INT 1
11092: DEC
11093: ST_TO_ADDR
11094: LD_INT 8
11096: PUSH
11097: FOR_TO
11098: IFFALSE 11143
// if Cheaters [ i ] then
11100: LD_LOC 28
11104: PUSH
11105: LD_VAR 0 2
11109: ARRAY
11110: IFFALSE 11141
// Result := Result ^ [ #Cheater , i , i ] ;
11112: LD_ADDR_VAR 0 1
11116: PUSH
11117: LD_VAR 0 1
11121: PUSH
11122: LD_STRING #Cheater
11124: PUSH
11125: LD_VAR 0 2
11129: PUSH
11130: LD_VAR 0 2
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: LIST
11139: ADD
11140: ST_TO_ADDR
11141: GO 11097
11143: POP
11144: POP
// end ;
11145: LD_VAR 0 1
11149: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
11150: LD_INT 0
11152: PPUSH
11153: PPUSH
11154: PPUSH
11155: PPUSH
11156: PPUSH
// case Game_Type of 10 :
11157: LD_EXP 40
11161: PUSH
11162: LD_INT 10
11164: DOUBLE
11165: EQUAL
11166: IFTRUE 11170
11168: GO 11181
11170: POP
// def_game_rules := 1 ; 11 :
11171: LD_ADDR_EXP 41
11175: PUSH
11176: LD_INT 1
11178: ST_TO_ADDR
11179: GO 11201
11181: LD_INT 11
11183: DOUBLE
11184: EQUAL
11185: IFTRUE 11189
11187: GO 11200
11189: POP
// def_game_rules := 3 ; end ;
11190: LD_ADDR_EXP 41
11194: PUSH
11195: LD_INT 3
11197: ST_TO_ADDR
11198: GO 11201
11200: POP
// case def_game_rules of 0 :
11201: LD_EXP 41
11205: PUSH
11206: LD_INT 0
11208: DOUBLE
11209: EQUAL
11210: IFTRUE 11214
11212: GO 11219
11214: POP
// exit ; 1 :
11215: GO 13277
11217: GO 13177
11219: LD_INT 1
11221: DOUBLE
11222: EQUAL
11223: IFTRUE 11227
11225: GO 11443
11227: POP
// begin def_base_level := 2 ;
11228: LD_ADDR_EXP 42
11232: PUSH
11233: LD_INT 2
11235: ST_TO_ADDR
// def_amount_of_people := 2 ;
11236: LD_ADDR_EXP 43
11240: PUSH
11241: LD_INT 2
11243: ST_TO_ADDR
// def_skill_level := 1 ;
11244: LD_ADDR_EXP 44
11248: PUSH
11249: LD_INT 1
11251: ST_TO_ADDR
// def_starting_resources := 2 ;
11252: LD_ADDR_EXP 45
11256: PUSH
11257: LD_INT 2
11259: ST_TO_ADDR
// def_shipments_density := 1 ;
11260: LD_ADDR_EXP 46
11264: PUSH
11265: LD_INT 1
11267: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11268: LD_ADDR_EXP 47
11272: PUSH
11273: LD_INT 0
11275: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
11276: LD_ADDR_EXP 48
11280: PUSH
11281: LD_INT 1
11283: ST_TO_ADDR
// def_shared_vision := 1 ;
11284: LD_ADDR_EXP 49
11288: PUSH
11289: LD_INT 1
11291: ST_TO_ADDR
// def_morale_flags := 3 ;
11292: LD_ADDR_EXP 50
11296: PUSH
11297: LD_INT 3
11299: ST_TO_ADDR
// def_siberite_detection := 1 ;
11300: LD_ADDR_EXP 51
11304: PUSH
11305: LD_INT 1
11307: ST_TO_ADDR
// def_people_respawning := 1 ;
11308: LD_ADDR_EXP 52
11312: PUSH
11313: LD_INT 1
11315: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
11316: LD_ADDR_EXP 53
11320: PUSH
11321: LD_INT 1
11323: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11324: LD_ADDR_EXP 54
11328: PUSH
11329: LD_INT 0
11331: ST_TO_ADDR
// def_builduptime := 2 ;
11332: LD_ADDR_EXP 55
11336: PUSH
11337: LD_INT 2
11339: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
11340: LD_ADDR_VAR 0 2
11344: PUSH
11345: EMPTY
11346: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
11347: LD_ADDR_VAR 0 3
11351: PUSH
11352: EMPTY
11353: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11354: LD_ADDR_LOC 22
11358: PUSH
11359: EMPTY
11360: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11361: LD_ADDR_LOC 23
11365: PUSH
11366: EMPTY
11367: ST_TO_ADDR
// Banned_Controls := [ ] ;
11368: LD_ADDR_LOC 24
11372: PUSH
11373: EMPTY
11374: ST_TO_ADDR
// Banned_Engines := [ ] ;
11375: LD_ADDR_LOC 25
11379: PUSH
11380: EMPTY
11381: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
11382: LD_ADDR_LOC 20
11386: PUSH
11387: LD_INT 37
11389: PUSH
11390: EMPTY
11391: LIST
11392: PUSH
11393: LD_INT 4
11395: PUSH
11396: LD_INT 5
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: PUSH
11403: LD_INT 31
11405: PUSH
11406: LD_INT 32
11408: PUSH
11409: LD_INT 33
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: LIST
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: LIST
11421: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
11422: LD_ADDR_LOC 21
11426: PUSH
11427: LD_INT 2
11429: PUSH
11430: LD_INT 2
11432: PUSH
11433: LD_INT 4
11435: PUSH
11436: EMPTY
11437: LIST
11438: LIST
11439: LIST
11440: ST_TO_ADDR
// end ; 2 :
11441: GO 13177
11443: LD_INT 2
11445: DOUBLE
11446: EQUAL
11447: IFTRUE 11451
11449: GO 11660
11451: POP
// begin def_base_level := 1 ;
11452: LD_ADDR_EXP 42
11456: PUSH
11457: LD_INT 1
11459: ST_TO_ADDR
// def_amount_of_people := 2 ;
11460: LD_ADDR_EXP 43
11464: PUSH
11465: LD_INT 2
11467: ST_TO_ADDR
// def_skill_level := 3 ;
11468: LD_ADDR_EXP 44
11472: PUSH
11473: LD_INT 3
11475: ST_TO_ADDR
// def_starting_resources := 3 ;
11476: LD_ADDR_EXP 45
11480: PUSH
11481: LD_INT 3
11483: ST_TO_ADDR
// def_shipments_density := 2 ;
11484: LD_ADDR_EXP 46
11488: PUSH
11489: LD_INT 2
11491: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
11492: LD_ADDR_EXP 47
11496: PUSH
11497: LD_INT 1
11499: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
11500: LD_ADDR_EXP 48
11504: PUSH
11505: LD_INT 2
11507: ST_TO_ADDR
// def_shared_vision := 1 ;
11508: LD_ADDR_EXP 49
11512: PUSH
11513: LD_INT 1
11515: ST_TO_ADDR
// def_morale_flags := 0 ;
11516: LD_ADDR_EXP 50
11520: PUSH
11521: LD_INT 0
11523: ST_TO_ADDR
// def_siberite_detection := 1 ;
11524: LD_ADDR_EXP 51
11528: PUSH
11529: LD_INT 1
11531: ST_TO_ADDR
// def_people_respawning := 0 ;
11532: LD_ADDR_EXP 52
11536: PUSH
11537: LD_INT 0
11539: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
11540: LD_ADDR_EXP 53
11544: PUSH
11545: LD_INT 0
11547: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11548: LD_ADDR_EXP 54
11552: PUSH
11553: LD_INT 0
11555: ST_TO_ADDR
// def_builduptime := 2 ;
11556: LD_ADDR_EXP 55
11560: PUSH
11561: LD_INT 2
11563: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
11564: LD_ADDR_VAR 0 2
11568: PUSH
11569: LD_INT 1
11571: PUSH
11572: EMPTY
11573: LIST
11574: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
11575: LD_ADDR_VAR 0 3
11579: PUSH
11580: EMPTY
11581: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11582: LD_ADDR_LOC 22
11586: PUSH
11587: EMPTY
11588: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11589: LD_ADDR_LOC 23
11593: PUSH
11594: EMPTY
11595: ST_TO_ADDR
// Banned_Controls := [ ] ;
11596: LD_ADDR_LOC 24
11600: PUSH
11601: EMPTY
11602: ST_TO_ADDR
// Banned_Engines := [ ] ;
11603: LD_ADDR_LOC 25
11607: PUSH
11608: EMPTY
11609: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
11610: LD_ADDR_LOC 20
11614: PUSH
11615: LD_INT 4
11617: PUSH
11618: LD_INT 5
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: PUSH
11625: LD_INT 31
11627: PUSH
11628: LD_INT 32
11630: PUSH
11631: LD_INT 33
11633: PUSH
11634: EMPTY
11635: LIST
11636: LIST
11637: LIST
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
11643: LD_ADDR_LOC 21
11647: PUSH
11648: LD_INT 1
11650: PUSH
11651: LD_INT 2
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: ST_TO_ADDR
// end ; 3 :
11658: GO 13177
11660: LD_INT 3
11662: DOUBLE
11663: EQUAL
11664: IFTRUE 11668
11666: GO 11911
11668: POP
// begin def_base_level := 1 ;
11669: LD_ADDR_EXP 42
11673: PUSH
11674: LD_INT 1
11676: ST_TO_ADDR
// def_amount_of_people := 2 ;
11677: LD_ADDR_EXP 43
11681: PUSH
11682: LD_INT 2
11684: ST_TO_ADDR
// def_skill_level := 3 ;
11685: LD_ADDR_EXP 44
11689: PUSH
11690: LD_INT 3
11692: ST_TO_ADDR
// def_starting_resources := 3 ;
11693: LD_ADDR_EXP 45
11697: PUSH
11698: LD_INT 3
11700: ST_TO_ADDR
// def_shipments_density := 1 ;
11701: LD_ADDR_EXP 46
11705: PUSH
11706: LD_INT 1
11708: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11709: LD_ADDR_EXP 47
11713: PUSH
11714: LD_INT 0
11716: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
11717: LD_ADDR_EXP 48
11721: PUSH
11722: LD_INT 1
11724: ST_TO_ADDR
// def_shared_vision := 1 ;
11725: LD_ADDR_EXP 49
11729: PUSH
11730: LD_INT 1
11732: ST_TO_ADDR
// def_morale_flags := 0 ;
11733: LD_ADDR_EXP 50
11737: PUSH
11738: LD_INT 0
11740: ST_TO_ADDR
// def_siberite_detection := 1 ;
11741: LD_ADDR_EXP 51
11745: PUSH
11746: LD_INT 1
11748: ST_TO_ADDR
// def_people_respawning := 0 ;
11749: LD_ADDR_EXP 52
11753: PUSH
11754: LD_INT 0
11756: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
11757: LD_ADDR_EXP 53
11761: PUSH
11762: LD_INT 2
11764: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11765: LD_ADDR_EXP 54
11769: PUSH
11770: LD_INT 0
11772: ST_TO_ADDR
// def_builduptime := 1 ;
11773: LD_ADDR_EXP 55
11777: PUSH
11778: LD_INT 1
11780: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
11781: LD_ADDR_VAR 0 2
11785: PUSH
11786: LD_INT 23
11788: PUSH
11789: EMPTY
11790: LIST
11791: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
11792: LD_ADDR_VAR 0 3
11796: PUSH
11797: LD_INT 2
11799: PUSH
11800: LD_INT 37
11802: PUSH
11803: LD_INT 32
11805: PUSH
11806: LD_INT 33
11808: PUSH
11809: LD_INT 36
11811: PUSH
11812: LD_INT 16
11814: PUSH
11815: LD_INT 23
11817: PUSH
11818: LD_INT 21
11820: PUSH
11821: LD_INT 18
11823: PUSH
11824: LD_INT 22
11826: PUSH
11827: LD_INT 20
11829: PUSH
11830: LD_INT 19
11832: PUSH
11833: LD_INT 25
11835: PUSH
11836: LD_INT 17
11838: PUSH
11839: LD_INT 24
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11859: LD_ADDR_LOC 22
11863: PUSH
11864: EMPTY
11865: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11866: LD_ADDR_LOC 23
11870: PUSH
11871: EMPTY
11872: ST_TO_ADDR
// Banned_Controls := [ ] ;
11873: LD_ADDR_LOC 24
11877: PUSH
11878: EMPTY
11879: ST_TO_ADDR
// Banned_Engines := [ ] ;
11880: LD_ADDR_LOC 25
11884: PUSH
11885: EMPTY
11886: ST_TO_ADDR
// Restricted_Builds := [ ] ;
11887: LD_ADDR_LOC 20
11891: PUSH
11892: EMPTY
11893: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
11894: LD_ADDR_LOC 21
11898: PUSH
11899: EMPTY
11900: ST_TO_ADDR
// No_Mechs := true ;
11901: LD_ADDR_EXP 58
11905: PUSH
11906: LD_INT 1
11908: ST_TO_ADDR
// end ; 4 :
11909: GO 13177
11911: LD_INT 4
11913: DOUBLE
11914: EQUAL
11915: IFTRUE 11919
11917: GO 12094
11919: POP
// begin def_base_level := 1 ;
11920: LD_ADDR_EXP 42
11924: PUSH
11925: LD_INT 1
11927: ST_TO_ADDR
// def_amount_of_people := 2 ;
11928: LD_ADDR_EXP 43
11932: PUSH
11933: LD_INT 2
11935: ST_TO_ADDR
// def_skill_level := 3 ;
11936: LD_ADDR_EXP 44
11940: PUSH
11941: LD_INT 3
11943: ST_TO_ADDR
// def_starting_resources := 3 ;
11944: LD_ADDR_EXP 45
11948: PUSH
11949: LD_INT 3
11951: ST_TO_ADDR
// def_shipments_density := 2 ;
11952: LD_ADDR_EXP 46
11956: PUSH
11957: LD_INT 2
11959: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
11960: LD_ADDR_EXP 47
11964: PUSH
11965: LD_INT 1
11967: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
11968: LD_ADDR_EXP 48
11972: PUSH
11973: LD_INT 2
11975: ST_TO_ADDR
// def_shared_vision := 1 ;
11976: LD_ADDR_EXP 49
11980: PUSH
11981: LD_INT 1
11983: ST_TO_ADDR
// def_morale_flags := 0 ;
11984: LD_ADDR_EXP 50
11988: PUSH
11989: LD_INT 0
11991: ST_TO_ADDR
// def_siberite_detection := 1 ;
11992: LD_ADDR_EXP 51
11996: PUSH
11997: LD_INT 1
11999: ST_TO_ADDR
// def_people_respawning := 0 ;
12000: LD_ADDR_EXP 52
12004: PUSH
12005: LD_INT 0
12007: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
12008: LD_ADDR_EXP 53
12012: PUSH
12013: LD_INT 0
12015: ST_TO_ADDR
// def_siberite_bomb := 1 ;
12016: LD_ADDR_EXP 54
12020: PUSH
12021: LD_INT 1
12023: ST_TO_ADDR
// def_builduptime := 3 ;
12024: LD_ADDR_EXP 55
12028: PUSH
12029: LD_INT 3
12031: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
12032: LD_ADDR_VAR 0 2
12036: PUSH
12037: LD_INT 1
12039: PUSH
12040: EMPTY
12041: LIST
12042: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
12043: LD_ADDR_VAR 0 3
12047: PUSH
12048: EMPTY
12049: ST_TO_ADDR
// Banned_Weapons := [ ] ;
12050: LD_ADDR_LOC 22
12054: PUSH
12055: EMPTY
12056: ST_TO_ADDR
// Banned_Chassis := [ ] ;
12057: LD_ADDR_LOC 23
12061: PUSH
12062: EMPTY
12063: ST_TO_ADDR
// Banned_Controls := [ ] ;
12064: LD_ADDR_LOC 24
12068: PUSH
12069: EMPTY
12070: ST_TO_ADDR
// Banned_Engines := [ ] ;
12071: LD_ADDR_LOC 25
12075: PUSH
12076: EMPTY
12077: ST_TO_ADDR
// Restricted_Builds := [ ] ;
12078: LD_ADDR_LOC 20
12082: PUSH
12083: EMPTY
12084: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
12085: LD_ADDR_LOC 21
12089: PUSH
12090: EMPTY
12091: ST_TO_ADDR
// end ; 5 :
12092: GO 13177
12094: LD_INT 5
12096: DOUBLE
12097: EQUAL
12098: IFTRUE 12102
12100: GO 12351
12102: POP
// begin def_base_level := 0 ;
12103: LD_ADDR_EXP 42
12107: PUSH
12108: LD_INT 0
12110: ST_TO_ADDR
// def_amount_of_people := 0 ;
12111: LD_ADDR_EXP 43
12115: PUSH
12116: LD_INT 0
12118: ST_TO_ADDR
// def_skill_level := 0 ;
12119: LD_ADDR_EXP 44
12123: PUSH
12124: LD_INT 0
12126: ST_TO_ADDR
// def_starting_resources := 0 ;
12127: LD_ADDR_EXP 45
12131: PUSH
12132: LD_INT 0
12134: ST_TO_ADDR
// def_shipments_density := 0 ;
12135: LD_ADDR_EXP 46
12139: PUSH
12140: LD_INT 0
12142: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
12143: LD_ADDR_EXP 47
12147: PUSH
12148: LD_INT 0
12150: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
12151: LD_ADDR_EXP 48
12155: PUSH
12156: LD_INT 0
12158: ST_TO_ADDR
// def_shared_vision := 1 ;
12159: LD_ADDR_EXP 49
12163: PUSH
12164: LD_INT 1
12166: ST_TO_ADDR
// def_morale_flags := 0 ;
12167: LD_ADDR_EXP 50
12171: PUSH
12172: LD_INT 0
12174: ST_TO_ADDR
// def_siberite_detection := 0 ;
12175: LD_ADDR_EXP 51
12179: PUSH
12180: LD_INT 0
12182: ST_TO_ADDR
// def_people_respawning := 1 ;
12183: LD_ADDR_EXP 52
12187: PUSH
12188: LD_INT 1
12190: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
12191: LD_ADDR_EXP 53
12195: PUSH
12196: LD_INT 1
12198: ST_TO_ADDR
// def_siberite_bomb := 0 ;
12199: LD_ADDR_EXP 54
12203: PUSH
12204: LD_INT 0
12206: ST_TO_ADDR
// def_builduptime := 0 ;
12207: LD_ADDR_EXP 55
12211: PUSH
12212: LD_INT 0
12214: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
12215: LD_ADDR_VAR 0 2
12219: PUSH
12220: LD_INT 10
12222: PUSH
12223: LD_INT 3
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
12230: LD_ADDR_VAR 0 3
12234: PUSH
12235: LD_INT 12
12237: PUSH
12238: LD_INT 11
12240: PUSH
12241: LD_INT 14
12243: PUSH
12244: LD_INT 13
12246: PUSH
12247: LD_INT 5
12249: PUSH
12250: LD_INT 24
12252: PUSH
12253: LD_INT 21
12255: PUSH
12256: LD_INT 33
12258: PUSH
12259: LD_INT 36
12261: PUSH
12262: EMPTY
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
12273: LD_ADDR_LOC 22
12277: PUSH
12278: LD_INT 31
12280: PUSH
12281: EMPTY
12282: LIST
12283: ST_TO_ADDR
// Banned_Chassis := [ ] ;
12284: LD_ADDR_LOC 23
12288: PUSH
12289: EMPTY
12290: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
12291: LD_ADDR_LOC 24
12295: PUSH
12296: LD_INT 2
12298: PUSH
12299: EMPTY
12300: LIST
12301: ST_TO_ADDR
// Banned_Engines := [ ] ;
12302: LD_ADDR_LOC 25
12306: PUSH
12307: EMPTY
12308: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
12309: LD_ADDR_LOC 20
12313: PUSH
12314: LD_INT 4
12316: PUSH
12317: EMPTY
12318: LIST
12319: PUSH
12320: LD_INT 31
12322: PUSH
12323: LD_INT 32
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
12334: LD_ADDR_LOC 21
12338: PUSH
12339: LD_INT 1
12341: PUSH
12342: LD_INT 1
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: ST_TO_ADDR
// end ; 6 :
12349: GO 13177
12351: LD_INT 6
12353: DOUBLE
12354: EQUAL
12355: IFTRUE 12359
12357: GO 12562
12359: POP
// begin def_base_level := 1 ;
12360: LD_ADDR_EXP 42
12364: PUSH
12365: LD_INT 1
12367: ST_TO_ADDR
// def_amount_of_people := 2 ;
12368: LD_ADDR_EXP 43
12372: PUSH
12373: LD_INT 2
12375: ST_TO_ADDR
// def_skill_level := 3 ;
12376: LD_ADDR_EXP 44
12380: PUSH
12381: LD_INT 3
12383: ST_TO_ADDR
// def_starting_resources := 3 ;
12384: LD_ADDR_EXP 45
12388: PUSH
12389: LD_INT 3
12391: ST_TO_ADDR
// def_shipments_density := 1 ;
12392: LD_ADDR_EXP 46
12396: PUSH
12397: LD_INT 1
12399: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
12400: LD_ADDR_EXP 47
12404: PUSH
12405: LD_INT 0
12407: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
12408: LD_ADDR_EXP 48
12412: PUSH
12413: LD_INT 1
12415: ST_TO_ADDR
// def_shared_vision := 1 ;
12416: LD_ADDR_EXP 49
12420: PUSH
12421: LD_INT 1
12423: ST_TO_ADDR
// def_morale_flags := 0 ;
12424: LD_ADDR_EXP 50
12428: PUSH
12429: LD_INT 0
12431: ST_TO_ADDR
// def_siberite_detection := 1 ;
12432: LD_ADDR_EXP 51
12436: PUSH
12437: LD_INT 1
12439: ST_TO_ADDR
// def_people_respawning := 2 ;
12440: LD_ADDR_EXP 52
12444: PUSH
12445: LD_INT 2
12447: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
12448: LD_ADDR_EXP 53
12452: PUSH
12453: LD_INT 1
12455: ST_TO_ADDR
// def_siberite_bomb := 0 ;
12456: LD_ADDR_EXP 54
12460: PUSH
12461: LD_INT 0
12463: ST_TO_ADDR
// def_builduptime := 1 ;
12464: LD_ADDR_EXP 55
12468: PUSH
12469: LD_INT 1
12471: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
12472: LD_ADDR_VAR 0 2
12476: PUSH
12477: LD_INT 23
12479: PUSH
12480: EMPTY
12481: LIST
12482: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
12483: LD_ADDR_VAR 0 3
12487: PUSH
12488: LD_INT 2
12490: PUSH
12491: LD_INT 37
12493: PUSH
12494: LD_INT 31
12496: PUSH
12497: LD_INT 32
12499: PUSH
12500: LD_INT 33
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: ST_TO_ADDR
// Banned_Weapons := [ ] ;
12510: LD_ADDR_LOC 22
12514: PUSH
12515: EMPTY
12516: ST_TO_ADDR
// Banned_Chassis := [ ] ;
12517: LD_ADDR_LOC 23
12521: PUSH
12522: EMPTY
12523: ST_TO_ADDR
// Banned_Controls := [ ] ;
12524: LD_ADDR_LOC 24
12528: PUSH
12529: EMPTY
12530: ST_TO_ADDR
// Banned_Engines := [ ] ;
12531: LD_ADDR_LOC 25
12535: PUSH
12536: EMPTY
12537: ST_TO_ADDR
// Restricted_Builds := [ ] ;
12538: LD_ADDR_LOC 20
12542: PUSH
12543: EMPTY
12544: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
12545: LD_ADDR_LOC 21
12549: PUSH
12550: EMPTY
12551: ST_TO_ADDR
// No_Mechs := true ;
12552: LD_ADDR_EXP 58
12556: PUSH
12557: LD_INT 1
12559: ST_TO_ADDR
// end ; 7 :
12560: GO 13177
12562: LD_INT 7
12564: DOUBLE
12565: EQUAL
12566: IFTRUE 12570
12568: GO 12768
12570: POP
// begin def_base_level := 1 ;
12571: LD_ADDR_EXP 42
12575: PUSH
12576: LD_INT 1
12578: ST_TO_ADDR
// def_amount_of_people := 2 ;
12579: LD_ADDR_EXP 43
12583: PUSH
12584: LD_INT 2
12586: ST_TO_ADDR
// def_skill_level := 3 ;
12587: LD_ADDR_EXP 44
12591: PUSH
12592: LD_INT 3
12594: ST_TO_ADDR
// def_starting_resources := 3 ;
12595: LD_ADDR_EXP 45
12599: PUSH
12600: LD_INT 3
12602: ST_TO_ADDR
// def_shipments_density := 1 ;
12603: LD_ADDR_EXP 46
12607: PUSH
12608: LD_INT 1
12610: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
12611: LD_ADDR_EXP 47
12615: PUSH
12616: LD_INT 1
12618: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
12619: LD_ADDR_EXP 48
12623: PUSH
12624: LD_INT 2
12626: ST_TO_ADDR
// def_shared_vision := 1 ;
12627: LD_ADDR_EXP 49
12631: PUSH
12632: LD_INT 1
12634: ST_TO_ADDR
// def_morale_flags := 0 ;
12635: LD_ADDR_EXP 50
12639: PUSH
12640: LD_INT 0
12642: ST_TO_ADDR
// def_siberite_detection := 1 ;
12643: LD_ADDR_EXP 51
12647: PUSH
12648: LD_INT 1
12650: ST_TO_ADDR
// def_people_respawning := 0 ;
12651: LD_ADDR_EXP 52
12655: PUSH
12656: LD_INT 0
12658: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
12659: LD_ADDR_EXP 53
12663: PUSH
12664: LD_INT 1
12666: ST_TO_ADDR
// def_siberite_bomb := 0 ;
12667: LD_ADDR_EXP 54
12671: PUSH
12672: LD_INT 0
12674: ST_TO_ADDR
// def_builduptime := 3 ;
12675: LD_ADDR_EXP 55
12679: PUSH
12680: LD_INT 3
12682: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
12683: LD_ADDR_VAR 0 2
12687: PUSH
12688: LD_INT 23
12690: PUSH
12691: EMPTY
12692: LIST
12693: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
12694: LD_ADDR_VAR 0 3
12698: PUSH
12699: LD_INT 37
12701: PUSH
12702: EMPTY
12703: LIST
12704: ST_TO_ADDR
// Banned_Weapons := [ ] ;
12705: LD_ADDR_LOC 22
12709: PUSH
12710: EMPTY
12711: ST_TO_ADDR
// Banned_Chassis := [ ] ;
12712: LD_ADDR_LOC 23
12716: PUSH
12717: EMPTY
12718: ST_TO_ADDR
// Banned_Controls := [ ] ;
12719: LD_ADDR_LOC 24
12723: PUSH
12724: EMPTY
12725: ST_TO_ADDR
// Banned_Engines := [ ] ;
12726: LD_ADDR_LOC 25
12730: PUSH
12731: EMPTY
12732: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
12733: LD_ADDR_LOC 20
12737: PUSH
12738: LD_INT 31
12740: PUSH
12741: LD_INT 32
12743: PUSH
12744: LD_INT 33
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: LIST
12751: PUSH
12752: EMPTY
12753: LIST
12754: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
12755: LD_ADDR_LOC 21
12759: PUSH
12760: LD_INT 10
12762: PUSH
12763: EMPTY
12764: LIST
12765: ST_TO_ADDR
// end ; 8 :
12766: GO 13177
12768: LD_INT 8
12770: DOUBLE
12771: EQUAL
12772: IFTRUE 12776
12774: GO 13176
12776: POP
// begin def_base_level := 0 ;
12777: LD_ADDR_EXP 42
12781: PUSH
12782: LD_INT 0
12784: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
12785: LD_ADDR_EXP 43
12789: PUSH
12790: LD_INT 0
12792: PPUSH
12793: LD_INT 1
12795: PPUSH
12796: CALL_OW 12
12800: ST_TO_ADDR
// def_skill_level := 0 ;
12801: LD_ADDR_EXP 44
12805: PUSH
12806: LD_INT 0
12808: ST_TO_ADDR
// def_starting_resources := 2 ;
12809: LD_ADDR_EXP 45
12813: PUSH
12814: LD_INT 2
12816: ST_TO_ADDR
// def_shipments_density := 1 ;
12817: LD_ADDR_EXP 46
12821: PUSH
12822: LD_INT 1
12824: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
12825: LD_ADDR_EXP 47
12829: PUSH
12830: LD_INT 0
12832: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
12833: LD_ADDR_EXP 48
12837: PUSH
12838: LD_INT 0
12840: ST_TO_ADDR
// def_shared_vision := 1 ;
12841: LD_ADDR_EXP 49
12845: PUSH
12846: LD_INT 1
12848: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
12849: LD_ADDR_EXP 50
12853: PUSH
12854: LD_INT 0
12856: PPUSH
12857: LD_INT 2
12859: PPUSH
12860: CALL_OW 12
12864: ST_TO_ADDR
// def_siberite_detection := 0 ;
12865: LD_ADDR_EXP 51
12869: PUSH
12870: LD_INT 0
12872: ST_TO_ADDR
// def_people_respawning := 0 ;
12873: LD_ADDR_EXP 52
12877: PUSH
12878: LD_INT 0
12880: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
12881: LD_ADDR_EXP 53
12885: PUSH
12886: LD_INT 2
12888: ST_TO_ADDR
// def_siberite_bomb := 0 ;
12889: LD_ADDR_EXP 54
12893: PUSH
12894: LD_INT 0
12896: ST_TO_ADDR
// def_builduptime := 0 ;
12897: LD_ADDR_EXP 55
12901: PUSH
12902: LD_INT 0
12904: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
12905: LD_ADDR_VAR 0 2
12909: PUSH
12910: LD_INT 23
12912: PUSH
12913: LD_INT 20
12915: PUSH
12916: LD_INT 40
12918: PUSH
12919: LD_INT 47
12921: PUSH
12922: LD_INT 46
12924: PUSH
12925: LD_INT 39
12927: PUSH
12928: LD_INT 71
12930: PUSH
12931: LD_INT 34
12933: PUSH
12934: LD_INT 41
12936: PUSH
12937: LD_INT 44
12939: PUSH
12940: LD_INT 17
12942: PUSH
12943: LD_INT 16
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
12960: LD_ADDR_VAR 0 3
12964: PUSH
12965: LD_INT 37
12967: PUSH
12968: LD_INT 5
12970: PUSH
12971: LD_INT 13
12973: PUSH
12974: LD_INT 34
12976: PUSH
12977: LD_INT 12
12979: PUSH
12980: LD_INT 15
12982: PUSH
12983: LD_INT 11
12985: PUSH
12986: LD_INT 14
12988: PUSH
12989: LD_INT 29
12991: PUSH
12992: LD_INT 30
12994: PUSH
12995: LD_INT 28
12997: PUSH
12998: LD_INT 24
13000: PUSH
13001: LD_INT 25
13003: PUSH
13004: LD_INT 20
13006: PUSH
13007: LD_INT 21
13009: PUSH
13010: LD_INT 22
13012: PUSH
13013: LD_INT 36
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13035: LD_ADDR_LOC 22
13039: PUSH
13040: EMPTY
13041: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
13042: LD_ADDR_LOC 23
13046: PUSH
13047: LD_INT 14
13049: PUSH
13050: EMPTY
13051: LIST
13052: ST_TO_ADDR
// Banned_Controls := [ ] ;
13053: LD_ADDR_LOC 24
13057: PUSH
13058: EMPTY
13059: ST_TO_ADDR
// Banned_Engines := [ ] ;
13060: LD_ADDR_LOC 25
13064: PUSH
13065: EMPTY
13066: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
13067: LD_ADDR_LOC 20
13071: PUSH
13072: LD_INT 31
13074: PUSH
13075: LD_INT 32
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: PUSH
13082: LD_INT 4
13084: PUSH
13085: EMPTY
13086: LIST
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
13092: LD_ADDR_LOC 21
13096: PUSH
13097: LD_INT 2
13099: PUSH
13100: LD_INT 1
13102: PUSH
13103: EMPTY
13104: LIST
13105: LIST
13106: ST_TO_ADDR
// for i := 1 to 8 do
13107: LD_ADDR_VAR 0 4
13111: PUSH
13112: DOUBLE
13113: LD_INT 1
13115: DEC
13116: ST_TO_ADDR
13117: LD_INT 8
13119: PUSH
13120: FOR_TO
13121: IFFALSE 13172
// if ( Side_Nations [ i ] = 3 ) then
13123: LD_EXP 19
13127: PUSH
13128: LD_VAR 0 4
13132: ARRAY
13133: PUSH
13134: LD_INT 3
13136: EQUAL
13137: IFFALSE 13170
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
13139: LD_ADDR_EXP 19
13143: PUSH
13144: LD_EXP 19
13148: PPUSH
13149: LD_VAR 0 4
13153: PPUSH
13154: LD_INT 1
13156: PPUSH
13157: LD_INT 2
13159: PPUSH
13160: CALL_OW 12
13164: PPUSH
13165: CALL_OW 1
13169: ST_TO_ADDR
13170: GO 13120
13172: POP
13173: POP
// end ; end ;
13174: GO 13177
13176: POP
// for i := 1 to 8 do
13177: LD_ADDR_VAR 0 4
13181: PUSH
13182: DOUBLE
13183: LD_INT 1
13185: DEC
13186: ST_TO_ADDR
13187: LD_INT 8
13189: PUSH
13190: FOR_TO
13191: IFFALSE 13275
// if Side_Positions [ i ] then
13193: LD_EXP 18
13197: PUSH
13198: LD_VAR 0 4
13202: ARRAY
13203: IFFALSE 13273
// begin for j in Unavailable_Techs do
13205: LD_ADDR_VAR 0 5
13209: PUSH
13210: LD_VAR 0 2
13214: PUSH
13215: FOR_IN
13216: IFFALSE 13237
// SetTech ( j , i , 0 ) ;
13218: LD_VAR 0 5
13222: PPUSH
13223: LD_VAR 0 4
13227: PPUSH
13228: LD_INT 0
13230: PPUSH
13231: CALL_OW 322
13235: GO 13215
13237: POP
13238: POP
// for j in Unavailable_Builds do
13239: LD_ADDR_VAR 0 5
13243: PUSH
13244: LD_VAR 0 3
13248: PUSH
13249: FOR_IN
13250: IFFALSE 13271
// SetRestrict ( j , i , 0 ) ;
13252: LD_VAR 0 5
13256: PPUSH
13257: LD_VAR 0 4
13261: PPUSH
13262: LD_INT 0
13264: PPUSH
13265: CALL_OW 324
13269: GO 13249
13271: POP
13272: POP
// end ;
13273: GO 13190
13275: POP
13276: POP
// end ;
13277: LD_VAR 0 1
13281: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
13282: LD_INT 0
13284: PPUSH
13285: PPUSH
13286: PPUSH
13287: PPUSH
13288: PPUSH
13289: PPUSH
13290: PPUSH
// for i := 1 to Restricted_Builds do
13291: LD_ADDR_VAR 0 2
13295: PUSH
13296: DOUBLE
13297: LD_INT 1
13299: DEC
13300: ST_TO_ADDR
13301: LD_LOC 20
13305: PUSH
13306: FOR_TO
13307: IFFALSE 13617
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
13309: LD_LOC 20
13313: PUSH
13314: LD_VAR 0 2
13318: ARRAY
13319: PUSH
13320: LD_INT 1
13322: ARRAY
13323: PUSH
13324: LD_INT 31
13326: DOUBLE
13327: EQUAL
13328: IFTRUE 13344
13330: LD_INT 32
13332: DOUBLE
13333: EQUAL
13334: IFTRUE 13344
13336: LD_INT 33
13338: DOUBLE
13339: EQUAL
13340: IFTRUE 13344
13342: GO 13355
13344: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
13345: LD_ADDR_VAR 0 6
13349: PUSH
13350: LD_STRING #Turrets
13352: ST_TO_ADDR
13353: GO 13400
13355: LD_INT 4
13357: DOUBLE
13358: EQUAL
13359: IFTRUE 13369
13361: LD_INT 5
13363: DOUBLE
13364: EQUAL
13365: IFTRUE 13369
13367: GO 13380
13369: POP
// btype := #Armouries ; b_Behemoth :
13370: LD_ADDR_VAR 0 6
13374: PUSH
13375: LD_STRING #Armouries
13377: ST_TO_ADDR
13378: GO 13400
13380: LD_INT 37
13382: DOUBLE
13383: EQUAL
13384: IFTRUE 13388
13386: GO 13399
13388: POP
// btype := #Behemoths ; end ;
13389: LD_ADDR_VAR 0 6
13393: PUSH
13394: LD_STRING #Behemoths
13396: ST_TO_ADDR
13397: GO 13400
13399: POP
// list := [ ] ;
13400: LD_ADDR_VAR 0 7
13404: PUSH
13405: EMPTY
13406: ST_TO_ADDR
// for j := 1 to 8 do
13407: LD_ADDR_VAR 0 3
13411: PUSH
13412: DOUBLE
13413: LD_INT 1
13415: DEC
13416: ST_TO_ADDR
13417: LD_INT 8
13419: PUSH
13420: FOR_TO
13421: IFFALSE 13514
// if Side_Positions [ j ] then
13423: LD_EXP 18
13427: PUSH
13428: LD_VAR 0 3
13432: ARRAY
13433: IFFALSE 13512
// begin amount := 0 ;
13435: LD_ADDR_VAR 0 5
13439: PUSH
13440: LD_INT 0
13442: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
13443: LD_ADDR_VAR 0 4
13447: PUSH
13448: LD_LOC 20
13452: PUSH
13453: LD_VAR 0 2
13457: ARRAY
13458: PUSH
13459: FOR_IN
13460: IFFALSE 13508
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
13462: LD_ADDR_VAR 0 5
13466: PUSH
13467: LD_VAR 0 5
13471: PUSH
13472: LD_INT 22
13474: PUSH
13475: LD_VAR 0 3
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: PUSH
13484: LD_INT 30
13486: PUSH
13487: LD_VAR 0 4
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: PPUSH
13500: CALL_OW 69
13504: PLUS
13505: ST_TO_ADDR
13506: GO 13459
13508: POP
13509: POP
// break ;
13510: GO 13514
// end ;
13512: GO 13420
13514: POP
13515: POP
// list := [ ] ;
13516: LD_ADDR_VAR 0 7
13520: PUSH
13521: EMPTY
13522: ST_TO_ADDR
// for j := 1 to 8 do
13523: LD_ADDR_VAR 0 3
13527: PUSH
13528: DOUBLE
13529: LD_INT 1
13531: DEC
13532: ST_TO_ADDR
13533: LD_INT 8
13535: PUSH
13536: FOR_TO
13537: IFFALSE 13557
// list := list ^ amount ;
13539: LD_ADDR_VAR 0 7
13543: PUSH
13544: LD_VAR 0 7
13548: PUSH
13549: LD_VAR 0 5
13553: ADD
13554: ST_TO_ADDR
13555: GO 13536
13557: POP
13558: POP
// Already_Built := Already_Built ^ [ list ] ;
13559: LD_ADDR_LOC 26
13563: PUSH
13564: LD_LOC 26
13568: PUSH
13569: LD_VAR 0 7
13573: PUSH
13574: EMPTY
13575: LIST
13576: ADD
13577: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
13578: LD_ADDR_LOC 27
13582: PUSH
13583: LD_LOC 27
13587: PUSH
13588: LD_VAR 0 6
13592: PUSH
13593: LD_VAR 0 5
13597: PUSH
13598: LD_LOC 21
13602: PUSH
13603: LD_VAR 0 2
13607: ARRAY
13608: PUSH
13609: EMPTY
13610: LIST
13611: LIST
13612: LIST
13613: ADD
13614: ST_TO_ADDR
// end ;
13615: GO 13306
13617: POP
13618: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13619: LD_ADDR_LOC 28
13623: PUSH
13624: LD_INT 0
13626: PUSH
13627: LD_INT 0
13629: PUSH
13630: LD_INT 0
13632: PUSH
13633: LD_INT 0
13635: PUSH
13636: LD_INT 0
13638: PUSH
13639: LD_INT 0
13641: PUSH
13642: LD_INT 0
13644: PUSH
13645: LD_INT 0
13647: PUSH
13648: EMPTY
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: ST_TO_ADDR
// if Limits_Info then
13658: LD_LOC 27
13662: IFFALSE 13678
// Limits_Info := #Limits ^ Limits_Info ;
13664: LD_ADDR_LOC 27
13668: PUSH
13669: LD_STRING #Limits
13671: PUSH
13672: LD_LOC 27
13676: ADD
13677: ST_TO_ADDR
// end ;
13678: LD_VAR 0 1
13682: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
13683: LD_INT 0
13685: PPUSH
13686: PPUSH
13687: PPUSH
13688: PPUSH
// for i := 1 to Restricted_Builds do
13689: LD_ADDR_VAR 0 7
13693: PUSH
13694: DOUBLE
13695: LD_INT 1
13697: DEC
13698: ST_TO_ADDR
13699: LD_LOC 20
13703: PUSH
13704: FOR_TO
13705: IFFALSE 14128
// if BType in Restricted_Builds [ i ] then
13707: LD_VAR 0 2
13711: PUSH
13712: LD_LOC 20
13716: PUSH
13717: LD_VAR 0 7
13721: ARRAY
13722: IN
13723: IFFALSE 14126
// begin if old_side then
13725: LD_VAR 0 4
13729: IFFALSE 13855
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
13731: LD_LOC 26
13735: PUSH
13736: LD_VAR 0 7
13740: ARRAY
13741: PUSH
13742: LD_VAR 0 3
13746: ARRAY
13747: PUSH
13748: LD_VAR 0 5
13752: PLUS
13753: PUSH
13754: LD_LOC 21
13758: PUSH
13759: LD_VAR 0 7
13763: ARRAY
13764: GREATER
13765: IFFALSE 13791
// begin SetSide ( un , old_side ) ;
13767: LD_VAR 0 1
13771: PPUSH
13772: LD_VAR 0 4
13776: PPUSH
13777: CALL_OW 235
// count := 0 ;
13781: LD_ADDR_VAR 0 5
13785: PUSH
13786: LD_INT 0
13788: ST_TO_ADDR
// end else
13789: GO 13855
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
13791: LD_ADDR_LOC 26
13795: PUSH
13796: LD_LOC 26
13800: PPUSH
13801: LD_VAR 0 7
13805: PPUSH
13806: LD_LOC 26
13810: PUSH
13811: LD_VAR 0 7
13815: ARRAY
13816: PPUSH
13817: LD_VAR 0 4
13821: PPUSH
13822: LD_LOC 26
13826: PUSH
13827: LD_VAR 0 7
13831: ARRAY
13832: PUSH
13833: LD_VAR 0 4
13837: ARRAY
13838: PUSH
13839: LD_VAR 0 5
13843: MINUS
13844: PPUSH
13845: CALL_OW 1
13849: PPUSH
13850: CALL_OW 1
13854: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
13855: LD_ADDR_LOC 26
13859: PUSH
13860: LD_LOC 26
13864: PPUSH
13865: LD_VAR 0 7
13869: PPUSH
13870: LD_LOC 26
13874: PUSH
13875: LD_VAR 0 7
13879: ARRAY
13880: PPUSH
13881: LD_VAR 0 3
13885: PPUSH
13886: LD_LOC 26
13890: PUSH
13891: LD_VAR 0 7
13895: ARRAY
13896: PUSH
13897: LD_VAR 0 3
13901: ARRAY
13902: PUSH
13903: LD_VAR 0 5
13907: PLUS
13908: PPUSH
13909: CALL_OW 1
13913: PPUSH
13914: CALL_OW 1
13918: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
13919: LD_VAR 0 5
13923: PUSH
13924: LD_INT 0
13926: NONEQUAL
13927: PUSH
13928: LD_VAR 0 3
13932: PUSH
13933: LD_OWVAR 2
13937: EQUAL
13938: AND
13939: IFFALSE 13982
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
13941: LD_ADDR_LOC 27
13945: PUSH
13946: LD_LOC 27
13950: PPUSH
13951: LD_INT 3
13953: PUSH
13954: LD_VAR 0 7
13958: MUL
13959: PPUSH
13960: LD_LOC 26
13964: PUSH
13965: LD_VAR 0 7
13969: ARRAY
13970: PUSH
13971: LD_VAR 0 3
13975: ARRAY
13976: PPUSH
13977: CALL_OW 1
13981: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
13982: LD_LOC 26
13986: PUSH
13987: LD_VAR 0 7
13991: ARRAY
13992: PUSH
13993: LD_VAR 0 3
13997: ARRAY
13998: PUSH
13999: LD_LOC 21
14003: PUSH
14004: LD_VAR 0 7
14008: ARRAY
14009: GREATER
14010: IFFALSE 14037
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
14012: LD_ADDR_LOC 28
14016: PUSH
14017: LD_LOC 28
14021: PPUSH
14022: LD_VAR 0 3
14026: PPUSH
14027: LD_INT 1
14029: PPUSH
14030: CALL_OW 1
14034: ST_TO_ADDR
// end else
14035: GO 14124
// begin for j := 1 to Restricted_Builds do
14037: LD_ADDR_VAR 0 8
14041: PUSH
14042: DOUBLE
14043: LD_INT 1
14045: DEC
14046: ST_TO_ADDR
14047: LD_LOC 20
14051: PUSH
14052: FOR_TO
14053: IFFALSE 14097
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
14055: LD_LOC 26
14059: PUSH
14060: LD_VAR 0 8
14064: ARRAY
14065: PUSH
14066: LD_VAR 0 3
14070: ARRAY
14071: PUSH
14072: LD_LOC 21
14076: PUSH
14077: LD_VAR 0 8
14081: ARRAY
14082: GREATER
14083: IFFALSE 14095
// begin Is_Cheater := true ;
14085: LD_ADDR_VAR 0 9
14089: PUSH
14090: LD_INT 1
14092: ST_TO_ADDR
// break ;
14093: GO 14097
// end ;
14095: GO 14052
14097: POP
14098: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
14099: LD_ADDR_LOC 28
14103: PUSH
14104: LD_LOC 28
14108: PPUSH
14109: LD_VAR 0 3
14113: PPUSH
14114: LD_VAR 0 9
14118: PPUSH
14119: CALL_OW 1
14123: ST_TO_ADDR
// end ; break ;
14124: GO 14128
// end ;
14126: GO 13704
14128: POP
14129: POP
// end ;
14130: LD_VAR 0 6
14134: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
14135: LD_VAR 0 5
14139: PUSH
14140: LD_LOC 22
14144: IN
14145: PUSH
14146: LD_VAR 0 2
14150: PUSH
14151: LD_LOC 23
14155: IN
14156: OR
14157: PUSH
14158: LD_VAR 0 4
14162: PUSH
14163: LD_LOC 24
14167: IN
14168: OR
14169: PUSH
14170: LD_VAR 0 3
14174: PUSH
14175: LD_LOC 25
14179: IN
14180: OR
14181: IFFALSE 14192
// ComCancel ( factory ) ;
14183: LD_VAR 0 1
14187: PPUSH
14188: CALL_OW 127
// end ;
14192: PPOPN 5
14194: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
14195: LD_VAR 0 2
14199: PUSH
14200: LD_LOC 22
14204: IN
14205: IFFALSE 14216
// ComCancel ( building ) ;
14207: LD_VAR 0 1
14211: PPUSH
14212: CALL_OW 127
// end ; end_of_file
14216: PPOPN 2
14218: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
14219: LD_INT 0
14221: PPUSH
14222: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
14223: LD_ADDR_VAR 0 2
14227: PUSH
14228: LD_STRING #Multi1x1-Time
14230: PUSH
14231: LD_OWVAR 1
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
14240: LD_INT 0
14242: PUSH
14243: LD_EXP 15
14247: PUSH
14248: LD_OWVAR 1
14252: MINUS
14253: LESSEQUAL
14254: IFFALSE 14285
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
14256: LD_ADDR_VAR 0 2
14260: PUSH
14261: LD_VAR 0 2
14265: PUSH
14266: LD_STRING #allowedsibbomb
14268: PUSH
14269: LD_EXP 15
14273: PUSH
14274: LD_OWVAR 1
14278: MINUS
14279: PUSH
14280: EMPTY
14281: LIST
14282: LIST
14283: ADD
14284: ST_TO_ADDR
// if ( ExtraStrings ) then
14285: LD_EXP 59
14289: IFFALSE 14311
// AllStrings := AllStrings ^  ^ ExtraStrings ;
14291: LD_ADDR_VAR 0 2
14295: PUSH
14296: LD_VAR 0 2
14300: PUSH
14301: LD_STRING 
14303: ADD
14304: PUSH
14305: LD_EXP 59
14309: ADD
14310: ST_TO_ADDR
// if ( LimitsStrings ) then
14311: CALL 11059 0 0
14315: IFFALSE 14337
// AllStrings := AllStrings ^  ^ LimitsStrings ;
14317: LD_ADDR_VAR 0 2
14321: PUSH
14322: LD_VAR 0 2
14326: PUSH
14327: LD_STRING 
14329: ADD
14330: PUSH
14331: CALL 11059 0 0
14335: ADD
14336: ST_TO_ADDR
// Display_Strings := AllStrings ;
14337: LD_ADDR_OWVAR 47
14341: PUSH
14342: LD_VAR 0 2
14346: ST_TO_ADDR
// end ;
14347: LD_VAR 0 1
14351: RET
// every 0 0$1 do
14352: GO 14354
14354: DISABLE
// begin ShowTimer ;
14355: CALL 14219 0 0
// enable ;
14359: ENABLE
// end ; end_of_file
14360: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
14361: LD_INT 0
14363: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
14364: LD_VAR 0 1
14368: PPUSH
14369: CALL_OW 255
14373: PUSH
14374: LD_VAR 0 4
14378: EQUAL
14379: IFFALSE 14398
// begin SetAchievement ( ACH_RAD ) ;
14381: LD_STRING ACH_RAD
14383: PPUSH
14384: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
14388: LD_STRING ACH_NL
14390: PPUSH
14391: LD_INT 1
14393: PPUSH
14394: CALL_OW 564
// end end ;
14398: LD_VAR 0 5
14402: RET
// export function SA_Win ( side ) ; begin
14403: LD_INT 0
14405: PPUSH
// case side of 1 :
14406: LD_VAR 0 1
14410: PUSH
14411: LD_INT 1
14413: DOUBLE
14414: EQUAL
14415: IFTRUE 14419
14417: GO 14432
14419: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
14420: LD_STRING ACH_AH
14422: PPUSH
14423: LD_INT 1
14425: PPUSH
14426: CALL_OW 564
14430: GO 14595
14432: LD_INT 2
14434: DOUBLE
14435: EQUAL
14436: IFTRUE 14440
14438: GO 14453
14440: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
14441: LD_STRING ACH_E
14443: PPUSH
14444: LD_INT 1
14446: PPUSH
14447: CALL_OW 564
14451: GO 14595
14453: LD_INT 3
14455: DOUBLE
14456: EQUAL
14457: IFTRUE 14461
14459: GO 14474
14461: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
14462: LD_STRING ACH_OOL
14464: PPUSH
14465: LD_INT 1
14467: PPUSH
14468: CALL_OW 564
14472: GO 14595
14474: LD_INT 1
14476: PUSH
14477: LD_INT 2
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: DOUBLE
14484: EQUAL
14485: IFTRUE 14489
14487: GO 14514
14489: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
14490: LD_STRING ACH_AH
14492: PPUSH
14493: LD_REAL  5.00000000000000E-0001
14496: PPUSH
14497: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
14501: LD_STRING ACH_E
14503: PPUSH
14504: LD_REAL  5.00000000000000E-0001
14507: PPUSH
14508: CALL_OW 564
// end ; [ 2 , 3 ] :
14512: GO 14595
14514: LD_INT 2
14516: PUSH
14517: LD_INT 3
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: DOUBLE
14524: EQUAL
14525: IFTRUE 14529
14527: GO 14554
14529: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
14530: LD_STRING ACH_OOL
14532: PPUSH
14533: LD_REAL  5.00000000000000E-0001
14536: PPUSH
14537: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
14541: LD_STRING ACH_E
14543: PPUSH
14544: LD_REAL  5.00000000000000E-0001
14547: PPUSH
14548: CALL_OW 564
// end ; [ 3 , 1 ] :
14552: GO 14595
14554: LD_INT 3
14556: PUSH
14557: LD_INT 1
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: DOUBLE
14564: EQUAL
14565: IFTRUE 14569
14567: GO 14594
14569: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
14570: LD_STRING ACH_AH
14572: PPUSH
14573: LD_REAL  5.00000000000000E-0001
14576: PPUSH
14577: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
14581: LD_STRING ACH_OOL
14583: PPUSH
14584: LD_REAL  5.00000000000000E-0001
14587: PPUSH
14588: CALL_OW 564
// end ; end ;
14592: GO 14595
14594: POP
// end ; end_of_file
14595: LD_VAR 0 2
14599: RET
// export function SetMpTechs ( ) ; var side , i ; begin
14600: LD_INT 0
14602: PPUSH
14603: PPUSH
14604: PPUSH
// for side = 1 to 8 do
14605: LD_ADDR_VAR 0 2
14609: PUSH
14610: DOUBLE
14611: LD_INT 1
14613: DEC
14614: ST_TO_ADDR
14615: LD_INT 8
14617: PUSH
14618: FOR_TO
14619: IFFALSE 14740
// begin for i = 1 to 72 do
14621: LD_ADDR_VAR 0 3
14625: PUSH
14626: DOUBLE
14627: LD_INT 1
14629: DEC
14630: ST_TO_ADDR
14631: LD_INT 72
14633: PUSH
14634: FOR_TO
14635: IFFALSE 14666
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
14637: LD_VAR 0 3
14641: PPUSH
14642: LD_VAR 0 2
14646: PPUSH
14647: LD_INT 0
14649: PPUSH
14650: LD_VAR 0 3
14654: PPUSH
14655: CALL_OW 565
14659: PPUSH
14660: CALL_OW 322
14664: GO 14634
14666: POP
14667: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
14668: LD_INT 73
14670: PPUSH
14671: LD_VAR 0 2
14675: PPUSH
14676: LD_INT 0
14678: PPUSH
14679: LD_INT 25
14681: PPUSH
14682: CALL_OW 565
14686: PPUSH
14687: CALL_OW 322
// for i = 0 to 40 do
14691: LD_ADDR_VAR 0 3
14695: PUSH
14696: DOUBLE
14697: LD_INT 0
14699: DEC
14700: ST_TO_ADDR
14701: LD_INT 40
14703: PUSH
14704: FOR_TO
14705: IFFALSE 14736
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
14707: LD_VAR 0 3
14711: PPUSH
14712: LD_VAR 0 2
14716: PPUSH
14717: LD_INT 1
14719: PPUSH
14720: LD_VAR 0 3
14724: PPUSH
14725: CALL_OW 565
14729: PPUSH
14730: CALL_OW 324
14734: GO 14704
14736: POP
14737: POP
// end ;
14738: GO 14618
14740: POP
14741: POP
// end ;
14742: LD_VAR 0 1
14746: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
14747: LD_INT 0
14749: PPUSH
14750: PPUSH
14751: PPUSH
// for side = 1 to 8 do
14752: LD_ADDR_VAR 0 3
14756: PUSH
14757: DOUBLE
14758: LD_INT 1
14760: DEC
14761: ST_TO_ADDR
14762: LD_INT 8
14764: PUSH
14765: FOR_TO
14766: IFFALSE 18762
// begin for i = 1 to 73 do
14768: LD_ADDR_VAR 0 4
14772: PUSH
14773: DOUBLE
14774: LD_INT 1
14776: DEC
14777: ST_TO_ADDR
14778: LD_INT 73
14780: PUSH
14781: FOR_TO
14782: IFFALSE 14803
// SetTech ( i , side , state_disabled ) ;
14784: LD_VAR 0 4
14788: PPUSH
14789: LD_VAR 0 3
14793: PPUSH
14794: LD_INT 0
14796: PPUSH
14797: CALL_OW 322
14801: GO 14781
14803: POP
14804: POP
// for i = 0 to 40 do
14805: LD_ADDR_VAR 0 4
14809: PUSH
14810: DOUBLE
14811: LD_INT 0
14813: DEC
14814: ST_TO_ADDR
14815: LD_INT 40
14817: PUSH
14818: FOR_TO
14819: IFFALSE 14840
// SetRestrict ( i , side , false ) ;
14821: LD_VAR 0 4
14825: PPUSH
14826: LD_VAR 0 3
14830: PPUSH
14831: LD_INT 0
14833: PPUSH
14834: CALL_OW 324
14838: GO 14818
14840: POP
14841: POP
// case level of 1 :
14842: LD_VAR 0 1
14846: PUSH
14847: LD_INT 1
14849: DOUBLE
14850: EQUAL
14851: IFTRUE 14855
14853: GO 15008
14855: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14856: LD_INT 35
14858: PPUSH
14859: LD_VAR 0 3
14863: PPUSH
14864: LD_INT 1
14866: PPUSH
14867: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14871: LD_INT 45
14873: PPUSH
14874: LD_VAR 0 3
14878: PPUSH
14879: LD_INT 1
14881: PPUSH
14882: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14886: LD_INT 46
14888: PPUSH
14889: LD_VAR 0 3
14893: PPUSH
14894: LD_INT 1
14896: PPUSH
14897: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14901: LD_INT 47
14903: PPUSH
14904: LD_VAR 0 3
14908: PPUSH
14909: LD_INT 1
14911: PPUSH
14912: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14916: LD_INT 0
14918: PPUSH
14919: LD_VAR 0 3
14923: PPUSH
14924: LD_INT 1
14926: PPUSH
14927: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14931: LD_INT 2
14933: PPUSH
14934: LD_VAR 0 3
14938: PPUSH
14939: LD_INT 1
14941: PPUSH
14942: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14946: LD_INT 4
14948: PPUSH
14949: LD_VAR 0 3
14953: PPUSH
14954: LD_INT 1
14956: PPUSH
14957: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14961: LD_INT 6
14963: PPUSH
14964: LD_VAR 0 3
14968: PPUSH
14969: LD_INT 1
14971: PPUSH
14972: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14976: LD_INT 29
14978: PPUSH
14979: LD_VAR 0 3
14983: PPUSH
14984: LD_INT 1
14986: PPUSH
14987: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14991: LD_INT 31
14993: PPUSH
14994: LD_VAR 0 3
14998: PPUSH
14999: LD_INT 1
15001: PPUSH
15002: CALL_OW 324
// end ; 2 :
15006: GO 18760
15008: LD_INT 2
15010: DOUBLE
15011: EQUAL
15012: IFTRUE 15016
15014: GO 15214
15016: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15017: LD_INT 35
15019: PPUSH
15020: LD_VAR 0 3
15024: PPUSH
15025: LD_INT 1
15027: PPUSH
15028: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15032: LD_INT 45
15034: PPUSH
15035: LD_VAR 0 3
15039: PPUSH
15040: LD_INT 1
15042: PPUSH
15043: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15047: LD_INT 46
15049: PPUSH
15050: LD_VAR 0 3
15054: PPUSH
15055: LD_INT 1
15057: PPUSH
15058: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15062: LD_INT 47
15064: PPUSH
15065: LD_VAR 0 3
15069: PPUSH
15070: LD_INT 1
15072: PPUSH
15073: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15077: LD_INT 1
15079: PPUSH
15080: LD_VAR 0 3
15084: PPUSH
15085: LD_INT 1
15087: PPUSH
15088: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15092: LD_INT 2
15094: PPUSH
15095: LD_VAR 0 3
15099: PPUSH
15100: LD_INT 1
15102: PPUSH
15103: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15107: LD_INT 11
15109: PPUSH
15110: LD_VAR 0 3
15114: PPUSH
15115: LD_INT 1
15117: PPUSH
15118: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15122: LD_INT 0
15124: PPUSH
15125: LD_VAR 0 3
15129: PPUSH
15130: LD_INT 1
15132: PPUSH
15133: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15137: LD_INT 2
15139: PPUSH
15140: LD_VAR 0 3
15144: PPUSH
15145: LD_INT 1
15147: PPUSH
15148: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15152: LD_INT 4
15154: PPUSH
15155: LD_VAR 0 3
15159: PPUSH
15160: LD_INT 1
15162: PPUSH
15163: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15167: LD_INT 6
15169: PPUSH
15170: LD_VAR 0 3
15174: PPUSH
15175: LD_INT 1
15177: PPUSH
15178: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15182: LD_INT 29
15184: PPUSH
15185: LD_VAR 0 3
15189: PPUSH
15190: LD_INT 1
15192: PPUSH
15193: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15197: LD_INT 31
15199: PPUSH
15200: LD_VAR 0 3
15204: PPUSH
15205: LD_INT 1
15207: PPUSH
15208: CALL_OW 324
// end ; 3 :
15212: GO 18760
15214: LD_INT 3
15216: DOUBLE
15217: EQUAL
15218: IFTRUE 15222
15220: GO 15675
15222: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15223: LD_INT 35
15225: PPUSH
15226: LD_VAR 0 3
15230: PPUSH
15231: LD_INT 1
15233: PPUSH
15234: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15238: LD_INT 45
15240: PPUSH
15241: LD_VAR 0 3
15245: PPUSH
15246: LD_INT 1
15248: PPUSH
15249: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15253: LD_INT 46
15255: PPUSH
15256: LD_VAR 0 3
15260: PPUSH
15261: LD_INT 1
15263: PPUSH
15264: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15268: LD_INT 47
15270: PPUSH
15271: LD_VAR 0 3
15275: PPUSH
15276: LD_INT 1
15278: PPUSH
15279: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15283: LD_INT 1
15285: PPUSH
15286: LD_VAR 0 3
15290: PPUSH
15291: LD_INT 1
15293: PPUSH
15294: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15298: LD_INT 2
15300: PPUSH
15301: LD_VAR 0 3
15305: PPUSH
15306: LD_INT 1
15308: PPUSH
15309: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15313: LD_INT 11
15315: PPUSH
15316: LD_VAR 0 3
15320: PPUSH
15321: LD_INT 1
15323: PPUSH
15324: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15328: LD_INT 48
15330: PPUSH
15331: LD_VAR 0 3
15335: PPUSH
15336: LD_INT 1
15338: PPUSH
15339: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15343: LD_INT 69
15345: PPUSH
15346: LD_VAR 0 3
15350: PPUSH
15351: LD_INT 1
15353: PPUSH
15354: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15358: LD_INT 39
15360: PPUSH
15361: LD_VAR 0 3
15365: PPUSH
15366: LD_INT 1
15368: PPUSH
15369: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15373: LD_INT 43
15375: PPUSH
15376: LD_VAR 0 3
15380: PPUSH
15381: LD_INT 1
15383: PPUSH
15384: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15388: LD_INT 51
15390: PPUSH
15391: LD_VAR 0 3
15395: PPUSH
15396: LD_INT 1
15398: PPUSH
15399: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15403: LD_INT 6
15405: PPUSH
15406: LD_VAR 0 3
15410: PPUSH
15411: LD_INT 1
15413: PPUSH
15414: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15418: LD_INT 0
15420: PPUSH
15421: LD_VAR 0 3
15425: PPUSH
15426: LD_INT 1
15428: PPUSH
15429: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15433: LD_INT 2
15435: PPUSH
15436: LD_VAR 0 3
15440: PPUSH
15441: LD_INT 1
15443: PPUSH
15444: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
15448: LD_INT 3
15450: PPUSH
15451: LD_VAR 0 3
15455: PPUSH
15456: LD_INT 1
15458: PPUSH
15459: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15463: LD_INT 4
15465: PPUSH
15466: LD_VAR 0 3
15470: PPUSH
15471: LD_INT 1
15473: PPUSH
15474: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15478: LD_INT 6
15480: PPUSH
15481: LD_VAR 0 3
15485: PPUSH
15486: LD_INT 1
15488: PPUSH
15489: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
15493: LD_INT 7
15495: PPUSH
15496: LD_VAR 0 3
15500: PPUSH
15501: LD_INT 1
15503: PPUSH
15504: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
15508: LD_INT 8
15510: PPUSH
15511: LD_VAR 0 3
15515: PPUSH
15516: LD_INT 1
15518: PPUSH
15519: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
15523: LD_INT 10
15525: PPUSH
15526: LD_VAR 0 3
15530: PPUSH
15531: LD_INT 1
15533: PPUSH
15534: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
15538: LD_INT 15
15540: PPUSH
15541: LD_VAR 0 3
15545: PPUSH
15546: LD_INT 1
15548: PPUSH
15549: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
15553: LD_INT 16
15555: PPUSH
15556: LD_VAR 0 3
15560: PPUSH
15561: LD_INT 1
15563: PPUSH
15564: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
15568: LD_INT 17
15570: PPUSH
15571: LD_VAR 0 3
15575: PPUSH
15576: LD_INT 1
15578: PPUSH
15579: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
15583: LD_INT 20
15585: PPUSH
15586: LD_VAR 0 3
15590: PPUSH
15591: LD_INT 1
15593: PPUSH
15594: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
15598: LD_INT 26
15600: PPUSH
15601: LD_VAR 0 3
15605: PPUSH
15606: LD_INT 1
15608: PPUSH
15609: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15613: LD_INT 27
15615: PPUSH
15616: LD_VAR 0 3
15620: PPUSH
15621: LD_INT 1
15623: PPUSH
15624: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15628: LD_INT 29
15630: PPUSH
15631: LD_VAR 0 3
15635: PPUSH
15636: LD_INT 1
15638: PPUSH
15639: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15643: LD_INT 31
15645: PPUSH
15646: LD_VAR 0 3
15650: PPUSH
15651: LD_INT 1
15653: PPUSH
15654: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15658: LD_INT 32
15660: PPUSH
15661: LD_VAR 0 3
15665: PPUSH
15666: LD_INT 1
15668: PPUSH
15669: CALL_OW 324
// end ; 4 :
15673: GO 18760
15675: LD_INT 4
15677: DOUBLE
15678: EQUAL
15679: IFTRUE 15683
15681: GO 16631
15683: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15684: LD_INT 35
15686: PPUSH
15687: LD_VAR 0 3
15691: PPUSH
15692: LD_INT 1
15694: PPUSH
15695: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15699: LD_INT 45
15701: PPUSH
15702: LD_VAR 0 3
15706: PPUSH
15707: LD_INT 1
15709: PPUSH
15710: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15714: LD_INT 46
15716: PPUSH
15717: LD_VAR 0 3
15721: PPUSH
15722: LD_INT 1
15724: PPUSH
15725: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15729: LD_INT 47
15731: PPUSH
15732: LD_VAR 0 3
15736: PPUSH
15737: LD_INT 1
15739: PPUSH
15740: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15744: LD_INT 1
15746: PPUSH
15747: LD_VAR 0 3
15751: PPUSH
15752: LD_INT 1
15754: PPUSH
15755: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15759: LD_INT 2
15761: PPUSH
15762: LD_VAR 0 3
15766: PPUSH
15767: LD_INT 1
15769: PPUSH
15770: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15774: LD_INT 11
15776: PPUSH
15777: LD_VAR 0 3
15781: PPUSH
15782: LD_INT 1
15784: PPUSH
15785: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15789: LD_INT 20
15791: PPUSH
15792: LD_VAR 0 3
15796: PPUSH
15797: LD_INT 1
15799: PPUSH
15800: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15804: LD_INT 48
15806: PPUSH
15807: LD_VAR 0 3
15811: PPUSH
15812: LD_INT 1
15814: PPUSH
15815: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15819: LD_INT 49
15821: PPUSH
15822: LD_VAR 0 3
15826: PPUSH
15827: LD_INT 1
15829: PPUSH
15830: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15834: LD_INT 69
15836: PPUSH
15837: LD_VAR 0 3
15841: PPUSH
15842: LD_INT 1
15844: PPUSH
15845: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15849: LD_INT 39
15851: PPUSH
15852: LD_VAR 0 3
15856: PPUSH
15857: LD_INT 1
15859: PPUSH
15860: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15864: LD_INT 34
15866: PPUSH
15867: LD_VAR 0 3
15871: PPUSH
15872: LD_INT 1
15874: PPUSH
15875: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15879: LD_INT 42
15881: PPUSH
15882: LD_VAR 0 3
15886: PPUSH
15887: LD_INT 1
15889: PPUSH
15890: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15894: LD_INT 44
15896: PPUSH
15897: LD_VAR 0 3
15901: PPUSH
15902: LD_INT 1
15904: PPUSH
15905: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15909: LD_INT 41
15911: PPUSH
15912: LD_VAR 0 3
15916: PPUSH
15917: LD_INT 1
15919: PPUSH
15920: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15924: LD_INT 43
15926: PPUSH
15927: LD_VAR 0 3
15931: PPUSH
15932: LD_INT 1
15934: PPUSH
15935: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15939: LD_INT 70
15941: PPUSH
15942: LD_VAR 0 3
15946: PPUSH
15947: LD_INT 1
15949: PPUSH
15950: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15954: LD_INT 51
15956: PPUSH
15957: LD_VAR 0 3
15961: PPUSH
15962: LD_INT 1
15964: PPUSH
15965: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15969: LD_INT 52
15971: PPUSH
15972: LD_VAR 0 3
15976: PPUSH
15977: LD_INT 1
15979: PPUSH
15980: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15984: LD_INT 6
15986: PPUSH
15987: LD_VAR 0 3
15991: PPUSH
15992: LD_INT 1
15994: PPUSH
15995: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
15999: LD_INT 15
16001: PPUSH
16002: LD_VAR 0 3
16006: PPUSH
16007: LD_INT 1
16009: PPUSH
16010: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16014: LD_INT 7
16016: PPUSH
16017: LD_VAR 0 3
16021: PPUSH
16022: LD_INT 1
16024: PPUSH
16025: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16029: LD_INT 12
16031: PPUSH
16032: LD_VAR 0 3
16036: PPUSH
16037: LD_INT 1
16039: PPUSH
16040: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
16044: LD_INT 18
16046: PPUSH
16047: LD_VAR 0 3
16051: PPUSH
16052: LD_INT 1
16054: PPUSH
16055: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
16059: LD_INT 60
16061: PPUSH
16062: LD_VAR 0 3
16066: PPUSH
16067: LD_INT 1
16069: PPUSH
16070: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
16074: LD_INT 9
16076: PPUSH
16077: LD_VAR 0 3
16081: PPUSH
16082: LD_INT 1
16084: PPUSH
16085: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
16089: LD_INT 30
16091: PPUSH
16092: LD_VAR 0 3
16096: PPUSH
16097: LD_INT 1
16099: PPUSH
16100: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
16104: LD_INT 37
16106: PPUSH
16107: LD_VAR 0 3
16111: PPUSH
16112: LD_INT 1
16114: PPUSH
16115: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
16119: LD_INT 5
16121: PPUSH
16122: LD_VAR 0 3
16126: PPUSH
16127: LD_INT 1
16129: PPUSH
16130: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
16134: LD_INT 66
16136: PPUSH
16137: LD_VAR 0 3
16141: PPUSH
16142: LD_INT 1
16144: PPUSH
16145: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
16149: LD_INT 21
16151: PPUSH
16152: LD_VAR 0 3
16156: PPUSH
16157: LD_INT 1
16159: PPUSH
16160: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
16164: LD_INT 22
16166: PPUSH
16167: LD_VAR 0 3
16171: PPUSH
16172: LD_INT 1
16174: PPUSH
16175: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
16179: LD_INT 54
16181: PPUSH
16182: LD_VAR 0 3
16186: PPUSH
16187: LD_INT 1
16189: PPUSH
16190: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16194: LD_INT 0
16196: PPUSH
16197: LD_VAR 0 3
16201: PPUSH
16202: LD_INT 1
16204: PPUSH
16205: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
16209: LD_INT 1
16211: PPUSH
16212: LD_VAR 0 3
16216: PPUSH
16217: LD_INT 1
16219: PPUSH
16220: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16224: LD_INT 2
16226: PPUSH
16227: LD_VAR 0 3
16231: PPUSH
16232: LD_INT 1
16234: PPUSH
16235: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
16239: LD_INT 3
16241: PPUSH
16242: LD_VAR 0 3
16246: PPUSH
16247: LD_INT 1
16249: PPUSH
16250: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16254: LD_INT 4
16256: PPUSH
16257: LD_VAR 0 3
16261: PPUSH
16262: LD_INT 1
16264: PPUSH
16265: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
16269: LD_INT 5
16271: PPUSH
16272: LD_VAR 0 3
16276: PPUSH
16277: LD_INT 1
16279: PPUSH
16280: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16284: LD_INT 6
16286: PPUSH
16287: LD_VAR 0 3
16291: PPUSH
16292: LD_INT 1
16294: PPUSH
16295: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
16299: LD_INT 7
16301: PPUSH
16302: LD_VAR 0 3
16306: PPUSH
16307: LD_INT 1
16309: PPUSH
16310: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
16314: LD_INT 8
16316: PPUSH
16317: LD_VAR 0 3
16321: PPUSH
16322: LD_INT 1
16324: PPUSH
16325: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
16329: LD_INT 10
16331: PPUSH
16332: LD_VAR 0 3
16336: PPUSH
16337: LD_INT 1
16339: PPUSH
16340: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
16344: LD_INT 11
16346: PPUSH
16347: LD_VAR 0 3
16351: PPUSH
16352: LD_INT 1
16354: PPUSH
16355: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
16359: LD_INT 12
16361: PPUSH
16362: LD_VAR 0 3
16366: PPUSH
16367: LD_INT 1
16369: PPUSH
16370: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
16374: LD_INT 13
16376: PPUSH
16377: LD_VAR 0 3
16381: PPUSH
16382: LD_INT 1
16384: PPUSH
16385: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
16389: LD_INT 14
16391: PPUSH
16392: LD_VAR 0 3
16396: PPUSH
16397: LD_INT 1
16399: PPUSH
16400: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
16404: LD_INT 15
16406: PPUSH
16407: LD_VAR 0 3
16411: PPUSH
16412: LD_INT 1
16414: PPUSH
16415: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
16419: LD_INT 16
16421: PPUSH
16422: LD_VAR 0 3
16426: PPUSH
16427: LD_INT 1
16429: PPUSH
16430: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
16434: LD_INT 17
16436: PPUSH
16437: LD_VAR 0 3
16441: PPUSH
16442: LD_INT 1
16444: PPUSH
16445: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
16449: LD_INT 19
16451: PPUSH
16452: LD_VAR 0 3
16456: PPUSH
16457: LD_INT 1
16459: PPUSH
16460: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
16464: LD_INT 20
16466: PPUSH
16467: LD_VAR 0 3
16471: PPUSH
16472: LD_INT 1
16474: PPUSH
16475: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
16479: LD_INT 21
16481: PPUSH
16482: LD_VAR 0 3
16486: PPUSH
16487: LD_INT 1
16489: PPUSH
16490: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
16494: LD_INT 23
16496: PPUSH
16497: LD_VAR 0 3
16501: PPUSH
16502: LD_INT 1
16504: PPUSH
16505: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
16509: LD_INT 26
16511: PPUSH
16512: LD_VAR 0 3
16516: PPUSH
16517: LD_INT 1
16519: PPUSH
16520: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16524: LD_INT 27
16526: PPUSH
16527: LD_VAR 0 3
16531: PPUSH
16532: LD_INT 1
16534: PPUSH
16535: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
16539: LD_INT 28
16541: PPUSH
16542: LD_VAR 0 3
16546: PPUSH
16547: LD_INT 1
16549: PPUSH
16550: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16554: LD_INT 29
16556: PPUSH
16557: LD_VAR 0 3
16561: PPUSH
16562: LD_INT 1
16564: PPUSH
16565: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
16569: LD_INT 30
16571: PPUSH
16572: LD_VAR 0 3
16576: PPUSH
16577: LD_INT 1
16579: PPUSH
16580: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16584: LD_INT 31
16586: PPUSH
16587: LD_VAR 0 3
16591: PPUSH
16592: LD_INT 1
16594: PPUSH
16595: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16599: LD_INT 32
16601: PPUSH
16602: LD_VAR 0 3
16606: PPUSH
16607: LD_INT 1
16609: PPUSH
16610: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
16614: LD_INT 36
16616: PPUSH
16617: LD_VAR 0 3
16621: PPUSH
16622: LD_INT 1
16624: PPUSH
16625: CALL_OW 324
// end ; 5 :
16629: GO 18760
16631: LD_INT 5
16633: DOUBLE
16634: EQUAL
16635: IFTRUE 16639
16637: GO 17752
16639: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16640: LD_INT 35
16642: PPUSH
16643: LD_VAR 0 3
16647: PPUSH
16648: LD_INT 1
16650: PPUSH
16651: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16655: LD_INT 45
16657: PPUSH
16658: LD_VAR 0 3
16662: PPUSH
16663: LD_INT 1
16665: PPUSH
16666: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16670: LD_INT 46
16672: PPUSH
16673: LD_VAR 0 3
16677: PPUSH
16678: LD_INT 1
16680: PPUSH
16681: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16685: LD_INT 47
16687: PPUSH
16688: LD_VAR 0 3
16692: PPUSH
16693: LD_INT 1
16695: PPUSH
16696: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16700: LD_INT 1
16702: PPUSH
16703: LD_VAR 0 3
16707: PPUSH
16708: LD_INT 1
16710: PPUSH
16711: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16715: LD_INT 2
16717: PPUSH
16718: LD_VAR 0 3
16722: PPUSH
16723: LD_INT 1
16725: PPUSH
16726: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16730: LD_INT 11
16732: PPUSH
16733: LD_VAR 0 3
16737: PPUSH
16738: LD_INT 1
16740: PPUSH
16741: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
16745: LD_INT 20
16747: PPUSH
16748: LD_VAR 0 3
16752: PPUSH
16753: LD_INT 1
16755: PPUSH
16756: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16760: LD_INT 48
16762: PPUSH
16763: LD_VAR 0 3
16767: PPUSH
16768: LD_INT 1
16770: PPUSH
16771: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16775: LD_INT 49
16777: PPUSH
16778: LD_VAR 0 3
16782: PPUSH
16783: LD_INT 1
16785: PPUSH
16786: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16790: LD_INT 69
16792: PPUSH
16793: LD_VAR 0 3
16797: PPUSH
16798: LD_INT 1
16800: PPUSH
16801: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16805: LD_INT 39
16807: PPUSH
16808: LD_VAR 0 3
16812: PPUSH
16813: LD_INT 1
16815: PPUSH
16816: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16820: LD_INT 34
16822: PPUSH
16823: LD_VAR 0 3
16827: PPUSH
16828: LD_INT 1
16830: PPUSH
16831: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16835: LD_INT 42
16837: PPUSH
16838: LD_VAR 0 3
16842: PPUSH
16843: LD_INT 1
16845: PPUSH
16846: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16850: LD_INT 44
16852: PPUSH
16853: LD_VAR 0 3
16857: PPUSH
16858: LD_INT 1
16860: PPUSH
16861: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16865: LD_INT 41
16867: PPUSH
16868: LD_VAR 0 3
16872: PPUSH
16873: LD_INT 1
16875: PPUSH
16876: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
16880: LD_INT 40
16882: PPUSH
16883: LD_VAR 0 3
16887: PPUSH
16888: LD_INT 1
16890: PPUSH
16891: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16895: LD_INT 43
16897: PPUSH
16898: LD_VAR 0 3
16902: PPUSH
16903: LD_INT 1
16905: PPUSH
16906: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16910: LD_INT 70
16912: PPUSH
16913: LD_VAR 0 3
16917: PPUSH
16918: LD_INT 1
16920: PPUSH
16921: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16925: LD_INT 51
16927: PPUSH
16928: LD_VAR 0 3
16932: PPUSH
16933: LD_INT 1
16935: PPUSH
16936: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16940: LD_INT 52
16942: PPUSH
16943: LD_VAR 0 3
16947: PPUSH
16948: LD_INT 1
16950: PPUSH
16951: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16955: LD_INT 6
16957: PPUSH
16958: LD_VAR 0 3
16962: PPUSH
16963: LD_INT 1
16965: PPUSH
16966: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16970: LD_INT 15
16972: PPUSH
16973: LD_VAR 0 3
16977: PPUSH
16978: LD_INT 1
16980: PPUSH
16981: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16985: LD_INT 7
16987: PPUSH
16988: LD_VAR 0 3
16992: PPUSH
16993: LD_INT 1
16995: PPUSH
16996: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17000: LD_INT 12
17002: PPUSH
17003: LD_VAR 0 3
17007: PPUSH
17008: LD_INT 1
17010: PPUSH
17011: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
17015: LD_INT 17
17017: PPUSH
17018: LD_VAR 0 3
17022: PPUSH
17023: LD_INT 1
17025: PPUSH
17026: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17030: LD_INT 18
17032: PPUSH
17033: LD_VAR 0 3
17037: PPUSH
17038: LD_INT 1
17040: PPUSH
17041: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17045: LD_INT 60
17047: PPUSH
17048: LD_VAR 0 3
17052: PPUSH
17053: LD_INT 1
17055: PPUSH
17056: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
17060: LD_INT 32
17062: PPUSH
17063: LD_VAR 0 3
17067: PPUSH
17068: LD_INT 1
17070: PPUSH
17071: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
17075: LD_INT 9
17077: PPUSH
17078: LD_VAR 0 3
17082: PPUSH
17083: LD_INT 1
17085: PPUSH
17086: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
17090: LD_INT 57
17092: PPUSH
17093: LD_VAR 0 3
17097: PPUSH
17098: LD_INT 1
17100: PPUSH
17101: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
17105: LD_INT 30
17107: PPUSH
17108: LD_VAR 0 3
17112: PPUSH
17113: LD_INT 1
17115: PPUSH
17116: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
17120: LD_INT 37
17122: PPUSH
17123: LD_VAR 0 3
17127: PPUSH
17128: LD_INT 1
17130: PPUSH
17131: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
17135: LD_INT 63
17137: PPUSH
17138: LD_VAR 0 3
17142: PPUSH
17143: LD_INT 1
17145: PPUSH
17146: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
17150: LD_INT 3
17152: PPUSH
17153: LD_VAR 0 3
17157: PPUSH
17158: LD_INT 1
17160: PPUSH
17161: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
17165: LD_INT 4
17167: PPUSH
17168: LD_VAR 0 3
17172: PPUSH
17173: LD_INT 1
17175: PPUSH
17176: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
17180: LD_INT 5
17182: PPUSH
17183: LD_VAR 0 3
17187: PPUSH
17188: LD_INT 1
17190: PPUSH
17191: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
17195: LD_INT 66
17197: PPUSH
17198: LD_VAR 0 3
17202: PPUSH
17203: LD_INT 1
17205: PPUSH
17206: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
17210: LD_INT 21
17212: PPUSH
17213: LD_VAR 0 3
17217: PPUSH
17218: LD_INT 1
17220: PPUSH
17221: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
17225: LD_INT 22
17227: PPUSH
17228: LD_VAR 0 3
17232: PPUSH
17233: LD_INT 1
17235: PPUSH
17236: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
17240: LD_INT 19
17242: PPUSH
17243: LD_VAR 0 3
17247: PPUSH
17248: LD_INT 1
17250: PPUSH
17251: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
17255: LD_INT 54
17257: PPUSH
17258: LD_VAR 0 3
17262: PPUSH
17263: LD_INT 1
17265: PPUSH
17266: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
17270: LD_INT 55
17272: PPUSH
17273: LD_VAR 0 3
17277: PPUSH
17278: LD_INT 1
17280: PPUSH
17281: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17285: LD_INT 0
17287: PPUSH
17288: LD_VAR 0 3
17292: PPUSH
17293: LD_INT 1
17295: PPUSH
17296: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
17300: LD_INT 1
17302: PPUSH
17303: LD_VAR 0 3
17307: PPUSH
17308: LD_INT 1
17310: PPUSH
17311: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17315: LD_INT 2
17317: PPUSH
17318: LD_VAR 0 3
17322: PPUSH
17323: LD_INT 1
17325: PPUSH
17326: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
17330: LD_INT 3
17332: PPUSH
17333: LD_VAR 0 3
17337: PPUSH
17338: LD_INT 1
17340: PPUSH
17341: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17345: LD_INT 4
17347: PPUSH
17348: LD_VAR 0 3
17352: PPUSH
17353: LD_INT 1
17355: PPUSH
17356: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
17360: LD_INT 5
17362: PPUSH
17363: LD_VAR 0 3
17367: PPUSH
17368: LD_INT 1
17370: PPUSH
17371: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17375: LD_INT 6
17377: PPUSH
17378: LD_VAR 0 3
17382: PPUSH
17383: LD_INT 1
17385: PPUSH
17386: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
17390: LD_INT 7
17392: PPUSH
17393: LD_VAR 0 3
17397: PPUSH
17398: LD_INT 1
17400: PPUSH
17401: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
17405: LD_INT 8
17407: PPUSH
17408: LD_VAR 0 3
17412: PPUSH
17413: LD_INT 1
17415: PPUSH
17416: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
17420: LD_INT 10
17422: PPUSH
17423: LD_VAR 0 3
17427: PPUSH
17428: LD_INT 1
17430: PPUSH
17431: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
17435: LD_INT 11
17437: PPUSH
17438: LD_VAR 0 3
17442: PPUSH
17443: LD_INT 1
17445: PPUSH
17446: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
17450: LD_INT 12
17452: PPUSH
17453: LD_VAR 0 3
17457: PPUSH
17458: LD_INT 1
17460: PPUSH
17461: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
17465: LD_INT 13
17467: PPUSH
17468: LD_VAR 0 3
17472: PPUSH
17473: LD_INT 1
17475: PPUSH
17476: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
17480: LD_INT 14
17482: PPUSH
17483: LD_VAR 0 3
17487: PPUSH
17488: LD_INT 1
17490: PPUSH
17491: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
17495: LD_INT 15
17497: PPUSH
17498: LD_VAR 0 3
17502: PPUSH
17503: LD_INT 1
17505: PPUSH
17506: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
17510: LD_INT 16
17512: PPUSH
17513: LD_VAR 0 3
17517: PPUSH
17518: LD_INT 1
17520: PPUSH
17521: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
17525: LD_INT 17
17527: PPUSH
17528: LD_VAR 0 3
17532: PPUSH
17533: LD_INT 1
17535: PPUSH
17536: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
17540: LD_INT 18
17542: PPUSH
17543: LD_VAR 0 3
17547: PPUSH
17548: LD_INT 1
17550: PPUSH
17551: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
17555: LD_INT 19
17557: PPUSH
17558: LD_VAR 0 3
17562: PPUSH
17563: LD_INT 1
17565: PPUSH
17566: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
17570: LD_INT 20
17572: PPUSH
17573: LD_VAR 0 3
17577: PPUSH
17578: LD_INT 1
17580: PPUSH
17581: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
17585: LD_INT 21
17587: PPUSH
17588: LD_VAR 0 3
17592: PPUSH
17593: LD_INT 1
17595: PPUSH
17596: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
17600: LD_INT 23
17602: PPUSH
17603: LD_VAR 0 3
17607: PPUSH
17608: LD_INT 1
17610: PPUSH
17611: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
17615: LD_INT 26
17617: PPUSH
17618: LD_VAR 0 3
17622: PPUSH
17623: LD_INT 1
17625: PPUSH
17626: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
17630: LD_INT 27
17632: PPUSH
17633: LD_VAR 0 3
17637: PPUSH
17638: LD_INT 1
17640: PPUSH
17641: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
17645: LD_INT 28
17647: PPUSH
17648: LD_VAR 0 3
17652: PPUSH
17653: LD_INT 1
17655: PPUSH
17656: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17660: LD_INT 29
17662: PPUSH
17663: LD_VAR 0 3
17667: PPUSH
17668: LD_INT 1
17670: PPUSH
17671: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
17675: LD_INT 30
17677: PPUSH
17678: LD_VAR 0 3
17682: PPUSH
17683: LD_INT 1
17685: PPUSH
17686: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17690: LD_INT 31
17692: PPUSH
17693: LD_VAR 0 3
17697: PPUSH
17698: LD_INT 1
17700: PPUSH
17701: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
17705: LD_INT 32
17707: PPUSH
17708: LD_VAR 0 3
17712: PPUSH
17713: LD_INT 1
17715: PPUSH
17716: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
17720: LD_INT 33
17722: PPUSH
17723: LD_VAR 0 3
17727: PPUSH
17728: LD_INT 1
17730: PPUSH
17731: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
17735: LD_INT 36
17737: PPUSH
17738: LD_VAR 0 3
17742: PPUSH
17743: LD_INT 1
17745: PPUSH
17746: CALL_OW 324
// end ; 6 :
17750: GO 18760
17752: LD_INT 6
17754: DOUBLE
17755: EQUAL
17756: IFTRUE 17760
17758: GO 18685
17760: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17761: LD_INT 35
17763: PPUSH
17764: LD_VAR 0 3
17768: PPUSH
17769: LD_INT 1
17771: PPUSH
17772: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17776: LD_INT 45
17778: PPUSH
17779: LD_VAR 0 3
17783: PPUSH
17784: LD_INT 1
17786: PPUSH
17787: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17791: LD_INT 46
17793: PPUSH
17794: LD_VAR 0 3
17798: PPUSH
17799: LD_INT 1
17801: PPUSH
17802: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17806: LD_INT 47
17808: PPUSH
17809: LD_VAR 0 3
17813: PPUSH
17814: LD_INT 1
17816: PPUSH
17817: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17821: LD_INT 1
17823: PPUSH
17824: LD_VAR 0 3
17828: PPUSH
17829: LD_INT 1
17831: PPUSH
17832: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17836: LD_INT 2
17838: PPUSH
17839: LD_VAR 0 3
17843: PPUSH
17844: LD_INT 1
17846: PPUSH
17847: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17851: LD_INT 11
17853: PPUSH
17854: LD_VAR 0 3
17858: PPUSH
17859: LD_INT 1
17861: PPUSH
17862: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17866: LD_INT 20
17868: PPUSH
17869: LD_VAR 0 3
17873: PPUSH
17874: LD_INT 1
17876: PPUSH
17877: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17881: LD_INT 48
17883: PPUSH
17884: LD_VAR 0 3
17888: PPUSH
17889: LD_INT 1
17891: PPUSH
17892: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17896: LD_INT 49
17898: PPUSH
17899: LD_VAR 0 3
17903: PPUSH
17904: LD_INT 1
17906: PPUSH
17907: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
17911: LD_INT 50
17913: PPUSH
17914: LD_VAR 0 3
17918: PPUSH
17919: LD_INT 1
17921: PPUSH
17922: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17926: LD_INT 69
17928: PPUSH
17929: LD_VAR 0 3
17933: PPUSH
17934: LD_INT 1
17936: PPUSH
17937: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17941: LD_INT 39
17943: PPUSH
17944: LD_VAR 0 3
17948: PPUSH
17949: LD_INT 1
17951: PPUSH
17952: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17956: LD_INT 34
17958: PPUSH
17959: LD_VAR 0 3
17963: PPUSH
17964: LD_INT 1
17966: PPUSH
17967: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17971: LD_INT 42
17973: PPUSH
17974: LD_VAR 0 3
17978: PPUSH
17979: LD_INT 1
17981: PPUSH
17982: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17986: LD_INT 44
17988: PPUSH
17989: LD_VAR 0 3
17993: PPUSH
17994: LD_INT 1
17996: PPUSH
17997: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
18001: LD_INT 41
18003: PPUSH
18004: LD_VAR 0 3
18008: PPUSH
18009: LD_INT 1
18011: PPUSH
18012: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
18016: LD_INT 13
18018: PPUSH
18019: LD_VAR 0 3
18023: PPUSH
18024: LD_INT 1
18026: PPUSH
18027: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
18031: LD_INT 40
18033: PPUSH
18034: LD_VAR 0 3
18038: PPUSH
18039: LD_INT 1
18041: PPUSH
18042: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18046: LD_INT 43
18048: PPUSH
18049: LD_VAR 0 3
18053: PPUSH
18054: LD_INT 1
18056: PPUSH
18057: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
18061: LD_INT 70
18063: PPUSH
18064: LD_VAR 0 3
18068: PPUSH
18069: LD_INT 1
18071: PPUSH
18072: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
18076: LD_INT 23
18078: PPUSH
18079: LD_VAR 0 3
18083: PPUSH
18084: LD_INT 1
18086: PPUSH
18087: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18091: LD_INT 51
18093: PPUSH
18094: LD_VAR 0 3
18098: PPUSH
18099: LD_INT 1
18101: PPUSH
18102: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
18106: LD_INT 52
18108: PPUSH
18109: LD_VAR 0 3
18113: PPUSH
18114: LD_INT 1
18116: PPUSH
18117: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
18121: LD_INT 6
18123: PPUSH
18124: LD_VAR 0 3
18128: PPUSH
18129: LD_INT 1
18131: PPUSH
18132: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
18136: LD_INT 15
18138: PPUSH
18139: LD_VAR 0 3
18143: PPUSH
18144: LD_INT 1
18146: PPUSH
18147: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
18151: LD_INT 7
18153: PPUSH
18154: LD_VAR 0 3
18158: PPUSH
18159: LD_INT 1
18161: PPUSH
18162: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
18166: LD_INT 12
18168: PPUSH
18169: LD_VAR 0 3
18173: PPUSH
18174: LD_INT 1
18176: PPUSH
18177: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
18181: LD_INT 10
18183: PPUSH
18184: LD_VAR 0 3
18188: PPUSH
18189: LD_INT 1
18191: PPUSH
18192: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
18196: LD_INT 17
18198: PPUSH
18199: LD_VAR 0 3
18203: PPUSH
18204: LD_INT 1
18206: PPUSH
18207: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
18211: LD_INT 18
18213: PPUSH
18214: LD_VAR 0 3
18218: PPUSH
18219: LD_INT 1
18221: PPUSH
18222: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
18226: LD_INT 60
18228: PPUSH
18229: LD_VAR 0 3
18233: PPUSH
18234: LD_INT 1
18236: PPUSH
18237: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
18241: LD_INT 61
18243: PPUSH
18244: LD_VAR 0 3
18248: PPUSH
18249: LD_INT 1
18251: PPUSH
18252: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
18256: LD_INT 32
18258: PPUSH
18259: LD_VAR 0 3
18263: PPUSH
18264: LD_INT 1
18266: PPUSH
18267: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
18271: LD_INT 27
18273: PPUSH
18274: LD_VAR 0 3
18278: PPUSH
18279: LD_INT 1
18281: PPUSH
18282: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
18286: LD_INT 36
18288: PPUSH
18289: LD_VAR 0 3
18293: PPUSH
18294: LD_INT 1
18296: PPUSH
18297: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
18301: LD_INT 33
18303: PPUSH
18304: LD_VAR 0 3
18308: PPUSH
18309: LD_INT 1
18311: PPUSH
18312: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
18316: LD_INT 9
18318: PPUSH
18319: LD_VAR 0 3
18323: PPUSH
18324: LD_INT 1
18326: PPUSH
18327: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
18331: LD_INT 38
18333: PPUSH
18334: LD_VAR 0 3
18338: PPUSH
18339: LD_INT 1
18341: PPUSH
18342: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
18346: LD_INT 57
18348: PPUSH
18349: LD_VAR 0 3
18353: PPUSH
18354: LD_INT 1
18356: PPUSH
18357: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
18361: LD_INT 58
18363: PPUSH
18364: LD_VAR 0 3
18368: PPUSH
18369: LD_INT 1
18371: PPUSH
18372: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
18376: LD_INT 28
18378: PPUSH
18379: LD_VAR 0 3
18383: PPUSH
18384: LD_INT 1
18386: PPUSH
18387: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
18391: LD_INT 29
18393: PPUSH
18394: LD_VAR 0 3
18398: PPUSH
18399: LD_INT 1
18401: PPUSH
18402: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18406: LD_INT 30
18408: PPUSH
18409: LD_VAR 0 3
18413: PPUSH
18414: LD_INT 1
18416: PPUSH
18417: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
18421: LD_INT 37
18423: PPUSH
18424: LD_VAR 0 3
18428: PPUSH
18429: LD_INT 1
18431: PPUSH
18432: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
18436: LD_INT 63
18438: PPUSH
18439: LD_VAR 0 3
18443: PPUSH
18444: LD_INT 1
18446: PPUSH
18447: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
18451: LD_INT 64
18453: PPUSH
18454: LD_VAR 0 3
18458: PPUSH
18459: LD_INT 1
18461: PPUSH
18462: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
18466: LD_INT 3
18468: PPUSH
18469: LD_VAR 0 3
18473: PPUSH
18474: LD_INT 1
18476: PPUSH
18477: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
18481: LD_INT 4
18483: PPUSH
18484: LD_VAR 0 3
18488: PPUSH
18489: LD_INT 1
18491: PPUSH
18492: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18496: LD_INT 5
18498: PPUSH
18499: LD_VAR 0 3
18503: PPUSH
18504: LD_INT 1
18506: PPUSH
18507: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
18511: LD_INT 8
18513: PPUSH
18514: LD_VAR 0 3
18518: PPUSH
18519: LD_INT 1
18521: PPUSH
18522: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18526: LD_INT 66
18528: PPUSH
18529: LD_VAR 0 3
18533: PPUSH
18534: LD_INT 1
18536: PPUSH
18537: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
18541: LD_INT 67
18543: PPUSH
18544: LD_VAR 0 3
18548: PPUSH
18549: LD_INT 1
18551: PPUSH
18552: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18556: LD_INT 21
18558: PPUSH
18559: LD_VAR 0 3
18563: PPUSH
18564: LD_INT 1
18566: PPUSH
18567: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18571: LD_INT 22
18573: PPUSH
18574: LD_VAR 0 3
18578: PPUSH
18579: LD_INT 1
18581: PPUSH
18582: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
18586: LD_INT 19
18588: PPUSH
18589: LD_VAR 0 3
18593: PPUSH
18594: LD_INT 1
18596: PPUSH
18597: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
18601: LD_INT 26
18603: PPUSH
18604: LD_VAR 0 3
18608: PPUSH
18609: LD_INT 1
18611: PPUSH
18612: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
18616: LD_INT 54
18618: PPUSH
18619: LD_VAR 0 3
18623: PPUSH
18624: LD_INT 1
18626: PPUSH
18627: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
18631: LD_INT 55
18633: PPUSH
18634: LD_VAR 0 3
18638: PPUSH
18639: LD_INT 1
18641: PPUSH
18642: CALL_OW 322
// for i = 0 to 39 do
18646: LD_ADDR_VAR 0 4
18650: PUSH
18651: DOUBLE
18652: LD_INT 0
18654: DEC
18655: ST_TO_ADDR
18656: LD_INT 39
18658: PUSH
18659: FOR_TO
18660: IFFALSE 18681
// SetRestrict ( i , side , true ) ;
18662: LD_VAR 0 4
18666: PPUSH
18667: LD_VAR 0 3
18671: PPUSH
18672: LD_INT 1
18674: PPUSH
18675: CALL_OW 324
18679: GO 18659
18681: POP
18682: POP
// end ; else
18683: GO 18760
18685: POP
// begin for i = 1 to 73 do
18686: LD_ADDR_VAR 0 4
18690: PUSH
18691: DOUBLE
18692: LD_INT 1
18694: DEC
18695: ST_TO_ADDR
18696: LD_INT 73
18698: PUSH
18699: FOR_TO
18700: IFFALSE 18721
// SetTech ( i , side , state_enabled ) ;
18702: LD_VAR 0 4
18706: PPUSH
18707: LD_VAR 0 3
18711: PPUSH
18712: LD_INT 1
18714: PPUSH
18715: CALL_OW 322
18719: GO 18699
18721: POP
18722: POP
// for i = 0 to 39 do
18723: LD_ADDR_VAR 0 4
18727: PUSH
18728: DOUBLE
18729: LD_INT 0
18731: DEC
18732: ST_TO_ADDR
18733: LD_INT 39
18735: PUSH
18736: FOR_TO
18737: IFFALSE 18758
// SetRestrict ( i , side , true ) ;
18739: LD_VAR 0 4
18743: PPUSH
18744: LD_VAR 0 3
18748: PPUSH
18749: LD_INT 1
18751: PPUSH
18752: CALL_OW 324
18756: GO 18736
18758: POP
18759: POP
// end ; end ; end ;
18760: GO 14765
18762: POP
18763: POP
// end ;
18764: LD_VAR 0 2
18768: RET
