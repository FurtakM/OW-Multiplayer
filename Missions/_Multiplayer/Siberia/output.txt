// export def_amount_of_siberit , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game ; export Position_Sides ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id , sheik , mastodont ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function read_multiplayer_and_game_parameters ; var i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// if Multiplayer then
   4: LD_OWVAR 4
   8: IFFALSE 72
// begin Game_Type := mp_game_type ;
  10: LD_ADDR_EXP 40
  14: PUSH
  15: LD_OWVAR 6
  19: ST_TO_ADDR
// Your_Side := mp_player_side ;
  20: LD_ADDR_OWVAR 2
  24: PUSH
  25: LD_OWVAR 7
  29: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  30: LD_ADDR_EXP 18
  34: PUSH
  35: LD_OWVAR 17
  39: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  40: LD_ADDR_EXP 16
  44: PUSH
  45: LD_OWVAR 15
  49: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
  50: LD_ADDR_EXP 19
  54: PUSH
  55: LD_OWVAR 16
  59: ST_TO_ADDR
// Teams := mp_teams ;
  60: LD_ADDR_EXP 17
  64: PUSH
  65: LD_OWVAR 12
  69: ST_TO_ADDR
// end else
  70: GO 254
// begin Game_Type := 1 ;
  72: LD_ADDR_EXP 40
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// Your_Side := 3 ;
  80: LD_ADDR_OWVAR 2
  84: PUSH
  85: LD_INT 3
  87: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
  88: LD_ADDR_EXP 18
  92: PUSH
  93: LD_INT 1
  95: PUSH
  96: LD_INT 2
  98: PUSH
  99: LD_INT 3
 101: PUSH
 102: LD_INT 4
 104: PUSH
 105: LD_INT 5
 107: PUSH
 108: LD_INT 6
 110: PUSH
 111: LD_INT 0
 113: PUSH
 114: LD_INT 0
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: LIST
 126: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 127: LD_ADDR_EXP 16
 131: PUSH
 132: LD_INT 1
 134: PUSH
 135: LD_INT 2
 137: PUSH
 138: LD_INT 3
 140: PUSH
 141: LD_INT 4
 143: PUSH
 144: LD_INT 5
 146: PUSH
 147: LD_INT 6
 149: PUSH
 150: LD_INT 0
 152: PUSH
 153: LD_INT 0
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: LIST
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 166: LD_ADDR_EXP 19
 170: PUSH
 171: LD_INT 1
 173: PUSH
 174: LD_INT 2
 176: PUSH
 177: LD_INT 3
 179: PUSH
 180: LD_INT 1
 182: PUSH
 183: LD_INT 2
 185: PUSH
 186: LD_INT 3
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 0
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 205: LD_ADDR_EXP 17
 209: PUSH
 210: LD_INT 1
 212: PUSH
 213: EMPTY
 214: LIST
 215: PUSH
 216: LD_INT 2
 218: PUSH
 219: EMPTY
 220: LIST
 221: PUSH
 222: LD_INT 3
 224: PUSH
 225: EMPTY
 226: LIST
 227: PUSH
 228: LD_INT 4
 230: PUSH
 231: EMPTY
 232: LIST
 233: PUSH
 234: LD_INT 5
 236: PUSH
 237: EMPTY
 238: LIST
 239: PUSH
 240: LD_INT 6
 242: PUSH
 243: EMPTY
 244: LIST
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: LIST
 252: LIST
 253: ST_TO_ADDR
// end ; for i := 1 to 8 do
 254: LD_ADDR_VAR 0 2
 258: PUSH
 259: DOUBLE
 260: LD_INT 1
 262: DEC
 263: ST_TO_ADDR
 264: LD_INT 8
 266: PUSH
 267: FOR_TO
 268: IFFALSE 355
// if Multiplayer_GetPlayerIsSpec ( i ) then
 270: LD_VAR 0 2
 274: PPUSH
 275: CALL_OW 530
 279: IFFALSE 353
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 281: LD_ADDR_EXP 18
 285: PUSH
 286: LD_EXP 18
 290: PPUSH
 291: LD_VAR 0 2
 295: PPUSH
 296: LD_INT 0
 298: PPUSH
 299: CALL_OW 1
 303: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 304: LD_ADDR_EXP 17
 308: PUSH
 309: LD_EXP 17
 313: PPUSH
 314: LD_EXP 16
 318: PUSH
 319: LD_VAR 0 2
 323: ARRAY
 324: PPUSH
 325: LD_EXP 17
 329: PUSH
 330: LD_EXP 16
 334: PUSH
 335: LD_VAR 0 2
 339: ARRAY
 340: ARRAY
 341: PUSH
 342: LD_VAR 0 2
 346: DIFF
 347: PPUSH
 348: CALL_OW 1
 352: ST_TO_ADDR
// end ;
 353: GO 267
 355: POP
 356: POP
// Position_Sides := [ 0 , 0 , 0 , 0 , 0 , 0 ] ;
 357: LD_ADDR_EXP 21
 361: PUSH
 362: LD_INT 0
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 0
 370: PUSH
 371: LD_INT 0
 373: PUSH
 374: LD_INT 0
 376: PUSH
 377: LD_INT 0
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: LIST
 387: ST_TO_ADDR
// for i := 1 to 8 do
 388: LD_ADDR_VAR 0 2
 392: PUSH
 393: DOUBLE
 394: LD_INT 1
 396: DEC
 397: ST_TO_ADDR
 398: LD_INT 8
 400: PUSH
 401: FOR_TO
 402: IFFALSE 449
// if Side_Positions [ i ] then
 404: LD_EXP 18
 408: PUSH
 409: LD_VAR 0 2
 413: ARRAY
 414: IFFALSE 447
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 416: LD_ADDR_EXP 21
 420: PUSH
 421: LD_EXP 21
 425: PPUSH
 426: LD_EXP 18
 430: PUSH
 431: LD_VAR 0 2
 435: ARRAY
 436: PPUSH
 437: LD_VAR 0 2
 441: PPUSH
 442: CALL_OW 1
 446: ST_TO_ADDR
 447: GO 401
 449: POP
 450: POP
// Team_Game := 1 ;
 451: LD_ADDR_EXP 20
 455: PUSH
 456: LD_INT 1
 458: ST_TO_ADDR
// if Multiplayer then
 459: LD_OWVAR 4
 463: IFFALSE 709
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 465: LD_ADDR_EXP 42
 469: PUSH
 470: LD_INT 0
 472: PPUSH
 473: CALL_OW 426
 477: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 478: LD_ADDR_EXP 43
 482: PUSH
 483: LD_INT 1
 485: PPUSH
 486: CALL_OW 426
 490: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 491: LD_ADDR_EXP 44
 495: PUSH
 496: LD_INT 2
 498: PPUSH
 499: CALL_OW 426
 503: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 504: LD_ADDR_EXP 45
 508: PUSH
 509: LD_INT 3
 511: PPUSH
 512: CALL_OW 426
 516: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 517: LD_ADDR_EXP 46
 521: PUSH
 522: LD_INT 4
 524: PPUSH
 525: CALL_OW 426
 529: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 530: LD_ADDR_EXP 47
 534: PUSH
 535: LD_INT 5
 537: PPUSH
 538: CALL_OW 426
 542: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 543: LD_ADDR_EXP 48
 547: PUSH
 548: LD_INT 6
 550: PPUSH
 551: CALL_OW 426
 555: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 556: LD_ADDR_EXP 49
 560: PUSH
 561: LD_INT 10
 563: PPUSH
 564: CALL_OW 426
 568: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 569: LD_ADDR_EXP 50
 573: PUSH
 574: LD_INT 11
 576: PPUSH
 577: CALL_OW 426
 581: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 582: LD_ADDR_EXP 51
 586: PUSH
 587: LD_INT 12
 589: PPUSH
 590: CALL_OW 426
 594: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 595: LD_ADDR_EXP 52
 599: PUSH
 600: LD_INT 13
 602: PPUSH
 603: CALL_OW 426
 607: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 608: LD_ADDR_EXP 53
 612: PUSH
 613: LD_INT 14
 615: PPUSH
 616: CALL_OW 426
 620: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 621: LD_ADDR_EXP 1
 625: PUSH
 626: LD_INT 15
 628: PPUSH
 629: CALL_OW 426
 633: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 634: LD_ADDR_EXP 2
 638: PUSH
 639: LD_INT 16
 641: PPUSH
 642: CALL_OW 426
 646: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 647: LD_ADDR_EXP 54
 651: PUSH
 652: LD_INT 17
 654: PPUSH
 655: CALL_OW 426
 659: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 660: LD_ADDR_EXP 55
 664: PUSH
 665: LD_INT 20
 667: PPUSH
 668: CALL_OW 426
 672: ST_TO_ADDR
// def_game_rules := 0 ;
 673: LD_ADDR_EXP 41
 677: PUSH
 678: LD_INT 0
 680: ST_TO_ADDR
// def_sheik := GetMultiplayerSetting ( 22 ) ;
 681: LD_ADDR_EXP 56
 685: PUSH
 686: LD_INT 22
 688: PPUSH
 689: CALL_OW 426
 693: ST_TO_ADDR
// def_mastodont := GetMultiplayerSetting ( 23 ) ;
 694: LD_ADDR_EXP 57
 698: PUSH
 699: LD_INT 23
 701: PPUSH
 702: CALL_OW 426
 706: ST_TO_ADDR
// end else
 707: GO 865
// begin Randomize ;
 709: CALL_OW 10
// def_base_level := 2 ;
 713: LD_ADDR_EXP 42
 717: PUSH
 718: LD_INT 2
 720: ST_TO_ADDR
// def_amount_of_people := 0 ;
 721: LD_ADDR_EXP 43
 725: PUSH
 726: LD_INT 0
 728: ST_TO_ADDR
// def_skill_level := 1 ;
 729: LD_ADDR_EXP 44
 733: PUSH
 734: LD_INT 1
 736: ST_TO_ADDR
// def_starting_resources := 2 ;
 737: LD_ADDR_EXP 45
 741: PUSH
 742: LD_INT 2
 744: ST_TO_ADDR
// def_shipments_density := 1 ;
 745: LD_ADDR_EXP 46
 749: PUSH
 750: LD_INT 1
 752: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
 753: LD_ADDR_EXP 47
 757: PUSH
 758: LD_INT 1
 760: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
 761: LD_ADDR_EXP 48
 765: PUSH
 766: LD_INT 2
 768: ST_TO_ADDR
// def_shared_vision := 1 ;
 769: LD_ADDR_EXP 49
 773: PUSH
 774: LD_INT 1
 776: ST_TO_ADDR
// def_morale_flags := 1 ;
 777: LD_ADDR_EXP 50
 781: PUSH
 782: LD_INT 1
 784: ST_TO_ADDR
// def_siberite_detection := 1 ;
 785: LD_ADDR_EXP 51
 789: PUSH
 790: LD_INT 1
 792: ST_TO_ADDR
// def_people_respawning := 2 ;
 793: LD_ADDR_EXP 52
 797: PUSH
 798: LD_INT 2
 800: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 801: LD_ADDR_EXP 53
 805: PUSH
 806: LD_INT 3
 808: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 809: LD_ADDR_EXP 1
 813: PUSH
 814: LD_INT 0
 816: ST_TO_ADDR
// def_public_score := 0 ;
 817: LD_ADDR_EXP 2
 821: PUSH
 822: LD_INT 0
 824: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 825: LD_ADDR_EXP 54
 829: PUSH
 830: LD_INT 0
 832: ST_TO_ADDR
// def_builduptime := 0 ;
 833: LD_ADDR_EXP 55
 837: PUSH
 838: LD_INT 0
 840: ST_TO_ADDR
// def_game_rules := 0 ;
 841: LD_ADDR_EXP 41
 845: PUSH
 846: LD_INT 0
 848: ST_TO_ADDR
// def_sheik := 0 ;
 849: LD_ADDR_EXP 56
 853: PUSH
 854: LD_INT 0
 856: ST_TO_ADDR
// def_mastodont := 0 ;
 857: LD_ADDR_EXP 57
 861: PUSH
 862: LD_INT 0
 864: ST_TO_ADDR
// end ; InitGameRules ;
 865: CALL 11142 0 0
// if def_game_rules = 0 then
 869: LD_EXP 41
 873: PUSH
 874: LD_INT 0
 876: EQUAL
 877: IFFALSE 889
// begin if isSGUI then
 879: LD_OWVAR 83
 883: IFFALSE 889
// setMpTechs ( ) end ;
 885: CALL 14592 0 0
// if ( Game_Type = 5 ) then
 889: LD_EXP 40
 893: PUSH
 894: LD_INT 5
 896: EQUAL
 897: IFFALSE 926
// begin def_base_level := 1 ;
 899: LD_ADDR_EXP 42
 903: PUSH
 904: LD_INT 1
 906: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 907: LD_ADDR_EXP 47
 911: PUSH
 912: LD_INT 0
 914: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
 915: LD_ADDR_EXP 48
 919: PUSH
 920: LD_INT 0
 922: ST_TO_ADDR
// disable ( 10 ) ;
 923: LD_INT 10
 925: DISABLE_MARKED
// end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 926: LD_ADDR_EXP 3
 930: PUSH
 931: LD_INT 0
 933: PUSH
 934: LD_INT 1
 936: PUSH
 937: LD_INT 1
 939: PUSH
 940: EMPTY
 941: LIST
 942: LIST
 943: LIST
 944: PUSH
 945: LD_EXP 42
 949: PUSH
 950: LD_INT 1
 952: PLUS
 953: ARRAY
 954: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 ] [ def_base_level + 1 ] ;
 955: LD_ADDR_EXP 4
 959: PUSH
 960: LD_INT 0
 962: PUSH
 963: LD_INT 0
 965: PUSH
 966: LD_INT 2
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: LIST
 973: PUSH
 974: LD_EXP 42
 978: PUSH
 979: LD_INT 1
 981: PLUS
 982: ARRAY
 983: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 984: LD_ADDR_EXP 5
 988: PUSH
 989: LD_INT 9
 991: PUSH
 992: LD_INT 12
 994: PUSH
 995: LD_INT 15
 997: PUSH
 998: LD_INT 24
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: LIST
1005: LIST
1006: PUSH
1007: LD_EXP 43
1011: PUSH
1012: LD_INT 1
1014: PLUS
1015: ARRAY
1016: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 , 8 ] [ def_skill_level + 1 ] ;
1017: LD_ADDR_EXP 6
1021: PUSH
1022: LD_INT 2
1024: PUSH
1025: LD_INT 3
1027: PUSH
1028: LD_INT 4
1030: PUSH
1031: LD_INT 5
1033: PUSH
1034: LD_INT 8
1036: PUSH
1037: EMPTY
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: PUSH
1044: LD_EXP 44
1048: PUSH
1049: LD_INT 1
1051: PLUS
1052: ARRAY
1053: ST_TO_ADDR
// if ( Game_Type = 5 ) then
1054: LD_EXP 40
1058: PUSH
1059: LD_INT 5
1061: EQUAL
1062: IFFALSE 1180
// begin starting_resources := [ [ 1000 , 100 , 100 ] , [ 2000 , 200 , 200 ] , [ 5000 , 500 , 500 ] , [ 10000 , 1000 , 1000 ] , [ 25000 , 2500 , 2500 ] , [ 50000 , 5000 , 5000 ] ] [ def_starting_resources + 1 ] ;
1064: LD_ADDR_EXP 8
1068: PUSH
1069: LD_INT 1000
1071: PUSH
1072: LD_INT 100
1074: PUSH
1075: LD_INT 100
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: LIST
1082: PUSH
1083: LD_INT 2000
1085: PUSH
1086: LD_INT 200
1088: PUSH
1089: LD_INT 200
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: LIST
1096: PUSH
1097: LD_INT 5000
1099: PUSH
1100: LD_INT 500
1102: PUSH
1103: LD_INT 500
1105: PUSH
1106: EMPTY
1107: LIST
1108: LIST
1109: LIST
1110: PUSH
1111: LD_INT 10000
1113: PUSH
1114: LD_INT 1000
1116: PUSH
1117: LD_INT 1000
1119: PUSH
1120: EMPTY
1121: LIST
1122: LIST
1123: LIST
1124: PUSH
1125: LD_INT 25000
1127: PUSH
1128: LD_INT 2500
1130: PUSH
1131: LD_INT 2500
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: LIST
1138: PUSH
1139: LD_INT 50000
1141: PUSH
1142: LD_INT 5000
1144: PUSH
1145: LD_INT 5000
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: PUSH
1161: LD_EXP 45
1165: PUSH
1166: LD_INT 1
1168: PLUS
1169: ARRAY
1170: ST_TO_ADDR
// starting_crates := [ ] ;
1171: LD_ADDR_EXP 7
1175: PUSH
1176: EMPTY
1177: ST_TO_ADDR
// end else
1178: GO 1326
// begin starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1180: LD_ADDR_EXP 8
1184: PUSH
1185: LD_INT 0
1187: PUSH
1188: LD_INT 0
1190: PUSH
1191: LD_INT 0
1193: PUSH
1194: EMPTY
1195: LIST
1196: LIST
1197: LIST
1198: PUSH
1199: LD_INT 30
1201: PUSH
1202: LD_INT 0
1204: PUSH
1205: LD_INT 0
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: LIST
1212: PUSH
1213: LD_INT 50
1215: PUSH
1216: LD_INT 20
1218: PUSH
1219: LD_INT 0
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: LIST
1226: PUSH
1227: LD_INT 80
1229: PUSH
1230: LD_INT 40
1232: PUSH
1233: LD_INT 20
1235: PUSH
1236: EMPTY
1237: LIST
1238: LIST
1239: LIST
1240: PUSH
1241: EMPTY
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: PUSH
1247: LD_EXP 45
1251: PUSH
1252: LD_INT 1
1254: PLUS
1255: ARRAY
1256: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1257: LD_ADDR_EXP 7
1261: PUSH
1262: LD_INT 10
1264: PUSH
1265: EMPTY
1266: LIST
1267: PUSH
1268: LD_INT 7
1270: PUSH
1271: LD_INT 14
1273: PUSH
1274: EMPTY
1275: LIST
1276: LIST
1277: PUSH
1278: LD_INT 6
1280: PUSH
1281: LD_INT 12
1283: PUSH
1284: LD_INT 18
1286: PUSH
1287: EMPTY
1288: LIST
1289: LIST
1290: LIST
1291: PUSH
1292: LD_INT 5
1294: PUSH
1295: LD_INT 10
1297: PUSH
1298: LD_INT 15
1300: PUSH
1301: LD_INT 20
1303: PUSH
1304: EMPTY
1305: LIST
1306: LIST
1307: LIST
1308: LIST
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: LIST
1314: LIST
1315: PUSH
1316: LD_EXP 45
1320: PUSH
1321: LD_INT 1
1323: PLUS
1324: ARRAY
1325: ST_TO_ADDR
// end ; shipments_density := [ 150 , 125 , 100 , 50 ] [ def_shipments_density + 1 ] ;
1326: LD_ADDR_EXP 9
1330: PUSH
1331: LD_INT 150
1333: PUSH
1334: LD_INT 125
1336: PUSH
1337: LD_INT 100
1339: PUSH
1340: LD_INT 50
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: PUSH
1349: LD_EXP 46
1353: PUSH
1354: LD_INT 1
1356: PLUS
1357: ARRAY
1358: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1359: LD_ADDR_EXP 13
1363: PUSH
1364: LD_INT 0
1366: PUSH
1367: LD_INT 10500
1369: PUSH
1370: LD_INT 6300
1372: PUSH
1373: EMPTY
1374: LIST
1375: LIST
1376: LIST
1377: PUSH
1378: LD_EXP 52
1382: PUSH
1383: LD_INT 1
1385: PLUS
1386: ARRAY
1387: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1388: LD_ADDR_EXP 14
1392: PUSH
1393: LD_INT 0
1395: PUSH
1396: LD_INT 31500
1398: PUSH
1399: LD_INT 10500
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: LIST
1406: PUSH
1407: LD_EXP 52
1411: PUSH
1412: LD_INT 1
1414: PLUS
1415: ARRAY
1416: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1417: LD_ADDR_EXP 11
1421: PUSH
1422: LD_INT 0
1424: PUSH
1425: LD_INT 1
1427: PUSH
1428: LD_INT 2
1430: PUSH
1431: LD_INT 3
1433: PUSH
1434: EMPTY
1435: LIST
1436: LIST
1437: LIST
1438: LIST
1439: PUSH
1440: LD_EXP 53
1444: PUSH
1445: LD_INT 1
1447: PLUS
1448: ARRAY
1449: ST_TO_ADDR
// amount_of_siberit := [ 30 , 50 , 80 , 100 , 130 , 150 , 200 ] [ def_amount_of_siberit + 1 ] ;
1450: LD_ADDR_EXP 12
1454: PUSH
1455: LD_INT 30
1457: PUSH
1458: LD_INT 50
1460: PUSH
1461: LD_INT 80
1463: PUSH
1464: LD_INT 100
1466: PUSH
1467: LD_INT 130
1469: PUSH
1470: LD_INT 150
1472: PUSH
1473: LD_INT 200
1475: PUSH
1476: EMPTY
1477: LIST
1478: LIST
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: PUSH
1485: LD_EXP 1
1489: PUSH
1490: LD_INT 1
1492: PLUS
1493: ARRAY
1494: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1495: LD_ADDR_EXP 10
1499: PUSH
1500: LD_INT 1
1502: NEG
1503: PUSH
1504: LD_INT 350
1506: PUSH
1507: LD_INT 700
1509: PUSH
1510: LD_INT 1400
1512: PUSH
1513: LD_INT 0
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: LIST
1520: LIST
1521: LIST
1522: PUSH
1523: LD_EXP 50
1527: PUSH
1528: LD_INT 1
1530: PLUS
1531: ARRAY
1532: ST_TO_ADDR
// battle_flags_id := [ ] ;
1533: LD_ADDR_EXP 29
1537: PUSH
1538: EMPTY
1539: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1540: LD_ADDR_EXP 15
1544: PUSH
1545: LD_INT 0
1547: PUSH
1548: LD_INT 1
1550: PUSH
1551: LD_INT 63000
1553: PUSH
1554: LD_INT 126000
1556: PUSH
1557: LD_INT 189000
1559: PUSH
1560: LD_INT 252000
1562: PUSH
1563: EMPTY
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: LIST
1569: LIST
1570: PUSH
1571: LD_EXP 54
1575: PUSH
1576: LD_INT 1
1578: PLUS
1579: ARRAY
1580: ST_TO_ADDR
// if ( Game_Type = 12 ) then
1581: LD_EXP 40
1585: PUSH
1586: LD_INT 12
1588: EQUAL
1589: IFFALSE 1647
// begin sheik := [ 0 , 1 ] [ def_sheik + 1 ] ;
1591: LD_ADDR_EXP 30
1595: PUSH
1596: LD_INT 0
1598: PUSH
1599: LD_INT 1
1601: PUSH
1602: EMPTY
1603: LIST
1604: LIST
1605: PUSH
1606: LD_EXP 56
1610: PUSH
1611: LD_INT 1
1613: PLUS
1614: ARRAY
1615: ST_TO_ADDR
// mastodont := [ 0 , 1 , 2 ] [ def_mastodont + 1 ] end else
1616: LD_ADDR_EXP 31
1620: PUSH
1621: LD_INT 0
1623: PUSH
1624: LD_INT 1
1626: PUSH
1627: LD_INT 2
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_EXP 57
1639: PUSH
1640: LD_INT 1
1642: PLUS
1643: ARRAY
1644: ST_TO_ADDR
1645: GO 1663
// begin sheik := 0 ;
1647: LD_ADDR_EXP 30
1651: PUSH
1652: LD_INT 0
1654: ST_TO_ADDR
// mastodont := 0 ;
1655: LD_ADDR_EXP 31
1659: PUSH
1660: LD_INT 0
1662: ST_TO_ADDR
// end ; BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
1663: LD_ADDR_EXP 39
1667: PUSH
1668: LD_INT 9
1670: PUSH
1671: LD_INT 10
1673: PUSH
1674: LD_INT 11
1676: PUSH
1677: LD_INT 12
1679: PUSH
1680: LD_INT 13
1682: PUSH
1683: LD_INT 14
1685: PUSH
1686: EMPTY
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: LIST
1692: LIST
1693: ST_TO_ADDR
// end ;
1694: LD_VAR 0 1
1698: RET
// function init_map ; var i , j ; begin
1699: LD_INT 0
1701: PPUSH
1702: PPUSH
1703: PPUSH
// normal_oil_deposits_locations := [ [ 101 , 187 ] , [ 18 , 26 ] , [ 50 , 89 ] , [ 123 , 3 ] , [ 182 , 69 ] , [ 231 , 174 ] ] ;
1704: LD_ADDR_EXP 25
1708: PUSH
1709: LD_INT 101
1711: PUSH
1712: LD_INT 187
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: PUSH
1719: LD_INT 18
1721: PUSH
1722: LD_INT 26
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: PUSH
1729: LD_INT 50
1731: PUSH
1732: LD_INT 89
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: PUSH
1739: LD_INT 123
1741: PUSH
1742: LD_INT 3
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: PUSH
1749: LD_INT 182
1751: PUSH
1752: LD_INT 69
1754: PUSH
1755: EMPTY
1756: LIST
1757: LIST
1758: PUSH
1759: LD_INT 231
1761: PUSH
1762: LD_INT 174
1764: PUSH
1765: EMPTY
1766: LIST
1767: LIST
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 101 , 187 ] , [ 108 , 183 ] ] , [ [ 18 , 26 ] , [ 7 , 8 ] ] , [ [ 50 , 89 ] , [ 62 , 99 ] ] , [ [ 123 , 3 ] , [ 149 , 18 ] ] , [ [ 182 , 69 ] , [ 202 , 90 ] ] , [ [ 231 , 174 ] , [ 239 , 164 ] ] ] ;
1777: LD_ADDR_EXP 26
1781: PUSH
1782: LD_INT 101
1784: PUSH
1785: LD_INT 187
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: PUSH
1792: LD_INT 108
1794: PUSH
1795: LD_INT 183
1797: PUSH
1798: EMPTY
1799: LIST
1800: LIST
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: LD_INT 18
1808: PUSH
1809: LD_INT 26
1811: PUSH
1812: EMPTY
1813: LIST
1814: LIST
1815: PUSH
1816: LD_INT 7
1818: PUSH
1819: LD_INT 8
1821: PUSH
1822: EMPTY
1823: LIST
1824: LIST
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: PUSH
1830: LD_INT 50
1832: PUSH
1833: LD_INT 89
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PUSH
1840: LD_INT 62
1842: PUSH
1843: LD_INT 99
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: PUSH
1854: LD_INT 123
1856: PUSH
1857: LD_INT 3
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PUSH
1864: LD_INT 149
1866: PUSH
1867: LD_INT 18
1869: PUSH
1870: EMPTY
1871: LIST
1872: LIST
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: LD_INT 182
1880: PUSH
1881: LD_INT 69
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PUSH
1888: LD_INT 202
1890: PUSH
1891: LD_INT 90
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: PUSH
1898: EMPTY
1899: LIST
1900: LIST
1901: PUSH
1902: LD_INT 231
1904: PUSH
1905: LD_INT 174
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: PUSH
1912: LD_INT 239
1914: PUSH
1915: LD_INT 164
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: PUSH
1926: EMPTY
1927: LIST
1928: LIST
1929: LIST
1930: LIST
1931: LIST
1932: LIST
1933: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 96 , 185 ] , [ 21 , 29 ] , [ 50 , 85 ] , [ 128 , 2 ] , [ 186 , 72 ] , [ 234 , 174 ] ] ;
1934: LD_ADDR_EXP 27
1938: PUSH
1939: LD_INT 96
1941: PUSH
1942: LD_INT 185
1944: PUSH
1945: EMPTY
1946: LIST
1947: LIST
1948: PUSH
1949: LD_INT 21
1951: PUSH
1952: LD_INT 29
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: PUSH
1959: LD_INT 50
1961: PUSH
1962: LD_INT 85
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: PUSH
1969: LD_INT 128
1971: PUSH
1972: LD_INT 2
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: PUSH
1979: LD_INT 186
1981: PUSH
1982: LD_INT 72
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: PUSH
1989: LD_INT 234
1991: PUSH
1992: LD_INT 174
1994: PUSH
1995: EMPTY
1996: LIST
1997: LIST
1998: PUSH
1999: EMPTY
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 96 , 185 ] , [ 109 , 179 ] ] , [ [ 21 , 29 ] , [ 9 , 5 ] ] , [ [ 50 , 85 ] , [ 66 , 102 ] ] , [ [ 128 , 2 ] , [ 152 , 15 ] ] , [ [ 186 , 72 ] , [ 200 , 86 ] ] , [ [ 234 , 174 ] , [ 237 , 160 ] ] ] ;
2007: LD_ADDR_EXP 28
2011: PUSH
2012: LD_INT 96
2014: PUSH
2015: LD_INT 185
2017: PUSH
2018: EMPTY
2019: LIST
2020: LIST
2021: PUSH
2022: LD_INT 109
2024: PUSH
2025: LD_INT 179
2027: PUSH
2028: EMPTY
2029: LIST
2030: LIST
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: PUSH
2036: LD_INT 21
2038: PUSH
2039: LD_INT 29
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: PUSH
2046: LD_INT 9
2048: PUSH
2049: LD_INT 5
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: PUSH
2056: EMPTY
2057: LIST
2058: LIST
2059: PUSH
2060: LD_INT 50
2062: PUSH
2063: LD_INT 85
2065: PUSH
2066: EMPTY
2067: LIST
2068: LIST
2069: PUSH
2070: LD_INT 66
2072: PUSH
2073: LD_INT 102
2075: PUSH
2076: EMPTY
2077: LIST
2078: LIST
2079: PUSH
2080: EMPTY
2081: LIST
2082: LIST
2083: PUSH
2084: LD_INT 128
2086: PUSH
2087: LD_INT 2
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: PUSH
2094: LD_INT 152
2096: PUSH
2097: LD_INT 15
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: PUSH
2108: LD_INT 186
2110: PUSH
2111: LD_INT 72
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: PUSH
2118: LD_INT 200
2120: PUSH
2121: LD_INT 86
2123: PUSH
2124: EMPTY
2125: LIST
2126: LIST
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: PUSH
2132: LD_INT 234
2134: PUSH
2135: LD_INT 174
2137: PUSH
2138: EMPTY
2139: LIST
2140: LIST
2141: PUSH
2142: LD_INT 237
2144: PUSH
2145: LD_INT 160
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PUSH
2152: EMPTY
2153: LIST
2154: LIST
2155: PUSH
2156: EMPTY
2157: LIST
2158: LIST
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: ST_TO_ADDR
// depot_def := [ [ 100 , 179 , 0 ] , [ 21 , 18 , 2 ] , [ 65 , 90 , 2 ] , [ 132 , 11 , 1 ] , [ 190 , 82 , 4 ] , [ 230 , 164 , 4 ] ] ;
2164: LD_ADDR_EXP 22
2168: PUSH
2169: LD_INT 100
2171: PUSH
2172: LD_INT 179
2174: PUSH
2175: LD_INT 0
2177: PUSH
2178: EMPTY
2179: LIST
2180: LIST
2181: LIST
2182: PUSH
2183: LD_INT 21
2185: PUSH
2186: LD_INT 18
2188: PUSH
2189: LD_INT 2
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: PUSH
2197: LD_INT 65
2199: PUSH
2200: LD_INT 90
2202: PUSH
2203: LD_INT 2
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: LIST
2210: PUSH
2211: LD_INT 132
2213: PUSH
2214: LD_INT 11
2216: PUSH
2217: LD_INT 1
2219: PUSH
2220: EMPTY
2221: LIST
2222: LIST
2223: LIST
2224: PUSH
2225: LD_INT 190
2227: PUSH
2228: LD_INT 82
2230: PUSH
2231: LD_INT 4
2233: PUSH
2234: EMPTY
2235: LIST
2236: LIST
2237: LIST
2238: PUSH
2239: LD_INT 230
2241: PUSH
2242: LD_INT 164
2244: PUSH
2245: LD_INT 4
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: LIST
2252: PUSH
2253: EMPTY
2254: LIST
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: LIST
2260: ST_TO_ADDR
// for i in depot_def do
2261: LD_ADDR_VAR 0 2
2265: PUSH
2266: LD_EXP 22
2270: PUSH
2271: FOR_IN
2272: IFFALSE 2346
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 10 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 10 ) ] ] ;
2274: LD_ADDR_EXP 24
2278: PUSH
2279: LD_EXP 24
2283: PUSH
2284: LD_VAR 0 2
2288: PUSH
2289: LD_INT 1
2291: ARRAY
2292: PPUSH
2293: LD_VAR 0 2
2297: PUSH
2298: LD_INT 3
2300: ARRAY
2301: PPUSH
2302: LD_INT 10
2304: PPUSH
2305: CALL_OW 272
2309: PUSH
2310: LD_VAR 0 2
2314: PUSH
2315: LD_INT 2
2317: ARRAY
2318: PPUSH
2319: LD_VAR 0 2
2323: PUSH
2324: LD_INT 3
2326: ARRAY
2327: PPUSH
2328: LD_INT 10
2330: PPUSH
2331: CALL_OW 273
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: PUSH
2340: EMPTY
2341: LIST
2342: ADD
2343: ST_TO_ADDR
2344: GO 2271
2346: POP
2347: POP
// breastworks_def := [ [ [ 88 , 154 , 3 ] , [ 105 , 167 , 4 ] ] , [ [ 27 , 32 , 5 ] , [ 40 , 24 , 4 ] ] , [ [ 78 , 102 , 5 ] , [ 74 , 84 , 3 ] ] , [ [ 128 , 20 , 0 ] , [ 122 , 6 , 1 ] ] , [ [ 185 , 92 , 0 ] , [ 175 , 73 , 1 ] ] , [ [ 219 , 171 , 1 ] , [ 219 , 151 , 2 ] ] ] ;
2348: LD_ADDR_EXP 23
2352: PUSH
2353: LD_INT 88
2355: PUSH
2356: LD_INT 154
2358: PUSH
2359: LD_INT 3
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: LIST
2366: PUSH
2367: LD_INT 105
2369: PUSH
2370: LD_INT 167
2372: PUSH
2373: LD_INT 4
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: PUSH
2385: LD_INT 27
2387: PUSH
2388: LD_INT 32
2390: PUSH
2391: LD_INT 5
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: LIST
2398: PUSH
2399: LD_INT 40
2401: PUSH
2402: LD_INT 24
2404: PUSH
2405: LD_INT 4
2407: PUSH
2408: EMPTY
2409: LIST
2410: LIST
2411: LIST
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: PUSH
2417: LD_INT 78
2419: PUSH
2420: LD_INT 102
2422: PUSH
2423: LD_INT 5
2425: PUSH
2426: EMPTY
2427: LIST
2428: LIST
2429: LIST
2430: PUSH
2431: LD_INT 74
2433: PUSH
2434: LD_INT 84
2436: PUSH
2437: LD_INT 3
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: LIST
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: PUSH
2449: LD_INT 128
2451: PUSH
2452: LD_INT 20
2454: PUSH
2455: LD_INT 0
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: LIST
2462: PUSH
2463: LD_INT 122
2465: PUSH
2466: LD_INT 6
2468: PUSH
2469: LD_INT 1
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: LIST
2476: PUSH
2477: EMPTY
2478: LIST
2479: LIST
2480: PUSH
2481: LD_INT 185
2483: PUSH
2484: LD_INT 92
2486: PUSH
2487: LD_INT 0
2489: PUSH
2490: EMPTY
2491: LIST
2492: LIST
2493: LIST
2494: PUSH
2495: LD_INT 175
2497: PUSH
2498: LD_INT 73
2500: PUSH
2501: LD_INT 1
2503: PUSH
2504: EMPTY
2505: LIST
2506: LIST
2507: LIST
2508: PUSH
2509: EMPTY
2510: LIST
2511: LIST
2512: PUSH
2513: LD_INT 219
2515: PUSH
2516: LD_INT 171
2518: PUSH
2519: LD_INT 1
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: LIST
2526: PUSH
2527: LD_INT 219
2529: PUSH
2530: LD_INT 151
2532: PUSH
2533: LD_INT 2
2535: PUSH
2536: EMPTY
2537: LIST
2538: LIST
2539: LIST
2540: PUSH
2541: EMPTY
2542: LIST
2543: LIST
2544: PUSH
2545: EMPTY
2546: LIST
2547: LIST
2548: LIST
2549: LIST
2550: LIST
2551: LIST
2552: ST_TO_ADDR
// for i = 1 to Side_Positions do
2553: LD_ADDR_VAR 0 2
2557: PUSH
2558: DOUBLE
2559: LD_INT 1
2561: DEC
2562: ST_TO_ADDR
2563: LD_EXP 18
2567: PUSH
2568: FOR_TO
2569: IFFALSE 2699
// begin if not Side_Positions [ i ] then
2571: LD_EXP 18
2575: PUSH
2576: LD_VAR 0 2
2580: ARRAY
2581: NOT
2582: IFFALSE 2586
// continue ;
2584: GO 2568
// if def_extra_oil_deposits then
2586: LD_EXP 47
2590: IFFALSE 2648
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2592: LD_ADDR_VAR 0 3
2596: PUSH
2597: LD_EXP 26
2601: PUSH
2602: LD_EXP 18
2606: PUSH
2607: LD_VAR 0 2
2611: ARRAY
2612: ARRAY
2613: PUSH
2614: FOR_IN
2615: IFFALSE 2644
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2617: LD_VAR 0 3
2621: PUSH
2622: LD_INT 1
2624: ARRAY
2625: PPUSH
2626: LD_VAR 0 3
2630: PUSH
2631: LD_INT 2
2633: ARRAY
2634: PPUSH
2635: LD_INT 2
2637: PPUSH
2638: CALL_OW 62
2642: GO 2614
2644: POP
2645: POP
2646: GO 2697
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2648: LD_EXP 25
2652: PUSH
2653: LD_EXP 18
2657: PUSH
2658: LD_VAR 0 2
2662: ARRAY
2663: ARRAY
2664: PUSH
2665: LD_INT 1
2667: ARRAY
2668: PPUSH
2669: LD_EXP 25
2673: PUSH
2674: LD_EXP 18
2678: PUSH
2679: LD_VAR 0 2
2683: ARRAY
2684: ARRAY
2685: PUSH
2686: LD_INT 2
2688: ARRAY
2689: PPUSH
2690: LD_INT 2
2692: PPUSH
2693: CALL_OW 62
// end ;
2697: GO 2568
2699: POP
2700: POP
// if def_extra_sib_deposits then
2701: LD_EXP 48
2705: IFFALSE 2859
// for i = 1 to Side_Positions do
2707: LD_ADDR_VAR 0 2
2711: PUSH
2712: DOUBLE
2713: LD_INT 1
2715: DEC
2716: ST_TO_ADDR
2717: LD_EXP 18
2721: PUSH
2722: FOR_TO
2723: IFFALSE 2857
// begin if not Side_Positions [ i ] then
2725: LD_EXP 18
2729: PUSH
2730: LD_VAR 0 2
2734: ARRAY
2735: NOT
2736: IFFALSE 2740
// continue ;
2738: GO 2722
// if def_extra_sib_deposits = 2 then
2740: LD_EXP 48
2744: PUSH
2745: LD_INT 2
2747: EQUAL
2748: IFFALSE 2806
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
2750: LD_ADDR_VAR 0 3
2754: PUSH
2755: LD_EXP 28
2759: PUSH
2760: LD_EXP 18
2764: PUSH
2765: LD_VAR 0 2
2769: ARRAY
2770: ARRAY
2771: PUSH
2772: FOR_IN
2773: IFFALSE 2802
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2775: LD_VAR 0 3
2779: PUSH
2780: LD_INT 1
2782: ARRAY
2783: PPUSH
2784: LD_VAR 0 3
2788: PUSH
2789: LD_INT 2
2791: ARRAY
2792: PPUSH
2793: LD_INT 3
2795: PPUSH
2796: CALL_OW 62
2800: GO 2772
2802: POP
2803: POP
2804: GO 2855
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2806: LD_EXP 27
2810: PUSH
2811: LD_EXP 18
2815: PUSH
2816: LD_VAR 0 2
2820: ARRAY
2821: ARRAY
2822: PUSH
2823: LD_INT 1
2825: ARRAY
2826: PPUSH
2827: LD_EXP 27
2831: PUSH
2832: LD_EXP 18
2836: PUSH
2837: LD_VAR 0 2
2841: ARRAY
2842: ARRAY
2843: PUSH
2844: LD_INT 2
2846: ARRAY
2847: PPUSH
2848: LD_INT 3
2850: PPUSH
2851: CALL_OW 62
// end ;
2855: GO 2722
2857: POP
2858: POP
// end ;
2859: LD_VAR 0 1
2863: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2864: LD_INT 0
2866: PPUSH
2867: PPUSH
2868: PPUSH
// if not Team_Game then
2869: LD_EXP 20
2873: NOT
2874: IFFALSE 2972
// begin for i = 1 to 8 do
2876: LD_ADDR_VAR 0 2
2880: PUSH
2881: DOUBLE
2882: LD_INT 1
2884: DEC
2885: ST_TO_ADDR
2886: LD_INT 8
2888: PUSH
2889: FOR_TO
2890: IFFALSE 2968
// for j = 1 to 8 do
2892: LD_ADDR_VAR 0 3
2896: PUSH
2897: DOUBLE
2898: LD_INT 1
2900: DEC
2901: ST_TO_ADDR
2902: LD_INT 8
2904: PUSH
2905: FOR_TO
2906: IFFALSE 2964
// if i <> j then
2908: LD_VAR 0 2
2912: PUSH
2913: LD_VAR 0 3
2917: NONEQUAL
2918: IFFALSE 2942
// SetAttitude ( i , j , att_neutral , true ) else
2920: LD_VAR 0 2
2924: PPUSH
2925: LD_VAR 0 3
2929: PPUSH
2930: LD_INT 0
2932: PPUSH
2933: LD_INT 1
2935: PPUSH
2936: CALL_OW 80
2940: GO 2962
// SetAttitude ( i , j , att_friend , true ) ;
2942: LD_VAR 0 2
2946: PPUSH
2947: LD_VAR 0 3
2951: PPUSH
2952: LD_INT 1
2954: PPUSH
2955: LD_INT 1
2957: PPUSH
2958: CALL_OW 80
2962: GO 2905
2964: POP
2965: POP
2966: GO 2889
2968: POP
2969: POP
// end else
2970: GO 3147
// begin if def_shared_vision then
2972: LD_EXP 49
2976: IFFALSE 3041
// begin for i in Teams do
2978: LD_ADDR_VAR 0 2
2982: PUSH
2983: LD_EXP 17
2987: PUSH
2988: FOR_IN
2989: IFFALSE 3039
// for j = 2 to i do
2991: LD_ADDR_VAR 0 3
2995: PUSH
2996: DOUBLE
2997: LD_INT 2
2999: DEC
3000: ST_TO_ADDR
3001: LD_VAR 0 2
3005: PUSH
3006: FOR_TO
3007: IFFALSE 3035
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
3009: LD_VAR 0 2
3013: PUSH
3014: LD_VAR 0 3
3018: ARRAY
3019: PPUSH
3020: LD_VAR 0 2
3024: PUSH
3025: LD_INT 1
3027: ARRAY
3028: PPUSH
3029: CALL_OW 343
3033: GO 3006
3035: POP
3036: POP
3037: GO 2988
3039: POP
3040: POP
// end ; for i = 1 to 8 do
3041: LD_ADDR_VAR 0 2
3045: PUSH
3046: DOUBLE
3047: LD_INT 1
3049: DEC
3050: ST_TO_ADDR
3051: LD_INT 8
3053: PUSH
3054: FOR_TO
3055: IFFALSE 3145
// for j = 1 to 8 do
3057: LD_ADDR_VAR 0 3
3061: PUSH
3062: DOUBLE
3063: LD_INT 1
3065: DEC
3066: ST_TO_ADDR
3067: LD_INT 8
3069: PUSH
3070: FOR_TO
3071: IFFALSE 3141
// if Side_Teams [ i ] = Side_Teams [ j ] then
3073: LD_EXP 16
3077: PUSH
3078: LD_VAR 0 2
3082: ARRAY
3083: PUSH
3084: LD_EXP 16
3088: PUSH
3089: LD_VAR 0 3
3093: ARRAY
3094: EQUAL
3095: IFFALSE 3119
// SetAttitude ( i , j , att_friend , true ) else
3097: LD_VAR 0 2
3101: PPUSH
3102: LD_VAR 0 3
3106: PPUSH
3107: LD_INT 1
3109: PPUSH
3110: LD_INT 1
3112: PPUSH
3113: CALL_OW 80
3117: GO 3139
// SetAttitude ( i , j , att_enemy , true ) ;
3119: LD_VAR 0 2
3123: PPUSH
3124: LD_VAR 0 3
3128: PPUSH
3129: LD_INT 2
3131: PPUSH
3132: LD_INT 1
3134: PPUSH
3135: CALL_OW 80
3139: GO 3070
3141: POP
3142: POP
3143: GO 3054
3145: POP
3146: POP
// end ; end ;
3147: LD_VAR 0 1
3151: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
3152: LD_INT 0
3154: PPUSH
3155: PPUSH
3156: PPUSH
3157: PPUSH
// result := [ ] ;
3158: LD_ADDR_VAR 0 7
3162: PUSH
3163: EMPTY
3164: ST_TO_ADDR
// for i := 1 to count do
3165: LD_ADDR_VAR 0 8
3169: PUSH
3170: DOUBLE
3171: LD_INT 1
3173: DEC
3174: ST_TO_ADDR
3175: LD_VAR 0 1
3179: PUSH
3180: FOR_TO
3181: IFFALSE 3631
// begin uc_direction := Rand ( 0 , 5 ) ;
3183: LD_ADDR_OWVAR 24
3187: PUSH
3188: LD_INT 0
3190: PPUSH
3191: LD_INT 5
3193: PPUSH
3194: CALL_OW 12
3198: ST_TO_ADDR
// if commander then
3199: LD_LOC 1
3203: IFFALSE 3344
// begin hc_name := mp_sides_players_names [ uc_side ] ;
3205: LD_ADDR_OWVAR 26
3209: PUSH
3210: LD_OWVAR 19
3214: PUSH
3215: LD_OWVAR 20
3219: ARRAY
3220: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3221: LD_INT 1
3223: PPUSH
3224: LD_INT 2
3226: PPUSH
3227: CALL_OW 12
3231: PPUSH
3232: LD_VAR 0 2
3236: PPUSH
3237: LD_EXP 6
3241: PUSH
3242: LD_INT 2
3244: PLUS
3245: PPUSH
3246: CALL_OW 380
// hc_importance := 105 ;
3250: LD_ADDR_OWVAR 32
3254: PUSH
3255: LD_INT 105
3257: ST_TO_ADDR
// commander := false ;
3258: LD_ADDR_LOC 1
3262: PUSH
3263: LD_INT 0
3265: ST_TO_ADDR
// if Multiplayer then
3266: LD_OWVAR 4
3270: IFFALSE 3342
// begin if sheik then
3272: LD_EXP 30
3276: IFFALSE 3304
// begin hc_gallery :=  ;
3278: LD_ADDR_OWVAR 33
3282: PUSH
3283: LD_STRING 
3285: ST_TO_ADDR
// hc_class := class_desert_warior ;
3286: LD_ADDR_OWVAR 28
3290: PUSH
3291: LD_INT 11
3293: ST_TO_ADDR
// hc_sex := sex_male ;
3294: LD_ADDR_OWVAR 27
3298: PUSH
3299: LD_INT 1
3301: ST_TO_ADDR
// end else
3302: GO 3342
// begin hc_gallery := MULTIAVATARS ;
3304: LD_ADDR_OWVAR 33
3308: PUSH
3309: LD_STRING MULTIAVATARS
3311: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3312: LD_ADDR_OWVAR 34
3316: PUSH
3317: LD_OWVAR 20
3321: PPUSH
3322: CALL_OW 525
3326: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3327: LD_ADDR_OWVAR 27
3331: PUSH
3332: LD_OWVAR 20
3336: PPUSH
3337: CALL_OW 526
3341: ST_TO_ADDR
// end ; end ; end else
3342: GO 3407
// begin hc_name :=  ;
3344: LD_ADDR_OWVAR 26
3348: PUSH
3349: LD_STRING 
3351: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3352: LD_INT 1
3354: PPUSH
3355: LD_INT 2
3357: PPUSH
3358: CALL_OW 12
3362: PPUSH
3363: LD_VAR 0 2
3367: PPUSH
3368: LD_EXP 6
3372: PPUSH
3373: CALL_OW 380
// hc_importance := 0 ;
3377: LD_ADDR_OWVAR 32
3381: PUSH
3382: LD_INT 0
3384: ST_TO_ADDR
// if Multiplayer then
3385: LD_OWVAR 4
3389: IFFALSE 3407
// begin hc_gallery :=  ;
3391: LD_ADDR_OWVAR 33
3395: PUSH
3396: LD_STRING 
3398: ST_TO_ADDR
// hc_face_number := 0 ;
3399: LD_ADDR_OWVAR 34
3403: PUSH
3404: LD_INT 0
3406: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3407: LD_ADDR_VAR 0 10
3411: PUSH
3412: CALL_OW 44
3416: ST_TO_ADDR
// if global_defined then
3417: LD_LOC 3
3421: IFFALSE 3561
// begin if ( cl = class_soldier ) then
3423: LD_VAR 0 2
3427: PUSH
3428: LD_INT 1
3430: EQUAL
3431: IFFALSE 3451
// j := i + soldiers_created else
3433: LD_ADDR_VAR 0 9
3437: PUSH
3438: LD_VAR 0 8
3442: PUSH
3443: LD_LOC 4
3447: PLUS
3448: ST_TO_ADDR
3449: GO 3461
// j := i ;
3451: LD_ADDR_VAR 0 9
3455: PUSH
3456: LD_VAR 0 8
3460: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3461: LD_LOC 2
3465: PUSH
3466: LD_VAR 0 2
3470: ARRAY
3471: PUSH
3472: LD_VAR 0 9
3476: ARRAY
3477: PPUSH
3478: LD_VAR 0 10
3482: PPUSH
3483: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3487: LD_VAR 0 10
3491: PPUSH
3492: LD_INT 2
3494: PPUSH
3495: LD_LOC 2
3499: PUSH
3500: LD_VAR 0 2
3504: ARRAY
3505: PUSH
3506: LD_VAR 0 9
3510: ARRAY
3511: PPUSH
3512: LD_INT 2
3514: PPUSH
3515: CALL_OW 260
3519: PPUSH
3520: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3524: LD_VAR 0 10
3528: PPUSH
3529: LD_INT 1
3531: PPUSH
3532: LD_LOC 2
3536: PUSH
3537: LD_VAR 0 2
3541: ARRAY
3542: PUSH
3543: LD_VAR 0 9
3547: ARRAY
3548: PPUSH
3549: LD_INT 1
3551: PPUSH
3552: CALL_OW 260
3556: PPUSH
3557: CALL_OW 239
// end ; if building then
3561: LD_VAR 0 6
3565: IFFALSE 3583
// PlaceHumanInUnit ( un , building ) else
3567: LD_VAR 0 10
3571: PPUSH
3572: LD_VAR 0 6
3576: PPUSH
3577: CALL_OW 52
3581: GO 3610
// PlaceUnitXYR ( un , x , y , r , false ) ;
3583: LD_VAR 0 10
3587: PPUSH
3588: LD_VAR 0 3
3592: PPUSH
3593: LD_VAR 0 4
3597: PPUSH
3598: LD_VAR 0 5
3602: PPUSH
3603: LD_INT 0
3605: PPUSH
3606: CALL_OW 50
// result := result ^ [ un ] ;
3610: LD_ADDR_VAR 0 7
3614: PUSH
3615: LD_VAR 0 7
3619: PUSH
3620: LD_VAR 0 10
3624: PUSH
3625: EMPTY
3626: LIST
3627: ADD
3628: ST_TO_ADDR
// end ;
3629: GO 3180
3631: POP
3632: POP
// if not global_defined then
3633: LD_LOC 3
3637: NOT
3638: IFFALSE 3716
// if ( global_units >= cl ) then
3640: LD_LOC 2
3644: PUSH
3645: LD_VAR 0 2
3649: GREATEREQUAL
3650: IFFALSE 3691
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3652: LD_ADDR_LOC 2
3656: PUSH
3657: LD_LOC 2
3661: PPUSH
3662: LD_VAR 0 2
3666: PPUSH
3667: LD_LOC 2
3671: PUSH
3672: LD_VAR 0 2
3676: ARRAY
3677: PUSH
3678: LD_VAR 0 7
3682: ADD
3683: PPUSH
3684: CALL_OW 1
3688: ST_TO_ADDR
3689: GO 3716
// global_units := Replace ( global_units , cl , result ) ;
3691: LD_ADDR_LOC 2
3695: PUSH
3696: LD_LOC 2
3700: PPUSH
3701: LD_VAR 0 2
3705: PPUSH
3706: LD_VAR 0 7
3710: PPUSH
3711: CALL_OW 1
3715: ST_TO_ADDR
// end ;
3716: LD_VAR 0 7
3720: RET
// function prepare_mastodonts ( n ) ; var i ; begin
3721: LD_INT 0
3723: PPUSH
3724: PPUSH
// uc_side := 0 ;
3725: LD_ADDR_OWVAR 20
3729: PUSH
3730: LD_INT 0
3732: ST_TO_ADDR
// uc_nation := 0 ;
3733: LD_ADDR_OWVAR 21
3737: PUSH
3738: LD_INT 0
3740: ST_TO_ADDR
// vc_chassis := 31 ;
3741: LD_ADDR_OWVAR 37
3745: PUSH
3746: LD_INT 31
3748: ST_TO_ADDR
// vc_control := control_rider ;
3749: LD_ADDR_OWVAR 38
3753: PUSH
3754: LD_INT 4
3756: ST_TO_ADDR
// for i = 1 to n do
3757: LD_ADDR_VAR 0 3
3761: PUSH
3762: DOUBLE
3763: LD_INT 1
3765: DEC
3766: ST_TO_ADDR
3767: LD_VAR 0 1
3771: PUSH
3772: FOR_TO
3773: IFFALSE 3792
// PlaceUnitArea ( CreateVehicle , MastodontSpawn , false ) ;
3775: CALL_OW 45
3779: PPUSH
3780: LD_INT 15
3782: PPUSH
3783: LD_INT 0
3785: PPUSH
3786: CALL_OW 49
3790: GO 3772
3792: POP
3793: POP
// end ;
3794: LD_VAR 0 2
3798: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3799: LD_INT 0
3801: PPUSH
3802: PPUSH
3803: PPUSH
3804: PPUSH
3805: PPUSH
3806: PPUSH
3807: PPUSH
3808: PPUSH
3809: PPUSH
// pos := Side_Positions [ side ] ;
3810: LD_ADDR_VAR 0 3
3814: PUSH
3815: LD_EXP 18
3819: PUSH
3820: LD_VAR 0 1
3824: ARRAY
3825: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3826: LD_ADDR_OWVAR 21
3830: PUSH
3831: LD_EXP 19
3835: PUSH
3836: LD_VAR 0 1
3840: ARRAY
3841: ST_TO_ADDR
// uc_side := side ;
3842: LD_ADDR_OWVAR 20
3846: PUSH
3847: LD_VAR 0 1
3851: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3852: LD_ADDR_VAR 0 4
3856: PUSH
3857: LD_EXP 22
3861: PUSH
3862: LD_VAR 0 3
3866: ARRAY
3867: PUSH
3868: LD_INT 1
3870: ARRAY
3871: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3872: LD_ADDR_VAR 0 5
3876: PUSH
3877: LD_EXP 22
3881: PUSH
3882: LD_VAR 0 3
3886: ARRAY
3887: PUSH
3888: LD_INT 2
3890: ARRAY
3891: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3892: LD_ADDR_VAR 0 6
3896: PUSH
3897: LD_EXP 22
3901: PUSH
3902: LD_VAR 0 3
3906: ARRAY
3907: PUSH
3908: LD_INT 3
3910: ARRAY
3911: ST_TO_ADDR
// if is_depot then
3912: LD_EXP 3
3916: IFFALSE 4049
// begin bc_type = b_depot ;
3918: LD_ADDR_OWVAR 42
3922: PUSH
3923: LD_INT 0
3925: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3926: LD_ADDR_VAR 0 10
3930: PUSH
3931: LD_VAR 0 4
3935: PPUSH
3936: LD_VAR 0 5
3940: PPUSH
3941: LD_VAR 0 6
3945: PPUSH
3946: CALL_OW 47
3950: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3951: LD_VAR 0 10
3955: PPUSH
3956: LD_STRING @
3958: PUSH
3959: LD_VAR 0 1
3963: STR
3964: PPUSH
3965: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3969: LD_VAR 0 10
3973: PPUSH
3974: CALL_OW 274
3978: PPUSH
3979: LD_INT 1
3981: PPUSH
3982: LD_EXP 8
3986: PUSH
3987: LD_INT 1
3989: ARRAY
3990: PPUSH
3991: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3995: LD_VAR 0 10
3999: PPUSH
4000: CALL_OW 274
4004: PPUSH
4005: LD_INT 2
4007: PPUSH
4008: LD_EXP 8
4012: PUSH
4013: LD_INT 2
4015: ARRAY
4016: PPUSH
4017: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
4021: LD_VAR 0 10
4025: PPUSH
4026: CALL_OW 274
4030: PPUSH
4031: LD_INT 3
4033: PPUSH
4034: LD_EXP 8
4038: PUSH
4039: LD_INT 3
4041: ARRAY
4042: PPUSH
4043: CALL_OW 277
// end else
4047: GO 4193
// begin for i := 1 to 3 do
4049: LD_ADDR_VAR 0 7
4053: PUSH
4054: DOUBLE
4055: LD_INT 1
4057: DEC
4058: ST_TO_ADDR
4059: LD_INT 3
4061: PUSH
4062: FOR_TO
4063: IFFALSE 4191
// begin r := starting_resources [ i ] ;
4065: LD_ADDR_VAR 0 8
4069: PUSH
4070: LD_EXP 8
4074: PUSH
4075: LD_VAR 0 7
4079: ARRAY
4080: ST_TO_ADDR
// while r >= 10 do
4081: LD_VAR 0 8
4085: PUSH
4086: LD_INT 10
4088: GREATEREQUAL
4089: IFFALSE 4189
// if r > 50 then
4091: LD_VAR 0 8
4095: PUSH
4096: LD_INT 50
4098: GREATER
4099: IFFALSE 4145
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
4101: LD_VAR 0 7
4105: PPUSH
4106: LD_INT 5
4108: PPUSH
4109: LD_VAR 0 4
4113: PPUSH
4114: LD_VAR 0 5
4118: PPUSH
4119: LD_INT 4
4121: PPUSH
4122: LD_INT 0
4124: PPUSH
4125: CALL_OW 60
// r := r - 50 ;
4129: LD_ADDR_VAR 0 8
4133: PUSH
4134: LD_VAR 0 8
4138: PUSH
4139: LD_INT 50
4141: MINUS
4142: ST_TO_ADDR
// end else
4143: GO 4187
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
4145: LD_VAR 0 7
4149: PPUSH
4150: LD_VAR 0 8
4154: PUSH
4155: LD_INT 10
4157: DIV
4158: PPUSH
4159: LD_VAR 0 4
4163: PPUSH
4164: LD_VAR 0 5
4168: PPUSH
4169: LD_INT 4
4171: PPUSH
4172: LD_INT 0
4174: PPUSH
4175: CALL_OW 60
// r := 0 ;
4179: LD_ADDR_VAR 0 8
4183: PUSH
4184: LD_INT 0
4186: ST_TO_ADDR
// end ;
4187: GO 4081
// end ;
4189: GO 4062
4191: POP
4192: POP
// end ; for r in starting_crates do
4193: LD_ADDR_VAR 0 8
4197: PUSH
4198: LD_EXP 7
4202: PUSH
4203: FOR_IN
4204: IFFALSE 4236
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
4206: LD_INT 1
4208: PPUSH
4209: LD_INT 5
4211: PPUSH
4212: LD_VAR 0 4
4216: PPUSH
4217: LD_VAR 0 5
4221: PPUSH
4222: LD_VAR 0 8
4226: PPUSH
4227: LD_INT 0
4229: PPUSH
4230: CALL_OW 60
4234: GO 4203
4236: POP
4237: POP
// if def_morale_flags then
4238: LD_EXP 50
4242: IFFALSE 4381
// begin x := start_def [ pos ] [ 1 ] ;
4244: LD_ADDR_VAR 0 4
4248: PUSH
4249: LD_EXP 24
4253: PUSH
4254: LD_VAR 0 3
4258: ARRAY
4259: PUSH
4260: LD_INT 1
4262: ARRAY
4263: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4264: LD_ADDR_VAR 0 5
4268: PUSH
4269: LD_EXP 24
4273: PUSH
4274: LD_VAR 0 3
4278: ARRAY
4279: PUSH
4280: LD_INT 2
4282: ARRAY
4283: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4284: LD_VAR 0 4
4288: PPUSH
4289: LD_VAR 0 5
4293: PPUSH
4294: LD_INT 12
4296: PPUSH
4297: LD_INT 2
4299: PPUSH
4300: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4304: LD_ADDR_EXP 29
4308: PUSH
4309: LD_EXP 29
4313: PUSH
4314: LD_VAR 0 1
4318: PPUSH
4319: LD_VAR 0 4
4323: PPUSH
4324: LD_VAR 0 5
4328: PPUSH
4329: LD_INT 1
4331: PUSH
4332: LD_INT 100
4334: PUSH
4335: EMPTY
4336: LIST
4337: LIST
4338: PUSH
4339: LD_INT 2
4341: PUSH
4342: LD_INT 50
4344: PUSH
4345: EMPTY
4346: LIST
4347: LIST
4348: PUSH
4349: LD_INT 3
4351: PUSH
4352: LD_INT 20
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: PUSH
4359: LD_INT 20
4361: PUSH
4362: LD_INT 100
4364: PUSH
4365: EMPTY
4366: LIST
4367: LIST
4368: PUSH
4369: EMPTY
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: PPUSH
4375: CALL_OW 418
4379: ADD
4380: ST_TO_ADDR
// end ; commander := true ;
4381: LD_ADDR_LOC 1
4385: PUSH
4386: LD_INT 1
4388: ST_TO_ADDR
// soldiers_created := 0 ;
4389: LD_ADDR_LOC 4
4393: PUSH
4394: LD_INT 0
4396: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4397: LD_ADDR_VAR 0 7
4401: PUSH
4402: DOUBLE
4403: LD_INT 1
4405: DEC
4406: ST_TO_ADDR
4407: LD_EXP 4
4411: PUSH
4412: FOR_TO
4413: IFFALSE 4566
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4415: LD_ADDR_VAR 0 4
4419: PUSH
4420: LD_EXP 23
4424: PUSH
4425: LD_VAR 0 3
4429: ARRAY
4430: PUSH
4431: LD_VAR 0 7
4435: ARRAY
4436: PUSH
4437: LD_INT 1
4439: ARRAY
4440: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4441: LD_ADDR_VAR 0 5
4445: PUSH
4446: LD_EXP 23
4450: PUSH
4451: LD_VAR 0 3
4455: ARRAY
4456: PUSH
4457: LD_VAR 0 7
4461: ARRAY
4462: PUSH
4463: LD_INT 2
4465: ARRAY
4466: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4467: LD_ADDR_VAR 0 6
4471: PUSH
4472: LD_EXP 23
4476: PUSH
4477: LD_VAR 0 3
4481: ARRAY
4482: PUSH
4483: LD_VAR 0 7
4487: ARRAY
4488: PUSH
4489: LD_INT 3
4491: ARRAY
4492: ST_TO_ADDR
// bc_type := b_breastwork ;
4493: LD_ADDR_OWVAR 42
4497: PUSH
4498: LD_INT 31
4500: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4501: LD_ADDR_VAR 0 9
4505: PUSH
4506: LD_VAR 0 4
4510: PPUSH
4511: LD_VAR 0 5
4515: PPUSH
4516: LD_VAR 0 6
4520: PPUSH
4521: CALL_OW 47
4525: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4526: LD_INT 1
4528: PPUSH
4529: LD_INT 1
4531: PPUSH
4532: LD_INT 0
4534: PPUSH
4535: LD_INT 0
4537: PPUSH
4538: LD_INT 0
4540: PPUSH
4541: LD_VAR 0 9
4545: PPUSH
4546: CALL 3152 0 6
// soldiers_created := soldiers_created + 1 ;
4550: LD_ADDR_LOC 4
4554: PUSH
4555: LD_LOC 4
4559: PUSH
4560: LD_INT 1
4562: PLUS
4563: ST_TO_ADDR
// end ;
4564: GO 4412
4566: POP
4567: POP
// x := start_def [ pos ] [ 1 ] ;
4568: LD_ADDR_VAR 0 4
4572: PUSH
4573: LD_EXP 24
4577: PUSH
4578: LD_VAR 0 3
4582: ARRAY
4583: PUSH
4584: LD_INT 1
4586: ARRAY
4587: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4588: LD_ADDR_VAR 0 5
4592: PUSH
4593: LD_EXP 24
4597: PUSH
4598: LD_VAR 0 3
4602: ARRAY
4603: PUSH
4604: LD_INT 2
4606: ARRAY
4607: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4608: LD_LOC 8
4612: PUSH
4613: LD_EXP 4
4617: MINUS
4618: PPUSH
4619: LD_INT 1
4621: PPUSH
4622: LD_VAR 0 4
4626: PPUSH
4627: LD_VAR 0 5
4631: PPUSH
4632: LD_INT 5
4634: PPUSH
4635: LD_INT 0
4637: PPUSH
4638: CALL 3152 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4642: LD_LOC 5
4646: PPUSH
4647: LD_INT 2
4649: PPUSH
4650: LD_VAR 0 4
4654: PPUSH
4655: LD_VAR 0 5
4659: PPUSH
4660: LD_INT 5
4662: PPUSH
4663: LD_INT 0
4665: PPUSH
4666: CALL 3152 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4670: LD_LOC 7
4674: PPUSH
4675: LD_INT 3
4677: PPUSH
4678: LD_VAR 0 4
4682: PPUSH
4683: LD_VAR 0 5
4687: PPUSH
4688: LD_INT 5
4690: PPUSH
4691: LD_INT 0
4693: PPUSH
4694: CALL 3152 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4698: LD_LOC 6
4702: PPUSH
4703: LD_INT 4
4705: PPUSH
4706: LD_VAR 0 4
4710: PPUSH
4711: LD_VAR 0 5
4715: PPUSH
4716: LD_INT 5
4718: PPUSH
4719: LD_INT 0
4721: PPUSH
4722: CALL 3152 0 6
// if def_siberite_detection then
4726: LD_EXP 51
4730: IFFALSE 4747
// SetTech ( tech_SibDet , side , state_researched ) ;
4732: LD_INT 20
4734: PPUSH
4735: LD_VAR 0 1
4739: PPUSH
4740: LD_INT 2
4742: PPUSH
4743: CALL_OW 322
// if def_siberite_bomb = 1 then
4747: LD_EXP 54
4751: PUSH
4752: LD_INT 1
4754: EQUAL
4755: IFFALSE 4789
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4757: LD_INT 25
4759: PPUSH
4760: LD_VAR 0 1
4764: PPUSH
4765: LD_INT 1
4767: PPUSH
4768: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4772: LD_INT 73
4774: PPUSH
4775: LD_VAR 0 1
4779: PPUSH
4780: LD_INT 1
4782: PPUSH
4783: CALL_OW 322
// end else
4787: GO 4819
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4789: LD_INT 25
4791: PPUSH
4792: LD_VAR 0 1
4796: PPUSH
4797: LD_INT 0
4799: PPUSH
4800: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4804: LD_INT 73
4806: PPUSH
4807: LD_VAR 0 1
4811: PPUSH
4812: LD_INT 0
4814: PPUSH
4815: CALL_OW 322
// end ; global_defined := true ;
4819: LD_ADDR_LOC 3
4823: PUSH
4824: LD_INT 1
4826: ST_TO_ADDR
// end ;
4827: LD_VAR 0 2
4831: RET
// every 0 0$1 do
4832: GO 4834
4834: DISABLE
// if ( def_siberite_bomb > 1 ) then
4835: LD_EXP 54
4839: PUSH
4840: LD_INT 1
4842: GREATER
4843: IFFALSE 4858
// begin wait ( siberite_bomb_Delay ) ;
4845: LD_EXP 15
4849: PPUSH
4850: CALL_OW 67
// EnableSibFiss ;
4854: CALL 4859 0 0
// end ;
4858: END
// function EnableSibFiss ; var i ; begin
4859: LD_INT 0
4861: PPUSH
4862: PPUSH
// for i := 1 to 8 do
4863: LD_ADDR_VAR 0 2
4867: PUSH
4868: DOUBLE
4869: LD_INT 1
4871: DEC
4872: ST_TO_ADDR
4873: LD_INT 8
4875: PUSH
4876: FOR_TO
4877: IFFALSE 4923
// if Side_Positions [ i ] then
4879: LD_EXP 18
4883: PUSH
4884: LD_VAR 0 2
4888: ARRAY
4889: IFFALSE 4921
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4891: LD_INT 25
4893: PPUSH
4894: LD_VAR 0 2
4898: PPUSH
4899: LD_INT 1
4901: PPUSH
4902: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4906: LD_INT 73
4908: PPUSH
4909: LD_VAR 0 2
4913: PPUSH
4914: LD_INT 1
4916: PPUSH
4917: CALL_OW 322
// end ;
4921: GO 4876
4923: POP
4924: POP
// end ;
4925: LD_VAR 0 1
4929: RET
// function prepare_sides ; var i ; begin
4930: LD_INT 0
4932: PPUSH
4933: PPUSH
// global_units := [ ] ;
4934: LD_ADDR_LOC 2
4938: PUSH
4939: EMPTY
4940: ST_TO_ADDR
// global_defined := false ;
4941: LD_ADDR_LOC 3
4945: PUSH
4946: LD_INT 0
4948: ST_TO_ADDR
// CountClassMembers ;
4949: CALL 5028 0 0
// for i := 1 to 8 do
4953: LD_ADDR_VAR 0 2
4957: PUSH
4958: DOUBLE
4959: LD_INT 1
4961: DEC
4962: ST_TO_ADDR
4963: LD_INT 8
4965: PUSH
4966: FOR_TO
4967: IFFALSE 5021
// if Side_Positions [ i ] then
4969: LD_EXP 18
4973: PUSH
4974: LD_VAR 0 2
4978: ARRAY
4979: IFFALSE 5019
// begin prepare_side ( i ) ;
4981: LD_VAR 0 2
4985: PPUSH
4986: CALL 3799 0 1
// if ( Game_Type = 12 ) and mastodont > 0 then
4990: LD_EXP 40
4994: PUSH
4995: LD_INT 12
4997: EQUAL
4998: PUSH
4999: LD_EXP 31
5003: PUSH
5004: LD_INT 0
5006: GREATER
5007: AND
5008: IFFALSE 5019
// prepare_mastodonts ( mastodont ) ;
5010: LD_EXP 31
5014: PPUSH
5015: CALL 3721 0 1
// end ;
5019: GO 4966
5021: POP
5022: POP
// end ;
5023: LD_VAR 0 1
5027: RET
// function CountClassMembers ; var Mode ; begin
5028: LD_INT 0
5030: PPUSH
5031: PPUSH
// if No_Mechs then
5032: LD_EXP 58
5036: IFFALSE 5048
// Mode := 2 else
5038: LD_ADDR_VAR 0 2
5042: PUSH
5043: LD_INT 2
5045: ST_TO_ADDR
5046: GO 5056
// Mode := 1 ;
5048: LD_ADDR_VAR 0 2
5052: PUSH
5053: LD_INT 1
5055: ST_TO_ADDR
// neng := number_of_people ;
5056: LD_ADDR_LOC 5
5060: PUSH
5061: LD_EXP 5
5065: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
5066: LD_ADDR_LOC 8
5070: PUSH
5071: LD_LOC 5
5075: PUSH
5076: LD_INT 4
5078: PUSH
5079: LD_INT 3
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: PUSH
5086: LD_VAR 0 2
5090: ARRAY
5091: DIV
5092: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
5093: LD_LOC 8
5097: PUSH
5098: LD_EXP 4
5102: LESS
5103: IFFALSE 5115
// nsol := number_of_breastworks ;
5105: LD_ADDR_LOC 8
5109: PUSH
5110: LD_EXP 4
5114: ST_TO_ADDR
// neng := neng - nsol ;
5115: LD_ADDR_LOC 5
5119: PUSH
5120: LD_LOC 5
5124: PUSH
5125: LD_LOC 8
5129: MINUS
5130: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
5131: LD_ADDR_LOC 6
5135: PUSH
5136: LD_LOC 5
5140: PUSH
5141: LD_INT 3
5143: PUSH
5144: LD_INT 2
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: PUSH
5151: LD_VAR 0 2
5155: ARRAY
5156: DIV
5157: ST_TO_ADDR
// if ( nsci < 1 ) then
5158: LD_LOC 6
5162: PUSH
5163: LD_INT 1
5165: LESS
5166: IFFALSE 5176
// nsci := 1 ;
5168: LD_ADDR_LOC 6
5172: PUSH
5173: LD_INT 1
5175: ST_TO_ADDR
// neng := neng - nsci ;
5176: LD_ADDR_LOC 5
5180: PUSH
5181: LD_LOC 5
5185: PUSH
5186: LD_LOC 6
5190: MINUS
5191: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5192: LD_ADDR_LOC 7
5196: PUSH
5197: LD_LOC 5
5201: PUSH
5202: LD_INT 2
5204: DIV
5205: PUSH
5206: LD_INT 0
5208: PUSH
5209: EMPTY
5210: LIST
5211: LIST
5212: PUSH
5213: LD_VAR 0 2
5217: ARRAY
5218: ST_TO_ADDR
// neng := neng - nmech ;
5219: LD_ADDR_LOC 5
5223: PUSH
5224: LD_LOC 5
5228: PUSH
5229: LD_LOC 7
5233: MINUS
5234: ST_TO_ADDR
// if ( neng < 1 ) then
5235: LD_LOC 5
5239: PUSH
5240: LD_INT 1
5242: LESS
5243: IFFALSE 5253
// neng := 1 ;
5245: LD_ADDR_LOC 5
5249: PUSH
5250: LD_INT 1
5252: ST_TO_ADDR
// end ;
5253: LD_VAR 0 1
5257: RET
// function Init_Win_Condition ; begin
5258: LD_INT 0
5260: PPUSH
// if Team_Game then
5261: LD_EXP 20
5265: IFFALSE 5272
// enable ( 98 ) else
5267: LD_INT 98
5269: ENABLE_MARKED
5270: GO 5275
// enable ( 99 ) ;
5272: LD_INT 99
5274: ENABLE_MARKED
// case Game_Type of 3 :
5275: LD_EXP 40
5279: PUSH
5280: LD_INT 3
5282: DOUBLE
5283: EQUAL
5284: IFTRUE 5288
5286: GO 5294
5288: POP
// enable ( 100 ) ; end ;
5289: LD_INT 100
5291: ENABLE_MARKED
5292: GO 5295
5294: POP
// end ;
5295: LD_VAR 0 1
5299: RET
// starting begin disable ( 98 ) ;
5300: LD_INT 98
5302: DISABLE_MARKED
// disable ( 99 ) ;
5303: LD_INT 99
5305: DISABLE_MARKED
// disable ( 100 ) ;
5306: LD_INT 100
5308: DISABLE_MARKED
// disable ( 200 ) ;
5309: LD_INT 200
5311: DISABLE_MARKED
// disable ( 400 ) ;
5312: LD_INT 400
5314: DISABLE_MARKED
// disable ( 401 ) ;
5315: LD_INT 401
5317: DISABLE_MARKED
// disable ( 600 ) ;
5318: LD_INT 600
5320: DISABLE_MARKED
// mp_selectmsg := true ;
5321: LD_ADDR_OWVAR 13
5325: PUSH
5326: LD_INT 1
5328: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5329: CALL 0 0 0
// init_map ;
5333: CALL 1699 0 0
// init_respawning ;
5337: CALL 6988 0 0
// set_shared_visions_and_alliances ;
5341: CALL 2864 0 0
// prepare_sides ;
5345: CALL 4930 0 0
// InitLimits ;
5349: CALL 13274 0 0
// ShowTimer ;
5353: CALL 14211 0 0
// if ( Game_Type = 4 ) then
5357: LD_EXP 40
5361: PUSH
5362: LD_INT 4
5364: EQUAL
5365: IFFALSE 5371
// InitBloodGods ;
5367: CALL 10816 0 0
// music_nat := Side_Nations [ your_side ] ;
5371: LD_ADDR_OWVAR 71
5375: PUSH
5376: LD_EXP 19
5380: PUSH
5381: LD_OWVAR 2
5385: ARRAY
5386: ST_TO_ADDR
// if IAmSpec then
5387: CALL_OW 531
5391: IFFALSE 5427
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
5393: LD_INT 0
5395: PPUSH
5396: LD_INT 0
5398: PPUSH
5399: LD_OWVAR 2
5403: PPUSH
5404: LD_INT 32767
5406: NEG
5407: PPUSH
5408: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
5412: LD_INT 104
5414: PPUSH
5415: LD_INT 69
5417: PPUSH
5418: CALL_OW 86
// enable ( 400 ) ;
5422: LD_INT 400
5424: ENABLE_MARKED
// end else
5425: GO 5481
// begin ResetFog ;
5427: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5431: LD_EXP 24
5435: PUSH
5436: LD_EXP 18
5440: PUSH
5441: LD_OWVAR 2
5445: ARRAY
5446: ARRAY
5447: PUSH
5448: LD_INT 1
5450: ARRAY
5451: PPUSH
5452: LD_EXP 24
5456: PUSH
5457: LD_EXP 18
5461: PUSH
5462: LD_OWVAR 2
5466: ARRAY
5467: ARRAY
5468: PUSH
5469: LD_INT 2
5471: ARRAY
5472: PPUSH
5473: CALL_OW 86
// Init_Win_Condition ;
5477: CALL 5258 0 0
// end ; InitApeman ;
5481: CALL 6155 0 0
// if def_builduptime then
5485: LD_EXP 55
5489: IFFALSE 5495
// BeginBuildUp ;
5491: CALL 9420 0 0
// end ; end_of_file
5495: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5496: GO 5498
5498: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5499: LD_INT 4
5501: PPUSH
5502: LD_INT 5
5504: PPUSH
5505: CALL_OW 12
5509: PPUSH
5510: LD_INT 1
5512: PPUSH
5513: CALL_OW 57
// enable ;
5517: ENABLE
// end ;
5518: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5519: GO 5521
5521: DISABLE
5522: LD_INT 0
5524: PPUSH
5525: PPUSH
// begin case tick of 1 .. 1 1$0 :
5526: LD_OWVAR 1
5530: PUSH
5531: LD_INT 1
5533: DOUBLE
5534: GREATEREQUAL
5535: IFFALSE 5543
5537: LD_INT 2100
5539: DOUBLE
5540: LESSEQUAL
5541: IFTRUE 5545
5543: GO 5573
5545: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5546: LD_EXP 9
5550: PUSH
5551: LD_INT 100
5553: DIVREAL
5554: PUSH
5555: LD_INT 350
5557: PPUSH
5558: LD_INT 1050
5560: PPUSH
5561: CALL_OW 12
5565: MUL
5566: PPUSH
5567: CALL_OW 67
5571: GO 5875
5573: LD_INT 2100
5575: PUSH
5576: LD_INT 1
5578: PLUS
5579: DOUBLE
5580: GREATEREQUAL
5581: IFFALSE 5589
5583: LD_INT 10500
5585: DOUBLE
5586: LESSEQUAL
5587: IFTRUE 5591
5589: GO 5619
5591: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5592: LD_EXP 9
5596: PUSH
5597: LD_INT 100
5599: DIVREAL
5600: PUSH
5601: LD_INT 1050
5603: PPUSH
5604: LD_INT 1575
5606: PPUSH
5607: CALL_OW 12
5611: MUL
5612: PPUSH
5613: CALL_OW 67
5617: GO 5875
5619: LD_INT 10500
5621: PUSH
5622: LD_INT 1
5624: PLUS
5625: DOUBLE
5626: GREATEREQUAL
5627: IFFALSE 5635
5629: LD_INT 21000
5631: DOUBLE
5632: LESSEQUAL
5633: IFTRUE 5637
5635: GO 5665
5637: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5638: LD_EXP 9
5642: PUSH
5643: LD_INT 100
5645: DIVREAL
5646: PUSH
5647: LD_INT 1575
5649: PPUSH
5650: LD_INT 2100
5652: PPUSH
5653: CALL_OW 12
5657: MUL
5658: PPUSH
5659: CALL_OW 67
5663: GO 5875
5665: LD_INT 21000
5667: PUSH
5668: LD_INT 1
5670: PLUS
5671: DOUBLE
5672: GREATEREQUAL
5673: IFFALSE 5681
5675: LD_INT 42000
5677: DOUBLE
5678: LESSEQUAL
5679: IFTRUE 5683
5681: GO 5711
5683: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5684: LD_EXP 9
5688: PUSH
5689: LD_INT 100
5691: DIVREAL
5692: PUSH
5693: LD_INT 2100
5695: PPUSH
5696: LD_INT 2625
5698: PPUSH
5699: CALL_OW 12
5703: MUL
5704: PPUSH
5705: CALL_OW 67
5709: GO 5875
5711: LD_INT 42000
5713: PUSH
5714: LD_INT 1
5716: PLUS
5717: DOUBLE
5718: GREATEREQUAL
5719: IFFALSE 5727
5721: LD_INT 63000
5723: DOUBLE
5724: LESSEQUAL
5725: IFTRUE 5729
5727: GO 5757
5729: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5730: LD_EXP 9
5734: PUSH
5735: LD_INT 100
5737: DIVREAL
5738: PUSH
5739: LD_INT 2625
5741: PPUSH
5742: LD_INT 3150
5744: PPUSH
5745: CALL_OW 12
5749: MUL
5750: PPUSH
5751: CALL_OW 67
5755: GO 5875
5757: LD_INT 63000
5759: PUSH
5760: LD_INT 1
5762: PLUS
5763: DOUBLE
5764: GREATEREQUAL
5765: IFFALSE 5773
5767: LD_INT 105000
5769: DOUBLE
5770: LESSEQUAL
5771: IFTRUE 5775
5773: GO 5803
5775: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5776: LD_EXP 9
5780: PUSH
5781: LD_INT 100
5783: DIVREAL
5784: PUSH
5785: LD_INT 3150
5787: PPUSH
5788: LD_INT 3675
5790: PPUSH
5791: CALL_OW 12
5795: MUL
5796: PPUSH
5797: CALL_OW 67
5801: GO 5875
5803: LD_INT 105000
5805: PUSH
5806: LD_INT 1
5808: PLUS
5809: DOUBLE
5810: GREATEREQUAL
5811: IFFALSE 5819
5813: LD_INT 630000
5815: DOUBLE
5816: LESSEQUAL
5817: IFTRUE 5821
5819: GO 5849
5821: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
5822: LD_EXP 9
5826: PUSH
5827: LD_INT 100
5829: DIVREAL
5830: PUSH
5831: LD_INT 3675
5833: PPUSH
5834: LD_INT 4200
5836: PPUSH
5837: CALL_OW 12
5841: MUL
5842: PPUSH
5843: CALL_OW 67
5847: GO 5875
5849: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5850: LD_EXP 9
5854: PUSH
5855: LD_INT 100
5857: DIVREAL
5858: PUSH
5859: LD_INT 4200
5861: PPUSH
5862: LD_INT 5250
5864: PPUSH
5865: CALL_OW 12
5869: MUL
5870: PPUSH
5871: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5875: LD_ADDR_VAR 0 2
5879: PUSH
5880: LD_INT 3
5882: PPUSH
5883: LD_INT 5
5885: PPUSH
5886: CALL_OW 12
5890: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5891: LD_ADDR_VAR 0 1
5895: PUSH
5896: LD_EXP 18
5900: PUSH
5901: LD_INT 0
5903: PUSH
5904: EMPTY
5905: LIST
5906: DIFF
5907: PUSH
5908: FOR_IN
5909: IFFALSE 5958
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5911: LD_VAR 0 2
5915: PPUSH
5916: LD_EXP 24
5920: PUSH
5921: LD_VAR 0 1
5925: ARRAY
5926: PUSH
5927: LD_INT 1
5929: ARRAY
5930: PPUSH
5931: LD_EXP 24
5935: PUSH
5936: LD_VAR 0 1
5940: ARRAY
5941: PUSH
5942: LD_INT 2
5944: ARRAY
5945: PPUSH
5946: LD_INT 20
5948: PPUSH
5949: LD_INT 1
5951: PPUSH
5952: CALL_OW 56
5956: GO 5908
5958: POP
5959: POP
// enable ;
5960: ENABLE
// end ; end_of_file
5961: PPOPN 2
5963: END
// every 20 20$00 trigger apemanNumber do
5964: LD_EXP 32
5968: IFFALSE 6001
5970: GO 5972
5972: DISABLE
// begin enable ;
5973: ENABLE
// if apeLevel >= 8 then
5974: LD_EXP 37
5978: PUSH
5979: LD_INT 8
5981: GREATEREQUAL
5982: IFFALSE 5987
// disable else
5984: DISABLE
5985: GO 6001
// apeLevel := apeLevel + 1 ;
5987: LD_ADDR_EXP 37
5991: PUSH
5992: LD_EXP 37
5996: PUSH
5997: LD_INT 1
5999: PLUS
6000: ST_TO_ADDR
// end ;
6001: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
6002: LD_EXP 32
6006: PUSH
6007: LD_EXP 33
6011: LESS
6012: IFFALSE 6152
6014: GO 6016
6016: DISABLE
6017: LD_INT 0
6019: PPUSH
6020: PPUSH
6021: PPUSH
6022: PPUSH
// begin enable ;
6023: ENABLE
// for i := 1 to apemanPos do
6024: LD_ADDR_VAR 0 1
6028: PUSH
6029: DOUBLE
6030: LD_INT 1
6032: DEC
6033: ST_TO_ADDR
6034: LD_EXP 35
6038: PUSH
6039: FOR_TO
6040: IFFALSE 6150
// begin if apemanPlayerCount [ i ] then
6042: LD_EXP 36
6046: PUSH
6047: LD_VAR 0 1
6051: ARRAY
6052: IFFALSE 6148
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
6054: LD_EXP 36
6058: PUSH
6059: LD_VAR 0 1
6063: ARRAY
6064: PUSH
6065: LD_EXP 35
6069: PUSH
6070: LD_VAR 0 1
6074: ARRAY
6075: GREATER
6076: IFFALSE 6148
// begin ape := PrepareApeman ;
6078: LD_ADDR_VAR 0 2
6082: PUSH
6083: CALL 6663 0 0
6087: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6088: LD_VAR 0 2
6092: PPUSH
6093: LD_EXP 38
6097: PUSH
6098: LD_VAR 0 1
6102: ARRAY
6103: PPUSH
6104: LD_INT 0
6106: PPUSH
6107: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6111: LD_ADDR_EXP 35
6115: PUSH
6116: LD_EXP 35
6120: PPUSH
6121: LD_VAR 0 1
6125: PPUSH
6126: LD_EXP 35
6130: PUSH
6131: LD_VAR 0 1
6135: ARRAY
6136: PUSH
6137: LD_VAR 0 2
6141: UNION
6142: PPUSH
6143: CALL_OW 1
6147: ST_TO_ADDR
// end ; end ; end ;
6148: GO 6039
6150: POP
6151: POP
// end ;
6152: PPOPN 4
6154: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6155: LD_INT 0
6157: PPUSH
6158: PPUSH
6159: PPUSH
6160: PPUSH
6161: PPUSH
6162: PPUSH
6163: PPUSH
// playersAmount := 0 ;
6164: LD_ADDR_VAR 0 3
6168: PUSH
6169: LD_INT 0
6171: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
6172: LD_ADDR_VAR 0 7
6176: PUSH
6177: LD_INT 1
6179: PUSH
6180: LD_INT 2
6182: PUSH
6183: LD_INT 3
6185: PUSH
6186: LD_INT 4
6188: PUSH
6189: LD_INT 5
6191: PUSH
6192: LD_INT 6
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6203: LD_ADDR_EXP 38
6207: PUSH
6208: LD_INT 0
6210: PUSH
6211: LD_INT 0
6213: PUSH
6214: LD_INT 0
6216: PUSH
6217: LD_INT 0
6219: PUSH
6220: LD_INT 0
6222: PUSH
6223: LD_INT 0
6225: PUSH
6226: LD_INT 0
6228: PUSH
6229: LD_INT 0
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: ST_TO_ADDR
// for j = 1 to Side_Positions do
6242: LD_ADDR_VAR 0 4
6246: PUSH
6247: DOUBLE
6248: LD_INT 1
6250: DEC
6251: ST_TO_ADDR
6252: LD_EXP 18
6256: PUSH
6257: FOR_TO
6258: IFFALSE 6325
// if Side_Positions [ j ] then
6260: LD_EXP 18
6264: PUSH
6265: LD_VAR 0 4
6269: ARRAY
6270: IFFALSE 6323
// begin playersAmount := playersAmount + 1 ;
6272: LD_ADDR_VAR 0 3
6276: PUSH
6277: LD_VAR 0 3
6281: PUSH
6282: LD_INT 1
6284: PLUS
6285: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6286: LD_ADDR_EXP 38
6290: PUSH
6291: LD_EXP 38
6295: PPUSH
6296: LD_VAR 0 4
6300: PPUSH
6301: LD_VAR 0 7
6305: PUSH
6306: LD_EXP 18
6310: PUSH
6311: LD_VAR 0 4
6315: ARRAY
6316: ARRAY
6317: PPUSH
6318: CALL_OW 1
6322: ST_TO_ADDR
// end ;
6323: GO 6257
6325: POP
6326: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6327: LD_ADDR_EXP 34
6331: PUSH
6332: LD_INT 3
6334: PUSH
6335: LD_EXP 11
6339: MUL
6340: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6341: LD_ADDR_EXP 32
6345: PUSH
6346: LD_VAR 0 3
6350: PUSH
6351: LD_EXP 34
6355: MUL
6356: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6357: LD_ADDR_EXP 33
6361: PUSH
6362: LD_EXP 32
6366: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6367: LD_ADDR_EXP 35
6371: PUSH
6372: LD_INT 0
6374: PUSH
6375: LD_INT 0
6377: PUSH
6378: LD_INT 0
6380: PUSH
6381: LD_INT 0
6383: PUSH
6384: LD_INT 0
6386: PUSH
6387: LD_INT 0
6389: PUSH
6390: LD_INT 0
6392: PUSH
6393: LD_INT 0
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6406: LD_ADDR_EXP 36
6410: PUSH
6411: LD_INT 0
6413: PUSH
6414: LD_INT 0
6416: PUSH
6417: LD_INT 0
6419: PUSH
6420: LD_INT 0
6422: PUSH
6423: LD_INT 0
6425: PUSH
6426: LD_INT 0
6428: PUSH
6429: LD_INT 0
6431: PUSH
6432: LD_INT 0
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: LIST
6443: LIST
6444: ST_TO_ADDR
// apeLevel := 1 ;
6445: LD_ADDR_EXP 37
6449: PUSH
6450: LD_INT 1
6452: ST_TO_ADDR
// if not apemanNumber then
6453: LD_EXP 32
6457: NOT
6458: IFFALSE 6462
// exit ;
6460: GO 6658
// for i := 1 to apemanPerPlayer do
6462: LD_ADDR_VAR 0 2
6466: PUSH
6467: DOUBLE
6468: LD_INT 1
6470: DEC
6471: ST_TO_ADDR
6472: LD_EXP 34
6476: PUSH
6477: FOR_TO
6478: IFFALSE 6656
// begin for j := 1 to Side_Positions do
6480: LD_ADDR_VAR 0 4
6484: PUSH
6485: DOUBLE
6486: LD_INT 1
6488: DEC
6489: ST_TO_ADDR
6490: LD_EXP 18
6494: PUSH
6495: FOR_TO
6496: IFFALSE 6652
// if Side_Positions [ j ] then
6498: LD_EXP 18
6502: PUSH
6503: LD_VAR 0 4
6507: ARRAY
6508: IFFALSE 6650
// begin pos := Side_Positions [ j ] ;
6510: LD_ADDR_VAR 0 6
6514: PUSH
6515: LD_EXP 18
6519: PUSH
6520: LD_VAR 0 4
6524: ARRAY
6525: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6526: LD_ADDR_EXP 36
6530: PUSH
6531: LD_EXP 36
6535: PPUSH
6536: LD_VAR 0 4
6540: PPUSH
6541: LD_EXP 36
6545: PUSH
6546: LD_VAR 0 4
6550: ARRAY
6551: PUSH
6552: LD_INT 1
6554: PLUS
6555: PPUSH
6556: CALL_OW 1
6560: ST_TO_ADDR
// ape := PrepareApeman ;
6561: LD_ADDR_VAR 0 5
6565: PUSH
6566: CALL 6663 0 0
6570: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6571: LD_ADDR_EXP 35
6575: PUSH
6576: LD_EXP 35
6580: PPUSH
6581: LD_VAR 0 4
6585: PPUSH
6586: LD_EXP 35
6590: PUSH
6591: LD_VAR 0 4
6595: ARRAY
6596: PPUSH
6597: LD_EXP 35
6601: PUSH
6602: LD_VAR 0 4
6606: ARRAY
6607: PUSH
6608: LD_INT 1
6610: PLUS
6611: PPUSH
6612: LD_VAR 0 5
6616: PPUSH
6617: CALL_OW 1
6621: PPUSH
6622: CALL_OW 1
6626: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6627: LD_VAR 0 5
6631: PPUSH
6632: LD_EXP 38
6636: PUSH
6637: LD_VAR 0 4
6641: ARRAY
6642: PPUSH
6643: LD_INT 0
6645: PPUSH
6646: CALL_OW 49
// end ;
6650: GO 6495
6652: POP
6653: POP
// end ;
6654: GO 6477
6656: POP
6657: POP
// end ;
6658: LD_VAR 0 1
6662: RET
// export function PrepareApeman ; var bonus ; begin
6663: LD_INT 0
6665: PPUSH
6666: PPUSH
// uc_side := 0 ;
6667: LD_ADDR_OWVAR 20
6671: PUSH
6672: LD_INT 0
6674: ST_TO_ADDR
// uc_nation := 0 ;
6675: LD_ADDR_OWVAR 21
6679: PUSH
6680: LD_INT 0
6682: ST_TO_ADDR
// InitHc ;
6683: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6687: LD_ADDR_VAR 0 2
6691: PUSH
6692: LD_INT 1
6694: NEG
6695: PUSH
6696: LD_INT 0
6698: PUSH
6699: LD_INT 1
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: LIST
6706: PUSH
6707: LD_OWVAR 1
6711: PUSH
6712: LD_INT 3
6714: MOD
6715: PUSH
6716: LD_INT 1
6718: PLUS
6719: ARRAY
6720: ST_TO_ADDR
// hc_class := class_apeman ;
6721: LD_ADDR_OWVAR 28
6725: PUSH
6726: LD_INT 12
6728: ST_TO_ADDR
// hc_gallery :=  ;
6729: LD_ADDR_OWVAR 33
6733: PUSH
6734: LD_STRING 
6736: ST_TO_ADDR
// hc_name :=  ;
6737: LD_ADDR_OWVAR 26
6741: PUSH
6742: LD_STRING 
6744: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6745: LD_ADDR_OWVAR 31
6749: PUSH
6750: LD_EXP 37
6754: PUSH
6755: LD_VAR 0 2
6759: PLUS
6760: PUSH
6761: LD_EXP 37
6765: PUSH
6766: LD_VAR 0 2
6770: PLUS
6771: PUSH
6772: LD_EXP 37
6776: PUSH
6777: LD_VAR 0 2
6781: PLUS
6782: PUSH
6783: LD_EXP 37
6787: PUSH
6788: LD_VAR 0 2
6792: PLUS
6793: PUSH
6794: EMPTY
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6800: LD_ADDR_OWVAR 35
6804: PUSH
6805: LD_INT 10
6807: PUSH
6808: LD_VAR 0 2
6812: MUL
6813: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6814: LD_ADDR_OWVAR 29
6818: PUSH
6819: LD_INT 12
6821: PUSH
6822: LD_INT 10
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: ST_TO_ADDR
// result := CreateHuman ;
6829: LD_ADDR_VAR 0 1
6833: PUSH
6834: CALL_OW 44
6838: ST_TO_ADDR
// end ;
6839: LD_VAR 0 1
6843: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6844: LD_INT 0
6846: PPUSH
6847: PPUSH
6848: PPUSH
// if not ape then
6849: LD_VAR 0 1
6853: NOT
6854: IFFALSE 6858
// exit ;
6856: GO 6983
// side := GetSide ( ape ) ;
6858: LD_ADDR_VAR 0 3
6862: PUSH
6863: LD_VAR 0 1
6867: PPUSH
6868: CALL_OW 255
6872: ST_TO_ADDR
// if not side then
6873: LD_VAR 0 3
6877: NOT
6878: IFFALSE 6932
// begin for i = 1 to apemanPos do
6880: LD_ADDR_VAR 0 4
6884: PUSH
6885: DOUBLE
6886: LD_INT 1
6888: DEC
6889: ST_TO_ADDR
6890: LD_EXP 35
6894: PUSH
6895: FOR_TO
6896: IFFALSE 6930
// if ape in apemanPos [ i ] then
6898: LD_VAR 0 1
6902: PUSH
6903: LD_EXP 35
6907: PUSH
6908: LD_VAR 0 4
6912: ARRAY
6913: IN
6914: IFFALSE 6928
// begin side := i ;
6916: LD_ADDR_VAR 0 3
6920: PUSH
6921: LD_VAR 0 4
6925: ST_TO_ADDR
// break ;
6926: GO 6930
// end ;
6928: GO 6895
6930: POP
6931: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6932: LD_ADDR_EXP 35
6936: PUSH
6937: LD_EXP 35
6941: PPUSH
6942: LD_VAR 0 3
6946: PPUSH
6947: LD_EXP 35
6951: PUSH
6952: LD_VAR 0 3
6956: ARRAY
6957: PUSH
6958: LD_VAR 0 1
6962: DIFF
6963: PPUSH
6964: CALL_OW 1
6968: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6969: LD_ADDR_EXP 32
6973: PUSH
6974: LD_EXP 32
6978: PUSH
6979: LD_INT 1
6981: MINUS
6982: ST_TO_ADDR
// end ; end_of_file
6983: LD_VAR 0 2
6987: RET
// var respawn , inqueue ; export function init_respawning ; begin
6988: LD_INT 0
6990: PPUSH
// respawn := Rand ( 1 , 8 ) ;
6991: LD_ADDR_LOC 9
6995: PUSH
6996: LD_INT 1
6998: PPUSH
6999: LD_INT 8
7001: PPUSH
7002: CALL_OW 12
7006: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7007: LD_ADDR_LOC 10
7011: PUSH
7012: LD_INT 0
7014: PUSH
7015: LD_INT 0
7017: PUSH
7018: LD_INT 0
7020: PUSH
7021: LD_INT 0
7023: PUSH
7024: LD_INT 0
7026: PUSH
7027: LD_INT 0
7029: PUSH
7030: LD_INT 0
7032: PUSH
7033: LD_INT 0
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: LIST
7043: LIST
7044: LIST
7045: ST_TO_ADDR
// end ;
7046: LD_VAR 0 1
7050: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
7051: GO 7053
7053: DISABLE
7054: LD_INT 0
7056: PPUSH
7057: PPUSH
7058: PPUSH
// begin if respawning_time_max = 0 then
7059: LD_EXP 14
7063: PUSH
7064: LD_INT 0
7066: EQUAL
7067: IFFALSE 7071
// exit ;
7069: GO 7476
// if respawn = 8 then
7071: LD_LOC 9
7075: PUSH
7076: LD_INT 8
7078: EQUAL
7079: IFFALSE 7091
// respawn := 1 else
7081: LD_ADDR_LOC 9
7085: PUSH
7086: LD_INT 1
7088: ST_TO_ADDR
7089: GO 7105
// respawn := respawn + 1 ;
7091: LD_ADDR_LOC 9
7095: PUSH
7096: LD_LOC 9
7100: PUSH
7101: LD_INT 1
7103: PLUS
7104: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
7105: LD_EXP 18
7109: PUSH
7110: LD_LOC 9
7114: ARRAY
7115: PUSH
7116: LD_LOC 10
7120: PUSH
7121: LD_LOC 9
7125: ARRAY
7126: NOT
7127: AND
7128: IFFALSE 7475
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
7130: LD_ADDR_VAR 0 1
7134: PUSH
7135: LD_INT 21
7137: PUSH
7138: LD_INT 1
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: PUSH
7145: LD_INT 22
7147: PUSH
7148: LD_LOC 9
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: PUSH
7157: LD_INT 3
7159: PUSH
7160: LD_INT 23
7162: PUSH
7163: LD_INT 0
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: PPUSH
7176: CALL_OW 69
7180: ST_TO_ADDR
// if n < number_of_people then
7181: LD_VAR 0 1
7185: PUSH
7186: LD_EXP 5
7190: LESS
7191: IFFALSE 7472
// begin dep := FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , respawn ] ] ) ;
7193: LD_ADDR_VAR 0 2
7197: PUSH
7198: LD_INT 21
7200: PUSH
7201: LD_INT 3
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PUSH
7208: LD_INT 2
7210: PUSH
7211: LD_INT 30
7213: PUSH
7214: LD_INT 0
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: PUSH
7221: LD_INT 30
7223: PUSH
7224: LD_INT 1
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: LIST
7235: PUSH
7236: LD_INT 50
7238: PUSH
7239: EMPTY
7240: LIST
7241: PUSH
7242: LD_INT 22
7244: PUSH
7245: LD_LOC 9
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: PPUSH
7260: CALL_OW 69
7264: ST_TO_ADDR
// if dep then
7265: LD_VAR 0 2
7269: IFFALSE 7469
// begin aktresp := respawn ;
7271: LD_ADDR_VAR 0 3
7275: PUSH
7276: LD_LOC 9
7280: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
7281: LD_ADDR_LOC 10
7285: PUSH
7286: LD_LOC 10
7290: PPUSH
7291: LD_VAR 0 3
7295: PPUSH
7296: LD_INT 1
7298: PPUSH
7299: CALL_OW 1
7303: ST_TO_ADDR
// enable ;
7304: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
7305: LD_EXP 13
7309: PPUSH
7310: LD_EXP 14
7314: PPUSH
7315: CALL_OW 12
7319: PPUSH
7320: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
7324: LD_ADDR_LOC 10
7328: PUSH
7329: LD_LOC 10
7333: PPUSH
7334: LD_VAR 0 3
7338: PPUSH
7339: LD_INT 0
7341: PPUSH
7342: CALL_OW 1
7346: ST_TO_ADDR
// hc_name :=  ;
7347: LD_ADDR_OWVAR 26
7351: PUSH
7352: LD_STRING 
7354: ST_TO_ADDR
// hc_importance := 0 ;
7355: LD_ADDR_OWVAR 32
7359: PUSH
7360: LD_INT 0
7362: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
7363: LD_INT 0
7365: PPUSH
7366: LD_INT 0
7368: PPUSH
7369: LD_EXP 6
7373: PUSH
7374: LD_INT 2
7376: DIV
7377: PPUSH
7378: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
7382: LD_ADDR_OWVAR 21
7386: PUSH
7387: LD_EXP 19
7391: PUSH
7392: LD_VAR 0 3
7396: ARRAY
7397: ST_TO_ADDR
// uc_side := aktresp ;
7398: LD_ADDR_OWVAR 20
7402: PUSH
7403: LD_VAR 0 3
7407: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
7408: LD_ADDR_VAR 0 2
7412: PUSH
7413: LD_VAR 0 2
7417: PUSH
7418: LD_INT 1
7420: PPUSH
7421: LD_VAR 0 2
7425: PPUSH
7426: CALL_OW 12
7430: ARRAY
7431: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
7432: CALL_OW 44
7436: PPUSH
7437: LD_VAR 0 2
7441: PPUSH
7442: CALL_OW 250
7446: PPUSH
7447: LD_VAR 0 2
7451: PPUSH
7452: CALL_OW 251
7456: PPUSH
7457: LD_INT 7
7459: PPUSH
7460: LD_INT 1
7462: PPUSH
7463: CALL_OW 50
// end else
7467: GO 7470
// enable ;
7469: ENABLE
// end else
7470: GO 7473
// enable ;
7472: ENABLE
// end else
7473: GO 7476
// enable ;
7475: ENABLE
// end ; end_of_file
7476: PPOPN 3
7478: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7479: LD_VAR 0 1
7483: PPUSH
7484: CALL_OW 266
7488: PUSH
7489: LD_INT 0
7491: PUSH
7492: LD_INT 1
7494: PUSH
7495: EMPTY
7496: LIST
7497: LIST
7498: IN
7499: IFFALSE 7524
// SetBName ( b , @ & GetSide ( b ) ) ;
7501: LD_VAR 0 1
7505: PPUSH
7506: LD_STRING @
7508: PUSH
7509: LD_VAR 0 1
7513: PPUSH
7514: CALL_OW 255
7518: STR
7519: PPUSH
7520: CALL_OW 500
// if def_game_rules then
7524: LD_EXP 41
7528: IFFALSE 7565
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
7530: LD_VAR 0 1
7534: PPUSH
7535: LD_VAR 0 1
7539: PPUSH
7540: CALL_OW 266
7544: PPUSH
7545: LD_VAR 0 1
7549: PPUSH
7550: CALL_OW 255
7554: PPUSH
7555: LD_INT 0
7557: PPUSH
7558: LD_INT 1
7560: PPUSH
7561: CALL 13675 0 5
// end ;
7565: PPOPN 2
7567: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7568: LD_VAR 0 1
7572: PPUSH
7573: CALL_OW 266
7577: PUSH
7578: LD_INT 0
7580: PUSH
7581: LD_INT 1
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: IN
7588: IFFALSE 7613
// SetBName ( b , @ & GetSide ( b ) ) ;
7590: LD_VAR 0 1
7594: PPUSH
7595: LD_STRING @
7597: PUSH
7598: LD_VAR 0 1
7602: PPUSH
7603: CALL_OW 255
7607: STR
7608: PPUSH
7609: CALL_OW 500
// if def_game_rules then
7613: LD_EXP 41
7617: IFFALSE 7656
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7619: LD_VAR 0 1
7623: PPUSH
7624: LD_VAR 0 1
7628: PPUSH
7629: CALL_OW 266
7633: PPUSH
7634: LD_VAR 0 1
7638: PPUSH
7639: CALL_OW 255
7643: PPUSH
7644: LD_VAR 0 2
7648: PPUSH
7649: LD_INT 1
7651: PPUSH
7652: CALL 13675 0 5
// end ;
7656: PPOPN 3
7658: END
// on VehicleConstructed ( veh , fac ) do var side ;
7659: LD_INT 0
7661: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7662: LD_VAR 0 1
7666: PPUSH
7667: CALL_OW 263
7671: PUSH
7672: LD_INT 5
7674: EQUAL
7675: IFFALSE 7817
// begin side := GetSide ( veh ) ;
7677: LD_ADDR_VAR 0 3
7681: PUSH
7682: LD_VAR 0 1
7686: PPUSH
7687: CALL_OW 255
7691: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7692: LD_ADDR_EXP 35
7696: PUSH
7697: LD_EXP 35
7701: PPUSH
7702: LD_VAR 0 3
7706: PPUSH
7707: LD_EXP 35
7711: PUSH
7712: LD_VAR 0 3
7716: ARRAY
7717: PPUSH
7718: LD_INT 52
7720: PUSH
7721: EMPTY
7722: LIST
7723: PPUSH
7724: CALL_OW 72
7728: PUSH
7729: LD_INT 22
7731: PUSH
7732: LD_VAR 0 3
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: PUSH
7741: LD_INT 2
7743: PUSH
7744: LD_INT 33
7746: PUSH
7747: LD_INT 5
7749: PUSH
7750: EMPTY
7751: LIST
7752: LIST
7753: PUSH
7754: LD_INT 25
7756: PUSH
7757: LD_INT 12
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: PUSH
7764: LD_INT 25
7766: PUSH
7767: LD_INT 15
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: PUSH
7774: LD_INT 25
7776: PUSH
7777: LD_INT 16
7779: PUSH
7780: EMPTY
7781: LIST
7782: LIST
7783: PUSH
7784: LD_INT 25
7786: PUSH
7787: LD_INT 17
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: PPUSH
7806: CALL_OW 69
7810: UNION
7811: PPUSH
7812: CALL_OW 1
7816: ST_TO_ADDR
// end ; end ;
7817: PPOPN 3
7819: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7820: LD_INT 0
7822: PPUSH
7823: PPUSH
7824: PPUSH
7825: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7826: LD_VAR 0 1
7830: PPUSH
7831: CALL_OW 257
7835: PUSH
7836: LD_INT 12
7838: PUSH
7839: LD_INT 15
7841: PUSH
7842: LD_INT 17
7844: PUSH
7845: LD_INT 16
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: IN
7854: PUSH
7855: LD_VAR 0 1
7859: PPUSH
7860: CALL_OW 263
7864: PUSH
7865: LD_INT 5
7867: EQUAL
7868: OR
7869: IFFALSE 7880
// ApeKilled ( j ) ;
7871: LD_VAR 0 1
7875: PPUSH
7876: CALL 6844 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7880: LD_VAR 0 1
7884: PPUSH
7885: CALL_OW 266
7889: PUSH
7890: LD_INT 0
7892: PUSH
7893: LD_INT 1
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: IN
7900: IFFALSE 7982
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7902: LD_ADDR_VAR 0 4
7906: PUSH
7907: LD_EXP 18
7911: PUSH
7912: LD_VAR 0 1
7916: PPUSH
7917: CALL_OW 255
7921: ARRAY
7922: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7923: LD_ADDR_VAR 0 2
7927: PUSH
7928: LD_EXP 24
7932: PUSH
7933: LD_VAR 0 4
7937: ARRAY
7938: PUSH
7939: LD_INT 1
7941: ARRAY
7942: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7943: LD_ADDR_VAR 0 3
7947: PUSH
7948: LD_EXP 24
7952: PUSH
7953: LD_VAR 0 4
7957: ARRAY
7958: PUSH
7959: LD_INT 2
7961: ARRAY
7962: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7963: LD_VAR 0 2
7967: PPUSH
7968: LD_VAR 0 3
7972: PPUSH
7973: CALL_OW 420
7977: PPUSH
7978: CALL_OW 419
// end ; if def_game_rules then
7982: LD_EXP 41
7986: IFFALSE 8085
// if ( GetType ( j ) = 3 ) then
7988: LD_VAR 0 1
7992: PPUSH
7993: CALL_OW 247
7997: PUSH
7998: LD_INT 3
8000: EQUAL
8001: IFFALSE 8041
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
8003: LD_VAR 0 1
8007: PPUSH
8008: LD_VAR 0 1
8012: PPUSH
8013: CALL_OW 266
8017: PPUSH
8018: LD_VAR 0 1
8022: PPUSH
8023: CALL_OW 255
8027: PPUSH
8028: LD_INT 0
8030: PPUSH
8031: LD_INT 1
8033: NEG
8034: PPUSH
8035: CALL 13675 0 5
8039: GO 8085
// if ( GetChassis ( j ) = 25 ) then
8041: LD_VAR 0 1
8045: PPUSH
8046: CALL_OW 265
8050: PUSH
8051: LD_INT 25
8053: EQUAL
8054: IFFALSE 8085
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
8056: LD_VAR 0 1
8060: PPUSH
8061: LD_INT 37
8063: PPUSH
8064: LD_VAR 0 1
8068: PPUSH
8069: CALL_OW 255
8073: PPUSH
8074: LD_INT 0
8076: PPUSH
8077: LD_INT 1
8079: NEG
8080: PPUSH
8081: CALL 13675 0 5
// end ;
8085: PPOPN 5
8087: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
8088: LD_EXP 41
8092: PUSH
8093: LD_VAR 0 1
8097: PPUSH
8098: CALL_OW 265
8102: PUSH
8103: LD_INT 25
8105: EQUAL
8106: AND
8107: IFFALSE 8139
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
8109: LD_VAR 0 1
8113: PPUSH
8114: LD_INT 37
8116: PPUSH
8117: LD_VAR 0 1
8121: PPUSH
8122: CALL_OW 255
8126: PPUSH
8127: LD_VAR 0 3
8131: PPUSH
8132: LD_INT 1
8134: PPUSH
8135: CALL 13675 0 5
// end ;
8139: PPOPN 4
8141: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
8142: LD_VAR 0 1
8146: PPUSH
8147: LD_VAR 0 2
8151: PPUSH
8152: LD_VAR 0 3
8156: PPUSH
8157: LD_OWVAR 2
8161: PPUSH
8162: CALL 14353 0 4
8166: PPOPN 3
8168: END
// function CanWinLoose ; begin
8169: LD_INT 0
8171: PPUSH
// Result := true ;
8172: LD_ADDR_VAR 0 1
8176: PUSH
8177: LD_INT 1
8179: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8180: CALL_OW 518
8184: PUSH
8185: CALL_OW 519
8189: PUSH
8190: LD_INT 0
8192: GREATER
8193: AND
8194: IFFALSE 8204
// Result := false ;
8196: LD_ADDR_VAR 0 1
8200: PUSH
8201: LD_INT 0
8203: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8204: CALL_OW 531
8208: PUSH
8209: CALL_OW 519
8213: PUSH
8214: LD_INT 1
8216: GREATER
8217: AND
8218: IFFALSE 8228
// Result := false ;
8220: LD_ADDR_VAR 0 1
8224: PUSH
8225: LD_INT 0
8227: ST_TO_ADDR
// end ;
8228: LD_VAR 0 1
8232: RET
// function HasPower ( i ) ; begin
8233: LD_INT 0
8235: PPUSH
// if def_people_respawning then
8236: LD_EXP 52
8240: IFFALSE 8331
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8242: LD_ADDR_VAR 0 2
8246: PUSH
8247: LD_INT 22
8249: PUSH
8250: LD_VAR 0 1
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: PUSH
8259: LD_INT 2
8261: PUSH
8262: LD_INT 21
8264: PUSH
8265: LD_INT 1
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: PUSH
8272: LD_INT 33
8274: PUSH
8275: LD_INT 3
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: PUSH
8282: LD_INT 33
8284: PUSH
8285: LD_INT 5
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: PUSH
8292: LD_INT 30
8294: PUSH
8295: LD_INT 0
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: PUSH
8302: LD_INT 30
8304: PUSH
8305: LD_INT 1
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: PPUSH
8324: CALL_OW 69
8328: ST_TO_ADDR
8329: GO 8396
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
8331: LD_ADDR_VAR 0 2
8335: PUSH
8336: LD_INT 22
8338: PUSH
8339: LD_VAR 0 1
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: PUSH
8348: LD_INT 2
8350: PUSH
8351: LD_INT 21
8353: PUSH
8354: LD_INT 1
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: PUSH
8361: LD_INT 33
8363: PUSH
8364: LD_INT 3
8366: PUSH
8367: EMPTY
8368: LIST
8369: LIST
8370: PUSH
8371: LD_INT 33
8373: PUSH
8374: LD_INT 5
8376: PUSH
8377: EMPTY
8378: LIST
8379: LIST
8380: PUSH
8381: EMPTY
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: PUSH
8387: EMPTY
8388: LIST
8389: LIST
8390: PPUSH
8391: CALL_OW 69
8395: ST_TO_ADDR
// end ;
8396: LD_VAR 0 2
8400: RET
// function AlliedSides ( i , j ) ; begin
8401: LD_INT 0
8403: PPUSH
// Result := false ;
8404: LD_ADDR_VAR 0 3
8408: PUSH
8409: LD_INT 0
8411: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8412: LD_VAR 0 1
8416: PPUSH
8417: LD_VAR 0 2
8421: PPUSH
8422: CALL_OW 81
8426: PUSH
8427: LD_INT 1
8429: EQUAL
8430: PUSH
8431: LD_VAR 0 2
8435: PPUSH
8436: LD_VAR 0 1
8440: PPUSH
8441: CALL_OW 81
8445: PUSH
8446: LD_INT 1
8448: EQUAL
8449: AND
8450: PUSH
8451: LD_VAR 0 1
8455: PPUSH
8456: CALL_OW 83
8460: AND
8461: PUSH
8462: LD_VAR 0 2
8466: PPUSH
8467: CALL_OW 83
8471: AND
8472: IFFALSE 8482
// Result := true ;
8474: LD_ADDR_VAR 0 3
8478: PUSH
8479: LD_INT 1
8481: ST_TO_ADDR
// end ;
8482: LD_VAR 0 3
8486: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
8487: CALL 8169 0 0
8491: IFFALSE 8500
8493: GO 8495
8495: DISABLE
// YouLostInMultiplayer ;
8496: CALL_OW 107
8500: END
// every 0 0$3 trigger CanWinLoose marked 401 do
8501: CALL 8169 0 0
8505: IFFALSE 8529
8507: GO 8509
8509: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
8510: LD_EXP 19
8514: PUSH
8515: LD_OWVAR 2
8519: ARRAY
8520: PPUSH
8521: CALL 14395 0 1
// YouWinInMultiplayer ;
8525: CALL_OW 106
// end ;
8529: END
// every 0 0$3 marked 98 do var i , CanWin ;
8530: GO 8532
8532: DISABLE
8533: LD_INT 0
8535: PPUSH
8536: PPUSH
// begin if not HasPower ( your_side ) then
8537: LD_OWVAR 2
8541: PPUSH
8542: CALL 8233 0 1
8546: NOT
8547: IFFALSE 8558
// begin Multiplayer_Loose_Message ;
8549: CALL_OW 521
// enable ( 400 ) ;
8553: LD_INT 400
8555: ENABLE_MARKED
// end else
8556: GO 8691
// begin CanWin := true ;
8558: LD_ADDR_VAR 0 2
8562: PUSH
8563: LD_INT 1
8565: ST_TO_ADDR
// for i := 1 to 8 do
8566: LD_ADDR_VAR 0 1
8570: PUSH
8571: DOUBLE
8572: LD_INT 1
8574: DEC
8575: ST_TO_ADDR
8576: LD_INT 8
8578: PUSH
8579: FOR_TO
8580: IFFALSE 8677
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8582: LD_EXP 18
8586: PUSH
8587: LD_VAR 0 1
8591: ARRAY
8592: PUSH
8593: LD_VAR 0 1
8597: PPUSH
8598: CALL_OW 108
8602: AND
8603: PUSH
8604: LD_VAR 0 1
8608: PUSH
8609: LD_OWVAR 2
8613: NONEQUAL
8614: AND
8615: IFFALSE 8675
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
8617: LD_EXP 16
8621: PUSH
8622: LD_VAR 0 1
8626: ARRAY
8627: NOT
8628: PUSH
8629: LD_EXP 16
8633: PUSH
8634: LD_VAR 0 1
8638: ARRAY
8639: PUSH
8640: LD_EXP 16
8644: PUSH
8645: LD_OWVAR 2
8649: ARRAY
8650: NONEQUAL
8651: OR
8652: IFFALSE 8675
// if HasPower ( i ) then
8654: LD_VAR 0 1
8658: PPUSH
8659: CALL 8233 0 1
8663: IFFALSE 8675
// begin CanWin := false ;
8665: LD_ADDR_VAR 0 2
8669: PUSH
8670: LD_INT 0
8672: ST_TO_ADDR
// break ;
8673: GO 8677
// end ;
8675: GO 8579
8677: POP
8678: POP
// if CanWin then
8679: LD_VAR 0 2
8683: IFFALSE 8690
// enable ( 401 ) else
8685: LD_INT 401
8687: ENABLE_MARKED
8688: GO 8691
// enable ;
8690: ENABLE
// end ; end ;
8691: PPOPN 2
8693: END
// every 0 0$3 marked 99 do var i , CanWin ;
8694: GO 8696
8696: DISABLE
8697: LD_INT 0
8699: PPUSH
8700: PPUSH
// begin if not HasPower ( your_side ) then
8701: LD_OWVAR 2
8705: PPUSH
8706: CALL 8233 0 1
8710: NOT
8711: IFFALSE 8722
// begin Multiplayer_Loose_Message ;
8713: CALL_OW 521
// enable ( 400 ) ;
8717: LD_INT 400
8719: ENABLE_MARKED
// end else
8720: GO 8835
// begin CanWin := true ;
8722: LD_ADDR_VAR 0 2
8726: PUSH
8727: LD_INT 1
8729: ST_TO_ADDR
// for i := 1 to 8 do
8730: LD_ADDR_VAR 0 1
8734: PUSH
8735: DOUBLE
8736: LD_INT 1
8738: DEC
8739: ST_TO_ADDR
8740: LD_INT 8
8742: PUSH
8743: FOR_TO
8744: IFFALSE 8821
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8746: LD_EXP 18
8750: PUSH
8751: LD_VAR 0 1
8755: ARRAY
8756: PUSH
8757: LD_VAR 0 1
8761: PPUSH
8762: CALL_OW 108
8766: AND
8767: PUSH
8768: LD_VAR 0 1
8772: PUSH
8773: LD_OWVAR 2
8777: NONEQUAL
8778: AND
8779: IFFALSE 8819
// if not AlliedSides ( i , your_side ) then
8781: LD_VAR 0 1
8785: PPUSH
8786: LD_OWVAR 2
8790: PPUSH
8791: CALL 8401 0 2
8795: NOT
8796: IFFALSE 8819
// if HasPower ( i ) then
8798: LD_VAR 0 1
8802: PPUSH
8803: CALL 8233 0 1
8807: IFFALSE 8819
// begin CanWin := false ;
8809: LD_ADDR_VAR 0 2
8813: PUSH
8814: LD_INT 0
8816: ST_TO_ADDR
// break ;
8817: GO 8821
// end ;
8819: GO 8743
8821: POP
8822: POP
// if CanWin then
8823: LD_VAR 0 2
8827: IFFALSE 8834
// enable ( 401 ) else
8829: LD_INT 401
8831: ENABLE_MARKED
8832: GO 8835
// enable ;
8834: ENABLE
// end ; end ; end_of_file
8835: PPOPN 2
8837: END
// every 0 0$1 marked 100 do var i , base , pom , filter , sib_mined ;
8838: GO 8840
8840: DISABLE
8841: LD_INT 0
8843: PPUSH
8844: PPUSH
8845: PPUSH
8846: PPUSH
8847: PPUSH
// begin sib_mined := [ ] ;
8848: LD_ADDR_VAR 0 5
8852: PUSH
8853: EMPTY
8854: ST_TO_ADDR
// for i := 1 to 8 do
8855: LD_ADDR_VAR 0 1
8859: PUSH
8860: DOUBLE
8861: LD_INT 1
8863: DEC
8864: ST_TO_ADDR
8865: LD_INT 8
8867: PUSH
8868: FOR_TO
8869: IFFALSE 9025
// if Side_Positions [ i ] then
8871: LD_EXP 18
8875: PUSH
8876: LD_VAR 0 1
8880: ARRAY
8881: IFFALSE 9009
// begin filter := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8883: LD_ADDR_VAR 0 4
8887: PUSH
8888: LD_INT 22
8890: PUSH
8891: LD_VAR 0 1
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: PUSH
8900: LD_INT 2
8902: PUSH
8903: LD_INT 30
8905: PUSH
8906: LD_INT 0
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: PUSH
8913: LD_INT 30
8915: PUSH
8916: LD_INT 1
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: LIST
8927: PUSH
8928: EMPTY
8929: LIST
8930: LIST
8931: PPUSH
8932: CALL_OW 69
8936: ST_TO_ADDR
// pom := 0 ;
8937: LD_ADDR_VAR 0 3
8941: PUSH
8942: LD_INT 0
8944: ST_TO_ADDR
// for base in filter do
8945: LD_ADDR_VAR 0 2
8949: PUSH
8950: LD_VAR 0 4
8954: PUSH
8955: FOR_IN
8956: IFFALSE 8989
// pom := pom + GetResourceType ( GetBase ( base ) , mat_siberit ) ;
8958: LD_ADDR_VAR 0 3
8962: PUSH
8963: LD_VAR 0 3
8967: PUSH
8968: LD_VAR 0 2
8972: PPUSH
8973: CALL_OW 274
8977: PPUSH
8978: LD_INT 3
8980: PPUSH
8981: CALL_OW 275
8985: PLUS
8986: ST_TO_ADDR
8987: GO 8955
8989: POP
8990: POP
// sib_mined := sib_mined ^ pom ;
8991: LD_ADDR_VAR 0 5
8995: PUSH
8996: LD_VAR 0 5
9000: PUSH
9001: LD_VAR 0 3
9005: ADD
9006: ST_TO_ADDR
// end else
9007: GO 9023
// sib_mined := sib_mined ^ 0 ;
9009: LD_ADDR_VAR 0 5
9013: PUSH
9014: LD_VAR 0 5
9018: PUSH
9019: LD_INT 0
9021: ADD
9022: ST_TO_ADDR
9023: GO 8868
9025: POP
9026: POP
// if not def_public_score then
9027: LD_EXP 2
9031: NOT
9032: IFFALSE 9122
// begin ExtraStrings := [ ] ;
9034: LD_ADDR_EXP 59
9038: PUSH
9039: EMPTY
9040: ST_TO_ADDR
// for i := 1 to 8 do
9041: LD_ADDR_VAR 0 1
9045: PUSH
9046: DOUBLE
9047: LD_INT 1
9049: DEC
9050: ST_TO_ADDR
9051: LD_INT 8
9053: PUSH
9054: FOR_TO
9055: IFFALSE 9118
// if Side_Positions [ i ] then
9057: LD_EXP 18
9061: PUSH
9062: LD_VAR 0 1
9066: ARRAY
9067: IFFALSE 9116
// ExtraStrings := ExtraStrings ^ [ #AlienBase-MinedPublic , i , i , sib_mined [ i ] , amount_of_siberit ] ;
9069: LD_ADDR_EXP 59
9073: PUSH
9074: LD_EXP 59
9078: PUSH
9079: LD_STRING #AlienBase-MinedPublic
9081: PUSH
9082: LD_VAR 0 1
9086: PUSH
9087: LD_VAR 0 1
9091: PUSH
9092: LD_VAR 0 5
9096: PUSH
9097: LD_VAR 0 1
9101: ARRAY
9102: PUSH
9103: LD_EXP 12
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: ADD
9115: ST_TO_ADDR
9116: GO 9054
9118: POP
9119: POP
// end else
9120: GO 9151
// ExtraStrings := [ #AlienBase-Mined , sib_mined [ Your_Side ] , amount_of_siberit ] ;
9122: LD_ADDR_EXP 59
9126: PUSH
9127: LD_STRING #AlienBase-Mined
9129: PUSH
9130: LD_VAR 0 5
9134: PUSH
9135: LD_OWVAR 2
9139: ARRAY
9140: PUSH
9141: LD_EXP 12
9145: PUSH
9146: EMPTY
9147: LIST
9148: LIST
9149: LIST
9150: ST_TO_ADDR
// for i := 1 to 8 do
9151: LD_ADDR_VAR 0 1
9155: PUSH
9156: DOUBLE
9157: LD_INT 1
9159: DEC
9160: ST_TO_ADDR
9161: LD_INT 8
9163: PUSH
9164: FOR_TO
9165: IFFALSE 9222
// if sib_mined [ i ] >= amount_of_siberit then
9167: LD_VAR 0 5
9171: PUSH
9172: LD_VAR 0 1
9176: ARRAY
9177: PUSH
9178: LD_EXP 12
9182: GREATEREQUAL
9183: IFFALSE 9220
// begin wait ( 0 0$1 ) ;
9185: LD_INT 35
9187: PPUSH
9188: CALL_OW 67
// if sib_mined [ your_side ] >= amount_of_siberit then
9192: LD_VAR 0 5
9196: PUSH
9197: LD_OWVAR 2
9201: ARRAY
9202: PUSH
9203: LD_EXP 12
9207: GREATEREQUAL
9208: IFFALSE 9216
// YouWinInMultiplayer else
9210: CALL_OW 106
9214: GO 9220
// YouLostInMultiplayer ;
9216: CALL_OW 107
// end ;
9220: GO 9164
9222: POP
9223: POP
// enable ;
9224: ENABLE
// end ; end_of_file
9225: PPOPN 5
9227: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
9228: LD_INT 0
9230: PPUSH
9231: PPUSH
// for un in battle_flags_id do
9232: LD_ADDR_VAR 0 2
9236: PUSH
9237: LD_EXP 29
9241: PUSH
9242: FOR_IN
9243: IFFALSE 9318
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
9245: LD_VAR 0 2
9249: PPUSH
9250: LD_INT 1
9252: PUSH
9253: LD_LOC 11
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: PUSH
9262: LD_INT 2
9264: PUSH
9265: LD_LOC 11
9269: PUSH
9270: LD_INT 2
9272: DIV
9273: PUSH
9274: EMPTY
9275: LIST
9276: LIST
9277: PUSH
9278: LD_INT 3
9280: PUSH
9281: LD_LOC 11
9285: PUSH
9286: LD_INT 5
9288: DIV
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PUSH
9294: LD_INT 20
9296: PUSH
9297: LD_LOC 11
9301: PUSH
9302: EMPTY
9303: LIST
9304: LIST
9305: PUSH
9306: EMPTY
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: PPUSH
9312: CALL_OW 423
9316: GO 9242
9318: POP
9319: POP
// end ;
9320: LD_VAR 0 1
9324: RET
// every 1 do var un ;
9325: GO 9327
9327: DISABLE
9328: LD_INT 0
9330: PPUSH
// begin if not def_morale_flags then
9331: LD_EXP 50
9335: NOT
9336: IFFALSE 9340
// exit ;
9338: GO 9417
// if not morale_decreasing_time then
9340: LD_EXP 10
9344: NOT
9345: IFFALSE 9349
// exit ;
9347: GO 9417
// strength = 100 ;
9349: LD_ADDR_LOC 11
9353: PUSH
9354: LD_INT 100
9356: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
9357: LD_EXP 10
9361: PPUSH
9362: CALL_OW 67
// strength := strength - 1 ;
9366: LD_ADDR_LOC 11
9370: PUSH
9371: LD_LOC 11
9375: PUSH
9376: LD_INT 1
9378: MINUS
9379: ST_TO_ADDR
// Update_Flags ;
9380: CALL 9228 0 0
// until not strength ;
9384: LD_LOC 11
9388: NOT
9389: IFFALSE 9357
// for un in battle_flags_id do
9391: LD_ADDR_VAR 0 1
9395: PUSH
9396: LD_EXP 29
9400: PUSH
9401: FOR_IN
9402: IFFALSE 9415
// KillBattleFlag ( un ) ;
9404: LD_VAR 0 1
9408: PPUSH
9409: CALL_OW 419
9413: GO 9401
9415: POP
9416: POP
// end ; end_of_file
9417: PPOPN 1
9419: END
// export BuildUpAreas ; export function BeginBuildUp ; var i , j ; begin
9420: LD_INT 0
9422: PPUSH
9423: PPUSH
9424: PPUSH
// enable ( 600 ) ;
9425: LD_INT 600
9427: ENABLE_MARKED
// for i := 1 to BuildUpAreas do
9428: LD_ADDR_VAR 0 2
9432: PUSH
9433: DOUBLE
9434: LD_INT 1
9436: DEC
9437: ST_TO_ADDR
9438: LD_EXP 39
9442: PUSH
9443: FOR_TO
9444: IFFALSE 9599
// if Position_Sides [ i ] then
9446: LD_EXP 21
9450: PUSH
9451: LD_VAR 0 2
9455: ARRAY
9456: IFFALSE 9597
// for j := 1 to 8 do
9458: LD_ADDR_VAR 0 3
9462: PUSH
9463: DOUBLE
9464: LD_INT 1
9466: DEC
9467: ST_TO_ADDR
9468: LD_INT 8
9470: PUSH
9471: FOR_TO
9472: IFFALSE 9595
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
9474: LD_EXP 18
9478: PUSH
9479: LD_VAR 0 3
9483: ARRAY
9484: PUSH
9485: LD_EXP 16
9489: PUSH
9490: LD_EXP 21
9494: PUSH
9495: LD_VAR 0 2
9499: ARRAY
9500: ARRAY
9501: PUSH
9502: LD_EXP 16
9506: PUSH
9507: LD_VAR 0 3
9511: ARRAY
9512: NONEQUAL
9513: PUSH
9514: LD_EXP 20
9518: NOT
9519: PUSH
9520: LD_EXP 21
9524: PUSH
9525: LD_VAR 0 2
9529: ARRAY
9530: PUSH
9531: LD_VAR 0 3
9535: NONEQUAL
9536: AND
9537: OR
9538: AND
9539: IFFALSE 9563
// HideArea ( j , BuildUpAreas [ i ] ) else
9541: LD_VAR 0 3
9545: PPUSH
9546: LD_EXP 39
9550: PUSH
9551: LD_VAR 0 2
9555: ARRAY
9556: PPUSH
9557: CALL_OW 333
9561: GO 9593
// if ( j = your_side ) then
9563: LD_VAR 0 3
9567: PUSH
9568: LD_OWVAR 2
9572: EQUAL
9573: IFFALSE 9593
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
9575: LD_EXP 39
9579: PUSH
9580: LD_VAR 0 2
9584: ARRAY
9585: PPUSH
9586: LD_INT 5
9588: PPUSH
9589: CALL_OW 424
9593: GO 9471
9595: POP
9596: POP
9597: GO 9443
9599: POP
9600: POP
// end ;
9601: LD_VAR 0 1
9605: RET
// export function EndBuildUp ; var i , j ; begin
9606: LD_INT 0
9608: PPUSH
9609: PPUSH
9610: PPUSH
// disable ( 600 ) ;
9611: LD_INT 600
9613: DISABLE_MARKED
// for i := 1 to BuildUpAreas do
9614: LD_ADDR_VAR 0 2
9618: PUSH
9619: DOUBLE
9620: LD_INT 1
9622: DEC
9623: ST_TO_ADDR
9624: LD_EXP 39
9628: PUSH
9629: FOR_TO
9630: IFFALSE 9785
// if Position_Sides [ i ] then
9632: LD_EXP 21
9636: PUSH
9637: LD_VAR 0 2
9641: ARRAY
9642: IFFALSE 9783
// for j := 1 to 8 do
9644: LD_ADDR_VAR 0 3
9648: PUSH
9649: DOUBLE
9650: LD_INT 1
9652: DEC
9653: ST_TO_ADDR
9654: LD_INT 8
9656: PUSH
9657: FOR_TO
9658: IFFALSE 9781
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
9660: LD_EXP 18
9664: PUSH
9665: LD_VAR 0 3
9669: ARRAY
9670: PUSH
9671: LD_EXP 16
9675: PUSH
9676: LD_EXP 21
9680: PUSH
9681: LD_VAR 0 2
9685: ARRAY
9686: ARRAY
9687: PUSH
9688: LD_EXP 16
9692: PUSH
9693: LD_VAR 0 3
9697: ARRAY
9698: NONEQUAL
9699: PUSH
9700: LD_EXP 20
9704: NOT
9705: PUSH
9706: LD_EXP 21
9710: PUSH
9711: LD_VAR 0 2
9715: ARRAY
9716: PUSH
9717: LD_VAR 0 3
9721: NONEQUAL
9722: AND
9723: OR
9724: AND
9725: IFFALSE 9749
// ShowArea ( j , BuildUpAreas [ i ] ) else
9727: LD_VAR 0 3
9731: PPUSH
9732: LD_EXP 39
9736: PUSH
9737: LD_VAR 0 2
9741: ARRAY
9742: PPUSH
9743: CALL_OW 334
9747: GO 9779
// if ( j = your_side ) then
9749: LD_VAR 0 3
9753: PUSH
9754: LD_OWVAR 2
9758: EQUAL
9759: IFFALSE 9779
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
9761: LD_EXP 39
9765: PUSH
9766: LD_VAR 0 2
9770: ARRAY
9771: PPUSH
9772: LD_INT 0
9774: PPUSH
9775: CALL_OW 424
9779: GO 9657
9781: POP
9782: POP
9783: GO 9629
9785: POP
9786: POP
// end ;
9787: LD_VAR 0 1
9791: RET
// every 5 marked 600 do var i , un ;
9792: GO 9794
9794: DISABLE
9795: LD_INT 0
9797: PPUSH
9798: PPUSH
// begin for i := 1 to BuildUpAreas do
9799: LD_ADDR_VAR 0 1
9803: PUSH
9804: DOUBLE
9805: LD_INT 1
9807: DEC
9808: ST_TO_ADDR
9809: LD_EXP 39
9813: PUSH
9814: FOR_TO
9815: IFFALSE 9970
// if Position_Sides [ i ] then
9817: LD_EXP 21
9821: PUSH
9822: LD_VAR 0 1
9826: ARRAY
9827: IFFALSE 9968
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
9829: LD_ADDR_VAR 0 2
9833: PUSH
9834: LD_EXP 39
9838: PUSH
9839: LD_VAR 0 1
9843: ARRAY
9844: PPUSH
9845: LD_INT 2
9847: PUSH
9848: LD_INT 21
9850: PUSH
9851: LD_INT 1
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: PUSH
9858: LD_INT 21
9860: PUSH
9861: LD_INT 2
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: LIST
9872: PUSH
9873: LD_INT 22
9875: PUSH
9876: LD_OWVAR 2
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: PPUSH
9889: CALL_OW 70
9893: PUSH
9894: FOR_IN
9895: IFFALSE 9966
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
9897: LD_EXP 16
9901: PUSH
9902: LD_EXP 21
9906: PUSH
9907: LD_VAR 0 1
9911: ARRAY
9912: ARRAY
9913: PUSH
9914: LD_EXP 16
9918: PUSH
9919: LD_OWVAR 2
9923: ARRAY
9924: NONEQUAL
9925: PUSH
9926: LD_EXP 20
9930: NOT
9931: PUSH
9932: LD_EXP 21
9936: PUSH
9937: LD_VAR 0 1
9941: ARRAY
9942: PUSH
9943: LD_OWVAR 2
9947: NONEQUAL
9948: AND
9949: OR
9950: IFFALSE 9964
// ComMoveToArea ( un , BuildUpEscape ) ;
9952: LD_VAR 0 2
9956: PPUSH
9957: LD_INT 16
9959: PPUSH
9960: CALL_OW 113
9964: GO 9894
9966: POP
9967: POP
9968: GO 9814
9970: POP
9971: POP
// enable ;
9972: ENABLE
// end ;
9973: PPOPN 2
9975: END
// every 5 5$00 do
9976: GO 9978
9978: DISABLE
// if ( def_builduptime = 1 ) then
9979: LD_EXP 55
9983: PUSH
9984: LD_INT 1
9986: EQUAL
9987: IFFALSE 9993
// EndBuildUp ;
9989: CALL 9606 0 0
9993: END
// every 10 10$00 do
9994: GO 9996
9996: DISABLE
// if ( def_builduptime = 2 ) then
9997: LD_EXP 55
10001: PUSH
10002: LD_INT 2
10004: EQUAL
10005: IFFALSE 10011
// EndBuildUp ;
10007: CALL 9606 0 0
10011: END
// every 15 15$00 do
10012: GO 10014
10014: DISABLE
// if ( def_builduptime = 3 ) then
10015: LD_EXP 55
10019: PUSH
10020: LD_INT 3
10022: EQUAL
10023: IFFALSE 10029
// EndBuildUp ; end_of_file
10025: CALL 9606 0 0
10029: END
// var BloodGods , BloodGods_LastKills , BloodGods_CurrentKills , BloodGods_Positions ; every 0 0$3 marked 200 do var x ;
10030: GO 10032
10032: DISABLE
10033: LD_INT 0
10035: PPUSH
// begin enable ;
10036: ENABLE
// for x := 1 to 8 do
10037: LD_ADDR_VAR 0 1
10041: PUSH
10042: DOUBLE
10043: LD_INT 1
10045: DEC
10046: ST_TO_ADDR
10047: LD_INT 8
10049: PUSH
10050: FOR_TO
10051: IFFALSE 10135
// if ( BloodGods_CurrentKills [ x ] > 5 ) and ( BloodGods [ x ] = - 1 ) then
10053: LD_LOC 18
10057: PUSH
10058: LD_VAR 0 1
10062: ARRAY
10063: PUSH
10064: LD_INT 5
10066: GREATER
10067: PUSH
10068: LD_LOC 16
10072: PUSH
10073: LD_VAR 0 1
10077: ARRAY
10078: PUSH
10079: LD_INT 1
10081: NEG
10082: EQUAL
10083: AND
10084: IFFALSE 10133
// begin BloodGods_LastKills := Replace ( BloodGods_LastKills , x , BloodGods_LastKills [ x ] + 6 ) ;
10086: LD_ADDR_LOC 17
10090: PUSH
10091: LD_LOC 17
10095: PPUSH
10096: LD_VAR 0 1
10100: PPUSH
10101: LD_LOC 17
10105: PUSH
10106: LD_VAR 0 1
10110: ARRAY
10111: PUSH
10112: LD_INT 6
10114: PLUS
10115: PPUSH
10116: CALL_OW 1
10120: ST_TO_ADDR
// AwakenBloodGod ( x , false ) ;
10121: LD_VAR 0 1
10125: PPUSH
10126: LD_INT 0
10128: PPUSH
10129: CALL 10307 0 2
// end ;
10133: GO 10050
10135: POP
10136: POP
// end ;
10137: PPOPN 1
10139: END
// every 0 0$1 marked 200 do var BGL , x ;
10140: GO 10142
10142: DISABLE
10143: LD_INT 0
10145: PPUSH
10146: PPUSH
// begin enable ;
10147: ENABLE
// for x := 1 to 8 do
10148: LD_ADDR_VAR 0 2
10152: PUSH
10153: DOUBLE
10154: LD_INT 1
10156: DEC
10157: ST_TO_ADDR
10158: LD_INT 8
10160: PUSH
10161: FOR_TO
10162: IFFALSE 10293
// if ( BloodGods [ x ] > - 1 ) and IsLive ( BloodGods [ x ] ) then
10164: LD_LOC 16
10168: PUSH
10169: LD_VAR 0 2
10173: ARRAY
10174: PUSH
10175: LD_INT 1
10177: NEG
10178: GREATER
10179: PUSH
10180: LD_LOC 16
10184: PUSH
10185: LD_VAR 0 2
10189: ARRAY
10190: PPUSH
10191: CALL_OW 300
10195: AND
10196: IFFALSE 10291
// begin BGL := GetLives ( BloodGods [ x ] ) ;
10198: LD_ADDR_VAR 0 1
10202: PUSH
10203: LD_LOC 16
10207: PUSH
10208: LD_VAR 0 2
10212: ARRAY
10213: PPUSH
10214: CALL_OW 256
10218: ST_TO_ADDR
// if ( BGL < 1000 ) and ( BGL > 100 ) then
10219: LD_VAR 0 1
10223: PUSH
10224: LD_INT 1000
10226: LESS
10227: PUSH
10228: LD_VAR 0 1
10232: PUSH
10233: LD_INT 100
10235: GREATER
10236: AND
10237: IFFALSE 10291
// begin BGL := BGL + 10 ;
10239: LD_ADDR_VAR 0 1
10243: PUSH
10244: LD_VAR 0 1
10248: PUSH
10249: LD_INT 10
10251: PLUS
10252: ST_TO_ADDR
// if BGL > 1000 then
10253: LD_VAR 0 1
10257: PUSH
10258: LD_INT 1000
10260: GREATER
10261: IFFALSE 10271
// BGL := 1000 ;
10263: LD_ADDR_VAR 0 1
10267: PUSH
10268: LD_INT 1000
10270: ST_TO_ADDR
// SetLives ( BloodGods [ x ] , BGL ) ;
10271: LD_LOC 16
10275: PUSH
10276: LD_VAR 0 2
10280: ARRAY
10281: PPUSH
10282: LD_VAR 0 1
10286: PPUSH
10287: CALL_OW 234
// end ; end ;
10291: GO 10161
10293: POP
10294: POP
// end ;
10295: PPOPN 2
10297: END
// every 0 0$1 marked 200 do
10298: GO 10300
10300: DISABLE
// begin DisplayTimeWithKills ;
10301: CALL 10548 0 0
// enable ;
10305: ENABLE
// end ;
10306: END
// function AwakenBloodGod ( side , NoDialog ) ; begin
10307: LD_INT 0
10309: PPUSH
// uc_direction := Rand ( 0 , 5 ) ;
10310: LD_ADDR_OWVAR 24
10314: PUSH
10315: LD_INT 0
10317: PPUSH
10318: LD_INT 5
10320: PPUSH
10321: CALL_OW 12
10325: ST_TO_ADDR
// PrepareHuman ( 1 , class_soldier , 15 ) ;
10326: LD_INT 1
10328: PPUSH
10329: LD_INT 1
10331: PPUSH
10332: LD_INT 15
10334: PPUSH
10335: CALL_OW 380
// hc_importance := 106 ;
10339: LD_ADDR_OWVAR 32
10343: PUSH
10344: LD_INT 106
10346: ST_TO_ADDR
// hc_name := Blood God of  & mp_sides_players_names [ side ] ;
10347: LD_ADDR_OWVAR 26
10351: PUSH
10352: LD_STRING Blood God of 
10354: PUSH
10355: LD_OWVAR 19
10359: PUSH
10360: LD_VAR 0 1
10364: ARRAY
10365: STR
10366: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
10367: LD_ADDR_OWVAR 21
10371: PUSH
10372: LD_EXP 19
10376: PUSH
10377: LD_VAR 0 1
10381: ARRAY
10382: ST_TO_ADDR
// uc_side := side ;
10383: LD_ADDR_OWVAR 20
10387: PUSH
10388: LD_VAR 0 1
10392: ST_TO_ADDR
// hc_noskilllimit := true ;
10393: LD_ADDR_OWVAR 76
10397: PUSH
10398: LD_INT 1
10400: ST_TO_ADDR
// hc_agressivity := 50 ;
10401: LD_ADDR_OWVAR 35
10405: PUSH
10406: LD_INT 50
10408: ST_TO_ADDR
// BloodGods := Replace ( BloodGods , Side , CreateHuman ) ;
10409: LD_ADDR_LOC 16
10413: PUSH
10414: LD_LOC 16
10418: PPUSH
10419: LD_VAR 0 1
10423: PPUSH
10424: CALL_OW 44
10428: PPUSH
10429: CALL_OW 1
10433: ST_TO_ADDR
// PlaceUnitXYR ( BloodGods [ side ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 1 ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 2 ] , 10 , false ) ;
10434: LD_LOC 16
10438: PUSH
10439: LD_VAR 0 1
10443: ARRAY
10444: PPUSH
10445: LD_LOC 19
10449: PUSH
10450: LD_EXP 18
10454: PUSH
10455: LD_VAR 0 1
10459: ARRAY
10460: ARRAY
10461: PUSH
10462: LD_INT 1
10464: ARRAY
10465: PPUSH
10466: LD_LOC 19
10470: PUSH
10471: LD_EXP 18
10475: PUSH
10476: LD_VAR 0 1
10480: ARRAY
10481: ARRAY
10482: PUSH
10483: LD_INT 2
10485: ARRAY
10486: PPUSH
10487: LD_INT 10
10489: PPUSH
10490: LD_INT 0
10492: PPUSH
10493: CALL_OW 50
// SetAttr ( BloodGods [ side ] , attr_stamina , 300 ) ;
10497: LD_LOC 16
10501: PUSH
10502: LD_VAR 0 1
10506: ARRAY
10507: PPUSH
10508: LD_INT 1
10510: PPUSH
10511: LD_INT 300
10513: PPUSH
10514: CALL_OW 239
// if not NoDialog then
10518: LD_VAR 0 2
10522: NOT
10523: IFFALSE 10543
// SayRadio ( BloodGods [ side ] , DLAwaken ) ;
10525: LD_LOC 16
10529: PUSH
10530: LD_VAR 0 1
10534: ARRAY
10535: PPUSH
10536: LD_STRING DLAwaken
10538: PPUSH
10539: CALL_OW 94
// end ;
10543: LD_VAR 0 3
10547: RET
// function DisplayTimeWithKills ; var x ; begin
10548: LD_INT 0
10550: PPUSH
10551: PPUSH
// ExtraStrings :=  ;
10552: LD_ADDR_EXP 59
10556: PUSH
10557: LD_STRING 
10559: ST_TO_ADDR
// for x = 1 to Side_Positions do
10560: LD_ADDR_VAR 0 2
10564: PUSH
10565: DOUBLE
10566: LD_INT 1
10568: DEC
10569: ST_TO_ADDR
10570: LD_EXP 18
10574: PUSH
10575: FOR_TO
10576: IFFALSE 10809
// if Side_Positions [ x ] then
10578: LD_EXP 18
10582: PUSH
10583: LD_VAR 0 2
10587: ARRAY
10588: IFFALSE 10807
// begin BloodGods_CurrentKills := Replace ( BloodGods_CurrentKills , x , GetHumansKilled ( x ) - BloodGods_LastKills [ x ] ) ;
10590: LD_ADDR_LOC 18
10594: PUSH
10595: LD_LOC 18
10599: PPUSH
10600: LD_VAR 0 2
10604: PPUSH
10605: LD_VAR 0 2
10609: PPUSH
10610: CALL_OW 515
10614: PUSH
10615: LD_LOC 17
10619: PUSH
10620: LD_VAR 0 2
10624: ARRAY
10625: MINUS
10626: PPUSH
10627: CALL_OW 1
10631: ST_TO_ADDR
// if ( BloodGods [ x ] > - 1 ) and ( IsLive ( BloodGods [ x ] ) ) then
10632: LD_LOC 16
10636: PUSH
10637: LD_VAR 0 2
10641: ARRAY
10642: PUSH
10643: LD_INT 1
10645: NEG
10646: GREATER
10647: PUSH
10648: LD_LOC 16
10652: PUSH
10653: LD_VAR 0 2
10657: ARRAY
10658: PPUSH
10659: CALL_OW 300
10663: AND
10664: IFFALSE 10697
// ExtraStrings = ExtraStrings ^ [ #godawoken , x , x ] else
10666: LD_ADDR_EXP 59
10670: PUSH
10671: LD_EXP 59
10675: PUSH
10676: LD_STRING #godawoken
10678: PUSH
10679: LD_VAR 0 2
10683: PUSH
10684: LD_VAR 0 2
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: LIST
10693: ADD
10694: ST_TO_ADDR
10695: GO 10807
// if ( BloodGods [ x ] > - 1 ) and ( IsDead ( BloodGods [ x ] ) ) then
10697: LD_LOC 16
10701: PUSH
10702: LD_VAR 0 2
10706: ARRAY
10707: PUSH
10708: LD_INT 1
10710: NEG
10711: GREATER
10712: PUSH
10713: LD_LOC 16
10717: PUSH
10718: LD_VAR 0 2
10722: ARRAY
10723: PPUSH
10724: CALL_OW 301
10728: AND
10729: IFFALSE 10762
// ExtraStrings = ExtraStrings ^ [ #goddied , x , x ] else
10731: LD_ADDR_EXP 59
10735: PUSH
10736: LD_EXP 59
10740: PUSH
10741: LD_STRING #goddied
10743: PUSH
10744: LD_VAR 0 2
10748: PUSH
10749: LD_VAR 0 2
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: LIST
10758: ADD
10759: ST_TO_ADDR
10760: GO 10807
// ExtraStrings = ExtraStrings ^ [ #godssacrifise , x , x , BloodGods_CurrentKills [ x ] , 6 ] end ;
10762: LD_ADDR_EXP 59
10766: PUSH
10767: LD_EXP 59
10771: PUSH
10772: LD_STRING #godssacrifise
10774: PUSH
10775: LD_VAR 0 2
10779: PUSH
10780: LD_VAR 0 2
10784: PUSH
10785: LD_LOC 18
10789: PUSH
10790: LD_VAR 0 2
10794: ARRAY
10795: PUSH
10796: LD_INT 6
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: ADD
10806: ST_TO_ADDR
10807: GO 10575
10809: POP
10810: POP
// end ;
10811: LD_VAR 0 1
10815: RET
// export function InitBloodGods ; begin
10816: LD_INT 0
10818: PPUSH
// BloodGods = [ - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 ] ;
10819: LD_ADDR_LOC 16
10823: PUSH
10824: LD_INT 1
10826: NEG
10827: PUSH
10828: LD_INT 1
10830: NEG
10831: PUSH
10832: LD_INT 1
10834: NEG
10835: PUSH
10836: LD_INT 1
10838: NEG
10839: PUSH
10840: LD_INT 1
10842: NEG
10843: PUSH
10844: LD_INT 1
10846: NEG
10847: PUSH
10848: LD_INT 1
10850: NEG
10851: PUSH
10852: LD_INT 1
10854: NEG
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: ST_TO_ADDR
// BloodGods_LastKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10866: LD_ADDR_LOC 17
10870: PUSH
10871: LD_INT 0
10873: PUSH
10874: LD_INT 0
10876: PUSH
10877: LD_INT 0
10879: PUSH
10880: LD_INT 0
10882: PUSH
10883: LD_INT 0
10885: PUSH
10886: LD_INT 0
10888: PUSH
10889: LD_INT 0
10891: PUSH
10892: LD_INT 0
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: ST_TO_ADDR
// BloodGods_CurrentKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10905: LD_ADDR_LOC 18
10909: PUSH
10910: LD_INT 0
10912: PUSH
10913: LD_INT 0
10915: PUSH
10916: LD_INT 0
10918: PUSH
10919: LD_INT 0
10921: PUSH
10922: LD_INT 0
10924: PUSH
10925: LD_INT 0
10927: PUSH
10928: LD_INT 0
10930: PUSH
10931: LD_INT 0
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: ST_TO_ADDR
// BloodGods_Positions = [ [ 60 , 47 ] , [ 82 , 26 ] , [ 124 , 45 ] , [ 147 , 90 ] , [ 126 , 112 ] , [ 84 , 92 ] , [ 106 , 73 ] , [ 106 , 73 ] ] ;
10944: LD_ADDR_LOC 19
10948: PUSH
10949: LD_INT 60
10951: PUSH
10952: LD_INT 47
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: PUSH
10959: LD_INT 82
10961: PUSH
10962: LD_INT 26
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: PUSH
10969: LD_INT 124
10971: PUSH
10972: LD_INT 45
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: PUSH
10979: LD_INT 147
10981: PUSH
10982: LD_INT 90
10984: PUSH
10985: EMPTY
10986: LIST
10987: LIST
10988: PUSH
10989: LD_INT 126
10991: PUSH
10992: LD_INT 112
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: PUSH
10999: LD_INT 84
11001: PUSH
11002: LD_INT 92
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: PUSH
11009: LD_INT 106
11011: PUSH
11012: LD_INT 73
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: PUSH
11019: LD_INT 106
11021: PUSH
11022: LD_INT 73
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: ST_TO_ADDR
// ClearHumansKilled ;
11039: CALL_OW 516
// enable ( 200 ) ;
11043: LD_INT 200
11045: ENABLE_MARKED
// end ; end_of_file
11046: LD_VAR 0 1
11050: RET
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime , def_sheik , def_mastodont ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
11051: LD_INT 0
11053: PPUSH
11054: PPUSH
// if ( not IAmSpec ) then
11055: CALL_OW 531
11059: NOT
11060: IFFALSE 11076
// Result := Limits_Info ^  ;
11062: LD_ADDR_VAR 0 1
11066: PUSH
11067: LD_LOC 27
11071: PUSH
11072: LD_STRING 
11074: ADD
11075: ST_TO_ADDR
// for i := 1 to 8 do
11076: LD_ADDR_VAR 0 2
11080: PUSH
11081: DOUBLE
11082: LD_INT 1
11084: DEC
11085: ST_TO_ADDR
11086: LD_INT 8
11088: PUSH
11089: FOR_TO
11090: IFFALSE 11135
// if Cheaters [ i ] then
11092: LD_LOC 28
11096: PUSH
11097: LD_VAR 0 2
11101: ARRAY
11102: IFFALSE 11133
// Result := Result ^ [ #Cheater , i , i ] ;
11104: LD_ADDR_VAR 0 1
11108: PUSH
11109: LD_VAR 0 1
11113: PUSH
11114: LD_STRING #Cheater
11116: PUSH
11117: LD_VAR 0 2
11121: PUSH
11122: LD_VAR 0 2
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: LIST
11131: ADD
11132: ST_TO_ADDR
11133: GO 11089
11135: POP
11136: POP
// end ;
11137: LD_VAR 0 1
11141: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
11142: LD_INT 0
11144: PPUSH
11145: PPUSH
11146: PPUSH
11147: PPUSH
11148: PPUSH
// case Game_Type of 10 :
11149: LD_EXP 40
11153: PUSH
11154: LD_INT 10
11156: DOUBLE
11157: EQUAL
11158: IFTRUE 11162
11160: GO 11173
11162: POP
// def_game_rules := 1 ; 11 :
11163: LD_ADDR_EXP 41
11167: PUSH
11168: LD_INT 1
11170: ST_TO_ADDR
11171: GO 11193
11173: LD_INT 11
11175: DOUBLE
11176: EQUAL
11177: IFTRUE 11181
11179: GO 11192
11181: POP
// def_game_rules := 3 ; end ;
11182: LD_ADDR_EXP 41
11186: PUSH
11187: LD_INT 3
11189: ST_TO_ADDR
11190: GO 11193
11192: POP
// case def_game_rules of 0 :
11193: LD_EXP 41
11197: PUSH
11198: LD_INT 0
11200: DOUBLE
11201: EQUAL
11202: IFTRUE 11206
11204: GO 11211
11206: POP
// exit ; 1 :
11207: GO 13269
11209: GO 13169
11211: LD_INT 1
11213: DOUBLE
11214: EQUAL
11215: IFTRUE 11219
11217: GO 11435
11219: POP
// begin def_base_level := 2 ;
11220: LD_ADDR_EXP 42
11224: PUSH
11225: LD_INT 2
11227: ST_TO_ADDR
// def_amount_of_people := 2 ;
11228: LD_ADDR_EXP 43
11232: PUSH
11233: LD_INT 2
11235: ST_TO_ADDR
// def_skill_level := 1 ;
11236: LD_ADDR_EXP 44
11240: PUSH
11241: LD_INT 1
11243: ST_TO_ADDR
// def_starting_resources := 2 ;
11244: LD_ADDR_EXP 45
11248: PUSH
11249: LD_INT 2
11251: ST_TO_ADDR
// def_shipments_density := 1 ;
11252: LD_ADDR_EXP 46
11256: PUSH
11257: LD_INT 1
11259: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11260: LD_ADDR_EXP 47
11264: PUSH
11265: LD_INT 0
11267: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
11268: LD_ADDR_EXP 48
11272: PUSH
11273: LD_INT 1
11275: ST_TO_ADDR
// def_shared_vision := 1 ;
11276: LD_ADDR_EXP 49
11280: PUSH
11281: LD_INT 1
11283: ST_TO_ADDR
// def_morale_flags := 3 ;
11284: LD_ADDR_EXP 50
11288: PUSH
11289: LD_INT 3
11291: ST_TO_ADDR
// def_siberite_detection := 1 ;
11292: LD_ADDR_EXP 51
11296: PUSH
11297: LD_INT 1
11299: ST_TO_ADDR
// def_people_respawning := 1 ;
11300: LD_ADDR_EXP 52
11304: PUSH
11305: LD_INT 1
11307: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
11308: LD_ADDR_EXP 53
11312: PUSH
11313: LD_INT 1
11315: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11316: LD_ADDR_EXP 54
11320: PUSH
11321: LD_INT 0
11323: ST_TO_ADDR
// def_builduptime := 2 ;
11324: LD_ADDR_EXP 55
11328: PUSH
11329: LD_INT 2
11331: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
11332: LD_ADDR_VAR 0 2
11336: PUSH
11337: EMPTY
11338: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
11339: LD_ADDR_VAR 0 3
11343: PUSH
11344: EMPTY
11345: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11346: LD_ADDR_LOC 22
11350: PUSH
11351: EMPTY
11352: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11353: LD_ADDR_LOC 23
11357: PUSH
11358: EMPTY
11359: ST_TO_ADDR
// Banned_Controls := [ ] ;
11360: LD_ADDR_LOC 24
11364: PUSH
11365: EMPTY
11366: ST_TO_ADDR
// Banned_Engines := [ ] ;
11367: LD_ADDR_LOC 25
11371: PUSH
11372: EMPTY
11373: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
11374: LD_ADDR_LOC 20
11378: PUSH
11379: LD_INT 37
11381: PUSH
11382: EMPTY
11383: LIST
11384: PUSH
11385: LD_INT 4
11387: PUSH
11388: LD_INT 5
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: PUSH
11395: LD_INT 31
11397: PUSH
11398: LD_INT 32
11400: PUSH
11401: LD_INT 33
11403: PUSH
11404: EMPTY
11405: LIST
11406: LIST
11407: LIST
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: LIST
11413: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
11414: LD_ADDR_LOC 21
11418: PUSH
11419: LD_INT 2
11421: PUSH
11422: LD_INT 2
11424: PUSH
11425: LD_INT 4
11427: PUSH
11428: EMPTY
11429: LIST
11430: LIST
11431: LIST
11432: ST_TO_ADDR
// end ; 2 :
11433: GO 13169
11435: LD_INT 2
11437: DOUBLE
11438: EQUAL
11439: IFTRUE 11443
11441: GO 11652
11443: POP
// begin def_base_level := 1 ;
11444: LD_ADDR_EXP 42
11448: PUSH
11449: LD_INT 1
11451: ST_TO_ADDR
// def_amount_of_people := 2 ;
11452: LD_ADDR_EXP 43
11456: PUSH
11457: LD_INT 2
11459: ST_TO_ADDR
// def_skill_level := 3 ;
11460: LD_ADDR_EXP 44
11464: PUSH
11465: LD_INT 3
11467: ST_TO_ADDR
// def_starting_resources := 3 ;
11468: LD_ADDR_EXP 45
11472: PUSH
11473: LD_INT 3
11475: ST_TO_ADDR
// def_shipments_density := 2 ;
11476: LD_ADDR_EXP 46
11480: PUSH
11481: LD_INT 2
11483: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
11484: LD_ADDR_EXP 47
11488: PUSH
11489: LD_INT 1
11491: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
11492: LD_ADDR_EXP 48
11496: PUSH
11497: LD_INT 2
11499: ST_TO_ADDR
// def_shared_vision := 1 ;
11500: LD_ADDR_EXP 49
11504: PUSH
11505: LD_INT 1
11507: ST_TO_ADDR
// def_morale_flags := 0 ;
11508: LD_ADDR_EXP 50
11512: PUSH
11513: LD_INT 0
11515: ST_TO_ADDR
// def_siberite_detection := 1 ;
11516: LD_ADDR_EXP 51
11520: PUSH
11521: LD_INT 1
11523: ST_TO_ADDR
// def_people_respawning := 0 ;
11524: LD_ADDR_EXP 52
11528: PUSH
11529: LD_INT 0
11531: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
11532: LD_ADDR_EXP 53
11536: PUSH
11537: LD_INT 0
11539: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11540: LD_ADDR_EXP 54
11544: PUSH
11545: LD_INT 0
11547: ST_TO_ADDR
// def_builduptime := 2 ;
11548: LD_ADDR_EXP 55
11552: PUSH
11553: LD_INT 2
11555: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
11556: LD_ADDR_VAR 0 2
11560: PUSH
11561: LD_INT 1
11563: PUSH
11564: EMPTY
11565: LIST
11566: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
11567: LD_ADDR_VAR 0 3
11571: PUSH
11572: EMPTY
11573: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11574: LD_ADDR_LOC 22
11578: PUSH
11579: EMPTY
11580: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11581: LD_ADDR_LOC 23
11585: PUSH
11586: EMPTY
11587: ST_TO_ADDR
// Banned_Controls := [ ] ;
11588: LD_ADDR_LOC 24
11592: PUSH
11593: EMPTY
11594: ST_TO_ADDR
// Banned_Engines := [ ] ;
11595: LD_ADDR_LOC 25
11599: PUSH
11600: EMPTY
11601: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
11602: LD_ADDR_LOC 20
11606: PUSH
11607: LD_INT 4
11609: PUSH
11610: LD_INT 5
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: PUSH
11617: LD_INT 31
11619: PUSH
11620: LD_INT 32
11622: PUSH
11623: LD_INT 33
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: LIST
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
11635: LD_ADDR_LOC 21
11639: PUSH
11640: LD_INT 1
11642: PUSH
11643: LD_INT 2
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: ST_TO_ADDR
// end ; 3 :
11650: GO 13169
11652: LD_INT 3
11654: DOUBLE
11655: EQUAL
11656: IFTRUE 11660
11658: GO 11903
11660: POP
// begin def_base_level := 1 ;
11661: LD_ADDR_EXP 42
11665: PUSH
11666: LD_INT 1
11668: ST_TO_ADDR
// def_amount_of_people := 2 ;
11669: LD_ADDR_EXP 43
11673: PUSH
11674: LD_INT 2
11676: ST_TO_ADDR
// def_skill_level := 3 ;
11677: LD_ADDR_EXP 44
11681: PUSH
11682: LD_INT 3
11684: ST_TO_ADDR
// def_starting_resources := 3 ;
11685: LD_ADDR_EXP 45
11689: PUSH
11690: LD_INT 3
11692: ST_TO_ADDR
// def_shipments_density := 1 ;
11693: LD_ADDR_EXP 46
11697: PUSH
11698: LD_INT 1
11700: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11701: LD_ADDR_EXP 47
11705: PUSH
11706: LD_INT 0
11708: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
11709: LD_ADDR_EXP 48
11713: PUSH
11714: LD_INT 1
11716: ST_TO_ADDR
// def_shared_vision := 1 ;
11717: LD_ADDR_EXP 49
11721: PUSH
11722: LD_INT 1
11724: ST_TO_ADDR
// def_morale_flags := 0 ;
11725: LD_ADDR_EXP 50
11729: PUSH
11730: LD_INT 0
11732: ST_TO_ADDR
// def_siberite_detection := 1 ;
11733: LD_ADDR_EXP 51
11737: PUSH
11738: LD_INT 1
11740: ST_TO_ADDR
// def_people_respawning := 0 ;
11741: LD_ADDR_EXP 52
11745: PUSH
11746: LD_INT 0
11748: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
11749: LD_ADDR_EXP 53
11753: PUSH
11754: LD_INT 2
11756: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11757: LD_ADDR_EXP 54
11761: PUSH
11762: LD_INT 0
11764: ST_TO_ADDR
// def_builduptime := 1 ;
11765: LD_ADDR_EXP 55
11769: PUSH
11770: LD_INT 1
11772: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
11773: LD_ADDR_VAR 0 2
11777: PUSH
11778: LD_INT 23
11780: PUSH
11781: EMPTY
11782: LIST
11783: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
11784: LD_ADDR_VAR 0 3
11788: PUSH
11789: LD_INT 2
11791: PUSH
11792: LD_INT 37
11794: PUSH
11795: LD_INT 32
11797: PUSH
11798: LD_INT 33
11800: PUSH
11801: LD_INT 36
11803: PUSH
11804: LD_INT 16
11806: PUSH
11807: LD_INT 23
11809: PUSH
11810: LD_INT 21
11812: PUSH
11813: LD_INT 18
11815: PUSH
11816: LD_INT 22
11818: PUSH
11819: LD_INT 20
11821: PUSH
11822: LD_INT 19
11824: PUSH
11825: LD_INT 25
11827: PUSH
11828: LD_INT 17
11830: PUSH
11831: LD_INT 24
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11851: LD_ADDR_LOC 22
11855: PUSH
11856: EMPTY
11857: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11858: LD_ADDR_LOC 23
11862: PUSH
11863: EMPTY
11864: ST_TO_ADDR
// Banned_Controls := [ ] ;
11865: LD_ADDR_LOC 24
11869: PUSH
11870: EMPTY
11871: ST_TO_ADDR
// Banned_Engines := [ ] ;
11872: LD_ADDR_LOC 25
11876: PUSH
11877: EMPTY
11878: ST_TO_ADDR
// Restricted_Builds := [ ] ;
11879: LD_ADDR_LOC 20
11883: PUSH
11884: EMPTY
11885: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
11886: LD_ADDR_LOC 21
11890: PUSH
11891: EMPTY
11892: ST_TO_ADDR
// No_Mechs := true ;
11893: LD_ADDR_EXP 58
11897: PUSH
11898: LD_INT 1
11900: ST_TO_ADDR
// end ; 4 :
11901: GO 13169
11903: LD_INT 4
11905: DOUBLE
11906: EQUAL
11907: IFTRUE 11911
11909: GO 12086
11911: POP
// begin def_base_level := 1 ;
11912: LD_ADDR_EXP 42
11916: PUSH
11917: LD_INT 1
11919: ST_TO_ADDR
// def_amount_of_people := 2 ;
11920: LD_ADDR_EXP 43
11924: PUSH
11925: LD_INT 2
11927: ST_TO_ADDR
// def_skill_level := 3 ;
11928: LD_ADDR_EXP 44
11932: PUSH
11933: LD_INT 3
11935: ST_TO_ADDR
// def_starting_resources := 3 ;
11936: LD_ADDR_EXP 45
11940: PUSH
11941: LD_INT 3
11943: ST_TO_ADDR
// def_shipments_density := 2 ;
11944: LD_ADDR_EXP 46
11948: PUSH
11949: LD_INT 2
11951: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
11952: LD_ADDR_EXP 47
11956: PUSH
11957: LD_INT 1
11959: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
11960: LD_ADDR_EXP 48
11964: PUSH
11965: LD_INT 2
11967: ST_TO_ADDR
// def_shared_vision := 1 ;
11968: LD_ADDR_EXP 49
11972: PUSH
11973: LD_INT 1
11975: ST_TO_ADDR
// def_morale_flags := 0 ;
11976: LD_ADDR_EXP 50
11980: PUSH
11981: LD_INT 0
11983: ST_TO_ADDR
// def_siberite_detection := 1 ;
11984: LD_ADDR_EXP 51
11988: PUSH
11989: LD_INT 1
11991: ST_TO_ADDR
// def_people_respawning := 0 ;
11992: LD_ADDR_EXP 52
11996: PUSH
11997: LD_INT 0
11999: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
12000: LD_ADDR_EXP 53
12004: PUSH
12005: LD_INT 0
12007: ST_TO_ADDR
// def_siberite_bomb := 1 ;
12008: LD_ADDR_EXP 54
12012: PUSH
12013: LD_INT 1
12015: ST_TO_ADDR
// def_builduptime := 3 ;
12016: LD_ADDR_EXP 55
12020: PUSH
12021: LD_INT 3
12023: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
12024: LD_ADDR_VAR 0 2
12028: PUSH
12029: LD_INT 1
12031: PUSH
12032: EMPTY
12033: LIST
12034: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
12035: LD_ADDR_VAR 0 3
12039: PUSH
12040: EMPTY
12041: ST_TO_ADDR
// Banned_Weapons := [ ] ;
12042: LD_ADDR_LOC 22
12046: PUSH
12047: EMPTY
12048: ST_TO_ADDR
// Banned_Chassis := [ ] ;
12049: LD_ADDR_LOC 23
12053: PUSH
12054: EMPTY
12055: ST_TO_ADDR
// Banned_Controls := [ ] ;
12056: LD_ADDR_LOC 24
12060: PUSH
12061: EMPTY
12062: ST_TO_ADDR
// Banned_Engines := [ ] ;
12063: LD_ADDR_LOC 25
12067: PUSH
12068: EMPTY
12069: ST_TO_ADDR
// Restricted_Builds := [ ] ;
12070: LD_ADDR_LOC 20
12074: PUSH
12075: EMPTY
12076: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
12077: LD_ADDR_LOC 21
12081: PUSH
12082: EMPTY
12083: ST_TO_ADDR
// end ; 5 :
12084: GO 13169
12086: LD_INT 5
12088: DOUBLE
12089: EQUAL
12090: IFTRUE 12094
12092: GO 12343
12094: POP
// begin def_base_level := 0 ;
12095: LD_ADDR_EXP 42
12099: PUSH
12100: LD_INT 0
12102: ST_TO_ADDR
// def_amount_of_people := 0 ;
12103: LD_ADDR_EXP 43
12107: PUSH
12108: LD_INT 0
12110: ST_TO_ADDR
// def_skill_level := 0 ;
12111: LD_ADDR_EXP 44
12115: PUSH
12116: LD_INT 0
12118: ST_TO_ADDR
// def_starting_resources := 0 ;
12119: LD_ADDR_EXP 45
12123: PUSH
12124: LD_INT 0
12126: ST_TO_ADDR
// def_shipments_density := 0 ;
12127: LD_ADDR_EXP 46
12131: PUSH
12132: LD_INT 0
12134: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
12135: LD_ADDR_EXP 47
12139: PUSH
12140: LD_INT 0
12142: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
12143: LD_ADDR_EXP 48
12147: PUSH
12148: LD_INT 0
12150: ST_TO_ADDR
// def_shared_vision := 1 ;
12151: LD_ADDR_EXP 49
12155: PUSH
12156: LD_INT 1
12158: ST_TO_ADDR
// def_morale_flags := 0 ;
12159: LD_ADDR_EXP 50
12163: PUSH
12164: LD_INT 0
12166: ST_TO_ADDR
// def_siberite_detection := 0 ;
12167: LD_ADDR_EXP 51
12171: PUSH
12172: LD_INT 0
12174: ST_TO_ADDR
// def_people_respawning := 1 ;
12175: LD_ADDR_EXP 52
12179: PUSH
12180: LD_INT 1
12182: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
12183: LD_ADDR_EXP 53
12187: PUSH
12188: LD_INT 1
12190: ST_TO_ADDR
// def_siberite_bomb := 0 ;
12191: LD_ADDR_EXP 54
12195: PUSH
12196: LD_INT 0
12198: ST_TO_ADDR
// def_builduptime := 0 ;
12199: LD_ADDR_EXP 55
12203: PUSH
12204: LD_INT 0
12206: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
12207: LD_ADDR_VAR 0 2
12211: PUSH
12212: LD_INT 10
12214: PUSH
12215: LD_INT 3
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
12222: LD_ADDR_VAR 0 3
12226: PUSH
12227: LD_INT 12
12229: PUSH
12230: LD_INT 11
12232: PUSH
12233: LD_INT 14
12235: PUSH
12236: LD_INT 13
12238: PUSH
12239: LD_INT 5
12241: PUSH
12242: LD_INT 24
12244: PUSH
12245: LD_INT 21
12247: PUSH
12248: LD_INT 33
12250: PUSH
12251: LD_INT 36
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
12265: LD_ADDR_LOC 22
12269: PUSH
12270: LD_INT 31
12272: PUSH
12273: EMPTY
12274: LIST
12275: ST_TO_ADDR
// Banned_Chassis := [ ] ;
12276: LD_ADDR_LOC 23
12280: PUSH
12281: EMPTY
12282: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
12283: LD_ADDR_LOC 24
12287: PUSH
12288: LD_INT 2
12290: PUSH
12291: EMPTY
12292: LIST
12293: ST_TO_ADDR
// Banned_Engines := [ ] ;
12294: LD_ADDR_LOC 25
12298: PUSH
12299: EMPTY
12300: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
12301: LD_ADDR_LOC 20
12305: PUSH
12306: LD_INT 4
12308: PUSH
12309: EMPTY
12310: LIST
12311: PUSH
12312: LD_INT 31
12314: PUSH
12315: LD_INT 32
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
12326: LD_ADDR_LOC 21
12330: PUSH
12331: LD_INT 1
12333: PUSH
12334: LD_INT 1
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: ST_TO_ADDR
// end ; 6 :
12341: GO 13169
12343: LD_INT 6
12345: DOUBLE
12346: EQUAL
12347: IFTRUE 12351
12349: GO 12554
12351: POP
// begin def_base_level := 1 ;
12352: LD_ADDR_EXP 42
12356: PUSH
12357: LD_INT 1
12359: ST_TO_ADDR
// def_amount_of_people := 2 ;
12360: LD_ADDR_EXP 43
12364: PUSH
12365: LD_INT 2
12367: ST_TO_ADDR
// def_skill_level := 3 ;
12368: LD_ADDR_EXP 44
12372: PUSH
12373: LD_INT 3
12375: ST_TO_ADDR
// def_starting_resources := 3 ;
12376: LD_ADDR_EXP 45
12380: PUSH
12381: LD_INT 3
12383: ST_TO_ADDR
// def_shipments_density := 1 ;
12384: LD_ADDR_EXP 46
12388: PUSH
12389: LD_INT 1
12391: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
12392: LD_ADDR_EXP 47
12396: PUSH
12397: LD_INT 0
12399: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
12400: LD_ADDR_EXP 48
12404: PUSH
12405: LD_INT 1
12407: ST_TO_ADDR
// def_shared_vision := 1 ;
12408: LD_ADDR_EXP 49
12412: PUSH
12413: LD_INT 1
12415: ST_TO_ADDR
// def_morale_flags := 0 ;
12416: LD_ADDR_EXP 50
12420: PUSH
12421: LD_INT 0
12423: ST_TO_ADDR
// def_siberite_detection := 1 ;
12424: LD_ADDR_EXP 51
12428: PUSH
12429: LD_INT 1
12431: ST_TO_ADDR
// def_people_respawning := 2 ;
12432: LD_ADDR_EXP 52
12436: PUSH
12437: LD_INT 2
12439: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
12440: LD_ADDR_EXP 53
12444: PUSH
12445: LD_INT 1
12447: ST_TO_ADDR
// def_siberite_bomb := 0 ;
12448: LD_ADDR_EXP 54
12452: PUSH
12453: LD_INT 0
12455: ST_TO_ADDR
// def_builduptime := 1 ;
12456: LD_ADDR_EXP 55
12460: PUSH
12461: LD_INT 1
12463: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
12464: LD_ADDR_VAR 0 2
12468: PUSH
12469: LD_INT 23
12471: PUSH
12472: EMPTY
12473: LIST
12474: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
12475: LD_ADDR_VAR 0 3
12479: PUSH
12480: LD_INT 2
12482: PUSH
12483: LD_INT 37
12485: PUSH
12486: LD_INT 31
12488: PUSH
12489: LD_INT 32
12491: PUSH
12492: LD_INT 33
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: ST_TO_ADDR
// Banned_Weapons := [ ] ;
12502: LD_ADDR_LOC 22
12506: PUSH
12507: EMPTY
12508: ST_TO_ADDR
// Banned_Chassis := [ ] ;
12509: LD_ADDR_LOC 23
12513: PUSH
12514: EMPTY
12515: ST_TO_ADDR
// Banned_Controls := [ ] ;
12516: LD_ADDR_LOC 24
12520: PUSH
12521: EMPTY
12522: ST_TO_ADDR
// Banned_Engines := [ ] ;
12523: LD_ADDR_LOC 25
12527: PUSH
12528: EMPTY
12529: ST_TO_ADDR
// Restricted_Builds := [ ] ;
12530: LD_ADDR_LOC 20
12534: PUSH
12535: EMPTY
12536: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
12537: LD_ADDR_LOC 21
12541: PUSH
12542: EMPTY
12543: ST_TO_ADDR
// No_Mechs := true ;
12544: LD_ADDR_EXP 58
12548: PUSH
12549: LD_INT 1
12551: ST_TO_ADDR
// end ; 7 :
12552: GO 13169
12554: LD_INT 7
12556: DOUBLE
12557: EQUAL
12558: IFTRUE 12562
12560: GO 12760
12562: POP
// begin def_base_level := 1 ;
12563: LD_ADDR_EXP 42
12567: PUSH
12568: LD_INT 1
12570: ST_TO_ADDR
// def_amount_of_people := 2 ;
12571: LD_ADDR_EXP 43
12575: PUSH
12576: LD_INT 2
12578: ST_TO_ADDR
// def_skill_level := 3 ;
12579: LD_ADDR_EXP 44
12583: PUSH
12584: LD_INT 3
12586: ST_TO_ADDR
// def_starting_resources := 3 ;
12587: LD_ADDR_EXP 45
12591: PUSH
12592: LD_INT 3
12594: ST_TO_ADDR
// def_shipments_density := 1 ;
12595: LD_ADDR_EXP 46
12599: PUSH
12600: LD_INT 1
12602: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
12603: LD_ADDR_EXP 47
12607: PUSH
12608: LD_INT 1
12610: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
12611: LD_ADDR_EXP 48
12615: PUSH
12616: LD_INT 2
12618: ST_TO_ADDR
// def_shared_vision := 1 ;
12619: LD_ADDR_EXP 49
12623: PUSH
12624: LD_INT 1
12626: ST_TO_ADDR
// def_morale_flags := 0 ;
12627: LD_ADDR_EXP 50
12631: PUSH
12632: LD_INT 0
12634: ST_TO_ADDR
// def_siberite_detection := 1 ;
12635: LD_ADDR_EXP 51
12639: PUSH
12640: LD_INT 1
12642: ST_TO_ADDR
// def_people_respawning := 0 ;
12643: LD_ADDR_EXP 52
12647: PUSH
12648: LD_INT 0
12650: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
12651: LD_ADDR_EXP 53
12655: PUSH
12656: LD_INT 1
12658: ST_TO_ADDR
// def_siberite_bomb := 0 ;
12659: LD_ADDR_EXP 54
12663: PUSH
12664: LD_INT 0
12666: ST_TO_ADDR
// def_builduptime := 3 ;
12667: LD_ADDR_EXP 55
12671: PUSH
12672: LD_INT 3
12674: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
12675: LD_ADDR_VAR 0 2
12679: PUSH
12680: LD_INT 23
12682: PUSH
12683: EMPTY
12684: LIST
12685: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
12686: LD_ADDR_VAR 0 3
12690: PUSH
12691: LD_INT 37
12693: PUSH
12694: EMPTY
12695: LIST
12696: ST_TO_ADDR
// Banned_Weapons := [ ] ;
12697: LD_ADDR_LOC 22
12701: PUSH
12702: EMPTY
12703: ST_TO_ADDR
// Banned_Chassis := [ ] ;
12704: LD_ADDR_LOC 23
12708: PUSH
12709: EMPTY
12710: ST_TO_ADDR
// Banned_Controls := [ ] ;
12711: LD_ADDR_LOC 24
12715: PUSH
12716: EMPTY
12717: ST_TO_ADDR
// Banned_Engines := [ ] ;
12718: LD_ADDR_LOC 25
12722: PUSH
12723: EMPTY
12724: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
12725: LD_ADDR_LOC 20
12729: PUSH
12730: LD_INT 31
12732: PUSH
12733: LD_INT 32
12735: PUSH
12736: LD_INT 33
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: LIST
12743: PUSH
12744: EMPTY
12745: LIST
12746: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
12747: LD_ADDR_LOC 21
12751: PUSH
12752: LD_INT 10
12754: PUSH
12755: EMPTY
12756: LIST
12757: ST_TO_ADDR
// end ; 8 :
12758: GO 13169
12760: LD_INT 8
12762: DOUBLE
12763: EQUAL
12764: IFTRUE 12768
12766: GO 13168
12768: POP
// begin def_base_level := 0 ;
12769: LD_ADDR_EXP 42
12773: PUSH
12774: LD_INT 0
12776: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
12777: LD_ADDR_EXP 43
12781: PUSH
12782: LD_INT 0
12784: PPUSH
12785: LD_INT 1
12787: PPUSH
12788: CALL_OW 12
12792: ST_TO_ADDR
// def_skill_level := 0 ;
12793: LD_ADDR_EXP 44
12797: PUSH
12798: LD_INT 0
12800: ST_TO_ADDR
// def_starting_resources := 2 ;
12801: LD_ADDR_EXP 45
12805: PUSH
12806: LD_INT 2
12808: ST_TO_ADDR
// def_shipments_density := 1 ;
12809: LD_ADDR_EXP 46
12813: PUSH
12814: LD_INT 1
12816: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
12817: LD_ADDR_EXP 47
12821: PUSH
12822: LD_INT 0
12824: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
12825: LD_ADDR_EXP 48
12829: PUSH
12830: LD_INT 0
12832: ST_TO_ADDR
// def_shared_vision := 1 ;
12833: LD_ADDR_EXP 49
12837: PUSH
12838: LD_INT 1
12840: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
12841: LD_ADDR_EXP 50
12845: PUSH
12846: LD_INT 0
12848: PPUSH
12849: LD_INT 2
12851: PPUSH
12852: CALL_OW 12
12856: ST_TO_ADDR
// def_siberite_detection := 0 ;
12857: LD_ADDR_EXP 51
12861: PUSH
12862: LD_INT 0
12864: ST_TO_ADDR
// def_people_respawning := 0 ;
12865: LD_ADDR_EXP 52
12869: PUSH
12870: LD_INT 0
12872: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
12873: LD_ADDR_EXP 53
12877: PUSH
12878: LD_INT 2
12880: ST_TO_ADDR
// def_siberite_bomb := 0 ;
12881: LD_ADDR_EXP 54
12885: PUSH
12886: LD_INT 0
12888: ST_TO_ADDR
// def_builduptime := 0 ;
12889: LD_ADDR_EXP 55
12893: PUSH
12894: LD_INT 0
12896: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
12897: LD_ADDR_VAR 0 2
12901: PUSH
12902: LD_INT 23
12904: PUSH
12905: LD_INT 20
12907: PUSH
12908: LD_INT 40
12910: PUSH
12911: LD_INT 47
12913: PUSH
12914: LD_INT 46
12916: PUSH
12917: LD_INT 39
12919: PUSH
12920: LD_INT 71
12922: PUSH
12923: LD_INT 34
12925: PUSH
12926: LD_INT 41
12928: PUSH
12929: LD_INT 44
12931: PUSH
12932: LD_INT 17
12934: PUSH
12935: LD_INT 16
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
12952: LD_ADDR_VAR 0 3
12956: PUSH
12957: LD_INT 37
12959: PUSH
12960: LD_INT 5
12962: PUSH
12963: LD_INT 13
12965: PUSH
12966: LD_INT 34
12968: PUSH
12969: LD_INT 12
12971: PUSH
12972: LD_INT 15
12974: PUSH
12975: LD_INT 11
12977: PUSH
12978: LD_INT 14
12980: PUSH
12981: LD_INT 29
12983: PUSH
12984: LD_INT 30
12986: PUSH
12987: LD_INT 28
12989: PUSH
12990: LD_INT 24
12992: PUSH
12993: LD_INT 25
12995: PUSH
12996: LD_INT 20
12998: PUSH
12999: LD_INT 21
13001: PUSH
13002: LD_INT 22
13004: PUSH
13005: LD_INT 36
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13027: LD_ADDR_LOC 22
13031: PUSH
13032: EMPTY
13033: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
13034: LD_ADDR_LOC 23
13038: PUSH
13039: LD_INT 14
13041: PUSH
13042: EMPTY
13043: LIST
13044: ST_TO_ADDR
// Banned_Controls := [ ] ;
13045: LD_ADDR_LOC 24
13049: PUSH
13050: EMPTY
13051: ST_TO_ADDR
// Banned_Engines := [ ] ;
13052: LD_ADDR_LOC 25
13056: PUSH
13057: EMPTY
13058: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
13059: LD_ADDR_LOC 20
13063: PUSH
13064: LD_INT 31
13066: PUSH
13067: LD_INT 32
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: PUSH
13074: LD_INT 4
13076: PUSH
13077: EMPTY
13078: LIST
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
13084: LD_ADDR_LOC 21
13088: PUSH
13089: LD_INT 2
13091: PUSH
13092: LD_INT 1
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: ST_TO_ADDR
// for i := 1 to 8 do
13099: LD_ADDR_VAR 0 4
13103: PUSH
13104: DOUBLE
13105: LD_INT 1
13107: DEC
13108: ST_TO_ADDR
13109: LD_INT 8
13111: PUSH
13112: FOR_TO
13113: IFFALSE 13164
// if ( Side_Nations [ i ] = 3 ) then
13115: LD_EXP 19
13119: PUSH
13120: LD_VAR 0 4
13124: ARRAY
13125: PUSH
13126: LD_INT 3
13128: EQUAL
13129: IFFALSE 13162
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
13131: LD_ADDR_EXP 19
13135: PUSH
13136: LD_EXP 19
13140: PPUSH
13141: LD_VAR 0 4
13145: PPUSH
13146: LD_INT 1
13148: PPUSH
13149: LD_INT 2
13151: PPUSH
13152: CALL_OW 12
13156: PPUSH
13157: CALL_OW 1
13161: ST_TO_ADDR
13162: GO 13112
13164: POP
13165: POP
// end ; end ;
13166: GO 13169
13168: POP
// for i := 1 to 8 do
13169: LD_ADDR_VAR 0 4
13173: PUSH
13174: DOUBLE
13175: LD_INT 1
13177: DEC
13178: ST_TO_ADDR
13179: LD_INT 8
13181: PUSH
13182: FOR_TO
13183: IFFALSE 13267
// if Side_Positions [ i ] then
13185: LD_EXP 18
13189: PUSH
13190: LD_VAR 0 4
13194: ARRAY
13195: IFFALSE 13265
// begin for j in Unavailable_Techs do
13197: LD_ADDR_VAR 0 5
13201: PUSH
13202: LD_VAR 0 2
13206: PUSH
13207: FOR_IN
13208: IFFALSE 13229
// SetTech ( j , i , 0 ) ;
13210: LD_VAR 0 5
13214: PPUSH
13215: LD_VAR 0 4
13219: PPUSH
13220: LD_INT 0
13222: PPUSH
13223: CALL_OW 322
13227: GO 13207
13229: POP
13230: POP
// for j in Unavailable_Builds do
13231: LD_ADDR_VAR 0 5
13235: PUSH
13236: LD_VAR 0 3
13240: PUSH
13241: FOR_IN
13242: IFFALSE 13263
// SetRestrict ( j , i , 0 ) ;
13244: LD_VAR 0 5
13248: PPUSH
13249: LD_VAR 0 4
13253: PPUSH
13254: LD_INT 0
13256: PPUSH
13257: CALL_OW 324
13261: GO 13241
13263: POP
13264: POP
// end ;
13265: GO 13182
13267: POP
13268: POP
// end ;
13269: LD_VAR 0 1
13273: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
13274: LD_INT 0
13276: PPUSH
13277: PPUSH
13278: PPUSH
13279: PPUSH
13280: PPUSH
13281: PPUSH
13282: PPUSH
// for i := 1 to Restricted_Builds do
13283: LD_ADDR_VAR 0 2
13287: PUSH
13288: DOUBLE
13289: LD_INT 1
13291: DEC
13292: ST_TO_ADDR
13293: LD_LOC 20
13297: PUSH
13298: FOR_TO
13299: IFFALSE 13609
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
13301: LD_LOC 20
13305: PUSH
13306: LD_VAR 0 2
13310: ARRAY
13311: PUSH
13312: LD_INT 1
13314: ARRAY
13315: PUSH
13316: LD_INT 31
13318: DOUBLE
13319: EQUAL
13320: IFTRUE 13336
13322: LD_INT 32
13324: DOUBLE
13325: EQUAL
13326: IFTRUE 13336
13328: LD_INT 33
13330: DOUBLE
13331: EQUAL
13332: IFTRUE 13336
13334: GO 13347
13336: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
13337: LD_ADDR_VAR 0 6
13341: PUSH
13342: LD_STRING #Turrets
13344: ST_TO_ADDR
13345: GO 13392
13347: LD_INT 4
13349: DOUBLE
13350: EQUAL
13351: IFTRUE 13361
13353: LD_INT 5
13355: DOUBLE
13356: EQUAL
13357: IFTRUE 13361
13359: GO 13372
13361: POP
// btype := #Armouries ; b_Behemoth :
13362: LD_ADDR_VAR 0 6
13366: PUSH
13367: LD_STRING #Armouries
13369: ST_TO_ADDR
13370: GO 13392
13372: LD_INT 37
13374: DOUBLE
13375: EQUAL
13376: IFTRUE 13380
13378: GO 13391
13380: POP
// btype := #Behemoths ; end ;
13381: LD_ADDR_VAR 0 6
13385: PUSH
13386: LD_STRING #Behemoths
13388: ST_TO_ADDR
13389: GO 13392
13391: POP
// list := [ ] ;
13392: LD_ADDR_VAR 0 7
13396: PUSH
13397: EMPTY
13398: ST_TO_ADDR
// for j := 1 to 8 do
13399: LD_ADDR_VAR 0 3
13403: PUSH
13404: DOUBLE
13405: LD_INT 1
13407: DEC
13408: ST_TO_ADDR
13409: LD_INT 8
13411: PUSH
13412: FOR_TO
13413: IFFALSE 13506
// if Side_Positions [ j ] then
13415: LD_EXP 18
13419: PUSH
13420: LD_VAR 0 3
13424: ARRAY
13425: IFFALSE 13504
// begin amount := 0 ;
13427: LD_ADDR_VAR 0 5
13431: PUSH
13432: LD_INT 0
13434: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
13435: LD_ADDR_VAR 0 4
13439: PUSH
13440: LD_LOC 20
13444: PUSH
13445: LD_VAR 0 2
13449: ARRAY
13450: PUSH
13451: FOR_IN
13452: IFFALSE 13500
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
13454: LD_ADDR_VAR 0 5
13458: PUSH
13459: LD_VAR 0 5
13463: PUSH
13464: LD_INT 22
13466: PUSH
13467: LD_VAR 0 3
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: PUSH
13476: LD_INT 30
13478: PUSH
13479: LD_VAR 0 4
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: PPUSH
13492: CALL_OW 69
13496: PLUS
13497: ST_TO_ADDR
13498: GO 13451
13500: POP
13501: POP
// break ;
13502: GO 13506
// end ;
13504: GO 13412
13506: POP
13507: POP
// list := [ ] ;
13508: LD_ADDR_VAR 0 7
13512: PUSH
13513: EMPTY
13514: ST_TO_ADDR
// for j := 1 to 8 do
13515: LD_ADDR_VAR 0 3
13519: PUSH
13520: DOUBLE
13521: LD_INT 1
13523: DEC
13524: ST_TO_ADDR
13525: LD_INT 8
13527: PUSH
13528: FOR_TO
13529: IFFALSE 13549
// list := list ^ amount ;
13531: LD_ADDR_VAR 0 7
13535: PUSH
13536: LD_VAR 0 7
13540: PUSH
13541: LD_VAR 0 5
13545: ADD
13546: ST_TO_ADDR
13547: GO 13528
13549: POP
13550: POP
// Already_Built := Already_Built ^ [ list ] ;
13551: LD_ADDR_LOC 26
13555: PUSH
13556: LD_LOC 26
13560: PUSH
13561: LD_VAR 0 7
13565: PUSH
13566: EMPTY
13567: LIST
13568: ADD
13569: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
13570: LD_ADDR_LOC 27
13574: PUSH
13575: LD_LOC 27
13579: PUSH
13580: LD_VAR 0 6
13584: PUSH
13585: LD_VAR 0 5
13589: PUSH
13590: LD_LOC 21
13594: PUSH
13595: LD_VAR 0 2
13599: ARRAY
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: LIST
13605: ADD
13606: ST_TO_ADDR
// end ;
13607: GO 13298
13609: POP
13610: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13611: LD_ADDR_LOC 28
13615: PUSH
13616: LD_INT 0
13618: PUSH
13619: LD_INT 0
13621: PUSH
13622: LD_INT 0
13624: PUSH
13625: LD_INT 0
13627: PUSH
13628: LD_INT 0
13630: PUSH
13631: LD_INT 0
13633: PUSH
13634: LD_INT 0
13636: PUSH
13637: LD_INT 0
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: ST_TO_ADDR
// if Limits_Info then
13650: LD_LOC 27
13654: IFFALSE 13670
// Limits_Info := #Limits ^ Limits_Info ;
13656: LD_ADDR_LOC 27
13660: PUSH
13661: LD_STRING #Limits
13663: PUSH
13664: LD_LOC 27
13668: ADD
13669: ST_TO_ADDR
// end ;
13670: LD_VAR 0 1
13674: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
13675: LD_INT 0
13677: PPUSH
13678: PPUSH
13679: PPUSH
13680: PPUSH
// for i := 1 to Restricted_Builds do
13681: LD_ADDR_VAR 0 7
13685: PUSH
13686: DOUBLE
13687: LD_INT 1
13689: DEC
13690: ST_TO_ADDR
13691: LD_LOC 20
13695: PUSH
13696: FOR_TO
13697: IFFALSE 14120
// if BType in Restricted_Builds [ i ] then
13699: LD_VAR 0 2
13703: PUSH
13704: LD_LOC 20
13708: PUSH
13709: LD_VAR 0 7
13713: ARRAY
13714: IN
13715: IFFALSE 14118
// begin if old_side then
13717: LD_VAR 0 4
13721: IFFALSE 13847
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
13723: LD_LOC 26
13727: PUSH
13728: LD_VAR 0 7
13732: ARRAY
13733: PUSH
13734: LD_VAR 0 3
13738: ARRAY
13739: PUSH
13740: LD_VAR 0 5
13744: PLUS
13745: PUSH
13746: LD_LOC 21
13750: PUSH
13751: LD_VAR 0 7
13755: ARRAY
13756: GREATER
13757: IFFALSE 13783
// begin SetSide ( un , old_side ) ;
13759: LD_VAR 0 1
13763: PPUSH
13764: LD_VAR 0 4
13768: PPUSH
13769: CALL_OW 235
// count := 0 ;
13773: LD_ADDR_VAR 0 5
13777: PUSH
13778: LD_INT 0
13780: ST_TO_ADDR
// end else
13781: GO 13847
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
13783: LD_ADDR_LOC 26
13787: PUSH
13788: LD_LOC 26
13792: PPUSH
13793: LD_VAR 0 7
13797: PPUSH
13798: LD_LOC 26
13802: PUSH
13803: LD_VAR 0 7
13807: ARRAY
13808: PPUSH
13809: LD_VAR 0 4
13813: PPUSH
13814: LD_LOC 26
13818: PUSH
13819: LD_VAR 0 7
13823: ARRAY
13824: PUSH
13825: LD_VAR 0 4
13829: ARRAY
13830: PUSH
13831: LD_VAR 0 5
13835: MINUS
13836: PPUSH
13837: CALL_OW 1
13841: PPUSH
13842: CALL_OW 1
13846: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
13847: LD_ADDR_LOC 26
13851: PUSH
13852: LD_LOC 26
13856: PPUSH
13857: LD_VAR 0 7
13861: PPUSH
13862: LD_LOC 26
13866: PUSH
13867: LD_VAR 0 7
13871: ARRAY
13872: PPUSH
13873: LD_VAR 0 3
13877: PPUSH
13878: LD_LOC 26
13882: PUSH
13883: LD_VAR 0 7
13887: ARRAY
13888: PUSH
13889: LD_VAR 0 3
13893: ARRAY
13894: PUSH
13895: LD_VAR 0 5
13899: PLUS
13900: PPUSH
13901: CALL_OW 1
13905: PPUSH
13906: CALL_OW 1
13910: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
13911: LD_VAR 0 5
13915: PUSH
13916: LD_INT 0
13918: NONEQUAL
13919: PUSH
13920: LD_VAR 0 3
13924: PUSH
13925: LD_OWVAR 2
13929: EQUAL
13930: AND
13931: IFFALSE 13974
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
13933: LD_ADDR_LOC 27
13937: PUSH
13938: LD_LOC 27
13942: PPUSH
13943: LD_INT 3
13945: PUSH
13946: LD_VAR 0 7
13950: MUL
13951: PPUSH
13952: LD_LOC 26
13956: PUSH
13957: LD_VAR 0 7
13961: ARRAY
13962: PUSH
13963: LD_VAR 0 3
13967: ARRAY
13968: PPUSH
13969: CALL_OW 1
13973: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
13974: LD_LOC 26
13978: PUSH
13979: LD_VAR 0 7
13983: ARRAY
13984: PUSH
13985: LD_VAR 0 3
13989: ARRAY
13990: PUSH
13991: LD_LOC 21
13995: PUSH
13996: LD_VAR 0 7
14000: ARRAY
14001: GREATER
14002: IFFALSE 14029
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
14004: LD_ADDR_LOC 28
14008: PUSH
14009: LD_LOC 28
14013: PPUSH
14014: LD_VAR 0 3
14018: PPUSH
14019: LD_INT 1
14021: PPUSH
14022: CALL_OW 1
14026: ST_TO_ADDR
// end else
14027: GO 14116
// begin for j := 1 to Restricted_Builds do
14029: LD_ADDR_VAR 0 8
14033: PUSH
14034: DOUBLE
14035: LD_INT 1
14037: DEC
14038: ST_TO_ADDR
14039: LD_LOC 20
14043: PUSH
14044: FOR_TO
14045: IFFALSE 14089
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
14047: LD_LOC 26
14051: PUSH
14052: LD_VAR 0 8
14056: ARRAY
14057: PUSH
14058: LD_VAR 0 3
14062: ARRAY
14063: PUSH
14064: LD_LOC 21
14068: PUSH
14069: LD_VAR 0 8
14073: ARRAY
14074: GREATER
14075: IFFALSE 14087
// begin Is_Cheater := true ;
14077: LD_ADDR_VAR 0 9
14081: PUSH
14082: LD_INT 1
14084: ST_TO_ADDR
// break ;
14085: GO 14089
// end ;
14087: GO 14044
14089: POP
14090: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
14091: LD_ADDR_LOC 28
14095: PUSH
14096: LD_LOC 28
14100: PPUSH
14101: LD_VAR 0 3
14105: PPUSH
14106: LD_VAR 0 9
14110: PPUSH
14111: CALL_OW 1
14115: ST_TO_ADDR
// end ; break ;
14116: GO 14120
// end ;
14118: GO 13696
14120: POP
14121: POP
// end ;
14122: LD_VAR 0 6
14126: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
14127: LD_VAR 0 5
14131: PUSH
14132: LD_LOC 22
14136: IN
14137: PUSH
14138: LD_VAR 0 2
14142: PUSH
14143: LD_LOC 23
14147: IN
14148: OR
14149: PUSH
14150: LD_VAR 0 4
14154: PUSH
14155: LD_LOC 24
14159: IN
14160: OR
14161: PUSH
14162: LD_VAR 0 3
14166: PUSH
14167: LD_LOC 25
14171: IN
14172: OR
14173: IFFALSE 14184
// ComCancel ( factory ) ;
14175: LD_VAR 0 1
14179: PPUSH
14180: CALL_OW 127
// end ;
14184: PPOPN 5
14186: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
14187: LD_VAR 0 2
14191: PUSH
14192: LD_LOC 22
14196: IN
14197: IFFALSE 14208
// ComCancel ( building ) ;
14199: LD_VAR 0 1
14203: PPUSH
14204: CALL_OW 127
// end ; end_of_file
14208: PPOPN 2
14210: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
14211: LD_INT 0
14213: PPUSH
14214: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
14215: LD_ADDR_VAR 0 2
14219: PUSH
14220: LD_STRING #Multi1x1-Time
14222: PUSH
14223: LD_OWVAR 1
14227: PUSH
14228: EMPTY
14229: LIST
14230: LIST
14231: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
14232: LD_INT 0
14234: PUSH
14235: LD_EXP 15
14239: PUSH
14240: LD_OWVAR 1
14244: MINUS
14245: LESSEQUAL
14246: IFFALSE 14277
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
14248: LD_ADDR_VAR 0 2
14252: PUSH
14253: LD_VAR 0 2
14257: PUSH
14258: LD_STRING #allowedsibbomb
14260: PUSH
14261: LD_EXP 15
14265: PUSH
14266: LD_OWVAR 1
14270: MINUS
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: ADD
14276: ST_TO_ADDR
// if ( ExtraStrings ) then
14277: LD_EXP 59
14281: IFFALSE 14303
// AllStrings := AllStrings ^  ^ ExtraStrings ;
14283: LD_ADDR_VAR 0 2
14287: PUSH
14288: LD_VAR 0 2
14292: PUSH
14293: LD_STRING 
14295: ADD
14296: PUSH
14297: LD_EXP 59
14301: ADD
14302: ST_TO_ADDR
// if ( LimitsStrings ) then
14303: CALL 11051 0 0
14307: IFFALSE 14329
// AllStrings := AllStrings ^  ^ LimitsStrings ;
14309: LD_ADDR_VAR 0 2
14313: PUSH
14314: LD_VAR 0 2
14318: PUSH
14319: LD_STRING 
14321: ADD
14322: PUSH
14323: CALL 11051 0 0
14327: ADD
14328: ST_TO_ADDR
// Display_Strings := AllStrings ;
14329: LD_ADDR_OWVAR 47
14333: PUSH
14334: LD_VAR 0 2
14338: ST_TO_ADDR
// end ;
14339: LD_VAR 0 1
14343: RET
// every 0 0$1 do
14344: GO 14346
14346: DISABLE
// begin ShowTimer ;
14347: CALL 14211 0 0
// enable ;
14351: ENABLE
// end ; end_of_file
14352: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
14353: LD_INT 0
14355: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
14356: LD_VAR 0 1
14360: PPUSH
14361: CALL_OW 255
14365: PUSH
14366: LD_VAR 0 4
14370: EQUAL
14371: IFFALSE 14390
// begin SetAchievement ( ACH_RAD ) ;
14373: LD_STRING ACH_RAD
14375: PPUSH
14376: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
14380: LD_STRING ACH_NL
14382: PPUSH
14383: LD_INT 1
14385: PPUSH
14386: CALL_OW 564
// end end ;
14390: LD_VAR 0 5
14394: RET
// export function SA_Win ( side ) ; begin
14395: LD_INT 0
14397: PPUSH
// case side of 1 :
14398: LD_VAR 0 1
14402: PUSH
14403: LD_INT 1
14405: DOUBLE
14406: EQUAL
14407: IFTRUE 14411
14409: GO 14424
14411: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
14412: LD_STRING ACH_AH
14414: PPUSH
14415: LD_INT 1
14417: PPUSH
14418: CALL_OW 564
14422: GO 14587
14424: LD_INT 2
14426: DOUBLE
14427: EQUAL
14428: IFTRUE 14432
14430: GO 14445
14432: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
14433: LD_STRING ACH_E
14435: PPUSH
14436: LD_INT 1
14438: PPUSH
14439: CALL_OW 564
14443: GO 14587
14445: LD_INT 3
14447: DOUBLE
14448: EQUAL
14449: IFTRUE 14453
14451: GO 14466
14453: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
14454: LD_STRING ACH_OOL
14456: PPUSH
14457: LD_INT 1
14459: PPUSH
14460: CALL_OW 564
14464: GO 14587
14466: LD_INT 1
14468: PUSH
14469: LD_INT 2
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: DOUBLE
14476: EQUAL
14477: IFTRUE 14481
14479: GO 14506
14481: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
14482: LD_STRING ACH_AH
14484: PPUSH
14485: LD_REAL  5.00000000000000E-0001
14488: PPUSH
14489: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
14493: LD_STRING ACH_E
14495: PPUSH
14496: LD_REAL  5.00000000000000E-0001
14499: PPUSH
14500: CALL_OW 564
// end ; [ 2 , 3 ] :
14504: GO 14587
14506: LD_INT 2
14508: PUSH
14509: LD_INT 3
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: DOUBLE
14516: EQUAL
14517: IFTRUE 14521
14519: GO 14546
14521: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
14522: LD_STRING ACH_OOL
14524: PPUSH
14525: LD_REAL  5.00000000000000E-0001
14528: PPUSH
14529: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
14533: LD_STRING ACH_E
14535: PPUSH
14536: LD_REAL  5.00000000000000E-0001
14539: PPUSH
14540: CALL_OW 564
// end ; [ 3 , 1 ] :
14544: GO 14587
14546: LD_INT 3
14548: PUSH
14549: LD_INT 1
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: DOUBLE
14556: EQUAL
14557: IFTRUE 14561
14559: GO 14586
14561: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
14562: LD_STRING ACH_AH
14564: PPUSH
14565: LD_REAL  5.00000000000000E-0001
14568: PPUSH
14569: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
14573: LD_STRING ACH_OOL
14575: PPUSH
14576: LD_REAL  5.00000000000000E-0001
14579: PPUSH
14580: CALL_OW 564
// end ; end ;
14584: GO 14587
14586: POP
// end ; end_of_file
14587: LD_VAR 0 2
14591: RET
// export function SetMpTechs ( ) ; var side , i ; begin
14592: LD_INT 0
14594: PPUSH
14595: PPUSH
14596: PPUSH
// for side = 1 to 8 do
14597: LD_ADDR_VAR 0 2
14601: PUSH
14602: DOUBLE
14603: LD_INT 1
14605: DEC
14606: ST_TO_ADDR
14607: LD_INT 8
14609: PUSH
14610: FOR_TO
14611: IFFALSE 14732
// begin for i = 1 to 72 do
14613: LD_ADDR_VAR 0 3
14617: PUSH
14618: DOUBLE
14619: LD_INT 1
14621: DEC
14622: ST_TO_ADDR
14623: LD_INT 72
14625: PUSH
14626: FOR_TO
14627: IFFALSE 14658
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
14629: LD_VAR 0 3
14633: PPUSH
14634: LD_VAR 0 2
14638: PPUSH
14639: LD_INT 0
14641: PPUSH
14642: LD_VAR 0 3
14646: PPUSH
14647: CALL_OW 565
14651: PPUSH
14652: CALL_OW 322
14656: GO 14626
14658: POP
14659: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
14660: LD_INT 73
14662: PPUSH
14663: LD_VAR 0 2
14667: PPUSH
14668: LD_INT 0
14670: PPUSH
14671: LD_INT 25
14673: PPUSH
14674: CALL_OW 565
14678: PPUSH
14679: CALL_OW 322
// for i = 0 to 40 do
14683: LD_ADDR_VAR 0 3
14687: PUSH
14688: DOUBLE
14689: LD_INT 0
14691: DEC
14692: ST_TO_ADDR
14693: LD_INT 40
14695: PUSH
14696: FOR_TO
14697: IFFALSE 14728
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
14699: LD_VAR 0 3
14703: PPUSH
14704: LD_VAR 0 2
14708: PPUSH
14709: LD_INT 1
14711: PPUSH
14712: LD_VAR 0 3
14716: PPUSH
14717: CALL_OW 565
14721: PPUSH
14722: CALL_OW 324
14726: GO 14696
14728: POP
14729: POP
// end ;
14730: GO 14610
14732: POP
14733: POP
// end ;
14734: LD_VAR 0 1
14738: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
14739: LD_INT 0
14741: PPUSH
14742: PPUSH
14743: PPUSH
// for side = 1 to 8 do
14744: LD_ADDR_VAR 0 3
14748: PUSH
14749: DOUBLE
14750: LD_INT 1
14752: DEC
14753: ST_TO_ADDR
14754: LD_INT 8
14756: PUSH
14757: FOR_TO
14758: IFFALSE 18754
// begin for i = 1 to 73 do
14760: LD_ADDR_VAR 0 4
14764: PUSH
14765: DOUBLE
14766: LD_INT 1
14768: DEC
14769: ST_TO_ADDR
14770: LD_INT 73
14772: PUSH
14773: FOR_TO
14774: IFFALSE 14795
// SetTech ( i , side , state_disabled ) ;
14776: LD_VAR 0 4
14780: PPUSH
14781: LD_VAR 0 3
14785: PPUSH
14786: LD_INT 0
14788: PPUSH
14789: CALL_OW 322
14793: GO 14773
14795: POP
14796: POP
// for i = 0 to 40 do
14797: LD_ADDR_VAR 0 4
14801: PUSH
14802: DOUBLE
14803: LD_INT 0
14805: DEC
14806: ST_TO_ADDR
14807: LD_INT 40
14809: PUSH
14810: FOR_TO
14811: IFFALSE 14832
// SetRestrict ( i , side , false ) ;
14813: LD_VAR 0 4
14817: PPUSH
14818: LD_VAR 0 3
14822: PPUSH
14823: LD_INT 0
14825: PPUSH
14826: CALL_OW 324
14830: GO 14810
14832: POP
14833: POP
// case level of 1 :
14834: LD_VAR 0 1
14838: PUSH
14839: LD_INT 1
14841: DOUBLE
14842: EQUAL
14843: IFTRUE 14847
14845: GO 15000
14847: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14848: LD_INT 35
14850: PPUSH
14851: LD_VAR 0 3
14855: PPUSH
14856: LD_INT 1
14858: PPUSH
14859: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14863: LD_INT 45
14865: PPUSH
14866: LD_VAR 0 3
14870: PPUSH
14871: LD_INT 1
14873: PPUSH
14874: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14878: LD_INT 46
14880: PPUSH
14881: LD_VAR 0 3
14885: PPUSH
14886: LD_INT 1
14888: PPUSH
14889: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14893: LD_INT 47
14895: PPUSH
14896: LD_VAR 0 3
14900: PPUSH
14901: LD_INT 1
14903: PPUSH
14904: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14908: LD_INT 0
14910: PPUSH
14911: LD_VAR 0 3
14915: PPUSH
14916: LD_INT 1
14918: PPUSH
14919: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14923: LD_INT 2
14925: PPUSH
14926: LD_VAR 0 3
14930: PPUSH
14931: LD_INT 1
14933: PPUSH
14934: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14938: LD_INT 4
14940: PPUSH
14941: LD_VAR 0 3
14945: PPUSH
14946: LD_INT 1
14948: PPUSH
14949: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14953: LD_INT 6
14955: PPUSH
14956: LD_VAR 0 3
14960: PPUSH
14961: LD_INT 1
14963: PPUSH
14964: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14968: LD_INT 29
14970: PPUSH
14971: LD_VAR 0 3
14975: PPUSH
14976: LD_INT 1
14978: PPUSH
14979: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14983: LD_INT 31
14985: PPUSH
14986: LD_VAR 0 3
14990: PPUSH
14991: LD_INT 1
14993: PPUSH
14994: CALL_OW 324
// end ; 2 :
14998: GO 18752
15000: LD_INT 2
15002: DOUBLE
15003: EQUAL
15004: IFTRUE 15008
15006: GO 15206
15008: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15009: LD_INT 35
15011: PPUSH
15012: LD_VAR 0 3
15016: PPUSH
15017: LD_INT 1
15019: PPUSH
15020: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15024: LD_INT 45
15026: PPUSH
15027: LD_VAR 0 3
15031: PPUSH
15032: LD_INT 1
15034: PPUSH
15035: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15039: LD_INT 46
15041: PPUSH
15042: LD_VAR 0 3
15046: PPUSH
15047: LD_INT 1
15049: PPUSH
15050: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15054: LD_INT 47
15056: PPUSH
15057: LD_VAR 0 3
15061: PPUSH
15062: LD_INT 1
15064: PPUSH
15065: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15069: LD_INT 1
15071: PPUSH
15072: LD_VAR 0 3
15076: PPUSH
15077: LD_INT 1
15079: PPUSH
15080: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15084: LD_INT 2
15086: PPUSH
15087: LD_VAR 0 3
15091: PPUSH
15092: LD_INT 1
15094: PPUSH
15095: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15099: LD_INT 11
15101: PPUSH
15102: LD_VAR 0 3
15106: PPUSH
15107: LD_INT 1
15109: PPUSH
15110: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15114: LD_INT 0
15116: PPUSH
15117: LD_VAR 0 3
15121: PPUSH
15122: LD_INT 1
15124: PPUSH
15125: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15129: LD_INT 2
15131: PPUSH
15132: LD_VAR 0 3
15136: PPUSH
15137: LD_INT 1
15139: PPUSH
15140: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15144: LD_INT 4
15146: PPUSH
15147: LD_VAR 0 3
15151: PPUSH
15152: LD_INT 1
15154: PPUSH
15155: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15159: LD_INT 6
15161: PPUSH
15162: LD_VAR 0 3
15166: PPUSH
15167: LD_INT 1
15169: PPUSH
15170: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15174: LD_INT 29
15176: PPUSH
15177: LD_VAR 0 3
15181: PPUSH
15182: LD_INT 1
15184: PPUSH
15185: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15189: LD_INT 31
15191: PPUSH
15192: LD_VAR 0 3
15196: PPUSH
15197: LD_INT 1
15199: PPUSH
15200: CALL_OW 324
// end ; 3 :
15204: GO 18752
15206: LD_INT 3
15208: DOUBLE
15209: EQUAL
15210: IFTRUE 15214
15212: GO 15667
15214: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15215: LD_INT 35
15217: PPUSH
15218: LD_VAR 0 3
15222: PPUSH
15223: LD_INT 1
15225: PPUSH
15226: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15230: LD_INT 45
15232: PPUSH
15233: LD_VAR 0 3
15237: PPUSH
15238: LD_INT 1
15240: PPUSH
15241: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15245: LD_INT 46
15247: PPUSH
15248: LD_VAR 0 3
15252: PPUSH
15253: LD_INT 1
15255: PPUSH
15256: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15260: LD_INT 47
15262: PPUSH
15263: LD_VAR 0 3
15267: PPUSH
15268: LD_INT 1
15270: PPUSH
15271: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15275: LD_INT 1
15277: PPUSH
15278: LD_VAR 0 3
15282: PPUSH
15283: LD_INT 1
15285: PPUSH
15286: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15290: LD_INT 2
15292: PPUSH
15293: LD_VAR 0 3
15297: PPUSH
15298: LD_INT 1
15300: PPUSH
15301: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15305: LD_INT 11
15307: PPUSH
15308: LD_VAR 0 3
15312: PPUSH
15313: LD_INT 1
15315: PPUSH
15316: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15320: LD_INT 48
15322: PPUSH
15323: LD_VAR 0 3
15327: PPUSH
15328: LD_INT 1
15330: PPUSH
15331: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15335: LD_INT 69
15337: PPUSH
15338: LD_VAR 0 3
15342: PPUSH
15343: LD_INT 1
15345: PPUSH
15346: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15350: LD_INT 39
15352: PPUSH
15353: LD_VAR 0 3
15357: PPUSH
15358: LD_INT 1
15360: PPUSH
15361: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15365: LD_INT 43
15367: PPUSH
15368: LD_VAR 0 3
15372: PPUSH
15373: LD_INT 1
15375: PPUSH
15376: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15380: LD_INT 51
15382: PPUSH
15383: LD_VAR 0 3
15387: PPUSH
15388: LD_INT 1
15390: PPUSH
15391: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15395: LD_INT 6
15397: PPUSH
15398: LD_VAR 0 3
15402: PPUSH
15403: LD_INT 1
15405: PPUSH
15406: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15410: LD_INT 0
15412: PPUSH
15413: LD_VAR 0 3
15417: PPUSH
15418: LD_INT 1
15420: PPUSH
15421: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15425: LD_INT 2
15427: PPUSH
15428: LD_VAR 0 3
15432: PPUSH
15433: LD_INT 1
15435: PPUSH
15436: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
15440: LD_INT 3
15442: PPUSH
15443: LD_VAR 0 3
15447: PPUSH
15448: LD_INT 1
15450: PPUSH
15451: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15455: LD_INT 4
15457: PPUSH
15458: LD_VAR 0 3
15462: PPUSH
15463: LD_INT 1
15465: PPUSH
15466: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15470: LD_INT 6
15472: PPUSH
15473: LD_VAR 0 3
15477: PPUSH
15478: LD_INT 1
15480: PPUSH
15481: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
15485: LD_INT 7
15487: PPUSH
15488: LD_VAR 0 3
15492: PPUSH
15493: LD_INT 1
15495: PPUSH
15496: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
15500: LD_INT 8
15502: PPUSH
15503: LD_VAR 0 3
15507: PPUSH
15508: LD_INT 1
15510: PPUSH
15511: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
15515: LD_INT 10
15517: PPUSH
15518: LD_VAR 0 3
15522: PPUSH
15523: LD_INT 1
15525: PPUSH
15526: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
15530: LD_INT 15
15532: PPUSH
15533: LD_VAR 0 3
15537: PPUSH
15538: LD_INT 1
15540: PPUSH
15541: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
15545: LD_INT 16
15547: PPUSH
15548: LD_VAR 0 3
15552: PPUSH
15553: LD_INT 1
15555: PPUSH
15556: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
15560: LD_INT 17
15562: PPUSH
15563: LD_VAR 0 3
15567: PPUSH
15568: LD_INT 1
15570: PPUSH
15571: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
15575: LD_INT 20
15577: PPUSH
15578: LD_VAR 0 3
15582: PPUSH
15583: LD_INT 1
15585: PPUSH
15586: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
15590: LD_INT 26
15592: PPUSH
15593: LD_VAR 0 3
15597: PPUSH
15598: LD_INT 1
15600: PPUSH
15601: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15605: LD_INT 27
15607: PPUSH
15608: LD_VAR 0 3
15612: PPUSH
15613: LD_INT 1
15615: PPUSH
15616: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15620: LD_INT 29
15622: PPUSH
15623: LD_VAR 0 3
15627: PPUSH
15628: LD_INT 1
15630: PPUSH
15631: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15635: LD_INT 31
15637: PPUSH
15638: LD_VAR 0 3
15642: PPUSH
15643: LD_INT 1
15645: PPUSH
15646: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15650: LD_INT 32
15652: PPUSH
15653: LD_VAR 0 3
15657: PPUSH
15658: LD_INT 1
15660: PPUSH
15661: CALL_OW 324
// end ; 4 :
15665: GO 18752
15667: LD_INT 4
15669: DOUBLE
15670: EQUAL
15671: IFTRUE 15675
15673: GO 16623
15675: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15676: LD_INT 35
15678: PPUSH
15679: LD_VAR 0 3
15683: PPUSH
15684: LD_INT 1
15686: PPUSH
15687: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15691: LD_INT 45
15693: PPUSH
15694: LD_VAR 0 3
15698: PPUSH
15699: LD_INT 1
15701: PPUSH
15702: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15706: LD_INT 46
15708: PPUSH
15709: LD_VAR 0 3
15713: PPUSH
15714: LD_INT 1
15716: PPUSH
15717: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15721: LD_INT 47
15723: PPUSH
15724: LD_VAR 0 3
15728: PPUSH
15729: LD_INT 1
15731: PPUSH
15732: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15736: LD_INT 1
15738: PPUSH
15739: LD_VAR 0 3
15743: PPUSH
15744: LD_INT 1
15746: PPUSH
15747: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15751: LD_INT 2
15753: PPUSH
15754: LD_VAR 0 3
15758: PPUSH
15759: LD_INT 1
15761: PPUSH
15762: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15766: LD_INT 11
15768: PPUSH
15769: LD_VAR 0 3
15773: PPUSH
15774: LD_INT 1
15776: PPUSH
15777: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15781: LD_INT 20
15783: PPUSH
15784: LD_VAR 0 3
15788: PPUSH
15789: LD_INT 1
15791: PPUSH
15792: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15796: LD_INT 48
15798: PPUSH
15799: LD_VAR 0 3
15803: PPUSH
15804: LD_INT 1
15806: PPUSH
15807: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15811: LD_INT 49
15813: PPUSH
15814: LD_VAR 0 3
15818: PPUSH
15819: LD_INT 1
15821: PPUSH
15822: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15826: LD_INT 69
15828: PPUSH
15829: LD_VAR 0 3
15833: PPUSH
15834: LD_INT 1
15836: PPUSH
15837: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15841: LD_INT 39
15843: PPUSH
15844: LD_VAR 0 3
15848: PPUSH
15849: LD_INT 1
15851: PPUSH
15852: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15856: LD_INT 34
15858: PPUSH
15859: LD_VAR 0 3
15863: PPUSH
15864: LD_INT 1
15866: PPUSH
15867: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15871: LD_INT 42
15873: PPUSH
15874: LD_VAR 0 3
15878: PPUSH
15879: LD_INT 1
15881: PPUSH
15882: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15886: LD_INT 44
15888: PPUSH
15889: LD_VAR 0 3
15893: PPUSH
15894: LD_INT 1
15896: PPUSH
15897: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15901: LD_INT 41
15903: PPUSH
15904: LD_VAR 0 3
15908: PPUSH
15909: LD_INT 1
15911: PPUSH
15912: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15916: LD_INT 43
15918: PPUSH
15919: LD_VAR 0 3
15923: PPUSH
15924: LD_INT 1
15926: PPUSH
15927: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15931: LD_INT 70
15933: PPUSH
15934: LD_VAR 0 3
15938: PPUSH
15939: LD_INT 1
15941: PPUSH
15942: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15946: LD_INT 51
15948: PPUSH
15949: LD_VAR 0 3
15953: PPUSH
15954: LD_INT 1
15956: PPUSH
15957: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15961: LD_INT 52
15963: PPUSH
15964: LD_VAR 0 3
15968: PPUSH
15969: LD_INT 1
15971: PPUSH
15972: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15976: LD_INT 6
15978: PPUSH
15979: LD_VAR 0 3
15983: PPUSH
15984: LD_INT 1
15986: PPUSH
15987: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
15991: LD_INT 15
15993: PPUSH
15994: LD_VAR 0 3
15998: PPUSH
15999: LD_INT 1
16001: PPUSH
16002: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16006: LD_INT 7
16008: PPUSH
16009: LD_VAR 0 3
16013: PPUSH
16014: LD_INT 1
16016: PPUSH
16017: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16021: LD_INT 12
16023: PPUSH
16024: LD_VAR 0 3
16028: PPUSH
16029: LD_INT 1
16031: PPUSH
16032: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
16036: LD_INT 18
16038: PPUSH
16039: LD_VAR 0 3
16043: PPUSH
16044: LD_INT 1
16046: PPUSH
16047: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
16051: LD_INT 60
16053: PPUSH
16054: LD_VAR 0 3
16058: PPUSH
16059: LD_INT 1
16061: PPUSH
16062: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
16066: LD_INT 9
16068: PPUSH
16069: LD_VAR 0 3
16073: PPUSH
16074: LD_INT 1
16076: PPUSH
16077: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
16081: LD_INT 30
16083: PPUSH
16084: LD_VAR 0 3
16088: PPUSH
16089: LD_INT 1
16091: PPUSH
16092: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
16096: LD_INT 37
16098: PPUSH
16099: LD_VAR 0 3
16103: PPUSH
16104: LD_INT 1
16106: PPUSH
16107: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
16111: LD_INT 5
16113: PPUSH
16114: LD_VAR 0 3
16118: PPUSH
16119: LD_INT 1
16121: PPUSH
16122: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
16126: LD_INT 66
16128: PPUSH
16129: LD_VAR 0 3
16133: PPUSH
16134: LD_INT 1
16136: PPUSH
16137: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
16141: LD_INT 21
16143: PPUSH
16144: LD_VAR 0 3
16148: PPUSH
16149: LD_INT 1
16151: PPUSH
16152: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
16156: LD_INT 22
16158: PPUSH
16159: LD_VAR 0 3
16163: PPUSH
16164: LD_INT 1
16166: PPUSH
16167: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
16171: LD_INT 54
16173: PPUSH
16174: LD_VAR 0 3
16178: PPUSH
16179: LD_INT 1
16181: PPUSH
16182: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16186: LD_INT 0
16188: PPUSH
16189: LD_VAR 0 3
16193: PPUSH
16194: LD_INT 1
16196: PPUSH
16197: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
16201: LD_INT 1
16203: PPUSH
16204: LD_VAR 0 3
16208: PPUSH
16209: LD_INT 1
16211: PPUSH
16212: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16216: LD_INT 2
16218: PPUSH
16219: LD_VAR 0 3
16223: PPUSH
16224: LD_INT 1
16226: PPUSH
16227: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
16231: LD_INT 3
16233: PPUSH
16234: LD_VAR 0 3
16238: PPUSH
16239: LD_INT 1
16241: PPUSH
16242: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16246: LD_INT 4
16248: PPUSH
16249: LD_VAR 0 3
16253: PPUSH
16254: LD_INT 1
16256: PPUSH
16257: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
16261: LD_INT 5
16263: PPUSH
16264: LD_VAR 0 3
16268: PPUSH
16269: LD_INT 1
16271: PPUSH
16272: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16276: LD_INT 6
16278: PPUSH
16279: LD_VAR 0 3
16283: PPUSH
16284: LD_INT 1
16286: PPUSH
16287: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
16291: LD_INT 7
16293: PPUSH
16294: LD_VAR 0 3
16298: PPUSH
16299: LD_INT 1
16301: PPUSH
16302: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
16306: LD_INT 8
16308: PPUSH
16309: LD_VAR 0 3
16313: PPUSH
16314: LD_INT 1
16316: PPUSH
16317: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
16321: LD_INT 10
16323: PPUSH
16324: LD_VAR 0 3
16328: PPUSH
16329: LD_INT 1
16331: PPUSH
16332: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
16336: LD_INT 11
16338: PPUSH
16339: LD_VAR 0 3
16343: PPUSH
16344: LD_INT 1
16346: PPUSH
16347: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
16351: LD_INT 12
16353: PPUSH
16354: LD_VAR 0 3
16358: PPUSH
16359: LD_INT 1
16361: PPUSH
16362: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
16366: LD_INT 13
16368: PPUSH
16369: LD_VAR 0 3
16373: PPUSH
16374: LD_INT 1
16376: PPUSH
16377: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
16381: LD_INT 14
16383: PPUSH
16384: LD_VAR 0 3
16388: PPUSH
16389: LD_INT 1
16391: PPUSH
16392: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
16396: LD_INT 15
16398: PPUSH
16399: LD_VAR 0 3
16403: PPUSH
16404: LD_INT 1
16406: PPUSH
16407: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
16411: LD_INT 16
16413: PPUSH
16414: LD_VAR 0 3
16418: PPUSH
16419: LD_INT 1
16421: PPUSH
16422: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
16426: LD_INT 17
16428: PPUSH
16429: LD_VAR 0 3
16433: PPUSH
16434: LD_INT 1
16436: PPUSH
16437: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
16441: LD_INT 19
16443: PPUSH
16444: LD_VAR 0 3
16448: PPUSH
16449: LD_INT 1
16451: PPUSH
16452: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
16456: LD_INT 20
16458: PPUSH
16459: LD_VAR 0 3
16463: PPUSH
16464: LD_INT 1
16466: PPUSH
16467: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
16471: LD_INT 21
16473: PPUSH
16474: LD_VAR 0 3
16478: PPUSH
16479: LD_INT 1
16481: PPUSH
16482: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
16486: LD_INT 23
16488: PPUSH
16489: LD_VAR 0 3
16493: PPUSH
16494: LD_INT 1
16496: PPUSH
16497: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
16501: LD_INT 26
16503: PPUSH
16504: LD_VAR 0 3
16508: PPUSH
16509: LD_INT 1
16511: PPUSH
16512: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16516: LD_INT 27
16518: PPUSH
16519: LD_VAR 0 3
16523: PPUSH
16524: LD_INT 1
16526: PPUSH
16527: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
16531: LD_INT 28
16533: PPUSH
16534: LD_VAR 0 3
16538: PPUSH
16539: LD_INT 1
16541: PPUSH
16542: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16546: LD_INT 29
16548: PPUSH
16549: LD_VAR 0 3
16553: PPUSH
16554: LD_INT 1
16556: PPUSH
16557: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
16561: LD_INT 30
16563: PPUSH
16564: LD_VAR 0 3
16568: PPUSH
16569: LD_INT 1
16571: PPUSH
16572: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16576: LD_INT 31
16578: PPUSH
16579: LD_VAR 0 3
16583: PPUSH
16584: LD_INT 1
16586: PPUSH
16587: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16591: LD_INT 32
16593: PPUSH
16594: LD_VAR 0 3
16598: PPUSH
16599: LD_INT 1
16601: PPUSH
16602: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
16606: LD_INT 36
16608: PPUSH
16609: LD_VAR 0 3
16613: PPUSH
16614: LD_INT 1
16616: PPUSH
16617: CALL_OW 324
// end ; 5 :
16621: GO 18752
16623: LD_INT 5
16625: DOUBLE
16626: EQUAL
16627: IFTRUE 16631
16629: GO 17744
16631: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16632: LD_INT 35
16634: PPUSH
16635: LD_VAR 0 3
16639: PPUSH
16640: LD_INT 1
16642: PPUSH
16643: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16647: LD_INT 45
16649: PPUSH
16650: LD_VAR 0 3
16654: PPUSH
16655: LD_INT 1
16657: PPUSH
16658: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16662: LD_INT 46
16664: PPUSH
16665: LD_VAR 0 3
16669: PPUSH
16670: LD_INT 1
16672: PPUSH
16673: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16677: LD_INT 47
16679: PPUSH
16680: LD_VAR 0 3
16684: PPUSH
16685: LD_INT 1
16687: PPUSH
16688: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16692: LD_INT 1
16694: PPUSH
16695: LD_VAR 0 3
16699: PPUSH
16700: LD_INT 1
16702: PPUSH
16703: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16707: LD_INT 2
16709: PPUSH
16710: LD_VAR 0 3
16714: PPUSH
16715: LD_INT 1
16717: PPUSH
16718: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16722: LD_INT 11
16724: PPUSH
16725: LD_VAR 0 3
16729: PPUSH
16730: LD_INT 1
16732: PPUSH
16733: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
16737: LD_INT 20
16739: PPUSH
16740: LD_VAR 0 3
16744: PPUSH
16745: LD_INT 1
16747: PPUSH
16748: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16752: LD_INT 48
16754: PPUSH
16755: LD_VAR 0 3
16759: PPUSH
16760: LD_INT 1
16762: PPUSH
16763: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16767: LD_INT 49
16769: PPUSH
16770: LD_VAR 0 3
16774: PPUSH
16775: LD_INT 1
16777: PPUSH
16778: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16782: LD_INT 69
16784: PPUSH
16785: LD_VAR 0 3
16789: PPUSH
16790: LD_INT 1
16792: PPUSH
16793: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16797: LD_INT 39
16799: PPUSH
16800: LD_VAR 0 3
16804: PPUSH
16805: LD_INT 1
16807: PPUSH
16808: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16812: LD_INT 34
16814: PPUSH
16815: LD_VAR 0 3
16819: PPUSH
16820: LD_INT 1
16822: PPUSH
16823: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16827: LD_INT 42
16829: PPUSH
16830: LD_VAR 0 3
16834: PPUSH
16835: LD_INT 1
16837: PPUSH
16838: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16842: LD_INT 44
16844: PPUSH
16845: LD_VAR 0 3
16849: PPUSH
16850: LD_INT 1
16852: PPUSH
16853: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16857: LD_INT 41
16859: PPUSH
16860: LD_VAR 0 3
16864: PPUSH
16865: LD_INT 1
16867: PPUSH
16868: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
16872: LD_INT 40
16874: PPUSH
16875: LD_VAR 0 3
16879: PPUSH
16880: LD_INT 1
16882: PPUSH
16883: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16887: LD_INT 43
16889: PPUSH
16890: LD_VAR 0 3
16894: PPUSH
16895: LD_INT 1
16897: PPUSH
16898: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16902: LD_INT 70
16904: PPUSH
16905: LD_VAR 0 3
16909: PPUSH
16910: LD_INT 1
16912: PPUSH
16913: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16917: LD_INT 51
16919: PPUSH
16920: LD_VAR 0 3
16924: PPUSH
16925: LD_INT 1
16927: PPUSH
16928: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16932: LD_INT 52
16934: PPUSH
16935: LD_VAR 0 3
16939: PPUSH
16940: LD_INT 1
16942: PPUSH
16943: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16947: LD_INT 6
16949: PPUSH
16950: LD_VAR 0 3
16954: PPUSH
16955: LD_INT 1
16957: PPUSH
16958: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16962: LD_INT 15
16964: PPUSH
16965: LD_VAR 0 3
16969: PPUSH
16970: LD_INT 1
16972: PPUSH
16973: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16977: LD_INT 7
16979: PPUSH
16980: LD_VAR 0 3
16984: PPUSH
16985: LD_INT 1
16987: PPUSH
16988: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16992: LD_INT 12
16994: PPUSH
16995: LD_VAR 0 3
16999: PPUSH
17000: LD_INT 1
17002: PPUSH
17003: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
17007: LD_INT 17
17009: PPUSH
17010: LD_VAR 0 3
17014: PPUSH
17015: LD_INT 1
17017: PPUSH
17018: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17022: LD_INT 18
17024: PPUSH
17025: LD_VAR 0 3
17029: PPUSH
17030: LD_INT 1
17032: PPUSH
17033: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17037: LD_INT 60
17039: PPUSH
17040: LD_VAR 0 3
17044: PPUSH
17045: LD_INT 1
17047: PPUSH
17048: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
17052: LD_INT 32
17054: PPUSH
17055: LD_VAR 0 3
17059: PPUSH
17060: LD_INT 1
17062: PPUSH
17063: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
17067: LD_INT 9
17069: PPUSH
17070: LD_VAR 0 3
17074: PPUSH
17075: LD_INT 1
17077: PPUSH
17078: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
17082: LD_INT 57
17084: PPUSH
17085: LD_VAR 0 3
17089: PPUSH
17090: LD_INT 1
17092: PPUSH
17093: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
17097: LD_INT 30
17099: PPUSH
17100: LD_VAR 0 3
17104: PPUSH
17105: LD_INT 1
17107: PPUSH
17108: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
17112: LD_INT 37
17114: PPUSH
17115: LD_VAR 0 3
17119: PPUSH
17120: LD_INT 1
17122: PPUSH
17123: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
17127: LD_INT 63
17129: PPUSH
17130: LD_VAR 0 3
17134: PPUSH
17135: LD_INT 1
17137: PPUSH
17138: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
17142: LD_INT 3
17144: PPUSH
17145: LD_VAR 0 3
17149: PPUSH
17150: LD_INT 1
17152: PPUSH
17153: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
17157: LD_INT 4
17159: PPUSH
17160: LD_VAR 0 3
17164: PPUSH
17165: LD_INT 1
17167: PPUSH
17168: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
17172: LD_INT 5
17174: PPUSH
17175: LD_VAR 0 3
17179: PPUSH
17180: LD_INT 1
17182: PPUSH
17183: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
17187: LD_INT 66
17189: PPUSH
17190: LD_VAR 0 3
17194: PPUSH
17195: LD_INT 1
17197: PPUSH
17198: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
17202: LD_INT 21
17204: PPUSH
17205: LD_VAR 0 3
17209: PPUSH
17210: LD_INT 1
17212: PPUSH
17213: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
17217: LD_INT 22
17219: PPUSH
17220: LD_VAR 0 3
17224: PPUSH
17225: LD_INT 1
17227: PPUSH
17228: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
17232: LD_INT 19
17234: PPUSH
17235: LD_VAR 0 3
17239: PPUSH
17240: LD_INT 1
17242: PPUSH
17243: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
17247: LD_INT 54
17249: PPUSH
17250: LD_VAR 0 3
17254: PPUSH
17255: LD_INT 1
17257: PPUSH
17258: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
17262: LD_INT 55
17264: PPUSH
17265: LD_VAR 0 3
17269: PPUSH
17270: LD_INT 1
17272: PPUSH
17273: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17277: LD_INT 0
17279: PPUSH
17280: LD_VAR 0 3
17284: PPUSH
17285: LD_INT 1
17287: PPUSH
17288: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
17292: LD_INT 1
17294: PPUSH
17295: LD_VAR 0 3
17299: PPUSH
17300: LD_INT 1
17302: PPUSH
17303: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17307: LD_INT 2
17309: PPUSH
17310: LD_VAR 0 3
17314: PPUSH
17315: LD_INT 1
17317: PPUSH
17318: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
17322: LD_INT 3
17324: PPUSH
17325: LD_VAR 0 3
17329: PPUSH
17330: LD_INT 1
17332: PPUSH
17333: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17337: LD_INT 4
17339: PPUSH
17340: LD_VAR 0 3
17344: PPUSH
17345: LD_INT 1
17347: PPUSH
17348: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
17352: LD_INT 5
17354: PPUSH
17355: LD_VAR 0 3
17359: PPUSH
17360: LD_INT 1
17362: PPUSH
17363: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17367: LD_INT 6
17369: PPUSH
17370: LD_VAR 0 3
17374: PPUSH
17375: LD_INT 1
17377: PPUSH
17378: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
17382: LD_INT 7
17384: PPUSH
17385: LD_VAR 0 3
17389: PPUSH
17390: LD_INT 1
17392: PPUSH
17393: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
17397: LD_INT 8
17399: PPUSH
17400: LD_VAR 0 3
17404: PPUSH
17405: LD_INT 1
17407: PPUSH
17408: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
17412: LD_INT 10
17414: PPUSH
17415: LD_VAR 0 3
17419: PPUSH
17420: LD_INT 1
17422: PPUSH
17423: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
17427: LD_INT 11
17429: PPUSH
17430: LD_VAR 0 3
17434: PPUSH
17435: LD_INT 1
17437: PPUSH
17438: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
17442: LD_INT 12
17444: PPUSH
17445: LD_VAR 0 3
17449: PPUSH
17450: LD_INT 1
17452: PPUSH
17453: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
17457: LD_INT 13
17459: PPUSH
17460: LD_VAR 0 3
17464: PPUSH
17465: LD_INT 1
17467: PPUSH
17468: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
17472: LD_INT 14
17474: PPUSH
17475: LD_VAR 0 3
17479: PPUSH
17480: LD_INT 1
17482: PPUSH
17483: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
17487: LD_INT 15
17489: PPUSH
17490: LD_VAR 0 3
17494: PPUSH
17495: LD_INT 1
17497: PPUSH
17498: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
17502: LD_INT 16
17504: PPUSH
17505: LD_VAR 0 3
17509: PPUSH
17510: LD_INT 1
17512: PPUSH
17513: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
17517: LD_INT 17
17519: PPUSH
17520: LD_VAR 0 3
17524: PPUSH
17525: LD_INT 1
17527: PPUSH
17528: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
17532: LD_INT 18
17534: PPUSH
17535: LD_VAR 0 3
17539: PPUSH
17540: LD_INT 1
17542: PPUSH
17543: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
17547: LD_INT 19
17549: PPUSH
17550: LD_VAR 0 3
17554: PPUSH
17555: LD_INT 1
17557: PPUSH
17558: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
17562: LD_INT 20
17564: PPUSH
17565: LD_VAR 0 3
17569: PPUSH
17570: LD_INT 1
17572: PPUSH
17573: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
17577: LD_INT 21
17579: PPUSH
17580: LD_VAR 0 3
17584: PPUSH
17585: LD_INT 1
17587: PPUSH
17588: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
17592: LD_INT 23
17594: PPUSH
17595: LD_VAR 0 3
17599: PPUSH
17600: LD_INT 1
17602: PPUSH
17603: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
17607: LD_INT 26
17609: PPUSH
17610: LD_VAR 0 3
17614: PPUSH
17615: LD_INT 1
17617: PPUSH
17618: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
17622: LD_INT 27
17624: PPUSH
17625: LD_VAR 0 3
17629: PPUSH
17630: LD_INT 1
17632: PPUSH
17633: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
17637: LD_INT 28
17639: PPUSH
17640: LD_VAR 0 3
17644: PPUSH
17645: LD_INT 1
17647: PPUSH
17648: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17652: LD_INT 29
17654: PPUSH
17655: LD_VAR 0 3
17659: PPUSH
17660: LD_INT 1
17662: PPUSH
17663: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
17667: LD_INT 30
17669: PPUSH
17670: LD_VAR 0 3
17674: PPUSH
17675: LD_INT 1
17677: PPUSH
17678: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17682: LD_INT 31
17684: PPUSH
17685: LD_VAR 0 3
17689: PPUSH
17690: LD_INT 1
17692: PPUSH
17693: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
17697: LD_INT 32
17699: PPUSH
17700: LD_VAR 0 3
17704: PPUSH
17705: LD_INT 1
17707: PPUSH
17708: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
17712: LD_INT 33
17714: PPUSH
17715: LD_VAR 0 3
17719: PPUSH
17720: LD_INT 1
17722: PPUSH
17723: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
17727: LD_INT 36
17729: PPUSH
17730: LD_VAR 0 3
17734: PPUSH
17735: LD_INT 1
17737: PPUSH
17738: CALL_OW 324
// end ; 6 :
17742: GO 18752
17744: LD_INT 6
17746: DOUBLE
17747: EQUAL
17748: IFTRUE 17752
17750: GO 18677
17752: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17753: LD_INT 35
17755: PPUSH
17756: LD_VAR 0 3
17760: PPUSH
17761: LD_INT 1
17763: PPUSH
17764: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17768: LD_INT 45
17770: PPUSH
17771: LD_VAR 0 3
17775: PPUSH
17776: LD_INT 1
17778: PPUSH
17779: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17783: LD_INT 46
17785: PPUSH
17786: LD_VAR 0 3
17790: PPUSH
17791: LD_INT 1
17793: PPUSH
17794: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17798: LD_INT 47
17800: PPUSH
17801: LD_VAR 0 3
17805: PPUSH
17806: LD_INT 1
17808: PPUSH
17809: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17813: LD_INT 1
17815: PPUSH
17816: LD_VAR 0 3
17820: PPUSH
17821: LD_INT 1
17823: PPUSH
17824: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17828: LD_INT 2
17830: PPUSH
17831: LD_VAR 0 3
17835: PPUSH
17836: LD_INT 1
17838: PPUSH
17839: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17843: LD_INT 11
17845: PPUSH
17846: LD_VAR 0 3
17850: PPUSH
17851: LD_INT 1
17853: PPUSH
17854: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17858: LD_INT 20
17860: PPUSH
17861: LD_VAR 0 3
17865: PPUSH
17866: LD_INT 1
17868: PPUSH
17869: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17873: LD_INT 48
17875: PPUSH
17876: LD_VAR 0 3
17880: PPUSH
17881: LD_INT 1
17883: PPUSH
17884: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17888: LD_INT 49
17890: PPUSH
17891: LD_VAR 0 3
17895: PPUSH
17896: LD_INT 1
17898: PPUSH
17899: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
17903: LD_INT 50
17905: PPUSH
17906: LD_VAR 0 3
17910: PPUSH
17911: LD_INT 1
17913: PPUSH
17914: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17918: LD_INT 69
17920: PPUSH
17921: LD_VAR 0 3
17925: PPUSH
17926: LD_INT 1
17928: PPUSH
17929: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17933: LD_INT 39
17935: PPUSH
17936: LD_VAR 0 3
17940: PPUSH
17941: LD_INT 1
17943: PPUSH
17944: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17948: LD_INT 34
17950: PPUSH
17951: LD_VAR 0 3
17955: PPUSH
17956: LD_INT 1
17958: PPUSH
17959: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17963: LD_INT 42
17965: PPUSH
17966: LD_VAR 0 3
17970: PPUSH
17971: LD_INT 1
17973: PPUSH
17974: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17978: LD_INT 44
17980: PPUSH
17981: LD_VAR 0 3
17985: PPUSH
17986: LD_INT 1
17988: PPUSH
17989: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
17993: LD_INT 41
17995: PPUSH
17996: LD_VAR 0 3
18000: PPUSH
18001: LD_INT 1
18003: PPUSH
18004: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
18008: LD_INT 13
18010: PPUSH
18011: LD_VAR 0 3
18015: PPUSH
18016: LD_INT 1
18018: PPUSH
18019: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
18023: LD_INT 40
18025: PPUSH
18026: LD_VAR 0 3
18030: PPUSH
18031: LD_INT 1
18033: PPUSH
18034: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18038: LD_INT 43
18040: PPUSH
18041: LD_VAR 0 3
18045: PPUSH
18046: LD_INT 1
18048: PPUSH
18049: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
18053: LD_INT 70
18055: PPUSH
18056: LD_VAR 0 3
18060: PPUSH
18061: LD_INT 1
18063: PPUSH
18064: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
18068: LD_INT 23
18070: PPUSH
18071: LD_VAR 0 3
18075: PPUSH
18076: LD_INT 1
18078: PPUSH
18079: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18083: LD_INT 51
18085: PPUSH
18086: LD_VAR 0 3
18090: PPUSH
18091: LD_INT 1
18093: PPUSH
18094: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
18098: LD_INT 52
18100: PPUSH
18101: LD_VAR 0 3
18105: PPUSH
18106: LD_INT 1
18108: PPUSH
18109: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
18113: LD_INT 6
18115: PPUSH
18116: LD_VAR 0 3
18120: PPUSH
18121: LD_INT 1
18123: PPUSH
18124: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
18128: LD_INT 15
18130: PPUSH
18131: LD_VAR 0 3
18135: PPUSH
18136: LD_INT 1
18138: PPUSH
18139: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
18143: LD_INT 7
18145: PPUSH
18146: LD_VAR 0 3
18150: PPUSH
18151: LD_INT 1
18153: PPUSH
18154: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
18158: LD_INT 12
18160: PPUSH
18161: LD_VAR 0 3
18165: PPUSH
18166: LD_INT 1
18168: PPUSH
18169: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
18173: LD_INT 10
18175: PPUSH
18176: LD_VAR 0 3
18180: PPUSH
18181: LD_INT 1
18183: PPUSH
18184: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
18188: LD_INT 17
18190: PPUSH
18191: LD_VAR 0 3
18195: PPUSH
18196: LD_INT 1
18198: PPUSH
18199: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
18203: LD_INT 18
18205: PPUSH
18206: LD_VAR 0 3
18210: PPUSH
18211: LD_INT 1
18213: PPUSH
18214: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
18218: LD_INT 60
18220: PPUSH
18221: LD_VAR 0 3
18225: PPUSH
18226: LD_INT 1
18228: PPUSH
18229: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
18233: LD_INT 61
18235: PPUSH
18236: LD_VAR 0 3
18240: PPUSH
18241: LD_INT 1
18243: PPUSH
18244: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
18248: LD_INT 32
18250: PPUSH
18251: LD_VAR 0 3
18255: PPUSH
18256: LD_INT 1
18258: PPUSH
18259: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
18263: LD_INT 27
18265: PPUSH
18266: LD_VAR 0 3
18270: PPUSH
18271: LD_INT 1
18273: PPUSH
18274: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
18278: LD_INT 36
18280: PPUSH
18281: LD_VAR 0 3
18285: PPUSH
18286: LD_INT 1
18288: PPUSH
18289: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
18293: LD_INT 33
18295: PPUSH
18296: LD_VAR 0 3
18300: PPUSH
18301: LD_INT 1
18303: PPUSH
18304: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
18308: LD_INT 9
18310: PPUSH
18311: LD_VAR 0 3
18315: PPUSH
18316: LD_INT 1
18318: PPUSH
18319: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
18323: LD_INT 38
18325: PPUSH
18326: LD_VAR 0 3
18330: PPUSH
18331: LD_INT 1
18333: PPUSH
18334: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
18338: LD_INT 57
18340: PPUSH
18341: LD_VAR 0 3
18345: PPUSH
18346: LD_INT 1
18348: PPUSH
18349: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
18353: LD_INT 58
18355: PPUSH
18356: LD_VAR 0 3
18360: PPUSH
18361: LD_INT 1
18363: PPUSH
18364: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
18368: LD_INT 28
18370: PPUSH
18371: LD_VAR 0 3
18375: PPUSH
18376: LD_INT 1
18378: PPUSH
18379: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
18383: LD_INT 29
18385: PPUSH
18386: LD_VAR 0 3
18390: PPUSH
18391: LD_INT 1
18393: PPUSH
18394: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18398: LD_INT 30
18400: PPUSH
18401: LD_VAR 0 3
18405: PPUSH
18406: LD_INT 1
18408: PPUSH
18409: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
18413: LD_INT 37
18415: PPUSH
18416: LD_VAR 0 3
18420: PPUSH
18421: LD_INT 1
18423: PPUSH
18424: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
18428: LD_INT 63
18430: PPUSH
18431: LD_VAR 0 3
18435: PPUSH
18436: LD_INT 1
18438: PPUSH
18439: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
18443: LD_INT 64
18445: PPUSH
18446: LD_VAR 0 3
18450: PPUSH
18451: LD_INT 1
18453: PPUSH
18454: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
18458: LD_INT 3
18460: PPUSH
18461: LD_VAR 0 3
18465: PPUSH
18466: LD_INT 1
18468: PPUSH
18469: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
18473: LD_INT 4
18475: PPUSH
18476: LD_VAR 0 3
18480: PPUSH
18481: LD_INT 1
18483: PPUSH
18484: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18488: LD_INT 5
18490: PPUSH
18491: LD_VAR 0 3
18495: PPUSH
18496: LD_INT 1
18498: PPUSH
18499: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
18503: LD_INT 8
18505: PPUSH
18506: LD_VAR 0 3
18510: PPUSH
18511: LD_INT 1
18513: PPUSH
18514: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18518: LD_INT 66
18520: PPUSH
18521: LD_VAR 0 3
18525: PPUSH
18526: LD_INT 1
18528: PPUSH
18529: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
18533: LD_INT 67
18535: PPUSH
18536: LD_VAR 0 3
18540: PPUSH
18541: LD_INT 1
18543: PPUSH
18544: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18548: LD_INT 21
18550: PPUSH
18551: LD_VAR 0 3
18555: PPUSH
18556: LD_INT 1
18558: PPUSH
18559: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18563: LD_INT 22
18565: PPUSH
18566: LD_VAR 0 3
18570: PPUSH
18571: LD_INT 1
18573: PPUSH
18574: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
18578: LD_INT 19
18580: PPUSH
18581: LD_VAR 0 3
18585: PPUSH
18586: LD_INT 1
18588: PPUSH
18589: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
18593: LD_INT 26
18595: PPUSH
18596: LD_VAR 0 3
18600: PPUSH
18601: LD_INT 1
18603: PPUSH
18604: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
18608: LD_INT 54
18610: PPUSH
18611: LD_VAR 0 3
18615: PPUSH
18616: LD_INT 1
18618: PPUSH
18619: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
18623: LD_INT 55
18625: PPUSH
18626: LD_VAR 0 3
18630: PPUSH
18631: LD_INT 1
18633: PPUSH
18634: CALL_OW 322
// for i = 0 to 39 do
18638: LD_ADDR_VAR 0 4
18642: PUSH
18643: DOUBLE
18644: LD_INT 0
18646: DEC
18647: ST_TO_ADDR
18648: LD_INT 39
18650: PUSH
18651: FOR_TO
18652: IFFALSE 18673
// SetRestrict ( i , side , true ) ;
18654: LD_VAR 0 4
18658: PPUSH
18659: LD_VAR 0 3
18663: PPUSH
18664: LD_INT 1
18666: PPUSH
18667: CALL_OW 324
18671: GO 18651
18673: POP
18674: POP
// end ; else
18675: GO 18752
18677: POP
// begin for i = 1 to 73 do
18678: LD_ADDR_VAR 0 4
18682: PUSH
18683: DOUBLE
18684: LD_INT 1
18686: DEC
18687: ST_TO_ADDR
18688: LD_INT 73
18690: PUSH
18691: FOR_TO
18692: IFFALSE 18713
// SetTech ( i , side , state_enabled ) ;
18694: LD_VAR 0 4
18698: PPUSH
18699: LD_VAR 0 3
18703: PPUSH
18704: LD_INT 1
18706: PPUSH
18707: CALL_OW 322
18711: GO 18691
18713: POP
18714: POP
// for i = 0 to 39 do
18715: LD_ADDR_VAR 0 4
18719: PUSH
18720: DOUBLE
18721: LD_INT 0
18723: DEC
18724: ST_TO_ADDR
18725: LD_INT 39
18727: PUSH
18728: FOR_TO
18729: IFFALSE 18750
// SetRestrict ( i , side , true ) ;
18731: LD_VAR 0 4
18735: PPUSH
18736: LD_VAR 0 3
18740: PPUSH
18741: LD_INT 1
18743: PPUSH
18744: CALL_OW 324
18748: GO 18728
18750: POP
18751: POP
// end ; end ; end ;
18752: GO 14757
18754: POP
18755: POP
// end ;
18756: LD_VAR 0 2
18760: RET
