// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_amount_of_siberit , def_public_score , def_siberite_bomb , def_builduptime , def_sheik , def_mastodont ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id , sheik , mastodont ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function read_multiplayer_and_game_parameters ; var i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// if Multiplayer then
   4: LD_OWVAR 4
   8: IFFALSE 72
// begin Game_Type := mp_game_type ;
  10: LD_ADDR_EXP 20
  14: PUSH
  15: LD_OWVAR 6
  19: ST_TO_ADDR
// Your_Side := mp_player_side ;
  20: LD_ADDR_OWVAR 2
  24: PUSH
  25: LD_OWVAR 7
  29: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  30: LD_ADDR_EXP 36
  34: PUSH
  35: LD_OWVAR 17
  39: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  40: LD_ADDR_EXP 34
  44: PUSH
  45: LD_OWVAR 15
  49: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
  50: LD_ADDR_EXP 37
  54: PUSH
  55: LD_OWVAR 16
  59: ST_TO_ADDR
// Teams := mp_teams ;
  60: LD_ADDR_EXP 35
  64: PUSH
  65: LD_OWVAR 12
  69: ST_TO_ADDR
// end else
  70: GO 254
// begin Game_Type := 1 ;
  72: LD_ADDR_EXP 20
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// Your_Side := 3 ;
  80: LD_ADDR_OWVAR 2
  84: PUSH
  85: LD_INT 3
  87: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
  88: LD_ADDR_EXP 36
  92: PUSH
  93: LD_INT 1
  95: PUSH
  96: LD_INT 2
  98: PUSH
  99: LD_INT 3
 101: PUSH
 102: LD_INT 4
 104: PUSH
 105: LD_INT 5
 107: PUSH
 108: LD_INT 6
 110: PUSH
 111: LD_INT 0
 113: PUSH
 114: LD_INT 0
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: LIST
 126: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 127: LD_ADDR_EXP 34
 131: PUSH
 132: LD_INT 1
 134: PUSH
 135: LD_INT 2
 137: PUSH
 138: LD_INT 3
 140: PUSH
 141: LD_INT 4
 143: PUSH
 144: LD_INT 5
 146: PUSH
 147: LD_INT 6
 149: PUSH
 150: LD_INT 0
 152: PUSH
 153: LD_INT 0
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: LIST
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 166: LD_ADDR_EXP 37
 170: PUSH
 171: LD_INT 1
 173: PUSH
 174: LD_INT 2
 176: PUSH
 177: LD_INT 3
 179: PUSH
 180: LD_INT 1
 182: PUSH
 183: LD_INT 2
 185: PUSH
 186: LD_INT 3
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 0
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 205: LD_ADDR_EXP 35
 209: PUSH
 210: LD_INT 1
 212: PUSH
 213: EMPTY
 214: LIST
 215: PUSH
 216: LD_INT 2
 218: PUSH
 219: EMPTY
 220: LIST
 221: PUSH
 222: LD_INT 3
 224: PUSH
 225: EMPTY
 226: LIST
 227: PUSH
 228: LD_INT 4
 230: PUSH
 231: EMPTY
 232: LIST
 233: PUSH
 234: LD_INT 5
 236: PUSH
 237: EMPTY
 238: LIST
 239: PUSH
 240: LD_INT 6
 242: PUSH
 243: EMPTY
 244: LIST
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: LIST
 252: LIST
 253: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 254: LD_ADDR_EXP 38
 258: PUSH
 259: LD_EXP 34
 263: PUSH
 264: LD_INT 0
 266: PUSH
 267: EMPTY
 268: LIST
 269: DIFF
 270: PUSH
 271: LD_INT 1
 273: GREATER
 274: ST_TO_ADDR
// if Multiplayer then
 275: LD_OWVAR 4
 279: IFFALSE 517
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 281: LD_ADDR_EXP 1
 285: PUSH
 286: LD_INT 0
 288: PPUSH
 289: CALL_OW 426
 293: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 294: LD_ADDR_EXP 2
 298: PUSH
 299: LD_INT 1
 301: PPUSH
 302: CALL_OW 426
 306: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 307: LD_ADDR_EXP 3
 311: PUSH
 312: LD_INT 2
 314: PPUSH
 315: CALL_OW 426
 319: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 320: LD_ADDR_EXP 4
 324: PUSH
 325: LD_INT 3
 327: PPUSH
 328: CALL_OW 426
 332: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 333: LD_ADDR_EXP 5
 337: PUSH
 338: LD_INT 4
 340: PPUSH
 341: CALL_OW 426
 345: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 346: LD_ADDR_EXP 6
 350: PUSH
 351: LD_INT 5
 353: PPUSH
 354: CALL_OW 426
 358: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 359: LD_ADDR_EXP 7
 363: PUSH
 364: LD_INT 6
 366: PPUSH
 367: CALL_OW 426
 371: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 372: LD_ADDR_EXP 8
 376: PUSH
 377: LD_INT 10
 379: PPUSH
 380: CALL_OW 426
 384: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 385: LD_ADDR_EXP 9
 389: PUSH
 390: LD_INT 11
 392: PPUSH
 393: CALL_OW 426
 397: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 398: LD_ADDR_EXP 10
 402: PUSH
 403: LD_INT 12
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 411: LD_ADDR_EXP 11
 415: PUSH
 416: LD_INT 13
 418: PPUSH
 419: CALL_OW 426
 423: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 424: LD_ADDR_EXP 12
 428: PUSH
 429: LD_INT 14
 431: PPUSH
 432: CALL_OW 426
 436: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 437: LD_ADDR_EXP 13
 441: PUSH
 442: LD_INT 15
 444: PPUSH
 445: CALL_OW 426
 449: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 450: LD_ADDR_EXP 14
 454: PUSH
 455: LD_INT 16
 457: PPUSH
 458: CALL_OW 426
 462: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 463: LD_ADDR_EXP 15
 467: PUSH
 468: LD_INT 17
 470: PPUSH
 471: CALL_OW 426
 475: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 476: LD_ADDR_EXP 16
 480: PUSH
 481: LD_INT 20
 483: PPUSH
 484: CALL_OW 426
 488: ST_TO_ADDR
// def_sheik := GetMultiplayerSetting ( 22 ) ;
 489: LD_ADDR_EXP 17
 493: PUSH
 494: LD_INT 22
 496: PPUSH
 497: CALL_OW 426
 501: ST_TO_ADDR
// def_mastodont := GetMultiplayerSetting ( 23 ) ;
 502: LD_ADDR_EXP 18
 506: PUSH
 507: LD_INT 23
 509: PPUSH
 510: CALL_OW 426
 514: ST_TO_ADDR
// end else
 515: GO 665
// begin Randomize ;
 517: CALL_OW 10
// def_base_level := 2 ;
 521: LD_ADDR_EXP 1
 525: PUSH
 526: LD_INT 2
 528: ST_TO_ADDR
// def_amount_of_people := 0 ;
 529: LD_ADDR_EXP 2
 533: PUSH
 534: LD_INT 0
 536: ST_TO_ADDR
// def_skill_level := 1 ;
 537: LD_ADDR_EXP 3
 541: PUSH
 542: LD_INT 1
 544: ST_TO_ADDR
// def_starting_resources := 2 ;
 545: LD_ADDR_EXP 4
 549: PUSH
 550: LD_INT 2
 552: ST_TO_ADDR
// def_shipments_density := 1 ;
 553: LD_ADDR_EXP 5
 557: PUSH
 558: LD_INT 1
 560: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
 561: LD_ADDR_EXP 6
 565: PUSH
 566: LD_INT 1
 568: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
 569: LD_ADDR_EXP 7
 573: PUSH
 574: LD_INT 2
 576: ST_TO_ADDR
// def_shared_vision := 1 ;
 577: LD_ADDR_EXP 8
 581: PUSH
 582: LD_INT 1
 584: ST_TO_ADDR
// def_morale_flags := 1 ;
 585: LD_ADDR_EXP 9
 589: PUSH
 590: LD_INT 1
 592: ST_TO_ADDR
// def_siberite_detection := 1 ;
 593: LD_ADDR_EXP 10
 597: PUSH
 598: LD_INT 1
 600: ST_TO_ADDR
// def_people_respawning := 2 ;
 601: LD_ADDR_EXP 11
 605: PUSH
 606: LD_INT 2
 608: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 609: LD_ADDR_EXP 12
 613: PUSH
 614: LD_INT 3
 616: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 617: LD_ADDR_EXP 13
 621: PUSH
 622: LD_INT 0
 624: ST_TO_ADDR
// def_public_score := 0 ;
 625: LD_ADDR_EXP 14
 629: PUSH
 630: LD_INT 0
 632: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 633: LD_ADDR_EXP 15
 637: PUSH
 638: LD_INT 0
 640: ST_TO_ADDR
// def_builduptime := 1 ;
 641: LD_ADDR_EXP 16
 645: PUSH
 646: LD_INT 1
 648: ST_TO_ADDR
// def_sheik := 0 ;
 649: LD_ADDR_EXP 17
 653: PUSH
 654: LD_INT 0
 656: ST_TO_ADDR
// def_mastodont := 0 ;
 657: LD_ADDR_EXP 18
 661: PUSH
 662: LD_INT 0
 664: ST_TO_ADDR
// end ; if isSGUI then
 665: LD_OWVAR 83
 669: IFFALSE 675
// setMpTechs ( ) ;
 671: CALL 10506 0 0
// if ( Game_Type = 5 ) then
 675: LD_EXP 20
 679: PUSH
 680: LD_INT 5
 682: EQUAL
 683: IFFALSE 712
// begin def_base_level := 1 ;
 685: LD_ADDR_EXP 1
 689: PUSH
 690: LD_INT 1
 692: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 693: LD_ADDR_EXP 6
 697: PUSH
 698: LD_INT 0
 700: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
 701: LD_ADDR_EXP 7
 705: PUSH
 706: LD_INT 0
 708: ST_TO_ADDR
// disable ( 10 ) ;
 709: LD_INT 10
 711: DISABLE_MARKED
// end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 712: LD_ADDR_EXP 21
 716: PUSH
 717: LD_INT 0
 719: PUSH
 720: LD_INT 1
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: LIST
 730: PUSH
 731: LD_EXP 1
 735: PUSH
 736: LD_INT 1
 738: PLUS
 739: ARRAY
 740: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 ] [ def_base_level + 1 ] ;
 741: LD_ADDR_EXP 22
 745: PUSH
 746: LD_INT 0
 748: PUSH
 749: LD_INT 0
 751: PUSH
 752: LD_INT 2
 754: PUSH
 755: EMPTY
 756: LIST
 757: LIST
 758: LIST
 759: PUSH
 760: LD_EXP 1
 764: PUSH
 765: LD_INT 1
 767: PLUS
 768: ARRAY
 769: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 770: LD_ADDR_EXP 23
 774: PUSH
 775: LD_INT 9
 777: PUSH
 778: LD_INT 12
 780: PUSH
 781: LD_INT 15
 783: PUSH
 784: LD_INT 24
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: LIST
 791: LIST
 792: PUSH
 793: LD_EXP 2
 797: PUSH
 798: LD_INT 1
 800: PLUS
 801: ARRAY
 802: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 , 8 ] [ def_skill_level + 1 ] ;
 803: LD_ADDR_EXP 24
 807: PUSH
 808: LD_INT 2
 810: PUSH
 811: LD_INT 3
 813: PUSH
 814: LD_INT 4
 816: PUSH
 817: LD_INT 5
 819: PUSH
 820: LD_INT 8
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: LIST
 827: LIST
 828: LIST
 829: PUSH
 830: LD_EXP 3
 834: PUSH
 835: LD_INT 1
 837: PLUS
 838: ARRAY
 839: ST_TO_ADDR
// if ( Game_Type = 5 ) then
 840: LD_EXP 20
 844: PUSH
 845: LD_INT 5
 847: EQUAL
 848: IFFALSE 966
// begin starting_resources := [ [ 1000 , 100 , 100 ] , [ 2000 , 200 , 200 ] , [ 5000 , 500 , 500 ] , [ 10000 , 1000 , 1000 ] , [ 25000 , 2500 , 2500 ] , [ 50000 , 5000 , 5000 ] ] [ def_starting_resources + 1 ] ;
 850: LD_ADDR_EXP 26
 854: PUSH
 855: LD_INT 1000
 857: PUSH
 858: LD_INT 100
 860: PUSH
 861: LD_INT 100
 863: PUSH
 864: EMPTY
 865: LIST
 866: LIST
 867: LIST
 868: PUSH
 869: LD_INT 2000
 871: PUSH
 872: LD_INT 200
 874: PUSH
 875: LD_INT 200
 877: PUSH
 878: EMPTY
 879: LIST
 880: LIST
 881: LIST
 882: PUSH
 883: LD_INT 5000
 885: PUSH
 886: LD_INT 500
 888: PUSH
 889: LD_INT 500
 891: PUSH
 892: EMPTY
 893: LIST
 894: LIST
 895: LIST
 896: PUSH
 897: LD_INT 10000
 899: PUSH
 900: LD_INT 1000
 902: PUSH
 903: LD_INT 1000
 905: PUSH
 906: EMPTY
 907: LIST
 908: LIST
 909: LIST
 910: PUSH
 911: LD_INT 25000
 913: PUSH
 914: LD_INT 2500
 916: PUSH
 917: LD_INT 2500
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: LIST
 924: PUSH
 925: LD_INT 50000
 927: PUSH
 928: LD_INT 5000
 930: PUSH
 931: LD_INT 5000
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: LIST
 938: PUSH
 939: EMPTY
 940: LIST
 941: LIST
 942: LIST
 943: LIST
 944: LIST
 945: LIST
 946: PUSH
 947: LD_EXP 4
 951: PUSH
 952: LD_INT 1
 954: PLUS
 955: ARRAY
 956: ST_TO_ADDR
// starting_crates := [ ] ;
 957: LD_ADDR_EXP 25
 961: PUSH
 962: EMPTY
 963: ST_TO_ADDR
// end else
 964: GO 1112
// begin starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 966: LD_ADDR_EXP 26
 970: PUSH
 971: LD_INT 0
 973: PUSH
 974: LD_INT 0
 976: PUSH
 977: LD_INT 0
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: LIST
 984: PUSH
 985: LD_INT 30
 987: PUSH
 988: LD_INT 0
 990: PUSH
 991: LD_INT 0
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 50
1001: PUSH
1002: LD_INT 20
1004: PUSH
1005: LD_INT 0
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: LIST
1012: PUSH
1013: LD_INT 80
1015: PUSH
1016: LD_INT 40
1018: PUSH
1019: LD_INT 20
1021: PUSH
1022: EMPTY
1023: LIST
1024: LIST
1025: LIST
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: PUSH
1033: LD_EXP 4
1037: PUSH
1038: LD_INT 1
1040: PLUS
1041: ARRAY
1042: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1043: LD_ADDR_EXP 25
1047: PUSH
1048: LD_INT 10
1050: PUSH
1051: EMPTY
1052: LIST
1053: PUSH
1054: LD_INT 7
1056: PUSH
1057: LD_INT 14
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: PUSH
1064: LD_INT 6
1066: PUSH
1067: LD_INT 12
1069: PUSH
1070: LD_INT 18
1072: PUSH
1073: EMPTY
1074: LIST
1075: LIST
1076: LIST
1077: PUSH
1078: LD_INT 5
1080: PUSH
1081: LD_INT 10
1083: PUSH
1084: LD_INT 15
1086: PUSH
1087: LD_INT 20
1089: PUSH
1090: EMPTY
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: LIST
1100: LIST
1101: PUSH
1102: LD_EXP 4
1106: PUSH
1107: LD_INT 1
1109: PLUS
1110: ARRAY
1111: ST_TO_ADDR
// end ; shipments_density := [ 150 , 125 , 100 , 50 ] [ def_shipments_density + 1 ] ;
1112: LD_ADDR_EXP 27
1116: PUSH
1117: LD_INT 150
1119: PUSH
1120: LD_INT 125
1122: PUSH
1123: LD_INT 100
1125: PUSH
1126: LD_INT 50
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: LIST
1133: LIST
1134: PUSH
1135: LD_EXP 5
1139: PUSH
1140: LD_INT 1
1142: PLUS
1143: ARRAY
1144: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1145: LD_ADDR_EXP 31
1149: PUSH
1150: LD_INT 0
1152: PUSH
1153: LD_INT 10500
1155: PUSH
1156: LD_INT 6300
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: LIST
1163: PUSH
1164: LD_EXP 11
1168: PUSH
1169: LD_INT 1
1171: PLUS
1172: ARRAY
1173: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1174: LD_ADDR_EXP 32
1178: PUSH
1179: LD_INT 0
1181: PUSH
1182: LD_INT 31500
1184: PUSH
1185: LD_INT 10500
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: PUSH
1193: LD_EXP 11
1197: PUSH
1198: LD_INT 1
1200: PLUS
1201: ARRAY
1202: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1203: LD_ADDR_EXP 29
1207: PUSH
1208: LD_INT 0
1210: PUSH
1211: LD_INT 1
1213: PUSH
1214: LD_INT 2
1216: PUSH
1217: LD_INT 3
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: PUSH
1226: LD_EXP 12
1230: PUSH
1231: LD_INT 1
1233: PLUS
1234: ARRAY
1235: ST_TO_ADDR
// amount_of_siberit := [ 30 , 50 , 80 , 100 , 130 , 150 , 200 ] [ def_amount_of_siberit + 1 ] ;
1236: LD_ADDR_EXP 30
1240: PUSH
1241: LD_INT 30
1243: PUSH
1244: LD_INT 50
1246: PUSH
1247: LD_INT 80
1249: PUSH
1250: LD_INT 100
1252: PUSH
1253: LD_INT 130
1255: PUSH
1256: LD_INT 150
1258: PUSH
1259: LD_INT 200
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: LIST
1270: PUSH
1271: LD_EXP 13
1275: PUSH
1276: LD_INT 1
1278: PLUS
1279: ARRAY
1280: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1281: LD_ADDR_EXP 28
1285: PUSH
1286: LD_INT 1
1288: NEG
1289: PUSH
1290: LD_INT 350
1292: PUSH
1293: LD_INT 700
1295: PUSH
1296: LD_INT 1400
1298: PUSH
1299: LD_INT 0
1301: PUSH
1302: EMPTY
1303: LIST
1304: LIST
1305: LIST
1306: LIST
1307: LIST
1308: PUSH
1309: LD_EXP 9
1313: PUSH
1314: LD_INT 1
1316: PLUS
1317: ARRAY
1318: ST_TO_ADDR
// battle_flags_id := [ ] ;
1319: LD_ADDR_EXP 46
1323: PUSH
1324: EMPTY
1325: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1326: LD_ADDR_EXP 33
1330: PUSH
1331: LD_INT 0
1333: PUSH
1334: LD_INT 1
1336: PUSH
1337: LD_INT 63000
1339: PUSH
1340: LD_INT 126000
1342: PUSH
1343: LD_INT 189000
1345: PUSH
1346: LD_INT 252000
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: PUSH
1357: LD_EXP 15
1361: PUSH
1362: LD_INT 1
1364: PLUS
1365: ARRAY
1366: ST_TO_ADDR
// if ( Game_Type = 12 ) then
1367: LD_EXP 20
1371: PUSH
1372: LD_INT 12
1374: EQUAL
1375: IFFALSE 1433
// begin sheik := [ 0 , 1 ] [ def_sheik + 1 ] ;
1377: LD_ADDR_EXP 47
1381: PUSH
1382: LD_INT 0
1384: PUSH
1385: LD_INT 1
1387: PUSH
1388: EMPTY
1389: LIST
1390: LIST
1391: PUSH
1392: LD_EXP 17
1396: PUSH
1397: LD_INT 1
1399: PLUS
1400: ARRAY
1401: ST_TO_ADDR
// mastodont := [ 0 , 1 , 2 ] [ def_mastodont + 1 ] end else
1402: LD_ADDR_EXP 48
1406: PUSH
1407: LD_INT 0
1409: PUSH
1410: LD_INT 1
1412: PUSH
1413: LD_INT 2
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: LIST
1420: PUSH
1421: LD_EXP 18
1425: PUSH
1426: LD_INT 1
1428: PLUS
1429: ARRAY
1430: ST_TO_ADDR
1431: GO 1449
// begin sheik := 0 ;
1433: LD_ADDR_EXP 47
1437: PUSH
1438: LD_INT 0
1440: ST_TO_ADDR
// mastodont := 0 ;
1441: LD_ADDR_EXP 48
1445: PUSH
1446: LD_INT 0
1448: ST_TO_ADDR
// end ; end ;
1449: LD_VAR 0 1
1453: RET
// function init_map ; var i , j ; begin
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
1458: PPUSH
// normal_oil_deposits_locations := [ [ 101 , 187 ] , [ 18 , 26 ] , [ 50 , 89 ] , [ 123 , 3 ] , [ 182 , 69 ] , [ 231 , 174 ] ] ;
1459: LD_ADDR_EXP 42
1463: PUSH
1464: LD_INT 101
1466: PUSH
1467: LD_INT 187
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: PUSH
1474: LD_INT 18
1476: PUSH
1477: LD_INT 26
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: PUSH
1484: LD_INT 50
1486: PUSH
1487: LD_INT 89
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 123
1496: PUSH
1497: LD_INT 3
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PUSH
1504: LD_INT 182
1506: PUSH
1507: LD_INT 69
1509: PUSH
1510: EMPTY
1511: LIST
1512: LIST
1513: PUSH
1514: LD_INT 231
1516: PUSH
1517: LD_INT 174
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: LIST
1531: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 101 , 187 ] , [ 108 , 183 ] ] , [ [ 18 , 26 ] , [ 7 , 8 ] ] , [ [ 50 , 89 ] , [ 62 , 99 ] ] , [ [ 123 , 3 ] , [ 149 , 18 ] ] , [ [ 182 , 69 ] , [ 202 , 90 ] ] , [ [ 231 , 174 ] , [ 239 , 164 ] ] ] ;
1532: LD_ADDR_EXP 43
1536: PUSH
1537: LD_INT 101
1539: PUSH
1540: LD_INT 187
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: PUSH
1547: LD_INT 108
1549: PUSH
1550: LD_INT 183
1552: PUSH
1553: EMPTY
1554: LIST
1555: LIST
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: PUSH
1561: LD_INT 18
1563: PUSH
1564: LD_INT 26
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: PUSH
1571: LD_INT 7
1573: PUSH
1574: LD_INT 8
1576: PUSH
1577: EMPTY
1578: LIST
1579: LIST
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: PUSH
1585: LD_INT 50
1587: PUSH
1588: LD_INT 89
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PUSH
1595: LD_INT 62
1597: PUSH
1598: LD_INT 99
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: PUSH
1605: EMPTY
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 123
1611: PUSH
1612: LD_INT 3
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PUSH
1619: LD_INT 149
1621: PUSH
1622: LD_INT 18
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: PUSH
1633: LD_INT 182
1635: PUSH
1636: LD_INT 69
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: PUSH
1643: LD_INT 202
1645: PUSH
1646: LD_INT 90
1648: PUSH
1649: EMPTY
1650: LIST
1651: LIST
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PUSH
1657: LD_INT 231
1659: PUSH
1660: LD_INT 174
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: PUSH
1667: LD_INT 239
1669: PUSH
1670: LD_INT 164
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: PUSH
1677: EMPTY
1678: LIST
1679: LIST
1680: PUSH
1681: EMPTY
1682: LIST
1683: LIST
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 96 , 185 ] , [ 21 , 29 ] , [ 50 , 85 ] , [ 128 , 2 ] , [ 186 , 72 ] , [ 234 , 174 ] ] ;
1689: LD_ADDR_EXP 44
1693: PUSH
1694: LD_INT 96
1696: PUSH
1697: LD_INT 185
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 21
1706: PUSH
1707: LD_INT 29
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: PUSH
1714: LD_INT 50
1716: PUSH
1717: LD_INT 85
1719: PUSH
1720: EMPTY
1721: LIST
1722: LIST
1723: PUSH
1724: LD_INT 128
1726: PUSH
1727: LD_INT 2
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: PUSH
1734: LD_INT 186
1736: PUSH
1737: LD_INT 72
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: PUSH
1744: LD_INT 234
1746: PUSH
1747: LD_INT 174
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: LIST
1758: LIST
1759: LIST
1760: LIST
1761: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 96 , 185 ] , [ 109 , 179 ] ] , [ [ 21 , 29 ] , [ 9 , 5 ] ] , [ [ 50 , 85 ] , [ 66 , 102 ] ] , [ [ 128 , 2 ] , [ 152 , 15 ] ] , [ [ 186 , 72 ] , [ 200 , 86 ] ] , [ [ 234 , 174 ] , [ 237 , 160 ] ] ] ;
1762: LD_ADDR_EXP 45
1766: PUSH
1767: LD_INT 96
1769: PUSH
1770: LD_INT 185
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: PUSH
1777: LD_INT 109
1779: PUSH
1780: LD_INT 179
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: PUSH
1791: LD_INT 21
1793: PUSH
1794: LD_INT 29
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: PUSH
1801: LD_INT 9
1803: PUSH
1804: LD_INT 5
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: PUSH
1815: LD_INT 50
1817: PUSH
1818: LD_INT 85
1820: PUSH
1821: EMPTY
1822: LIST
1823: LIST
1824: PUSH
1825: LD_INT 66
1827: PUSH
1828: LD_INT 102
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: PUSH
1835: EMPTY
1836: LIST
1837: LIST
1838: PUSH
1839: LD_INT 128
1841: PUSH
1842: LD_INT 2
1844: PUSH
1845: EMPTY
1846: LIST
1847: LIST
1848: PUSH
1849: LD_INT 152
1851: PUSH
1852: LD_INT 15
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: PUSH
1863: LD_INT 186
1865: PUSH
1866: LD_INT 72
1868: PUSH
1869: EMPTY
1870: LIST
1871: LIST
1872: PUSH
1873: LD_INT 200
1875: PUSH
1876: LD_INT 86
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: LD_INT 234
1889: PUSH
1890: LD_INT 174
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: PUSH
1897: LD_INT 237
1899: PUSH
1900: LD_INT 160
1902: PUSH
1903: EMPTY
1904: LIST
1905: LIST
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: ST_TO_ADDR
// depot_def := [ [ 100 , 179 , 0 ] , [ 21 , 18 , 2 ] , [ 65 , 90 , 2 ] , [ 132 , 11 , 1 ] , [ 190 , 82 , 4 ] , [ 230 , 164 , 4 ] ] ;
1919: LD_ADDR_EXP 39
1923: PUSH
1924: LD_INT 100
1926: PUSH
1927: LD_INT 179
1929: PUSH
1930: LD_INT 0
1932: PUSH
1933: EMPTY
1934: LIST
1935: LIST
1936: LIST
1937: PUSH
1938: LD_INT 21
1940: PUSH
1941: LD_INT 18
1943: PUSH
1944: LD_INT 2
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: PUSH
1952: LD_INT 65
1954: PUSH
1955: LD_INT 90
1957: PUSH
1958: LD_INT 2
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: LIST
1965: PUSH
1966: LD_INT 132
1968: PUSH
1969: LD_INT 11
1971: PUSH
1972: LD_INT 1
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: LIST
1979: PUSH
1980: LD_INT 190
1982: PUSH
1983: LD_INT 82
1985: PUSH
1986: LD_INT 4
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: LIST
1993: PUSH
1994: LD_INT 230
1996: PUSH
1997: LD_INT 164
1999: PUSH
2000: LD_INT 4
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: LIST
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: LIST
2015: ST_TO_ADDR
// for i in depot_def do
2016: LD_ADDR_VAR 0 2
2020: PUSH
2021: LD_EXP 39
2025: PUSH
2026: FOR_IN
2027: IFFALSE 2101
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 10 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 10 ) ] ] ;
2029: LD_ADDR_EXP 41
2033: PUSH
2034: LD_EXP 41
2038: PUSH
2039: LD_VAR 0 2
2043: PUSH
2044: LD_INT 1
2046: ARRAY
2047: PPUSH
2048: LD_VAR 0 2
2052: PUSH
2053: LD_INT 3
2055: ARRAY
2056: PPUSH
2057: LD_INT 10
2059: PPUSH
2060: CALL_OW 272
2064: PUSH
2065: LD_VAR 0 2
2069: PUSH
2070: LD_INT 2
2072: ARRAY
2073: PPUSH
2074: LD_VAR 0 2
2078: PUSH
2079: LD_INT 3
2081: ARRAY
2082: PPUSH
2083: LD_INT 10
2085: PPUSH
2086: CALL_OW 273
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: PUSH
2095: EMPTY
2096: LIST
2097: ADD
2098: ST_TO_ADDR
2099: GO 2026
2101: POP
2102: POP
// breastworks_def := [ [ [ 88 , 154 , 3 ] , [ 105 , 167 , 4 ] ] , [ [ 27 , 32 , 5 ] , [ 40 , 24 , 4 ] ] , [ [ 78 , 102 , 5 ] , [ 74 , 84 , 3 ] ] , [ [ 128 , 20 , 0 ] , [ 122 , 6 , 1 ] ] , [ [ 185 , 92 , 0 ] , [ 175 , 73 , 1 ] ] , [ [ 219 , 171 , 1 ] , [ 219 , 151 , 2 ] ] ] ;
2103: LD_ADDR_EXP 40
2107: PUSH
2108: LD_INT 88
2110: PUSH
2111: LD_INT 154
2113: PUSH
2114: LD_INT 3
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: LIST
2121: PUSH
2122: LD_INT 105
2124: PUSH
2125: LD_INT 167
2127: PUSH
2128: LD_INT 4
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: LIST
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: PUSH
2140: LD_INT 27
2142: PUSH
2143: LD_INT 32
2145: PUSH
2146: LD_INT 5
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: LIST
2153: PUSH
2154: LD_INT 40
2156: PUSH
2157: LD_INT 24
2159: PUSH
2160: LD_INT 4
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: LIST
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: PUSH
2172: LD_INT 78
2174: PUSH
2175: LD_INT 102
2177: PUSH
2178: LD_INT 5
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: LIST
2185: PUSH
2186: LD_INT 74
2188: PUSH
2189: LD_INT 84
2191: PUSH
2192: LD_INT 3
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: LIST
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: PUSH
2204: LD_INT 128
2206: PUSH
2207: LD_INT 20
2209: PUSH
2210: LD_INT 0
2212: PUSH
2213: EMPTY
2214: LIST
2215: LIST
2216: LIST
2217: PUSH
2218: LD_INT 122
2220: PUSH
2221: LD_INT 6
2223: PUSH
2224: LD_INT 1
2226: PUSH
2227: EMPTY
2228: LIST
2229: LIST
2230: LIST
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PUSH
2236: LD_INT 185
2238: PUSH
2239: LD_INT 92
2241: PUSH
2242: LD_INT 0
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: LIST
2249: PUSH
2250: LD_INT 175
2252: PUSH
2253: LD_INT 73
2255: PUSH
2256: LD_INT 1
2258: PUSH
2259: EMPTY
2260: LIST
2261: LIST
2262: LIST
2263: PUSH
2264: EMPTY
2265: LIST
2266: LIST
2267: PUSH
2268: LD_INT 219
2270: PUSH
2271: LD_INT 171
2273: PUSH
2274: LD_INT 1
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: LIST
2281: PUSH
2282: LD_INT 219
2284: PUSH
2285: LD_INT 151
2287: PUSH
2288: LD_INT 2
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: LIST
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: EMPTY
2301: LIST
2302: LIST
2303: LIST
2304: LIST
2305: LIST
2306: LIST
2307: ST_TO_ADDR
// for i = 1 to Side_Positions do
2308: LD_ADDR_VAR 0 2
2312: PUSH
2313: DOUBLE
2314: LD_INT 1
2316: DEC
2317: ST_TO_ADDR
2318: LD_EXP 36
2322: PUSH
2323: FOR_TO
2324: IFFALSE 2454
// begin if not Side_Positions [ i ] then
2326: LD_EXP 36
2330: PUSH
2331: LD_VAR 0 2
2335: ARRAY
2336: NOT
2337: IFFALSE 2341
// continue ;
2339: GO 2323
// if def_extra_oil_deposits then
2341: LD_EXP 6
2345: IFFALSE 2403
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2347: LD_ADDR_VAR 0 3
2351: PUSH
2352: LD_EXP 43
2356: PUSH
2357: LD_EXP 36
2361: PUSH
2362: LD_VAR 0 2
2366: ARRAY
2367: ARRAY
2368: PUSH
2369: FOR_IN
2370: IFFALSE 2399
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2372: LD_VAR 0 3
2376: PUSH
2377: LD_INT 1
2379: ARRAY
2380: PPUSH
2381: LD_VAR 0 3
2385: PUSH
2386: LD_INT 2
2388: ARRAY
2389: PPUSH
2390: LD_INT 2
2392: PPUSH
2393: CALL_OW 62
2397: GO 2369
2399: POP
2400: POP
2401: GO 2452
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2403: LD_EXP 42
2407: PUSH
2408: LD_EXP 36
2412: PUSH
2413: LD_VAR 0 2
2417: ARRAY
2418: ARRAY
2419: PUSH
2420: LD_INT 1
2422: ARRAY
2423: PPUSH
2424: LD_EXP 42
2428: PUSH
2429: LD_EXP 36
2433: PUSH
2434: LD_VAR 0 2
2438: ARRAY
2439: ARRAY
2440: PUSH
2441: LD_INT 2
2443: ARRAY
2444: PPUSH
2445: LD_INT 2
2447: PPUSH
2448: CALL_OW 62
// end ;
2452: GO 2323
2454: POP
2455: POP
// if def_extra_sib_deposits then
2456: LD_EXP 7
2460: IFFALSE 2614
// for i = 1 to Side_Positions do
2462: LD_ADDR_VAR 0 2
2466: PUSH
2467: DOUBLE
2468: LD_INT 1
2470: DEC
2471: ST_TO_ADDR
2472: LD_EXP 36
2476: PUSH
2477: FOR_TO
2478: IFFALSE 2612
// begin if not Side_Positions [ i ] then
2480: LD_EXP 36
2484: PUSH
2485: LD_VAR 0 2
2489: ARRAY
2490: NOT
2491: IFFALSE 2495
// continue ;
2493: GO 2477
// if def_extra_sib_deposits = 2 then
2495: LD_EXP 7
2499: PUSH
2500: LD_INT 2
2502: EQUAL
2503: IFFALSE 2561
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
2505: LD_ADDR_VAR 0 3
2509: PUSH
2510: LD_EXP 45
2514: PUSH
2515: LD_EXP 36
2519: PUSH
2520: LD_VAR 0 2
2524: ARRAY
2525: ARRAY
2526: PUSH
2527: FOR_IN
2528: IFFALSE 2557
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2530: LD_VAR 0 3
2534: PUSH
2535: LD_INT 1
2537: ARRAY
2538: PPUSH
2539: LD_VAR 0 3
2543: PUSH
2544: LD_INT 2
2546: ARRAY
2547: PPUSH
2548: LD_INT 3
2550: PPUSH
2551: CALL_OW 62
2555: GO 2527
2557: POP
2558: POP
2559: GO 2610
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2561: LD_EXP 44
2565: PUSH
2566: LD_EXP 36
2570: PUSH
2571: LD_VAR 0 2
2575: ARRAY
2576: ARRAY
2577: PUSH
2578: LD_INT 1
2580: ARRAY
2581: PPUSH
2582: LD_EXP 44
2586: PUSH
2587: LD_EXP 36
2591: PUSH
2592: LD_VAR 0 2
2596: ARRAY
2597: ARRAY
2598: PUSH
2599: LD_INT 2
2601: ARRAY
2602: PPUSH
2603: LD_INT 3
2605: PPUSH
2606: CALL_OW 62
// end ;
2610: GO 2477
2612: POP
2613: POP
// end ;
2614: LD_VAR 0 1
2618: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2619: LD_INT 0
2621: PPUSH
2622: PPUSH
2623: PPUSH
// if not Team_Game then
2624: LD_EXP 38
2628: NOT
2629: IFFALSE 2727
// begin for i = 1 to 8 do
2631: LD_ADDR_VAR 0 2
2635: PUSH
2636: DOUBLE
2637: LD_INT 1
2639: DEC
2640: ST_TO_ADDR
2641: LD_INT 8
2643: PUSH
2644: FOR_TO
2645: IFFALSE 2723
// for j = 1 to 8 do
2647: LD_ADDR_VAR 0 3
2651: PUSH
2652: DOUBLE
2653: LD_INT 1
2655: DEC
2656: ST_TO_ADDR
2657: LD_INT 8
2659: PUSH
2660: FOR_TO
2661: IFFALSE 2719
// if i <> j then
2663: LD_VAR 0 2
2667: PUSH
2668: LD_VAR 0 3
2672: NONEQUAL
2673: IFFALSE 2697
// SetAttitude ( i , j , att_neutral , true ) else
2675: LD_VAR 0 2
2679: PPUSH
2680: LD_VAR 0 3
2684: PPUSH
2685: LD_INT 0
2687: PPUSH
2688: LD_INT 1
2690: PPUSH
2691: CALL_OW 80
2695: GO 2717
// SetAttitude ( i , j , att_friend , true ) ;
2697: LD_VAR 0 2
2701: PPUSH
2702: LD_VAR 0 3
2706: PPUSH
2707: LD_INT 1
2709: PPUSH
2710: LD_INT 1
2712: PPUSH
2713: CALL_OW 80
2717: GO 2660
2719: POP
2720: POP
2721: GO 2644
2723: POP
2724: POP
// end else
2725: GO 2902
// begin if def_shared_vision then
2727: LD_EXP 8
2731: IFFALSE 2796
// begin for i in Teams do
2733: LD_ADDR_VAR 0 2
2737: PUSH
2738: LD_EXP 35
2742: PUSH
2743: FOR_IN
2744: IFFALSE 2794
// for j = 2 to i do
2746: LD_ADDR_VAR 0 3
2750: PUSH
2751: DOUBLE
2752: LD_INT 2
2754: DEC
2755: ST_TO_ADDR
2756: LD_VAR 0 2
2760: PUSH
2761: FOR_TO
2762: IFFALSE 2790
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2764: LD_VAR 0 2
2768: PUSH
2769: LD_VAR 0 3
2773: ARRAY
2774: PPUSH
2775: LD_VAR 0 2
2779: PUSH
2780: LD_INT 1
2782: ARRAY
2783: PPUSH
2784: CALL_OW 343
2788: GO 2761
2790: POP
2791: POP
2792: GO 2743
2794: POP
2795: POP
// end ; for i = 1 to 8 do
2796: LD_ADDR_VAR 0 2
2800: PUSH
2801: DOUBLE
2802: LD_INT 1
2804: DEC
2805: ST_TO_ADDR
2806: LD_INT 8
2808: PUSH
2809: FOR_TO
2810: IFFALSE 2900
// for j = 1 to 8 do
2812: LD_ADDR_VAR 0 3
2816: PUSH
2817: DOUBLE
2818: LD_INT 1
2820: DEC
2821: ST_TO_ADDR
2822: LD_INT 8
2824: PUSH
2825: FOR_TO
2826: IFFALSE 2896
// if Side_Teams [ i ] = Side_Teams [ j ] then
2828: LD_EXP 34
2832: PUSH
2833: LD_VAR 0 2
2837: ARRAY
2838: PUSH
2839: LD_EXP 34
2843: PUSH
2844: LD_VAR 0 3
2848: ARRAY
2849: EQUAL
2850: IFFALSE 2874
// SetAttitude ( i , j , att_friend , true ) else
2852: LD_VAR 0 2
2856: PPUSH
2857: LD_VAR 0 3
2861: PPUSH
2862: LD_INT 1
2864: PPUSH
2865: LD_INT 1
2867: PPUSH
2868: CALL_OW 80
2872: GO 2894
// SetAttitude ( i , j , att_enemy , true ) ;
2874: LD_VAR 0 2
2878: PPUSH
2879: LD_VAR 0 3
2883: PPUSH
2884: LD_INT 2
2886: PPUSH
2887: LD_INT 1
2889: PPUSH
2890: CALL_OW 80
2894: GO 2825
2896: POP
2897: POP
2898: GO 2809
2900: POP
2901: POP
// end ; end ;
2902: LD_VAR 0 1
2906: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2907: LD_INT 0
2909: PPUSH
2910: PPUSH
2911: PPUSH
2912: PPUSH
// result := [ ] ;
2913: LD_ADDR_VAR 0 7
2917: PUSH
2918: EMPTY
2919: ST_TO_ADDR
// for i := 1 to count do
2920: LD_ADDR_VAR 0 8
2924: PUSH
2925: DOUBLE
2926: LD_INT 1
2928: DEC
2929: ST_TO_ADDR
2930: LD_VAR 0 1
2934: PUSH
2935: FOR_TO
2936: IFFALSE 3386
// begin uc_direction := Rand ( 0 , 5 ) ;
2938: LD_ADDR_OWVAR 24
2942: PUSH
2943: LD_INT 0
2945: PPUSH
2946: LD_INT 5
2948: PPUSH
2949: CALL_OW 12
2953: ST_TO_ADDR
// if commander then
2954: LD_LOC 1
2958: IFFALSE 3099
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2960: LD_ADDR_OWVAR 26
2964: PUSH
2965: LD_OWVAR 19
2969: PUSH
2970: LD_OWVAR 20
2974: ARRAY
2975: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2976: LD_INT 1
2978: PPUSH
2979: LD_INT 2
2981: PPUSH
2982: CALL_OW 12
2986: PPUSH
2987: LD_VAR 0 2
2991: PPUSH
2992: LD_EXP 24
2996: PUSH
2997: LD_INT 2
2999: PLUS
3000: PPUSH
3001: CALL_OW 380
// hc_importance := 105 ;
3005: LD_ADDR_OWVAR 32
3009: PUSH
3010: LD_INT 105
3012: ST_TO_ADDR
// commander := false ;
3013: LD_ADDR_LOC 1
3017: PUSH
3018: LD_INT 0
3020: ST_TO_ADDR
// if Multiplayer then
3021: LD_OWVAR 4
3025: IFFALSE 3097
// begin if sheik then
3027: LD_EXP 47
3031: IFFALSE 3059
// begin hc_gallery :=  ;
3033: LD_ADDR_OWVAR 33
3037: PUSH
3038: LD_STRING 
3040: ST_TO_ADDR
// hc_class := class_desert_warior ;
3041: LD_ADDR_OWVAR 28
3045: PUSH
3046: LD_INT 11
3048: ST_TO_ADDR
// hc_sex := sex_male ;
3049: LD_ADDR_OWVAR 27
3053: PUSH
3054: LD_INT 1
3056: ST_TO_ADDR
// end else
3057: GO 3097
// begin hc_gallery := MULTIAVATARS ;
3059: LD_ADDR_OWVAR 33
3063: PUSH
3064: LD_STRING MULTIAVATARS
3066: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3067: LD_ADDR_OWVAR 34
3071: PUSH
3072: LD_OWVAR 20
3076: PPUSH
3077: CALL_OW 525
3081: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3082: LD_ADDR_OWVAR 27
3086: PUSH
3087: LD_OWVAR 20
3091: PPUSH
3092: CALL_OW 526
3096: ST_TO_ADDR
// end ; end ; end else
3097: GO 3162
// begin hc_name :=  ;
3099: LD_ADDR_OWVAR 26
3103: PUSH
3104: LD_STRING 
3106: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3107: LD_INT 1
3109: PPUSH
3110: LD_INT 2
3112: PPUSH
3113: CALL_OW 12
3117: PPUSH
3118: LD_VAR 0 2
3122: PPUSH
3123: LD_EXP 24
3127: PPUSH
3128: CALL_OW 380
// hc_importance := 0 ;
3132: LD_ADDR_OWVAR 32
3136: PUSH
3137: LD_INT 0
3139: ST_TO_ADDR
// if Multiplayer then
3140: LD_OWVAR 4
3144: IFFALSE 3162
// begin hc_gallery :=  ;
3146: LD_ADDR_OWVAR 33
3150: PUSH
3151: LD_STRING 
3153: ST_TO_ADDR
// hc_face_number := 0 ;
3154: LD_ADDR_OWVAR 34
3158: PUSH
3159: LD_INT 0
3161: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3162: LD_ADDR_VAR 0 10
3166: PUSH
3167: CALL_OW 44
3171: ST_TO_ADDR
// if global_defined then
3172: LD_LOC 3
3176: IFFALSE 3316
// begin if ( cl = class_soldier ) then
3178: LD_VAR 0 2
3182: PUSH
3183: LD_INT 1
3185: EQUAL
3186: IFFALSE 3206
// j := i + soldiers_created else
3188: LD_ADDR_VAR 0 9
3192: PUSH
3193: LD_VAR 0 8
3197: PUSH
3198: LD_LOC 4
3202: PLUS
3203: ST_TO_ADDR
3204: GO 3216
// j := i ;
3206: LD_ADDR_VAR 0 9
3210: PUSH
3211: LD_VAR 0 8
3215: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3216: LD_LOC 2
3220: PUSH
3221: LD_VAR 0 2
3225: ARRAY
3226: PUSH
3227: LD_VAR 0 9
3231: ARRAY
3232: PPUSH
3233: LD_VAR 0 10
3237: PPUSH
3238: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3242: LD_VAR 0 10
3246: PPUSH
3247: LD_INT 2
3249: PPUSH
3250: LD_LOC 2
3254: PUSH
3255: LD_VAR 0 2
3259: ARRAY
3260: PUSH
3261: LD_VAR 0 9
3265: ARRAY
3266: PPUSH
3267: LD_INT 2
3269: PPUSH
3270: CALL_OW 260
3274: PPUSH
3275: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3279: LD_VAR 0 10
3283: PPUSH
3284: LD_INT 1
3286: PPUSH
3287: LD_LOC 2
3291: PUSH
3292: LD_VAR 0 2
3296: ARRAY
3297: PUSH
3298: LD_VAR 0 9
3302: ARRAY
3303: PPUSH
3304: LD_INT 1
3306: PPUSH
3307: CALL_OW 260
3311: PPUSH
3312: CALL_OW 239
// end ; if building then
3316: LD_VAR 0 6
3320: IFFALSE 3338
// PlaceHumanInUnit ( un , building ) else
3322: LD_VAR 0 10
3326: PPUSH
3327: LD_VAR 0 6
3331: PPUSH
3332: CALL_OW 52
3336: GO 3365
// PlaceUnitXYR ( un , x , y , r , false ) ;
3338: LD_VAR 0 10
3342: PPUSH
3343: LD_VAR 0 3
3347: PPUSH
3348: LD_VAR 0 4
3352: PPUSH
3353: LD_VAR 0 5
3357: PPUSH
3358: LD_INT 0
3360: PPUSH
3361: CALL_OW 50
// result := result ^ [ un ] ;
3365: LD_ADDR_VAR 0 7
3369: PUSH
3370: LD_VAR 0 7
3374: PUSH
3375: LD_VAR 0 10
3379: PUSH
3380: EMPTY
3381: LIST
3382: ADD
3383: ST_TO_ADDR
// end ;
3384: GO 2935
3386: POP
3387: POP
// if not global_defined then
3388: LD_LOC 3
3392: NOT
3393: IFFALSE 3471
// if ( global_units >= cl ) then
3395: LD_LOC 2
3399: PUSH
3400: LD_VAR 0 2
3404: GREATEREQUAL
3405: IFFALSE 3446
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3407: LD_ADDR_LOC 2
3411: PUSH
3412: LD_LOC 2
3416: PPUSH
3417: LD_VAR 0 2
3421: PPUSH
3422: LD_LOC 2
3426: PUSH
3427: LD_VAR 0 2
3431: ARRAY
3432: PUSH
3433: LD_VAR 0 7
3437: ADD
3438: PPUSH
3439: CALL_OW 1
3443: ST_TO_ADDR
3444: GO 3471
// global_units := Replace ( global_units , cl , result ) ;
3446: LD_ADDR_LOC 2
3450: PUSH
3451: LD_LOC 2
3455: PPUSH
3456: LD_VAR 0 2
3460: PPUSH
3461: LD_VAR 0 7
3465: PPUSH
3466: CALL_OW 1
3470: ST_TO_ADDR
// end ;
3471: LD_VAR 0 7
3475: RET
// function prepare_mastodonts ( n ) ; var i ; begin
3476: LD_INT 0
3478: PPUSH
3479: PPUSH
// uc_side := 0 ;
3480: LD_ADDR_OWVAR 20
3484: PUSH
3485: LD_INT 0
3487: ST_TO_ADDR
// uc_nation := 0 ;
3488: LD_ADDR_OWVAR 21
3492: PUSH
3493: LD_INT 0
3495: ST_TO_ADDR
// vc_chassis := 31 ;
3496: LD_ADDR_OWVAR 37
3500: PUSH
3501: LD_INT 31
3503: ST_TO_ADDR
// vc_control := control_rider ;
3504: LD_ADDR_OWVAR 38
3508: PUSH
3509: LD_INT 4
3511: ST_TO_ADDR
// for i = 1 to n do
3512: LD_ADDR_VAR 0 3
3516: PUSH
3517: DOUBLE
3518: LD_INT 1
3520: DEC
3521: ST_TO_ADDR
3522: LD_VAR 0 1
3526: PUSH
3527: FOR_TO
3528: IFFALSE 3547
// PlaceUnitArea ( CreateVehicle , MastodontSpawn , false ) ;
3530: CALL_OW 45
3534: PPUSH
3535: LD_INT 15
3537: PPUSH
3538: LD_INT 0
3540: PPUSH
3541: CALL_OW 49
3545: GO 3527
3547: POP
3548: POP
// end ;
3549: LD_VAR 0 2
3553: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3554: LD_INT 0
3556: PPUSH
3557: PPUSH
3558: PPUSH
3559: PPUSH
3560: PPUSH
3561: PPUSH
3562: PPUSH
3563: PPUSH
3564: PPUSH
// if side in [ 0 , 9 ] then
3565: LD_VAR 0 1
3569: PUSH
3570: LD_INT 0
3572: PUSH
3573: LD_INT 9
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: IN
3580: IFFALSE 3584
// exit ;
3582: GO 4601
// pos := Side_Positions [ side ] ;
3584: LD_ADDR_VAR 0 3
3588: PUSH
3589: LD_EXP 36
3593: PUSH
3594: LD_VAR 0 1
3598: ARRAY
3599: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3600: LD_ADDR_OWVAR 21
3604: PUSH
3605: LD_EXP 37
3609: PUSH
3610: LD_VAR 0 1
3614: ARRAY
3615: ST_TO_ADDR
// uc_side := side ;
3616: LD_ADDR_OWVAR 20
3620: PUSH
3621: LD_VAR 0 1
3625: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3626: LD_ADDR_VAR 0 4
3630: PUSH
3631: LD_EXP 39
3635: PUSH
3636: LD_VAR 0 3
3640: ARRAY
3641: PUSH
3642: LD_INT 1
3644: ARRAY
3645: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3646: LD_ADDR_VAR 0 5
3650: PUSH
3651: LD_EXP 39
3655: PUSH
3656: LD_VAR 0 3
3660: ARRAY
3661: PUSH
3662: LD_INT 2
3664: ARRAY
3665: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3666: LD_ADDR_VAR 0 6
3670: PUSH
3671: LD_EXP 39
3675: PUSH
3676: LD_VAR 0 3
3680: ARRAY
3681: PUSH
3682: LD_INT 3
3684: ARRAY
3685: ST_TO_ADDR
// if is_depot then
3686: LD_EXP 21
3690: IFFALSE 3823
// begin bc_type = b_depot ;
3692: LD_ADDR_OWVAR 42
3696: PUSH
3697: LD_INT 0
3699: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3700: LD_ADDR_VAR 0 10
3704: PUSH
3705: LD_VAR 0 4
3709: PPUSH
3710: LD_VAR 0 5
3714: PPUSH
3715: LD_VAR 0 6
3719: PPUSH
3720: CALL_OW 47
3724: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3725: LD_VAR 0 10
3729: PPUSH
3730: LD_STRING @
3732: PUSH
3733: LD_VAR 0 1
3737: STR
3738: PPUSH
3739: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3743: LD_VAR 0 10
3747: PPUSH
3748: CALL_OW 274
3752: PPUSH
3753: LD_INT 1
3755: PPUSH
3756: LD_EXP 26
3760: PUSH
3761: LD_INT 1
3763: ARRAY
3764: PPUSH
3765: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3769: LD_VAR 0 10
3773: PPUSH
3774: CALL_OW 274
3778: PPUSH
3779: LD_INT 2
3781: PPUSH
3782: LD_EXP 26
3786: PUSH
3787: LD_INT 2
3789: ARRAY
3790: PPUSH
3791: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3795: LD_VAR 0 10
3799: PPUSH
3800: CALL_OW 274
3804: PPUSH
3805: LD_INT 3
3807: PPUSH
3808: LD_EXP 26
3812: PUSH
3813: LD_INT 3
3815: ARRAY
3816: PPUSH
3817: CALL_OW 277
// end else
3821: GO 3967
// begin for i := 1 to 3 do
3823: LD_ADDR_VAR 0 7
3827: PUSH
3828: DOUBLE
3829: LD_INT 1
3831: DEC
3832: ST_TO_ADDR
3833: LD_INT 3
3835: PUSH
3836: FOR_TO
3837: IFFALSE 3965
// begin r := starting_resources [ i ] ;
3839: LD_ADDR_VAR 0 8
3843: PUSH
3844: LD_EXP 26
3848: PUSH
3849: LD_VAR 0 7
3853: ARRAY
3854: ST_TO_ADDR
// while r >= 10 do
3855: LD_VAR 0 8
3859: PUSH
3860: LD_INT 10
3862: GREATEREQUAL
3863: IFFALSE 3963
// if r > 50 then
3865: LD_VAR 0 8
3869: PUSH
3870: LD_INT 50
3872: GREATER
3873: IFFALSE 3919
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3875: LD_VAR 0 7
3879: PPUSH
3880: LD_INT 5
3882: PPUSH
3883: LD_VAR 0 4
3887: PPUSH
3888: LD_VAR 0 5
3892: PPUSH
3893: LD_INT 4
3895: PPUSH
3896: LD_INT 0
3898: PPUSH
3899: CALL_OW 60
// r := r - 50 ;
3903: LD_ADDR_VAR 0 8
3907: PUSH
3908: LD_VAR 0 8
3912: PUSH
3913: LD_INT 50
3915: MINUS
3916: ST_TO_ADDR
// end else
3917: GO 3961
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3919: LD_VAR 0 7
3923: PPUSH
3924: LD_VAR 0 8
3928: PUSH
3929: LD_INT 10
3931: DIV
3932: PPUSH
3933: LD_VAR 0 4
3937: PPUSH
3938: LD_VAR 0 5
3942: PPUSH
3943: LD_INT 4
3945: PPUSH
3946: LD_INT 0
3948: PPUSH
3949: CALL_OW 60
// r := 0 ;
3953: LD_ADDR_VAR 0 8
3957: PUSH
3958: LD_INT 0
3960: ST_TO_ADDR
// end ;
3961: GO 3855
// end ;
3963: GO 3836
3965: POP
3966: POP
// end ; for r in starting_crates do
3967: LD_ADDR_VAR 0 8
3971: PUSH
3972: LD_EXP 25
3976: PUSH
3977: FOR_IN
3978: IFFALSE 4010
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3980: LD_INT 1
3982: PPUSH
3983: LD_INT 5
3985: PPUSH
3986: LD_VAR 0 4
3990: PPUSH
3991: LD_VAR 0 5
3995: PPUSH
3996: LD_VAR 0 8
4000: PPUSH
4001: LD_INT 0
4003: PPUSH
4004: CALL_OW 60
4008: GO 3977
4010: POP
4011: POP
// if def_morale_flags then
4012: LD_EXP 9
4016: IFFALSE 4155
// begin x := start_def [ pos ] [ 1 ] ;
4018: LD_ADDR_VAR 0 4
4022: PUSH
4023: LD_EXP 41
4027: PUSH
4028: LD_VAR 0 3
4032: ARRAY
4033: PUSH
4034: LD_INT 1
4036: ARRAY
4037: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4038: LD_ADDR_VAR 0 5
4042: PUSH
4043: LD_EXP 41
4047: PUSH
4048: LD_VAR 0 3
4052: ARRAY
4053: PUSH
4054: LD_INT 2
4056: ARRAY
4057: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4058: LD_VAR 0 4
4062: PPUSH
4063: LD_VAR 0 5
4067: PPUSH
4068: LD_INT 12
4070: PPUSH
4071: LD_INT 2
4073: PPUSH
4074: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4078: LD_ADDR_EXP 46
4082: PUSH
4083: LD_EXP 46
4087: PUSH
4088: LD_VAR 0 1
4092: PPUSH
4093: LD_VAR 0 4
4097: PPUSH
4098: LD_VAR 0 5
4102: PPUSH
4103: LD_INT 1
4105: PUSH
4106: LD_INT 100
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: PUSH
4113: LD_INT 2
4115: PUSH
4116: LD_INT 50
4118: PUSH
4119: EMPTY
4120: LIST
4121: LIST
4122: PUSH
4123: LD_INT 3
4125: PUSH
4126: LD_INT 20
4128: PUSH
4129: EMPTY
4130: LIST
4131: LIST
4132: PUSH
4133: LD_INT 20
4135: PUSH
4136: LD_INT 100
4138: PUSH
4139: EMPTY
4140: LIST
4141: LIST
4142: PUSH
4143: EMPTY
4144: LIST
4145: LIST
4146: LIST
4147: LIST
4148: PPUSH
4149: CALL_OW 418
4153: ADD
4154: ST_TO_ADDR
// end ; commander := true ;
4155: LD_ADDR_LOC 1
4159: PUSH
4160: LD_INT 1
4162: ST_TO_ADDR
// soldiers_created := 0 ;
4163: LD_ADDR_LOC 4
4167: PUSH
4168: LD_INT 0
4170: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4171: LD_ADDR_VAR 0 7
4175: PUSH
4176: DOUBLE
4177: LD_INT 1
4179: DEC
4180: ST_TO_ADDR
4181: LD_EXP 22
4185: PUSH
4186: FOR_TO
4187: IFFALSE 4340
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4189: LD_ADDR_VAR 0 4
4193: PUSH
4194: LD_EXP 40
4198: PUSH
4199: LD_VAR 0 3
4203: ARRAY
4204: PUSH
4205: LD_VAR 0 7
4209: ARRAY
4210: PUSH
4211: LD_INT 1
4213: ARRAY
4214: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4215: LD_ADDR_VAR 0 5
4219: PUSH
4220: LD_EXP 40
4224: PUSH
4225: LD_VAR 0 3
4229: ARRAY
4230: PUSH
4231: LD_VAR 0 7
4235: ARRAY
4236: PUSH
4237: LD_INT 2
4239: ARRAY
4240: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4241: LD_ADDR_VAR 0 6
4245: PUSH
4246: LD_EXP 40
4250: PUSH
4251: LD_VAR 0 3
4255: ARRAY
4256: PUSH
4257: LD_VAR 0 7
4261: ARRAY
4262: PUSH
4263: LD_INT 3
4265: ARRAY
4266: ST_TO_ADDR
// bc_type := b_breastwork ;
4267: LD_ADDR_OWVAR 42
4271: PUSH
4272: LD_INT 31
4274: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4275: LD_ADDR_VAR 0 9
4279: PUSH
4280: LD_VAR 0 4
4284: PPUSH
4285: LD_VAR 0 5
4289: PPUSH
4290: LD_VAR 0 6
4294: PPUSH
4295: CALL_OW 47
4299: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4300: LD_INT 1
4302: PPUSH
4303: LD_INT 1
4305: PPUSH
4306: LD_INT 0
4308: PPUSH
4309: LD_INT 0
4311: PPUSH
4312: LD_INT 0
4314: PPUSH
4315: LD_VAR 0 9
4319: PPUSH
4320: CALL 2907 0 6
// soldiers_created := soldiers_created + 1 ;
4324: LD_ADDR_LOC 4
4328: PUSH
4329: LD_LOC 4
4333: PUSH
4334: LD_INT 1
4336: PLUS
4337: ST_TO_ADDR
// end ;
4338: GO 4186
4340: POP
4341: POP
// x := start_def [ pos ] [ 1 ] ;
4342: LD_ADDR_VAR 0 4
4346: PUSH
4347: LD_EXP 41
4351: PUSH
4352: LD_VAR 0 3
4356: ARRAY
4357: PUSH
4358: LD_INT 1
4360: ARRAY
4361: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4362: LD_ADDR_VAR 0 5
4366: PUSH
4367: LD_EXP 41
4371: PUSH
4372: LD_VAR 0 3
4376: ARRAY
4377: PUSH
4378: LD_INT 2
4380: ARRAY
4381: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4382: LD_LOC 8
4386: PUSH
4387: LD_EXP 22
4391: MINUS
4392: PPUSH
4393: LD_INT 1
4395: PPUSH
4396: LD_VAR 0 4
4400: PPUSH
4401: LD_VAR 0 5
4405: PPUSH
4406: LD_INT 5
4408: PPUSH
4409: LD_INT 0
4411: PPUSH
4412: CALL 2907 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4416: LD_LOC 5
4420: PPUSH
4421: LD_INT 2
4423: PPUSH
4424: LD_VAR 0 4
4428: PPUSH
4429: LD_VAR 0 5
4433: PPUSH
4434: LD_INT 5
4436: PPUSH
4437: LD_INT 0
4439: PPUSH
4440: CALL 2907 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4444: LD_LOC 7
4448: PPUSH
4449: LD_INT 3
4451: PPUSH
4452: LD_VAR 0 4
4456: PPUSH
4457: LD_VAR 0 5
4461: PPUSH
4462: LD_INT 5
4464: PPUSH
4465: LD_INT 0
4467: PPUSH
4468: CALL 2907 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4472: LD_LOC 6
4476: PPUSH
4477: LD_INT 4
4479: PPUSH
4480: LD_VAR 0 4
4484: PPUSH
4485: LD_VAR 0 5
4489: PPUSH
4490: LD_INT 5
4492: PPUSH
4493: LD_INT 0
4495: PPUSH
4496: CALL 2907 0 6
// if def_siberite_detection then
4500: LD_EXP 10
4504: IFFALSE 4521
// SetTech ( tech_SibDet , side , state_researched ) ;
4506: LD_INT 20
4508: PPUSH
4509: LD_VAR 0 1
4513: PPUSH
4514: LD_INT 2
4516: PPUSH
4517: CALL_OW 322
// if def_siberite_bomb = 1 then
4521: LD_EXP 15
4525: PUSH
4526: LD_INT 1
4528: EQUAL
4529: IFFALSE 4563
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4531: LD_INT 25
4533: PPUSH
4534: LD_VAR 0 1
4538: PPUSH
4539: LD_INT 1
4541: PPUSH
4542: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4546: LD_INT 73
4548: PPUSH
4549: LD_VAR 0 1
4553: PPUSH
4554: LD_INT 1
4556: PPUSH
4557: CALL_OW 322
// end else
4561: GO 4593
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4563: LD_INT 25
4565: PPUSH
4566: LD_VAR 0 1
4570: PPUSH
4571: LD_INT 0
4573: PPUSH
4574: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4578: LD_INT 73
4580: PPUSH
4581: LD_VAR 0 1
4585: PPUSH
4586: LD_INT 0
4588: PPUSH
4589: CALL_OW 322
// end ; global_defined := true ;
4593: LD_ADDR_LOC 3
4597: PUSH
4598: LD_INT 1
4600: ST_TO_ADDR
// end ;
4601: LD_VAR 0 2
4605: RET
// every 0 0$1 do
4606: GO 4608
4608: DISABLE
// if ( def_siberite_bomb > 1 ) then
4609: LD_EXP 15
4613: PUSH
4614: LD_INT 1
4616: GREATER
4617: IFFALSE 4632
// begin wait ( siberite_bomb_Delay ) ;
4619: LD_EXP 33
4623: PPUSH
4624: CALL_OW 67
// EnableSibFiss ;
4628: CALL 4633 0 0
// end ;
4632: END
// function EnableSibFiss ; var i ; begin
4633: LD_INT 0
4635: PPUSH
4636: PPUSH
// for i := 1 to 8 do
4637: LD_ADDR_VAR 0 2
4641: PUSH
4642: DOUBLE
4643: LD_INT 1
4645: DEC
4646: ST_TO_ADDR
4647: LD_INT 8
4649: PUSH
4650: FOR_TO
4651: IFFALSE 4697
// if Side_Positions [ i ] then
4653: LD_EXP 36
4657: PUSH
4658: LD_VAR 0 2
4662: ARRAY
4663: IFFALSE 4695
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4665: LD_INT 25
4667: PPUSH
4668: LD_VAR 0 2
4672: PPUSH
4673: LD_INT 1
4675: PPUSH
4676: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4680: LD_INT 73
4682: PPUSH
4683: LD_VAR 0 2
4687: PPUSH
4688: LD_INT 1
4690: PPUSH
4691: CALL_OW 322
// end ;
4695: GO 4650
4697: POP
4698: POP
// end ;
4699: LD_VAR 0 1
4703: RET
// function prepare_sides ; var i ; begin
4704: LD_INT 0
4706: PPUSH
4707: PPUSH
// global_units := [ ] ;
4708: LD_ADDR_LOC 2
4712: PUSH
4713: EMPTY
4714: ST_TO_ADDR
// global_defined := false ;
4715: LD_ADDR_LOC 3
4719: PUSH
4720: LD_INT 0
4722: ST_TO_ADDR
// CountClassMembers ;
4723: CALL 4802 0 0
// for i := 1 to 8 do
4727: LD_ADDR_VAR 0 2
4731: PUSH
4732: DOUBLE
4733: LD_INT 1
4735: DEC
4736: ST_TO_ADDR
4737: LD_INT 8
4739: PUSH
4740: FOR_TO
4741: IFFALSE 4795
// if Side_Positions [ i ] then
4743: LD_EXP 36
4747: PUSH
4748: LD_VAR 0 2
4752: ARRAY
4753: IFFALSE 4793
// begin prepare_side ( i ) ;
4755: LD_VAR 0 2
4759: PPUSH
4760: CALL 3554 0 1
// if ( Game_Type = 12 ) and mastodont > 0 then
4764: LD_EXP 20
4768: PUSH
4769: LD_INT 12
4771: EQUAL
4772: PUSH
4773: LD_EXP 48
4777: PUSH
4778: LD_INT 0
4780: GREATER
4781: AND
4782: IFFALSE 4793
// prepare_mastodonts ( mastodont ) ;
4784: LD_EXP 48
4788: PPUSH
4789: CALL 3476 0 1
// end ;
4793: GO 4740
4795: POP
4796: POP
// end ;
4797: LD_VAR 0 1
4801: RET
// function CountClassMembers ; var Mode ; begin
4802: LD_INT 0
4804: PPUSH
4805: PPUSH
// if No_Mechs then
4806: LD_EXP 19
4810: IFFALSE 4822
// Mode := 2 else
4812: LD_ADDR_VAR 0 2
4816: PUSH
4817: LD_INT 2
4819: ST_TO_ADDR
4820: GO 4830
// Mode := 1 ;
4822: LD_ADDR_VAR 0 2
4826: PUSH
4827: LD_INT 1
4829: ST_TO_ADDR
// neng := number_of_people ;
4830: LD_ADDR_LOC 5
4834: PUSH
4835: LD_EXP 23
4839: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4840: LD_ADDR_LOC 8
4844: PUSH
4845: LD_LOC 5
4849: PUSH
4850: LD_INT 4
4852: PUSH
4853: LD_INT 3
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: PUSH
4860: LD_VAR 0 2
4864: ARRAY
4865: DIV
4866: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4867: LD_LOC 8
4871: PUSH
4872: LD_EXP 22
4876: LESS
4877: IFFALSE 4889
// nsol := number_of_breastworks ;
4879: LD_ADDR_LOC 8
4883: PUSH
4884: LD_EXP 22
4888: ST_TO_ADDR
// neng := neng - nsol ;
4889: LD_ADDR_LOC 5
4893: PUSH
4894: LD_LOC 5
4898: PUSH
4899: LD_LOC 8
4903: MINUS
4904: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4905: LD_ADDR_LOC 6
4909: PUSH
4910: LD_LOC 5
4914: PUSH
4915: LD_INT 3
4917: PUSH
4918: LD_INT 2
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: PUSH
4925: LD_VAR 0 2
4929: ARRAY
4930: DIV
4931: ST_TO_ADDR
// if ( nsci < 1 ) then
4932: LD_LOC 6
4936: PUSH
4937: LD_INT 1
4939: LESS
4940: IFFALSE 4950
// nsci := 1 ;
4942: LD_ADDR_LOC 6
4946: PUSH
4947: LD_INT 1
4949: ST_TO_ADDR
// neng := neng - nsci ;
4950: LD_ADDR_LOC 5
4954: PUSH
4955: LD_LOC 5
4959: PUSH
4960: LD_LOC 6
4964: MINUS
4965: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4966: LD_ADDR_LOC 7
4970: PUSH
4971: LD_LOC 5
4975: PUSH
4976: LD_INT 2
4978: DIV
4979: PUSH
4980: LD_INT 0
4982: PUSH
4983: EMPTY
4984: LIST
4985: LIST
4986: PUSH
4987: LD_VAR 0 2
4991: ARRAY
4992: ST_TO_ADDR
// neng := neng - nmech ;
4993: LD_ADDR_LOC 5
4997: PUSH
4998: LD_LOC 5
5002: PUSH
5003: LD_LOC 7
5007: MINUS
5008: ST_TO_ADDR
// if ( neng < 1 ) then
5009: LD_LOC 5
5013: PUSH
5014: LD_INT 1
5016: LESS
5017: IFFALSE 5027
// neng := 1 ;
5019: LD_ADDR_LOC 5
5023: PUSH
5024: LD_INT 1
5026: ST_TO_ADDR
// end ;
5027: LD_VAR 0 1
5031: RET
// function Init_Win_Condition ; begin
5032: LD_INT 0
5034: PPUSH
// if Team_Game then
5035: LD_EXP 38
5039: IFFALSE 5046
// enable ( 98 ) else
5041: LD_INT 98
5043: ENABLE_MARKED
5044: GO 5049
// enable ( 99 ) ;
5046: LD_INT 99
5048: ENABLE_MARKED
// case Game_Type of 3 :
5049: LD_EXP 20
5053: PUSH
5054: LD_INT 3
5056: DOUBLE
5057: EQUAL
5058: IFTRUE 5062
5060: GO 5068
5062: POP
// enable ( 100 ) ; end ;
5063: LD_INT 100
5065: ENABLE_MARKED
5066: GO 5069
5068: POP
// end ;
5069: LD_VAR 0 1
5073: RET
// starting begin disable ( 98 ) ;
5074: LD_INT 98
5076: DISABLE_MARKED
// disable ( 99 ) ;
5077: LD_INT 99
5079: DISABLE_MARKED
// disable ( 100 ) ;
5080: LD_INT 100
5082: DISABLE_MARKED
// disable ( 200 ) ;
5083: LD_INT 200
5085: DISABLE_MARKED
// disable ( 400 ) ;
5086: LD_INT 400
5088: DISABLE_MARKED
// disable ( 401 ) ;
5089: LD_INT 401
5091: DISABLE_MARKED
// mp_selectmsg := true ;
5092: LD_ADDR_OWVAR 13
5096: PUSH
5097: LD_INT 1
5099: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5100: CALL 0 0 0
// init_map ;
5104: CALL 1454 0 0
// init_respawning ;
5108: CALL 15230 0 0
// set_shared_visions_and_alliances ;
5112: CALL 2619 0 0
// prepare_sides ;
5116: CALL 4704 0 0
// ShowTimer ;
5120: CALL 9508 0 0
// if ( Game_Type = 4 ) then
5124: LD_EXP 20
5128: PUSH
5129: LD_INT 4
5131: EQUAL
5132: IFFALSE 5138
// InitBloodGods ;
5134: CALL 9273 0 0
// music_nat := Side_Nations [ your_side ] ;
5138: LD_ADDR_OWVAR 71
5142: PUSH
5143: LD_EXP 37
5147: PUSH
5148: LD_OWVAR 2
5152: ARRAY
5153: ST_TO_ADDR
// if IAmSpec then
5154: CALL_OW 531
5158: IFFALSE 5194
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
5160: LD_INT 0
5162: PPUSH
5163: LD_INT 0
5165: PPUSH
5166: LD_OWVAR 2
5170: PPUSH
5171: LD_INT 32767
5173: NEG
5174: PPUSH
5175: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
5179: LD_INT 104
5181: PPUSH
5182: LD_INT 69
5184: PPUSH
5185: CALL_OW 86
// enable ( 400 ) ;
5189: LD_INT 400
5191: ENABLE_MARKED
// end else
5192: GO 5248
// begin ResetFog ;
5194: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5198: LD_EXP 41
5202: PUSH
5203: LD_EXP 36
5207: PUSH
5208: LD_OWVAR 2
5212: ARRAY
5213: ARRAY
5214: PUSH
5215: LD_INT 1
5217: ARRAY
5218: PPUSH
5219: LD_EXP 41
5223: PUSH
5224: LD_EXP 36
5228: PUSH
5229: LD_OWVAR 2
5233: ARRAY
5234: ARRAY
5235: PUSH
5236: LD_INT 2
5238: ARRAY
5239: PPUSH
5240: CALL_OW 86
// Init_Win_Condition ;
5244: CALL 5032 0 0
// end ; AnimateTrees ( true ) ;
5248: LD_INT 1
5250: PPUSH
5251: CALL_OW 573
// InitApeman ;
5255: CALL 5954 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
5259: LD_ADDR_EXP 57
5263: PUSH
5264: LD_INT 9
5266: PUSH
5267: LD_INT 10
5269: PUSH
5270: LD_INT 11
5272: PUSH
5273: LD_INT 12
5275: PUSH
5276: LD_INT 13
5278: PUSH
5279: LD_INT 14
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: LIST
5286: LIST
5287: LIST
5288: LIST
5289: ST_TO_ADDR
// BeginBuildUp ;
5290: CALL 9669 0 0
// end ; end_of_file
5294: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5295: GO 5297
5297: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5298: LD_INT 4
5300: PPUSH
5301: LD_INT 5
5303: PPUSH
5304: CALL_OW 12
5308: PPUSH
5309: LD_INT 1
5311: PPUSH
5312: CALL_OW 57
// enable ;
5316: ENABLE
// end ;
5317: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5318: GO 5320
5320: DISABLE
5321: LD_INT 0
5323: PPUSH
5324: PPUSH
// begin case tick of 1 .. 1 1$0 :
5325: LD_OWVAR 1
5329: PUSH
5330: LD_INT 1
5332: DOUBLE
5333: GREATEREQUAL
5334: IFFALSE 5342
5336: LD_INT 2100
5338: DOUBLE
5339: LESSEQUAL
5340: IFTRUE 5344
5342: GO 5372
5344: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5345: LD_EXP 27
5349: PUSH
5350: LD_INT 100
5352: DIVREAL
5353: PUSH
5354: LD_INT 350
5356: PPUSH
5357: LD_INT 1050
5359: PPUSH
5360: CALL_OW 12
5364: MUL
5365: PPUSH
5366: CALL_OW 67
5370: GO 5674
5372: LD_INT 2100
5374: PUSH
5375: LD_INT 1
5377: PLUS
5378: DOUBLE
5379: GREATEREQUAL
5380: IFFALSE 5388
5382: LD_INT 10500
5384: DOUBLE
5385: LESSEQUAL
5386: IFTRUE 5390
5388: GO 5418
5390: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5391: LD_EXP 27
5395: PUSH
5396: LD_INT 100
5398: DIVREAL
5399: PUSH
5400: LD_INT 1050
5402: PPUSH
5403: LD_INT 1575
5405: PPUSH
5406: CALL_OW 12
5410: MUL
5411: PPUSH
5412: CALL_OW 67
5416: GO 5674
5418: LD_INT 10500
5420: PUSH
5421: LD_INT 1
5423: PLUS
5424: DOUBLE
5425: GREATEREQUAL
5426: IFFALSE 5434
5428: LD_INT 21000
5430: DOUBLE
5431: LESSEQUAL
5432: IFTRUE 5436
5434: GO 5464
5436: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5437: LD_EXP 27
5441: PUSH
5442: LD_INT 100
5444: DIVREAL
5445: PUSH
5446: LD_INT 1575
5448: PPUSH
5449: LD_INT 2100
5451: PPUSH
5452: CALL_OW 12
5456: MUL
5457: PPUSH
5458: CALL_OW 67
5462: GO 5674
5464: LD_INT 21000
5466: PUSH
5467: LD_INT 1
5469: PLUS
5470: DOUBLE
5471: GREATEREQUAL
5472: IFFALSE 5480
5474: LD_INT 42000
5476: DOUBLE
5477: LESSEQUAL
5478: IFTRUE 5482
5480: GO 5510
5482: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5483: LD_EXP 27
5487: PUSH
5488: LD_INT 100
5490: DIVREAL
5491: PUSH
5492: LD_INT 2100
5494: PPUSH
5495: LD_INT 2625
5497: PPUSH
5498: CALL_OW 12
5502: MUL
5503: PPUSH
5504: CALL_OW 67
5508: GO 5674
5510: LD_INT 42000
5512: PUSH
5513: LD_INT 1
5515: PLUS
5516: DOUBLE
5517: GREATEREQUAL
5518: IFFALSE 5526
5520: LD_INT 63000
5522: DOUBLE
5523: LESSEQUAL
5524: IFTRUE 5528
5526: GO 5556
5528: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5529: LD_EXP 27
5533: PUSH
5534: LD_INT 100
5536: DIVREAL
5537: PUSH
5538: LD_INT 2625
5540: PPUSH
5541: LD_INT 3150
5543: PPUSH
5544: CALL_OW 12
5548: MUL
5549: PPUSH
5550: CALL_OW 67
5554: GO 5674
5556: LD_INT 63000
5558: PUSH
5559: LD_INT 1
5561: PLUS
5562: DOUBLE
5563: GREATEREQUAL
5564: IFFALSE 5572
5566: LD_INT 105000
5568: DOUBLE
5569: LESSEQUAL
5570: IFTRUE 5574
5572: GO 5602
5574: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5575: LD_EXP 27
5579: PUSH
5580: LD_INT 100
5582: DIVREAL
5583: PUSH
5584: LD_INT 3150
5586: PPUSH
5587: LD_INT 3675
5589: PPUSH
5590: CALL_OW 12
5594: MUL
5595: PPUSH
5596: CALL_OW 67
5600: GO 5674
5602: LD_INT 105000
5604: PUSH
5605: LD_INT 1
5607: PLUS
5608: DOUBLE
5609: GREATEREQUAL
5610: IFFALSE 5618
5612: LD_INT 630000
5614: DOUBLE
5615: LESSEQUAL
5616: IFTRUE 5620
5618: GO 5648
5620: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
5621: LD_EXP 27
5625: PUSH
5626: LD_INT 100
5628: DIVREAL
5629: PUSH
5630: LD_INT 3675
5632: PPUSH
5633: LD_INT 4200
5635: PPUSH
5636: CALL_OW 12
5640: MUL
5641: PPUSH
5642: CALL_OW 67
5646: GO 5674
5648: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5649: LD_EXP 27
5653: PUSH
5654: LD_INT 100
5656: DIVREAL
5657: PUSH
5658: LD_INT 4200
5660: PPUSH
5661: LD_INT 5250
5663: PPUSH
5664: CALL_OW 12
5668: MUL
5669: PPUSH
5670: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5674: LD_ADDR_VAR 0 2
5678: PUSH
5679: LD_INT 3
5681: PPUSH
5682: LD_INT 5
5684: PPUSH
5685: CALL_OW 12
5689: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5690: LD_ADDR_VAR 0 1
5694: PUSH
5695: LD_EXP 36
5699: PUSH
5700: LD_INT 0
5702: PUSH
5703: EMPTY
5704: LIST
5705: DIFF
5706: PUSH
5707: FOR_IN
5708: IFFALSE 5757
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5710: LD_VAR 0 2
5714: PPUSH
5715: LD_EXP 41
5719: PUSH
5720: LD_VAR 0 1
5724: ARRAY
5725: PUSH
5726: LD_INT 1
5728: ARRAY
5729: PPUSH
5730: LD_EXP 41
5734: PUSH
5735: LD_VAR 0 1
5739: ARRAY
5740: PUSH
5741: LD_INT 2
5743: ARRAY
5744: PPUSH
5745: LD_INT 20
5747: PPUSH
5748: LD_INT 1
5750: PPUSH
5751: CALL_OW 56
5755: GO 5707
5757: POP
5758: POP
// enable ;
5759: ENABLE
// end ; end_of_file
5760: PPOPN 2
5762: END
// every 20 20$00 trigger apemanNumber do
5763: LD_EXP 49
5767: IFFALSE 5800
5769: GO 5771
5771: DISABLE
// begin enable ;
5772: ENABLE
// if apeLevel >= 8 then
5773: LD_EXP 54
5777: PUSH
5778: LD_INT 8
5780: GREATEREQUAL
5781: IFFALSE 5786
// disable else
5783: DISABLE
5784: GO 5800
// apeLevel := apeLevel + 1 ;
5786: LD_ADDR_EXP 54
5790: PUSH
5791: LD_EXP 54
5795: PUSH
5796: LD_INT 1
5798: PLUS
5799: ST_TO_ADDR
// end ;
5800: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5801: LD_EXP 49
5805: PUSH
5806: LD_EXP 50
5810: LESS
5811: IFFALSE 5951
5813: GO 5815
5815: DISABLE
5816: LD_INT 0
5818: PPUSH
5819: PPUSH
5820: PPUSH
5821: PPUSH
// begin enable ;
5822: ENABLE
// for i := 1 to apemanPos do
5823: LD_ADDR_VAR 0 1
5827: PUSH
5828: DOUBLE
5829: LD_INT 1
5831: DEC
5832: ST_TO_ADDR
5833: LD_EXP 52
5837: PUSH
5838: FOR_TO
5839: IFFALSE 5949
// begin if apemanPlayerCount [ i ] then
5841: LD_EXP 53
5845: PUSH
5846: LD_VAR 0 1
5850: ARRAY
5851: IFFALSE 5947
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5853: LD_EXP 53
5857: PUSH
5858: LD_VAR 0 1
5862: ARRAY
5863: PUSH
5864: LD_EXP 52
5868: PUSH
5869: LD_VAR 0 1
5873: ARRAY
5874: GREATER
5875: IFFALSE 5947
// begin ape := PrepareApeman ;
5877: LD_ADDR_VAR 0 2
5881: PUSH
5882: CALL 6462 0 0
5886: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5887: LD_VAR 0 2
5891: PPUSH
5892: LD_EXP 55
5896: PUSH
5897: LD_VAR 0 1
5901: ARRAY
5902: PPUSH
5903: LD_INT 0
5905: PPUSH
5906: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5910: LD_ADDR_EXP 52
5914: PUSH
5915: LD_EXP 52
5919: PPUSH
5920: LD_VAR 0 1
5924: PPUSH
5925: LD_EXP 52
5929: PUSH
5930: LD_VAR 0 1
5934: ARRAY
5935: PUSH
5936: LD_VAR 0 2
5940: UNION
5941: PPUSH
5942: CALL_OW 1
5946: ST_TO_ADDR
// end ; end ; end ;
5947: GO 5838
5949: POP
5950: POP
// end ;
5951: PPOPN 4
5953: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5954: LD_INT 0
5956: PPUSH
5957: PPUSH
5958: PPUSH
5959: PPUSH
5960: PPUSH
5961: PPUSH
5962: PPUSH
// playersAmount := 0 ;
5963: LD_ADDR_VAR 0 3
5967: PUSH
5968: LD_INT 0
5970: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
5971: LD_ADDR_VAR 0 7
5975: PUSH
5976: LD_INT 1
5978: PUSH
5979: LD_INT 2
5981: PUSH
5982: LD_INT 3
5984: PUSH
5985: LD_INT 4
5987: PUSH
5988: LD_INT 5
5990: PUSH
5991: LD_INT 6
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6002: LD_ADDR_EXP 55
6006: PUSH
6007: LD_INT 0
6009: PUSH
6010: LD_INT 0
6012: PUSH
6013: LD_INT 0
6015: PUSH
6016: LD_INT 0
6018: PUSH
6019: LD_INT 0
6021: PUSH
6022: LD_INT 0
6024: PUSH
6025: LD_INT 0
6027: PUSH
6028: LD_INT 0
6030: PUSH
6031: EMPTY
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: ST_TO_ADDR
// for j = 1 to Side_Positions do
6041: LD_ADDR_VAR 0 4
6045: PUSH
6046: DOUBLE
6047: LD_INT 1
6049: DEC
6050: ST_TO_ADDR
6051: LD_EXP 36
6055: PUSH
6056: FOR_TO
6057: IFFALSE 6124
// if Side_Positions [ j ] then
6059: LD_EXP 36
6063: PUSH
6064: LD_VAR 0 4
6068: ARRAY
6069: IFFALSE 6122
// begin playersAmount := playersAmount + 1 ;
6071: LD_ADDR_VAR 0 3
6075: PUSH
6076: LD_VAR 0 3
6080: PUSH
6081: LD_INT 1
6083: PLUS
6084: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6085: LD_ADDR_EXP 55
6089: PUSH
6090: LD_EXP 55
6094: PPUSH
6095: LD_VAR 0 4
6099: PPUSH
6100: LD_VAR 0 7
6104: PUSH
6105: LD_EXP 36
6109: PUSH
6110: LD_VAR 0 4
6114: ARRAY
6115: ARRAY
6116: PPUSH
6117: CALL_OW 1
6121: ST_TO_ADDR
// end ;
6122: GO 6056
6124: POP
6125: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6126: LD_ADDR_EXP 51
6130: PUSH
6131: LD_INT 3
6133: PUSH
6134: LD_EXP 29
6138: MUL
6139: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6140: LD_ADDR_EXP 49
6144: PUSH
6145: LD_VAR 0 3
6149: PUSH
6150: LD_EXP 51
6154: MUL
6155: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6156: LD_ADDR_EXP 50
6160: PUSH
6161: LD_EXP 49
6165: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6166: LD_ADDR_EXP 52
6170: PUSH
6171: LD_INT 0
6173: PUSH
6174: LD_INT 0
6176: PUSH
6177: LD_INT 0
6179: PUSH
6180: LD_INT 0
6182: PUSH
6183: LD_INT 0
6185: PUSH
6186: LD_INT 0
6188: PUSH
6189: LD_INT 0
6191: PUSH
6192: LD_INT 0
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6205: LD_ADDR_EXP 53
6209: PUSH
6210: LD_INT 0
6212: PUSH
6213: LD_INT 0
6215: PUSH
6216: LD_INT 0
6218: PUSH
6219: LD_INT 0
6221: PUSH
6222: LD_INT 0
6224: PUSH
6225: LD_INT 0
6227: PUSH
6228: LD_INT 0
6230: PUSH
6231: LD_INT 0
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: ST_TO_ADDR
// apeLevel := 1 ;
6244: LD_ADDR_EXP 54
6248: PUSH
6249: LD_INT 1
6251: ST_TO_ADDR
// if not apemanNumber then
6252: LD_EXP 49
6256: NOT
6257: IFFALSE 6261
// exit ;
6259: GO 6457
// for i := 1 to apemanPerPlayer do
6261: LD_ADDR_VAR 0 2
6265: PUSH
6266: DOUBLE
6267: LD_INT 1
6269: DEC
6270: ST_TO_ADDR
6271: LD_EXP 51
6275: PUSH
6276: FOR_TO
6277: IFFALSE 6455
// begin for j := 1 to Side_Positions do
6279: LD_ADDR_VAR 0 4
6283: PUSH
6284: DOUBLE
6285: LD_INT 1
6287: DEC
6288: ST_TO_ADDR
6289: LD_EXP 36
6293: PUSH
6294: FOR_TO
6295: IFFALSE 6451
// if Side_Positions [ j ] then
6297: LD_EXP 36
6301: PUSH
6302: LD_VAR 0 4
6306: ARRAY
6307: IFFALSE 6449
// begin pos := Side_Positions [ j ] ;
6309: LD_ADDR_VAR 0 6
6313: PUSH
6314: LD_EXP 36
6318: PUSH
6319: LD_VAR 0 4
6323: ARRAY
6324: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6325: LD_ADDR_EXP 53
6329: PUSH
6330: LD_EXP 53
6334: PPUSH
6335: LD_VAR 0 4
6339: PPUSH
6340: LD_EXP 53
6344: PUSH
6345: LD_VAR 0 4
6349: ARRAY
6350: PUSH
6351: LD_INT 1
6353: PLUS
6354: PPUSH
6355: CALL_OW 1
6359: ST_TO_ADDR
// ape := PrepareApeman ;
6360: LD_ADDR_VAR 0 5
6364: PUSH
6365: CALL 6462 0 0
6369: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6370: LD_ADDR_EXP 52
6374: PUSH
6375: LD_EXP 52
6379: PPUSH
6380: LD_VAR 0 4
6384: PPUSH
6385: LD_EXP 52
6389: PUSH
6390: LD_VAR 0 4
6394: ARRAY
6395: PPUSH
6396: LD_EXP 52
6400: PUSH
6401: LD_VAR 0 4
6405: ARRAY
6406: PUSH
6407: LD_INT 1
6409: PLUS
6410: PPUSH
6411: LD_VAR 0 5
6415: PPUSH
6416: CALL_OW 1
6420: PPUSH
6421: CALL_OW 1
6425: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6426: LD_VAR 0 5
6430: PPUSH
6431: LD_EXP 55
6435: PUSH
6436: LD_VAR 0 4
6440: ARRAY
6441: PPUSH
6442: LD_INT 0
6444: PPUSH
6445: CALL_OW 49
// end ;
6449: GO 6294
6451: POP
6452: POP
// end ;
6453: GO 6276
6455: POP
6456: POP
// end ;
6457: LD_VAR 0 1
6461: RET
// export function PrepareApeman ; var bonus ; begin
6462: LD_INT 0
6464: PPUSH
6465: PPUSH
// uc_side := 0 ;
6466: LD_ADDR_OWVAR 20
6470: PUSH
6471: LD_INT 0
6473: ST_TO_ADDR
// uc_nation := 0 ;
6474: LD_ADDR_OWVAR 21
6478: PUSH
6479: LD_INT 0
6481: ST_TO_ADDR
// InitHc ;
6482: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6486: LD_ADDR_VAR 0 2
6490: PUSH
6491: LD_INT 1
6493: NEG
6494: PUSH
6495: LD_INT 0
6497: PUSH
6498: LD_INT 1
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: LIST
6505: PUSH
6506: LD_OWVAR 1
6510: PUSH
6511: LD_INT 3
6513: MOD
6514: PUSH
6515: LD_INT 1
6517: PLUS
6518: ARRAY
6519: ST_TO_ADDR
// hc_class := class_apeman ;
6520: LD_ADDR_OWVAR 28
6524: PUSH
6525: LD_INT 12
6527: ST_TO_ADDR
// hc_gallery :=  ;
6528: LD_ADDR_OWVAR 33
6532: PUSH
6533: LD_STRING 
6535: ST_TO_ADDR
// hc_name :=  ;
6536: LD_ADDR_OWVAR 26
6540: PUSH
6541: LD_STRING 
6543: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6544: LD_ADDR_OWVAR 31
6548: PUSH
6549: LD_EXP 54
6553: PUSH
6554: LD_VAR 0 2
6558: PLUS
6559: PUSH
6560: LD_EXP 54
6564: PUSH
6565: LD_VAR 0 2
6569: PLUS
6570: PUSH
6571: LD_EXP 54
6575: PUSH
6576: LD_VAR 0 2
6580: PLUS
6581: PUSH
6582: LD_EXP 54
6586: PUSH
6587: LD_VAR 0 2
6591: PLUS
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6599: LD_ADDR_OWVAR 35
6603: PUSH
6604: LD_INT 10
6606: PUSH
6607: LD_VAR 0 2
6611: MUL
6612: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6613: LD_ADDR_OWVAR 29
6617: PUSH
6618: LD_INT 12
6620: PUSH
6621: LD_INT 10
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: ST_TO_ADDR
// result := CreateHuman ;
6628: LD_ADDR_VAR 0 1
6632: PUSH
6633: CALL_OW 44
6637: ST_TO_ADDR
// end ;
6638: LD_VAR 0 1
6642: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6643: LD_INT 0
6645: PPUSH
6646: PPUSH
6647: PPUSH
// if not ape then
6648: LD_VAR 0 1
6652: NOT
6653: IFFALSE 6657
// exit ;
6655: GO 6782
// side := GetSide ( ape ) ;
6657: LD_ADDR_VAR 0 3
6661: PUSH
6662: LD_VAR 0 1
6666: PPUSH
6667: CALL_OW 255
6671: ST_TO_ADDR
// if not side then
6672: LD_VAR 0 3
6676: NOT
6677: IFFALSE 6731
// begin for i = 1 to apemanPos do
6679: LD_ADDR_VAR 0 4
6683: PUSH
6684: DOUBLE
6685: LD_INT 1
6687: DEC
6688: ST_TO_ADDR
6689: LD_EXP 52
6693: PUSH
6694: FOR_TO
6695: IFFALSE 6729
// if ape in apemanPos [ i ] then
6697: LD_VAR 0 1
6701: PUSH
6702: LD_EXP 52
6706: PUSH
6707: LD_VAR 0 4
6711: ARRAY
6712: IN
6713: IFFALSE 6727
// begin side := i ;
6715: LD_ADDR_VAR 0 3
6719: PUSH
6720: LD_VAR 0 4
6724: ST_TO_ADDR
// break ;
6725: GO 6729
// end ;
6727: GO 6694
6729: POP
6730: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6731: LD_ADDR_EXP 52
6735: PUSH
6736: LD_EXP 52
6740: PPUSH
6741: LD_VAR 0 3
6745: PPUSH
6746: LD_EXP 52
6750: PUSH
6751: LD_VAR 0 3
6755: ARRAY
6756: PUSH
6757: LD_VAR 0 1
6761: DIFF
6762: PPUSH
6763: CALL_OW 1
6767: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6768: LD_ADDR_EXP 49
6772: PUSH
6773: LD_EXP 49
6777: PUSH
6778: LD_INT 1
6780: MINUS
6781: ST_TO_ADDR
// end ; end_of_file
6782: LD_VAR 0 2
6786: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6787: LD_VAR 0 1
6791: PPUSH
6792: CALL_OW 266
6796: PUSH
6797: LD_INT 0
6799: PUSH
6800: LD_INT 1
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: IN
6807: IFFALSE 6832
// SetBName ( b , @ & GetSide ( b ) ) ;
6809: LD_VAR 0 1
6813: PPUSH
6814: LD_STRING @
6816: PUSH
6817: LD_VAR 0 1
6821: PPUSH
6822: CALL_OW 255
6826: STR
6827: PPUSH
6828: CALL_OW 500
// end ;
6832: PPOPN 2
6834: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6835: LD_VAR 0 1
6839: PPUSH
6840: CALL_OW 266
6844: PUSH
6845: LD_INT 0
6847: PUSH
6848: LD_INT 1
6850: PUSH
6851: EMPTY
6852: LIST
6853: LIST
6854: IN
6855: IFFALSE 6880
// SetBName ( b , @ & GetSide ( b ) ) ;
6857: LD_VAR 0 1
6861: PPUSH
6862: LD_STRING @
6864: PUSH
6865: LD_VAR 0 1
6869: PPUSH
6870: CALL_OW 255
6874: STR
6875: PPUSH
6876: CALL_OW 500
// end ;
6880: PPOPN 3
6882: END
// on VehicleConstructed ( veh , fac ) do var side ;
6883: LD_INT 0
6885: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6886: LD_VAR 0 1
6890: PPUSH
6891: CALL_OW 263
6895: PUSH
6896: LD_INT 5
6898: EQUAL
6899: IFFALSE 7041
// begin side := GetSide ( veh ) ;
6901: LD_ADDR_VAR 0 3
6905: PUSH
6906: LD_VAR 0 1
6910: PPUSH
6911: CALL_OW 255
6915: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6916: LD_ADDR_EXP 52
6920: PUSH
6921: LD_EXP 52
6925: PPUSH
6926: LD_VAR 0 3
6930: PPUSH
6931: LD_EXP 52
6935: PUSH
6936: LD_VAR 0 3
6940: ARRAY
6941: PPUSH
6942: LD_INT 52
6944: PUSH
6945: EMPTY
6946: LIST
6947: PPUSH
6948: CALL_OW 72
6952: PUSH
6953: LD_INT 22
6955: PUSH
6956: LD_VAR 0 3
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: LD_INT 2
6967: PUSH
6968: LD_INT 33
6970: PUSH
6971: LD_INT 5
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: PUSH
6978: LD_INT 25
6980: PUSH
6981: LD_INT 12
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: PUSH
6988: LD_INT 25
6990: PUSH
6991: LD_INT 15
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: PUSH
6998: LD_INT 25
7000: PUSH
7001: LD_INT 16
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: PUSH
7008: LD_INT 25
7010: PUSH
7011: LD_INT 17
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: PPUSH
7030: CALL_OW 69
7034: UNION
7035: PPUSH
7036: CALL_OW 1
7040: ST_TO_ADDR
// end ; end ;
7041: PPOPN 3
7043: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7044: LD_INT 0
7046: PPUSH
7047: PPUSH
7048: PPUSH
7049: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7050: LD_VAR 0 1
7054: PPUSH
7055: CALL_OW 257
7059: PUSH
7060: LD_INT 12
7062: PUSH
7063: LD_INT 15
7065: PUSH
7066: LD_INT 17
7068: PUSH
7069: LD_INT 16
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: LIST
7076: LIST
7077: IN
7078: PUSH
7079: LD_VAR 0 1
7083: PPUSH
7084: CALL_OW 263
7088: PUSH
7089: LD_INT 5
7091: EQUAL
7092: OR
7093: IFFALSE 7104
// ApeKilled ( j ) ;
7095: LD_VAR 0 1
7099: PPUSH
7100: CALL 6643 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7104: LD_VAR 0 1
7108: PPUSH
7109: CALL_OW 266
7113: PUSH
7114: LD_INT 0
7116: PUSH
7117: LD_INT 1
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: IN
7124: IFFALSE 7206
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7126: LD_ADDR_VAR 0 4
7130: PUSH
7131: LD_EXP 36
7135: PUSH
7136: LD_VAR 0 1
7140: PPUSH
7141: CALL_OW 255
7145: ARRAY
7146: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7147: LD_ADDR_VAR 0 2
7151: PUSH
7152: LD_EXP 41
7156: PUSH
7157: LD_VAR 0 4
7161: ARRAY
7162: PUSH
7163: LD_INT 1
7165: ARRAY
7166: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7167: LD_ADDR_VAR 0 3
7171: PUSH
7172: LD_EXP 41
7176: PUSH
7177: LD_VAR 0 4
7181: ARRAY
7182: PUSH
7183: LD_INT 2
7185: ARRAY
7186: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7187: LD_VAR 0 2
7191: PPUSH
7192: LD_VAR 0 3
7196: PPUSH
7197: CALL_OW 420
7201: PPUSH
7202: CALL_OW 419
// end ; end ;
7206: PPOPN 5
7208: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7209: LD_VAR 0 1
7213: PPUSH
7214: LD_VAR 0 2
7218: PPUSH
7219: LD_VAR 0 3
7223: PPUSH
7224: LD_OWVAR 2
7228: PPUSH
7229: CALL 10267 0 4
7233: PPOPN 3
7235: END
// function CanWinLoose ; begin
7236: LD_INT 0
7238: PPUSH
// Result := true ;
7239: LD_ADDR_VAR 0 1
7243: PUSH
7244: LD_INT 1
7246: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
7247: CALL_OW 518
7251: PUSH
7252: CALL_OW 519
7256: PUSH
7257: LD_INT 0
7259: GREATER
7260: AND
7261: IFFALSE 7271
// Result := false ;
7263: LD_ADDR_VAR 0 1
7267: PUSH
7268: LD_INT 0
7270: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7271: CALL_OW 531
7275: PUSH
7276: CALL_OW 519
7280: PUSH
7281: LD_INT 1
7283: GREATER
7284: AND
7285: IFFALSE 7295
// Result := false ;
7287: LD_ADDR_VAR 0 1
7291: PUSH
7292: LD_INT 0
7294: ST_TO_ADDR
// end ;
7295: LD_VAR 0 1
7299: RET
// function HasPower ( i ) ; begin
7300: LD_INT 0
7302: PPUSH
// if def_people_respawning then
7303: LD_EXP 11
7307: IFFALSE 7398
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
7309: LD_ADDR_VAR 0 2
7313: PUSH
7314: LD_INT 22
7316: PUSH
7317: LD_VAR 0 1
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: PUSH
7326: LD_INT 2
7328: PUSH
7329: LD_INT 21
7331: PUSH
7332: LD_INT 1
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: PUSH
7339: LD_INT 33
7341: PUSH
7342: LD_INT 3
7344: PUSH
7345: EMPTY
7346: LIST
7347: LIST
7348: PUSH
7349: LD_INT 33
7351: PUSH
7352: LD_INT 5
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: PUSH
7359: LD_INT 30
7361: PUSH
7362: LD_INT 0
7364: PUSH
7365: EMPTY
7366: LIST
7367: LIST
7368: PUSH
7369: LD_INT 30
7371: PUSH
7372: LD_INT 1
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: PPUSH
7391: CALL_OW 69
7395: ST_TO_ADDR
7396: GO 7463
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
7398: LD_ADDR_VAR 0 2
7402: PUSH
7403: LD_INT 22
7405: PUSH
7406: LD_VAR 0 1
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: PUSH
7415: LD_INT 2
7417: PUSH
7418: LD_INT 21
7420: PUSH
7421: LD_INT 1
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: PUSH
7428: LD_INT 33
7430: PUSH
7431: LD_INT 3
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: PUSH
7438: LD_INT 33
7440: PUSH
7441: LD_INT 5
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: PPUSH
7458: CALL_OW 69
7462: ST_TO_ADDR
// end ;
7463: LD_VAR 0 2
7467: RET
// function AlliedSides ( i , j ) ; begin
7468: LD_INT 0
7470: PPUSH
// Result := false ;
7471: LD_ADDR_VAR 0 3
7475: PUSH
7476: LD_INT 0
7478: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
7479: LD_VAR 0 1
7483: PPUSH
7484: LD_VAR 0 2
7488: PPUSH
7489: CALL_OW 81
7493: PUSH
7494: LD_INT 1
7496: EQUAL
7497: PUSH
7498: LD_VAR 0 2
7502: PPUSH
7503: LD_VAR 0 1
7507: PPUSH
7508: CALL_OW 81
7512: PUSH
7513: LD_INT 1
7515: EQUAL
7516: AND
7517: PUSH
7518: LD_VAR 0 1
7522: PPUSH
7523: CALL_OW 83
7527: AND
7528: PUSH
7529: LD_VAR 0 2
7533: PPUSH
7534: CALL_OW 83
7538: AND
7539: IFFALSE 7549
// Result := true ;
7541: LD_ADDR_VAR 0 3
7545: PUSH
7546: LD_INT 1
7548: ST_TO_ADDR
// end ;
7549: LD_VAR 0 3
7553: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
7554: CALL 7236 0 0
7558: IFFALSE 7567
7560: GO 7562
7562: DISABLE
// YouLostInMultiplayer ;
7563: CALL_OW 107
7567: END
// every 0 0$3 trigger CanWinLoose marked 401 do
7568: CALL 7236 0 0
7572: IFFALSE 7596
7574: GO 7576
7576: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
7577: LD_EXP 37
7581: PUSH
7582: LD_OWVAR 2
7586: ARRAY
7587: PPUSH
7588: CALL 10309 0 1
// YouWinInMultiplayer ;
7592: CALL_OW 106
// end ;
7596: END
// every 0 0$3 marked 98 do var i , CanWin ;
7597: GO 7599
7599: DISABLE
7600: LD_INT 0
7602: PPUSH
7603: PPUSH
// begin if not HasPower ( your_side ) then
7604: LD_OWVAR 2
7608: PPUSH
7609: CALL 7300 0 1
7613: NOT
7614: IFFALSE 7625
// begin Multiplayer_Loose_Message ;
7616: CALL_OW 521
// enable ( 400 ) ;
7620: LD_INT 400
7622: ENABLE_MARKED
// end else
7623: GO 7758
// begin CanWin := true ;
7625: LD_ADDR_VAR 0 2
7629: PUSH
7630: LD_INT 1
7632: ST_TO_ADDR
// for i := 1 to 8 do
7633: LD_ADDR_VAR 0 1
7637: PUSH
7638: DOUBLE
7639: LD_INT 1
7641: DEC
7642: ST_TO_ADDR
7643: LD_INT 8
7645: PUSH
7646: FOR_TO
7647: IFFALSE 7744
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7649: LD_EXP 36
7653: PUSH
7654: LD_VAR 0 1
7658: ARRAY
7659: PUSH
7660: LD_VAR 0 1
7664: PPUSH
7665: CALL_OW 108
7669: AND
7670: PUSH
7671: LD_VAR 0 1
7675: PUSH
7676: LD_OWVAR 2
7680: NONEQUAL
7681: AND
7682: IFFALSE 7742
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
7684: LD_EXP 34
7688: PUSH
7689: LD_VAR 0 1
7693: ARRAY
7694: NOT
7695: PUSH
7696: LD_EXP 34
7700: PUSH
7701: LD_VAR 0 1
7705: ARRAY
7706: PUSH
7707: LD_EXP 34
7711: PUSH
7712: LD_OWVAR 2
7716: ARRAY
7717: NONEQUAL
7718: OR
7719: IFFALSE 7742
// if HasPower ( i ) then
7721: LD_VAR 0 1
7725: PPUSH
7726: CALL 7300 0 1
7730: IFFALSE 7742
// begin CanWin := false ;
7732: LD_ADDR_VAR 0 2
7736: PUSH
7737: LD_INT 0
7739: ST_TO_ADDR
// break ;
7740: GO 7744
// end ;
7742: GO 7646
7744: POP
7745: POP
// if CanWin then
7746: LD_VAR 0 2
7750: IFFALSE 7757
// enable ( 401 ) else
7752: LD_INT 401
7754: ENABLE_MARKED
7755: GO 7758
// enable ;
7757: ENABLE
// end ; end ;
7758: PPOPN 2
7760: END
// every 0 0$3 marked 99 do var i , CanWin ;
7761: GO 7763
7763: DISABLE
7764: LD_INT 0
7766: PPUSH
7767: PPUSH
// begin if not HasPower ( your_side ) then
7768: LD_OWVAR 2
7772: PPUSH
7773: CALL 7300 0 1
7777: NOT
7778: IFFALSE 7789
// begin Multiplayer_Loose_Message ;
7780: CALL_OW 521
// enable ( 400 ) ;
7784: LD_INT 400
7786: ENABLE_MARKED
// end else
7787: GO 7902
// begin CanWin := true ;
7789: LD_ADDR_VAR 0 2
7793: PUSH
7794: LD_INT 1
7796: ST_TO_ADDR
// for i := 1 to 8 do
7797: LD_ADDR_VAR 0 1
7801: PUSH
7802: DOUBLE
7803: LD_INT 1
7805: DEC
7806: ST_TO_ADDR
7807: LD_INT 8
7809: PUSH
7810: FOR_TO
7811: IFFALSE 7888
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7813: LD_EXP 36
7817: PUSH
7818: LD_VAR 0 1
7822: ARRAY
7823: PUSH
7824: LD_VAR 0 1
7828: PPUSH
7829: CALL_OW 108
7833: AND
7834: PUSH
7835: LD_VAR 0 1
7839: PUSH
7840: LD_OWVAR 2
7844: NONEQUAL
7845: AND
7846: IFFALSE 7886
// if not AlliedSides ( i , your_side ) then
7848: LD_VAR 0 1
7852: PPUSH
7853: LD_OWVAR 2
7857: PPUSH
7858: CALL 7468 0 2
7862: NOT
7863: IFFALSE 7886
// if HasPower ( i ) then
7865: LD_VAR 0 1
7869: PPUSH
7870: CALL 7300 0 1
7874: IFFALSE 7886
// begin CanWin := false ;
7876: LD_ADDR_VAR 0 2
7880: PUSH
7881: LD_INT 0
7883: ST_TO_ADDR
// break ;
7884: GO 7888
// end ;
7886: GO 7810
7888: POP
7889: POP
// if CanWin then
7890: LD_VAR 0 2
7894: IFFALSE 7901
// enable ( 401 ) else
7896: LD_INT 401
7898: ENABLE_MARKED
7899: GO 7902
// enable ;
7901: ENABLE
// end ; end ; end_of_file
7902: PPOPN 2
7904: END
// every 0 0$1 marked 100 do var i , base , pom , filter , sib_mined ;
7905: GO 7907
7907: DISABLE
7908: LD_INT 0
7910: PPUSH
7911: PPUSH
7912: PPUSH
7913: PPUSH
7914: PPUSH
// begin sib_mined := [ ] ;
7915: LD_ADDR_VAR 0 5
7919: PUSH
7920: EMPTY
7921: ST_TO_ADDR
// for i := 1 to 8 do
7922: LD_ADDR_VAR 0 1
7926: PUSH
7927: DOUBLE
7928: LD_INT 1
7930: DEC
7931: ST_TO_ADDR
7932: LD_INT 8
7934: PUSH
7935: FOR_TO
7936: IFFALSE 8092
// if Side_Positions [ i ] then
7938: LD_EXP 36
7942: PUSH
7943: LD_VAR 0 1
7947: ARRAY
7948: IFFALSE 8076
// begin filter := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7950: LD_ADDR_VAR 0 4
7954: PUSH
7955: LD_INT 22
7957: PUSH
7958: LD_VAR 0 1
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: PUSH
7967: LD_INT 2
7969: PUSH
7970: LD_INT 30
7972: PUSH
7973: LD_INT 0
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: PUSH
7980: LD_INT 30
7982: PUSH
7983: LD_INT 1
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: LIST
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: PPUSH
7999: CALL_OW 69
8003: ST_TO_ADDR
// pom := 0 ;
8004: LD_ADDR_VAR 0 3
8008: PUSH
8009: LD_INT 0
8011: ST_TO_ADDR
// for base in filter do
8012: LD_ADDR_VAR 0 2
8016: PUSH
8017: LD_VAR 0 4
8021: PUSH
8022: FOR_IN
8023: IFFALSE 8056
// pom := pom + GetResourceType ( GetBase ( base ) , mat_siberit ) ;
8025: LD_ADDR_VAR 0 3
8029: PUSH
8030: LD_VAR 0 3
8034: PUSH
8035: LD_VAR 0 2
8039: PPUSH
8040: CALL_OW 274
8044: PPUSH
8045: LD_INT 3
8047: PPUSH
8048: CALL_OW 275
8052: PLUS
8053: ST_TO_ADDR
8054: GO 8022
8056: POP
8057: POP
// sib_mined := sib_mined ^ pom ;
8058: LD_ADDR_VAR 0 5
8062: PUSH
8063: LD_VAR 0 5
8067: PUSH
8068: LD_VAR 0 3
8072: ADD
8073: ST_TO_ADDR
// end else
8074: GO 8090
// sib_mined := sib_mined ^ 0 ;
8076: LD_ADDR_VAR 0 5
8080: PUSH
8081: LD_VAR 0 5
8085: PUSH
8086: LD_INT 0
8088: ADD
8089: ST_TO_ADDR
8090: GO 7935
8092: POP
8093: POP
// if not def_public_score then
8094: LD_EXP 14
8098: NOT
8099: IFFALSE 8189
// begin ExtraStrings := [ ] ;
8101: LD_ADDR_EXP 56
8105: PUSH
8106: EMPTY
8107: ST_TO_ADDR
// for i := 1 to 8 do
8108: LD_ADDR_VAR 0 1
8112: PUSH
8113: DOUBLE
8114: LD_INT 1
8116: DEC
8117: ST_TO_ADDR
8118: LD_INT 8
8120: PUSH
8121: FOR_TO
8122: IFFALSE 8185
// if Side_Positions [ i ] then
8124: LD_EXP 36
8128: PUSH
8129: LD_VAR 0 1
8133: ARRAY
8134: IFFALSE 8183
// ExtraStrings := ExtraStrings ^ [ #AlienBase-MinedPublic , i , i , sib_mined [ i ] , amount_of_siberit ] ;
8136: LD_ADDR_EXP 56
8140: PUSH
8141: LD_EXP 56
8145: PUSH
8146: LD_STRING #AlienBase-MinedPublic
8148: PUSH
8149: LD_VAR 0 1
8153: PUSH
8154: LD_VAR 0 1
8158: PUSH
8159: LD_VAR 0 5
8163: PUSH
8164: LD_VAR 0 1
8168: ARRAY
8169: PUSH
8170: LD_EXP 30
8174: PUSH
8175: EMPTY
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: LIST
8181: ADD
8182: ST_TO_ADDR
8183: GO 8121
8185: POP
8186: POP
// end else
8187: GO 8218
// ExtraStrings := [ #AlienBase-Mined , sib_mined [ Your_Side ] , amount_of_siberit ] ;
8189: LD_ADDR_EXP 56
8193: PUSH
8194: LD_STRING #AlienBase-Mined
8196: PUSH
8197: LD_VAR 0 5
8201: PUSH
8202: LD_OWVAR 2
8206: ARRAY
8207: PUSH
8208: LD_EXP 30
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: LIST
8217: ST_TO_ADDR
// for i := 1 to 8 do
8218: LD_ADDR_VAR 0 1
8222: PUSH
8223: DOUBLE
8224: LD_INT 1
8226: DEC
8227: ST_TO_ADDR
8228: LD_INT 8
8230: PUSH
8231: FOR_TO
8232: IFFALSE 8289
// if sib_mined [ i ] >= amount_of_siberit then
8234: LD_VAR 0 5
8238: PUSH
8239: LD_VAR 0 1
8243: ARRAY
8244: PUSH
8245: LD_EXP 30
8249: GREATEREQUAL
8250: IFFALSE 8287
// begin wait ( 0 0$1 ) ;
8252: LD_INT 35
8254: PPUSH
8255: CALL_OW 67
// if sib_mined [ your_side ] >= amount_of_siberit then
8259: LD_VAR 0 5
8263: PUSH
8264: LD_OWVAR 2
8268: ARRAY
8269: PUSH
8270: LD_EXP 30
8274: GREATEREQUAL
8275: IFFALSE 8283
// YouWinInMultiplayer else
8277: CALL_OW 106
8281: GO 8287
// YouLostInMultiplayer ;
8283: CALL_OW 107
// end ;
8287: GO 8231
8289: POP
8290: POP
// enable ;
8291: ENABLE
// end ; end_of_file
8292: PPOPN 5
8294: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
8295: LD_INT 0
8297: PPUSH
8298: PPUSH
// for un in battle_flags_id do
8299: LD_ADDR_VAR 0 2
8303: PUSH
8304: LD_EXP 46
8308: PUSH
8309: FOR_IN
8310: IFFALSE 8385
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
8312: LD_VAR 0 2
8316: PPUSH
8317: LD_INT 1
8319: PUSH
8320: LD_LOC 9
8324: PUSH
8325: EMPTY
8326: LIST
8327: LIST
8328: PUSH
8329: LD_INT 2
8331: PUSH
8332: LD_LOC 9
8336: PUSH
8337: LD_INT 2
8339: DIV
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: PUSH
8345: LD_INT 3
8347: PUSH
8348: LD_LOC 9
8352: PUSH
8353: LD_INT 5
8355: DIV
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: PUSH
8361: LD_INT 20
8363: PUSH
8364: LD_LOC 9
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: PUSH
8373: EMPTY
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: PPUSH
8379: CALL_OW 423
8383: GO 8309
8385: POP
8386: POP
// end ;
8387: LD_VAR 0 1
8391: RET
// every 1 do var un ;
8392: GO 8394
8394: DISABLE
8395: LD_INT 0
8397: PPUSH
// begin if not def_morale_flags then
8398: LD_EXP 9
8402: NOT
8403: IFFALSE 8407
// exit ;
8405: GO 8484
// if not morale_decreasing_time then
8407: LD_EXP 28
8411: NOT
8412: IFFALSE 8416
// exit ;
8414: GO 8484
// strength = 100 ;
8416: LD_ADDR_LOC 9
8420: PUSH
8421: LD_INT 100
8423: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8424: LD_EXP 28
8428: PPUSH
8429: CALL_OW 67
// strength := strength - 1 ;
8433: LD_ADDR_LOC 9
8437: PUSH
8438: LD_LOC 9
8442: PUSH
8443: LD_INT 1
8445: MINUS
8446: ST_TO_ADDR
// Update_Flags ;
8447: CALL 8295 0 0
// until not strength ;
8451: LD_LOC 9
8455: NOT
8456: IFFALSE 8424
// for un in battle_flags_id do
8458: LD_ADDR_VAR 0 1
8462: PUSH
8463: LD_EXP 46
8467: PUSH
8468: FOR_IN
8469: IFFALSE 8482
// KillBattleFlag ( un ) ;
8471: LD_VAR 0 1
8475: PPUSH
8476: CALL_OW 419
8480: GO 8468
8482: POP
8483: POP
// end ; end_of_file
8484: PPOPN 1
8486: END
// var BloodGods , BloodGods_LastKills , BloodGods_CurrentKills , BloodGods_Positions ; every 0 0$3 marked 200 do var x ;
8487: GO 8489
8489: DISABLE
8490: LD_INT 0
8492: PPUSH
// begin enable ;
8493: ENABLE
// for x := 1 to 8 do
8494: LD_ADDR_VAR 0 1
8498: PUSH
8499: DOUBLE
8500: LD_INT 1
8502: DEC
8503: ST_TO_ADDR
8504: LD_INT 8
8506: PUSH
8507: FOR_TO
8508: IFFALSE 8592
// if ( BloodGods_CurrentKills [ x ] > 5 ) and ( BloodGods [ x ] = - 1 ) then
8510: LD_LOC 16
8514: PUSH
8515: LD_VAR 0 1
8519: ARRAY
8520: PUSH
8521: LD_INT 5
8523: GREATER
8524: PUSH
8525: LD_LOC 14
8529: PUSH
8530: LD_VAR 0 1
8534: ARRAY
8535: PUSH
8536: LD_INT 1
8538: NEG
8539: EQUAL
8540: AND
8541: IFFALSE 8590
// begin BloodGods_LastKills := Replace ( BloodGods_LastKills , x , BloodGods_LastKills [ x ] + 6 ) ;
8543: LD_ADDR_LOC 15
8547: PUSH
8548: LD_LOC 15
8552: PPUSH
8553: LD_VAR 0 1
8557: PPUSH
8558: LD_LOC 15
8562: PUSH
8563: LD_VAR 0 1
8567: ARRAY
8568: PUSH
8569: LD_INT 6
8571: PLUS
8572: PPUSH
8573: CALL_OW 1
8577: ST_TO_ADDR
// AwakenBloodGod ( x , false ) ;
8578: LD_VAR 0 1
8582: PPUSH
8583: LD_INT 0
8585: PPUSH
8586: CALL 8764 0 2
// end ;
8590: GO 8507
8592: POP
8593: POP
// end ;
8594: PPOPN 1
8596: END
// every 0 0$1 marked 200 do var BGL , x ;
8597: GO 8599
8599: DISABLE
8600: LD_INT 0
8602: PPUSH
8603: PPUSH
// begin enable ;
8604: ENABLE
// for x := 1 to 8 do
8605: LD_ADDR_VAR 0 2
8609: PUSH
8610: DOUBLE
8611: LD_INT 1
8613: DEC
8614: ST_TO_ADDR
8615: LD_INT 8
8617: PUSH
8618: FOR_TO
8619: IFFALSE 8750
// if ( BloodGods [ x ] > - 1 ) and IsLive ( BloodGods [ x ] ) then
8621: LD_LOC 14
8625: PUSH
8626: LD_VAR 0 2
8630: ARRAY
8631: PUSH
8632: LD_INT 1
8634: NEG
8635: GREATER
8636: PUSH
8637: LD_LOC 14
8641: PUSH
8642: LD_VAR 0 2
8646: ARRAY
8647: PPUSH
8648: CALL_OW 300
8652: AND
8653: IFFALSE 8748
// begin BGL := GetLives ( BloodGods [ x ] ) ;
8655: LD_ADDR_VAR 0 1
8659: PUSH
8660: LD_LOC 14
8664: PUSH
8665: LD_VAR 0 2
8669: ARRAY
8670: PPUSH
8671: CALL_OW 256
8675: ST_TO_ADDR
// if ( BGL < 1000 ) and ( BGL > 100 ) then
8676: LD_VAR 0 1
8680: PUSH
8681: LD_INT 1000
8683: LESS
8684: PUSH
8685: LD_VAR 0 1
8689: PUSH
8690: LD_INT 100
8692: GREATER
8693: AND
8694: IFFALSE 8748
// begin BGL := BGL + 10 ;
8696: LD_ADDR_VAR 0 1
8700: PUSH
8701: LD_VAR 0 1
8705: PUSH
8706: LD_INT 10
8708: PLUS
8709: ST_TO_ADDR
// if BGL > 1000 then
8710: LD_VAR 0 1
8714: PUSH
8715: LD_INT 1000
8717: GREATER
8718: IFFALSE 8728
// BGL := 1000 ;
8720: LD_ADDR_VAR 0 1
8724: PUSH
8725: LD_INT 1000
8727: ST_TO_ADDR
// SetLives ( BloodGods [ x ] , BGL ) ;
8728: LD_LOC 14
8732: PUSH
8733: LD_VAR 0 2
8737: ARRAY
8738: PPUSH
8739: LD_VAR 0 1
8743: PPUSH
8744: CALL_OW 234
// end ; end ;
8748: GO 8618
8750: POP
8751: POP
// end ;
8752: PPOPN 2
8754: END
// every 0 0$1 marked 200 do
8755: GO 8757
8757: DISABLE
// begin DisplayTimeWithKills ;
8758: CALL 9005 0 0
// enable ;
8762: ENABLE
// end ;
8763: END
// function AwakenBloodGod ( side , NoDialog ) ; begin
8764: LD_INT 0
8766: PPUSH
// uc_direction := Rand ( 0 , 5 ) ;
8767: LD_ADDR_OWVAR 24
8771: PUSH
8772: LD_INT 0
8774: PPUSH
8775: LD_INT 5
8777: PPUSH
8778: CALL_OW 12
8782: ST_TO_ADDR
// PrepareHuman ( 1 , class_soldier , 15 ) ;
8783: LD_INT 1
8785: PPUSH
8786: LD_INT 1
8788: PPUSH
8789: LD_INT 15
8791: PPUSH
8792: CALL_OW 380
// hc_importance := 106 ;
8796: LD_ADDR_OWVAR 32
8800: PUSH
8801: LD_INT 106
8803: ST_TO_ADDR
// hc_name := Blood God of  & mp_sides_players_names [ side ] ;
8804: LD_ADDR_OWVAR 26
8808: PUSH
8809: LD_STRING Blood God of 
8811: PUSH
8812: LD_OWVAR 19
8816: PUSH
8817: LD_VAR 0 1
8821: ARRAY
8822: STR
8823: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
8824: LD_ADDR_OWVAR 21
8828: PUSH
8829: LD_EXP 37
8833: PUSH
8834: LD_VAR 0 1
8838: ARRAY
8839: ST_TO_ADDR
// uc_side := side ;
8840: LD_ADDR_OWVAR 20
8844: PUSH
8845: LD_VAR 0 1
8849: ST_TO_ADDR
// hc_noskilllimit := true ;
8850: LD_ADDR_OWVAR 76
8854: PUSH
8855: LD_INT 1
8857: ST_TO_ADDR
// hc_agressivity := 50 ;
8858: LD_ADDR_OWVAR 35
8862: PUSH
8863: LD_INT 50
8865: ST_TO_ADDR
// BloodGods := Replace ( BloodGods , Side , CreateHuman ) ;
8866: LD_ADDR_LOC 14
8870: PUSH
8871: LD_LOC 14
8875: PPUSH
8876: LD_VAR 0 1
8880: PPUSH
8881: CALL_OW 44
8885: PPUSH
8886: CALL_OW 1
8890: ST_TO_ADDR
// PlaceUnitXYR ( BloodGods [ side ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 1 ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 2 ] , 10 , false ) ;
8891: LD_LOC 14
8895: PUSH
8896: LD_VAR 0 1
8900: ARRAY
8901: PPUSH
8902: LD_LOC 17
8906: PUSH
8907: LD_EXP 36
8911: PUSH
8912: LD_VAR 0 1
8916: ARRAY
8917: ARRAY
8918: PUSH
8919: LD_INT 1
8921: ARRAY
8922: PPUSH
8923: LD_LOC 17
8927: PUSH
8928: LD_EXP 36
8932: PUSH
8933: LD_VAR 0 1
8937: ARRAY
8938: ARRAY
8939: PUSH
8940: LD_INT 2
8942: ARRAY
8943: PPUSH
8944: LD_INT 10
8946: PPUSH
8947: LD_INT 0
8949: PPUSH
8950: CALL_OW 50
// SetAttr ( BloodGods [ side ] , attr_stamina , 300 ) ;
8954: LD_LOC 14
8958: PUSH
8959: LD_VAR 0 1
8963: ARRAY
8964: PPUSH
8965: LD_INT 1
8967: PPUSH
8968: LD_INT 300
8970: PPUSH
8971: CALL_OW 239
// if not NoDialog then
8975: LD_VAR 0 2
8979: NOT
8980: IFFALSE 9000
// SayRadio ( BloodGods [ side ] , DLAwaken ) ;
8982: LD_LOC 14
8986: PUSH
8987: LD_VAR 0 1
8991: ARRAY
8992: PPUSH
8993: LD_STRING DLAwaken
8995: PPUSH
8996: CALL_OW 94
// end ;
9000: LD_VAR 0 3
9004: RET
// function DisplayTimeWithKills ; var x ; begin
9005: LD_INT 0
9007: PPUSH
9008: PPUSH
// ExtraStrings :=  ;
9009: LD_ADDR_EXP 56
9013: PUSH
9014: LD_STRING 
9016: ST_TO_ADDR
// for x = 1 to Side_Positions do
9017: LD_ADDR_VAR 0 2
9021: PUSH
9022: DOUBLE
9023: LD_INT 1
9025: DEC
9026: ST_TO_ADDR
9027: LD_EXP 36
9031: PUSH
9032: FOR_TO
9033: IFFALSE 9266
// if Side_Positions [ x ] then
9035: LD_EXP 36
9039: PUSH
9040: LD_VAR 0 2
9044: ARRAY
9045: IFFALSE 9264
// begin BloodGods_CurrentKills := Replace ( BloodGods_CurrentKills , x , GetHumansKilled ( x ) - BloodGods_LastKills [ x ] ) ;
9047: LD_ADDR_LOC 16
9051: PUSH
9052: LD_LOC 16
9056: PPUSH
9057: LD_VAR 0 2
9061: PPUSH
9062: LD_VAR 0 2
9066: PPUSH
9067: CALL_OW 515
9071: PUSH
9072: LD_LOC 15
9076: PUSH
9077: LD_VAR 0 2
9081: ARRAY
9082: MINUS
9083: PPUSH
9084: CALL_OW 1
9088: ST_TO_ADDR
// if ( BloodGods [ x ] > - 1 ) and ( IsLive ( BloodGods [ x ] ) ) then
9089: LD_LOC 14
9093: PUSH
9094: LD_VAR 0 2
9098: ARRAY
9099: PUSH
9100: LD_INT 1
9102: NEG
9103: GREATER
9104: PUSH
9105: LD_LOC 14
9109: PUSH
9110: LD_VAR 0 2
9114: ARRAY
9115: PPUSH
9116: CALL_OW 300
9120: AND
9121: IFFALSE 9154
// ExtraStrings = ExtraStrings ^ [ #godawoken , x , x ] else
9123: LD_ADDR_EXP 56
9127: PUSH
9128: LD_EXP 56
9132: PUSH
9133: LD_STRING #godawoken
9135: PUSH
9136: LD_VAR 0 2
9140: PUSH
9141: LD_VAR 0 2
9145: PUSH
9146: EMPTY
9147: LIST
9148: LIST
9149: LIST
9150: ADD
9151: ST_TO_ADDR
9152: GO 9264
// if ( BloodGods [ x ] > - 1 ) and ( IsDead ( BloodGods [ x ] ) ) then
9154: LD_LOC 14
9158: PUSH
9159: LD_VAR 0 2
9163: ARRAY
9164: PUSH
9165: LD_INT 1
9167: NEG
9168: GREATER
9169: PUSH
9170: LD_LOC 14
9174: PUSH
9175: LD_VAR 0 2
9179: ARRAY
9180: PPUSH
9181: CALL_OW 301
9185: AND
9186: IFFALSE 9219
// ExtraStrings = ExtraStrings ^ [ #goddied , x , x ] else
9188: LD_ADDR_EXP 56
9192: PUSH
9193: LD_EXP 56
9197: PUSH
9198: LD_STRING #goddied
9200: PUSH
9201: LD_VAR 0 2
9205: PUSH
9206: LD_VAR 0 2
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: LIST
9215: ADD
9216: ST_TO_ADDR
9217: GO 9264
// ExtraStrings = ExtraStrings ^ [ #godssacrifise , x , x , BloodGods_CurrentKills [ x ] , 6 ] end ;
9219: LD_ADDR_EXP 56
9223: PUSH
9224: LD_EXP 56
9228: PUSH
9229: LD_STRING #godssacrifise
9231: PUSH
9232: LD_VAR 0 2
9236: PUSH
9237: LD_VAR 0 2
9241: PUSH
9242: LD_LOC 16
9246: PUSH
9247: LD_VAR 0 2
9251: ARRAY
9252: PUSH
9253: LD_INT 6
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: ADD
9263: ST_TO_ADDR
9264: GO 9032
9266: POP
9267: POP
// end ;
9268: LD_VAR 0 1
9272: RET
// export function InitBloodGods ; begin
9273: LD_INT 0
9275: PPUSH
// BloodGods = [ - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 ] ;
9276: LD_ADDR_LOC 14
9280: PUSH
9281: LD_INT 1
9283: NEG
9284: PUSH
9285: LD_INT 1
9287: NEG
9288: PUSH
9289: LD_INT 1
9291: NEG
9292: PUSH
9293: LD_INT 1
9295: NEG
9296: PUSH
9297: LD_INT 1
9299: NEG
9300: PUSH
9301: LD_INT 1
9303: NEG
9304: PUSH
9305: LD_INT 1
9307: NEG
9308: PUSH
9309: LD_INT 1
9311: NEG
9312: PUSH
9313: EMPTY
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: ST_TO_ADDR
// BloodGods_LastKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9323: LD_ADDR_LOC 15
9327: PUSH
9328: LD_INT 0
9330: PUSH
9331: LD_INT 0
9333: PUSH
9334: LD_INT 0
9336: PUSH
9337: LD_INT 0
9339: PUSH
9340: LD_INT 0
9342: PUSH
9343: LD_INT 0
9345: PUSH
9346: LD_INT 0
9348: PUSH
9349: LD_INT 0
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: ST_TO_ADDR
// BloodGods_CurrentKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9362: LD_ADDR_LOC 16
9366: PUSH
9367: LD_INT 0
9369: PUSH
9370: LD_INT 0
9372: PUSH
9373: LD_INT 0
9375: PUSH
9376: LD_INT 0
9378: PUSH
9379: LD_INT 0
9381: PUSH
9382: LD_INT 0
9384: PUSH
9385: LD_INT 0
9387: PUSH
9388: LD_INT 0
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: ST_TO_ADDR
// BloodGods_Positions = [ [ 60 , 47 ] , [ 82 , 26 ] , [ 124 , 45 ] , [ 147 , 90 ] , [ 126 , 112 ] , [ 84 , 92 ] , [ 106 , 73 ] , [ 106 , 73 ] ] ;
9401: LD_ADDR_LOC 17
9405: PUSH
9406: LD_INT 60
9408: PUSH
9409: LD_INT 47
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PUSH
9416: LD_INT 82
9418: PUSH
9419: LD_INT 26
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: PUSH
9426: LD_INT 124
9428: PUSH
9429: LD_INT 45
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: PUSH
9436: LD_INT 147
9438: PUSH
9439: LD_INT 90
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: PUSH
9446: LD_INT 126
9448: PUSH
9449: LD_INT 112
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: PUSH
9456: LD_INT 84
9458: PUSH
9459: LD_INT 92
9461: PUSH
9462: EMPTY
9463: LIST
9464: LIST
9465: PUSH
9466: LD_INT 106
9468: PUSH
9469: LD_INT 73
9471: PUSH
9472: EMPTY
9473: LIST
9474: LIST
9475: PUSH
9476: LD_INT 106
9478: PUSH
9479: LD_INT 73
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: ST_TO_ADDR
// ClearHumansKilled ;
9496: CALL_OW 516
// enable ( 200 ) ;
9500: LD_INT 200
9502: ENABLE_MARKED
// end ; end_of_file
9503: LD_VAR 0 1
9507: RET
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
9508: LD_INT 0
9510: PPUSH
9511: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
9512: LD_ADDR_VAR 0 2
9516: PUSH
9517: LD_STRING #Multi1x1-Time
9519: PUSH
9520: LD_OWVAR 1
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
9529: LD_INT 0
9531: PUSH
9532: LD_EXP 33
9536: PUSH
9537: LD_OWVAR 1
9541: MINUS
9542: LESSEQUAL
9543: IFFALSE 9574
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
9545: LD_ADDR_VAR 0 2
9549: PUSH
9550: LD_VAR 0 2
9554: PUSH
9555: LD_STRING #allowedsibbomb
9557: PUSH
9558: LD_EXP 33
9562: PUSH
9563: LD_OWVAR 1
9567: MINUS
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: ADD
9573: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
9574: LD_INT 0
9576: PUSH
9577: LD_EXP 59
9581: PUSH
9582: LD_OWVAR 1
9586: MINUS
9587: LESSEQUAL
9588: IFFALSE 9619
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
9590: LD_ADDR_VAR 0 2
9594: PUSH
9595: LD_VAR 0 2
9599: PUSH
9600: LD_STRING #builduptime
9602: PUSH
9603: LD_EXP 59
9607: PUSH
9608: LD_OWVAR 1
9612: MINUS
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: ADD
9618: ST_TO_ADDR
// if ( ExtraStrings ) then
9619: LD_EXP 56
9623: IFFALSE 9645
// AllStrings := AllStrings ^  ^ ExtraStrings ;
9625: LD_ADDR_VAR 0 2
9629: PUSH
9630: LD_VAR 0 2
9634: PUSH
9635: LD_STRING 
9637: ADD
9638: PUSH
9639: LD_EXP 56
9643: ADD
9644: ST_TO_ADDR
// Display_Strings := AllStrings ;
9645: LD_ADDR_OWVAR 47
9649: PUSH
9650: LD_VAR 0 2
9654: ST_TO_ADDR
// end ;
9655: LD_VAR 0 1
9659: RET
// every 0 0$1 do
9660: GO 9662
9662: DISABLE
// begin ShowTimer ;
9663: CALL 9508 0 0
// enable ;
9667: ENABLE
// end ; end_of_file
9668: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
9669: LD_INT 0
9671: PPUSH
9672: PPUSH
9673: PPUSH
// BuildUpTime_Delay = 0 ;
9674: LD_ADDR_EXP 59
9678: PUSH
9679: LD_INT 0
9681: ST_TO_ADDR
// if not def_builduptime then
9682: LD_EXP 16
9686: NOT
9687: IFFALSE 9691
// exit ;
9689: GO 9874
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
9691: LD_ADDR_EXP 59
9695: PUSH
9696: LD_INT 8400
9698: PUSH
9699: LD_INT 2100
9701: PUSH
9702: LD_EXP 16
9706: MUL
9707: PLUS
9708: ST_TO_ADDR
// BuildUpTimeActive := true ;
9709: LD_ADDR_EXP 58
9713: PUSH
9714: LD_INT 1
9716: ST_TO_ADDR
// for i := 1 to 8 do
9717: LD_ADDR_VAR 0 2
9721: PUSH
9722: DOUBLE
9723: LD_INT 1
9725: DEC
9726: ST_TO_ADDR
9727: LD_INT 8
9729: PUSH
9730: FOR_TO
9731: IFFALSE 9872
// if Side_Positions [ i ] then
9733: LD_EXP 36
9737: PUSH
9738: LD_VAR 0 2
9742: ARRAY
9743: IFFALSE 9870
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
9745: LD_EXP 57
9749: PUSH
9750: LD_EXP 36
9754: PUSH
9755: LD_VAR 0 2
9759: ARRAY
9760: ARRAY
9761: PPUSH
9762: LD_INT 5
9764: PPUSH
9765: CALL_OW 424
// for j := 1 to 8 do
9769: LD_ADDR_VAR 0 3
9773: PUSH
9774: DOUBLE
9775: LD_INT 1
9777: DEC
9778: ST_TO_ADDR
9779: LD_INT 8
9781: PUSH
9782: FOR_TO
9783: IFFALSE 9868
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
9785: LD_EXP 36
9789: PUSH
9790: LD_VAR 0 3
9794: ARRAY
9795: PUSH
9796: LD_EXP 34
9800: PUSH
9801: LD_VAR 0 2
9805: ARRAY
9806: PUSH
9807: LD_EXP 34
9811: PUSH
9812: LD_VAR 0 3
9816: ARRAY
9817: NONEQUAL
9818: PUSH
9819: LD_EXP 38
9823: NOT
9824: PUSH
9825: LD_VAR 0 2
9829: PUSH
9830: LD_VAR 0 3
9834: NONEQUAL
9835: AND
9836: OR
9837: AND
9838: IFFALSE 9866
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
9840: LD_VAR 0 3
9844: PPUSH
9845: LD_EXP 57
9849: PUSH
9850: LD_EXP 36
9854: PUSH
9855: LD_VAR 0 2
9859: ARRAY
9860: ARRAY
9861: PPUSH
9862: CALL_OW 333
9866: GO 9782
9868: POP
9869: POP
// end ;
9870: GO 9730
9872: POP
9873: POP
// end ;
9874: LD_VAR 0 1
9878: RET
// export function EndBuildUp ; var i , j ; begin
9879: LD_INT 0
9881: PPUSH
9882: PPUSH
9883: PPUSH
// BuildUpTimeActive := false ;
9884: LD_ADDR_EXP 58
9888: PUSH
9889: LD_INT 0
9891: ST_TO_ADDR
// for i := 1 to 8 do
9892: LD_ADDR_VAR 0 2
9896: PUSH
9897: DOUBLE
9898: LD_INT 1
9900: DEC
9901: ST_TO_ADDR
9902: LD_INT 8
9904: PUSH
9905: FOR_TO
9906: IFFALSE 10047
// if Side_Positions [ i ] then
9908: LD_EXP 36
9912: PUSH
9913: LD_VAR 0 2
9917: ARRAY
9918: IFFALSE 10045
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
9920: LD_EXP 57
9924: PUSH
9925: LD_EXP 36
9929: PUSH
9930: LD_VAR 0 2
9934: ARRAY
9935: ARRAY
9936: PPUSH
9937: LD_INT 0
9939: PPUSH
9940: CALL_OW 424
// for j := 1 to 8 do
9944: LD_ADDR_VAR 0 3
9948: PUSH
9949: DOUBLE
9950: LD_INT 1
9952: DEC
9953: ST_TO_ADDR
9954: LD_INT 8
9956: PUSH
9957: FOR_TO
9958: IFFALSE 10043
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
9960: LD_EXP 36
9964: PUSH
9965: LD_VAR 0 3
9969: ARRAY
9970: PUSH
9971: LD_EXP 34
9975: PUSH
9976: LD_VAR 0 2
9980: ARRAY
9981: PUSH
9982: LD_EXP 34
9986: PUSH
9987: LD_VAR 0 3
9991: ARRAY
9992: NONEQUAL
9993: PUSH
9994: LD_EXP 38
9998: NOT
9999: PUSH
10000: LD_VAR 0 2
10004: PUSH
10005: LD_VAR 0 3
10009: NONEQUAL
10010: AND
10011: OR
10012: AND
10013: IFFALSE 10041
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
10015: LD_VAR 0 3
10019: PPUSH
10020: LD_EXP 57
10024: PUSH
10025: LD_EXP 36
10029: PUSH
10030: LD_VAR 0 2
10034: ARRAY
10035: ARRAY
10036: PPUSH
10037: CALL_OW 334
10041: GO 9957
10043: POP
10044: POP
// end ;
10045: GO 9905
10047: POP
10048: POP
// end ;
10049: LD_VAR 0 1
10053: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
10054: LD_EXP 58
10058: IFFALSE 10233
10060: GO 10062
10062: DISABLE
10063: LD_INT 0
10065: PPUSH
10066: PPUSH
// begin for i := 1 to 8 do
10067: LD_ADDR_VAR 0 1
10071: PUSH
10072: DOUBLE
10073: LD_INT 1
10075: DEC
10076: ST_TO_ADDR
10077: LD_INT 8
10079: PUSH
10080: FOR_TO
10081: IFFALSE 10230
// if Side_Positions [ i ] then
10083: LD_EXP 36
10087: PUSH
10088: LD_VAR 0 1
10092: ARRAY
10093: IFFALSE 10228
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
10095: LD_ADDR_VAR 0 2
10099: PUSH
10100: LD_EXP 57
10104: PUSH
10105: LD_EXP 36
10109: PUSH
10110: LD_VAR 0 1
10114: ARRAY
10115: ARRAY
10116: PPUSH
10117: LD_INT 2
10119: PUSH
10120: LD_INT 21
10122: PUSH
10123: LD_INT 1
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: PUSH
10130: LD_INT 21
10132: PUSH
10133: LD_INT 2
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: LIST
10144: PUSH
10145: LD_INT 22
10147: PUSH
10148: LD_OWVAR 2
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: PPUSH
10161: CALL_OW 70
10165: PUSH
10166: FOR_IN
10167: IFFALSE 10226
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
10169: LD_EXP 34
10173: PUSH
10174: LD_VAR 0 1
10178: ARRAY
10179: PUSH
10180: LD_EXP 34
10184: PUSH
10185: LD_OWVAR 2
10189: ARRAY
10190: NONEQUAL
10191: PUSH
10192: LD_EXP 38
10196: NOT
10197: PUSH
10198: LD_VAR 0 1
10202: PUSH
10203: LD_OWVAR 2
10207: NONEQUAL
10208: AND
10209: OR
10210: IFFALSE 10224
// ComMoveToArea ( un , BuildUpEscape ) ;
10212: LD_VAR 0 2
10216: PPUSH
10217: LD_INT 16
10219: PPUSH
10220: CALL_OW 113
10224: GO 10166
10226: POP
10227: POP
10228: GO 10080
10230: POP
10231: POP
// enable ;
10232: ENABLE
// end ;
10233: PPOPN 2
10235: END
// every 0 0$1 trigger def_builduptime do
10236: LD_EXP 16
10240: IFFALSE 10266
10242: GO 10244
10244: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
10245: LD_INT 8400
10247: PUSH
10248: LD_EXP 16
10252: PUSH
10253: LD_INT 2100
10255: MUL
10256: PLUS
10257: PPUSH
10258: CALL_OW 67
// EndBuildUp ;
10262: CALL 9879 0 0
// end ; end_of_file
10266: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
10267: LD_INT 0
10269: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
10270: LD_VAR 0 1
10274: PPUSH
10275: CALL_OW 255
10279: PUSH
10280: LD_VAR 0 4
10284: EQUAL
10285: IFFALSE 10304
// begin SetAchievement ( ACH_RAD ) ;
10287: LD_STRING ACH_RAD
10289: PPUSH
10290: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
10294: LD_STRING ACH_NL
10296: PPUSH
10297: LD_INT 1
10299: PPUSH
10300: CALL_OW 564
// end end ;
10304: LD_VAR 0 5
10308: RET
// export function SA_Win ( side ) ; begin
10309: LD_INT 0
10311: PPUSH
// case side of 1 :
10312: LD_VAR 0 1
10316: PUSH
10317: LD_INT 1
10319: DOUBLE
10320: EQUAL
10321: IFTRUE 10325
10323: GO 10338
10325: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
10326: LD_STRING ACH_AH
10328: PPUSH
10329: LD_INT 1
10331: PPUSH
10332: CALL_OW 564
10336: GO 10501
10338: LD_INT 2
10340: DOUBLE
10341: EQUAL
10342: IFTRUE 10346
10344: GO 10359
10346: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
10347: LD_STRING ACH_E
10349: PPUSH
10350: LD_INT 1
10352: PPUSH
10353: CALL_OW 564
10357: GO 10501
10359: LD_INT 3
10361: DOUBLE
10362: EQUAL
10363: IFTRUE 10367
10365: GO 10380
10367: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
10368: LD_STRING ACH_OOL
10370: PPUSH
10371: LD_INT 1
10373: PPUSH
10374: CALL_OW 564
10378: GO 10501
10380: LD_INT 1
10382: PUSH
10383: LD_INT 2
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: DOUBLE
10390: EQUAL
10391: IFTRUE 10395
10393: GO 10420
10395: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
10396: LD_STRING ACH_AH
10398: PPUSH
10399: LD_REAL  5.00000000000000E-0001
10402: PPUSH
10403: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
10407: LD_STRING ACH_E
10409: PPUSH
10410: LD_REAL  5.00000000000000E-0001
10413: PPUSH
10414: CALL_OW 564
// end ; [ 2 , 3 ] :
10418: GO 10501
10420: LD_INT 2
10422: PUSH
10423: LD_INT 3
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: DOUBLE
10430: EQUAL
10431: IFTRUE 10435
10433: GO 10460
10435: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
10436: LD_STRING ACH_OOL
10438: PPUSH
10439: LD_REAL  5.00000000000000E-0001
10442: PPUSH
10443: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
10447: LD_STRING ACH_E
10449: PPUSH
10450: LD_REAL  5.00000000000000E-0001
10453: PPUSH
10454: CALL_OW 564
// end ; [ 3 , 1 ] :
10458: GO 10501
10460: LD_INT 3
10462: PUSH
10463: LD_INT 1
10465: PUSH
10466: EMPTY
10467: LIST
10468: LIST
10469: DOUBLE
10470: EQUAL
10471: IFTRUE 10475
10473: GO 10500
10475: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
10476: LD_STRING ACH_AH
10478: PPUSH
10479: LD_REAL  5.00000000000000E-0001
10482: PPUSH
10483: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
10487: LD_STRING ACH_OOL
10489: PPUSH
10490: LD_REAL  5.00000000000000E-0001
10493: PPUSH
10494: CALL_OW 564
// end ; end ;
10498: GO 10501
10500: POP
// end ; end_of_file
10501: LD_VAR 0 2
10505: RET
// export function SetMpTechs ( ) ; var side , i ; begin
10506: LD_INT 0
10508: PPUSH
10509: PPUSH
10510: PPUSH
// for side = 1 to 8 do
10511: LD_ADDR_VAR 0 2
10515: PUSH
10516: DOUBLE
10517: LD_INT 1
10519: DEC
10520: ST_TO_ADDR
10521: LD_INT 8
10523: PUSH
10524: FOR_TO
10525: IFFALSE 10646
// begin for i = 1 to 72 do
10527: LD_ADDR_VAR 0 3
10531: PUSH
10532: DOUBLE
10533: LD_INT 1
10535: DEC
10536: ST_TO_ADDR
10537: LD_INT 72
10539: PUSH
10540: FOR_TO
10541: IFFALSE 10572
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
10543: LD_VAR 0 3
10547: PPUSH
10548: LD_VAR 0 2
10552: PPUSH
10553: LD_INT 0
10555: PPUSH
10556: LD_VAR 0 3
10560: PPUSH
10561: CALL_OW 565
10565: PPUSH
10566: CALL_OW 322
10570: GO 10540
10572: POP
10573: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
10574: LD_INT 73
10576: PPUSH
10577: LD_VAR 0 2
10581: PPUSH
10582: LD_INT 0
10584: PPUSH
10585: LD_INT 25
10587: PPUSH
10588: CALL_OW 565
10592: PPUSH
10593: CALL_OW 322
// for i = 0 to 40 do
10597: LD_ADDR_VAR 0 3
10601: PUSH
10602: DOUBLE
10603: LD_INT 0
10605: DEC
10606: ST_TO_ADDR
10607: LD_INT 40
10609: PUSH
10610: FOR_TO
10611: IFFALSE 10642
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
10613: LD_VAR 0 3
10617: PPUSH
10618: LD_VAR 0 2
10622: PPUSH
10623: LD_INT 1
10625: PPUSH
10626: LD_VAR 0 3
10630: PPUSH
10631: CALL_OW 565
10635: PPUSH
10636: CALL_OW 324
10640: GO 10610
10642: POP
10643: POP
// end ;
10644: GO 10524
10646: POP
10647: POP
// end ;
10648: LD_VAR 0 1
10652: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
10653: LD_INT 0
10655: PPUSH
10656: PPUSH
10657: PPUSH
// for side = 1 to 8 do
10658: LD_ADDR_VAR 0 3
10662: PUSH
10663: DOUBLE
10664: LD_INT 1
10666: DEC
10667: ST_TO_ADDR
10668: LD_INT 8
10670: PUSH
10671: FOR_TO
10672: IFFALSE 14668
// begin for i = 1 to 73 do
10674: LD_ADDR_VAR 0 4
10678: PUSH
10679: DOUBLE
10680: LD_INT 1
10682: DEC
10683: ST_TO_ADDR
10684: LD_INT 73
10686: PUSH
10687: FOR_TO
10688: IFFALSE 10709
// SetTech ( i , side , state_disabled ) ;
10690: LD_VAR 0 4
10694: PPUSH
10695: LD_VAR 0 3
10699: PPUSH
10700: LD_INT 0
10702: PPUSH
10703: CALL_OW 322
10707: GO 10687
10709: POP
10710: POP
// for i = 0 to 40 do
10711: LD_ADDR_VAR 0 4
10715: PUSH
10716: DOUBLE
10717: LD_INT 0
10719: DEC
10720: ST_TO_ADDR
10721: LD_INT 40
10723: PUSH
10724: FOR_TO
10725: IFFALSE 10746
// SetRestrict ( i , side , false ) ;
10727: LD_VAR 0 4
10731: PPUSH
10732: LD_VAR 0 3
10736: PPUSH
10737: LD_INT 0
10739: PPUSH
10740: CALL_OW 324
10744: GO 10724
10746: POP
10747: POP
// case level of 1 :
10748: LD_VAR 0 1
10752: PUSH
10753: LD_INT 1
10755: DOUBLE
10756: EQUAL
10757: IFTRUE 10761
10759: GO 10914
10761: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10762: LD_INT 35
10764: PPUSH
10765: LD_VAR 0 3
10769: PPUSH
10770: LD_INT 1
10772: PPUSH
10773: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10777: LD_INT 45
10779: PPUSH
10780: LD_VAR 0 3
10784: PPUSH
10785: LD_INT 1
10787: PPUSH
10788: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10792: LD_INT 46
10794: PPUSH
10795: LD_VAR 0 3
10799: PPUSH
10800: LD_INT 1
10802: PPUSH
10803: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10807: LD_INT 47
10809: PPUSH
10810: LD_VAR 0 3
10814: PPUSH
10815: LD_INT 1
10817: PPUSH
10818: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10822: LD_INT 0
10824: PPUSH
10825: LD_VAR 0 3
10829: PPUSH
10830: LD_INT 1
10832: PPUSH
10833: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10837: LD_INT 2
10839: PPUSH
10840: LD_VAR 0 3
10844: PPUSH
10845: LD_INT 1
10847: PPUSH
10848: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10852: LD_INT 4
10854: PPUSH
10855: LD_VAR 0 3
10859: PPUSH
10860: LD_INT 1
10862: PPUSH
10863: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10867: LD_INT 6
10869: PPUSH
10870: LD_VAR 0 3
10874: PPUSH
10875: LD_INT 1
10877: PPUSH
10878: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10882: LD_INT 29
10884: PPUSH
10885: LD_VAR 0 3
10889: PPUSH
10890: LD_INT 1
10892: PPUSH
10893: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10897: LD_INT 31
10899: PPUSH
10900: LD_VAR 0 3
10904: PPUSH
10905: LD_INT 1
10907: PPUSH
10908: CALL_OW 324
// end ; 2 :
10912: GO 14666
10914: LD_INT 2
10916: DOUBLE
10917: EQUAL
10918: IFTRUE 10922
10920: GO 11120
10922: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10923: LD_INT 35
10925: PPUSH
10926: LD_VAR 0 3
10930: PPUSH
10931: LD_INT 1
10933: PPUSH
10934: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10938: LD_INT 45
10940: PPUSH
10941: LD_VAR 0 3
10945: PPUSH
10946: LD_INT 1
10948: PPUSH
10949: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10953: LD_INT 46
10955: PPUSH
10956: LD_VAR 0 3
10960: PPUSH
10961: LD_INT 1
10963: PPUSH
10964: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10968: LD_INT 47
10970: PPUSH
10971: LD_VAR 0 3
10975: PPUSH
10976: LD_INT 1
10978: PPUSH
10979: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10983: LD_INT 1
10985: PPUSH
10986: LD_VAR 0 3
10990: PPUSH
10991: LD_INT 1
10993: PPUSH
10994: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10998: LD_INT 2
11000: PPUSH
11001: LD_VAR 0 3
11005: PPUSH
11006: LD_INT 1
11008: PPUSH
11009: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11013: LD_INT 11
11015: PPUSH
11016: LD_VAR 0 3
11020: PPUSH
11021: LD_INT 1
11023: PPUSH
11024: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11028: LD_INT 0
11030: PPUSH
11031: LD_VAR 0 3
11035: PPUSH
11036: LD_INT 1
11038: PPUSH
11039: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11043: LD_INT 2
11045: PPUSH
11046: LD_VAR 0 3
11050: PPUSH
11051: LD_INT 1
11053: PPUSH
11054: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11058: LD_INT 4
11060: PPUSH
11061: LD_VAR 0 3
11065: PPUSH
11066: LD_INT 1
11068: PPUSH
11069: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11073: LD_INT 6
11075: PPUSH
11076: LD_VAR 0 3
11080: PPUSH
11081: LD_INT 1
11083: PPUSH
11084: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11088: LD_INT 29
11090: PPUSH
11091: LD_VAR 0 3
11095: PPUSH
11096: LD_INT 1
11098: PPUSH
11099: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11103: LD_INT 31
11105: PPUSH
11106: LD_VAR 0 3
11110: PPUSH
11111: LD_INT 1
11113: PPUSH
11114: CALL_OW 324
// end ; 3 :
11118: GO 14666
11120: LD_INT 3
11122: DOUBLE
11123: EQUAL
11124: IFTRUE 11128
11126: GO 11581
11128: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11129: LD_INT 35
11131: PPUSH
11132: LD_VAR 0 3
11136: PPUSH
11137: LD_INT 1
11139: PPUSH
11140: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11144: LD_INT 45
11146: PPUSH
11147: LD_VAR 0 3
11151: PPUSH
11152: LD_INT 1
11154: PPUSH
11155: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11159: LD_INT 46
11161: PPUSH
11162: LD_VAR 0 3
11166: PPUSH
11167: LD_INT 1
11169: PPUSH
11170: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11174: LD_INT 47
11176: PPUSH
11177: LD_VAR 0 3
11181: PPUSH
11182: LD_INT 1
11184: PPUSH
11185: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11189: LD_INT 1
11191: PPUSH
11192: LD_VAR 0 3
11196: PPUSH
11197: LD_INT 1
11199: PPUSH
11200: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11204: LD_INT 2
11206: PPUSH
11207: LD_VAR 0 3
11211: PPUSH
11212: LD_INT 1
11214: PPUSH
11215: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11219: LD_INT 11
11221: PPUSH
11222: LD_VAR 0 3
11226: PPUSH
11227: LD_INT 1
11229: PPUSH
11230: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11234: LD_INT 48
11236: PPUSH
11237: LD_VAR 0 3
11241: PPUSH
11242: LD_INT 1
11244: PPUSH
11245: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11249: LD_INT 69
11251: PPUSH
11252: LD_VAR 0 3
11256: PPUSH
11257: LD_INT 1
11259: PPUSH
11260: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11264: LD_INT 39
11266: PPUSH
11267: LD_VAR 0 3
11271: PPUSH
11272: LD_INT 1
11274: PPUSH
11275: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11279: LD_INT 43
11281: PPUSH
11282: LD_VAR 0 3
11286: PPUSH
11287: LD_INT 1
11289: PPUSH
11290: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11294: LD_INT 51
11296: PPUSH
11297: LD_VAR 0 3
11301: PPUSH
11302: LD_INT 1
11304: PPUSH
11305: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11309: LD_INT 6
11311: PPUSH
11312: LD_VAR 0 3
11316: PPUSH
11317: LD_INT 1
11319: PPUSH
11320: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11324: LD_INT 0
11326: PPUSH
11327: LD_VAR 0 3
11331: PPUSH
11332: LD_INT 1
11334: PPUSH
11335: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11339: LD_INT 2
11341: PPUSH
11342: LD_VAR 0 3
11346: PPUSH
11347: LD_INT 1
11349: PPUSH
11350: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11354: LD_INT 3
11356: PPUSH
11357: LD_VAR 0 3
11361: PPUSH
11362: LD_INT 1
11364: PPUSH
11365: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11369: LD_INT 4
11371: PPUSH
11372: LD_VAR 0 3
11376: PPUSH
11377: LD_INT 1
11379: PPUSH
11380: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11384: LD_INT 6
11386: PPUSH
11387: LD_VAR 0 3
11391: PPUSH
11392: LD_INT 1
11394: PPUSH
11395: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11399: LD_INT 7
11401: PPUSH
11402: LD_VAR 0 3
11406: PPUSH
11407: LD_INT 1
11409: PPUSH
11410: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11414: LD_INT 8
11416: PPUSH
11417: LD_VAR 0 3
11421: PPUSH
11422: LD_INT 1
11424: PPUSH
11425: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11429: LD_INT 10
11431: PPUSH
11432: LD_VAR 0 3
11436: PPUSH
11437: LD_INT 1
11439: PPUSH
11440: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11444: LD_INT 15
11446: PPUSH
11447: LD_VAR 0 3
11451: PPUSH
11452: LD_INT 1
11454: PPUSH
11455: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11459: LD_INT 16
11461: PPUSH
11462: LD_VAR 0 3
11466: PPUSH
11467: LD_INT 1
11469: PPUSH
11470: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11474: LD_INT 17
11476: PPUSH
11477: LD_VAR 0 3
11481: PPUSH
11482: LD_INT 1
11484: PPUSH
11485: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11489: LD_INT 20
11491: PPUSH
11492: LD_VAR 0 3
11496: PPUSH
11497: LD_INT 1
11499: PPUSH
11500: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11504: LD_INT 26
11506: PPUSH
11507: LD_VAR 0 3
11511: PPUSH
11512: LD_INT 1
11514: PPUSH
11515: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11519: LD_INT 27
11521: PPUSH
11522: LD_VAR 0 3
11526: PPUSH
11527: LD_INT 1
11529: PPUSH
11530: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11534: LD_INT 29
11536: PPUSH
11537: LD_VAR 0 3
11541: PPUSH
11542: LD_INT 1
11544: PPUSH
11545: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11549: LD_INT 31
11551: PPUSH
11552: LD_VAR 0 3
11556: PPUSH
11557: LD_INT 1
11559: PPUSH
11560: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11564: LD_INT 32
11566: PPUSH
11567: LD_VAR 0 3
11571: PPUSH
11572: LD_INT 1
11574: PPUSH
11575: CALL_OW 324
// end ; 4 :
11579: GO 14666
11581: LD_INT 4
11583: DOUBLE
11584: EQUAL
11585: IFTRUE 11589
11587: GO 12537
11589: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11590: LD_INT 35
11592: PPUSH
11593: LD_VAR 0 3
11597: PPUSH
11598: LD_INT 1
11600: PPUSH
11601: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11605: LD_INT 45
11607: PPUSH
11608: LD_VAR 0 3
11612: PPUSH
11613: LD_INT 1
11615: PPUSH
11616: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11620: LD_INT 46
11622: PPUSH
11623: LD_VAR 0 3
11627: PPUSH
11628: LD_INT 1
11630: PPUSH
11631: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11635: LD_INT 47
11637: PPUSH
11638: LD_VAR 0 3
11642: PPUSH
11643: LD_INT 1
11645: PPUSH
11646: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11650: LD_INT 1
11652: PPUSH
11653: LD_VAR 0 3
11657: PPUSH
11658: LD_INT 1
11660: PPUSH
11661: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11665: LD_INT 2
11667: PPUSH
11668: LD_VAR 0 3
11672: PPUSH
11673: LD_INT 1
11675: PPUSH
11676: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11680: LD_INT 11
11682: PPUSH
11683: LD_VAR 0 3
11687: PPUSH
11688: LD_INT 1
11690: PPUSH
11691: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11695: LD_INT 20
11697: PPUSH
11698: LD_VAR 0 3
11702: PPUSH
11703: LD_INT 1
11705: PPUSH
11706: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11710: LD_INT 48
11712: PPUSH
11713: LD_VAR 0 3
11717: PPUSH
11718: LD_INT 1
11720: PPUSH
11721: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11725: LD_INT 49
11727: PPUSH
11728: LD_VAR 0 3
11732: PPUSH
11733: LD_INT 1
11735: PPUSH
11736: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11740: LD_INT 69
11742: PPUSH
11743: LD_VAR 0 3
11747: PPUSH
11748: LD_INT 1
11750: PPUSH
11751: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11755: LD_INT 39
11757: PPUSH
11758: LD_VAR 0 3
11762: PPUSH
11763: LD_INT 1
11765: PPUSH
11766: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11770: LD_INT 34
11772: PPUSH
11773: LD_VAR 0 3
11777: PPUSH
11778: LD_INT 1
11780: PPUSH
11781: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11785: LD_INT 42
11787: PPUSH
11788: LD_VAR 0 3
11792: PPUSH
11793: LD_INT 1
11795: PPUSH
11796: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11800: LD_INT 44
11802: PPUSH
11803: LD_VAR 0 3
11807: PPUSH
11808: LD_INT 1
11810: PPUSH
11811: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11815: LD_INT 41
11817: PPUSH
11818: LD_VAR 0 3
11822: PPUSH
11823: LD_INT 1
11825: PPUSH
11826: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11830: LD_INT 43
11832: PPUSH
11833: LD_VAR 0 3
11837: PPUSH
11838: LD_INT 1
11840: PPUSH
11841: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11845: LD_INT 70
11847: PPUSH
11848: LD_VAR 0 3
11852: PPUSH
11853: LD_INT 1
11855: PPUSH
11856: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11860: LD_INT 51
11862: PPUSH
11863: LD_VAR 0 3
11867: PPUSH
11868: LD_INT 1
11870: PPUSH
11871: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11875: LD_INT 52
11877: PPUSH
11878: LD_VAR 0 3
11882: PPUSH
11883: LD_INT 1
11885: PPUSH
11886: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11890: LD_INT 6
11892: PPUSH
11893: LD_VAR 0 3
11897: PPUSH
11898: LD_INT 1
11900: PPUSH
11901: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11905: LD_INT 15
11907: PPUSH
11908: LD_VAR 0 3
11912: PPUSH
11913: LD_INT 1
11915: PPUSH
11916: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11920: LD_INT 7
11922: PPUSH
11923: LD_VAR 0 3
11927: PPUSH
11928: LD_INT 1
11930: PPUSH
11931: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11935: LD_INT 12
11937: PPUSH
11938: LD_VAR 0 3
11942: PPUSH
11943: LD_INT 1
11945: PPUSH
11946: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11950: LD_INT 18
11952: PPUSH
11953: LD_VAR 0 3
11957: PPUSH
11958: LD_INT 1
11960: PPUSH
11961: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11965: LD_INT 60
11967: PPUSH
11968: LD_VAR 0 3
11972: PPUSH
11973: LD_INT 1
11975: PPUSH
11976: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11980: LD_INT 9
11982: PPUSH
11983: LD_VAR 0 3
11987: PPUSH
11988: LD_INT 1
11990: PPUSH
11991: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11995: LD_INT 30
11997: PPUSH
11998: LD_VAR 0 3
12002: PPUSH
12003: LD_INT 1
12005: PPUSH
12006: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12010: LD_INT 37
12012: PPUSH
12013: LD_VAR 0 3
12017: PPUSH
12018: LD_INT 1
12020: PPUSH
12021: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12025: LD_INT 5
12027: PPUSH
12028: LD_VAR 0 3
12032: PPUSH
12033: LD_INT 1
12035: PPUSH
12036: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12040: LD_INT 66
12042: PPUSH
12043: LD_VAR 0 3
12047: PPUSH
12048: LD_INT 1
12050: PPUSH
12051: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12055: LD_INT 21
12057: PPUSH
12058: LD_VAR 0 3
12062: PPUSH
12063: LD_INT 1
12065: PPUSH
12066: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12070: LD_INT 22
12072: PPUSH
12073: LD_VAR 0 3
12077: PPUSH
12078: LD_INT 1
12080: PPUSH
12081: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12085: LD_INT 54
12087: PPUSH
12088: LD_VAR 0 3
12092: PPUSH
12093: LD_INT 1
12095: PPUSH
12096: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12100: LD_INT 0
12102: PPUSH
12103: LD_VAR 0 3
12107: PPUSH
12108: LD_INT 1
12110: PPUSH
12111: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12115: LD_INT 1
12117: PPUSH
12118: LD_VAR 0 3
12122: PPUSH
12123: LD_INT 1
12125: PPUSH
12126: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12130: LD_INT 2
12132: PPUSH
12133: LD_VAR 0 3
12137: PPUSH
12138: LD_INT 1
12140: PPUSH
12141: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12145: LD_INT 3
12147: PPUSH
12148: LD_VAR 0 3
12152: PPUSH
12153: LD_INT 1
12155: PPUSH
12156: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12160: LD_INT 4
12162: PPUSH
12163: LD_VAR 0 3
12167: PPUSH
12168: LD_INT 1
12170: PPUSH
12171: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12175: LD_INT 5
12177: PPUSH
12178: LD_VAR 0 3
12182: PPUSH
12183: LD_INT 1
12185: PPUSH
12186: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12190: LD_INT 6
12192: PPUSH
12193: LD_VAR 0 3
12197: PPUSH
12198: LD_INT 1
12200: PPUSH
12201: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12205: LD_INT 7
12207: PPUSH
12208: LD_VAR 0 3
12212: PPUSH
12213: LD_INT 1
12215: PPUSH
12216: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12220: LD_INT 8
12222: PPUSH
12223: LD_VAR 0 3
12227: PPUSH
12228: LD_INT 1
12230: PPUSH
12231: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12235: LD_INT 10
12237: PPUSH
12238: LD_VAR 0 3
12242: PPUSH
12243: LD_INT 1
12245: PPUSH
12246: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12250: LD_INT 11
12252: PPUSH
12253: LD_VAR 0 3
12257: PPUSH
12258: LD_INT 1
12260: PPUSH
12261: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12265: LD_INT 12
12267: PPUSH
12268: LD_VAR 0 3
12272: PPUSH
12273: LD_INT 1
12275: PPUSH
12276: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12280: LD_INT 13
12282: PPUSH
12283: LD_VAR 0 3
12287: PPUSH
12288: LD_INT 1
12290: PPUSH
12291: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12295: LD_INT 14
12297: PPUSH
12298: LD_VAR 0 3
12302: PPUSH
12303: LD_INT 1
12305: PPUSH
12306: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12310: LD_INT 15
12312: PPUSH
12313: LD_VAR 0 3
12317: PPUSH
12318: LD_INT 1
12320: PPUSH
12321: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12325: LD_INT 16
12327: PPUSH
12328: LD_VAR 0 3
12332: PPUSH
12333: LD_INT 1
12335: PPUSH
12336: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12340: LD_INT 17
12342: PPUSH
12343: LD_VAR 0 3
12347: PPUSH
12348: LD_INT 1
12350: PPUSH
12351: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12355: LD_INT 19
12357: PPUSH
12358: LD_VAR 0 3
12362: PPUSH
12363: LD_INT 1
12365: PPUSH
12366: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12370: LD_INT 20
12372: PPUSH
12373: LD_VAR 0 3
12377: PPUSH
12378: LD_INT 1
12380: PPUSH
12381: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12385: LD_INT 21
12387: PPUSH
12388: LD_VAR 0 3
12392: PPUSH
12393: LD_INT 1
12395: PPUSH
12396: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12400: LD_INT 23
12402: PPUSH
12403: LD_VAR 0 3
12407: PPUSH
12408: LD_INT 1
12410: PPUSH
12411: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12415: LD_INT 26
12417: PPUSH
12418: LD_VAR 0 3
12422: PPUSH
12423: LD_INT 1
12425: PPUSH
12426: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12430: LD_INT 27
12432: PPUSH
12433: LD_VAR 0 3
12437: PPUSH
12438: LD_INT 1
12440: PPUSH
12441: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12445: LD_INT 28
12447: PPUSH
12448: LD_VAR 0 3
12452: PPUSH
12453: LD_INT 1
12455: PPUSH
12456: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12460: LD_INT 29
12462: PPUSH
12463: LD_VAR 0 3
12467: PPUSH
12468: LD_INT 1
12470: PPUSH
12471: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12475: LD_INT 30
12477: PPUSH
12478: LD_VAR 0 3
12482: PPUSH
12483: LD_INT 1
12485: PPUSH
12486: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12490: LD_INT 31
12492: PPUSH
12493: LD_VAR 0 3
12497: PPUSH
12498: LD_INT 1
12500: PPUSH
12501: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12505: LD_INT 32
12507: PPUSH
12508: LD_VAR 0 3
12512: PPUSH
12513: LD_INT 1
12515: PPUSH
12516: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12520: LD_INT 36
12522: PPUSH
12523: LD_VAR 0 3
12527: PPUSH
12528: LD_INT 1
12530: PPUSH
12531: CALL_OW 324
// end ; 5 :
12535: GO 14666
12537: LD_INT 5
12539: DOUBLE
12540: EQUAL
12541: IFTRUE 12545
12543: GO 13658
12545: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12546: LD_INT 35
12548: PPUSH
12549: LD_VAR 0 3
12553: PPUSH
12554: LD_INT 1
12556: PPUSH
12557: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12561: LD_INT 45
12563: PPUSH
12564: LD_VAR 0 3
12568: PPUSH
12569: LD_INT 1
12571: PPUSH
12572: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12576: LD_INT 46
12578: PPUSH
12579: LD_VAR 0 3
12583: PPUSH
12584: LD_INT 1
12586: PPUSH
12587: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12591: LD_INT 47
12593: PPUSH
12594: LD_VAR 0 3
12598: PPUSH
12599: LD_INT 1
12601: PPUSH
12602: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12606: LD_INT 1
12608: PPUSH
12609: LD_VAR 0 3
12613: PPUSH
12614: LD_INT 1
12616: PPUSH
12617: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12621: LD_INT 2
12623: PPUSH
12624: LD_VAR 0 3
12628: PPUSH
12629: LD_INT 1
12631: PPUSH
12632: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12636: LD_INT 11
12638: PPUSH
12639: LD_VAR 0 3
12643: PPUSH
12644: LD_INT 1
12646: PPUSH
12647: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12651: LD_INT 20
12653: PPUSH
12654: LD_VAR 0 3
12658: PPUSH
12659: LD_INT 1
12661: PPUSH
12662: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12666: LD_INT 48
12668: PPUSH
12669: LD_VAR 0 3
12673: PPUSH
12674: LD_INT 1
12676: PPUSH
12677: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12681: LD_INT 49
12683: PPUSH
12684: LD_VAR 0 3
12688: PPUSH
12689: LD_INT 1
12691: PPUSH
12692: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12696: LD_INT 69
12698: PPUSH
12699: LD_VAR 0 3
12703: PPUSH
12704: LD_INT 1
12706: PPUSH
12707: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12711: LD_INT 39
12713: PPUSH
12714: LD_VAR 0 3
12718: PPUSH
12719: LD_INT 1
12721: PPUSH
12722: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12726: LD_INT 34
12728: PPUSH
12729: LD_VAR 0 3
12733: PPUSH
12734: LD_INT 1
12736: PPUSH
12737: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12741: LD_INT 42
12743: PPUSH
12744: LD_VAR 0 3
12748: PPUSH
12749: LD_INT 1
12751: PPUSH
12752: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12756: LD_INT 44
12758: PPUSH
12759: LD_VAR 0 3
12763: PPUSH
12764: LD_INT 1
12766: PPUSH
12767: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12771: LD_INT 41
12773: PPUSH
12774: LD_VAR 0 3
12778: PPUSH
12779: LD_INT 1
12781: PPUSH
12782: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12786: LD_INT 40
12788: PPUSH
12789: LD_VAR 0 3
12793: PPUSH
12794: LD_INT 1
12796: PPUSH
12797: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12801: LD_INT 43
12803: PPUSH
12804: LD_VAR 0 3
12808: PPUSH
12809: LD_INT 1
12811: PPUSH
12812: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12816: LD_INT 70
12818: PPUSH
12819: LD_VAR 0 3
12823: PPUSH
12824: LD_INT 1
12826: PPUSH
12827: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12831: LD_INT 51
12833: PPUSH
12834: LD_VAR 0 3
12838: PPUSH
12839: LD_INT 1
12841: PPUSH
12842: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12846: LD_INT 52
12848: PPUSH
12849: LD_VAR 0 3
12853: PPUSH
12854: LD_INT 1
12856: PPUSH
12857: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12861: LD_INT 6
12863: PPUSH
12864: LD_VAR 0 3
12868: PPUSH
12869: LD_INT 1
12871: PPUSH
12872: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12876: LD_INT 15
12878: PPUSH
12879: LD_VAR 0 3
12883: PPUSH
12884: LD_INT 1
12886: PPUSH
12887: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12891: LD_INT 7
12893: PPUSH
12894: LD_VAR 0 3
12898: PPUSH
12899: LD_INT 1
12901: PPUSH
12902: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12906: LD_INT 12
12908: PPUSH
12909: LD_VAR 0 3
12913: PPUSH
12914: LD_INT 1
12916: PPUSH
12917: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12921: LD_INT 17
12923: PPUSH
12924: LD_VAR 0 3
12928: PPUSH
12929: LD_INT 1
12931: PPUSH
12932: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12936: LD_INT 18
12938: PPUSH
12939: LD_VAR 0 3
12943: PPUSH
12944: LD_INT 1
12946: PPUSH
12947: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12951: LD_INT 60
12953: PPUSH
12954: LD_VAR 0 3
12958: PPUSH
12959: LD_INT 1
12961: PPUSH
12962: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12966: LD_INT 32
12968: PPUSH
12969: LD_VAR 0 3
12973: PPUSH
12974: LD_INT 1
12976: PPUSH
12977: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12981: LD_INT 9
12983: PPUSH
12984: LD_VAR 0 3
12988: PPUSH
12989: LD_INT 1
12991: PPUSH
12992: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12996: LD_INT 57
12998: PPUSH
12999: LD_VAR 0 3
13003: PPUSH
13004: LD_INT 1
13006: PPUSH
13007: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13011: LD_INT 30
13013: PPUSH
13014: LD_VAR 0 3
13018: PPUSH
13019: LD_INT 1
13021: PPUSH
13022: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13026: LD_INT 37
13028: PPUSH
13029: LD_VAR 0 3
13033: PPUSH
13034: LD_INT 1
13036: PPUSH
13037: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13041: LD_INT 63
13043: PPUSH
13044: LD_VAR 0 3
13048: PPUSH
13049: LD_INT 1
13051: PPUSH
13052: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13056: LD_INT 3
13058: PPUSH
13059: LD_VAR 0 3
13063: PPUSH
13064: LD_INT 1
13066: PPUSH
13067: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13071: LD_INT 4
13073: PPUSH
13074: LD_VAR 0 3
13078: PPUSH
13079: LD_INT 1
13081: PPUSH
13082: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13086: LD_INT 5
13088: PPUSH
13089: LD_VAR 0 3
13093: PPUSH
13094: LD_INT 1
13096: PPUSH
13097: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13101: LD_INT 66
13103: PPUSH
13104: LD_VAR 0 3
13108: PPUSH
13109: LD_INT 1
13111: PPUSH
13112: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13116: LD_INT 21
13118: PPUSH
13119: LD_VAR 0 3
13123: PPUSH
13124: LD_INT 1
13126: PPUSH
13127: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13131: LD_INT 22
13133: PPUSH
13134: LD_VAR 0 3
13138: PPUSH
13139: LD_INT 1
13141: PPUSH
13142: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13146: LD_INT 19
13148: PPUSH
13149: LD_VAR 0 3
13153: PPUSH
13154: LD_INT 1
13156: PPUSH
13157: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13161: LD_INT 54
13163: PPUSH
13164: LD_VAR 0 3
13168: PPUSH
13169: LD_INT 1
13171: PPUSH
13172: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13176: LD_INT 55
13178: PPUSH
13179: LD_VAR 0 3
13183: PPUSH
13184: LD_INT 1
13186: PPUSH
13187: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13191: LD_INT 0
13193: PPUSH
13194: LD_VAR 0 3
13198: PPUSH
13199: LD_INT 1
13201: PPUSH
13202: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
13206: LD_INT 1
13208: PPUSH
13209: LD_VAR 0 3
13213: PPUSH
13214: LD_INT 1
13216: PPUSH
13217: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13221: LD_INT 2
13223: PPUSH
13224: LD_VAR 0 3
13228: PPUSH
13229: LD_INT 1
13231: PPUSH
13232: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
13236: LD_INT 3
13238: PPUSH
13239: LD_VAR 0 3
13243: PPUSH
13244: LD_INT 1
13246: PPUSH
13247: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13251: LD_INT 4
13253: PPUSH
13254: LD_VAR 0 3
13258: PPUSH
13259: LD_INT 1
13261: PPUSH
13262: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
13266: LD_INT 5
13268: PPUSH
13269: LD_VAR 0 3
13273: PPUSH
13274: LD_INT 1
13276: PPUSH
13277: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13281: LD_INT 6
13283: PPUSH
13284: LD_VAR 0 3
13288: PPUSH
13289: LD_INT 1
13291: PPUSH
13292: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13296: LD_INT 7
13298: PPUSH
13299: LD_VAR 0 3
13303: PPUSH
13304: LD_INT 1
13306: PPUSH
13307: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13311: LD_INT 8
13313: PPUSH
13314: LD_VAR 0 3
13318: PPUSH
13319: LD_INT 1
13321: PPUSH
13322: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13326: LD_INT 10
13328: PPUSH
13329: LD_VAR 0 3
13333: PPUSH
13334: LD_INT 1
13336: PPUSH
13337: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
13341: LD_INT 11
13343: PPUSH
13344: LD_VAR 0 3
13348: PPUSH
13349: LD_INT 1
13351: PPUSH
13352: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
13356: LD_INT 12
13358: PPUSH
13359: LD_VAR 0 3
13363: PPUSH
13364: LD_INT 1
13366: PPUSH
13367: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
13371: LD_INT 13
13373: PPUSH
13374: LD_VAR 0 3
13378: PPUSH
13379: LD_INT 1
13381: PPUSH
13382: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
13386: LD_INT 14
13388: PPUSH
13389: LD_VAR 0 3
13393: PPUSH
13394: LD_INT 1
13396: PPUSH
13397: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13401: LD_INT 15
13403: PPUSH
13404: LD_VAR 0 3
13408: PPUSH
13409: LD_INT 1
13411: PPUSH
13412: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13416: LD_INT 16
13418: PPUSH
13419: LD_VAR 0 3
13423: PPUSH
13424: LD_INT 1
13426: PPUSH
13427: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13431: LD_INT 17
13433: PPUSH
13434: LD_VAR 0 3
13438: PPUSH
13439: LD_INT 1
13441: PPUSH
13442: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
13446: LD_INT 18
13448: PPUSH
13449: LD_VAR 0 3
13453: PPUSH
13454: LD_INT 1
13456: PPUSH
13457: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
13461: LD_INT 19
13463: PPUSH
13464: LD_VAR 0 3
13468: PPUSH
13469: LD_INT 1
13471: PPUSH
13472: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13476: LD_INT 20
13478: PPUSH
13479: LD_VAR 0 3
13483: PPUSH
13484: LD_INT 1
13486: PPUSH
13487: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
13491: LD_INT 21
13493: PPUSH
13494: LD_VAR 0 3
13498: PPUSH
13499: LD_INT 1
13501: PPUSH
13502: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
13506: LD_INT 23
13508: PPUSH
13509: LD_VAR 0 3
13513: PPUSH
13514: LD_INT 1
13516: PPUSH
13517: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13521: LD_INT 26
13523: PPUSH
13524: LD_VAR 0 3
13528: PPUSH
13529: LD_INT 1
13531: PPUSH
13532: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13536: LD_INT 27
13538: PPUSH
13539: LD_VAR 0 3
13543: PPUSH
13544: LD_INT 1
13546: PPUSH
13547: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
13551: LD_INT 28
13553: PPUSH
13554: LD_VAR 0 3
13558: PPUSH
13559: LD_INT 1
13561: PPUSH
13562: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13566: LD_INT 29
13568: PPUSH
13569: LD_VAR 0 3
13573: PPUSH
13574: LD_INT 1
13576: PPUSH
13577: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
13581: LD_INT 30
13583: PPUSH
13584: LD_VAR 0 3
13588: PPUSH
13589: LD_INT 1
13591: PPUSH
13592: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13596: LD_INT 31
13598: PPUSH
13599: LD_VAR 0 3
13603: PPUSH
13604: LD_INT 1
13606: PPUSH
13607: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13611: LD_INT 32
13613: PPUSH
13614: LD_VAR 0 3
13618: PPUSH
13619: LD_INT 1
13621: PPUSH
13622: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
13626: LD_INT 33
13628: PPUSH
13629: LD_VAR 0 3
13633: PPUSH
13634: LD_INT 1
13636: PPUSH
13637: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
13641: LD_INT 36
13643: PPUSH
13644: LD_VAR 0 3
13648: PPUSH
13649: LD_INT 1
13651: PPUSH
13652: CALL_OW 324
// end ; 6 :
13656: GO 14666
13658: LD_INT 6
13660: DOUBLE
13661: EQUAL
13662: IFTRUE 13666
13664: GO 14591
13666: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13667: LD_INT 35
13669: PPUSH
13670: LD_VAR 0 3
13674: PPUSH
13675: LD_INT 1
13677: PPUSH
13678: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13682: LD_INT 45
13684: PPUSH
13685: LD_VAR 0 3
13689: PPUSH
13690: LD_INT 1
13692: PPUSH
13693: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13697: LD_INT 46
13699: PPUSH
13700: LD_VAR 0 3
13704: PPUSH
13705: LD_INT 1
13707: PPUSH
13708: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13712: LD_INT 47
13714: PPUSH
13715: LD_VAR 0 3
13719: PPUSH
13720: LD_INT 1
13722: PPUSH
13723: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13727: LD_INT 1
13729: PPUSH
13730: LD_VAR 0 3
13734: PPUSH
13735: LD_INT 1
13737: PPUSH
13738: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13742: LD_INT 2
13744: PPUSH
13745: LD_VAR 0 3
13749: PPUSH
13750: LD_INT 1
13752: PPUSH
13753: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13757: LD_INT 11
13759: PPUSH
13760: LD_VAR 0 3
13764: PPUSH
13765: LD_INT 1
13767: PPUSH
13768: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13772: LD_INT 20
13774: PPUSH
13775: LD_VAR 0 3
13779: PPUSH
13780: LD_INT 1
13782: PPUSH
13783: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13787: LD_INT 48
13789: PPUSH
13790: LD_VAR 0 3
13794: PPUSH
13795: LD_INT 1
13797: PPUSH
13798: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13802: LD_INT 49
13804: PPUSH
13805: LD_VAR 0 3
13809: PPUSH
13810: LD_INT 1
13812: PPUSH
13813: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
13817: LD_INT 50
13819: PPUSH
13820: LD_VAR 0 3
13824: PPUSH
13825: LD_INT 1
13827: PPUSH
13828: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13832: LD_INT 69
13834: PPUSH
13835: LD_VAR 0 3
13839: PPUSH
13840: LD_INT 1
13842: PPUSH
13843: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13847: LD_INT 39
13849: PPUSH
13850: LD_VAR 0 3
13854: PPUSH
13855: LD_INT 1
13857: PPUSH
13858: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13862: LD_INT 34
13864: PPUSH
13865: LD_VAR 0 3
13869: PPUSH
13870: LD_INT 1
13872: PPUSH
13873: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13877: LD_INT 42
13879: PPUSH
13880: LD_VAR 0 3
13884: PPUSH
13885: LD_INT 1
13887: PPUSH
13888: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13892: LD_INT 44
13894: PPUSH
13895: LD_VAR 0 3
13899: PPUSH
13900: LD_INT 1
13902: PPUSH
13903: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13907: LD_INT 41
13909: PPUSH
13910: LD_VAR 0 3
13914: PPUSH
13915: LD_INT 1
13917: PPUSH
13918: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
13922: LD_INT 13
13924: PPUSH
13925: LD_VAR 0 3
13929: PPUSH
13930: LD_INT 1
13932: PPUSH
13933: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
13937: LD_INT 40
13939: PPUSH
13940: LD_VAR 0 3
13944: PPUSH
13945: LD_INT 1
13947: PPUSH
13948: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13952: LD_INT 43
13954: PPUSH
13955: LD_VAR 0 3
13959: PPUSH
13960: LD_INT 1
13962: PPUSH
13963: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13967: LD_INT 70
13969: PPUSH
13970: LD_VAR 0 3
13974: PPUSH
13975: LD_INT 1
13977: PPUSH
13978: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
13982: LD_INT 23
13984: PPUSH
13985: LD_VAR 0 3
13989: PPUSH
13990: LD_INT 1
13992: PPUSH
13993: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13997: LD_INT 51
13999: PPUSH
14000: LD_VAR 0 3
14004: PPUSH
14005: LD_INT 1
14007: PPUSH
14008: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
14012: LD_INT 52
14014: PPUSH
14015: LD_VAR 0 3
14019: PPUSH
14020: LD_INT 1
14022: PPUSH
14023: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14027: LD_INT 6
14029: PPUSH
14030: LD_VAR 0 3
14034: PPUSH
14035: LD_INT 1
14037: PPUSH
14038: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
14042: LD_INT 15
14044: PPUSH
14045: LD_VAR 0 3
14049: PPUSH
14050: LD_INT 1
14052: PPUSH
14053: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
14057: LD_INT 7
14059: PPUSH
14060: LD_VAR 0 3
14064: PPUSH
14065: LD_INT 1
14067: PPUSH
14068: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
14072: LD_INT 12
14074: PPUSH
14075: LD_VAR 0 3
14079: PPUSH
14080: LD_INT 1
14082: PPUSH
14083: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
14087: LD_INT 10
14089: PPUSH
14090: LD_VAR 0 3
14094: PPUSH
14095: LD_INT 1
14097: PPUSH
14098: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
14102: LD_INT 17
14104: PPUSH
14105: LD_VAR 0 3
14109: PPUSH
14110: LD_INT 1
14112: PPUSH
14113: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
14117: LD_INT 18
14119: PPUSH
14120: LD_VAR 0 3
14124: PPUSH
14125: LD_INT 1
14127: PPUSH
14128: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
14132: LD_INT 60
14134: PPUSH
14135: LD_VAR 0 3
14139: PPUSH
14140: LD_INT 1
14142: PPUSH
14143: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
14147: LD_INT 61
14149: PPUSH
14150: LD_VAR 0 3
14154: PPUSH
14155: LD_INT 1
14157: PPUSH
14158: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
14162: LD_INT 32
14164: PPUSH
14165: LD_VAR 0 3
14169: PPUSH
14170: LD_INT 1
14172: PPUSH
14173: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
14177: LD_INT 27
14179: PPUSH
14180: LD_VAR 0 3
14184: PPUSH
14185: LD_INT 1
14187: PPUSH
14188: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
14192: LD_INT 36
14194: PPUSH
14195: LD_VAR 0 3
14199: PPUSH
14200: LD_INT 1
14202: PPUSH
14203: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
14207: LD_INT 33
14209: PPUSH
14210: LD_VAR 0 3
14214: PPUSH
14215: LD_INT 1
14217: PPUSH
14218: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
14222: LD_INT 9
14224: PPUSH
14225: LD_VAR 0 3
14229: PPUSH
14230: LD_INT 1
14232: PPUSH
14233: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
14237: LD_INT 38
14239: PPUSH
14240: LD_VAR 0 3
14244: PPUSH
14245: LD_INT 1
14247: PPUSH
14248: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
14252: LD_INT 57
14254: PPUSH
14255: LD_VAR 0 3
14259: PPUSH
14260: LD_INT 1
14262: PPUSH
14263: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
14267: LD_INT 58
14269: PPUSH
14270: LD_VAR 0 3
14274: PPUSH
14275: LD_INT 1
14277: PPUSH
14278: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
14282: LD_INT 28
14284: PPUSH
14285: LD_VAR 0 3
14289: PPUSH
14290: LD_INT 1
14292: PPUSH
14293: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
14297: LD_INT 29
14299: PPUSH
14300: LD_VAR 0 3
14304: PPUSH
14305: LD_INT 1
14307: PPUSH
14308: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
14312: LD_INT 30
14314: PPUSH
14315: LD_VAR 0 3
14319: PPUSH
14320: LD_INT 1
14322: PPUSH
14323: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
14327: LD_INT 37
14329: PPUSH
14330: LD_VAR 0 3
14334: PPUSH
14335: LD_INT 1
14337: PPUSH
14338: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
14342: LD_INT 63
14344: PPUSH
14345: LD_VAR 0 3
14349: PPUSH
14350: LD_INT 1
14352: PPUSH
14353: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
14357: LD_INT 64
14359: PPUSH
14360: LD_VAR 0 3
14364: PPUSH
14365: LD_INT 1
14367: PPUSH
14368: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
14372: LD_INT 3
14374: PPUSH
14375: LD_VAR 0 3
14379: PPUSH
14380: LD_INT 1
14382: PPUSH
14383: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
14387: LD_INT 4
14389: PPUSH
14390: LD_VAR 0 3
14394: PPUSH
14395: LD_INT 1
14397: PPUSH
14398: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14402: LD_INT 5
14404: PPUSH
14405: LD_VAR 0 3
14409: PPUSH
14410: LD_INT 1
14412: PPUSH
14413: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
14417: LD_INT 8
14419: PPUSH
14420: LD_VAR 0 3
14424: PPUSH
14425: LD_INT 1
14427: PPUSH
14428: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14432: LD_INT 66
14434: PPUSH
14435: LD_VAR 0 3
14439: PPUSH
14440: LD_INT 1
14442: PPUSH
14443: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
14447: LD_INT 67
14449: PPUSH
14450: LD_VAR 0 3
14454: PPUSH
14455: LD_INT 1
14457: PPUSH
14458: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14462: LD_INT 21
14464: PPUSH
14465: LD_VAR 0 3
14469: PPUSH
14470: LD_INT 1
14472: PPUSH
14473: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14477: LD_INT 22
14479: PPUSH
14480: LD_VAR 0 3
14484: PPUSH
14485: LD_INT 1
14487: PPUSH
14488: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
14492: LD_INT 19
14494: PPUSH
14495: LD_VAR 0 3
14499: PPUSH
14500: LD_INT 1
14502: PPUSH
14503: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
14507: LD_INT 26
14509: PPUSH
14510: LD_VAR 0 3
14514: PPUSH
14515: LD_INT 1
14517: PPUSH
14518: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
14522: LD_INT 54
14524: PPUSH
14525: LD_VAR 0 3
14529: PPUSH
14530: LD_INT 1
14532: PPUSH
14533: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
14537: LD_INT 55
14539: PPUSH
14540: LD_VAR 0 3
14544: PPUSH
14545: LD_INT 1
14547: PPUSH
14548: CALL_OW 322
// for i = 0 to 39 do
14552: LD_ADDR_VAR 0 4
14556: PUSH
14557: DOUBLE
14558: LD_INT 0
14560: DEC
14561: ST_TO_ADDR
14562: LD_INT 39
14564: PUSH
14565: FOR_TO
14566: IFFALSE 14587
// SetRestrict ( i , side , true ) ;
14568: LD_VAR 0 4
14572: PPUSH
14573: LD_VAR 0 3
14577: PPUSH
14578: LD_INT 1
14580: PPUSH
14581: CALL_OW 324
14585: GO 14565
14587: POP
14588: POP
// end ; else
14589: GO 14666
14591: POP
// begin for i = 1 to 73 do
14592: LD_ADDR_VAR 0 4
14596: PUSH
14597: DOUBLE
14598: LD_INT 1
14600: DEC
14601: ST_TO_ADDR
14602: LD_INT 73
14604: PUSH
14605: FOR_TO
14606: IFFALSE 14627
// SetTech ( i , side , state_enabled ) ;
14608: LD_VAR 0 4
14612: PPUSH
14613: LD_VAR 0 3
14617: PPUSH
14618: LD_INT 1
14620: PPUSH
14621: CALL_OW 322
14625: GO 14605
14627: POP
14628: POP
// for i = 0 to 39 do
14629: LD_ADDR_VAR 0 4
14633: PUSH
14634: DOUBLE
14635: LD_INT 0
14637: DEC
14638: ST_TO_ADDR
14639: LD_INT 39
14641: PUSH
14642: FOR_TO
14643: IFFALSE 14664
// SetRestrict ( i , side , true ) ;
14645: LD_VAR 0 4
14649: PPUSH
14650: LD_VAR 0 3
14654: PPUSH
14655: LD_INT 1
14657: PPUSH
14658: CALL_OW 324
14662: GO 14642
14664: POP
14665: POP
// end ; end ; end ;
14666: GO 10671
14668: POP
14669: POP
// end ; end_of_file
14670: LD_VAR 0 2
14674: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
14675: LD_INT 0
14677: PPUSH
14678: PPUSH
14679: PPUSH
14680: PPUSH
14681: PPUSH
14682: PPUSH
14683: PPUSH
14684: PPUSH
14685: PPUSH
// for i := 1 to 8 do
14686: LD_ADDR_VAR 0 2
14690: PUSH
14691: DOUBLE
14692: LD_INT 1
14694: DEC
14695: ST_TO_ADDR
14696: LD_INT 8
14698: PUSH
14699: FOR_TO
14700: IFFALSE 15084
// begin if Side_Positions [ i ] then
14702: LD_EXP 36
14706: PUSH
14707: LD_VAR 0 2
14711: ARRAY
14712: IFFALSE 15082
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
14714: LD_ADDR_VAR 0 7
14718: PUSH
14719: LD_INT 22
14721: PUSH
14722: LD_VAR 0 2
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: PUSH
14731: LD_INT 21
14733: PUSH
14734: LD_INT 1
14736: PUSH
14737: EMPTY
14738: LIST
14739: LIST
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: PPUSH
14745: CALL_OW 69
14749: PUSH
14750: LD_INT 0
14752: PLUS
14753: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14754: LD_ADDR_VAR 0 9
14758: PUSH
14759: LD_INT 22
14761: PUSH
14762: LD_VAR 0 2
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: PUSH
14771: LD_INT 2
14773: PUSH
14774: LD_INT 30
14776: PUSH
14777: LD_INT 0
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: PUSH
14784: LD_INT 30
14786: PUSH
14787: LD_INT 1
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: LIST
14798: PUSH
14799: EMPTY
14800: LIST
14801: LIST
14802: PPUSH
14803: CALL_OW 69
14807: ST_TO_ADDR
// crates := 0 ;
14808: LD_ADDR_VAR 0 4
14812: PUSH
14813: LD_INT 0
14815: ST_TO_ADDR
// oil := 0 ;
14816: LD_ADDR_VAR 0 5
14820: PUSH
14821: LD_INT 0
14823: ST_TO_ADDR
// sib := 0 ;
14824: LD_ADDR_VAR 0 6
14828: PUSH
14829: LD_INT 0
14831: ST_TO_ADDR
// if bases then
14832: LD_VAR 0 9
14836: IFFALSE 14942
// begin for j in bases do
14838: LD_ADDR_VAR 0 3
14842: PUSH
14843: LD_VAR 0 9
14847: PUSH
14848: FOR_IN
14849: IFFALSE 14940
// begin base := GetBase ( j ) ;
14851: LD_ADDR_VAR 0 8
14855: PUSH
14856: LD_VAR 0 3
14860: PPUSH
14861: CALL_OW 274
14865: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
14866: LD_ADDR_VAR 0 4
14870: PUSH
14871: LD_VAR 0 4
14875: PUSH
14876: LD_VAR 0 8
14880: PPUSH
14881: LD_INT 1
14883: PPUSH
14884: CALL_OW 275
14888: PLUS
14889: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
14890: LD_ADDR_VAR 0 5
14894: PUSH
14895: LD_VAR 0 5
14899: PUSH
14900: LD_VAR 0 8
14904: PPUSH
14905: LD_INT 2
14907: PPUSH
14908: CALL_OW 275
14912: PLUS
14913: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
14914: LD_ADDR_VAR 0 6
14918: PUSH
14919: LD_VAR 0 6
14923: PUSH
14924: LD_VAR 0 8
14928: PPUSH
14929: LD_INT 3
14931: PPUSH
14932: CALL_OW 275
14936: PLUS
14937: ST_TO_ADDR
// end ;
14938: GO 14848
14940: POP
14941: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
14942: LD_STRING setSpecText(
14944: PUSH
14945: LD_VAR 0 2
14949: STR
14950: PUSH
14951: LD_STRING ,
14953: STR
14954: PUSH
14955: LD_INT 2
14957: STR
14958: PUSH
14959: LD_STRING ,
14961: STR
14962: PUSH
14963: LD_VAR 0 4
14967: STR
14968: PUSH
14969: LD_STRING )
14971: STR
14972: PPUSH
14973: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
14977: LD_STRING setSpecText(
14979: PUSH
14980: LD_VAR 0 2
14984: STR
14985: PUSH
14986: LD_STRING ,
14988: STR
14989: PUSH
14990: LD_INT 3
14992: STR
14993: PUSH
14994: LD_STRING ,
14996: STR
14997: PUSH
14998: LD_VAR 0 5
15002: STR
15003: PUSH
15004: LD_STRING )
15006: STR
15007: PPUSH
15008: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
15012: LD_STRING setSpecText(
15014: PUSH
15015: LD_VAR 0 2
15019: STR
15020: PUSH
15021: LD_STRING ,
15023: STR
15024: PUSH
15025: LD_INT 4
15027: STR
15028: PUSH
15029: LD_STRING ,
15031: STR
15032: PUSH
15033: LD_VAR 0 6
15037: STR
15038: PUSH
15039: LD_STRING )
15041: STR
15042: PPUSH
15043: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
15047: LD_STRING setSpecText(
15049: PUSH
15050: LD_VAR 0 2
15054: STR
15055: PUSH
15056: LD_STRING ,
15058: STR
15059: PUSH
15060: LD_INT 5
15062: STR
15063: PUSH
15064: LD_STRING ,
15066: STR
15067: PUSH
15068: LD_VAR 0 7
15072: STR
15073: PUSH
15074: LD_STRING )
15076: STR
15077: PPUSH
15078: CALL_OW 559
// end ; end ;
15082: GO 14699
15084: POP
15085: POP
// end ;
15086: LD_VAR 0 1
15090: RET
// every 0 0$1 do
15091: GO 15093
15093: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
15094: LD_STRING setSpecLogoNumber(
15096: PUSH
15097: LD_INT 2
15099: STR
15100: PUSH
15101: LD_STRING ,
15103: STR
15104: PUSH
15105: LD_INT 1
15107: STR
15108: PUSH
15109: LD_STRING )
15111: STR
15112: PPUSH
15113: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
15117: LD_STRING setSpecLogoNumber(
15119: PUSH
15120: LD_INT 3
15122: STR
15123: PUSH
15124: LD_STRING ,
15126: STR
15127: PUSH
15128: LD_INT 2
15130: STR
15131: PUSH
15132: LD_STRING )
15134: STR
15135: PPUSH
15136: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
15140: LD_STRING setSpecLogoNumber(
15142: PUSH
15143: LD_INT 4
15145: STR
15146: PUSH
15147: LD_STRING ,
15149: STR
15150: PUSH
15151: LD_INT 3
15153: STR
15154: PUSH
15155: LD_STRING )
15157: STR
15158: PPUSH
15159: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
15163: LD_STRING setSpecLogoNumber(
15165: PUSH
15166: LD_INT 5
15168: STR
15169: PUSH
15170: LD_STRING ,
15172: STR
15173: PUSH
15174: LD_INT 4
15176: STR
15177: PUSH
15178: LD_STRING )
15180: STR
15181: PPUSH
15182: CALL_OW 559
// end ;
15186: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
15187: LD_INT 2
15189: PUSH
15190: LD_INT 30
15192: PUSH
15193: LD_INT 0
15195: PUSH
15196: EMPTY
15197: LIST
15198: LIST
15199: PUSH
15200: LD_INT 30
15202: PUSH
15203: LD_INT 1
15205: PUSH
15206: EMPTY
15207: LIST
15208: LIST
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: LIST
15214: PPUSH
15215: CALL_OW 69
15219: IFFALSE 15229
15221: GO 15223
15223: DISABLE
// begin enable ;
15224: ENABLE
// UpdateSpectatorBar ;
15225: CALL 14675 0 0
// end ; end_of_file
15229: END
// var respawn , inqueue ; export function init_respawning ; begin
15230: LD_INT 0
15232: PPUSH
// respawn := Rand ( 1 , 8 ) ;
15233: LD_ADDR_LOC 18
15237: PUSH
15238: LD_INT 1
15240: PPUSH
15241: LD_INT 8
15243: PPUSH
15244: CALL_OW 12
15248: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
15249: LD_ADDR_LOC 19
15253: PUSH
15254: LD_INT 0
15256: PUSH
15257: LD_INT 0
15259: PUSH
15260: LD_INT 0
15262: PUSH
15263: LD_INT 0
15265: PUSH
15266: LD_INT 0
15268: PUSH
15269: LD_INT 0
15271: PUSH
15272: LD_INT 0
15274: PUSH
15275: LD_INT 0
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: ST_TO_ADDR
// end ;
15288: LD_VAR 0 1
15292: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
15293: GO 15295
15295: DISABLE
15296: LD_INT 0
15298: PPUSH
15299: PPUSH
15300: PPUSH
// begin if respawning_time_max = 0 then
15301: LD_EXP 32
15305: PUSH
15306: LD_INT 0
15308: EQUAL
15309: IFFALSE 15313
// exit ;
15311: GO 15721
// if respawn = 8 then
15313: LD_LOC 18
15317: PUSH
15318: LD_INT 8
15320: EQUAL
15321: IFFALSE 15333
// respawn := 1 else
15323: LD_ADDR_LOC 18
15327: PUSH
15328: LD_INT 1
15330: ST_TO_ADDR
15331: GO 15347
// respawn := respawn + 1 ;
15333: LD_ADDR_LOC 18
15337: PUSH
15338: LD_LOC 18
15342: PUSH
15343: LD_INT 1
15345: PLUS
15346: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
15347: LD_EXP 36
15351: PUSH
15352: LD_LOC 18
15356: ARRAY
15357: PUSH
15358: LD_LOC 19
15362: PUSH
15363: LD_LOC 18
15367: ARRAY
15368: NOT
15369: AND
15370: IFFALSE 15720
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
15372: LD_ADDR_VAR 0 1
15376: PUSH
15377: LD_INT 21
15379: PUSH
15380: LD_INT 1
15382: PUSH
15383: EMPTY
15384: LIST
15385: LIST
15386: PUSH
15387: LD_INT 22
15389: PUSH
15390: LD_LOC 18
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PUSH
15399: LD_INT 3
15401: PUSH
15402: LD_INT 23
15404: PUSH
15405: LD_INT 0
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: PPUSH
15418: CALL_OW 69
15422: ST_TO_ADDR
// if n < number_of_people then
15423: LD_VAR 0 1
15427: PUSH
15428: LD_EXP 23
15432: LESS
15433: IFFALSE 15717
// begin aktresp := respawn ;
15435: LD_ADDR_VAR 0 3
15439: PUSH
15440: LD_LOC 18
15444: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
15445: LD_ADDR_LOC 19
15449: PUSH
15450: LD_LOC 19
15454: PPUSH
15455: LD_VAR 0 3
15459: PPUSH
15460: LD_INT 1
15462: PPUSH
15463: CALL_OW 1
15467: ST_TO_ADDR
// enable ;
15468: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
15469: LD_EXP 31
15473: PPUSH
15474: LD_EXP 32
15478: PPUSH
15479: CALL_OW 12
15483: PPUSH
15484: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
15488: LD_ADDR_LOC 19
15492: PUSH
15493: LD_LOC 19
15497: PPUSH
15498: LD_VAR 0 3
15502: PPUSH
15503: LD_INT 0
15505: PPUSH
15506: CALL_OW 1
15510: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
15511: LD_ADDR_VAR 0 2
15515: PUSH
15516: LD_INT 21
15518: PUSH
15519: LD_INT 3
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PUSH
15526: LD_INT 2
15528: PUSH
15529: LD_INT 30
15531: PUSH
15532: LD_INT 0
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: PUSH
15539: LD_INT 30
15541: PUSH
15542: LD_INT 1
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: LIST
15553: PUSH
15554: LD_INT 50
15556: PUSH
15557: EMPTY
15558: LIST
15559: PUSH
15560: LD_INT 22
15562: PUSH
15563: LD_VAR 0 3
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: PPUSH
15578: CALL_OW 69
15582: ST_TO_ADDR
// if dep = 0 then
15583: LD_VAR 0 2
15587: PUSH
15588: LD_INT 0
15590: EQUAL
15591: IFFALSE 15595
// exit ;
15593: GO 15721
// hc_name :=  ;
15595: LD_ADDR_OWVAR 26
15599: PUSH
15600: LD_STRING 
15602: ST_TO_ADDR
// hc_importance := 0 ;
15603: LD_ADDR_OWVAR 32
15607: PUSH
15608: LD_INT 0
15610: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
15611: LD_INT 0
15613: PPUSH
15614: LD_INT 0
15616: PPUSH
15617: LD_EXP 24
15621: PUSH
15622: LD_INT 2
15624: DIV
15625: PPUSH
15626: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
15630: LD_ADDR_OWVAR 21
15634: PUSH
15635: LD_EXP 37
15639: PUSH
15640: LD_VAR 0 3
15644: ARRAY
15645: ST_TO_ADDR
// uc_side := aktresp ;
15646: LD_ADDR_OWVAR 20
15650: PUSH
15651: LD_VAR 0 3
15655: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
15656: LD_ADDR_VAR 0 2
15660: PUSH
15661: LD_VAR 0 2
15665: PUSH
15666: LD_INT 1
15668: PPUSH
15669: LD_VAR 0 2
15673: PPUSH
15674: CALL_OW 12
15678: ARRAY
15679: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
15680: CALL_OW 44
15684: PPUSH
15685: LD_VAR 0 2
15689: PPUSH
15690: CALL_OW 250
15694: PPUSH
15695: LD_VAR 0 2
15699: PPUSH
15700: CALL_OW 251
15704: PPUSH
15705: LD_INT 7
15707: PPUSH
15708: LD_INT 1
15710: PPUSH
15711: CALL_OW 50
// end else
15715: GO 15718
// enable ;
15717: ENABLE
// end else
15718: GO 15721
// enable ;
15720: ENABLE
// end ;
15721: PPOPN 3
15723: END
