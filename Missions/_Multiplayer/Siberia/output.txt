// export def_amount_of_siberit , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game ; export Position_Sides ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id , sheik , mastodont ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function read_multiplayer_and_game_parameters ; var i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// if Multiplayer then
   4: LD_OWVAR 4
   8: IFFALSE 72
// begin Game_Type := mp_game_type ;
  10: LD_ADDR_EXP 33
  14: PUSH
  15: LD_OWVAR 6
  19: ST_TO_ADDR
// Your_Side := mp_player_side ;
  20: LD_ADDR_OWVAR 2
  24: PUSH
  25: LD_OWVAR 7
  29: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  30: LD_ADDR_EXP 18
  34: PUSH
  35: LD_OWVAR 17
  39: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  40: LD_ADDR_EXP 16
  44: PUSH
  45: LD_OWVAR 15
  49: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
  50: LD_ADDR_EXP 19
  54: PUSH
  55: LD_OWVAR 16
  59: ST_TO_ADDR
// Teams := mp_teams ;
  60: LD_ADDR_EXP 17
  64: PUSH
  65: LD_OWVAR 12
  69: ST_TO_ADDR
// end else
  70: GO 254
// begin Game_Type := 1 ;
  72: LD_ADDR_EXP 33
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// Your_Side := 3 ;
  80: LD_ADDR_OWVAR 2
  84: PUSH
  85: LD_INT 3
  87: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
  88: LD_ADDR_EXP 18
  92: PUSH
  93: LD_INT 1
  95: PUSH
  96: LD_INT 2
  98: PUSH
  99: LD_INT 3
 101: PUSH
 102: LD_INT 4
 104: PUSH
 105: LD_INT 5
 107: PUSH
 108: LD_INT 6
 110: PUSH
 111: LD_INT 0
 113: PUSH
 114: LD_INT 0
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: LIST
 126: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 127: LD_ADDR_EXP 16
 131: PUSH
 132: LD_INT 1
 134: PUSH
 135: LD_INT 2
 137: PUSH
 138: LD_INT 3
 140: PUSH
 141: LD_INT 4
 143: PUSH
 144: LD_INT 5
 146: PUSH
 147: LD_INT 6
 149: PUSH
 150: LD_INT 0
 152: PUSH
 153: LD_INT 0
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: LIST
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 166: LD_ADDR_EXP 19
 170: PUSH
 171: LD_INT 1
 173: PUSH
 174: LD_INT 2
 176: PUSH
 177: LD_INT 3
 179: PUSH
 180: LD_INT 1
 182: PUSH
 183: LD_INT 2
 185: PUSH
 186: LD_INT 3
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 0
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 205: LD_ADDR_EXP 17
 209: PUSH
 210: LD_INT 1
 212: PUSH
 213: EMPTY
 214: LIST
 215: PUSH
 216: LD_INT 2
 218: PUSH
 219: EMPTY
 220: LIST
 221: PUSH
 222: LD_INT 3
 224: PUSH
 225: EMPTY
 226: LIST
 227: PUSH
 228: LD_INT 4
 230: PUSH
 231: EMPTY
 232: LIST
 233: PUSH
 234: LD_INT 5
 236: PUSH
 237: EMPTY
 238: LIST
 239: PUSH
 240: LD_INT 6
 242: PUSH
 243: EMPTY
 244: LIST
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: LIST
 252: LIST
 253: ST_TO_ADDR
// end ; for i := 1 to 8 do
 254: LD_ADDR_VAR 0 2
 258: PUSH
 259: DOUBLE
 260: LD_INT 1
 262: DEC
 263: ST_TO_ADDR
 264: LD_INT 8
 266: PUSH
 267: FOR_TO
 268: IFFALSE 355
// if Multiplayer_GetPlayerIsSpec ( i ) then
 270: LD_VAR 0 2
 274: PPUSH
 275: CALL_OW 530
 279: IFFALSE 353
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 281: LD_ADDR_EXP 18
 285: PUSH
 286: LD_EXP 18
 290: PPUSH
 291: LD_VAR 0 2
 295: PPUSH
 296: LD_INT 0
 298: PPUSH
 299: CALL_OW 1
 303: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 304: LD_ADDR_EXP 17
 308: PUSH
 309: LD_EXP 17
 313: PPUSH
 314: LD_EXP 16
 318: PUSH
 319: LD_VAR 0 2
 323: ARRAY
 324: PPUSH
 325: LD_EXP 17
 329: PUSH
 330: LD_EXP 16
 334: PUSH
 335: LD_VAR 0 2
 339: ARRAY
 340: ARRAY
 341: PUSH
 342: LD_VAR 0 2
 346: DIFF
 347: PPUSH
 348: CALL_OW 1
 352: ST_TO_ADDR
// end ;
 353: GO 267
 355: POP
 356: POP
// Position_Sides := [ 0 , 0 , 0 , 0 , 0 , 0 ] ;
 357: LD_ADDR_EXP 21
 361: PUSH
 362: LD_INT 0
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 0
 370: PUSH
 371: LD_INT 0
 373: PUSH
 374: LD_INT 0
 376: PUSH
 377: LD_INT 0
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: LIST
 387: ST_TO_ADDR
// for i := 1 to 8 do
 388: LD_ADDR_VAR 0 2
 392: PUSH
 393: DOUBLE
 394: LD_INT 1
 396: DEC
 397: ST_TO_ADDR
 398: LD_INT 8
 400: PUSH
 401: FOR_TO
 402: IFFALSE 449
// if Side_Positions [ i ] then
 404: LD_EXP 18
 408: PUSH
 409: LD_VAR 0 2
 413: ARRAY
 414: IFFALSE 447
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 416: LD_ADDR_EXP 21
 420: PUSH
 421: LD_EXP 21
 425: PPUSH
 426: LD_EXP 18
 430: PUSH
 431: LD_VAR 0 2
 435: ARRAY
 436: PPUSH
 437: LD_VAR 0 2
 441: PPUSH
 442: CALL_OW 1
 446: ST_TO_ADDR
 447: GO 401
 449: POP
 450: POP
// Team_Game := Side_Teams [ your_side ] ;
 451: LD_ADDR_EXP 20
 455: PUSH
 456: LD_EXP 16
 460: PUSH
 461: LD_OWVAR 2
 465: ARRAY
 466: ST_TO_ADDR
// if Multiplayer then
 467: LD_OWVAR 4
 471: IFFALSE 717
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 473: LD_ADDR_EXP 35
 477: PUSH
 478: LD_INT 0
 480: PPUSH
 481: CALL_OW 426
 485: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 486: LD_ADDR_EXP 36
 490: PUSH
 491: LD_INT 1
 493: PPUSH
 494: CALL_OW 426
 498: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 499: LD_ADDR_EXP 37
 503: PUSH
 504: LD_INT 2
 506: PPUSH
 507: CALL_OW 426
 511: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 512: LD_ADDR_EXP 38
 516: PUSH
 517: LD_INT 3
 519: PPUSH
 520: CALL_OW 426
 524: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 525: LD_ADDR_EXP 39
 529: PUSH
 530: LD_INT 4
 532: PPUSH
 533: CALL_OW 426
 537: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 538: LD_ADDR_EXP 40
 542: PUSH
 543: LD_INT 5
 545: PPUSH
 546: CALL_OW 426
 550: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 551: LD_ADDR_EXP 41
 555: PUSH
 556: LD_INT 6
 558: PPUSH
 559: CALL_OW 426
 563: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 564: LD_ADDR_EXP 42
 568: PUSH
 569: LD_INT 10
 571: PPUSH
 572: CALL_OW 426
 576: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 577: LD_ADDR_EXP 43
 581: PUSH
 582: LD_INT 11
 584: PPUSH
 585: CALL_OW 426
 589: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 590: LD_ADDR_EXP 44
 594: PUSH
 595: LD_INT 12
 597: PPUSH
 598: CALL_OW 426
 602: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 603: LD_ADDR_EXP 45
 607: PUSH
 608: LD_INT 13
 610: PPUSH
 611: CALL_OW 426
 615: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 616: LD_ADDR_EXP 46
 620: PUSH
 621: LD_INT 14
 623: PPUSH
 624: CALL_OW 426
 628: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 629: LD_ADDR_EXP 1
 633: PUSH
 634: LD_INT 15
 636: PPUSH
 637: CALL_OW 426
 641: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 642: LD_ADDR_EXP 2
 646: PUSH
 647: LD_INT 16
 649: PPUSH
 650: CALL_OW 426
 654: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 655: LD_ADDR_EXP 47
 659: PUSH
 660: LD_INT 17
 662: PPUSH
 663: CALL_OW 426
 667: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 668: LD_ADDR_EXP 48
 672: PUSH
 673: LD_INT 20
 675: PPUSH
 676: CALL_OW 426
 680: ST_TO_ADDR
// def_game_rules := 0 ;
 681: LD_ADDR_EXP 34
 685: PUSH
 686: LD_INT 0
 688: ST_TO_ADDR
// def_sheik := GetMultiplayerSetting ( 22 ) ;
 689: LD_ADDR_EXP 49
 693: PUSH
 694: LD_INT 22
 696: PPUSH
 697: CALL_OW 426
 701: ST_TO_ADDR
// def_mastodont := GetMultiplayerSetting ( 23 ) ;
 702: LD_ADDR_EXP 50
 706: PUSH
 707: LD_INT 23
 709: PPUSH
 710: CALL_OW 426
 714: ST_TO_ADDR
// end else
 715: GO 873
// begin Randomize ;
 717: CALL_OW 10
// def_base_level := 1 ;
 721: LD_ADDR_EXP 35
 725: PUSH
 726: LD_INT 1
 728: ST_TO_ADDR
// def_amount_of_people := 0 ;
 729: LD_ADDR_EXP 36
 733: PUSH
 734: LD_INT 0
 736: ST_TO_ADDR
// def_skill_level := 1 ;
 737: LD_ADDR_EXP 37
 741: PUSH
 742: LD_INT 1
 744: ST_TO_ADDR
// def_starting_resources := 2 ;
 745: LD_ADDR_EXP 38
 749: PUSH
 750: LD_INT 2
 752: ST_TO_ADDR
// def_shipments_density := 1 ;
 753: LD_ADDR_EXP 39
 757: PUSH
 758: LD_INT 1
 760: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 761: LD_ADDR_EXP 40
 765: PUSH
 766: LD_INT 0
 768: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 769: LD_ADDR_EXP 41
 773: PUSH
 774: LD_INT 1
 776: ST_TO_ADDR
// def_shared_vision := 1 ;
 777: LD_ADDR_EXP 42
 781: PUSH
 782: LD_INT 1
 784: ST_TO_ADDR
// def_morale_flags := 1 ;
 785: LD_ADDR_EXP 43
 789: PUSH
 790: LD_INT 1
 792: ST_TO_ADDR
// def_siberite_detection := 1 ;
 793: LD_ADDR_EXP 44
 797: PUSH
 798: LD_INT 1
 800: ST_TO_ADDR
// def_people_respawning := 2 ;
 801: LD_ADDR_EXP 45
 805: PUSH
 806: LD_INT 2
 808: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 809: LD_ADDR_EXP 46
 813: PUSH
 814: LD_INT 3
 816: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 817: LD_ADDR_EXP 1
 821: PUSH
 822: LD_INT 0
 824: ST_TO_ADDR
// def_public_score := 0 ;
 825: LD_ADDR_EXP 2
 829: PUSH
 830: LD_INT 0
 832: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 833: LD_ADDR_EXP 47
 837: PUSH
 838: LD_INT 0
 840: ST_TO_ADDR
// def_builduptime := 0 ;
 841: LD_ADDR_EXP 48
 845: PUSH
 846: LD_INT 0
 848: ST_TO_ADDR
// def_game_rules := 0 ;
 849: LD_ADDR_EXP 34
 853: PUSH
 854: LD_INT 0
 856: ST_TO_ADDR
// def_sheik := 0 ;
 857: LD_ADDR_EXP 49
 861: PUSH
 862: LD_INT 0
 864: ST_TO_ADDR
// def_mastodont := 0 ;
 865: LD_ADDR_EXP 50
 869: PUSH
 870: LD_INT 0
 872: ST_TO_ADDR
// end ; InitGameRules ;
 873: CALL 10498 0 0
// if def_game_rules = 0 then
 877: LD_EXP 34
 881: PUSH
 882: LD_INT 0
 884: EQUAL
 885: IFFALSE 897
// begin if isSGUI then
 887: LD_OWVAR 83
 891: IFFALSE 897
// setMpTechs ( ) end ;
 893: CALL 13948 0 0
// if ( Game_Type = 5 ) then
 897: LD_EXP 33
 901: PUSH
 902: LD_INT 5
 904: EQUAL
 905: IFFALSE 934
// begin def_base_level := 1 ;
 907: LD_ADDR_EXP 35
 911: PUSH
 912: LD_INT 1
 914: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 915: LD_ADDR_EXP 40
 919: PUSH
 920: LD_INT 0
 922: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
 923: LD_ADDR_EXP 41
 927: PUSH
 928: LD_INT 0
 930: ST_TO_ADDR
// disable ( 10 ) ;
 931: LD_INT 10
 933: DISABLE_MARKED
// end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 934: LD_ADDR_EXP 3
 938: PUSH
 939: LD_INT 0
 941: PUSH
 942: LD_INT 1
 944: PUSH
 945: LD_INT 1
 947: PUSH
 948: EMPTY
 949: LIST
 950: LIST
 951: LIST
 952: PUSH
 953: LD_EXP 35
 957: PUSH
 958: LD_INT 1
 960: PLUS
 961: ARRAY
 962: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 ] [ def_base_level + 1 ] ;
 963: LD_ADDR_EXP 4
 967: PUSH
 968: LD_INT 0
 970: PUSH
 971: LD_INT 0
 973: PUSH
 974: LD_INT 2
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: LIST
 981: PUSH
 982: LD_EXP 35
 986: PUSH
 987: LD_INT 1
 989: PLUS
 990: ARRAY
 991: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 992: LD_ADDR_EXP 5
 996: PUSH
 997: LD_INT 9
 999: PUSH
1000: LD_INT 12
1002: PUSH
1003: LD_INT 15
1005: PUSH
1006: LD_INT 24
1008: PUSH
1009: EMPTY
1010: LIST
1011: LIST
1012: LIST
1013: LIST
1014: PUSH
1015: LD_EXP 36
1019: PUSH
1020: LD_INT 1
1022: PLUS
1023: ARRAY
1024: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 , 8 ] [ def_skill_level + 1 ] ;
1025: LD_ADDR_EXP 6
1029: PUSH
1030: LD_INT 2
1032: PUSH
1033: LD_INT 3
1035: PUSH
1036: LD_INT 4
1038: PUSH
1039: LD_INT 5
1041: PUSH
1042: LD_INT 8
1044: PUSH
1045: EMPTY
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: PUSH
1052: LD_EXP 37
1056: PUSH
1057: LD_INT 1
1059: PLUS
1060: ARRAY
1061: ST_TO_ADDR
// if ( Game_Type = 5 ) then
1062: LD_EXP 33
1066: PUSH
1067: LD_INT 5
1069: EQUAL
1070: IFFALSE 1188
// begin starting_resources := [ [ 1000 , 100 , 100 ] , [ 2000 , 200 , 200 ] , [ 5000 , 500 , 500 ] , [ 10000 , 1000 , 1000 ] , [ 25000 , 2500 , 2500 ] , [ 50000 , 5000 , 5000 ] ] [ def_starting_resources + 1 ] ;
1072: LD_ADDR_EXP 8
1076: PUSH
1077: LD_INT 1000
1079: PUSH
1080: LD_INT 100
1082: PUSH
1083: LD_INT 100
1085: PUSH
1086: EMPTY
1087: LIST
1088: LIST
1089: LIST
1090: PUSH
1091: LD_INT 2000
1093: PUSH
1094: LD_INT 200
1096: PUSH
1097: LD_INT 200
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: PUSH
1105: LD_INT 5000
1107: PUSH
1108: LD_INT 500
1110: PUSH
1111: LD_INT 500
1113: PUSH
1114: EMPTY
1115: LIST
1116: LIST
1117: LIST
1118: PUSH
1119: LD_INT 10000
1121: PUSH
1122: LD_INT 1000
1124: PUSH
1125: LD_INT 1000
1127: PUSH
1128: EMPTY
1129: LIST
1130: LIST
1131: LIST
1132: PUSH
1133: LD_INT 25000
1135: PUSH
1136: LD_INT 2500
1138: PUSH
1139: LD_INT 2500
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: LIST
1146: PUSH
1147: LD_INT 50000
1149: PUSH
1150: LD_INT 5000
1152: PUSH
1153: LD_INT 5000
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: LIST
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: PUSH
1169: LD_EXP 38
1173: PUSH
1174: LD_INT 1
1176: PLUS
1177: ARRAY
1178: ST_TO_ADDR
// starting_crates := [ ] ;
1179: LD_ADDR_EXP 7
1183: PUSH
1184: EMPTY
1185: ST_TO_ADDR
// end else
1186: GO 1334
// begin starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1188: LD_ADDR_EXP 8
1192: PUSH
1193: LD_INT 0
1195: PUSH
1196: LD_INT 0
1198: PUSH
1199: LD_INT 0
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: LIST
1206: PUSH
1207: LD_INT 30
1209: PUSH
1210: LD_INT 0
1212: PUSH
1213: LD_INT 0
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: LIST
1220: PUSH
1221: LD_INT 50
1223: PUSH
1224: LD_INT 20
1226: PUSH
1227: LD_INT 0
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: LIST
1234: PUSH
1235: LD_INT 80
1237: PUSH
1238: LD_INT 40
1240: PUSH
1241: LD_INT 20
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: LIST
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: PUSH
1255: LD_EXP 38
1259: PUSH
1260: LD_INT 1
1262: PLUS
1263: ARRAY
1264: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1265: LD_ADDR_EXP 7
1269: PUSH
1270: LD_INT 10
1272: PUSH
1273: EMPTY
1274: LIST
1275: PUSH
1276: LD_INT 7
1278: PUSH
1279: LD_INT 14
1281: PUSH
1282: EMPTY
1283: LIST
1284: LIST
1285: PUSH
1286: LD_INT 6
1288: PUSH
1289: LD_INT 12
1291: PUSH
1292: LD_INT 18
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: LIST
1299: PUSH
1300: LD_INT 5
1302: PUSH
1303: LD_INT 10
1305: PUSH
1306: LD_INT 15
1308: PUSH
1309: LD_INT 20
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: PUSH
1324: LD_EXP 38
1328: PUSH
1329: LD_INT 1
1331: PLUS
1332: ARRAY
1333: ST_TO_ADDR
// end ; shipments_density := [ 150 , 125 , 100 , 50 ] [ def_shipments_density + 1 ] ;
1334: LD_ADDR_EXP 9
1338: PUSH
1339: LD_INT 150
1341: PUSH
1342: LD_INT 125
1344: PUSH
1345: LD_INT 100
1347: PUSH
1348: LD_INT 50
1350: PUSH
1351: EMPTY
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: PUSH
1357: LD_EXP 39
1361: PUSH
1362: LD_INT 1
1364: PLUS
1365: ARRAY
1366: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1367: LD_ADDR_EXP 13
1371: PUSH
1372: LD_INT 0
1374: PUSH
1375: LD_INT 10500
1377: PUSH
1378: LD_INT 6300
1380: PUSH
1381: EMPTY
1382: LIST
1383: LIST
1384: LIST
1385: PUSH
1386: LD_EXP 45
1390: PUSH
1391: LD_INT 1
1393: PLUS
1394: ARRAY
1395: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1396: LD_ADDR_EXP 14
1400: PUSH
1401: LD_INT 0
1403: PUSH
1404: LD_INT 31500
1406: PUSH
1407: LD_INT 10500
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: LIST
1414: PUSH
1415: LD_EXP 45
1419: PUSH
1420: LD_INT 1
1422: PLUS
1423: ARRAY
1424: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
1425: LD_ADDR_EXP 11
1429: PUSH
1430: LD_INT 0
1432: PUSH
1433: LD_INT 3
1435: PUSH
1436: LD_INT 6
1438: PUSH
1439: LD_INT 9
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: PUSH
1448: LD_EXP 46
1452: PUSH
1453: LD_INT 1
1455: PLUS
1456: ARRAY
1457: ST_TO_ADDR
// amount_of_siberit := [ 30 , 50 , 80 , 100 , 130 , 150 , 200 ] [ def_amount_of_siberit + 1 ] ;
1458: LD_ADDR_EXP 12
1462: PUSH
1463: LD_INT 30
1465: PUSH
1466: LD_INT 50
1468: PUSH
1469: LD_INT 80
1471: PUSH
1472: LD_INT 100
1474: PUSH
1475: LD_INT 130
1477: PUSH
1478: LD_INT 150
1480: PUSH
1481: LD_INT 200
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: PUSH
1493: LD_EXP 1
1497: PUSH
1498: LD_INT 1
1500: PLUS
1501: ARRAY
1502: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1503: LD_ADDR_EXP 10
1507: PUSH
1508: LD_INT 1
1510: NEG
1511: PUSH
1512: LD_INT 350
1514: PUSH
1515: LD_INT 700
1517: PUSH
1518: LD_INT 1400
1520: PUSH
1521: LD_INT 0
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: PUSH
1531: LD_EXP 43
1535: PUSH
1536: LD_INT 1
1538: PLUS
1539: ARRAY
1540: ST_TO_ADDR
// battle_flags_id := [ ] ;
1541: LD_ADDR_EXP 29
1545: PUSH
1546: EMPTY
1547: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1548: LD_ADDR_EXP 15
1552: PUSH
1553: LD_INT 0
1555: PUSH
1556: LD_INT 1
1558: PUSH
1559: LD_INT 63000
1561: PUSH
1562: LD_INT 126000
1564: PUSH
1565: LD_INT 189000
1567: PUSH
1568: LD_INT 252000
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: PUSH
1579: LD_EXP 47
1583: PUSH
1584: LD_INT 1
1586: PLUS
1587: ARRAY
1588: ST_TO_ADDR
// if ( Game_Type = 12 ) then
1589: LD_EXP 33
1593: PUSH
1594: LD_INT 12
1596: EQUAL
1597: IFFALSE 1655
// begin sheik := [ 0 , 1 ] [ def_sheik + 1 ] ;
1599: LD_ADDR_EXP 30
1603: PUSH
1604: LD_INT 0
1606: PUSH
1607: LD_INT 1
1609: PUSH
1610: EMPTY
1611: LIST
1612: LIST
1613: PUSH
1614: LD_EXP 49
1618: PUSH
1619: LD_INT 1
1621: PLUS
1622: ARRAY
1623: ST_TO_ADDR
// mastodont := [ 0 , 1 , 2 ] [ def_mastodont + 1 ] end else
1624: LD_ADDR_EXP 31
1628: PUSH
1629: LD_INT 0
1631: PUSH
1632: LD_INT 1
1634: PUSH
1635: LD_INT 2
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: LIST
1642: PUSH
1643: LD_EXP 50
1647: PUSH
1648: LD_INT 1
1650: PLUS
1651: ARRAY
1652: ST_TO_ADDR
1653: GO 1671
// begin sheik := 0 ;
1655: LD_ADDR_EXP 30
1659: PUSH
1660: LD_INT 0
1662: ST_TO_ADDR
// mastodont := 0 ;
1663: LD_ADDR_EXP 31
1667: PUSH
1668: LD_INT 0
1670: ST_TO_ADDR
// end ; BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
1671: LD_ADDR_EXP 32
1675: PUSH
1676: LD_INT 9
1678: PUSH
1679: LD_INT 10
1681: PUSH
1682: LD_INT 11
1684: PUSH
1685: LD_INT 12
1687: PUSH
1688: LD_INT 13
1690: PUSH
1691: LD_INT 14
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: LIST
1700: LIST
1701: ST_TO_ADDR
// end ;
1702: LD_VAR 0 1
1706: RET
// function init_map ; var i , j ; begin
1707: LD_INT 0
1709: PPUSH
1710: PPUSH
1711: PPUSH
// normal_oil_deposits_locations := [ [ 101 , 187 ] , [ 17 , 10 ] , [ 87 , 72 ] , [ 146 , 19 ] , [ 183 , 90 ] , [ 215 , 163 ] ] ;
1712: LD_ADDR_EXP 25
1716: PUSH
1717: LD_INT 101
1719: PUSH
1720: LD_INT 187
1722: PUSH
1723: EMPTY
1724: LIST
1725: LIST
1726: PUSH
1727: LD_INT 17
1729: PUSH
1730: LD_INT 10
1732: PUSH
1733: EMPTY
1734: LIST
1735: LIST
1736: PUSH
1737: LD_INT 87
1739: PUSH
1740: LD_INT 72
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: PUSH
1747: LD_INT 146
1749: PUSH
1750: LD_INT 19
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: PUSH
1757: LD_INT 183
1759: PUSH
1760: LD_INT 90
1762: PUSH
1763: EMPTY
1764: LIST
1765: LIST
1766: PUSH
1767: LD_INT 215
1769: PUSH
1770: LD_INT 163
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 101 , 187 ] , [ 91 , 176 ] ] , [ [ 17 , 10 ] , [ 15 , 21 ] ] , [ [ 87 , 72 ] , [ 85 , 63 ] ] , [ [ 146 , 19 ] , [ 123 , 3 ] ] , [ [ 183 , 90 ] , [ 181 , 76 ] ] , [ [ 215 , 163 ] , [ 231 , 174 ] ] ] ;
1785: LD_ADDR_EXP 26
1789: PUSH
1790: LD_INT 101
1792: PUSH
1793: LD_INT 187
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: PUSH
1800: LD_INT 91
1802: PUSH
1803: LD_INT 176
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: PUSH
1814: LD_INT 17
1816: PUSH
1817: LD_INT 10
1819: PUSH
1820: EMPTY
1821: LIST
1822: LIST
1823: PUSH
1824: LD_INT 15
1826: PUSH
1827: LD_INT 21
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: PUSH
1834: EMPTY
1835: LIST
1836: LIST
1837: PUSH
1838: LD_INT 87
1840: PUSH
1841: LD_INT 72
1843: PUSH
1844: EMPTY
1845: LIST
1846: LIST
1847: PUSH
1848: LD_INT 85
1850: PUSH
1851: LD_INT 63
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 146
1864: PUSH
1865: LD_INT 19
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: PUSH
1872: LD_INT 123
1874: PUSH
1875: LD_INT 3
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: PUSH
1886: LD_INT 183
1888: PUSH
1889: LD_INT 90
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: PUSH
1896: LD_INT 181
1898: PUSH
1899: LD_INT 76
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: PUSH
1906: EMPTY
1907: LIST
1908: LIST
1909: PUSH
1910: LD_INT 215
1912: PUSH
1913: LD_INT 163
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: PUSH
1920: LD_INT 231
1922: PUSH
1923: LD_INT 174
1925: PUSH
1926: EMPTY
1927: LIST
1928: LIST
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 98 , 182 ] , [ 21 , 29 ] , [ 100 , 64 ] , [ 151 , 13 ] , [ 184 , 70 ] , [ 219 , 165 ] ] ;
1942: LD_ADDR_EXP 27
1946: PUSH
1947: LD_INT 98
1949: PUSH
1950: LD_INT 182
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: PUSH
1957: LD_INT 21
1959: PUSH
1960: LD_INT 29
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: PUSH
1967: LD_INT 100
1969: PUSH
1970: LD_INT 64
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: LD_INT 151
1979: PUSH
1980: LD_INT 13
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: PUSH
1987: LD_INT 184
1989: PUSH
1990: LD_INT 70
1992: PUSH
1993: EMPTY
1994: LIST
1995: LIST
1996: PUSH
1997: LD_INT 219
1999: PUSH
2000: LD_INT 165
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 98 , 182 ] , [ 123 , 184 ] ] , [ [ 21 , 29 ] , [ 33 , 18 ] ] , [ [ 100 , 64 ] , [ 100 , 85 ] ] , [ [ 151 , 13 ] , [ 135 , 24 ] ] , [ [ 184 , 70 ] , [ 202 , 97 ] ] , [ [ 219 , 165 ] , [ 233 , 154 ] ] ] ;
2015: LD_ADDR_EXP 28
2019: PUSH
2020: LD_INT 98
2022: PUSH
2023: LD_INT 182
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: LD_INT 123
2032: PUSH
2033: LD_INT 184
2035: PUSH
2036: EMPTY
2037: LIST
2038: LIST
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PUSH
2044: LD_INT 21
2046: PUSH
2047: LD_INT 29
2049: PUSH
2050: EMPTY
2051: LIST
2052: LIST
2053: PUSH
2054: LD_INT 33
2056: PUSH
2057: LD_INT 18
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: PUSH
2068: LD_INT 100
2070: PUSH
2071: LD_INT 64
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: PUSH
2078: LD_INT 100
2080: PUSH
2081: LD_INT 85
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: PUSH
2092: LD_INT 151
2094: PUSH
2095: LD_INT 13
2097: PUSH
2098: EMPTY
2099: LIST
2100: LIST
2101: PUSH
2102: LD_INT 135
2104: PUSH
2105: LD_INT 24
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: PUSH
2112: EMPTY
2113: LIST
2114: LIST
2115: PUSH
2116: LD_INT 184
2118: PUSH
2119: LD_INT 70
2121: PUSH
2122: EMPTY
2123: LIST
2124: LIST
2125: PUSH
2126: LD_INT 202
2128: PUSH
2129: LD_INT 97
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: PUSH
2140: LD_INT 219
2142: PUSH
2143: LD_INT 165
2145: PUSH
2146: EMPTY
2147: LIST
2148: LIST
2149: PUSH
2150: LD_INT 233
2152: PUSH
2153: LD_INT 154
2155: PUSH
2156: EMPTY
2157: LIST
2158: LIST
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: PUSH
2164: EMPTY
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: ST_TO_ADDR
// depot_def := [ [ 100 , 179 , 0 ] , [ 21 , 18 , 2 ] , [ 94 , 71 , 2 ] , [ 132 , 11 , 1 ] , [ 191 , 86 , 2 ] , [ 230 , 164 , 4 ] ] ;
2172: LD_ADDR_EXP 22
2176: PUSH
2177: LD_INT 100
2179: PUSH
2180: LD_INT 179
2182: PUSH
2183: LD_INT 0
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: LIST
2190: PUSH
2191: LD_INT 21
2193: PUSH
2194: LD_INT 18
2196: PUSH
2197: LD_INT 2
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: LIST
2204: PUSH
2205: LD_INT 94
2207: PUSH
2208: LD_INT 71
2210: PUSH
2211: LD_INT 2
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: LIST
2218: PUSH
2219: LD_INT 132
2221: PUSH
2222: LD_INT 11
2224: PUSH
2225: LD_INT 1
2227: PUSH
2228: EMPTY
2229: LIST
2230: LIST
2231: LIST
2232: PUSH
2233: LD_INT 191
2235: PUSH
2236: LD_INT 86
2238: PUSH
2239: LD_INT 2
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: PUSH
2247: LD_INT 230
2249: PUSH
2250: LD_INT 164
2252: PUSH
2253: LD_INT 4
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: LIST
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: ST_TO_ADDR
// for i in depot_def do
2269: LD_ADDR_VAR 0 2
2273: PUSH
2274: LD_EXP 22
2278: PUSH
2279: FOR_IN
2280: IFFALSE 2354
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 10 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 10 ) ] ] ;
2282: LD_ADDR_EXP 24
2286: PUSH
2287: LD_EXP 24
2291: PUSH
2292: LD_VAR 0 2
2296: PUSH
2297: LD_INT 1
2299: ARRAY
2300: PPUSH
2301: LD_VAR 0 2
2305: PUSH
2306: LD_INT 3
2308: ARRAY
2309: PPUSH
2310: LD_INT 10
2312: PPUSH
2313: CALL_OW 272
2317: PUSH
2318: LD_VAR 0 2
2322: PUSH
2323: LD_INT 2
2325: ARRAY
2326: PPUSH
2327: LD_VAR 0 2
2331: PUSH
2332: LD_INT 3
2334: ARRAY
2335: PPUSH
2336: LD_INT 10
2338: PPUSH
2339: CALL_OW 273
2343: PUSH
2344: EMPTY
2345: LIST
2346: LIST
2347: PUSH
2348: EMPTY
2349: LIST
2350: ADD
2351: ST_TO_ADDR
2352: GO 2279
2354: POP
2355: POP
// breastworks_def := [ [ [ 93 , 156 , 3 ] , [ 105 , 167 , 4 ] ] , [ [ 27 , 32 , 5 ] , [ 36 , 30 , 4 ] ] , [ [ 93 , 61 , 3 ] , [ 111 , 88 , 5 ] ] , [ [ 139 , 18 , 0 ] , [ 130 , 7 , 1 ] ] , [ [ 185 , 92 , 0 ] , [ 201 , 94 , 5 ] ] , [ [ 213 , 163 , 1 ] , [ 224 , 156 , 2 ] ] ] ;
2356: LD_ADDR_EXP 23
2360: PUSH
2361: LD_INT 93
2363: PUSH
2364: LD_INT 156
2366: PUSH
2367: LD_INT 3
2369: PUSH
2370: EMPTY
2371: LIST
2372: LIST
2373: LIST
2374: PUSH
2375: LD_INT 105
2377: PUSH
2378: LD_INT 167
2380: PUSH
2381: LD_INT 4
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: LIST
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: PUSH
2393: LD_INT 27
2395: PUSH
2396: LD_INT 32
2398: PUSH
2399: LD_INT 5
2401: PUSH
2402: EMPTY
2403: LIST
2404: LIST
2405: LIST
2406: PUSH
2407: LD_INT 36
2409: PUSH
2410: LD_INT 30
2412: PUSH
2413: LD_INT 4
2415: PUSH
2416: EMPTY
2417: LIST
2418: LIST
2419: LIST
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: PUSH
2425: LD_INT 93
2427: PUSH
2428: LD_INT 61
2430: PUSH
2431: LD_INT 3
2433: PUSH
2434: EMPTY
2435: LIST
2436: LIST
2437: LIST
2438: PUSH
2439: LD_INT 111
2441: PUSH
2442: LD_INT 88
2444: PUSH
2445: LD_INT 5
2447: PUSH
2448: EMPTY
2449: LIST
2450: LIST
2451: LIST
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: PUSH
2457: LD_INT 139
2459: PUSH
2460: LD_INT 18
2462: PUSH
2463: LD_INT 0
2465: PUSH
2466: EMPTY
2467: LIST
2468: LIST
2469: LIST
2470: PUSH
2471: LD_INT 130
2473: PUSH
2474: LD_INT 7
2476: PUSH
2477: LD_INT 1
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: LIST
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: PUSH
2489: LD_INT 185
2491: PUSH
2492: LD_INT 92
2494: PUSH
2495: LD_INT 0
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: LIST
2502: PUSH
2503: LD_INT 201
2505: PUSH
2506: LD_INT 94
2508: PUSH
2509: LD_INT 5
2511: PUSH
2512: EMPTY
2513: LIST
2514: LIST
2515: LIST
2516: PUSH
2517: EMPTY
2518: LIST
2519: LIST
2520: PUSH
2521: LD_INT 213
2523: PUSH
2524: LD_INT 163
2526: PUSH
2527: LD_INT 1
2529: PUSH
2530: EMPTY
2531: LIST
2532: LIST
2533: LIST
2534: PUSH
2535: LD_INT 224
2537: PUSH
2538: LD_INT 156
2540: PUSH
2541: LD_INT 2
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: LIST
2548: PUSH
2549: EMPTY
2550: LIST
2551: LIST
2552: PUSH
2553: EMPTY
2554: LIST
2555: LIST
2556: LIST
2557: LIST
2558: LIST
2559: LIST
2560: ST_TO_ADDR
// for i = 1 to 6 do
2561: LD_ADDR_VAR 0 2
2565: PUSH
2566: DOUBLE
2567: LD_INT 1
2569: DEC
2570: ST_TO_ADDR
2571: LD_INT 6
2573: PUSH
2574: FOR_TO
2575: IFFALSE 2672
// if def_extra_oil_deposits then
2577: LD_EXP 40
2581: IFFALSE 2633
// for j in extra_oil_deposits_locations [ i ] do
2583: LD_ADDR_VAR 0 3
2587: PUSH
2588: LD_EXP 26
2592: PUSH
2593: LD_VAR 0 2
2597: ARRAY
2598: PUSH
2599: FOR_IN
2600: IFFALSE 2629
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2602: LD_VAR 0 3
2606: PUSH
2607: LD_INT 1
2609: ARRAY
2610: PPUSH
2611: LD_VAR 0 3
2615: PUSH
2616: LD_INT 2
2618: ARRAY
2619: PPUSH
2620: LD_INT 2
2622: PPUSH
2623: CALL_OW 62
2627: GO 2599
2629: POP
2630: POP
2631: GO 2670
// CreateDepositXY ( normal_oil_deposits_locations [ i ] [ 1 ] , normal_oil_deposits_locations [ i ] [ 2 ] , mat_oil ) ;
2633: LD_EXP 25
2637: PUSH
2638: LD_VAR 0 2
2642: ARRAY
2643: PUSH
2644: LD_INT 1
2646: ARRAY
2647: PPUSH
2648: LD_EXP 25
2652: PUSH
2653: LD_VAR 0 2
2657: ARRAY
2658: PUSH
2659: LD_INT 2
2661: ARRAY
2662: PPUSH
2663: LD_INT 2
2665: PPUSH
2666: CALL_OW 62
2670: GO 2574
2672: POP
2673: POP
// if def_extra_sib_deposits then
2674: LD_EXP 41
2678: IFFALSE 2797
// for i = 1 to 6 do
2680: LD_ADDR_VAR 0 2
2684: PUSH
2685: DOUBLE
2686: LD_INT 1
2688: DEC
2689: ST_TO_ADDR
2690: LD_INT 6
2692: PUSH
2693: FOR_TO
2694: IFFALSE 2795
// if def_extra_sib_deposits = 2 then
2696: LD_EXP 41
2700: PUSH
2701: LD_INT 2
2703: EQUAL
2704: IFFALSE 2756
// for j in extra_sib_deposits_locations [ i ] do
2706: LD_ADDR_VAR 0 3
2710: PUSH
2711: LD_EXP 28
2715: PUSH
2716: LD_VAR 0 2
2720: ARRAY
2721: PUSH
2722: FOR_IN
2723: IFFALSE 2752
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2725: LD_VAR 0 3
2729: PUSH
2730: LD_INT 1
2732: ARRAY
2733: PPUSH
2734: LD_VAR 0 3
2738: PUSH
2739: LD_INT 2
2741: ARRAY
2742: PPUSH
2743: LD_INT 3
2745: PPUSH
2746: CALL_OW 62
2750: GO 2722
2752: POP
2753: POP
2754: GO 2793
// CreateDepositXY ( normal_sib_deposits_locations [ i ] [ 1 ] , normal_sib_deposits_locations [ i ] [ 2 ] , mat_siberit ) ;
2756: LD_EXP 27
2760: PUSH
2761: LD_VAR 0 2
2765: ARRAY
2766: PUSH
2767: LD_INT 1
2769: ARRAY
2770: PPUSH
2771: LD_EXP 27
2775: PUSH
2776: LD_VAR 0 2
2780: ARRAY
2781: PUSH
2782: LD_INT 2
2784: ARRAY
2785: PPUSH
2786: LD_INT 3
2788: PPUSH
2789: CALL_OW 62
2793: GO 2693
2795: POP
2796: POP
// end ;
2797: LD_VAR 0 1
2801: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2802: LD_INT 0
2804: PPUSH
2805: PPUSH
2806: PPUSH
// if not Team_Game then
2807: LD_EXP 20
2811: NOT
2812: IFFALSE 2910
// begin for i = 1 to 8 do
2814: LD_ADDR_VAR 0 2
2818: PUSH
2819: DOUBLE
2820: LD_INT 1
2822: DEC
2823: ST_TO_ADDR
2824: LD_INT 8
2826: PUSH
2827: FOR_TO
2828: IFFALSE 2906
// for j = 1 to 8 do
2830: LD_ADDR_VAR 0 3
2834: PUSH
2835: DOUBLE
2836: LD_INT 1
2838: DEC
2839: ST_TO_ADDR
2840: LD_INT 8
2842: PUSH
2843: FOR_TO
2844: IFFALSE 2902
// if i <> j then
2846: LD_VAR 0 2
2850: PUSH
2851: LD_VAR 0 3
2855: NONEQUAL
2856: IFFALSE 2880
// SetAttitude ( i , j , att_neutral , true ) else
2858: LD_VAR 0 2
2862: PPUSH
2863: LD_VAR 0 3
2867: PPUSH
2868: LD_INT 0
2870: PPUSH
2871: LD_INT 1
2873: PPUSH
2874: CALL_OW 80
2878: GO 2900
// SetAttitude ( i , j , att_friend , true ) ;
2880: LD_VAR 0 2
2884: PPUSH
2885: LD_VAR 0 3
2889: PPUSH
2890: LD_INT 1
2892: PPUSH
2893: LD_INT 1
2895: PPUSH
2896: CALL_OW 80
2900: GO 2843
2902: POP
2903: POP
2904: GO 2827
2906: POP
2907: POP
// end else
2908: GO 3085
// begin if def_shared_vision then
2910: LD_EXP 42
2914: IFFALSE 2979
// begin for i in Teams do
2916: LD_ADDR_VAR 0 2
2920: PUSH
2921: LD_EXP 17
2925: PUSH
2926: FOR_IN
2927: IFFALSE 2977
// for j = 2 to i do
2929: LD_ADDR_VAR 0 3
2933: PUSH
2934: DOUBLE
2935: LD_INT 2
2937: DEC
2938: ST_TO_ADDR
2939: LD_VAR 0 2
2943: PUSH
2944: FOR_TO
2945: IFFALSE 2973
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2947: LD_VAR 0 2
2951: PUSH
2952: LD_VAR 0 3
2956: ARRAY
2957: PPUSH
2958: LD_VAR 0 2
2962: PUSH
2963: LD_INT 1
2965: ARRAY
2966: PPUSH
2967: CALL_OW 343
2971: GO 2944
2973: POP
2974: POP
2975: GO 2926
2977: POP
2978: POP
// end ; for i = 1 to 8 do
2979: LD_ADDR_VAR 0 2
2983: PUSH
2984: DOUBLE
2985: LD_INT 1
2987: DEC
2988: ST_TO_ADDR
2989: LD_INT 8
2991: PUSH
2992: FOR_TO
2993: IFFALSE 3083
// for j = 1 to 8 do
2995: LD_ADDR_VAR 0 3
2999: PUSH
3000: DOUBLE
3001: LD_INT 1
3003: DEC
3004: ST_TO_ADDR
3005: LD_INT 8
3007: PUSH
3008: FOR_TO
3009: IFFALSE 3079
// if Side_Teams [ i ] = Side_Teams [ j ] then
3011: LD_EXP 16
3015: PUSH
3016: LD_VAR 0 2
3020: ARRAY
3021: PUSH
3022: LD_EXP 16
3026: PUSH
3027: LD_VAR 0 3
3031: ARRAY
3032: EQUAL
3033: IFFALSE 3057
// SetAttitude ( i , j , att_friend , true ) else
3035: LD_VAR 0 2
3039: PPUSH
3040: LD_VAR 0 3
3044: PPUSH
3045: LD_INT 1
3047: PPUSH
3048: LD_INT 1
3050: PPUSH
3051: CALL_OW 80
3055: GO 3077
// SetAttitude ( i , j , att_enemy , true ) ;
3057: LD_VAR 0 2
3061: PPUSH
3062: LD_VAR 0 3
3066: PPUSH
3067: LD_INT 2
3069: PPUSH
3070: LD_INT 1
3072: PPUSH
3073: CALL_OW 80
3077: GO 3008
3079: POP
3080: POP
3081: GO 2992
3083: POP
3084: POP
// end ; end ;
3085: LD_VAR 0 1
3089: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
3090: LD_INT 0
3092: PPUSH
3093: PPUSH
3094: PPUSH
3095: PPUSH
// result := [ ] ;
3096: LD_ADDR_VAR 0 7
3100: PUSH
3101: EMPTY
3102: ST_TO_ADDR
// for i := 1 to count do
3103: LD_ADDR_VAR 0 8
3107: PUSH
3108: DOUBLE
3109: LD_INT 1
3111: DEC
3112: ST_TO_ADDR
3113: LD_VAR 0 1
3117: PUSH
3118: FOR_TO
3119: IFFALSE 3569
// begin uc_direction := Rand ( 0 , 5 ) ;
3121: LD_ADDR_OWVAR 24
3125: PUSH
3126: LD_INT 0
3128: PPUSH
3129: LD_INT 5
3131: PPUSH
3132: CALL_OW 12
3136: ST_TO_ADDR
// if commander then
3137: LD_LOC 1
3141: IFFALSE 3282
// begin hc_name := mp_sides_players_names [ uc_side ] ;
3143: LD_ADDR_OWVAR 26
3147: PUSH
3148: LD_OWVAR 19
3152: PUSH
3153: LD_OWVAR 20
3157: ARRAY
3158: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3159: LD_INT 1
3161: PPUSH
3162: LD_INT 2
3164: PPUSH
3165: CALL_OW 12
3169: PPUSH
3170: LD_VAR 0 2
3174: PPUSH
3175: LD_EXP 6
3179: PUSH
3180: LD_INT 2
3182: PLUS
3183: PPUSH
3184: CALL_OW 380
// hc_importance := 105 ;
3188: LD_ADDR_OWVAR 32
3192: PUSH
3193: LD_INT 105
3195: ST_TO_ADDR
// commander := false ;
3196: LD_ADDR_LOC 1
3200: PUSH
3201: LD_INT 0
3203: ST_TO_ADDR
// if Multiplayer then
3204: LD_OWVAR 4
3208: IFFALSE 3280
// begin if sheik then
3210: LD_EXP 30
3214: IFFALSE 3242
// begin hc_gallery :=  ;
3216: LD_ADDR_OWVAR 33
3220: PUSH
3221: LD_STRING 
3223: ST_TO_ADDR
// hc_class := class_desert_warior ;
3224: LD_ADDR_OWVAR 28
3228: PUSH
3229: LD_INT 11
3231: ST_TO_ADDR
// hc_sex := sex_male ;
3232: LD_ADDR_OWVAR 27
3236: PUSH
3237: LD_INT 1
3239: ST_TO_ADDR
// end else
3240: GO 3280
// begin hc_gallery := MULTIAVATARS ;
3242: LD_ADDR_OWVAR 33
3246: PUSH
3247: LD_STRING MULTIAVATARS
3249: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3250: LD_ADDR_OWVAR 34
3254: PUSH
3255: LD_OWVAR 20
3259: PPUSH
3260: CALL_OW 525
3264: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3265: LD_ADDR_OWVAR 27
3269: PUSH
3270: LD_OWVAR 20
3274: PPUSH
3275: CALL_OW 526
3279: ST_TO_ADDR
// end ; end ; end else
3280: GO 3345
// begin hc_name :=  ;
3282: LD_ADDR_OWVAR 26
3286: PUSH
3287: LD_STRING 
3289: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3290: LD_INT 1
3292: PPUSH
3293: LD_INT 2
3295: PPUSH
3296: CALL_OW 12
3300: PPUSH
3301: LD_VAR 0 2
3305: PPUSH
3306: LD_EXP 6
3310: PPUSH
3311: CALL_OW 380
// hc_importance := 0 ;
3315: LD_ADDR_OWVAR 32
3319: PUSH
3320: LD_INT 0
3322: ST_TO_ADDR
// if Multiplayer then
3323: LD_OWVAR 4
3327: IFFALSE 3345
// begin hc_gallery :=  ;
3329: LD_ADDR_OWVAR 33
3333: PUSH
3334: LD_STRING 
3336: ST_TO_ADDR
// hc_face_number := 0 ;
3337: LD_ADDR_OWVAR 34
3341: PUSH
3342: LD_INT 0
3344: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3345: LD_ADDR_VAR 0 10
3349: PUSH
3350: CALL_OW 44
3354: ST_TO_ADDR
// if global_defined then
3355: LD_LOC 3
3359: IFFALSE 3499
// begin if ( cl = class_soldier ) then
3361: LD_VAR 0 2
3365: PUSH
3366: LD_INT 1
3368: EQUAL
3369: IFFALSE 3389
// j := i + soldiers_created else
3371: LD_ADDR_VAR 0 9
3375: PUSH
3376: LD_VAR 0 8
3380: PUSH
3381: LD_LOC 4
3385: PLUS
3386: ST_TO_ADDR
3387: GO 3399
// j := i ;
3389: LD_ADDR_VAR 0 9
3393: PUSH
3394: LD_VAR 0 8
3398: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3399: LD_LOC 2
3403: PUSH
3404: LD_VAR 0 2
3408: ARRAY
3409: PUSH
3410: LD_VAR 0 9
3414: ARRAY
3415: PPUSH
3416: LD_VAR 0 10
3420: PPUSH
3421: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3425: LD_VAR 0 10
3429: PPUSH
3430: LD_INT 2
3432: PPUSH
3433: LD_LOC 2
3437: PUSH
3438: LD_VAR 0 2
3442: ARRAY
3443: PUSH
3444: LD_VAR 0 9
3448: ARRAY
3449: PPUSH
3450: LD_INT 2
3452: PPUSH
3453: CALL_OW 260
3457: PPUSH
3458: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3462: LD_VAR 0 10
3466: PPUSH
3467: LD_INT 1
3469: PPUSH
3470: LD_LOC 2
3474: PUSH
3475: LD_VAR 0 2
3479: ARRAY
3480: PUSH
3481: LD_VAR 0 9
3485: ARRAY
3486: PPUSH
3487: LD_INT 1
3489: PPUSH
3490: CALL_OW 260
3494: PPUSH
3495: CALL_OW 239
// end ; if building then
3499: LD_VAR 0 6
3503: IFFALSE 3521
// PlaceHumanInUnit ( un , building ) else
3505: LD_VAR 0 10
3509: PPUSH
3510: LD_VAR 0 6
3514: PPUSH
3515: CALL_OW 52
3519: GO 3548
// PlaceUnitXYR ( un , x , y , r , false ) ;
3521: LD_VAR 0 10
3525: PPUSH
3526: LD_VAR 0 3
3530: PPUSH
3531: LD_VAR 0 4
3535: PPUSH
3536: LD_VAR 0 5
3540: PPUSH
3541: LD_INT 0
3543: PPUSH
3544: CALL_OW 50
// result := result ^ [ un ] ;
3548: LD_ADDR_VAR 0 7
3552: PUSH
3553: LD_VAR 0 7
3557: PUSH
3558: LD_VAR 0 10
3562: PUSH
3563: EMPTY
3564: LIST
3565: ADD
3566: ST_TO_ADDR
// end ;
3567: GO 3118
3569: POP
3570: POP
// if not global_defined then
3571: LD_LOC 3
3575: NOT
3576: IFFALSE 3654
// if ( global_units >= cl ) then
3578: LD_LOC 2
3582: PUSH
3583: LD_VAR 0 2
3587: GREATEREQUAL
3588: IFFALSE 3629
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3590: LD_ADDR_LOC 2
3594: PUSH
3595: LD_LOC 2
3599: PPUSH
3600: LD_VAR 0 2
3604: PPUSH
3605: LD_LOC 2
3609: PUSH
3610: LD_VAR 0 2
3614: ARRAY
3615: PUSH
3616: LD_VAR 0 7
3620: ADD
3621: PPUSH
3622: CALL_OW 1
3626: ST_TO_ADDR
3627: GO 3654
// global_units := Replace ( global_units , cl , result ) ;
3629: LD_ADDR_LOC 2
3633: PUSH
3634: LD_LOC 2
3638: PPUSH
3639: LD_VAR 0 2
3643: PPUSH
3644: LD_VAR 0 7
3648: PPUSH
3649: CALL_OW 1
3653: ST_TO_ADDR
// end ;
3654: LD_VAR 0 7
3658: RET
// function prepare_mastodonts ( n ) ; var i ; begin
3659: LD_INT 0
3661: PPUSH
3662: PPUSH
// uc_side := 0 ;
3663: LD_ADDR_OWVAR 20
3667: PUSH
3668: LD_INT 0
3670: ST_TO_ADDR
// uc_nation := 0 ;
3671: LD_ADDR_OWVAR 21
3675: PUSH
3676: LD_INT 0
3678: ST_TO_ADDR
// vc_chassis := 31 ;
3679: LD_ADDR_OWVAR 37
3683: PUSH
3684: LD_INT 31
3686: ST_TO_ADDR
// vc_control := control_rider ;
3687: LD_ADDR_OWVAR 38
3691: PUSH
3692: LD_INT 4
3694: ST_TO_ADDR
// for i = 1 to n do
3695: LD_ADDR_VAR 0 3
3699: PUSH
3700: DOUBLE
3701: LD_INT 1
3703: DEC
3704: ST_TO_ADDR
3705: LD_VAR 0 1
3709: PUSH
3710: FOR_TO
3711: IFFALSE 3730
// PlaceUnitArea ( CreateVehicle , MastodontSpawn , false ) ;
3713: CALL_OW 45
3717: PPUSH
3718: LD_INT 15
3720: PPUSH
3721: LD_INT 0
3723: PPUSH
3724: CALL_OW 49
3728: GO 3710
3730: POP
3731: POP
// end ;
3732: LD_VAR 0 2
3736: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3737: LD_INT 0
3739: PPUSH
3740: PPUSH
3741: PPUSH
3742: PPUSH
3743: PPUSH
3744: PPUSH
3745: PPUSH
3746: PPUSH
3747: PPUSH
// pos := Side_Positions [ side ] ;
3748: LD_ADDR_VAR 0 3
3752: PUSH
3753: LD_EXP 18
3757: PUSH
3758: LD_VAR 0 1
3762: ARRAY
3763: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3764: LD_ADDR_OWVAR 21
3768: PUSH
3769: LD_EXP 19
3773: PUSH
3774: LD_VAR 0 1
3778: ARRAY
3779: ST_TO_ADDR
// uc_side := side ;
3780: LD_ADDR_OWVAR 20
3784: PUSH
3785: LD_VAR 0 1
3789: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3790: LD_ADDR_VAR 0 4
3794: PUSH
3795: LD_EXP 22
3799: PUSH
3800: LD_VAR 0 3
3804: ARRAY
3805: PUSH
3806: LD_INT 1
3808: ARRAY
3809: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3810: LD_ADDR_VAR 0 5
3814: PUSH
3815: LD_EXP 22
3819: PUSH
3820: LD_VAR 0 3
3824: ARRAY
3825: PUSH
3826: LD_INT 2
3828: ARRAY
3829: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3830: LD_ADDR_VAR 0 6
3834: PUSH
3835: LD_EXP 22
3839: PUSH
3840: LD_VAR 0 3
3844: ARRAY
3845: PUSH
3846: LD_INT 3
3848: ARRAY
3849: ST_TO_ADDR
// if is_depot then
3850: LD_EXP 3
3854: IFFALSE 3987
// begin bc_type = b_depot ;
3856: LD_ADDR_OWVAR 42
3860: PUSH
3861: LD_INT 0
3863: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3864: LD_ADDR_VAR 0 10
3868: PUSH
3869: LD_VAR 0 4
3873: PPUSH
3874: LD_VAR 0 5
3878: PPUSH
3879: LD_VAR 0 6
3883: PPUSH
3884: CALL_OW 47
3888: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3889: LD_VAR 0 10
3893: PPUSH
3894: LD_STRING @
3896: PUSH
3897: LD_VAR 0 1
3901: STR
3902: PPUSH
3903: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3907: LD_VAR 0 10
3911: PPUSH
3912: CALL_OW 274
3916: PPUSH
3917: LD_INT 1
3919: PPUSH
3920: LD_EXP 8
3924: PUSH
3925: LD_INT 1
3927: ARRAY
3928: PPUSH
3929: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3933: LD_VAR 0 10
3937: PPUSH
3938: CALL_OW 274
3942: PPUSH
3943: LD_INT 2
3945: PPUSH
3946: LD_EXP 8
3950: PUSH
3951: LD_INT 2
3953: ARRAY
3954: PPUSH
3955: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3959: LD_VAR 0 10
3963: PPUSH
3964: CALL_OW 274
3968: PPUSH
3969: LD_INT 3
3971: PPUSH
3972: LD_EXP 8
3976: PUSH
3977: LD_INT 3
3979: ARRAY
3980: PPUSH
3981: CALL_OW 277
// end else
3985: GO 4131
// begin for i := 1 to 3 do
3987: LD_ADDR_VAR 0 7
3991: PUSH
3992: DOUBLE
3993: LD_INT 1
3995: DEC
3996: ST_TO_ADDR
3997: LD_INT 3
3999: PUSH
4000: FOR_TO
4001: IFFALSE 4129
// begin r := starting_resources [ i ] ;
4003: LD_ADDR_VAR 0 8
4007: PUSH
4008: LD_EXP 8
4012: PUSH
4013: LD_VAR 0 7
4017: ARRAY
4018: ST_TO_ADDR
// while r >= 10 do
4019: LD_VAR 0 8
4023: PUSH
4024: LD_INT 10
4026: GREATEREQUAL
4027: IFFALSE 4127
// if r > 50 then
4029: LD_VAR 0 8
4033: PUSH
4034: LD_INT 50
4036: GREATER
4037: IFFALSE 4083
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
4039: LD_VAR 0 7
4043: PPUSH
4044: LD_INT 5
4046: PPUSH
4047: LD_VAR 0 4
4051: PPUSH
4052: LD_VAR 0 5
4056: PPUSH
4057: LD_INT 4
4059: PPUSH
4060: LD_INT 0
4062: PPUSH
4063: CALL_OW 60
// r := r - 50 ;
4067: LD_ADDR_VAR 0 8
4071: PUSH
4072: LD_VAR 0 8
4076: PUSH
4077: LD_INT 50
4079: MINUS
4080: ST_TO_ADDR
// end else
4081: GO 4125
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
4083: LD_VAR 0 7
4087: PPUSH
4088: LD_VAR 0 8
4092: PUSH
4093: LD_INT 10
4095: DIV
4096: PPUSH
4097: LD_VAR 0 4
4101: PPUSH
4102: LD_VAR 0 5
4106: PPUSH
4107: LD_INT 4
4109: PPUSH
4110: LD_INT 0
4112: PPUSH
4113: CALL_OW 60
// r := 0 ;
4117: LD_ADDR_VAR 0 8
4121: PUSH
4122: LD_INT 0
4124: ST_TO_ADDR
// end ;
4125: GO 4019
// end ;
4127: GO 4000
4129: POP
4130: POP
// end ; for r in starting_crates do
4131: LD_ADDR_VAR 0 8
4135: PUSH
4136: LD_EXP 7
4140: PUSH
4141: FOR_IN
4142: IFFALSE 4174
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
4144: LD_INT 1
4146: PPUSH
4147: LD_INT 5
4149: PPUSH
4150: LD_VAR 0 4
4154: PPUSH
4155: LD_VAR 0 5
4159: PPUSH
4160: LD_VAR 0 8
4164: PPUSH
4165: LD_INT 0
4167: PPUSH
4168: CALL_OW 60
4172: GO 4141
4174: POP
4175: POP
// if def_morale_flags then
4176: LD_EXP 43
4180: IFFALSE 4319
// begin x := start_def [ pos ] [ 1 ] ;
4182: LD_ADDR_VAR 0 4
4186: PUSH
4187: LD_EXP 24
4191: PUSH
4192: LD_VAR 0 3
4196: ARRAY
4197: PUSH
4198: LD_INT 1
4200: ARRAY
4201: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4202: LD_ADDR_VAR 0 5
4206: PUSH
4207: LD_EXP 24
4211: PUSH
4212: LD_VAR 0 3
4216: ARRAY
4217: PUSH
4218: LD_INT 2
4220: ARRAY
4221: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4222: LD_VAR 0 4
4226: PPUSH
4227: LD_VAR 0 5
4231: PPUSH
4232: LD_INT 12
4234: PPUSH
4235: LD_INT 2
4237: PPUSH
4238: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4242: LD_ADDR_EXP 29
4246: PUSH
4247: LD_EXP 29
4251: PUSH
4252: LD_VAR 0 1
4256: PPUSH
4257: LD_VAR 0 4
4261: PPUSH
4262: LD_VAR 0 5
4266: PPUSH
4267: LD_INT 1
4269: PUSH
4270: LD_INT 100
4272: PUSH
4273: EMPTY
4274: LIST
4275: LIST
4276: PUSH
4277: LD_INT 2
4279: PUSH
4280: LD_INT 50
4282: PUSH
4283: EMPTY
4284: LIST
4285: LIST
4286: PUSH
4287: LD_INT 3
4289: PUSH
4290: LD_INT 20
4292: PUSH
4293: EMPTY
4294: LIST
4295: LIST
4296: PUSH
4297: LD_INT 20
4299: PUSH
4300: LD_INT 100
4302: PUSH
4303: EMPTY
4304: LIST
4305: LIST
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: PPUSH
4313: CALL_OW 418
4317: ADD
4318: ST_TO_ADDR
// end ; commander := true ;
4319: LD_ADDR_LOC 1
4323: PUSH
4324: LD_INT 1
4326: ST_TO_ADDR
// soldiers_created := 0 ;
4327: LD_ADDR_LOC 4
4331: PUSH
4332: LD_INT 0
4334: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4335: LD_ADDR_VAR 0 7
4339: PUSH
4340: DOUBLE
4341: LD_INT 1
4343: DEC
4344: ST_TO_ADDR
4345: LD_EXP 4
4349: PUSH
4350: FOR_TO
4351: IFFALSE 4504
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4353: LD_ADDR_VAR 0 4
4357: PUSH
4358: LD_EXP 23
4362: PUSH
4363: LD_VAR 0 3
4367: ARRAY
4368: PUSH
4369: LD_VAR 0 7
4373: ARRAY
4374: PUSH
4375: LD_INT 1
4377: ARRAY
4378: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4379: LD_ADDR_VAR 0 5
4383: PUSH
4384: LD_EXP 23
4388: PUSH
4389: LD_VAR 0 3
4393: ARRAY
4394: PUSH
4395: LD_VAR 0 7
4399: ARRAY
4400: PUSH
4401: LD_INT 2
4403: ARRAY
4404: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4405: LD_ADDR_VAR 0 6
4409: PUSH
4410: LD_EXP 23
4414: PUSH
4415: LD_VAR 0 3
4419: ARRAY
4420: PUSH
4421: LD_VAR 0 7
4425: ARRAY
4426: PUSH
4427: LD_INT 3
4429: ARRAY
4430: ST_TO_ADDR
// bc_type := b_breastwork ;
4431: LD_ADDR_OWVAR 42
4435: PUSH
4436: LD_INT 31
4438: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4439: LD_ADDR_VAR 0 9
4443: PUSH
4444: LD_VAR 0 4
4448: PPUSH
4449: LD_VAR 0 5
4453: PPUSH
4454: LD_VAR 0 6
4458: PPUSH
4459: CALL_OW 47
4463: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4464: LD_INT 1
4466: PPUSH
4467: LD_INT 1
4469: PPUSH
4470: LD_INT 0
4472: PPUSH
4473: LD_INT 0
4475: PPUSH
4476: LD_INT 0
4478: PPUSH
4479: LD_VAR 0 9
4483: PPUSH
4484: CALL 3090 0 6
// soldiers_created := soldiers_created + 1 ;
4488: LD_ADDR_LOC 4
4492: PUSH
4493: LD_LOC 4
4497: PUSH
4498: LD_INT 1
4500: PLUS
4501: ST_TO_ADDR
// end ;
4502: GO 4350
4504: POP
4505: POP
// x := start_def [ pos ] [ 1 ] ;
4506: LD_ADDR_VAR 0 4
4510: PUSH
4511: LD_EXP 24
4515: PUSH
4516: LD_VAR 0 3
4520: ARRAY
4521: PUSH
4522: LD_INT 1
4524: ARRAY
4525: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4526: LD_ADDR_VAR 0 5
4530: PUSH
4531: LD_EXP 24
4535: PUSH
4536: LD_VAR 0 3
4540: ARRAY
4541: PUSH
4542: LD_INT 2
4544: ARRAY
4545: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4546: LD_LOC 8
4550: PUSH
4551: LD_EXP 4
4555: MINUS
4556: PPUSH
4557: LD_INT 1
4559: PPUSH
4560: LD_VAR 0 4
4564: PPUSH
4565: LD_VAR 0 5
4569: PPUSH
4570: LD_INT 5
4572: PPUSH
4573: LD_INT 0
4575: PPUSH
4576: CALL 3090 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4580: LD_LOC 5
4584: PPUSH
4585: LD_INT 2
4587: PPUSH
4588: LD_VAR 0 4
4592: PPUSH
4593: LD_VAR 0 5
4597: PPUSH
4598: LD_INT 5
4600: PPUSH
4601: LD_INT 0
4603: PPUSH
4604: CALL 3090 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4608: LD_LOC 7
4612: PPUSH
4613: LD_INT 3
4615: PPUSH
4616: LD_VAR 0 4
4620: PPUSH
4621: LD_VAR 0 5
4625: PPUSH
4626: LD_INT 5
4628: PPUSH
4629: LD_INT 0
4631: PPUSH
4632: CALL 3090 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4636: LD_LOC 6
4640: PPUSH
4641: LD_INT 4
4643: PPUSH
4644: LD_VAR 0 4
4648: PPUSH
4649: LD_VAR 0 5
4653: PPUSH
4654: LD_INT 5
4656: PPUSH
4657: LD_INT 0
4659: PPUSH
4660: CALL 3090 0 6
// if def_siberite_detection then
4664: LD_EXP 44
4668: IFFALSE 4685
// SetTech ( tech_SibDet , side , state_researched ) ;
4670: LD_INT 20
4672: PPUSH
4673: LD_VAR 0 1
4677: PPUSH
4678: LD_INT 2
4680: PPUSH
4681: CALL_OW 322
// if def_siberite_bomb = 1 then
4685: LD_EXP 47
4689: PUSH
4690: LD_INT 1
4692: EQUAL
4693: IFFALSE 4727
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4695: LD_INT 25
4697: PPUSH
4698: LD_VAR 0 1
4702: PPUSH
4703: LD_INT 1
4705: PPUSH
4706: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4710: LD_INT 73
4712: PPUSH
4713: LD_VAR 0 1
4717: PPUSH
4718: LD_INT 1
4720: PPUSH
4721: CALL_OW 322
// end else
4725: GO 4757
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4727: LD_INT 25
4729: PPUSH
4730: LD_VAR 0 1
4734: PPUSH
4735: LD_INT 0
4737: PPUSH
4738: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4742: LD_INT 73
4744: PPUSH
4745: LD_VAR 0 1
4749: PPUSH
4750: LD_INT 0
4752: PPUSH
4753: CALL_OW 322
// end ; global_defined := true ;
4757: LD_ADDR_LOC 3
4761: PUSH
4762: LD_INT 1
4764: ST_TO_ADDR
// end ;
4765: LD_VAR 0 2
4769: RET
// every 0 0$1 do
4770: GO 4772
4772: DISABLE
// if ( def_siberite_bomb > 1 ) then
4773: LD_EXP 47
4777: PUSH
4778: LD_INT 1
4780: GREATER
4781: IFFALSE 4796
// begin wait ( siberite_bomb_Delay ) ;
4783: LD_EXP 15
4787: PPUSH
4788: CALL_OW 67
// EnableSibFiss ;
4792: CALL 4797 0 0
// end ;
4796: END
// function EnableSibFiss ; var i ; begin
4797: LD_INT 0
4799: PPUSH
4800: PPUSH
// for i := 1 to 8 do
4801: LD_ADDR_VAR 0 2
4805: PUSH
4806: DOUBLE
4807: LD_INT 1
4809: DEC
4810: ST_TO_ADDR
4811: LD_INT 8
4813: PUSH
4814: FOR_TO
4815: IFFALSE 4861
// if Side_Positions [ i ] then
4817: LD_EXP 18
4821: PUSH
4822: LD_VAR 0 2
4826: ARRAY
4827: IFFALSE 4859
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4829: LD_INT 25
4831: PPUSH
4832: LD_VAR 0 2
4836: PPUSH
4837: LD_INT 1
4839: PPUSH
4840: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4844: LD_INT 73
4846: PPUSH
4847: LD_VAR 0 2
4851: PPUSH
4852: LD_INT 1
4854: PPUSH
4855: CALL_OW 322
// end ;
4859: GO 4814
4861: POP
4862: POP
// end ;
4863: LD_VAR 0 1
4867: RET
// function prepare_sides ; var i ; begin
4868: LD_INT 0
4870: PPUSH
4871: PPUSH
// global_units := [ ] ;
4872: LD_ADDR_LOC 2
4876: PUSH
4877: EMPTY
4878: ST_TO_ADDR
// global_defined := false ;
4879: LD_ADDR_LOC 3
4883: PUSH
4884: LD_INT 0
4886: ST_TO_ADDR
// CountClassMembers ;
4887: CALL 4966 0 0
// for i := 1 to 8 do
4891: LD_ADDR_VAR 0 2
4895: PUSH
4896: DOUBLE
4897: LD_INT 1
4899: DEC
4900: ST_TO_ADDR
4901: LD_INT 8
4903: PUSH
4904: FOR_TO
4905: IFFALSE 4959
// if Side_Positions [ i ] then
4907: LD_EXP 18
4911: PUSH
4912: LD_VAR 0 2
4916: ARRAY
4917: IFFALSE 4957
// begin prepare_side ( i ) ;
4919: LD_VAR 0 2
4923: PPUSH
4924: CALL 3737 0 1
// if ( Game_Type = 12 ) and mastodont > 0 then
4928: LD_EXP 33
4932: PUSH
4933: LD_INT 12
4935: EQUAL
4936: PUSH
4937: LD_EXP 31
4941: PUSH
4942: LD_INT 0
4944: GREATER
4945: AND
4946: IFFALSE 4957
// prepare_mastodonts ( mastodont ) ;
4948: LD_EXP 31
4952: PPUSH
4953: CALL 3659 0 1
// end ;
4957: GO 4904
4959: POP
4960: POP
// end ;
4961: LD_VAR 0 1
4965: RET
// function CountClassMembers ; var Mode ; begin
4966: LD_INT 0
4968: PPUSH
4969: PPUSH
// if No_Mechs then
4970: LD_EXP 51
4974: IFFALSE 4986
// Mode := 2 else
4976: LD_ADDR_VAR 0 2
4980: PUSH
4981: LD_INT 2
4983: ST_TO_ADDR
4984: GO 4994
// Mode := 1 ;
4986: LD_ADDR_VAR 0 2
4990: PUSH
4991: LD_INT 1
4993: ST_TO_ADDR
// neng := number_of_people ;
4994: LD_ADDR_LOC 5
4998: PUSH
4999: LD_EXP 5
5003: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
5004: LD_ADDR_LOC 8
5008: PUSH
5009: LD_LOC 5
5013: PUSH
5014: LD_INT 4
5016: PUSH
5017: LD_INT 3
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: PUSH
5024: LD_VAR 0 2
5028: ARRAY
5029: DIV
5030: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
5031: LD_LOC 8
5035: PUSH
5036: LD_EXP 4
5040: LESS
5041: IFFALSE 5053
// nsol := number_of_breastworks ;
5043: LD_ADDR_LOC 8
5047: PUSH
5048: LD_EXP 4
5052: ST_TO_ADDR
// neng := neng - nsol ;
5053: LD_ADDR_LOC 5
5057: PUSH
5058: LD_LOC 5
5062: PUSH
5063: LD_LOC 8
5067: MINUS
5068: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
5069: LD_ADDR_LOC 6
5073: PUSH
5074: LD_LOC 5
5078: PUSH
5079: LD_INT 3
5081: PUSH
5082: LD_INT 2
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: PUSH
5089: LD_VAR 0 2
5093: ARRAY
5094: DIV
5095: ST_TO_ADDR
// if ( nsci < 1 ) then
5096: LD_LOC 6
5100: PUSH
5101: LD_INT 1
5103: LESS
5104: IFFALSE 5114
// nsci := 1 ;
5106: LD_ADDR_LOC 6
5110: PUSH
5111: LD_INT 1
5113: ST_TO_ADDR
// neng := neng - nsci ;
5114: LD_ADDR_LOC 5
5118: PUSH
5119: LD_LOC 5
5123: PUSH
5124: LD_LOC 6
5128: MINUS
5129: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5130: LD_ADDR_LOC 7
5134: PUSH
5135: LD_LOC 5
5139: PUSH
5140: LD_INT 2
5142: DIV
5143: PUSH
5144: LD_INT 0
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: PUSH
5151: LD_VAR 0 2
5155: ARRAY
5156: ST_TO_ADDR
// neng := neng - nmech ;
5157: LD_ADDR_LOC 5
5161: PUSH
5162: LD_LOC 5
5166: PUSH
5167: LD_LOC 7
5171: MINUS
5172: ST_TO_ADDR
// if ( neng < 1 ) then
5173: LD_LOC 5
5177: PUSH
5178: LD_INT 1
5180: LESS
5181: IFFALSE 5191
// neng := 1 ;
5183: LD_ADDR_LOC 5
5187: PUSH
5188: LD_INT 1
5190: ST_TO_ADDR
// end ;
5191: LD_VAR 0 1
5195: RET
// function Init_Win_Condition ; begin
5196: LD_INT 0
5198: PPUSH
// if Team_Game then
5199: LD_EXP 20
5203: IFFALSE 5210
// enable ( 98 ) else
5205: LD_INT 98
5207: ENABLE_MARKED
5208: GO 5213
// enable ( 99 ) ;
5210: LD_INT 99
5212: ENABLE_MARKED
// case Game_Type of 3 :
5213: LD_EXP 33
5217: PUSH
5218: LD_INT 3
5220: DOUBLE
5221: EQUAL
5222: IFTRUE 5226
5224: GO 5232
5226: POP
// enable ( 100 ) ; end ;
5227: LD_INT 100
5229: ENABLE_MARKED
5230: GO 5233
5232: POP
// end ;
5233: LD_VAR 0 1
5237: RET
// starting begin disable ( 98 ) ;
5238: LD_INT 98
5240: DISABLE_MARKED
// disable ( 99 ) ;
5241: LD_INT 99
5243: DISABLE_MARKED
// disable ( 100 ) ;
5244: LD_INT 100
5246: DISABLE_MARKED
// disable ( 200 ) ;
5247: LD_INT 200
5249: DISABLE_MARKED
// disable ( 400 ) ;
5250: LD_INT 400
5252: DISABLE_MARKED
// disable ( 401 ) ;
5253: LD_INT 401
5255: DISABLE_MARKED
// disable ( 600 ) ;
5256: LD_INT 600
5258: DISABLE_MARKED
// mp_selectmsg := true ;
5259: LD_ADDR_OWVAR 13
5263: PUSH
5264: LD_INT 1
5266: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5267: CALL 0 0 0
// init_map ;
5271: CALL 1707 0 0
// init_respawning ;
5275: CALL 6525 0 0
// set_shared_visions_and_alliances ;
5279: CALL 2802 0 0
// prepare_sides ;
5283: CALL 4868 0 0
// InitLimits ;
5287: CALL 12630 0 0
// ShowTimer ;
5291: CALL 13567 0 0
// if ( Game_Type = 4 ) then
5295: LD_EXP 33
5299: PUSH
5300: LD_INT 4
5302: EQUAL
5303: IFFALSE 5309
// InitBloodGods ;
5305: CALL 10172 0 0
// music_nat := Side_Nations [ your_side ] ;
5309: LD_ADDR_OWVAR 71
5313: PUSH
5314: LD_EXP 19
5318: PUSH
5319: LD_OWVAR 2
5323: ARRAY
5324: ST_TO_ADDR
// if IAmSpec then
5325: CALL_OW 531
5329: IFFALSE 5365
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
5331: LD_INT 0
5333: PPUSH
5334: LD_INT 0
5336: PPUSH
5337: LD_OWVAR 2
5341: PPUSH
5342: LD_INT 32767
5344: NEG
5345: PPUSH
5346: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
5350: LD_INT 104
5352: PPUSH
5353: LD_INT 69
5355: PPUSH
5356: CALL_OW 86
// enable ( 400 ) ;
5360: LD_INT 400
5362: ENABLE_MARKED
// end else
5363: GO 5419
// begin ResetFog ;
5365: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5369: LD_EXP 24
5373: PUSH
5374: LD_EXP 18
5378: PUSH
5379: LD_OWVAR 2
5383: ARRAY
5384: ARRAY
5385: PUSH
5386: LD_INT 1
5388: ARRAY
5389: PPUSH
5390: LD_EXP 24
5394: PUSH
5395: LD_EXP 18
5399: PUSH
5400: LD_OWVAR 2
5404: ARRAY
5405: ARRAY
5406: PUSH
5407: LD_INT 2
5409: ARRAY
5410: PPUSH
5411: CALL_OW 86
// Init_Win_Condition ;
5415: CALL 5196 0 0
// end ; if def_builduptime then
5419: LD_EXP 48
5423: IFFALSE 5429
// BeginBuildUp ;
5425: CALL 8776 0 0
// end ; end_of_file
5429: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5430: GO 5432
5432: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5433: LD_INT 4
5435: PPUSH
5436: LD_INT 5
5438: PPUSH
5439: CALL_OW 12
5443: PPUSH
5444: LD_INT 1
5446: PPUSH
5447: CALL_OW 57
// enable ;
5451: ENABLE
// end ;
5452: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5453: GO 5455
5455: DISABLE
5456: LD_INT 0
5458: PPUSH
5459: PPUSH
// begin case tick of 1 .. 1 1$0 :
5460: LD_OWVAR 1
5464: PUSH
5465: LD_INT 1
5467: DOUBLE
5468: GREATEREQUAL
5469: IFFALSE 5477
5471: LD_INT 2100
5473: DOUBLE
5474: LESSEQUAL
5475: IFTRUE 5479
5477: GO 5507
5479: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5480: LD_EXP 9
5484: PUSH
5485: LD_INT 100
5487: DIVREAL
5488: PUSH
5489: LD_INT 350
5491: PPUSH
5492: LD_INT 1050
5494: PPUSH
5495: CALL_OW 12
5499: MUL
5500: PPUSH
5501: CALL_OW 67
5505: GO 5809
5507: LD_INT 2100
5509: PUSH
5510: LD_INT 1
5512: PLUS
5513: DOUBLE
5514: GREATEREQUAL
5515: IFFALSE 5523
5517: LD_INT 10500
5519: DOUBLE
5520: LESSEQUAL
5521: IFTRUE 5525
5523: GO 5553
5525: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5526: LD_EXP 9
5530: PUSH
5531: LD_INT 100
5533: DIVREAL
5534: PUSH
5535: LD_INT 1050
5537: PPUSH
5538: LD_INT 1575
5540: PPUSH
5541: CALL_OW 12
5545: MUL
5546: PPUSH
5547: CALL_OW 67
5551: GO 5809
5553: LD_INT 10500
5555: PUSH
5556: LD_INT 1
5558: PLUS
5559: DOUBLE
5560: GREATEREQUAL
5561: IFFALSE 5569
5563: LD_INT 21000
5565: DOUBLE
5566: LESSEQUAL
5567: IFTRUE 5571
5569: GO 5599
5571: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5572: LD_EXP 9
5576: PUSH
5577: LD_INT 100
5579: DIVREAL
5580: PUSH
5581: LD_INT 1575
5583: PPUSH
5584: LD_INT 2100
5586: PPUSH
5587: CALL_OW 12
5591: MUL
5592: PPUSH
5593: CALL_OW 67
5597: GO 5809
5599: LD_INT 21000
5601: PUSH
5602: LD_INT 1
5604: PLUS
5605: DOUBLE
5606: GREATEREQUAL
5607: IFFALSE 5615
5609: LD_INT 42000
5611: DOUBLE
5612: LESSEQUAL
5613: IFTRUE 5617
5615: GO 5645
5617: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5618: LD_EXP 9
5622: PUSH
5623: LD_INT 100
5625: DIVREAL
5626: PUSH
5627: LD_INT 2100
5629: PPUSH
5630: LD_INT 2625
5632: PPUSH
5633: CALL_OW 12
5637: MUL
5638: PPUSH
5639: CALL_OW 67
5643: GO 5809
5645: LD_INT 42000
5647: PUSH
5648: LD_INT 1
5650: PLUS
5651: DOUBLE
5652: GREATEREQUAL
5653: IFFALSE 5661
5655: LD_INT 63000
5657: DOUBLE
5658: LESSEQUAL
5659: IFTRUE 5663
5661: GO 5691
5663: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5664: LD_EXP 9
5668: PUSH
5669: LD_INT 100
5671: DIVREAL
5672: PUSH
5673: LD_INT 2625
5675: PPUSH
5676: LD_INT 3150
5678: PPUSH
5679: CALL_OW 12
5683: MUL
5684: PPUSH
5685: CALL_OW 67
5689: GO 5809
5691: LD_INT 63000
5693: PUSH
5694: LD_INT 1
5696: PLUS
5697: DOUBLE
5698: GREATEREQUAL
5699: IFFALSE 5707
5701: LD_INT 105000
5703: DOUBLE
5704: LESSEQUAL
5705: IFTRUE 5709
5707: GO 5737
5709: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5710: LD_EXP 9
5714: PUSH
5715: LD_INT 100
5717: DIVREAL
5718: PUSH
5719: LD_INT 3150
5721: PPUSH
5722: LD_INT 3675
5724: PPUSH
5725: CALL_OW 12
5729: MUL
5730: PPUSH
5731: CALL_OW 67
5735: GO 5809
5737: LD_INT 105000
5739: PUSH
5740: LD_INT 1
5742: PLUS
5743: DOUBLE
5744: GREATEREQUAL
5745: IFFALSE 5753
5747: LD_INT 630000
5749: DOUBLE
5750: LESSEQUAL
5751: IFTRUE 5755
5753: GO 5783
5755: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
5756: LD_EXP 9
5760: PUSH
5761: LD_INT 100
5763: DIVREAL
5764: PUSH
5765: LD_INT 3675
5767: PPUSH
5768: LD_INT 4200
5770: PPUSH
5771: CALL_OW 12
5775: MUL
5776: PPUSH
5777: CALL_OW 67
5781: GO 5809
5783: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5784: LD_EXP 9
5788: PUSH
5789: LD_INT 100
5791: DIVREAL
5792: PUSH
5793: LD_INT 4200
5795: PPUSH
5796: LD_INT 5250
5798: PPUSH
5799: CALL_OW 12
5803: MUL
5804: PPUSH
5805: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5809: LD_ADDR_VAR 0 2
5813: PUSH
5814: LD_INT 3
5816: PPUSH
5817: LD_INT 5
5819: PPUSH
5820: CALL_OW 12
5824: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5825: LD_ADDR_VAR 0 1
5829: PUSH
5830: LD_EXP 18
5834: PUSH
5835: LD_INT 0
5837: PUSH
5838: EMPTY
5839: LIST
5840: DIFF
5841: PUSH
5842: FOR_IN
5843: IFFALSE 5892
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5845: LD_VAR 0 2
5849: PPUSH
5850: LD_EXP 24
5854: PUSH
5855: LD_VAR 0 1
5859: ARRAY
5860: PUSH
5861: LD_INT 1
5863: ARRAY
5864: PPUSH
5865: LD_EXP 24
5869: PUSH
5870: LD_VAR 0 1
5874: ARRAY
5875: PUSH
5876: LD_INT 2
5878: ARRAY
5879: PPUSH
5880: LD_INT 20
5882: PPUSH
5883: LD_INT 1
5885: PPUSH
5886: CALL_OW 56
5890: GO 5842
5892: POP
5893: POP
// enable ;
5894: ENABLE
// end ; end_of_file
5895: PPOPN 2
5897: END
// var _apemenIncrement , _apemenMaximum , _apemenSkillLevel , _apemenThreshold , _isSpawning , _wildApemenAmount ; every 0 0$15 do var i ;
5898: GO 5900
5900: DISABLE
5901: LD_INT 0
5903: PPUSH
// begin _apemenIncrement := 0 ;
5904: LD_ADDR_LOC 9
5908: PUSH
5909: LD_INT 0
5911: ST_TO_ADDR
// _apemenSkillLevel := 0 ;
5912: LD_ADDR_LOC 11
5916: PUSH
5917: LD_INT 0
5919: ST_TO_ADDR
// _isSpawning := true ;
5920: LD_ADDR_LOC 13
5924: PUSH
5925: LD_INT 1
5927: ST_TO_ADDR
// _wildApemenAmount := 0 ;
5928: LD_ADDR_LOC 14
5932: PUSH
5933: LD_INT 0
5935: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5936: LD_ADDR_VAR 0 1
5940: PUSH
5941: LD_EXP 18
5945: PUSH
5946: LD_INT 0
5948: PUSH
5949: EMPTY
5950: LIST
5951: DIFF
5952: PUSH
5953: FOR_IN
5954: IFFALSE 5972
// _apemenIncrement := _apemenIncrement + 1 ;
5956: LD_ADDR_LOC 9
5960: PUSH
5961: LD_LOC 9
5965: PUSH
5966: LD_INT 1
5968: PLUS
5969: ST_TO_ADDR
5970: GO 5953
5972: POP
5973: POP
// _apemenMaximum := _apemenIncrement * amount_of_apemen ;
5974: LD_ADDR_LOC 10
5978: PUSH
5979: LD_LOC 9
5983: PUSH
5984: LD_EXP 11
5988: MUL
5989: ST_TO_ADDR
// _apemenThreshold := _apemenMaximum / 2 ;
5990: LD_ADDR_LOC 12
5994: PUSH
5995: LD_LOC 10
5999: PUSH
6000: LD_INT 2
6002: DIVREAL
6003: ST_TO_ADDR
// prepare_apemen ;
6004: CALL 6096 0 0
// end ;
6008: PPOPN 1
6010: END
// on ApemanTamed ( tamedApeman , tamerUnit ) do begin CheckApemenAmount ;
6011: CALL 6018 0 0
// end ;
6015: PPOPN 2
6017: END
// export function CheckApemenAmount ; begin
6018: LD_INT 0
6020: PPUSH
// _wildApemenAmount := _wildApemenAmount - 1 ;
6021: LD_ADDR_LOC 14
6025: PUSH
6026: LD_LOC 14
6030: PUSH
6031: LD_INT 1
6033: MINUS
6034: ST_TO_ADDR
// if _isSpawning then
6035: LD_LOC 13
6039: IFFALSE 6043
// exit ;
6041: GO 6091
// if _wildApemenAmount <= ( _apemenThreshold ) then
6043: LD_LOC 14
6047: PUSH
6048: LD_LOC 12
6052: LESSEQUAL
6053: IFFALSE 6091
// begin if _apemenSkillLevel < 8 then
6055: LD_LOC 11
6059: PUSH
6060: LD_INT 8
6062: LESS
6063: IFFALSE 6079
// _apemenSkillLevel := _apemenSkillLevel + 1 ;
6065: LD_ADDR_LOC 11
6069: PUSH
6070: LD_LOC 11
6074: PUSH
6075: LD_INT 1
6077: PLUS
6078: ST_TO_ADDR
// _isSpawning := true ;
6079: LD_ADDR_LOC 13
6083: PUSH
6084: LD_INT 1
6086: ST_TO_ADDR
// prepare_apemen ;
6087: CALL 6096 0 0
// end ; end ;
6091: LD_VAR 0 1
6095: RET
// function prepare_apemen ; var i ; begin
6096: LD_INT 0
6098: PPUSH
6099: PPUSH
// if not amount_of_apemen then
6100: LD_EXP 11
6104: NOT
6105: IFFALSE 6109
// exit ;
6107: GO 6338
// repeat Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
6109: LD_INT 1050
6111: PPUSH
6112: LD_INT 3150
6114: PPUSH
6115: CALL_OW 12
6119: PPUSH
6120: CALL_OW 67
// apeman_init ;
6124: CALL 6343 0 0
// for i in ( Side_Positions diff [ 0 ] ) do
6128: LD_ADDR_VAR 0 2
6132: PUSH
6133: LD_EXP 18
6137: PUSH
6138: LD_INT 0
6140: PUSH
6141: EMPTY
6142: LIST
6143: DIFF
6144: PUSH
6145: FOR_IN
6146: IFFALSE 6300
// begin if i = 1 then
6148: LD_VAR 0 2
6152: PUSH
6153: LD_INT 1
6155: EQUAL
6156: IFFALSE 6173
// PlaceUnitArea ( CreateHuman , Base1ApeArea , false ) ;
6158: CALL_OW 44
6162: PPUSH
6163: LD_INT 1
6165: PPUSH
6166: LD_INT 0
6168: PPUSH
6169: CALL_OW 49
// if i = 2 then
6173: LD_VAR 0 2
6177: PUSH
6178: LD_INT 2
6180: EQUAL
6181: IFFALSE 6198
// PlaceUnitArea ( CreateHuman , Base2ApeArea , false ) ;
6183: CALL_OW 44
6187: PPUSH
6188: LD_INT 2
6190: PPUSH
6191: LD_INT 0
6193: PPUSH
6194: CALL_OW 49
// if i = 3 then
6198: LD_VAR 0 2
6202: PUSH
6203: LD_INT 3
6205: EQUAL
6206: IFFALSE 6223
// PlaceUnitArea ( CreateHuman , Base3ApeArea , false ) ;
6208: CALL_OW 44
6212: PPUSH
6213: LD_INT 3
6215: PPUSH
6216: LD_INT 0
6218: PPUSH
6219: CALL_OW 49
// if i = 4 then
6223: LD_VAR 0 2
6227: PUSH
6228: LD_INT 4
6230: EQUAL
6231: IFFALSE 6248
// PlaceUnitArea ( CreateHuman , Base4ApeArea , false ) ;
6233: CALL_OW 44
6237: PPUSH
6238: LD_INT 4
6240: PPUSH
6241: LD_INT 0
6243: PPUSH
6244: CALL_OW 49
// if i = 5 then
6248: LD_VAR 0 2
6252: PUSH
6253: LD_INT 5
6255: EQUAL
6256: IFFALSE 6273
// PlaceUnitArea ( CreateHuman , Base5ApeArea , false ) ;
6258: CALL_OW 44
6262: PPUSH
6263: LD_INT 5
6265: PPUSH
6266: LD_INT 0
6268: PPUSH
6269: CALL_OW 49
// if i = 6 then
6273: LD_VAR 0 2
6277: PUSH
6278: LD_INT 6
6280: EQUAL
6281: IFFALSE 6298
// PlaceUnitArea ( CreateHuman , Base6ApeArea , false ) ;
6283: CALL_OW 44
6287: PPUSH
6288: LD_INT 6
6290: PPUSH
6291: LD_INT 0
6293: PPUSH
6294: CALL_OW 49
// end ;
6298: GO 6145
6300: POP
6301: POP
// _wildApemenAmount := _wildApemenAmount + _apemenIncrement ;
6302: LD_ADDR_LOC 14
6306: PUSH
6307: LD_LOC 14
6311: PUSH
6312: LD_LOC 9
6316: PLUS
6317: ST_TO_ADDR
// until _wildApemenAmount >= _apemenMaximum ;
6318: LD_LOC 14
6322: PUSH
6323: LD_LOC 10
6327: GREATEREQUAL
6328: IFFALSE 6109
// _isSpawning := false ;
6330: LD_ADDR_LOC 13
6334: PUSH
6335: LD_INT 0
6337: ST_TO_ADDR
// end ;
6338: LD_VAR 0 1
6342: RET
// function apeman_init ; begin
6343: LD_INT 0
6345: PPUSH
// uc_side := 0 ;
6346: LD_ADDR_OWVAR 20
6350: PUSH
6351: LD_INT 0
6353: ST_TO_ADDR
// uc_nation := nation_nature ;
6354: LD_ADDR_OWVAR 21
6358: PUSH
6359: LD_INT 0
6361: ST_TO_ADDR
// hc_class := class_apeman ;
6362: LD_ADDR_OWVAR 28
6366: PUSH
6367: LD_INT 12
6369: ST_TO_ADDR
// hc_basic_skills := [ 2 , 2 , 2 , 2 ] ;
6370: LD_ADDR_OWVAR 30
6374: PUSH
6375: LD_INT 2
6377: PUSH
6378: LD_INT 2
6380: PUSH
6381: LD_INT 2
6383: PUSH
6384: LD_INT 2
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: ST_TO_ADDR
// hc_skills := [ Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel ] ;
6393: LD_ADDR_OWVAR 31
6397: PUSH
6398: LD_INT 0
6400: PPUSH
6401: LD_INT 2
6403: PPUSH
6404: CALL_OW 12
6408: PUSH
6409: LD_LOC 11
6413: PLUS
6414: PUSH
6415: LD_INT 0
6417: PPUSH
6418: LD_INT 2
6420: PPUSH
6421: CALL_OW 12
6425: PUSH
6426: LD_LOC 11
6430: PLUS
6431: PUSH
6432: LD_INT 0
6434: PPUSH
6435: LD_INT 2
6437: PPUSH
6438: CALL_OW 12
6442: PUSH
6443: LD_LOC 11
6447: PLUS
6448: PUSH
6449: LD_INT 0
6451: PPUSH
6452: LD_INT 2
6454: PPUSH
6455: CALL_OW 12
6459: PUSH
6460: LD_LOC 11
6464: PLUS
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
6472: LD_ADDR_OWVAR 29
6476: PUSH
6477: LD_INT 10
6479: PUSH
6480: LD_INT 12
6482: PUSH
6483: EMPTY
6484: LIST
6485: LIST
6486: ST_TO_ADDR
// hc_sex := sex_male ;
6487: LD_ADDR_OWVAR 27
6491: PUSH
6492: LD_INT 1
6494: ST_TO_ADDR
// hc_importance := 0 ;
6495: LD_ADDR_OWVAR 32
6499: PUSH
6500: LD_INT 0
6502: ST_TO_ADDR
// hc_agressivity := Rand ( - 20 , 20 ) ;
6503: LD_ADDR_OWVAR 35
6507: PUSH
6508: LD_INT 20
6510: NEG
6511: PPUSH
6512: LD_INT 20
6514: PPUSH
6515: CALL_OW 12
6519: ST_TO_ADDR
// end ; end_of_file
6520: LD_VAR 0 1
6524: RET
// var respawn , inqueue ; export function init_respawning ; begin
6525: LD_INT 0
6527: PPUSH
// respawn := Rand ( 1 , 8 ) ;
6528: LD_ADDR_LOC 15
6532: PUSH
6533: LD_INT 1
6535: PPUSH
6536: LD_INT 8
6538: PPUSH
6539: CALL_OW 12
6543: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6544: LD_ADDR_LOC 16
6548: PUSH
6549: LD_INT 0
6551: PUSH
6552: LD_INT 0
6554: PUSH
6555: LD_INT 0
6557: PUSH
6558: LD_INT 0
6560: PUSH
6561: LD_INT 0
6563: PUSH
6564: LD_INT 0
6566: PUSH
6567: LD_INT 0
6569: PUSH
6570: LD_INT 0
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: ST_TO_ADDR
// end ;
6583: LD_VAR 0 1
6587: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
6588: GO 6590
6590: DISABLE
6591: LD_INT 0
6593: PPUSH
6594: PPUSH
6595: PPUSH
// begin if respawning_time_max = 0 then
6596: LD_EXP 14
6600: PUSH
6601: LD_INT 0
6603: EQUAL
6604: IFFALSE 6608
// exit ;
6606: GO 7013
// if respawn = 8 then
6608: LD_LOC 15
6612: PUSH
6613: LD_INT 8
6615: EQUAL
6616: IFFALSE 6628
// respawn := 1 else
6618: LD_ADDR_LOC 15
6622: PUSH
6623: LD_INT 1
6625: ST_TO_ADDR
6626: GO 6642
// respawn := respawn + 1 ;
6628: LD_ADDR_LOC 15
6632: PUSH
6633: LD_LOC 15
6637: PUSH
6638: LD_INT 1
6640: PLUS
6641: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
6642: LD_EXP 18
6646: PUSH
6647: LD_LOC 15
6651: ARRAY
6652: PUSH
6653: LD_LOC 16
6657: PUSH
6658: LD_LOC 15
6662: ARRAY
6663: NOT
6664: AND
6665: IFFALSE 7012
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
6667: LD_ADDR_VAR 0 1
6671: PUSH
6672: LD_INT 21
6674: PUSH
6675: LD_INT 1
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: PUSH
6682: LD_INT 22
6684: PUSH
6685: LD_LOC 15
6689: PUSH
6690: EMPTY
6691: LIST
6692: LIST
6693: PUSH
6694: LD_INT 3
6696: PUSH
6697: LD_INT 23
6699: PUSH
6700: LD_INT 0
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: PUSH
6707: EMPTY
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: PPUSH
6713: CALL_OW 69
6717: ST_TO_ADDR
// if n < number_of_people then
6718: LD_VAR 0 1
6722: PUSH
6723: LD_EXP 5
6727: LESS
6728: IFFALSE 7009
// begin dep := FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , respawn ] ] ) ;
6730: LD_ADDR_VAR 0 2
6734: PUSH
6735: LD_INT 21
6737: PUSH
6738: LD_INT 3
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: PUSH
6745: LD_INT 2
6747: PUSH
6748: LD_INT 30
6750: PUSH
6751: LD_INT 0
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: PUSH
6758: LD_INT 30
6760: PUSH
6761: LD_INT 1
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: PUSH
6768: EMPTY
6769: LIST
6770: LIST
6771: LIST
6772: PUSH
6773: LD_INT 50
6775: PUSH
6776: EMPTY
6777: LIST
6778: PUSH
6779: LD_INT 22
6781: PUSH
6782: LD_LOC 15
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: PPUSH
6797: CALL_OW 69
6801: ST_TO_ADDR
// if dep then
6802: LD_VAR 0 2
6806: IFFALSE 7006
// begin aktresp := respawn ;
6808: LD_ADDR_VAR 0 3
6812: PUSH
6813: LD_LOC 15
6817: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
6818: LD_ADDR_LOC 16
6822: PUSH
6823: LD_LOC 16
6827: PPUSH
6828: LD_VAR 0 3
6832: PPUSH
6833: LD_INT 1
6835: PPUSH
6836: CALL_OW 1
6840: ST_TO_ADDR
// enable ;
6841: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
6842: LD_EXP 13
6846: PPUSH
6847: LD_EXP 14
6851: PPUSH
6852: CALL_OW 12
6856: PPUSH
6857: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
6861: LD_ADDR_LOC 16
6865: PUSH
6866: LD_LOC 16
6870: PPUSH
6871: LD_VAR 0 3
6875: PPUSH
6876: LD_INT 0
6878: PPUSH
6879: CALL_OW 1
6883: ST_TO_ADDR
// hc_name :=  ;
6884: LD_ADDR_OWVAR 26
6888: PUSH
6889: LD_STRING 
6891: ST_TO_ADDR
// hc_importance := 0 ;
6892: LD_ADDR_OWVAR 32
6896: PUSH
6897: LD_INT 0
6899: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6900: LD_INT 0
6902: PPUSH
6903: LD_INT 0
6905: PPUSH
6906: LD_EXP 6
6910: PUSH
6911: LD_INT 2
6913: DIV
6914: PPUSH
6915: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
6919: LD_ADDR_OWVAR 21
6923: PUSH
6924: LD_EXP 19
6928: PUSH
6929: LD_VAR 0 3
6933: ARRAY
6934: ST_TO_ADDR
// uc_side := aktresp ;
6935: LD_ADDR_OWVAR 20
6939: PUSH
6940: LD_VAR 0 3
6944: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
6945: LD_ADDR_VAR 0 2
6949: PUSH
6950: LD_VAR 0 2
6954: PUSH
6955: LD_INT 1
6957: PPUSH
6958: LD_VAR 0 2
6962: PPUSH
6963: CALL_OW 12
6967: ARRAY
6968: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
6969: CALL_OW 44
6973: PPUSH
6974: LD_VAR 0 2
6978: PPUSH
6979: CALL_OW 250
6983: PPUSH
6984: LD_VAR 0 2
6988: PPUSH
6989: CALL_OW 251
6993: PPUSH
6994: LD_INT 7
6996: PPUSH
6997: LD_INT 1
6999: PPUSH
7000: CALL_OW 50
// end else
7004: GO 7007
// enable ;
7006: ENABLE
// end else
7007: GO 7010
// enable ;
7009: ENABLE
// end else
7010: GO 7013
// enable ;
7012: ENABLE
// end ; end_of_file
7013: PPOPN 3
7015: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7016: LD_VAR 0 1
7020: PPUSH
7021: CALL_OW 266
7025: PUSH
7026: LD_INT 0
7028: PUSH
7029: LD_INT 1
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: IN
7036: IFFALSE 7061
// SetBName ( b , @ & GetSide ( b ) ) ;
7038: LD_VAR 0 1
7042: PPUSH
7043: LD_STRING @
7045: PUSH
7046: LD_VAR 0 1
7050: PPUSH
7051: CALL_OW 255
7055: STR
7056: PPUSH
7057: CALL_OW 500
// if def_game_rules then
7061: LD_EXP 34
7065: IFFALSE 7102
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
7067: LD_VAR 0 1
7071: PPUSH
7072: LD_VAR 0 1
7076: PPUSH
7077: CALL_OW 266
7081: PPUSH
7082: LD_VAR 0 1
7086: PPUSH
7087: CALL_OW 255
7091: PPUSH
7092: LD_INT 0
7094: PPUSH
7095: LD_INT 1
7097: PPUSH
7098: CALL 13031 0 5
// end ;
7102: PPOPN 2
7104: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7105: LD_VAR 0 1
7109: PPUSH
7110: CALL_OW 266
7114: PUSH
7115: LD_INT 0
7117: PUSH
7118: LD_INT 1
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: IN
7125: IFFALSE 7150
// SetBName ( b , @ & GetSide ( b ) ) ;
7127: LD_VAR 0 1
7131: PPUSH
7132: LD_STRING @
7134: PUSH
7135: LD_VAR 0 1
7139: PPUSH
7140: CALL_OW 255
7144: STR
7145: PPUSH
7146: CALL_OW 500
// if def_game_rules then
7150: LD_EXP 34
7154: IFFALSE 7193
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7156: LD_VAR 0 1
7160: PPUSH
7161: LD_VAR 0 1
7165: PPUSH
7166: CALL_OW 266
7170: PPUSH
7171: LD_VAR 0 1
7175: PPUSH
7176: CALL_OW 255
7180: PPUSH
7181: LD_VAR 0 2
7185: PPUSH
7186: LD_INT 1
7188: PPUSH
7189: CALL 13031 0 5
// end ;
7193: PPOPN 3
7195: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7196: LD_INT 0
7198: PPUSH
7199: PPUSH
7200: PPUSH
7201: PPUSH
// begin if GetSide ( j ) = 0 and GetClass ( j ) = class_apeman then
7202: LD_VAR 0 1
7206: PPUSH
7207: CALL_OW 255
7211: PUSH
7212: LD_INT 0
7214: EQUAL
7215: PUSH
7216: LD_VAR 0 1
7220: PPUSH
7221: CALL_OW 257
7225: PUSH
7226: LD_INT 12
7228: EQUAL
7229: AND
7230: IFFALSE 7236
// CheckApemenAmount ;
7232: CALL 6018 0 0
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7236: LD_VAR 0 1
7240: PPUSH
7241: CALL_OW 266
7245: PUSH
7246: LD_INT 0
7248: PUSH
7249: LD_INT 1
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: IN
7256: IFFALSE 7338
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7258: LD_ADDR_VAR 0 4
7262: PUSH
7263: LD_EXP 18
7267: PUSH
7268: LD_VAR 0 1
7272: PPUSH
7273: CALL_OW 255
7277: ARRAY
7278: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7279: LD_ADDR_VAR 0 2
7283: PUSH
7284: LD_EXP 24
7288: PUSH
7289: LD_VAR 0 4
7293: ARRAY
7294: PUSH
7295: LD_INT 1
7297: ARRAY
7298: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7299: LD_ADDR_VAR 0 3
7303: PUSH
7304: LD_EXP 24
7308: PUSH
7309: LD_VAR 0 4
7313: ARRAY
7314: PUSH
7315: LD_INT 2
7317: ARRAY
7318: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7319: LD_VAR 0 2
7323: PPUSH
7324: LD_VAR 0 3
7328: PPUSH
7329: CALL_OW 420
7333: PPUSH
7334: CALL_OW 419
// end ; if def_game_rules then
7338: LD_EXP 34
7342: IFFALSE 7441
// if ( GetType ( j ) = 3 ) then
7344: LD_VAR 0 1
7348: PPUSH
7349: CALL_OW 247
7353: PUSH
7354: LD_INT 3
7356: EQUAL
7357: IFFALSE 7397
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7359: LD_VAR 0 1
7363: PPUSH
7364: LD_VAR 0 1
7368: PPUSH
7369: CALL_OW 266
7373: PPUSH
7374: LD_VAR 0 1
7378: PPUSH
7379: CALL_OW 255
7383: PPUSH
7384: LD_INT 0
7386: PPUSH
7387: LD_INT 1
7389: NEG
7390: PPUSH
7391: CALL 13031 0 5
7395: GO 7441
// if ( GetChassis ( j ) = 25 ) then
7397: LD_VAR 0 1
7401: PPUSH
7402: CALL_OW 265
7406: PUSH
7407: LD_INT 25
7409: EQUAL
7410: IFFALSE 7441
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7412: LD_VAR 0 1
7416: PPUSH
7417: LD_INT 37
7419: PPUSH
7420: LD_VAR 0 1
7424: PPUSH
7425: CALL_OW 255
7429: PPUSH
7430: LD_INT 0
7432: PPUSH
7433: LD_INT 1
7435: NEG
7436: PPUSH
7437: CALL 13031 0 5
// end ;
7441: PPOPN 5
7443: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7444: LD_EXP 34
7448: PUSH
7449: LD_VAR 0 1
7453: PPUSH
7454: CALL_OW 265
7458: PUSH
7459: LD_INT 25
7461: EQUAL
7462: AND
7463: IFFALSE 7495
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
7465: LD_VAR 0 1
7469: PPUSH
7470: LD_INT 37
7472: PPUSH
7473: LD_VAR 0 1
7477: PPUSH
7478: CALL_OW 255
7482: PPUSH
7483: LD_VAR 0 3
7487: PPUSH
7488: LD_INT 1
7490: PPUSH
7491: CALL 13031 0 5
// end ;
7495: PPOPN 4
7497: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7498: LD_VAR 0 1
7502: PPUSH
7503: LD_VAR 0 2
7507: PPUSH
7508: LD_VAR 0 3
7512: PPUSH
7513: LD_OWVAR 2
7517: PPUSH
7518: CALL 13709 0 4
7522: PPOPN 3
7524: END
// function CanWinLoose ; begin
7525: LD_INT 0
7527: PPUSH
// Result := true ;
7528: LD_ADDR_VAR 0 1
7532: PUSH
7533: LD_INT 1
7535: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
7536: CALL_OW 518
7540: PUSH
7541: CALL_OW 519
7545: PUSH
7546: LD_INT 0
7548: GREATER
7549: AND
7550: IFFALSE 7560
// Result := false ;
7552: LD_ADDR_VAR 0 1
7556: PUSH
7557: LD_INT 0
7559: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7560: CALL_OW 531
7564: PUSH
7565: CALL_OW 519
7569: PUSH
7570: LD_INT 1
7572: GREATER
7573: AND
7574: IFFALSE 7584
// Result := false ;
7576: LD_ADDR_VAR 0 1
7580: PUSH
7581: LD_INT 0
7583: ST_TO_ADDR
// end ;
7584: LD_VAR 0 1
7588: RET
// function HasPower ( i ) ; begin
7589: LD_INT 0
7591: PPUSH
// if def_people_respawning then
7592: LD_EXP 45
7596: IFFALSE 7687
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
7598: LD_ADDR_VAR 0 2
7602: PUSH
7603: LD_INT 22
7605: PUSH
7606: LD_VAR 0 1
7610: PUSH
7611: EMPTY
7612: LIST
7613: LIST
7614: PUSH
7615: LD_INT 2
7617: PUSH
7618: LD_INT 21
7620: PUSH
7621: LD_INT 1
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: PUSH
7628: LD_INT 33
7630: PUSH
7631: LD_INT 3
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: PUSH
7638: LD_INT 33
7640: PUSH
7641: LD_INT 5
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: PUSH
7648: LD_INT 30
7650: PUSH
7651: LD_INT 0
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: PUSH
7658: LD_INT 30
7660: PUSH
7661: LD_INT 1
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: PPUSH
7680: CALL_OW 69
7684: ST_TO_ADDR
7685: GO 7752
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
7687: LD_ADDR_VAR 0 2
7691: PUSH
7692: LD_INT 22
7694: PUSH
7695: LD_VAR 0 1
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: PUSH
7704: LD_INT 2
7706: PUSH
7707: LD_INT 21
7709: PUSH
7710: LD_INT 1
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: PUSH
7717: LD_INT 33
7719: PUSH
7720: LD_INT 3
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: PUSH
7727: LD_INT 33
7729: PUSH
7730: LD_INT 5
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: PPUSH
7747: CALL_OW 69
7751: ST_TO_ADDR
// end ;
7752: LD_VAR 0 2
7756: RET
// function AlliedSides ( i , j ) ; begin
7757: LD_INT 0
7759: PPUSH
// Result := false ;
7760: LD_ADDR_VAR 0 3
7764: PUSH
7765: LD_INT 0
7767: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
7768: LD_VAR 0 1
7772: PPUSH
7773: LD_VAR 0 2
7777: PPUSH
7778: CALL_OW 81
7782: PUSH
7783: LD_INT 1
7785: EQUAL
7786: PUSH
7787: LD_VAR 0 2
7791: PPUSH
7792: LD_VAR 0 1
7796: PPUSH
7797: CALL_OW 81
7801: PUSH
7802: LD_INT 1
7804: EQUAL
7805: AND
7806: PUSH
7807: LD_VAR 0 1
7811: PPUSH
7812: CALL_OW 83
7816: AND
7817: PUSH
7818: LD_VAR 0 2
7822: PPUSH
7823: CALL_OW 83
7827: AND
7828: IFFALSE 7838
// Result := true ;
7830: LD_ADDR_VAR 0 3
7834: PUSH
7835: LD_INT 1
7837: ST_TO_ADDR
// end ;
7838: LD_VAR 0 3
7842: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
7843: CALL 7525 0 0
7847: IFFALSE 7856
7849: GO 7851
7851: DISABLE
// YouLostInMultiplayer ;
7852: CALL_OW 107
7856: END
// every 0 0$3 trigger CanWinLoose marked 401 do
7857: CALL 7525 0 0
7861: IFFALSE 7885
7863: GO 7865
7865: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
7866: LD_EXP 19
7870: PUSH
7871: LD_OWVAR 2
7875: ARRAY
7876: PPUSH
7877: CALL 13751 0 1
// YouWinInMultiplayer ;
7881: CALL_OW 106
// end ;
7885: END
// every 0 0$3 marked 98 do var i , CanWin ;
7886: GO 7888
7888: DISABLE
7889: LD_INT 0
7891: PPUSH
7892: PPUSH
// begin if not HasPower ( your_side ) then
7893: LD_OWVAR 2
7897: PPUSH
7898: CALL 7589 0 1
7902: NOT
7903: IFFALSE 7914
// begin Multiplayer_Loose_Message ;
7905: CALL_OW 521
// enable ( 400 ) ;
7909: LD_INT 400
7911: ENABLE_MARKED
// end else
7912: GO 8047
// begin CanWin := true ;
7914: LD_ADDR_VAR 0 2
7918: PUSH
7919: LD_INT 1
7921: ST_TO_ADDR
// for i := 1 to 8 do
7922: LD_ADDR_VAR 0 1
7926: PUSH
7927: DOUBLE
7928: LD_INT 1
7930: DEC
7931: ST_TO_ADDR
7932: LD_INT 8
7934: PUSH
7935: FOR_TO
7936: IFFALSE 8033
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7938: LD_EXP 18
7942: PUSH
7943: LD_VAR 0 1
7947: ARRAY
7948: PUSH
7949: LD_VAR 0 1
7953: PPUSH
7954: CALL_OW 108
7958: AND
7959: PUSH
7960: LD_VAR 0 1
7964: PUSH
7965: LD_OWVAR 2
7969: NONEQUAL
7970: AND
7971: IFFALSE 8031
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
7973: LD_EXP 16
7977: PUSH
7978: LD_VAR 0 1
7982: ARRAY
7983: NOT
7984: PUSH
7985: LD_EXP 16
7989: PUSH
7990: LD_VAR 0 1
7994: ARRAY
7995: PUSH
7996: LD_EXP 16
8000: PUSH
8001: LD_OWVAR 2
8005: ARRAY
8006: NONEQUAL
8007: OR
8008: IFFALSE 8031
// if HasPower ( i ) then
8010: LD_VAR 0 1
8014: PPUSH
8015: CALL 7589 0 1
8019: IFFALSE 8031
// begin CanWin := false ;
8021: LD_ADDR_VAR 0 2
8025: PUSH
8026: LD_INT 0
8028: ST_TO_ADDR
// break ;
8029: GO 8033
// end ;
8031: GO 7935
8033: POP
8034: POP
// if CanWin then
8035: LD_VAR 0 2
8039: IFFALSE 8046
// enable ( 401 ) else
8041: LD_INT 401
8043: ENABLE_MARKED
8044: GO 8047
// enable ;
8046: ENABLE
// end ; end ;
8047: PPOPN 2
8049: END
// every 0 0$3 marked 99 do var i , CanWin ;
8050: GO 8052
8052: DISABLE
8053: LD_INT 0
8055: PPUSH
8056: PPUSH
// begin if not HasPower ( your_side ) then
8057: LD_OWVAR 2
8061: PPUSH
8062: CALL 7589 0 1
8066: NOT
8067: IFFALSE 8078
// begin Multiplayer_Loose_Message ;
8069: CALL_OW 521
// enable ( 400 ) ;
8073: LD_INT 400
8075: ENABLE_MARKED
// end else
8076: GO 8191
// begin CanWin := true ;
8078: LD_ADDR_VAR 0 2
8082: PUSH
8083: LD_INT 1
8085: ST_TO_ADDR
// for i := 1 to 8 do
8086: LD_ADDR_VAR 0 1
8090: PUSH
8091: DOUBLE
8092: LD_INT 1
8094: DEC
8095: ST_TO_ADDR
8096: LD_INT 8
8098: PUSH
8099: FOR_TO
8100: IFFALSE 8177
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8102: LD_EXP 18
8106: PUSH
8107: LD_VAR 0 1
8111: ARRAY
8112: PUSH
8113: LD_VAR 0 1
8117: PPUSH
8118: CALL_OW 108
8122: AND
8123: PUSH
8124: LD_VAR 0 1
8128: PUSH
8129: LD_OWVAR 2
8133: NONEQUAL
8134: AND
8135: IFFALSE 8175
// if not AlliedSides ( i , your_side ) then
8137: LD_VAR 0 1
8141: PPUSH
8142: LD_OWVAR 2
8146: PPUSH
8147: CALL 7757 0 2
8151: NOT
8152: IFFALSE 8175
// if HasPower ( i ) then
8154: LD_VAR 0 1
8158: PPUSH
8159: CALL 7589 0 1
8163: IFFALSE 8175
// begin CanWin := false ;
8165: LD_ADDR_VAR 0 2
8169: PUSH
8170: LD_INT 0
8172: ST_TO_ADDR
// break ;
8173: GO 8177
// end ;
8175: GO 8099
8177: POP
8178: POP
// if CanWin then
8179: LD_VAR 0 2
8183: IFFALSE 8190
// enable ( 401 ) else
8185: LD_INT 401
8187: ENABLE_MARKED
8188: GO 8191
// enable ;
8190: ENABLE
// end ; end ; end_of_file
8191: PPOPN 2
8193: END
// every 0 0$1 marked 100 do var i , base , pom , filter , sib_mined ;
8194: GO 8196
8196: DISABLE
8197: LD_INT 0
8199: PPUSH
8200: PPUSH
8201: PPUSH
8202: PPUSH
8203: PPUSH
// begin sib_mined := [ ] ;
8204: LD_ADDR_VAR 0 5
8208: PUSH
8209: EMPTY
8210: ST_TO_ADDR
// for i := 1 to 8 do
8211: LD_ADDR_VAR 0 1
8215: PUSH
8216: DOUBLE
8217: LD_INT 1
8219: DEC
8220: ST_TO_ADDR
8221: LD_INT 8
8223: PUSH
8224: FOR_TO
8225: IFFALSE 8381
// if Side_Positions [ i ] then
8227: LD_EXP 18
8231: PUSH
8232: LD_VAR 0 1
8236: ARRAY
8237: IFFALSE 8365
// begin filter := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8239: LD_ADDR_VAR 0 4
8243: PUSH
8244: LD_INT 22
8246: PUSH
8247: LD_VAR 0 1
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: PUSH
8256: LD_INT 2
8258: PUSH
8259: LD_INT 30
8261: PUSH
8262: LD_INT 0
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: PUSH
8269: LD_INT 30
8271: PUSH
8272: LD_INT 1
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: LIST
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: PPUSH
8288: CALL_OW 69
8292: ST_TO_ADDR
// pom := 0 ;
8293: LD_ADDR_VAR 0 3
8297: PUSH
8298: LD_INT 0
8300: ST_TO_ADDR
// for base in filter do
8301: LD_ADDR_VAR 0 2
8305: PUSH
8306: LD_VAR 0 4
8310: PUSH
8311: FOR_IN
8312: IFFALSE 8345
// pom := pom + GetResourceType ( GetBase ( base ) , mat_siberit ) ;
8314: LD_ADDR_VAR 0 3
8318: PUSH
8319: LD_VAR 0 3
8323: PUSH
8324: LD_VAR 0 2
8328: PPUSH
8329: CALL_OW 274
8333: PPUSH
8334: LD_INT 3
8336: PPUSH
8337: CALL_OW 275
8341: PLUS
8342: ST_TO_ADDR
8343: GO 8311
8345: POP
8346: POP
// sib_mined := sib_mined ^ pom ;
8347: LD_ADDR_VAR 0 5
8351: PUSH
8352: LD_VAR 0 5
8356: PUSH
8357: LD_VAR 0 3
8361: ADD
8362: ST_TO_ADDR
// end else
8363: GO 8379
// sib_mined := sib_mined ^ 0 ;
8365: LD_ADDR_VAR 0 5
8369: PUSH
8370: LD_VAR 0 5
8374: PUSH
8375: LD_INT 0
8377: ADD
8378: ST_TO_ADDR
8379: GO 8224
8381: POP
8382: POP
// if not def_public_score then
8383: LD_EXP 2
8387: NOT
8388: IFFALSE 8478
// begin ExtraStrings := [ ] ;
8390: LD_ADDR_EXP 52
8394: PUSH
8395: EMPTY
8396: ST_TO_ADDR
// for i := 1 to 8 do
8397: LD_ADDR_VAR 0 1
8401: PUSH
8402: DOUBLE
8403: LD_INT 1
8405: DEC
8406: ST_TO_ADDR
8407: LD_INT 8
8409: PUSH
8410: FOR_TO
8411: IFFALSE 8474
// if Side_Positions [ i ] then
8413: LD_EXP 18
8417: PUSH
8418: LD_VAR 0 1
8422: ARRAY
8423: IFFALSE 8472
// ExtraStrings := ExtraStrings ^ [ #AlienBase-MinedPublic , i , i , sib_mined [ i ] , amount_of_siberit ] ;
8425: LD_ADDR_EXP 52
8429: PUSH
8430: LD_EXP 52
8434: PUSH
8435: LD_STRING #AlienBase-MinedPublic
8437: PUSH
8438: LD_VAR 0 1
8442: PUSH
8443: LD_VAR 0 1
8447: PUSH
8448: LD_VAR 0 5
8452: PUSH
8453: LD_VAR 0 1
8457: ARRAY
8458: PUSH
8459: LD_EXP 12
8463: PUSH
8464: EMPTY
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: ADD
8471: ST_TO_ADDR
8472: GO 8410
8474: POP
8475: POP
// end else
8476: GO 8507
// ExtraStrings := [ #AlienBase-Mined , sib_mined [ Your_Side ] , amount_of_siberit ] ;
8478: LD_ADDR_EXP 52
8482: PUSH
8483: LD_STRING #AlienBase-Mined
8485: PUSH
8486: LD_VAR 0 5
8490: PUSH
8491: LD_OWVAR 2
8495: ARRAY
8496: PUSH
8497: LD_EXP 12
8501: PUSH
8502: EMPTY
8503: LIST
8504: LIST
8505: LIST
8506: ST_TO_ADDR
// for i := 1 to 8 do
8507: LD_ADDR_VAR 0 1
8511: PUSH
8512: DOUBLE
8513: LD_INT 1
8515: DEC
8516: ST_TO_ADDR
8517: LD_INT 8
8519: PUSH
8520: FOR_TO
8521: IFFALSE 8578
// if sib_mined [ i ] >= amount_of_siberit then
8523: LD_VAR 0 5
8527: PUSH
8528: LD_VAR 0 1
8532: ARRAY
8533: PUSH
8534: LD_EXP 12
8538: GREATEREQUAL
8539: IFFALSE 8576
// begin wait ( 0 0$1 ) ;
8541: LD_INT 35
8543: PPUSH
8544: CALL_OW 67
// if sib_mined [ your_side ] >= amount_of_siberit then
8548: LD_VAR 0 5
8552: PUSH
8553: LD_OWVAR 2
8557: ARRAY
8558: PUSH
8559: LD_EXP 12
8563: GREATEREQUAL
8564: IFFALSE 8572
// YouWinInMultiplayer else
8566: CALL_OW 106
8570: GO 8576
// YouLostInMultiplayer ;
8572: CALL_OW 107
// end ;
8576: GO 8520
8578: POP
8579: POP
// enable ;
8580: ENABLE
// end ; end_of_file
8581: PPOPN 5
8583: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
8584: LD_INT 0
8586: PPUSH
8587: PPUSH
// for un in battle_flags_id do
8588: LD_ADDR_VAR 0 2
8592: PUSH
8593: LD_EXP 29
8597: PUSH
8598: FOR_IN
8599: IFFALSE 8674
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
8601: LD_VAR 0 2
8605: PPUSH
8606: LD_INT 1
8608: PUSH
8609: LD_LOC 17
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: PUSH
8618: LD_INT 2
8620: PUSH
8621: LD_LOC 17
8625: PUSH
8626: LD_INT 2
8628: DIV
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PUSH
8634: LD_INT 3
8636: PUSH
8637: LD_LOC 17
8641: PUSH
8642: LD_INT 5
8644: DIV
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: PUSH
8650: LD_INT 20
8652: PUSH
8653: LD_LOC 17
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: PPUSH
8668: CALL_OW 423
8672: GO 8598
8674: POP
8675: POP
// end ;
8676: LD_VAR 0 1
8680: RET
// every 1 do var un ;
8681: GO 8683
8683: DISABLE
8684: LD_INT 0
8686: PPUSH
// begin if not def_morale_flags then
8687: LD_EXP 43
8691: NOT
8692: IFFALSE 8696
// exit ;
8694: GO 8773
// if not morale_decreasing_time then
8696: LD_EXP 10
8700: NOT
8701: IFFALSE 8705
// exit ;
8703: GO 8773
// strength = 100 ;
8705: LD_ADDR_LOC 17
8709: PUSH
8710: LD_INT 100
8712: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8713: LD_EXP 10
8717: PPUSH
8718: CALL_OW 67
// strength := strength - 1 ;
8722: LD_ADDR_LOC 17
8726: PUSH
8727: LD_LOC 17
8731: PUSH
8732: LD_INT 1
8734: MINUS
8735: ST_TO_ADDR
// Update_Flags ;
8736: CALL 8584 0 0
// until not strength ;
8740: LD_LOC 17
8744: NOT
8745: IFFALSE 8713
// for un in battle_flags_id do
8747: LD_ADDR_VAR 0 1
8751: PUSH
8752: LD_EXP 29
8756: PUSH
8757: FOR_IN
8758: IFFALSE 8771
// KillBattleFlag ( un ) ;
8760: LD_VAR 0 1
8764: PPUSH
8765: CALL_OW 419
8769: GO 8757
8771: POP
8772: POP
// end ; end_of_file
8773: PPOPN 1
8775: END
// export BuildUpAreas ; export function BeginBuildUp ; var i , j ; begin
8776: LD_INT 0
8778: PPUSH
8779: PPUSH
8780: PPUSH
// enable ( 600 ) ;
8781: LD_INT 600
8783: ENABLE_MARKED
// for i := 1 to BuildUpAreas do
8784: LD_ADDR_VAR 0 2
8788: PUSH
8789: DOUBLE
8790: LD_INT 1
8792: DEC
8793: ST_TO_ADDR
8794: LD_EXP 32
8798: PUSH
8799: FOR_TO
8800: IFFALSE 8955
// if Position_Sides [ i ] then
8802: LD_EXP 21
8806: PUSH
8807: LD_VAR 0 2
8811: ARRAY
8812: IFFALSE 8953
// for j := 1 to 8 do
8814: LD_ADDR_VAR 0 3
8818: PUSH
8819: DOUBLE
8820: LD_INT 1
8822: DEC
8823: ST_TO_ADDR
8824: LD_INT 8
8826: PUSH
8827: FOR_TO
8828: IFFALSE 8951
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
8830: LD_EXP 18
8834: PUSH
8835: LD_VAR 0 3
8839: ARRAY
8840: PUSH
8841: LD_EXP 16
8845: PUSH
8846: LD_EXP 21
8850: PUSH
8851: LD_VAR 0 2
8855: ARRAY
8856: ARRAY
8857: PUSH
8858: LD_EXP 16
8862: PUSH
8863: LD_VAR 0 3
8867: ARRAY
8868: NONEQUAL
8869: PUSH
8870: LD_EXP 20
8874: NOT
8875: PUSH
8876: LD_EXP 21
8880: PUSH
8881: LD_VAR 0 2
8885: ARRAY
8886: PUSH
8887: LD_VAR 0 3
8891: NONEQUAL
8892: AND
8893: OR
8894: AND
8895: IFFALSE 8919
// HideArea ( j , BuildUpAreas [ i ] ) else
8897: LD_VAR 0 3
8901: PPUSH
8902: LD_EXP 32
8906: PUSH
8907: LD_VAR 0 2
8911: ARRAY
8912: PPUSH
8913: CALL_OW 333
8917: GO 8949
// if ( j = your_side ) then
8919: LD_VAR 0 3
8923: PUSH
8924: LD_OWVAR 2
8928: EQUAL
8929: IFFALSE 8949
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
8931: LD_EXP 32
8935: PUSH
8936: LD_VAR 0 2
8940: ARRAY
8941: PPUSH
8942: LD_INT 5
8944: PPUSH
8945: CALL_OW 424
8949: GO 8827
8951: POP
8952: POP
8953: GO 8799
8955: POP
8956: POP
// end ;
8957: LD_VAR 0 1
8961: RET
// export function EndBuildUp ; var i , j ; begin
8962: LD_INT 0
8964: PPUSH
8965: PPUSH
8966: PPUSH
// disable ( 600 ) ;
8967: LD_INT 600
8969: DISABLE_MARKED
// for i := 1 to BuildUpAreas do
8970: LD_ADDR_VAR 0 2
8974: PUSH
8975: DOUBLE
8976: LD_INT 1
8978: DEC
8979: ST_TO_ADDR
8980: LD_EXP 32
8984: PUSH
8985: FOR_TO
8986: IFFALSE 9141
// if Position_Sides [ i ] then
8988: LD_EXP 21
8992: PUSH
8993: LD_VAR 0 2
8997: ARRAY
8998: IFFALSE 9139
// for j := 1 to 8 do
9000: LD_ADDR_VAR 0 3
9004: PUSH
9005: DOUBLE
9006: LD_INT 1
9008: DEC
9009: ST_TO_ADDR
9010: LD_INT 8
9012: PUSH
9013: FOR_TO
9014: IFFALSE 9137
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
9016: LD_EXP 18
9020: PUSH
9021: LD_VAR 0 3
9025: ARRAY
9026: PUSH
9027: LD_EXP 16
9031: PUSH
9032: LD_EXP 21
9036: PUSH
9037: LD_VAR 0 2
9041: ARRAY
9042: ARRAY
9043: PUSH
9044: LD_EXP 16
9048: PUSH
9049: LD_VAR 0 3
9053: ARRAY
9054: NONEQUAL
9055: PUSH
9056: LD_EXP 20
9060: NOT
9061: PUSH
9062: LD_EXP 21
9066: PUSH
9067: LD_VAR 0 2
9071: ARRAY
9072: PUSH
9073: LD_VAR 0 3
9077: NONEQUAL
9078: AND
9079: OR
9080: AND
9081: IFFALSE 9105
// ShowArea ( j , BuildUpAreas [ i ] ) else
9083: LD_VAR 0 3
9087: PPUSH
9088: LD_EXP 32
9092: PUSH
9093: LD_VAR 0 2
9097: ARRAY
9098: PPUSH
9099: CALL_OW 334
9103: GO 9135
// if ( j = your_side ) then
9105: LD_VAR 0 3
9109: PUSH
9110: LD_OWVAR 2
9114: EQUAL
9115: IFFALSE 9135
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
9117: LD_EXP 32
9121: PUSH
9122: LD_VAR 0 2
9126: ARRAY
9127: PPUSH
9128: LD_INT 0
9130: PPUSH
9131: CALL_OW 424
9135: GO 9013
9137: POP
9138: POP
9139: GO 8985
9141: POP
9142: POP
// end ;
9143: LD_VAR 0 1
9147: RET
// every 5 marked 600 do var i , un ;
9148: GO 9150
9150: DISABLE
9151: LD_INT 0
9153: PPUSH
9154: PPUSH
// begin for i := 1 to BuildUpAreas do
9155: LD_ADDR_VAR 0 1
9159: PUSH
9160: DOUBLE
9161: LD_INT 1
9163: DEC
9164: ST_TO_ADDR
9165: LD_EXP 32
9169: PUSH
9170: FOR_TO
9171: IFFALSE 9326
// if Position_Sides [ i ] then
9173: LD_EXP 21
9177: PUSH
9178: LD_VAR 0 1
9182: ARRAY
9183: IFFALSE 9324
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
9185: LD_ADDR_VAR 0 2
9189: PUSH
9190: LD_EXP 32
9194: PUSH
9195: LD_VAR 0 1
9199: ARRAY
9200: PPUSH
9201: LD_INT 2
9203: PUSH
9204: LD_INT 21
9206: PUSH
9207: LD_INT 1
9209: PUSH
9210: EMPTY
9211: LIST
9212: LIST
9213: PUSH
9214: LD_INT 21
9216: PUSH
9217: LD_INT 2
9219: PUSH
9220: EMPTY
9221: LIST
9222: LIST
9223: PUSH
9224: EMPTY
9225: LIST
9226: LIST
9227: LIST
9228: PUSH
9229: LD_INT 22
9231: PUSH
9232: LD_OWVAR 2
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: PPUSH
9245: CALL_OW 70
9249: PUSH
9250: FOR_IN
9251: IFFALSE 9322
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
9253: LD_EXP 16
9257: PUSH
9258: LD_EXP 21
9262: PUSH
9263: LD_VAR 0 1
9267: ARRAY
9268: ARRAY
9269: PUSH
9270: LD_EXP 16
9274: PUSH
9275: LD_OWVAR 2
9279: ARRAY
9280: NONEQUAL
9281: PUSH
9282: LD_EXP 20
9286: NOT
9287: PUSH
9288: LD_EXP 21
9292: PUSH
9293: LD_VAR 0 1
9297: ARRAY
9298: PUSH
9299: LD_OWVAR 2
9303: NONEQUAL
9304: AND
9305: OR
9306: IFFALSE 9320
// ComMoveToArea ( un , BuildUpEscape ) ;
9308: LD_VAR 0 2
9312: PPUSH
9313: LD_INT 16
9315: PPUSH
9316: CALL_OW 113
9320: GO 9250
9322: POP
9323: POP
9324: GO 9170
9326: POP
9327: POP
// enable ;
9328: ENABLE
// end ;
9329: PPOPN 2
9331: END
// every 5 5$00 do
9332: GO 9334
9334: DISABLE
// if ( def_builduptime = 1 ) then
9335: LD_EXP 48
9339: PUSH
9340: LD_INT 1
9342: EQUAL
9343: IFFALSE 9349
// EndBuildUp ;
9345: CALL 8962 0 0
9349: END
// every 10 10$00 do
9350: GO 9352
9352: DISABLE
// if ( def_builduptime = 2 ) then
9353: LD_EXP 48
9357: PUSH
9358: LD_INT 2
9360: EQUAL
9361: IFFALSE 9367
// EndBuildUp ;
9363: CALL 8962 0 0
9367: END
// every 15 15$00 do
9368: GO 9370
9370: DISABLE
// if ( def_builduptime = 3 ) then
9371: LD_EXP 48
9375: PUSH
9376: LD_INT 3
9378: EQUAL
9379: IFFALSE 9385
// EndBuildUp ; end_of_file
9381: CALL 8962 0 0
9385: END
// var BloodGods , BloodGods_LastKills , BloodGods_CurrentKills , BloodGods_Positions ; every 0 0$3 marked 200 do var x ;
9386: GO 9388
9388: DISABLE
9389: LD_INT 0
9391: PPUSH
// begin enable ;
9392: ENABLE
// for x := 1 to 8 do
9393: LD_ADDR_VAR 0 1
9397: PUSH
9398: DOUBLE
9399: LD_INT 1
9401: DEC
9402: ST_TO_ADDR
9403: LD_INT 8
9405: PUSH
9406: FOR_TO
9407: IFFALSE 9491
// if ( BloodGods_CurrentKills [ x ] > 5 ) and ( BloodGods [ x ] = - 1 ) then
9409: LD_LOC 24
9413: PUSH
9414: LD_VAR 0 1
9418: ARRAY
9419: PUSH
9420: LD_INT 5
9422: GREATER
9423: PUSH
9424: LD_LOC 22
9428: PUSH
9429: LD_VAR 0 1
9433: ARRAY
9434: PUSH
9435: LD_INT 1
9437: NEG
9438: EQUAL
9439: AND
9440: IFFALSE 9489
// begin BloodGods_LastKills := Replace ( BloodGods_LastKills , x , BloodGods_LastKills [ x ] + 6 ) ;
9442: LD_ADDR_LOC 23
9446: PUSH
9447: LD_LOC 23
9451: PPUSH
9452: LD_VAR 0 1
9456: PPUSH
9457: LD_LOC 23
9461: PUSH
9462: LD_VAR 0 1
9466: ARRAY
9467: PUSH
9468: LD_INT 6
9470: PLUS
9471: PPUSH
9472: CALL_OW 1
9476: ST_TO_ADDR
// AwakenBloodGod ( x , false ) ;
9477: LD_VAR 0 1
9481: PPUSH
9482: LD_INT 0
9484: PPUSH
9485: CALL 9663 0 2
// end ;
9489: GO 9406
9491: POP
9492: POP
// end ;
9493: PPOPN 1
9495: END
// every 0 0$1 marked 200 do var BGL , x ;
9496: GO 9498
9498: DISABLE
9499: LD_INT 0
9501: PPUSH
9502: PPUSH
// begin enable ;
9503: ENABLE
// for x := 1 to 8 do
9504: LD_ADDR_VAR 0 2
9508: PUSH
9509: DOUBLE
9510: LD_INT 1
9512: DEC
9513: ST_TO_ADDR
9514: LD_INT 8
9516: PUSH
9517: FOR_TO
9518: IFFALSE 9649
// if ( BloodGods [ x ] > - 1 ) and IsLive ( BloodGods [ x ] ) then
9520: LD_LOC 22
9524: PUSH
9525: LD_VAR 0 2
9529: ARRAY
9530: PUSH
9531: LD_INT 1
9533: NEG
9534: GREATER
9535: PUSH
9536: LD_LOC 22
9540: PUSH
9541: LD_VAR 0 2
9545: ARRAY
9546: PPUSH
9547: CALL_OW 300
9551: AND
9552: IFFALSE 9647
// begin BGL := GetLives ( BloodGods [ x ] ) ;
9554: LD_ADDR_VAR 0 1
9558: PUSH
9559: LD_LOC 22
9563: PUSH
9564: LD_VAR 0 2
9568: ARRAY
9569: PPUSH
9570: CALL_OW 256
9574: ST_TO_ADDR
// if ( BGL < 1000 ) and ( BGL > 100 ) then
9575: LD_VAR 0 1
9579: PUSH
9580: LD_INT 1000
9582: LESS
9583: PUSH
9584: LD_VAR 0 1
9588: PUSH
9589: LD_INT 100
9591: GREATER
9592: AND
9593: IFFALSE 9647
// begin BGL := BGL + 10 ;
9595: LD_ADDR_VAR 0 1
9599: PUSH
9600: LD_VAR 0 1
9604: PUSH
9605: LD_INT 10
9607: PLUS
9608: ST_TO_ADDR
// if BGL > 1000 then
9609: LD_VAR 0 1
9613: PUSH
9614: LD_INT 1000
9616: GREATER
9617: IFFALSE 9627
// BGL := 1000 ;
9619: LD_ADDR_VAR 0 1
9623: PUSH
9624: LD_INT 1000
9626: ST_TO_ADDR
// SetLives ( BloodGods [ x ] , BGL ) ;
9627: LD_LOC 22
9631: PUSH
9632: LD_VAR 0 2
9636: ARRAY
9637: PPUSH
9638: LD_VAR 0 1
9642: PPUSH
9643: CALL_OW 234
// end ; end ;
9647: GO 9517
9649: POP
9650: POP
// end ;
9651: PPOPN 2
9653: END
// every 0 0$1 marked 200 do
9654: GO 9656
9656: DISABLE
// begin DisplayTimeWithKills ;
9657: CALL 9904 0 0
// enable ;
9661: ENABLE
// end ;
9662: END
// function AwakenBloodGod ( side , NoDialog ) ; begin
9663: LD_INT 0
9665: PPUSH
// uc_direction := Rand ( 0 , 5 ) ;
9666: LD_ADDR_OWVAR 24
9670: PUSH
9671: LD_INT 0
9673: PPUSH
9674: LD_INT 5
9676: PPUSH
9677: CALL_OW 12
9681: ST_TO_ADDR
// PrepareHuman ( 1 , class_soldier , 15 ) ;
9682: LD_INT 1
9684: PPUSH
9685: LD_INT 1
9687: PPUSH
9688: LD_INT 15
9690: PPUSH
9691: CALL_OW 380
// hc_importance := 106 ;
9695: LD_ADDR_OWVAR 32
9699: PUSH
9700: LD_INT 106
9702: ST_TO_ADDR
// hc_name := Blood God of  & mp_sides_players_names [ side ] ;
9703: LD_ADDR_OWVAR 26
9707: PUSH
9708: LD_STRING Blood God of 
9710: PUSH
9711: LD_OWVAR 19
9715: PUSH
9716: LD_VAR 0 1
9720: ARRAY
9721: STR
9722: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
9723: LD_ADDR_OWVAR 21
9727: PUSH
9728: LD_EXP 19
9732: PUSH
9733: LD_VAR 0 1
9737: ARRAY
9738: ST_TO_ADDR
// uc_side := side ;
9739: LD_ADDR_OWVAR 20
9743: PUSH
9744: LD_VAR 0 1
9748: ST_TO_ADDR
// hc_noskilllimit := true ;
9749: LD_ADDR_OWVAR 76
9753: PUSH
9754: LD_INT 1
9756: ST_TO_ADDR
// hc_agressivity := 50 ;
9757: LD_ADDR_OWVAR 35
9761: PUSH
9762: LD_INT 50
9764: ST_TO_ADDR
// BloodGods := Replace ( BloodGods , Side , CreateHuman ) ;
9765: LD_ADDR_LOC 22
9769: PUSH
9770: LD_LOC 22
9774: PPUSH
9775: LD_VAR 0 1
9779: PPUSH
9780: CALL_OW 44
9784: PPUSH
9785: CALL_OW 1
9789: ST_TO_ADDR
// PlaceUnitXYR ( BloodGods [ side ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 1 ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 2 ] , 10 , false ) ;
9790: LD_LOC 22
9794: PUSH
9795: LD_VAR 0 1
9799: ARRAY
9800: PPUSH
9801: LD_LOC 25
9805: PUSH
9806: LD_EXP 18
9810: PUSH
9811: LD_VAR 0 1
9815: ARRAY
9816: ARRAY
9817: PUSH
9818: LD_INT 1
9820: ARRAY
9821: PPUSH
9822: LD_LOC 25
9826: PUSH
9827: LD_EXP 18
9831: PUSH
9832: LD_VAR 0 1
9836: ARRAY
9837: ARRAY
9838: PUSH
9839: LD_INT 2
9841: ARRAY
9842: PPUSH
9843: LD_INT 10
9845: PPUSH
9846: LD_INT 0
9848: PPUSH
9849: CALL_OW 50
// SetAttr ( BloodGods [ side ] , attr_stamina , 300 ) ;
9853: LD_LOC 22
9857: PUSH
9858: LD_VAR 0 1
9862: ARRAY
9863: PPUSH
9864: LD_INT 1
9866: PPUSH
9867: LD_INT 300
9869: PPUSH
9870: CALL_OW 239
// if not NoDialog then
9874: LD_VAR 0 2
9878: NOT
9879: IFFALSE 9899
// SayRadio ( BloodGods [ side ] , DLAwaken ) ;
9881: LD_LOC 22
9885: PUSH
9886: LD_VAR 0 1
9890: ARRAY
9891: PPUSH
9892: LD_STRING DLAwaken
9894: PPUSH
9895: CALL_OW 94
// end ;
9899: LD_VAR 0 3
9903: RET
// function DisplayTimeWithKills ; var x ; begin
9904: LD_INT 0
9906: PPUSH
9907: PPUSH
// ExtraStrings :=  ;
9908: LD_ADDR_EXP 52
9912: PUSH
9913: LD_STRING 
9915: ST_TO_ADDR
// for x = 1 to Side_Positions do
9916: LD_ADDR_VAR 0 2
9920: PUSH
9921: DOUBLE
9922: LD_INT 1
9924: DEC
9925: ST_TO_ADDR
9926: LD_EXP 18
9930: PUSH
9931: FOR_TO
9932: IFFALSE 10165
// if Side_Positions [ x ] then
9934: LD_EXP 18
9938: PUSH
9939: LD_VAR 0 2
9943: ARRAY
9944: IFFALSE 10163
// begin BloodGods_CurrentKills := Replace ( BloodGods_CurrentKills , x , GetHumansKilled ( x ) - BloodGods_LastKills [ x ] ) ;
9946: LD_ADDR_LOC 24
9950: PUSH
9951: LD_LOC 24
9955: PPUSH
9956: LD_VAR 0 2
9960: PPUSH
9961: LD_VAR 0 2
9965: PPUSH
9966: CALL_OW 515
9970: PUSH
9971: LD_LOC 23
9975: PUSH
9976: LD_VAR 0 2
9980: ARRAY
9981: MINUS
9982: PPUSH
9983: CALL_OW 1
9987: ST_TO_ADDR
// if ( BloodGods [ x ] > - 1 ) and ( IsLive ( BloodGods [ x ] ) ) then
9988: LD_LOC 22
9992: PUSH
9993: LD_VAR 0 2
9997: ARRAY
9998: PUSH
9999: LD_INT 1
10001: NEG
10002: GREATER
10003: PUSH
10004: LD_LOC 22
10008: PUSH
10009: LD_VAR 0 2
10013: ARRAY
10014: PPUSH
10015: CALL_OW 300
10019: AND
10020: IFFALSE 10053
// ExtraStrings = ExtraStrings ^ [ #godawoken , x , x ] else
10022: LD_ADDR_EXP 52
10026: PUSH
10027: LD_EXP 52
10031: PUSH
10032: LD_STRING #godawoken
10034: PUSH
10035: LD_VAR 0 2
10039: PUSH
10040: LD_VAR 0 2
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: LIST
10049: ADD
10050: ST_TO_ADDR
10051: GO 10163
// if ( BloodGods [ x ] > - 1 ) and ( IsDead ( BloodGods [ x ] ) ) then
10053: LD_LOC 22
10057: PUSH
10058: LD_VAR 0 2
10062: ARRAY
10063: PUSH
10064: LD_INT 1
10066: NEG
10067: GREATER
10068: PUSH
10069: LD_LOC 22
10073: PUSH
10074: LD_VAR 0 2
10078: ARRAY
10079: PPUSH
10080: CALL_OW 301
10084: AND
10085: IFFALSE 10118
// ExtraStrings = ExtraStrings ^ [ #goddied , x , x ] else
10087: LD_ADDR_EXP 52
10091: PUSH
10092: LD_EXP 52
10096: PUSH
10097: LD_STRING #goddied
10099: PUSH
10100: LD_VAR 0 2
10104: PUSH
10105: LD_VAR 0 2
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: LIST
10114: ADD
10115: ST_TO_ADDR
10116: GO 10163
// ExtraStrings = ExtraStrings ^ [ #godssacrifise , x , x , BloodGods_CurrentKills [ x ] , 6 ] end ;
10118: LD_ADDR_EXP 52
10122: PUSH
10123: LD_EXP 52
10127: PUSH
10128: LD_STRING #godssacrifise
10130: PUSH
10131: LD_VAR 0 2
10135: PUSH
10136: LD_VAR 0 2
10140: PUSH
10141: LD_LOC 24
10145: PUSH
10146: LD_VAR 0 2
10150: ARRAY
10151: PUSH
10152: LD_INT 6
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: ADD
10162: ST_TO_ADDR
10163: GO 9931
10165: POP
10166: POP
// end ;
10167: LD_VAR 0 1
10171: RET
// export function InitBloodGods ; begin
10172: LD_INT 0
10174: PPUSH
// BloodGods = [ - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 ] ;
10175: LD_ADDR_LOC 22
10179: PUSH
10180: LD_INT 1
10182: NEG
10183: PUSH
10184: LD_INT 1
10186: NEG
10187: PUSH
10188: LD_INT 1
10190: NEG
10191: PUSH
10192: LD_INT 1
10194: NEG
10195: PUSH
10196: LD_INT 1
10198: NEG
10199: PUSH
10200: LD_INT 1
10202: NEG
10203: PUSH
10204: LD_INT 1
10206: NEG
10207: PUSH
10208: LD_INT 1
10210: NEG
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: ST_TO_ADDR
// BloodGods_LastKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10222: LD_ADDR_LOC 23
10226: PUSH
10227: LD_INT 0
10229: PUSH
10230: LD_INT 0
10232: PUSH
10233: LD_INT 0
10235: PUSH
10236: LD_INT 0
10238: PUSH
10239: LD_INT 0
10241: PUSH
10242: LD_INT 0
10244: PUSH
10245: LD_INT 0
10247: PUSH
10248: LD_INT 0
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: ST_TO_ADDR
// BloodGods_CurrentKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10261: LD_ADDR_LOC 24
10265: PUSH
10266: LD_INT 0
10268: PUSH
10269: LD_INT 0
10271: PUSH
10272: LD_INT 0
10274: PUSH
10275: LD_INT 0
10277: PUSH
10278: LD_INT 0
10280: PUSH
10281: LD_INT 0
10283: PUSH
10284: LD_INT 0
10286: PUSH
10287: LD_INT 0
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: ST_TO_ADDR
// BloodGods_Positions = [ [ 60 , 47 ] , [ 82 , 26 ] , [ 124 , 45 ] , [ 147 , 90 ] , [ 126 , 112 ] , [ 84 , 92 ] , [ 106 , 73 ] , [ 106 , 73 ] ] ;
10300: LD_ADDR_LOC 25
10304: PUSH
10305: LD_INT 60
10307: PUSH
10308: LD_INT 47
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: PUSH
10315: LD_INT 82
10317: PUSH
10318: LD_INT 26
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: PUSH
10325: LD_INT 124
10327: PUSH
10328: LD_INT 45
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PUSH
10335: LD_INT 147
10337: PUSH
10338: LD_INT 90
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PUSH
10345: LD_INT 126
10347: PUSH
10348: LD_INT 112
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: PUSH
10355: LD_INT 84
10357: PUSH
10358: LD_INT 92
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: PUSH
10365: LD_INT 106
10367: PUSH
10368: LD_INT 73
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PUSH
10375: LD_INT 106
10377: PUSH
10378: LD_INT 73
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: ST_TO_ADDR
// ClearHumansKilled ;
10395: CALL_OW 516
// enable ( 200 ) ;
10399: LD_INT 200
10401: ENABLE_MARKED
// end ; end_of_file
10402: LD_VAR 0 1
10406: RET
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime , def_sheik , def_mastodont ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
10407: LD_INT 0
10409: PPUSH
10410: PPUSH
// if ( not IAmSpec ) then
10411: CALL_OW 531
10415: NOT
10416: IFFALSE 10432
// Result := Limits_Info ^  ;
10418: LD_ADDR_VAR 0 1
10422: PUSH
10423: LD_LOC 33
10427: PUSH
10428: LD_STRING 
10430: ADD
10431: ST_TO_ADDR
// for i := 1 to 8 do
10432: LD_ADDR_VAR 0 2
10436: PUSH
10437: DOUBLE
10438: LD_INT 1
10440: DEC
10441: ST_TO_ADDR
10442: LD_INT 8
10444: PUSH
10445: FOR_TO
10446: IFFALSE 10491
// if Cheaters [ i ] then
10448: LD_LOC 34
10452: PUSH
10453: LD_VAR 0 2
10457: ARRAY
10458: IFFALSE 10489
// Result := Result ^ [ #Cheater , i , i ] ;
10460: LD_ADDR_VAR 0 1
10464: PUSH
10465: LD_VAR 0 1
10469: PUSH
10470: LD_STRING #Cheater
10472: PUSH
10473: LD_VAR 0 2
10477: PUSH
10478: LD_VAR 0 2
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: LIST
10487: ADD
10488: ST_TO_ADDR
10489: GO 10445
10491: POP
10492: POP
// end ;
10493: LD_VAR 0 1
10497: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
10498: LD_INT 0
10500: PPUSH
10501: PPUSH
10502: PPUSH
10503: PPUSH
10504: PPUSH
// case Game_Type of 10 :
10505: LD_EXP 33
10509: PUSH
10510: LD_INT 10
10512: DOUBLE
10513: EQUAL
10514: IFTRUE 10518
10516: GO 10529
10518: POP
// def_game_rules := 1 ; 11 :
10519: LD_ADDR_EXP 34
10523: PUSH
10524: LD_INT 1
10526: ST_TO_ADDR
10527: GO 10549
10529: LD_INT 11
10531: DOUBLE
10532: EQUAL
10533: IFTRUE 10537
10535: GO 10548
10537: POP
// def_game_rules := 3 ; end ;
10538: LD_ADDR_EXP 34
10542: PUSH
10543: LD_INT 3
10545: ST_TO_ADDR
10546: GO 10549
10548: POP
// case def_game_rules of 0 :
10549: LD_EXP 34
10553: PUSH
10554: LD_INT 0
10556: DOUBLE
10557: EQUAL
10558: IFTRUE 10562
10560: GO 10567
10562: POP
// exit ; 1 :
10563: GO 12625
10565: GO 12525
10567: LD_INT 1
10569: DOUBLE
10570: EQUAL
10571: IFTRUE 10575
10573: GO 10791
10575: POP
// begin def_base_level := 2 ;
10576: LD_ADDR_EXP 35
10580: PUSH
10581: LD_INT 2
10583: ST_TO_ADDR
// def_amount_of_people := 2 ;
10584: LD_ADDR_EXP 36
10588: PUSH
10589: LD_INT 2
10591: ST_TO_ADDR
// def_skill_level := 1 ;
10592: LD_ADDR_EXP 37
10596: PUSH
10597: LD_INT 1
10599: ST_TO_ADDR
// def_starting_resources := 2 ;
10600: LD_ADDR_EXP 38
10604: PUSH
10605: LD_INT 2
10607: ST_TO_ADDR
// def_shipments_density := 1 ;
10608: LD_ADDR_EXP 39
10612: PUSH
10613: LD_INT 1
10615: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10616: LD_ADDR_EXP 40
10620: PUSH
10621: LD_INT 0
10623: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
10624: LD_ADDR_EXP 41
10628: PUSH
10629: LD_INT 1
10631: ST_TO_ADDR
// def_shared_vision := 1 ;
10632: LD_ADDR_EXP 42
10636: PUSH
10637: LD_INT 1
10639: ST_TO_ADDR
// def_morale_flags := 3 ;
10640: LD_ADDR_EXP 43
10644: PUSH
10645: LD_INT 3
10647: ST_TO_ADDR
// def_siberite_detection := 1 ;
10648: LD_ADDR_EXP 44
10652: PUSH
10653: LD_INT 1
10655: ST_TO_ADDR
// def_people_respawning := 1 ;
10656: LD_ADDR_EXP 45
10660: PUSH
10661: LD_INT 1
10663: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10664: LD_ADDR_EXP 46
10668: PUSH
10669: LD_INT 1
10671: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10672: LD_ADDR_EXP 47
10676: PUSH
10677: LD_INT 0
10679: ST_TO_ADDR
// def_builduptime := 2 ;
10680: LD_ADDR_EXP 48
10684: PUSH
10685: LD_INT 2
10687: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
10688: LD_ADDR_VAR 0 2
10692: PUSH
10693: EMPTY
10694: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
10695: LD_ADDR_VAR 0 3
10699: PUSH
10700: EMPTY
10701: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10702: LD_ADDR_LOC 28
10706: PUSH
10707: EMPTY
10708: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10709: LD_ADDR_LOC 29
10713: PUSH
10714: EMPTY
10715: ST_TO_ADDR
// Banned_Controls := [ ] ;
10716: LD_ADDR_LOC 30
10720: PUSH
10721: EMPTY
10722: ST_TO_ADDR
// Banned_Engines := [ ] ;
10723: LD_ADDR_LOC 31
10727: PUSH
10728: EMPTY
10729: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
10730: LD_ADDR_LOC 26
10734: PUSH
10735: LD_INT 37
10737: PUSH
10738: EMPTY
10739: LIST
10740: PUSH
10741: LD_INT 4
10743: PUSH
10744: LD_INT 5
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: PUSH
10751: LD_INT 31
10753: PUSH
10754: LD_INT 32
10756: PUSH
10757: LD_INT 33
10759: PUSH
10760: EMPTY
10761: LIST
10762: LIST
10763: LIST
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: LIST
10769: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
10770: LD_ADDR_LOC 27
10774: PUSH
10775: LD_INT 2
10777: PUSH
10778: LD_INT 2
10780: PUSH
10781: LD_INT 4
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: LIST
10788: ST_TO_ADDR
// end ; 2 :
10789: GO 12525
10791: LD_INT 2
10793: DOUBLE
10794: EQUAL
10795: IFTRUE 10799
10797: GO 11008
10799: POP
// begin def_base_level := 1 ;
10800: LD_ADDR_EXP 35
10804: PUSH
10805: LD_INT 1
10807: ST_TO_ADDR
// def_amount_of_people := 2 ;
10808: LD_ADDR_EXP 36
10812: PUSH
10813: LD_INT 2
10815: ST_TO_ADDR
// def_skill_level := 3 ;
10816: LD_ADDR_EXP 37
10820: PUSH
10821: LD_INT 3
10823: ST_TO_ADDR
// def_starting_resources := 3 ;
10824: LD_ADDR_EXP 38
10828: PUSH
10829: LD_INT 3
10831: ST_TO_ADDR
// def_shipments_density := 2 ;
10832: LD_ADDR_EXP 39
10836: PUSH
10837: LD_INT 2
10839: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10840: LD_ADDR_EXP 40
10844: PUSH
10845: LD_INT 1
10847: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10848: LD_ADDR_EXP 41
10852: PUSH
10853: LD_INT 2
10855: ST_TO_ADDR
// def_shared_vision := 1 ;
10856: LD_ADDR_EXP 42
10860: PUSH
10861: LD_INT 1
10863: ST_TO_ADDR
// def_morale_flags := 0 ;
10864: LD_ADDR_EXP 43
10868: PUSH
10869: LD_INT 0
10871: ST_TO_ADDR
// def_siberite_detection := 1 ;
10872: LD_ADDR_EXP 44
10876: PUSH
10877: LD_INT 1
10879: ST_TO_ADDR
// def_people_respawning := 0 ;
10880: LD_ADDR_EXP 45
10884: PUSH
10885: LD_INT 0
10887: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
10888: LD_ADDR_EXP 46
10892: PUSH
10893: LD_INT 0
10895: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10896: LD_ADDR_EXP 47
10900: PUSH
10901: LD_INT 0
10903: ST_TO_ADDR
// def_builduptime := 2 ;
10904: LD_ADDR_EXP 48
10908: PUSH
10909: LD_INT 2
10911: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
10912: LD_ADDR_VAR 0 2
10916: PUSH
10917: LD_INT 1
10919: PUSH
10920: EMPTY
10921: LIST
10922: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
10923: LD_ADDR_VAR 0 3
10927: PUSH
10928: EMPTY
10929: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10930: LD_ADDR_LOC 28
10934: PUSH
10935: EMPTY
10936: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10937: LD_ADDR_LOC 29
10941: PUSH
10942: EMPTY
10943: ST_TO_ADDR
// Banned_Controls := [ ] ;
10944: LD_ADDR_LOC 30
10948: PUSH
10949: EMPTY
10950: ST_TO_ADDR
// Banned_Engines := [ ] ;
10951: LD_ADDR_LOC 31
10955: PUSH
10956: EMPTY
10957: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
10958: LD_ADDR_LOC 26
10962: PUSH
10963: LD_INT 4
10965: PUSH
10966: LD_INT 5
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: PUSH
10973: LD_INT 31
10975: PUSH
10976: LD_INT 32
10978: PUSH
10979: LD_INT 33
10981: PUSH
10982: EMPTY
10983: LIST
10984: LIST
10985: LIST
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
10991: LD_ADDR_LOC 27
10995: PUSH
10996: LD_INT 1
10998: PUSH
10999: LD_INT 2
11001: PUSH
11002: EMPTY
11003: LIST
11004: LIST
11005: ST_TO_ADDR
// end ; 3 :
11006: GO 12525
11008: LD_INT 3
11010: DOUBLE
11011: EQUAL
11012: IFTRUE 11016
11014: GO 11259
11016: POP
// begin def_base_level := 1 ;
11017: LD_ADDR_EXP 35
11021: PUSH
11022: LD_INT 1
11024: ST_TO_ADDR
// def_amount_of_people := 2 ;
11025: LD_ADDR_EXP 36
11029: PUSH
11030: LD_INT 2
11032: ST_TO_ADDR
// def_skill_level := 3 ;
11033: LD_ADDR_EXP 37
11037: PUSH
11038: LD_INT 3
11040: ST_TO_ADDR
// def_starting_resources := 3 ;
11041: LD_ADDR_EXP 38
11045: PUSH
11046: LD_INT 3
11048: ST_TO_ADDR
// def_shipments_density := 1 ;
11049: LD_ADDR_EXP 39
11053: PUSH
11054: LD_INT 1
11056: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11057: LD_ADDR_EXP 40
11061: PUSH
11062: LD_INT 0
11064: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
11065: LD_ADDR_EXP 41
11069: PUSH
11070: LD_INT 1
11072: ST_TO_ADDR
// def_shared_vision := 1 ;
11073: LD_ADDR_EXP 42
11077: PUSH
11078: LD_INT 1
11080: ST_TO_ADDR
// def_morale_flags := 0 ;
11081: LD_ADDR_EXP 43
11085: PUSH
11086: LD_INT 0
11088: ST_TO_ADDR
// def_siberite_detection := 1 ;
11089: LD_ADDR_EXP 44
11093: PUSH
11094: LD_INT 1
11096: ST_TO_ADDR
// def_people_respawning := 0 ;
11097: LD_ADDR_EXP 45
11101: PUSH
11102: LD_INT 0
11104: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
11105: LD_ADDR_EXP 46
11109: PUSH
11110: LD_INT 2
11112: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11113: LD_ADDR_EXP 47
11117: PUSH
11118: LD_INT 0
11120: ST_TO_ADDR
// def_builduptime := 1 ;
11121: LD_ADDR_EXP 48
11125: PUSH
11126: LD_INT 1
11128: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
11129: LD_ADDR_VAR 0 2
11133: PUSH
11134: LD_INT 23
11136: PUSH
11137: EMPTY
11138: LIST
11139: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
11140: LD_ADDR_VAR 0 3
11144: PUSH
11145: LD_INT 2
11147: PUSH
11148: LD_INT 37
11150: PUSH
11151: LD_INT 32
11153: PUSH
11154: LD_INT 33
11156: PUSH
11157: LD_INT 36
11159: PUSH
11160: LD_INT 16
11162: PUSH
11163: LD_INT 23
11165: PUSH
11166: LD_INT 21
11168: PUSH
11169: LD_INT 18
11171: PUSH
11172: LD_INT 22
11174: PUSH
11175: LD_INT 20
11177: PUSH
11178: LD_INT 19
11180: PUSH
11181: LD_INT 25
11183: PUSH
11184: LD_INT 17
11186: PUSH
11187: LD_INT 24
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11207: LD_ADDR_LOC 28
11211: PUSH
11212: EMPTY
11213: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11214: LD_ADDR_LOC 29
11218: PUSH
11219: EMPTY
11220: ST_TO_ADDR
// Banned_Controls := [ ] ;
11221: LD_ADDR_LOC 30
11225: PUSH
11226: EMPTY
11227: ST_TO_ADDR
// Banned_Engines := [ ] ;
11228: LD_ADDR_LOC 31
11232: PUSH
11233: EMPTY
11234: ST_TO_ADDR
// Restricted_Builds := [ ] ;
11235: LD_ADDR_LOC 26
11239: PUSH
11240: EMPTY
11241: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
11242: LD_ADDR_LOC 27
11246: PUSH
11247: EMPTY
11248: ST_TO_ADDR
// No_Mechs := true ;
11249: LD_ADDR_EXP 51
11253: PUSH
11254: LD_INT 1
11256: ST_TO_ADDR
// end ; 4 :
11257: GO 12525
11259: LD_INT 4
11261: DOUBLE
11262: EQUAL
11263: IFTRUE 11267
11265: GO 11442
11267: POP
// begin def_base_level := 1 ;
11268: LD_ADDR_EXP 35
11272: PUSH
11273: LD_INT 1
11275: ST_TO_ADDR
// def_amount_of_people := 2 ;
11276: LD_ADDR_EXP 36
11280: PUSH
11281: LD_INT 2
11283: ST_TO_ADDR
// def_skill_level := 3 ;
11284: LD_ADDR_EXP 37
11288: PUSH
11289: LD_INT 3
11291: ST_TO_ADDR
// def_starting_resources := 3 ;
11292: LD_ADDR_EXP 38
11296: PUSH
11297: LD_INT 3
11299: ST_TO_ADDR
// def_shipments_density := 2 ;
11300: LD_ADDR_EXP 39
11304: PUSH
11305: LD_INT 2
11307: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
11308: LD_ADDR_EXP 40
11312: PUSH
11313: LD_INT 1
11315: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
11316: LD_ADDR_EXP 41
11320: PUSH
11321: LD_INT 2
11323: ST_TO_ADDR
// def_shared_vision := 1 ;
11324: LD_ADDR_EXP 42
11328: PUSH
11329: LD_INT 1
11331: ST_TO_ADDR
// def_morale_flags := 0 ;
11332: LD_ADDR_EXP 43
11336: PUSH
11337: LD_INT 0
11339: ST_TO_ADDR
// def_siberite_detection := 1 ;
11340: LD_ADDR_EXP 44
11344: PUSH
11345: LD_INT 1
11347: ST_TO_ADDR
// def_people_respawning := 0 ;
11348: LD_ADDR_EXP 45
11352: PUSH
11353: LD_INT 0
11355: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
11356: LD_ADDR_EXP 46
11360: PUSH
11361: LD_INT 0
11363: ST_TO_ADDR
// def_siberite_bomb := 1 ;
11364: LD_ADDR_EXP 47
11368: PUSH
11369: LD_INT 1
11371: ST_TO_ADDR
// def_builduptime := 3 ;
11372: LD_ADDR_EXP 48
11376: PUSH
11377: LD_INT 3
11379: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
11380: LD_ADDR_VAR 0 2
11384: PUSH
11385: LD_INT 1
11387: PUSH
11388: EMPTY
11389: LIST
11390: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
11391: LD_ADDR_VAR 0 3
11395: PUSH
11396: EMPTY
11397: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11398: LD_ADDR_LOC 28
11402: PUSH
11403: EMPTY
11404: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11405: LD_ADDR_LOC 29
11409: PUSH
11410: EMPTY
11411: ST_TO_ADDR
// Banned_Controls := [ ] ;
11412: LD_ADDR_LOC 30
11416: PUSH
11417: EMPTY
11418: ST_TO_ADDR
// Banned_Engines := [ ] ;
11419: LD_ADDR_LOC 31
11423: PUSH
11424: EMPTY
11425: ST_TO_ADDR
// Restricted_Builds := [ ] ;
11426: LD_ADDR_LOC 26
11430: PUSH
11431: EMPTY
11432: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
11433: LD_ADDR_LOC 27
11437: PUSH
11438: EMPTY
11439: ST_TO_ADDR
// end ; 5 :
11440: GO 12525
11442: LD_INT 5
11444: DOUBLE
11445: EQUAL
11446: IFTRUE 11450
11448: GO 11699
11450: POP
// begin def_base_level := 0 ;
11451: LD_ADDR_EXP 35
11455: PUSH
11456: LD_INT 0
11458: ST_TO_ADDR
// def_amount_of_people := 0 ;
11459: LD_ADDR_EXP 36
11463: PUSH
11464: LD_INT 0
11466: ST_TO_ADDR
// def_skill_level := 0 ;
11467: LD_ADDR_EXP 37
11471: PUSH
11472: LD_INT 0
11474: ST_TO_ADDR
// def_starting_resources := 0 ;
11475: LD_ADDR_EXP 38
11479: PUSH
11480: LD_INT 0
11482: ST_TO_ADDR
// def_shipments_density := 0 ;
11483: LD_ADDR_EXP 39
11487: PUSH
11488: LD_INT 0
11490: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11491: LD_ADDR_EXP 40
11495: PUSH
11496: LD_INT 0
11498: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
11499: LD_ADDR_EXP 41
11503: PUSH
11504: LD_INT 0
11506: ST_TO_ADDR
// def_shared_vision := 1 ;
11507: LD_ADDR_EXP 42
11511: PUSH
11512: LD_INT 1
11514: ST_TO_ADDR
// def_morale_flags := 0 ;
11515: LD_ADDR_EXP 43
11519: PUSH
11520: LD_INT 0
11522: ST_TO_ADDR
// def_siberite_detection := 0 ;
11523: LD_ADDR_EXP 44
11527: PUSH
11528: LD_INT 0
11530: ST_TO_ADDR
// def_people_respawning := 1 ;
11531: LD_ADDR_EXP 45
11535: PUSH
11536: LD_INT 1
11538: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
11539: LD_ADDR_EXP 46
11543: PUSH
11544: LD_INT 1
11546: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11547: LD_ADDR_EXP 47
11551: PUSH
11552: LD_INT 0
11554: ST_TO_ADDR
// def_builduptime := 0 ;
11555: LD_ADDR_EXP 48
11559: PUSH
11560: LD_INT 0
11562: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
11563: LD_ADDR_VAR 0 2
11567: PUSH
11568: LD_INT 10
11570: PUSH
11571: LD_INT 3
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
11578: LD_ADDR_VAR 0 3
11582: PUSH
11583: LD_INT 12
11585: PUSH
11586: LD_INT 11
11588: PUSH
11589: LD_INT 14
11591: PUSH
11592: LD_INT 13
11594: PUSH
11595: LD_INT 5
11597: PUSH
11598: LD_INT 24
11600: PUSH
11601: LD_INT 21
11603: PUSH
11604: LD_INT 33
11606: PUSH
11607: LD_INT 36
11609: PUSH
11610: EMPTY
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
11621: LD_ADDR_LOC 28
11625: PUSH
11626: LD_INT 31
11628: PUSH
11629: EMPTY
11630: LIST
11631: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11632: LD_ADDR_LOC 29
11636: PUSH
11637: EMPTY
11638: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
11639: LD_ADDR_LOC 30
11643: PUSH
11644: LD_INT 2
11646: PUSH
11647: EMPTY
11648: LIST
11649: ST_TO_ADDR
// Banned_Engines := [ ] ;
11650: LD_ADDR_LOC 31
11654: PUSH
11655: EMPTY
11656: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
11657: LD_ADDR_LOC 26
11661: PUSH
11662: LD_INT 4
11664: PUSH
11665: EMPTY
11666: LIST
11667: PUSH
11668: LD_INT 31
11670: PUSH
11671: LD_INT 32
11673: PUSH
11674: EMPTY
11675: LIST
11676: LIST
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
11682: LD_ADDR_LOC 27
11686: PUSH
11687: LD_INT 1
11689: PUSH
11690: LD_INT 1
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: ST_TO_ADDR
// end ; 6 :
11697: GO 12525
11699: LD_INT 6
11701: DOUBLE
11702: EQUAL
11703: IFTRUE 11707
11705: GO 11910
11707: POP
// begin def_base_level := 1 ;
11708: LD_ADDR_EXP 35
11712: PUSH
11713: LD_INT 1
11715: ST_TO_ADDR
// def_amount_of_people := 2 ;
11716: LD_ADDR_EXP 36
11720: PUSH
11721: LD_INT 2
11723: ST_TO_ADDR
// def_skill_level := 3 ;
11724: LD_ADDR_EXP 37
11728: PUSH
11729: LD_INT 3
11731: ST_TO_ADDR
// def_starting_resources := 3 ;
11732: LD_ADDR_EXP 38
11736: PUSH
11737: LD_INT 3
11739: ST_TO_ADDR
// def_shipments_density := 1 ;
11740: LD_ADDR_EXP 39
11744: PUSH
11745: LD_INT 1
11747: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11748: LD_ADDR_EXP 40
11752: PUSH
11753: LD_INT 0
11755: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
11756: LD_ADDR_EXP 41
11760: PUSH
11761: LD_INT 1
11763: ST_TO_ADDR
// def_shared_vision := 1 ;
11764: LD_ADDR_EXP 42
11768: PUSH
11769: LD_INT 1
11771: ST_TO_ADDR
// def_morale_flags := 0 ;
11772: LD_ADDR_EXP 43
11776: PUSH
11777: LD_INT 0
11779: ST_TO_ADDR
// def_siberite_detection := 1 ;
11780: LD_ADDR_EXP 44
11784: PUSH
11785: LD_INT 1
11787: ST_TO_ADDR
// def_people_respawning := 2 ;
11788: LD_ADDR_EXP 45
11792: PUSH
11793: LD_INT 2
11795: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
11796: LD_ADDR_EXP 46
11800: PUSH
11801: LD_INT 1
11803: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11804: LD_ADDR_EXP 47
11808: PUSH
11809: LD_INT 0
11811: ST_TO_ADDR
// def_builduptime := 1 ;
11812: LD_ADDR_EXP 48
11816: PUSH
11817: LD_INT 1
11819: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
11820: LD_ADDR_VAR 0 2
11824: PUSH
11825: LD_INT 23
11827: PUSH
11828: EMPTY
11829: LIST
11830: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
11831: LD_ADDR_VAR 0 3
11835: PUSH
11836: LD_INT 2
11838: PUSH
11839: LD_INT 37
11841: PUSH
11842: LD_INT 31
11844: PUSH
11845: LD_INT 32
11847: PUSH
11848: LD_INT 33
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11858: LD_ADDR_LOC 28
11862: PUSH
11863: EMPTY
11864: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11865: LD_ADDR_LOC 29
11869: PUSH
11870: EMPTY
11871: ST_TO_ADDR
// Banned_Controls := [ ] ;
11872: LD_ADDR_LOC 30
11876: PUSH
11877: EMPTY
11878: ST_TO_ADDR
// Banned_Engines := [ ] ;
11879: LD_ADDR_LOC 31
11883: PUSH
11884: EMPTY
11885: ST_TO_ADDR
// Restricted_Builds := [ ] ;
11886: LD_ADDR_LOC 26
11890: PUSH
11891: EMPTY
11892: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
11893: LD_ADDR_LOC 27
11897: PUSH
11898: EMPTY
11899: ST_TO_ADDR
// No_Mechs := true ;
11900: LD_ADDR_EXP 51
11904: PUSH
11905: LD_INT 1
11907: ST_TO_ADDR
// end ; 7 :
11908: GO 12525
11910: LD_INT 7
11912: DOUBLE
11913: EQUAL
11914: IFTRUE 11918
11916: GO 12116
11918: POP
// begin def_base_level := 1 ;
11919: LD_ADDR_EXP 35
11923: PUSH
11924: LD_INT 1
11926: ST_TO_ADDR
// def_amount_of_people := 2 ;
11927: LD_ADDR_EXP 36
11931: PUSH
11932: LD_INT 2
11934: ST_TO_ADDR
// def_skill_level := 3 ;
11935: LD_ADDR_EXP 37
11939: PUSH
11940: LD_INT 3
11942: ST_TO_ADDR
// def_starting_resources := 3 ;
11943: LD_ADDR_EXP 38
11947: PUSH
11948: LD_INT 3
11950: ST_TO_ADDR
// def_shipments_density := 1 ;
11951: LD_ADDR_EXP 39
11955: PUSH
11956: LD_INT 1
11958: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
11959: LD_ADDR_EXP 40
11963: PUSH
11964: LD_INT 1
11966: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
11967: LD_ADDR_EXP 41
11971: PUSH
11972: LD_INT 2
11974: ST_TO_ADDR
// def_shared_vision := 1 ;
11975: LD_ADDR_EXP 42
11979: PUSH
11980: LD_INT 1
11982: ST_TO_ADDR
// def_morale_flags := 0 ;
11983: LD_ADDR_EXP 43
11987: PUSH
11988: LD_INT 0
11990: ST_TO_ADDR
// def_siberite_detection := 1 ;
11991: LD_ADDR_EXP 44
11995: PUSH
11996: LD_INT 1
11998: ST_TO_ADDR
// def_people_respawning := 0 ;
11999: LD_ADDR_EXP 45
12003: PUSH
12004: LD_INT 0
12006: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
12007: LD_ADDR_EXP 46
12011: PUSH
12012: LD_INT 1
12014: ST_TO_ADDR
// def_siberite_bomb := 0 ;
12015: LD_ADDR_EXP 47
12019: PUSH
12020: LD_INT 0
12022: ST_TO_ADDR
// def_builduptime := 3 ;
12023: LD_ADDR_EXP 48
12027: PUSH
12028: LD_INT 3
12030: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
12031: LD_ADDR_VAR 0 2
12035: PUSH
12036: LD_INT 23
12038: PUSH
12039: EMPTY
12040: LIST
12041: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
12042: LD_ADDR_VAR 0 3
12046: PUSH
12047: LD_INT 37
12049: PUSH
12050: EMPTY
12051: LIST
12052: ST_TO_ADDR
// Banned_Weapons := [ ] ;
12053: LD_ADDR_LOC 28
12057: PUSH
12058: EMPTY
12059: ST_TO_ADDR
// Banned_Chassis := [ ] ;
12060: LD_ADDR_LOC 29
12064: PUSH
12065: EMPTY
12066: ST_TO_ADDR
// Banned_Controls := [ ] ;
12067: LD_ADDR_LOC 30
12071: PUSH
12072: EMPTY
12073: ST_TO_ADDR
// Banned_Engines := [ ] ;
12074: LD_ADDR_LOC 31
12078: PUSH
12079: EMPTY
12080: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
12081: LD_ADDR_LOC 26
12085: PUSH
12086: LD_INT 31
12088: PUSH
12089: LD_INT 32
12091: PUSH
12092: LD_INT 33
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: LIST
12099: PUSH
12100: EMPTY
12101: LIST
12102: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
12103: LD_ADDR_LOC 27
12107: PUSH
12108: LD_INT 10
12110: PUSH
12111: EMPTY
12112: LIST
12113: ST_TO_ADDR
// end ; 8 :
12114: GO 12525
12116: LD_INT 8
12118: DOUBLE
12119: EQUAL
12120: IFTRUE 12124
12122: GO 12524
12124: POP
// begin def_base_level := 0 ;
12125: LD_ADDR_EXP 35
12129: PUSH
12130: LD_INT 0
12132: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
12133: LD_ADDR_EXP 36
12137: PUSH
12138: LD_INT 0
12140: PPUSH
12141: LD_INT 1
12143: PPUSH
12144: CALL_OW 12
12148: ST_TO_ADDR
// def_skill_level := 0 ;
12149: LD_ADDR_EXP 37
12153: PUSH
12154: LD_INT 0
12156: ST_TO_ADDR
// def_starting_resources := 2 ;
12157: LD_ADDR_EXP 38
12161: PUSH
12162: LD_INT 2
12164: ST_TO_ADDR
// def_shipments_density := 1 ;
12165: LD_ADDR_EXP 39
12169: PUSH
12170: LD_INT 1
12172: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
12173: LD_ADDR_EXP 40
12177: PUSH
12178: LD_INT 0
12180: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
12181: LD_ADDR_EXP 41
12185: PUSH
12186: LD_INT 0
12188: ST_TO_ADDR
// def_shared_vision := 1 ;
12189: LD_ADDR_EXP 42
12193: PUSH
12194: LD_INT 1
12196: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
12197: LD_ADDR_EXP 43
12201: PUSH
12202: LD_INT 0
12204: PPUSH
12205: LD_INT 2
12207: PPUSH
12208: CALL_OW 12
12212: ST_TO_ADDR
// def_siberite_detection := 0 ;
12213: LD_ADDR_EXP 44
12217: PUSH
12218: LD_INT 0
12220: ST_TO_ADDR
// def_people_respawning := 0 ;
12221: LD_ADDR_EXP 45
12225: PUSH
12226: LD_INT 0
12228: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
12229: LD_ADDR_EXP 46
12233: PUSH
12234: LD_INT 2
12236: ST_TO_ADDR
// def_siberite_bomb := 0 ;
12237: LD_ADDR_EXP 47
12241: PUSH
12242: LD_INT 0
12244: ST_TO_ADDR
// def_builduptime := 0 ;
12245: LD_ADDR_EXP 48
12249: PUSH
12250: LD_INT 0
12252: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
12253: LD_ADDR_VAR 0 2
12257: PUSH
12258: LD_INT 23
12260: PUSH
12261: LD_INT 20
12263: PUSH
12264: LD_INT 40
12266: PUSH
12267: LD_INT 47
12269: PUSH
12270: LD_INT 46
12272: PUSH
12273: LD_INT 39
12275: PUSH
12276: LD_INT 71
12278: PUSH
12279: LD_INT 34
12281: PUSH
12282: LD_INT 41
12284: PUSH
12285: LD_INT 44
12287: PUSH
12288: LD_INT 17
12290: PUSH
12291: LD_INT 16
12293: PUSH
12294: EMPTY
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
12308: LD_ADDR_VAR 0 3
12312: PUSH
12313: LD_INT 37
12315: PUSH
12316: LD_INT 5
12318: PUSH
12319: LD_INT 13
12321: PUSH
12322: LD_INT 34
12324: PUSH
12325: LD_INT 12
12327: PUSH
12328: LD_INT 15
12330: PUSH
12331: LD_INT 11
12333: PUSH
12334: LD_INT 14
12336: PUSH
12337: LD_INT 29
12339: PUSH
12340: LD_INT 30
12342: PUSH
12343: LD_INT 28
12345: PUSH
12346: LD_INT 24
12348: PUSH
12349: LD_INT 25
12351: PUSH
12352: LD_INT 20
12354: PUSH
12355: LD_INT 21
12357: PUSH
12358: LD_INT 22
12360: PUSH
12361: LD_INT 36
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: ST_TO_ADDR
// Banned_Weapons := [ ] ;
12383: LD_ADDR_LOC 28
12387: PUSH
12388: EMPTY
12389: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
12390: LD_ADDR_LOC 29
12394: PUSH
12395: LD_INT 14
12397: PUSH
12398: EMPTY
12399: LIST
12400: ST_TO_ADDR
// Banned_Controls := [ ] ;
12401: LD_ADDR_LOC 30
12405: PUSH
12406: EMPTY
12407: ST_TO_ADDR
// Banned_Engines := [ ] ;
12408: LD_ADDR_LOC 31
12412: PUSH
12413: EMPTY
12414: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
12415: LD_ADDR_LOC 26
12419: PUSH
12420: LD_INT 31
12422: PUSH
12423: LD_INT 32
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: PUSH
12430: LD_INT 4
12432: PUSH
12433: EMPTY
12434: LIST
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
12440: LD_ADDR_LOC 27
12444: PUSH
12445: LD_INT 2
12447: PUSH
12448: LD_INT 1
12450: PUSH
12451: EMPTY
12452: LIST
12453: LIST
12454: ST_TO_ADDR
// for i := 1 to 8 do
12455: LD_ADDR_VAR 0 4
12459: PUSH
12460: DOUBLE
12461: LD_INT 1
12463: DEC
12464: ST_TO_ADDR
12465: LD_INT 8
12467: PUSH
12468: FOR_TO
12469: IFFALSE 12520
// if ( Side_Nations [ i ] = 3 ) then
12471: LD_EXP 19
12475: PUSH
12476: LD_VAR 0 4
12480: ARRAY
12481: PUSH
12482: LD_INT 3
12484: EQUAL
12485: IFFALSE 12518
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
12487: LD_ADDR_EXP 19
12491: PUSH
12492: LD_EXP 19
12496: PPUSH
12497: LD_VAR 0 4
12501: PPUSH
12502: LD_INT 1
12504: PPUSH
12505: LD_INT 2
12507: PPUSH
12508: CALL_OW 12
12512: PPUSH
12513: CALL_OW 1
12517: ST_TO_ADDR
12518: GO 12468
12520: POP
12521: POP
// end ; end ;
12522: GO 12525
12524: POP
// for i := 1 to 8 do
12525: LD_ADDR_VAR 0 4
12529: PUSH
12530: DOUBLE
12531: LD_INT 1
12533: DEC
12534: ST_TO_ADDR
12535: LD_INT 8
12537: PUSH
12538: FOR_TO
12539: IFFALSE 12623
// if Side_Positions [ i ] then
12541: LD_EXP 18
12545: PUSH
12546: LD_VAR 0 4
12550: ARRAY
12551: IFFALSE 12621
// begin for j in Unavailable_Techs do
12553: LD_ADDR_VAR 0 5
12557: PUSH
12558: LD_VAR 0 2
12562: PUSH
12563: FOR_IN
12564: IFFALSE 12585
// SetTech ( j , i , 0 ) ;
12566: LD_VAR 0 5
12570: PPUSH
12571: LD_VAR 0 4
12575: PPUSH
12576: LD_INT 0
12578: PPUSH
12579: CALL_OW 322
12583: GO 12563
12585: POP
12586: POP
// for j in Unavailable_Builds do
12587: LD_ADDR_VAR 0 5
12591: PUSH
12592: LD_VAR 0 3
12596: PUSH
12597: FOR_IN
12598: IFFALSE 12619
// SetRestrict ( j , i , 0 ) ;
12600: LD_VAR 0 5
12604: PPUSH
12605: LD_VAR 0 4
12609: PPUSH
12610: LD_INT 0
12612: PPUSH
12613: CALL_OW 324
12617: GO 12597
12619: POP
12620: POP
// end ;
12621: GO 12538
12623: POP
12624: POP
// end ;
12625: LD_VAR 0 1
12629: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
12630: LD_INT 0
12632: PPUSH
12633: PPUSH
12634: PPUSH
12635: PPUSH
12636: PPUSH
12637: PPUSH
12638: PPUSH
// for i := 1 to Restricted_Builds do
12639: LD_ADDR_VAR 0 2
12643: PUSH
12644: DOUBLE
12645: LD_INT 1
12647: DEC
12648: ST_TO_ADDR
12649: LD_LOC 26
12653: PUSH
12654: FOR_TO
12655: IFFALSE 12965
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
12657: LD_LOC 26
12661: PUSH
12662: LD_VAR 0 2
12666: ARRAY
12667: PUSH
12668: LD_INT 1
12670: ARRAY
12671: PUSH
12672: LD_INT 31
12674: DOUBLE
12675: EQUAL
12676: IFTRUE 12692
12678: LD_INT 32
12680: DOUBLE
12681: EQUAL
12682: IFTRUE 12692
12684: LD_INT 33
12686: DOUBLE
12687: EQUAL
12688: IFTRUE 12692
12690: GO 12703
12692: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
12693: LD_ADDR_VAR 0 6
12697: PUSH
12698: LD_STRING #Turrets
12700: ST_TO_ADDR
12701: GO 12748
12703: LD_INT 4
12705: DOUBLE
12706: EQUAL
12707: IFTRUE 12717
12709: LD_INT 5
12711: DOUBLE
12712: EQUAL
12713: IFTRUE 12717
12715: GO 12728
12717: POP
// btype := #Armouries ; b_Behemoth :
12718: LD_ADDR_VAR 0 6
12722: PUSH
12723: LD_STRING #Armouries
12725: ST_TO_ADDR
12726: GO 12748
12728: LD_INT 37
12730: DOUBLE
12731: EQUAL
12732: IFTRUE 12736
12734: GO 12747
12736: POP
// btype := #Behemoths ; end ;
12737: LD_ADDR_VAR 0 6
12741: PUSH
12742: LD_STRING #Behemoths
12744: ST_TO_ADDR
12745: GO 12748
12747: POP
// list := [ ] ;
12748: LD_ADDR_VAR 0 7
12752: PUSH
12753: EMPTY
12754: ST_TO_ADDR
// for j := 1 to 8 do
12755: LD_ADDR_VAR 0 3
12759: PUSH
12760: DOUBLE
12761: LD_INT 1
12763: DEC
12764: ST_TO_ADDR
12765: LD_INT 8
12767: PUSH
12768: FOR_TO
12769: IFFALSE 12862
// if Side_Positions [ j ] then
12771: LD_EXP 18
12775: PUSH
12776: LD_VAR 0 3
12780: ARRAY
12781: IFFALSE 12860
// begin amount := 0 ;
12783: LD_ADDR_VAR 0 5
12787: PUSH
12788: LD_INT 0
12790: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
12791: LD_ADDR_VAR 0 4
12795: PUSH
12796: LD_LOC 26
12800: PUSH
12801: LD_VAR 0 2
12805: ARRAY
12806: PUSH
12807: FOR_IN
12808: IFFALSE 12856
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
12810: LD_ADDR_VAR 0 5
12814: PUSH
12815: LD_VAR 0 5
12819: PUSH
12820: LD_INT 22
12822: PUSH
12823: LD_VAR 0 3
12827: PUSH
12828: EMPTY
12829: LIST
12830: LIST
12831: PUSH
12832: LD_INT 30
12834: PUSH
12835: LD_VAR 0 4
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: PPUSH
12848: CALL_OW 69
12852: PLUS
12853: ST_TO_ADDR
12854: GO 12807
12856: POP
12857: POP
// break ;
12858: GO 12862
// end ;
12860: GO 12768
12862: POP
12863: POP
// list := [ ] ;
12864: LD_ADDR_VAR 0 7
12868: PUSH
12869: EMPTY
12870: ST_TO_ADDR
// for j := 1 to 8 do
12871: LD_ADDR_VAR 0 3
12875: PUSH
12876: DOUBLE
12877: LD_INT 1
12879: DEC
12880: ST_TO_ADDR
12881: LD_INT 8
12883: PUSH
12884: FOR_TO
12885: IFFALSE 12905
// list := list ^ amount ;
12887: LD_ADDR_VAR 0 7
12891: PUSH
12892: LD_VAR 0 7
12896: PUSH
12897: LD_VAR 0 5
12901: ADD
12902: ST_TO_ADDR
12903: GO 12884
12905: POP
12906: POP
// Already_Built := Already_Built ^ [ list ] ;
12907: LD_ADDR_LOC 32
12911: PUSH
12912: LD_LOC 32
12916: PUSH
12917: LD_VAR 0 7
12921: PUSH
12922: EMPTY
12923: LIST
12924: ADD
12925: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
12926: LD_ADDR_LOC 33
12930: PUSH
12931: LD_LOC 33
12935: PUSH
12936: LD_VAR 0 6
12940: PUSH
12941: LD_VAR 0 5
12945: PUSH
12946: LD_LOC 27
12950: PUSH
12951: LD_VAR 0 2
12955: ARRAY
12956: PUSH
12957: EMPTY
12958: LIST
12959: LIST
12960: LIST
12961: ADD
12962: ST_TO_ADDR
// end ;
12963: GO 12654
12965: POP
12966: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
12967: LD_ADDR_LOC 34
12971: PUSH
12972: LD_INT 0
12974: PUSH
12975: LD_INT 0
12977: PUSH
12978: LD_INT 0
12980: PUSH
12981: LD_INT 0
12983: PUSH
12984: LD_INT 0
12986: PUSH
12987: LD_INT 0
12989: PUSH
12990: LD_INT 0
12992: PUSH
12993: LD_INT 0
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: ST_TO_ADDR
// if Limits_Info then
13006: LD_LOC 33
13010: IFFALSE 13026
// Limits_Info := #Limits ^ Limits_Info ;
13012: LD_ADDR_LOC 33
13016: PUSH
13017: LD_STRING #Limits
13019: PUSH
13020: LD_LOC 33
13024: ADD
13025: ST_TO_ADDR
// end ;
13026: LD_VAR 0 1
13030: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
13031: LD_INT 0
13033: PPUSH
13034: PPUSH
13035: PPUSH
13036: PPUSH
// for i := 1 to Restricted_Builds do
13037: LD_ADDR_VAR 0 7
13041: PUSH
13042: DOUBLE
13043: LD_INT 1
13045: DEC
13046: ST_TO_ADDR
13047: LD_LOC 26
13051: PUSH
13052: FOR_TO
13053: IFFALSE 13476
// if BType in Restricted_Builds [ i ] then
13055: LD_VAR 0 2
13059: PUSH
13060: LD_LOC 26
13064: PUSH
13065: LD_VAR 0 7
13069: ARRAY
13070: IN
13071: IFFALSE 13474
// begin if old_side then
13073: LD_VAR 0 4
13077: IFFALSE 13203
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
13079: LD_LOC 32
13083: PUSH
13084: LD_VAR 0 7
13088: ARRAY
13089: PUSH
13090: LD_VAR 0 3
13094: ARRAY
13095: PUSH
13096: LD_VAR 0 5
13100: PLUS
13101: PUSH
13102: LD_LOC 27
13106: PUSH
13107: LD_VAR 0 7
13111: ARRAY
13112: GREATER
13113: IFFALSE 13139
// begin SetSide ( un , old_side ) ;
13115: LD_VAR 0 1
13119: PPUSH
13120: LD_VAR 0 4
13124: PPUSH
13125: CALL_OW 235
// count := 0 ;
13129: LD_ADDR_VAR 0 5
13133: PUSH
13134: LD_INT 0
13136: ST_TO_ADDR
// end else
13137: GO 13203
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
13139: LD_ADDR_LOC 32
13143: PUSH
13144: LD_LOC 32
13148: PPUSH
13149: LD_VAR 0 7
13153: PPUSH
13154: LD_LOC 32
13158: PUSH
13159: LD_VAR 0 7
13163: ARRAY
13164: PPUSH
13165: LD_VAR 0 4
13169: PPUSH
13170: LD_LOC 32
13174: PUSH
13175: LD_VAR 0 7
13179: ARRAY
13180: PUSH
13181: LD_VAR 0 4
13185: ARRAY
13186: PUSH
13187: LD_VAR 0 5
13191: MINUS
13192: PPUSH
13193: CALL_OW 1
13197: PPUSH
13198: CALL_OW 1
13202: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
13203: LD_ADDR_LOC 32
13207: PUSH
13208: LD_LOC 32
13212: PPUSH
13213: LD_VAR 0 7
13217: PPUSH
13218: LD_LOC 32
13222: PUSH
13223: LD_VAR 0 7
13227: ARRAY
13228: PPUSH
13229: LD_VAR 0 3
13233: PPUSH
13234: LD_LOC 32
13238: PUSH
13239: LD_VAR 0 7
13243: ARRAY
13244: PUSH
13245: LD_VAR 0 3
13249: ARRAY
13250: PUSH
13251: LD_VAR 0 5
13255: PLUS
13256: PPUSH
13257: CALL_OW 1
13261: PPUSH
13262: CALL_OW 1
13266: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
13267: LD_VAR 0 5
13271: PUSH
13272: LD_INT 0
13274: NONEQUAL
13275: PUSH
13276: LD_VAR 0 3
13280: PUSH
13281: LD_OWVAR 2
13285: EQUAL
13286: AND
13287: IFFALSE 13330
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
13289: LD_ADDR_LOC 33
13293: PUSH
13294: LD_LOC 33
13298: PPUSH
13299: LD_INT 3
13301: PUSH
13302: LD_VAR 0 7
13306: MUL
13307: PPUSH
13308: LD_LOC 32
13312: PUSH
13313: LD_VAR 0 7
13317: ARRAY
13318: PUSH
13319: LD_VAR 0 3
13323: ARRAY
13324: PPUSH
13325: CALL_OW 1
13329: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
13330: LD_LOC 32
13334: PUSH
13335: LD_VAR 0 7
13339: ARRAY
13340: PUSH
13341: LD_VAR 0 3
13345: ARRAY
13346: PUSH
13347: LD_LOC 27
13351: PUSH
13352: LD_VAR 0 7
13356: ARRAY
13357: GREATER
13358: IFFALSE 13385
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
13360: LD_ADDR_LOC 34
13364: PUSH
13365: LD_LOC 34
13369: PPUSH
13370: LD_VAR 0 3
13374: PPUSH
13375: LD_INT 1
13377: PPUSH
13378: CALL_OW 1
13382: ST_TO_ADDR
// end else
13383: GO 13472
// begin for j := 1 to Restricted_Builds do
13385: LD_ADDR_VAR 0 8
13389: PUSH
13390: DOUBLE
13391: LD_INT 1
13393: DEC
13394: ST_TO_ADDR
13395: LD_LOC 26
13399: PUSH
13400: FOR_TO
13401: IFFALSE 13445
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
13403: LD_LOC 32
13407: PUSH
13408: LD_VAR 0 8
13412: ARRAY
13413: PUSH
13414: LD_VAR 0 3
13418: ARRAY
13419: PUSH
13420: LD_LOC 27
13424: PUSH
13425: LD_VAR 0 8
13429: ARRAY
13430: GREATER
13431: IFFALSE 13443
// begin Is_Cheater := true ;
13433: LD_ADDR_VAR 0 9
13437: PUSH
13438: LD_INT 1
13440: ST_TO_ADDR
// break ;
13441: GO 13445
// end ;
13443: GO 13400
13445: POP
13446: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
13447: LD_ADDR_LOC 34
13451: PUSH
13452: LD_LOC 34
13456: PPUSH
13457: LD_VAR 0 3
13461: PPUSH
13462: LD_VAR 0 9
13466: PPUSH
13467: CALL_OW 1
13471: ST_TO_ADDR
// end ; break ;
13472: GO 13476
// end ;
13474: GO 13052
13476: POP
13477: POP
// end ;
13478: LD_VAR 0 6
13482: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
13483: LD_VAR 0 5
13487: PUSH
13488: LD_LOC 28
13492: IN
13493: PUSH
13494: LD_VAR 0 2
13498: PUSH
13499: LD_LOC 29
13503: IN
13504: OR
13505: PUSH
13506: LD_VAR 0 4
13510: PUSH
13511: LD_LOC 30
13515: IN
13516: OR
13517: PUSH
13518: LD_VAR 0 3
13522: PUSH
13523: LD_LOC 31
13527: IN
13528: OR
13529: IFFALSE 13540
// ComCancel ( factory ) ;
13531: LD_VAR 0 1
13535: PPUSH
13536: CALL_OW 127
// end ;
13540: PPOPN 5
13542: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
13543: LD_VAR 0 2
13547: PUSH
13548: LD_LOC 28
13552: IN
13553: IFFALSE 13564
// ComCancel ( building ) ;
13555: LD_VAR 0 1
13559: PPUSH
13560: CALL_OW 127
// end ; end_of_file
13564: PPOPN 2
13566: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
13567: LD_INT 0
13569: PPUSH
13570: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
13571: LD_ADDR_VAR 0 2
13575: PUSH
13576: LD_STRING #Multi1x1-Time
13578: PUSH
13579: LD_OWVAR 1
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
13588: LD_INT 0
13590: PUSH
13591: LD_EXP 15
13595: PUSH
13596: LD_OWVAR 1
13600: MINUS
13601: LESSEQUAL
13602: IFFALSE 13633
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
13604: LD_ADDR_VAR 0 2
13608: PUSH
13609: LD_VAR 0 2
13613: PUSH
13614: LD_STRING #allowedsibbomb
13616: PUSH
13617: LD_EXP 15
13621: PUSH
13622: LD_OWVAR 1
13626: MINUS
13627: PUSH
13628: EMPTY
13629: LIST
13630: LIST
13631: ADD
13632: ST_TO_ADDR
// if ( ExtraStrings ) then
13633: LD_EXP 52
13637: IFFALSE 13659
// AllStrings := AllStrings ^  ^ ExtraStrings ;
13639: LD_ADDR_VAR 0 2
13643: PUSH
13644: LD_VAR 0 2
13648: PUSH
13649: LD_STRING 
13651: ADD
13652: PUSH
13653: LD_EXP 52
13657: ADD
13658: ST_TO_ADDR
// if ( LimitsStrings ) then
13659: CALL 10407 0 0
13663: IFFALSE 13685
// AllStrings := AllStrings ^  ^ LimitsStrings ;
13665: LD_ADDR_VAR 0 2
13669: PUSH
13670: LD_VAR 0 2
13674: PUSH
13675: LD_STRING 
13677: ADD
13678: PUSH
13679: CALL 10407 0 0
13683: ADD
13684: ST_TO_ADDR
// Display_Strings := AllStrings ;
13685: LD_ADDR_OWVAR 47
13689: PUSH
13690: LD_VAR 0 2
13694: ST_TO_ADDR
// end ;
13695: LD_VAR 0 1
13699: RET
// every 0 0$1 do
13700: GO 13702
13702: DISABLE
// begin ShowTimer ;
13703: CALL 13567 0 0
// enable ;
13707: ENABLE
// end ; end_of_file
13708: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
13709: LD_INT 0
13711: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
13712: LD_VAR 0 1
13716: PPUSH
13717: CALL_OW 255
13721: PUSH
13722: LD_VAR 0 4
13726: EQUAL
13727: IFFALSE 13746
// begin SetAchievement ( ACH_RAD ) ;
13729: LD_STRING ACH_RAD
13731: PPUSH
13732: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
13736: LD_STRING ACH_NL
13738: PPUSH
13739: LD_INT 1
13741: PPUSH
13742: CALL_OW 564
// end end ;
13746: LD_VAR 0 5
13750: RET
// export function SA_Win ( side ) ; begin
13751: LD_INT 0
13753: PPUSH
// case side of 1 :
13754: LD_VAR 0 1
13758: PUSH
13759: LD_INT 1
13761: DOUBLE
13762: EQUAL
13763: IFTRUE 13767
13765: GO 13780
13767: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
13768: LD_STRING ACH_AH
13770: PPUSH
13771: LD_INT 1
13773: PPUSH
13774: CALL_OW 564
13778: GO 13943
13780: LD_INT 2
13782: DOUBLE
13783: EQUAL
13784: IFTRUE 13788
13786: GO 13801
13788: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
13789: LD_STRING ACH_E
13791: PPUSH
13792: LD_INT 1
13794: PPUSH
13795: CALL_OW 564
13799: GO 13943
13801: LD_INT 3
13803: DOUBLE
13804: EQUAL
13805: IFTRUE 13809
13807: GO 13822
13809: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
13810: LD_STRING ACH_OOL
13812: PPUSH
13813: LD_INT 1
13815: PPUSH
13816: CALL_OW 564
13820: GO 13943
13822: LD_INT 1
13824: PUSH
13825: LD_INT 2
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: DOUBLE
13832: EQUAL
13833: IFTRUE 13837
13835: GO 13862
13837: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
13838: LD_STRING ACH_AH
13840: PPUSH
13841: LD_REAL  5.00000000000000E-0001
13844: PPUSH
13845: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
13849: LD_STRING ACH_E
13851: PPUSH
13852: LD_REAL  5.00000000000000E-0001
13855: PPUSH
13856: CALL_OW 564
// end ; [ 2 , 3 ] :
13860: GO 13943
13862: LD_INT 2
13864: PUSH
13865: LD_INT 3
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: DOUBLE
13872: EQUAL
13873: IFTRUE 13877
13875: GO 13902
13877: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
13878: LD_STRING ACH_OOL
13880: PPUSH
13881: LD_REAL  5.00000000000000E-0001
13884: PPUSH
13885: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
13889: LD_STRING ACH_E
13891: PPUSH
13892: LD_REAL  5.00000000000000E-0001
13895: PPUSH
13896: CALL_OW 564
// end ; [ 3 , 1 ] :
13900: GO 13943
13902: LD_INT 3
13904: PUSH
13905: LD_INT 1
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: DOUBLE
13912: EQUAL
13913: IFTRUE 13917
13915: GO 13942
13917: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
13918: LD_STRING ACH_AH
13920: PPUSH
13921: LD_REAL  5.00000000000000E-0001
13924: PPUSH
13925: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
13929: LD_STRING ACH_OOL
13931: PPUSH
13932: LD_REAL  5.00000000000000E-0001
13935: PPUSH
13936: CALL_OW 564
// end ; end ;
13940: GO 13943
13942: POP
// end ; end_of_file
13943: LD_VAR 0 2
13947: RET
// export function SetMpTechs ( ) ; var side , i ; begin
13948: LD_INT 0
13950: PPUSH
13951: PPUSH
13952: PPUSH
// for side = 1 to 8 do
13953: LD_ADDR_VAR 0 2
13957: PUSH
13958: DOUBLE
13959: LD_INT 1
13961: DEC
13962: ST_TO_ADDR
13963: LD_INT 8
13965: PUSH
13966: FOR_TO
13967: IFFALSE 14088
// begin for i = 1 to 72 do
13969: LD_ADDR_VAR 0 3
13973: PUSH
13974: DOUBLE
13975: LD_INT 1
13977: DEC
13978: ST_TO_ADDR
13979: LD_INT 72
13981: PUSH
13982: FOR_TO
13983: IFFALSE 14014
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
13985: LD_VAR 0 3
13989: PPUSH
13990: LD_VAR 0 2
13994: PPUSH
13995: LD_INT 0
13997: PPUSH
13998: LD_VAR 0 3
14002: PPUSH
14003: CALL_OW 565
14007: PPUSH
14008: CALL_OW 322
14012: GO 13982
14014: POP
14015: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
14016: LD_INT 73
14018: PPUSH
14019: LD_VAR 0 2
14023: PPUSH
14024: LD_INT 0
14026: PPUSH
14027: LD_INT 25
14029: PPUSH
14030: CALL_OW 565
14034: PPUSH
14035: CALL_OW 322
// for i = 0 to 40 do
14039: LD_ADDR_VAR 0 3
14043: PUSH
14044: DOUBLE
14045: LD_INT 0
14047: DEC
14048: ST_TO_ADDR
14049: LD_INT 40
14051: PUSH
14052: FOR_TO
14053: IFFALSE 14084
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
14055: LD_VAR 0 3
14059: PPUSH
14060: LD_VAR 0 2
14064: PPUSH
14065: LD_INT 1
14067: PPUSH
14068: LD_VAR 0 3
14072: PPUSH
14073: CALL_OW 565
14077: PPUSH
14078: CALL_OW 324
14082: GO 14052
14084: POP
14085: POP
// end ;
14086: GO 13966
14088: POP
14089: POP
// end ;
14090: LD_VAR 0 1
14094: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
14095: LD_INT 0
14097: PPUSH
14098: PPUSH
14099: PPUSH
// for side = 1 to 8 do
14100: LD_ADDR_VAR 0 3
14104: PUSH
14105: DOUBLE
14106: LD_INT 1
14108: DEC
14109: ST_TO_ADDR
14110: LD_INT 8
14112: PUSH
14113: FOR_TO
14114: IFFALSE 18110
// begin for i = 1 to 73 do
14116: LD_ADDR_VAR 0 4
14120: PUSH
14121: DOUBLE
14122: LD_INT 1
14124: DEC
14125: ST_TO_ADDR
14126: LD_INT 73
14128: PUSH
14129: FOR_TO
14130: IFFALSE 14151
// SetTech ( i , side , state_disabled ) ;
14132: LD_VAR 0 4
14136: PPUSH
14137: LD_VAR 0 3
14141: PPUSH
14142: LD_INT 0
14144: PPUSH
14145: CALL_OW 322
14149: GO 14129
14151: POP
14152: POP
// for i = 0 to 40 do
14153: LD_ADDR_VAR 0 4
14157: PUSH
14158: DOUBLE
14159: LD_INT 0
14161: DEC
14162: ST_TO_ADDR
14163: LD_INT 40
14165: PUSH
14166: FOR_TO
14167: IFFALSE 14188
// SetRestrict ( i , side , false ) ;
14169: LD_VAR 0 4
14173: PPUSH
14174: LD_VAR 0 3
14178: PPUSH
14179: LD_INT 0
14181: PPUSH
14182: CALL_OW 324
14186: GO 14166
14188: POP
14189: POP
// case level of 1 :
14190: LD_VAR 0 1
14194: PUSH
14195: LD_INT 1
14197: DOUBLE
14198: EQUAL
14199: IFTRUE 14203
14201: GO 14356
14203: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14204: LD_INT 35
14206: PPUSH
14207: LD_VAR 0 3
14211: PPUSH
14212: LD_INT 1
14214: PPUSH
14215: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14219: LD_INT 45
14221: PPUSH
14222: LD_VAR 0 3
14226: PPUSH
14227: LD_INT 1
14229: PPUSH
14230: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14234: LD_INT 46
14236: PPUSH
14237: LD_VAR 0 3
14241: PPUSH
14242: LD_INT 1
14244: PPUSH
14245: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14249: LD_INT 47
14251: PPUSH
14252: LD_VAR 0 3
14256: PPUSH
14257: LD_INT 1
14259: PPUSH
14260: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14264: LD_INT 0
14266: PPUSH
14267: LD_VAR 0 3
14271: PPUSH
14272: LD_INT 1
14274: PPUSH
14275: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14279: LD_INT 2
14281: PPUSH
14282: LD_VAR 0 3
14286: PPUSH
14287: LD_INT 1
14289: PPUSH
14290: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14294: LD_INT 4
14296: PPUSH
14297: LD_VAR 0 3
14301: PPUSH
14302: LD_INT 1
14304: PPUSH
14305: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14309: LD_INT 6
14311: PPUSH
14312: LD_VAR 0 3
14316: PPUSH
14317: LD_INT 1
14319: PPUSH
14320: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14324: LD_INT 29
14326: PPUSH
14327: LD_VAR 0 3
14331: PPUSH
14332: LD_INT 1
14334: PPUSH
14335: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14339: LD_INT 31
14341: PPUSH
14342: LD_VAR 0 3
14346: PPUSH
14347: LD_INT 1
14349: PPUSH
14350: CALL_OW 324
// end ; 2 :
14354: GO 18108
14356: LD_INT 2
14358: DOUBLE
14359: EQUAL
14360: IFTRUE 14364
14362: GO 14562
14364: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14365: LD_INT 35
14367: PPUSH
14368: LD_VAR 0 3
14372: PPUSH
14373: LD_INT 1
14375: PPUSH
14376: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14380: LD_INT 45
14382: PPUSH
14383: LD_VAR 0 3
14387: PPUSH
14388: LD_INT 1
14390: PPUSH
14391: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14395: LD_INT 46
14397: PPUSH
14398: LD_VAR 0 3
14402: PPUSH
14403: LD_INT 1
14405: PPUSH
14406: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14410: LD_INT 47
14412: PPUSH
14413: LD_VAR 0 3
14417: PPUSH
14418: LD_INT 1
14420: PPUSH
14421: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14425: LD_INT 1
14427: PPUSH
14428: LD_VAR 0 3
14432: PPUSH
14433: LD_INT 1
14435: PPUSH
14436: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14440: LD_INT 2
14442: PPUSH
14443: LD_VAR 0 3
14447: PPUSH
14448: LD_INT 1
14450: PPUSH
14451: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14455: LD_INT 11
14457: PPUSH
14458: LD_VAR 0 3
14462: PPUSH
14463: LD_INT 1
14465: PPUSH
14466: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14470: LD_INT 0
14472: PPUSH
14473: LD_VAR 0 3
14477: PPUSH
14478: LD_INT 1
14480: PPUSH
14481: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14485: LD_INT 2
14487: PPUSH
14488: LD_VAR 0 3
14492: PPUSH
14493: LD_INT 1
14495: PPUSH
14496: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14500: LD_INT 4
14502: PPUSH
14503: LD_VAR 0 3
14507: PPUSH
14508: LD_INT 1
14510: PPUSH
14511: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14515: LD_INT 6
14517: PPUSH
14518: LD_VAR 0 3
14522: PPUSH
14523: LD_INT 1
14525: PPUSH
14526: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14530: LD_INT 29
14532: PPUSH
14533: LD_VAR 0 3
14537: PPUSH
14538: LD_INT 1
14540: PPUSH
14541: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14545: LD_INT 31
14547: PPUSH
14548: LD_VAR 0 3
14552: PPUSH
14553: LD_INT 1
14555: PPUSH
14556: CALL_OW 324
// end ; 3 :
14560: GO 18108
14562: LD_INT 3
14564: DOUBLE
14565: EQUAL
14566: IFTRUE 14570
14568: GO 15023
14570: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14571: LD_INT 35
14573: PPUSH
14574: LD_VAR 0 3
14578: PPUSH
14579: LD_INT 1
14581: PPUSH
14582: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14586: LD_INT 45
14588: PPUSH
14589: LD_VAR 0 3
14593: PPUSH
14594: LD_INT 1
14596: PPUSH
14597: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14601: LD_INT 46
14603: PPUSH
14604: LD_VAR 0 3
14608: PPUSH
14609: LD_INT 1
14611: PPUSH
14612: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14616: LD_INT 47
14618: PPUSH
14619: LD_VAR 0 3
14623: PPUSH
14624: LD_INT 1
14626: PPUSH
14627: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14631: LD_INT 1
14633: PPUSH
14634: LD_VAR 0 3
14638: PPUSH
14639: LD_INT 1
14641: PPUSH
14642: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14646: LD_INT 2
14648: PPUSH
14649: LD_VAR 0 3
14653: PPUSH
14654: LD_INT 1
14656: PPUSH
14657: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14661: LD_INT 11
14663: PPUSH
14664: LD_VAR 0 3
14668: PPUSH
14669: LD_INT 1
14671: PPUSH
14672: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14676: LD_INT 48
14678: PPUSH
14679: LD_VAR 0 3
14683: PPUSH
14684: LD_INT 1
14686: PPUSH
14687: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14691: LD_INT 69
14693: PPUSH
14694: LD_VAR 0 3
14698: PPUSH
14699: LD_INT 1
14701: PPUSH
14702: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14706: LD_INT 39
14708: PPUSH
14709: LD_VAR 0 3
14713: PPUSH
14714: LD_INT 1
14716: PPUSH
14717: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14721: LD_INT 43
14723: PPUSH
14724: LD_VAR 0 3
14728: PPUSH
14729: LD_INT 1
14731: PPUSH
14732: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14736: LD_INT 51
14738: PPUSH
14739: LD_VAR 0 3
14743: PPUSH
14744: LD_INT 1
14746: PPUSH
14747: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14751: LD_INT 6
14753: PPUSH
14754: LD_VAR 0 3
14758: PPUSH
14759: LD_INT 1
14761: PPUSH
14762: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14766: LD_INT 0
14768: PPUSH
14769: LD_VAR 0 3
14773: PPUSH
14774: LD_INT 1
14776: PPUSH
14777: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14781: LD_INT 2
14783: PPUSH
14784: LD_VAR 0 3
14788: PPUSH
14789: LD_INT 1
14791: PPUSH
14792: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
14796: LD_INT 3
14798: PPUSH
14799: LD_VAR 0 3
14803: PPUSH
14804: LD_INT 1
14806: PPUSH
14807: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14811: LD_INT 4
14813: PPUSH
14814: LD_VAR 0 3
14818: PPUSH
14819: LD_INT 1
14821: PPUSH
14822: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14826: LD_INT 6
14828: PPUSH
14829: LD_VAR 0 3
14833: PPUSH
14834: LD_INT 1
14836: PPUSH
14837: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
14841: LD_INT 7
14843: PPUSH
14844: LD_VAR 0 3
14848: PPUSH
14849: LD_INT 1
14851: PPUSH
14852: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
14856: LD_INT 8
14858: PPUSH
14859: LD_VAR 0 3
14863: PPUSH
14864: LD_INT 1
14866: PPUSH
14867: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
14871: LD_INT 10
14873: PPUSH
14874: LD_VAR 0 3
14878: PPUSH
14879: LD_INT 1
14881: PPUSH
14882: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
14886: LD_INT 15
14888: PPUSH
14889: LD_VAR 0 3
14893: PPUSH
14894: LD_INT 1
14896: PPUSH
14897: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
14901: LD_INT 16
14903: PPUSH
14904: LD_VAR 0 3
14908: PPUSH
14909: LD_INT 1
14911: PPUSH
14912: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
14916: LD_INT 17
14918: PPUSH
14919: LD_VAR 0 3
14923: PPUSH
14924: LD_INT 1
14926: PPUSH
14927: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
14931: LD_INT 20
14933: PPUSH
14934: LD_VAR 0 3
14938: PPUSH
14939: LD_INT 1
14941: PPUSH
14942: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
14946: LD_INT 26
14948: PPUSH
14949: LD_VAR 0 3
14953: PPUSH
14954: LD_INT 1
14956: PPUSH
14957: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
14961: LD_INT 27
14963: PPUSH
14964: LD_VAR 0 3
14968: PPUSH
14969: LD_INT 1
14971: PPUSH
14972: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14976: LD_INT 29
14978: PPUSH
14979: LD_VAR 0 3
14983: PPUSH
14984: LD_INT 1
14986: PPUSH
14987: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14991: LD_INT 31
14993: PPUSH
14994: LD_VAR 0 3
14998: PPUSH
14999: LD_INT 1
15001: PPUSH
15002: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15006: LD_INT 32
15008: PPUSH
15009: LD_VAR 0 3
15013: PPUSH
15014: LD_INT 1
15016: PPUSH
15017: CALL_OW 324
// end ; 4 :
15021: GO 18108
15023: LD_INT 4
15025: DOUBLE
15026: EQUAL
15027: IFTRUE 15031
15029: GO 15979
15031: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15032: LD_INT 35
15034: PPUSH
15035: LD_VAR 0 3
15039: PPUSH
15040: LD_INT 1
15042: PPUSH
15043: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15047: LD_INT 45
15049: PPUSH
15050: LD_VAR 0 3
15054: PPUSH
15055: LD_INT 1
15057: PPUSH
15058: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15062: LD_INT 46
15064: PPUSH
15065: LD_VAR 0 3
15069: PPUSH
15070: LD_INT 1
15072: PPUSH
15073: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15077: LD_INT 47
15079: PPUSH
15080: LD_VAR 0 3
15084: PPUSH
15085: LD_INT 1
15087: PPUSH
15088: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15092: LD_INT 1
15094: PPUSH
15095: LD_VAR 0 3
15099: PPUSH
15100: LD_INT 1
15102: PPUSH
15103: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15107: LD_INT 2
15109: PPUSH
15110: LD_VAR 0 3
15114: PPUSH
15115: LD_INT 1
15117: PPUSH
15118: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15122: LD_INT 11
15124: PPUSH
15125: LD_VAR 0 3
15129: PPUSH
15130: LD_INT 1
15132: PPUSH
15133: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15137: LD_INT 20
15139: PPUSH
15140: LD_VAR 0 3
15144: PPUSH
15145: LD_INT 1
15147: PPUSH
15148: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15152: LD_INT 48
15154: PPUSH
15155: LD_VAR 0 3
15159: PPUSH
15160: LD_INT 1
15162: PPUSH
15163: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15167: LD_INT 49
15169: PPUSH
15170: LD_VAR 0 3
15174: PPUSH
15175: LD_INT 1
15177: PPUSH
15178: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15182: LD_INT 69
15184: PPUSH
15185: LD_VAR 0 3
15189: PPUSH
15190: LD_INT 1
15192: PPUSH
15193: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15197: LD_INT 39
15199: PPUSH
15200: LD_VAR 0 3
15204: PPUSH
15205: LD_INT 1
15207: PPUSH
15208: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15212: LD_INT 34
15214: PPUSH
15215: LD_VAR 0 3
15219: PPUSH
15220: LD_INT 1
15222: PPUSH
15223: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15227: LD_INT 42
15229: PPUSH
15230: LD_VAR 0 3
15234: PPUSH
15235: LD_INT 1
15237: PPUSH
15238: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15242: LD_INT 44
15244: PPUSH
15245: LD_VAR 0 3
15249: PPUSH
15250: LD_INT 1
15252: PPUSH
15253: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15257: LD_INT 41
15259: PPUSH
15260: LD_VAR 0 3
15264: PPUSH
15265: LD_INT 1
15267: PPUSH
15268: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15272: LD_INT 43
15274: PPUSH
15275: LD_VAR 0 3
15279: PPUSH
15280: LD_INT 1
15282: PPUSH
15283: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15287: LD_INT 70
15289: PPUSH
15290: LD_VAR 0 3
15294: PPUSH
15295: LD_INT 1
15297: PPUSH
15298: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15302: LD_INT 51
15304: PPUSH
15305: LD_VAR 0 3
15309: PPUSH
15310: LD_INT 1
15312: PPUSH
15313: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15317: LD_INT 52
15319: PPUSH
15320: LD_VAR 0 3
15324: PPUSH
15325: LD_INT 1
15327: PPUSH
15328: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15332: LD_INT 6
15334: PPUSH
15335: LD_VAR 0 3
15339: PPUSH
15340: LD_INT 1
15342: PPUSH
15343: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
15347: LD_INT 15
15349: PPUSH
15350: LD_VAR 0 3
15354: PPUSH
15355: LD_INT 1
15357: PPUSH
15358: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
15362: LD_INT 7
15364: PPUSH
15365: LD_VAR 0 3
15369: PPUSH
15370: LD_INT 1
15372: PPUSH
15373: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
15377: LD_INT 12
15379: PPUSH
15380: LD_VAR 0 3
15384: PPUSH
15385: LD_INT 1
15387: PPUSH
15388: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
15392: LD_INT 18
15394: PPUSH
15395: LD_VAR 0 3
15399: PPUSH
15400: LD_INT 1
15402: PPUSH
15403: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
15407: LD_INT 60
15409: PPUSH
15410: LD_VAR 0 3
15414: PPUSH
15415: LD_INT 1
15417: PPUSH
15418: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
15422: LD_INT 9
15424: PPUSH
15425: LD_VAR 0 3
15429: PPUSH
15430: LD_INT 1
15432: PPUSH
15433: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
15437: LD_INT 30
15439: PPUSH
15440: LD_VAR 0 3
15444: PPUSH
15445: LD_INT 1
15447: PPUSH
15448: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
15452: LD_INT 37
15454: PPUSH
15455: LD_VAR 0 3
15459: PPUSH
15460: LD_INT 1
15462: PPUSH
15463: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
15467: LD_INT 5
15469: PPUSH
15470: LD_VAR 0 3
15474: PPUSH
15475: LD_INT 1
15477: PPUSH
15478: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
15482: LD_INT 66
15484: PPUSH
15485: LD_VAR 0 3
15489: PPUSH
15490: LD_INT 1
15492: PPUSH
15493: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
15497: LD_INT 21
15499: PPUSH
15500: LD_VAR 0 3
15504: PPUSH
15505: LD_INT 1
15507: PPUSH
15508: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
15512: LD_INT 22
15514: PPUSH
15515: LD_VAR 0 3
15519: PPUSH
15520: LD_INT 1
15522: PPUSH
15523: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
15527: LD_INT 54
15529: PPUSH
15530: LD_VAR 0 3
15534: PPUSH
15535: LD_INT 1
15537: PPUSH
15538: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15542: LD_INT 0
15544: PPUSH
15545: LD_VAR 0 3
15549: PPUSH
15550: LD_INT 1
15552: PPUSH
15553: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
15557: LD_INT 1
15559: PPUSH
15560: LD_VAR 0 3
15564: PPUSH
15565: LD_INT 1
15567: PPUSH
15568: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15572: LD_INT 2
15574: PPUSH
15575: LD_VAR 0 3
15579: PPUSH
15580: LD_INT 1
15582: PPUSH
15583: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
15587: LD_INT 3
15589: PPUSH
15590: LD_VAR 0 3
15594: PPUSH
15595: LD_INT 1
15597: PPUSH
15598: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15602: LD_INT 4
15604: PPUSH
15605: LD_VAR 0 3
15609: PPUSH
15610: LD_INT 1
15612: PPUSH
15613: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
15617: LD_INT 5
15619: PPUSH
15620: LD_VAR 0 3
15624: PPUSH
15625: LD_INT 1
15627: PPUSH
15628: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15632: LD_INT 6
15634: PPUSH
15635: LD_VAR 0 3
15639: PPUSH
15640: LD_INT 1
15642: PPUSH
15643: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
15647: LD_INT 7
15649: PPUSH
15650: LD_VAR 0 3
15654: PPUSH
15655: LD_INT 1
15657: PPUSH
15658: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
15662: LD_INT 8
15664: PPUSH
15665: LD_VAR 0 3
15669: PPUSH
15670: LD_INT 1
15672: PPUSH
15673: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
15677: LD_INT 10
15679: PPUSH
15680: LD_VAR 0 3
15684: PPUSH
15685: LD_INT 1
15687: PPUSH
15688: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
15692: LD_INT 11
15694: PPUSH
15695: LD_VAR 0 3
15699: PPUSH
15700: LD_INT 1
15702: PPUSH
15703: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
15707: LD_INT 12
15709: PPUSH
15710: LD_VAR 0 3
15714: PPUSH
15715: LD_INT 1
15717: PPUSH
15718: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
15722: LD_INT 13
15724: PPUSH
15725: LD_VAR 0 3
15729: PPUSH
15730: LD_INT 1
15732: PPUSH
15733: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
15737: LD_INT 14
15739: PPUSH
15740: LD_VAR 0 3
15744: PPUSH
15745: LD_INT 1
15747: PPUSH
15748: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
15752: LD_INT 15
15754: PPUSH
15755: LD_VAR 0 3
15759: PPUSH
15760: LD_INT 1
15762: PPUSH
15763: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
15767: LD_INT 16
15769: PPUSH
15770: LD_VAR 0 3
15774: PPUSH
15775: LD_INT 1
15777: PPUSH
15778: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
15782: LD_INT 17
15784: PPUSH
15785: LD_VAR 0 3
15789: PPUSH
15790: LD_INT 1
15792: PPUSH
15793: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
15797: LD_INT 19
15799: PPUSH
15800: LD_VAR 0 3
15804: PPUSH
15805: LD_INT 1
15807: PPUSH
15808: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
15812: LD_INT 20
15814: PPUSH
15815: LD_VAR 0 3
15819: PPUSH
15820: LD_INT 1
15822: PPUSH
15823: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
15827: LD_INT 21
15829: PPUSH
15830: LD_VAR 0 3
15834: PPUSH
15835: LD_INT 1
15837: PPUSH
15838: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
15842: LD_INT 23
15844: PPUSH
15845: LD_VAR 0 3
15849: PPUSH
15850: LD_INT 1
15852: PPUSH
15853: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
15857: LD_INT 26
15859: PPUSH
15860: LD_VAR 0 3
15864: PPUSH
15865: LD_INT 1
15867: PPUSH
15868: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15872: LD_INT 27
15874: PPUSH
15875: LD_VAR 0 3
15879: PPUSH
15880: LD_INT 1
15882: PPUSH
15883: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
15887: LD_INT 28
15889: PPUSH
15890: LD_VAR 0 3
15894: PPUSH
15895: LD_INT 1
15897: PPUSH
15898: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15902: LD_INT 29
15904: PPUSH
15905: LD_VAR 0 3
15909: PPUSH
15910: LD_INT 1
15912: PPUSH
15913: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
15917: LD_INT 30
15919: PPUSH
15920: LD_VAR 0 3
15924: PPUSH
15925: LD_INT 1
15927: PPUSH
15928: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15932: LD_INT 31
15934: PPUSH
15935: LD_VAR 0 3
15939: PPUSH
15940: LD_INT 1
15942: PPUSH
15943: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15947: LD_INT 32
15949: PPUSH
15950: LD_VAR 0 3
15954: PPUSH
15955: LD_INT 1
15957: PPUSH
15958: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
15962: LD_INT 36
15964: PPUSH
15965: LD_VAR 0 3
15969: PPUSH
15970: LD_INT 1
15972: PPUSH
15973: CALL_OW 324
// end ; 5 :
15977: GO 18108
15979: LD_INT 5
15981: DOUBLE
15982: EQUAL
15983: IFTRUE 15987
15985: GO 17100
15987: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15988: LD_INT 35
15990: PPUSH
15991: LD_VAR 0 3
15995: PPUSH
15996: LD_INT 1
15998: PPUSH
15999: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16003: LD_INT 45
16005: PPUSH
16006: LD_VAR 0 3
16010: PPUSH
16011: LD_INT 1
16013: PPUSH
16014: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16018: LD_INT 46
16020: PPUSH
16021: LD_VAR 0 3
16025: PPUSH
16026: LD_INT 1
16028: PPUSH
16029: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16033: LD_INT 47
16035: PPUSH
16036: LD_VAR 0 3
16040: PPUSH
16041: LD_INT 1
16043: PPUSH
16044: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16048: LD_INT 1
16050: PPUSH
16051: LD_VAR 0 3
16055: PPUSH
16056: LD_INT 1
16058: PPUSH
16059: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16063: LD_INT 2
16065: PPUSH
16066: LD_VAR 0 3
16070: PPUSH
16071: LD_INT 1
16073: PPUSH
16074: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16078: LD_INT 11
16080: PPUSH
16081: LD_VAR 0 3
16085: PPUSH
16086: LD_INT 1
16088: PPUSH
16089: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
16093: LD_INT 20
16095: PPUSH
16096: LD_VAR 0 3
16100: PPUSH
16101: LD_INT 1
16103: PPUSH
16104: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16108: LD_INT 48
16110: PPUSH
16111: LD_VAR 0 3
16115: PPUSH
16116: LD_INT 1
16118: PPUSH
16119: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16123: LD_INT 49
16125: PPUSH
16126: LD_VAR 0 3
16130: PPUSH
16131: LD_INT 1
16133: PPUSH
16134: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16138: LD_INT 69
16140: PPUSH
16141: LD_VAR 0 3
16145: PPUSH
16146: LD_INT 1
16148: PPUSH
16149: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16153: LD_INT 39
16155: PPUSH
16156: LD_VAR 0 3
16160: PPUSH
16161: LD_INT 1
16163: PPUSH
16164: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16168: LD_INT 34
16170: PPUSH
16171: LD_VAR 0 3
16175: PPUSH
16176: LD_INT 1
16178: PPUSH
16179: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16183: LD_INT 42
16185: PPUSH
16186: LD_VAR 0 3
16190: PPUSH
16191: LD_INT 1
16193: PPUSH
16194: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16198: LD_INT 44
16200: PPUSH
16201: LD_VAR 0 3
16205: PPUSH
16206: LD_INT 1
16208: PPUSH
16209: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16213: LD_INT 41
16215: PPUSH
16216: LD_VAR 0 3
16220: PPUSH
16221: LD_INT 1
16223: PPUSH
16224: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
16228: LD_INT 40
16230: PPUSH
16231: LD_VAR 0 3
16235: PPUSH
16236: LD_INT 1
16238: PPUSH
16239: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16243: LD_INT 43
16245: PPUSH
16246: LD_VAR 0 3
16250: PPUSH
16251: LD_INT 1
16253: PPUSH
16254: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16258: LD_INT 70
16260: PPUSH
16261: LD_VAR 0 3
16265: PPUSH
16266: LD_INT 1
16268: PPUSH
16269: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16273: LD_INT 51
16275: PPUSH
16276: LD_VAR 0 3
16280: PPUSH
16281: LD_INT 1
16283: PPUSH
16284: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16288: LD_INT 52
16290: PPUSH
16291: LD_VAR 0 3
16295: PPUSH
16296: LD_INT 1
16298: PPUSH
16299: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16303: LD_INT 6
16305: PPUSH
16306: LD_VAR 0 3
16310: PPUSH
16311: LD_INT 1
16313: PPUSH
16314: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16318: LD_INT 15
16320: PPUSH
16321: LD_VAR 0 3
16325: PPUSH
16326: LD_INT 1
16328: PPUSH
16329: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16333: LD_INT 7
16335: PPUSH
16336: LD_VAR 0 3
16340: PPUSH
16341: LD_INT 1
16343: PPUSH
16344: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16348: LD_INT 12
16350: PPUSH
16351: LD_VAR 0 3
16355: PPUSH
16356: LD_INT 1
16358: PPUSH
16359: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
16363: LD_INT 17
16365: PPUSH
16366: LD_VAR 0 3
16370: PPUSH
16371: LD_INT 1
16373: PPUSH
16374: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
16378: LD_INT 18
16380: PPUSH
16381: LD_VAR 0 3
16385: PPUSH
16386: LD_INT 1
16388: PPUSH
16389: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
16393: LD_INT 60
16395: PPUSH
16396: LD_VAR 0 3
16400: PPUSH
16401: LD_INT 1
16403: PPUSH
16404: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
16408: LD_INT 32
16410: PPUSH
16411: LD_VAR 0 3
16415: PPUSH
16416: LD_INT 1
16418: PPUSH
16419: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
16423: LD_INT 9
16425: PPUSH
16426: LD_VAR 0 3
16430: PPUSH
16431: LD_INT 1
16433: PPUSH
16434: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
16438: LD_INT 57
16440: PPUSH
16441: LD_VAR 0 3
16445: PPUSH
16446: LD_INT 1
16448: PPUSH
16449: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
16453: LD_INT 30
16455: PPUSH
16456: LD_VAR 0 3
16460: PPUSH
16461: LD_INT 1
16463: PPUSH
16464: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
16468: LD_INT 37
16470: PPUSH
16471: LD_VAR 0 3
16475: PPUSH
16476: LD_INT 1
16478: PPUSH
16479: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
16483: LD_INT 63
16485: PPUSH
16486: LD_VAR 0 3
16490: PPUSH
16491: LD_INT 1
16493: PPUSH
16494: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
16498: LD_INT 3
16500: PPUSH
16501: LD_VAR 0 3
16505: PPUSH
16506: LD_INT 1
16508: PPUSH
16509: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
16513: LD_INT 4
16515: PPUSH
16516: LD_VAR 0 3
16520: PPUSH
16521: LD_INT 1
16523: PPUSH
16524: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
16528: LD_INT 5
16530: PPUSH
16531: LD_VAR 0 3
16535: PPUSH
16536: LD_INT 1
16538: PPUSH
16539: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
16543: LD_INT 66
16545: PPUSH
16546: LD_VAR 0 3
16550: PPUSH
16551: LD_INT 1
16553: PPUSH
16554: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
16558: LD_INT 21
16560: PPUSH
16561: LD_VAR 0 3
16565: PPUSH
16566: LD_INT 1
16568: PPUSH
16569: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
16573: LD_INT 22
16575: PPUSH
16576: LD_VAR 0 3
16580: PPUSH
16581: LD_INT 1
16583: PPUSH
16584: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
16588: LD_INT 19
16590: PPUSH
16591: LD_VAR 0 3
16595: PPUSH
16596: LD_INT 1
16598: PPUSH
16599: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
16603: LD_INT 54
16605: PPUSH
16606: LD_VAR 0 3
16610: PPUSH
16611: LD_INT 1
16613: PPUSH
16614: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
16618: LD_INT 55
16620: PPUSH
16621: LD_VAR 0 3
16625: PPUSH
16626: LD_INT 1
16628: PPUSH
16629: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16633: LD_INT 0
16635: PPUSH
16636: LD_VAR 0 3
16640: PPUSH
16641: LD_INT 1
16643: PPUSH
16644: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
16648: LD_INT 1
16650: PPUSH
16651: LD_VAR 0 3
16655: PPUSH
16656: LD_INT 1
16658: PPUSH
16659: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16663: LD_INT 2
16665: PPUSH
16666: LD_VAR 0 3
16670: PPUSH
16671: LD_INT 1
16673: PPUSH
16674: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
16678: LD_INT 3
16680: PPUSH
16681: LD_VAR 0 3
16685: PPUSH
16686: LD_INT 1
16688: PPUSH
16689: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16693: LD_INT 4
16695: PPUSH
16696: LD_VAR 0 3
16700: PPUSH
16701: LD_INT 1
16703: PPUSH
16704: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
16708: LD_INT 5
16710: PPUSH
16711: LD_VAR 0 3
16715: PPUSH
16716: LD_INT 1
16718: PPUSH
16719: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16723: LD_INT 6
16725: PPUSH
16726: LD_VAR 0 3
16730: PPUSH
16731: LD_INT 1
16733: PPUSH
16734: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
16738: LD_INT 7
16740: PPUSH
16741: LD_VAR 0 3
16745: PPUSH
16746: LD_INT 1
16748: PPUSH
16749: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
16753: LD_INT 8
16755: PPUSH
16756: LD_VAR 0 3
16760: PPUSH
16761: LD_INT 1
16763: PPUSH
16764: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
16768: LD_INT 10
16770: PPUSH
16771: LD_VAR 0 3
16775: PPUSH
16776: LD_INT 1
16778: PPUSH
16779: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
16783: LD_INT 11
16785: PPUSH
16786: LD_VAR 0 3
16790: PPUSH
16791: LD_INT 1
16793: PPUSH
16794: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
16798: LD_INT 12
16800: PPUSH
16801: LD_VAR 0 3
16805: PPUSH
16806: LD_INT 1
16808: PPUSH
16809: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
16813: LD_INT 13
16815: PPUSH
16816: LD_VAR 0 3
16820: PPUSH
16821: LD_INT 1
16823: PPUSH
16824: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
16828: LD_INT 14
16830: PPUSH
16831: LD_VAR 0 3
16835: PPUSH
16836: LD_INT 1
16838: PPUSH
16839: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
16843: LD_INT 15
16845: PPUSH
16846: LD_VAR 0 3
16850: PPUSH
16851: LD_INT 1
16853: PPUSH
16854: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
16858: LD_INT 16
16860: PPUSH
16861: LD_VAR 0 3
16865: PPUSH
16866: LD_INT 1
16868: PPUSH
16869: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
16873: LD_INT 17
16875: PPUSH
16876: LD_VAR 0 3
16880: PPUSH
16881: LD_INT 1
16883: PPUSH
16884: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
16888: LD_INT 18
16890: PPUSH
16891: LD_VAR 0 3
16895: PPUSH
16896: LD_INT 1
16898: PPUSH
16899: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
16903: LD_INT 19
16905: PPUSH
16906: LD_VAR 0 3
16910: PPUSH
16911: LD_INT 1
16913: PPUSH
16914: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
16918: LD_INT 20
16920: PPUSH
16921: LD_VAR 0 3
16925: PPUSH
16926: LD_INT 1
16928: PPUSH
16929: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
16933: LD_INT 21
16935: PPUSH
16936: LD_VAR 0 3
16940: PPUSH
16941: LD_INT 1
16943: PPUSH
16944: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
16948: LD_INT 23
16950: PPUSH
16951: LD_VAR 0 3
16955: PPUSH
16956: LD_INT 1
16958: PPUSH
16959: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
16963: LD_INT 26
16965: PPUSH
16966: LD_VAR 0 3
16970: PPUSH
16971: LD_INT 1
16973: PPUSH
16974: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16978: LD_INT 27
16980: PPUSH
16981: LD_VAR 0 3
16985: PPUSH
16986: LD_INT 1
16988: PPUSH
16989: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
16993: LD_INT 28
16995: PPUSH
16996: LD_VAR 0 3
17000: PPUSH
17001: LD_INT 1
17003: PPUSH
17004: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17008: LD_INT 29
17010: PPUSH
17011: LD_VAR 0 3
17015: PPUSH
17016: LD_INT 1
17018: PPUSH
17019: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
17023: LD_INT 30
17025: PPUSH
17026: LD_VAR 0 3
17030: PPUSH
17031: LD_INT 1
17033: PPUSH
17034: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17038: LD_INT 31
17040: PPUSH
17041: LD_VAR 0 3
17045: PPUSH
17046: LD_INT 1
17048: PPUSH
17049: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
17053: LD_INT 32
17055: PPUSH
17056: LD_VAR 0 3
17060: PPUSH
17061: LD_INT 1
17063: PPUSH
17064: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
17068: LD_INT 33
17070: PPUSH
17071: LD_VAR 0 3
17075: PPUSH
17076: LD_INT 1
17078: PPUSH
17079: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
17083: LD_INT 36
17085: PPUSH
17086: LD_VAR 0 3
17090: PPUSH
17091: LD_INT 1
17093: PPUSH
17094: CALL_OW 324
// end ; 6 :
17098: GO 18108
17100: LD_INT 6
17102: DOUBLE
17103: EQUAL
17104: IFTRUE 17108
17106: GO 18033
17108: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17109: LD_INT 35
17111: PPUSH
17112: LD_VAR 0 3
17116: PPUSH
17117: LD_INT 1
17119: PPUSH
17120: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17124: LD_INT 45
17126: PPUSH
17127: LD_VAR 0 3
17131: PPUSH
17132: LD_INT 1
17134: PPUSH
17135: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17139: LD_INT 46
17141: PPUSH
17142: LD_VAR 0 3
17146: PPUSH
17147: LD_INT 1
17149: PPUSH
17150: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17154: LD_INT 47
17156: PPUSH
17157: LD_VAR 0 3
17161: PPUSH
17162: LD_INT 1
17164: PPUSH
17165: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17169: LD_INT 1
17171: PPUSH
17172: LD_VAR 0 3
17176: PPUSH
17177: LD_INT 1
17179: PPUSH
17180: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17184: LD_INT 2
17186: PPUSH
17187: LD_VAR 0 3
17191: PPUSH
17192: LD_INT 1
17194: PPUSH
17195: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17199: LD_INT 11
17201: PPUSH
17202: LD_VAR 0 3
17206: PPUSH
17207: LD_INT 1
17209: PPUSH
17210: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17214: LD_INT 20
17216: PPUSH
17217: LD_VAR 0 3
17221: PPUSH
17222: LD_INT 1
17224: PPUSH
17225: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17229: LD_INT 48
17231: PPUSH
17232: LD_VAR 0 3
17236: PPUSH
17237: LD_INT 1
17239: PPUSH
17240: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17244: LD_INT 49
17246: PPUSH
17247: LD_VAR 0 3
17251: PPUSH
17252: LD_INT 1
17254: PPUSH
17255: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
17259: LD_INT 50
17261: PPUSH
17262: LD_VAR 0 3
17266: PPUSH
17267: LD_INT 1
17269: PPUSH
17270: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17274: LD_INT 69
17276: PPUSH
17277: LD_VAR 0 3
17281: PPUSH
17282: LD_INT 1
17284: PPUSH
17285: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17289: LD_INT 39
17291: PPUSH
17292: LD_VAR 0 3
17296: PPUSH
17297: LD_INT 1
17299: PPUSH
17300: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17304: LD_INT 34
17306: PPUSH
17307: LD_VAR 0 3
17311: PPUSH
17312: LD_INT 1
17314: PPUSH
17315: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17319: LD_INT 42
17321: PPUSH
17322: LD_VAR 0 3
17326: PPUSH
17327: LD_INT 1
17329: PPUSH
17330: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17334: LD_INT 44
17336: PPUSH
17337: LD_VAR 0 3
17341: PPUSH
17342: LD_INT 1
17344: PPUSH
17345: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
17349: LD_INT 41
17351: PPUSH
17352: LD_VAR 0 3
17356: PPUSH
17357: LD_INT 1
17359: PPUSH
17360: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
17364: LD_INT 13
17366: PPUSH
17367: LD_VAR 0 3
17371: PPUSH
17372: LD_INT 1
17374: PPUSH
17375: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
17379: LD_INT 40
17381: PPUSH
17382: LD_VAR 0 3
17386: PPUSH
17387: LD_INT 1
17389: PPUSH
17390: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17394: LD_INT 43
17396: PPUSH
17397: LD_VAR 0 3
17401: PPUSH
17402: LD_INT 1
17404: PPUSH
17405: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
17409: LD_INT 70
17411: PPUSH
17412: LD_VAR 0 3
17416: PPUSH
17417: LD_INT 1
17419: PPUSH
17420: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
17424: LD_INT 23
17426: PPUSH
17427: LD_VAR 0 3
17431: PPUSH
17432: LD_INT 1
17434: PPUSH
17435: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17439: LD_INT 51
17441: PPUSH
17442: LD_VAR 0 3
17446: PPUSH
17447: LD_INT 1
17449: PPUSH
17450: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
17454: LD_INT 52
17456: PPUSH
17457: LD_VAR 0 3
17461: PPUSH
17462: LD_INT 1
17464: PPUSH
17465: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
17469: LD_INT 6
17471: PPUSH
17472: LD_VAR 0 3
17476: PPUSH
17477: LD_INT 1
17479: PPUSH
17480: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
17484: LD_INT 15
17486: PPUSH
17487: LD_VAR 0 3
17491: PPUSH
17492: LD_INT 1
17494: PPUSH
17495: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
17499: LD_INT 7
17501: PPUSH
17502: LD_VAR 0 3
17506: PPUSH
17507: LD_INT 1
17509: PPUSH
17510: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17514: LD_INT 12
17516: PPUSH
17517: LD_VAR 0 3
17521: PPUSH
17522: LD_INT 1
17524: PPUSH
17525: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
17529: LD_INT 10
17531: PPUSH
17532: LD_VAR 0 3
17536: PPUSH
17537: LD_INT 1
17539: PPUSH
17540: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
17544: LD_INT 17
17546: PPUSH
17547: LD_VAR 0 3
17551: PPUSH
17552: LD_INT 1
17554: PPUSH
17555: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17559: LD_INT 18
17561: PPUSH
17562: LD_VAR 0 3
17566: PPUSH
17567: LD_INT 1
17569: PPUSH
17570: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17574: LD_INT 60
17576: PPUSH
17577: LD_VAR 0 3
17581: PPUSH
17582: LD_INT 1
17584: PPUSH
17585: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
17589: LD_INT 61
17591: PPUSH
17592: LD_VAR 0 3
17596: PPUSH
17597: LD_INT 1
17599: PPUSH
17600: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
17604: LD_INT 32
17606: PPUSH
17607: LD_VAR 0 3
17611: PPUSH
17612: LD_INT 1
17614: PPUSH
17615: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
17619: LD_INT 27
17621: PPUSH
17622: LD_VAR 0 3
17626: PPUSH
17627: LD_INT 1
17629: PPUSH
17630: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
17634: LD_INT 36
17636: PPUSH
17637: LD_VAR 0 3
17641: PPUSH
17642: LD_INT 1
17644: PPUSH
17645: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
17649: LD_INT 33
17651: PPUSH
17652: LD_VAR 0 3
17656: PPUSH
17657: LD_INT 1
17659: PPUSH
17660: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
17664: LD_INT 9
17666: PPUSH
17667: LD_VAR 0 3
17671: PPUSH
17672: LD_INT 1
17674: PPUSH
17675: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
17679: LD_INT 38
17681: PPUSH
17682: LD_VAR 0 3
17686: PPUSH
17687: LD_INT 1
17689: PPUSH
17690: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
17694: LD_INT 57
17696: PPUSH
17697: LD_VAR 0 3
17701: PPUSH
17702: LD_INT 1
17704: PPUSH
17705: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
17709: LD_INT 58
17711: PPUSH
17712: LD_VAR 0 3
17716: PPUSH
17717: LD_INT 1
17719: PPUSH
17720: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
17724: LD_INT 28
17726: PPUSH
17727: LD_VAR 0 3
17731: PPUSH
17732: LD_INT 1
17734: PPUSH
17735: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
17739: LD_INT 29
17741: PPUSH
17742: LD_VAR 0 3
17746: PPUSH
17747: LD_INT 1
17749: PPUSH
17750: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
17754: LD_INT 30
17756: PPUSH
17757: LD_VAR 0 3
17761: PPUSH
17762: LD_INT 1
17764: PPUSH
17765: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
17769: LD_INT 37
17771: PPUSH
17772: LD_VAR 0 3
17776: PPUSH
17777: LD_INT 1
17779: PPUSH
17780: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
17784: LD_INT 63
17786: PPUSH
17787: LD_VAR 0 3
17791: PPUSH
17792: LD_INT 1
17794: PPUSH
17795: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
17799: LD_INT 64
17801: PPUSH
17802: LD_VAR 0 3
17806: PPUSH
17807: LD_INT 1
17809: PPUSH
17810: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
17814: LD_INT 3
17816: PPUSH
17817: LD_VAR 0 3
17821: PPUSH
17822: LD_INT 1
17824: PPUSH
17825: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
17829: LD_INT 4
17831: PPUSH
17832: LD_VAR 0 3
17836: PPUSH
17837: LD_INT 1
17839: PPUSH
17840: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
17844: LD_INT 5
17846: PPUSH
17847: LD_VAR 0 3
17851: PPUSH
17852: LD_INT 1
17854: PPUSH
17855: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
17859: LD_INT 8
17861: PPUSH
17862: LD_VAR 0 3
17866: PPUSH
17867: LD_INT 1
17869: PPUSH
17870: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
17874: LD_INT 66
17876: PPUSH
17877: LD_VAR 0 3
17881: PPUSH
17882: LD_INT 1
17884: PPUSH
17885: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
17889: LD_INT 67
17891: PPUSH
17892: LD_VAR 0 3
17896: PPUSH
17897: LD_INT 1
17899: PPUSH
17900: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
17904: LD_INT 21
17906: PPUSH
17907: LD_VAR 0 3
17911: PPUSH
17912: LD_INT 1
17914: PPUSH
17915: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
17919: LD_INT 22
17921: PPUSH
17922: LD_VAR 0 3
17926: PPUSH
17927: LD_INT 1
17929: PPUSH
17930: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
17934: LD_INT 19
17936: PPUSH
17937: LD_VAR 0 3
17941: PPUSH
17942: LD_INT 1
17944: PPUSH
17945: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
17949: LD_INT 26
17951: PPUSH
17952: LD_VAR 0 3
17956: PPUSH
17957: LD_INT 1
17959: PPUSH
17960: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
17964: LD_INT 54
17966: PPUSH
17967: LD_VAR 0 3
17971: PPUSH
17972: LD_INT 1
17974: PPUSH
17975: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
17979: LD_INT 55
17981: PPUSH
17982: LD_VAR 0 3
17986: PPUSH
17987: LD_INT 1
17989: PPUSH
17990: CALL_OW 322
// for i = 0 to 39 do
17994: LD_ADDR_VAR 0 4
17998: PUSH
17999: DOUBLE
18000: LD_INT 0
18002: DEC
18003: ST_TO_ADDR
18004: LD_INT 39
18006: PUSH
18007: FOR_TO
18008: IFFALSE 18029
// SetRestrict ( i , side , true ) ;
18010: LD_VAR 0 4
18014: PPUSH
18015: LD_VAR 0 3
18019: PPUSH
18020: LD_INT 1
18022: PPUSH
18023: CALL_OW 324
18027: GO 18007
18029: POP
18030: POP
// end ; else
18031: GO 18108
18033: POP
// begin for i = 1 to 73 do
18034: LD_ADDR_VAR 0 4
18038: PUSH
18039: DOUBLE
18040: LD_INT 1
18042: DEC
18043: ST_TO_ADDR
18044: LD_INT 73
18046: PUSH
18047: FOR_TO
18048: IFFALSE 18069
// SetTech ( i , side , state_enabled ) ;
18050: LD_VAR 0 4
18054: PPUSH
18055: LD_VAR 0 3
18059: PPUSH
18060: LD_INT 1
18062: PPUSH
18063: CALL_OW 322
18067: GO 18047
18069: POP
18070: POP
// for i = 0 to 39 do
18071: LD_ADDR_VAR 0 4
18075: PUSH
18076: DOUBLE
18077: LD_INT 0
18079: DEC
18080: ST_TO_ADDR
18081: LD_INT 39
18083: PUSH
18084: FOR_TO
18085: IFFALSE 18106
// SetRestrict ( i , side , true ) ;
18087: LD_VAR 0 4
18091: PPUSH
18092: LD_VAR 0 3
18096: PPUSH
18097: LD_INT 1
18099: PPUSH
18100: CALL_OW 324
18104: GO 18084
18106: POP
18107: POP
// end ; end ; end ;
18108: GO 14113
18110: POP
18111: POP
// end ;
18112: LD_VAR 0 2
18116: RET
