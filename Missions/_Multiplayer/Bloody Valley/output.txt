// export def_tree_function ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , respawning_time_min , respawning_time_max , siberite_bomb_Delay , amount_of_apemen , tree_function , def_win_rules , buildUpTime_Delay ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export Position_Sides ; export depot_def , breastworks_def , start_def , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 141
// begin Your_Side := mp_player_side ;
  79: LD_ADDR_OWVAR 2
  83: PUSH
  84: LD_OWVAR 7
  88: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  89: LD_ADDR_EXP 20
  93: PUSH
  94: LD_OWVAR 17
  98: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  99: LD_ADDR_EXP 17
 103: PUSH
 104: LD_OWVAR 15
 108: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 109: LD_ADDR_EXP 21
 113: PUSH
 114: LD_OWVAR 16
 118: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 119: LD_ADDR_EXP 19
 123: PUSH
 124: CALL 0 0 0
 128: ST_TO_ADDR
// Teams := mp_teams ;
 129: LD_ADDR_EXP 18
 133: PUSH
 134: LD_OWVAR 12
 138: ST_TO_ADDR
// end else
 139: GO 334
// begin Your_Side := 1 ;
 141: LD_ADDR_OWVAR 2
 145: PUSH
 146: LD_INT 1
 148: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 149: LD_ADDR_EXP 20
 153: PUSH
 154: LD_INT 1
 156: PUSH
 157: LD_INT 2
 159: PUSH
 160: LD_INT 3
 162: PUSH
 163: LD_INT 4
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 188: LD_ADDR_EXP 17
 192: PUSH
 193: LD_INT 1
 195: PUSH
 196: LD_INT 1
 198: PUSH
 199: LD_INT 2
 201: PUSH
 202: LD_INT 2
 204: PUSH
 205: LD_INT 0
 207: PUSH
 208: LD_INT 0
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 0 , 0 , 0 , 0 ] ;
 227: LD_ADDR_EXP 21
 231: PUSH
 232: LD_INT 1
 234: PUSH
 235: LD_INT 2
 237: PUSH
 238: LD_INT 3
 240: PUSH
 241: LD_INT 1
 243: PUSH
 244: LD_INT 0
 246: PUSH
 247: LD_INT 0
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 0
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: LIST
 264: LIST
 265: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 266: LD_ADDR_EXP 19
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: LD_INT 0
 279: PUSH
 280: LD_INT 0
 282: PUSH
 283: LD_INT 0
 285: PUSH
 286: LD_INT 0
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: LIST
 299: LIST
 300: LIST
 301: LIST
 302: LIST
 303: LIST
 304: ST_TO_ADDR
// Teams := [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 305: LD_ADDR_EXP 18
 309: PUSH
 310: LD_INT 1
 312: PUSH
 313: LD_INT 2
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: LD_INT 3
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: ST_TO_ADDR
// end ; for i := 1 to 8 do
 334: LD_ADDR_VAR 0 2
 338: PUSH
 339: DOUBLE
 340: LD_INT 1
 342: DEC
 343: ST_TO_ADDR
 344: LD_INT 8
 346: PUSH
 347: FOR_TO
 348: IFFALSE 435
// if Multiplayer_GetPlayerIsSpec ( i ) then
 350: LD_VAR 0 2
 354: PPUSH
 355: CALL_OW 530
 359: IFFALSE 433
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 361: LD_ADDR_EXP 20
 365: PUSH
 366: LD_EXP 20
 370: PPUSH
 371: LD_VAR 0 2
 375: PPUSH
 376: LD_INT 0
 378: PPUSH
 379: CALL_OW 1
 383: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 384: LD_ADDR_EXP 18
 388: PUSH
 389: LD_EXP 18
 393: PPUSH
 394: LD_EXP 17
 398: PUSH
 399: LD_VAR 0 2
 403: ARRAY
 404: PPUSH
 405: LD_EXP 18
 409: PUSH
 410: LD_EXP 17
 414: PUSH
 415: LD_VAR 0 2
 419: ARRAY
 420: ARRAY
 421: PUSH
 422: LD_VAR 0 2
 426: DIFF
 427: PPUSH
 428: CALL_OW 1
 432: ST_TO_ADDR
// end ;
 433: GO 347
 435: POP
 436: POP
// Position_Sides := [ 0 , 0 , 0 , 0 ] ;
 437: LD_ADDR_EXP 23
 441: PUSH
 442: LD_INT 0
 444: PUSH
 445: LD_INT 0
 447: PUSH
 448: LD_INT 0
 450: PUSH
 451: LD_INT 0
 453: PUSH
 454: EMPTY
 455: LIST
 456: LIST
 457: LIST
 458: LIST
 459: ST_TO_ADDR
// for i := 1 to 8 do
 460: LD_ADDR_VAR 0 2
 464: PUSH
 465: DOUBLE
 466: LD_INT 1
 468: DEC
 469: ST_TO_ADDR
 470: LD_INT 8
 472: PUSH
 473: FOR_TO
 474: IFFALSE 521
// if Side_Positions [ i ] then
 476: LD_EXP 20
 480: PUSH
 481: LD_VAR 0 2
 485: ARRAY
 486: IFFALSE 519
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 488: LD_ADDR_EXP 23
 492: PUSH
 493: LD_EXP 23
 497: PPUSH
 498: LD_EXP 20
 502: PUSH
 503: LD_VAR 0 2
 507: ARRAY
 508: PPUSH
 509: LD_VAR 0 2
 513: PPUSH
 514: CALL_OW 1
 518: ST_TO_ADDR
 519: GO 473
 521: POP
 522: POP
// Team_Game := 1 ;
 523: LD_ADDR_EXP 22
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// if Multiplayer then
 531: LD_OWVAR 4
 535: IFFALSE 742
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 537: LD_ADDR_EXP 38
 541: PUSH
 542: LD_INT 0
 544: PPUSH
 545: CALL_OW 426
 549: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 550: LD_ADDR_EXP 39
 554: PUSH
 555: LD_INT 1
 557: PPUSH
 558: CALL_OW 426
 562: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 563: LD_ADDR_EXP 40
 567: PUSH
 568: LD_INT 2
 570: PPUSH
 571: CALL_OW 426
 575: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 576: LD_ADDR_EXP 41
 580: PUSH
 581: LD_INT 3
 583: PPUSH
 584: CALL_OW 426
 588: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 589: LD_ADDR_EXP 42
 593: PUSH
 594: LD_INT 4
 596: PPUSH
 597: CALL_OW 426
 601: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 602: LD_ADDR_EXP 43
 606: PUSH
 607: LD_INT 5
 609: PPUSH
 610: CALL_OW 426
 614: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 615: LD_ADDR_EXP 45
 619: PUSH
 620: LD_INT 10
 622: PPUSH
 623: CALL_OW 426
 627: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 628: LD_ADDR_EXP 46
 632: PUSH
 633: LD_INT 11
 635: PPUSH
 636: CALL_OW 426
 640: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 641: LD_ADDR_EXP 47
 645: PUSH
 646: LD_INT 12
 648: PPUSH
 649: CALL_OW 426
 653: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 13 ) ;
 654: LD_ADDR_EXP 49
 658: PUSH
 659: LD_INT 13
 661: PPUSH
 662: CALL_OW 426
 666: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 14 ) ;
 667: LD_ADDR_EXP 48
 671: PUSH
 672: LD_INT 14
 674: PPUSH
 675: CALL_OW 426
 679: ST_TO_ADDR
// def_tree_function := GetMultiplayerSetting ( 15 ) ;
 680: LD_ADDR_EXP 1
 684: PUSH
 685: LD_INT 15
 687: PPUSH
 688: CALL_OW 426
 692: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 693: LD_ADDR_EXP 50
 697: PUSH
 698: LD_INT 17
 700: PPUSH
 701: CALL_OW 426
 705: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 706: LD_ADDR_EXP 51
 710: PUSH
 711: LD_INT 20
 713: PPUSH
 714: CALL_OW 426
 718: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 719: LD_ADDR_VAR 0 3
 723: PUSH
 724: LD_INT 22
 726: PPUSH
 727: CALL_OW 426
 731: ST_TO_ADDR
// def_win_rules = 0 ;
 732: LD_ADDR_EXP 15
 736: PUSH
 737: LD_INT 0
 739: ST_TO_ADDR
// end else
 740: GO 874
// begin Randomize ;
 742: CALL_OW 10
// def_base_level := 2 ;
 746: LD_ADDR_EXP 38
 750: PUSH
 751: LD_INT 2
 753: ST_TO_ADDR
// def_amount_of_people := 1 ;
 754: LD_ADDR_EXP 39
 758: PUSH
 759: LD_INT 1
 761: ST_TO_ADDR
// def_skill_level := 1 ;
 762: LD_ADDR_EXP 40
 766: PUSH
 767: LD_INT 1
 769: ST_TO_ADDR
// def_starting_resources := 2 ;
 770: LD_ADDR_EXP 41
 774: PUSH
 775: LD_INT 2
 777: ST_TO_ADDR
// def_shipments_density := 1 ;
 778: LD_ADDR_EXP 42
 782: PUSH
 783: LD_INT 1
 785: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 786: LD_ADDR_EXP 43
 790: PUSH
 791: LD_INT 0
 793: ST_TO_ADDR
// def_shared_vision := 1 ;
 794: LD_ADDR_EXP 45
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// def_morale_flags := 1 ;
 802: LD_ADDR_EXP 46
 806: PUSH
 807: LD_INT 1
 809: ST_TO_ADDR
// def_siberite_detection := 1 ;
 810: LD_ADDR_EXP 47
 814: PUSH
 815: LD_INT 1
 817: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 818: LD_ADDR_EXP 49
 822: PUSH
 823: LD_INT 3
 825: ST_TO_ADDR
// def_people_respawning := 2 ;
 826: LD_ADDR_EXP 48
 830: PUSH
 831: LD_INT 2
 833: ST_TO_ADDR
// def_tree_function := 7 ;
 834: LD_ADDR_EXP 1
 838: PUSH
 839: LD_INT 7
 841: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 842: LD_ADDR_EXP 50
 846: PUSH
 847: LD_INT 0
 849: ST_TO_ADDR
// def_builduptime := 1 ;
 850: LD_ADDR_EXP 51
 854: PUSH
 855: LD_INT 1
 857: ST_TO_ADDR
// tech_level = 4 ;
 858: LD_ADDR_VAR 0 3
 862: PUSH
 863: LD_INT 4
 865: ST_TO_ADDR
// def_win_rules = 0 ;
 866: LD_ADDR_EXP 15
 870: PUSH
 871: LD_INT 0
 873: ST_TO_ADDR
// end ; if def_tree_function = 7 then
 874: LD_EXP 1
 878: PUSH
 879: LD_INT 7
 881: EQUAL
 882: IFFALSE 900
// def_tree_function := Rand ( 1 , 5 ) ;
 884: LD_ADDR_EXP 1
 888: PUSH
 889: LD_INT 1
 891: PPUSH
 892: LD_INT 5
 894: PPUSH
 895: CALL_OW 12
 899: ST_TO_ADDR
// InitGameRules ;
 900: CALL 7818 0 0
// if def_game_rules = 0 then
 904: LD_EXP 37
 908: PUSH
 909: LD_INT 0
 911: EQUAL
 912: IFFALSE 939
// begin if isSGUI then
 914: LD_OWVAR 83
 918: IFFALSE 926
// setMpTechs ( ) else
 920: CALL 11961 0 0
 924: GO 939
// begin SetMpTechLevel ( tech_level + 1 ) ;
 926: LD_VAR 0 3
 930: PUSH
 931: LD_INT 1
 933: PLUS
 934: PPUSH
 935: CALL 12108 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 939: LD_ADDR_EXP 2
 943: PUSH
 944: LD_INT 0
 946: PUSH
 947: LD_INT 1
 949: PUSH
 950: LD_INT 1
 952: PUSH
 953: LD_INT 1
 955: PUSH
 956: EMPTY
 957: LIST
 958: LIST
 959: LIST
 960: LIST
 961: PUSH
 962: LD_EXP 38
 966: PUSH
 967: LD_INT 1
 969: PLUS
 970: ARRAY
 971: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 , 3 ] [ def_base_level + 1 ] ;
 972: LD_ADDR_EXP 3
 976: PUSH
 977: LD_INT 0
 979: PUSH
 980: LD_INT 0
 982: PUSH
 983: LD_INT 2
 985: PUSH
 986: LD_INT 3
 988: PUSH
 989: EMPTY
 990: LIST
 991: LIST
 992: LIST
 993: LIST
 994: PUSH
 995: LD_EXP 38
 999: PUSH
1000: LD_INT 1
1002: PLUS
1003: ARRAY
1004: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1005: LD_ADDR_EXP 5
1009: PUSH
1010: LD_INT 2
1012: PUSH
1013: LD_INT 3
1015: PUSH
1016: LD_INT 4
1018: PUSH
1019: LD_INT 5
1021: PUSH
1022: EMPTY
1023: LIST
1024: LIST
1025: LIST
1026: LIST
1027: PUSH
1028: LD_EXP 40
1032: PUSH
1033: LD_INT 1
1035: PLUS
1036: ARRAY
1037: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1038: LD_ADDR_EXP 7
1042: PUSH
1043: LD_INT 0
1045: PUSH
1046: LD_INT 0
1048: PUSH
1049: LD_INT 0
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: LIST
1056: PUSH
1057: LD_INT 30
1059: PUSH
1060: LD_INT 0
1062: PUSH
1063: LD_INT 0
1065: PUSH
1066: EMPTY
1067: LIST
1068: LIST
1069: LIST
1070: PUSH
1071: LD_INT 50
1073: PUSH
1074: LD_INT 20
1076: PUSH
1077: LD_INT 0
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: LIST
1084: PUSH
1085: LD_INT 80
1087: PUSH
1088: LD_INT 40
1090: PUSH
1091: LD_INT 20
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: LIST
1098: PUSH
1099: EMPTY
1100: LIST
1101: LIST
1102: LIST
1103: LIST
1104: PUSH
1105: LD_EXP 41
1109: PUSH
1110: LD_INT 1
1112: PLUS
1113: ARRAY
1114: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1115: LD_ADDR_EXP 6
1119: PUSH
1120: LD_INT 10
1122: PUSH
1123: EMPTY
1124: LIST
1125: PUSH
1126: LD_INT 7
1128: PUSH
1129: LD_INT 14
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 6
1138: PUSH
1139: LD_INT 12
1141: PUSH
1142: LD_INT 18
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: LIST
1149: PUSH
1150: LD_INT 5
1152: PUSH
1153: LD_INT 10
1155: PUSH
1156: LD_INT 15
1158: PUSH
1159: LD_INT 20
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: PUSH
1168: EMPTY
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: PUSH
1174: LD_EXP 41
1178: PUSH
1179: LD_INT 1
1181: PLUS
1182: ARRAY
1183: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1184: LD_ADDR_EXP 4
1188: PUSH
1189: LD_EXP 39
1193: PUSH
1194: LD_INT 4
1196: PLUS
1197: ST_TO_ADDR
// shipments_density := 20 + ( def_shipments_density ) * 20 ;
1198: LD_ADDR_EXP 8
1202: PUSH
1203: LD_INT 20
1205: PUSH
1206: LD_EXP 42
1210: PUSH
1211: LD_INT 20
1213: MUL
1214: PLUS
1215: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1216: LD_ADDR_EXP 13
1220: PUSH
1221: LD_INT 0
1223: PUSH
1224: LD_INT 1
1226: PUSH
1227: LD_INT 2
1229: PUSH
1230: LD_INT 3
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: LIST
1237: LIST
1238: PUSH
1239: LD_EXP 49
1243: PUSH
1244: LD_INT 1
1246: PLUS
1247: ARRAY
1248: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1249: LD_ADDR_EXP 10
1253: PUSH
1254: LD_INT 0
1256: PUSH
1257: LD_INT 8400
1259: PUSH
1260: LD_INT 1750
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: LIST
1267: PUSH
1268: LD_EXP 48
1272: PUSH
1273: LD_INT 1
1275: PLUS
1276: ARRAY
1277: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1278: LD_ADDR_EXP 11
1282: PUSH
1283: LD_INT 0
1285: PUSH
1286: LD_INT 21000
1288: PUSH
1289: LD_INT 4200
1291: PUSH
1292: EMPTY
1293: LIST
1294: LIST
1295: LIST
1296: PUSH
1297: LD_EXP 48
1301: PUSH
1302: LD_INT 1
1304: PLUS
1305: ARRAY
1306: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1307: LD_ADDR_EXP 9
1311: PUSH
1312: LD_INT 1
1314: NEG
1315: PUSH
1316: LD_INT 350
1318: PUSH
1319: LD_INT 700
1321: PUSH
1322: LD_INT 1400
1324: PUSH
1325: LD_INT 0
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: PUSH
1335: LD_EXP 46
1339: PUSH
1340: LD_INT 1
1342: PLUS
1343: ARRAY
1344: ST_TO_ADDR
// battle_flags_id := [ ] ;
1345: LD_ADDR_EXP 27
1349: PUSH
1350: EMPTY
1351: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1352: LD_ADDR_EXP 12
1356: PUSH
1357: LD_INT 0
1359: PUSH
1360: LD_INT 1
1362: PUSH
1363: LD_INT 63000
1365: PUSH
1366: LD_INT 126000
1368: PUSH
1369: LD_INT 189000
1371: PUSH
1372: LD_INT 252000
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: PUSH
1383: LD_EXP 50
1387: PUSH
1388: LD_INT 1
1390: PLUS
1391: ARRAY
1392: ST_TO_ADDR
// tree_function := [ [ 0 , 0 , 0 , 0 , 0 ] , [ 2 , 0 , 0 , 0 , 0 ] , [ 0 , 4 , 0 , 0 , 0 ] , [ 0 , 0 , 2 , 0 , 0 ] , [ 0 , 0 , 0 , 3 , 0 ] , [ 1 , 2 , 1 , 2 , 2 ] , [ 0 , 0 , 0 , 0 , 3 ] ] [ def_tree_function + 1 ] ;
1393: LD_ADDR_EXP 14
1397: PUSH
1398: LD_INT 0
1400: PUSH
1401: LD_INT 0
1403: PUSH
1404: LD_INT 0
1406: PUSH
1407: LD_INT 0
1409: PUSH
1410: LD_INT 0
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: LIST
1419: PUSH
1420: LD_INT 2
1422: PUSH
1423: LD_INT 0
1425: PUSH
1426: LD_INT 0
1428: PUSH
1429: LD_INT 0
1431: PUSH
1432: LD_INT 0
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: PUSH
1442: LD_INT 0
1444: PUSH
1445: LD_INT 4
1447: PUSH
1448: LD_INT 0
1450: PUSH
1451: LD_INT 0
1453: PUSH
1454: LD_INT 0
1456: PUSH
1457: EMPTY
1458: LIST
1459: LIST
1460: LIST
1461: LIST
1462: LIST
1463: PUSH
1464: LD_INT 0
1466: PUSH
1467: LD_INT 0
1469: PUSH
1470: LD_INT 2
1472: PUSH
1473: LD_INT 0
1475: PUSH
1476: LD_INT 0
1478: PUSH
1479: EMPTY
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 0
1488: PUSH
1489: LD_INT 0
1491: PUSH
1492: LD_INT 0
1494: PUSH
1495: LD_INT 3
1497: PUSH
1498: LD_INT 0
1500: PUSH
1501: EMPTY
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: PUSH
1508: LD_INT 1
1510: PUSH
1511: LD_INT 2
1513: PUSH
1514: LD_INT 1
1516: PUSH
1517: LD_INT 2
1519: PUSH
1520: LD_INT 2
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: PUSH
1530: LD_INT 0
1532: PUSH
1533: LD_INT 0
1535: PUSH
1536: LD_INT 0
1538: PUSH
1539: LD_INT 0
1541: PUSH
1542: LD_INT 3
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: LIST
1551: PUSH
1552: EMPTY
1553: LIST
1554: LIST
1555: LIST
1556: LIST
1557: LIST
1558: LIST
1559: LIST
1560: PUSH
1561: LD_EXP 1
1565: PUSH
1566: LD_INT 1
1568: PLUS
1569: ARRAY
1570: ST_TO_ADDR
// buildUpTime_Delay := [ 0 , 5 5$00 , 10 10$00 , 15 15$00 ] [ def_builduptime + 1 ] ;
1571: LD_ADDR_EXP 16
1575: PUSH
1576: LD_INT 0
1578: PUSH
1579: LD_INT 10500
1581: PUSH
1582: LD_INT 21000
1584: PUSH
1585: LD_INT 31500
1587: PUSH
1588: EMPTY
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: PUSH
1594: LD_EXP 51
1598: PUSH
1599: LD_INT 1
1601: PLUS
1602: ARRAY
1603: ST_TO_ADDR
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] ;
1604: LD_ADDR_EXP 55
1608: PUSH
1609: LD_INT 8
1611: PUSH
1612: LD_INT 11
1614: PUSH
1615: LD_INT 9
1617: PUSH
1618: LD_INT 10
1620: PUSH
1621: EMPTY
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: ST_TO_ADDR
// end ;
1627: LD_VAR 0 1
1631: RET
// function prepare_map_coordinates ; var side , dep , br1 , br2 , br3 , un , i ; begin
1632: LD_INT 0
1634: PPUSH
1635: PPUSH
1636: PPUSH
1637: PPUSH
1638: PPUSH
1639: PPUSH
1640: PPUSH
1641: PPUSH
// depot_def = [ ] ;
1642: LD_ADDR_EXP 24
1646: PUSH
1647: EMPTY
1648: ST_TO_ADDR
// breastworks_def = [ ] ;
1649: LD_ADDR_EXP 25
1653: PUSH
1654: EMPTY
1655: ST_TO_ADDR
// for side := 1 to 4 do
1656: LD_ADDR_VAR 0 2
1660: PUSH
1661: DOUBLE
1662: LD_INT 1
1664: DEC
1665: ST_TO_ADDR
1666: LD_INT 4
1668: PUSH
1669: FOR_TO
1670: IFFALSE 2025
// begin dep := side * 4 - 3 ;
1672: LD_ADDR_VAR 0 3
1676: PUSH
1677: LD_VAR 0 2
1681: PUSH
1682: LD_INT 4
1684: MUL
1685: PUSH
1686: LD_INT 3
1688: MINUS
1689: ST_TO_ADDR
// br1 := side * 4 - 2 ;
1690: LD_ADDR_VAR 0 4
1694: PUSH
1695: LD_VAR 0 2
1699: PUSH
1700: LD_INT 4
1702: MUL
1703: PUSH
1704: LD_INT 2
1706: MINUS
1707: ST_TO_ADDR
// br2 := side * 4 - 1 ;
1708: LD_ADDR_VAR 0 5
1712: PUSH
1713: LD_VAR 0 2
1717: PUSH
1718: LD_INT 4
1720: MUL
1721: PUSH
1722: LD_INT 1
1724: MINUS
1725: ST_TO_ADDR
// br3 := side * 4 ;
1726: LD_ADDR_VAR 0 6
1730: PUSH
1731: LD_VAR 0 2
1735: PUSH
1736: LD_INT 4
1738: MUL
1739: ST_TO_ADDR
// depot_def := depot_def ^ [ [ GetX ( dep ) , GetY ( dep ) , GetDir ( dep ) ] ] ;
1740: LD_ADDR_EXP 24
1744: PUSH
1745: LD_EXP 24
1749: PUSH
1750: LD_VAR 0 3
1754: PPUSH
1755: CALL_OW 250
1759: PUSH
1760: LD_VAR 0 3
1764: PPUSH
1765: CALL_OW 251
1769: PUSH
1770: LD_VAR 0 3
1774: PPUSH
1775: CALL_OW 254
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: LIST
1784: PUSH
1785: EMPTY
1786: LIST
1787: ADD
1788: ST_TO_ADDR
// start_def := start_def ^ [ [ ShiftX ( GetX ( Dep ) , GetDir ( Dep ) , 6 ) , ShiftY ( GetY ( Dep ) , GetDir ( Dep ) , 6 ) ] ] ;
1789: LD_ADDR_EXP 26
1793: PUSH
1794: LD_EXP 26
1798: PUSH
1799: LD_VAR 0 3
1803: PPUSH
1804: CALL_OW 250
1808: PPUSH
1809: LD_VAR 0 3
1813: PPUSH
1814: CALL_OW 254
1818: PPUSH
1819: LD_INT 6
1821: PPUSH
1822: CALL_OW 272
1826: PUSH
1827: LD_VAR 0 3
1831: PPUSH
1832: CALL_OW 251
1836: PPUSH
1837: LD_VAR 0 3
1841: PPUSH
1842: CALL_OW 254
1846: PPUSH
1847: LD_INT 6
1849: PPUSH
1850: CALL_OW 273
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: PUSH
1859: EMPTY
1860: LIST
1861: ADD
1862: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ GetX ( br1 ) , GetY ( br1 ) , GetDir ( br1 ) ] , [ GetX ( br2 ) , GetY ( br2 ) , GetDir ( br2 ) ] , [ GetX ( br3 ) , GetY ( br3 ) , GetDir ( br3 ) ] ] ] ;
1863: LD_ADDR_EXP 25
1867: PUSH
1868: LD_EXP 25
1872: PUSH
1873: LD_VAR 0 4
1877: PPUSH
1878: CALL_OW 250
1882: PUSH
1883: LD_VAR 0 4
1887: PPUSH
1888: CALL_OW 251
1892: PUSH
1893: LD_VAR 0 4
1897: PPUSH
1898: CALL_OW 254
1902: PUSH
1903: EMPTY
1904: LIST
1905: LIST
1906: LIST
1907: PUSH
1908: LD_VAR 0 5
1912: PPUSH
1913: CALL_OW 250
1917: PUSH
1918: LD_VAR 0 5
1922: PPUSH
1923: CALL_OW 251
1927: PUSH
1928: LD_VAR 0 5
1932: PPUSH
1933: CALL_OW 254
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: LIST
1942: PUSH
1943: LD_VAR 0 6
1947: PPUSH
1948: CALL_OW 250
1952: PUSH
1953: LD_VAR 0 6
1957: PPUSH
1958: CALL_OW 251
1962: PUSH
1963: LD_VAR 0 6
1967: PPUSH
1968: CALL_OW 254
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: LIST
1977: PUSH
1978: EMPTY
1979: LIST
1980: LIST
1981: LIST
1982: PUSH
1983: EMPTY
1984: LIST
1985: ADD
1986: ST_TO_ADDR
// DestroyUnit ( dep ) ;
1987: LD_VAR 0 3
1991: PPUSH
1992: CALL_OW 65
// DestroyUnit ( br1 ) ;
1996: LD_VAR 0 4
2000: PPUSH
2001: CALL_OW 65
// DestroyUnit ( br2 ) ;
2005: LD_VAR 0 5
2009: PPUSH
2010: CALL_OW 65
// DestroyUnit ( br3 ) ;
2014: LD_VAR 0 6
2018: PPUSH
2019: CALL_OW 65
// end ;
2023: GO 1669
2025: POP
2026: POP
// if not def_extra_oil_deposits then
2027: LD_EXP 43
2031: NOT
2032: IFFALSE 2114
// for i in [ [ 52 , 44 ] , [ 84 , 37 ] , [ 74 , 81 ] , [ 106 , 77 ] ] do
2034: LD_ADDR_VAR 0 8
2038: PUSH
2039: LD_INT 52
2041: PUSH
2042: LD_INT 44
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PUSH
2049: LD_INT 84
2051: PUSH
2052: LD_INT 37
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: PUSH
2059: LD_INT 74
2061: PUSH
2062: LD_INT 81
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 106
2071: PUSH
2072: LD_INT 77
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PUSH
2079: EMPTY
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: PUSH
2085: FOR_IN
2086: IFFALSE 2112
// begin RemoveDepositXY ( i [ 1 ] , i [ 2 ] ) ;
2088: LD_VAR 0 8
2092: PUSH
2093: LD_INT 1
2095: ARRAY
2096: PPUSH
2097: LD_VAR 0 8
2101: PUSH
2102: LD_INT 2
2104: ARRAY
2105: PPUSH
2106: CALL_OW 63
// end ;
2110: GO 2085
2112: POP
2113: POP
// end ;
2114: LD_VAR 0 1
2118: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2119: LD_INT 0
2121: PPUSH
2122: PPUSH
2123: PPUSH
// if not Team_Game then
2124: LD_EXP 22
2128: NOT
2129: IFFALSE 2227
// begin for i = 1 to 8 do
2131: LD_ADDR_VAR 0 2
2135: PUSH
2136: DOUBLE
2137: LD_INT 1
2139: DEC
2140: ST_TO_ADDR
2141: LD_INT 8
2143: PUSH
2144: FOR_TO
2145: IFFALSE 2223
// for j = 1 to 8 do
2147: LD_ADDR_VAR 0 3
2151: PUSH
2152: DOUBLE
2153: LD_INT 1
2155: DEC
2156: ST_TO_ADDR
2157: LD_INT 8
2159: PUSH
2160: FOR_TO
2161: IFFALSE 2219
// if i <> j then
2163: LD_VAR 0 2
2167: PUSH
2168: LD_VAR 0 3
2172: NONEQUAL
2173: IFFALSE 2197
// SetAttitude ( i , j , att_neutral , true ) else
2175: LD_VAR 0 2
2179: PPUSH
2180: LD_VAR 0 3
2184: PPUSH
2185: LD_INT 0
2187: PPUSH
2188: LD_INT 1
2190: PPUSH
2191: CALL_OW 80
2195: GO 2217
// SetAttitude ( i , j , att_friend , true ) ;
2197: LD_VAR 0 2
2201: PPUSH
2202: LD_VAR 0 3
2206: PPUSH
2207: LD_INT 1
2209: PPUSH
2210: LD_INT 1
2212: PPUSH
2213: CALL_OW 80
2217: GO 2160
2219: POP
2220: POP
2221: GO 2144
2223: POP
2224: POP
// end else
2225: GO 2402
// begin if def_shared_vision then
2227: LD_EXP 45
2231: IFFALSE 2296
// begin for i in Teams do
2233: LD_ADDR_VAR 0 2
2237: PUSH
2238: LD_EXP 18
2242: PUSH
2243: FOR_IN
2244: IFFALSE 2294
// for j = 2 to i do
2246: LD_ADDR_VAR 0 3
2250: PUSH
2251: DOUBLE
2252: LD_INT 2
2254: DEC
2255: ST_TO_ADDR
2256: LD_VAR 0 2
2260: PUSH
2261: FOR_TO
2262: IFFALSE 2290
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2264: LD_VAR 0 2
2268: PUSH
2269: LD_VAR 0 3
2273: ARRAY
2274: PPUSH
2275: LD_VAR 0 2
2279: PUSH
2280: LD_INT 1
2282: ARRAY
2283: PPUSH
2284: CALL_OW 343
2288: GO 2261
2290: POP
2291: POP
2292: GO 2243
2294: POP
2295: POP
// end ; for i = 1 to 8 do
2296: LD_ADDR_VAR 0 2
2300: PUSH
2301: DOUBLE
2302: LD_INT 1
2304: DEC
2305: ST_TO_ADDR
2306: LD_INT 8
2308: PUSH
2309: FOR_TO
2310: IFFALSE 2400
// for j = 1 to 8 do
2312: LD_ADDR_VAR 0 3
2316: PUSH
2317: DOUBLE
2318: LD_INT 1
2320: DEC
2321: ST_TO_ADDR
2322: LD_INT 8
2324: PUSH
2325: FOR_TO
2326: IFFALSE 2396
// if Side_Teams [ i ] = Side_Teams [ j ] then
2328: LD_EXP 17
2332: PUSH
2333: LD_VAR 0 2
2337: ARRAY
2338: PUSH
2339: LD_EXP 17
2343: PUSH
2344: LD_VAR 0 3
2348: ARRAY
2349: EQUAL
2350: IFFALSE 2374
// SetAttitude ( i , j , att_friend , true ) else
2352: LD_VAR 0 2
2356: PPUSH
2357: LD_VAR 0 3
2361: PPUSH
2362: LD_INT 1
2364: PPUSH
2365: LD_INT 1
2367: PPUSH
2368: CALL_OW 80
2372: GO 2394
// SetAttitude ( i , j , att_enemy , true ) ;
2374: LD_VAR 0 2
2378: PPUSH
2379: LD_VAR 0 3
2383: PPUSH
2384: LD_INT 2
2386: PPUSH
2387: LD_INT 1
2389: PPUSH
2390: CALL_OW 80
2394: GO 2325
2396: POP
2397: POP
2398: GO 2309
2400: POP
2401: POP
// end ; end ;
2402: LD_VAR 0 1
2406: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2407: LD_INT 0
2409: PPUSH
2410: PPUSH
2411: PPUSH
2412: PPUSH
// result := [ ] ;
2413: LD_ADDR_VAR 0 7
2417: PUSH
2418: EMPTY
2419: ST_TO_ADDR
// for i := 1 to count do
2420: LD_ADDR_VAR 0 8
2424: PUSH
2425: DOUBLE
2426: LD_INT 1
2428: DEC
2429: ST_TO_ADDR
2430: LD_VAR 0 1
2434: PUSH
2435: FOR_TO
2436: IFFALSE 2854
// begin uc_direction := Rand ( 0 , 5 ) ;
2438: LD_ADDR_OWVAR 24
2442: PUSH
2443: LD_INT 0
2445: PPUSH
2446: LD_INT 5
2448: PPUSH
2449: CALL_OW 12
2453: ST_TO_ADDR
// if commander then
2454: LD_LOC 1
2458: IFFALSE 2567
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2460: LD_ADDR_OWVAR 26
2464: PUSH
2465: LD_OWVAR 19
2469: PUSH
2470: LD_OWVAR 20
2474: ARRAY
2475: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2476: LD_INT 1
2478: PPUSH
2479: LD_INT 2
2481: PPUSH
2482: CALL_OW 12
2486: PPUSH
2487: LD_VAR 0 2
2491: PPUSH
2492: LD_EXP 5
2496: PUSH
2497: LD_INT 2
2499: PLUS
2500: PPUSH
2501: CALL_OW 380
// hc_importance := 105 ;
2505: LD_ADDR_OWVAR 32
2509: PUSH
2510: LD_INT 105
2512: ST_TO_ADDR
// commander := false ;
2513: LD_ADDR_LOC 1
2517: PUSH
2518: LD_INT 0
2520: ST_TO_ADDR
// if Multiplayer then
2521: LD_OWVAR 4
2525: IFFALSE 2565
// begin hc_gallery := MULTIAVATARS ;
2527: LD_ADDR_OWVAR 33
2531: PUSH
2532: LD_STRING MULTIAVATARS
2534: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2535: LD_ADDR_OWVAR 34
2539: PUSH
2540: LD_OWVAR 20
2544: PPUSH
2545: CALL_OW 525
2549: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2550: LD_ADDR_OWVAR 27
2554: PUSH
2555: LD_OWVAR 20
2559: PPUSH
2560: CALL_OW 526
2564: ST_TO_ADDR
// end ; end else
2565: GO 2630
// begin hc_name :=  ;
2567: LD_ADDR_OWVAR 26
2571: PUSH
2572: LD_STRING 
2574: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2575: LD_INT 1
2577: PPUSH
2578: LD_INT 2
2580: PPUSH
2581: CALL_OW 12
2585: PPUSH
2586: LD_VAR 0 2
2590: PPUSH
2591: LD_EXP 5
2595: PPUSH
2596: CALL_OW 380
// hc_importance := 0 ;
2600: LD_ADDR_OWVAR 32
2604: PUSH
2605: LD_INT 0
2607: ST_TO_ADDR
// if Multiplayer then
2608: LD_OWVAR 4
2612: IFFALSE 2630
// begin hc_gallery :=  ;
2614: LD_ADDR_OWVAR 33
2618: PUSH
2619: LD_STRING 
2621: ST_TO_ADDR
// hc_face_number := 0 ;
2622: LD_ADDR_OWVAR 34
2626: PUSH
2627: LD_INT 0
2629: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2630: LD_ADDR_VAR 0 10
2634: PUSH
2635: CALL_OW 44
2639: ST_TO_ADDR
// if global_defined then
2640: LD_LOC 3
2644: IFFALSE 2784
// begin if ( cl = class_soldier ) then
2646: LD_VAR 0 2
2650: PUSH
2651: LD_INT 1
2653: EQUAL
2654: IFFALSE 2674
// j := i + soldiers_created else
2656: LD_ADDR_VAR 0 9
2660: PUSH
2661: LD_VAR 0 8
2665: PUSH
2666: LD_LOC 4
2670: PLUS
2671: ST_TO_ADDR
2672: GO 2684
// j := i ;
2674: LD_ADDR_VAR 0 9
2678: PUSH
2679: LD_VAR 0 8
2683: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2684: LD_LOC 2
2688: PUSH
2689: LD_VAR 0 2
2693: ARRAY
2694: PUSH
2695: LD_VAR 0 9
2699: ARRAY
2700: PPUSH
2701: LD_VAR 0 10
2705: PPUSH
2706: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2710: LD_VAR 0 10
2714: PPUSH
2715: LD_INT 2
2717: PPUSH
2718: LD_LOC 2
2722: PUSH
2723: LD_VAR 0 2
2727: ARRAY
2728: PUSH
2729: LD_VAR 0 9
2733: ARRAY
2734: PPUSH
2735: LD_INT 2
2737: PPUSH
2738: CALL_OW 260
2742: PPUSH
2743: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2747: LD_VAR 0 10
2751: PPUSH
2752: LD_INT 1
2754: PPUSH
2755: LD_LOC 2
2759: PUSH
2760: LD_VAR 0 2
2764: ARRAY
2765: PUSH
2766: LD_VAR 0 9
2770: ARRAY
2771: PPUSH
2772: LD_INT 1
2774: PPUSH
2775: CALL_OW 260
2779: PPUSH
2780: CALL_OW 239
// end ; if building then
2784: LD_VAR 0 6
2788: IFFALSE 2806
// PlaceHumanInUnit ( un , building ) else
2790: LD_VAR 0 10
2794: PPUSH
2795: LD_VAR 0 6
2799: PPUSH
2800: CALL_OW 52
2804: GO 2833
// PlaceUnitXYR ( un , x , y , r , false ) ;
2806: LD_VAR 0 10
2810: PPUSH
2811: LD_VAR 0 3
2815: PPUSH
2816: LD_VAR 0 4
2820: PPUSH
2821: LD_VAR 0 5
2825: PPUSH
2826: LD_INT 0
2828: PPUSH
2829: CALL_OW 50
// result := result ^ [ un ] ;
2833: LD_ADDR_VAR 0 7
2837: PUSH
2838: LD_VAR 0 7
2842: PUSH
2843: LD_VAR 0 10
2847: PUSH
2848: EMPTY
2849: LIST
2850: ADD
2851: ST_TO_ADDR
// end ;
2852: GO 2435
2854: POP
2855: POP
// if not global_defined then
2856: LD_LOC 3
2860: NOT
2861: IFFALSE 2939
// if ( global_units >= cl ) then
2863: LD_LOC 2
2867: PUSH
2868: LD_VAR 0 2
2872: GREATEREQUAL
2873: IFFALSE 2914
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2875: LD_ADDR_LOC 2
2879: PUSH
2880: LD_LOC 2
2884: PPUSH
2885: LD_VAR 0 2
2889: PPUSH
2890: LD_LOC 2
2894: PUSH
2895: LD_VAR 0 2
2899: ARRAY
2900: PUSH
2901: LD_VAR 0 7
2905: ADD
2906: PPUSH
2907: CALL_OW 1
2911: ST_TO_ADDR
2912: GO 2939
// global_units := Replace ( global_units , cl , result ) ;
2914: LD_ADDR_LOC 2
2918: PUSH
2919: LD_LOC 2
2923: PPUSH
2924: LD_VAR 0 2
2928: PPUSH
2929: LD_VAR 0 7
2933: PPUSH
2934: CALL_OW 1
2938: ST_TO_ADDR
// if commander then
2939: LD_LOC 1
2943: IFFALSE 2990
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2945: LD_ADDR_EXP 28
2949: PUSH
2950: LD_EXP 28
2954: PPUSH
2955: LD_OWVAR 20
2959: PPUSH
2960: LD_EXP 28
2964: PUSH
2965: LD_OWVAR 20
2969: ARRAY
2970: PUSH
2971: LD_VAR 0 10
2975: ADD
2976: PPUSH
2977: CALL_OW 1
2981: ST_TO_ADDR
// commander := false ;
2982: LD_ADDR_LOC 1
2986: PUSH
2987: LD_INT 0
2989: ST_TO_ADDR
// end ; end ;
2990: LD_VAR 0 7
2994: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
2995: LD_INT 0
2997: PPUSH
2998: PPUSH
2999: PPUSH
3000: PPUSH
3001: PPUSH
3002: PPUSH
3003: PPUSH
3004: PPUSH
3005: PPUSH
// pos := Side_Positions [ side ] ;
3006: LD_ADDR_VAR 0 3
3010: PUSH
3011: LD_EXP 20
3015: PUSH
3016: LD_VAR 0 1
3020: ARRAY
3021: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3022: LD_ADDR_OWVAR 21
3026: PUSH
3027: LD_EXP 21
3031: PUSH
3032: LD_VAR 0 1
3036: ARRAY
3037: ST_TO_ADDR
// uc_side := side ;
3038: LD_ADDR_OWVAR 20
3042: PUSH
3043: LD_VAR 0 1
3047: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3048: LD_ADDR_VAR 0 4
3052: PUSH
3053: LD_EXP 24
3057: PUSH
3058: LD_VAR 0 3
3062: ARRAY
3063: PUSH
3064: LD_INT 1
3066: ARRAY
3067: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3068: LD_ADDR_VAR 0 5
3072: PUSH
3073: LD_EXP 24
3077: PUSH
3078: LD_VAR 0 3
3082: ARRAY
3083: PUSH
3084: LD_INT 2
3086: ARRAY
3087: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3088: LD_ADDR_VAR 0 6
3092: PUSH
3093: LD_EXP 24
3097: PUSH
3098: LD_VAR 0 3
3102: ARRAY
3103: PUSH
3104: LD_INT 3
3106: ARRAY
3107: ST_TO_ADDR
// if is_depot then
3108: LD_EXP 2
3112: IFFALSE 3245
// begin bc_type = b_depot ;
3114: LD_ADDR_OWVAR 42
3118: PUSH
3119: LD_INT 0
3121: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3122: LD_ADDR_VAR 0 10
3126: PUSH
3127: LD_VAR 0 4
3131: PPUSH
3132: LD_VAR 0 5
3136: PPUSH
3137: LD_VAR 0 6
3141: PPUSH
3142: CALL_OW 47
3146: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3147: LD_VAR 0 10
3151: PPUSH
3152: LD_STRING @
3154: PUSH
3155: LD_VAR 0 1
3159: STR
3160: PPUSH
3161: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3165: LD_VAR 0 10
3169: PPUSH
3170: CALL_OW 274
3174: PPUSH
3175: LD_INT 1
3177: PPUSH
3178: LD_EXP 7
3182: PUSH
3183: LD_INT 1
3185: ARRAY
3186: PPUSH
3187: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3191: LD_VAR 0 10
3195: PPUSH
3196: CALL_OW 274
3200: PPUSH
3201: LD_INT 2
3203: PPUSH
3204: LD_EXP 7
3208: PUSH
3209: LD_INT 2
3211: ARRAY
3212: PPUSH
3213: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3217: LD_VAR 0 10
3221: PPUSH
3222: CALL_OW 274
3226: PPUSH
3227: LD_INT 3
3229: PPUSH
3230: LD_EXP 7
3234: PUSH
3235: LD_INT 3
3237: ARRAY
3238: PPUSH
3239: CALL_OW 277
// end else
3243: GO 3389
// begin for i := 1 to 3 do
3245: LD_ADDR_VAR 0 7
3249: PUSH
3250: DOUBLE
3251: LD_INT 1
3253: DEC
3254: ST_TO_ADDR
3255: LD_INT 3
3257: PUSH
3258: FOR_TO
3259: IFFALSE 3387
// begin r := starting_resources [ i ] ;
3261: LD_ADDR_VAR 0 8
3265: PUSH
3266: LD_EXP 7
3270: PUSH
3271: LD_VAR 0 7
3275: ARRAY
3276: ST_TO_ADDR
// while r >= 10 do
3277: LD_VAR 0 8
3281: PUSH
3282: LD_INT 10
3284: GREATEREQUAL
3285: IFFALSE 3385
// if r > 50 then
3287: LD_VAR 0 8
3291: PUSH
3292: LD_INT 50
3294: GREATER
3295: IFFALSE 3341
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3297: LD_VAR 0 7
3301: PPUSH
3302: LD_INT 5
3304: PPUSH
3305: LD_VAR 0 4
3309: PPUSH
3310: LD_VAR 0 5
3314: PPUSH
3315: LD_INT 4
3317: PPUSH
3318: LD_INT 0
3320: PPUSH
3321: CALL_OW 60
// r := r - 50 ;
3325: LD_ADDR_VAR 0 8
3329: PUSH
3330: LD_VAR 0 8
3334: PUSH
3335: LD_INT 50
3337: MINUS
3338: ST_TO_ADDR
// end else
3339: GO 3383
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3341: LD_VAR 0 7
3345: PPUSH
3346: LD_VAR 0 8
3350: PUSH
3351: LD_INT 10
3353: DIV
3354: PPUSH
3355: LD_VAR 0 4
3359: PPUSH
3360: LD_VAR 0 5
3364: PPUSH
3365: LD_INT 4
3367: PPUSH
3368: LD_INT 0
3370: PPUSH
3371: CALL_OW 60
// r := 0 ;
3375: LD_ADDR_VAR 0 8
3379: PUSH
3380: LD_INT 0
3382: ST_TO_ADDR
// end ;
3383: GO 3277
// end ;
3385: GO 3258
3387: POP
3388: POP
// end ; for r in starting_crates do
3389: LD_ADDR_VAR 0 8
3393: PUSH
3394: LD_EXP 6
3398: PUSH
3399: FOR_IN
3400: IFFALSE 3432
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3402: LD_INT 1
3404: PPUSH
3405: LD_INT 5
3407: PPUSH
3408: LD_VAR 0 4
3412: PPUSH
3413: LD_VAR 0 5
3417: PPUSH
3418: LD_VAR 0 8
3422: PPUSH
3423: LD_INT 0
3425: PPUSH
3426: CALL_OW 60
3430: GO 3399
3432: POP
3433: POP
// if def_morale_flags then
3434: LD_EXP 46
3438: IFFALSE 3577
// begin x := start_def [ pos ] [ 1 ] ;
3440: LD_ADDR_VAR 0 4
3444: PUSH
3445: LD_EXP 26
3449: PUSH
3450: LD_VAR 0 3
3454: ARRAY
3455: PUSH
3456: LD_INT 1
3458: ARRAY
3459: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3460: LD_ADDR_VAR 0 5
3464: PUSH
3465: LD_EXP 26
3469: PUSH
3470: LD_VAR 0 3
3474: ARRAY
3475: PUSH
3476: LD_INT 2
3478: ARRAY
3479: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3480: LD_VAR 0 4
3484: PPUSH
3485: LD_VAR 0 5
3489: PPUSH
3490: LD_INT 12
3492: PPUSH
3493: LD_INT 2
3495: PPUSH
3496: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3500: LD_ADDR_EXP 27
3504: PUSH
3505: LD_EXP 27
3509: PUSH
3510: LD_VAR 0 1
3514: PPUSH
3515: LD_VAR 0 4
3519: PPUSH
3520: LD_VAR 0 5
3524: PPUSH
3525: LD_INT 1
3527: PUSH
3528: LD_INT 100
3530: PUSH
3531: EMPTY
3532: LIST
3533: LIST
3534: PUSH
3535: LD_INT 2
3537: PUSH
3538: LD_INT 50
3540: PUSH
3541: EMPTY
3542: LIST
3543: LIST
3544: PUSH
3545: LD_INT 3
3547: PUSH
3548: LD_INT 20
3550: PUSH
3551: EMPTY
3552: LIST
3553: LIST
3554: PUSH
3555: LD_INT 20
3557: PUSH
3558: LD_INT 100
3560: PUSH
3561: EMPTY
3562: LIST
3563: LIST
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: PPUSH
3571: CALL_OW 418
3575: ADD
3576: ST_TO_ADDR
// end ; commander := true ;
3577: LD_ADDR_LOC 1
3581: PUSH
3582: LD_INT 1
3584: ST_TO_ADDR
// soldiers_created := 0 ;
3585: LD_ADDR_LOC 4
3589: PUSH
3590: LD_INT 0
3592: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3593: LD_ADDR_VAR 0 7
3597: PUSH
3598: DOUBLE
3599: LD_INT 1
3601: DEC
3602: ST_TO_ADDR
3603: LD_EXP 3
3607: PUSH
3608: FOR_TO
3609: IFFALSE 3762
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3611: LD_ADDR_VAR 0 4
3615: PUSH
3616: LD_EXP 25
3620: PUSH
3621: LD_VAR 0 3
3625: ARRAY
3626: PUSH
3627: LD_VAR 0 7
3631: ARRAY
3632: PUSH
3633: LD_INT 1
3635: ARRAY
3636: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3637: LD_ADDR_VAR 0 5
3641: PUSH
3642: LD_EXP 25
3646: PUSH
3647: LD_VAR 0 3
3651: ARRAY
3652: PUSH
3653: LD_VAR 0 7
3657: ARRAY
3658: PUSH
3659: LD_INT 2
3661: ARRAY
3662: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3663: LD_ADDR_VAR 0 6
3667: PUSH
3668: LD_EXP 25
3672: PUSH
3673: LD_VAR 0 3
3677: ARRAY
3678: PUSH
3679: LD_VAR 0 7
3683: ARRAY
3684: PUSH
3685: LD_INT 3
3687: ARRAY
3688: ST_TO_ADDR
// bc_type := b_breastwork ;
3689: LD_ADDR_OWVAR 42
3693: PUSH
3694: LD_INT 31
3696: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3697: LD_ADDR_VAR 0 9
3701: PUSH
3702: LD_VAR 0 4
3706: PPUSH
3707: LD_VAR 0 5
3711: PPUSH
3712: LD_VAR 0 6
3716: PPUSH
3717: CALL_OW 47
3721: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3722: LD_INT 1
3724: PPUSH
3725: LD_INT 1
3727: PPUSH
3728: LD_INT 0
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: LD_INT 0
3736: PPUSH
3737: LD_VAR 0 9
3741: PPUSH
3742: CALL 2407 0 6
// soldiers_created := soldiers_created + 1 ;
3746: LD_ADDR_LOC 4
3750: PUSH
3751: LD_LOC 4
3755: PUSH
3756: LD_INT 1
3758: PLUS
3759: ST_TO_ADDR
// end ;
3760: GO 3608
3762: POP
3763: POP
// x := start_def [ pos ] [ 1 ] ;
3764: LD_ADDR_VAR 0 4
3768: PUSH
3769: LD_EXP 26
3773: PUSH
3774: LD_VAR 0 3
3778: ARRAY
3779: PUSH
3780: LD_INT 1
3782: ARRAY
3783: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3784: LD_ADDR_VAR 0 5
3788: PUSH
3789: LD_EXP 26
3793: PUSH
3794: LD_VAR 0 3
3798: ARRAY
3799: PUSH
3800: LD_INT 2
3802: ARRAY
3803: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3804: LD_LOC 8
3808: PUSH
3809: LD_EXP 3
3813: MINUS
3814: PPUSH
3815: LD_INT 1
3817: PPUSH
3818: LD_VAR 0 4
3822: PPUSH
3823: LD_VAR 0 5
3827: PPUSH
3828: LD_INT 5
3830: PPUSH
3831: LD_INT 0
3833: PPUSH
3834: CALL 2407 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3838: LD_LOC 5
3842: PPUSH
3843: LD_INT 2
3845: PPUSH
3846: LD_VAR 0 4
3850: PPUSH
3851: LD_VAR 0 5
3855: PPUSH
3856: LD_INT 5
3858: PPUSH
3859: LD_INT 0
3861: PPUSH
3862: CALL 2407 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3866: LD_LOC 7
3870: PPUSH
3871: LD_INT 3
3873: PPUSH
3874: LD_VAR 0 4
3878: PPUSH
3879: LD_VAR 0 5
3883: PPUSH
3884: LD_INT 5
3886: PPUSH
3887: LD_INT 0
3889: PPUSH
3890: CALL 2407 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3894: LD_LOC 6
3898: PPUSH
3899: LD_INT 4
3901: PPUSH
3902: LD_VAR 0 4
3906: PPUSH
3907: LD_VAR 0 5
3911: PPUSH
3912: LD_INT 5
3914: PPUSH
3915: LD_INT 0
3917: PPUSH
3918: CALL 2407 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3922: LD_EXP 47
3926: PUSH
3927: LD_INT 20
3929: PPUSH
3930: LD_VAR 0 1
3934: PPUSH
3935: CALL_OW 321
3939: PUSH
3940: LD_INT 1
3942: EQUAL
3943: AND
3944: IFFALSE 3961
// SetTech ( tech_SibDet , side , state_researched ) ;
3946: LD_INT 20
3948: PPUSH
3949: LD_VAR 0 1
3953: PPUSH
3954: LD_INT 2
3956: PPUSH
3957: CALL_OW 322
// if def_siberite_bomb = 1 then
3961: LD_EXP 50
3965: PUSH
3966: LD_INT 1
3968: EQUAL
3969: IFFALSE 4003
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3971: LD_INT 25
3973: PPUSH
3974: LD_VAR 0 1
3978: PPUSH
3979: LD_INT 1
3981: PPUSH
3982: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3986: LD_INT 73
3988: PPUSH
3989: LD_VAR 0 1
3993: PPUSH
3994: LD_INT 1
3996: PPUSH
3997: CALL_OW 322
// end else
4001: GO 4033
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4003: LD_INT 25
4005: PPUSH
4006: LD_VAR 0 1
4010: PPUSH
4011: LD_INT 0
4013: PPUSH
4014: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4018: LD_INT 73
4020: PPUSH
4021: LD_VAR 0 1
4025: PPUSH
4026: LD_INT 0
4028: PPUSH
4029: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4033: LD_INT 24
4035: PPUSH
4036: LD_VAR 0 1
4040: PPUSH
4041: LD_INT 0
4043: PPUSH
4044: CALL_OW 322
// global_defined := true ;
4048: LD_ADDR_LOC 3
4052: PUSH
4053: LD_INT 1
4055: ST_TO_ADDR
// end ;
4056: LD_VAR 0 2
4060: RET
// every 0 0$1 do
4061: GO 4063
4063: DISABLE
// if ( def_siberite_bomb > 1 ) then
4064: LD_EXP 50
4068: PUSH
4069: LD_INT 1
4071: GREATER
4072: IFFALSE 4087
// begin wait ( siberite_bomb_Delay ) ;
4074: LD_EXP 12
4078: PPUSH
4079: CALL_OW 67
// EnableSibFiss ;
4083: CALL 4088 0 0
// end ;
4087: END
// function EnableSibFiss ; var i ; begin
4088: LD_INT 0
4090: PPUSH
4091: PPUSH
// for i := 1 to 8 do
4092: LD_ADDR_VAR 0 2
4096: PUSH
4097: DOUBLE
4098: LD_INT 1
4100: DEC
4101: ST_TO_ADDR
4102: LD_INT 8
4104: PUSH
4105: FOR_TO
4106: IFFALSE 4152
// if Side_Positions [ i ] then
4108: LD_EXP 20
4112: PUSH
4113: LD_VAR 0 2
4117: ARRAY
4118: IFFALSE 4150
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4120: LD_INT 25
4122: PPUSH
4123: LD_VAR 0 2
4127: PPUSH
4128: LD_INT 1
4130: PPUSH
4131: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4135: LD_INT 73
4137: PPUSH
4138: LD_VAR 0 2
4142: PPUSH
4143: LD_INT 1
4145: PPUSH
4146: CALL_OW 322
// end ;
4150: GO 4105
4152: POP
4153: POP
// end ;
4154: LD_VAR 0 1
4158: RET
// function prepare_sides ; var i ; begin
4159: LD_INT 0
4161: PPUSH
4162: PPUSH
// global_units := [ ] ;
4163: LD_ADDR_LOC 2
4167: PUSH
4168: EMPTY
4169: ST_TO_ADDR
// global_defined := false ;
4170: LD_ADDR_LOC 3
4174: PUSH
4175: LD_INT 0
4177: ST_TO_ADDR
// CountClassMembers ;
4178: CALL 4228 0 0
// for i := 1 to 8 do
4182: LD_ADDR_VAR 0 2
4186: PUSH
4187: DOUBLE
4188: LD_INT 1
4190: DEC
4191: ST_TO_ADDR
4192: LD_INT 8
4194: PUSH
4195: FOR_TO
4196: IFFALSE 4221
// if Side_Positions [ i ] then
4198: LD_EXP 20
4202: PUSH
4203: LD_VAR 0 2
4207: ARRAY
4208: IFFALSE 4219
// prepare_side ( i ) ;
4210: LD_VAR 0 2
4214: PPUSH
4215: CALL 2995 0 1
4219: GO 4195
4221: POP
4222: POP
// end ;
4223: LD_VAR 0 1
4227: RET
// function CountClassMembers ; var Mode ; begin
4228: LD_INT 0
4230: PPUSH
4231: PPUSH
// if No_Mechs then
4232: LD_EXP 52
4236: IFFALSE 4248
// Mode := 2 else
4238: LD_ADDR_VAR 0 2
4242: PUSH
4243: LD_INT 2
4245: ST_TO_ADDR
4246: GO 4256
// Mode := 1 ;
4248: LD_ADDR_VAR 0 2
4252: PUSH
4253: LD_INT 1
4255: ST_TO_ADDR
// neng := number_of_people ;
4256: LD_ADDR_LOC 5
4260: PUSH
4261: LD_EXP 4
4265: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4266: LD_ADDR_LOC 8
4270: PUSH
4271: LD_LOC 5
4275: PUSH
4276: LD_INT 4
4278: PUSH
4279: LD_INT 3
4281: PUSH
4282: EMPTY
4283: LIST
4284: LIST
4285: PUSH
4286: LD_VAR 0 2
4290: ARRAY
4291: DIV
4292: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4293: LD_LOC 8
4297: PUSH
4298: LD_EXP 3
4302: LESS
4303: IFFALSE 4315
// nsol := number_of_breastworks ;
4305: LD_ADDR_LOC 8
4309: PUSH
4310: LD_EXP 3
4314: ST_TO_ADDR
// neng := neng - nsol ;
4315: LD_ADDR_LOC 5
4319: PUSH
4320: LD_LOC 5
4324: PUSH
4325: LD_LOC 8
4329: MINUS
4330: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4331: LD_ADDR_LOC 6
4335: PUSH
4336: LD_LOC 5
4340: PUSH
4341: LD_INT 3
4343: PUSH
4344: LD_INT 2
4346: PUSH
4347: EMPTY
4348: LIST
4349: LIST
4350: PUSH
4351: LD_VAR 0 2
4355: ARRAY
4356: DIV
4357: ST_TO_ADDR
// if ( nsci < 1 ) then
4358: LD_LOC 6
4362: PUSH
4363: LD_INT 1
4365: LESS
4366: IFFALSE 4376
// nsci := 1 ;
4368: LD_ADDR_LOC 6
4372: PUSH
4373: LD_INT 1
4375: ST_TO_ADDR
// neng := neng - nsci ;
4376: LD_ADDR_LOC 5
4380: PUSH
4381: LD_LOC 5
4385: PUSH
4386: LD_LOC 6
4390: MINUS
4391: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4392: LD_ADDR_LOC 7
4396: PUSH
4397: LD_LOC 5
4401: PUSH
4402: LD_INT 2
4404: DIV
4405: PUSH
4406: LD_INT 0
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: PUSH
4413: LD_VAR 0 2
4417: ARRAY
4418: ST_TO_ADDR
// neng := neng - nmech ;
4419: LD_ADDR_LOC 5
4423: PUSH
4424: LD_LOC 5
4428: PUSH
4429: LD_LOC 7
4433: MINUS
4434: ST_TO_ADDR
// if ( neng < 1 ) then
4435: LD_LOC 5
4439: PUSH
4440: LD_INT 1
4442: LESS
4443: IFFALSE 4453
// neng := 1 ;
4445: LD_ADDR_LOC 5
4449: PUSH
4450: LD_INT 1
4452: ST_TO_ADDR
// end ;
4453: LD_VAR 0 1
4457: RET
// starting begin disable ( 98 ) ;
4458: LD_INT 98
4460: DISABLE_MARKED
// disable ( 99 ) ;
4461: LD_INT 99
4463: DISABLE_MARKED
// disable ( 400 ) ;
4464: LD_INT 400
4466: DISABLE_MARKED
// disable ( 401 ) ;
4467: LD_INT 401
4469: DISABLE_MARKED
// disable ( 600 ) ;
4470: LD_INT 600
4472: DISABLE_MARKED
// mp_selectmsg := true ;
4473: LD_ADDR_OWVAR 13
4477: PUSH
4478: LD_INT 1
4480: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4481: CALL 68 0 0
// prepare_map_coordinates ;
4485: CALL 1632 0 0
// set_shared_visions_and_alliances ;
4489: CALL 2119 0 0
// ResetFog ;
4493: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4497: LD_OWVAR 2
4501: PPUSH
4502: CALL_OW 520
// prepare_sides ;
4506: CALL 4159 0 0
// Init_Win_Condition ;
4510: CALL 16130 0 0
// InitLimits ;
4514: CALL 9950 0 0
// ShowTimer ;
4518: CALL 10887 0 0
// init_shipments_and_respawning ;
4522: CALL 5647 0 0
// music_nat := Side_Nations [ your_side ] ;
4526: LD_ADDR_OWVAR 71
4530: PUSH
4531: LD_EXP 21
4535: PUSH
4536: LD_OWVAR 2
4540: ARRAY
4541: ST_TO_ADDR
// if IAmSpec then
4542: CALL_OW 531
4546: IFFALSE 4570
// begin fogoff ( true ) ;
4548: LD_INT 1
4550: PPUSH
4551: CALL_OW 344
// CenterNowOnXY ( 79 , 59 ) ;
4555: LD_INT 79
4557: PPUSH
4558: LD_INT 59
4560: PPUSH
4561: CALL_OW 86
// enable ( 400 ) ;
4565: LD_INT 400
4567: ENABLE_MARKED
// end else
4568: GO 4616
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4570: LD_EXP 26
4574: PUSH
4575: LD_EXP 20
4579: PUSH
4580: LD_OWVAR 2
4584: ARRAY
4585: ARRAY
4586: PUSH
4587: LD_INT 1
4589: ARRAY
4590: PPUSH
4591: LD_EXP 26
4595: PUSH
4596: LD_EXP 20
4600: PUSH
4601: LD_OWVAR 2
4605: ARRAY
4606: ARRAY
4607: PUSH
4608: LD_INT 2
4610: ARRAY
4611: PPUSH
4612: CALL_OW 86
// end ; InitApeman ;
4616: CALL 4822 0 0
// if def_builduptime then
4620: LD_EXP 51
4624: IFFALSE 4630
// BeginBuildUp ;
4626: CALL 11335 0 0
// end ; end_of_file
4630: END
// every 20 20$00 trigger apemanNumber do
4631: LD_EXP 29
4635: IFFALSE 4668
4637: GO 4639
4639: DISABLE
// begin enable ;
4640: ENABLE
// if apeLevel >= 8 then
4641: LD_EXP 34
4645: PUSH
4646: LD_INT 8
4648: GREATEREQUAL
4649: IFFALSE 4654
// disable else
4651: DISABLE
4652: GO 4668
// apeLevel := apeLevel + 1 ;
4654: LD_ADDR_EXP 34
4658: PUSH
4659: LD_EXP 34
4663: PUSH
4664: LD_INT 1
4666: PLUS
4667: ST_TO_ADDR
// end ;
4668: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
4669: LD_EXP 29
4673: PUSH
4674: LD_EXP 30
4678: LESS
4679: IFFALSE 4819
4681: GO 4683
4683: DISABLE
4684: LD_INT 0
4686: PPUSH
4687: PPUSH
4688: PPUSH
4689: PPUSH
// begin enable ;
4690: ENABLE
// for i := 1 to apemanPos do
4691: LD_ADDR_VAR 0 1
4695: PUSH
4696: DOUBLE
4697: LD_INT 1
4699: DEC
4700: ST_TO_ADDR
4701: LD_EXP 32
4705: PUSH
4706: FOR_TO
4707: IFFALSE 4817
// begin if apemanPlayerCount [ i ] then
4709: LD_EXP 33
4713: PUSH
4714: LD_VAR 0 1
4718: ARRAY
4719: IFFALSE 4815
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
4721: LD_EXP 33
4725: PUSH
4726: LD_VAR 0 1
4730: ARRAY
4731: PUSH
4732: LD_EXP 32
4736: PUSH
4737: LD_VAR 0 1
4741: ARRAY
4742: GREATER
4743: IFFALSE 4815
// begin ape := PrepareApeman ;
4745: LD_ADDR_VAR 0 2
4749: PUSH
4750: CALL 5322 0 0
4754: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
4755: LD_VAR 0 2
4759: PPUSH
4760: LD_EXP 35
4764: PUSH
4765: LD_VAR 0 1
4769: ARRAY
4770: PPUSH
4771: LD_INT 0
4773: PPUSH
4774: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
4778: LD_ADDR_EXP 32
4782: PUSH
4783: LD_EXP 32
4787: PPUSH
4788: LD_VAR 0 1
4792: PPUSH
4793: LD_EXP 32
4797: PUSH
4798: LD_VAR 0 1
4802: ARRAY
4803: PUSH
4804: LD_VAR 0 2
4808: UNION
4809: PPUSH
4810: CALL_OW 1
4814: ST_TO_ADDR
// end ; end ; end ;
4815: GO 4706
4817: POP
4818: POP
// end ;
4819: PPOPN 4
4821: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
4822: LD_INT 0
4824: PPUSH
4825: PPUSH
4826: PPUSH
4827: PPUSH
4828: PPUSH
4829: PPUSH
4830: PPUSH
// playersAmount := 0 ;
4831: LD_ADDR_VAR 0 3
4835: PUSH
4836: LD_INT 0
4838: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , ] ;
4839: LD_ADDR_VAR 0 7
4843: PUSH
4844: LD_INT 13
4846: PUSH
4847: LD_INT 14
4849: PUSH
4850: LD_INT 15
4852: PUSH
4853: LD_INT 16
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4862: LD_ADDR_EXP 35
4866: PUSH
4867: LD_INT 0
4869: PUSH
4870: LD_INT 0
4872: PUSH
4873: LD_INT 0
4875: PUSH
4876: LD_INT 0
4878: PUSH
4879: LD_INT 0
4881: PUSH
4882: LD_INT 0
4884: PUSH
4885: LD_INT 0
4887: PUSH
4888: LD_INT 0
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: ST_TO_ADDR
// for j = 1 to Side_Positions do
4901: LD_ADDR_VAR 0 4
4905: PUSH
4906: DOUBLE
4907: LD_INT 1
4909: DEC
4910: ST_TO_ADDR
4911: LD_EXP 20
4915: PUSH
4916: FOR_TO
4917: IFFALSE 4984
// if Side_Positions [ j ] then
4919: LD_EXP 20
4923: PUSH
4924: LD_VAR 0 4
4928: ARRAY
4929: IFFALSE 4982
// begin playersAmount := playersAmount + 1 ;
4931: LD_ADDR_VAR 0 3
4935: PUSH
4936: LD_VAR 0 3
4940: PUSH
4941: LD_INT 1
4943: PLUS
4944: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
4945: LD_ADDR_EXP 35
4949: PUSH
4950: LD_EXP 35
4954: PPUSH
4955: LD_VAR 0 4
4959: PPUSH
4960: LD_VAR 0 7
4964: PUSH
4965: LD_EXP 20
4969: PUSH
4970: LD_VAR 0 4
4974: ARRAY
4975: ARRAY
4976: PPUSH
4977: CALL_OW 1
4981: ST_TO_ADDR
// end ;
4982: GO 4916
4984: POP
4985: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
4986: LD_ADDR_EXP 31
4990: PUSH
4991: LD_INT 3
4993: PUSH
4994: LD_EXP 13
4998: MUL
4999: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5000: LD_ADDR_EXP 29
5004: PUSH
5005: LD_VAR 0 3
5009: PUSH
5010: LD_EXP 31
5014: MUL
5015: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5016: LD_ADDR_EXP 30
5020: PUSH
5021: LD_EXP 29
5025: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5026: LD_ADDR_EXP 32
5030: PUSH
5031: LD_INT 0
5033: PUSH
5034: LD_INT 0
5036: PUSH
5037: LD_INT 0
5039: PUSH
5040: LD_INT 0
5042: PUSH
5043: LD_INT 0
5045: PUSH
5046: LD_INT 0
5048: PUSH
5049: LD_INT 0
5051: PUSH
5052: LD_INT 0
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5065: LD_ADDR_EXP 33
5069: PUSH
5070: LD_INT 0
5072: PUSH
5073: LD_INT 0
5075: PUSH
5076: LD_INT 0
5078: PUSH
5079: LD_INT 0
5081: PUSH
5082: LD_INT 0
5084: PUSH
5085: LD_INT 0
5087: PUSH
5088: LD_INT 0
5090: PUSH
5091: LD_INT 0
5093: PUSH
5094: EMPTY
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: LIST
5101: LIST
5102: LIST
5103: ST_TO_ADDR
// apeLevel := 1 ;
5104: LD_ADDR_EXP 34
5108: PUSH
5109: LD_INT 1
5111: ST_TO_ADDR
// if not apemanNumber then
5112: LD_EXP 29
5116: NOT
5117: IFFALSE 5121
// exit ;
5119: GO 5317
// for i := 1 to apemanPerPlayer do
5121: LD_ADDR_VAR 0 2
5125: PUSH
5126: DOUBLE
5127: LD_INT 1
5129: DEC
5130: ST_TO_ADDR
5131: LD_EXP 31
5135: PUSH
5136: FOR_TO
5137: IFFALSE 5315
// begin for j := 1 to Side_Positions do
5139: LD_ADDR_VAR 0 4
5143: PUSH
5144: DOUBLE
5145: LD_INT 1
5147: DEC
5148: ST_TO_ADDR
5149: LD_EXP 20
5153: PUSH
5154: FOR_TO
5155: IFFALSE 5311
// if Side_Positions [ j ] then
5157: LD_EXP 20
5161: PUSH
5162: LD_VAR 0 4
5166: ARRAY
5167: IFFALSE 5309
// begin pos := Side_Positions [ j ] ;
5169: LD_ADDR_VAR 0 6
5173: PUSH
5174: LD_EXP 20
5178: PUSH
5179: LD_VAR 0 4
5183: ARRAY
5184: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5185: LD_ADDR_EXP 33
5189: PUSH
5190: LD_EXP 33
5194: PPUSH
5195: LD_VAR 0 4
5199: PPUSH
5200: LD_EXP 33
5204: PUSH
5205: LD_VAR 0 4
5209: ARRAY
5210: PUSH
5211: LD_INT 1
5213: PLUS
5214: PPUSH
5215: CALL_OW 1
5219: ST_TO_ADDR
// ape := PrepareApeman ;
5220: LD_ADDR_VAR 0 5
5224: PUSH
5225: CALL 5322 0 0
5229: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5230: LD_ADDR_EXP 32
5234: PUSH
5235: LD_EXP 32
5239: PPUSH
5240: LD_VAR 0 4
5244: PPUSH
5245: LD_EXP 32
5249: PUSH
5250: LD_VAR 0 4
5254: ARRAY
5255: PPUSH
5256: LD_EXP 32
5260: PUSH
5261: LD_VAR 0 4
5265: ARRAY
5266: PUSH
5267: LD_INT 1
5269: PLUS
5270: PPUSH
5271: LD_VAR 0 5
5275: PPUSH
5276: CALL_OW 1
5280: PPUSH
5281: CALL_OW 1
5285: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5286: LD_VAR 0 5
5290: PPUSH
5291: LD_EXP 35
5295: PUSH
5296: LD_VAR 0 4
5300: ARRAY
5301: PPUSH
5302: LD_INT 0
5304: PPUSH
5305: CALL_OW 49
// end ;
5309: GO 5154
5311: POP
5312: POP
// end ;
5313: GO 5136
5315: POP
5316: POP
// end ;
5317: LD_VAR 0 1
5321: RET
// export function PrepareApeman ; var bonus ; begin
5322: LD_INT 0
5324: PPUSH
5325: PPUSH
// uc_side := 0 ;
5326: LD_ADDR_OWVAR 20
5330: PUSH
5331: LD_INT 0
5333: ST_TO_ADDR
// uc_nation := 0 ;
5334: LD_ADDR_OWVAR 21
5338: PUSH
5339: LD_INT 0
5341: ST_TO_ADDR
// InitHc ;
5342: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
5346: LD_ADDR_VAR 0 2
5350: PUSH
5351: LD_INT 1
5353: NEG
5354: PUSH
5355: LD_INT 0
5357: PUSH
5358: LD_INT 1
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: LIST
5365: PUSH
5366: LD_OWVAR 1
5370: PUSH
5371: LD_INT 3
5373: MOD
5374: PUSH
5375: LD_INT 1
5377: PLUS
5378: ARRAY
5379: ST_TO_ADDR
// hc_class := class_apeman ;
5380: LD_ADDR_OWVAR 28
5384: PUSH
5385: LD_INT 12
5387: ST_TO_ADDR
// hc_gallery :=  ;
5388: LD_ADDR_OWVAR 33
5392: PUSH
5393: LD_STRING 
5395: ST_TO_ADDR
// hc_name :=  ;
5396: LD_ADDR_OWVAR 26
5400: PUSH
5401: LD_STRING 
5403: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
5404: LD_ADDR_OWVAR 31
5408: PUSH
5409: LD_EXP 34
5413: PUSH
5414: LD_VAR 0 2
5418: PLUS
5419: PUSH
5420: LD_EXP 34
5424: PUSH
5425: LD_VAR 0 2
5429: PLUS
5430: PUSH
5431: LD_EXP 34
5435: PUSH
5436: LD_VAR 0 2
5440: PLUS
5441: PUSH
5442: LD_EXP 34
5446: PUSH
5447: LD_VAR 0 2
5451: PLUS
5452: PUSH
5453: EMPTY
5454: LIST
5455: LIST
5456: LIST
5457: LIST
5458: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
5459: LD_ADDR_OWVAR 35
5463: PUSH
5464: LD_INT 10
5466: PUSH
5467: LD_VAR 0 2
5471: MUL
5472: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5473: LD_ADDR_OWVAR 29
5477: PUSH
5478: LD_INT 12
5480: PUSH
5481: LD_INT 10
5483: PUSH
5484: EMPTY
5485: LIST
5486: LIST
5487: ST_TO_ADDR
// result := CreateHuman ;
5488: LD_ADDR_VAR 0 1
5492: PUSH
5493: CALL_OW 44
5497: ST_TO_ADDR
// end ;
5498: LD_VAR 0 1
5502: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
5503: LD_INT 0
5505: PPUSH
5506: PPUSH
5507: PPUSH
// if not ape then
5508: LD_VAR 0 1
5512: NOT
5513: IFFALSE 5517
// exit ;
5515: GO 5642
// side := GetSide ( ape ) ;
5517: LD_ADDR_VAR 0 3
5521: PUSH
5522: LD_VAR 0 1
5526: PPUSH
5527: CALL_OW 255
5531: ST_TO_ADDR
// if not side then
5532: LD_VAR 0 3
5536: NOT
5537: IFFALSE 5591
// begin for i = 1 to apemanPos do
5539: LD_ADDR_VAR 0 4
5543: PUSH
5544: DOUBLE
5545: LD_INT 1
5547: DEC
5548: ST_TO_ADDR
5549: LD_EXP 32
5553: PUSH
5554: FOR_TO
5555: IFFALSE 5589
// if ape in apemanPos [ i ] then
5557: LD_VAR 0 1
5561: PUSH
5562: LD_EXP 32
5566: PUSH
5567: LD_VAR 0 4
5571: ARRAY
5572: IN
5573: IFFALSE 5587
// begin side := i ;
5575: LD_ADDR_VAR 0 3
5579: PUSH
5580: LD_VAR 0 4
5584: ST_TO_ADDR
// break ;
5585: GO 5589
// end ;
5587: GO 5554
5589: POP
5590: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
5591: LD_ADDR_EXP 32
5595: PUSH
5596: LD_EXP 32
5600: PPUSH
5601: LD_VAR 0 3
5605: PPUSH
5606: LD_EXP 32
5610: PUSH
5611: LD_VAR 0 3
5615: ARRAY
5616: PUSH
5617: LD_VAR 0 1
5621: DIFF
5622: PPUSH
5623: CALL_OW 1
5627: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
5628: LD_ADDR_EXP 29
5632: PUSH
5633: LD_EXP 29
5637: PUSH
5638: LD_INT 1
5640: MINUS
5641: ST_TO_ADDR
// end ; end_of_file
5642: LD_VAR 0 2
5646: RET
// var shipment , respawn , inqueue ; export function init_shipments_and_respawning ; begin
5647: LD_INT 0
5649: PPUSH
// shipment := Rand ( 0 , 3 ) ;
5650: LD_ADDR_LOC 9
5654: PUSH
5655: LD_INT 0
5657: PPUSH
5658: LD_INT 3
5660: PPUSH
5661: CALL_OW 12
5665: ST_TO_ADDR
// respawn := Rand ( 1 , 8 ) ;
5666: LD_ADDR_LOC 10
5670: PUSH
5671: LD_INT 1
5673: PPUSH
5674: LD_INT 8
5676: PPUSH
5677: CALL_OW 12
5681: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5682: LD_ADDR_LOC 11
5686: PUSH
5687: LD_INT 0
5689: PUSH
5690: LD_INT 0
5692: PUSH
5693: LD_INT 0
5695: PUSH
5696: LD_INT 0
5698: PUSH
5699: LD_INT 0
5701: PUSH
5702: LD_INT 0
5704: PUSH
5705: LD_INT 0
5707: PUSH
5708: LD_INT 0
5710: PUSH
5711: EMPTY
5712: LIST
5713: LIST
5714: LIST
5715: LIST
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: ST_TO_ADDR
// end ;
5721: LD_VAR 0 1
5725: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
5726: GO 5728
5728: DISABLE
5729: LD_INT 0
5731: PPUSH
5732: PPUSH
5733: PPUSH
5734: PPUSH
// begin if respawning_time_max = 0 then
5735: LD_EXP 11
5739: PUSH
5740: LD_INT 0
5742: EQUAL
5743: IFFALSE 5747
// exit ;
5745: GO 6254
// if respawn = 8 then
5747: LD_LOC 10
5751: PUSH
5752: LD_INT 8
5754: EQUAL
5755: IFFALSE 5767
// respawn := 1 else
5757: LD_ADDR_LOC 10
5761: PUSH
5762: LD_INT 1
5764: ST_TO_ADDR
5765: GO 5781
// respawn := respawn + 1 ;
5767: LD_ADDR_LOC 10
5771: PUSH
5772: LD_LOC 10
5776: PUSH
5777: LD_INT 1
5779: PLUS
5780: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
5781: LD_EXP 20
5785: PUSH
5786: LD_LOC 10
5790: ARRAY
5791: PUSH
5792: LD_LOC 11
5796: PUSH
5797: LD_LOC 10
5801: ARRAY
5802: NOT
5803: AND
5804: IFFALSE 6253
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
5806: LD_ADDR_VAR 0 1
5810: PUSH
5811: LD_INT 21
5813: PUSH
5814: LD_INT 1
5816: PUSH
5817: EMPTY
5818: LIST
5819: LIST
5820: PUSH
5821: LD_INT 22
5823: PUSH
5824: LD_LOC 10
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: PUSH
5833: LD_INT 3
5835: PUSH
5836: LD_INT 23
5838: PUSH
5839: LD_INT 0
5841: PUSH
5842: EMPTY
5843: LIST
5844: LIST
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: LIST
5850: LIST
5851: PPUSH
5852: CALL_OW 69
5856: ST_TO_ADDR
// if n < number_of_people then
5857: LD_VAR 0 1
5861: PUSH
5862: LD_EXP 4
5866: LESS
5867: IFFALSE 6250
// begin aktresp := respawn ;
5869: LD_ADDR_VAR 0 3
5873: PUSH
5874: LD_LOC 10
5878: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
5879: LD_ADDR_LOC 11
5883: PUSH
5884: LD_LOC 11
5888: PPUSH
5889: LD_VAR 0 3
5893: PPUSH
5894: LD_INT 1
5896: PPUSH
5897: CALL_OW 1
5901: ST_TO_ADDR
// enable ;
5902: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
5903: LD_EXP 10
5907: PPUSH
5908: LD_EXP 11
5912: PPUSH
5913: CALL_OW 12
5917: PPUSH
5918: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
5922: LD_ADDR_LOC 11
5926: PUSH
5927: LD_LOC 11
5931: PPUSH
5932: LD_VAR 0 3
5936: PPUSH
5937: LD_INT 0
5939: PPUSH
5940: CALL_OW 1
5944: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
5945: LD_ADDR_VAR 0 2
5949: PUSH
5950: LD_INT 21
5952: PUSH
5953: LD_INT 3
5955: PUSH
5956: EMPTY
5957: LIST
5958: LIST
5959: PUSH
5960: LD_INT 2
5962: PUSH
5963: LD_INT 30
5965: PUSH
5966: LD_INT 0
5968: PUSH
5969: EMPTY
5970: LIST
5971: LIST
5972: PUSH
5973: LD_INT 30
5975: PUSH
5976: LD_INT 1
5978: PUSH
5979: EMPTY
5980: LIST
5981: LIST
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: LIST
5987: PUSH
5988: LD_INT 50
5990: PUSH
5991: EMPTY
5992: LIST
5993: PUSH
5994: LD_INT 22
5996: PUSH
5997: LD_VAR 0 3
6001: PUSH
6002: EMPTY
6003: LIST
6004: LIST
6005: PUSH
6006: EMPTY
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: PPUSH
6012: CALL_OW 69
6016: ST_TO_ADDR
// if building_list = 0 then
6017: LD_VAR 0 2
6021: PUSH
6022: LD_INT 0
6024: EQUAL
6025: IFFALSE 6070
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
6027: LD_ADDR_VAR 0 2
6031: PUSH
6032: LD_INT 21
6034: PUSH
6035: LD_INT 3
6037: PUSH
6038: EMPTY
6039: LIST
6040: LIST
6041: PUSH
6042: LD_INT 50
6044: PUSH
6045: EMPTY
6046: LIST
6047: PUSH
6048: LD_INT 22
6050: PUSH
6051: LD_VAR 0 3
6055: PUSH
6056: EMPTY
6057: LIST
6058: LIST
6059: PUSH
6060: EMPTY
6061: LIST
6062: LIST
6063: LIST
6064: PPUSH
6065: CALL_OW 69
6069: ST_TO_ADDR
// if building_list = 0 then
6070: LD_VAR 0 2
6074: PUSH
6075: LD_INT 0
6077: EQUAL
6078: IFFALSE 6082
// exit ;
6080: GO 6254
// hc_name :=  ;
6082: LD_ADDR_OWVAR 26
6086: PUSH
6087: LD_STRING 
6089: ST_TO_ADDR
// hc_importance := 0 ;
6090: LD_ADDR_OWVAR 32
6094: PUSH
6095: LD_INT 0
6097: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6098: LD_INT 0
6100: PPUSH
6101: LD_INT 0
6103: PPUSH
6104: LD_EXP 5
6108: PUSH
6109: LD_INT 2
6111: DIV
6112: PPUSH
6113: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
6117: LD_ADDR_OWVAR 21
6121: PUSH
6122: LD_EXP 21
6126: PUSH
6127: LD_VAR 0 3
6131: ARRAY
6132: ST_TO_ADDR
// uc_side := aktresp ;
6133: LD_ADDR_OWVAR 20
6137: PUSH
6138: LD_VAR 0 3
6142: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
6143: LD_ADDR_VAR 0 4
6147: PUSH
6148: LD_VAR 0 2
6152: PUSH
6153: LD_INT 1
6155: PPUSH
6156: LD_VAR 0 2
6160: PUSH
6161: LD_INT 0
6163: PLUS
6164: PPUSH
6165: CALL_OW 12
6169: ARRAY
6170: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
6171: LD_VAR 0 4
6175: PPUSH
6176: CALL_OW 266
6180: PUSH
6181: LD_INT 0
6183: PUSH
6184: LD_INT 1
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: IN
6191: IFFALSE 6203
// n = 25 else
6193: LD_ADDR_VAR 0 1
6197: PUSH
6198: LD_INT 25
6200: ST_TO_ADDR
6201: GO 6211
// n = 10 ;
6203: LD_ADDR_VAR 0 1
6207: PUSH
6208: LD_INT 10
6210: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
6211: CALL_OW 44
6215: PPUSH
6216: LD_VAR 0 4
6220: PPUSH
6221: CALL_OW 250
6225: PPUSH
6226: LD_VAR 0 4
6230: PPUSH
6231: CALL_OW 251
6235: PPUSH
6236: LD_VAR 0 1
6240: PPUSH
6241: LD_INT 1
6243: PPUSH
6244: CALL_OW 50
// end else
6248: GO 6251
// enable ;
6250: ENABLE
// end else
6251: GO 6254
// enable ;
6253: ENABLE
// end ;
6254: PPOPN 4
6256: END
// every 0 0$5 + 0 0$1.1 do var d ;
6257: GO 6259
6259: DISABLE
6260: LD_INT 0
6262: PPUSH
// begin case tick of 1 .. 1 1$0 :
6263: LD_OWVAR 1
6267: PUSH
6268: LD_INT 1
6270: DOUBLE
6271: GREATEREQUAL
6272: IFFALSE 6280
6274: LD_INT 2100
6276: DOUBLE
6277: LESSEQUAL
6278: IFTRUE 6282
6280: GO 6293
6282: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
6283: LD_ADDR_VAR 0 1
6287: PUSH
6288: LD_INT 150
6290: ST_TO_ADDR
6291: GO 6476
6293: LD_INT 2100
6295: PUSH
6296: LD_INT 1
6298: PLUS
6299: DOUBLE
6300: GREATEREQUAL
6301: IFFALSE 6309
6303: LD_INT 10500
6305: DOUBLE
6306: LESSEQUAL
6307: IFTRUE 6311
6309: GO 6322
6311: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
6312: LD_ADDR_VAR 0 1
6316: PUSH
6317: LD_INT 100
6319: ST_TO_ADDR
6320: GO 6476
6322: LD_INT 10500
6324: PUSH
6325: LD_INT 1
6327: PLUS
6328: DOUBLE
6329: GREATEREQUAL
6330: IFFALSE 6338
6332: LD_INT 21000
6334: DOUBLE
6335: LESSEQUAL
6336: IFTRUE 6340
6338: GO 6351
6340: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
6341: LD_ADDR_VAR 0 1
6345: PUSH
6346: LD_INT 90
6348: ST_TO_ADDR
6349: GO 6476
6351: LD_INT 21000
6353: PUSH
6354: LD_INT 1
6356: PLUS
6357: DOUBLE
6358: GREATEREQUAL
6359: IFFALSE 6367
6361: LD_INT 42000
6363: DOUBLE
6364: LESSEQUAL
6365: IFTRUE 6369
6367: GO 6380
6369: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
6370: LD_ADDR_VAR 0 1
6374: PUSH
6375: LD_INT 70
6377: ST_TO_ADDR
6378: GO 6476
6380: LD_INT 42000
6382: PUSH
6383: LD_INT 1
6385: PLUS
6386: DOUBLE
6387: GREATEREQUAL
6388: IFFALSE 6396
6390: LD_INT 63000
6392: DOUBLE
6393: LESSEQUAL
6394: IFTRUE 6398
6396: GO 6409
6398: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
6399: LD_ADDR_VAR 0 1
6403: PUSH
6404: LD_INT 60
6406: ST_TO_ADDR
6407: GO 6476
6409: LD_INT 63000
6411: PUSH
6412: LD_INT 1
6414: PLUS
6415: DOUBLE
6416: GREATEREQUAL
6417: IFFALSE 6425
6419: LD_INT 105000
6421: DOUBLE
6422: LESSEQUAL
6423: IFTRUE 6427
6425: GO 6438
6427: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
6428: LD_ADDR_VAR 0 1
6432: PUSH
6433: LD_INT 35
6435: ST_TO_ADDR
6436: GO 6476
6438: LD_INT 105000
6440: PUSH
6441: LD_INT 1
6443: PLUS
6444: DOUBLE
6445: GREATEREQUAL
6446: IFFALSE 6454
6448: LD_INT 630000
6450: DOUBLE
6451: LESSEQUAL
6452: IFTRUE 6456
6454: GO 6467
6456: POP
// d := 20 ; else
6457: LD_ADDR_VAR 0 1
6461: PUSH
6462: LD_INT 20
6464: ST_TO_ADDR
6465: GO 6476
6467: POP
// d := 0 ; end ;
6468: LD_ADDR_VAR 0 1
6472: PUSH
6473: LD_INT 0
6475: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
6476: LD_INT 1
6478: PPUSH
6479: LD_INT 10000
6481: PPUSH
6482: CALL_OW 12
6486: PUSH
6487: LD_VAR 0 1
6491: PUSH
6492: LD_EXP 8
6496: MUL
6497: LESSEQUAL
6498: IFFALSE 6552
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
6500: LD_INT 1
6502: PPUSH
6503: LD_INT 140
6505: PPUSH
6506: CALL_OW 12
6510: PPUSH
6511: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
6515: LD_ADDR_LOC 9
6519: PUSH
6520: LD_LOC 9
6524: PUSH
6525: LD_INT 1
6527: PLUS
6528: PUSH
6529: LD_INT 4
6531: MOD
6532: ST_TO_ADDR
// CreateCratesArea ( 5 , q1 + shipment , true ) ;
6533: LD_INT 5
6535: PPUSH
6536: LD_INT 4
6538: PUSH
6539: LD_LOC 9
6543: PLUS
6544: PPUSH
6545: LD_INT 1
6547: PPUSH
6548: CALL_OW 55
// end ; enable ;
6552: ENABLE
// end ; end_of_file
6553: PPOPN 1
6555: END
// var activated ; var hadziove ; every 0 0$1 do
6556: GO 6558
6558: DISABLE
// begin wait ( Rand ( 3 3$0 , 10 10$0 ) ) ;
6559: LD_INT 6300
6561: PPUSH
6562: LD_INT 21000
6564: PPUSH
6565: CALL_OW 12
6569: PPUSH
6570: CALL_OW 67
// SetAreaMapShow ( Tree , 1 ) ;
6574: LD_INT 3
6576: PPUSH
6577: LD_INT 1
6579: PPUSH
6580: CALL_OW 424
// activated := true ;
6584: LD_ADDR_LOC 12
6588: PUSH
6589: LD_INT 1
6591: ST_TO_ADDR
// end ;
6592: END
// every 0 0$1 trigger activated do var i , un ;
6593: LD_LOC 12
6597: IFFALSE 6842
6599: GO 6601
6601: DISABLE
6602: LD_INT 0
6604: PPUSH
6605: PPUSH
// begin if not def_tree_function then
6606: LD_EXP 1
6610: NOT
6611: IFFALSE 6615
// exit ;
6613: GO 6842
// ExtraStrings := [ #MultiSmall-Tree & def_tree_function ] ;
6615: LD_ADDR_EXP 53
6619: PUSH
6620: LD_STRING #MultiSmall-Tree
6622: PUSH
6623: LD_EXP 1
6627: STR
6628: PUSH
6629: EMPTY
6630: LIST
6631: ST_TO_ADDR
// for un in FilterUnitsInArea ( Tree , [ f_type , unit_human ] ) diff hadziove do
6632: LD_ADDR_VAR 0 2
6636: PUSH
6637: LD_INT 3
6639: PPUSH
6640: LD_INT 21
6642: PUSH
6643: LD_INT 1
6645: PUSH
6646: EMPTY
6647: LIST
6648: LIST
6649: PPUSH
6650: CALL_OW 70
6654: PUSH
6655: LD_LOC 13
6659: DIFF
6660: PUSH
6661: FOR_IN
6662: IFFALSE 6823
// begin if GetClass ( un ) in [ class_soldier , class_engineer , class_mechanic , class_scientistic , class_sniper , class_bazooker , class_mortar ] then
6664: LD_VAR 0 2
6668: PPUSH
6669: CALL_OW 257
6673: PUSH
6674: LD_INT 1
6676: PUSH
6677: LD_INT 2
6679: PUSH
6680: LD_INT 3
6682: PUSH
6683: LD_INT 4
6685: PUSH
6686: LD_INT 5
6688: PUSH
6689: LD_INT 9
6691: PUSH
6692: LD_INT 8
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: IN
6704: IFFALSE 6753
// for i := 1 to 4 do
6706: LD_ADDR_VAR 0 1
6710: PUSH
6711: DOUBLE
6712: LD_INT 1
6714: DEC
6715: ST_TO_ADDR
6716: LD_INT 4
6718: PUSH
6719: FOR_TO
6720: IFFALSE 6749
// GiveSkillBonus ( un , i , tree_function [ i ] ) else
6722: LD_VAR 0 2
6726: PPUSH
6727: LD_VAR 0 1
6731: PPUSH
6732: LD_EXP 14
6736: PUSH
6737: LD_VAR 0 1
6741: ARRAY
6742: PPUSH
6743: CALL_OW 238
6747: GO 6719
6749: POP
6750: POP
6751: GO 6821
// if un in [ class_apeman , class_apeman_engineer , class_apeman_kamikaze , class_apeman_soldier ] then
6753: LD_VAR 0 2
6757: PUSH
6758: LD_INT 12
6760: PUSH
6761: LD_INT 16
6763: PUSH
6764: LD_INT 17
6766: PUSH
6767: LD_INT 15
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: IN
6776: IFFALSE 6821
// for i := 1 to 4 do
6778: LD_ADDR_VAR 0 1
6782: PUSH
6783: DOUBLE
6784: LD_INT 1
6786: DEC
6787: ST_TO_ADDR
6788: LD_INT 4
6790: PUSH
6791: FOR_TO
6792: IFFALSE 6819
// GiveSkillBonus ( un , i , tree_function [ 5 ] ) ;
6794: LD_VAR 0 2
6798: PPUSH
6799: LD_VAR 0 1
6803: PPUSH
6804: LD_EXP 14
6808: PUSH
6809: LD_INT 5
6811: ARRAY
6812: PPUSH
6813: CALL_OW 238
6817: GO 6791
6819: POP
6820: POP
// end ;
6821: GO 6661
6823: POP
6824: POP
// hadziove := hadziove ^ un ;
6825: LD_ADDR_LOC 13
6829: PUSH
6830: LD_LOC 13
6834: PUSH
6835: LD_VAR 0 2
6839: ADD
6840: ST_TO_ADDR
// enable ;
6841: ENABLE
// end ; end_of_file
6842: PPOPN 2
6844: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6845: LD_VAR 0 1
6849: PPUSH
6850: CALL_OW 266
6854: PUSH
6855: LD_INT 0
6857: PUSH
6858: LD_INT 1
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: IN
6865: IFFALSE 6890
// SetBName ( b , @ & GetSide ( b ) ) ;
6867: LD_VAR 0 1
6871: PPUSH
6872: LD_STRING @
6874: PUSH
6875: LD_VAR 0 1
6879: PPUSH
6880: CALL_OW 255
6884: STR
6885: PPUSH
6886: CALL_OW 500
// if def_game_rules then
6890: LD_EXP 37
6894: IFFALSE 6931
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
6896: LD_VAR 0 1
6900: PPUSH
6901: LD_VAR 0 1
6905: PPUSH
6906: CALL_OW 266
6910: PPUSH
6911: LD_VAR 0 1
6915: PPUSH
6916: CALL_OW 255
6920: PPUSH
6921: LD_INT 0
6923: PPUSH
6924: LD_INT 1
6926: PPUSH
6927: CALL 10351 0 5
// end ;
6931: PPOPN 2
6933: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6934: LD_VAR 0 1
6938: PPUSH
6939: CALL_OW 266
6943: PUSH
6944: LD_INT 0
6946: PUSH
6947: LD_INT 1
6949: PUSH
6950: EMPTY
6951: LIST
6952: LIST
6953: IN
6954: IFFALSE 6979
// SetBName ( b , @ & GetSide ( b ) ) ;
6956: LD_VAR 0 1
6960: PPUSH
6961: LD_STRING @
6963: PUSH
6964: LD_VAR 0 1
6968: PPUSH
6969: CALL_OW 255
6973: STR
6974: PPUSH
6975: CALL_OW 500
// if def_game_rules then
6979: LD_EXP 37
6983: IFFALSE 7022
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
6985: LD_VAR 0 1
6989: PPUSH
6990: LD_VAR 0 1
6994: PPUSH
6995: CALL_OW 266
6999: PPUSH
7000: LD_VAR 0 1
7004: PPUSH
7005: CALL_OW 255
7009: PPUSH
7010: LD_VAR 0 2
7014: PPUSH
7015: LD_INT 1
7017: PPUSH
7018: CALL 10351 0 5
// end ;
7022: PPOPN 3
7024: END
// on VehicleConstructed ( veh , fac ) do var side ;
7025: LD_INT 0
7027: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7028: LD_VAR 0 1
7032: PPUSH
7033: CALL_OW 263
7037: PUSH
7038: LD_INT 5
7040: EQUAL
7041: IFFALSE 7183
// begin side := GetSide ( veh ) ;
7043: LD_ADDR_VAR 0 3
7047: PUSH
7048: LD_VAR 0 1
7052: PPUSH
7053: CALL_OW 255
7057: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7058: LD_ADDR_EXP 32
7062: PUSH
7063: LD_EXP 32
7067: PPUSH
7068: LD_VAR 0 3
7072: PPUSH
7073: LD_EXP 32
7077: PUSH
7078: LD_VAR 0 3
7082: ARRAY
7083: PPUSH
7084: LD_INT 52
7086: PUSH
7087: EMPTY
7088: LIST
7089: PPUSH
7090: CALL_OW 72
7094: PUSH
7095: LD_INT 22
7097: PUSH
7098: LD_VAR 0 3
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: PUSH
7107: LD_INT 2
7109: PUSH
7110: LD_INT 33
7112: PUSH
7113: LD_INT 5
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: PUSH
7120: LD_INT 25
7122: PUSH
7123: LD_INT 12
7125: PUSH
7126: EMPTY
7127: LIST
7128: LIST
7129: PUSH
7130: LD_INT 25
7132: PUSH
7133: LD_INT 15
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PUSH
7140: LD_INT 25
7142: PUSH
7143: LD_INT 16
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: PUSH
7150: LD_INT 25
7152: PUSH
7153: LD_INT 17
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: PPUSH
7172: CALL_OW 69
7176: UNION
7177: PPUSH
7178: CALL_OW 1
7182: ST_TO_ADDR
// end ; end ;
7183: PPOPN 3
7185: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7186: LD_INT 0
7188: PPUSH
7189: PPUSH
7190: PPUSH
7191: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7192: LD_VAR 0 1
7196: PPUSH
7197: CALL_OW 257
7201: PUSH
7202: LD_INT 12
7204: PUSH
7205: LD_INT 15
7207: PUSH
7208: LD_INT 17
7210: PUSH
7211: LD_INT 16
7213: PUSH
7214: EMPTY
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: IN
7220: PUSH
7221: LD_VAR 0 1
7225: PPUSH
7226: CALL_OW 263
7230: PUSH
7231: LD_INT 5
7233: EQUAL
7234: OR
7235: IFFALSE 7246
// ApeKilled ( j ) ;
7237: LD_VAR 0 1
7241: PPUSH
7242: CALL 5503 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7246: LD_VAR 0 1
7250: PPUSH
7251: CALL_OW 266
7255: PUSH
7256: LD_INT 0
7258: PUSH
7259: LD_INT 1
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: IN
7266: IFFALSE 7348
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7268: LD_ADDR_VAR 0 4
7272: PUSH
7273: LD_EXP 20
7277: PUSH
7278: LD_VAR 0 1
7282: PPUSH
7283: CALL_OW 255
7287: ARRAY
7288: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7289: LD_ADDR_VAR 0 2
7293: PUSH
7294: LD_EXP 26
7298: PUSH
7299: LD_VAR 0 4
7303: ARRAY
7304: PUSH
7305: LD_INT 1
7307: ARRAY
7308: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7309: LD_ADDR_VAR 0 3
7313: PUSH
7314: LD_EXP 26
7318: PUSH
7319: LD_VAR 0 4
7323: ARRAY
7324: PUSH
7325: LD_INT 2
7327: ARRAY
7328: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7329: LD_VAR 0 2
7333: PPUSH
7334: LD_VAR 0 3
7338: PPUSH
7339: CALL_OW 420
7343: PPUSH
7344: CALL_OW 419
// end ; if def_game_rules then
7348: LD_EXP 37
7352: IFFALSE 7451
// if ( GetType ( j ) = 3 ) then
7354: LD_VAR 0 1
7358: PPUSH
7359: CALL_OW 247
7363: PUSH
7364: LD_INT 3
7366: EQUAL
7367: IFFALSE 7407
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7369: LD_VAR 0 1
7373: PPUSH
7374: LD_VAR 0 1
7378: PPUSH
7379: CALL_OW 266
7383: PPUSH
7384: LD_VAR 0 1
7388: PPUSH
7389: CALL_OW 255
7393: PPUSH
7394: LD_INT 0
7396: PPUSH
7397: LD_INT 1
7399: NEG
7400: PPUSH
7401: CALL 10351 0 5
7405: GO 7451
// if ( GetChassis ( j ) = 25 ) then
7407: LD_VAR 0 1
7411: PPUSH
7412: CALL_OW 265
7416: PUSH
7417: LD_INT 25
7419: EQUAL
7420: IFFALSE 7451
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7422: LD_VAR 0 1
7426: PPUSH
7427: LD_INT 37
7429: PPUSH
7430: LD_VAR 0 1
7434: PPUSH
7435: CALL_OW 255
7439: PPUSH
7440: LD_INT 0
7442: PPUSH
7443: LD_INT 1
7445: NEG
7446: PPUSH
7447: CALL 10351 0 5
// end ;
7451: PPOPN 5
7453: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7454: LD_EXP 37
7458: PUSH
7459: LD_VAR 0 1
7463: PPUSH
7464: CALL_OW 265
7468: PUSH
7469: LD_INT 25
7471: EQUAL
7472: AND
7473: IFFALSE 7505
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
7475: LD_VAR 0 1
7479: PPUSH
7480: LD_INT 37
7482: PPUSH
7483: LD_VAR 0 1
7487: PPUSH
7488: CALL_OW 255
7492: PPUSH
7493: LD_VAR 0 3
7497: PPUSH
7498: LD_INT 1
7500: PPUSH
7501: CALL 10351 0 5
// end ;
7505: PPOPN 4
7507: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7508: LD_VAR 0 1
7512: PPUSH
7513: LD_VAR 0 2
7517: PPUSH
7518: LD_VAR 0 3
7522: PPUSH
7523: LD_OWVAR 2
7527: PPUSH
7528: CALL 11096 0 4
7532: PPOPN 3
7534: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7535: LD_INT 0
7537: PPUSH
7538: PPUSH
// for un in battle_flags_id do
7539: LD_ADDR_VAR 0 2
7543: PUSH
7544: LD_EXP 27
7548: PUSH
7549: FOR_IN
7550: IFFALSE 7625
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7552: LD_VAR 0 2
7556: PPUSH
7557: LD_INT 1
7559: PUSH
7560: LD_LOC 14
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: PUSH
7569: LD_INT 2
7571: PUSH
7572: LD_LOC 14
7576: PUSH
7577: LD_INT 2
7579: DIV
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: PUSH
7585: LD_INT 3
7587: PUSH
7588: LD_LOC 14
7592: PUSH
7593: LD_INT 5
7595: DIV
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: PUSH
7601: LD_INT 20
7603: PUSH
7604: LD_LOC 14
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: PUSH
7613: EMPTY
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: PPUSH
7619: CALL_OW 423
7623: GO 7549
7625: POP
7626: POP
// end ;
7627: LD_VAR 0 1
7631: RET
// every 0 0$0.1 do var un ;
7632: GO 7634
7634: DISABLE
7635: LD_INT 0
7637: PPUSH
// begin if not def_morale_flags then
7638: LD_EXP 46
7642: NOT
7643: IFFALSE 7647
// exit ;
7645: GO 7724
// if not morale_decreasing_time then
7647: LD_EXP 9
7651: NOT
7652: IFFALSE 7656
// exit ;
7654: GO 7724
// strength = 100 ;
7656: LD_ADDR_LOC 14
7660: PUSH
7661: LD_INT 100
7663: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7664: LD_EXP 9
7668: PPUSH
7669: CALL_OW 67
// strength := strength - 1 ;
7673: LD_ADDR_LOC 14
7677: PUSH
7678: LD_LOC 14
7682: PUSH
7683: LD_INT 1
7685: MINUS
7686: ST_TO_ADDR
// Update_Flags ;
7687: CALL 7535 0 0
// until not strength ;
7691: LD_LOC 14
7695: NOT
7696: IFFALSE 7664
// for un in battle_flags_id do
7698: LD_ADDR_VAR 0 1
7702: PUSH
7703: LD_EXP 27
7707: PUSH
7708: FOR_IN
7709: IFFALSE 7722
// KillBattleFlag ( un ) ;
7711: LD_VAR 0 1
7715: PPUSH
7716: CALL_OW 419
7720: GO 7708
7722: POP
7723: POP
// end ; end_of_file
7724: PPOPN 1
7726: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
7727: LD_INT 0
7729: PPUSH
7730: PPUSH
// if ( not IAmSpec ) then
7731: CALL_OW 531
7735: NOT
7736: IFFALSE 7752
// Result := Limits_Info ^  ;
7738: LD_ADDR_VAR 0 1
7742: PUSH
7743: LD_LOC 26
7747: PUSH
7748: LD_STRING 
7750: ADD
7751: ST_TO_ADDR
// for i := 1 to 8 do
7752: LD_ADDR_VAR 0 2
7756: PUSH
7757: DOUBLE
7758: LD_INT 1
7760: DEC
7761: ST_TO_ADDR
7762: LD_INT 8
7764: PUSH
7765: FOR_TO
7766: IFFALSE 7811
// if Cheaters [ i ] then
7768: LD_LOC 27
7772: PUSH
7773: LD_VAR 0 2
7777: ARRAY
7778: IFFALSE 7809
// Result := Result ^ [ #Cheater , i , i ] ;
7780: LD_ADDR_VAR 0 1
7784: PUSH
7785: LD_VAR 0 1
7789: PUSH
7790: LD_STRING #Cheater
7792: PUSH
7793: LD_VAR 0 2
7797: PUSH
7798: LD_VAR 0 2
7802: PUSH
7803: EMPTY
7804: LIST
7805: LIST
7806: LIST
7807: ADD
7808: ST_TO_ADDR
7809: GO 7765
7811: POP
7812: POP
// end ;
7813: LD_VAR 0 1
7817: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
7818: LD_INT 0
7820: PPUSH
7821: PPUSH
7822: PPUSH
7823: PPUSH
7824: PPUSH
// case Game_Type of 10 :
7825: LD_EXP 36
7829: PUSH
7830: LD_INT 10
7832: DOUBLE
7833: EQUAL
7834: IFTRUE 7838
7836: GO 7849
7838: POP
// def_game_rules := 1 ; 11 :
7839: LD_ADDR_EXP 37
7843: PUSH
7844: LD_INT 1
7846: ST_TO_ADDR
7847: GO 7869
7849: LD_INT 11
7851: DOUBLE
7852: EQUAL
7853: IFTRUE 7857
7855: GO 7868
7857: POP
// def_game_rules := 3 ; end ;
7858: LD_ADDR_EXP 37
7862: PUSH
7863: LD_INT 3
7865: ST_TO_ADDR
7866: GO 7869
7868: POP
// case def_game_rules of 0 :
7869: LD_EXP 37
7873: PUSH
7874: LD_INT 0
7876: DOUBLE
7877: EQUAL
7878: IFTRUE 7882
7880: GO 7887
7882: POP
// exit ; 1 :
7883: GO 9945
7885: GO 9845
7887: LD_INT 1
7889: DOUBLE
7890: EQUAL
7891: IFTRUE 7895
7893: GO 8111
7895: POP
// begin def_base_level := 2 ;
7896: LD_ADDR_EXP 38
7900: PUSH
7901: LD_INT 2
7903: ST_TO_ADDR
// def_amount_of_people := 2 ;
7904: LD_ADDR_EXP 39
7908: PUSH
7909: LD_INT 2
7911: ST_TO_ADDR
// def_skill_level := 1 ;
7912: LD_ADDR_EXP 40
7916: PUSH
7917: LD_INT 1
7919: ST_TO_ADDR
// def_starting_resources := 2 ;
7920: LD_ADDR_EXP 41
7924: PUSH
7925: LD_INT 2
7927: ST_TO_ADDR
// def_shipments_density := 1 ;
7928: LD_ADDR_EXP 42
7932: PUSH
7933: LD_INT 1
7935: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
7936: LD_ADDR_EXP 43
7940: PUSH
7941: LD_INT 0
7943: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
7944: LD_ADDR_EXP 44
7948: PUSH
7949: LD_INT 1
7951: ST_TO_ADDR
// def_shared_vision := 1 ;
7952: LD_ADDR_EXP 45
7956: PUSH
7957: LD_INT 1
7959: ST_TO_ADDR
// def_morale_flags := 3 ;
7960: LD_ADDR_EXP 46
7964: PUSH
7965: LD_INT 3
7967: ST_TO_ADDR
// def_siberite_detection := 1 ;
7968: LD_ADDR_EXP 47
7972: PUSH
7973: LD_INT 1
7975: ST_TO_ADDR
// def_people_respawning := 1 ;
7976: LD_ADDR_EXP 48
7980: PUSH
7981: LD_INT 1
7983: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
7984: LD_ADDR_EXP 49
7988: PUSH
7989: LD_INT 1
7991: ST_TO_ADDR
// def_siberite_bomb := 0 ;
7992: LD_ADDR_EXP 50
7996: PUSH
7997: LD_INT 0
7999: ST_TO_ADDR
// def_builduptime := 2 ;
8000: LD_ADDR_EXP 51
8004: PUSH
8005: LD_INT 2
8007: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
8008: LD_ADDR_VAR 0 2
8012: PUSH
8013: EMPTY
8014: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8015: LD_ADDR_VAR 0 3
8019: PUSH
8020: EMPTY
8021: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8022: LD_ADDR_LOC 21
8026: PUSH
8027: EMPTY
8028: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8029: LD_ADDR_LOC 22
8033: PUSH
8034: EMPTY
8035: ST_TO_ADDR
// Banned_Controls := [ ] ;
8036: LD_ADDR_LOC 23
8040: PUSH
8041: EMPTY
8042: ST_TO_ADDR
// Banned_Engines := [ ] ;
8043: LD_ADDR_LOC 24
8047: PUSH
8048: EMPTY
8049: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
8050: LD_ADDR_LOC 19
8054: PUSH
8055: LD_INT 37
8057: PUSH
8058: EMPTY
8059: LIST
8060: PUSH
8061: LD_INT 4
8063: PUSH
8064: LD_INT 5
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: PUSH
8071: LD_INT 31
8073: PUSH
8074: LD_INT 32
8076: PUSH
8077: LD_INT 33
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: LIST
8084: PUSH
8085: EMPTY
8086: LIST
8087: LIST
8088: LIST
8089: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
8090: LD_ADDR_LOC 20
8094: PUSH
8095: LD_INT 2
8097: PUSH
8098: LD_INT 2
8100: PUSH
8101: LD_INT 4
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: LIST
8108: ST_TO_ADDR
// end ; 2 :
8109: GO 9845
8111: LD_INT 2
8113: DOUBLE
8114: EQUAL
8115: IFTRUE 8119
8117: GO 8328
8119: POP
// begin def_base_level := 1 ;
8120: LD_ADDR_EXP 38
8124: PUSH
8125: LD_INT 1
8127: ST_TO_ADDR
// def_amount_of_people := 2 ;
8128: LD_ADDR_EXP 39
8132: PUSH
8133: LD_INT 2
8135: ST_TO_ADDR
// def_skill_level := 3 ;
8136: LD_ADDR_EXP 40
8140: PUSH
8141: LD_INT 3
8143: ST_TO_ADDR
// def_starting_resources := 3 ;
8144: LD_ADDR_EXP 41
8148: PUSH
8149: LD_INT 3
8151: ST_TO_ADDR
// def_shipments_density := 2 ;
8152: LD_ADDR_EXP 42
8156: PUSH
8157: LD_INT 2
8159: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8160: LD_ADDR_EXP 43
8164: PUSH
8165: LD_INT 1
8167: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8168: LD_ADDR_EXP 44
8172: PUSH
8173: LD_INT 2
8175: ST_TO_ADDR
// def_shared_vision := 1 ;
8176: LD_ADDR_EXP 45
8180: PUSH
8181: LD_INT 1
8183: ST_TO_ADDR
// def_morale_flags := 0 ;
8184: LD_ADDR_EXP 46
8188: PUSH
8189: LD_INT 0
8191: ST_TO_ADDR
// def_siberite_detection := 1 ;
8192: LD_ADDR_EXP 47
8196: PUSH
8197: LD_INT 1
8199: ST_TO_ADDR
// def_people_respawning := 0 ;
8200: LD_ADDR_EXP 48
8204: PUSH
8205: LD_INT 0
8207: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
8208: LD_ADDR_EXP 49
8212: PUSH
8213: LD_INT 0
8215: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8216: LD_ADDR_EXP 50
8220: PUSH
8221: LD_INT 0
8223: ST_TO_ADDR
// def_builduptime := 2 ;
8224: LD_ADDR_EXP 51
8228: PUSH
8229: LD_INT 2
8231: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
8232: LD_ADDR_VAR 0 2
8236: PUSH
8237: LD_INT 1
8239: PUSH
8240: EMPTY
8241: LIST
8242: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8243: LD_ADDR_VAR 0 3
8247: PUSH
8248: EMPTY
8249: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8250: LD_ADDR_LOC 21
8254: PUSH
8255: EMPTY
8256: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8257: LD_ADDR_LOC 22
8261: PUSH
8262: EMPTY
8263: ST_TO_ADDR
// Banned_Controls := [ ] ;
8264: LD_ADDR_LOC 23
8268: PUSH
8269: EMPTY
8270: ST_TO_ADDR
// Banned_Engines := [ ] ;
8271: LD_ADDR_LOC 24
8275: PUSH
8276: EMPTY
8277: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
8278: LD_ADDR_LOC 19
8282: PUSH
8283: LD_INT 4
8285: PUSH
8286: LD_INT 5
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: PUSH
8293: LD_INT 31
8295: PUSH
8296: LD_INT 32
8298: PUSH
8299: LD_INT 33
8301: PUSH
8302: EMPTY
8303: LIST
8304: LIST
8305: LIST
8306: PUSH
8307: EMPTY
8308: LIST
8309: LIST
8310: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
8311: LD_ADDR_LOC 20
8315: PUSH
8316: LD_INT 1
8318: PUSH
8319: LD_INT 2
8321: PUSH
8322: EMPTY
8323: LIST
8324: LIST
8325: ST_TO_ADDR
// end ; 3 :
8326: GO 9845
8328: LD_INT 3
8330: DOUBLE
8331: EQUAL
8332: IFTRUE 8336
8334: GO 8579
8336: POP
// begin def_base_level := 1 ;
8337: LD_ADDR_EXP 38
8341: PUSH
8342: LD_INT 1
8344: ST_TO_ADDR
// def_amount_of_people := 2 ;
8345: LD_ADDR_EXP 39
8349: PUSH
8350: LD_INT 2
8352: ST_TO_ADDR
// def_skill_level := 3 ;
8353: LD_ADDR_EXP 40
8357: PUSH
8358: LD_INT 3
8360: ST_TO_ADDR
// def_starting_resources := 3 ;
8361: LD_ADDR_EXP 41
8365: PUSH
8366: LD_INT 3
8368: ST_TO_ADDR
// def_shipments_density := 1 ;
8369: LD_ADDR_EXP 42
8373: PUSH
8374: LD_INT 1
8376: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8377: LD_ADDR_EXP 43
8381: PUSH
8382: LD_INT 0
8384: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
8385: LD_ADDR_EXP 44
8389: PUSH
8390: LD_INT 1
8392: ST_TO_ADDR
// def_shared_vision := 1 ;
8393: LD_ADDR_EXP 45
8397: PUSH
8398: LD_INT 1
8400: ST_TO_ADDR
// def_morale_flags := 0 ;
8401: LD_ADDR_EXP 46
8405: PUSH
8406: LD_INT 0
8408: ST_TO_ADDR
// def_siberite_detection := 1 ;
8409: LD_ADDR_EXP 47
8413: PUSH
8414: LD_INT 1
8416: ST_TO_ADDR
// def_people_respawning := 0 ;
8417: LD_ADDR_EXP 48
8421: PUSH
8422: LD_INT 0
8424: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
8425: LD_ADDR_EXP 49
8429: PUSH
8430: LD_INT 2
8432: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8433: LD_ADDR_EXP 50
8437: PUSH
8438: LD_INT 0
8440: ST_TO_ADDR
// def_builduptime := 1 ;
8441: LD_ADDR_EXP 51
8445: PUSH
8446: LD_INT 1
8448: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
8449: LD_ADDR_VAR 0 2
8453: PUSH
8454: LD_INT 23
8456: PUSH
8457: EMPTY
8458: LIST
8459: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
8460: LD_ADDR_VAR 0 3
8464: PUSH
8465: LD_INT 2
8467: PUSH
8468: LD_INT 37
8470: PUSH
8471: LD_INT 32
8473: PUSH
8474: LD_INT 33
8476: PUSH
8477: LD_INT 36
8479: PUSH
8480: LD_INT 16
8482: PUSH
8483: LD_INT 23
8485: PUSH
8486: LD_INT 21
8488: PUSH
8489: LD_INT 18
8491: PUSH
8492: LD_INT 22
8494: PUSH
8495: LD_INT 20
8497: PUSH
8498: LD_INT 19
8500: PUSH
8501: LD_INT 25
8503: PUSH
8504: LD_INT 17
8506: PUSH
8507: LD_INT 24
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8527: LD_ADDR_LOC 21
8531: PUSH
8532: EMPTY
8533: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8534: LD_ADDR_LOC 22
8538: PUSH
8539: EMPTY
8540: ST_TO_ADDR
// Banned_Controls := [ ] ;
8541: LD_ADDR_LOC 23
8545: PUSH
8546: EMPTY
8547: ST_TO_ADDR
// Banned_Engines := [ ] ;
8548: LD_ADDR_LOC 24
8552: PUSH
8553: EMPTY
8554: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8555: LD_ADDR_LOC 19
8559: PUSH
8560: EMPTY
8561: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8562: LD_ADDR_LOC 20
8566: PUSH
8567: EMPTY
8568: ST_TO_ADDR
// No_Mechs := true ;
8569: LD_ADDR_EXP 52
8573: PUSH
8574: LD_INT 1
8576: ST_TO_ADDR
// end ; 4 :
8577: GO 9845
8579: LD_INT 4
8581: DOUBLE
8582: EQUAL
8583: IFTRUE 8587
8585: GO 8762
8587: POP
// begin def_base_level := 1 ;
8588: LD_ADDR_EXP 38
8592: PUSH
8593: LD_INT 1
8595: ST_TO_ADDR
// def_amount_of_people := 2 ;
8596: LD_ADDR_EXP 39
8600: PUSH
8601: LD_INT 2
8603: ST_TO_ADDR
// def_skill_level := 3 ;
8604: LD_ADDR_EXP 40
8608: PUSH
8609: LD_INT 3
8611: ST_TO_ADDR
// def_starting_resources := 3 ;
8612: LD_ADDR_EXP 41
8616: PUSH
8617: LD_INT 3
8619: ST_TO_ADDR
// def_shipments_density := 2 ;
8620: LD_ADDR_EXP 42
8624: PUSH
8625: LD_INT 2
8627: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8628: LD_ADDR_EXP 43
8632: PUSH
8633: LD_INT 1
8635: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8636: LD_ADDR_EXP 44
8640: PUSH
8641: LD_INT 2
8643: ST_TO_ADDR
// def_shared_vision := 1 ;
8644: LD_ADDR_EXP 45
8648: PUSH
8649: LD_INT 1
8651: ST_TO_ADDR
// def_morale_flags := 0 ;
8652: LD_ADDR_EXP 46
8656: PUSH
8657: LD_INT 0
8659: ST_TO_ADDR
// def_siberite_detection := 1 ;
8660: LD_ADDR_EXP 47
8664: PUSH
8665: LD_INT 1
8667: ST_TO_ADDR
// def_people_respawning := 0 ;
8668: LD_ADDR_EXP 48
8672: PUSH
8673: LD_INT 0
8675: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
8676: LD_ADDR_EXP 49
8680: PUSH
8681: LD_INT 0
8683: ST_TO_ADDR
// def_siberite_bomb := 1 ;
8684: LD_ADDR_EXP 50
8688: PUSH
8689: LD_INT 1
8691: ST_TO_ADDR
// def_builduptime := 3 ;
8692: LD_ADDR_EXP 51
8696: PUSH
8697: LD_INT 3
8699: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
8700: LD_ADDR_VAR 0 2
8704: PUSH
8705: LD_INT 1
8707: PUSH
8708: EMPTY
8709: LIST
8710: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8711: LD_ADDR_VAR 0 3
8715: PUSH
8716: EMPTY
8717: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8718: LD_ADDR_LOC 21
8722: PUSH
8723: EMPTY
8724: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8725: LD_ADDR_LOC 22
8729: PUSH
8730: EMPTY
8731: ST_TO_ADDR
// Banned_Controls := [ ] ;
8732: LD_ADDR_LOC 23
8736: PUSH
8737: EMPTY
8738: ST_TO_ADDR
// Banned_Engines := [ ] ;
8739: LD_ADDR_LOC 24
8743: PUSH
8744: EMPTY
8745: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8746: LD_ADDR_LOC 19
8750: PUSH
8751: EMPTY
8752: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8753: LD_ADDR_LOC 20
8757: PUSH
8758: EMPTY
8759: ST_TO_ADDR
// end ; 5 :
8760: GO 9845
8762: LD_INT 5
8764: DOUBLE
8765: EQUAL
8766: IFTRUE 8770
8768: GO 9019
8770: POP
// begin def_base_level := 0 ;
8771: LD_ADDR_EXP 38
8775: PUSH
8776: LD_INT 0
8778: ST_TO_ADDR
// def_amount_of_people := 0 ;
8779: LD_ADDR_EXP 39
8783: PUSH
8784: LD_INT 0
8786: ST_TO_ADDR
// def_skill_level := 0 ;
8787: LD_ADDR_EXP 40
8791: PUSH
8792: LD_INT 0
8794: ST_TO_ADDR
// def_starting_resources := 0 ;
8795: LD_ADDR_EXP 41
8799: PUSH
8800: LD_INT 0
8802: ST_TO_ADDR
// def_shipments_density := 0 ;
8803: LD_ADDR_EXP 42
8807: PUSH
8808: LD_INT 0
8810: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8811: LD_ADDR_EXP 43
8815: PUSH
8816: LD_INT 0
8818: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
8819: LD_ADDR_EXP 44
8823: PUSH
8824: LD_INT 0
8826: ST_TO_ADDR
// def_shared_vision := 1 ;
8827: LD_ADDR_EXP 45
8831: PUSH
8832: LD_INT 1
8834: ST_TO_ADDR
// def_morale_flags := 0 ;
8835: LD_ADDR_EXP 46
8839: PUSH
8840: LD_INT 0
8842: ST_TO_ADDR
// def_siberite_detection := 0 ;
8843: LD_ADDR_EXP 47
8847: PUSH
8848: LD_INT 0
8850: ST_TO_ADDR
// def_people_respawning := 1 ;
8851: LD_ADDR_EXP 48
8855: PUSH
8856: LD_INT 1
8858: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
8859: LD_ADDR_EXP 49
8863: PUSH
8864: LD_INT 1
8866: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8867: LD_ADDR_EXP 50
8871: PUSH
8872: LD_INT 0
8874: ST_TO_ADDR
// def_builduptime := 0 ;
8875: LD_ADDR_EXP 51
8879: PUSH
8880: LD_INT 0
8882: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
8883: LD_ADDR_VAR 0 2
8887: PUSH
8888: LD_INT 10
8890: PUSH
8891: LD_INT 3
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
8898: LD_ADDR_VAR 0 3
8902: PUSH
8903: LD_INT 12
8905: PUSH
8906: LD_INT 11
8908: PUSH
8909: LD_INT 14
8911: PUSH
8912: LD_INT 13
8914: PUSH
8915: LD_INT 5
8917: PUSH
8918: LD_INT 24
8920: PUSH
8921: LD_INT 21
8923: PUSH
8924: LD_INT 33
8926: PUSH
8927: LD_INT 36
8929: PUSH
8930: EMPTY
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
8941: LD_ADDR_LOC 21
8945: PUSH
8946: LD_INT 31
8948: PUSH
8949: EMPTY
8950: LIST
8951: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8952: LD_ADDR_LOC 22
8956: PUSH
8957: EMPTY
8958: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
8959: LD_ADDR_LOC 23
8963: PUSH
8964: LD_INT 2
8966: PUSH
8967: EMPTY
8968: LIST
8969: ST_TO_ADDR
// Banned_Engines := [ ] ;
8970: LD_ADDR_LOC 24
8974: PUSH
8975: EMPTY
8976: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
8977: LD_ADDR_LOC 19
8981: PUSH
8982: LD_INT 4
8984: PUSH
8985: EMPTY
8986: LIST
8987: PUSH
8988: LD_INT 31
8990: PUSH
8991: LD_INT 32
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
9002: LD_ADDR_LOC 20
9006: PUSH
9007: LD_INT 1
9009: PUSH
9010: LD_INT 1
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: ST_TO_ADDR
// end ; 6 :
9017: GO 9845
9019: LD_INT 6
9021: DOUBLE
9022: EQUAL
9023: IFTRUE 9027
9025: GO 9230
9027: POP
// begin def_base_level := 1 ;
9028: LD_ADDR_EXP 38
9032: PUSH
9033: LD_INT 1
9035: ST_TO_ADDR
// def_amount_of_people := 2 ;
9036: LD_ADDR_EXP 39
9040: PUSH
9041: LD_INT 2
9043: ST_TO_ADDR
// def_skill_level := 3 ;
9044: LD_ADDR_EXP 40
9048: PUSH
9049: LD_INT 3
9051: ST_TO_ADDR
// def_starting_resources := 3 ;
9052: LD_ADDR_EXP 41
9056: PUSH
9057: LD_INT 3
9059: ST_TO_ADDR
// def_shipments_density := 1 ;
9060: LD_ADDR_EXP 42
9064: PUSH
9065: LD_INT 1
9067: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9068: LD_ADDR_EXP 43
9072: PUSH
9073: LD_INT 0
9075: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9076: LD_ADDR_EXP 44
9080: PUSH
9081: LD_INT 1
9083: ST_TO_ADDR
// def_shared_vision := 1 ;
9084: LD_ADDR_EXP 45
9088: PUSH
9089: LD_INT 1
9091: ST_TO_ADDR
// def_morale_flags := 0 ;
9092: LD_ADDR_EXP 46
9096: PUSH
9097: LD_INT 0
9099: ST_TO_ADDR
// def_siberite_detection := 1 ;
9100: LD_ADDR_EXP 47
9104: PUSH
9105: LD_INT 1
9107: ST_TO_ADDR
// def_people_respawning := 2 ;
9108: LD_ADDR_EXP 48
9112: PUSH
9113: LD_INT 2
9115: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9116: LD_ADDR_EXP 49
9120: PUSH
9121: LD_INT 1
9123: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9124: LD_ADDR_EXP 50
9128: PUSH
9129: LD_INT 0
9131: ST_TO_ADDR
// def_builduptime := 1 ;
9132: LD_ADDR_EXP 51
9136: PUSH
9137: LD_INT 1
9139: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9140: LD_ADDR_VAR 0 2
9144: PUSH
9145: LD_INT 23
9147: PUSH
9148: EMPTY
9149: LIST
9150: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
9151: LD_ADDR_VAR 0 3
9155: PUSH
9156: LD_INT 2
9158: PUSH
9159: LD_INT 37
9161: PUSH
9162: LD_INT 31
9164: PUSH
9165: LD_INT 32
9167: PUSH
9168: LD_INT 33
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9178: LD_ADDR_LOC 21
9182: PUSH
9183: EMPTY
9184: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9185: LD_ADDR_LOC 22
9189: PUSH
9190: EMPTY
9191: ST_TO_ADDR
// Banned_Controls := [ ] ;
9192: LD_ADDR_LOC 23
9196: PUSH
9197: EMPTY
9198: ST_TO_ADDR
// Banned_Engines := [ ] ;
9199: LD_ADDR_LOC 24
9203: PUSH
9204: EMPTY
9205: ST_TO_ADDR
// Restricted_Builds := [ ] ;
9206: LD_ADDR_LOC 19
9210: PUSH
9211: EMPTY
9212: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
9213: LD_ADDR_LOC 20
9217: PUSH
9218: EMPTY
9219: ST_TO_ADDR
// No_Mechs := true ;
9220: LD_ADDR_EXP 52
9224: PUSH
9225: LD_INT 1
9227: ST_TO_ADDR
// end ; 7 :
9228: GO 9845
9230: LD_INT 7
9232: DOUBLE
9233: EQUAL
9234: IFTRUE 9238
9236: GO 9436
9238: POP
// begin def_base_level := 1 ;
9239: LD_ADDR_EXP 38
9243: PUSH
9244: LD_INT 1
9246: ST_TO_ADDR
// def_amount_of_people := 2 ;
9247: LD_ADDR_EXP 39
9251: PUSH
9252: LD_INT 2
9254: ST_TO_ADDR
// def_skill_level := 3 ;
9255: LD_ADDR_EXP 40
9259: PUSH
9260: LD_INT 3
9262: ST_TO_ADDR
// def_starting_resources := 3 ;
9263: LD_ADDR_EXP 41
9267: PUSH
9268: LD_INT 3
9270: ST_TO_ADDR
// def_shipments_density := 1 ;
9271: LD_ADDR_EXP 42
9275: PUSH
9276: LD_INT 1
9278: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9279: LD_ADDR_EXP 43
9283: PUSH
9284: LD_INT 1
9286: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9287: LD_ADDR_EXP 44
9291: PUSH
9292: LD_INT 2
9294: ST_TO_ADDR
// def_shared_vision := 1 ;
9295: LD_ADDR_EXP 45
9299: PUSH
9300: LD_INT 1
9302: ST_TO_ADDR
// def_morale_flags := 0 ;
9303: LD_ADDR_EXP 46
9307: PUSH
9308: LD_INT 0
9310: ST_TO_ADDR
// def_siberite_detection := 1 ;
9311: LD_ADDR_EXP 47
9315: PUSH
9316: LD_INT 1
9318: ST_TO_ADDR
// def_people_respawning := 0 ;
9319: LD_ADDR_EXP 48
9323: PUSH
9324: LD_INT 0
9326: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9327: LD_ADDR_EXP 49
9331: PUSH
9332: LD_INT 1
9334: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9335: LD_ADDR_EXP 50
9339: PUSH
9340: LD_INT 0
9342: ST_TO_ADDR
// def_builduptime := 3 ;
9343: LD_ADDR_EXP 51
9347: PUSH
9348: LD_INT 3
9350: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9351: LD_ADDR_VAR 0 2
9355: PUSH
9356: LD_INT 23
9358: PUSH
9359: EMPTY
9360: LIST
9361: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
9362: LD_ADDR_VAR 0 3
9366: PUSH
9367: LD_INT 37
9369: PUSH
9370: EMPTY
9371: LIST
9372: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9373: LD_ADDR_LOC 21
9377: PUSH
9378: EMPTY
9379: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9380: LD_ADDR_LOC 22
9384: PUSH
9385: EMPTY
9386: ST_TO_ADDR
// Banned_Controls := [ ] ;
9387: LD_ADDR_LOC 23
9391: PUSH
9392: EMPTY
9393: ST_TO_ADDR
// Banned_Engines := [ ] ;
9394: LD_ADDR_LOC 24
9398: PUSH
9399: EMPTY
9400: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9401: LD_ADDR_LOC 19
9405: PUSH
9406: LD_INT 31
9408: PUSH
9409: LD_INT 32
9411: PUSH
9412: LD_INT 33
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: LIST
9419: PUSH
9420: EMPTY
9421: LIST
9422: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
9423: LD_ADDR_LOC 20
9427: PUSH
9428: LD_INT 10
9430: PUSH
9431: EMPTY
9432: LIST
9433: ST_TO_ADDR
// end ; 8 :
9434: GO 9845
9436: LD_INT 8
9438: DOUBLE
9439: EQUAL
9440: IFTRUE 9444
9442: GO 9844
9444: POP
// begin def_base_level := 0 ;
9445: LD_ADDR_EXP 38
9449: PUSH
9450: LD_INT 0
9452: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
9453: LD_ADDR_EXP 39
9457: PUSH
9458: LD_INT 0
9460: PPUSH
9461: LD_INT 1
9463: PPUSH
9464: CALL_OW 12
9468: ST_TO_ADDR
// def_skill_level := 0 ;
9469: LD_ADDR_EXP 40
9473: PUSH
9474: LD_INT 0
9476: ST_TO_ADDR
// def_starting_resources := 2 ;
9477: LD_ADDR_EXP 41
9481: PUSH
9482: LD_INT 2
9484: ST_TO_ADDR
// def_shipments_density := 1 ;
9485: LD_ADDR_EXP 42
9489: PUSH
9490: LD_INT 1
9492: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9493: LD_ADDR_EXP 43
9497: PUSH
9498: LD_INT 0
9500: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
9501: LD_ADDR_EXP 44
9505: PUSH
9506: LD_INT 0
9508: ST_TO_ADDR
// def_shared_vision := 1 ;
9509: LD_ADDR_EXP 45
9513: PUSH
9514: LD_INT 1
9516: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
9517: LD_ADDR_EXP 46
9521: PUSH
9522: LD_INT 0
9524: PPUSH
9525: LD_INT 2
9527: PPUSH
9528: CALL_OW 12
9532: ST_TO_ADDR
// def_siberite_detection := 0 ;
9533: LD_ADDR_EXP 47
9537: PUSH
9538: LD_INT 0
9540: ST_TO_ADDR
// def_people_respawning := 0 ;
9541: LD_ADDR_EXP 48
9545: PUSH
9546: LD_INT 0
9548: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
9549: LD_ADDR_EXP 49
9553: PUSH
9554: LD_INT 2
9556: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9557: LD_ADDR_EXP 50
9561: PUSH
9562: LD_INT 0
9564: ST_TO_ADDR
// def_builduptime := 0 ;
9565: LD_ADDR_EXP 51
9569: PUSH
9570: LD_INT 0
9572: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
9573: LD_ADDR_VAR 0 2
9577: PUSH
9578: LD_INT 23
9580: PUSH
9581: LD_INT 20
9583: PUSH
9584: LD_INT 40
9586: PUSH
9587: LD_INT 47
9589: PUSH
9590: LD_INT 46
9592: PUSH
9593: LD_INT 39
9595: PUSH
9596: LD_INT 71
9598: PUSH
9599: LD_INT 34
9601: PUSH
9602: LD_INT 41
9604: PUSH
9605: LD_INT 44
9607: PUSH
9608: LD_INT 17
9610: PUSH
9611: LD_INT 16
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
9628: LD_ADDR_VAR 0 3
9632: PUSH
9633: LD_INT 37
9635: PUSH
9636: LD_INT 5
9638: PUSH
9639: LD_INT 13
9641: PUSH
9642: LD_INT 34
9644: PUSH
9645: LD_INT 12
9647: PUSH
9648: LD_INT 15
9650: PUSH
9651: LD_INT 11
9653: PUSH
9654: LD_INT 14
9656: PUSH
9657: LD_INT 29
9659: PUSH
9660: LD_INT 30
9662: PUSH
9663: LD_INT 28
9665: PUSH
9666: LD_INT 24
9668: PUSH
9669: LD_INT 25
9671: PUSH
9672: LD_INT 20
9674: PUSH
9675: LD_INT 21
9677: PUSH
9678: LD_INT 22
9680: PUSH
9681: LD_INT 36
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9703: LD_ADDR_LOC 21
9707: PUSH
9708: EMPTY
9709: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
9710: LD_ADDR_LOC 22
9714: PUSH
9715: LD_INT 14
9717: PUSH
9718: EMPTY
9719: LIST
9720: ST_TO_ADDR
// Banned_Controls := [ ] ;
9721: LD_ADDR_LOC 23
9725: PUSH
9726: EMPTY
9727: ST_TO_ADDR
// Banned_Engines := [ ] ;
9728: LD_ADDR_LOC 24
9732: PUSH
9733: EMPTY
9734: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
9735: LD_ADDR_LOC 19
9739: PUSH
9740: LD_INT 31
9742: PUSH
9743: LD_INT 32
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: PUSH
9750: LD_INT 4
9752: PUSH
9753: EMPTY
9754: LIST
9755: PUSH
9756: EMPTY
9757: LIST
9758: LIST
9759: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
9760: LD_ADDR_LOC 20
9764: PUSH
9765: LD_INT 2
9767: PUSH
9768: LD_INT 1
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: ST_TO_ADDR
// for i := 1 to 8 do
9775: LD_ADDR_VAR 0 4
9779: PUSH
9780: DOUBLE
9781: LD_INT 1
9783: DEC
9784: ST_TO_ADDR
9785: LD_INT 8
9787: PUSH
9788: FOR_TO
9789: IFFALSE 9840
// if ( Side_Nations [ i ] = 3 ) then
9791: LD_EXP 21
9795: PUSH
9796: LD_VAR 0 4
9800: ARRAY
9801: PUSH
9802: LD_INT 3
9804: EQUAL
9805: IFFALSE 9838
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
9807: LD_ADDR_EXP 21
9811: PUSH
9812: LD_EXP 21
9816: PPUSH
9817: LD_VAR 0 4
9821: PPUSH
9822: LD_INT 1
9824: PPUSH
9825: LD_INT 2
9827: PPUSH
9828: CALL_OW 12
9832: PPUSH
9833: CALL_OW 1
9837: ST_TO_ADDR
9838: GO 9788
9840: POP
9841: POP
// end ; end ;
9842: GO 9845
9844: POP
// for i := 1 to 8 do
9845: LD_ADDR_VAR 0 4
9849: PUSH
9850: DOUBLE
9851: LD_INT 1
9853: DEC
9854: ST_TO_ADDR
9855: LD_INT 8
9857: PUSH
9858: FOR_TO
9859: IFFALSE 9943
// if Side_Positions [ i ] then
9861: LD_EXP 20
9865: PUSH
9866: LD_VAR 0 4
9870: ARRAY
9871: IFFALSE 9941
// begin for j in Unavailable_Techs do
9873: LD_ADDR_VAR 0 5
9877: PUSH
9878: LD_VAR 0 2
9882: PUSH
9883: FOR_IN
9884: IFFALSE 9905
// SetTech ( j , i , 0 ) ;
9886: LD_VAR 0 5
9890: PPUSH
9891: LD_VAR 0 4
9895: PPUSH
9896: LD_INT 0
9898: PPUSH
9899: CALL_OW 322
9903: GO 9883
9905: POP
9906: POP
// for j in Unavailable_Builds do
9907: LD_ADDR_VAR 0 5
9911: PUSH
9912: LD_VAR 0 3
9916: PUSH
9917: FOR_IN
9918: IFFALSE 9939
// SetRestrict ( j , i , 0 ) ;
9920: LD_VAR 0 5
9924: PPUSH
9925: LD_VAR 0 4
9929: PPUSH
9930: LD_INT 0
9932: PPUSH
9933: CALL_OW 324
9937: GO 9917
9939: POP
9940: POP
// end ;
9941: GO 9858
9943: POP
9944: POP
// end ;
9945: LD_VAR 0 1
9949: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
9950: LD_INT 0
9952: PPUSH
9953: PPUSH
9954: PPUSH
9955: PPUSH
9956: PPUSH
9957: PPUSH
9958: PPUSH
// for i := 1 to Restricted_Builds do
9959: LD_ADDR_VAR 0 2
9963: PUSH
9964: DOUBLE
9965: LD_INT 1
9967: DEC
9968: ST_TO_ADDR
9969: LD_LOC 19
9973: PUSH
9974: FOR_TO
9975: IFFALSE 10285
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
9977: LD_LOC 19
9981: PUSH
9982: LD_VAR 0 2
9986: ARRAY
9987: PUSH
9988: LD_INT 1
9990: ARRAY
9991: PUSH
9992: LD_INT 31
9994: DOUBLE
9995: EQUAL
9996: IFTRUE 10012
9998: LD_INT 32
10000: DOUBLE
10001: EQUAL
10002: IFTRUE 10012
10004: LD_INT 33
10006: DOUBLE
10007: EQUAL
10008: IFTRUE 10012
10010: GO 10023
10012: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
10013: LD_ADDR_VAR 0 6
10017: PUSH
10018: LD_STRING #Turrets
10020: ST_TO_ADDR
10021: GO 10068
10023: LD_INT 4
10025: DOUBLE
10026: EQUAL
10027: IFTRUE 10037
10029: LD_INT 5
10031: DOUBLE
10032: EQUAL
10033: IFTRUE 10037
10035: GO 10048
10037: POP
// btype := #Armouries ; b_Behemoth :
10038: LD_ADDR_VAR 0 6
10042: PUSH
10043: LD_STRING #Armouries
10045: ST_TO_ADDR
10046: GO 10068
10048: LD_INT 37
10050: DOUBLE
10051: EQUAL
10052: IFTRUE 10056
10054: GO 10067
10056: POP
// btype := #Behemoths ; end ;
10057: LD_ADDR_VAR 0 6
10061: PUSH
10062: LD_STRING #Behemoths
10064: ST_TO_ADDR
10065: GO 10068
10067: POP
// list := [ ] ;
10068: LD_ADDR_VAR 0 7
10072: PUSH
10073: EMPTY
10074: ST_TO_ADDR
// for j := 1 to 8 do
10075: LD_ADDR_VAR 0 3
10079: PUSH
10080: DOUBLE
10081: LD_INT 1
10083: DEC
10084: ST_TO_ADDR
10085: LD_INT 8
10087: PUSH
10088: FOR_TO
10089: IFFALSE 10182
// if Side_Positions [ j ] then
10091: LD_EXP 20
10095: PUSH
10096: LD_VAR 0 3
10100: ARRAY
10101: IFFALSE 10180
// begin amount := 0 ;
10103: LD_ADDR_VAR 0 5
10107: PUSH
10108: LD_INT 0
10110: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
10111: LD_ADDR_VAR 0 4
10115: PUSH
10116: LD_LOC 19
10120: PUSH
10121: LD_VAR 0 2
10125: ARRAY
10126: PUSH
10127: FOR_IN
10128: IFFALSE 10176
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
10130: LD_ADDR_VAR 0 5
10134: PUSH
10135: LD_VAR 0 5
10139: PUSH
10140: LD_INT 22
10142: PUSH
10143: LD_VAR 0 3
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: PUSH
10152: LD_INT 30
10154: PUSH
10155: LD_VAR 0 4
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: PPUSH
10168: CALL_OW 69
10172: PLUS
10173: ST_TO_ADDR
10174: GO 10127
10176: POP
10177: POP
// break ;
10178: GO 10182
// end ;
10180: GO 10088
10182: POP
10183: POP
// list := [ ] ;
10184: LD_ADDR_VAR 0 7
10188: PUSH
10189: EMPTY
10190: ST_TO_ADDR
// for j := 1 to 8 do
10191: LD_ADDR_VAR 0 3
10195: PUSH
10196: DOUBLE
10197: LD_INT 1
10199: DEC
10200: ST_TO_ADDR
10201: LD_INT 8
10203: PUSH
10204: FOR_TO
10205: IFFALSE 10225
// list := list ^ amount ;
10207: LD_ADDR_VAR 0 7
10211: PUSH
10212: LD_VAR 0 7
10216: PUSH
10217: LD_VAR 0 5
10221: ADD
10222: ST_TO_ADDR
10223: GO 10204
10225: POP
10226: POP
// Already_Built := Already_Built ^ [ list ] ;
10227: LD_ADDR_LOC 25
10231: PUSH
10232: LD_LOC 25
10236: PUSH
10237: LD_VAR 0 7
10241: PUSH
10242: EMPTY
10243: LIST
10244: ADD
10245: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
10246: LD_ADDR_LOC 26
10250: PUSH
10251: LD_LOC 26
10255: PUSH
10256: LD_VAR 0 6
10260: PUSH
10261: LD_VAR 0 5
10265: PUSH
10266: LD_LOC 20
10270: PUSH
10271: LD_VAR 0 2
10275: ARRAY
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: LIST
10281: ADD
10282: ST_TO_ADDR
// end ;
10283: GO 9974
10285: POP
10286: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10287: LD_ADDR_LOC 27
10291: PUSH
10292: LD_INT 0
10294: PUSH
10295: LD_INT 0
10297: PUSH
10298: LD_INT 0
10300: PUSH
10301: LD_INT 0
10303: PUSH
10304: LD_INT 0
10306: PUSH
10307: LD_INT 0
10309: PUSH
10310: LD_INT 0
10312: PUSH
10313: LD_INT 0
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: ST_TO_ADDR
// if Limits_Info then
10326: LD_LOC 26
10330: IFFALSE 10346
// Limits_Info := #Limits ^ Limits_Info ;
10332: LD_ADDR_LOC 26
10336: PUSH
10337: LD_STRING #Limits
10339: PUSH
10340: LD_LOC 26
10344: ADD
10345: ST_TO_ADDR
// end ;
10346: LD_VAR 0 1
10350: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
10351: LD_INT 0
10353: PPUSH
10354: PPUSH
10355: PPUSH
10356: PPUSH
// for i := 1 to Restricted_Builds do
10357: LD_ADDR_VAR 0 7
10361: PUSH
10362: DOUBLE
10363: LD_INT 1
10365: DEC
10366: ST_TO_ADDR
10367: LD_LOC 19
10371: PUSH
10372: FOR_TO
10373: IFFALSE 10796
// if BType in Restricted_Builds [ i ] then
10375: LD_VAR 0 2
10379: PUSH
10380: LD_LOC 19
10384: PUSH
10385: LD_VAR 0 7
10389: ARRAY
10390: IN
10391: IFFALSE 10794
// begin if old_side then
10393: LD_VAR 0 4
10397: IFFALSE 10523
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
10399: LD_LOC 25
10403: PUSH
10404: LD_VAR 0 7
10408: ARRAY
10409: PUSH
10410: LD_VAR 0 3
10414: ARRAY
10415: PUSH
10416: LD_VAR 0 5
10420: PLUS
10421: PUSH
10422: LD_LOC 20
10426: PUSH
10427: LD_VAR 0 7
10431: ARRAY
10432: GREATER
10433: IFFALSE 10459
// begin SetSide ( un , old_side ) ;
10435: LD_VAR 0 1
10439: PPUSH
10440: LD_VAR 0 4
10444: PPUSH
10445: CALL_OW 235
// count := 0 ;
10449: LD_ADDR_VAR 0 5
10453: PUSH
10454: LD_INT 0
10456: ST_TO_ADDR
// end else
10457: GO 10523
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
10459: LD_ADDR_LOC 25
10463: PUSH
10464: LD_LOC 25
10468: PPUSH
10469: LD_VAR 0 7
10473: PPUSH
10474: LD_LOC 25
10478: PUSH
10479: LD_VAR 0 7
10483: ARRAY
10484: PPUSH
10485: LD_VAR 0 4
10489: PPUSH
10490: LD_LOC 25
10494: PUSH
10495: LD_VAR 0 7
10499: ARRAY
10500: PUSH
10501: LD_VAR 0 4
10505: ARRAY
10506: PUSH
10507: LD_VAR 0 5
10511: MINUS
10512: PPUSH
10513: CALL_OW 1
10517: PPUSH
10518: CALL_OW 1
10522: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
10523: LD_ADDR_LOC 25
10527: PUSH
10528: LD_LOC 25
10532: PPUSH
10533: LD_VAR 0 7
10537: PPUSH
10538: LD_LOC 25
10542: PUSH
10543: LD_VAR 0 7
10547: ARRAY
10548: PPUSH
10549: LD_VAR 0 3
10553: PPUSH
10554: LD_LOC 25
10558: PUSH
10559: LD_VAR 0 7
10563: ARRAY
10564: PUSH
10565: LD_VAR 0 3
10569: ARRAY
10570: PUSH
10571: LD_VAR 0 5
10575: PLUS
10576: PPUSH
10577: CALL_OW 1
10581: PPUSH
10582: CALL_OW 1
10586: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
10587: LD_VAR 0 5
10591: PUSH
10592: LD_INT 0
10594: NONEQUAL
10595: PUSH
10596: LD_VAR 0 3
10600: PUSH
10601: LD_OWVAR 2
10605: EQUAL
10606: AND
10607: IFFALSE 10650
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
10609: LD_ADDR_LOC 26
10613: PUSH
10614: LD_LOC 26
10618: PPUSH
10619: LD_INT 3
10621: PUSH
10622: LD_VAR 0 7
10626: MUL
10627: PPUSH
10628: LD_LOC 25
10632: PUSH
10633: LD_VAR 0 7
10637: ARRAY
10638: PUSH
10639: LD_VAR 0 3
10643: ARRAY
10644: PPUSH
10645: CALL_OW 1
10649: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
10650: LD_LOC 25
10654: PUSH
10655: LD_VAR 0 7
10659: ARRAY
10660: PUSH
10661: LD_VAR 0 3
10665: ARRAY
10666: PUSH
10667: LD_LOC 20
10671: PUSH
10672: LD_VAR 0 7
10676: ARRAY
10677: GREATER
10678: IFFALSE 10705
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
10680: LD_ADDR_LOC 27
10684: PUSH
10685: LD_LOC 27
10689: PPUSH
10690: LD_VAR 0 3
10694: PPUSH
10695: LD_INT 1
10697: PPUSH
10698: CALL_OW 1
10702: ST_TO_ADDR
// end else
10703: GO 10792
// begin for j := 1 to Restricted_Builds do
10705: LD_ADDR_VAR 0 8
10709: PUSH
10710: DOUBLE
10711: LD_INT 1
10713: DEC
10714: ST_TO_ADDR
10715: LD_LOC 19
10719: PUSH
10720: FOR_TO
10721: IFFALSE 10765
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
10723: LD_LOC 25
10727: PUSH
10728: LD_VAR 0 8
10732: ARRAY
10733: PUSH
10734: LD_VAR 0 3
10738: ARRAY
10739: PUSH
10740: LD_LOC 20
10744: PUSH
10745: LD_VAR 0 8
10749: ARRAY
10750: GREATER
10751: IFFALSE 10763
// begin Is_Cheater := true ;
10753: LD_ADDR_VAR 0 9
10757: PUSH
10758: LD_INT 1
10760: ST_TO_ADDR
// break ;
10761: GO 10765
// end ;
10763: GO 10720
10765: POP
10766: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
10767: LD_ADDR_LOC 27
10771: PUSH
10772: LD_LOC 27
10776: PPUSH
10777: LD_VAR 0 3
10781: PPUSH
10782: LD_VAR 0 9
10786: PPUSH
10787: CALL_OW 1
10791: ST_TO_ADDR
// end ; break ;
10792: GO 10796
// end ;
10794: GO 10372
10796: POP
10797: POP
// end ;
10798: LD_VAR 0 6
10802: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
10803: LD_VAR 0 5
10807: PUSH
10808: LD_LOC 21
10812: IN
10813: PUSH
10814: LD_VAR 0 2
10818: PUSH
10819: LD_LOC 22
10823: IN
10824: OR
10825: PUSH
10826: LD_VAR 0 4
10830: PUSH
10831: LD_LOC 23
10835: IN
10836: OR
10837: PUSH
10838: LD_VAR 0 3
10842: PUSH
10843: LD_LOC 24
10847: IN
10848: OR
10849: IFFALSE 10860
// ComCancel ( factory ) ;
10851: LD_VAR 0 1
10855: PPUSH
10856: CALL_OW 127
// end ;
10860: PPOPN 5
10862: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
10863: LD_VAR 0 2
10867: PUSH
10868: LD_LOC 21
10872: IN
10873: IFFALSE 10884
// ComCancel ( building ) ;
10875: LD_VAR 0 1
10879: PPUSH
10880: CALL_OW 127
// end ; end_of_file
10884: PPOPN 2
10886: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
10887: LD_INT 0
10889: PPUSH
10890: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
10891: LD_ADDR_VAR 0 2
10895: PUSH
10896: LD_STRING #Multi1x1-Time
10898: PUSH
10899: LD_OWVAR 1
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: ST_TO_ADDR
// if WaitServerStrings then
10908: LD_EXP 54
10912: IFFALSE 10930
// AllStrings = AllStrings ^ WaitServerStrings ;
10914: LD_ADDR_VAR 0 2
10918: PUSH
10919: LD_VAR 0 2
10923: PUSH
10924: LD_EXP 54
10928: ADD
10929: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
10930: LD_INT 0
10932: PUSH
10933: LD_EXP 12
10937: PUSH
10938: LD_OWVAR 1
10942: MINUS
10943: LESSEQUAL
10944: IFFALSE 10975
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
10946: LD_ADDR_VAR 0 2
10950: PUSH
10951: LD_VAR 0 2
10955: PUSH
10956: LD_STRING #allowedsibbomb
10958: PUSH
10959: LD_EXP 12
10963: PUSH
10964: LD_OWVAR 1
10968: MINUS
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: ADD
10974: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
10975: LD_INT 0
10977: PUSH
10978: LD_EXP 16
10982: PUSH
10983: LD_OWVAR 1
10987: MINUS
10988: LESSEQUAL
10989: IFFALSE 11020
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
10991: LD_ADDR_VAR 0 2
10995: PUSH
10996: LD_VAR 0 2
11000: PUSH
11001: LD_STRING #builduptime
11003: PUSH
11004: LD_EXP 16
11008: PUSH
11009: LD_OWVAR 1
11013: MINUS
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: ADD
11019: ST_TO_ADDR
// if ( ExtraStrings ) then
11020: LD_EXP 53
11024: IFFALSE 11046
// AllStrings := AllStrings ^  ^ ExtraStrings ;
11026: LD_ADDR_VAR 0 2
11030: PUSH
11031: LD_VAR 0 2
11035: PUSH
11036: LD_STRING 
11038: ADD
11039: PUSH
11040: LD_EXP 53
11044: ADD
11045: ST_TO_ADDR
// if ( LimitsStrings ) then
11046: CALL 7727 0 0
11050: IFFALSE 11072
// AllStrings := AllStrings ^  ^ LimitsStrings ;
11052: LD_ADDR_VAR 0 2
11056: PUSH
11057: LD_VAR 0 2
11061: PUSH
11062: LD_STRING 
11064: ADD
11065: PUSH
11066: CALL 7727 0 0
11070: ADD
11071: ST_TO_ADDR
// Display_Strings := AllStrings ;
11072: LD_ADDR_OWVAR 47
11076: PUSH
11077: LD_VAR 0 2
11081: ST_TO_ADDR
// end ;
11082: LD_VAR 0 1
11086: RET
// every 0 0$1 do
11087: GO 11089
11089: DISABLE
// begin ShowTimer ;
11090: CALL 10887 0 0
// enable ;
11094: ENABLE
// end ; end_of_file
11095: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
11096: LD_INT 0
11098: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
11099: LD_VAR 0 1
11103: PPUSH
11104: CALL_OW 255
11108: PUSH
11109: LD_VAR 0 4
11113: EQUAL
11114: IFFALSE 11133
// begin SetAchievement ( ACH_RAD ) ;
11116: LD_STRING ACH_RAD
11118: PPUSH
11119: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
11123: LD_STRING ACH_NL
11125: PPUSH
11126: LD_INT 1
11128: PPUSH
11129: CALL_OW 564
// end end ;
11133: LD_VAR 0 5
11137: RET
// export function SA_Win ( side ) ; begin
11138: LD_INT 0
11140: PPUSH
// case side of 1 :
11141: LD_VAR 0 1
11145: PUSH
11146: LD_INT 1
11148: DOUBLE
11149: EQUAL
11150: IFTRUE 11154
11152: GO 11167
11154: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
11155: LD_STRING ACH_AH
11157: PPUSH
11158: LD_INT 1
11160: PPUSH
11161: CALL_OW 564
11165: GO 11330
11167: LD_INT 2
11169: DOUBLE
11170: EQUAL
11171: IFTRUE 11175
11173: GO 11188
11175: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
11176: LD_STRING ACH_E
11178: PPUSH
11179: LD_INT 1
11181: PPUSH
11182: CALL_OW 564
11186: GO 11330
11188: LD_INT 3
11190: DOUBLE
11191: EQUAL
11192: IFTRUE 11196
11194: GO 11209
11196: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
11197: LD_STRING ACH_OOL
11199: PPUSH
11200: LD_INT 1
11202: PPUSH
11203: CALL_OW 564
11207: GO 11330
11209: LD_INT 1
11211: PUSH
11212: LD_INT 2
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: DOUBLE
11219: EQUAL
11220: IFTRUE 11224
11222: GO 11249
11224: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
11225: LD_STRING ACH_AH
11227: PPUSH
11228: LD_REAL  5.00000000000000E-0001
11231: PPUSH
11232: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
11236: LD_STRING ACH_E
11238: PPUSH
11239: LD_REAL  5.00000000000000E-0001
11242: PPUSH
11243: CALL_OW 564
// end ; [ 2 , 3 ] :
11247: GO 11330
11249: LD_INT 2
11251: PUSH
11252: LD_INT 3
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: DOUBLE
11259: EQUAL
11260: IFTRUE 11264
11262: GO 11289
11264: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
11265: LD_STRING ACH_OOL
11267: PPUSH
11268: LD_REAL  5.00000000000000E-0001
11271: PPUSH
11272: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
11276: LD_STRING ACH_E
11278: PPUSH
11279: LD_REAL  5.00000000000000E-0001
11282: PPUSH
11283: CALL_OW 564
// end ; [ 3 , 1 ] :
11287: GO 11330
11289: LD_INT 3
11291: PUSH
11292: LD_INT 1
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: DOUBLE
11299: EQUAL
11300: IFTRUE 11304
11302: GO 11329
11304: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
11305: LD_STRING ACH_AH
11307: PPUSH
11308: LD_REAL  5.00000000000000E-0001
11311: PPUSH
11312: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
11316: LD_STRING ACH_OOL
11318: PPUSH
11319: LD_REAL  5.00000000000000E-0001
11322: PPUSH
11323: CALL_OW 564
// end ; end ;
11327: GO 11330
11329: POP
// end ; end_of_file
11330: LD_VAR 0 2
11334: RET
// export BuildUpAreas , BuildUp ; export function BeginBuildUp ; var i , j ; begin
11335: LD_INT 0
11337: PPUSH
11338: PPUSH
11339: PPUSH
// enable ( 600 ) ;
11340: LD_INT 600
11342: ENABLE_MARKED
// BuildUp = true ;
11343: LD_ADDR_EXP 56
11347: PUSH
11348: LD_INT 1
11350: ST_TO_ADDR
// for i := 1 to BuildUpAreas do
11351: LD_ADDR_VAR 0 2
11355: PUSH
11356: DOUBLE
11357: LD_INT 1
11359: DEC
11360: ST_TO_ADDR
11361: LD_EXP 55
11365: PUSH
11366: FOR_TO
11367: IFFALSE 11522
// if Position_Sides [ i ] then
11369: LD_EXP 23
11373: PUSH
11374: LD_VAR 0 2
11378: ARRAY
11379: IFFALSE 11520
// for j := 1 to 8 do
11381: LD_ADDR_VAR 0 3
11385: PUSH
11386: DOUBLE
11387: LD_INT 1
11389: DEC
11390: ST_TO_ADDR
11391: LD_INT 8
11393: PUSH
11394: FOR_TO
11395: IFFALSE 11518
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
11397: LD_EXP 20
11401: PUSH
11402: LD_VAR 0 3
11406: ARRAY
11407: PUSH
11408: LD_EXP 17
11412: PUSH
11413: LD_EXP 23
11417: PUSH
11418: LD_VAR 0 2
11422: ARRAY
11423: ARRAY
11424: PUSH
11425: LD_EXP 17
11429: PUSH
11430: LD_VAR 0 3
11434: ARRAY
11435: NONEQUAL
11436: PUSH
11437: LD_EXP 22
11441: NOT
11442: PUSH
11443: LD_EXP 23
11447: PUSH
11448: LD_VAR 0 2
11452: ARRAY
11453: PUSH
11454: LD_VAR 0 3
11458: NONEQUAL
11459: AND
11460: OR
11461: AND
11462: IFFALSE 11486
// HideArea ( j , BuildUpAreas [ i ] ) else
11464: LD_VAR 0 3
11468: PPUSH
11469: LD_EXP 55
11473: PUSH
11474: LD_VAR 0 2
11478: ARRAY
11479: PPUSH
11480: CALL_OW 333
11484: GO 11516
// if ( j = your_side ) then
11486: LD_VAR 0 3
11490: PUSH
11491: LD_OWVAR 2
11495: EQUAL
11496: IFFALSE 11516
// SetAreaMapShow ( BuildUpAreas [ i ] , 3 ) ;
11498: LD_EXP 55
11502: PUSH
11503: LD_VAR 0 2
11507: ARRAY
11508: PPUSH
11509: LD_INT 3
11511: PPUSH
11512: CALL_OW 424
11516: GO 11394
11518: POP
11519: POP
11520: GO 11366
11522: POP
11523: POP
// end ;
11524: LD_VAR 0 1
11528: RET
// export function EndBuildUp ; var i , j ; begin
11529: LD_INT 0
11531: PPUSH
11532: PPUSH
11533: PPUSH
// disable ( 600 ) ;
11534: LD_INT 600
11536: DISABLE_MARKED
// BuildUp = false ;
11537: LD_ADDR_EXP 56
11541: PUSH
11542: LD_INT 0
11544: ST_TO_ADDR
// for i := 1 to BuildUpAreas do
11545: LD_ADDR_VAR 0 2
11549: PUSH
11550: DOUBLE
11551: LD_INT 1
11553: DEC
11554: ST_TO_ADDR
11555: LD_EXP 55
11559: PUSH
11560: FOR_TO
11561: IFFALSE 11716
// if Position_Sides [ i ] then
11563: LD_EXP 23
11567: PUSH
11568: LD_VAR 0 2
11572: ARRAY
11573: IFFALSE 11714
// for j := 1 to 8 do
11575: LD_ADDR_VAR 0 3
11579: PUSH
11580: DOUBLE
11581: LD_INT 1
11583: DEC
11584: ST_TO_ADDR
11585: LD_INT 8
11587: PUSH
11588: FOR_TO
11589: IFFALSE 11712
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
11591: LD_EXP 20
11595: PUSH
11596: LD_VAR 0 3
11600: ARRAY
11601: PUSH
11602: LD_EXP 17
11606: PUSH
11607: LD_EXP 23
11611: PUSH
11612: LD_VAR 0 2
11616: ARRAY
11617: ARRAY
11618: PUSH
11619: LD_EXP 17
11623: PUSH
11624: LD_VAR 0 3
11628: ARRAY
11629: NONEQUAL
11630: PUSH
11631: LD_EXP 22
11635: NOT
11636: PUSH
11637: LD_EXP 23
11641: PUSH
11642: LD_VAR 0 2
11646: ARRAY
11647: PUSH
11648: LD_VAR 0 3
11652: NONEQUAL
11653: AND
11654: OR
11655: AND
11656: IFFALSE 11680
// ShowArea ( j , BuildUpAreas [ i ] ) else
11658: LD_VAR 0 3
11662: PPUSH
11663: LD_EXP 55
11667: PUSH
11668: LD_VAR 0 2
11672: ARRAY
11673: PPUSH
11674: CALL_OW 334
11678: GO 11710
// if ( j = your_side ) then
11680: LD_VAR 0 3
11684: PUSH
11685: LD_OWVAR 2
11689: EQUAL
11690: IFFALSE 11710
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
11692: LD_EXP 55
11696: PUSH
11697: LD_VAR 0 2
11701: ARRAY
11702: PPUSH
11703: LD_INT 0
11705: PPUSH
11706: CALL_OW 424
11710: GO 11588
11712: POP
11713: POP
11714: GO 11560
11716: POP
11717: POP
// end ;
11718: LD_VAR 0 1
11722: RET
// every 1 marked 600 do var i , un ;
11723: GO 11725
11725: DISABLE
11726: LD_INT 0
11728: PPUSH
11729: PPUSH
// begin for i := 1 to BuildUpAreas do
11730: LD_ADDR_VAR 0 1
11734: PUSH
11735: DOUBLE
11736: LD_INT 1
11738: DEC
11739: ST_TO_ADDR
11740: LD_EXP 55
11744: PUSH
11745: FOR_TO
11746: IFFALSE 11916
// if Position_Sides [ i ] then
11748: LD_EXP 23
11752: PUSH
11753: LD_VAR 0 1
11757: ARRAY
11758: IFFALSE 11914
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_not , [ f_side , 0 ] ] ] ) do
11760: LD_ADDR_VAR 0 2
11764: PUSH
11765: LD_EXP 55
11769: PUSH
11770: LD_VAR 0 1
11774: ARRAY
11775: PPUSH
11776: LD_INT 2
11778: PUSH
11779: LD_INT 21
11781: PUSH
11782: LD_INT 1
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: PUSH
11789: LD_INT 21
11791: PUSH
11792: LD_INT 2
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: PUSH
11799: EMPTY
11800: LIST
11801: LIST
11802: LIST
11803: PUSH
11804: LD_INT 3
11806: PUSH
11807: LD_INT 22
11809: PUSH
11810: LD_INT 0
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: PPUSH
11825: CALL_OW 70
11829: PUSH
11830: FOR_IN
11831: IFFALSE 11912
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ GetSide ( un ) ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> GetSide ( un ) ) ) then
11833: LD_EXP 17
11837: PUSH
11838: LD_EXP 23
11842: PUSH
11843: LD_VAR 0 1
11847: ARRAY
11848: ARRAY
11849: PUSH
11850: LD_EXP 17
11854: PUSH
11855: LD_VAR 0 2
11859: PPUSH
11860: CALL_OW 255
11864: ARRAY
11865: NONEQUAL
11866: PUSH
11867: LD_EXP 22
11871: NOT
11872: PUSH
11873: LD_EXP 23
11877: PUSH
11878: LD_VAR 0 1
11882: ARRAY
11883: PUSH
11884: LD_VAR 0 2
11888: PPUSH
11889: CALL_OW 255
11893: NONEQUAL
11894: AND
11895: OR
11896: IFFALSE 11910
// ComMoveToArea ( un , BuildUpEscape ) ;
11898: LD_VAR 0 2
11902: PPUSH
11903: LD_INT 12
11905: PPUSH
11906: CALL_OW 113
11910: GO 11830
11912: POP
11913: POP
11914: GO 11745
11916: POP
11917: POP
// if BuildUp then
11918: LD_EXP 56
11922: IFFALSE 11925
// enable ;
11924: ENABLE
// end ;
11925: PPOPN 2
11927: END
// every 1 do
11928: GO 11930
11930: DISABLE
// if ( def_builduptime > 0 ) then
11931: LD_EXP 51
11935: PUSH
11936: LD_INT 0
11938: GREATER
11939: IFFALSE 11960
// begin if buildUpTime_Delay then
11941: LD_EXP 16
11945: IFFALSE 11956
// wait ( buildUpTime_Delay ) ;
11947: LD_EXP 16
11951: PPUSH
11952: CALL_OW 67
// EndBuildUp ;
11956: CALL 11529 0 0
// end ; end_of_file
11960: END
// export function SetMpTechs ( ) ; var side , i ; begin
11961: LD_INT 0
11963: PPUSH
11964: PPUSH
11965: PPUSH
// for side = 1 to 8 do
11966: LD_ADDR_VAR 0 2
11970: PUSH
11971: DOUBLE
11972: LD_INT 1
11974: DEC
11975: ST_TO_ADDR
11976: LD_INT 8
11978: PUSH
11979: FOR_TO
11980: IFFALSE 12101
// begin for i = 1 to 72 do
11982: LD_ADDR_VAR 0 3
11986: PUSH
11987: DOUBLE
11988: LD_INT 1
11990: DEC
11991: ST_TO_ADDR
11992: LD_INT 72
11994: PUSH
11995: FOR_TO
11996: IFFALSE 12027
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
11998: LD_VAR 0 3
12002: PPUSH
12003: LD_VAR 0 2
12007: PPUSH
12008: LD_INT 0
12010: PPUSH
12011: LD_VAR 0 3
12015: PPUSH
12016: CALL_OW 565
12020: PPUSH
12021: CALL_OW 322
12025: GO 11995
12027: POP
12028: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
12029: LD_INT 73
12031: PPUSH
12032: LD_VAR 0 2
12036: PPUSH
12037: LD_INT 0
12039: PPUSH
12040: LD_INT 25
12042: PPUSH
12043: CALL_OW 565
12047: PPUSH
12048: CALL_OW 322
// for i = 0 to 40 do
12052: LD_ADDR_VAR 0 3
12056: PUSH
12057: DOUBLE
12058: LD_INT 0
12060: DEC
12061: ST_TO_ADDR
12062: LD_INT 40
12064: PUSH
12065: FOR_TO
12066: IFFALSE 12097
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
12068: LD_VAR 0 3
12072: PPUSH
12073: LD_VAR 0 2
12077: PPUSH
12078: LD_INT 1
12080: PPUSH
12081: LD_VAR 0 3
12085: PPUSH
12086: CALL_OW 565
12090: PPUSH
12091: CALL_OW 324
12095: GO 12065
12097: POP
12098: POP
// end ;
12099: GO 11979
12101: POP
12102: POP
// end ;
12103: LD_VAR 0 1
12107: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
12108: LD_INT 0
12110: PPUSH
12111: PPUSH
12112: PPUSH
// for side = 1 to 8 do
12113: LD_ADDR_VAR 0 3
12117: PUSH
12118: DOUBLE
12119: LD_INT 1
12121: DEC
12122: ST_TO_ADDR
12123: LD_INT 8
12125: PUSH
12126: FOR_TO
12127: IFFALSE 16123
// begin for i = 1 to 73 do
12129: LD_ADDR_VAR 0 4
12133: PUSH
12134: DOUBLE
12135: LD_INT 1
12137: DEC
12138: ST_TO_ADDR
12139: LD_INT 73
12141: PUSH
12142: FOR_TO
12143: IFFALSE 12164
// SetTech ( i , side , state_disabled ) ;
12145: LD_VAR 0 4
12149: PPUSH
12150: LD_VAR 0 3
12154: PPUSH
12155: LD_INT 0
12157: PPUSH
12158: CALL_OW 322
12162: GO 12142
12164: POP
12165: POP
// for i = 0 to 40 do
12166: LD_ADDR_VAR 0 4
12170: PUSH
12171: DOUBLE
12172: LD_INT 0
12174: DEC
12175: ST_TO_ADDR
12176: LD_INT 40
12178: PUSH
12179: FOR_TO
12180: IFFALSE 12201
// SetRestrict ( i , side , false ) ;
12182: LD_VAR 0 4
12186: PPUSH
12187: LD_VAR 0 3
12191: PPUSH
12192: LD_INT 0
12194: PPUSH
12195: CALL_OW 324
12199: GO 12179
12201: POP
12202: POP
// case level of 1 :
12203: LD_VAR 0 1
12207: PUSH
12208: LD_INT 1
12210: DOUBLE
12211: EQUAL
12212: IFTRUE 12216
12214: GO 12369
12216: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12217: LD_INT 35
12219: PPUSH
12220: LD_VAR 0 3
12224: PPUSH
12225: LD_INT 1
12227: PPUSH
12228: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12232: LD_INT 45
12234: PPUSH
12235: LD_VAR 0 3
12239: PPUSH
12240: LD_INT 1
12242: PPUSH
12243: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12247: LD_INT 46
12249: PPUSH
12250: LD_VAR 0 3
12254: PPUSH
12255: LD_INT 1
12257: PPUSH
12258: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12262: LD_INT 47
12264: PPUSH
12265: LD_VAR 0 3
12269: PPUSH
12270: LD_INT 1
12272: PPUSH
12273: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12277: LD_INT 0
12279: PPUSH
12280: LD_VAR 0 3
12284: PPUSH
12285: LD_INT 1
12287: PPUSH
12288: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12292: LD_INT 2
12294: PPUSH
12295: LD_VAR 0 3
12299: PPUSH
12300: LD_INT 1
12302: PPUSH
12303: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12307: LD_INT 4
12309: PPUSH
12310: LD_VAR 0 3
12314: PPUSH
12315: LD_INT 1
12317: PPUSH
12318: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12322: LD_INT 6
12324: PPUSH
12325: LD_VAR 0 3
12329: PPUSH
12330: LD_INT 1
12332: PPUSH
12333: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12337: LD_INT 29
12339: PPUSH
12340: LD_VAR 0 3
12344: PPUSH
12345: LD_INT 1
12347: PPUSH
12348: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12352: LD_INT 31
12354: PPUSH
12355: LD_VAR 0 3
12359: PPUSH
12360: LD_INT 1
12362: PPUSH
12363: CALL_OW 324
// end ; 2 :
12367: GO 16121
12369: LD_INT 2
12371: DOUBLE
12372: EQUAL
12373: IFTRUE 12377
12375: GO 12575
12377: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12378: LD_INT 35
12380: PPUSH
12381: LD_VAR 0 3
12385: PPUSH
12386: LD_INT 1
12388: PPUSH
12389: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12393: LD_INT 45
12395: PPUSH
12396: LD_VAR 0 3
12400: PPUSH
12401: LD_INT 1
12403: PPUSH
12404: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12408: LD_INT 46
12410: PPUSH
12411: LD_VAR 0 3
12415: PPUSH
12416: LD_INT 1
12418: PPUSH
12419: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12423: LD_INT 47
12425: PPUSH
12426: LD_VAR 0 3
12430: PPUSH
12431: LD_INT 1
12433: PPUSH
12434: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12438: LD_INT 1
12440: PPUSH
12441: LD_VAR 0 3
12445: PPUSH
12446: LD_INT 1
12448: PPUSH
12449: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12453: LD_INT 2
12455: PPUSH
12456: LD_VAR 0 3
12460: PPUSH
12461: LD_INT 1
12463: PPUSH
12464: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12468: LD_INT 11
12470: PPUSH
12471: LD_VAR 0 3
12475: PPUSH
12476: LD_INT 1
12478: PPUSH
12479: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12483: LD_INT 0
12485: PPUSH
12486: LD_VAR 0 3
12490: PPUSH
12491: LD_INT 1
12493: PPUSH
12494: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12498: LD_INT 2
12500: PPUSH
12501: LD_VAR 0 3
12505: PPUSH
12506: LD_INT 1
12508: PPUSH
12509: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12513: LD_INT 4
12515: PPUSH
12516: LD_VAR 0 3
12520: PPUSH
12521: LD_INT 1
12523: PPUSH
12524: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12528: LD_INT 6
12530: PPUSH
12531: LD_VAR 0 3
12535: PPUSH
12536: LD_INT 1
12538: PPUSH
12539: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12543: LD_INT 29
12545: PPUSH
12546: LD_VAR 0 3
12550: PPUSH
12551: LD_INT 1
12553: PPUSH
12554: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12558: LD_INT 31
12560: PPUSH
12561: LD_VAR 0 3
12565: PPUSH
12566: LD_INT 1
12568: PPUSH
12569: CALL_OW 324
// end ; 3 :
12573: GO 16121
12575: LD_INT 3
12577: DOUBLE
12578: EQUAL
12579: IFTRUE 12583
12581: GO 13036
12583: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12584: LD_INT 35
12586: PPUSH
12587: LD_VAR 0 3
12591: PPUSH
12592: LD_INT 1
12594: PPUSH
12595: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12599: LD_INT 45
12601: PPUSH
12602: LD_VAR 0 3
12606: PPUSH
12607: LD_INT 1
12609: PPUSH
12610: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12614: LD_INT 46
12616: PPUSH
12617: LD_VAR 0 3
12621: PPUSH
12622: LD_INT 1
12624: PPUSH
12625: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12629: LD_INT 47
12631: PPUSH
12632: LD_VAR 0 3
12636: PPUSH
12637: LD_INT 1
12639: PPUSH
12640: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12644: LD_INT 1
12646: PPUSH
12647: LD_VAR 0 3
12651: PPUSH
12652: LD_INT 1
12654: PPUSH
12655: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12659: LD_INT 2
12661: PPUSH
12662: LD_VAR 0 3
12666: PPUSH
12667: LD_INT 1
12669: PPUSH
12670: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12674: LD_INT 11
12676: PPUSH
12677: LD_VAR 0 3
12681: PPUSH
12682: LD_INT 1
12684: PPUSH
12685: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12689: LD_INT 48
12691: PPUSH
12692: LD_VAR 0 3
12696: PPUSH
12697: LD_INT 1
12699: PPUSH
12700: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12704: LD_INT 69
12706: PPUSH
12707: LD_VAR 0 3
12711: PPUSH
12712: LD_INT 1
12714: PPUSH
12715: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12719: LD_INT 39
12721: PPUSH
12722: LD_VAR 0 3
12726: PPUSH
12727: LD_INT 1
12729: PPUSH
12730: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12734: LD_INT 43
12736: PPUSH
12737: LD_VAR 0 3
12741: PPUSH
12742: LD_INT 1
12744: PPUSH
12745: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12749: LD_INT 51
12751: PPUSH
12752: LD_VAR 0 3
12756: PPUSH
12757: LD_INT 1
12759: PPUSH
12760: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12764: LD_INT 6
12766: PPUSH
12767: LD_VAR 0 3
12771: PPUSH
12772: LD_INT 1
12774: PPUSH
12775: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12779: LD_INT 0
12781: PPUSH
12782: LD_VAR 0 3
12786: PPUSH
12787: LD_INT 1
12789: PPUSH
12790: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12794: LD_INT 2
12796: PPUSH
12797: LD_VAR 0 3
12801: PPUSH
12802: LD_INT 1
12804: PPUSH
12805: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12809: LD_INT 3
12811: PPUSH
12812: LD_VAR 0 3
12816: PPUSH
12817: LD_INT 1
12819: PPUSH
12820: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12824: LD_INT 4
12826: PPUSH
12827: LD_VAR 0 3
12831: PPUSH
12832: LD_INT 1
12834: PPUSH
12835: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12839: LD_INT 6
12841: PPUSH
12842: LD_VAR 0 3
12846: PPUSH
12847: LD_INT 1
12849: PPUSH
12850: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12854: LD_INT 7
12856: PPUSH
12857: LD_VAR 0 3
12861: PPUSH
12862: LD_INT 1
12864: PPUSH
12865: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12869: LD_INT 8
12871: PPUSH
12872: LD_VAR 0 3
12876: PPUSH
12877: LD_INT 1
12879: PPUSH
12880: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12884: LD_INT 10
12886: PPUSH
12887: LD_VAR 0 3
12891: PPUSH
12892: LD_INT 1
12894: PPUSH
12895: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12899: LD_INT 15
12901: PPUSH
12902: LD_VAR 0 3
12906: PPUSH
12907: LD_INT 1
12909: PPUSH
12910: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12914: LD_INT 16
12916: PPUSH
12917: LD_VAR 0 3
12921: PPUSH
12922: LD_INT 1
12924: PPUSH
12925: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12929: LD_INT 17
12931: PPUSH
12932: LD_VAR 0 3
12936: PPUSH
12937: LD_INT 1
12939: PPUSH
12940: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12944: LD_INT 20
12946: PPUSH
12947: LD_VAR 0 3
12951: PPUSH
12952: LD_INT 1
12954: PPUSH
12955: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12959: LD_INT 26
12961: PPUSH
12962: LD_VAR 0 3
12966: PPUSH
12967: LD_INT 1
12969: PPUSH
12970: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12974: LD_INT 27
12976: PPUSH
12977: LD_VAR 0 3
12981: PPUSH
12982: LD_INT 1
12984: PPUSH
12985: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12989: LD_INT 29
12991: PPUSH
12992: LD_VAR 0 3
12996: PPUSH
12997: LD_INT 1
12999: PPUSH
13000: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13004: LD_INT 31
13006: PPUSH
13007: LD_VAR 0 3
13011: PPUSH
13012: LD_INT 1
13014: PPUSH
13015: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13019: LD_INT 32
13021: PPUSH
13022: LD_VAR 0 3
13026: PPUSH
13027: LD_INT 1
13029: PPUSH
13030: CALL_OW 324
// end ; 4 :
13034: GO 16121
13036: LD_INT 4
13038: DOUBLE
13039: EQUAL
13040: IFTRUE 13044
13042: GO 13992
13044: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13045: LD_INT 35
13047: PPUSH
13048: LD_VAR 0 3
13052: PPUSH
13053: LD_INT 1
13055: PPUSH
13056: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13060: LD_INT 45
13062: PPUSH
13063: LD_VAR 0 3
13067: PPUSH
13068: LD_INT 1
13070: PPUSH
13071: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13075: LD_INT 46
13077: PPUSH
13078: LD_VAR 0 3
13082: PPUSH
13083: LD_INT 1
13085: PPUSH
13086: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13090: LD_INT 47
13092: PPUSH
13093: LD_VAR 0 3
13097: PPUSH
13098: LD_INT 1
13100: PPUSH
13101: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13105: LD_INT 1
13107: PPUSH
13108: LD_VAR 0 3
13112: PPUSH
13113: LD_INT 1
13115: PPUSH
13116: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13120: LD_INT 2
13122: PPUSH
13123: LD_VAR 0 3
13127: PPUSH
13128: LD_INT 1
13130: PPUSH
13131: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13135: LD_INT 11
13137: PPUSH
13138: LD_VAR 0 3
13142: PPUSH
13143: LD_INT 1
13145: PPUSH
13146: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13150: LD_INT 20
13152: PPUSH
13153: LD_VAR 0 3
13157: PPUSH
13158: LD_INT 1
13160: PPUSH
13161: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13165: LD_INT 48
13167: PPUSH
13168: LD_VAR 0 3
13172: PPUSH
13173: LD_INT 1
13175: PPUSH
13176: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13180: LD_INT 49
13182: PPUSH
13183: LD_VAR 0 3
13187: PPUSH
13188: LD_INT 1
13190: PPUSH
13191: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13195: LD_INT 69
13197: PPUSH
13198: LD_VAR 0 3
13202: PPUSH
13203: LD_INT 1
13205: PPUSH
13206: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13210: LD_INT 39
13212: PPUSH
13213: LD_VAR 0 3
13217: PPUSH
13218: LD_INT 1
13220: PPUSH
13221: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13225: LD_INT 34
13227: PPUSH
13228: LD_VAR 0 3
13232: PPUSH
13233: LD_INT 1
13235: PPUSH
13236: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13240: LD_INT 42
13242: PPUSH
13243: LD_VAR 0 3
13247: PPUSH
13248: LD_INT 1
13250: PPUSH
13251: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13255: LD_INT 44
13257: PPUSH
13258: LD_VAR 0 3
13262: PPUSH
13263: LD_INT 1
13265: PPUSH
13266: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13270: LD_INT 41
13272: PPUSH
13273: LD_VAR 0 3
13277: PPUSH
13278: LD_INT 1
13280: PPUSH
13281: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13285: LD_INT 43
13287: PPUSH
13288: LD_VAR 0 3
13292: PPUSH
13293: LD_INT 1
13295: PPUSH
13296: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13300: LD_INT 70
13302: PPUSH
13303: LD_VAR 0 3
13307: PPUSH
13308: LD_INT 1
13310: PPUSH
13311: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13315: LD_INT 51
13317: PPUSH
13318: LD_VAR 0 3
13322: PPUSH
13323: LD_INT 1
13325: PPUSH
13326: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13330: LD_INT 52
13332: PPUSH
13333: LD_VAR 0 3
13337: PPUSH
13338: LD_INT 1
13340: PPUSH
13341: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13345: LD_INT 6
13347: PPUSH
13348: LD_VAR 0 3
13352: PPUSH
13353: LD_INT 1
13355: PPUSH
13356: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13360: LD_INT 15
13362: PPUSH
13363: LD_VAR 0 3
13367: PPUSH
13368: LD_INT 1
13370: PPUSH
13371: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13375: LD_INT 7
13377: PPUSH
13378: LD_VAR 0 3
13382: PPUSH
13383: LD_INT 1
13385: PPUSH
13386: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13390: LD_INT 12
13392: PPUSH
13393: LD_VAR 0 3
13397: PPUSH
13398: LD_INT 1
13400: PPUSH
13401: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13405: LD_INT 18
13407: PPUSH
13408: LD_VAR 0 3
13412: PPUSH
13413: LD_INT 1
13415: PPUSH
13416: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13420: LD_INT 60
13422: PPUSH
13423: LD_VAR 0 3
13427: PPUSH
13428: LD_INT 1
13430: PPUSH
13431: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13435: LD_INT 9
13437: PPUSH
13438: LD_VAR 0 3
13442: PPUSH
13443: LD_INT 1
13445: PPUSH
13446: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13450: LD_INT 30
13452: PPUSH
13453: LD_VAR 0 3
13457: PPUSH
13458: LD_INT 1
13460: PPUSH
13461: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13465: LD_INT 37
13467: PPUSH
13468: LD_VAR 0 3
13472: PPUSH
13473: LD_INT 1
13475: PPUSH
13476: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13480: LD_INT 5
13482: PPUSH
13483: LD_VAR 0 3
13487: PPUSH
13488: LD_INT 1
13490: PPUSH
13491: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13495: LD_INT 66
13497: PPUSH
13498: LD_VAR 0 3
13502: PPUSH
13503: LD_INT 1
13505: PPUSH
13506: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13510: LD_INT 21
13512: PPUSH
13513: LD_VAR 0 3
13517: PPUSH
13518: LD_INT 1
13520: PPUSH
13521: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13525: LD_INT 22
13527: PPUSH
13528: LD_VAR 0 3
13532: PPUSH
13533: LD_INT 1
13535: PPUSH
13536: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13540: LD_INT 54
13542: PPUSH
13543: LD_VAR 0 3
13547: PPUSH
13548: LD_INT 1
13550: PPUSH
13551: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13555: LD_INT 0
13557: PPUSH
13558: LD_VAR 0 3
13562: PPUSH
13563: LD_INT 1
13565: PPUSH
13566: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
13570: LD_INT 1
13572: PPUSH
13573: LD_VAR 0 3
13577: PPUSH
13578: LD_INT 1
13580: PPUSH
13581: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13585: LD_INT 2
13587: PPUSH
13588: LD_VAR 0 3
13592: PPUSH
13593: LD_INT 1
13595: PPUSH
13596: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
13600: LD_INT 3
13602: PPUSH
13603: LD_VAR 0 3
13607: PPUSH
13608: LD_INT 1
13610: PPUSH
13611: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13615: LD_INT 4
13617: PPUSH
13618: LD_VAR 0 3
13622: PPUSH
13623: LD_INT 1
13625: PPUSH
13626: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
13630: LD_INT 5
13632: PPUSH
13633: LD_VAR 0 3
13637: PPUSH
13638: LD_INT 1
13640: PPUSH
13641: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13645: LD_INT 6
13647: PPUSH
13648: LD_VAR 0 3
13652: PPUSH
13653: LD_INT 1
13655: PPUSH
13656: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13660: LD_INT 7
13662: PPUSH
13663: LD_VAR 0 3
13667: PPUSH
13668: LD_INT 1
13670: PPUSH
13671: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13675: LD_INT 8
13677: PPUSH
13678: LD_VAR 0 3
13682: PPUSH
13683: LD_INT 1
13685: PPUSH
13686: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13690: LD_INT 10
13692: PPUSH
13693: LD_VAR 0 3
13697: PPUSH
13698: LD_INT 1
13700: PPUSH
13701: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
13705: LD_INT 11
13707: PPUSH
13708: LD_VAR 0 3
13712: PPUSH
13713: LD_INT 1
13715: PPUSH
13716: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
13720: LD_INT 12
13722: PPUSH
13723: LD_VAR 0 3
13727: PPUSH
13728: LD_INT 1
13730: PPUSH
13731: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
13735: LD_INT 13
13737: PPUSH
13738: LD_VAR 0 3
13742: PPUSH
13743: LD_INT 1
13745: PPUSH
13746: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
13750: LD_INT 14
13752: PPUSH
13753: LD_VAR 0 3
13757: PPUSH
13758: LD_INT 1
13760: PPUSH
13761: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13765: LD_INT 15
13767: PPUSH
13768: LD_VAR 0 3
13772: PPUSH
13773: LD_INT 1
13775: PPUSH
13776: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13780: LD_INT 16
13782: PPUSH
13783: LD_VAR 0 3
13787: PPUSH
13788: LD_INT 1
13790: PPUSH
13791: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13795: LD_INT 17
13797: PPUSH
13798: LD_VAR 0 3
13802: PPUSH
13803: LD_INT 1
13805: PPUSH
13806: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
13810: LD_INT 19
13812: PPUSH
13813: LD_VAR 0 3
13817: PPUSH
13818: LD_INT 1
13820: PPUSH
13821: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13825: LD_INT 20
13827: PPUSH
13828: LD_VAR 0 3
13832: PPUSH
13833: LD_INT 1
13835: PPUSH
13836: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
13840: LD_INT 21
13842: PPUSH
13843: LD_VAR 0 3
13847: PPUSH
13848: LD_INT 1
13850: PPUSH
13851: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
13855: LD_INT 23
13857: PPUSH
13858: LD_VAR 0 3
13862: PPUSH
13863: LD_INT 1
13865: PPUSH
13866: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13870: LD_INT 26
13872: PPUSH
13873: LD_VAR 0 3
13877: PPUSH
13878: LD_INT 1
13880: PPUSH
13881: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13885: LD_INT 27
13887: PPUSH
13888: LD_VAR 0 3
13892: PPUSH
13893: LD_INT 1
13895: PPUSH
13896: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
13900: LD_INT 28
13902: PPUSH
13903: LD_VAR 0 3
13907: PPUSH
13908: LD_INT 1
13910: PPUSH
13911: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13915: LD_INT 29
13917: PPUSH
13918: LD_VAR 0 3
13922: PPUSH
13923: LD_INT 1
13925: PPUSH
13926: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
13930: LD_INT 30
13932: PPUSH
13933: LD_VAR 0 3
13937: PPUSH
13938: LD_INT 1
13940: PPUSH
13941: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13945: LD_INT 31
13947: PPUSH
13948: LD_VAR 0 3
13952: PPUSH
13953: LD_INT 1
13955: PPUSH
13956: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13960: LD_INT 32
13962: PPUSH
13963: LD_VAR 0 3
13967: PPUSH
13968: LD_INT 1
13970: PPUSH
13971: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
13975: LD_INT 36
13977: PPUSH
13978: LD_VAR 0 3
13982: PPUSH
13983: LD_INT 1
13985: PPUSH
13986: CALL_OW 324
// end ; 5 :
13990: GO 16121
13992: LD_INT 5
13994: DOUBLE
13995: EQUAL
13996: IFTRUE 14000
13998: GO 15113
14000: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14001: LD_INT 35
14003: PPUSH
14004: LD_VAR 0 3
14008: PPUSH
14009: LD_INT 1
14011: PPUSH
14012: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14016: LD_INT 45
14018: PPUSH
14019: LD_VAR 0 3
14023: PPUSH
14024: LD_INT 1
14026: PPUSH
14027: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14031: LD_INT 46
14033: PPUSH
14034: LD_VAR 0 3
14038: PPUSH
14039: LD_INT 1
14041: PPUSH
14042: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14046: LD_INT 47
14048: PPUSH
14049: LD_VAR 0 3
14053: PPUSH
14054: LD_INT 1
14056: PPUSH
14057: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14061: LD_INT 1
14063: PPUSH
14064: LD_VAR 0 3
14068: PPUSH
14069: LD_INT 1
14071: PPUSH
14072: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14076: LD_INT 2
14078: PPUSH
14079: LD_VAR 0 3
14083: PPUSH
14084: LD_INT 1
14086: PPUSH
14087: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14091: LD_INT 11
14093: PPUSH
14094: LD_VAR 0 3
14098: PPUSH
14099: LD_INT 1
14101: PPUSH
14102: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
14106: LD_INT 20
14108: PPUSH
14109: LD_VAR 0 3
14113: PPUSH
14114: LD_INT 1
14116: PPUSH
14117: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14121: LD_INT 48
14123: PPUSH
14124: LD_VAR 0 3
14128: PPUSH
14129: LD_INT 1
14131: PPUSH
14132: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
14136: LD_INT 49
14138: PPUSH
14139: LD_VAR 0 3
14143: PPUSH
14144: LD_INT 1
14146: PPUSH
14147: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14151: LD_INT 69
14153: PPUSH
14154: LD_VAR 0 3
14158: PPUSH
14159: LD_INT 1
14161: PPUSH
14162: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14166: LD_INT 39
14168: PPUSH
14169: LD_VAR 0 3
14173: PPUSH
14174: LD_INT 1
14176: PPUSH
14177: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
14181: LD_INT 34
14183: PPUSH
14184: LD_VAR 0 3
14188: PPUSH
14189: LD_INT 1
14191: PPUSH
14192: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
14196: LD_INT 42
14198: PPUSH
14199: LD_VAR 0 3
14203: PPUSH
14204: LD_INT 1
14206: PPUSH
14207: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
14211: LD_INT 44
14213: PPUSH
14214: LD_VAR 0 3
14218: PPUSH
14219: LD_INT 1
14221: PPUSH
14222: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
14226: LD_INT 41
14228: PPUSH
14229: LD_VAR 0 3
14233: PPUSH
14234: LD_INT 1
14236: PPUSH
14237: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
14241: LD_INT 40
14243: PPUSH
14244: LD_VAR 0 3
14248: PPUSH
14249: LD_INT 1
14251: PPUSH
14252: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14256: LD_INT 43
14258: PPUSH
14259: LD_VAR 0 3
14263: PPUSH
14264: LD_INT 1
14266: PPUSH
14267: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
14271: LD_INT 70
14273: PPUSH
14274: LD_VAR 0 3
14278: PPUSH
14279: LD_INT 1
14281: PPUSH
14282: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14286: LD_INT 51
14288: PPUSH
14289: LD_VAR 0 3
14293: PPUSH
14294: LD_INT 1
14296: PPUSH
14297: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
14301: LD_INT 52
14303: PPUSH
14304: LD_VAR 0 3
14308: PPUSH
14309: LD_INT 1
14311: PPUSH
14312: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14316: LD_INT 6
14318: PPUSH
14319: LD_VAR 0 3
14323: PPUSH
14324: LD_INT 1
14326: PPUSH
14327: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
14331: LD_INT 15
14333: PPUSH
14334: LD_VAR 0 3
14338: PPUSH
14339: LD_INT 1
14341: PPUSH
14342: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
14346: LD_INT 7
14348: PPUSH
14349: LD_VAR 0 3
14353: PPUSH
14354: LD_INT 1
14356: PPUSH
14357: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
14361: LD_INT 12
14363: PPUSH
14364: LD_VAR 0 3
14368: PPUSH
14369: LD_INT 1
14371: PPUSH
14372: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
14376: LD_INT 17
14378: PPUSH
14379: LD_VAR 0 3
14383: PPUSH
14384: LD_INT 1
14386: PPUSH
14387: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
14391: LD_INT 18
14393: PPUSH
14394: LD_VAR 0 3
14398: PPUSH
14399: LD_INT 1
14401: PPUSH
14402: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
14406: LD_INT 60
14408: PPUSH
14409: LD_VAR 0 3
14413: PPUSH
14414: LD_INT 1
14416: PPUSH
14417: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
14421: LD_INT 32
14423: PPUSH
14424: LD_VAR 0 3
14428: PPUSH
14429: LD_INT 1
14431: PPUSH
14432: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
14436: LD_INT 9
14438: PPUSH
14439: LD_VAR 0 3
14443: PPUSH
14444: LD_INT 1
14446: PPUSH
14447: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
14451: LD_INT 57
14453: PPUSH
14454: LD_VAR 0 3
14458: PPUSH
14459: LD_INT 1
14461: PPUSH
14462: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
14466: LD_INT 30
14468: PPUSH
14469: LD_VAR 0 3
14473: PPUSH
14474: LD_INT 1
14476: PPUSH
14477: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
14481: LD_INT 37
14483: PPUSH
14484: LD_VAR 0 3
14488: PPUSH
14489: LD_INT 1
14491: PPUSH
14492: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
14496: LD_INT 63
14498: PPUSH
14499: LD_VAR 0 3
14503: PPUSH
14504: LD_INT 1
14506: PPUSH
14507: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
14511: LD_INT 3
14513: PPUSH
14514: LD_VAR 0 3
14518: PPUSH
14519: LD_INT 1
14521: PPUSH
14522: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
14526: LD_INT 4
14528: PPUSH
14529: LD_VAR 0 3
14533: PPUSH
14534: LD_INT 1
14536: PPUSH
14537: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14541: LD_INT 5
14543: PPUSH
14544: LD_VAR 0 3
14548: PPUSH
14549: LD_INT 1
14551: PPUSH
14552: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14556: LD_INT 66
14558: PPUSH
14559: LD_VAR 0 3
14563: PPUSH
14564: LD_INT 1
14566: PPUSH
14567: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14571: LD_INT 21
14573: PPUSH
14574: LD_VAR 0 3
14578: PPUSH
14579: LD_INT 1
14581: PPUSH
14582: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14586: LD_INT 22
14588: PPUSH
14589: LD_VAR 0 3
14593: PPUSH
14594: LD_INT 1
14596: PPUSH
14597: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
14601: LD_INT 19
14603: PPUSH
14604: LD_VAR 0 3
14608: PPUSH
14609: LD_INT 1
14611: PPUSH
14612: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
14616: LD_INT 54
14618: PPUSH
14619: LD_VAR 0 3
14623: PPUSH
14624: LD_INT 1
14626: PPUSH
14627: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
14631: LD_INT 55
14633: PPUSH
14634: LD_VAR 0 3
14638: PPUSH
14639: LD_INT 1
14641: PPUSH
14642: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14646: LD_INT 0
14648: PPUSH
14649: LD_VAR 0 3
14653: PPUSH
14654: LD_INT 1
14656: PPUSH
14657: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
14661: LD_INT 1
14663: PPUSH
14664: LD_VAR 0 3
14668: PPUSH
14669: LD_INT 1
14671: PPUSH
14672: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14676: LD_INT 2
14678: PPUSH
14679: LD_VAR 0 3
14683: PPUSH
14684: LD_INT 1
14686: PPUSH
14687: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
14691: LD_INT 3
14693: PPUSH
14694: LD_VAR 0 3
14698: PPUSH
14699: LD_INT 1
14701: PPUSH
14702: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14706: LD_INT 4
14708: PPUSH
14709: LD_VAR 0 3
14713: PPUSH
14714: LD_INT 1
14716: PPUSH
14717: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
14721: LD_INT 5
14723: PPUSH
14724: LD_VAR 0 3
14728: PPUSH
14729: LD_INT 1
14731: PPUSH
14732: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14736: LD_INT 6
14738: PPUSH
14739: LD_VAR 0 3
14743: PPUSH
14744: LD_INT 1
14746: PPUSH
14747: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
14751: LD_INT 7
14753: PPUSH
14754: LD_VAR 0 3
14758: PPUSH
14759: LD_INT 1
14761: PPUSH
14762: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
14766: LD_INT 8
14768: PPUSH
14769: LD_VAR 0 3
14773: PPUSH
14774: LD_INT 1
14776: PPUSH
14777: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
14781: LD_INT 10
14783: PPUSH
14784: LD_VAR 0 3
14788: PPUSH
14789: LD_INT 1
14791: PPUSH
14792: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
14796: LD_INT 11
14798: PPUSH
14799: LD_VAR 0 3
14803: PPUSH
14804: LD_INT 1
14806: PPUSH
14807: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
14811: LD_INT 12
14813: PPUSH
14814: LD_VAR 0 3
14818: PPUSH
14819: LD_INT 1
14821: PPUSH
14822: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
14826: LD_INT 13
14828: PPUSH
14829: LD_VAR 0 3
14833: PPUSH
14834: LD_INT 1
14836: PPUSH
14837: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
14841: LD_INT 14
14843: PPUSH
14844: LD_VAR 0 3
14848: PPUSH
14849: LD_INT 1
14851: PPUSH
14852: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
14856: LD_INT 15
14858: PPUSH
14859: LD_VAR 0 3
14863: PPUSH
14864: LD_INT 1
14866: PPUSH
14867: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
14871: LD_INT 16
14873: PPUSH
14874: LD_VAR 0 3
14878: PPUSH
14879: LD_INT 1
14881: PPUSH
14882: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
14886: LD_INT 17
14888: PPUSH
14889: LD_VAR 0 3
14893: PPUSH
14894: LD_INT 1
14896: PPUSH
14897: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
14901: LD_INT 18
14903: PPUSH
14904: LD_VAR 0 3
14908: PPUSH
14909: LD_INT 1
14911: PPUSH
14912: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
14916: LD_INT 19
14918: PPUSH
14919: LD_VAR 0 3
14923: PPUSH
14924: LD_INT 1
14926: PPUSH
14927: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
14931: LD_INT 20
14933: PPUSH
14934: LD_VAR 0 3
14938: PPUSH
14939: LD_INT 1
14941: PPUSH
14942: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
14946: LD_INT 21
14948: PPUSH
14949: LD_VAR 0 3
14953: PPUSH
14954: LD_INT 1
14956: PPUSH
14957: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
14961: LD_INT 23
14963: PPUSH
14964: LD_VAR 0 3
14968: PPUSH
14969: LD_INT 1
14971: PPUSH
14972: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
14976: LD_INT 26
14978: PPUSH
14979: LD_VAR 0 3
14983: PPUSH
14984: LD_INT 1
14986: PPUSH
14987: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
14991: LD_INT 27
14993: PPUSH
14994: LD_VAR 0 3
14998: PPUSH
14999: LD_INT 1
15001: PPUSH
15002: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
15006: LD_INT 28
15008: PPUSH
15009: LD_VAR 0 3
15013: PPUSH
15014: LD_INT 1
15016: PPUSH
15017: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15021: LD_INT 29
15023: PPUSH
15024: LD_VAR 0 3
15028: PPUSH
15029: LD_INT 1
15031: PPUSH
15032: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
15036: LD_INT 30
15038: PPUSH
15039: LD_VAR 0 3
15043: PPUSH
15044: LD_INT 1
15046: PPUSH
15047: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15051: LD_INT 31
15053: PPUSH
15054: LD_VAR 0 3
15058: PPUSH
15059: LD_INT 1
15061: PPUSH
15062: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15066: LD_INT 32
15068: PPUSH
15069: LD_VAR 0 3
15073: PPUSH
15074: LD_INT 1
15076: PPUSH
15077: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
15081: LD_INT 33
15083: PPUSH
15084: LD_VAR 0 3
15088: PPUSH
15089: LD_INT 1
15091: PPUSH
15092: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
15096: LD_INT 36
15098: PPUSH
15099: LD_VAR 0 3
15103: PPUSH
15104: LD_INT 1
15106: PPUSH
15107: CALL_OW 324
// end ; 6 :
15111: GO 16121
15113: LD_INT 6
15115: DOUBLE
15116: EQUAL
15117: IFTRUE 15121
15119: GO 16046
15121: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15122: LD_INT 35
15124: PPUSH
15125: LD_VAR 0 3
15129: PPUSH
15130: LD_INT 1
15132: PPUSH
15133: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15137: LD_INT 45
15139: PPUSH
15140: LD_VAR 0 3
15144: PPUSH
15145: LD_INT 1
15147: PPUSH
15148: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15152: LD_INT 46
15154: PPUSH
15155: LD_VAR 0 3
15159: PPUSH
15160: LD_INT 1
15162: PPUSH
15163: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15167: LD_INT 47
15169: PPUSH
15170: LD_VAR 0 3
15174: PPUSH
15175: LD_INT 1
15177: PPUSH
15178: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15182: LD_INT 1
15184: PPUSH
15185: LD_VAR 0 3
15189: PPUSH
15190: LD_INT 1
15192: PPUSH
15193: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15197: LD_INT 2
15199: PPUSH
15200: LD_VAR 0 3
15204: PPUSH
15205: LD_INT 1
15207: PPUSH
15208: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15212: LD_INT 11
15214: PPUSH
15215: LD_VAR 0 3
15219: PPUSH
15220: LD_INT 1
15222: PPUSH
15223: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15227: LD_INT 20
15229: PPUSH
15230: LD_VAR 0 3
15234: PPUSH
15235: LD_INT 1
15237: PPUSH
15238: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15242: LD_INT 48
15244: PPUSH
15245: LD_VAR 0 3
15249: PPUSH
15250: LD_INT 1
15252: PPUSH
15253: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15257: LD_INT 49
15259: PPUSH
15260: LD_VAR 0 3
15264: PPUSH
15265: LD_INT 1
15267: PPUSH
15268: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
15272: LD_INT 50
15274: PPUSH
15275: LD_VAR 0 3
15279: PPUSH
15280: LD_INT 1
15282: PPUSH
15283: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15287: LD_INT 69
15289: PPUSH
15290: LD_VAR 0 3
15294: PPUSH
15295: LD_INT 1
15297: PPUSH
15298: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15302: LD_INT 39
15304: PPUSH
15305: LD_VAR 0 3
15309: PPUSH
15310: LD_INT 1
15312: PPUSH
15313: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15317: LD_INT 34
15319: PPUSH
15320: LD_VAR 0 3
15324: PPUSH
15325: LD_INT 1
15327: PPUSH
15328: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15332: LD_INT 42
15334: PPUSH
15335: LD_VAR 0 3
15339: PPUSH
15340: LD_INT 1
15342: PPUSH
15343: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15347: LD_INT 44
15349: PPUSH
15350: LD_VAR 0 3
15354: PPUSH
15355: LD_INT 1
15357: PPUSH
15358: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15362: LD_INT 41
15364: PPUSH
15365: LD_VAR 0 3
15369: PPUSH
15370: LD_INT 1
15372: PPUSH
15373: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
15377: LD_INT 13
15379: PPUSH
15380: LD_VAR 0 3
15384: PPUSH
15385: LD_INT 1
15387: PPUSH
15388: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
15392: LD_INT 40
15394: PPUSH
15395: LD_VAR 0 3
15399: PPUSH
15400: LD_INT 1
15402: PPUSH
15403: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15407: LD_INT 43
15409: PPUSH
15410: LD_VAR 0 3
15414: PPUSH
15415: LD_INT 1
15417: PPUSH
15418: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15422: LD_INT 70
15424: PPUSH
15425: LD_VAR 0 3
15429: PPUSH
15430: LD_INT 1
15432: PPUSH
15433: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
15437: LD_INT 23
15439: PPUSH
15440: LD_VAR 0 3
15444: PPUSH
15445: LD_INT 1
15447: PPUSH
15448: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15452: LD_INT 51
15454: PPUSH
15455: LD_VAR 0 3
15459: PPUSH
15460: LD_INT 1
15462: PPUSH
15463: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15467: LD_INT 52
15469: PPUSH
15470: LD_VAR 0 3
15474: PPUSH
15475: LD_INT 1
15477: PPUSH
15478: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15482: LD_INT 6
15484: PPUSH
15485: LD_VAR 0 3
15489: PPUSH
15490: LD_INT 1
15492: PPUSH
15493: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
15497: LD_INT 15
15499: PPUSH
15500: LD_VAR 0 3
15504: PPUSH
15505: LD_INT 1
15507: PPUSH
15508: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
15512: LD_INT 7
15514: PPUSH
15515: LD_VAR 0 3
15519: PPUSH
15520: LD_INT 1
15522: PPUSH
15523: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
15527: LD_INT 12
15529: PPUSH
15530: LD_VAR 0 3
15534: PPUSH
15535: LD_INT 1
15537: PPUSH
15538: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
15542: LD_INT 10
15544: PPUSH
15545: LD_VAR 0 3
15549: PPUSH
15550: LD_INT 1
15552: PPUSH
15553: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
15557: LD_INT 17
15559: PPUSH
15560: LD_VAR 0 3
15564: PPUSH
15565: LD_INT 1
15567: PPUSH
15568: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
15572: LD_INT 18
15574: PPUSH
15575: LD_VAR 0 3
15579: PPUSH
15580: LD_INT 1
15582: PPUSH
15583: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
15587: LD_INT 60
15589: PPUSH
15590: LD_VAR 0 3
15594: PPUSH
15595: LD_INT 1
15597: PPUSH
15598: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
15602: LD_INT 61
15604: PPUSH
15605: LD_VAR 0 3
15609: PPUSH
15610: LD_INT 1
15612: PPUSH
15613: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
15617: LD_INT 32
15619: PPUSH
15620: LD_VAR 0 3
15624: PPUSH
15625: LD_INT 1
15627: PPUSH
15628: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
15632: LD_INT 27
15634: PPUSH
15635: LD_VAR 0 3
15639: PPUSH
15640: LD_INT 1
15642: PPUSH
15643: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
15647: LD_INT 36
15649: PPUSH
15650: LD_VAR 0 3
15654: PPUSH
15655: LD_INT 1
15657: PPUSH
15658: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
15662: LD_INT 33
15664: PPUSH
15665: LD_VAR 0 3
15669: PPUSH
15670: LD_INT 1
15672: PPUSH
15673: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
15677: LD_INT 9
15679: PPUSH
15680: LD_VAR 0 3
15684: PPUSH
15685: LD_INT 1
15687: PPUSH
15688: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
15692: LD_INT 38
15694: PPUSH
15695: LD_VAR 0 3
15699: PPUSH
15700: LD_INT 1
15702: PPUSH
15703: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
15707: LD_INT 57
15709: PPUSH
15710: LD_VAR 0 3
15714: PPUSH
15715: LD_INT 1
15717: PPUSH
15718: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
15722: LD_INT 58
15724: PPUSH
15725: LD_VAR 0 3
15729: PPUSH
15730: LD_INT 1
15732: PPUSH
15733: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
15737: LD_INT 28
15739: PPUSH
15740: LD_VAR 0 3
15744: PPUSH
15745: LD_INT 1
15747: PPUSH
15748: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
15752: LD_INT 29
15754: PPUSH
15755: LD_VAR 0 3
15759: PPUSH
15760: LD_INT 1
15762: PPUSH
15763: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
15767: LD_INT 30
15769: PPUSH
15770: LD_VAR 0 3
15774: PPUSH
15775: LD_INT 1
15777: PPUSH
15778: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
15782: LD_INT 37
15784: PPUSH
15785: LD_VAR 0 3
15789: PPUSH
15790: LD_INT 1
15792: PPUSH
15793: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
15797: LD_INT 63
15799: PPUSH
15800: LD_VAR 0 3
15804: PPUSH
15805: LD_INT 1
15807: PPUSH
15808: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
15812: LD_INT 64
15814: PPUSH
15815: LD_VAR 0 3
15819: PPUSH
15820: LD_INT 1
15822: PPUSH
15823: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
15827: LD_INT 3
15829: PPUSH
15830: LD_VAR 0 3
15834: PPUSH
15835: LD_INT 1
15837: PPUSH
15838: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
15842: LD_INT 4
15844: PPUSH
15845: LD_VAR 0 3
15849: PPUSH
15850: LD_INT 1
15852: PPUSH
15853: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
15857: LD_INT 5
15859: PPUSH
15860: LD_VAR 0 3
15864: PPUSH
15865: LD_INT 1
15867: PPUSH
15868: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
15872: LD_INT 8
15874: PPUSH
15875: LD_VAR 0 3
15879: PPUSH
15880: LD_INT 1
15882: PPUSH
15883: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
15887: LD_INT 66
15889: PPUSH
15890: LD_VAR 0 3
15894: PPUSH
15895: LD_INT 1
15897: PPUSH
15898: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
15902: LD_INT 67
15904: PPUSH
15905: LD_VAR 0 3
15909: PPUSH
15910: LD_INT 1
15912: PPUSH
15913: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
15917: LD_INT 21
15919: PPUSH
15920: LD_VAR 0 3
15924: PPUSH
15925: LD_INT 1
15927: PPUSH
15928: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
15932: LD_INT 22
15934: PPUSH
15935: LD_VAR 0 3
15939: PPUSH
15940: LD_INT 1
15942: PPUSH
15943: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
15947: LD_INT 19
15949: PPUSH
15950: LD_VAR 0 3
15954: PPUSH
15955: LD_INT 1
15957: PPUSH
15958: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
15962: LD_INT 26
15964: PPUSH
15965: LD_VAR 0 3
15969: PPUSH
15970: LD_INT 1
15972: PPUSH
15973: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
15977: LD_INT 54
15979: PPUSH
15980: LD_VAR 0 3
15984: PPUSH
15985: LD_INT 1
15987: PPUSH
15988: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
15992: LD_INT 55
15994: PPUSH
15995: LD_VAR 0 3
15999: PPUSH
16000: LD_INT 1
16002: PPUSH
16003: CALL_OW 322
// for i = 0 to 39 do
16007: LD_ADDR_VAR 0 4
16011: PUSH
16012: DOUBLE
16013: LD_INT 0
16015: DEC
16016: ST_TO_ADDR
16017: LD_INT 39
16019: PUSH
16020: FOR_TO
16021: IFFALSE 16042
// SetRestrict ( i , side , true ) ;
16023: LD_VAR 0 4
16027: PPUSH
16028: LD_VAR 0 3
16032: PPUSH
16033: LD_INT 1
16035: PPUSH
16036: CALL_OW 324
16040: GO 16020
16042: POP
16043: POP
// end ; else
16044: GO 16121
16046: POP
// begin for i = 1 to 73 do
16047: LD_ADDR_VAR 0 4
16051: PUSH
16052: DOUBLE
16053: LD_INT 1
16055: DEC
16056: ST_TO_ADDR
16057: LD_INT 73
16059: PUSH
16060: FOR_TO
16061: IFFALSE 16082
// SetTech ( i , side , state_enabled ) ;
16063: LD_VAR 0 4
16067: PPUSH
16068: LD_VAR 0 3
16072: PPUSH
16073: LD_INT 1
16075: PPUSH
16076: CALL_OW 322
16080: GO 16060
16082: POP
16083: POP
// for i = 0 to 39 do
16084: LD_ADDR_VAR 0 4
16088: PUSH
16089: DOUBLE
16090: LD_INT 0
16092: DEC
16093: ST_TO_ADDR
16094: LD_INT 39
16096: PUSH
16097: FOR_TO
16098: IFFALSE 16119
// SetRestrict ( i , side , true ) ;
16100: LD_VAR 0 4
16104: PPUSH
16105: LD_VAR 0 3
16109: PPUSH
16110: LD_INT 1
16112: PPUSH
16113: CALL_OW 324
16117: GO 16097
16119: POP
16120: POP
// end ; end ; end ;
16121: GO 12126
16123: POP
16124: POP
// end ; end_of_file
16125: LD_VAR 0 2
16129: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
16130: LD_INT 0
16132: PPUSH
16133: PPUSH
// enable ( 98 ) ;
16134: LD_INT 98
16136: ENABLE_MARKED
// GameEnded = false ;
16137: LD_ADDR_LOC 29
16141: PUSH
16142: LD_INT 0
16144: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
16145: LD_ADDR_LOC 28
16149: PUSH
16150: LD_INT 0
16152: PUSH
16153: LD_INT 0
16155: PUSH
16156: LD_INT 0
16158: PUSH
16159: LD_INT 0
16161: PUSH
16162: LD_INT 0
16164: PUSH
16165: LD_INT 0
16167: PUSH
16168: LD_INT 0
16170: PUSH
16171: LD_INT 0
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: ST_TO_ADDR
// unfoged = false ;
16184: LD_ADDR_LOC 30
16188: PUSH
16189: LD_INT 0
16191: ST_TO_ADDR
// for i = 1 to side_positions do
16192: LD_ADDR_VAR 0 2
16196: PUSH
16197: DOUBLE
16198: LD_INT 1
16200: DEC
16201: ST_TO_ADDR
16202: LD_EXP 20
16206: PUSH
16207: FOR_TO
16208: IFFALSE 16248
// if not side_positions [ i ] then
16210: LD_EXP 20
16214: PUSH
16215: LD_VAR 0 2
16219: ARRAY
16220: NOT
16221: IFFALSE 16246
// defaited = replace ( defaited , i , true ) ;
16223: LD_ADDR_LOC 28
16227: PUSH
16228: LD_LOC 28
16232: PPUSH
16233: LD_VAR 0 2
16237: PPUSH
16238: LD_INT 1
16240: PPUSH
16241: CALL_OW 1
16245: ST_TO_ADDR
16246: GO 16207
16248: POP
16249: POP
// end ;
16250: LD_VAR 0 1
16254: RET
// function CanWinLoose ; begin
16255: LD_INT 0
16257: PPUSH
// Result := true ;
16258: LD_ADDR_VAR 0 1
16262: PUSH
16263: LD_INT 1
16265: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
16266: CALL_OW 518
16270: PUSH
16271: CALL_OW 519
16275: PUSH
16276: LD_INT 0
16278: GREATER
16279: AND
16280: IFFALSE 16290
// Result := false ;
16282: LD_ADDR_VAR 0 1
16286: PUSH
16287: LD_INT 0
16289: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
16290: CALL_OW 531
16294: PUSH
16295: CALL_OW 519
16299: PUSH
16300: LD_INT 1
16302: GREATER
16303: AND
16304: IFFALSE 16314
// Result := false ;
16306: LD_ADDR_VAR 0 1
16310: PUSH
16311: LD_INT 0
16313: ST_TO_ADDR
// end ;
16314: LD_VAR 0 1
16318: RET
// export function HasPower ( i ) ; var k , h ; begin
16319: LD_INT 0
16321: PPUSH
16322: PPUSH
16323: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
16324: LD_VAR 0 1
16328: PPUSH
16329: CALL_OW 108
16333: NOT
16334: PUSH
16335: LD_EXP 19
16339: PUSH
16340: LD_VAR 0 1
16344: ARRAY
16345: NOT
16346: AND
16347: PUSH
16348: LD_OWVAR 4
16352: AND
16353: IFFALSE 16365
// begin result = false ;
16355: LD_ADDR_VAR 0 2
16359: PUSH
16360: LD_INT 0
16362: ST_TO_ADDR
// end else
16363: GO 16660
// case def_win_rules of 0 :
16365: LD_EXP 15
16369: PUSH
16370: LD_INT 0
16372: DOUBLE
16373: EQUAL
16374: IFTRUE 16378
16376: GO 16541
16378: POP
// if def_people_respawning then
16379: LD_EXP 48
16383: IFFALSE 16474
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
16385: LD_ADDR_VAR 0 2
16389: PUSH
16390: LD_INT 22
16392: PUSH
16393: LD_VAR 0 1
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: PUSH
16402: LD_INT 2
16404: PUSH
16405: LD_INT 21
16407: PUSH
16408: LD_INT 1
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PUSH
16415: LD_INT 33
16417: PUSH
16418: LD_INT 3
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PUSH
16425: LD_INT 33
16427: PUSH
16428: LD_INT 5
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PUSH
16435: LD_INT 30
16437: PUSH
16438: LD_INT 0
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: LD_INT 30
16447: PUSH
16448: LD_INT 1
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: PPUSH
16467: CALL_OW 69
16471: ST_TO_ADDR
16472: GO 16539
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
16474: LD_ADDR_VAR 0 2
16478: PUSH
16479: LD_INT 22
16481: PUSH
16482: LD_VAR 0 1
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PUSH
16491: LD_INT 2
16493: PUSH
16494: LD_INT 21
16496: PUSH
16497: LD_INT 1
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: PUSH
16504: LD_INT 33
16506: PUSH
16507: LD_INT 3
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: PUSH
16514: LD_INT 33
16516: PUSH
16517: LD_INT 5
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: PUSH
16524: EMPTY
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: PPUSH
16534: CALL_OW 69
16538: ST_TO_ADDR
16539: GO 16660
16541: LD_INT 1
16543: DOUBLE
16544: EQUAL
16545: IFTRUE 16549
16547: GO 16588
16549: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
16550: LD_ADDR_VAR 0 2
16554: PUSH
16555: LD_INT 22
16557: PUSH
16558: LD_VAR 0 1
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PUSH
16567: LD_INT 21
16569: PUSH
16570: LD_INT 1
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PPUSH
16581: CALL_OW 69
16585: ST_TO_ADDR
16586: GO 16660
16588: LD_INT 2
16590: DOUBLE
16591: EQUAL
16592: IFTRUE 16596
16594: GO 16659
16596: POP
// begin h = false ;
16597: LD_ADDR_VAR 0 4
16601: PUSH
16602: LD_INT 0
16604: ST_TO_ADDR
// for k in heroes [ i ] do
16605: LD_ADDR_VAR 0 3
16609: PUSH
16610: LD_EXP 28
16614: PUSH
16615: LD_VAR 0 1
16619: ARRAY
16620: PUSH
16621: FOR_IN
16622: IFFALSE 16645
// if IsLive ( k ) then
16624: LD_VAR 0 3
16628: PPUSH
16629: CALL_OW 300
16633: IFFALSE 16643
// h = true ;
16635: LD_ADDR_VAR 0 4
16639: PUSH
16640: LD_INT 1
16642: ST_TO_ADDR
16643: GO 16621
16645: POP
16646: POP
// Result := h ;
16647: LD_ADDR_VAR 0 2
16651: PUSH
16652: LD_VAR 0 4
16656: ST_TO_ADDR
// end ; end ;
16657: GO 16660
16659: POP
// end ;
16660: LD_VAR 0 2
16664: RET
// function AlliedSides ( i , j ) ; begin
16665: LD_INT 0
16667: PPUSH
// Result := false ;
16668: LD_ADDR_VAR 0 3
16672: PUSH
16673: LD_INT 0
16675: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
16676: LD_VAR 0 1
16680: PPUSH
16681: LD_VAR 0 2
16685: PPUSH
16686: CALL_OW 81
16690: PUSH
16691: LD_INT 1
16693: EQUAL
16694: PUSH
16695: LD_VAR 0 2
16699: PPUSH
16700: LD_VAR 0 1
16704: PPUSH
16705: CALL_OW 81
16709: PUSH
16710: LD_INT 1
16712: EQUAL
16713: AND
16714: PUSH
16715: LD_VAR 0 1
16719: PPUSH
16720: CALL_OW 83
16724: AND
16725: PUSH
16726: LD_VAR 0 2
16730: PPUSH
16731: CALL_OW 83
16735: AND
16736: IFFALSE 16746
// Result := true ;
16738: LD_ADDR_VAR 0 3
16742: PUSH
16743: LD_INT 1
16745: ST_TO_ADDR
// end ;
16746: LD_VAR 0 3
16750: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
16751: CALL 16255 0 0
16755: PUSH
16756: LD_LOC 29
16760: NOT
16761: AND
16762: IFFALSE 16778
16764: GO 16766
16766: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
16767: LD_ADDR_EXP 54
16771: PUSH
16772: LD_STRING #Player-Ended
16774: PUSH
16775: EMPTY
16776: LIST
16777: ST_TO_ADDR
16778: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
16779: CALL 16255 0 0
16783: PUSH
16784: LD_LOC 29
16788: AND
16789: IFFALSE 16798
16791: GO 16793
16793: DISABLE
// YouLostInMultiplayer ;
16794: CALL_OW 107
16798: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
16799: CALL 16255 0 0
16803: NOT
16804: PUSH
16805: CALL_OW 531
16809: NOT
16810: AND
16811: IFFALSE 16827
16813: GO 16815
16815: DISABLE
// WaitServerStrings = [ #server-wait ] ;
16816: LD_ADDR_EXP 54
16820: PUSH
16821: LD_STRING #server-wait
16823: PUSH
16824: EMPTY
16825: LIST
16826: ST_TO_ADDR
16827: END
// every 100 trigger IAmSpec do
16828: CALL_OW 531
16832: IFFALSE 16848
16834: GO 16836
16836: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
16837: LD_ADDR_EXP 54
16841: PUSH
16842: LD_STRING #Player-IAmSpec
16844: PUSH
16845: EMPTY
16846: LIST
16847: ST_TO_ADDR
16848: END
// every 100 trigger GameEnded and IAmSpec do
16849: LD_LOC 29
16853: PUSH
16854: CALL_OW 531
16858: AND
16859: IFFALSE 16868
16861: GO 16863
16863: DISABLE
// YouLostInMultiplayer ;
16864: CALL_OW 107
16868: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
16869: CALL 16255 0 0
16873: PUSH
16874: LD_LOC 29
16878: NOT
16879: AND
16880: IFFALSE 16896
16882: GO 16884
16884: DISABLE
// WaitServerStrings = [ $player-win ] ;
16885: LD_ADDR_EXP 54
16889: PUSH
16890: LD_STRING $player-win
16892: PUSH
16893: EMPTY
16894: LIST
16895: ST_TO_ADDR
16896: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
16897: CALL 16255 0 0
16901: PUSH
16902: LD_LOC 29
16906: AND
16907: IFFALSE 16931
16909: GO 16911
16911: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
16912: LD_EXP 21
16916: PUSH
16917: LD_OWVAR 2
16921: ARRAY
16922: PPUSH
16923: CALL 11138 0 1
// YouWinInMultiplayer ;
16927: CALL_OW 106
// end ;
16931: END
// every 100 trigger isEditor marked 401 do
16932: LD_OWVAR 84
16936: IFFALSE 16952
16938: GO 16940
16940: DISABLE
// Debug_Strings = [ You won ] ;
16941: LD_ADDR_OWVAR 48
16945: PUSH
16946: LD_STRING You won
16948: PUSH
16949: EMPTY
16950: LIST
16951: ST_TO_ADDR
16952: END
// every 100 trigger isEditor marked 400 do
16953: LD_OWVAR 84
16957: IFFALSE 16973
16959: GO 16961
16961: DISABLE
// Debug_Strings = [ You loss ] ;
16962: LD_ADDR_OWVAR 48
16966: PUSH
16967: LD_STRING You loss
16969: PUSH
16970: EMPTY
16971: LIST
16972: ST_TO_ADDR
16973: END
// every 100 marked 98 do var i , un ;
16974: GO 16976
16976: DISABLE
16977: LD_INT 0
16979: PPUSH
16980: PPUSH
// begin for i = 1 to side_positions do
16981: LD_ADDR_VAR 0 1
16985: PUSH
16986: DOUBLE
16987: LD_INT 1
16989: DEC
16990: ST_TO_ADDR
16991: LD_EXP 20
16995: PUSH
16996: FOR_TO
16997: IFFALSE 17120
// if side_positions [ i ] then
16999: LD_EXP 20
17003: PUSH
17004: LD_VAR 0 1
17008: ARRAY
17009: IFFALSE 17118
// if not HasPower ( i ) and not Defaited [ i ] then
17011: LD_VAR 0 1
17015: PPUSH
17016: CALL 16319 0 1
17020: NOT
17021: PUSH
17022: LD_LOC 28
17026: PUSH
17027: LD_VAR 0 1
17031: ARRAY
17032: NOT
17033: AND
17034: IFFALSE 17118
// begin un = filterallunits ( [ f_side , i ] ) ;
17036: LD_ADDR_VAR 0 2
17040: PUSH
17041: LD_INT 22
17043: PUSH
17044: LD_VAR 0 1
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PPUSH
17053: CALL_OW 69
17057: ST_TO_ADDR
// if un then
17058: LD_VAR 0 2
17062: IFFALSE 17076
// SetSide ( un , 0 ) ;
17064: LD_VAR 0 2
17068: PPUSH
17069: LD_INT 0
17071: PPUSH
17072: CALL_OW 235
// Defaited = replace ( Defaited , i , true ) ;
17076: LD_ADDR_LOC 28
17080: PUSH
17081: LD_LOC 28
17085: PPUSH
17086: LD_VAR 0 1
17090: PPUSH
17091: LD_INT 1
17093: PPUSH
17094: CALL_OW 1
17098: ST_TO_ADDR
// if i = your_side then
17099: LD_VAR 0 1
17103: PUSH
17104: LD_OWVAR 2
17108: EQUAL
17109: IFFALSE 17118
// begin Multiplayer_Loose_Message ;
17111: CALL_OW 521
// enable ( 400 ) ;
17115: LD_INT 400
17117: ENABLE_MARKED
// end ; end ;
17118: GO 16996
17120: POP
17121: POP
// if not Unfoged and defaited [ your_side ] then
17122: LD_LOC 30
17126: NOT
17127: PUSH
17128: LD_LOC 28
17132: PUSH
17133: LD_OWVAR 2
17137: ARRAY
17138: AND
17139: IFFALSE 17145
// Unfog ;
17141: CALL 17331 0 0
// DidGameEnd ;
17145: CALL 17160 0 0
// if not GameEnded then
17149: LD_LOC 29
17153: NOT
17154: IFFALSE 17157
// enable ;
17156: ENABLE
// end ;
17157: PPOPN 2
17159: END
// function DidGameEnd ; var i , k , enemy ; begin
17160: LD_INT 0
17162: PPUSH
17163: PPUSH
17164: PPUSH
17165: PPUSH
// enemy = [ ] ;
17166: LD_ADDR_VAR 0 4
17170: PUSH
17171: EMPTY
17172: ST_TO_ADDR
// for i = 1 to side_positions do
17173: LD_ADDR_VAR 0 2
17177: PUSH
17178: DOUBLE
17179: LD_INT 1
17181: DEC
17182: ST_TO_ADDR
17183: LD_EXP 20
17187: PUSH
17188: FOR_TO
17189: IFFALSE 17293
// if not defaited [ i ] then
17191: LD_LOC 28
17195: PUSH
17196: LD_VAR 0 2
17200: ARRAY
17201: NOT
17202: IFFALSE 17291
// for k = 1 to side_positions do
17204: LD_ADDR_VAR 0 3
17208: PUSH
17209: DOUBLE
17210: LD_INT 1
17212: DEC
17213: ST_TO_ADDR
17214: LD_EXP 20
17218: PUSH
17219: FOR_TO
17220: IFFALSE 17289
// if not defaited [ k ] then
17222: LD_LOC 28
17226: PUSH
17227: LD_VAR 0 3
17231: ARRAY
17232: NOT
17233: IFFALSE 17287
// if GetAttitude ( i , k ) in [ att_enemy , att_neutral ] then
17235: LD_VAR 0 2
17239: PPUSH
17240: LD_VAR 0 3
17244: PPUSH
17245: CALL_OW 81
17249: PUSH
17250: LD_INT 2
17252: PUSH
17253: LD_INT 0
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: IN
17260: IFFALSE 17287
// enemy = enemy ^ [ i , k ] ;
17262: LD_ADDR_VAR 0 4
17266: PUSH
17267: LD_VAR 0 4
17271: PUSH
17272: LD_VAR 0 2
17276: PUSH
17277: LD_VAR 0 3
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: ADD
17286: ST_TO_ADDR
17287: GO 17219
17289: POP
17290: POP
17291: GO 17188
17293: POP
17294: POP
// if not enemy then
17295: LD_VAR 0 4
17299: NOT
17300: IFFALSE 17326
// begin GameEnded = true ;
17302: LD_ADDR_LOC 29
17306: PUSH
17307: LD_INT 1
17309: ST_TO_ADDR
// if not defaited [ your_side ] then
17310: LD_LOC 28
17314: PUSH
17315: LD_OWVAR 2
17319: ARRAY
17320: NOT
17321: IFFALSE 17326
// enable ( 401 ) ;
17323: LD_INT 401
17325: ENABLE_MARKED
// end ; end ;
17326: LD_VAR 0 1
17330: RET
// function unfog ; var k , friends ; begin
17331: LD_INT 0
17333: PPUSH
17334: PPUSH
17335: PPUSH
// for k = 1 to side_positions do
17336: LD_ADDR_VAR 0 2
17340: PUSH
17341: DOUBLE
17342: LD_INT 1
17344: DEC
17345: ST_TO_ADDR
17346: LD_EXP 20
17350: PUSH
17351: FOR_TO
17352: IFFALSE 17408
// if not defaited [ k ] then
17354: LD_LOC 28
17358: PUSH
17359: LD_VAR 0 2
17363: ARRAY
17364: NOT
17365: IFFALSE 17406
// if GetAttitude ( your_side , k ) in [ att_friend ] then
17367: LD_OWVAR 2
17371: PPUSH
17372: LD_VAR 0 2
17376: PPUSH
17377: CALL_OW 81
17381: PUSH
17382: LD_INT 1
17384: PUSH
17385: EMPTY
17386: LIST
17387: IN
17388: IFFALSE 17406
// friends = friends ^ k ;
17390: LD_ADDR_VAR 0 3
17394: PUSH
17395: LD_VAR 0 3
17399: PUSH
17400: LD_VAR 0 2
17404: ADD
17405: ST_TO_ADDR
17406: GO 17351
17408: POP
17409: POP
// if not friends then
17410: LD_VAR 0 3
17414: NOT
17415: IFFALSE 17432
// begin fogoff ( true ) ;
17417: LD_INT 1
17419: PPUSH
17420: CALL_OW 344
// unfoged = true ;
17424: LD_ADDR_LOC 30
17428: PUSH
17429: LD_INT 1
17431: ST_TO_ADDR
// end ; end ;
17432: LD_VAR 0 1
17436: RET
// export function MakeGameEnd ; begin
17437: LD_INT 0
17439: PPUSH
// fogoff ( true ) ;
17440: LD_INT 1
17442: PPUSH
17443: CALL_OW 344
// unfoged = true ;
17447: LD_ADDR_LOC 30
17451: PUSH
17452: LD_INT 1
17454: ST_TO_ADDR
// wait ( 0 0$5 ) ;
17455: LD_INT 175
17457: PPUSH
17458: CALL_OW 67
// GameEnded = true ;
17462: LD_ADDR_LOC 29
17466: PUSH
17467: LD_INT 1
17469: ST_TO_ADDR
// end ;
17470: LD_VAR 0 1
17474: RET
// export function GetGameEnded ; begin
17475: LD_INT 0
17477: PPUSH
// result = GameEnded ;
17478: LD_ADDR_VAR 0 1
17482: PUSH
17483: LD_LOC 29
17487: ST_TO_ADDR
// end ;
17488: LD_VAR 0 1
17492: RET
