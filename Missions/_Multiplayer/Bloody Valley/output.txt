// export def_tree_function ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , respawning_time_min , respawning_time_max , siberite_bomb_Delay , amount_of_apemen , tree_function , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , battle_flags_id ; export normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 141
// begin Your_Side := mp_player_side ;
  79: LD_ADDR_OWVAR 2
  83: PUSH
  84: LD_OWVAR 7
  88: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  89: LD_ADDR_EXP 19
  93: PUSH
  94: LD_OWVAR 17
  98: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  99: LD_ADDR_EXP 16
 103: PUSH
 104: LD_OWVAR 15
 108: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 109: LD_ADDR_EXP 20
 113: PUSH
 114: LD_OWVAR 16
 118: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 119: LD_ADDR_EXP 18
 123: PUSH
 124: CALL 0 0 0
 128: ST_TO_ADDR
// Teams := mp_teams ;
 129: LD_ADDR_EXP 17
 133: PUSH
 134: LD_OWVAR 12
 138: ST_TO_ADDR
// end else
 139: GO 334
// begin Your_Side := 1 ;
 141: LD_ADDR_OWVAR 2
 145: PUSH
 146: LD_INT 1
 148: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 149: LD_ADDR_EXP 19
 153: PUSH
 154: LD_INT 1
 156: PUSH
 157: LD_INT 2
 159: PUSH
 160: LD_INT 3
 162: PUSH
 163: LD_INT 4
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 188: LD_ADDR_EXP 16
 192: PUSH
 193: LD_INT 1
 195: PUSH
 196: LD_INT 1
 198: PUSH
 199: LD_INT 2
 201: PUSH
 202: LD_INT 2
 204: PUSH
 205: LD_INT 0
 207: PUSH
 208: LD_INT 0
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 0 , 0 , 0 , 0 ] ;
 227: LD_ADDR_EXP 20
 231: PUSH
 232: LD_INT 1
 234: PUSH
 235: LD_INT 2
 237: PUSH
 238: LD_INT 3
 240: PUSH
 241: LD_INT 1
 243: PUSH
 244: LD_INT 0
 246: PUSH
 247: LD_INT 0
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 0
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: LIST
 264: LIST
 265: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 266: LD_ADDR_EXP 18
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: LD_INT 0
 279: PUSH
 280: LD_INT 0
 282: PUSH
 283: LD_INT 0
 285: PUSH
 286: LD_INT 0
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: LIST
 299: LIST
 300: LIST
 301: LIST
 302: LIST
 303: LIST
 304: ST_TO_ADDR
// Teams := [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 305: LD_ADDR_EXP 17
 309: PUSH
 310: LD_INT 1
 312: PUSH
 313: LD_INT 2
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: LD_INT 3
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 334: LD_ADDR_EXP 21
 338: PUSH
 339: LD_EXP 16
 343: PUSH
 344: LD_INT 0
 346: PUSH
 347: EMPTY
 348: LIST
 349: DIFF
 350: PUSH
 351: LD_INT 1
 353: GREATER
 354: ST_TO_ADDR
// if Multiplayer then
 355: LD_OWVAR 4
 359: IFFALSE 566
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 361: LD_ADDR_EXP 39
 365: PUSH
 366: LD_INT 0
 368: PPUSH
 369: CALL_OW 426
 373: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 374: LD_ADDR_EXP 40
 378: PUSH
 379: LD_INT 1
 381: PPUSH
 382: CALL_OW 426
 386: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 387: LD_ADDR_EXP 41
 391: PUSH
 392: LD_INT 2
 394: PPUSH
 395: CALL_OW 426
 399: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 400: LD_ADDR_EXP 42
 404: PUSH
 405: LD_INT 3
 407: PPUSH
 408: CALL_OW 426
 412: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 413: LD_ADDR_EXP 43
 417: PUSH
 418: LD_INT 4
 420: PPUSH
 421: CALL_OW 426
 425: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 426: LD_ADDR_EXP 44
 430: PUSH
 431: LD_INT 5
 433: PPUSH
 434: CALL_OW 426
 438: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 439: LD_ADDR_EXP 46
 443: PUSH
 444: LD_INT 10
 446: PPUSH
 447: CALL_OW 426
 451: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 452: LD_ADDR_EXP 47
 456: PUSH
 457: LD_INT 11
 459: PPUSH
 460: CALL_OW 426
 464: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 465: LD_ADDR_EXP 48
 469: PUSH
 470: LD_INT 12
 472: PPUSH
 473: CALL_OW 426
 477: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 13 ) ;
 478: LD_ADDR_EXP 50
 482: PUSH
 483: LD_INT 13
 485: PPUSH
 486: CALL_OW 426
 490: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 14 ) ;
 491: LD_ADDR_EXP 49
 495: PUSH
 496: LD_INT 14
 498: PPUSH
 499: CALL_OW 426
 503: ST_TO_ADDR
// def_tree_function := GetMultiplayerSetting ( 15 ) ;
 504: LD_ADDR_EXP 1
 508: PUSH
 509: LD_INT 15
 511: PPUSH
 512: CALL_OW 426
 516: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 517: LD_ADDR_EXP 51
 521: PUSH
 522: LD_INT 17
 524: PPUSH
 525: CALL_OW 426
 529: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 530: LD_ADDR_EXP 52
 534: PUSH
 535: LD_INT 20
 537: PPUSH
 538: CALL_OW 426
 542: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 543: LD_ADDR_VAR 0 3
 547: PUSH
 548: LD_INT 22
 550: PPUSH
 551: CALL_OW 426
 555: ST_TO_ADDR
// def_win_rules = 0 ;
 556: LD_ADDR_EXP 15
 560: PUSH
 561: LD_INT 0
 563: ST_TO_ADDR
// end else
 564: GO 698
// begin Randomize ;
 566: CALL_OW 10
// def_base_level := 2 ;
 570: LD_ADDR_EXP 39
 574: PUSH
 575: LD_INT 2
 577: ST_TO_ADDR
// def_amount_of_people := 1 ;
 578: LD_ADDR_EXP 40
 582: PUSH
 583: LD_INT 1
 585: ST_TO_ADDR
// def_skill_level := 1 ;
 586: LD_ADDR_EXP 41
 590: PUSH
 591: LD_INT 1
 593: ST_TO_ADDR
// def_starting_resources := 2 ;
 594: LD_ADDR_EXP 42
 598: PUSH
 599: LD_INT 2
 601: ST_TO_ADDR
// def_shipments_density := 50 ;
 602: LD_ADDR_EXP 43
 606: PUSH
 607: LD_INT 50
 609: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 610: LD_ADDR_EXP 44
 614: PUSH
 615: LD_INT 0
 617: ST_TO_ADDR
// def_shared_vision := 1 ;
 618: LD_ADDR_EXP 46
 622: PUSH
 623: LD_INT 1
 625: ST_TO_ADDR
// def_morale_flags := 1 ;
 626: LD_ADDR_EXP 47
 630: PUSH
 631: LD_INT 1
 633: ST_TO_ADDR
// def_siberite_detection := 1 ;
 634: LD_ADDR_EXP 48
 638: PUSH
 639: LD_INT 1
 641: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 642: LD_ADDR_EXP 50
 646: PUSH
 647: LD_INT 3
 649: ST_TO_ADDR
// def_people_respawning := 2 ;
 650: LD_ADDR_EXP 49
 654: PUSH
 655: LD_INT 2
 657: ST_TO_ADDR
// def_tree_function := 7 ;
 658: LD_ADDR_EXP 1
 662: PUSH
 663: LD_INT 7
 665: ST_TO_ADDR
// def_siberite_bomb := 2 ;
 666: LD_ADDR_EXP 51
 670: PUSH
 671: LD_INT 2
 673: ST_TO_ADDR
// def_builduptime := 1 ;
 674: LD_ADDR_EXP 52
 678: PUSH
 679: LD_INT 1
 681: ST_TO_ADDR
// tech_level = 4 ;
 682: LD_ADDR_VAR 0 3
 686: PUSH
 687: LD_INT 4
 689: ST_TO_ADDR
// def_win_rules = 0 ;
 690: LD_ADDR_EXP 15
 694: PUSH
 695: LD_INT 0
 697: ST_TO_ADDR
// end ; if def_tree_function = 7 then
 698: LD_EXP 1
 702: PUSH
 703: LD_INT 7
 705: EQUAL
 706: IFFALSE 724
// def_tree_function := Rand ( 1 , 5 ) ;
 708: LD_ADDR_EXP 1
 712: PUSH
 713: LD_INT 1
 715: PPUSH
 716: LD_INT 5
 718: PPUSH
 719: CALL_OW 12
 723: ST_TO_ADDR
// InitGameRules ;
 724: CALL 8041 0 0
// if def_game_rules = 0 then
 728: LD_EXP 38
 732: PUSH
 733: LD_INT 0
 735: EQUAL
 736: IFFALSE 763
// begin if isSGUI then
 738: LD_OWVAR 83
 742: IFFALSE 750
// setMpTechs ( ) else
 744: CALL 12156 0 0
 748: GO 763
// begin SetMpTechLevel ( tech_level + 1 ) ;
 750: LD_VAR 0 3
 754: PUSH
 755: LD_INT 1
 757: PLUS
 758: PPUSH
 759: CALL 12303 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 763: LD_ADDR_EXP 2
 767: PUSH
 768: LD_INT 0
 770: PUSH
 771: LD_INT 1
 773: PUSH
 774: LD_INT 1
 776: PUSH
 777: LD_INT 1
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: LIST
 784: LIST
 785: PUSH
 786: LD_EXP 39
 790: PUSH
 791: LD_INT 1
 793: PLUS
 794: ARRAY
 795: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 , 3 ] [ def_base_level + 1 ] ;
 796: LD_ADDR_EXP 3
 800: PUSH
 801: LD_INT 0
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: LD_INT 2
 809: PUSH
 810: LD_INT 3
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: LIST
 817: LIST
 818: PUSH
 819: LD_EXP 39
 823: PUSH
 824: LD_INT 1
 826: PLUS
 827: ARRAY
 828: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 829: LD_ADDR_EXP 5
 833: PUSH
 834: LD_INT 2
 836: PUSH
 837: LD_INT 3
 839: PUSH
 840: LD_INT 4
 842: PUSH
 843: LD_INT 5
 845: PUSH
 846: EMPTY
 847: LIST
 848: LIST
 849: LIST
 850: LIST
 851: PUSH
 852: LD_EXP 41
 856: PUSH
 857: LD_INT 1
 859: PLUS
 860: ARRAY
 861: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 862: LD_ADDR_EXP 7
 866: PUSH
 867: LD_INT 0
 869: PUSH
 870: LD_INT 0
 872: PUSH
 873: LD_INT 0
 875: PUSH
 876: EMPTY
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_INT 30
 883: PUSH
 884: LD_INT 0
 886: PUSH
 887: LD_INT 0
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: LIST
 894: PUSH
 895: LD_INT 50
 897: PUSH
 898: LD_INT 20
 900: PUSH
 901: LD_INT 0
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: LIST
 908: PUSH
 909: LD_INT 80
 911: PUSH
 912: LD_INT 40
 914: PUSH
 915: LD_INT 20
 917: PUSH
 918: EMPTY
 919: LIST
 920: LIST
 921: LIST
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: LIST
 928: PUSH
 929: LD_EXP 42
 933: PUSH
 934: LD_INT 1
 936: PLUS
 937: ARRAY
 938: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 939: LD_ADDR_EXP 6
 943: PUSH
 944: LD_INT 10
 946: PUSH
 947: EMPTY
 948: LIST
 949: PUSH
 950: LD_INT 7
 952: PUSH
 953: LD_INT 14
 955: PUSH
 956: EMPTY
 957: LIST
 958: LIST
 959: PUSH
 960: LD_INT 6
 962: PUSH
 963: LD_INT 12
 965: PUSH
 966: LD_INT 18
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: LIST
 973: PUSH
 974: LD_INT 5
 976: PUSH
 977: LD_INT 10
 979: PUSH
 980: LD_INT 15
 982: PUSH
 983: LD_INT 20
 985: PUSH
 986: EMPTY
 987: LIST
 988: LIST
 989: LIST
 990: LIST
 991: PUSH
 992: EMPTY
 993: LIST
 994: LIST
 995: LIST
 996: LIST
 997: PUSH
 998: LD_EXP 42
1002: PUSH
1003: LD_INT 1
1005: PLUS
1006: ARRAY
1007: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1008: LD_ADDR_EXP 4
1012: PUSH
1013: LD_EXP 40
1017: PUSH
1018: LD_INT 4
1020: PLUS
1021: ST_TO_ADDR
// shipments_density := 150 - ( def_shipments_density + 1 ) ;
1022: LD_ADDR_EXP 8
1026: PUSH
1027: LD_INT 150
1029: PUSH
1030: LD_EXP 43
1034: PUSH
1035: LD_INT 1
1037: PLUS
1038: MINUS
1039: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1040: LD_ADDR_EXP 13
1044: PUSH
1045: LD_INT 0
1047: PUSH
1048: LD_INT 1
1050: PUSH
1051: LD_INT 2
1053: PUSH
1054: LD_INT 3
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: LIST
1061: LIST
1062: PUSH
1063: LD_EXP 50
1067: PUSH
1068: LD_INT 1
1070: PLUS
1071: ARRAY
1072: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1073: LD_ADDR_EXP 10
1077: PUSH
1078: LD_INT 0
1080: PUSH
1081: LD_INT 8400
1083: PUSH
1084: LD_INT 1750
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: LD_EXP 49
1096: PUSH
1097: LD_INT 1
1099: PLUS
1100: ARRAY
1101: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1102: LD_ADDR_EXP 11
1106: PUSH
1107: LD_INT 0
1109: PUSH
1110: LD_INT 21000
1112: PUSH
1113: LD_INT 4200
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: LIST
1120: PUSH
1121: LD_EXP 49
1125: PUSH
1126: LD_INT 1
1128: PLUS
1129: ARRAY
1130: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1131: LD_ADDR_EXP 9
1135: PUSH
1136: LD_INT 1
1138: NEG
1139: PUSH
1140: LD_INT 350
1142: PUSH
1143: LD_INT 700
1145: PUSH
1146: LD_INT 1400
1148: PUSH
1149: LD_INT 0
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: PUSH
1159: LD_EXP 47
1163: PUSH
1164: LD_INT 1
1166: PLUS
1167: ARRAY
1168: ST_TO_ADDR
// battle_flags_id := [ ] ;
1169: LD_ADDR_EXP 25
1173: PUSH
1174: EMPTY
1175: ST_TO_ADDR
// tree_function := [ [ 0 , 0 , 0 , 0 , 0 ] , [ 2 , 0 , 0 , 0 , 0 ] , [ 0 , 4 , 0 , 0 , 0 ] , [ 0 , 0 , 2 , 0 , 0 ] , [ 0 , 0 , 0 , 3 , 0 ] , [ 1 , 2 , 1 , 2 , 2 ] , [ 0 , 0 , 0 , 0 , 3 ] ] [ def_tree_function + 1 ] ;
1176: LD_ADDR_EXP 14
1180: PUSH
1181: LD_INT 0
1183: PUSH
1184: LD_INT 0
1186: PUSH
1187: LD_INT 0
1189: PUSH
1190: LD_INT 0
1192: PUSH
1193: LD_INT 0
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: LIST
1201: LIST
1202: PUSH
1203: LD_INT 2
1205: PUSH
1206: LD_INT 0
1208: PUSH
1209: LD_INT 0
1211: PUSH
1212: LD_INT 0
1214: PUSH
1215: LD_INT 0
1217: PUSH
1218: EMPTY
1219: LIST
1220: LIST
1221: LIST
1222: LIST
1223: LIST
1224: PUSH
1225: LD_INT 0
1227: PUSH
1228: LD_INT 4
1230: PUSH
1231: LD_INT 0
1233: PUSH
1234: LD_INT 0
1236: PUSH
1237: LD_INT 0
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: PUSH
1247: LD_INT 0
1249: PUSH
1250: LD_INT 0
1252: PUSH
1253: LD_INT 2
1255: PUSH
1256: LD_INT 0
1258: PUSH
1259: LD_INT 0
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: PUSH
1269: LD_INT 0
1271: PUSH
1272: LD_INT 0
1274: PUSH
1275: LD_INT 0
1277: PUSH
1278: LD_INT 3
1280: PUSH
1281: LD_INT 0
1283: PUSH
1284: EMPTY
1285: LIST
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: PUSH
1291: LD_INT 1
1293: PUSH
1294: LD_INT 2
1296: PUSH
1297: LD_INT 1
1299: PUSH
1300: LD_INT 2
1302: PUSH
1303: LD_INT 2
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: PUSH
1313: LD_INT 0
1315: PUSH
1316: LD_INT 0
1318: PUSH
1319: LD_INT 0
1321: PUSH
1322: LD_INT 0
1324: PUSH
1325: LD_INT 3
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: LIST
1341: LIST
1342: LIST
1343: PUSH
1344: LD_EXP 1
1348: PUSH
1349: LD_INT 1
1351: PLUS
1352: ARRAY
1353: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1354: LD_EXP 51
1358: PUSH
1359: LD_INT 0
1361: EQUAL
1362: IFFALSE 1374
// siberite_bomb_Delay = 0 else
1364: LD_ADDR_EXP 12
1368: PUSH
1369: LD_INT 0
1371: ST_TO_ADDR
1372: GO 1396
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1374: LD_ADDR_EXP 12
1378: PUSH
1379: LD_EXP 51
1383: PUSH
1384: LD_INT 1
1386: MINUS
1387: PUSH
1388: LD_INT 21000
1390: MUL
1391: PUSH
1392: LD_INT 1
1394: PLUS
1395: ST_TO_ADDR
// end ;
1396: LD_VAR 0 1
1400: RET
// function prepare_map_coordinates ; var side , dep , br1 , br2 , br3 , un , i , j ; begin
1401: LD_INT 0
1403: PPUSH
1404: PPUSH
1405: PPUSH
1406: PPUSH
1407: PPUSH
1408: PPUSH
1409: PPUSH
1410: PPUSH
1411: PPUSH
// depot_def = [ ] ;
1412: LD_ADDR_EXP 22
1416: PUSH
1417: EMPTY
1418: ST_TO_ADDR
// breastworks_def = [ ] ;
1419: LD_ADDR_EXP 23
1423: PUSH
1424: EMPTY
1425: ST_TO_ADDR
// for side := 1 to 4 do
1426: LD_ADDR_VAR 0 2
1430: PUSH
1431: DOUBLE
1432: LD_INT 1
1434: DEC
1435: ST_TO_ADDR
1436: LD_INT 4
1438: PUSH
1439: FOR_TO
1440: IFFALSE 1795
// begin dep := side * 4 - 3 ;
1442: LD_ADDR_VAR 0 3
1446: PUSH
1447: LD_VAR 0 2
1451: PUSH
1452: LD_INT 4
1454: MUL
1455: PUSH
1456: LD_INT 3
1458: MINUS
1459: ST_TO_ADDR
// br1 := side * 4 - 2 ;
1460: LD_ADDR_VAR 0 4
1464: PUSH
1465: LD_VAR 0 2
1469: PUSH
1470: LD_INT 4
1472: MUL
1473: PUSH
1474: LD_INT 2
1476: MINUS
1477: ST_TO_ADDR
// br2 := side * 4 - 1 ;
1478: LD_ADDR_VAR 0 5
1482: PUSH
1483: LD_VAR 0 2
1487: PUSH
1488: LD_INT 4
1490: MUL
1491: PUSH
1492: LD_INT 1
1494: MINUS
1495: ST_TO_ADDR
// br3 := side * 4 ;
1496: LD_ADDR_VAR 0 6
1500: PUSH
1501: LD_VAR 0 2
1505: PUSH
1506: LD_INT 4
1508: MUL
1509: ST_TO_ADDR
// depot_def := depot_def ^ [ [ GetX ( dep ) , GetY ( dep ) , GetDir ( dep ) ] ] ;
1510: LD_ADDR_EXP 22
1514: PUSH
1515: LD_EXP 22
1519: PUSH
1520: LD_VAR 0 3
1524: PPUSH
1525: CALL_OW 250
1529: PUSH
1530: LD_VAR 0 3
1534: PPUSH
1535: CALL_OW 251
1539: PUSH
1540: LD_VAR 0 3
1544: PPUSH
1545: CALL_OW 254
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: LIST
1554: PUSH
1555: EMPTY
1556: LIST
1557: ADD
1558: ST_TO_ADDR
// start_def := start_def ^ [ [ ShiftX ( GetX ( Dep ) , GetDir ( Dep ) , 6 ) , ShiftY ( GetY ( Dep ) , GetDir ( Dep ) , 6 ) ] ] ;
1559: LD_ADDR_EXP 24
1563: PUSH
1564: LD_EXP 24
1568: PUSH
1569: LD_VAR 0 3
1573: PPUSH
1574: CALL_OW 250
1578: PPUSH
1579: LD_VAR 0 3
1583: PPUSH
1584: CALL_OW 254
1588: PPUSH
1589: LD_INT 6
1591: PPUSH
1592: CALL_OW 272
1596: PUSH
1597: LD_VAR 0 3
1601: PPUSH
1602: CALL_OW 251
1606: PPUSH
1607: LD_VAR 0 3
1611: PPUSH
1612: CALL_OW 254
1616: PPUSH
1617: LD_INT 6
1619: PPUSH
1620: CALL_OW 273
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: PUSH
1629: EMPTY
1630: LIST
1631: ADD
1632: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ GetX ( br1 ) , GetY ( br1 ) , GetDir ( br1 ) ] , [ GetX ( br2 ) , GetY ( br2 ) , GetDir ( br2 ) ] , [ GetX ( br3 ) , GetY ( br3 ) , GetDir ( br3 ) ] ] ] ;
1633: LD_ADDR_EXP 23
1637: PUSH
1638: LD_EXP 23
1642: PUSH
1643: LD_VAR 0 4
1647: PPUSH
1648: CALL_OW 250
1652: PUSH
1653: LD_VAR 0 4
1657: PPUSH
1658: CALL_OW 251
1662: PUSH
1663: LD_VAR 0 4
1667: PPUSH
1668: CALL_OW 254
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: LIST
1677: PUSH
1678: LD_VAR 0 5
1682: PPUSH
1683: CALL_OW 250
1687: PUSH
1688: LD_VAR 0 5
1692: PPUSH
1693: CALL_OW 251
1697: PUSH
1698: LD_VAR 0 5
1702: PPUSH
1703: CALL_OW 254
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: LIST
1712: PUSH
1713: LD_VAR 0 6
1717: PPUSH
1718: CALL_OW 250
1722: PUSH
1723: LD_VAR 0 6
1727: PPUSH
1728: CALL_OW 251
1732: PUSH
1733: LD_VAR 0 6
1737: PPUSH
1738: CALL_OW 254
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: LIST
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: LIST
1752: PUSH
1753: EMPTY
1754: LIST
1755: ADD
1756: ST_TO_ADDR
// DestroyUnit ( dep ) ;
1757: LD_VAR 0 3
1761: PPUSH
1762: CALL_OW 65
// DestroyUnit ( br1 ) ;
1766: LD_VAR 0 4
1770: PPUSH
1771: CALL_OW 65
// DestroyUnit ( br2 ) ;
1775: LD_VAR 0 5
1779: PPUSH
1780: CALL_OW 65
// DestroyUnit ( br3 ) ;
1784: LD_VAR 0 6
1788: PPUSH
1789: CALL_OW 65
// end ;
1793: GO 1439
1795: POP
1796: POP
// normal_oil_deposits_locations := [ [ 28 , 15 ] , [ 102 , 17 ] , [ 50 , 84 ] , [ 143 , 111 ] ] ;
1797: LD_ADDR_EXP 26
1801: PUSH
1802: LD_INT 28
1804: PUSH
1805: LD_INT 15
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: PUSH
1812: LD_INT 102
1814: PUSH
1815: LD_INT 17
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: PUSH
1822: LD_INT 50
1824: PUSH
1825: LD_INT 84
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: LD_INT 143
1834: PUSH
1835: LD_INT 111
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PUSH
1842: EMPTY
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 28 , 15 ] , [ 52 , 44 ] ] , [ [ 102 , 17 ] , [ 84 , 37 ] ] , [ [ 50 , 84 ] , [ 74 , 81 ] ] , [ [ 143 , 111 ] , [ 106 , 77 ] ] , ] ;
1848: LD_ADDR_EXP 27
1852: PUSH
1853: LD_INT 28
1855: PUSH
1856: LD_INT 15
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: PUSH
1863: LD_INT 52
1865: PUSH
1866: LD_INT 44
1868: PUSH
1869: EMPTY
1870: LIST
1871: LIST
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 102
1879: PUSH
1880: LD_INT 17
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: LD_INT 84
1889: PUSH
1890: LD_INT 37
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: PUSH
1897: EMPTY
1898: LIST
1899: LIST
1900: PUSH
1901: LD_INT 50
1903: PUSH
1904: LD_INT 84
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: PUSH
1911: LD_INT 74
1913: PUSH
1914: LD_INT 81
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: PUSH
1925: LD_INT 143
1927: PUSH
1928: LD_INT 111
1930: PUSH
1931: EMPTY
1932: LIST
1933: LIST
1934: PUSH
1935: LD_INT 106
1937: PUSH
1938: LD_INT 77
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: PUSH
1945: EMPTY
1946: LIST
1947: LIST
1948: PUSH
1949: EMPTY
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 45 , 25 ] , [ 75 , 22 ] , [ 87 , 105 ] , [ 117 , 99 ] ] ;
1955: LD_ADDR_EXP 28
1959: PUSH
1960: LD_INT 45
1962: PUSH
1963: LD_INT 25
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: PUSH
1970: LD_INT 75
1972: PUSH
1973: LD_INT 22
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PUSH
1980: LD_INT 87
1982: PUSH
1983: LD_INT 105
1985: PUSH
1986: EMPTY
1987: LIST
1988: LIST
1989: PUSH
1990: LD_INT 117
1992: PUSH
1993: LD_INT 99
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: PUSH
2000: EMPTY
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: ST_TO_ADDR
// for i = 1 to Side_Positions do
2006: LD_ADDR_VAR 0 8
2010: PUSH
2011: DOUBLE
2012: LD_INT 1
2014: DEC
2015: ST_TO_ADDR
2016: LD_EXP 19
2020: PUSH
2021: FOR_TO
2022: IFFALSE 2201
// begin if not Side_Positions [ i ] then
2024: LD_EXP 19
2028: PUSH
2029: LD_VAR 0 8
2033: ARRAY
2034: NOT
2035: IFFALSE 2039
// continue ;
2037: GO 2021
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2039: LD_EXP 28
2043: PUSH
2044: LD_EXP 19
2048: PUSH
2049: LD_VAR 0 8
2053: ARRAY
2054: ARRAY
2055: PUSH
2056: LD_INT 1
2058: ARRAY
2059: PPUSH
2060: LD_EXP 28
2064: PUSH
2065: LD_EXP 19
2069: PUSH
2070: LD_VAR 0 8
2074: ARRAY
2075: ARRAY
2076: PUSH
2077: LD_INT 2
2079: ARRAY
2080: PPUSH
2081: LD_INT 3
2083: PPUSH
2084: CALL_OW 62
// if def_extra_oil_deposits then
2088: LD_EXP 44
2092: IFFALSE 2150
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2094: LD_ADDR_VAR 0 9
2098: PUSH
2099: LD_EXP 27
2103: PUSH
2104: LD_EXP 19
2108: PUSH
2109: LD_VAR 0 8
2113: ARRAY
2114: ARRAY
2115: PUSH
2116: FOR_IN
2117: IFFALSE 2146
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2119: LD_VAR 0 9
2123: PUSH
2124: LD_INT 1
2126: ARRAY
2127: PPUSH
2128: LD_VAR 0 9
2132: PUSH
2133: LD_INT 2
2135: ARRAY
2136: PPUSH
2137: LD_INT 2
2139: PPUSH
2140: CALL_OW 62
2144: GO 2116
2146: POP
2147: POP
2148: GO 2199
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2150: LD_EXP 26
2154: PUSH
2155: LD_EXP 19
2159: PUSH
2160: LD_VAR 0 8
2164: ARRAY
2165: ARRAY
2166: PUSH
2167: LD_INT 1
2169: ARRAY
2170: PPUSH
2171: LD_EXP 26
2175: PUSH
2176: LD_EXP 19
2180: PUSH
2181: LD_VAR 0 8
2185: ARRAY
2186: ARRAY
2187: PUSH
2188: LD_INT 2
2190: ARRAY
2191: PPUSH
2192: LD_INT 2
2194: PPUSH
2195: CALL_OW 62
// end ;
2199: GO 2021
2201: POP
2202: POP
// end ;
2203: LD_VAR 0 1
2207: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2208: LD_INT 0
2210: PPUSH
2211: PPUSH
2212: PPUSH
// if not Team_Game then
2213: LD_EXP 21
2217: NOT
2218: IFFALSE 2316
// begin for i = 1 to 8 do
2220: LD_ADDR_VAR 0 2
2224: PUSH
2225: DOUBLE
2226: LD_INT 1
2228: DEC
2229: ST_TO_ADDR
2230: LD_INT 8
2232: PUSH
2233: FOR_TO
2234: IFFALSE 2312
// for j = 1 to 8 do
2236: LD_ADDR_VAR 0 3
2240: PUSH
2241: DOUBLE
2242: LD_INT 1
2244: DEC
2245: ST_TO_ADDR
2246: LD_INT 8
2248: PUSH
2249: FOR_TO
2250: IFFALSE 2308
// if i <> j then
2252: LD_VAR 0 2
2256: PUSH
2257: LD_VAR 0 3
2261: NONEQUAL
2262: IFFALSE 2286
// SetAttitude ( i , j , att_neutral , true ) else
2264: LD_VAR 0 2
2268: PPUSH
2269: LD_VAR 0 3
2273: PPUSH
2274: LD_INT 0
2276: PPUSH
2277: LD_INT 1
2279: PPUSH
2280: CALL_OW 80
2284: GO 2306
// SetAttitude ( i , j , att_friend , true ) ;
2286: LD_VAR 0 2
2290: PPUSH
2291: LD_VAR 0 3
2295: PPUSH
2296: LD_INT 1
2298: PPUSH
2299: LD_INT 1
2301: PPUSH
2302: CALL_OW 80
2306: GO 2249
2308: POP
2309: POP
2310: GO 2233
2312: POP
2313: POP
// end else
2314: GO 2491
// begin if def_shared_vision then
2316: LD_EXP 46
2320: IFFALSE 2385
// begin for i in Teams do
2322: LD_ADDR_VAR 0 2
2326: PUSH
2327: LD_EXP 17
2331: PUSH
2332: FOR_IN
2333: IFFALSE 2383
// for j = 2 to i do
2335: LD_ADDR_VAR 0 3
2339: PUSH
2340: DOUBLE
2341: LD_INT 2
2343: DEC
2344: ST_TO_ADDR
2345: LD_VAR 0 2
2349: PUSH
2350: FOR_TO
2351: IFFALSE 2379
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2353: LD_VAR 0 2
2357: PUSH
2358: LD_VAR 0 3
2362: ARRAY
2363: PPUSH
2364: LD_VAR 0 2
2368: PUSH
2369: LD_INT 1
2371: ARRAY
2372: PPUSH
2373: CALL_OW 343
2377: GO 2350
2379: POP
2380: POP
2381: GO 2332
2383: POP
2384: POP
// end ; for i = 1 to 8 do
2385: LD_ADDR_VAR 0 2
2389: PUSH
2390: DOUBLE
2391: LD_INT 1
2393: DEC
2394: ST_TO_ADDR
2395: LD_INT 8
2397: PUSH
2398: FOR_TO
2399: IFFALSE 2489
// for j = 1 to 8 do
2401: LD_ADDR_VAR 0 3
2405: PUSH
2406: DOUBLE
2407: LD_INT 1
2409: DEC
2410: ST_TO_ADDR
2411: LD_INT 8
2413: PUSH
2414: FOR_TO
2415: IFFALSE 2485
// if Side_Teams [ i ] = Side_Teams [ j ] then
2417: LD_EXP 16
2421: PUSH
2422: LD_VAR 0 2
2426: ARRAY
2427: PUSH
2428: LD_EXP 16
2432: PUSH
2433: LD_VAR 0 3
2437: ARRAY
2438: EQUAL
2439: IFFALSE 2463
// SetAttitude ( i , j , att_friend , true ) else
2441: LD_VAR 0 2
2445: PPUSH
2446: LD_VAR 0 3
2450: PPUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 1
2456: PPUSH
2457: CALL_OW 80
2461: GO 2483
// SetAttitude ( i , j , att_enemy , true ) ;
2463: LD_VAR 0 2
2467: PPUSH
2468: LD_VAR 0 3
2472: PPUSH
2473: LD_INT 2
2475: PPUSH
2476: LD_INT 1
2478: PPUSH
2479: CALL_OW 80
2483: GO 2414
2485: POP
2486: POP
2487: GO 2398
2489: POP
2490: POP
// end ; end ;
2491: LD_VAR 0 1
2495: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2496: LD_INT 0
2498: PPUSH
2499: PPUSH
2500: PPUSH
2501: PPUSH
// result := [ ] ;
2502: LD_ADDR_VAR 0 7
2506: PUSH
2507: EMPTY
2508: ST_TO_ADDR
// for i := 1 to count do
2509: LD_ADDR_VAR 0 8
2513: PUSH
2514: DOUBLE
2515: LD_INT 1
2517: DEC
2518: ST_TO_ADDR
2519: LD_VAR 0 1
2523: PUSH
2524: FOR_TO
2525: IFFALSE 2943
// begin uc_direction := Rand ( 0 , 5 ) ;
2527: LD_ADDR_OWVAR 24
2531: PUSH
2532: LD_INT 0
2534: PPUSH
2535: LD_INT 5
2537: PPUSH
2538: CALL_OW 12
2542: ST_TO_ADDR
// if commander then
2543: LD_LOC 1
2547: IFFALSE 2656
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2549: LD_ADDR_OWVAR 26
2553: PUSH
2554: LD_OWVAR 19
2558: PUSH
2559: LD_OWVAR 20
2563: ARRAY
2564: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2565: LD_INT 1
2567: PPUSH
2568: LD_INT 2
2570: PPUSH
2571: CALL_OW 12
2575: PPUSH
2576: LD_VAR 0 2
2580: PPUSH
2581: LD_EXP 5
2585: PUSH
2586: LD_INT 2
2588: PLUS
2589: PPUSH
2590: CALL_OW 380
// hc_importance := 105 ;
2594: LD_ADDR_OWVAR 32
2598: PUSH
2599: LD_INT 105
2601: ST_TO_ADDR
// commander := false ;
2602: LD_ADDR_LOC 1
2606: PUSH
2607: LD_INT 0
2609: ST_TO_ADDR
// if Multiplayer then
2610: LD_OWVAR 4
2614: IFFALSE 2654
// begin hc_gallery := MULTIAVATARS ;
2616: LD_ADDR_OWVAR 33
2620: PUSH
2621: LD_STRING MULTIAVATARS
2623: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2624: LD_ADDR_OWVAR 34
2628: PUSH
2629: LD_OWVAR 20
2633: PPUSH
2634: CALL_OW 525
2638: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2639: LD_ADDR_OWVAR 27
2643: PUSH
2644: LD_OWVAR 20
2648: PPUSH
2649: CALL_OW 526
2653: ST_TO_ADDR
// end ; end else
2654: GO 2719
// begin hc_name :=  ;
2656: LD_ADDR_OWVAR 26
2660: PUSH
2661: LD_STRING 
2663: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2664: LD_INT 1
2666: PPUSH
2667: LD_INT 2
2669: PPUSH
2670: CALL_OW 12
2674: PPUSH
2675: LD_VAR 0 2
2679: PPUSH
2680: LD_EXP 5
2684: PPUSH
2685: CALL_OW 380
// hc_importance := 0 ;
2689: LD_ADDR_OWVAR 32
2693: PUSH
2694: LD_INT 0
2696: ST_TO_ADDR
// if Multiplayer then
2697: LD_OWVAR 4
2701: IFFALSE 2719
// begin hc_gallery :=  ;
2703: LD_ADDR_OWVAR 33
2707: PUSH
2708: LD_STRING 
2710: ST_TO_ADDR
// hc_face_number := 0 ;
2711: LD_ADDR_OWVAR 34
2715: PUSH
2716: LD_INT 0
2718: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2719: LD_ADDR_VAR 0 10
2723: PUSH
2724: CALL_OW 44
2728: ST_TO_ADDR
// if global_defined then
2729: LD_LOC 3
2733: IFFALSE 2873
// begin if ( cl = class_soldier ) then
2735: LD_VAR 0 2
2739: PUSH
2740: LD_INT 1
2742: EQUAL
2743: IFFALSE 2763
// j := i + soldiers_created else
2745: LD_ADDR_VAR 0 9
2749: PUSH
2750: LD_VAR 0 8
2754: PUSH
2755: LD_LOC 4
2759: PLUS
2760: ST_TO_ADDR
2761: GO 2773
// j := i ;
2763: LD_ADDR_VAR 0 9
2767: PUSH
2768: LD_VAR 0 8
2772: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2773: LD_LOC 2
2777: PUSH
2778: LD_VAR 0 2
2782: ARRAY
2783: PUSH
2784: LD_VAR 0 9
2788: ARRAY
2789: PPUSH
2790: LD_VAR 0 10
2794: PPUSH
2795: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2799: LD_VAR 0 10
2803: PPUSH
2804: LD_INT 2
2806: PPUSH
2807: LD_LOC 2
2811: PUSH
2812: LD_VAR 0 2
2816: ARRAY
2817: PUSH
2818: LD_VAR 0 9
2822: ARRAY
2823: PPUSH
2824: LD_INT 2
2826: PPUSH
2827: CALL_OW 260
2831: PPUSH
2832: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2836: LD_VAR 0 10
2840: PPUSH
2841: LD_INT 1
2843: PPUSH
2844: LD_LOC 2
2848: PUSH
2849: LD_VAR 0 2
2853: ARRAY
2854: PUSH
2855: LD_VAR 0 9
2859: ARRAY
2860: PPUSH
2861: LD_INT 1
2863: PPUSH
2864: CALL_OW 260
2868: PPUSH
2869: CALL_OW 239
// end ; if building then
2873: LD_VAR 0 6
2877: IFFALSE 2895
// PlaceHumanInUnit ( un , building ) else
2879: LD_VAR 0 10
2883: PPUSH
2884: LD_VAR 0 6
2888: PPUSH
2889: CALL_OW 52
2893: GO 2922
// PlaceUnitXYR ( un , x , y , r , false ) ;
2895: LD_VAR 0 10
2899: PPUSH
2900: LD_VAR 0 3
2904: PPUSH
2905: LD_VAR 0 4
2909: PPUSH
2910: LD_VAR 0 5
2914: PPUSH
2915: LD_INT 0
2917: PPUSH
2918: CALL_OW 50
// result := result ^ [ un ] ;
2922: LD_ADDR_VAR 0 7
2926: PUSH
2927: LD_VAR 0 7
2931: PUSH
2932: LD_VAR 0 10
2936: PUSH
2937: EMPTY
2938: LIST
2939: ADD
2940: ST_TO_ADDR
// end ;
2941: GO 2524
2943: POP
2944: POP
// if not global_defined then
2945: LD_LOC 3
2949: NOT
2950: IFFALSE 3028
// if ( global_units >= cl ) then
2952: LD_LOC 2
2956: PUSH
2957: LD_VAR 0 2
2961: GREATEREQUAL
2962: IFFALSE 3003
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2964: LD_ADDR_LOC 2
2968: PUSH
2969: LD_LOC 2
2973: PPUSH
2974: LD_VAR 0 2
2978: PPUSH
2979: LD_LOC 2
2983: PUSH
2984: LD_VAR 0 2
2988: ARRAY
2989: PUSH
2990: LD_VAR 0 7
2994: ADD
2995: PPUSH
2996: CALL_OW 1
3000: ST_TO_ADDR
3001: GO 3028
// global_units := Replace ( global_units , cl , result ) ;
3003: LD_ADDR_LOC 2
3007: PUSH
3008: LD_LOC 2
3012: PPUSH
3013: LD_VAR 0 2
3017: PPUSH
3018: LD_VAR 0 7
3022: PPUSH
3023: CALL_OW 1
3027: ST_TO_ADDR
// if commander then
3028: LD_LOC 1
3032: IFFALSE 3079
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3034: LD_ADDR_EXP 29
3038: PUSH
3039: LD_EXP 29
3043: PPUSH
3044: LD_OWVAR 20
3048: PPUSH
3049: LD_EXP 29
3053: PUSH
3054: LD_OWVAR 20
3058: ARRAY
3059: PUSH
3060: LD_VAR 0 10
3064: ADD
3065: PPUSH
3066: CALL_OW 1
3070: ST_TO_ADDR
// commander := false ;
3071: LD_ADDR_LOC 1
3075: PUSH
3076: LD_INT 0
3078: ST_TO_ADDR
// end ; end ;
3079: LD_VAR 0 7
3083: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3084: LD_INT 0
3086: PPUSH
3087: PPUSH
3088: PPUSH
3089: PPUSH
3090: PPUSH
3091: PPUSH
3092: PPUSH
3093: PPUSH
3094: PPUSH
// if side in [ 0 , 9 ] then
3095: LD_VAR 0 1
3099: PUSH
3100: LD_INT 0
3102: PUSH
3103: LD_INT 9
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: IN
3110: IFFALSE 3114
// exit ;
3112: GO 4164
// pos := Side_Positions [ side ] ;
3114: LD_ADDR_VAR 0 3
3118: PUSH
3119: LD_EXP 19
3123: PUSH
3124: LD_VAR 0 1
3128: ARRAY
3129: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3130: LD_ADDR_OWVAR 21
3134: PUSH
3135: LD_EXP 20
3139: PUSH
3140: LD_VAR 0 1
3144: ARRAY
3145: ST_TO_ADDR
// uc_side := side ;
3146: LD_ADDR_OWVAR 20
3150: PUSH
3151: LD_VAR 0 1
3155: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3156: LD_ADDR_VAR 0 4
3160: PUSH
3161: LD_EXP 22
3165: PUSH
3166: LD_VAR 0 3
3170: ARRAY
3171: PUSH
3172: LD_INT 1
3174: ARRAY
3175: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3176: LD_ADDR_VAR 0 5
3180: PUSH
3181: LD_EXP 22
3185: PUSH
3186: LD_VAR 0 3
3190: ARRAY
3191: PUSH
3192: LD_INT 2
3194: ARRAY
3195: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3196: LD_ADDR_VAR 0 6
3200: PUSH
3201: LD_EXP 22
3205: PUSH
3206: LD_VAR 0 3
3210: ARRAY
3211: PUSH
3212: LD_INT 3
3214: ARRAY
3215: ST_TO_ADDR
// if is_depot then
3216: LD_EXP 2
3220: IFFALSE 3353
// begin bc_type = b_depot ;
3222: LD_ADDR_OWVAR 42
3226: PUSH
3227: LD_INT 0
3229: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3230: LD_ADDR_VAR 0 10
3234: PUSH
3235: LD_VAR 0 4
3239: PPUSH
3240: LD_VAR 0 5
3244: PPUSH
3245: LD_VAR 0 6
3249: PPUSH
3250: CALL_OW 47
3254: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3255: LD_VAR 0 10
3259: PPUSH
3260: LD_STRING @
3262: PUSH
3263: LD_VAR 0 1
3267: STR
3268: PPUSH
3269: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3273: LD_VAR 0 10
3277: PPUSH
3278: CALL_OW 274
3282: PPUSH
3283: LD_INT 1
3285: PPUSH
3286: LD_EXP 7
3290: PUSH
3291: LD_INT 1
3293: ARRAY
3294: PPUSH
3295: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3299: LD_VAR 0 10
3303: PPUSH
3304: CALL_OW 274
3308: PPUSH
3309: LD_INT 2
3311: PPUSH
3312: LD_EXP 7
3316: PUSH
3317: LD_INT 2
3319: ARRAY
3320: PPUSH
3321: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3325: LD_VAR 0 10
3329: PPUSH
3330: CALL_OW 274
3334: PPUSH
3335: LD_INT 3
3337: PPUSH
3338: LD_EXP 7
3342: PUSH
3343: LD_INT 3
3345: ARRAY
3346: PPUSH
3347: CALL_OW 277
// end else
3351: GO 3497
// begin for i := 1 to 3 do
3353: LD_ADDR_VAR 0 7
3357: PUSH
3358: DOUBLE
3359: LD_INT 1
3361: DEC
3362: ST_TO_ADDR
3363: LD_INT 3
3365: PUSH
3366: FOR_TO
3367: IFFALSE 3495
// begin r := starting_resources [ i ] ;
3369: LD_ADDR_VAR 0 8
3373: PUSH
3374: LD_EXP 7
3378: PUSH
3379: LD_VAR 0 7
3383: ARRAY
3384: ST_TO_ADDR
// while r >= 10 do
3385: LD_VAR 0 8
3389: PUSH
3390: LD_INT 10
3392: GREATEREQUAL
3393: IFFALSE 3493
// if r > 50 then
3395: LD_VAR 0 8
3399: PUSH
3400: LD_INT 50
3402: GREATER
3403: IFFALSE 3449
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3405: LD_VAR 0 7
3409: PPUSH
3410: LD_INT 5
3412: PPUSH
3413: LD_VAR 0 4
3417: PPUSH
3418: LD_VAR 0 5
3422: PPUSH
3423: LD_INT 4
3425: PPUSH
3426: LD_INT 0
3428: PPUSH
3429: CALL_OW 60
// r := r - 50 ;
3433: LD_ADDR_VAR 0 8
3437: PUSH
3438: LD_VAR 0 8
3442: PUSH
3443: LD_INT 50
3445: MINUS
3446: ST_TO_ADDR
// end else
3447: GO 3491
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3449: LD_VAR 0 7
3453: PPUSH
3454: LD_VAR 0 8
3458: PUSH
3459: LD_INT 10
3461: DIV
3462: PPUSH
3463: LD_VAR 0 4
3467: PPUSH
3468: LD_VAR 0 5
3472: PPUSH
3473: LD_INT 4
3475: PPUSH
3476: LD_INT 0
3478: PPUSH
3479: CALL_OW 60
// r := 0 ;
3483: LD_ADDR_VAR 0 8
3487: PUSH
3488: LD_INT 0
3490: ST_TO_ADDR
// end ;
3491: GO 3385
// end ;
3493: GO 3366
3495: POP
3496: POP
// end ; for r in starting_crates do
3497: LD_ADDR_VAR 0 8
3501: PUSH
3502: LD_EXP 6
3506: PUSH
3507: FOR_IN
3508: IFFALSE 3540
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3510: LD_INT 1
3512: PPUSH
3513: LD_INT 5
3515: PPUSH
3516: LD_VAR 0 4
3520: PPUSH
3521: LD_VAR 0 5
3525: PPUSH
3526: LD_VAR 0 8
3530: PPUSH
3531: LD_INT 0
3533: PPUSH
3534: CALL_OW 60
3538: GO 3507
3540: POP
3541: POP
// if def_morale_flags then
3542: LD_EXP 47
3546: IFFALSE 3685
// begin x := start_def [ pos ] [ 1 ] ;
3548: LD_ADDR_VAR 0 4
3552: PUSH
3553: LD_EXP 24
3557: PUSH
3558: LD_VAR 0 3
3562: ARRAY
3563: PUSH
3564: LD_INT 1
3566: ARRAY
3567: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3568: LD_ADDR_VAR 0 5
3572: PUSH
3573: LD_EXP 24
3577: PUSH
3578: LD_VAR 0 3
3582: ARRAY
3583: PUSH
3584: LD_INT 2
3586: ARRAY
3587: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3588: LD_VAR 0 4
3592: PPUSH
3593: LD_VAR 0 5
3597: PPUSH
3598: LD_INT 12
3600: PPUSH
3601: LD_INT 2
3603: PPUSH
3604: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3608: LD_ADDR_EXP 25
3612: PUSH
3613: LD_EXP 25
3617: PUSH
3618: LD_VAR 0 1
3622: PPUSH
3623: LD_VAR 0 4
3627: PPUSH
3628: LD_VAR 0 5
3632: PPUSH
3633: LD_INT 1
3635: PUSH
3636: LD_INT 100
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: PUSH
3643: LD_INT 2
3645: PUSH
3646: LD_INT 50
3648: PUSH
3649: EMPTY
3650: LIST
3651: LIST
3652: PUSH
3653: LD_INT 3
3655: PUSH
3656: LD_INT 20
3658: PUSH
3659: EMPTY
3660: LIST
3661: LIST
3662: PUSH
3663: LD_INT 20
3665: PUSH
3666: LD_INT 100
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: LIST
3677: LIST
3678: PPUSH
3679: CALL_OW 418
3683: ADD
3684: ST_TO_ADDR
// end ; commander := true ;
3685: LD_ADDR_LOC 1
3689: PUSH
3690: LD_INT 1
3692: ST_TO_ADDR
// soldiers_created := 0 ;
3693: LD_ADDR_LOC 4
3697: PUSH
3698: LD_INT 0
3700: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3701: LD_ADDR_VAR 0 7
3705: PUSH
3706: DOUBLE
3707: LD_INT 1
3709: DEC
3710: ST_TO_ADDR
3711: LD_EXP 3
3715: PUSH
3716: FOR_TO
3717: IFFALSE 3870
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3719: LD_ADDR_VAR 0 4
3723: PUSH
3724: LD_EXP 23
3728: PUSH
3729: LD_VAR 0 3
3733: ARRAY
3734: PUSH
3735: LD_VAR 0 7
3739: ARRAY
3740: PUSH
3741: LD_INT 1
3743: ARRAY
3744: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3745: LD_ADDR_VAR 0 5
3749: PUSH
3750: LD_EXP 23
3754: PUSH
3755: LD_VAR 0 3
3759: ARRAY
3760: PUSH
3761: LD_VAR 0 7
3765: ARRAY
3766: PUSH
3767: LD_INT 2
3769: ARRAY
3770: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3771: LD_ADDR_VAR 0 6
3775: PUSH
3776: LD_EXP 23
3780: PUSH
3781: LD_VAR 0 3
3785: ARRAY
3786: PUSH
3787: LD_VAR 0 7
3791: ARRAY
3792: PUSH
3793: LD_INT 3
3795: ARRAY
3796: ST_TO_ADDR
// bc_type := b_breastwork ;
3797: LD_ADDR_OWVAR 42
3801: PUSH
3802: LD_INT 31
3804: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3805: LD_ADDR_VAR 0 9
3809: PUSH
3810: LD_VAR 0 4
3814: PPUSH
3815: LD_VAR 0 5
3819: PPUSH
3820: LD_VAR 0 6
3824: PPUSH
3825: CALL_OW 47
3829: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3830: LD_INT 1
3832: PPUSH
3833: LD_INT 1
3835: PPUSH
3836: LD_INT 0
3838: PPUSH
3839: LD_INT 0
3841: PPUSH
3842: LD_INT 0
3844: PPUSH
3845: LD_VAR 0 9
3849: PPUSH
3850: CALL 2496 0 6
// soldiers_created := soldiers_created + 1 ;
3854: LD_ADDR_LOC 4
3858: PUSH
3859: LD_LOC 4
3863: PUSH
3864: LD_INT 1
3866: PLUS
3867: ST_TO_ADDR
// end ;
3868: GO 3716
3870: POP
3871: POP
// x := start_def [ pos ] [ 1 ] ;
3872: LD_ADDR_VAR 0 4
3876: PUSH
3877: LD_EXP 24
3881: PUSH
3882: LD_VAR 0 3
3886: ARRAY
3887: PUSH
3888: LD_INT 1
3890: ARRAY
3891: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3892: LD_ADDR_VAR 0 5
3896: PUSH
3897: LD_EXP 24
3901: PUSH
3902: LD_VAR 0 3
3906: ARRAY
3907: PUSH
3908: LD_INT 2
3910: ARRAY
3911: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3912: LD_LOC 8
3916: PUSH
3917: LD_EXP 3
3921: MINUS
3922: PPUSH
3923: LD_INT 1
3925: PPUSH
3926: LD_VAR 0 4
3930: PPUSH
3931: LD_VAR 0 5
3935: PPUSH
3936: LD_INT 5
3938: PPUSH
3939: LD_INT 0
3941: PPUSH
3942: CALL 2496 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3946: LD_LOC 5
3950: PPUSH
3951: LD_INT 2
3953: PPUSH
3954: LD_VAR 0 4
3958: PPUSH
3959: LD_VAR 0 5
3963: PPUSH
3964: LD_INT 5
3966: PPUSH
3967: LD_INT 0
3969: PPUSH
3970: CALL 2496 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3974: LD_LOC 7
3978: PPUSH
3979: LD_INT 3
3981: PPUSH
3982: LD_VAR 0 4
3986: PPUSH
3987: LD_VAR 0 5
3991: PPUSH
3992: LD_INT 5
3994: PPUSH
3995: LD_INT 0
3997: PPUSH
3998: CALL 2496 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4002: LD_LOC 6
4006: PPUSH
4007: LD_INT 4
4009: PPUSH
4010: LD_VAR 0 4
4014: PPUSH
4015: LD_VAR 0 5
4019: PPUSH
4020: LD_INT 5
4022: PPUSH
4023: LD_INT 0
4025: PPUSH
4026: CALL 2496 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4030: LD_EXP 48
4034: PUSH
4035: LD_INT 20
4037: PPUSH
4038: LD_VAR 0 1
4042: PPUSH
4043: CALL_OW 321
4047: PUSH
4048: LD_INT 1
4050: EQUAL
4051: AND
4052: IFFALSE 4069
// SetTech ( tech_SibDet , side , state_researched ) ;
4054: LD_INT 20
4056: PPUSH
4057: LD_VAR 0 1
4061: PPUSH
4062: LD_INT 2
4064: PPUSH
4065: CALL_OW 322
// if def_siberite_bomb = 1 then
4069: LD_EXP 51
4073: PUSH
4074: LD_INT 1
4076: EQUAL
4077: IFFALSE 4111
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4079: LD_INT 25
4081: PPUSH
4082: LD_VAR 0 1
4086: PPUSH
4087: LD_INT 1
4089: PPUSH
4090: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4094: LD_INT 73
4096: PPUSH
4097: LD_VAR 0 1
4101: PPUSH
4102: LD_INT 1
4104: PPUSH
4105: CALL_OW 322
// end else
4109: GO 4141
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4111: LD_INT 25
4113: PPUSH
4114: LD_VAR 0 1
4118: PPUSH
4119: LD_INT 0
4121: PPUSH
4122: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4126: LD_INT 73
4128: PPUSH
4129: LD_VAR 0 1
4133: PPUSH
4134: LD_INT 0
4136: PPUSH
4137: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4141: LD_INT 24
4143: PPUSH
4144: LD_VAR 0 1
4148: PPUSH
4149: LD_INT 0
4151: PPUSH
4152: CALL_OW 322
// global_defined := true ;
4156: LD_ADDR_LOC 3
4160: PUSH
4161: LD_INT 1
4163: ST_TO_ADDR
// end ;
4164: LD_VAR 0 2
4168: RET
// every 0 0$1 do
4169: GO 4171
4171: DISABLE
// if ( def_siberite_bomb > 1 ) then
4172: LD_EXP 51
4176: PUSH
4177: LD_INT 1
4179: GREATER
4180: IFFALSE 4195
// begin wait ( siberite_bomb_Delay ) ;
4182: LD_EXP 12
4186: PPUSH
4187: CALL_OW 67
// EnableSibFiss ;
4191: CALL 4196 0 0
// end ;
4195: END
// function EnableSibFiss ; var i ; begin
4196: LD_INT 0
4198: PPUSH
4199: PPUSH
// for i := 1 to 8 do
4200: LD_ADDR_VAR 0 2
4204: PUSH
4205: DOUBLE
4206: LD_INT 1
4208: DEC
4209: ST_TO_ADDR
4210: LD_INT 8
4212: PUSH
4213: FOR_TO
4214: IFFALSE 4260
// if Side_Positions [ i ] then
4216: LD_EXP 19
4220: PUSH
4221: LD_VAR 0 2
4225: ARRAY
4226: IFFALSE 4258
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4228: LD_INT 25
4230: PPUSH
4231: LD_VAR 0 2
4235: PPUSH
4236: LD_INT 1
4238: PPUSH
4239: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4243: LD_INT 73
4245: PPUSH
4246: LD_VAR 0 2
4250: PPUSH
4251: LD_INT 1
4253: PPUSH
4254: CALL_OW 322
// end ;
4258: GO 4213
4260: POP
4261: POP
// end ;
4262: LD_VAR 0 1
4266: RET
// function prepare_sides ; var i ; begin
4267: LD_INT 0
4269: PPUSH
4270: PPUSH
// global_units := [ ] ;
4271: LD_ADDR_LOC 2
4275: PUSH
4276: EMPTY
4277: ST_TO_ADDR
// global_defined := false ;
4278: LD_ADDR_LOC 3
4282: PUSH
4283: LD_INT 0
4285: ST_TO_ADDR
// CountClassMembers ;
4286: CALL 4336 0 0
// for i := 1 to 8 do
4290: LD_ADDR_VAR 0 2
4294: PUSH
4295: DOUBLE
4296: LD_INT 1
4298: DEC
4299: ST_TO_ADDR
4300: LD_INT 8
4302: PUSH
4303: FOR_TO
4304: IFFALSE 4329
// if Side_Positions [ i ] then
4306: LD_EXP 19
4310: PUSH
4311: LD_VAR 0 2
4315: ARRAY
4316: IFFALSE 4327
// prepare_side ( i ) ;
4318: LD_VAR 0 2
4322: PPUSH
4323: CALL 3084 0 1
4327: GO 4303
4329: POP
4330: POP
// end ;
4331: LD_VAR 0 1
4335: RET
// function CountClassMembers ; var Mode ; begin
4336: LD_INT 0
4338: PPUSH
4339: PPUSH
// if No_Mechs then
4340: LD_EXP 53
4344: IFFALSE 4356
// Mode := 2 else
4346: LD_ADDR_VAR 0 2
4350: PUSH
4351: LD_INT 2
4353: ST_TO_ADDR
4354: GO 4364
// Mode := 1 ;
4356: LD_ADDR_VAR 0 2
4360: PUSH
4361: LD_INT 1
4363: ST_TO_ADDR
// neng := number_of_people ;
4364: LD_ADDR_LOC 5
4368: PUSH
4369: LD_EXP 4
4373: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4374: LD_ADDR_LOC 8
4378: PUSH
4379: LD_LOC 5
4383: PUSH
4384: LD_INT 4
4386: PUSH
4387: LD_INT 3
4389: PUSH
4390: EMPTY
4391: LIST
4392: LIST
4393: PUSH
4394: LD_VAR 0 2
4398: ARRAY
4399: DIV
4400: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4401: LD_LOC 8
4405: PUSH
4406: LD_EXP 3
4410: LESS
4411: IFFALSE 4423
// nsol := number_of_breastworks ;
4413: LD_ADDR_LOC 8
4417: PUSH
4418: LD_EXP 3
4422: ST_TO_ADDR
// neng := neng - nsol ;
4423: LD_ADDR_LOC 5
4427: PUSH
4428: LD_LOC 5
4432: PUSH
4433: LD_LOC 8
4437: MINUS
4438: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4439: LD_ADDR_LOC 6
4443: PUSH
4444: LD_LOC 5
4448: PUSH
4449: LD_INT 3
4451: PUSH
4452: LD_INT 2
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: PUSH
4459: LD_VAR 0 2
4463: ARRAY
4464: DIV
4465: ST_TO_ADDR
// if ( nsci < 1 ) then
4466: LD_LOC 6
4470: PUSH
4471: LD_INT 1
4473: LESS
4474: IFFALSE 4484
// nsci := 1 ;
4476: LD_ADDR_LOC 6
4480: PUSH
4481: LD_INT 1
4483: ST_TO_ADDR
// neng := neng - nsci ;
4484: LD_ADDR_LOC 5
4488: PUSH
4489: LD_LOC 5
4493: PUSH
4494: LD_LOC 6
4498: MINUS
4499: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4500: LD_ADDR_LOC 7
4504: PUSH
4505: LD_LOC 5
4509: PUSH
4510: LD_INT 2
4512: DIV
4513: PUSH
4514: LD_INT 0
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: PUSH
4521: LD_VAR 0 2
4525: ARRAY
4526: ST_TO_ADDR
// neng := neng - nmech ;
4527: LD_ADDR_LOC 5
4531: PUSH
4532: LD_LOC 5
4536: PUSH
4537: LD_LOC 7
4541: MINUS
4542: ST_TO_ADDR
// if ( neng < 1 ) then
4543: LD_LOC 5
4547: PUSH
4548: LD_INT 1
4550: LESS
4551: IFFALSE 4561
// neng := 1 ;
4553: LD_ADDR_LOC 5
4557: PUSH
4558: LD_INT 1
4560: ST_TO_ADDR
// end ;
4561: LD_VAR 0 1
4565: RET
// starting begin disable ( 98 ) ;
4566: LD_INT 98
4568: DISABLE_MARKED
// disable ( 99 ) ;
4569: LD_INT 99
4571: DISABLE_MARKED
// disable ( 400 ) ;
4572: LD_INT 400
4574: DISABLE_MARKED
// disable ( 401 ) ;
4575: LD_INT 401
4577: DISABLE_MARKED
// disable ( 600 ) ;
4578: LD_INT 600
4580: DISABLE_MARKED
// mp_selectmsg := true ;
4581: LD_ADDR_OWVAR 13
4585: PUSH
4586: LD_INT 1
4588: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4589: CALL 68 0 0
// prepare_map_coordinates ;
4593: CALL 1401 0 0
// set_shared_visions_and_alliances ;
4597: CALL 2208 0 0
// ResetFog ;
4601: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4605: LD_OWVAR 2
4609: PPUSH
4610: CALL_OW 520
// prepare_sides ;
4614: CALL 4267 0 0
// Init_Win_Condition ;
4618: CALL 16325 0 0
// InitLimits ;
4622: CALL 10173 0 0
// ShowTimer ;
4626: CALL 11110 0 0
// init_shipments_and_respawning ;
4630: CALL 5779 0 0
// music_nat := Side_Nations [ your_side ] ;
4634: LD_ADDR_OWVAR 71
4638: PUSH
4639: LD_EXP 20
4643: PUSH
4644: LD_OWVAR 2
4648: ARRAY
4649: ST_TO_ADDR
// if IAmSpec then
4650: CALL_OW 531
4654: IFFALSE 4678
// begin fogoff ( true ) ;
4656: LD_INT 1
4658: PPUSH
4659: CALL_OW 344
// CenterNowOnXY ( 79 , 59 ) ;
4663: LD_INT 79
4665: PPUSH
4666: LD_INT 59
4668: PPUSH
4669: CALL_OW 86
// enable ( 400 ) ;
4673: LD_INT 400
4675: ENABLE_MARKED
// end else
4676: GO 4724
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4678: LD_EXP 24
4682: PUSH
4683: LD_EXP 19
4687: PUSH
4688: LD_OWVAR 2
4692: ARRAY
4693: ARRAY
4694: PUSH
4695: LD_INT 1
4697: ARRAY
4698: PPUSH
4699: LD_EXP 24
4703: PUSH
4704: LD_EXP 19
4708: PUSH
4709: LD_OWVAR 2
4713: ARRAY
4714: ARRAY
4715: PUSH
4716: LD_INT 2
4718: ARRAY
4719: PPUSH
4720: CALL_OW 86
// end ; AnimateTrees ( true ) ;
4724: LD_INT 1
4726: PPUSH
4727: CALL_OW 573
// InitApeman ;
4731: CALL 4954 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] ;
4735: LD_ADDR_EXP 56
4739: PUSH
4740: LD_INT 8
4742: PUSH
4743: LD_INT 11
4745: PUSH
4746: LD_INT 9
4748: PUSH
4749: LD_INT 10
4751: PUSH
4752: EMPTY
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: ST_TO_ADDR
// BeginBuildUp ;
4758: CALL 11319 0 0
// end ; end_of_file
4762: END
// every 20 20$00 trigger apemanNumber do
4763: LD_EXP 30
4767: IFFALSE 4800
4769: GO 4771
4771: DISABLE
// begin enable ;
4772: ENABLE
// if apeLevel >= 8 then
4773: LD_EXP 35
4777: PUSH
4778: LD_INT 8
4780: GREATEREQUAL
4781: IFFALSE 4786
// disable else
4783: DISABLE
4784: GO 4800
// apeLevel := apeLevel + 1 ;
4786: LD_ADDR_EXP 35
4790: PUSH
4791: LD_EXP 35
4795: PUSH
4796: LD_INT 1
4798: PLUS
4799: ST_TO_ADDR
// end ;
4800: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
4801: LD_EXP 30
4805: PUSH
4806: LD_EXP 31
4810: LESS
4811: IFFALSE 4951
4813: GO 4815
4815: DISABLE
4816: LD_INT 0
4818: PPUSH
4819: PPUSH
4820: PPUSH
4821: PPUSH
// begin enable ;
4822: ENABLE
// for i := 1 to apemanPos do
4823: LD_ADDR_VAR 0 1
4827: PUSH
4828: DOUBLE
4829: LD_INT 1
4831: DEC
4832: ST_TO_ADDR
4833: LD_EXP 33
4837: PUSH
4838: FOR_TO
4839: IFFALSE 4949
// begin if apemanPlayerCount [ i ] then
4841: LD_EXP 34
4845: PUSH
4846: LD_VAR 0 1
4850: ARRAY
4851: IFFALSE 4947
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
4853: LD_EXP 34
4857: PUSH
4858: LD_VAR 0 1
4862: ARRAY
4863: PUSH
4864: LD_EXP 33
4868: PUSH
4869: LD_VAR 0 1
4873: ARRAY
4874: GREATER
4875: IFFALSE 4947
// begin ape := PrepareApeman ;
4877: LD_ADDR_VAR 0 2
4881: PUSH
4882: CALL 5454 0 0
4886: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
4887: LD_VAR 0 2
4891: PPUSH
4892: LD_EXP 36
4896: PUSH
4897: LD_VAR 0 1
4901: ARRAY
4902: PPUSH
4903: LD_INT 0
4905: PPUSH
4906: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
4910: LD_ADDR_EXP 33
4914: PUSH
4915: LD_EXP 33
4919: PPUSH
4920: LD_VAR 0 1
4924: PPUSH
4925: LD_EXP 33
4929: PUSH
4930: LD_VAR 0 1
4934: ARRAY
4935: PUSH
4936: LD_VAR 0 2
4940: UNION
4941: PPUSH
4942: CALL_OW 1
4946: ST_TO_ADDR
// end ; end ; end ;
4947: GO 4838
4949: POP
4950: POP
// end ;
4951: PPOPN 4
4953: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
4954: LD_INT 0
4956: PPUSH
4957: PPUSH
4958: PPUSH
4959: PPUSH
4960: PPUSH
4961: PPUSH
4962: PPUSH
// playersAmount := 0 ;
4963: LD_ADDR_VAR 0 3
4967: PUSH
4968: LD_INT 0
4970: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , ] ;
4971: LD_ADDR_VAR 0 7
4975: PUSH
4976: LD_INT 13
4978: PUSH
4979: LD_INT 14
4981: PUSH
4982: LD_INT 15
4984: PUSH
4985: LD_INT 16
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: LIST
4992: LIST
4993: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4994: LD_ADDR_EXP 36
4998: PUSH
4999: LD_INT 0
5001: PUSH
5002: LD_INT 0
5004: PUSH
5005: LD_INT 0
5007: PUSH
5008: LD_INT 0
5010: PUSH
5011: LD_INT 0
5013: PUSH
5014: LD_INT 0
5016: PUSH
5017: LD_INT 0
5019: PUSH
5020: LD_INT 0
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: ST_TO_ADDR
// for j = 1 to Side_Positions do
5033: LD_ADDR_VAR 0 4
5037: PUSH
5038: DOUBLE
5039: LD_INT 1
5041: DEC
5042: ST_TO_ADDR
5043: LD_EXP 19
5047: PUSH
5048: FOR_TO
5049: IFFALSE 5116
// if Side_Positions [ j ] then
5051: LD_EXP 19
5055: PUSH
5056: LD_VAR 0 4
5060: ARRAY
5061: IFFALSE 5114
// begin playersAmount := playersAmount + 1 ;
5063: LD_ADDR_VAR 0 3
5067: PUSH
5068: LD_VAR 0 3
5072: PUSH
5073: LD_INT 1
5075: PLUS
5076: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5077: LD_ADDR_EXP 36
5081: PUSH
5082: LD_EXP 36
5086: PPUSH
5087: LD_VAR 0 4
5091: PPUSH
5092: LD_VAR 0 7
5096: PUSH
5097: LD_EXP 19
5101: PUSH
5102: LD_VAR 0 4
5106: ARRAY
5107: ARRAY
5108: PPUSH
5109: CALL_OW 1
5113: ST_TO_ADDR
// end ;
5114: GO 5048
5116: POP
5117: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5118: LD_ADDR_EXP 32
5122: PUSH
5123: LD_INT 3
5125: PUSH
5126: LD_EXP 13
5130: MUL
5131: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5132: LD_ADDR_EXP 30
5136: PUSH
5137: LD_VAR 0 3
5141: PUSH
5142: LD_EXP 32
5146: MUL
5147: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5148: LD_ADDR_EXP 31
5152: PUSH
5153: LD_EXP 30
5157: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5158: LD_ADDR_EXP 33
5162: PUSH
5163: LD_INT 0
5165: PUSH
5166: LD_INT 0
5168: PUSH
5169: LD_INT 0
5171: PUSH
5172: LD_INT 0
5174: PUSH
5175: LD_INT 0
5177: PUSH
5178: LD_INT 0
5180: PUSH
5181: LD_INT 0
5183: PUSH
5184: LD_INT 0
5186: PUSH
5187: EMPTY
5188: LIST
5189: LIST
5190: LIST
5191: LIST
5192: LIST
5193: LIST
5194: LIST
5195: LIST
5196: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5197: LD_ADDR_EXP 34
5201: PUSH
5202: LD_INT 0
5204: PUSH
5205: LD_INT 0
5207: PUSH
5208: LD_INT 0
5210: PUSH
5211: LD_INT 0
5213: PUSH
5214: LD_INT 0
5216: PUSH
5217: LD_INT 0
5219: PUSH
5220: LD_INT 0
5222: PUSH
5223: LD_INT 0
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: ST_TO_ADDR
// apeLevel := 1 ;
5236: LD_ADDR_EXP 35
5240: PUSH
5241: LD_INT 1
5243: ST_TO_ADDR
// if not apemanNumber then
5244: LD_EXP 30
5248: NOT
5249: IFFALSE 5253
// exit ;
5251: GO 5449
// for i := 1 to apemanPerPlayer do
5253: LD_ADDR_VAR 0 2
5257: PUSH
5258: DOUBLE
5259: LD_INT 1
5261: DEC
5262: ST_TO_ADDR
5263: LD_EXP 32
5267: PUSH
5268: FOR_TO
5269: IFFALSE 5447
// begin for j := 1 to Side_Positions do
5271: LD_ADDR_VAR 0 4
5275: PUSH
5276: DOUBLE
5277: LD_INT 1
5279: DEC
5280: ST_TO_ADDR
5281: LD_EXP 19
5285: PUSH
5286: FOR_TO
5287: IFFALSE 5443
// if Side_Positions [ j ] then
5289: LD_EXP 19
5293: PUSH
5294: LD_VAR 0 4
5298: ARRAY
5299: IFFALSE 5441
// begin pos := Side_Positions [ j ] ;
5301: LD_ADDR_VAR 0 6
5305: PUSH
5306: LD_EXP 19
5310: PUSH
5311: LD_VAR 0 4
5315: ARRAY
5316: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5317: LD_ADDR_EXP 34
5321: PUSH
5322: LD_EXP 34
5326: PPUSH
5327: LD_VAR 0 4
5331: PPUSH
5332: LD_EXP 34
5336: PUSH
5337: LD_VAR 0 4
5341: ARRAY
5342: PUSH
5343: LD_INT 1
5345: PLUS
5346: PPUSH
5347: CALL_OW 1
5351: ST_TO_ADDR
// ape := PrepareApeman ;
5352: LD_ADDR_VAR 0 5
5356: PUSH
5357: CALL 5454 0 0
5361: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5362: LD_ADDR_EXP 33
5366: PUSH
5367: LD_EXP 33
5371: PPUSH
5372: LD_VAR 0 4
5376: PPUSH
5377: LD_EXP 33
5381: PUSH
5382: LD_VAR 0 4
5386: ARRAY
5387: PPUSH
5388: LD_EXP 33
5392: PUSH
5393: LD_VAR 0 4
5397: ARRAY
5398: PUSH
5399: LD_INT 1
5401: PLUS
5402: PPUSH
5403: LD_VAR 0 5
5407: PPUSH
5408: CALL_OW 1
5412: PPUSH
5413: CALL_OW 1
5417: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5418: LD_VAR 0 5
5422: PPUSH
5423: LD_EXP 36
5427: PUSH
5428: LD_VAR 0 4
5432: ARRAY
5433: PPUSH
5434: LD_INT 0
5436: PPUSH
5437: CALL_OW 49
// end ;
5441: GO 5286
5443: POP
5444: POP
// end ;
5445: GO 5268
5447: POP
5448: POP
// end ;
5449: LD_VAR 0 1
5453: RET
// export function PrepareApeman ; var bonus ; begin
5454: LD_INT 0
5456: PPUSH
5457: PPUSH
// uc_side := 0 ;
5458: LD_ADDR_OWVAR 20
5462: PUSH
5463: LD_INT 0
5465: ST_TO_ADDR
// uc_nation := 0 ;
5466: LD_ADDR_OWVAR 21
5470: PUSH
5471: LD_INT 0
5473: ST_TO_ADDR
// InitHc ;
5474: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
5478: LD_ADDR_VAR 0 2
5482: PUSH
5483: LD_INT 1
5485: NEG
5486: PUSH
5487: LD_INT 0
5489: PUSH
5490: LD_INT 1
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: LIST
5497: PUSH
5498: LD_OWVAR 1
5502: PUSH
5503: LD_INT 3
5505: MOD
5506: PUSH
5507: LD_INT 1
5509: PLUS
5510: ARRAY
5511: ST_TO_ADDR
// hc_class := class_apeman ;
5512: LD_ADDR_OWVAR 28
5516: PUSH
5517: LD_INT 12
5519: ST_TO_ADDR
// hc_gallery :=  ;
5520: LD_ADDR_OWVAR 33
5524: PUSH
5525: LD_STRING 
5527: ST_TO_ADDR
// hc_name :=  ;
5528: LD_ADDR_OWVAR 26
5532: PUSH
5533: LD_STRING 
5535: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
5536: LD_ADDR_OWVAR 31
5540: PUSH
5541: LD_EXP 35
5545: PUSH
5546: LD_VAR 0 2
5550: PLUS
5551: PUSH
5552: LD_EXP 35
5556: PUSH
5557: LD_VAR 0 2
5561: PLUS
5562: PUSH
5563: LD_EXP 35
5567: PUSH
5568: LD_VAR 0 2
5572: PLUS
5573: PUSH
5574: LD_EXP 35
5578: PUSH
5579: LD_VAR 0 2
5583: PLUS
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
5591: LD_ADDR_OWVAR 35
5595: PUSH
5596: LD_INT 10
5598: PUSH
5599: LD_VAR 0 2
5603: MUL
5604: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5605: LD_ADDR_OWVAR 29
5609: PUSH
5610: LD_INT 12
5612: PUSH
5613: LD_INT 10
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: ST_TO_ADDR
// result := CreateHuman ;
5620: LD_ADDR_VAR 0 1
5624: PUSH
5625: CALL_OW 44
5629: ST_TO_ADDR
// end ;
5630: LD_VAR 0 1
5634: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
5635: LD_INT 0
5637: PPUSH
5638: PPUSH
5639: PPUSH
// if not ape then
5640: LD_VAR 0 1
5644: NOT
5645: IFFALSE 5649
// exit ;
5647: GO 5774
// side := GetSide ( ape ) ;
5649: LD_ADDR_VAR 0 3
5653: PUSH
5654: LD_VAR 0 1
5658: PPUSH
5659: CALL_OW 255
5663: ST_TO_ADDR
// if not side then
5664: LD_VAR 0 3
5668: NOT
5669: IFFALSE 5723
// begin for i = 1 to apemanPos do
5671: LD_ADDR_VAR 0 4
5675: PUSH
5676: DOUBLE
5677: LD_INT 1
5679: DEC
5680: ST_TO_ADDR
5681: LD_EXP 33
5685: PUSH
5686: FOR_TO
5687: IFFALSE 5721
// if ape in apemanPos [ i ] then
5689: LD_VAR 0 1
5693: PUSH
5694: LD_EXP 33
5698: PUSH
5699: LD_VAR 0 4
5703: ARRAY
5704: IN
5705: IFFALSE 5719
// begin side := i ;
5707: LD_ADDR_VAR 0 3
5711: PUSH
5712: LD_VAR 0 4
5716: ST_TO_ADDR
// break ;
5717: GO 5721
// end ;
5719: GO 5686
5721: POP
5722: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
5723: LD_ADDR_EXP 33
5727: PUSH
5728: LD_EXP 33
5732: PPUSH
5733: LD_VAR 0 3
5737: PPUSH
5738: LD_EXP 33
5742: PUSH
5743: LD_VAR 0 3
5747: ARRAY
5748: PUSH
5749: LD_VAR 0 1
5753: DIFF
5754: PPUSH
5755: CALL_OW 1
5759: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
5760: LD_ADDR_EXP 30
5764: PUSH
5765: LD_EXP 30
5769: PUSH
5770: LD_INT 1
5772: MINUS
5773: ST_TO_ADDR
// end ; end_of_file
5774: LD_VAR 0 2
5778: RET
// var shipment , respawn , inqueue ; export function init_shipments_and_respawning ; begin
5779: LD_INT 0
5781: PPUSH
// respawn := Rand ( 1 , 8 ) ;
5782: LD_ADDR_LOC 10
5786: PUSH
5787: LD_INT 1
5789: PPUSH
5790: LD_INT 8
5792: PPUSH
5793: CALL_OW 12
5797: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5798: LD_ADDR_LOC 11
5802: PUSH
5803: LD_INT 0
5805: PUSH
5806: LD_INT 0
5808: PUSH
5809: LD_INT 0
5811: PUSH
5812: LD_INT 0
5814: PUSH
5815: LD_INT 0
5817: PUSH
5818: LD_INT 0
5820: PUSH
5821: LD_INT 0
5823: PUSH
5824: LD_INT 0
5826: PUSH
5827: EMPTY
5828: LIST
5829: LIST
5830: LIST
5831: LIST
5832: LIST
5833: LIST
5834: LIST
5835: LIST
5836: ST_TO_ADDR
// end ;
5837: LD_VAR 0 1
5841: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
5842: GO 5844
5844: DISABLE
5845: LD_INT 0
5847: PPUSH
5848: PPUSH
5849: PPUSH
5850: PPUSH
// begin if respawning_time_max = 0 then
5851: LD_EXP 11
5855: PUSH
5856: LD_INT 0
5858: EQUAL
5859: IFFALSE 5863
// exit ;
5861: GO 6317
// if respawn = 8 then
5863: LD_LOC 10
5867: PUSH
5868: LD_INT 8
5870: EQUAL
5871: IFFALSE 5883
// respawn := 1 else
5873: LD_ADDR_LOC 10
5877: PUSH
5878: LD_INT 1
5880: ST_TO_ADDR
5881: GO 5897
// respawn := respawn + 1 ;
5883: LD_ADDR_LOC 10
5887: PUSH
5888: LD_LOC 10
5892: PUSH
5893: LD_INT 1
5895: PLUS
5896: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
5897: LD_EXP 19
5901: PUSH
5902: LD_LOC 10
5906: ARRAY
5907: PUSH
5908: LD_LOC 11
5912: PUSH
5913: LD_LOC 10
5917: ARRAY
5918: NOT
5919: AND
5920: IFFALSE 6316
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
5922: LD_ADDR_VAR 0 1
5926: PUSH
5927: LD_INT 21
5929: PUSH
5930: LD_INT 1
5932: PUSH
5933: EMPTY
5934: LIST
5935: LIST
5936: PUSH
5937: LD_INT 22
5939: PUSH
5940: LD_LOC 10
5944: PUSH
5945: EMPTY
5946: LIST
5947: LIST
5948: PUSH
5949: LD_INT 3
5951: PUSH
5952: LD_INT 23
5954: PUSH
5955: LD_INT 0
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: PUSH
5962: EMPTY
5963: LIST
5964: LIST
5965: LIST
5966: LIST
5967: PPUSH
5968: CALL_OW 69
5972: ST_TO_ADDR
// if n < number_of_people then
5973: LD_VAR 0 1
5977: PUSH
5978: LD_EXP 4
5982: LESS
5983: IFFALSE 6313
// begin aktresp := respawn ;
5985: LD_ADDR_VAR 0 3
5989: PUSH
5990: LD_LOC 10
5994: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
5995: LD_ADDR_LOC 11
5999: PUSH
6000: LD_LOC 11
6004: PPUSH
6005: LD_VAR 0 3
6009: PPUSH
6010: LD_INT 1
6012: PPUSH
6013: CALL_OW 1
6017: ST_TO_ADDR
// enable ;
6018: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
6019: LD_EXP 10
6023: PPUSH
6024: LD_EXP 11
6028: PPUSH
6029: CALL_OW 12
6033: PPUSH
6034: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
6038: LD_ADDR_LOC 11
6042: PUSH
6043: LD_LOC 11
6047: PPUSH
6048: LD_VAR 0 3
6052: PPUSH
6053: LD_INT 0
6055: PPUSH
6056: CALL_OW 1
6060: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
6061: LD_ADDR_VAR 0 2
6065: PUSH
6066: LD_INT 21
6068: PUSH
6069: LD_INT 3
6071: PUSH
6072: EMPTY
6073: LIST
6074: LIST
6075: PUSH
6076: LD_INT 2
6078: PUSH
6079: LD_INT 30
6081: PUSH
6082: LD_INT 0
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: PUSH
6089: LD_INT 30
6091: PUSH
6092: LD_INT 1
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: LIST
6103: PUSH
6104: LD_INT 50
6106: PUSH
6107: EMPTY
6108: LIST
6109: PUSH
6110: LD_INT 22
6112: PUSH
6113: LD_VAR 0 3
6117: PUSH
6118: EMPTY
6119: LIST
6120: LIST
6121: PUSH
6122: EMPTY
6123: LIST
6124: LIST
6125: LIST
6126: LIST
6127: PPUSH
6128: CALL_OW 69
6132: ST_TO_ADDR
// if building_list = 0 then
6133: LD_VAR 0 2
6137: PUSH
6138: LD_INT 0
6140: EQUAL
6141: IFFALSE 6145
// exit ;
6143: GO 6317
// hc_name :=  ;
6145: LD_ADDR_OWVAR 26
6149: PUSH
6150: LD_STRING 
6152: ST_TO_ADDR
// hc_importance := 0 ;
6153: LD_ADDR_OWVAR 32
6157: PUSH
6158: LD_INT 0
6160: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6161: LD_INT 0
6163: PPUSH
6164: LD_INT 0
6166: PPUSH
6167: LD_EXP 5
6171: PUSH
6172: LD_INT 2
6174: DIV
6175: PPUSH
6176: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
6180: LD_ADDR_OWVAR 21
6184: PUSH
6185: LD_EXP 20
6189: PUSH
6190: LD_VAR 0 3
6194: ARRAY
6195: ST_TO_ADDR
// uc_side := aktresp ;
6196: LD_ADDR_OWVAR 20
6200: PUSH
6201: LD_VAR 0 3
6205: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
6206: LD_ADDR_VAR 0 4
6210: PUSH
6211: LD_VAR 0 2
6215: PUSH
6216: LD_INT 1
6218: PPUSH
6219: LD_VAR 0 2
6223: PUSH
6224: LD_INT 0
6226: PLUS
6227: PPUSH
6228: CALL_OW 12
6232: ARRAY
6233: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
6234: LD_VAR 0 4
6238: PPUSH
6239: CALL_OW 266
6243: PUSH
6244: LD_INT 0
6246: PUSH
6247: LD_INT 1
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: IN
6254: IFFALSE 6266
// n = 25 else
6256: LD_ADDR_VAR 0 1
6260: PUSH
6261: LD_INT 25
6263: ST_TO_ADDR
6264: GO 6274
// n = 10 ;
6266: LD_ADDR_VAR 0 1
6270: PUSH
6271: LD_INT 10
6273: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
6274: CALL_OW 44
6278: PPUSH
6279: LD_VAR 0 4
6283: PPUSH
6284: CALL_OW 250
6288: PPUSH
6289: LD_VAR 0 4
6293: PPUSH
6294: CALL_OW 251
6298: PPUSH
6299: LD_VAR 0 1
6303: PPUSH
6304: LD_INT 1
6306: PPUSH
6307: CALL_OW 50
// end else
6311: GO 6314
// enable ;
6313: ENABLE
// end else
6314: GO 6317
// enable ;
6316: ENABLE
// end ;
6317: PPOPN 4
6319: END
// every 1 1$0 + 0 0$0.3 do
6320: GO 6322
6322: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
6323: LD_INT 4
6325: PPUSH
6326: LD_INT 5
6328: PPUSH
6329: CALL_OW 12
6333: PPUSH
6334: LD_INT 1
6336: PPUSH
6337: CALL_OW 57
// enable ;
6341: ENABLE
// end ;
6342: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
6343: GO 6345
6345: DISABLE
6346: LD_INT 0
6348: PPUSH
6349: PPUSH
// begin case tick of 1 .. 1 1$0 :
6350: LD_OWVAR 1
6354: PUSH
6355: LD_INT 1
6357: DOUBLE
6358: GREATEREQUAL
6359: IFFALSE 6367
6361: LD_INT 2100
6363: DOUBLE
6364: LESSEQUAL
6365: IFTRUE 6369
6367: GO 6397
6369: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
6370: LD_EXP 8
6374: PUSH
6375: LD_INT 100
6377: DIVREAL
6378: PUSH
6379: LD_INT 350
6381: PPUSH
6382: LD_INT 1050
6384: PPUSH
6385: CALL_OW 12
6389: MUL
6390: PPUSH
6391: CALL_OW 67
6395: GO 6699
6397: LD_INT 2100
6399: PUSH
6400: LD_INT 1
6402: PLUS
6403: DOUBLE
6404: GREATEREQUAL
6405: IFFALSE 6413
6407: LD_INT 10500
6409: DOUBLE
6410: LESSEQUAL
6411: IFTRUE 6415
6413: GO 6443
6415: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
6416: LD_EXP 8
6420: PUSH
6421: LD_INT 100
6423: DIVREAL
6424: PUSH
6425: LD_INT 1050
6427: PPUSH
6428: LD_INT 1575
6430: PPUSH
6431: CALL_OW 12
6435: MUL
6436: PPUSH
6437: CALL_OW 67
6441: GO 6699
6443: LD_INT 10500
6445: PUSH
6446: LD_INT 1
6448: PLUS
6449: DOUBLE
6450: GREATEREQUAL
6451: IFFALSE 6459
6453: LD_INT 21000
6455: DOUBLE
6456: LESSEQUAL
6457: IFTRUE 6461
6459: GO 6489
6461: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
6462: LD_EXP 8
6466: PUSH
6467: LD_INT 100
6469: DIVREAL
6470: PUSH
6471: LD_INT 1575
6473: PPUSH
6474: LD_INT 2100
6476: PPUSH
6477: CALL_OW 12
6481: MUL
6482: PPUSH
6483: CALL_OW 67
6487: GO 6699
6489: LD_INT 21000
6491: PUSH
6492: LD_INT 1
6494: PLUS
6495: DOUBLE
6496: GREATEREQUAL
6497: IFFALSE 6505
6499: LD_INT 42000
6501: DOUBLE
6502: LESSEQUAL
6503: IFTRUE 6507
6505: GO 6535
6507: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
6508: LD_EXP 8
6512: PUSH
6513: LD_INT 100
6515: DIVREAL
6516: PUSH
6517: LD_INT 2100
6519: PPUSH
6520: LD_INT 2625
6522: PPUSH
6523: CALL_OW 12
6527: MUL
6528: PPUSH
6529: CALL_OW 67
6533: GO 6699
6535: LD_INT 42000
6537: PUSH
6538: LD_INT 1
6540: PLUS
6541: DOUBLE
6542: GREATEREQUAL
6543: IFFALSE 6551
6545: LD_INT 63000
6547: DOUBLE
6548: LESSEQUAL
6549: IFTRUE 6553
6551: GO 6581
6553: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
6554: LD_EXP 8
6558: PUSH
6559: LD_INT 100
6561: DIVREAL
6562: PUSH
6563: LD_INT 2625
6565: PPUSH
6566: LD_INT 3150
6568: PPUSH
6569: CALL_OW 12
6573: MUL
6574: PPUSH
6575: CALL_OW 67
6579: GO 6699
6581: LD_INT 63000
6583: PUSH
6584: LD_INT 1
6586: PLUS
6587: DOUBLE
6588: GREATEREQUAL
6589: IFFALSE 6597
6591: LD_INT 105000
6593: DOUBLE
6594: LESSEQUAL
6595: IFTRUE 6599
6597: GO 6627
6599: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
6600: LD_EXP 8
6604: PUSH
6605: LD_INT 100
6607: DIVREAL
6608: PUSH
6609: LD_INT 3150
6611: PPUSH
6612: LD_INT 3675
6614: PPUSH
6615: CALL_OW 12
6619: MUL
6620: PPUSH
6621: CALL_OW 67
6625: GO 6699
6627: LD_INT 105000
6629: PUSH
6630: LD_INT 1
6632: PLUS
6633: DOUBLE
6634: GREATEREQUAL
6635: IFFALSE 6643
6637: LD_INT 630000
6639: DOUBLE
6640: LESSEQUAL
6641: IFTRUE 6645
6643: GO 6673
6645: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
6646: LD_EXP 8
6650: PUSH
6651: LD_INT 100
6653: DIVREAL
6654: PUSH
6655: LD_INT 3675
6657: PPUSH
6658: LD_INT 4200
6660: PPUSH
6661: CALL_OW 12
6665: MUL
6666: PPUSH
6667: CALL_OW 67
6671: GO 6699
6673: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
6674: LD_EXP 8
6678: PUSH
6679: LD_INT 100
6681: DIVREAL
6682: PUSH
6683: LD_INT 4200
6685: PPUSH
6686: LD_INT 5250
6688: PPUSH
6689: CALL_OW 12
6693: MUL
6694: PPUSH
6695: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
6699: LD_ADDR_VAR 0 2
6703: PUSH
6704: LD_INT 3
6706: PPUSH
6707: LD_INT 5
6709: PPUSH
6710: CALL_OW 12
6714: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
6715: LD_ADDR_VAR 0 1
6719: PUSH
6720: LD_EXP 19
6724: PUSH
6725: LD_INT 0
6727: PUSH
6728: EMPTY
6729: LIST
6730: DIFF
6731: PUSH
6732: FOR_IN
6733: IFFALSE 6773
// CreateCratesArea ( amount , [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] [ i ] , true ) ;
6735: LD_VAR 0 2
6739: PPUSH
6740: LD_INT 8
6742: PUSH
6743: LD_INT 11
6745: PUSH
6746: LD_INT 9
6748: PUSH
6749: LD_INT 10
6751: PUSH
6752: EMPTY
6753: LIST
6754: LIST
6755: LIST
6756: LIST
6757: PUSH
6758: LD_VAR 0 1
6762: ARRAY
6763: PPUSH
6764: LD_INT 1
6766: PPUSH
6767: CALL_OW 55
6771: GO 6732
6773: POP
6774: POP
// enable ;
6775: ENABLE
// end ; end_of_file
6776: PPOPN 2
6778: END
// var activated ; var hadziove ; every 0 0$1 do
6779: GO 6781
6781: DISABLE
// begin wait ( Rand ( 3 3$0 , 10 10$0 ) ) ;
6782: LD_INT 6300
6784: PPUSH
6785: LD_INT 21000
6787: PPUSH
6788: CALL_OW 12
6792: PPUSH
6793: CALL_OW 67
// SetAreaMapShow ( Tree , 1 ) ;
6797: LD_INT 3
6799: PPUSH
6800: LD_INT 1
6802: PPUSH
6803: CALL_OW 424
// activated := true ;
6807: LD_ADDR_LOC 12
6811: PUSH
6812: LD_INT 1
6814: ST_TO_ADDR
// end ;
6815: END
// every 0 0$1 trigger activated do var i , un ;
6816: LD_LOC 12
6820: IFFALSE 7065
6822: GO 6824
6824: DISABLE
6825: LD_INT 0
6827: PPUSH
6828: PPUSH
// begin if not def_tree_function then
6829: LD_EXP 1
6833: NOT
6834: IFFALSE 6838
// exit ;
6836: GO 7065
// ExtraStrings := [ #MultiSmall-Tree & def_tree_function ] ;
6838: LD_ADDR_EXP 54
6842: PUSH
6843: LD_STRING #MultiSmall-Tree
6845: PUSH
6846: LD_EXP 1
6850: STR
6851: PUSH
6852: EMPTY
6853: LIST
6854: ST_TO_ADDR
// for un in FilterUnitsInArea ( Tree , [ f_type , unit_human ] ) diff hadziove do
6855: LD_ADDR_VAR 0 2
6859: PUSH
6860: LD_INT 3
6862: PPUSH
6863: LD_INT 21
6865: PUSH
6866: LD_INT 1
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: PPUSH
6873: CALL_OW 70
6877: PUSH
6878: LD_LOC 13
6882: DIFF
6883: PUSH
6884: FOR_IN
6885: IFFALSE 7046
// begin if GetClass ( un ) in [ class_soldier , class_engineer , class_mechanic , class_scientistic , class_sniper , class_bazooker , class_mortar ] then
6887: LD_VAR 0 2
6891: PPUSH
6892: CALL_OW 257
6896: PUSH
6897: LD_INT 1
6899: PUSH
6900: LD_INT 2
6902: PUSH
6903: LD_INT 3
6905: PUSH
6906: LD_INT 4
6908: PUSH
6909: LD_INT 5
6911: PUSH
6912: LD_INT 9
6914: PUSH
6915: LD_INT 8
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: IN
6927: IFFALSE 6976
// for i := 1 to 4 do
6929: LD_ADDR_VAR 0 1
6933: PUSH
6934: DOUBLE
6935: LD_INT 1
6937: DEC
6938: ST_TO_ADDR
6939: LD_INT 4
6941: PUSH
6942: FOR_TO
6943: IFFALSE 6972
// GiveSkillBonus ( un , i , tree_function [ i ] ) else
6945: LD_VAR 0 2
6949: PPUSH
6950: LD_VAR 0 1
6954: PPUSH
6955: LD_EXP 14
6959: PUSH
6960: LD_VAR 0 1
6964: ARRAY
6965: PPUSH
6966: CALL_OW 238
6970: GO 6942
6972: POP
6973: POP
6974: GO 7044
// if un in [ class_apeman , class_apeman_engineer , class_apeman_kamikaze , class_apeman_soldier ] then
6976: LD_VAR 0 2
6980: PUSH
6981: LD_INT 12
6983: PUSH
6984: LD_INT 16
6986: PUSH
6987: LD_INT 17
6989: PUSH
6990: LD_INT 15
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: IN
6999: IFFALSE 7044
// for i := 1 to 4 do
7001: LD_ADDR_VAR 0 1
7005: PUSH
7006: DOUBLE
7007: LD_INT 1
7009: DEC
7010: ST_TO_ADDR
7011: LD_INT 4
7013: PUSH
7014: FOR_TO
7015: IFFALSE 7042
// GiveSkillBonus ( un , i , tree_function [ 5 ] ) ;
7017: LD_VAR 0 2
7021: PPUSH
7022: LD_VAR 0 1
7026: PPUSH
7027: LD_EXP 14
7031: PUSH
7032: LD_INT 5
7034: ARRAY
7035: PPUSH
7036: CALL_OW 238
7040: GO 7014
7042: POP
7043: POP
// end ;
7044: GO 6884
7046: POP
7047: POP
// hadziove := hadziove ^ un ;
7048: LD_ADDR_LOC 13
7052: PUSH
7053: LD_LOC 13
7057: PUSH
7058: LD_VAR 0 2
7062: ADD
7063: ST_TO_ADDR
// enable ;
7064: ENABLE
// end ; end_of_file
7065: PPOPN 2
7067: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7068: LD_VAR 0 1
7072: PPUSH
7073: CALL_OW 266
7077: PUSH
7078: LD_INT 0
7080: PUSH
7081: LD_INT 1
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: IN
7088: IFFALSE 7113
// SetBName ( b , @ & GetSide ( b ) ) ;
7090: LD_VAR 0 1
7094: PPUSH
7095: LD_STRING @
7097: PUSH
7098: LD_VAR 0 1
7102: PPUSH
7103: CALL_OW 255
7107: STR
7108: PPUSH
7109: CALL_OW 500
// if def_game_rules then
7113: LD_EXP 38
7117: IFFALSE 7154
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
7119: LD_VAR 0 1
7123: PPUSH
7124: LD_VAR 0 1
7128: PPUSH
7129: CALL_OW 266
7133: PPUSH
7134: LD_VAR 0 1
7138: PPUSH
7139: CALL_OW 255
7143: PPUSH
7144: LD_INT 0
7146: PPUSH
7147: LD_INT 1
7149: PPUSH
7150: CALL 10574 0 5
// end ;
7154: PPOPN 2
7156: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7157: LD_VAR 0 1
7161: PPUSH
7162: CALL_OW 266
7166: PUSH
7167: LD_INT 0
7169: PUSH
7170: LD_INT 1
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: IN
7177: IFFALSE 7202
// SetBName ( b , @ & GetSide ( b ) ) ;
7179: LD_VAR 0 1
7183: PPUSH
7184: LD_STRING @
7186: PUSH
7187: LD_VAR 0 1
7191: PPUSH
7192: CALL_OW 255
7196: STR
7197: PPUSH
7198: CALL_OW 500
// if def_game_rules then
7202: LD_EXP 38
7206: IFFALSE 7245
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7208: LD_VAR 0 1
7212: PPUSH
7213: LD_VAR 0 1
7217: PPUSH
7218: CALL_OW 266
7222: PPUSH
7223: LD_VAR 0 1
7227: PPUSH
7228: CALL_OW 255
7232: PPUSH
7233: LD_VAR 0 2
7237: PPUSH
7238: LD_INT 1
7240: PPUSH
7241: CALL 10574 0 5
// end ;
7245: PPOPN 3
7247: END
// on VehicleConstructed ( veh , fac ) do var side ;
7248: LD_INT 0
7250: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7251: LD_VAR 0 1
7255: PPUSH
7256: CALL_OW 263
7260: PUSH
7261: LD_INT 5
7263: EQUAL
7264: IFFALSE 7406
// begin side := GetSide ( veh ) ;
7266: LD_ADDR_VAR 0 3
7270: PUSH
7271: LD_VAR 0 1
7275: PPUSH
7276: CALL_OW 255
7280: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7281: LD_ADDR_EXP 33
7285: PUSH
7286: LD_EXP 33
7290: PPUSH
7291: LD_VAR 0 3
7295: PPUSH
7296: LD_EXP 33
7300: PUSH
7301: LD_VAR 0 3
7305: ARRAY
7306: PPUSH
7307: LD_INT 52
7309: PUSH
7310: EMPTY
7311: LIST
7312: PPUSH
7313: CALL_OW 72
7317: PUSH
7318: LD_INT 22
7320: PUSH
7321: LD_VAR 0 3
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: PUSH
7330: LD_INT 2
7332: PUSH
7333: LD_INT 33
7335: PUSH
7336: LD_INT 5
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PUSH
7343: LD_INT 25
7345: PUSH
7346: LD_INT 12
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: PUSH
7353: LD_INT 25
7355: PUSH
7356: LD_INT 15
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: PUSH
7363: LD_INT 25
7365: PUSH
7366: LD_INT 16
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: PUSH
7373: LD_INT 25
7375: PUSH
7376: LD_INT 17
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: LIST
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: PPUSH
7395: CALL_OW 69
7399: UNION
7400: PPUSH
7401: CALL_OW 1
7405: ST_TO_ADDR
// end ; end ;
7406: PPOPN 3
7408: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7409: LD_INT 0
7411: PPUSH
7412: PPUSH
7413: PPUSH
7414: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7415: LD_VAR 0 1
7419: PPUSH
7420: CALL_OW 257
7424: PUSH
7425: LD_INT 12
7427: PUSH
7428: LD_INT 15
7430: PUSH
7431: LD_INT 17
7433: PUSH
7434: LD_INT 16
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: IN
7443: PUSH
7444: LD_VAR 0 1
7448: PPUSH
7449: CALL_OW 263
7453: PUSH
7454: LD_INT 5
7456: EQUAL
7457: OR
7458: IFFALSE 7469
// ApeKilled ( j ) ;
7460: LD_VAR 0 1
7464: PPUSH
7465: CALL 5635 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7469: LD_VAR 0 1
7473: PPUSH
7474: CALL_OW 266
7478: PUSH
7479: LD_INT 0
7481: PUSH
7482: LD_INT 1
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: IN
7489: IFFALSE 7571
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7491: LD_ADDR_VAR 0 4
7495: PUSH
7496: LD_EXP 19
7500: PUSH
7501: LD_VAR 0 1
7505: PPUSH
7506: CALL_OW 255
7510: ARRAY
7511: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7512: LD_ADDR_VAR 0 2
7516: PUSH
7517: LD_EXP 24
7521: PUSH
7522: LD_VAR 0 4
7526: ARRAY
7527: PUSH
7528: LD_INT 1
7530: ARRAY
7531: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7532: LD_ADDR_VAR 0 3
7536: PUSH
7537: LD_EXP 24
7541: PUSH
7542: LD_VAR 0 4
7546: ARRAY
7547: PUSH
7548: LD_INT 2
7550: ARRAY
7551: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7552: LD_VAR 0 2
7556: PPUSH
7557: LD_VAR 0 3
7561: PPUSH
7562: CALL_OW 420
7566: PPUSH
7567: CALL_OW 419
// end ; if def_game_rules then
7571: LD_EXP 38
7575: IFFALSE 7674
// if ( GetType ( j ) = 3 ) then
7577: LD_VAR 0 1
7581: PPUSH
7582: CALL_OW 247
7586: PUSH
7587: LD_INT 3
7589: EQUAL
7590: IFFALSE 7630
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7592: LD_VAR 0 1
7596: PPUSH
7597: LD_VAR 0 1
7601: PPUSH
7602: CALL_OW 266
7606: PPUSH
7607: LD_VAR 0 1
7611: PPUSH
7612: CALL_OW 255
7616: PPUSH
7617: LD_INT 0
7619: PPUSH
7620: LD_INT 1
7622: NEG
7623: PPUSH
7624: CALL 10574 0 5
7628: GO 7674
// if ( GetChassis ( j ) = 25 ) then
7630: LD_VAR 0 1
7634: PPUSH
7635: CALL_OW 265
7639: PUSH
7640: LD_INT 25
7642: EQUAL
7643: IFFALSE 7674
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7645: LD_VAR 0 1
7649: PPUSH
7650: LD_INT 37
7652: PPUSH
7653: LD_VAR 0 1
7657: PPUSH
7658: CALL_OW 255
7662: PPUSH
7663: LD_INT 0
7665: PPUSH
7666: LD_INT 1
7668: NEG
7669: PPUSH
7670: CALL 10574 0 5
// end ;
7674: PPOPN 5
7676: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7677: LD_EXP 38
7681: PUSH
7682: LD_VAR 0 1
7686: PPUSH
7687: CALL_OW 265
7691: PUSH
7692: LD_INT 25
7694: EQUAL
7695: AND
7696: IFFALSE 7728
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
7698: LD_VAR 0 1
7702: PPUSH
7703: LD_INT 37
7705: PPUSH
7706: LD_VAR 0 1
7710: PPUSH
7711: CALL_OW 255
7715: PPUSH
7716: LD_VAR 0 3
7720: PPUSH
7721: LD_INT 1
7723: PPUSH
7724: CALL 10574 0 5
// end ;
7728: PPOPN 4
7730: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7731: LD_VAR 0 1
7735: PPUSH
7736: LD_VAR 0 2
7740: PPUSH
7741: LD_VAR 0 3
7745: PPUSH
7746: LD_OWVAR 2
7750: PPUSH
7751: CALL 11917 0 4
7755: PPOPN 3
7757: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7758: LD_INT 0
7760: PPUSH
7761: PPUSH
// for un in battle_flags_id do
7762: LD_ADDR_VAR 0 2
7766: PUSH
7767: LD_EXP 25
7771: PUSH
7772: FOR_IN
7773: IFFALSE 7848
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7775: LD_VAR 0 2
7779: PPUSH
7780: LD_INT 1
7782: PUSH
7783: LD_LOC 14
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: PUSH
7792: LD_INT 2
7794: PUSH
7795: LD_LOC 14
7799: PUSH
7800: LD_INT 2
7802: DIV
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: PUSH
7808: LD_INT 3
7810: PUSH
7811: LD_LOC 14
7815: PUSH
7816: LD_INT 5
7818: DIV
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: PUSH
7824: LD_INT 20
7826: PUSH
7827: LD_LOC 14
7831: PUSH
7832: EMPTY
7833: LIST
7834: LIST
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: PPUSH
7842: CALL_OW 423
7846: GO 7772
7848: POP
7849: POP
// end ;
7850: LD_VAR 0 1
7854: RET
// every 0 0$0.1 do var un ;
7855: GO 7857
7857: DISABLE
7858: LD_INT 0
7860: PPUSH
// begin if not def_morale_flags then
7861: LD_EXP 47
7865: NOT
7866: IFFALSE 7870
// exit ;
7868: GO 7947
// if not morale_decreasing_time then
7870: LD_EXP 9
7874: NOT
7875: IFFALSE 7879
// exit ;
7877: GO 7947
// strength = 100 ;
7879: LD_ADDR_LOC 14
7883: PUSH
7884: LD_INT 100
7886: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7887: LD_EXP 9
7891: PPUSH
7892: CALL_OW 67
// strength := strength - 1 ;
7896: LD_ADDR_LOC 14
7900: PUSH
7901: LD_LOC 14
7905: PUSH
7906: LD_INT 1
7908: MINUS
7909: ST_TO_ADDR
// Update_Flags ;
7910: CALL 7758 0 0
// until not strength ;
7914: LD_LOC 14
7918: NOT
7919: IFFALSE 7887
// for un in battle_flags_id do
7921: LD_ADDR_VAR 0 1
7925: PUSH
7926: LD_EXP 25
7930: PUSH
7931: FOR_IN
7932: IFFALSE 7945
// KillBattleFlag ( un ) ;
7934: LD_VAR 0 1
7938: PPUSH
7939: CALL_OW 419
7943: GO 7931
7945: POP
7946: POP
// end ; end_of_file
7947: PPOPN 1
7949: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
7950: LD_INT 0
7952: PPUSH
7953: PPUSH
// if ( not IAmSpec ) then
7954: CALL_OW 531
7958: NOT
7959: IFFALSE 7975
// Result := Limits_Info ^  ;
7961: LD_ADDR_VAR 0 1
7965: PUSH
7966: LD_LOC 26
7970: PUSH
7971: LD_STRING 
7973: ADD
7974: ST_TO_ADDR
// for i := 1 to 8 do
7975: LD_ADDR_VAR 0 2
7979: PUSH
7980: DOUBLE
7981: LD_INT 1
7983: DEC
7984: ST_TO_ADDR
7985: LD_INT 8
7987: PUSH
7988: FOR_TO
7989: IFFALSE 8034
// if Cheaters [ i ] then
7991: LD_LOC 27
7995: PUSH
7996: LD_VAR 0 2
8000: ARRAY
8001: IFFALSE 8032
// Result := Result ^ [ #Cheater , i , i ] ;
8003: LD_ADDR_VAR 0 1
8007: PUSH
8008: LD_VAR 0 1
8012: PUSH
8013: LD_STRING #Cheater
8015: PUSH
8016: LD_VAR 0 2
8020: PUSH
8021: LD_VAR 0 2
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: LIST
8030: ADD
8031: ST_TO_ADDR
8032: GO 7988
8034: POP
8035: POP
// end ;
8036: LD_VAR 0 1
8040: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
8041: LD_INT 0
8043: PPUSH
8044: PPUSH
8045: PPUSH
8046: PPUSH
8047: PPUSH
// case Game_Type of 10 :
8048: LD_EXP 37
8052: PUSH
8053: LD_INT 10
8055: DOUBLE
8056: EQUAL
8057: IFTRUE 8061
8059: GO 8072
8061: POP
// def_game_rules := 1 ; 11 :
8062: LD_ADDR_EXP 38
8066: PUSH
8067: LD_INT 1
8069: ST_TO_ADDR
8070: GO 8092
8072: LD_INT 11
8074: DOUBLE
8075: EQUAL
8076: IFTRUE 8080
8078: GO 8091
8080: POP
// def_game_rules := 3 ; end ;
8081: LD_ADDR_EXP 38
8085: PUSH
8086: LD_INT 3
8088: ST_TO_ADDR
8089: GO 8092
8091: POP
// case def_game_rules of 0 :
8092: LD_EXP 38
8096: PUSH
8097: LD_INT 0
8099: DOUBLE
8100: EQUAL
8101: IFTRUE 8105
8103: GO 8110
8105: POP
// exit ; 1 :
8106: GO 10168
8108: GO 10068
8110: LD_INT 1
8112: DOUBLE
8113: EQUAL
8114: IFTRUE 8118
8116: GO 8334
8118: POP
// begin def_base_level := 2 ;
8119: LD_ADDR_EXP 39
8123: PUSH
8124: LD_INT 2
8126: ST_TO_ADDR
// def_amount_of_people := 2 ;
8127: LD_ADDR_EXP 40
8131: PUSH
8132: LD_INT 2
8134: ST_TO_ADDR
// def_skill_level := 1 ;
8135: LD_ADDR_EXP 41
8139: PUSH
8140: LD_INT 1
8142: ST_TO_ADDR
// def_starting_resources := 2 ;
8143: LD_ADDR_EXP 42
8147: PUSH
8148: LD_INT 2
8150: ST_TO_ADDR
// def_shipments_density := 1 ;
8151: LD_ADDR_EXP 43
8155: PUSH
8156: LD_INT 1
8158: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8159: LD_ADDR_EXP 44
8163: PUSH
8164: LD_INT 0
8166: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
8167: LD_ADDR_EXP 45
8171: PUSH
8172: LD_INT 1
8174: ST_TO_ADDR
// def_shared_vision := 1 ;
8175: LD_ADDR_EXP 46
8179: PUSH
8180: LD_INT 1
8182: ST_TO_ADDR
// def_morale_flags := 3 ;
8183: LD_ADDR_EXP 47
8187: PUSH
8188: LD_INT 3
8190: ST_TO_ADDR
// def_siberite_detection := 1 ;
8191: LD_ADDR_EXP 48
8195: PUSH
8196: LD_INT 1
8198: ST_TO_ADDR
// def_people_respawning := 1 ;
8199: LD_ADDR_EXP 49
8203: PUSH
8204: LD_INT 1
8206: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
8207: LD_ADDR_EXP 50
8211: PUSH
8212: LD_INT 1
8214: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8215: LD_ADDR_EXP 51
8219: PUSH
8220: LD_INT 0
8222: ST_TO_ADDR
// def_builduptime := 2 ;
8223: LD_ADDR_EXP 52
8227: PUSH
8228: LD_INT 2
8230: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
8231: LD_ADDR_VAR 0 2
8235: PUSH
8236: EMPTY
8237: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8238: LD_ADDR_VAR 0 3
8242: PUSH
8243: EMPTY
8244: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8245: LD_ADDR_LOC 21
8249: PUSH
8250: EMPTY
8251: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8252: LD_ADDR_LOC 22
8256: PUSH
8257: EMPTY
8258: ST_TO_ADDR
// Banned_Controls := [ ] ;
8259: LD_ADDR_LOC 23
8263: PUSH
8264: EMPTY
8265: ST_TO_ADDR
// Banned_Engines := [ ] ;
8266: LD_ADDR_LOC 24
8270: PUSH
8271: EMPTY
8272: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
8273: LD_ADDR_LOC 19
8277: PUSH
8278: LD_INT 37
8280: PUSH
8281: EMPTY
8282: LIST
8283: PUSH
8284: LD_INT 4
8286: PUSH
8287: LD_INT 5
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: PUSH
8294: LD_INT 31
8296: PUSH
8297: LD_INT 32
8299: PUSH
8300: LD_INT 33
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: LIST
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: LIST
8312: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
8313: LD_ADDR_LOC 20
8317: PUSH
8318: LD_INT 2
8320: PUSH
8321: LD_INT 2
8323: PUSH
8324: LD_INT 4
8326: PUSH
8327: EMPTY
8328: LIST
8329: LIST
8330: LIST
8331: ST_TO_ADDR
// end ; 2 :
8332: GO 10068
8334: LD_INT 2
8336: DOUBLE
8337: EQUAL
8338: IFTRUE 8342
8340: GO 8551
8342: POP
// begin def_base_level := 1 ;
8343: LD_ADDR_EXP 39
8347: PUSH
8348: LD_INT 1
8350: ST_TO_ADDR
// def_amount_of_people := 2 ;
8351: LD_ADDR_EXP 40
8355: PUSH
8356: LD_INT 2
8358: ST_TO_ADDR
// def_skill_level := 3 ;
8359: LD_ADDR_EXP 41
8363: PUSH
8364: LD_INT 3
8366: ST_TO_ADDR
// def_starting_resources := 3 ;
8367: LD_ADDR_EXP 42
8371: PUSH
8372: LD_INT 3
8374: ST_TO_ADDR
// def_shipments_density := 2 ;
8375: LD_ADDR_EXP 43
8379: PUSH
8380: LD_INT 2
8382: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8383: LD_ADDR_EXP 44
8387: PUSH
8388: LD_INT 1
8390: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8391: LD_ADDR_EXP 45
8395: PUSH
8396: LD_INT 2
8398: ST_TO_ADDR
// def_shared_vision := 1 ;
8399: LD_ADDR_EXP 46
8403: PUSH
8404: LD_INT 1
8406: ST_TO_ADDR
// def_morale_flags := 0 ;
8407: LD_ADDR_EXP 47
8411: PUSH
8412: LD_INT 0
8414: ST_TO_ADDR
// def_siberite_detection := 1 ;
8415: LD_ADDR_EXP 48
8419: PUSH
8420: LD_INT 1
8422: ST_TO_ADDR
// def_people_respawning := 0 ;
8423: LD_ADDR_EXP 49
8427: PUSH
8428: LD_INT 0
8430: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
8431: LD_ADDR_EXP 50
8435: PUSH
8436: LD_INT 0
8438: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8439: LD_ADDR_EXP 51
8443: PUSH
8444: LD_INT 0
8446: ST_TO_ADDR
// def_builduptime := 2 ;
8447: LD_ADDR_EXP 52
8451: PUSH
8452: LD_INT 2
8454: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
8455: LD_ADDR_VAR 0 2
8459: PUSH
8460: LD_INT 1
8462: PUSH
8463: EMPTY
8464: LIST
8465: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8466: LD_ADDR_VAR 0 3
8470: PUSH
8471: EMPTY
8472: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8473: LD_ADDR_LOC 21
8477: PUSH
8478: EMPTY
8479: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8480: LD_ADDR_LOC 22
8484: PUSH
8485: EMPTY
8486: ST_TO_ADDR
// Banned_Controls := [ ] ;
8487: LD_ADDR_LOC 23
8491: PUSH
8492: EMPTY
8493: ST_TO_ADDR
// Banned_Engines := [ ] ;
8494: LD_ADDR_LOC 24
8498: PUSH
8499: EMPTY
8500: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
8501: LD_ADDR_LOC 19
8505: PUSH
8506: LD_INT 4
8508: PUSH
8509: LD_INT 5
8511: PUSH
8512: EMPTY
8513: LIST
8514: LIST
8515: PUSH
8516: LD_INT 31
8518: PUSH
8519: LD_INT 32
8521: PUSH
8522: LD_INT 33
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: LIST
8529: PUSH
8530: EMPTY
8531: LIST
8532: LIST
8533: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
8534: LD_ADDR_LOC 20
8538: PUSH
8539: LD_INT 1
8541: PUSH
8542: LD_INT 2
8544: PUSH
8545: EMPTY
8546: LIST
8547: LIST
8548: ST_TO_ADDR
// end ; 3 :
8549: GO 10068
8551: LD_INT 3
8553: DOUBLE
8554: EQUAL
8555: IFTRUE 8559
8557: GO 8802
8559: POP
// begin def_base_level := 1 ;
8560: LD_ADDR_EXP 39
8564: PUSH
8565: LD_INT 1
8567: ST_TO_ADDR
// def_amount_of_people := 2 ;
8568: LD_ADDR_EXP 40
8572: PUSH
8573: LD_INT 2
8575: ST_TO_ADDR
// def_skill_level := 3 ;
8576: LD_ADDR_EXP 41
8580: PUSH
8581: LD_INT 3
8583: ST_TO_ADDR
// def_starting_resources := 3 ;
8584: LD_ADDR_EXP 42
8588: PUSH
8589: LD_INT 3
8591: ST_TO_ADDR
// def_shipments_density := 1 ;
8592: LD_ADDR_EXP 43
8596: PUSH
8597: LD_INT 1
8599: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8600: LD_ADDR_EXP 44
8604: PUSH
8605: LD_INT 0
8607: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
8608: LD_ADDR_EXP 45
8612: PUSH
8613: LD_INT 1
8615: ST_TO_ADDR
// def_shared_vision := 1 ;
8616: LD_ADDR_EXP 46
8620: PUSH
8621: LD_INT 1
8623: ST_TO_ADDR
// def_morale_flags := 0 ;
8624: LD_ADDR_EXP 47
8628: PUSH
8629: LD_INT 0
8631: ST_TO_ADDR
// def_siberite_detection := 1 ;
8632: LD_ADDR_EXP 48
8636: PUSH
8637: LD_INT 1
8639: ST_TO_ADDR
// def_people_respawning := 0 ;
8640: LD_ADDR_EXP 49
8644: PUSH
8645: LD_INT 0
8647: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
8648: LD_ADDR_EXP 50
8652: PUSH
8653: LD_INT 2
8655: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8656: LD_ADDR_EXP 51
8660: PUSH
8661: LD_INT 0
8663: ST_TO_ADDR
// def_builduptime := 1 ;
8664: LD_ADDR_EXP 52
8668: PUSH
8669: LD_INT 1
8671: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
8672: LD_ADDR_VAR 0 2
8676: PUSH
8677: LD_INT 23
8679: PUSH
8680: EMPTY
8681: LIST
8682: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
8683: LD_ADDR_VAR 0 3
8687: PUSH
8688: LD_INT 2
8690: PUSH
8691: LD_INT 37
8693: PUSH
8694: LD_INT 32
8696: PUSH
8697: LD_INT 33
8699: PUSH
8700: LD_INT 36
8702: PUSH
8703: LD_INT 16
8705: PUSH
8706: LD_INT 23
8708: PUSH
8709: LD_INT 21
8711: PUSH
8712: LD_INT 18
8714: PUSH
8715: LD_INT 22
8717: PUSH
8718: LD_INT 20
8720: PUSH
8721: LD_INT 19
8723: PUSH
8724: LD_INT 25
8726: PUSH
8727: LD_INT 17
8729: PUSH
8730: LD_INT 24
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8750: LD_ADDR_LOC 21
8754: PUSH
8755: EMPTY
8756: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8757: LD_ADDR_LOC 22
8761: PUSH
8762: EMPTY
8763: ST_TO_ADDR
// Banned_Controls := [ ] ;
8764: LD_ADDR_LOC 23
8768: PUSH
8769: EMPTY
8770: ST_TO_ADDR
// Banned_Engines := [ ] ;
8771: LD_ADDR_LOC 24
8775: PUSH
8776: EMPTY
8777: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8778: LD_ADDR_LOC 19
8782: PUSH
8783: EMPTY
8784: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8785: LD_ADDR_LOC 20
8789: PUSH
8790: EMPTY
8791: ST_TO_ADDR
// No_Mechs := true ;
8792: LD_ADDR_EXP 53
8796: PUSH
8797: LD_INT 1
8799: ST_TO_ADDR
// end ; 4 :
8800: GO 10068
8802: LD_INT 4
8804: DOUBLE
8805: EQUAL
8806: IFTRUE 8810
8808: GO 8985
8810: POP
// begin def_base_level := 1 ;
8811: LD_ADDR_EXP 39
8815: PUSH
8816: LD_INT 1
8818: ST_TO_ADDR
// def_amount_of_people := 2 ;
8819: LD_ADDR_EXP 40
8823: PUSH
8824: LD_INT 2
8826: ST_TO_ADDR
// def_skill_level := 3 ;
8827: LD_ADDR_EXP 41
8831: PUSH
8832: LD_INT 3
8834: ST_TO_ADDR
// def_starting_resources := 3 ;
8835: LD_ADDR_EXP 42
8839: PUSH
8840: LD_INT 3
8842: ST_TO_ADDR
// def_shipments_density := 2 ;
8843: LD_ADDR_EXP 43
8847: PUSH
8848: LD_INT 2
8850: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8851: LD_ADDR_EXP 44
8855: PUSH
8856: LD_INT 1
8858: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8859: LD_ADDR_EXP 45
8863: PUSH
8864: LD_INT 2
8866: ST_TO_ADDR
// def_shared_vision := 1 ;
8867: LD_ADDR_EXP 46
8871: PUSH
8872: LD_INT 1
8874: ST_TO_ADDR
// def_morale_flags := 0 ;
8875: LD_ADDR_EXP 47
8879: PUSH
8880: LD_INT 0
8882: ST_TO_ADDR
// def_siberite_detection := 1 ;
8883: LD_ADDR_EXP 48
8887: PUSH
8888: LD_INT 1
8890: ST_TO_ADDR
// def_people_respawning := 0 ;
8891: LD_ADDR_EXP 49
8895: PUSH
8896: LD_INT 0
8898: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
8899: LD_ADDR_EXP 50
8903: PUSH
8904: LD_INT 0
8906: ST_TO_ADDR
// def_siberite_bomb := 1 ;
8907: LD_ADDR_EXP 51
8911: PUSH
8912: LD_INT 1
8914: ST_TO_ADDR
// def_builduptime := 3 ;
8915: LD_ADDR_EXP 52
8919: PUSH
8920: LD_INT 3
8922: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
8923: LD_ADDR_VAR 0 2
8927: PUSH
8928: LD_INT 1
8930: PUSH
8931: EMPTY
8932: LIST
8933: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8934: LD_ADDR_VAR 0 3
8938: PUSH
8939: EMPTY
8940: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8941: LD_ADDR_LOC 21
8945: PUSH
8946: EMPTY
8947: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8948: LD_ADDR_LOC 22
8952: PUSH
8953: EMPTY
8954: ST_TO_ADDR
// Banned_Controls := [ ] ;
8955: LD_ADDR_LOC 23
8959: PUSH
8960: EMPTY
8961: ST_TO_ADDR
// Banned_Engines := [ ] ;
8962: LD_ADDR_LOC 24
8966: PUSH
8967: EMPTY
8968: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8969: LD_ADDR_LOC 19
8973: PUSH
8974: EMPTY
8975: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8976: LD_ADDR_LOC 20
8980: PUSH
8981: EMPTY
8982: ST_TO_ADDR
// end ; 5 :
8983: GO 10068
8985: LD_INT 5
8987: DOUBLE
8988: EQUAL
8989: IFTRUE 8993
8991: GO 9242
8993: POP
// begin def_base_level := 0 ;
8994: LD_ADDR_EXP 39
8998: PUSH
8999: LD_INT 0
9001: ST_TO_ADDR
// def_amount_of_people := 0 ;
9002: LD_ADDR_EXP 40
9006: PUSH
9007: LD_INT 0
9009: ST_TO_ADDR
// def_skill_level := 0 ;
9010: LD_ADDR_EXP 41
9014: PUSH
9015: LD_INT 0
9017: ST_TO_ADDR
// def_starting_resources := 0 ;
9018: LD_ADDR_EXP 42
9022: PUSH
9023: LD_INT 0
9025: ST_TO_ADDR
// def_shipments_density := 0 ;
9026: LD_ADDR_EXP 43
9030: PUSH
9031: LD_INT 0
9033: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9034: LD_ADDR_EXP 44
9038: PUSH
9039: LD_INT 0
9041: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
9042: LD_ADDR_EXP 45
9046: PUSH
9047: LD_INT 0
9049: ST_TO_ADDR
// def_shared_vision := 1 ;
9050: LD_ADDR_EXP 46
9054: PUSH
9055: LD_INT 1
9057: ST_TO_ADDR
// def_morale_flags := 0 ;
9058: LD_ADDR_EXP 47
9062: PUSH
9063: LD_INT 0
9065: ST_TO_ADDR
// def_siberite_detection := 0 ;
9066: LD_ADDR_EXP 48
9070: PUSH
9071: LD_INT 0
9073: ST_TO_ADDR
// def_people_respawning := 1 ;
9074: LD_ADDR_EXP 49
9078: PUSH
9079: LD_INT 1
9081: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9082: LD_ADDR_EXP 50
9086: PUSH
9087: LD_INT 1
9089: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9090: LD_ADDR_EXP 51
9094: PUSH
9095: LD_INT 0
9097: ST_TO_ADDR
// def_builduptime := 0 ;
9098: LD_ADDR_EXP 52
9102: PUSH
9103: LD_INT 0
9105: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
9106: LD_ADDR_VAR 0 2
9110: PUSH
9111: LD_INT 10
9113: PUSH
9114: LD_INT 3
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
9121: LD_ADDR_VAR 0 3
9125: PUSH
9126: LD_INT 12
9128: PUSH
9129: LD_INT 11
9131: PUSH
9132: LD_INT 14
9134: PUSH
9135: LD_INT 13
9137: PUSH
9138: LD_INT 5
9140: PUSH
9141: LD_INT 24
9143: PUSH
9144: LD_INT 21
9146: PUSH
9147: LD_INT 33
9149: PUSH
9150: LD_INT 36
9152: PUSH
9153: EMPTY
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
9164: LD_ADDR_LOC 21
9168: PUSH
9169: LD_INT 31
9171: PUSH
9172: EMPTY
9173: LIST
9174: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9175: LD_ADDR_LOC 22
9179: PUSH
9180: EMPTY
9181: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
9182: LD_ADDR_LOC 23
9186: PUSH
9187: LD_INT 2
9189: PUSH
9190: EMPTY
9191: LIST
9192: ST_TO_ADDR
// Banned_Engines := [ ] ;
9193: LD_ADDR_LOC 24
9197: PUSH
9198: EMPTY
9199: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
9200: LD_ADDR_LOC 19
9204: PUSH
9205: LD_INT 4
9207: PUSH
9208: EMPTY
9209: LIST
9210: PUSH
9211: LD_INT 31
9213: PUSH
9214: LD_INT 32
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
9225: LD_ADDR_LOC 20
9229: PUSH
9230: LD_INT 1
9232: PUSH
9233: LD_INT 1
9235: PUSH
9236: EMPTY
9237: LIST
9238: LIST
9239: ST_TO_ADDR
// end ; 6 :
9240: GO 10068
9242: LD_INT 6
9244: DOUBLE
9245: EQUAL
9246: IFTRUE 9250
9248: GO 9453
9250: POP
// begin def_base_level := 1 ;
9251: LD_ADDR_EXP 39
9255: PUSH
9256: LD_INT 1
9258: ST_TO_ADDR
// def_amount_of_people := 2 ;
9259: LD_ADDR_EXP 40
9263: PUSH
9264: LD_INT 2
9266: ST_TO_ADDR
// def_skill_level := 3 ;
9267: LD_ADDR_EXP 41
9271: PUSH
9272: LD_INT 3
9274: ST_TO_ADDR
// def_starting_resources := 3 ;
9275: LD_ADDR_EXP 42
9279: PUSH
9280: LD_INT 3
9282: ST_TO_ADDR
// def_shipments_density := 1 ;
9283: LD_ADDR_EXP 43
9287: PUSH
9288: LD_INT 1
9290: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9291: LD_ADDR_EXP 44
9295: PUSH
9296: LD_INT 0
9298: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9299: LD_ADDR_EXP 45
9303: PUSH
9304: LD_INT 1
9306: ST_TO_ADDR
// def_shared_vision := 1 ;
9307: LD_ADDR_EXP 46
9311: PUSH
9312: LD_INT 1
9314: ST_TO_ADDR
// def_morale_flags := 0 ;
9315: LD_ADDR_EXP 47
9319: PUSH
9320: LD_INT 0
9322: ST_TO_ADDR
// def_siberite_detection := 1 ;
9323: LD_ADDR_EXP 48
9327: PUSH
9328: LD_INT 1
9330: ST_TO_ADDR
// def_people_respawning := 2 ;
9331: LD_ADDR_EXP 49
9335: PUSH
9336: LD_INT 2
9338: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9339: LD_ADDR_EXP 50
9343: PUSH
9344: LD_INT 1
9346: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9347: LD_ADDR_EXP 51
9351: PUSH
9352: LD_INT 0
9354: ST_TO_ADDR
// def_builduptime := 1 ;
9355: LD_ADDR_EXP 52
9359: PUSH
9360: LD_INT 1
9362: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9363: LD_ADDR_VAR 0 2
9367: PUSH
9368: LD_INT 23
9370: PUSH
9371: EMPTY
9372: LIST
9373: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
9374: LD_ADDR_VAR 0 3
9378: PUSH
9379: LD_INT 2
9381: PUSH
9382: LD_INT 37
9384: PUSH
9385: LD_INT 31
9387: PUSH
9388: LD_INT 32
9390: PUSH
9391: LD_INT 33
9393: PUSH
9394: EMPTY
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9401: LD_ADDR_LOC 21
9405: PUSH
9406: EMPTY
9407: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9408: LD_ADDR_LOC 22
9412: PUSH
9413: EMPTY
9414: ST_TO_ADDR
// Banned_Controls := [ ] ;
9415: LD_ADDR_LOC 23
9419: PUSH
9420: EMPTY
9421: ST_TO_ADDR
// Banned_Engines := [ ] ;
9422: LD_ADDR_LOC 24
9426: PUSH
9427: EMPTY
9428: ST_TO_ADDR
// Restricted_Builds := [ ] ;
9429: LD_ADDR_LOC 19
9433: PUSH
9434: EMPTY
9435: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
9436: LD_ADDR_LOC 20
9440: PUSH
9441: EMPTY
9442: ST_TO_ADDR
// No_Mechs := true ;
9443: LD_ADDR_EXP 53
9447: PUSH
9448: LD_INT 1
9450: ST_TO_ADDR
// end ; 7 :
9451: GO 10068
9453: LD_INT 7
9455: DOUBLE
9456: EQUAL
9457: IFTRUE 9461
9459: GO 9659
9461: POP
// begin def_base_level := 1 ;
9462: LD_ADDR_EXP 39
9466: PUSH
9467: LD_INT 1
9469: ST_TO_ADDR
// def_amount_of_people := 2 ;
9470: LD_ADDR_EXP 40
9474: PUSH
9475: LD_INT 2
9477: ST_TO_ADDR
// def_skill_level := 3 ;
9478: LD_ADDR_EXP 41
9482: PUSH
9483: LD_INT 3
9485: ST_TO_ADDR
// def_starting_resources := 3 ;
9486: LD_ADDR_EXP 42
9490: PUSH
9491: LD_INT 3
9493: ST_TO_ADDR
// def_shipments_density := 1 ;
9494: LD_ADDR_EXP 43
9498: PUSH
9499: LD_INT 1
9501: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9502: LD_ADDR_EXP 44
9506: PUSH
9507: LD_INT 1
9509: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9510: LD_ADDR_EXP 45
9514: PUSH
9515: LD_INT 2
9517: ST_TO_ADDR
// def_shared_vision := 1 ;
9518: LD_ADDR_EXP 46
9522: PUSH
9523: LD_INT 1
9525: ST_TO_ADDR
// def_morale_flags := 0 ;
9526: LD_ADDR_EXP 47
9530: PUSH
9531: LD_INT 0
9533: ST_TO_ADDR
// def_siberite_detection := 1 ;
9534: LD_ADDR_EXP 48
9538: PUSH
9539: LD_INT 1
9541: ST_TO_ADDR
// def_people_respawning := 0 ;
9542: LD_ADDR_EXP 49
9546: PUSH
9547: LD_INT 0
9549: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9550: LD_ADDR_EXP 50
9554: PUSH
9555: LD_INT 1
9557: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9558: LD_ADDR_EXP 51
9562: PUSH
9563: LD_INT 0
9565: ST_TO_ADDR
// def_builduptime := 3 ;
9566: LD_ADDR_EXP 52
9570: PUSH
9571: LD_INT 3
9573: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9574: LD_ADDR_VAR 0 2
9578: PUSH
9579: LD_INT 23
9581: PUSH
9582: EMPTY
9583: LIST
9584: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
9585: LD_ADDR_VAR 0 3
9589: PUSH
9590: LD_INT 37
9592: PUSH
9593: EMPTY
9594: LIST
9595: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9596: LD_ADDR_LOC 21
9600: PUSH
9601: EMPTY
9602: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9603: LD_ADDR_LOC 22
9607: PUSH
9608: EMPTY
9609: ST_TO_ADDR
// Banned_Controls := [ ] ;
9610: LD_ADDR_LOC 23
9614: PUSH
9615: EMPTY
9616: ST_TO_ADDR
// Banned_Engines := [ ] ;
9617: LD_ADDR_LOC 24
9621: PUSH
9622: EMPTY
9623: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9624: LD_ADDR_LOC 19
9628: PUSH
9629: LD_INT 31
9631: PUSH
9632: LD_INT 32
9634: PUSH
9635: LD_INT 33
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: LIST
9642: PUSH
9643: EMPTY
9644: LIST
9645: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
9646: LD_ADDR_LOC 20
9650: PUSH
9651: LD_INT 10
9653: PUSH
9654: EMPTY
9655: LIST
9656: ST_TO_ADDR
// end ; 8 :
9657: GO 10068
9659: LD_INT 8
9661: DOUBLE
9662: EQUAL
9663: IFTRUE 9667
9665: GO 10067
9667: POP
// begin def_base_level := 0 ;
9668: LD_ADDR_EXP 39
9672: PUSH
9673: LD_INT 0
9675: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
9676: LD_ADDR_EXP 40
9680: PUSH
9681: LD_INT 0
9683: PPUSH
9684: LD_INT 1
9686: PPUSH
9687: CALL_OW 12
9691: ST_TO_ADDR
// def_skill_level := 0 ;
9692: LD_ADDR_EXP 41
9696: PUSH
9697: LD_INT 0
9699: ST_TO_ADDR
// def_starting_resources := 2 ;
9700: LD_ADDR_EXP 42
9704: PUSH
9705: LD_INT 2
9707: ST_TO_ADDR
// def_shipments_density := 1 ;
9708: LD_ADDR_EXP 43
9712: PUSH
9713: LD_INT 1
9715: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9716: LD_ADDR_EXP 44
9720: PUSH
9721: LD_INT 0
9723: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
9724: LD_ADDR_EXP 45
9728: PUSH
9729: LD_INT 0
9731: ST_TO_ADDR
// def_shared_vision := 1 ;
9732: LD_ADDR_EXP 46
9736: PUSH
9737: LD_INT 1
9739: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
9740: LD_ADDR_EXP 47
9744: PUSH
9745: LD_INT 0
9747: PPUSH
9748: LD_INT 2
9750: PPUSH
9751: CALL_OW 12
9755: ST_TO_ADDR
// def_siberite_detection := 0 ;
9756: LD_ADDR_EXP 48
9760: PUSH
9761: LD_INT 0
9763: ST_TO_ADDR
// def_people_respawning := 0 ;
9764: LD_ADDR_EXP 49
9768: PUSH
9769: LD_INT 0
9771: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
9772: LD_ADDR_EXP 50
9776: PUSH
9777: LD_INT 2
9779: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9780: LD_ADDR_EXP 51
9784: PUSH
9785: LD_INT 0
9787: ST_TO_ADDR
// def_builduptime := 0 ;
9788: LD_ADDR_EXP 52
9792: PUSH
9793: LD_INT 0
9795: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
9796: LD_ADDR_VAR 0 2
9800: PUSH
9801: LD_INT 23
9803: PUSH
9804: LD_INT 20
9806: PUSH
9807: LD_INT 40
9809: PUSH
9810: LD_INT 47
9812: PUSH
9813: LD_INT 46
9815: PUSH
9816: LD_INT 39
9818: PUSH
9819: LD_INT 71
9821: PUSH
9822: LD_INT 34
9824: PUSH
9825: LD_INT 41
9827: PUSH
9828: LD_INT 44
9830: PUSH
9831: LD_INT 17
9833: PUSH
9834: LD_INT 16
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
9851: LD_ADDR_VAR 0 3
9855: PUSH
9856: LD_INT 37
9858: PUSH
9859: LD_INT 5
9861: PUSH
9862: LD_INT 13
9864: PUSH
9865: LD_INT 34
9867: PUSH
9868: LD_INT 12
9870: PUSH
9871: LD_INT 15
9873: PUSH
9874: LD_INT 11
9876: PUSH
9877: LD_INT 14
9879: PUSH
9880: LD_INT 29
9882: PUSH
9883: LD_INT 30
9885: PUSH
9886: LD_INT 28
9888: PUSH
9889: LD_INT 24
9891: PUSH
9892: LD_INT 25
9894: PUSH
9895: LD_INT 20
9897: PUSH
9898: LD_INT 21
9900: PUSH
9901: LD_INT 22
9903: PUSH
9904: LD_INT 36
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9926: LD_ADDR_LOC 21
9930: PUSH
9931: EMPTY
9932: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
9933: LD_ADDR_LOC 22
9937: PUSH
9938: LD_INT 14
9940: PUSH
9941: EMPTY
9942: LIST
9943: ST_TO_ADDR
// Banned_Controls := [ ] ;
9944: LD_ADDR_LOC 23
9948: PUSH
9949: EMPTY
9950: ST_TO_ADDR
// Banned_Engines := [ ] ;
9951: LD_ADDR_LOC 24
9955: PUSH
9956: EMPTY
9957: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
9958: LD_ADDR_LOC 19
9962: PUSH
9963: LD_INT 31
9965: PUSH
9966: LD_INT 32
9968: PUSH
9969: EMPTY
9970: LIST
9971: LIST
9972: PUSH
9973: LD_INT 4
9975: PUSH
9976: EMPTY
9977: LIST
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
9983: LD_ADDR_LOC 20
9987: PUSH
9988: LD_INT 2
9990: PUSH
9991: LD_INT 1
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: ST_TO_ADDR
// for i := 1 to 8 do
9998: LD_ADDR_VAR 0 4
10002: PUSH
10003: DOUBLE
10004: LD_INT 1
10006: DEC
10007: ST_TO_ADDR
10008: LD_INT 8
10010: PUSH
10011: FOR_TO
10012: IFFALSE 10063
// if ( Side_Nations [ i ] = 3 ) then
10014: LD_EXP 20
10018: PUSH
10019: LD_VAR 0 4
10023: ARRAY
10024: PUSH
10025: LD_INT 3
10027: EQUAL
10028: IFFALSE 10061
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
10030: LD_ADDR_EXP 20
10034: PUSH
10035: LD_EXP 20
10039: PPUSH
10040: LD_VAR 0 4
10044: PPUSH
10045: LD_INT 1
10047: PPUSH
10048: LD_INT 2
10050: PPUSH
10051: CALL_OW 12
10055: PPUSH
10056: CALL_OW 1
10060: ST_TO_ADDR
10061: GO 10011
10063: POP
10064: POP
// end ; end ;
10065: GO 10068
10067: POP
// for i := 1 to 8 do
10068: LD_ADDR_VAR 0 4
10072: PUSH
10073: DOUBLE
10074: LD_INT 1
10076: DEC
10077: ST_TO_ADDR
10078: LD_INT 8
10080: PUSH
10081: FOR_TO
10082: IFFALSE 10166
// if Side_Positions [ i ] then
10084: LD_EXP 19
10088: PUSH
10089: LD_VAR 0 4
10093: ARRAY
10094: IFFALSE 10164
// begin for j in Unavailable_Techs do
10096: LD_ADDR_VAR 0 5
10100: PUSH
10101: LD_VAR 0 2
10105: PUSH
10106: FOR_IN
10107: IFFALSE 10128
// SetTech ( j , i , 0 ) ;
10109: LD_VAR 0 5
10113: PPUSH
10114: LD_VAR 0 4
10118: PPUSH
10119: LD_INT 0
10121: PPUSH
10122: CALL_OW 322
10126: GO 10106
10128: POP
10129: POP
// for j in Unavailable_Builds do
10130: LD_ADDR_VAR 0 5
10134: PUSH
10135: LD_VAR 0 3
10139: PUSH
10140: FOR_IN
10141: IFFALSE 10162
// SetRestrict ( j , i , 0 ) ;
10143: LD_VAR 0 5
10147: PPUSH
10148: LD_VAR 0 4
10152: PPUSH
10153: LD_INT 0
10155: PPUSH
10156: CALL_OW 324
10160: GO 10140
10162: POP
10163: POP
// end ;
10164: GO 10081
10166: POP
10167: POP
// end ;
10168: LD_VAR 0 1
10172: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
10173: LD_INT 0
10175: PPUSH
10176: PPUSH
10177: PPUSH
10178: PPUSH
10179: PPUSH
10180: PPUSH
10181: PPUSH
// for i := 1 to Restricted_Builds do
10182: LD_ADDR_VAR 0 2
10186: PUSH
10187: DOUBLE
10188: LD_INT 1
10190: DEC
10191: ST_TO_ADDR
10192: LD_LOC 19
10196: PUSH
10197: FOR_TO
10198: IFFALSE 10508
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
10200: LD_LOC 19
10204: PUSH
10205: LD_VAR 0 2
10209: ARRAY
10210: PUSH
10211: LD_INT 1
10213: ARRAY
10214: PUSH
10215: LD_INT 31
10217: DOUBLE
10218: EQUAL
10219: IFTRUE 10235
10221: LD_INT 32
10223: DOUBLE
10224: EQUAL
10225: IFTRUE 10235
10227: LD_INT 33
10229: DOUBLE
10230: EQUAL
10231: IFTRUE 10235
10233: GO 10246
10235: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
10236: LD_ADDR_VAR 0 6
10240: PUSH
10241: LD_STRING #Turrets
10243: ST_TO_ADDR
10244: GO 10291
10246: LD_INT 4
10248: DOUBLE
10249: EQUAL
10250: IFTRUE 10260
10252: LD_INT 5
10254: DOUBLE
10255: EQUAL
10256: IFTRUE 10260
10258: GO 10271
10260: POP
// btype := #Armouries ; b_Behemoth :
10261: LD_ADDR_VAR 0 6
10265: PUSH
10266: LD_STRING #Armouries
10268: ST_TO_ADDR
10269: GO 10291
10271: LD_INT 37
10273: DOUBLE
10274: EQUAL
10275: IFTRUE 10279
10277: GO 10290
10279: POP
// btype := #Behemoths ; end ;
10280: LD_ADDR_VAR 0 6
10284: PUSH
10285: LD_STRING #Behemoths
10287: ST_TO_ADDR
10288: GO 10291
10290: POP
// list := [ ] ;
10291: LD_ADDR_VAR 0 7
10295: PUSH
10296: EMPTY
10297: ST_TO_ADDR
// for j := 1 to 8 do
10298: LD_ADDR_VAR 0 3
10302: PUSH
10303: DOUBLE
10304: LD_INT 1
10306: DEC
10307: ST_TO_ADDR
10308: LD_INT 8
10310: PUSH
10311: FOR_TO
10312: IFFALSE 10405
// if Side_Positions [ j ] then
10314: LD_EXP 19
10318: PUSH
10319: LD_VAR 0 3
10323: ARRAY
10324: IFFALSE 10403
// begin amount := 0 ;
10326: LD_ADDR_VAR 0 5
10330: PUSH
10331: LD_INT 0
10333: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
10334: LD_ADDR_VAR 0 4
10338: PUSH
10339: LD_LOC 19
10343: PUSH
10344: LD_VAR 0 2
10348: ARRAY
10349: PUSH
10350: FOR_IN
10351: IFFALSE 10399
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
10353: LD_ADDR_VAR 0 5
10357: PUSH
10358: LD_VAR 0 5
10362: PUSH
10363: LD_INT 22
10365: PUSH
10366: LD_VAR 0 3
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PUSH
10375: LD_INT 30
10377: PUSH
10378: LD_VAR 0 4
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PUSH
10387: EMPTY
10388: LIST
10389: LIST
10390: PPUSH
10391: CALL_OW 69
10395: PLUS
10396: ST_TO_ADDR
10397: GO 10350
10399: POP
10400: POP
// break ;
10401: GO 10405
// end ;
10403: GO 10311
10405: POP
10406: POP
// list := [ ] ;
10407: LD_ADDR_VAR 0 7
10411: PUSH
10412: EMPTY
10413: ST_TO_ADDR
// for j := 1 to 8 do
10414: LD_ADDR_VAR 0 3
10418: PUSH
10419: DOUBLE
10420: LD_INT 1
10422: DEC
10423: ST_TO_ADDR
10424: LD_INT 8
10426: PUSH
10427: FOR_TO
10428: IFFALSE 10448
// list := list ^ amount ;
10430: LD_ADDR_VAR 0 7
10434: PUSH
10435: LD_VAR 0 7
10439: PUSH
10440: LD_VAR 0 5
10444: ADD
10445: ST_TO_ADDR
10446: GO 10427
10448: POP
10449: POP
// Already_Built := Already_Built ^ [ list ] ;
10450: LD_ADDR_LOC 25
10454: PUSH
10455: LD_LOC 25
10459: PUSH
10460: LD_VAR 0 7
10464: PUSH
10465: EMPTY
10466: LIST
10467: ADD
10468: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
10469: LD_ADDR_LOC 26
10473: PUSH
10474: LD_LOC 26
10478: PUSH
10479: LD_VAR 0 6
10483: PUSH
10484: LD_VAR 0 5
10488: PUSH
10489: LD_LOC 20
10493: PUSH
10494: LD_VAR 0 2
10498: ARRAY
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: LIST
10504: ADD
10505: ST_TO_ADDR
// end ;
10506: GO 10197
10508: POP
10509: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10510: LD_ADDR_LOC 27
10514: PUSH
10515: LD_INT 0
10517: PUSH
10518: LD_INT 0
10520: PUSH
10521: LD_INT 0
10523: PUSH
10524: LD_INT 0
10526: PUSH
10527: LD_INT 0
10529: PUSH
10530: LD_INT 0
10532: PUSH
10533: LD_INT 0
10535: PUSH
10536: LD_INT 0
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: ST_TO_ADDR
// if Limits_Info then
10549: LD_LOC 26
10553: IFFALSE 10569
// Limits_Info := #Limits ^ Limits_Info ;
10555: LD_ADDR_LOC 26
10559: PUSH
10560: LD_STRING #Limits
10562: PUSH
10563: LD_LOC 26
10567: ADD
10568: ST_TO_ADDR
// end ;
10569: LD_VAR 0 1
10573: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
10574: LD_INT 0
10576: PPUSH
10577: PPUSH
10578: PPUSH
10579: PPUSH
// for i := 1 to Restricted_Builds do
10580: LD_ADDR_VAR 0 7
10584: PUSH
10585: DOUBLE
10586: LD_INT 1
10588: DEC
10589: ST_TO_ADDR
10590: LD_LOC 19
10594: PUSH
10595: FOR_TO
10596: IFFALSE 11019
// if BType in Restricted_Builds [ i ] then
10598: LD_VAR 0 2
10602: PUSH
10603: LD_LOC 19
10607: PUSH
10608: LD_VAR 0 7
10612: ARRAY
10613: IN
10614: IFFALSE 11017
// begin if old_side then
10616: LD_VAR 0 4
10620: IFFALSE 10746
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
10622: LD_LOC 25
10626: PUSH
10627: LD_VAR 0 7
10631: ARRAY
10632: PUSH
10633: LD_VAR 0 3
10637: ARRAY
10638: PUSH
10639: LD_VAR 0 5
10643: PLUS
10644: PUSH
10645: LD_LOC 20
10649: PUSH
10650: LD_VAR 0 7
10654: ARRAY
10655: GREATER
10656: IFFALSE 10682
// begin SetSide ( un , old_side ) ;
10658: LD_VAR 0 1
10662: PPUSH
10663: LD_VAR 0 4
10667: PPUSH
10668: CALL_OW 235
// count := 0 ;
10672: LD_ADDR_VAR 0 5
10676: PUSH
10677: LD_INT 0
10679: ST_TO_ADDR
// end else
10680: GO 10746
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
10682: LD_ADDR_LOC 25
10686: PUSH
10687: LD_LOC 25
10691: PPUSH
10692: LD_VAR 0 7
10696: PPUSH
10697: LD_LOC 25
10701: PUSH
10702: LD_VAR 0 7
10706: ARRAY
10707: PPUSH
10708: LD_VAR 0 4
10712: PPUSH
10713: LD_LOC 25
10717: PUSH
10718: LD_VAR 0 7
10722: ARRAY
10723: PUSH
10724: LD_VAR 0 4
10728: ARRAY
10729: PUSH
10730: LD_VAR 0 5
10734: MINUS
10735: PPUSH
10736: CALL_OW 1
10740: PPUSH
10741: CALL_OW 1
10745: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
10746: LD_ADDR_LOC 25
10750: PUSH
10751: LD_LOC 25
10755: PPUSH
10756: LD_VAR 0 7
10760: PPUSH
10761: LD_LOC 25
10765: PUSH
10766: LD_VAR 0 7
10770: ARRAY
10771: PPUSH
10772: LD_VAR 0 3
10776: PPUSH
10777: LD_LOC 25
10781: PUSH
10782: LD_VAR 0 7
10786: ARRAY
10787: PUSH
10788: LD_VAR 0 3
10792: ARRAY
10793: PUSH
10794: LD_VAR 0 5
10798: PLUS
10799: PPUSH
10800: CALL_OW 1
10804: PPUSH
10805: CALL_OW 1
10809: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
10810: LD_VAR 0 5
10814: PUSH
10815: LD_INT 0
10817: NONEQUAL
10818: PUSH
10819: LD_VAR 0 3
10823: PUSH
10824: LD_OWVAR 2
10828: EQUAL
10829: AND
10830: IFFALSE 10873
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
10832: LD_ADDR_LOC 26
10836: PUSH
10837: LD_LOC 26
10841: PPUSH
10842: LD_INT 3
10844: PUSH
10845: LD_VAR 0 7
10849: MUL
10850: PPUSH
10851: LD_LOC 25
10855: PUSH
10856: LD_VAR 0 7
10860: ARRAY
10861: PUSH
10862: LD_VAR 0 3
10866: ARRAY
10867: PPUSH
10868: CALL_OW 1
10872: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
10873: LD_LOC 25
10877: PUSH
10878: LD_VAR 0 7
10882: ARRAY
10883: PUSH
10884: LD_VAR 0 3
10888: ARRAY
10889: PUSH
10890: LD_LOC 20
10894: PUSH
10895: LD_VAR 0 7
10899: ARRAY
10900: GREATER
10901: IFFALSE 10928
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
10903: LD_ADDR_LOC 27
10907: PUSH
10908: LD_LOC 27
10912: PPUSH
10913: LD_VAR 0 3
10917: PPUSH
10918: LD_INT 1
10920: PPUSH
10921: CALL_OW 1
10925: ST_TO_ADDR
// end else
10926: GO 11015
// begin for j := 1 to Restricted_Builds do
10928: LD_ADDR_VAR 0 8
10932: PUSH
10933: DOUBLE
10934: LD_INT 1
10936: DEC
10937: ST_TO_ADDR
10938: LD_LOC 19
10942: PUSH
10943: FOR_TO
10944: IFFALSE 10988
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
10946: LD_LOC 25
10950: PUSH
10951: LD_VAR 0 8
10955: ARRAY
10956: PUSH
10957: LD_VAR 0 3
10961: ARRAY
10962: PUSH
10963: LD_LOC 20
10967: PUSH
10968: LD_VAR 0 8
10972: ARRAY
10973: GREATER
10974: IFFALSE 10986
// begin Is_Cheater := true ;
10976: LD_ADDR_VAR 0 9
10980: PUSH
10981: LD_INT 1
10983: ST_TO_ADDR
// break ;
10984: GO 10988
// end ;
10986: GO 10943
10988: POP
10989: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
10990: LD_ADDR_LOC 27
10994: PUSH
10995: LD_LOC 27
10999: PPUSH
11000: LD_VAR 0 3
11004: PPUSH
11005: LD_VAR 0 9
11009: PPUSH
11010: CALL_OW 1
11014: ST_TO_ADDR
// end ; break ;
11015: GO 11019
// end ;
11017: GO 10595
11019: POP
11020: POP
// end ;
11021: LD_VAR 0 6
11025: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
11026: LD_VAR 0 5
11030: PUSH
11031: LD_LOC 21
11035: IN
11036: PUSH
11037: LD_VAR 0 2
11041: PUSH
11042: LD_LOC 22
11046: IN
11047: OR
11048: PUSH
11049: LD_VAR 0 4
11053: PUSH
11054: LD_LOC 23
11058: IN
11059: OR
11060: PUSH
11061: LD_VAR 0 3
11065: PUSH
11066: LD_LOC 24
11070: IN
11071: OR
11072: IFFALSE 11083
// ComCancel ( factory ) ;
11074: LD_VAR 0 1
11078: PPUSH
11079: CALL_OW 127
// end ;
11083: PPOPN 5
11085: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
11086: LD_VAR 0 2
11090: PUSH
11091: LD_LOC 21
11095: IN
11096: IFFALSE 11107
// ComCancel ( building ) ;
11098: LD_VAR 0 1
11102: PPUSH
11103: CALL_OW 127
// end ; end_of_file
11107: PPOPN 2
11109: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
11110: LD_INT 0
11112: PPUSH
11113: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
11114: LD_ADDR_VAR 0 2
11118: PUSH
11119: LD_STRING #Multi1x1-Time
11121: PUSH
11122: LD_OWVAR 1
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: ST_TO_ADDR
// if WaitServerStrings then
11131: LD_EXP 55
11135: IFFALSE 11153
// AllStrings = AllStrings ^ WaitServerStrings ;
11137: LD_ADDR_VAR 0 2
11141: PUSH
11142: LD_VAR 0 2
11146: PUSH
11147: LD_EXP 55
11151: ADD
11152: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
11153: LD_INT 0
11155: PUSH
11156: LD_EXP 12
11160: PUSH
11161: LD_OWVAR 1
11165: MINUS
11166: LESSEQUAL
11167: IFFALSE 11198
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
11169: LD_ADDR_VAR 0 2
11173: PUSH
11174: LD_VAR 0 2
11178: PUSH
11179: LD_STRING #allowedsibbomb
11181: PUSH
11182: LD_EXP 12
11186: PUSH
11187: LD_OWVAR 1
11191: MINUS
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: ADD
11197: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
11198: LD_INT 0
11200: PUSH
11201: LD_EXP 58
11205: PUSH
11206: LD_OWVAR 1
11210: MINUS
11211: LESSEQUAL
11212: IFFALSE 11243
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
11214: LD_ADDR_VAR 0 2
11218: PUSH
11219: LD_VAR 0 2
11223: PUSH
11224: LD_STRING #builduptime
11226: PUSH
11227: LD_EXP 58
11231: PUSH
11232: LD_OWVAR 1
11236: MINUS
11237: PUSH
11238: EMPTY
11239: LIST
11240: LIST
11241: ADD
11242: ST_TO_ADDR
// if ( ExtraStrings ) then
11243: LD_EXP 54
11247: IFFALSE 11269
// AllStrings := AllStrings ^  ^ ExtraStrings ;
11249: LD_ADDR_VAR 0 2
11253: PUSH
11254: LD_VAR 0 2
11258: PUSH
11259: LD_STRING 
11261: ADD
11262: PUSH
11263: LD_EXP 54
11267: ADD
11268: ST_TO_ADDR
// if ( LimitsStrings ) then
11269: CALL 7950 0 0
11273: IFFALSE 11295
// AllStrings := AllStrings ^  ^ LimitsStrings ;
11275: LD_ADDR_VAR 0 2
11279: PUSH
11280: LD_VAR 0 2
11284: PUSH
11285: LD_STRING 
11287: ADD
11288: PUSH
11289: CALL 7950 0 0
11293: ADD
11294: ST_TO_ADDR
// Display_Strings := AllStrings ;
11295: LD_ADDR_OWVAR 47
11299: PUSH
11300: LD_VAR 0 2
11304: ST_TO_ADDR
// end ;
11305: LD_VAR 0 1
11309: RET
// every 0 0$1 do
11310: GO 11312
11312: DISABLE
// begin ShowTimer ;
11313: CALL 11110 0 0
// enable ;
11317: ENABLE
// end ; end_of_file
11318: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
11319: LD_INT 0
11321: PPUSH
11322: PPUSH
11323: PPUSH
// BuildUpTime_Delay = 0 ;
11324: LD_ADDR_EXP 58
11328: PUSH
11329: LD_INT 0
11331: ST_TO_ADDR
// if not def_builduptime then
11332: LD_EXP 52
11336: NOT
11337: IFFALSE 11341
// exit ;
11339: GO 11524
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
11341: LD_ADDR_EXP 58
11345: PUSH
11346: LD_INT 8400
11348: PUSH
11349: LD_INT 2100
11351: PUSH
11352: LD_EXP 52
11356: MUL
11357: PLUS
11358: ST_TO_ADDR
// BuildUpTimeActive := true ;
11359: LD_ADDR_EXP 57
11363: PUSH
11364: LD_INT 1
11366: ST_TO_ADDR
// for i := 1 to 8 do
11367: LD_ADDR_VAR 0 2
11371: PUSH
11372: DOUBLE
11373: LD_INT 1
11375: DEC
11376: ST_TO_ADDR
11377: LD_INT 8
11379: PUSH
11380: FOR_TO
11381: IFFALSE 11522
// if Side_Positions [ i ] then
11383: LD_EXP 19
11387: PUSH
11388: LD_VAR 0 2
11392: ARRAY
11393: IFFALSE 11520
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
11395: LD_EXP 56
11399: PUSH
11400: LD_EXP 19
11404: PUSH
11405: LD_VAR 0 2
11409: ARRAY
11410: ARRAY
11411: PPUSH
11412: LD_INT 5
11414: PPUSH
11415: CALL_OW 424
// for j := 1 to 8 do
11419: LD_ADDR_VAR 0 3
11423: PUSH
11424: DOUBLE
11425: LD_INT 1
11427: DEC
11428: ST_TO_ADDR
11429: LD_INT 8
11431: PUSH
11432: FOR_TO
11433: IFFALSE 11518
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
11435: LD_EXP 19
11439: PUSH
11440: LD_VAR 0 3
11444: ARRAY
11445: PUSH
11446: LD_EXP 16
11450: PUSH
11451: LD_VAR 0 2
11455: ARRAY
11456: PUSH
11457: LD_EXP 16
11461: PUSH
11462: LD_VAR 0 3
11466: ARRAY
11467: NONEQUAL
11468: PUSH
11469: LD_EXP 21
11473: NOT
11474: PUSH
11475: LD_VAR 0 2
11479: PUSH
11480: LD_VAR 0 3
11484: NONEQUAL
11485: AND
11486: OR
11487: AND
11488: IFFALSE 11516
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
11490: LD_VAR 0 3
11494: PPUSH
11495: LD_EXP 56
11499: PUSH
11500: LD_EXP 19
11504: PUSH
11505: LD_VAR 0 2
11509: ARRAY
11510: ARRAY
11511: PPUSH
11512: CALL_OW 333
11516: GO 11432
11518: POP
11519: POP
// end ;
11520: GO 11380
11522: POP
11523: POP
// end ;
11524: LD_VAR 0 1
11528: RET
// export function EndBuildUp ; var i , j ; begin
11529: LD_INT 0
11531: PPUSH
11532: PPUSH
11533: PPUSH
// BuildUpTimeActive := false ;
11534: LD_ADDR_EXP 57
11538: PUSH
11539: LD_INT 0
11541: ST_TO_ADDR
// for i := 1 to 8 do
11542: LD_ADDR_VAR 0 2
11546: PUSH
11547: DOUBLE
11548: LD_INT 1
11550: DEC
11551: ST_TO_ADDR
11552: LD_INT 8
11554: PUSH
11555: FOR_TO
11556: IFFALSE 11697
// if Side_Positions [ i ] then
11558: LD_EXP 19
11562: PUSH
11563: LD_VAR 0 2
11567: ARRAY
11568: IFFALSE 11695
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
11570: LD_EXP 56
11574: PUSH
11575: LD_EXP 19
11579: PUSH
11580: LD_VAR 0 2
11584: ARRAY
11585: ARRAY
11586: PPUSH
11587: LD_INT 0
11589: PPUSH
11590: CALL_OW 424
// for j := 1 to 8 do
11594: LD_ADDR_VAR 0 3
11598: PUSH
11599: DOUBLE
11600: LD_INT 1
11602: DEC
11603: ST_TO_ADDR
11604: LD_INT 8
11606: PUSH
11607: FOR_TO
11608: IFFALSE 11693
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
11610: LD_EXP 19
11614: PUSH
11615: LD_VAR 0 3
11619: ARRAY
11620: PUSH
11621: LD_EXP 16
11625: PUSH
11626: LD_VAR 0 2
11630: ARRAY
11631: PUSH
11632: LD_EXP 16
11636: PUSH
11637: LD_VAR 0 3
11641: ARRAY
11642: NONEQUAL
11643: PUSH
11644: LD_EXP 21
11648: NOT
11649: PUSH
11650: LD_VAR 0 2
11654: PUSH
11655: LD_VAR 0 3
11659: NONEQUAL
11660: AND
11661: OR
11662: AND
11663: IFFALSE 11691
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
11665: LD_VAR 0 3
11669: PPUSH
11670: LD_EXP 56
11674: PUSH
11675: LD_EXP 19
11679: PUSH
11680: LD_VAR 0 2
11684: ARRAY
11685: ARRAY
11686: PPUSH
11687: CALL_OW 334
11691: GO 11607
11693: POP
11694: POP
// end ;
11695: GO 11555
11697: POP
11698: POP
// end ;
11699: LD_VAR 0 1
11703: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
11704: LD_EXP 57
11708: IFFALSE 11883
11710: GO 11712
11712: DISABLE
11713: LD_INT 0
11715: PPUSH
11716: PPUSH
// begin for i := 1 to 8 do
11717: LD_ADDR_VAR 0 1
11721: PUSH
11722: DOUBLE
11723: LD_INT 1
11725: DEC
11726: ST_TO_ADDR
11727: LD_INT 8
11729: PUSH
11730: FOR_TO
11731: IFFALSE 11880
// if Side_Positions [ i ] then
11733: LD_EXP 19
11737: PUSH
11738: LD_VAR 0 1
11742: ARRAY
11743: IFFALSE 11878
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
11745: LD_ADDR_VAR 0 2
11749: PUSH
11750: LD_EXP 56
11754: PUSH
11755: LD_EXP 19
11759: PUSH
11760: LD_VAR 0 1
11764: ARRAY
11765: ARRAY
11766: PPUSH
11767: LD_INT 2
11769: PUSH
11770: LD_INT 21
11772: PUSH
11773: LD_INT 1
11775: PUSH
11776: EMPTY
11777: LIST
11778: LIST
11779: PUSH
11780: LD_INT 21
11782: PUSH
11783: LD_INT 2
11785: PUSH
11786: EMPTY
11787: LIST
11788: LIST
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: LIST
11794: PUSH
11795: LD_INT 22
11797: PUSH
11798: LD_OWVAR 2
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PPUSH
11811: CALL_OW 70
11815: PUSH
11816: FOR_IN
11817: IFFALSE 11876
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
11819: LD_EXP 16
11823: PUSH
11824: LD_VAR 0 1
11828: ARRAY
11829: PUSH
11830: LD_EXP 16
11834: PUSH
11835: LD_OWVAR 2
11839: ARRAY
11840: NONEQUAL
11841: PUSH
11842: LD_EXP 21
11846: NOT
11847: PUSH
11848: LD_VAR 0 1
11852: PUSH
11853: LD_OWVAR 2
11857: NONEQUAL
11858: AND
11859: OR
11860: IFFALSE 11874
// ComMoveToArea ( un , BuildUpEscape ) ;
11862: LD_VAR 0 2
11866: PPUSH
11867: LD_INT 12
11869: PPUSH
11870: CALL_OW 113
11874: GO 11816
11876: POP
11877: POP
11878: GO 11730
11880: POP
11881: POP
// enable ;
11882: ENABLE
// end ;
11883: PPOPN 2
11885: END
// every 0 0$1 trigger def_builduptime do
11886: LD_EXP 52
11890: IFFALSE 11916
11892: GO 11894
11894: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
11895: LD_INT 8400
11897: PUSH
11898: LD_EXP 52
11902: PUSH
11903: LD_INT 2100
11905: MUL
11906: PLUS
11907: PPUSH
11908: CALL_OW 67
// EndBuildUp ;
11912: CALL 11529 0 0
// end ; end_of_file
11916: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
11917: LD_INT 0
11919: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
11920: LD_VAR 0 1
11924: PPUSH
11925: CALL_OW 255
11929: PUSH
11930: LD_VAR 0 4
11934: EQUAL
11935: IFFALSE 11954
// begin SetAchievement ( ACH_RAD ) ;
11937: LD_STRING ACH_RAD
11939: PPUSH
11940: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
11944: LD_STRING ACH_NL
11946: PPUSH
11947: LD_INT 1
11949: PPUSH
11950: CALL_OW 564
// end end ;
11954: LD_VAR 0 5
11958: RET
// export function SA_Win ( side ) ; begin
11959: LD_INT 0
11961: PPUSH
// case side of 1 :
11962: LD_VAR 0 1
11966: PUSH
11967: LD_INT 1
11969: DOUBLE
11970: EQUAL
11971: IFTRUE 11975
11973: GO 11988
11975: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
11976: LD_STRING ACH_AH
11978: PPUSH
11979: LD_INT 1
11981: PPUSH
11982: CALL_OW 564
11986: GO 12151
11988: LD_INT 2
11990: DOUBLE
11991: EQUAL
11992: IFTRUE 11996
11994: GO 12009
11996: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
11997: LD_STRING ACH_E
11999: PPUSH
12000: LD_INT 1
12002: PPUSH
12003: CALL_OW 564
12007: GO 12151
12009: LD_INT 3
12011: DOUBLE
12012: EQUAL
12013: IFTRUE 12017
12015: GO 12030
12017: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
12018: LD_STRING ACH_OOL
12020: PPUSH
12021: LD_INT 1
12023: PPUSH
12024: CALL_OW 564
12028: GO 12151
12030: LD_INT 1
12032: PUSH
12033: LD_INT 2
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: DOUBLE
12040: EQUAL
12041: IFTRUE 12045
12043: GO 12070
12045: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12046: LD_STRING ACH_AH
12048: PPUSH
12049: LD_REAL  5.00000000000000E-0001
12052: PPUSH
12053: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
12057: LD_STRING ACH_E
12059: PPUSH
12060: LD_REAL  5.00000000000000E-0001
12063: PPUSH
12064: CALL_OW 564
// end ; [ 2 , 3 ] :
12068: GO 12151
12070: LD_INT 2
12072: PUSH
12073: LD_INT 3
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: DOUBLE
12080: EQUAL
12081: IFTRUE 12085
12083: GO 12110
12085: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
12086: LD_STRING ACH_OOL
12088: PPUSH
12089: LD_REAL  5.00000000000000E-0001
12092: PPUSH
12093: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
12097: LD_STRING ACH_E
12099: PPUSH
12100: LD_REAL  5.00000000000000E-0001
12103: PPUSH
12104: CALL_OW 564
// end ; [ 3 , 1 ] :
12108: GO 12151
12110: LD_INT 3
12112: PUSH
12113: LD_INT 1
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: DOUBLE
12120: EQUAL
12121: IFTRUE 12125
12123: GO 12150
12125: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12126: LD_STRING ACH_AH
12128: PPUSH
12129: LD_REAL  5.00000000000000E-0001
12132: PPUSH
12133: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
12137: LD_STRING ACH_OOL
12139: PPUSH
12140: LD_REAL  5.00000000000000E-0001
12143: PPUSH
12144: CALL_OW 564
// end ; end ;
12148: GO 12151
12150: POP
// end ; end_of_file
12151: LD_VAR 0 2
12155: RET
// export function SetMpTechs ( ) ; var side , i ; begin
12156: LD_INT 0
12158: PPUSH
12159: PPUSH
12160: PPUSH
// for side = 1 to 8 do
12161: LD_ADDR_VAR 0 2
12165: PUSH
12166: DOUBLE
12167: LD_INT 1
12169: DEC
12170: ST_TO_ADDR
12171: LD_INT 8
12173: PUSH
12174: FOR_TO
12175: IFFALSE 12296
// begin for i = 1 to 72 do
12177: LD_ADDR_VAR 0 3
12181: PUSH
12182: DOUBLE
12183: LD_INT 1
12185: DEC
12186: ST_TO_ADDR
12187: LD_INT 72
12189: PUSH
12190: FOR_TO
12191: IFFALSE 12222
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
12193: LD_VAR 0 3
12197: PPUSH
12198: LD_VAR 0 2
12202: PPUSH
12203: LD_INT 0
12205: PPUSH
12206: LD_VAR 0 3
12210: PPUSH
12211: CALL_OW 565
12215: PPUSH
12216: CALL_OW 322
12220: GO 12190
12222: POP
12223: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
12224: LD_INT 73
12226: PPUSH
12227: LD_VAR 0 2
12231: PPUSH
12232: LD_INT 0
12234: PPUSH
12235: LD_INT 25
12237: PPUSH
12238: CALL_OW 565
12242: PPUSH
12243: CALL_OW 322
// for i = 0 to 40 do
12247: LD_ADDR_VAR 0 3
12251: PUSH
12252: DOUBLE
12253: LD_INT 0
12255: DEC
12256: ST_TO_ADDR
12257: LD_INT 40
12259: PUSH
12260: FOR_TO
12261: IFFALSE 12292
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
12263: LD_VAR 0 3
12267: PPUSH
12268: LD_VAR 0 2
12272: PPUSH
12273: LD_INT 1
12275: PPUSH
12276: LD_VAR 0 3
12280: PPUSH
12281: CALL_OW 565
12285: PPUSH
12286: CALL_OW 324
12290: GO 12260
12292: POP
12293: POP
// end ;
12294: GO 12174
12296: POP
12297: POP
// end ;
12298: LD_VAR 0 1
12302: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
12303: LD_INT 0
12305: PPUSH
12306: PPUSH
12307: PPUSH
// for side = 1 to 8 do
12308: LD_ADDR_VAR 0 3
12312: PUSH
12313: DOUBLE
12314: LD_INT 1
12316: DEC
12317: ST_TO_ADDR
12318: LD_INT 8
12320: PUSH
12321: FOR_TO
12322: IFFALSE 16318
// begin for i = 1 to 73 do
12324: LD_ADDR_VAR 0 4
12328: PUSH
12329: DOUBLE
12330: LD_INT 1
12332: DEC
12333: ST_TO_ADDR
12334: LD_INT 73
12336: PUSH
12337: FOR_TO
12338: IFFALSE 12359
// SetTech ( i , side , state_disabled ) ;
12340: LD_VAR 0 4
12344: PPUSH
12345: LD_VAR 0 3
12349: PPUSH
12350: LD_INT 0
12352: PPUSH
12353: CALL_OW 322
12357: GO 12337
12359: POP
12360: POP
// for i = 0 to 40 do
12361: LD_ADDR_VAR 0 4
12365: PUSH
12366: DOUBLE
12367: LD_INT 0
12369: DEC
12370: ST_TO_ADDR
12371: LD_INT 40
12373: PUSH
12374: FOR_TO
12375: IFFALSE 12396
// SetRestrict ( i , side , false ) ;
12377: LD_VAR 0 4
12381: PPUSH
12382: LD_VAR 0 3
12386: PPUSH
12387: LD_INT 0
12389: PPUSH
12390: CALL_OW 324
12394: GO 12374
12396: POP
12397: POP
// case level of 1 :
12398: LD_VAR 0 1
12402: PUSH
12403: LD_INT 1
12405: DOUBLE
12406: EQUAL
12407: IFTRUE 12411
12409: GO 12564
12411: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12412: LD_INT 35
12414: PPUSH
12415: LD_VAR 0 3
12419: PPUSH
12420: LD_INT 1
12422: PPUSH
12423: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12427: LD_INT 45
12429: PPUSH
12430: LD_VAR 0 3
12434: PPUSH
12435: LD_INT 1
12437: PPUSH
12438: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12442: LD_INT 46
12444: PPUSH
12445: LD_VAR 0 3
12449: PPUSH
12450: LD_INT 1
12452: PPUSH
12453: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12457: LD_INT 47
12459: PPUSH
12460: LD_VAR 0 3
12464: PPUSH
12465: LD_INT 1
12467: PPUSH
12468: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12472: LD_INT 0
12474: PPUSH
12475: LD_VAR 0 3
12479: PPUSH
12480: LD_INT 1
12482: PPUSH
12483: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12487: LD_INT 2
12489: PPUSH
12490: LD_VAR 0 3
12494: PPUSH
12495: LD_INT 1
12497: PPUSH
12498: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12502: LD_INT 4
12504: PPUSH
12505: LD_VAR 0 3
12509: PPUSH
12510: LD_INT 1
12512: PPUSH
12513: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12517: LD_INT 6
12519: PPUSH
12520: LD_VAR 0 3
12524: PPUSH
12525: LD_INT 1
12527: PPUSH
12528: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12532: LD_INT 29
12534: PPUSH
12535: LD_VAR 0 3
12539: PPUSH
12540: LD_INT 1
12542: PPUSH
12543: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12547: LD_INT 31
12549: PPUSH
12550: LD_VAR 0 3
12554: PPUSH
12555: LD_INT 1
12557: PPUSH
12558: CALL_OW 324
// end ; 2 :
12562: GO 16316
12564: LD_INT 2
12566: DOUBLE
12567: EQUAL
12568: IFTRUE 12572
12570: GO 12770
12572: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12573: LD_INT 35
12575: PPUSH
12576: LD_VAR 0 3
12580: PPUSH
12581: LD_INT 1
12583: PPUSH
12584: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12588: LD_INT 45
12590: PPUSH
12591: LD_VAR 0 3
12595: PPUSH
12596: LD_INT 1
12598: PPUSH
12599: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12603: LD_INT 46
12605: PPUSH
12606: LD_VAR 0 3
12610: PPUSH
12611: LD_INT 1
12613: PPUSH
12614: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12618: LD_INT 47
12620: PPUSH
12621: LD_VAR 0 3
12625: PPUSH
12626: LD_INT 1
12628: PPUSH
12629: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12633: LD_INT 1
12635: PPUSH
12636: LD_VAR 0 3
12640: PPUSH
12641: LD_INT 1
12643: PPUSH
12644: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12648: LD_INT 2
12650: PPUSH
12651: LD_VAR 0 3
12655: PPUSH
12656: LD_INT 1
12658: PPUSH
12659: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12663: LD_INT 11
12665: PPUSH
12666: LD_VAR 0 3
12670: PPUSH
12671: LD_INT 1
12673: PPUSH
12674: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12678: LD_INT 0
12680: PPUSH
12681: LD_VAR 0 3
12685: PPUSH
12686: LD_INT 1
12688: PPUSH
12689: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12693: LD_INT 2
12695: PPUSH
12696: LD_VAR 0 3
12700: PPUSH
12701: LD_INT 1
12703: PPUSH
12704: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12708: LD_INT 4
12710: PPUSH
12711: LD_VAR 0 3
12715: PPUSH
12716: LD_INT 1
12718: PPUSH
12719: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12723: LD_INT 6
12725: PPUSH
12726: LD_VAR 0 3
12730: PPUSH
12731: LD_INT 1
12733: PPUSH
12734: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12738: LD_INT 29
12740: PPUSH
12741: LD_VAR 0 3
12745: PPUSH
12746: LD_INT 1
12748: PPUSH
12749: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12753: LD_INT 31
12755: PPUSH
12756: LD_VAR 0 3
12760: PPUSH
12761: LD_INT 1
12763: PPUSH
12764: CALL_OW 324
// end ; 3 :
12768: GO 16316
12770: LD_INT 3
12772: DOUBLE
12773: EQUAL
12774: IFTRUE 12778
12776: GO 13231
12778: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12779: LD_INT 35
12781: PPUSH
12782: LD_VAR 0 3
12786: PPUSH
12787: LD_INT 1
12789: PPUSH
12790: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12794: LD_INT 45
12796: PPUSH
12797: LD_VAR 0 3
12801: PPUSH
12802: LD_INT 1
12804: PPUSH
12805: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12809: LD_INT 46
12811: PPUSH
12812: LD_VAR 0 3
12816: PPUSH
12817: LD_INT 1
12819: PPUSH
12820: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12824: LD_INT 47
12826: PPUSH
12827: LD_VAR 0 3
12831: PPUSH
12832: LD_INT 1
12834: PPUSH
12835: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12839: LD_INT 1
12841: PPUSH
12842: LD_VAR 0 3
12846: PPUSH
12847: LD_INT 1
12849: PPUSH
12850: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12854: LD_INT 2
12856: PPUSH
12857: LD_VAR 0 3
12861: PPUSH
12862: LD_INT 1
12864: PPUSH
12865: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12869: LD_INT 11
12871: PPUSH
12872: LD_VAR 0 3
12876: PPUSH
12877: LD_INT 1
12879: PPUSH
12880: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12884: LD_INT 48
12886: PPUSH
12887: LD_VAR 0 3
12891: PPUSH
12892: LD_INT 1
12894: PPUSH
12895: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12899: LD_INT 69
12901: PPUSH
12902: LD_VAR 0 3
12906: PPUSH
12907: LD_INT 1
12909: PPUSH
12910: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12914: LD_INT 39
12916: PPUSH
12917: LD_VAR 0 3
12921: PPUSH
12922: LD_INT 1
12924: PPUSH
12925: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12929: LD_INT 43
12931: PPUSH
12932: LD_VAR 0 3
12936: PPUSH
12937: LD_INT 1
12939: PPUSH
12940: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12944: LD_INT 51
12946: PPUSH
12947: LD_VAR 0 3
12951: PPUSH
12952: LD_INT 1
12954: PPUSH
12955: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12959: LD_INT 6
12961: PPUSH
12962: LD_VAR 0 3
12966: PPUSH
12967: LD_INT 1
12969: PPUSH
12970: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12974: LD_INT 0
12976: PPUSH
12977: LD_VAR 0 3
12981: PPUSH
12982: LD_INT 1
12984: PPUSH
12985: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12989: LD_INT 2
12991: PPUSH
12992: LD_VAR 0 3
12996: PPUSH
12997: LD_INT 1
12999: PPUSH
13000: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
13004: LD_INT 3
13006: PPUSH
13007: LD_VAR 0 3
13011: PPUSH
13012: LD_INT 1
13014: PPUSH
13015: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13019: LD_INT 4
13021: PPUSH
13022: LD_VAR 0 3
13026: PPUSH
13027: LD_INT 1
13029: PPUSH
13030: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13034: LD_INT 6
13036: PPUSH
13037: LD_VAR 0 3
13041: PPUSH
13042: LD_INT 1
13044: PPUSH
13045: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13049: LD_INT 7
13051: PPUSH
13052: LD_VAR 0 3
13056: PPUSH
13057: LD_INT 1
13059: PPUSH
13060: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13064: LD_INT 8
13066: PPUSH
13067: LD_VAR 0 3
13071: PPUSH
13072: LD_INT 1
13074: PPUSH
13075: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13079: LD_INT 10
13081: PPUSH
13082: LD_VAR 0 3
13086: PPUSH
13087: LD_INT 1
13089: PPUSH
13090: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13094: LD_INT 15
13096: PPUSH
13097: LD_VAR 0 3
13101: PPUSH
13102: LD_INT 1
13104: PPUSH
13105: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13109: LD_INT 16
13111: PPUSH
13112: LD_VAR 0 3
13116: PPUSH
13117: LD_INT 1
13119: PPUSH
13120: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13124: LD_INT 17
13126: PPUSH
13127: LD_VAR 0 3
13131: PPUSH
13132: LD_INT 1
13134: PPUSH
13135: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13139: LD_INT 20
13141: PPUSH
13142: LD_VAR 0 3
13146: PPUSH
13147: LD_INT 1
13149: PPUSH
13150: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13154: LD_INT 26
13156: PPUSH
13157: LD_VAR 0 3
13161: PPUSH
13162: LD_INT 1
13164: PPUSH
13165: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13169: LD_INT 27
13171: PPUSH
13172: LD_VAR 0 3
13176: PPUSH
13177: LD_INT 1
13179: PPUSH
13180: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13184: LD_INT 29
13186: PPUSH
13187: LD_VAR 0 3
13191: PPUSH
13192: LD_INT 1
13194: PPUSH
13195: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13199: LD_INT 31
13201: PPUSH
13202: LD_VAR 0 3
13206: PPUSH
13207: LD_INT 1
13209: PPUSH
13210: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13214: LD_INT 32
13216: PPUSH
13217: LD_VAR 0 3
13221: PPUSH
13222: LD_INT 1
13224: PPUSH
13225: CALL_OW 324
// end ; 4 :
13229: GO 16316
13231: LD_INT 4
13233: DOUBLE
13234: EQUAL
13235: IFTRUE 13239
13237: GO 14187
13239: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13240: LD_INT 35
13242: PPUSH
13243: LD_VAR 0 3
13247: PPUSH
13248: LD_INT 1
13250: PPUSH
13251: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13255: LD_INT 45
13257: PPUSH
13258: LD_VAR 0 3
13262: PPUSH
13263: LD_INT 1
13265: PPUSH
13266: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13270: LD_INT 46
13272: PPUSH
13273: LD_VAR 0 3
13277: PPUSH
13278: LD_INT 1
13280: PPUSH
13281: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13285: LD_INT 47
13287: PPUSH
13288: LD_VAR 0 3
13292: PPUSH
13293: LD_INT 1
13295: PPUSH
13296: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13300: LD_INT 1
13302: PPUSH
13303: LD_VAR 0 3
13307: PPUSH
13308: LD_INT 1
13310: PPUSH
13311: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13315: LD_INT 2
13317: PPUSH
13318: LD_VAR 0 3
13322: PPUSH
13323: LD_INT 1
13325: PPUSH
13326: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13330: LD_INT 11
13332: PPUSH
13333: LD_VAR 0 3
13337: PPUSH
13338: LD_INT 1
13340: PPUSH
13341: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13345: LD_INT 20
13347: PPUSH
13348: LD_VAR 0 3
13352: PPUSH
13353: LD_INT 1
13355: PPUSH
13356: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13360: LD_INT 48
13362: PPUSH
13363: LD_VAR 0 3
13367: PPUSH
13368: LD_INT 1
13370: PPUSH
13371: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13375: LD_INT 49
13377: PPUSH
13378: LD_VAR 0 3
13382: PPUSH
13383: LD_INT 1
13385: PPUSH
13386: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13390: LD_INT 69
13392: PPUSH
13393: LD_VAR 0 3
13397: PPUSH
13398: LD_INT 1
13400: PPUSH
13401: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13405: LD_INT 39
13407: PPUSH
13408: LD_VAR 0 3
13412: PPUSH
13413: LD_INT 1
13415: PPUSH
13416: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13420: LD_INT 34
13422: PPUSH
13423: LD_VAR 0 3
13427: PPUSH
13428: LD_INT 1
13430: PPUSH
13431: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13435: LD_INT 42
13437: PPUSH
13438: LD_VAR 0 3
13442: PPUSH
13443: LD_INT 1
13445: PPUSH
13446: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13450: LD_INT 44
13452: PPUSH
13453: LD_VAR 0 3
13457: PPUSH
13458: LD_INT 1
13460: PPUSH
13461: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13465: LD_INT 41
13467: PPUSH
13468: LD_VAR 0 3
13472: PPUSH
13473: LD_INT 1
13475: PPUSH
13476: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13480: LD_INT 43
13482: PPUSH
13483: LD_VAR 0 3
13487: PPUSH
13488: LD_INT 1
13490: PPUSH
13491: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13495: LD_INT 70
13497: PPUSH
13498: LD_VAR 0 3
13502: PPUSH
13503: LD_INT 1
13505: PPUSH
13506: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13510: LD_INT 51
13512: PPUSH
13513: LD_VAR 0 3
13517: PPUSH
13518: LD_INT 1
13520: PPUSH
13521: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13525: LD_INT 52
13527: PPUSH
13528: LD_VAR 0 3
13532: PPUSH
13533: LD_INT 1
13535: PPUSH
13536: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13540: LD_INT 6
13542: PPUSH
13543: LD_VAR 0 3
13547: PPUSH
13548: LD_INT 1
13550: PPUSH
13551: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13555: LD_INT 15
13557: PPUSH
13558: LD_VAR 0 3
13562: PPUSH
13563: LD_INT 1
13565: PPUSH
13566: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13570: LD_INT 7
13572: PPUSH
13573: LD_VAR 0 3
13577: PPUSH
13578: LD_INT 1
13580: PPUSH
13581: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13585: LD_INT 12
13587: PPUSH
13588: LD_VAR 0 3
13592: PPUSH
13593: LD_INT 1
13595: PPUSH
13596: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13600: LD_INT 18
13602: PPUSH
13603: LD_VAR 0 3
13607: PPUSH
13608: LD_INT 1
13610: PPUSH
13611: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13615: LD_INT 60
13617: PPUSH
13618: LD_VAR 0 3
13622: PPUSH
13623: LD_INT 1
13625: PPUSH
13626: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13630: LD_INT 9
13632: PPUSH
13633: LD_VAR 0 3
13637: PPUSH
13638: LD_INT 1
13640: PPUSH
13641: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13645: LD_INT 30
13647: PPUSH
13648: LD_VAR 0 3
13652: PPUSH
13653: LD_INT 1
13655: PPUSH
13656: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13660: LD_INT 37
13662: PPUSH
13663: LD_VAR 0 3
13667: PPUSH
13668: LD_INT 1
13670: PPUSH
13671: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13675: LD_INT 5
13677: PPUSH
13678: LD_VAR 0 3
13682: PPUSH
13683: LD_INT 1
13685: PPUSH
13686: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13690: LD_INT 66
13692: PPUSH
13693: LD_VAR 0 3
13697: PPUSH
13698: LD_INT 1
13700: PPUSH
13701: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13705: LD_INT 21
13707: PPUSH
13708: LD_VAR 0 3
13712: PPUSH
13713: LD_INT 1
13715: PPUSH
13716: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13720: LD_INT 22
13722: PPUSH
13723: LD_VAR 0 3
13727: PPUSH
13728: LD_INT 1
13730: PPUSH
13731: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13735: LD_INT 54
13737: PPUSH
13738: LD_VAR 0 3
13742: PPUSH
13743: LD_INT 1
13745: PPUSH
13746: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13750: LD_INT 0
13752: PPUSH
13753: LD_VAR 0 3
13757: PPUSH
13758: LD_INT 1
13760: PPUSH
13761: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
13765: LD_INT 1
13767: PPUSH
13768: LD_VAR 0 3
13772: PPUSH
13773: LD_INT 1
13775: PPUSH
13776: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13780: LD_INT 2
13782: PPUSH
13783: LD_VAR 0 3
13787: PPUSH
13788: LD_INT 1
13790: PPUSH
13791: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
13795: LD_INT 3
13797: PPUSH
13798: LD_VAR 0 3
13802: PPUSH
13803: LD_INT 1
13805: PPUSH
13806: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13810: LD_INT 4
13812: PPUSH
13813: LD_VAR 0 3
13817: PPUSH
13818: LD_INT 1
13820: PPUSH
13821: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
13825: LD_INT 5
13827: PPUSH
13828: LD_VAR 0 3
13832: PPUSH
13833: LD_INT 1
13835: PPUSH
13836: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13840: LD_INT 6
13842: PPUSH
13843: LD_VAR 0 3
13847: PPUSH
13848: LD_INT 1
13850: PPUSH
13851: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13855: LD_INT 7
13857: PPUSH
13858: LD_VAR 0 3
13862: PPUSH
13863: LD_INT 1
13865: PPUSH
13866: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13870: LD_INT 8
13872: PPUSH
13873: LD_VAR 0 3
13877: PPUSH
13878: LD_INT 1
13880: PPUSH
13881: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13885: LD_INT 10
13887: PPUSH
13888: LD_VAR 0 3
13892: PPUSH
13893: LD_INT 1
13895: PPUSH
13896: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
13900: LD_INT 11
13902: PPUSH
13903: LD_VAR 0 3
13907: PPUSH
13908: LD_INT 1
13910: PPUSH
13911: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
13915: LD_INT 12
13917: PPUSH
13918: LD_VAR 0 3
13922: PPUSH
13923: LD_INT 1
13925: PPUSH
13926: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
13930: LD_INT 13
13932: PPUSH
13933: LD_VAR 0 3
13937: PPUSH
13938: LD_INT 1
13940: PPUSH
13941: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
13945: LD_INT 14
13947: PPUSH
13948: LD_VAR 0 3
13952: PPUSH
13953: LD_INT 1
13955: PPUSH
13956: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13960: LD_INT 15
13962: PPUSH
13963: LD_VAR 0 3
13967: PPUSH
13968: LD_INT 1
13970: PPUSH
13971: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13975: LD_INT 16
13977: PPUSH
13978: LD_VAR 0 3
13982: PPUSH
13983: LD_INT 1
13985: PPUSH
13986: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13990: LD_INT 17
13992: PPUSH
13993: LD_VAR 0 3
13997: PPUSH
13998: LD_INT 1
14000: PPUSH
14001: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
14005: LD_INT 19
14007: PPUSH
14008: LD_VAR 0 3
14012: PPUSH
14013: LD_INT 1
14015: PPUSH
14016: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
14020: LD_INT 20
14022: PPUSH
14023: LD_VAR 0 3
14027: PPUSH
14028: LD_INT 1
14030: PPUSH
14031: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
14035: LD_INT 21
14037: PPUSH
14038: LD_VAR 0 3
14042: PPUSH
14043: LD_INT 1
14045: PPUSH
14046: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
14050: LD_INT 23
14052: PPUSH
14053: LD_VAR 0 3
14057: PPUSH
14058: LD_INT 1
14060: PPUSH
14061: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
14065: LD_INT 26
14067: PPUSH
14068: LD_VAR 0 3
14072: PPUSH
14073: LD_INT 1
14075: PPUSH
14076: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
14080: LD_INT 27
14082: PPUSH
14083: LD_VAR 0 3
14087: PPUSH
14088: LD_INT 1
14090: PPUSH
14091: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
14095: LD_INT 28
14097: PPUSH
14098: LD_VAR 0 3
14102: PPUSH
14103: LD_INT 1
14105: PPUSH
14106: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14110: LD_INT 29
14112: PPUSH
14113: LD_VAR 0 3
14117: PPUSH
14118: LD_INT 1
14120: PPUSH
14121: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
14125: LD_INT 30
14127: PPUSH
14128: LD_VAR 0 3
14132: PPUSH
14133: LD_INT 1
14135: PPUSH
14136: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14140: LD_INT 31
14142: PPUSH
14143: LD_VAR 0 3
14147: PPUSH
14148: LD_INT 1
14150: PPUSH
14151: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
14155: LD_INT 32
14157: PPUSH
14158: LD_VAR 0 3
14162: PPUSH
14163: LD_INT 1
14165: PPUSH
14166: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
14170: LD_INT 36
14172: PPUSH
14173: LD_VAR 0 3
14177: PPUSH
14178: LD_INT 1
14180: PPUSH
14181: CALL_OW 324
// end ; 5 :
14185: GO 16316
14187: LD_INT 5
14189: DOUBLE
14190: EQUAL
14191: IFTRUE 14195
14193: GO 15308
14195: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14196: LD_INT 35
14198: PPUSH
14199: LD_VAR 0 3
14203: PPUSH
14204: LD_INT 1
14206: PPUSH
14207: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14211: LD_INT 45
14213: PPUSH
14214: LD_VAR 0 3
14218: PPUSH
14219: LD_INT 1
14221: PPUSH
14222: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14226: LD_INT 46
14228: PPUSH
14229: LD_VAR 0 3
14233: PPUSH
14234: LD_INT 1
14236: PPUSH
14237: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14241: LD_INT 47
14243: PPUSH
14244: LD_VAR 0 3
14248: PPUSH
14249: LD_INT 1
14251: PPUSH
14252: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14256: LD_INT 1
14258: PPUSH
14259: LD_VAR 0 3
14263: PPUSH
14264: LD_INT 1
14266: PPUSH
14267: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14271: LD_INT 2
14273: PPUSH
14274: LD_VAR 0 3
14278: PPUSH
14279: LD_INT 1
14281: PPUSH
14282: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14286: LD_INT 11
14288: PPUSH
14289: LD_VAR 0 3
14293: PPUSH
14294: LD_INT 1
14296: PPUSH
14297: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
14301: LD_INT 20
14303: PPUSH
14304: LD_VAR 0 3
14308: PPUSH
14309: LD_INT 1
14311: PPUSH
14312: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14316: LD_INT 48
14318: PPUSH
14319: LD_VAR 0 3
14323: PPUSH
14324: LD_INT 1
14326: PPUSH
14327: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
14331: LD_INT 49
14333: PPUSH
14334: LD_VAR 0 3
14338: PPUSH
14339: LD_INT 1
14341: PPUSH
14342: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14346: LD_INT 69
14348: PPUSH
14349: LD_VAR 0 3
14353: PPUSH
14354: LD_INT 1
14356: PPUSH
14357: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14361: LD_INT 39
14363: PPUSH
14364: LD_VAR 0 3
14368: PPUSH
14369: LD_INT 1
14371: PPUSH
14372: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
14376: LD_INT 34
14378: PPUSH
14379: LD_VAR 0 3
14383: PPUSH
14384: LD_INT 1
14386: PPUSH
14387: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
14391: LD_INT 42
14393: PPUSH
14394: LD_VAR 0 3
14398: PPUSH
14399: LD_INT 1
14401: PPUSH
14402: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
14406: LD_INT 44
14408: PPUSH
14409: LD_VAR 0 3
14413: PPUSH
14414: LD_INT 1
14416: PPUSH
14417: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
14421: LD_INT 41
14423: PPUSH
14424: LD_VAR 0 3
14428: PPUSH
14429: LD_INT 1
14431: PPUSH
14432: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
14436: LD_INT 40
14438: PPUSH
14439: LD_VAR 0 3
14443: PPUSH
14444: LD_INT 1
14446: PPUSH
14447: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14451: LD_INT 43
14453: PPUSH
14454: LD_VAR 0 3
14458: PPUSH
14459: LD_INT 1
14461: PPUSH
14462: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
14466: LD_INT 70
14468: PPUSH
14469: LD_VAR 0 3
14473: PPUSH
14474: LD_INT 1
14476: PPUSH
14477: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14481: LD_INT 51
14483: PPUSH
14484: LD_VAR 0 3
14488: PPUSH
14489: LD_INT 1
14491: PPUSH
14492: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
14496: LD_INT 52
14498: PPUSH
14499: LD_VAR 0 3
14503: PPUSH
14504: LD_INT 1
14506: PPUSH
14507: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14511: LD_INT 6
14513: PPUSH
14514: LD_VAR 0 3
14518: PPUSH
14519: LD_INT 1
14521: PPUSH
14522: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
14526: LD_INT 15
14528: PPUSH
14529: LD_VAR 0 3
14533: PPUSH
14534: LD_INT 1
14536: PPUSH
14537: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
14541: LD_INT 7
14543: PPUSH
14544: LD_VAR 0 3
14548: PPUSH
14549: LD_INT 1
14551: PPUSH
14552: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
14556: LD_INT 12
14558: PPUSH
14559: LD_VAR 0 3
14563: PPUSH
14564: LD_INT 1
14566: PPUSH
14567: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
14571: LD_INT 17
14573: PPUSH
14574: LD_VAR 0 3
14578: PPUSH
14579: LD_INT 1
14581: PPUSH
14582: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
14586: LD_INT 18
14588: PPUSH
14589: LD_VAR 0 3
14593: PPUSH
14594: LD_INT 1
14596: PPUSH
14597: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
14601: LD_INT 60
14603: PPUSH
14604: LD_VAR 0 3
14608: PPUSH
14609: LD_INT 1
14611: PPUSH
14612: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
14616: LD_INT 32
14618: PPUSH
14619: LD_VAR 0 3
14623: PPUSH
14624: LD_INT 1
14626: PPUSH
14627: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
14631: LD_INT 9
14633: PPUSH
14634: LD_VAR 0 3
14638: PPUSH
14639: LD_INT 1
14641: PPUSH
14642: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
14646: LD_INT 57
14648: PPUSH
14649: LD_VAR 0 3
14653: PPUSH
14654: LD_INT 1
14656: PPUSH
14657: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
14661: LD_INT 30
14663: PPUSH
14664: LD_VAR 0 3
14668: PPUSH
14669: LD_INT 1
14671: PPUSH
14672: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
14676: LD_INT 37
14678: PPUSH
14679: LD_VAR 0 3
14683: PPUSH
14684: LD_INT 1
14686: PPUSH
14687: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
14691: LD_INT 63
14693: PPUSH
14694: LD_VAR 0 3
14698: PPUSH
14699: LD_INT 1
14701: PPUSH
14702: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
14706: LD_INT 3
14708: PPUSH
14709: LD_VAR 0 3
14713: PPUSH
14714: LD_INT 1
14716: PPUSH
14717: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
14721: LD_INT 4
14723: PPUSH
14724: LD_VAR 0 3
14728: PPUSH
14729: LD_INT 1
14731: PPUSH
14732: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14736: LD_INT 5
14738: PPUSH
14739: LD_VAR 0 3
14743: PPUSH
14744: LD_INT 1
14746: PPUSH
14747: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14751: LD_INT 66
14753: PPUSH
14754: LD_VAR 0 3
14758: PPUSH
14759: LD_INT 1
14761: PPUSH
14762: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14766: LD_INT 21
14768: PPUSH
14769: LD_VAR 0 3
14773: PPUSH
14774: LD_INT 1
14776: PPUSH
14777: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14781: LD_INT 22
14783: PPUSH
14784: LD_VAR 0 3
14788: PPUSH
14789: LD_INT 1
14791: PPUSH
14792: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
14796: LD_INT 19
14798: PPUSH
14799: LD_VAR 0 3
14803: PPUSH
14804: LD_INT 1
14806: PPUSH
14807: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
14811: LD_INT 54
14813: PPUSH
14814: LD_VAR 0 3
14818: PPUSH
14819: LD_INT 1
14821: PPUSH
14822: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
14826: LD_INT 55
14828: PPUSH
14829: LD_VAR 0 3
14833: PPUSH
14834: LD_INT 1
14836: PPUSH
14837: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14841: LD_INT 0
14843: PPUSH
14844: LD_VAR 0 3
14848: PPUSH
14849: LD_INT 1
14851: PPUSH
14852: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
14856: LD_INT 1
14858: PPUSH
14859: LD_VAR 0 3
14863: PPUSH
14864: LD_INT 1
14866: PPUSH
14867: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14871: LD_INT 2
14873: PPUSH
14874: LD_VAR 0 3
14878: PPUSH
14879: LD_INT 1
14881: PPUSH
14882: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
14886: LD_INT 3
14888: PPUSH
14889: LD_VAR 0 3
14893: PPUSH
14894: LD_INT 1
14896: PPUSH
14897: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14901: LD_INT 4
14903: PPUSH
14904: LD_VAR 0 3
14908: PPUSH
14909: LD_INT 1
14911: PPUSH
14912: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
14916: LD_INT 5
14918: PPUSH
14919: LD_VAR 0 3
14923: PPUSH
14924: LD_INT 1
14926: PPUSH
14927: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14931: LD_INT 6
14933: PPUSH
14934: LD_VAR 0 3
14938: PPUSH
14939: LD_INT 1
14941: PPUSH
14942: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
14946: LD_INT 7
14948: PPUSH
14949: LD_VAR 0 3
14953: PPUSH
14954: LD_INT 1
14956: PPUSH
14957: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
14961: LD_INT 8
14963: PPUSH
14964: LD_VAR 0 3
14968: PPUSH
14969: LD_INT 1
14971: PPUSH
14972: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
14976: LD_INT 10
14978: PPUSH
14979: LD_VAR 0 3
14983: PPUSH
14984: LD_INT 1
14986: PPUSH
14987: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
14991: LD_INT 11
14993: PPUSH
14994: LD_VAR 0 3
14998: PPUSH
14999: LD_INT 1
15001: PPUSH
15002: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
15006: LD_INT 12
15008: PPUSH
15009: LD_VAR 0 3
15013: PPUSH
15014: LD_INT 1
15016: PPUSH
15017: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
15021: LD_INT 13
15023: PPUSH
15024: LD_VAR 0 3
15028: PPUSH
15029: LD_INT 1
15031: PPUSH
15032: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
15036: LD_INT 14
15038: PPUSH
15039: LD_VAR 0 3
15043: PPUSH
15044: LD_INT 1
15046: PPUSH
15047: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
15051: LD_INT 15
15053: PPUSH
15054: LD_VAR 0 3
15058: PPUSH
15059: LD_INT 1
15061: PPUSH
15062: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
15066: LD_INT 16
15068: PPUSH
15069: LD_VAR 0 3
15073: PPUSH
15074: LD_INT 1
15076: PPUSH
15077: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
15081: LD_INT 17
15083: PPUSH
15084: LD_VAR 0 3
15088: PPUSH
15089: LD_INT 1
15091: PPUSH
15092: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
15096: LD_INT 18
15098: PPUSH
15099: LD_VAR 0 3
15103: PPUSH
15104: LD_INT 1
15106: PPUSH
15107: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
15111: LD_INT 19
15113: PPUSH
15114: LD_VAR 0 3
15118: PPUSH
15119: LD_INT 1
15121: PPUSH
15122: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
15126: LD_INT 20
15128: PPUSH
15129: LD_VAR 0 3
15133: PPUSH
15134: LD_INT 1
15136: PPUSH
15137: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
15141: LD_INT 21
15143: PPUSH
15144: LD_VAR 0 3
15148: PPUSH
15149: LD_INT 1
15151: PPUSH
15152: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
15156: LD_INT 23
15158: PPUSH
15159: LD_VAR 0 3
15163: PPUSH
15164: LD_INT 1
15166: PPUSH
15167: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
15171: LD_INT 26
15173: PPUSH
15174: LD_VAR 0 3
15178: PPUSH
15179: LD_INT 1
15181: PPUSH
15182: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15186: LD_INT 27
15188: PPUSH
15189: LD_VAR 0 3
15193: PPUSH
15194: LD_INT 1
15196: PPUSH
15197: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
15201: LD_INT 28
15203: PPUSH
15204: LD_VAR 0 3
15208: PPUSH
15209: LD_INT 1
15211: PPUSH
15212: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15216: LD_INT 29
15218: PPUSH
15219: LD_VAR 0 3
15223: PPUSH
15224: LD_INT 1
15226: PPUSH
15227: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
15231: LD_INT 30
15233: PPUSH
15234: LD_VAR 0 3
15238: PPUSH
15239: LD_INT 1
15241: PPUSH
15242: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15246: LD_INT 31
15248: PPUSH
15249: LD_VAR 0 3
15253: PPUSH
15254: LD_INT 1
15256: PPUSH
15257: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15261: LD_INT 32
15263: PPUSH
15264: LD_VAR 0 3
15268: PPUSH
15269: LD_INT 1
15271: PPUSH
15272: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
15276: LD_INT 33
15278: PPUSH
15279: LD_VAR 0 3
15283: PPUSH
15284: LD_INT 1
15286: PPUSH
15287: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
15291: LD_INT 36
15293: PPUSH
15294: LD_VAR 0 3
15298: PPUSH
15299: LD_INT 1
15301: PPUSH
15302: CALL_OW 324
// end ; 6 :
15306: GO 16316
15308: LD_INT 6
15310: DOUBLE
15311: EQUAL
15312: IFTRUE 15316
15314: GO 16241
15316: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15317: LD_INT 35
15319: PPUSH
15320: LD_VAR 0 3
15324: PPUSH
15325: LD_INT 1
15327: PPUSH
15328: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15332: LD_INT 45
15334: PPUSH
15335: LD_VAR 0 3
15339: PPUSH
15340: LD_INT 1
15342: PPUSH
15343: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15347: LD_INT 46
15349: PPUSH
15350: LD_VAR 0 3
15354: PPUSH
15355: LD_INT 1
15357: PPUSH
15358: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15362: LD_INT 47
15364: PPUSH
15365: LD_VAR 0 3
15369: PPUSH
15370: LD_INT 1
15372: PPUSH
15373: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15377: LD_INT 1
15379: PPUSH
15380: LD_VAR 0 3
15384: PPUSH
15385: LD_INT 1
15387: PPUSH
15388: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15392: LD_INT 2
15394: PPUSH
15395: LD_VAR 0 3
15399: PPUSH
15400: LD_INT 1
15402: PPUSH
15403: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15407: LD_INT 11
15409: PPUSH
15410: LD_VAR 0 3
15414: PPUSH
15415: LD_INT 1
15417: PPUSH
15418: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15422: LD_INT 20
15424: PPUSH
15425: LD_VAR 0 3
15429: PPUSH
15430: LD_INT 1
15432: PPUSH
15433: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15437: LD_INT 48
15439: PPUSH
15440: LD_VAR 0 3
15444: PPUSH
15445: LD_INT 1
15447: PPUSH
15448: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15452: LD_INT 49
15454: PPUSH
15455: LD_VAR 0 3
15459: PPUSH
15460: LD_INT 1
15462: PPUSH
15463: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
15467: LD_INT 50
15469: PPUSH
15470: LD_VAR 0 3
15474: PPUSH
15475: LD_INT 1
15477: PPUSH
15478: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15482: LD_INT 69
15484: PPUSH
15485: LD_VAR 0 3
15489: PPUSH
15490: LD_INT 1
15492: PPUSH
15493: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15497: LD_INT 39
15499: PPUSH
15500: LD_VAR 0 3
15504: PPUSH
15505: LD_INT 1
15507: PPUSH
15508: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15512: LD_INT 34
15514: PPUSH
15515: LD_VAR 0 3
15519: PPUSH
15520: LD_INT 1
15522: PPUSH
15523: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15527: LD_INT 42
15529: PPUSH
15530: LD_VAR 0 3
15534: PPUSH
15535: LD_INT 1
15537: PPUSH
15538: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15542: LD_INT 44
15544: PPUSH
15545: LD_VAR 0 3
15549: PPUSH
15550: LD_INT 1
15552: PPUSH
15553: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15557: LD_INT 41
15559: PPUSH
15560: LD_VAR 0 3
15564: PPUSH
15565: LD_INT 1
15567: PPUSH
15568: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
15572: LD_INT 13
15574: PPUSH
15575: LD_VAR 0 3
15579: PPUSH
15580: LD_INT 1
15582: PPUSH
15583: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
15587: LD_INT 40
15589: PPUSH
15590: LD_VAR 0 3
15594: PPUSH
15595: LD_INT 1
15597: PPUSH
15598: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15602: LD_INT 43
15604: PPUSH
15605: LD_VAR 0 3
15609: PPUSH
15610: LD_INT 1
15612: PPUSH
15613: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15617: LD_INT 70
15619: PPUSH
15620: LD_VAR 0 3
15624: PPUSH
15625: LD_INT 1
15627: PPUSH
15628: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
15632: LD_INT 23
15634: PPUSH
15635: LD_VAR 0 3
15639: PPUSH
15640: LD_INT 1
15642: PPUSH
15643: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15647: LD_INT 51
15649: PPUSH
15650: LD_VAR 0 3
15654: PPUSH
15655: LD_INT 1
15657: PPUSH
15658: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15662: LD_INT 52
15664: PPUSH
15665: LD_VAR 0 3
15669: PPUSH
15670: LD_INT 1
15672: PPUSH
15673: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15677: LD_INT 6
15679: PPUSH
15680: LD_VAR 0 3
15684: PPUSH
15685: LD_INT 1
15687: PPUSH
15688: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
15692: LD_INT 15
15694: PPUSH
15695: LD_VAR 0 3
15699: PPUSH
15700: LD_INT 1
15702: PPUSH
15703: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
15707: LD_INT 7
15709: PPUSH
15710: LD_VAR 0 3
15714: PPUSH
15715: LD_INT 1
15717: PPUSH
15718: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
15722: LD_INT 12
15724: PPUSH
15725: LD_VAR 0 3
15729: PPUSH
15730: LD_INT 1
15732: PPUSH
15733: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
15737: LD_INT 10
15739: PPUSH
15740: LD_VAR 0 3
15744: PPUSH
15745: LD_INT 1
15747: PPUSH
15748: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
15752: LD_INT 17
15754: PPUSH
15755: LD_VAR 0 3
15759: PPUSH
15760: LD_INT 1
15762: PPUSH
15763: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
15767: LD_INT 18
15769: PPUSH
15770: LD_VAR 0 3
15774: PPUSH
15775: LD_INT 1
15777: PPUSH
15778: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
15782: LD_INT 60
15784: PPUSH
15785: LD_VAR 0 3
15789: PPUSH
15790: LD_INT 1
15792: PPUSH
15793: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
15797: LD_INT 61
15799: PPUSH
15800: LD_VAR 0 3
15804: PPUSH
15805: LD_INT 1
15807: PPUSH
15808: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
15812: LD_INT 32
15814: PPUSH
15815: LD_VAR 0 3
15819: PPUSH
15820: LD_INT 1
15822: PPUSH
15823: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
15827: LD_INT 27
15829: PPUSH
15830: LD_VAR 0 3
15834: PPUSH
15835: LD_INT 1
15837: PPUSH
15838: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
15842: LD_INT 36
15844: PPUSH
15845: LD_VAR 0 3
15849: PPUSH
15850: LD_INT 1
15852: PPUSH
15853: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
15857: LD_INT 33
15859: PPUSH
15860: LD_VAR 0 3
15864: PPUSH
15865: LD_INT 1
15867: PPUSH
15868: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
15872: LD_INT 9
15874: PPUSH
15875: LD_VAR 0 3
15879: PPUSH
15880: LD_INT 1
15882: PPUSH
15883: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
15887: LD_INT 38
15889: PPUSH
15890: LD_VAR 0 3
15894: PPUSH
15895: LD_INT 1
15897: PPUSH
15898: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
15902: LD_INT 57
15904: PPUSH
15905: LD_VAR 0 3
15909: PPUSH
15910: LD_INT 1
15912: PPUSH
15913: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
15917: LD_INT 58
15919: PPUSH
15920: LD_VAR 0 3
15924: PPUSH
15925: LD_INT 1
15927: PPUSH
15928: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
15932: LD_INT 28
15934: PPUSH
15935: LD_VAR 0 3
15939: PPUSH
15940: LD_INT 1
15942: PPUSH
15943: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
15947: LD_INT 29
15949: PPUSH
15950: LD_VAR 0 3
15954: PPUSH
15955: LD_INT 1
15957: PPUSH
15958: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
15962: LD_INT 30
15964: PPUSH
15965: LD_VAR 0 3
15969: PPUSH
15970: LD_INT 1
15972: PPUSH
15973: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
15977: LD_INT 37
15979: PPUSH
15980: LD_VAR 0 3
15984: PPUSH
15985: LD_INT 1
15987: PPUSH
15988: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
15992: LD_INT 63
15994: PPUSH
15995: LD_VAR 0 3
15999: PPUSH
16000: LD_INT 1
16002: PPUSH
16003: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
16007: LD_INT 64
16009: PPUSH
16010: LD_VAR 0 3
16014: PPUSH
16015: LD_INT 1
16017: PPUSH
16018: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
16022: LD_INT 3
16024: PPUSH
16025: LD_VAR 0 3
16029: PPUSH
16030: LD_INT 1
16032: PPUSH
16033: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
16037: LD_INT 4
16039: PPUSH
16040: LD_VAR 0 3
16044: PPUSH
16045: LD_INT 1
16047: PPUSH
16048: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
16052: LD_INT 5
16054: PPUSH
16055: LD_VAR 0 3
16059: PPUSH
16060: LD_INT 1
16062: PPUSH
16063: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
16067: LD_INT 8
16069: PPUSH
16070: LD_VAR 0 3
16074: PPUSH
16075: LD_INT 1
16077: PPUSH
16078: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
16082: LD_INT 66
16084: PPUSH
16085: LD_VAR 0 3
16089: PPUSH
16090: LD_INT 1
16092: PPUSH
16093: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
16097: LD_INT 67
16099: PPUSH
16100: LD_VAR 0 3
16104: PPUSH
16105: LD_INT 1
16107: PPUSH
16108: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
16112: LD_INT 21
16114: PPUSH
16115: LD_VAR 0 3
16119: PPUSH
16120: LD_INT 1
16122: PPUSH
16123: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
16127: LD_INT 22
16129: PPUSH
16130: LD_VAR 0 3
16134: PPUSH
16135: LD_INT 1
16137: PPUSH
16138: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
16142: LD_INT 19
16144: PPUSH
16145: LD_VAR 0 3
16149: PPUSH
16150: LD_INT 1
16152: PPUSH
16153: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
16157: LD_INT 26
16159: PPUSH
16160: LD_VAR 0 3
16164: PPUSH
16165: LD_INT 1
16167: PPUSH
16168: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
16172: LD_INT 54
16174: PPUSH
16175: LD_VAR 0 3
16179: PPUSH
16180: LD_INT 1
16182: PPUSH
16183: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
16187: LD_INT 55
16189: PPUSH
16190: LD_VAR 0 3
16194: PPUSH
16195: LD_INT 1
16197: PPUSH
16198: CALL_OW 322
// for i = 0 to 39 do
16202: LD_ADDR_VAR 0 4
16206: PUSH
16207: DOUBLE
16208: LD_INT 0
16210: DEC
16211: ST_TO_ADDR
16212: LD_INT 39
16214: PUSH
16215: FOR_TO
16216: IFFALSE 16237
// SetRestrict ( i , side , true ) ;
16218: LD_VAR 0 4
16222: PPUSH
16223: LD_VAR 0 3
16227: PPUSH
16228: LD_INT 1
16230: PPUSH
16231: CALL_OW 324
16235: GO 16215
16237: POP
16238: POP
// end ; else
16239: GO 16316
16241: POP
// begin for i = 1 to 73 do
16242: LD_ADDR_VAR 0 4
16246: PUSH
16247: DOUBLE
16248: LD_INT 1
16250: DEC
16251: ST_TO_ADDR
16252: LD_INT 73
16254: PUSH
16255: FOR_TO
16256: IFFALSE 16277
// SetTech ( i , side , state_enabled ) ;
16258: LD_VAR 0 4
16262: PPUSH
16263: LD_VAR 0 3
16267: PPUSH
16268: LD_INT 1
16270: PPUSH
16271: CALL_OW 322
16275: GO 16255
16277: POP
16278: POP
// for i = 0 to 39 do
16279: LD_ADDR_VAR 0 4
16283: PUSH
16284: DOUBLE
16285: LD_INT 0
16287: DEC
16288: ST_TO_ADDR
16289: LD_INT 39
16291: PUSH
16292: FOR_TO
16293: IFFALSE 16314
// SetRestrict ( i , side , true ) ;
16295: LD_VAR 0 4
16299: PPUSH
16300: LD_VAR 0 3
16304: PPUSH
16305: LD_INT 1
16307: PPUSH
16308: CALL_OW 324
16312: GO 16292
16314: POP
16315: POP
// end ; end ; end ;
16316: GO 12321
16318: POP
16319: POP
// end ; end_of_file
16320: LD_VAR 0 2
16324: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
16325: LD_INT 0
16327: PPUSH
16328: PPUSH
// enable ( 98 ) ;
16329: LD_INT 98
16331: ENABLE_MARKED
// GameEnded = false ;
16332: LD_ADDR_LOC 29
16336: PUSH
16337: LD_INT 0
16339: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
16340: LD_ADDR_LOC 28
16344: PUSH
16345: LD_INT 0
16347: PUSH
16348: LD_INT 0
16350: PUSH
16351: LD_INT 0
16353: PUSH
16354: LD_INT 0
16356: PUSH
16357: LD_INT 0
16359: PUSH
16360: LD_INT 0
16362: PUSH
16363: LD_INT 0
16365: PUSH
16366: LD_INT 0
16368: PUSH
16369: EMPTY
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: ST_TO_ADDR
// unfoged = false ;
16379: LD_ADDR_LOC 30
16383: PUSH
16384: LD_INT 0
16386: ST_TO_ADDR
// defeated_specs := [ ] ;
16387: LD_ADDR_LOC 31
16391: PUSH
16392: EMPTY
16393: ST_TO_ADDR
// for i = 1 to side_positions do
16394: LD_ADDR_VAR 0 2
16398: PUSH
16399: DOUBLE
16400: LD_INT 1
16402: DEC
16403: ST_TO_ADDR
16404: LD_EXP 19
16408: PUSH
16409: FOR_TO
16410: IFFALSE 16450
// if not side_positions [ i ] then
16412: LD_EXP 19
16416: PUSH
16417: LD_VAR 0 2
16421: ARRAY
16422: NOT
16423: IFFALSE 16448
// defeated = replace ( defeated , i , true ) ;
16425: LD_ADDR_LOC 28
16429: PUSH
16430: LD_LOC 28
16434: PPUSH
16435: LD_VAR 0 2
16439: PPUSH
16440: LD_INT 1
16442: PPUSH
16443: CALL_OW 1
16447: ST_TO_ADDR
16448: GO 16409
16450: POP
16451: POP
// end ;
16452: LD_VAR 0 1
16456: RET
// function CanWinLoose ; begin
16457: LD_INT 0
16459: PPUSH
// Result := true ;
16460: LD_ADDR_VAR 0 1
16464: PUSH
16465: LD_INT 1
16467: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
16468: CALL_OW 518
16472: PUSH
16473: CALL_OW 519
16477: PUSH
16478: LD_INT 0
16480: GREATER
16481: AND
16482: IFFALSE 16492
// Result := false ;
16484: LD_ADDR_VAR 0 1
16488: PUSH
16489: LD_INT 0
16491: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
16492: CALL_OW 531
16496: PUSH
16497: CALL_OW 519
16501: PUSH
16502: LD_INT 1
16504: GREATER
16505: AND
16506: IFFALSE 16516
// Result := false ;
16508: LD_ADDR_VAR 0 1
16512: PUSH
16513: LD_INT 0
16515: ST_TO_ADDR
// end ;
16516: LD_VAR 0 1
16520: RET
// export function HasPower ( i ) ; var k , h ; begin
16521: LD_INT 0
16523: PPUSH
16524: PPUSH
16525: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
16526: LD_VAR 0 1
16530: PPUSH
16531: CALL_OW 108
16535: NOT
16536: PUSH
16537: LD_EXP 18
16541: PUSH
16542: LD_VAR 0 1
16546: ARRAY
16547: NOT
16548: AND
16549: PUSH
16550: LD_OWVAR 4
16554: AND
16555: IFFALSE 16567
// begin result = false ;
16557: LD_ADDR_VAR 0 2
16561: PUSH
16562: LD_INT 0
16564: ST_TO_ADDR
// end else
16565: GO 16862
// case def_win_rules of 0 :
16567: LD_EXP 15
16571: PUSH
16572: LD_INT 0
16574: DOUBLE
16575: EQUAL
16576: IFTRUE 16580
16578: GO 16743
16580: POP
// if def_people_respawning then
16581: LD_EXP 49
16585: IFFALSE 16676
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
16587: LD_ADDR_VAR 0 2
16591: PUSH
16592: LD_INT 22
16594: PUSH
16595: LD_VAR 0 1
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: PUSH
16604: LD_INT 2
16606: PUSH
16607: LD_INT 21
16609: PUSH
16610: LD_INT 1
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: PUSH
16617: LD_INT 33
16619: PUSH
16620: LD_INT 3
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: PUSH
16627: LD_INT 33
16629: PUSH
16630: LD_INT 5
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: PUSH
16637: LD_INT 30
16639: PUSH
16640: LD_INT 0
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: PUSH
16647: LD_INT 30
16649: PUSH
16650: LD_INT 1
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: PPUSH
16669: CALL_OW 69
16673: ST_TO_ADDR
16674: GO 16741
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
16676: LD_ADDR_VAR 0 2
16680: PUSH
16681: LD_INT 22
16683: PUSH
16684: LD_VAR 0 1
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PUSH
16693: LD_INT 2
16695: PUSH
16696: LD_INT 21
16698: PUSH
16699: LD_INT 1
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: LD_INT 33
16708: PUSH
16709: LD_INT 3
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PUSH
16716: LD_INT 33
16718: PUSH
16719: LD_INT 5
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: PUSH
16726: EMPTY
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: PPUSH
16736: CALL_OW 69
16740: ST_TO_ADDR
16741: GO 16862
16743: LD_INT 1
16745: DOUBLE
16746: EQUAL
16747: IFTRUE 16751
16749: GO 16790
16751: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
16752: LD_ADDR_VAR 0 2
16756: PUSH
16757: LD_INT 22
16759: PUSH
16760: LD_VAR 0 1
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: PUSH
16769: LD_INT 21
16771: PUSH
16772: LD_INT 1
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: PPUSH
16783: CALL_OW 69
16787: ST_TO_ADDR
16788: GO 16862
16790: LD_INT 2
16792: DOUBLE
16793: EQUAL
16794: IFTRUE 16798
16796: GO 16861
16798: POP
// begin h = false ;
16799: LD_ADDR_VAR 0 4
16803: PUSH
16804: LD_INT 0
16806: ST_TO_ADDR
// for k in heroes [ i ] do
16807: LD_ADDR_VAR 0 3
16811: PUSH
16812: LD_EXP 29
16816: PUSH
16817: LD_VAR 0 1
16821: ARRAY
16822: PUSH
16823: FOR_IN
16824: IFFALSE 16847
// if IsLive ( k ) then
16826: LD_VAR 0 3
16830: PPUSH
16831: CALL_OW 300
16835: IFFALSE 16845
// h = true ;
16837: LD_ADDR_VAR 0 4
16841: PUSH
16842: LD_INT 1
16844: ST_TO_ADDR
16845: GO 16823
16847: POP
16848: POP
// Result := h ;
16849: LD_ADDR_VAR 0 2
16853: PUSH
16854: LD_VAR 0 4
16858: ST_TO_ADDR
// end ; end ;
16859: GO 16862
16861: POP
// end ;
16862: LD_VAR 0 2
16866: RET
// function AlliedSides ( i , j ) ; begin
16867: LD_INT 0
16869: PPUSH
// Result := false ;
16870: LD_ADDR_VAR 0 3
16874: PUSH
16875: LD_INT 0
16877: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
16878: LD_VAR 0 1
16882: PPUSH
16883: LD_VAR 0 2
16887: PPUSH
16888: CALL_OW 81
16892: PUSH
16893: LD_INT 1
16895: EQUAL
16896: PUSH
16897: LD_VAR 0 2
16901: PPUSH
16902: LD_VAR 0 1
16906: PPUSH
16907: CALL_OW 81
16911: PUSH
16912: LD_INT 1
16914: EQUAL
16915: AND
16916: PUSH
16917: LD_VAR 0 1
16921: PPUSH
16922: CALL_OW 83
16926: AND
16927: PUSH
16928: LD_VAR 0 2
16932: PPUSH
16933: CALL_OW 83
16937: AND
16938: IFFALSE 16948
// Result := true ;
16940: LD_ADDR_VAR 0 3
16944: PUSH
16945: LD_INT 1
16947: ST_TO_ADDR
// end ;
16948: LD_VAR 0 3
16952: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
16953: CALL 16457 0 0
16957: PUSH
16958: LD_LOC 29
16962: NOT
16963: AND
16964: IFFALSE 16980
16966: GO 16968
16968: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
16969: LD_ADDR_EXP 55
16973: PUSH
16974: LD_STRING #Player-Ended
16976: PUSH
16977: EMPTY
16978: LIST
16979: ST_TO_ADDR
16980: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
16981: CALL 16457 0 0
16985: PUSH
16986: LD_LOC 29
16990: AND
16991: IFFALSE 17000
16993: GO 16995
16995: DISABLE
// YouLostInMultiplayer ;
16996: CALL_OW 107
17000: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
17001: CALL 16457 0 0
17005: NOT
17006: PUSH
17007: CALL_OW 531
17011: NOT
17012: AND
17013: IFFALSE 17029
17015: GO 17017
17017: DISABLE
// WaitServerStrings = [ #server-wait ] ;
17018: LD_ADDR_EXP 55
17022: PUSH
17023: LD_STRING #server-wait
17025: PUSH
17026: EMPTY
17027: LIST
17028: ST_TO_ADDR
17029: END
// every 100 trigger IAmSpec do
17030: CALL_OW 531
17034: IFFALSE 17050
17036: GO 17038
17038: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
17039: LD_ADDR_EXP 55
17043: PUSH
17044: LD_STRING #Player-IAmSpec
17046: PUSH
17047: EMPTY
17048: LIST
17049: ST_TO_ADDR
17050: END
// every 100 trigger GameEnded and IAmSpec do
17051: LD_LOC 29
17055: PUSH
17056: CALL_OW 531
17060: AND
17061: IFFALSE 17070
17063: GO 17065
17065: DISABLE
// YouLostInMultiplayer ;
17066: CALL_OW 107
17070: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
17071: CALL 16457 0 0
17075: PUSH
17076: LD_LOC 29
17080: NOT
17081: AND
17082: IFFALSE 17098
17084: GO 17086
17086: DISABLE
// WaitServerStrings = [ $player-win ] ;
17087: LD_ADDR_EXP 55
17091: PUSH
17092: LD_STRING $player-win
17094: PUSH
17095: EMPTY
17096: LIST
17097: ST_TO_ADDR
17098: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
17099: CALL 16457 0 0
17103: PUSH
17104: LD_LOC 29
17108: AND
17109: IFFALSE 17133
17111: GO 17113
17113: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
17114: LD_EXP 20
17118: PUSH
17119: LD_OWVAR 7
17123: ARRAY
17124: PPUSH
17125: CALL 11959 0 1
// YouWinInMultiplayer ;
17129: CALL_OW 106
// end ;
17133: END
// every 100 trigger isEditor marked 401 do
17134: LD_OWVAR 84
17138: IFFALSE 17154
17140: GO 17142
17142: DISABLE
// Debug_Strings = [ You won ] ;
17143: LD_ADDR_OWVAR 48
17147: PUSH
17148: LD_STRING You won
17150: PUSH
17151: EMPTY
17152: LIST
17153: ST_TO_ADDR
17154: END
// every 100 trigger isEditor marked 400 do
17155: LD_OWVAR 84
17159: IFFALSE 17175
17161: GO 17163
17163: DISABLE
// Debug_Strings = [ You loss ] ;
17164: LD_ADDR_OWVAR 48
17168: PUSH
17169: LD_STRING You loss
17171: PUSH
17172: EMPTY
17173: LIST
17174: ST_TO_ADDR
17175: END
// every 100 marked 98 do var i , un ;
17176: GO 17178
17178: DISABLE
17179: LD_INT 0
17181: PPUSH
17182: PPUSH
// begin for i = 1 to side_positions do
17183: LD_ADDR_VAR 0 1
17187: PUSH
17188: DOUBLE
17189: LD_INT 1
17191: DEC
17192: ST_TO_ADDR
17193: LD_EXP 19
17197: PUSH
17198: FOR_TO
17199: IFFALSE 17286
// begin if side_positions [ i ] then
17201: LD_EXP 19
17205: PUSH
17206: LD_VAR 0 1
17210: ARRAY
17211: IFFALSE 17284
// if not HasPower ( i ) and not defeated [ i ] then
17213: LD_VAR 0 1
17217: PPUSH
17218: CALL 16521 0 1
17222: NOT
17223: PUSH
17224: LD_LOC 28
17228: PUSH
17229: LD_VAR 0 1
17233: ARRAY
17234: NOT
17235: AND
17236: IFFALSE 17284
// begin defeated = replace ( defeated , i , true ) ;
17238: LD_ADDR_LOC 28
17242: PUSH
17243: LD_LOC 28
17247: PPUSH
17248: LD_VAR 0 1
17252: PPUSH
17253: LD_INT 1
17255: PPUSH
17256: CALL_OW 1
17260: ST_TO_ADDR
// if i = mp_player_side then
17261: LD_VAR 0 1
17265: PUSH
17266: LD_OWVAR 7
17270: EQUAL
17271: IFFALSE 17284
// begin Multiplayer_Loose_Message ;
17273: CALL_OW 521
// SetPlayerSpectator ( ) ;
17277: CALL_OW 572
// enable ( 400 ) ;
17281: LD_INT 400
17283: ENABLE_MARKED
// end ; end ; end ;
17284: GO 17198
17286: POP
17287: POP
// DidGameEnd ;
17288: CALL 17303 0 0
// if not GameEnded then
17292: LD_LOC 29
17296: NOT
17297: IFFALSE 17300
// enable ;
17299: ENABLE
// end ;
17300: PPOPN 2
17302: END
// function DidGameEnd ; var i , k , enemy ; begin
17303: LD_INT 0
17305: PPUSH
17306: PPUSH
17307: PPUSH
17308: PPUSH
// enemy = [ ] ;
17309: LD_ADDR_VAR 0 4
17313: PUSH
17314: EMPTY
17315: ST_TO_ADDR
// for i = 1 to side_positions do
17316: LD_ADDR_VAR 0 2
17320: PUSH
17321: DOUBLE
17322: LD_INT 1
17324: DEC
17325: ST_TO_ADDR
17326: LD_EXP 19
17330: PUSH
17331: FOR_TO
17332: IFFALSE 17426
// if not defeated [ i ] then
17334: LD_LOC 28
17338: PUSH
17339: LD_VAR 0 2
17343: ARRAY
17344: NOT
17345: IFFALSE 17424
// for k = 1 to side_positions do
17347: LD_ADDR_VAR 0 3
17351: PUSH
17352: DOUBLE
17353: LD_INT 1
17355: DEC
17356: ST_TO_ADDR
17357: LD_EXP 19
17361: PUSH
17362: FOR_TO
17363: IFFALSE 17422
// if not defeated [ k ] then
17365: LD_LOC 28
17369: PUSH
17370: LD_VAR 0 3
17374: ARRAY
17375: NOT
17376: IFFALSE 17420
// if not AlliedSides ( i , k ) then
17378: LD_VAR 0 2
17382: PPUSH
17383: LD_VAR 0 3
17387: PPUSH
17388: CALL 16867 0 2
17392: NOT
17393: IFFALSE 17420
// enemy = enemy ^ [ i , k ] ;
17395: LD_ADDR_VAR 0 4
17399: PUSH
17400: LD_VAR 0 4
17404: PUSH
17405: LD_VAR 0 2
17409: PUSH
17410: LD_VAR 0 3
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: ADD
17419: ST_TO_ADDR
17420: GO 17362
17422: POP
17423: POP
17424: GO 17331
17426: POP
17427: POP
// if not enemy then
17428: LD_VAR 0 4
17432: NOT
17433: IFFALSE 17459
// begin GameEnded = true ;
17435: LD_ADDR_LOC 29
17439: PUSH
17440: LD_INT 1
17442: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
17443: LD_LOC 28
17447: PUSH
17448: LD_OWVAR 7
17452: ARRAY
17453: NOT
17454: IFFALSE 17459
// enable ( 401 ) ;
17456: LD_INT 401
17458: ENABLE_MARKED
// end ; end ;
17459: LD_VAR 0 1
17463: RET
// function unfog ; var k , friends ; begin
17464: LD_INT 0
17466: PPUSH
17467: PPUSH
17468: PPUSH
// for k = 1 to side_positions do
17469: LD_ADDR_VAR 0 2
17473: PUSH
17474: DOUBLE
17475: LD_INT 1
17477: DEC
17478: ST_TO_ADDR
17479: LD_EXP 19
17483: PUSH
17484: FOR_TO
17485: IFFALSE 17541
// if not defeated [ k ] then
17487: LD_LOC 28
17491: PUSH
17492: LD_VAR 0 2
17496: ARRAY
17497: NOT
17498: IFFALSE 17539
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
17500: LD_OWVAR 7
17504: PPUSH
17505: LD_VAR 0 2
17509: PPUSH
17510: CALL_OW 81
17514: PUSH
17515: LD_INT 1
17517: PUSH
17518: EMPTY
17519: LIST
17520: IN
17521: IFFALSE 17539
// friends = friends ^ k ;
17523: LD_ADDR_VAR 0 3
17527: PUSH
17528: LD_VAR 0 3
17532: PUSH
17533: LD_VAR 0 2
17537: ADD
17538: ST_TO_ADDR
17539: GO 17484
17541: POP
17542: POP
// if not friends then
17543: LD_VAR 0 3
17547: NOT
17548: IFFALSE 17562
// begin SetPlayerSpectator ( ) ;
17550: CALL_OW 572
// unfoged = true ;
17554: LD_ADDR_LOC 30
17558: PUSH
17559: LD_INT 1
17561: ST_TO_ADDR
// end ; end ;
17562: LD_VAR 0 1
17566: RET
// export function MakeGameEnd ; begin
17567: LD_INT 0
17569: PPUSH
// SetPlayerSpectator ( ) ;
17570: CALL_OW 572
// unfoged = true ;
17574: LD_ADDR_LOC 30
17578: PUSH
17579: LD_INT 1
17581: ST_TO_ADDR
// wait ( 0 0$5 ) ;
17582: LD_INT 175
17584: PPUSH
17585: CALL_OW 67
// GameEnded = true ;
17589: LD_ADDR_LOC 29
17593: PUSH
17594: LD_INT 1
17596: ST_TO_ADDR
// end ;
17597: LD_VAR 0 1
17601: RET
// export function GetGameEnded ; begin
17602: LD_INT 0
17604: PPUSH
// result = GameEnded ;
17605: LD_ADDR_VAR 0 1
17609: PUSH
17610: LD_LOC 29
17614: ST_TO_ADDR
// end ; end_of_file
17615: LD_VAR 0 1
17619: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
17620: LD_INT 0
17622: PPUSH
17623: PPUSH
17624: PPUSH
17625: PPUSH
17626: PPUSH
17627: PPUSH
17628: PPUSH
17629: PPUSH
17630: PPUSH
// for i := 1 to 8 do
17631: LD_ADDR_VAR 0 2
17635: PUSH
17636: DOUBLE
17637: LD_INT 1
17639: DEC
17640: ST_TO_ADDR
17641: LD_INT 8
17643: PUSH
17644: FOR_TO
17645: IFFALSE 18029
// begin if Side_Positions [ i ] then
17647: LD_EXP 19
17651: PUSH
17652: LD_VAR 0 2
17656: ARRAY
17657: IFFALSE 18027
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
17659: LD_ADDR_VAR 0 7
17663: PUSH
17664: LD_INT 22
17666: PUSH
17667: LD_VAR 0 2
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PUSH
17676: LD_INT 21
17678: PUSH
17679: LD_INT 1
17681: PUSH
17682: EMPTY
17683: LIST
17684: LIST
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: PPUSH
17690: CALL_OW 69
17694: PUSH
17695: LD_INT 0
17697: PLUS
17698: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17699: LD_ADDR_VAR 0 9
17703: PUSH
17704: LD_INT 22
17706: PUSH
17707: LD_VAR 0 2
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PUSH
17716: LD_INT 2
17718: PUSH
17719: LD_INT 30
17721: PUSH
17722: LD_INT 0
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: PUSH
17729: LD_INT 30
17731: PUSH
17732: LD_INT 1
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: LIST
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: PPUSH
17748: CALL_OW 69
17752: ST_TO_ADDR
// crates := 0 ;
17753: LD_ADDR_VAR 0 4
17757: PUSH
17758: LD_INT 0
17760: ST_TO_ADDR
// oil := 0 ;
17761: LD_ADDR_VAR 0 5
17765: PUSH
17766: LD_INT 0
17768: ST_TO_ADDR
// sib := 0 ;
17769: LD_ADDR_VAR 0 6
17773: PUSH
17774: LD_INT 0
17776: ST_TO_ADDR
// if bases then
17777: LD_VAR 0 9
17781: IFFALSE 17887
// begin for j in bases do
17783: LD_ADDR_VAR 0 3
17787: PUSH
17788: LD_VAR 0 9
17792: PUSH
17793: FOR_IN
17794: IFFALSE 17885
// begin base := GetBase ( j ) ;
17796: LD_ADDR_VAR 0 8
17800: PUSH
17801: LD_VAR 0 3
17805: PPUSH
17806: CALL_OW 274
17810: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
17811: LD_ADDR_VAR 0 4
17815: PUSH
17816: LD_VAR 0 4
17820: PUSH
17821: LD_VAR 0 8
17825: PPUSH
17826: LD_INT 1
17828: PPUSH
17829: CALL_OW 275
17833: PLUS
17834: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
17835: LD_ADDR_VAR 0 5
17839: PUSH
17840: LD_VAR 0 5
17844: PUSH
17845: LD_VAR 0 8
17849: PPUSH
17850: LD_INT 2
17852: PPUSH
17853: CALL_OW 275
17857: PLUS
17858: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
17859: LD_ADDR_VAR 0 6
17863: PUSH
17864: LD_VAR 0 6
17868: PUSH
17869: LD_VAR 0 8
17873: PPUSH
17874: LD_INT 3
17876: PPUSH
17877: CALL_OW 275
17881: PLUS
17882: ST_TO_ADDR
// end ;
17883: GO 17793
17885: POP
17886: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
17887: LD_STRING setSpecText(
17889: PUSH
17890: LD_VAR 0 2
17894: STR
17895: PUSH
17896: LD_STRING ,
17898: STR
17899: PUSH
17900: LD_INT 2
17902: STR
17903: PUSH
17904: LD_STRING ,
17906: STR
17907: PUSH
17908: LD_VAR 0 4
17912: STR
17913: PUSH
17914: LD_STRING )
17916: STR
17917: PPUSH
17918: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
17922: LD_STRING setSpecText(
17924: PUSH
17925: LD_VAR 0 2
17929: STR
17930: PUSH
17931: LD_STRING ,
17933: STR
17934: PUSH
17935: LD_INT 3
17937: STR
17938: PUSH
17939: LD_STRING ,
17941: STR
17942: PUSH
17943: LD_VAR 0 5
17947: STR
17948: PUSH
17949: LD_STRING )
17951: STR
17952: PPUSH
17953: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
17957: LD_STRING setSpecText(
17959: PUSH
17960: LD_VAR 0 2
17964: STR
17965: PUSH
17966: LD_STRING ,
17968: STR
17969: PUSH
17970: LD_INT 4
17972: STR
17973: PUSH
17974: LD_STRING ,
17976: STR
17977: PUSH
17978: LD_VAR 0 6
17982: STR
17983: PUSH
17984: LD_STRING )
17986: STR
17987: PPUSH
17988: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
17992: LD_STRING setSpecText(
17994: PUSH
17995: LD_VAR 0 2
17999: STR
18000: PUSH
18001: LD_STRING ,
18003: STR
18004: PUSH
18005: LD_INT 5
18007: STR
18008: PUSH
18009: LD_STRING ,
18011: STR
18012: PUSH
18013: LD_VAR 0 7
18017: STR
18018: PUSH
18019: LD_STRING )
18021: STR
18022: PPUSH
18023: CALL_OW 559
// end ; end ;
18027: GO 17644
18029: POP
18030: POP
// end ;
18031: LD_VAR 0 1
18035: RET
// every 0 0$1 do
18036: GO 18038
18038: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
18039: LD_STRING setSpecLogoNumber(
18041: PUSH
18042: LD_INT 2
18044: STR
18045: PUSH
18046: LD_STRING ,
18048: STR
18049: PUSH
18050: LD_INT 1
18052: STR
18053: PUSH
18054: LD_STRING )
18056: STR
18057: PPUSH
18058: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
18062: LD_STRING setSpecLogoNumber(
18064: PUSH
18065: LD_INT 3
18067: STR
18068: PUSH
18069: LD_STRING ,
18071: STR
18072: PUSH
18073: LD_INT 2
18075: STR
18076: PUSH
18077: LD_STRING )
18079: STR
18080: PPUSH
18081: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
18085: LD_STRING setSpecLogoNumber(
18087: PUSH
18088: LD_INT 4
18090: STR
18091: PUSH
18092: LD_STRING ,
18094: STR
18095: PUSH
18096: LD_INT 3
18098: STR
18099: PUSH
18100: LD_STRING )
18102: STR
18103: PPUSH
18104: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
18108: LD_STRING setSpecLogoNumber(
18110: PUSH
18111: LD_INT 5
18113: STR
18114: PUSH
18115: LD_STRING ,
18117: STR
18118: PUSH
18119: LD_INT 4
18121: STR
18122: PUSH
18123: LD_STRING )
18125: STR
18126: PPUSH
18127: CALL_OW 559
// end ;
18131: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
18132: LD_INT 2
18134: PUSH
18135: LD_INT 30
18137: PUSH
18138: LD_INT 0
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: LD_INT 30
18147: PUSH
18148: LD_INT 1
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: LIST
18159: PPUSH
18160: CALL_OW 69
18164: IFFALSE 18174
18166: GO 18168
18168: DISABLE
// begin enable ;
18169: ENABLE
// UpdateSpectatorBar ;
18170: CALL 17620 0 0
// end ;
18174: END
