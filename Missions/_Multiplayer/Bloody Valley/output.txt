// export def_tree_function ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , respawning_time_min , respawning_time_max , siberite_bomb_Delay , amount_of_apemen , tree_function , def_win_rules , buildUpTime_Delay ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export Position_Sides ; export depot_def , breastworks_def , start_def , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 141
// begin Your_Side := mp_player_side ;
  79: LD_ADDR_OWVAR 2
  83: PUSH
  84: LD_OWVAR 7
  88: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  89: LD_ADDR_EXP 20
  93: PUSH
  94: LD_OWVAR 17
  98: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  99: LD_ADDR_EXP 17
 103: PUSH
 104: LD_OWVAR 15
 108: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 109: LD_ADDR_EXP 21
 113: PUSH
 114: LD_OWVAR 16
 118: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 119: LD_ADDR_EXP 19
 123: PUSH
 124: CALL 0 0 0
 128: ST_TO_ADDR
// Teams := mp_teams ;
 129: LD_ADDR_EXP 18
 133: PUSH
 134: LD_OWVAR 12
 138: ST_TO_ADDR
// end else
 139: GO 334
// begin Your_Side := 1 ;
 141: LD_ADDR_OWVAR 2
 145: PUSH
 146: LD_INT 1
 148: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 149: LD_ADDR_EXP 20
 153: PUSH
 154: LD_INT 1
 156: PUSH
 157: LD_INT 2
 159: PUSH
 160: LD_INT 3
 162: PUSH
 163: LD_INT 4
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 188: LD_ADDR_EXP 17
 192: PUSH
 193: LD_INT 1
 195: PUSH
 196: LD_INT 1
 198: PUSH
 199: LD_INT 2
 201: PUSH
 202: LD_INT 2
 204: PUSH
 205: LD_INT 0
 207: PUSH
 208: LD_INT 0
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 0 , 0 , 0 , 0 ] ;
 227: LD_ADDR_EXP 21
 231: PUSH
 232: LD_INT 1
 234: PUSH
 235: LD_INT 2
 237: PUSH
 238: LD_INT 3
 240: PUSH
 241: LD_INT 1
 243: PUSH
 244: LD_INT 0
 246: PUSH
 247: LD_INT 0
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 0
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: LIST
 264: LIST
 265: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 266: LD_ADDR_EXP 19
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: LD_INT 0
 279: PUSH
 280: LD_INT 0
 282: PUSH
 283: LD_INT 0
 285: PUSH
 286: LD_INT 0
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: LIST
 299: LIST
 300: LIST
 301: LIST
 302: LIST
 303: LIST
 304: ST_TO_ADDR
// Teams := [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 305: LD_ADDR_EXP 18
 309: PUSH
 310: LD_INT 1
 312: PUSH
 313: LD_INT 2
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: LD_INT 3
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: ST_TO_ADDR
// end ; for i := 1 to 8 do
 334: LD_ADDR_VAR 0 2
 338: PUSH
 339: DOUBLE
 340: LD_INT 1
 342: DEC
 343: ST_TO_ADDR
 344: LD_INT 8
 346: PUSH
 347: FOR_TO
 348: IFFALSE 435
// if Multiplayer_GetPlayerIsSpec ( i ) then
 350: LD_VAR 0 2
 354: PPUSH
 355: CALL_OW 530
 359: IFFALSE 433
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 361: LD_ADDR_EXP 20
 365: PUSH
 366: LD_EXP 20
 370: PPUSH
 371: LD_VAR 0 2
 375: PPUSH
 376: LD_INT 0
 378: PPUSH
 379: CALL_OW 1
 383: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 384: LD_ADDR_EXP 18
 388: PUSH
 389: LD_EXP 18
 393: PPUSH
 394: LD_EXP 17
 398: PUSH
 399: LD_VAR 0 2
 403: ARRAY
 404: PPUSH
 405: LD_EXP 18
 409: PUSH
 410: LD_EXP 17
 414: PUSH
 415: LD_VAR 0 2
 419: ARRAY
 420: ARRAY
 421: PUSH
 422: LD_VAR 0 2
 426: DIFF
 427: PPUSH
 428: CALL_OW 1
 432: ST_TO_ADDR
// end ;
 433: GO 347
 435: POP
 436: POP
// Position_Sides := [ 0 , 0 , 0 , 0 ] ;
 437: LD_ADDR_EXP 23
 441: PUSH
 442: LD_INT 0
 444: PUSH
 445: LD_INT 0
 447: PUSH
 448: LD_INT 0
 450: PUSH
 451: LD_INT 0
 453: PUSH
 454: EMPTY
 455: LIST
 456: LIST
 457: LIST
 458: LIST
 459: ST_TO_ADDR
// for i := 1 to 8 do
 460: LD_ADDR_VAR 0 2
 464: PUSH
 465: DOUBLE
 466: LD_INT 1
 468: DEC
 469: ST_TO_ADDR
 470: LD_INT 8
 472: PUSH
 473: FOR_TO
 474: IFFALSE 521
// if Side_Positions [ i ] then
 476: LD_EXP 20
 480: PUSH
 481: LD_VAR 0 2
 485: ARRAY
 486: IFFALSE 519
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 488: LD_ADDR_EXP 23
 492: PUSH
 493: LD_EXP 23
 497: PPUSH
 498: LD_EXP 20
 502: PUSH
 503: LD_VAR 0 2
 507: ARRAY
 508: PPUSH
 509: LD_VAR 0 2
 513: PPUSH
 514: CALL_OW 1
 518: ST_TO_ADDR
 519: GO 473
 521: POP
 522: POP
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 523: LD_ADDR_EXP 22
 527: PUSH
 528: LD_EXP 17
 532: PUSH
 533: LD_INT 0
 535: PUSH
 536: EMPTY
 537: LIST
 538: DIFF
 539: PUSH
 540: LD_INT 1
 542: GREATER
 543: ST_TO_ADDR
// if Multiplayer then
 544: LD_OWVAR 4
 548: IFFALSE 755
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 550: LD_ADDR_EXP 40
 554: PUSH
 555: LD_INT 0
 557: PPUSH
 558: CALL_OW 426
 562: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 563: LD_ADDR_EXP 41
 567: PUSH
 568: LD_INT 1
 570: PPUSH
 571: CALL_OW 426
 575: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 576: LD_ADDR_EXP 42
 580: PUSH
 581: LD_INT 2
 583: PPUSH
 584: CALL_OW 426
 588: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 589: LD_ADDR_EXP 43
 593: PUSH
 594: LD_INT 3
 596: PPUSH
 597: CALL_OW 426
 601: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 602: LD_ADDR_EXP 44
 606: PUSH
 607: LD_INT 4
 609: PPUSH
 610: CALL_OW 426
 614: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 615: LD_ADDR_EXP 45
 619: PUSH
 620: LD_INT 5
 622: PPUSH
 623: CALL_OW 426
 627: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 628: LD_ADDR_EXP 47
 632: PUSH
 633: LD_INT 10
 635: PPUSH
 636: CALL_OW 426
 640: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 641: LD_ADDR_EXP 48
 645: PUSH
 646: LD_INT 11
 648: PPUSH
 649: CALL_OW 426
 653: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 654: LD_ADDR_EXP 49
 658: PUSH
 659: LD_INT 12
 661: PPUSH
 662: CALL_OW 426
 666: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 13 ) ;
 667: LD_ADDR_EXP 51
 671: PUSH
 672: LD_INT 13
 674: PPUSH
 675: CALL_OW 426
 679: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 14 ) ;
 680: LD_ADDR_EXP 50
 684: PUSH
 685: LD_INT 14
 687: PPUSH
 688: CALL_OW 426
 692: ST_TO_ADDR
// def_tree_function := GetMultiplayerSetting ( 15 ) ;
 693: LD_ADDR_EXP 1
 697: PUSH
 698: LD_INT 15
 700: PPUSH
 701: CALL_OW 426
 705: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 706: LD_ADDR_EXP 52
 710: PUSH
 711: LD_INT 17
 713: PPUSH
 714: CALL_OW 426
 718: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 719: LD_ADDR_EXP 53
 723: PUSH
 724: LD_INT 20
 726: PPUSH
 727: CALL_OW 426
 731: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 732: LD_ADDR_VAR 0 3
 736: PUSH
 737: LD_INT 22
 739: PPUSH
 740: CALL_OW 426
 744: ST_TO_ADDR
// def_win_rules = 0 ;
 745: LD_ADDR_EXP 15
 749: PUSH
 750: LD_INT 0
 752: ST_TO_ADDR
// end else
 753: GO 887
// begin Randomize ;
 755: CALL_OW 10
// def_base_level := 2 ;
 759: LD_ADDR_EXP 40
 763: PUSH
 764: LD_INT 2
 766: ST_TO_ADDR
// def_amount_of_people := 1 ;
 767: LD_ADDR_EXP 41
 771: PUSH
 772: LD_INT 1
 774: ST_TO_ADDR
// def_skill_level := 1 ;
 775: LD_ADDR_EXP 42
 779: PUSH
 780: LD_INT 1
 782: ST_TO_ADDR
// def_starting_resources := 2 ;
 783: LD_ADDR_EXP 43
 787: PUSH
 788: LD_INT 2
 790: ST_TO_ADDR
// def_shipments_density := 1 ;
 791: LD_ADDR_EXP 44
 795: PUSH
 796: LD_INT 1
 798: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 799: LD_ADDR_EXP 45
 803: PUSH
 804: LD_INT 0
 806: ST_TO_ADDR
// def_shared_vision := 1 ;
 807: LD_ADDR_EXP 47
 811: PUSH
 812: LD_INT 1
 814: ST_TO_ADDR
// def_morale_flags := 1 ;
 815: LD_ADDR_EXP 48
 819: PUSH
 820: LD_INT 1
 822: ST_TO_ADDR
// def_siberite_detection := 1 ;
 823: LD_ADDR_EXP 49
 827: PUSH
 828: LD_INT 1
 830: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 831: LD_ADDR_EXP 51
 835: PUSH
 836: LD_INT 3
 838: ST_TO_ADDR
// def_people_respawning := 2 ;
 839: LD_ADDR_EXP 50
 843: PUSH
 844: LD_INT 2
 846: ST_TO_ADDR
// def_tree_function := 7 ;
 847: LD_ADDR_EXP 1
 851: PUSH
 852: LD_INT 7
 854: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 855: LD_ADDR_EXP 52
 859: PUSH
 860: LD_INT 0
 862: ST_TO_ADDR
// def_builduptime := 1 ;
 863: LD_ADDR_EXP 53
 867: PUSH
 868: LD_INT 1
 870: ST_TO_ADDR
// tech_level = 4 ;
 871: LD_ADDR_VAR 0 3
 875: PUSH
 876: LD_INT 4
 878: ST_TO_ADDR
// def_win_rules = 0 ;
 879: LD_ADDR_EXP 15
 883: PUSH
 884: LD_INT 0
 886: ST_TO_ADDR
// end ; if def_tree_function = 7 then
 887: LD_EXP 1
 891: PUSH
 892: LD_INT 7
 894: EQUAL
 895: IFFALSE 913
// def_tree_function := Rand ( 1 , 5 ) ;
 897: LD_ADDR_EXP 1
 901: PUSH
 902: LD_INT 1
 904: PPUSH
 905: LD_INT 5
 907: PPUSH
 908: CALL_OW 12
 912: ST_TO_ADDR
// InitGameRules ;
 913: CALL 8628 0 0
// if def_game_rules = 0 then
 917: LD_EXP 39
 921: PUSH
 922: LD_INT 0
 924: EQUAL
 925: IFFALSE 952
// begin if isSGUI then
 927: LD_OWVAR 83
 931: IFFALSE 939
// setMpTechs ( ) else
 933: CALL 12145 0 0
 937: GO 952
// begin SetMpTechLevel ( tech_level + 1 ) ;
 939: LD_VAR 0 3
 943: PUSH
 944: LD_INT 1
 946: PLUS
 947: PPUSH
 948: CALL 12292 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 952: LD_ADDR_EXP 2
 956: PUSH
 957: LD_INT 0
 959: PUSH
 960: LD_INT 1
 962: PUSH
 963: LD_INT 1
 965: PUSH
 966: LD_INT 1
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: LIST
 973: LIST
 974: PUSH
 975: LD_EXP 40
 979: PUSH
 980: LD_INT 1
 982: PLUS
 983: ARRAY
 984: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 , 3 ] [ def_base_level + 1 ] ;
 985: LD_ADDR_EXP 3
 989: PUSH
 990: LD_INT 0
 992: PUSH
 993: LD_INT 0
 995: PUSH
 996: LD_INT 2
 998: PUSH
 999: LD_INT 3
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: PUSH
1008: LD_EXP 40
1012: PUSH
1013: LD_INT 1
1015: PLUS
1016: ARRAY
1017: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1018: LD_ADDR_EXP 5
1022: PUSH
1023: LD_INT 2
1025: PUSH
1026: LD_INT 3
1028: PUSH
1029: LD_INT 4
1031: PUSH
1032: LD_INT 5
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: PUSH
1041: LD_EXP 42
1045: PUSH
1046: LD_INT 1
1048: PLUS
1049: ARRAY
1050: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1051: LD_ADDR_EXP 7
1055: PUSH
1056: LD_INT 0
1058: PUSH
1059: LD_INT 0
1061: PUSH
1062: LD_INT 0
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: PUSH
1070: LD_INT 30
1072: PUSH
1073: LD_INT 0
1075: PUSH
1076: LD_INT 0
1078: PUSH
1079: EMPTY
1080: LIST
1081: LIST
1082: LIST
1083: PUSH
1084: LD_INT 50
1086: PUSH
1087: LD_INT 20
1089: PUSH
1090: LD_INT 0
1092: PUSH
1093: EMPTY
1094: LIST
1095: LIST
1096: LIST
1097: PUSH
1098: LD_INT 80
1100: PUSH
1101: LD_INT 40
1103: PUSH
1104: LD_INT 20
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: LIST
1116: LIST
1117: PUSH
1118: LD_EXP 43
1122: PUSH
1123: LD_INT 1
1125: PLUS
1126: ARRAY
1127: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1128: LD_ADDR_EXP 6
1132: PUSH
1133: LD_INT 10
1135: PUSH
1136: EMPTY
1137: LIST
1138: PUSH
1139: LD_INT 7
1141: PUSH
1142: LD_INT 14
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: PUSH
1149: LD_INT 6
1151: PUSH
1152: LD_INT 12
1154: PUSH
1155: LD_INT 18
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: LIST
1162: PUSH
1163: LD_INT 5
1165: PUSH
1166: LD_INT 10
1168: PUSH
1169: LD_INT 15
1171: PUSH
1172: LD_INT 20
1174: PUSH
1175: EMPTY
1176: LIST
1177: LIST
1178: LIST
1179: LIST
1180: PUSH
1181: EMPTY
1182: LIST
1183: LIST
1184: LIST
1185: LIST
1186: PUSH
1187: LD_EXP 43
1191: PUSH
1192: LD_INT 1
1194: PLUS
1195: ARRAY
1196: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1197: LD_ADDR_EXP 4
1201: PUSH
1202: LD_EXP 41
1206: PUSH
1207: LD_INT 4
1209: PLUS
1210: ST_TO_ADDR
// shipments_density := 720 - ( def_shipments_density * 2 ) ;
1211: LD_ADDR_EXP 8
1215: PUSH
1216: LD_INT 720
1218: PUSH
1219: LD_EXP 44
1223: PUSH
1224: LD_INT 2
1226: MUL
1227: MINUS
1228: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1229: LD_ADDR_EXP 13
1233: PUSH
1234: LD_INT 0
1236: PUSH
1237: LD_INT 1
1239: PUSH
1240: LD_INT 2
1242: PUSH
1243: LD_INT 3
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: PUSH
1252: LD_EXP 51
1256: PUSH
1257: LD_INT 1
1259: PLUS
1260: ARRAY
1261: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1262: LD_ADDR_EXP 10
1266: PUSH
1267: LD_INT 0
1269: PUSH
1270: LD_INT 8400
1272: PUSH
1273: LD_INT 1750
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: LIST
1280: PUSH
1281: LD_EXP 50
1285: PUSH
1286: LD_INT 1
1288: PLUS
1289: ARRAY
1290: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1291: LD_ADDR_EXP 11
1295: PUSH
1296: LD_INT 0
1298: PUSH
1299: LD_INT 21000
1301: PUSH
1302: LD_INT 4200
1304: PUSH
1305: EMPTY
1306: LIST
1307: LIST
1308: LIST
1309: PUSH
1310: LD_EXP 50
1314: PUSH
1315: LD_INT 1
1317: PLUS
1318: ARRAY
1319: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1320: LD_ADDR_EXP 9
1324: PUSH
1325: LD_INT 1
1327: NEG
1328: PUSH
1329: LD_INT 350
1331: PUSH
1332: LD_INT 700
1334: PUSH
1335: LD_INT 1400
1337: PUSH
1338: LD_INT 0
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: PUSH
1348: LD_EXP 48
1352: PUSH
1353: LD_INT 1
1355: PLUS
1356: ARRAY
1357: ST_TO_ADDR
// battle_flags_id := [ ] ;
1358: LD_ADDR_EXP 27
1362: PUSH
1363: EMPTY
1364: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1365: LD_ADDR_EXP 12
1369: PUSH
1370: LD_INT 0
1372: PUSH
1373: LD_INT 1
1375: PUSH
1376: LD_INT 63000
1378: PUSH
1379: LD_INT 126000
1381: PUSH
1382: LD_INT 189000
1384: PUSH
1385: LD_INT 252000
1387: PUSH
1388: EMPTY
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: PUSH
1396: LD_EXP 52
1400: PUSH
1401: LD_INT 1
1403: PLUS
1404: ARRAY
1405: ST_TO_ADDR
// tree_function := [ [ 0 , 0 , 0 , 0 , 0 ] , [ 2 , 0 , 0 , 0 , 0 ] , [ 0 , 4 , 0 , 0 , 0 ] , [ 0 , 0 , 2 , 0 , 0 ] , [ 0 , 0 , 0 , 3 , 0 ] , [ 1 , 2 , 1 , 2 , 2 ] , [ 0 , 0 , 0 , 0 , 3 ] ] [ def_tree_function + 1 ] ;
1406: LD_ADDR_EXP 14
1410: PUSH
1411: LD_INT 0
1413: PUSH
1414: LD_INT 0
1416: PUSH
1417: LD_INT 0
1419: PUSH
1420: LD_INT 0
1422: PUSH
1423: LD_INT 0
1425: PUSH
1426: EMPTY
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: PUSH
1433: LD_INT 2
1435: PUSH
1436: LD_INT 0
1438: PUSH
1439: LD_INT 0
1441: PUSH
1442: LD_INT 0
1444: PUSH
1445: LD_INT 0
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: PUSH
1455: LD_INT 0
1457: PUSH
1458: LD_INT 4
1460: PUSH
1461: LD_INT 0
1463: PUSH
1464: LD_INT 0
1466: PUSH
1467: LD_INT 0
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: LIST
1474: LIST
1475: LIST
1476: PUSH
1477: LD_INT 0
1479: PUSH
1480: LD_INT 0
1482: PUSH
1483: LD_INT 2
1485: PUSH
1486: LD_INT 0
1488: PUSH
1489: LD_INT 0
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: PUSH
1499: LD_INT 0
1501: PUSH
1502: LD_INT 0
1504: PUSH
1505: LD_INT 0
1507: PUSH
1508: LD_INT 3
1510: PUSH
1511: LD_INT 0
1513: PUSH
1514: EMPTY
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: LIST
1520: PUSH
1521: LD_INT 1
1523: PUSH
1524: LD_INT 2
1526: PUSH
1527: LD_INT 1
1529: PUSH
1530: LD_INT 2
1532: PUSH
1533: LD_INT 2
1535: PUSH
1536: EMPTY
1537: LIST
1538: LIST
1539: LIST
1540: LIST
1541: LIST
1542: PUSH
1543: LD_INT 0
1545: PUSH
1546: LD_INT 0
1548: PUSH
1549: LD_INT 0
1551: PUSH
1552: LD_INT 0
1554: PUSH
1555: LD_INT 3
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: LIST
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: PUSH
1574: LD_EXP 1
1578: PUSH
1579: LD_INT 1
1581: PLUS
1582: ARRAY
1583: ST_TO_ADDR
// buildUpTime_Delay := [ 0 , 5 5$00 , 6 6$00 , 7 7$00 , 8 8$00 , 9 9$00 , 10 10$00 , 11 11$00 , 12 12$00 , 13 13$00 , 14 14$00 , 15 15$00 ] [ def_builduptime + 1 ] ;
1584: LD_ADDR_EXP 16
1588: PUSH
1589: LD_INT 0
1591: PUSH
1592: LD_INT 10500
1594: PUSH
1595: LD_INT 12600
1597: PUSH
1598: LD_INT 14700
1600: PUSH
1601: LD_INT 16800
1603: PUSH
1604: LD_INT 18900
1606: PUSH
1607: LD_INT 21000
1609: PUSH
1610: LD_INT 23100
1612: PUSH
1613: LD_INT 25200
1615: PUSH
1616: LD_INT 27300
1618: PUSH
1619: LD_INT 29400
1621: PUSH
1622: LD_INT 31500
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: PUSH
1639: LD_EXP 53
1643: PUSH
1644: LD_INT 1
1646: PLUS
1647: ARRAY
1648: ST_TO_ADDR
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] ;
1649: LD_ADDR_EXP 36
1653: PUSH
1654: LD_INT 8
1656: PUSH
1657: LD_INT 11
1659: PUSH
1660: LD_INT 9
1662: PUSH
1663: LD_INT 10
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: ST_TO_ADDR
// end ;
1672: LD_VAR 0 1
1676: RET
// function prepare_map_coordinates ; var side , dep , br1 , br2 , br3 , un , i ; begin
1677: LD_INT 0
1679: PPUSH
1680: PPUSH
1681: PPUSH
1682: PPUSH
1683: PPUSH
1684: PPUSH
1685: PPUSH
1686: PPUSH
// depot_def = [ ] ;
1687: LD_ADDR_EXP 24
1691: PUSH
1692: EMPTY
1693: ST_TO_ADDR
// breastworks_def = [ ] ;
1694: LD_ADDR_EXP 25
1698: PUSH
1699: EMPTY
1700: ST_TO_ADDR
// for side := 1 to 4 do
1701: LD_ADDR_VAR 0 2
1705: PUSH
1706: DOUBLE
1707: LD_INT 1
1709: DEC
1710: ST_TO_ADDR
1711: LD_INT 4
1713: PUSH
1714: FOR_TO
1715: IFFALSE 2070
// begin dep := side * 4 - 3 ;
1717: LD_ADDR_VAR 0 3
1721: PUSH
1722: LD_VAR 0 2
1726: PUSH
1727: LD_INT 4
1729: MUL
1730: PUSH
1731: LD_INT 3
1733: MINUS
1734: ST_TO_ADDR
// br1 := side * 4 - 2 ;
1735: LD_ADDR_VAR 0 4
1739: PUSH
1740: LD_VAR 0 2
1744: PUSH
1745: LD_INT 4
1747: MUL
1748: PUSH
1749: LD_INT 2
1751: MINUS
1752: ST_TO_ADDR
// br2 := side * 4 - 1 ;
1753: LD_ADDR_VAR 0 5
1757: PUSH
1758: LD_VAR 0 2
1762: PUSH
1763: LD_INT 4
1765: MUL
1766: PUSH
1767: LD_INT 1
1769: MINUS
1770: ST_TO_ADDR
// br3 := side * 4 ;
1771: LD_ADDR_VAR 0 6
1775: PUSH
1776: LD_VAR 0 2
1780: PUSH
1781: LD_INT 4
1783: MUL
1784: ST_TO_ADDR
// depot_def := depot_def ^ [ [ GetX ( dep ) , GetY ( dep ) , GetDir ( dep ) ] ] ;
1785: LD_ADDR_EXP 24
1789: PUSH
1790: LD_EXP 24
1794: PUSH
1795: LD_VAR 0 3
1799: PPUSH
1800: CALL_OW 250
1804: PUSH
1805: LD_VAR 0 3
1809: PPUSH
1810: CALL_OW 251
1814: PUSH
1815: LD_VAR 0 3
1819: PPUSH
1820: CALL_OW 254
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: LIST
1829: PUSH
1830: EMPTY
1831: LIST
1832: ADD
1833: ST_TO_ADDR
// start_def := start_def ^ [ [ ShiftX ( GetX ( Dep ) , GetDir ( Dep ) , 6 ) , ShiftY ( GetY ( Dep ) , GetDir ( Dep ) , 6 ) ] ] ;
1834: LD_ADDR_EXP 26
1838: PUSH
1839: LD_EXP 26
1843: PUSH
1844: LD_VAR 0 3
1848: PPUSH
1849: CALL_OW 250
1853: PPUSH
1854: LD_VAR 0 3
1858: PPUSH
1859: CALL_OW 254
1863: PPUSH
1864: LD_INT 6
1866: PPUSH
1867: CALL_OW 272
1871: PUSH
1872: LD_VAR 0 3
1876: PPUSH
1877: CALL_OW 251
1881: PPUSH
1882: LD_VAR 0 3
1886: PPUSH
1887: CALL_OW 254
1891: PPUSH
1892: LD_INT 6
1894: PPUSH
1895: CALL_OW 273
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: PUSH
1904: EMPTY
1905: LIST
1906: ADD
1907: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ GetX ( br1 ) , GetY ( br1 ) , GetDir ( br1 ) ] , [ GetX ( br2 ) , GetY ( br2 ) , GetDir ( br2 ) ] , [ GetX ( br3 ) , GetY ( br3 ) , GetDir ( br3 ) ] ] ] ;
1908: LD_ADDR_EXP 25
1912: PUSH
1913: LD_EXP 25
1917: PUSH
1918: LD_VAR 0 4
1922: PPUSH
1923: CALL_OW 250
1927: PUSH
1928: LD_VAR 0 4
1932: PPUSH
1933: CALL_OW 251
1937: PUSH
1938: LD_VAR 0 4
1942: PPUSH
1943: CALL_OW 254
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: LD_VAR 0 5
1957: PPUSH
1958: CALL_OW 250
1962: PUSH
1963: LD_VAR 0 5
1967: PPUSH
1968: CALL_OW 251
1972: PUSH
1973: LD_VAR 0 5
1977: PPUSH
1978: CALL_OW 254
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: LIST
1987: PUSH
1988: LD_VAR 0 6
1992: PPUSH
1993: CALL_OW 250
1997: PUSH
1998: LD_VAR 0 6
2002: PPUSH
2003: CALL_OW 251
2007: PUSH
2008: LD_VAR 0 6
2012: PPUSH
2013: CALL_OW 254
2017: PUSH
2018: EMPTY
2019: LIST
2020: LIST
2021: LIST
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: LIST
2027: PUSH
2028: EMPTY
2029: LIST
2030: ADD
2031: ST_TO_ADDR
// DestroyUnit ( dep ) ;
2032: LD_VAR 0 3
2036: PPUSH
2037: CALL_OW 65
// DestroyUnit ( br1 ) ;
2041: LD_VAR 0 4
2045: PPUSH
2046: CALL_OW 65
// DestroyUnit ( br2 ) ;
2050: LD_VAR 0 5
2054: PPUSH
2055: CALL_OW 65
// DestroyUnit ( br3 ) ;
2059: LD_VAR 0 6
2063: PPUSH
2064: CALL_OW 65
// end ;
2068: GO 1714
2070: POP
2071: POP
// if not def_extra_oil_deposits then
2072: LD_EXP 45
2076: NOT
2077: IFFALSE 2159
// for i in [ [ 52 , 44 ] , [ 84 , 37 ] , [ 74 , 81 ] , [ 106 , 77 ] ] do
2079: LD_ADDR_VAR 0 8
2083: PUSH
2084: LD_INT 52
2086: PUSH
2087: LD_INT 44
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: PUSH
2094: LD_INT 84
2096: PUSH
2097: LD_INT 37
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 74
2106: PUSH
2107: LD_INT 81
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: PUSH
2114: LD_INT 106
2116: PUSH
2117: LD_INT 77
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: PUSH
2124: EMPTY
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: PUSH
2130: FOR_IN
2131: IFFALSE 2157
// begin RemoveDepositXY ( i [ 1 ] , i [ 2 ] ) ;
2133: LD_VAR 0 8
2137: PUSH
2138: LD_INT 1
2140: ARRAY
2141: PPUSH
2142: LD_VAR 0 8
2146: PUSH
2147: LD_INT 2
2149: ARRAY
2150: PPUSH
2151: CALL_OW 63
// end ;
2155: GO 2130
2157: POP
2158: POP
// end ;
2159: LD_VAR 0 1
2163: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2164: LD_INT 0
2166: PPUSH
2167: PPUSH
2168: PPUSH
// if not Team_Game then
2169: LD_EXP 22
2173: NOT
2174: IFFALSE 2272
// begin for i = 1 to 8 do
2176: LD_ADDR_VAR 0 2
2180: PUSH
2181: DOUBLE
2182: LD_INT 1
2184: DEC
2185: ST_TO_ADDR
2186: LD_INT 8
2188: PUSH
2189: FOR_TO
2190: IFFALSE 2268
// for j = 1 to 8 do
2192: LD_ADDR_VAR 0 3
2196: PUSH
2197: DOUBLE
2198: LD_INT 1
2200: DEC
2201: ST_TO_ADDR
2202: LD_INT 8
2204: PUSH
2205: FOR_TO
2206: IFFALSE 2264
// if i <> j then
2208: LD_VAR 0 2
2212: PUSH
2213: LD_VAR 0 3
2217: NONEQUAL
2218: IFFALSE 2242
// SetAttitude ( i , j , att_neutral , true ) else
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_VAR 0 3
2229: PPUSH
2230: LD_INT 0
2232: PPUSH
2233: LD_INT 1
2235: PPUSH
2236: CALL_OW 80
2240: GO 2262
// SetAttitude ( i , j , att_friend , true ) ;
2242: LD_VAR 0 2
2246: PPUSH
2247: LD_VAR 0 3
2251: PPUSH
2252: LD_INT 1
2254: PPUSH
2255: LD_INT 1
2257: PPUSH
2258: CALL_OW 80
2262: GO 2205
2264: POP
2265: POP
2266: GO 2189
2268: POP
2269: POP
// end else
2270: GO 2447
// begin if def_shared_vision then
2272: LD_EXP 47
2276: IFFALSE 2341
// begin for i in Teams do
2278: LD_ADDR_VAR 0 2
2282: PUSH
2283: LD_EXP 18
2287: PUSH
2288: FOR_IN
2289: IFFALSE 2339
// for j = 2 to i do
2291: LD_ADDR_VAR 0 3
2295: PUSH
2296: DOUBLE
2297: LD_INT 2
2299: DEC
2300: ST_TO_ADDR
2301: LD_VAR 0 2
2305: PUSH
2306: FOR_TO
2307: IFFALSE 2335
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2309: LD_VAR 0 2
2313: PUSH
2314: LD_VAR 0 3
2318: ARRAY
2319: PPUSH
2320: LD_VAR 0 2
2324: PUSH
2325: LD_INT 1
2327: ARRAY
2328: PPUSH
2329: CALL_OW 343
2333: GO 2306
2335: POP
2336: POP
2337: GO 2288
2339: POP
2340: POP
// end ; for i = 1 to 8 do
2341: LD_ADDR_VAR 0 2
2345: PUSH
2346: DOUBLE
2347: LD_INT 1
2349: DEC
2350: ST_TO_ADDR
2351: LD_INT 8
2353: PUSH
2354: FOR_TO
2355: IFFALSE 2445
// for j = 1 to 8 do
2357: LD_ADDR_VAR 0 3
2361: PUSH
2362: DOUBLE
2363: LD_INT 1
2365: DEC
2366: ST_TO_ADDR
2367: LD_INT 8
2369: PUSH
2370: FOR_TO
2371: IFFALSE 2441
// if Side_Teams [ i ] = Side_Teams [ j ] then
2373: LD_EXP 17
2377: PUSH
2378: LD_VAR 0 2
2382: ARRAY
2383: PUSH
2384: LD_EXP 17
2388: PUSH
2389: LD_VAR 0 3
2393: ARRAY
2394: EQUAL
2395: IFFALSE 2419
// SetAttitude ( i , j , att_friend , true ) else
2397: LD_VAR 0 2
2401: PPUSH
2402: LD_VAR 0 3
2406: PPUSH
2407: LD_INT 1
2409: PPUSH
2410: LD_INT 1
2412: PPUSH
2413: CALL_OW 80
2417: GO 2439
// SetAttitude ( i , j , att_enemy , true ) ;
2419: LD_VAR 0 2
2423: PPUSH
2424: LD_VAR 0 3
2428: PPUSH
2429: LD_INT 2
2431: PPUSH
2432: LD_INT 1
2434: PPUSH
2435: CALL_OW 80
2439: GO 2370
2441: POP
2442: POP
2443: GO 2354
2445: POP
2446: POP
// end ; end ;
2447: LD_VAR 0 1
2451: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2452: LD_INT 0
2454: PPUSH
2455: PPUSH
2456: PPUSH
2457: PPUSH
// result := [ ] ;
2458: LD_ADDR_VAR 0 7
2462: PUSH
2463: EMPTY
2464: ST_TO_ADDR
// for i := 1 to count do
2465: LD_ADDR_VAR 0 8
2469: PUSH
2470: DOUBLE
2471: LD_INT 1
2473: DEC
2474: ST_TO_ADDR
2475: LD_VAR 0 1
2479: PUSH
2480: FOR_TO
2481: IFFALSE 2899
// begin uc_direction := Rand ( 0 , 5 ) ;
2483: LD_ADDR_OWVAR 24
2487: PUSH
2488: LD_INT 0
2490: PPUSH
2491: LD_INT 5
2493: PPUSH
2494: CALL_OW 12
2498: ST_TO_ADDR
// if commander then
2499: LD_LOC 1
2503: IFFALSE 2612
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2505: LD_ADDR_OWVAR 26
2509: PUSH
2510: LD_OWVAR 19
2514: PUSH
2515: LD_OWVAR 20
2519: ARRAY
2520: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2521: LD_INT 1
2523: PPUSH
2524: LD_INT 2
2526: PPUSH
2527: CALL_OW 12
2531: PPUSH
2532: LD_VAR 0 2
2536: PPUSH
2537: LD_EXP 5
2541: PUSH
2542: LD_INT 2
2544: PLUS
2545: PPUSH
2546: CALL_OW 380
// hc_importance := 105 ;
2550: LD_ADDR_OWVAR 32
2554: PUSH
2555: LD_INT 105
2557: ST_TO_ADDR
// commander := false ;
2558: LD_ADDR_LOC 1
2562: PUSH
2563: LD_INT 0
2565: ST_TO_ADDR
// if Multiplayer then
2566: LD_OWVAR 4
2570: IFFALSE 2610
// begin hc_gallery := MULTIAVATARS ;
2572: LD_ADDR_OWVAR 33
2576: PUSH
2577: LD_STRING MULTIAVATARS
2579: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2580: LD_ADDR_OWVAR 34
2584: PUSH
2585: LD_OWVAR 20
2589: PPUSH
2590: CALL_OW 525
2594: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2595: LD_ADDR_OWVAR 27
2599: PUSH
2600: LD_OWVAR 20
2604: PPUSH
2605: CALL_OW 526
2609: ST_TO_ADDR
// end ; end else
2610: GO 2675
// begin hc_name :=  ;
2612: LD_ADDR_OWVAR 26
2616: PUSH
2617: LD_STRING 
2619: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2620: LD_INT 1
2622: PPUSH
2623: LD_INT 2
2625: PPUSH
2626: CALL_OW 12
2630: PPUSH
2631: LD_VAR 0 2
2635: PPUSH
2636: LD_EXP 5
2640: PPUSH
2641: CALL_OW 380
// hc_importance := 0 ;
2645: LD_ADDR_OWVAR 32
2649: PUSH
2650: LD_INT 0
2652: ST_TO_ADDR
// if Multiplayer then
2653: LD_OWVAR 4
2657: IFFALSE 2675
// begin hc_gallery :=  ;
2659: LD_ADDR_OWVAR 33
2663: PUSH
2664: LD_STRING 
2666: ST_TO_ADDR
// hc_face_number := 0 ;
2667: LD_ADDR_OWVAR 34
2671: PUSH
2672: LD_INT 0
2674: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2675: LD_ADDR_VAR 0 10
2679: PUSH
2680: CALL_OW 44
2684: ST_TO_ADDR
// if global_defined then
2685: LD_LOC 3
2689: IFFALSE 2829
// begin if ( cl = class_soldier ) then
2691: LD_VAR 0 2
2695: PUSH
2696: LD_INT 1
2698: EQUAL
2699: IFFALSE 2719
// j := i + soldiers_created else
2701: LD_ADDR_VAR 0 9
2705: PUSH
2706: LD_VAR 0 8
2710: PUSH
2711: LD_LOC 4
2715: PLUS
2716: ST_TO_ADDR
2717: GO 2729
// j := i ;
2719: LD_ADDR_VAR 0 9
2723: PUSH
2724: LD_VAR 0 8
2728: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2729: LD_LOC 2
2733: PUSH
2734: LD_VAR 0 2
2738: ARRAY
2739: PUSH
2740: LD_VAR 0 9
2744: ARRAY
2745: PPUSH
2746: LD_VAR 0 10
2750: PPUSH
2751: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2755: LD_VAR 0 10
2759: PPUSH
2760: LD_INT 2
2762: PPUSH
2763: LD_LOC 2
2767: PUSH
2768: LD_VAR 0 2
2772: ARRAY
2773: PUSH
2774: LD_VAR 0 9
2778: ARRAY
2779: PPUSH
2780: LD_INT 2
2782: PPUSH
2783: CALL_OW 260
2787: PPUSH
2788: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2792: LD_VAR 0 10
2796: PPUSH
2797: LD_INT 1
2799: PPUSH
2800: LD_LOC 2
2804: PUSH
2805: LD_VAR 0 2
2809: ARRAY
2810: PUSH
2811: LD_VAR 0 9
2815: ARRAY
2816: PPUSH
2817: LD_INT 1
2819: PPUSH
2820: CALL_OW 260
2824: PPUSH
2825: CALL_OW 239
// end ; if building then
2829: LD_VAR 0 6
2833: IFFALSE 2851
// PlaceHumanInUnit ( un , building ) else
2835: LD_VAR 0 10
2839: PPUSH
2840: LD_VAR 0 6
2844: PPUSH
2845: CALL_OW 52
2849: GO 2878
// PlaceUnitXYR ( un , x , y , r , false ) ;
2851: LD_VAR 0 10
2855: PPUSH
2856: LD_VAR 0 3
2860: PPUSH
2861: LD_VAR 0 4
2865: PPUSH
2866: LD_VAR 0 5
2870: PPUSH
2871: LD_INT 0
2873: PPUSH
2874: CALL_OW 50
// result := result ^ [ un ] ;
2878: LD_ADDR_VAR 0 7
2882: PUSH
2883: LD_VAR 0 7
2887: PUSH
2888: LD_VAR 0 10
2892: PUSH
2893: EMPTY
2894: LIST
2895: ADD
2896: ST_TO_ADDR
// end ;
2897: GO 2480
2899: POP
2900: POP
// if not global_defined then
2901: LD_LOC 3
2905: NOT
2906: IFFALSE 2984
// if ( global_units >= cl ) then
2908: LD_LOC 2
2912: PUSH
2913: LD_VAR 0 2
2917: GREATEREQUAL
2918: IFFALSE 2959
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2920: LD_ADDR_LOC 2
2924: PUSH
2925: LD_LOC 2
2929: PPUSH
2930: LD_VAR 0 2
2934: PPUSH
2935: LD_LOC 2
2939: PUSH
2940: LD_VAR 0 2
2944: ARRAY
2945: PUSH
2946: LD_VAR 0 7
2950: ADD
2951: PPUSH
2952: CALL_OW 1
2956: ST_TO_ADDR
2957: GO 2984
// global_units := Replace ( global_units , cl , result ) ;
2959: LD_ADDR_LOC 2
2963: PUSH
2964: LD_LOC 2
2968: PPUSH
2969: LD_VAR 0 2
2973: PPUSH
2974: LD_VAR 0 7
2978: PPUSH
2979: CALL_OW 1
2983: ST_TO_ADDR
// if commander then
2984: LD_LOC 1
2988: IFFALSE 3035
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2990: LD_ADDR_EXP 28
2994: PUSH
2995: LD_EXP 28
2999: PPUSH
3000: LD_OWVAR 20
3004: PPUSH
3005: LD_EXP 28
3009: PUSH
3010: LD_OWVAR 20
3014: ARRAY
3015: PUSH
3016: LD_VAR 0 10
3020: ADD
3021: PPUSH
3022: CALL_OW 1
3026: ST_TO_ADDR
// commander := false ;
3027: LD_ADDR_LOC 1
3031: PUSH
3032: LD_INT 0
3034: ST_TO_ADDR
// end ; end ;
3035: LD_VAR 0 7
3039: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3040: LD_INT 0
3042: PPUSH
3043: PPUSH
3044: PPUSH
3045: PPUSH
3046: PPUSH
3047: PPUSH
3048: PPUSH
3049: PPUSH
3050: PPUSH
// if side in [ 0 , 9 ] then
3051: LD_VAR 0 1
3055: PUSH
3056: LD_INT 0
3058: PUSH
3059: LD_INT 9
3061: PUSH
3062: EMPTY
3063: LIST
3064: LIST
3065: IN
3066: IFFALSE 3070
// exit ;
3068: GO 4120
// pos := Side_Positions [ side ] ;
3070: LD_ADDR_VAR 0 3
3074: PUSH
3075: LD_EXP 20
3079: PUSH
3080: LD_VAR 0 1
3084: ARRAY
3085: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3086: LD_ADDR_OWVAR 21
3090: PUSH
3091: LD_EXP 21
3095: PUSH
3096: LD_VAR 0 1
3100: ARRAY
3101: ST_TO_ADDR
// uc_side := side ;
3102: LD_ADDR_OWVAR 20
3106: PUSH
3107: LD_VAR 0 1
3111: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3112: LD_ADDR_VAR 0 4
3116: PUSH
3117: LD_EXP 24
3121: PUSH
3122: LD_VAR 0 3
3126: ARRAY
3127: PUSH
3128: LD_INT 1
3130: ARRAY
3131: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3132: LD_ADDR_VAR 0 5
3136: PUSH
3137: LD_EXP 24
3141: PUSH
3142: LD_VAR 0 3
3146: ARRAY
3147: PUSH
3148: LD_INT 2
3150: ARRAY
3151: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3152: LD_ADDR_VAR 0 6
3156: PUSH
3157: LD_EXP 24
3161: PUSH
3162: LD_VAR 0 3
3166: ARRAY
3167: PUSH
3168: LD_INT 3
3170: ARRAY
3171: ST_TO_ADDR
// if is_depot then
3172: LD_EXP 2
3176: IFFALSE 3309
// begin bc_type = b_depot ;
3178: LD_ADDR_OWVAR 42
3182: PUSH
3183: LD_INT 0
3185: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3186: LD_ADDR_VAR 0 10
3190: PUSH
3191: LD_VAR 0 4
3195: PPUSH
3196: LD_VAR 0 5
3200: PPUSH
3201: LD_VAR 0 6
3205: PPUSH
3206: CALL_OW 47
3210: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3211: LD_VAR 0 10
3215: PPUSH
3216: LD_STRING @
3218: PUSH
3219: LD_VAR 0 1
3223: STR
3224: PPUSH
3225: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3229: LD_VAR 0 10
3233: PPUSH
3234: CALL_OW 274
3238: PPUSH
3239: LD_INT 1
3241: PPUSH
3242: LD_EXP 7
3246: PUSH
3247: LD_INT 1
3249: ARRAY
3250: PPUSH
3251: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3255: LD_VAR 0 10
3259: PPUSH
3260: CALL_OW 274
3264: PPUSH
3265: LD_INT 2
3267: PPUSH
3268: LD_EXP 7
3272: PUSH
3273: LD_INT 2
3275: ARRAY
3276: PPUSH
3277: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3281: LD_VAR 0 10
3285: PPUSH
3286: CALL_OW 274
3290: PPUSH
3291: LD_INT 3
3293: PPUSH
3294: LD_EXP 7
3298: PUSH
3299: LD_INT 3
3301: ARRAY
3302: PPUSH
3303: CALL_OW 277
// end else
3307: GO 3453
// begin for i := 1 to 3 do
3309: LD_ADDR_VAR 0 7
3313: PUSH
3314: DOUBLE
3315: LD_INT 1
3317: DEC
3318: ST_TO_ADDR
3319: LD_INT 3
3321: PUSH
3322: FOR_TO
3323: IFFALSE 3451
// begin r := starting_resources [ i ] ;
3325: LD_ADDR_VAR 0 8
3329: PUSH
3330: LD_EXP 7
3334: PUSH
3335: LD_VAR 0 7
3339: ARRAY
3340: ST_TO_ADDR
// while r >= 10 do
3341: LD_VAR 0 8
3345: PUSH
3346: LD_INT 10
3348: GREATEREQUAL
3349: IFFALSE 3449
// if r > 50 then
3351: LD_VAR 0 8
3355: PUSH
3356: LD_INT 50
3358: GREATER
3359: IFFALSE 3405
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3361: LD_VAR 0 7
3365: PPUSH
3366: LD_INT 5
3368: PPUSH
3369: LD_VAR 0 4
3373: PPUSH
3374: LD_VAR 0 5
3378: PPUSH
3379: LD_INT 4
3381: PPUSH
3382: LD_INT 0
3384: PPUSH
3385: CALL_OW 60
// r := r - 50 ;
3389: LD_ADDR_VAR 0 8
3393: PUSH
3394: LD_VAR 0 8
3398: PUSH
3399: LD_INT 50
3401: MINUS
3402: ST_TO_ADDR
// end else
3403: GO 3447
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3405: LD_VAR 0 7
3409: PPUSH
3410: LD_VAR 0 8
3414: PUSH
3415: LD_INT 10
3417: DIV
3418: PPUSH
3419: LD_VAR 0 4
3423: PPUSH
3424: LD_VAR 0 5
3428: PPUSH
3429: LD_INT 4
3431: PPUSH
3432: LD_INT 0
3434: PPUSH
3435: CALL_OW 60
// r := 0 ;
3439: LD_ADDR_VAR 0 8
3443: PUSH
3444: LD_INT 0
3446: ST_TO_ADDR
// end ;
3447: GO 3341
// end ;
3449: GO 3322
3451: POP
3452: POP
// end ; for r in starting_crates do
3453: LD_ADDR_VAR 0 8
3457: PUSH
3458: LD_EXP 6
3462: PUSH
3463: FOR_IN
3464: IFFALSE 3496
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3466: LD_INT 1
3468: PPUSH
3469: LD_INT 5
3471: PPUSH
3472: LD_VAR 0 4
3476: PPUSH
3477: LD_VAR 0 5
3481: PPUSH
3482: LD_VAR 0 8
3486: PPUSH
3487: LD_INT 0
3489: PPUSH
3490: CALL_OW 60
3494: GO 3463
3496: POP
3497: POP
// if def_morale_flags then
3498: LD_EXP 48
3502: IFFALSE 3641
// begin x := start_def [ pos ] [ 1 ] ;
3504: LD_ADDR_VAR 0 4
3508: PUSH
3509: LD_EXP 26
3513: PUSH
3514: LD_VAR 0 3
3518: ARRAY
3519: PUSH
3520: LD_INT 1
3522: ARRAY
3523: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3524: LD_ADDR_VAR 0 5
3528: PUSH
3529: LD_EXP 26
3533: PUSH
3534: LD_VAR 0 3
3538: ARRAY
3539: PUSH
3540: LD_INT 2
3542: ARRAY
3543: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3544: LD_VAR 0 4
3548: PPUSH
3549: LD_VAR 0 5
3553: PPUSH
3554: LD_INT 12
3556: PPUSH
3557: LD_INT 2
3559: PPUSH
3560: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3564: LD_ADDR_EXP 27
3568: PUSH
3569: LD_EXP 27
3573: PUSH
3574: LD_VAR 0 1
3578: PPUSH
3579: LD_VAR 0 4
3583: PPUSH
3584: LD_VAR 0 5
3588: PPUSH
3589: LD_INT 1
3591: PUSH
3592: LD_INT 100
3594: PUSH
3595: EMPTY
3596: LIST
3597: LIST
3598: PUSH
3599: LD_INT 2
3601: PUSH
3602: LD_INT 50
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: PUSH
3609: LD_INT 3
3611: PUSH
3612: LD_INT 20
3614: PUSH
3615: EMPTY
3616: LIST
3617: LIST
3618: PUSH
3619: LD_INT 20
3621: PUSH
3622: LD_INT 100
3624: PUSH
3625: EMPTY
3626: LIST
3627: LIST
3628: PUSH
3629: EMPTY
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: PPUSH
3635: CALL_OW 418
3639: ADD
3640: ST_TO_ADDR
// end ; commander := true ;
3641: LD_ADDR_LOC 1
3645: PUSH
3646: LD_INT 1
3648: ST_TO_ADDR
// soldiers_created := 0 ;
3649: LD_ADDR_LOC 4
3653: PUSH
3654: LD_INT 0
3656: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3657: LD_ADDR_VAR 0 7
3661: PUSH
3662: DOUBLE
3663: LD_INT 1
3665: DEC
3666: ST_TO_ADDR
3667: LD_EXP 3
3671: PUSH
3672: FOR_TO
3673: IFFALSE 3826
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3675: LD_ADDR_VAR 0 4
3679: PUSH
3680: LD_EXP 25
3684: PUSH
3685: LD_VAR 0 3
3689: ARRAY
3690: PUSH
3691: LD_VAR 0 7
3695: ARRAY
3696: PUSH
3697: LD_INT 1
3699: ARRAY
3700: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3701: LD_ADDR_VAR 0 5
3705: PUSH
3706: LD_EXP 25
3710: PUSH
3711: LD_VAR 0 3
3715: ARRAY
3716: PUSH
3717: LD_VAR 0 7
3721: ARRAY
3722: PUSH
3723: LD_INT 2
3725: ARRAY
3726: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3727: LD_ADDR_VAR 0 6
3731: PUSH
3732: LD_EXP 25
3736: PUSH
3737: LD_VAR 0 3
3741: ARRAY
3742: PUSH
3743: LD_VAR 0 7
3747: ARRAY
3748: PUSH
3749: LD_INT 3
3751: ARRAY
3752: ST_TO_ADDR
// bc_type := b_breastwork ;
3753: LD_ADDR_OWVAR 42
3757: PUSH
3758: LD_INT 31
3760: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3761: LD_ADDR_VAR 0 9
3765: PUSH
3766: LD_VAR 0 4
3770: PPUSH
3771: LD_VAR 0 5
3775: PPUSH
3776: LD_VAR 0 6
3780: PPUSH
3781: CALL_OW 47
3785: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3786: LD_INT 1
3788: PPUSH
3789: LD_INT 1
3791: PPUSH
3792: LD_INT 0
3794: PPUSH
3795: LD_INT 0
3797: PPUSH
3798: LD_INT 0
3800: PPUSH
3801: LD_VAR 0 9
3805: PPUSH
3806: CALL 2452 0 6
// soldiers_created := soldiers_created + 1 ;
3810: LD_ADDR_LOC 4
3814: PUSH
3815: LD_LOC 4
3819: PUSH
3820: LD_INT 1
3822: PLUS
3823: ST_TO_ADDR
// end ;
3824: GO 3672
3826: POP
3827: POP
// x := start_def [ pos ] [ 1 ] ;
3828: LD_ADDR_VAR 0 4
3832: PUSH
3833: LD_EXP 26
3837: PUSH
3838: LD_VAR 0 3
3842: ARRAY
3843: PUSH
3844: LD_INT 1
3846: ARRAY
3847: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3848: LD_ADDR_VAR 0 5
3852: PUSH
3853: LD_EXP 26
3857: PUSH
3858: LD_VAR 0 3
3862: ARRAY
3863: PUSH
3864: LD_INT 2
3866: ARRAY
3867: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3868: LD_LOC 8
3872: PUSH
3873: LD_EXP 3
3877: MINUS
3878: PPUSH
3879: LD_INT 1
3881: PPUSH
3882: LD_VAR 0 4
3886: PPUSH
3887: LD_VAR 0 5
3891: PPUSH
3892: LD_INT 5
3894: PPUSH
3895: LD_INT 0
3897: PPUSH
3898: CALL 2452 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3902: LD_LOC 5
3906: PPUSH
3907: LD_INT 2
3909: PPUSH
3910: LD_VAR 0 4
3914: PPUSH
3915: LD_VAR 0 5
3919: PPUSH
3920: LD_INT 5
3922: PPUSH
3923: LD_INT 0
3925: PPUSH
3926: CALL 2452 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3930: LD_LOC 7
3934: PPUSH
3935: LD_INT 3
3937: PPUSH
3938: LD_VAR 0 4
3942: PPUSH
3943: LD_VAR 0 5
3947: PPUSH
3948: LD_INT 5
3950: PPUSH
3951: LD_INT 0
3953: PPUSH
3954: CALL 2452 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3958: LD_LOC 6
3962: PPUSH
3963: LD_INT 4
3965: PPUSH
3966: LD_VAR 0 4
3970: PPUSH
3971: LD_VAR 0 5
3975: PPUSH
3976: LD_INT 5
3978: PPUSH
3979: LD_INT 0
3981: PPUSH
3982: CALL 2452 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3986: LD_EXP 49
3990: PUSH
3991: LD_INT 20
3993: PPUSH
3994: LD_VAR 0 1
3998: PPUSH
3999: CALL_OW 321
4003: PUSH
4004: LD_INT 1
4006: EQUAL
4007: AND
4008: IFFALSE 4025
// SetTech ( tech_SibDet , side , state_researched ) ;
4010: LD_INT 20
4012: PPUSH
4013: LD_VAR 0 1
4017: PPUSH
4018: LD_INT 2
4020: PPUSH
4021: CALL_OW 322
// if def_siberite_bomb = 1 then
4025: LD_EXP 52
4029: PUSH
4030: LD_INT 1
4032: EQUAL
4033: IFFALSE 4067
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4035: LD_INT 25
4037: PPUSH
4038: LD_VAR 0 1
4042: PPUSH
4043: LD_INT 1
4045: PPUSH
4046: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4050: LD_INT 73
4052: PPUSH
4053: LD_VAR 0 1
4057: PPUSH
4058: LD_INT 1
4060: PPUSH
4061: CALL_OW 322
// end else
4065: GO 4097
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4067: LD_INT 25
4069: PPUSH
4070: LD_VAR 0 1
4074: PPUSH
4075: LD_INT 0
4077: PPUSH
4078: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4082: LD_INT 73
4084: PPUSH
4085: LD_VAR 0 1
4089: PPUSH
4090: LD_INT 0
4092: PPUSH
4093: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4097: LD_INT 24
4099: PPUSH
4100: LD_VAR 0 1
4104: PPUSH
4105: LD_INT 0
4107: PPUSH
4108: CALL_OW 322
// global_defined := true ;
4112: LD_ADDR_LOC 3
4116: PUSH
4117: LD_INT 1
4119: ST_TO_ADDR
// end ;
4120: LD_VAR 0 2
4124: RET
// every 0 0$1 do
4125: GO 4127
4127: DISABLE
// if ( def_siberite_bomb > 1 ) then
4128: LD_EXP 52
4132: PUSH
4133: LD_INT 1
4135: GREATER
4136: IFFALSE 4151
// begin wait ( siberite_bomb_Delay ) ;
4138: LD_EXP 12
4142: PPUSH
4143: CALL_OW 67
// EnableSibFiss ;
4147: CALL 4152 0 0
// end ;
4151: END
// function EnableSibFiss ; var i ; begin
4152: LD_INT 0
4154: PPUSH
4155: PPUSH
// for i := 1 to 8 do
4156: LD_ADDR_VAR 0 2
4160: PUSH
4161: DOUBLE
4162: LD_INT 1
4164: DEC
4165: ST_TO_ADDR
4166: LD_INT 8
4168: PUSH
4169: FOR_TO
4170: IFFALSE 4216
// if Side_Positions [ i ] then
4172: LD_EXP 20
4176: PUSH
4177: LD_VAR 0 2
4181: ARRAY
4182: IFFALSE 4214
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4184: LD_INT 25
4186: PPUSH
4187: LD_VAR 0 2
4191: PPUSH
4192: LD_INT 1
4194: PPUSH
4195: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4199: LD_INT 73
4201: PPUSH
4202: LD_VAR 0 2
4206: PPUSH
4207: LD_INT 1
4209: PPUSH
4210: CALL_OW 322
// end ;
4214: GO 4169
4216: POP
4217: POP
// end ;
4218: LD_VAR 0 1
4222: RET
// function prepare_sides ; var i ; begin
4223: LD_INT 0
4225: PPUSH
4226: PPUSH
// global_units := [ ] ;
4227: LD_ADDR_LOC 2
4231: PUSH
4232: EMPTY
4233: ST_TO_ADDR
// global_defined := false ;
4234: LD_ADDR_LOC 3
4238: PUSH
4239: LD_INT 0
4241: ST_TO_ADDR
// CountClassMembers ;
4242: CALL 4292 0 0
// for i := 1 to 8 do
4246: LD_ADDR_VAR 0 2
4250: PUSH
4251: DOUBLE
4252: LD_INT 1
4254: DEC
4255: ST_TO_ADDR
4256: LD_INT 8
4258: PUSH
4259: FOR_TO
4260: IFFALSE 4285
// if Side_Positions [ i ] then
4262: LD_EXP 20
4266: PUSH
4267: LD_VAR 0 2
4271: ARRAY
4272: IFFALSE 4283
// prepare_side ( i ) ;
4274: LD_VAR 0 2
4278: PPUSH
4279: CALL 3040 0 1
4283: GO 4259
4285: POP
4286: POP
// end ;
4287: LD_VAR 0 1
4291: RET
// function CountClassMembers ; var Mode ; begin
4292: LD_INT 0
4294: PPUSH
4295: PPUSH
// if No_Mechs then
4296: LD_EXP 54
4300: IFFALSE 4312
// Mode := 2 else
4302: LD_ADDR_VAR 0 2
4306: PUSH
4307: LD_INT 2
4309: ST_TO_ADDR
4310: GO 4320
// Mode := 1 ;
4312: LD_ADDR_VAR 0 2
4316: PUSH
4317: LD_INT 1
4319: ST_TO_ADDR
// neng := number_of_people ;
4320: LD_ADDR_LOC 5
4324: PUSH
4325: LD_EXP 4
4329: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4330: LD_ADDR_LOC 8
4334: PUSH
4335: LD_LOC 5
4339: PUSH
4340: LD_INT 4
4342: PUSH
4343: LD_INT 3
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: PUSH
4350: LD_VAR 0 2
4354: ARRAY
4355: DIV
4356: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4357: LD_LOC 8
4361: PUSH
4362: LD_EXP 3
4366: LESS
4367: IFFALSE 4379
// nsol := number_of_breastworks ;
4369: LD_ADDR_LOC 8
4373: PUSH
4374: LD_EXP 3
4378: ST_TO_ADDR
// neng := neng - nsol ;
4379: LD_ADDR_LOC 5
4383: PUSH
4384: LD_LOC 5
4388: PUSH
4389: LD_LOC 8
4393: MINUS
4394: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4395: LD_ADDR_LOC 6
4399: PUSH
4400: LD_LOC 5
4404: PUSH
4405: LD_INT 3
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_VAR 0 2
4419: ARRAY
4420: DIV
4421: ST_TO_ADDR
// if ( nsci < 1 ) then
4422: LD_LOC 6
4426: PUSH
4427: LD_INT 1
4429: LESS
4430: IFFALSE 4440
// nsci := 1 ;
4432: LD_ADDR_LOC 6
4436: PUSH
4437: LD_INT 1
4439: ST_TO_ADDR
// neng := neng - nsci ;
4440: LD_ADDR_LOC 5
4444: PUSH
4445: LD_LOC 5
4449: PUSH
4450: LD_LOC 6
4454: MINUS
4455: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4456: LD_ADDR_LOC 7
4460: PUSH
4461: LD_LOC 5
4465: PUSH
4466: LD_INT 2
4468: DIV
4469: PUSH
4470: LD_INT 0
4472: PUSH
4473: EMPTY
4474: LIST
4475: LIST
4476: PUSH
4477: LD_VAR 0 2
4481: ARRAY
4482: ST_TO_ADDR
// neng := neng - nmech ;
4483: LD_ADDR_LOC 5
4487: PUSH
4488: LD_LOC 5
4492: PUSH
4493: LD_LOC 7
4497: MINUS
4498: ST_TO_ADDR
// if ( neng < 1 ) then
4499: LD_LOC 5
4503: PUSH
4504: LD_INT 1
4506: LESS
4507: IFFALSE 4517
// neng := 1 ;
4509: LD_ADDR_LOC 5
4513: PUSH
4514: LD_INT 1
4516: ST_TO_ADDR
// end ;
4517: LD_VAR 0 1
4521: RET
// starting begin disable ( 98 ) ;
4522: LD_INT 98
4524: DISABLE_MARKED
// disable ( 99 ) ;
4525: LD_INT 99
4527: DISABLE_MARKED
// disable ( 400 ) ;
4528: LD_INT 400
4530: DISABLE_MARKED
// disable ( 401 ) ;
4531: LD_INT 401
4533: DISABLE_MARKED
// disable ( 600 ) ;
4534: LD_INT 600
4536: DISABLE_MARKED
// mp_selectmsg := true ;
4537: LD_ADDR_OWVAR 13
4541: PUSH
4542: LD_INT 1
4544: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4545: CALL 68 0 0
// prepare_map_coordinates ;
4549: CALL 1677 0 0
// set_shared_visions_and_alliances ;
4553: CALL 2164 0 0
// ResetFog ;
4557: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4561: LD_OWVAR 2
4565: PPUSH
4566: CALL_OW 520
// prepare_sides ;
4570: CALL 4223 0 0
// Init_Win_Condition ;
4574: CALL 16314 0 0
// InitLimits ;
4578: CALL 10760 0 0
// ShowTimer ;
4582: CALL 11697 0 0
// init_shipments_and_respawning ;
4586: CALL 5711 0 0
// music_nat := Side_Nations [ your_side ] ;
4590: LD_ADDR_OWVAR 71
4594: PUSH
4595: LD_EXP 21
4599: PUSH
4600: LD_OWVAR 2
4604: ARRAY
4605: ST_TO_ADDR
// if IAmSpec then
4606: CALL_OW 531
4610: IFFALSE 4634
// begin fogoff ( true ) ;
4612: LD_INT 1
4614: PPUSH
4615: CALL_OW 344
// CenterNowOnXY ( 79 , 59 ) ;
4619: LD_INT 79
4621: PPUSH
4622: LD_INT 59
4624: PPUSH
4625: CALL_OW 86
// enable ( 400 ) ;
4629: LD_INT 400
4631: ENABLE_MARKED
// end else
4632: GO 4680
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4634: LD_EXP 26
4638: PUSH
4639: LD_EXP 20
4643: PUSH
4644: LD_OWVAR 2
4648: ARRAY
4649: ARRAY
4650: PUSH
4651: LD_INT 1
4653: ARRAY
4654: PPUSH
4655: LD_EXP 26
4659: PUSH
4660: LD_EXP 20
4664: PUSH
4665: LD_OWVAR 2
4669: ARRAY
4670: ARRAY
4671: PUSH
4672: LD_INT 2
4674: ARRAY
4675: PPUSH
4676: CALL_OW 86
// end ; InitApeman ;
4680: CALL 4886 0 0
// if def_builduptime then
4684: LD_EXP 53
4688: IFFALSE 4694
// BeginBuildUp ;
4690: CALL 7934 0 0
// end ; end_of_file
4694: END
// every 20 20$00 trigger apemanNumber do
4695: LD_EXP 29
4699: IFFALSE 4732
4701: GO 4703
4703: DISABLE
// begin enable ;
4704: ENABLE
// if apeLevel >= 8 then
4705: LD_EXP 34
4709: PUSH
4710: LD_INT 8
4712: GREATEREQUAL
4713: IFFALSE 4718
// disable else
4715: DISABLE
4716: GO 4732
// apeLevel := apeLevel + 1 ;
4718: LD_ADDR_EXP 34
4722: PUSH
4723: LD_EXP 34
4727: PUSH
4728: LD_INT 1
4730: PLUS
4731: ST_TO_ADDR
// end ;
4732: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
4733: LD_EXP 29
4737: PUSH
4738: LD_EXP 30
4742: LESS
4743: IFFALSE 4883
4745: GO 4747
4747: DISABLE
4748: LD_INT 0
4750: PPUSH
4751: PPUSH
4752: PPUSH
4753: PPUSH
// begin enable ;
4754: ENABLE
// for i := 1 to apemanPos do
4755: LD_ADDR_VAR 0 1
4759: PUSH
4760: DOUBLE
4761: LD_INT 1
4763: DEC
4764: ST_TO_ADDR
4765: LD_EXP 32
4769: PUSH
4770: FOR_TO
4771: IFFALSE 4881
// begin if apemanPlayerCount [ i ] then
4773: LD_EXP 33
4777: PUSH
4778: LD_VAR 0 1
4782: ARRAY
4783: IFFALSE 4879
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
4785: LD_EXP 33
4789: PUSH
4790: LD_VAR 0 1
4794: ARRAY
4795: PUSH
4796: LD_EXP 32
4800: PUSH
4801: LD_VAR 0 1
4805: ARRAY
4806: GREATER
4807: IFFALSE 4879
// begin ape := PrepareApeman ;
4809: LD_ADDR_VAR 0 2
4813: PUSH
4814: CALL 5386 0 0
4818: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
4819: LD_VAR 0 2
4823: PPUSH
4824: LD_EXP 35
4828: PUSH
4829: LD_VAR 0 1
4833: ARRAY
4834: PPUSH
4835: LD_INT 0
4837: PPUSH
4838: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
4842: LD_ADDR_EXP 32
4846: PUSH
4847: LD_EXP 32
4851: PPUSH
4852: LD_VAR 0 1
4856: PPUSH
4857: LD_EXP 32
4861: PUSH
4862: LD_VAR 0 1
4866: ARRAY
4867: PUSH
4868: LD_VAR 0 2
4872: UNION
4873: PPUSH
4874: CALL_OW 1
4878: ST_TO_ADDR
// end ; end ; end ;
4879: GO 4770
4881: POP
4882: POP
// end ;
4883: PPOPN 4
4885: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
4886: LD_INT 0
4888: PPUSH
4889: PPUSH
4890: PPUSH
4891: PPUSH
4892: PPUSH
4893: PPUSH
4894: PPUSH
// playersAmount := 0 ;
4895: LD_ADDR_VAR 0 3
4899: PUSH
4900: LD_INT 0
4902: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , ] ;
4903: LD_ADDR_VAR 0 7
4907: PUSH
4908: LD_INT 13
4910: PUSH
4911: LD_INT 14
4913: PUSH
4914: LD_INT 15
4916: PUSH
4917: LD_INT 16
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4926: LD_ADDR_EXP 35
4930: PUSH
4931: LD_INT 0
4933: PUSH
4934: LD_INT 0
4936: PUSH
4937: LD_INT 0
4939: PUSH
4940: LD_INT 0
4942: PUSH
4943: LD_INT 0
4945: PUSH
4946: LD_INT 0
4948: PUSH
4949: LD_INT 0
4951: PUSH
4952: LD_INT 0
4954: PUSH
4955: EMPTY
4956: LIST
4957: LIST
4958: LIST
4959: LIST
4960: LIST
4961: LIST
4962: LIST
4963: LIST
4964: ST_TO_ADDR
// for j = 1 to Side_Positions do
4965: LD_ADDR_VAR 0 4
4969: PUSH
4970: DOUBLE
4971: LD_INT 1
4973: DEC
4974: ST_TO_ADDR
4975: LD_EXP 20
4979: PUSH
4980: FOR_TO
4981: IFFALSE 5048
// if Side_Positions [ j ] then
4983: LD_EXP 20
4987: PUSH
4988: LD_VAR 0 4
4992: ARRAY
4993: IFFALSE 5046
// begin playersAmount := playersAmount + 1 ;
4995: LD_ADDR_VAR 0 3
4999: PUSH
5000: LD_VAR 0 3
5004: PUSH
5005: LD_INT 1
5007: PLUS
5008: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5009: LD_ADDR_EXP 35
5013: PUSH
5014: LD_EXP 35
5018: PPUSH
5019: LD_VAR 0 4
5023: PPUSH
5024: LD_VAR 0 7
5028: PUSH
5029: LD_EXP 20
5033: PUSH
5034: LD_VAR 0 4
5038: ARRAY
5039: ARRAY
5040: PPUSH
5041: CALL_OW 1
5045: ST_TO_ADDR
// end ;
5046: GO 4980
5048: POP
5049: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5050: LD_ADDR_EXP 31
5054: PUSH
5055: LD_INT 3
5057: PUSH
5058: LD_EXP 13
5062: MUL
5063: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5064: LD_ADDR_EXP 29
5068: PUSH
5069: LD_VAR 0 3
5073: PUSH
5074: LD_EXP 31
5078: MUL
5079: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5080: LD_ADDR_EXP 30
5084: PUSH
5085: LD_EXP 29
5089: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5090: LD_ADDR_EXP 32
5094: PUSH
5095: LD_INT 0
5097: PUSH
5098: LD_INT 0
5100: PUSH
5101: LD_INT 0
5103: PUSH
5104: LD_INT 0
5106: PUSH
5107: LD_INT 0
5109: PUSH
5110: LD_INT 0
5112: PUSH
5113: LD_INT 0
5115: PUSH
5116: LD_INT 0
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5129: LD_ADDR_EXP 33
5133: PUSH
5134: LD_INT 0
5136: PUSH
5137: LD_INT 0
5139: PUSH
5140: LD_INT 0
5142: PUSH
5143: LD_INT 0
5145: PUSH
5146: LD_INT 0
5148: PUSH
5149: LD_INT 0
5151: PUSH
5152: LD_INT 0
5154: PUSH
5155: LD_INT 0
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: LIST
5162: LIST
5163: LIST
5164: LIST
5165: LIST
5166: LIST
5167: ST_TO_ADDR
// apeLevel := 1 ;
5168: LD_ADDR_EXP 34
5172: PUSH
5173: LD_INT 1
5175: ST_TO_ADDR
// if not apemanNumber then
5176: LD_EXP 29
5180: NOT
5181: IFFALSE 5185
// exit ;
5183: GO 5381
// for i := 1 to apemanPerPlayer do
5185: LD_ADDR_VAR 0 2
5189: PUSH
5190: DOUBLE
5191: LD_INT 1
5193: DEC
5194: ST_TO_ADDR
5195: LD_EXP 31
5199: PUSH
5200: FOR_TO
5201: IFFALSE 5379
// begin for j := 1 to Side_Positions do
5203: LD_ADDR_VAR 0 4
5207: PUSH
5208: DOUBLE
5209: LD_INT 1
5211: DEC
5212: ST_TO_ADDR
5213: LD_EXP 20
5217: PUSH
5218: FOR_TO
5219: IFFALSE 5375
// if Side_Positions [ j ] then
5221: LD_EXP 20
5225: PUSH
5226: LD_VAR 0 4
5230: ARRAY
5231: IFFALSE 5373
// begin pos := Side_Positions [ j ] ;
5233: LD_ADDR_VAR 0 6
5237: PUSH
5238: LD_EXP 20
5242: PUSH
5243: LD_VAR 0 4
5247: ARRAY
5248: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5249: LD_ADDR_EXP 33
5253: PUSH
5254: LD_EXP 33
5258: PPUSH
5259: LD_VAR 0 4
5263: PPUSH
5264: LD_EXP 33
5268: PUSH
5269: LD_VAR 0 4
5273: ARRAY
5274: PUSH
5275: LD_INT 1
5277: PLUS
5278: PPUSH
5279: CALL_OW 1
5283: ST_TO_ADDR
// ape := PrepareApeman ;
5284: LD_ADDR_VAR 0 5
5288: PUSH
5289: CALL 5386 0 0
5293: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5294: LD_ADDR_EXP 32
5298: PUSH
5299: LD_EXP 32
5303: PPUSH
5304: LD_VAR 0 4
5308: PPUSH
5309: LD_EXP 32
5313: PUSH
5314: LD_VAR 0 4
5318: ARRAY
5319: PPUSH
5320: LD_EXP 32
5324: PUSH
5325: LD_VAR 0 4
5329: ARRAY
5330: PUSH
5331: LD_INT 1
5333: PLUS
5334: PPUSH
5335: LD_VAR 0 5
5339: PPUSH
5340: CALL_OW 1
5344: PPUSH
5345: CALL_OW 1
5349: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5350: LD_VAR 0 5
5354: PPUSH
5355: LD_EXP 35
5359: PUSH
5360: LD_VAR 0 4
5364: ARRAY
5365: PPUSH
5366: LD_INT 0
5368: PPUSH
5369: CALL_OW 49
// end ;
5373: GO 5218
5375: POP
5376: POP
// end ;
5377: GO 5200
5379: POP
5380: POP
// end ;
5381: LD_VAR 0 1
5385: RET
// export function PrepareApeman ; var bonus ; begin
5386: LD_INT 0
5388: PPUSH
5389: PPUSH
// uc_side := 0 ;
5390: LD_ADDR_OWVAR 20
5394: PUSH
5395: LD_INT 0
5397: ST_TO_ADDR
// uc_nation := 0 ;
5398: LD_ADDR_OWVAR 21
5402: PUSH
5403: LD_INT 0
5405: ST_TO_ADDR
// InitHc ;
5406: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
5410: LD_ADDR_VAR 0 2
5414: PUSH
5415: LD_INT 1
5417: NEG
5418: PUSH
5419: LD_INT 0
5421: PUSH
5422: LD_INT 1
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: LIST
5429: PUSH
5430: LD_OWVAR 1
5434: PUSH
5435: LD_INT 3
5437: MOD
5438: PUSH
5439: LD_INT 1
5441: PLUS
5442: ARRAY
5443: ST_TO_ADDR
// hc_class := class_apeman ;
5444: LD_ADDR_OWVAR 28
5448: PUSH
5449: LD_INT 12
5451: ST_TO_ADDR
// hc_gallery :=  ;
5452: LD_ADDR_OWVAR 33
5456: PUSH
5457: LD_STRING 
5459: ST_TO_ADDR
// hc_name :=  ;
5460: LD_ADDR_OWVAR 26
5464: PUSH
5465: LD_STRING 
5467: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
5468: LD_ADDR_OWVAR 31
5472: PUSH
5473: LD_EXP 34
5477: PUSH
5478: LD_VAR 0 2
5482: PLUS
5483: PUSH
5484: LD_EXP 34
5488: PUSH
5489: LD_VAR 0 2
5493: PLUS
5494: PUSH
5495: LD_EXP 34
5499: PUSH
5500: LD_VAR 0 2
5504: PLUS
5505: PUSH
5506: LD_EXP 34
5510: PUSH
5511: LD_VAR 0 2
5515: PLUS
5516: PUSH
5517: EMPTY
5518: LIST
5519: LIST
5520: LIST
5521: LIST
5522: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
5523: LD_ADDR_OWVAR 35
5527: PUSH
5528: LD_INT 10
5530: PUSH
5531: LD_VAR 0 2
5535: MUL
5536: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5537: LD_ADDR_OWVAR 29
5541: PUSH
5542: LD_INT 12
5544: PUSH
5545: LD_INT 10
5547: PUSH
5548: EMPTY
5549: LIST
5550: LIST
5551: ST_TO_ADDR
// result := CreateHuman ;
5552: LD_ADDR_VAR 0 1
5556: PUSH
5557: CALL_OW 44
5561: ST_TO_ADDR
// end ;
5562: LD_VAR 0 1
5566: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
5567: LD_INT 0
5569: PPUSH
5570: PPUSH
5571: PPUSH
// if not ape then
5572: LD_VAR 0 1
5576: NOT
5577: IFFALSE 5581
// exit ;
5579: GO 5706
// side := GetSide ( ape ) ;
5581: LD_ADDR_VAR 0 3
5585: PUSH
5586: LD_VAR 0 1
5590: PPUSH
5591: CALL_OW 255
5595: ST_TO_ADDR
// if not side then
5596: LD_VAR 0 3
5600: NOT
5601: IFFALSE 5655
// begin for i = 1 to apemanPos do
5603: LD_ADDR_VAR 0 4
5607: PUSH
5608: DOUBLE
5609: LD_INT 1
5611: DEC
5612: ST_TO_ADDR
5613: LD_EXP 32
5617: PUSH
5618: FOR_TO
5619: IFFALSE 5653
// if ape in apemanPos [ i ] then
5621: LD_VAR 0 1
5625: PUSH
5626: LD_EXP 32
5630: PUSH
5631: LD_VAR 0 4
5635: ARRAY
5636: IN
5637: IFFALSE 5651
// begin side := i ;
5639: LD_ADDR_VAR 0 3
5643: PUSH
5644: LD_VAR 0 4
5648: ST_TO_ADDR
// break ;
5649: GO 5653
// end ;
5651: GO 5618
5653: POP
5654: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
5655: LD_ADDR_EXP 32
5659: PUSH
5660: LD_EXP 32
5664: PPUSH
5665: LD_VAR 0 3
5669: PPUSH
5670: LD_EXP 32
5674: PUSH
5675: LD_VAR 0 3
5679: ARRAY
5680: PUSH
5681: LD_VAR 0 1
5685: DIFF
5686: PPUSH
5687: CALL_OW 1
5691: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
5692: LD_ADDR_EXP 29
5696: PUSH
5697: LD_EXP 29
5701: PUSH
5702: LD_INT 1
5704: MINUS
5705: ST_TO_ADDR
// end ; end_of_file
5706: LD_VAR 0 2
5710: RET
// var shipment , respawn , inqueue ; export function init_shipments_and_respawning ; begin
5711: LD_INT 0
5713: PPUSH
// shipment := Rand ( 0 , 3 ) ;
5714: LD_ADDR_LOC 9
5718: PUSH
5719: LD_INT 0
5721: PPUSH
5722: LD_INT 3
5724: PPUSH
5725: CALL_OW 12
5729: ST_TO_ADDR
// respawn := Rand ( 1 , 8 ) ;
5730: LD_ADDR_LOC 10
5734: PUSH
5735: LD_INT 1
5737: PPUSH
5738: LD_INT 8
5740: PPUSH
5741: CALL_OW 12
5745: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5746: LD_ADDR_LOC 11
5750: PUSH
5751: LD_INT 0
5753: PUSH
5754: LD_INT 0
5756: PUSH
5757: LD_INT 0
5759: PUSH
5760: LD_INT 0
5762: PUSH
5763: LD_INT 0
5765: PUSH
5766: LD_INT 0
5768: PUSH
5769: LD_INT 0
5771: PUSH
5772: LD_INT 0
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: LIST
5779: LIST
5780: LIST
5781: LIST
5782: LIST
5783: LIST
5784: ST_TO_ADDR
// end ;
5785: LD_VAR 0 1
5789: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
5790: GO 5792
5792: DISABLE
5793: LD_INT 0
5795: PPUSH
5796: PPUSH
5797: PPUSH
5798: PPUSH
// begin if respawning_time_max = 0 then
5799: LD_EXP 11
5803: PUSH
5804: LD_INT 0
5806: EQUAL
5807: IFFALSE 5811
// exit ;
5809: GO 6318
// if respawn = 8 then
5811: LD_LOC 10
5815: PUSH
5816: LD_INT 8
5818: EQUAL
5819: IFFALSE 5831
// respawn := 1 else
5821: LD_ADDR_LOC 10
5825: PUSH
5826: LD_INT 1
5828: ST_TO_ADDR
5829: GO 5845
// respawn := respawn + 1 ;
5831: LD_ADDR_LOC 10
5835: PUSH
5836: LD_LOC 10
5840: PUSH
5841: LD_INT 1
5843: PLUS
5844: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
5845: LD_EXP 20
5849: PUSH
5850: LD_LOC 10
5854: ARRAY
5855: PUSH
5856: LD_LOC 11
5860: PUSH
5861: LD_LOC 10
5865: ARRAY
5866: NOT
5867: AND
5868: IFFALSE 6317
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
5870: LD_ADDR_VAR 0 1
5874: PUSH
5875: LD_INT 21
5877: PUSH
5878: LD_INT 1
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: PUSH
5885: LD_INT 22
5887: PUSH
5888: LD_LOC 10
5892: PUSH
5893: EMPTY
5894: LIST
5895: LIST
5896: PUSH
5897: LD_INT 3
5899: PUSH
5900: LD_INT 23
5902: PUSH
5903: LD_INT 0
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: PUSH
5910: EMPTY
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: PPUSH
5916: CALL_OW 69
5920: ST_TO_ADDR
// if n < number_of_people then
5921: LD_VAR 0 1
5925: PUSH
5926: LD_EXP 4
5930: LESS
5931: IFFALSE 6314
// begin aktresp := respawn ;
5933: LD_ADDR_VAR 0 3
5937: PUSH
5938: LD_LOC 10
5942: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
5943: LD_ADDR_LOC 11
5947: PUSH
5948: LD_LOC 11
5952: PPUSH
5953: LD_VAR 0 3
5957: PPUSH
5958: LD_INT 1
5960: PPUSH
5961: CALL_OW 1
5965: ST_TO_ADDR
// enable ;
5966: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
5967: LD_EXP 10
5971: PPUSH
5972: LD_EXP 11
5976: PPUSH
5977: CALL_OW 12
5981: PPUSH
5982: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
5986: LD_ADDR_LOC 11
5990: PUSH
5991: LD_LOC 11
5995: PPUSH
5996: LD_VAR 0 3
6000: PPUSH
6001: LD_INT 0
6003: PPUSH
6004: CALL_OW 1
6008: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
6009: LD_ADDR_VAR 0 2
6013: PUSH
6014: LD_INT 21
6016: PUSH
6017: LD_INT 3
6019: PUSH
6020: EMPTY
6021: LIST
6022: LIST
6023: PUSH
6024: LD_INT 2
6026: PUSH
6027: LD_INT 30
6029: PUSH
6030: LD_INT 0
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: PUSH
6037: LD_INT 30
6039: PUSH
6040: LD_INT 1
6042: PUSH
6043: EMPTY
6044: LIST
6045: LIST
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: LIST
6051: PUSH
6052: LD_INT 50
6054: PUSH
6055: EMPTY
6056: LIST
6057: PUSH
6058: LD_INT 22
6060: PUSH
6061: LD_VAR 0 3
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: PPUSH
6076: CALL_OW 69
6080: ST_TO_ADDR
// if building_list = 0 then
6081: LD_VAR 0 2
6085: PUSH
6086: LD_INT 0
6088: EQUAL
6089: IFFALSE 6134
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
6091: LD_ADDR_VAR 0 2
6095: PUSH
6096: LD_INT 21
6098: PUSH
6099: LD_INT 3
6101: PUSH
6102: EMPTY
6103: LIST
6104: LIST
6105: PUSH
6106: LD_INT 50
6108: PUSH
6109: EMPTY
6110: LIST
6111: PUSH
6112: LD_INT 22
6114: PUSH
6115: LD_VAR 0 3
6119: PUSH
6120: EMPTY
6121: LIST
6122: LIST
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: LIST
6128: PPUSH
6129: CALL_OW 69
6133: ST_TO_ADDR
// if building_list = 0 then
6134: LD_VAR 0 2
6138: PUSH
6139: LD_INT 0
6141: EQUAL
6142: IFFALSE 6146
// exit ;
6144: GO 6318
// hc_name :=  ;
6146: LD_ADDR_OWVAR 26
6150: PUSH
6151: LD_STRING 
6153: ST_TO_ADDR
// hc_importance := 0 ;
6154: LD_ADDR_OWVAR 32
6158: PUSH
6159: LD_INT 0
6161: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6162: LD_INT 0
6164: PPUSH
6165: LD_INT 0
6167: PPUSH
6168: LD_EXP 5
6172: PUSH
6173: LD_INT 2
6175: DIV
6176: PPUSH
6177: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
6181: LD_ADDR_OWVAR 21
6185: PUSH
6186: LD_EXP 21
6190: PUSH
6191: LD_VAR 0 3
6195: ARRAY
6196: ST_TO_ADDR
// uc_side := aktresp ;
6197: LD_ADDR_OWVAR 20
6201: PUSH
6202: LD_VAR 0 3
6206: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
6207: LD_ADDR_VAR 0 4
6211: PUSH
6212: LD_VAR 0 2
6216: PUSH
6217: LD_INT 1
6219: PPUSH
6220: LD_VAR 0 2
6224: PUSH
6225: LD_INT 0
6227: PLUS
6228: PPUSH
6229: CALL_OW 12
6233: ARRAY
6234: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
6235: LD_VAR 0 4
6239: PPUSH
6240: CALL_OW 266
6244: PUSH
6245: LD_INT 0
6247: PUSH
6248: LD_INT 1
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: IN
6255: IFFALSE 6267
// n = 25 else
6257: LD_ADDR_VAR 0 1
6261: PUSH
6262: LD_INT 25
6264: ST_TO_ADDR
6265: GO 6275
// n = 10 ;
6267: LD_ADDR_VAR 0 1
6271: PUSH
6272: LD_INT 10
6274: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
6275: CALL_OW 44
6279: PPUSH
6280: LD_VAR 0 4
6284: PPUSH
6285: CALL_OW 250
6289: PPUSH
6290: LD_VAR 0 4
6294: PPUSH
6295: CALL_OW 251
6299: PPUSH
6300: LD_VAR 0 1
6304: PPUSH
6305: LD_INT 1
6307: PPUSH
6308: CALL_OW 50
// end else
6312: GO 6315
// enable ;
6314: ENABLE
// end else
6315: GO 6318
// enable ;
6317: ENABLE
// end ;
6318: PPOPN 4
6320: END
// every 1 1$0 + 0 0$0.3 do
6321: GO 6323
6323: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
6324: LD_INT 4
6326: PPUSH
6327: LD_INT 5
6329: PPUSH
6330: CALL_OW 12
6334: PPUSH
6335: LD_INT 1
6337: PPUSH
6338: CALL_OW 57
// enable ;
6342: ENABLE
// end ;
6343: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
6344: GO 6346
6346: DISABLE
6347: LD_INT 0
6349: PPUSH
6350: PPUSH
// begin case tick of 1 .. 1 1$0 :
6351: LD_OWVAR 1
6355: PUSH
6356: LD_INT 1
6358: DOUBLE
6359: GREATEREQUAL
6360: IFFALSE 6368
6362: LD_INT 2100
6364: DOUBLE
6365: LESSEQUAL
6366: IFTRUE 6370
6368: GO 6398
6370: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$20 ) ) ; 1 1$0 + 1 .. 5 5$0 :
6371: LD_EXP 8
6375: PUSH
6376: LD_INT 100
6378: DIVREAL
6379: PUSH
6380: LD_INT 350
6382: PPUSH
6383: LD_INT 700
6385: PPUSH
6386: CALL_OW 12
6390: MUL
6391: PPUSH
6392: CALL_OW 67
6396: GO 6700
6398: LD_INT 2100
6400: PUSH
6401: LD_INT 1
6403: PLUS
6404: DOUBLE
6405: GREATEREQUAL
6406: IFFALSE 6414
6408: LD_INT 10500
6410: DOUBLE
6411: LESSEQUAL
6412: IFTRUE 6416
6414: GO 6444
6416: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$20 , 0 0$35 ) ) ; 5 5$0 + 1 .. 10 10$0 :
6417: LD_EXP 8
6421: PUSH
6422: LD_INT 100
6424: DIVREAL
6425: PUSH
6426: LD_INT 700
6428: PPUSH
6429: LD_INT 1225
6431: PPUSH
6432: CALL_OW 12
6436: MUL
6437: PPUSH
6438: CALL_OW 67
6442: GO 6700
6444: LD_INT 10500
6446: PUSH
6447: LD_INT 1
6449: PLUS
6450: DOUBLE
6451: GREATEREQUAL
6452: IFFALSE 6460
6454: LD_INT 21000
6456: DOUBLE
6457: LESSEQUAL
6458: IFTRUE 6462
6460: GO 6490
6462: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$35 , 0 0$50 ) ) ; 10 10$0 + 1 .. 20 20$0 :
6463: LD_EXP 8
6467: PUSH
6468: LD_INT 100
6470: DIVREAL
6471: PUSH
6472: LD_INT 1225
6474: PPUSH
6475: LD_INT 1750
6477: PPUSH
6478: CALL_OW 12
6482: MUL
6483: PPUSH
6484: CALL_OW 67
6488: GO 6700
6490: LD_INT 21000
6492: PUSH
6493: LD_INT 1
6495: PLUS
6496: DOUBLE
6497: GREATEREQUAL
6498: IFFALSE 6506
6500: LD_INT 42000
6502: DOUBLE
6503: LESSEQUAL
6504: IFTRUE 6508
6506: GO 6536
6508: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$10 ) ) ; 20 20$0 + 1 .. 30 30$0 :
6509: LD_EXP 8
6513: PUSH
6514: LD_INT 100
6516: DIVREAL
6517: PUSH
6518: LD_INT 1750
6520: PPUSH
6521: LD_INT 2450
6523: PPUSH
6524: CALL_OW 12
6528: MUL
6529: PPUSH
6530: CALL_OW 67
6534: GO 6700
6536: LD_INT 42000
6538: PUSH
6539: LD_INT 1
6541: PLUS
6542: DOUBLE
6543: GREATEREQUAL
6544: IFFALSE 6552
6546: LD_INT 63000
6548: DOUBLE
6549: LESSEQUAL
6550: IFTRUE 6554
6552: GO 6582
6554: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 30 30$0 + 1 .. 50 50$0 :
6555: LD_EXP 8
6559: PUSH
6560: LD_INT 100
6562: DIVREAL
6563: PUSH
6564: LD_INT 2450
6566: PPUSH
6567: LD_INT 2800
6569: PPUSH
6570: CALL_OW 12
6574: MUL
6575: PPUSH
6576: CALL_OW 67
6580: GO 6700
6582: LD_INT 63000
6584: PUSH
6585: LD_INT 1
6587: PLUS
6588: DOUBLE
6589: GREATEREQUAL
6590: IFFALSE 6598
6592: LD_INT 105000
6594: DOUBLE
6595: LESSEQUAL
6596: IFTRUE 6600
6598: GO 6628
6600: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$35 ) ) ; 50 50$0 + 1 .. 300 300$0 :
6601: LD_EXP 8
6605: PUSH
6606: LD_INT 100
6608: DIVREAL
6609: PUSH
6610: LD_INT 2800
6612: PPUSH
6613: LD_INT 3325
6615: PPUSH
6616: CALL_OW 12
6620: MUL
6621: PPUSH
6622: CALL_OW 67
6626: GO 6700
6628: LD_INT 105000
6630: PUSH
6631: LD_INT 1
6633: PLUS
6634: DOUBLE
6635: GREATEREQUAL
6636: IFFALSE 6644
6638: LD_INT 630000
6640: DOUBLE
6641: LESSEQUAL
6642: IFTRUE 6646
6644: GO 6674
6646: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$35 , 2 2$0 ) ) ; else
6647: LD_EXP 8
6651: PUSH
6652: LD_INT 100
6654: DIVREAL
6655: PUSH
6656: LD_INT 3325
6658: PPUSH
6659: LD_INT 4200
6661: PPUSH
6662: CALL_OW 12
6666: MUL
6667: PPUSH
6668: CALL_OW 67
6672: GO 6700
6674: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
6675: LD_EXP 8
6679: PUSH
6680: LD_INT 100
6682: DIVREAL
6683: PUSH
6684: LD_INT 4200
6686: PPUSH
6687: LD_INT 5250
6689: PPUSH
6690: CALL_OW 12
6694: MUL
6695: PPUSH
6696: CALL_OW 67
// amount := Rand ( 1 , 5 ) ;
6700: LD_ADDR_VAR 0 2
6704: PUSH
6705: LD_INT 1
6707: PPUSH
6708: LD_INT 5
6710: PPUSH
6711: CALL_OW 12
6715: ST_TO_ADDR
// for i = 1 to 2 do
6716: LD_ADDR_VAR 0 1
6720: PUSH
6721: DOUBLE
6722: LD_INT 1
6724: DEC
6725: ST_TO_ADDR
6726: LD_INT 2
6728: PUSH
6729: FOR_TO
6730: IFFALSE 6757
// CreateCratesArea ( amount , BuildUpAreas [ i ] , true ) ;
6732: LD_VAR 0 2
6736: PPUSH
6737: LD_EXP 36
6741: PUSH
6742: LD_VAR 0 1
6746: ARRAY
6747: PPUSH
6748: LD_INT 1
6750: PPUSH
6751: CALL_OW 55
6755: GO 6729
6757: POP
6758: POP
// enable ;
6759: ENABLE
// end ; end_of_file
6760: PPOPN 2
6762: END
// var activated ; var hadziove ; every 0 0$1 do
6763: GO 6765
6765: DISABLE
// begin wait ( Rand ( 3 3$0 , 10 10$0 ) ) ;
6766: LD_INT 6300
6768: PPUSH
6769: LD_INT 21000
6771: PPUSH
6772: CALL_OW 12
6776: PPUSH
6777: CALL_OW 67
// SetAreaMapShow ( Tree , 1 ) ;
6781: LD_INT 3
6783: PPUSH
6784: LD_INT 1
6786: PPUSH
6787: CALL_OW 424
// activated := true ;
6791: LD_ADDR_LOC 12
6795: PUSH
6796: LD_INT 1
6798: ST_TO_ADDR
// end ;
6799: END
// every 0 0$1 trigger activated do var i , un ;
6800: LD_LOC 12
6804: IFFALSE 7049
6806: GO 6808
6808: DISABLE
6809: LD_INT 0
6811: PPUSH
6812: PPUSH
// begin if not def_tree_function then
6813: LD_EXP 1
6817: NOT
6818: IFFALSE 6822
// exit ;
6820: GO 7049
// ExtraStrings := [ #MultiSmall-Tree & def_tree_function ] ;
6822: LD_ADDR_EXP 55
6826: PUSH
6827: LD_STRING #MultiSmall-Tree
6829: PUSH
6830: LD_EXP 1
6834: STR
6835: PUSH
6836: EMPTY
6837: LIST
6838: ST_TO_ADDR
// for un in FilterUnitsInArea ( Tree , [ f_type , unit_human ] ) diff hadziove do
6839: LD_ADDR_VAR 0 2
6843: PUSH
6844: LD_INT 3
6846: PPUSH
6847: LD_INT 21
6849: PUSH
6850: LD_INT 1
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PPUSH
6857: CALL_OW 70
6861: PUSH
6862: LD_LOC 13
6866: DIFF
6867: PUSH
6868: FOR_IN
6869: IFFALSE 7030
// begin if GetClass ( un ) in [ class_soldier , class_engineer , class_mechanic , class_scientistic , class_sniper , class_bazooker , class_mortar ] then
6871: LD_VAR 0 2
6875: PPUSH
6876: CALL_OW 257
6880: PUSH
6881: LD_INT 1
6883: PUSH
6884: LD_INT 2
6886: PUSH
6887: LD_INT 3
6889: PUSH
6890: LD_INT 4
6892: PUSH
6893: LD_INT 5
6895: PUSH
6896: LD_INT 9
6898: PUSH
6899: LD_INT 8
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: IN
6911: IFFALSE 6960
// for i := 1 to 4 do
6913: LD_ADDR_VAR 0 1
6917: PUSH
6918: DOUBLE
6919: LD_INT 1
6921: DEC
6922: ST_TO_ADDR
6923: LD_INT 4
6925: PUSH
6926: FOR_TO
6927: IFFALSE 6956
// GiveSkillBonus ( un , i , tree_function [ i ] ) else
6929: LD_VAR 0 2
6933: PPUSH
6934: LD_VAR 0 1
6938: PPUSH
6939: LD_EXP 14
6943: PUSH
6944: LD_VAR 0 1
6948: ARRAY
6949: PPUSH
6950: CALL_OW 238
6954: GO 6926
6956: POP
6957: POP
6958: GO 7028
// if un in [ class_apeman , class_apeman_engineer , class_apeman_kamikaze , class_apeman_soldier ] then
6960: LD_VAR 0 2
6964: PUSH
6965: LD_INT 12
6967: PUSH
6968: LD_INT 16
6970: PUSH
6971: LD_INT 17
6973: PUSH
6974: LD_INT 15
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: IN
6983: IFFALSE 7028
// for i := 1 to 4 do
6985: LD_ADDR_VAR 0 1
6989: PUSH
6990: DOUBLE
6991: LD_INT 1
6993: DEC
6994: ST_TO_ADDR
6995: LD_INT 4
6997: PUSH
6998: FOR_TO
6999: IFFALSE 7026
// GiveSkillBonus ( un , i , tree_function [ 5 ] ) ;
7001: LD_VAR 0 2
7005: PPUSH
7006: LD_VAR 0 1
7010: PPUSH
7011: LD_EXP 14
7015: PUSH
7016: LD_INT 5
7018: ARRAY
7019: PPUSH
7020: CALL_OW 238
7024: GO 6998
7026: POP
7027: POP
// end ;
7028: GO 6868
7030: POP
7031: POP
// hadziove := hadziove ^ un ;
7032: LD_ADDR_LOC 13
7036: PUSH
7037: LD_LOC 13
7041: PUSH
7042: LD_VAR 0 2
7046: ADD
7047: ST_TO_ADDR
// enable ;
7048: ENABLE
// end ; end_of_file
7049: PPOPN 2
7051: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7052: LD_VAR 0 1
7056: PPUSH
7057: CALL_OW 266
7061: PUSH
7062: LD_INT 0
7064: PUSH
7065: LD_INT 1
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: IN
7072: IFFALSE 7097
// SetBName ( b , @ & GetSide ( b ) ) ;
7074: LD_VAR 0 1
7078: PPUSH
7079: LD_STRING @
7081: PUSH
7082: LD_VAR 0 1
7086: PPUSH
7087: CALL_OW 255
7091: STR
7092: PPUSH
7093: CALL_OW 500
// if def_game_rules then
7097: LD_EXP 39
7101: IFFALSE 7138
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
7103: LD_VAR 0 1
7107: PPUSH
7108: LD_VAR 0 1
7112: PPUSH
7113: CALL_OW 266
7117: PPUSH
7118: LD_VAR 0 1
7122: PPUSH
7123: CALL_OW 255
7127: PPUSH
7128: LD_INT 0
7130: PPUSH
7131: LD_INT 1
7133: PPUSH
7134: CALL 11161 0 5
// end ;
7138: PPOPN 2
7140: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7141: LD_VAR 0 1
7145: PPUSH
7146: CALL_OW 266
7150: PUSH
7151: LD_INT 0
7153: PUSH
7154: LD_INT 1
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: IN
7161: IFFALSE 7186
// SetBName ( b , @ & GetSide ( b ) ) ;
7163: LD_VAR 0 1
7167: PPUSH
7168: LD_STRING @
7170: PUSH
7171: LD_VAR 0 1
7175: PPUSH
7176: CALL_OW 255
7180: STR
7181: PPUSH
7182: CALL_OW 500
// if def_game_rules then
7186: LD_EXP 39
7190: IFFALSE 7229
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7192: LD_VAR 0 1
7196: PPUSH
7197: LD_VAR 0 1
7201: PPUSH
7202: CALL_OW 266
7206: PPUSH
7207: LD_VAR 0 1
7211: PPUSH
7212: CALL_OW 255
7216: PPUSH
7217: LD_VAR 0 2
7221: PPUSH
7222: LD_INT 1
7224: PPUSH
7225: CALL 11161 0 5
// end ;
7229: PPOPN 3
7231: END
// on VehicleConstructed ( veh , fac ) do var side ;
7232: LD_INT 0
7234: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7235: LD_VAR 0 1
7239: PPUSH
7240: CALL_OW 263
7244: PUSH
7245: LD_INT 5
7247: EQUAL
7248: IFFALSE 7390
// begin side := GetSide ( veh ) ;
7250: LD_ADDR_VAR 0 3
7254: PUSH
7255: LD_VAR 0 1
7259: PPUSH
7260: CALL_OW 255
7264: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7265: LD_ADDR_EXP 32
7269: PUSH
7270: LD_EXP 32
7274: PPUSH
7275: LD_VAR 0 3
7279: PPUSH
7280: LD_EXP 32
7284: PUSH
7285: LD_VAR 0 3
7289: ARRAY
7290: PPUSH
7291: LD_INT 52
7293: PUSH
7294: EMPTY
7295: LIST
7296: PPUSH
7297: CALL_OW 72
7301: PUSH
7302: LD_INT 22
7304: PUSH
7305: LD_VAR 0 3
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PUSH
7314: LD_INT 2
7316: PUSH
7317: LD_INT 33
7319: PUSH
7320: LD_INT 5
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: PUSH
7327: LD_INT 25
7329: PUSH
7330: LD_INT 12
7332: PUSH
7333: EMPTY
7334: LIST
7335: LIST
7336: PUSH
7337: LD_INT 25
7339: PUSH
7340: LD_INT 15
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: PUSH
7347: LD_INT 25
7349: PUSH
7350: LD_INT 16
7352: PUSH
7353: EMPTY
7354: LIST
7355: LIST
7356: PUSH
7357: LD_INT 25
7359: PUSH
7360: LD_INT 17
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: PPUSH
7379: CALL_OW 69
7383: UNION
7384: PPUSH
7385: CALL_OW 1
7389: ST_TO_ADDR
// end ; end ;
7390: PPOPN 3
7392: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7393: LD_INT 0
7395: PPUSH
7396: PPUSH
7397: PPUSH
7398: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7399: LD_VAR 0 1
7403: PPUSH
7404: CALL_OW 257
7408: PUSH
7409: LD_INT 12
7411: PUSH
7412: LD_INT 15
7414: PUSH
7415: LD_INT 17
7417: PUSH
7418: LD_INT 16
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: IN
7427: PUSH
7428: LD_VAR 0 1
7432: PPUSH
7433: CALL_OW 263
7437: PUSH
7438: LD_INT 5
7440: EQUAL
7441: OR
7442: IFFALSE 7453
// ApeKilled ( j ) ;
7444: LD_VAR 0 1
7448: PPUSH
7449: CALL 5567 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7453: LD_VAR 0 1
7457: PPUSH
7458: CALL_OW 266
7462: PUSH
7463: LD_INT 0
7465: PUSH
7466: LD_INT 1
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: IN
7473: IFFALSE 7555
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7475: LD_ADDR_VAR 0 4
7479: PUSH
7480: LD_EXP 20
7484: PUSH
7485: LD_VAR 0 1
7489: PPUSH
7490: CALL_OW 255
7494: ARRAY
7495: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7496: LD_ADDR_VAR 0 2
7500: PUSH
7501: LD_EXP 26
7505: PUSH
7506: LD_VAR 0 4
7510: ARRAY
7511: PUSH
7512: LD_INT 1
7514: ARRAY
7515: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7516: LD_ADDR_VAR 0 3
7520: PUSH
7521: LD_EXP 26
7525: PUSH
7526: LD_VAR 0 4
7530: ARRAY
7531: PUSH
7532: LD_INT 2
7534: ARRAY
7535: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7536: LD_VAR 0 2
7540: PPUSH
7541: LD_VAR 0 3
7545: PPUSH
7546: CALL_OW 420
7550: PPUSH
7551: CALL_OW 419
// end ; if def_game_rules then
7555: LD_EXP 39
7559: IFFALSE 7658
// if ( GetType ( j ) = 3 ) then
7561: LD_VAR 0 1
7565: PPUSH
7566: CALL_OW 247
7570: PUSH
7571: LD_INT 3
7573: EQUAL
7574: IFFALSE 7614
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7576: LD_VAR 0 1
7580: PPUSH
7581: LD_VAR 0 1
7585: PPUSH
7586: CALL_OW 266
7590: PPUSH
7591: LD_VAR 0 1
7595: PPUSH
7596: CALL_OW 255
7600: PPUSH
7601: LD_INT 0
7603: PPUSH
7604: LD_INT 1
7606: NEG
7607: PPUSH
7608: CALL 11161 0 5
7612: GO 7658
// if ( GetChassis ( j ) = 25 ) then
7614: LD_VAR 0 1
7618: PPUSH
7619: CALL_OW 265
7623: PUSH
7624: LD_INT 25
7626: EQUAL
7627: IFFALSE 7658
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7629: LD_VAR 0 1
7633: PPUSH
7634: LD_INT 37
7636: PPUSH
7637: LD_VAR 0 1
7641: PPUSH
7642: CALL_OW 255
7646: PPUSH
7647: LD_INT 0
7649: PPUSH
7650: LD_INT 1
7652: NEG
7653: PPUSH
7654: CALL 11161 0 5
// end ;
7658: PPOPN 5
7660: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7661: LD_EXP 39
7665: PUSH
7666: LD_VAR 0 1
7670: PPUSH
7671: CALL_OW 265
7675: PUSH
7676: LD_INT 25
7678: EQUAL
7679: AND
7680: IFFALSE 7712
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
7682: LD_VAR 0 1
7686: PPUSH
7687: LD_INT 37
7689: PPUSH
7690: LD_VAR 0 1
7694: PPUSH
7695: CALL_OW 255
7699: PPUSH
7700: LD_VAR 0 3
7704: PPUSH
7705: LD_INT 1
7707: PPUSH
7708: CALL 11161 0 5
// end ;
7712: PPOPN 4
7714: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7715: LD_VAR 0 1
7719: PPUSH
7720: LD_VAR 0 2
7724: PPUSH
7725: LD_VAR 0 3
7729: PPUSH
7730: LD_OWVAR 2
7734: PPUSH
7735: CALL 11906 0 4
7739: PPOPN 3
7741: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7742: LD_INT 0
7744: PPUSH
7745: PPUSH
// for un in battle_flags_id do
7746: LD_ADDR_VAR 0 2
7750: PUSH
7751: LD_EXP 27
7755: PUSH
7756: FOR_IN
7757: IFFALSE 7832
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7759: LD_VAR 0 2
7763: PPUSH
7764: LD_INT 1
7766: PUSH
7767: LD_LOC 14
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: PUSH
7776: LD_INT 2
7778: PUSH
7779: LD_LOC 14
7783: PUSH
7784: LD_INT 2
7786: DIV
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: PUSH
7792: LD_INT 3
7794: PUSH
7795: LD_LOC 14
7799: PUSH
7800: LD_INT 5
7802: DIV
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: PUSH
7808: LD_INT 20
7810: PUSH
7811: LD_LOC 14
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: PPUSH
7826: CALL_OW 423
7830: GO 7756
7832: POP
7833: POP
// end ;
7834: LD_VAR 0 1
7838: RET
// every 0 0$0.1 do var un ;
7839: GO 7841
7841: DISABLE
7842: LD_INT 0
7844: PPUSH
// begin if not def_morale_flags then
7845: LD_EXP 48
7849: NOT
7850: IFFALSE 7854
// exit ;
7852: GO 7931
// if not morale_decreasing_time then
7854: LD_EXP 9
7858: NOT
7859: IFFALSE 7863
// exit ;
7861: GO 7931
// strength = 100 ;
7863: LD_ADDR_LOC 14
7867: PUSH
7868: LD_INT 100
7870: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7871: LD_EXP 9
7875: PPUSH
7876: CALL_OW 67
// strength := strength - 1 ;
7880: LD_ADDR_LOC 14
7884: PUSH
7885: LD_LOC 14
7889: PUSH
7890: LD_INT 1
7892: MINUS
7893: ST_TO_ADDR
// Update_Flags ;
7894: CALL 7742 0 0
// until not strength ;
7898: LD_LOC 14
7902: NOT
7903: IFFALSE 7871
// for un in battle_flags_id do
7905: LD_ADDR_VAR 0 1
7909: PUSH
7910: LD_EXP 27
7914: PUSH
7915: FOR_IN
7916: IFFALSE 7929
// KillBattleFlag ( un ) ;
7918: LD_VAR 0 1
7922: PPUSH
7923: CALL_OW 419
7927: GO 7915
7929: POP
7930: POP
// end ; end_of_file
7931: PPOPN 1
7933: END
// export BuildUpAreas ; export buildUpTimeActive ; export function BeginBuildUp ; var i , j ; begin
7934: LD_INT 0
7936: PPUSH
7937: PPUSH
7938: PPUSH
// buildUpTimeActive := true ;
7939: LD_ADDR_EXP 37
7943: PUSH
7944: LD_INT 1
7946: ST_TO_ADDR
// for i := 1 to BuildUpAreas do
7947: LD_ADDR_VAR 0 2
7951: PUSH
7952: DOUBLE
7953: LD_INT 1
7955: DEC
7956: ST_TO_ADDR
7957: LD_EXP 36
7961: PUSH
7962: FOR_TO
7963: IFFALSE 8118
// if Position_Sides [ i ] then
7965: LD_EXP 23
7969: PUSH
7970: LD_VAR 0 2
7974: ARRAY
7975: IFFALSE 8116
// for j := 1 to 8 do
7977: LD_ADDR_VAR 0 3
7981: PUSH
7982: DOUBLE
7983: LD_INT 1
7985: DEC
7986: ST_TO_ADDR
7987: LD_INT 8
7989: PUSH
7990: FOR_TO
7991: IFFALSE 8114
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
7993: LD_EXP 20
7997: PUSH
7998: LD_VAR 0 3
8002: ARRAY
8003: PUSH
8004: LD_EXP 17
8008: PUSH
8009: LD_EXP 23
8013: PUSH
8014: LD_VAR 0 2
8018: ARRAY
8019: ARRAY
8020: PUSH
8021: LD_EXP 17
8025: PUSH
8026: LD_VAR 0 3
8030: ARRAY
8031: NONEQUAL
8032: PUSH
8033: LD_EXP 22
8037: NOT
8038: PUSH
8039: LD_EXP 23
8043: PUSH
8044: LD_VAR 0 2
8048: ARRAY
8049: PUSH
8050: LD_VAR 0 3
8054: NONEQUAL
8055: AND
8056: OR
8057: AND
8058: IFFALSE 8082
// HideArea ( j , BuildUpAreas [ i ] ) else
8060: LD_VAR 0 3
8064: PPUSH
8065: LD_EXP 36
8069: PUSH
8070: LD_VAR 0 2
8074: ARRAY
8075: PPUSH
8076: CALL_OW 333
8080: GO 8112
// if ( j = your_side ) then
8082: LD_VAR 0 3
8086: PUSH
8087: LD_OWVAR 2
8091: EQUAL
8092: IFFALSE 8112
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
8094: LD_EXP 36
8098: PUSH
8099: LD_VAR 0 2
8103: ARRAY
8104: PPUSH
8105: LD_INT 5
8107: PPUSH
8108: CALL_OW 424
8112: GO 7990
8114: POP
8115: POP
8116: GO 7962
8118: POP
8119: POP
// end ;
8120: LD_VAR 0 1
8124: RET
// export function EndBuildUp ; var i , j ; begin
8125: LD_INT 0
8127: PPUSH
8128: PPUSH
8129: PPUSH
// buildUpTimeActive := false ;
8130: LD_ADDR_EXP 37
8134: PUSH
8135: LD_INT 0
8137: ST_TO_ADDR
// for i := 1 to BuildUpAreas do
8138: LD_ADDR_VAR 0 2
8142: PUSH
8143: DOUBLE
8144: LD_INT 1
8146: DEC
8147: ST_TO_ADDR
8148: LD_EXP 36
8152: PUSH
8153: FOR_TO
8154: IFFALSE 8309
// if Position_Sides [ i ] then
8156: LD_EXP 23
8160: PUSH
8161: LD_VAR 0 2
8165: ARRAY
8166: IFFALSE 8307
// for j := 1 to 8 do
8168: LD_ADDR_VAR 0 3
8172: PUSH
8173: DOUBLE
8174: LD_INT 1
8176: DEC
8177: ST_TO_ADDR
8178: LD_INT 8
8180: PUSH
8181: FOR_TO
8182: IFFALSE 8305
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
8184: LD_EXP 20
8188: PUSH
8189: LD_VAR 0 3
8193: ARRAY
8194: PUSH
8195: LD_EXP 17
8199: PUSH
8200: LD_EXP 23
8204: PUSH
8205: LD_VAR 0 2
8209: ARRAY
8210: ARRAY
8211: PUSH
8212: LD_EXP 17
8216: PUSH
8217: LD_VAR 0 3
8221: ARRAY
8222: NONEQUAL
8223: PUSH
8224: LD_EXP 22
8228: NOT
8229: PUSH
8230: LD_EXP 23
8234: PUSH
8235: LD_VAR 0 2
8239: ARRAY
8240: PUSH
8241: LD_VAR 0 3
8245: NONEQUAL
8246: AND
8247: OR
8248: AND
8249: IFFALSE 8273
// ShowArea ( j , BuildUpAreas [ i ] ) else
8251: LD_VAR 0 3
8255: PPUSH
8256: LD_EXP 36
8260: PUSH
8261: LD_VAR 0 2
8265: ARRAY
8266: PPUSH
8267: CALL_OW 334
8271: GO 8303
// if ( j = your_side ) then
8273: LD_VAR 0 3
8277: PUSH
8278: LD_OWVAR 2
8282: EQUAL
8283: IFFALSE 8303
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
8285: LD_EXP 36
8289: PUSH
8290: LD_VAR 0 2
8294: ARRAY
8295: PPUSH
8296: LD_INT 0
8298: PPUSH
8299: CALL_OW 424
8303: GO 8181
8305: POP
8306: POP
8307: GO 8153
8309: POP
8310: POP
// end ;
8311: LD_VAR 0 1
8315: RET
// every 5 trigger buildUpTimeActive do var i , un ;
8316: LD_EXP 37
8320: IFFALSE 8503
8322: GO 8324
8324: DISABLE
8325: LD_INT 0
8327: PPUSH
8328: PPUSH
// begin for i := 1 to BuildUpAreas do
8329: LD_ADDR_VAR 0 1
8333: PUSH
8334: DOUBLE
8335: LD_INT 1
8337: DEC
8338: ST_TO_ADDR
8339: LD_EXP 36
8343: PUSH
8344: FOR_TO
8345: IFFALSE 8500
// if Position_Sides [ i ] then
8347: LD_EXP 23
8351: PUSH
8352: LD_VAR 0 1
8356: ARRAY
8357: IFFALSE 8498
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
8359: LD_ADDR_VAR 0 2
8363: PUSH
8364: LD_EXP 36
8368: PUSH
8369: LD_VAR 0 1
8373: ARRAY
8374: PPUSH
8375: LD_INT 2
8377: PUSH
8378: LD_INT 21
8380: PUSH
8381: LD_INT 1
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: PUSH
8388: LD_INT 21
8390: PUSH
8391: LD_INT 2
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: LIST
8402: PUSH
8403: LD_INT 22
8405: PUSH
8406: LD_OWVAR 2
8410: PUSH
8411: EMPTY
8412: LIST
8413: LIST
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: PPUSH
8419: CALL_OW 70
8423: PUSH
8424: FOR_IN
8425: IFFALSE 8496
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
8427: LD_EXP 17
8431: PUSH
8432: LD_EXP 23
8436: PUSH
8437: LD_VAR 0 1
8441: ARRAY
8442: ARRAY
8443: PUSH
8444: LD_EXP 17
8448: PUSH
8449: LD_OWVAR 2
8453: ARRAY
8454: NONEQUAL
8455: PUSH
8456: LD_EXP 22
8460: NOT
8461: PUSH
8462: LD_EXP 23
8466: PUSH
8467: LD_VAR 0 1
8471: ARRAY
8472: PUSH
8473: LD_OWVAR 2
8477: NONEQUAL
8478: AND
8479: OR
8480: IFFALSE 8494
// ComMoveToArea ( un , BuildUpEscape ) ;
8482: LD_VAR 0 2
8486: PPUSH
8487: LD_INT 12
8489: PPUSH
8490: CALL_OW 113
8494: GO 8424
8496: POP
8497: POP
8498: GO 8344
8500: POP
8501: POP
// enable ;
8502: ENABLE
// end ;
8503: PPOPN 2
8505: END
// every 0 0$1 trigger def_builduptime do
8506: LD_EXP 53
8510: IFFALSE 8536
8512: GO 8514
8514: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
8515: LD_INT 8400
8517: PUSH
8518: LD_EXP 53
8522: PUSH
8523: LD_INT 2100
8525: MUL
8526: PLUS
8527: PPUSH
8528: CALL_OW 67
// EndBuildUp ;
8532: CALL 8125 0 0
// end ; end_of_file
8536: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
8537: LD_INT 0
8539: PPUSH
8540: PPUSH
// if ( not IAmSpec ) then
8541: CALL_OW 531
8545: NOT
8546: IFFALSE 8562
// Result := Limits_Info ^  ;
8548: LD_ADDR_VAR 0 1
8552: PUSH
8553: LD_LOC 26
8557: PUSH
8558: LD_STRING 
8560: ADD
8561: ST_TO_ADDR
// for i := 1 to 8 do
8562: LD_ADDR_VAR 0 2
8566: PUSH
8567: DOUBLE
8568: LD_INT 1
8570: DEC
8571: ST_TO_ADDR
8572: LD_INT 8
8574: PUSH
8575: FOR_TO
8576: IFFALSE 8621
// if Cheaters [ i ] then
8578: LD_LOC 27
8582: PUSH
8583: LD_VAR 0 2
8587: ARRAY
8588: IFFALSE 8619
// Result := Result ^ [ #Cheater , i , i ] ;
8590: LD_ADDR_VAR 0 1
8594: PUSH
8595: LD_VAR 0 1
8599: PUSH
8600: LD_STRING #Cheater
8602: PUSH
8603: LD_VAR 0 2
8607: PUSH
8608: LD_VAR 0 2
8612: PUSH
8613: EMPTY
8614: LIST
8615: LIST
8616: LIST
8617: ADD
8618: ST_TO_ADDR
8619: GO 8575
8621: POP
8622: POP
// end ;
8623: LD_VAR 0 1
8627: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
8628: LD_INT 0
8630: PPUSH
8631: PPUSH
8632: PPUSH
8633: PPUSH
8634: PPUSH
// case Game_Type of 10 :
8635: LD_EXP 38
8639: PUSH
8640: LD_INT 10
8642: DOUBLE
8643: EQUAL
8644: IFTRUE 8648
8646: GO 8659
8648: POP
// def_game_rules := 1 ; 11 :
8649: LD_ADDR_EXP 39
8653: PUSH
8654: LD_INT 1
8656: ST_TO_ADDR
8657: GO 8679
8659: LD_INT 11
8661: DOUBLE
8662: EQUAL
8663: IFTRUE 8667
8665: GO 8678
8667: POP
// def_game_rules := 3 ; end ;
8668: LD_ADDR_EXP 39
8672: PUSH
8673: LD_INT 3
8675: ST_TO_ADDR
8676: GO 8679
8678: POP
// case def_game_rules of 0 :
8679: LD_EXP 39
8683: PUSH
8684: LD_INT 0
8686: DOUBLE
8687: EQUAL
8688: IFTRUE 8692
8690: GO 8697
8692: POP
// exit ; 1 :
8693: GO 10755
8695: GO 10655
8697: LD_INT 1
8699: DOUBLE
8700: EQUAL
8701: IFTRUE 8705
8703: GO 8921
8705: POP
// begin def_base_level := 2 ;
8706: LD_ADDR_EXP 40
8710: PUSH
8711: LD_INT 2
8713: ST_TO_ADDR
// def_amount_of_people := 2 ;
8714: LD_ADDR_EXP 41
8718: PUSH
8719: LD_INT 2
8721: ST_TO_ADDR
// def_skill_level := 1 ;
8722: LD_ADDR_EXP 42
8726: PUSH
8727: LD_INT 1
8729: ST_TO_ADDR
// def_starting_resources := 2 ;
8730: LD_ADDR_EXP 43
8734: PUSH
8735: LD_INT 2
8737: ST_TO_ADDR
// def_shipments_density := 1 ;
8738: LD_ADDR_EXP 44
8742: PUSH
8743: LD_INT 1
8745: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8746: LD_ADDR_EXP 45
8750: PUSH
8751: LD_INT 0
8753: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
8754: LD_ADDR_EXP 46
8758: PUSH
8759: LD_INT 1
8761: ST_TO_ADDR
// def_shared_vision := 1 ;
8762: LD_ADDR_EXP 47
8766: PUSH
8767: LD_INT 1
8769: ST_TO_ADDR
// def_morale_flags := 3 ;
8770: LD_ADDR_EXP 48
8774: PUSH
8775: LD_INT 3
8777: ST_TO_ADDR
// def_siberite_detection := 1 ;
8778: LD_ADDR_EXP 49
8782: PUSH
8783: LD_INT 1
8785: ST_TO_ADDR
// def_people_respawning := 1 ;
8786: LD_ADDR_EXP 50
8790: PUSH
8791: LD_INT 1
8793: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
8794: LD_ADDR_EXP 51
8798: PUSH
8799: LD_INT 1
8801: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8802: LD_ADDR_EXP 52
8806: PUSH
8807: LD_INT 0
8809: ST_TO_ADDR
// def_builduptime := 2 ;
8810: LD_ADDR_EXP 53
8814: PUSH
8815: LD_INT 2
8817: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
8818: LD_ADDR_VAR 0 2
8822: PUSH
8823: EMPTY
8824: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8825: LD_ADDR_VAR 0 3
8829: PUSH
8830: EMPTY
8831: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8832: LD_ADDR_LOC 21
8836: PUSH
8837: EMPTY
8838: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8839: LD_ADDR_LOC 22
8843: PUSH
8844: EMPTY
8845: ST_TO_ADDR
// Banned_Controls := [ ] ;
8846: LD_ADDR_LOC 23
8850: PUSH
8851: EMPTY
8852: ST_TO_ADDR
// Banned_Engines := [ ] ;
8853: LD_ADDR_LOC 24
8857: PUSH
8858: EMPTY
8859: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
8860: LD_ADDR_LOC 19
8864: PUSH
8865: LD_INT 37
8867: PUSH
8868: EMPTY
8869: LIST
8870: PUSH
8871: LD_INT 4
8873: PUSH
8874: LD_INT 5
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: PUSH
8881: LD_INT 31
8883: PUSH
8884: LD_INT 32
8886: PUSH
8887: LD_INT 33
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: LIST
8894: PUSH
8895: EMPTY
8896: LIST
8897: LIST
8898: LIST
8899: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
8900: LD_ADDR_LOC 20
8904: PUSH
8905: LD_INT 2
8907: PUSH
8908: LD_INT 2
8910: PUSH
8911: LD_INT 4
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: LIST
8918: ST_TO_ADDR
// end ; 2 :
8919: GO 10655
8921: LD_INT 2
8923: DOUBLE
8924: EQUAL
8925: IFTRUE 8929
8927: GO 9138
8929: POP
// begin def_base_level := 1 ;
8930: LD_ADDR_EXP 40
8934: PUSH
8935: LD_INT 1
8937: ST_TO_ADDR
// def_amount_of_people := 2 ;
8938: LD_ADDR_EXP 41
8942: PUSH
8943: LD_INT 2
8945: ST_TO_ADDR
// def_skill_level := 3 ;
8946: LD_ADDR_EXP 42
8950: PUSH
8951: LD_INT 3
8953: ST_TO_ADDR
// def_starting_resources := 3 ;
8954: LD_ADDR_EXP 43
8958: PUSH
8959: LD_INT 3
8961: ST_TO_ADDR
// def_shipments_density := 2 ;
8962: LD_ADDR_EXP 44
8966: PUSH
8967: LD_INT 2
8969: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8970: LD_ADDR_EXP 45
8974: PUSH
8975: LD_INT 1
8977: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8978: LD_ADDR_EXP 46
8982: PUSH
8983: LD_INT 2
8985: ST_TO_ADDR
// def_shared_vision := 1 ;
8986: LD_ADDR_EXP 47
8990: PUSH
8991: LD_INT 1
8993: ST_TO_ADDR
// def_morale_flags := 0 ;
8994: LD_ADDR_EXP 48
8998: PUSH
8999: LD_INT 0
9001: ST_TO_ADDR
// def_siberite_detection := 1 ;
9002: LD_ADDR_EXP 49
9006: PUSH
9007: LD_INT 1
9009: ST_TO_ADDR
// def_people_respawning := 0 ;
9010: LD_ADDR_EXP 50
9014: PUSH
9015: LD_INT 0
9017: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
9018: LD_ADDR_EXP 51
9022: PUSH
9023: LD_INT 0
9025: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9026: LD_ADDR_EXP 52
9030: PUSH
9031: LD_INT 0
9033: ST_TO_ADDR
// def_builduptime := 2 ;
9034: LD_ADDR_EXP 53
9038: PUSH
9039: LD_INT 2
9041: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
9042: LD_ADDR_VAR 0 2
9046: PUSH
9047: LD_INT 1
9049: PUSH
9050: EMPTY
9051: LIST
9052: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9053: LD_ADDR_VAR 0 3
9057: PUSH
9058: EMPTY
9059: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9060: LD_ADDR_LOC 21
9064: PUSH
9065: EMPTY
9066: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9067: LD_ADDR_LOC 22
9071: PUSH
9072: EMPTY
9073: ST_TO_ADDR
// Banned_Controls := [ ] ;
9074: LD_ADDR_LOC 23
9078: PUSH
9079: EMPTY
9080: ST_TO_ADDR
// Banned_Engines := [ ] ;
9081: LD_ADDR_LOC 24
9085: PUSH
9086: EMPTY
9087: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9088: LD_ADDR_LOC 19
9092: PUSH
9093: LD_INT 4
9095: PUSH
9096: LD_INT 5
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: PUSH
9103: LD_INT 31
9105: PUSH
9106: LD_INT 32
9108: PUSH
9109: LD_INT 33
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: LIST
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
9121: LD_ADDR_LOC 20
9125: PUSH
9126: LD_INT 1
9128: PUSH
9129: LD_INT 2
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: ST_TO_ADDR
// end ; 3 :
9136: GO 10655
9138: LD_INT 3
9140: DOUBLE
9141: EQUAL
9142: IFTRUE 9146
9144: GO 9389
9146: POP
// begin def_base_level := 1 ;
9147: LD_ADDR_EXP 40
9151: PUSH
9152: LD_INT 1
9154: ST_TO_ADDR
// def_amount_of_people := 2 ;
9155: LD_ADDR_EXP 41
9159: PUSH
9160: LD_INT 2
9162: ST_TO_ADDR
// def_skill_level := 3 ;
9163: LD_ADDR_EXP 42
9167: PUSH
9168: LD_INT 3
9170: ST_TO_ADDR
// def_starting_resources := 3 ;
9171: LD_ADDR_EXP 43
9175: PUSH
9176: LD_INT 3
9178: ST_TO_ADDR
// def_shipments_density := 1 ;
9179: LD_ADDR_EXP 44
9183: PUSH
9184: LD_INT 1
9186: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9187: LD_ADDR_EXP 45
9191: PUSH
9192: LD_INT 0
9194: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9195: LD_ADDR_EXP 46
9199: PUSH
9200: LD_INT 1
9202: ST_TO_ADDR
// def_shared_vision := 1 ;
9203: LD_ADDR_EXP 47
9207: PUSH
9208: LD_INT 1
9210: ST_TO_ADDR
// def_morale_flags := 0 ;
9211: LD_ADDR_EXP 48
9215: PUSH
9216: LD_INT 0
9218: ST_TO_ADDR
// def_siberite_detection := 1 ;
9219: LD_ADDR_EXP 49
9223: PUSH
9224: LD_INT 1
9226: ST_TO_ADDR
// def_people_respawning := 0 ;
9227: LD_ADDR_EXP 50
9231: PUSH
9232: LD_INT 0
9234: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
9235: LD_ADDR_EXP 51
9239: PUSH
9240: LD_INT 2
9242: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9243: LD_ADDR_EXP 52
9247: PUSH
9248: LD_INT 0
9250: ST_TO_ADDR
// def_builduptime := 1 ;
9251: LD_ADDR_EXP 53
9255: PUSH
9256: LD_INT 1
9258: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9259: LD_ADDR_VAR 0 2
9263: PUSH
9264: LD_INT 23
9266: PUSH
9267: EMPTY
9268: LIST
9269: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
9270: LD_ADDR_VAR 0 3
9274: PUSH
9275: LD_INT 2
9277: PUSH
9278: LD_INT 37
9280: PUSH
9281: LD_INT 32
9283: PUSH
9284: LD_INT 33
9286: PUSH
9287: LD_INT 36
9289: PUSH
9290: LD_INT 16
9292: PUSH
9293: LD_INT 23
9295: PUSH
9296: LD_INT 21
9298: PUSH
9299: LD_INT 18
9301: PUSH
9302: LD_INT 22
9304: PUSH
9305: LD_INT 20
9307: PUSH
9308: LD_INT 19
9310: PUSH
9311: LD_INT 25
9313: PUSH
9314: LD_INT 17
9316: PUSH
9317: LD_INT 24
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9337: LD_ADDR_LOC 21
9341: PUSH
9342: EMPTY
9343: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9344: LD_ADDR_LOC 22
9348: PUSH
9349: EMPTY
9350: ST_TO_ADDR
// Banned_Controls := [ ] ;
9351: LD_ADDR_LOC 23
9355: PUSH
9356: EMPTY
9357: ST_TO_ADDR
// Banned_Engines := [ ] ;
9358: LD_ADDR_LOC 24
9362: PUSH
9363: EMPTY
9364: ST_TO_ADDR
// Restricted_Builds := [ ] ;
9365: LD_ADDR_LOC 19
9369: PUSH
9370: EMPTY
9371: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
9372: LD_ADDR_LOC 20
9376: PUSH
9377: EMPTY
9378: ST_TO_ADDR
// No_Mechs := true ;
9379: LD_ADDR_EXP 54
9383: PUSH
9384: LD_INT 1
9386: ST_TO_ADDR
// end ; 4 :
9387: GO 10655
9389: LD_INT 4
9391: DOUBLE
9392: EQUAL
9393: IFTRUE 9397
9395: GO 9572
9397: POP
// begin def_base_level := 1 ;
9398: LD_ADDR_EXP 40
9402: PUSH
9403: LD_INT 1
9405: ST_TO_ADDR
// def_amount_of_people := 2 ;
9406: LD_ADDR_EXP 41
9410: PUSH
9411: LD_INT 2
9413: ST_TO_ADDR
// def_skill_level := 3 ;
9414: LD_ADDR_EXP 42
9418: PUSH
9419: LD_INT 3
9421: ST_TO_ADDR
// def_starting_resources := 3 ;
9422: LD_ADDR_EXP 43
9426: PUSH
9427: LD_INT 3
9429: ST_TO_ADDR
// def_shipments_density := 2 ;
9430: LD_ADDR_EXP 44
9434: PUSH
9435: LD_INT 2
9437: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9438: LD_ADDR_EXP 45
9442: PUSH
9443: LD_INT 1
9445: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9446: LD_ADDR_EXP 46
9450: PUSH
9451: LD_INT 2
9453: ST_TO_ADDR
// def_shared_vision := 1 ;
9454: LD_ADDR_EXP 47
9458: PUSH
9459: LD_INT 1
9461: ST_TO_ADDR
// def_morale_flags := 0 ;
9462: LD_ADDR_EXP 48
9466: PUSH
9467: LD_INT 0
9469: ST_TO_ADDR
// def_siberite_detection := 1 ;
9470: LD_ADDR_EXP 49
9474: PUSH
9475: LD_INT 1
9477: ST_TO_ADDR
// def_people_respawning := 0 ;
9478: LD_ADDR_EXP 50
9482: PUSH
9483: LD_INT 0
9485: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
9486: LD_ADDR_EXP 51
9490: PUSH
9491: LD_INT 0
9493: ST_TO_ADDR
// def_siberite_bomb := 1 ;
9494: LD_ADDR_EXP 52
9498: PUSH
9499: LD_INT 1
9501: ST_TO_ADDR
// def_builduptime := 3 ;
9502: LD_ADDR_EXP 53
9506: PUSH
9507: LD_INT 3
9509: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
9510: LD_ADDR_VAR 0 2
9514: PUSH
9515: LD_INT 1
9517: PUSH
9518: EMPTY
9519: LIST
9520: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9521: LD_ADDR_VAR 0 3
9525: PUSH
9526: EMPTY
9527: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9528: LD_ADDR_LOC 21
9532: PUSH
9533: EMPTY
9534: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9535: LD_ADDR_LOC 22
9539: PUSH
9540: EMPTY
9541: ST_TO_ADDR
// Banned_Controls := [ ] ;
9542: LD_ADDR_LOC 23
9546: PUSH
9547: EMPTY
9548: ST_TO_ADDR
// Banned_Engines := [ ] ;
9549: LD_ADDR_LOC 24
9553: PUSH
9554: EMPTY
9555: ST_TO_ADDR
// Restricted_Builds := [ ] ;
9556: LD_ADDR_LOC 19
9560: PUSH
9561: EMPTY
9562: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
9563: LD_ADDR_LOC 20
9567: PUSH
9568: EMPTY
9569: ST_TO_ADDR
// end ; 5 :
9570: GO 10655
9572: LD_INT 5
9574: DOUBLE
9575: EQUAL
9576: IFTRUE 9580
9578: GO 9829
9580: POP
// begin def_base_level := 0 ;
9581: LD_ADDR_EXP 40
9585: PUSH
9586: LD_INT 0
9588: ST_TO_ADDR
// def_amount_of_people := 0 ;
9589: LD_ADDR_EXP 41
9593: PUSH
9594: LD_INT 0
9596: ST_TO_ADDR
// def_skill_level := 0 ;
9597: LD_ADDR_EXP 42
9601: PUSH
9602: LD_INT 0
9604: ST_TO_ADDR
// def_starting_resources := 0 ;
9605: LD_ADDR_EXP 43
9609: PUSH
9610: LD_INT 0
9612: ST_TO_ADDR
// def_shipments_density := 0 ;
9613: LD_ADDR_EXP 44
9617: PUSH
9618: LD_INT 0
9620: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9621: LD_ADDR_EXP 45
9625: PUSH
9626: LD_INT 0
9628: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
9629: LD_ADDR_EXP 46
9633: PUSH
9634: LD_INT 0
9636: ST_TO_ADDR
// def_shared_vision := 1 ;
9637: LD_ADDR_EXP 47
9641: PUSH
9642: LD_INT 1
9644: ST_TO_ADDR
// def_morale_flags := 0 ;
9645: LD_ADDR_EXP 48
9649: PUSH
9650: LD_INT 0
9652: ST_TO_ADDR
// def_siberite_detection := 0 ;
9653: LD_ADDR_EXP 49
9657: PUSH
9658: LD_INT 0
9660: ST_TO_ADDR
// def_people_respawning := 1 ;
9661: LD_ADDR_EXP 50
9665: PUSH
9666: LD_INT 1
9668: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9669: LD_ADDR_EXP 51
9673: PUSH
9674: LD_INT 1
9676: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9677: LD_ADDR_EXP 52
9681: PUSH
9682: LD_INT 0
9684: ST_TO_ADDR
// def_builduptime := 0 ;
9685: LD_ADDR_EXP 53
9689: PUSH
9690: LD_INT 0
9692: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
9693: LD_ADDR_VAR 0 2
9697: PUSH
9698: LD_INT 10
9700: PUSH
9701: LD_INT 3
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
9708: LD_ADDR_VAR 0 3
9712: PUSH
9713: LD_INT 12
9715: PUSH
9716: LD_INT 11
9718: PUSH
9719: LD_INT 14
9721: PUSH
9722: LD_INT 13
9724: PUSH
9725: LD_INT 5
9727: PUSH
9728: LD_INT 24
9730: PUSH
9731: LD_INT 21
9733: PUSH
9734: LD_INT 33
9736: PUSH
9737: LD_INT 36
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
9751: LD_ADDR_LOC 21
9755: PUSH
9756: LD_INT 31
9758: PUSH
9759: EMPTY
9760: LIST
9761: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9762: LD_ADDR_LOC 22
9766: PUSH
9767: EMPTY
9768: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
9769: LD_ADDR_LOC 23
9773: PUSH
9774: LD_INT 2
9776: PUSH
9777: EMPTY
9778: LIST
9779: ST_TO_ADDR
// Banned_Engines := [ ] ;
9780: LD_ADDR_LOC 24
9784: PUSH
9785: EMPTY
9786: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
9787: LD_ADDR_LOC 19
9791: PUSH
9792: LD_INT 4
9794: PUSH
9795: EMPTY
9796: LIST
9797: PUSH
9798: LD_INT 31
9800: PUSH
9801: LD_INT 32
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
9812: LD_ADDR_LOC 20
9816: PUSH
9817: LD_INT 1
9819: PUSH
9820: LD_INT 1
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: ST_TO_ADDR
// end ; 6 :
9827: GO 10655
9829: LD_INT 6
9831: DOUBLE
9832: EQUAL
9833: IFTRUE 9837
9835: GO 10040
9837: POP
// begin def_base_level := 1 ;
9838: LD_ADDR_EXP 40
9842: PUSH
9843: LD_INT 1
9845: ST_TO_ADDR
// def_amount_of_people := 2 ;
9846: LD_ADDR_EXP 41
9850: PUSH
9851: LD_INT 2
9853: ST_TO_ADDR
// def_skill_level := 3 ;
9854: LD_ADDR_EXP 42
9858: PUSH
9859: LD_INT 3
9861: ST_TO_ADDR
// def_starting_resources := 3 ;
9862: LD_ADDR_EXP 43
9866: PUSH
9867: LD_INT 3
9869: ST_TO_ADDR
// def_shipments_density := 1 ;
9870: LD_ADDR_EXP 44
9874: PUSH
9875: LD_INT 1
9877: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9878: LD_ADDR_EXP 45
9882: PUSH
9883: LD_INT 0
9885: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9886: LD_ADDR_EXP 46
9890: PUSH
9891: LD_INT 1
9893: ST_TO_ADDR
// def_shared_vision := 1 ;
9894: LD_ADDR_EXP 47
9898: PUSH
9899: LD_INT 1
9901: ST_TO_ADDR
// def_morale_flags := 0 ;
9902: LD_ADDR_EXP 48
9906: PUSH
9907: LD_INT 0
9909: ST_TO_ADDR
// def_siberite_detection := 1 ;
9910: LD_ADDR_EXP 49
9914: PUSH
9915: LD_INT 1
9917: ST_TO_ADDR
// def_people_respawning := 2 ;
9918: LD_ADDR_EXP 50
9922: PUSH
9923: LD_INT 2
9925: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9926: LD_ADDR_EXP 51
9930: PUSH
9931: LD_INT 1
9933: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9934: LD_ADDR_EXP 52
9938: PUSH
9939: LD_INT 0
9941: ST_TO_ADDR
// def_builduptime := 1 ;
9942: LD_ADDR_EXP 53
9946: PUSH
9947: LD_INT 1
9949: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9950: LD_ADDR_VAR 0 2
9954: PUSH
9955: LD_INT 23
9957: PUSH
9958: EMPTY
9959: LIST
9960: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
9961: LD_ADDR_VAR 0 3
9965: PUSH
9966: LD_INT 2
9968: PUSH
9969: LD_INT 37
9971: PUSH
9972: LD_INT 31
9974: PUSH
9975: LD_INT 32
9977: PUSH
9978: LD_INT 33
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9988: LD_ADDR_LOC 21
9992: PUSH
9993: EMPTY
9994: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9995: LD_ADDR_LOC 22
9999: PUSH
10000: EMPTY
10001: ST_TO_ADDR
// Banned_Controls := [ ] ;
10002: LD_ADDR_LOC 23
10006: PUSH
10007: EMPTY
10008: ST_TO_ADDR
// Banned_Engines := [ ] ;
10009: LD_ADDR_LOC 24
10013: PUSH
10014: EMPTY
10015: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10016: LD_ADDR_LOC 19
10020: PUSH
10021: EMPTY
10022: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10023: LD_ADDR_LOC 20
10027: PUSH
10028: EMPTY
10029: ST_TO_ADDR
// No_Mechs := true ;
10030: LD_ADDR_EXP 54
10034: PUSH
10035: LD_INT 1
10037: ST_TO_ADDR
// end ; 7 :
10038: GO 10655
10040: LD_INT 7
10042: DOUBLE
10043: EQUAL
10044: IFTRUE 10048
10046: GO 10246
10048: POP
// begin def_base_level := 1 ;
10049: LD_ADDR_EXP 40
10053: PUSH
10054: LD_INT 1
10056: ST_TO_ADDR
// def_amount_of_people := 2 ;
10057: LD_ADDR_EXP 41
10061: PUSH
10062: LD_INT 2
10064: ST_TO_ADDR
// def_skill_level := 3 ;
10065: LD_ADDR_EXP 42
10069: PUSH
10070: LD_INT 3
10072: ST_TO_ADDR
// def_starting_resources := 3 ;
10073: LD_ADDR_EXP 43
10077: PUSH
10078: LD_INT 3
10080: ST_TO_ADDR
// def_shipments_density := 1 ;
10081: LD_ADDR_EXP 44
10085: PUSH
10086: LD_INT 1
10088: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10089: LD_ADDR_EXP 45
10093: PUSH
10094: LD_INT 1
10096: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10097: LD_ADDR_EXP 46
10101: PUSH
10102: LD_INT 2
10104: ST_TO_ADDR
// def_shared_vision := 1 ;
10105: LD_ADDR_EXP 47
10109: PUSH
10110: LD_INT 1
10112: ST_TO_ADDR
// def_morale_flags := 0 ;
10113: LD_ADDR_EXP 48
10117: PUSH
10118: LD_INT 0
10120: ST_TO_ADDR
// def_siberite_detection := 1 ;
10121: LD_ADDR_EXP 49
10125: PUSH
10126: LD_INT 1
10128: ST_TO_ADDR
// def_people_respawning := 0 ;
10129: LD_ADDR_EXP 50
10133: PUSH
10134: LD_INT 0
10136: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10137: LD_ADDR_EXP 51
10141: PUSH
10142: LD_INT 1
10144: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10145: LD_ADDR_EXP 52
10149: PUSH
10150: LD_INT 0
10152: ST_TO_ADDR
// def_builduptime := 3 ;
10153: LD_ADDR_EXP 53
10157: PUSH
10158: LD_INT 3
10160: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
10161: LD_ADDR_VAR 0 2
10165: PUSH
10166: LD_INT 23
10168: PUSH
10169: EMPTY
10170: LIST
10171: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
10172: LD_ADDR_VAR 0 3
10176: PUSH
10177: LD_INT 37
10179: PUSH
10180: EMPTY
10181: LIST
10182: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10183: LD_ADDR_LOC 21
10187: PUSH
10188: EMPTY
10189: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10190: LD_ADDR_LOC 22
10194: PUSH
10195: EMPTY
10196: ST_TO_ADDR
// Banned_Controls := [ ] ;
10197: LD_ADDR_LOC 23
10201: PUSH
10202: EMPTY
10203: ST_TO_ADDR
// Banned_Engines := [ ] ;
10204: LD_ADDR_LOC 24
10208: PUSH
10209: EMPTY
10210: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
10211: LD_ADDR_LOC 19
10215: PUSH
10216: LD_INT 31
10218: PUSH
10219: LD_INT 32
10221: PUSH
10222: LD_INT 33
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: LIST
10229: PUSH
10230: EMPTY
10231: LIST
10232: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
10233: LD_ADDR_LOC 20
10237: PUSH
10238: LD_INT 10
10240: PUSH
10241: EMPTY
10242: LIST
10243: ST_TO_ADDR
// end ; 8 :
10244: GO 10655
10246: LD_INT 8
10248: DOUBLE
10249: EQUAL
10250: IFTRUE 10254
10252: GO 10654
10254: POP
// begin def_base_level := 0 ;
10255: LD_ADDR_EXP 40
10259: PUSH
10260: LD_INT 0
10262: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
10263: LD_ADDR_EXP 41
10267: PUSH
10268: LD_INT 0
10270: PPUSH
10271: LD_INT 1
10273: PPUSH
10274: CALL_OW 12
10278: ST_TO_ADDR
// def_skill_level := 0 ;
10279: LD_ADDR_EXP 42
10283: PUSH
10284: LD_INT 0
10286: ST_TO_ADDR
// def_starting_resources := 2 ;
10287: LD_ADDR_EXP 43
10291: PUSH
10292: LD_INT 2
10294: ST_TO_ADDR
// def_shipments_density := 1 ;
10295: LD_ADDR_EXP 44
10299: PUSH
10300: LD_INT 1
10302: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10303: LD_ADDR_EXP 45
10307: PUSH
10308: LD_INT 0
10310: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
10311: LD_ADDR_EXP 46
10315: PUSH
10316: LD_INT 0
10318: ST_TO_ADDR
// def_shared_vision := 1 ;
10319: LD_ADDR_EXP 47
10323: PUSH
10324: LD_INT 1
10326: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
10327: LD_ADDR_EXP 48
10331: PUSH
10332: LD_INT 0
10334: PPUSH
10335: LD_INT 2
10337: PPUSH
10338: CALL_OW 12
10342: ST_TO_ADDR
// def_siberite_detection := 0 ;
10343: LD_ADDR_EXP 49
10347: PUSH
10348: LD_INT 0
10350: ST_TO_ADDR
// def_people_respawning := 0 ;
10351: LD_ADDR_EXP 50
10355: PUSH
10356: LD_INT 0
10358: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
10359: LD_ADDR_EXP 51
10363: PUSH
10364: LD_INT 2
10366: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10367: LD_ADDR_EXP 52
10371: PUSH
10372: LD_INT 0
10374: ST_TO_ADDR
// def_builduptime := 0 ;
10375: LD_ADDR_EXP 53
10379: PUSH
10380: LD_INT 0
10382: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
10383: LD_ADDR_VAR 0 2
10387: PUSH
10388: LD_INT 23
10390: PUSH
10391: LD_INT 20
10393: PUSH
10394: LD_INT 40
10396: PUSH
10397: LD_INT 47
10399: PUSH
10400: LD_INT 46
10402: PUSH
10403: LD_INT 39
10405: PUSH
10406: LD_INT 71
10408: PUSH
10409: LD_INT 34
10411: PUSH
10412: LD_INT 41
10414: PUSH
10415: LD_INT 44
10417: PUSH
10418: LD_INT 17
10420: PUSH
10421: LD_INT 16
10423: PUSH
10424: EMPTY
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
10438: LD_ADDR_VAR 0 3
10442: PUSH
10443: LD_INT 37
10445: PUSH
10446: LD_INT 5
10448: PUSH
10449: LD_INT 13
10451: PUSH
10452: LD_INT 34
10454: PUSH
10455: LD_INT 12
10457: PUSH
10458: LD_INT 15
10460: PUSH
10461: LD_INT 11
10463: PUSH
10464: LD_INT 14
10466: PUSH
10467: LD_INT 29
10469: PUSH
10470: LD_INT 30
10472: PUSH
10473: LD_INT 28
10475: PUSH
10476: LD_INT 24
10478: PUSH
10479: LD_INT 25
10481: PUSH
10482: LD_INT 20
10484: PUSH
10485: LD_INT 21
10487: PUSH
10488: LD_INT 22
10490: PUSH
10491: LD_INT 36
10493: PUSH
10494: EMPTY
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10513: LD_ADDR_LOC 21
10517: PUSH
10518: EMPTY
10519: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
10520: LD_ADDR_LOC 22
10524: PUSH
10525: LD_INT 14
10527: PUSH
10528: EMPTY
10529: LIST
10530: ST_TO_ADDR
// Banned_Controls := [ ] ;
10531: LD_ADDR_LOC 23
10535: PUSH
10536: EMPTY
10537: ST_TO_ADDR
// Banned_Engines := [ ] ;
10538: LD_ADDR_LOC 24
10542: PUSH
10543: EMPTY
10544: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
10545: LD_ADDR_LOC 19
10549: PUSH
10550: LD_INT 31
10552: PUSH
10553: LD_INT 32
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: PUSH
10560: LD_INT 4
10562: PUSH
10563: EMPTY
10564: LIST
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
10570: LD_ADDR_LOC 20
10574: PUSH
10575: LD_INT 2
10577: PUSH
10578: LD_INT 1
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: ST_TO_ADDR
// for i := 1 to 8 do
10585: LD_ADDR_VAR 0 4
10589: PUSH
10590: DOUBLE
10591: LD_INT 1
10593: DEC
10594: ST_TO_ADDR
10595: LD_INT 8
10597: PUSH
10598: FOR_TO
10599: IFFALSE 10650
// if ( Side_Nations [ i ] = 3 ) then
10601: LD_EXP 21
10605: PUSH
10606: LD_VAR 0 4
10610: ARRAY
10611: PUSH
10612: LD_INT 3
10614: EQUAL
10615: IFFALSE 10648
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
10617: LD_ADDR_EXP 21
10621: PUSH
10622: LD_EXP 21
10626: PPUSH
10627: LD_VAR 0 4
10631: PPUSH
10632: LD_INT 1
10634: PPUSH
10635: LD_INT 2
10637: PPUSH
10638: CALL_OW 12
10642: PPUSH
10643: CALL_OW 1
10647: ST_TO_ADDR
10648: GO 10598
10650: POP
10651: POP
// end ; end ;
10652: GO 10655
10654: POP
// for i := 1 to 8 do
10655: LD_ADDR_VAR 0 4
10659: PUSH
10660: DOUBLE
10661: LD_INT 1
10663: DEC
10664: ST_TO_ADDR
10665: LD_INT 8
10667: PUSH
10668: FOR_TO
10669: IFFALSE 10753
// if Side_Positions [ i ] then
10671: LD_EXP 20
10675: PUSH
10676: LD_VAR 0 4
10680: ARRAY
10681: IFFALSE 10751
// begin for j in Unavailable_Techs do
10683: LD_ADDR_VAR 0 5
10687: PUSH
10688: LD_VAR 0 2
10692: PUSH
10693: FOR_IN
10694: IFFALSE 10715
// SetTech ( j , i , 0 ) ;
10696: LD_VAR 0 5
10700: PPUSH
10701: LD_VAR 0 4
10705: PPUSH
10706: LD_INT 0
10708: PPUSH
10709: CALL_OW 322
10713: GO 10693
10715: POP
10716: POP
// for j in Unavailable_Builds do
10717: LD_ADDR_VAR 0 5
10721: PUSH
10722: LD_VAR 0 3
10726: PUSH
10727: FOR_IN
10728: IFFALSE 10749
// SetRestrict ( j , i , 0 ) ;
10730: LD_VAR 0 5
10734: PPUSH
10735: LD_VAR 0 4
10739: PPUSH
10740: LD_INT 0
10742: PPUSH
10743: CALL_OW 324
10747: GO 10727
10749: POP
10750: POP
// end ;
10751: GO 10668
10753: POP
10754: POP
// end ;
10755: LD_VAR 0 1
10759: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
10760: LD_INT 0
10762: PPUSH
10763: PPUSH
10764: PPUSH
10765: PPUSH
10766: PPUSH
10767: PPUSH
10768: PPUSH
// for i := 1 to Restricted_Builds do
10769: LD_ADDR_VAR 0 2
10773: PUSH
10774: DOUBLE
10775: LD_INT 1
10777: DEC
10778: ST_TO_ADDR
10779: LD_LOC 19
10783: PUSH
10784: FOR_TO
10785: IFFALSE 11095
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
10787: LD_LOC 19
10791: PUSH
10792: LD_VAR 0 2
10796: ARRAY
10797: PUSH
10798: LD_INT 1
10800: ARRAY
10801: PUSH
10802: LD_INT 31
10804: DOUBLE
10805: EQUAL
10806: IFTRUE 10822
10808: LD_INT 32
10810: DOUBLE
10811: EQUAL
10812: IFTRUE 10822
10814: LD_INT 33
10816: DOUBLE
10817: EQUAL
10818: IFTRUE 10822
10820: GO 10833
10822: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
10823: LD_ADDR_VAR 0 6
10827: PUSH
10828: LD_STRING #Turrets
10830: ST_TO_ADDR
10831: GO 10878
10833: LD_INT 4
10835: DOUBLE
10836: EQUAL
10837: IFTRUE 10847
10839: LD_INT 5
10841: DOUBLE
10842: EQUAL
10843: IFTRUE 10847
10845: GO 10858
10847: POP
// btype := #Armouries ; b_Behemoth :
10848: LD_ADDR_VAR 0 6
10852: PUSH
10853: LD_STRING #Armouries
10855: ST_TO_ADDR
10856: GO 10878
10858: LD_INT 37
10860: DOUBLE
10861: EQUAL
10862: IFTRUE 10866
10864: GO 10877
10866: POP
// btype := #Behemoths ; end ;
10867: LD_ADDR_VAR 0 6
10871: PUSH
10872: LD_STRING #Behemoths
10874: ST_TO_ADDR
10875: GO 10878
10877: POP
// list := [ ] ;
10878: LD_ADDR_VAR 0 7
10882: PUSH
10883: EMPTY
10884: ST_TO_ADDR
// for j := 1 to 8 do
10885: LD_ADDR_VAR 0 3
10889: PUSH
10890: DOUBLE
10891: LD_INT 1
10893: DEC
10894: ST_TO_ADDR
10895: LD_INT 8
10897: PUSH
10898: FOR_TO
10899: IFFALSE 10992
// if Side_Positions [ j ] then
10901: LD_EXP 20
10905: PUSH
10906: LD_VAR 0 3
10910: ARRAY
10911: IFFALSE 10990
// begin amount := 0 ;
10913: LD_ADDR_VAR 0 5
10917: PUSH
10918: LD_INT 0
10920: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
10921: LD_ADDR_VAR 0 4
10925: PUSH
10926: LD_LOC 19
10930: PUSH
10931: LD_VAR 0 2
10935: ARRAY
10936: PUSH
10937: FOR_IN
10938: IFFALSE 10986
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
10940: LD_ADDR_VAR 0 5
10944: PUSH
10945: LD_VAR 0 5
10949: PUSH
10950: LD_INT 22
10952: PUSH
10953: LD_VAR 0 3
10957: PUSH
10958: EMPTY
10959: LIST
10960: LIST
10961: PUSH
10962: LD_INT 30
10964: PUSH
10965: LD_VAR 0 4
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: PUSH
10974: EMPTY
10975: LIST
10976: LIST
10977: PPUSH
10978: CALL_OW 69
10982: PLUS
10983: ST_TO_ADDR
10984: GO 10937
10986: POP
10987: POP
// break ;
10988: GO 10992
// end ;
10990: GO 10898
10992: POP
10993: POP
// list := [ ] ;
10994: LD_ADDR_VAR 0 7
10998: PUSH
10999: EMPTY
11000: ST_TO_ADDR
// for j := 1 to 8 do
11001: LD_ADDR_VAR 0 3
11005: PUSH
11006: DOUBLE
11007: LD_INT 1
11009: DEC
11010: ST_TO_ADDR
11011: LD_INT 8
11013: PUSH
11014: FOR_TO
11015: IFFALSE 11035
// list := list ^ amount ;
11017: LD_ADDR_VAR 0 7
11021: PUSH
11022: LD_VAR 0 7
11026: PUSH
11027: LD_VAR 0 5
11031: ADD
11032: ST_TO_ADDR
11033: GO 11014
11035: POP
11036: POP
// Already_Built := Already_Built ^ [ list ] ;
11037: LD_ADDR_LOC 25
11041: PUSH
11042: LD_LOC 25
11046: PUSH
11047: LD_VAR 0 7
11051: PUSH
11052: EMPTY
11053: LIST
11054: ADD
11055: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
11056: LD_ADDR_LOC 26
11060: PUSH
11061: LD_LOC 26
11065: PUSH
11066: LD_VAR 0 6
11070: PUSH
11071: LD_VAR 0 5
11075: PUSH
11076: LD_LOC 20
11080: PUSH
11081: LD_VAR 0 2
11085: ARRAY
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: LIST
11091: ADD
11092: ST_TO_ADDR
// end ;
11093: GO 10784
11095: POP
11096: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
11097: LD_ADDR_LOC 27
11101: PUSH
11102: LD_INT 0
11104: PUSH
11105: LD_INT 0
11107: PUSH
11108: LD_INT 0
11110: PUSH
11111: LD_INT 0
11113: PUSH
11114: LD_INT 0
11116: PUSH
11117: LD_INT 0
11119: PUSH
11120: LD_INT 0
11122: PUSH
11123: LD_INT 0
11125: PUSH
11126: EMPTY
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: ST_TO_ADDR
// if Limits_Info then
11136: LD_LOC 26
11140: IFFALSE 11156
// Limits_Info := #Limits ^ Limits_Info ;
11142: LD_ADDR_LOC 26
11146: PUSH
11147: LD_STRING #Limits
11149: PUSH
11150: LD_LOC 26
11154: ADD
11155: ST_TO_ADDR
// end ;
11156: LD_VAR 0 1
11160: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
11161: LD_INT 0
11163: PPUSH
11164: PPUSH
11165: PPUSH
11166: PPUSH
// for i := 1 to Restricted_Builds do
11167: LD_ADDR_VAR 0 7
11171: PUSH
11172: DOUBLE
11173: LD_INT 1
11175: DEC
11176: ST_TO_ADDR
11177: LD_LOC 19
11181: PUSH
11182: FOR_TO
11183: IFFALSE 11606
// if BType in Restricted_Builds [ i ] then
11185: LD_VAR 0 2
11189: PUSH
11190: LD_LOC 19
11194: PUSH
11195: LD_VAR 0 7
11199: ARRAY
11200: IN
11201: IFFALSE 11604
// begin if old_side then
11203: LD_VAR 0 4
11207: IFFALSE 11333
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
11209: LD_LOC 25
11213: PUSH
11214: LD_VAR 0 7
11218: ARRAY
11219: PUSH
11220: LD_VAR 0 3
11224: ARRAY
11225: PUSH
11226: LD_VAR 0 5
11230: PLUS
11231: PUSH
11232: LD_LOC 20
11236: PUSH
11237: LD_VAR 0 7
11241: ARRAY
11242: GREATER
11243: IFFALSE 11269
// begin SetSide ( un , old_side ) ;
11245: LD_VAR 0 1
11249: PPUSH
11250: LD_VAR 0 4
11254: PPUSH
11255: CALL_OW 235
// count := 0 ;
11259: LD_ADDR_VAR 0 5
11263: PUSH
11264: LD_INT 0
11266: ST_TO_ADDR
// end else
11267: GO 11333
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
11269: LD_ADDR_LOC 25
11273: PUSH
11274: LD_LOC 25
11278: PPUSH
11279: LD_VAR 0 7
11283: PPUSH
11284: LD_LOC 25
11288: PUSH
11289: LD_VAR 0 7
11293: ARRAY
11294: PPUSH
11295: LD_VAR 0 4
11299: PPUSH
11300: LD_LOC 25
11304: PUSH
11305: LD_VAR 0 7
11309: ARRAY
11310: PUSH
11311: LD_VAR 0 4
11315: ARRAY
11316: PUSH
11317: LD_VAR 0 5
11321: MINUS
11322: PPUSH
11323: CALL_OW 1
11327: PPUSH
11328: CALL_OW 1
11332: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
11333: LD_ADDR_LOC 25
11337: PUSH
11338: LD_LOC 25
11342: PPUSH
11343: LD_VAR 0 7
11347: PPUSH
11348: LD_LOC 25
11352: PUSH
11353: LD_VAR 0 7
11357: ARRAY
11358: PPUSH
11359: LD_VAR 0 3
11363: PPUSH
11364: LD_LOC 25
11368: PUSH
11369: LD_VAR 0 7
11373: ARRAY
11374: PUSH
11375: LD_VAR 0 3
11379: ARRAY
11380: PUSH
11381: LD_VAR 0 5
11385: PLUS
11386: PPUSH
11387: CALL_OW 1
11391: PPUSH
11392: CALL_OW 1
11396: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
11397: LD_VAR 0 5
11401: PUSH
11402: LD_INT 0
11404: NONEQUAL
11405: PUSH
11406: LD_VAR 0 3
11410: PUSH
11411: LD_OWVAR 2
11415: EQUAL
11416: AND
11417: IFFALSE 11460
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
11419: LD_ADDR_LOC 26
11423: PUSH
11424: LD_LOC 26
11428: PPUSH
11429: LD_INT 3
11431: PUSH
11432: LD_VAR 0 7
11436: MUL
11437: PPUSH
11438: LD_LOC 25
11442: PUSH
11443: LD_VAR 0 7
11447: ARRAY
11448: PUSH
11449: LD_VAR 0 3
11453: ARRAY
11454: PPUSH
11455: CALL_OW 1
11459: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
11460: LD_LOC 25
11464: PUSH
11465: LD_VAR 0 7
11469: ARRAY
11470: PUSH
11471: LD_VAR 0 3
11475: ARRAY
11476: PUSH
11477: LD_LOC 20
11481: PUSH
11482: LD_VAR 0 7
11486: ARRAY
11487: GREATER
11488: IFFALSE 11515
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
11490: LD_ADDR_LOC 27
11494: PUSH
11495: LD_LOC 27
11499: PPUSH
11500: LD_VAR 0 3
11504: PPUSH
11505: LD_INT 1
11507: PPUSH
11508: CALL_OW 1
11512: ST_TO_ADDR
// end else
11513: GO 11602
// begin for j := 1 to Restricted_Builds do
11515: LD_ADDR_VAR 0 8
11519: PUSH
11520: DOUBLE
11521: LD_INT 1
11523: DEC
11524: ST_TO_ADDR
11525: LD_LOC 19
11529: PUSH
11530: FOR_TO
11531: IFFALSE 11575
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
11533: LD_LOC 25
11537: PUSH
11538: LD_VAR 0 8
11542: ARRAY
11543: PUSH
11544: LD_VAR 0 3
11548: ARRAY
11549: PUSH
11550: LD_LOC 20
11554: PUSH
11555: LD_VAR 0 8
11559: ARRAY
11560: GREATER
11561: IFFALSE 11573
// begin Is_Cheater := true ;
11563: LD_ADDR_VAR 0 9
11567: PUSH
11568: LD_INT 1
11570: ST_TO_ADDR
// break ;
11571: GO 11575
// end ;
11573: GO 11530
11575: POP
11576: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
11577: LD_ADDR_LOC 27
11581: PUSH
11582: LD_LOC 27
11586: PPUSH
11587: LD_VAR 0 3
11591: PPUSH
11592: LD_VAR 0 9
11596: PPUSH
11597: CALL_OW 1
11601: ST_TO_ADDR
// end ; break ;
11602: GO 11606
// end ;
11604: GO 11182
11606: POP
11607: POP
// end ;
11608: LD_VAR 0 6
11612: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
11613: LD_VAR 0 5
11617: PUSH
11618: LD_LOC 21
11622: IN
11623: PUSH
11624: LD_VAR 0 2
11628: PUSH
11629: LD_LOC 22
11633: IN
11634: OR
11635: PUSH
11636: LD_VAR 0 4
11640: PUSH
11641: LD_LOC 23
11645: IN
11646: OR
11647: PUSH
11648: LD_VAR 0 3
11652: PUSH
11653: LD_LOC 24
11657: IN
11658: OR
11659: IFFALSE 11670
// ComCancel ( factory ) ;
11661: LD_VAR 0 1
11665: PPUSH
11666: CALL_OW 127
// end ;
11670: PPOPN 5
11672: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
11673: LD_VAR 0 2
11677: PUSH
11678: LD_LOC 21
11682: IN
11683: IFFALSE 11694
// ComCancel ( building ) ;
11685: LD_VAR 0 1
11689: PPUSH
11690: CALL_OW 127
// end ; end_of_file
11694: PPOPN 2
11696: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
11697: LD_INT 0
11699: PPUSH
11700: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
11701: LD_ADDR_VAR 0 2
11705: PUSH
11706: LD_STRING #Multi1x1-Time
11708: PUSH
11709: LD_OWVAR 1
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: ST_TO_ADDR
// if WaitServerStrings then
11718: LD_EXP 56
11722: IFFALSE 11740
// AllStrings = AllStrings ^ WaitServerStrings ;
11724: LD_ADDR_VAR 0 2
11728: PUSH
11729: LD_VAR 0 2
11733: PUSH
11734: LD_EXP 56
11738: ADD
11739: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
11740: LD_INT 0
11742: PUSH
11743: LD_EXP 12
11747: PUSH
11748: LD_OWVAR 1
11752: MINUS
11753: LESSEQUAL
11754: IFFALSE 11785
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
11756: LD_ADDR_VAR 0 2
11760: PUSH
11761: LD_VAR 0 2
11765: PUSH
11766: LD_STRING #allowedsibbomb
11768: PUSH
11769: LD_EXP 12
11773: PUSH
11774: LD_OWVAR 1
11778: MINUS
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: ADD
11784: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
11785: LD_INT 0
11787: PUSH
11788: LD_EXP 16
11792: PUSH
11793: LD_OWVAR 1
11797: MINUS
11798: LESSEQUAL
11799: IFFALSE 11830
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
11801: LD_ADDR_VAR 0 2
11805: PUSH
11806: LD_VAR 0 2
11810: PUSH
11811: LD_STRING #builduptime
11813: PUSH
11814: LD_EXP 16
11818: PUSH
11819: LD_OWVAR 1
11823: MINUS
11824: PUSH
11825: EMPTY
11826: LIST
11827: LIST
11828: ADD
11829: ST_TO_ADDR
// if ( ExtraStrings ) then
11830: LD_EXP 55
11834: IFFALSE 11856
// AllStrings := AllStrings ^  ^ ExtraStrings ;
11836: LD_ADDR_VAR 0 2
11840: PUSH
11841: LD_VAR 0 2
11845: PUSH
11846: LD_STRING 
11848: ADD
11849: PUSH
11850: LD_EXP 55
11854: ADD
11855: ST_TO_ADDR
// if ( LimitsStrings ) then
11856: CALL 8537 0 0
11860: IFFALSE 11882
// AllStrings := AllStrings ^  ^ LimitsStrings ;
11862: LD_ADDR_VAR 0 2
11866: PUSH
11867: LD_VAR 0 2
11871: PUSH
11872: LD_STRING 
11874: ADD
11875: PUSH
11876: CALL 8537 0 0
11880: ADD
11881: ST_TO_ADDR
// Display_Strings := AllStrings ;
11882: LD_ADDR_OWVAR 47
11886: PUSH
11887: LD_VAR 0 2
11891: ST_TO_ADDR
// end ;
11892: LD_VAR 0 1
11896: RET
// every 0 0$1 do
11897: GO 11899
11899: DISABLE
// begin ShowTimer ;
11900: CALL 11697 0 0
// enable ;
11904: ENABLE
// end ; end_of_file
11905: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
11906: LD_INT 0
11908: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
11909: LD_VAR 0 1
11913: PPUSH
11914: CALL_OW 255
11918: PUSH
11919: LD_VAR 0 4
11923: EQUAL
11924: IFFALSE 11943
// begin SetAchievement ( ACH_RAD ) ;
11926: LD_STRING ACH_RAD
11928: PPUSH
11929: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
11933: LD_STRING ACH_NL
11935: PPUSH
11936: LD_INT 1
11938: PPUSH
11939: CALL_OW 564
// end end ;
11943: LD_VAR 0 5
11947: RET
// export function SA_Win ( side ) ; begin
11948: LD_INT 0
11950: PPUSH
// case side of 1 :
11951: LD_VAR 0 1
11955: PUSH
11956: LD_INT 1
11958: DOUBLE
11959: EQUAL
11960: IFTRUE 11964
11962: GO 11977
11964: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
11965: LD_STRING ACH_AH
11967: PPUSH
11968: LD_INT 1
11970: PPUSH
11971: CALL_OW 564
11975: GO 12140
11977: LD_INT 2
11979: DOUBLE
11980: EQUAL
11981: IFTRUE 11985
11983: GO 11998
11985: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
11986: LD_STRING ACH_E
11988: PPUSH
11989: LD_INT 1
11991: PPUSH
11992: CALL_OW 564
11996: GO 12140
11998: LD_INT 3
12000: DOUBLE
12001: EQUAL
12002: IFTRUE 12006
12004: GO 12019
12006: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
12007: LD_STRING ACH_OOL
12009: PPUSH
12010: LD_INT 1
12012: PPUSH
12013: CALL_OW 564
12017: GO 12140
12019: LD_INT 1
12021: PUSH
12022: LD_INT 2
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: DOUBLE
12029: EQUAL
12030: IFTRUE 12034
12032: GO 12059
12034: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12035: LD_STRING ACH_AH
12037: PPUSH
12038: LD_REAL  5.00000000000000E-0001
12041: PPUSH
12042: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
12046: LD_STRING ACH_E
12048: PPUSH
12049: LD_REAL  5.00000000000000E-0001
12052: PPUSH
12053: CALL_OW 564
// end ; [ 2 , 3 ] :
12057: GO 12140
12059: LD_INT 2
12061: PUSH
12062: LD_INT 3
12064: PUSH
12065: EMPTY
12066: LIST
12067: LIST
12068: DOUBLE
12069: EQUAL
12070: IFTRUE 12074
12072: GO 12099
12074: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
12075: LD_STRING ACH_OOL
12077: PPUSH
12078: LD_REAL  5.00000000000000E-0001
12081: PPUSH
12082: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
12086: LD_STRING ACH_E
12088: PPUSH
12089: LD_REAL  5.00000000000000E-0001
12092: PPUSH
12093: CALL_OW 564
// end ; [ 3 , 1 ] :
12097: GO 12140
12099: LD_INT 3
12101: PUSH
12102: LD_INT 1
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: DOUBLE
12109: EQUAL
12110: IFTRUE 12114
12112: GO 12139
12114: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12115: LD_STRING ACH_AH
12117: PPUSH
12118: LD_REAL  5.00000000000000E-0001
12121: PPUSH
12122: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
12126: LD_STRING ACH_OOL
12128: PPUSH
12129: LD_REAL  5.00000000000000E-0001
12132: PPUSH
12133: CALL_OW 564
// end ; end ;
12137: GO 12140
12139: POP
// end ; end_of_file
12140: LD_VAR 0 2
12144: RET
// export function SetMpTechs ( ) ; var side , i ; begin
12145: LD_INT 0
12147: PPUSH
12148: PPUSH
12149: PPUSH
// for side = 1 to 8 do
12150: LD_ADDR_VAR 0 2
12154: PUSH
12155: DOUBLE
12156: LD_INT 1
12158: DEC
12159: ST_TO_ADDR
12160: LD_INT 8
12162: PUSH
12163: FOR_TO
12164: IFFALSE 12285
// begin for i = 1 to 72 do
12166: LD_ADDR_VAR 0 3
12170: PUSH
12171: DOUBLE
12172: LD_INT 1
12174: DEC
12175: ST_TO_ADDR
12176: LD_INT 72
12178: PUSH
12179: FOR_TO
12180: IFFALSE 12211
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
12182: LD_VAR 0 3
12186: PPUSH
12187: LD_VAR 0 2
12191: PPUSH
12192: LD_INT 0
12194: PPUSH
12195: LD_VAR 0 3
12199: PPUSH
12200: CALL_OW 565
12204: PPUSH
12205: CALL_OW 322
12209: GO 12179
12211: POP
12212: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
12213: LD_INT 73
12215: PPUSH
12216: LD_VAR 0 2
12220: PPUSH
12221: LD_INT 0
12223: PPUSH
12224: LD_INT 25
12226: PPUSH
12227: CALL_OW 565
12231: PPUSH
12232: CALL_OW 322
// for i = 0 to 40 do
12236: LD_ADDR_VAR 0 3
12240: PUSH
12241: DOUBLE
12242: LD_INT 0
12244: DEC
12245: ST_TO_ADDR
12246: LD_INT 40
12248: PUSH
12249: FOR_TO
12250: IFFALSE 12281
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
12252: LD_VAR 0 3
12256: PPUSH
12257: LD_VAR 0 2
12261: PPUSH
12262: LD_INT 1
12264: PPUSH
12265: LD_VAR 0 3
12269: PPUSH
12270: CALL_OW 565
12274: PPUSH
12275: CALL_OW 324
12279: GO 12249
12281: POP
12282: POP
// end ;
12283: GO 12163
12285: POP
12286: POP
// end ;
12287: LD_VAR 0 1
12291: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
12292: LD_INT 0
12294: PPUSH
12295: PPUSH
12296: PPUSH
// for side = 1 to 8 do
12297: LD_ADDR_VAR 0 3
12301: PUSH
12302: DOUBLE
12303: LD_INT 1
12305: DEC
12306: ST_TO_ADDR
12307: LD_INT 8
12309: PUSH
12310: FOR_TO
12311: IFFALSE 16307
// begin for i = 1 to 73 do
12313: LD_ADDR_VAR 0 4
12317: PUSH
12318: DOUBLE
12319: LD_INT 1
12321: DEC
12322: ST_TO_ADDR
12323: LD_INT 73
12325: PUSH
12326: FOR_TO
12327: IFFALSE 12348
// SetTech ( i , side , state_disabled ) ;
12329: LD_VAR 0 4
12333: PPUSH
12334: LD_VAR 0 3
12338: PPUSH
12339: LD_INT 0
12341: PPUSH
12342: CALL_OW 322
12346: GO 12326
12348: POP
12349: POP
// for i = 0 to 40 do
12350: LD_ADDR_VAR 0 4
12354: PUSH
12355: DOUBLE
12356: LD_INT 0
12358: DEC
12359: ST_TO_ADDR
12360: LD_INT 40
12362: PUSH
12363: FOR_TO
12364: IFFALSE 12385
// SetRestrict ( i , side , false ) ;
12366: LD_VAR 0 4
12370: PPUSH
12371: LD_VAR 0 3
12375: PPUSH
12376: LD_INT 0
12378: PPUSH
12379: CALL_OW 324
12383: GO 12363
12385: POP
12386: POP
// case level of 1 :
12387: LD_VAR 0 1
12391: PUSH
12392: LD_INT 1
12394: DOUBLE
12395: EQUAL
12396: IFTRUE 12400
12398: GO 12553
12400: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12401: LD_INT 35
12403: PPUSH
12404: LD_VAR 0 3
12408: PPUSH
12409: LD_INT 1
12411: PPUSH
12412: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12416: LD_INT 45
12418: PPUSH
12419: LD_VAR 0 3
12423: PPUSH
12424: LD_INT 1
12426: PPUSH
12427: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12431: LD_INT 46
12433: PPUSH
12434: LD_VAR 0 3
12438: PPUSH
12439: LD_INT 1
12441: PPUSH
12442: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12446: LD_INT 47
12448: PPUSH
12449: LD_VAR 0 3
12453: PPUSH
12454: LD_INT 1
12456: PPUSH
12457: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12461: LD_INT 0
12463: PPUSH
12464: LD_VAR 0 3
12468: PPUSH
12469: LD_INT 1
12471: PPUSH
12472: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12476: LD_INT 2
12478: PPUSH
12479: LD_VAR 0 3
12483: PPUSH
12484: LD_INT 1
12486: PPUSH
12487: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12491: LD_INT 4
12493: PPUSH
12494: LD_VAR 0 3
12498: PPUSH
12499: LD_INT 1
12501: PPUSH
12502: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12506: LD_INT 6
12508: PPUSH
12509: LD_VAR 0 3
12513: PPUSH
12514: LD_INT 1
12516: PPUSH
12517: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12521: LD_INT 29
12523: PPUSH
12524: LD_VAR 0 3
12528: PPUSH
12529: LD_INT 1
12531: PPUSH
12532: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12536: LD_INT 31
12538: PPUSH
12539: LD_VAR 0 3
12543: PPUSH
12544: LD_INT 1
12546: PPUSH
12547: CALL_OW 324
// end ; 2 :
12551: GO 16305
12553: LD_INT 2
12555: DOUBLE
12556: EQUAL
12557: IFTRUE 12561
12559: GO 12759
12561: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12562: LD_INT 35
12564: PPUSH
12565: LD_VAR 0 3
12569: PPUSH
12570: LD_INT 1
12572: PPUSH
12573: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12577: LD_INT 45
12579: PPUSH
12580: LD_VAR 0 3
12584: PPUSH
12585: LD_INT 1
12587: PPUSH
12588: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12592: LD_INT 46
12594: PPUSH
12595: LD_VAR 0 3
12599: PPUSH
12600: LD_INT 1
12602: PPUSH
12603: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12607: LD_INT 47
12609: PPUSH
12610: LD_VAR 0 3
12614: PPUSH
12615: LD_INT 1
12617: PPUSH
12618: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12622: LD_INT 1
12624: PPUSH
12625: LD_VAR 0 3
12629: PPUSH
12630: LD_INT 1
12632: PPUSH
12633: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12637: LD_INT 2
12639: PPUSH
12640: LD_VAR 0 3
12644: PPUSH
12645: LD_INT 1
12647: PPUSH
12648: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12652: LD_INT 11
12654: PPUSH
12655: LD_VAR 0 3
12659: PPUSH
12660: LD_INT 1
12662: PPUSH
12663: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12667: LD_INT 0
12669: PPUSH
12670: LD_VAR 0 3
12674: PPUSH
12675: LD_INT 1
12677: PPUSH
12678: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12682: LD_INT 2
12684: PPUSH
12685: LD_VAR 0 3
12689: PPUSH
12690: LD_INT 1
12692: PPUSH
12693: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12697: LD_INT 4
12699: PPUSH
12700: LD_VAR 0 3
12704: PPUSH
12705: LD_INT 1
12707: PPUSH
12708: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12712: LD_INT 6
12714: PPUSH
12715: LD_VAR 0 3
12719: PPUSH
12720: LD_INT 1
12722: PPUSH
12723: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12727: LD_INT 29
12729: PPUSH
12730: LD_VAR 0 3
12734: PPUSH
12735: LD_INT 1
12737: PPUSH
12738: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12742: LD_INT 31
12744: PPUSH
12745: LD_VAR 0 3
12749: PPUSH
12750: LD_INT 1
12752: PPUSH
12753: CALL_OW 324
// end ; 3 :
12757: GO 16305
12759: LD_INT 3
12761: DOUBLE
12762: EQUAL
12763: IFTRUE 12767
12765: GO 13220
12767: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12768: LD_INT 35
12770: PPUSH
12771: LD_VAR 0 3
12775: PPUSH
12776: LD_INT 1
12778: PPUSH
12779: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12783: LD_INT 45
12785: PPUSH
12786: LD_VAR 0 3
12790: PPUSH
12791: LD_INT 1
12793: PPUSH
12794: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12798: LD_INT 46
12800: PPUSH
12801: LD_VAR 0 3
12805: PPUSH
12806: LD_INT 1
12808: PPUSH
12809: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12813: LD_INT 47
12815: PPUSH
12816: LD_VAR 0 3
12820: PPUSH
12821: LD_INT 1
12823: PPUSH
12824: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12828: LD_INT 1
12830: PPUSH
12831: LD_VAR 0 3
12835: PPUSH
12836: LD_INT 1
12838: PPUSH
12839: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12843: LD_INT 2
12845: PPUSH
12846: LD_VAR 0 3
12850: PPUSH
12851: LD_INT 1
12853: PPUSH
12854: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12858: LD_INT 11
12860: PPUSH
12861: LD_VAR 0 3
12865: PPUSH
12866: LD_INT 1
12868: PPUSH
12869: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12873: LD_INT 48
12875: PPUSH
12876: LD_VAR 0 3
12880: PPUSH
12881: LD_INT 1
12883: PPUSH
12884: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12888: LD_INT 69
12890: PPUSH
12891: LD_VAR 0 3
12895: PPUSH
12896: LD_INT 1
12898: PPUSH
12899: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12903: LD_INT 39
12905: PPUSH
12906: LD_VAR 0 3
12910: PPUSH
12911: LD_INT 1
12913: PPUSH
12914: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12918: LD_INT 43
12920: PPUSH
12921: LD_VAR 0 3
12925: PPUSH
12926: LD_INT 1
12928: PPUSH
12929: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12933: LD_INT 51
12935: PPUSH
12936: LD_VAR 0 3
12940: PPUSH
12941: LD_INT 1
12943: PPUSH
12944: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12948: LD_INT 6
12950: PPUSH
12951: LD_VAR 0 3
12955: PPUSH
12956: LD_INT 1
12958: PPUSH
12959: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12963: LD_INT 0
12965: PPUSH
12966: LD_VAR 0 3
12970: PPUSH
12971: LD_INT 1
12973: PPUSH
12974: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12978: LD_INT 2
12980: PPUSH
12981: LD_VAR 0 3
12985: PPUSH
12986: LD_INT 1
12988: PPUSH
12989: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12993: LD_INT 3
12995: PPUSH
12996: LD_VAR 0 3
13000: PPUSH
13001: LD_INT 1
13003: PPUSH
13004: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13008: LD_INT 4
13010: PPUSH
13011: LD_VAR 0 3
13015: PPUSH
13016: LD_INT 1
13018: PPUSH
13019: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13023: LD_INT 6
13025: PPUSH
13026: LD_VAR 0 3
13030: PPUSH
13031: LD_INT 1
13033: PPUSH
13034: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13038: LD_INT 7
13040: PPUSH
13041: LD_VAR 0 3
13045: PPUSH
13046: LD_INT 1
13048: PPUSH
13049: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13053: LD_INT 8
13055: PPUSH
13056: LD_VAR 0 3
13060: PPUSH
13061: LD_INT 1
13063: PPUSH
13064: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13068: LD_INT 10
13070: PPUSH
13071: LD_VAR 0 3
13075: PPUSH
13076: LD_INT 1
13078: PPUSH
13079: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13083: LD_INT 15
13085: PPUSH
13086: LD_VAR 0 3
13090: PPUSH
13091: LD_INT 1
13093: PPUSH
13094: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13098: LD_INT 16
13100: PPUSH
13101: LD_VAR 0 3
13105: PPUSH
13106: LD_INT 1
13108: PPUSH
13109: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13113: LD_INT 17
13115: PPUSH
13116: LD_VAR 0 3
13120: PPUSH
13121: LD_INT 1
13123: PPUSH
13124: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13128: LD_INT 20
13130: PPUSH
13131: LD_VAR 0 3
13135: PPUSH
13136: LD_INT 1
13138: PPUSH
13139: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13143: LD_INT 26
13145: PPUSH
13146: LD_VAR 0 3
13150: PPUSH
13151: LD_INT 1
13153: PPUSH
13154: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13158: LD_INT 27
13160: PPUSH
13161: LD_VAR 0 3
13165: PPUSH
13166: LD_INT 1
13168: PPUSH
13169: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13173: LD_INT 29
13175: PPUSH
13176: LD_VAR 0 3
13180: PPUSH
13181: LD_INT 1
13183: PPUSH
13184: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13188: LD_INT 31
13190: PPUSH
13191: LD_VAR 0 3
13195: PPUSH
13196: LD_INT 1
13198: PPUSH
13199: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13203: LD_INT 32
13205: PPUSH
13206: LD_VAR 0 3
13210: PPUSH
13211: LD_INT 1
13213: PPUSH
13214: CALL_OW 324
// end ; 4 :
13218: GO 16305
13220: LD_INT 4
13222: DOUBLE
13223: EQUAL
13224: IFTRUE 13228
13226: GO 14176
13228: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13229: LD_INT 35
13231: PPUSH
13232: LD_VAR 0 3
13236: PPUSH
13237: LD_INT 1
13239: PPUSH
13240: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13244: LD_INT 45
13246: PPUSH
13247: LD_VAR 0 3
13251: PPUSH
13252: LD_INT 1
13254: PPUSH
13255: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13259: LD_INT 46
13261: PPUSH
13262: LD_VAR 0 3
13266: PPUSH
13267: LD_INT 1
13269: PPUSH
13270: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13274: LD_INT 47
13276: PPUSH
13277: LD_VAR 0 3
13281: PPUSH
13282: LD_INT 1
13284: PPUSH
13285: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13289: LD_INT 1
13291: PPUSH
13292: LD_VAR 0 3
13296: PPUSH
13297: LD_INT 1
13299: PPUSH
13300: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13304: LD_INT 2
13306: PPUSH
13307: LD_VAR 0 3
13311: PPUSH
13312: LD_INT 1
13314: PPUSH
13315: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13319: LD_INT 11
13321: PPUSH
13322: LD_VAR 0 3
13326: PPUSH
13327: LD_INT 1
13329: PPUSH
13330: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13334: LD_INT 20
13336: PPUSH
13337: LD_VAR 0 3
13341: PPUSH
13342: LD_INT 1
13344: PPUSH
13345: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13349: LD_INT 48
13351: PPUSH
13352: LD_VAR 0 3
13356: PPUSH
13357: LD_INT 1
13359: PPUSH
13360: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13364: LD_INT 49
13366: PPUSH
13367: LD_VAR 0 3
13371: PPUSH
13372: LD_INT 1
13374: PPUSH
13375: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13379: LD_INT 69
13381: PPUSH
13382: LD_VAR 0 3
13386: PPUSH
13387: LD_INT 1
13389: PPUSH
13390: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13394: LD_INT 39
13396: PPUSH
13397: LD_VAR 0 3
13401: PPUSH
13402: LD_INT 1
13404: PPUSH
13405: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13409: LD_INT 34
13411: PPUSH
13412: LD_VAR 0 3
13416: PPUSH
13417: LD_INT 1
13419: PPUSH
13420: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13424: LD_INT 42
13426: PPUSH
13427: LD_VAR 0 3
13431: PPUSH
13432: LD_INT 1
13434: PPUSH
13435: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13439: LD_INT 44
13441: PPUSH
13442: LD_VAR 0 3
13446: PPUSH
13447: LD_INT 1
13449: PPUSH
13450: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13454: LD_INT 41
13456: PPUSH
13457: LD_VAR 0 3
13461: PPUSH
13462: LD_INT 1
13464: PPUSH
13465: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13469: LD_INT 43
13471: PPUSH
13472: LD_VAR 0 3
13476: PPUSH
13477: LD_INT 1
13479: PPUSH
13480: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13484: LD_INT 70
13486: PPUSH
13487: LD_VAR 0 3
13491: PPUSH
13492: LD_INT 1
13494: PPUSH
13495: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13499: LD_INT 51
13501: PPUSH
13502: LD_VAR 0 3
13506: PPUSH
13507: LD_INT 1
13509: PPUSH
13510: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13514: LD_INT 52
13516: PPUSH
13517: LD_VAR 0 3
13521: PPUSH
13522: LD_INT 1
13524: PPUSH
13525: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13529: LD_INT 6
13531: PPUSH
13532: LD_VAR 0 3
13536: PPUSH
13537: LD_INT 1
13539: PPUSH
13540: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13544: LD_INT 15
13546: PPUSH
13547: LD_VAR 0 3
13551: PPUSH
13552: LD_INT 1
13554: PPUSH
13555: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13559: LD_INT 7
13561: PPUSH
13562: LD_VAR 0 3
13566: PPUSH
13567: LD_INT 1
13569: PPUSH
13570: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13574: LD_INT 12
13576: PPUSH
13577: LD_VAR 0 3
13581: PPUSH
13582: LD_INT 1
13584: PPUSH
13585: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13589: LD_INT 18
13591: PPUSH
13592: LD_VAR 0 3
13596: PPUSH
13597: LD_INT 1
13599: PPUSH
13600: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13604: LD_INT 60
13606: PPUSH
13607: LD_VAR 0 3
13611: PPUSH
13612: LD_INT 1
13614: PPUSH
13615: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13619: LD_INT 9
13621: PPUSH
13622: LD_VAR 0 3
13626: PPUSH
13627: LD_INT 1
13629: PPUSH
13630: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13634: LD_INT 30
13636: PPUSH
13637: LD_VAR 0 3
13641: PPUSH
13642: LD_INT 1
13644: PPUSH
13645: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13649: LD_INT 37
13651: PPUSH
13652: LD_VAR 0 3
13656: PPUSH
13657: LD_INT 1
13659: PPUSH
13660: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13664: LD_INT 5
13666: PPUSH
13667: LD_VAR 0 3
13671: PPUSH
13672: LD_INT 1
13674: PPUSH
13675: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13679: LD_INT 66
13681: PPUSH
13682: LD_VAR 0 3
13686: PPUSH
13687: LD_INT 1
13689: PPUSH
13690: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13694: LD_INT 21
13696: PPUSH
13697: LD_VAR 0 3
13701: PPUSH
13702: LD_INT 1
13704: PPUSH
13705: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13709: LD_INT 22
13711: PPUSH
13712: LD_VAR 0 3
13716: PPUSH
13717: LD_INT 1
13719: PPUSH
13720: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13724: LD_INT 54
13726: PPUSH
13727: LD_VAR 0 3
13731: PPUSH
13732: LD_INT 1
13734: PPUSH
13735: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13739: LD_INT 0
13741: PPUSH
13742: LD_VAR 0 3
13746: PPUSH
13747: LD_INT 1
13749: PPUSH
13750: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
13754: LD_INT 1
13756: PPUSH
13757: LD_VAR 0 3
13761: PPUSH
13762: LD_INT 1
13764: PPUSH
13765: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13769: LD_INT 2
13771: PPUSH
13772: LD_VAR 0 3
13776: PPUSH
13777: LD_INT 1
13779: PPUSH
13780: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
13784: LD_INT 3
13786: PPUSH
13787: LD_VAR 0 3
13791: PPUSH
13792: LD_INT 1
13794: PPUSH
13795: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13799: LD_INT 4
13801: PPUSH
13802: LD_VAR 0 3
13806: PPUSH
13807: LD_INT 1
13809: PPUSH
13810: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
13814: LD_INT 5
13816: PPUSH
13817: LD_VAR 0 3
13821: PPUSH
13822: LD_INT 1
13824: PPUSH
13825: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13829: LD_INT 6
13831: PPUSH
13832: LD_VAR 0 3
13836: PPUSH
13837: LD_INT 1
13839: PPUSH
13840: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13844: LD_INT 7
13846: PPUSH
13847: LD_VAR 0 3
13851: PPUSH
13852: LD_INT 1
13854: PPUSH
13855: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13859: LD_INT 8
13861: PPUSH
13862: LD_VAR 0 3
13866: PPUSH
13867: LD_INT 1
13869: PPUSH
13870: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13874: LD_INT 10
13876: PPUSH
13877: LD_VAR 0 3
13881: PPUSH
13882: LD_INT 1
13884: PPUSH
13885: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
13889: LD_INT 11
13891: PPUSH
13892: LD_VAR 0 3
13896: PPUSH
13897: LD_INT 1
13899: PPUSH
13900: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
13904: LD_INT 12
13906: PPUSH
13907: LD_VAR 0 3
13911: PPUSH
13912: LD_INT 1
13914: PPUSH
13915: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
13919: LD_INT 13
13921: PPUSH
13922: LD_VAR 0 3
13926: PPUSH
13927: LD_INT 1
13929: PPUSH
13930: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
13934: LD_INT 14
13936: PPUSH
13937: LD_VAR 0 3
13941: PPUSH
13942: LD_INT 1
13944: PPUSH
13945: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13949: LD_INT 15
13951: PPUSH
13952: LD_VAR 0 3
13956: PPUSH
13957: LD_INT 1
13959: PPUSH
13960: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13964: LD_INT 16
13966: PPUSH
13967: LD_VAR 0 3
13971: PPUSH
13972: LD_INT 1
13974: PPUSH
13975: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13979: LD_INT 17
13981: PPUSH
13982: LD_VAR 0 3
13986: PPUSH
13987: LD_INT 1
13989: PPUSH
13990: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
13994: LD_INT 19
13996: PPUSH
13997: LD_VAR 0 3
14001: PPUSH
14002: LD_INT 1
14004: PPUSH
14005: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
14009: LD_INT 20
14011: PPUSH
14012: LD_VAR 0 3
14016: PPUSH
14017: LD_INT 1
14019: PPUSH
14020: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
14024: LD_INT 21
14026: PPUSH
14027: LD_VAR 0 3
14031: PPUSH
14032: LD_INT 1
14034: PPUSH
14035: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
14039: LD_INT 23
14041: PPUSH
14042: LD_VAR 0 3
14046: PPUSH
14047: LD_INT 1
14049: PPUSH
14050: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
14054: LD_INT 26
14056: PPUSH
14057: LD_VAR 0 3
14061: PPUSH
14062: LD_INT 1
14064: PPUSH
14065: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
14069: LD_INT 27
14071: PPUSH
14072: LD_VAR 0 3
14076: PPUSH
14077: LD_INT 1
14079: PPUSH
14080: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
14084: LD_INT 28
14086: PPUSH
14087: LD_VAR 0 3
14091: PPUSH
14092: LD_INT 1
14094: PPUSH
14095: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14099: LD_INT 29
14101: PPUSH
14102: LD_VAR 0 3
14106: PPUSH
14107: LD_INT 1
14109: PPUSH
14110: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
14114: LD_INT 30
14116: PPUSH
14117: LD_VAR 0 3
14121: PPUSH
14122: LD_INT 1
14124: PPUSH
14125: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14129: LD_INT 31
14131: PPUSH
14132: LD_VAR 0 3
14136: PPUSH
14137: LD_INT 1
14139: PPUSH
14140: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
14144: LD_INT 32
14146: PPUSH
14147: LD_VAR 0 3
14151: PPUSH
14152: LD_INT 1
14154: PPUSH
14155: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
14159: LD_INT 36
14161: PPUSH
14162: LD_VAR 0 3
14166: PPUSH
14167: LD_INT 1
14169: PPUSH
14170: CALL_OW 324
// end ; 5 :
14174: GO 16305
14176: LD_INT 5
14178: DOUBLE
14179: EQUAL
14180: IFTRUE 14184
14182: GO 15297
14184: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14185: LD_INT 35
14187: PPUSH
14188: LD_VAR 0 3
14192: PPUSH
14193: LD_INT 1
14195: PPUSH
14196: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14200: LD_INT 45
14202: PPUSH
14203: LD_VAR 0 3
14207: PPUSH
14208: LD_INT 1
14210: PPUSH
14211: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14215: LD_INT 46
14217: PPUSH
14218: LD_VAR 0 3
14222: PPUSH
14223: LD_INT 1
14225: PPUSH
14226: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14230: LD_INT 47
14232: PPUSH
14233: LD_VAR 0 3
14237: PPUSH
14238: LD_INT 1
14240: PPUSH
14241: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14245: LD_INT 1
14247: PPUSH
14248: LD_VAR 0 3
14252: PPUSH
14253: LD_INT 1
14255: PPUSH
14256: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14260: LD_INT 2
14262: PPUSH
14263: LD_VAR 0 3
14267: PPUSH
14268: LD_INT 1
14270: PPUSH
14271: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14275: LD_INT 11
14277: PPUSH
14278: LD_VAR 0 3
14282: PPUSH
14283: LD_INT 1
14285: PPUSH
14286: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
14290: LD_INT 20
14292: PPUSH
14293: LD_VAR 0 3
14297: PPUSH
14298: LD_INT 1
14300: PPUSH
14301: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14305: LD_INT 48
14307: PPUSH
14308: LD_VAR 0 3
14312: PPUSH
14313: LD_INT 1
14315: PPUSH
14316: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
14320: LD_INT 49
14322: PPUSH
14323: LD_VAR 0 3
14327: PPUSH
14328: LD_INT 1
14330: PPUSH
14331: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14335: LD_INT 69
14337: PPUSH
14338: LD_VAR 0 3
14342: PPUSH
14343: LD_INT 1
14345: PPUSH
14346: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14350: LD_INT 39
14352: PPUSH
14353: LD_VAR 0 3
14357: PPUSH
14358: LD_INT 1
14360: PPUSH
14361: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
14365: LD_INT 34
14367: PPUSH
14368: LD_VAR 0 3
14372: PPUSH
14373: LD_INT 1
14375: PPUSH
14376: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
14380: LD_INT 42
14382: PPUSH
14383: LD_VAR 0 3
14387: PPUSH
14388: LD_INT 1
14390: PPUSH
14391: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
14395: LD_INT 44
14397: PPUSH
14398: LD_VAR 0 3
14402: PPUSH
14403: LD_INT 1
14405: PPUSH
14406: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
14410: LD_INT 41
14412: PPUSH
14413: LD_VAR 0 3
14417: PPUSH
14418: LD_INT 1
14420: PPUSH
14421: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
14425: LD_INT 40
14427: PPUSH
14428: LD_VAR 0 3
14432: PPUSH
14433: LD_INT 1
14435: PPUSH
14436: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14440: LD_INT 43
14442: PPUSH
14443: LD_VAR 0 3
14447: PPUSH
14448: LD_INT 1
14450: PPUSH
14451: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
14455: LD_INT 70
14457: PPUSH
14458: LD_VAR 0 3
14462: PPUSH
14463: LD_INT 1
14465: PPUSH
14466: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14470: LD_INT 51
14472: PPUSH
14473: LD_VAR 0 3
14477: PPUSH
14478: LD_INT 1
14480: PPUSH
14481: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
14485: LD_INT 52
14487: PPUSH
14488: LD_VAR 0 3
14492: PPUSH
14493: LD_INT 1
14495: PPUSH
14496: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14500: LD_INT 6
14502: PPUSH
14503: LD_VAR 0 3
14507: PPUSH
14508: LD_INT 1
14510: PPUSH
14511: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
14515: LD_INT 15
14517: PPUSH
14518: LD_VAR 0 3
14522: PPUSH
14523: LD_INT 1
14525: PPUSH
14526: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
14530: LD_INT 7
14532: PPUSH
14533: LD_VAR 0 3
14537: PPUSH
14538: LD_INT 1
14540: PPUSH
14541: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
14545: LD_INT 12
14547: PPUSH
14548: LD_VAR 0 3
14552: PPUSH
14553: LD_INT 1
14555: PPUSH
14556: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
14560: LD_INT 17
14562: PPUSH
14563: LD_VAR 0 3
14567: PPUSH
14568: LD_INT 1
14570: PPUSH
14571: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
14575: LD_INT 18
14577: PPUSH
14578: LD_VAR 0 3
14582: PPUSH
14583: LD_INT 1
14585: PPUSH
14586: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
14590: LD_INT 60
14592: PPUSH
14593: LD_VAR 0 3
14597: PPUSH
14598: LD_INT 1
14600: PPUSH
14601: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
14605: LD_INT 32
14607: PPUSH
14608: LD_VAR 0 3
14612: PPUSH
14613: LD_INT 1
14615: PPUSH
14616: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
14620: LD_INT 9
14622: PPUSH
14623: LD_VAR 0 3
14627: PPUSH
14628: LD_INT 1
14630: PPUSH
14631: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
14635: LD_INT 57
14637: PPUSH
14638: LD_VAR 0 3
14642: PPUSH
14643: LD_INT 1
14645: PPUSH
14646: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
14650: LD_INT 30
14652: PPUSH
14653: LD_VAR 0 3
14657: PPUSH
14658: LD_INT 1
14660: PPUSH
14661: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
14665: LD_INT 37
14667: PPUSH
14668: LD_VAR 0 3
14672: PPUSH
14673: LD_INT 1
14675: PPUSH
14676: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
14680: LD_INT 63
14682: PPUSH
14683: LD_VAR 0 3
14687: PPUSH
14688: LD_INT 1
14690: PPUSH
14691: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
14695: LD_INT 3
14697: PPUSH
14698: LD_VAR 0 3
14702: PPUSH
14703: LD_INT 1
14705: PPUSH
14706: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
14710: LD_INT 4
14712: PPUSH
14713: LD_VAR 0 3
14717: PPUSH
14718: LD_INT 1
14720: PPUSH
14721: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14725: LD_INT 5
14727: PPUSH
14728: LD_VAR 0 3
14732: PPUSH
14733: LD_INT 1
14735: PPUSH
14736: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14740: LD_INT 66
14742: PPUSH
14743: LD_VAR 0 3
14747: PPUSH
14748: LD_INT 1
14750: PPUSH
14751: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14755: LD_INT 21
14757: PPUSH
14758: LD_VAR 0 3
14762: PPUSH
14763: LD_INT 1
14765: PPUSH
14766: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14770: LD_INT 22
14772: PPUSH
14773: LD_VAR 0 3
14777: PPUSH
14778: LD_INT 1
14780: PPUSH
14781: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
14785: LD_INT 19
14787: PPUSH
14788: LD_VAR 0 3
14792: PPUSH
14793: LD_INT 1
14795: PPUSH
14796: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
14800: LD_INT 54
14802: PPUSH
14803: LD_VAR 0 3
14807: PPUSH
14808: LD_INT 1
14810: PPUSH
14811: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
14815: LD_INT 55
14817: PPUSH
14818: LD_VAR 0 3
14822: PPUSH
14823: LD_INT 1
14825: PPUSH
14826: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14830: LD_INT 0
14832: PPUSH
14833: LD_VAR 0 3
14837: PPUSH
14838: LD_INT 1
14840: PPUSH
14841: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
14845: LD_INT 1
14847: PPUSH
14848: LD_VAR 0 3
14852: PPUSH
14853: LD_INT 1
14855: PPUSH
14856: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14860: LD_INT 2
14862: PPUSH
14863: LD_VAR 0 3
14867: PPUSH
14868: LD_INT 1
14870: PPUSH
14871: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
14875: LD_INT 3
14877: PPUSH
14878: LD_VAR 0 3
14882: PPUSH
14883: LD_INT 1
14885: PPUSH
14886: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14890: LD_INT 4
14892: PPUSH
14893: LD_VAR 0 3
14897: PPUSH
14898: LD_INT 1
14900: PPUSH
14901: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
14905: LD_INT 5
14907: PPUSH
14908: LD_VAR 0 3
14912: PPUSH
14913: LD_INT 1
14915: PPUSH
14916: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14920: LD_INT 6
14922: PPUSH
14923: LD_VAR 0 3
14927: PPUSH
14928: LD_INT 1
14930: PPUSH
14931: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
14935: LD_INT 7
14937: PPUSH
14938: LD_VAR 0 3
14942: PPUSH
14943: LD_INT 1
14945: PPUSH
14946: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
14950: LD_INT 8
14952: PPUSH
14953: LD_VAR 0 3
14957: PPUSH
14958: LD_INT 1
14960: PPUSH
14961: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
14965: LD_INT 10
14967: PPUSH
14968: LD_VAR 0 3
14972: PPUSH
14973: LD_INT 1
14975: PPUSH
14976: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
14980: LD_INT 11
14982: PPUSH
14983: LD_VAR 0 3
14987: PPUSH
14988: LD_INT 1
14990: PPUSH
14991: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
14995: LD_INT 12
14997: PPUSH
14998: LD_VAR 0 3
15002: PPUSH
15003: LD_INT 1
15005: PPUSH
15006: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
15010: LD_INT 13
15012: PPUSH
15013: LD_VAR 0 3
15017: PPUSH
15018: LD_INT 1
15020: PPUSH
15021: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
15025: LD_INT 14
15027: PPUSH
15028: LD_VAR 0 3
15032: PPUSH
15033: LD_INT 1
15035: PPUSH
15036: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
15040: LD_INT 15
15042: PPUSH
15043: LD_VAR 0 3
15047: PPUSH
15048: LD_INT 1
15050: PPUSH
15051: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
15055: LD_INT 16
15057: PPUSH
15058: LD_VAR 0 3
15062: PPUSH
15063: LD_INT 1
15065: PPUSH
15066: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
15070: LD_INT 17
15072: PPUSH
15073: LD_VAR 0 3
15077: PPUSH
15078: LD_INT 1
15080: PPUSH
15081: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
15085: LD_INT 18
15087: PPUSH
15088: LD_VAR 0 3
15092: PPUSH
15093: LD_INT 1
15095: PPUSH
15096: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
15100: LD_INT 19
15102: PPUSH
15103: LD_VAR 0 3
15107: PPUSH
15108: LD_INT 1
15110: PPUSH
15111: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
15115: LD_INT 20
15117: PPUSH
15118: LD_VAR 0 3
15122: PPUSH
15123: LD_INT 1
15125: PPUSH
15126: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
15130: LD_INT 21
15132: PPUSH
15133: LD_VAR 0 3
15137: PPUSH
15138: LD_INT 1
15140: PPUSH
15141: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
15145: LD_INT 23
15147: PPUSH
15148: LD_VAR 0 3
15152: PPUSH
15153: LD_INT 1
15155: PPUSH
15156: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
15160: LD_INT 26
15162: PPUSH
15163: LD_VAR 0 3
15167: PPUSH
15168: LD_INT 1
15170: PPUSH
15171: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15175: LD_INT 27
15177: PPUSH
15178: LD_VAR 0 3
15182: PPUSH
15183: LD_INT 1
15185: PPUSH
15186: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
15190: LD_INT 28
15192: PPUSH
15193: LD_VAR 0 3
15197: PPUSH
15198: LD_INT 1
15200: PPUSH
15201: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15205: LD_INT 29
15207: PPUSH
15208: LD_VAR 0 3
15212: PPUSH
15213: LD_INT 1
15215: PPUSH
15216: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
15220: LD_INT 30
15222: PPUSH
15223: LD_VAR 0 3
15227: PPUSH
15228: LD_INT 1
15230: PPUSH
15231: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15235: LD_INT 31
15237: PPUSH
15238: LD_VAR 0 3
15242: PPUSH
15243: LD_INT 1
15245: PPUSH
15246: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15250: LD_INT 32
15252: PPUSH
15253: LD_VAR 0 3
15257: PPUSH
15258: LD_INT 1
15260: PPUSH
15261: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
15265: LD_INT 33
15267: PPUSH
15268: LD_VAR 0 3
15272: PPUSH
15273: LD_INT 1
15275: PPUSH
15276: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
15280: LD_INT 36
15282: PPUSH
15283: LD_VAR 0 3
15287: PPUSH
15288: LD_INT 1
15290: PPUSH
15291: CALL_OW 324
// end ; 6 :
15295: GO 16305
15297: LD_INT 6
15299: DOUBLE
15300: EQUAL
15301: IFTRUE 15305
15303: GO 16230
15305: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15306: LD_INT 35
15308: PPUSH
15309: LD_VAR 0 3
15313: PPUSH
15314: LD_INT 1
15316: PPUSH
15317: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15321: LD_INT 45
15323: PPUSH
15324: LD_VAR 0 3
15328: PPUSH
15329: LD_INT 1
15331: PPUSH
15332: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15336: LD_INT 46
15338: PPUSH
15339: LD_VAR 0 3
15343: PPUSH
15344: LD_INT 1
15346: PPUSH
15347: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15351: LD_INT 47
15353: PPUSH
15354: LD_VAR 0 3
15358: PPUSH
15359: LD_INT 1
15361: PPUSH
15362: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15366: LD_INT 1
15368: PPUSH
15369: LD_VAR 0 3
15373: PPUSH
15374: LD_INT 1
15376: PPUSH
15377: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15381: LD_INT 2
15383: PPUSH
15384: LD_VAR 0 3
15388: PPUSH
15389: LD_INT 1
15391: PPUSH
15392: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15396: LD_INT 11
15398: PPUSH
15399: LD_VAR 0 3
15403: PPUSH
15404: LD_INT 1
15406: PPUSH
15407: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15411: LD_INT 20
15413: PPUSH
15414: LD_VAR 0 3
15418: PPUSH
15419: LD_INT 1
15421: PPUSH
15422: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15426: LD_INT 48
15428: PPUSH
15429: LD_VAR 0 3
15433: PPUSH
15434: LD_INT 1
15436: PPUSH
15437: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15441: LD_INT 49
15443: PPUSH
15444: LD_VAR 0 3
15448: PPUSH
15449: LD_INT 1
15451: PPUSH
15452: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
15456: LD_INT 50
15458: PPUSH
15459: LD_VAR 0 3
15463: PPUSH
15464: LD_INT 1
15466: PPUSH
15467: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15471: LD_INT 69
15473: PPUSH
15474: LD_VAR 0 3
15478: PPUSH
15479: LD_INT 1
15481: PPUSH
15482: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15486: LD_INT 39
15488: PPUSH
15489: LD_VAR 0 3
15493: PPUSH
15494: LD_INT 1
15496: PPUSH
15497: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15501: LD_INT 34
15503: PPUSH
15504: LD_VAR 0 3
15508: PPUSH
15509: LD_INT 1
15511: PPUSH
15512: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15516: LD_INT 42
15518: PPUSH
15519: LD_VAR 0 3
15523: PPUSH
15524: LD_INT 1
15526: PPUSH
15527: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15531: LD_INT 44
15533: PPUSH
15534: LD_VAR 0 3
15538: PPUSH
15539: LD_INT 1
15541: PPUSH
15542: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15546: LD_INT 41
15548: PPUSH
15549: LD_VAR 0 3
15553: PPUSH
15554: LD_INT 1
15556: PPUSH
15557: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
15561: LD_INT 13
15563: PPUSH
15564: LD_VAR 0 3
15568: PPUSH
15569: LD_INT 1
15571: PPUSH
15572: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
15576: LD_INT 40
15578: PPUSH
15579: LD_VAR 0 3
15583: PPUSH
15584: LD_INT 1
15586: PPUSH
15587: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15591: LD_INT 43
15593: PPUSH
15594: LD_VAR 0 3
15598: PPUSH
15599: LD_INT 1
15601: PPUSH
15602: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15606: LD_INT 70
15608: PPUSH
15609: LD_VAR 0 3
15613: PPUSH
15614: LD_INT 1
15616: PPUSH
15617: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
15621: LD_INT 23
15623: PPUSH
15624: LD_VAR 0 3
15628: PPUSH
15629: LD_INT 1
15631: PPUSH
15632: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15636: LD_INT 51
15638: PPUSH
15639: LD_VAR 0 3
15643: PPUSH
15644: LD_INT 1
15646: PPUSH
15647: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15651: LD_INT 52
15653: PPUSH
15654: LD_VAR 0 3
15658: PPUSH
15659: LD_INT 1
15661: PPUSH
15662: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15666: LD_INT 6
15668: PPUSH
15669: LD_VAR 0 3
15673: PPUSH
15674: LD_INT 1
15676: PPUSH
15677: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
15681: LD_INT 15
15683: PPUSH
15684: LD_VAR 0 3
15688: PPUSH
15689: LD_INT 1
15691: PPUSH
15692: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
15696: LD_INT 7
15698: PPUSH
15699: LD_VAR 0 3
15703: PPUSH
15704: LD_INT 1
15706: PPUSH
15707: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
15711: LD_INT 12
15713: PPUSH
15714: LD_VAR 0 3
15718: PPUSH
15719: LD_INT 1
15721: PPUSH
15722: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
15726: LD_INT 10
15728: PPUSH
15729: LD_VAR 0 3
15733: PPUSH
15734: LD_INT 1
15736: PPUSH
15737: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
15741: LD_INT 17
15743: PPUSH
15744: LD_VAR 0 3
15748: PPUSH
15749: LD_INT 1
15751: PPUSH
15752: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
15756: LD_INT 18
15758: PPUSH
15759: LD_VAR 0 3
15763: PPUSH
15764: LD_INT 1
15766: PPUSH
15767: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
15771: LD_INT 60
15773: PPUSH
15774: LD_VAR 0 3
15778: PPUSH
15779: LD_INT 1
15781: PPUSH
15782: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
15786: LD_INT 61
15788: PPUSH
15789: LD_VAR 0 3
15793: PPUSH
15794: LD_INT 1
15796: PPUSH
15797: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
15801: LD_INT 32
15803: PPUSH
15804: LD_VAR 0 3
15808: PPUSH
15809: LD_INT 1
15811: PPUSH
15812: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
15816: LD_INT 27
15818: PPUSH
15819: LD_VAR 0 3
15823: PPUSH
15824: LD_INT 1
15826: PPUSH
15827: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
15831: LD_INT 36
15833: PPUSH
15834: LD_VAR 0 3
15838: PPUSH
15839: LD_INT 1
15841: PPUSH
15842: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
15846: LD_INT 33
15848: PPUSH
15849: LD_VAR 0 3
15853: PPUSH
15854: LD_INT 1
15856: PPUSH
15857: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
15861: LD_INT 9
15863: PPUSH
15864: LD_VAR 0 3
15868: PPUSH
15869: LD_INT 1
15871: PPUSH
15872: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
15876: LD_INT 38
15878: PPUSH
15879: LD_VAR 0 3
15883: PPUSH
15884: LD_INT 1
15886: PPUSH
15887: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
15891: LD_INT 57
15893: PPUSH
15894: LD_VAR 0 3
15898: PPUSH
15899: LD_INT 1
15901: PPUSH
15902: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
15906: LD_INT 58
15908: PPUSH
15909: LD_VAR 0 3
15913: PPUSH
15914: LD_INT 1
15916: PPUSH
15917: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
15921: LD_INT 28
15923: PPUSH
15924: LD_VAR 0 3
15928: PPUSH
15929: LD_INT 1
15931: PPUSH
15932: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
15936: LD_INT 29
15938: PPUSH
15939: LD_VAR 0 3
15943: PPUSH
15944: LD_INT 1
15946: PPUSH
15947: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
15951: LD_INT 30
15953: PPUSH
15954: LD_VAR 0 3
15958: PPUSH
15959: LD_INT 1
15961: PPUSH
15962: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
15966: LD_INT 37
15968: PPUSH
15969: LD_VAR 0 3
15973: PPUSH
15974: LD_INT 1
15976: PPUSH
15977: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
15981: LD_INT 63
15983: PPUSH
15984: LD_VAR 0 3
15988: PPUSH
15989: LD_INT 1
15991: PPUSH
15992: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
15996: LD_INT 64
15998: PPUSH
15999: LD_VAR 0 3
16003: PPUSH
16004: LD_INT 1
16006: PPUSH
16007: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
16011: LD_INT 3
16013: PPUSH
16014: LD_VAR 0 3
16018: PPUSH
16019: LD_INT 1
16021: PPUSH
16022: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
16026: LD_INT 4
16028: PPUSH
16029: LD_VAR 0 3
16033: PPUSH
16034: LD_INT 1
16036: PPUSH
16037: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
16041: LD_INT 5
16043: PPUSH
16044: LD_VAR 0 3
16048: PPUSH
16049: LD_INT 1
16051: PPUSH
16052: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
16056: LD_INT 8
16058: PPUSH
16059: LD_VAR 0 3
16063: PPUSH
16064: LD_INT 1
16066: PPUSH
16067: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
16071: LD_INT 66
16073: PPUSH
16074: LD_VAR 0 3
16078: PPUSH
16079: LD_INT 1
16081: PPUSH
16082: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
16086: LD_INT 67
16088: PPUSH
16089: LD_VAR 0 3
16093: PPUSH
16094: LD_INT 1
16096: PPUSH
16097: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
16101: LD_INT 21
16103: PPUSH
16104: LD_VAR 0 3
16108: PPUSH
16109: LD_INT 1
16111: PPUSH
16112: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
16116: LD_INT 22
16118: PPUSH
16119: LD_VAR 0 3
16123: PPUSH
16124: LD_INT 1
16126: PPUSH
16127: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
16131: LD_INT 19
16133: PPUSH
16134: LD_VAR 0 3
16138: PPUSH
16139: LD_INT 1
16141: PPUSH
16142: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
16146: LD_INT 26
16148: PPUSH
16149: LD_VAR 0 3
16153: PPUSH
16154: LD_INT 1
16156: PPUSH
16157: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
16161: LD_INT 54
16163: PPUSH
16164: LD_VAR 0 3
16168: PPUSH
16169: LD_INT 1
16171: PPUSH
16172: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
16176: LD_INT 55
16178: PPUSH
16179: LD_VAR 0 3
16183: PPUSH
16184: LD_INT 1
16186: PPUSH
16187: CALL_OW 322
// for i = 0 to 39 do
16191: LD_ADDR_VAR 0 4
16195: PUSH
16196: DOUBLE
16197: LD_INT 0
16199: DEC
16200: ST_TO_ADDR
16201: LD_INT 39
16203: PUSH
16204: FOR_TO
16205: IFFALSE 16226
// SetRestrict ( i , side , true ) ;
16207: LD_VAR 0 4
16211: PPUSH
16212: LD_VAR 0 3
16216: PPUSH
16217: LD_INT 1
16219: PPUSH
16220: CALL_OW 324
16224: GO 16204
16226: POP
16227: POP
// end ; else
16228: GO 16305
16230: POP
// begin for i = 1 to 73 do
16231: LD_ADDR_VAR 0 4
16235: PUSH
16236: DOUBLE
16237: LD_INT 1
16239: DEC
16240: ST_TO_ADDR
16241: LD_INT 73
16243: PUSH
16244: FOR_TO
16245: IFFALSE 16266
// SetTech ( i , side , state_enabled ) ;
16247: LD_VAR 0 4
16251: PPUSH
16252: LD_VAR 0 3
16256: PPUSH
16257: LD_INT 1
16259: PPUSH
16260: CALL_OW 322
16264: GO 16244
16266: POP
16267: POP
// for i = 0 to 39 do
16268: LD_ADDR_VAR 0 4
16272: PUSH
16273: DOUBLE
16274: LD_INT 0
16276: DEC
16277: ST_TO_ADDR
16278: LD_INT 39
16280: PUSH
16281: FOR_TO
16282: IFFALSE 16303
// SetRestrict ( i , side , true ) ;
16284: LD_VAR 0 4
16288: PPUSH
16289: LD_VAR 0 3
16293: PPUSH
16294: LD_INT 1
16296: PPUSH
16297: CALL_OW 324
16301: GO 16281
16303: POP
16304: POP
// end ; end ; end ;
16305: GO 12310
16307: POP
16308: POP
// end ; end_of_file
16309: LD_VAR 0 2
16313: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
16314: LD_INT 0
16316: PPUSH
16317: PPUSH
// enable ( 98 ) ;
16318: LD_INT 98
16320: ENABLE_MARKED
// GameEnded = false ;
16321: LD_ADDR_LOC 29
16325: PUSH
16326: LD_INT 0
16328: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
16329: LD_ADDR_LOC 28
16333: PUSH
16334: LD_INT 0
16336: PUSH
16337: LD_INT 0
16339: PUSH
16340: LD_INT 0
16342: PUSH
16343: LD_INT 0
16345: PUSH
16346: LD_INT 0
16348: PUSH
16349: LD_INT 0
16351: PUSH
16352: LD_INT 0
16354: PUSH
16355: LD_INT 0
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: ST_TO_ADDR
// unfoged = false ;
16368: LD_ADDR_LOC 30
16372: PUSH
16373: LD_INT 0
16375: ST_TO_ADDR
// for i = 1 to side_positions do
16376: LD_ADDR_VAR 0 2
16380: PUSH
16381: DOUBLE
16382: LD_INT 1
16384: DEC
16385: ST_TO_ADDR
16386: LD_EXP 20
16390: PUSH
16391: FOR_TO
16392: IFFALSE 16432
// if not side_positions [ i ] then
16394: LD_EXP 20
16398: PUSH
16399: LD_VAR 0 2
16403: ARRAY
16404: NOT
16405: IFFALSE 16430
// defaited = replace ( defaited , i , true ) ;
16407: LD_ADDR_LOC 28
16411: PUSH
16412: LD_LOC 28
16416: PPUSH
16417: LD_VAR 0 2
16421: PPUSH
16422: LD_INT 1
16424: PPUSH
16425: CALL_OW 1
16429: ST_TO_ADDR
16430: GO 16391
16432: POP
16433: POP
// end ;
16434: LD_VAR 0 1
16438: RET
// function CanWinLoose ; begin
16439: LD_INT 0
16441: PPUSH
// Result := true ;
16442: LD_ADDR_VAR 0 1
16446: PUSH
16447: LD_INT 1
16449: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
16450: CALL_OW 518
16454: PUSH
16455: CALL_OW 519
16459: PUSH
16460: LD_INT 0
16462: GREATER
16463: AND
16464: IFFALSE 16474
// Result := false ;
16466: LD_ADDR_VAR 0 1
16470: PUSH
16471: LD_INT 0
16473: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
16474: CALL_OW 531
16478: PUSH
16479: CALL_OW 519
16483: PUSH
16484: LD_INT 1
16486: GREATER
16487: AND
16488: IFFALSE 16498
// Result := false ;
16490: LD_ADDR_VAR 0 1
16494: PUSH
16495: LD_INT 0
16497: ST_TO_ADDR
// end ;
16498: LD_VAR 0 1
16502: RET
// export function HasPower ( i ) ; var k , h ; begin
16503: LD_INT 0
16505: PPUSH
16506: PPUSH
16507: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
16508: LD_VAR 0 1
16512: PPUSH
16513: CALL_OW 108
16517: NOT
16518: PUSH
16519: LD_EXP 19
16523: PUSH
16524: LD_VAR 0 1
16528: ARRAY
16529: NOT
16530: AND
16531: PUSH
16532: LD_OWVAR 4
16536: AND
16537: IFFALSE 16549
// begin result = false ;
16539: LD_ADDR_VAR 0 2
16543: PUSH
16544: LD_INT 0
16546: ST_TO_ADDR
// end else
16547: GO 16844
// case def_win_rules of 0 :
16549: LD_EXP 15
16553: PUSH
16554: LD_INT 0
16556: DOUBLE
16557: EQUAL
16558: IFTRUE 16562
16560: GO 16725
16562: POP
// if def_people_respawning then
16563: LD_EXP 50
16567: IFFALSE 16658
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
16569: LD_ADDR_VAR 0 2
16573: PUSH
16574: LD_INT 22
16576: PUSH
16577: LD_VAR 0 1
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: PUSH
16586: LD_INT 2
16588: PUSH
16589: LD_INT 21
16591: PUSH
16592: LD_INT 1
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: PUSH
16599: LD_INT 33
16601: PUSH
16602: LD_INT 3
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: PUSH
16609: LD_INT 33
16611: PUSH
16612: LD_INT 5
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: PUSH
16619: LD_INT 30
16621: PUSH
16622: LD_INT 0
16624: PUSH
16625: EMPTY
16626: LIST
16627: LIST
16628: PUSH
16629: LD_INT 30
16631: PUSH
16632: LD_INT 1
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: PPUSH
16651: CALL_OW 69
16655: ST_TO_ADDR
16656: GO 16723
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
16658: LD_ADDR_VAR 0 2
16662: PUSH
16663: LD_INT 22
16665: PUSH
16666: LD_VAR 0 1
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: PUSH
16675: LD_INT 2
16677: PUSH
16678: LD_INT 21
16680: PUSH
16681: LD_INT 1
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: PUSH
16688: LD_INT 33
16690: PUSH
16691: LD_INT 3
16693: PUSH
16694: EMPTY
16695: LIST
16696: LIST
16697: PUSH
16698: LD_INT 33
16700: PUSH
16701: LD_INT 5
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: PUSH
16714: EMPTY
16715: LIST
16716: LIST
16717: PPUSH
16718: CALL_OW 69
16722: ST_TO_ADDR
16723: GO 16844
16725: LD_INT 1
16727: DOUBLE
16728: EQUAL
16729: IFTRUE 16733
16731: GO 16772
16733: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
16734: LD_ADDR_VAR 0 2
16738: PUSH
16739: LD_INT 22
16741: PUSH
16742: LD_VAR 0 1
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: PUSH
16751: LD_INT 21
16753: PUSH
16754: LD_INT 1
16756: PUSH
16757: EMPTY
16758: LIST
16759: LIST
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: PPUSH
16765: CALL_OW 69
16769: ST_TO_ADDR
16770: GO 16844
16772: LD_INT 2
16774: DOUBLE
16775: EQUAL
16776: IFTRUE 16780
16778: GO 16843
16780: POP
// begin h = false ;
16781: LD_ADDR_VAR 0 4
16785: PUSH
16786: LD_INT 0
16788: ST_TO_ADDR
// for k in heroes [ i ] do
16789: LD_ADDR_VAR 0 3
16793: PUSH
16794: LD_EXP 28
16798: PUSH
16799: LD_VAR 0 1
16803: ARRAY
16804: PUSH
16805: FOR_IN
16806: IFFALSE 16829
// if IsLive ( k ) then
16808: LD_VAR 0 3
16812: PPUSH
16813: CALL_OW 300
16817: IFFALSE 16827
// h = true ;
16819: LD_ADDR_VAR 0 4
16823: PUSH
16824: LD_INT 1
16826: ST_TO_ADDR
16827: GO 16805
16829: POP
16830: POP
// Result := h ;
16831: LD_ADDR_VAR 0 2
16835: PUSH
16836: LD_VAR 0 4
16840: ST_TO_ADDR
// end ; end ;
16841: GO 16844
16843: POP
// end ;
16844: LD_VAR 0 2
16848: RET
// function AlliedSides ( i , j ) ; begin
16849: LD_INT 0
16851: PPUSH
// Result := false ;
16852: LD_ADDR_VAR 0 3
16856: PUSH
16857: LD_INT 0
16859: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
16860: LD_VAR 0 1
16864: PPUSH
16865: LD_VAR 0 2
16869: PPUSH
16870: CALL_OW 81
16874: PUSH
16875: LD_INT 1
16877: EQUAL
16878: PUSH
16879: LD_VAR 0 2
16883: PPUSH
16884: LD_VAR 0 1
16888: PPUSH
16889: CALL_OW 81
16893: PUSH
16894: LD_INT 1
16896: EQUAL
16897: AND
16898: PUSH
16899: LD_VAR 0 1
16903: PPUSH
16904: CALL_OW 83
16908: AND
16909: PUSH
16910: LD_VAR 0 2
16914: PPUSH
16915: CALL_OW 83
16919: AND
16920: IFFALSE 16930
// Result := true ;
16922: LD_ADDR_VAR 0 3
16926: PUSH
16927: LD_INT 1
16929: ST_TO_ADDR
// end ;
16930: LD_VAR 0 3
16934: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
16935: CALL 16439 0 0
16939: PUSH
16940: LD_LOC 29
16944: NOT
16945: AND
16946: IFFALSE 16962
16948: GO 16950
16950: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
16951: LD_ADDR_EXP 56
16955: PUSH
16956: LD_STRING #Player-Ended
16958: PUSH
16959: EMPTY
16960: LIST
16961: ST_TO_ADDR
16962: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
16963: CALL 16439 0 0
16967: PUSH
16968: LD_LOC 29
16972: AND
16973: IFFALSE 16982
16975: GO 16977
16977: DISABLE
// YouLostInMultiplayer ;
16978: CALL_OW 107
16982: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
16983: CALL 16439 0 0
16987: NOT
16988: PUSH
16989: CALL_OW 531
16993: NOT
16994: AND
16995: IFFALSE 17011
16997: GO 16999
16999: DISABLE
// WaitServerStrings = [ #server-wait ] ;
17000: LD_ADDR_EXP 56
17004: PUSH
17005: LD_STRING #server-wait
17007: PUSH
17008: EMPTY
17009: LIST
17010: ST_TO_ADDR
17011: END
// every 100 trigger IAmSpec do
17012: CALL_OW 531
17016: IFFALSE 17032
17018: GO 17020
17020: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
17021: LD_ADDR_EXP 56
17025: PUSH
17026: LD_STRING #Player-IAmSpec
17028: PUSH
17029: EMPTY
17030: LIST
17031: ST_TO_ADDR
17032: END
// every 100 trigger GameEnded and IAmSpec do
17033: LD_LOC 29
17037: PUSH
17038: CALL_OW 531
17042: AND
17043: IFFALSE 17052
17045: GO 17047
17047: DISABLE
// YouLostInMultiplayer ;
17048: CALL_OW 107
17052: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
17053: CALL 16439 0 0
17057: PUSH
17058: LD_LOC 29
17062: NOT
17063: AND
17064: IFFALSE 17080
17066: GO 17068
17068: DISABLE
// WaitServerStrings = [ $player-win ] ;
17069: LD_ADDR_EXP 56
17073: PUSH
17074: LD_STRING $player-win
17076: PUSH
17077: EMPTY
17078: LIST
17079: ST_TO_ADDR
17080: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
17081: CALL 16439 0 0
17085: PUSH
17086: LD_LOC 29
17090: AND
17091: IFFALSE 17115
17093: GO 17095
17095: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
17096: LD_EXP 21
17100: PUSH
17101: LD_OWVAR 2
17105: ARRAY
17106: PPUSH
17107: CALL 11948 0 1
// YouWinInMultiplayer ;
17111: CALL_OW 106
// end ;
17115: END
// every 100 trigger isEditor marked 401 do
17116: LD_OWVAR 84
17120: IFFALSE 17136
17122: GO 17124
17124: DISABLE
// Debug_Strings = [ You won ] ;
17125: LD_ADDR_OWVAR 48
17129: PUSH
17130: LD_STRING You won
17132: PUSH
17133: EMPTY
17134: LIST
17135: ST_TO_ADDR
17136: END
// every 100 trigger isEditor marked 400 do
17137: LD_OWVAR 84
17141: IFFALSE 17157
17143: GO 17145
17145: DISABLE
// Debug_Strings = [ You loss ] ;
17146: LD_ADDR_OWVAR 48
17150: PUSH
17151: LD_STRING You loss
17153: PUSH
17154: EMPTY
17155: LIST
17156: ST_TO_ADDR
17157: END
// every 100 marked 98 do var i , un ;
17158: GO 17160
17160: DISABLE
17161: LD_INT 0
17163: PPUSH
17164: PPUSH
// begin for i = 1 to side_positions do
17165: LD_ADDR_VAR 0 1
17169: PUSH
17170: DOUBLE
17171: LD_INT 1
17173: DEC
17174: ST_TO_ADDR
17175: LD_EXP 20
17179: PUSH
17180: FOR_TO
17181: IFFALSE 17304
// if side_positions [ i ] then
17183: LD_EXP 20
17187: PUSH
17188: LD_VAR 0 1
17192: ARRAY
17193: IFFALSE 17302
// if not HasPower ( i ) and not Defaited [ i ] then
17195: LD_VAR 0 1
17199: PPUSH
17200: CALL 16503 0 1
17204: NOT
17205: PUSH
17206: LD_LOC 28
17210: PUSH
17211: LD_VAR 0 1
17215: ARRAY
17216: NOT
17217: AND
17218: IFFALSE 17302
// begin un = filterallunits ( [ f_side , i ] ) ;
17220: LD_ADDR_VAR 0 2
17224: PUSH
17225: LD_INT 22
17227: PUSH
17228: LD_VAR 0 1
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PPUSH
17237: CALL_OW 69
17241: ST_TO_ADDR
// if un then
17242: LD_VAR 0 2
17246: IFFALSE 17260
// SetSide ( un , 0 ) ;
17248: LD_VAR 0 2
17252: PPUSH
17253: LD_INT 0
17255: PPUSH
17256: CALL_OW 235
// Defaited = replace ( Defaited , i , true ) ;
17260: LD_ADDR_LOC 28
17264: PUSH
17265: LD_LOC 28
17269: PPUSH
17270: LD_VAR 0 1
17274: PPUSH
17275: LD_INT 1
17277: PPUSH
17278: CALL_OW 1
17282: ST_TO_ADDR
// if i = your_side then
17283: LD_VAR 0 1
17287: PUSH
17288: LD_OWVAR 2
17292: EQUAL
17293: IFFALSE 17302
// begin Multiplayer_Loose_Message ;
17295: CALL_OW 521
// enable ( 400 ) ;
17299: LD_INT 400
17301: ENABLE_MARKED
// end ; end ;
17302: GO 17180
17304: POP
17305: POP
// if not Unfoged and defaited [ your_side ] then
17306: LD_LOC 30
17310: NOT
17311: PUSH
17312: LD_LOC 28
17316: PUSH
17317: LD_OWVAR 2
17321: ARRAY
17322: AND
17323: IFFALSE 17329
// Unfog ;
17325: CALL 17515 0 0
// DidGameEnd ;
17329: CALL 17344 0 0
// if not GameEnded then
17333: LD_LOC 29
17337: NOT
17338: IFFALSE 17341
// enable ;
17340: ENABLE
// end ;
17341: PPOPN 2
17343: END
// function DidGameEnd ; var i , k , enemy ; begin
17344: LD_INT 0
17346: PPUSH
17347: PPUSH
17348: PPUSH
17349: PPUSH
// enemy = [ ] ;
17350: LD_ADDR_VAR 0 4
17354: PUSH
17355: EMPTY
17356: ST_TO_ADDR
// for i = 1 to side_positions do
17357: LD_ADDR_VAR 0 2
17361: PUSH
17362: DOUBLE
17363: LD_INT 1
17365: DEC
17366: ST_TO_ADDR
17367: LD_EXP 20
17371: PUSH
17372: FOR_TO
17373: IFFALSE 17477
// if not defaited [ i ] then
17375: LD_LOC 28
17379: PUSH
17380: LD_VAR 0 2
17384: ARRAY
17385: NOT
17386: IFFALSE 17475
// for k = 1 to side_positions do
17388: LD_ADDR_VAR 0 3
17392: PUSH
17393: DOUBLE
17394: LD_INT 1
17396: DEC
17397: ST_TO_ADDR
17398: LD_EXP 20
17402: PUSH
17403: FOR_TO
17404: IFFALSE 17473
// if not defaited [ k ] then
17406: LD_LOC 28
17410: PUSH
17411: LD_VAR 0 3
17415: ARRAY
17416: NOT
17417: IFFALSE 17471
// if GetAttitude ( i , k ) in [ att_enemy , att_neutral ] then
17419: LD_VAR 0 2
17423: PPUSH
17424: LD_VAR 0 3
17428: PPUSH
17429: CALL_OW 81
17433: PUSH
17434: LD_INT 2
17436: PUSH
17437: LD_INT 0
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: IN
17444: IFFALSE 17471
// enemy = enemy ^ [ i , k ] ;
17446: LD_ADDR_VAR 0 4
17450: PUSH
17451: LD_VAR 0 4
17455: PUSH
17456: LD_VAR 0 2
17460: PUSH
17461: LD_VAR 0 3
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: ADD
17470: ST_TO_ADDR
17471: GO 17403
17473: POP
17474: POP
17475: GO 17372
17477: POP
17478: POP
// if not enemy then
17479: LD_VAR 0 4
17483: NOT
17484: IFFALSE 17510
// begin GameEnded = true ;
17486: LD_ADDR_LOC 29
17490: PUSH
17491: LD_INT 1
17493: ST_TO_ADDR
// if not defaited [ your_side ] then
17494: LD_LOC 28
17498: PUSH
17499: LD_OWVAR 2
17503: ARRAY
17504: NOT
17505: IFFALSE 17510
// enable ( 401 ) ;
17507: LD_INT 401
17509: ENABLE_MARKED
// end ; end ;
17510: LD_VAR 0 1
17514: RET
// function unfog ; var k , friends ; begin
17515: LD_INT 0
17517: PPUSH
17518: PPUSH
17519: PPUSH
// for k = 1 to side_positions do
17520: LD_ADDR_VAR 0 2
17524: PUSH
17525: DOUBLE
17526: LD_INT 1
17528: DEC
17529: ST_TO_ADDR
17530: LD_EXP 20
17534: PUSH
17535: FOR_TO
17536: IFFALSE 17592
// if not defaited [ k ] then
17538: LD_LOC 28
17542: PUSH
17543: LD_VAR 0 2
17547: ARRAY
17548: NOT
17549: IFFALSE 17590
// if GetAttitude ( your_side , k ) in [ att_friend ] then
17551: LD_OWVAR 2
17555: PPUSH
17556: LD_VAR 0 2
17560: PPUSH
17561: CALL_OW 81
17565: PUSH
17566: LD_INT 1
17568: PUSH
17569: EMPTY
17570: LIST
17571: IN
17572: IFFALSE 17590
// friends = friends ^ k ;
17574: LD_ADDR_VAR 0 3
17578: PUSH
17579: LD_VAR 0 3
17583: PUSH
17584: LD_VAR 0 2
17588: ADD
17589: ST_TO_ADDR
17590: GO 17535
17592: POP
17593: POP
// if not friends then
17594: LD_VAR 0 3
17598: NOT
17599: IFFALSE 17616
// begin fogoff ( true ) ;
17601: LD_INT 1
17603: PPUSH
17604: CALL_OW 344
// unfoged = true ;
17608: LD_ADDR_LOC 30
17612: PUSH
17613: LD_INT 1
17615: ST_TO_ADDR
// end ; end ;
17616: LD_VAR 0 1
17620: RET
// export function MakeGameEnd ; begin
17621: LD_INT 0
17623: PPUSH
// fogoff ( true ) ;
17624: LD_INT 1
17626: PPUSH
17627: CALL_OW 344
// unfoged = true ;
17631: LD_ADDR_LOC 30
17635: PUSH
17636: LD_INT 1
17638: ST_TO_ADDR
// wait ( 0 0$5 ) ;
17639: LD_INT 175
17641: PPUSH
17642: CALL_OW 67
// GameEnded = true ;
17646: LD_ADDR_LOC 29
17650: PUSH
17651: LD_INT 1
17653: ST_TO_ADDR
// end ;
17654: LD_VAR 0 1
17658: RET
// export function GetGameEnded ; begin
17659: LD_INT 0
17661: PPUSH
// result = GameEnded ;
17662: LD_ADDR_VAR 0 1
17666: PUSH
17667: LD_LOC 29
17671: ST_TO_ADDR
// end ;
17672: LD_VAR 0 1
17676: RET
