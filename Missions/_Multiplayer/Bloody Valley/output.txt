// export def_tree_function ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , respawning_time_min , respawning_time_max , siberite_bomb_Delay , amount_of_apemen , tree_function , def_win_rules , buildUpTime_Delay ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export Position_Sides ; export depot_def , breastworks_def , start_def , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 141
// begin Your_Side := mp_player_side ;
  79: LD_ADDR_OWVAR 2
  83: PUSH
  84: LD_OWVAR 7
  88: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  89: LD_ADDR_EXP 20
  93: PUSH
  94: LD_OWVAR 17
  98: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  99: LD_ADDR_EXP 17
 103: PUSH
 104: LD_OWVAR 15
 108: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 109: LD_ADDR_EXP 21
 113: PUSH
 114: LD_OWVAR 16
 118: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 119: LD_ADDR_EXP 19
 123: PUSH
 124: CALL 0 0 0
 128: ST_TO_ADDR
// Teams := mp_teams ;
 129: LD_ADDR_EXP 18
 133: PUSH
 134: LD_OWVAR 12
 138: ST_TO_ADDR
// end else
 139: GO 334
// begin Your_Side := 1 ;
 141: LD_ADDR_OWVAR 2
 145: PUSH
 146: LD_INT 1
 148: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 149: LD_ADDR_EXP 20
 153: PUSH
 154: LD_INT 1
 156: PUSH
 157: LD_INT 2
 159: PUSH
 160: LD_INT 3
 162: PUSH
 163: LD_INT 4
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 188: LD_ADDR_EXP 17
 192: PUSH
 193: LD_INT 1
 195: PUSH
 196: LD_INT 1
 198: PUSH
 199: LD_INT 2
 201: PUSH
 202: LD_INT 2
 204: PUSH
 205: LD_INT 0
 207: PUSH
 208: LD_INT 0
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 0 , 0 , 0 , 0 ] ;
 227: LD_ADDR_EXP 21
 231: PUSH
 232: LD_INT 1
 234: PUSH
 235: LD_INT 2
 237: PUSH
 238: LD_INT 3
 240: PUSH
 241: LD_INT 1
 243: PUSH
 244: LD_INT 0
 246: PUSH
 247: LD_INT 0
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 0
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: LIST
 264: LIST
 265: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 266: LD_ADDR_EXP 19
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: LD_INT 0
 279: PUSH
 280: LD_INT 0
 282: PUSH
 283: LD_INT 0
 285: PUSH
 286: LD_INT 0
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: LIST
 299: LIST
 300: LIST
 301: LIST
 302: LIST
 303: LIST
 304: ST_TO_ADDR
// Teams := [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 305: LD_ADDR_EXP 18
 309: PUSH
 310: LD_INT 1
 312: PUSH
 313: LD_INT 2
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: LD_INT 3
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: ST_TO_ADDR
// end ; for i := 1 to 8 do
 334: LD_ADDR_VAR 0 2
 338: PUSH
 339: DOUBLE
 340: LD_INT 1
 342: DEC
 343: ST_TO_ADDR
 344: LD_INT 8
 346: PUSH
 347: FOR_TO
 348: IFFALSE 435
// if Multiplayer_GetPlayerIsSpec ( i ) then
 350: LD_VAR 0 2
 354: PPUSH
 355: CALL_OW 530
 359: IFFALSE 433
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 361: LD_ADDR_EXP 20
 365: PUSH
 366: LD_EXP 20
 370: PPUSH
 371: LD_VAR 0 2
 375: PPUSH
 376: LD_INT 0
 378: PPUSH
 379: CALL_OW 1
 383: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 384: LD_ADDR_EXP 18
 388: PUSH
 389: LD_EXP 18
 393: PPUSH
 394: LD_EXP 17
 398: PUSH
 399: LD_VAR 0 2
 403: ARRAY
 404: PPUSH
 405: LD_EXP 18
 409: PUSH
 410: LD_EXP 17
 414: PUSH
 415: LD_VAR 0 2
 419: ARRAY
 420: ARRAY
 421: PUSH
 422: LD_VAR 0 2
 426: DIFF
 427: PPUSH
 428: CALL_OW 1
 432: ST_TO_ADDR
// end ;
 433: GO 347
 435: POP
 436: POP
// Position_Sides := [ 0 , 0 , 0 , 0 ] ;
 437: LD_ADDR_EXP 23
 441: PUSH
 442: LD_INT 0
 444: PUSH
 445: LD_INT 0
 447: PUSH
 448: LD_INT 0
 450: PUSH
 451: LD_INT 0
 453: PUSH
 454: EMPTY
 455: LIST
 456: LIST
 457: LIST
 458: LIST
 459: ST_TO_ADDR
// for i := 1 to 8 do
 460: LD_ADDR_VAR 0 2
 464: PUSH
 465: DOUBLE
 466: LD_INT 1
 468: DEC
 469: ST_TO_ADDR
 470: LD_INT 8
 472: PUSH
 473: FOR_TO
 474: IFFALSE 521
// if Side_Positions [ i ] then
 476: LD_EXP 20
 480: PUSH
 481: LD_VAR 0 2
 485: ARRAY
 486: IFFALSE 519
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 488: LD_ADDR_EXP 23
 492: PUSH
 493: LD_EXP 23
 497: PPUSH
 498: LD_EXP 20
 502: PUSH
 503: LD_VAR 0 2
 507: ARRAY
 508: PPUSH
 509: LD_VAR 0 2
 513: PPUSH
 514: CALL_OW 1
 518: ST_TO_ADDR
 519: GO 473
 521: POP
 522: POP
// Team_Game := Side_Teams [ your_side ] ;
 523: LD_ADDR_EXP 22
 527: PUSH
 528: LD_EXP 17
 532: PUSH
 533: LD_OWVAR 2
 537: ARRAY
 538: ST_TO_ADDR
// if Multiplayer then
 539: LD_OWVAR 4
 543: IFFALSE 750
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 545: LD_ADDR_EXP 38
 549: PUSH
 550: LD_INT 0
 552: PPUSH
 553: CALL_OW 426
 557: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 558: LD_ADDR_EXP 39
 562: PUSH
 563: LD_INT 1
 565: PPUSH
 566: CALL_OW 426
 570: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 571: LD_ADDR_EXP 40
 575: PUSH
 576: LD_INT 2
 578: PPUSH
 579: CALL_OW 426
 583: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 584: LD_ADDR_EXP 41
 588: PUSH
 589: LD_INT 3
 591: PPUSH
 592: CALL_OW 426
 596: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 597: LD_ADDR_EXP 42
 601: PUSH
 602: LD_INT 4
 604: PPUSH
 605: CALL_OW 426
 609: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 610: LD_ADDR_EXP 43
 614: PUSH
 615: LD_INT 5
 617: PPUSH
 618: CALL_OW 426
 622: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 623: LD_ADDR_EXP 45
 627: PUSH
 628: LD_INT 10
 630: PPUSH
 631: CALL_OW 426
 635: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 636: LD_ADDR_EXP 46
 640: PUSH
 641: LD_INT 11
 643: PPUSH
 644: CALL_OW 426
 648: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 649: LD_ADDR_EXP 47
 653: PUSH
 654: LD_INT 12
 656: PPUSH
 657: CALL_OW 426
 661: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 13 ) ;
 662: LD_ADDR_EXP 49
 666: PUSH
 667: LD_INT 13
 669: PPUSH
 670: CALL_OW 426
 674: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 14 ) ;
 675: LD_ADDR_EXP 48
 679: PUSH
 680: LD_INT 14
 682: PPUSH
 683: CALL_OW 426
 687: ST_TO_ADDR
// def_tree_function := GetMultiplayerSetting ( 15 ) ;
 688: LD_ADDR_EXP 1
 692: PUSH
 693: LD_INT 15
 695: PPUSH
 696: CALL_OW 426
 700: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 701: LD_ADDR_EXP 50
 705: PUSH
 706: LD_INT 17
 708: PPUSH
 709: CALL_OW 426
 713: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 714: LD_ADDR_EXP 51
 718: PUSH
 719: LD_INT 20
 721: PPUSH
 722: CALL_OW 426
 726: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 727: LD_ADDR_VAR 0 3
 731: PUSH
 732: LD_INT 22
 734: PPUSH
 735: CALL_OW 426
 739: ST_TO_ADDR
// def_win_rules = 0 ;
 740: LD_ADDR_EXP 15
 744: PUSH
 745: LD_INT 0
 747: ST_TO_ADDR
// end else
 748: GO 882
// begin Randomize ;
 750: CALL_OW 10
// def_base_level := 2 ;
 754: LD_ADDR_EXP 38
 758: PUSH
 759: LD_INT 2
 761: ST_TO_ADDR
// def_amount_of_people := 1 ;
 762: LD_ADDR_EXP 39
 766: PUSH
 767: LD_INT 1
 769: ST_TO_ADDR
// def_skill_level := 1 ;
 770: LD_ADDR_EXP 40
 774: PUSH
 775: LD_INT 1
 777: ST_TO_ADDR
// def_starting_resources := 2 ;
 778: LD_ADDR_EXP 41
 782: PUSH
 783: LD_INT 2
 785: ST_TO_ADDR
// def_shipments_density := 1 ;
 786: LD_ADDR_EXP 42
 790: PUSH
 791: LD_INT 1
 793: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 794: LD_ADDR_EXP 43
 798: PUSH
 799: LD_INT 0
 801: ST_TO_ADDR
// def_shared_vision := 1 ;
 802: LD_ADDR_EXP 45
 806: PUSH
 807: LD_INT 1
 809: ST_TO_ADDR
// def_morale_flags := 1 ;
 810: LD_ADDR_EXP 46
 814: PUSH
 815: LD_INT 1
 817: ST_TO_ADDR
// def_siberite_detection := 1 ;
 818: LD_ADDR_EXP 47
 822: PUSH
 823: LD_INT 1
 825: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 826: LD_ADDR_EXP 49
 830: PUSH
 831: LD_INT 3
 833: ST_TO_ADDR
// def_people_respawning := 2 ;
 834: LD_ADDR_EXP 48
 838: PUSH
 839: LD_INT 2
 841: ST_TO_ADDR
// def_tree_function := 7 ;
 842: LD_ADDR_EXP 1
 846: PUSH
 847: LD_INT 7
 849: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 850: LD_ADDR_EXP 50
 854: PUSH
 855: LD_INT 0
 857: ST_TO_ADDR
// def_builduptime := 1 ;
 858: LD_ADDR_EXP 51
 862: PUSH
 863: LD_INT 1
 865: ST_TO_ADDR
// tech_level = 4 ;
 866: LD_ADDR_VAR 0 3
 870: PUSH
 871: LD_INT 4
 873: ST_TO_ADDR
// def_win_rules = 0 ;
 874: LD_ADDR_EXP 15
 878: PUSH
 879: LD_INT 0
 881: ST_TO_ADDR
// end ; if def_tree_function = 7 then
 882: LD_EXP 1
 886: PUSH
 887: LD_INT 7
 889: EQUAL
 890: IFFALSE 908
// def_tree_function := Rand ( 1 , 5 ) ;
 892: LD_ADDR_EXP 1
 896: PUSH
 897: LD_INT 1
 899: PPUSH
 900: LD_INT 5
 902: PPUSH
 903: CALL_OW 12
 907: ST_TO_ADDR
// InitGameRules ;
 908: CALL 7826 0 0
// if def_game_rules = 0 then
 912: LD_EXP 37
 916: PUSH
 917: LD_INT 0
 919: EQUAL
 920: IFFALSE 947
// begin if isSGUI then
 922: LD_OWVAR 83
 926: IFFALSE 934
// setMpTechs ( ) else
 928: CALL 11969 0 0
 932: GO 947
// begin SetMpTechLevel ( tech_level + 1 ) ;
 934: LD_VAR 0 3
 938: PUSH
 939: LD_INT 1
 941: PLUS
 942: PPUSH
 943: CALL 12116 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 947: LD_ADDR_EXP 2
 951: PUSH
 952: LD_INT 0
 954: PUSH
 955: LD_INT 1
 957: PUSH
 958: LD_INT 1
 960: PUSH
 961: LD_INT 1
 963: PUSH
 964: EMPTY
 965: LIST
 966: LIST
 967: LIST
 968: LIST
 969: PUSH
 970: LD_EXP 38
 974: PUSH
 975: LD_INT 1
 977: PLUS
 978: ARRAY
 979: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 , 3 ] [ def_base_level + 1 ] ;
 980: LD_ADDR_EXP 3
 984: PUSH
 985: LD_INT 0
 987: PUSH
 988: LD_INT 0
 990: PUSH
 991: LD_INT 2
 993: PUSH
 994: LD_INT 3
 996: PUSH
 997: EMPTY
 998: LIST
 999: LIST
1000: LIST
1001: LIST
1002: PUSH
1003: LD_EXP 38
1007: PUSH
1008: LD_INT 1
1010: PLUS
1011: ARRAY
1012: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1013: LD_ADDR_EXP 5
1017: PUSH
1018: LD_INT 2
1020: PUSH
1021: LD_INT 3
1023: PUSH
1024: LD_INT 4
1026: PUSH
1027: LD_INT 5
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: PUSH
1036: LD_EXP 40
1040: PUSH
1041: LD_INT 1
1043: PLUS
1044: ARRAY
1045: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1046: LD_ADDR_EXP 7
1050: PUSH
1051: LD_INT 0
1053: PUSH
1054: LD_INT 0
1056: PUSH
1057: LD_INT 0
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: LIST
1064: PUSH
1065: LD_INT 30
1067: PUSH
1068: LD_INT 0
1070: PUSH
1071: LD_INT 0
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: LIST
1078: PUSH
1079: LD_INT 50
1081: PUSH
1082: LD_INT 20
1084: PUSH
1085: LD_INT 0
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: PUSH
1093: LD_INT 80
1095: PUSH
1096: LD_INT 40
1098: PUSH
1099: LD_INT 20
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: LIST
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_EXP 41
1117: PUSH
1118: LD_INT 1
1120: PLUS
1121: ARRAY
1122: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1123: LD_ADDR_EXP 6
1127: PUSH
1128: LD_INT 10
1130: PUSH
1131: EMPTY
1132: LIST
1133: PUSH
1134: LD_INT 7
1136: PUSH
1137: LD_INT 14
1139: PUSH
1140: EMPTY
1141: LIST
1142: LIST
1143: PUSH
1144: LD_INT 6
1146: PUSH
1147: LD_INT 12
1149: PUSH
1150: LD_INT 18
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: LIST
1157: PUSH
1158: LD_INT 5
1160: PUSH
1161: LD_INT 10
1163: PUSH
1164: LD_INT 15
1166: PUSH
1167: LD_INT 20
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: LIST
1180: LIST
1181: PUSH
1182: LD_EXP 41
1186: PUSH
1187: LD_INT 1
1189: PLUS
1190: ARRAY
1191: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1192: LD_ADDR_EXP 4
1196: PUSH
1197: LD_EXP 39
1201: PUSH
1202: LD_INT 4
1204: PLUS
1205: ST_TO_ADDR
// shipments_density := 20 + ( def_shipments_density ) * 20 ;
1206: LD_ADDR_EXP 8
1210: PUSH
1211: LD_INT 20
1213: PUSH
1214: LD_EXP 42
1218: PUSH
1219: LD_INT 20
1221: MUL
1222: PLUS
1223: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1224: LD_ADDR_EXP 13
1228: PUSH
1229: LD_INT 0
1231: PUSH
1232: LD_INT 1
1234: PUSH
1235: LD_INT 2
1237: PUSH
1238: LD_INT 3
1240: PUSH
1241: EMPTY
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: PUSH
1247: LD_EXP 49
1251: PUSH
1252: LD_INT 1
1254: PLUS
1255: ARRAY
1256: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1257: LD_ADDR_EXP 10
1261: PUSH
1262: LD_INT 0
1264: PUSH
1265: LD_INT 8400
1267: PUSH
1268: LD_INT 1750
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: LIST
1275: PUSH
1276: LD_EXP 48
1280: PUSH
1281: LD_INT 1
1283: PLUS
1284: ARRAY
1285: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1286: LD_ADDR_EXP 11
1290: PUSH
1291: LD_INT 0
1293: PUSH
1294: LD_INT 21000
1296: PUSH
1297: LD_INT 4200
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: LIST
1304: PUSH
1305: LD_EXP 48
1309: PUSH
1310: LD_INT 1
1312: PLUS
1313: ARRAY
1314: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1315: LD_ADDR_EXP 9
1319: PUSH
1320: LD_INT 1
1322: NEG
1323: PUSH
1324: LD_INT 350
1326: PUSH
1327: LD_INT 700
1329: PUSH
1330: LD_INT 1400
1332: PUSH
1333: LD_INT 0
1335: PUSH
1336: EMPTY
1337: LIST
1338: LIST
1339: LIST
1340: LIST
1341: LIST
1342: PUSH
1343: LD_EXP 46
1347: PUSH
1348: LD_INT 1
1350: PLUS
1351: ARRAY
1352: ST_TO_ADDR
// battle_flags_id := [ ] ;
1353: LD_ADDR_EXP 27
1357: PUSH
1358: EMPTY
1359: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1360: LD_ADDR_EXP 12
1364: PUSH
1365: LD_INT 0
1367: PUSH
1368: LD_INT 1
1370: PUSH
1371: LD_INT 63000
1373: PUSH
1374: LD_INT 126000
1376: PUSH
1377: LD_INT 189000
1379: PUSH
1380: LD_INT 252000
1382: PUSH
1383: EMPTY
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: PUSH
1391: LD_EXP 50
1395: PUSH
1396: LD_INT 1
1398: PLUS
1399: ARRAY
1400: ST_TO_ADDR
// tree_function := [ [ 0 , 0 , 0 , 0 , 0 ] , [ 2 , 0 , 0 , 0 , 0 ] , [ 0 , 4 , 0 , 0 , 0 ] , [ 0 , 0 , 2 , 0 , 0 ] , [ 0 , 0 , 0 , 3 , 0 ] , [ 1 , 2 , 1 , 2 , 2 ] , [ 0 , 0 , 0 , 0 , 3 ] ] [ def_tree_function + 1 ] ;
1401: LD_ADDR_EXP 14
1405: PUSH
1406: LD_INT 0
1408: PUSH
1409: LD_INT 0
1411: PUSH
1412: LD_INT 0
1414: PUSH
1415: LD_INT 0
1417: PUSH
1418: LD_INT 0
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: PUSH
1428: LD_INT 2
1430: PUSH
1431: LD_INT 0
1433: PUSH
1434: LD_INT 0
1436: PUSH
1437: LD_INT 0
1439: PUSH
1440: LD_INT 0
1442: PUSH
1443: EMPTY
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: LIST
1449: PUSH
1450: LD_INT 0
1452: PUSH
1453: LD_INT 4
1455: PUSH
1456: LD_INT 0
1458: PUSH
1459: LD_INT 0
1461: PUSH
1462: LD_INT 0
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: PUSH
1472: LD_INT 0
1474: PUSH
1475: LD_INT 0
1477: PUSH
1478: LD_INT 2
1480: PUSH
1481: LD_INT 0
1483: PUSH
1484: LD_INT 0
1486: PUSH
1487: EMPTY
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 0
1496: PUSH
1497: LD_INT 0
1499: PUSH
1500: LD_INT 0
1502: PUSH
1503: LD_INT 3
1505: PUSH
1506: LD_INT 0
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: PUSH
1516: LD_INT 1
1518: PUSH
1519: LD_INT 2
1521: PUSH
1522: LD_INT 1
1524: PUSH
1525: LD_INT 2
1527: PUSH
1528: LD_INT 2
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: PUSH
1538: LD_INT 0
1540: PUSH
1541: LD_INT 0
1543: PUSH
1544: LD_INT 0
1546: PUSH
1547: LD_INT 0
1549: PUSH
1550: LD_INT 3
1552: PUSH
1553: EMPTY
1554: LIST
1555: LIST
1556: LIST
1557: LIST
1558: LIST
1559: PUSH
1560: EMPTY
1561: LIST
1562: LIST
1563: LIST
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: PUSH
1569: LD_EXP 1
1573: PUSH
1574: LD_INT 1
1576: PLUS
1577: ARRAY
1578: ST_TO_ADDR
// buildUpTime_Delay := [ 0 , 5 5$00 , 10 10$00 , 15 15$00 ] [ def_builduptime + 1 ] ;
1579: LD_ADDR_EXP 16
1583: PUSH
1584: LD_INT 0
1586: PUSH
1587: LD_INT 10500
1589: PUSH
1590: LD_INT 21000
1592: PUSH
1593: LD_INT 31500
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: PUSH
1602: LD_EXP 51
1606: PUSH
1607: LD_INT 1
1609: PLUS
1610: ARRAY
1611: ST_TO_ADDR
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] ;
1612: LD_ADDR_EXP 55
1616: PUSH
1617: LD_INT 8
1619: PUSH
1620: LD_INT 11
1622: PUSH
1623: LD_INT 9
1625: PUSH
1626: LD_INT 10
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: ST_TO_ADDR
// end ;
1635: LD_VAR 0 1
1639: RET
// function prepare_map_coordinates ; var side , dep , br1 , br2 , br3 , un , i ; begin
1640: LD_INT 0
1642: PPUSH
1643: PPUSH
1644: PPUSH
1645: PPUSH
1646: PPUSH
1647: PPUSH
1648: PPUSH
1649: PPUSH
// depot_def = [ ] ;
1650: LD_ADDR_EXP 24
1654: PUSH
1655: EMPTY
1656: ST_TO_ADDR
// breastworks_def = [ ] ;
1657: LD_ADDR_EXP 25
1661: PUSH
1662: EMPTY
1663: ST_TO_ADDR
// for side := 1 to 4 do
1664: LD_ADDR_VAR 0 2
1668: PUSH
1669: DOUBLE
1670: LD_INT 1
1672: DEC
1673: ST_TO_ADDR
1674: LD_INT 4
1676: PUSH
1677: FOR_TO
1678: IFFALSE 2033
// begin dep := side * 4 - 3 ;
1680: LD_ADDR_VAR 0 3
1684: PUSH
1685: LD_VAR 0 2
1689: PUSH
1690: LD_INT 4
1692: MUL
1693: PUSH
1694: LD_INT 3
1696: MINUS
1697: ST_TO_ADDR
// br1 := side * 4 - 2 ;
1698: LD_ADDR_VAR 0 4
1702: PUSH
1703: LD_VAR 0 2
1707: PUSH
1708: LD_INT 4
1710: MUL
1711: PUSH
1712: LD_INT 2
1714: MINUS
1715: ST_TO_ADDR
// br2 := side * 4 - 1 ;
1716: LD_ADDR_VAR 0 5
1720: PUSH
1721: LD_VAR 0 2
1725: PUSH
1726: LD_INT 4
1728: MUL
1729: PUSH
1730: LD_INT 1
1732: MINUS
1733: ST_TO_ADDR
// br3 := side * 4 ;
1734: LD_ADDR_VAR 0 6
1738: PUSH
1739: LD_VAR 0 2
1743: PUSH
1744: LD_INT 4
1746: MUL
1747: ST_TO_ADDR
// depot_def := depot_def ^ [ [ GetX ( dep ) , GetY ( dep ) , GetDir ( dep ) ] ] ;
1748: LD_ADDR_EXP 24
1752: PUSH
1753: LD_EXP 24
1757: PUSH
1758: LD_VAR 0 3
1762: PPUSH
1763: CALL_OW 250
1767: PUSH
1768: LD_VAR 0 3
1772: PPUSH
1773: CALL_OW 251
1777: PUSH
1778: LD_VAR 0 3
1782: PPUSH
1783: CALL_OW 254
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: LIST
1792: PUSH
1793: EMPTY
1794: LIST
1795: ADD
1796: ST_TO_ADDR
// start_def := start_def ^ [ [ ShiftX ( GetX ( Dep ) , GetDir ( Dep ) , 6 ) , ShiftY ( GetY ( Dep ) , GetDir ( Dep ) , 6 ) ] ] ;
1797: LD_ADDR_EXP 26
1801: PUSH
1802: LD_EXP 26
1806: PUSH
1807: LD_VAR 0 3
1811: PPUSH
1812: CALL_OW 250
1816: PPUSH
1817: LD_VAR 0 3
1821: PPUSH
1822: CALL_OW 254
1826: PPUSH
1827: LD_INT 6
1829: PPUSH
1830: CALL_OW 272
1834: PUSH
1835: LD_VAR 0 3
1839: PPUSH
1840: CALL_OW 251
1844: PPUSH
1845: LD_VAR 0 3
1849: PPUSH
1850: CALL_OW 254
1854: PPUSH
1855: LD_INT 6
1857: PPUSH
1858: CALL_OW 273
1862: PUSH
1863: EMPTY
1864: LIST
1865: LIST
1866: PUSH
1867: EMPTY
1868: LIST
1869: ADD
1870: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ GetX ( br1 ) , GetY ( br1 ) , GetDir ( br1 ) ] , [ GetX ( br2 ) , GetY ( br2 ) , GetDir ( br2 ) ] , [ GetX ( br3 ) , GetY ( br3 ) , GetDir ( br3 ) ] ] ] ;
1871: LD_ADDR_EXP 25
1875: PUSH
1876: LD_EXP 25
1880: PUSH
1881: LD_VAR 0 4
1885: PPUSH
1886: CALL_OW 250
1890: PUSH
1891: LD_VAR 0 4
1895: PPUSH
1896: CALL_OW 251
1900: PUSH
1901: LD_VAR 0 4
1905: PPUSH
1906: CALL_OW 254
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: LIST
1915: PUSH
1916: LD_VAR 0 5
1920: PPUSH
1921: CALL_OW 250
1925: PUSH
1926: LD_VAR 0 5
1930: PPUSH
1931: CALL_OW 251
1935: PUSH
1936: LD_VAR 0 5
1940: PPUSH
1941: CALL_OW 254
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: PUSH
1951: LD_VAR 0 6
1955: PPUSH
1956: CALL_OW 250
1960: PUSH
1961: LD_VAR 0 6
1965: PPUSH
1966: CALL_OW 251
1970: PUSH
1971: LD_VAR 0 6
1975: PPUSH
1976: CALL_OW 254
1980: PUSH
1981: EMPTY
1982: LIST
1983: LIST
1984: LIST
1985: PUSH
1986: EMPTY
1987: LIST
1988: LIST
1989: LIST
1990: PUSH
1991: EMPTY
1992: LIST
1993: ADD
1994: ST_TO_ADDR
// DestroyUnit ( dep ) ;
1995: LD_VAR 0 3
1999: PPUSH
2000: CALL_OW 65
// DestroyUnit ( br1 ) ;
2004: LD_VAR 0 4
2008: PPUSH
2009: CALL_OW 65
// DestroyUnit ( br2 ) ;
2013: LD_VAR 0 5
2017: PPUSH
2018: CALL_OW 65
// DestroyUnit ( br3 ) ;
2022: LD_VAR 0 6
2026: PPUSH
2027: CALL_OW 65
// end ;
2031: GO 1677
2033: POP
2034: POP
// if not def_extra_oil_deposits then
2035: LD_EXP 43
2039: NOT
2040: IFFALSE 2122
// for i in [ [ 52 , 44 ] , [ 84 , 37 ] , [ 74 , 81 ] , [ 106 , 77 ] ] do
2042: LD_ADDR_VAR 0 8
2046: PUSH
2047: LD_INT 52
2049: PUSH
2050: LD_INT 44
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: PUSH
2057: LD_INT 84
2059: PUSH
2060: LD_INT 37
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: PUSH
2067: LD_INT 74
2069: PUSH
2070: LD_INT 81
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: PUSH
2077: LD_INT 106
2079: PUSH
2080: LD_INT 77
2082: PUSH
2083: EMPTY
2084: LIST
2085: LIST
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: PUSH
2093: FOR_IN
2094: IFFALSE 2120
// begin RemoveDepositXY ( i [ 1 ] , i [ 2 ] ) ;
2096: LD_VAR 0 8
2100: PUSH
2101: LD_INT 1
2103: ARRAY
2104: PPUSH
2105: LD_VAR 0 8
2109: PUSH
2110: LD_INT 2
2112: ARRAY
2113: PPUSH
2114: CALL_OW 63
// end ;
2118: GO 2093
2120: POP
2121: POP
// end ;
2122: LD_VAR 0 1
2126: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2127: LD_INT 0
2129: PPUSH
2130: PPUSH
2131: PPUSH
// if not Team_Game then
2132: LD_EXP 22
2136: NOT
2137: IFFALSE 2235
// begin for i = 1 to 8 do
2139: LD_ADDR_VAR 0 2
2143: PUSH
2144: DOUBLE
2145: LD_INT 1
2147: DEC
2148: ST_TO_ADDR
2149: LD_INT 8
2151: PUSH
2152: FOR_TO
2153: IFFALSE 2231
// for j = 1 to 8 do
2155: LD_ADDR_VAR 0 3
2159: PUSH
2160: DOUBLE
2161: LD_INT 1
2163: DEC
2164: ST_TO_ADDR
2165: LD_INT 8
2167: PUSH
2168: FOR_TO
2169: IFFALSE 2227
// if i <> j then
2171: LD_VAR 0 2
2175: PUSH
2176: LD_VAR 0 3
2180: NONEQUAL
2181: IFFALSE 2205
// SetAttitude ( i , j , att_neutral , true ) else
2183: LD_VAR 0 2
2187: PPUSH
2188: LD_VAR 0 3
2192: PPUSH
2193: LD_INT 0
2195: PPUSH
2196: LD_INT 1
2198: PPUSH
2199: CALL_OW 80
2203: GO 2225
// SetAttitude ( i , j , att_friend , true ) ;
2205: LD_VAR 0 2
2209: PPUSH
2210: LD_VAR 0 3
2214: PPUSH
2215: LD_INT 1
2217: PPUSH
2218: LD_INT 1
2220: PPUSH
2221: CALL_OW 80
2225: GO 2168
2227: POP
2228: POP
2229: GO 2152
2231: POP
2232: POP
// end else
2233: GO 2410
// begin if def_shared_vision then
2235: LD_EXP 45
2239: IFFALSE 2304
// begin for i in Teams do
2241: LD_ADDR_VAR 0 2
2245: PUSH
2246: LD_EXP 18
2250: PUSH
2251: FOR_IN
2252: IFFALSE 2302
// for j = 2 to i do
2254: LD_ADDR_VAR 0 3
2258: PUSH
2259: DOUBLE
2260: LD_INT 2
2262: DEC
2263: ST_TO_ADDR
2264: LD_VAR 0 2
2268: PUSH
2269: FOR_TO
2270: IFFALSE 2298
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2272: LD_VAR 0 2
2276: PUSH
2277: LD_VAR 0 3
2281: ARRAY
2282: PPUSH
2283: LD_VAR 0 2
2287: PUSH
2288: LD_INT 1
2290: ARRAY
2291: PPUSH
2292: CALL_OW 343
2296: GO 2269
2298: POP
2299: POP
2300: GO 2251
2302: POP
2303: POP
// end ; for i = 1 to 8 do
2304: LD_ADDR_VAR 0 2
2308: PUSH
2309: DOUBLE
2310: LD_INT 1
2312: DEC
2313: ST_TO_ADDR
2314: LD_INT 8
2316: PUSH
2317: FOR_TO
2318: IFFALSE 2408
// for j = 1 to 8 do
2320: LD_ADDR_VAR 0 3
2324: PUSH
2325: DOUBLE
2326: LD_INT 1
2328: DEC
2329: ST_TO_ADDR
2330: LD_INT 8
2332: PUSH
2333: FOR_TO
2334: IFFALSE 2404
// if Side_Teams [ i ] = Side_Teams [ j ] then
2336: LD_EXP 17
2340: PUSH
2341: LD_VAR 0 2
2345: ARRAY
2346: PUSH
2347: LD_EXP 17
2351: PUSH
2352: LD_VAR 0 3
2356: ARRAY
2357: EQUAL
2358: IFFALSE 2382
// SetAttitude ( i , j , att_friend , true ) else
2360: LD_VAR 0 2
2364: PPUSH
2365: LD_VAR 0 3
2369: PPUSH
2370: LD_INT 1
2372: PPUSH
2373: LD_INT 1
2375: PPUSH
2376: CALL_OW 80
2380: GO 2402
// SetAttitude ( i , j , att_enemy , true ) ;
2382: LD_VAR 0 2
2386: PPUSH
2387: LD_VAR 0 3
2391: PPUSH
2392: LD_INT 2
2394: PPUSH
2395: LD_INT 1
2397: PPUSH
2398: CALL_OW 80
2402: GO 2333
2404: POP
2405: POP
2406: GO 2317
2408: POP
2409: POP
// end ; end ;
2410: LD_VAR 0 1
2414: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2415: LD_INT 0
2417: PPUSH
2418: PPUSH
2419: PPUSH
2420: PPUSH
// result := [ ] ;
2421: LD_ADDR_VAR 0 7
2425: PUSH
2426: EMPTY
2427: ST_TO_ADDR
// for i := 1 to count do
2428: LD_ADDR_VAR 0 8
2432: PUSH
2433: DOUBLE
2434: LD_INT 1
2436: DEC
2437: ST_TO_ADDR
2438: LD_VAR 0 1
2442: PUSH
2443: FOR_TO
2444: IFFALSE 2862
// begin uc_direction := Rand ( 0 , 5 ) ;
2446: LD_ADDR_OWVAR 24
2450: PUSH
2451: LD_INT 0
2453: PPUSH
2454: LD_INT 5
2456: PPUSH
2457: CALL_OW 12
2461: ST_TO_ADDR
// if commander then
2462: LD_LOC 1
2466: IFFALSE 2575
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2468: LD_ADDR_OWVAR 26
2472: PUSH
2473: LD_OWVAR 19
2477: PUSH
2478: LD_OWVAR 20
2482: ARRAY
2483: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2484: LD_INT 1
2486: PPUSH
2487: LD_INT 2
2489: PPUSH
2490: CALL_OW 12
2494: PPUSH
2495: LD_VAR 0 2
2499: PPUSH
2500: LD_EXP 5
2504: PUSH
2505: LD_INT 2
2507: PLUS
2508: PPUSH
2509: CALL_OW 380
// hc_importance := 105 ;
2513: LD_ADDR_OWVAR 32
2517: PUSH
2518: LD_INT 105
2520: ST_TO_ADDR
// commander := false ;
2521: LD_ADDR_LOC 1
2525: PUSH
2526: LD_INT 0
2528: ST_TO_ADDR
// if Multiplayer then
2529: LD_OWVAR 4
2533: IFFALSE 2573
// begin hc_gallery := MULTIAVATARS ;
2535: LD_ADDR_OWVAR 33
2539: PUSH
2540: LD_STRING MULTIAVATARS
2542: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2543: LD_ADDR_OWVAR 34
2547: PUSH
2548: LD_OWVAR 20
2552: PPUSH
2553: CALL_OW 525
2557: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2558: LD_ADDR_OWVAR 27
2562: PUSH
2563: LD_OWVAR 20
2567: PPUSH
2568: CALL_OW 526
2572: ST_TO_ADDR
// end ; end else
2573: GO 2638
// begin hc_name :=  ;
2575: LD_ADDR_OWVAR 26
2579: PUSH
2580: LD_STRING 
2582: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2583: LD_INT 1
2585: PPUSH
2586: LD_INT 2
2588: PPUSH
2589: CALL_OW 12
2593: PPUSH
2594: LD_VAR 0 2
2598: PPUSH
2599: LD_EXP 5
2603: PPUSH
2604: CALL_OW 380
// hc_importance := 0 ;
2608: LD_ADDR_OWVAR 32
2612: PUSH
2613: LD_INT 0
2615: ST_TO_ADDR
// if Multiplayer then
2616: LD_OWVAR 4
2620: IFFALSE 2638
// begin hc_gallery :=  ;
2622: LD_ADDR_OWVAR 33
2626: PUSH
2627: LD_STRING 
2629: ST_TO_ADDR
// hc_face_number := 0 ;
2630: LD_ADDR_OWVAR 34
2634: PUSH
2635: LD_INT 0
2637: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2638: LD_ADDR_VAR 0 10
2642: PUSH
2643: CALL_OW 44
2647: ST_TO_ADDR
// if global_defined then
2648: LD_LOC 3
2652: IFFALSE 2792
// begin if ( cl = class_soldier ) then
2654: LD_VAR 0 2
2658: PUSH
2659: LD_INT 1
2661: EQUAL
2662: IFFALSE 2682
// j := i + soldiers_created else
2664: LD_ADDR_VAR 0 9
2668: PUSH
2669: LD_VAR 0 8
2673: PUSH
2674: LD_LOC 4
2678: PLUS
2679: ST_TO_ADDR
2680: GO 2692
// j := i ;
2682: LD_ADDR_VAR 0 9
2686: PUSH
2687: LD_VAR 0 8
2691: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2692: LD_LOC 2
2696: PUSH
2697: LD_VAR 0 2
2701: ARRAY
2702: PUSH
2703: LD_VAR 0 9
2707: ARRAY
2708: PPUSH
2709: LD_VAR 0 10
2713: PPUSH
2714: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2718: LD_VAR 0 10
2722: PPUSH
2723: LD_INT 2
2725: PPUSH
2726: LD_LOC 2
2730: PUSH
2731: LD_VAR 0 2
2735: ARRAY
2736: PUSH
2737: LD_VAR 0 9
2741: ARRAY
2742: PPUSH
2743: LD_INT 2
2745: PPUSH
2746: CALL_OW 260
2750: PPUSH
2751: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2755: LD_VAR 0 10
2759: PPUSH
2760: LD_INT 1
2762: PPUSH
2763: LD_LOC 2
2767: PUSH
2768: LD_VAR 0 2
2772: ARRAY
2773: PUSH
2774: LD_VAR 0 9
2778: ARRAY
2779: PPUSH
2780: LD_INT 1
2782: PPUSH
2783: CALL_OW 260
2787: PPUSH
2788: CALL_OW 239
// end ; if building then
2792: LD_VAR 0 6
2796: IFFALSE 2814
// PlaceHumanInUnit ( un , building ) else
2798: LD_VAR 0 10
2802: PPUSH
2803: LD_VAR 0 6
2807: PPUSH
2808: CALL_OW 52
2812: GO 2841
// PlaceUnitXYR ( un , x , y , r , false ) ;
2814: LD_VAR 0 10
2818: PPUSH
2819: LD_VAR 0 3
2823: PPUSH
2824: LD_VAR 0 4
2828: PPUSH
2829: LD_VAR 0 5
2833: PPUSH
2834: LD_INT 0
2836: PPUSH
2837: CALL_OW 50
// result := result ^ [ un ] ;
2841: LD_ADDR_VAR 0 7
2845: PUSH
2846: LD_VAR 0 7
2850: PUSH
2851: LD_VAR 0 10
2855: PUSH
2856: EMPTY
2857: LIST
2858: ADD
2859: ST_TO_ADDR
// end ;
2860: GO 2443
2862: POP
2863: POP
// if not global_defined then
2864: LD_LOC 3
2868: NOT
2869: IFFALSE 2947
// if ( global_units >= cl ) then
2871: LD_LOC 2
2875: PUSH
2876: LD_VAR 0 2
2880: GREATEREQUAL
2881: IFFALSE 2922
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2883: LD_ADDR_LOC 2
2887: PUSH
2888: LD_LOC 2
2892: PPUSH
2893: LD_VAR 0 2
2897: PPUSH
2898: LD_LOC 2
2902: PUSH
2903: LD_VAR 0 2
2907: ARRAY
2908: PUSH
2909: LD_VAR 0 7
2913: ADD
2914: PPUSH
2915: CALL_OW 1
2919: ST_TO_ADDR
2920: GO 2947
// global_units := Replace ( global_units , cl , result ) ;
2922: LD_ADDR_LOC 2
2926: PUSH
2927: LD_LOC 2
2931: PPUSH
2932: LD_VAR 0 2
2936: PPUSH
2937: LD_VAR 0 7
2941: PPUSH
2942: CALL_OW 1
2946: ST_TO_ADDR
// if commander then
2947: LD_LOC 1
2951: IFFALSE 2998
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2953: LD_ADDR_EXP 28
2957: PUSH
2958: LD_EXP 28
2962: PPUSH
2963: LD_OWVAR 20
2967: PPUSH
2968: LD_EXP 28
2972: PUSH
2973: LD_OWVAR 20
2977: ARRAY
2978: PUSH
2979: LD_VAR 0 10
2983: ADD
2984: PPUSH
2985: CALL_OW 1
2989: ST_TO_ADDR
// commander := false ;
2990: LD_ADDR_LOC 1
2994: PUSH
2995: LD_INT 0
2997: ST_TO_ADDR
// end ; end ;
2998: LD_VAR 0 7
3002: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3003: LD_INT 0
3005: PPUSH
3006: PPUSH
3007: PPUSH
3008: PPUSH
3009: PPUSH
3010: PPUSH
3011: PPUSH
3012: PPUSH
3013: PPUSH
// pos := Side_Positions [ side ] ;
3014: LD_ADDR_VAR 0 3
3018: PUSH
3019: LD_EXP 20
3023: PUSH
3024: LD_VAR 0 1
3028: ARRAY
3029: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3030: LD_ADDR_OWVAR 21
3034: PUSH
3035: LD_EXP 21
3039: PUSH
3040: LD_VAR 0 1
3044: ARRAY
3045: ST_TO_ADDR
// uc_side := side ;
3046: LD_ADDR_OWVAR 20
3050: PUSH
3051: LD_VAR 0 1
3055: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3056: LD_ADDR_VAR 0 4
3060: PUSH
3061: LD_EXP 24
3065: PUSH
3066: LD_VAR 0 3
3070: ARRAY
3071: PUSH
3072: LD_INT 1
3074: ARRAY
3075: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3076: LD_ADDR_VAR 0 5
3080: PUSH
3081: LD_EXP 24
3085: PUSH
3086: LD_VAR 0 3
3090: ARRAY
3091: PUSH
3092: LD_INT 2
3094: ARRAY
3095: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3096: LD_ADDR_VAR 0 6
3100: PUSH
3101: LD_EXP 24
3105: PUSH
3106: LD_VAR 0 3
3110: ARRAY
3111: PUSH
3112: LD_INT 3
3114: ARRAY
3115: ST_TO_ADDR
// if is_depot then
3116: LD_EXP 2
3120: IFFALSE 3253
// begin bc_type = b_depot ;
3122: LD_ADDR_OWVAR 42
3126: PUSH
3127: LD_INT 0
3129: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3130: LD_ADDR_VAR 0 10
3134: PUSH
3135: LD_VAR 0 4
3139: PPUSH
3140: LD_VAR 0 5
3144: PPUSH
3145: LD_VAR 0 6
3149: PPUSH
3150: CALL_OW 47
3154: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3155: LD_VAR 0 10
3159: PPUSH
3160: LD_STRING @
3162: PUSH
3163: LD_VAR 0 1
3167: STR
3168: PPUSH
3169: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3173: LD_VAR 0 10
3177: PPUSH
3178: CALL_OW 274
3182: PPUSH
3183: LD_INT 1
3185: PPUSH
3186: LD_EXP 7
3190: PUSH
3191: LD_INT 1
3193: ARRAY
3194: PPUSH
3195: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3199: LD_VAR 0 10
3203: PPUSH
3204: CALL_OW 274
3208: PPUSH
3209: LD_INT 2
3211: PPUSH
3212: LD_EXP 7
3216: PUSH
3217: LD_INT 2
3219: ARRAY
3220: PPUSH
3221: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3225: LD_VAR 0 10
3229: PPUSH
3230: CALL_OW 274
3234: PPUSH
3235: LD_INT 3
3237: PPUSH
3238: LD_EXP 7
3242: PUSH
3243: LD_INT 3
3245: ARRAY
3246: PPUSH
3247: CALL_OW 277
// end else
3251: GO 3397
// begin for i := 1 to 3 do
3253: LD_ADDR_VAR 0 7
3257: PUSH
3258: DOUBLE
3259: LD_INT 1
3261: DEC
3262: ST_TO_ADDR
3263: LD_INT 3
3265: PUSH
3266: FOR_TO
3267: IFFALSE 3395
// begin r := starting_resources [ i ] ;
3269: LD_ADDR_VAR 0 8
3273: PUSH
3274: LD_EXP 7
3278: PUSH
3279: LD_VAR 0 7
3283: ARRAY
3284: ST_TO_ADDR
// while r >= 10 do
3285: LD_VAR 0 8
3289: PUSH
3290: LD_INT 10
3292: GREATEREQUAL
3293: IFFALSE 3393
// if r > 50 then
3295: LD_VAR 0 8
3299: PUSH
3300: LD_INT 50
3302: GREATER
3303: IFFALSE 3349
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3305: LD_VAR 0 7
3309: PPUSH
3310: LD_INT 5
3312: PPUSH
3313: LD_VAR 0 4
3317: PPUSH
3318: LD_VAR 0 5
3322: PPUSH
3323: LD_INT 4
3325: PPUSH
3326: LD_INT 0
3328: PPUSH
3329: CALL_OW 60
// r := r - 50 ;
3333: LD_ADDR_VAR 0 8
3337: PUSH
3338: LD_VAR 0 8
3342: PUSH
3343: LD_INT 50
3345: MINUS
3346: ST_TO_ADDR
// end else
3347: GO 3391
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3349: LD_VAR 0 7
3353: PPUSH
3354: LD_VAR 0 8
3358: PUSH
3359: LD_INT 10
3361: DIV
3362: PPUSH
3363: LD_VAR 0 4
3367: PPUSH
3368: LD_VAR 0 5
3372: PPUSH
3373: LD_INT 4
3375: PPUSH
3376: LD_INT 0
3378: PPUSH
3379: CALL_OW 60
// r := 0 ;
3383: LD_ADDR_VAR 0 8
3387: PUSH
3388: LD_INT 0
3390: ST_TO_ADDR
// end ;
3391: GO 3285
// end ;
3393: GO 3266
3395: POP
3396: POP
// end ; for r in starting_crates do
3397: LD_ADDR_VAR 0 8
3401: PUSH
3402: LD_EXP 6
3406: PUSH
3407: FOR_IN
3408: IFFALSE 3440
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3410: LD_INT 1
3412: PPUSH
3413: LD_INT 5
3415: PPUSH
3416: LD_VAR 0 4
3420: PPUSH
3421: LD_VAR 0 5
3425: PPUSH
3426: LD_VAR 0 8
3430: PPUSH
3431: LD_INT 0
3433: PPUSH
3434: CALL_OW 60
3438: GO 3407
3440: POP
3441: POP
// if def_morale_flags then
3442: LD_EXP 46
3446: IFFALSE 3585
// begin x := start_def [ pos ] [ 1 ] ;
3448: LD_ADDR_VAR 0 4
3452: PUSH
3453: LD_EXP 26
3457: PUSH
3458: LD_VAR 0 3
3462: ARRAY
3463: PUSH
3464: LD_INT 1
3466: ARRAY
3467: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3468: LD_ADDR_VAR 0 5
3472: PUSH
3473: LD_EXP 26
3477: PUSH
3478: LD_VAR 0 3
3482: ARRAY
3483: PUSH
3484: LD_INT 2
3486: ARRAY
3487: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3488: LD_VAR 0 4
3492: PPUSH
3493: LD_VAR 0 5
3497: PPUSH
3498: LD_INT 12
3500: PPUSH
3501: LD_INT 2
3503: PPUSH
3504: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3508: LD_ADDR_EXP 27
3512: PUSH
3513: LD_EXP 27
3517: PUSH
3518: LD_VAR 0 1
3522: PPUSH
3523: LD_VAR 0 4
3527: PPUSH
3528: LD_VAR 0 5
3532: PPUSH
3533: LD_INT 1
3535: PUSH
3536: LD_INT 100
3538: PUSH
3539: EMPTY
3540: LIST
3541: LIST
3542: PUSH
3543: LD_INT 2
3545: PUSH
3546: LD_INT 50
3548: PUSH
3549: EMPTY
3550: LIST
3551: LIST
3552: PUSH
3553: LD_INT 3
3555: PUSH
3556: LD_INT 20
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: PUSH
3563: LD_INT 20
3565: PUSH
3566: LD_INT 100
3568: PUSH
3569: EMPTY
3570: LIST
3571: LIST
3572: PUSH
3573: EMPTY
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: PPUSH
3579: CALL_OW 418
3583: ADD
3584: ST_TO_ADDR
// end ; commander := true ;
3585: LD_ADDR_LOC 1
3589: PUSH
3590: LD_INT 1
3592: ST_TO_ADDR
// soldiers_created := 0 ;
3593: LD_ADDR_LOC 4
3597: PUSH
3598: LD_INT 0
3600: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3601: LD_ADDR_VAR 0 7
3605: PUSH
3606: DOUBLE
3607: LD_INT 1
3609: DEC
3610: ST_TO_ADDR
3611: LD_EXP 3
3615: PUSH
3616: FOR_TO
3617: IFFALSE 3770
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3619: LD_ADDR_VAR 0 4
3623: PUSH
3624: LD_EXP 25
3628: PUSH
3629: LD_VAR 0 3
3633: ARRAY
3634: PUSH
3635: LD_VAR 0 7
3639: ARRAY
3640: PUSH
3641: LD_INT 1
3643: ARRAY
3644: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3645: LD_ADDR_VAR 0 5
3649: PUSH
3650: LD_EXP 25
3654: PUSH
3655: LD_VAR 0 3
3659: ARRAY
3660: PUSH
3661: LD_VAR 0 7
3665: ARRAY
3666: PUSH
3667: LD_INT 2
3669: ARRAY
3670: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3671: LD_ADDR_VAR 0 6
3675: PUSH
3676: LD_EXP 25
3680: PUSH
3681: LD_VAR 0 3
3685: ARRAY
3686: PUSH
3687: LD_VAR 0 7
3691: ARRAY
3692: PUSH
3693: LD_INT 3
3695: ARRAY
3696: ST_TO_ADDR
// bc_type := b_breastwork ;
3697: LD_ADDR_OWVAR 42
3701: PUSH
3702: LD_INT 31
3704: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3705: LD_ADDR_VAR 0 9
3709: PUSH
3710: LD_VAR 0 4
3714: PPUSH
3715: LD_VAR 0 5
3719: PPUSH
3720: LD_VAR 0 6
3724: PPUSH
3725: CALL_OW 47
3729: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3730: LD_INT 1
3732: PPUSH
3733: LD_INT 1
3735: PPUSH
3736: LD_INT 0
3738: PPUSH
3739: LD_INT 0
3741: PPUSH
3742: LD_INT 0
3744: PPUSH
3745: LD_VAR 0 9
3749: PPUSH
3750: CALL 2415 0 6
// soldiers_created := soldiers_created + 1 ;
3754: LD_ADDR_LOC 4
3758: PUSH
3759: LD_LOC 4
3763: PUSH
3764: LD_INT 1
3766: PLUS
3767: ST_TO_ADDR
// end ;
3768: GO 3616
3770: POP
3771: POP
// x := start_def [ pos ] [ 1 ] ;
3772: LD_ADDR_VAR 0 4
3776: PUSH
3777: LD_EXP 26
3781: PUSH
3782: LD_VAR 0 3
3786: ARRAY
3787: PUSH
3788: LD_INT 1
3790: ARRAY
3791: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3792: LD_ADDR_VAR 0 5
3796: PUSH
3797: LD_EXP 26
3801: PUSH
3802: LD_VAR 0 3
3806: ARRAY
3807: PUSH
3808: LD_INT 2
3810: ARRAY
3811: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3812: LD_LOC 8
3816: PUSH
3817: LD_EXP 3
3821: MINUS
3822: PPUSH
3823: LD_INT 1
3825: PPUSH
3826: LD_VAR 0 4
3830: PPUSH
3831: LD_VAR 0 5
3835: PPUSH
3836: LD_INT 5
3838: PPUSH
3839: LD_INT 0
3841: PPUSH
3842: CALL 2415 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3846: LD_LOC 5
3850: PPUSH
3851: LD_INT 2
3853: PPUSH
3854: LD_VAR 0 4
3858: PPUSH
3859: LD_VAR 0 5
3863: PPUSH
3864: LD_INT 5
3866: PPUSH
3867: LD_INT 0
3869: PPUSH
3870: CALL 2415 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3874: LD_LOC 7
3878: PPUSH
3879: LD_INT 3
3881: PPUSH
3882: LD_VAR 0 4
3886: PPUSH
3887: LD_VAR 0 5
3891: PPUSH
3892: LD_INT 5
3894: PPUSH
3895: LD_INT 0
3897: PPUSH
3898: CALL 2415 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3902: LD_LOC 6
3906: PPUSH
3907: LD_INT 4
3909: PPUSH
3910: LD_VAR 0 4
3914: PPUSH
3915: LD_VAR 0 5
3919: PPUSH
3920: LD_INT 5
3922: PPUSH
3923: LD_INT 0
3925: PPUSH
3926: CALL 2415 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3930: LD_EXP 47
3934: PUSH
3935: LD_INT 20
3937: PPUSH
3938: LD_VAR 0 1
3942: PPUSH
3943: CALL_OW 321
3947: PUSH
3948: LD_INT 1
3950: EQUAL
3951: AND
3952: IFFALSE 3969
// SetTech ( tech_SibDet , side , state_researched ) ;
3954: LD_INT 20
3956: PPUSH
3957: LD_VAR 0 1
3961: PPUSH
3962: LD_INT 2
3964: PPUSH
3965: CALL_OW 322
// if def_siberite_bomb = 1 then
3969: LD_EXP 50
3973: PUSH
3974: LD_INT 1
3976: EQUAL
3977: IFFALSE 4011
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3979: LD_INT 25
3981: PPUSH
3982: LD_VAR 0 1
3986: PPUSH
3987: LD_INT 1
3989: PPUSH
3990: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3994: LD_INT 73
3996: PPUSH
3997: LD_VAR 0 1
4001: PPUSH
4002: LD_INT 1
4004: PPUSH
4005: CALL_OW 322
// end else
4009: GO 4041
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4011: LD_INT 25
4013: PPUSH
4014: LD_VAR 0 1
4018: PPUSH
4019: LD_INT 0
4021: PPUSH
4022: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4026: LD_INT 73
4028: PPUSH
4029: LD_VAR 0 1
4033: PPUSH
4034: LD_INT 0
4036: PPUSH
4037: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4041: LD_INT 24
4043: PPUSH
4044: LD_VAR 0 1
4048: PPUSH
4049: LD_INT 0
4051: PPUSH
4052: CALL_OW 322
// global_defined := true ;
4056: LD_ADDR_LOC 3
4060: PUSH
4061: LD_INT 1
4063: ST_TO_ADDR
// end ;
4064: LD_VAR 0 2
4068: RET
// every 0 0$1 do
4069: GO 4071
4071: DISABLE
// if ( def_siberite_bomb > 1 ) then
4072: LD_EXP 50
4076: PUSH
4077: LD_INT 1
4079: GREATER
4080: IFFALSE 4095
// begin wait ( siberite_bomb_Delay ) ;
4082: LD_EXP 12
4086: PPUSH
4087: CALL_OW 67
// EnableSibFiss ;
4091: CALL 4096 0 0
// end ;
4095: END
// function EnableSibFiss ; var i ; begin
4096: LD_INT 0
4098: PPUSH
4099: PPUSH
// for i := 1 to 8 do
4100: LD_ADDR_VAR 0 2
4104: PUSH
4105: DOUBLE
4106: LD_INT 1
4108: DEC
4109: ST_TO_ADDR
4110: LD_INT 8
4112: PUSH
4113: FOR_TO
4114: IFFALSE 4160
// if Side_Positions [ i ] then
4116: LD_EXP 20
4120: PUSH
4121: LD_VAR 0 2
4125: ARRAY
4126: IFFALSE 4158
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4128: LD_INT 25
4130: PPUSH
4131: LD_VAR 0 2
4135: PPUSH
4136: LD_INT 1
4138: PPUSH
4139: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4143: LD_INT 73
4145: PPUSH
4146: LD_VAR 0 2
4150: PPUSH
4151: LD_INT 1
4153: PPUSH
4154: CALL_OW 322
// end ;
4158: GO 4113
4160: POP
4161: POP
// end ;
4162: LD_VAR 0 1
4166: RET
// function prepare_sides ; var i ; begin
4167: LD_INT 0
4169: PPUSH
4170: PPUSH
// global_units := [ ] ;
4171: LD_ADDR_LOC 2
4175: PUSH
4176: EMPTY
4177: ST_TO_ADDR
// global_defined := false ;
4178: LD_ADDR_LOC 3
4182: PUSH
4183: LD_INT 0
4185: ST_TO_ADDR
// CountClassMembers ;
4186: CALL 4236 0 0
// for i := 1 to 8 do
4190: LD_ADDR_VAR 0 2
4194: PUSH
4195: DOUBLE
4196: LD_INT 1
4198: DEC
4199: ST_TO_ADDR
4200: LD_INT 8
4202: PUSH
4203: FOR_TO
4204: IFFALSE 4229
// if Side_Positions [ i ] then
4206: LD_EXP 20
4210: PUSH
4211: LD_VAR 0 2
4215: ARRAY
4216: IFFALSE 4227
// prepare_side ( i ) ;
4218: LD_VAR 0 2
4222: PPUSH
4223: CALL 3003 0 1
4227: GO 4203
4229: POP
4230: POP
// end ;
4231: LD_VAR 0 1
4235: RET
// function CountClassMembers ; var Mode ; begin
4236: LD_INT 0
4238: PPUSH
4239: PPUSH
// if No_Mechs then
4240: LD_EXP 52
4244: IFFALSE 4256
// Mode := 2 else
4246: LD_ADDR_VAR 0 2
4250: PUSH
4251: LD_INT 2
4253: ST_TO_ADDR
4254: GO 4264
// Mode := 1 ;
4256: LD_ADDR_VAR 0 2
4260: PUSH
4261: LD_INT 1
4263: ST_TO_ADDR
// neng := number_of_people ;
4264: LD_ADDR_LOC 5
4268: PUSH
4269: LD_EXP 4
4273: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4274: LD_ADDR_LOC 8
4278: PUSH
4279: LD_LOC 5
4283: PUSH
4284: LD_INT 4
4286: PUSH
4287: LD_INT 3
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: PUSH
4294: LD_VAR 0 2
4298: ARRAY
4299: DIV
4300: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4301: LD_LOC 8
4305: PUSH
4306: LD_EXP 3
4310: LESS
4311: IFFALSE 4323
// nsol := number_of_breastworks ;
4313: LD_ADDR_LOC 8
4317: PUSH
4318: LD_EXP 3
4322: ST_TO_ADDR
// neng := neng - nsol ;
4323: LD_ADDR_LOC 5
4327: PUSH
4328: LD_LOC 5
4332: PUSH
4333: LD_LOC 8
4337: MINUS
4338: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4339: LD_ADDR_LOC 6
4343: PUSH
4344: LD_LOC 5
4348: PUSH
4349: LD_INT 3
4351: PUSH
4352: LD_INT 2
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: PUSH
4359: LD_VAR 0 2
4363: ARRAY
4364: DIV
4365: ST_TO_ADDR
// if ( nsci < 1 ) then
4366: LD_LOC 6
4370: PUSH
4371: LD_INT 1
4373: LESS
4374: IFFALSE 4384
// nsci := 1 ;
4376: LD_ADDR_LOC 6
4380: PUSH
4381: LD_INT 1
4383: ST_TO_ADDR
// neng := neng - nsci ;
4384: LD_ADDR_LOC 5
4388: PUSH
4389: LD_LOC 5
4393: PUSH
4394: LD_LOC 6
4398: MINUS
4399: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4400: LD_ADDR_LOC 7
4404: PUSH
4405: LD_LOC 5
4409: PUSH
4410: LD_INT 2
4412: DIV
4413: PUSH
4414: LD_INT 0
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: PUSH
4421: LD_VAR 0 2
4425: ARRAY
4426: ST_TO_ADDR
// neng := neng - nmech ;
4427: LD_ADDR_LOC 5
4431: PUSH
4432: LD_LOC 5
4436: PUSH
4437: LD_LOC 7
4441: MINUS
4442: ST_TO_ADDR
// if ( neng < 1 ) then
4443: LD_LOC 5
4447: PUSH
4448: LD_INT 1
4450: LESS
4451: IFFALSE 4461
// neng := 1 ;
4453: LD_ADDR_LOC 5
4457: PUSH
4458: LD_INT 1
4460: ST_TO_ADDR
// end ;
4461: LD_VAR 0 1
4465: RET
// starting begin disable ( 98 ) ;
4466: LD_INT 98
4468: DISABLE_MARKED
// disable ( 99 ) ;
4469: LD_INT 99
4471: DISABLE_MARKED
// disable ( 400 ) ;
4472: LD_INT 400
4474: DISABLE_MARKED
// disable ( 401 ) ;
4475: LD_INT 401
4477: DISABLE_MARKED
// disable ( 600 ) ;
4478: LD_INT 600
4480: DISABLE_MARKED
// mp_selectmsg := true ;
4481: LD_ADDR_OWVAR 13
4485: PUSH
4486: LD_INT 1
4488: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4489: CALL 68 0 0
// prepare_map_coordinates ;
4493: CALL 1640 0 0
// set_shared_visions_and_alliances ;
4497: CALL 2127 0 0
// ResetFog ;
4501: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4505: LD_OWVAR 2
4509: PPUSH
4510: CALL_OW 520
// prepare_sides ;
4514: CALL 4167 0 0
// Init_Win_Condition ;
4518: CALL 16138 0 0
// InitLimits ;
4522: CALL 9958 0 0
// ShowTimer ;
4526: CALL 10895 0 0
// init_shipments_and_respawning ;
4530: CALL 5655 0 0
// music_nat := Side_Nations [ your_side ] ;
4534: LD_ADDR_OWVAR 71
4538: PUSH
4539: LD_EXP 21
4543: PUSH
4544: LD_OWVAR 2
4548: ARRAY
4549: ST_TO_ADDR
// if IAmSpec then
4550: CALL_OW 531
4554: IFFALSE 4578
// begin fogoff ( true ) ;
4556: LD_INT 1
4558: PPUSH
4559: CALL_OW 344
// CenterNowOnXY ( 79 , 59 ) ;
4563: LD_INT 79
4565: PPUSH
4566: LD_INT 59
4568: PPUSH
4569: CALL_OW 86
// enable ( 400 ) ;
4573: LD_INT 400
4575: ENABLE_MARKED
// end else
4576: GO 4624
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4578: LD_EXP 26
4582: PUSH
4583: LD_EXP 20
4587: PUSH
4588: LD_OWVAR 2
4592: ARRAY
4593: ARRAY
4594: PUSH
4595: LD_INT 1
4597: ARRAY
4598: PPUSH
4599: LD_EXP 26
4603: PUSH
4604: LD_EXP 20
4608: PUSH
4609: LD_OWVAR 2
4613: ARRAY
4614: ARRAY
4615: PUSH
4616: LD_INT 2
4618: ARRAY
4619: PPUSH
4620: CALL_OW 86
// end ; InitApeman ;
4624: CALL 4830 0 0
// if def_builduptime then
4628: LD_EXP 51
4632: IFFALSE 4638
// BeginBuildUp ;
4634: CALL 11343 0 0
// end ; end_of_file
4638: END
// every 20 20$00 trigger apemanNumber do
4639: LD_EXP 29
4643: IFFALSE 4676
4645: GO 4647
4647: DISABLE
// begin enable ;
4648: ENABLE
// if apeLevel >= 8 then
4649: LD_EXP 34
4653: PUSH
4654: LD_INT 8
4656: GREATEREQUAL
4657: IFFALSE 4662
// disable else
4659: DISABLE
4660: GO 4676
// apeLevel := apeLevel + 1 ;
4662: LD_ADDR_EXP 34
4666: PUSH
4667: LD_EXP 34
4671: PUSH
4672: LD_INT 1
4674: PLUS
4675: ST_TO_ADDR
// end ;
4676: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
4677: LD_EXP 29
4681: PUSH
4682: LD_EXP 30
4686: LESS
4687: IFFALSE 4827
4689: GO 4691
4691: DISABLE
4692: LD_INT 0
4694: PPUSH
4695: PPUSH
4696: PPUSH
4697: PPUSH
// begin enable ;
4698: ENABLE
// for i := 1 to apemanPos do
4699: LD_ADDR_VAR 0 1
4703: PUSH
4704: DOUBLE
4705: LD_INT 1
4707: DEC
4708: ST_TO_ADDR
4709: LD_EXP 32
4713: PUSH
4714: FOR_TO
4715: IFFALSE 4825
// begin if apemanPlayerCount [ i ] then
4717: LD_EXP 33
4721: PUSH
4722: LD_VAR 0 1
4726: ARRAY
4727: IFFALSE 4823
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
4729: LD_EXP 33
4733: PUSH
4734: LD_VAR 0 1
4738: ARRAY
4739: PUSH
4740: LD_EXP 32
4744: PUSH
4745: LD_VAR 0 1
4749: ARRAY
4750: GREATER
4751: IFFALSE 4823
// begin ape := PrepareApeman ;
4753: LD_ADDR_VAR 0 2
4757: PUSH
4758: CALL 5330 0 0
4762: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
4763: LD_VAR 0 2
4767: PPUSH
4768: LD_EXP 35
4772: PUSH
4773: LD_VAR 0 1
4777: ARRAY
4778: PPUSH
4779: LD_INT 0
4781: PPUSH
4782: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
4786: LD_ADDR_EXP 32
4790: PUSH
4791: LD_EXP 32
4795: PPUSH
4796: LD_VAR 0 1
4800: PPUSH
4801: LD_EXP 32
4805: PUSH
4806: LD_VAR 0 1
4810: ARRAY
4811: PUSH
4812: LD_VAR 0 2
4816: UNION
4817: PPUSH
4818: CALL_OW 1
4822: ST_TO_ADDR
// end ; end ; end ;
4823: GO 4714
4825: POP
4826: POP
// end ;
4827: PPOPN 4
4829: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
4830: LD_INT 0
4832: PPUSH
4833: PPUSH
4834: PPUSH
4835: PPUSH
4836: PPUSH
4837: PPUSH
4838: PPUSH
// playersAmount := 0 ;
4839: LD_ADDR_VAR 0 3
4843: PUSH
4844: LD_INT 0
4846: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , ] ;
4847: LD_ADDR_VAR 0 7
4851: PUSH
4852: LD_INT 13
4854: PUSH
4855: LD_INT 14
4857: PUSH
4858: LD_INT 15
4860: PUSH
4861: LD_INT 16
4863: PUSH
4864: EMPTY
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4870: LD_ADDR_EXP 35
4874: PUSH
4875: LD_INT 0
4877: PUSH
4878: LD_INT 0
4880: PUSH
4881: LD_INT 0
4883: PUSH
4884: LD_INT 0
4886: PUSH
4887: LD_INT 0
4889: PUSH
4890: LD_INT 0
4892: PUSH
4893: LD_INT 0
4895: PUSH
4896: LD_INT 0
4898: PUSH
4899: EMPTY
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: LIST
4908: ST_TO_ADDR
// for j = 1 to Side_Positions do
4909: LD_ADDR_VAR 0 4
4913: PUSH
4914: DOUBLE
4915: LD_INT 1
4917: DEC
4918: ST_TO_ADDR
4919: LD_EXP 20
4923: PUSH
4924: FOR_TO
4925: IFFALSE 4992
// if Side_Positions [ j ] then
4927: LD_EXP 20
4931: PUSH
4932: LD_VAR 0 4
4936: ARRAY
4937: IFFALSE 4990
// begin playersAmount := playersAmount + 1 ;
4939: LD_ADDR_VAR 0 3
4943: PUSH
4944: LD_VAR 0 3
4948: PUSH
4949: LD_INT 1
4951: PLUS
4952: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
4953: LD_ADDR_EXP 35
4957: PUSH
4958: LD_EXP 35
4962: PPUSH
4963: LD_VAR 0 4
4967: PPUSH
4968: LD_VAR 0 7
4972: PUSH
4973: LD_EXP 20
4977: PUSH
4978: LD_VAR 0 4
4982: ARRAY
4983: ARRAY
4984: PPUSH
4985: CALL_OW 1
4989: ST_TO_ADDR
// end ;
4990: GO 4924
4992: POP
4993: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
4994: LD_ADDR_EXP 31
4998: PUSH
4999: LD_INT 3
5001: PUSH
5002: LD_EXP 13
5006: MUL
5007: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5008: LD_ADDR_EXP 29
5012: PUSH
5013: LD_VAR 0 3
5017: PUSH
5018: LD_EXP 31
5022: MUL
5023: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5024: LD_ADDR_EXP 30
5028: PUSH
5029: LD_EXP 29
5033: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5034: LD_ADDR_EXP 32
5038: PUSH
5039: LD_INT 0
5041: PUSH
5042: LD_INT 0
5044: PUSH
5045: LD_INT 0
5047: PUSH
5048: LD_INT 0
5050: PUSH
5051: LD_INT 0
5053: PUSH
5054: LD_INT 0
5056: PUSH
5057: LD_INT 0
5059: PUSH
5060: LD_INT 0
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5073: LD_ADDR_EXP 33
5077: PUSH
5078: LD_INT 0
5080: PUSH
5081: LD_INT 0
5083: PUSH
5084: LD_INT 0
5086: PUSH
5087: LD_INT 0
5089: PUSH
5090: LD_INT 0
5092: PUSH
5093: LD_INT 0
5095: PUSH
5096: LD_INT 0
5098: PUSH
5099: LD_INT 0
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: ST_TO_ADDR
// apeLevel := 1 ;
5112: LD_ADDR_EXP 34
5116: PUSH
5117: LD_INT 1
5119: ST_TO_ADDR
// if not apemanNumber then
5120: LD_EXP 29
5124: NOT
5125: IFFALSE 5129
// exit ;
5127: GO 5325
// for i := 1 to apemanPerPlayer do
5129: LD_ADDR_VAR 0 2
5133: PUSH
5134: DOUBLE
5135: LD_INT 1
5137: DEC
5138: ST_TO_ADDR
5139: LD_EXP 31
5143: PUSH
5144: FOR_TO
5145: IFFALSE 5323
// begin for j := 1 to Side_Positions do
5147: LD_ADDR_VAR 0 4
5151: PUSH
5152: DOUBLE
5153: LD_INT 1
5155: DEC
5156: ST_TO_ADDR
5157: LD_EXP 20
5161: PUSH
5162: FOR_TO
5163: IFFALSE 5319
// if Side_Positions [ j ] then
5165: LD_EXP 20
5169: PUSH
5170: LD_VAR 0 4
5174: ARRAY
5175: IFFALSE 5317
// begin pos := Side_Positions [ j ] ;
5177: LD_ADDR_VAR 0 6
5181: PUSH
5182: LD_EXP 20
5186: PUSH
5187: LD_VAR 0 4
5191: ARRAY
5192: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5193: LD_ADDR_EXP 33
5197: PUSH
5198: LD_EXP 33
5202: PPUSH
5203: LD_VAR 0 4
5207: PPUSH
5208: LD_EXP 33
5212: PUSH
5213: LD_VAR 0 4
5217: ARRAY
5218: PUSH
5219: LD_INT 1
5221: PLUS
5222: PPUSH
5223: CALL_OW 1
5227: ST_TO_ADDR
// ape := PrepareApeman ;
5228: LD_ADDR_VAR 0 5
5232: PUSH
5233: CALL 5330 0 0
5237: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5238: LD_ADDR_EXP 32
5242: PUSH
5243: LD_EXP 32
5247: PPUSH
5248: LD_VAR 0 4
5252: PPUSH
5253: LD_EXP 32
5257: PUSH
5258: LD_VAR 0 4
5262: ARRAY
5263: PPUSH
5264: LD_EXP 32
5268: PUSH
5269: LD_VAR 0 4
5273: ARRAY
5274: PUSH
5275: LD_INT 1
5277: PLUS
5278: PPUSH
5279: LD_VAR 0 5
5283: PPUSH
5284: CALL_OW 1
5288: PPUSH
5289: CALL_OW 1
5293: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5294: LD_VAR 0 5
5298: PPUSH
5299: LD_EXP 35
5303: PUSH
5304: LD_VAR 0 4
5308: ARRAY
5309: PPUSH
5310: LD_INT 0
5312: PPUSH
5313: CALL_OW 49
// end ;
5317: GO 5162
5319: POP
5320: POP
// end ;
5321: GO 5144
5323: POP
5324: POP
// end ;
5325: LD_VAR 0 1
5329: RET
// export function PrepareApeman ; var bonus ; begin
5330: LD_INT 0
5332: PPUSH
5333: PPUSH
// uc_side := 0 ;
5334: LD_ADDR_OWVAR 20
5338: PUSH
5339: LD_INT 0
5341: ST_TO_ADDR
// uc_nation := 0 ;
5342: LD_ADDR_OWVAR 21
5346: PUSH
5347: LD_INT 0
5349: ST_TO_ADDR
// InitHc ;
5350: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
5354: LD_ADDR_VAR 0 2
5358: PUSH
5359: LD_INT 1
5361: NEG
5362: PUSH
5363: LD_INT 0
5365: PUSH
5366: LD_INT 1
5368: PUSH
5369: EMPTY
5370: LIST
5371: LIST
5372: LIST
5373: PUSH
5374: LD_OWVAR 1
5378: PUSH
5379: LD_INT 3
5381: MOD
5382: PUSH
5383: LD_INT 1
5385: PLUS
5386: ARRAY
5387: ST_TO_ADDR
// hc_class := class_apeman ;
5388: LD_ADDR_OWVAR 28
5392: PUSH
5393: LD_INT 12
5395: ST_TO_ADDR
// hc_gallery :=  ;
5396: LD_ADDR_OWVAR 33
5400: PUSH
5401: LD_STRING 
5403: ST_TO_ADDR
// hc_name :=  ;
5404: LD_ADDR_OWVAR 26
5408: PUSH
5409: LD_STRING 
5411: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
5412: LD_ADDR_OWVAR 31
5416: PUSH
5417: LD_EXP 34
5421: PUSH
5422: LD_VAR 0 2
5426: PLUS
5427: PUSH
5428: LD_EXP 34
5432: PUSH
5433: LD_VAR 0 2
5437: PLUS
5438: PUSH
5439: LD_EXP 34
5443: PUSH
5444: LD_VAR 0 2
5448: PLUS
5449: PUSH
5450: LD_EXP 34
5454: PUSH
5455: LD_VAR 0 2
5459: PLUS
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: LIST
5465: LIST
5466: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
5467: LD_ADDR_OWVAR 35
5471: PUSH
5472: LD_INT 10
5474: PUSH
5475: LD_VAR 0 2
5479: MUL
5480: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5481: LD_ADDR_OWVAR 29
5485: PUSH
5486: LD_INT 12
5488: PUSH
5489: LD_INT 10
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: ST_TO_ADDR
// result := CreateHuman ;
5496: LD_ADDR_VAR 0 1
5500: PUSH
5501: CALL_OW 44
5505: ST_TO_ADDR
// end ;
5506: LD_VAR 0 1
5510: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
5511: LD_INT 0
5513: PPUSH
5514: PPUSH
5515: PPUSH
// if not ape then
5516: LD_VAR 0 1
5520: NOT
5521: IFFALSE 5525
// exit ;
5523: GO 5650
// side := GetSide ( ape ) ;
5525: LD_ADDR_VAR 0 3
5529: PUSH
5530: LD_VAR 0 1
5534: PPUSH
5535: CALL_OW 255
5539: ST_TO_ADDR
// if not side then
5540: LD_VAR 0 3
5544: NOT
5545: IFFALSE 5599
// begin for i = 1 to apemanPos do
5547: LD_ADDR_VAR 0 4
5551: PUSH
5552: DOUBLE
5553: LD_INT 1
5555: DEC
5556: ST_TO_ADDR
5557: LD_EXP 32
5561: PUSH
5562: FOR_TO
5563: IFFALSE 5597
// if ape in apemanPos [ i ] then
5565: LD_VAR 0 1
5569: PUSH
5570: LD_EXP 32
5574: PUSH
5575: LD_VAR 0 4
5579: ARRAY
5580: IN
5581: IFFALSE 5595
// begin side := i ;
5583: LD_ADDR_VAR 0 3
5587: PUSH
5588: LD_VAR 0 4
5592: ST_TO_ADDR
// break ;
5593: GO 5597
// end ;
5595: GO 5562
5597: POP
5598: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
5599: LD_ADDR_EXP 32
5603: PUSH
5604: LD_EXP 32
5608: PPUSH
5609: LD_VAR 0 3
5613: PPUSH
5614: LD_EXP 32
5618: PUSH
5619: LD_VAR 0 3
5623: ARRAY
5624: PUSH
5625: LD_VAR 0 1
5629: DIFF
5630: PPUSH
5631: CALL_OW 1
5635: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
5636: LD_ADDR_EXP 29
5640: PUSH
5641: LD_EXP 29
5645: PUSH
5646: LD_INT 1
5648: MINUS
5649: ST_TO_ADDR
// end ; end_of_file
5650: LD_VAR 0 2
5654: RET
// var shipment , respawn , inqueue ; export function init_shipments_and_respawning ; begin
5655: LD_INT 0
5657: PPUSH
// shipment := Rand ( 0 , 3 ) ;
5658: LD_ADDR_LOC 9
5662: PUSH
5663: LD_INT 0
5665: PPUSH
5666: LD_INT 3
5668: PPUSH
5669: CALL_OW 12
5673: ST_TO_ADDR
// respawn := Rand ( 1 , 8 ) ;
5674: LD_ADDR_LOC 10
5678: PUSH
5679: LD_INT 1
5681: PPUSH
5682: LD_INT 8
5684: PPUSH
5685: CALL_OW 12
5689: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5690: LD_ADDR_LOC 11
5694: PUSH
5695: LD_INT 0
5697: PUSH
5698: LD_INT 0
5700: PUSH
5701: LD_INT 0
5703: PUSH
5704: LD_INT 0
5706: PUSH
5707: LD_INT 0
5709: PUSH
5710: LD_INT 0
5712: PUSH
5713: LD_INT 0
5715: PUSH
5716: LD_INT 0
5718: PUSH
5719: EMPTY
5720: LIST
5721: LIST
5722: LIST
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: ST_TO_ADDR
// end ;
5729: LD_VAR 0 1
5733: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
5734: GO 5736
5736: DISABLE
5737: LD_INT 0
5739: PPUSH
5740: PPUSH
5741: PPUSH
5742: PPUSH
// begin if respawning_time_max = 0 then
5743: LD_EXP 11
5747: PUSH
5748: LD_INT 0
5750: EQUAL
5751: IFFALSE 5755
// exit ;
5753: GO 6262
// if respawn = 8 then
5755: LD_LOC 10
5759: PUSH
5760: LD_INT 8
5762: EQUAL
5763: IFFALSE 5775
// respawn := 1 else
5765: LD_ADDR_LOC 10
5769: PUSH
5770: LD_INT 1
5772: ST_TO_ADDR
5773: GO 5789
// respawn := respawn + 1 ;
5775: LD_ADDR_LOC 10
5779: PUSH
5780: LD_LOC 10
5784: PUSH
5785: LD_INT 1
5787: PLUS
5788: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
5789: LD_EXP 20
5793: PUSH
5794: LD_LOC 10
5798: ARRAY
5799: PUSH
5800: LD_LOC 11
5804: PUSH
5805: LD_LOC 10
5809: ARRAY
5810: NOT
5811: AND
5812: IFFALSE 6261
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
5814: LD_ADDR_VAR 0 1
5818: PUSH
5819: LD_INT 21
5821: PUSH
5822: LD_INT 1
5824: PUSH
5825: EMPTY
5826: LIST
5827: LIST
5828: PUSH
5829: LD_INT 22
5831: PUSH
5832: LD_LOC 10
5836: PUSH
5837: EMPTY
5838: LIST
5839: LIST
5840: PUSH
5841: LD_INT 3
5843: PUSH
5844: LD_INT 23
5846: PUSH
5847: LD_INT 0
5849: PUSH
5850: EMPTY
5851: LIST
5852: LIST
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: PPUSH
5860: CALL_OW 69
5864: ST_TO_ADDR
// if n < number_of_people then
5865: LD_VAR 0 1
5869: PUSH
5870: LD_EXP 4
5874: LESS
5875: IFFALSE 6258
// begin aktresp := respawn ;
5877: LD_ADDR_VAR 0 3
5881: PUSH
5882: LD_LOC 10
5886: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
5887: LD_ADDR_LOC 11
5891: PUSH
5892: LD_LOC 11
5896: PPUSH
5897: LD_VAR 0 3
5901: PPUSH
5902: LD_INT 1
5904: PPUSH
5905: CALL_OW 1
5909: ST_TO_ADDR
// enable ;
5910: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
5911: LD_EXP 10
5915: PPUSH
5916: LD_EXP 11
5920: PPUSH
5921: CALL_OW 12
5925: PPUSH
5926: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
5930: LD_ADDR_LOC 11
5934: PUSH
5935: LD_LOC 11
5939: PPUSH
5940: LD_VAR 0 3
5944: PPUSH
5945: LD_INT 0
5947: PPUSH
5948: CALL_OW 1
5952: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
5953: LD_ADDR_VAR 0 2
5957: PUSH
5958: LD_INT 21
5960: PUSH
5961: LD_INT 3
5963: PUSH
5964: EMPTY
5965: LIST
5966: LIST
5967: PUSH
5968: LD_INT 2
5970: PUSH
5971: LD_INT 30
5973: PUSH
5974: LD_INT 0
5976: PUSH
5977: EMPTY
5978: LIST
5979: LIST
5980: PUSH
5981: LD_INT 30
5983: PUSH
5984: LD_INT 1
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: LIST
5995: PUSH
5996: LD_INT 50
5998: PUSH
5999: EMPTY
6000: LIST
6001: PUSH
6002: LD_INT 22
6004: PUSH
6005: LD_VAR 0 3
6009: PUSH
6010: EMPTY
6011: LIST
6012: LIST
6013: PUSH
6014: EMPTY
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: PPUSH
6020: CALL_OW 69
6024: ST_TO_ADDR
// if building_list = 0 then
6025: LD_VAR 0 2
6029: PUSH
6030: LD_INT 0
6032: EQUAL
6033: IFFALSE 6078
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
6035: LD_ADDR_VAR 0 2
6039: PUSH
6040: LD_INT 21
6042: PUSH
6043: LD_INT 3
6045: PUSH
6046: EMPTY
6047: LIST
6048: LIST
6049: PUSH
6050: LD_INT 50
6052: PUSH
6053: EMPTY
6054: LIST
6055: PUSH
6056: LD_INT 22
6058: PUSH
6059: LD_VAR 0 3
6063: PUSH
6064: EMPTY
6065: LIST
6066: LIST
6067: PUSH
6068: EMPTY
6069: LIST
6070: LIST
6071: LIST
6072: PPUSH
6073: CALL_OW 69
6077: ST_TO_ADDR
// if building_list = 0 then
6078: LD_VAR 0 2
6082: PUSH
6083: LD_INT 0
6085: EQUAL
6086: IFFALSE 6090
// exit ;
6088: GO 6262
// hc_name :=  ;
6090: LD_ADDR_OWVAR 26
6094: PUSH
6095: LD_STRING 
6097: ST_TO_ADDR
// hc_importance := 0 ;
6098: LD_ADDR_OWVAR 32
6102: PUSH
6103: LD_INT 0
6105: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6106: LD_INT 0
6108: PPUSH
6109: LD_INT 0
6111: PPUSH
6112: LD_EXP 5
6116: PUSH
6117: LD_INT 2
6119: DIV
6120: PPUSH
6121: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
6125: LD_ADDR_OWVAR 21
6129: PUSH
6130: LD_EXP 21
6134: PUSH
6135: LD_VAR 0 3
6139: ARRAY
6140: ST_TO_ADDR
// uc_side := aktresp ;
6141: LD_ADDR_OWVAR 20
6145: PUSH
6146: LD_VAR 0 3
6150: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
6151: LD_ADDR_VAR 0 4
6155: PUSH
6156: LD_VAR 0 2
6160: PUSH
6161: LD_INT 1
6163: PPUSH
6164: LD_VAR 0 2
6168: PUSH
6169: LD_INT 0
6171: PLUS
6172: PPUSH
6173: CALL_OW 12
6177: ARRAY
6178: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
6179: LD_VAR 0 4
6183: PPUSH
6184: CALL_OW 266
6188: PUSH
6189: LD_INT 0
6191: PUSH
6192: LD_INT 1
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: IN
6199: IFFALSE 6211
// n = 25 else
6201: LD_ADDR_VAR 0 1
6205: PUSH
6206: LD_INT 25
6208: ST_TO_ADDR
6209: GO 6219
// n = 10 ;
6211: LD_ADDR_VAR 0 1
6215: PUSH
6216: LD_INT 10
6218: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
6219: CALL_OW 44
6223: PPUSH
6224: LD_VAR 0 4
6228: PPUSH
6229: CALL_OW 250
6233: PPUSH
6234: LD_VAR 0 4
6238: PPUSH
6239: CALL_OW 251
6243: PPUSH
6244: LD_VAR 0 1
6248: PPUSH
6249: LD_INT 1
6251: PPUSH
6252: CALL_OW 50
// end else
6256: GO 6259
// enable ;
6258: ENABLE
// end else
6259: GO 6262
// enable ;
6261: ENABLE
// end ;
6262: PPOPN 4
6264: END
// every 0 0$5 + 0 0$1.1 do var d ;
6265: GO 6267
6267: DISABLE
6268: LD_INT 0
6270: PPUSH
// begin case tick of 1 .. 1 1$0 :
6271: LD_OWVAR 1
6275: PUSH
6276: LD_INT 1
6278: DOUBLE
6279: GREATEREQUAL
6280: IFFALSE 6288
6282: LD_INT 2100
6284: DOUBLE
6285: LESSEQUAL
6286: IFTRUE 6290
6288: GO 6301
6290: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
6291: LD_ADDR_VAR 0 1
6295: PUSH
6296: LD_INT 150
6298: ST_TO_ADDR
6299: GO 6484
6301: LD_INT 2100
6303: PUSH
6304: LD_INT 1
6306: PLUS
6307: DOUBLE
6308: GREATEREQUAL
6309: IFFALSE 6317
6311: LD_INT 10500
6313: DOUBLE
6314: LESSEQUAL
6315: IFTRUE 6319
6317: GO 6330
6319: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
6320: LD_ADDR_VAR 0 1
6324: PUSH
6325: LD_INT 100
6327: ST_TO_ADDR
6328: GO 6484
6330: LD_INT 10500
6332: PUSH
6333: LD_INT 1
6335: PLUS
6336: DOUBLE
6337: GREATEREQUAL
6338: IFFALSE 6346
6340: LD_INT 21000
6342: DOUBLE
6343: LESSEQUAL
6344: IFTRUE 6348
6346: GO 6359
6348: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
6349: LD_ADDR_VAR 0 1
6353: PUSH
6354: LD_INT 90
6356: ST_TO_ADDR
6357: GO 6484
6359: LD_INT 21000
6361: PUSH
6362: LD_INT 1
6364: PLUS
6365: DOUBLE
6366: GREATEREQUAL
6367: IFFALSE 6375
6369: LD_INT 42000
6371: DOUBLE
6372: LESSEQUAL
6373: IFTRUE 6377
6375: GO 6388
6377: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
6378: LD_ADDR_VAR 0 1
6382: PUSH
6383: LD_INT 70
6385: ST_TO_ADDR
6386: GO 6484
6388: LD_INT 42000
6390: PUSH
6391: LD_INT 1
6393: PLUS
6394: DOUBLE
6395: GREATEREQUAL
6396: IFFALSE 6404
6398: LD_INT 63000
6400: DOUBLE
6401: LESSEQUAL
6402: IFTRUE 6406
6404: GO 6417
6406: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
6407: LD_ADDR_VAR 0 1
6411: PUSH
6412: LD_INT 60
6414: ST_TO_ADDR
6415: GO 6484
6417: LD_INT 63000
6419: PUSH
6420: LD_INT 1
6422: PLUS
6423: DOUBLE
6424: GREATEREQUAL
6425: IFFALSE 6433
6427: LD_INT 105000
6429: DOUBLE
6430: LESSEQUAL
6431: IFTRUE 6435
6433: GO 6446
6435: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
6436: LD_ADDR_VAR 0 1
6440: PUSH
6441: LD_INT 35
6443: ST_TO_ADDR
6444: GO 6484
6446: LD_INT 105000
6448: PUSH
6449: LD_INT 1
6451: PLUS
6452: DOUBLE
6453: GREATEREQUAL
6454: IFFALSE 6462
6456: LD_INT 630000
6458: DOUBLE
6459: LESSEQUAL
6460: IFTRUE 6464
6462: GO 6475
6464: POP
// d := 20 ; else
6465: LD_ADDR_VAR 0 1
6469: PUSH
6470: LD_INT 20
6472: ST_TO_ADDR
6473: GO 6484
6475: POP
// d := 0 ; end ;
6476: LD_ADDR_VAR 0 1
6480: PUSH
6481: LD_INT 0
6483: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
6484: LD_INT 1
6486: PPUSH
6487: LD_INT 10000
6489: PPUSH
6490: CALL_OW 12
6494: PUSH
6495: LD_VAR 0 1
6499: PUSH
6500: LD_EXP 8
6504: MUL
6505: LESSEQUAL
6506: IFFALSE 6560
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
6508: LD_INT 1
6510: PPUSH
6511: LD_INT 140
6513: PPUSH
6514: CALL_OW 12
6518: PPUSH
6519: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
6523: LD_ADDR_LOC 9
6527: PUSH
6528: LD_LOC 9
6532: PUSH
6533: LD_INT 1
6535: PLUS
6536: PUSH
6537: LD_INT 4
6539: MOD
6540: ST_TO_ADDR
// CreateCratesArea ( 5 , q1 + shipment , true ) ;
6541: LD_INT 5
6543: PPUSH
6544: LD_INT 4
6546: PUSH
6547: LD_LOC 9
6551: PLUS
6552: PPUSH
6553: LD_INT 1
6555: PPUSH
6556: CALL_OW 55
// end ; enable ;
6560: ENABLE
// end ; end_of_file
6561: PPOPN 1
6563: END
// var activated ; var hadziove ; every 0 0$1 do
6564: GO 6566
6566: DISABLE
// begin wait ( Rand ( 3 3$0 , 10 10$0 ) ) ;
6567: LD_INT 6300
6569: PPUSH
6570: LD_INT 21000
6572: PPUSH
6573: CALL_OW 12
6577: PPUSH
6578: CALL_OW 67
// SetAreaMapShow ( Tree , 1 ) ;
6582: LD_INT 3
6584: PPUSH
6585: LD_INT 1
6587: PPUSH
6588: CALL_OW 424
// activated := true ;
6592: LD_ADDR_LOC 12
6596: PUSH
6597: LD_INT 1
6599: ST_TO_ADDR
// end ;
6600: END
// every 0 0$1 trigger activated do var i , un ;
6601: LD_LOC 12
6605: IFFALSE 6850
6607: GO 6609
6609: DISABLE
6610: LD_INT 0
6612: PPUSH
6613: PPUSH
// begin if not def_tree_function then
6614: LD_EXP 1
6618: NOT
6619: IFFALSE 6623
// exit ;
6621: GO 6850
// ExtraStrings := [ #MultiSmall-Tree & def_tree_function ] ;
6623: LD_ADDR_EXP 53
6627: PUSH
6628: LD_STRING #MultiSmall-Tree
6630: PUSH
6631: LD_EXP 1
6635: STR
6636: PUSH
6637: EMPTY
6638: LIST
6639: ST_TO_ADDR
// for un in FilterUnitsInArea ( Tree , [ f_type , unit_human ] ) diff hadziove do
6640: LD_ADDR_VAR 0 2
6644: PUSH
6645: LD_INT 3
6647: PPUSH
6648: LD_INT 21
6650: PUSH
6651: LD_INT 1
6653: PUSH
6654: EMPTY
6655: LIST
6656: LIST
6657: PPUSH
6658: CALL_OW 70
6662: PUSH
6663: LD_LOC 13
6667: DIFF
6668: PUSH
6669: FOR_IN
6670: IFFALSE 6831
// begin if GetClass ( un ) in [ class_soldier , class_engineer , class_mechanic , class_scientistic , class_sniper , class_bazooker , class_mortar ] then
6672: LD_VAR 0 2
6676: PPUSH
6677: CALL_OW 257
6681: PUSH
6682: LD_INT 1
6684: PUSH
6685: LD_INT 2
6687: PUSH
6688: LD_INT 3
6690: PUSH
6691: LD_INT 4
6693: PUSH
6694: LD_INT 5
6696: PUSH
6697: LD_INT 9
6699: PUSH
6700: LD_INT 8
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: IN
6712: IFFALSE 6761
// for i := 1 to 4 do
6714: LD_ADDR_VAR 0 1
6718: PUSH
6719: DOUBLE
6720: LD_INT 1
6722: DEC
6723: ST_TO_ADDR
6724: LD_INT 4
6726: PUSH
6727: FOR_TO
6728: IFFALSE 6757
// GiveSkillBonus ( un , i , tree_function [ i ] ) else
6730: LD_VAR 0 2
6734: PPUSH
6735: LD_VAR 0 1
6739: PPUSH
6740: LD_EXP 14
6744: PUSH
6745: LD_VAR 0 1
6749: ARRAY
6750: PPUSH
6751: CALL_OW 238
6755: GO 6727
6757: POP
6758: POP
6759: GO 6829
// if un in [ class_apeman , class_apeman_engineer , class_apeman_kamikaze , class_apeman_soldier ] then
6761: LD_VAR 0 2
6765: PUSH
6766: LD_INT 12
6768: PUSH
6769: LD_INT 16
6771: PUSH
6772: LD_INT 17
6774: PUSH
6775: LD_INT 15
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: LIST
6782: LIST
6783: IN
6784: IFFALSE 6829
// for i := 1 to 4 do
6786: LD_ADDR_VAR 0 1
6790: PUSH
6791: DOUBLE
6792: LD_INT 1
6794: DEC
6795: ST_TO_ADDR
6796: LD_INT 4
6798: PUSH
6799: FOR_TO
6800: IFFALSE 6827
// GiveSkillBonus ( un , i , tree_function [ 5 ] ) ;
6802: LD_VAR 0 2
6806: PPUSH
6807: LD_VAR 0 1
6811: PPUSH
6812: LD_EXP 14
6816: PUSH
6817: LD_INT 5
6819: ARRAY
6820: PPUSH
6821: CALL_OW 238
6825: GO 6799
6827: POP
6828: POP
// end ;
6829: GO 6669
6831: POP
6832: POP
// hadziove := hadziove ^ un ;
6833: LD_ADDR_LOC 13
6837: PUSH
6838: LD_LOC 13
6842: PUSH
6843: LD_VAR 0 2
6847: ADD
6848: ST_TO_ADDR
// enable ;
6849: ENABLE
// end ; end_of_file
6850: PPOPN 2
6852: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6853: LD_VAR 0 1
6857: PPUSH
6858: CALL_OW 266
6862: PUSH
6863: LD_INT 0
6865: PUSH
6866: LD_INT 1
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: IN
6873: IFFALSE 6898
// SetBName ( b , @ & GetSide ( b ) ) ;
6875: LD_VAR 0 1
6879: PPUSH
6880: LD_STRING @
6882: PUSH
6883: LD_VAR 0 1
6887: PPUSH
6888: CALL_OW 255
6892: STR
6893: PPUSH
6894: CALL_OW 500
// if def_game_rules then
6898: LD_EXP 37
6902: IFFALSE 6939
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
6904: LD_VAR 0 1
6908: PPUSH
6909: LD_VAR 0 1
6913: PPUSH
6914: CALL_OW 266
6918: PPUSH
6919: LD_VAR 0 1
6923: PPUSH
6924: CALL_OW 255
6928: PPUSH
6929: LD_INT 0
6931: PPUSH
6932: LD_INT 1
6934: PPUSH
6935: CALL 10359 0 5
// end ;
6939: PPOPN 2
6941: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6942: LD_VAR 0 1
6946: PPUSH
6947: CALL_OW 266
6951: PUSH
6952: LD_INT 0
6954: PUSH
6955: LD_INT 1
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: IN
6962: IFFALSE 6987
// SetBName ( b , @ & GetSide ( b ) ) ;
6964: LD_VAR 0 1
6968: PPUSH
6969: LD_STRING @
6971: PUSH
6972: LD_VAR 0 1
6976: PPUSH
6977: CALL_OW 255
6981: STR
6982: PPUSH
6983: CALL_OW 500
// if def_game_rules then
6987: LD_EXP 37
6991: IFFALSE 7030
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
6993: LD_VAR 0 1
6997: PPUSH
6998: LD_VAR 0 1
7002: PPUSH
7003: CALL_OW 266
7007: PPUSH
7008: LD_VAR 0 1
7012: PPUSH
7013: CALL_OW 255
7017: PPUSH
7018: LD_VAR 0 2
7022: PPUSH
7023: LD_INT 1
7025: PPUSH
7026: CALL 10359 0 5
// end ;
7030: PPOPN 3
7032: END
// on VehicleConstructed ( veh , fac ) do var side ;
7033: LD_INT 0
7035: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7036: LD_VAR 0 1
7040: PPUSH
7041: CALL_OW 263
7045: PUSH
7046: LD_INT 5
7048: EQUAL
7049: IFFALSE 7191
// begin side := GetSide ( veh ) ;
7051: LD_ADDR_VAR 0 3
7055: PUSH
7056: LD_VAR 0 1
7060: PPUSH
7061: CALL_OW 255
7065: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7066: LD_ADDR_EXP 32
7070: PUSH
7071: LD_EXP 32
7075: PPUSH
7076: LD_VAR 0 3
7080: PPUSH
7081: LD_EXP 32
7085: PUSH
7086: LD_VAR 0 3
7090: ARRAY
7091: PPUSH
7092: LD_INT 52
7094: PUSH
7095: EMPTY
7096: LIST
7097: PPUSH
7098: CALL_OW 72
7102: PUSH
7103: LD_INT 22
7105: PUSH
7106: LD_VAR 0 3
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: PUSH
7115: LD_INT 2
7117: PUSH
7118: LD_INT 33
7120: PUSH
7121: LD_INT 5
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: PUSH
7128: LD_INT 25
7130: PUSH
7131: LD_INT 12
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: PUSH
7138: LD_INT 25
7140: PUSH
7141: LD_INT 15
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PUSH
7148: LD_INT 25
7150: PUSH
7151: LD_INT 16
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PUSH
7158: LD_INT 25
7160: PUSH
7161: LD_INT 17
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: PPUSH
7180: CALL_OW 69
7184: UNION
7185: PPUSH
7186: CALL_OW 1
7190: ST_TO_ADDR
// end ; end ;
7191: PPOPN 3
7193: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7194: LD_INT 0
7196: PPUSH
7197: PPUSH
7198: PPUSH
7199: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7200: LD_VAR 0 1
7204: PPUSH
7205: CALL_OW 257
7209: PUSH
7210: LD_INT 12
7212: PUSH
7213: LD_INT 15
7215: PUSH
7216: LD_INT 17
7218: PUSH
7219: LD_INT 16
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: IN
7228: PUSH
7229: LD_VAR 0 1
7233: PPUSH
7234: CALL_OW 263
7238: PUSH
7239: LD_INT 5
7241: EQUAL
7242: OR
7243: IFFALSE 7254
// ApeKilled ( j ) ;
7245: LD_VAR 0 1
7249: PPUSH
7250: CALL 5511 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7254: LD_VAR 0 1
7258: PPUSH
7259: CALL_OW 266
7263: PUSH
7264: LD_INT 0
7266: PUSH
7267: LD_INT 1
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: IN
7274: IFFALSE 7356
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7276: LD_ADDR_VAR 0 4
7280: PUSH
7281: LD_EXP 20
7285: PUSH
7286: LD_VAR 0 1
7290: PPUSH
7291: CALL_OW 255
7295: ARRAY
7296: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7297: LD_ADDR_VAR 0 2
7301: PUSH
7302: LD_EXP 26
7306: PUSH
7307: LD_VAR 0 4
7311: ARRAY
7312: PUSH
7313: LD_INT 1
7315: ARRAY
7316: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7317: LD_ADDR_VAR 0 3
7321: PUSH
7322: LD_EXP 26
7326: PUSH
7327: LD_VAR 0 4
7331: ARRAY
7332: PUSH
7333: LD_INT 2
7335: ARRAY
7336: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7337: LD_VAR 0 2
7341: PPUSH
7342: LD_VAR 0 3
7346: PPUSH
7347: CALL_OW 420
7351: PPUSH
7352: CALL_OW 419
// end ; if def_game_rules then
7356: LD_EXP 37
7360: IFFALSE 7459
// if ( GetType ( j ) = 3 ) then
7362: LD_VAR 0 1
7366: PPUSH
7367: CALL_OW 247
7371: PUSH
7372: LD_INT 3
7374: EQUAL
7375: IFFALSE 7415
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7377: LD_VAR 0 1
7381: PPUSH
7382: LD_VAR 0 1
7386: PPUSH
7387: CALL_OW 266
7391: PPUSH
7392: LD_VAR 0 1
7396: PPUSH
7397: CALL_OW 255
7401: PPUSH
7402: LD_INT 0
7404: PPUSH
7405: LD_INT 1
7407: NEG
7408: PPUSH
7409: CALL 10359 0 5
7413: GO 7459
// if ( GetChassis ( j ) = 25 ) then
7415: LD_VAR 0 1
7419: PPUSH
7420: CALL_OW 265
7424: PUSH
7425: LD_INT 25
7427: EQUAL
7428: IFFALSE 7459
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7430: LD_VAR 0 1
7434: PPUSH
7435: LD_INT 37
7437: PPUSH
7438: LD_VAR 0 1
7442: PPUSH
7443: CALL_OW 255
7447: PPUSH
7448: LD_INT 0
7450: PPUSH
7451: LD_INT 1
7453: NEG
7454: PPUSH
7455: CALL 10359 0 5
// end ;
7459: PPOPN 5
7461: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7462: LD_EXP 37
7466: PUSH
7467: LD_VAR 0 1
7471: PPUSH
7472: CALL_OW 265
7476: PUSH
7477: LD_INT 25
7479: EQUAL
7480: AND
7481: IFFALSE 7513
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
7483: LD_VAR 0 1
7487: PPUSH
7488: LD_INT 37
7490: PPUSH
7491: LD_VAR 0 1
7495: PPUSH
7496: CALL_OW 255
7500: PPUSH
7501: LD_VAR 0 3
7505: PPUSH
7506: LD_INT 1
7508: PPUSH
7509: CALL 10359 0 5
// end ;
7513: PPOPN 4
7515: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7516: LD_VAR 0 1
7520: PPUSH
7521: LD_VAR 0 2
7525: PPUSH
7526: LD_VAR 0 3
7530: PPUSH
7531: LD_OWVAR 2
7535: PPUSH
7536: CALL 11104 0 4
7540: PPOPN 3
7542: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7543: LD_INT 0
7545: PPUSH
7546: PPUSH
// for un in battle_flags_id do
7547: LD_ADDR_VAR 0 2
7551: PUSH
7552: LD_EXP 27
7556: PUSH
7557: FOR_IN
7558: IFFALSE 7633
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7560: LD_VAR 0 2
7564: PPUSH
7565: LD_INT 1
7567: PUSH
7568: LD_LOC 14
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PUSH
7577: LD_INT 2
7579: PUSH
7580: LD_LOC 14
7584: PUSH
7585: LD_INT 2
7587: DIV
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: PUSH
7593: LD_INT 3
7595: PUSH
7596: LD_LOC 14
7600: PUSH
7601: LD_INT 5
7603: DIV
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: PUSH
7609: LD_INT 20
7611: PUSH
7612: LD_LOC 14
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: PPUSH
7627: CALL_OW 423
7631: GO 7557
7633: POP
7634: POP
// end ;
7635: LD_VAR 0 1
7639: RET
// every 0 0$0.1 do var un ;
7640: GO 7642
7642: DISABLE
7643: LD_INT 0
7645: PPUSH
// begin if not def_morale_flags then
7646: LD_EXP 46
7650: NOT
7651: IFFALSE 7655
// exit ;
7653: GO 7732
// if not morale_decreasing_time then
7655: LD_EXP 9
7659: NOT
7660: IFFALSE 7664
// exit ;
7662: GO 7732
// strength = 100 ;
7664: LD_ADDR_LOC 14
7668: PUSH
7669: LD_INT 100
7671: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7672: LD_EXP 9
7676: PPUSH
7677: CALL_OW 67
// strength := strength - 1 ;
7681: LD_ADDR_LOC 14
7685: PUSH
7686: LD_LOC 14
7690: PUSH
7691: LD_INT 1
7693: MINUS
7694: ST_TO_ADDR
// Update_Flags ;
7695: CALL 7543 0 0
// until not strength ;
7699: LD_LOC 14
7703: NOT
7704: IFFALSE 7672
// for un in battle_flags_id do
7706: LD_ADDR_VAR 0 1
7710: PUSH
7711: LD_EXP 27
7715: PUSH
7716: FOR_IN
7717: IFFALSE 7730
// KillBattleFlag ( un ) ;
7719: LD_VAR 0 1
7723: PPUSH
7724: CALL_OW 419
7728: GO 7716
7730: POP
7731: POP
// end ; end_of_file
7732: PPOPN 1
7734: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
7735: LD_INT 0
7737: PPUSH
7738: PPUSH
// if ( not IAmSpec ) then
7739: CALL_OW 531
7743: NOT
7744: IFFALSE 7760
// Result := Limits_Info ^  ;
7746: LD_ADDR_VAR 0 1
7750: PUSH
7751: LD_LOC 26
7755: PUSH
7756: LD_STRING 
7758: ADD
7759: ST_TO_ADDR
// for i := 1 to 8 do
7760: LD_ADDR_VAR 0 2
7764: PUSH
7765: DOUBLE
7766: LD_INT 1
7768: DEC
7769: ST_TO_ADDR
7770: LD_INT 8
7772: PUSH
7773: FOR_TO
7774: IFFALSE 7819
// if Cheaters [ i ] then
7776: LD_LOC 27
7780: PUSH
7781: LD_VAR 0 2
7785: ARRAY
7786: IFFALSE 7817
// Result := Result ^ [ #Cheater , i , i ] ;
7788: LD_ADDR_VAR 0 1
7792: PUSH
7793: LD_VAR 0 1
7797: PUSH
7798: LD_STRING #Cheater
7800: PUSH
7801: LD_VAR 0 2
7805: PUSH
7806: LD_VAR 0 2
7810: PUSH
7811: EMPTY
7812: LIST
7813: LIST
7814: LIST
7815: ADD
7816: ST_TO_ADDR
7817: GO 7773
7819: POP
7820: POP
// end ;
7821: LD_VAR 0 1
7825: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
7826: LD_INT 0
7828: PPUSH
7829: PPUSH
7830: PPUSH
7831: PPUSH
7832: PPUSH
// case Game_Type of 10 :
7833: LD_EXP 36
7837: PUSH
7838: LD_INT 10
7840: DOUBLE
7841: EQUAL
7842: IFTRUE 7846
7844: GO 7857
7846: POP
// def_game_rules := 1 ; 11 :
7847: LD_ADDR_EXP 37
7851: PUSH
7852: LD_INT 1
7854: ST_TO_ADDR
7855: GO 7877
7857: LD_INT 11
7859: DOUBLE
7860: EQUAL
7861: IFTRUE 7865
7863: GO 7876
7865: POP
// def_game_rules := 3 ; end ;
7866: LD_ADDR_EXP 37
7870: PUSH
7871: LD_INT 3
7873: ST_TO_ADDR
7874: GO 7877
7876: POP
// case def_game_rules of 0 :
7877: LD_EXP 37
7881: PUSH
7882: LD_INT 0
7884: DOUBLE
7885: EQUAL
7886: IFTRUE 7890
7888: GO 7895
7890: POP
// exit ; 1 :
7891: GO 9953
7893: GO 9853
7895: LD_INT 1
7897: DOUBLE
7898: EQUAL
7899: IFTRUE 7903
7901: GO 8119
7903: POP
// begin def_base_level := 2 ;
7904: LD_ADDR_EXP 38
7908: PUSH
7909: LD_INT 2
7911: ST_TO_ADDR
// def_amount_of_people := 2 ;
7912: LD_ADDR_EXP 39
7916: PUSH
7917: LD_INT 2
7919: ST_TO_ADDR
// def_skill_level := 1 ;
7920: LD_ADDR_EXP 40
7924: PUSH
7925: LD_INT 1
7927: ST_TO_ADDR
// def_starting_resources := 2 ;
7928: LD_ADDR_EXP 41
7932: PUSH
7933: LD_INT 2
7935: ST_TO_ADDR
// def_shipments_density := 1 ;
7936: LD_ADDR_EXP 42
7940: PUSH
7941: LD_INT 1
7943: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
7944: LD_ADDR_EXP 43
7948: PUSH
7949: LD_INT 0
7951: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
7952: LD_ADDR_EXP 44
7956: PUSH
7957: LD_INT 1
7959: ST_TO_ADDR
// def_shared_vision := 1 ;
7960: LD_ADDR_EXP 45
7964: PUSH
7965: LD_INT 1
7967: ST_TO_ADDR
// def_morale_flags := 3 ;
7968: LD_ADDR_EXP 46
7972: PUSH
7973: LD_INT 3
7975: ST_TO_ADDR
// def_siberite_detection := 1 ;
7976: LD_ADDR_EXP 47
7980: PUSH
7981: LD_INT 1
7983: ST_TO_ADDR
// def_people_respawning := 1 ;
7984: LD_ADDR_EXP 48
7988: PUSH
7989: LD_INT 1
7991: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
7992: LD_ADDR_EXP 49
7996: PUSH
7997: LD_INT 1
7999: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8000: LD_ADDR_EXP 50
8004: PUSH
8005: LD_INT 0
8007: ST_TO_ADDR
// def_builduptime := 2 ;
8008: LD_ADDR_EXP 51
8012: PUSH
8013: LD_INT 2
8015: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
8016: LD_ADDR_VAR 0 2
8020: PUSH
8021: EMPTY
8022: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8023: LD_ADDR_VAR 0 3
8027: PUSH
8028: EMPTY
8029: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8030: LD_ADDR_LOC 21
8034: PUSH
8035: EMPTY
8036: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8037: LD_ADDR_LOC 22
8041: PUSH
8042: EMPTY
8043: ST_TO_ADDR
// Banned_Controls := [ ] ;
8044: LD_ADDR_LOC 23
8048: PUSH
8049: EMPTY
8050: ST_TO_ADDR
// Banned_Engines := [ ] ;
8051: LD_ADDR_LOC 24
8055: PUSH
8056: EMPTY
8057: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
8058: LD_ADDR_LOC 19
8062: PUSH
8063: LD_INT 37
8065: PUSH
8066: EMPTY
8067: LIST
8068: PUSH
8069: LD_INT 4
8071: PUSH
8072: LD_INT 5
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: PUSH
8079: LD_INT 31
8081: PUSH
8082: LD_INT 32
8084: PUSH
8085: LD_INT 33
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: LIST
8092: PUSH
8093: EMPTY
8094: LIST
8095: LIST
8096: LIST
8097: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
8098: LD_ADDR_LOC 20
8102: PUSH
8103: LD_INT 2
8105: PUSH
8106: LD_INT 2
8108: PUSH
8109: LD_INT 4
8111: PUSH
8112: EMPTY
8113: LIST
8114: LIST
8115: LIST
8116: ST_TO_ADDR
// end ; 2 :
8117: GO 9853
8119: LD_INT 2
8121: DOUBLE
8122: EQUAL
8123: IFTRUE 8127
8125: GO 8336
8127: POP
// begin def_base_level := 1 ;
8128: LD_ADDR_EXP 38
8132: PUSH
8133: LD_INT 1
8135: ST_TO_ADDR
// def_amount_of_people := 2 ;
8136: LD_ADDR_EXP 39
8140: PUSH
8141: LD_INT 2
8143: ST_TO_ADDR
// def_skill_level := 3 ;
8144: LD_ADDR_EXP 40
8148: PUSH
8149: LD_INT 3
8151: ST_TO_ADDR
// def_starting_resources := 3 ;
8152: LD_ADDR_EXP 41
8156: PUSH
8157: LD_INT 3
8159: ST_TO_ADDR
// def_shipments_density := 2 ;
8160: LD_ADDR_EXP 42
8164: PUSH
8165: LD_INT 2
8167: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8168: LD_ADDR_EXP 43
8172: PUSH
8173: LD_INT 1
8175: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8176: LD_ADDR_EXP 44
8180: PUSH
8181: LD_INT 2
8183: ST_TO_ADDR
// def_shared_vision := 1 ;
8184: LD_ADDR_EXP 45
8188: PUSH
8189: LD_INT 1
8191: ST_TO_ADDR
// def_morale_flags := 0 ;
8192: LD_ADDR_EXP 46
8196: PUSH
8197: LD_INT 0
8199: ST_TO_ADDR
// def_siberite_detection := 1 ;
8200: LD_ADDR_EXP 47
8204: PUSH
8205: LD_INT 1
8207: ST_TO_ADDR
// def_people_respawning := 0 ;
8208: LD_ADDR_EXP 48
8212: PUSH
8213: LD_INT 0
8215: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
8216: LD_ADDR_EXP 49
8220: PUSH
8221: LD_INT 0
8223: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8224: LD_ADDR_EXP 50
8228: PUSH
8229: LD_INT 0
8231: ST_TO_ADDR
// def_builduptime := 2 ;
8232: LD_ADDR_EXP 51
8236: PUSH
8237: LD_INT 2
8239: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
8240: LD_ADDR_VAR 0 2
8244: PUSH
8245: LD_INT 1
8247: PUSH
8248: EMPTY
8249: LIST
8250: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8251: LD_ADDR_VAR 0 3
8255: PUSH
8256: EMPTY
8257: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8258: LD_ADDR_LOC 21
8262: PUSH
8263: EMPTY
8264: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8265: LD_ADDR_LOC 22
8269: PUSH
8270: EMPTY
8271: ST_TO_ADDR
// Banned_Controls := [ ] ;
8272: LD_ADDR_LOC 23
8276: PUSH
8277: EMPTY
8278: ST_TO_ADDR
// Banned_Engines := [ ] ;
8279: LD_ADDR_LOC 24
8283: PUSH
8284: EMPTY
8285: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
8286: LD_ADDR_LOC 19
8290: PUSH
8291: LD_INT 4
8293: PUSH
8294: LD_INT 5
8296: PUSH
8297: EMPTY
8298: LIST
8299: LIST
8300: PUSH
8301: LD_INT 31
8303: PUSH
8304: LD_INT 32
8306: PUSH
8307: LD_INT 33
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: LIST
8314: PUSH
8315: EMPTY
8316: LIST
8317: LIST
8318: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
8319: LD_ADDR_LOC 20
8323: PUSH
8324: LD_INT 1
8326: PUSH
8327: LD_INT 2
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: ST_TO_ADDR
// end ; 3 :
8334: GO 9853
8336: LD_INT 3
8338: DOUBLE
8339: EQUAL
8340: IFTRUE 8344
8342: GO 8587
8344: POP
// begin def_base_level := 1 ;
8345: LD_ADDR_EXP 38
8349: PUSH
8350: LD_INT 1
8352: ST_TO_ADDR
// def_amount_of_people := 2 ;
8353: LD_ADDR_EXP 39
8357: PUSH
8358: LD_INT 2
8360: ST_TO_ADDR
// def_skill_level := 3 ;
8361: LD_ADDR_EXP 40
8365: PUSH
8366: LD_INT 3
8368: ST_TO_ADDR
// def_starting_resources := 3 ;
8369: LD_ADDR_EXP 41
8373: PUSH
8374: LD_INT 3
8376: ST_TO_ADDR
// def_shipments_density := 1 ;
8377: LD_ADDR_EXP 42
8381: PUSH
8382: LD_INT 1
8384: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8385: LD_ADDR_EXP 43
8389: PUSH
8390: LD_INT 0
8392: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
8393: LD_ADDR_EXP 44
8397: PUSH
8398: LD_INT 1
8400: ST_TO_ADDR
// def_shared_vision := 1 ;
8401: LD_ADDR_EXP 45
8405: PUSH
8406: LD_INT 1
8408: ST_TO_ADDR
// def_morale_flags := 0 ;
8409: LD_ADDR_EXP 46
8413: PUSH
8414: LD_INT 0
8416: ST_TO_ADDR
// def_siberite_detection := 1 ;
8417: LD_ADDR_EXP 47
8421: PUSH
8422: LD_INT 1
8424: ST_TO_ADDR
// def_people_respawning := 0 ;
8425: LD_ADDR_EXP 48
8429: PUSH
8430: LD_INT 0
8432: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
8433: LD_ADDR_EXP 49
8437: PUSH
8438: LD_INT 2
8440: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8441: LD_ADDR_EXP 50
8445: PUSH
8446: LD_INT 0
8448: ST_TO_ADDR
// def_builduptime := 1 ;
8449: LD_ADDR_EXP 51
8453: PUSH
8454: LD_INT 1
8456: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
8457: LD_ADDR_VAR 0 2
8461: PUSH
8462: LD_INT 23
8464: PUSH
8465: EMPTY
8466: LIST
8467: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
8468: LD_ADDR_VAR 0 3
8472: PUSH
8473: LD_INT 2
8475: PUSH
8476: LD_INT 37
8478: PUSH
8479: LD_INT 32
8481: PUSH
8482: LD_INT 33
8484: PUSH
8485: LD_INT 36
8487: PUSH
8488: LD_INT 16
8490: PUSH
8491: LD_INT 23
8493: PUSH
8494: LD_INT 21
8496: PUSH
8497: LD_INT 18
8499: PUSH
8500: LD_INT 22
8502: PUSH
8503: LD_INT 20
8505: PUSH
8506: LD_INT 19
8508: PUSH
8509: LD_INT 25
8511: PUSH
8512: LD_INT 17
8514: PUSH
8515: LD_INT 24
8517: PUSH
8518: EMPTY
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8535: LD_ADDR_LOC 21
8539: PUSH
8540: EMPTY
8541: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8542: LD_ADDR_LOC 22
8546: PUSH
8547: EMPTY
8548: ST_TO_ADDR
// Banned_Controls := [ ] ;
8549: LD_ADDR_LOC 23
8553: PUSH
8554: EMPTY
8555: ST_TO_ADDR
// Banned_Engines := [ ] ;
8556: LD_ADDR_LOC 24
8560: PUSH
8561: EMPTY
8562: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8563: LD_ADDR_LOC 19
8567: PUSH
8568: EMPTY
8569: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8570: LD_ADDR_LOC 20
8574: PUSH
8575: EMPTY
8576: ST_TO_ADDR
// No_Mechs := true ;
8577: LD_ADDR_EXP 52
8581: PUSH
8582: LD_INT 1
8584: ST_TO_ADDR
// end ; 4 :
8585: GO 9853
8587: LD_INT 4
8589: DOUBLE
8590: EQUAL
8591: IFTRUE 8595
8593: GO 8770
8595: POP
// begin def_base_level := 1 ;
8596: LD_ADDR_EXP 38
8600: PUSH
8601: LD_INT 1
8603: ST_TO_ADDR
// def_amount_of_people := 2 ;
8604: LD_ADDR_EXP 39
8608: PUSH
8609: LD_INT 2
8611: ST_TO_ADDR
// def_skill_level := 3 ;
8612: LD_ADDR_EXP 40
8616: PUSH
8617: LD_INT 3
8619: ST_TO_ADDR
// def_starting_resources := 3 ;
8620: LD_ADDR_EXP 41
8624: PUSH
8625: LD_INT 3
8627: ST_TO_ADDR
// def_shipments_density := 2 ;
8628: LD_ADDR_EXP 42
8632: PUSH
8633: LD_INT 2
8635: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8636: LD_ADDR_EXP 43
8640: PUSH
8641: LD_INT 1
8643: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8644: LD_ADDR_EXP 44
8648: PUSH
8649: LD_INT 2
8651: ST_TO_ADDR
// def_shared_vision := 1 ;
8652: LD_ADDR_EXP 45
8656: PUSH
8657: LD_INT 1
8659: ST_TO_ADDR
// def_morale_flags := 0 ;
8660: LD_ADDR_EXP 46
8664: PUSH
8665: LD_INT 0
8667: ST_TO_ADDR
// def_siberite_detection := 1 ;
8668: LD_ADDR_EXP 47
8672: PUSH
8673: LD_INT 1
8675: ST_TO_ADDR
// def_people_respawning := 0 ;
8676: LD_ADDR_EXP 48
8680: PUSH
8681: LD_INT 0
8683: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
8684: LD_ADDR_EXP 49
8688: PUSH
8689: LD_INT 0
8691: ST_TO_ADDR
// def_siberite_bomb := 1 ;
8692: LD_ADDR_EXP 50
8696: PUSH
8697: LD_INT 1
8699: ST_TO_ADDR
// def_builduptime := 3 ;
8700: LD_ADDR_EXP 51
8704: PUSH
8705: LD_INT 3
8707: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
8708: LD_ADDR_VAR 0 2
8712: PUSH
8713: LD_INT 1
8715: PUSH
8716: EMPTY
8717: LIST
8718: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8719: LD_ADDR_VAR 0 3
8723: PUSH
8724: EMPTY
8725: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8726: LD_ADDR_LOC 21
8730: PUSH
8731: EMPTY
8732: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8733: LD_ADDR_LOC 22
8737: PUSH
8738: EMPTY
8739: ST_TO_ADDR
// Banned_Controls := [ ] ;
8740: LD_ADDR_LOC 23
8744: PUSH
8745: EMPTY
8746: ST_TO_ADDR
// Banned_Engines := [ ] ;
8747: LD_ADDR_LOC 24
8751: PUSH
8752: EMPTY
8753: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8754: LD_ADDR_LOC 19
8758: PUSH
8759: EMPTY
8760: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8761: LD_ADDR_LOC 20
8765: PUSH
8766: EMPTY
8767: ST_TO_ADDR
// end ; 5 :
8768: GO 9853
8770: LD_INT 5
8772: DOUBLE
8773: EQUAL
8774: IFTRUE 8778
8776: GO 9027
8778: POP
// begin def_base_level := 0 ;
8779: LD_ADDR_EXP 38
8783: PUSH
8784: LD_INT 0
8786: ST_TO_ADDR
// def_amount_of_people := 0 ;
8787: LD_ADDR_EXP 39
8791: PUSH
8792: LD_INT 0
8794: ST_TO_ADDR
// def_skill_level := 0 ;
8795: LD_ADDR_EXP 40
8799: PUSH
8800: LD_INT 0
8802: ST_TO_ADDR
// def_starting_resources := 0 ;
8803: LD_ADDR_EXP 41
8807: PUSH
8808: LD_INT 0
8810: ST_TO_ADDR
// def_shipments_density := 0 ;
8811: LD_ADDR_EXP 42
8815: PUSH
8816: LD_INT 0
8818: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8819: LD_ADDR_EXP 43
8823: PUSH
8824: LD_INT 0
8826: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
8827: LD_ADDR_EXP 44
8831: PUSH
8832: LD_INT 0
8834: ST_TO_ADDR
// def_shared_vision := 1 ;
8835: LD_ADDR_EXP 45
8839: PUSH
8840: LD_INT 1
8842: ST_TO_ADDR
// def_morale_flags := 0 ;
8843: LD_ADDR_EXP 46
8847: PUSH
8848: LD_INT 0
8850: ST_TO_ADDR
// def_siberite_detection := 0 ;
8851: LD_ADDR_EXP 47
8855: PUSH
8856: LD_INT 0
8858: ST_TO_ADDR
// def_people_respawning := 1 ;
8859: LD_ADDR_EXP 48
8863: PUSH
8864: LD_INT 1
8866: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
8867: LD_ADDR_EXP 49
8871: PUSH
8872: LD_INT 1
8874: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8875: LD_ADDR_EXP 50
8879: PUSH
8880: LD_INT 0
8882: ST_TO_ADDR
// def_builduptime := 0 ;
8883: LD_ADDR_EXP 51
8887: PUSH
8888: LD_INT 0
8890: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
8891: LD_ADDR_VAR 0 2
8895: PUSH
8896: LD_INT 10
8898: PUSH
8899: LD_INT 3
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
8906: LD_ADDR_VAR 0 3
8910: PUSH
8911: LD_INT 12
8913: PUSH
8914: LD_INT 11
8916: PUSH
8917: LD_INT 14
8919: PUSH
8920: LD_INT 13
8922: PUSH
8923: LD_INT 5
8925: PUSH
8926: LD_INT 24
8928: PUSH
8929: LD_INT 21
8931: PUSH
8932: LD_INT 33
8934: PUSH
8935: LD_INT 36
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
8949: LD_ADDR_LOC 21
8953: PUSH
8954: LD_INT 31
8956: PUSH
8957: EMPTY
8958: LIST
8959: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8960: LD_ADDR_LOC 22
8964: PUSH
8965: EMPTY
8966: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
8967: LD_ADDR_LOC 23
8971: PUSH
8972: LD_INT 2
8974: PUSH
8975: EMPTY
8976: LIST
8977: ST_TO_ADDR
// Banned_Engines := [ ] ;
8978: LD_ADDR_LOC 24
8982: PUSH
8983: EMPTY
8984: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
8985: LD_ADDR_LOC 19
8989: PUSH
8990: LD_INT 4
8992: PUSH
8993: EMPTY
8994: LIST
8995: PUSH
8996: LD_INT 31
8998: PUSH
8999: LD_INT 32
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: PUSH
9006: EMPTY
9007: LIST
9008: LIST
9009: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
9010: LD_ADDR_LOC 20
9014: PUSH
9015: LD_INT 1
9017: PUSH
9018: LD_INT 1
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: ST_TO_ADDR
// end ; 6 :
9025: GO 9853
9027: LD_INT 6
9029: DOUBLE
9030: EQUAL
9031: IFTRUE 9035
9033: GO 9238
9035: POP
// begin def_base_level := 1 ;
9036: LD_ADDR_EXP 38
9040: PUSH
9041: LD_INT 1
9043: ST_TO_ADDR
// def_amount_of_people := 2 ;
9044: LD_ADDR_EXP 39
9048: PUSH
9049: LD_INT 2
9051: ST_TO_ADDR
// def_skill_level := 3 ;
9052: LD_ADDR_EXP 40
9056: PUSH
9057: LD_INT 3
9059: ST_TO_ADDR
// def_starting_resources := 3 ;
9060: LD_ADDR_EXP 41
9064: PUSH
9065: LD_INT 3
9067: ST_TO_ADDR
// def_shipments_density := 1 ;
9068: LD_ADDR_EXP 42
9072: PUSH
9073: LD_INT 1
9075: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9076: LD_ADDR_EXP 43
9080: PUSH
9081: LD_INT 0
9083: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9084: LD_ADDR_EXP 44
9088: PUSH
9089: LD_INT 1
9091: ST_TO_ADDR
// def_shared_vision := 1 ;
9092: LD_ADDR_EXP 45
9096: PUSH
9097: LD_INT 1
9099: ST_TO_ADDR
// def_morale_flags := 0 ;
9100: LD_ADDR_EXP 46
9104: PUSH
9105: LD_INT 0
9107: ST_TO_ADDR
// def_siberite_detection := 1 ;
9108: LD_ADDR_EXP 47
9112: PUSH
9113: LD_INT 1
9115: ST_TO_ADDR
// def_people_respawning := 2 ;
9116: LD_ADDR_EXP 48
9120: PUSH
9121: LD_INT 2
9123: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9124: LD_ADDR_EXP 49
9128: PUSH
9129: LD_INT 1
9131: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9132: LD_ADDR_EXP 50
9136: PUSH
9137: LD_INT 0
9139: ST_TO_ADDR
// def_builduptime := 1 ;
9140: LD_ADDR_EXP 51
9144: PUSH
9145: LD_INT 1
9147: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9148: LD_ADDR_VAR 0 2
9152: PUSH
9153: LD_INT 23
9155: PUSH
9156: EMPTY
9157: LIST
9158: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
9159: LD_ADDR_VAR 0 3
9163: PUSH
9164: LD_INT 2
9166: PUSH
9167: LD_INT 37
9169: PUSH
9170: LD_INT 31
9172: PUSH
9173: LD_INT 32
9175: PUSH
9176: LD_INT 33
9178: PUSH
9179: EMPTY
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9186: LD_ADDR_LOC 21
9190: PUSH
9191: EMPTY
9192: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9193: LD_ADDR_LOC 22
9197: PUSH
9198: EMPTY
9199: ST_TO_ADDR
// Banned_Controls := [ ] ;
9200: LD_ADDR_LOC 23
9204: PUSH
9205: EMPTY
9206: ST_TO_ADDR
// Banned_Engines := [ ] ;
9207: LD_ADDR_LOC 24
9211: PUSH
9212: EMPTY
9213: ST_TO_ADDR
// Restricted_Builds := [ ] ;
9214: LD_ADDR_LOC 19
9218: PUSH
9219: EMPTY
9220: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
9221: LD_ADDR_LOC 20
9225: PUSH
9226: EMPTY
9227: ST_TO_ADDR
// No_Mechs := true ;
9228: LD_ADDR_EXP 52
9232: PUSH
9233: LD_INT 1
9235: ST_TO_ADDR
// end ; 7 :
9236: GO 9853
9238: LD_INT 7
9240: DOUBLE
9241: EQUAL
9242: IFTRUE 9246
9244: GO 9444
9246: POP
// begin def_base_level := 1 ;
9247: LD_ADDR_EXP 38
9251: PUSH
9252: LD_INT 1
9254: ST_TO_ADDR
// def_amount_of_people := 2 ;
9255: LD_ADDR_EXP 39
9259: PUSH
9260: LD_INT 2
9262: ST_TO_ADDR
// def_skill_level := 3 ;
9263: LD_ADDR_EXP 40
9267: PUSH
9268: LD_INT 3
9270: ST_TO_ADDR
// def_starting_resources := 3 ;
9271: LD_ADDR_EXP 41
9275: PUSH
9276: LD_INT 3
9278: ST_TO_ADDR
// def_shipments_density := 1 ;
9279: LD_ADDR_EXP 42
9283: PUSH
9284: LD_INT 1
9286: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9287: LD_ADDR_EXP 43
9291: PUSH
9292: LD_INT 1
9294: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9295: LD_ADDR_EXP 44
9299: PUSH
9300: LD_INT 2
9302: ST_TO_ADDR
// def_shared_vision := 1 ;
9303: LD_ADDR_EXP 45
9307: PUSH
9308: LD_INT 1
9310: ST_TO_ADDR
// def_morale_flags := 0 ;
9311: LD_ADDR_EXP 46
9315: PUSH
9316: LD_INT 0
9318: ST_TO_ADDR
// def_siberite_detection := 1 ;
9319: LD_ADDR_EXP 47
9323: PUSH
9324: LD_INT 1
9326: ST_TO_ADDR
// def_people_respawning := 0 ;
9327: LD_ADDR_EXP 48
9331: PUSH
9332: LD_INT 0
9334: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9335: LD_ADDR_EXP 49
9339: PUSH
9340: LD_INT 1
9342: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9343: LD_ADDR_EXP 50
9347: PUSH
9348: LD_INT 0
9350: ST_TO_ADDR
// def_builduptime := 3 ;
9351: LD_ADDR_EXP 51
9355: PUSH
9356: LD_INT 3
9358: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9359: LD_ADDR_VAR 0 2
9363: PUSH
9364: LD_INT 23
9366: PUSH
9367: EMPTY
9368: LIST
9369: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
9370: LD_ADDR_VAR 0 3
9374: PUSH
9375: LD_INT 37
9377: PUSH
9378: EMPTY
9379: LIST
9380: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9381: LD_ADDR_LOC 21
9385: PUSH
9386: EMPTY
9387: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9388: LD_ADDR_LOC 22
9392: PUSH
9393: EMPTY
9394: ST_TO_ADDR
// Banned_Controls := [ ] ;
9395: LD_ADDR_LOC 23
9399: PUSH
9400: EMPTY
9401: ST_TO_ADDR
// Banned_Engines := [ ] ;
9402: LD_ADDR_LOC 24
9406: PUSH
9407: EMPTY
9408: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9409: LD_ADDR_LOC 19
9413: PUSH
9414: LD_INT 31
9416: PUSH
9417: LD_INT 32
9419: PUSH
9420: LD_INT 33
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: LIST
9427: PUSH
9428: EMPTY
9429: LIST
9430: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
9431: LD_ADDR_LOC 20
9435: PUSH
9436: LD_INT 10
9438: PUSH
9439: EMPTY
9440: LIST
9441: ST_TO_ADDR
// end ; 8 :
9442: GO 9853
9444: LD_INT 8
9446: DOUBLE
9447: EQUAL
9448: IFTRUE 9452
9450: GO 9852
9452: POP
// begin def_base_level := 0 ;
9453: LD_ADDR_EXP 38
9457: PUSH
9458: LD_INT 0
9460: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
9461: LD_ADDR_EXP 39
9465: PUSH
9466: LD_INT 0
9468: PPUSH
9469: LD_INT 1
9471: PPUSH
9472: CALL_OW 12
9476: ST_TO_ADDR
// def_skill_level := 0 ;
9477: LD_ADDR_EXP 40
9481: PUSH
9482: LD_INT 0
9484: ST_TO_ADDR
// def_starting_resources := 2 ;
9485: LD_ADDR_EXP 41
9489: PUSH
9490: LD_INT 2
9492: ST_TO_ADDR
// def_shipments_density := 1 ;
9493: LD_ADDR_EXP 42
9497: PUSH
9498: LD_INT 1
9500: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9501: LD_ADDR_EXP 43
9505: PUSH
9506: LD_INT 0
9508: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
9509: LD_ADDR_EXP 44
9513: PUSH
9514: LD_INT 0
9516: ST_TO_ADDR
// def_shared_vision := 1 ;
9517: LD_ADDR_EXP 45
9521: PUSH
9522: LD_INT 1
9524: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
9525: LD_ADDR_EXP 46
9529: PUSH
9530: LD_INT 0
9532: PPUSH
9533: LD_INT 2
9535: PPUSH
9536: CALL_OW 12
9540: ST_TO_ADDR
// def_siberite_detection := 0 ;
9541: LD_ADDR_EXP 47
9545: PUSH
9546: LD_INT 0
9548: ST_TO_ADDR
// def_people_respawning := 0 ;
9549: LD_ADDR_EXP 48
9553: PUSH
9554: LD_INT 0
9556: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
9557: LD_ADDR_EXP 49
9561: PUSH
9562: LD_INT 2
9564: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9565: LD_ADDR_EXP 50
9569: PUSH
9570: LD_INT 0
9572: ST_TO_ADDR
// def_builduptime := 0 ;
9573: LD_ADDR_EXP 51
9577: PUSH
9578: LD_INT 0
9580: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
9581: LD_ADDR_VAR 0 2
9585: PUSH
9586: LD_INT 23
9588: PUSH
9589: LD_INT 20
9591: PUSH
9592: LD_INT 40
9594: PUSH
9595: LD_INT 47
9597: PUSH
9598: LD_INT 46
9600: PUSH
9601: LD_INT 39
9603: PUSH
9604: LD_INT 71
9606: PUSH
9607: LD_INT 34
9609: PUSH
9610: LD_INT 41
9612: PUSH
9613: LD_INT 44
9615: PUSH
9616: LD_INT 17
9618: PUSH
9619: LD_INT 16
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
9636: LD_ADDR_VAR 0 3
9640: PUSH
9641: LD_INT 37
9643: PUSH
9644: LD_INT 5
9646: PUSH
9647: LD_INT 13
9649: PUSH
9650: LD_INT 34
9652: PUSH
9653: LD_INT 12
9655: PUSH
9656: LD_INT 15
9658: PUSH
9659: LD_INT 11
9661: PUSH
9662: LD_INT 14
9664: PUSH
9665: LD_INT 29
9667: PUSH
9668: LD_INT 30
9670: PUSH
9671: LD_INT 28
9673: PUSH
9674: LD_INT 24
9676: PUSH
9677: LD_INT 25
9679: PUSH
9680: LD_INT 20
9682: PUSH
9683: LD_INT 21
9685: PUSH
9686: LD_INT 22
9688: PUSH
9689: LD_INT 36
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9711: LD_ADDR_LOC 21
9715: PUSH
9716: EMPTY
9717: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
9718: LD_ADDR_LOC 22
9722: PUSH
9723: LD_INT 14
9725: PUSH
9726: EMPTY
9727: LIST
9728: ST_TO_ADDR
// Banned_Controls := [ ] ;
9729: LD_ADDR_LOC 23
9733: PUSH
9734: EMPTY
9735: ST_TO_ADDR
// Banned_Engines := [ ] ;
9736: LD_ADDR_LOC 24
9740: PUSH
9741: EMPTY
9742: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
9743: LD_ADDR_LOC 19
9747: PUSH
9748: LD_INT 31
9750: PUSH
9751: LD_INT 32
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: PUSH
9758: LD_INT 4
9760: PUSH
9761: EMPTY
9762: LIST
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
9768: LD_ADDR_LOC 20
9772: PUSH
9773: LD_INT 2
9775: PUSH
9776: LD_INT 1
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: ST_TO_ADDR
// for i := 1 to 8 do
9783: LD_ADDR_VAR 0 4
9787: PUSH
9788: DOUBLE
9789: LD_INT 1
9791: DEC
9792: ST_TO_ADDR
9793: LD_INT 8
9795: PUSH
9796: FOR_TO
9797: IFFALSE 9848
// if ( Side_Nations [ i ] = 3 ) then
9799: LD_EXP 21
9803: PUSH
9804: LD_VAR 0 4
9808: ARRAY
9809: PUSH
9810: LD_INT 3
9812: EQUAL
9813: IFFALSE 9846
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
9815: LD_ADDR_EXP 21
9819: PUSH
9820: LD_EXP 21
9824: PPUSH
9825: LD_VAR 0 4
9829: PPUSH
9830: LD_INT 1
9832: PPUSH
9833: LD_INT 2
9835: PPUSH
9836: CALL_OW 12
9840: PPUSH
9841: CALL_OW 1
9845: ST_TO_ADDR
9846: GO 9796
9848: POP
9849: POP
// end ; end ;
9850: GO 9853
9852: POP
// for i := 1 to 8 do
9853: LD_ADDR_VAR 0 4
9857: PUSH
9858: DOUBLE
9859: LD_INT 1
9861: DEC
9862: ST_TO_ADDR
9863: LD_INT 8
9865: PUSH
9866: FOR_TO
9867: IFFALSE 9951
// if Side_Positions [ i ] then
9869: LD_EXP 20
9873: PUSH
9874: LD_VAR 0 4
9878: ARRAY
9879: IFFALSE 9949
// begin for j in Unavailable_Techs do
9881: LD_ADDR_VAR 0 5
9885: PUSH
9886: LD_VAR 0 2
9890: PUSH
9891: FOR_IN
9892: IFFALSE 9913
// SetTech ( j , i , 0 ) ;
9894: LD_VAR 0 5
9898: PPUSH
9899: LD_VAR 0 4
9903: PPUSH
9904: LD_INT 0
9906: PPUSH
9907: CALL_OW 322
9911: GO 9891
9913: POP
9914: POP
// for j in Unavailable_Builds do
9915: LD_ADDR_VAR 0 5
9919: PUSH
9920: LD_VAR 0 3
9924: PUSH
9925: FOR_IN
9926: IFFALSE 9947
// SetRestrict ( j , i , 0 ) ;
9928: LD_VAR 0 5
9932: PPUSH
9933: LD_VAR 0 4
9937: PPUSH
9938: LD_INT 0
9940: PPUSH
9941: CALL_OW 324
9945: GO 9925
9947: POP
9948: POP
// end ;
9949: GO 9866
9951: POP
9952: POP
// end ;
9953: LD_VAR 0 1
9957: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
9958: LD_INT 0
9960: PPUSH
9961: PPUSH
9962: PPUSH
9963: PPUSH
9964: PPUSH
9965: PPUSH
9966: PPUSH
// for i := 1 to Restricted_Builds do
9967: LD_ADDR_VAR 0 2
9971: PUSH
9972: DOUBLE
9973: LD_INT 1
9975: DEC
9976: ST_TO_ADDR
9977: LD_LOC 19
9981: PUSH
9982: FOR_TO
9983: IFFALSE 10293
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
9985: LD_LOC 19
9989: PUSH
9990: LD_VAR 0 2
9994: ARRAY
9995: PUSH
9996: LD_INT 1
9998: ARRAY
9999: PUSH
10000: LD_INT 31
10002: DOUBLE
10003: EQUAL
10004: IFTRUE 10020
10006: LD_INT 32
10008: DOUBLE
10009: EQUAL
10010: IFTRUE 10020
10012: LD_INT 33
10014: DOUBLE
10015: EQUAL
10016: IFTRUE 10020
10018: GO 10031
10020: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
10021: LD_ADDR_VAR 0 6
10025: PUSH
10026: LD_STRING #Turrets
10028: ST_TO_ADDR
10029: GO 10076
10031: LD_INT 4
10033: DOUBLE
10034: EQUAL
10035: IFTRUE 10045
10037: LD_INT 5
10039: DOUBLE
10040: EQUAL
10041: IFTRUE 10045
10043: GO 10056
10045: POP
// btype := #Armouries ; b_Behemoth :
10046: LD_ADDR_VAR 0 6
10050: PUSH
10051: LD_STRING #Armouries
10053: ST_TO_ADDR
10054: GO 10076
10056: LD_INT 37
10058: DOUBLE
10059: EQUAL
10060: IFTRUE 10064
10062: GO 10075
10064: POP
// btype := #Behemoths ; end ;
10065: LD_ADDR_VAR 0 6
10069: PUSH
10070: LD_STRING #Behemoths
10072: ST_TO_ADDR
10073: GO 10076
10075: POP
// list := [ ] ;
10076: LD_ADDR_VAR 0 7
10080: PUSH
10081: EMPTY
10082: ST_TO_ADDR
// for j := 1 to 8 do
10083: LD_ADDR_VAR 0 3
10087: PUSH
10088: DOUBLE
10089: LD_INT 1
10091: DEC
10092: ST_TO_ADDR
10093: LD_INT 8
10095: PUSH
10096: FOR_TO
10097: IFFALSE 10190
// if Side_Positions [ j ] then
10099: LD_EXP 20
10103: PUSH
10104: LD_VAR 0 3
10108: ARRAY
10109: IFFALSE 10188
// begin amount := 0 ;
10111: LD_ADDR_VAR 0 5
10115: PUSH
10116: LD_INT 0
10118: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
10119: LD_ADDR_VAR 0 4
10123: PUSH
10124: LD_LOC 19
10128: PUSH
10129: LD_VAR 0 2
10133: ARRAY
10134: PUSH
10135: FOR_IN
10136: IFFALSE 10184
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
10138: LD_ADDR_VAR 0 5
10142: PUSH
10143: LD_VAR 0 5
10147: PUSH
10148: LD_INT 22
10150: PUSH
10151: LD_VAR 0 3
10155: PUSH
10156: EMPTY
10157: LIST
10158: LIST
10159: PUSH
10160: LD_INT 30
10162: PUSH
10163: LD_VAR 0 4
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: PPUSH
10176: CALL_OW 69
10180: PLUS
10181: ST_TO_ADDR
10182: GO 10135
10184: POP
10185: POP
// break ;
10186: GO 10190
// end ;
10188: GO 10096
10190: POP
10191: POP
// list := [ ] ;
10192: LD_ADDR_VAR 0 7
10196: PUSH
10197: EMPTY
10198: ST_TO_ADDR
// for j := 1 to 8 do
10199: LD_ADDR_VAR 0 3
10203: PUSH
10204: DOUBLE
10205: LD_INT 1
10207: DEC
10208: ST_TO_ADDR
10209: LD_INT 8
10211: PUSH
10212: FOR_TO
10213: IFFALSE 10233
// list := list ^ amount ;
10215: LD_ADDR_VAR 0 7
10219: PUSH
10220: LD_VAR 0 7
10224: PUSH
10225: LD_VAR 0 5
10229: ADD
10230: ST_TO_ADDR
10231: GO 10212
10233: POP
10234: POP
// Already_Built := Already_Built ^ [ list ] ;
10235: LD_ADDR_LOC 25
10239: PUSH
10240: LD_LOC 25
10244: PUSH
10245: LD_VAR 0 7
10249: PUSH
10250: EMPTY
10251: LIST
10252: ADD
10253: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
10254: LD_ADDR_LOC 26
10258: PUSH
10259: LD_LOC 26
10263: PUSH
10264: LD_VAR 0 6
10268: PUSH
10269: LD_VAR 0 5
10273: PUSH
10274: LD_LOC 20
10278: PUSH
10279: LD_VAR 0 2
10283: ARRAY
10284: PUSH
10285: EMPTY
10286: LIST
10287: LIST
10288: LIST
10289: ADD
10290: ST_TO_ADDR
// end ;
10291: GO 9982
10293: POP
10294: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10295: LD_ADDR_LOC 27
10299: PUSH
10300: LD_INT 0
10302: PUSH
10303: LD_INT 0
10305: PUSH
10306: LD_INT 0
10308: PUSH
10309: LD_INT 0
10311: PUSH
10312: LD_INT 0
10314: PUSH
10315: LD_INT 0
10317: PUSH
10318: LD_INT 0
10320: PUSH
10321: LD_INT 0
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: ST_TO_ADDR
// if Limits_Info then
10334: LD_LOC 26
10338: IFFALSE 10354
// Limits_Info := #Limits ^ Limits_Info ;
10340: LD_ADDR_LOC 26
10344: PUSH
10345: LD_STRING #Limits
10347: PUSH
10348: LD_LOC 26
10352: ADD
10353: ST_TO_ADDR
// end ;
10354: LD_VAR 0 1
10358: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
10359: LD_INT 0
10361: PPUSH
10362: PPUSH
10363: PPUSH
10364: PPUSH
// for i := 1 to Restricted_Builds do
10365: LD_ADDR_VAR 0 7
10369: PUSH
10370: DOUBLE
10371: LD_INT 1
10373: DEC
10374: ST_TO_ADDR
10375: LD_LOC 19
10379: PUSH
10380: FOR_TO
10381: IFFALSE 10804
// if BType in Restricted_Builds [ i ] then
10383: LD_VAR 0 2
10387: PUSH
10388: LD_LOC 19
10392: PUSH
10393: LD_VAR 0 7
10397: ARRAY
10398: IN
10399: IFFALSE 10802
// begin if old_side then
10401: LD_VAR 0 4
10405: IFFALSE 10531
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
10407: LD_LOC 25
10411: PUSH
10412: LD_VAR 0 7
10416: ARRAY
10417: PUSH
10418: LD_VAR 0 3
10422: ARRAY
10423: PUSH
10424: LD_VAR 0 5
10428: PLUS
10429: PUSH
10430: LD_LOC 20
10434: PUSH
10435: LD_VAR 0 7
10439: ARRAY
10440: GREATER
10441: IFFALSE 10467
// begin SetSide ( un , old_side ) ;
10443: LD_VAR 0 1
10447: PPUSH
10448: LD_VAR 0 4
10452: PPUSH
10453: CALL_OW 235
// count := 0 ;
10457: LD_ADDR_VAR 0 5
10461: PUSH
10462: LD_INT 0
10464: ST_TO_ADDR
// end else
10465: GO 10531
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
10467: LD_ADDR_LOC 25
10471: PUSH
10472: LD_LOC 25
10476: PPUSH
10477: LD_VAR 0 7
10481: PPUSH
10482: LD_LOC 25
10486: PUSH
10487: LD_VAR 0 7
10491: ARRAY
10492: PPUSH
10493: LD_VAR 0 4
10497: PPUSH
10498: LD_LOC 25
10502: PUSH
10503: LD_VAR 0 7
10507: ARRAY
10508: PUSH
10509: LD_VAR 0 4
10513: ARRAY
10514: PUSH
10515: LD_VAR 0 5
10519: MINUS
10520: PPUSH
10521: CALL_OW 1
10525: PPUSH
10526: CALL_OW 1
10530: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
10531: LD_ADDR_LOC 25
10535: PUSH
10536: LD_LOC 25
10540: PPUSH
10541: LD_VAR 0 7
10545: PPUSH
10546: LD_LOC 25
10550: PUSH
10551: LD_VAR 0 7
10555: ARRAY
10556: PPUSH
10557: LD_VAR 0 3
10561: PPUSH
10562: LD_LOC 25
10566: PUSH
10567: LD_VAR 0 7
10571: ARRAY
10572: PUSH
10573: LD_VAR 0 3
10577: ARRAY
10578: PUSH
10579: LD_VAR 0 5
10583: PLUS
10584: PPUSH
10585: CALL_OW 1
10589: PPUSH
10590: CALL_OW 1
10594: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
10595: LD_VAR 0 5
10599: PUSH
10600: LD_INT 0
10602: NONEQUAL
10603: PUSH
10604: LD_VAR 0 3
10608: PUSH
10609: LD_OWVAR 2
10613: EQUAL
10614: AND
10615: IFFALSE 10658
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
10617: LD_ADDR_LOC 26
10621: PUSH
10622: LD_LOC 26
10626: PPUSH
10627: LD_INT 3
10629: PUSH
10630: LD_VAR 0 7
10634: MUL
10635: PPUSH
10636: LD_LOC 25
10640: PUSH
10641: LD_VAR 0 7
10645: ARRAY
10646: PUSH
10647: LD_VAR 0 3
10651: ARRAY
10652: PPUSH
10653: CALL_OW 1
10657: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
10658: LD_LOC 25
10662: PUSH
10663: LD_VAR 0 7
10667: ARRAY
10668: PUSH
10669: LD_VAR 0 3
10673: ARRAY
10674: PUSH
10675: LD_LOC 20
10679: PUSH
10680: LD_VAR 0 7
10684: ARRAY
10685: GREATER
10686: IFFALSE 10713
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
10688: LD_ADDR_LOC 27
10692: PUSH
10693: LD_LOC 27
10697: PPUSH
10698: LD_VAR 0 3
10702: PPUSH
10703: LD_INT 1
10705: PPUSH
10706: CALL_OW 1
10710: ST_TO_ADDR
// end else
10711: GO 10800
// begin for j := 1 to Restricted_Builds do
10713: LD_ADDR_VAR 0 8
10717: PUSH
10718: DOUBLE
10719: LD_INT 1
10721: DEC
10722: ST_TO_ADDR
10723: LD_LOC 19
10727: PUSH
10728: FOR_TO
10729: IFFALSE 10773
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
10731: LD_LOC 25
10735: PUSH
10736: LD_VAR 0 8
10740: ARRAY
10741: PUSH
10742: LD_VAR 0 3
10746: ARRAY
10747: PUSH
10748: LD_LOC 20
10752: PUSH
10753: LD_VAR 0 8
10757: ARRAY
10758: GREATER
10759: IFFALSE 10771
// begin Is_Cheater := true ;
10761: LD_ADDR_VAR 0 9
10765: PUSH
10766: LD_INT 1
10768: ST_TO_ADDR
// break ;
10769: GO 10773
// end ;
10771: GO 10728
10773: POP
10774: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
10775: LD_ADDR_LOC 27
10779: PUSH
10780: LD_LOC 27
10784: PPUSH
10785: LD_VAR 0 3
10789: PPUSH
10790: LD_VAR 0 9
10794: PPUSH
10795: CALL_OW 1
10799: ST_TO_ADDR
// end ; break ;
10800: GO 10804
// end ;
10802: GO 10380
10804: POP
10805: POP
// end ;
10806: LD_VAR 0 6
10810: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
10811: LD_VAR 0 5
10815: PUSH
10816: LD_LOC 21
10820: IN
10821: PUSH
10822: LD_VAR 0 2
10826: PUSH
10827: LD_LOC 22
10831: IN
10832: OR
10833: PUSH
10834: LD_VAR 0 4
10838: PUSH
10839: LD_LOC 23
10843: IN
10844: OR
10845: PUSH
10846: LD_VAR 0 3
10850: PUSH
10851: LD_LOC 24
10855: IN
10856: OR
10857: IFFALSE 10868
// ComCancel ( factory ) ;
10859: LD_VAR 0 1
10863: PPUSH
10864: CALL_OW 127
// end ;
10868: PPOPN 5
10870: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
10871: LD_VAR 0 2
10875: PUSH
10876: LD_LOC 21
10880: IN
10881: IFFALSE 10892
// ComCancel ( building ) ;
10883: LD_VAR 0 1
10887: PPUSH
10888: CALL_OW 127
// end ; end_of_file
10892: PPOPN 2
10894: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
10895: LD_INT 0
10897: PPUSH
10898: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
10899: LD_ADDR_VAR 0 2
10903: PUSH
10904: LD_STRING #Multi1x1-Time
10906: PUSH
10907: LD_OWVAR 1
10911: PUSH
10912: EMPTY
10913: LIST
10914: LIST
10915: ST_TO_ADDR
// if WaitServerStrings then
10916: LD_EXP 54
10920: IFFALSE 10938
// AllStrings = AllStrings ^ WaitServerStrings ;
10922: LD_ADDR_VAR 0 2
10926: PUSH
10927: LD_VAR 0 2
10931: PUSH
10932: LD_EXP 54
10936: ADD
10937: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
10938: LD_INT 0
10940: PUSH
10941: LD_EXP 12
10945: PUSH
10946: LD_OWVAR 1
10950: MINUS
10951: LESSEQUAL
10952: IFFALSE 10983
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
10954: LD_ADDR_VAR 0 2
10958: PUSH
10959: LD_VAR 0 2
10963: PUSH
10964: LD_STRING #allowedsibbomb
10966: PUSH
10967: LD_EXP 12
10971: PUSH
10972: LD_OWVAR 1
10976: MINUS
10977: PUSH
10978: EMPTY
10979: LIST
10980: LIST
10981: ADD
10982: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
10983: LD_INT 0
10985: PUSH
10986: LD_EXP 16
10990: PUSH
10991: LD_OWVAR 1
10995: MINUS
10996: LESSEQUAL
10997: IFFALSE 11028
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
10999: LD_ADDR_VAR 0 2
11003: PUSH
11004: LD_VAR 0 2
11008: PUSH
11009: LD_STRING #builduptime
11011: PUSH
11012: LD_EXP 16
11016: PUSH
11017: LD_OWVAR 1
11021: MINUS
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: ADD
11027: ST_TO_ADDR
// if ( ExtraStrings ) then
11028: LD_EXP 53
11032: IFFALSE 11054
// AllStrings := AllStrings ^  ^ ExtraStrings ;
11034: LD_ADDR_VAR 0 2
11038: PUSH
11039: LD_VAR 0 2
11043: PUSH
11044: LD_STRING 
11046: ADD
11047: PUSH
11048: LD_EXP 53
11052: ADD
11053: ST_TO_ADDR
// if ( LimitsStrings ) then
11054: CALL 7735 0 0
11058: IFFALSE 11080
// AllStrings := AllStrings ^  ^ LimitsStrings ;
11060: LD_ADDR_VAR 0 2
11064: PUSH
11065: LD_VAR 0 2
11069: PUSH
11070: LD_STRING 
11072: ADD
11073: PUSH
11074: CALL 7735 0 0
11078: ADD
11079: ST_TO_ADDR
// Display_Strings := AllStrings ;
11080: LD_ADDR_OWVAR 47
11084: PUSH
11085: LD_VAR 0 2
11089: ST_TO_ADDR
// end ;
11090: LD_VAR 0 1
11094: RET
// every 0 0$1 do
11095: GO 11097
11097: DISABLE
// begin ShowTimer ;
11098: CALL 10895 0 0
// enable ;
11102: ENABLE
// end ; end_of_file
11103: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
11104: LD_INT 0
11106: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
11107: LD_VAR 0 1
11111: PPUSH
11112: CALL_OW 255
11116: PUSH
11117: LD_VAR 0 4
11121: EQUAL
11122: IFFALSE 11141
// begin SetAchievement ( ACH_RAD ) ;
11124: LD_STRING ACH_RAD
11126: PPUSH
11127: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
11131: LD_STRING ACH_NL
11133: PPUSH
11134: LD_INT 1
11136: PPUSH
11137: CALL_OW 564
// end end ;
11141: LD_VAR 0 5
11145: RET
// export function SA_Win ( side ) ; begin
11146: LD_INT 0
11148: PPUSH
// case side of 1 :
11149: LD_VAR 0 1
11153: PUSH
11154: LD_INT 1
11156: DOUBLE
11157: EQUAL
11158: IFTRUE 11162
11160: GO 11175
11162: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
11163: LD_STRING ACH_AH
11165: PPUSH
11166: LD_INT 1
11168: PPUSH
11169: CALL_OW 564
11173: GO 11338
11175: LD_INT 2
11177: DOUBLE
11178: EQUAL
11179: IFTRUE 11183
11181: GO 11196
11183: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
11184: LD_STRING ACH_E
11186: PPUSH
11187: LD_INT 1
11189: PPUSH
11190: CALL_OW 564
11194: GO 11338
11196: LD_INT 3
11198: DOUBLE
11199: EQUAL
11200: IFTRUE 11204
11202: GO 11217
11204: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
11205: LD_STRING ACH_OOL
11207: PPUSH
11208: LD_INT 1
11210: PPUSH
11211: CALL_OW 564
11215: GO 11338
11217: LD_INT 1
11219: PUSH
11220: LD_INT 2
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: DOUBLE
11227: EQUAL
11228: IFTRUE 11232
11230: GO 11257
11232: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
11233: LD_STRING ACH_AH
11235: PPUSH
11236: LD_REAL  5.00000000000000E-0001
11239: PPUSH
11240: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
11244: LD_STRING ACH_E
11246: PPUSH
11247: LD_REAL  5.00000000000000E-0001
11250: PPUSH
11251: CALL_OW 564
// end ; [ 2 , 3 ] :
11255: GO 11338
11257: LD_INT 2
11259: PUSH
11260: LD_INT 3
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: DOUBLE
11267: EQUAL
11268: IFTRUE 11272
11270: GO 11297
11272: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
11273: LD_STRING ACH_OOL
11275: PPUSH
11276: LD_REAL  5.00000000000000E-0001
11279: PPUSH
11280: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
11284: LD_STRING ACH_E
11286: PPUSH
11287: LD_REAL  5.00000000000000E-0001
11290: PPUSH
11291: CALL_OW 564
// end ; [ 3 , 1 ] :
11295: GO 11338
11297: LD_INT 3
11299: PUSH
11300: LD_INT 1
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: DOUBLE
11307: EQUAL
11308: IFTRUE 11312
11310: GO 11337
11312: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
11313: LD_STRING ACH_AH
11315: PPUSH
11316: LD_REAL  5.00000000000000E-0001
11319: PPUSH
11320: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
11324: LD_STRING ACH_OOL
11326: PPUSH
11327: LD_REAL  5.00000000000000E-0001
11330: PPUSH
11331: CALL_OW 564
// end ; end ;
11335: GO 11338
11337: POP
// end ; end_of_file
11338: LD_VAR 0 2
11342: RET
// export BuildUpAreas , BuildUp ; export function BeginBuildUp ; var i , j ; begin
11343: LD_INT 0
11345: PPUSH
11346: PPUSH
11347: PPUSH
// enable ( 600 ) ;
11348: LD_INT 600
11350: ENABLE_MARKED
// BuildUp = true ;
11351: LD_ADDR_EXP 56
11355: PUSH
11356: LD_INT 1
11358: ST_TO_ADDR
// for i := 1 to BuildUpAreas do
11359: LD_ADDR_VAR 0 2
11363: PUSH
11364: DOUBLE
11365: LD_INT 1
11367: DEC
11368: ST_TO_ADDR
11369: LD_EXP 55
11373: PUSH
11374: FOR_TO
11375: IFFALSE 11530
// if Position_Sides [ i ] then
11377: LD_EXP 23
11381: PUSH
11382: LD_VAR 0 2
11386: ARRAY
11387: IFFALSE 11528
// for j := 1 to 8 do
11389: LD_ADDR_VAR 0 3
11393: PUSH
11394: DOUBLE
11395: LD_INT 1
11397: DEC
11398: ST_TO_ADDR
11399: LD_INT 8
11401: PUSH
11402: FOR_TO
11403: IFFALSE 11526
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
11405: LD_EXP 20
11409: PUSH
11410: LD_VAR 0 3
11414: ARRAY
11415: PUSH
11416: LD_EXP 17
11420: PUSH
11421: LD_EXP 23
11425: PUSH
11426: LD_VAR 0 2
11430: ARRAY
11431: ARRAY
11432: PUSH
11433: LD_EXP 17
11437: PUSH
11438: LD_VAR 0 3
11442: ARRAY
11443: NONEQUAL
11444: PUSH
11445: LD_EXP 22
11449: NOT
11450: PUSH
11451: LD_EXP 23
11455: PUSH
11456: LD_VAR 0 2
11460: ARRAY
11461: PUSH
11462: LD_VAR 0 3
11466: NONEQUAL
11467: AND
11468: OR
11469: AND
11470: IFFALSE 11494
// HideArea ( j , BuildUpAreas [ i ] ) else
11472: LD_VAR 0 3
11476: PPUSH
11477: LD_EXP 55
11481: PUSH
11482: LD_VAR 0 2
11486: ARRAY
11487: PPUSH
11488: CALL_OW 333
11492: GO 11524
// if ( j = your_side ) then
11494: LD_VAR 0 3
11498: PUSH
11499: LD_OWVAR 2
11503: EQUAL
11504: IFFALSE 11524
// SetAreaMapShow ( BuildUpAreas [ i ] , 3 ) ;
11506: LD_EXP 55
11510: PUSH
11511: LD_VAR 0 2
11515: ARRAY
11516: PPUSH
11517: LD_INT 3
11519: PPUSH
11520: CALL_OW 424
11524: GO 11402
11526: POP
11527: POP
11528: GO 11374
11530: POP
11531: POP
// end ;
11532: LD_VAR 0 1
11536: RET
// export function EndBuildUp ; var i , j ; begin
11537: LD_INT 0
11539: PPUSH
11540: PPUSH
11541: PPUSH
// disable ( 600 ) ;
11542: LD_INT 600
11544: DISABLE_MARKED
// BuildUp = false ;
11545: LD_ADDR_EXP 56
11549: PUSH
11550: LD_INT 0
11552: ST_TO_ADDR
// for i := 1 to BuildUpAreas do
11553: LD_ADDR_VAR 0 2
11557: PUSH
11558: DOUBLE
11559: LD_INT 1
11561: DEC
11562: ST_TO_ADDR
11563: LD_EXP 55
11567: PUSH
11568: FOR_TO
11569: IFFALSE 11724
// if Position_Sides [ i ] then
11571: LD_EXP 23
11575: PUSH
11576: LD_VAR 0 2
11580: ARRAY
11581: IFFALSE 11722
// for j := 1 to 8 do
11583: LD_ADDR_VAR 0 3
11587: PUSH
11588: DOUBLE
11589: LD_INT 1
11591: DEC
11592: ST_TO_ADDR
11593: LD_INT 8
11595: PUSH
11596: FOR_TO
11597: IFFALSE 11720
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
11599: LD_EXP 20
11603: PUSH
11604: LD_VAR 0 3
11608: ARRAY
11609: PUSH
11610: LD_EXP 17
11614: PUSH
11615: LD_EXP 23
11619: PUSH
11620: LD_VAR 0 2
11624: ARRAY
11625: ARRAY
11626: PUSH
11627: LD_EXP 17
11631: PUSH
11632: LD_VAR 0 3
11636: ARRAY
11637: NONEQUAL
11638: PUSH
11639: LD_EXP 22
11643: NOT
11644: PUSH
11645: LD_EXP 23
11649: PUSH
11650: LD_VAR 0 2
11654: ARRAY
11655: PUSH
11656: LD_VAR 0 3
11660: NONEQUAL
11661: AND
11662: OR
11663: AND
11664: IFFALSE 11688
// ShowArea ( j , BuildUpAreas [ i ] ) else
11666: LD_VAR 0 3
11670: PPUSH
11671: LD_EXP 55
11675: PUSH
11676: LD_VAR 0 2
11680: ARRAY
11681: PPUSH
11682: CALL_OW 334
11686: GO 11718
// if ( j = your_side ) then
11688: LD_VAR 0 3
11692: PUSH
11693: LD_OWVAR 2
11697: EQUAL
11698: IFFALSE 11718
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
11700: LD_EXP 55
11704: PUSH
11705: LD_VAR 0 2
11709: ARRAY
11710: PPUSH
11711: LD_INT 0
11713: PPUSH
11714: CALL_OW 424
11718: GO 11596
11720: POP
11721: POP
11722: GO 11568
11724: POP
11725: POP
// end ;
11726: LD_VAR 0 1
11730: RET
// every 1 marked 600 do var i , un ;
11731: GO 11733
11733: DISABLE
11734: LD_INT 0
11736: PPUSH
11737: PPUSH
// begin for i := 1 to BuildUpAreas do
11738: LD_ADDR_VAR 0 1
11742: PUSH
11743: DOUBLE
11744: LD_INT 1
11746: DEC
11747: ST_TO_ADDR
11748: LD_EXP 55
11752: PUSH
11753: FOR_TO
11754: IFFALSE 11924
// if Position_Sides [ i ] then
11756: LD_EXP 23
11760: PUSH
11761: LD_VAR 0 1
11765: ARRAY
11766: IFFALSE 11922
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_not , [ f_side , 0 ] ] ] ) do
11768: LD_ADDR_VAR 0 2
11772: PUSH
11773: LD_EXP 55
11777: PUSH
11778: LD_VAR 0 1
11782: ARRAY
11783: PPUSH
11784: LD_INT 2
11786: PUSH
11787: LD_INT 21
11789: PUSH
11790: LD_INT 1
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PUSH
11797: LD_INT 21
11799: PUSH
11800: LD_INT 2
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: LIST
11811: PUSH
11812: LD_INT 3
11814: PUSH
11815: LD_INT 22
11817: PUSH
11818: LD_INT 0
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: PUSH
11825: EMPTY
11826: LIST
11827: LIST
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: PPUSH
11833: CALL_OW 70
11837: PUSH
11838: FOR_IN
11839: IFFALSE 11920
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ GetSide ( un ) ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> GetSide ( un ) ) ) then
11841: LD_EXP 17
11845: PUSH
11846: LD_EXP 23
11850: PUSH
11851: LD_VAR 0 1
11855: ARRAY
11856: ARRAY
11857: PUSH
11858: LD_EXP 17
11862: PUSH
11863: LD_VAR 0 2
11867: PPUSH
11868: CALL_OW 255
11872: ARRAY
11873: NONEQUAL
11874: PUSH
11875: LD_EXP 22
11879: NOT
11880: PUSH
11881: LD_EXP 23
11885: PUSH
11886: LD_VAR 0 1
11890: ARRAY
11891: PUSH
11892: LD_VAR 0 2
11896: PPUSH
11897: CALL_OW 255
11901: NONEQUAL
11902: AND
11903: OR
11904: IFFALSE 11918
// ComMoveToArea ( un , BuildUpEscape ) ;
11906: LD_VAR 0 2
11910: PPUSH
11911: LD_INT 12
11913: PPUSH
11914: CALL_OW 113
11918: GO 11838
11920: POP
11921: POP
11922: GO 11753
11924: POP
11925: POP
// if BuildUp then
11926: LD_EXP 56
11930: IFFALSE 11933
// enable ;
11932: ENABLE
// end ;
11933: PPOPN 2
11935: END
// every 1 do
11936: GO 11938
11938: DISABLE
// if ( def_builduptime > 0 ) then
11939: LD_EXP 51
11943: PUSH
11944: LD_INT 0
11946: GREATER
11947: IFFALSE 11968
// begin if buildUpTime_Delay then
11949: LD_EXP 16
11953: IFFALSE 11964
// wait ( buildUpTime_Delay ) ;
11955: LD_EXP 16
11959: PPUSH
11960: CALL_OW 67
// EndBuildUp ;
11964: CALL 11537 0 0
// end ; end_of_file
11968: END
// export function SetMpTechs ( ) ; var side , i ; begin
11969: LD_INT 0
11971: PPUSH
11972: PPUSH
11973: PPUSH
// for side = 1 to 8 do
11974: LD_ADDR_VAR 0 2
11978: PUSH
11979: DOUBLE
11980: LD_INT 1
11982: DEC
11983: ST_TO_ADDR
11984: LD_INT 8
11986: PUSH
11987: FOR_TO
11988: IFFALSE 12109
// begin for i = 1 to 72 do
11990: LD_ADDR_VAR 0 3
11994: PUSH
11995: DOUBLE
11996: LD_INT 1
11998: DEC
11999: ST_TO_ADDR
12000: LD_INT 72
12002: PUSH
12003: FOR_TO
12004: IFFALSE 12035
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
12006: LD_VAR 0 3
12010: PPUSH
12011: LD_VAR 0 2
12015: PPUSH
12016: LD_INT 0
12018: PPUSH
12019: LD_VAR 0 3
12023: PPUSH
12024: CALL_OW 565
12028: PPUSH
12029: CALL_OW 322
12033: GO 12003
12035: POP
12036: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
12037: LD_INT 73
12039: PPUSH
12040: LD_VAR 0 2
12044: PPUSH
12045: LD_INT 0
12047: PPUSH
12048: LD_INT 25
12050: PPUSH
12051: CALL_OW 565
12055: PPUSH
12056: CALL_OW 322
// for i = 0 to 40 do
12060: LD_ADDR_VAR 0 3
12064: PUSH
12065: DOUBLE
12066: LD_INT 0
12068: DEC
12069: ST_TO_ADDR
12070: LD_INT 40
12072: PUSH
12073: FOR_TO
12074: IFFALSE 12105
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
12076: LD_VAR 0 3
12080: PPUSH
12081: LD_VAR 0 2
12085: PPUSH
12086: LD_INT 1
12088: PPUSH
12089: LD_VAR 0 3
12093: PPUSH
12094: CALL_OW 565
12098: PPUSH
12099: CALL_OW 324
12103: GO 12073
12105: POP
12106: POP
// end ;
12107: GO 11987
12109: POP
12110: POP
// end ;
12111: LD_VAR 0 1
12115: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
12116: LD_INT 0
12118: PPUSH
12119: PPUSH
12120: PPUSH
// for side = 1 to 8 do
12121: LD_ADDR_VAR 0 3
12125: PUSH
12126: DOUBLE
12127: LD_INT 1
12129: DEC
12130: ST_TO_ADDR
12131: LD_INT 8
12133: PUSH
12134: FOR_TO
12135: IFFALSE 16131
// begin for i = 1 to 73 do
12137: LD_ADDR_VAR 0 4
12141: PUSH
12142: DOUBLE
12143: LD_INT 1
12145: DEC
12146: ST_TO_ADDR
12147: LD_INT 73
12149: PUSH
12150: FOR_TO
12151: IFFALSE 12172
// SetTech ( i , side , state_disabled ) ;
12153: LD_VAR 0 4
12157: PPUSH
12158: LD_VAR 0 3
12162: PPUSH
12163: LD_INT 0
12165: PPUSH
12166: CALL_OW 322
12170: GO 12150
12172: POP
12173: POP
// for i = 0 to 40 do
12174: LD_ADDR_VAR 0 4
12178: PUSH
12179: DOUBLE
12180: LD_INT 0
12182: DEC
12183: ST_TO_ADDR
12184: LD_INT 40
12186: PUSH
12187: FOR_TO
12188: IFFALSE 12209
// SetRestrict ( i , side , false ) ;
12190: LD_VAR 0 4
12194: PPUSH
12195: LD_VAR 0 3
12199: PPUSH
12200: LD_INT 0
12202: PPUSH
12203: CALL_OW 324
12207: GO 12187
12209: POP
12210: POP
// case level of 1 :
12211: LD_VAR 0 1
12215: PUSH
12216: LD_INT 1
12218: DOUBLE
12219: EQUAL
12220: IFTRUE 12224
12222: GO 12377
12224: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12225: LD_INT 35
12227: PPUSH
12228: LD_VAR 0 3
12232: PPUSH
12233: LD_INT 1
12235: PPUSH
12236: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12240: LD_INT 45
12242: PPUSH
12243: LD_VAR 0 3
12247: PPUSH
12248: LD_INT 1
12250: PPUSH
12251: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12255: LD_INT 46
12257: PPUSH
12258: LD_VAR 0 3
12262: PPUSH
12263: LD_INT 1
12265: PPUSH
12266: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12270: LD_INT 47
12272: PPUSH
12273: LD_VAR 0 3
12277: PPUSH
12278: LD_INT 1
12280: PPUSH
12281: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12285: LD_INT 0
12287: PPUSH
12288: LD_VAR 0 3
12292: PPUSH
12293: LD_INT 1
12295: PPUSH
12296: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12300: LD_INT 2
12302: PPUSH
12303: LD_VAR 0 3
12307: PPUSH
12308: LD_INT 1
12310: PPUSH
12311: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12315: LD_INT 4
12317: PPUSH
12318: LD_VAR 0 3
12322: PPUSH
12323: LD_INT 1
12325: PPUSH
12326: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12330: LD_INT 6
12332: PPUSH
12333: LD_VAR 0 3
12337: PPUSH
12338: LD_INT 1
12340: PPUSH
12341: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12345: LD_INT 29
12347: PPUSH
12348: LD_VAR 0 3
12352: PPUSH
12353: LD_INT 1
12355: PPUSH
12356: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12360: LD_INT 31
12362: PPUSH
12363: LD_VAR 0 3
12367: PPUSH
12368: LD_INT 1
12370: PPUSH
12371: CALL_OW 324
// end ; 2 :
12375: GO 16129
12377: LD_INT 2
12379: DOUBLE
12380: EQUAL
12381: IFTRUE 12385
12383: GO 12583
12385: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12386: LD_INT 35
12388: PPUSH
12389: LD_VAR 0 3
12393: PPUSH
12394: LD_INT 1
12396: PPUSH
12397: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12401: LD_INT 45
12403: PPUSH
12404: LD_VAR 0 3
12408: PPUSH
12409: LD_INT 1
12411: PPUSH
12412: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12416: LD_INT 46
12418: PPUSH
12419: LD_VAR 0 3
12423: PPUSH
12424: LD_INT 1
12426: PPUSH
12427: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12431: LD_INT 47
12433: PPUSH
12434: LD_VAR 0 3
12438: PPUSH
12439: LD_INT 1
12441: PPUSH
12442: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12446: LD_INT 1
12448: PPUSH
12449: LD_VAR 0 3
12453: PPUSH
12454: LD_INT 1
12456: PPUSH
12457: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12461: LD_INT 2
12463: PPUSH
12464: LD_VAR 0 3
12468: PPUSH
12469: LD_INT 1
12471: PPUSH
12472: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12476: LD_INT 11
12478: PPUSH
12479: LD_VAR 0 3
12483: PPUSH
12484: LD_INT 1
12486: PPUSH
12487: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12491: LD_INT 0
12493: PPUSH
12494: LD_VAR 0 3
12498: PPUSH
12499: LD_INT 1
12501: PPUSH
12502: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12506: LD_INT 2
12508: PPUSH
12509: LD_VAR 0 3
12513: PPUSH
12514: LD_INT 1
12516: PPUSH
12517: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12521: LD_INT 4
12523: PPUSH
12524: LD_VAR 0 3
12528: PPUSH
12529: LD_INT 1
12531: PPUSH
12532: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12536: LD_INT 6
12538: PPUSH
12539: LD_VAR 0 3
12543: PPUSH
12544: LD_INT 1
12546: PPUSH
12547: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12551: LD_INT 29
12553: PPUSH
12554: LD_VAR 0 3
12558: PPUSH
12559: LD_INT 1
12561: PPUSH
12562: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12566: LD_INT 31
12568: PPUSH
12569: LD_VAR 0 3
12573: PPUSH
12574: LD_INT 1
12576: PPUSH
12577: CALL_OW 324
// end ; 3 :
12581: GO 16129
12583: LD_INT 3
12585: DOUBLE
12586: EQUAL
12587: IFTRUE 12591
12589: GO 13044
12591: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12592: LD_INT 35
12594: PPUSH
12595: LD_VAR 0 3
12599: PPUSH
12600: LD_INT 1
12602: PPUSH
12603: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12607: LD_INT 45
12609: PPUSH
12610: LD_VAR 0 3
12614: PPUSH
12615: LD_INT 1
12617: PPUSH
12618: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12622: LD_INT 46
12624: PPUSH
12625: LD_VAR 0 3
12629: PPUSH
12630: LD_INT 1
12632: PPUSH
12633: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12637: LD_INT 47
12639: PPUSH
12640: LD_VAR 0 3
12644: PPUSH
12645: LD_INT 1
12647: PPUSH
12648: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12652: LD_INT 1
12654: PPUSH
12655: LD_VAR 0 3
12659: PPUSH
12660: LD_INT 1
12662: PPUSH
12663: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12667: LD_INT 2
12669: PPUSH
12670: LD_VAR 0 3
12674: PPUSH
12675: LD_INT 1
12677: PPUSH
12678: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12682: LD_INT 11
12684: PPUSH
12685: LD_VAR 0 3
12689: PPUSH
12690: LD_INT 1
12692: PPUSH
12693: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12697: LD_INT 48
12699: PPUSH
12700: LD_VAR 0 3
12704: PPUSH
12705: LD_INT 1
12707: PPUSH
12708: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12712: LD_INT 69
12714: PPUSH
12715: LD_VAR 0 3
12719: PPUSH
12720: LD_INT 1
12722: PPUSH
12723: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12727: LD_INT 39
12729: PPUSH
12730: LD_VAR 0 3
12734: PPUSH
12735: LD_INT 1
12737: PPUSH
12738: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12742: LD_INT 43
12744: PPUSH
12745: LD_VAR 0 3
12749: PPUSH
12750: LD_INT 1
12752: PPUSH
12753: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12757: LD_INT 51
12759: PPUSH
12760: LD_VAR 0 3
12764: PPUSH
12765: LD_INT 1
12767: PPUSH
12768: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12772: LD_INT 6
12774: PPUSH
12775: LD_VAR 0 3
12779: PPUSH
12780: LD_INT 1
12782: PPUSH
12783: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12787: LD_INT 0
12789: PPUSH
12790: LD_VAR 0 3
12794: PPUSH
12795: LD_INT 1
12797: PPUSH
12798: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12802: LD_INT 2
12804: PPUSH
12805: LD_VAR 0 3
12809: PPUSH
12810: LD_INT 1
12812: PPUSH
12813: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12817: LD_INT 3
12819: PPUSH
12820: LD_VAR 0 3
12824: PPUSH
12825: LD_INT 1
12827: PPUSH
12828: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12832: LD_INT 4
12834: PPUSH
12835: LD_VAR 0 3
12839: PPUSH
12840: LD_INT 1
12842: PPUSH
12843: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12847: LD_INT 6
12849: PPUSH
12850: LD_VAR 0 3
12854: PPUSH
12855: LD_INT 1
12857: PPUSH
12858: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12862: LD_INT 7
12864: PPUSH
12865: LD_VAR 0 3
12869: PPUSH
12870: LD_INT 1
12872: PPUSH
12873: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12877: LD_INT 8
12879: PPUSH
12880: LD_VAR 0 3
12884: PPUSH
12885: LD_INT 1
12887: PPUSH
12888: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12892: LD_INT 10
12894: PPUSH
12895: LD_VAR 0 3
12899: PPUSH
12900: LD_INT 1
12902: PPUSH
12903: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12907: LD_INT 15
12909: PPUSH
12910: LD_VAR 0 3
12914: PPUSH
12915: LD_INT 1
12917: PPUSH
12918: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12922: LD_INT 16
12924: PPUSH
12925: LD_VAR 0 3
12929: PPUSH
12930: LD_INT 1
12932: PPUSH
12933: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12937: LD_INT 17
12939: PPUSH
12940: LD_VAR 0 3
12944: PPUSH
12945: LD_INT 1
12947: PPUSH
12948: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12952: LD_INT 20
12954: PPUSH
12955: LD_VAR 0 3
12959: PPUSH
12960: LD_INT 1
12962: PPUSH
12963: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12967: LD_INT 26
12969: PPUSH
12970: LD_VAR 0 3
12974: PPUSH
12975: LD_INT 1
12977: PPUSH
12978: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12982: LD_INT 27
12984: PPUSH
12985: LD_VAR 0 3
12989: PPUSH
12990: LD_INT 1
12992: PPUSH
12993: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12997: LD_INT 29
12999: PPUSH
13000: LD_VAR 0 3
13004: PPUSH
13005: LD_INT 1
13007: PPUSH
13008: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13012: LD_INT 31
13014: PPUSH
13015: LD_VAR 0 3
13019: PPUSH
13020: LD_INT 1
13022: PPUSH
13023: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13027: LD_INT 32
13029: PPUSH
13030: LD_VAR 0 3
13034: PPUSH
13035: LD_INT 1
13037: PPUSH
13038: CALL_OW 324
// end ; 4 :
13042: GO 16129
13044: LD_INT 4
13046: DOUBLE
13047: EQUAL
13048: IFTRUE 13052
13050: GO 14000
13052: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13053: LD_INT 35
13055: PPUSH
13056: LD_VAR 0 3
13060: PPUSH
13061: LD_INT 1
13063: PPUSH
13064: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13068: LD_INT 45
13070: PPUSH
13071: LD_VAR 0 3
13075: PPUSH
13076: LD_INT 1
13078: PPUSH
13079: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13083: LD_INT 46
13085: PPUSH
13086: LD_VAR 0 3
13090: PPUSH
13091: LD_INT 1
13093: PPUSH
13094: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13098: LD_INT 47
13100: PPUSH
13101: LD_VAR 0 3
13105: PPUSH
13106: LD_INT 1
13108: PPUSH
13109: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13113: LD_INT 1
13115: PPUSH
13116: LD_VAR 0 3
13120: PPUSH
13121: LD_INT 1
13123: PPUSH
13124: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13128: LD_INT 2
13130: PPUSH
13131: LD_VAR 0 3
13135: PPUSH
13136: LD_INT 1
13138: PPUSH
13139: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13143: LD_INT 11
13145: PPUSH
13146: LD_VAR 0 3
13150: PPUSH
13151: LD_INT 1
13153: PPUSH
13154: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13158: LD_INT 20
13160: PPUSH
13161: LD_VAR 0 3
13165: PPUSH
13166: LD_INT 1
13168: PPUSH
13169: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13173: LD_INT 48
13175: PPUSH
13176: LD_VAR 0 3
13180: PPUSH
13181: LD_INT 1
13183: PPUSH
13184: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13188: LD_INT 49
13190: PPUSH
13191: LD_VAR 0 3
13195: PPUSH
13196: LD_INT 1
13198: PPUSH
13199: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13203: LD_INT 69
13205: PPUSH
13206: LD_VAR 0 3
13210: PPUSH
13211: LD_INT 1
13213: PPUSH
13214: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13218: LD_INT 39
13220: PPUSH
13221: LD_VAR 0 3
13225: PPUSH
13226: LD_INT 1
13228: PPUSH
13229: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13233: LD_INT 34
13235: PPUSH
13236: LD_VAR 0 3
13240: PPUSH
13241: LD_INT 1
13243: PPUSH
13244: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13248: LD_INT 42
13250: PPUSH
13251: LD_VAR 0 3
13255: PPUSH
13256: LD_INT 1
13258: PPUSH
13259: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13263: LD_INT 44
13265: PPUSH
13266: LD_VAR 0 3
13270: PPUSH
13271: LD_INT 1
13273: PPUSH
13274: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13278: LD_INT 41
13280: PPUSH
13281: LD_VAR 0 3
13285: PPUSH
13286: LD_INT 1
13288: PPUSH
13289: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13293: LD_INT 43
13295: PPUSH
13296: LD_VAR 0 3
13300: PPUSH
13301: LD_INT 1
13303: PPUSH
13304: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13308: LD_INT 70
13310: PPUSH
13311: LD_VAR 0 3
13315: PPUSH
13316: LD_INT 1
13318: PPUSH
13319: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13323: LD_INT 51
13325: PPUSH
13326: LD_VAR 0 3
13330: PPUSH
13331: LD_INT 1
13333: PPUSH
13334: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13338: LD_INT 52
13340: PPUSH
13341: LD_VAR 0 3
13345: PPUSH
13346: LD_INT 1
13348: PPUSH
13349: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13353: LD_INT 6
13355: PPUSH
13356: LD_VAR 0 3
13360: PPUSH
13361: LD_INT 1
13363: PPUSH
13364: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13368: LD_INT 15
13370: PPUSH
13371: LD_VAR 0 3
13375: PPUSH
13376: LD_INT 1
13378: PPUSH
13379: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13383: LD_INT 7
13385: PPUSH
13386: LD_VAR 0 3
13390: PPUSH
13391: LD_INT 1
13393: PPUSH
13394: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13398: LD_INT 12
13400: PPUSH
13401: LD_VAR 0 3
13405: PPUSH
13406: LD_INT 1
13408: PPUSH
13409: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13413: LD_INT 18
13415: PPUSH
13416: LD_VAR 0 3
13420: PPUSH
13421: LD_INT 1
13423: PPUSH
13424: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13428: LD_INT 60
13430: PPUSH
13431: LD_VAR 0 3
13435: PPUSH
13436: LD_INT 1
13438: PPUSH
13439: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13443: LD_INT 9
13445: PPUSH
13446: LD_VAR 0 3
13450: PPUSH
13451: LD_INT 1
13453: PPUSH
13454: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13458: LD_INT 30
13460: PPUSH
13461: LD_VAR 0 3
13465: PPUSH
13466: LD_INT 1
13468: PPUSH
13469: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13473: LD_INT 37
13475: PPUSH
13476: LD_VAR 0 3
13480: PPUSH
13481: LD_INT 1
13483: PPUSH
13484: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13488: LD_INT 5
13490: PPUSH
13491: LD_VAR 0 3
13495: PPUSH
13496: LD_INT 1
13498: PPUSH
13499: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13503: LD_INT 66
13505: PPUSH
13506: LD_VAR 0 3
13510: PPUSH
13511: LD_INT 1
13513: PPUSH
13514: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13518: LD_INT 21
13520: PPUSH
13521: LD_VAR 0 3
13525: PPUSH
13526: LD_INT 1
13528: PPUSH
13529: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13533: LD_INT 22
13535: PPUSH
13536: LD_VAR 0 3
13540: PPUSH
13541: LD_INT 1
13543: PPUSH
13544: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13548: LD_INT 54
13550: PPUSH
13551: LD_VAR 0 3
13555: PPUSH
13556: LD_INT 1
13558: PPUSH
13559: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13563: LD_INT 0
13565: PPUSH
13566: LD_VAR 0 3
13570: PPUSH
13571: LD_INT 1
13573: PPUSH
13574: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
13578: LD_INT 1
13580: PPUSH
13581: LD_VAR 0 3
13585: PPUSH
13586: LD_INT 1
13588: PPUSH
13589: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13593: LD_INT 2
13595: PPUSH
13596: LD_VAR 0 3
13600: PPUSH
13601: LD_INT 1
13603: PPUSH
13604: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
13608: LD_INT 3
13610: PPUSH
13611: LD_VAR 0 3
13615: PPUSH
13616: LD_INT 1
13618: PPUSH
13619: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13623: LD_INT 4
13625: PPUSH
13626: LD_VAR 0 3
13630: PPUSH
13631: LD_INT 1
13633: PPUSH
13634: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
13638: LD_INT 5
13640: PPUSH
13641: LD_VAR 0 3
13645: PPUSH
13646: LD_INT 1
13648: PPUSH
13649: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13653: LD_INT 6
13655: PPUSH
13656: LD_VAR 0 3
13660: PPUSH
13661: LD_INT 1
13663: PPUSH
13664: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13668: LD_INT 7
13670: PPUSH
13671: LD_VAR 0 3
13675: PPUSH
13676: LD_INT 1
13678: PPUSH
13679: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13683: LD_INT 8
13685: PPUSH
13686: LD_VAR 0 3
13690: PPUSH
13691: LD_INT 1
13693: PPUSH
13694: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13698: LD_INT 10
13700: PPUSH
13701: LD_VAR 0 3
13705: PPUSH
13706: LD_INT 1
13708: PPUSH
13709: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
13713: LD_INT 11
13715: PPUSH
13716: LD_VAR 0 3
13720: PPUSH
13721: LD_INT 1
13723: PPUSH
13724: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
13728: LD_INT 12
13730: PPUSH
13731: LD_VAR 0 3
13735: PPUSH
13736: LD_INT 1
13738: PPUSH
13739: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
13743: LD_INT 13
13745: PPUSH
13746: LD_VAR 0 3
13750: PPUSH
13751: LD_INT 1
13753: PPUSH
13754: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
13758: LD_INT 14
13760: PPUSH
13761: LD_VAR 0 3
13765: PPUSH
13766: LD_INT 1
13768: PPUSH
13769: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13773: LD_INT 15
13775: PPUSH
13776: LD_VAR 0 3
13780: PPUSH
13781: LD_INT 1
13783: PPUSH
13784: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13788: LD_INT 16
13790: PPUSH
13791: LD_VAR 0 3
13795: PPUSH
13796: LD_INT 1
13798: PPUSH
13799: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13803: LD_INT 17
13805: PPUSH
13806: LD_VAR 0 3
13810: PPUSH
13811: LD_INT 1
13813: PPUSH
13814: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
13818: LD_INT 19
13820: PPUSH
13821: LD_VAR 0 3
13825: PPUSH
13826: LD_INT 1
13828: PPUSH
13829: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13833: LD_INT 20
13835: PPUSH
13836: LD_VAR 0 3
13840: PPUSH
13841: LD_INT 1
13843: PPUSH
13844: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
13848: LD_INT 21
13850: PPUSH
13851: LD_VAR 0 3
13855: PPUSH
13856: LD_INT 1
13858: PPUSH
13859: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
13863: LD_INT 23
13865: PPUSH
13866: LD_VAR 0 3
13870: PPUSH
13871: LD_INT 1
13873: PPUSH
13874: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13878: LD_INT 26
13880: PPUSH
13881: LD_VAR 0 3
13885: PPUSH
13886: LD_INT 1
13888: PPUSH
13889: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13893: LD_INT 27
13895: PPUSH
13896: LD_VAR 0 3
13900: PPUSH
13901: LD_INT 1
13903: PPUSH
13904: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
13908: LD_INT 28
13910: PPUSH
13911: LD_VAR 0 3
13915: PPUSH
13916: LD_INT 1
13918: PPUSH
13919: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13923: LD_INT 29
13925: PPUSH
13926: LD_VAR 0 3
13930: PPUSH
13931: LD_INT 1
13933: PPUSH
13934: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
13938: LD_INT 30
13940: PPUSH
13941: LD_VAR 0 3
13945: PPUSH
13946: LD_INT 1
13948: PPUSH
13949: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13953: LD_INT 31
13955: PPUSH
13956: LD_VAR 0 3
13960: PPUSH
13961: LD_INT 1
13963: PPUSH
13964: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13968: LD_INT 32
13970: PPUSH
13971: LD_VAR 0 3
13975: PPUSH
13976: LD_INT 1
13978: PPUSH
13979: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
13983: LD_INT 36
13985: PPUSH
13986: LD_VAR 0 3
13990: PPUSH
13991: LD_INT 1
13993: PPUSH
13994: CALL_OW 324
// end ; 5 :
13998: GO 16129
14000: LD_INT 5
14002: DOUBLE
14003: EQUAL
14004: IFTRUE 14008
14006: GO 15121
14008: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14009: LD_INT 35
14011: PPUSH
14012: LD_VAR 0 3
14016: PPUSH
14017: LD_INT 1
14019: PPUSH
14020: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14024: LD_INT 45
14026: PPUSH
14027: LD_VAR 0 3
14031: PPUSH
14032: LD_INT 1
14034: PPUSH
14035: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14039: LD_INT 46
14041: PPUSH
14042: LD_VAR 0 3
14046: PPUSH
14047: LD_INT 1
14049: PPUSH
14050: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14054: LD_INT 47
14056: PPUSH
14057: LD_VAR 0 3
14061: PPUSH
14062: LD_INT 1
14064: PPUSH
14065: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14069: LD_INT 1
14071: PPUSH
14072: LD_VAR 0 3
14076: PPUSH
14077: LD_INT 1
14079: PPUSH
14080: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14084: LD_INT 2
14086: PPUSH
14087: LD_VAR 0 3
14091: PPUSH
14092: LD_INT 1
14094: PPUSH
14095: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14099: LD_INT 11
14101: PPUSH
14102: LD_VAR 0 3
14106: PPUSH
14107: LD_INT 1
14109: PPUSH
14110: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
14114: LD_INT 20
14116: PPUSH
14117: LD_VAR 0 3
14121: PPUSH
14122: LD_INT 1
14124: PPUSH
14125: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14129: LD_INT 48
14131: PPUSH
14132: LD_VAR 0 3
14136: PPUSH
14137: LD_INT 1
14139: PPUSH
14140: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
14144: LD_INT 49
14146: PPUSH
14147: LD_VAR 0 3
14151: PPUSH
14152: LD_INT 1
14154: PPUSH
14155: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14159: LD_INT 69
14161: PPUSH
14162: LD_VAR 0 3
14166: PPUSH
14167: LD_INT 1
14169: PPUSH
14170: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14174: LD_INT 39
14176: PPUSH
14177: LD_VAR 0 3
14181: PPUSH
14182: LD_INT 1
14184: PPUSH
14185: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
14189: LD_INT 34
14191: PPUSH
14192: LD_VAR 0 3
14196: PPUSH
14197: LD_INT 1
14199: PPUSH
14200: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
14204: LD_INT 42
14206: PPUSH
14207: LD_VAR 0 3
14211: PPUSH
14212: LD_INT 1
14214: PPUSH
14215: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
14219: LD_INT 44
14221: PPUSH
14222: LD_VAR 0 3
14226: PPUSH
14227: LD_INT 1
14229: PPUSH
14230: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
14234: LD_INT 41
14236: PPUSH
14237: LD_VAR 0 3
14241: PPUSH
14242: LD_INT 1
14244: PPUSH
14245: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
14249: LD_INT 40
14251: PPUSH
14252: LD_VAR 0 3
14256: PPUSH
14257: LD_INT 1
14259: PPUSH
14260: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14264: LD_INT 43
14266: PPUSH
14267: LD_VAR 0 3
14271: PPUSH
14272: LD_INT 1
14274: PPUSH
14275: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
14279: LD_INT 70
14281: PPUSH
14282: LD_VAR 0 3
14286: PPUSH
14287: LD_INT 1
14289: PPUSH
14290: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14294: LD_INT 51
14296: PPUSH
14297: LD_VAR 0 3
14301: PPUSH
14302: LD_INT 1
14304: PPUSH
14305: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
14309: LD_INT 52
14311: PPUSH
14312: LD_VAR 0 3
14316: PPUSH
14317: LD_INT 1
14319: PPUSH
14320: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14324: LD_INT 6
14326: PPUSH
14327: LD_VAR 0 3
14331: PPUSH
14332: LD_INT 1
14334: PPUSH
14335: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
14339: LD_INT 15
14341: PPUSH
14342: LD_VAR 0 3
14346: PPUSH
14347: LD_INT 1
14349: PPUSH
14350: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
14354: LD_INT 7
14356: PPUSH
14357: LD_VAR 0 3
14361: PPUSH
14362: LD_INT 1
14364: PPUSH
14365: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
14369: LD_INT 12
14371: PPUSH
14372: LD_VAR 0 3
14376: PPUSH
14377: LD_INT 1
14379: PPUSH
14380: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
14384: LD_INT 17
14386: PPUSH
14387: LD_VAR 0 3
14391: PPUSH
14392: LD_INT 1
14394: PPUSH
14395: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
14399: LD_INT 18
14401: PPUSH
14402: LD_VAR 0 3
14406: PPUSH
14407: LD_INT 1
14409: PPUSH
14410: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
14414: LD_INT 60
14416: PPUSH
14417: LD_VAR 0 3
14421: PPUSH
14422: LD_INT 1
14424: PPUSH
14425: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
14429: LD_INT 32
14431: PPUSH
14432: LD_VAR 0 3
14436: PPUSH
14437: LD_INT 1
14439: PPUSH
14440: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
14444: LD_INT 9
14446: PPUSH
14447: LD_VAR 0 3
14451: PPUSH
14452: LD_INT 1
14454: PPUSH
14455: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
14459: LD_INT 57
14461: PPUSH
14462: LD_VAR 0 3
14466: PPUSH
14467: LD_INT 1
14469: PPUSH
14470: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
14474: LD_INT 30
14476: PPUSH
14477: LD_VAR 0 3
14481: PPUSH
14482: LD_INT 1
14484: PPUSH
14485: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
14489: LD_INT 37
14491: PPUSH
14492: LD_VAR 0 3
14496: PPUSH
14497: LD_INT 1
14499: PPUSH
14500: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
14504: LD_INT 63
14506: PPUSH
14507: LD_VAR 0 3
14511: PPUSH
14512: LD_INT 1
14514: PPUSH
14515: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
14519: LD_INT 3
14521: PPUSH
14522: LD_VAR 0 3
14526: PPUSH
14527: LD_INT 1
14529: PPUSH
14530: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
14534: LD_INT 4
14536: PPUSH
14537: LD_VAR 0 3
14541: PPUSH
14542: LD_INT 1
14544: PPUSH
14545: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14549: LD_INT 5
14551: PPUSH
14552: LD_VAR 0 3
14556: PPUSH
14557: LD_INT 1
14559: PPUSH
14560: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14564: LD_INT 66
14566: PPUSH
14567: LD_VAR 0 3
14571: PPUSH
14572: LD_INT 1
14574: PPUSH
14575: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14579: LD_INT 21
14581: PPUSH
14582: LD_VAR 0 3
14586: PPUSH
14587: LD_INT 1
14589: PPUSH
14590: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14594: LD_INT 22
14596: PPUSH
14597: LD_VAR 0 3
14601: PPUSH
14602: LD_INT 1
14604: PPUSH
14605: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
14609: LD_INT 19
14611: PPUSH
14612: LD_VAR 0 3
14616: PPUSH
14617: LD_INT 1
14619: PPUSH
14620: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
14624: LD_INT 54
14626: PPUSH
14627: LD_VAR 0 3
14631: PPUSH
14632: LD_INT 1
14634: PPUSH
14635: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
14639: LD_INT 55
14641: PPUSH
14642: LD_VAR 0 3
14646: PPUSH
14647: LD_INT 1
14649: PPUSH
14650: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14654: LD_INT 0
14656: PPUSH
14657: LD_VAR 0 3
14661: PPUSH
14662: LD_INT 1
14664: PPUSH
14665: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
14669: LD_INT 1
14671: PPUSH
14672: LD_VAR 0 3
14676: PPUSH
14677: LD_INT 1
14679: PPUSH
14680: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14684: LD_INT 2
14686: PPUSH
14687: LD_VAR 0 3
14691: PPUSH
14692: LD_INT 1
14694: PPUSH
14695: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
14699: LD_INT 3
14701: PPUSH
14702: LD_VAR 0 3
14706: PPUSH
14707: LD_INT 1
14709: PPUSH
14710: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14714: LD_INT 4
14716: PPUSH
14717: LD_VAR 0 3
14721: PPUSH
14722: LD_INT 1
14724: PPUSH
14725: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
14729: LD_INT 5
14731: PPUSH
14732: LD_VAR 0 3
14736: PPUSH
14737: LD_INT 1
14739: PPUSH
14740: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14744: LD_INT 6
14746: PPUSH
14747: LD_VAR 0 3
14751: PPUSH
14752: LD_INT 1
14754: PPUSH
14755: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
14759: LD_INT 7
14761: PPUSH
14762: LD_VAR 0 3
14766: PPUSH
14767: LD_INT 1
14769: PPUSH
14770: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
14774: LD_INT 8
14776: PPUSH
14777: LD_VAR 0 3
14781: PPUSH
14782: LD_INT 1
14784: PPUSH
14785: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
14789: LD_INT 10
14791: PPUSH
14792: LD_VAR 0 3
14796: PPUSH
14797: LD_INT 1
14799: PPUSH
14800: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
14804: LD_INT 11
14806: PPUSH
14807: LD_VAR 0 3
14811: PPUSH
14812: LD_INT 1
14814: PPUSH
14815: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
14819: LD_INT 12
14821: PPUSH
14822: LD_VAR 0 3
14826: PPUSH
14827: LD_INT 1
14829: PPUSH
14830: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
14834: LD_INT 13
14836: PPUSH
14837: LD_VAR 0 3
14841: PPUSH
14842: LD_INT 1
14844: PPUSH
14845: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
14849: LD_INT 14
14851: PPUSH
14852: LD_VAR 0 3
14856: PPUSH
14857: LD_INT 1
14859: PPUSH
14860: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
14864: LD_INT 15
14866: PPUSH
14867: LD_VAR 0 3
14871: PPUSH
14872: LD_INT 1
14874: PPUSH
14875: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
14879: LD_INT 16
14881: PPUSH
14882: LD_VAR 0 3
14886: PPUSH
14887: LD_INT 1
14889: PPUSH
14890: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
14894: LD_INT 17
14896: PPUSH
14897: LD_VAR 0 3
14901: PPUSH
14902: LD_INT 1
14904: PPUSH
14905: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
14909: LD_INT 18
14911: PPUSH
14912: LD_VAR 0 3
14916: PPUSH
14917: LD_INT 1
14919: PPUSH
14920: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
14924: LD_INT 19
14926: PPUSH
14927: LD_VAR 0 3
14931: PPUSH
14932: LD_INT 1
14934: PPUSH
14935: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
14939: LD_INT 20
14941: PPUSH
14942: LD_VAR 0 3
14946: PPUSH
14947: LD_INT 1
14949: PPUSH
14950: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
14954: LD_INT 21
14956: PPUSH
14957: LD_VAR 0 3
14961: PPUSH
14962: LD_INT 1
14964: PPUSH
14965: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
14969: LD_INT 23
14971: PPUSH
14972: LD_VAR 0 3
14976: PPUSH
14977: LD_INT 1
14979: PPUSH
14980: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
14984: LD_INT 26
14986: PPUSH
14987: LD_VAR 0 3
14991: PPUSH
14992: LD_INT 1
14994: PPUSH
14995: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
14999: LD_INT 27
15001: PPUSH
15002: LD_VAR 0 3
15006: PPUSH
15007: LD_INT 1
15009: PPUSH
15010: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
15014: LD_INT 28
15016: PPUSH
15017: LD_VAR 0 3
15021: PPUSH
15022: LD_INT 1
15024: PPUSH
15025: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15029: LD_INT 29
15031: PPUSH
15032: LD_VAR 0 3
15036: PPUSH
15037: LD_INT 1
15039: PPUSH
15040: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
15044: LD_INT 30
15046: PPUSH
15047: LD_VAR 0 3
15051: PPUSH
15052: LD_INT 1
15054: PPUSH
15055: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15059: LD_INT 31
15061: PPUSH
15062: LD_VAR 0 3
15066: PPUSH
15067: LD_INT 1
15069: PPUSH
15070: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15074: LD_INT 32
15076: PPUSH
15077: LD_VAR 0 3
15081: PPUSH
15082: LD_INT 1
15084: PPUSH
15085: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
15089: LD_INT 33
15091: PPUSH
15092: LD_VAR 0 3
15096: PPUSH
15097: LD_INT 1
15099: PPUSH
15100: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
15104: LD_INT 36
15106: PPUSH
15107: LD_VAR 0 3
15111: PPUSH
15112: LD_INT 1
15114: PPUSH
15115: CALL_OW 324
// end ; 6 :
15119: GO 16129
15121: LD_INT 6
15123: DOUBLE
15124: EQUAL
15125: IFTRUE 15129
15127: GO 16054
15129: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15130: LD_INT 35
15132: PPUSH
15133: LD_VAR 0 3
15137: PPUSH
15138: LD_INT 1
15140: PPUSH
15141: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15145: LD_INT 45
15147: PPUSH
15148: LD_VAR 0 3
15152: PPUSH
15153: LD_INT 1
15155: PPUSH
15156: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15160: LD_INT 46
15162: PPUSH
15163: LD_VAR 0 3
15167: PPUSH
15168: LD_INT 1
15170: PPUSH
15171: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15175: LD_INT 47
15177: PPUSH
15178: LD_VAR 0 3
15182: PPUSH
15183: LD_INT 1
15185: PPUSH
15186: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15190: LD_INT 1
15192: PPUSH
15193: LD_VAR 0 3
15197: PPUSH
15198: LD_INT 1
15200: PPUSH
15201: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15205: LD_INT 2
15207: PPUSH
15208: LD_VAR 0 3
15212: PPUSH
15213: LD_INT 1
15215: PPUSH
15216: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15220: LD_INT 11
15222: PPUSH
15223: LD_VAR 0 3
15227: PPUSH
15228: LD_INT 1
15230: PPUSH
15231: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15235: LD_INT 20
15237: PPUSH
15238: LD_VAR 0 3
15242: PPUSH
15243: LD_INT 1
15245: PPUSH
15246: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15250: LD_INT 48
15252: PPUSH
15253: LD_VAR 0 3
15257: PPUSH
15258: LD_INT 1
15260: PPUSH
15261: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15265: LD_INT 49
15267: PPUSH
15268: LD_VAR 0 3
15272: PPUSH
15273: LD_INT 1
15275: PPUSH
15276: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
15280: LD_INT 50
15282: PPUSH
15283: LD_VAR 0 3
15287: PPUSH
15288: LD_INT 1
15290: PPUSH
15291: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15295: LD_INT 69
15297: PPUSH
15298: LD_VAR 0 3
15302: PPUSH
15303: LD_INT 1
15305: PPUSH
15306: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15310: LD_INT 39
15312: PPUSH
15313: LD_VAR 0 3
15317: PPUSH
15318: LD_INT 1
15320: PPUSH
15321: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15325: LD_INT 34
15327: PPUSH
15328: LD_VAR 0 3
15332: PPUSH
15333: LD_INT 1
15335: PPUSH
15336: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15340: LD_INT 42
15342: PPUSH
15343: LD_VAR 0 3
15347: PPUSH
15348: LD_INT 1
15350: PPUSH
15351: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15355: LD_INT 44
15357: PPUSH
15358: LD_VAR 0 3
15362: PPUSH
15363: LD_INT 1
15365: PPUSH
15366: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15370: LD_INT 41
15372: PPUSH
15373: LD_VAR 0 3
15377: PPUSH
15378: LD_INT 1
15380: PPUSH
15381: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
15385: LD_INT 13
15387: PPUSH
15388: LD_VAR 0 3
15392: PPUSH
15393: LD_INT 1
15395: PPUSH
15396: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
15400: LD_INT 40
15402: PPUSH
15403: LD_VAR 0 3
15407: PPUSH
15408: LD_INT 1
15410: PPUSH
15411: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15415: LD_INT 43
15417: PPUSH
15418: LD_VAR 0 3
15422: PPUSH
15423: LD_INT 1
15425: PPUSH
15426: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15430: LD_INT 70
15432: PPUSH
15433: LD_VAR 0 3
15437: PPUSH
15438: LD_INT 1
15440: PPUSH
15441: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
15445: LD_INT 23
15447: PPUSH
15448: LD_VAR 0 3
15452: PPUSH
15453: LD_INT 1
15455: PPUSH
15456: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15460: LD_INT 51
15462: PPUSH
15463: LD_VAR 0 3
15467: PPUSH
15468: LD_INT 1
15470: PPUSH
15471: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15475: LD_INT 52
15477: PPUSH
15478: LD_VAR 0 3
15482: PPUSH
15483: LD_INT 1
15485: PPUSH
15486: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15490: LD_INT 6
15492: PPUSH
15493: LD_VAR 0 3
15497: PPUSH
15498: LD_INT 1
15500: PPUSH
15501: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
15505: LD_INT 15
15507: PPUSH
15508: LD_VAR 0 3
15512: PPUSH
15513: LD_INT 1
15515: PPUSH
15516: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
15520: LD_INT 7
15522: PPUSH
15523: LD_VAR 0 3
15527: PPUSH
15528: LD_INT 1
15530: PPUSH
15531: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
15535: LD_INT 12
15537: PPUSH
15538: LD_VAR 0 3
15542: PPUSH
15543: LD_INT 1
15545: PPUSH
15546: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
15550: LD_INT 10
15552: PPUSH
15553: LD_VAR 0 3
15557: PPUSH
15558: LD_INT 1
15560: PPUSH
15561: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
15565: LD_INT 17
15567: PPUSH
15568: LD_VAR 0 3
15572: PPUSH
15573: LD_INT 1
15575: PPUSH
15576: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
15580: LD_INT 18
15582: PPUSH
15583: LD_VAR 0 3
15587: PPUSH
15588: LD_INT 1
15590: PPUSH
15591: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
15595: LD_INT 60
15597: PPUSH
15598: LD_VAR 0 3
15602: PPUSH
15603: LD_INT 1
15605: PPUSH
15606: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
15610: LD_INT 61
15612: PPUSH
15613: LD_VAR 0 3
15617: PPUSH
15618: LD_INT 1
15620: PPUSH
15621: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
15625: LD_INT 32
15627: PPUSH
15628: LD_VAR 0 3
15632: PPUSH
15633: LD_INT 1
15635: PPUSH
15636: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
15640: LD_INT 27
15642: PPUSH
15643: LD_VAR 0 3
15647: PPUSH
15648: LD_INT 1
15650: PPUSH
15651: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
15655: LD_INT 36
15657: PPUSH
15658: LD_VAR 0 3
15662: PPUSH
15663: LD_INT 1
15665: PPUSH
15666: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
15670: LD_INT 33
15672: PPUSH
15673: LD_VAR 0 3
15677: PPUSH
15678: LD_INT 1
15680: PPUSH
15681: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
15685: LD_INT 9
15687: PPUSH
15688: LD_VAR 0 3
15692: PPUSH
15693: LD_INT 1
15695: PPUSH
15696: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
15700: LD_INT 38
15702: PPUSH
15703: LD_VAR 0 3
15707: PPUSH
15708: LD_INT 1
15710: PPUSH
15711: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
15715: LD_INT 57
15717: PPUSH
15718: LD_VAR 0 3
15722: PPUSH
15723: LD_INT 1
15725: PPUSH
15726: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
15730: LD_INT 58
15732: PPUSH
15733: LD_VAR 0 3
15737: PPUSH
15738: LD_INT 1
15740: PPUSH
15741: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
15745: LD_INT 28
15747: PPUSH
15748: LD_VAR 0 3
15752: PPUSH
15753: LD_INT 1
15755: PPUSH
15756: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
15760: LD_INT 29
15762: PPUSH
15763: LD_VAR 0 3
15767: PPUSH
15768: LD_INT 1
15770: PPUSH
15771: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
15775: LD_INT 30
15777: PPUSH
15778: LD_VAR 0 3
15782: PPUSH
15783: LD_INT 1
15785: PPUSH
15786: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
15790: LD_INT 37
15792: PPUSH
15793: LD_VAR 0 3
15797: PPUSH
15798: LD_INT 1
15800: PPUSH
15801: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
15805: LD_INT 63
15807: PPUSH
15808: LD_VAR 0 3
15812: PPUSH
15813: LD_INT 1
15815: PPUSH
15816: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
15820: LD_INT 64
15822: PPUSH
15823: LD_VAR 0 3
15827: PPUSH
15828: LD_INT 1
15830: PPUSH
15831: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
15835: LD_INT 3
15837: PPUSH
15838: LD_VAR 0 3
15842: PPUSH
15843: LD_INT 1
15845: PPUSH
15846: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
15850: LD_INT 4
15852: PPUSH
15853: LD_VAR 0 3
15857: PPUSH
15858: LD_INT 1
15860: PPUSH
15861: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
15865: LD_INT 5
15867: PPUSH
15868: LD_VAR 0 3
15872: PPUSH
15873: LD_INT 1
15875: PPUSH
15876: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
15880: LD_INT 8
15882: PPUSH
15883: LD_VAR 0 3
15887: PPUSH
15888: LD_INT 1
15890: PPUSH
15891: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
15895: LD_INT 66
15897: PPUSH
15898: LD_VAR 0 3
15902: PPUSH
15903: LD_INT 1
15905: PPUSH
15906: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
15910: LD_INT 67
15912: PPUSH
15913: LD_VAR 0 3
15917: PPUSH
15918: LD_INT 1
15920: PPUSH
15921: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
15925: LD_INT 21
15927: PPUSH
15928: LD_VAR 0 3
15932: PPUSH
15933: LD_INT 1
15935: PPUSH
15936: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
15940: LD_INT 22
15942: PPUSH
15943: LD_VAR 0 3
15947: PPUSH
15948: LD_INT 1
15950: PPUSH
15951: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
15955: LD_INT 19
15957: PPUSH
15958: LD_VAR 0 3
15962: PPUSH
15963: LD_INT 1
15965: PPUSH
15966: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
15970: LD_INT 26
15972: PPUSH
15973: LD_VAR 0 3
15977: PPUSH
15978: LD_INT 1
15980: PPUSH
15981: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
15985: LD_INT 54
15987: PPUSH
15988: LD_VAR 0 3
15992: PPUSH
15993: LD_INT 1
15995: PPUSH
15996: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
16000: LD_INT 55
16002: PPUSH
16003: LD_VAR 0 3
16007: PPUSH
16008: LD_INT 1
16010: PPUSH
16011: CALL_OW 322
// for i = 0 to 39 do
16015: LD_ADDR_VAR 0 4
16019: PUSH
16020: DOUBLE
16021: LD_INT 0
16023: DEC
16024: ST_TO_ADDR
16025: LD_INT 39
16027: PUSH
16028: FOR_TO
16029: IFFALSE 16050
// SetRestrict ( i , side , true ) ;
16031: LD_VAR 0 4
16035: PPUSH
16036: LD_VAR 0 3
16040: PPUSH
16041: LD_INT 1
16043: PPUSH
16044: CALL_OW 324
16048: GO 16028
16050: POP
16051: POP
// end ; else
16052: GO 16129
16054: POP
// begin for i = 1 to 73 do
16055: LD_ADDR_VAR 0 4
16059: PUSH
16060: DOUBLE
16061: LD_INT 1
16063: DEC
16064: ST_TO_ADDR
16065: LD_INT 73
16067: PUSH
16068: FOR_TO
16069: IFFALSE 16090
// SetTech ( i , side , state_enabled ) ;
16071: LD_VAR 0 4
16075: PPUSH
16076: LD_VAR 0 3
16080: PPUSH
16081: LD_INT 1
16083: PPUSH
16084: CALL_OW 322
16088: GO 16068
16090: POP
16091: POP
// for i = 0 to 39 do
16092: LD_ADDR_VAR 0 4
16096: PUSH
16097: DOUBLE
16098: LD_INT 0
16100: DEC
16101: ST_TO_ADDR
16102: LD_INT 39
16104: PUSH
16105: FOR_TO
16106: IFFALSE 16127
// SetRestrict ( i , side , true ) ;
16108: LD_VAR 0 4
16112: PPUSH
16113: LD_VAR 0 3
16117: PPUSH
16118: LD_INT 1
16120: PPUSH
16121: CALL_OW 324
16125: GO 16105
16127: POP
16128: POP
// end ; end ; end ;
16129: GO 12134
16131: POP
16132: POP
// end ; end_of_file
16133: LD_VAR 0 2
16137: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
16138: LD_INT 0
16140: PPUSH
16141: PPUSH
// enable ( 98 ) ;
16142: LD_INT 98
16144: ENABLE_MARKED
// GameEnded = false ;
16145: LD_ADDR_LOC 29
16149: PUSH
16150: LD_INT 0
16152: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
16153: LD_ADDR_LOC 28
16157: PUSH
16158: LD_INT 0
16160: PUSH
16161: LD_INT 0
16163: PUSH
16164: LD_INT 0
16166: PUSH
16167: LD_INT 0
16169: PUSH
16170: LD_INT 0
16172: PUSH
16173: LD_INT 0
16175: PUSH
16176: LD_INT 0
16178: PUSH
16179: LD_INT 0
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: ST_TO_ADDR
// unfoged = false ;
16192: LD_ADDR_LOC 30
16196: PUSH
16197: LD_INT 0
16199: ST_TO_ADDR
// for i = 1 to side_positions do
16200: LD_ADDR_VAR 0 2
16204: PUSH
16205: DOUBLE
16206: LD_INT 1
16208: DEC
16209: ST_TO_ADDR
16210: LD_EXP 20
16214: PUSH
16215: FOR_TO
16216: IFFALSE 16256
// if not side_positions [ i ] then
16218: LD_EXP 20
16222: PUSH
16223: LD_VAR 0 2
16227: ARRAY
16228: NOT
16229: IFFALSE 16254
// defaited = replace ( defaited , i , true ) ;
16231: LD_ADDR_LOC 28
16235: PUSH
16236: LD_LOC 28
16240: PPUSH
16241: LD_VAR 0 2
16245: PPUSH
16246: LD_INT 1
16248: PPUSH
16249: CALL_OW 1
16253: ST_TO_ADDR
16254: GO 16215
16256: POP
16257: POP
// end ;
16258: LD_VAR 0 1
16262: RET
// function CanWinLoose ; begin
16263: LD_INT 0
16265: PPUSH
// Result := true ;
16266: LD_ADDR_VAR 0 1
16270: PUSH
16271: LD_INT 1
16273: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
16274: CALL_OW 518
16278: PUSH
16279: CALL_OW 519
16283: PUSH
16284: LD_INT 0
16286: GREATER
16287: AND
16288: IFFALSE 16298
// Result := false ;
16290: LD_ADDR_VAR 0 1
16294: PUSH
16295: LD_INT 0
16297: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
16298: CALL_OW 531
16302: PUSH
16303: CALL_OW 519
16307: PUSH
16308: LD_INT 1
16310: GREATER
16311: AND
16312: IFFALSE 16322
// Result := false ;
16314: LD_ADDR_VAR 0 1
16318: PUSH
16319: LD_INT 0
16321: ST_TO_ADDR
// end ;
16322: LD_VAR 0 1
16326: RET
// export function HasPower ( i ) ; var k , h ; begin
16327: LD_INT 0
16329: PPUSH
16330: PPUSH
16331: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
16332: LD_VAR 0 1
16336: PPUSH
16337: CALL_OW 108
16341: NOT
16342: PUSH
16343: LD_EXP 19
16347: PUSH
16348: LD_VAR 0 1
16352: ARRAY
16353: NOT
16354: AND
16355: PUSH
16356: LD_OWVAR 4
16360: AND
16361: IFFALSE 16373
// begin result = false ;
16363: LD_ADDR_VAR 0 2
16367: PUSH
16368: LD_INT 0
16370: ST_TO_ADDR
// end else
16371: GO 16668
// case def_win_rules of 0 :
16373: LD_EXP 15
16377: PUSH
16378: LD_INT 0
16380: DOUBLE
16381: EQUAL
16382: IFTRUE 16386
16384: GO 16549
16386: POP
// if def_people_respawning then
16387: LD_EXP 48
16391: IFFALSE 16482
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
16393: LD_ADDR_VAR 0 2
16397: PUSH
16398: LD_INT 22
16400: PUSH
16401: LD_VAR 0 1
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: PUSH
16410: LD_INT 2
16412: PUSH
16413: LD_INT 21
16415: PUSH
16416: LD_INT 1
16418: PUSH
16419: EMPTY
16420: LIST
16421: LIST
16422: PUSH
16423: LD_INT 33
16425: PUSH
16426: LD_INT 3
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: PUSH
16433: LD_INT 33
16435: PUSH
16436: LD_INT 5
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: PUSH
16443: LD_INT 30
16445: PUSH
16446: LD_INT 0
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: PUSH
16453: LD_INT 30
16455: PUSH
16456: LD_INT 1
16458: PUSH
16459: EMPTY
16460: LIST
16461: LIST
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PPUSH
16475: CALL_OW 69
16479: ST_TO_ADDR
16480: GO 16547
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
16482: LD_ADDR_VAR 0 2
16486: PUSH
16487: LD_INT 22
16489: PUSH
16490: LD_VAR 0 1
16494: PUSH
16495: EMPTY
16496: LIST
16497: LIST
16498: PUSH
16499: LD_INT 2
16501: PUSH
16502: LD_INT 21
16504: PUSH
16505: LD_INT 1
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: PUSH
16512: LD_INT 33
16514: PUSH
16515: LD_INT 3
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: PUSH
16522: LD_INT 33
16524: PUSH
16525: LD_INT 5
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PPUSH
16542: CALL_OW 69
16546: ST_TO_ADDR
16547: GO 16668
16549: LD_INT 1
16551: DOUBLE
16552: EQUAL
16553: IFTRUE 16557
16555: GO 16596
16557: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
16558: LD_ADDR_VAR 0 2
16562: PUSH
16563: LD_INT 22
16565: PUSH
16566: LD_VAR 0 1
16570: PUSH
16571: EMPTY
16572: LIST
16573: LIST
16574: PUSH
16575: LD_INT 21
16577: PUSH
16578: LD_INT 1
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: PPUSH
16589: CALL_OW 69
16593: ST_TO_ADDR
16594: GO 16668
16596: LD_INT 2
16598: DOUBLE
16599: EQUAL
16600: IFTRUE 16604
16602: GO 16667
16604: POP
// begin h = false ;
16605: LD_ADDR_VAR 0 4
16609: PUSH
16610: LD_INT 0
16612: ST_TO_ADDR
// for k in heroes [ i ] do
16613: LD_ADDR_VAR 0 3
16617: PUSH
16618: LD_EXP 28
16622: PUSH
16623: LD_VAR 0 1
16627: ARRAY
16628: PUSH
16629: FOR_IN
16630: IFFALSE 16653
// if IsLive ( k ) then
16632: LD_VAR 0 3
16636: PPUSH
16637: CALL_OW 300
16641: IFFALSE 16651
// h = true ;
16643: LD_ADDR_VAR 0 4
16647: PUSH
16648: LD_INT 1
16650: ST_TO_ADDR
16651: GO 16629
16653: POP
16654: POP
// Result := h ;
16655: LD_ADDR_VAR 0 2
16659: PUSH
16660: LD_VAR 0 4
16664: ST_TO_ADDR
// end ; end ;
16665: GO 16668
16667: POP
// end ;
16668: LD_VAR 0 2
16672: RET
// function AlliedSides ( i , j ) ; begin
16673: LD_INT 0
16675: PPUSH
// Result := false ;
16676: LD_ADDR_VAR 0 3
16680: PUSH
16681: LD_INT 0
16683: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
16684: LD_VAR 0 1
16688: PPUSH
16689: LD_VAR 0 2
16693: PPUSH
16694: CALL_OW 81
16698: PUSH
16699: LD_INT 1
16701: EQUAL
16702: PUSH
16703: LD_VAR 0 2
16707: PPUSH
16708: LD_VAR 0 1
16712: PPUSH
16713: CALL_OW 81
16717: PUSH
16718: LD_INT 1
16720: EQUAL
16721: AND
16722: PUSH
16723: LD_VAR 0 1
16727: PPUSH
16728: CALL_OW 83
16732: AND
16733: PUSH
16734: LD_VAR 0 2
16738: PPUSH
16739: CALL_OW 83
16743: AND
16744: IFFALSE 16754
// Result := true ;
16746: LD_ADDR_VAR 0 3
16750: PUSH
16751: LD_INT 1
16753: ST_TO_ADDR
// end ;
16754: LD_VAR 0 3
16758: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
16759: CALL 16263 0 0
16763: PUSH
16764: LD_LOC 29
16768: NOT
16769: AND
16770: IFFALSE 16786
16772: GO 16774
16774: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
16775: LD_ADDR_EXP 54
16779: PUSH
16780: LD_STRING #Player-Ended
16782: PUSH
16783: EMPTY
16784: LIST
16785: ST_TO_ADDR
16786: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
16787: CALL 16263 0 0
16791: PUSH
16792: LD_LOC 29
16796: AND
16797: IFFALSE 16806
16799: GO 16801
16801: DISABLE
// YouLostInMultiplayer ;
16802: CALL_OW 107
16806: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
16807: CALL 16263 0 0
16811: NOT
16812: PUSH
16813: CALL_OW 531
16817: NOT
16818: AND
16819: IFFALSE 16835
16821: GO 16823
16823: DISABLE
// WaitServerStrings = [ #server-wait ] ;
16824: LD_ADDR_EXP 54
16828: PUSH
16829: LD_STRING #server-wait
16831: PUSH
16832: EMPTY
16833: LIST
16834: ST_TO_ADDR
16835: END
// every 100 trigger IAmSpec do
16836: CALL_OW 531
16840: IFFALSE 16856
16842: GO 16844
16844: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
16845: LD_ADDR_EXP 54
16849: PUSH
16850: LD_STRING #Player-IAmSpec
16852: PUSH
16853: EMPTY
16854: LIST
16855: ST_TO_ADDR
16856: END
// every 100 trigger GameEnded and IAmSpec do
16857: LD_LOC 29
16861: PUSH
16862: CALL_OW 531
16866: AND
16867: IFFALSE 16876
16869: GO 16871
16871: DISABLE
// YouLostInMultiplayer ;
16872: CALL_OW 107
16876: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
16877: CALL 16263 0 0
16881: PUSH
16882: LD_LOC 29
16886: NOT
16887: AND
16888: IFFALSE 16904
16890: GO 16892
16892: DISABLE
// WaitServerStrings = [ $player-win ] ;
16893: LD_ADDR_EXP 54
16897: PUSH
16898: LD_STRING $player-win
16900: PUSH
16901: EMPTY
16902: LIST
16903: ST_TO_ADDR
16904: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
16905: CALL 16263 0 0
16909: PUSH
16910: LD_LOC 29
16914: AND
16915: IFFALSE 16939
16917: GO 16919
16919: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
16920: LD_EXP 21
16924: PUSH
16925: LD_OWVAR 2
16929: ARRAY
16930: PPUSH
16931: CALL 11146 0 1
// YouWinInMultiplayer ;
16935: CALL_OW 106
// end ;
16939: END
// every 100 trigger isEditor marked 401 do
16940: LD_OWVAR 84
16944: IFFALSE 16960
16946: GO 16948
16948: DISABLE
// Debug_Strings = [ You won ] ;
16949: LD_ADDR_OWVAR 48
16953: PUSH
16954: LD_STRING You won
16956: PUSH
16957: EMPTY
16958: LIST
16959: ST_TO_ADDR
16960: END
// every 100 trigger isEditor marked 400 do
16961: LD_OWVAR 84
16965: IFFALSE 16981
16967: GO 16969
16969: DISABLE
// Debug_Strings = [ You loss ] ;
16970: LD_ADDR_OWVAR 48
16974: PUSH
16975: LD_STRING You loss
16977: PUSH
16978: EMPTY
16979: LIST
16980: ST_TO_ADDR
16981: END
// every 100 marked 98 do var i , un ;
16982: GO 16984
16984: DISABLE
16985: LD_INT 0
16987: PPUSH
16988: PPUSH
// begin for i = 1 to side_positions do
16989: LD_ADDR_VAR 0 1
16993: PUSH
16994: DOUBLE
16995: LD_INT 1
16997: DEC
16998: ST_TO_ADDR
16999: LD_EXP 20
17003: PUSH
17004: FOR_TO
17005: IFFALSE 17128
// if side_positions [ i ] then
17007: LD_EXP 20
17011: PUSH
17012: LD_VAR 0 1
17016: ARRAY
17017: IFFALSE 17126
// if not HasPower ( i ) and not Defaited [ i ] then
17019: LD_VAR 0 1
17023: PPUSH
17024: CALL 16327 0 1
17028: NOT
17029: PUSH
17030: LD_LOC 28
17034: PUSH
17035: LD_VAR 0 1
17039: ARRAY
17040: NOT
17041: AND
17042: IFFALSE 17126
// begin un = filterallunits ( [ f_side , i ] ) ;
17044: LD_ADDR_VAR 0 2
17048: PUSH
17049: LD_INT 22
17051: PUSH
17052: LD_VAR 0 1
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: PPUSH
17061: CALL_OW 69
17065: ST_TO_ADDR
// if un then
17066: LD_VAR 0 2
17070: IFFALSE 17084
// SetSide ( un , 0 ) ;
17072: LD_VAR 0 2
17076: PPUSH
17077: LD_INT 0
17079: PPUSH
17080: CALL_OW 235
// Defaited = replace ( Defaited , i , true ) ;
17084: LD_ADDR_LOC 28
17088: PUSH
17089: LD_LOC 28
17093: PPUSH
17094: LD_VAR 0 1
17098: PPUSH
17099: LD_INT 1
17101: PPUSH
17102: CALL_OW 1
17106: ST_TO_ADDR
// if i = your_side then
17107: LD_VAR 0 1
17111: PUSH
17112: LD_OWVAR 2
17116: EQUAL
17117: IFFALSE 17126
// begin Multiplayer_Loose_Message ;
17119: CALL_OW 521
// enable ( 400 ) ;
17123: LD_INT 400
17125: ENABLE_MARKED
// end ; end ;
17126: GO 17004
17128: POP
17129: POP
// if not Unfoged and defaited [ your_side ] then
17130: LD_LOC 30
17134: NOT
17135: PUSH
17136: LD_LOC 28
17140: PUSH
17141: LD_OWVAR 2
17145: ARRAY
17146: AND
17147: IFFALSE 17153
// Unfog ;
17149: CALL 17339 0 0
// DidGameEnd ;
17153: CALL 17168 0 0
// if not GameEnded then
17157: LD_LOC 29
17161: NOT
17162: IFFALSE 17165
// enable ;
17164: ENABLE
// end ;
17165: PPOPN 2
17167: END
// function DidGameEnd ; var i , k , enemy ; begin
17168: LD_INT 0
17170: PPUSH
17171: PPUSH
17172: PPUSH
17173: PPUSH
// enemy = [ ] ;
17174: LD_ADDR_VAR 0 4
17178: PUSH
17179: EMPTY
17180: ST_TO_ADDR
// for i = 1 to side_positions do
17181: LD_ADDR_VAR 0 2
17185: PUSH
17186: DOUBLE
17187: LD_INT 1
17189: DEC
17190: ST_TO_ADDR
17191: LD_EXP 20
17195: PUSH
17196: FOR_TO
17197: IFFALSE 17301
// if not defaited [ i ] then
17199: LD_LOC 28
17203: PUSH
17204: LD_VAR 0 2
17208: ARRAY
17209: NOT
17210: IFFALSE 17299
// for k = 1 to side_positions do
17212: LD_ADDR_VAR 0 3
17216: PUSH
17217: DOUBLE
17218: LD_INT 1
17220: DEC
17221: ST_TO_ADDR
17222: LD_EXP 20
17226: PUSH
17227: FOR_TO
17228: IFFALSE 17297
// if not defaited [ k ] then
17230: LD_LOC 28
17234: PUSH
17235: LD_VAR 0 3
17239: ARRAY
17240: NOT
17241: IFFALSE 17295
// if GetAttitude ( i , k ) in [ att_enemy , att_neutral ] then
17243: LD_VAR 0 2
17247: PPUSH
17248: LD_VAR 0 3
17252: PPUSH
17253: CALL_OW 81
17257: PUSH
17258: LD_INT 2
17260: PUSH
17261: LD_INT 0
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: IN
17268: IFFALSE 17295
// enemy = enemy ^ [ i , k ] ;
17270: LD_ADDR_VAR 0 4
17274: PUSH
17275: LD_VAR 0 4
17279: PUSH
17280: LD_VAR 0 2
17284: PUSH
17285: LD_VAR 0 3
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: ADD
17294: ST_TO_ADDR
17295: GO 17227
17297: POP
17298: POP
17299: GO 17196
17301: POP
17302: POP
// if not enemy then
17303: LD_VAR 0 4
17307: NOT
17308: IFFALSE 17334
// begin GameEnded = true ;
17310: LD_ADDR_LOC 29
17314: PUSH
17315: LD_INT 1
17317: ST_TO_ADDR
// if not defaited [ your_side ] then
17318: LD_LOC 28
17322: PUSH
17323: LD_OWVAR 2
17327: ARRAY
17328: NOT
17329: IFFALSE 17334
// enable ( 401 ) ;
17331: LD_INT 401
17333: ENABLE_MARKED
// end ; end ;
17334: LD_VAR 0 1
17338: RET
// function unfog ; var k , friends ; begin
17339: LD_INT 0
17341: PPUSH
17342: PPUSH
17343: PPUSH
// for k = 1 to side_positions do
17344: LD_ADDR_VAR 0 2
17348: PUSH
17349: DOUBLE
17350: LD_INT 1
17352: DEC
17353: ST_TO_ADDR
17354: LD_EXP 20
17358: PUSH
17359: FOR_TO
17360: IFFALSE 17416
// if not defaited [ k ] then
17362: LD_LOC 28
17366: PUSH
17367: LD_VAR 0 2
17371: ARRAY
17372: NOT
17373: IFFALSE 17414
// if GetAttitude ( your_side , k ) in [ att_friend ] then
17375: LD_OWVAR 2
17379: PPUSH
17380: LD_VAR 0 2
17384: PPUSH
17385: CALL_OW 81
17389: PUSH
17390: LD_INT 1
17392: PUSH
17393: EMPTY
17394: LIST
17395: IN
17396: IFFALSE 17414
// friends = friends ^ k ;
17398: LD_ADDR_VAR 0 3
17402: PUSH
17403: LD_VAR 0 3
17407: PUSH
17408: LD_VAR 0 2
17412: ADD
17413: ST_TO_ADDR
17414: GO 17359
17416: POP
17417: POP
// if not friends then
17418: LD_VAR 0 3
17422: NOT
17423: IFFALSE 17440
// begin fogoff ( true ) ;
17425: LD_INT 1
17427: PPUSH
17428: CALL_OW 344
// unfoged = true ;
17432: LD_ADDR_LOC 30
17436: PUSH
17437: LD_INT 1
17439: ST_TO_ADDR
// end ; end ;
17440: LD_VAR 0 1
17444: RET
// export function MakeGameEnd ; begin
17445: LD_INT 0
17447: PPUSH
// fogoff ( true ) ;
17448: LD_INT 1
17450: PPUSH
17451: CALL_OW 344
// unfoged = true ;
17455: LD_ADDR_LOC 30
17459: PUSH
17460: LD_INT 1
17462: ST_TO_ADDR
// wait ( 0 0$5 ) ;
17463: LD_INT 175
17465: PPUSH
17466: CALL_OW 67
// GameEnded = true ;
17470: LD_ADDR_LOC 29
17474: PUSH
17475: LD_INT 1
17477: ST_TO_ADDR
// end ;
17478: LD_VAR 0 1
17482: RET
// export function GetGameEnded ; begin
17483: LD_INT 0
17485: PPUSH
// result = GameEnded ;
17486: LD_ADDR_VAR 0 1
17490: PUSH
17491: LD_LOC 29
17495: ST_TO_ADDR
// end ;
17496: LD_VAR 0 1
17500: RET
