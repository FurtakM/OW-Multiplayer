// export def_tree_function ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , respawning_time_min , respawning_time_max , siberite_bomb_Delay , amount_of_apemen , tree_function , def_win_rules , bonus_gained , activated ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , battle_flags_id ; export normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 141
// begin Your_Side := mp_player_side ;
  79: LD_ADDR_OWVAR 2
  83: PUSH
  84: LD_OWVAR 7
  88: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  89: LD_ADDR_EXP 21
  93: PUSH
  94: LD_OWVAR 17
  98: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  99: LD_ADDR_EXP 18
 103: PUSH
 104: LD_OWVAR 15
 108: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 109: LD_ADDR_EXP 22
 113: PUSH
 114: LD_OWVAR 16
 118: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 119: LD_ADDR_EXP 20
 123: PUSH
 124: CALL 0 0 0
 128: ST_TO_ADDR
// Teams := mp_teams ;
 129: LD_ADDR_EXP 19
 133: PUSH
 134: LD_OWVAR 12
 138: ST_TO_ADDR
// end else
 139: GO 334
// begin Your_Side := 1 ;
 141: LD_ADDR_OWVAR 2
 145: PUSH
 146: LD_INT 1
 148: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 149: LD_ADDR_EXP 21
 153: PUSH
 154: LD_INT 1
 156: PUSH
 157: LD_INT 2
 159: PUSH
 160: LD_INT 3
 162: PUSH
 163: LD_INT 4
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 188: LD_ADDR_EXP 18
 192: PUSH
 193: LD_INT 1
 195: PUSH
 196: LD_INT 1
 198: PUSH
 199: LD_INT 2
 201: PUSH
 202: LD_INT 2
 204: PUSH
 205: LD_INT 0
 207: PUSH
 208: LD_INT 0
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 0 , 0 , 0 , 0 ] ;
 227: LD_ADDR_EXP 22
 231: PUSH
 232: LD_INT 1
 234: PUSH
 235: LD_INT 2
 237: PUSH
 238: LD_INT 3
 240: PUSH
 241: LD_INT 1
 243: PUSH
 244: LD_INT 0
 246: PUSH
 247: LD_INT 0
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 0
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: LIST
 264: LIST
 265: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 266: LD_ADDR_EXP 20
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: LD_INT 0
 279: PUSH
 280: LD_INT 0
 282: PUSH
 283: LD_INT 0
 285: PUSH
 286: LD_INT 0
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: LIST
 299: LIST
 300: LIST
 301: LIST
 302: LIST
 303: LIST
 304: ST_TO_ADDR
// Teams := [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 305: LD_ADDR_EXP 19
 309: PUSH
 310: LD_INT 1
 312: PUSH
 313: LD_INT 2
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: LD_INT 3
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 334: LD_ADDR_EXP 23
 338: PUSH
 339: LD_EXP 18
 343: PUSH
 344: LD_INT 0
 346: PUSH
 347: EMPTY
 348: LIST
 349: DIFF
 350: PUSH
 351: LD_INT 1
 353: GREATER
 354: ST_TO_ADDR
// if Multiplayer then
 355: LD_OWVAR 4
 359: IFFALSE 566
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 361: LD_ADDR_EXP 41
 365: PUSH
 366: LD_INT 0
 368: PPUSH
 369: CALL_OW 426
 373: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 374: LD_ADDR_EXP 42
 378: PUSH
 379: LD_INT 1
 381: PPUSH
 382: CALL_OW 426
 386: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 387: LD_ADDR_EXP 43
 391: PUSH
 392: LD_INT 2
 394: PPUSH
 395: CALL_OW 426
 399: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 400: LD_ADDR_EXP 44
 404: PUSH
 405: LD_INT 3
 407: PPUSH
 408: CALL_OW 426
 412: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 413: LD_ADDR_EXP 45
 417: PUSH
 418: LD_INT 4
 420: PPUSH
 421: CALL_OW 426
 425: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 426: LD_ADDR_EXP 46
 430: PUSH
 431: LD_INT 5
 433: PPUSH
 434: CALL_OW 426
 438: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 439: LD_ADDR_EXP 48
 443: PUSH
 444: LD_INT 10
 446: PPUSH
 447: CALL_OW 426
 451: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 452: LD_ADDR_EXP 49
 456: PUSH
 457: LD_INT 11
 459: PPUSH
 460: CALL_OW 426
 464: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 465: LD_ADDR_EXP 50
 469: PUSH
 470: LD_INT 12
 472: PPUSH
 473: CALL_OW 426
 477: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 13 ) ;
 478: LD_ADDR_EXP 52
 482: PUSH
 483: LD_INT 13
 485: PPUSH
 486: CALL_OW 426
 490: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 14 ) ;
 491: LD_ADDR_EXP 51
 495: PUSH
 496: LD_INT 14
 498: PPUSH
 499: CALL_OW 426
 503: ST_TO_ADDR
// def_tree_function := GetMultiplayerSetting ( 15 ) ;
 504: LD_ADDR_EXP 1
 508: PUSH
 509: LD_INT 15
 511: PPUSH
 512: CALL_OW 426
 516: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 517: LD_ADDR_EXP 53
 521: PUSH
 522: LD_INT 17
 524: PPUSH
 525: CALL_OW 426
 529: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 530: LD_ADDR_EXP 54
 534: PUSH
 535: LD_INT 20
 537: PPUSH
 538: CALL_OW 426
 542: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 543: LD_ADDR_VAR 0 3
 547: PUSH
 548: LD_INT 22
 550: PPUSH
 551: CALL_OW 426
 555: ST_TO_ADDR
// def_win_rules = 0 ;
 556: LD_ADDR_EXP 15
 560: PUSH
 561: LD_INT 0
 563: ST_TO_ADDR
// end else
 564: GO 698
// begin Randomize ;
 566: CALL_OW 10
// def_base_level := 2 ;
 570: LD_ADDR_EXP 41
 574: PUSH
 575: LD_INT 2
 577: ST_TO_ADDR
// def_amount_of_people := 1 ;
 578: LD_ADDR_EXP 42
 582: PUSH
 583: LD_INT 1
 585: ST_TO_ADDR
// def_skill_level := 1 ;
 586: LD_ADDR_EXP 43
 590: PUSH
 591: LD_INT 1
 593: ST_TO_ADDR
// def_starting_resources := 2 ;
 594: LD_ADDR_EXP 44
 598: PUSH
 599: LD_INT 2
 601: ST_TO_ADDR
// def_shipments_density := 50 ;
 602: LD_ADDR_EXP 45
 606: PUSH
 607: LD_INT 50
 609: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 610: LD_ADDR_EXP 46
 614: PUSH
 615: LD_INT 0
 617: ST_TO_ADDR
// def_shared_vision := 1 ;
 618: LD_ADDR_EXP 48
 622: PUSH
 623: LD_INT 1
 625: ST_TO_ADDR
// def_morale_flags := 1 ;
 626: LD_ADDR_EXP 49
 630: PUSH
 631: LD_INT 1
 633: ST_TO_ADDR
// def_siberite_detection := 1 ;
 634: LD_ADDR_EXP 50
 638: PUSH
 639: LD_INT 1
 641: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 642: LD_ADDR_EXP 52
 646: PUSH
 647: LD_INT 3
 649: ST_TO_ADDR
// def_people_respawning := 2 ;
 650: LD_ADDR_EXP 51
 654: PUSH
 655: LD_INT 2
 657: ST_TO_ADDR
// def_tree_function := 7 ;
 658: LD_ADDR_EXP 1
 662: PUSH
 663: LD_INT 7
 665: ST_TO_ADDR
// def_siberite_bomb := 2 ;
 666: LD_ADDR_EXP 53
 670: PUSH
 671: LD_INT 2
 673: ST_TO_ADDR
// def_builduptime := 1 ;
 674: LD_ADDR_EXP 54
 678: PUSH
 679: LD_INT 1
 681: ST_TO_ADDR
// tech_level = 4 ;
 682: LD_ADDR_VAR 0 3
 686: PUSH
 687: LD_INT 4
 689: ST_TO_ADDR
// def_win_rules = 0 ;
 690: LD_ADDR_EXP 15
 694: PUSH
 695: LD_INT 0
 697: ST_TO_ADDR
// end ; if def_tree_function = 7 then
 698: LD_EXP 1
 702: PUSH
 703: LD_INT 7
 705: EQUAL
 706: IFFALSE 724
// def_tree_function := Rand ( 1 , 5 ) ;
 708: LD_ADDR_EXP 1
 712: PUSH
 713: LD_INT 1
 715: PPUSH
 716: LD_INT 5
 718: PPUSH
 719: CALL_OW 12
 723: ST_TO_ADDR
// InitGameRules ;
 724: CALL 7556 0 0
// if def_game_rules = 0 then
 728: LD_EXP 40
 732: PUSH
 733: LD_INT 0
 735: EQUAL
 736: IFFALSE 763
// begin if isSGUI then
 738: LD_OWVAR 83
 742: IFFALSE 750
// setMpTechs ( ) else
 744: CALL 11073 0 0
 748: GO 763
// begin SetMpTechLevel ( tech_level + 1 ) ;
 750: LD_VAR 0 3
 754: PUSH
 755: LD_INT 1
 757: PLUS
 758: PPUSH
 759: CALL 11220 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 763: LD_ADDR_EXP 2
 767: PUSH
 768: LD_INT 0
 770: PUSH
 771: LD_INT 1
 773: PUSH
 774: LD_INT 1
 776: PUSH
 777: LD_INT 1
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: LIST
 784: LIST
 785: PUSH
 786: LD_EXP 41
 790: PUSH
 791: LD_INT 1
 793: PLUS
 794: ARRAY
 795: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 , 3 ] [ def_base_level + 1 ] ;
 796: LD_ADDR_EXP 3
 800: PUSH
 801: LD_INT 0
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: LD_INT 2
 809: PUSH
 810: LD_INT 3
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: LIST
 817: LIST
 818: PUSH
 819: LD_EXP 41
 823: PUSH
 824: LD_INT 1
 826: PLUS
 827: ARRAY
 828: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 829: LD_ADDR_EXP 5
 833: PUSH
 834: LD_INT 2
 836: PUSH
 837: LD_INT 3
 839: PUSH
 840: LD_INT 4
 842: PUSH
 843: LD_INT 5
 845: PUSH
 846: EMPTY
 847: LIST
 848: LIST
 849: LIST
 850: LIST
 851: PUSH
 852: LD_EXP 43
 856: PUSH
 857: LD_INT 1
 859: PLUS
 860: ARRAY
 861: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 862: LD_ADDR_EXP 7
 866: PUSH
 867: LD_INT 0
 869: PUSH
 870: LD_INT 0
 872: PUSH
 873: LD_INT 0
 875: PUSH
 876: EMPTY
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_INT 30
 883: PUSH
 884: LD_INT 0
 886: PUSH
 887: LD_INT 0
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: LIST
 894: PUSH
 895: LD_INT 50
 897: PUSH
 898: LD_INT 20
 900: PUSH
 901: LD_INT 0
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: LIST
 908: PUSH
 909: LD_INT 80
 911: PUSH
 912: LD_INT 40
 914: PUSH
 915: LD_INT 20
 917: PUSH
 918: EMPTY
 919: LIST
 920: LIST
 921: LIST
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: LIST
 928: PUSH
 929: LD_EXP 44
 933: PUSH
 934: LD_INT 1
 936: PLUS
 937: ARRAY
 938: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 939: LD_ADDR_EXP 6
 943: PUSH
 944: LD_INT 10
 946: PUSH
 947: EMPTY
 948: LIST
 949: PUSH
 950: LD_INT 7
 952: PUSH
 953: LD_INT 14
 955: PUSH
 956: EMPTY
 957: LIST
 958: LIST
 959: PUSH
 960: LD_INT 6
 962: PUSH
 963: LD_INT 12
 965: PUSH
 966: LD_INT 18
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: LIST
 973: PUSH
 974: LD_INT 5
 976: PUSH
 977: LD_INT 10
 979: PUSH
 980: LD_INT 15
 982: PUSH
 983: LD_INT 20
 985: PUSH
 986: EMPTY
 987: LIST
 988: LIST
 989: LIST
 990: LIST
 991: PUSH
 992: EMPTY
 993: LIST
 994: LIST
 995: LIST
 996: LIST
 997: PUSH
 998: LD_EXP 44
1002: PUSH
1003: LD_INT 1
1005: PLUS
1006: ARRAY
1007: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1008: LD_ADDR_EXP 4
1012: PUSH
1013: LD_EXP 42
1017: PUSH
1018: LD_INT 4
1020: PLUS
1021: ST_TO_ADDR
// shipments_density := 150 - ( def_shipments_density + 1 ) ;
1022: LD_ADDR_EXP 8
1026: PUSH
1027: LD_INT 150
1029: PUSH
1030: LD_EXP 45
1034: PUSH
1035: LD_INT 1
1037: PLUS
1038: MINUS
1039: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1040: LD_ADDR_EXP 13
1044: PUSH
1045: LD_INT 0
1047: PUSH
1048: LD_INT 1
1050: PUSH
1051: LD_INT 2
1053: PUSH
1054: LD_INT 3
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: LIST
1061: LIST
1062: PUSH
1063: LD_EXP 52
1067: PUSH
1068: LD_INT 1
1070: PLUS
1071: ARRAY
1072: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1073: LD_ADDR_EXP 10
1077: PUSH
1078: LD_INT 0
1080: PUSH
1081: LD_INT 8400
1083: PUSH
1084: LD_INT 1750
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: LD_EXP 51
1096: PUSH
1097: LD_INT 1
1099: PLUS
1100: ARRAY
1101: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1102: LD_ADDR_EXP 11
1106: PUSH
1107: LD_INT 0
1109: PUSH
1110: LD_INT 21000
1112: PUSH
1113: LD_INT 4200
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: LIST
1120: PUSH
1121: LD_EXP 51
1125: PUSH
1126: LD_INT 1
1128: PLUS
1129: ARRAY
1130: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1131: LD_ADDR_EXP 9
1135: PUSH
1136: LD_INT 1
1138: NEG
1139: PUSH
1140: LD_INT 350
1142: PUSH
1143: LD_INT 700
1145: PUSH
1146: LD_INT 1400
1148: PUSH
1149: LD_INT 0
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: PUSH
1159: LD_EXP 49
1163: PUSH
1164: LD_INT 1
1166: PLUS
1167: ARRAY
1168: ST_TO_ADDR
// battle_flags_id := [ ] ;
1169: LD_ADDR_EXP 27
1173: PUSH
1174: EMPTY
1175: ST_TO_ADDR
// tree_function := [ [ 0 , 0 , 0 , 0 , 0 ] , [ 2 , 0 , 0 , 0 , 0 ] , [ 0 , 4 , 0 , 0 , 0 ] , [ 0 , 0 , 2 , 0 , 0 ] , [ 0 , 0 , 0 , 3 , 0 ] , [ 1 , 2 , 1 , 2 , 2 ] , [ 0 , 0 , 0 , 0 , 3 ] ] [ def_tree_function + 1 ] ;
1176: LD_ADDR_EXP 14
1180: PUSH
1181: LD_INT 0
1183: PUSH
1184: LD_INT 0
1186: PUSH
1187: LD_INT 0
1189: PUSH
1190: LD_INT 0
1192: PUSH
1193: LD_INT 0
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: LIST
1201: LIST
1202: PUSH
1203: LD_INT 2
1205: PUSH
1206: LD_INT 0
1208: PUSH
1209: LD_INT 0
1211: PUSH
1212: LD_INT 0
1214: PUSH
1215: LD_INT 0
1217: PUSH
1218: EMPTY
1219: LIST
1220: LIST
1221: LIST
1222: LIST
1223: LIST
1224: PUSH
1225: LD_INT 0
1227: PUSH
1228: LD_INT 4
1230: PUSH
1231: LD_INT 0
1233: PUSH
1234: LD_INT 0
1236: PUSH
1237: LD_INT 0
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: PUSH
1247: LD_INT 0
1249: PUSH
1250: LD_INT 0
1252: PUSH
1253: LD_INT 2
1255: PUSH
1256: LD_INT 0
1258: PUSH
1259: LD_INT 0
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: PUSH
1269: LD_INT 0
1271: PUSH
1272: LD_INT 0
1274: PUSH
1275: LD_INT 0
1277: PUSH
1278: LD_INT 3
1280: PUSH
1281: LD_INT 0
1283: PUSH
1284: EMPTY
1285: LIST
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: PUSH
1291: LD_INT 1
1293: PUSH
1294: LD_INT 2
1296: PUSH
1297: LD_INT 1
1299: PUSH
1300: LD_INT 2
1302: PUSH
1303: LD_INT 2
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: PUSH
1313: LD_INT 0
1315: PUSH
1316: LD_INT 0
1318: PUSH
1319: LD_INT 0
1321: PUSH
1322: LD_INT 0
1324: PUSH
1325: LD_INT 3
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: LIST
1341: LIST
1342: LIST
1343: PUSH
1344: LD_EXP 1
1348: PUSH
1349: LD_INT 1
1351: PLUS
1352: ARRAY
1353: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1354: LD_EXP 53
1358: PUSH
1359: LD_INT 0
1361: EQUAL
1362: IFFALSE 1374
// siberite_bomb_Delay = 0 else
1364: LD_ADDR_EXP 12
1368: PUSH
1369: LD_INT 0
1371: ST_TO_ADDR
1372: GO 1396
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1374: LD_ADDR_EXP 12
1378: PUSH
1379: LD_EXP 53
1383: PUSH
1384: LD_INT 1
1386: MINUS
1387: PUSH
1388: LD_INT 21000
1390: MUL
1391: PUSH
1392: LD_INT 1
1394: PLUS
1395: ST_TO_ADDR
// end ;
1396: LD_VAR 0 1
1400: RET
// function prepare_map_coordinates ; var side , dep , br1 , br2 , br3 , un , i , j ; begin
1401: LD_INT 0
1403: PPUSH
1404: PPUSH
1405: PPUSH
1406: PPUSH
1407: PPUSH
1408: PPUSH
1409: PPUSH
1410: PPUSH
1411: PPUSH
// depot_def = [ ] ;
1412: LD_ADDR_EXP 24
1416: PUSH
1417: EMPTY
1418: ST_TO_ADDR
// breastworks_def = [ ] ;
1419: LD_ADDR_EXP 25
1423: PUSH
1424: EMPTY
1425: ST_TO_ADDR
// for side := 1 to 4 do
1426: LD_ADDR_VAR 0 2
1430: PUSH
1431: DOUBLE
1432: LD_INT 1
1434: DEC
1435: ST_TO_ADDR
1436: LD_INT 4
1438: PUSH
1439: FOR_TO
1440: IFFALSE 1795
// begin dep := side * 4 - 3 ;
1442: LD_ADDR_VAR 0 3
1446: PUSH
1447: LD_VAR 0 2
1451: PUSH
1452: LD_INT 4
1454: MUL
1455: PUSH
1456: LD_INT 3
1458: MINUS
1459: ST_TO_ADDR
// br1 := side * 4 - 2 ;
1460: LD_ADDR_VAR 0 4
1464: PUSH
1465: LD_VAR 0 2
1469: PUSH
1470: LD_INT 4
1472: MUL
1473: PUSH
1474: LD_INT 2
1476: MINUS
1477: ST_TO_ADDR
// br2 := side * 4 - 1 ;
1478: LD_ADDR_VAR 0 5
1482: PUSH
1483: LD_VAR 0 2
1487: PUSH
1488: LD_INT 4
1490: MUL
1491: PUSH
1492: LD_INT 1
1494: MINUS
1495: ST_TO_ADDR
// br3 := side * 4 ;
1496: LD_ADDR_VAR 0 6
1500: PUSH
1501: LD_VAR 0 2
1505: PUSH
1506: LD_INT 4
1508: MUL
1509: ST_TO_ADDR
// depot_def := depot_def ^ [ [ GetX ( dep ) , GetY ( dep ) , GetDir ( dep ) ] ] ;
1510: LD_ADDR_EXP 24
1514: PUSH
1515: LD_EXP 24
1519: PUSH
1520: LD_VAR 0 3
1524: PPUSH
1525: CALL_OW 250
1529: PUSH
1530: LD_VAR 0 3
1534: PPUSH
1535: CALL_OW 251
1539: PUSH
1540: LD_VAR 0 3
1544: PPUSH
1545: CALL_OW 254
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: LIST
1554: PUSH
1555: EMPTY
1556: LIST
1557: ADD
1558: ST_TO_ADDR
// start_def := start_def ^ [ [ ShiftX ( GetX ( Dep ) , GetDir ( Dep ) , 6 ) , ShiftY ( GetY ( Dep ) , GetDir ( Dep ) , 6 ) ] ] ;
1559: LD_ADDR_EXP 26
1563: PUSH
1564: LD_EXP 26
1568: PUSH
1569: LD_VAR 0 3
1573: PPUSH
1574: CALL_OW 250
1578: PPUSH
1579: LD_VAR 0 3
1583: PPUSH
1584: CALL_OW 254
1588: PPUSH
1589: LD_INT 6
1591: PPUSH
1592: CALL_OW 272
1596: PUSH
1597: LD_VAR 0 3
1601: PPUSH
1602: CALL_OW 251
1606: PPUSH
1607: LD_VAR 0 3
1611: PPUSH
1612: CALL_OW 254
1616: PPUSH
1617: LD_INT 6
1619: PPUSH
1620: CALL_OW 273
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: PUSH
1629: EMPTY
1630: LIST
1631: ADD
1632: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ GetX ( br1 ) , GetY ( br1 ) , GetDir ( br1 ) ] , [ GetX ( br2 ) , GetY ( br2 ) , GetDir ( br2 ) ] , [ GetX ( br3 ) , GetY ( br3 ) , GetDir ( br3 ) ] ] ] ;
1633: LD_ADDR_EXP 25
1637: PUSH
1638: LD_EXP 25
1642: PUSH
1643: LD_VAR 0 4
1647: PPUSH
1648: CALL_OW 250
1652: PUSH
1653: LD_VAR 0 4
1657: PPUSH
1658: CALL_OW 251
1662: PUSH
1663: LD_VAR 0 4
1667: PPUSH
1668: CALL_OW 254
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: LIST
1677: PUSH
1678: LD_VAR 0 5
1682: PPUSH
1683: CALL_OW 250
1687: PUSH
1688: LD_VAR 0 5
1692: PPUSH
1693: CALL_OW 251
1697: PUSH
1698: LD_VAR 0 5
1702: PPUSH
1703: CALL_OW 254
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: LIST
1712: PUSH
1713: LD_VAR 0 6
1717: PPUSH
1718: CALL_OW 250
1722: PUSH
1723: LD_VAR 0 6
1727: PPUSH
1728: CALL_OW 251
1732: PUSH
1733: LD_VAR 0 6
1737: PPUSH
1738: CALL_OW 254
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: LIST
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: LIST
1752: PUSH
1753: EMPTY
1754: LIST
1755: ADD
1756: ST_TO_ADDR
// DestroyUnit ( dep ) ;
1757: LD_VAR 0 3
1761: PPUSH
1762: CALL_OW 65
// DestroyUnit ( br1 ) ;
1766: LD_VAR 0 4
1770: PPUSH
1771: CALL_OW 65
// DestroyUnit ( br2 ) ;
1775: LD_VAR 0 5
1779: PPUSH
1780: CALL_OW 65
// DestroyUnit ( br3 ) ;
1784: LD_VAR 0 6
1788: PPUSH
1789: CALL_OW 65
// end ;
1793: GO 1439
1795: POP
1796: POP
// normal_oil_deposits_locations := [ [ 28 , 15 ] , [ 102 , 17 ] , [ 50 , 84 ] , [ 143 , 111 ] ] ;
1797: LD_ADDR_EXP 28
1801: PUSH
1802: LD_INT 28
1804: PUSH
1805: LD_INT 15
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: PUSH
1812: LD_INT 102
1814: PUSH
1815: LD_INT 17
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: PUSH
1822: LD_INT 50
1824: PUSH
1825: LD_INT 84
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: LD_INT 143
1834: PUSH
1835: LD_INT 111
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PUSH
1842: EMPTY
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 28 , 15 ] , [ 52 , 44 ] ] , [ [ 102 , 17 ] , [ 84 , 37 ] ] , [ [ 50 , 84 ] , [ 74 , 81 ] ] , [ [ 143 , 111 ] , [ 106 , 77 ] ] , ] ;
1848: LD_ADDR_EXP 29
1852: PUSH
1853: LD_INT 28
1855: PUSH
1856: LD_INT 15
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: PUSH
1863: LD_INT 52
1865: PUSH
1866: LD_INT 44
1868: PUSH
1869: EMPTY
1870: LIST
1871: LIST
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 102
1879: PUSH
1880: LD_INT 17
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: LD_INT 84
1889: PUSH
1890: LD_INT 37
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: PUSH
1897: EMPTY
1898: LIST
1899: LIST
1900: PUSH
1901: LD_INT 50
1903: PUSH
1904: LD_INT 84
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: PUSH
1911: LD_INT 74
1913: PUSH
1914: LD_INT 81
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: PUSH
1925: LD_INT 143
1927: PUSH
1928: LD_INT 111
1930: PUSH
1931: EMPTY
1932: LIST
1933: LIST
1934: PUSH
1935: LD_INT 106
1937: PUSH
1938: LD_INT 77
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: PUSH
1945: EMPTY
1946: LIST
1947: LIST
1948: PUSH
1949: EMPTY
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 45 , 25 ] , [ 75 , 22 ] , [ 87 , 105 ] , [ 117 , 99 ] ] ;
1955: LD_ADDR_EXP 30
1959: PUSH
1960: LD_INT 45
1962: PUSH
1963: LD_INT 25
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: PUSH
1970: LD_INT 75
1972: PUSH
1973: LD_INT 22
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PUSH
1980: LD_INT 87
1982: PUSH
1983: LD_INT 105
1985: PUSH
1986: EMPTY
1987: LIST
1988: LIST
1989: PUSH
1990: LD_INT 117
1992: PUSH
1993: LD_INT 99
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: PUSH
2000: EMPTY
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: ST_TO_ADDR
// for i = 1 to Side_Positions do
2006: LD_ADDR_VAR 0 8
2010: PUSH
2011: DOUBLE
2012: LD_INT 1
2014: DEC
2015: ST_TO_ADDR
2016: LD_EXP 21
2020: PUSH
2021: FOR_TO
2022: IFFALSE 2201
// begin if not Side_Positions [ i ] then
2024: LD_EXP 21
2028: PUSH
2029: LD_VAR 0 8
2033: ARRAY
2034: NOT
2035: IFFALSE 2039
// continue ;
2037: GO 2021
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2039: LD_EXP 30
2043: PUSH
2044: LD_EXP 21
2048: PUSH
2049: LD_VAR 0 8
2053: ARRAY
2054: ARRAY
2055: PUSH
2056: LD_INT 1
2058: ARRAY
2059: PPUSH
2060: LD_EXP 30
2064: PUSH
2065: LD_EXP 21
2069: PUSH
2070: LD_VAR 0 8
2074: ARRAY
2075: ARRAY
2076: PUSH
2077: LD_INT 2
2079: ARRAY
2080: PPUSH
2081: LD_INT 3
2083: PPUSH
2084: CALL_OW 62
// if def_extra_oil_deposits then
2088: LD_EXP 46
2092: IFFALSE 2150
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2094: LD_ADDR_VAR 0 9
2098: PUSH
2099: LD_EXP 29
2103: PUSH
2104: LD_EXP 21
2108: PUSH
2109: LD_VAR 0 8
2113: ARRAY
2114: ARRAY
2115: PUSH
2116: FOR_IN
2117: IFFALSE 2146
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2119: LD_VAR 0 9
2123: PUSH
2124: LD_INT 1
2126: ARRAY
2127: PPUSH
2128: LD_VAR 0 9
2132: PUSH
2133: LD_INT 2
2135: ARRAY
2136: PPUSH
2137: LD_INT 2
2139: PPUSH
2140: CALL_OW 62
2144: GO 2116
2146: POP
2147: POP
2148: GO 2199
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2150: LD_EXP 28
2154: PUSH
2155: LD_EXP 21
2159: PUSH
2160: LD_VAR 0 8
2164: ARRAY
2165: ARRAY
2166: PUSH
2167: LD_INT 1
2169: ARRAY
2170: PPUSH
2171: LD_EXP 28
2175: PUSH
2176: LD_EXP 21
2180: PUSH
2181: LD_VAR 0 8
2185: ARRAY
2186: ARRAY
2187: PUSH
2188: LD_INT 2
2190: ARRAY
2191: PPUSH
2192: LD_INT 2
2194: PPUSH
2195: CALL_OW 62
// end ;
2199: GO 2021
2201: POP
2202: POP
// end ;
2203: LD_VAR 0 1
2207: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2208: LD_INT 0
2210: PPUSH
2211: PPUSH
2212: PPUSH
// if not Team_Game then
2213: LD_EXP 23
2217: NOT
2218: IFFALSE 2316
// begin for i = 1 to 8 do
2220: LD_ADDR_VAR 0 2
2224: PUSH
2225: DOUBLE
2226: LD_INT 1
2228: DEC
2229: ST_TO_ADDR
2230: LD_INT 8
2232: PUSH
2233: FOR_TO
2234: IFFALSE 2312
// for j = 1 to 8 do
2236: LD_ADDR_VAR 0 3
2240: PUSH
2241: DOUBLE
2242: LD_INT 1
2244: DEC
2245: ST_TO_ADDR
2246: LD_INT 8
2248: PUSH
2249: FOR_TO
2250: IFFALSE 2308
// if i <> j then
2252: LD_VAR 0 2
2256: PUSH
2257: LD_VAR 0 3
2261: NONEQUAL
2262: IFFALSE 2286
// SetAttitude ( i , j , att_neutral , true ) else
2264: LD_VAR 0 2
2268: PPUSH
2269: LD_VAR 0 3
2273: PPUSH
2274: LD_INT 0
2276: PPUSH
2277: LD_INT 1
2279: PPUSH
2280: CALL_OW 80
2284: GO 2306
// SetAttitude ( i , j , att_friend , true ) ;
2286: LD_VAR 0 2
2290: PPUSH
2291: LD_VAR 0 3
2295: PPUSH
2296: LD_INT 1
2298: PPUSH
2299: LD_INT 1
2301: PPUSH
2302: CALL_OW 80
2306: GO 2249
2308: POP
2309: POP
2310: GO 2233
2312: POP
2313: POP
// end else
2314: GO 2491
// begin if def_shared_vision then
2316: LD_EXP 48
2320: IFFALSE 2385
// begin for i in Teams do
2322: LD_ADDR_VAR 0 2
2326: PUSH
2327: LD_EXP 19
2331: PUSH
2332: FOR_IN
2333: IFFALSE 2383
// for j = 2 to i do
2335: LD_ADDR_VAR 0 3
2339: PUSH
2340: DOUBLE
2341: LD_INT 2
2343: DEC
2344: ST_TO_ADDR
2345: LD_VAR 0 2
2349: PUSH
2350: FOR_TO
2351: IFFALSE 2379
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2353: LD_VAR 0 2
2357: PUSH
2358: LD_VAR 0 3
2362: ARRAY
2363: PPUSH
2364: LD_VAR 0 2
2368: PUSH
2369: LD_INT 1
2371: ARRAY
2372: PPUSH
2373: CALL_OW 343
2377: GO 2350
2379: POP
2380: POP
2381: GO 2332
2383: POP
2384: POP
// end ; for i = 1 to 8 do
2385: LD_ADDR_VAR 0 2
2389: PUSH
2390: DOUBLE
2391: LD_INT 1
2393: DEC
2394: ST_TO_ADDR
2395: LD_INT 8
2397: PUSH
2398: FOR_TO
2399: IFFALSE 2489
// for j = 1 to 8 do
2401: LD_ADDR_VAR 0 3
2405: PUSH
2406: DOUBLE
2407: LD_INT 1
2409: DEC
2410: ST_TO_ADDR
2411: LD_INT 8
2413: PUSH
2414: FOR_TO
2415: IFFALSE 2485
// if Side_Teams [ i ] = Side_Teams [ j ] then
2417: LD_EXP 18
2421: PUSH
2422: LD_VAR 0 2
2426: ARRAY
2427: PUSH
2428: LD_EXP 18
2432: PUSH
2433: LD_VAR 0 3
2437: ARRAY
2438: EQUAL
2439: IFFALSE 2463
// SetAttitude ( i , j , att_friend , true ) else
2441: LD_VAR 0 2
2445: PPUSH
2446: LD_VAR 0 3
2450: PPUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 1
2456: PPUSH
2457: CALL_OW 80
2461: GO 2483
// SetAttitude ( i , j , att_enemy , true ) ;
2463: LD_VAR 0 2
2467: PPUSH
2468: LD_VAR 0 3
2472: PPUSH
2473: LD_INT 2
2475: PPUSH
2476: LD_INT 1
2478: PPUSH
2479: CALL_OW 80
2483: GO 2414
2485: POP
2486: POP
2487: GO 2398
2489: POP
2490: POP
// end ; end ;
2491: LD_VAR 0 1
2495: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2496: LD_INT 0
2498: PPUSH
2499: PPUSH
2500: PPUSH
2501: PPUSH
// result := [ ] ;
2502: LD_ADDR_VAR 0 7
2506: PUSH
2507: EMPTY
2508: ST_TO_ADDR
// for i := 1 to count do
2509: LD_ADDR_VAR 0 8
2513: PUSH
2514: DOUBLE
2515: LD_INT 1
2517: DEC
2518: ST_TO_ADDR
2519: LD_VAR 0 1
2523: PUSH
2524: FOR_TO
2525: IFFALSE 2943
// begin uc_direction := Rand ( 0 , 5 ) ;
2527: LD_ADDR_OWVAR 24
2531: PUSH
2532: LD_INT 0
2534: PPUSH
2535: LD_INT 5
2537: PPUSH
2538: CALL_OW 12
2542: ST_TO_ADDR
// if commander then
2543: LD_LOC 1
2547: IFFALSE 2656
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2549: LD_ADDR_OWVAR 26
2553: PUSH
2554: LD_OWVAR 19
2558: PUSH
2559: LD_OWVAR 20
2563: ARRAY
2564: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2565: LD_INT 1
2567: PPUSH
2568: LD_INT 2
2570: PPUSH
2571: CALL_OW 12
2575: PPUSH
2576: LD_VAR 0 2
2580: PPUSH
2581: LD_EXP 5
2585: PUSH
2586: LD_INT 2
2588: PLUS
2589: PPUSH
2590: CALL_OW 380
// hc_importance := 105 ;
2594: LD_ADDR_OWVAR 32
2598: PUSH
2599: LD_INT 105
2601: ST_TO_ADDR
// commander := false ;
2602: LD_ADDR_LOC 1
2606: PUSH
2607: LD_INT 0
2609: ST_TO_ADDR
// if Multiplayer then
2610: LD_OWVAR 4
2614: IFFALSE 2654
// begin hc_gallery := MULTIAVATARS ;
2616: LD_ADDR_OWVAR 33
2620: PUSH
2621: LD_STRING MULTIAVATARS
2623: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2624: LD_ADDR_OWVAR 34
2628: PUSH
2629: LD_OWVAR 20
2633: PPUSH
2634: CALL_OW 525
2638: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2639: LD_ADDR_OWVAR 27
2643: PUSH
2644: LD_OWVAR 20
2648: PPUSH
2649: CALL_OW 526
2653: ST_TO_ADDR
// end ; end else
2654: GO 2719
// begin hc_name :=  ;
2656: LD_ADDR_OWVAR 26
2660: PUSH
2661: LD_STRING 
2663: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2664: LD_INT 1
2666: PPUSH
2667: LD_INT 2
2669: PPUSH
2670: CALL_OW 12
2674: PPUSH
2675: LD_VAR 0 2
2679: PPUSH
2680: LD_EXP 5
2684: PPUSH
2685: CALL_OW 380
// hc_importance := 0 ;
2689: LD_ADDR_OWVAR 32
2693: PUSH
2694: LD_INT 0
2696: ST_TO_ADDR
// if Multiplayer then
2697: LD_OWVAR 4
2701: IFFALSE 2719
// begin hc_gallery :=  ;
2703: LD_ADDR_OWVAR 33
2707: PUSH
2708: LD_STRING 
2710: ST_TO_ADDR
// hc_face_number := 0 ;
2711: LD_ADDR_OWVAR 34
2715: PUSH
2716: LD_INT 0
2718: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2719: LD_ADDR_VAR 0 10
2723: PUSH
2724: CALL_OW 44
2728: ST_TO_ADDR
// if global_defined then
2729: LD_LOC 3
2733: IFFALSE 2873
// begin if ( cl = class_soldier ) then
2735: LD_VAR 0 2
2739: PUSH
2740: LD_INT 1
2742: EQUAL
2743: IFFALSE 2763
// j := i + soldiers_created else
2745: LD_ADDR_VAR 0 9
2749: PUSH
2750: LD_VAR 0 8
2754: PUSH
2755: LD_LOC 4
2759: PLUS
2760: ST_TO_ADDR
2761: GO 2773
// j := i ;
2763: LD_ADDR_VAR 0 9
2767: PUSH
2768: LD_VAR 0 8
2772: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2773: LD_LOC 2
2777: PUSH
2778: LD_VAR 0 2
2782: ARRAY
2783: PUSH
2784: LD_VAR 0 9
2788: ARRAY
2789: PPUSH
2790: LD_VAR 0 10
2794: PPUSH
2795: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2799: LD_VAR 0 10
2803: PPUSH
2804: LD_INT 2
2806: PPUSH
2807: LD_LOC 2
2811: PUSH
2812: LD_VAR 0 2
2816: ARRAY
2817: PUSH
2818: LD_VAR 0 9
2822: ARRAY
2823: PPUSH
2824: LD_INT 2
2826: PPUSH
2827: CALL_OW 260
2831: PPUSH
2832: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2836: LD_VAR 0 10
2840: PPUSH
2841: LD_INT 1
2843: PPUSH
2844: LD_LOC 2
2848: PUSH
2849: LD_VAR 0 2
2853: ARRAY
2854: PUSH
2855: LD_VAR 0 9
2859: ARRAY
2860: PPUSH
2861: LD_INT 1
2863: PPUSH
2864: CALL_OW 260
2868: PPUSH
2869: CALL_OW 239
// end ; if building then
2873: LD_VAR 0 6
2877: IFFALSE 2895
// PlaceHumanInUnit ( un , building ) else
2879: LD_VAR 0 10
2883: PPUSH
2884: LD_VAR 0 6
2888: PPUSH
2889: CALL_OW 52
2893: GO 2922
// PlaceUnitXYR ( un , x , y , r , false ) ;
2895: LD_VAR 0 10
2899: PPUSH
2900: LD_VAR 0 3
2904: PPUSH
2905: LD_VAR 0 4
2909: PPUSH
2910: LD_VAR 0 5
2914: PPUSH
2915: LD_INT 0
2917: PPUSH
2918: CALL_OW 50
// result := result ^ [ un ] ;
2922: LD_ADDR_VAR 0 7
2926: PUSH
2927: LD_VAR 0 7
2931: PUSH
2932: LD_VAR 0 10
2936: PUSH
2937: EMPTY
2938: LIST
2939: ADD
2940: ST_TO_ADDR
// end ;
2941: GO 2524
2943: POP
2944: POP
// if not global_defined then
2945: LD_LOC 3
2949: NOT
2950: IFFALSE 3028
// if ( global_units >= cl ) then
2952: LD_LOC 2
2956: PUSH
2957: LD_VAR 0 2
2961: GREATEREQUAL
2962: IFFALSE 3003
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2964: LD_ADDR_LOC 2
2968: PUSH
2969: LD_LOC 2
2973: PPUSH
2974: LD_VAR 0 2
2978: PPUSH
2979: LD_LOC 2
2983: PUSH
2984: LD_VAR 0 2
2988: ARRAY
2989: PUSH
2990: LD_VAR 0 7
2994: ADD
2995: PPUSH
2996: CALL_OW 1
3000: ST_TO_ADDR
3001: GO 3028
// global_units := Replace ( global_units , cl , result ) ;
3003: LD_ADDR_LOC 2
3007: PUSH
3008: LD_LOC 2
3012: PPUSH
3013: LD_VAR 0 2
3017: PPUSH
3018: LD_VAR 0 7
3022: PPUSH
3023: CALL_OW 1
3027: ST_TO_ADDR
// if commander then
3028: LD_LOC 1
3032: IFFALSE 3079
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3034: LD_ADDR_EXP 31
3038: PUSH
3039: LD_EXP 31
3043: PPUSH
3044: LD_OWVAR 20
3048: PPUSH
3049: LD_EXP 31
3053: PUSH
3054: LD_OWVAR 20
3058: ARRAY
3059: PUSH
3060: LD_VAR 0 10
3064: ADD
3065: PPUSH
3066: CALL_OW 1
3070: ST_TO_ADDR
// commander := false ;
3071: LD_ADDR_LOC 1
3075: PUSH
3076: LD_INT 0
3078: ST_TO_ADDR
// end ; end ;
3079: LD_VAR 0 7
3083: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3084: LD_INT 0
3086: PPUSH
3087: PPUSH
3088: PPUSH
3089: PPUSH
3090: PPUSH
3091: PPUSH
3092: PPUSH
3093: PPUSH
3094: PPUSH
// if side in [ 0 , 9 ] then
3095: LD_VAR 0 1
3099: PUSH
3100: LD_INT 0
3102: PUSH
3103: LD_INT 9
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: IN
3110: IFFALSE 3114
// exit ;
3112: GO 4164
// pos := Side_Positions [ side ] ;
3114: LD_ADDR_VAR 0 3
3118: PUSH
3119: LD_EXP 21
3123: PUSH
3124: LD_VAR 0 1
3128: ARRAY
3129: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3130: LD_ADDR_OWVAR 21
3134: PUSH
3135: LD_EXP 22
3139: PUSH
3140: LD_VAR 0 1
3144: ARRAY
3145: ST_TO_ADDR
// uc_side := side ;
3146: LD_ADDR_OWVAR 20
3150: PUSH
3151: LD_VAR 0 1
3155: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3156: LD_ADDR_VAR 0 4
3160: PUSH
3161: LD_EXP 24
3165: PUSH
3166: LD_VAR 0 3
3170: ARRAY
3171: PUSH
3172: LD_INT 1
3174: ARRAY
3175: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3176: LD_ADDR_VAR 0 5
3180: PUSH
3181: LD_EXP 24
3185: PUSH
3186: LD_VAR 0 3
3190: ARRAY
3191: PUSH
3192: LD_INT 2
3194: ARRAY
3195: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3196: LD_ADDR_VAR 0 6
3200: PUSH
3201: LD_EXP 24
3205: PUSH
3206: LD_VAR 0 3
3210: ARRAY
3211: PUSH
3212: LD_INT 3
3214: ARRAY
3215: ST_TO_ADDR
// if is_depot then
3216: LD_EXP 2
3220: IFFALSE 3353
// begin bc_type = b_depot ;
3222: LD_ADDR_OWVAR 42
3226: PUSH
3227: LD_INT 0
3229: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3230: LD_ADDR_VAR 0 10
3234: PUSH
3235: LD_VAR 0 4
3239: PPUSH
3240: LD_VAR 0 5
3244: PPUSH
3245: LD_VAR 0 6
3249: PPUSH
3250: CALL_OW 47
3254: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3255: LD_VAR 0 10
3259: PPUSH
3260: LD_STRING @
3262: PUSH
3263: LD_VAR 0 1
3267: STR
3268: PPUSH
3269: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3273: LD_VAR 0 10
3277: PPUSH
3278: CALL_OW 274
3282: PPUSH
3283: LD_INT 1
3285: PPUSH
3286: LD_EXP 7
3290: PUSH
3291: LD_INT 1
3293: ARRAY
3294: PPUSH
3295: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3299: LD_VAR 0 10
3303: PPUSH
3304: CALL_OW 274
3308: PPUSH
3309: LD_INT 2
3311: PPUSH
3312: LD_EXP 7
3316: PUSH
3317: LD_INT 2
3319: ARRAY
3320: PPUSH
3321: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3325: LD_VAR 0 10
3329: PPUSH
3330: CALL_OW 274
3334: PPUSH
3335: LD_INT 3
3337: PPUSH
3338: LD_EXP 7
3342: PUSH
3343: LD_INT 3
3345: ARRAY
3346: PPUSH
3347: CALL_OW 277
// end else
3351: GO 3497
// begin for i := 1 to 3 do
3353: LD_ADDR_VAR 0 7
3357: PUSH
3358: DOUBLE
3359: LD_INT 1
3361: DEC
3362: ST_TO_ADDR
3363: LD_INT 3
3365: PUSH
3366: FOR_TO
3367: IFFALSE 3495
// begin r := starting_resources [ i ] ;
3369: LD_ADDR_VAR 0 8
3373: PUSH
3374: LD_EXP 7
3378: PUSH
3379: LD_VAR 0 7
3383: ARRAY
3384: ST_TO_ADDR
// while r >= 10 do
3385: LD_VAR 0 8
3389: PUSH
3390: LD_INT 10
3392: GREATEREQUAL
3393: IFFALSE 3493
// if r > 50 then
3395: LD_VAR 0 8
3399: PUSH
3400: LD_INT 50
3402: GREATER
3403: IFFALSE 3449
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3405: LD_VAR 0 7
3409: PPUSH
3410: LD_INT 5
3412: PPUSH
3413: LD_VAR 0 4
3417: PPUSH
3418: LD_VAR 0 5
3422: PPUSH
3423: LD_INT 4
3425: PPUSH
3426: LD_INT 0
3428: PPUSH
3429: CALL_OW 60
// r := r - 50 ;
3433: LD_ADDR_VAR 0 8
3437: PUSH
3438: LD_VAR 0 8
3442: PUSH
3443: LD_INT 50
3445: MINUS
3446: ST_TO_ADDR
// end else
3447: GO 3491
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3449: LD_VAR 0 7
3453: PPUSH
3454: LD_VAR 0 8
3458: PUSH
3459: LD_INT 10
3461: DIV
3462: PPUSH
3463: LD_VAR 0 4
3467: PPUSH
3468: LD_VAR 0 5
3472: PPUSH
3473: LD_INT 4
3475: PPUSH
3476: LD_INT 0
3478: PPUSH
3479: CALL_OW 60
// r := 0 ;
3483: LD_ADDR_VAR 0 8
3487: PUSH
3488: LD_INT 0
3490: ST_TO_ADDR
// end ;
3491: GO 3385
// end ;
3493: GO 3366
3495: POP
3496: POP
// end ; for r in starting_crates do
3497: LD_ADDR_VAR 0 8
3501: PUSH
3502: LD_EXP 6
3506: PUSH
3507: FOR_IN
3508: IFFALSE 3540
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3510: LD_INT 1
3512: PPUSH
3513: LD_INT 5
3515: PPUSH
3516: LD_VAR 0 4
3520: PPUSH
3521: LD_VAR 0 5
3525: PPUSH
3526: LD_VAR 0 8
3530: PPUSH
3531: LD_INT 0
3533: PPUSH
3534: CALL_OW 60
3538: GO 3507
3540: POP
3541: POP
// if def_morale_flags then
3542: LD_EXP 49
3546: IFFALSE 3685
// begin x := start_def [ pos ] [ 1 ] ;
3548: LD_ADDR_VAR 0 4
3552: PUSH
3553: LD_EXP 26
3557: PUSH
3558: LD_VAR 0 3
3562: ARRAY
3563: PUSH
3564: LD_INT 1
3566: ARRAY
3567: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3568: LD_ADDR_VAR 0 5
3572: PUSH
3573: LD_EXP 26
3577: PUSH
3578: LD_VAR 0 3
3582: ARRAY
3583: PUSH
3584: LD_INT 2
3586: ARRAY
3587: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3588: LD_VAR 0 4
3592: PPUSH
3593: LD_VAR 0 5
3597: PPUSH
3598: LD_INT 12
3600: PPUSH
3601: LD_INT 2
3603: PPUSH
3604: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3608: LD_ADDR_EXP 27
3612: PUSH
3613: LD_EXP 27
3617: PUSH
3618: LD_VAR 0 1
3622: PPUSH
3623: LD_VAR 0 4
3627: PPUSH
3628: LD_VAR 0 5
3632: PPUSH
3633: LD_INT 1
3635: PUSH
3636: LD_INT 100
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: PUSH
3643: LD_INT 2
3645: PUSH
3646: LD_INT 50
3648: PUSH
3649: EMPTY
3650: LIST
3651: LIST
3652: PUSH
3653: LD_INT 3
3655: PUSH
3656: LD_INT 20
3658: PUSH
3659: EMPTY
3660: LIST
3661: LIST
3662: PUSH
3663: LD_INT 20
3665: PUSH
3666: LD_INT 100
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: LIST
3677: LIST
3678: PPUSH
3679: CALL_OW 418
3683: ADD
3684: ST_TO_ADDR
// end ; commander := true ;
3685: LD_ADDR_LOC 1
3689: PUSH
3690: LD_INT 1
3692: ST_TO_ADDR
// soldiers_created := 0 ;
3693: LD_ADDR_LOC 4
3697: PUSH
3698: LD_INT 0
3700: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3701: LD_ADDR_VAR 0 7
3705: PUSH
3706: DOUBLE
3707: LD_INT 1
3709: DEC
3710: ST_TO_ADDR
3711: LD_EXP 3
3715: PUSH
3716: FOR_TO
3717: IFFALSE 3870
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3719: LD_ADDR_VAR 0 4
3723: PUSH
3724: LD_EXP 25
3728: PUSH
3729: LD_VAR 0 3
3733: ARRAY
3734: PUSH
3735: LD_VAR 0 7
3739: ARRAY
3740: PUSH
3741: LD_INT 1
3743: ARRAY
3744: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3745: LD_ADDR_VAR 0 5
3749: PUSH
3750: LD_EXP 25
3754: PUSH
3755: LD_VAR 0 3
3759: ARRAY
3760: PUSH
3761: LD_VAR 0 7
3765: ARRAY
3766: PUSH
3767: LD_INT 2
3769: ARRAY
3770: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3771: LD_ADDR_VAR 0 6
3775: PUSH
3776: LD_EXP 25
3780: PUSH
3781: LD_VAR 0 3
3785: ARRAY
3786: PUSH
3787: LD_VAR 0 7
3791: ARRAY
3792: PUSH
3793: LD_INT 3
3795: ARRAY
3796: ST_TO_ADDR
// bc_type := b_breastwork ;
3797: LD_ADDR_OWVAR 42
3801: PUSH
3802: LD_INT 31
3804: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3805: LD_ADDR_VAR 0 9
3809: PUSH
3810: LD_VAR 0 4
3814: PPUSH
3815: LD_VAR 0 5
3819: PPUSH
3820: LD_VAR 0 6
3824: PPUSH
3825: CALL_OW 47
3829: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3830: LD_INT 1
3832: PPUSH
3833: LD_INT 1
3835: PPUSH
3836: LD_INT 0
3838: PPUSH
3839: LD_INT 0
3841: PPUSH
3842: LD_INT 0
3844: PPUSH
3845: LD_VAR 0 9
3849: PPUSH
3850: CALL 2496 0 6
// soldiers_created := soldiers_created + 1 ;
3854: LD_ADDR_LOC 4
3858: PUSH
3859: LD_LOC 4
3863: PUSH
3864: LD_INT 1
3866: PLUS
3867: ST_TO_ADDR
// end ;
3868: GO 3716
3870: POP
3871: POP
// x := start_def [ pos ] [ 1 ] ;
3872: LD_ADDR_VAR 0 4
3876: PUSH
3877: LD_EXP 26
3881: PUSH
3882: LD_VAR 0 3
3886: ARRAY
3887: PUSH
3888: LD_INT 1
3890: ARRAY
3891: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3892: LD_ADDR_VAR 0 5
3896: PUSH
3897: LD_EXP 26
3901: PUSH
3902: LD_VAR 0 3
3906: ARRAY
3907: PUSH
3908: LD_INT 2
3910: ARRAY
3911: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3912: LD_LOC 8
3916: PUSH
3917: LD_EXP 3
3921: MINUS
3922: PPUSH
3923: LD_INT 1
3925: PPUSH
3926: LD_VAR 0 4
3930: PPUSH
3931: LD_VAR 0 5
3935: PPUSH
3936: LD_INT 5
3938: PPUSH
3939: LD_INT 0
3941: PPUSH
3942: CALL 2496 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3946: LD_LOC 5
3950: PPUSH
3951: LD_INT 2
3953: PPUSH
3954: LD_VAR 0 4
3958: PPUSH
3959: LD_VAR 0 5
3963: PPUSH
3964: LD_INT 5
3966: PPUSH
3967: LD_INT 0
3969: PPUSH
3970: CALL 2496 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3974: LD_LOC 7
3978: PPUSH
3979: LD_INT 3
3981: PPUSH
3982: LD_VAR 0 4
3986: PPUSH
3987: LD_VAR 0 5
3991: PPUSH
3992: LD_INT 5
3994: PPUSH
3995: LD_INT 0
3997: PPUSH
3998: CALL 2496 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4002: LD_LOC 6
4006: PPUSH
4007: LD_INT 4
4009: PPUSH
4010: LD_VAR 0 4
4014: PPUSH
4015: LD_VAR 0 5
4019: PPUSH
4020: LD_INT 5
4022: PPUSH
4023: LD_INT 0
4025: PPUSH
4026: CALL 2496 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4030: LD_EXP 50
4034: PUSH
4035: LD_INT 20
4037: PPUSH
4038: LD_VAR 0 1
4042: PPUSH
4043: CALL_OW 321
4047: PUSH
4048: LD_INT 1
4050: EQUAL
4051: AND
4052: IFFALSE 4069
// SetTech ( tech_SibDet , side , state_researched ) ;
4054: LD_INT 20
4056: PPUSH
4057: LD_VAR 0 1
4061: PPUSH
4062: LD_INT 2
4064: PPUSH
4065: CALL_OW 322
// if def_siberite_bomb = 1 then
4069: LD_EXP 53
4073: PUSH
4074: LD_INT 1
4076: EQUAL
4077: IFFALSE 4111
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4079: LD_INT 25
4081: PPUSH
4082: LD_VAR 0 1
4086: PPUSH
4087: LD_INT 1
4089: PPUSH
4090: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4094: LD_INT 73
4096: PPUSH
4097: LD_VAR 0 1
4101: PPUSH
4102: LD_INT 1
4104: PPUSH
4105: CALL_OW 322
// end else
4109: GO 4141
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4111: LD_INT 25
4113: PPUSH
4114: LD_VAR 0 1
4118: PPUSH
4119: LD_INT 0
4121: PPUSH
4122: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4126: LD_INT 73
4128: PPUSH
4129: LD_VAR 0 1
4133: PPUSH
4134: LD_INT 0
4136: PPUSH
4137: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4141: LD_INT 24
4143: PPUSH
4144: LD_VAR 0 1
4148: PPUSH
4149: LD_INT 0
4151: PPUSH
4152: CALL_OW 322
// global_defined := true ;
4156: LD_ADDR_LOC 3
4160: PUSH
4161: LD_INT 1
4163: ST_TO_ADDR
// end ;
4164: LD_VAR 0 2
4168: RET
// every 0 0$1 do
4169: GO 4171
4171: DISABLE
// if ( def_siberite_bomb > 1 ) then
4172: LD_EXP 53
4176: PUSH
4177: LD_INT 1
4179: GREATER
4180: IFFALSE 4195
// begin wait ( siberite_bomb_Delay ) ;
4182: LD_EXP 12
4186: PPUSH
4187: CALL_OW 67
// EnableSibFiss ;
4191: CALL 4196 0 0
// end ;
4195: END
// function EnableSibFiss ; var i ; begin
4196: LD_INT 0
4198: PPUSH
4199: PPUSH
// for i := 1 to 8 do
4200: LD_ADDR_VAR 0 2
4204: PUSH
4205: DOUBLE
4206: LD_INT 1
4208: DEC
4209: ST_TO_ADDR
4210: LD_INT 8
4212: PUSH
4213: FOR_TO
4214: IFFALSE 4260
// if Side_Positions [ i ] then
4216: LD_EXP 21
4220: PUSH
4221: LD_VAR 0 2
4225: ARRAY
4226: IFFALSE 4258
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4228: LD_INT 25
4230: PPUSH
4231: LD_VAR 0 2
4235: PPUSH
4236: LD_INT 1
4238: PPUSH
4239: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4243: LD_INT 73
4245: PPUSH
4246: LD_VAR 0 2
4250: PPUSH
4251: LD_INT 1
4253: PPUSH
4254: CALL_OW 322
// end ;
4258: GO 4213
4260: POP
4261: POP
// end ;
4262: LD_VAR 0 1
4266: RET
// function prepare_sides ; var i ; begin
4267: LD_INT 0
4269: PPUSH
4270: PPUSH
// global_units := [ ] ;
4271: LD_ADDR_LOC 2
4275: PUSH
4276: EMPTY
4277: ST_TO_ADDR
// global_defined := false ;
4278: LD_ADDR_LOC 3
4282: PUSH
4283: LD_INT 0
4285: ST_TO_ADDR
// CountClassMembers ;
4286: CALL 4336 0 0
// for i := 1 to 8 do
4290: LD_ADDR_VAR 0 2
4294: PUSH
4295: DOUBLE
4296: LD_INT 1
4298: DEC
4299: ST_TO_ADDR
4300: LD_INT 8
4302: PUSH
4303: FOR_TO
4304: IFFALSE 4329
// if Side_Positions [ i ] then
4306: LD_EXP 21
4310: PUSH
4311: LD_VAR 0 2
4315: ARRAY
4316: IFFALSE 4327
// prepare_side ( i ) ;
4318: LD_VAR 0 2
4322: PPUSH
4323: CALL 3084 0 1
4327: GO 4303
4329: POP
4330: POP
// end ;
4331: LD_VAR 0 1
4335: RET
// function CountClassMembers ; var Mode ; begin
4336: LD_INT 0
4338: PPUSH
4339: PPUSH
// if No_Mechs then
4340: LD_EXP 55
4344: IFFALSE 4356
// Mode := 2 else
4346: LD_ADDR_VAR 0 2
4350: PUSH
4351: LD_INT 2
4353: ST_TO_ADDR
4354: GO 4364
// Mode := 1 ;
4356: LD_ADDR_VAR 0 2
4360: PUSH
4361: LD_INT 1
4363: ST_TO_ADDR
// neng := number_of_people ;
4364: LD_ADDR_LOC 5
4368: PUSH
4369: LD_EXP 4
4373: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4374: LD_ADDR_LOC 8
4378: PUSH
4379: LD_LOC 5
4383: PUSH
4384: LD_INT 4
4386: PUSH
4387: LD_INT 3
4389: PUSH
4390: EMPTY
4391: LIST
4392: LIST
4393: PUSH
4394: LD_VAR 0 2
4398: ARRAY
4399: DIV
4400: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4401: LD_LOC 8
4405: PUSH
4406: LD_EXP 3
4410: LESS
4411: IFFALSE 4423
// nsol := number_of_breastworks ;
4413: LD_ADDR_LOC 8
4417: PUSH
4418: LD_EXP 3
4422: ST_TO_ADDR
// neng := neng - nsol ;
4423: LD_ADDR_LOC 5
4427: PUSH
4428: LD_LOC 5
4432: PUSH
4433: LD_LOC 8
4437: MINUS
4438: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4439: LD_ADDR_LOC 6
4443: PUSH
4444: LD_LOC 5
4448: PUSH
4449: LD_INT 3
4451: PUSH
4452: LD_INT 2
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: PUSH
4459: LD_VAR 0 2
4463: ARRAY
4464: DIV
4465: ST_TO_ADDR
// if ( nsci < 1 ) then
4466: LD_LOC 6
4470: PUSH
4471: LD_INT 1
4473: LESS
4474: IFFALSE 4484
// nsci := 1 ;
4476: LD_ADDR_LOC 6
4480: PUSH
4481: LD_INT 1
4483: ST_TO_ADDR
// neng := neng - nsci ;
4484: LD_ADDR_LOC 5
4488: PUSH
4489: LD_LOC 5
4493: PUSH
4494: LD_LOC 6
4498: MINUS
4499: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4500: LD_ADDR_LOC 7
4504: PUSH
4505: LD_LOC 5
4509: PUSH
4510: LD_INT 2
4512: DIV
4513: PUSH
4514: LD_INT 0
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: PUSH
4521: LD_VAR 0 2
4525: ARRAY
4526: ST_TO_ADDR
// neng := neng - nmech ;
4527: LD_ADDR_LOC 5
4531: PUSH
4532: LD_LOC 5
4536: PUSH
4537: LD_LOC 7
4541: MINUS
4542: ST_TO_ADDR
// if ( neng < 1 ) then
4543: LD_LOC 5
4547: PUSH
4548: LD_INT 1
4550: LESS
4551: IFFALSE 4561
// neng := 1 ;
4553: LD_ADDR_LOC 5
4557: PUSH
4558: LD_INT 1
4560: ST_TO_ADDR
// end ;
4561: LD_VAR 0 1
4565: RET
// starting begin disable ( 98 ) ;
4566: LD_INT 98
4568: DISABLE_MARKED
// disable ( 99 ) ;
4569: LD_INT 99
4571: DISABLE_MARKED
// disable ( 400 ) ;
4572: LD_INT 400
4574: DISABLE_MARKED
// disable ( 401 ) ;
4575: LD_INT 401
4577: DISABLE_MARKED
// disable ( 600 ) ;
4578: LD_INT 600
4580: DISABLE_MARKED
// mp_selectmsg := true ;
4581: LD_ADDR_OWVAR 13
4585: PUSH
4586: LD_INT 1
4588: ST_TO_ADDR
// bonus_gained := [ ] ;
4589: LD_ADDR_EXP 16
4593: PUSH
4594: EMPTY
4595: ST_TO_ADDR
// activated := false ;
4596: LD_ADDR_EXP 17
4600: PUSH
4601: LD_INT 0
4603: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4604: CALL 68 0 0
// prepare_map_coordinates ;
4608: CALL 1401 0 0
// set_shared_visions_and_alliances ;
4612: CALL 2208 0 0
// ResetFog ;
4616: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4620: LD_OWVAR 2
4624: PPUSH
4625: CALL_OW 520
// prepare_sides ;
4629: CALL 4267 0 0
// init_respawning ;
4633: CALL 17092 0 0
// Init_Win_Condition ;
4637: CALL 15242 0 0
// InitLimits ;
4641: CALL 9688 0 0
// ShowTimer ;
4645: CALL 10625 0 0
// music_nat := Side_Nations [ your_side ] ;
4649: LD_ADDR_OWVAR 71
4653: PUSH
4654: LD_EXP 22
4658: PUSH
4659: LD_OWVAR 2
4663: ARRAY
4664: ST_TO_ADDR
// if IAmSpec then
4665: CALL_OW 531
4669: IFFALSE 4693
// begin fogoff ( true ) ;
4671: LD_INT 1
4673: PPUSH
4674: CALL_OW 344
// CenterNowOnXY ( 79 , 59 ) ;
4678: LD_INT 79
4680: PPUSH
4681: LD_INT 59
4683: PPUSH
4684: CALL_OW 86
// enable ( 400 ) ;
4688: LD_INT 400
4690: ENABLE_MARKED
// end else
4691: GO 4739
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4693: LD_EXP 26
4697: PUSH
4698: LD_EXP 21
4702: PUSH
4703: LD_OWVAR 2
4707: ARRAY
4708: ARRAY
4709: PUSH
4710: LD_INT 1
4712: ARRAY
4713: PPUSH
4714: LD_EXP 26
4718: PUSH
4719: LD_EXP 21
4723: PUSH
4724: LD_OWVAR 2
4728: ARRAY
4729: ARRAY
4730: PUSH
4731: LD_INT 2
4733: ARRAY
4734: PPUSH
4735: CALL_OW 86
// end ; AnimateTrees ( true ) ;
4739: LD_INT 1
4741: PPUSH
4742: CALL_OW 573
// InitApeman ;
4746: CALL 4969 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] ;
4750: LD_ADDR_EXP 58
4754: PUSH
4755: LD_INT 8
4757: PUSH
4758: LD_INT 11
4760: PUSH
4761: LD_INT 9
4763: PUSH
4764: LD_INT 10
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: ST_TO_ADDR
// BeginBuildUp ;
4773: CALL 17586 0 0
// end ; end_of_file
4777: END
// every 20 20$00 trigger apemanNumber do
4778: LD_EXP 32
4782: IFFALSE 4815
4784: GO 4786
4786: DISABLE
// begin enable ;
4787: ENABLE
// if apeLevel >= 8 then
4788: LD_EXP 37
4792: PUSH
4793: LD_INT 8
4795: GREATEREQUAL
4796: IFFALSE 4801
// disable else
4798: DISABLE
4799: GO 4815
// apeLevel := apeLevel + 1 ;
4801: LD_ADDR_EXP 37
4805: PUSH
4806: LD_EXP 37
4810: PUSH
4811: LD_INT 1
4813: PLUS
4814: ST_TO_ADDR
// end ;
4815: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
4816: LD_EXP 32
4820: PUSH
4821: LD_EXP 33
4825: LESS
4826: IFFALSE 4966
4828: GO 4830
4830: DISABLE
4831: LD_INT 0
4833: PPUSH
4834: PPUSH
4835: PPUSH
4836: PPUSH
// begin enable ;
4837: ENABLE
// for i := 1 to apemanPos do
4838: LD_ADDR_VAR 0 1
4842: PUSH
4843: DOUBLE
4844: LD_INT 1
4846: DEC
4847: ST_TO_ADDR
4848: LD_EXP 35
4852: PUSH
4853: FOR_TO
4854: IFFALSE 4964
// begin if apemanPlayerCount [ i ] then
4856: LD_EXP 36
4860: PUSH
4861: LD_VAR 0 1
4865: ARRAY
4866: IFFALSE 4962
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
4868: LD_EXP 36
4872: PUSH
4873: LD_VAR 0 1
4877: ARRAY
4878: PUSH
4879: LD_EXP 35
4883: PUSH
4884: LD_VAR 0 1
4888: ARRAY
4889: GREATER
4890: IFFALSE 4962
// begin ape := PrepareApeman ;
4892: LD_ADDR_VAR 0 2
4896: PUSH
4897: CALL 5469 0 0
4901: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
4902: LD_VAR 0 2
4906: PPUSH
4907: LD_EXP 38
4911: PUSH
4912: LD_VAR 0 1
4916: ARRAY
4917: PPUSH
4918: LD_INT 0
4920: PPUSH
4921: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
4925: LD_ADDR_EXP 35
4929: PUSH
4930: LD_EXP 35
4934: PPUSH
4935: LD_VAR 0 1
4939: PPUSH
4940: LD_EXP 35
4944: PUSH
4945: LD_VAR 0 1
4949: ARRAY
4950: PUSH
4951: LD_VAR 0 2
4955: UNION
4956: PPUSH
4957: CALL_OW 1
4961: ST_TO_ADDR
// end ; end ; end ;
4962: GO 4853
4964: POP
4965: POP
// end ;
4966: PPOPN 4
4968: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
4969: LD_INT 0
4971: PPUSH
4972: PPUSH
4973: PPUSH
4974: PPUSH
4975: PPUSH
4976: PPUSH
4977: PPUSH
// playersAmount := 0 ;
4978: LD_ADDR_VAR 0 3
4982: PUSH
4983: LD_INT 0
4985: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , ] ;
4986: LD_ADDR_VAR 0 7
4990: PUSH
4991: LD_INT 13
4993: PUSH
4994: LD_INT 14
4996: PUSH
4997: LD_INT 15
4999: PUSH
5000: LD_INT 16
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5009: LD_ADDR_EXP 38
5013: PUSH
5014: LD_INT 0
5016: PUSH
5017: LD_INT 0
5019: PUSH
5020: LD_INT 0
5022: PUSH
5023: LD_INT 0
5025: PUSH
5026: LD_INT 0
5028: PUSH
5029: LD_INT 0
5031: PUSH
5032: LD_INT 0
5034: PUSH
5035: LD_INT 0
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: LIST
5042: LIST
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: ST_TO_ADDR
// for j = 1 to Side_Positions do
5048: LD_ADDR_VAR 0 4
5052: PUSH
5053: DOUBLE
5054: LD_INT 1
5056: DEC
5057: ST_TO_ADDR
5058: LD_EXP 21
5062: PUSH
5063: FOR_TO
5064: IFFALSE 5131
// if Side_Positions [ j ] then
5066: LD_EXP 21
5070: PUSH
5071: LD_VAR 0 4
5075: ARRAY
5076: IFFALSE 5129
// begin playersAmount := playersAmount + 1 ;
5078: LD_ADDR_VAR 0 3
5082: PUSH
5083: LD_VAR 0 3
5087: PUSH
5088: LD_INT 1
5090: PLUS
5091: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5092: LD_ADDR_EXP 38
5096: PUSH
5097: LD_EXP 38
5101: PPUSH
5102: LD_VAR 0 4
5106: PPUSH
5107: LD_VAR 0 7
5111: PUSH
5112: LD_EXP 21
5116: PUSH
5117: LD_VAR 0 4
5121: ARRAY
5122: ARRAY
5123: PPUSH
5124: CALL_OW 1
5128: ST_TO_ADDR
// end ;
5129: GO 5063
5131: POP
5132: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5133: LD_ADDR_EXP 34
5137: PUSH
5138: LD_INT 3
5140: PUSH
5141: LD_EXP 13
5145: MUL
5146: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5147: LD_ADDR_EXP 32
5151: PUSH
5152: LD_VAR 0 3
5156: PUSH
5157: LD_EXP 34
5161: MUL
5162: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5163: LD_ADDR_EXP 33
5167: PUSH
5168: LD_EXP 32
5172: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5173: LD_ADDR_EXP 35
5177: PUSH
5178: LD_INT 0
5180: PUSH
5181: LD_INT 0
5183: PUSH
5184: LD_INT 0
5186: PUSH
5187: LD_INT 0
5189: PUSH
5190: LD_INT 0
5192: PUSH
5193: LD_INT 0
5195: PUSH
5196: LD_INT 0
5198: PUSH
5199: LD_INT 0
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5212: LD_ADDR_EXP 36
5216: PUSH
5217: LD_INT 0
5219: PUSH
5220: LD_INT 0
5222: PUSH
5223: LD_INT 0
5225: PUSH
5226: LD_INT 0
5228: PUSH
5229: LD_INT 0
5231: PUSH
5232: LD_INT 0
5234: PUSH
5235: LD_INT 0
5237: PUSH
5238: LD_INT 0
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: ST_TO_ADDR
// apeLevel := 1 ;
5251: LD_ADDR_EXP 37
5255: PUSH
5256: LD_INT 1
5258: ST_TO_ADDR
// if not apemanNumber then
5259: LD_EXP 32
5263: NOT
5264: IFFALSE 5268
// exit ;
5266: GO 5464
// for i := 1 to apemanPerPlayer do
5268: LD_ADDR_VAR 0 2
5272: PUSH
5273: DOUBLE
5274: LD_INT 1
5276: DEC
5277: ST_TO_ADDR
5278: LD_EXP 34
5282: PUSH
5283: FOR_TO
5284: IFFALSE 5462
// begin for j := 1 to Side_Positions do
5286: LD_ADDR_VAR 0 4
5290: PUSH
5291: DOUBLE
5292: LD_INT 1
5294: DEC
5295: ST_TO_ADDR
5296: LD_EXP 21
5300: PUSH
5301: FOR_TO
5302: IFFALSE 5458
// if Side_Positions [ j ] then
5304: LD_EXP 21
5308: PUSH
5309: LD_VAR 0 4
5313: ARRAY
5314: IFFALSE 5456
// begin pos := Side_Positions [ j ] ;
5316: LD_ADDR_VAR 0 6
5320: PUSH
5321: LD_EXP 21
5325: PUSH
5326: LD_VAR 0 4
5330: ARRAY
5331: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5332: LD_ADDR_EXP 36
5336: PUSH
5337: LD_EXP 36
5341: PPUSH
5342: LD_VAR 0 4
5346: PPUSH
5347: LD_EXP 36
5351: PUSH
5352: LD_VAR 0 4
5356: ARRAY
5357: PUSH
5358: LD_INT 1
5360: PLUS
5361: PPUSH
5362: CALL_OW 1
5366: ST_TO_ADDR
// ape := PrepareApeman ;
5367: LD_ADDR_VAR 0 5
5371: PUSH
5372: CALL 5469 0 0
5376: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5377: LD_ADDR_EXP 35
5381: PUSH
5382: LD_EXP 35
5386: PPUSH
5387: LD_VAR 0 4
5391: PPUSH
5392: LD_EXP 35
5396: PUSH
5397: LD_VAR 0 4
5401: ARRAY
5402: PPUSH
5403: LD_EXP 35
5407: PUSH
5408: LD_VAR 0 4
5412: ARRAY
5413: PUSH
5414: LD_INT 1
5416: PLUS
5417: PPUSH
5418: LD_VAR 0 5
5422: PPUSH
5423: CALL_OW 1
5427: PPUSH
5428: CALL_OW 1
5432: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5433: LD_VAR 0 5
5437: PPUSH
5438: LD_EXP 38
5442: PUSH
5443: LD_VAR 0 4
5447: ARRAY
5448: PPUSH
5449: LD_INT 0
5451: PPUSH
5452: CALL_OW 49
// end ;
5456: GO 5301
5458: POP
5459: POP
// end ;
5460: GO 5283
5462: POP
5463: POP
// end ;
5464: LD_VAR 0 1
5468: RET
// export function PrepareApeman ; var bonus ; begin
5469: LD_INT 0
5471: PPUSH
5472: PPUSH
// uc_side := 0 ;
5473: LD_ADDR_OWVAR 20
5477: PUSH
5478: LD_INT 0
5480: ST_TO_ADDR
// uc_nation := 0 ;
5481: LD_ADDR_OWVAR 21
5485: PUSH
5486: LD_INT 0
5488: ST_TO_ADDR
// InitHc ;
5489: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
5493: LD_ADDR_VAR 0 2
5497: PUSH
5498: LD_INT 1
5500: NEG
5501: PUSH
5502: LD_INT 0
5504: PUSH
5505: LD_INT 1
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: LIST
5512: PUSH
5513: LD_INT 25
5515: PUSH
5516: LD_INT 12
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: PPUSH
5523: CALL_OW 69
5527: PUSH
5528: LD_INT 3
5530: MOD
5531: PUSH
5532: LD_INT 1
5534: PLUS
5535: ARRAY
5536: ST_TO_ADDR
// hc_class := class_apeman ;
5537: LD_ADDR_OWVAR 28
5541: PUSH
5542: LD_INT 12
5544: ST_TO_ADDR
// hc_gallery :=  ;
5545: LD_ADDR_OWVAR 33
5549: PUSH
5550: LD_STRING 
5552: ST_TO_ADDR
// hc_name :=  ;
5553: LD_ADDR_OWVAR 26
5557: PUSH
5558: LD_STRING 
5560: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
5561: LD_ADDR_OWVAR 31
5565: PUSH
5566: LD_EXP 37
5570: PUSH
5571: LD_VAR 0 2
5575: PLUS
5576: PUSH
5577: LD_EXP 37
5581: PUSH
5582: LD_VAR 0 2
5586: PLUS
5587: PUSH
5588: LD_EXP 37
5592: PUSH
5593: LD_VAR 0 2
5597: PLUS
5598: PUSH
5599: LD_EXP 37
5603: PUSH
5604: LD_VAR 0 2
5608: PLUS
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: LIST
5614: LIST
5615: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
5616: LD_ADDR_OWVAR 35
5620: PUSH
5621: LD_INT 10
5623: PUSH
5624: LD_VAR 0 2
5628: MUL
5629: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
5630: LD_ADDR_OWVAR 29
5634: PUSH
5635: LD_INT 12
5637: PUSH
5638: LD_INT 12
5640: PUSH
5641: EMPTY
5642: LIST
5643: LIST
5644: ST_TO_ADDR
// result := CreateHuman ;
5645: LD_ADDR_VAR 0 1
5649: PUSH
5650: CALL_OW 44
5654: ST_TO_ADDR
// end ;
5655: LD_VAR 0 1
5659: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
5660: LD_INT 0
5662: PPUSH
5663: PPUSH
5664: PPUSH
// if not ape then
5665: LD_VAR 0 1
5669: NOT
5670: IFFALSE 5674
// exit ;
5672: GO 5799
// side := GetSide ( ape ) ;
5674: LD_ADDR_VAR 0 3
5678: PUSH
5679: LD_VAR 0 1
5683: PPUSH
5684: CALL_OW 255
5688: ST_TO_ADDR
// if not side then
5689: LD_VAR 0 3
5693: NOT
5694: IFFALSE 5748
// begin for i = 1 to apemanPos do
5696: LD_ADDR_VAR 0 4
5700: PUSH
5701: DOUBLE
5702: LD_INT 1
5704: DEC
5705: ST_TO_ADDR
5706: LD_EXP 35
5710: PUSH
5711: FOR_TO
5712: IFFALSE 5746
// if ape in apemanPos [ i ] then
5714: LD_VAR 0 1
5718: PUSH
5719: LD_EXP 35
5723: PUSH
5724: LD_VAR 0 4
5728: ARRAY
5729: IN
5730: IFFALSE 5744
// begin side := i ;
5732: LD_ADDR_VAR 0 3
5736: PUSH
5737: LD_VAR 0 4
5741: ST_TO_ADDR
// break ;
5742: GO 5746
// end ;
5744: GO 5711
5746: POP
5747: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
5748: LD_ADDR_EXP 35
5752: PUSH
5753: LD_EXP 35
5757: PPUSH
5758: LD_VAR 0 3
5762: PPUSH
5763: LD_EXP 35
5767: PUSH
5768: LD_VAR 0 3
5772: ARRAY
5773: PUSH
5774: LD_VAR 0 1
5778: DIFF
5779: PPUSH
5780: CALL_OW 1
5784: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
5785: LD_ADDR_EXP 32
5789: PUSH
5790: LD_EXP 32
5794: PUSH
5795: LD_INT 1
5797: MINUS
5798: ST_TO_ADDR
// end ; end_of_file
5799: LD_VAR 0 2
5803: RET
// every 1 1$0 + 0 0$0.3 do
5804: GO 5806
5806: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5807: LD_INT 4
5809: PPUSH
5810: LD_INT 5
5812: PPUSH
5813: CALL_OW 12
5817: PPUSH
5818: LD_INT 1
5820: PPUSH
5821: CALL_OW 57
// enable ;
5825: ENABLE
// end ;
5826: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5827: GO 5829
5829: DISABLE
5830: LD_INT 0
5832: PPUSH
5833: PPUSH
// begin case tick of 1 .. 1 1$0 :
5834: LD_OWVAR 1
5838: PUSH
5839: LD_INT 1
5841: DOUBLE
5842: GREATEREQUAL
5843: IFFALSE 5851
5845: LD_INT 2100
5847: DOUBLE
5848: LESSEQUAL
5849: IFTRUE 5853
5851: GO 5881
5853: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5854: LD_EXP 8
5858: PUSH
5859: LD_INT 100
5861: DIVREAL
5862: PUSH
5863: LD_INT 525
5865: PPUSH
5866: LD_INT 1050
5868: PPUSH
5869: CALL_OW 12
5873: MUL
5874: PPUSH
5875: CALL_OW 67
5879: GO 6183
5881: LD_INT 2100
5883: PUSH
5884: LD_INT 1
5886: PLUS
5887: DOUBLE
5888: GREATEREQUAL
5889: IFFALSE 5897
5891: LD_INT 10500
5893: DOUBLE
5894: LESSEQUAL
5895: IFTRUE 5899
5897: GO 5927
5899: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5900: LD_EXP 8
5904: PUSH
5905: LD_INT 100
5907: DIVREAL
5908: PUSH
5909: LD_INT 1050
5911: PPUSH
5912: LD_INT 1750
5914: PPUSH
5915: CALL_OW 12
5919: MUL
5920: PPUSH
5921: CALL_OW 67
5925: GO 6183
5927: LD_INT 10500
5929: PUSH
5930: LD_INT 1
5932: PLUS
5933: DOUBLE
5934: GREATEREQUAL
5935: IFFALSE 5943
5937: LD_INT 21000
5939: DOUBLE
5940: LESSEQUAL
5941: IFTRUE 5945
5943: GO 5973
5945: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5946: LD_EXP 8
5950: PUSH
5951: LD_INT 100
5953: DIVREAL
5954: PUSH
5955: LD_INT 1750
5957: PPUSH
5958: LD_INT 2100
5960: PPUSH
5961: CALL_OW 12
5965: MUL
5966: PPUSH
5967: CALL_OW 67
5971: GO 6183
5973: LD_INT 21000
5975: PUSH
5976: LD_INT 1
5978: PLUS
5979: DOUBLE
5980: GREATEREQUAL
5981: IFFALSE 5989
5983: LD_INT 42000
5985: DOUBLE
5986: LESSEQUAL
5987: IFTRUE 5991
5989: GO 6019
5991: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5992: LD_EXP 8
5996: PUSH
5997: LD_INT 100
5999: DIVREAL
6000: PUSH
6001: LD_INT 2100
6003: PPUSH
6004: LD_INT 2275
6006: PPUSH
6007: CALL_OW 12
6011: MUL
6012: PPUSH
6013: CALL_OW 67
6017: GO 6183
6019: LD_INT 42000
6021: PUSH
6022: LD_INT 1
6024: PLUS
6025: DOUBLE
6026: GREATEREQUAL
6027: IFFALSE 6035
6029: LD_INT 63000
6031: DOUBLE
6032: LESSEQUAL
6033: IFTRUE 6037
6035: GO 6065
6037: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
6038: LD_EXP 8
6042: PUSH
6043: LD_INT 100
6045: DIVREAL
6046: PUSH
6047: LD_INT 2275
6049: PPUSH
6050: LD_INT 2450
6052: PPUSH
6053: CALL_OW 12
6057: MUL
6058: PPUSH
6059: CALL_OW 67
6063: GO 6183
6065: LD_INT 63000
6067: PUSH
6068: LD_INT 1
6070: PLUS
6071: DOUBLE
6072: GREATEREQUAL
6073: IFFALSE 6081
6075: LD_INT 105000
6077: DOUBLE
6078: LESSEQUAL
6079: IFTRUE 6083
6081: GO 6111
6083: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
6084: LD_EXP 8
6088: PUSH
6089: LD_INT 100
6091: DIVREAL
6092: PUSH
6093: LD_INT 2450
6095: PPUSH
6096: LD_INT 2800
6098: PPUSH
6099: CALL_OW 12
6103: MUL
6104: PPUSH
6105: CALL_OW 67
6109: GO 6183
6111: LD_INT 105000
6113: PUSH
6114: LD_INT 1
6116: PLUS
6117: DOUBLE
6118: GREATEREQUAL
6119: IFFALSE 6127
6121: LD_INT 630000
6123: DOUBLE
6124: LESSEQUAL
6125: IFTRUE 6129
6127: GO 6157
6129: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
6130: LD_EXP 8
6134: PUSH
6135: LD_INT 100
6137: DIVREAL
6138: PUSH
6139: LD_INT 2800
6141: PPUSH
6142: LD_INT 3500
6144: PPUSH
6145: CALL_OW 12
6149: MUL
6150: PPUSH
6151: CALL_OW 67
6155: GO 6183
6157: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
6158: LD_EXP 8
6162: PUSH
6163: LD_INT 100
6165: DIVREAL
6166: PUSH
6167: LD_INT 3500
6169: PPUSH
6170: LD_INT 3850
6172: PPUSH
6173: CALL_OW 12
6177: MUL
6178: PPUSH
6179: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
6183: LD_ADDR_VAR 0 2
6187: PUSH
6188: LD_INT 3
6190: PPUSH
6191: LD_INT 5
6193: PPUSH
6194: CALL_OW 12
6198: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
6199: LD_ADDR_VAR 0 1
6203: PUSH
6204: LD_EXP 21
6208: PUSH
6209: LD_INT 0
6211: PUSH
6212: EMPTY
6213: LIST
6214: DIFF
6215: PUSH
6216: FOR_IN
6217: IFFALSE 6257
// CreateCratesArea ( amount , [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] [ i ] , true ) ;
6219: LD_VAR 0 2
6223: PPUSH
6224: LD_INT 8
6226: PUSH
6227: LD_INT 11
6229: PUSH
6230: LD_INT 9
6232: PUSH
6233: LD_INT 10
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: PUSH
6242: LD_VAR 0 1
6246: ARRAY
6247: PPUSH
6248: LD_INT 1
6250: PPUSH
6251: CALL_OW 55
6255: GO 6216
6257: POP
6258: POP
// enable ;
6259: ENABLE
// end ; end_of_file
6260: PPOPN 2
6262: END
// every 0 0$1 trigger def_tree_function do
6263: LD_EXP 1
6267: IFFALSE 6305
6269: GO 6271
6271: DISABLE
// begin wait ( rand ( 3 3$0 , 10 10$0 ) ) ;
6272: LD_INT 6300
6274: PPUSH
6275: LD_INT 21000
6277: PPUSH
6278: CALL_OW 12
6282: PPUSH
6283: CALL_OW 67
// SetAreaMapShow ( Tree , 1 ) ;
6287: LD_INT 3
6289: PPUSH
6290: LD_INT 1
6292: PPUSH
6293: CALL_OW 424
// activated := true ;
6297: LD_ADDR_EXP 17
6301: PUSH
6302: LD_INT 1
6304: ST_TO_ADDR
// end ;
6305: END
// every 0 0$2 trigger activated and def_tree_function do var i , un , tmp ;
6306: LD_EXP 17
6310: PUSH
6311: LD_EXP 1
6315: AND
6316: IFFALSE 6580
6318: GO 6320
6320: DISABLE
6321: LD_INT 0
6323: PPUSH
6324: PPUSH
6325: PPUSH
// begin enable ;
6326: ENABLE
// ExtraStrings := [ #MultiSmall-Tree & def_tree_function ] ;
6327: LD_ADDR_EXP 56
6331: PUSH
6332: LD_STRING #MultiSmall-Tree
6334: PUSH
6335: LD_EXP 1
6339: STR
6340: PUSH
6341: EMPTY
6342: LIST
6343: ST_TO_ADDR
// tmp := FilterUnitsInArea ( Tree , [ f_type , unit_human ] ) ;
6344: LD_ADDR_VAR 0 3
6348: PUSH
6349: LD_INT 3
6351: PPUSH
6352: LD_INT 21
6354: PUSH
6355: LD_INT 1
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: PPUSH
6362: CALL_OW 70
6366: ST_TO_ADDR
// if not tmp then
6367: LD_VAR 0 3
6371: NOT
6372: IFFALSE 6376
// exit ;
6374: GO 6580
// for un in tmp do
6376: LD_ADDR_VAR 0 2
6380: PUSH
6381: LD_VAR 0 3
6385: PUSH
6386: FOR_IN
6387: IFFALSE 6578
// begin if un in bonus_gained then
6389: LD_VAR 0 2
6393: PUSH
6394: LD_EXP 16
6398: IN
6399: IFFALSE 6403
// continue ;
6401: GO 6386
// bonus_gained := bonus_gained ^ un ;
6403: LD_ADDR_EXP 16
6407: PUSH
6408: LD_EXP 16
6412: PUSH
6413: LD_VAR 0 2
6417: ADD
6418: ST_TO_ADDR
// if GetClass ( un ) in [ class_soldier , class_engineer , class_mechanic , class_scientistic , class_sniper , class_bazooker , class_mortar ] then
6419: LD_VAR 0 2
6423: PPUSH
6424: CALL_OW 257
6428: PUSH
6429: LD_INT 1
6431: PUSH
6432: LD_INT 2
6434: PUSH
6435: LD_INT 3
6437: PUSH
6438: LD_INT 4
6440: PUSH
6441: LD_INT 5
6443: PUSH
6444: LD_INT 9
6446: PUSH
6447: LD_INT 8
6449: PUSH
6450: EMPTY
6451: LIST
6452: LIST
6453: LIST
6454: LIST
6455: LIST
6456: LIST
6457: LIST
6458: IN
6459: IFFALSE 6508
// begin for i := 1 to 4 do
6461: LD_ADDR_VAR 0 1
6465: PUSH
6466: DOUBLE
6467: LD_INT 1
6469: DEC
6470: ST_TO_ADDR
6471: LD_INT 4
6473: PUSH
6474: FOR_TO
6475: IFFALSE 6504
// GiveSkillBonus ( un , i , tree_function [ i ] ) ;
6477: LD_VAR 0 2
6481: PPUSH
6482: LD_VAR 0 1
6486: PPUSH
6487: LD_EXP 14
6491: PUSH
6492: LD_VAR 0 1
6496: ARRAY
6497: PPUSH
6498: CALL_OW 238
6502: GO 6474
6504: POP
6505: POP
// end else
6506: GO 6576
// if un in [ class_apeman , class_apeman_engineer , class_apeman_kamikaze , class_apeman_soldier ] then
6508: LD_VAR 0 2
6512: PUSH
6513: LD_INT 12
6515: PUSH
6516: LD_INT 16
6518: PUSH
6519: LD_INT 17
6521: PUSH
6522: LD_INT 15
6524: PUSH
6525: EMPTY
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: IN
6531: IFFALSE 6576
// begin for i := 1 to 4 do
6533: LD_ADDR_VAR 0 1
6537: PUSH
6538: DOUBLE
6539: LD_INT 1
6541: DEC
6542: ST_TO_ADDR
6543: LD_INT 4
6545: PUSH
6546: FOR_TO
6547: IFFALSE 6574
// GiveSkillBonus ( un , i , tree_function [ 5 ] ) ;
6549: LD_VAR 0 2
6553: PPUSH
6554: LD_VAR 0 1
6558: PPUSH
6559: LD_EXP 14
6563: PUSH
6564: LD_INT 5
6566: ARRAY
6567: PPUSH
6568: CALL_OW 238
6572: GO 6546
6574: POP
6575: POP
// end ; end ;
6576: GO 6386
6578: POP
6579: POP
// end ; end_of_file
6580: PPOPN 3
6582: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6583: LD_VAR 0 1
6587: PPUSH
6588: CALL_OW 266
6592: PUSH
6593: LD_INT 0
6595: PUSH
6596: LD_INT 1
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: IN
6603: IFFALSE 6628
// SetBName ( b , @ & GetSide ( b ) ) ;
6605: LD_VAR 0 1
6609: PPUSH
6610: LD_STRING @
6612: PUSH
6613: LD_VAR 0 1
6617: PPUSH
6618: CALL_OW 255
6622: STR
6623: PPUSH
6624: CALL_OW 500
// if def_game_rules then
6628: LD_EXP 40
6632: IFFALSE 6669
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
6634: LD_VAR 0 1
6638: PPUSH
6639: LD_VAR 0 1
6643: PPUSH
6644: CALL_OW 266
6648: PPUSH
6649: LD_VAR 0 1
6653: PPUSH
6654: CALL_OW 255
6658: PPUSH
6659: LD_INT 0
6661: PPUSH
6662: LD_INT 1
6664: PPUSH
6665: CALL 10089 0 5
// end ;
6669: PPOPN 2
6671: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6672: LD_VAR 0 1
6676: PPUSH
6677: CALL_OW 266
6681: PUSH
6682: LD_INT 0
6684: PUSH
6685: LD_INT 1
6687: PUSH
6688: EMPTY
6689: LIST
6690: LIST
6691: IN
6692: IFFALSE 6717
// SetBName ( b , @ & GetSide ( b ) ) ;
6694: LD_VAR 0 1
6698: PPUSH
6699: LD_STRING @
6701: PUSH
6702: LD_VAR 0 1
6706: PPUSH
6707: CALL_OW 255
6711: STR
6712: PPUSH
6713: CALL_OW 500
// if def_game_rules then
6717: LD_EXP 40
6721: IFFALSE 6760
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
6723: LD_VAR 0 1
6727: PPUSH
6728: LD_VAR 0 1
6732: PPUSH
6733: CALL_OW 266
6737: PPUSH
6738: LD_VAR 0 1
6742: PPUSH
6743: CALL_OW 255
6747: PPUSH
6748: LD_VAR 0 2
6752: PPUSH
6753: LD_INT 1
6755: PPUSH
6756: CALL 10089 0 5
// end ;
6760: PPOPN 3
6762: END
// on VehicleConstructed ( veh , fac ) do var side ;
6763: LD_INT 0
6765: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6766: LD_VAR 0 1
6770: PPUSH
6771: CALL_OW 263
6775: PUSH
6776: LD_INT 5
6778: EQUAL
6779: IFFALSE 6921
// begin side := GetSide ( veh ) ;
6781: LD_ADDR_VAR 0 3
6785: PUSH
6786: LD_VAR 0 1
6790: PPUSH
6791: CALL_OW 255
6795: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6796: LD_ADDR_EXP 35
6800: PUSH
6801: LD_EXP 35
6805: PPUSH
6806: LD_VAR 0 3
6810: PPUSH
6811: LD_EXP 35
6815: PUSH
6816: LD_VAR 0 3
6820: ARRAY
6821: PPUSH
6822: LD_INT 52
6824: PUSH
6825: EMPTY
6826: LIST
6827: PPUSH
6828: CALL_OW 72
6832: PUSH
6833: LD_INT 22
6835: PUSH
6836: LD_VAR 0 3
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: PUSH
6845: LD_INT 2
6847: PUSH
6848: LD_INT 33
6850: PUSH
6851: LD_INT 5
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PUSH
6858: LD_INT 25
6860: PUSH
6861: LD_INT 12
6863: PUSH
6864: EMPTY
6865: LIST
6866: LIST
6867: PUSH
6868: LD_INT 25
6870: PUSH
6871: LD_INT 15
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: PUSH
6878: LD_INT 25
6880: PUSH
6881: LD_INT 16
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: PUSH
6888: LD_INT 25
6890: PUSH
6891: LD_INT 17
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: LIST
6902: LIST
6903: LIST
6904: LIST
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: PPUSH
6910: CALL_OW 69
6914: UNION
6915: PPUSH
6916: CALL_OW 1
6920: ST_TO_ADDR
// end ; end ;
6921: PPOPN 3
6923: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6924: LD_INT 0
6926: PPUSH
6927: PPUSH
6928: PPUSH
6929: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6930: LD_VAR 0 1
6934: PPUSH
6935: CALL_OW 257
6939: PUSH
6940: LD_INT 12
6942: PUSH
6943: LD_INT 15
6945: PUSH
6946: LD_INT 17
6948: PUSH
6949: LD_INT 16
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: IN
6958: PUSH
6959: LD_VAR 0 1
6963: PPUSH
6964: CALL_OW 263
6968: PUSH
6969: LD_INT 5
6971: EQUAL
6972: OR
6973: IFFALSE 6984
// ApeKilled ( j ) ;
6975: LD_VAR 0 1
6979: PPUSH
6980: CALL 5660 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6984: LD_VAR 0 1
6988: PPUSH
6989: CALL_OW 266
6993: PUSH
6994: LD_INT 0
6996: PUSH
6997: LD_INT 1
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: IN
7004: IFFALSE 7086
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7006: LD_ADDR_VAR 0 4
7010: PUSH
7011: LD_EXP 21
7015: PUSH
7016: LD_VAR 0 1
7020: PPUSH
7021: CALL_OW 255
7025: ARRAY
7026: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7027: LD_ADDR_VAR 0 2
7031: PUSH
7032: LD_EXP 26
7036: PUSH
7037: LD_VAR 0 4
7041: ARRAY
7042: PUSH
7043: LD_INT 1
7045: ARRAY
7046: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7047: LD_ADDR_VAR 0 3
7051: PUSH
7052: LD_EXP 26
7056: PUSH
7057: LD_VAR 0 4
7061: ARRAY
7062: PUSH
7063: LD_INT 2
7065: ARRAY
7066: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7067: LD_VAR 0 2
7071: PPUSH
7072: LD_VAR 0 3
7076: PPUSH
7077: CALL_OW 420
7081: PPUSH
7082: CALL_OW 419
// end ; if def_game_rules then
7086: LD_EXP 40
7090: IFFALSE 7189
// if ( GetType ( j ) = 3 ) then
7092: LD_VAR 0 1
7096: PPUSH
7097: CALL_OW 247
7101: PUSH
7102: LD_INT 3
7104: EQUAL
7105: IFFALSE 7145
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7107: LD_VAR 0 1
7111: PPUSH
7112: LD_VAR 0 1
7116: PPUSH
7117: CALL_OW 266
7121: PPUSH
7122: LD_VAR 0 1
7126: PPUSH
7127: CALL_OW 255
7131: PPUSH
7132: LD_INT 0
7134: PPUSH
7135: LD_INT 1
7137: NEG
7138: PPUSH
7139: CALL 10089 0 5
7143: GO 7189
// if ( GetChassis ( j ) = 25 ) then
7145: LD_VAR 0 1
7149: PPUSH
7150: CALL_OW 265
7154: PUSH
7155: LD_INT 25
7157: EQUAL
7158: IFFALSE 7189
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7160: LD_VAR 0 1
7164: PPUSH
7165: LD_INT 37
7167: PPUSH
7168: LD_VAR 0 1
7172: PPUSH
7173: CALL_OW 255
7177: PPUSH
7178: LD_INT 0
7180: PPUSH
7181: LD_INT 1
7183: NEG
7184: PPUSH
7185: CALL 10089 0 5
// end ;
7189: PPOPN 5
7191: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7192: LD_EXP 40
7196: PUSH
7197: LD_VAR 0 1
7201: PPUSH
7202: CALL_OW 265
7206: PUSH
7207: LD_INT 25
7209: EQUAL
7210: AND
7211: IFFALSE 7243
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
7213: LD_VAR 0 1
7217: PPUSH
7218: LD_INT 37
7220: PPUSH
7221: LD_VAR 0 1
7225: PPUSH
7226: CALL_OW 255
7230: PPUSH
7231: LD_VAR 0 3
7235: PPUSH
7236: LD_INT 1
7238: PPUSH
7239: CALL 10089 0 5
// end ;
7243: PPOPN 4
7245: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7246: LD_VAR 0 1
7250: PPUSH
7251: LD_VAR 0 2
7255: PPUSH
7256: LD_VAR 0 3
7260: PPUSH
7261: LD_OWVAR 2
7265: PPUSH
7266: CALL 10834 0 4
7270: PPOPN 3
7272: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7273: LD_INT 0
7275: PPUSH
7276: PPUSH
// for un in battle_flags_id do
7277: LD_ADDR_VAR 0 2
7281: PUSH
7282: LD_EXP 27
7286: PUSH
7287: FOR_IN
7288: IFFALSE 7363
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7290: LD_VAR 0 2
7294: PPUSH
7295: LD_INT 1
7297: PUSH
7298: LD_LOC 9
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: PUSH
7307: LD_INT 2
7309: PUSH
7310: LD_LOC 9
7314: PUSH
7315: LD_INT 2
7317: DIV
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PUSH
7323: LD_INT 3
7325: PUSH
7326: LD_LOC 9
7330: PUSH
7331: LD_INT 5
7333: DIV
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: PUSH
7339: LD_INT 20
7341: PUSH
7342: LD_LOC 9
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: LIST
7355: LIST
7356: PPUSH
7357: CALL_OW 423
7361: GO 7287
7363: POP
7364: POP
// end ;
7365: LD_VAR 0 1
7369: RET
// every 0 0$0.1 do var un ;
7370: GO 7372
7372: DISABLE
7373: LD_INT 0
7375: PPUSH
// begin if not def_morale_flags then
7376: LD_EXP 49
7380: NOT
7381: IFFALSE 7385
// exit ;
7383: GO 7462
// if not morale_decreasing_time then
7385: LD_EXP 9
7389: NOT
7390: IFFALSE 7394
// exit ;
7392: GO 7462
// strength = 100 ;
7394: LD_ADDR_LOC 9
7398: PUSH
7399: LD_INT 100
7401: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7402: LD_EXP 9
7406: PPUSH
7407: CALL_OW 67
// strength := strength - 1 ;
7411: LD_ADDR_LOC 9
7415: PUSH
7416: LD_LOC 9
7420: PUSH
7421: LD_INT 1
7423: MINUS
7424: ST_TO_ADDR
// Update_Flags ;
7425: CALL 7273 0 0
// until not strength ;
7429: LD_LOC 9
7433: NOT
7434: IFFALSE 7402
// for un in battle_flags_id do
7436: LD_ADDR_VAR 0 1
7440: PUSH
7441: LD_EXP 27
7445: PUSH
7446: FOR_IN
7447: IFFALSE 7460
// KillBattleFlag ( un ) ;
7449: LD_VAR 0 1
7453: PPUSH
7454: CALL_OW 419
7458: GO 7446
7460: POP
7461: POP
// end ; end_of_file
7462: PPOPN 1
7464: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
7465: LD_INT 0
7467: PPUSH
7468: PPUSH
// if ( not IAmSpec ) then
7469: CALL_OW 531
7473: NOT
7474: IFFALSE 7490
// Result := Limits_Info ^  ;
7476: LD_ADDR_VAR 0 1
7480: PUSH
7481: LD_LOC 21
7485: PUSH
7486: LD_STRING 
7488: ADD
7489: ST_TO_ADDR
// for i := 1 to 8 do
7490: LD_ADDR_VAR 0 2
7494: PUSH
7495: DOUBLE
7496: LD_INT 1
7498: DEC
7499: ST_TO_ADDR
7500: LD_INT 8
7502: PUSH
7503: FOR_TO
7504: IFFALSE 7549
// if Cheaters [ i ] then
7506: LD_LOC 22
7510: PUSH
7511: LD_VAR 0 2
7515: ARRAY
7516: IFFALSE 7547
// Result := Result ^ [ #Cheater , i , i ] ;
7518: LD_ADDR_VAR 0 1
7522: PUSH
7523: LD_VAR 0 1
7527: PUSH
7528: LD_STRING #Cheater
7530: PUSH
7531: LD_VAR 0 2
7535: PUSH
7536: LD_VAR 0 2
7540: PUSH
7541: EMPTY
7542: LIST
7543: LIST
7544: LIST
7545: ADD
7546: ST_TO_ADDR
7547: GO 7503
7549: POP
7550: POP
// end ;
7551: LD_VAR 0 1
7555: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
7556: LD_INT 0
7558: PPUSH
7559: PPUSH
7560: PPUSH
7561: PPUSH
7562: PPUSH
// case Game_Type of 10 :
7563: LD_EXP 39
7567: PUSH
7568: LD_INT 10
7570: DOUBLE
7571: EQUAL
7572: IFTRUE 7576
7574: GO 7587
7576: POP
// def_game_rules := 1 ; 11 :
7577: LD_ADDR_EXP 40
7581: PUSH
7582: LD_INT 1
7584: ST_TO_ADDR
7585: GO 7607
7587: LD_INT 11
7589: DOUBLE
7590: EQUAL
7591: IFTRUE 7595
7593: GO 7606
7595: POP
// def_game_rules := 3 ; end ;
7596: LD_ADDR_EXP 40
7600: PUSH
7601: LD_INT 3
7603: ST_TO_ADDR
7604: GO 7607
7606: POP
// case def_game_rules of 0 :
7607: LD_EXP 40
7611: PUSH
7612: LD_INT 0
7614: DOUBLE
7615: EQUAL
7616: IFTRUE 7620
7618: GO 7625
7620: POP
// exit ; 1 :
7621: GO 9683
7623: GO 9583
7625: LD_INT 1
7627: DOUBLE
7628: EQUAL
7629: IFTRUE 7633
7631: GO 7849
7633: POP
// begin def_base_level := 2 ;
7634: LD_ADDR_EXP 41
7638: PUSH
7639: LD_INT 2
7641: ST_TO_ADDR
// def_amount_of_people := 2 ;
7642: LD_ADDR_EXP 42
7646: PUSH
7647: LD_INT 2
7649: ST_TO_ADDR
// def_skill_level := 1 ;
7650: LD_ADDR_EXP 43
7654: PUSH
7655: LD_INT 1
7657: ST_TO_ADDR
// def_starting_resources := 2 ;
7658: LD_ADDR_EXP 44
7662: PUSH
7663: LD_INT 2
7665: ST_TO_ADDR
// def_shipments_density := 1 ;
7666: LD_ADDR_EXP 45
7670: PUSH
7671: LD_INT 1
7673: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
7674: LD_ADDR_EXP 46
7678: PUSH
7679: LD_INT 0
7681: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
7682: LD_ADDR_EXP 47
7686: PUSH
7687: LD_INT 1
7689: ST_TO_ADDR
// def_shared_vision := 1 ;
7690: LD_ADDR_EXP 48
7694: PUSH
7695: LD_INT 1
7697: ST_TO_ADDR
// def_morale_flags := 3 ;
7698: LD_ADDR_EXP 49
7702: PUSH
7703: LD_INT 3
7705: ST_TO_ADDR
// def_siberite_detection := 1 ;
7706: LD_ADDR_EXP 50
7710: PUSH
7711: LD_INT 1
7713: ST_TO_ADDR
// def_people_respawning := 1 ;
7714: LD_ADDR_EXP 51
7718: PUSH
7719: LD_INT 1
7721: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
7722: LD_ADDR_EXP 52
7726: PUSH
7727: LD_INT 1
7729: ST_TO_ADDR
// def_siberite_bomb := 0 ;
7730: LD_ADDR_EXP 53
7734: PUSH
7735: LD_INT 0
7737: ST_TO_ADDR
// def_builduptime := 2 ;
7738: LD_ADDR_EXP 54
7742: PUSH
7743: LD_INT 2
7745: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
7746: LD_ADDR_VAR 0 2
7750: PUSH
7751: EMPTY
7752: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
7753: LD_ADDR_VAR 0 3
7757: PUSH
7758: EMPTY
7759: ST_TO_ADDR
// Banned_Weapons := [ ] ;
7760: LD_ADDR_LOC 16
7764: PUSH
7765: EMPTY
7766: ST_TO_ADDR
// Banned_Chassis := [ ] ;
7767: LD_ADDR_LOC 17
7771: PUSH
7772: EMPTY
7773: ST_TO_ADDR
// Banned_Controls := [ ] ;
7774: LD_ADDR_LOC 18
7778: PUSH
7779: EMPTY
7780: ST_TO_ADDR
// Banned_Engines := [ ] ;
7781: LD_ADDR_LOC 19
7785: PUSH
7786: EMPTY
7787: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
7788: LD_ADDR_LOC 14
7792: PUSH
7793: LD_INT 37
7795: PUSH
7796: EMPTY
7797: LIST
7798: PUSH
7799: LD_INT 4
7801: PUSH
7802: LD_INT 5
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: PUSH
7809: LD_INT 31
7811: PUSH
7812: LD_INT 32
7814: PUSH
7815: LD_INT 33
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: LIST
7822: PUSH
7823: EMPTY
7824: LIST
7825: LIST
7826: LIST
7827: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
7828: LD_ADDR_LOC 15
7832: PUSH
7833: LD_INT 2
7835: PUSH
7836: LD_INT 2
7838: PUSH
7839: LD_INT 4
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: LIST
7846: ST_TO_ADDR
// end ; 2 :
7847: GO 9583
7849: LD_INT 2
7851: DOUBLE
7852: EQUAL
7853: IFTRUE 7857
7855: GO 8066
7857: POP
// begin def_base_level := 1 ;
7858: LD_ADDR_EXP 41
7862: PUSH
7863: LD_INT 1
7865: ST_TO_ADDR
// def_amount_of_people := 2 ;
7866: LD_ADDR_EXP 42
7870: PUSH
7871: LD_INT 2
7873: ST_TO_ADDR
// def_skill_level := 3 ;
7874: LD_ADDR_EXP 43
7878: PUSH
7879: LD_INT 3
7881: ST_TO_ADDR
// def_starting_resources := 3 ;
7882: LD_ADDR_EXP 44
7886: PUSH
7887: LD_INT 3
7889: ST_TO_ADDR
// def_shipments_density := 2 ;
7890: LD_ADDR_EXP 45
7894: PUSH
7895: LD_INT 2
7897: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
7898: LD_ADDR_EXP 46
7902: PUSH
7903: LD_INT 1
7905: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
7906: LD_ADDR_EXP 47
7910: PUSH
7911: LD_INT 2
7913: ST_TO_ADDR
// def_shared_vision := 1 ;
7914: LD_ADDR_EXP 48
7918: PUSH
7919: LD_INT 1
7921: ST_TO_ADDR
// def_morale_flags := 0 ;
7922: LD_ADDR_EXP 49
7926: PUSH
7927: LD_INT 0
7929: ST_TO_ADDR
// def_siberite_detection := 1 ;
7930: LD_ADDR_EXP 50
7934: PUSH
7935: LD_INT 1
7937: ST_TO_ADDR
// def_people_respawning := 0 ;
7938: LD_ADDR_EXP 51
7942: PUSH
7943: LD_INT 0
7945: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
7946: LD_ADDR_EXP 52
7950: PUSH
7951: LD_INT 0
7953: ST_TO_ADDR
// def_siberite_bomb := 0 ;
7954: LD_ADDR_EXP 53
7958: PUSH
7959: LD_INT 0
7961: ST_TO_ADDR
// def_builduptime := 2 ;
7962: LD_ADDR_EXP 54
7966: PUSH
7967: LD_INT 2
7969: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
7970: LD_ADDR_VAR 0 2
7974: PUSH
7975: LD_INT 1
7977: PUSH
7978: EMPTY
7979: LIST
7980: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
7981: LD_ADDR_VAR 0 3
7985: PUSH
7986: EMPTY
7987: ST_TO_ADDR
// Banned_Weapons := [ ] ;
7988: LD_ADDR_LOC 16
7992: PUSH
7993: EMPTY
7994: ST_TO_ADDR
// Banned_Chassis := [ ] ;
7995: LD_ADDR_LOC 17
7999: PUSH
8000: EMPTY
8001: ST_TO_ADDR
// Banned_Controls := [ ] ;
8002: LD_ADDR_LOC 18
8006: PUSH
8007: EMPTY
8008: ST_TO_ADDR
// Banned_Engines := [ ] ;
8009: LD_ADDR_LOC 19
8013: PUSH
8014: EMPTY
8015: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
8016: LD_ADDR_LOC 14
8020: PUSH
8021: LD_INT 4
8023: PUSH
8024: LD_INT 5
8026: PUSH
8027: EMPTY
8028: LIST
8029: LIST
8030: PUSH
8031: LD_INT 31
8033: PUSH
8034: LD_INT 32
8036: PUSH
8037: LD_INT 33
8039: PUSH
8040: EMPTY
8041: LIST
8042: LIST
8043: LIST
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
8049: LD_ADDR_LOC 15
8053: PUSH
8054: LD_INT 1
8056: PUSH
8057: LD_INT 2
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: ST_TO_ADDR
// end ; 3 :
8064: GO 9583
8066: LD_INT 3
8068: DOUBLE
8069: EQUAL
8070: IFTRUE 8074
8072: GO 8317
8074: POP
// begin def_base_level := 1 ;
8075: LD_ADDR_EXP 41
8079: PUSH
8080: LD_INT 1
8082: ST_TO_ADDR
// def_amount_of_people := 2 ;
8083: LD_ADDR_EXP 42
8087: PUSH
8088: LD_INT 2
8090: ST_TO_ADDR
// def_skill_level := 3 ;
8091: LD_ADDR_EXP 43
8095: PUSH
8096: LD_INT 3
8098: ST_TO_ADDR
// def_starting_resources := 3 ;
8099: LD_ADDR_EXP 44
8103: PUSH
8104: LD_INT 3
8106: ST_TO_ADDR
// def_shipments_density := 1 ;
8107: LD_ADDR_EXP 45
8111: PUSH
8112: LD_INT 1
8114: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8115: LD_ADDR_EXP 46
8119: PUSH
8120: LD_INT 0
8122: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
8123: LD_ADDR_EXP 47
8127: PUSH
8128: LD_INT 1
8130: ST_TO_ADDR
// def_shared_vision := 1 ;
8131: LD_ADDR_EXP 48
8135: PUSH
8136: LD_INT 1
8138: ST_TO_ADDR
// def_morale_flags := 0 ;
8139: LD_ADDR_EXP 49
8143: PUSH
8144: LD_INT 0
8146: ST_TO_ADDR
// def_siberite_detection := 1 ;
8147: LD_ADDR_EXP 50
8151: PUSH
8152: LD_INT 1
8154: ST_TO_ADDR
// def_people_respawning := 0 ;
8155: LD_ADDR_EXP 51
8159: PUSH
8160: LD_INT 0
8162: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
8163: LD_ADDR_EXP 52
8167: PUSH
8168: LD_INT 2
8170: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8171: LD_ADDR_EXP 53
8175: PUSH
8176: LD_INT 0
8178: ST_TO_ADDR
// def_builduptime := 1 ;
8179: LD_ADDR_EXP 54
8183: PUSH
8184: LD_INT 1
8186: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
8187: LD_ADDR_VAR 0 2
8191: PUSH
8192: LD_INT 23
8194: PUSH
8195: EMPTY
8196: LIST
8197: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
8198: LD_ADDR_VAR 0 3
8202: PUSH
8203: LD_INT 2
8205: PUSH
8206: LD_INT 37
8208: PUSH
8209: LD_INT 32
8211: PUSH
8212: LD_INT 33
8214: PUSH
8215: LD_INT 36
8217: PUSH
8218: LD_INT 16
8220: PUSH
8221: LD_INT 23
8223: PUSH
8224: LD_INT 21
8226: PUSH
8227: LD_INT 18
8229: PUSH
8230: LD_INT 22
8232: PUSH
8233: LD_INT 20
8235: PUSH
8236: LD_INT 19
8238: PUSH
8239: LD_INT 25
8241: PUSH
8242: LD_INT 17
8244: PUSH
8245: LD_INT 24
8247: PUSH
8248: EMPTY
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8265: LD_ADDR_LOC 16
8269: PUSH
8270: EMPTY
8271: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8272: LD_ADDR_LOC 17
8276: PUSH
8277: EMPTY
8278: ST_TO_ADDR
// Banned_Controls := [ ] ;
8279: LD_ADDR_LOC 18
8283: PUSH
8284: EMPTY
8285: ST_TO_ADDR
// Banned_Engines := [ ] ;
8286: LD_ADDR_LOC 19
8290: PUSH
8291: EMPTY
8292: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8293: LD_ADDR_LOC 14
8297: PUSH
8298: EMPTY
8299: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8300: LD_ADDR_LOC 15
8304: PUSH
8305: EMPTY
8306: ST_TO_ADDR
// No_Mechs := true ;
8307: LD_ADDR_EXP 55
8311: PUSH
8312: LD_INT 1
8314: ST_TO_ADDR
// end ; 4 :
8315: GO 9583
8317: LD_INT 4
8319: DOUBLE
8320: EQUAL
8321: IFTRUE 8325
8323: GO 8500
8325: POP
// begin def_base_level := 1 ;
8326: LD_ADDR_EXP 41
8330: PUSH
8331: LD_INT 1
8333: ST_TO_ADDR
// def_amount_of_people := 2 ;
8334: LD_ADDR_EXP 42
8338: PUSH
8339: LD_INT 2
8341: ST_TO_ADDR
// def_skill_level := 3 ;
8342: LD_ADDR_EXP 43
8346: PUSH
8347: LD_INT 3
8349: ST_TO_ADDR
// def_starting_resources := 3 ;
8350: LD_ADDR_EXP 44
8354: PUSH
8355: LD_INT 3
8357: ST_TO_ADDR
// def_shipments_density := 2 ;
8358: LD_ADDR_EXP 45
8362: PUSH
8363: LD_INT 2
8365: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8366: LD_ADDR_EXP 46
8370: PUSH
8371: LD_INT 1
8373: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8374: LD_ADDR_EXP 47
8378: PUSH
8379: LD_INT 2
8381: ST_TO_ADDR
// def_shared_vision := 1 ;
8382: LD_ADDR_EXP 48
8386: PUSH
8387: LD_INT 1
8389: ST_TO_ADDR
// def_morale_flags := 0 ;
8390: LD_ADDR_EXP 49
8394: PUSH
8395: LD_INT 0
8397: ST_TO_ADDR
// def_siberite_detection := 1 ;
8398: LD_ADDR_EXP 50
8402: PUSH
8403: LD_INT 1
8405: ST_TO_ADDR
// def_people_respawning := 0 ;
8406: LD_ADDR_EXP 51
8410: PUSH
8411: LD_INT 0
8413: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
8414: LD_ADDR_EXP 52
8418: PUSH
8419: LD_INT 0
8421: ST_TO_ADDR
// def_siberite_bomb := 1 ;
8422: LD_ADDR_EXP 53
8426: PUSH
8427: LD_INT 1
8429: ST_TO_ADDR
// def_builduptime := 3 ;
8430: LD_ADDR_EXP 54
8434: PUSH
8435: LD_INT 3
8437: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
8438: LD_ADDR_VAR 0 2
8442: PUSH
8443: LD_INT 1
8445: PUSH
8446: EMPTY
8447: LIST
8448: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8449: LD_ADDR_VAR 0 3
8453: PUSH
8454: EMPTY
8455: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8456: LD_ADDR_LOC 16
8460: PUSH
8461: EMPTY
8462: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8463: LD_ADDR_LOC 17
8467: PUSH
8468: EMPTY
8469: ST_TO_ADDR
// Banned_Controls := [ ] ;
8470: LD_ADDR_LOC 18
8474: PUSH
8475: EMPTY
8476: ST_TO_ADDR
// Banned_Engines := [ ] ;
8477: LD_ADDR_LOC 19
8481: PUSH
8482: EMPTY
8483: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8484: LD_ADDR_LOC 14
8488: PUSH
8489: EMPTY
8490: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8491: LD_ADDR_LOC 15
8495: PUSH
8496: EMPTY
8497: ST_TO_ADDR
// end ; 5 :
8498: GO 9583
8500: LD_INT 5
8502: DOUBLE
8503: EQUAL
8504: IFTRUE 8508
8506: GO 8757
8508: POP
// begin def_base_level := 0 ;
8509: LD_ADDR_EXP 41
8513: PUSH
8514: LD_INT 0
8516: ST_TO_ADDR
// def_amount_of_people := 0 ;
8517: LD_ADDR_EXP 42
8521: PUSH
8522: LD_INT 0
8524: ST_TO_ADDR
// def_skill_level := 0 ;
8525: LD_ADDR_EXP 43
8529: PUSH
8530: LD_INT 0
8532: ST_TO_ADDR
// def_starting_resources := 0 ;
8533: LD_ADDR_EXP 44
8537: PUSH
8538: LD_INT 0
8540: ST_TO_ADDR
// def_shipments_density := 0 ;
8541: LD_ADDR_EXP 45
8545: PUSH
8546: LD_INT 0
8548: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8549: LD_ADDR_EXP 46
8553: PUSH
8554: LD_INT 0
8556: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
8557: LD_ADDR_EXP 47
8561: PUSH
8562: LD_INT 0
8564: ST_TO_ADDR
// def_shared_vision := 1 ;
8565: LD_ADDR_EXP 48
8569: PUSH
8570: LD_INT 1
8572: ST_TO_ADDR
// def_morale_flags := 0 ;
8573: LD_ADDR_EXP 49
8577: PUSH
8578: LD_INT 0
8580: ST_TO_ADDR
// def_siberite_detection := 0 ;
8581: LD_ADDR_EXP 50
8585: PUSH
8586: LD_INT 0
8588: ST_TO_ADDR
// def_people_respawning := 1 ;
8589: LD_ADDR_EXP 51
8593: PUSH
8594: LD_INT 1
8596: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
8597: LD_ADDR_EXP 52
8601: PUSH
8602: LD_INT 1
8604: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8605: LD_ADDR_EXP 53
8609: PUSH
8610: LD_INT 0
8612: ST_TO_ADDR
// def_builduptime := 0 ;
8613: LD_ADDR_EXP 54
8617: PUSH
8618: LD_INT 0
8620: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
8621: LD_ADDR_VAR 0 2
8625: PUSH
8626: LD_INT 10
8628: PUSH
8629: LD_INT 3
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
8636: LD_ADDR_VAR 0 3
8640: PUSH
8641: LD_INT 12
8643: PUSH
8644: LD_INT 11
8646: PUSH
8647: LD_INT 14
8649: PUSH
8650: LD_INT 13
8652: PUSH
8653: LD_INT 5
8655: PUSH
8656: LD_INT 24
8658: PUSH
8659: LD_INT 21
8661: PUSH
8662: LD_INT 33
8664: PUSH
8665: LD_INT 36
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
8679: LD_ADDR_LOC 16
8683: PUSH
8684: LD_INT 31
8686: PUSH
8687: EMPTY
8688: LIST
8689: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8690: LD_ADDR_LOC 17
8694: PUSH
8695: EMPTY
8696: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
8697: LD_ADDR_LOC 18
8701: PUSH
8702: LD_INT 2
8704: PUSH
8705: EMPTY
8706: LIST
8707: ST_TO_ADDR
// Banned_Engines := [ ] ;
8708: LD_ADDR_LOC 19
8712: PUSH
8713: EMPTY
8714: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
8715: LD_ADDR_LOC 14
8719: PUSH
8720: LD_INT 4
8722: PUSH
8723: EMPTY
8724: LIST
8725: PUSH
8726: LD_INT 31
8728: PUSH
8729: LD_INT 32
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
8740: LD_ADDR_LOC 15
8744: PUSH
8745: LD_INT 1
8747: PUSH
8748: LD_INT 1
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: ST_TO_ADDR
// end ; 6 :
8755: GO 9583
8757: LD_INT 6
8759: DOUBLE
8760: EQUAL
8761: IFTRUE 8765
8763: GO 8968
8765: POP
// begin def_base_level := 1 ;
8766: LD_ADDR_EXP 41
8770: PUSH
8771: LD_INT 1
8773: ST_TO_ADDR
// def_amount_of_people := 2 ;
8774: LD_ADDR_EXP 42
8778: PUSH
8779: LD_INT 2
8781: ST_TO_ADDR
// def_skill_level := 3 ;
8782: LD_ADDR_EXP 43
8786: PUSH
8787: LD_INT 3
8789: ST_TO_ADDR
// def_starting_resources := 3 ;
8790: LD_ADDR_EXP 44
8794: PUSH
8795: LD_INT 3
8797: ST_TO_ADDR
// def_shipments_density := 1 ;
8798: LD_ADDR_EXP 45
8802: PUSH
8803: LD_INT 1
8805: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8806: LD_ADDR_EXP 46
8810: PUSH
8811: LD_INT 0
8813: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
8814: LD_ADDR_EXP 47
8818: PUSH
8819: LD_INT 1
8821: ST_TO_ADDR
// def_shared_vision := 1 ;
8822: LD_ADDR_EXP 48
8826: PUSH
8827: LD_INT 1
8829: ST_TO_ADDR
// def_morale_flags := 0 ;
8830: LD_ADDR_EXP 49
8834: PUSH
8835: LD_INT 0
8837: ST_TO_ADDR
// def_siberite_detection := 1 ;
8838: LD_ADDR_EXP 50
8842: PUSH
8843: LD_INT 1
8845: ST_TO_ADDR
// def_people_respawning := 2 ;
8846: LD_ADDR_EXP 51
8850: PUSH
8851: LD_INT 2
8853: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
8854: LD_ADDR_EXP 52
8858: PUSH
8859: LD_INT 1
8861: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8862: LD_ADDR_EXP 53
8866: PUSH
8867: LD_INT 0
8869: ST_TO_ADDR
// def_builduptime := 1 ;
8870: LD_ADDR_EXP 54
8874: PUSH
8875: LD_INT 1
8877: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
8878: LD_ADDR_VAR 0 2
8882: PUSH
8883: LD_INT 23
8885: PUSH
8886: EMPTY
8887: LIST
8888: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
8889: LD_ADDR_VAR 0 3
8893: PUSH
8894: LD_INT 2
8896: PUSH
8897: LD_INT 37
8899: PUSH
8900: LD_INT 31
8902: PUSH
8903: LD_INT 32
8905: PUSH
8906: LD_INT 33
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8916: LD_ADDR_LOC 16
8920: PUSH
8921: EMPTY
8922: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8923: LD_ADDR_LOC 17
8927: PUSH
8928: EMPTY
8929: ST_TO_ADDR
// Banned_Controls := [ ] ;
8930: LD_ADDR_LOC 18
8934: PUSH
8935: EMPTY
8936: ST_TO_ADDR
// Banned_Engines := [ ] ;
8937: LD_ADDR_LOC 19
8941: PUSH
8942: EMPTY
8943: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8944: LD_ADDR_LOC 14
8948: PUSH
8949: EMPTY
8950: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8951: LD_ADDR_LOC 15
8955: PUSH
8956: EMPTY
8957: ST_TO_ADDR
// No_Mechs := true ;
8958: LD_ADDR_EXP 55
8962: PUSH
8963: LD_INT 1
8965: ST_TO_ADDR
// end ; 7 :
8966: GO 9583
8968: LD_INT 7
8970: DOUBLE
8971: EQUAL
8972: IFTRUE 8976
8974: GO 9174
8976: POP
// begin def_base_level := 1 ;
8977: LD_ADDR_EXP 41
8981: PUSH
8982: LD_INT 1
8984: ST_TO_ADDR
// def_amount_of_people := 2 ;
8985: LD_ADDR_EXP 42
8989: PUSH
8990: LD_INT 2
8992: ST_TO_ADDR
// def_skill_level := 3 ;
8993: LD_ADDR_EXP 43
8997: PUSH
8998: LD_INT 3
9000: ST_TO_ADDR
// def_starting_resources := 3 ;
9001: LD_ADDR_EXP 44
9005: PUSH
9006: LD_INT 3
9008: ST_TO_ADDR
// def_shipments_density := 1 ;
9009: LD_ADDR_EXP 45
9013: PUSH
9014: LD_INT 1
9016: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9017: LD_ADDR_EXP 46
9021: PUSH
9022: LD_INT 1
9024: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9025: LD_ADDR_EXP 47
9029: PUSH
9030: LD_INT 2
9032: ST_TO_ADDR
// def_shared_vision := 1 ;
9033: LD_ADDR_EXP 48
9037: PUSH
9038: LD_INT 1
9040: ST_TO_ADDR
// def_morale_flags := 0 ;
9041: LD_ADDR_EXP 49
9045: PUSH
9046: LD_INT 0
9048: ST_TO_ADDR
// def_siberite_detection := 1 ;
9049: LD_ADDR_EXP 50
9053: PUSH
9054: LD_INT 1
9056: ST_TO_ADDR
// def_people_respawning := 0 ;
9057: LD_ADDR_EXP 51
9061: PUSH
9062: LD_INT 0
9064: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9065: LD_ADDR_EXP 52
9069: PUSH
9070: LD_INT 1
9072: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9073: LD_ADDR_EXP 53
9077: PUSH
9078: LD_INT 0
9080: ST_TO_ADDR
// def_builduptime := 3 ;
9081: LD_ADDR_EXP 54
9085: PUSH
9086: LD_INT 3
9088: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9089: LD_ADDR_VAR 0 2
9093: PUSH
9094: LD_INT 23
9096: PUSH
9097: EMPTY
9098: LIST
9099: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
9100: LD_ADDR_VAR 0 3
9104: PUSH
9105: LD_INT 37
9107: PUSH
9108: EMPTY
9109: LIST
9110: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9111: LD_ADDR_LOC 16
9115: PUSH
9116: EMPTY
9117: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9118: LD_ADDR_LOC 17
9122: PUSH
9123: EMPTY
9124: ST_TO_ADDR
// Banned_Controls := [ ] ;
9125: LD_ADDR_LOC 18
9129: PUSH
9130: EMPTY
9131: ST_TO_ADDR
// Banned_Engines := [ ] ;
9132: LD_ADDR_LOC 19
9136: PUSH
9137: EMPTY
9138: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9139: LD_ADDR_LOC 14
9143: PUSH
9144: LD_INT 31
9146: PUSH
9147: LD_INT 32
9149: PUSH
9150: LD_INT 33
9152: PUSH
9153: EMPTY
9154: LIST
9155: LIST
9156: LIST
9157: PUSH
9158: EMPTY
9159: LIST
9160: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
9161: LD_ADDR_LOC 15
9165: PUSH
9166: LD_INT 10
9168: PUSH
9169: EMPTY
9170: LIST
9171: ST_TO_ADDR
// end ; 8 :
9172: GO 9583
9174: LD_INT 8
9176: DOUBLE
9177: EQUAL
9178: IFTRUE 9182
9180: GO 9582
9182: POP
// begin def_base_level := 0 ;
9183: LD_ADDR_EXP 41
9187: PUSH
9188: LD_INT 0
9190: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
9191: LD_ADDR_EXP 42
9195: PUSH
9196: LD_INT 0
9198: PPUSH
9199: LD_INT 1
9201: PPUSH
9202: CALL_OW 12
9206: ST_TO_ADDR
// def_skill_level := 0 ;
9207: LD_ADDR_EXP 43
9211: PUSH
9212: LD_INT 0
9214: ST_TO_ADDR
// def_starting_resources := 2 ;
9215: LD_ADDR_EXP 44
9219: PUSH
9220: LD_INT 2
9222: ST_TO_ADDR
// def_shipments_density := 1 ;
9223: LD_ADDR_EXP 45
9227: PUSH
9228: LD_INT 1
9230: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9231: LD_ADDR_EXP 46
9235: PUSH
9236: LD_INT 0
9238: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
9239: LD_ADDR_EXP 47
9243: PUSH
9244: LD_INT 0
9246: ST_TO_ADDR
// def_shared_vision := 1 ;
9247: LD_ADDR_EXP 48
9251: PUSH
9252: LD_INT 1
9254: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
9255: LD_ADDR_EXP 49
9259: PUSH
9260: LD_INT 0
9262: PPUSH
9263: LD_INT 2
9265: PPUSH
9266: CALL_OW 12
9270: ST_TO_ADDR
// def_siberite_detection := 0 ;
9271: LD_ADDR_EXP 50
9275: PUSH
9276: LD_INT 0
9278: ST_TO_ADDR
// def_people_respawning := 0 ;
9279: LD_ADDR_EXP 51
9283: PUSH
9284: LD_INT 0
9286: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
9287: LD_ADDR_EXP 52
9291: PUSH
9292: LD_INT 2
9294: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9295: LD_ADDR_EXP 53
9299: PUSH
9300: LD_INT 0
9302: ST_TO_ADDR
// def_builduptime := 0 ;
9303: LD_ADDR_EXP 54
9307: PUSH
9308: LD_INT 0
9310: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
9311: LD_ADDR_VAR 0 2
9315: PUSH
9316: LD_INT 23
9318: PUSH
9319: LD_INT 20
9321: PUSH
9322: LD_INT 40
9324: PUSH
9325: LD_INT 47
9327: PUSH
9328: LD_INT 46
9330: PUSH
9331: LD_INT 39
9333: PUSH
9334: LD_INT 71
9336: PUSH
9337: LD_INT 34
9339: PUSH
9340: LD_INT 41
9342: PUSH
9343: LD_INT 44
9345: PUSH
9346: LD_INT 17
9348: PUSH
9349: LD_INT 16
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
9366: LD_ADDR_VAR 0 3
9370: PUSH
9371: LD_INT 37
9373: PUSH
9374: LD_INT 5
9376: PUSH
9377: LD_INT 13
9379: PUSH
9380: LD_INT 34
9382: PUSH
9383: LD_INT 12
9385: PUSH
9386: LD_INT 15
9388: PUSH
9389: LD_INT 11
9391: PUSH
9392: LD_INT 14
9394: PUSH
9395: LD_INT 29
9397: PUSH
9398: LD_INT 30
9400: PUSH
9401: LD_INT 28
9403: PUSH
9404: LD_INT 24
9406: PUSH
9407: LD_INT 25
9409: PUSH
9410: LD_INT 20
9412: PUSH
9413: LD_INT 21
9415: PUSH
9416: LD_INT 22
9418: PUSH
9419: LD_INT 36
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9441: LD_ADDR_LOC 16
9445: PUSH
9446: EMPTY
9447: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
9448: LD_ADDR_LOC 17
9452: PUSH
9453: LD_INT 14
9455: PUSH
9456: EMPTY
9457: LIST
9458: ST_TO_ADDR
// Banned_Controls := [ ] ;
9459: LD_ADDR_LOC 18
9463: PUSH
9464: EMPTY
9465: ST_TO_ADDR
// Banned_Engines := [ ] ;
9466: LD_ADDR_LOC 19
9470: PUSH
9471: EMPTY
9472: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
9473: LD_ADDR_LOC 14
9477: PUSH
9478: LD_INT 31
9480: PUSH
9481: LD_INT 32
9483: PUSH
9484: EMPTY
9485: LIST
9486: LIST
9487: PUSH
9488: LD_INT 4
9490: PUSH
9491: EMPTY
9492: LIST
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
9498: LD_ADDR_LOC 15
9502: PUSH
9503: LD_INT 2
9505: PUSH
9506: LD_INT 1
9508: PUSH
9509: EMPTY
9510: LIST
9511: LIST
9512: ST_TO_ADDR
// for i := 1 to 8 do
9513: LD_ADDR_VAR 0 4
9517: PUSH
9518: DOUBLE
9519: LD_INT 1
9521: DEC
9522: ST_TO_ADDR
9523: LD_INT 8
9525: PUSH
9526: FOR_TO
9527: IFFALSE 9578
// if ( Side_Nations [ i ] = 3 ) then
9529: LD_EXP 22
9533: PUSH
9534: LD_VAR 0 4
9538: ARRAY
9539: PUSH
9540: LD_INT 3
9542: EQUAL
9543: IFFALSE 9576
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
9545: LD_ADDR_EXP 22
9549: PUSH
9550: LD_EXP 22
9554: PPUSH
9555: LD_VAR 0 4
9559: PPUSH
9560: LD_INT 1
9562: PPUSH
9563: LD_INT 2
9565: PPUSH
9566: CALL_OW 12
9570: PPUSH
9571: CALL_OW 1
9575: ST_TO_ADDR
9576: GO 9526
9578: POP
9579: POP
// end ; end ;
9580: GO 9583
9582: POP
// for i := 1 to 8 do
9583: LD_ADDR_VAR 0 4
9587: PUSH
9588: DOUBLE
9589: LD_INT 1
9591: DEC
9592: ST_TO_ADDR
9593: LD_INT 8
9595: PUSH
9596: FOR_TO
9597: IFFALSE 9681
// if Side_Positions [ i ] then
9599: LD_EXP 21
9603: PUSH
9604: LD_VAR 0 4
9608: ARRAY
9609: IFFALSE 9679
// begin for j in Unavailable_Techs do
9611: LD_ADDR_VAR 0 5
9615: PUSH
9616: LD_VAR 0 2
9620: PUSH
9621: FOR_IN
9622: IFFALSE 9643
// SetTech ( j , i , 0 ) ;
9624: LD_VAR 0 5
9628: PPUSH
9629: LD_VAR 0 4
9633: PPUSH
9634: LD_INT 0
9636: PPUSH
9637: CALL_OW 322
9641: GO 9621
9643: POP
9644: POP
// for j in Unavailable_Builds do
9645: LD_ADDR_VAR 0 5
9649: PUSH
9650: LD_VAR 0 3
9654: PUSH
9655: FOR_IN
9656: IFFALSE 9677
// SetRestrict ( j , i , 0 ) ;
9658: LD_VAR 0 5
9662: PPUSH
9663: LD_VAR 0 4
9667: PPUSH
9668: LD_INT 0
9670: PPUSH
9671: CALL_OW 324
9675: GO 9655
9677: POP
9678: POP
// end ;
9679: GO 9596
9681: POP
9682: POP
// end ;
9683: LD_VAR 0 1
9687: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
9688: LD_INT 0
9690: PPUSH
9691: PPUSH
9692: PPUSH
9693: PPUSH
9694: PPUSH
9695: PPUSH
9696: PPUSH
// for i := 1 to Restricted_Builds do
9697: LD_ADDR_VAR 0 2
9701: PUSH
9702: DOUBLE
9703: LD_INT 1
9705: DEC
9706: ST_TO_ADDR
9707: LD_LOC 14
9711: PUSH
9712: FOR_TO
9713: IFFALSE 10023
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
9715: LD_LOC 14
9719: PUSH
9720: LD_VAR 0 2
9724: ARRAY
9725: PUSH
9726: LD_INT 1
9728: ARRAY
9729: PUSH
9730: LD_INT 31
9732: DOUBLE
9733: EQUAL
9734: IFTRUE 9750
9736: LD_INT 32
9738: DOUBLE
9739: EQUAL
9740: IFTRUE 9750
9742: LD_INT 33
9744: DOUBLE
9745: EQUAL
9746: IFTRUE 9750
9748: GO 9761
9750: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
9751: LD_ADDR_VAR 0 6
9755: PUSH
9756: LD_STRING #Turrets
9758: ST_TO_ADDR
9759: GO 9806
9761: LD_INT 4
9763: DOUBLE
9764: EQUAL
9765: IFTRUE 9775
9767: LD_INT 5
9769: DOUBLE
9770: EQUAL
9771: IFTRUE 9775
9773: GO 9786
9775: POP
// btype := #Armouries ; b_Behemoth :
9776: LD_ADDR_VAR 0 6
9780: PUSH
9781: LD_STRING #Armouries
9783: ST_TO_ADDR
9784: GO 9806
9786: LD_INT 37
9788: DOUBLE
9789: EQUAL
9790: IFTRUE 9794
9792: GO 9805
9794: POP
// btype := #Behemoths ; end ;
9795: LD_ADDR_VAR 0 6
9799: PUSH
9800: LD_STRING #Behemoths
9802: ST_TO_ADDR
9803: GO 9806
9805: POP
// list := [ ] ;
9806: LD_ADDR_VAR 0 7
9810: PUSH
9811: EMPTY
9812: ST_TO_ADDR
// for j := 1 to 8 do
9813: LD_ADDR_VAR 0 3
9817: PUSH
9818: DOUBLE
9819: LD_INT 1
9821: DEC
9822: ST_TO_ADDR
9823: LD_INT 8
9825: PUSH
9826: FOR_TO
9827: IFFALSE 9920
// if Side_Positions [ j ] then
9829: LD_EXP 21
9833: PUSH
9834: LD_VAR 0 3
9838: ARRAY
9839: IFFALSE 9918
// begin amount := 0 ;
9841: LD_ADDR_VAR 0 5
9845: PUSH
9846: LD_INT 0
9848: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
9849: LD_ADDR_VAR 0 4
9853: PUSH
9854: LD_LOC 14
9858: PUSH
9859: LD_VAR 0 2
9863: ARRAY
9864: PUSH
9865: FOR_IN
9866: IFFALSE 9914
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
9868: LD_ADDR_VAR 0 5
9872: PUSH
9873: LD_VAR 0 5
9877: PUSH
9878: LD_INT 22
9880: PUSH
9881: LD_VAR 0 3
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PUSH
9890: LD_INT 30
9892: PUSH
9893: LD_VAR 0 4
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: PPUSH
9906: CALL_OW 69
9910: PLUS
9911: ST_TO_ADDR
9912: GO 9865
9914: POP
9915: POP
// break ;
9916: GO 9920
// end ;
9918: GO 9826
9920: POP
9921: POP
// list := [ ] ;
9922: LD_ADDR_VAR 0 7
9926: PUSH
9927: EMPTY
9928: ST_TO_ADDR
// for j := 1 to 8 do
9929: LD_ADDR_VAR 0 3
9933: PUSH
9934: DOUBLE
9935: LD_INT 1
9937: DEC
9938: ST_TO_ADDR
9939: LD_INT 8
9941: PUSH
9942: FOR_TO
9943: IFFALSE 9963
// list := list ^ amount ;
9945: LD_ADDR_VAR 0 7
9949: PUSH
9950: LD_VAR 0 7
9954: PUSH
9955: LD_VAR 0 5
9959: ADD
9960: ST_TO_ADDR
9961: GO 9942
9963: POP
9964: POP
// Already_Built := Already_Built ^ [ list ] ;
9965: LD_ADDR_LOC 20
9969: PUSH
9970: LD_LOC 20
9974: PUSH
9975: LD_VAR 0 7
9979: PUSH
9980: EMPTY
9981: LIST
9982: ADD
9983: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
9984: LD_ADDR_LOC 21
9988: PUSH
9989: LD_LOC 21
9993: PUSH
9994: LD_VAR 0 6
9998: PUSH
9999: LD_VAR 0 5
10003: PUSH
10004: LD_LOC 15
10008: PUSH
10009: LD_VAR 0 2
10013: ARRAY
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: LIST
10019: ADD
10020: ST_TO_ADDR
// end ;
10021: GO 9712
10023: POP
10024: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10025: LD_ADDR_LOC 22
10029: PUSH
10030: LD_INT 0
10032: PUSH
10033: LD_INT 0
10035: PUSH
10036: LD_INT 0
10038: PUSH
10039: LD_INT 0
10041: PUSH
10042: LD_INT 0
10044: PUSH
10045: LD_INT 0
10047: PUSH
10048: LD_INT 0
10050: PUSH
10051: LD_INT 0
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: ST_TO_ADDR
// if Limits_Info then
10064: LD_LOC 21
10068: IFFALSE 10084
// Limits_Info := #Limits ^ Limits_Info ;
10070: LD_ADDR_LOC 21
10074: PUSH
10075: LD_STRING #Limits
10077: PUSH
10078: LD_LOC 21
10082: ADD
10083: ST_TO_ADDR
// end ;
10084: LD_VAR 0 1
10088: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
10089: LD_INT 0
10091: PPUSH
10092: PPUSH
10093: PPUSH
10094: PPUSH
// for i := 1 to Restricted_Builds do
10095: LD_ADDR_VAR 0 7
10099: PUSH
10100: DOUBLE
10101: LD_INT 1
10103: DEC
10104: ST_TO_ADDR
10105: LD_LOC 14
10109: PUSH
10110: FOR_TO
10111: IFFALSE 10534
// if BType in Restricted_Builds [ i ] then
10113: LD_VAR 0 2
10117: PUSH
10118: LD_LOC 14
10122: PUSH
10123: LD_VAR 0 7
10127: ARRAY
10128: IN
10129: IFFALSE 10532
// begin if old_side then
10131: LD_VAR 0 4
10135: IFFALSE 10261
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
10137: LD_LOC 20
10141: PUSH
10142: LD_VAR 0 7
10146: ARRAY
10147: PUSH
10148: LD_VAR 0 3
10152: ARRAY
10153: PUSH
10154: LD_VAR 0 5
10158: PLUS
10159: PUSH
10160: LD_LOC 15
10164: PUSH
10165: LD_VAR 0 7
10169: ARRAY
10170: GREATER
10171: IFFALSE 10197
// begin SetSide ( un , old_side ) ;
10173: LD_VAR 0 1
10177: PPUSH
10178: LD_VAR 0 4
10182: PPUSH
10183: CALL_OW 235
// count := 0 ;
10187: LD_ADDR_VAR 0 5
10191: PUSH
10192: LD_INT 0
10194: ST_TO_ADDR
// end else
10195: GO 10261
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
10197: LD_ADDR_LOC 20
10201: PUSH
10202: LD_LOC 20
10206: PPUSH
10207: LD_VAR 0 7
10211: PPUSH
10212: LD_LOC 20
10216: PUSH
10217: LD_VAR 0 7
10221: ARRAY
10222: PPUSH
10223: LD_VAR 0 4
10227: PPUSH
10228: LD_LOC 20
10232: PUSH
10233: LD_VAR 0 7
10237: ARRAY
10238: PUSH
10239: LD_VAR 0 4
10243: ARRAY
10244: PUSH
10245: LD_VAR 0 5
10249: MINUS
10250: PPUSH
10251: CALL_OW 1
10255: PPUSH
10256: CALL_OW 1
10260: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
10261: LD_ADDR_LOC 20
10265: PUSH
10266: LD_LOC 20
10270: PPUSH
10271: LD_VAR 0 7
10275: PPUSH
10276: LD_LOC 20
10280: PUSH
10281: LD_VAR 0 7
10285: ARRAY
10286: PPUSH
10287: LD_VAR 0 3
10291: PPUSH
10292: LD_LOC 20
10296: PUSH
10297: LD_VAR 0 7
10301: ARRAY
10302: PUSH
10303: LD_VAR 0 3
10307: ARRAY
10308: PUSH
10309: LD_VAR 0 5
10313: PLUS
10314: PPUSH
10315: CALL_OW 1
10319: PPUSH
10320: CALL_OW 1
10324: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
10325: LD_VAR 0 5
10329: PUSH
10330: LD_INT 0
10332: NONEQUAL
10333: PUSH
10334: LD_VAR 0 3
10338: PUSH
10339: LD_OWVAR 2
10343: EQUAL
10344: AND
10345: IFFALSE 10388
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
10347: LD_ADDR_LOC 21
10351: PUSH
10352: LD_LOC 21
10356: PPUSH
10357: LD_INT 3
10359: PUSH
10360: LD_VAR 0 7
10364: MUL
10365: PPUSH
10366: LD_LOC 20
10370: PUSH
10371: LD_VAR 0 7
10375: ARRAY
10376: PUSH
10377: LD_VAR 0 3
10381: ARRAY
10382: PPUSH
10383: CALL_OW 1
10387: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
10388: LD_LOC 20
10392: PUSH
10393: LD_VAR 0 7
10397: ARRAY
10398: PUSH
10399: LD_VAR 0 3
10403: ARRAY
10404: PUSH
10405: LD_LOC 15
10409: PUSH
10410: LD_VAR 0 7
10414: ARRAY
10415: GREATER
10416: IFFALSE 10443
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
10418: LD_ADDR_LOC 22
10422: PUSH
10423: LD_LOC 22
10427: PPUSH
10428: LD_VAR 0 3
10432: PPUSH
10433: LD_INT 1
10435: PPUSH
10436: CALL_OW 1
10440: ST_TO_ADDR
// end else
10441: GO 10530
// begin for j := 1 to Restricted_Builds do
10443: LD_ADDR_VAR 0 8
10447: PUSH
10448: DOUBLE
10449: LD_INT 1
10451: DEC
10452: ST_TO_ADDR
10453: LD_LOC 14
10457: PUSH
10458: FOR_TO
10459: IFFALSE 10503
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
10461: LD_LOC 20
10465: PUSH
10466: LD_VAR 0 8
10470: ARRAY
10471: PUSH
10472: LD_VAR 0 3
10476: ARRAY
10477: PUSH
10478: LD_LOC 15
10482: PUSH
10483: LD_VAR 0 8
10487: ARRAY
10488: GREATER
10489: IFFALSE 10501
// begin Is_Cheater := true ;
10491: LD_ADDR_VAR 0 9
10495: PUSH
10496: LD_INT 1
10498: ST_TO_ADDR
// break ;
10499: GO 10503
// end ;
10501: GO 10458
10503: POP
10504: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
10505: LD_ADDR_LOC 22
10509: PUSH
10510: LD_LOC 22
10514: PPUSH
10515: LD_VAR 0 3
10519: PPUSH
10520: LD_VAR 0 9
10524: PPUSH
10525: CALL_OW 1
10529: ST_TO_ADDR
// end ; break ;
10530: GO 10534
// end ;
10532: GO 10110
10534: POP
10535: POP
// end ;
10536: LD_VAR 0 6
10540: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
10541: LD_VAR 0 5
10545: PUSH
10546: LD_LOC 16
10550: IN
10551: PUSH
10552: LD_VAR 0 2
10556: PUSH
10557: LD_LOC 17
10561: IN
10562: OR
10563: PUSH
10564: LD_VAR 0 4
10568: PUSH
10569: LD_LOC 18
10573: IN
10574: OR
10575: PUSH
10576: LD_VAR 0 3
10580: PUSH
10581: LD_LOC 19
10585: IN
10586: OR
10587: IFFALSE 10598
// ComCancel ( factory ) ;
10589: LD_VAR 0 1
10593: PPUSH
10594: CALL_OW 127
// end ;
10598: PPOPN 5
10600: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
10601: LD_VAR 0 2
10605: PUSH
10606: LD_LOC 16
10610: IN
10611: IFFALSE 10622
// ComCancel ( building ) ;
10613: LD_VAR 0 1
10617: PPUSH
10618: CALL_OW 127
// end ; end_of_file
10622: PPOPN 2
10624: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
10625: LD_INT 0
10627: PPUSH
10628: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
10629: LD_ADDR_VAR 0 2
10633: PUSH
10634: LD_STRING #Multi1x1-Time
10636: PUSH
10637: LD_OWVAR 1
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: ST_TO_ADDR
// if WaitServerStrings then
10646: LD_EXP 57
10650: IFFALSE 10668
// AllStrings = AllStrings ^ WaitServerStrings ;
10652: LD_ADDR_VAR 0 2
10656: PUSH
10657: LD_VAR 0 2
10661: PUSH
10662: LD_EXP 57
10666: ADD
10667: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
10668: LD_INT 0
10670: PUSH
10671: LD_EXP 12
10675: PUSH
10676: LD_OWVAR 1
10680: MINUS
10681: LESSEQUAL
10682: IFFALSE 10713
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
10684: LD_ADDR_VAR 0 2
10688: PUSH
10689: LD_VAR 0 2
10693: PUSH
10694: LD_STRING #allowedsibbomb
10696: PUSH
10697: LD_EXP 12
10701: PUSH
10702: LD_OWVAR 1
10706: MINUS
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: ADD
10712: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
10713: LD_INT 0
10715: PUSH
10716: LD_EXP 60
10720: PUSH
10721: LD_OWVAR 1
10725: MINUS
10726: LESSEQUAL
10727: IFFALSE 10758
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
10729: LD_ADDR_VAR 0 2
10733: PUSH
10734: LD_VAR 0 2
10738: PUSH
10739: LD_STRING #builduptime
10741: PUSH
10742: LD_EXP 60
10746: PUSH
10747: LD_OWVAR 1
10751: MINUS
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: ADD
10757: ST_TO_ADDR
// if ( ExtraStrings ) then
10758: LD_EXP 56
10762: IFFALSE 10784
// AllStrings := AllStrings ^  ^ ExtraStrings ;
10764: LD_ADDR_VAR 0 2
10768: PUSH
10769: LD_VAR 0 2
10773: PUSH
10774: LD_STRING 
10776: ADD
10777: PUSH
10778: LD_EXP 56
10782: ADD
10783: ST_TO_ADDR
// if ( LimitsStrings ) then
10784: CALL 7465 0 0
10788: IFFALSE 10810
// AllStrings := AllStrings ^  ^ LimitsStrings ;
10790: LD_ADDR_VAR 0 2
10794: PUSH
10795: LD_VAR 0 2
10799: PUSH
10800: LD_STRING 
10802: ADD
10803: PUSH
10804: CALL 7465 0 0
10808: ADD
10809: ST_TO_ADDR
// Display_Strings := AllStrings ;
10810: LD_ADDR_OWVAR 47
10814: PUSH
10815: LD_VAR 0 2
10819: ST_TO_ADDR
// end ;
10820: LD_VAR 0 1
10824: RET
// every 0 0$1 do
10825: GO 10827
10827: DISABLE
// begin ShowTimer ;
10828: CALL 10625 0 0
// enable ;
10832: ENABLE
// end ; end_of_file
10833: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
10834: LD_INT 0
10836: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
10837: LD_VAR 0 1
10841: PPUSH
10842: CALL_OW 255
10846: PUSH
10847: LD_VAR 0 4
10851: EQUAL
10852: IFFALSE 10871
// begin SetAchievement ( ACH_RAD ) ;
10854: LD_STRING ACH_RAD
10856: PPUSH
10857: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
10861: LD_STRING ACH_NL
10863: PPUSH
10864: LD_INT 1
10866: PPUSH
10867: CALL_OW 564
// end end ;
10871: LD_VAR 0 5
10875: RET
// export function SA_Win ( side ) ; begin
10876: LD_INT 0
10878: PPUSH
// case side of 1 :
10879: LD_VAR 0 1
10883: PUSH
10884: LD_INT 1
10886: DOUBLE
10887: EQUAL
10888: IFTRUE 10892
10890: GO 10905
10892: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
10893: LD_STRING ACH_AH
10895: PPUSH
10896: LD_INT 1
10898: PPUSH
10899: CALL_OW 564
10903: GO 11068
10905: LD_INT 2
10907: DOUBLE
10908: EQUAL
10909: IFTRUE 10913
10911: GO 10926
10913: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
10914: LD_STRING ACH_E
10916: PPUSH
10917: LD_INT 1
10919: PPUSH
10920: CALL_OW 564
10924: GO 11068
10926: LD_INT 3
10928: DOUBLE
10929: EQUAL
10930: IFTRUE 10934
10932: GO 10947
10934: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
10935: LD_STRING ACH_OOL
10937: PPUSH
10938: LD_INT 1
10940: PPUSH
10941: CALL_OW 564
10945: GO 11068
10947: LD_INT 1
10949: PUSH
10950: LD_INT 2
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: DOUBLE
10957: EQUAL
10958: IFTRUE 10962
10960: GO 10987
10962: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
10963: LD_STRING ACH_AH
10965: PPUSH
10966: LD_REAL  5.00000000000000E-0001
10969: PPUSH
10970: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
10974: LD_STRING ACH_E
10976: PPUSH
10977: LD_REAL  5.00000000000000E-0001
10980: PPUSH
10981: CALL_OW 564
// end ; [ 2 , 3 ] :
10985: GO 11068
10987: LD_INT 2
10989: PUSH
10990: LD_INT 3
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: DOUBLE
10997: EQUAL
10998: IFTRUE 11002
11000: GO 11027
11002: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
11003: LD_STRING ACH_OOL
11005: PPUSH
11006: LD_REAL  5.00000000000000E-0001
11009: PPUSH
11010: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
11014: LD_STRING ACH_E
11016: PPUSH
11017: LD_REAL  5.00000000000000E-0001
11020: PPUSH
11021: CALL_OW 564
// end ; [ 3 , 1 ] :
11025: GO 11068
11027: LD_INT 3
11029: PUSH
11030: LD_INT 1
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: DOUBLE
11037: EQUAL
11038: IFTRUE 11042
11040: GO 11067
11042: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
11043: LD_STRING ACH_AH
11045: PPUSH
11046: LD_REAL  5.00000000000000E-0001
11049: PPUSH
11050: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
11054: LD_STRING ACH_OOL
11056: PPUSH
11057: LD_REAL  5.00000000000000E-0001
11060: PPUSH
11061: CALL_OW 564
// end ; end ;
11065: GO 11068
11067: POP
// end ; end_of_file
11068: LD_VAR 0 2
11072: RET
// export function SetMpTechs ( ) ; var side , i ; begin
11073: LD_INT 0
11075: PPUSH
11076: PPUSH
11077: PPUSH
// for side = 1 to 8 do
11078: LD_ADDR_VAR 0 2
11082: PUSH
11083: DOUBLE
11084: LD_INT 1
11086: DEC
11087: ST_TO_ADDR
11088: LD_INT 8
11090: PUSH
11091: FOR_TO
11092: IFFALSE 11213
// begin for i = 1 to 72 do
11094: LD_ADDR_VAR 0 3
11098: PUSH
11099: DOUBLE
11100: LD_INT 1
11102: DEC
11103: ST_TO_ADDR
11104: LD_INT 72
11106: PUSH
11107: FOR_TO
11108: IFFALSE 11139
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
11110: LD_VAR 0 3
11114: PPUSH
11115: LD_VAR 0 2
11119: PPUSH
11120: LD_INT 0
11122: PPUSH
11123: LD_VAR 0 3
11127: PPUSH
11128: CALL_OW 565
11132: PPUSH
11133: CALL_OW 322
11137: GO 11107
11139: POP
11140: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
11141: LD_INT 73
11143: PPUSH
11144: LD_VAR 0 2
11148: PPUSH
11149: LD_INT 0
11151: PPUSH
11152: LD_INT 25
11154: PPUSH
11155: CALL_OW 565
11159: PPUSH
11160: CALL_OW 322
// for i = 0 to 40 do
11164: LD_ADDR_VAR 0 3
11168: PUSH
11169: DOUBLE
11170: LD_INT 0
11172: DEC
11173: ST_TO_ADDR
11174: LD_INT 40
11176: PUSH
11177: FOR_TO
11178: IFFALSE 11209
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
11180: LD_VAR 0 3
11184: PPUSH
11185: LD_VAR 0 2
11189: PPUSH
11190: LD_INT 1
11192: PPUSH
11193: LD_VAR 0 3
11197: PPUSH
11198: CALL_OW 565
11202: PPUSH
11203: CALL_OW 324
11207: GO 11177
11209: POP
11210: POP
// end ;
11211: GO 11091
11213: POP
11214: POP
// end ;
11215: LD_VAR 0 1
11219: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
11220: LD_INT 0
11222: PPUSH
11223: PPUSH
11224: PPUSH
// for side = 1 to 8 do
11225: LD_ADDR_VAR 0 3
11229: PUSH
11230: DOUBLE
11231: LD_INT 1
11233: DEC
11234: ST_TO_ADDR
11235: LD_INT 8
11237: PUSH
11238: FOR_TO
11239: IFFALSE 15235
// begin for i = 1 to 73 do
11241: LD_ADDR_VAR 0 4
11245: PUSH
11246: DOUBLE
11247: LD_INT 1
11249: DEC
11250: ST_TO_ADDR
11251: LD_INT 73
11253: PUSH
11254: FOR_TO
11255: IFFALSE 11276
// SetTech ( i , side , state_disabled ) ;
11257: LD_VAR 0 4
11261: PPUSH
11262: LD_VAR 0 3
11266: PPUSH
11267: LD_INT 0
11269: PPUSH
11270: CALL_OW 322
11274: GO 11254
11276: POP
11277: POP
// for i = 0 to 40 do
11278: LD_ADDR_VAR 0 4
11282: PUSH
11283: DOUBLE
11284: LD_INT 0
11286: DEC
11287: ST_TO_ADDR
11288: LD_INT 40
11290: PUSH
11291: FOR_TO
11292: IFFALSE 11313
// SetRestrict ( i , side , false ) ;
11294: LD_VAR 0 4
11298: PPUSH
11299: LD_VAR 0 3
11303: PPUSH
11304: LD_INT 0
11306: PPUSH
11307: CALL_OW 324
11311: GO 11291
11313: POP
11314: POP
// case level of 1 :
11315: LD_VAR 0 1
11319: PUSH
11320: LD_INT 1
11322: DOUBLE
11323: EQUAL
11324: IFTRUE 11328
11326: GO 11481
11328: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11329: LD_INT 35
11331: PPUSH
11332: LD_VAR 0 3
11336: PPUSH
11337: LD_INT 1
11339: PPUSH
11340: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11344: LD_INT 45
11346: PPUSH
11347: LD_VAR 0 3
11351: PPUSH
11352: LD_INT 1
11354: PPUSH
11355: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11359: LD_INT 46
11361: PPUSH
11362: LD_VAR 0 3
11366: PPUSH
11367: LD_INT 1
11369: PPUSH
11370: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11374: LD_INT 47
11376: PPUSH
11377: LD_VAR 0 3
11381: PPUSH
11382: LD_INT 1
11384: PPUSH
11385: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11389: LD_INT 0
11391: PPUSH
11392: LD_VAR 0 3
11396: PPUSH
11397: LD_INT 1
11399: PPUSH
11400: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11404: LD_INT 2
11406: PPUSH
11407: LD_VAR 0 3
11411: PPUSH
11412: LD_INT 1
11414: PPUSH
11415: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11419: LD_INT 4
11421: PPUSH
11422: LD_VAR 0 3
11426: PPUSH
11427: LD_INT 1
11429: PPUSH
11430: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11434: LD_INT 6
11436: PPUSH
11437: LD_VAR 0 3
11441: PPUSH
11442: LD_INT 1
11444: PPUSH
11445: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11449: LD_INT 29
11451: PPUSH
11452: LD_VAR 0 3
11456: PPUSH
11457: LD_INT 1
11459: PPUSH
11460: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11464: LD_INT 31
11466: PPUSH
11467: LD_VAR 0 3
11471: PPUSH
11472: LD_INT 1
11474: PPUSH
11475: CALL_OW 324
// end ; 2 :
11479: GO 15233
11481: LD_INT 2
11483: DOUBLE
11484: EQUAL
11485: IFTRUE 11489
11487: GO 11687
11489: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11490: LD_INT 35
11492: PPUSH
11493: LD_VAR 0 3
11497: PPUSH
11498: LD_INT 1
11500: PPUSH
11501: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11505: LD_INT 45
11507: PPUSH
11508: LD_VAR 0 3
11512: PPUSH
11513: LD_INT 1
11515: PPUSH
11516: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11520: LD_INT 46
11522: PPUSH
11523: LD_VAR 0 3
11527: PPUSH
11528: LD_INT 1
11530: PPUSH
11531: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11535: LD_INT 47
11537: PPUSH
11538: LD_VAR 0 3
11542: PPUSH
11543: LD_INT 1
11545: PPUSH
11546: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11550: LD_INT 1
11552: PPUSH
11553: LD_VAR 0 3
11557: PPUSH
11558: LD_INT 1
11560: PPUSH
11561: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11565: LD_INT 2
11567: PPUSH
11568: LD_VAR 0 3
11572: PPUSH
11573: LD_INT 1
11575: PPUSH
11576: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11580: LD_INT 11
11582: PPUSH
11583: LD_VAR 0 3
11587: PPUSH
11588: LD_INT 1
11590: PPUSH
11591: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11595: LD_INT 0
11597: PPUSH
11598: LD_VAR 0 3
11602: PPUSH
11603: LD_INT 1
11605: PPUSH
11606: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11610: LD_INT 2
11612: PPUSH
11613: LD_VAR 0 3
11617: PPUSH
11618: LD_INT 1
11620: PPUSH
11621: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11625: LD_INT 4
11627: PPUSH
11628: LD_VAR 0 3
11632: PPUSH
11633: LD_INT 1
11635: PPUSH
11636: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11640: LD_INT 6
11642: PPUSH
11643: LD_VAR 0 3
11647: PPUSH
11648: LD_INT 1
11650: PPUSH
11651: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11655: LD_INT 29
11657: PPUSH
11658: LD_VAR 0 3
11662: PPUSH
11663: LD_INT 1
11665: PPUSH
11666: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11670: LD_INT 31
11672: PPUSH
11673: LD_VAR 0 3
11677: PPUSH
11678: LD_INT 1
11680: PPUSH
11681: CALL_OW 324
// end ; 3 :
11685: GO 15233
11687: LD_INT 3
11689: DOUBLE
11690: EQUAL
11691: IFTRUE 11695
11693: GO 12148
11695: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11696: LD_INT 35
11698: PPUSH
11699: LD_VAR 0 3
11703: PPUSH
11704: LD_INT 1
11706: PPUSH
11707: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11711: LD_INT 45
11713: PPUSH
11714: LD_VAR 0 3
11718: PPUSH
11719: LD_INT 1
11721: PPUSH
11722: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11726: LD_INT 46
11728: PPUSH
11729: LD_VAR 0 3
11733: PPUSH
11734: LD_INT 1
11736: PPUSH
11737: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11741: LD_INT 47
11743: PPUSH
11744: LD_VAR 0 3
11748: PPUSH
11749: LD_INT 1
11751: PPUSH
11752: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11756: LD_INT 1
11758: PPUSH
11759: LD_VAR 0 3
11763: PPUSH
11764: LD_INT 1
11766: PPUSH
11767: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11771: LD_INT 2
11773: PPUSH
11774: LD_VAR 0 3
11778: PPUSH
11779: LD_INT 1
11781: PPUSH
11782: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11786: LD_INT 11
11788: PPUSH
11789: LD_VAR 0 3
11793: PPUSH
11794: LD_INT 1
11796: PPUSH
11797: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11801: LD_INT 48
11803: PPUSH
11804: LD_VAR 0 3
11808: PPUSH
11809: LD_INT 1
11811: PPUSH
11812: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11816: LD_INT 69
11818: PPUSH
11819: LD_VAR 0 3
11823: PPUSH
11824: LD_INT 1
11826: PPUSH
11827: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11831: LD_INT 39
11833: PPUSH
11834: LD_VAR 0 3
11838: PPUSH
11839: LD_INT 1
11841: PPUSH
11842: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11846: LD_INT 43
11848: PPUSH
11849: LD_VAR 0 3
11853: PPUSH
11854: LD_INT 1
11856: PPUSH
11857: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11861: LD_INT 51
11863: PPUSH
11864: LD_VAR 0 3
11868: PPUSH
11869: LD_INT 1
11871: PPUSH
11872: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11876: LD_INT 6
11878: PPUSH
11879: LD_VAR 0 3
11883: PPUSH
11884: LD_INT 1
11886: PPUSH
11887: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11891: LD_INT 0
11893: PPUSH
11894: LD_VAR 0 3
11898: PPUSH
11899: LD_INT 1
11901: PPUSH
11902: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11906: LD_INT 2
11908: PPUSH
11909: LD_VAR 0 3
11913: PPUSH
11914: LD_INT 1
11916: PPUSH
11917: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11921: LD_INT 3
11923: PPUSH
11924: LD_VAR 0 3
11928: PPUSH
11929: LD_INT 1
11931: PPUSH
11932: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11936: LD_INT 4
11938: PPUSH
11939: LD_VAR 0 3
11943: PPUSH
11944: LD_INT 1
11946: PPUSH
11947: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11951: LD_INT 6
11953: PPUSH
11954: LD_VAR 0 3
11958: PPUSH
11959: LD_INT 1
11961: PPUSH
11962: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11966: LD_INT 7
11968: PPUSH
11969: LD_VAR 0 3
11973: PPUSH
11974: LD_INT 1
11976: PPUSH
11977: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11981: LD_INT 8
11983: PPUSH
11984: LD_VAR 0 3
11988: PPUSH
11989: LD_INT 1
11991: PPUSH
11992: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11996: LD_INT 10
11998: PPUSH
11999: LD_VAR 0 3
12003: PPUSH
12004: LD_INT 1
12006: PPUSH
12007: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12011: LD_INT 15
12013: PPUSH
12014: LD_VAR 0 3
12018: PPUSH
12019: LD_INT 1
12021: PPUSH
12022: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12026: LD_INT 16
12028: PPUSH
12029: LD_VAR 0 3
12033: PPUSH
12034: LD_INT 1
12036: PPUSH
12037: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12041: LD_INT 17
12043: PPUSH
12044: LD_VAR 0 3
12048: PPUSH
12049: LD_INT 1
12051: PPUSH
12052: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12056: LD_INT 20
12058: PPUSH
12059: LD_VAR 0 3
12063: PPUSH
12064: LD_INT 1
12066: PPUSH
12067: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12071: LD_INT 26
12073: PPUSH
12074: LD_VAR 0 3
12078: PPUSH
12079: LD_INT 1
12081: PPUSH
12082: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12086: LD_INT 27
12088: PPUSH
12089: LD_VAR 0 3
12093: PPUSH
12094: LD_INT 1
12096: PPUSH
12097: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12101: LD_INT 29
12103: PPUSH
12104: LD_VAR 0 3
12108: PPUSH
12109: LD_INT 1
12111: PPUSH
12112: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12116: LD_INT 31
12118: PPUSH
12119: LD_VAR 0 3
12123: PPUSH
12124: LD_INT 1
12126: PPUSH
12127: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12131: LD_INT 32
12133: PPUSH
12134: LD_VAR 0 3
12138: PPUSH
12139: LD_INT 1
12141: PPUSH
12142: CALL_OW 324
// end ; 4 :
12146: GO 15233
12148: LD_INT 4
12150: DOUBLE
12151: EQUAL
12152: IFTRUE 12156
12154: GO 13104
12156: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12157: LD_INT 35
12159: PPUSH
12160: LD_VAR 0 3
12164: PPUSH
12165: LD_INT 1
12167: PPUSH
12168: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12172: LD_INT 45
12174: PPUSH
12175: LD_VAR 0 3
12179: PPUSH
12180: LD_INT 1
12182: PPUSH
12183: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12187: LD_INT 46
12189: PPUSH
12190: LD_VAR 0 3
12194: PPUSH
12195: LD_INT 1
12197: PPUSH
12198: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12202: LD_INT 47
12204: PPUSH
12205: LD_VAR 0 3
12209: PPUSH
12210: LD_INT 1
12212: PPUSH
12213: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12217: LD_INT 1
12219: PPUSH
12220: LD_VAR 0 3
12224: PPUSH
12225: LD_INT 1
12227: PPUSH
12228: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12232: LD_INT 2
12234: PPUSH
12235: LD_VAR 0 3
12239: PPUSH
12240: LD_INT 1
12242: PPUSH
12243: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12247: LD_INT 11
12249: PPUSH
12250: LD_VAR 0 3
12254: PPUSH
12255: LD_INT 1
12257: PPUSH
12258: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12262: LD_INT 20
12264: PPUSH
12265: LD_VAR 0 3
12269: PPUSH
12270: LD_INT 1
12272: PPUSH
12273: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12277: LD_INT 48
12279: PPUSH
12280: LD_VAR 0 3
12284: PPUSH
12285: LD_INT 1
12287: PPUSH
12288: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12292: LD_INT 49
12294: PPUSH
12295: LD_VAR 0 3
12299: PPUSH
12300: LD_INT 1
12302: PPUSH
12303: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12307: LD_INT 69
12309: PPUSH
12310: LD_VAR 0 3
12314: PPUSH
12315: LD_INT 1
12317: PPUSH
12318: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12322: LD_INT 39
12324: PPUSH
12325: LD_VAR 0 3
12329: PPUSH
12330: LD_INT 1
12332: PPUSH
12333: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12337: LD_INT 34
12339: PPUSH
12340: LD_VAR 0 3
12344: PPUSH
12345: LD_INT 1
12347: PPUSH
12348: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12352: LD_INT 42
12354: PPUSH
12355: LD_VAR 0 3
12359: PPUSH
12360: LD_INT 1
12362: PPUSH
12363: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12367: LD_INT 44
12369: PPUSH
12370: LD_VAR 0 3
12374: PPUSH
12375: LD_INT 1
12377: PPUSH
12378: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12382: LD_INT 41
12384: PPUSH
12385: LD_VAR 0 3
12389: PPUSH
12390: LD_INT 1
12392: PPUSH
12393: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12397: LD_INT 43
12399: PPUSH
12400: LD_VAR 0 3
12404: PPUSH
12405: LD_INT 1
12407: PPUSH
12408: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12412: LD_INT 70
12414: PPUSH
12415: LD_VAR 0 3
12419: PPUSH
12420: LD_INT 1
12422: PPUSH
12423: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12427: LD_INT 51
12429: PPUSH
12430: LD_VAR 0 3
12434: PPUSH
12435: LD_INT 1
12437: PPUSH
12438: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12442: LD_INT 52
12444: PPUSH
12445: LD_VAR 0 3
12449: PPUSH
12450: LD_INT 1
12452: PPUSH
12453: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12457: LD_INT 6
12459: PPUSH
12460: LD_VAR 0 3
12464: PPUSH
12465: LD_INT 1
12467: PPUSH
12468: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12472: LD_INT 15
12474: PPUSH
12475: LD_VAR 0 3
12479: PPUSH
12480: LD_INT 1
12482: PPUSH
12483: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12487: LD_INT 7
12489: PPUSH
12490: LD_VAR 0 3
12494: PPUSH
12495: LD_INT 1
12497: PPUSH
12498: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12502: LD_INT 12
12504: PPUSH
12505: LD_VAR 0 3
12509: PPUSH
12510: LD_INT 1
12512: PPUSH
12513: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12517: LD_INT 18
12519: PPUSH
12520: LD_VAR 0 3
12524: PPUSH
12525: LD_INT 1
12527: PPUSH
12528: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12532: LD_INT 60
12534: PPUSH
12535: LD_VAR 0 3
12539: PPUSH
12540: LD_INT 1
12542: PPUSH
12543: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12547: LD_INT 9
12549: PPUSH
12550: LD_VAR 0 3
12554: PPUSH
12555: LD_INT 1
12557: PPUSH
12558: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12562: LD_INT 30
12564: PPUSH
12565: LD_VAR 0 3
12569: PPUSH
12570: LD_INT 1
12572: PPUSH
12573: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12577: LD_INT 37
12579: PPUSH
12580: LD_VAR 0 3
12584: PPUSH
12585: LD_INT 1
12587: PPUSH
12588: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12592: LD_INT 5
12594: PPUSH
12595: LD_VAR 0 3
12599: PPUSH
12600: LD_INT 1
12602: PPUSH
12603: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12607: LD_INT 66
12609: PPUSH
12610: LD_VAR 0 3
12614: PPUSH
12615: LD_INT 1
12617: PPUSH
12618: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12622: LD_INT 21
12624: PPUSH
12625: LD_VAR 0 3
12629: PPUSH
12630: LD_INT 1
12632: PPUSH
12633: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12637: LD_INT 22
12639: PPUSH
12640: LD_VAR 0 3
12644: PPUSH
12645: LD_INT 1
12647: PPUSH
12648: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12652: LD_INT 54
12654: PPUSH
12655: LD_VAR 0 3
12659: PPUSH
12660: LD_INT 1
12662: PPUSH
12663: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12667: LD_INT 0
12669: PPUSH
12670: LD_VAR 0 3
12674: PPUSH
12675: LD_INT 1
12677: PPUSH
12678: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12682: LD_INT 1
12684: PPUSH
12685: LD_VAR 0 3
12689: PPUSH
12690: LD_INT 1
12692: PPUSH
12693: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12697: LD_INT 2
12699: PPUSH
12700: LD_VAR 0 3
12704: PPUSH
12705: LD_INT 1
12707: PPUSH
12708: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12712: LD_INT 3
12714: PPUSH
12715: LD_VAR 0 3
12719: PPUSH
12720: LD_INT 1
12722: PPUSH
12723: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12727: LD_INT 4
12729: PPUSH
12730: LD_VAR 0 3
12734: PPUSH
12735: LD_INT 1
12737: PPUSH
12738: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12742: LD_INT 5
12744: PPUSH
12745: LD_VAR 0 3
12749: PPUSH
12750: LD_INT 1
12752: PPUSH
12753: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12757: LD_INT 6
12759: PPUSH
12760: LD_VAR 0 3
12764: PPUSH
12765: LD_INT 1
12767: PPUSH
12768: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12772: LD_INT 7
12774: PPUSH
12775: LD_VAR 0 3
12779: PPUSH
12780: LD_INT 1
12782: PPUSH
12783: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12787: LD_INT 8
12789: PPUSH
12790: LD_VAR 0 3
12794: PPUSH
12795: LD_INT 1
12797: PPUSH
12798: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12802: LD_INT 10
12804: PPUSH
12805: LD_VAR 0 3
12809: PPUSH
12810: LD_INT 1
12812: PPUSH
12813: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12817: LD_INT 11
12819: PPUSH
12820: LD_VAR 0 3
12824: PPUSH
12825: LD_INT 1
12827: PPUSH
12828: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12832: LD_INT 12
12834: PPUSH
12835: LD_VAR 0 3
12839: PPUSH
12840: LD_INT 1
12842: PPUSH
12843: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12847: LD_INT 13
12849: PPUSH
12850: LD_VAR 0 3
12854: PPUSH
12855: LD_INT 1
12857: PPUSH
12858: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12862: LD_INT 14
12864: PPUSH
12865: LD_VAR 0 3
12869: PPUSH
12870: LD_INT 1
12872: PPUSH
12873: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12877: LD_INT 15
12879: PPUSH
12880: LD_VAR 0 3
12884: PPUSH
12885: LD_INT 1
12887: PPUSH
12888: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12892: LD_INT 16
12894: PPUSH
12895: LD_VAR 0 3
12899: PPUSH
12900: LD_INT 1
12902: PPUSH
12903: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12907: LD_INT 17
12909: PPUSH
12910: LD_VAR 0 3
12914: PPUSH
12915: LD_INT 1
12917: PPUSH
12918: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12922: LD_INT 19
12924: PPUSH
12925: LD_VAR 0 3
12929: PPUSH
12930: LD_INT 1
12932: PPUSH
12933: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12937: LD_INT 20
12939: PPUSH
12940: LD_VAR 0 3
12944: PPUSH
12945: LD_INT 1
12947: PPUSH
12948: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12952: LD_INT 21
12954: PPUSH
12955: LD_VAR 0 3
12959: PPUSH
12960: LD_INT 1
12962: PPUSH
12963: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12967: LD_INT 23
12969: PPUSH
12970: LD_VAR 0 3
12974: PPUSH
12975: LD_INT 1
12977: PPUSH
12978: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12982: LD_INT 26
12984: PPUSH
12985: LD_VAR 0 3
12989: PPUSH
12990: LD_INT 1
12992: PPUSH
12993: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12997: LD_INT 27
12999: PPUSH
13000: LD_VAR 0 3
13004: PPUSH
13005: LD_INT 1
13007: PPUSH
13008: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
13012: LD_INT 28
13014: PPUSH
13015: LD_VAR 0 3
13019: PPUSH
13020: LD_INT 1
13022: PPUSH
13023: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13027: LD_INT 29
13029: PPUSH
13030: LD_VAR 0 3
13034: PPUSH
13035: LD_INT 1
13037: PPUSH
13038: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
13042: LD_INT 30
13044: PPUSH
13045: LD_VAR 0 3
13049: PPUSH
13050: LD_INT 1
13052: PPUSH
13053: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13057: LD_INT 31
13059: PPUSH
13060: LD_VAR 0 3
13064: PPUSH
13065: LD_INT 1
13067: PPUSH
13068: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13072: LD_INT 32
13074: PPUSH
13075: LD_VAR 0 3
13079: PPUSH
13080: LD_INT 1
13082: PPUSH
13083: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
13087: LD_INT 36
13089: PPUSH
13090: LD_VAR 0 3
13094: PPUSH
13095: LD_INT 1
13097: PPUSH
13098: CALL_OW 324
// end ; 5 :
13102: GO 15233
13104: LD_INT 5
13106: DOUBLE
13107: EQUAL
13108: IFTRUE 13112
13110: GO 14225
13112: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13113: LD_INT 35
13115: PPUSH
13116: LD_VAR 0 3
13120: PPUSH
13121: LD_INT 1
13123: PPUSH
13124: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13128: LD_INT 45
13130: PPUSH
13131: LD_VAR 0 3
13135: PPUSH
13136: LD_INT 1
13138: PPUSH
13139: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13143: LD_INT 46
13145: PPUSH
13146: LD_VAR 0 3
13150: PPUSH
13151: LD_INT 1
13153: PPUSH
13154: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13158: LD_INT 47
13160: PPUSH
13161: LD_VAR 0 3
13165: PPUSH
13166: LD_INT 1
13168: PPUSH
13169: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13173: LD_INT 1
13175: PPUSH
13176: LD_VAR 0 3
13180: PPUSH
13181: LD_INT 1
13183: PPUSH
13184: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13188: LD_INT 2
13190: PPUSH
13191: LD_VAR 0 3
13195: PPUSH
13196: LD_INT 1
13198: PPUSH
13199: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13203: LD_INT 11
13205: PPUSH
13206: LD_VAR 0 3
13210: PPUSH
13211: LD_INT 1
13213: PPUSH
13214: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13218: LD_INT 20
13220: PPUSH
13221: LD_VAR 0 3
13225: PPUSH
13226: LD_INT 1
13228: PPUSH
13229: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13233: LD_INT 48
13235: PPUSH
13236: LD_VAR 0 3
13240: PPUSH
13241: LD_INT 1
13243: PPUSH
13244: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13248: LD_INT 49
13250: PPUSH
13251: LD_VAR 0 3
13255: PPUSH
13256: LD_INT 1
13258: PPUSH
13259: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13263: LD_INT 69
13265: PPUSH
13266: LD_VAR 0 3
13270: PPUSH
13271: LD_INT 1
13273: PPUSH
13274: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13278: LD_INT 39
13280: PPUSH
13281: LD_VAR 0 3
13285: PPUSH
13286: LD_INT 1
13288: PPUSH
13289: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13293: LD_INT 34
13295: PPUSH
13296: LD_VAR 0 3
13300: PPUSH
13301: LD_INT 1
13303: PPUSH
13304: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13308: LD_INT 42
13310: PPUSH
13311: LD_VAR 0 3
13315: PPUSH
13316: LD_INT 1
13318: PPUSH
13319: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13323: LD_INT 44
13325: PPUSH
13326: LD_VAR 0 3
13330: PPUSH
13331: LD_INT 1
13333: PPUSH
13334: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13338: LD_INT 41
13340: PPUSH
13341: LD_VAR 0 3
13345: PPUSH
13346: LD_INT 1
13348: PPUSH
13349: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
13353: LD_INT 40
13355: PPUSH
13356: LD_VAR 0 3
13360: PPUSH
13361: LD_INT 1
13363: PPUSH
13364: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13368: LD_INT 43
13370: PPUSH
13371: LD_VAR 0 3
13375: PPUSH
13376: LD_INT 1
13378: PPUSH
13379: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13383: LD_INT 70
13385: PPUSH
13386: LD_VAR 0 3
13390: PPUSH
13391: LD_INT 1
13393: PPUSH
13394: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13398: LD_INT 51
13400: PPUSH
13401: LD_VAR 0 3
13405: PPUSH
13406: LD_INT 1
13408: PPUSH
13409: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13413: LD_INT 52
13415: PPUSH
13416: LD_VAR 0 3
13420: PPUSH
13421: LD_INT 1
13423: PPUSH
13424: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13428: LD_INT 6
13430: PPUSH
13431: LD_VAR 0 3
13435: PPUSH
13436: LD_INT 1
13438: PPUSH
13439: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13443: LD_INT 15
13445: PPUSH
13446: LD_VAR 0 3
13450: PPUSH
13451: LD_INT 1
13453: PPUSH
13454: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13458: LD_INT 7
13460: PPUSH
13461: LD_VAR 0 3
13465: PPUSH
13466: LD_INT 1
13468: PPUSH
13469: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13473: LD_INT 12
13475: PPUSH
13476: LD_VAR 0 3
13480: PPUSH
13481: LD_INT 1
13483: PPUSH
13484: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
13488: LD_INT 17
13490: PPUSH
13491: LD_VAR 0 3
13495: PPUSH
13496: LD_INT 1
13498: PPUSH
13499: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13503: LD_INT 18
13505: PPUSH
13506: LD_VAR 0 3
13510: PPUSH
13511: LD_INT 1
13513: PPUSH
13514: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13518: LD_INT 60
13520: PPUSH
13521: LD_VAR 0 3
13525: PPUSH
13526: LD_INT 1
13528: PPUSH
13529: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13533: LD_INT 32
13535: PPUSH
13536: LD_VAR 0 3
13540: PPUSH
13541: LD_INT 1
13543: PPUSH
13544: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13548: LD_INT 9
13550: PPUSH
13551: LD_VAR 0 3
13555: PPUSH
13556: LD_INT 1
13558: PPUSH
13559: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13563: LD_INT 57
13565: PPUSH
13566: LD_VAR 0 3
13570: PPUSH
13571: LD_INT 1
13573: PPUSH
13574: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13578: LD_INT 30
13580: PPUSH
13581: LD_VAR 0 3
13585: PPUSH
13586: LD_INT 1
13588: PPUSH
13589: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13593: LD_INT 37
13595: PPUSH
13596: LD_VAR 0 3
13600: PPUSH
13601: LD_INT 1
13603: PPUSH
13604: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13608: LD_INT 63
13610: PPUSH
13611: LD_VAR 0 3
13615: PPUSH
13616: LD_INT 1
13618: PPUSH
13619: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13623: LD_INT 3
13625: PPUSH
13626: LD_VAR 0 3
13630: PPUSH
13631: LD_INT 1
13633: PPUSH
13634: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13638: LD_INT 4
13640: PPUSH
13641: LD_VAR 0 3
13645: PPUSH
13646: LD_INT 1
13648: PPUSH
13649: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13653: LD_INT 5
13655: PPUSH
13656: LD_VAR 0 3
13660: PPUSH
13661: LD_INT 1
13663: PPUSH
13664: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13668: LD_INT 66
13670: PPUSH
13671: LD_VAR 0 3
13675: PPUSH
13676: LD_INT 1
13678: PPUSH
13679: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13683: LD_INT 21
13685: PPUSH
13686: LD_VAR 0 3
13690: PPUSH
13691: LD_INT 1
13693: PPUSH
13694: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13698: LD_INT 22
13700: PPUSH
13701: LD_VAR 0 3
13705: PPUSH
13706: LD_INT 1
13708: PPUSH
13709: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13713: LD_INT 19
13715: PPUSH
13716: LD_VAR 0 3
13720: PPUSH
13721: LD_INT 1
13723: PPUSH
13724: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13728: LD_INT 54
13730: PPUSH
13731: LD_VAR 0 3
13735: PPUSH
13736: LD_INT 1
13738: PPUSH
13739: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13743: LD_INT 55
13745: PPUSH
13746: LD_VAR 0 3
13750: PPUSH
13751: LD_INT 1
13753: PPUSH
13754: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13758: LD_INT 0
13760: PPUSH
13761: LD_VAR 0 3
13765: PPUSH
13766: LD_INT 1
13768: PPUSH
13769: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
13773: LD_INT 1
13775: PPUSH
13776: LD_VAR 0 3
13780: PPUSH
13781: LD_INT 1
13783: PPUSH
13784: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13788: LD_INT 2
13790: PPUSH
13791: LD_VAR 0 3
13795: PPUSH
13796: LD_INT 1
13798: PPUSH
13799: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
13803: LD_INT 3
13805: PPUSH
13806: LD_VAR 0 3
13810: PPUSH
13811: LD_INT 1
13813: PPUSH
13814: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13818: LD_INT 4
13820: PPUSH
13821: LD_VAR 0 3
13825: PPUSH
13826: LD_INT 1
13828: PPUSH
13829: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
13833: LD_INT 5
13835: PPUSH
13836: LD_VAR 0 3
13840: PPUSH
13841: LD_INT 1
13843: PPUSH
13844: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13848: LD_INT 6
13850: PPUSH
13851: LD_VAR 0 3
13855: PPUSH
13856: LD_INT 1
13858: PPUSH
13859: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13863: LD_INT 7
13865: PPUSH
13866: LD_VAR 0 3
13870: PPUSH
13871: LD_INT 1
13873: PPUSH
13874: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13878: LD_INT 8
13880: PPUSH
13881: LD_VAR 0 3
13885: PPUSH
13886: LD_INT 1
13888: PPUSH
13889: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13893: LD_INT 10
13895: PPUSH
13896: LD_VAR 0 3
13900: PPUSH
13901: LD_INT 1
13903: PPUSH
13904: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
13908: LD_INT 11
13910: PPUSH
13911: LD_VAR 0 3
13915: PPUSH
13916: LD_INT 1
13918: PPUSH
13919: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
13923: LD_INT 12
13925: PPUSH
13926: LD_VAR 0 3
13930: PPUSH
13931: LD_INT 1
13933: PPUSH
13934: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
13938: LD_INT 13
13940: PPUSH
13941: LD_VAR 0 3
13945: PPUSH
13946: LD_INT 1
13948: PPUSH
13949: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
13953: LD_INT 14
13955: PPUSH
13956: LD_VAR 0 3
13960: PPUSH
13961: LD_INT 1
13963: PPUSH
13964: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13968: LD_INT 15
13970: PPUSH
13971: LD_VAR 0 3
13975: PPUSH
13976: LD_INT 1
13978: PPUSH
13979: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13983: LD_INT 16
13985: PPUSH
13986: LD_VAR 0 3
13990: PPUSH
13991: LD_INT 1
13993: PPUSH
13994: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13998: LD_INT 17
14000: PPUSH
14001: LD_VAR 0 3
14005: PPUSH
14006: LD_INT 1
14008: PPUSH
14009: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
14013: LD_INT 18
14015: PPUSH
14016: LD_VAR 0 3
14020: PPUSH
14021: LD_INT 1
14023: PPUSH
14024: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
14028: LD_INT 19
14030: PPUSH
14031: LD_VAR 0 3
14035: PPUSH
14036: LD_INT 1
14038: PPUSH
14039: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
14043: LD_INT 20
14045: PPUSH
14046: LD_VAR 0 3
14050: PPUSH
14051: LD_INT 1
14053: PPUSH
14054: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
14058: LD_INT 21
14060: PPUSH
14061: LD_VAR 0 3
14065: PPUSH
14066: LD_INT 1
14068: PPUSH
14069: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
14073: LD_INT 23
14075: PPUSH
14076: LD_VAR 0 3
14080: PPUSH
14081: LD_INT 1
14083: PPUSH
14084: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
14088: LD_INT 26
14090: PPUSH
14091: LD_VAR 0 3
14095: PPUSH
14096: LD_INT 1
14098: PPUSH
14099: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
14103: LD_INT 27
14105: PPUSH
14106: LD_VAR 0 3
14110: PPUSH
14111: LD_INT 1
14113: PPUSH
14114: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
14118: LD_INT 28
14120: PPUSH
14121: LD_VAR 0 3
14125: PPUSH
14126: LD_INT 1
14128: PPUSH
14129: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14133: LD_INT 29
14135: PPUSH
14136: LD_VAR 0 3
14140: PPUSH
14141: LD_INT 1
14143: PPUSH
14144: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
14148: LD_INT 30
14150: PPUSH
14151: LD_VAR 0 3
14155: PPUSH
14156: LD_INT 1
14158: PPUSH
14159: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14163: LD_INT 31
14165: PPUSH
14166: LD_VAR 0 3
14170: PPUSH
14171: LD_INT 1
14173: PPUSH
14174: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
14178: LD_INT 32
14180: PPUSH
14181: LD_VAR 0 3
14185: PPUSH
14186: LD_INT 1
14188: PPUSH
14189: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
14193: LD_INT 33
14195: PPUSH
14196: LD_VAR 0 3
14200: PPUSH
14201: LD_INT 1
14203: PPUSH
14204: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
14208: LD_INT 36
14210: PPUSH
14211: LD_VAR 0 3
14215: PPUSH
14216: LD_INT 1
14218: PPUSH
14219: CALL_OW 324
// end ; 6 :
14223: GO 15233
14225: LD_INT 6
14227: DOUBLE
14228: EQUAL
14229: IFTRUE 14233
14231: GO 15158
14233: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14234: LD_INT 35
14236: PPUSH
14237: LD_VAR 0 3
14241: PPUSH
14242: LD_INT 1
14244: PPUSH
14245: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14249: LD_INT 45
14251: PPUSH
14252: LD_VAR 0 3
14256: PPUSH
14257: LD_INT 1
14259: PPUSH
14260: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14264: LD_INT 46
14266: PPUSH
14267: LD_VAR 0 3
14271: PPUSH
14272: LD_INT 1
14274: PPUSH
14275: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14279: LD_INT 47
14281: PPUSH
14282: LD_VAR 0 3
14286: PPUSH
14287: LD_INT 1
14289: PPUSH
14290: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14294: LD_INT 1
14296: PPUSH
14297: LD_VAR 0 3
14301: PPUSH
14302: LD_INT 1
14304: PPUSH
14305: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14309: LD_INT 2
14311: PPUSH
14312: LD_VAR 0 3
14316: PPUSH
14317: LD_INT 1
14319: PPUSH
14320: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14324: LD_INT 11
14326: PPUSH
14327: LD_VAR 0 3
14331: PPUSH
14332: LD_INT 1
14334: PPUSH
14335: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
14339: LD_INT 20
14341: PPUSH
14342: LD_VAR 0 3
14346: PPUSH
14347: LD_INT 1
14349: PPUSH
14350: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14354: LD_INT 48
14356: PPUSH
14357: LD_VAR 0 3
14361: PPUSH
14362: LD_INT 1
14364: PPUSH
14365: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
14369: LD_INT 49
14371: PPUSH
14372: LD_VAR 0 3
14376: PPUSH
14377: LD_INT 1
14379: PPUSH
14380: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
14384: LD_INT 50
14386: PPUSH
14387: LD_VAR 0 3
14391: PPUSH
14392: LD_INT 1
14394: PPUSH
14395: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14399: LD_INT 69
14401: PPUSH
14402: LD_VAR 0 3
14406: PPUSH
14407: LD_INT 1
14409: PPUSH
14410: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14414: LD_INT 39
14416: PPUSH
14417: LD_VAR 0 3
14421: PPUSH
14422: LD_INT 1
14424: PPUSH
14425: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
14429: LD_INT 34
14431: PPUSH
14432: LD_VAR 0 3
14436: PPUSH
14437: LD_INT 1
14439: PPUSH
14440: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
14444: LD_INT 42
14446: PPUSH
14447: LD_VAR 0 3
14451: PPUSH
14452: LD_INT 1
14454: PPUSH
14455: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
14459: LD_INT 44
14461: PPUSH
14462: LD_VAR 0 3
14466: PPUSH
14467: LD_INT 1
14469: PPUSH
14470: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
14474: LD_INT 41
14476: PPUSH
14477: LD_VAR 0 3
14481: PPUSH
14482: LD_INT 1
14484: PPUSH
14485: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
14489: LD_INT 13
14491: PPUSH
14492: LD_VAR 0 3
14496: PPUSH
14497: LD_INT 1
14499: PPUSH
14500: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
14504: LD_INT 40
14506: PPUSH
14507: LD_VAR 0 3
14511: PPUSH
14512: LD_INT 1
14514: PPUSH
14515: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14519: LD_INT 43
14521: PPUSH
14522: LD_VAR 0 3
14526: PPUSH
14527: LD_INT 1
14529: PPUSH
14530: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
14534: LD_INT 70
14536: PPUSH
14537: LD_VAR 0 3
14541: PPUSH
14542: LD_INT 1
14544: PPUSH
14545: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
14549: LD_INT 23
14551: PPUSH
14552: LD_VAR 0 3
14556: PPUSH
14557: LD_INT 1
14559: PPUSH
14560: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14564: LD_INT 51
14566: PPUSH
14567: LD_VAR 0 3
14571: PPUSH
14572: LD_INT 1
14574: PPUSH
14575: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
14579: LD_INT 52
14581: PPUSH
14582: LD_VAR 0 3
14586: PPUSH
14587: LD_INT 1
14589: PPUSH
14590: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14594: LD_INT 6
14596: PPUSH
14597: LD_VAR 0 3
14601: PPUSH
14602: LD_INT 1
14604: PPUSH
14605: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
14609: LD_INT 15
14611: PPUSH
14612: LD_VAR 0 3
14616: PPUSH
14617: LD_INT 1
14619: PPUSH
14620: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
14624: LD_INT 7
14626: PPUSH
14627: LD_VAR 0 3
14631: PPUSH
14632: LD_INT 1
14634: PPUSH
14635: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
14639: LD_INT 12
14641: PPUSH
14642: LD_VAR 0 3
14646: PPUSH
14647: LD_INT 1
14649: PPUSH
14650: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
14654: LD_INT 10
14656: PPUSH
14657: LD_VAR 0 3
14661: PPUSH
14662: LD_INT 1
14664: PPUSH
14665: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
14669: LD_INT 17
14671: PPUSH
14672: LD_VAR 0 3
14676: PPUSH
14677: LD_INT 1
14679: PPUSH
14680: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
14684: LD_INT 18
14686: PPUSH
14687: LD_VAR 0 3
14691: PPUSH
14692: LD_INT 1
14694: PPUSH
14695: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
14699: LD_INT 60
14701: PPUSH
14702: LD_VAR 0 3
14706: PPUSH
14707: LD_INT 1
14709: PPUSH
14710: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
14714: LD_INT 61
14716: PPUSH
14717: LD_VAR 0 3
14721: PPUSH
14722: LD_INT 1
14724: PPUSH
14725: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
14729: LD_INT 32
14731: PPUSH
14732: LD_VAR 0 3
14736: PPUSH
14737: LD_INT 1
14739: PPUSH
14740: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
14744: LD_INT 27
14746: PPUSH
14747: LD_VAR 0 3
14751: PPUSH
14752: LD_INT 1
14754: PPUSH
14755: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
14759: LD_INT 36
14761: PPUSH
14762: LD_VAR 0 3
14766: PPUSH
14767: LD_INT 1
14769: PPUSH
14770: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
14774: LD_INT 33
14776: PPUSH
14777: LD_VAR 0 3
14781: PPUSH
14782: LD_INT 1
14784: PPUSH
14785: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
14789: LD_INT 9
14791: PPUSH
14792: LD_VAR 0 3
14796: PPUSH
14797: LD_INT 1
14799: PPUSH
14800: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
14804: LD_INT 38
14806: PPUSH
14807: LD_VAR 0 3
14811: PPUSH
14812: LD_INT 1
14814: PPUSH
14815: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
14819: LD_INT 57
14821: PPUSH
14822: LD_VAR 0 3
14826: PPUSH
14827: LD_INT 1
14829: PPUSH
14830: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
14834: LD_INT 58
14836: PPUSH
14837: LD_VAR 0 3
14841: PPUSH
14842: LD_INT 1
14844: PPUSH
14845: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
14849: LD_INT 28
14851: PPUSH
14852: LD_VAR 0 3
14856: PPUSH
14857: LD_INT 1
14859: PPUSH
14860: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
14864: LD_INT 29
14866: PPUSH
14867: LD_VAR 0 3
14871: PPUSH
14872: LD_INT 1
14874: PPUSH
14875: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
14879: LD_INT 30
14881: PPUSH
14882: LD_VAR 0 3
14886: PPUSH
14887: LD_INT 1
14889: PPUSH
14890: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
14894: LD_INT 37
14896: PPUSH
14897: LD_VAR 0 3
14901: PPUSH
14902: LD_INT 1
14904: PPUSH
14905: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
14909: LD_INT 63
14911: PPUSH
14912: LD_VAR 0 3
14916: PPUSH
14917: LD_INT 1
14919: PPUSH
14920: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
14924: LD_INT 64
14926: PPUSH
14927: LD_VAR 0 3
14931: PPUSH
14932: LD_INT 1
14934: PPUSH
14935: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
14939: LD_INT 3
14941: PPUSH
14942: LD_VAR 0 3
14946: PPUSH
14947: LD_INT 1
14949: PPUSH
14950: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
14954: LD_INT 4
14956: PPUSH
14957: LD_VAR 0 3
14961: PPUSH
14962: LD_INT 1
14964: PPUSH
14965: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14969: LD_INT 5
14971: PPUSH
14972: LD_VAR 0 3
14976: PPUSH
14977: LD_INT 1
14979: PPUSH
14980: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
14984: LD_INT 8
14986: PPUSH
14987: LD_VAR 0 3
14991: PPUSH
14992: LD_INT 1
14994: PPUSH
14995: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14999: LD_INT 66
15001: PPUSH
15002: LD_VAR 0 3
15006: PPUSH
15007: LD_INT 1
15009: PPUSH
15010: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
15014: LD_INT 67
15016: PPUSH
15017: LD_VAR 0 3
15021: PPUSH
15022: LD_INT 1
15024: PPUSH
15025: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
15029: LD_INT 21
15031: PPUSH
15032: LD_VAR 0 3
15036: PPUSH
15037: LD_INT 1
15039: PPUSH
15040: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
15044: LD_INT 22
15046: PPUSH
15047: LD_VAR 0 3
15051: PPUSH
15052: LD_INT 1
15054: PPUSH
15055: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
15059: LD_INT 19
15061: PPUSH
15062: LD_VAR 0 3
15066: PPUSH
15067: LD_INT 1
15069: PPUSH
15070: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
15074: LD_INT 26
15076: PPUSH
15077: LD_VAR 0 3
15081: PPUSH
15082: LD_INT 1
15084: PPUSH
15085: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
15089: LD_INT 54
15091: PPUSH
15092: LD_VAR 0 3
15096: PPUSH
15097: LD_INT 1
15099: PPUSH
15100: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
15104: LD_INT 55
15106: PPUSH
15107: LD_VAR 0 3
15111: PPUSH
15112: LD_INT 1
15114: PPUSH
15115: CALL_OW 322
// for i = 0 to 39 do
15119: LD_ADDR_VAR 0 4
15123: PUSH
15124: DOUBLE
15125: LD_INT 0
15127: DEC
15128: ST_TO_ADDR
15129: LD_INT 39
15131: PUSH
15132: FOR_TO
15133: IFFALSE 15154
// SetRestrict ( i , side , true ) ;
15135: LD_VAR 0 4
15139: PPUSH
15140: LD_VAR 0 3
15144: PPUSH
15145: LD_INT 1
15147: PPUSH
15148: CALL_OW 324
15152: GO 15132
15154: POP
15155: POP
// end ; else
15156: GO 15233
15158: POP
// begin for i = 1 to 73 do
15159: LD_ADDR_VAR 0 4
15163: PUSH
15164: DOUBLE
15165: LD_INT 1
15167: DEC
15168: ST_TO_ADDR
15169: LD_INT 73
15171: PUSH
15172: FOR_TO
15173: IFFALSE 15194
// SetTech ( i , side , state_enabled ) ;
15175: LD_VAR 0 4
15179: PPUSH
15180: LD_VAR 0 3
15184: PPUSH
15185: LD_INT 1
15187: PPUSH
15188: CALL_OW 322
15192: GO 15172
15194: POP
15195: POP
// for i = 0 to 39 do
15196: LD_ADDR_VAR 0 4
15200: PUSH
15201: DOUBLE
15202: LD_INT 0
15204: DEC
15205: ST_TO_ADDR
15206: LD_INT 39
15208: PUSH
15209: FOR_TO
15210: IFFALSE 15231
// SetRestrict ( i , side , true ) ;
15212: LD_VAR 0 4
15216: PPUSH
15217: LD_VAR 0 3
15221: PPUSH
15222: LD_INT 1
15224: PPUSH
15225: CALL_OW 324
15229: GO 15209
15231: POP
15232: POP
// end ; end ; end ;
15233: GO 11238
15235: POP
15236: POP
// end ; end_of_file
15237: LD_VAR 0 2
15241: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
15242: LD_INT 0
15244: PPUSH
15245: PPUSH
// enable ( 98 ) ;
15246: LD_INT 98
15248: ENABLE_MARKED
// GameEnded = false ;
15249: LD_ADDR_LOC 24
15253: PUSH
15254: LD_INT 0
15256: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
15257: LD_ADDR_LOC 23
15261: PUSH
15262: LD_INT 0
15264: PUSH
15265: LD_INT 0
15267: PUSH
15268: LD_INT 0
15270: PUSH
15271: LD_INT 0
15273: PUSH
15274: LD_INT 0
15276: PUSH
15277: LD_INT 0
15279: PUSH
15280: LD_INT 0
15282: PUSH
15283: LD_INT 0
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: ST_TO_ADDR
// unfoged = false ;
15296: LD_ADDR_LOC 25
15300: PUSH
15301: LD_INT 0
15303: ST_TO_ADDR
// defeated_specs := [ ] ;
15304: LD_ADDR_LOC 26
15308: PUSH
15309: EMPTY
15310: ST_TO_ADDR
// for i = 1 to side_positions do
15311: LD_ADDR_VAR 0 2
15315: PUSH
15316: DOUBLE
15317: LD_INT 1
15319: DEC
15320: ST_TO_ADDR
15321: LD_EXP 21
15325: PUSH
15326: FOR_TO
15327: IFFALSE 15367
// if not side_positions [ i ] then
15329: LD_EXP 21
15333: PUSH
15334: LD_VAR 0 2
15338: ARRAY
15339: NOT
15340: IFFALSE 15365
// defeated = replace ( defeated , i , true ) ;
15342: LD_ADDR_LOC 23
15346: PUSH
15347: LD_LOC 23
15351: PPUSH
15352: LD_VAR 0 2
15356: PPUSH
15357: LD_INT 1
15359: PPUSH
15360: CALL_OW 1
15364: ST_TO_ADDR
15365: GO 15326
15367: POP
15368: POP
// end ;
15369: LD_VAR 0 1
15373: RET
// function CanWinLoose ; begin
15374: LD_INT 0
15376: PPUSH
// Result := true ;
15377: LD_ADDR_VAR 0 1
15381: PUSH
15382: LD_INT 1
15384: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
15385: CALL_OW 518
15389: PUSH
15390: CALL_OW 519
15394: PUSH
15395: LD_INT 0
15397: GREATER
15398: AND
15399: IFFALSE 15409
// Result := false ;
15401: LD_ADDR_VAR 0 1
15405: PUSH
15406: LD_INT 0
15408: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
15409: CALL_OW 531
15413: PUSH
15414: CALL_OW 519
15418: PUSH
15419: LD_INT 1
15421: GREATER
15422: AND
15423: IFFALSE 15433
// Result := false ;
15425: LD_ADDR_VAR 0 1
15429: PUSH
15430: LD_INT 0
15432: ST_TO_ADDR
// end ;
15433: LD_VAR 0 1
15437: RET
// export function HasPower ( i ) ; var k , h ; begin
15438: LD_INT 0
15440: PPUSH
15441: PPUSH
15442: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
15443: LD_VAR 0 1
15447: PPUSH
15448: CALL_OW 108
15452: NOT
15453: PUSH
15454: LD_EXP 20
15458: PUSH
15459: LD_VAR 0 1
15463: ARRAY
15464: NOT
15465: AND
15466: PUSH
15467: LD_OWVAR 4
15471: AND
15472: IFFALSE 15484
// begin result = false ;
15474: LD_ADDR_VAR 0 2
15478: PUSH
15479: LD_INT 0
15481: ST_TO_ADDR
// end else
15482: GO 15779
// case def_win_rules of 0 :
15484: LD_EXP 15
15488: PUSH
15489: LD_INT 0
15491: DOUBLE
15492: EQUAL
15493: IFTRUE 15497
15495: GO 15660
15497: POP
// if def_people_respawning then
15498: LD_EXP 51
15502: IFFALSE 15593
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
15504: LD_ADDR_VAR 0 2
15508: PUSH
15509: LD_INT 22
15511: PUSH
15512: LD_VAR 0 1
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PUSH
15521: LD_INT 2
15523: PUSH
15524: LD_INT 21
15526: PUSH
15527: LD_INT 1
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PUSH
15534: LD_INT 33
15536: PUSH
15537: LD_INT 3
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: PUSH
15544: LD_INT 33
15546: PUSH
15547: LD_INT 5
15549: PUSH
15550: EMPTY
15551: LIST
15552: LIST
15553: PUSH
15554: LD_INT 30
15556: PUSH
15557: LD_INT 0
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: LD_INT 30
15566: PUSH
15567: LD_INT 1
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: PPUSH
15586: CALL_OW 69
15590: ST_TO_ADDR
15591: GO 15658
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
15593: LD_ADDR_VAR 0 2
15597: PUSH
15598: LD_INT 22
15600: PUSH
15601: LD_VAR 0 1
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PUSH
15610: LD_INT 2
15612: PUSH
15613: LD_INT 21
15615: PUSH
15616: LD_INT 1
15618: PUSH
15619: EMPTY
15620: LIST
15621: LIST
15622: PUSH
15623: LD_INT 33
15625: PUSH
15626: LD_INT 3
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PUSH
15633: LD_INT 33
15635: PUSH
15636: LD_INT 5
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: PPUSH
15653: CALL_OW 69
15657: ST_TO_ADDR
15658: GO 15779
15660: LD_INT 1
15662: DOUBLE
15663: EQUAL
15664: IFTRUE 15668
15666: GO 15707
15668: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
15669: LD_ADDR_VAR 0 2
15673: PUSH
15674: LD_INT 22
15676: PUSH
15677: LD_VAR 0 1
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: PUSH
15686: LD_INT 21
15688: PUSH
15689: LD_INT 1
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: PUSH
15696: EMPTY
15697: LIST
15698: LIST
15699: PPUSH
15700: CALL_OW 69
15704: ST_TO_ADDR
15705: GO 15779
15707: LD_INT 2
15709: DOUBLE
15710: EQUAL
15711: IFTRUE 15715
15713: GO 15778
15715: POP
// begin h = false ;
15716: LD_ADDR_VAR 0 4
15720: PUSH
15721: LD_INT 0
15723: ST_TO_ADDR
// for k in heroes [ i ] do
15724: LD_ADDR_VAR 0 3
15728: PUSH
15729: LD_EXP 31
15733: PUSH
15734: LD_VAR 0 1
15738: ARRAY
15739: PUSH
15740: FOR_IN
15741: IFFALSE 15764
// if IsLive ( k ) then
15743: LD_VAR 0 3
15747: PPUSH
15748: CALL_OW 300
15752: IFFALSE 15762
// h = true ;
15754: LD_ADDR_VAR 0 4
15758: PUSH
15759: LD_INT 1
15761: ST_TO_ADDR
15762: GO 15740
15764: POP
15765: POP
// Result := h ;
15766: LD_ADDR_VAR 0 2
15770: PUSH
15771: LD_VAR 0 4
15775: ST_TO_ADDR
// end ; end ;
15776: GO 15779
15778: POP
// end ;
15779: LD_VAR 0 2
15783: RET
// function AlliedSides ( i , j ) ; begin
15784: LD_INT 0
15786: PPUSH
// Result := false ;
15787: LD_ADDR_VAR 0 3
15791: PUSH
15792: LD_INT 0
15794: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
15795: LD_VAR 0 1
15799: PPUSH
15800: LD_VAR 0 2
15804: PPUSH
15805: CALL_OW 81
15809: PUSH
15810: LD_INT 1
15812: EQUAL
15813: PUSH
15814: LD_VAR 0 2
15818: PPUSH
15819: LD_VAR 0 1
15823: PPUSH
15824: CALL_OW 81
15828: PUSH
15829: LD_INT 1
15831: EQUAL
15832: AND
15833: PUSH
15834: LD_VAR 0 1
15838: PPUSH
15839: CALL_OW 83
15843: AND
15844: PUSH
15845: LD_VAR 0 2
15849: PPUSH
15850: CALL_OW 83
15854: AND
15855: IFFALSE 15865
// Result := true ;
15857: LD_ADDR_VAR 0 3
15861: PUSH
15862: LD_INT 1
15864: ST_TO_ADDR
// end ;
15865: LD_VAR 0 3
15869: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
15870: CALL 15374 0 0
15874: PUSH
15875: LD_LOC 24
15879: NOT
15880: AND
15881: IFFALSE 15897
15883: GO 15885
15885: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
15886: LD_ADDR_EXP 57
15890: PUSH
15891: LD_STRING #Player-Ended
15893: PUSH
15894: EMPTY
15895: LIST
15896: ST_TO_ADDR
15897: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
15898: CALL 15374 0 0
15902: PUSH
15903: LD_LOC 24
15907: AND
15908: IFFALSE 15917
15910: GO 15912
15912: DISABLE
// YouLostInMultiplayer ;
15913: CALL_OW 107
15917: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
15918: CALL 15374 0 0
15922: NOT
15923: PUSH
15924: CALL_OW 531
15928: NOT
15929: AND
15930: IFFALSE 15946
15932: GO 15934
15934: DISABLE
// WaitServerStrings = [ #server-wait ] ;
15935: LD_ADDR_EXP 57
15939: PUSH
15940: LD_STRING #server-wait
15942: PUSH
15943: EMPTY
15944: LIST
15945: ST_TO_ADDR
15946: END
// every 100 trigger IAmSpec do
15947: CALL_OW 531
15951: IFFALSE 15967
15953: GO 15955
15955: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
15956: LD_ADDR_EXP 57
15960: PUSH
15961: LD_STRING #Player-IAmSpec
15963: PUSH
15964: EMPTY
15965: LIST
15966: ST_TO_ADDR
15967: END
// every 100 trigger GameEnded and IAmSpec do
15968: LD_LOC 24
15972: PUSH
15973: CALL_OW 531
15977: AND
15978: IFFALSE 15987
15980: GO 15982
15982: DISABLE
// YouLostInMultiplayer ;
15983: CALL_OW 107
15987: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
15988: CALL 15374 0 0
15992: PUSH
15993: LD_LOC 24
15997: NOT
15998: AND
15999: IFFALSE 16015
16001: GO 16003
16003: DISABLE
// WaitServerStrings = [ $player-win ] ;
16004: LD_ADDR_EXP 57
16008: PUSH
16009: LD_STRING $player-win
16011: PUSH
16012: EMPTY
16013: LIST
16014: ST_TO_ADDR
16015: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
16016: CALL 15374 0 0
16020: PUSH
16021: LD_LOC 24
16025: AND
16026: IFFALSE 16050
16028: GO 16030
16030: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
16031: LD_EXP 22
16035: PUSH
16036: LD_OWVAR 7
16040: ARRAY
16041: PPUSH
16042: CALL 10876 0 1
// YouWinInMultiplayer ;
16046: CALL_OW 106
// end ;
16050: END
// every 100 trigger isEditor marked 401 do
16051: LD_OWVAR 84
16055: IFFALSE 16071
16057: GO 16059
16059: DISABLE
// Debug_Strings = [ You won ] ;
16060: LD_ADDR_OWVAR 48
16064: PUSH
16065: LD_STRING You won
16067: PUSH
16068: EMPTY
16069: LIST
16070: ST_TO_ADDR
16071: END
// every 100 trigger isEditor marked 400 do
16072: LD_OWVAR 84
16076: IFFALSE 16092
16078: GO 16080
16080: DISABLE
// Debug_Strings = [ You loss ] ;
16081: LD_ADDR_OWVAR 48
16085: PUSH
16086: LD_STRING You loss
16088: PUSH
16089: EMPTY
16090: LIST
16091: ST_TO_ADDR
16092: END
// every 100 marked 98 do var i , un ;
16093: GO 16095
16095: DISABLE
16096: LD_INT 0
16098: PPUSH
16099: PPUSH
// begin for i = 1 to side_positions do
16100: LD_ADDR_VAR 0 1
16104: PUSH
16105: DOUBLE
16106: LD_INT 1
16108: DEC
16109: ST_TO_ADDR
16110: LD_EXP 21
16114: PUSH
16115: FOR_TO
16116: IFFALSE 16203
// begin if side_positions [ i ] then
16118: LD_EXP 21
16122: PUSH
16123: LD_VAR 0 1
16127: ARRAY
16128: IFFALSE 16201
// if not HasPower ( i ) and not defeated [ i ] then
16130: LD_VAR 0 1
16134: PPUSH
16135: CALL 15438 0 1
16139: NOT
16140: PUSH
16141: LD_LOC 23
16145: PUSH
16146: LD_VAR 0 1
16150: ARRAY
16151: NOT
16152: AND
16153: IFFALSE 16201
// begin defeated = replace ( defeated , i , true ) ;
16155: LD_ADDR_LOC 23
16159: PUSH
16160: LD_LOC 23
16164: PPUSH
16165: LD_VAR 0 1
16169: PPUSH
16170: LD_INT 1
16172: PPUSH
16173: CALL_OW 1
16177: ST_TO_ADDR
// if i = mp_player_side then
16178: LD_VAR 0 1
16182: PUSH
16183: LD_OWVAR 7
16187: EQUAL
16188: IFFALSE 16201
// begin Multiplayer_Loose_Message ;
16190: CALL_OW 521
// SetPlayerSpectator ( ) ;
16194: CALL_OW 572
// enable ( 400 ) ;
16198: LD_INT 400
16200: ENABLE_MARKED
// end ; end ; end ;
16201: GO 16115
16203: POP
16204: POP
// DidGameEnd ;
16205: CALL 16220 0 0
// if not GameEnded then
16209: LD_LOC 24
16213: NOT
16214: IFFALSE 16217
// enable ;
16216: ENABLE
// end ;
16217: PPOPN 2
16219: END
// function DidGameEnd ; var i , k , enemy ; begin
16220: LD_INT 0
16222: PPUSH
16223: PPUSH
16224: PPUSH
16225: PPUSH
// enemy = [ ] ;
16226: LD_ADDR_VAR 0 4
16230: PUSH
16231: EMPTY
16232: ST_TO_ADDR
// for i = 1 to side_positions do
16233: LD_ADDR_VAR 0 2
16237: PUSH
16238: DOUBLE
16239: LD_INT 1
16241: DEC
16242: ST_TO_ADDR
16243: LD_EXP 21
16247: PUSH
16248: FOR_TO
16249: IFFALSE 16343
// if not defeated [ i ] then
16251: LD_LOC 23
16255: PUSH
16256: LD_VAR 0 2
16260: ARRAY
16261: NOT
16262: IFFALSE 16341
// for k = 1 to side_positions do
16264: LD_ADDR_VAR 0 3
16268: PUSH
16269: DOUBLE
16270: LD_INT 1
16272: DEC
16273: ST_TO_ADDR
16274: LD_EXP 21
16278: PUSH
16279: FOR_TO
16280: IFFALSE 16339
// if not defeated [ k ] then
16282: LD_LOC 23
16286: PUSH
16287: LD_VAR 0 3
16291: ARRAY
16292: NOT
16293: IFFALSE 16337
// if not AlliedSides ( i , k ) then
16295: LD_VAR 0 2
16299: PPUSH
16300: LD_VAR 0 3
16304: PPUSH
16305: CALL 15784 0 2
16309: NOT
16310: IFFALSE 16337
// enemy = enemy ^ [ i , k ] ;
16312: LD_ADDR_VAR 0 4
16316: PUSH
16317: LD_VAR 0 4
16321: PUSH
16322: LD_VAR 0 2
16326: PUSH
16327: LD_VAR 0 3
16331: PUSH
16332: EMPTY
16333: LIST
16334: LIST
16335: ADD
16336: ST_TO_ADDR
16337: GO 16279
16339: POP
16340: POP
16341: GO 16248
16343: POP
16344: POP
// if not enemy then
16345: LD_VAR 0 4
16349: NOT
16350: IFFALSE 16376
// begin GameEnded = true ;
16352: LD_ADDR_LOC 24
16356: PUSH
16357: LD_INT 1
16359: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
16360: LD_LOC 23
16364: PUSH
16365: LD_OWVAR 7
16369: ARRAY
16370: NOT
16371: IFFALSE 16376
// enable ( 401 ) ;
16373: LD_INT 401
16375: ENABLE_MARKED
// end ; end ;
16376: LD_VAR 0 1
16380: RET
// function unfog ; var k , friends ; begin
16381: LD_INT 0
16383: PPUSH
16384: PPUSH
16385: PPUSH
// for k = 1 to side_positions do
16386: LD_ADDR_VAR 0 2
16390: PUSH
16391: DOUBLE
16392: LD_INT 1
16394: DEC
16395: ST_TO_ADDR
16396: LD_EXP 21
16400: PUSH
16401: FOR_TO
16402: IFFALSE 16458
// if not defeated [ k ] then
16404: LD_LOC 23
16408: PUSH
16409: LD_VAR 0 2
16413: ARRAY
16414: NOT
16415: IFFALSE 16456
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
16417: LD_OWVAR 7
16421: PPUSH
16422: LD_VAR 0 2
16426: PPUSH
16427: CALL_OW 81
16431: PUSH
16432: LD_INT 1
16434: PUSH
16435: EMPTY
16436: LIST
16437: IN
16438: IFFALSE 16456
// friends = friends ^ k ;
16440: LD_ADDR_VAR 0 3
16444: PUSH
16445: LD_VAR 0 3
16449: PUSH
16450: LD_VAR 0 2
16454: ADD
16455: ST_TO_ADDR
16456: GO 16401
16458: POP
16459: POP
// if not friends then
16460: LD_VAR 0 3
16464: NOT
16465: IFFALSE 16479
// begin SetPlayerSpectator ( ) ;
16467: CALL_OW 572
// unfoged = true ;
16471: LD_ADDR_LOC 25
16475: PUSH
16476: LD_INT 1
16478: ST_TO_ADDR
// end ; end ;
16479: LD_VAR 0 1
16483: RET
// export function MakeGameEnd ; begin
16484: LD_INT 0
16486: PPUSH
// SetPlayerSpectator ( ) ;
16487: CALL_OW 572
// unfoged = true ;
16491: LD_ADDR_LOC 25
16495: PUSH
16496: LD_INT 1
16498: ST_TO_ADDR
// wait ( 0 0$5 ) ;
16499: LD_INT 175
16501: PPUSH
16502: CALL_OW 67
// GameEnded = true ;
16506: LD_ADDR_LOC 24
16510: PUSH
16511: LD_INT 1
16513: ST_TO_ADDR
// end ;
16514: LD_VAR 0 1
16518: RET
// export function GetGameEnded ; begin
16519: LD_INT 0
16521: PPUSH
// result = GameEnded ;
16522: LD_ADDR_VAR 0 1
16526: PUSH
16527: LD_LOC 24
16531: ST_TO_ADDR
// end ; end_of_file
16532: LD_VAR 0 1
16536: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
16537: LD_INT 0
16539: PPUSH
16540: PPUSH
16541: PPUSH
16542: PPUSH
16543: PPUSH
16544: PPUSH
16545: PPUSH
16546: PPUSH
16547: PPUSH
// for i := 1 to 8 do
16548: LD_ADDR_VAR 0 2
16552: PUSH
16553: DOUBLE
16554: LD_INT 1
16556: DEC
16557: ST_TO_ADDR
16558: LD_INT 8
16560: PUSH
16561: FOR_TO
16562: IFFALSE 16946
// begin if Side_Positions [ i ] then
16564: LD_EXP 21
16568: PUSH
16569: LD_VAR 0 2
16573: ARRAY
16574: IFFALSE 16944
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
16576: LD_ADDR_VAR 0 7
16580: PUSH
16581: LD_INT 22
16583: PUSH
16584: LD_VAR 0 2
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: PUSH
16593: LD_INT 21
16595: PUSH
16596: LD_INT 1
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PPUSH
16607: CALL_OW 69
16611: PUSH
16612: LD_INT 0
16614: PLUS
16615: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16616: LD_ADDR_VAR 0 9
16620: PUSH
16621: LD_INT 22
16623: PUSH
16624: LD_VAR 0 2
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: PUSH
16633: LD_INT 2
16635: PUSH
16636: LD_INT 30
16638: PUSH
16639: LD_INT 0
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: PUSH
16646: LD_INT 30
16648: PUSH
16649: LD_INT 1
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: LIST
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: PPUSH
16665: CALL_OW 69
16669: ST_TO_ADDR
// crates := 0 ;
16670: LD_ADDR_VAR 0 4
16674: PUSH
16675: LD_INT 0
16677: ST_TO_ADDR
// oil := 0 ;
16678: LD_ADDR_VAR 0 5
16682: PUSH
16683: LD_INT 0
16685: ST_TO_ADDR
// sib := 0 ;
16686: LD_ADDR_VAR 0 6
16690: PUSH
16691: LD_INT 0
16693: ST_TO_ADDR
// if bases then
16694: LD_VAR 0 9
16698: IFFALSE 16804
// begin for j in bases do
16700: LD_ADDR_VAR 0 3
16704: PUSH
16705: LD_VAR 0 9
16709: PUSH
16710: FOR_IN
16711: IFFALSE 16802
// begin base := GetBase ( j ) ;
16713: LD_ADDR_VAR 0 8
16717: PUSH
16718: LD_VAR 0 3
16722: PPUSH
16723: CALL_OW 274
16727: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
16728: LD_ADDR_VAR 0 4
16732: PUSH
16733: LD_VAR 0 4
16737: PUSH
16738: LD_VAR 0 8
16742: PPUSH
16743: LD_INT 1
16745: PPUSH
16746: CALL_OW 275
16750: PLUS
16751: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
16752: LD_ADDR_VAR 0 5
16756: PUSH
16757: LD_VAR 0 5
16761: PUSH
16762: LD_VAR 0 8
16766: PPUSH
16767: LD_INT 2
16769: PPUSH
16770: CALL_OW 275
16774: PLUS
16775: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
16776: LD_ADDR_VAR 0 6
16780: PUSH
16781: LD_VAR 0 6
16785: PUSH
16786: LD_VAR 0 8
16790: PPUSH
16791: LD_INT 3
16793: PPUSH
16794: CALL_OW 275
16798: PLUS
16799: ST_TO_ADDR
// end ;
16800: GO 16710
16802: POP
16803: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
16804: LD_STRING setSpecText(
16806: PUSH
16807: LD_VAR 0 2
16811: STR
16812: PUSH
16813: LD_STRING ,
16815: STR
16816: PUSH
16817: LD_INT 2
16819: STR
16820: PUSH
16821: LD_STRING ,
16823: STR
16824: PUSH
16825: LD_VAR 0 4
16829: STR
16830: PUSH
16831: LD_STRING )
16833: STR
16834: PPUSH
16835: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
16839: LD_STRING setSpecText(
16841: PUSH
16842: LD_VAR 0 2
16846: STR
16847: PUSH
16848: LD_STRING ,
16850: STR
16851: PUSH
16852: LD_INT 3
16854: STR
16855: PUSH
16856: LD_STRING ,
16858: STR
16859: PUSH
16860: LD_VAR 0 5
16864: STR
16865: PUSH
16866: LD_STRING )
16868: STR
16869: PPUSH
16870: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
16874: LD_STRING setSpecText(
16876: PUSH
16877: LD_VAR 0 2
16881: STR
16882: PUSH
16883: LD_STRING ,
16885: STR
16886: PUSH
16887: LD_INT 4
16889: STR
16890: PUSH
16891: LD_STRING ,
16893: STR
16894: PUSH
16895: LD_VAR 0 6
16899: STR
16900: PUSH
16901: LD_STRING )
16903: STR
16904: PPUSH
16905: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
16909: LD_STRING setSpecText(
16911: PUSH
16912: LD_VAR 0 2
16916: STR
16917: PUSH
16918: LD_STRING ,
16920: STR
16921: PUSH
16922: LD_INT 5
16924: STR
16925: PUSH
16926: LD_STRING ,
16928: STR
16929: PUSH
16930: LD_VAR 0 7
16934: STR
16935: PUSH
16936: LD_STRING )
16938: STR
16939: PPUSH
16940: CALL_OW 559
// end ; end ;
16944: GO 16561
16946: POP
16947: POP
// end ;
16948: LD_VAR 0 1
16952: RET
// every 0 0$1 do
16953: GO 16955
16955: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
16956: LD_STRING setSpecLogoNumber(
16958: PUSH
16959: LD_INT 2
16961: STR
16962: PUSH
16963: LD_STRING ,
16965: STR
16966: PUSH
16967: LD_INT 1
16969: STR
16970: PUSH
16971: LD_STRING )
16973: STR
16974: PPUSH
16975: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
16979: LD_STRING setSpecLogoNumber(
16981: PUSH
16982: LD_INT 3
16984: STR
16985: PUSH
16986: LD_STRING ,
16988: STR
16989: PUSH
16990: LD_INT 2
16992: STR
16993: PUSH
16994: LD_STRING )
16996: STR
16997: PPUSH
16998: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
17002: LD_STRING setSpecLogoNumber(
17004: PUSH
17005: LD_INT 4
17007: STR
17008: PUSH
17009: LD_STRING ,
17011: STR
17012: PUSH
17013: LD_INT 3
17015: STR
17016: PUSH
17017: LD_STRING )
17019: STR
17020: PPUSH
17021: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
17025: LD_STRING setSpecLogoNumber(
17027: PUSH
17028: LD_INT 5
17030: STR
17031: PUSH
17032: LD_STRING ,
17034: STR
17035: PUSH
17036: LD_INT 4
17038: STR
17039: PUSH
17040: LD_STRING )
17042: STR
17043: PPUSH
17044: CALL_OW 559
// end ;
17048: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
17049: LD_INT 2
17051: PUSH
17052: LD_INT 30
17054: PUSH
17055: LD_INT 0
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PUSH
17062: LD_INT 30
17064: PUSH
17065: LD_INT 1
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: LIST
17076: PPUSH
17077: CALL_OW 69
17081: IFFALSE 17091
17083: GO 17085
17085: DISABLE
// begin enable ;
17086: ENABLE
// UpdateSpectatorBar ;
17087: CALL 16537 0 0
// end ; end_of_file
17091: END
// var respawn , inqueue ; export function init_respawning ; begin
17092: LD_INT 0
17094: PPUSH
// respawn := Rand ( 1 , 8 ) ;
17095: LD_ADDR_LOC 27
17099: PUSH
17100: LD_INT 1
17102: PPUSH
17103: LD_INT 8
17105: PPUSH
17106: CALL_OW 12
17110: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
17111: LD_ADDR_LOC 28
17115: PUSH
17116: LD_INT 0
17118: PUSH
17119: LD_INT 0
17121: PUSH
17122: LD_INT 0
17124: PUSH
17125: LD_INT 0
17127: PUSH
17128: LD_INT 0
17130: PUSH
17131: LD_INT 0
17133: PUSH
17134: LD_INT 0
17136: PUSH
17137: LD_INT 0
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: ST_TO_ADDR
// end ;
17150: LD_VAR 0 1
17154: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
17155: GO 17157
17157: DISABLE
17158: LD_INT 0
17160: PPUSH
17161: PPUSH
17162: PPUSH
// begin if respawning_time_max = 0 then
17163: LD_EXP 11
17167: PUSH
17168: LD_INT 0
17170: EQUAL
17171: IFFALSE 17175
// exit ;
17173: GO 17583
// if respawn = 8 then
17175: LD_LOC 27
17179: PUSH
17180: LD_INT 8
17182: EQUAL
17183: IFFALSE 17195
// respawn := 1 else
17185: LD_ADDR_LOC 27
17189: PUSH
17190: LD_INT 1
17192: ST_TO_ADDR
17193: GO 17209
// respawn := respawn + 1 ;
17195: LD_ADDR_LOC 27
17199: PUSH
17200: LD_LOC 27
17204: PUSH
17205: LD_INT 1
17207: PLUS
17208: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
17209: LD_EXP 21
17213: PUSH
17214: LD_LOC 27
17218: ARRAY
17219: PUSH
17220: LD_LOC 28
17224: PUSH
17225: LD_LOC 27
17229: ARRAY
17230: NOT
17231: AND
17232: IFFALSE 17582
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
17234: LD_ADDR_VAR 0 1
17238: PUSH
17239: LD_INT 21
17241: PUSH
17242: LD_INT 1
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: PUSH
17249: LD_INT 22
17251: PUSH
17252: LD_LOC 27
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: PUSH
17261: LD_INT 3
17263: PUSH
17264: LD_INT 23
17266: PUSH
17267: LD_INT 0
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: PPUSH
17280: CALL_OW 69
17284: ST_TO_ADDR
// if n < number_of_people then
17285: LD_VAR 0 1
17289: PUSH
17290: LD_EXP 4
17294: LESS
17295: IFFALSE 17579
// begin aktresp := respawn ;
17297: LD_ADDR_VAR 0 3
17301: PUSH
17302: LD_LOC 27
17306: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
17307: LD_ADDR_LOC 28
17311: PUSH
17312: LD_LOC 28
17316: PPUSH
17317: LD_VAR 0 3
17321: PPUSH
17322: LD_INT 1
17324: PPUSH
17325: CALL_OW 1
17329: ST_TO_ADDR
// enable ;
17330: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
17331: LD_EXP 10
17335: PPUSH
17336: LD_EXP 11
17340: PPUSH
17341: CALL_OW 12
17345: PPUSH
17346: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
17350: LD_ADDR_LOC 28
17354: PUSH
17355: LD_LOC 28
17359: PPUSH
17360: LD_VAR 0 3
17364: PPUSH
17365: LD_INT 0
17367: PPUSH
17368: CALL_OW 1
17372: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
17373: LD_ADDR_VAR 0 2
17377: PUSH
17378: LD_INT 21
17380: PUSH
17381: LD_INT 3
17383: PUSH
17384: EMPTY
17385: LIST
17386: LIST
17387: PUSH
17388: LD_INT 2
17390: PUSH
17391: LD_INT 30
17393: PUSH
17394: LD_INT 0
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: PUSH
17401: LD_INT 30
17403: PUSH
17404: LD_INT 1
17406: PUSH
17407: EMPTY
17408: LIST
17409: LIST
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: LIST
17415: PUSH
17416: LD_INT 50
17418: PUSH
17419: EMPTY
17420: LIST
17421: PUSH
17422: LD_INT 22
17424: PUSH
17425: LD_VAR 0 3
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: PPUSH
17440: CALL_OW 69
17444: ST_TO_ADDR
// if dep = 0 then
17445: LD_VAR 0 2
17449: PUSH
17450: LD_INT 0
17452: EQUAL
17453: IFFALSE 17457
// exit ;
17455: GO 17583
// hc_name :=  ;
17457: LD_ADDR_OWVAR 26
17461: PUSH
17462: LD_STRING 
17464: ST_TO_ADDR
// hc_importance := 0 ;
17465: LD_ADDR_OWVAR 32
17469: PUSH
17470: LD_INT 0
17472: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
17473: LD_INT 0
17475: PPUSH
17476: LD_INT 0
17478: PPUSH
17479: LD_EXP 5
17483: PUSH
17484: LD_INT 2
17486: DIV
17487: PPUSH
17488: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
17492: LD_ADDR_OWVAR 21
17496: PUSH
17497: LD_EXP 22
17501: PUSH
17502: LD_VAR 0 3
17506: ARRAY
17507: ST_TO_ADDR
// uc_side := aktresp ;
17508: LD_ADDR_OWVAR 20
17512: PUSH
17513: LD_VAR 0 3
17517: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
17518: LD_ADDR_VAR 0 2
17522: PUSH
17523: LD_VAR 0 2
17527: PUSH
17528: LD_INT 1
17530: PPUSH
17531: LD_VAR 0 2
17535: PPUSH
17536: CALL_OW 12
17540: ARRAY
17541: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
17542: CALL_OW 44
17546: PPUSH
17547: LD_VAR 0 2
17551: PPUSH
17552: CALL_OW 250
17556: PPUSH
17557: LD_VAR 0 2
17561: PPUSH
17562: CALL_OW 251
17566: PPUSH
17567: LD_INT 7
17569: PPUSH
17570: LD_INT 1
17572: PPUSH
17573: CALL_OW 50
// end else
17577: GO 17580
// enable ;
17579: ENABLE
// end else
17580: GO 17583
// enable ;
17582: ENABLE
// end ; end_of_file
17583: PPOPN 3
17585: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
17586: LD_INT 0
17588: PPUSH
17589: PPUSH
17590: PPUSH
// BuildUpTime_Delay = 0 ;
17591: LD_ADDR_EXP 60
17595: PUSH
17596: LD_INT 0
17598: ST_TO_ADDR
// if not def_builduptime then
17599: LD_EXP 54
17603: NOT
17604: IFFALSE 17608
// exit ;
17606: GO 17791
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
17608: LD_ADDR_EXP 60
17612: PUSH
17613: LD_INT 8400
17615: PUSH
17616: LD_INT 2100
17618: PUSH
17619: LD_EXP 54
17623: MUL
17624: PLUS
17625: ST_TO_ADDR
// BuildUpTimeActive := true ;
17626: LD_ADDR_EXP 59
17630: PUSH
17631: LD_INT 1
17633: ST_TO_ADDR
// for i := 1 to 8 do
17634: LD_ADDR_VAR 0 2
17638: PUSH
17639: DOUBLE
17640: LD_INT 1
17642: DEC
17643: ST_TO_ADDR
17644: LD_INT 8
17646: PUSH
17647: FOR_TO
17648: IFFALSE 17789
// if Side_Positions [ i ] then
17650: LD_EXP 21
17654: PUSH
17655: LD_VAR 0 2
17659: ARRAY
17660: IFFALSE 17787
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
17662: LD_EXP 58
17666: PUSH
17667: LD_EXP 21
17671: PUSH
17672: LD_VAR 0 2
17676: ARRAY
17677: ARRAY
17678: PPUSH
17679: LD_INT 5
17681: PPUSH
17682: CALL_OW 424
// for j := 1 to 8 do
17686: LD_ADDR_VAR 0 3
17690: PUSH
17691: DOUBLE
17692: LD_INT 1
17694: DEC
17695: ST_TO_ADDR
17696: LD_INT 8
17698: PUSH
17699: FOR_TO
17700: IFFALSE 17785
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
17702: LD_EXP 21
17706: PUSH
17707: LD_VAR 0 3
17711: ARRAY
17712: PUSH
17713: LD_EXP 18
17717: PUSH
17718: LD_VAR 0 2
17722: ARRAY
17723: PUSH
17724: LD_EXP 18
17728: PUSH
17729: LD_VAR 0 3
17733: ARRAY
17734: NONEQUAL
17735: PUSH
17736: LD_EXP 23
17740: NOT
17741: PUSH
17742: LD_VAR 0 2
17746: PUSH
17747: LD_VAR 0 3
17751: NONEQUAL
17752: AND
17753: OR
17754: AND
17755: IFFALSE 17783
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
17757: LD_VAR 0 3
17761: PPUSH
17762: LD_EXP 58
17766: PUSH
17767: LD_EXP 21
17771: PUSH
17772: LD_VAR 0 2
17776: ARRAY
17777: ARRAY
17778: PPUSH
17779: CALL_OW 333
17783: GO 17699
17785: POP
17786: POP
// end ;
17787: GO 17647
17789: POP
17790: POP
// end ;
17791: LD_VAR 0 1
17795: RET
// export function EndBuildUp ; var i , j ; begin
17796: LD_INT 0
17798: PPUSH
17799: PPUSH
17800: PPUSH
// BuildUpTimeActive := false ;
17801: LD_ADDR_EXP 59
17805: PUSH
17806: LD_INT 0
17808: ST_TO_ADDR
// for i := 1 to 8 do
17809: LD_ADDR_VAR 0 2
17813: PUSH
17814: DOUBLE
17815: LD_INT 1
17817: DEC
17818: ST_TO_ADDR
17819: LD_INT 8
17821: PUSH
17822: FOR_TO
17823: IFFALSE 17964
// if Side_Positions [ i ] then
17825: LD_EXP 21
17829: PUSH
17830: LD_VAR 0 2
17834: ARRAY
17835: IFFALSE 17962
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
17837: LD_EXP 58
17841: PUSH
17842: LD_EXP 21
17846: PUSH
17847: LD_VAR 0 2
17851: ARRAY
17852: ARRAY
17853: PPUSH
17854: LD_INT 0
17856: PPUSH
17857: CALL_OW 424
// for j := 1 to 8 do
17861: LD_ADDR_VAR 0 3
17865: PUSH
17866: DOUBLE
17867: LD_INT 1
17869: DEC
17870: ST_TO_ADDR
17871: LD_INT 8
17873: PUSH
17874: FOR_TO
17875: IFFALSE 17960
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
17877: LD_EXP 21
17881: PUSH
17882: LD_VAR 0 3
17886: ARRAY
17887: PUSH
17888: LD_EXP 18
17892: PUSH
17893: LD_VAR 0 2
17897: ARRAY
17898: PUSH
17899: LD_EXP 18
17903: PUSH
17904: LD_VAR 0 3
17908: ARRAY
17909: NONEQUAL
17910: PUSH
17911: LD_EXP 23
17915: NOT
17916: PUSH
17917: LD_VAR 0 2
17921: PUSH
17922: LD_VAR 0 3
17926: NONEQUAL
17927: AND
17928: OR
17929: AND
17930: IFFALSE 17958
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
17932: LD_VAR 0 3
17936: PPUSH
17937: LD_EXP 58
17941: PUSH
17942: LD_EXP 21
17946: PUSH
17947: LD_VAR 0 2
17951: ARRAY
17952: ARRAY
17953: PPUSH
17954: CALL_OW 334
17958: GO 17874
17960: POP
17961: POP
// end ;
17962: GO 17822
17964: POP
17965: POP
// end ;
17966: LD_VAR 0 1
17970: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
17971: LD_EXP 59
17975: IFFALSE 18150
17977: GO 17979
17979: DISABLE
17980: LD_INT 0
17982: PPUSH
17983: PPUSH
// begin for i := 1 to 8 do
17984: LD_ADDR_VAR 0 1
17988: PUSH
17989: DOUBLE
17990: LD_INT 1
17992: DEC
17993: ST_TO_ADDR
17994: LD_INT 8
17996: PUSH
17997: FOR_TO
17998: IFFALSE 18147
// if Side_Positions [ i ] then
18000: LD_EXP 21
18004: PUSH
18005: LD_VAR 0 1
18009: ARRAY
18010: IFFALSE 18145
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
18012: LD_ADDR_VAR 0 2
18016: PUSH
18017: LD_EXP 58
18021: PUSH
18022: LD_EXP 21
18026: PUSH
18027: LD_VAR 0 1
18031: ARRAY
18032: ARRAY
18033: PPUSH
18034: LD_INT 2
18036: PUSH
18037: LD_INT 21
18039: PUSH
18040: LD_INT 1
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: PUSH
18047: LD_INT 21
18049: PUSH
18050: LD_INT 2
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: LIST
18061: PUSH
18062: LD_INT 22
18064: PUSH
18065: LD_OWVAR 2
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PPUSH
18078: CALL_OW 70
18082: PUSH
18083: FOR_IN
18084: IFFALSE 18143
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
18086: LD_EXP 18
18090: PUSH
18091: LD_VAR 0 1
18095: ARRAY
18096: PUSH
18097: LD_EXP 18
18101: PUSH
18102: LD_OWVAR 2
18106: ARRAY
18107: NONEQUAL
18108: PUSH
18109: LD_EXP 23
18113: NOT
18114: PUSH
18115: LD_VAR 0 1
18119: PUSH
18120: LD_OWVAR 2
18124: NONEQUAL
18125: AND
18126: OR
18127: IFFALSE 18141
// ComMoveToArea ( un , BuildUpEscape ) ;
18129: LD_VAR 0 2
18133: PPUSH
18134: LD_INT 12
18136: PPUSH
18137: CALL_OW 113
18141: GO 18083
18143: POP
18144: POP
18145: GO 17997
18147: POP
18148: POP
// enable ;
18149: ENABLE
// end ;
18150: PPOPN 2
18152: END
// every 0 0$1 trigger def_builduptime do
18153: LD_EXP 54
18157: IFFALSE 18183
18159: GO 18161
18161: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
18162: LD_INT 8400
18164: PUSH
18165: LD_EXP 54
18169: PUSH
18170: LD_INT 2100
18172: MUL
18173: PLUS
18174: PPUSH
18175: CALL_OW 67
// EndBuildUp ;
18179: CALL 17796 0 0
// end ;
18183: END
