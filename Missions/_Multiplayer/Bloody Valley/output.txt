// export def_tree_function ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , respawning_time_min , respawning_time_max , siberite_bomb_Delay , amount_of_apemen , tree_function , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , battle_flags_id ; export normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 141
// begin Your_Side := mp_player_side ;
  79: LD_ADDR_OWVAR 2
  83: PUSH
  84: LD_OWVAR 7
  88: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  89: LD_ADDR_EXP 19
  93: PUSH
  94: LD_OWVAR 17
  98: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  99: LD_ADDR_EXP 16
 103: PUSH
 104: LD_OWVAR 15
 108: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 109: LD_ADDR_EXP 20
 113: PUSH
 114: LD_OWVAR 16
 118: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 119: LD_ADDR_EXP 18
 123: PUSH
 124: CALL 0 0 0
 128: ST_TO_ADDR
// Teams := mp_teams ;
 129: LD_ADDR_EXP 17
 133: PUSH
 134: LD_OWVAR 12
 138: ST_TO_ADDR
// end else
 139: GO 334
// begin Your_Side := 1 ;
 141: LD_ADDR_OWVAR 2
 145: PUSH
 146: LD_INT 1
 148: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 149: LD_ADDR_EXP 19
 153: PUSH
 154: LD_INT 1
 156: PUSH
 157: LD_INT 2
 159: PUSH
 160: LD_INT 3
 162: PUSH
 163: LD_INT 4
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 188: LD_ADDR_EXP 16
 192: PUSH
 193: LD_INT 1
 195: PUSH
 196: LD_INT 1
 198: PUSH
 199: LD_INT 2
 201: PUSH
 202: LD_INT 2
 204: PUSH
 205: LD_INT 0
 207: PUSH
 208: LD_INT 0
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 0 , 0 , 0 , 0 ] ;
 227: LD_ADDR_EXP 20
 231: PUSH
 232: LD_INT 1
 234: PUSH
 235: LD_INT 2
 237: PUSH
 238: LD_INT 3
 240: PUSH
 241: LD_INT 1
 243: PUSH
 244: LD_INT 0
 246: PUSH
 247: LD_INT 0
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 0
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: LIST
 264: LIST
 265: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 266: LD_ADDR_EXP 18
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: LD_INT 0
 279: PUSH
 280: LD_INT 0
 282: PUSH
 283: LD_INT 0
 285: PUSH
 286: LD_INT 0
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: LIST
 299: LIST
 300: LIST
 301: LIST
 302: LIST
 303: LIST
 304: ST_TO_ADDR
// Teams := [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 305: LD_ADDR_EXP 17
 309: PUSH
 310: LD_INT 1
 312: PUSH
 313: LD_INT 2
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: LD_INT 3
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 334: LD_ADDR_EXP 21
 338: PUSH
 339: LD_EXP 16
 343: PUSH
 344: LD_INT 0
 346: PUSH
 347: EMPTY
 348: LIST
 349: DIFF
 350: PUSH
 351: LD_INT 1
 353: GREATER
 354: ST_TO_ADDR
// if Multiplayer then
 355: LD_OWVAR 4
 359: IFFALSE 566
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 361: LD_ADDR_EXP 39
 365: PUSH
 366: LD_INT 0
 368: PPUSH
 369: CALL_OW 426
 373: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 374: LD_ADDR_EXP 40
 378: PUSH
 379: LD_INT 1
 381: PPUSH
 382: CALL_OW 426
 386: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 387: LD_ADDR_EXP 41
 391: PUSH
 392: LD_INT 2
 394: PPUSH
 395: CALL_OW 426
 399: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 400: LD_ADDR_EXP 42
 404: PUSH
 405: LD_INT 3
 407: PPUSH
 408: CALL_OW 426
 412: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 413: LD_ADDR_EXP 43
 417: PUSH
 418: LD_INT 4
 420: PPUSH
 421: CALL_OW 426
 425: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 426: LD_ADDR_EXP 44
 430: PUSH
 431: LD_INT 5
 433: PPUSH
 434: CALL_OW 426
 438: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 439: LD_ADDR_EXP 46
 443: PUSH
 444: LD_INT 10
 446: PPUSH
 447: CALL_OW 426
 451: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 452: LD_ADDR_EXP 47
 456: PUSH
 457: LD_INT 11
 459: PPUSH
 460: CALL_OW 426
 464: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 465: LD_ADDR_EXP 48
 469: PUSH
 470: LD_INT 12
 472: PPUSH
 473: CALL_OW 426
 477: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 13 ) ;
 478: LD_ADDR_EXP 50
 482: PUSH
 483: LD_INT 13
 485: PPUSH
 486: CALL_OW 426
 490: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 14 ) ;
 491: LD_ADDR_EXP 49
 495: PUSH
 496: LD_INT 14
 498: PPUSH
 499: CALL_OW 426
 503: ST_TO_ADDR
// def_tree_function := GetMultiplayerSetting ( 15 ) ;
 504: LD_ADDR_EXP 1
 508: PUSH
 509: LD_INT 15
 511: PPUSH
 512: CALL_OW 426
 516: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 517: LD_ADDR_EXP 51
 521: PUSH
 522: LD_INT 17
 524: PPUSH
 525: CALL_OW 426
 529: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 530: LD_ADDR_EXP 52
 534: PUSH
 535: LD_INT 20
 537: PPUSH
 538: CALL_OW 426
 542: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 543: LD_ADDR_VAR 0 3
 547: PUSH
 548: LD_INT 22
 550: PPUSH
 551: CALL_OW 426
 555: ST_TO_ADDR
// def_win_rules = 0 ;
 556: LD_ADDR_EXP 15
 560: PUSH
 561: LD_INT 0
 563: ST_TO_ADDR
// end else
 564: GO 698
// begin Randomize ;
 566: CALL_OW 10
// def_base_level := 2 ;
 570: LD_ADDR_EXP 39
 574: PUSH
 575: LD_INT 2
 577: ST_TO_ADDR
// def_amount_of_people := 1 ;
 578: LD_ADDR_EXP 40
 582: PUSH
 583: LD_INT 1
 585: ST_TO_ADDR
// def_skill_level := 1 ;
 586: LD_ADDR_EXP 41
 590: PUSH
 591: LD_INT 1
 593: ST_TO_ADDR
// def_starting_resources := 2 ;
 594: LD_ADDR_EXP 42
 598: PUSH
 599: LD_INT 2
 601: ST_TO_ADDR
// def_shipments_density := 50 ;
 602: LD_ADDR_EXP 43
 606: PUSH
 607: LD_INT 50
 609: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 610: LD_ADDR_EXP 44
 614: PUSH
 615: LD_INT 0
 617: ST_TO_ADDR
// def_shared_vision := 1 ;
 618: LD_ADDR_EXP 46
 622: PUSH
 623: LD_INT 1
 625: ST_TO_ADDR
// def_morale_flags := 1 ;
 626: LD_ADDR_EXP 47
 630: PUSH
 631: LD_INT 1
 633: ST_TO_ADDR
// def_siberite_detection := 1 ;
 634: LD_ADDR_EXP 48
 638: PUSH
 639: LD_INT 1
 641: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 642: LD_ADDR_EXP 50
 646: PUSH
 647: LD_INT 3
 649: ST_TO_ADDR
// def_people_respawning := 2 ;
 650: LD_ADDR_EXP 49
 654: PUSH
 655: LD_INT 2
 657: ST_TO_ADDR
// def_tree_function := 7 ;
 658: LD_ADDR_EXP 1
 662: PUSH
 663: LD_INT 7
 665: ST_TO_ADDR
// def_siberite_bomb := 2 ;
 666: LD_ADDR_EXP 51
 670: PUSH
 671: LD_INT 2
 673: ST_TO_ADDR
// def_builduptime := 1 ;
 674: LD_ADDR_EXP 52
 678: PUSH
 679: LD_INT 1
 681: ST_TO_ADDR
// tech_level = 4 ;
 682: LD_ADDR_VAR 0 3
 686: PUSH
 687: LD_INT 4
 689: ST_TO_ADDR
// def_win_rules = 0 ;
 690: LD_ADDR_EXP 15
 694: PUSH
 695: LD_INT 0
 697: ST_TO_ADDR
// end ; if def_tree_function = 7 then
 698: LD_EXP 1
 702: PUSH
 703: LD_INT 7
 705: EQUAL
 706: IFFALSE 724
// def_tree_function := Rand ( 1 , 5 ) ;
 708: LD_ADDR_EXP 1
 712: PUSH
 713: LD_INT 1
 715: PPUSH
 716: LD_INT 5
 718: PPUSH
 719: CALL_OW 12
 723: ST_TO_ADDR
// InitGameRules ;
 724: CALL 7500 0 0
// if def_game_rules = 0 then
 728: LD_EXP 38
 732: PUSH
 733: LD_INT 0
 735: EQUAL
 736: IFFALSE 763
// begin if isSGUI then
 738: LD_OWVAR 83
 742: IFFALSE 750
// setMpTechs ( ) else
 744: CALL 11017 0 0
 748: GO 763
// begin SetMpTechLevel ( tech_level + 1 ) ;
 750: LD_VAR 0 3
 754: PUSH
 755: LD_INT 1
 757: PLUS
 758: PPUSH
 759: CALL 11164 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 763: LD_ADDR_EXP 2
 767: PUSH
 768: LD_INT 0
 770: PUSH
 771: LD_INT 1
 773: PUSH
 774: LD_INT 1
 776: PUSH
 777: LD_INT 1
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: LIST
 784: LIST
 785: PUSH
 786: LD_EXP 39
 790: PUSH
 791: LD_INT 1
 793: PLUS
 794: ARRAY
 795: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 , 3 ] [ def_base_level + 1 ] ;
 796: LD_ADDR_EXP 3
 800: PUSH
 801: LD_INT 0
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: LD_INT 2
 809: PUSH
 810: LD_INT 3
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: LIST
 817: LIST
 818: PUSH
 819: LD_EXP 39
 823: PUSH
 824: LD_INT 1
 826: PLUS
 827: ARRAY
 828: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 829: LD_ADDR_EXP 5
 833: PUSH
 834: LD_INT 2
 836: PUSH
 837: LD_INT 3
 839: PUSH
 840: LD_INT 4
 842: PUSH
 843: LD_INT 5
 845: PUSH
 846: EMPTY
 847: LIST
 848: LIST
 849: LIST
 850: LIST
 851: PUSH
 852: LD_EXP 41
 856: PUSH
 857: LD_INT 1
 859: PLUS
 860: ARRAY
 861: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 862: LD_ADDR_EXP 7
 866: PUSH
 867: LD_INT 0
 869: PUSH
 870: LD_INT 0
 872: PUSH
 873: LD_INT 0
 875: PUSH
 876: EMPTY
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_INT 30
 883: PUSH
 884: LD_INT 0
 886: PUSH
 887: LD_INT 0
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: LIST
 894: PUSH
 895: LD_INT 50
 897: PUSH
 898: LD_INT 20
 900: PUSH
 901: LD_INT 0
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: LIST
 908: PUSH
 909: LD_INT 80
 911: PUSH
 912: LD_INT 40
 914: PUSH
 915: LD_INT 20
 917: PUSH
 918: EMPTY
 919: LIST
 920: LIST
 921: LIST
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: LIST
 928: PUSH
 929: LD_EXP 42
 933: PUSH
 934: LD_INT 1
 936: PLUS
 937: ARRAY
 938: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 939: LD_ADDR_EXP 6
 943: PUSH
 944: LD_INT 10
 946: PUSH
 947: EMPTY
 948: LIST
 949: PUSH
 950: LD_INT 7
 952: PUSH
 953: LD_INT 14
 955: PUSH
 956: EMPTY
 957: LIST
 958: LIST
 959: PUSH
 960: LD_INT 6
 962: PUSH
 963: LD_INT 12
 965: PUSH
 966: LD_INT 18
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: LIST
 973: PUSH
 974: LD_INT 5
 976: PUSH
 977: LD_INT 10
 979: PUSH
 980: LD_INT 15
 982: PUSH
 983: LD_INT 20
 985: PUSH
 986: EMPTY
 987: LIST
 988: LIST
 989: LIST
 990: LIST
 991: PUSH
 992: EMPTY
 993: LIST
 994: LIST
 995: LIST
 996: LIST
 997: PUSH
 998: LD_EXP 42
1002: PUSH
1003: LD_INT 1
1005: PLUS
1006: ARRAY
1007: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1008: LD_ADDR_EXP 4
1012: PUSH
1013: LD_EXP 40
1017: PUSH
1018: LD_INT 4
1020: PLUS
1021: ST_TO_ADDR
// shipments_density := 150 - ( def_shipments_density + 1 ) ;
1022: LD_ADDR_EXP 8
1026: PUSH
1027: LD_INT 150
1029: PUSH
1030: LD_EXP 43
1034: PUSH
1035: LD_INT 1
1037: PLUS
1038: MINUS
1039: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1040: LD_ADDR_EXP 13
1044: PUSH
1045: LD_INT 0
1047: PUSH
1048: LD_INT 1
1050: PUSH
1051: LD_INT 2
1053: PUSH
1054: LD_INT 3
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: LIST
1061: LIST
1062: PUSH
1063: LD_EXP 50
1067: PUSH
1068: LD_INT 1
1070: PLUS
1071: ARRAY
1072: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1073: LD_ADDR_EXP 10
1077: PUSH
1078: LD_INT 0
1080: PUSH
1081: LD_INT 8400
1083: PUSH
1084: LD_INT 1750
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: LD_EXP 49
1096: PUSH
1097: LD_INT 1
1099: PLUS
1100: ARRAY
1101: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1102: LD_ADDR_EXP 11
1106: PUSH
1107: LD_INT 0
1109: PUSH
1110: LD_INT 21000
1112: PUSH
1113: LD_INT 4200
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: LIST
1120: PUSH
1121: LD_EXP 49
1125: PUSH
1126: LD_INT 1
1128: PLUS
1129: ARRAY
1130: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1131: LD_ADDR_EXP 9
1135: PUSH
1136: LD_INT 1
1138: NEG
1139: PUSH
1140: LD_INT 350
1142: PUSH
1143: LD_INT 700
1145: PUSH
1146: LD_INT 1400
1148: PUSH
1149: LD_INT 0
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: PUSH
1159: LD_EXP 47
1163: PUSH
1164: LD_INT 1
1166: PLUS
1167: ARRAY
1168: ST_TO_ADDR
// battle_flags_id := [ ] ;
1169: LD_ADDR_EXP 25
1173: PUSH
1174: EMPTY
1175: ST_TO_ADDR
// tree_function := [ [ 0 , 0 , 0 , 0 , 0 ] , [ 2 , 0 , 0 , 0 , 0 ] , [ 0 , 4 , 0 , 0 , 0 ] , [ 0 , 0 , 2 , 0 , 0 ] , [ 0 , 0 , 0 , 3 , 0 ] , [ 1 , 2 , 1 , 2 , 2 ] , [ 0 , 0 , 0 , 0 , 3 ] ] [ def_tree_function + 1 ] ;
1176: LD_ADDR_EXP 14
1180: PUSH
1181: LD_INT 0
1183: PUSH
1184: LD_INT 0
1186: PUSH
1187: LD_INT 0
1189: PUSH
1190: LD_INT 0
1192: PUSH
1193: LD_INT 0
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: LIST
1201: LIST
1202: PUSH
1203: LD_INT 2
1205: PUSH
1206: LD_INT 0
1208: PUSH
1209: LD_INT 0
1211: PUSH
1212: LD_INT 0
1214: PUSH
1215: LD_INT 0
1217: PUSH
1218: EMPTY
1219: LIST
1220: LIST
1221: LIST
1222: LIST
1223: LIST
1224: PUSH
1225: LD_INT 0
1227: PUSH
1228: LD_INT 4
1230: PUSH
1231: LD_INT 0
1233: PUSH
1234: LD_INT 0
1236: PUSH
1237: LD_INT 0
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: PUSH
1247: LD_INT 0
1249: PUSH
1250: LD_INT 0
1252: PUSH
1253: LD_INT 2
1255: PUSH
1256: LD_INT 0
1258: PUSH
1259: LD_INT 0
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: PUSH
1269: LD_INT 0
1271: PUSH
1272: LD_INT 0
1274: PUSH
1275: LD_INT 0
1277: PUSH
1278: LD_INT 3
1280: PUSH
1281: LD_INT 0
1283: PUSH
1284: EMPTY
1285: LIST
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: PUSH
1291: LD_INT 1
1293: PUSH
1294: LD_INT 2
1296: PUSH
1297: LD_INT 1
1299: PUSH
1300: LD_INT 2
1302: PUSH
1303: LD_INT 2
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: PUSH
1313: LD_INT 0
1315: PUSH
1316: LD_INT 0
1318: PUSH
1319: LD_INT 0
1321: PUSH
1322: LD_INT 0
1324: PUSH
1325: LD_INT 3
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: LIST
1341: LIST
1342: LIST
1343: PUSH
1344: LD_EXP 1
1348: PUSH
1349: LD_INT 1
1351: PLUS
1352: ARRAY
1353: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1354: LD_EXP 51
1358: PUSH
1359: LD_INT 0
1361: EQUAL
1362: IFFALSE 1374
// siberite_bomb_Delay = 0 else
1364: LD_ADDR_EXP 12
1368: PUSH
1369: LD_INT 0
1371: ST_TO_ADDR
1372: GO 1396
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1374: LD_ADDR_EXP 12
1378: PUSH
1379: LD_EXP 51
1383: PUSH
1384: LD_INT 1
1386: MINUS
1387: PUSH
1388: LD_INT 21000
1390: MUL
1391: PUSH
1392: LD_INT 1
1394: PLUS
1395: ST_TO_ADDR
// end ;
1396: LD_VAR 0 1
1400: RET
// function prepare_map_coordinates ; var side , dep , br1 , br2 , br3 , un , i , j ; begin
1401: LD_INT 0
1403: PPUSH
1404: PPUSH
1405: PPUSH
1406: PPUSH
1407: PPUSH
1408: PPUSH
1409: PPUSH
1410: PPUSH
1411: PPUSH
// depot_def = [ ] ;
1412: LD_ADDR_EXP 22
1416: PUSH
1417: EMPTY
1418: ST_TO_ADDR
// breastworks_def = [ ] ;
1419: LD_ADDR_EXP 23
1423: PUSH
1424: EMPTY
1425: ST_TO_ADDR
// for side := 1 to 4 do
1426: LD_ADDR_VAR 0 2
1430: PUSH
1431: DOUBLE
1432: LD_INT 1
1434: DEC
1435: ST_TO_ADDR
1436: LD_INT 4
1438: PUSH
1439: FOR_TO
1440: IFFALSE 1795
// begin dep := side * 4 - 3 ;
1442: LD_ADDR_VAR 0 3
1446: PUSH
1447: LD_VAR 0 2
1451: PUSH
1452: LD_INT 4
1454: MUL
1455: PUSH
1456: LD_INT 3
1458: MINUS
1459: ST_TO_ADDR
// br1 := side * 4 - 2 ;
1460: LD_ADDR_VAR 0 4
1464: PUSH
1465: LD_VAR 0 2
1469: PUSH
1470: LD_INT 4
1472: MUL
1473: PUSH
1474: LD_INT 2
1476: MINUS
1477: ST_TO_ADDR
// br2 := side * 4 - 1 ;
1478: LD_ADDR_VAR 0 5
1482: PUSH
1483: LD_VAR 0 2
1487: PUSH
1488: LD_INT 4
1490: MUL
1491: PUSH
1492: LD_INT 1
1494: MINUS
1495: ST_TO_ADDR
// br3 := side * 4 ;
1496: LD_ADDR_VAR 0 6
1500: PUSH
1501: LD_VAR 0 2
1505: PUSH
1506: LD_INT 4
1508: MUL
1509: ST_TO_ADDR
// depot_def := depot_def ^ [ [ GetX ( dep ) , GetY ( dep ) , GetDir ( dep ) ] ] ;
1510: LD_ADDR_EXP 22
1514: PUSH
1515: LD_EXP 22
1519: PUSH
1520: LD_VAR 0 3
1524: PPUSH
1525: CALL_OW 250
1529: PUSH
1530: LD_VAR 0 3
1534: PPUSH
1535: CALL_OW 251
1539: PUSH
1540: LD_VAR 0 3
1544: PPUSH
1545: CALL_OW 254
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: LIST
1554: PUSH
1555: EMPTY
1556: LIST
1557: ADD
1558: ST_TO_ADDR
// start_def := start_def ^ [ [ ShiftX ( GetX ( Dep ) , GetDir ( Dep ) , 6 ) , ShiftY ( GetY ( Dep ) , GetDir ( Dep ) , 6 ) ] ] ;
1559: LD_ADDR_EXP 24
1563: PUSH
1564: LD_EXP 24
1568: PUSH
1569: LD_VAR 0 3
1573: PPUSH
1574: CALL_OW 250
1578: PPUSH
1579: LD_VAR 0 3
1583: PPUSH
1584: CALL_OW 254
1588: PPUSH
1589: LD_INT 6
1591: PPUSH
1592: CALL_OW 272
1596: PUSH
1597: LD_VAR 0 3
1601: PPUSH
1602: CALL_OW 251
1606: PPUSH
1607: LD_VAR 0 3
1611: PPUSH
1612: CALL_OW 254
1616: PPUSH
1617: LD_INT 6
1619: PPUSH
1620: CALL_OW 273
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: PUSH
1629: EMPTY
1630: LIST
1631: ADD
1632: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ GetX ( br1 ) , GetY ( br1 ) , GetDir ( br1 ) ] , [ GetX ( br2 ) , GetY ( br2 ) , GetDir ( br2 ) ] , [ GetX ( br3 ) , GetY ( br3 ) , GetDir ( br3 ) ] ] ] ;
1633: LD_ADDR_EXP 23
1637: PUSH
1638: LD_EXP 23
1642: PUSH
1643: LD_VAR 0 4
1647: PPUSH
1648: CALL_OW 250
1652: PUSH
1653: LD_VAR 0 4
1657: PPUSH
1658: CALL_OW 251
1662: PUSH
1663: LD_VAR 0 4
1667: PPUSH
1668: CALL_OW 254
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: LIST
1677: PUSH
1678: LD_VAR 0 5
1682: PPUSH
1683: CALL_OW 250
1687: PUSH
1688: LD_VAR 0 5
1692: PPUSH
1693: CALL_OW 251
1697: PUSH
1698: LD_VAR 0 5
1702: PPUSH
1703: CALL_OW 254
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: LIST
1712: PUSH
1713: LD_VAR 0 6
1717: PPUSH
1718: CALL_OW 250
1722: PUSH
1723: LD_VAR 0 6
1727: PPUSH
1728: CALL_OW 251
1732: PUSH
1733: LD_VAR 0 6
1737: PPUSH
1738: CALL_OW 254
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: LIST
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: LIST
1752: PUSH
1753: EMPTY
1754: LIST
1755: ADD
1756: ST_TO_ADDR
// DestroyUnit ( dep ) ;
1757: LD_VAR 0 3
1761: PPUSH
1762: CALL_OW 65
// DestroyUnit ( br1 ) ;
1766: LD_VAR 0 4
1770: PPUSH
1771: CALL_OW 65
// DestroyUnit ( br2 ) ;
1775: LD_VAR 0 5
1779: PPUSH
1780: CALL_OW 65
// DestroyUnit ( br3 ) ;
1784: LD_VAR 0 6
1788: PPUSH
1789: CALL_OW 65
// end ;
1793: GO 1439
1795: POP
1796: POP
// normal_oil_deposits_locations := [ [ 28 , 15 ] , [ 102 , 17 ] , [ 50 , 84 ] , [ 143 , 111 ] ] ;
1797: LD_ADDR_EXP 26
1801: PUSH
1802: LD_INT 28
1804: PUSH
1805: LD_INT 15
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: PUSH
1812: LD_INT 102
1814: PUSH
1815: LD_INT 17
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: PUSH
1822: LD_INT 50
1824: PUSH
1825: LD_INT 84
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: LD_INT 143
1834: PUSH
1835: LD_INT 111
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PUSH
1842: EMPTY
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 28 , 15 ] , [ 52 , 44 ] ] , [ [ 102 , 17 ] , [ 84 , 37 ] ] , [ [ 50 , 84 ] , [ 74 , 81 ] ] , [ [ 143 , 111 ] , [ 106 , 77 ] ] , ] ;
1848: LD_ADDR_EXP 27
1852: PUSH
1853: LD_INT 28
1855: PUSH
1856: LD_INT 15
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: PUSH
1863: LD_INT 52
1865: PUSH
1866: LD_INT 44
1868: PUSH
1869: EMPTY
1870: LIST
1871: LIST
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 102
1879: PUSH
1880: LD_INT 17
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: LD_INT 84
1889: PUSH
1890: LD_INT 37
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: PUSH
1897: EMPTY
1898: LIST
1899: LIST
1900: PUSH
1901: LD_INT 50
1903: PUSH
1904: LD_INT 84
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: PUSH
1911: LD_INT 74
1913: PUSH
1914: LD_INT 81
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: PUSH
1925: LD_INT 143
1927: PUSH
1928: LD_INT 111
1930: PUSH
1931: EMPTY
1932: LIST
1933: LIST
1934: PUSH
1935: LD_INT 106
1937: PUSH
1938: LD_INT 77
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: PUSH
1945: EMPTY
1946: LIST
1947: LIST
1948: PUSH
1949: EMPTY
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 45 , 25 ] , [ 75 , 22 ] , [ 87 , 105 ] , [ 117 , 99 ] ] ;
1955: LD_ADDR_EXP 28
1959: PUSH
1960: LD_INT 45
1962: PUSH
1963: LD_INT 25
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: PUSH
1970: LD_INT 75
1972: PUSH
1973: LD_INT 22
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PUSH
1980: LD_INT 87
1982: PUSH
1983: LD_INT 105
1985: PUSH
1986: EMPTY
1987: LIST
1988: LIST
1989: PUSH
1990: LD_INT 117
1992: PUSH
1993: LD_INT 99
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: PUSH
2000: EMPTY
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: ST_TO_ADDR
// for i = 1 to Side_Positions do
2006: LD_ADDR_VAR 0 8
2010: PUSH
2011: DOUBLE
2012: LD_INT 1
2014: DEC
2015: ST_TO_ADDR
2016: LD_EXP 19
2020: PUSH
2021: FOR_TO
2022: IFFALSE 2201
// begin if not Side_Positions [ i ] then
2024: LD_EXP 19
2028: PUSH
2029: LD_VAR 0 8
2033: ARRAY
2034: NOT
2035: IFFALSE 2039
// continue ;
2037: GO 2021
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2039: LD_EXP 28
2043: PUSH
2044: LD_EXP 19
2048: PUSH
2049: LD_VAR 0 8
2053: ARRAY
2054: ARRAY
2055: PUSH
2056: LD_INT 1
2058: ARRAY
2059: PPUSH
2060: LD_EXP 28
2064: PUSH
2065: LD_EXP 19
2069: PUSH
2070: LD_VAR 0 8
2074: ARRAY
2075: ARRAY
2076: PUSH
2077: LD_INT 2
2079: ARRAY
2080: PPUSH
2081: LD_INT 3
2083: PPUSH
2084: CALL_OW 62
// if def_extra_oil_deposits then
2088: LD_EXP 44
2092: IFFALSE 2150
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2094: LD_ADDR_VAR 0 9
2098: PUSH
2099: LD_EXP 27
2103: PUSH
2104: LD_EXP 19
2108: PUSH
2109: LD_VAR 0 8
2113: ARRAY
2114: ARRAY
2115: PUSH
2116: FOR_IN
2117: IFFALSE 2146
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2119: LD_VAR 0 9
2123: PUSH
2124: LD_INT 1
2126: ARRAY
2127: PPUSH
2128: LD_VAR 0 9
2132: PUSH
2133: LD_INT 2
2135: ARRAY
2136: PPUSH
2137: LD_INT 2
2139: PPUSH
2140: CALL_OW 62
2144: GO 2116
2146: POP
2147: POP
2148: GO 2199
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2150: LD_EXP 26
2154: PUSH
2155: LD_EXP 19
2159: PUSH
2160: LD_VAR 0 8
2164: ARRAY
2165: ARRAY
2166: PUSH
2167: LD_INT 1
2169: ARRAY
2170: PPUSH
2171: LD_EXP 26
2175: PUSH
2176: LD_EXP 19
2180: PUSH
2181: LD_VAR 0 8
2185: ARRAY
2186: ARRAY
2187: PUSH
2188: LD_INT 2
2190: ARRAY
2191: PPUSH
2192: LD_INT 2
2194: PPUSH
2195: CALL_OW 62
// end ;
2199: GO 2021
2201: POP
2202: POP
// end ;
2203: LD_VAR 0 1
2207: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2208: LD_INT 0
2210: PPUSH
2211: PPUSH
2212: PPUSH
// if not Team_Game then
2213: LD_EXP 21
2217: NOT
2218: IFFALSE 2316
// begin for i = 1 to 8 do
2220: LD_ADDR_VAR 0 2
2224: PUSH
2225: DOUBLE
2226: LD_INT 1
2228: DEC
2229: ST_TO_ADDR
2230: LD_INT 8
2232: PUSH
2233: FOR_TO
2234: IFFALSE 2312
// for j = 1 to 8 do
2236: LD_ADDR_VAR 0 3
2240: PUSH
2241: DOUBLE
2242: LD_INT 1
2244: DEC
2245: ST_TO_ADDR
2246: LD_INT 8
2248: PUSH
2249: FOR_TO
2250: IFFALSE 2308
// if i <> j then
2252: LD_VAR 0 2
2256: PUSH
2257: LD_VAR 0 3
2261: NONEQUAL
2262: IFFALSE 2286
// SetAttitude ( i , j , att_neutral , true ) else
2264: LD_VAR 0 2
2268: PPUSH
2269: LD_VAR 0 3
2273: PPUSH
2274: LD_INT 0
2276: PPUSH
2277: LD_INT 1
2279: PPUSH
2280: CALL_OW 80
2284: GO 2306
// SetAttitude ( i , j , att_friend , true ) ;
2286: LD_VAR 0 2
2290: PPUSH
2291: LD_VAR 0 3
2295: PPUSH
2296: LD_INT 1
2298: PPUSH
2299: LD_INT 1
2301: PPUSH
2302: CALL_OW 80
2306: GO 2249
2308: POP
2309: POP
2310: GO 2233
2312: POP
2313: POP
// end else
2314: GO 2491
// begin if def_shared_vision then
2316: LD_EXP 46
2320: IFFALSE 2385
// begin for i in Teams do
2322: LD_ADDR_VAR 0 2
2326: PUSH
2327: LD_EXP 17
2331: PUSH
2332: FOR_IN
2333: IFFALSE 2383
// for j = 2 to i do
2335: LD_ADDR_VAR 0 3
2339: PUSH
2340: DOUBLE
2341: LD_INT 2
2343: DEC
2344: ST_TO_ADDR
2345: LD_VAR 0 2
2349: PUSH
2350: FOR_TO
2351: IFFALSE 2379
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2353: LD_VAR 0 2
2357: PUSH
2358: LD_VAR 0 3
2362: ARRAY
2363: PPUSH
2364: LD_VAR 0 2
2368: PUSH
2369: LD_INT 1
2371: ARRAY
2372: PPUSH
2373: CALL_OW 343
2377: GO 2350
2379: POP
2380: POP
2381: GO 2332
2383: POP
2384: POP
// end ; for i = 1 to 8 do
2385: LD_ADDR_VAR 0 2
2389: PUSH
2390: DOUBLE
2391: LD_INT 1
2393: DEC
2394: ST_TO_ADDR
2395: LD_INT 8
2397: PUSH
2398: FOR_TO
2399: IFFALSE 2489
// for j = 1 to 8 do
2401: LD_ADDR_VAR 0 3
2405: PUSH
2406: DOUBLE
2407: LD_INT 1
2409: DEC
2410: ST_TO_ADDR
2411: LD_INT 8
2413: PUSH
2414: FOR_TO
2415: IFFALSE 2485
// if Side_Teams [ i ] = Side_Teams [ j ] then
2417: LD_EXP 16
2421: PUSH
2422: LD_VAR 0 2
2426: ARRAY
2427: PUSH
2428: LD_EXP 16
2432: PUSH
2433: LD_VAR 0 3
2437: ARRAY
2438: EQUAL
2439: IFFALSE 2463
// SetAttitude ( i , j , att_friend , true ) else
2441: LD_VAR 0 2
2445: PPUSH
2446: LD_VAR 0 3
2450: PPUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 1
2456: PPUSH
2457: CALL_OW 80
2461: GO 2483
// SetAttitude ( i , j , att_enemy , true ) ;
2463: LD_VAR 0 2
2467: PPUSH
2468: LD_VAR 0 3
2472: PPUSH
2473: LD_INT 2
2475: PPUSH
2476: LD_INT 1
2478: PPUSH
2479: CALL_OW 80
2483: GO 2414
2485: POP
2486: POP
2487: GO 2398
2489: POP
2490: POP
// end ; end ;
2491: LD_VAR 0 1
2495: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2496: LD_INT 0
2498: PPUSH
2499: PPUSH
2500: PPUSH
2501: PPUSH
// result := [ ] ;
2502: LD_ADDR_VAR 0 7
2506: PUSH
2507: EMPTY
2508: ST_TO_ADDR
// for i := 1 to count do
2509: LD_ADDR_VAR 0 8
2513: PUSH
2514: DOUBLE
2515: LD_INT 1
2517: DEC
2518: ST_TO_ADDR
2519: LD_VAR 0 1
2523: PUSH
2524: FOR_TO
2525: IFFALSE 2943
// begin uc_direction := Rand ( 0 , 5 ) ;
2527: LD_ADDR_OWVAR 24
2531: PUSH
2532: LD_INT 0
2534: PPUSH
2535: LD_INT 5
2537: PPUSH
2538: CALL_OW 12
2542: ST_TO_ADDR
// if commander then
2543: LD_LOC 1
2547: IFFALSE 2656
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2549: LD_ADDR_OWVAR 26
2553: PUSH
2554: LD_OWVAR 19
2558: PUSH
2559: LD_OWVAR 20
2563: ARRAY
2564: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2565: LD_INT 1
2567: PPUSH
2568: LD_INT 2
2570: PPUSH
2571: CALL_OW 12
2575: PPUSH
2576: LD_VAR 0 2
2580: PPUSH
2581: LD_EXP 5
2585: PUSH
2586: LD_INT 2
2588: PLUS
2589: PPUSH
2590: CALL_OW 380
// hc_importance := 105 ;
2594: LD_ADDR_OWVAR 32
2598: PUSH
2599: LD_INT 105
2601: ST_TO_ADDR
// commander := false ;
2602: LD_ADDR_LOC 1
2606: PUSH
2607: LD_INT 0
2609: ST_TO_ADDR
// if Multiplayer then
2610: LD_OWVAR 4
2614: IFFALSE 2654
// begin hc_gallery := MULTIAVATARS ;
2616: LD_ADDR_OWVAR 33
2620: PUSH
2621: LD_STRING MULTIAVATARS
2623: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2624: LD_ADDR_OWVAR 34
2628: PUSH
2629: LD_OWVAR 20
2633: PPUSH
2634: CALL_OW 525
2638: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2639: LD_ADDR_OWVAR 27
2643: PUSH
2644: LD_OWVAR 20
2648: PPUSH
2649: CALL_OW 526
2653: ST_TO_ADDR
// end ; end else
2654: GO 2719
// begin hc_name :=  ;
2656: LD_ADDR_OWVAR 26
2660: PUSH
2661: LD_STRING 
2663: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2664: LD_INT 1
2666: PPUSH
2667: LD_INT 2
2669: PPUSH
2670: CALL_OW 12
2674: PPUSH
2675: LD_VAR 0 2
2679: PPUSH
2680: LD_EXP 5
2684: PPUSH
2685: CALL_OW 380
// hc_importance := 0 ;
2689: LD_ADDR_OWVAR 32
2693: PUSH
2694: LD_INT 0
2696: ST_TO_ADDR
// if Multiplayer then
2697: LD_OWVAR 4
2701: IFFALSE 2719
// begin hc_gallery :=  ;
2703: LD_ADDR_OWVAR 33
2707: PUSH
2708: LD_STRING 
2710: ST_TO_ADDR
// hc_face_number := 0 ;
2711: LD_ADDR_OWVAR 34
2715: PUSH
2716: LD_INT 0
2718: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2719: LD_ADDR_VAR 0 10
2723: PUSH
2724: CALL_OW 44
2728: ST_TO_ADDR
// if global_defined then
2729: LD_LOC 3
2733: IFFALSE 2873
// begin if ( cl = class_soldier ) then
2735: LD_VAR 0 2
2739: PUSH
2740: LD_INT 1
2742: EQUAL
2743: IFFALSE 2763
// j := i + soldiers_created else
2745: LD_ADDR_VAR 0 9
2749: PUSH
2750: LD_VAR 0 8
2754: PUSH
2755: LD_LOC 4
2759: PLUS
2760: ST_TO_ADDR
2761: GO 2773
// j := i ;
2763: LD_ADDR_VAR 0 9
2767: PUSH
2768: LD_VAR 0 8
2772: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2773: LD_LOC 2
2777: PUSH
2778: LD_VAR 0 2
2782: ARRAY
2783: PUSH
2784: LD_VAR 0 9
2788: ARRAY
2789: PPUSH
2790: LD_VAR 0 10
2794: PPUSH
2795: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2799: LD_VAR 0 10
2803: PPUSH
2804: LD_INT 2
2806: PPUSH
2807: LD_LOC 2
2811: PUSH
2812: LD_VAR 0 2
2816: ARRAY
2817: PUSH
2818: LD_VAR 0 9
2822: ARRAY
2823: PPUSH
2824: LD_INT 2
2826: PPUSH
2827: CALL_OW 260
2831: PPUSH
2832: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2836: LD_VAR 0 10
2840: PPUSH
2841: LD_INT 1
2843: PPUSH
2844: LD_LOC 2
2848: PUSH
2849: LD_VAR 0 2
2853: ARRAY
2854: PUSH
2855: LD_VAR 0 9
2859: ARRAY
2860: PPUSH
2861: LD_INT 1
2863: PPUSH
2864: CALL_OW 260
2868: PPUSH
2869: CALL_OW 239
// end ; if building then
2873: LD_VAR 0 6
2877: IFFALSE 2895
// PlaceHumanInUnit ( un , building ) else
2879: LD_VAR 0 10
2883: PPUSH
2884: LD_VAR 0 6
2888: PPUSH
2889: CALL_OW 52
2893: GO 2922
// PlaceUnitXYR ( un , x , y , r , false ) ;
2895: LD_VAR 0 10
2899: PPUSH
2900: LD_VAR 0 3
2904: PPUSH
2905: LD_VAR 0 4
2909: PPUSH
2910: LD_VAR 0 5
2914: PPUSH
2915: LD_INT 0
2917: PPUSH
2918: CALL_OW 50
// result := result ^ [ un ] ;
2922: LD_ADDR_VAR 0 7
2926: PUSH
2927: LD_VAR 0 7
2931: PUSH
2932: LD_VAR 0 10
2936: PUSH
2937: EMPTY
2938: LIST
2939: ADD
2940: ST_TO_ADDR
// end ;
2941: GO 2524
2943: POP
2944: POP
// if not global_defined then
2945: LD_LOC 3
2949: NOT
2950: IFFALSE 3028
// if ( global_units >= cl ) then
2952: LD_LOC 2
2956: PUSH
2957: LD_VAR 0 2
2961: GREATEREQUAL
2962: IFFALSE 3003
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2964: LD_ADDR_LOC 2
2968: PUSH
2969: LD_LOC 2
2973: PPUSH
2974: LD_VAR 0 2
2978: PPUSH
2979: LD_LOC 2
2983: PUSH
2984: LD_VAR 0 2
2988: ARRAY
2989: PUSH
2990: LD_VAR 0 7
2994: ADD
2995: PPUSH
2996: CALL_OW 1
3000: ST_TO_ADDR
3001: GO 3028
// global_units := Replace ( global_units , cl , result ) ;
3003: LD_ADDR_LOC 2
3007: PUSH
3008: LD_LOC 2
3012: PPUSH
3013: LD_VAR 0 2
3017: PPUSH
3018: LD_VAR 0 7
3022: PPUSH
3023: CALL_OW 1
3027: ST_TO_ADDR
// if commander then
3028: LD_LOC 1
3032: IFFALSE 3079
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3034: LD_ADDR_EXP 29
3038: PUSH
3039: LD_EXP 29
3043: PPUSH
3044: LD_OWVAR 20
3048: PPUSH
3049: LD_EXP 29
3053: PUSH
3054: LD_OWVAR 20
3058: ARRAY
3059: PUSH
3060: LD_VAR 0 10
3064: ADD
3065: PPUSH
3066: CALL_OW 1
3070: ST_TO_ADDR
// commander := false ;
3071: LD_ADDR_LOC 1
3075: PUSH
3076: LD_INT 0
3078: ST_TO_ADDR
// end ; end ;
3079: LD_VAR 0 7
3083: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3084: LD_INT 0
3086: PPUSH
3087: PPUSH
3088: PPUSH
3089: PPUSH
3090: PPUSH
3091: PPUSH
3092: PPUSH
3093: PPUSH
3094: PPUSH
// if side in [ 0 , 9 ] then
3095: LD_VAR 0 1
3099: PUSH
3100: LD_INT 0
3102: PUSH
3103: LD_INT 9
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: IN
3110: IFFALSE 3114
// exit ;
3112: GO 4164
// pos := Side_Positions [ side ] ;
3114: LD_ADDR_VAR 0 3
3118: PUSH
3119: LD_EXP 19
3123: PUSH
3124: LD_VAR 0 1
3128: ARRAY
3129: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3130: LD_ADDR_OWVAR 21
3134: PUSH
3135: LD_EXP 20
3139: PUSH
3140: LD_VAR 0 1
3144: ARRAY
3145: ST_TO_ADDR
// uc_side := side ;
3146: LD_ADDR_OWVAR 20
3150: PUSH
3151: LD_VAR 0 1
3155: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3156: LD_ADDR_VAR 0 4
3160: PUSH
3161: LD_EXP 22
3165: PUSH
3166: LD_VAR 0 3
3170: ARRAY
3171: PUSH
3172: LD_INT 1
3174: ARRAY
3175: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3176: LD_ADDR_VAR 0 5
3180: PUSH
3181: LD_EXP 22
3185: PUSH
3186: LD_VAR 0 3
3190: ARRAY
3191: PUSH
3192: LD_INT 2
3194: ARRAY
3195: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3196: LD_ADDR_VAR 0 6
3200: PUSH
3201: LD_EXP 22
3205: PUSH
3206: LD_VAR 0 3
3210: ARRAY
3211: PUSH
3212: LD_INT 3
3214: ARRAY
3215: ST_TO_ADDR
// if is_depot then
3216: LD_EXP 2
3220: IFFALSE 3353
// begin bc_type = b_depot ;
3222: LD_ADDR_OWVAR 42
3226: PUSH
3227: LD_INT 0
3229: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3230: LD_ADDR_VAR 0 10
3234: PUSH
3235: LD_VAR 0 4
3239: PPUSH
3240: LD_VAR 0 5
3244: PPUSH
3245: LD_VAR 0 6
3249: PPUSH
3250: CALL_OW 47
3254: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3255: LD_VAR 0 10
3259: PPUSH
3260: LD_STRING @
3262: PUSH
3263: LD_VAR 0 1
3267: STR
3268: PPUSH
3269: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3273: LD_VAR 0 10
3277: PPUSH
3278: CALL_OW 274
3282: PPUSH
3283: LD_INT 1
3285: PPUSH
3286: LD_EXP 7
3290: PUSH
3291: LD_INT 1
3293: ARRAY
3294: PPUSH
3295: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3299: LD_VAR 0 10
3303: PPUSH
3304: CALL_OW 274
3308: PPUSH
3309: LD_INT 2
3311: PPUSH
3312: LD_EXP 7
3316: PUSH
3317: LD_INT 2
3319: ARRAY
3320: PPUSH
3321: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3325: LD_VAR 0 10
3329: PPUSH
3330: CALL_OW 274
3334: PPUSH
3335: LD_INT 3
3337: PPUSH
3338: LD_EXP 7
3342: PUSH
3343: LD_INT 3
3345: ARRAY
3346: PPUSH
3347: CALL_OW 277
// end else
3351: GO 3497
// begin for i := 1 to 3 do
3353: LD_ADDR_VAR 0 7
3357: PUSH
3358: DOUBLE
3359: LD_INT 1
3361: DEC
3362: ST_TO_ADDR
3363: LD_INT 3
3365: PUSH
3366: FOR_TO
3367: IFFALSE 3495
// begin r := starting_resources [ i ] ;
3369: LD_ADDR_VAR 0 8
3373: PUSH
3374: LD_EXP 7
3378: PUSH
3379: LD_VAR 0 7
3383: ARRAY
3384: ST_TO_ADDR
// while r >= 10 do
3385: LD_VAR 0 8
3389: PUSH
3390: LD_INT 10
3392: GREATEREQUAL
3393: IFFALSE 3493
// if r > 50 then
3395: LD_VAR 0 8
3399: PUSH
3400: LD_INT 50
3402: GREATER
3403: IFFALSE 3449
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3405: LD_VAR 0 7
3409: PPUSH
3410: LD_INT 5
3412: PPUSH
3413: LD_VAR 0 4
3417: PPUSH
3418: LD_VAR 0 5
3422: PPUSH
3423: LD_INT 4
3425: PPUSH
3426: LD_INT 0
3428: PPUSH
3429: CALL_OW 60
// r := r - 50 ;
3433: LD_ADDR_VAR 0 8
3437: PUSH
3438: LD_VAR 0 8
3442: PUSH
3443: LD_INT 50
3445: MINUS
3446: ST_TO_ADDR
// end else
3447: GO 3491
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3449: LD_VAR 0 7
3453: PPUSH
3454: LD_VAR 0 8
3458: PUSH
3459: LD_INT 10
3461: DIV
3462: PPUSH
3463: LD_VAR 0 4
3467: PPUSH
3468: LD_VAR 0 5
3472: PPUSH
3473: LD_INT 4
3475: PPUSH
3476: LD_INT 0
3478: PPUSH
3479: CALL_OW 60
// r := 0 ;
3483: LD_ADDR_VAR 0 8
3487: PUSH
3488: LD_INT 0
3490: ST_TO_ADDR
// end ;
3491: GO 3385
// end ;
3493: GO 3366
3495: POP
3496: POP
// end ; for r in starting_crates do
3497: LD_ADDR_VAR 0 8
3501: PUSH
3502: LD_EXP 6
3506: PUSH
3507: FOR_IN
3508: IFFALSE 3540
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3510: LD_INT 1
3512: PPUSH
3513: LD_INT 5
3515: PPUSH
3516: LD_VAR 0 4
3520: PPUSH
3521: LD_VAR 0 5
3525: PPUSH
3526: LD_VAR 0 8
3530: PPUSH
3531: LD_INT 0
3533: PPUSH
3534: CALL_OW 60
3538: GO 3507
3540: POP
3541: POP
// if def_morale_flags then
3542: LD_EXP 47
3546: IFFALSE 3685
// begin x := start_def [ pos ] [ 1 ] ;
3548: LD_ADDR_VAR 0 4
3552: PUSH
3553: LD_EXP 24
3557: PUSH
3558: LD_VAR 0 3
3562: ARRAY
3563: PUSH
3564: LD_INT 1
3566: ARRAY
3567: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3568: LD_ADDR_VAR 0 5
3572: PUSH
3573: LD_EXP 24
3577: PUSH
3578: LD_VAR 0 3
3582: ARRAY
3583: PUSH
3584: LD_INT 2
3586: ARRAY
3587: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3588: LD_VAR 0 4
3592: PPUSH
3593: LD_VAR 0 5
3597: PPUSH
3598: LD_INT 12
3600: PPUSH
3601: LD_INT 2
3603: PPUSH
3604: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3608: LD_ADDR_EXP 25
3612: PUSH
3613: LD_EXP 25
3617: PUSH
3618: LD_VAR 0 1
3622: PPUSH
3623: LD_VAR 0 4
3627: PPUSH
3628: LD_VAR 0 5
3632: PPUSH
3633: LD_INT 1
3635: PUSH
3636: LD_INT 100
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: PUSH
3643: LD_INT 2
3645: PUSH
3646: LD_INT 50
3648: PUSH
3649: EMPTY
3650: LIST
3651: LIST
3652: PUSH
3653: LD_INT 3
3655: PUSH
3656: LD_INT 20
3658: PUSH
3659: EMPTY
3660: LIST
3661: LIST
3662: PUSH
3663: LD_INT 20
3665: PUSH
3666: LD_INT 100
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: LIST
3677: LIST
3678: PPUSH
3679: CALL_OW 418
3683: ADD
3684: ST_TO_ADDR
// end ; commander := true ;
3685: LD_ADDR_LOC 1
3689: PUSH
3690: LD_INT 1
3692: ST_TO_ADDR
// soldiers_created := 0 ;
3693: LD_ADDR_LOC 4
3697: PUSH
3698: LD_INT 0
3700: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3701: LD_ADDR_VAR 0 7
3705: PUSH
3706: DOUBLE
3707: LD_INT 1
3709: DEC
3710: ST_TO_ADDR
3711: LD_EXP 3
3715: PUSH
3716: FOR_TO
3717: IFFALSE 3870
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3719: LD_ADDR_VAR 0 4
3723: PUSH
3724: LD_EXP 23
3728: PUSH
3729: LD_VAR 0 3
3733: ARRAY
3734: PUSH
3735: LD_VAR 0 7
3739: ARRAY
3740: PUSH
3741: LD_INT 1
3743: ARRAY
3744: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3745: LD_ADDR_VAR 0 5
3749: PUSH
3750: LD_EXP 23
3754: PUSH
3755: LD_VAR 0 3
3759: ARRAY
3760: PUSH
3761: LD_VAR 0 7
3765: ARRAY
3766: PUSH
3767: LD_INT 2
3769: ARRAY
3770: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3771: LD_ADDR_VAR 0 6
3775: PUSH
3776: LD_EXP 23
3780: PUSH
3781: LD_VAR 0 3
3785: ARRAY
3786: PUSH
3787: LD_VAR 0 7
3791: ARRAY
3792: PUSH
3793: LD_INT 3
3795: ARRAY
3796: ST_TO_ADDR
// bc_type := b_breastwork ;
3797: LD_ADDR_OWVAR 42
3801: PUSH
3802: LD_INT 31
3804: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3805: LD_ADDR_VAR 0 9
3809: PUSH
3810: LD_VAR 0 4
3814: PPUSH
3815: LD_VAR 0 5
3819: PPUSH
3820: LD_VAR 0 6
3824: PPUSH
3825: CALL_OW 47
3829: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3830: LD_INT 1
3832: PPUSH
3833: LD_INT 1
3835: PPUSH
3836: LD_INT 0
3838: PPUSH
3839: LD_INT 0
3841: PPUSH
3842: LD_INT 0
3844: PPUSH
3845: LD_VAR 0 9
3849: PPUSH
3850: CALL 2496 0 6
// soldiers_created := soldiers_created + 1 ;
3854: LD_ADDR_LOC 4
3858: PUSH
3859: LD_LOC 4
3863: PUSH
3864: LD_INT 1
3866: PLUS
3867: ST_TO_ADDR
// end ;
3868: GO 3716
3870: POP
3871: POP
// x := start_def [ pos ] [ 1 ] ;
3872: LD_ADDR_VAR 0 4
3876: PUSH
3877: LD_EXP 24
3881: PUSH
3882: LD_VAR 0 3
3886: ARRAY
3887: PUSH
3888: LD_INT 1
3890: ARRAY
3891: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3892: LD_ADDR_VAR 0 5
3896: PUSH
3897: LD_EXP 24
3901: PUSH
3902: LD_VAR 0 3
3906: ARRAY
3907: PUSH
3908: LD_INT 2
3910: ARRAY
3911: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3912: LD_LOC 8
3916: PUSH
3917: LD_EXP 3
3921: MINUS
3922: PPUSH
3923: LD_INT 1
3925: PPUSH
3926: LD_VAR 0 4
3930: PPUSH
3931: LD_VAR 0 5
3935: PPUSH
3936: LD_INT 5
3938: PPUSH
3939: LD_INT 0
3941: PPUSH
3942: CALL 2496 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3946: LD_LOC 5
3950: PPUSH
3951: LD_INT 2
3953: PPUSH
3954: LD_VAR 0 4
3958: PPUSH
3959: LD_VAR 0 5
3963: PPUSH
3964: LD_INT 5
3966: PPUSH
3967: LD_INT 0
3969: PPUSH
3970: CALL 2496 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3974: LD_LOC 7
3978: PPUSH
3979: LD_INT 3
3981: PPUSH
3982: LD_VAR 0 4
3986: PPUSH
3987: LD_VAR 0 5
3991: PPUSH
3992: LD_INT 5
3994: PPUSH
3995: LD_INT 0
3997: PPUSH
3998: CALL 2496 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4002: LD_LOC 6
4006: PPUSH
4007: LD_INT 4
4009: PPUSH
4010: LD_VAR 0 4
4014: PPUSH
4015: LD_VAR 0 5
4019: PPUSH
4020: LD_INT 5
4022: PPUSH
4023: LD_INT 0
4025: PPUSH
4026: CALL 2496 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4030: LD_EXP 48
4034: PUSH
4035: LD_INT 20
4037: PPUSH
4038: LD_VAR 0 1
4042: PPUSH
4043: CALL_OW 321
4047: PUSH
4048: LD_INT 1
4050: EQUAL
4051: AND
4052: IFFALSE 4069
// SetTech ( tech_SibDet , side , state_researched ) ;
4054: LD_INT 20
4056: PPUSH
4057: LD_VAR 0 1
4061: PPUSH
4062: LD_INT 2
4064: PPUSH
4065: CALL_OW 322
// if def_siberite_bomb = 1 then
4069: LD_EXP 51
4073: PUSH
4074: LD_INT 1
4076: EQUAL
4077: IFFALSE 4111
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4079: LD_INT 25
4081: PPUSH
4082: LD_VAR 0 1
4086: PPUSH
4087: LD_INT 1
4089: PPUSH
4090: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4094: LD_INT 73
4096: PPUSH
4097: LD_VAR 0 1
4101: PPUSH
4102: LD_INT 1
4104: PPUSH
4105: CALL_OW 322
// end else
4109: GO 4141
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4111: LD_INT 25
4113: PPUSH
4114: LD_VAR 0 1
4118: PPUSH
4119: LD_INT 0
4121: PPUSH
4122: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4126: LD_INT 73
4128: PPUSH
4129: LD_VAR 0 1
4133: PPUSH
4134: LD_INT 0
4136: PPUSH
4137: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4141: LD_INT 24
4143: PPUSH
4144: LD_VAR 0 1
4148: PPUSH
4149: LD_INT 0
4151: PPUSH
4152: CALL_OW 322
// global_defined := true ;
4156: LD_ADDR_LOC 3
4160: PUSH
4161: LD_INT 1
4163: ST_TO_ADDR
// end ;
4164: LD_VAR 0 2
4168: RET
// every 0 0$1 do
4169: GO 4171
4171: DISABLE
// if ( def_siberite_bomb > 1 ) then
4172: LD_EXP 51
4176: PUSH
4177: LD_INT 1
4179: GREATER
4180: IFFALSE 4195
// begin wait ( siberite_bomb_Delay ) ;
4182: LD_EXP 12
4186: PPUSH
4187: CALL_OW 67
// EnableSibFiss ;
4191: CALL 4196 0 0
// end ;
4195: END
// function EnableSibFiss ; var i ; begin
4196: LD_INT 0
4198: PPUSH
4199: PPUSH
// for i := 1 to 8 do
4200: LD_ADDR_VAR 0 2
4204: PUSH
4205: DOUBLE
4206: LD_INT 1
4208: DEC
4209: ST_TO_ADDR
4210: LD_INT 8
4212: PUSH
4213: FOR_TO
4214: IFFALSE 4260
// if Side_Positions [ i ] then
4216: LD_EXP 19
4220: PUSH
4221: LD_VAR 0 2
4225: ARRAY
4226: IFFALSE 4258
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4228: LD_INT 25
4230: PPUSH
4231: LD_VAR 0 2
4235: PPUSH
4236: LD_INT 1
4238: PPUSH
4239: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4243: LD_INT 73
4245: PPUSH
4246: LD_VAR 0 2
4250: PPUSH
4251: LD_INT 1
4253: PPUSH
4254: CALL_OW 322
// end ;
4258: GO 4213
4260: POP
4261: POP
// end ;
4262: LD_VAR 0 1
4266: RET
// function prepare_sides ; var i ; begin
4267: LD_INT 0
4269: PPUSH
4270: PPUSH
// global_units := [ ] ;
4271: LD_ADDR_LOC 2
4275: PUSH
4276: EMPTY
4277: ST_TO_ADDR
// global_defined := false ;
4278: LD_ADDR_LOC 3
4282: PUSH
4283: LD_INT 0
4285: ST_TO_ADDR
// CountClassMembers ;
4286: CALL 4336 0 0
// for i := 1 to 8 do
4290: LD_ADDR_VAR 0 2
4294: PUSH
4295: DOUBLE
4296: LD_INT 1
4298: DEC
4299: ST_TO_ADDR
4300: LD_INT 8
4302: PUSH
4303: FOR_TO
4304: IFFALSE 4329
// if Side_Positions [ i ] then
4306: LD_EXP 19
4310: PUSH
4311: LD_VAR 0 2
4315: ARRAY
4316: IFFALSE 4327
// prepare_side ( i ) ;
4318: LD_VAR 0 2
4322: PPUSH
4323: CALL 3084 0 1
4327: GO 4303
4329: POP
4330: POP
// end ;
4331: LD_VAR 0 1
4335: RET
// function CountClassMembers ; var Mode ; begin
4336: LD_INT 0
4338: PPUSH
4339: PPUSH
// if No_Mechs then
4340: LD_EXP 53
4344: IFFALSE 4356
// Mode := 2 else
4346: LD_ADDR_VAR 0 2
4350: PUSH
4351: LD_INT 2
4353: ST_TO_ADDR
4354: GO 4364
// Mode := 1 ;
4356: LD_ADDR_VAR 0 2
4360: PUSH
4361: LD_INT 1
4363: ST_TO_ADDR
// neng := number_of_people ;
4364: LD_ADDR_LOC 5
4368: PUSH
4369: LD_EXP 4
4373: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4374: LD_ADDR_LOC 8
4378: PUSH
4379: LD_LOC 5
4383: PUSH
4384: LD_INT 4
4386: PUSH
4387: LD_INT 3
4389: PUSH
4390: EMPTY
4391: LIST
4392: LIST
4393: PUSH
4394: LD_VAR 0 2
4398: ARRAY
4399: DIV
4400: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4401: LD_LOC 8
4405: PUSH
4406: LD_EXP 3
4410: LESS
4411: IFFALSE 4423
// nsol := number_of_breastworks ;
4413: LD_ADDR_LOC 8
4417: PUSH
4418: LD_EXP 3
4422: ST_TO_ADDR
// neng := neng - nsol ;
4423: LD_ADDR_LOC 5
4427: PUSH
4428: LD_LOC 5
4432: PUSH
4433: LD_LOC 8
4437: MINUS
4438: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4439: LD_ADDR_LOC 6
4443: PUSH
4444: LD_LOC 5
4448: PUSH
4449: LD_INT 3
4451: PUSH
4452: LD_INT 2
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: PUSH
4459: LD_VAR 0 2
4463: ARRAY
4464: DIV
4465: ST_TO_ADDR
// if ( nsci < 1 ) then
4466: LD_LOC 6
4470: PUSH
4471: LD_INT 1
4473: LESS
4474: IFFALSE 4484
// nsci := 1 ;
4476: LD_ADDR_LOC 6
4480: PUSH
4481: LD_INT 1
4483: ST_TO_ADDR
// neng := neng - nsci ;
4484: LD_ADDR_LOC 5
4488: PUSH
4489: LD_LOC 5
4493: PUSH
4494: LD_LOC 6
4498: MINUS
4499: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4500: LD_ADDR_LOC 7
4504: PUSH
4505: LD_LOC 5
4509: PUSH
4510: LD_INT 2
4512: DIV
4513: PUSH
4514: LD_INT 0
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: PUSH
4521: LD_VAR 0 2
4525: ARRAY
4526: ST_TO_ADDR
// neng := neng - nmech ;
4527: LD_ADDR_LOC 5
4531: PUSH
4532: LD_LOC 5
4536: PUSH
4537: LD_LOC 7
4541: MINUS
4542: ST_TO_ADDR
// if ( neng < 1 ) then
4543: LD_LOC 5
4547: PUSH
4548: LD_INT 1
4550: LESS
4551: IFFALSE 4561
// neng := 1 ;
4553: LD_ADDR_LOC 5
4557: PUSH
4558: LD_INT 1
4560: ST_TO_ADDR
// end ;
4561: LD_VAR 0 1
4565: RET
// starting begin disable ( 98 ) ;
4566: LD_INT 98
4568: DISABLE_MARKED
// disable ( 99 ) ;
4569: LD_INT 99
4571: DISABLE_MARKED
// disable ( 400 ) ;
4572: LD_INT 400
4574: DISABLE_MARKED
// disable ( 401 ) ;
4575: LD_INT 401
4577: DISABLE_MARKED
// disable ( 600 ) ;
4578: LD_INT 600
4580: DISABLE_MARKED
// mp_selectmsg := true ;
4581: LD_ADDR_OWVAR 13
4585: PUSH
4586: LD_INT 1
4588: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4589: CALL 68 0 0
// prepare_map_coordinates ;
4593: CALL 1401 0 0
// set_shared_visions_and_alliances ;
4597: CALL 2208 0 0
// ResetFog ;
4601: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4605: LD_OWVAR 2
4609: PPUSH
4610: CALL_OW 520
// prepare_sides ;
4614: CALL 4267 0 0
// init_respawning ;
4618: CALL 17036 0 0
// Init_Win_Condition ;
4622: CALL 15186 0 0
// InitLimits ;
4626: CALL 9632 0 0
// ShowTimer ;
4630: CALL 10569 0 0
// music_nat := Side_Nations [ your_side ] ;
4634: LD_ADDR_OWVAR 71
4638: PUSH
4639: LD_EXP 20
4643: PUSH
4644: LD_OWVAR 2
4648: ARRAY
4649: ST_TO_ADDR
// if IAmSpec then
4650: CALL_OW 531
4654: IFFALSE 4678
// begin fogoff ( true ) ;
4656: LD_INT 1
4658: PPUSH
4659: CALL_OW 344
// CenterNowOnXY ( 79 , 59 ) ;
4663: LD_INT 79
4665: PPUSH
4666: LD_INT 59
4668: PPUSH
4669: CALL_OW 86
// enable ( 400 ) ;
4673: LD_INT 400
4675: ENABLE_MARKED
// end else
4676: GO 4724
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4678: LD_EXP 24
4682: PUSH
4683: LD_EXP 19
4687: PUSH
4688: LD_OWVAR 2
4692: ARRAY
4693: ARRAY
4694: PUSH
4695: LD_INT 1
4697: ARRAY
4698: PPUSH
4699: LD_EXP 24
4703: PUSH
4704: LD_EXP 19
4708: PUSH
4709: LD_OWVAR 2
4713: ARRAY
4714: ARRAY
4715: PUSH
4716: LD_INT 2
4718: ARRAY
4719: PPUSH
4720: CALL_OW 86
// end ; AnimateTrees ( true ) ;
4724: LD_INT 1
4726: PPUSH
4727: CALL_OW 573
// InitApeman ;
4731: CALL 4954 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] ;
4735: LD_ADDR_EXP 56
4739: PUSH
4740: LD_INT 8
4742: PUSH
4743: LD_INT 11
4745: PUSH
4746: LD_INT 9
4748: PUSH
4749: LD_INT 10
4751: PUSH
4752: EMPTY
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: ST_TO_ADDR
// BeginBuildUp ;
4758: CALL 17530 0 0
// end ; end_of_file
4762: END
// every 20 20$00 trigger apemanNumber do
4763: LD_EXP 30
4767: IFFALSE 4800
4769: GO 4771
4771: DISABLE
// begin enable ;
4772: ENABLE
// if apeLevel >= 8 then
4773: LD_EXP 35
4777: PUSH
4778: LD_INT 8
4780: GREATEREQUAL
4781: IFFALSE 4786
// disable else
4783: DISABLE
4784: GO 4800
// apeLevel := apeLevel + 1 ;
4786: LD_ADDR_EXP 35
4790: PUSH
4791: LD_EXP 35
4795: PUSH
4796: LD_INT 1
4798: PLUS
4799: ST_TO_ADDR
// end ;
4800: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
4801: LD_EXP 30
4805: PUSH
4806: LD_EXP 31
4810: LESS
4811: IFFALSE 4951
4813: GO 4815
4815: DISABLE
4816: LD_INT 0
4818: PPUSH
4819: PPUSH
4820: PPUSH
4821: PPUSH
// begin enable ;
4822: ENABLE
// for i := 1 to apemanPos do
4823: LD_ADDR_VAR 0 1
4827: PUSH
4828: DOUBLE
4829: LD_INT 1
4831: DEC
4832: ST_TO_ADDR
4833: LD_EXP 33
4837: PUSH
4838: FOR_TO
4839: IFFALSE 4949
// begin if apemanPlayerCount [ i ] then
4841: LD_EXP 34
4845: PUSH
4846: LD_VAR 0 1
4850: ARRAY
4851: IFFALSE 4947
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
4853: LD_EXP 34
4857: PUSH
4858: LD_VAR 0 1
4862: ARRAY
4863: PUSH
4864: LD_EXP 33
4868: PUSH
4869: LD_VAR 0 1
4873: ARRAY
4874: GREATER
4875: IFFALSE 4947
// begin ape := PrepareApeman ;
4877: LD_ADDR_VAR 0 2
4881: PUSH
4882: CALL 5454 0 0
4886: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
4887: LD_VAR 0 2
4891: PPUSH
4892: LD_EXP 36
4896: PUSH
4897: LD_VAR 0 1
4901: ARRAY
4902: PPUSH
4903: LD_INT 0
4905: PPUSH
4906: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
4910: LD_ADDR_EXP 33
4914: PUSH
4915: LD_EXP 33
4919: PPUSH
4920: LD_VAR 0 1
4924: PPUSH
4925: LD_EXP 33
4929: PUSH
4930: LD_VAR 0 1
4934: ARRAY
4935: PUSH
4936: LD_VAR 0 2
4940: UNION
4941: PPUSH
4942: CALL_OW 1
4946: ST_TO_ADDR
// end ; end ; end ;
4947: GO 4838
4949: POP
4950: POP
// end ;
4951: PPOPN 4
4953: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
4954: LD_INT 0
4956: PPUSH
4957: PPUSH
4958: PPUSH
4959: PPUSH
4960: PPUSH
4961: PPUSH
4962: PPUSH
// playersAmount := 0 ;
4963: LD_ADDR_VAR 0 3
4967: PUSH
4968: LD_INT 0
4970: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , ] ;
4971: LD_ADDR_VAR 0 7
4975: PUSH
4976: LD_INT 13
4978: PUSH
4979: LD_INT 14
4981: PUSH
4982: LD_INT 15
4984: PUSH
4985: LD_INT 16
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: LIST
4992: LIST
4993: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4994: LD_ADDR_EXP 36
4998: PUSH
4999: LD_INT 0
5001: PUSH
5002: LD_INT 0
5004: PUSH
5005: LD_INT 0
5007: PUSH
5008: LD_INT 0
5010: PUSH
5011: LD_INT 0
5013: PUSH
5014: LD_INT 0
5016: PUSH
5017: LD_INT 0
5019: PUSH
5020: LD_INT 0
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: ST_TO_ADDR
// for j = 1 to Side_Positions do
5033: LD_ADDR_VAR 0 4
5037: PUSH
5038: DOUBLE
5039: LD_INT 1
5041: DEC
5042: ST_TO_ADDR
5043: LD_EXP 19
5047: PUSH
5048: FOR_TO
5049: IFFALSE 5116
// if Side_Positions [ j ] then
5051: LD_EXP 19
5055: PUSH
5056: LD_VAR 0 4
5060: ARRAY
5061: IFFALSE 5114
// begin playersAmount := playersAmount + 1 ;
5063: LD_ADDR_VAR 0 3
5067: PUSH
5068: LD_VAR 0 3
5072: PUSH
5073: LD_INT 1
5075: PLUS
5076: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5077: LD_ADDR_EXP 36
5081: PUSH
5082: LD_EXP 36
5086: PPUSH
5087: LD_VAR 0 4
5091: PPUSH
5092: LD_VAR 0 7
5096: PUSH
5097: LD_EXP 19
5101: PUSH
5102: LD_VAR 0 4
5106: ARRAY
5107: ARRAY
5108: PPUSH
5109: CALL_OW 1
5113: ST_TO_ADDR
// end ;
5114: GO 5048
5116: POP
5117: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5118: LD_ADDR_EXP 32
5122: PUSH
5123: LD_INT 3
5125: PUSH
5126: LD_EXP 13
5130: MUL
5131: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5132: LD_ADDR_EXP 30
5136: PUSH
5137: LD_VAR 0 3
5141: PUSH
5142: LD_EXP 32
5146: MUL
5147: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5148: LD_ADDR_EXP 31
5152: PUSH
5153: LD_EXP 30
5157: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5158: LD_ADDR_EXP 33
5162: PUSH
5163: LD_INT 0
5165: PUSH
5166: LD_INT 0
5168: PUSH
5169: LD_INT 0
5171: PUSH
5172: LD_INT 0
5174: PUSH
5175: LD_INT 0
5177: PUSH
5178: LD_INT 0
5180: PUSH
5181: LD_INT 0
5183: PUSH
5184: LD_INT 0
5186: PUSH
5187: EMPTY
5188: LIST
5189: LIST
5190: LIST
5191: LIST
5192: LIST
5193: LIST
5194: LIST
5195: LIST
5196: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5197: LD_ADDR_EXP 34
5201: PUSH
5202: LD_INT 0
5204: PUSH
5205: LD_INT 0
5207: PUSH
5208: LD_INT 0
5210: PUSH
5211: LD_INT 0
5213: PUSH
5214: LD_INT 0
5216: PUSH
5217: LD_INT 0
5219: PUSH
5220: LD_INT 0
5222: PUSH
5223: LD_INT 0
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: ST_TO_ADDR
// apeLevel := 1 ;
5236: LD_ADDR_EXP 35
5240: PUSH
5241: LD_INT 1
5243: ST_TO_ADDR
// if not apemanNumber then
5244: LD_EXP 30
5248: NOT
5249: IFFALSE 5253
// exit ;
5251: GO 5449
// for i := 1 to apemanPerPlayer do
5253: LD_ADDR_VAR 0 2
5257: PUSH
5258: DOUBLE
5259: LD_INT 1
5261: DEC
5262: ST_TO_ADDR
5263: LD_EXP 32
5267: PUSH
5268: FOR_TO
5269: IFFALSE 5447
// begin for j := 1 to Side_Positions do
5271: LD_ADDR_VAR 0 4
5275: PUSH
5276: DOUBLE
5277: LD_INT 1
5279: DEC
5280: ST_TO_ADDR
5281: LD_EXP 19
5285: PUSH
5286: FOR_TO
5287: IFFALSE 5443
// if Side_Positions [ j ] then
5289: LD_EXP 19
5293: PUSH
5294: LD_VAR 0 4
5298: ARRAY
5299: IFFALSE 5441
// begin pos := Side_Positions [ j ] ;
5301: LD_ADDR_VAR 0 6
5305: PUSH
5306: LD_EXP 19
5310: PUSH
5311: LD_VAR 0 4
5315: ARRAY
5316: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5317: LD_ADDR_EXP 34
5321: PUSH
5322: LD_EXP 34
5326: PPUSH
5327: LD_VAR 0 4
5331: PPUSH
5332: LD_EXP 34
5336: PUSH
5337: LD_VAR 0 4
5341: ARRAY
5342: PUSH
5343: LD_INT 1
5345: PLUS
5346: PPUSH
5347: CALL_OW 1
5351: ST_TO_ADDR
// ape := PrepareApeman ;
5352: LD_ADDR_VAR 0 5
5356: PUSH
5357: CALL 5454 0 0
5361: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5362: LD_ADDR_EXP 33
5366: PUSH
5367: LD_EXP 33
5371: PPUSH
5372: LD_VAR 0 4
5376: PPUSH
5377: LD_EXP 33
5381: PUSH
5382: LD_VAR 0 4
5386: ARRAY
5387: PPUSH
5388: LD_EXP 33
5392: PUSH
5393: LD_VAR 0 4
5397: ARRAY
5398: PUSH
5399: LD_INT 1
5401: PLUS
5402: PPUSH
5403: LD_VAR 0 5
5407: PPUSH
5408: CALL_OW 1
5412: PPUSH
5413: CALL_OW 1
5417: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5418: LD_VAR 0 5
5422: PPUSH
5423: LD_EXP 36
5427: PUSH
5428: LD_VAR 0 4
5432: ARRAY
5433: PPUSH
5434: LD_INT 0
5436: PPUSH
5437: CALL_OW 49
// end ;
5441: GO 5286
5443: POP
5444: POP
// end ;
5445: GO 5268
5447: POP
5448: POP
// end ;
5449: LD_VAR 0 1
5453: RET
// export function PrepareApeman ; var bonus ; begin
5454: LD_INT 0
5456: PPUSH
5457: PPUSH
// uc_side := 0 ;
5458: LD_ADDR_OWVAR 20
5462: PUSH
5463: LD_INT 0
5465: ST_TO_ADDR
// uc_nation := 0 ;
5466: LD_ADDR_OWVAR 21
5470: PUSH
5471: LD_INT 0
5473: ST_TO_ADDR
// InitHc ;
5474: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
5478: LD_ADDR_VAR 0 2
5482: PUSH
5483: LD_INT 1
5485: NEG
5486: PUSH
5487: LD_INT 0
5489: PUSH
5490: LD_INT 1
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: LIST
5497: PUSH
5498: LD_OWVAR 1
5502: PUSH
5503: LD_INT 3
5505: MOD
5506: PUSH
5507: LD_INT 1
5509: PLUS
5510: ARRAY
5511: ST_TO_ADDR
// hc_class := class_apeman ;
5512: LD_ADDR_OWVAR 28
5516: PUSH
5517: LD_INT 12
5519: ST_TO_ADDR
// hc_gallery :=  ;
5520: LD_ADDR_OWVAR 33
5524: PUSH
5525: LD_STRING 
5527: ST_TO_ADDR
// hc_name :=  ;
5528: LD_ADDR_OWVAR 26
5532: PUSH
5533: LD_STRING 
5535: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
5536: LD_ADDR_OWVAR 31
5540: PUSH
5541: LD_EXP 35
5545: PUSH
5546: LD_VAR 0 2
5550: PLUS
5551: PUSH
5552: LD_EXP 35
5556: PUSH
5557: LD_VAR 0 2
5561: PLUS
5562: PUSH
5563: LD_EXP 35
5567: PUSH
5568: LD_VAR 0 2
5572: PLUS
5573: PUSH
5574: LD_EXP 35
5578: PUSH
5579: LD_VAR 0 2
5583: PLUS
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
5591: LD_ADDR_OWVAR 35
5595: PUSH
5596: LD_INT 10
5598: PUSH
5599: LD_VAR 0 2
5603: MUL
5604: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5605: LD_ADDR_OWVAR 29
5609: PUSH
5610: LD_INT 12
5612: PUSH
5613: LD_INT 10
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: ST_TO_ADDR
// result := CreateHuman ;
5620: LD_ADDR_VAR 0 1
5624: PUSH
5625: CALL_OW 44
5629: ST_TO_ADDR
// end ;
5630: LD_VAR 0 1
5634: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
5635: LD_INT 0
5637: PPUSH
5638: PPUSH
5639: PPUSH
// if not ape then
5640: LD_VAR 0 1
5644: NOT
5645: IFFALSE 5649
// exit ;
5647: GO 5774
// side := GetSide ( ape ) ;
5649: LD_ADDR_VAR 0 3
5653: PUSH
5654: LD_VAR 0 1
5658: PPUSH
5659: CALL_OW 255
5663: ST_TO_ADDR
// if not side then
5664: LD_VAR 0 3
5668: NOT
5669: IFFALSE 5723
// begin for i = 1 to apemanPos do
5671: LD_ADDR_VAR 0 4
5675: PUSH
5676: DOUBLE
5677: LD_INT 1
5679: DEC
5680: ST_TO_ADDR
5681: LD_EXP 33
5685: PUSH
5686: FOR_TO
5687: IFFALSE 5721
// if ape in apemanPos [ i ] then
5689: LD_VAR 0 1
5693: PUSH
5694: LD_EXP 33
5698: PUSH
5699: LD_VAR 0 4
5703: ARRAY
5704: IN
5705: IFFALSE 5719
// begin side := i ;
5707: LD_ADDR_VAR 0 3
5711: PUSH
5712: LD_VAR 0 4
5716: ST_TO_ADDR
// break ;
5717: GO 5721
// end ;
5719: GO 5686
5721: POP
5722: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
5723: LD_ADDR_EXP 33
5727: PUSH
5728: LD_EXP 33
5732: PPUSH
5733: LD_VAR 0 3
5737: PPUSH
5738: LD_EXP 33
5742: PUSH
5743: LD_VAR 0 3
5747: ARRAY
5748: PUSH
5749: LD_VAR 0 1
5753: DIFF
5754: PPUSH
5755: CALL_OW 1
5759: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
5760: LD_ADDR_EXP 30
5764: PUSH
5765: LD_EXP 30
5769: PUSH
5770: LD_INT 1
5772: MINUS
5773: ST_TO_ADDR
// end ; end_of_file
5774: LD_VAR 0 2
5778: RET
// every 1 1$0 + 0 0$0.3 do
5779: GO 5781
5781: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5782: LD_INT 4
5784: PPUSH
5785: LD_INT 5
5787: PPUSH
5788: CALL_OW 12
5792: PPUSH
5793: LD_INT 1
5795: PPUSH
5796: CALL_OW 57
// enable ;
5800: ENABLE
// end ;
5801: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5802: GO 5804
5804: DISABLE
5805: LD_INT 0
5807: PPUSH
5808: PPUSH
// begin case tick of 1 .. 1 1$0 :
5809: LD_OWVAR 1
5813: PUSH
5814: LD_INT 1
5816: DOUBLE
5817: GREATEREQUAL
5818: IFFALSE 5826
5820: LD_INT 2100
5822: DOUBLE
5823: LESSEQUAL
5824: IFTRUE 5828
5826: GO 5856
5828: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5829: LD_EXP 8
5833: PUSH
5834: LD_INT 100
5836: DIVREAL
5837: PUSH
5838: LD_INT 350
5840: PPUSH
5841: LD_INT 1050
5843: PPUSH
5844: CALL_OW 12
5848: MUL
5849: PPUSH
5850: CALL_OW 67
5854: GO 6158
5856: LD_INT 2100
5858: PUSH
5859: LD_INT 1
5861: PLUS
5862: DOUBLE
5863: GREATEREQUAL
5864: IFFALSE 5872
5866: LD_INT 10500
5868: DOUBLE
5869: LESSEQUAL
5870: IFTRUE 5874
5872: GO 5902
5874: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5875: LD_EXP 8
5879: PUSH
5880: LD_INT 100
5882: DIVREAL
5883: PUSH
5884: LD_INT 1050
5886: PPUSH
5887: LD_INT 1575
5889: PPUSH
5890: CALL_OW 12
5894: MUL
5895: PPUSH
5896: CALL_OW 67
5900: GO 6158
5902: LD_INT 10500
5904: PUSH
5905: LD_INT 1
5907: PLUS
5908: DOUBLE
5909: GREATEREQUAL
5910: IFFALSE 5918
5912: LD_INT 21000
5914: DOUBLE
5915: LESSEQUAL
5916: IFTRUE 5920
5918: GO 5948
5920: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5921: LD_EXP 8
5925: PUSH
5926: LD_INT 100
5928: DIVREAL
5929: PUSH
5930: LD_INT 1575
5932: PPUSH
5933: LD_INT 2100
5935: PPUSH
5936: CALL_OW 12
5940: MUL
5941: PPUSH
5942: CALL_OW 67
5946: GO 6158
5948: LD_INT 21000
5950: PUSH
5951: LD_INT 1
5953: PLUS
5954: DOUBLE
5955: GREATEREQUAL
5956: IFFALSE 5964
5958: LD_INT 42000
5960: DOUBLE
5961: LESSEQUAL
5962: IFTRUE 5966
5964: GO 5994
5966: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5967: LD_EXP 8
5971: PUSH
5972: LD_INT 100
5974: DIVREAL
5975: PUSH
5976: LD_INT 2100
5978: PPUSH
5979: LD_INT 2625
5981: PPUSH
5982: CALL_OW 12
5986: MUL
5987: PPUSH
5988: CALL_OW 67
5992: GO 6158
5994: LD_INT 42000
5996: PUSH
5997: LD_INT 1
5999: PLUS
6000: DOUBLE
6001: GREATEREQUAL
6002: IFFALSE 6010
6004: LD_INT 63000
6006: DOUBLE
6007: LESSEQUAL
6008: IFTRUE 6012
6010: GO 6040
6012: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
6013: LD_EXP 8
6017: PUSH
6018: LD_INT 100
6020: DIVREAL
6021: PUSH
6022: LD_INT 2625
6024: PPUSH
6025: LD_INT 3150
6027: PPUSH
6028: CALL_OW 12
6032: MUL
6033: PPUSH
6034: CALL_OW 67
6038: GO 6158
6040: LD_INT 63000
6042: PUSH
6043: LD_INT 1
6045: PLUS
6046: DOUBLE
6047: GREATEREQUAL
6048: IFFALSE 6056
6050: LD_INT 105000
6052: DOUBLE
6053: LESSEQUAL
6054: IFTRUE 6058
6056: GO 6086
6058: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
6059: LD_EXP 8
6063: PUSH
6064: LD_INT 100
6066: DIVREAL
6067: PUSH
6068: LD_INT 3150
6070: PPUSH
6071: LD_INT 3675
6073: PPUSH
6074: CALL_OW 12
6078: MUL
6079: PPUSH
6080: CALL_OW 67
6084: GO 6158
6086: LD_INT 105000
6088: PUSH
6089: LD_INT 1
6091: PLUS
6092: DOUBLE
6093: GREATEREQUAL
6094: IFFALSE 6102
6096: LD_INT 630000
6098: DOUBLE
6099: LESSEQUAL
6100: IFTRUE 6104
6102: GO 6132
6104: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
6105: LD_EXP 8
6109: PUSH
6110: LD_INT 100
6112: DIVREAL
6113: PUSH
6114: LD_INT 3675
6116: PPUSH
6117: LD_INT 4200
6119: PPUSH
6120: CALL_OW 12
6124: MUL
6125: PPUSH
6126: CALL_OW 67
6130: GO 6158
6132: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
6133: LD_EXP 8
6137: PUSH
6138: LD_INT 100
6140: DIVREAL
6141: PUSH
6142: LD_INT 4200
6144: PPUSH
6145: LD_INT 5250
6147: PPUSH
6148: CALL_OW 12
6152: MUL
6153: PPUSH
6154: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
6158: LD_ADDR_VAR 0 2
6162: PUSH
6163: LD_INT 3
6165: PPUSH
6166: LD_INT 5
6168: PPUSH
6169: CALL_OW 12
6173: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
6174: LD_ADDR_VAR 0 1
6178: PUSH
6179: LD_EXP 19
6183: PUSH
6184: LD_INT 0
6186: PUSH
6187: EMPTY
6188: LIST
6189: DIFF
6190: PUSH
6191: FOR_IN
6192: IFFALSE 6232
// CreateCratesArea ( amount , [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] [ i ] , true ) ;
6194: LD_VAR 0 2
6198: PPUSH
6199: LD_INT 8
6201: PUSH
6202: LD_INT 11
6204: PUSH
6205: LD_INT 9
6207: PUSH
6208: LD_INT 10
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: LIST
6215: LIST
6216: PUSH
6217: LD_VAR 0 1
6221: ARRAY
6222: PPUSH
6223: LD_INT 1
6225: PPUSH
6226: CALL_OW 55
6230: GO 6191
6232: POP
6233: POP
// enable ;
6234: ENABLE
// end ; end_of_file
6235: PPOPN 2
6237: END
// var activated ; var hadziove ; every 0 0$1 do
6238: GO 6240
6240: DISABLE
// begin wait ( Rand ( 3 3$0 , 10 10$0 ) ) ;
6241: LD_INT 6300
6243: PPUSH
6244: LD_INT 21000
6246: PPUSH
6247: CALL_OW 12
6251: PPUSH
6252: CALL_OW 67
// SetAreaMapShow ( Tree , 1 ) ;
6256: LD_INT 3
6258: PPUSH
6259: LD_INT 1
6261: PPUSH
6262: CALL_OW 424
// activated := true ;
6266: LD_ADDR_LOC 9
6270: PUSH
6271: LD_INT 1
6273: ST_TO_ADDR
// end ;
6274: END
// every 0 0$1 trigger activated do var i , un ;
6275: LD_LOC 9
6279: IFFALSE 6524
6281: GO 6283
6283: DISABLE
6284: LD_INT 0
6286: PPUSH
6287: PPUSH
// begin if not def_tree_function then
6288: LD_EXP 1
6292: NOT
6293: IFFALSE 6297
// exit ;
6295: GO 6524
// ExtraStrings := [ #MultiSmall-Tree & def_tree_function ] ;
6297: LD_ADDR_EXP 54
6301: PUSH
6302: LD_STRING #MultiSmall-Tree
6304: PUSH
6305: LD_EXP 1
6309: STR
6310: PUSH
6311: EMPTY
6312: LIST
6313: ST_TO_ADDR
// for un in FilterUnitsInArea ( Tree , [ f_type , unit_human ] ) diff hadziove do
6314: LD_ADDR_VAR 0 2
6318: PUSH
6319: LD_INT 3
6321: PPUSH
6322: LD_INT 21
6324: PUSH
6325: LD_INT 1
6327: PUSH
6328: EMPTY
6329: LIST
6330: LIST
6331: PPUSH
6332: CALL_OW 70
6336: PUSH
6337: LD_LOC 10
6341: DIFF
6342: PUSH
6343: FOR_IN
6344: IFFALSE 6505
// begin if GetClass ( un ) in [ class_soldier , class_engineer , class_mechanic , class_scientistic , class_sniper , class_bazooker , class_mortar ] then
6346: LD_VAR 0 2
6350: PPUSH
6351: CALL_OW 257
6355: PUSH
6356: LD_INT 1
6358: PUSH
6359: LD_INT 2
6361: PUSH
6362: LD_INT 3
6364: PUSH
6365: LD_INT 4
6367: PUSH
6368: LD_INT 5
6370: PUSH
6371: LD_INT 9
6373: PUSH
6374: LD_INT 8
6376: PUSH
6377: EMPTY
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: IN
6386: IFFALSE 6435
// for i := 1 to 4 do
6388: LD_ADDR_VAR 0 1
6392: PUSH
6393: DOUBLE
6394: LD_INT 1
6396: DEC
6397: ST_TO_ADDR
6398: LD_INT 4
6400: PUSH
6401: FOR_TO
6402: IFFALSE 6431
// GiveSkillBonus ( un , i , tree_function [ i ] ) else
6404: LD_VAR 0 2
6408: PPUSH
6409: LD_VAR 0 1
6413: PPUSH
6414: LD_EXP 14
6418: PUSH
6419: LD_VAR 0 1
6423: ARRAY
6424: PPUSH
6425: CALL_OW 238
6429: GO 6401
6431: POP
6432: POP
6433: GO 6503
// if un in [ class_apeman , class_apeman_engineer , class_apeman_kamikaze , class_apeman_soldier ] then
6435: LD_VAR 0 2
6439: PUSH
6440: LD_INT 12
6442: PUSH
6443: LD_INT 16
6445: PUSH
6446: LD_INT 17
6448: PUSH
6449: LD_INT 15
6451: PUSH
6452: EMPTY
6453: LIST
6454: LIST
6455: LIST
6456: LIST
6457: IN
6458: IFFALSE 6503
// for i := 1 to 4 do
6460: LD_ADDR_VAR 0 1
6464: PUSH
6465: DOUBLE
6466: LD_INT 1
6468: DEC
6469: ST_TO_ADDR
6470: LD_INT 4
6472: PUSH
6473: FOR_TO
6474: IFFALSE 6501
// GiveSkillBonus ( un , i , tree_function [ 5 ] ) ;
6476: LD_VAR 0 2
6480: PPUSH
6481: LD_VAR 0 1
6485: PPUSH
6486: LD_EXP 14
6490: PUSH
6491: LD_INT 5
6493: ARRAY
6494: PPUSH
6495: CALL_OW 238
6499: GO 6473
6501: POP
6502: POP
// end ;
6503: GO 6343
6505: POP
6506: POP
// hadziove := hadziove ^ un ;
6507: LD_ADDR_LOC 10
6511: PUSH
6512: LD_LOC 10
6516: PUSH
6517: LD_VAR 0 2
6521: ADD
6522: ST_TO_ADDR
// enable ;
6523: ENABLE
// end ; end_of_file
6524: PPOPN 2
6526: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6527: LD_VAR 0 1
6531: PPUSH
6532: CALL_OW 266
6536: PUSH
6537: LD_INT 0
6539: PUSH
6540: LD_INT 1
6542: PUSH
6543: EMPTY
6544: LIST
6545: LIST
6546: IN
6547: IFFALSE 6572
// SetBName ( b , @ & GetSide ( b ) ) ;
6549: LD_VAR 0 1
6553: PPUSH
6554: LD_STRING @
6556: PUSH
6557: LD_VAR 0 1
6561: PPUSH
6562: CALL_OW 255
6566: STR
6567: PPUSH
6568: CALL_OW 500
// if def_game_rules then
6572: LD_EXP 38
6576: IFFALSE 6613
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
6578: LD_VAR 0 1
6582: PPUSH
6583: LD_VAR 0 1
6587: PPUSH
6588: CALL_OW 266
6592: PPUSH
6593: LD_VAR 0 1
6597: PPUSH
6598: CALL_OW 255
6602: PPUSH
6603: LD_INT 0
6605: PPUSH
6606: LD_INT 1
6608: PPUSH
6609: CALL 10033 0 5
// end ;
6613: PPOPN 2
6615: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6616: LD_VAR 0 1
6620: PPUSH
6621: CALL_OW 266
6625: PUSH
6626: LD_INT 0
6628: PUSH
6629: LD_INT 1
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: IN
6636: IFFALSE 6661
// SetBName ( b , @ & GetSide ( b ) ) ;
6638: LD_VAR 0 1
6642: PPUSH
6643: LD_STRING @
6645: PUSH
6646: LD_VAR 0 1
6650: PPUSH
6651: CALL_OW 255
6655: STR
6656: PPUSH
6657: CALL_OW 500
// if def_game_rules then
6661: LD_EXP 38
6665: IFFALSE 6704
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
6667: LD_VAR 0 1
6671: PPUSH
6672: LD_VAR 0 1
6676: PPUSH
6677: CALL_OW 266
6681: PPUSH
6682: LD_VAR 0 1
6686: PPUSH
6687: CALL_OW 255
6691: PPUSH
6692: LD_VAR 0 2
6696: PPUSH
6697: LD_INT 1
6699: PPUSH
6700: CALL 10033 0 5
// end ;
6704: PPOPN 3
6706: END
// on VehicleConstructed ( veh , fac ) do var side ;
6707: LD_INT 0
6709: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6710: LD_VAR 0 1
6714: PPUSH
6715: CALL_OW 263
6719: PUSH
6720: LD_INT 5
6722: EQUAL
6723: IFFALSE 6865
// begin side := GetSide ( veh ) ;
6725: LD_ADDR_VAR 0 3
6729: PUSH
6730: LD_VAR 0 1
6734: PPUSH
6735: CALL_OW 255
6739: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6740: LD_ADDR_EXP 33
6744: PUSH
6745: LD_EXP 33
6749: PPUSH
6750: LD_VAR 0 3
6754: PPUSH
6755: LD_EXP 33
6759: PUSH
6760: LD_VAR 0 3
6764: ARRAY
6765: PPUSH
6766: LD_INT 52
6768: PUSH
6769: EMPTY
6770: LIST
6771: PPUSH
6772: CALL_OW 72
6776: PUSH
6777: LD_INT 22
6779: PUSH
6780: LD_VAR 0 3
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: PUSH
6789: LD_INT 2
6791: PUSH
6792: LD_INT 33
6794: PUSH
6795: LD_INT 5
6797: PUSH
6798: EMPTY
6799: LIST
6800: LIST
6801: PUSH
6802: LD_INT 25
6804: PUSH
6805: LD_INT 12
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: PUSH
6812: LD_INT 25
6814: PUSH
6815: LD_INT 15
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PUSH
6822: LD_INT 25
6824: PUSH
6825: LD_INT 16
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: PUSH
6832: LD_INT 25
6834: PUSH
6835: LD_INT 17
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: LIST
6846: LIST
6847: LIST
6848: LIST
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: PPUSH
6854: CALL_OW 69
6858: UNION
6859: PPUSH
6860: CALL_OW 1
6864: ST_TO_ADDR
// end ; end ;
6865: PPOPN 3
6867: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6868: LD_INT 0
6870: PPUSH
6871: PPUSH
6872: PPUSH
6873: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6874: LD_VAR 0 1
6878: PPUSH
6879: CALL_OW 257
6883: PUSH
6884: LD_INT 12
6886: PUSH
6887: LD_INT 15
6889: PUSH
6890: LD_INT 17
6892: PUSH
6893: LD_INT 16
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: LIST
6900: LIST
6901: IN
6902: PUSH
6903: LD_VAR 0 1
6907: PPUSH
6908: CALL_OW 263
6912: PUSH
6913: LD_INT 5
6915: EQUAL
6916: OR
6917: IFFALSE 6928
// ApeKilled ( j ) ;
6919: LD_VAR 0 1
6923: PPUSH
6924: CALL 5635 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6928: LD_VAR 0 1
6932: PPUSH
6933: CALL_OW 266
6937: PUSH
6938: LD_INT 0
6940: PUSH
6941: LD_INT 1
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: IN
6948: IFFALSE 7030
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6950: LD_ADDR_VAR 0 4
6954: PUSH
6955: LD_EXP 19
6959: PUSH
6960: LD_VAR 0 1
6964: PPUSH
6965: CALL_OW 255
6969: ARRAY
6970: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6971: LD_ADDR_VAR 0 2
6975: PUSH
6976: LD_EXP 24
6980: PUSH
6981: LD_VAR 0 4
6985: ARRAY
6986: PUSH
6987: LD_INT 1
6989: ARRAY
6990: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6991: LD_ADDR_VAR 0 3
6995: PUSH
6996: LD_EXP 24
7000: PUSH
7001: LD_VAR 0 4
7005: ARRAY
7006: PUSH
7007: LD_INT 2
7009: ARRAY
7010: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7011: LD_VAR 0 2
7015: PPUSH
7016: LD_VAR 0 3
7020: PPUSH
7021: CALL_OW 420
7025: PPUSH
7026: CALL_OW 419
// end ; if def_game_rules then
7030: LD_EXP 38
7034: IFFALSE 7133
// if ( GetType ( j ) = 3 ) then
7036: LD_VAR 0 1
7040: PPUSH
7041: CALL_OW 247
7045: PUSH
7046: LD_INT 3
7048: EQUAL
7049: IFFALSE 7089
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7051: LD_VAR 0 1
7055: PPUSH
7056: LD_VAR 0 1
7060: PPUSH
7061: CALL_OW 266
7065: PPUSH
7066: LD_VAR 0 1
7070: PPUSH
7071: CALL_OW 255
7075: PPUSH
7076: LD_INT 0
7078: PPUSH
7079: LD_INT 1
7081: NEG
7082: PPUSH
7083: CALL 10033 0 5
7087: GO 7133
// if ( GetChassis ( j ) = 25 ) then
7089: LD_VAR 0 1
7093: PPUSH
7094: CALL_OW 265
7098: PUSH
7099: LD_INT 25
7101: EQUAL
7102: IFFALSE 7133
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7104: LD_VAR 0 1
7108: PPUSH
7109: LD_INT 37
7111: PPUSH
7112: LD_VAR 0 1
7116: PPUSH
7117: CALL_OW 255
7121: PPUSH
7122: LD_INT 0
7124: PPUSH
7125: LD_INT 1
7127: NEG
7128: PPUSH
7129: CALL 10033 0 5
// end ;
7133: PPOPN 5
7135: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7136: LD_EXP 38
7140: PUSH
7141: LD_VAR 0 1
7145: PPUSH
7146: CALL_OW 265
7150: PUSH
7151: LD_INT 25
7153: EQUAL
7154: AND
7155: IFFALSE 7187
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
7157: LD_VAR 0 1
7161: PPUSH
7162: LD_INT 37
7164: PPUSH
7165: LD_VAR 0 1
7169: PPUSH
7170: CALL_OW 255
7174: PPUSH
7175: LD_VAR 0 3
7179: PPUSH
7180: LD_INT 1
7182: PPUSH
7183: CALL 10033 0 5
// end ;
7187: PPOPN 4
7189: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7190: LD_VAR 0 1
7194: PPUSH
7195: LD_VAR 0 2
7199: PPUSH
7200: LD_VAR 0 3
7204: PPUSH
7205: LD_OWVAR 2
7209: PPUSH
7210: CALL 10778 0 4
7214: PPOPN 3
7216: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7217: LD_INT 0
7219: PPUSH
7220: PPUSH
// for un in battle_flags_id do
7221: LD_ADDR_VAR 0 2
7225: PUSH
7226: LD_EXP 25
7230: PUSH
7231: FOR_IN
7232: IFFALSE 7307
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7234: LD_VAR 0 2
7238: PPUSH
7239: LD_INT 1
7241: PUSH
7242: LD_LOC 11
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: LD_INT 2
7253: PUSH
7254: LD_LOC 11
7258: PUSH
7259: LD_INT 2
7261: DIV
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: LD_INT 3
7269: PUSH
7270: LD_LOC 11
7274: PUSH
7275: LD_INT 5
7277: DIV
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: PUSH
7283: LD_INT 20
7285: PUSH
7286: LD_LOC 11
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: PPUSH
7301: CALL_OW 423
7305: GO 7231
7307: POP
7308: POP
// end ;
7309: LD_VAR 0 1
7313: RET
// every 0 0$0.1 do var un ;
7314: GO 7316
7316: DISABLE
7317: LD_INT 0
7319: PPUSH
// begin if not def_morale_flags then
7320: LD_EXP 47
7324: NOT
7325: IFFALSE 7329
// exit ;
7327: GO 7406
// if not morale_decreasing_time then
7329: LD_EXP 9
7333: NOT
7334: IFFALSE 7338
// exit ;
7336: GO 7406
// strength = 100 ;
7338: LD_ADDR_LOC 11
7342: PUSH
7343: LD_INT 100
7345: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7346: LD_EXP 9
7350: PPUSH
7351: CALL_OW 67
// strength := strength - 1 ;
7355: LD_ADDR_LOC 11
7359: PUSH
7360: LD_LOC 11
7364: PUSH
7365: LD_INT 1
7367: MINUS
7368: ST_TO_ADDR
// Update_Flags ;
7369: CALL 7217 0 0
// until not strength ;
7373: LD_LOC 11
7377: NOT
7378: IFFALSE 7346
// for un in battle_flags_id do
7380: LD_ADDR_VAR 0 1
7384: PUSH
7385: LD_EXP 25
7389: PUSH
7390: FOR_IN
7391: IFFALSE 7404
// KillBattleFlag ( un ) ;
7393: LD_VAR 0 1
7397: PPUSH
7398: CALL_OW 419
7402: GO 7390
7404: POP
7405: POP
// end ; end_of_file
7406: PPOPN 1
7408: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
7409: LD_INT 0
7411: PPUSH
7412: PPUSH
// if ( not IAmSpec ) then
7413: CALL_OW 531
7417: NOT
7418: IFFALSE 7434
// Result := Limits_Info ^  ;
7420: LD_ADDR_VAR 0 1
7424: PUSH
7425: LD_LOC 23
7429: PUSH
7430: LD_STRING 
7432: ADD
7433: ST_TO_ADDR
// for i := 1 to 8 do
7434: LD_ADDR_VAR 0 2
7438: PUSH
7439: DOUBLE
7440: LD_INT 1
7442: DEC
7443: ST_TO_ADDR
7444: LD_INT 8
7446: PUSH
7447: FOR_TO
7448: IFFALSE 7493
// if Cheaters [ i ] then
7450: LD_LOC 24
7454: PUSH
7455: LD_VAR 0 2
7459: ARRAY
7460: IFFALSE 7491
// Result := Result ^ [ #Cheater , i , i ] ;
7462: LD_ADDR_VAR 0 1
7466: PUSH
7467: LD_VAR 0 1
7471: PUSH
7472: LD_STRING #Cheater
7474: PUSH
7475: LD_VAR 0 2
7479: PUSH
7480: LD_VAR 0 2
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: LIST
7489: ADD
7490: ST_TO_ADDR
7491: GO 7447
7493: POP
7494: POP
// end ;
7495: LD_VAR 0 1
7499: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
7500: LD_INT 0
7502: PPUSH
7503: PPUSH
7504: PPUSH
7505: PPUSH
7506: PPUSH
// case Game_Type of 10 :
7507: LD_EXP 37
7511: PUSH
7512: LD_INT 10
7514: DOUBLE
7515: EQUAL
7516: IFTRUE 7520
7518: GO 7531
7520: POP
// def_game_rules := 1 ; 11 :
7521: LD_ADDR_EXP 38
7525: PUSH
7526: LD_INT 1
7528: ST_TO_ADDR
7529: GO 7551
7531: LD_INT 11
7533: DOUBLE
7534: EQUAL
7535: IFTRUE 7539
7537: GO 7550
7539: POP
// def_game_rules := 3 ; end ;
7540: LD_ADDR_EXP 38
7544: PUSH
7545: LD_INT 3
7547: ST_TO_ADDR
7548: GO 7551
7550: POP
// case def_game_rules of 0 :
7551: LD_EXP 38
7555: PUSH
7556: LD_INT 0
7558: DOUBLE
7559: EQUAL
7560: IFTRUE 7564
7562: GO 7569
7564: POP
// exit ; 1 :
7565: GO 9627
7567: GO 9527
7569: LD_INT 1
7571: DOUBLE
7572: EQUAL
7573: IFTRUE 7577
7575: GO 7793
7577: POP
// begin def_base_level := 2 ;
7578: LD_ADDR_EXP 39
7582: PUSH
7583: LD_INT 2
7585: ST_TO_ADDR
// def_amount_of_people := 2 ;
7586: LD_ADDR_EXP 40
7590: PUSH
7591: LD_INT 2
7593: ST_TO_ADDR
// def_skill_level := 1 ;
7594: LD_ADDR_EXP 41
7598: PUSH
7599: LD_INT 1
7601: ST_TO_ADDR
// def_starting_resources := 2 ;
7602: LD_ADDR_EXP 42
7606: PUSH
7607: LD_INT 2
7609: ST_TO_ADDR
// def_shipments_density := 1 ;
7610: LD_ADDR_EXP 43
7614: PUSH
7615: LD_INT 1
7617: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
7618: LD_ADDR_EXP 44
7622: PUSH
7623: LD_INT 0
7625: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
7626: LD_ADDR_EXP 45
7630: PUSH
7631: LD_INT 1
7633: ST_TO_ADDR
// def_shared_vision := 1 ;
7634: LD_ADDR_EXP 46
7638: PUSH
7639: LD_INT 1
7641: ST_TO_ADDR
// def_morale_flags := 3 ;
7642: LD_ADDR_EXP 47
7646: PUSH
7647: LD_INT 3
7649: ST_TO_ADDR
// def_siberite_detection := 1 ;
7650: LD_ADDR_EXP 48
7654: PUSH
7655: LD_INT 1
7657: ST_TO_ADDR
// def_people_respawning := 1 ;
7658: LD_ADDR_EXP 49
7662: PUSH
7663: LD_INT 1
7665: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
7666: LD_ADDR_EXP 50
7670: PUSH
7671: LD_INT 1
7673: ST_TO_ADDR
// def_siberite_bomb := 0 ;
7674: LD_ADDR_EXP 51
7678: PUSH
7679: LD_INT 0
7681: ST_TO_ADDR
// def_builduptime := 2 ;
7682: LD_ADDR_EXP 52
7686: PUSH
7687: LD_INT 2
7689: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
7690: LD_ADDR_VAR 0 2
7694: PUSH
7695: EMPTY
7696: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
7697: LD_ADDR_VAR 0 3
7701: PUSH
7702: EMPTY
7703: ST_TO_ADDR
// Banned_Weapons := [ ] ;
7704: LD_ADDR_LOC 18
7708: PUSH
7709: EMPTY
7710: ST_TO_ADDR
// Banned_Chassis := [ ] ;
7711: LD_ADDR_LOC 19
7715: PUSH
7716: EMPTY
7717: ST_TO_ADDR
// Banned_Controls := [ ] ;
7718: LD_ADDR_LOC 20
7722: PUSH
7723: EMPTY
7724: ST_TO_ADDR
// Banned_Engines := [ ] ;
7725: LD_ADDR_LOC 21
7729: PUSH
7730: EMPTY
7731: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
7732: LD_ADDR_LOC 16
7736: PUSH
7737: LD_INT 37
7739: PUSH
7740: EMPTY
7741: LIST
7742: PUSH
7743: LD_INT 4
7745: PUSH
7746: LD_INT 5
7748: PUSH
7749: EMPTY
7750: LIST
7751: LIST
7752: PUSH
7753: LD_INT 31
7755: PUSH
7756: LD_INT 32
7758: PUSH
7759: LD_INT 33
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: LIST
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: LIST
7771: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
7772: LD_ADDR_LOC 17
7776: PUSH
7777: LD_INT 2
7779: PUSH
7780: LD_INT 2
7782: PUSH
7783: LD_INT 4
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: LIST
7790: ST_TO_ADDR
// end ; 2 :
7791: GO 9527
7793: LD_INT 2
7795: DOUBLE
7796: EQUAL
7797: IFTRUE 7801
7799: GO 8010
7801: POP
// begin def_base_level := 1 ;
7802: LD_ADDR_EXP 39
7806: PUSH
7807: LD_INT 1
7809: ST_TO_ADDR
// def_amount_of_people := 2 ;
7810: LD_ADDR_EXP 40
7814: PUSH
7815: LD_INT 2
7817: ST_TO_ADDR
// def_skill_level := 3 ;
7818: LD_ADDR_EXP 41
7822: PUSH
7823: LD_INT 3
7825: ST_TO_ADDR
// def_starting_resources := 3 ;
7826: LD_ADDR_EXP 42
7830: PUSH
7831: LD_INT 3
7833: ST_TO_ADDR
// def_shipments_density := 2 ;
7834: LD_ADDR_EXP 43
7838: PUSH
7839: LD_INT 2
7841: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
7842: LD_ADDR_EXP 44
7846: PUSH
7847: LD_INT 1
7849: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
7850: LD_ADDR_EXP 45
7854: PUSH
7855: LD_INT 2
7857: ST_TO_ADDR
// def_shared_vision := 1 ;
7858: LD_ADDR_EXP 46
7862: PUSH
7863: LD_INT 1
7865: ST_TO_ADDR
// def_morale_flags := 0 ;
7866: LD_ADDR_EXP 47
7870: PUSH
7871: LD_INT 0
7873: ST_TO_ADDR
// def_siberite_detection := 1 ;
7874: LD_ADDR_EXP 48
7878: PUSH
7879: LD_INT 1
7881: ST_TO_ADDR
// def_people_respawning := 0 ;
7882: LD_ADDR_EXP 49
7886: PUSH
7887: LD_INT 0
7889: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
7890: LD_ADDR_EXP 50
7894: PUSH
7895: LD_INT 0
7897: ST_TO_ADDR
// def_siberite_bomb := 0 ;
7898: LD_ADDR_EXP 51
7902: PUSH
7903: LD_INT 0
7905: ST_TO_ADDR
// def_builduptime := 2 ;
7906: LD_ADDR_EXP 52
7910: PUSH
7911: LD_INT 2
7913: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
7914: LD_ADDR_VAR 0 2
7918: PUSH
7919: LD_INT 1
7921: PUSH
7922: EMPTY
7923: LIST
7924: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
7925: LD_ADDR_VAR 0 3
7929: PUSH
7930: EMPTY
7931: ST_TO_ADDR
// Banned_Weapons := [ ] ;
7932: LD_ADDR_LOC 18
7936: PUSH
7937: EMPTY
7938: ST_TO_ADDR
// Banned_Chassis := [ ] ;
7939: LD_ADDR_LOC 19
7943: PUSH
7944: EMPTY
7945: ST_TO_ADDR
// Banned_Controls := [ ] ;
7946: LD_ADDR_LOC 20
7950: PUSH
7951: EMPTY
7952: ST_TO_ADDR
// Banned_Engines := [ ] ;
7953: LD_ADDR_LOC 21
7957: PUSH
7958: EMPTY
7959: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
7960: LD_ADDR_LOC 16
7964: PUSH
7965: LD_INT 4
7967: PUSH
7968: LD_INT 5
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: PUSH
7975: LD_INT 31
7977: PUSH
7978: LD_INT 32
7980: PUSH
7981: LD_INT 33
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: LIST
7988: PUSH
7989: EMPTY
7990: LIST
7991: LIST
7992: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
7993: LD_ADDR_LOC 17
7997: PUSH
7998: LD_INT 1
8000: PUSH
8001: LD_INT 2
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: ST_TO_ADDR
// end ; 3 :
8008: GO 9527
8010: LD_INT 3
8012: DOUBLE
8013: EQUAL
8014: IFTRUE 8018
8016: GO 8261
8018: POP
// begin def_base_level := 1 ;
8019: LD_ADDR_EXP 39
8023: PUSH
8024: LD_INT 1
8026: ST_TO_ADDR
// def_amount_of_people := 2 ;
8027: LD_ADDR_EXP 40
8031: PUSH
8032: LD_INT 2
8034: ST_TO_ADDR
// def_skill_level := 3 ;
8035: LD_ADDR_EXP 41
8039: PUSH
8040: LD_INT 3
8042: ST_TO_ADDR
// def_starting_resources := 3 ;
8043: LD_ADDR_EXP 42
8047: PUSH
8048: LD_INT 3
8050: ST_TO_ADDR
// def_shipments_density := 1 ;
8051: LD_ADDR_EXP 43
8055: PUSH
8056: LD_INT 1
8058: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8059: LD_ADDR_EXP 44
8063: PUSH
8064: LD_INT 0
8066: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
8067: LD_ADDR_EXP 45
8071: PUSH
8072: LD_INT 1
8074: ST_TO_ADDR
// def_shared_vision := 1 ;
8075: LD_ADDR_EXP 46
8079: PUSH
8080: LD_INT 1
8082: ST_TO_ADDR
// def_morale_flags := 0 ;
8083: LD_ADDR_EXP 47
8087: PUSH
8088: LD_INT 0
8090: ST_TO_ADDR
// def_siberite_detection := 1 ;
8091: LD_ADDR_EXP 48
8095: PUSH
8096: LD_INT 1
8098: ST_TO_ADDR
// def_people_respawning := 0 ;
8099: LD_ADDR_EXP 49
8103: PUSH
8104: LD_INT 0
8106: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
8107: LD_ADDR_EXP 50
8111: PUSH
8112: LD_INT 2
8114: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8115: LD_ADDR_EXP 51
8119: PUSH
8120: LD_INT 0
8122: ST_TO_ADDR
// def_builduptime := 1 ;
8123: LD_ADDR_EXP 52
8127: PUSH
8128: LD_INT 1
8130: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
8131: LD_ADDR_VAR 0 2
8135: PUSH
8136: LD_INT 23
8138: PUSH
8139: EMPTY
8140: LIST
8141: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
8142: LD_ADDR_VAR 0 3
8146: PUSH
8147: LD_INT 2
8149: PUSH
8150: LD_INT 37
8152: PUSH
8153: LD_INT 32
8155: PUSH
8156: LD_INT 33
8158: PUSH
8159: LD_INT 36
8161: PUSH
8162: LD_INT 16
8164: PUSH
8165: LD_INT 23
8167: PUSH
8168: LD_INT 21
8170: PUSH
8171: LD_INT 18
8173: PUSH
8174: LD_INT 22
8176: PUSH
8177: LD_INT 20
8179: PUSH
8180: LD_INT 19
8182: PUSH
8183: LD_INT 25
8185: PUSH
8186: LD_INT 17
8188: PUSH
8189: LD_INT 24
8191: PUSH
8192: EMPTY
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8209: LD_ADDR_LOC 18
8213: PUSH
8214: EMPTY
8215: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8216: LD_ADDR_LOC 19
8220: PUSH
8221: EMPTY
8222: ST_TO_ADDR
// Banned_Controls := [ ] ;
8223: LD_ADDR_LOC 20
8227: PUSH
8228: EMPTY
8229: ST_TO_ADDR
// Banned_Engines := [ ] ;
8230: LD_ADDR_LOC 21
8234: PUSH
8235: EMPTY
8236: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8237: LD_ADDR_LOC 16
8241: PUSH
8242: EMPTY
8243: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8244: LD_ADDR_LOC 17
8248: PUSH
8249: EMPTY
8250: ST_TO_ADDR
// No_Mechs := true ;
8251: LD_ADDR_EXP 53
8255: PUSH
8256: LD_INT 1
8258: ST_TO_ADDR
// end ; 4 :
8259: GO 9527
8261: LD_INT 4
8263: DOUBLE
8264: EQUAL
8265: IFTRUE 8269
8267: GO 8444
8269: POP
// begin def_base_level := 1 ;
8270: LD_ADDR_EXP 39
8274: PUSH
8275: LD_INT 1
8277: ST_TO_ADDR
// def_amount_of_people := 2 ;
8278: LD_ADDR_EXP 40
8282: PUSH
8283: LD_INT 2
8285: ST_TO_ADDR
// def_skill_level := 3 ;
8286: LD_ADDR_EXP 41
8290: PUSH
8291: LD_INT 3
8293: ST_TO_ADDR
// def_starting_resources := 3 ;
8294: LD_ADDR_EXP 42
8298: PUSH
8299: LD_INT 3
8301: ST_TO_ADDR
// def_shipments_density := 2 ;
8302: LD_ADDR_EXP 43
8306: PUSH
8307: LD_INT 2
8309: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8310: LD_ADDR_EXP 44
8314: PUSH
8315: LD_INT 1
8317: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8318: LD_ADDR_EXP 45
8322: PUSH
8323: LD_INT 2
8325: ST_TO_ADDR
// def_shared_vision := 1 ;
8326: LD_ADDR_EXP 46
8330: PUSH
8331: LD_INT 1
8333: ST_TO_ADDR
// def_morale_flags := 0 ;
8334: LD_ADDR_EXP 47
8338: PUSH
8339: LD_INT 0
8341: ST_TO_ADDR
// def_siberite_detection := 1 ;
8342: LD_ADDR_EXP 48
8346: PUSH
8347: LD_INT 1
8349: ST_TO_ADDR
// def_people_respawning := 0 ;
8350: LD_ADDR_EXP 49
8354: PUSH
8355: LD_INT 0
8357: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
8358: LD_ADDR_EXP 50
8362: PUSH
8363: LD_INT 0
8365: ST_TO_ADDR
// def_siberite_bomb := 1 ;
8366: LD_ADDR_EXP 51
8370: PUSH
8371: LD_INT 1
8373: ST_TO_ADDR
// def_builduptime := 3 ;
8374: LD_ADDR_EXP 52
8378: PUSH
8379: LD_INT 3
8381: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
8382: LD_ADDR_VAR 0 2
8386: PUSH
8387: LD_INT 1
8389: PUSH
8390: EMPTY
8391: LIST
8392: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8393: LD_ADDR_VAR 0 3
8397: PUSH
8398: EMPTY
8399: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8400: LD_ADDR_LOC 18
8404: PUSH
8405: EMPTY
8406: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8407: LD_ADDR_LOC 19
8411: PUSH
8412: EMPTY
8413: ST_TO_ADDR
// Banned_Controls := [ ] ;
8414: LD_ADDR_LOC 20
8418: PUSH
8419: EMPTY
8420: ST_TO_ADDR
// Banned_Engines := [ ] ;
8421: LD_ADDR_LOC 21
8425: PUSH
8426: EMPTY
8427: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8428: LD_ADDR_LOC 16
8432: PUSH
8433: EMPTY
8434: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8435: LD_ADDR_LOC 17
8439: PUSH
8440: EMPTY
8441: ST_TO_ADDR
// end ; 5 :
8442: GO 9527
8444: LD_INT 5
8446: DOUBLE
8447: EQUAL
8448: IFTRUE 8452
8450: GO 8701
8452: POP
// begin def_base_level := 0 ;
8453: LD_ADDR_EXP 39
8457: PUSH
8458: LD_INT 0
8460: ST_TO_ADDR
// def_amount_of_people := 0 ;
8461: LD_ADDR_EXP 40
8465: PUSH
8466: LD_INT 0
8468: ST_TO_ADDR
// def_skill_level := 0 ;
8469: LD_ADDR_EXP 41
8473: PUSH
8474: LD_INT 0
8476: ST_TO_ADDR
// def_starting_resources := 0 ;
8477: LD_ADDR_EXP 42
8481: PUSH
8482: LD_INT 0
8484: ST_TO_ADDR
// def_shipments_density := 0 ;
8485: LD_ADDR_EXP 43
8489: PUSH
8490: LD_INT 0
8492: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8493: LD_ADDR_EXP 44
8497: PUSH
8498: LD_INT 0
8500: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
8501: LD_ADDR_EXP 45
8505: PUSH
8506: LD_INT 0
8508: ST_TO_ADDR
// def_shared_vision := 1 ;
8509: LD_ADDR_EXP 46
8513: PUSH
8514: LD_INT 1
8516: ST_TO_ADDR
// def_morale_flags := 0 ;
8517: LD_ADDR_EXP 47
8521: PUSH
8522: LD_INT 0
8524: ST_TO_ADDR
// def_siberite_detection := 0 ;
8525: LD_ADDR_EXP 48
8529: PUSH
8530: LD_INT 0
8532: ST_TO_ADDR
// def_people_respawning := 1 ;
8533: LD_ADDR_EXP 49
8537: PUSH
8538: LD_INT 1
8540: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
8541: LD_ADDR_EXP 50
8545: PUSH
8546: LD_INT 1
8548: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8549: LD_ADDR_EXP 51
8553: PUSH
8554: LD_INT 0
8556: ST_TO_ADDR
// def_builduptime := 0 ;
8557: LD_ADDR_EXP 52
8561: PUSH
8562: LD_INT 0
8564: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
8565: LD_ADDR_VAR 0 2
8569: PUSH
8570: LD_INT 10
8572: PUSH
8573: LD_INT 3
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
8580: LD_ADDR_VAR 0 3
8584: PUSH
8585: LD_INT 12
8587: PUSH
8588: LD_INT 11
8590: PUSH
8591: LD_INT 14
8593: PUSH
8594: LD_INT 13
8596: PUSH
8597: LD_INT 5
8599: PUSH
8600: LD_INT 24
8602: PUSH
8603: LD_INT 21
8605: PUSH
8606: LD_INT 33
8608: PUSH
8609: LD_INT 36
8611: PUSH
8612: EMPTY
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
8623: LD_ADDR_LOC 18
8627: PUSH
8628: LD_INT 31
8630: PUSH
8631: EMPTY
8632: LIST
8633: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8634: LD_ADDR_LOC 19
8638: PUSH
8639: EMPTY
8640: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
8641: LD_ADDR_LOC 20
8645: PUSH
8646: LD_INT 2
8648: PUSH
8649: EMPTY
8650: LIST
8651: ST_TO_ADDR
// Banned_Engines := [ ] ;
8652: LD_ADDR_LOC 21
8656: PUSH
8657: EMPTY
8658: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
8659: LD_ADDR_LOC 16
8663: PUSH
8664: LD_INT 4
8666: PUSH
8667: EMPTY
8668: LIST
8669: PUSH
8670: LD_INT 31
8672: PUSH
8673: LD_INT 32
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
8684: LD_ADDR_LOC 17
8688: PUSH
8689: LD_INT 1
8691: PUSH
8692: LD_INT 1
8694: PUSH
8695: EMPTY
8696: LIST
8697: LIST
8698: ST_TO_ADDR
// end ; 6 :
8699: GO 9527
8701: LD_INT 6
8703: DOUBLE
8704: EQUAL
8705: IFTRUE 8709
8707: GO 8912
8709: POP
// begin def_base_level := 1 ;
8710: LD_ADDR_EXP 39
8714: PUSH
8715: LD_INT 1
8717: ST_TO_ADDR
// def_amount_of_people := 2 ;
8718: LD_ADDR_EXP 40
8722: PUSH
8723: LD_INT 2
8725: ST_TO_ADDR
// def_skill_level := 3 ;
8726: LD_ADDR_EXP 41
8730: PUSH
8731: LD_INT 3
8733: ST_TO_ADDR
// def_starting_resources := 3 ;
8734: LD_ADDR_EXP 42
8738: PUSH
8739: LD_INT 3
8741: ST_TO_ADDR
// def_shipments_density := 1 ;
8742: LD_ADDR_EXP 43
8746: PUSH
8747: LD_INT 1
8749: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8750: LD_ADDR_EXP 44
8754: PUSH
8755: LD_INT 0
8757: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
8758: LD_ADDR_EXP 45
8762: PUSH
8763: LD_INT 1
8765: ST_TO_ADDR
// def_shared_vision := 1 ;
8766: LD_ADDR_EXP 46
8770: PUSH
8771: LD_INT 1
8773: ST_TO_ADDR
// def_morale_flags := 0 ;
8774: LD_ADDR_EXP 47
8778: PUSH
8779: LD_INT 0
8781: ST_TO_ADDR
// def_siberite_detection := 1 ;
8782: LD_ADDR_EXP 48
8786: PUSH
8787: LD_INT 1
8789: ST_TO_ADDR
// def_people_respawning := 2 ;
8790: LD_ADDR_EXP 49
8794: PUSH
8795: LD_INT 2
8797: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
8798: LD_ADDR_EXP 50
8802: PUSH
8803: LD_INT 1
8805: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8806: LD_ADDR_EXP 51
8810: PUSH
8811: LD_INT 0
8813: ST_TO_ADDR
// def_builduptime := 1 ;
8814: LD_ADDR_EXP 52
8818: PUSH
8819: LD_INT 1
8821: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
8822: LD_ADDR_VAR 0 2
8826: PUSH
8827: LD_INT 23
8829: PUSH
8830: EMPTY
8831: LIST
8832: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
8833: LD_ADDR_VAR 0 3
8837: PUSH
8838: LD_INT 2
8840: PUSH
8841: LD_INT 37
8843: PUSH
8844: LD_INT 31
8846: PUSH
8847: LD_INT 32
8849: PUSH
8850: LD_INT 33
8852: PUSH
8853: EMPTY
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8860: LD_ADDR_LOC 18
8864: PUSH
8865: EMPTY
8866: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8867: LD_ADDR_LOC 19
8871: PUSH
8872: EMPTY
8873: ST_TO_ADDR
// Banned_Controls := [ ] ;
8874: LD_ADDR_LOC 20
8878: PUSH
8879: EMPTY
8880: ST_TO_ADDR
// Banned_Engines := [ ] ;
8881: LD_ADDR_LOC 21
8885: PUSH
8886: EMPTY
8887: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8888: LD_ADDR_LOC 16
8892: PUSH
8893: EMPTY
8894: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8895: LD_ADDR_LOC 17
8899: PUSH
8900: EMPTY
8901: ST_TO_ADDR
// No_Mechs := true ;
8902: LD_ADDR_EXP 53
8906: PUSH
8907: LD_INT 1
8909: ST_TO_ADDR
// end ; 7 :
8910: GO 9527
8912: LD_INT 7
8914: DOUBLE
8915: EQUAL
8916: IFTRUE 8920
8918: GO 9118
8920: POP
// begin def_base_level := 1 ;
8921: LD_ADDR_EXP 39
8925: PUSH
8926: LD_INT 1
8928: ST_TO_ADDR
// def_amount_of_people := 2 ;
8929: LD_ADDR_EXP 40
8933: PUSH
8934: LD_INT 2
8936: ST_TO_ADDR
// def_skill_level := 3 ;
8937: LD_ADDR_EXP 41
8941: PUSH
8942: LD_INT 3
8944: ST_TO_ADDR
// def_starting_resources := 3 ;
8945: LD_ADDR_EXP 42
8949: PUSH
8950: LD_INT 3
8952: ST_TO_ADDR
// def_shipments_density := 1 ;
8953: LD_ADDR_EXP 43
8957: PUSH
8958: LD_INT 1
8960: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8961: LD_ADDR_EXP 44
8965: PUSH
8966: LD_INT 1
8968: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8969: LD_ADDR_EXP 45
8973: PUSH
8974: LD_INT 2
8976: ST_TO_ADDR
// def_shared_vision := 1 ;
8977: LD_ADDR_EXP 46
8981: PUSH
8982: LD_INT 1
8984: ST_TO_ADDR
// def_morale_flags := 0 ;
8985: LD_ADDR_EXP 47
8989: PUSH
8990: LD_INT 0
8992: ST_TO_ADDR
// def_siberite_detection := 1 ;
8993: LD_ADDR_EXP 48
8997: PUSH
8998: LD_INT 1
9000: ST_TO_ADDR
// def_people_respawning := 0 ;
9001: LD_ADDR_EXP 49
9005: PUSH
9006: LD_INT 0
9008: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9009: LD_ADDR_EXP 50
9013: PUSH
9014: LD_INT 1
9016: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9017: LD_ADDR_EXP 51
9021: PUSH
9022: LD_INT 0
9024: ST_TO_ADDR
// def_builduptime := 3 ;
9025: LD_ADDR_EXP 52
9029: PUSH
9030: LD_INT 3
9032: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9033: LD_ADDR_VAR 0 2
9037: PUSH
9038: LD_INT 23
9040: PUSH
9041: EMPTY
9042: LIST
9043: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
9044: LD_ADDR_VAR 0 3
9048: PUSH
9049: LD_INT 37
9051: PUSH
9052: EMPTY
9053: LIST
9054: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9055: LD_ADDR_LOC 18
9059: PUSH
9060: EMPTY
9061: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9062: LD_ADDR_LOC 19
9066: PUSH
9067: EMPTY
9068: ST_TO_ADDR
// Banned_Controls := [ ] ;
9069: LD_ADDR_LOC 20
9073: PUSH
9074: EMPTY
9075: ST_TO_ADDR
// Banned_Engines := [ ] ;
9076: LD_ADDR_LOC 21
9080: PUSH
9081: EMPTY
9082: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9083: LD_ADDR_LOC 16
9087: PUSH
9088: LD_INT 31
9090: PUSH
9091: LD_INT 32
9093: PUSH
9094: LD_INT 33
9096: PUSH
9097: EMPTY
9098: LIST
9099: LIST
9100: LIST
9101: PUSH
9102: EMPTY
9103: LIST
9104: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
9105: LD_ADDR_LOC 17
9109: PUSH
9110: LD_INT 10
9112: PUSH
9113: EMPTY
9114: LIST
9115: ST_TO_ADDR
// end ; 8 :
9116: GO 9527
9118: LD_INT 8
9120: DOUBLE
9121: EQUAL
9122: IFTRUE 9126
9124: GO 9526
9126: POP
// begin def_base_level := 0 ;
9127: LD_ADDR_EXP 39
9131: PUSH
9132: LD_INT 0
9134: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
9135: LD_ADDR_EXP 40
9139: PUSH
9140: LD_INT 0
9142: PPUSH
9143: LD_INT 1
9145: PPUSH
9146: CALL_OW 12
9150: ST_TO_ADDR
// def_skill_level := 0 ;
9151: LD_ADDR_EXP 41
9155: PUSH
9156: LD_INT 0
9158: ST_TO_ADDR
// def_starting_resources := 2 ;
9159: LD_ADDR_EXP 42
9163: PUSH
9164: LD_INT 2
9166: ST_TO_ADDR
// def_shipments_density := 1 ;
9167: LD_ADDR_EXP 43
9171: PUSH
9172: LD_INT 1
9174: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9175: LD_ADDR_EXP 44
9179: PUSH
9180: LD_INT 0
9182: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
9183: LD_ADDR_EXP 45
9187: PUSH
9188: LD_INT 0
9190: ST_TO_ADDR
// def_shared_vision := 1 ;
9191: LD_ADDR_EXP 46
9195: PUSH
9196: LD_INT 1
9198: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
9199: LD_ADDR_EXP 47
9203: PUSH
9204: LD_INT 0
9206: PPUSH
9207: LD_INT 2
9209: PPUSH
9210: CALL_OW 12
9214: ST_TO_ADDR
// def_siberite_detection := 0 ;
9215: LD_ADDR_EXP 48
9219: PUSH
9220: LD_INT 0
9222: ST_TO_ADDR
// def_people_respawning := 0 ;
9223: LD_ADDR_EXP 49
9227: PUSH
9228: LD_INT 0
9230: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
9231: LD_ADDR_EXP 50
9235: PUSH
9236: LD_INT 2
9238: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9239: LD_ADDR_EXP 51
9243: PUSH
9244: LD_INT 0
9246: ST_TO_ADDR
// def_builduptime := 0 ;
9247: LD_ADDR_EXP 52
9251: PUSH
9252: LD_INT 0
9254: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
9255: LD_ADDR_VAR 0 2
9259: PUSH
9260: LD_INT 23
9262: PUSH
9263: LD_INT 20
9265: PUSH
9266: LD_INT 40
9268: PUSH
9269: LD_INT 47
9271: PUSH
9272: LD_INT 46
9274: PUSH
9275: LD_INT 39
9277: PUSH
9278: LD_INT 71
9280: PUSH
9281: LD_INT 34
9283: PUSH
9284: LD_INT 41
9286: PUSH
9287: LD_INT 44
9289: PUSH
9290: LD_INT 17
9292: PUSH
9293: LD_INT 16
9295: PUSH
9296: EMPTY
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
9310: LD_ADDR_VAR 0 3
9314: PUSH
9315: LD_INT 37
9317: PUSH
9318: LD_INT 5
9320: PUSH
9321: LD_INT 13
9323: PUSH
9324: LD_INT 34
9326: PUSH
9327: LD_INT 12
9329: PUSH
9330: LD_INT 15
9332: PUSH
9333: LD_INT 11
9335: PUSH
9336: LD_INT 14
9338: PUSH
9339: LD_INT 29
9341: PUSH
9342: LD_INT 30
9344: PUSH
9345: LD_INT 28
9347: PUSH
9348: LD_INT 24
9350: PUSH
9351: LD_INT 25
9353: PUSH
9354: LD_INT 20
9356: PUSH
9357: LD_INT 21
9359: PUSH
9360: LD_INT 22
9362: PUSH
9363: LD_INT 36
9365: PUSH
9366: EMPTY
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9385: LD_ADDR_LOC 18
9389: PUSH
9390: EMPTY
9391: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
9392: LD_ADDR_LOC 19
9396: PUSH
9397: LD_INT 14
9399: PUSH
9400: EMPTY
9401: LIST
9402: ST_TO_ADDR
// Banned_Controls := [ ] ;
9403: LD_ADDR_LOC 20
9407: PUSH
9408: EMPTY
9409: ST_TO_ADDR
// Banned_Engines := [ ] ;
9410: LD_ADDR_LOC 21
9414: PUSH
9415: EMPTY
9416: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
9417: LD_ADDR_LOC 16
9421: PUSH
9422: LD_INT 31
9424: PUSH
9425: LD_INT 32
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: PUSH
9432: LD_INT 4
9434: PUSH
9435: EMPTY
9436: LIST
9437: PUSH
9438: EMPTY
9439: LIST
9440: LIST
9441: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
9442: LD_ADDR_LOC 17
9446: PUSH
9447: LD_INT 2
9449: PUSH
9450: LD_INT 1
9452: PUSH
9453: EMPTY
9454: LIST
9455: LIST
9456: ST_TO_ADDR
// for i := 1 to 8 do
9457: LD_ADDR_VAR 0 4
9461: PUSH
9462: DOUBLE
9463: LD_INT 1
9465: DEC
9466: ST_TO_ADDR
9467: LD_INT 8
9469: PUSH
9470: FOR_TO
9471: IFFALSE 9522
// if ( Side_Nations [ i ] = 3 ) then
9473: LD_EXP 20
9477: PUSH
9478: LD_VAR 0 4
9482: ARRAY
9483: PUSH
9484: LD_INT 3
9486: EQUAL
9487: IFFALSE 9520
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
9489: LD_ADDR_EXP 20
9493: PUSH
9494: LD_EXP 20
9498: PPUSH
9499: LD_VAR 0 4
9503: PPUSH
9504: LD_INT 1
9506: PPUSH
9507: LD_INT 2
9509: PPUSH
9510: CALL_OW 12
9514: PPUSH
9515: CALL_OW 1
9519: ST_TO_ADDR
9520: GO 9470
9522: POP
9523: POP
// end ; end ;
9524: GO 9527
9526: POP
// for i := 1 to 8 do
9527: LD_ADDR_VAR 0 4
9531: PUSH
9532: DOUBLE
9533: LD_INT 1
9535: DEC
9536: ST_TO_ADDR
9537: LD_INT 8
9539: PUSH
9540: FOR_TO
9541: IFFALSE 9625
// if Side_Positions [ i ] then
9543: LD_EXP 19
9547: PUSH
9548: LD_VAR 0 4
9552: ARRAY
9553: IFFALSE 9623
// begin for j in Unavailable_Techs do
9555: LD_ADDR_VAR 0 5
9559: PUSH
9560: LD_VAR 0 2
9564: PUSH
9565: FOR_IN
9566: IFFALSE 9587
// SetTech ( j , i , 0 ) ;
9568: LD_VAR 0 5
9572: PPUSH
9573: LD_VAR 0 4
9577: PPUSH
9578: LD_INT 0
9580: PPUSH
9581: CALL_OW 322
9585: GO 9565
9587: POP
9588: POP
// for j in Unavailable_Builds do
9589: LD_ADDR_VAR 0 5
9593: PUSH
9594: LD_VAR 0 3
9598: PUSH
9599: FOR_IN
9600: IFFALSE 9621
// SetRestrict ( j , i , 0 ) ;
9602: LD_VAR 0 5
9606: PPUSH
9607: LD_VAR 0 4
9611: PPUSH
9612: LD_INT 0
9614: PPUSH
9615: CALL_OW 324
9619: GO 9599
9621: POP
9622: POP
// end ;
9623: GO 9540
9625: POP
9626: POP
// end ;
9627: LD_VAR 0 1
9631: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
9632: LD_INT 0
9634: PPUSH
9635: PPUSH
9636: PPUSH
9637: PPUSH
9638: PPUSH
9639: PPUSH
9640: PPUSH
// for i := 1 to Restricted_Builds do
9641: LD_ADDR_VAR 0 2
9645: PUSH
9646: DOUBLE
9647: LD_INT 1
9649: DEC
9650: ST_TO_ADDR
9651: LD_LOC 16
9655: PUSH
9656: FOR_TO
9657: IFFALSE 9967
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
9659: LD_LOC 16
9663: PUSH
9664: LD_VAR 0 2
9668: ARRAY
9669: PUSH
9670: LD_INT 1
9672: ARRAY
9673: PUSH
9674: LD_INT 31
9676: DOUBLE
9677: EQUAL
9678: IFTRUE 9694
9680: LD_INT 32
9682: DOUBLE
9683: EQUAL
9684: IFTRUE 9694
9686: LD_INT 33
9688: DOUBLE
9689: EQUAL
9690: IFTRUE 9694
9692: GO 9705
9694: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
9695: LD_ADDR_VAR 0 6
9699: PUSH
9700: LD_STRING #Turrets
9702: ST_TO_ADDR
9703: GO 9750
9705: LD_INT 4
9707: DOUBLE
9708: EQUAL
9709: IFTRUE 9719
9711: LD_INT 5
9713: DOUBLE
9714: EQUAL
9715: IFTRUE 9719
9717: GO 9730
9719: POP
// btype := #Armouries ; b_Behemoth :
9720: LD_ADDR_VAR 0 6
9724: PUSH
9725: LD_STRING #Armouries
9727: ST_TO_ADDR
9728: GO 9750
9730: LD_INT 37
9732: DOUBLE
9733: EQUAL
9734: IFTRUE 9738
9736: GO 9749
9738: POP
// btype := #Behemoths ; end ;
9739: LD_ADDR_VAR 0 6
9743: PUSH
9744: LD_STRING #Behemoths
9746: ST_TO_ADDR
9747: GO 9750
9749: POP
// list := [ ] ;
9750: LD_ADDR_VAR 0 7
9754: PUSH
9755: EMPTY
9756: ST_TO_ADDR
// for j := 1 to 8 do
9757: LD_ADDR_VAR 0 3
9761: PUSH
9762: DOUBLE
9763: LD_INT 1
9765: DEC
9766: ST_TO_ADDR
9767: LD_INT 8
9769: PUSH
9770: FOR_TO
9771: IFFALSE 9864
// if Side_Positions [ j ] then
9773: LD_EXP 19
9777: PUSH
9778: LD_VAR 0 3
9782: ARRAY
9783: IFFALSE 9862
// begin amount := 0 ;
9785: LD_ADDR_VAR 0 5
9789: PUSH
9790: LD_INT 0
9792: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
9793: LD_ADDR_VAR 0 4
9797: PUSH
9798: LD_LOC 16
9802: PUSH
9803: LD_VAR 0 2
9807: ARRAY
9808: PUSH
9809: FOR_IN
9810: IFFALSE 9858
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
9812: LD_ADDR_VAR 0 5
9816: PUSH
9817: LD_VAR 0 5
9821: PUSH
9822: LD_INT 22
9824: PUSH
9825: LD_VAR 0 3
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: PUSH
9834: LD_INT 30
9836: PUSH
9837: LD_VAR 0 4
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PPUSH
9850: CALL_OW 69
9854: PLUS
9855: ST_TO_ADDR
9856: GO 9809
9858: POP
9859: POP
// break ;
9860: GO 9864
// end ;
9862: GO 9770
9864: POP
9865: POP
// list := [ ] ;
9866: LD_ADDR_VAR 0 7
9870: PUSH
9871: EMPTY
9872: ST_TO_ADDR
// for j := 1 to 8 do
9873: LD_ADDR_VAR 0 3
9877: PUSH
9878: DOUBLE
9879: LD_INT 1
9881: DEC
9882: ST_TO_ADDR
9883: LD_INT 8
9885: PUSH
9886: FOR_TO
9887: IFFALSE 9907
// list := list ^ amount ;
9889: LD_ADDR_VAR 0 7
9893: PUSH
9894: LD_VAR 0 7
9898: PUSH
9899: LD_VAR 0 5
9903: ADD
9904: ST_TO_ADDR
9905: GO 9886
9907: POP
9908: POP
// Already_Built := Already_Built ^ [ list ] ;
9909: LD_ADDR_LOC 22
9913: PUSH
9914: LD_LOC 22
9918: PUSH
9919: LD_VAR 0 7
9923: PUSH
9924: EMPTY
9925: LIST
9926: ADD
9927: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
9928: LD_ADDR_LOC 23
9932: PUSH
9933: LD_LOC 23
9937: PUSH
9938: LD_VAR 0 6
9942: PUSH
9943: LD_VAR 0 5
9947: PUSH
9948: LD_LOC 17
9952: PUSH
9953: LD_VAR 0 2
9957: ARRAY
9958: PUSH
9959: EMPTY
9960: LIST
9961: LIST
9962: LIST
9963: ADD
9964: ST_TO_ADDR
// end ;
9965: GO 9656
9967: POP
9968: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9969: LD_ADDR_LOC 24
9973: PUSH
9974: LD_INT 0
9976: PUSH
9977: LD_INT 0
9979: PUSH
9980: LD_INT 0
9982: PUSH
9983: LD_INT 0
9985: PUSH
9986: LD_INT 0
9988: PUSH
9989: LD_INT 0
9991: PUSH
9992: LD_INT 0
9994: PUSH
9995: LD_INT 0
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: ST_TO_ADDR
// if Limits_Info then
10008: LD_LOC 23
10012: IFFALSE 10028
// Limits_Info := #Limits ^ Limits_Info ;
10014: LD_ADDR_LOC 23
10018: PUSH
10019: LD_STRING #Limits
10021: PUSH
10022: LD_LOC 23
10026: ADD
10027: ST_TO_ADDR
// end ;
10028: LD_VAR 0 1
10032: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
10033: LD_INT 0
10035: PPUSH
10036: PPUSH
10037: PPUSH
10038: PPUSH
// for i := 1 to Restricted_Builds do
10039: LD_ADDR_VAR 0 7
10043: PUSH
10044: DOUBLE
10045: LD_INT 1
10047: DEC
10048: ST_TO_ADDR
10049: LD_LOC 16
10053: PUSH
10054: FOR_TO
10055: IFFALSE 10478
// if BType in Restricted_Builds [ i ] then
10057: LD_VAR 0 2
10061: PUSH
10062: LD_LOC 16
10066: PUSH
10067: LD_VAR 0 7
10071: ARRAY
10072: IN
10073: IFFALSE 10476
// begin if old_side then
10075: LD_VAR 0 4
10079: IFFALSE 10205
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
10081: LD_LOC 22
10085: PUSH
10086: LD_VAR 0 7
10090: ARRAY
10091: PUSH
10092: LD_VAR 0 3
10096: ARRAY
10097: PUSH
10098: LD_VAR 0 5
10102: PLUS
10103: PUSH
10104: LD_LOC 17
10108: PUSH
10109: LD_VAR 0 7
10113: ARRAY
10114: GREATER
10115: IFFALSE 10141
// begin SetSide ( un , old_side ) ;
10117: LD_VAR 0 1
10121: PPUSH
10122: LD_VAR 0 4
10126: PPUSH
10127: CALL_OW 235
// count := 0 ;
10131: LD_ADDR_VAR 0 5
10135: PUSH
10136: LD_INT 0
10138: ST_TO_ADDR
// end else
10139: GO 10205
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
10141: LD_ADDR_LOC 22
10145: PUSH
10146: LD_LOC 22
10150: PPUSH
10151: LD_VAR 0 7
10155: PPUSH
10156: LD_LOC 22
10160: PUSH
10161: LD_VAR 0 7
10165: ARRAY
10166: PPUSH
10167: LD_VAR 0 4
10171: PPUSH
10172: LD_LOC 22
10176: PUSH
10177: LD_VAR 0 7
10181: ARRAY
10182: PUSH
10183: LD_VAR 0 4
10187: ARRAY
10188: PUSH
10189: LD_VAR 0 5
10193: MINUS
10194: PPUSH
10195: CALL_OW 1
10199: PPUSH
10200: CALL_OW 1
10204: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
10205: LD_ADDR_LOC 22
10209: PUSH
10210: LD_LOC 22
10214: PPUSH
10215: LD_VAR 0 7
10219: PPUSH
10220: LD_LOC 22
10224: PUSH
10225: LD_VAR 0 7
10229: ARRAY
10230: PPUSH
10231: LD_VAR 0 3
10235: PPUSH
10236: LD_LOC 22
10240: PUSH
10241: LD_VAR 0 7
10245: ARRAY
10246: PUSH
10247: LD_VAR 0 3
10251: ARRAY
10252: PUSH
10253: LD_VAR 0 5
10257: PLUS
10258: PPUSH
10259: CALL_OW 1
10263: PPUSH
10264: CALL_OW 1
10268: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
10269: LD_VAR 0 5
10273: PUSH
10274: LD_INT 0
10276: NONEQUAL
10277: PUSH
10278: LD_VAR 0 3
10282: PUSH
10283: LD_OWVAR 2
10287: EQUAL
10288: AND
10289: IFFALSE 10332
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
10291: LD_ADDR_LOC 23
10295: PUSH
10296: LD_LOC 23
10300: PPUSH
10301: LD_INT 3
10303: PUSH
10304: LD_VAR 0 7
10308: MUL
10309: PPUSH
10310: LD_LOC 22
10314: PUSH
10315: LD_VAR 0 7
10319: ARRAY
10320: PUSH
10321: LD_VAR 0 3
10325: ARRAY
10326: PPUSH
10327: CALL_OW 1
10331: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
10332: LD_LOC 22
10336: PUSH
10337: LD_VAR 0 7
10341: ARRAY
10342: PUSH
10343: LD_VAR 0 3
10347: ARRAY
10348: PUSH
10349: LD_LOC 17
10353: PUSH
10354: LD_VAR 0 7
10358: ARRAY
10359: GREATER
10360: IFFALSE 10387
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
10362: LD_ADDR_LOC 24
10366: PUSH
10367: LD_LOC 24
10371: PPUSH
10372: LD_VAR 0 3
10376: PPUSH
10377: LD_INT 1
10379: PPUSH
10380: CALL_OW 1
10384: ST_TO_ADDR
// end else
10385: GO 10474
// begin for j := 1 to Restricted_Builds do
10387: LD_ADDR_VAR 0 8
10391: PUSH
10392: DOUBLE
10393: LD_INT 1
10395: DEC
10396: ST_TO_ADDR
10397: LD_LOC 16
10401: PUSH
10402: FOR_TO
10403: IFFALSE 10447
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
10405: LD_LOC 22
10409: PUSH
10410: LD_VAR 0 8
10414: ARRAY
10415: PUSH
10416: LD_VAR 0 3
10420: ARRAY
10421: PUSH
10422: LD_LOC 17
10426: PUSH
10427: LD_VAR 0 8
10431: ARRAY
10432: GREATER
10433: IFFALSE 10445
// begin Is_Cheater := true ;
10435: LD_ADDR_VAR 0 9
10439: PUSH
10440: LD_INT 1
10442: ST_TO_ADDR
// break ;
10443: GO 10447
// end ;
10445: GO 10402
10447: POP
10448: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
10449: LD_ADDR_LOC 24
10453: PUSH
10454: LD_LOC 24
10458: PPUSH
10459: LD_VAR 0 3
10463: PPUSH
10464: LD_VAR 0 9
10468: PPUSH
10469: CALL_OW 1
10473: ST_TO_ADDR
// end ; break ;
10474: GO 10478
// end ;
10476: GO 10054
10478: POP
10479: POP
// end ;
10480: LD_VAR 0 6
10484: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
10485: LD_VAR 0 5
10489: PUSH
10490: LD_LOC 18
10494: IN
10495: PUSH
10496: LD_VAR 0 2
10500: PUSH
10501: LD_LOC 19
10505: IN
10506: OR
10507: PUSH
10508: LD_VAR 0 4
10512: PUSH
10513: LD_LOC 20
10517: IN
10518: OR
10519: PUSH
10520: LD_VAR 0 3
10524: PUSH
10525: LD_LOC 21
10529: IN
10530: OR
10531: IFFALSE 10542
// ComCancel ( factory ) ;
10533: LD_VAR 0 1
10537: PPUSH
10538: CALL_OW 127
// end ;
10542: PPOPN 5
10544: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
10545: LD_VAR 0 2
10549: PUSH
10550: LD_LOC 18
10554: IN
10555: IFFALSE 10566
// ComCancel ( building ) ;
10557: LD_VAR 0 1
10561: PPUSH
10562: CALL_OW 127
// end ; end_of_file
10566: PPOPN 2
10568: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
10569: LD_INT 0
10571: PPUSH
10572: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
10573: LD_ADDR_VAR 0 2
10577: PUSH
10578: LD_STRING #Multi1x1-Time
10580: PUSH
10581: LD_OWVAR 1
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: ST_TO_ADDR
// if WaitServerStrings then
10590: LD_EXP 55
10594: IFFALSE 10612
// AllStrings = AllStrings ^ WaitServerStrings ;
10596: LD_ADDR_VAR 0 2
10600: PUSH
10601: LD_VAR 0 2
10605: PUSH
10606: LD_EXP 55
10610: ADD
10611: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
10612: LD_INT 0
10614: PUSH
10615: LD_EXP 12
10619: PUSH
10620: LD_OWVAR 1
10624: MINUS
10625: LESSEQUAL
10626: IFFALSE 10657
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
10628: LD_ADDR_VAR 0 2
10632: PUSH
10633: LD_VAR 0 2
10637: PUSH
10638: LD_STRING #allowedsibbomb
10640: PUSH
10641: LD_EXP 12
10645: PUSH
10646: LD_OWVAR 1
10650: MINUS
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: ADD
10656: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
10657: LD_INT 0
10659: PUSH
10660: LD_EXP 58
10664: PUSH
10665: LD_OWVAR 1
10669: MINUS
10670: LESSEQUAL
10671: IFFALSE 10702
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
10673: LD_ADDR_VAR 0 2
10677: PUSH
10678: LD_VAR 0 2
10682: PUSH
10683: LD_STRING #builduptime
10685: PUSH
10686: LD_EXP 58
10690: PUSH
10691: LD_OWVAR 1
10695: MINUS
10696: PUSH
10697: EMPTY
10698: LIST
10699: LIST
10700: ADD
10701: ST_TO_ADDR
// if ( ExtraStrings ) then
10702: LD_EXP 54
10706: IFFALSE 10728
// AllStrings := AllStrings ^  ^ ExtraStrings ;
10708: LD_ADDR_VAR 0 2
10712: PUSH
10713: LD_VAR 0 2
10717: PUSH
10718: LD_STRING 
10720: ADD
10721: PUSH
10722: LD_EXP 54
10726: ADD
10727: ST_TO_ADDR
// if ( LimitsStrings ) then
10728: CALL 7409 0 0
10732: IFFALSE 10754
// AllStrings := AllStrings ^  ^ LimitsStrings ;
10734: LD_ADDR_VAR 0 2
10738: PUSH
10739: LD_VAR 0 2
10743: PUSH
10744: LD_STRING 
10746: ADD
10747: PUSH
10748: CALL 7409 0 0
10752: ADD
10753: ST_TO_ADDR
// Display_Strings := AllStrings ;
10754: LD_ADDR_OWVAR 47
10758: PUSH
10759: LD_VAR 0 2
10763: ST_TO_ADDR
// end ;
10764: LD_VAR 0 1
10768: RET
// every 0 0$1 do
10769: GO 10771
10771: DISABLE
// begin ShowTimer ;
10772: CALL 10569 0 0
// enable ;
10776: ENABLE
// end ; end_of_file
10777: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
10778: LD_INT 0
10780: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
10781: LD_VAR 0 1
10785: PPUSH
10786: CALL_OW 255
10790: PUSH
10791: LD_VAR 0 4
10795: EQUAL
10796: IFFALSE 10815
// begin SetAchievement ( ACH_RAD ) ;
10798: LD_STRING ACH_RAD
10800: PPUSH
10801: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
10805: LD_STRING ACH_NL
10807: PPUSH
10808: LD_INT 1
10810: PPUSH
10811: CALL_OW 564
// end end ;
10815: LD_VAR 0 5
10819: RET
// export function SA_Win ( side ) ; begin
10820: LD_INT 0
10822: PPUSH
// case side of 1 :
10823: LD_VAR 0 1
10827: PUSH
10828: LD_INT 1
10830: DOUBLE
10831: EQUAL
10832: IFTRUE 10836
10834: GO 10849
10836: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
10837: LD_STRING ACH_AH
10839: PPUSH
10840: LD_INT 1
10842: PPUSH
10843: CALL_OW 564
10847: GO 11012
10849: LD_INT 2
10851: DOUBLE
10852: EQUAL
10853: IFTRUE 10857
10855: GO 10870
10857: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
10858: LD_STRING ACH_E
10860: PPUSH
10861: LD_INT 1
10863: PPUSH
10864: CALL_OW 564
10868: GO 11012
10870: LD_INT 3
10872: DOUBLE
10873: EQUAL
10874: IFTRUE 10878
10876: GO 10891
10878: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
10879: LD_STRING ACH_OOL
10881: PPUSH
10882: LD_INT 1
10884: PPUSH
10885: CALL_OW 564
10889: GO 11012
10891: LD_INT 1
10893: PUSH
10894: LD_INT 2
10896: PUSH
10897: EMPTY
10898: LIST
10899: LIST
10900: DOUBLE
10901: EQUAL
10902: IFTRUE 10906
10904: GO 10931
10906: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
10907: LD_STRING ACH_AH
10909: PPUSH
10910: LD_REAL  5.00000000000000E-0001
10913: PPUSH
10914: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
10918: LD_STRING ACH_E
10920: PPUSH
10921: LD_REAL  5.00000000000000E-0001
10924: PPUSH
10925: CALL_OW 564
// end ; [ 2 , 3 ] :
10929: GO 11012
10931: LD_INT 2
10933: PUSH
10934: LD_INT 3
10936: PUSH
10937: EMPTY
10938: LIST
10939: LIST
10940: DOUBLE
10941: EQUAL
10942: IFTRUE 10946
10944: GO 10971
10946: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
10947: LD_STRING ACH_OOL
10949: PPUSH
10950: LD_REAL  5.00000000000000E-0001
10953: PPUSH
10954: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
10958: LD_STRING ACH_E
10960: PPUSH
10961: LD_REAL  5.00000000000000E-0001
10964: PPUSH
10965: CALL_OW 564
// end ; [ 3 , 1 ] :
10969: GO 11012
10971: LD_INT 3
10973: PUSH
10974: LD_INT 1
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: DOUBLE
10981: EQUAL
10982: IFTRUE 10986
10984: GO 11011
10986: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
10987: LD_STRING ACH_AH
10989: PPUSH
10990: LD_REAL  5.00000000000000E-0001
10993: PPUSH
10994: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
10998: LD_STRING ACH_OOL
11000: PPUSH
11001: LD_REAL  5.00000000000000E-0001
11004: PPUSH
11005: CALL_OW 564
// end ; end ;
11009: GO 11012
11011: POP
// end ; end_of_file
11012: LD_VAR 0 2
11016: RET
// export function SetMpTechs ( ) ; var side , i ; begin
11017: LD_INT 0
11019: PPUSH
11020: PPUSH
11021: PPUSH
// for side = 1 to 8 do
11022: LD_ADDR_VAR 0 2
11026: PUSH
11027: DOUBLE
11028: LD_INT 1
11030: DEC
11031: ST_TO_ADDR
11032: LD_INT 8
11034: PUSH
11035: FOR_TO
11036: IFFALSE 11157
// begin for i = 1 to 72 do
11038: LD_ADDR_VAR 0 3
11042: PUSH
11043: DOUBLE
11044: LD_INT 1
11046: DEC
11047: ST_TO_ADDR
11048: LD_INT 72
11050: PUSH
11051: FOR_TO
11052: IFFALSE 11083
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
11054: LD_VAR 0 3
11058: PPUSH
11059: LD_VAR 0 2
11063: PPUSH
11064: LD_INT 0
11066: PPUSH
11067: LD_VAR 0 3
11071: PPUSH
11072: CALL_OW 565
11076: PPUSH
11077: CALL_OW 322
11081: GO 11051
11083: POP
11084: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
11085: LD_INT 73
11087: PPUSH
11088: LD_VAR 0 2
11092: PPUSH
11093: LD_INT 0
11095: PPUSH
11096: LD_INT 25
11098: PPUSH
11099: CALL_OW 565
11103: PPUSH
11104: CALL_OW 322
// for i = 0 to 40 do
11108: LD_ADDR_VAR 0 3
11112: PUSH
11113: DOUBLE
11114: LD_INT 0
11116: DEC
11117: ST_TO_ADDR
11118: LD_INT 40
11120: PUSH
11121: FOR_TO
11122: IFFALSE 11153
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
11124: LD_VAR 0 3
11128: PPUSH
11129: LD_VAR 0 2
11133: PPUSH
11134: LD_INT 1
11136: PPUSH
11137: LD_VAR 0 3
11141: PPUSH
11142: CALL_OW 565
11146: PPUSH
11147: CALL_OW 324
11151: GO 11121
11153: POP
11154: POP
// end ;
11155: GO 11035
11157: POP
11158: POP
// end ;
11159: LD_VAR 0 1
11163: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
11164: LD_INT 0
11166: PPUSH
11167: PPUSH
11168: PPUSH
// for side = 1 to 8 do
11169: LD_ADDR_VAR 0 3
11173: PUSH
11174: DOUBLE
11175: LD_INT 1
11177: DEC
11178: ST_TO_ADDR
11179: LD_INT 8
11181: PUSH
11182: FOR_TO
11183: IFFALSE 15179
// begin for i = 1 to 73 do
11185: LD_ADDR_VAR 0 4
11189: PUSH
11190: DOUBLE
11191: LD_INT 1
11193: DEC
11194: ST_TO_ADDR
11195: LD_INT 73
11197: PUSH
11198: FOR_TO
11199: IFFALSE 11220
// SetTech ( i , side , state_disabled ) ;
11201: LD_VAR 0 4
11205: PPUSH
11206: LD_VAR 0 3
11210: PPUSH
11211: LD_INT 0
11213: PPUSH
11214: CALL_OW 322
11218: GO 11198
11220: POP
11221: POP
// for i = 0 to 40 do
11222: LD_ADDR_VAR 0 4
11226: PUSH
11227: DOUBLE
11228: LD_INT 0
11230: DEC
11231: ST_TO_ADDR
11232: LD_INT 40
11234: PUSH
11235: FOR_TO
11236: IFFALSE 11257
// SetRestrict ( i , side , false ) ;
11238: LD_VAR 0 4
11242: PPUSH
11243: LD_VAR 0 3
11247: PPUSH
11248: LD_INT 0
11250: PPUSH
11251: CALL_OW 324
11255: GO 11235
11257: POP
11258: POP
// case level of 1 :
11259: LD_VAR 0 1
11263: PUSH
11264: LD_INT 1
11266: DOUBLE
11267: EQUAL
11268: IFTRUE 11272
11270: GO 11425
11272: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11273: LD_INT 35
11275: PPUSH
11276: LD_VAR 0 3
11280: PPUSH
11281: LD_INT 1
11283: PPUSH
11284: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11288: LD_INT 45
11290: PPUSH
11291: LD_VAR 0 3
11295: PPUSH
11296: LD_INT 1
11298: PPUSH
11299: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11303: LD_INT 46
11305: PPUSH
11306: LD_VAR 0 3
11310: PPUSH
11311: LD_INT 1
11313: PPUSH
11314: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11318: LD_INT 47
11320: PPUSH
11321: LD_VAR 0 3
11325: PPUSH
11326: LD_INT 1
11328: PPUSH
11329: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11333: LD_INT 0
11335: PPUSH
11336: LD_VAR 0 3
11340: PPUSH
11341: LD_INT 1
11343: PPUSH
11344: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11348: LD_INT 2
11350: PPUSH
11351: LD_VAR 0 3
11355: PPUSH
11356: LD_INT 1
11358: PPUSH
11359: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11363: LD_INT 4
11365: PPUSH
11366: LD_VAR 0 3
11370: PPUSH
11371: LD_INT 1
11373: PPUSH
11374: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11378: LD_INT 6
11380: PPUSH
11381: LD_VAR 0 3
11385: PPUSH
11386: LD_INT 1
11388: PPUSH
11389: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11393: LD_INT 29
11395: PPUSH
11396: LD_VAR 0 3
11400: PPUSH
11401: LD_INT 1
11403: PPUSH
11404: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11408: LD_INT 31
11410: PPUSH
11411: LD_VAR 0 3
11415: PPUSH
11416: LD_INT 1
11418: PPUSH
11419: CALL_OW 324
// end ; 2 :
11423: GO 15177
11425: LD_INT 2
11427: DOUBLE
11428: EQUAL
11429: IFTRUE 11433
11431: GO 11631
11433: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11434: LD_INT 35
11436: PPUSH
11437: LD_VAR 0 3
11441: PPUSH
11442: LD_INT 1
11444: PPUSH
11445: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11449: LD_INT 45
11451: PPUSH
11452: LD_VAR 0 3
11456: PPUSH
11457: LD_INT 1
11459: PPUSH
11460: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11464: LD_INT 46
11466: PPUSH
11467: LD_VAR 0 3
11471: PPUSH
11472: LD_INT 1
11474: PPUSH
11475: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11479: LD_INT 47
11481: PPUSH
11482: LD_VAR 0 3
11486: PPUSH
11487: LD_INT 1
11489: PPUSH
11490: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11494: LD_INT 1
11496: PPUSH
11497: LD_VAR 0 3
11501: PPUSH
11502: LD_INT 1
11504: PPUSH
11505: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11509: LD_INT 2
11511: PPUSH
11512: LD_VAR 0 3
11516: PPUSH
11517: LD_INT 1
11519: PPUSH
11520: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11524: LD_INT 11
11526: PPUSH
11527: LD_VAR 0 3
11531: PPUSH
11532: LD_INT 1
11534: PPUSH
11535: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11539: LD_INT 0
11541: PPUSH
11542: LD_VAR 0 3
11546: PPUSH
11547: LD_INT 1
11549: PPUSH
11550: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11554: LD_INT 2
11556: PPUSH
11557: LD_VAR 0 3
11561: PPUSH
11562: LD_INT 1
11564: PPUSH
11565: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11569: LD_INT 4
11571: PPUSH
11572: LD_VAR 0 3
11576: PPUSH
11577: LD_INT 1
11579: PPUSH
11580: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11584: LD_INT 6
11586: PPUSH
11587: LD_VAR 0 3
11591: PPUSH
11592: LD_INT 1
11594: PPUSH
11595: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11599: LD_INT 29
11601: PPUSH
11602: LD_VAR 0 3
11606: PPUSH
11607: LD_INT 1
11609: PPUSH
11610: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11614: LD_INT 31
11616: PPUSH
11617: LD_VAR 0 3
11621: PPUSH
11622: LD_INT 1
11624: PPUSH
11625: CALL_OW 324
// end ; 3 :
11629: GO 15177
11631: LD_INT 3
11633: DOUBLE
11634: EQUAL
11635: IFTRUE 11639
11637: GO 12092
11639: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11640: LD_INT 35
11642: PPUSH
11643: LD_VAR 0 3
11647: PPUSH
11648: LD_INT 1
11650: PPUSH
11651: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11655: LD_INT 45
11657: PPUSH
11658: LD_VAR 0 3
11662: PPUSH
11663: LD_INT 1
11665: PPUSH
11666: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11670: LD_INT 46
11672: PPUSH
11673: LD_VAR 0 3
11677: PPUSH
11678: LD_INT 1
11680: PPUSH
11681: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11685: LD_INT 47
11687: PPUSH
11688: LD_VAR 0 3
11692: PPUSH
11693: LD_INT 1
11695: PPUSH
11696: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11700: LD_INT 1
11702: PPUSH
11703: LD_VAR 0 3
11707: PPUSH
11708: LD_INT 1
11710: PPUSH
11711: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11715: LD_INT 2
11717: PPUSH
11718: LD_VAR 0 3
11722: PPUSH
11723: LD_INT 1
11725: PPUSH
11726: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11730: LD_INT 11
11732: PPUSH
11733: LD_VAR 0 3
11737: PPUSH
11738: LD_INT 1
11740: PPUSH
11741: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11745: LD_INT 48
11747: PPUSH
11748: LD_VAR 0 3
11752: PPUSH
11753: LD_INT 1
11755: PPUSH
11756: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11760: LD_INT 69
11762: PPUSH
11763: LD_VAR 0 3
11767: PPUSH
11768: LD_INT 1
11770: PPUSH
11771: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11775: LD_INT 39
11777: PPUSH
11778: LD_VAR 0 3
11782: PPUSH
11783: LD_INT 1
11785: PPUSH
11786: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11790: LD_INT 43
11792: PPUSH
11793: LD_VAR 0 3
11797: PPUSH
11798: LD_INT 1
11800: PPUSH
11801: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11805: LD_INT 51
11807: PPUSH
11808: LD_VAR 0 3
11812: PPUSH
11813: LD_INT 1
11815: PPUSH
11816: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11820: LD_INT 6
11822: PPUSH
11823: LD_VAR 0 3
11827: PPUSH
11828: LD_INT 1
11830: PPUSH
11831: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11835: LD_INT 0
11837: PPUSH
11838: LD_VAR 0 3
11842: PPUSH
11843: LD_INT 1
11845: PPUSH
11846: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11850: LD_INT 2
11852: PPUSH
11853: LD_VAR 0 3
11857: PPUSH
11858: LD_INT 1
11860: PPUSH
11861: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11865: LD_INT 3
11867: PPUSH
11868: LD_VAR 0 3
11872: PPUSH
11873: LD_INT 1
11875: PPUSH
11876: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11880: LD_INT 4
11882: PPUSH
11883: LD_VAR 0 3
11887: PPUSH
11888: LD_INT 1
11890: PPUSH
11891: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11895: LD_INT 6
11897: PPUSH
11898: LD_VAR 0 3
11902: PPUSH
11903: LD_INT 1
11905: PPUSH
11906: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11910: LD_INT 7
11912: PPUSH
11913: LD_VAR 0 3
11917: PPUSH
11918: LD_INT 1
11920: PPUSH
11921: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11925: LD_INT 8
11927: PPUSH
11928: LD_VAR 0 3
11932: PPUSH
11933: LD_INT 1
11935: PPUSH
11936: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11940: LD_INT 10
11942: PPUSH
11943: LD_VAR 0 3
11947: PPUSH
11948: LD_INT 1
11950: PPUSH
11951: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11955: LD_INT 15
11957: PPUSH
11958: LD_VAR 0 3
11962: PPUSH
11963: LD_INT 1
11965: PPUSH
11966: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11970: LD_INT 16
11972: PPUSH
11973: LD_VAR 0 3
11977: PPUSH
11978: LD_INT 1
11980: PPUSH
11981: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11985: LD_INT 17
11987: PPUSH
11988: LD_VAR 0 3
11992: PPUSH
11993: LD_INT 1
11995: PPUSH
11996: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12000: LD_INT 20
12002: PPUSH
12003: LD_VAR 0 3
12007: PPUSH
12008: LD_INT 1
12010: PPUSH
12011: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12015: LD_INT 26
12017: PPUSH
12018: LD_VAR 0 3
12022: PPUSH
12023: LD_INT 1
12025: PPUSH
12026: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12030: LD_INT 27
12032: PPUSH
12033: LD_VAR 0 3
12037: PPUSH
12038: LD_INT 1
12040: PPUSH
12041: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12045: LD_INT 29
12047: PPUSH
12048: LD_VAR 0 3
12052: PPUSH
12053: LD_INT 1
12055: PPUSH
12056: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12060: LD_INT 31
12062: PPUSH
12063: LD_VAR 0 3
12067: PPUSH
12068: LD_INT 1
12070: PPUSH
12071: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12075: LD_INT 32
12077: PPUSH
12078: LD_VAR 0 3
12082: PPUSH
12083: LD_INT 1
12085: PPUSH
12086: CALL_OW 324
// end ; 4 :
12090: GO 15177
12092: LD_INT 4
12094: DOUBLE
12095: EQUAL
12096: IFTRUE 12100
12098: GO 13048
12100: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12101: LD_INT 35
12103: PPUSH
12104: LD_VAR 0 3
12108: PPUSH
12109: LD_INT 1
12111: PPUSH
12112: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12116: LD_INT 45
12118: PPUSH
12119: LD_VAR 0 3
12123: PPUSH
12124: LD_INT 1
12126: PPUSH
12127: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12131: LD_INT 46
12133: PPUSH
12134: LD_VAR 0 3
12138: PPUSH
12139: LD_INT 1
12141: PPUSH
12142: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12146: LD_INT 47
12148: PPUSH
12149: LD_VAR 0 3
12153: PPUSH
12154: LD_INT 1
12156: PPUSH
12157: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12161: LD_INT 1
12163: PPUSH
12164: LD_VAR 0 3
12168: PPUSH
12169: LD_INT 1
12171: PPUSH
12172: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12176: LD_INT 2
12178: PPUSH
12179: LD_VAR 0 3
12183: PPUSH
12184: LD_INT 1
12186: PPUSH
12187: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12191: LD_INT 11
12193: PPUSH
12194: LD_VAR 0 3
12198: PPUSH
12199: LD_INT 1
12201: PPUSH
12202: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12206: LD_INT 20
12208: PPUSH
12209: LD_VAR 0 3
12213: PPUSH
12214: LD_INT 1
12216: PPUSH
12217: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12221: LD_INT 48
12223: PPUSH
12224: LD_VAR 0 3
12228: PPUSH
12229: LD_INT 1
12231: PPUSH
12232: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12236: LD_INT 49
12238: PPUSH
12239: LD_VAR 0 3
12243: PPUSH
12244: LD_INT 1
12246: PPUSH
12247: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12251: LD_INT 69
12253: PPUSH
12254: LD_VAR 0 3
12258: PPUSH
12259: LD_INT 1
12261: PPUSH
12262: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12266: LD_INT 39
12268: PPUSH
12269: LD_VAR 0 3
12273: PPUSH
12274: LD_INT 1
12276: PPUSH
12277: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12281: LD_INT 34
12283: PPUSH
12284: LD_VAR 0 3
12288: PPUSH
12289: LD_INT 1
12291: PPUSH
12292: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12296: LD_INT 42
12298: PPUSH
12299: LD_VAR 0 3
12303: PPUSH
12304: LD_INT 1
12306: PPUSH
12307: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12311: LD_INT 44
12313: PPUSH
12314: LD_VAR 0 3
12318: PPUSH
12319: LD_INT 1
12321: PPUSH
12322: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12326: LD_INT 41
12328: PPUSH
12329: LD_VAR 0 3
12333: PPUSH
12334: LD_INT 1
12336: PPUSH
12337: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12341: LD_INT 43
12343: PPUSH
12344: LD_VAR 0 3
12348: PPUSH
12349: LD_INT 1
12351: PPUSH
12352: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12356: LD_INT 70
12358: PPUSH
12359: LD_VAR 0 3
12363: PPUSH
12364: LD_INT 1
12366: PPUSH
12367: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12371: LD_INT 51
12373: PPUSH
12374: LD_VAR 0 3
12378: PPUSH
12379: LD_INT 1
12381: PPUSH
12382: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12386: LD_INT 52
12388: PPUSH
12389: LD_VAR 0 3
12393: PPUSH
12394: LD_INT 1
12396: PPUSH
12397: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12401: LD_INT 6
12403: PPUSH
12404: LD_VAR 0 3
12408: PPUSH
12409: LD_INT 1
12411: PPUSH
12412: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12416: LD_INT 15
12418: PPUSH
12419: LD_VAR 0 3
12423: PPUSH
12424: LD_INT 1
12426: PPUSH
12427: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12431: LD_INT 7
12433: PPUSH
12434: LD_VAR 0 3
12438: PPUSH
12439: LD_INT 1
12441: PPUSH
12442: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12446: LD_INT 12
12448: PPUSH
12449: LD_VAR 0 3
12453: PPUSH
12454: LD_INT 1
12456: PPUSH
12457: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12461: LD_INT 18
12463: PPUSH
12464: LD_VAR 0 3
12468: PPUSH
12469: LD_INT 1
12471: PPUSH
12472: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12476: LD_INT 60
12478: PPUSH
12479: LD_VAR 0 3
12483: PPUSH
12484: LD_INT 1
12486: PPUSH
12487: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12491: LD_INT 9
12493: PPUSH
12494: LD_VAR 0 3
12498: PPUSH
12499: LD_INT 1
12501: PPUSH
12502: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12506: LD_INT 30
12508: PPUSH
12509: LD_VAR 0 3
12513: PPUSH
12514: LD_INT 1
12516: PPUSH
12517: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12521: LD_INT 37
12523: PPUSH
12524: LD_VAR 0 3
12528: PPUSH
12529: LD_INT 1
12531: PPUSH
12532: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12536: LD_INT 5
12538: PPUSH
12539: LD_VAR 0 3
12543: PPUSH
12544: LD_INT 1
12546: PPUSH
12547: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12551: LD_INT 66
12553: PPUSH
12554: LD_VAR 0 3
12558: PPUSH
12559: LD_INT 1
12561: PPUSH
12562: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12566: LD_INT 21
12568: PPUSH
12569: LD_VAR 0 3
12573: PPUSH
12574: LD_INT 1
12576: PPUSH
12577: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12581: LD_INT 22
12583: PPUSH
12584: LD_VAR 0 3
12588: PPUSH
12589: LD_INT 1
12591: PPUSH
12592: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12596: LD_INT 54
12598: PPUSH
12599: LD_VAR 0 3
12603: PPUSH
12604: LD_INT 1
12606: PPUSH
12607: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12611: LD_INT 0
12613: PPUSH
12614: LD_VAR 0 3
12618: PPUSH
12619: LD_INT 1
12621: PPUSH
12622: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12626: LD_INT 1
12628: PPUSH
12629: LD_VAR 0 3
12633: PPUSH
12634: LD_INT 1
12636: PPUSH
12637: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12641: LD_INT 2
12643: PPUSH
12644: LD_VAR 0 3
12648: PPUSH
12649: LD_INT 1
12651: PPUSH
12652: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12656: LD_INT 3
12658: PPUSH
12659: LD_VAR 0 3
12663: PPUSH
12664: LD_INT 1
12666: PPUSH
12667: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12671: LD_INT 4
12673: PPUSH
12674: LD_VAR 0 3
12678: PPUSH
12679: LD_INT 1
12681: PPUSH
12682: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12686: LD_INT 5
12688: PPUSH
12689: LD_VAR 0 3
12693: PPUSH
12694: LD_INT 1
12696: PPUSH
12697: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12701: LD_INT 6
12703: PPUSH
12704: LD_VAR 0 3
12708: PPUSH
12709: LD_INT 1
12711: PPUSH
12712: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12716: LD_INT 7
12718: PPUSH
12719: LD_VAR 0 3
12723: PPUSH
12724: LD_INT 1
12726: PPUSH
12727: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12731: LD_INT 8
12733: PPUSH
12734: LD_VAR 0 3
12738: PPUSH
12739: LD_INT 1
12741: PPUSH
12742: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12746: LD_INT 10
12748: PPUSH
12749: LD_VAR 0 3
12753: PPUSH
12754: LD_INT 1
12756: PPUSH
12757: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12761: LD_INT 11
12763: PPUSH
12764: LD_VAR 0 3
12768: PPUSH
12769: LD_INT 1
12771: PPUSH
12772: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12776: LD_INT 12
12778: PPUSH
12779: LD_VAR 0 3
12783: PPUSH
12784: LD_INT 1
12786: PPUSH
12787: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12791: LD_INT 13
12793: PPUSH
12794: LD_VAR 0 3
12798: PPUSH
12799: LD_INT 1
12801: PPUSH
12802: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12806: LD_INT 14
12808: PPUSH
12809: LD_VAR 0 3
12813: PPUSH
12814: LD_INT 1
12816: PPUSH
12817: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12821: LD_INT 15
12823: PPUSH
12824: LD_VAR 0 3
12828: PPUSH
12829: LD_INT 1
12831: PPUSH
12832: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12836: LD_INT 16
12838: PPUSH
12839: LD_VAR 0 3
12843: PPUSH
12844: LD_INT 1
12846: PPUSH
12847: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12851: LD_INT 17
12853: PPUSH
12854: LD_VAR 0 3
12858: PPUSH
12859: LD_INT 1
12861: PPUSH
12862: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12866: LD_INT 19
12868: PPUSH
12869: LD_VAR 0 3
12873: PPUSH
12874: LD_INT 1
12876: PPUSH
12877: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12881: LD_INT 20
12883: PPUSH
12884: LD_VAR 0 3
12888: PPUSH
12889: LD_INT 1
12891: PPUSH
12892: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12896: LD_INT 21
12898: PPUSH
12899: LD_VAR 0 3
12903: PPUSH
12904: LD_INT 1
12906: PPUSH
12907: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12911: LD_INT 23
12913: PPUSH
12914: LD_VAR 0 3
12918: PPUSH
12919: LD_INT 1
12921: PPUSH
12922: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12926: LD_INT 26
12928: PPUSH
12929: LD_VAR 0 3
12933: PPUSH
12934: LD_INT 1
12936: PPUSH
12937: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12941: LD_INT 27
12943: PPUSH
12944: LD_VAR 0 3
12948: PPUSH
12949: LD_INT 1
12951: PPUSH
12952: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12956: LD_INT 28
12958: PPUSH
12959: LD_VAR 0 3
12963: PPUSH
12964: LD_INT 1
12966: PPUSH
12967: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12971: LD_INT 29
12973: PPUSH
12974: LD_VAR 0 3
12978: PPUSH
12979: LD_INT 1
12981: PPUSH
12982: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12986: LD_INT 30
12988: PPUSH
12989: LD_VAR 0 3
12993: PPUSH
12994: LD_INT 1
12996: PPUSH
12997: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13001: LD_INT 31
13003: PPUSH
13004: LD_VAR 0 3
13008: PPUSH
13009: LD_INT 1
13011: PPUSH
13012: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13016: LD_INT 32
13018: PPUSH
13019: LD_VAR 0 3
13023: PPUSH
13024: LD_INT 1
13026: PPUSH
13027: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
13031: LD_INT 36
13033: PPUSH
13034: LD_VAR 0 3
13038: PPUSH
13039: LD_INT 1
13041: PPUSH
13042: CALL_OW 324
// end ; 5 :
13046: GO 15177
13048: LD_INT 5
13050: DOUBLE
13051: EQUAL
13052: IFTRUE 13056
13054: GO 14169
13056: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13057: LD_INT 35
13059: PPUSH
13060: LD_VAR 0 3
13064: PPUSH
13065: LD_INT 1
13067: PPUSH
13068: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13072: LD_INT 45
13074: PPUSH
13075: LD_VAR 0 3
13079: PPUSH
13080: LD_INT 1
13082: PPUSH
13083: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13087: LD_INT 46
13089: PPUSH
13090: LD_VAR 0 3
13094: PPUSH
13095: LD_INT 1
13097: PPUSH
13098: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13102: LD_INT 47
13104: PPUSH
13105: LD_VAR 0 3
13109: PPUSH
13110: LD_INT 1
13112: PPUSH
13113: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13117: LD_INT 1
13119: PPUSH
13120: LD_VAR 0 3
13124: PPUSH
13125: LD_INT 1
13127: PPUSH
13128: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13132: LD_INT 2
13134: PPUSH
13135: LD_VAR 0 3
13139: PPUSH
13140: LD_INT 1
13142: PPUSH
13143: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13147: LD_INT 11
13149: PPUSH
13150: LD_VAR 0 3
13154: PPUSH
13155: LD_INT 1
13157: PPUSH
13158: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13162: LD_INT 20
13164: PPUSH
13165: LD_VAR 0 3
13169: PPUSH
13170: LD_INT 1
13172: PPUSH
13173: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13177: LD_INT 48
13179: PPUSH
13180: LD_VAR 0 3
13184: PPUSH
13185: LD_INT 1
13187: PPUSH
13188: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13192: LD_INT 49
13194: PPUSH
13195: LD_VAR 0 3
13199: PPUSH
13200: LD_INT 1
13202: PPUSH
13203: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13207: LD_INT 69
13209: PPUSH
13210: LD_VAR 0 3
13214: PPUSH
13215: LD_INT 1
13217: PPUSH
13218: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13222: LD_INT 39
13224: PPUSH
13225: LD_VAR 0 3
13229: PPUSH
13230: LD_INT 1
13232: PPUSH
13233: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13237: LD_INT 34
13239: PPUSH
13240: LD_VAR 0 3
13244: PPUSH
13245: LD_INT 1
13247: PPUSH
13248: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13252: LD_INT 42
13254: PPUSH
13255: LD_VAR 0 3
13259: PPUSH
13260: LD_INT 1
13262: PPUSH
13263: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13267: LD_INT 44
13269: PPUSH
13270: LD_VAR 0 3
13274: PPUSH
13275: LD_INT 1
13277: PPUSH
13278: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13282: LD_INT 41
13284: PPUSH
13285: LD_VAR 0 3
13289: PPUSH
13290: LD_INT 1
13292: PPUSH
13293: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
13297: LD_INT 40
13299: PPUSH
13300: LD_VAR 0 3
13304: PPUSH
13305: LD_INT 1
13307: PPUSH
13308: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13312: LD_INT 43
13314: PPUSH
13315: LD_VAR 0 3
13319: PPUSH
13320: LD_INT 1
13322: PPUSH
13323: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13327: LD_INT 70
13329: PPUSH
13330: LD_VAR 0 3
13334: PPUSH
13335: LD_INT 1
13337: PPUSH
13338: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13342: LD_INT 51
13344: PPUSH
13345: LD_VAR 0 3
13349: PPUSH
13350: LD_INT 1
13352: PPUSH
13353: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13357: LD_INT 52
13359: PPUSH
13360: LD_VAR 0 3
13364: PPUSH
13365: LD_INT 1
13367: PPUSH
13368: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13372: LD_INT 6
13374: PPUSH
13375: LD_VAR 0 3
13379: PPUSH
13380: LD_INT 1
13382: PPUSH
13383: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13387: LD_INT 15
13389: PPUSH
13390: LD_VAR 0 3
13394: PPUSH
13395: LD_INT 1
13397: PPUSH
13398: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13402: LD_INT 7
13404: PPUSH
13405: LD_VAR 0 3
13409: PPUSH
13410: LD_INT 1
13412: PPUSH
13413: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13417: LD_INT 12
13419: PPUSH
13420: LD_VAR 0 3
13424: PPUSH
13425: LD_INT 1
13427: PPUSH
13428: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
13432: LD_INT 17
13434: PPUSH
13435: LD_VAR 0 3
13439: PPUSH
13440: LD_INT 1
13442: PPUSH
13443: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13447: LD_INT 18
13449: PPUSH
13450: LD_VAR 0 3
13454: PPUSH
13455: LD_INT 1
13457: PPUSH
13458: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13462: LD_INT 60
13464: PPUSH
13465: LD_VAR 0 3
13469: PPUSH
13470: LD_INT 1
13472: PPUSH
13473: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13477: LD_INT 32
13479: PPUSH
13480: LD_VAR 0 3
13484: PPUSH
13485: LD_INT 1
13487: PPUSH
13488: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13492: LD_INT 9
13494: PPUSH
13495: LD_VAR 0 3
13499: PPUSH
13500: LD_INT 1
13502: PPUSH
13503: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13507: LD_INT 57
13509: PPUSH
13510: LD_VAR 0 3
13514: PPUSH
13515: LD_INT 1
13517: PPUSH
13518: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13522: LD_INT 30
13524: PPUSH
13525: LD_VAR 0 3
13529: PPUSH
13530: LD_INT 1
13532: PPUSH
13533: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13537: LD_INT 37
13539: PPUSH
13540: LD_VAR 0 3
13544: PPUSH
13545: LD_INT 1
13547: PPUSH
13548: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13552: LD_INT 63
13554: PPUSH
13555: LD_VAR 0 3
13559: PPUSH
13560: LD_INT 1
13562: PPUSH
13563: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13567: LD_INT 3
13569: PPUSH
13570: LD_VAR 0 3
13574: PPUSH
13575: LD_INT 1
13577: PPUSH
13578: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13582: LD_INT 4
13584: PPUSH
13585: LD_VAR 0 3
13589: PPUSH
13590: LD_INT 1
13592: PPUSH
13593: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13597: LD_INT 5
13599: PPUSH
13600: LD_VAR 0 3
13604: PPUSH
13605: LD_INT 1
13607: PPUSH
13608: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13612: LD_INT 66
13614: PPUSH
13615: LD_VAR 0 3
13619: PPUSH
13620: LD_INT 1
13622: PPUSH
13623: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13627: LD_INT 21
13629: PPUSH
13630: LD_VAR 0 3
13634: PPUSH
13635: LD_INT 1
13637: PPUSH
13638: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13642: LD_INT 22
13644: PPUSH
13645: LD_VAR 0 3
13649: PPUSH
13650: LD_INT 1
13652: PPUSH
13653: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13657: LD_INT 19
13659: PPUSH
13660: LD_VAR 0 3
13664: PPUSH
13665: LD_INT 1
13667: PPUSH
13668: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13672: LD_INT 54
13674: PPUSH
13675: LD_VAR 0 3
13679: PPUSH
13680: LD_INT 1
13682: PPUSH
13683: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13687: LD_INT 55
13689: PPUSH
13690: LD_VAR 0 3
13694: PPUSH
13695: LD_INT 1
13697: PPUSH
13698: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13702: LD_INT 0
13704: PPUSH
13705: LD_VAR 0 3
13709: PPUSH
13710: LD_INT 1
13712: PPUSH
13713: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
13717: LD_INT 1
13719: PPUSH
13720: LD_VAR 0 3
13724: PPUSH
13725: LD_INT 1
13727: PPUSH
13728: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13732: LD_INT 2
13734: PPUSH
13735: LD_VAR 0 3
13739: PPUSH
13740: LD_INT 1
13742: PPUSH
13743: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
13747: LD_INT 3
13749: PPUSH
13750: LD_VAR 0 3
13754: PPUSH
13755: LD_INT 1
13757: PPUSH
13758: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13762: LD_INT 4
13764: PPUSH
13765: LD_VAR 0 3
13769: PPUSH
13770: LD_INT 1
13772: PPUSH
13773: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
13777: LD_INT 5
13779: PPUSH
13780: LD_VAR 0 3
13784: PPUSH
13785: LD_INT 1
13787: PPUSH
13788: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13792: LD_INT 6
13794: PPUSH
13795: LD_VAR 0 3
13799: PPUSH
13800: LD_INT 1
13802: PPUSH
13803: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13807: LD_INT 7
13809: PPUSH
13810: LD_VAR 0 3
13814: PPUSH
13815: LD_INT 1
13817: PPUSH
13818: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13822: LD_INT 8
13824: PPUSH
13825: LD_VAR 0 3
13829: PPUSH
13830: LD_INT 1
13832: PPUSH
13833: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13837: LD_INT 10
13839: PPUSH
13840: LD_VAR 0 3
13844: PPUSH
13845: LD_INT 1
13847: PPUSH
13848: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
13852: LD_INT 11
13854: PPUSH
13855: LD_VAR 0 3
13859: PPUSH
13860: LD_INT 1
13862: PPUSH
13863: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
13867: LD_INT 12
13869: PPUSH
13870: LD_VAR 0 3
13874: PPUSH
13875: LD_INT 1
13877: PPUSH
13878: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
13882: LD_INT 13
13884: PPUSH
13885: LD_VAR 0 3
13889: PPUSH
13890: LD_INT 1
13892: PPUSH
13893: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
13897: LD_INT 14
13899: PPUSH
13900: LD_VAR 0 3
13904: PPUSH
13905: LD_INT 1
13907: PPUSH
13908: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13912: LD_INT 15
13914: PPUSH
13915: LD_VAR 0 3
13919: PPUSH
13920: LD_INT 1
13922: PPUSH
13923: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13927: LD_INT 16
13929: PPUSH
13930: LD_VAR 0 3
13934: PPUSH
13935: LD_INT 1
13937: PPUSH
13938: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13942: LD_INT 17
13944: PPUSH
13945: LD_VAR 0 3
13949: PPUSH
13950: LD_INT 1
13952: PPUSH
13953: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
13957: LD_INT 18
13959: PPUSH
13960: LD_VAR 0 3
13964: PPUSH
13965: LD_INT 1
13967: PPUSH
13968: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
13972: LD_INT 19
13974: PPUSH
13975: LD_VAR 0 3
13979: PPUSH
13980: LD_INT 1
13982: PPUSH
13983: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13987: LD_INT 20
13989: PPUSH
13990: LD_VAR 0 3
13994: PPUSH
13995: LD_INT 1
13997: PPUSH
13998: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
14002: LD_INT 21
14004: PPUSH
14005: LD_VAR 0 3
14009: PPUSH
14010: LD_INT 1
14012: PPUSH
14013: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
14017: LD_INT 23
14019: PPUSH
14020: LD_VAR 0 3
14024: PPUSH
14025: LD_INT 1
14027: PPUSH
14028: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
14032: LD_INT 26
14034: PPUSH
14035: LD_VAR 0 3
14039: PPUSH
14040: LD_INT 1
14042: PPUSH
14043: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
14047: LD_INT 27
14049: PPUSH
14050: LD_VAR 0 3
14054: PPUSH
14055: LD_INT 1
14057: PPUSH
14058: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
14062: LD_INT 28
14064: PPUSH
14065: LD_VAR 0 3
14069: PPUSH
14070: LD_INT 1
14072: PPUSH
14073: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14077: LD_INT 29
14079: PPUSH
14080: LD_VAR 0 3
14084: PPUSH
14085: LD_INT 1
14087: PPUSH
14088: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
14092: LD_INT 30
14094: PPUSH
14095: LD_VAR 0 3
14099: PPUSH
14100: LD_INT 1
14102: PPUSH
14103: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14107: LD_INT 31
14109: PPUSH
14110: LD_VAR 0 3
14114: PPUSH
14115: LD_INT 1
14117: PPUSH
14118: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
14122: LD_INT 32
14124: PPUSH
14125: LD_VAR 0 3
14129: PPUSH
14130: LD_INT 1
14132: PPUSH
14133: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
14137: LD_INT 33
14139: PPUSH
14140: LD_VAR 0 3
14144: PPUSH
14145: LD_INT 1
14147: PPUSH
14148: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
14152: LD_INT 36
14154: PPUSH
14155: LD_VAR 0 3
14159: PPUSH
14160: LD_INT 1
14162: PPUSH
14163: CALL_OW 324
// end ; 6 :
14167: GO 15177
14169: LD_INT 6
14171: DOUBLE
14172: EQUAL
14173: IFTRUE 14177
14175: GO 15102
14177: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14178: LD_INT 35
14180: PPUSH
14181: LD_VAR 0 3
14185: PPUSH
14186: LD_INT 1
14188: PPUSH
14189: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14193: LD_INT 45
14195: PPUSH
14196: LD_VAR 0 3
14200: PPUSH
14201: LD_INT 1
14203: PPUSH
14204: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14208: LD_INT 46
14210: PPUSH
14211: LD_VAR 0 3
14215: PPUSH
14216: LD_INT 1
14218: PPUSH
14219: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14223: LD_INT 47
14225: PPUSH
14226: LD_VAR 0 3
14230: PPUSH
14231: LD_INT 1
14233: PPUSH
14234: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14238: LD_INT 1
14240: PPUSH
14241: LD_VAR 0 3
14245: PPUSH
14246: LD_INT 1
14248: PPUSH
14249: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14253: LD_INT 2
14255: PPUSH
14256: LD_VAR 0 3
14260: PPUSH
14261: LD_INT 1
14263: PPUSH
14264: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14268: LD_INT 11
14270: PPUSH
14271: LD_VAR 0 3
14275: PPUSH
14276: LD_INT 1
14278: PPUSH
14279: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
14283: LD_INT 20
14285: PPUSH
14286: LD_VAR 0 3
14290: PPUSH
14291: LD_INT 1
14293: PPUSH
14294: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14298: LD_INT 48
14300: PPUSH
14301: LD_VAR 0 3
14305: PPUSH
14306: LD_INT 1
14308: PPUSH
14309: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
14313: LD_INT 49
14315: PPUSH
14316: LD_VAR 0 3
14320: PPUSH
14321: LD_INT 1
14323: PPUSH
14324: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
14328: LD_INT 50
14330: PPUSH
14331: LD_VAR 0 3
14335: PPUSH
14336: LD_INT 1
14338: PPUSH
14339: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14343: LD_INT 69
14345: PPUSH
14346: LD_VAR 0 3
14350: PPUSH
14351: LD_INT 1
14353: PPUSH
14354: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14358: LD_INT 39
14360: PPUSH
14361: LD_VAR 0 3
14365: PPUSH
14366: LD_INT 1
14368: PPUSH
14369: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
14373: LD_INT 34
14375: PPUSH
14376: LD_VAR 0 3
14380: PPUSH
14381: LD_INT 1
14383: PPUSH
14384: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
14388: LD_INT 42
14390: PPUSH
14391: LD_VAR 0 3
14395: PPUSH
14396: LD_INT 1
14398: PPUSH
14399: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
14403: LD_INT 44
14405: PPUSH
14406: LD_VAR 0 3
14410: PPUSH
14411: LD_INT 1
14413: PPUSH
14414: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
14418: LD_INT 41
14420: PPUSH
14421: LD_VAR 0 3
14425: PPUSH
14426: LD_INT 1
14428: PPUSH
14429: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
14433: LD_INT 13
14435: PPUSH
14436: LD_VAR 0 3
14440: PPUSH
14441: LD_INT 1
14443: PPUSH
14444: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
14448: LD_INT 40
14450: PPUSH
14451: LD_VAR 0 3
14455: PPUSH
14456: LD_INT 1
14458: PPUSH
14459: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14463: LD_INT 43
14465: PPUSH
14466: LD_VAR 0 3
14470: PPUSH
14471: LD_INT 1
14473: PPUSH
14474: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
14478: LD_INT 70
14480: PPUSH
14481: LD_VAR 0 3
14485: PPUSH
14486: LD_INT 1
14488: PPUSH
14489: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
14493: LD_INT 23
14495: PPUSH
14496: LD_VAR 0 3
14500: PPUSH
14501: LD_INT 1
14503: PPUSH
14504: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14508: LD_INT 51
14510: PPUSH
14511: LD_VAR 0 3
14515: PPUSH
14516: LD_INT 1
14518: PPUSH
14519: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
14523: LD_INT 52
14525: PPUSH
14526: LD_VAR 0 3
14530: PPUSH
14531: LD_INT 1
14533: PPUSH
14534: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14538: LD_INT 6
14540: PPUSH
14541: LD_VAR 0 3
14545: PPUSH
14546: LD_INT 1
14548: PPUSH
14549: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
14553: LD_INT 15
14555: PPUSH
14556: LD_VAR 0 3
14560: PPUSH
14561: LD_INT 1
14563: PPUSH
14564: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
14568: LD_INT 7
14570: PPUSH
14571: LD_VAR 0 3
14575: PPUSH
14576: LD_INT 1
14578: PPUSH
14579: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
14583: LD_INT 12
14585: PPUSH
14586: LD_VAR 0 3
14590: PPUSH
14591: LD_INT 1
14593: PPUSH
14594: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
14598: LD_INT 10
14600: PPUSH
14601: LD_VAR 0 3
14605: PPUSH
14606: LD_INT 1
14608: PPUSH
14609: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
14613: LD_INT 17
14615: PPUSH
14616: LD_VAR 0 3
14620: PPUSH
14621: LD_INT 1
14623: PPUSH
14624: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
14628: LD_INT 18
14630: PPUSH
14631: LD_VAR 0 3
14635: PPUSH
14636: LD_INT 1
14638: PPUSH
14639: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
14643: LD_INT 60
14645: PPUSH
14646: LD_VAR 0 3
14650: PPUSH
14651: LD_INT 1
14653: PPUSH
14654: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
14658: LD_INT 61
14660: PPUSH
14661: LD_VAR 0 3
14665: PPUSH
14666: LD_INT 1
14668: PPUSH
14669: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
14673: LD_INT 32
14675: PPUSH
14676: LD_VAR 0 3
14680: PPUSH
14681: LD_INT 1
14683: PPUSH
14684: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
14688: LD_INT 27
14690: PPUSH
14691: LD_VAR 0 3
14695: PPUSH
14696: LD_INT 1
14698: PPUSH
14699: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
14703: LD_INT 36
14705: PPUSH
14706: LD_VAR 0 3
14710: PPUSH
14711: LD_INT 1
14713: PPUSH
14714: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
14718: LD_INT 33
14720: PPUSH
14721: LD_VAR 0 3
14725: PPUSH
14726: LD_INT 1
14728: PPUSH
14729: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
14733: LD_INT 9
14735: PPUSH
14736: LD_VAR 0 3
14740: PPUSH
14741: LD_INT 1
14743: PPUSH
14744: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
14748: LD_INT 38
14750: PPUSH
14751: LD_VAR 0 3
14755: PPUSH
14756: LD_INT 1
14758: PPUSH
14759: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
14763: LD_INT 57
14765: PPUSH
14766: LD_VAR 0 3
14770: PPUSH
14771: LD_INT 1
14773: PPUSH
14774: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
14778: LD_INT 58
14780: PPUSH
14781: LD_VAR 0 3
14785: PPUSH
14786: LD_INT 1
14788: PPUSH
14789: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
14793: LD_INT 28
14795: PPUSH
14796: LD_VAR 0 3
14800: PPUSH
14801: LD_INT 1
14803: PPUSH
14804: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
14808: LD_INT 29
14810: PPUSH
14811: LD_VAR 0 3
14815: PPUSH
14816: LD_INT 1
14818: PPUSH
14819: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
14823: LD_INT 30
14825: PPUSH
14826: LD_VAR 0 3
14830: PPUSH
14831: LD_INT 1
14833: PPUSH
14834: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
14838: LD_INT 37
14840: PPUSH
14841: LD_VAR 0 3
14845: PPUSH
14846: LD_INT 1
14848: PPUSH
14849: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
14853: LD_INT 63
14855: PPUSH
14856: LD_VAR 0 3
14860: PPUSH
14861: LD_INT 1
14863: PPUSH
14864: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
14868: LD_INT 64
14870: PPUSH
14871: LD_VAR 0 3
14875: PPUSH
14876: LD_INT 1
14878: PPUSH
14879: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
14883: LD_INT 3
14885: PPUSH
14886: LD_VAR 0 3
14890: PPUSH
14891: LD_INT 1
14893: PPUSH
14894: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
14898: LD_INT 4
14900: PPUSH
14901: LD_VAR 0 3
14905: PPUSH
14906: LD_INT 1
14908: PPUSH
14909: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14913: LD_INT 5
14915: PPUSH
14916: LD_VAR 0 3
14920: PPUSH
14921: LD_INT 1
14923: PPUSH
14924: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
14928: LD_INT 8
14930: PPUSH
14931: LD_VAR 0 3
14935: PPUSH
14936: LD_INT 1
14938: PPUSH
14939: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14943: LD_INT 66
14945: PPUSH
14946: LD_VAR 0 3
14950: PPUSH
14951: LD_INT 1
14953: PPUSH
14954: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
14958: LD_INT 67
14960: PPUSH
14961: LD_VAR 0 3
14965: PPUSH
14966: LD_INT 1
14968: PPUSH
14969: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14973: LD_INT 21
14975: PPUSH
14976: LD_VAR 0 3
14980: PPUSH
14981: LD_INT 1
14983: PPUSH
14984: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14988: LD_INT 22
14990: PPUSH
14991: LD_VAR 0 3
14995: PPUSH
14996: LD_INT 1
14998: PPUSH
14999: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
15003: LD_INT 19
15005: PPUSH
15006: LD_VAR 0 3
15010: PPUSH
15011: LD_INT 1
15013: PPUSH
15014: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
15018: LD_INT 26
15020: PPUSH
15021: LD_VAR 0 3
15025: PPUSH
15026: LD_INT 1
15028: PPUSH
15029: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
15033: LD_INT 54
15035: PPUSH
15036: LD_VAR 0 3
15040: PPUSH
15041: LD_INT 1
15043: PPUSH
15044: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
15048: LD_INT 55
15050: PPUSH
15051: LD_VAR 0 3
15055: PPUSH
15056: LD_INT 1
15058: PPUSH
15059: CALL_OW 322
// for i = 0 to 39 do
15063: LD_ADDR_VAR 0 4
15067: PUSH
15068: DOUBLE
15069: LD_INT 0
15071: DEC
15072: ST_TO_ADDR
15073: LD_INT 39
15075: PUSH
15076: FOR_TO
15077: IFFALSE 15098
// SetRestrict ( i , side , true ) ;
15079: LD_VAR 0 4
15083: PPUSH
15084: LD_VAR 0 3
15088: PPUSH
15089: LD_INT 1
15091: PPUSH
15092: CALL_OW 324
15096: GO 15076
15098: POP
15099: POP
// end ; else
15100: GO 15177
15102: POP
// begin for i = 1 to 73 do
15103: LD_ADDR_VAR 0 4
15107: PUSH
15108: DOUBLE
15109: LD_INT 1
15111: DEC
15112: ST_TO_ADDR
15113: LD_INT 73
15115: PUSH
15116: FOR_TO
15117: IFFALSE 15138
// SetTech ( i , side , state_enabled ) ;
15119: LD_VAR 0 4
15123: PPUSH
15124: LD_VAR 0 3
15128: PPUSH
15129: LD_INT 1
15131: PPUSH
15132: CALL_OW 322
15136: GO 15116
15138: POP
15139: POP
// for i = 0 to 39 do
15140: LD_ADDR_VAR 0 4
15144: PUSH
15145: DOUBLE
15146: LD_INT 0
15148: DEC
15149: ST_TO_ADDR
15150: LD_INT 39
15152: PUSH
15153: FOR_TO
15154: IFFALSE 15175
// SetRestrict ( i , side , true ) ;
15156: LD_VAR 0 4
15160: PPUSH
15161: LD_VAR 0 3
15165: PPUSH
15166: LD_INT 1
15168: PPUSH
15169: CALL_OW 324
15173: GO 15153
15175: POP
15176: POP
// end ; end ; end ;
15177: GO 11182
15179: POP
15180: POP
// end ; end_of_file
15181: LD_VAR 0 2
15185: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
15186: LD_INT 0
15188: PPUSH
15189: PPUSH
// enable ( 98 ) ;
15190: LD_INT 98
15192: ENABLE_MARKED
// GameEnded = false ;
15193: LD_ADDR_LOC 26
15197: PUSH
15198: LD_INT 0
15200: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
15201: LD_ADDR_LOC 25
15205: PUSH
15206: LD_INT 0
15208: PUSH
15209: LD_INT 0
15211: PUSH
15212: LD_INT 0
15214: PUSH
15215: LD_INT 0
15217: PUSH
15218: LD_INT 0
15220: PUSH
15221: LD_INT 0
15223: PUSH
15224: LD_INT 0
15226: PUSH
15227: LD_INT 0
15229: PUSH
15230: EMPTY
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: ST_TO_ADDR
// unfoged = false ;
15240: LD_ADDR_LOC 27
15244: PUSH
15245: LD_INT 0
15247: ST_TO_ADDR
// defeated_specs := [ ] ;
15248: LD_ADDR_LOC 28
15252: PUSH
15253: EMPTY
15254: ST_TO_ADDR
// for i = 1 to side_positions do
15255: LD_ADDR_VAR 0 2
15259: PUSH
15260: DOUBLE
15261: LD_INT 1
15263: DEC
15264: ST_TO_ADDR
15265: LD_EXP 19
15269: PUSH
15270: FOR_TO
15271: IFFALSE 15311
// if not side_positions [ i ] then
15273: LD_EXP 19
15277: PUSH
15278: LD_VAR 0 2
15282: ARRAY
15283: NOT
15284: IFFALSE 15309
// defeated = replace ( defeated , i , true ) ;
15286: LD_ADDR_LOC 25
15290: PUSH
15291: LD_LOC 25
15295: PPUSH
15296: LD_VAR 0 2
15300: PPUSH
15301: LD_INT 1
15303: PPUSH
15304: CALL_OW 1
15308: ST_TO_ADDR
15309: GO 15270
15311: POP
15312: POP
// end ;
15313: LD_VAR 0 1
15317: RET
// function CanWinLoose ; begin
15318: LD_INT 0
15320: PPUSH
// Result := true ;
15321: LD_ADDR_VAR 0 1
15325: PUSH
15326: LD_INT 1
15328: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
15329: CALL_OW 518
15333: PUSH
15334: CALL_OW 519
15338: PUSH
15339: LD_INT 0
15341: GREATER
15342: AND
15343: IFFALSE 15353
// Result := false ;
15345: LD_ADDR_VAR 0 1
15349: PUSH
15350: LD_INT 0
15352: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
15353: CALL_OW 531
15357: PUSH
15358: CALL_OW 519
15362: PUSH
15363: LD_INT 1
15365: GREATER
15366: AND
15367: IFFALSE 15377
// Result := false ;
15369: LD_ADDR_VAR 0 1
15373: PUSH
15374: LD_INT 0
15376: ST_TO_ADDR
// end ;
15377: LD_VAR 0 1
15381: RET
// export function HasPower ( i ) ; var k , h ; begin
15382: LD_INT 0
15384: PPUSH
15385: PPUSH
15386: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
15387: LD_VAR 0 1
15391: PPUSH
15392: CALL_OW 108
15396: NOT
15397: PUSH
15398: LD_EXP 18
15402: PUSH
15403: LD_VAR 0 1
15407: ARRAY
15408: NOT
15409: AND
15410: PUSH
15411: LD_OWVAR 4
15415: AND
15416: IFFALSE 15428
// begin result = false ;
15418: LD_ADDR_VAR 0 2
15422: PUSH
15423: LD_INT 0
15425: ST_TO_ADDR
// end else
15426: GO 15723
// case def_win_rules of 0 :
15428: LD_EXP 15
15432: PUSH
15433: LD_INT 0
15435: DOUBLE
15436: EQUAL
15437: IFTRUE 15441
15439: GO 15604
15441: POP
// if def_people_respawning then
15442: LD_EXP 49
15446: IFFALSE 15537
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
15448: LD_ADDR_VAR 0 2
15452: PUSH
15453: LD_INT 22
15455: PUSH
15456: LD_VAR 0 1
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: PUSH
15465: LD_INT 2
15467: PUSH
15468: LD_INT 21
15470: PUSH
15471: LD_INT 1
15473: PUSH
15474: EMPTY
15475: LIST
15476: LIST
15477: PUSH
15478: LD_INT 33
15480: PUSH
15481: LD_INT 3
15483: PUSH
15484: EMPTY
15485: LIST
15486: LIST
15487: PUSH
15488: LD_INT 33
15490: PUSH
15491: LD_INT 5
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: PUSH
15498: LD_INT 30
15500: PUSH
15501: LD_INT 0
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: PUSH
15508: LD_INT 30
15510: PUSH
15511: LD_INT 1
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: PPUSH
15530: CALL_OW 69
15534: ST_TO_ADDR
15535: GO 15602
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
15537: LD_ADDR_VAR 0 2
15541: PUSH
15542: LD_INT 22
15544: PUSH
15545: LD_VAR 0 1
15549: PUSH
15550: EMPTY
15551: LIST
15552: LIST
15553: PUSH
15554: LD_INT 2
15556: PUSH
15557: LD_INT 21
15559: PUSH
15560: LD_INT 1
15562: PUSH
15563: EMPTY
15564: LIST
15565: LIST
15566: PUSH
15567: LD_INT 33
15569: PUSH
15570: LD_INT 3
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PUSH
15577: LD_INT 33
15579: PUSH
15580: LD_INT 5
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PPUSH
15597: CALL_OW 69
15601: ST_TO_ADDR
15602: GO 15723
15604: LD_INT 1
15606: DOUBLE
15607: EQUAL
15608: IFTRUE 15612
15610: GO 15651
15612: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
15613: LD_ADDR_VAR 0 2
15617: PUSH
15618: LD_INT 22
15620: PUSH
15621: LD_VAR 0 1
15625: PUSH
15626: EMPTY
15627: LIST
15628: LIST
15629: PUSH
15630: LD_INT 21
15632: PUSH
15633: LD_INT 1
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: PPUSH
15644: CALL_OW 69
15648: ST_TO_ADDR
15649: GO 15723
15651: LD_INT 2
15653: DOUBLE
15654: EQUAL
15655: IFTRUE 15659
15657: GO 15722
15659: POP
// begin h = false ;
15660: LD_ADDR_VAR 0 4
15664: PUSH
15665: LD_INT 0
15667: ST_TO_ADDR
// for k in heroes [ i ] do
15668: LD_ADDR_VAR 0 3
15672: PUSH
15673: LD_EXP 29
15677: PUSH
15678: LD_VAR 0 1
15682: ARRAY
15683: PUSH
15684: FOR_IN
15685: IFFALSE 15708
// if IsLive ( k ) then
15687: LD_VAR 0 3
15691: PPUSH
15692: CALL_OW 300
15696: IFFALSE 15706
// h = true ;
15698: LD_ADDR_VAR 0 4
15702: PUSH
15703: LD_INT 1
15705: ST_TO_ADDR
15706: GO 15684
15708: POP
15709: POP
// Result := h ;
15710: LD_ADDR_VAR 0 2
15714: PUSH
15715: LD_VAR 0 4
15719: ST_TO_ADDR
// end ; end ;
15720: GO 15723
15722: POP
// end ;
15723: LD_VAR 0 2
15727: RET
// function AlliedSides ( i , j ) ; begin
15728: LD_INT 0
15730: PPUSH
// Result := false ;
15731: LD_ADDR_VAR 0 3
15735: PUSH
15736: LD_INT 0
15738: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
15739: LD_VAR 0 1
15743: PPUSH
15744: LD_VAR 0 2
15748: PPUSH
15749: CALL_OW 81
15753: PUSH
15754: LD_INT 1
15756: EQUAL
15757: PUSH
15758: LD_VAR 0 2
15762: PPUSH
15763: LD_VAR 0 1
15767: PPUSH
15768: CALL_OW 81
15772: PUSH
15773: LD_INT 1
15775: EQUAL
15776: AND
15777: PUSH
15778: LD_VAR 0 1
15782: PPUSH
15783: CALL_OW 83
15787: AND
15788: PUSH
15789: LD_VAR 0 2
15793: PPUSH
15794: CALL_OW 83
15798: AND
15799: IFFALSE 15809
// Result := true ;
15801: LD_ADDR_VAR 0 3
15805: PUSH
15806: LD_INT 1
15808: ST_TO_ADDR
// end ;
15809: LD_VAR 0 3
15813: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
15814: CALL 15318 0 0
15818: PUSH
15819: LD_LOC 26
15823: NOT
15824: AND
15825: IFFALSE 15841
15827: GO 15829
15829: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
15830: LD_ADDR_EXP 55
15834: PUSH
15835: LD_STRING #Player-Ended
15837: PUSH
15838: EMPTY
15839: LIST
15840: ST_TO_ADDR
15841: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
15842: CALL 15318 0 0
15846: PUSH
15847: LD_LOC 26
15851: AND
15852: IFFALSE 15861
15854: GO 15856
15856: DISABLE
// YouLostInMultiplayer ;
15857: CALL_OW 107
15861: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
15862: CALL 15318 0 0
15866: NOT
15867: PUSH
15868: CALL_OW 531
15872: NOT
15873: AND
15874: IFFALSE 15890
15876: GO 15878
15878: DISABLE
// WaitServerStrings = [ #server-wait ] ;
15879: LD_ADDR_EXP 55
15883: PUSH
15884: LD_STRING #server-wait
15886: PUSH
15887: EMPTY
15888: LIST
15889: ST_TO_ADDR
15890: END
// every 100 trigger IAmSpec do
15891: CALL_OW 531
15895: IFFALSE 15911
15897: GO 15899
15899: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
15900: LD_ADDR_EXP 55
15904: PUSH
15905: LD_STRING #Player-IAmSpec
15907: PUSH
15908: EMPTY
15909: LIST
15910: ST_TO_ADDR
15911: END
// every 100 trigger GameEnded and IAmSpec do
15912: LD_LOC 26
15916: PUSH
15917: CALL_OW 531
15921: AND
15922: IFFALSE 15931
15924: GO 15926
15926: DISABLE
// YouLostInMultiplayer ;
15927: CALL_OW 107
15931: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
15932: CALL 15318 0 0
15936: PUSH
15937: LD_LOC 26
15941: NOT
15942: AND
15943: IFFALSE 15959
15945: GO 15947
15947: DISABLE
// WaitServerStrings = [ $player-win ] ;
15948: LD_ADDR_EXP 55
15952: PUSH
15953: LD_STRING $player-win
15955: PUSH
15956: EMPTY
15957: LIST
15958: ST_TO_ADDR
15959: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
15960: CALL 15318 0 0
15964: PUSH
15965: LD_LOC 26
15969: AND
15970: IFFALSE 15994
15972: GO 15974
15974: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
15975: LD_EXP 20
15979: PUSH
15980: LD_OWVAR 7
15984: ARRAY
15985: PPUSH
15986: CALL 10820 0 1
// YouWinInMultiplayer ;
15990: CALL_OW 106
// end ;
15994: END
// every 100 trigger isEditor marked 401 do
15995: LD_OWVAR 84
15999: IFFALSE 16015
16001: GO 16003
16003: DISABLE
// Debug_Strings = [ You won ] ;
16004: LD_ADDR_OWVAR 48
16008: PUSH
16009: LD_STRING You won
16011: PUSH
16012: EMPTY
16013: LIST
16014: ST_TO_ADDR
16015: END
// every 100 trigger isEditor marked 400 do
16016: LD_OWVAR 84
16020: IFFALSE 16036
16022: GO 16024
16024: DISABLE
// Debug_Strings = [ You loss ] ;
16025: LD_ADDR_OWVAR 48
16029: PUSH
16030: LD_STRING You loss
16032: PUSH
16033: EMPTY
16034: LIST
16035: ST_TO_ADDR
16036: END
// every 100 marked 98 do var i , un ;
16037: GO 16039
16039: DISABLE
16040: LD_INT 0
16042: PPUSH
16043: PPUSH
// begin for i = 1 to side_positions do
16044: LD_ADDR_VAR 0 1
16048: PUSH
16049: DOUBLE
16050: LD_INT 1
16052: DEC
16053: ST_TO_ADDR
16054: LD_EXP 19
16058: PUSH
16059: FOR_TO
16060: IFFALSE 16147
// begin if side_positions [ i ] then
16062: LD_EXP 19
16066: PUSH
16067: LD_VAR 0 1
16071: ARRAY
16072: IFFALSE 16145
// if not HasPower ( i ) and not defeated [ i ] then
16074: LD_VAR 0 1
16078: PPUSH
16079: CALL 15382 0 1
16083: NOT
16084: PUSH
16085: LD_LOC 25
16089: PUSH
16090: LD_VAR 0 1
16094: ARRAY
16095: NOT
16096: AND
16097: IFFALSE 16145
// begin defeated = replace ( defeated , i , true ) ;
16099: LD_ADDR_LOC 25
16103: PUSH
16104: LD_LOC 25
16108: PPUSH
16109: LD_VAR 0 1
16113: PPUSH
16114: LD_INT 1
16116: PPUSH
16117: CALL_OW 1
16121: ST_TO_ADDR
// if i = mp_player_side then
16122: LD_VAR 0 1
16126: PUSH
16127: LD_OWVAR 7
16131: EQUAL
16132: IFFALSE 16145
// begin Multiplayer_Loose_Message ;
16134: CALL_OW 521
// SetPlayerSpectator ( ) ;
16138: CALL_OW 572
// enable ( 400 ) ;
16142: LD_INT 400
16144: ENABLE_MARKED
// end ; end ; end ;
16145: GO 16059
16147: POP
16148: POP
// DidGameEnd ;
16149: CALL 16164 0 0
// if not GameEnded then
16153: LD_LOC 26
16157: NOT
16158: IFFALSE 16161
// enable ;
16160: ENABLE
// end ;
16161: PPOPN 2
16163: END
// function DidGameEnd ; var i , k , enemy ; begin
16164: LD_INT 0
16166: PPUSH
16167: PPUSH
16168: PPUSH
16169: PPUSH
// enemy = [ ] ;
16170: LD_ADDR_VAR 0 4
16174: PUSH
16175: EMPTY
16176: ST_TO_ADDR
// for i = 1 to side_positions do
16177: LD_ADDR_VAR 0 2
16181: PUSH
16182: DOUBLE
16183: LD_INT 1
16185: DEC
16186: ST_TO_ADDR
16187: LD_EXP 19
16191: PUSH
16192: FOR_TO
16193: IFFALSE 16287
// if not defeated [ i ] then
16195: LD_LOC 25
16199: PUSH
16200: LD_VAR 0 2
16204: ARRAY
16205: NOT
16206: IFFALSE 16285
// for k = 1 to side_positions do
16208: LD_ADDR_VAR 0 3
16212: PUSH
16213: DOUBLE
16214: LD_INT 1
16216: DEC
16217: ST_TO_ADDR
16218: LD_EXP 19
16222: PUSH
16223: FOR_TO
16224: IFFALSE 16283
// if not defeated [ k ] then
16226: LD_LOC 25
16230: PUSH
16231: LD_VAR 0 3
16235: ARRAY
16236: NOT
16237: IFFALSE 16281
// if not AlliedSides ( i , k ) then
16239: LD_VAR 0 2
16243: PPUSH
16244: LD_VAR 0 3
16248: PPUSH
16249: CALL 15728 0 2
16253: NOT
16254: IFFALSE 16281
// enemy = enemy ^ [ i , k ] ;
16256: LD_ADDR_VAR 0 4
16260: PUSH
16261: LD_VAR 0 4
16265: PUSH
16266: LD_VAR 0 2
16270: PUSH
16271: LD_VAR 0 3
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: ADD
16280: ST_TO_ADDR
16281: GO 16223
16283: POP
16284: POP
16285: GO 16192
16287: POP
16288: POP
// if not enemy then
16289: LD_VAR 0 4
16293: NOT
16294: IFFALSE 16320
// begin GameEnded = true ;
16296: LD_ADDR_LOC 26
16300: PUSH
16301: LD_INT 1
16303: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
16304: LD_LOC 25
16308: PUSH
16309: LD_OWVAR 7
16313: ARRAY
16314: NOT
16315: IFFALSE 16320
// enable ( 401 ) ;
16317: LD_INT 401
16319: ENABLE_MARKED
// end ; end ;
16320: LD_VAR 0 1
16324: RET
// function unfog ; var k , friends ; begin
16325: LD_INT 0
16327: PPUSH
16328: PPUSH
16329: PPUSH
// for k = 1 to side_positions do
16330: LD_ADDR_VAR 0 2
16334: PUSH
16335: DOUBLE
16336: LD_INT 1
16338: DEC
16339: ST_TO_ADDR
16340: LD_EXP 19
16344: PUSH
16345: FOR_TO
16346: IFFALSE 16402
// if not defeated [ k ] then
16348: LD_LOC 25
16352: PUSH
16353: LD_VAR 0 2
16357: ARRAY
16358: NOT
16359: IFFALSE 16400
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
16361: LD_OWVAR 7
16365: PPUSH
16366: LD_VAR 0 2
16370: PPUSH
16371: CALL_OW 81
16375: PUSH
16376: LD_INT 1
16378: PUSH
16379: EMPTY
16380: LIST
16381: IN
16382: IFFALSE 16400
// friends = friends ^ k ;
16384: LD_ADDR_VAR 0 3
16388: PUSH
16389: LD_VAR 0 3
16393: PUSH
16394: LD_VAR 0 2
16398: ADD
16399: ST_TO_ADDR
16400: GO 16345
16402: POP
16403: POP
// if not friends then
16404: LD_VAR 0 3
16408: NOT
16409: IFFALSE 16423
// begin SetPlayerSpectator ( ) ;
16411: CALL_OW 572
// unfoged = true ;
16415: LD_ADDR_LOC 27
16419: PUSH
16420: LD_INT 1
16422: ST_TO_ADDR
// end ; end ;
16423: LD_VAR 0 1
16427: RET
// export function MakeGameEnd ; begin
16428: LD_INT 0
16430: PPUSH
// SetPlayerSpectator ( ) ;
16431: CALL_OW 572
// unfoged = true ;
16435: LD_ADDR_LOC 27
16439: PUSH
16440: LD_INT 1
16442: ST_TO_ADDR
// wait ( 0 0$5 ) ;
16443: LD_INT 175
16445: PPUSH
16446: CALL_OW 67
// GameEnded = true ;
16450: LD_ADDR_LOC 26
16454: PUSH
16455: LD_INT 1
16457: ST_TO_ADDR
// end ;
16458: LD_VAR 0 1
16462: RET
// export function GetGameEnded ; begin
16463: LD_INT 0
16465: PPUSH
// result = GameEnded ;
16466: LD_ADDR_VAR 0 1
16470: PUSH
16471: LD_LOC 26
16475: ST_TO_ADDR
// end ; end_of_file
16476: LD_VAR 0 1
16480: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
16481: LD_INT 0
16483: PPUSH
16484: PPUSH
16485: PPUSH
16486: PPUSH
16487: PPUSH
16488: PPUSH
16489: PPUSH
16490: PPUSH
16491: PPUSH
// for i := 1 to 8 do
16492: LD_ADDR_VAR 0 2
16496: PUSH
16497: DOUBLE
16498: LD_INT 1
16500: DEC
16501: ST_TO_ADDR
16502: LD_INT 8
16504: PUSH
16505: FOR_TO
16506: IFFALSE 16890
// begin if Side_Positions [ i ] then
16508: LD_EXP 19
16512: PUSH
16513: LD_VAR 0 2
16517: ARRAY
16518: IFFALSE 16888
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
16520: LD_ADDR_VAR 0 7
16524: PUSH
16525: LD_INT 22
16527: PUSH
16528: LD_VAR 0 2
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PUSH
16537: LD_INT 21
16539: PUSH
16540: LD_INT 1
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: PUSH
16547: EMPTY
16548: LIST
16549: LIST
16550: PPUSH
16551: CALL_OW 69
16555: PUSH
16556: LD_INT 0
16558: PLUS
16559: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16560: LD_ADDR_VAR 0 9
16564: PUSH
16565: LD_INT 22
16567: PUSH
16568: LD_VAR 0 2
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PUSH
16577: LD_INT 2
16579: PUSH
16580: LD_INT 30
16582: PUSH
16583: LD_INT 0
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PUSH
16590: LD_INT 30
16592: PUSH
16593: LD_INT 1
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: LIST
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: PPUSH
16609: CALL_OW 69
16613: ST_TO_ADDR
// crates := 0 ;
16614: LD_ADDR_VAR 0 4
16618: PUSH
16619: LD_INT 0
16621: ST_TO_ADDR
// oil := 0 ;
16622: LD_ADDR_VAR 0 5
16626: PUSH
16627: LD_INT 0
16629: ST_TO_ADDR
// sib := 0 ;
16630: LD_ADDR_VAR 0 6
16634: PUSH
16635: LD_INT 0
16637: ST_TO_ADDR
// if bases then
16638: LD_VAR 0 9
16642: IFFALSE 16748
// begin for j in bases do
16644: LD_ADDR_VAR 0 3
16648: PUSH
16649: LD_VAR 0 9
16653: PUSH
16654: FOR_IN
16655: IFFALSE 16746
// begin base := GetBase ( j ) ;
16657: LD_ADDR_VAR 0 8
16661: PUSH
16662: LD_VAR 0 3
16666: PPUSH
16667: CALL_OW 274
16671: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
16672: LD_ADDR_VAR 0 4
16676: PUSH
16677: LD_VAR 0 4
16681: PUSH
16682: LD_VAR 0 8
16686: PPUSH
16687: LD_INT 1
16689: PPUSH
16690: CALL_OW 275
16694: PLUS
16695: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
16696: LD_ADDR_VAR 0 5
16700: PUSH
16701: LD_VAR 0 5
16705: PUSH
16706: LD_VAR 0 8
16710: PPUSH
16711: LD_INT 2
16713: PPUSH
16714: CALL_OW 275
16718: PLUS
16719: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
16720: LD_ADDR_VAR 0 6
16724: PUSH
16725: LD_VAR 0 6
16729: PUSH
16730: LD_VAR 0 8
16734: PPUSH
16735: LD_INT 3
16737: PPUSH
16738: CALL_OW 275
16742: PLUS
16743: ST_TO_ADDR
// end ;
16744: GO 16654
16746: POP
16747: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
16748: LD_STRING setSpecText(
16750: PUSH
16751: LD_VAR 0 2
16755: STR
16756: PUSH
16757: LD_STRING ,
16759: STR
16760: PUSH
16761: LD_INT 2
16763: STR
16764: PUSH
16765: LD_STRING ,
16767: STR
16768: PUSH
16769: LD_VAR 0 4
16773: STR
16774: PUSH
16775: LD_STRING )
16777: STR
16778: PPUSH
16779: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
16783: LD_STRING setSpecText(
16785: PUSH
16786: LD_VAR 0 2
16790: STR
16791: PUSH
16792: LD_STRING ,
16794: STR
16795: PUSH
16796: LD_INT 3
16798: STR
16799: PUSH
16800: LD_STRING ,
16802: STR
16803: PUSH
16804: LD_VAR 0 5
16808: STR
16809: PUSH
16810: LD_STRING )
16812: STR
16813: PPUSH
16814: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
16818: LD_STRING setSpecText(
16820: PUSH
16821: LD_VAR 0 2
16825: STR
16826: PUSH
16827: LD_STRING ,
16829: STR
16830: PUSH
16831: LD_INT 4
16833: STR
16834: PUSH
16835: LD_STRING ,
16837: STR
16838: PUSH
16839: LD_VAR 0 6
16843: STR
16844: PUSH
16845: LD_STRING )
16847: STR
16848: PPUSH
16849: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
16853: LD_STRING setSpecText(
16855: PUSH
16856: LD_VAR 0 2
16860: STR
16861: PUSH
16862: LD_STRING ,
16864: STR
16865: PUSH
16866: LD_INT 5
16868: STR
16869: PUSH
16870: LD_STRING ,
16872: STR
16873: PUSH
16874: LD_VAR 0 7
16878: STR
16879: PUSH
16880: LD_STRING )
16882: STR
16883: PPUSH
16884: CALL_OW 559
// end ; end ;
16888: GO 16505
16890: POP
16891: POP
// end ;
16892: LD_VAR 0 1
16896: RET
// every 0 0$1 do
16897: GO 16899
16899: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
16900: LD_STRING setSpecLogoNumber(
16902: PUSH
16903: LD_INT 2
16905: STR
16906: PUSH
16907: LD_STRING ,
16909: STR
16910: PUSH
16911: LD_INT 1
16913: STR
16914: PUSH
16915: LD_STRING )
16917: STR
16918: PPUSH
16919: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
16923: LD_STRING setSpecLogoNumber(
16925: PUSH
16926: LD_INT 3
16928: STR
16929: PUSH
16930: LD_STRING ,
16932: STR
16933: PUSH
16934: LD_INT 2
16936: STR
16937: PUSH
16938: LD_STRING )
16940: STR
16941: PPUSH
16942: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
16946: LD_STRING setSpecLogoNumber(
16948: PUSH
16949: LD_INT 4
16951: STR
16952: PUSH
16953: LD_STRING ,
16955: STR
16956: PUSH
16957: LD_INT 3
16959: STR
16960: PUSH
16961: LD_STRING )
16963: STR
16964: PPUSH
16965: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
16969: LD_STRING setSpecLogoNumber(
16971: PUSH
16972: LD_INT 5
16974: STR
16975: PUSH
16976: LD_STRING ,
16978: STR
16979: PUSH
16980: LD_INT 4
16982: STR
16983: PUSH
16984: LD_STRING )
16986: STR
16987: PPUSH
16988: CALL_OW 559
// end ;
16992: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
16993: LD_INT 2
16995: PUSH
16996: LD_INT 30
16998: PUSH
16999: LD_INT 0
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: PUSH
17006: LD_INT 30
17008: PUSH
17009: LD_INT 1
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: LIST
17020: PPUSH
17021: CALL_OW 69
17025: IFFALSE 17035
17027: GO 17029
17029: DISABLE
// begin enable ;
17030: ENABLE
// UpdateSpectatorBar ;
17031: CALL 16481 0 0
// end ; end_of_file
17035: END
// var respawn , inqueue ; export function init_respawning ; begin
17036: LD_INT 0
17038: PPUSH
// respawn := Rand ( 1 , 8 ) ;
17039: LD_ADDR_LOC 29
17043: PUSH
17044: LD_INT 1
17046: PPUSH
17047: LD_INT 8
17049: PPUSH
17050: CALL_OW 12
17054: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
17055: LD_ADDR_LOC 30
17059: PUSH
17060: LD_INT 0
17062: PUSH
17063: LD_INT 0
17065: PUSH
17066: LD_INT 0
17068: PUSH
17069: LD_INT 0
17071: PUSH
17072: LD_INT 0
17074: PUSH
17075: LD_INT 0
17077: PUSH
17078: LD_INT 0
17080: PUSH
17081: LD_INT 0
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: ST_TO_ADDR
// end ;
17094: LD_VAR 0 1
17098: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
17099: GO 17101
17101: DISABLE
17102: LD_INT 0
17104: PPUSH
17105: PPUSH
17106: PPUSH
// begin if respawning_time_max = 0 then
17107: LD_EXP 11
17111: PUSH
17112: LD_INT 0
17114: EQUAL
17115: IFFALSE 17119
// exit ;
17117: GO 17527
// if respawn = 8 then
17119: LD_LOC 29
17123: PUSH
17124: LD_INT 8
17126: EQUAL
17127: IFFALSE 17139
// respawn := 1 else
17129: LD_ADDR_LOC 29
17133: PUSH
17134: LD_INT 1
17136: ST_TO_ADDR
17137: GO 17153
// respawn := respawn + 1 ;
17139: LD_ADDR_LOC 29
17143: PUSH
17144: LD_LOC 29
17148: PUSH
17149: LD_INT 1
17151: PLUS
17152: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
17153: LD_EXP 19
17157: PUSH
17158: LD_LOC 29
17162: ARRAY
17163: PUSH
17164: LD_LOC 30
17168: PUSH
17169: LD_LOC 29
17173: ARRAY
17174: NOT
17175: AND
17176: IFFALSE 17526
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
17178: LD_ADDR_VAR 0 1
17182: PUSH
17183: LD_INT 21
17185: PUSH
17186: LD_INT 1
17188: PUSH
17189: EMPTY
17190: LIST
17191: LIST
17192: PUSH
17193: LD_INT 22
17195: PUSH
17196: LD_LOC 29
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: PUSH
17205: LD_INT 3
17207: PUSH
17208: LD_INT 23
17210: PUSH
17211: LD_INT 0
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: PPUSH
17224: CALL_OW 69
17228: ST_TO_ADDR
// if n < number_of_people then
17229: LD_VAR 0 1
17233: PUSH
17234: LD_EXP 4
17238: LESS
17239: IFFALSE 17523
// begin aktresp := respawn ;
17241: LD_ADDR_VAR 0 3
17245: PUSH
17246: LD_LOC 29
17250: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
17251: LD_ADDR_LOC 30
17255: PUSH
17256: LD_LOC 30
17260: PPUSH
17261: LD_VAR 0 3
17265: PPUSH
17266: LD_INT 1
17268: PPUSH
17269: CALL_OW 1
17273: ST_TO_ADDR
// enable ;
17274: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
17275: LD_EXP 10
17279: PPUSH
17280: LD_EXP 11
17284: PPUSH
17285: CALL_OW 12
17289: PPUSH
17290: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
17294: LD_ADDR_LOC 30
17298: PUSH
17299: LD_LOC 30
17303: PPUSH
17304: LD_VAR 0 3
17308: PPUSH
17309: LD_INT 0
17311: PPUSH
17312: CALL_OW 1
17316: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
17317: LD_ADDR_VAR 0 2
17321: PUSH
17322: LD_INT 21
17324: PUSH
17325: LD_INT 3
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: PUSH
17332: LD_INT 2
17334: PUSH
17335: LD_INT 30
17337: PUSH
17338: LD_INT 0
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: PUSH
17345: LD_INT 30
17347: PUSH
17348: LD_INT 1
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: LIST
17359: PUSH
17360: LD_INT 50
17362: PUSH
17363: EMPTY
17364: LIST
17365: PUSH
17366: LD_INT 22
17368: PUSH
17369: LD_VAR 0 3
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: PPUSH
17384: CALL_OW 69
17388: ST_TO_ADDR
// if dep = 0 then
17389: LD_VAR 0 2
17393: PUSH
17394: LD_INT 0
17396: EQUAL
17397: IFFALSE 17401
// exit ;
17399: GO 17527
// hc_name :=  ;
17401: LD_ADDR_OWVAR 26
17405: PUSH
17406: LD_STRING 
17408: ST_TO_ADDR
// hc_importance := 0 ;
17409: LD_ADDR_OWVAR 32
17413: PUSH
17414: LD_INT 0
17416: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
17417: LD_INT 0
17419: PPUSH
17420: LD_INT 0
17422: PPUSH
17423: LD_EXP 5
17427: PUSH
17428: LD_INT 2
17430: DIV
17431: PPUSH
17432: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
17436: LD_ADDR_OWVAR 21
17440: PUSH
17441: LD_EXP 20
17445: PUSH
17446: LD_VAR 0 3
17450: ARRAY
17451: ST_TO_ADDR
// uc_side := aktresp ;
17452: LD_ADDR_OWVAR 20
17456: PUSH
17457: LD_VAR 0 3
17461: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
17462: LD_ADDR_VAR 0 2
17466: PUSH
17467: LD_VAR 0 2
17471: PUSH
17472: LD_INT 1
17474: PPUSH
17475: LD_VAR 0 2
17479: PPUSH
17480: CALL_OW 12
17484: ARRAY
17485: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
17486: CALL_OW 44
17490: PPUSH
17491: LD_VAR 0 2
17495: PPUSH
17496: CALL_OW 250
17500: PPUSH
17501: LD_VAR 0 2
17505: PPUSH
17506: CALL_OW 251
17510: PPUSH
17511: LD_INT 7
17513: PPUSH
17514: LD_INT 1
17516: PPUSH
17517: CALL_OW 50
// end else
17521: GO 17524
// enable ;
17523: ENABLE
// end else
17524: GO 17527
// enable ;
17526: ENABLE
// end ; end_of_file
17527: PPOPN 3
17529: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
17530: LD_INT 0
17532: PPUSH
17533: PPUSH
17534: PPUSH
// BuildUpTime_Delay = 0 ;
17535: LD_ADDR_EXP 58
17539: PUSH
17540: LD_INT 0
17542: ST_TO_ADDR
// if not def_builduptime then
17543: LD_EXP 52
17547: NOT
17548: IFFALSE 17552
// exit ;
17550: GO 17735
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
17552: LD_ADDR_EXP 58
17556: PUSH
17557: LD_INT 8400
17559: PUSH
17560: LD_INT 2100
17562: PUSH
17563: LD_EXP 52
17567: MUL
17568: PLUS
17569: ST_TO_ADDR
// BuildUpTimeActive := true ;
17570: LD_ADDR_EXP 57
17574: PUSH
17575: LD_INT 1
17577: ST_TO_ADDR
// for i := 1 to 8 do
17578: LD_ADDR_VAR 0 2
17582: PUSH
17583: DOUBLE
17584: LD_INT 1
17586: DEC
17587: ST_TO_ADDR
17588: LD_INT 8
17590: PUSH
17591: FOR_TO
17592: IFFALSE 17733
// if Side_Positions [ i ] then
17594: LD_EXP 19
17598: PUSH
17599: LD_VAR 0 2
17603: ARRAY
17604: IFFALSE 17731
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
17606: LD_EXP 56
17610: PUSH
17611: LD_EXP 19
17615: PUSH
17616: LD_VAR 0 2
17620: ARRAY
17621: ARRAY
17622: PPUSH
17623: LD_INT 5
17625: PPUSH
17626: CALL_OW 424
// for j := 1 to 8 do
17630: LD_ADDR_VAR 0 3
17634: PUSH
17635: DOUBLE
17636: LD_INT 1
17638: DEC
17639: ST_TO_ADDR
17640: LD_INT 8
17642: PUSH
17643: FOR_TO
17644: IFFALSE 17729
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
17646: LD_EXP 19
17650: PUSH
17651: LD_VAR 0 3
17655: ARRAY
17656: PUSH
17657: LD_EXP 16
17661: PUSH
17662: LD_VAR 0 2
17666: ARRAY
17667: PUSH
17668: LD_EXP 16
17672: PUSH
17673: LD_VAR 0 3
17677: ARRAY
17678: NONEQUAL
17679: PUSH
17680: LD_EXP 21
17684: NOT
17685: PUSH
17686: LD_VAR 0 2
17690: PUSH
17691: LD_VAR 0 3
17695: NONEQUAL
17696: AND
17697: OR
17698: AND
17699: IFFALSE 17727
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
17701: LD_VAR 0 3
17705: PPUSH
17706: LD_EXP 56
17710: PUSH
17711: LD_EXP 19
17715: PUSH
17716: LD_VAR 0 2
17720: ARRAY
17721: ARRAY
17722: PPUSH
17723: CALL_OW 333
17727: GO 17643
17729: POP
17730: POP
// end ;
17731: GO 17591
17733: POP
17734: POP
// end ;
17735: LD_VAR 0 1
17739: RET
// export function EndBuildUp ; var i , j ; begin
17740: LD_INT 0
17742: PPUSH
17743: PPUSH
17744: PPUSH
// BuildUpTimeActive := false ;
17745: LD_ADDR_EXP 57
17749: PUSH
17750: LD_INT 0
17752: ST_TO_ADDR
// for i := 1 to 8 do
17753: LD_ADDR_VAR 0 2
17757: PUSH
17758: DOUBLE
17759: LD_INT 1
17761: DEC
17762: ST_TO_ADDR
17763: LD_INT 8
17765: PUSH
17766: FOR_TO
17767: IFFALSE 17908
// if Side_Positions [ i ] then
17769: LD_EXP 19
17773: PUSH
17774: LD_VAR 0 2
17778: ARRAY
17779: IFFALSE 17906
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
17781: LD_EXP 56
17785: PUSH
17786: LD_EXP 19
17790: PUSH
17791: LD_VAR 0 2
17795: ARRAY
17796: ARRAY
17797: PPUSH
17798: LD_INT 0
17800: PPUSH
17801: CALL_OW 424
// for j := 1 to 8 do
17805: LD_ADDR_VAR 0 3
17809: PUSH
17810: DOUBLE
17811: LD_INT 1
17813: DEC
17814: ST_TO_ADDR
17815: LD_INT 8
17817: PUSH
17818: FOR_TO
17819: IFFALSE 17904
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
17821: LD_EXP 19
17825: PUSH
17826: LD_VAR 0 3
17830: ARRAY
17831: PUSH
17832: LD_EXP 16
17836: PUSH
17837: LD_VAR 0 2
17841: ARRAY
17842: PUSH
17843: LD_EXP 16
17847: PUSH
17848: LD_VAR 0 3
17852: ARRAY
17853: NONEQUAL
17854: PUSH
17855: LD_EXP 21
17859: NOT
17860: PUSH
17861: LD_VAR 0 2
17865: PUSH
17866: LD_VAR 0 3
17870: NONEQUAL
17871: AND
17872: OR
17873: AND
17874: IFFALSE 17902
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
17876: LD_VAR 0 3
17880: PPUSH
17881: LD_EXP 56
17885: PUSH
17886: LD_EXP 19
17890: PUSH
17891: LD_VAR 0 2
17895: ARRAY
17896: ARRAY
17897: PPUSH
17898: CALL_OW 334
17902: GO 17818
17904: POP
17905: POP
// end ;
17906: GO 17766
17908: POP
17909: POP
// end ;
17910: LD_VAR 0 1
17914: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
17915: LD_EXP 57
17919: IFFALSE 18094
17921: GO 17923
17923: DISABLE
17924: LD_INT 0
17926: PPUSH
17927: PPUSH
// begin for i := 1 to 8 do
17928: LD_ADDR_VAR 0 1
17932: PUSH
17933: DOUBLE
17934: LD_INT 1
17936: DEC
17937: ST_TO_ADDR
17938: LD_INT 8
17940: PUSH
17941: FOR_TO
17942: IFFALSE 18091
// if Side_Positions [ i ] then
17944: LD_EXP 19
17948: PUSH
17949: LD_VAR 0 1
17953: ARRAY
17954: IFFALSE 18089
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
17956: LD_ADDR_VAR 0 2
17960: PUSH
17961: LD_EXP 56
17965: PUSH
17966: LD_EXP 19
17970: PUSH
17971: LD_VAR 0 1
17975: ARRAY
17976: ARRAY
17977: PPUSH
17978: LD_INT 2
17980: PUSH
17981: LD_INT 21
17983: PUSH
17984: LD_INT 1
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: LD_INT 21
17993: PUSH
17994: LD_INT 2
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: LIST
18005: PUSH
18006: LD_INT 22
18008: PUSH
18009: LD_OWVAR 2
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: PPUSH
18022: CALL_OW 70
18026: PUSH
18027: FOR_IN
18028: IFFALSE 18087
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
18030: LD_EXP 16
18034: PUSH
18035: LD_VAR 0 1
18039: ARRAY
18040: PUSH
18041: LD_EXP 16
18045: PUSH
18046: LD_OWVAR 2
18050: ARRAY
18051: NONEQUAL
18052: PUSH
18053: LD_EXP 21
18057: NOT
18058: PUSH
18059: LD_VAR 0 1
18063: PUSH
18064: LD_OWVAR 2
18068: NONEQUAL
18069: AND
18070: OR
18071: IFFALSE 18085
// ComMoveToArea ( un , BuildUpEscape ) ;
18073: LD_VAR 0 2
18077: PPUSH
18078: LD_INT 12
18080: PPUSH
18081: CALL_OW 113
18085: GO 18027
18087: POP
18088: POP
18089: GO 17941
18091: POP
18092: POP
// enable ;
18093: ENABLE
// end ;
18094: PPOPN 2
18096: END
// every 0 0$1 trigger def_builduptime do
18097: LD_EXP 52
18101: IFFALSE 18127
18103: GO 18105
18105: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
18106: LD_INT 8400
18108: PUSH
18109: LD_EXP 52
18113: PUSH
18114: LD_INT 2100
18116: MUL
18117: PLUS
18118: PPUSH
18119: CALL_OW 67
// EndBuildUp ;
18123: CALL 17740 0 0
// end ;
18127: END
