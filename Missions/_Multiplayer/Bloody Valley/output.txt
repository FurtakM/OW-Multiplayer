// export def_tree_function ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , respawning_time_min , respawning_time_max , siberite_bomb_Delay , amount_of_apemen , tree_function , def_win_rules , buildUpTime_Delay ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export Position_Sides ; export depot_def , breastworks_def , start_def , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 141
// begin Your_Side := mp_player_side ;
  79: LD_ADDR_OWVAR 2
  83: PUSH
  84: LD_OWVAR 7
  88: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  89: LD_ADDR_EXP 20
  93: PUSH
  94: LD_OWVAR 17
  98: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  99: LD_ADDR_EXP 17
 103: PUSH
 104: LD_OWVAR 15
 108: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 109: LD_ADDR_EXP 21
 113: PUSH
 114: LD_OWVAR 16
 118: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 119: LD_ADDR_EXP 19
 123: PUSH
 124: CALL 0 0 0
 128: ST_TO_ADDR
// Teams := mp_teams ;
 129: LD_ADDR_EXP 18
 133: PUSH
 134: LD_OWVAR 12
 138: ST_TO_ADDR
// end else
 139: GO 334
// begin Your_Side := 1 ;
 141: LD_ADDR_OWVAR 2
 145: PUSH
 146: LD_INT 1
 148: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 149: LD_ADDR_EXP 20
 153: PUSH
 154: LD_INT 1
 156: PUSH
 157: LD_INT 2
 159: PUSH
 160: LD_INT 3
 162: PUSH
 163: LD_INT 4
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 188: LD_ADDR_EXP 17
 192: PUSH
 193: LD_INT 1
 195: PUSH
 196: LD_INT 1
 198: PUSH
 199: LD_INT 2
 201: PUSH
 202: LD_INT 2
 204: PUSH
 205: LD_INT 0
 207: PUSH
 208: LD_INT 0
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 0 , 0 , 0 , 0 ] ;
 227: LD_ADDR_EXP 21
 231: PUSH
 232: LD_INT 1
 234: PUSH
 235: LD_INT 2
 237: PUSH
 238: LD_INT 3
 240: PUSH
 241: LD_INT 1
 243: PUSH
 244: LD_INT 0
 246: PUSH
 247: LD_INT 0
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 0
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: LIST
 264: LIST
 265: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 266: LD_ADDR_EXP 19
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: LD_INT 0
 279: PUSH
 280: LD_INT 0
 282: PUSH
 283: LD_INT 0
 285: PUSH
 286: LD_INT 0
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: LIST
 299: LIST
 300: LIST
 301: LIST
 302: LIST
 303: LIST
 304: ST_TO_ADDR
// Teams := [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 305: LD_ADDR_EXP 18
 309: PUSH
 310: LD_INT 1
 312: PUSH
 313: LD_INT 2
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: LD_INT 3
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: ST_TO_ADDR
// end ; for i := 1 to 8 do
 334: LD_ADDR_VAR 0 2
 338: PUSH
 339: DOUBLE
 340: LD_INT 1
 342: DEC
 343: ST_TO_ADDR
 344: LD_INT 8
 346: PUSH
 347: FOR_TO
 348: IFFALSE 435
// if Multiplayer_GetPlayerIsSpec ( i ) then
 350: LD_VAR 0 2
 354: PPUSH
 355: CALL_OW 530
 359: IFFALSE 433
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 361: LD_ADDR_EXP 20
 365: PUSH
 366: LD_EXP 20
 370: PPUSH
 371: LD_VAR 0 2
 375: PPUSH
 376: LD_INT 0
 378: PPUSH
 379: CALL_OW 1
 383: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 384: LD_ADDR_EXP 18
 388: PUSH
 389: LD_EXP 18
 393: PPUSH
 394: LD_EXP 17
 398: PUSH
 399: LD_VAR 0 2
 403: ARRAY
 404: PPUSH
 405: LD_EXP 18
 409: PUSH
 410: LD_EXP 17
 414: PUSH
 415: LD_VAR 0 2
 419: ARRAY
 420: ARRAY
 421: PUSH
 422: LD_VAR 0 2
 426: DIFF
 427: PPUSH
 428: CALL_OW 1
 432: ST_TO_ADDR
// end ;
 433: GO 347
 435: POP
 436: POP
// Position_Sides := [ 0 , 0 , 0 , 0 ] ;
 437: LD_ADDR_EXP 23
 441: PUSH
 442: LD_INT 0
 444: PUSH
 445: LD_INT 0
 447: PUSH
 448: LD_INT 0
 450: PUSH
 451: LD_INT 0
 453: PUSH
 454: EMPTY
 455: LIST
 456: LIST
 457: LIST
 458: LIST
 459: ST_TO_ADDR
// for i := 1 to 8 do
 460: LD_ADDR_VAR 0 2
 464: PUSH
 465: DOUBLE
 466: LD_INT 1
 468: DEC
 469: ST_TO_ADDR
 470: LD_INT 8
 472: PUSH
 473: FOR_TO
 474: IFFALSE 521
// if Side_Positions [ i ] then
 476: LD_EXP 20
 480: PUSH
 481: LD_VAR 0 2
 485: ARRAY
 486: IFFALSE 519
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 488: LD_ADDR_EXP 23
 492: PUSH
 493: LD_EXP 23
 497: PPUSH
 498: LD_EXP 20
 502: PUSH
 503: LD_VAR 0 2
 507: ARRAY
 508: PPUSH
 509: LD_VAR 0 2
 513: PPUSH
 514: CALL_OW 1
 518: ST_TO_ADDR
 519: GO 473
 521: POP
 522: POP
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 523: LD_ADDR_EXP 22
 527: PUSH
 528: LD_EXP 17
 532: PUSH
 533: LD_INT 0
 535: PUSH
 536: EMPTY
 537: LIST
 538: DIFF
 539: PUSH
 540: LD_INT 1
 542: GREATER
 543: ST_TO_ADDR
// if Multiplayer then
 544: LD_OWVAR 4
 548: IFFALSE 755
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 550: LD_ADDR_EXP 38
 554: PUSH
 555: LD_INT 0
 557: PPUSH
 558: CALL_OW 426
 562: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 563: LD_ADDR_EXP 39
 567: PUSH
 568: LD_INT 1
 570: PPUSH
 571: CALL_OW 426
 575: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 576: LD_ADDR_EXP 40
 580: PUSH
 581: LD_INT 2
 583: PPUSH
 584: CALL_OW 426
 588: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 589: LD_ADDR_EXP 41
 593: PUSH
 594: LD_INT 3
 596: PPUSH
 597: CALL_OW 426
 601: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 602: LD_ADDR_EXP 42
 606: PUSH
 607: LD_INT 4
 609: PPUSH
 610: CALL_OW 426
 614: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 615: LD_ADDR_EXP 43
 619: PUSH
 620: LD_INT 5
 622: PPUSH
 623: CALL_OW 426
 627: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 628: LD_ADDR_EXP 45
 632: PUSH
 633: LD_INT 10
 635: PPUSH
 636: CALL_OW 426
 640: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 641: LD_ADDR_EXP 46
 645: PUSH
 646: LD_INT 11
 648: PPUSH
 649: CALL_OW 426
 653: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 654: LD_ADDR_EXP 47
 658: PUSH
 659: LD_INT 12
 661: PPUSH
 662: CALL_OW 426
 666: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 13 ) ;
 667: LD_ADDR_EXP 49
 671: PUSH
 672: LD_INT 13
 674: PPUSH
 675: CALL_OW 426
 679: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 14 ) ;
 680: LD_ADDR_EXP 48
 684: PUSH
 685: LD_INT 14
 687: PPUSH
 688: CALL_OW 426
 692: ST_TO_ADDR
// def_tree_function := GetMultiplayerSetting ( 15 ) ;
 693: LD_ADDR_EXP 1
 697: PUSH
 698: LD_INT 15
 700: PPUSH
 701: CALL_OW 426
 705: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 706: LD_ADDR_EXP 50
 710: PUSH
 711: LD_INT 17
 713: PPUSH
 714: CALL_OW 426
 718: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 719: LD_ADDR_EXP 51
 723: PUSH
 724: LD_INT 20
 726: PPUSH
 727: CALL_OW 426
 731: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 732: LD_ADDR_VAR 0 3
 736: PUSH
 737: LD_INT 22
 739: PPUSH
 740: CALL_OW 426
 744: ST_TO_ADDR
// def_win_rules = 0 ;
 745: LD_ADDR_EXP 15
 749: PUSH
 750: LD_INT 0
 752: ST_TO_ADDR
// end else
 753: GO 887
// begin Randomize ;
 755: CALL_OW 10
// def_base_level := 2 ;
 759: LD_ADDR_EXP 38
 763: PUSH
 764: LD_INT 2
 766: ST_TO_ADDR
// def_amount_of_people := 1 ;
 767: LD_ADDR_EXP 39
 771: PUSH
 772: LD_INT 1
 774: ST_TO_ADDR
// def_skill_level := 1 ;
 775: LD_ADDR_EXP 40
 779: PUSH
 780: LD_INT 1
 782: ST_TO_ADDR
// def_starting_resources := 2 ;
 783: LD_ADDR_EXP 41
 787: PUSH
 788: LD_INT 2
 790: ST_TO_ADDR
// def_shipments_density := 1 ;
 791: LD_ADDR_EXP 42
 795: PUSH
 796: LD_INT 1
 798: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 799: LD_ADDR_EXP 43
 803: PUSH
 804: LD_INT 0
 806: ST_TO_ADDR
// def_shared_vision := 1 ;
 807: LD_ADDR_EXP 45
 811: PUSH
 812: LD_INT 1
 814: ST_TO_ADDR
// def_morale_flags := 1 ;
 815: LD_ADDR_EXP 46
 819: PUSH
 820: LD_INT 1
 822: ST_TO_ADDR
// def_siberite_detection := 1 ;
 823: LD_ADDR_EXP 47
 827: PUSH
 828: LD_INT 1
 830: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 831: LD_ADDR_EXP 49
 835: PUSH
 836: LD_INT 3
 838: ST_TO_ADDR
// def_people_respawning := 2 ;
 839: LD_ADDR_EXP 48
 843: PUSH
 844: LD_INT 2
 846: ST_TO_ADDR
// def_tree_function := 7 ;
 847: LD_ADDR_EXP 1
 851: PUSH
 852: LD_INT 7
 854: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 855: LD_ADDR_EXP 50
 859: PUSH
 860: LD_INT 0
 862: ST_TO_ADDR
// def_builduptime := 1 ;
 863: LD_ADDR_EXP 51
 867: PUSH
 868: LD_INT 1
 870: ST_TO_ADDR
// tech_level = 4 ;
 871: LD_ADDR_VAR 0 3
 875: PUSH
 876: LD_INT 4
 878: ST_TO_ADDR
// def_win_rules = 0 ;
 879: LD_ADDR_EXP 15
 883: PUSH
 884: LD_INT 0
 886: ST_TO_ADDR
// end ; if def_tree_function = 7 then
 887: LD_EXP 1
 891: PUSH
 892: LD_INT 7
 894: EQUAL
 895: IFFALSE 913
// def_tree_function := Rand ( 1 , 5 ) ;
 897: LD_ADDR_EXP 1
 901: PUSH
 902: LD_INT 1
 904: PPUSH
 905: LD_INT 5
 907: PPUSH
 908: CALL_OW 12
 912: ST_TO_ADDR
// InitGameRules ;
 913: CALL 7831 0 0
// if def_game_rules = 0 then
 917: LD_EXP 37
 921: PUSH
 922: LD_INT 0
 924: EQUAL
 925: IFFALSE 952
// begin if isSGUI then
 927: LD_OWVAR 83
 931: IFFALSE 939
// setMpTechs ( ) else
 933: CALL 11974 0 0
 937: GO 952
// begin SetMpTechLevel ( tech_level + 1 ) ;
 939: LD_VAR 0 3
 943: PUSH
 944: LD_INT 1
 946: PLUS
 947: PPUSH
 948: CALL 12121 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 952: LD_ADDR_EXP 2
 956: PUSH
 957: LD_INT 0
 959: PUSH
 960: LD_INT 1
 962: PUSH
 963: LD_INT 1
 965: PUSH
 966: LD_INT 1
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: LIST
 973: LIST
 974: PUSH
 975: LD_EXP 38
 979: PUSH
 980: LD_INT 1
 982: PLUS
 983: ARRAY
 984: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 , 3 ] [ def_base_level + 1 ] ;
 985: LD_ADDR_EXP 3
 989: PUSH
 990: LD_INT 0
 992: PUSH
 993: LD_INT 0
 995: PUSH
 996: LD_INT 2
 998: PUSH
 999: LD_INT 3
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: PUSH
1008: LD_EXP 38
1012: PUSH
1013: LD_INT 1
1015: PLUS
1016: ARRAY
1017: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1018: LD_ADDR_EXP 5
1022: PUSH
1023: LD_INT 2
1025: PUSH
1026: LD_INT 3
1028: PUSH
1029: LD_INT 4
1031: PUSH
1032: LD_INT 5
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: PUSH
1041: LD_EXP 40
1045: PUSH
1046: LD_INT 1
1048: PLUS
1049: ARRAY
1050: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1051: LD_ADDR_EXP 7
1055: PUSH
1056: LD_INT 0
1058: PUSH
1059: LD_INT 0
1061: PUSH
1062: LD_INT 0
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: PUSH
1070: LD_INT 30
1072: PUSH
1073: LD_INT 0
1075: PUSH
1076: LD_INT 0
1078: PUSH
1079: EMPTY
1080: LIST
1081: LIST
1082: LIST
1083: PUSH
1084: LD_INT 50
1086: PUSH
1087: LD_INT 20
1089: PUSH
1090: LD_INT 0
1092: PUSH
1093: EMPTY
1094: LIST
1095: LIST
1096: LIST
1097: PUSH
1098: LD_INT 80
1100: PUSH
1101: LD_INT 40
1103: PUSH
1104: LD_INT 20
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: LIST
1116: LIST
1117: PUSH
1118: LD_EXP 41
1122: PUSH
1123: LD_INT 1
1125: PLUS
1126: ARRAY
1127: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1128: LD_ADDR_EXP 6
1132: PUSH
1133: LD_INT 10
1135: PUSH
1136: EMPTY
1137: LIST
1138: PUSH
1139: LD_INT 7
1141: PUSH
1142: LD_INT 14
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: PUSH
1149: LD_INT 6
1151: PUSH
1152: LD_INT 12
1154: PUSH
1155: LD_INT 18
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: LIST
1162: PUSH
1163: LD_INT 5
1165: PUSH
1166: LD_INT 10
1168: PUSH
1169: LD_INT 15
1171: PUSH
1172: LD_INT 20
1174: PUSH
1175: EMPTY
1176: LIST
1177: LIST
1178: LIST
1179: LIST
1180: PUSH
1181: EMPTY
1182: LIST
1183: LIST
1184: LIST
1185: LIST
1186: PUSH
1187: LD_EXP 41
1191: PUSH
1192: LD_INT 1
1194: PLUS
1195: ARRAY
1196: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1197: LD_ADDR_EXP 4
1201: PUSH
1202: LD_EXP 39
1206: PUSH
1207: LD_INT 4
1209: PLUS
1210: ST_TO_ADDR
// shipments_density := 20 + ( def_shipments_density ) * 20 ;
1211: LD_ADDR_EXP 8
1215: PUSH
1216: LD_INT 20
1218: PUSH
1219: LD_EXP 42
1223: PUSH
1224: LD_INT 20
1226: MUL
1227: PLUS
1228: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1229: LD_ADDR_EXP 13
1233: PUSH
1234: LD_INT 0
1236: PUSH
1237: LD_INT 1
1239: PUSH
1240: LD_INT 2
1242: PUSH
1243: LD_INT 3
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: PUSH
1252: LD_EXP 49
1256: PUSH
1257: LD_INT 1
1259: PLUS
1260: ARRAY
1261: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1262: LD_ADDR_EXP 10
1266: PUSH
1267: LD_INT 0
1269: PUSH
1270: LD_INT 8400
1272: PUSH
1273: LD_INT 1750
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: LIST
1280: PUSH
1281: LD_EXP 48
1285: PUSH
1286: LD_INT 1
1288: PLUS
1289: ARRAY
1290: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1291: LD_ADDR_EXP 11
1295: PUSH
1296: LD_INT 0
1298: PUSH
1299: LD_INT 21000
1301: PUSH
1302: LD_INT 4200
1304: PUSH
1305: EMPTY
1306: LIST
1307: LIST
1308: LIST
1309: PUSH
1310: LD_EXP 48
1314: PUSH
1315: LD_INT 1
1317: PLUS
1318: ARRAY
1319: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1320: LD_ADDR_EXP 9
1324: PUSH
1325: LD_INT 1
1327: NEG
1328: PUSH
1329: LD_INT 350
1331: PUSH
1332: LD_INT 700
1334: PUSH
1335: LD_INT 1400
1337: PUSH
1338: LD_INT 0
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: PUSH
1348: LD_EXP 46
1352: PUSH
1353: LD_INT 1
1355: PLUS
1356: ARRAY
1357: ST_TO_ADDR
// battle_flags_id := [ ] ;
1358: LD_ADDR_EXP 27
1362: PUSH
1363: EMPTY
1364: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1365: LD_ADDR_EXP 12
1369: PUSH
1370: LD_INT 0
1372: PUSH
1373: LD_INT 1
1375: PUSH
1376: LD_INT 63000
1378: PUSH
1379: LD_INT 126000
1381: PUSH
1382: LD_INT 189000
1384: PUSH
1385: LD_INT 252000
1387: PUSH
1388: EMPTY
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: PUSH
1396: LD_EXP 50
1400: PUSH
1401: LD_INT 1
1403: PLUS
1404: ARRAY
1405: ST_TO_ADDR
// tree_function := [ [ 0 , 0 , 0 , 0 , 0 ] , [ 2 , 0 , 0 , 0 , 0 ] , [ 0 , 4 , 0 , 0 , 0 ] , [ 0 , 0 , 2 , 0 , 0 ] , [ 0 , 0 , 0 , 3 , 0 ] , [ 1 , 2 , 1 , 2 , 2 ] , [ 0 , 0 , 0 , 0 , 3 ] ] [ def_tree_function + 1 ] ;
1406: LD_ADDR_EXP 14
1410: PUSH
1411: LD_INT 0
1413: PUSH
1414: LD_INT 0
1416: PUSH
1417: LD_INT 0
1419: PUSH
1420: LD_INT 0
1422: PUSH
1423: LD_INT 0
1425: PUSH
1426: EMPTY
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: PUSH
1433: LD_INT 2
1435: PUSH
1436: LD_INT 0
1438: PUSH
1439: LD_INT 0
1441: PUSH
1442: LD_INT 0
1444: PUSH
1445: LD_INT 0
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: PUSH
1455: LD_INT 0
1457: PUSH
1458: LD_INT 4
1460: PUSH
1461: LD_INT 0
1463: PUSH
1464: LD_INT 0
1466: PUSH
1467: LD_INT 0
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: LIST
1474: LIST
1475: LIST
1476: PUSH
1477: LD_INT 0
1479: PUSH
1480: LD_INT 0
1482: PUSH
1483: LD_INT 2
1485: PUSH
1486: LD_INT 0
1488: PUSH
1489: LD_INT 0
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: PUSH
1499: LD_INT 0
1501: PUSH
1502: LD_INT 0
1504: PUSH
1505: LD_INT 0
1507: PUSH
1508: LD_INT 3
1510: PUSH
1511: LD_INT 0
1513: PUSH
1514: EMPTY
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: LIST
1520: PUSH
1521: LD_INT 1
1523: PUSH
1524: LD_INT 2
1526: PUSH
1527: LD_INT 1
1529: PUSH
1530: LD_INT 2
1532: PUSH
1533: LD_INT 2
1535: PUSH
1536: EMPTY
1537: LIST
1538: LIST
1539: LIST
1540: LIST
1541: LIST
1542: PUSH
1543: LD_INT 0
1545: PUSH
1546: LD_INT 0
1548: PUSH
1549: LD_INT 0
1551: PUSH
1552: LD_INT 0
1554: PUSH
1555: LD_INT 3
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: LIST
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: PUSH
1574: LD_EXP 1
1578: PUSH
1579: LD_INT 1
1581: PLUS
1582: ARRAY
1583: ST_TO_ADDR
// buildUpTime_Delay := [ 0 , 5 5$00 , 10 10$00 , 15 15$00 ] [ def_builduptime + 1 ] ;
1584: LD_ADDR_EXP 16
1588: PUSH
1589: LD_INT 0
1591: PUSH
1592: LD_INT 10500
1594: PUSH
1595: LD_INT 21000
1597: PUSH
1598: LD_INT 31500
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: PUSH
1607: LD_EXP 51
1611: PUSH
1612: LD_INT 1
1614: PLUS
1615: ARRAY
1616: ST_TO_ADDR
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] ;
1617: LD_ADDR_EXP 55
1621: PUSH
1622: LD_INT 8
1624: PUSH
1625: LD_INT 11
1627: PUSH
1628: LD_INT 9
1630: PUSH
1631: LD_INT 10
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: ST_TO_ADDR
// end ;
1640: LD_VAR 0 1
1644: RET
// function prepare_map_coordinates ; var side , dep , br1 , br2 , br3 , un , i ; begin
1645: LD_INT 0
1647: PPUSH
1648: PPUSH
1649: PPUSH
1650: PPUSH
1651: PPUSH
1652: PPUSH
1653: PPUSH
1654: PPUSH
// depot_def = [ ] ;
1655: LD_ADDR_EXP 24
1659: PUSH
1660: EMPTY
1661: ST_TO_ADDR
// breastworks_def = [ ] ;
1662: LD_ADDR_EXP 25
1666: PUSH
1667: EMPTY
1668: ST_TO_ADDR
// for side := 1 to 4 do
1669: LD_ADDR_VAR 0 2
1673: PUSH
1674: DOUBLE
1675: LD_INT 1
1677: DEC
1678: ST_TO_ADDR
1679: LD_INT 4
1681: PUSH
1682: FOR_TO
1683: IFFALSE 2038
// begin dep := side * 4 - 3 ;
1685: LD_ADDR_VAR 0 3
1689: PUSH
1690: LD_VAR 0 2
1694: PUSH
1695: LD_INT 4
1697: MUL
1698: PUSH
1699: LD_INT 3
1701: MINUS
1702: ST_TO_ADDR
// br1 := side * 4 - 2 ;
1703: LD_ADDR_VAR 0 4
1707: PUSH
1708: LD_VAR 0 2
1712: PUSH
1713: LD_INT 4
1715: MUL
1716: PUSH
1717: LD_INT 2
1719: MINUS
1720: ST_TO_ADDR
// br2 := side * 4 - 1 ;
1721: LD_ADDR_VAR 0 5
1725: PUSH
1726: LD_VAR 0 2
1730: PUSH
1731: LD_INT 4
1733: MUL
1734: PUSH
1735: LD_INT 1
1737: MINUS
1738: ST_TO_ADDR
// br3 := side * 4 ;
1739: LD_ADDR_VAR 0 6
1743: PUSH
1744: LD_VAR 0 2
1748: PUSH
1749: LD_INT 4
1751: MUL
1752: ST_TO_ADDR
// depot_def := depot_def ^ [ [ GetX ( dep ) , GetY ( dep ) , GetDir ( dep ) ] ] ;
1753: LD_ADDR_EXP 24
1757: PUSH
1758: LD_EXP 24
1762: PUSH
1763: LD_VAR 0 3
1767: PPUSH
1768: CALL_OW 250
1772: PUSH
1773: LD_VAR 0 3
1777: PPUSH
1778: CALL_OW 251
1782: PUSH
1783: LD_VAR 0 3
1787: PPUSH
1788: CALL_OW 254
1792: PUSH
1793: EMPTY
1794: LIST
1795: LIST
1796: LIST
1797: PUSH
1798: EMPTY
1799: LIST
1800: ADD
1801: ST_TO_ADDR
// start_def := start_def ^ [ [ ShiftX ( GetX ( Dep ) , GetDir ( Dep ) , 6 ) , ShiftY ( GetY ( Dep ) , GetDir ( Dep ) , 6 ) ] ] ;
1802: LD_ADDR_EXP 26
1806: PUSH
1807: LD_EXP 26
1811: PUSH
1812: LD_VAR 0 3
1816: PPUSH
1817: CALL_OW 250
1821: PPUSH
1822: LD_VAR 0 3
1826: PPUSH
1827: CALL_OW 254
1831: PPUSH
1832: LD_INT 6
1834: PPUSH
1835: CALL_OW 272
1839: PUSH
1840: LD_VAR 0 3
1844: PPUSH
1845: CALL_OW 251
1849: PPUSH
1850: LD_VAR 0 3
1854: PPUSH
1855: CALL_OW 254
1859: PPUSH
1860: LD_INT 6
1862: PPUSH
1863: CALL_OW 273
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: PUSH
1872: EMPTY
1873: LIST
1874: ADD
1875: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ GetX ( br1 ) , GetY ( br1 ) , GetDir ( br1 ) ] , [ GetX ( br2 ) , GetY ( br2 ) , GetDir ( br2 ) ] , [ GetX ( br3 ) , GetY ( br3 ) , GetDir ( br3 ) ] ] ] ;
1876: LD_ADDR_EXP 25
1880: PUSH
1881: LD_EXP 25
1885: PUSH
1886: LD_VAR 0 4
1890: PPUSH
1891: CALL_OW 250
1895: PUSH
1896: LD_VAR 0 4
1900: PPUSH
1901: CALL_OW 251
1905: PUSH
1906: LD_VAR 0 4
1910: PPUSH
1911: CALL_OW 254
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: LIST
1920: PUSH
1921: LD_VAR 0 5
1925: PPUSH
1926: CALL_OW 250
1930: PUSH
1931: LD_VAR 0 5
1935: PPUSH
1936: CALL_OW 251
1940: PUSH
1941: LD_VAR 0 5
1945: PPUSH
1946: CALL_OW 254
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: LIST
1955: PUSH
1956: LD_VAR 0 6
1960: PPUSH
1961: CALL_OW 250
1965: PUSH
1966: LD_VAR 0 6
1970: PPUSH
1971: CALL_OW 251
1975: PUSH
1976: LD_VAR 0 6
1980: PPUSH
1981: CALL_OW 254
1985: PUSH
1986: EMPTY
1987: LIST
1988: LIST
1989: LIST
1990: PUSH
1991: EMPTY
1992: LIST
1993: LIST
1994: LIST
1995: PUSH
1996: EMPTY
1997: LIST
1998: ADD
1999: ST_TO_ADDR
// DestroyUnit ( dep ) ;
2000: LD_VAR 0 3
2004: PPUSH
2005: CALL_OW 65
// DestroyUnit ( br1 ) ;
2009: LD_VAR 0 4
2013: PPUSH
2014: CALL_OW 65
// DestroyUnit ( br2 ) ;
2018: LD_VAR 0 5
2022: PPUSH
2023: CALL_OW 65
// DestroyUnit ( br3 ) ;
2027: LD_VAR 0 6
2031: PPUSH
2032: CALL_OW 65
// end ;
2036: GO 1682
2038: POP
2039: POP
// if not def_extra_oil_deposits then
2040: LD_EXP 43
2044: NOT
2045: IFFALSE 2127
// for i in [ [ 52 , 44 ] , [ 84 , 37 ] , [ 74 , 81 ] , [ 106 , 77 ] ] do
2047: LD_ADDR_VAR 0 8
2051: PUSH
2052: LD_INT 52
2054: PUSH
2055: LD_INT 44
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PUSH
2062: LD_INT 84
2064: PUSH
2065: LD_INT 37
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: PUSH
2072: LD_INT 74
2074: PUSH
2075: LD_INT 81
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: PUSH
2082: LD_INT 106
2084: PUSH
2085: LD_INT 77
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: LIST
2096: LIST
2097: PUSH
2098: FOR_IN
2099: IFFALSE 2125
// begin RemoveDepositXY ( i [ 1 ] , i [ 2 ] ) ;
2101: LD_VAR 0 8
2105: PUSH
2106: LD_INT 1
2108: ARRAY
2109: PPUSH
2110: LD_VAR 0 8
2114: PUSH
2115: LD_INT 2
2117: ARRAY
2118: PPUSH
2119: CALL_OW 63
// end ;
2123: GO 2098
2125: POP
2126: POP
// end ;
2127: LD_VAR 0 1
2131: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2132: LD_INT 0
2134: PPUSH
2135: PPUSH
2136: PPUSH
// if not Team_Game then
2137: LD_EXP 22
2141: NOT
2142: IFFALSE 2240
// begin for i = 1 to 8 do
2144: LD_ADDR_VAR 0 2
2148: PUSH
2149: DOUBLE
2150: LD_INT 1
2152: DEC
2153: ST_TO_ADDR
2154: LD_INT 8
2156: PUSH
2157: FOR_TO
2158: IFFALSE 2236
// for j = 1 to 8 do
2160: LD_ADDR_VAR 0 3
2164: PUSH
2165: DOUBLE
2166: LD_INT 1
2168: DEC
2169: ST_TO_ADDR
2170: LD_INT 8
2172: PUSH
2173: FOR_TO
2174: IFFALSE 2232
// if i <> j then
2176: LD_VAR 0 2
2180: PUSH
2181: LD_VAR 0 3
2185: NONEQUAL
2186: IFFALSE 2210
// SetAttitude ( i , j , att_neutral , true ) else
2188: LD_VAR 0 2
2192: PPUSH
2193: LD_VAR 0 3
2197: PPUSH
2198: LD_INT 0
2200: PPUSH
2201: LD_INT 1
2203: PPUSH
2204: CALL_OW 80
2208: GO 2230
// SetAttitude ( i , j , att_friend , true ) ;
2210: LD_VAR 0 2
2214: PPUSH
2215: LD_VAR 0 3
2219: PPUSH
2220: LD_INT 1
2222: PPUSH
2223: LD_INT 1
2225: PPUSH
2226: CALL_OW 80
2230: GO 2173
2232: POP
2233: POP
2234: GO 2157
2236: POP
2237: POP
// end else
2238: GO 2415
// begin if def_shared_vision then
2240: LD_EXP 45
2244: IFFALSE 2309
// begin for i in Teams do
2246: LD_ADDR_VAR 0 2
2250: PUSH
2251: LD_EXP 18
2255: PUSH
2256: FOR_IN
2257: IFFALSE 2307
// for j = 2 to i do
2259: LD_ADDR_VAR 0 3
2263: PUSH
2264: DOUBLE
2265: LD_INT 2
2267: DEC
2268: ST_TO_ADDR
2269: LD_VAR 0 2
2273: PUSH
2274: FOR_TO
2275: IFFALSE 2303
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2277: LD_VAR 0 2
2281: PUSH
2282: LD_VAR 0 3
2286: ARRAY
2287: PPUSH
2288: LD_VAR 0 2
2292: PUSH
2293: LD_INT 1
2295: ARRAY
2296: PPUSH
2297: CALL_OW 343
2301: GO 2274
2303: POP
2304: POP
2305: GO 2256
2307: POP
2308: POP
// end ; for i = 1 to 8 do
2309: LD_ADDR_VAR 0 2
2313: PUSH
2314: DOUBLE
2315: LD_INT 1
2317: DEC
2318: ST_TO_ADDR
2319: LD_INT 8
2321: PUSH
2322: FOR_TO
2323: IFFALSE 2413
// for j = 1 to 8 do
2325: LD_ADDR_VAR 0 3
2329: PUSH
2330: DOUBLE
2331: LD_INT 1
2333: DEC
2334: ST_TO_ADDR
2335: LD_INT 8
2337: PUSH
2338: FOR_TO
2339: IFFALSE 2409
// if Side_Teams [ i ] = Side_Teams [ j ] then
2341: LD_EXP 17
2345: PUSH
2346: LD_VAR 0 2
2350: ARRAY
2351: PUSH
2352: LD_EXP 17
2356: PUSH
2357: LD_VAR 0 3
2361: ARRAY
2362: EQUAL
2363: IFFALSE 2387
// SetAttitude ( i , j , att_friend , true ) else
2365: LD_VAR 0 2
2369: PPUSH
2370: LD_VAR 0 3
2374: PPUSH
2375: LD_INT 1
2377: PPUSH
2378: LD_INT 1
2380: PPUSH
2381: CALL_OW 80
2385: GO 2407
// SetAttitude ( i , j , att_enemy , true ) ;
2387: LD_VAR 0 2
2391: PPUSH
2392: LD_VAR 0 3
2396: PPUSH
2397: LD_INT 2
2399: PPUSH
2400: LD_INT 1
2402: PPUSH
2403: CALL_OW 80
2407: GO 2338
2409: POP
2410: POP
2411: GO 2322
2413: POP
2414: POP
// end ; end ;
2415: LD_VAR 0 1
2419: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2420: LD_INT 0
2422: PPUSH
2423: PPUSH
2424: PPUSH
2425: PPUSH
// result := [ ] ;
2426: LD_ADDR_VAR 0 7
2430: PUSH
2431: EMPTY
2432: ST_TO_ADDR
// for i := 1 to count do
2433: LD_ADDR_VAR 0 8
2437: PUSH
2438: DOUBLE
2439: LD_INT 1
2441: DEC
2442: ST_TO_ADDR
2443: LD_VAR 0 1
2447: PUSH
2448: FOR_TO
2449: IFFALSE 2867
// begin uc_direction := Rand ( 0 , 5 ) ;
2451: LD_ADDR_OWVAR 24
2455: PUSH
2456: LD_INT 0
2458: PPUSH
2459: LD_INT 5
2461: PPUSH
2462: CALL_OW 12
2466: ST_TO_ADDR
// if commander then
2467: LD_LOC 1
2471: IFFALSE 2580
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2473: LD_ADDR_OWVAR 26
2477: PUSH
2478: LD_OWVAR 19
2482: PUSH
2483: LD_OWVAR 20
2487: ARRAY
2488: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2489: LD_INT 1
2491: PPUSH
2492: LD_INT 2
2494: PPUSH
2495: CALL_OW 12
2499: PPUSH
2500: LD_VAR 0 2
2504: PPUSH
2505: LD_EXP 5
2509: PUSH
2510: LD_INT 2
2512: PLUS
2513: PPUSH
2514: CALL_OW 380
// hc_importance := 105 ;
2518: LD_ADDR_OWVAR 32
2522: PUSH
2523: LD_INT 105
2525: ST_TO_ADDR
// commander := false ;
2526: LD_ADDR_LOC 1
2530: PUSH
2531: LD_INT 0
2533: ST_TO_ADDR
// if Multiplayer then
2534: LD_OWVAR 4
2538: IFFALSE 2578
// begin hc_gallery := MULTIAVATARS ;
2540: LD_ADDR_OWVAR 33
2544: PUSH
2545: LD_STRING MULTIAVATARS
2547: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2548: LD_ADDR_OWVAR 34
2552: PUSH
2553: LD_OWVAR 20
2557: PPUSH
2558: CALL_OW 525
2562: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2563: LD_ADDR_OWVAR 27
2567: PUSH
2568: LD_OWVAR 20
2572: PPUSH
2573: CALL_OW 526
2577: ST_TO_ADDR
// end ; end else
2578: GO 2643
// begin hc_name :=  ;
2580: LD_ADDR_OWVAR 26
2584: PUSH
2585: LD_STRING 
2587: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2588: LD_INT 1
2590: PPUSH
2591: LD_INT 2
2593: PPUSH
2594: CALL_OW 12
2598: PPUSH
2599: LD_VAR 0 2
2603: PPUSH
2604: LD_EXP 5
2608: PPUSH
2609: CALL_OW 380
// hc_importance := 0 ;
2613: LD_ADDR_OWVAR 32
2617: PUSH
2618: LD_INT 0
2620: ST_TO_ADDR
// if Multiplayer then
2621: LD_OWVAR 4
2625: IFFALSE 2643
// begin hc_gallery :=  ;
2627: LD_ADDR_OWVAR 33
2631: PUSH
2632: LD_STRING 
2634: ST_TO_ADDR
// hc_face_number := 0 ;
2635: LD_ADDR_OWVAR 34
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2643: LD_ADDR_VAR 0 10
2647: PUSH
2648: CALL_OW 44
2652: ST_TO_ADDR
// if global_defined then
2653: LD_LOC 3
2657: IFFALSE 2797
// begin if ( cl = class_soldier ) then
2659: LD_VAR 0 2
2663: PUSH
2664: LD_INT 1
2666: EQUAL
2667: IFFALSE 2687
// j := i + soldiers_created else
2669: LD_ADDR_VAR 0 9
2673: PUSH
2674: LD_VAR 0 8
2678: PUSH
2679: LD_LOC 4
2683: PLUS
2684: ST_TO_ADDR
2685: GO 2697
// j := i ;
2687: LD_ADDR_VAR 0 9
2691: PUSH
2692: LD_VAR 0 8
2696: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2697: LD_LOC 2
2701: PUSH
2702: LD_VAR 0 2
2706: ARRAY
2707: PUSH
2708: LD_VAR 0 9
2712: ARRAY
2713: PPUSH
2714: LD_VAR 0 10
2718: PPUSH
2719: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2723: LD_VAR 0 10
2727: PPUSH
2728: LD_INT 2
2730: PPUSH
2731: LD_LOC 2
2735: PUSH
2736: LD_VAR 0 2
2740: ARRAY
2741: PUSH
2742: LD_VAR 0 9
2746: ARRAY
2747: PPUSH
2748: LD_INT 2
2750: PPUSH
2751: CALL_OW 260
2755: PPUSH
2756: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2760: LD_VAR 0 10
2764: PPUSH
2765: LD_INT 1
2767: PPUSH
2768: LD_LOC 2
2772: PUSH
2773: LD_VAR 0 2
2777: ARRAY
2778: PUSH
2779: LD_VAR 0 9
2783: ARRAY
2784: PPUSH
2785: LD_INT 1
2787: PPUSH
2788: CALL_OW 260
2792: PPUSH
2793: CALL_OW 239
// end ; if building then
2797: LD_VAR 0 6
2801: IFFALSE 2819
// PlaceHumanInUnit ( un , building ) else
2803: LD_VAR 0 10
2807: PPUSH
2808: LD_VAR 0 6
2812: PPUSH
2813: CALL_OW 52
2817: GO 2846
// PlaceUnitXYR ( un , x , y , r , false ) ;
2819: LD_VAR 0 10
2823: PPUSH
2824: LD_VAR 0 3
2828: PPUSH
2829: LD_VAR 0 4
2833: PPUSH
2834: LD_VAR 0 5
2838: PPUSH
2839: LD_INT 0
2841: PPUSH
2842: CALL_OW 50
// result := result ^ [ un ] ;
2846: LD_ADDR_VAR 0 7
2850: PUSH
2851: LD_VAR 0 7
2855: PUSH
2856: LD_VAR 0 10
2860: PUSH
2861: EMPTY
2862: LIST
2863: ADD
2864: ST_TO_ADDR
// end ;
2865: GO 2448
2867: POP
2868: POP
// if not global_defined then
2869: LD_LOC 3
2873: NOT
2874: IFFALSE 2952
// if ( global_units >= cl ) then
2876: LD_LOC 2
2880: PUSH
2881: LD_VAR 0 2
2885: GREATEREQUAL
2886: IFFALSE 2927
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2888: LD_ADDR_LOC 2
2892: PUSH
2893: LD_LOC 2
2897: PPUSH
2898: LD_VAR 0 2
2902: PPUSH
2903: LD_LOC 2
2907: PUSH
2908: LD_VAR 0 2
2912: ARRAY
2913: PUSH
2914: LD_VAR 0 7
2918: ADD
2919: PPUSH
2920: CALL_OW 1
2924: ST_TO_ADDR
2925: GO 2952
// global_units := Replace ( global_units , cl , result ) ;
2927: LD_ADDR_LOC 2
2931: PUSH
2932: LD_LOC 2
2936: PPUSH
2937: LD_VAR 0 2
2941: PPUSH
2942: LD_VAR 0 7
2946: PPUSH
2947: CALL_OW 1
2951: ST_TO_ADDR
// if commander then
2952: LD_LOC 1
2956: IFFALSE 3003
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2958: LD_ADDR_EXP 28
2962: PUSH
2963: LD_EXP 28
2967: PPUSH
2968: LD_OWVAR 20
2972: PPUSH
2973: LD_EXP 28
2977: PUSH
2978: LD_OWVAR 20
2982: ARRAY
2983: PUSH
2984: LD_VAR 0 10
2988: ADD
2989: PPUSH
2990: CALL_OW 1
2994: ST_TO_ADDR
// commander := false ;
2995: LD_ADDR_LOC 1
2999: PUSH
3000: LD_INT 0
3002: ST_TO_ADDR
// end ; end ;
3003: LD_VAR 0 7
3007: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3008: LD_INT 0
3010: PPUSH
3011: PPUSH
3012: PPUSH
3013: PPUSH
3014: PPUSH
3015: PPUSH
3016: PPUSH
3017: PPUSH
3018: PPUSH
// pos := Side_Positions [ side ] ;
3019: LD_ADDR_VAR 0 3
3023: PUSH
3024: LD_EXP 20
3028: PUSH
3029: LD_VAR 0 1
3033: ARRAY
3034: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3035: LD_ADDR_OWVAR 21
3039: PUSH
3040: LD_EXP 21
3044: PUSH
3045: LD_VAR 0 1
3049: ARRAY
3050: ST_TO_ADDR
// uc_side := side ;
3051: LD_ADDR_OWVAR 20
3055: PUSH
3056: LD_VAR 0 1
3060: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3061: LD_ADDR_VAR 0 4
3065: PUSH
3066: LD_EXP 24
3070: PUSH
3071: LD_VAR 0 3
3075: ARRAY
3076: PUSH
3077: LD_INT 1
3079: ARRAY
3080: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3081: LD_ADDR_VAR 0 5
3085: PUSH
3086: LD_EXP 24
3090: PUSH
3091: LD_VAR 0 3
3095: ARRAY
3096: PUSH
3097: LD_INT 2
3099: ARRAY
3100: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3101: LD_ADDR_VAR 0 6
3105: PUSH
3106: LD_EXP 24
3110: PUSH
3111: LD_VAR 0 3
3115: ARRAY
3116: PUSH
3117: LD_INT 3
3119: ARRAY
3120: ST_TO_ADDR
// if is_depot then
3121: LD_EXP 2
3125: IFFALSE 3258
// begin bc_type = b_depot ;
3127: LD_ADDR_OWVAR 42
3131: PUSH
3132: LD_INT 0
3134: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3135: LD_ADDR_VAR 0 10
3139: PUSH
3140: LD_VAR 0 4
3144: PPUSH
3145: LD_VAR 0 5
3149: PPUSH
3150: LD_VAR 0 6
3154: PPUSH
3155: CALL_OW 47
3159: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3160: LD_VAR 0 10
3164: PPUSH
3165: LD_STRING @
3167: PUSH
3168: LD_VAR 0 1
3172: STR
3173: PPUSH
3174: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3178: LD_VAR 0 10
3182: PPUSH
3183: CALL_OW 274
3187: PPUSH
3188: LD_INT 1
3190: PPUSH
3191: LD_EXP 7
3195: PUSH
3196: LD_INT 1
3198: ARRAY
3199: PPUSH
3200: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3204: LD_VAR 0 10
3208: PPUSH
3209: CALL_OW 274
3213: PPUSH
3214: LD_INT 2
3216: PPUSH
3217: LD_EXP 7
3221: PUSH
3222: LD_INT 2
3224: ARRAY
3225: PPUSH
3226: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3230: LD_VAR 0 10
3234: PPUSH
3235: CALL_OW 274
3239: PPUSH
3240: LD_INT 3
3242: PPUSH
3243: LD_EXP 7
3247: PUSH
3248: LD_INT 3
3250: ARRAY
3251: PPUSH
3252: CALL_OW 277
// end else
3256: GO 3402
// begin for i := 1 to 3 do
3258: LD_ADDR_VAR 0 7
3262: PUSH
3263: DOUBLE
3264: LD_INT 1
3266: DEC
3267: ST_TO_ADDR
3268: LD_INT 3
3270: PUSH
3271: FOR_TO
3272: IFFALSE 3400
// begin r := starting_resources [ i ] ;
3274: LD_ADDR_VAR 0 8
3278: PUSH
3279: LD_EXP 7
3283: PUSH
3284: LD_VAR 0 7
3288: ARRAY
3289: ST_TO_ADDR
// while r >= 10 do
3290: LD_VAR 0 8
3294: PUSH
3295: LD_INT 10
3297: GREATEREQUAL
3298: IFFALSE 3398
// if r > 50 then
3300: LD_VAR 0 8
3304: PUSH
3305: LD_INT 50
3307: GREATER
3308: IFFALSE 3354
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3310: LD_VAR 0 7
3314: PPUSH
3315: LD_INT 5
3317: PPUSH
3318: LD_VAR 0 4
3322: PPUSH
3323: LD_VAR 0 5
3327: PPUSH
3328: LD_INT 4
3330: PPUSH
3331: LD_INT 0
3333: PPUSH
3334: CALL_OW 60
// r := r - 50 ;
3338: LD_ADDR_VAR 0 8
3342: PUSH
3343: LD_VAR 0 8
3347: PUSH
3348: LD_INT 50
3350: MINUS
3351: ST_TO_ADDR
// end else
3352: GO 3396
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3354: LD_VAR 0 7
3358: PPUSH
3359: LD_VAR 0 8
3363: PUSH
3364: LD_INT 10
3366: DIV
3367: PPUSH
3368: LD_VAR 0 4
3372: PPUSH
3373: LD_VAR 0 5
3377: PPUSH
3378: LD_INT 4
3380: PPUSH
3381: LD_INT 0
3383: PPUSH
3384: CALL_OW 60
// r := 0 ;
3388: LD_ADDR_VAR 0 8
3392: PUSH
3393: LD_INT 0
3395: ST_TO_ADDR
// end ;
3396: GO 3290
// end ;
3398: GO 3271
3400: POP
3401: POP
// end ; for r in starting_crates do
3402: LD_ADDR_VAR 0 8
3406: PUSH
3407: LD_EXP 6
3411: PUSH
3412: FOR_IN
3413: IFFALSE 3445
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3415: LD_INT 1
3417: PPUSH
3418: LD_INT 5
3420: PPUSH
3421: LD_VAR 0 4
3425: PPUSH
3426: LD_VAR 0 5
3430: PPUSH
3431: LD_VAR 0 8
3435: PPUSH
3436: LD_INT 0
3438: PPUSH
3439: CALL_OW 60
3443: GO 3412
3445: POP
3446: POP
// if def_morale_flags then
3447: LD_EXP 46
3451: IFFALSE 3590
// begin x := start_def [ pos ] [ 1 ] ;
3453: LD_ADDR_VAR 0 4
3457: PUSH
3458: LD_EXP 26
3462: PUSH
3463: LD_VAR 0 3
3467: ARRAY
3468: PUSH
3469: LD_INT 1
3471: ARRAY
3472: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3473: LD_ADDR_VAR 0 5
3477: PUSH
3478: LD_EXP 26
3482: PUSH
3483: LD_VAR 0 3
3487: ARRAY
3488: PUSH
3489: LD_INT 2
3491: ARRAY
3492: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3493: LD_VAR 0 4
3497: PPUSH
3498: LD_VAR 0 5
3502: PPUSH
3503: LD_INT 12
3505: PPUSH
3506: LD_INT 2
3508: PPUSH
3509: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3513: LD_ADDR_EXP 27
3517: PUSH
3518: LD_EXP 27
3522: PUSH
3523: LD_VAR 0 1
3527: PPUSH
3528: LD_VAR 0 4
3532: PPUSH
3533: LD_VAR 0 5
3537: PPUSH
3538: LD_INT 1
3540: PUSH
3541: LD_INT 100
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: PUSH
3548: LD_INT 2
3550: PUSH
3551: LD_INT 50
3553: PUSH
3554: EMPTY
3555: LIST
3556: LIST
3557: PUSH
3558: LD_INT 3
3560: PUSH
3561: LD_INT 20
3563: PUSH
3564: EMPTY
3565: LIST
3566: LIST
3567: PUSH
3568: LD_INT 20
3570: PUSH
3571: LD_INT 100
3573: PUSH
3574: EMPTY
3575: LIST
3576: LIST
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: LIST
3582: LIST
3583: PPUSH
3584: CALL_OW 418
3588: ADD
3589: ST_TO_ADDR
// end ; commander := true ;
3590: LD_ADDR_LOC 1
3594: PUSH
3595: LD_INT 1
3597: ST_TO_ADDR
// soldiers_created := 0 ;
3598: LD_ADDR_LOC 4
3602: PUSH
3603: LD_INT 0
3605: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3606: LD_ADDR_VAR 0 7
3610: PUSH
3611: DOUBLE
3612: LD_INT 1
3614: DEC
3615: ST_TO_ADDR
3616: LD_EXP 3
3620: PUSH
3621: FOR_TO
3622: IFFALSE 3775
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3624: LD_ADDR_VAR 0 4
3628: PUSH
3629: LD_EXP 25
3633: PUSH
3634: LD_VAR 0 3
3638: ARRAY
3639: PUSH
3640: LD_VAR 0 7
3644: ARRAY
3645: PUSH
3646: LD_INT 1
3648: ARRAY
3649: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3650: LD_ADDR_VAR 0 5
3654: PUSH
3655: LD_EXP 25
3659: PUSH
3660: LD_VAR 0 3
3664: ARRAY
3665: PUSH
3666: LD_VAR 0 7
3670: ARRAY
3671: PUSH
3672: LD_INT 2
3674: ARRAY
3675: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3676: LD_ADDR_VAR 0 6
3680: PUSH
3681: LD_EXP 25
3685: PUSH
3686: LD_VAR 0 3
3690: ARRAY
3691: PUSH
3692: LD_VAR 0 7
3696: ARRAY
3697: PUSH
3698: LD_INT 3
3700: ARRAY
3701: ST_TO_ADDR
// bc_type := b_breastwork ;
3702: LD_ADDR_OWVAR 42
3706: PUSH
3707: LD_INT 31
3709: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3710: LD_ADDR_VAR 0 9
3714: PUSH
3715: LD_VAR 0 4
3719: PPUSH
3720: LD_VAR 0 5
3724: PPUSH
3725: LD_VAR 0 6
3729: PPUSH
3730: CALL_OW 47
3734: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3735: LD_INT 1
3737: PPUSH
3738: LD_INT 1
3740: PPUSH
3741: LD_INT 0
3743: PPUSH
3744: LD_INT 0
3746: PPUSH
3747: LD_INT 0
3749: PPUSH
3750: LD_VAR 0 9
3754: PPUSH
3755: CALL 2420 0 6
// soldiers_created := soldiers_created + 1 ;
3759: LD_ADDR_LOC 4
3763: PUSH
3764: LD_LOC 4
3768: PUSH
3769: LD_INT 1
3771: PLUS
3772: ST_TO_ADDR
// end ;
3773: GO 3621
3775: POP
3776: POP
// x := start_def [ pos ] [ 1 ] ;
3777: LD_ADDR_VAR 0 4
3781: PUSH
3782: LD_EXP 26
3786: PUSH
3787: LD_VAR 0 3
3791: ARRAY
3792: PUSH
3793: LD_INT 1
3795: ARRAY
3796: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3797: LD_ADDR_VAR 0 5
3801: PUSH
3802: LD_EXP 26
3806: PUSH
3807: LD_VAR 0 3
3811: ARRAY
3812: PUSH
3813: LD_INT 2
3815: ARRAY
3816: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3817: LD_LOC 8
3821: PUSH
3822: LD_EXP 3
3826: MINUS
3827: PPUSH
3828: LD_INT 1
3830: PPUSH
3831: LD_VAR 0 4
3835: PPUSH
3836: LD_VAR 0 5
3840: PPUSH
3841: LD_INT 5
3843: PPUSH
3844: LD_INT 0
3846: PPUSH
3847: CALL 2420 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3851: LD_LOC 5
3855: PPUSH
3856: LD_INT 2
3858: PPUSH
3859: LD_VAR 0 4
3863: PPUSH
3864: LD_VAR 0 5
3868: PPUSH
3869: LD_INT 5
3871: PPUSH
3872: LD_INT 0
3874: PPUSH
3875: CALL 2420 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3879: LD_LOC 7
3883: PPUSH
3884: LD_INT 3
3886: PPUSH
3887: LD_VAR 0 4
3891: PPUSH
3892: LD_VAR 0 5
3896: PPUSH
3897: LD_INT 5
3899: PPUSH
3900: LD_INT 0
3902: PPUSH
3903: CALL 2420 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3907: LD_LOC 6
3911: PPUSH
3912: LD_INT 4
3914: PPUSH
3915: LD_VAR 0 4
3919: PPUSH
3920: LD_VAR 0 5
3924: PPUSH
3925: LD_INT 5
3927: PPUSH
3928: LD_INT 0
3930: PPUSH
3931: CALL 2420 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3935: LD_EXP 47
3939: PUSH
3940: LD_INT 20
3942: PPUSH
3943: LD_VAR 0 1
3947: PPUSH
3948: CALL_OW 321
3952: PUSH
3953: LD_INT 1
3955: EQUAL
3956: AND
3957: IFFALSE 3974
// SetTech ( tech_SibDet , side , state_researched ) ;
3959: LD_INT 20
3961: PPUSH
3962: LD_VAR 0 1
3966: PPUSH
3967: LD_INT 2
3969: PPUSH
3970: CALL_OW 322
// if def_siberite_bomb = 1 then
3974: LD_EXP 50
3978: PUSH
3979: LD_INT 1
3981: EQUAL
3982: IFFALSE 4016
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3984: LD_INT 25
3986: PPUSH
3987: LD_VAR 0 1
3991: PPUSH
3992: LD_INT 1
3994: PPUSH
3995: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3999: LD_INT 73
4001: PPUSH
4002: LD_VAR 0 1
4006: PPUSH
4007: LD_INT 1
4009: PPUSH
4010: CALL_OW 322
// end else
4014: GO 4046
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4016: LD_INT 25
4018: PPUSH
4019: LD_VAR 0 1
4023: PPUSH
4024: LD_INT 0
4026: PPUSH
4027: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4031: LD_INT 73
4033: PPUSH
4034: LD_VAR 0 1
4038: PPUSH
4039: LD_INT 0
4041: PPUSH
4042: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4046: LD_INT 24
4048: PPUSH
4049: LD_VAR 0 1
4053: PPUSH
4054: LD_INT 0
4056: PPUSH
4057: CALL_OW 322
// global_defined := true ;
4061: LD_ADDR_LOC 3
4065: PUSH
4066: LD_INT 1
4068: ST_TO_ADDR
// end ;
4069: LD_VAR 0 2
4073: RET
// every 0 0$1 do
4074: GO 4076
4076: DISABLE
// if ( def_siberite_bomb > 1 ) then
4077: LD_EXP 50
4081: PUSH
4082: LD_INT 1
4084: GREATER
4085: IFFALSE 4100
// begin wait ( siberite_bomb_Delay ) ;
4087: LD_EXP 12
4091: PPUSH
4092: CALL_OW 67
// EnableSibFiss ;
4096: CALL 4101 0 0
// end ;
4100: END
// function EnableSibFiss ; var i ; begin
4101: LD_INT 0
4103: PPUSH
4104: PPUSH
// for i := 1 to 8 do
4105: LD_ADDR_VAR 0 2
4109: PUSH
4110: DOUBLE
4111: LD_INT 1
4113: DEC
4114: ST_TO_ADDR
4115: LD_INT 8
4117: PUSH
4118: FOR_TO
4119: IFFALSE 4165
// if Side_Positions [ i ] then
4121: LD_EXP 20
4125: PUSH
4126: LD_VAR 0 2
4130: ARRAY
4131: IFFALSE 4163
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4133: LD_INT 25
4135: PPUSH
4136: LD_VAR 0 2
4140: PPUSH
4141: LD_INT 1
4143: PPUSH
4144: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4148: LD_INT 73
4150: PPUSH
4151: LD_VAR 0 2
4155: PPUSH
4156: LD_INT 1
4158: PPUSH
4159: CALL_OW 322
// end ;
4163: GO 4118
4165: POP
4166: POP
// end ;
4167: LD_VAR 0 1
4171: RET
// function prepare_sides ; var i ; begin
4172: LD_INT 0
4174: PPUSH
4175: PPUSH
// global_units := [ ] ;
4176: LD_ADDR_LOC 2
4180: PUSH
4181: EMPTY
4182: ST_TO_ADDR
// global_defined := false ;
4183: LD_ADDR_LOC 3
4187: PUSH
4188: LD_INT 0
4190: ST_TO_ADDR
// CountClassMembers ;
4191: CALL 4241 0 0
// for i := 1 to 8 do
4195: LD_ADDR_VAR 0 2
4199: PUSH
4200: DOUBLE
4201: LD_INT 1
4203: DEC
4204: ST_TO_ADDR
4205: LD_INT 8
4207: PUSH
4208: FOR_TO
4209: IFFALSE 4234
// if Side_Positions [ i ] then
4211: LD_EXP 20
4215: PUSH
4216: LD_VAR 0 2
4220: ARRAY
4221: IFFALSE 4232
// prepare_side ( i ) ;
4223: LD_VAR 0 2
4227: PPUSH
4228: CALL 3008 0 1
4232: GO 4208
4234: POP
4235: POP
// end ;
4236: LD_VAR 0 1
4240: RET
// function CountClassMembers ; var Mode ; begin
4241: LD_INT 0
4243: PPUSH
4244: PPUSH
// if No_Mechs then
4245: LD_EXP 52
4249: IFFALSE 4261
// Mode := 2 else
4251: LD_ADDR_VAR 0 2
4255: PUSH
4256: LD_INT 2
4258: ST_TO_ADDR
4259: GO 4269
// Mode := 1 ;
4261: LD_ADDR_VAR 0 2
4265: PUSH
4266: LD_INT 1
4268: ST_TO_ADDR
// neng := number_of_people ;
4269: LD_ADDR_LOC 5
4273: PUSH
4274: LD_EXP 4
4278: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4279: LD_ADDR_LOC 8
4283: PUSH
4284: LD_LOC 5
4288: PUSH
4289: LD_INT 4
4291: PUSH
4292: LD_INT 3
4294: PUSH
4295: EMPTY
4296: LIST
4297: LIST
4298: PUSH
4299: LD_VAR 0 2
4303: ARRAY
4304: DIV
4305: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4306: LD_LOC 8
4310: PUSH
4311: LD_EXP 3
4315: LESS
4316: IFFALSE 4328
// nsol := number_of_breastworks ;
4318: LD_ADDR_LOC 8
4322: PUSH
4323: LD_EXP 3
4327: ST_TO_ADDR
// neng := neng - nsol ;
4328: LD_ADDR_LOC 5
4332: PUSH
4333: LD_LOC 5
4337: PUSH
4338: LD_LOC 8
4342: MINUS
4343: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4344: LD_ADDR_LOC 6
4348: PUSH
4349: LD_LOC 5
4353: PUSH
4354: LD_INT 3
4356: PUSH
4357: LD_INT 2
4359: PUSH
4360: EMPTY
4361: LIST
4362: LIST
4363: PUSH
4364: LD_VAR 0 2
4368: ARRAY
4369: DIV
4370: ST_TO_ADDR
// if ( nsci < 1 ) then
4371: LD_LOC 6
4375: PUSH
4376: LD_INT 1
4378: LESS
4379: IFFALSE 4389
// nsci := 1 ;
4381: LD_ADDR_LOC 6
4385: PUSH
4386: LD_INT 1
4388: ST_TO_ADDR
// neng := neng - nsci ;
4389: LD_ADDR_LOC 5
4393: PUSH
4394: LD_LOC 5
4398: PUSH
4399: LD_LOC 6
4403: MINUS
4404: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4405: LD_ADDR_LOC 7
4409: PUSH
4410: LD_LOC 5
4414: PUSH
4415: LD_INT 2
4417: DIV
4418: PUSH
4419: LD_INT 0
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PUSH
4426: LD_VAR 0 2
4430: ARRAY
4431: ST_TO_ADDR
// neng := neng - nmech ;
4432: LD_ADDR_LOC 5
4436: PUSH
4437: LD_LOC 5
4441: PUSH
4442: LD_LOC 7
4446: MINUS
4447: ST_TO_ADDR
// if ( neng < 1 ) then
4448: LD_LOC 5
4452: PUSH
4453: LD_INT 1
4455: LESS
4456: IFFALSE 4466
// neng := 1 ;
4458: LD_ADDR_LOC 5
4462: PUSH
4463: LD_INT 1
4465: ST_TO_ADDR
// end ;
4466: LD_VAR 0 1
4470: RET
// starting begin disable ( 98 ) ;
4471: LD_INT 98
4473: DISABLE_MARKED
// disable ( 99 ) ;
4474: LD_INT 99
4476: DISABLE_MARKED
// disable ( 400 ) ;
4477: LD_INT 400
4479: DISABLE_MARKED
// disable ( 401 ) ;
4480: LD_INT 401
4482: DISABLE_MARKED
// disable ( 600 ) ;
4483: LD_INT 600
4485: DISABLE_MARKED
// mp_selectmsg := true ;
4486: LD_ADDR_OWVAR 13
4490: PUSH
4491: LD_INT 1
4493: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4494: CALL 68 0 0
// prepare_map_coordinates ;
4498: CALL 1645 0 0
// set_shared_visions_and_alliances ;
4502: CALL 2132 0 0
// ResetFog ;
4506: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4510: LD_OWVAR 2
4514: PPUSH
4515: CALL_OW 520
// prepare_sides ;
4519: CALL 4172 0 0
// Init_Win_Condition ;
4523: CALL 16143 0 0
// InitLimits ;
4527: CALL 9963 0 0
// ShowTimer ;
4531: CALL 10900 0 0
// init_shipments_and_respawning ;
4535: CALL 5660 0 0
// music_nat := Side_Nations [ your_side ] ;
4539: LD_ADDR_OWVAR 71
4543: PUSH
4544: LD_EXP 21
4548: PUSH
4549: LD_OWVAR 2
4553: ARRAY
4554: ST_TO_ADDR
// if IAmSpec then
4555: CALL_OW 531
4559: IFFALSE 4583
// begin fogoff ( true ) ;
4561: LD_INT 1
4563: PPUSH
4564: CALL_OW 344
// CenterNowOnXY ( 79 , 59 ) ;
4568: LD_INT 79
4570: PPUSH
4571: LD_INT 59
4573: PPUSH
4574: CALL_OW 86
// enable ( 400 ) ;
4578: LD_INT 400
4580: ENABLE_MARKED
// end else
4581: GO 4629
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4583: LD_EXP 26
4587: PUSH
4588: LD_EXP 20
4592: PUSH
4593: LD_OWVAR 2
4597: ARRAY
4598: ARRAY
4599: PUSH
4600: LD_INT 1
4602: ARRAY
4603: PPUSH
4604: LD_EXP 26
4608: PUSH
4609: LD_EXP 20
4613: PUSH
4614: LD_OWVAR 2
4618: ARRAY
4619: ARRAY
4620: PUSH
4621: LD_INT 2
4623: ARRAY
4624: PPUSH
4625: CALL_OW 86
// end ; InitApeman ;
4629: CALL 4835 0 0
// if def_builduptime then
4633: LD_EXP 51
4637: IFFALSE 4643
// BeginBuildUp ;
4639: CALL 11348 0 0
// end ; end_of_file
4643: END
// every 20 20$00 trigger apemanNumber do
4644: LD_EXP 29
4648: IFFALSE 4681
4650: GO 4652
4652: DISABLE
// begin enable ;
4653: ENABLE
// if apeLevel >= 8 then
4654: LD_EXP 34
4658: PUSH
4659: LD_INT 8
4661: GREATEREQUAL
4662: IFFALSE 4667
// disable else
4664: DISABLE
4665: GO 4681
// apeLevel := apeLevel + 1 ;
4667: LD_ADDR_EXP 34
4671: PUSH
4672: LD_EXP 34
4676: PUSH
4677: LD_INT 1
4679: PLUS
4680: ST_TO_ADDR
// end ;
4681: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
4682: LD_EXP 29
4686: PUSH
4687: LD_EXP 30
4691: LESS
4692: IFFALSE 4832
4694: GO 4696
4696: DISABLE
4697: LD_INT 0
4699: PPUSH
4700: PPUSH
4701: PPUSH
4702: PPUSH
// begin enable ;
4703: ENABLE
// for i := 1 to apemanPos do
4704: LD_ADDR_VAR 0 1
4708: PUSH
4709: DOUBLE
4710: LD_INT 1
4712: DEC
4713: ST_TO_ADDR
4714: LD_EXP 32
4718: PUSH
4719: FOR_TO
4720: IFFALSE 4830
// begin if apemanPlayerCount [ i ] then
4722: LD_EXP 33
4726: PUSH
4727: LD_VAR 0 1
4731: ARRAY
4732: IFFALSE 4828
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
4734: LD_EXP 33
4738: PUSH
4739: LD_VAR 0 1
4743: ARRAY
4744: PUSH
4745: LD_EXP 32
4749: PUSH
4750: LD_VAR 0 1
4754: ARRAY
4755: GREATER
4756: IFFALSE 4828
// begin ape := PrepareApeman ;
4758: LD_ADDR_VAR 0 2
4762: PUSH
4763: CALL 5335 0 0
4767: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
4768: LD_VAR 0 2
4772: PPUSH
4773: LD_EXP 35
4777: PUSH
4778: LD_VAR 0 1
4782: ARRAY
4783: PPUSH
4784: LD_INT 0
4786: PPUSH
4787: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
4791: LD_ADDR_EXP 32
4795: PUSH
4796: LD_EXP 32
4800: PPUSH
4801: LD_VAR 0 1
4805: PPUSH
4806: LD_EXP 32
4810: PUSH
4811: LD_VAR 0 1
4815: ARRAY
4816: PUSH
4817: LD_VAR 0 2
4821: UNION
4822: PPUSH
4823: CALL_OW 1
4827: ST_TO_ADDR
// end ; end ; end ;
4828: GO 4719
4830: POP
4831: POP
// end ;
4832: PPOPN 4
4834: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
4835: LD_INT 0
4837: PPUSH
4838: PPUSH
4839: PPUSH
4840: PPUSH
4841: PPUSH
4842: PPUSH
4843: PPUSH
// playersAmount := 0 ;
4844: LD_ADDR_VAR 0 3
4848: PUSH
4849: LD_INT 0
4851: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , ] ;
4852: LD_ADDR_VAR 0 7
4856: PUSH
4857: LD_INT 13
4859: PUSH
4860: LD_INT 14
4862: PUSH
4863: LD_INT 15
4865: PUSH
4866: LD_INT 16
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4875: LD_ADDR_EXP 35
4879: PUSH
4880: LD_INT 0
4882: PUSH
4883: LD_INT 0
4885: PUSH
4886: LD_INT 0
4888: PUSH
4889: LD_INT 0
4891: PUSH
4892: LD_INT 0
4894: PUSH
4895: LD_INT 0
4897: PUSH
4898: LD_INT 0
4900: PUSH
4901: LD_INT 0
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: LIST
4911: LIST
4912: LIST
4913: ST_TO_ADDR
// for j = 1 to Side_Positions do
4914: LD_ADDR_VAR 0 4
4918: PUSH
4919: DOUBLE
4920: LD_INT 1
4922: DEC
4923: ST_TO_ADDR
4924: LD_EXP 20
4928: PUSH
4929: FOR_TO
4930: IFFALSE 4997
// if Side_Positions [ j ] then
4932: LD_EXP 20
4936: PUSH
4937: LD_VAR 0 4
4941: ARRAY
4942: IFFALSE 4995
// begin playersAmount := playersAmount + 1 ;
4944: LD_ADDR_VAR 0 3
4948: PUSH
4949: LD_VAR 0 3
4953: PUSH
4954: LD_INT 1
4956: PLUS
4957: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
4958: LD_ADDR_EXP 35
4962: PUSH
4963: LD_EXP 35
4967: PPUSH
4968: LD_VAR 0 4
4972: PPUSH
4973: LD_VAR 0 7
4977: PUSH
4978: LD_EXP 20
4982: PUSH
4983: LD_VAR 0 4
4987: ARRAY
4988: ARRAY
4989: PPUSH
4990: CALL_OW 1
4994: ST_TO_ADDR
// end ;
4995: GO 4929
4997: POP
4998: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
4999: LD_ADDR_EXP 31
5003: PUSH
5004: LD_INT 3
5006: PUSH
5007: LD_EXP 13
5011: MUL
5012: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5013: LD_ADDR_EXP 29
5017: PUSH
5018: LD_VAR 0 3
5022: PUSH
5023: LD_EXP 31
5027: MUL
5028: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5029: LD_ADDR_EXP 30
5033: PUSH
5034: LD_EXP 29
5038: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5039: LD_ADDR_EXP 32
5043: PUSH
5044: LD_INT 0
5046: PUSH
5047: LD_INT 0
5049: PUSH
5050: LD_INT 0
5052: PUSH
5053: LD_INT 0
5055: PUSH
5056: LD_INT 0
5058: PUSH
5059: LD_INT 0
5061: PUSH
5062: LD_INT 0
5064: PUSH
5065: LD_INT 0
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5078: LD_ADDR_EXP 33
5082: PUSH
5083: LD_INT 0
5085: PUSH
5086: LD_INT 0
5088: PUSH
5089: LD_INT 0
5091: PUSH
5092: LD_INT 0
5094: PUSH
5095: LD_INT 0
5097: PUSH
5098: LD_INT 0
5100: PUSH
5101: LD_INT 0
5103: PUSH
5104: LD_INT 0
5106: PUSH
5107: EMPTY
5108: LIST
5109: LIST
5110: LIST
5111: LIST
5112: LIST
5113: LIST
5114: LIST
5115: LIST
5116: ST_TO_ADDR
// apeLevel := 1 ;
5117: LD_ADDR_EXP 34
5121: PUSH
5122: LD_INT 1
5124: ST_TO_ADDR
// if not apemanNumber then
5125: LD_EXP 29
5129: NOT
5130: IFFALSE 5134
// exit ;
5132: GO 5330
// for i := 1 to apemanPerPlayer do
5134: LD_ADDR_VAR 0 2
5138: PUSH
5139: DOUBLE
5140: LD_INT 1
5142: DEC
5143: ST_TO_ADDR
5144: LD_EXP 31
5148: PUSH
5149: FOR_TO
5150: IFFALSE 5328
// begin for j := 1 to Side_Positions do
5152: LD_ADDR_VAR 0 4
5156: PUSH
5157: DOUBLE
5158: LD_INT 1
5160: DEC
5161: ST_TO_ADDR
5162: LD_EXP 20
5166: PUSH
5167: FOR_TO
5168: IFFALSE 5324
// if Side_Positions [ j ] then
5170: LD_EXP 20
5174: PUSH
5175: LD_VAR 0 4
5179: ARRAY
5180: IFFALSE 5322
// begin pos := Side_Positions [ j ] ;
5182: LD_ADDR_VAR 0 6
5186: PUSH
5187: LD_EXP 20
5191: PUSH
5192: LD_VAR 0 4
5196: ARRAY
5197: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5198: LD_ADDR_EXP 33
5202: PUSH
5203: LD_EXP 33
5207: PPUSH
5208: LD_VAR 0 4
5212: PPUSH
5213: LD_EXP 33
5217: PUSH
5218: LD_VAR 0 4
5222: ARRAY
5223: PUSH
5224: LD_INT 1
5226: PLUS
5227: PPUSH
5228: CALL_OW 1
5232: ST_TO_ADDR
// ape := PrepareApeman ;
5233: LD_ADDR_VAR 0 5
5237: PUSH
5238: CALL 5335 0 0
5242: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5243: LD_ADDR_EXP 32
5247: PUSH
5248: LD_EXP 32
5252: PPUSH
5253: LD_VAR 0 4
5257: PPUSH
5258: LD_EXP 32
5262: PUSH
5263: LD_VAR 0 4
5267: ARRAY
5268: PPUSH
5269: LD_EXP 32
5273: PUSH
5274: LD_VAR 0 4
5278: ARRAY
5279: PUSH
5280: LD_INT 1
5282: PLUS
5283: PPUSH
5284: LD_VAR 0 5
5288: PPUSH
5289: CALL_OW 1
5293: PPUSH
5294: CALL_OW 1
5298: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5299: LD_VAR 0 5
5303: PPUSH
5304: LD_EXP 35
5308: PUSH
5309: LD_VAR 0 4
5313: ARRAY
5314: PPUSH
5315: LD_INT 0
5317: PPUSH
5318: CALL_OW 49
// end ;
5322: GO 5167
5324: POP
5325: POP
// end ;
5326: GO 5149
5328: POP
5329: POP
// end ;
5330: LD_VAR 0 1
5334: RET
// export function PrepareApeman ; var bonus ; begin
5335: LD_INT 0
5337: PPUSH
5338: PPUSH
// uc_side := 0 ;
5339: LD_ADDR_OWVAR 20
5343: PUSH
5344: LD_INT 0
5346: ST_TO_ADDR
// uc_nation := 0 ;
5347: LD_ADDR_OWVAR 21
5351: PUSH
5352: LD_INT 0
5354: ST_TO_ADDR
// InitHc ;
5355: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
5359: LD_ADDR_VAR 0 2
5363: PUSH
5364: LD_INT 1
5366: NEG
5367: PUSH
5368: LD_INT 0
5370: PUSH
5371: LD_INT 1
5373: PUSH
5374: EMPTY
5375: LIST
5376: LIST
5377: LIST
5378: PUSH
5379: LD_OWVAR 1
5383: PUSH
5384: LD_INT 3
5386: MOD
5387: PUSH
5388: LD_INT 1
5390: PLUS
5391: ARRAY
5392: ST_TO_ADDR
// hc_class := class_apeman ;
5393: LD_ADDR_OWVAR 28
5397: PUSH
5398: LD_INT 12
5400: ST_TO_ADDR
// hc_gallery :=  ;
5401: LD_ADDR_OWVAR 33
5405: PUSH
5406: LD_STRING 
5408: ST_TO_ADDR
// hc_name :=  ;
5409: LD_ADDR_OWVAR 26
5413: PUSH
5414: LD_STRING 
5416: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
5417: LD_ADDR_OWVAR 31
5421: PUSH
5422: LD_EXP 34
5426: PUSH
5427: LD_VAR 0 2
5431: PLUS
5432: PUSH
5433: LD_EXP 34
5437: PUSH
5438: LD_VAR 0 2
5442: PLUS
5443: PUSH
5444: LD_EXP 34
5448: PUSH
5449: LD_VAR 0 2
5453: PLUS
5454: PUSH
5455: LD_EXP 34
5459: PUSH
5460: LD_VAR 0 2
5464: PLUS
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: LIST
5470: LIST
5471: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
5472: LD_ADDR_OWVAR 35
5476: PUSH
5477: LD_INT 10
5479: PUSH
5480: LD_VAR 0 2
5484: MUL
5485: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5486: LD_ADDR_OWVAR 29
5490: PUSH
5491: LD_INT 12
5493: PUSH
5494: LD_INT 10
5496: PUSH
5497: EMPTY
5498: LIST
5499: LIST
5500: ST_TO_ADDR
// result := CreateHuman ;
5501: LD_ADDR_VAR 0 1
5505: PUSH
5506: CALL_OW 44
5510: ST_TO_ADDR
// end ;
5511: LD_VAR 0 1
5515: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
5516: LD_INT 0
5518: PPUSH
5519: PPUSH
5520: PPUSH
// if not ape then
5521: LD_VAR 0 1
5525: NOT
5526: IFFALSE 5530
// exit ;
5528: GO 5655
// side := GetSide ( ape ) ;
5530: LD_ADDR_VAR 0 3
5534: PUSH
5535: LD_VAR 0 1
5539: PPUSH
5540: CALL_OW 255
5544: ST_TO_ADDR
// if not side then
5545: LD_VAR 0 3
5549: NOT
5550: IFFALSE 5604
// begin for i = 1 to apemanPos do
5552: LD_ADDR_VAR 0 4
5556: PUSH
5557: DOUBLE
5558: LD_INT 1
5560: DEC
5561: ST_TO_ADDR
5562: LD_EXP 32
5566: PUSH
5567: FOR_TO
5568: IFFALSE 5602
// if ape in apemanPos [ i ] then
5570: LD_VAR 0 1
5574: PUSH
5575: LD_EXP 32
5579: PUSH
5580: LD_VAR 0 4
5584: ARRAY
5585: IN
5586: IFFALSE 5600
// begin side := i ;
5588: LD_ADDR_VAR 0 3
5592: PUSH
5593: LD_VAR 0 4
5597: ST_TO_ADDR
// break ;
5598: GO 5602
// end ;
5600: GO 5567
5602: POP
5603: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
5604: LD_ADDR_EXP 32
5608: PUSH
5609: LD_EXP 32
5613: PPUSH
5614: LD_VAR 0 3
5618: PPUSH
5619: LD_EXP 32
5623: PUSH
5624: LD_VAR 0 3
5628: ARRAY
5629: PUSH
5630: LD_VAR 0 1
5634: DIFF
5635: PPUSH
5636: CALL_OW 1
5640: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
5641: LD_ADDR_EXP 29
5645: PUSH
5646: LD_EXP 29
5650: PUSH
5651: LD_INT 1
5653: MINUS
5654: ST_TO_ADDR
// end ; end_of_file
5655: LD_VAR 0 2
5659: RET
// var shipment , respawn , inqueue ; export function init_shipments_and_respawning ; begin
5660: LD_INT 0
5662: PPUSH
// shipment := Rand ( 0 , 3 ) ;
5663: LD_ADDR_LOC 9
5667: PUSH
5668: LD_INT 0
5670: PPUSH
5671: LD_INT 3
5673: PPUSH
5674: CALL_OW 12
5678: ST_TO_ADDR
// respawn := Rand ( 1 , 8 ) ;
5679: LD_ADDR_LOC 10
5683: PUSH
5684: LD_INT 1
5686: PPUSH
5687: LD_INT 8
5689: PPUSH
5690: CALL_OW 12
5694: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5695: LD_ADDR_LOC 11
5699: PUSH
5700: LD_INT 0
5702: PUSH
5703: LD_INT 0
5705: PUSH
5706: LD_INT 0
5708: PUSH
5709: LD_INT 0
5711: PUSH
5712: LD_INT 0
5714: PUSH
5715: LD_INT 0
5717: PUSH
5718: LD_INT 0
5720: PUSH
5721: LD_INT 0
5723: PUSH
5724: EMPTY
5725: LIST
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: ST_TO_ADDR
// end ;
5734: LD_VAR 0 1
5738: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
5739: GO 5741
5741: DISABLE
5742: LD_INT 0
5744: PPUSH
5745: PPUSH
5746: PPUSH
5747: PPUSH
// begin if respawning_time_max = 0 then
5748: LD_EXP 11
5752: PUSH
5753: LD_INT 0
5755: EQUAL
5756: IFFALSE 5760
// exit ;
5758: GO 6267
// if respawn = 8 then
5760: LD_LOC 10
5764: PUSH
5765: LD_INT 8
5767: EQUAL
5768: IFFALSE 5780
// respawn := 1 else
5770: LD_ADDR_LOC 10
5774: PUSH
5775: LD_INT 1
5777: ST_TO_ADDR
5778: GO 5794
// respawn := respawn + 1 ;
5780: LD_ADDR_LOC 10
5784: PUSH
5785: LD_LOC 10
5789: PUSH
5790: LD_INT 1
5792: PLUS
5793: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
5794: LD_EXP 20
5798: PUSH
5799: LD_LOC 10
5803: ARRAY
5804: PUSH
5805: LD_LOC 11
5809: PUSH
5810: LD_LOC 10
5814: ARRAY
5815: NOT
5816: AND
5817: IFFALSE 6266
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
5819: LD_ADDR_VAR 0 1
5823: PUSH
5824: LD_INT 21
5826: PUSH
5827: LD_INT 1
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: PUSH
5834: LD_INT 22
5836: PUSH
5837: LD_LOC 10
5841: PUSH
5842: EMPTY
5843: LIST
5844: LIST
5845: PUSH
5846: LD_INT 3
5848: PUSH
5849: LD_INT 23
5851: PUSH
5852: LD_INT 0
5854: PUSH
5855: EMPTY
5856: LIST
5857: LIST
5858: PUSH
5859: EMPTY
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: PPUSH
5865: CALL_OW 69
5869: ST_TO_ADDR
// if n < number_of_people then
5870: LD_VAR 0 1
5874: PUSH
5875: LD_EXP 4
5879: LESS
5880: IFFALSE 6263
// begin aktresp := respawn ;
5882: LD_ADDR_VAR 0 3
5886: PUSH
5887: LD_LOC 10
5891: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
5892: LD_ADDR_LOC 11
5896: PUSH
5897: LD_LOC 11
5901: PPUSH
5902: LD_VAR 0 3
5906: PPUSH
5907: LD_INT 1
5909: PPUSH
5910: CALL_OW 1
5914: ST_TO_ADDR
// enable ;
5915: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
5916: LD_EXP 10
5920: PPUSH
5921: LD_EXP 11
5925: PPUSH
5926: CALL_OW 12
5930: PPUSH
5931: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
5935: LD_ADDR_LOC 11
5939: PUSH
5940: LD_LOC 11
5944: PPUSH
5945: LD_VAR 0 3
5949: PPUSH
5950: LD_INT 0
5952: PPUSH
5953: CALL_OW 1
5957: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
5958: LD_ADDR_VAR 0 2
5962: PUSH
5963: LD_INT 21
5965: PUSH
5966: LD_INT 3
5968: PUSH
5969: EMPTY
5970: LIST
5971: LIST
5972: PUSH
5973: LD_INT 2
5975: PUSH
5976: LD_INT 30
5978: PUSH
5979: LD_INT 0
5981: PUSH
5982: EMPTY
5983: LIST
5984: LIST
5985: PUSH
5986: LD_INT 30
5988: PUSH
5989: LD_INT 1
5991: PUSH
5992: EMPTY
5993: LIST
5994: LIST
5995: PUSH
5996: EMPTY
5997: LIST
5998: LIST
5999: LIST
6000: PUSH
6001: LD_INT 50
6003: PUSH
6004: EMPTY
6005: LIST
6006: PUSH
6007: LD_INT 22
6009: PUSH
6010: LD_VAR 0 3
6014: PUSH
6015: EMPTY
6016: LIST
6017: LIST
6018: PUSH
6019: EMPTY
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: PPUSH
6025: CALL_OW 69
6029: ST_TO_ADDR
// if building_list = 0 then
6030: LD_VAR 0 2
6034: PUSH
6035: LD_INT 0
6037: EQUAL
6038: IFFALSE 6083
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
6040: LD_ADDR_VAR 0 2
6044: PUSH
6045: LD_INT 21
6047: PUSH
6048: LD_INT 3
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: PUSH
6055: LD_INT 50
6057: PUSH
6058: EMPTY
6059: LIST
6060: PUSH
6061: LD_INT 22
6063: PUSH
6064: LD_VAR 0 3
6068: PUSH
6069: EMPTY
6070: LIST
6071: LIST
6072: PUSH
6073: EMPTY
6074: LIST
6075: LIST
6076: LIST
6077: PPUSH
6078: CALL_OW 69
6082: ST_TO_ADDR
// if building_list = 0 then
6083: LD_VAR 0 2
6087: PUSH
6088: LD_INT 0
6090: EQUAL
6091: IFFALSE 6095
// exit ;
6093: GO 6267
// hc_name :=  ;
6095: LD_ADDR_OWVAR 26
6099: PUSH
6100: LD_STRING 
6102: ST_TO_ADDR
// hc_importance := 0 ;
6103: LD_ADDR_OWVAR 32
6107: PUSH
6108: LD_INT 0
6110: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6111: LD_INT 0
6113: PPUSH
6114: LD_INT 0
6116: PPUSH
6117: LD_EXP 5
6121: PUSH
6122: LD_INT 2
6124: DIV
6125: PPUSH
6126: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
6130: LD_ADDR_OWVAR 21
6134: PUSH
6135: LD_EXP 21
6139: PUSH
6140: LD_VAR 0 3
6144: ARRAY
6145: ST_TO_ADDR
// uc_side := aktresp ;
6146: LD_ADDR_OWVAR 20
6150: PUSH
6151: LD_VAR 0 3
6155: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
6156: LD_ADDR_VAR 0 4
6160: PUSH
6161: LD_VAR 0 2
6165: PUSH
6166: LD_INT 1
6168: PPUSH
6169: LD_VAR 0 2
6173: PUSH
6174: LD_INT 0
6176: PLUS
6177: PPUSH
6178: CALL_OW 12
6182: ARRAY
6183: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
6184: LD_VAR 0 4
6188: PPUSH
6189: CALL_OW 266
6193: PUSH
6194: LD_INT 0
6196: PUSH
6197: LD_INT 1
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: IN
6204: IFFALSE 6216
// n = 25 else
6206: LD_ADDR_VAR 0 1
6210: PUSH
6211: LD_INT 25
6213: ST_TO_ADDR
6214: GO 6224
// n = 10 ;
6216: LD_ADDR_VAR 0 1
6220: PUSH
6221: LD_INT 10
6223: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
6224: CALL_OW 44
6228: PPUSH
6229: LD_VAR 0 4
6233: PPUSH
6234: CALL_OW 250
6238: PPUSH
6239: LD_VAR 0 4
6243: PPUSH
6244: CALL_OW 251
6248: PPUSH
6249: LD_VAR 0 1
6253: PPUSH
6254: LD_INT 1
6256: PPUSH
6257: CALL_OW 50
// end else
6261: GO 6264
// enable ;
6263: ENABLE
// end else
6264: GO 6267
// enable ;
6266: ENABLE
// end ;
6267: PPOPN 4
6269: END
// every 0 0$5 + 0 0$1.1 do var d ;
6270: GO 6272
6272: DISABLE
6273: LD_INT 0
6275: PPUSH
// begin case tick of 1 .. 1 1$0 :
6276: LD_OWVAR 1
6280: PUSH
6281: LD_INT 1
6283: DOUBLE
6284: GREATEREQUAL
6285: IFFALSE 6293
6287: LD_INT 2100
6289: DOUBLE
6290: LESSEQUAL
6291: IFTRUE 6295
6293: GO 6306
6295: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
6296: LD_ADDR_VAR 0 1
6300: PUSH
6301: LD_INT 150
6303: ST_TO_ADDR
6304: GO 6489
6306: LD_INT 2100
6308: PUSH
6309: LD_INT 1
6311: PLUS
6312: DOUBLE
6313: GREATEREQUAL
6314: IFFALSE 6322
6316: LD_INT 10500
6318: DOUBLE
6319: LESSEQUAL
6320: IFTRUE 6324
6322: GO 6335
6324: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
6325: LD_ADDR_VAR 0 1
6329: PUSH
6330: LD_INT 100
6332: ST_TO_ADDR
6333: GO 6489
6335: LD_INT 10500
6337: PUSH
6338: LD_INT 1
6340: PLUS
6341: DOUBLE
6342: GREATEREQUAL
6343: IFFALSE 6351
6345: LD_INT 21000
6347: DOUBLE
6348: LESSEQUAL
6349: IFTRUE 6353
6351: GO 6364
6353: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
6354: LD_ADDR_VAR 0 1
6358: PUSH
6359: LD_INT 90
6361: ST_TO_ADDR
6362: GO 6489
6364: LD_INT 21000
6366: PUSH
6367: LD_INT 1
6369: PLUS
6370: DOUBLE
6371: GREATEREQUAL
6372: IFFALSE 6380
6374: LD_INT 42000
6376: DOUBLE
6377: LESSEQUAL
6378: IFTRUE 6382
6380: GO 6393
6382: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
6383: LD_ADDR_VAR 0 1
6387: PUSH
6388: LD_INT 70
6390: ST_TO_ADDR
6391: GO 6489
6393: LD_INT 42000
6395: PUSH
6396: LD_INT 1
6398: PLUS
6399: DOUBLE
6400: GREATEREQUAL
6401: IFFALSE 6409
6403: LD_INT 63000
6405: DOUBLE
6406: LESSEQUAL
6407: IFTRUE 6411
6409: GO 6422
6411: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
6412: LD_ADDR_VAR 0 1
6416: PUSH
6417: LD_INT 60
6419: ST_TO_ADDR
6420: GO 6489
6422: LD_INT 63000
6424: PUSH
6425: LD_INT 1
6427: PLUS
6428: DOUBLE
6429: GREATEREQUAL
6430: IFFALSE 6438
6432: LD_INT 105000
6434: DOUBLE
6435: LESSEQUAL
6436: IFTRUE 6440
6438: GO 6451
6440: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
6441: LD_ADDR_VAR 0 1
6445: PUSH
6446: LD_INT 35
6448: ST_TO_ADDR
6449: GO 6489
6451: LD_INT 105000
6453: PUSH
6454: LD_INT 1
6456: PLUS
6457: DOUBLE
6458: GREATEREQUAL
6459: IFFALSE 6467
6461: LD_INT 630000
6463: DOUBLE
6464: LESSEQUAL
6465: IFTRUE 6469
6467: GO 6480
6469: POP
// d := 20 ; else
6470: LD_ADDR_VAR 0 1
6474: PUSH
6475: LD_INT 20
6477: ST_TO_ADDR
6478: GO 6489
6480: POP
// d := 0 ; end ;
6481: LD_ADDR_VAR 0 1
6485: PUSH
6486: LD_INT 0
6488: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
6489: LD_INT 1
6491: PPUSH
6492: LD_INT 10000
6494: PPUSH
6495: CALL_OW 12
6499: PUSH
6500: LD_VAR 0 1
6504: PUSH
6505: LD_EXP 8
6509: MUL
6510: LESSEQUAL
6511: IFFALSE 6565
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
6513: LD_INT 1
6515: PPUSH
6516: LD_INT 140
6518: PPUSH
6519: CALL_OW 12
6523: PPUSH
6524: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
6528: LD_ADDR_LOC 9
6532: PUSH
6533: LD_LOC 9
6537: PUSH
6538: LD_INT 1
6540: PLUS
6541: PUSH
6542: LD_INT 4
6544: MOD
6545: ST_TO_ADDR
// CreateCratesArea ( 5 , q1 + shipment , true ) ;
6546: LD_INT 5
6548: PPUSH
6549: LD_INT 4
6551: PUSH
6552: LD_LOC 9
6556: PLUS
6557: PPUSH
6558: LD_INT 1
6560: PPUSH
6561: CALL_OW 55
// end ; enable ;
6565: ENABLE
// end ; end_of_file
6566: PPOPN 1
6568: END
// var activated ; var hadziove ; every 0 0$1 do
6569: GO 6571
6571: DISABLE
// begin wait ( Rand ( 3 3$0 , 10 10$0 ) ) ;
6572: LD_INT 6300
6574: PPUSH
6575: LD_INT 21000
6577: PPUSH
6578: CALL_OW 12
6582: PPUSH
6583: CALL_OW 67
// SetAreaMapShow ( Tree , 1 ) ;
6587: LD_INT 3
6589: PPUSH
6590: LD_INT 1
6592: PPUSH
6593: CALL_OW 424
// activated := true ;
6597: LD_ADDR_LOC 12
6601: PUSH
6602: LD_INT 1
6604: ST_TO_ADDR
// end ;
6605: END
// every 0 0$1 trigger activated do var i , un ;
6606: LD_LOC 12
6610: IFFALSE 6855
6612: GO 6614
6614: DISABLE
6615: LD_INT 0
6617: PPUSH
6618: PPUSH
// begin if not def_tree_function then
6619: LD_EXP 1
6623: NOT
6624: IFFALSE 6628
// exit ;
6626: GO 6855
// ExtraStrings := [ #MultiSmall-Tree & def_tree_function ] ;
6628: LD_ADDR_EXP 53
6632: PUSH
6633: LD_STRING #MultiSmall-Tree
6635: PUSH
6636: LD_EXP 1
6640: STR
6641: PUSH
6642: EMPTY
6643: LIST
6644: ST_TO_ADDR
// for un in FilterUnitsInArea ( Tree , [ f_type , unit_human ] ) diff hadziove do
6645: LD_ADDR_VAR 0 2
6649: PUSH
6650: LD_INT 3
6652: PPUSH
6653: LD_INT 21
6655: PUSH
6656: LD_INT 1
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: PPUSH
6663: CALL_OW 70
6667: PUSH
6668: LD_LOC 13
6672: DIFF
6673: PUSH
6674: FOR_IN
6675: IFFALSE 6836
// begin if GetClass ( un ) in [ class_soldier , class_engineer , class_mechanic , class_scientistic , class_sniper , class_bazooker , class_mortar ] then
6677: LD_VAR 0 2
6681: PPUSH
6682: CALL_OW 257
6686: PUSH
6687: LD_INT 1
6689: PUSH
6690: LD_INT 2
6692: PUSH
6693: LD_INT 3
6695: PUSH
6696: LD_INT 4
6698: PUSH
6699: LD_INT 5
6701: PUSH
6702: LD_INT 9
6704: PUSH
6705: LD_INT 8
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: IN
6717: IFFALSE 6766
// for i := 1 to 4 do
6719: LD_ADDR_VAR 0 1
6723: PUSH
6724: DOUBLE
6725: LD_INT 1
6727: DEC
6728: ST_TO_ADDR
6729: LD_INT 4
6731: PUSH
6732: FOR_TO
6733: IFFALSE 6762
// GiveSkillBonus ( un , i , tree_function [ i ] ) else
6735: LD_VAR 0 2
6739: PPUSH
6740: LD_VAR 0 1
6744: PPUSH
6745: LD_EXP 14
6749: PUSH
6750: LD_VAR 0 1
6754: ARRAY
6755: PPUSH
6756: CALL_OW 238
6760: GO 6732
6762: POP
6763: POP
6764: GO 6834
// if un in [ class_apeman , class_apeman_engineer , class_apeman_kamikaze , class_apeman_soldier ] then
6766: LD_VAR 0 2
6770: PUSH
6771: LD_INT 12
6773: PUSH
6774: LD_INT 16
6776: PUSH
6777: LD_INT 17
6779: PUSH
6780: LD_INT 15
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: IN
6789: IFFALSE 6834
// for i := 1 to 4 do
6791: LD_ADDR_VAR 0 1
6795: PUSH
6796: DOUBLE
6797: LD_INT 1
6799: DEC
6800: ST_TO_ADDR
6801: LD_INT 4
6803: PUSH
6804: FOR_TO
6805: IFFALSE 6832
// GiveSkillBonus ( un , i , tree_function [ 5 ] ) ;
6807: LD_VAR 0 2
6811: PPUSH
6812: LD_VAR 0 1
6816: PPUSH
6817: LD_EXP 14
6821: PUSH
6822: LD_INT 5
6824: ARRAY
6825: PPUSH
6826: CALL_OW 238
6830: GO 6804
6832: POP
6833: POP
// end ;
6834: GO 6674
6836: POP
6837: POP
// hadziove := hadziove ^ un ;
6838: LD_ADDR_LOC 13
6842: PUSH
6843: LD_LOC 13
6847: PUSH
6848: LD_VAR 0 2
6852: ADD
6853: ST_TO_ADDR
// enable ;
6854: ENABLE
// end ; end_of_file
6855: PPOPN 2
6857: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6858: LD_VAR 0 1
6862: PPUSH
6863: CALL_OW 266
6867: PUSH
6868: LD_INT 0
6870: PUSH
6871: LD_INT 1
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: IN
6878: IFFALSE 6903
// SetBName ( b , @ & GetSide ( b ) ) ;
6880: LD_VAR 0 1
6884: PPUSH
6885: LD_STRING @
6887: PUSH
6888: LD_VAR 0 1
6892: PPUSH
6893: CALL_OW 255
6897: STR
6898: PPUSH
6899: CALL_OW 500
// if def_game_rules then
6903: LD_EXP 37
6907: IFFALSE 6944
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
6909: LD_VAR 0 1
6913: PPUSH
6914: LD_VAR 0 1
6918: PPUSH
6919: CALL_OW 266
6923: PPUSH
6924: LD_VAR 0 1
6928: PPUSH
6929: CALL_OW 255
6933: PPUSH
6934: LD_INT 0
6936: PPUSH
6937: LD_INT 1
6939: PPUSH
6940: CALL 10364 0 5
// end ;
6944: PPOPN 2
6946: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6947: LD_VAR 0 1
6951: PPUSH
6952: CALL_OW 266
6956: PUSH
6957: LD_INT 0
6959: PUSH
6960: LD_INT 1
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: IN
6967: IFFALSE 6992
// SetBName ( b , @ & GetSide ( b ) ) ;
6969: LD_VAR 0 1
6973: PPUSH
6974: LD_STRING @
6976: PUSH
6977: LD_VAR 0 1
6981: PPUSH
6982: CALL_OW 255
6986: STR
6987: PPUSH
6988: CALL_OW 500
// if def_game_rules then
6992: LD_EXP 37
6996: IFFALSE 7035
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
6998: LD_VAR 0 1
7002: PPUSH
7003: LD_VAR 0 1
7007: PPUSH
7008: CALL_OW 266
7012: PPUSH
7013: LD_VAR 0 1
7017: PPUSH
7018: CALL_OW 255
7022: PPUSH
7023: LD_VAR 0 2
7027: PPUSH
7028: LD_INT 1
7030: PPUSH
7031: CALL 10364 0 5
// end ;
7035: PPOPN 3
7037: END
// on VehicleConstructed ( veh , fac ) do var side ;
7038: LD_INT 0
7040: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7041: LD_VAR 0 1
7045: PPUSH
7046: CALL_OW 263
7050: PUSH
7051: LD_INT 5
7053: EQUAL
7054: IFFALSE 7196
// begin side := GetSide ( veh ) ;
7056: LD_ADDR_VAR 0 3
7060: PUSH
7061: LD_VAR 0 1
7065: PPUSH
7066: CALL_OW 255
7070: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7071: LD_ADDR_EXP 32
7075: PUSH
7076: LD_EXP 32
7080: PPUSH
7081: LD_VAR 0 3
7085: PPUSH
7086: LD_EXP 32
7090: PUSH
7091: LD_VAR 0 3
7095: ARRAY
7096: PPUSH
7097: LD_INT 52
7099: PUSH
7100: EMPTY
7101: LIST
7102: PPUSH
7103: CALL_OW 72
7107: PUSH
7108: LD_INT 22
7110: PUSH
7111: LD_VAR 0 3
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: PUSH
7120: LD_INT 2
7122: PUSH
7123: LD_INT 33
7125: PUSH
7126: LD_INT 5
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: PUSH
7133: LD_INT 25
7135: PUSH
7136: LD_INT 12
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: PUSH
7143: LD_INT 25
7145: PUSH
7146: LD_INT 15
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: PUSH
7153: LD_INT 25
7155: PUSH
7156: LD_INT 16
7158: PUSH
7159: EMPTY
7160: LIST
7161: LIST
7162: PUSH
7163: LD_INT 25
7165: PUSH
7166: LD_INT 17
7168: PUSH
7169: EMPTY
7170: LIST
7171: LIST
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PPUSH
7185: CALL_OW 69
7189: UNION
7190: PPUSH
7191: CALL_OW 1
7195: ST_TO_ADDR
// end ; end ;
7196: PPOPN 3
7198: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7199: LD_INT 0
7201: PPUSH
7202: PPUSH
7203: PPUSH
7204: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7205: LD_VAR 0 1
7209: PPUSH
7210: CALL_OW 257
7214: PUSH
7215: LD_INT 12
7217: PUSH
7218: LD_INT 15
7220: PUSH
7221: LD_INT 17
7223: PUSH
7224: LD_INT 16
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: IN
7233: PUSH
7234: LD_VAR 0 1
7238: PPUSH
7239: CALL_OW 263
7243: PUSH
7244: LD_INT 5
7246: EQUAL
7247: OR
7248: IFFALSE 7259
// ApeKilled ( j ) ;
7250: LD_VAR 0 1
7254: PPUSH
7255: CALL 5516 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7259: LD_VAR 0 1
7263: PPUSH
7264: CALL_OW 266
7268: PUSH
7269: LD_INT 0
7271: PUSH
7272: LD_INT 1
7274: PUSH
7275: EMPTY
7276: LIST
7277: LIST
7278: IN
7279: IFFALSE 7361
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7281: LD_ADDR_VAR 0 4
7285: PUSH
7286: LD_EXP 20
7290: PUSH
7291: LD_VAR 0 1
7295: PPUSH
7296: CALL_OW 255
7300: ARRAY
7301: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7302: LD_ADDR_VAR 0 2
7306: PUSH
7307: LD_EXP 26
7311: PUSH
7312: LD_VAR 0 4
7316: ARRAY
7317: PUSH
7318: LD_INT 1
7320: ARRAY
7321: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7322: LD_ADDR_VAR 0 3
7326: PUSH
7327: LD_EXP 26
7331: PUSH
7332: LD_VAR 0 4
7336: ARRAY
7337: PUSH
7338: LD_INT 2
7340: ARRAY
7341: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7342: LD_VAR 0 2
7346: PPUSH
7347: LD_VAR 0 3
7351: PPUSH
7352: CALL_OW 420
7356: PPUSH
7357: CALL_OW 419
// end ; if def_game_rules then
7361: LD_EXP 37
7365: IFFALSE 7464
// if ( GetType ( j ) = 3 ) then
7367: LD_VAR 0 1
7371: PPUSH
7372: CALL_OW 247
7376: PUSH
7377: LD_INT 3
7379: EQUAL
7380: IFFALSE 7420
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7382: LD_VAR 0 1
7386: PPUSH
7387: LD_VAR 0 1
7391: PPUSH
7392: CALL_OW 266
7396: PPUSH
7397: LD_VAR 0 1
7401: PPUSH
7402: CALL_OW 255
7406: PPUSH
7407: LD_INT 0
7409: PPUSH
7410: LD_INT 1
7412: NEG
7413: PPUSH
7414: CALL 10364 0 5
7418: GO 7464
// if ( GetChassis ( j ) = 25 ) then
7420: LD_VAR 0 1
7424: PPUSH
7425: CALL_OW 265
7429: PUSH
7430: LD_INT 25
7432: EQUAL
7433: IFFALSE 7464
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7435: LD_VAR 0 1
7439: PPUSH
7440: LD_INT 37
7442: PPUSH
7443: LD_VAR 0 1
7447: PPUSH
7448: CALL_OW 255
7452: PPUSH
7453: LD_INT 0
7455: PPUSH
7456: LD_INT 1
7458: NEG
7459: PPUSH
7460: CALL 10364 0 5
// end ;
7464: PPOPN 5
7466: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7467: LD_EXP 37
7471: PUSH
7472: LD_VAR 0 1
7476: PPUSH
7477: CALL_OW 265
7481: PUSH
7482: LD_INT 25
7484: EQUAL
7485: AND
7486: IFFALSE 7518
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
7488: LD_VAR 0 1
7492: PPUSH
7493: LD_INT 37
7495: PPUSH
7496: LD_VAR 0 1
7500: PPUSH
7501: CALL_OW 255
7505: PPUSH
7506: LD_VAR 0 3
7510: PPUSH
7511: LD_INT 1
7513: PPUSH
7514: CALL 10364 0 5
// end ;
7518: PPOPN 4
7520: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7521: LD_VAR 0 1
7525: PPUSH
7526: LD_VAR 0 2
7530: PPUSH
7531: LD_VAR 0 3
7535: PPUSH
7536: LD_OWVAR 2
7540: PPUSH
7541: CALL 11109 0 4
7545: PPOPN 3
7547: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7548: LD_INT 0
7550: PPUSH
7551: PPUSH
// for un in battle_flags_id do
7552: LD_ADDR_VAR 0 2
7556: PUSH
7557: LD_EXP 27
7561: PUSH
7562: FOR_IN
7563: IFFALSE 7638
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7565: LD_VAR 0 2
7569: PPUSH
7570: LD_INT 1
7572: PUSH
7573: LD_LOC 14
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: PUSH
7582: LD_INT 2
7584: PUSH
7585: LD_LOC 14
7589: PUSH
7590: LD_INT 2
7592: DIV
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: PUSH
7598: LD_INT 3
7600: PUSH
7601: LD_LOC 14
7605: PUSH
7606: LD_INT 5
7608: DIV
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: PUSH
7614: LD_INT 20
7616: PUSH
7617: LD_LOC 14
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: PPUSH
7632: CALL_OW 423
7636: GO 7562
7638: POP
7639: POP
// end ;
7640: LD_VAR 0 1
7644: RET
// every 0 0$0.1 do var un ;
7645: GO 7647
7647: DISABLE
7648: LD_INT 0
7650: PPUSH
// begin if not def_morale_flags then
7651: LD_EXP 46
7655: NOT
7656: IFFALSE 7660
// exit ;
7658: GO 7737
// if not morale_decreasing_time then
7660: LD_EXP 9
7664: NOT
7665: IFFALSE 7669
// exit ;
7667: GO 7737
// strength = 100 ;
7669: LD_ADDR_LOC 14
7673: PUSH
7674: LD_INT 100
7676: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7677: LD_EXP 9
7681: PPUSH
7682: CALL_OW 67
// strength := strength - 1 ;
7686: LD_ADDR_LOC 14
7690: PUSH
7691: LD_LOC 14
7695: PUSH
7696: LD_INT 1
7698: MINUS
7699: ST_TO_ADDR
// Update_Flags ;
7700: CALL 7548 0 0
// until not strength ;
7704: LD_LOC 14
7708: NOT
7709: IFFALSE 7677
// for un in battle_flags_id do
7711: LD_ADDR_VAR 0 1
7715: PUSH
7716: LD_EXP 27
7720: PUSH
7721: FOR_IN
7722: IFFALSE 7735
// KillBattleFlag ( un ) ;
7724: LD_VAR 0 1
7728: PPUSH
7729: CALL_OW 419
7733: GO 7721
7735: POP
7736: POP
// end ; end_of_file
7737: PPOPN 1
7739: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
7740: LD_INT 0
7742: PPUSH
7743: PPUSH
// if ( not IAmSpec ) then
7744: CALL_OW 531
7748: NOT
7749: IFFALSE 7765
// Result := Limits_Info ^  ;
7751: LD_ADDR_VAR 0 1
7755: PUSH
7756: LD_LOC 26
7760: PUSH
7761: LD_STRING 
7763: ADD
7764: ST_TO_ADDR
// for i := 1 to 8 do
7765: LD_ADDR_VAR 0 2
7769: PUSH
7770: DOUBLE
7771: LD_INT 1
7773: DEC
7774: ST_TO_ADDR
7775: LD_INT 8
7777: PUSH
7778: FOR_TO
7779: IFFALSE 7824
// if Cheaters [ i ] then
7781: LD_LOC 27
7785: PUSH
7786: LD_VAR 0 2
7790: ARRAY
7791: IFFALSE 7822
// Result := Result ^ [ #Cheater , i , i ] ;
7793: LD_ADDR_VAR 0 1
7797: PUSH
7798: LD_VAR 0 1
7802: PUSH
7803: LD_STRING #Cheater
7805: PUSH
7806: LD_VAR 0 2
7810: PUSH
7811: LD_VAR 0 2
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: LIST
7820: ADD
7821: ST_TO_ADDR
7822: GO 7778
7824: POP
7825: POP
// end ;
7826: LD_VAR 0 1
7830: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
7831: LD_INT 0
7833: PPUSH
7834: PPUSH
7835: PPUSH
7836: PPUSH
7837: PPUSH
// case Game_Type of 10 :
7838: LD_EXP 36
7842: PUSH
7843: LD_INT 10
7845: DOUBLE
7846: EQUAL
7847: IFTRUE 7851
7849: GO 7862
7851: POP
// def_game_rules := 1 ; 11 :
7852: LD_ADDR_EXP 37
7856: PUSH
7857: LD_INT 1
7859: ST_TO_ADDR
7860: GO 7882
7862: LD_INT 11
7864: DOUBLE
7865: EQUAL
7866: IFTRUE 7870
7868: GO 7881
7870: POP
// def_game_rules := 3 ; end ;
7871: LD_ADDR_EXP 37
7875: PUSH
7876: LD_INT 3
7878: ST_TO_ADDR
7879: GO 7882
7881: POP
// case def_game_rules of 0 :
7882: LD_EXP 37
7886: PUSH
7887: LD_INT 0
7889: DOUBLE
7890: EQUAL
7891: IFTRUE 7895
7893: GO 7900
7895: POP
// exit ; 1 :
7896: GO 9958
7898: GO 9858
7900: LD_INT 1
7902: DOUBLE
7903: EQUAL
7904: IFTRUE 7908
7906: GO 8124
7908: POP
// begin def_base_level := 2 ;
7909: LD_ADDR_EXP 38
7913: PUSH
7914: LD_INT 2
7916: ST_TO_ADDR
// def_amount_of_people := 2 ;
7917: LD_ADDR_EXP 39
7921: PUSH
7922: LD_INT 2
7924: ST_TO_ADDR
// def_skill_level := 1 ;
7925: LD_ADDR_EXP 40
7929: PUSH
7930: LD_INT 1
7932: ST_TO_ADDR
// def_starting_resources := 2 ;
7933: LD_ADDR_EXP 41
7937: PUSH
7938: LD_INT 2
7940: ST_TO_ADDR
// def_shipments_density := 1 ;
7941: LD_ADDR_EXP 42
7945: PUSH
7946: LD_INT 1
7948: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
7949: LD_ADDR_EXP 43
7953: PUSH
7954: LD_INT 0
7956: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
7957: LD_ADDR_EXP 44
7961: PUSH
7962: LD_INT 1
7964: ST_TO_ADDR
// def_shared_vision := 1 ;
7965: LD_ADDR_EXP 45
7969: PUSH
7970: LD_INT 1
7972: ST_TO_ADDR
// def_morale_flags := 3 ;
7973: LD_ADDR_EXP 46
7977: PUSH
7978: LD_INT 3
7980: ST_TO_ADDR
// def_siberite_detection := 1 ;
7981: LD_ADDR_EXP 47
7985: PUSH
7986: LD_INT 1
7988: ST_TO_ADDR
// def_people_respawning := 1 ;
7989: LD_ADDR_EXP 48
7993: PUSH
7994: LD_INT 1
7996: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
7997: LD_ADDR_EXP 49
8001: PUSH
8002: LD_INT 1
8004: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8005: LD_ADDR_EXP 50
8009: PUSH
8010: LD_INT 0
8012: ST_TO_ADDR
// def_builduptime := 2 ;
8013: LD_ADDR_EXP 51
8017: PUSH
8018: LD_INT 2
8020: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
8021: LD_ADDR_VAR 0 2
8025: PUSH
8026: EMPTY
8027: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8028: LD_ADDR_VAR 0 3
8032: PUSH
8033: EMPTY
8034: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8035: LD_ADDR_LOC 21
8039: PUSH
8040: EMPTY
8041: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8042: LD_ADDR_LOC 22
8046: PUSH
8047: EMPTY
8048: ST_TO_ADDR
// Banned_Controls := [ ] ;
8049: LD_ADDR_LOC 23
8053: PUSH
8054: EMPTY
8055: ST_TO_ADDR
// Banned_Engines := [ ] ;
8056: LD_ADDR_LOC 24
8060: PUSH
8061: EMPTY
8062: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
8063: LD_ADDR_LOC 19
8067: PUSH
8068: LD_INT 37
8070: PUSH
8071: EMPTY
8072: LIST
8073: PUSH
8074: LD_INT 4
8076: PUSH
8077: LD_INT 5
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: PUSH
8084: LD_INT 31
8086: PUSH
8087: LD_INT 32
8089: PUSH
8090: LD_INT 33
8092: PUSH
8093: EMPTY
8094: LIST
8095: LIST
8096: LIST
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: LIST
8102: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
8103: LD_ADDR_LOC 20
8107: PUSH
8108: LD_INT 2
8110: PUSH
8111: LD_INT 2
8113: PUSH
8114: LD_INT 4
8116: PUSH
8117: EMPTY
8118: LIST
8119: LIST
8120: LIST
8121: ST_TO_ADDR
// end ; 2 :
8122: GO 9858
8124: LD_INT 2
8126: DOUBLE
8127: EQUAL
8128: IFTRUE 8132
8130: GO 8341
8132: POP
// begin def_base_level := 1 ;
8133: LD_ADDR_EXP 38
8137: PUSH
8138: LD_INT 1
8140: ST_TO_ADDR
// def_amount_of_people := 2 ;
8141: LD_ADDR_EXP 39
8145: PUSH
8146: LD_INT 2
8148: ST_TO_ADDR
// def_skill_level := 3 ;
8149: LD_ADDR_EXP 40
8153: PUSH
8154: LD_INT 3
8156: ST_TO_ADDR
// def_starting_resources := 3 ;
8157: LD_ADDR_EXP 41
8161: PUSH
8162: LD_INT 3
8164: ST_TO_ADDR
// def_shipments_density := 2 ;
8165: LD_ADDR_EXP 42
8169: PUSH
8170: LD_INT 2
8172: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8173: LD_ADDR_EXP 43
8177: PUSH
8178: LD_INT 1
8180: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8181: LD_ADDR_EXP 44
8185: PUSH
8186: LD_INT 2
8188: ST_TO_ADDR
// def_shared_vision := 1 ;
8189: LD_ADDR_EXP 45
8193: PUSH
8194: LD_INT 1
8196: ST_TO_ADDR
// def_morale_flags := 0 ;
8197: LD_ADDR_EXP 46
8201: PUSH
8202: LD_INT 0
8204: ST_TO_ADDR
// def_siberite_detection := 1 ;
8205: LD_ADDR_EXP 47
8209: PUSH
8210: LD_INT 1
8212: ST_TO_ADDR
// def_people_respawning := 0 ;
8213: LD_ADDR_EXP 48
8217: PUSH
8218: LD_INT 0
8220: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
8221: LD_ADDR_EXP 49
8225: PUSH
8226: LD_INT 0
8228: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8229: LD_ADDR_EXP 50
8233: PUSH
8234: LD_INT 0
8236: ST_TO_ADDR
// def_builduptime := 2 ;
8237: LD_ADDR_EXP 51
8241: PUSH
8242: LD_INT 2
8244: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
8245: LD_ADDR_VAR 0 2
8249: PUSH
8250: LD_INT 1
8252: PUSH
8253: EMPTY
8254: LIST
8255: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8256: LD_ADDR_VAR 0 3
8260: PUSH
8261: EMPTY
8262: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8263: LD_ADDR_LOC 21
8267: PUSH
8268: EMPTY
8269: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8270: LD_ADDR_LOC 22
8274: PUSH
8275: EMPTY
8276: ST_TO_ADDR
// Banned_Controls := [ ] ;
8277: LD_ADDR_LOC 23
8281: PUSH
8282: EMPTY
8283: ST_TO_ADDR
// Banned_Engines := [ ] ;
8284: LD_ADDR_LOC 24
8288: PUSH
8289: EMPTY
8290: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
8291: LD_ADDR_LOC 19
8295: PUSH
8296: LD_INT 4
8298: PUSH
8299: LD_INT 5
8301: PUSH
8302: EMPTY
8303: LIST
8304: LIST
8305: PUSH
8306: LD_INT 31
8308: PUSH
8309: LD_INT 32
8311: PUSH
8312: LD_INT 33
8314: PUSH
8315: EMPTY
8316: LIST
8317: LIST
8318: LIST
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
8324: LD_ADDR_LOC 20
8328: PUSH
8329: LD_INT 1
8331: PUSH
8332: LD_INT 2
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: ST_TO_ADDR
// end ; 3 :
8339: GO 9858
8341: LD_INT 3
8343: DOUBLE
8344: EQUAL
8345: IFTRUE 8349
8347: GO 8592
8349: POP
// begin def_base_level := 1 ;
8350: LD_ADDR_EXP 38
8354: PUSH
8355: LD_INT 1
8357: ST_TO_ADDR
// def_amount_of_people := 2 ;
8358: LD_ADDR_EXP 39
8362: PUSH
8363: LD_INT 2
8365: ST_TO_ADDR
// def_skill_level := 3 ;
8366: LD_ADDR_EXP 40
8370: PUSH
8371: LD_INT 3
8373: ST_TO_ADDR
// def_starting_resources := 3 ;
8374: LD_ADDR_EXP 41
8378: PUSH
8379: LD_INT 3
8381: ST_TO_ADDR
// def_shipments_density := 1 ;
8382: LD_ADDR_EXP 42
8386: PUSH
8387: LD_INT 1
8389: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8390: LD_ADDR_EXP 43
8394: PUSH
8395: LD_INT 0
8397: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
8398: LD_ADDR_EXP 44
8402: PUSH
8403: LD_INT 1
8405: ST_TO_ADDR
// def_shared_vision := 1 ;
8406: LD_ADDR_EXP 45
8410: PUSH
8411: LD_INT 1
8413: ST_TO_ADDR
// def_morale_flags := 0 ;
8414: LD_ADDR_EXP 46
8418: PUSH
8419: LD_INT 0
8421: ST_TO_ADDR
// def_siberite_detection := 1 ;
8422: LD_ADDR_EXP 47
8426: PUSH
8427: LD_INT 1
8429: ST_TO_ADDR
// def_people_respawning := 0 ;
8430: LD_ADDR_EXP 48
8434: PUSH
8435: LD_INT 0
8437: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
8438: LD_ADDR_EXP 49
8442: PUSH
8443: LD_INT 2
8445: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8446: LD_ADDR_EXP 50
8450: PUSH
8451: LD_INT 0
8453: ST_TO_ADDR
// def_builduptime := 1 ;
8454: LD_ADDR_EXP 51
8458: PUSH
8459: LD_INT 1
8461: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
8462: LD_ADDR_VAR 0 2
8466: PUSH
8467: LD_INT 23
8469: PUSH
8470: EMPTY
8471: LIST
8472: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
8473: LD_ADDR_VAR 0 3
8477: PUSH
8478: LD_INT 2
8480: PUSH
8481: LD_INT 37
8483: PUSH
8484: LD_INT 32
8486: PUSH
8487: LD_INT 33
8489: PUSH
8490: LD_INT 36
8492: PUSH
8493: LD_INT 16
8495: PUSH
8496: LD_INT 23
8498: PUSH
8499: LD_INT 21
8501: PUSH
8502: LD_INT 18
8504: PUSH
8505: LD_INT 22
8507: PUSH
8508: LD_INT 20
8510: PUSH
8511: LD_INT 19
8513: PUSH
8514: LD_INT 25
8516: PUSH
8517: LD_INT 17
8519: PUSH
8520: LD_INT 24
8522: PUSH
8523: EMPTY
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8540: LD_ADDR_LOC 21
8544: PUSH
8545: EMPTY
8546: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8547: LD_ADDR_LOC 22
8551: PUSH
8552: EMPTY
8553: ST_TO_ADDR
// Banned_Controls := [ ] ;
8554: LD_ADDR_LOC 23
8558: PUSH
8559: EMPTY
8560: ST_TO_ADDR
// Banned_Engines := [ ] ;
8561: LD_ADDR_LOC 24
8565: PUSH
8566: EMPTY
8567: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8568: LD_ADDR_LOC 19
8572: PUSH
8573: EMPTY
8574: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8575: LD_ADDR_LOC 20
8579: PUSH
8580: EMPTY
8581: ST_TO_ADDR
// No_Mechs := true ;
8582: LD_ADDR_EXP 52
8586: PUSH
8587: LD_INT 1
8589: ST_TO_ADDR
// end ; 4 :
8590: GO 9858
8592: LD_INT 4
8594: DOUBLE
8595: EQUAL
8596: IFTRUE 8600
8598: GO 8775
8600: POP
// begin def_base_level := 1 ;
8601: LD_ADDR_EXP 38
8605: PUSH
8606: LD_INT 1
8608: ST_TO_ADDR
// def_amount_of_people := 2 ;
8609: LD_ADDR_EXP 39
8613: PUSH
8614: LD_INT 2
8616: ST_TO_ADDR
// def_skill_level := 3 ;
8617: LD_ADDR_EXP 40
8621: PUSH
8622: LD_INT 3
8624: ST_TO_ADDR
// def_starting_resources := 3 ;
8625: LD_ADDR_EXP 41
8629: PUSH
8630: LD_INT 3
8632: ST_TO_ADDR
// def_shipments_density := 2 ;
8633: LD_ADDR_EXP 42
8637: PUSH
8638: LD_INT 2
8640: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8641: LD_ADDR_EXP 43
8645: PUSH
8646: LD_INT 1
8648: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8649: LD_ADDR_EXP 44
8653: PUSH
8654: LD_INT 2
8656: ST_TO_ADDR
// def_shared_vision := 1 ;
8657: LD_ADDR_EXP 45
8661: PUSH
8662: LD_INT 1
8664: ST_TO_ADDR
// def_morale_flags := 0 ;
8665: LD_ADDR_EXP 46
8669: PUSH
8670: LD_INT 0
8672: ST_TO_ADDR
// def_siberite_detection := 1 ;
8673: LD_ADDR_EXP 47
8677: PUSH
8678: LD_INT 1
8680: ST_TO_ADDR
// def_people_respawning := 0 ;
8681: LD_ADDR_EXP 48
8685: PUSH
8686: LD_INT 0
8688: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
8689: LD_ADDR_EXP 49
8693: PUSH
8694: LD_INT 0
8696: ST_TO_ADDR
// def_siberite_bomb := 1 ;
8697: LD_ADDR_EXP 50
8701: PUSH
8702: LD_INT 1
8704: ST_TO_ADDR
// def_builduptime := 3 ;
8705: LD_ADDR_EXP 51
8709: PUSH
8710: LD_INT 3
8712: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
8713: LD_ADDR_VAR 0 2
8717: PUSH
8718: LD_INT 1
8720: PUSH
8721: EMPTY
8722: LIST
8723: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8724: LD_ADDR_VAR 0 3
8728: PUSH
8729: EMPTY
8730: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8731: LD_ADDR_LOC 21
8735: PUSH
8736: EMPTY
8737: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8738: LD_ADDR_LOC 22
8742: PUSH
8743: EMPTY
8744: ST_TO_ADDR
// Banned_Controls := [ ] ;
8745: LD_ADDR_LOC 23
8749: PUSH
8750: EMPTY
8751: ST_TO_ADDR
// Banned_Engines := [ ] ;
8752: LD_ADDR_LOC 24
8756: PUSH
8757: EMPTY
8758: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8759: LD_ADDR_LOC 19
8763: PUSH
8764: EMPTY
8765: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8766: LD_ADDR_LOC 20
8770: PUSH
8771: EMPTY
8772: ST_TO_ADDR
// end ; 5 :
8773: GO 9858
8775: LD_INT 5
8777: DOUBLE
8778: EQUAL
8779: IFTRUE 8783
8781: GO 9032
8783: POP
// begin def_base_level := 0 ;
8784: LD_ADDR_EXP 38
8788: PUSH
8789: LD_INT 0
8791: ST_TO_ADDR
// def_amount_of_people := 0 ;
8792: LD_ADDR_EXP 39
8796: PUSH
8797: LD_INT 0
8799: ST_TO_ADDR
// def_skill_level := 0 ;
8800: LD_ADDR_EXP 40
8804: PUSH
8805: LD_INT 0
8807: ST_TO_ADDR
// def_starting_resources := 0 ;
8808: LD_ADDR_EXP 41
8812: PUSH
8813: LD_INT 0
8815: ST_TO_ADDR
// def_shipments_density := 0 ;
8816: LD_ADDR_EXP 42
8820: PUSH
8821: LD_INT 0
8823: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8824: LD_ADDR_EXP 43
8828: PUSH
8829: LD_INT 0
8831: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
8832: LD_ADDR_EXP 44
8836: PUSH
8837: LD_INT 0
8839: ST_TO_ADDR
// def_shared_vision := 1 ;
8840: LD_ADDR_EXP 45
8844: PUSH
8845: LD_INT 1
8847: ST_TO_ADDR
// def_morale_flags := 0 ;
8848: LD_ADDR_EXP 46
8852: PUSH
8853: LD_INT 0
8855: ST_TO_ADDR
// def_siberite_detection := 0 ;
8856: LD_ADDR_EXP 47
8860: PUSH
8861: LD_INT 0
8863: ST_TO_ADDR
// def_people_respawning := 1 ;
8864: LD_ADDR_EXP 48
8868: PUSH
8869: LD_INT 1
8871: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
8872: LD_ADDR_EXP 49
8876: PUSH
8877: LD_INT 1
8879: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8880: LD_ADDR_EXP 50
8884: PUSH
8885: LD_INT 0
8887: ST_TO_ADDR
// def_builduptime := 0 ;
8888: LD_ADDR_EXP 51
8892: PUSH
8893: LD_INT 0
8895: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
8896: LD_ADDR_VAR 0 2
8900: PUSH
8901: LD_INT 10
8903: PUSH
8904: LD_INT 3
8906: PUSH
8907: EMPTY
8908: LIST
8909: LIST
8910: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
8911: LD_ADDR_VAR 0 3
8915: PUSH
8916: LD_INT 12
8918: PUSH
8919: LD_INT 11
8921: PUSH
8922: LD_INT 14
8924: PUSH
8925: LD_INT 13
8927: PUSH
8928: LD_INT 5
8930: PUSH
8931: LD_INT 24
8933: PUSH
8934: LD_INT 21
8936: PUSH
8937: LD_INT 33
8939: PUSH
8940: LD_INT 36
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
8954: LD_ADDR_LOC 21
8958: PUSH
8959: LD_INT 31
8961: PUSH
8962: EMPTY
8963: LIST
8964: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8965: LD_ADDR_LOC 22
8969: PUSH
8970: EMPTY
8971: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
8972: LD_ADDR_LOC 23
8976: PUSH
8977: LD_INT 2
8979: PUSH
8980: EMPTY
8981: LIST
8982: ST_TO_ADDR
// Banned_Engines := [ ] ;
8983: LD_ADDR_LOC 24
8987: PUSH
8988: EMPTY
8989: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
8990: LD_ADDR_LOC 19
8994: PUSH
8995: LD_INT 4
8997: PUSH
8998: EMPTY
8999: LIST
9000: PUSH
9001: LD_INT 31
9003: PUSH
9004: LD_INT 32
9006: PUSH
9007: EMPTY
9008: LIST
9009: LIST
9010: PUSH
9011: EMPTY
9012: LIST
9013: LIST
9014: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
9015: LD_ADDR_LOC 20
9019: PUSH
9020: LD_INT 1
9022: PUSH
9023: LD_INT 1
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: ST_TO_ADDR
// end ; 6 :
9030: GO 9858
9032: LD_INT 6
9034: DOUBLE
9035: EQUAL
9036: IFTRUE 9040
9038: GO 9243
9040: POP
// begin def_base_level := 1 ;
9041: LD_ADDR_EXP 38
9045: PUSH
9046: LD_INT 1
9048: ST_TO_ADDR
// def_amount_of_people := 2 ;
9049: LD_ADDR_EXP 39
9053: PUSH
9054: LD_INT 2
9056: ST_TO_ADDR
// def_skill_level := 3 ;
9057: LD_ADDR_EXP 40
9061: PUSH
9062: LD_INT 3
9064: ST_TO_ADDR
// def_starting_resources := 3 ;
9065: LD_ADDR_EXP 41
9069: PUSH
9070: LD_INT 3
9072: ST_TO_ADDR
// def_shipments_density := 1 ;
9073: LD_ADDR_EXP 42
9077: PUSH
9078: LD_INT 1
9080: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9081: LD_ADDR_EXP 43
9085: PUSH
9086: LD_INT 0
9088: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9089: LD_ADDR_EXP 44
9093: PUSH
9094: LD_INT 1
9096: ST_TO_ADDR
// def_shared_vision := 1 ;
9097: LD_ADDR_EXP 45
9101: PUSH
9102: LD_INT 1
9104: ST_TO_ADDR
// def_morale_flags := 0 ;
9105: LD_ADDR_EXP 46
9109: PUSH
9110: LD_INT 0
9112: ST_TO_ADDR
// def_siberite_detection := 1 ;
9113: LD_ADDR_EXP 47
9117: PUSH
9118: LD_INT 1
9120: ST_TO_ADDR
// def_people_respawning := 2 ;
9121: LD_ADDR_EXP 48
9125: PUSH
9126: LD_INT 2
9128: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9129: LD_ADDR_EXP 49
9133: PUSH
9134: LD_INT 1
9136: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9137: LD_ADDR_EXP 50
9141: PUSH
9142: LD_INT 0
9144: ST_TO_ADDR
// def_builduptime := 1 ;
9145: LD_ADDR_EXP 51
9149: PUSH
9150: LD_INT 1
9152: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9153: LD_ADDR_VAR 0 2
9157: PUSH
9158: LD_INT 23
9160: PUSH
9161: EMPTY
9162: LIST
9163: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
9164: LD_ADDR_VAR 0 3
9168: PUSH
9169: LD_INT 2
9171: PUSH
9172: LD_INT 37
9174: PUSH
9175: LD_INT 31
9177: PUSH
9178: LD_INT 32
9180: PUSH
9181: LD_INT 33
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9191: LD_ADDR_LOC 21
9195: PUSH
9196: EMPTY
9197: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9198: LD_ADDR_LOC 22
9202: PUSH
9203: EMPTY
9204: ST_TO_ADDR
// Banned_Controls := [ ] ;
9205: LD_ADDR_LOC 23
9209: PUSH
9210: EMPTY
9211: ST_TO_ADDR
// Banned_Engines := [ ] ;
9212: LD_ADDR_LOC 24
9216: PUSH
9217: EMPTY
9218: ST_TO_ADDR
// Restricted_Builds := [ ] ;
9219: LD_ADDR_LOC 19
9223: PUSH
9224: EMPTY
9225: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
9226: LD_ADDR_LOC 20
9230: PUSH
9231: EMPTY
9232: ST_TO_ADDR
// No_Mechs := true ;
9233: LD_ADDR_EXP 52
9237: PUSH
9238: LD_INT 1
9240: ST_TO_ADDR
// end ; 7 :
9241: GO 9858
9243: LD_INT 7
9245: DOUBLE
9246: EQUAL
9247: IFTRUE 9251
9249: GO 9449
9251: POP
// begin def_base_level := 1 ;
9252: LD_ADDR_EXP 38
9256: PUSH
9257: LD_INT 1
9259: ST_TO_ADDR
// def_amount_of_people := 2 ;
9260: LD_ADDR_EXP 39
9264: PUSH
9265: LD_INT 2
9267: ST_TO_ADDR
// def_skill_level := 3 ;
9268: LD_ADDR_EXP 40
9272: PUSH
9273: LD_INT 3
9275: ST_TO_ADDR
// def_starting_resources := 3 ;
9276: LD_ADDR_EXP 41
9280: PUSH
9281: LD_INT 3
9283: ST_TO_ADDR
// def_shipments_density := 1 ;
9284: LD_ADDR_EXP 42
9288: PUSH
9289: LD_INT 1
9291: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9292: LD_ADDR_EXP 43
9296: PUSH
9297: LD_INT 1
9299: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9300: LD_ADDR_EXP 44
9304: PUSH
9305: LD_INT 2
9307: ST_TO_ADDR
// def_shared_vision := 1 ;
9308: LD_ADDR_EXP 45
9312: PUSH
9313: LD_INT 1
9315: ST_TO_ADDR
// def_morale_flags := 0 ;
9316: LD_ADDR_EXP 46
9320: PUSH
9321: LD_INT 0
9323: ST_TO_ADDR
// def_siberite_detection := 1 ;
9324: LD_ADDR_EXP 47
9328: PUSH
9329: LD_INT 1
9331: ST_TO_ADDR
// def_people_respawning := 0 ;
9332: LD_ADDR_EXP 48
9336: PUSH
9337: LD_INT 0
9339: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9340: LD_ADDR_EXP 49
9344: PUSH
9345: LD_INT 1
9347: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9348: LD_ADDR_EXP 50
9352: PUSH
9353: LD_INT 0
9355: ST_TO_ADDR
// def_builduptime := 3 ;
9356: LD_ADDR_EXP 51
9360: PUSH
9361: LD_INT 3
9363: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9364: LD_ADDR_VAR 0 2
9368: PUSH
9369: LD_INT 23
9371: PUSH
9372: EMPTY
9373: LIST
9374: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
9375: LD_ADDR_VAR 0 3
9379: PUSH
9380: LD_INT 37
9382: PUSH
9383: EMPTY
9384: LIST
9385: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9386: LD_ADDR_LOC 21
9390: PUSH
9391: EMPTY
9392: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9393: LD_ADDR_LOC 22
9397: PUSH
9398: EMPTY
9399: ST_TO_ADDR
// Banned_Controls := [ ] ;
9400: LD_ADDR_LOC 23
9404: PUSH
9405: EMPTY
9406: ST_TO_ADDR
// Banned_Engines := [ ] ;
9407: LD_ADDR_LOC 24
9411: PUSH
9412: EMPTY
9413: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9414: LD_ADDR_LOC 19
9418: PUSH
9419: LD_INT 31
9421: PUSH
9422: LD_INT 32
9424: PUSH
9425: LD_INT 33
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: LIST
9432: PUSH
9433: EMPTY
9434: LIST
9435: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
9436: LD_ADDR_LOC 20
9440: PUSH
9441: LD_INT 10
9443: PUSH
9444: EMPTY
9445: LIST
9446: ST_TO_ADDR
// end ; 8 :
9447: GO 9858
9449: LD_INT 8
9451: DOUBLE
9452: EQUAL
9453: IFTRUE 9457
9455: GO 9857
9457: POP
// begin def_base_level := 0 ;
9458: LD_ADDR_EXP 38
9462: PUSH
9463: LD_INT 0
9465: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
9466: LD_ADDR_EXP 39
9470: PUSH
9471: LD_INT 0
9473: PPUSH
9474: LD_INT 1
9476: PPUSH
9477: CALL_OW 12
9481: ST_TO_ADDR
// def_skill_level := 0 ;
9482: LD_ADDR_EXP 40
9486: PUSH
9487: LD_INT 0
9489: ST_TO_ADDR
// def_starting_resources := 2 ;
9490: LD_ADDR_EXP 41
9494: PUSH
9495: LD_INT 2
9497: ST_TO_ADDR
// def_shipments_density := 1 ;
9498: LD_ADDR_EXP 42
9502: PUSH
9503: LD_INT 1
9505: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9506: LD_ADDR_EXP 43
9510: PUSH
9511: LD_INT 0
9513: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
9514: LD_ADDR_EXP 44
9518: PUSH
9519: LD_INT 0
9521: ST_TO_ADDR
// def_shared_vision := 1 ;
9522: LD_ADDR_EXP 45
9526: PUSH
9527: LD_INT 1
9529: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
9530: LD_ADDR_EXP 46
9534: PUSH
9535: LD_INT 0
9537: PPUSH
9538: LD_INT 2
9540: PPUSH
9541: CALL_OW 12
9545: ST_TO_ADDR
// def_siberite_detection := 0 ;
9546: LD_ADDR_EXP 47
9550: PUSH
9551: LD_INT 0
9553: ST_TO_ADDR
// def_people_respawning := 0 ;
9554: LD_ADDR_EXP 48
9558: PUSH
9559: LD_INT 0
9561: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
9562: LD_ADDR_EXP 49
9566: PUSH
9567: LD_INT 2
9569: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9570: LD_ADDR_EXP 50
9574: PUSH
9575: LD_INT 0
9577: ST_TO_ADDR
// def_builduptime := 0 ;
9578: LD_ADDR_EXP 51
9582: PUSH
9583: LD_INT 0
9585: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
9586: LD_ADDR_VAR 0 2
9590: PUSH
9591: LD_INT 23
9593: PUSH
9594: LD_INT 20
9596: PUSH
9597: LD_INT 40
9599: PUSH
9600: LD_INT 47
9602: PUSH
9603: LD_INT 46
9605: PUSH
9606: LD_INT 39
9608: PUSH
9609: LD_INT 71
9611: PUSH
9612: LD_INT 34
9614: PUSH
9615: LD_INT 41
9617: PUSH
9618: LD_INT 44
9620: PUSH
9621: LD_INT 17
9623: PUSH
9624: LD_INT 16
9626: PUSH
9627: EMPTY
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
9641: LD_ADDR_VAR 0 3
9645: PUSH
9646: LD_INT 37
9648: PUSH
9649: LD_INT 5
9651: PUSH
9652: LD_INT 13
9654: PUSH
9655: LD_INT 34
9657: PUSH
9658: LD_INT 12
9660: PUSH
9661: LD_INT 15
9663: PUSH
9664: LD_INT 11
9666: PUSH
9667: LD_INT 14
9669: PUSH
9670: LD_INT 29
9672: PUSH
9673: LD_INT 30
9675: PUSH
9676: LD_INT 28
9678: PUSH
9679: LD_INT 24
9681: PUSH
9682: LD_INT 25
9684: PUSH
9685: LD_INT 20
9687: PUSH
9688: LD_INT 21
9690: PUSH
9691: LD_INT 22
9693: PUSH
9694: LD_INT 36
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9716: LD_ADDR_LOC 21
9720: PUSH
9721: EMPTY
9722: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
9723: LD_ADDR_LOC 22
9727: PUSH
9728: LD_INT 14
9730: PUSH
9731: EMPTY
9732: LIST
9733: ST_TO_ADDR
// Banned_Controls := [ ] ;
9734: LD_ADDR_LOC 23
9738: PUSH
9739: EMPTY
9740: ST_TO_ADDR
// Banned_Engines := [ ] ;
9741: LD_ADDR_LOC 24
9745: PUSH
9746: EMPTY
9747: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
9748: LD_ADDR_LOC 19
9752: PUSH
9753: LD_INT 31
9755: PUSH
9756: LD_INT 32
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: PUSH
9763: LD_INT 4
9765: PUSH
9766: EMPTY
9767: LIST
9768: PUSH
9769: EMPTY
9770: LIST
9771: LIST
9772: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
9773: LD_ADDR_LOC 20
9777: PUSH
9778: LD_INT 2
9780: PUSH
9781: LD_INT 1
9783: PUSH
9784: EMPTY
9785: LIST
9786: LIST
9787: ST_TO_ADDR
// for i := 1 to 8 do
9788: LD_ADDR_VAR 0 4
9792: PUSH
9793: DOUBLE
9794: LD_INT 1
9796: DEC
9797: ST_TO_ADDR
9798: LD_INT 8
9800: PUSH
9801: FOR_TO
9802: IFFALSE 9853
// if ( Side_Nations [ i ] = 3 ) then
9804: LD_EXP 21
9808: PUSH
9809: LD_VAR 0 4
9813: ARRAY
9814: PUSH
9815: LD_INT 3
9817: EQUAL
9818: IFFALSE 9851
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
9820: LD_ADDR_EXP 21
9824: PUSH
9825: LD_EXP 21
9829: PPUSH
9830: LD_VAR 0 4
9834: PPUSH
9835: LD_INT 1
9837: PPUSH
9838: LD_INT 2
9840: PPUSH
9841: CALL_OW 12
9845: PPUSH
9846: CALL_OW 1
9850: ST_TO_ADDR
9851: GO 9801
9853: POP
9854: POP
// end ; end ;
9855: GO 9858
9857: POP
// for i := 1 to 8 do
9858: LD_ADDR_VAR 0 4
9862: PUSH
9863: DOUBLE
9864: LD_INT 1
9866: DEC
9867: ST_TO_ADDR
9868: LD_INT 8
9870: PUSH
9871: FOR_TO
9872: IFFALSE 9956
// if Side_Positions [ i ] then
9874: LD_EXP 20
9878: PUSH
9879: LD_VAR 0 4
9883: ARRAY
9884: IFFALSE 9954
// begin for j in Unavailable_Techs do
9886: LD_ADDR_VAR 0 5
9890: PUSH
9891: LD_VAR 0 2
9895: PUSH
9896: FOR_IN
9897: IFFALSE 9918
// SetTech ( j , i , 0 ) ;
9899: LD_VAR 0 5
9903: PPUSH
9904: LD_VAR 0 4
9908: PPUSH
9909: LD_INT 0
9911: PPUSH
9912: CALL_OW 322
9916: GO 9896
9918: POP
9919: POP
// for j in Unavailable_Builds do
9920: LD_ADDR_VAR 0 5
9924: PUSH
9925: LD_VAR 0 3
9929: PUSH
9930: FOR_IN
9931: IFFALSE 9952
// SetRestrict ( j , i , 0 ) ;
9933: LD_VAR 0 5
9937: PPUSH
9938: LD_VAR 0 4
9942: PPUSH
9943: LD_INT 0
9945: PPUSH
9946: CALL_OW 324
9950: GO 9930
9952: POP
9953: POP
// end ;
9954: GO 9871
9956: POP
9957: POP
// end ;
9958: LD_VAR 0 1
9962: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
9963: LD_INT 0
9965: PPUSH
9966: PPUSH
9967: PPUSH
9968: PPUSH
9969: PPUSH
9970: PPUSH
9971: PPUSH
// for i := 1 to Restricted_Builds do
9972: LD_ADDR_VAR 0 2
9976: PUSH
9977: DOUBLE
9978: LD_INT 1
9980: DEC
9981: ST_TO_ADDR
9982: LD_LOC 19
9986: PUSH
9987: FOR_TO
9988: IFFALSE 10298
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
9990: LD_LOC 19
9994: PUSH
9995: LD_VAR 0 2
9999: ARRAY
10000: PUSH
10001: LD_INT 1
10003: ARRAY
10004: PUSH
10005: LD_INT 31
10007: DOUBLE
10008: EQUAL
10009: IFTRUE 10025
10011: LD_INT 32
10013: DOUBLE
10014: EQUAL
10015: IFTRUE 10025
10017: LD_INT 33
10019: DOUBLE
10020: EQUAL
10021: IFTRUE 10025
10023: GO 10036
10025: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
10026: LD_ADDR_VAR 0 6
10030: PUSH
10031: LD_STRING #Turrets
10033: ST_TO_ADDR
10034: GO 10081
10036: LD_INT 4
10038: DOUBLE
10039: EQUAL
10040: IFTRUE 10050
10042: LD_INT 5
10044: DOUBLE
10045: EQUAL
10046: IFTRUE 10050
10048: GO 10061
10050: POP
// btype := #Armouries ; b_Behemoth :
10051: LD_ADDR_VAR 0 6
10055: PUSH
10056: LD_STRING #Armouries
10058: ST_TO_ADDR
10059: GO 10081
10061: LD_INT 37
10063: DOUBLE
10064: EQUAL
10065: IFTRUE 10069
10067: GO 10080
10069: POP
// btype := #Behemoths ; end ;
10070: LD_ADDR_VAR 0 6
10074: PUSH
10075: LD_STRING #Behemoths
10077: ST_TO_ADDR
10078: GO 10081
10080: POP
// list := [ ] ;
10081: LD_ADDR_VAR 0 7
10085: PUSH
10086: EMPTY
10087: ST_TO_ADDR
// for j := 1 to 8 do
10088: LD_ADDR_VAR 0 3
10092: PUSH
10093: DOUBLE
10094: LD_INT 1
10096: DEC
10097: ST_TO_ADDR
10098: LD_INT 8
10100: PUSH
10101: FOR_TO
10102: IFFALSE 10195
// if Side_Positions [ j ] then
10104: LD_EXP 20
10108: PUSH
10109: LD_VAR 0 3
10113: ARRAY
10114: IFFALSE 10193
// begin amount := 0 ;
10116: LD_ADDR_VAR 0 5
10120: PUSH
10121: LD_INT 0
10123: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
10124: LD_ADDR_VAR 0 4
10128: PUSH
10129: LD_LOC 19
10133: PUSH
10134: LD_VAR 0 2
10138: ARRAY
10139: PUSH
10140: FOR_IN
10141: IFFALSE 10189
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
10143: LD_ADDR_VAR 0 5
10147: PUSH
10148: LD_VAR 0 5
10152: PUSH
10153: LD_INT 22
10155: PUSH
10156: LD_VAR 0 3
10160: PUSH
10161: EMPTY
10162: LIST
10163: LIST
10164: PUSH
10165: LD_INT 30
10167: PUSH
10168: LD_VAR 0 4
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PPUSH
10181: CALL_OW 69
10185: PLUS
10186: ST_TO_ADDR
10187: GO 10140
10189: POP
10190: POP
// break ;
10191: GO 10195
// end ;
10193: GO 10101
10195: POP
10196: POP
// list := [ ] ;
10197: LD_ADDR_VAR 0 7
10201: PUSH
10202: EMPTY
10203: ST_TO_ADDR
// for j := 1 to 8 do
10204: LD_ADDR_VAR 0 3
10208: PUSH
10209: DOUBLE
10210: LD_INT 1
10212: DEC
10213: ST_TO_ADDR
10214: LD_INT 8
10216: PUSH
10217: FOR_TO
10218: IFFALSE 10238
// list := list ^ amount ;
10220: LD_ADDR_VAR 0 7
10224: PUSH
10225: LD_VAR 0 7
10229: PUSH
10230: LD_VAR 0 5
10234: ADD
10235: ST_TO_ADDR
10236: GO 10217
10238: POP
10239: POP
// Already_Built := Already_Built ^ [ list ] ;
10240: LD_ADDR_LOC 25
10244: PUSH
10245: LD_LOC 25
10249: PUSH
10250: LD_VAR 0 7
10254: PUSH
10255: EMPTY
10256: LIST
10257: ADD
10258: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
10259: LD_ADDR_LOC 26
10263: PUSH
10264: LD_LOC 26
10268: PUSH
10269: LD_VAR 0 6
10273: PUSH
10274: LD_VAR 0 5
10278: PUSH
10279: LD_LOC 20
10283: PUSH
10284: LD_VAR 0 2
10288: ARRAY
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: LIST
10294: ADD
10295: ST_TO_ADDR
// end ;
10296: GO 9987
10298: POP
10299: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10300: LD_ADDR_LOC 27
10304: PUSH
10305: LD_INT 0
10307: PUSH
10308: LD_INT 0
10310: PUSH
10311: LD_INT 0
10313: PUSH
10314: LD_INT 0
10316: PUSH
10317: LD_INT 0
10319: PUSH
10320: LD_INT 0
10322: PUSH
10323: LD_INT 0
10325: PUSH
10326: LD_INT 0
10328: PUSH
10329: EMPTY
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: ST_TO_ADDR
// if Limits_Info then
10339: LD_LOC 26
10343: IFFALSE 10359
// Limits_Info := #Limits ^ Limits_Info ;
10345: LD_ADDR_LOC 26
10349: PUSH
10350: LD_STRING #Limits
10352: PUSH
10353: LD_LOC 26
10357: ADD
10358: ST_TO_ADDR
// end ;
10359: LD_VAR 0 1
10363: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
10364: LD_INT 0
10366: PPUSH
10367: PPUSH
10368: PPUSH
10369: PPUSH
// for i := 1 to Restricted_Builds do
10370: LD_ADDR_VAR 0 7
10374: PUSH
10375: DOUBLE
10376: LD_INT 1
10378: DEC
10379: ST_TO_ADDR
10380: LD_LOC 19
10384: PUSH
10385: FOR_TO
10386: IFFALSE 10809
// if BType in Restricted_Builds [ i ] then
10388: LD_VAR 0 2
10392: PUSH
10393: LD_LOC 19
10397: PUSH
10398: LD_VAR 0 7
10402: ARRAY
10403: IN
10404: IFFALSE 10807
// begin if old_side then
10406: LD_VAR 0 4
10410: IFFALSE 10536
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
10412: LD_LOC 25
10416: PUSH
10417: LD_VAR 0 7
10421: ARRAY
10422: PUSH
10423: LD_VAR 0 3
10427: ARRAY
10428: PUSH
10429: LD_VAR 0 5
10433: PLUS
10434: PUSH
10435: LD_LOC 20
10439: PUSH
10440: LD_VAR 0 7
10444: ARRAY
10445: GREATER
10446: IFFALSE 10472
// begin SetSide ( un , old_side ) ;
10448: LD_VAR 0 1
10452: PPUSH
10453: LD_VAR 0 4
10457: PPUSH
10458: CALL_OW 235
// count := 0 ;
10462: LD_ADDR_VAR 0 5
10466: PUSH
10467: LD_INT 0
10469: ST_TO_ADDR
// end else
10470: GO 10536
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
10472: LD_ADDR_LOC 25
10476: PUSH
10477: LD_LOC 25
10481: PPUSH
10482: LD_VAR 0 7
10486: PPUSH
10487: LD_LOC 25
10491: PUSH
10492: LD_VAR 0 7
10496: ARRAY
10497: PPUSH
10498: LD_VAR 0 4
10502: PPUSH
10503: LD_LOC 25
10507: PUSH
10508: LD_VAR 0 7
10512: ARRAY
10513: PUSH
10514: LD_VAR 0 4
10518: ARRAY
10519: PUSH
10520: LD_VAR 0 5
10524: MINUS
10525: PPUSH
10526: CALL_OW 1
10530: PPUSH
10531: CALL_OW 1
10535: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
10536: LD_ADDR_LOC 25
10540: PUSH
10541: LD_LOC 25
10545: PPUSH
10546: LD_VAR 0 7
10550: PPUSH
10551: LD_LOC 25
10555: PUSH
10556: LD_VAR 0 7
10560: ARRAY
10561: PPUSH
10562: LD_VAR 0 3
10566: PPUSH
10567: LD_LOC 25
10571: PUSH
10572: LD_VAR 0 7
10576: ARRAY
10577: PUSH
10578: LD_VAR 0 3
10582: ARRAY
10583: PUSH
10584: LD_VAR 0 5
10588: PLUS
10589: PPUSH
10590: CALL_OW 1
10594: PPUSH
10595: CALL_OW 1
10599: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
10600: LD_VAR 0 5
10604: PUSH
10605: LD_INT 0
10607: NONEQUAL
10608: PUSH
10609: LD_VAR 0 3
10613: PUSH
10614: LD_OWVAR 2
10618: EQUAL
10619: AND
10620: IFFALSE 10663
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
10622: LD_ADDR_LOC 26
10626: PUSH
10627: LD_LOC 26
10631: PPUSH
10632: LD_INT 3
10634: PUSH
10635: LD_VAR 0 7
10639: MUL
10640: PPUSH
10641: LD_LOC 25
10645: PUSH
10646: LD_VAR 0 7
10650: ARRAY
10651: PUSH
10652: LD_VAR 0 3
10656: ARRAY
10657: PPUSH
10658: CALL_OW 1
10662: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
10663: LD_LOC 25
10667: PUSH
10668: LD_VAR 0 7
10672: ARRAY
10673: PUSH
10674: LD_VAR 0 3
10678: ARRAY
10679: PUSH
10680: LD_LOC 20
10684: PUSH
10685: LD_VAR 0 7
10689: ARRAY
10690: GREATER
10691: IFFALSE 10718
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
10693: LD_ADDR_LOC 27
10697: PUSH
10698: LD_LOC 27
10702: PPUSH
10703: LD_VAR 0 3
10707: PPUSH
10708: LD_INT 1
10710: PPUSH
10711: CALL_OW 1
10715: ST_TO_ADDR
// end else
10716: GO 10805
// begin for j := 1 to Restricted_Builds do
10718: LD_ADDR_VAR 0 8
10722: PUSH
10723: DOUBLE
10724: LD_INT 1
10726: DEC
10727: ST_TO_ADDR
10728: LD_LOC 19
10732: PUSH
10733: FOR_TO
10734: IFFALSE 10778
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
10736: LD_LOC 25
10740: PUSH
10741: LD_VAR 0 8
10745: ARRAY
10746: PUSH
10747: LD_VAR 0 3
10751: ARRAY
10752: PUSH
10753: LD_LOC 20
10757: PUSH
10758: LD_VAR 0 8
10762: ARRAY
10763: GREATER
10764: IFFALSE 10776
// begin Is_Cheater := true ;
10766: LD_ADDR_VAR 0 9
10770: PUSH
10771: LD_INT 1
10773: ST_TO_ADDR
// break ;
10774: GO 10778
// end ;
10776: GO 10733
10778: POP
10779: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
10780: LD_ADDR_LOC 27
10784: PUSH
10785: LD_LOC 27
10789: PPUSH
10790: LD_VAR 0 3
10794: PPUSH
10795: LD_VAR 0 9
10799: PPUSH
10800: CALL_OW 1
10804: ST_TO_ADDR
// end ; break ;
10805: GO 10809
// end ;
10807: GO 10385
10809: POP
10810: POP
// end ;
10811: LD_VAR 0 6
10815: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
10816: LD_VAR 0 5
10820: PUSH
10821: LD_LOC 21
10825: IN
10826: PUSH
10827: LD_VAR 0 2
10831: PUSH
10832: LD_LOC 22
10836: IN
10837: OR
10838: PUSH
10839: LD_VAR 0 4
10843: PUSH
10844: LD_LOC 23
10848: IN
10849: OR
10850: PUSH
10851: LD_VAR 0 3
10855: PUSH
10856: LD_LOC 24
10860: IN
10861: OR
10862: IFFALSE 10873
// ComCancel ( factory ) ;
10864: LD_VAR 0 1
10868: PPUSH
10869: CALL_OW 127
// end ;
10873: PPOPN 5
10875: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
10876: LD_VAR 0 2
10880: PUSH
10881: LD_LOC 21
10885: IN
10886: IFFALSE 10897
// ComCancel ( building ) ;
10888: LD_VAR 0 1
10892: PPUSH
10893: CALL_OW 127
// end ; end_of_file
10897: PPOPN 2
10899: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
10900: LD_INT 0
10902: PPUSH
10903: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
10904: LD_ADDR_VAR 0 2
10908: PUSH
10909: LD_STRING #Multi1x1-Time
10911: PUSH
10912: LD_OWVAR 1
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: ST_TO_ADDR
// if WaitServerStrings then
10921: LD_EXP 54
10925: IFFALSE 10943
// AllStrings = AllStrings ^ WaitServerStrings ;
10927: LD_ADDR_VAR 0 2
10931: PUSH
10932: LD_VAR 0 2
10936: PUSH
10937: LD_EXP 54
10941: ADD
10942: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
10943: LD_INT 0
10945: PUSH
10946: LD_EXP 12
10950: PUSH
10951: LD_OWVAR 1
10955: MINUS
10956: LESSEQUAL
10957: IFFALSE 10988
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
10959: LD_ADDR_VAR 0 2
10963: PUSH
10964: LD_VAR 0 2
10968: PUSH
10969: LD_STRING #allowedsibbomb
10971: PUSH
10972: LD_EXP 12
10976: PUSH
10977: LD_OWVAR 1
10981: MINUS
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: ADD
10987: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
10988: LD_INT 0
10990: PUSH
10991: LD_EXP 16
10995: PUSH
10996: LD_OWVAR 1
11000: MINUS
11001: LESSEQUAL
11002: IFFALSE 11033
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
11004: LD_ADDR_VAR 0 2
11008: PUSH
11009: LD_VAR 0 2
11013: PUSH
11014: LD_STRING #builduptime
11016: PUSH
11017: LD_EXP 16
11021: PUSH
11022: LD_OWVAR 1
11026: MINUS
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: ADD
11032: ST_TO_ADDR
// if ( ExtraStrings ) then
11033: LD_EXP 53
11037: IFFALSE 11059
// AllStrings := AllStrings ^  ^ ExtraStrings ;
11039: LD_ADDR_VAR 0 2
11043: PUSH
11044: LD_VAR 0 2
11048: PUSH
11049: LD_STRING 
11051: ADD
11052: PUSH
11053: LD_EXP 53
11057: ADD
11058: ST_TO_ADDR
// if ( LimitsStrings ) then
11059: CALL 7740 0 0
11063: IFFALSE 11085
// AllStrings := AllStrings ^  ^ LimitsStrings ;
11065: LD_ADDR_VAR 0 2
11069: PUSH
11070: LD_VAR 0 2
11074: PUSH
11075: LD_STRING 
11077: ADD
11078: PUSH
11079: CALL 7740 0 0
11083: ADD
11084: ST_TO_ADDR
// Display_Strings := AllStrings ;
11085: LD_ADDR_OWVAR 47
11089: PUSH
11090: LD_VAR 0 2
11094: ST_TO_ADDR
// end ;
11095: LD_VAR 0 1
11099: RET
// every 0 0$1 do
11100: GO 11102
11102: DISABLE
// begin ShowTimer ;
11103: CALL 10900 0 0
// enable ;
11107: ENABLE
// end ; end_of_file
11108: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
11109: LD_INT 0
11111: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
11112: LD_VAR 0 1
11116: PPUSH
11117: CALL_OW 255
11121: PUSH
11122: LD_VAR 0 4
11126: EQUAL
11127: IFFALSE 11146
// begin SetAchievement ( ACH_RAD ) ;
11129: LD_STRING ACH_RAD
11131: PPUSH
11132: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
11136: LD_STRING ACH_NL
11138: PPUSH
11139: LD_INT 1
11141: PPUSH
11142: CALL_OW 564
// end end ;
11146: LD_VAR 0 5
11150: RET
// export function SA_Win ( side ) ; begin
11151: LD_INT 0
11153: PPUSH
// case side of 1 :
11154: LD_VAR 0 1
11158: PUSH
11159: LD_INT 1
11161: DOUBLE
11162: EQUAL
11163: IFTRUE 11167
11165: GO 11180
11167: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
11168: LD_STRING ACH_AH
11170: PPUSH
11171: LD_INT 1
11173: PPUSH
11174: CALL_OW 564
11178: GO 11343
11180: LD_INT 2
11182: DOUBLE
11183: EQUAL
11184: IFTRUE 11188
11186: GO 11201
11188: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
11189: LD_STRING ACH_E
11191: PPUSH
11192: LD_INT 1
11194: PPUSH
11195: CALL_OW 564
11199: GO 11343
11201: LD_INT 3
11203: DOUBLE
11204: EQUAL
11205: IFTRUE 11209
11207: GO 11222
11209: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
11210: LD_STRING ACH_OOL
11212: PPUSH
11213: LD_INT 1
11215: PPUSH
11216: CALL_OW 564
11220: GO 11343
11222: LD_INT 1
11224: PUSH
11225: LD_INT 2
11227: PUSH
11228: EMPTY
11229: LIST
11230: LIST
11231: DOUBLE
11232: EQUAL
11233: IFTRUE 11237
11235: GO 11262
11237: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
11238: LD_STRING ACH_AH
11240: PPUSH
11241: LD_REAL  5.00000000000000E-0001
11244: PPUSH
11245: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
11249: LD_STRING ACH_E
11251: PPUSH
11252: LD_REAL  5.00000000000000E-0001
11255: PPUSH
11256: CALL_OW 564
// end ; [ 2 , 3 ] :
11260: GO 11343
11262: LD_INT 2
11264: PUSH
11265: LD_INT 3
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: DOUBLE
11272: EQUAL
11273: IFTRUE 11277
11275: GO 11302
11277: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
11278: LD_STRING ACH_OOL
11280: PPUSH
11281: LD_REAL  5.00000000000000E-0001
11284: PPUSH
11285: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
11289: LD_STRING ACH_E
11291: PPUSH
11292: LD_REAL  5.00000000000000E-0001
11295: PPUSH
11296: CALL_OW 564
// end ; [ 3 , 1 ] :
11300: GO 11343
11302: LD_INT 3
11304: PUSH
11305: LD_INT 1
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: DOUBLE
11312: EQUAL
11313: IFTRUE 11317
11315: GO 11342
11317: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
11318: LD_STRING ACH_AH
11320: PPUSH
11321: LD_REAL  5.00000000000000E-0001
11324: PPUSH
11325: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
11329: LD_STRING ACH_OOL
11331: PPUSH
11332: LD_REAL  5.00000000000000E-0001
11335: PPUSH
11336: CALL_OW 564
// end ; end ;
11340: GO 11343
11342: POP
// end ; end_of_file
11343: LD_VAR 0 2
11347: RET
// export BuildUpAreas , BuildUp ; export function BeginBuildUp ; var i , j ; begin
11348: LD_INT 0
11350: PPUSH
11351: PPUSH
11352: PPUSH
// enable ( 600 ) ;
11353: LD_INT 600
11355: ENABLE_MARKED
// BuildUp = true ;
11356: LD_ADDR_EXP 56
11360: PUSH
11361: LD_INT 1
11363: ST_TO_ADDR
// for i := 1 to BuildUpAreas do
11364: LD_ADDR_VAR 0 2
11368: PUSH
11369: DOUBLE
11370: LD_INT 1
11372: DEC
11373: ST_TO_ADDR
11374: LD_EXP 55
11378: PUSH
11379: FOR_TO
11380: IFFALSE 11535
// if Position_Sides [ i ] then
11382: LD_EXP 23
11386: PUSH
11387: LD_VAR 0 2
11391: ARRAY
11392: IFFALSE 11533
// for j := 1 to 8 do
11394: LD_ADDR_VAR 0 3
11398: PUSH
11399: DOUBLE
11400: LD_INT 1
11402: DEC
11403: ST_TO_ADDR
11404: LD_INT 8
11406: PUSH
11407: FOR_TO
11408: IFFALSE 11531
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
11410: LD_EXP 20
11414: PUSH
11415: LD_VAR 0 3
11419: ARRAY
11420: PUSH
11421: LD_EXP 17
11425: PUSH
11426: LD_EXP 23
11430: PUSH
11431: LD_VAR 0 2
11435: ARRAY
11436: ARRAY
11437: PUSH
11438: LD_EXP 17
11442: PUSH
11443: LD_VAR 0 3
11447: ARRAY
11448: NONEQUAL
11449: PUSH
11450: LD_EXP 22
11454: NOT
11455: PUSH
11456: LD_EXP 23
11460: PUSH
11461: LD_VAR 0 2
11465: ARRAY
11466: PUSH
11467: LD_VAR 0 3
11471: NONEQUAL
11472: AND
11473: OR
11474: AND
11475: IFFALSE 11499
// HideArea ( j , BuildUpAreas [ i ] ) else
11477: LD_VAR 0 3
11481: PPUSH
11482: LD_EXP 55
11486: PUSH
11487: LD_VAR 0 2
11491: ARRAY
11492: PPUSH
11493: CALL_OW 333
11497: GO 11529
// if ( j = your_side ) then
11499: LD_VAR 0 3
11503: PUSH
11504: LD_OWVAR 2
11508: EQUAL
11509: IFFALSE 11529
// SetAreaMapShow ( BuildUpAreas [ i ] , 3 ) ;
11511: LD_EXP 55
11515: PUSH
11516: LD_VAR 0 2
11520: ARRAY
11521: PPUSH
11522: LD_INT 3
11524: PPUSH
11525: CALL_OW 424
11529: GO 11407
11531: POP
11532: POP
11533: GO 11379
11535: POP
11536: POP
// end ;
11537: LD_VAR 0 1
11541: RET
// export function EndBuildUp ; var i , j ; begin
11542: LD_INT 0
11544: PPUSH
11545: PPUSH
11546: PPUSH
// disable ( 600 ) ;
11547: LD_INT 600
11549: DISABLE_MARKED
// BuildUp = false ;
11550: LD_ADDR_EXP 56
11554: PUSH
11555: LD_INT 0
11557: ST_TO_ADDR
// for i := 1 to BuildUpAreas do
11558: LD_ADDR_VAR 0 2
11562: PUSH
11563: DOUBLE
11564: LD_INT 1
11566: DEC
11567: ST_TO_ADDR
11568: LD_EXP 55
11572: PUSH
11573: FOR_TO
11574: IFFALSE 11729
// if Position_Sides [ i ] then
11576: LD_EXP 23
11580: PUSH
11581: LD_VAR 0 2
11585: ARRAY
11586: IFFALSE 11727
// for j := 1 to 8 do
11588: LD_ADDR_VAR 0 3
11592: PUSH
11593: DOUBLE
11594: LD_INT 1
11596: DEC
11597: ST_TO_ADDR
11598: LD_INT 8
11600: PUSH
11601: FOR_TO
11602: IFFALSE 11725
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
11604: LD_EXP 20
11608: PUSH
11609: LD_VAR 0 3
11613: ARRAY
11614: PUSH
11615: LD_EXP 17
11619: PUSH
11620: LD_EXP 23
11624: PUSH
11625: LD_VAR 0 2
11629: ARRAY
11630: ARRAY
11631: PUSH
11632: LD_EXP 17
11636: PUSH
11637: LD_VAR 0 3
11641: ARRAY
11642: NONEQUAL
11643: PUSH
11644: LD_EXP 22
11648: NOT
11649: PUSH
11650: LD_EXP 23
11654: PUSH
11655: LD_VAR 0 2
11659: ARRAY
11660: PUSH
11661: LD_VAR 0 3
11665: NONEQUAL
11666: AND
11667: OR
11668: AND
11669: IFFALSE 11693
// ShowArea ( j , BuildUpAreas [ i ] ) else
11671: LD_VAR 0 3
11675: PPUSH
11676: LD_EXP 55
11680: PUSH
11681: LD_VAR 0 2
11685: ARRAY
11686: PPUSH
11687: CALL_OW 334
11691: GO 11723
// if ( j = your_side ) then
11693: LD_VAR 0 3
11697: PUSH
11698: LD_OWVAR 2
11702: EQUAL
11703: IFFALSE 11723
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
11705: LD_EXP 55
11709: PUSH
11710: LD_VAR 0 2
11714: ARRAY
11715: PPUSH
11716: LD_INT 0
11718: PPUSH
11719: CALL_OW 424
11723: GO 11601
11725: POP
11726: POP
11727: GO 11573
11729: POP
11730: POP
// end ;
11731: LD_VAR 0 1
11735: RET
// every 1 marked 600 do var i , un ;
11736: GO 11738
11738: DISABLE
11739: LD_INT 0
11741: PPUSH
11742: PPUSH
// begin for i := 1 to BuildUpAreas do
11743: LD_ADDR_VAR 0 1
11747: PUSH
11748: DOUBLE
11749: LD_INT 1
11751: DEC
11752: ST_TO_ADDR
11753: LD_EXP 55
11757: PUSH
11758: FOR_TO
11759: IFFALSE 11929
// if Position_Sides [ i ] then
11761: LD_EXP 23
11765: PUSH
11766: LD_VAR 0 1
11770: ARRAY
11771: IFFALSE 11927
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_not , [ f_side , 0 ] ] ] ) do
11773: LD_ADDR_VAR 0 2
11777: PUSH
11778: LD_EXP 55
11782: PUSH
11783: LD_VAR 0 1
11787: ARRAY
11788: PPUSH
11789: LD_INT 2
11791: PUSH
11792: LD_INT 21
11794: PUSH
11795: LD_INT 1
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: PUSH
11802: LD_INT 21
11804: PUSH
11805: LD_INT 2
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: PUSH
11812: EMPTY
11813: LIST
11814: LIST
11815: LIST
11816: PUSH
11817: LD_INT 3
11819: PUSH
11820: LD_INT 22
11822: PUSH
11823: LD_INT 0
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: PPUSH
11838: CALL_OW 70
11842: PUSH
11843: FOR_IN
11844: IFFALSE 11925
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ GetSide ( un ) ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> GetSide ( un ) ) ) then
11846: LD_EXP 17
11850: PUSH
11851: LD_EXP 23
11855: PUSH
11856: LD_VAR 0 1
11860: ARRAY
11861: ARRAY
11862: PUSH
11863: LD_EXP 17
11867: PUSH
11868: LD_VAR 0 2
11872: PPUSH
11873: CALL_OW 255
11877: ARRAY
11878: NONEQUAL
11879: PUSH
11880: LD_EXP 22
11884: NOT
11885: PUSH
11886: LD_EXP 23
11890: PUSH
11891: LD_VAR 0 1
11895: ARRAY
11896: PUSH
11897: LD_VAR 0 2
11901: PPUSH
11902: CALL_OW 255
11906: NONEQUAL
11907: AND
11908: OR
11909: IFFALSE 11923
// ComMoveToArea ( un , BuildUpEscape ) ;
11911: LD_VAR 0 2
11915: PPUSH
11916: LD_INT 12
11918: PPUSH
11919: CALL_OW 113
11923: GO 11843
11925: POP
11926: POP
11927: GO 11758
11929: POP
11930: POP
// if BuildUp then
11931: LD_EXP 56
11935: IFFALSE 11938
// enable ;
11937: ENABLE
// end ;
11938: PPOPN 2
11940: END
// every 1 do
11941: GO 11943
11943: DISABLE
// if ( def_builduptime > 0 ) then
11944: LD_EXP 51
11948: PUSH
11949: LD_INT 0
11951: GREATER
11952: IFFALSE 11973
// begin if buildUpTime_Delay then
11954: LD_EXP 16
11958: IFFALSE 11969
// wait ( buildUpTime_Delay ) ;
11960: LD_EXP 16
11964: PPUSH
11965: CALL_OW 67
// EndBuildUp ;
11969: CALL 11542 0 0
// end ; end_of_file
11973: END
// export function SetMpTechs ( ) ; var side , i ; begin
11974: LD_INT 0
11976: PPUSH
11977: PPUSH
11978: PPUSH
// for side = 1 to 8 do
11979: LD_ADDR_VAR 0 2
11983: PUSH
11984: DOUBLE
11985: LD_INT 1
11987: DEC
11988: ST_TO_ADDR
11989: LD_INT 8
11991: PUSH
11992: FOR_TO
11993: IFFALSE 12114
// begin for i = 1 to 72 do
11995: LD_ADDR_VAR 0 3
11999: PUSH
12000: DOUBLE
12001: LD_INT 1
12003: DEC
12004: ST_TO_ADDR
12005: LD_INT 72
12007: PUSH
12008: FOR_TO
12009: IFFALSE 12040
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
12011: LD_VAR 0 3
12015: PPUSH
12016: LD_VAR 0 2
12020: PPUSH
12021: LD_INT 0
12023: PPUSH
12024: LD_VAR 0 3
12028: PPUSH
12029: CALL_OW 565
12033: PPUSH
12034: CALL_OW 322
12038: GO 12008
12040: POP
12041: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
12042: LD_INT 73
12044: PPUSH
12045: LD_VAR 0 2
12049: PPUSH
12050: LD_INT 0
12052: PPUSH
12053: LD_INT 25
12055: PPUSH
12056: CALL_OW 565
12060: PPUSH
12061: CALL_OW 322
// for i = 0 to 40 do
12065: LD_ADDR_VAR 0 3
12069: PUSH
12070: DOUBLE
12071: LD_INT 0
12073: DEC
12074: ST_TO_ADDR
12075: LD_INT 40
12077: PUSH
12078: FOR_TO
12079: IFFALSE 12110
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
12081: LD_VAR 0 3
12085: PPUSH
12086: LD_VAR 0 2
12090: PPUSH
12091: LD_INT 1
12093: PPUSH
12094: LD_VAR 0 3
12098: PPUSH
12099: CALL_OW 565
12103: PPUSH
12104: CALL_OW 324
12108: GO 12078
12110: POP
12111: POP
// end ;
12112: GO 11992
12114: POP
12115: POP
// end ;
12116: LD_VAR 0 1
12120: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
12121: LD_INT 0
12123: PPUSH
12124: PPUSH
12125: PPUSH
// for side = 1 to 8 do
12126: LD_ADDR_VAR 0 3
12130: PUSH
12131: DOUBLE
12132: LD_INT 1
12134: DEC
12135: ST_TO_ADDR
12136: LD_INT 8
12138: PUSH
12139: FOR_TO
12140: IFFALSE 16136
// begin for i = 1 to 73 do
12142: LD_ADDR_VAR 0 4
12146: PUSH
12147: DOUBLE
12148: LD_INT 1
12150: DEC
12151: ST_TO_ADDR
12152: LD_INT 73
12154: PUSH
12155: FOR_TO
12156: IFFALSE 12177
// SetTech ( i , side , state_disabled ) ;
12158: LD_VAR 0 4
12162: PPUSH
12163: LD_VAR 0 3
12167: PPUSH
12168: LD_INT 0
12170: PPUSH
12171: CALL_OW 322
12175: GO 12155
12177: POP
12178: POP
// for i = 0 to 40 do
12179: LD_ADDR_VAR 0 4
12183: PUSH
12184: DOUBLE
12185: LD_INT 0
12187: DEC
12188: ST_TO_ADDR
12189: LD_INT 40
12191: PUSH
12192: FOR_TO
12193: IFFALSE 12214
// SetRestrict ( i , side , false ) ;
12195: LD_VAR 0 4
12199: PPUSH
12200: LD_VAR 0 3
12204: PPUSH
12205: LD_INT 0
12207: PPUSH
12208: CALL_OW 324
12212: GO 12192
12214: POP
12215: POP
// case level of 1 :
12216: LD_VAR 0 1
12220: PUSH
12221: LD_INT 1
12223: DOUBLE
12224: EQUAL
12225: IFTRUE 12229
12227: GO 12382
12229: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12230: LD_INT 35
12232: PPUSH
12233: LD_VAR 0 3
12237: PPUSH
12238: LD_INT 1
12240: PPUSH
12241: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12245: LD_INT 45
12247: PPUSH
12248: LD_VAR 0 3
12252: PPUSH
12253: LD_INT 1
12255: PPUSH
12256: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12260: LD_INT 46
12262: PPUSH
12263: LD_VAR 0 3
12267: PPUSH
12268: LD_INT 1
12270: PPUSH
12271: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12275: LD_INT 47
12277: PPUSH
12278: LD_VAR 0 3
12282: PPUSH
12283: LD_INT 1
12285: PPUSH
12286: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12290: LD_INT 0
12292: PPUSH
12293: LD_VAR 0 3
12297: PPUSH
12298: LD_INT 1
12300: PPUSH
12301: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12305: LD_INT 2
12307: PPUSH
12308: LD_VAR 0 3
12312: PPUSH
12313: LD_INT 1
12315: PPUSH
12316: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12320: LD_INT 4
12322: PPUSH
12323: LD_VAR 0 3
12327: PPUSH
12328: LD_INT 1
12330: PPUSH
12331: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12335: LD_INT 6
12337: PPUSH
12338: LD_VAR 0 3
12342: PPUSH
12343: LD_INT 1
12345: PPUSH
12346: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12350: LD_INT 29
12352: PPUSH
12353: LD_VAR 0 3
12357: PPUSH
12358: LD_INT 1
12360: PPUSH
12361: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12365: LD_INT 31
12367: PPUSH
12368: LD_VAR 0 3
12372: PPUSH
12373: LD_INT 1
12375: PPUSH
12376: CALL_OW 324
// end ; 2 :
12380: GO 16134
12382: LD_INT 2
12384: DOUBLE
12385: EQUAL
12386: IFTRUE 12390
12388: GO 12588
12390: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12391: LD_INT 35
12393: PPUSH
12394: LD_VAR 0 3
12398: PPUSH
12399: LD_INT 1
12401: PPUSH
12402: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12406: LD_INT 45
12408: PPUSH
12409: LD_VAR 0 3
12413: PPUSH
12414: LD_INT 1
12416: PPUSH
12417: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12421: LD_INT 46
12423: PPUSH
12424: LD_VAR 0 3
12428: PPUSH
12429: LD_INT 1
12431: PPUSH
12432: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12436: LD_INT 47
12438: PPUSH
12439: LD_VAR 0 3
12443: PPUSH
12444: LD_INT 1
12446: PPUSH
12447: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12451: LD_INT 1
12453: PPUSH
12454: LD_VAR 0 3
12458: PPUSH
12459: LD_INT 1
12461: PPUSH
12462: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12466: LD_INT 2
12468: PPUSH
12469: LD_VAR 0 3
12473: PPUSH
12474: LD_INT 1
12476: PPUSH
12477: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12481: LD_INT 11
12483: PPUSH
12484: LD_VAR 0 3
12488: PPUSH
12489: LD_INT 1
12491: PPUSH
12492: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12496: LD_INT 0
12498: PPUSH
12499: LD_VAR 0 3
12503: PPUSH
12504: LD_INT 1
12506: PPUSH
12507: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12511: LD_INT 2
12513: PPUSH
12514: LD_VAR 0 3
12518: PPUSH
12519: LD_INT 1
12521: PPUSH
12522: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12526: LD_INT 4
12528: PPUSH
12529: LD_VAR 0 3
12533: PPUSH
12534: LD_INT 1
12536: PPUSH
12537: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12541: LD_INT 6
12543: PPUSH
12544: LD_VAR 0 3
12548: PPUSH
12549: LD_INT 1
12551: PPUSH
12552: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12556: LD_INT 29
12558: PPUSH
12559: LD_VAR 0 3
12563: PPUSH
12564: LD_INT 1
12566: PPUSH
12567: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12571: LD_INT 31
12573: PPUSH
12574: LD_VAR 0 3
12578: PPUSH
12579: LD_INT 1
12581: PPUSH
12582: CALL_OW 324
// end ; 3 :
12586: GO 16134
12588: LD_INT 3
12590: DOUBLE
12591: EQUAL
12592: IFTRUE 12596
12594: GO 13049
12596: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12597: LD_INT 35
12599: PPUSH
12600: LD_VAR 0 3
12604: PPUSH
12605: LD_INT 1
12607: PPUSH
12608: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12612: LD_INT 45
12614: PPUSH
12615: LD_VAR 0 3
12619: PPUSH
12620: LD_INT 1
12622: PPUSH
12623: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12627: LD_INT 46
12629: PPUSH
12630: LD_VAR 0 3
12634: PPUSH
12635: LD_INT 1
12637: PPUSH
12638: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12642: LD_INT 47
12644: PPUSH
12645: LD_VAR 0 3
12649: PPUSH
12650: LD_INT 1
12652: PPUSH
12653: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12657: LD_INT 1
12659: PPUSH
12660: LD_VAR 0 3
12664: PPUSH
12665: LD_INT 1
12667: PPUSH
12668: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12672: LD_INT 2
12674: PPUSH
12675: LD_VAR 0 3
12679: PPUSH
12680: LD_INT 1
12682: PPUSH
12683: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12687: LD_INT 11
12689: PPUSH
12690: LD_VAR 0 3
12694: PPUSH
12695: LD_INT 1
12697: PPUSH
12698: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12702: LD_INT 48
12704: PPUSH
12705: LD_VAR 0 3
12709: PPUSH
12710: LD_INT 1
12712: PPUSH
12713: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12717: LD_INT 69
12719: PPUSH
12720: LD_VAR 0 3
12724: PPUSH
12725: LD_INT 1
12727: PPUSH
12728: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12732: LD_INT 39
12734: PPUSH
12735: LD_VAR 0 3
12739: PPUSH
12740: LD_INT 1
12742: PPUSH
12743: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12747: LD_INT 43
12749: PPUSH
12750: LD_VAR 0 3
12754: PPUSH
12755: LD_INT 1
12757: PPUSH
12758: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12762: LD_INT 51
12764: PPUSH
12765: LD_VAR 0 3
12769: PPUSH
12770: LD_INT 1
12772: PPUSH
12773: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12777: LD_INT 6
12779: PPUSH
12780: LD_VAR 0 3
12784: PPUSH
12785: LD_INT 1
12787: PPUSH
12788: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12792: LD_INT 0
12794: PPUSH
12795: LD_VAR 0 3
12799: PPUSH
12800: LD_INT 1
12802: PPUSH
12803: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12807: LD_INT 2
12809: PPUSH
12810: LD_VAR 0 3
12814: PPUSH
12815: LD_INT 1
12817: PPUSH
12818: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12822: LD_INT 3
12824: PPUSH
12825: LD_VAR 0 3
12829: PPUSH
12830: LD_INT 1
12832: PPUSH
12833: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12837: LD_INT 4
12839: PPUSH
12840: LD_VAR 0 3
12844: PPUSH
12845: LD_INT 1
12847: PPUSH
12848: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12852: LD_INT 6
12854: PPUSH
12855: LD_VAR 0 3
12859: PPUSH
12860: LD_INT 1
12862: PPUSH
12863: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12867: LD_INT 7
12869: PPUSH
12870: LD_VAR 0 3
12874: PPUSH
12875: LD_INT 1
12877: PPUSH
12878: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12882: LD_INT 8
12884: PPUSH
12885: LD_VAR 0 3
12889: PPUSH
12890: LD_INT 1
12892: PPUSH
12893: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12897: LD_INT 10
12899: PPUSH
12900: LD_VAR 0 3
12904: PPUSH
12905: LD_INT 1
12907: PPUSH
12908: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12912: LD_INT 15
12914: PPUSH
12915: LD_VAR 0 3
12919: PPUSH
12920: LD_INT 1
12922: PPUSH
12923: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12927: LD_INT 16
12929: PPUSH
12930: LD_VAR 0 3
12934: PPUSH
12935: LD_INT 1
12937: PPUSH
12938: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12942: LD_INT 17
12944: PPUSH
12945: LD_VAR 0 3
12949: PPUSH
12950: LD_INT 1
12952: PPUSH
12953: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12957: LD_INT 20
12959: PPUSH
12960: LD_VAR 0 3
12964: PPUSH
12965: LD_INT 1
12967: PPUSH
12968: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12972: LD_INT 26
12974: PPUSH
12975: LD_VAR 0 3
12979: PPUSH
12980: LD_INT 1
12982: PPUSH
12983: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12987: LD_INT 27
12989: PPUSH
12990: LD_VAR 0 3
12994: PPUSH
12995: LD_INT 1
12997: PPUSH
12998: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13002: LD_INT 29
13004: PPUSH
13005: LD_VAR 0 3
13009: PPUSH
13010: LD_INT 1
13012: PPUSH
13013: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13017: LD_INT 31
13019: PPUSH
13020: LD_VAR 0 3
13024: PPUSH
13025: LD_INT 1
13027: PPUSH
13028: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13032: LD_INT 32
13034: PPUSH
13035: LD_VAR 0 3
13039: PPUSH
13040: LD_INT 1
13042: PPUSH
13043: CALL_OW 324
// end ; 4 :
13047: GO 16134
13049: LD_INT 4
13051: DOUBLE
13052: EQUAL
13053: IFTRUE 13057
13055: GO 14005
13057: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13058: LD_INT 35
13060: PPUSH
13061: LD_VAR 0 3
13065: PPUSH
13066: LD_INT 1
13068: PPUSH
13069: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13073: LD_INT 45
13075: PPUSH
13076: LD_VAR 0 3
13080: PPUSH
13081: LD_INT 1
13083: PPUSH
13084: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13088: LD_INT 46
13090: PPUSH
13091: LD_VAR 0 3
13095: PPUSH
13096: LD_INT 1
13098: PPUSH
13099: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13103: LD_INT 47
13105: PPUSH
13106: LD_VAR 0 3
13110: PPUSH
13111: LD_INT 1
13113: PPUSH
13114: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13118: LD_INT 1
13120: PPUSH
13121: LD_VAR 0 3
13125: PPUSH
13126: LD_INT 1
13128: PPUSH
13129: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13133: LD_INT 2
13135: PPUSH
13136: LD_VAR 0 3
13140: PPUSH
13141: LD_INT 1
13143: PPUSH
13144: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13148: LD_INT 11
13150: PPUSH
13151: LD_VAR 0 3
13155: PPUSH
13156: LD_INT 1
13158: PPUSH
13159: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13163: LD_INT 20
13165: PPUSH
13166: LD_VAR 0 3
13170: PPUSH
13171: LD_INT 1
13173: PPUSH
13174: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13178: LD_INT 48
13180: PPUSH
13181: LD_VAR 0 3
13185: PPUSH
13186: LD_INT 1
13188: PPUSH
13189: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13193: LD_INT 49
13195: PPUSH
13196: LD_VAR 0 3
13200: PPUSH
13201: LD_INT 1
13203: PPUSH
13204: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13208: LD_INT 69
13210: PPUSH
13211: LD_VAR 0 3
13215: PPUSH
13216: LD_INT 1
13218: PPUSH
13219: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13223: LD_INT 39
13225: PPUSH
13226: LD_VAR 0 3
13230: PPUSH
13231: LD_INT 1
13233: PPUSH
13234: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13238: LD_INT 34
13240: PPUSH
13241: LD_VAR 0 3
13245: PPUSH
13246: LD_INT 1
13248: PPUSH
13249: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13253: LD_INT 42
13255: PPUSH
13256: LD_VAR 0 3
13260: PPUSH
13261: LD_INT 1
13263: PPUSH
13264: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13268: LD_INT 44
13270: PPUSH
13271: LD_VAR 0 3
13275: PPUSH
13276: LD_INT 1
13278: PPUSH
13279: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13283: LD_INT 41
13285: PPUSH
13286: LD_VAR 0 3
13290: PPUSH
13291: LD_INT 1
13293: PPUSH
13294: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13298: LD_INT 43
13300: PPUSH
13301: LD_VAR 0 3
13305: PPUSH
13306: LD_INT 1
13308: PPUSH
13309: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13313: LD_INT 70
13315: PPUSH
13316: LD_VAR 0 3
13320: PPUSH
13321: LD_INT 1
13323: PPUSH
13324: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13328: LD_INT 51
13330: PPUSH
13331: LD_VAR 0 3
13335: PPUSH
13336: LD_INT 1
13338: PPUSH
13339: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13343: LD_INT 52
13345: PPUSH
13346: LD_VAR 0 3
13350: PPUSH
13351: LD_INT 1
13353: PPUSH
13354: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13358: LD_INT 6
13360: PPUSH
13361: LD_VAR 0 3
13365: PPUSH
13366: LD_INT 1
13368: PPUSH
13369: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13373: LD_INT 15
13375: PPUSH
13376: LD_VAR 0 3
13380: PPUSH
13381: LD_INT 1
13383: PPUSH
13384: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13388: LD_INT 7
13390: PPUSH
13391: LD_VAR 0 3
13395: PPUSH
13396: LD_INT 1
13398: PPUSH
13399: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13403: LD_INT 12
13405: PPUSH
13406: LD_VAR 0 3
13410: PPUSH
13411: LD_INT 1
13413: PPUSH
13414: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13418: LD_INT 18
13420: PPUSH
13421: LD_VAR 0 3
13425: PPUSH
13426: LD_INT 1
13428: PPUSH
13429: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13433: LD_INT 60
13435: PPUSH
13436: LD_VAR 0 3
13440: PPUSH
13441: LD_INT 1
13443: PPUSH
13444: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13448: LD_INT 9
13450: PPUSH
13451: LD_VAR 0 3
13455: PPUSH
13456: LD_INT 1
13458: PPUSH
13459: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13463: LD_INT 30
13465: PPUSH
13466: LD_VAR 0 3
13470: PPUSH
13471: LD_INT 1
13473: PPUSH
13474: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13478: LD_INT 37
13480: PPUSH
13481: LD_VAR 0 3
13485: PPUSH
13486: LD_INT 1
13488: PPUSH
13489: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13493: LD_INT 5
13495: PPUSH
13496: LD_VAR 0 3
13500: PPUSH
13501: LD_INT 1
13503: PPUSH
13504: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13508: LD_INT 66
13510: PPUSH
13511: LD_VAR 0 3
13515: PPUSH
13516: LD_INT 1
13518: PPUSH
13519: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13523: LD_INT 21
13525: PPUSH
13526: LD_VAR 0 3
13530: PPUSH
13531: LD_INT 1
13533: PPUSH
13534: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13538: LD_INT 22
13540: PPUSH
13541: LD_VAR 0 3
13545: PPUSH
13546: LD_INT 1
13548: PPUSH
13549: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13553: LD_INT 54
13555: PPUSH
13556: LD_VAR 0 3
13560: PPUSH
13561: LD_INT 1
13563: PPUSH
13564: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13568: LD_INT 0
13570: PPUSH
13571: LD_VAR 0 3
13575: PPUSH
13576: LD_INT 1
13578: PPUSH
13579: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
13583: LD_INT 1
13585: PPUSH
13586: LD_VAR 0 3
13590: PPUSH
13591: LD_INT 1
13593: PPUSH
13594: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13598: LD_INT 2
13600: PPUSH
13601: LD_VAR 0 3
13605: PPUSH
13606: LD_INT 1
13608: PPUSH
13609: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
13613: LD_INT 3
13615: PPUSH
13616: LD_VAR 0 3
13620: PPUSH
13621: LD_INT 1
13623: PPUSH
13624: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13628: LD_INT 4
13630: PPUSH
13631: LD_VAR 0 3
13635: PPUSH
13636: LD_INT 1
13638: PPUSH
13639: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
13643: LD_INT 5
13645: PPUSH
13646: LD_VAR 0 3
13650: PPUSH
13651: LD_INT 1
13653: PPUSH
13654: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13658: LD_INT 6
13660: PPUSH
13661: LD_VAR 0 3
13665: PPUSH
13666: LD_INT 1
13668: PPUSH
13669: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13673: LD_INT 7
13675: PPUSH
13676: LD_VAR 0 3
13680: PPUSH
13681: LD_INT 1
13683: PPUSH
13684: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13688: LD_INT 8
13690: PPUSH
13691: LD_VAR 0 3
13695: PPUSH
13696: LD_INT 1
13698: PPUSH
13699: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13703: LD_INT 10
13705: PPUSH
13706: LD_VAR 0 3
13710: PPUSH
13711: LD_INT 1
13713: PPUSH
13714: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
13718: LD_INT 11
13720: PPUSH
13721: LD_VAR 0 3
13725: PPUSH
13726: LD_INT 1
13728: PPUSH
13729: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
13733: LD_INT 12
13735: PPUSH
13736: LD_VAR 0 3
13740: PPUSH
13741: LD_INT 1
13743: PPUSH
13744: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
13748: LD_INT 13
13750: PPUSH
13751: LD_VAR 0 3
13755: PPUSH
13756: LD_INT 1
13758: PPUSH
13759: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
13763: LD_INT 14
13765: PPUSH
13766: LD_VAR 0 3
13770: PPUSH
13771: LD_INT 1
13773: PPUSH
13774: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13778: LD_INT 15
13780: PPUSH
13781: LD_VAR 0 3
13785: PPUSH
13786: LD_INT 1
13788: PPUSH
13789: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13793: LD_INT 16
13795: PPUSH
13796: LD_VAR 0 3
13800: PPUSH
13801: LD_INT 1
13803: PPUSH
13804: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13808: LD_INT 17
13810: PPUSH
13811: LD_VAR 0 3
13815: PPUSH
13816: LD_INT 1
13818: PPUSH
13819: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
13823: LD_INT 19
13825: PPUSH
13826: LD_VAR 0 3
13830: PPUSH
13831: LD_INT 1
13833: PPUSH
13834: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13838: LD_INT 20
13840: PPUSH
13841: LD_VAR 0 3
13845: PPUSH
13846: LD_INT 1
13848: PPUSH
13849: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
13853: LD_INT 21
13855: PPUSH
13856: LD_VAR 0 3
13860: PPUSH
13861: LD_INT 1
13863: PPUSH
13864: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
13868: LD_INT 23
13870: PPUSH
13871: LD_VAR 0 3
13875: PPUSH
13876: LD_INT 1
13878: PPUSH
13879: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13883: LD_INT 26
13885: PPUSH
13886: LD_VAR 0 3
13890: PPUSH
13891: LD_INT 1
13893: PPUSH
13894: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13898: LD_INT 27
13900: PPUSH
13901: LD_VAR 0 3
13905: PPUSH
13906: LD_INT 1
13908: PPUSH
13909: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
13913: LD_INT 28
13915: PPUSH
13916: LD_VAR 0 3
13920: PPUSH
13921: LD_INT 1
13923: PPUSH
13924: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13928: LD_INT 29
13930: PPUSH
13931: LD_VAR 0 3
13935: PPUSH
13936: LD_INT 1
13938: PPUSH
13939: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
13943: LD_INT 30
13945: PPUSH
13946: LD_VAR 0 3
13950: PPUSH
13951: LD_INT 1
13953: PPUSH
13954: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13958: LD_INT 31
13960: PPUSH
13961: LD_VAR 0 3
13965: PPUSH
13966: LD_INT 1
13968: PPUSH
13969: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13973: LD_INT 32
13975: PPUSH
13976: LD_VAR 0 3
13980: PPUSH
13981: LD_INT 1
13983: PPUSH
13984: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
13988: LD_INT 36
13990: PPUSH
13991: LD_VAR 0 3
13995: PPUSH
13996: LD_INT 1
13998: PPUSH
13999: CALL_OW 324
// end ; 5 :
14003: GO 16134
14005: LD_INT 5
14007: DOUBLE
14008: EQUAL
14009: IFTRUE 14013
14011: GO 15126
14013: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14014: LD_INT 35
14016: PPUSH
14017: LD_VAR 0 3
14021: PPUSH
14022: LD_INT 1
14024: PPUSH
14025: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14029: LD_INT 45
14031: PPUSH
14032: LD_VAR 0 3
14036: PPUSH
14037: LD_INT 1
14039: PPUSH
14040: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14044: LD_INT 46
14046: PPUSH
14047: LD_VAR 0 3
14051: PPUSH
14052: LD_INT 1
14054: PPUSH
14055: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14059: LD_INT 47
14061: PPUSH
14062: LD_VAR 0 3
14066: PPUSH
14067: LD_INT 1
14069: PPUSH
14070: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14074: LD_INT 1
14076: PPUSH
14077: LD_VAR 0 3
14081: PPUSH
14082: LD_INT 1
14084: PPUSH
14085: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14089: LD_INT 2
14091: PPUSH
14092: LD_VAR 0 3
14096: PPUSH
14097: LD_INT 1
14099: PPUSH
14100: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14104: LD_INT 11
14106: PPUSH
14107: LD_VAR 0 3
14111: PPUSH
14112: LD_INT 1
14114: PPUSH
14115: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
14119: LD_INT 20
14121: PPUSH
14122: LD_VAR 0 3
14126: PPUSH
14127: LD_INT 1
14129: PPUSH
14130: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14134: LD_INT 48
14136: PPUSH
14137: LD_VAR 0 3
14141: PPUSH
14142: LD_INT 1
14144: PPUSH
14145: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
14149: LD_INT 49
14151: PPUSH
14152: LD_VAR 0 3
14156: PPUSH
14157: LD_INT 1
14159: PPUSH
14160: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14164: LD_INT 69
14166: PPUSH
14167: LD_VAR 0 3
14171: PPUSH
14172: LD_INT 1
14174: PPUSH
14175: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14179: LD_INT 39
14181: PPUSH
14182: LD_VAR 0 3
14186: PPUSH
14187: LD_INT 1
14189: PPUSH
14190: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
14194: LD_INT 34
14196: PPUSH
14197: LD_VAR 0 3
14201: PPUSH
14202: LD_INT 1
14204: PPUSH
14205: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
14209: LD_INT 42
14211: PPUSH
14212: LD_VAR 0 3
14216: PPUSH
14217: LD_INT 1
14219: PPUSH
14220: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
14224: LD_INT 44
14226: PPUSH
14227: LD_VAR 0 3
14231: PPUSH
14232: LD_INT 1
14234: PPUSH
14235: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
14239: LD_INT 41
14241: PPUSH
14242: LD_VAR 0 3
14246: PPUSH
14247: LD_INT 1
14249: PPUSH
14250: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
14254: LD_INT 40
14256: PPUSH
14257: LD_VAR 0 3
14261: PPUSH
14262: LD_INT 1
14264: PPUSH
14265: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14269: LD_INT 43
14271: PPUSH
14272: LD_VAR 0 3
14276: PPUSH
14277: LD_INT 1
14279: PPUSH
14280: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
14284: LD_INT 70
14286: PPUSH
14287: LD_VAR 0 3
14291: PPUSH
14292: LD_INT 1
14294: PPUSH
14295: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14299: LD_INT 51
14301: PPUSH
14302: LD_VAR 0 3
14306: PPUSH
14307: LD_INT 1
14309: PPUSH
14310: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
14314: LD_INT 52
14316: PPUSH
14317: LD_VAR 0 3
14321: PPUSH
14322: LD_INT 1
14324: PPUSH
14325: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14329: LD_INT 6
14331: PPUSH
14332: LD_VAR 0 3
14336: PPUSH
14337: LD_INT 1
14339: PPUSH
14340: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
14344: LD_INT 15
14346: PPUSH
14347: LD_VAR 0 3
14351: PPUSH
14352: LD_INT 1
14354: PPUSH
14355: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
14359: LD_INT 7
14361: PPUSH
14362: LD_VAR 0 3
14366: PPUSH
14367: LD_INT 1
14369: PPUSH
14370: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
14374: LD_INT 12
14376: PPUSH
14377: LD_VAR 0 3
14381: PPUSH
14382: LD_INT 1
14384: PPUSH
14385: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
14389: LD_INT 17
14391: PPUSH
14392: LD_VAR 0 3
14396: PPUSH
14397: LD_INT 1
14399: PPUSH
14400: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
14404: LD_INT 18
14406: PPUSH
14407: LD_VAR 0 3
14411: PPUSH
14412: LD_INT 1
14414: PPUSH
14415: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
14419: LD_INT 60
14421: PPUSH
14422: LD_VAR 0 3
14426: PPUSH
14427: LD_INT 1
14429: PPUSH
14430: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
14434: LD_INT 32
14436: PPUSH
14437: LD_VAR 0 3
14441: PPUSH
14442: LD_INT 1
14444: PPUSH
14445: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
14449: LD_INT 9
14451: PPUSH
14452: LD_VAR 0 3
14456: PPUSH
14457: LD_INT 1
14459: PPUSH
14460: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
14464: LD_INT 57
14466: PPUSH
14467: LD_VAR 0 3
14471: PPUSH
14472: LD_INT 1
14474: PPUSH
14475: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
14479: LD_INT 30
14481: PPUSH
14482: LD_VAR 0 3
14486: PPUSH
14487: LD_INT 1
14489: PPUSH
14490: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
14494: LD_INT 37
14496: PPUSH
14497: LD_VAR 0 3
14501: PPUSH
14502: LD_INT 1
14504: PPUSH
14505: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
14509: LD_INT 63
14511: PPUSH
14512: LD_VAR 0 3
14516: PPUSH
14517: LD_INT 1
14519: PPUSH
14520: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
14524: LD_INT 3
14526: PPUSH
14527: LD_VAR 0 3
14531: PPUSH
14532: LD_INT 1
14534: PPUSH
14535: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
14539: LD_INT 4
14541: PPUSH
14542: LD_VAR 0 3
14546: PPUSH
14547: LD_INT 1
14549: PPUSH
14550: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14554: LD_INT 5
14556: PPUSH
14557: LD_VAR 0 3
14561: PPUSH
14562: LD_INT 1
14564: PPUSH
14565: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14569: LD_INT 66
14571: PPUSH
14572: LD_VAR 0 3
14576: PPUSH
14577: LD_INT 1
14579: PPUSH
14580: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14584: LD_INT 21
14586: PPUSH
14587: LD_VAR 0 3
14591: PPUSH
14592: LD_INT 1
14594: PPUSH
14595: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14599: LD_INT 22
14601: PPUSH
14602: LD_VAR 0 3
14606: PPUSH
14607: LD_INT 1
14609: PPUSH
14610: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
14614: LD_INT 19
14616: PPUSH
14617: LD_VAR 0 3
14621: PPUSH
14622: LD_INT 1
14624: PPUSH
14625: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
14629: LD_INT 54
14631: PPUSH
14632: LD_VAR 0 3
14636: PPUSH
14637: LD_INT 1
14639: PPUSH
14640: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
14644: LD_INT 55
14646: PPUSH
14647: LD_VAR 0 3
14651: PPUSH
14652: LD_INT 1
14654: PPUSH
14655: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14659: LD_INT 0
14661: PPUSH
14662: LD_VAR 0 3
14666: PPUSH
14667: LD_INT 1
14669: PPUSH
14670: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
14674: LD_INT 1
14676: PPUSH
14677: LD_VAR 0 3
14681: PPUSH
14682: LD_INT 1
14684: PPUSH
14685: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14689: LD_INT 2
14691: PPUSH
14692: LD_VAR 0 3
14696: PPUSH
14697: LD_INT 1
14699: PPUSH
14700: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
14704: LD_INT 3
14706: PPUSH
14707: LD_VAR 0 3
14711: PPUSH
14712: LD_INT 1
14714: PPUSH
14715: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14719: LD_INT 4
14721: PPUSH
14722: LD_VAR 0 3
14726: PPUSH
14727: LD_INT 1
14729: PPUSH
14730: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
14734: LD_INT 5
14736: PPUSH
14737: LD_VAR 0 3
14741: PPUSH
14742: LD_INT 1
14744: PPUSH
14745: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14749: LD_INT 6
14751: PPUSH
14752: LD_VAR 0 3
14756: PPUSH
14757: LD_INT 1
14759: PPUSH
14760: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
14764: LD_INT 7
14766: PPUSH
14767: LD_VAR 0 3
14771: PPUSH
14772: LD_INT 1
14774: PPUSH
14775: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
14779: LD_INT 8
14781: PPUSH
14782: LD_VAR 0 3
14786: PPUSH
14787: LD_INT 1
14789: PPUSH
14790: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
14794: LD_INT 10
14796: PPUSH
14797: LD_VAR 0 3
14801: PPUSH
14802: LD_INT 1
14804: PPUSH
14805: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
14809: LD_INT 11
14811: PPUSH
14812: LD_VAR 0 3
14816: PPUSH
14817: LD_INT 1
14819: PPUSH
14820: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
14824: LD_INT 12
14826: PPUSH
14827: LD_VAR 0 3
14831: PPUSH
14832: LD_INT 1
14834: PPUSH
14835: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
14839: LD_INT 13
14841: PPUSH
14842: LD_VAR 0 3
14846: PPUSH
14847: LD_INT 1
14849: PPUSH
14850: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
14854: LD_INT 14
14856: PPUSH
14857: LD_VAR 0 3
14861: PPUSH
14862: LD_INT 1
14864: PPUSH
14865: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
14869: LD_INT 15
14871: PPUSH
14872: LD_VAR 0 3
14876: PPUSH
14877: LD_INT 1
14879: PPUSH
14880: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
14884: LD_INT 16
14886: PPUSH
14887: LD_VAR 0 3
14891: PPUSH
14892: LD_INT 1
14894: PPUSH
14895: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
14899: LD_INT 17
14901: PPUSH
14902: LD_VAR 0 3
14906: PPUSH
14907: LD_INT 1
14909: PPUSH
14910: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
14914: LD_INT 18
14916: PPUSH
14917: LD_VAR 0 3
14921: PPUSH
14922: LD_INT 1
14924: PPUSH
14925: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
14929: LD_INT 19
14931: PPUSH
14932: LD_VAR 0 3
14936: PPUSH
14937: LD_INT 1
14939: PPUSH
14940: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
14944: LD_INT 20
14946: PPUSH
14947: LD_VAR 0 3
14951: PPUSH
14952: LD_INT 1
14954: PPUSH
14955: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
14959: LD_INT 21
14961: PPUSH
14962: LD_VAR 0 3
14966: PPUSH
14967: LD_INT 1
14969: PPUSH
14970: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
14974: LD_INT 23
14976: PPUSH
14977: LD_VAR 0 3
14981: PPUSH
14982: LD_INT 1
14984: PPUSH
14985: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
14989: LD_INT 26
14991: PPUSH
14992: LD_VAR 0 3
14996: PPUSH
14997: LD_INT 1
14999: PPUSH
15000: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15004: LD_INT 27
15006: PPUSH
15007: LD_VAR 0 3
15011: PPUSH
15012: LD_INT 1
15014: PPUSH
15015: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
15019: LD_INT 28
15021: PPUSH
15022: LD_VAR 0 3
15026: PPUSH
15027: LD_INT 1
15029: PPUSH
15030: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15034: LD_INT 29
15036: PPUSH
15037: LD_VAR 0 3
15041: PPUSH
15042: LD_INT 1
15044: PPUSH
15045: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
15049: LD_INT 30
15051: PPUSH
15052: LD_VAR 0 3
15056: PPUSH
15057: LD_INT 1
15059: PPUSH
15060: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15064: LD_INT 31
15066: PPUSH
15067: LD_VAR 0 3
15071: PPUSH
15072: LD_INT 1
15074: PPUSH
15075: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15079: LD_INT 32
15081: PPUSH
15082: LD_VAR 0 3
15086: PPUSH
15087: LD_INT 1
15089: PPUSH
15090: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
15094: LD_INT 33
15096: PPUSH
15097: LD_VAR 0 3
15101: PPUSH
15102: LD_INT 1
15104: PPUSH
15105: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
15109: LD_INT 36
15111: PPUSH
15112: LD_VAR 0 3
15116: PPUSH
15117: LD_INT 1
15119: PPUSH
15120: CALL_OW 324
// end ; 6 :
15124: GO 16134
15126: LD_INT 6
15128: DOUBLE
15129: EQUAL
15130: IFTRUE 15134
15132: GO 16059
15134: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15135: LD_INT 35
15137: PPUSH
15138: LD_VAR 0 3
15142: PPUSH
15143: LD_INT 1
15145: PPUSH
15146: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15150: LD_INT 45
15152: PPUSH
15153: LD_VAR 0 3
15157: PPUSH
15158: LD_INT 1
15160: PPUSH
15161: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15165: LD_INT 46
15167: PPUSH
15168: LD_VAR 0 3
15172: PPUSH
15173: LD_INT 1
15175: PPUSH
15176: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15180: LD_INT 47
15182: PPUSH
15183: LD_VAR 0 3
15187: PPUSH
15188: LD_INT 1
15190: PPUSH
15191: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15195: LD_INT 1
15197: PPUSH
15198: LD_VAR 0 3
15202: PPUSH
15203: LD_INT 1
15205: PPUSH
15206: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15210: LD_INT 2
15212: PPUSH
15213: LD_VAR 0 3
15217: PPUSH
15218: LD_INT 1
15220: PPUSH
15221: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15225: LD_INT 11
15227: PPUSH
15228: LD_VAR 0 3
15232: PPUSH
15233: LD_INT 1
15235: PPUSH
15236: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15240: LD_INT 20
15242: PPUSH
15243: LD_VAR 0 3
15247: PPUSH
15248: LD_INT 1
15250: PPUSH
15251: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15255: LD_INT 48
15257: PPUSH
15258: LD_VAR 0 3
15262: PPUSH
15263: LD_INT 1
15265: PPUSH
15266: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15270: LD_INT 49
15272: PPUSH
15273: LD_VAR 0 3
15277: PPUSH
15278: LD_INT 1
15280: PPUSH
15281: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
15285: LD_INT 50
15287: PPUSH
15288: LD_VAR 0 3
15292: PPUSH
15293: LD_INT 1
15295: PPUSH
15296: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15300: LD_INT 69
15302: PPUSH
15303: LD_VAR 0 3
15307: PPUSH
15308: LD_INT 1
15310: PPUSH
15311: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15315: LD_INT 39
15317: PPUSH
15318: LD_VAR 0 3
15322: PPUSH
15323: LD_INT 1
15325: PPUSH
15326: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15330: LD_INT 34
15332: PPUSH
15333: LD_VAR 0 3
15337: PPUSH
15338: LD_INT 1
15340: PPUSH
15341: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15345: LD_INT 42
15347: PPUSH
15348: LD_VAR 0 3
15352: PPUSH
15353: LD_INT 1
15355: PPUSH
15356: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15360: LD_INT 44
15362: PPUSH
15363: LD_VAR 0 3
15367: PPUSH
15368: LD_INT 1
15370: PPUSH
15371: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15375: LD_INT 41
15377: PPUSH
15378: LD_VAR 0 3
15382: PPUSH
15383: LD_INT 1
15385: PPUSH
15386: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
15390: LD_INT 13
15392: PPUSH
15393: LD_VAR 0 3
15397: PPUSH
15398: LD_INT 1
15400: PPUSH
15401: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
15405: LD_INT 40
15407: PPUSH
15408: LD_VAR 0 3
15412: PPUSH
15413: LD_INT 1
15415: PPUSH
15416: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15420: LD_INT 43
15422: PPUSH
15423: LD_VAR 0 3
15427: PPUSH
15428: LD_INT 1
15430: PPUSH
15431: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15435: LD_INT 70
15437: PPUSH
15438: LD_VAR 0 3
15442: PPUSH
15443: LD_INT 1
15445: PPUSH
15446: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
15450: LD_INT 23
15452: PPUSH
15453: LD_VAR 0 3
15457: PPUSH
15458: LD_INT 1
15460: PPUSH
15461: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15465: LD_INT 51
15467: PPUSH
15468: LD_VAR 0 3
15472: PPUSH
15473: LD_INT 1
15475: PPUSH
15476: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15480: LD_INT 52
15482: PPUSH
15483: LD_VAR 0 3
15487: PPUSH
15488: LD_INT 1
15490: PPUSH
15491: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15495: LD_INT 6
15497: PPUSH
15498: LD_VAR 0 3
15502: PPUSH
15503: LD_INT 1
15505: PPUSH
15506: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
15510: LD_INT 15
15512: PPUSH
15513: LD_VAR 0 3
15517: PPUSH
15518: LD_INT 1
15520: PPUSH
15521: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
15525: LD_INT 7
15527: PPUSH
15528: LD_VAR 0 3
15532: PPUSH
15533: LD_INT 1
15535: PPUSH
15536: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
15540: LD_INT 12
15542: PPUSH
15543: LD_VAR 0 3
15547: PPUSH
15548: LD_INT 1
15550: PPUSH
15551: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
15555: LD_INT 10
15557: PPUSH
15558: LD_VAR 0 3
15562: PPUSH
15563: LD_INT 1
15565: PPUSH
15566: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
15570: LD_INT 17
15572: PPUSH
15573: LD_VAR 0 3
15577: PPUSH
15578: LD_INT 1
15580: PPUSH
15581: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
15585: LD_INT 18
15587: PPUSH
15588: LD_VAR 0 3
15592: PPUSH
15593: LD_INT 1
15595: PPUSH
15596: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
15600: LD_INT 60
15602: PPUSH
15603: LD_VAR 0 3
15607: PPUSH
15608: LD_INT 1
15610: PPUSH
15611: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
15615: LD_INT 61
15617: PPUSH
15618: LD_VAR 0 3
15622: PPUSH
15623: LD_INT 1
15625: PPUSH
15626: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
15630: LD_INT 32
15632: PPUSH
15633: LD_VAR 0 3
15637: PPUSH
15638: LD_INT 1
15640: PPUSH
15641: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
15645: LD_INT 27
15647: PPUSH
15648: LD_VAR 0 3
15652: PPUSH
15653: LD_INT 1
15655: PPUSH
15656: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
15660: LD_INT 36
15662: PPUSH
15663: LD_VAR 0 3
15667: PPUSH
15668: LD_INT 1
15670: PPUSH
15671: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
15675: LD_INT 33
15677: PPUSH
15678: LD_VAR 0 3
15682: PPUSH
15683: LD_INT 1
15685: PPUSH
15686: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
15690: LD_INT 9
15692: PPUSH
15693: LD_VAR 0 3
15697: PPUSH
15698: LD_INT 1
15700: PPUSH
15701: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
15705: LD_INT 38
15707: PPUSH
15708: LD_VAR 0 3
15712: PPUSH
15713: LD_INT 1
15715: PPUSH
15716: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
15720: LD_INT 57
15722: PPUSH
15723: LD_VAR 0 3
15727: PPUSH
15728: LD_INT 1
15730: PPUSH
15731: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
15735: LD_INT 58
15737: PPUSH
15738: LD_VAR 0 3
15742: PPUSH
15743: LD_INT 1
15745: PPUSH
15746: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
15750: LD_INT 28
15752: PPUSH
15753: LD_VAR 0 3
15757: PPUSH
15758: LD_INT 1
15760: PPUSH
15761: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
15765: LD_INT 29
15767: PPUSH
15768: LD_VAR 0 3
15772: PPUSH
15773: LD_INT 1
15775: PPUSH
15776: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
15780: LD_INT 30
15782: PPUSH
15783: LD_VAR 0 3
15787: PPUSH
15788: LD_INT 1
15790: PPUSH
15791: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
15795: LD_INT 37
15797: PPUSH
15798: LD_VAR 0 3
15802: PPUSH
15803: LD_INT 1
15805: PPUSH
15806: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
15810: LD_INT 63
15812: PPUSH
15813: LD_VAR 0 3
15817: PPUSH
15818: LD_INT 1
15820: PPUSH
15821: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
15825: LD_INT 64
15827: PPUSH
15828: LD_VAR 0 3
15832: PPUSH
15833: LD_INT 1
15835: PPUSH
15836: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
15840: LD_INT 3
15842: PPUSH
15843: LD_VAR 0 3
15847: PPUSH
15848: LD_INT 1
15850: PPUSH
15851: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
15855: LD_INT 4
15857: PPUSH
15858: LD_VAR 0 3
15862: PPUSH
15863: LD_INT 1
15865: PPUSH
15866: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
15870: LD_INT 5
15872: PPUSH
15873: LD_VAR 0 3
15877: PPUSH
15878: LD_INT 1
15880: PPUSH
15881: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
15885: LD_INT 8
15887: PPUSH
15888: LD_VAR 0 3
15892: PPUSH
15893: LD_INT 1
15895: PPUSH
15896: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
15900: LD_INT 66
15902: PPUSH
15903: LD_VAR 0 3
15907: PPUSH
15908: LD_INT 1
15910: PPUSH
15911: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
15915: LD_INT 67
15917: PPUSH
15918: LD_VAR 0 3
15922: PPUSH
15923: LD_INT 1
15925: PPUSH
15926: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
15930: LD_INT 21
15932: PPUSH
15933: LD_VAR 0 3
15937: PPUSH
15938: LD_INT 1
15940: PPUSH
15941: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
15945: LD_INT 22
15947: PPUSH
15948: LD_VAR 0 3
15952: PPUSH
15953: LD_INT 1
15955: PPUSH
15956: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
15960: LD_INT 19
15962: PPUSH
15963: LD_VAR 0 3
15967: PPUSH
15968: LD_INT 1
15970: PPUSH
15971: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
15975: LD_INT 26
15977: PPUSH
15978: LD_VAR 0 3
15982: PPUSH
15983: LD_INT 1
15985: PPUSH
15986: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
15990: LD_INT 54
15992: PPUSH
15993: LD_VAR 0 3
15997: PPUSH
15998: LD_INT 1
16000: PPUSH
16001: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
16005: LD_INT 55
16007: PPUSH
16008: LD_VAR 0 3
16012: PPUSH
16013: LD_INT 1
16015: PPUSH
16016: CALL_OW 322
// for i = 0 to 39 do
16020: LD_ADDR_VAR 0 4
16024: PUSH
16025: DOUBLE
16026: LD_INT 0
16028: DEC
16029: ST_TO_ADDR
16030: LD_INT 39
16032: PUSH
16033: FOR_TO
16034: IFFALSE 16055
// SetRestrict ( i , side , true ) ;
16036: LD_VAR 0 4
16040: PPUSH
16041: LD_VAR 0 3
16045: PPUSH
16046: LD_INT 1
16048: PPUSH
16049: CALL_OW 324
16053: GO 16033
16055: POP
16056: POP
// end ; else
16057: GO 16134
16059: POP
// begin for i = 1 to 73 do
16060: LD_ADDR_VAR 0 4
16064: PUSH
16065: DOUBLE
16066: LD_INT 1
16068: DEC
16069: ST_TO_ADDR
16070: LD_INT 73
16072: PUSH
16073: FOR_TO
16074: IFFALSE 16095
// SetTech ( i , side , state_enabled ) ;
16076: LD_VAR 0 4
16080: PPUSH
16081: LD_VAR 0 3
16085: PPUSH
16086: LD_INT 1
16088: PPUSH
16089: CALL_OW 322
16093: GO 16073
16095: POP
16096: POP
// for i = 0 to 39 do
16097: LD_ADDR_VAR 0 4
16101: PUSH
16102: DOUBLE
16103: LD_INT 0
16105: DEC
16106: ST_TO_ADDR
16107: LD_INT 39
16109: PUSH
16110: FOR_TO
16111: IFFALSE 16132
// SetRestrict ( i , side , true ) ;
16113: LD_VAR 0 4
16117: PPUSH
16118: LD_VAR 0 3
16122: PPUSH
16123: LD_INT 1
16125: PPUSH
16126: CALL_OW 324
16130: GO 16110
16132: POP
16133: POP
// end ; end ; end ;
16134: GO 12139
16136: POP
16137: POP
// end ; end_of_file
16138: LD_VAR 0 2
16142: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
16143: LD_INT 0
16145: PPUSH
16146: PPUSH
// enable ( 98 ) ;
16147: LD_INT 98
16149: ENABLE_MARKED
// GameEnded = false ;
16150: LD_ADDR_LOC 29
16154: PUSH
16155: LD_INT 0
16157: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
16158: LD_ADDR_LOC 28
16162: PUSH
16163: LD_INT 0
16165: PUSH
16166: LD_INT 0
16168: PUSH
16169: LD_INT 0
16171: PUSH
16172: LD_INT 0
16174: PUSH
16175: LD_INT 0
16177: PUSH
16178: LD_INT 0
16180: PUSH
16181: LD_INT 0
16183: PUSH
16184: LD_INT 0
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: ST_TO_ADDR
// unfoged = false ;
16197: LD_ADDR_LOC 30
16201: PUSH
16202: LD_INT 0
16204: ST_TO_ADDR
// for i = 1 to side_positions do
16205: LD_ADDR_VAR 0 2
16209: PUSH
16210: DOUBLE
16211: LD_INT 1
16213: DEC
16214: ST_TO_ADDR
16215: LD_EXP 20
16219: PUSH
16220: FOR_TO
16221: IFFALSE 16261
// if not side_positions [ i ] then
16223: LD_EXP 20
16227: PUSH
16228: LD_VAR 0 2
16232: ARRAY
16233: NOT
16234: IFFALSE 16259
// defaited = replace ( defaited , i , true ) ;
16236: LD_ADDR_LOC 28
16240: PUSH
16241: LD_LOC 28
16245: PPUSH
16246: LD_VAR 0 2
16250: PPUSH
16251: LD_INT 1
16253: PPUSH
16254: CALL_OW 1
16258: ST_TO_ADDR
16259: GO 16220
16261: POP
16262: POP
// end ;
16263: LD_VAR 0 1
16267: RET
// function CanWinLoose ; begin
16268: LD_INT 0
16270: PPUSH
// Result := true ;
16271: LD_ADDR_VAR 0 1
16275: PUSH
16276: LD_INT 1
16278: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
16279: CALL_OW 518
16283: PUSH
16284: CALL_OW 519
16288: PUSH
16289: LD_INT 0
16291: GREATER
16292: AND
16293: IFFALSE 16303
// Result := false ;
16295: LD_ADDR_VAR 0 1
16299: PUSH
16300: LD_INT 0
16302: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
16303: CALL_OW 531
16307: PUSH
16308: CALL_OW 519
16312: PUSH
16313: LD_INT 1
16315: GREATER
16316: AND
16317: IFFALSE 16327
// Result := false ;
16319: LD_ADDR_VAR 0 1
16323: PUSH
16324: LD_INT 0
16326: ST_TO_ADDR
// end ;
16327: LD_VAR 0 1
16331: RET
// export function HasPower ( i ) ; var k , h ; begin
16332: LD_INT 0
16334: PPUSH
16335: PPUSH
16336: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
16337: LD_VAR 0 1
16341: PPUSH
16342: CALL_OW 108
16346: NOT
16347: PUSH
16348: LD_EXP 19
16352: PUSH
16353: LD_VAR 0 1
16357: ARRAY
16358: NOT
16359: AND
16360: PUSH
16361: LD_OWVAR 4
16365: AND
16366: IFFALSE 16378
// begin result = false ;
16368: LD_ADDR_VAR 0 2
16372: PUSH
16373: LD_INT 0
16375: ST_TO_ADDR
// end else
16376: GO 16673
// case def_win_rules of 0 :
16378: LD_EXP 15
16382: PUSH
16383: LD_INT 0
16385: DOUBLE
16386: EQUAL
16387: IFTRUE 16391
16389: GO 16554
16391: POP
// if def_people_respawning then
16392: LD_EXP 48
16396: IFFALSE 16487
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
16398: LD_ADDR_VAR 0 2
16402: PUSH
16403: LD_INT 22
16405: PUSH
16406: LD_VAR 0 1
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PUSH
16415: LD_INT 2
16417: PUSH
16418: LD_INT 21
16420: PUSH
16421: LD_INT 1
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: PUSH
16428: LD_INT 33
16430: PUSH
16431: LD_INT 3
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: PUSH
16438: LD_INT 33
16440: PUSH
16441: LD_INT 5
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: PUSH
16448: LD_INT 30
16450: PUSH
16451: LD_INT 0
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: PUSH
16458: LD_INT 30
16460: PUSH
16461: LD_INT 1
16463: PUSH
16464: EMPTY
16465: LIST
16466: LIST
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PPUSH
16480: CALL_OW 69
16484: ST_TO_ADDR
16485: GO 16552
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
16487: LD_ADDR_VAR 0 2
16491: PUSH
16492: LD_INT 22
16494: PUSH
16495: LD_VAR 0 1
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: PUSH
16504: LD_INT 2
16506: PUSH
16507: LD_INT 21
16509: PUSH
16510: LD_INT 1
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: PUSH
16517: LD_INT 33
16519: PUSH
16520: LD_INT 3
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: PUSH
16527: LD_INT 33
16529: PUSH
16530: LD_INT 5
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: PPUSH
16547: CALL_OW 69
16551: ST_TO_ADDR
16552: GO 16673
16554: LD_INT 1
16556: DOUBLE
16557: EQUAL
16558: IFTRUE 16562
16560: GO 16601
16562: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
16563: LD_ADDR_VAR 0 2
16567: PUSH
16568: LD_INT 22
16570: PUSH
16571: LD_VAR 0 1
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: PUSH
16580: LD_INT 21
16582: PUSH
16583: LD_INT 1
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: PPUSH
16594: CALL_OW 69
16598: ST_TO_ADDR
16599: GO 16673
16601: LD_INT 2
16603: DOUBLE
16604: EQUAL
16605: IFTRUE 16609
16607: GO 16672
16609: POP
// begin h = false ;
16610: LD_ADDR_VAR 0 4
16614: PUSH
16615: LD_INT 0
16617: ST_TO_ADDR
// for k in heroes [ i ] do
16618: LD_ADDR_VAR 0 3
16622: PUSH
16623: LD_EXP 28
16627: PUSH
16628: LD_VAR 0 1
16632: ARRAY
16633: PUSH
16634: FOR_IN
16635: IFFALSE 16658
// if IsLive ( k ) then
16637: LD_VAR 0 3
16641: PPUSH
16642: CALL_OW 300
16646: IFFALSE 16656
// h = true ;
16648: LD_ADDR_VAR 0 4
16652: PUSH
16653: LD_INT 1
16655: ST_TO_ADDR
16656: GO 16634
16658: POP
16659: POP
// Result := h ;
16660: LD_ADDR_VAR 0 2
16664: PUSH
16665: LD_VAR 0 4
16669: ST_TO_ADDR
// end ; end ;
16670: GO 16673
16672: POP
// end ;
16673: LD_VAR 0 2
16677: RET
// function AlliedSides ( i , j ) ; begin
16678: LD_INT 0
16680: PPUSH
// Result := false ;
16681: LD_ADDR_VAR 0 3
16685: PUSH
16686: LD_INT 0
16688: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
16689: LD_VAR 0 1
16693: PPUSH
16694: LD_VAR 0 2
16698: PPUSH
16699: CALL_OW 81
16703: PUSH
16704: LD_INT 1
16706: EQUAL
16707: PUSH
16708: LD_VAR 0 2
16712: PPUSH
16713: LD_VAR 0 1
16717: PPUSH
16718: CALL_OW 81
16722: PUSH
16723: LD_INT 1
16725: EQUAL
16726: AND
16727: PUSH
16728: LD_VAR 0 1
16732: PPUSH
16733: CALL_OW 83
16737: AND
16738: PUSH
16739: LD_VAR 0 2
16743: PPUSH
16744: CALL_OW 83
16748: AND
16749: IFFALSE 16759
// Result := true ;
16751: LD_ADDR_VAR 0 3
16755: PUSH
16756: LD_INT 1
16758: ST_TO_ADDR
// end ;
16759: LD_VAR 0 3
16763: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
16764: CALL 16268 0 0
16768: PUSH
16769: LD_LOC 29
16773: NOT
16774: AND
16775: IFFALSE 16791
16777: GO 16779
16779: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
16780: LD_ADDR_EXP 54
16784: PUSH
16785: LD_STRING #Player-Ended
16787: PUSH
16788: EMPTY
16789: LIST
16790: ST_TO_ADDR
16791: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
16792: CALL 16268 0 0
16796: PUSH
16797: LD_LOC 29
16801: AND
16802: IFFALSE 16811
16804: GO 16806
16806: DISABLE
// YouLostInMultiplayer ;
16807: CALL_OW 107
16811: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
16812: CALL 16268 0 0
16816: NOT
16817: PUSH
16818: CALL_OW 531
16822: NOT
16823: AND
16824: IFFALSE 16840
16826: GO 16828
16828: DISABLE
// WaitServerStrings = [ #server-wait ] ;
16829: LD_ADDR_EXP 54
16833: PUSH
16834: LD_STRING #server-wait
16836: PUSH
16837: EMPTY
16838: LIST
16839: ST_TO_ADDR
16840: END
// every 100 trigger IAmSpec do
16841: CALL_OW 531
16845: IFFALSE 16861
16847: GO 16849
16849: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
16850: LD_ADDR_EXP 54
16854: PUSH
16855: LD_STRING #Player-IAmSpec
16857: PUSH
16858: EMPTY
16859: LIST
16860: ST_TO_ADDR
16861: END
// every 100 trigger GameEnded and IAmSpec do
16862: LD_LOC 29
16866: PUSH
16867: CALL_OW 531
16871: AND
16872: IFFALSE 16881
16874: GO 16876
16876: DISABLE
// YouLostInMultiplayer ;
16877: CALL_OW 107
16881: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
16882: CALL 16268 0 0
16886: PUSH
16887: LD_LOC 29
16891: NOT
16892: AND
16893: IFFALSE 16909
16895: GO 16897
16897: DISABLE
// WaitServerStrings = [ $player-win ] ;
16898: LD_ADDR_EXP 54
16902: PUSH
16903: LD_STRING $player-win
16905: PUSH
16906: EMPTY
16907: LIST
16908: ST_TO_ADDR
16909: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
16910: CALL 16268 0 0
16914: PUSH
16915: LD_LOC 29
16919: AND
16920: IFFALSE 16944
16922: GO 16924
16924: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
16925: LD_EXP 21
16929: PUSH
16930: LD_OWVAR 2
16934: ARRAY
16935: PPUSH
16936: CALL 11151 0 1
// YouWinInMultiplayer ;
16940: CALL_OW 106
// end ;
16944: END
// every 100 trigger isEditor marked 401 do
16945: LD_OWVAR 84
16949: IFFALSE 16965
16951: GO 16953
16953: DISABLE
// Debug_Strings = [ You won ] ;
16954: LD_ADDR_OWVAR 48
16958: PUSH
16959: LD_STRING You won
16961: PUSH
16962: EMPTY
16963: LIST
16964: ST_TO_ADDR
16965: END
// every 100 trigger isEditor marked 400 do
16966: LD_OWVAR 84
16970: IFFALSE 16986
16972: GO 16974
16974: DISABLE
// Debug_Strings = [ You loss ] ;
16975: LD_ADDR_OWVAR 48
16979: PUSH
16980: LD_STRING You loss
16982: PUSH
16983: EMPTY
16984: LIST
16985: ST_TO_ADDR
16986: END
// every 100 marked 98 do var i , un ;
16987: GO 16989
16989: DISABLE
16990: LD_INT 0
16992: PPUSH
16993: PPUSH
// begin for i = 1 to side_positions do
16994: LD_ADDR_VAR 0 1
16998: PUSH
16999: DOUBLE
17000: LD_INT 1
17002: DEC
17003: ST_TO_ADDR
17004: LD_EXP 20
17008: PUSH
17009: FOR_TO
17010: IFFALSE 17133
// if side_positions [ i ] then
17012: LD_EXP 20
17016: PUSH
17017: LD_VAR 0 1
17021: ARRAY
17022: IFFALSE 17131
// if not HasPower ( i ) and not Defaited [ i ] then
17024: LD_VAR 0 1
17028: PPUSH
17029: CALL 16332 0 1
17033: NOT
17034: PUSH
17035: LD_LOC 28
17039: PUSH
17040: LD_VAR 0 1
17044: ARRAY
17045: NOT
17046: AND
17047: IFFALSE 17131
// begin un = filterallunits ( [ f_side , i ] ) ;
17049: LD_ADDR_VAR 0 2
17053: PUSH
17054: LD_INT 22
17056: PUSH
17057: LD_VAR 0 1
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PPUSH
17066: CALL_OW 69
17070: ST_TO_ADDR
// if un then
17071: LD_VAR 0 2
17075: IFFALSE 17089
// SetSide ( un , 0 ) ;
17077: LD_VAR 0 2
17081: PPUSH
17082: LD_INT 0
17084: PPUSH
17085: CALL_OW 235
// Defaited = replace ( Defaited , i , true ) ;
17089: LD_ADDR_LOC 28
17093: PUSH
17094: LD_LOC 28
17098: PPUSH
17099: LD_VAR 0 1
17103: PPUSH
17104: LD_INT 1
17106: PPUSH
17107: CALL_OW 1
17111: ST_TO_ADDR
// if i = your_side then
17112: LD_VAR 0 1
17116: PUSH
17117: LD_OWVAR 2
17121: EQUAL
17122: IFFALSE 17131
// begin Multiplayer_Loose_Message ;
17124: CALL_OW 521
// enable ( 400 ) ;
17128: LD_INT 400
17130: ENABLE_MARKED
// end ; end ;
17131: GO 17009
17133: POP
17134: POP
// if not Unfoged and defaited [ your_side ] then
17135: LD_LOC 30
17139: NOT
17140: PUSH
17141: LD_LOC 28
17145: PUSH
17146: LD_OWVAR 2
17150: ARRAY
17151: AND
17152: IFFALSE 17158
// Unfog ;
17154: CALL 17344 0 0
// DidGameEnd ;
17158: CALL 17173 0 0
// if not GameEnded then
17162: LD_LOC 29
17166: NOT
17167: IFFALSE 17170
// enable ;
17169: ENABLE
// end ;
17170: PPOPN 2
17172: END
// function DidGameEnd ; var i , k , enemy ; begin
17173: LD_INT 0
17175: PPUSH
17176: PPUSH
17177: PPUSH
17178: PPUSH
// enemy = [ ] ;
17179: LD_ADDR_VAR 0 4
17183: PUSH
17184: EMPTY
17185: ST_TO_ADDR
// for i = 1 to side_positions do
17186: LD_ADDR_VAR 0 2
17190: PUSH
17191: DOUBLE
17192: LD_INT 1
17194: DEC
17195: ST_TO_ADDR
17196: LD_EXP 20
17200: PUSH
17201: FOR_TO
17202: IFFALSE 17306
// if not defaited [ i ] then
17204: LD_LOC 28
17208: PUSH
17209: LD_VAR 0 2
17213: ARRAY
17214: NOT
17215: IFFALSE 17304
// for k = 1 to side_positions do
17217: LD_ADDR_VAR 0 3
17221: PUSH
17222: DOUBLE
17223: LD_INT 1
17225: DEC
17226: ST_TO_ADDR
17227: LD_EXP 20
17231: PUSH
17232: FOR_TO
17233: IFFALSE 17302
// if not defaited [ k ] then
17235: LD_LOC 28
17239: PUSH
17240: LD_VAR 0 3
17244: ARRAY
17245: NOT
17246: IFFALSE 17300
// if GetAttitude ( i , k ) in [ att_enemy , att_neutral ] then
17248: LD_VAR 0 2
17252: PPUSH
17253: LD_VAR 0 3
17257: PPUSH
17258: CALL_OW 81
17262: PUSH
17263: LD_INT 2
17265: PUSH
17266: LD_INT 0
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: IN
17273: IFFALSE 17300
// enemy = enemy ^ [ i , k ] ;
17275: LD_ADDR_VAR 0 4
17279: PUSH
17280: LD_VAR 0 4
17284: PUSH
17285: LD_VAR 0 2
17289: PUSH
17290: LD_VAR 0 3
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: ADD
17299: ST_TO_ADDR
17300: GO 17232
17302: POP
17303: POP
17304: GO 17201
17306: POP
17307: POP
// if not enemy then
17308: LD_VAR 0 4
17312: NOT
17313: IFFALSE 17339
// begin GameEnded = true ;
17315: LD_ADDR_LOC 29
17319: PUSH
17320: LD_INT 1
17322: ST_TO_ADDR
// if not defaited [ your_side ] then
17323: LD_LOC 28
17327: PUSH
17328: LD_OWVAR 2
17332: ARRAY
17333: NOT
17334: IFFALSE 17339
// enable ( 401 ) ;
17336: LD_INT 401
17338: ENABLE_MARKED
// end ; end ;
17339: LD_VAR 0 1
17343: RET
// function unfog ; var k , friends ; begin
17344: LD_INT 0
17346: PPUSH
17347: PPUSH
17348: PPUSH
// for k = 1 to side_positions do
17349: LD_ADDR_VAR 0 2
17353: PUSH
17354: DOUBLE
17355: LD_INT 1
17357: DEC
17358: ST_TO_ADDR
17359: LD_EXP 20
17363: PUSH
17364: FOR_TO
17365: IFFALSE 17421
// if not defaited [ k ] then
17367: LD_LOC 28
17371: PUSH
17372: LD_VAR 0 2
17376: ARRAY
17377: NOT
17378: IFFALSE 17419
// if GetAttitude ( your_side , k ) in [ att_friend ] then
17380: LD_OWVAR 2
17384: PPUSH
17385: LD_VAR 0 2
17389: PPUSH
17390: CALL_OW 81
17394: PUSH
17395: LD_INT 1
17397: PUSH
17398: EMPTY
17399: LIST
17400: IN
17401: IFFALSE 17419
// friends = friends ^ k ;
17403: LD_ADDR_VAR 0 3
17407: PUSH
17408: LD_VAR 0 3
17412: PUSH
17413: LD_VAR 0 2
17417: ADD
17418: ST_TO_ADDR
17419: GO 17364
17421: POP
17422: POP
// if not friends then
17423: LD_VAR 0 3
17427: NOT
17428: IFFALSE 17445
// begin fogoff ( true ) ;
17430: LD_INT 1
17432: PPUSH
17433: CALL_OW 344
// unfoged = true ;
17437: LD_ADDR_LOC 30
17441: PUSH
17442: LD_INT 1
17444: ST_TO_ADDR
// end ; end ;
17445: LD_VAR 0 1
17449: RET
// export function MakeGameEnd ; begin
17450: LD_INT 0
17452: PPUSH
// fogoff ( true ) ;
17453: LD_INT 1
17455: PPUSH
17456: CALL_OW 344
// unfoged = true ;
17460: LD_ADDR_LOC 30
17464: PUSH
17465: LD_INT 1
17467: ST_TO_ADDR
// wait ( 0 0$5 ) ;
17468: LD_INT 175
17470: PPUSH
17471: CALL_OW 67
// GameEnded = true ;
17475: LD_ADDR_LOC 29
17479: PUSH
17480: LD_INT 1
17482: ST_TO_ADDR
// end ;
17483: LD_VAR 0 1
17487: RET
// export function GetGameEnded ; begin
17488: LD_INT 0
17490: PPUSH
// result = GameEnded ;
17491: LD_ADDR_VAR 0 1
17495: PUSH
17496: LD_LOC 29
17500: ST_TO_ADDR
// end ;
17501: LD_VAR 0 1
17505: RET
