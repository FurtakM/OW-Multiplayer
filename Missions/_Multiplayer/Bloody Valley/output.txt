// export def_tree_function ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , respawning_time_min , respawning_time_max , siberite_bomb_Delay , amount_of_apemen , tree_function , def_win_rules , buildUpTime_Delay ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export Position_Sides ; export depot_def , breastworks_def , start_def , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 141
// begin Your_Side := mp_player_side ;
  79: LD_ADDR_OWVAR 2
  83: PUSH
  84: LD_OWVAR 7
  88: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  89: LD_ADDR_EXP 20
  93: PUSH
  94: LD_OWVAR 17
  98: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  99: LD_ADDR_EXP 17
 103: PUSH
 104: LD_OWVAR 15
 108: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 109: LD_ADDR_EXP 21
 113: PUSH
 114: LD_OWVAR 16
 118: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 119: LD_ADDR_EXP 19
 123: PUSH
 124: CALL 0 0 0
 128: ST_TO_ADDR
// Teams := mp_teams ;
 129: LD_ADDR_EXP 18
 133: PUSH
 134: LD_OWVAR 12
 138: ST_TO_ADDR
// end else
 139: GO 334
// begin Your_Side := 1 ;
 141: LD_ADDR_OWVAR 2
 145: PUSH
 146: LD_INT 1
 148: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 149: LD_ADDR_EXP 20
 153: PUSH
 154: LD_INT 1
 156: PUSH
 157: LD_INT 2
 159: PUSH
 160: LD_INT 3
 162: PUSH
 163: LD_INT 4
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 188: LD_ADDR_EXP 17
 192: PUSH
 193: LD_INT 1
 195: PUSH
 196: LD_INT 1
 198: PUSH
 199: LD_INT 2
 201: PUSH
 202: LD_INT 2
 204: PUSH
 205: LD_INT 0
 207: PUSH
 208: LD_INT 0
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 0 , 0 , 0 , 0 ] ;
 227: LD_ADDR_EXP 21
 231: PUSH
 232: LD_INT 1
 234: PUSH
 235: LD_INT 2
 237: PUSH
 238: LD_INT 3
 240: PUSH
 241: LD_INT 1
 243: PUSH
 244: LD_INT 0
 246: PUSH
 247: LD_INT 0
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 0
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: LIST
 264: LIST
 265: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 266: LD_ADDR_EXP 19
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: LD_INT 0
 279: PUSH
 280: LD_INT 0
 282: PUSH
 283: LD_INT 0
 285: PUSH
 286: LD_INT 0
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: LIST
 299: LIST
 300: LIST
 301: LIST
 302: LIST
 303: LIST
 304: ST_TO_ADDR
// Teams := [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 305: LD_ADDR_EXP 18
 309: PUSH
 310: LD_INT 1
 312: PUSH
 313: LD_INT 2
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: LD_INT 3
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: ST_TO_ADDR
// end ; for i := 1 to 8 do
 334: LD_ADDR_VAR 0 2
 338: PUSH
 339: DOUBLE
 340: LD_INT 1
 342: DEC
 343: ST_TO_ADDR
 344: LD_INT 8
 346: PUSH
 347: FOR_TO
 348: IFFALSE 435
// if Multiplayer_GetPlayerIsSpec ( i ) then
 350: LD_VAR 0 2
 354: PPUSH
 355: CALL_OW 530
 359: IFFALSE 433
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 361: LD_ADDR_EXP 20
 365: PUSH
 366: LD_EXP 20
 370: PPUSH
 371: LD_VAR 0 2
 375: PPUSH
 376: LD_INT 0
 378: PPUSH
 379: CALL_OW 1
 383: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 384: LD_ADDR_EXP 18
 388: PUSH
 389: LD_EXP 18
 393: PPUSH
 394: LD_EXP 17
 398: PUSH
 399: LD_VAR 0 2
 403: ARRAY
 404: PPUSH
 405: LD_EXP 18
 409: PUSH
 410: LD_EXP 17
 414: PUSH
 415: LD_VAR 0 2
 419: ARRAY
 420: ARRAY
 421: PUSH
 422: LD_VAR 0 2
 426: DIFF
 427: PPUSH
 428: CALL_OW 1
 432: ST_TO_ADDR
// end ;
 433: GO 347
 435: POP
 436: POP
// Position_Sides := [ 0 , 0 , 0 , 0 ] ;
 437: LD_ADDR_EXP 23
 441: PUSH
 442: LD_INT 0
 444: PUSH
 445: LD_INT 0
 447: PUSH
 448: LD_INT 0
 450: PUSH
 451: LD_INT 0
 453: PUSH
 454: EMPTY
 455: LIST
 456: LIST
 457: LIST
 458: LIST
 459: ST_TO_ADDR
// for i := 1 to 8 do
 460: LD_ADDR_VAR 0 2
 464: PUSH
 465: DOUBLE
 466: LD_INT 1
 468: DEC
 469: ST_TO_ADDR
 470: LD_INT 8
 472: PUSH
 473: FOR_TO
 474: IFFALSE 521
// if Side_Positions [ i ] then
 476: LD_EXP 20
 480: PUSH
 481: LD_VAR 0 2
 485: ARRAY
 486: IFFALSE 519
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 488: LD_ADDR_EXP 23
 492: PUSH
 493: LD_EXP 23
 497: PPUSH
 498: LD_EXP 20
 502: PUSH
 503: LD_VAR 0 2
 507: ARRAY
 508: PPUSH
 509: LD_VAR 0 2
 513: PPUSH
 514: CALL_OW 1
 518: ST_TO_ADDR
 519: GO 473
 521: POP
 522: POP
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 523: LD_ADDR_EXP 22
 527: PUSH
 528: LD_EXP 17
 532: PUSH
 533: LD_INT 0
 535: PUSH
 536: EMPTY
 537: LIST
 538: DIFF
 539: PUSH
 540: LD_INT 1
 542: GREATER
 543: ST_TO_ADDR
// if Multiplayer then
 544: LD_OWVAR 4
 548: IFFALSE 755
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 550: LD_ADDR_EXP 38
 554: PUSH
 555: LD_INT 0
 557: PPUSH
 558: CALL_OW 426
 562: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 563: LD_ADDR_EXP 39
 567: PUSH
 568: LD_INT 1
 570: PPUSH
 571: CALL_OW 426
 575: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 576: LD_ADDR_EXP 40
 580: PUSH
 581: LD_INT 2
 583: PPUSH
 584: CALL_OW 426
 588: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 589: LD_ADDR_EXP 41
 593: PUSH
 594: LD_INT 3
 596: PPUSH
 597: CALL_OW 426
 601: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 602: LD_ADDR_EXP 42
 606: PUSH
 607: LD_INT 4
 609: PPUSH
 610: CALL_OW 426
 614: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 615: LD_ADDR_EXP 43
 619: PUSH
 620: LD_INT 5
 622: PPUSH
 623: CALL_OW 426
 627: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 628: LD_ADDR_EXP 45
 632: PUSH
 633: LD_INT 10
 635: PPUSH
 636: CALL_OW 426
 640: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 641: LD_ADDR_EXP 46
 645: PUSH
 646: LD_INT 11
 648: PPUSH
 649: CALL_OW 426
 653: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 654: LD_ADDR_EXP 47
 658: PUSH
 659: LD_INT 12
 661: PPUSH
 662: CALL_OW 426
 666: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 13 ) ;
 667: LD_ADDR_EXP 49
 671: PUSH
 672: LD_INT 13
 674: PPUSH
 675: CALL_OW 426
 679: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 14 ) ;
 680: LD_ADDR_EXP 48
 684: PUSH
 685: LD_INT 14
 687: PPUSH
 688: CALL_OW 426
 692: ST_TO_ADDR
// def_tree_function := GetMultiplayerSetting ( 15 ) ;
 693: LD_ADDR_EXP 1
 697: PUSH
 698: LD_INT 15
 700: PPUSH
 701: CALL_OW 426
 705: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 706: LD_ADDR_EXP 50
 710: PUSH
 711: LD_INT 17
 713: PPUSH
 714: CALL_OW 426
 718: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 719: LD_ADDR_EXP 51
 723: PUSH
 724: LD_INT 20
 726: PPUSH
 727: CALL_OW 426
 731: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 732: LD_ADDR_VAR 0 3
 736: PUSH
 737: LD_INT 22
 739: PPUSH
 740: CALL_OW 426
 744: ST_TO_ADDR
// def_win_rules = 0 ;
 745: LD_ADDR_EXP 15
 749: PUSH
 750: LD_INT 0
 752: ST_TO_ADDR
// end else
 753: GO 887
// begin Randomize ;
 755: CALL_OW 10
// def_base_level := 2 ;
 759: LD_ADDR_EXP 38
 763: PUSH
 764: LD_INT 2
 766: ST_TO_ADDR
// def_amount_of_people := 1 ;
 767: LD_ADDR_EXP 39
 771: PUSH
 772: LD_INT 1
 774: ST_TO_ADDR
// def_skill_level := 1 ;
 775: LD_ADDR_EXP 40
 779: PUSH
 780: LD_INT 1
 782: ST_TO_ADDR
// def_starting_resources := 2 ;
 783: LD_ADDR_EXP 41
 787: PUSH
 788: LD_INT 2
 790: ST_TO_ADDR
// def_shipments_density := 1 ;
 791: LD_ADDR_EXP 42
 795: PUSH
 796: LD_INT 1
 798: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 799: LD_ADDR_EXP 43
 803: PUSH
 804: LD_INT 0
 806: ST_TO_ADDR
// def_shared_vision := 1 ;
 807: LD_ADDR_EXP 45
 811: PUSH
 812: LD_INT 1
 814: ST_TO_ADDR
// def_morale_flags := 1 ;
 815: LD_ADDR_EXP 46
 819: PUSH
 820: LD_INT 1
 822: ST_TO_ADDR
// def_siberite_detection := 1 ;
 823: LD_ADDR_EXP 47
 827: PUSH
 828: LD_INT 1
 830: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 831: LD_ADDR_EXP 49
 835: PUSH
 836: LD_INT 3
 838: ST_TO_ADDR
// def_people_respawning := 2 ;
 839: LD_ADDR_EXP 48
 843: PUSH
 844: LD_INT 2
 846: ST_TO_ADDR
// def_tree_function := 7 ;
 847: LD_ADDR_EXP 1
 851: PUSH
 852: LD_INT 7
 854: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 855: LD_ADDR_EXP 50
 859: PUSH
 860: LD_INT 0
 862: ST_TO_ADDR
// def_builduptime := 1 ;
 863: LD_ADDR_EXP 51
 867: PUSH
 868: LD_INT 1
 870: ST_TO_ADDR
// tech_level = 4 ;
 871: LD_ADDR_VAR 0 3
 875: PUSH
 876: LD_INT 4
 878: ST_TO_ADDR
// def_win_rules = 0 ;
 879: LD_ADDR_EXP 15
 883: PUSH
 884: LD_INT 0
 886: ST_TO_ADDR
// end ; if def_tree_function = 7 then
 887: LD_EXP 1
 891: PUSH
 892: LD_INT 7
 894: EQUAL
 895: IFFALSE 913
// def_tree_function := Rand ( 1 , 5 ) ;
 897: LD_ADDR_EXP 1
 901: PUSH
 902: LD_INT 1
 904: PPUSH
 905: LD_INT 5
 907: PPUSH
 908: CALL_OW 12
 912: ST_TO_ADDR
// InitGameRules ;
 913: CALL 8025 0 0
// if def_game_rules = 0 then
 917: LD_EXP 37
 921: PUSH
 922: LD_INT 0
 924: EQUAL
 925: IFFALSE 952
// begin if isSGUI then
 927: LD_OWVAR 83
 931: IFFALSE 939
// setMpTechs ( ) else
 933: CALL 12168 0 0
 937: GO 952
// begin SetMpTechLevel ( tech_level + 1 ) ;
 939: LD_VAR 0 3
 943: PUSH
 944: LD_INT 1
 946: PLUS
 947: PPUSH
 948: CALL 12315 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 952: LD_ADDR_EXP 2
 956: PUSH
 957: LD_INT 0
 959: PUSH
 960: LD_INT 1
 962: PUSH
 963: LD_INT 1
 965: PUSH
 966: LD_INT 1
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: LIST
 973: LIST
 974: PUSH
 975: LD_EXP 38
 979: PUSH
 980: LD_INT 1
 982: PLUS
 983: ARRAY
 984: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 , 3 ] [ def_base_level + 1 ] ;
 985: LD_ADDR_EXP 3
 989: PUSH
 990: LD_INT 0
 992: PUSH
 993: LD_INT 0
 995: PUSH
 996: LD_INT 2
 998: PUSH
 999: LD_INT 3
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: PUSH
1008: LD_EXP 38
1012: PUSH
1013: LD_INT 1
1015: PLUS
1016: ARRAY
1017: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1018: LD_ADDR_EXP 5
1022: PUSH
1023: LD_INT 2
1025: PUSH
1026: LD_INT 3
1028: PUSH
1029: LD_INT 4
1031: PUSH
1032: LD_INT 5
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: PUSH
1041: LD_EXP 40
1045: PUSH
1046: LD_INT 1
1048: PLUS
1049: ARRAY
1050: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1051: LD_ADDR_EXP 7
1055: PUSH
1056: LD_INT 0
1058: PUSH
1059: LD_INT 0
1061: PUSH
1062: LD_INT 0
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: PUSH
1070: LD_INT 30
1072: PUSH
1073: LD_INT 0
1075: PUSH
1076: LD_INT 0
1078: PUSH
1079: EMPTY
1080: LIST
1081: LIST
1082: LIST
1083: PUSH
1084: LD_INT 50
1086: PUSH
1087: LD_INT 20
1089: PUSH
1090: LD_INT 0
1092: PUSH
1093: EMPTY
1094: LIST
1095: LIST
1096: LIST
1097: PUSH
1098: LD_INT 80
1100: PUSH
1101: LD_INT 40
1103: PUSH
1104: LD_INT 20
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: LIST
1116: LIST
1117: PUSH
1118: LD_EXP 41
1122: PUSH
1123: LD_INT 1
1125: PLUS
1126: ARRAY
1127: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1128: LD_ADDR_EXP 6
1132: PUSH
1133: LD_INT 10
1135: PUSH
1136: EMPTY
1137: LIST
1138: PUSH
1139: LD_INT 7
1141: PUSH
1142: LD_INT 14
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: PUSH
1149: LD_INT 6
1151: PUSH
1152: LD_INT 12
1154: PUSH
1155: LD_INT 18
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: LIST
1162: PUSH
1163: LD_INT 5
1165: PUSH
1166: LD_INT 10
1168: PUSH
1169: LD_INT 15
1171: PUSH
1172: LD_INT 20
1174: PUSH
1175: EMPTY
1176: LIST
1177: LIST
1178: LIST
1179: LIST
1180: PUSH
1181: EMPTY
1182: LIST
1183: LIST
1184: LIST
1185: LIST
1186: PUSH
1187: LD_EXP 41
1191: PUSH
1192: LD_INT 1
1194: PLUS
1195: ARRAY
1196: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1197: LD_ADDR_EXP 4
1201: PUSH
1202: LD_EXP 39
1206: PUSH
1207: LD_INT 4
1209: PLUS
1210: ST_TO_ADDR
// shipments_density := 720 - ( def_shipments_density * 2 ) ;
1211: LD_ADDR_EXP 8
1215: PUSH
1216: LD_INT 720
1218: PUSH
1219: LD_EXP 42
1223: PUSH
1224: LD_INT 2
1226: MUL
1227: MINUS
1228: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1229: LD_ADDR_EXP 13
1233: PUSH
1234: LD_INT 0
1236: PUSH
1237: LD_INT 1
1239: PUSH
1240: LD_INT 2
1242: PUSH
1243: LD_INT 3
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: PUSH
1252: LD_EXP 49
1256: PUSH
1257: LD_INT 1
1259: PLUS
1260: ARRAY
1261: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1262: LD_ADDR_EXP 10
1266: PUSH
1267: LD_INT 0
1269: PUSH
1270: LD_INT 8400
1272: PUSH
1273: LD_INT 1750
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: LIST
1280: PUSH
1281: LD_EXP 48
1285: PUSH
1286: LD_INT 1
1288: PLUS
1289: ARRAY
1290: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1291: LD_ADDR_EXP 11
1295: PUSH
1296: LD_INT 0
1298: PUSH
1299: LD_INT 21000
1301: PUSH
1302: LD_INT 4200
1304: PUSH
1305: EMPTY
1306: LIST
1307: LIST
1308: LIST
1309: PUSH
1310: LD_EXP 48
1314: PUSH
1315: LD_INT 1
1317: PLUS
1318: ARRAY
1319: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1320: LD_ADDR_EXP 9
1324: PUSH
1325: LD_INT 1
1327: NEG
1328: PUSH
1329: LD_INT 350
1331: PUSH
1332: LD_INT 700
1334: PUSH
1335: LD_INT 1400
1337: PUSH
1338: LD_INT 0
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: PUSH
1348: LD_EXP 46
1352: PUSH
1353: LD_INT 1
1355: PLUS
1356: ARRAY
1357: ST_TO_ADDR
// battle_flags_id := [ ] ;
1358: LD_ADDR_EXP 27
1362: PUSH
1363: EMPTY
1364: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1365: LD_ADDR_EXP 12
1369: PUSH
1370: LD_INT 0
1372: PUSH
1373: LD_INT 1
1375: PUSH
1376: LD_INT 63000
1378: PUSH
1379: LD_INT 126000
1381: PUSH
1382: LD_INT 189000
1384: PUSH
1385: LD_INT 252000
1387: PUSH
1388: EMPTY
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: PUSH
1396: LD_EXP 50
1400: PUSH
1401: LD_INT 1
1403: PLUS
1404: ARRAY
1405: ST_TO_ADDR
// tree_function := [ [ 0 , 0 , 0 , 0 , 0 ] , [ 2 , 0 , 0 , 0 , 0 ] , [ 0 , 4 , 0 , 0 , 0 ] , [ 0 , 0 , 2 , 0 , 0 ] , [ 0 , 0 , 0 , 3 , 0 ] , [ 1 , 2 , 1 , 2 , 2 ] , [ 0 , 0 , 0 , 0 , 3 ] ] [ def_tree_function + 1 ] ;
1406: LD_ADDR_EXP 14
1410: PUSH
1411: LD_INT 0
1413: PUSH
1414: LD_INT 0
1416: PUSH
1417: LD_INT 0
1419: PUSH
1420: LD_INT 0
1422: PUSH
1423: LD_INT 0
1425: PUSH
1426: EMPTY
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: PUSH
1433: LD_INT 2
1435: PUSH
1436: LD_INT 0
1438: PUSH
1439: LD_INT 0
1441: PUSH
1442: LD_INT 0
1444: PUSH
1445: LD_INT 0
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: PUSH
1455: LD_INT 0
1457: PUSH
1458: LD_INT 4
1460: PUSH
1461: LD_INT 0
1463: PUSH
1464: LD_INT 0
1466: PUSH
1467: LD_INT 0
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: LIST
1474: LIST
1475: LIST
1476: PUSH
1477: LD_INT 0
1479: PUSH
1480: LD_INT 0
1482: PUSH
1483: LD_INT 2
1485: PUSH
1486: LD_INT 0
1488: PUSH
1489: LD_INT 0
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: PUSH
1499: LD_INT 0
1501: PUSH
1502: LD_INT 0
1504: PUSH
1505: LD_INT 0
1507: PUSH
1508: LD_INT 3
1510: PUSH
1511: LD_INT 0
1513: PUSH
1514: EMPTY
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: LIST
1520: PUSH
1521: LD_INT 1
1523: PUSH
1524: LD_INT 2
1526: PUSH
1527: LD_INT 1
1529: PUSH
1530: LD_INT 2
1532: PUSH
1533: LD_INT 2
1535: PUSH
1536: EMPTY
1537: LIST
1538: LIST
1539: LIST
1540: LIST
1541: LIST
1542: PUSH
1543: LD_INT 0
1545: PUSH
1546: LD_INT 0
1548: PUSH
1549: LD_INT 0
1551: PUSH
1552: LD_INT 0
1554: PUSH
1555: LD_INT 3
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: LIST
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: PUSH
1574: LD_EXP 1
1578: PUSH
1579: LD_INT 1
1581: PLUS
1582: ARRAY
1583: ST_TO_ADDR
// buildUpTime_Delay := [ 0 , 5 5$00 , 6 6$00 , 7 7$00 , 8 8$00 , 9 9$00 , 10 10$00 , 11 11$00 , 12 12$00 , 13 13$00 , 14 14$00 , 15 15$00 ] [ def_builduptime + 1 ] ;
1584: LD_ADDR_EXP 16
1588: PUSH
1589: LD_INT 0
1591: PUSH
1592: LD_INT 10500
1594: PUSH
1595: LD_INT 12600
1597: PUSH
1598: LD_INT 14700
1600: PUSH
1601: LD_INT 16800
1603: PUSH
1604: LD_INT 18900
1606: PUSH
1607: LD_INT 21000
1609: PUSH
1610: LD_INT 23100
1612: PUSH
1613: LD_INT 25200
1615: PUSH
1616: LD_INT 27300
1618: PUSH
1619: LD_INT 29400
1621: PUSH
1622: LD_INT 31500
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: PUSH
1639: LD_EXP 51
1643: PUSH
1644: LD_INT 1
1646: PLUS
1647: ARRAY
1648: ST_TO_ADDR
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] ;
1649: LD_ADDR_EXP 55
1653: PUSH
1654: LD_INT 8
1656: PUSH
1657: LD_INT 11
1659: PUSH
1660: LD_INT 9
1662: PUSH
1663: LD_INT 10
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: ST_TO_ADDR
// end ;
1672: LD_VAR 0 1
1676: RET
// function prepare_map_coordinates ; var side , dep , br1 , br2 , br3 , un , i ; begin
1677: LD_INT 0
1679: PPUSH
1680: PPUSH
1681: PPUSH
1682: PPUSH
1683: PPUSH
1684: PPUSH
1685: PPUSH
1686: PPUSH
// depot_def = [ ] ;
1687: LD_ADDR_EXP 24
1691: PUSH
1692: EMPTY
1693: ST_TO_ADDR
// breastworks_def = [ ] ;
1694: LD_ADDR_EXP 25
1698: PUSH
1699: EMPTY
1700: ST_TO_ADDR
// for side := 1 to 4 do
1701: LD_ADDR_VAR 0 2
1705: PUSH
1706: DOUBLE
1707: LD_INT 1
1709: DEC
1710: ST_TO_ADDR
1711: LD_INT 4
1713: PUSH
1714: FOR_TO
1715: IFFALSE 2070
// begin dep := side * 4 - 3 ;
1717: LD_ADDR_VAR 0 3
1721: PUSH
1722: LD_VAR 0 2
1726: PUSH
1727: LD_INT 4
1729: MUL
1730: PUSH
1731: LD_INT 3
1733: MINUS
1734: ST_TO_ADDR
// br1 := side * 4 - 2 ;
1735: LD_ADDR_VAR 0 4
1739: PUSH
1740: LD_VAR 0 2
1744: PUSH
1745: LD_INT 4
1747: MUL
1748: PUSH
1749: LD_INT 2
1751: MINUS
1752: ST_TO_ADDR
// br2 := side * 4 - 1 ;
1753: LD_ADDR_VAR 0 5
1757: PUSH
1758: LD_VAR 0 2
1762: PUSH
1763: LD_INT 4
1765: MUL
1766: PUSH
1767: LD_INT 1
1769: MINUS
1770: ST_TO_ADDR
// br3 := side * 4 ;
1771: LD_ADDR_VAR 0 6
1775: PUSH
1776: LD_VAR 0 2
1780: PUSH
1781: LD_INT 4
1783: MUL
1784: ST_TO_ADDR
// depot_def := depot_def ^ [ [ GetX ( dep ) , GetY ( dep ) , GetDir ( dep ) ] ] ;
1785: LD_ADDR_EXP 24
1789: PUSH
1790: LD_EXP 24
1794: PUSH
1795: LD_VAR 0 3
1799: PPUSH
1800: CALL_OW 250
1804: PUSH
1805: LD_VAR 0 3
1809: PPUSH
1810: CALL_OW 251
1814: PUSH
1815: LD_VAR 0 3
1819: PPUSH
1820: CALL_OW 254
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: LIST
1829: PUSH
1830: EMPTY
1831: LIST
1832: ADD
1833: ST_TO_ADDR
// start_def := start_def ^ [ [ ShiftX ( GetX ( Dep ) , GetDir ( Dep ) , 6 ) , ShiftY ( GetY ( Dep ) , GetDir ( Dep ) , 6 ) ] ] ;
1834: LD_ADDR_EXP 26
1838: PUSH
1839: LD_EXP 26
1843: PUSH
1844: LD_VAR 0 3
1848: PPUSH
1849: CALL_OW 250
1853: PPUSH
1854: LD_VAR 0 3
1858: PPUSH
1859: CALL_OW 254
1863: PPUSH
1864: LD_INT 6
1866: PPUSH
1867: CALL_OW 272
1871: PUSH
1872: LD_VAR 0 3
1876: PPUSH
1877: CALL_OW 251
1881: PPUSH
1882: LD_VAR 0 3
1886: PPUSH
1887: CALL_OW 254
1891: PPUSH
1892: LD_INT 6
1894: PPUSH
1895: CALL_OW 273
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: PUSH
1904: EMPTY
1905: LIST
1906: ADD
1907: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ GetX ( br1 ) , GetY ( br1 ) , GetDir ( br1 ) ] , [ GetX ( br2 ) , GetY ( br2 ) , GetDir ( br2 ) ] , [ GetX ( br3 ) , GetY ( br3 ) , GetDir ( br3 ) ] ] ] ;
1908: LD_ADDR_EXP 25
1912: PUSH
1913: LD_EXP 25
1917: PUSH
1918: LD_VAR 0 4
1922: PPUSH
1923: CALL_OW 250
1927: PUSH
1928: LD_VAR 0 4
1932: PPUSH
1933: CALL_OW 251
1937: PUSH
1938: LD_VAR 0 4
1942: PPUSH
1943: CALL_OW 254
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: LD_VAR 0 5
1957: PPUSH
1958: CALL_OW 250
1962: PUSH
1963: LD_VAR 0 5
1967: PPUSH
1968: CALL_OW 251
1972: PUSH
1973: LD_VAR 0 5
1977: PPUSH
1978: CALL_OW 254
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: LIST
1987: PUSH
1988: LD_VAR 0 6
1992: PPUSH
1993: CALL_OW 250
1997: PUSH
1998: LD_VAR 0 6
2002: PPUSH
2003: CALL_OW 251
2007: PUSH
2008: LD_VAR 0 6
2012: PPUSH
2013: CALL_OW 254
2017: PUSH
2018: EMPTY
2019: LIST
2020: LIST
2021: LIST
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: LIST
2027: PUSH
2028: EMPTY
2029: LIST
2030: ADD
2031: ST_TO_ADDR
// DestroyUnit ( dep ) ;
2032: LD_VAR 0 3
2036: PPUSH
2037: CALL_OW 65
// DestroyUnit ( br1 ) ;
2041: LD_VAR 0 4
2045: PPUSH
2046: CALL_OW 65
// DestroyUnit ( br2 ) ;
2050: LD_VAR 0 5
2054: PPUSH
2055: CALL_OW 65
// DestroyUnit ( br3 ) ;
2059: LD_VAR 0 6
2063: PPUSH
2064: CALL_OW 65
// end ;
2068: GO 1714
2070: POP
2071: POP
// if not def_extra_oil_deposits then
2072: LD_EXP 43
2076: NOT
2077: IFFALSE 2159
// for i in [ [ 52 , 44 ] , [ 84 , 37 ] , [ 74 , 81 ] , [ 106 , 77 ] ] do
2079: LD_ADDR_VAR 0 8
2083: PUSH
2084: LD_INT 52
2086: PUSH
2087: LD_INT 44
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: PUSH
2094: LD_INT 84
2096: PUSH
2097: LD_INT 37
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 74
2106: PUSH
2107: LD_INT 81
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: PUSH
2114: LD_INT 106
2116: PUSH
2117: LD_INT 77
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: PUSH
2124: EMPTY
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: PUSH
2130: FOR_IN
2131: IFFALSE 2157
// begin RemoveDepositXY ( i [ 1 ] , i [ 2 ] ) ;
2133: LD_VAR 0 8
2137: PUSH
2138: LD_INT 1
2140: ARRAY
2141: PPUSH
2142: LD_VAR 0 8
2146: PUSH
2147: LD_INT 2
2149: ARRAY
2150: PPUSH
2151: CALL_OW 63
// end ;
2155: GO 2130
2157: POP
2158: POP
// end ;
2159: LD_VAR 0 1
2163: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2164: LD_INT 0
2166: PPUSH
2167: PPUSH
2168: PPUSH
// if not Team_Game then
2169: LD_EXP 22
2173: NOT
2174: IFFALSE 2272
// begin for i = 1 to 8 do
2176: LD_ADDR_VAR 0 2
2180: PUSH
2181: DOUBLE
2182: LD_INT 1
2184: DEC
2185: ST_TO_ADDR
2186: LD_INT 8
2188: PUSH
2189: FOR_TO
2190: IFFALSE 2268
// for j = 1 to 8 do
2192: LD_ADDR_VAR 0 3
2196: PUSH
2197: DOUBLE
2198: LD_INT 1
2200: DEC
2201: ST_TO_ADDR
2202: LD_INT 8
2204: PUSH
2205: FOR_TO
2206: IFFALSE 2264
// if i <> j then
2208: LD_VAR 0 2
2212: PUSH
2213: LD_VAR 0 3
2217: NONEQUAL
2218: IFFALSE 2242
// SetAttitude ( i , j , att_neutral , true ) else
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_VAR 0 3
2229: PPUSH
2230: LD_INT 0
2232: PPUSH
2233: LD_INT 1
2235: PPUSH
2236: CALL_OW 80
2240: GO 2262
// SetAttitude ( i , j , att_friend , true ) ;
2242: LD_VAR 0 2
2246: PPUSH
2247: LD_VAR 0 3
2251: PPUSH
2252: LD_INT 1
2254: PPUSH
2255: LD_INT 1
2257: PPUSH
2258: CALL_OW 80
2262: GO 2205
2264: POP
2265: POP
2266: GO 2189
2268: POP
2269: POP
// end else
2270: GO 2447
// begin if def_shared_vision then
2272: LD_EXP 45
2276: IFFALSE 2341
// begin for i in Teams do
2278: LD_ADDR_VAR 0 2
2282: PUSH
2283: LD_EXP 18
2287: PUSH
2288: FOR_IN
2289: IFFALSE 2339
// for j = 2 to i do
2291: LD_ADDR_VAR 0 3
2295: PUSH
2296: DOUBLE
2297: LD_INT 2
2299: DEC
2300: ST_TO_ADDR
2301: LD_VAR 0 2
2305: PUSH
2306: FOR_TO
2307: IFFALSE 2335
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2309: LD_VAR 0 2
2313: PUSH
2314: LD_VAR 0 3
2318: ARRAY
2319: PPUSH
2320: LD_VAR 0 2
2324: PUSH
2325: LD_INT 1
2327: ARRAY
2328: PPUSH
2329: CALL_OW 343
2333: GO 2306
2335: POP
2336: POP
2337: GO 2288
2339: POP
2340: POP
// end ; for i = 1 to 8 do
2341: LD_ADDR_VAR 0 2
2345: PUSH
2346: DOUBLE
2347: LD_INT 1
2349: DEC
2350: ST_TO_ADDR
2351: LD_INT 8
2353: PUSH
2354: FOR_TO
2355: IFFALSE 2445
// for j = 1 to 8 do
2357: LD_ADDR_VAR 0 3
2361: PUSH
2362: DOUBLE
2363: LD_INT 1
2365: DEC
2366: ST_TO_ADDR
2367: LD_INT 8
2369: PUSH
2370: FOR_TO
2371: IFFALSE 2441
// if Side_Teams [ i ] = Side_Teams [ j ] then
2373: LD_EXP 17
2377: PUSH
2378: LD_VAR 0 2
2382: ARRAY
2383: PUSH
2384: LD_EXP 17
2388: PUSH
2389: LD_VAR 0 3
2393: ARRAY
2394: EQUAL
2395: IFFALSE 2419
// SetAttitude ( i , j , att_friend , true ) else
2397: LD_VAR 0 2
2401: PPUSH
2402: LD_VAR 0 3
2406: PPUSH
2407: LD_INT 1
2409: PPUSH
2410: LD_INT 1
2412: PPUSH
2413: CALL_OW 80
2417: GO 2439
// SetAttitude ( i , j , att_enemy , true ) ;
2419: LD_VAR 0 2
2423: PPUSH
2424: LD_VAR 0 3
2428: PPUSH
2429: LD_INT 2
2431: PPUSH
2432: LD_INT 1
2434: PPUSH
2435: CALL_OW 80
2439: GO 2370
2441: POP
2442: POP
2443: GO 2354
2445: POP
2446: POP
// end ; end ;
2447: LD_VAR 0 1
2451: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2452: LD_INT 0
2454: PPUSH
2455: PPUSH
2456: PPUSH
2457: PPUSH
// result := [ ] ;
2458: LD_ADDR_VAR 0 7
2462: PUSH
2463: EMPTY
2464: ST_TO_ADDR
// for i := 1 to count do
2465: LD_ADDR_VAR 0 8
2469: PUSH
2470: DOUBLE
2471: LD_INT 1
2473: DEC
2474: ST_TO_ADDR
2475: LD_VAR 0 1
2479: PUSH
2480: FOR_TO
2481: IFFALSE 2899
// begin uc_direction := Rand ( 0 , 5 ) ;
2483: LD_ADDR_OWVAR 24
2487: PUSH
2488: LD_INT 0
2490: PPUSH
2491: LD_INT 5
2493: PPUSH
2494: CALL_OW 12
2498: ST_TO_ADDR
// if commander then
2499: LD_LOC 1
2503: IFFALSE 2612
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2505: LD_ADDR_OWVAR 26
2509: PUSH
2510: LD_OWVAR 19
2514: PUSH
2515: LD_OWVAR 20
2519: ARRAY
2520: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2521: LD_INT 1
2523: PPUSH
2524: LD_INT 2
2526: PPUSH
2527: CALL_OW 12
2531: PPUSH
2532: LD_VAR 0 2
2536: PPUSH
2537: LD_EXP 5
2541: PUSH
2542: LD_INT 2
2544: PLUS
2545: PPUSH
2546: CALL_OW 380
// hc_importance := 105 ;
2550: LD_ADDR_OWVAR 32
2554: PUSH
2555: LD_INT 105
2557: ST_TO_ADDR
// commander := false ;
2558: LD_ADDR_LOC 1
2562: PUSH
2563: LD_INT 0
2565: ST_TO_ADDR
// if Multiplayer then
2566: LD_OWVAR 4
2570: IFFALSE 2610
// begin hc_gallery := MULTIAVATARS ;
2572: LD_ADDR_OWVAR 33
2576: PUSH
2577: LD_STRING MULTIAVATARS
2579: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2580: LD_ADDR_OWVAR 34
2584: PUSH
2585: LD_OWVAR 20
2589: PPUSH
2590: CALL_OW 525
2594: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2595: LD_ADDR_OWVAR 27
2599: PUSH
2600: LD_OWVAR 20
2604: PPUSH
2605: CALL_OW 526
2609: ST_TO_ADDR
// end ; end else
2610: GO 2675
// begin hc_name :=  ;
2612: LD_ADDR_OWVAR 26
2616: PUSH
2617: LD_STRING 
2619: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2620: LD_INT 1
2622: PPUSH
2623: LD_INT 2
2625: PPUSH
2626: CALL_OW 12
2630: PPUSH
2631: LD_VAR 0 2
2635: PPUSH
2636: LD_EXP 5
2640: PPUSH
2641: CALL_OW 380
// hc_importance := 0 ;
2645: LD_ADDR_OWVAR 32
2649: PUSH
2650: LD_INT 0
2652: ST_TO_ADDR
// if Multiplayer then
2653: LD_OWVAR 4
2657: IFFALSE 2675
// begin hc_gallery :=  ;
2659: LD_ADDR_OWVAR 33
2663: PUSH
2664: LD_STRING 
2666: ST_TO_ADDR
// hc_face_number := 0 ;
2667: LD_ADDR_OWVAR 34
2671: PUSH
2672: LD_INT 0
2674: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2675: LD_ADDR_VAR 0 10
2679: PUSH
2680: CALL_OW 44
2684: ST_TO_ADDR
// if global_defined then
2685: LD_LOC 3
2689: IFFALSE 2829
// begin if ( cl = class_soldier ) then
2691: LD_VAR 0 2
2695: PUSH
2696: LD_INT 1
2698: EQUAL
2699: IFFALSE 2719
// j := i + soldiers_created else
2701: LD_ADDR_VAR 0 9
2705: PUSH
2706: LD_VAR 0 8
2710: PUSH
2711: LD_LOC 4
2715: PLUS
2716: ST_TO_ADDR
2717: GO 2729
// j := i ;
2719: LD_ADDR_VAR 0 9
2723: PUSH
2724: LD_VAR 0 8
2728: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2729: LD_LOC 2
2733: PUSH
2734: LD_VAR 0 2
2738: ARRAY
2739: PUSH
2740: LD_VAR 0 9
2744: ARRAY
2745: PPUSH
2746: LD_VAR 0 10
2750: PPUSH
2751: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2755: LD_VAR 0 10
2759: PPUSH
2760: LD_INT 2
2762: PPUSH
2763: LD_LOC 2
2767: PUSH
2768: LD_VAR 0 2
2772: ARRAY
2773: PUSH
2774: LD_VAR 0 9
2778: ARRAY
2779: PPUSH
2780: LD_INT 2
2782: PPUSH
2783: CALL_OW 260
2787: PPUSH
2788: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2792: LD_VAR 0 10
2796: PPUSH
2797: LD_INT 1
2799: PPUSH
2800: LD_LOC 2
2804: PUSH
2805: LD_VAR 0 2
2809: ARRAY
2810: PUSH
2811: LD_VAR 0 9
2815: ARRAY
2816: PPUSH
2817: LD_INT 1
2819: PPUSH
2820: CALL_OW 260
2824: PPUSH
2825: CALL_OW 239
// end ; if building then
2829: LD_VAR 0 6
2833: IFFALSE 2851
// PlaceHumanInUnit ( un , building ) else
2835: LD_VAR 0 10
2839: PPUSH
2840: LD_VAR 0 6
2844: PPUSH
2845: CALL_OW 52
2849: GO 2878
// PlaceUnitXYR ( un , x , y , r , false ) ;
2851: LD_VAR 0 10
2855: PPUSH
2856: LD_VAR 0 3
2860: PPUSH
2861: LD_VAR 0 4
2865: PPUSH
2866: LD_VAR 0 5
2870: PPUSH
2871: LD_INT 0
2873: PPUSH
2874: CALL_OW 50
// result := result ^ [ un ] ;
2878: LD_ADDR_VAR 0 7
2882: PUSH
2883: LD_VAR 0 7
2887: PUSH
2888: LD_VAR 0 10
2892: PUSH
2893: EMPTY
2894: LIST
2895: ADD
2896: ST_TO_ADDR
// end ;
2897: GO 2480
2899: POP
2900: POP
// if not global_defined then
2901: LD_LOC 3
2905: NOT
2906: IFFALSE 2984
// if ( global_units >= cl ) then
2908: LD_LOC 2
2912: PUSH
2913: LD_VAR 0 2
2917: GREATEREQUAL
2918: IFFALSE 2959
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2920: LD_ADDR_LOC 2
2924: PUSH
2925: LD_LOC 2
2929: PPUSH
2930: LD_VAR 0 2
2934: PPUSH
2935: LD_LOC 2
2939: PUSH
2940: LD_VAR 0 2
2944: ARRAY
2945: PUSH
2946: LD_VAR 0 7
2950: ADD
2951: PPUSH
2952: CALL_OW 1
2956: ST_TO_ADDR
2957: GO 2984
// global_units := Replace ( global_units , cl , result ) ;
2959: LD_ADDR_LOC 2
2963: PUSH
2964: LD_LOC 2
2968: PPUSH
2969: LD_VAR 0 2
2973: PPUSH
2974: LD_VAR 0 7
2978: PPUSH
2979: CALL_OW 1
2983: ST_TO_ADDR
// if commander then
2984: LD_LOC 1
2988: IFFALSE 3035
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2990: LD_ADDR_EXP 28
2994: PUSH
2995: LD_EXP 28
2999: PPUSH
3000: LD_OWVAR 20
3004: PPUSH
3005: LD_EXP 28
3009: PUSH
3010: LD_OWVAR 20
3014: ARRAY
3015: PUSH
3016: LD_VAR 0 10
3020: ADD
3021: PPUSH
3022: CALL_OW 1
3026: ST_TO_ADDR
// commander := false ;
3027: LD_ADDR_LOC 1
3031: PUSH
3032: LD_INT 0
3034: ST_TO_ADDR
// end ; end ;
3035: LD_VAR 0 7
3039: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3040: LD_INT 0
3042: PPUSH
3043: PPUSH
3044: PPUSH
3045: PPUSH
3046: PPUSH
3047: PPUSH
3048: PPUSH
3049: PPUSH
3050: PPUSH
// if side in [ 0 , 9 ] then
3051: LD_VAR 0 1
3055: PUSH
3056: LD_INT 0
3058: PUSH
3059: LD_INT 9
3061: PUSH
3062: EMPTY
3063: LIST
3064: LIST
3065: IN
3066: IFFALSE 3070
// exit ;
3068: GO 4120
// pos := Side_Positions [ side ] ;
3070: LD_ADDR_VAR 0 3
3074: PUSH
3075: LD_EXP 20
3079: PUSH
3080: LD_VAR 0 1
3084: ARRAY
3085: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3086: LD_ADDR_OWVAR 21
3090: PUSH
3091: LD_EXP 21
3095: PUSH
3096: LD_VAR 0 1
3100: ARRAY
3101: ST_TO_ADDR
// uc_side := side ;
3102: LD_ADDR_OWVAR 20
3106: PUSH
3107: LD_VAR 0 1
3111: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3112: LD_ADDR_VAR 0 4
3116: PUSH
3117: LD_EXP 24
3121: PUSH
3122: LD_VAR 0 3
3126: ARRAY
3127: PUSH
3128: LD_INT 1
3130: ARRAY
3131: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3132: LD_ADDR_VAR 0 5
3136: PUSH
3137: LD_EXP 24
3141: PUSH
3142: LD_VAR 0 3
3146: ARRAY
3147: PUSH
3148: LD_INT 2
3150: ARRAY
3151: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3152: LD_ADDR_VAR 0 6
3156: PUSH
3157: LD_EXP 24
3161: PUSH
3162: LD_VAR 0 3
3166: ARRAY
3167: PUSH
3168: LD_INT 3
3170: ARRAY
3171: ST_TO_ADDR
// if is_depot then
3172: LD_EXP 2
3176: IFFALSE 3309
// begin bc_type = b_depot ;
3178: LD_ADDR_OWVAR 42
3182: PUSH
3183: LD_INT 0
3185: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3186: LD_ADDR_VAR 0 10
3190: PUSH
3191: LD_VAR 0 4
3195: PPUSH
3196: LD_VAR 0 5
3200: PPUSH
3201: LD_VAR 0 6
3205: PPUSH
3206: CALL_OW 47
3210: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3211: LD_VAR 0 10
3215: PPUSH
3216: LD_STRING @
3218: PUSH
3219: LD_VAR 0 1
3223: STR
3224: PPUSH
3225: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3229: LD_VAR 0 10
3233: PPUSH
3234: CALL_OW 274
3238: PPUSH
3239: LD_INT 1
3241: PPUSH
3242: LD_EXP 7
3246: PUSH
3247: LD_INT 1
3249: ARRAY
3250: PPUSH
3251: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3255: LD_VAR 0 10
3259: PPUSH
3260: CALL_OW 274
3264: PPUSH
3265: LD_INT 2
3267: PPUSH
3268: LD_EXP 7
3272: PUSH
3273: LD_INT 2
3275: ARRAY
3276: PPUSH
3277: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3281: LD_VAR 0 10
3285: PPUSH
3286: CALL_OW 274
3290: PPUSH
3291: LD_INT 3
3293: PPUSH
3294: LD_EXP 7
3298: PUSH
3299: LD_INT 3
3301: ARRAY
3302: PPUSH
3303: CALL_OW 277
// end else
3307: GO 3453
// begin for i := 1 to 3 do
3309: LD_ADDR_VAR 0 7
3313: PUSH
3314: DOUBLE
3315: LD_INT 1
3317: DEC
3318: ST_TO_ADDR
3319: LD_INT 3
3321: PUSH
3322: FOR_TO
3323: IFFALSE 3451
// begin r := starting_resources [ i ] ;
3325: LD_ADDR_VAR 0 8
3329: PUSH
3330: LD_EXP 7
3334: PUSH
3335: LD_VAR 0 7
3339: ARRAY
3340: ST_TO_ADDR
// while r >= 10 do
3341: LD_VAR 0 8
3345: PUSH
3346: LD_INT 10
3348: GREATEREQUAL
3349: IFFALSE 3449
// if r > 50 then
3351: LD_VAR 0 8
3355: PUSH
3356: LD_INT 50
3358: GREATER
3359: IFFALSE 3405
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3361: LD_VAR 0 7
3365: PPUSH
3366: LD_INT 5
3368: PPUSH
3369: LD_VAR 0 4
3373: PPUSH
3374: LD_VAR 0 5
3378: PPUSH
3379: LD_INT 4
3381: PPUSH
3382: LD_INT 0
3384: PPUSH
3385: CALL_OW 60
// r := r - 50 ;
3389: LD_ADDR_VAR 0 8
3393: PUSH
3394: LD_VAR 0 8
3398: PUSH
3399: LD_INT 50
3401: MINUS
3402: ST_TO_ADDR
// end else
3403: GO 3447
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3405: LD_VAR 0 7
3409: PPUSH
3410: LD_VAR 0 8
3414: PUSH
3415: LD_INT 10
3417: DIV
3418: PPUSH
3419: LD_VAR 0 4
3423: PPUSH
3424: LD_VAR 0 5
3428: PPUSH
3429: LD_INT 4
3431: PPUSH
3432: LD_INT 0
3434: PPUSH
3435: CALL_OW 60
// r := 0 ;
3439: LD_ADDR_VAR 0 8
3443: PUSH
3444: LD_INT 0
3446: ST_TO_ADDR
// end ;
3447: GO 3341
// end ;
3449: GO 3322
3451: POP
3452: POP
// end ; for r in starting_crates do
3453: LD_ADDR_VAR 0 8
3457: PUSH
3458: LD_EXP 6
3462: PUSH
3463: FOR_IN
3464: IFFALSE 3496
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3466: LD_INT 1
3468: PPUSH
3469: LD_INT 5
3471: PPUSH
3472: LD_VAR 0 4
3476: PPUSH
3477: LD_VAR 0 5
3481: PPUSH
3482: LD_VAR 0 8
3486: PPUSH
3487: LD_INT 0
3489: PPUSH
3490: CALL_OW 60
3494: GO 3463
3496: POP
3497: POP
// if def_morale_flags then
3498: LD_EXP 46
3502: IFFALSE 3641
// begin x := start_def [ pos ] [ 1 ] ;
3504: LD_ADDR_VAR 0 4
3508: PUSH
3509: LD_EXP 26
3513: PUSH
3514: LD_VAR 0 3
3518: ARRAY
3519: PUSH
3520: LD_INT 1
3522: ARRAY
3523: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3524: LD_ADDR_VAR 0 5
3528: PUSH
3529: LD_EXP 26
3533: PUSH
3534: LD_VAR 0 3
3538: ARRAY
3539: PUSH
3540: LD_INT 2
3542: ARRAY
3543: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3544: LD_VAR 0 4
3548: PPUSH
3549: LD_VAR 0 5
3553: PPUSH
3554: LD_INT 12
3556: PPUSH
3557: LD_INT 2
3559: PPUSH
3560: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3564: LD_ADDR_EXP 27
3568: PUSH
3569: LD_EXP 27
3573: PUSH
3574: LD_VAR 0 1
3578: PPUSH
3579: LD_VAR 0 4
3583: PPUSH
3584: LD_VAR 0 5
3588: PPUSH
3589: LD_INT 1
3591: PUSH
3592: LD_INT 100
3594: PUSH
3595: EMPTY
3596: LIST
3597: LIST
3598: PUSH
3599: LD_INT 2
3601: PUSH
3602: LD_INT 50
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: PUSH
3609: LD_INT 3
3611: PUSH
3612: LD_INT 20
3614: PUSH
3615: EMPTY
3616: LIST
3617: LIST
3618: PUSH
3619: LD_INT 20
3621: PUSH
3622: LD_INT 100
3624: PUSH
3625: EMPTY
3626: LIST
3627: LIST
3628: PUSH
3629: EMPTY
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: PPUSH
3635: CALL_OW 418
3639: ADD
3640: ST_TO_ADDR
// end ; commander := true ;
3641: LD_ADDR_LOC 1
3645: PUSH
3646: LD_INT 1
3648: ST_TO_ADDR
// soldiers_created := 0 ;
3649: LD_ADDR_LOC 4
3653: PUSH
3654: LD_INT 0
3656: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3657: LD_ADDR_VAR 0 7
3661: PUSH
3662: DOUBLE
3663: LD_INT 1
3665: DEC
3666: ST_TO_ADDR
3667: LD_EXP 3
3671: PUSH
3672: FOR_TO
3673: IFFALSE 3826
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3675: LD_ADDR_VAR 0 4
3679: PUSH
3680: LD_EXP 25
3684: PUSH
3685: LD_VAR 0 3
3689: ARRAY
3690: PUSH
3691: LD_VAR 0 7
3695: ARRAY
3696: PUSH
3697: LD_INT 1
3699: ARRAY
3700: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3701: LD_ADDR_VAR 0 5
3705: PUSH
3706: LD_EXP 25
3710: PUSH
3711: LD_VAR 0 3
3715: ARRAY
3716: PUSH
3717: LD_VAR 0 7
3721: ARRAY
3722: PUSH
3723: LD_INT 2
3725: ARRAY
3726: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3727: LD_ADDR_VAR 0 6
3731: PUSH
3732: LD_EXP 25
3736: PUSH
3737: LD_VAR 0 3
3741: ARRAY
3742: PUSH
3743: LD_VAR 0 7
3747: ARRAY
3748: PUSH
3749: LD_INT 3
3751: ARRAY
3752: ST_TO_ADDR
// bc_type := b_breastwork ;
3753: LD_ADDR_OWVAR 42
3757: PUSH
3758: LD_INT 31
3760: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3761: LD_ADDR_VAR 0 9
3765: PUSH
3766: LD_VAR 0 4
3770: PPUSH
3771: LD_VAR 0 5
3775: PPUSH
3776: LD_VAR 0 6
3780: PPUSH
3781: CALL_OW 47
3785: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3786: LD_INT 1
3788: PPUSH
3789: LD_INT 1
3791: PPUSH
3792: LD_INT 0
3794: PPUSH
3795: LD_INT 0
3797: PPUSH
3798: LD_INT 0
3800: PPUSH
3801: LD_VAR 0 9
3805: PPUSH
3806: CALL 2452 0 6
// soldiers_created := soldiers_created + 1 ;
3810: LD_ADDR_LOC 4
3814: PUSH
3815: LD_LOC 4
3819: PUSH
3820: LD_INT 1
3822: PLUS
3823: ST_TO_ADDR
// end ;
3824: GO 3672
3826: POP
3827: POP
// x := start_def [ pos ] [ 1 ] ;
3828: LD_ADDR_VAR 0 4
3832: PUSH
3833: LD_EXP 26
3837: PUSH
3838: LD_VAR 0 3
3842: ARRAY
3843: PUSH
3844: LD_INT 1
3846: ARRAY
3847: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3848: LD_ADDR_VAR 0 5
3852: PUSH
3853: LD_EXP 26
3857: PUSH
3858: LD_VAR 0 3
3862: ARRAY
3863: PUSH
3864: LD_INT 2
3866: ARRAY
3867: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3868: LD_LOC 8
3872: PUSH
3873: LD_EXP 3
3877: MINUS
3878: PPUSH
3879: LD_INT 1
3881: PPUSH
3882: LD_VAR 0 4
3886: PPUSH
3887: LD_VAR 0 5
3891: PPUSH
3892: LD_INT 5
3894: PPUSH
3895: LD_INT 0
3897: PPUSH
3898: CALL 2452 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3902: LD_LOC 5
3906: PPUSH
3907: LD_INT 2
3909: PPUSH
3910: LD_VAR 0 4
3914: PPUSH
3915: LD_VAR 0 5
3919: PPUSH
3920: LD_INT 5
3922: PPUSH
3923: LD_INT 0
3925: PPUSH
3926: CALL 2452 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3930: LD_LOC 7
3934: PPUSH
3935: LD_INT 3
3937: PPUSH
3938: LD_VAR 0 4
3942: PPUSH
3943: LD_VAR 0 5
3947: PPUSH
3948: LD_INT 5
3950: PPUSH
3951: LD_INT 0
3953: PPUSH
3954: CALL 2452 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3958: LD_LOC 6
3962: PPUSH
3963: LD_INT 4
3965: PPUSH
3966: LD_VAR 0 4
3970: PPUSH
3971: LD_VAR 0 5
3975: PPUSH
3976: LD_INT 5
3978: PPUSH
3979: LD_INT 0
3981: PPUSH
3982: CALL 2452 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3986: LD_EXP 47
3990: PUSH
3991: LD_INT 20
3993: PPUSH
3994: LD_VAR 0 1
3998: PPUSH
3999: CALL_OW 321
4003: PUSH
4004: LD_INT 1
4006: EQUAL
4007: AND
4008: IFFALSE 4025
// SetTech ( tech_SibDet , side , state_researched ) ;
4010: LD_INT 20
4012: PPUSH
4013: LD_VAR 0 1
4017: PPUSH
4018: LD_INT 2
4020: PPUSH
4021: CALL_OW 322
// if def_siberite_bomb = 1 then
4025: LD_EXP 50
4029: PUSH
4030: LD_INT 1
4032: EQUAL
4033: IFFALSE 4067
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4035: LD_INT 25
4037: PPUSH
4038: LD_VAR 0 1
4042: PPUSH
4043: LD_INT 1
4045: PPUSH
4046: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4050: LD_INT 73
4052: PPUSH
4053: LD_VAR 0 1
4057: PPUSH
4058: LD_INT 1
4060: PPUSH
4061: CALL_OW 322
// end else
4065: GO 4097
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4067: LD_INT 25
4069: PPUSH
4070: LD_VAR 0 1
4074: PPUSH
4075: LD_INT 0
4077: PPUSH
4078: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4082: LD_INT 73
4084: PPUSH
4085: LD_VAR 0 1
4089: PPUSH
4090: LD_INT 0
4092: PPUSH
4093: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4097: LD_INT 24
4099: PPUSH
4100: LD_VAR 0 1
4104: PPUSH
4105: LD_INT 0
4107: PPUSH
4108: CALL_OW 322
// global_defined := true ;
4112: LD_ADDR_LOC 3
4116: PUSH
4117: LD_INT 1
4119: ST_TO_ADDR
// end ;
4120: LD_VAR 0 2
4124: RET
// every 0 0$1 do
4125: GO 4127
4127: DISABLE
// if ( def_siberite_bomb > 1 ) then
4128: LD_EXP 50
4132: PUSH
4133: LD_INT 1
4135: GREATER
4136: IFFALSE 4151
// begin wait ( siberite_bomb_Delay ) ;
4138: LD_EXP 12
4142: PPUSH
4143: CALL_OW 67
// EnableSibFiss ;
4147: CALL 4152 0 0
// end ;
4151: END
// function EnableSibFiss ; var i ; begin
4152: LD_INT 0
4154: PPUSH
4155: PPUSH
// for i := 1 to 8 do
4156: LD_ADDR_VAR 0 2
4160: PUSH
4161: DOUBLE
4162: LD_INT 1
4164: DEC
4165: ST_TO_ADDR
4166: LD_INT 8
4168: PUSH
4169: FOR_TO
4170: IFFALSE 4216
// if Side_Positions [ i ] then
4172: LD_EXP 20
4176: PUSH
4177: LD_VAR 0 2
4181: ARRAY
4182: IFFALSE 4214
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4184: LD_INT 25
4186: PPUSH
4187: LD_VAR 0 2
4191: PPUSH
4192: LD_INT 1
4194: PPUSH
4195: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4199: LD_INT 73
4201: PPUSH
4202: LD_VAR 0 2
4206: PPUSH
4207: LD_INT 1
4209: PPUSH
4210: CALL_OW 322
// end ;
4214: GO 4169
4216: POP
4217: POP
// end ;
4218: LD_VAR 0 1
4222: RET
// function prepare_sides ; var i ; begin
4223: LD_INT 0
4225: PPUSH
4226: PPUSH
// global_units := [ ] ;
4227: LD_ADDR_LOC 2
4231: PUSH
4232: EMPTY
4233: ST_TO_ADDR
// global_defined := false ;
4234: LD_ADDR_LOC 3
4238: PUSH
4239: LD_INT 0
4241: ST_TO_ADDR
// CountClassMembers ;
4242: CALL 4292 0 0
// for i := 1 to 8 do
4246: LD_ADDR_VAR 0 2
4250: PUSH
4251: DOUBLE
4252: LD_INT 1
4254: DEC
4255: ST_TO_ADDR
4256: LD_INT 8
4258: PUSH
4259: FOR_TO
4260: IFFALSE 4285
// if Side_Positions [ i ] then
4262: LD_EXP 20
4266: PUSH
4267: LD_VAR 0 2
4271: ARRAY
4272: IFFALSE 4283
// prepare_side ( i ) ;
4274: LD_VAR 0 2
4278: PPUSH
4279: CALL 3040 0 1
4283: GO 4259
4285: POP
4286: POP
// end ;
4287: LD_VAR 0 1
4291: RET
// function CountClassMembers ; var Mode ; begin
4292: LD_INT 0
4294: PPUSH
4295: PPUSH
// if No_Mechs then
4296: LD_EXP 52
4300: IFFALSE 4312
// Mode := 2 else
4302: LD_ADDR_VAR 0 2
4306: PUSH
4307: LD_INT 2
4309: ST_TO_ADDR
4310: GO 4320
// Mode := 1 ;
4312: LD_ADDR_VAR 0 2
4316: PUSH
4317: LD_INT 1
4319: ST_TO_ADDR
// neng := number_of_people ;
4320: LD_ADDR_LOC 5
4324: PUSH
4325: LD_EXP 4
4329: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4330: LD_ADDR_LOC 8
4334: PUSH
4335: LD_LOC 5
4339: PUSH
4340: LD_INT 4
4342: PUSH
4343: LD_INT 3
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: PUSH
4350: LD_VAR 0 2
4354: ARRAY
4355: DIV
4356: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4357: LD_LOC 8
4361: PUSH
4362: LD_EXP 3
4366: LESS
4367: IFFALSE 4379
// nsol := number_of_breastworks ;
4369: LD_ADDR_LOC 8
4373: PUSH
4374: LD_EXP 3
4378: ST_TO_ADDR
// neng := neng - nsol ;
4379: LD_ADDR_LOC 5
4383: PUSH
4384: LD_LOC 5
4388: PUSH
4389: LD_LOC 8
4393: MINUS
4394: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4395: LD_ADDR_LOC 6
4399: PUSH
4400: LD_LOC 5
4404: PUSH
4405: LD_INT 3
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_VAR 0 2
4419: ARRAY
4420: DIV
4421: ST_TO_ADDR
// if ( nsci < 1 ) then
4422: LD_LOC 6
4426: PUSH
4427: LD_INT 1
4429: LESS
4430: IFFALSE 4440
// nsci := 1 ;
4432: LD_ADDR_LOC 6
4436: PUSH
4437: LD_INT 1
4439: ST_TO_ADDR
// neng := neng - nsci ;
4440: LD_ADDR_LOC 5
4444: PUSH
4445: LD_LOC 5
4449: PUSH
4450: LD_LOC 6
4454: MINUS
4455: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4456: LD_ADDR_LOC 7
4460: PUSH
4461: LD_LOC 5
4465: PUSH
4466: LD_INT 2
4468: DIV
4469: PUSH
4470: LD_INT 0
4472: PUSH
4473: EMPTY
4474: LIST
4475: LIST
4476: PUSH
4477: LD_VAR 0 2
4481: ARRAY
4482: ST_TO_ADDR
// neng := neng - nmech ;
4483: LD_ADDR_LOC 5
4487: PUSH
4488: LD_LOC 5
4492: PUSH
4493: LD_LOC 7
4497: MINUS
4498: ST_TO_ADDR
// if ( neng < 1 ) then
4499: LD_LOC 5
4503: PUSH
4504: LD_INT 1
4506: LESS
4507: IFFALSE 4517
// neng := 1 ;
4509: LD_ADDR_LOC 5
4513: PUSH
4514: LD_INT 1
4516: ST_TO_ADDR
// end ;
4517: LD_VAR 0 1
4521: RET
// starting begin disable ( 98 ) ;
4522: LD_INT 98
4524: DISABLE_MARKED
// disable ( 99 ) ;
4525: LD_INT 99
4527: DISABLE_MARKED
// disable ( 400 ) ;
4528: LD_INT 400
4530: DISABLE_MARKED
// disable ( 401 ) ;
4531: LD_INT 401
4533: DISABLE_MARKED
// disable ( 600 ) ;
4534: LD_INT 600
4536: DISABLE_MARKED
// mp_selectmsg := true ;
4537: LD_ADDR_OWVAR 13
4541: PUSH
4542: LD_INT 1
4544: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4545: CALL 68 0 0
// prepare_map_coordinates ;
4549: CALL 1677 0 0
// set_shared_visions_and_alliances ;
4553: CALL 2164 0 0
// ResetFog ;
4557: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4561: LD_OWVAR 2
4565: PPUSH
4566: CALL_OW 520
// prepare_sides ;
4570: CALL 4223 0 0
// Init_Win_Condition ;
4574: CALL 16337 0 0
// InitLimits ;
4578: CALL 10157 0 0
// ShowTimer ;
4582: CALL 11094 0 0
// init_shipments_and_respawning ;
4586: CALL 5711 0 0
// music_nat := Side_Nations [ your_side ] ;
4590: LD_ADDR_OWVAR 71
4594: PUSH
4595: LD_EXP 21
4599: PUSH
4600: LD_OWVAR 2
4604: ARRAY
4605: ST_TO_ADDR
// if IAmSpec then
4606: CALL_OW 531
4610: IFFALSE 4634
// begin fogoff ( true ) ;
4612: LD_INT 1
4614: PPUSH
4615: CALL_OW 344
// CenterNowOnXY ( 79 , 59 ) ;
4619: LD_INT 79
4621: PPUSH
4622: LD_INT 59
4624: PPUSH
4625: CALL_OW 86
// enable ( 400 ) ;
4629: LD_INT 400
4631: ENABLE_MARKED
// end else
4632: GO 4680
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4634: LD_EXP 26
4638: PUSH
4639: LD_EXP 20
4643: PUSH
4644: LD_OWVAR 2
4648: ARRAY
4649: ARRAY
4650: PUSH
4651: LD_INT 1
4653: ARRAY
4654: PPUSH
4655: LD_EXP 26
4659: PUSH
4660: LD_EXP 20
4664: PUSH
4665: LD_OWVAR 2
4669: ARRAY
4670: ARRAY
4671: PUSH
4672: LD_INT 2
4674: ARRAY
4675: PPUSH
4676: CALL_OW 86
// end ; InitApeman ;
4680: CALL 4886 0 0
// if def_builduptime then
4684: LD_EXP 51
4688: IFFALSE 4694
// BeginBuildUp ;
4690: CALL 11542 0 0
// end ; end_of_file
4694: END
// every 20 20$00 trigger apemanNumber do
4695: LD_EXP 29
4699: IFFALSE 4732
4701: GO 4703
4703: DISABLE
// begin enable ;
4704: ENABLE
// if apeLevel >= 8 then
4705: LD_EXP 34
4709: PUSH
4710: LD_INT 8
4712: GREATEREQUAL
4713: IFFALSE 4718
// disable else
4715: DISABLE
4716: GO 4732
// apeLevel := apeLevel + 1 ;
4718: LD_ADDR_EXP 34
4722: PUSH
4723: LD_EXP 34
4727: PUSH
4728: LD_INT 1
4730: PLUS
4731: ST_TO_ADDR
// end ;
4732: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
4733: LD_EXP 29
4737: PUSH
4738: LD_EXP 30
4742: LESS
4743: IFFALSE 4883
4745: GO 4747
4747: DISABLE
4748: LD_INT 0
4750: PPUSH
4751: PPUSH
4752: PPUSH
4753: PPUSH
// begin enable ;
4754: ENABLE
// for i := 1 to apemanPos do
4755: LD_ADDR_VAR 0 1
4759: PUSH
4760: DOUBLE
4761: LD_INT 1
4763: DEC
4764: ST_TO_ADDR
4765: LD_EXP 32
4769: PUSH
4770: FOR_TO
4771: IFFALSE 4881
// begin if apemanPlayerCount [ i ] then
4773: LD_EXP 33
4777: PUSH
4778: LD_VAR 0 1
4782: ARRAY
4783: IFFALSE 4879
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
4785: LD_EXP 33
4789: PUSH
4790: LD_VAR 0 1
4794: ARRAY
4795: PUSH
4796: LD_EXP 32
4800: PUSH
4801: LD_VAR 0 1
4805: ARRAY
4806: GREATER
4807: IFFALSE 4879
// begin ape := PrepareApeman ;
4809: LD_ADDR_VAR 0 2
4813: PUSH
4814: CALL 5386 0 0
4818: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
4819: LD_VAR 0 2
4823: PPUSH
4824: LD_EXP 35
4828: PUSH
4829: LD_VAR 0 1
4833: ARRAY
4834: PPUSH
4835: LD_INT 0
4837: PPUSH
4838: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
4842: LD_ADDR_EXP 32
4846: PUSH
4847: LD_EXP 32
4851: PPUSH
4852: LD_VAR 0 1
4856: PPUSH
4857: LD_EXP 32
4861: PUSH
4862: LD_VAR 0 1
4866: ARRAY
4867: PUSH
4868: LD_VAR 0 2
4872: UNION
4873: PPUSH
4874: CALL_OW 1
4878: ST_TO_ADDR
// end ; end ; end ;
4879: GO 4770
4881: POP
4882: POP
// end ;
4883: PPOPN 4
4885: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
4886: LD_INT 0
4888: PPUSH
4889: PPUSH
4890: PPUSH
4891: PPUSH
4892: PPUSH
4893: PPUSH
4894: PPUSH
// playersAmount := 0 ;
4895: LD_ADDR_VAR 0 3
4899: PUSH
4900: LD_INT 0
4902: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , ] ;
4903: LD_ADDR_VAR 0 7
4907: PUSH
4908: LD_INT 13
4910: PUSH
4911: LD_INT 14
4913: PUSH
4914: LD_INT 15
4916: PUSH
4917: LD_INT 16
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4926: LD_ADDR_EXP 35
4930: PUSH
4931: LD_INT 0
4933: PUSH
4934: LD_INT 0
4936: PUSH
4937: LD_INT 0
4939: PUSH
4940: LD_INT 0
4942: PUSH
4943: LD_INT 0
4945: PUSH
4946: LD_INT 0
4948: PUSH
4949: LD_INT 0
4951: PUSH
4952: LD_INT 0
4954: PUSH
4955: EMPTY
4956: LIST
4957: LIST
4958: LIST
4959: LIST
4960: LIST
4961: LIST
4962: LIST
4963: LIST
4964: ST_TO_ADDR
// for j = 1 to Side_Positions do
4965: LD_ADDR_VAR 0 4
4969: PUSH
4970: DOUBLE
4971: LD_INT 1
4973: DEC
4974: ST_TO_ADDR
4975: LD_EXP 20
4979: PUSH
4980: FOR_TO
4981: IFFALSE 5048
// if Side_Positions [ j ] then
4983: LD_EXP 20
4987: PUSH
4988: LD_VAR 0 4
4992: ARRAY
4993: IFFALSE 5046
// begin playersAmount := playersAmount + 1 ;
4995: LD_ADDR_VAR 0 3
4999: PUSH
5000: LD_VAR 0 3
5004: PUSH
5005: LD_INT 1
5007: PLUS
5008: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5009: LD_ADDR_EXP 35
5013: PUSH
5014: LD_EXP 35
5018: PPUSH
5019: LD_VAR 0 4
5023: PPUSH
5024: LD_VAR 0 7
5028: PUSH
5029: LD_EXP 20
5033: PUSH
5034: LD_VAR 0 4
5038: ARRAY
5039: ARRAY
5040: PPUSH
5041: CALL_OW 1
5045: ST_TO_ADDR
// end ;
5046: GO 4980
5048: POP
5049: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5050: LD_ADDR_EXP 31
5054: PUSH
5055: LD_INT 3
5057: PUSH
5058: LD_EXP 13
5062: MUL
5063: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5064: LD_ADDR_EXP 29
5068: PUSH
5069: LD_VAR 0 3
5073: PUSH
5074: LD_EXP 31
5078: MUL
5079: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5080: LD_ADDR_EXP 30
5084: PUSH
5085: LD_EXP 29
5089: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5090: LD_ADDR_EXP 32
5094: PUSH
5095: LD_INT 0
5097: PUSH
5098: LD_INT 0
5100: PUSH
5101: LD_INT 0
5103: PUSH
5104: LD_INT 0
5106: PUSH
5107: LD_INT 0
5109: PUSH
5110: LD_INT 0
5112: PUSH
5113: LD_INT 0
5115: PUSH
5116: LD_INT 0
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5129: LD_ADDR_EXP 33
5133: PUSH
5134: LD_INT 0
5136: PUSH
5137: LD_INT 0
5139: PUSH
5140: LD_INT 0
5142: PUSH
5143: LD_INT 0
5145: PUSH
5146: LD_INT 0
5148: PUSH
5149: LD_INT 0
5151: PUSH
5152: LD_INT 0
5154: PUSH
5155: LD_INT 0
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: LIST
5162: LIST
5163: LIST
5164: LIST
5165: LIST
5166: LIST
5167: ST_TO_ADDR
// apeLevel := 1 ;
5168: LD_ADDR_EXP 34
5172: PUSH
5173: LD_INT 1
5175: ST_TO_ADDR
// if not apemanNumber then
5176: LD_EXP 29
5180: NOT
5181: IFFALSE 5185
// exit ;
5183: GO 5381
// for i := 1 to apemanPerPlayer do
5185: LD_ADDR_VAR 0 2
5189: PUSH
5190: DOUBLE
5191: LD_INT 1
5193: DEC
5194: ST_TO_ADDR
5195: LD_EXP 31
5199: PUSH
5200: FOR_TO
5201: IFFALSE 5379
// begin for j := 1 to Side_Positions do
5203: LD_ADDR_VAR 0 4
5207: PUSH
5208: DOUBLE
5209: LD_INT 1
5211: DEC
5212: ST_TO_ADDR
5213: LD_EXP 20
5217: PUSH
5218: FOR_TO
5219: IFFALSE 5375
// if Side_Positions [ j ] then
5221: LD_EXP 20
5225: PUSH
5226: LD_VAR 0 4
5230: ARRAY
5231: IFFALSE 5373
// begin pos := Side_Positions [ j ] ;
5233: LD_ADDR_VAR 0 6
5237: PUSH
5238: LD_EXP 20
5242: PUSH
5243: LD_VAR 0 4
5247: ARRAY
5248: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5249: LD_ADDR_EXP 33
5253: PUSH
5254: LD_EXP 33
5258: PPUSH
5259: LD_VAR 0 4
5263: PPUSH
5264: LD_EXP 33
5268: PUSH
5269: LD_VAR 0 4
5273: ARRAY
5274: PUSH
5275: LD_INT 1
5277: PLUS
5278: PPUSH
5279: CALL_OW 1
5283: ST_TO_ADDR
// ape := PrepareApeman ;
5284: LD_ADDR_VAR 0 5
5288: PUSH
5289: CALL 5386 0 0
5293: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5294: LD_ADDR_EXP 32
5298: PUSH
5299: LD_EXP 32
5303: PPUSH
5304: LD_VAR 0 4
5308: PPUSH
5309: LD_EXP 32
5313: PUSH
5314: LD_VAR 0 4
5318: ARRAY
5319: PPUSH
5320: LD_EXP 32
5324: PUSH
5325: LD_VAR 0 4
5329: ARRAY
5330: PUSH
5331: LD_INT 1
5333: PLUS
5334: PPUSH
5335: LD_VAR 0 5
5339: PPUSH
5340: CALL_OW 1
5344: PPUSH
5345: CALL_OW 1
5349: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5350: LD_VAR 0 5
5354: PPUSH
5355: LD_EXP 35
5359: PUSH
5360: LD_VAR 0 4
5364: ARRAY
5365: PPUSH
5366: LD_INT 0
5368: PPUSH
5369: CALL_OW 49
// end ;
5373: GO 5218
5375: POP
5376: POP
// end ;
5377: GO 5200
5379: POP
5380: POP
// end ;
5381: LD_VAR 0 1
5385: RET
// export function PrepareApeman ; var bonus ; begin
5386: LD_INT 0
5388: PPUSH
5389: PPUSH
// uc_side := 0 ;
5390: LD_ADDR_OWVAR 20
5394: PUSH
5395: LD_INT 0
5397: ST_TO_ADDR
// uc_nation := 0 ;
5398: LD_ADDR_OWVAR 21
5402: PUSH
5403: LD_INT 0
5405: ST_TO_ADDR
// InitHc ;
5406: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
5410: LD_ADDR_VAR 0 2
5414: PUSH
5415: LD_INT 1
5417: NEG
5418: PUSH
5419: LD_INT 0
5421: PUSH
5422: LD_INT 1
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: LIST
5429: PUSH
5430: LD_OWVAR 1
5434: PUSH
5435: LD_INT 3
5437: MOD
5438: PUSH
5439: LD_INT 1
5441: PLUS
5442: ARRAY
5443: ST_TO_ADDR
// hc_class := class_apeman ;
5444: LD_ADDR_OWVAR 28
5448: PUSH
5449: LD_INT 12
5451: ST_TO_ADDR
// hc_gallery :=  ;
5452: LD_ADDR_OWVAR 33
5456: PUSH
5457: LD_STRING 
5459: ST_TO_ADDR
// hc_name :=  ;
5460: LD_ADDR_OWVAR 26
5464: PUSH
5465: LD_STRING 
5467: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
5468: LD_ADDR_OWVAR 31
5472: PUSH
5473: LD_EXP 34
5477: PUSH
5478: LD_VAR 0 2
5482: PLUS
5483: PUSH
5484: LD_EXP 34
5488: PUSH
5489: LD_VAR 0 2
5493: PLUS
5494: PUSH
5495: LD_EXP 34
5499: PUSH
5500: LD_VAR 0 2
5504: PLUS
5505: PUSH
5506: LD_EXP 34
5510: PUSH
5511: LD_VAR 0 2
5515: PLUS
5516: PUSH
5517: EMPTY
5518: LIST
5519: LIST
5520: LIST
5521: LIST
5522: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
5523: LD_ADDR_OWVAR 35
5527: PUSH
5528: LD_INT 10
5530: PUSH
5531: LD_VAR 0 2
5535: MUL
5536: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5537: LD_ADDR_OWVAR 29
5541: PUSH
5542: LD_INT 12
5544: PUSH
5545: LD_INT 10
5547: PUSH
5548: EMPTY
5549: LIST
5550: LIST
5551: ST_TO_ADDR
// result := CreateHuman ;
5552: LD_ADDR_VAR 0 1
5556: PUSH
5557: CALL_OW 44
5561: ST_TO_ADDR
// end ;
5562: LD_VAR 0 1
5566: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
5567: LD_INT 0
5569: PPUSH
5570: PPUSH
5571: PPUSH
// if not ape then
5572: LD_VAR 0 1
5576: NOT
5577: IFFALSE 5581
// exit ;
5579: GO 5706
// side := GetSide ( ape ) ;
5581: LD_ADDR_VAR 0 3
5585: PUSH
5586: LD_VAR 0 1
5590: PPUSH
5591: CALL_OW 255
5595: ST_TO_ADDR
// if not side then
5596: LD_VAR 0 3
5600: NOT
5601: IFFALSE 5655
// begin for i = 1 to apemanPos do
5603: LD_ADDR_VAR 0 4
5607: PUSH
5608: DOUBLE
5609: LD_INT 1
5611: DEC
5612: ST_TO_ADDR
5613: LD_EXP 32
5617: PUSH
5618: FOR_TO
5619: IFFALSE 5653
// if ape in apemanPos [ i ] then
5621: LD_VAR 0 1
5625: PUSH
5626: LD_EXP 32
5630: PUSH
5631: LD_VAR 0 4
5635: ARRAY
5636: IN
5637: IFFALSE 5651
// begin side := i ;
5639: LD_ADDR_VAR 0 3
5643: PUSH
5644: LD_VAR 0 4
5648: ST_TO_ADDR
// break ;
5649: GO 5653
// end ;
5651: GO 5618
5653: POP
5654: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
5655: LD_ADDR_EXP 32
5659: PUSH
5660: LD_EXP 32
5664: PPUSH
5665: LD_VAR 0 3
5669: PPUSH
5670: LD_EXP 32
5674: PUSH
5675: LD_VAR 0 3
5679: ARRAY
5680: PUSH
5681: LD_VAR 0 1
5685: DIFF
5686: PPUSH
5687: CALL_OW 1
5691: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
5692: LD_ADDR_EXP 29
5696: PUSH
5697: LD_EXP 29
5701: PUSH
5702: LD_INT 1
5704: MINUS
5705: ST_TO_ADDR
// end ; end_of_file
5706: LD_VAR 0 2
5710: RET
// var shipment , respawn , inqueue ; export function init_shipments_and_respawning ; begin
5711: LD_INT 0
5713: PPUSH
// shipment := Rand ( 0 , 3 ) ;
5714: LD_ADDR_LOC 9
5718: PUSH
5719: LD_INT 0
5721: PPUSH
5722: LD_INT 3
5724: PPUSH
5725: CALL_OW 12
5729: ST_TO_ADDR
// respawn := Rand ( 1 , 8 ) ;
5730: LD_ADDR_LOC 10
5734: PUSH
5735: LD_INT 1
5737: PPUSH
5738: LD_INT 8
5740: PPUSH
5741: CALL_OW 12
5745: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5746: LD_ADDR_LOC 11
5750: PUSH
5751: LD_INT 0
5753: PUSH
5754: LD_INT 0
5756: PUSH
5757: LD_INT 0
5759: PUSH
5760: LD_INT 0
5762: PUSH
5763: LD_INT 0
5765: PUSH
5766: LD_INT 0
5768: PUSH
5769: LD_INT 0
5771: PUSH
5772: LD_INT 0
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: LIST
5779: LIST
5780: LIST
5781: LIST
5782: LIST
5783: LIST
5784: ST_TO_ADDR
// end ;
5785: LD_VAR 0 1
5789: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
5790: GO 5792
5792: DISABLE
5793: LD_INT 0
5795: PPUSH
5796: PPUSH
5797: PPUSH
5798: PPUSH
// begin if respawning_time_max = 0 then
5799: LD_EXP 11
5803: PUSH
5804: LD_INT 0
5806: EQUAL
5807: IFFALSE 5811
// exit ;
5809: GO 6318
// if respawn = 8 then
5811: LD_LOC 10
5815: PUSH
5816: LD_INT 8
5818: EQUAL
5819: IFFALSE 5831
// respawn := 1 else
5821: LD_ADDR_LOC 10
5825: PUSH
5826: LD_INT 1
5828: ST_TO_ADDR
5829: GO 5845
// respawn := respawn + 1 ;
5831: LD_ADDR_LOC 10
5835: PUSH
5836: LD_LOC 10
5840: PUSH
5841: LD_INT 1
5843: PLUS
5844: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
5845: LD_EXP 20
5849: PUSH
5850: LD_LOC 10
5854: ARRAY
5855: PUSH
5856: LD_LOC 11
5860: PUSH
5861: LD_LOC 10
5865: ARRAY
5866: NOT
5867: AND
5868: IFFALSE 6317
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
5870: LD_ADDR_VAR 0 1
5874: PUSH
5875: LD_INT 21
5877: PUSH
5878: LD_INT 1
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: PUSH
5885: LD_INT 22
5887: PUSH
5888: LD_LOC 10
5892: PUSH
5893: EMPTY
5894: LIST
5895: LIST
5896: PUSH
5897: LD_INT 3
5899: PUSH
5900: LD_INT 23
5902: PUSH
5903: LD_INT 0
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: PUSH
5910: EMPTY
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: PPUSH
5916: CALL_OW 69
5920: ST_TO_ADDR
// if n < number_of_people then
5921: LD_VAR 0 1
5925: PUSH
5926: LD_EXP 4
5930: LESS
5931: IFFALSE 6314
// begin aktresp := respawn ;
5933: LD_ADDR_VAR 0 3
5937: PUSH
5938: LD_LOC 10
5942: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
5943: LD_ADDR_LOC 11
5947: PUSH
5948: LD_LOC 11
5952: PPUSH
5953: LD_VAR 0 3
5957: PPUSH
5958: LD_INT 1
5960: PPUSH
5961: CALL_OW 1
5965: ST_TO_ADDR
// enable ;
5966: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
5967: LD_EXP 10
5971: PPUSH
5972: LD_EXP 11
5976: PPUSH
5977: CALL_OW 12
5981: PPUSH
5982: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
5986: LD_ADDR_LOC 11
5990: PUSH
5991: LD_LOC 11
5995: PPUSH
5996: LD_VAR 0 3
6000: PPUSH
6001: LD_INT 0
6003: PPUSH
6004: CALL_OW 1
6008: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
6009: LD_ADDR_VAR 0 2
6013: PUSH
6014: LD_INT 21
6016: PUSH
6017: LD_INT 3
6019: PUSH
6020: EMPTY
6021: LIST
6022: LIST
6023: PUSH
6024: LD_INT 2
6026: PUSH
6027: LD_INT 30
6029: PUSH
6030: LD_INT 0
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: PUSH
6037: LD_INT 30
6039: PUSH
6040: LD_INT 1
6042: PUSH
6043: EMPTY
6044: LIST
6045: LIST
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: LIST
6051: PUSH
6052: LD_INT 50
6054: PUSH
6055: EMPTY
6056: LIST
6057: PUSH
6058: LD_INT 22
6060: PUSH
6061: LD_VAR 0 3
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: PPUSH
6076: CALL_OW 69
6080: ST_TO_ADDR
// if building_list = 0 then
6081: LD_VAR 0 2
6085: PUSH
6086: LD_INT 0
6088: EQUAL
6089: IFFALSE 6134
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
6091: LD_ADDR_VAR 0 2
6095: PUSH
6096: LD_INT 21
6098: PUSH
6099: LD_INT 3
6101: PUSH
6102: EMPTY
6103: LIST
6104: LIST
6105: PUSH
6106: LD_INT 50
6108: PUSH
6109: EMPTY
6110: LIST
6111: PUSH
6112: LD_INT 22
6114: PUSH
6115: LD_VAR 0 3
6119: PUSH
6120: EMPTY
6121: LIST
6122: LIST
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: LIST
6128: PPUSH
6129: CALL_OW 69
6133: ST_TO_ADDR
// if building_list = 0 then
6134: LD_VAR 0 2
6138: PUSH
6139: LD_INT 0
6141: EQUAL
6142: IFFALSE 6146
// exit ;
6144: GO 6318
// hc_name :=  ;
6146: LD_ADDR_OWVAR 26
6150: PUSH
6151: LD_STRING 
6153: ST_TO_ADDR
// hc_importance := 0 ;
6154: LD_ADDR_OWVAR 32
6158: PUSH
6159: LD_INT 0
6161: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6162: LD_INT 0
6164: PPUSH
6165: LD_INT 0
6167: PPUSH
6168: LD_EXP 5
6172: PUSH
6173: LD_INT 2
6175: DIV
6176: PPUSH
6177: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
6181: LD_ADDR_OWVAR 21
6185: PUSH
6186: LD_EXP 21
6190: PUSH
6191: LD_VAR 0 3
6195: ARRAY
6196: ST_TO_ADDR
// uc_side := aktresp ;
6197: LD_ADDR_OWVAR 20
6201: PUSH
6202: LD_VAR 0 3
6206: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
6207: LD_ADDR_VAR 0 4
6211: PUSH
6212: LD_VAR 0 2
6216: PUSH
6217: LD_INT 1
6219: PPUSH
6220: LD_VAR 0 2
6224: PUSH
6225: LD_INT 0
6227: PLUS
6228: PPUSH
6229: CALL_OW 12
6233: ARRAY
6234: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
6235: LD_VAR 0 4
6239: PPUSH
6240: CALL_OW 266
6244: PUSH
6245: LD_INT 0
6247: PUSH
6248: LD_INT 1
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: IN
6255: IFFALSE 6267
// n = 25 else
6257: LD_ADDR_VAR 0 1
6261: PUSH
6262: LD_INT 25
6264: ST_TO_ADDR
6265: GO 6275
// n = 10 ;
6267: LD_ADDR_VAR 0 1
6271: PUSH
6272: LD_INT 10
6274: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
6275: CALL_OW 44
6279: PPUSH
6280: LD_VAR 0 4
6284: PPUSH
6285: CALL_OW 250
6289: PPUSH
6290: LD_VAR 0 4
6294: PPUSH
6295: CALL_OW 251
6299: PPUSH
6300: LD_VAR 0 1
6304: PPUSH
6305: LD_INT 1
6307: PPUSH
6308: CALL_OW 50
// end else
6312: GO 6315
// enable ;
6314: ENABLE
// end else
6315: GO 6318
// enable ;
6317: ENABLE
// end ;
6318: PPOPN 4
6320: END
// every 1 1$0 + 0 0$0.3 do
6321: GO 6323
6323: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
6324: LD_INT 4
6326: PPUSH
6327: LD_INT 5
6329: PPUSH
6330: CALL_OW 12
6334: PPUSH
6335: LD_INT 1
6337: PPUSH
6338: CALL_OW 57
// enable ;
6342: ENABLE
// end ;
6343: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
6344: GO 6346
6346: DISABLE
6347: LD_INT 0
6349: PPUSH
6350: PPUSH
// begin case tick of 1 .. 1 1$0 :
6351: LD_OWVAR 1
6355: PUSH
6356: LD_INT 1
6358: DOUBLE
6359: GREATEREQUAL
6360: IFFALSE 6368
6362: LD_INT 2100
6364: DOUBLE
6365: LESSEQUAL
6366: IFTRUE 6370
6368: GO 6398
6370: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$20 ) ) ; 1 1$0 + 1 .. 5 5$0 :
6371: LD_EXP 8
6375: PUSH
6376: LD_INT 100
6378: DIVREAL
6379: PUSH
6380: LD_INT 350
6382: PPUSH
6383: LD_INT 700
6385: PPUSH
6386: CALL_OW 12
6390: MUL
6391: PPUSH
6392: CALL_OW 67
6396: GO 6700
6398: LD_INT 2100
6400: PUSH
6401: LD_INT 1
6403: PLUS
6404: DOUBLE
6405: GREATEREQUAL
6406: IFFALSE 6414
6408: LD_INT 10500
6410: DOUBLE
6411: LESSEQUAL
6412: IFTRUE 6416
6414: GO 6444
6416: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$20 , 0 0$35 ) ) ; 5 5$0 + 1 .. 10 10$0 :
6417: LD_EXP 8
6421: PUSH
6422: LD_INT 100
6424: DIVREAL
6425: PUSH
6426: LD_INT 700
6428: PPUSH
6429: LD_INT 1225
6431: PPUSH
6432: CALL_OW 12
6436: MUL
6437: PPUSH
6438: CALL_OW 67
6442: GO 6700
6444: LD_INT 10500
6446: PUSH
6447: LD_INT 1
6449: PLUS
6450: DOUBLE
6451: GREATEREQUAL
6452: IFFALSE 6460
6454: LD_INT 21000
6456: DOUBLE
6457: LESSEQUAL
6458: IFTRUE 6462
6460: GO 6490
6462: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$35 , 0 0$50 ) ) ; 10 10$0 + 1 .. 20 20$0 :
6463: LD_EXP 8
6467: PUSH
6468: LD_INT 100
6470: DIVREAL
6471: PUSH
6472: LD_INT 1225
6474: PPUSH
6475: LD_INT 1750
6477: PPUSH
6478: CALL_OW 12
6482: MUL
6483: PPUSH
6484: CALL_OW 67
6488: GO 6700
6490: LD_INT 21000
6492: PUSH
6493: LD_INT 1
6495: PLUS
6496: DOUBLE
6497: GREATEREQUAL
6498: IFFALSE 6506
6500: LD_INT 42000
6502: DOUBLE
6503: LESSEQUAL
6504: IFTRUE 6508
6506: GO 6536
6508: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$10 ) ) ; 20 20$0 + 1 .. 30 30$0 :
6509: LD_EXP 8
6513: PUSH
6514: LD_INT 100
6516: DIVREAL
6517: PUSH
6518: LD_INT 1750
6520: PPUSH
6521: LD_INT 2450
6523: PPUSH
6524: CALL_OW 12
6528: MUL
6529: PPUSH
6530: CALL_OW 67
6534: GO 6700
6536: LD_INT 42000
6538: PUSH
6539: LD_INT 1
6541: PLUS
6542: DOUBLE
6543: GREATEREQUAL
6544: IFFALSE 6552
6546: LD_INT 63000
6548: DOUBLE
6549: LESSEQUAL
6550: IFTRUE 6554
6552: GO 6582
6554: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 30 30$0 + 1 .. 50 50$0 :
6555: LD_EXP 8
6559: PUSH
6560: LD_INT 100
6562: DIVREAL
6563: PUSH
6564: LD_INT 2450
6566: PPUSH
6567: LD_INT 2800
6569: PPUSH
6570: CALL_OW 12
6574: MUL
6575: PPUSH
6576: CALL_OW 67
6580: GO 6700
6582: LD_INT 63000
6584: PUSH
6585: LD_INT 1
6587: PLUS
6588: DOUBLE
6589: GREATEREQUAL
6590: IFFALSE 6598
6592: LD_INT 105000
6594: DOUBLE
6595: LESSEQUAL
6596: IFTRUE 6600
6598: GO 6628
6600: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$35 ) ) ; 50 50$0 + 1 .. 300 300$0 :
6601: LD_EXP 8
6605: PUSH
6606: LD_INT 100
6608: DIVREAL
6609: PUSH
6610: LD_INT 2800
6612: PPUSH
6613: LD_INT 3325
6615: PPUSH
6616: CALL_OW 12
6620: MUL
6621: PPUSH
6622: CALL_OW 67
6626: GO 6700
6628: LD_INT 105000
6630: PUSH
6631: LD_INT 1
6633: PLUS
6634: DOUBLE
6635: GREATEREQUAL
6636: IFFALSE 6644
6638: LD_INT 630000
6640: DOUBLE
6641: LESSEQUAL
6642: IFTRUE 6646
6644: GO 6674
6646: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$35 , 2 2$0 ) ) ; else
6647: LD_EXP 8
6651: PUSH
6652: LD_INT 100
6654: DIVREAL
6655: PUSH
6656: LD_INT 3325
6658: PPUSH
6659: LD_INT 4200
6661: PPUSH
6662: CALL_OW 12
6666: MUL
6667: PPUSH
6668: CALL_OW 67
6672: GO 6700
6674: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
6675: LD_EXP 8
6679: PUSH
6680: LD_INT 100
6682: DIVREAL
6683: PUSH
6684: LD_INT 4200
6686: PPUSH
6687: LD_INT 5250
6689: PPUSH
6690: CALL_OW 12
6694: MUL
6695: PPUSH
6696: CALL_OW 67
// amount := Rand ( 1 , 5 ) ;
6700: LD_ADDR_VAR 0 2
6704: PUSH
6705: LD_INT 1
6707: PPUSH
6708: LD_INT 5
6710: PPUSH
6711: CALL_OW 12
6715: ST_TO_ADDR
// for i = 1 to 2 do
6716: LD_ADDR_VAR 0 1
6720: PUSH
6721: DOUBLE
6722: LD_INT 1
6724: DEC
6725: ST_TO_ADDR
6726: LD_INT 2
6728: PUSH
6729: FOR_TO
6730: IFFALSE 6757
// CreateCratesArea ( amount , BuildUpAreas [ i ] , true ) ;
6732: LD_VAR 0 2
6736: PPUSH
6737: LD_EXP 55
6741: PUSH
6742: LD_VAR 0 1
6746: ARRAY
6747: PPUSH
6748: LD_INT 1
6750: PPUSH
6751: CALL_OW 55
6755: GO 6729
6757: POP
6758: POP
// enable ;
6759: ENABLE
// end ; end_of_file
6760: PPOPN 2
6762: END
// var activated ; var hadziove ; every 0 0$1 do
6763: GO 6765
6765: DISABLE
// begin wait ( Rand ( 3 3$0 , 10 10$0 ) ) ;
6766: LD_INT 6300
6768: PPUSH
6769: LD_INT 21000
6771: PPUSH
6772: CALL_OW 12
6776: PPUSH
6777: CALL_OW 67
// SetAreaMapShow ( Tree , 1 ) ;
6781: LD_INT 3
6783: PPUSH
6784: LD_INT 1
6786: PPUSH
6787: CALL_OW 424
// activated := true ;
6791: LD_ADDR_LOC 12
6795: PUSH
6796: LD_INT 1
6798: ST_TO_ADDR
// end ;
6799: END
// every 0 0$1 trigger activated do var i , un ;
6800: LD_LOC 12
6804: IFFALSE 7049
6806: GO 6808
6808: DISABLE
6809: LD_INT 0
6811: PPUSH
6812: PPUSH
// begin if not def_tree_function then
6813: LD_EXP 1
6817: NOT
6818: IFFALSE 6822
// exit ;
6820: GO 7049
// ExtraStrings := [ #MultiSmall-Tree & def_tree_function ] ;
6822: LD_ADDR_EXP 53
6826: PUSH
6827: LD_STRING #MultiSmall-Tree
6829: PUSH
6830: LD_EXP 1
6834: STR
6835: PUSH
6836: EMPTY
6837: LIST
6838: ST_TO_ADDR
// for un in FilterUnitsInArea ( Tree , [ f_type , unit_human ] ) diff hadziove do
6839: LD_ADDR_VAR 0 2
6843: PUSH
6844: LD_INT 3
6846: PPUSH
6847: LD_INT 21
6849: PUSH
6850: LD_INT 1
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PPUSH
6857: CALL_OW 70
6861: PUSH
6862: LD_LOC 13
6866: DIFF
6867: PUSH
6868: FOR_IN
6869: IFFALSE 7030
// begin if GetClass ( un ) in [ class_soldier , class_engineer , class_mechanic , class_scientistic , class_sniper , class_bazooker , class_mortar ] then
6871: LD_VAR 0 2
6875: PPUSH
6876: CALL_OW 257
6880: PUSH
6881: LD_INT 1
6883: PUSH
6884: LD_INT 2
6886: PUSH
6887: LD_INT 3
6889: PUSH
6890: LD_INT 4
6892: PUSH
6893: LD_INT 5
6895: PUSH
6896: LD_INT 9
6898: PUSH
6899: LD_INT 8
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: IN
6911: IFFALSE 6960
// for i := 1 to 4 do
6913: LD_ADDR_VAR 0 1
6917: PUSH
6918: DOUBLE
6919: LD_INT 1
6921: DEC
6922: ST_TO_ADDR
6923: LD_INT 4
6925: PUSH
6926: FOR_TO
6927: IFFALSE 6956
// GiveSkillBonus ( un , i , tree_function [ i ] ) else
6929: LD_VAR 0 2
6933: PPUSH
6934: LD_VAR 0 1
6938: PPUSH
6939: LD_EXP 14
6943: PUSH
6944: LD_VAR 0 1
6948: ARRAY
6949: PPUSH
6950: CALL_OW 238
6954: GO 6926
6956: POP
6957: POP
6958: GO 7028
// if un in [ class_apeman , class_apeman_engineer , class_apeman_kamikaze , class_apeman_soldier ] then
6960: LD_VAR 0 2
6964: PUSH
6965: LD_INT 12
6967: PUSH
6968: LD_INT 16
6970: PUSH
6971: LD_INT 17
6973: PUSH
6974: LD_INT 15
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: IN
6983: IFFALSE 7028
// for i := 1 to 4 do
6985: LD_ADDR_VAR 0 1
6989: PUSH
6990: DOUBLE
6991: LD_INT 1
6993: DEC
6994: ST_TO_ADDR
6995: LD_INT 4
6997: PUSH
6998: FOR_TO
6999: IFFALSE 7026
// GiveSkillBonus ( un , i , tree_function [ 5 ] ) ;
7001: LD_VAR 0 2
7005: PPUSH
7006: LD_VAR 0 1
7010: PPUSH
7011: LD_EXP 14
7015: PUSH
7016: LD_INT 5
7018: ARRAY
7019: PPUSH
7020: CALL_OW 238
7024: GO 6998
7026: POP
7027: POP
// end ;
7028: GO 6868
7030: POP
7031: POP
// hadziove := hadziove ^ un ;
7032: LD_ADDR_LOC 13
7036: PUSH
7037: LD_LOC 13
7041: PUSH
7042: LD_VAR 0 2
7046: ADD
7047: ST_TO_ADDR
// enable ;
7048: ENABLE
// end ; end_of_file
7049: PPOPN 2
7051: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7052: LD_VAR 0 1
7056: PPUSH
7057: CALL_OW 266
7061: PUSH
7062: LD_INT 0
7064: PUSH
7065: LD_INT 1
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: IN
7072: IFFALSE 7097
// SetBName ( b , @ & GetSide ( b ) ) ;
7074: LD_VAR 0 1
7078: PPUSH
7079: LD_STRING @
7081: PUSH
7082: LD_VAR 0 1
7086: PPUSH
7087: CALL_OW 255
7091: STR
7092: PPUSH
7093: CALL_OW 500
// if def_game_rules then
7097: LD_EXP 37
7101: IFFALSE 7138
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
7103: LD_VAR 0 1
7107: PPUSH
7108: LD_VAR 0 1
7112: PPUSH
7113: CALL_OW 266
7117: PPUSH
7118: LD_VAR 0 1
7122: PPUSH
7123: CALL_OW 255
7127: PPUSH
7128: LD_INT 0
7130: PPUSH
7131: LD_INT 1
7133: PPUSH
7134: CALL 10558 0 5
// end ;
7138: PPOPN 2
7140: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7141: LD_VAR 0 1
7145: PPUSH
7146: CALL_OW 266
7150: PUSH
7151: LD_INT 0
7153: PUSH
7154: LD_INT 1
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: IN
7161: IFFALSE 7186
// SetBName ( b , @ & GetSide ( b ) ) ;
7163: LD_VAR 0 1
7167: PPUSH
7168: LD_STRING @
7170: PUSH
7171: LD_VAR 0 1
7175: PPUSH
7176: CALL_OW 255
7180: STR
7181: PPUSH
7182: CALL_OW 500
// if def_game_rules then
7186: LD_EXP 37
7190: IFFALSE 7229
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7192: LD_VAR 0 1
7196: PPUSH
7197: LD_VAR 0 1
7201: PPUSH
7202: CALL_OW 266
7206: PPUSH
7207: LD_VAR 0 1
7211: PPUSH
7212: CALL_OW 255
7216: PPUSH
7217: LD_VAR 0 2
7221: PPUSH
7222: LD_INT 1
7224: PPUSH
7225: CALL 10558 0 5
// end ;
7229: PPOPN 3
7231: END
// on VehicleConstructed ( veh , fac ) do var side ;
7232: LD_INT 0
7234: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7235: LD_VAR 0 1
7239: PPUSH
7240: CALL_OW 263
7244: PUSH
7245: LD_INT 5
7247: EQUAL
7248: IFFALSE 7390
// begin side := GetSide ( veh ) ;
7250: LD_ADDR_VAR 0 3
7254: PUSH
7255: LD_VAR 0 1
7259: PPUSH
7260: CALL_OW 255
7264: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7265: LD_ADDR_EXP 32
7269: PUSH
7270: LD_EXP 32
7274: PPUSH
7275: LD_VAR 0 3
7279: PPUSH
7280: LD_EXP 32
7284: PUSH
7285: LD_VAR 0 3
7289: ARRAY
7290: PPUSH
7291: LD_INT 52
7293: PUSH
7294: EMPTY
7295: LIST
7296: PPUSH
7297: CALL_OW 72
7301: PUSH
7302: LD_INT 22
7304: PUSH
7305: LD_VAR 0 3
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PUSH
7314: LD_INT 2
7316: PUSH
7317: LD_INT 33
7319: PUSH
7320: LD_INT 5
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: PUSH
7327: LD_INT 25
7329: PUSH
7330: LD_INT 12
7332: PUSH
7333: EMPTY
7334: LIST
7335: LIST
7336: PUSH
7337: LD_INT 25
7339: PUSH
7340: LD_INT 15
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: PUSH
7347: LD_INT 25
7349: PUSH
7350: LD_INT 16
7352: PUSH
7353: EMPTY
7354: LIST
7355: LIST
7356: PUSH
7357: LD_INT 25
7359: PUSH
7360: LD_INT 17
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: PPUSH
7379: CALL_OW 69
7383: UNION
7384: PPUSH
7385: CALL_OW 1
7389: ST_TO_ADDR
// end ; end ;
7390: PPOPN 3
7392: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7393: LD_INT 0
7395: PPUSH
7396: PPUSH
7397: PPUSH
7398: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7399: LD_VAR 0 1
7403: PPUSH
7404: CALL_OW 257
7408: PUSH
7409: LD_INT 12
7411: PUSH
7412: LD_INT 15
7414: PUSH
7415: LD_INT 17
7417: PUSH
7418: LD_INT 16
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: IN
7427: PUSH
7428: LD_VAR 0 1
7432: PPUSH
7433: CALL_OW 263
7437: PUSH
7438: LD_INT 5
7440: EQUAL
7441: OR
7442: IFFALSE 7453
// ApeKilled ( j ) ;
7444: LD_VAR 0 1
7448: PPUSH
7449: CALL 5567 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7453: LD_VAR 0 1
7457: PPUSH
7458: CALL_OW 266
7462: PUSH
7463: LD_INT 0
7465: PUSH
7466: LD_INT 1
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: IN
7473: IFFALSE 7555
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7475: LD_ADDR_VAR 0 4
7479: PUSH
7480: LD_EXP 20
7484: PUSH
7485: LD_VAR 0 1
7489: PPUSH
7490: CALL_OW 255
7494: ARRAY
7495: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7496: LD_ADDR_VAR 0 2
7500: PUSH
7501: LD_EXP 26
7505: PUSH
7506: LD_VAR 0 4
7510: ARRAY
7511: PUSH
7512: LD_INT 1
7514: ARRAY
7515: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7516: LD_ADDR_VAR 0 3
7520: PUSH
7521: LD_EXP 26
7525: PUSH
7526: LD_VAR 0 4
7530: ARRAY
7531: PUSH
7532: LD_INT 2
7534: ARRAY
7535: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7536: LD_VAR 0 2
7540: PPUSH
7541: LD_VAR 0 3
7545: PPUSH
7546: CALL_OW 420
7550: PPUSH
7551: CALL_OW 419
// end ; if def_game_rules then
7555: LD_EXP 37
7559: IFFALSE 7658
// if ( GetType ( j ) = 3 ) then
7561: LD_VAR 0 1
7565: PPUSH
7566: CALL_OW 247
7570: PUSH
7571: LD_INT 3
7573: EQUAL
7574: IFFALSE 7614
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7576: LD_VAR 0 1
7580: PPUSH
7581: LD_VAR 0 1
7585: PPUSH
7586: CALL_OW 266
7590: PPUSH
7591: LD_VAR 0 1
7595: PPUSH
7596: CALL_OW 255
7600: PPUSH
7601: LD_INT 0
7603: PPUSH
7604: LD_INT 1
7606: NEG
7607: PPUSH
7608: CALL 10558 0 5
7612: GO 7658
// if ( GetChassis ( j ) = 25 ) then
7614: LD_VAR 0 1
7618: PPUSH
7619: CALL_OW 265
7623: PUSH
7624: LD_INT 25
7626: EQUAL
7627: IFFALSE 7658
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7629: LD_VAR 0 1
7633: PPUSH
7634: LD_INT 37
7636: PPUSH
7637: LD_VAR 0 1
7641: PPUSH
7642: CALL_OW 255
7646: PPUSH
7647: LD_INT 0
7649: PPUSH
7650: LD_INT 1
7652: NEG
7653: PPUSH
7654: CALL 10558 0 5
// end ;
7658: PPOPN 5
7660: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7661: LD_EXP 37
7665: PUSH
7666: LD_VAR 0 1
7670: PPUSH
7671: CALL_OW 265
7675: PUSH
7676: LD_INT 25
7678: EQUAL
7679: AND
7680: IFFALSE 7712
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
7682: LD_VAR 0 1
7686: PPUSH
7687: LD_INT 37
7689: PPUSH
7690: LD_VAR 0 1
7694: PPUSH
7695: CALL_OW 255
7699: PPUSH
7700: LD_VAR 0 3
7704: PPUSH
7705: LD_INT 1
7707: PPUSH
7708: CALL 10558 0 5
// end ;
7712: PPOPN 4
7714: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7715: LD_VAR 0 1
7719: PPUSH
7720: LD_VAR 0 2
7724: PPUSH
7725: LD_VAR 0 3
7729: PPUSH
7730: LD_OWVAR 2
7734: PPUSH
7735: CALL 11303 0 4
7739: PPOPN 3
7741: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7742: LD_INT 0
7744: PPUSH
7745: PPUSH
// for un in battle_flags_id do
7746: LD_ADDR_VAR 0 2
7750: PUSH
7751: LD_EXP 27
7755: PUSH
7756: FOR_IN
7757: IFFALSE 7832
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7759: LD_VAR 0 2
7763: PPUSH
7764: LD_INT 1
7766: PUSH
7767: LD_LOC 14
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: PUSH
7776: LD_INT 2
7778: PUSH
7779: LD_LOC 14
7783: PUSH
7784: LD_INT 2
7786: DIV
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: PUSH
7792: LD_INT 3
7794: PUSH
7795: LD_LOC 14
7799: PUSH
7800: LD_INT 5
7802: DIV
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: PUSH
7808: LD_INT 20
7810: PUSH
7811: LD_LOC 14
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: PPUSH
7826: CALL_OW 423
7830: GO 7756
7832: POP
7833: POP
// end ;
7834: LD_VAR 0 1
7838: RET
// every 0 0$0.1 do var un ;
7839: GO 7841
7841: DISABLE
7842: LD_INT 0
7844: PPUSH
// begin if not def_morale_flags then
7845: LD_EXP 46
7849: NOT
7850: IFFALSE 7854
// exit ;
7852: GO 7931
// if not morale_decreasing_time then
7854: LD_EXP 9
7858: NOT
7859: IFFALSE 7863
// exit ;
7861: GO 7931
// strength = 100 ;
7863: LD_ADDR_LOC 14
7867: PUSH
7868: LD_INT 100
7870: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7871: LD_EXP 9
7875: PPUSH
7876: CALL_OW 67
// strength := strength - 1 ;
7880: LD_ADDR_LOC 14
7884: PUSH
7885: LD_LOC 14
7889: PUSH
7890: LD_INT 1
7892: MINUS
7893: ST_TO_ADDR
// Update_Flags ;
7894: CALL 7742 0 0
// until not strength ;
7898: LD_LOC 14
7902: NOT
7903: IFFALSE 7871
// for un in battle_flags_id do
7905: LD_ADDR_VAR 0 1
7909: PUSH
7910: LD_EXP 27
7914: PUSH
7915: FOR_IN
7916: IFFALSE 7929
// KillBattleFlag ( un ) ;
7918: LD_VAR 0 1
7922: PPUSH
7923: CALL_OW 419
7927: GO 7915
7929: POP
7930: POP
// end ; end_of_file
7931: PPOPN 1
7933: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
7934: LD_INT 0
7936: PPUSH
7937: PPUSH
// if ( not IAmSpec ) then
7938: CALL_OW 531
7942: NOT
7943: IFFALSE 7959
// Result := Limits_Info ^  ;
7945: LD_ADDR_VAR 0 1
7949: PUSH
7950: LD_LOC 26
7954: PUSH
7955: LD_STRING 
7957: ADD
7958: ST_TO_ADDR
// for i := 1 to 8 do
7959: LD_ADDR_VAR 0 2
7963: PUSH
7964: DOUBLE
7965: LD_INT 1
7967: DEC
7968: ST_TO_ADDR
7969: LD_INT 8
7971: PUSH
7972: FOR_TO
7973: IFFALSE 8018
// if Cheaters [ i ] then
7975: LD_LOC 27
7979: PUSH
7980: LD_VAR 0 2
7984: ARRAY
7985: IFFALSE 8016
// Result := Result ^ [ #Cheater , i , i ] ;
7987: LD_ADDR_VAR 0 1
7991: PUSH
7992: LD_VAR 0 1
7996: PUSH
7997: LD_STRING #Cheater
7999: PUSH
8000: LD_VAR 0 2
8004: PUSH
8005: LD_VAR 0 2
8009: PUSH
8010: EMPTY
8011: LIST
8012: LIST
8013: LIST
8014: ADD
8015: ST_TO_ADDR
8016: GO 7972
8018: POP
8019: POP
// end ;
8020: LD_VAR 0 1
8024: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
8025: LD_INT 0
8027: PPUSH
8028: PPUSH
8029: PPUSH
8030: PPUSH
8031: PPUSH
// case Game_Type of 10 :
8032: LD_EXP 36
8036: PUSH
8037: LD_INT 10
8039: DOUBLE
8040: EQUAL
8041: IFTRUE 8045
8043: GO 8056
8045: POP
// def_game_rules := 1 ; 11 :
8046: LD_ADDR_EXP 37
8050: PUSH
8051: LD_INT 1
8053: ST_TO_ADDR
8054: GO 8076
8056: LD_INT 11
8058: DOUBLE
8059: EQUAL
8060: IFTRUE 8064
8062: GO 8075
8064: POP
// def_game_rules := 3 ; end ;
8065: LD_ADDR_EXP 37
8069: PUSH
8070: LD_INT 3
8072: ST_TO_ADDR
8073: GO 8076
8075: POP
// case def_game_rules of 0 :
8076: LD_EXP 37
8080: PUSH
8081: LD_INT 0
8083: DOUBLE
8084: EQUAL
8085: IFTRUE 8089
8087: GO 8094
8089: POP
// exit ; 1 :
8090: GO 10152
8092: GO 10052
8094: LD_INT 1
8096: DOUBLE
8097: EQUAL
8098: IFTRUE 8102
8100: GO 8318
8102: POP
// begin def_base_level := 2 ;
8103: LD_ADDR_EXP 38
8107: PUSH
8108: LD_INT 2
8110: ST_TO_ADDR
// def_amount_of_people := 2 ;
8111: LD_ADDR_EXP 39
8115: PUSH
8116: LD_INT 2
8118: ST_TO_ADDR
// def_skill_level := 1 ;
8119: LD_ADDR_EXP 40
8123: PUSH
8124: LD_INT 1
8126: ST_TO_ADDR
// def_starting_resources := 2 ;
8127: LD_ADDR_EXP 41
8131: PUSH
8132: LD_INT 2
8134: ST_TO_ADDR
// def_shipments_density := 1 ;
8135: LD_ADDR_EXP 42
8139: PUSH
8140: LD_INT 1
8142: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8143: LD_ADDR_EXP 43
8147: PUSH
8148: LD_INT 0
8150: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
8151: LD_ADDR_EXP 44
8155: PUSH
8156: LD_INT 1
8158: ST_TO_ADDR
// def_shared_vision := 1 ;
8159: LD_ADDR_EXP 45
8163: PUSH
8164: LD_INT 1
8166: ST_TO_ADDR
// def_morale_flags := 3 ;
8167: LD_ADDR_EXP 46
8171: PUSH
8172: LD_INT 3
8174: ST_TO_ADDR
// def_siberite_detection := 1 ;
8175: LD_ADDR_EXP 47
8179: PUSH
8180: LD_INT 1
8182: ST_TO_ADDR
// def_people_respawning := 1 ;
8183: LD_ADDR_EXP 48
8187: PUSH
8188: LD_INT 1
8190: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
8191: LD_ADDR_EXP 49
8195: PUSH
8196: LD_INT 1
8198: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8199: LD_ADDR_EXP 50
8203: PUSH
8204: LD_INT 0
8206: ST_TO_ADDR
// def_builduptime := 2 ;
8207: LD_ADDR_EXP 51
8211: PUSH
8212: LD_INT 2
8214: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
8215: LD_ADDR_VAR 0 2
8219: PUSH
8220: EMPTY
8221: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8222: LD_ADDR_VAR 0 3
8226: PUSH
8227: EMPTY
8228: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8229: LD_ADDR_LOC 21
8233: PUSH
8234: EMPTY
8235: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8236: LD_ADDR_LOC 22
8240: PUSH
8241: EMPTY
8242: ST_TO_ADDR
// Banned_Controls := [ ] ;
8243: LD_ADDR_LOC 23
8247: PUSH
8248: EMPTY
8249: ST_TO_ADDR
// Banned_Engines := [ ] ;
8250: LD_ADDR_LOC 24
8254: PUSH
8255: EMPTY
8256: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
8257: LD_ADDR_LOC 19
8261: PUSH
8262: LD_INT 37
8264: PUSH
8265: EMPTY
8266: LIST
8267: PUSH
8268: LD_INT 4
8270: PUSH
8271: LD_INT 5
8273: PUSH
8274: EMPTY
8275: LIST
8276: LIST
8277: PUSH
8278: LD_INT 31
8280: PUSH
8281: LD_INT 32
8283: PUSH
8284: LD_INT 33
8286: PUSH
8287: EMPTY
8288: LIST
8289: LIST
8290: LIST
8291: PUSH
8292: EMPTY
8293: LIST
8294: LIST
8295: LIST
8296: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
8297: LD_ADDR_LOC 20
8301: PUSH
8302: LD_INT 2
8304: PUSH
8305: LD_INT 2
8307: PUSH
8308: LD_INT 4
8310: PUSH
8311: EMPTY
8312: LIST
8313: LIST
8314: LIST
8315: ST_TO_ADDR
// end ; 2 :
8316: GO 10052
8318: LD_INT 2
8320: DOUBLE
8321: EQUAL
8322: IFTRUE 8326
8324: GO 8535
8326: POP
// begin def_base_level := 1 ;
8327: LD_ADDR_EXP 38
8331: PUSH
8332: LD_INT 1
8334: ST_TO_ADDR
// def_amount_of_people := 2 ;
8335: LD_ADDR_EXP 39
8339: PUSH
8340: LD_INT 2
8342: ST_TO_ADDR
// def_skill_level := 3 ;
8343: LD_ADDR_EXP 40
8347: PUSH
8348: LD_INT 3
8350: ST_TO_ADDR
// def_starting_resources := 3 ;
8351: LD_ADDR_EXP 41
8355: PUSH
8356: LD_INT 3
8358: ST_TO_ADDR
// def_shipments_density := 2 ;
8359: LD_ADDR_EXP 42
8363: PUSH
8364: LD_INT 2
8366: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8367: LD_ADDR_EXP 43
8371: PUSH
8372: LD_INT 1
8374: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8375: LD_ADDR_EXP 44
8379: PUSH
8380: LD_INT 2
8382: ST_TO_ADDR
// def_shared_vision := 1 ;
8383: LD_ADDR_EXP 45
8387: PUSH
8388: LD_INT 1
8390: ST_TO_ADDR
// def_morale_flags := 0 ;
8391: LD_ADDR_EXP 46
8395: PUSH
8396: LD_INT 0
8398: ST_TO_ADDR
// def_siberite_detection := 1 ;
8399: LD_ADDR_EXP 47
8403: PUSH
8404: LD_INT 1
8406: ST_TO_ADDR
// def_people_respawning := 0 ;
8407: LD_ADDR_EXP 48
8411: PUSH
8412: LD_INT 0
8414: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
8415: LD_ADDR_EXP 49
8419: PUSH
8420: LD_INT 0
8422: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8423: LD_ADDR_EXP 50
8427: PUSH
8428: LD_INT 0
8430: ST_TO_ADDR
// def_builduptime := 2 ;
8431: LD_ADDR_EXP 51
8435: PUSH
8436: LD_INT 2
8438: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
8439: LD_ADDR_VAR 0 2
8443: PUSH
8444: LD_INT 1
8446: PUSH
8447: EMPTY
8448: LIST
8449: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8450: LD_ADDR_VAR 0 3
8454: PUSH
8455: EMPTY
8456: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8457: LD_ADDR_LOC 21
8461: PUSH
8462: EMPTY
8463: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8464: LD_ADDR_LOC 22
8468: PUSH
8469: EMPTY
8470: ST_TO_ADDR
// Banned_Controls := [ ] ;
8471: LD_ADDR_LOC 23
8475: PUSH
8476: EMPTY
8477: ST_TO_ADDR
// Banned_Engines := [ ] ;
8478: LD_ADDR_LOC 24
8482: PUSH
8483: EMPTY
8484: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
8485: LD_ADDR_LOC 19
8489: PUSH
8490: LD_INT 4
8492: PUSH
8493: LD_INT 5
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: PUSH
8500: LD_INT 31
8502: PUSH
8503: LD_INT 32
8505: PUSH
8506: LD_INT 33
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: LIST
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
8518: LD_ADDR_LOC 20
8522: PUSH
8523: LD_INT 1
8525: PUSH
8526: LD_INT 2
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: ST_TO_ADDR
// end ; 3 :
8533: GO 10052
8535: LD_INT 3
8537: DOUBLE
8538: EQUAL
8539: IFTRUE 8543
8541: GO 8786
8543: POP
// begin def_base_level := 1 ;
8544: LD_ADDR_EXP 38
8548: PUSH
8549: LD_INT 1
8551: ST_TO_ADDR
// def_amount_of_people := 2 ;
8552: LD_ADDR_EXP 39
8556: PUSH
8557: LD_INT 2
8559: ST_TO_ADDR
// def_skill_level := 3 ;
8560: LD_ADDR_EXP 40
8564: PUSH
8565: LD_INT 3
8567: ST_TO_ADDR
// def_starting_resources := 3 ;
8568: LD_ADDR_EXP 41
8572: PUSH
8573: LD_INT 3
8575: ST_TO_ADDR
// def_shipments_density := 1 ;
8576: LD_ADDR_EXP 42
8580: PUSH
8581: LD_INT 1
8583: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8584: LD_ADDR_EXP 43
8588: PUSH
8589: LD_INT 0
8591: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
8592: LD_ADDR_EXP 44
8596: PUSH
8597: LD_INT 1
8599: ST_TO_ADDR
// def_shared_vision := 1 ;
8600: LD_ADDR_EXP 45
8604: PUSH
8605: LD_INT 1
8607: ST_TO_ADDR
// def_morale_flags := 0 ;
8608: LD_ADDR_EXP 46
8612: PUSH
8613: LD_INT 0
8615: ST_TO_ADDR
// def_siberite_detection := 1 ;
8616: LD_ADDR_EXP 47
8620: PUSH
8621: LD_INT 1
8623: ST_TO_ADDR
// def_people_respawning := 0 ;
8624: LD_ADDR_EXP 48
8628: PUSH
8629: LD_INT 0
8631: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
8632: LD_ADDR_EXP 49
8636: PUSH
8637: LD_INT 2
8639: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8640: LD_ADDR_EXP 50
8644: PUSH
8645: LD_INT 0
8647: ST_TO_ADDR
// def_builduptime := 1 ;
8648: LD_ADDR_EXP 51
8652: PUSH
8653: LD_INT 1
8655: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
8656: LD_ADDR_VAR 0 2
8660: PUSH
8661: LD_INT 23
8663: PUSH
8664: EMPTY
8665: LIST
8666: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
8667: LD_ADDR_VAR 0 3
8671: PUSH
8672: LD_INT 2
8674: PUSH
8675: LD_INT 37
8677: PUSH
8678: LD_INT 32
8680: PUSH
8681: LD_INT 33
8683: PUSH
8684: LD_INT 36
8686: PUSH
8687: LD_INT 16
8689: PUSH
8690: LD_INT 23
8692: PUSH
8693: LD_INT 21
8695: PUSH
8696: LD_INT 18
8698: PUSH
8699: LD_INT 22
8701: PUSH
8702: LD_INT 20
8704: PUSH
8705: LD_INT 19
8707: PUSH
8708: LD_INT 25
8710: PUSH
8711: LD_INT 17
8713: PUSH
8714: LD_INT 24
8716: PUSH
8717: EMPTY
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8734: LD_ADDR_LOC 21
8738: PUSH
8739: EMPTY
8740: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8741: LD_ADDR_LOC 22
8745: PUSH
8746: EMPTY
8747: ST_TO_ADDR
// Banned_Controls := [ ] ;
8748: LD_ADDR_LOC 23
8752: PUSH
8753: EMPTY
8754: ST_TO_ADDR
// Banned_Engines := [ ] ;
8755: LD_ADDR_LOC 24
8759: PUSH
8760: EMPTY
8761: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8762: LD_ADDR_LOC 19
8766: PUSH
8767: EMPTY
8768: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8769: LD_ADDR_LOC 20
8773: PUSH
8774: EMPTY
8775: ST_TO_ADDR
// No_Mechs := true ;
8776: LD_ADDR_EXP 52
8780: PUSH
8781: LD_INT 1
8783: ST_TO_ADDR
// end ; 4 :
8784: GO 10052
8786: LD_INT 4
8788: DOUBLE
8789: EQUAL
8790: IFTRUE 8794
8792: GO 8969
8794: POP
// begin def_base_level := 1 ;
8795: LD_ADDR_EXP 38
8799: PUSH
8800: LD_INT 1
8802: ST_TO_ADDR
// def_amount_of_people := 2 ;
8803: LD_ADDR_EXP 39
8807: PUSH
8808: LD_INT 2
8810: ST_TO_ADDR
// def_skill_level := 3 ;
8811: LD_ADDR_EXP 40
8815: PUSH
8816: LD_INT 3
8818: ST_TO_ADDR
// def_starting_resources := 3 ;
8819: LD_ADDR_EXP 41
8823: PUSH
8824: LD_INT 3
8826: ST_TO_ADDR
// def_shipments_density := 2 ;
8827: LD_ADDR_EXP 42
8831: PUSH
8832: LD_INT 2
8834: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8835: LD_ADDR_EXP 43
8839: PUSH
8840: LD_INT 1
8842: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8843: LD_ADDR_EXP 44
8847: PUSH
8848: LD_INT 2
8850: ST_TO_ADDR
// def_shared_vision := 1 ;
8851: LD_ADDR_EXP 45
8855: PUSH
8856: LD_INT 1
8858: ST_TO_ADDR
// def_morale_flags := 0 ;
8859: LD_ADDR_EXP 46
8863: PUSH
8864: LD_INT 0
8866: ST_TO_ADDR
// def_siberite_detection := 1 ;
8867: LD_ADDR_EXP 47
8871: PUSH
8872: LD_INT 1
8874: ST_TO_ADDR
// def_people_respawning := 0 ;
8875: LD_ADDR_EXP 48
8879: PUSH
8880: LD_INT 0
8882: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
8883: LD_ADDR_EXP 49
8887: PUSH
8888: LD_INT 0
8890: ST_TO_ADDR
// def_siberite_bomb := 1 ;
8891: LD_ADDR_EXP 50
8895: PUSH
8896: LD_INT 1
8898: ST_TO_ADDR
// def_builduptime := 3 ;
8899: LD_ADDR_EXP 51
8903: PUSH
8904: LD_INT 3
8906: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
8907: LD_ADDR_VAR 0 2
8911: PUSH
8912: LD_INT 1
8914: PUSH
8915: EMPTY
8916: LIST
8917: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8918: LD_ADDR_VAR 0 3
8922: PUSH
8923: EMPTY
8924: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8925: LD_ADDR_LOC 21
8929: PUSH
8930: EMPTY
8931: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8932: LD_ADDR_LOC 22
8936: PUSH
8937: EMPTY
8938: ST_TO_ADDR
// Banned_Controls := [ ] ;
8939: LD_ADDR_LOC 23
8943: PUSH
8944: EMPTY
8945: ST_TO_ADDR
// Banned_Engines := [ ] ;
8946: LD_ADDR_LOC 24
8950: PUSH
8951: EMPTY
8952: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8953: LD_ADDR_LOC 19
8957: PUSH
8958: EMPTY
8959: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8960: LD_ADDR_LOC 20
8964: PUSH
8965: EMPTY
8966: ST_TO_ADDR
// end ; 5 :
8967: GO 10052
8969: LD_INT 5
8971: DOUBLE
8972: EQUAL
8973: IFTRUE 8977
8975: GO 9226
8977: POP
// begin def_base_level := 0 ;
8978: LD_ADDR_EXP 38
8982: PUSH
8983: LD_INT 0
8985: ST_TO_ADDR
// def_amount_of_people := 0 ;
8986: LD_ADDR_EXP 39
8990: PUSH
8991: LD_INT 0
8993: ST_TO_ADDR
// def_skill_level := 0 ;
8994: LD_ADDR_EXP 40
8998: PUSH
8999: LD_INT 0
9001: ST_TO_ADDR
// def_starting_resources := 0 ;
9002: LD_ADDR_EXP 41
9006: PUSH
9007: LD_INT 0
9009: ST_TO_ADDR
// def_shipments_density := 0 ;
9010: LD_ADDR_EXP 42
9014: PUSH
9015: LD_INT 0
9017: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9018: LD_ADDR_EXP 43
9022: PUSH
9023: LD_INT 0
9025: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
9026: LD_ADDR_EXP 44
9030: PUSH
9031: LD_INT 0
9033: ST_TO_ADDR
// def_shared_vision := 1 ;
9034: LD_ADDR_EXP 45
9038: PUSH
9039: LD_INT 1
9041: ST_TO_ADDR
// def_morale_flags := 0 ;
9042: LD_ADDR_EXP 46
9046: PUSH
9047: LD_INT 0
9049: ST_TO_ADDR
// def_siberite_detection := 0 ;
9050: LD_ADDR_EXP 47
9054: PUSH
9055: LD_INT 0
9057: ST_TO_ADDR
// def_people_respawning := 1 ;
9058: LD_ADDR_EXP 48
9062: PUSH
9063: LD_INT 1
9065: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9066: LD_ADDR_EXP 49
9070: PUSH
9071: LD_INT 1
9073: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9074: LD_ADDR_EXP 50
9078: PUSH
9079: LD_INT 0
9081: ST_TO_ADDR
// def_builduptime := 0 ;
9082: LD_ADDR_EXP 51
9086: PUSH
9087: LD_INT 0
9089: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
9090: LD_ADDR_VAR 0 2
9094: PUSH
9095: LD_INT 10
9097: PUSH
9098: LD_INT 3
9100: PUSH
9101: EMPTY
9102: LIST
9103: LIST
9104: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
9105: LD_ADDR_VAR 0 3
9109: PUSH
9110: LD_INT 12
9112: PUSH
9113: LD_INT 11
9115: PUSH
9116: LD_INT 14
9118: PUSH
9119: LD_INT 13
9121: PUSH
9122: LD_INT 5
9124: PUSH
9125: LD_INT 24
9127: PUSH
9128: LD_INT 21
9130: PUSH
9131: LD_INT 33
9133: PUSH
9134: LD_INT 36
9136: PUSH
9137: EMPTY
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
9148: LD_ADDR_LOC 21
9152: PUSH
9153: LD_INT 31
9155: PUSH
9156: EMPTY
9157: LIST
9158: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9159: LD_ADDR_LOC 22
9163: PUSH
9164: EMPTY
9165: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
9166: LD_ADDR_LOC 23
9170: PUSH
9171: LD_INT 2
9173: PUSH
9174: EMPTY
9175: LIST
9176: ST_TO_ADDR
// Banned_Engines := [ ] ;
9177: LD_ADDR_LOC 24
9181: PUSH
9182: EMPTY
9183: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
9184: LD_ADDR_LOC 19
9188: PUSH
9189: LD_INT 4
9191: PUSH
9192: EMPTY
9193: LIST
9194: PUSH
9195: LD_INT 31
9197: PUSH
9198: LD_INT 32
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
9209: LD_ADDR_LOC 20
9213: PUSH
9214: LD_INT 1
9216: PUSH
9217: LD_INT 1
9219: PUSH
9220: EMPTY
9221: LIST
9222: LIST
9223: ST_TO_ADDR
// end ; 6 :
9224: GO 10052
9226: LD_INT 6
9228: DOUBLE
9229: EQUAL
9230: IFTRUE 9234
9232: GO 9437
9234: POP
// begin def_base_level := 1 ;
9235: LD_ADDR_EXP 38
9239: PUSH
9240: LD_INT 1
9242: ST_TO_ADDR
// def_amount_of_people := 2 ;
9243: LD_ADDR_EXP 39
9247: PUSH
9248: LD_INT 2
9250: ST_TO_ADDR
// def_skill_level := 3 ;
9251: LD_ADDR_EXP 40
9255: PUSH
9256: LD_INT 3
9258: ST_TO_ADDR
// def_starting_resources := 3 ;
9259: LD_ADDR_EXP 41
9263: PUSH
9264: LD_INT 3
9266: ST_TO_ADDR
// def_shipments_density := 1 ;
9267: LD_ADDR_EXP 42
9271: PUSH
9272: LD_INT 1
9274: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9275: LD_ADDR_EXP 43
9279: PUSH
9280: LD_INT 0
9282: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9283: LD_ADDR_EXP 44
9287: PUSH
9288: LD_INT 1
9290: ST_TO_ADDR
// def_shared_vision := 1 ;
9291: LD_ADDR_EXP 45
9295: PUSH
9296: LD_INT 1
9298: ST_TO_ADDR
// def_morale_flags := 0 ;
9299: LD_ADDR_EXP 46
9303: PUSH
9304: LD_INT 0
9306: ST_TO_ADDR
// def_siberite_detection := 1 ;
9307: LD_ADDR_EXP 47
9311: PUSH
9312: LD_INT 1
9314: ST_TO_ADDR
// def_people_respawning := 2 ;
9315: LD_ADDR_EXP 48
9319: PUSH
9320: LD_INT 2
9322: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9323: LD_ADDR_EXP 49
9327: PUSH
9328: LD_INT 1
9330: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9331: LD_ADDR_EXP 50
9335: PUSH
9336: LD_INT 0
9338: ST_TO_ADDR
// def_builduptime := 1 ;
9339: LD_ADDR_EXP 51
9343: PUSH
9344: LD_INT 1
9346: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9347: LD_ADDR_VAR 0 2
9351: PUSH
9352: LD_INT 23
9354: PUSH
9355: EMPTY
9356: LIST
9357: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
9358: LD_ADDR_VAR 0 3
9362: PUSH
9363: LD_INT 2
9365: PUSH
9366: LD_INT 37
9368: PUSH
9369: LD_INT 31
9371: PUSH
9372: LD_INT 32
9374: PUSH
9375: LD_INT 33
9377: PUSH
9378: EMPTY
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9385: LD_ADDR_LOC 21
9389: PUSH
9390: EMPTY
9391: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9392: LD_ADDR_LOC 22
9396: PUSH
9397: EMPTY
9398: ST_TO_ADDR
// Banned_Controls := [ ] ;
9399: LD_ADDR_LOC 23
9403: PUSH
9404: EMPTY
9405: ST_TO_ADDR
// Banned_Engines := [ ] ;
9406: LD_ADDR_LOC 24
9410: PUSH
9411: EMPTY
9412: ST_TO_ADDR
// Restricted_Builds := [ ] ;
9413: LD_ADDR_LOC 19
9417: PUSH
9418: EMPTY
9419: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
9420: LD_ADDR_LOC 20
9424: PUSH
9425: EMPTY
9426: ST_TO_ADDR
// No_Mechs := true ;
9427: LD_ADDR_EXP 52
9431: PUSH
9432: LD_INT 1
9434: ST_TO_ADDR
// end ; 7 :
9435: GO 10052
9437: LD_INT 7
9439: DOUBLE
9440: EQUAL
9441: IFTRUE 9445
9443: GO 9643
9445: POP
// begin def_base_level := 1 ;
9446: LD_ADDR_EXP 38
9450: PUSH
9451: LD_INT 1
9453: ST_TO_ADDR
// def_amount_of_people := 2 ;
9454: LD_ADDR_EXP 39
9458: PUSH
9459: LD_INT 2
9461: ST_TO_ADDR
// def_skill_level := 3 ;
9462: LD_ADDR_EXP 40
9466: PUSH
9467: LD_INT 3
9469: ST_TO_ADDR
// def_starting_resources := 3 ;
9470: LD_ADDR_EXP 41
9474: PUSH
9475: LD_INT 3
9477: ST_TO_ADDR
// def_shipments_density := 1 ;
9478: LD_ADDR_EXP 42
9482: PUSH
9483: LD_INT 1
9485: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9486: LD_ADDR_EXP 43
9490: PUSH
9491: LD_INT 1
9493: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9494: LD_ADDR_EXP 44
9498: PUSH
9499: LD_INT 2
9501: ST_TO_ADDR
// def_shared_vision := 1 ;
9502: LD_ADDR_EXP 45
9506: PUSH
9507: LD_INT 1
9509: ST_TO_ADDR
// def_morale_flags := 0 ;
9510: LD_ADDR_EXP 46
9514: PUSH
9515: LD_INT 0
9517: ST_TO_ADDR
// def_siberite_detection := 1 ;
9518: LD_ADDR_EXP 47
9522: PUSH
9523: LD_INT 1
9525: ST_TO_ADDR
// def_people_respawning := 0 ;
9526: LD_ADDR_EXP 48
9530: PUSH
9531: LD_INT 0
9533: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9534: LD_ADDR_EXP 49
9538: PUSH
9539: LD_INT 1
9541: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9542: LD_ADDR_EXP 50
9546: PUSH
9547: LD_INT 0
9549: ST_TO_ADDR
// def_builduptime := 3 ;
9550: LD_ADDR_EXP 51
9554: PUSH
9555: LD_INT 3
9557: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9558: LD_ADDR_VAR 0 2
9562: PUSH
9563: LD_INT 23
9565: PUSH
9566: EMPTY
9567: LIST
9568: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
9569: LD_ADDR_VAR 0 3
9573: PUSH
9574: LD_INT 37
9576: PUSH
9577: EMPTY
9578: LIST
9579: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9580: LD_ADDR_LOC 21
9584: PUSH
9585: EMPTY
9586: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9587: LD_ADDR_LOC 22
9591: PUSH
9592: EMPTY
9593: ST_TO_ADDR
// Banned_Controls := [ ] ;
9594: LD_ADDR_LOC 23
9598: PUSH
9599: EMPTY
9600: ST_TO_ADDR
// Banned_Engines := [ ] ;
9601: LD_ADDR_LOC 24
9605: PUSH
9606: EMPTY
9607: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9608: LD_ADDR_LOC 19
9612: PUSH
9613: LD_INT 31
9615: PUSH
9616: LD_INT 32
9618: PUSH
9619: LD_INT 33
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: LIST
9626: PUSH
9627: EMPTY
9628: LIST
9629: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
9630: LD_ADDR_LOC 20
9634: PUSH
9635: LD_INT 10
9637: PUSH
9638: EMPTY
9639: LIST
9640: ST_TO_ADDR
// end ; 8 :
9641: GO 10052
9643: LD_INT 8
9645: DOUBLE
9646: EQUAL
9647: IFTRUE 9651
9649: GO 10051
9651: POP
// begin def_base_level := 0 ;
9652: LD_ADDR_EXP 38
9656: PUSH
9657: LD_INT 0
9659: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
9660: LD_ADDR_EXP 39
9664: PUSH
9665: LD_INT 0
9667: PPUSH
9668: LD_INT 1
9670: PPUSH
9671: CALL_OW 12
9675: ST_TO_ADDR
// def_skill_level := 0 ;
9676: LD_ADDR_EXP 40
9680: PUSH
9681: LD_INT 0
9683: ST_TO_ADDR
// def_starting_resources := 2 ;
9684: LD_ADDR_EXP 41
9688: PUSH
9689: LD_INT 2
9691: ST_TO_ADDR
// def_shipments_density := 1 ;
9692: LD_ADDR_EXP 42
9696: PUSH
9697: LD_INT 1
9699: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9700: LD_ADDR_EXP 43
9704: PUSH
9705: LD_INT 0
9707: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
9708: LD_ADDR_EXP 44
9712: PUSH
9713: LD_INT 0
9715: ST_TO_ADDR
// def_shared_vision := 1 ;
9716: LD_ADDR_EXP 45
9720: PUSH
9721: LD_INT 1
9723: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
9724: LD_ADDR_EXP 46
9728: PUSH
9729: LD_INT 0
9731: PPUSH
9732: LD_INT 2
9734: PPUSH
9735: CALL_OW 12
9739: ST_TO_ADDR
// def_siberite_detection := 0 ;
9740: LD_ADDR_EXP 47
9744: PUSH
9745: LD_INT 0
9747: ST_TO_ADDR
// def_people_respawning := 0 ;
9748: LD_ADDR_EXP 48
9752: PUSH
9753: LD_INT 0
9755: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
9756: LD_ADDR_EXP 49
9760: PUSH
9761: LD_INT 2
9763: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9764: LD_ADDR_EXP 50
9768: PUSH
9769: LD_INT 0
9771: ST_TO_ADDR
// def_builduptime := 0 ;
9772: LD_ADDR_EXP 51
9776: PUSH
9777: LD_INT 0
9779: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
9780: LD_ADDR_VAR 0 2
9784: PUSH
9785: LD_INT 23
9787: PUSH
9788: LD_INT 20
9790: PUSH
9791: LD_INT 40
9793: PUSH
9794: LD_INT 47
9796: PUSH
9797: LD_INT 46
9799: PUSH
9800: LD_INT 39
9802: PUSH
9803: LD_INT 71
9805: PUSH
9806: LD_INT 34
9808: PUSH
9809: LD_INT 41
9811: PUSH
9812: LD_INT 44
9814: PUSH
9815: LD_INT 17
9817: PUSH
9818: LD_INT 16
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
9835: LD_ADDR_VAR 0 3
9839: PUSH
9840: LD_INT 37
9842: PUSH
9843: LD_INT 5
9845: PUSH
9846: LD_INT 13
9848: PUSH
9849: LD_INT 34
9851: PUSH
9852: LD_INT 12
9854: PUSH
9855: LD_INT 15
9857: PUSH
9858: LD_INT 11
9860: PUSH
9861: LD_INT 14
9863: PUSH
9864: LD_INT 29
9866: PUSH
9867: LD_INT 30
9869: PUSH
9870: LD_INT 28
9872: PUSH
9873: LD_INT 24
9875: PUSH
9876: LD_INT 25
9878: PUSH
9879: LD_INT 20
9881: PUSH
9882: LD_INT 21
9884: PUSH
9885: LD_INT 22
9887: PUSH
9888: LD_INT 36
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9910: LD_ADDR_LOC 21
9914: PUSH
9915: EMPTY
9916: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
9917: LD_ADDR_LOC 22
9921: PUSH
9922: LD_INT 14
9924: PUSH
9925: EMPTY
9926: LIST
9927: ST_TO_ADDR
// Banned_Controls := [ ] ;
9928: LD_ADDR_LOC 23
9932: PUSH
9933: EMPTY
9934: ST_TO_ADDR
// Banned_Engines := [ ] ;
9935: LD_ADDR_LOC 24
9939: PUSH
9940: EMPTY
9941: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
9942: LD_ADDR_LOC 19
9946: PUSH
9947: LD_INT 31
9949: PUSH
9950: LD_INT 32
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: PUSH
9957: LD_INT 4
9959: PUSH
9960: EMPTY
9961: LIST
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
9967: LD_ADDR_LOC 20
9971: PUSH
9972: LD_INT 2
9974: PUSH
9975: LD_INT 1
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: ST_TO_ADDR
// for i := 1 to 8 do
9982: LD_ADDR_VAR 0 4
9986: PUSH
9987: DOUBLE
9988: LD_INT 1
9990: DEC
9991: ST_TO_ADDR
9992: LD_INT 8
9994: PUSH
9995: FOR_TO
9996: IFFALSE 10047
// if ( Side_Nations [ i ] = 3 ) then
9998: LD_EXP 21
10002: PUSH
10003: LD_VAR 0 4
10007: ARRAY
10008: PUSH
10009: LD_INT 3
10011: EQUAL
10012: IFFALSE 10045
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
10014: LD_ADDR_EXP 21
10018: PUSH
10019: LD_EXP 21
10023: PPUSH
10024: LD_VAR 0 4
10028: PPUSH
10029: LD_INT 1
10031: PPUSH
10032: LD_INT 2
10034: PPUSH
10035: CALL_OW 12
10039: PPUSH
10040: CALL_OW 1
10044: ST_TO_ADDR
10045: GO 9995
10047: POP
10048: POP
// end ; end ;
10049: GO 10052
10051: POP
// for i := 1 to 8 do
10052: LD_ADDR_VAR 0 4
10056: PUSH
10057: DOUBLE
10058: LD_INT 1
10060: DEC
10061: ST_TO_ADDR
10062: LD_INT 8
10064: PUSH
10065: FOR_TO
10066: IFFALSE 10150
// if Side_Positions [ i ] then
10068: LD_EXP 20
10072: PUSH
10073: LD_VAR 0 4
10077: ARRAY
10078: IFFALSE 10148
// begin for j in Unavailable_Techs do
10080: LD_ADDR_VAR 0 5
10084: PUSH
10085: LD_VAR 0 2
10089: PUSH
10090: FOR_IN
10091: IFFALSE 10112
// SetTech ( j , i , 0 ) ;
10093: LD_VAR 0 5
10097: PPUSH
10098: LD_VAR 0 4
10102: PPUSH
10103: LD_INT 0
10105: PPUSH
10106: CALL_OW 322
10110: GO 10090
10112: POP
10113: POP
// for j in Unavailable_Builds do
10114: LD_ADDR_VAR 0 5
10118: PUSH
10119: LD_VAR 0 3
10123: PUSH
10124: FOR_IN
10125: IFFALSE 10146
// SetRestrict ( j , i , 0 ) ;
10127: LD_VAR 0 5
10131: PPUSH
10132: LD_VAR 0 4
10136: PPUSH
10137: LD_INT 0
10139: PPUSH
10140: CALL_OW 324
10144: GO 10124
10146: POP
10147: POP
// end ;
10148: GO 10065
10150: POP
10151: POP
// end ;
10152: LD_VAR 0 1
10156: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
10157: LD_INT 0
10159: PPUSH
10160: PPUSH
10161: PPUSH
10162: PPUSH
10163: PPUSH
10164: PPUSH
10165: PPUSH
// for i := 1 to Restricted_Builds do
10166: LD_ADDR_VAR 0 2
10170: PUSH
10171: DOUBLE
10172: LD_INT 1
10174: DEC
10175: ST_TO_ADDR
10176: LD_LOC 19
10180: PUSH
10181: FOR_TO
10182: IFFALSE 10492
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
10184: LD_LOC 19
10188: PUSH
10189: LD_VAR 0 2
10193: ARRAY
10194: PUSH
10195: LD_INT 1
10197: ARRAY
10198: PUSH
10199: LD_INT 31
10201: DOUBLE
10202: EQUAL
10203: IFTRUE 10219
10205: LD_INT 32
10207: DOUBLE
10208: EQUAL
10209: IFTRUE 10219
10211: LD_INT 33
10213: DOUBLE
10214: EQUAL
10215: IFTRUE 10219
10217: GO 10230
10219: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
10220: LD_ADDR_VAR 0 6
10224: PUSH
10225: LD_STRING #Turrets
10227: ST_TO_ADDR
10228: GO 10275
10230: LD_INT 4
10232: DOUBLE
10233: EQUAL
10234: IFTRUE 10244
10236: LD_INT 5
10238: DOUBLE
10239: EQUAL
10240: IFTRUE 10244
10242: GO 10255
10244: POP
// btype := #Armouries ; b_Behemoth :
10245: LD_ADDR_VAR 0 6
10249: PUSH
10250: LD_STRING #Armouries
10252: ST_TO_ADDR
10253: GO 10275
10255: LD_INT 37
10257: DOUBLE
10258: EQUAL
10259: IFTRUE 10263
10261: GO 10274
10263: POP
// btype := #Behemoths ; end ;
10264: LD_ADDR_VAR 0 6
10268: PUSH
10269: LD_STRING #Behemoths
10271: ST_TO_ADDR
10272: GO 10275
10274: POP
// list := [ ] ;
10275: LD_ADDR_VAR 0 7
10279: PUSH
10280: EMPTY
10281: ST_TO_ADDR
// for j := 1 to 8 do
10282: LD_ADDR_VAR 0 3
10286: PUSH
10287: DOUBLE
10288: LD_INT 1
10290: DEC
10291: ST_TO_ADDR
10292: LD_INT 8
10294: PUSH
10295: FOR_TO
10296: IFFALSE 10389
// if Side_Positions [ j ] then
10298: LD_EXP 20
10302: PUSH
10303: LD_VAR 0 3
10307: ARRAY
10308: IFFALSE 10387
// begin amount := 0 ;
10310: LD_ADDR_VAR 0 5
10314: PUSH
10315: LD_INT 0
10317: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
10318: LD_ADDR_VAR 0 4
10322: PUSH
10323: LD_LOC 19
10327: PUSH
10328: LD_VAR 0 2
10332: ARRAY
10333: PUSH
10334: FOR_IN
10335: IFFALSE 10383
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
10337: LD_ADDR_VAR 0 5
10341: PUSH
10342: LD_VAR 0 5
10346: PUSH
10347: LD_INT 22
10349: PUSH
10350: LD_VAR 0 3
10354: PUSH
10355: EMPTY
10356: LIST
10357: LIST
10358: PUSH
10359: LD_INT 30
10361: PUSH
10362: LD_VAR 0 4
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PPUSH
10375: CALL_OW 69
10379: PLUS
10380: ST_TO_ADDR
10381: GO 10334
10383: POP
10384: POP
// break ;
10385: GO 10389
// end ;
10387: GO 10295
10389: POP
10390: POP
// list := [ ] ;
10391: LD_ADDR_VAR 0 7
10395: PUSH
10396: EMPTY
10397: ST_TO_ADDR
// for j := 1 to 8 do
10398: LD_ADDR_VAR 0 3
10402: PUSH
10403: DOUBLE
10404: LD_INT 1
10406: DEC
10407: ST_TO_ADDR
10408: LD_INT 8
10410: PUSH
10411: FOR_TO
10412: IFFALSE 10432
// list := list ^ amount ;
10414: LD_ADDR_VAR 0 7
10418: PUSH
10419: LD_VAR 0 7
10423: PUSH
10424: LD_VAR 0 5
10428: ADD
10429: ST_TO_ADDR
10430: GO 10411
10432: POP
10433: POP
// Already_Built := Already_Built ^ [ list ] ;
10434: LD_ADDR_LOC 25
10438: PUSH
10439: LD_LOC 25
10443: PUSH
10444: LD_VAR 0 7
10448: PUSH
10449: EMPTY
10450: LIST
10451: ADD
10452: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
10453: LD_ADDR_LOC 26
10457: PUSH
10458: LD_LOC 26
10462: PUSH
10463: LD_VAR 0 6
10467: PUSH
10468: LD_VAR 0 5
10472: PUSH
10473: LD_LOC 20
10477: PUSH
10478: LD_VAR 0 2
10482: ARRAY
10483: PUSH
10484: EMPTY
10485: LIST
10486: LIST
10487: LIST
10488: ADD
10489: ST_TO_ADDR
// end ;
10490: GO 10181
10492: POP
10493: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10494: LD_ADDR_LOC 27
10498: PUSH
10499: LD_INT 0
10501: PUSH
10502: LD_INT 0
10504: PUSH
10505: LD_INT 0
10507: PUSH
10508: LD_INT 0
10510: PUSH
10511: LD_INT 0
10513: PUSH
10514: LD_INT 0
10516: PUSH
10517: LD_INT 0
10519: PUSH
10520: LD_INT 0
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: ST_TO_ADDR
// if Limits_Info then
10533: LD_LOC 26
10537: IFFALSE 10553
// Limits_Info := #Limits ^ Limits_Info ;
10539: LD_ADDR_LOC 26
10543: PUSH
10544: LD_STRING #Limits
10546: PUSH
10547: LD_LOC 26
10551: ADD
10552: ST_TO_ADDR
// end ;
10553: LD_VAR 0 1
10557: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
10558: LD_INT 0
10560: PPUSH
10561: PPUSH
10562: PPUSH
10563: PPUSH
// for i := 1 to Restricted_Builds do
10564: LD_ADDR_VAR 0 7
10568: PUSH
10569: DOUBLE
10570: LD_INT 1
10572: DEC
10573: ST_TO_ADDR
10574: LD_LOC 19
10578: PUSH
10579: FOR_TO
10580: IFFALSE 11003
// if BType in Restricted_Builds [ i ] then
10582: LD_VAR 0 2
10586: PUSH
10587: LD_LOC 19
10591: PUSH
10592: LD_VAR 0 7
10596: ARRAY
10597: IN
10598: IFFALSE 11001
// begin if old_side then
10600: LD_VAR 0 4
10604: IFFALSE 10730
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
10606: LD_LOC 25
10610: PUSH
10611: LD_VAR 0 7
10615: ARRAY
10616: PUSH
10617: LD_VAR 0 3
10621: ARRAY
10622: PUSH
10623: LD_VAR 0 5
10627: PLUS
10628: PUSH
10629: LD_LOC 20
10633: PUSH
10634: LD_VAR 0 7
10638: ARRAY
10639: GREATER
10640: IFFALSE 10666
// begin SetSide ( un , old_side ) ;
10642: LD_VAR 0 1
10646: PPUSH
10647: LD_VAR 0 4
10651: PPUSH
10652: CALL_OW 235
// count := 0 ;
10656: LD_ADDR_VAR 0 5
10660: PUSH
10661: LD_INT 0
10663: ST_TO_ADDR
// end else
10664: GO 10730
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
10666: LD_ADDR_LOC 25
10670: PUSH
10671: LD_LOC 25
10675: PPUSH
10676: LD_VAR 0 7
10680: PPUSH
10681: LD_LOC 25
10685: PUSH
10686: LD_VAR 0 7
10690: ARRAY
10691: PPUSH
10692: LD_VAR 0 4
10696: PPUSH
10697: LD_LOC 25
10701: PUSH
10702: LD_VAR 0 7
10706: ARRAY
10707: PUSH
10708: LD_VAR 0 4
10712: ARRAY
10713: PUSH
10714: LD_VAR 0 5
10718: MINUS
10719: PPUSH
10720: CALL_OW 1
10724: PPUSH
10725: CALL_OW 1
10729: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
10730: LD_ADDR_LOC 25
10734: PUSH
10735: LD_LOC 25
10739: PPUSH
10740: LD_VAR 0 7
10744: PPUSH
10745: LD_LOC 25
10749: PUSH
10750: LD_VAR 0 7
10754: ARRAY
10755: PPUSH
10756: LD_VAR 0 3
10760: PPUSH
10761: LD_LOC 25
10765: PUSH
10766: LD_VAR 0 7
10770: ARRAY
10771: PUSH
10772: LD_VAR 0 3
10776: ARRAY
10777: PUSH
10778: LD_VAR 0 5
10782: PLUS
10783: PPUSH
10784: CALL_OW 1
10788: PPUSH
10789: CALL_OW 1
10793: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
10794: LD_VAR 0 5
10798: PUSH
10799: LD_INT 0
10801: NONEQUAL
10802: PUSH
10803: LD_VAR 0 3
10807: PUSH
10808: LD_OWVAR 2
10812: EQUAL
10813: AND
10814: IFFALSE 10857
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
10816: LD_ADDR_LOC 26
10820: PUSH
10821: LD_LOC 26
10825: PPUSH
10826: LD_INT 3
10828: PUSH
10829: LD_VAR 0 7
10833: MUL
10834: PPUSH
10835: LD_LOC 25
10839: PUSH
10840: LD_VAR 0 7
10844: ARRAY
10845: PUSH
10846: LD_VAR 0 3
10850: ARRAY
10851: PPUSH
10852: CALL_OW 1
10856: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
10857: LD_LOC 25
10861: PUSH
10862: LD_VAR 0 7
10866: ARRAY
10867: PUSH
10868: LD_VAR 0 3
10872: ARRAY
10873: PUSH
10874: LD_LOC 20
10878: PUSH
10879: LD_VAR 0 7
10883: ARRAY
10884: GREATER
10885: IFFALSE 10912
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
10887: LD_ADDR_LOC 27
10891: PUSH
10892: LD_LOC 27
10896: PPUSH
10897: LD_VAR 0 3
10901: PPUSH
10902: LD_INT 1
10904: PPUSH
10905: CALL_OW 1
10909: ST_TO_ADDR
// end else
10910: GO 10999
// begin for j := 1 to Restricted_Builds do
10912: LD_ADDR_VAR 0 8
10916: PUSH
10917: DOUBLE
10918: LD_INT 1
10920: DEC
10921: ST_TO_ADDR
10922: LD_LOC 19
10926: PUSH
10927: FOR_TO
10928: IFFALSE 10972
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
10930: LD_LOC 25
10934: PUSH
10935: LD_VAR 0 8
10939: ARRAY
10940: PUSH
10941: LD_VAR 0 3
10945: ARRAY
10946: PUSH
10947: LD_LOC 20
10951: PUSH
10952: LD_VAR 0 8
10956: ARRAY
10957: GREATER
10958: IFFALSE 10970
// begin Is_Cheater := true ;
10960: LD_ADDR_VAR 0 9
10964: PUSH
10965: LD_INT 1
10967: ST_TO_ADDR
// break ;
10968: GO 10972
// end ;
10970: GO 10927
10972: POP
10973: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
10974: LD_ADDR_LOC 27
10978: PUSH
10979: LD_LOC 27
10983: PPUSH
10984: LD_VAR 0 3
10988: PPUSH
10989: LD_VAR 0 9
10993: PPUSH
10994: CALL_OW 1
10998: ST_TO_ADDR
// end ; break ;
10999: GO 11003
// end ;
11001: GO 10579
11003: POP
11004: POP
// end ;
11005: LD_VAR 0 6
11009: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
11010: LD_VAR 0 5
11014: PUSH
11015: LD_LOC 21
11019: IN
11020: PUSH
11021: LD_VAR 0 2
11025: PUSH
11026: LD_LOC 22
11030: IN
11031: OR
11032: PUSH
11033: LD_VAR 0 4
11037: PUSH
11038: LD_LOC 23
11042: IN
11043: OR
11044: PUSH
11045: LD_VAR 0 3
11049: PUSH
11050: LD_LOC 24
11054: IN
11055: OR
11056: IFFALSE 11067
// ComCancel ( factory ) ;
11058: LD_VAR 0 1
11062: PPUSH
11063: CALL_OW 127
// end ;
11067: PPOPN 5
11069: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
11070: LD_VAR 0 2
11074: PUSH
11075: LD_LOC 21
11079: IN
11080: IFFALSE 11091
// ComCancel ( building ) ;
11082: LD_VAR 0 1
11086: PPUSH
11087: CALL_OW 127
// end ; end_of_file
11091: PPOPN 2
11093: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
11094: LD_INT 0
11096: PPUSH
11097: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
11098: LD_ADDR_VAR 0 2
11102: PUSH
11103: LD_STRING #Multi1x1-Time
11105: PUSH
11106: LD_OWVAR 1
11110: PUSH
11111: EMPTY
11112: LIST
11113: LIST
11114: ST_TO_ADDR
// if WaitServerStrings then
11115: LD_EXP 54
11119: IFFALSE 11137
// AllStrings = AllStrings ^ WaitServerStrings ;
11121: LD_ADDR_VAR 0 2
11125: PUSH
11126: LD_VAR 0 2
11130: PUSH
11131: LD_EXP 54
11135: ADD
11136: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
11137: LD_INT 0
11139: PUSH
11140: LD_EXP 12
11144: PUSH
11145: LD_OWVAR 1
11149: MINUS
11150: LESSEQUAL
11151: IFFALSE 11182
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
11153: LD_ADDR_VAR 0 2
11157: PUSH
11158: LD_VAR 0 2
11162: PUSH
11163: LD_STRING #allowedsibbomb
11165: PUSH
11166: LD_EXP 12
11170: PUSH
11171: LD_OWVAR 1
11175: MINUS
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: ADD
11181: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
11182: LD_INT 0
11184: PUSH
11185: LD_EXP 16
11189: PUSH
11190: LD_OWVAR 1
11194: MINUS
11195: LESSEQUAL
11196: IFFALSE 11227
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
11198: LD_ADDR_VAR 0 2
11202: PUSH
11203: LD_VAR 0 2
11207: PUSH
11208: LD_STRING #builduptime
11210: PUSH
11211: LD_EXP 16
11215: PUSH
11216: LD_OWVAR 1
11220: MINUS
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: ADD
11226: ST_TO_ADDR
// if ( ExtraStrings ) then
11227: LD_EXP 53
11231: IFFALSE 11253
// AllStrings := AllStrings ^  ^ ExtraStrings ;
11233: LD_ADDR_VAR 0 2
11237: PUSH
11238: LD_VAR 0 2
11242: PUSH
11243: LD_STRING 
11245: ADD
11246: PUSH
11247: LD_EXP 53
11251: ADD
11252: ST_TO_ADDR
// if ( LimitsStrings ) then
11253: CALL 7934 0 0
11257: IFFALSE 11279
// AllStrings := AllStrings ^  ^ LimitsStrings ;
11259: LD_ADDR_VAR 0 2
11263: PUSH
11264: LD_VAR 0 2
11268: PUSH
11269: LD_STRING 
11271: ADD
11272: PUSH
11273: CALL 7934 0 0
11277: ADD
11278: ST_TO_ADDR
// Display_Strings := AllStrings ;
11279: LD_ADDR_OWVAR 47
11283: PUSH
11284: LD_VAR 0 2
11288: ST_TO_ADDR
// end ;
11289: LD_VAR 0 1
11293: RET
// every 0 0$1 do
11294: GO 11296
11296: DISABLE
// begin ShowTimer ;
11297: CALL 11094 0 0
// enable ;
11301: ENABLE
// end ; end_of_file
11302: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
11303: LD_INT 0
11305: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
11306: LD_VAR 0 1
11310: PPUSH
11311: CALL_OW 255
11315: PUSH
11316: LD_VAR 0 4
11320: EQUAL
11321: IFFALSE 11340
// begin SetAchievement ( ACH_RAD ) ;
11323: LD_STRING ACH_RAD
11325: PPUSH
11326: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
11330: LD_STRING ACH_NL
11332: PPUSH
11333: LD_INT 1
11335: PPUSH
11336: CALL_OW 564
// end end ;
11340: LD_VAR 0 5
11344: RET
// export function SA_Win ( side ) ; begin
11345: LD_INT 0
11347: PPUSH
// case side of 1 :
11348: LD_VAR 0 1
11352: PUSH
11353: LD_INT 1
11355: DOUBLE
11356: EQUAL
11357: IFTRUE 11361
11359: GO 11374
11361: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
11362: LD_STRING ACH_AH
11364: PPUSH
11365: LD_INT 1
11367: PPUSH
11368: CALL_OW 564
11372: GO 11537
11374: LD_INT 2
11376: DOUBLE
11377: EQUAL
11378: IFTRUE 11382
11380: GO 11395
11382: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
11383: LD_STRING ACH_E
11385: PPUSH
11386: LD_INT 1
11388: PPUSH
11389: CALL_OW 564
11393: GO 11537
11395: LD_INT 3
11397: DOUBLE
11398: EQUAL
11399: IFTRUE 11403
11401: GO 11416
11403: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
11404: LD_STRING ACH_OOL
11406: PPUSH
11407: LD_INT 1
11409: PPUSH
11410: CALL_OW 564
11414: GO 11537
11416: LD_INT 1
11418: PUSH
11419: LD_INT 2
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: DOUBLE
11426: EQUAL
11427: IFTRUE 11431
11429: GO 11456
11431: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
11432: LD_STRING ACH_AH
11434: PPUSH
11435: LD_REAL  5.00000000000000E-0001
11438: PPUSH
11439: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
11443: LD_STRING ACH_E
11445: PPUSH
11446: LD_REAL  5.00000000000000E-0001
11449: PPUSH
11450: CALL_OW 564
// end ; [ 2 , 3 ] :
11454: GO 11537
11456: LD_INT 2
11458: PUSH
11459: LD_INT 3
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: DOUBLE
11466: EQUAL
11467: IFTRUE 11471
11469: GO 11496
11471: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
11472: LD_STRING ACH_OOL
11474: PPUSH
11475: LD_REAL  5.00000000000000E-0001
11478: PPUSH
11479: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
11483: LD_STRING ACH_E
11485: PPUSH
11486: LD_REAL  5.00000000000000E-0001
11489: PPUSH
11490: CALL_OW 564
// end ; [ 3 , 1 ] :
11494: GO 11537
11496: LD_INT 3
11498: PUSH
11499: LD_INT 1
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: DOUBLE
11506: EQUAL
11507: IFTRUE 11511
11509: GO 11536
11511: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
11512: LD_STRING ACH_AH
11514: PPUSH
11515: LD_REAL  5.00000000000000E-0001
11518: PPUSH
11519: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
11523: LD_STRING ACH_OOL
11525: PPUSH
11526: LD_REAL  5.00000000000000E-0001
11529: PPUSH
11530: CALL_OW 564
// end ; end ;
11534: GO 11537
11536: POP
// end ; end_of_file
11537: LD_VAR 0 2
11541: RET
// export BuildUpAreas , BuildUp ; export function BeginBuildUp ; var i , j ; begin
11542: LD_INT 0
11544: PPUSH
11545: PPUSH
11546: PPUSH
// enable ( 600 ) ;
11547: LD_INT 600
11549: ENABLE_MARKED
// BuildUp = true ;
11550: LD_ADDR_EXP 56
11554: PUSH
11555: LD_INT 1
11557: ST_TO_ADDR
// for i := 1 to BuildUpAreas do
11558: LD_ADDR_VAR 0 2
11562: PUSH
11563: DOUBLE
11564: LD_INT 1
11566: DEC
11567: ST_TO_ADDR
11568: LD_EXP 55
11572: PUSH
11573: FOR_TO
11574: IFFALSE 11729
// if Position_Sides [ i ] then
11576: LD_EXP 23
11580: PUSH
11581: LD_VAR 0 2
11585: ARRAY
11586: IFFALSE 11727
// for j := 1 to 8 do
11588: LD_ADDR_VAR 0 3
11592: PUSH
11593: DOUBLE
11594: LD_INT 1
11596: DEC
11597: ST_TO_ADDR
11598: LD_INT 8
11600: PUSH
11601: FOR_TO
11602: IFFALSE 11725
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
11604: LD_EXP 20
11608: PUSH
11609: LD_VAR 0 3
11613: ARRAY
11614: PUSH
11615: LD_EXP 17
11619: PUSH
11620: LD_EXP 23
11624: PUSH
11625: LD_VAR 0 2
11629: ARRAY
11630: ARRAY
11631: PUSH
11632: LD_EXP 17
11636: PUSH
11637: LD_VAR 0 3
11641: ARRAY
11642: NONEQUAL
11643: PUSH
11644: LD_EXP 22
11648: NOT
11649: PUSH
11650: LD_EXP 23
11654: PUSH
11655: LD_VAR 0 2
11659: ARRAY
11660: PUSH
11661: LD_VAR 0 3
11665: NONEQUAL
11666: AND
11667: OR
11668: AND
11669: IFFALSE 11693
// HideArea ( j , BuildUpAreas [ i ] ) else
11671: LD_VAR 0 3
11675: PPUSH
11676: LD_EXP 55
11680: PUSH
11681: LD_VAR 0 2
11685: ARRAY
11686: PPUSH
11687: CALL_OW 333
11691: GO 11723
// if ( j = your_side ) then
11693: LD_VAR 0 3
11697: PUSH
11698: LD_OWVAR 2
11702: EQUAL
11703: IFFALSE 11723
// SetAreaMapShow ( BuildUpAreas [ i ] , 3 ) ;
11705: LD_EXP 55
11709: PUSH
11710: LD_VAR 0 2
11714: ARRAY
11715: PPUSH
11716: LD_INT 3
11718: PPUSH
11719: CALL_OW 424
11723: GO 11601
11725: POP
11726: POP
11727: GO 11573
11729: POP
11730: POP
// end ;
11731: LD_VAR 0 1
11735: RET
// export function EndBuildUp ; var i , j ; begin
11736: LD_INT 0
11738: PPUSH
11739: PPUSH
11740: PPUSH
// disable ( 600 ) ;
11741: LD_INT 600
11743: DISABLE_MARKED
// BuildUp = false ;
11744: LD_ADDR_EXP 56
11748: PUSH
11749: LD_INT 0
11751: ST_TO_ADDR
// for i := 1 to BuildUpAreas do
11752: LD_ADDR_VAR 0 2
11756: PUSH
11757: DOUBLE
11758: LD_INT 1
11760: DEC
11761: ST_TO_ADDR
11762: LD_EXP 55
11766: PUSH
11767: FOR_TO
11768: IFFALSE 11923
// if Position_Sides [ i ] then
11770: LD_EXP 23
11774: PUSH
11775: LD_VAR 0 2
11779: ARRAY
11780: IFFALSE 11921
// for j := 1 to 8 do
11782: LD_ADDR_VAR 0 3
11786: PUSH
11787: DOUBLE
11788: LD_INT 1
11790: DEC
11791: ST_TO_ADDR
11792: LD_INT 8
11794: PUSH
11795: FOR_TO
11796: IFFALSE 11919
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
11798: LD_EXP 20
11802: PUSH
11803: LD_VAR 0 3
11807: ARRAY
11808: PUSH
11809: LD_EXP 17
11813: PUSH
11814: LD_EXP 23
11818: PUSH
11819: LD_VAR 0 2
11823: ARRAY
11824: ARRAY
11825: PUSH
11826: LD_EXP 17
11830: PUSH
11831: LD_VAR 0 3
11835: ARRAY
11836: NONEQUAL
11837: PUSH
11838: LD_EXP 22
11842: NOT
11843: PUSH
11844: LD_EXP 23
11848: PUSH
11849: LD_VAR 0 2
11853: ARRAY
11854: PUSH
11855: LD_VAR 0 3
11859: NONEQUAL
11860: AND
11861: OR
11862: AND
11863: IFFALSE 11887
// ShowArea ( j , BuildUpAreas [ i ] ) else
11865: LD_VAR 0 3
11869: PPUSH
11870: LD_EXP 55
11874: PUSH
11875: LD_VAR 0 2
11879: ARRAY
11880: PPUSH
11881: CALL_OW 334
11885: GO 11917
// if ( j = your_side ) then
11887: LD_VAR 0 3
11891: PUSH
11892: LD_OWVAR 2
11896: EQUAL
11897: IFFALSE 11917
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
11899: LD_EXP 55
11903: PUSH
11904: LD_VAR 0 2
11908: ARRAY
11909: PPUSH
11910: LD_INT 0
11912: PPUSH
11913: CALL_OW 424
11917: GO 11795
11919: POP
11920: POP
11921: GO 11767
11923: POP
11924: POP
// end ;
11925: LD_VAR 0 1
11929: RET
// every 1 marked 600 do var i , un ;
11930: GO 11932
11932: DISABLE
11933: LD_INT 0
11935: PPUSH
11936: PPUSH
// begin for i := 1 to BuildUpAreas do
11937: LD_ADDR_VAR 0 1
11941: PUSH
11942: DOUBLE
11943: LD_INT 1
11945: DEC
11946: ST_TO_ADDR
11947: LD_EXP 55
11951: PUSH
11952: FOR_TO
11953: IFFALSE 12123
// if Position_Sides [ i ] then
11955: LD_EXP 23
11959: PUSH
11960: LD_VAR 0 1
11964: ARRAY
11965: IFFALSE 12121
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_not , [ f_side , 0 ] ] ] ) do
11967: LD_ADDR_VAR 0 2
11971: PUSH
11972: LD_EXP 55
11976: PUSH
11977: LD_VAR 0 1
11981: ARRAY
11982: PPUSH
11983: LD_INT 2
11985: PUSH
11986: LD_INT 21
11988: PUSH
11989: LD_INT 1
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: PUSH
11996: LD_INT 21
11998: PUSH
11999: LD_INT 2
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: LIST
12010: PUSH
12011: LD_INT 3
12013: PUSH
12014: LD_INT 22
12016: PUSH
12017: LD_INT 0
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: PPUSH
12032: CALL_OW 70
12036: PUSH
12037: FOR_IN
12038: IFFALSE 12119
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ GetSide ( un ) ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> GetSide ( un ) ) ) then
12040: LD_EXP 17
12044: PUSH
12045: LD_EXP 23
12049: PUSH
12050: LD_VAR 0 1
12054: ARRAY
12055: ARRAY
12056: PUSH
12057: LD_EXP 17
12061: PUSH
12062: LD_VAR 0 2
12066: PPUSH
12067: CALL_OW 255
12071: ARRAY
12072: NONEQUAL
12073: PUSH
12074: LD_EXP 22
12078: NOT
12079: PUSH
12080: LD_EXP 23
12084: PUSH
12085: LD_VAR 0 1
12089: ARRAY
12090: PUSH
12091: LD_VAR 0 2
12095: PPUSH
12096: CALL_OW 255
12100: NONEQUAL
12101: AND
12102: OR
12103: IFFALSE 12117
// ComMoveToArea ( un , BuildUpEscape ) ;
12105: LD_VAR 0 2
12109: PPUSH
12110: LD_INT 12
12112: PPUSH
12113: CALL_OW 113
12117: GO 12037
12119: POP
12120: POP
12121: GO 11952
12123: POP
12124: POP
// if BuildUp then
12125: LD_EXP 56
12129: IFFALSE 12132
// enable ;
12131: ENABLE
// end ;
12132: PPOPN 2
12134: END
// every 1 do
12135: GO 12137
12137: DISABLE
// if ( def_builduptime > 0 ) then
12138: LD_EXP 51
12142: PUSH
12143: LD_INT 0
12145: GREATER
12146: IFFALSE 12167
// begin if buildUpTime_Delay then
12148: LD_EXP 16
12152: IFFALSE 12163
// wait ( buildUpTime_Delay ) ;
12154: LD_EXP 16
12158: PPUSH
12159: CALL_OW 67
// EndBuildUp ;
12163: CALL 11736 0 0
// end ; end_of_file
12167: END
// export function SetMpTechs ( ) ; var side , i ; begin
12168: LD_INT 0
12170: PPUSH
12171: PPUSH
12172: PPUSH
// for side = 1 to 8 do
12173: LD_ADDR_VAR 0 2
12177: PUSH
12178: DOUBLE
12179: LD_INT 1
12181: DEC
12182: ST_TO_ADDR
12183: LD_INT 8
12185: PUSH
12186: FOR_TO
12187: IFFALSE 12308
// begin for i = 1 to 72 do
12189: LD_ADDR_VAR 0 3
12193: PUSH
12194: DOUBLE
12195: LD_INT 1
12197: DEC
12198: ST_TO_ADDR
12199: LD_INT 72
12201: PUSH
12202: FOR_TO
12203: IFFALSE 12234
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
12205: LD_VAR 0 3
12209: PPUSH
12210: LD_VAR 0 2
12214: PPUSH
12215: LD_INT 0
12217: PPUSH
12218: LD_VAR 0 3
12222: PPUSH
12223: CALL_OW 565
12227: PPUSH
12228: CALL_OW 322
12232: GO 12202
12234: POP
12235: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
12236: LD_INT 73
12238: PPUSH
12239: LD_VAR 0 2
12243: PPUSH
12244: LD_INT 0
12246: PPUSH
12247: LD_INT 25
12249: PPUSH
12250: CALL_OW 565
12254: PPUSH
12255: CALL_OW 322
// for i = 0 to 40 do
12259: LD_ADDR_VAR 0 3
12263: PUSH
12264: DOUBLE
12265: LD_INT 0
12267: DEC
12268: ST_TO_ADDR
12269: LD_INT 40
12271: PUSH
12272: FOR_TO
12273: IFFALSE 12304
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
12275: LD_VAR 0 3
12279: PPUSH
12280: LD_VAR 0 2
12284: PPUSH
12285: LD_INT 1
12287: PPUSH
12288: LD_VAR 0 3
12292: PPUSH
12293: CALL_OW 565
12297: PPUSH
12298: CALL_OW 324
12302: GO 12272
12304: POP
12305: POP
// end ;
12306: GO 12186
12308: POP
12309: POP
// end ;
12310: LD_VAR 0 1
12314: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
12315: LD_INT 0
12317: PPUSH
12318: PPUSH
12319: PPUSH
// for side = 1 to 8 do
12320: LD_ADDR_VAR 0 3
12324: PUSH
12325: DOUBLE
12326: LD_INT 1
12328: DEC
12329: ST_TO_ADDR
12330: LD_INT 8
12332: PUSH
12333: FOR_TO
12334: IFFALSE 16330
// begin for i = 1 to 73 do
12336: LD_ADDR_VAR 0 4
12340: PUSH
12341: DOUBLE
12342: LD_INT 1
12344: DEC
12345: ST_TO_ADDR
12346: LD_INT 73
12348: PUSH
12349: FOR_TO
12350: IFFALSE 12371
// SetTech ( i , side , state_disabled ) ;
12352: LD_VAR 0 4
12356: PPUSH
12357: LD_VAR 0 3
12361: PPUSH
12362: LD_INT 0
12364: PPUSH
12365: CALL_OW 322
12369: GO 12349
12371: POP
12372: POP
// for i = 0 to 40 do
12373: LD_ADDR_VAR 0 4
12377: PUSH
12378: DOUBLE
12379: LD_INT 0
12381: DEC
12382: ST_TO_ADDR
12383: LD_INT 40
12385: PUSH
12386: FOR_TO
12387: IFFALSE 12408
// SetRestrict ( i , side , false ) ;
12389: LD_VAR 0 4
12393: PPUSH
12394: LD_VAR 0 3
12398: PPUSH
12399: LD_INT 0
12401: PPUSH
12402: CALL_OW 324
12406: GO 12386
12408: POP
12409: POP
// case level of 1 :
12410: LD_VAR 0 1
12414: PUSH
12415: LD_INT 1
12417: DOUBLE
12418: EQUAL
12419: IFTRUE 12423
12421: GO 12576
12423: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12424: LD_INT 35
12426: PPUSH
12427: LD_VAR 0 3
12431: PPUSH
12432: LD_INT 1
12434: PPUSH
12435: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12439: LD_INT 45
12441: PPUSH
12442: LD_VAR 0 3
12446: PPUSH
12447: LD_INT 1
12449: PPUSH
12450: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12454: LD_INT 46
12456: PPUSH
12457: LD_VAR 0 3
12461: PPUSH
12462: LD_INT 1
12464: PPUSH
12465: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12469: LD_INT 47
12471: PPUSH
12472: LD_VAR 0 3
12476: PPUSH
12477: LD_INT 1
12479: PPUSH
12480: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12484: LD_INT 0
12486: PPUSH
12487: LD_VAR 0 3
12491: PPUSH
12492: LD_INT 1
12494: PPUSH
12495: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12499: LD_INT 2
12501: PPUSH
12502: LD_VAR 0 3
12506: PPUSH
12507: LD_INT 1
12509: PPUSH
12510: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12514: LD_INT 4
12516: PPUSH
12517: LD_VAR 0 3
12521: PPUSH
12522: LD_INT 1
12524: PPUSH
12525: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12529: LD_INT 6
12531: PPUSH
12532: LD_VAR 0 3
12536: PPUSH
12537: LD_INT 1
12539: PPUSH
12540: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12544: LD_INT 29
12546: PPUSH
12547: LD_VAR 0 3
12551: PPUSH
12552: LD_INT 1
12554: PPUSH
12555: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12559: LD_INT 31
12561: PPUSH
12562: LD_VAR 0 3
12566: PPUSH
12567: LD_INT 1
12569: PPUSH
12570: CALL_OW 324
// end ; 2 :
12574: GO 16328
12576: LD_INT 2
12578: DOUBLE
12579: EQUAL
12580: IFTRUE 12584
12582: GO 12782
12584: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12585: LD_INT 35
12587: PPUSH
12588: LD_VAR 0 3
12592: PPUSH
12593: LD_INT 1
12595: PPUSH
12596: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12600: LD_INT 45
12602: PPUSH
12603: LD_VAR 0 3
12607: PPUSH
12608: LD_INT 1
12610: PPUSH
12611: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12615: LD_INT 46
12617: PPUSH
12618: LD_VAR 0 3
12622: PPUSH
12623: LD_INT 1
12625: PPUSH
12626: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12630: LD_INT 47
12632: PPUSH
12633: LD_VAR 0 3
12637: PPUSH
12638: LD_INT 1
12640: PPUSH
12641: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12645: LD_INT 1
12647: PPUSH
12648: LD_VAR 0 3
12652: PPUSH
12653: LD_INT 1
12655: PPUSH
12656: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12660: LD_INT 2
12662: PPUSH
12663: LD_VAR 0 3
12667: PPUSH
12668: LD_INT 1
12670: PPUSH
12671: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12675: LD_INT 11
12677: PPUSH
12678: LD_VAR 0 3
12682: PPUSH
12683: LD_INT 1
12685: PPUSH
12686: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12690: LD_INT 0
12692: PPUSH
12693: LD_VAR 0 3
12697: PPUSH
12698: LD_INT 1
12700: PPUSH
12701: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12705: LD_INT 2
12707: PPUSH
12708: LD_VAR 0 3
12712: PPUSH
12713: LD_INT 1
12715: PPUSH
12716: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12720: LD_INT 4
12722: PPUSH
12723: LD_VAR 0 3
12727: PPUSH
12728: LD_INT 1
12730: PPUSH
12731: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12735: LD_INT 6
12737: PPUSH
12738: LD_VAR 0 3
12742: PPUSH
12743: LD_INT 1
12745: PPUSH
12746: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12750: LD_INT 29
12752: PPUSH
12753: LD_VAR 0 3
12757: PPUSH
12758: LD_INT 1
12760: PPUSH
12761: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12765: LD_INT 31
12767: PPUSH
12768: LD_VAR 0 3
12772: PPUSH
12773: LD_INT 1
12775: PPUSH
12776: CALL_OW 324
// end ; 3 :
12780: GO 16328
12782: LD_INT 3
12784: DOUBLE
12785: EQUAL
12786: IFTRUE 12790
12788: GO 13243
12790: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12791: LD_INT 35
12793: PPUSH
12794: LD_VAR 0 3
12798: PPUSH
12799: LD_INT 1
12801: PPUSH
12802: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12806: LD_INT 45
12808: PPUSH
12809: LD_VAR 0 3
12813: PPUSH
12814: LD_INT 1
12816: PPUSH
12817: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12821: LD_INT 46
12823: PPUSH
12824: LD_VAR 0 3
12828: PPUSH
12829: LD_INT 1
12831: PPUSH
12832: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12836: LD_INT 47
12838: PPUSH
12839: LD_VAR 0 3
12843: PPUSH
12844: LD_INT 1
12846: PPUSH
12847: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12851: LD_INT 1
12853: PPUSH
12854: LD_VAR 0 3
12858: PPUSH
12859: LD_INT 1
12861: PPUSH
12862: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12866: LD_INT 2
12868: PPUSH
12869: LD_VAR 0 3
12873: PPUSH
12874: LD_INT 1
12876: PPUSH
12877: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12881: LD_INT 11
12883: PPUSH
12884: LD_VAR 0 3
12888: PPUSH
12889: LD_INT 1
12891: PPUSH
12892: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12896: LD_INT 48
12898: PPUSH
12899: LD_VAR 0 3
12903: PPUSH
12904: LD_INT 1
12906: PPUSH
12907: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12911: LD_INT 69
12913: PPUSH
12914: LD_VAR 0 3
12918: PPUSH
12919: LD_INT 1
12921: PPUSH
12922: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12926: LD_INT 39
12928: PPUSH
12929: LD_VAR 0 3
12933: PPUSH
12934: LD_INT 1
12936: PPUSH
12937: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12941: LD_INT 43
12943: PPUSH
12944: LD_VAR 0 3
12948: PPUSH
12949: LD_INT 1
12951: PPUSH
12952: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12956: LD_INT 51
12958: PPUSH
12959: LD_VAR 0 3
12963: PPUSH
12964: LD_INT 1
12966: PPUSH
12967: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12971: LD_INT 6
12973: PPUSH
12974: LD_VAR 0 3
12978: PPUSH
12979: LD_INT 1
12981: PPUSH
12982: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12986: LD_INT 0
12988: PPUSH
12989: LD_VAR 0 3
12993: PPUSH
12994: LD_INT 1
12996: PPUSH
12997: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13001: LD_INT 2
13003: PPUSH
13004: LD_VAR 0 3
13008: PPUSH
13009: LD_INT 1
13011: PPUSH
13012: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
13016: LD_INT 3
13018: PPUSH
13019: LD_VAR 0 3
13023: PPUSH
13024: LD_INT 1
13026: PPUSH
13027: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13031: LD_INT 4
13033: PPUSH
13034: LD_VAR 0 3
13038: PPUSH
13039: LD_INT 1
13041: PPUSH
13042: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13046: LD_INT 6
13048: PPUSH
13049: LD_VAR 0 3
13053: PPUSH
13054: LD_INT 1
13056: PPUSH
13057: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13061: LD_INT 7
13063: PPUSH
13064: LD_VAR 0 3
13068: PPUSH
13069: LD_INT 1
13071: PPUSH
13072: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13076: LD_INT 8
13078: PPUSH
13079: LD_VAR 0 3
13083: PPUSH
13084: LD_INT 1
13086: PPUSH
13087: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13091: LD_INT 10
13093: PPUSH
13094: LD_VAR 0 3
13098: PPUSH
13099: LD_INT 1
13101: PPUSH
13102: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13106: LD_INT 15
13108: PPUSH
13109: LD_VAR 0 3
13113: PPUSH
13114: LD_INT 1
13116: PPUSH
13117: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13121: LD_INT 16
13123: PPUSH
13124: LD_VAR 0 3
13128: PPUSH
13129: LD_INT 1
13131: PPUSH
13132: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13136: LD_INT 17
13138: PPUSH
13139: LD_VAR 0 3
13143: PPUSH
13144: LD_INT 1
13146: PPUSH
13147: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13151: LD_INT 20
13153: PPUSH
13154: LD_VAR 0 3
13158: PPUSH
13159: LD_INT 1
13161: PPUSH
13162: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13166: LD_INT 26
13168: PPUSH
13169: LD_VAR 0 3
13173: PPUSH
13174: LD_INT 1
13176: PPUSH
13177: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13181: LD_INT 27
13183: PPUSH
13184: LD_VAR 0 3
13188: PPUSH
13189: LD_INT 1
13191: PPUSH
13192: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13196: LD_INT 29
13198: PPUSH
13199: LD_VAR 0 3
13203: PPUSH
13204: LD_INT 1
13206: PPUSH
13207: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13211: LD_INT 31
13213: PPUSH
13214: LD_VAR 0 3
13218: PPUSH
13219: LD_INT 1
13221: PPUSH
13222: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13226: LD_INT 32
13228: PPUSH
13229: LD_VAR 0 3
13233: PPUSH
13234: LD_INT 1
13236: PPUSH
13237: CALL_OW 324
// end ; 4 :
13241: GO 16328
13243: LD_INT 4
13245: DOUBLE
13246: EQUAL
13247: IFTRUE 13251
13249: GO 14199
13251: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13252: LD_INT 35
13254: PPUSH
13255: LD_VAR 0 3
13259: PPUSH
13260: LD_INT 1
13262: PPUSH
13263: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13267: LD_INT 45
13269: PPUSH
13270: LD_VAR 0 3
13274: PPUSH
13275: LD_INT 1
13277: PPUSH
13278: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13282: LD_INT 46
13284: PPUSH
13285: LD_VAR 0 3
13289: PPUSH
13290: LD_INT 1
13292: PPUSH
13293: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13297: LD_INT 47
13299: PPUSH
13300: LD_VAR 0 3
13304: PPUSH
13305: LD_INT 1
13307: PPUSH
13308: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13312: LD_INT 1
13314: PPUSH
13315: LD_VAR 0 3
13319: PPUSH
13320: LD_INT 1
13322: PPUSH
13323: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13327: LD_INT 2
13329: PPUSH
13330: LD_VAR 0 3
13334: PPUSH
13335: LD_INT 1
13337: PPUSH
13338: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13342: LD_INT 11
13344: PPUSH
13345: LD_VAR 0 3
13349: PPUSH
13350: LD_INT 1
13352: PPUSH
13353: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13357: LD_INT 20
13359: PPUSH
13360: LD_VAR 0 3
13364: PPUSH
13365: LD_INT 1
13367: PPUSH
13368: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13372: LD_INT 48
13374: PPUSH
13375: LD_VAR 0 3
13379: PPUSH
13380: LD_INT 1
13382: PPUSH
13383: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13387: LD_INT 49
13389: PPUSH
13390: LD_VAR 0 3
13394: PPUSH
13395: LD_INT 1
13397: PPUSH
13398: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13402: LD_INT 69
13404: PPUSH
13405: LD_VAR 0 3
13409: PPUSH
13410: LD_INT 1
13412: PPUSH
13413: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13417: LD_INT 39
13419: PPUSH
13420: LD_VAR 0 3
13424: PPUSH
13425: LD_INT 1
13427: PPUSH
13428: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13432: LD_INT 34
13434: PPUSH
13435: LD_VAR 0 3
13439: PPUSH
13440: LD_INT 1
13442: PPUSH
13443: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13447: LD_INT 42
13449: PPUSH
13450: LD_VAR 0 3
13454: PPUSH
13455: LD_INT 1
13457: PPUSH
13458: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13462: LD_INT 44
13464: PPUSH
13465: LD_VAR 0 3
13469: PPUSH
13470: LD_INT 1
13472: PPUSH
13473: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13477: LD_INT 41
13479: PPUSH
13480: LD_VAR 0 3
13484: PPUSH
13485: LD_INT 1
13487: PPUSH
13488: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13492: LD_INT 43
13494: PPUSH
13495: LD_VAR 0 3
13499: PPUSH
13500: LD_INT 1
13502: PPUSH
13503: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13507: LD_INT 70
13509: PPUSH
13510: LD_VAR 0 3
13514: PPUSH
13515: LD_INT 1
13517: PPUSH
13518: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13522: LD_INT 51
13524: PPUSH
13525: LD_VAR 0 3
13529: PPUSH
13530: LD_INT 1
13532: PPUSH
13533: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13537: LD_INT 52
13539: PPUSH
13540: LD_VAR 0 3
13544: PPUSH
13545: LD_INT 1
13547: PPUSH
13548: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13552: LD_INT 6
13554: PPUSH
13555: LD_VAR 0 3
13559: PPUSH
13560: LD_INT 1
13562: PPUSH
13563: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13567: LD_INT 15
13569: PPUSH
13570: LD_VAR 0 3
13574: PPUSH
13575: LD_INT 1
13577: PPUSH
13578: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13582: LD_INT 7
13584: PPUSH
13585: LD_VAR 0 3
13589: PPUSH
13590: LD_INT 1
13592: PPUSH
13593: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13597: LD_INT 12
13599: PPUSH
13600: LD_VAR 0 3
13604: PPUSH
13605: LD_INT 1
13607: PPUSH
13608: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13612: LD_INT 18
13614: PPUSH
13615: LD_VAR 0 3
13619: PPUSH
13620: LD_INT 1
13622: PPUSH
13623: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13627: LD_INT 60
13629: PPUSH
13630: LD_VAR 0 3
13634: PPUSH
13635: LD_INT 1
13637: PPUSH
13638: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13642: LD_INT 9
13644: PPUSH
13645: LD_VAR 0 3
13649: PPUSH
13650: LD_INT 1
13652: PPUSH
13653: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13657: LD_INT 30
13659: PPUSH
13660: LD_VAR 0 3
13664: PPUSH
13665: LD_INT 1
13667: PPUSH
13668: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13672: LD_INT 37
13674: PPUSH
13675: LD_VAR 0 3
13679: PPUSH
13680: LD_INT 1
13682: PPUSH
13683: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13687: LD_INT 5
13689: PPUSH
13690: LD_VAR 0 3
13694: PPUSH
13695: LD_INT 1
13697: PPUSH
13698: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13702: LD_INT 66
13704: PPUSH
13705: LD_VAR 0 3
13709: PPUSH
13710: LD_INT 1
13712: PPUSH
13713: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13717: LD_INT 21
13719: PPUSH
13720: LD_VAR 0 3
13724: PPUSH
13725: LD_INT 1
13727: PPUSH
13728: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13732: LD_INT 22
13734: PPUSH
13735: LD_VAR 0 3
13739: PPUSH
13740: LD_INT 1
13742: PPUSH
13743: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13747: LD_INT 54
13749: PPUSH
13750: LD_VAR 0 3
13754: PPUSH
13755: LD_INT 1
13757: PPUSH
13758: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13762: LD_INT 0
13764: PPUSH
13765: LD_VAR 0 3
13769: PPUSH
13770: LD_INT 1
13772: PPUSH
13773: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
13777: LD_INT 1
13779: PPUSH
13780: LD_VAR 0 3
13784: PPUSH
13785: LD_INT 1
13787: PPUSH
13788: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13792: LD_INT 2
13794: PPUSH
13795: LD_VAR 0 3
13799: PPUSH
13800: LD_INT 1
13802: PPUSH
13803: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
13807: LD_INT 3
13809: PPUSH
13810: LD_VAR 0 3
13814: PPUSH
13815: LD_INT 1
13817: PPUSH
13818: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13822: LD_INT 4
13824: PPUSH
13825: LD_VAR 0 3
13829: PPUSH
13830: LD_INT 1
13832: PPUSH
13833: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
13837: LD_INT 5
13839: PPUSH
13840: LD_VAR 0 3
13844: PPUSH
13845: LD_INT 1
13847: PPUSH
13848: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13852: LD_INT 6
13854: PPUSH
13855: LD_VAR 0 3
13859: PPUSH
13860: LD_INT 1
13862: PPUSH
13863: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13867: LD_INT 7
13869: PPUSH
13870: LD_VAR 0 3
13874: PPUSH
13875: LD_INT 1
13877: PPUSH
13878: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13882: LD_INT 8
13884: PPUSH
13885: LD_VAR 0 3
13889: PPUSH
13890: LD_INT 1
13892: PPUSH
13893: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13897: LD_INT 10
13899: PPUSH
13900: LD_VAR 0 3
13904: PPUSH
13905: LD_INT 1
13907: PPUSH
13908: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
13912: LD_INT 11
13914: PPUSH
13915: LD_VAR 0 3
13919: PPUSH
13920: LD_INT 1
13922: PPUSH
13923: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
13927: LD_INT 12
13929: PPUSH
13930: LD_VAR 0 3
13934: PPUSH
13935: LD_INT 1
13937: PPUSH
13938: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
13942: LD_INT 13
13944: PPUSH
13945: LD_VAR 0 3
13949: PPUSH
13950: LD_INT 1
13952: PPUSH
13953: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
13957: LD_INT 14
13959: PPUSH
13960: LD_VAR 0 3
13964: PPUSH
13965: LD_INT 1
13967: PPUSH
13968: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13972: LD_INT 15
13974: PPUSH
13975: LD_VAR 0 3
13979: PPUSH
13980: LD_INT 1
13982: PPUSH
13983: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13987: LD_INT 16
13989: PPUSH
13990: LD_VAR 0 3
13994: PPUSH
13995: LD_INT 1
13997: PPUSH
13998: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
14002: LD_INT 17
14004: PPUSH
14005: LD_VAR 0 3
14009: PPUSH
14010: LD_INT 1
14012: PPUSH
14013: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
14017: LD_INT 19
14019: PPUSH
14020: LD_VAR 0 3
14024: PPUSH
14025: LD_INT 1
14027: PPUSH
14028: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
14032: LD_INT 20
14034: PPUSH
14035: LD_VAR 0 3
14039: PPUSH
14040: LD_INT 1
14042: PPUSH
14043: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
14047: LD_INT 21
14049: PPUSH
14050: LD_VAR 0 3
14054: PPUSH
14055: LD_INT 1
14057: PPUSH
14058: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
14062: LD_INT 23
14064: PPUSH
14065: LD_VAR 0 3
14069: PPUSH
14070: LD_INT 1
14072: PPUSH
14073: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
14077: LD_INT 26
14079: PPUSH
14080: LD_VAR 0 3
14084: PPUSH
14085: LD_INT 1
14087: PPUSH
14088: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
14092: LD_INT 27
14094: PPUSH
14095: LD_VAR 0 3
14099: PPUSH
14100: LD_INT 1
14102: PPUSH
14103: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
14107: LD_INT 28
14109: PPUSH
14110: LD_VAR 0 3
14114: PPUSH
14115: LD_INT 1
14117: PPUSH
14118: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14122: LD_INT 29
14124: PPUSH
14125: LD_VAR 0 3
14129: PPUSH
14130: LD_INT 1
14132: PPUSH
14133: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
14137: LD_INT 30
14139: PPUSH
14140: LD_VAR 0 3
14144: PPUSH
14145: LD_INT 1
14147: PPUSH
14148: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14152: LD_INT 31
14154: PPUSH
14155: LD_VAR 0 3
14159: PPUSH
14160: LD_INT 1
14162: PPUSH
14163: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
14167: LD_INT 32
14169: PPUSH
14170: LD_VAR 0 3
14174: PPUSH
14175: LD_INT 1
14177: PPUSH
14178: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
14182: LD_INT 36
14184: PPUSH
14185: LD_VAR 0 3
14189: PPUSH
14190: LD_INT 1
14192: PPUSH
14193: CALL_OW 324
// end ; 5 :
14197: GO 16328
14199: LD_INT 5
14201: DOUBLE
14202: EQUAL
14203: IFTRUE 14207
14205: GO 15320
14207: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14208: LD_INT 35
14210: PPUSH
14211: LD_VAR 0 3
14215: PPUSH
14216: LD_INT 1
14218: PPUSH
14219: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14223: LD_INT 45
14225: PPUSH
14226: LD_VAR 0 3
14230: PPUSH
14231: LD_INT 1
14233: PPUSH
14234: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14238: LD_INT 46
14240: PPUSH
14241: LD_VAR 0 3
14245: PPUSH
14246: LD_INT 1
14248: PPUSH
14249: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14253: LD_INT 47
14255: PPUSH
14256: LD_VAR 0 3
14260: PPUSH
14261: LD_INT 1
14263: PPUSH
14264: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14268: LD_INT 1
14270: PPUSH
14271: LD_VAR 0 3
14275: PPUSH
14276: LD_INT 1
14278: PPUSH
14279: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14283: LD_INT 2
14285: PPUSH
14286: LD_VAR 0 3
14290: PPUSH
14291: LD_INT 1
14293: PPUSH
14294: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14298: LD_INT 11
14300: PPUSH
14301: LD_VAR 0 3
14305: PPUSH
14306: LD_INT 1
14308: PPUSH
14309: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
14313: LD_INT 20
14315: PPUSH
14316: LD_VAR 0 3
14320: PPUSH
14321: LD_INT 1
14323: PPUSH
14324: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14328: LD_INT 48
14330: PPUSH
14331: LD_VAR 0 3
14335: PPUSH
14336: LD_INT 1
14338: PPUSH
14339: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
14343: LD_INT 49
14345: PPUSH
14346: LD_VAR 0 3
14350: PPUSH
14351: LD_INT 1
14353: PPUSH
14354: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14358: LD_INT 69
14360: PPUSH
14361: LD_VAR 0 3
14365: PPUSH
14366: LD_INT 1
14368: PPUSH
14369: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14373: LD_INT 39
14375: PPUSH
14376: LD_VAR 0 3
14380: PPUSH
14381: LD_INT 1
14383: PPUSH
14384: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
14388: LD_INT 34
14390: PPUSH
14391: LD_VAR 0 3
14395: PPUSH
14396: LD_INT 1
14398: PPUSH
14399: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
14403: LD_INT 42
14405: PPUSH
14406: LD_VAR 0 3
14410: PPUSH
14411: LD_INT 1
14413: PPUSH
14414: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
14418: LD_INT 44
14420: PPUSH
14421: LD_VAR 0 3
14425: PPUSH
14426: LD_INT 1
14428: PPUSH
14429: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
14433: LD_INT 41
14435: PPUSH
14436: LD_VAR 0 3
14440: PPUSH
14441: LD_INT 1
14443: PPUSH
14444: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
14448: LD_INT 40
14450: PPUSH
14451: LD_VAR 0 3
14455: PPUSH
14456: LD_INT 1
14458: PPUSH
14459: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14463: LD_INT 43
14465: PPUSH
14466: LD_VAR 0 3
14470: PPUSH
14471: LD_INT 1
14473: PPUSH
14474: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
14478: LD_INT 70
14480: PPUSH
14481: LD_VAR 0 3
14485: PPUSH
14486: LD_INT 1
14488: PPUSH
14489: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14493: LD_INT 51
14495: PPUSH
14496: LD_VAR 0 3
14500: PPUSH
14501: LD_INT 1
14503: PPUSH
14504: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
14508: LD_INT 52
14510: PPUSH
14511: LD_VAR 0 3
14515: PPUSH
14516: LD_INT 1
14518: PPUSH
14519: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14523: LD_INT 6
14525: PPUSH
14526: LD_VAR 0 3
14530: PPUSH
14531: LD_INT 1
14533: PPUSH
14534: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
14538: LD_INT 15
14540: PPUSH
14541: LD_VAR 0 3
14545: PPUSH
14546: LD_INT 1
14548: PPUSH
14549: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
14553: LD_INT 7
14555: PPUSH
14556: LD_VAR 0 3
14560: PPUSH
14561: LD_INT 1
14563: PPUSH
14564: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
14568: LD_INT 12
14570: PPUSH
14571: LD_VAR 0 3
14575: PPUSH
14576: LD_INT 1
14578: PPUSH
14579: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
14583: LD_INT 17
14585: PPUSH
14586: LD_VAR 0 3
14590: PPUSH
14591: LD_INT 1
14593: PPUSH
14594: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
14598: LD_INT 18
14600: PPUSH
14601: LD_VAR 0 3
14605: PPUSH
14606: LD_INT 1
14608: PPUSH
14609: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
14613: LD_INT 60
14615: PPUSH
14616: LD_VAR 0 3
14620: PPUSH
14621: LD_INT 1
14623: PPUSH
14624: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
14628: LD_INT 32
14630: PPUSH
14631: LD_VAR 0 3
14635: PPUSH
14636: LD_INT 1
14638: PPUSH
14639: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
14643: LD_INT 9
14645: PPUSH
14646: LD_VAR 0 3
14650: PPUSH
14651: LD_INT 1
14653: PPUSH
14654: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
14658: LD_INT 57
14660: PPUSH
14661: LD_VAR 0 3
14665: PPUSH
14666: LD_INT 1
14668: PPUSH
14669: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
14673: LD_INT 30
14675: PPUSH
14676: LD_VAR 0 3
14680: PPUSH
14681: LD_INT 1
14683: PPUSH
14684: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
14688: LD_INT 37
14690: PPUSH
14691: LD_VAR 0 3
14695: PPUSH
14696: LD_INT 1
14698: PPUSH
14699: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
14703: LD_INT 63
14705: PPUSH
14706: LD_VAR 0 3
14710: PPUSH
14711: LD_INT 1
14713: PPUSH
14714: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
14718: LD_INT 3
14720: PPUSH
14721: LD_VAR 0 3
14725: PPUSH
14726: LD_INT 1
14728: PPUSH
14729: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
14733: LD_INT 4
14735: PPUSH
14736: LD_VAR 0 3
14740: PPUSH
14741: LD_INT 1
14743: PPUSH
14744: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14748: LD_INT 5
14750: PPUSH
14751: LD_VAR 0 3
14755: PPUSH
14756: LD_INT 1
14758: PPUSH
14759: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14763: LD_INT 66
14765: PPUSH
14766: LD_VAR 0 3
14770: PPUSH
14771: LD_INT 1
14773: PPUSH
14774: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14778: LD_INT 21
14780: PPUSH
14781: LD_VAR 0 3
14785: PPUSH
14786: LD_INT 1
14788: PPUSH
14789: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14793: LD_INT 22
14795: PPUSH
14796: LD_VAR 0 3
14800: PPUSH
14801: LD_INT 1
14803: PPUSH
14804: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
14808: LD_INT 19
14810: PPUSH
14811: LD_VAR 0 3
14815: PPUSH
14816: LD_INT 1
14818: PPUSH
14819: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
14823: LD_INT 54
14825: PPUSH
14826: LD_VAR 0 3
14830: PPUSH
14831: LD_INT 1
14833: PPUSH
14834: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
14838: LD_INT 55
14840: PPUSH
14841: LD_VAR 0 3
14845: PPUSH
14846: LD_INT 1
14848: PPUSH
14849: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14853: LD_INT 0
14855: PPUSH
14856: LD_VAR 0 3
14860: PPUSH
14861: LD_INT 1
14863: PPUSH
14864: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
14868: LD_INT 1
14870: PPUSH
14871: LD_VAR 0 3
14875: PPUSH
14876: LD_INT 1
14878: PPUSH
14879: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14883: LD_INT 2
14885: PPUSH
14886: LD_VAR 0 3
14890: PPUSH
14891: LD_INT 1
14893: PPUSH
14894: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
14898: LD_INT 3
14900: PPUSH
14901: LD_VAR 0 3
14905: PPUSH
14906: LD_INT 1
14908: PPUSH
14909: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14913: LD_INT 4
14915: PPUSH
14916: LD_VAR 0 3
14920: PPUSH
14921: LD_INT 1
14923: PPUSH
14924: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
14928: LD_INT 5
14930: PPUSH
14931: LD_VAR 0 3
14935: PPUSH
14936: LD_INT 1
14938: PPUSH
14939: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14943: LD_INT 6
14945: PPUSH
14946: LD_VAR 0 3
14950: PPUSH
14951: LD_INT 1
14953: PPUSH
14954: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
14958: LD_INT 7
14960: PPUSH
14961: LD_VAR 0 3
14965: PPUSH
14966: LD_INT 1
14968: PPUSH
14969: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
14973: LD_INT 8
14975: PPUSH
14976: LD_VAR 0 3
14980: PPUSH
14981: LD_INT 1
14983: PPUSH
14984: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
14988: LD_INT 10
14990: PPUSH
14991: LD_VAR 0 3
14995: PPUSH
14996: LD_INT 1
14998: PPUSH
14999: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
15003: LD_INT 11
15005: PPUSH
15006: LD_VAR 0 3
15010: PPUSH
15011: LD_INT 1
15013: PPUSH
15014: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
15018: LD_INT 12
15020: PPUSH
15021: LD_VAR 0 3
15025: PPUSH
15026: LD_INT 1
15028: PPUSH
15029: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
15033: LD_INT 13
15035: PPUSH
15036: LD_VAR 0 3
15040: PPUSH
15041: LD_INT 1
15043: PPUSH
15044: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
15048: LD_INT 14
15050: PPUSH
15051: LD_VAR 0 3
15055: PPUSH
15056: LD_INT 1
15058: PPUSH
15059: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
15063: LD_INT 15
15065: PPUSH
15066: LD_VAR 0 3
15070: PPUSH
15071: LD_INT 1
15073: PPUSH
15074: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
15078: LD_INT 16
15080: PPUSH
15081: LD_VAR 0 3
15085: PPUSH
15086: LD_INT 1
15088: PPUSH
15089: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
15093: LD_INT 17
15095: PPUSH
15096: LD_VAR 0 3
15100: PPUSH
15101: LD_INT 1
15103: PPUSH
15104: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
15108: LD_INT 18
15110: PPUSH
15111: LD_VAR 0 3
15115: PPUSH
15116: LD_INT 1
15118: PPUSH
15119: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
15123: LD_INT 19
15125: PPUSH
15126: LD_VAR 0 3
15130: PPUSH
15131: LD_INT 1
15133: PPUSH
15134: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
15138: LD_INT 20
15140: PPUSH
15141: LD_VAR 0 3
15145: PPUSH
15146: LD_INT 1
15148: PPUSH
15149: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
15153: LD_INT 21
15155: PPUSH
15156: LD_VAR 0 3
15160: PPUSH
15161: LD_INT 1
15163: PPUSH
15164: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
15168: LD_INT 23
15170: PPUSH
15171: LD_VAR 0 3
15175: PPUSH
15176: LD_INT 1
15178: PPUSH
15179: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
15183: LD_INT 26
15185: PPUSH
15186: LD_VAR 0 3
15190: PPUSH
15191: LD_INT 1
15193: PPUSH
15194: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15198: LD_INT 27
15200: PPUSH
15201: LD_VAR 0 3
15205: PPUSH
15206: LD_INT 1
15208: PPUSH
15209: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
15213: LD_INT 28
15215: PPUSH
15216: LD_VAR 0 3
15220: PPUSH
15221: LD_INT 1
15223: PPUSH
15224: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15228: LD_INT 29
15230: PPUSH
15231: LD_VAR 0 3
15235: PPUSH
15236: LD_INT 1
15238: PPUSH
15239: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
15243: LD_INT 30
15245: PPUSH
15246: LD_VAR 0 3
15250: PPUSH
15251: LD_INT 1
15253: PPUSH
15254: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15258: LD_INT 31
15260: PPUSH
15261: LD_VAR 0 3
15265: PPUSH
15266: LD_INT 1
15268: PPUSH
15269: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15273: LD_INT 32
15275: PPUSH
15276: LD_VAR 0 3
15280: PPUSH
15281: LD_INT 1
15283: PPUSH
15284: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
15288: LD_INT 33
15290: PPUSH
15291: LD_VAR 0 3
15295: PPUSH
15296: LD_INT 1
15298: PPUSH
15299: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
15303: LD_INT 36
15305: PPUSH
15306: LD_VAR 0 3
15310: PPUSH
15311: LD_INT 1
15313: PPUSH
15314: CALL_OW 324
// end ; 6 :
15318: GO 16328
15320: LD_INT 6
15322: DOUBLE
15323: EQUAL
15324: IFTRUE 15328
15326: GO 16253
15328: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15329: LD_INT 35
15331: PPUSH
15332: LD_VAR 0 3
15336: PPUSH
15337: LD_INT 1
15339: PPUSH
15340: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15344: LD_INT 45
15346: PPUSH
15347: LD_VAR 0 3
15351: PPUSH
15352: LD_INT 1
15354: PPUSH
15355: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15359: LD_INT 46
15361: PPUSH
15362: LD_VAR 0 3
15366: PPUSH
15367: LD_INT 1
15369: PPUSH
15370: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15374: LD_INT 47
15376: PPUSH
15377: LD_VAR 0 3
15381: PPUSH
15382: LD_INT 1
15384: PPUSH
15385: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15389: LD_INT 1
15391: PPUSH
15392: LD_VAR 0 3
15396: PPUSH
15397: LD_INT 1
15399: PPUSH
15400: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15404: LD_INT 2
15406: PPUSH
15407: LD_VAR 0 3
15411: PPUSH
15412: LD_INT 1
15414: PPUSH
15415: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15419: LD_INT 11
15421: PPUSH
15422: LD_VAR 0 3
15426: PPUSH
15427: LD_INT 1
15429: PPUSH
15430: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15434: LD_INT 20
15436: PPUSH
15437: LD_VAR 0 3
15441: PPUSH
15442: LD_INT 1
15444: PPUSH
15445: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15449: LD_INT 48
15451: PPUSH
15452: LD_VAR 0 3
15456: PPUSH
15457: LD_INT 1
15459: PPUSH
15460: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15464: LD_INT 49
15466: PPUSH
15467: LD_VAR 0 3
15471: PPUSH
15472: LD_INT 1
15474: PPUSH
15475: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
15479: LD_INT 50
15481: PPUSH
15482: LD_VAR 0 3
15486: PPUSH
15487: LD_INT 1
15489: PPUSH
15490: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15494: LD_INT 69
15496: PPUSH
15497: LD_VAR 0 3
15501: PPUSH
15502: LD_INT 1
15504: PPUSH
15505: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15509: LD_INT 39
15511: PPUSH
15512: LD_VAR 0 3
15516: PPUSH
15517: LD_INT 1
15519: PPUSH
15520: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15524: LD_INT 34
15526: PPUSH
15527: LD_VAR 0 3
15531: PPUSH
15532: LD_INT 1
15534: PPUSH
15535: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15539: LD_INT 42
15541: PPUSH
15542: LD_VAR 0 3
15546: PPUSH
15547: LD_INT 1
15549: PPUSH
15550: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15554: LD_INT 44
15556: PPUSH
15557: LD_VAR 0 3
15561: PPUSH
15562: LD_INT 1
15564: PPUSH
15565: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15569: LD_INT 41
15571: PPUSH
15572: LD_VAR 0 3
15576: PPUSH
15577: LD_INT 1
15579: PPUSH
15580: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
15584: LD_INT 13
15586: PPUSH
15587: LD_VAR 0 3
15591: PPUSH
15592: LD_INT 1
15594: PPUSH
15595: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
15599: LD_INT 40
15601: PPUSH
15602: LD_VAR 0 3
15606: PPUSH
15607: LD_INT 1
15609: PPUSH
15610: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15614: LD_INT 43
15616: PPUSH
15617: LD_VAR 0 3
15621: PPUSH
15622: LD_INT 1
15624: PPUSH
15625: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15629: LD_INT 70
15631: PPUSH
15632: LD_VAR 0 3
15636: PPUSH
15637: LD_INT 1
15639: PPUSH
15640: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
15644: LD_INT 23
15646: PPUSH
15647: LD_VAR 0 3
15651: PPUSH
15652: LD_INT 1
15654: PPUSH
15655: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15659: LD_INT 51
15661: PPUSH
15662: LD_VAR 0 3
15666: PPUSH
15667: LD_INT 1
15669: PPUSH
15670: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15674: LD_INT 52
15676: PPUSH
15677: LD_VAR 0 3
15681: PPUSH
15682: LD_INT 1
15684: PPUSH
15685: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15689: LD_INT 6
15691: PPUSH
15692: LD_VAR 0 3
15696: PPUSH
15697: LD_INT 1
15699: PPUSH
15700: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
15704: LD_INT 15
15706: PPUSH
15707: LD_VAR 0 3
15711: PPUSH
15712: LD_INT 1
15714: PPUSH
15715: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
15719: LD_INT 7
15721: PPUSH
15722: LD_VAR 0 3
15726: PPUSH
15727: LD_INT 1
15729: PPUSH
15730: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
15734: LD_INT 12
15736: PPUSH
15737: LD_VAR 0 3
15741: PPUSH
15742: LD_INT 1
15744: PPUSH
15745: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
15749: LD_INT 10
15751: PPUSH
15752: LD_VAR 0 3
15756: PPUSH
15757: LD_INT 1
15759: PPUSH
15760: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
15764: LD_INT 17
15766: PPUSH
15767: LD_VAR 0 3
15771: PPUSH
15772: LD_INT 1
15774: PPUSH
15775: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
15779: LD_INT 18
15781: PPUSH
15782: LD_VAR 0 3
15786: PPUSH
15787: LD_INT 1
15789: PPUSH
15790: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
15794: LD_INT 60
15796: PPUSH
15797: LD_VAR 0 3
15801: PPUSH
15802: LD_INT 1
15804: PPUSH
15805: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
15809: LD_INT 61
15811: PPUSH
15812: LD_VAR 0 3
15816: PPUSH
15817: LD_INT 1
15819: PPUSH
15820: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
15824: LD_INT 32
15826: PPUSH
15827: LD_VAR 0 3
15831: PPUSH
15832: LD_INT 1
15834: PPUSH
15835: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
15839: LD_INT 27
15841: PPUSH
15842: LD_VAR 0 3
15846: PPUSH
15847: LD_INT 1
15849: PPUSH
15850: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
15854: LD_INT 36
15856: PPUSH
15857: LD_VAR 0 3
15861: PPUSH
15862: LD_INT 1
15864: PPUSH
15865: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
15869: LD_INT 33
15871: PPUSH
15872: LD_VAR 0 3
15876: PPUSH
15877: LD_INT 1
15879: PPUSH
15880: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
15884: LD_INT 9
15886: PPUSH
15887: LD_VAR 0 3
15891: PPUSH
15892: LD_INT 1
15894: PPUSH
15895: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
15899: LD_INT 38
15901: PPUSH
15902: LD_VAR 0 3
15906: PPUSH
15907: LD_INT 1
15909: PPUSH
15910: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
15914: LD_INT 57
15916: PPUSH
15917: LD_VAR 0 3
15921: PPUSH
15922: LD_INT 1
15924: PPUSH
15925: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
15929: LD_INT 58
15931: PPUSH
15932: LD_VAR 0 3
15936: PPUSH
15937: LD_INT 1
15939: PPUSH
15940: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
15944: LD_INT 28
15946: PPUSH
15947: LD_VAR 0 3
15951: PPUSH
15952: LD_INT 1
15954: PPUSH
15955: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
15959: LD_INT 29
15961: PPUSH
15962: LD_VAR 0 3
15966: PPUSH
15967: LD_INT 1
15969: PPUSH
15970: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
15974: LD_INT 30
15976: PPUSH
15977: LD_VAR 0 3
15981: PPUSH
15982: LD_INT 1
15984: PPUSH
15985: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
15989: LD_INT 37
15991: PPUSH
15992: LD_VAR 0 3
15996: PPUSH
15997: LD_INT 1
15999: PPUSH
16000: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
16004: LD_INT 63
16006: PPUSH
16007: LD_VAR 0 3
16011: PPUSH
16012: LD_INT 1
16014: PPUSH
16015: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
16019: LD_INT 64
16021: PPUSH
16022: LD_VAR 0 3
16026: PPUSH
16027: LD_INT 1
16029: PPUSH
16030: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
16034: LD_INT 3
16036: PPUSH
16037: LD_VAR 0 3
16041: PPUSH
16042: LD_INT 1
16044: PPUSH
16045: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
16049: LD_INT 4
16051: PPUSH
16052: LD_VAR 0 3
16056: PPUSH
16057: LD_INT 1
16059: PPUSH
16060: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
16064: LD_INT 5
16066: PPUSH
16067: LD_VAR 0 3
16071: PPUSH
16072: LD_INT 1
16074: PPUSH
16075: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
16079: LD_INT 8
16081: PPUSH
16082: LD_VAR 0 3
16086: PPUSH
16087: LD_INT 1
16089: PPUSH
16090: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
16094: LD_INT 66
16096: PPUSH
16097: LD_VAR 0 3
16101: PPUSH
16102: LD_INT 1
16104: PPUSH
16105: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
16109: LD_INT 67
16111: PPUSH
16112: LD_VAR 0 3
16116: PPUSH
16117: LD_INT 1
16119: PPUSH
16120: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
16124: LD_INT 21
16126: PPUSH
16127: LD_VAR 0 3
16131: PPUSH
16132: LD_INT 1
16134: PPUSH
16135: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
16139: LD_INT 22
16141: PPUSH
16142: LD_VAR 0 3
16146: PPUSH
16147: LD_INT 1
16149: PPUSH
16150: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
16154: LD_INT 19
16156: PPUSH
16157: LD_VAR 0 3
16161: PPUSH
16162: LD_INT 1
16164: PPUSH
16165: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
16169: LD_INT 26
16171: PPUSH
16172: LD_VAR 0 3
16176: PPUSH
16177: LD_INT 1
16179: PPUSH
16180: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
16184: LD_INT 54
16186: PPUSH
16187: LD_VAR 0 3
16191: PPUSH
16192: LD_INT 1
16194: PPUSH
16195: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
16199: LD_INT 55
16201: PPUSH
16202: LD_VAR 0 3
16206: PPUSH
16207: LD_INT 1
16209: PPUSH
16210: CALL_OW 322
// for i = 0 to 39 do
16214: LD_ADDR_VAR 0 4
16218: PUSH
16219: DOUBLE
16220: LD_INT 0
16222: DEC
16223: ST_TO_ADDR
16224: LD_INT 39
16226: PUSH
16227: FOR_TO
16228: IFFALSE 16249
// SetRestrict ( i , side , true ) ;
16230: LD_VAR 0 4
16234: PPUSH
16235: LD_VAR 0 3
16239: PPUSH
16240: LD_INT 1
16242: PPUSH
16243: CALL_OW 324
16247: GO 16227
16249: POP
16250: POP
// end ; else
16251: GO 16328
16253: POP
// begin for i = 1 to 73 do
16254: LD_ADDR_VAR 0 4
16258: PUSH
16259: DOUBLE
16260: LD_INT 1
16262: DEC
16263: ST_TO_ADDR
16264: LD_INT 73
16266: PUSH
16267: FOR_TO
16268: IFFALSE 16289
// SetTech ( i , side , state_enabled ) ;
16270: LD_VAR 0 4
16274: PPUSH
16275: LD_VAR 0 3
16279: PPUSH
16280: LD_INT 1
16282: PPUSH
16283: CALL_OW 322
16287: GO 16267
16289: POP
16290: POP
// for i = 0 to 39 do
16291: LD_ADDR_VAR 0 4
16295: PUSH
16296: DOUBLE
16297: LD_INT 0
16299: DEC
16300: ST_TO_ADDR
16301: LD_INT 39
16303: PUSH
16304: FOR_TO
16305: IFFALSE 16326
// SetRestrict ( i , side , true ) ;
16307: LD_VAR 0 4
16311: PPUSH
16312: LD_VAR 0 3
16316: PPUSH
16317: LD_INT 1
16319: PPUSH
16320: CALL_OW 324
16324: GO 16304
16326: POP
16327: POP
// end ; end ; end ;
16328: GO 12333
16330: POP
16331: POP
// end ; end_of_file
16332: LD_VAR 0 2
16336: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
16337: LD_INT 0
16339: PPUSH
16340: PPUSH
// enable ( 98 ) ;
16341: LD_INT 98
16343: ENABLE_MARKED
// GameEnded = false ;
16344: LD_ADDR_LOC 29
16348: PUSH
16349: LD_INT 0
16351: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
16352: LD_ADDR_LOC 28
16356: PUSH
16357: LD_INT 0
16359: PUSH
16360: LD_INT 0
16362: PUSH
16363: LD_INT 0
16365: PUSH
16366: LD_INT 0
16368: PUSH
16369: LD_INT 0
16371: PUSH
16372: LD_INT 0
16374: PUSH
16375: LD_INT 0
16377: PUSH
16378: LD_INT 0
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: LIST
16388: LIST
16389: LIST
16390: ST_TO_ADDR
// unfoged = false ;
16391: LD_ADDR_LOC 30
16395: PUSH
16396: LD_INT 0
16398: ST_TO_ADDR
// for i = 1 to side_positions do
16399: LD_ADDR_VAR 0 2
16403: PUSH
16404: DOUBLE
16405: LD_INT 1
16407: DEC
16408: ST_TO_ADDR
16409: LD_EXP 20
16413: PUSH
16414: FOR_TO
16415: IFFALSE 16455
// if not side_positions [ i ] then
16417: LD_EXP 20
16421: PUSH
16422: LD_VAR 0 2
16426: ARRAY
16427: NOT
16428: IFFALSE 16453
// defaited = replace ( defaited , i , true ) ;
16430: LD_ADDR_LOC 28
16434: PUSH
16435: LD_LOC 28
16439: PPUSH
16440: LD_VAR 0 2
16444: PPUSH
16445: LD_INT 1
16447: PPUSH
16448: CALL_OW 1
16452: ST_TO_ADDR
16453: GO 16414
16455: POP
16456: POP
// end ;
16457: LD_VAR 0 1
16461: RET
// function CanWinLoose ; begin
16462: LD_INT 0
16464: PPUSH
// Result := true ;
16465: LD_ADDR_VAR 0 1
16469: PUSH
16470: LD_INT 1
16472: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
16473: CALL_OW 518
16477: PUSH
16478: CALL_OW 519
16482: PUSH
16483: LD_INT 0
16485: GREATER
16486: AND
16487: IFFALSE 16497
// Result := false ;
16489: LD_ADDR_VAR 0 1
16493: PUSH
16494: LD_INT 0
16496: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
16497: CALL_OW 531
16501: PUSH
16502: CALL_OW 519
16506: PUSH
16507: LD_INT 1
16509: GREATER
16510: AND
16511: IFFALSE 16521
// Result := false ;
16513: LD_ADDR_VAR 0 1
16517: PUSH
16518: LD_INT 0
16520: ST_TO_ADDR
// end ;
16521: LD_VAR 0 1
16525: RET
// export function HasPower ( i ) ; var k , h ; begin
16526: LD_INT 0
16528: PPUSH
16529: PPUSH
16530: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
16531: LD_VAR 0 1
16535: PPUSH
16536: CALL_OW 108
16540: NOT
16541: PUSH
16542: LD_EXP 19
16546: PUSH
16547: LD_VAR 0 1
16551: ARRAY
16552: NOT
16553: AND
16554: PUSH
16555: LD_OWVAR 4
16559: AND
16560: IFFALSE 16572
// begin result = false ;
16562: LD_ADDR_VAR 0 2
16566: PUSH
16567: LD_INT 0
16569: ST_TO_ADDR
// end else
16570: GO 16867
// case def_win_rules of 0 :
16572: LD_EXP 15
16576: PUSH
16577: LD_INT 0
16579: DOUBLE
16580: EQUAL
16581: IFTRUE 16585
16583: GO 16748
16585: POP
// if def_people_respawning then
16586: LD_EXP 48
16590: IFFALSE 16681
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
16592: LD_ADDR_VAR 0 2
16596: PUSH
16597: LD_INT 22
16599: PUSH
16600: LD_VAR 0 1
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: PUSH
16609: LD_INT 2
16611: PUSH
16612: LD_INT 21
16614: PUSH
16615: LD_INT 1
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: PUSH
16622: LD_INT 33
16624: PUSH
16625: LD_INT 3
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: PUSH
16632: LD_INT 33
16634: PUSH
16635: LD_INT 5
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PUSH
16642: LD_INT 30
16644: PUSH
16645: LD_INT 0
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: PUSH
16652: LD_INT 30
16654: PUSH
16655: LD_INT 1
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: LIST
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PPUSH
16674: CALL_OW 69
16678: ST_TO_ADDR
16679: GO 16746
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
16681: LD_ADDR_VAR 0 2
16685: PUSH
16686: LD_INT 22
16688: PUSH
16689: LD_VAR 0 1
16693: PUSH
16694: EMPTY
16695: LIST
16696: LIST
16697: PUSH
16698: LD_INT 2
16700: PUSH
16701: LD_INT 21
16703: PUSH
16704: LD_INT 1
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: PUSH
16711: LD_INT 33
16713: PUSH
16714: LD_INT 3
16716: PUSH
16717: EMPTY
16718: LIST
16719: LIST
16720: PUSH
16721: LD_INT 33
16723: PUSH
16724: LD_INT 5
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PUSH
16731: EMPTY
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: PPUSH
16741: CALL_OW 69
16745: ST_TO_ADDR
16746: GO 16867
16748: LD_INT 1
16750: DOUBLE
16751: EQUAL
16752: IFTRUE 16756
16754: GO 16795
16756: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
16757: LD_ADDR_VAR 0 2
16761: PUSH
16762: LD_INT 22
16764: PUSH
16765: LD_VAR 0 1
16769: PUSH
16770: EMPTY
16771: LIST
16772: LIST
16773: PUSH
16774: LD_INT 21
16776: PUSH
16777: LD_INT 1
16779: PUSH
16780: EMPTY
16781: LIST
16782: LIST
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: PPUSH
16788: CALL_OW 69
16792: ST_TO_ADDR
16793: GO 16867
16795: LD_INT 2
16797: DOUBLE
16798: EQUAL
16799: IFTRUE 16803
16801: GO 16866
16803: POP
// begin h = false ;
16804: LD_ADDR_VAR 0 4
16808: PUSH
16809: LD_INT 0
16811: ST_TO_ADDR
// for k in heroes [ i ] do
16812: LD_ADDR_VAR 0 3
16816: PUSH
16817: LD_EXP 28
16821: PUSH
16822: LD_VAR 0 1
16826: ARRAY
16827: PUSH
16828: FOR_IN
16829: IFFALSE 16852
// if IsLive ( k ) then
16831: LD_VAR 0 3
16835: PPUSH
16836: CALL_OW 300
16840: IFFALSE 16850
// h = true ;
16842: LD_ADDR_VAR 0 4
16846: PUSH
16847: LD_INT 1
16849: ST_TO_ADDR
16850: GO 16828
16852: POP
16853: POP
// Result := h ;
16854: LD_ADDR_VAR 0 2
16858: PUSH
16859: LD_VAR 0 4
16863: ST_TO_ADDR
// end ; end ;
16864: GO 16867
16866: POP
// end ;
16867: LD_VAR 0 2
16871: RET
// function AlliedSides ( i , j ) ; begin
16872: LD_INT 0
16874: PPUSH
// Result := false ;
16875: LD_ADDR_VAR 0 3
16879: PUSH
16880: LD_INT 0
16882: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
16883: LD_VAR 0 1
16887: PPUSH
16888: LD_VAR 0 2
16892: PPUSH
16893: CALL_OW 81
16897: PUSH
16898: LD_INT 1
16900: EQUAL
16901: PUSH
16902: LD_VAR 0 2
16906: PPUSH
16907: LD_VAR 0 1
16911: PPUSH
16912: CALL_OW 81
16916: PUSH
16917: LD_INT 1
16919: EQUAL
16920: AND
16921: PUSH
16922: LD_VAR 0 1
16926: PPUSH
16927: CALL_OW 83
16931: AND
16932: PUSH
16933: LD_VAR 0 2
16937: PPUSH
16938: CALL_OW 83
16942: AND
16943: IFFALSE 16953
// Result := true ;
16945: LD_ADDR_VAR 0 3
16949: PUSH
16950: LD_INT 1
16952: ST_TO_ADDR
// end ;
16953: LD_VAR 0 3
16957: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
16958: CALL 16462 0 0
16962: PUSH
16963: LD_LOC 29
16967: NOT
16968: AND
16969: IFFALSE 16985
16971: GO 16973
16973: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
16974: LD_ADDR_EXP 54
16978: PUSH
16979: LD_STRING #Player-Ended
16981: PUSH
16982: EMPTY
16983: LIST
16984: ST_TO_ADDR
16985: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
16986: CALL 16462 0 0
16990: PUSH
16991: LD_LOC 29
16995: AND
16996: IFFALSE 17005
16998: GO 17000
17000: DISABLE
// YouLostInMultiplayer ;
17001: CALL_OW 107
17005: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
17006: CALL 16462 0 0
17010: NOT
17011: PUSH
17012: CALL_OW 531
17016: NOT
17017: AND
17018: IFFALSE 17034
17020: GO 17022
17022: DISABLE
// WaitServerStrings = [ #server-wait ] ;
17023: LD_ADDR_EXP 54
17027: PUSH
17028: LD_STRING #server-wait
17030: PUSH
17031: EMPTY
17032: LIST
17033: ST_TO_ADDR
17034: END
// every 100 trigger IAmSpec do
17035: CALL_OW 531
17039: IFFALSE 17055
17041: GO 17043
17043: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
17044: LD_ADDR_EXP 54
17048: PUSH
17049: LD_STRING #Player-IAmSpec
17051: PUSH
17052: EMPTY
17053: LIST
17054: ST_TO_ADDR
17055: END
// every 100 trigger GameEnded and IAmSpec do
17056: LD_LOC 29
17060: PUSH
17061: CALL_OW 531
17065: AND
17066: IFFALSE 17075
17068: GO 17070
17070: DISABLE
// YouLostInMultiplayer ;
17071: CALL_OW 107
17075: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
17076: CALL 16462 0 0
17080: PUSH
17081: LD_LOC 29
17085: NOT
17086: AND
17087: IFFALSE 17103
17089: GO 17091
17091: DISABLE
// WaitServerStrings = [ $player-win ] ;
17092: LD_ADDR_EXP 54
17096: PUSH
17097: LD_STRING $player-win
17099: PUSH
17100: EMPTY
17101: LIST
17102: ST_TO_ADDR
17103: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
17104: CALL 16462 0 0
17108: PUSH
17109: LD_LOC 29
17113: AND
17114: IFFALSE 17138
17116: GO 17118
17118: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
17119: LD_EXP 21
17123: PUSH
17124: LD_OWVAR 2
17128: ARRAY
17129: PPUSH
17130: CALL 11345 0 1
// YouWinInMultiplayer ;
17134: CALL_OW 106
// end ;
17138: END
// every 100 trigger isEditor marked 401 do
17139: LD_OWVAR 84
17143: IFFALSE 17159
17145: GO 17147
17147: DISABLE
// Debug_Strings = [ You won ] ;
17148: LD_ADDR_OWVAR 48
17152: PUSH
17153: LD_STRING You won
17155: PUSH
17156: EMPTY
17157: LIST
17158: ST_TO_ADDR
17159: END
// every 100 trigger isEditor marked 400 do
17160: LD_OWVAR 84
17164: IFFALSE 17180
17166: GO 17168
17168: DISABLE
// Debug_Strings = [ You loss ] ;
17169: LD_ADDR_OWVAR 48
17173: PUSH
17174: LD_STRING You loss
17176: PUSH
17177: EMPTY
17178: LIST
17179: ST_TO_ADDR
17180: END
// every 100 marked 98 do var i , un ;
17181: GO 17183
17183: DISABLE
17184: LD_INT 0
17186: PPUSH
17187: PPUSH
// begin for i = 1 to side_positions do
17188: LD_ADDR_VAR 0 1
17192: PUSH
17193: DOUBLE
17194: LD_INT 1
17196: DEC
17197: ST_TO_ADDR
17198: LD_EXP 20
17202: PUSH
17203: FOR_TO
17204: IFFALSE 17327
// if side_positions [ i ] then
17206: LD_EXP 20
17210: PUSH
17211: LD_VAR 0 1
17215: ARRAY
17216: IFFALSE 17325
// if not HasPower ( i ) and not Defaited [ i ] then
17218: LD_VAR 0 1
17222: PPUSH
17223: CALL 16526 0 1
17227: NOT
17228: PUSH
17229: LD_LOC 28
17233: PUSH
17234: LD_VAR 0 1
17238: ARRAY
17239: NOT
17240: AND
17241: IFFALSE 17325
// begin un = filterallunits ( [ f_side , i ] ) ;
17243: LD_ADDR_VAR 0 2
17247: PUSH
17248: LD_INT 22
17250: PUSH
17251: LD_VAR 0 1
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: PPUSH
17260: CALL_OW 69
17264: ST_TO_ADDR
// if un then
17265: LD_VAR 0 2
17269: IFFALSE 17283
// SetSide ( un , 0 ) ;
17271: LD_VAR 0 2
17275: PPUSH
17276: LD_INT 0
17278: PPUSH
17279: CALL_OW 235
// Defaited = replace ( Defaited , i , true ) ;
17283: LD_ADDR_LOC 28
17287: PUSH
17288: LD_LOC 28
17292: PPUSH
17293: LD_VAR 0 1
17297: PPUSH
17298: LD_INT 1
17300: PPUSH
17301: CALL_OW 1
17305: ST_TO_ADDR
// if i = your_side then
17306: LD_VAR 0 1
17310: PUSH
17311: LD_OWVAR 2
17315: EQUAL
17316: IFFALSE 17325
// begin Multiplayer_Loose_Message ;
17318: CALL_OW 521
// enable ( 400 ) ;
17322: LD_INT 400
17324: ENABLE_MARKED
// end ; end ;
17325: GO 17203
17327: POP
17328: POP
// if not Unfoged and defaited [ your_side ] then
17329: LD_LOC 30
17333: NOT
17334: PUSH
17335: LD_LOC 28
17339: PUSH
17340: LD_OWVAR 2
17344: ARRAY
17345: AND
17346: IFFALSE 17352
// Unfog ;
17348: CALL 17538 0 0
// DidGameEnd ;
17352: CALL 17367 0 0
// if not GameEnded then
17356: LD_LOC 29
17360: NOT
17361: IFFALSE 17364
// enable ;
17363: ENABLE
// end ;
17364: PPOPN 2
17366: END
// function DidGameEnd ; var i , k , enemy ; begin
17367: LD_INT 0
17369: PPUSH
17370: PPUSH
17371: PPUSH
17372: PPUSH
// enemy = [ ] ;
17373: LD_ADDR_VAR 0 4
17377: PUSH
17378: EMPTY
17379: ST_TO_ADDR
// for i = 1 to side_positions do
17380: LD_ADDR_VAR 0 2
17384: PUSH
17385: DOUBLE
17386: LD_INT 1
17388: DEC
17389: ST_TO_ADDR
17390: LD_EXP 20
17394: PUSH
17395: FOR_TO
17396: IFFALSE 17500
// if not defaited [ i ] then
17398: LD_LOC 28
17402: PUSH
17403: LD_VAR 0 2
17407: ARRAY
17408: NOT
17409: IFFALSE 17498
// for k = 1 to side_positions do
17411: LD_ADDR_VAR 0 3
17415: PUSH
17416: DOUBLE
17417: LD_INT 1
17419: DEC
17420: ST_TO_ADDR
17421: LD_EXP 20
17425: PUSH
17426: FOR_TO
17427: IFFALSE 17496
// if not defaited [ k ] then
17429: LD_LOC 28
17433: PUSH
17434: LD_VAR 0 3
17438: ARRAY
17439: NOT
17440: IFFALSE 17494
// if GetAttitude ( i , k ) in [ att_enemy , att_neutral ] then
17442: LD_VAR 0 2
17446: PPUSH
17447: LD_VAR 0 3
17451: PPUSH
17452: CALL_OW 81
17456: PUSH
17457: LD_INT 2
17459: PUSH
17460: LD_INT 0
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: IN
17467: IFFALSE 17494
// enemy = enemy ^ [ i , k ] ;
17469: LD_ADDR_VAR 0 4
17473: PUSH
17474: LD_VAR 0 4
17478: PUSH
17479: LD_VAR 0 2
17483: PUSH
17484: LD_VAR 0 3
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: ADD
17493: ST_TO_ADDR
17494: GO 17426
17496: POP
17497: POP
17498: GO 17395
17500: POP
17501: POP
// if not enemy then
17502: LD_VAR 0 4
17506: NOT
17507: IFFALSE 17533
// begin GameEnded = true ;
17509: LD_ADDR_LOC 29
17513: PUSH
17514: LD_INT 1
17516: ST_TO_ADDR
// if not defaited [ your_side ] then
17517: LD_LOC 28
17521: PUSH
17522: LD_OWVAR 2
17526: ARRAY
17527: NOT
17528: IFFALSE 17533
// enable ( 401 ) ;
17530: LD_INT 401
17532: ENABLE_MARKED
// end ; end ;
17533: LD_VAR 0 1
17537: RET
// function unfog ; var k , friends ; begin
17538: LD_INT 0
17540: PPUSH
17541: PPUSH
17542: PPUSH
// for k = 1 to side_positions do
17543: LD_ADDR_VAR 0 2
17547: PUSH
17548: DOUBLE
17549: LD_INT 1
17551: DEC
17552: ST_TO_ADDR
17553: LD_EXP 20
17557: PUSH
17558: FOR_TO
17559: IFFALSE 17615
// if not defaited [ k ] then
17561: LD_LOC 28
17565: PUSH
17566: LD_VAR 0 2
17570: ARRAY
17571: NOT
17572: IFFALSE 17613
// if GetAttitude ( your_side , k ) in [ att_friend ] then
17574: LD_OWVAR 2
17578: PPUSH
17579: LD_VAR 0 2
17583: PPUSH
17584: CALL_OW 81
17588: PUSH
17589: LD_INT 1
17591: PUSH
17592: EMPTY
17593: LIST
17594: IN
17595: IFFALSE 17613
// friends = friends ^ k ;
17597: LD_ADDR_VAR 0 3
17601: PUSH
17602: LD_VAR 0 3
17606: PUSH
17607: LD_VAR 0 2
17611: ADD
17612: ST_TO_ADDR
17613: GO 17558
17615: POP
17616: POP
// if not friends then
17617: LD_VAR 0 3
17621: NOT
17622: IFFALSE 17639
// begin fogoff ( true ) ;
17624: LD_INT 1
17626: PPUSH
17627: CALL_OW 344
// unfoged = true ;
17631: LD_ADDR_LOC 30
17635: PUSH
17636: LD_INT 1
17638: ST_TO_ADDR
// end ; end ;
17639: LD_VAR 0 1
17643: RET
// export function MakeGameEnd ; begin
17644: LD_INT 0
17646: PPUSH
// fogoff ( true ) ;
17647: LD_INT 1
17649: PPUSH
17650: CALL_OW 344
// unfoged = true ;
17654: LD_ADDR_LOC 30
17658: PUSH
17659: LD_INT 1
17661: ST_TO_ADDR
// wait ( 0 0$5 ) ;
17662: LD_INT 175
17664: PPUSH
17665: CALL_OW 67
// GameEnded = true ;
17669: LD_ADDR_LOC 29
17673: PUSH
17674: LD_INT 1
17676: ST_TO_ADDR
// end ;
17677: LD_VAR 0 1
17681: RET
// export function GetGameEnded ; begin
17682: LD_INT 0
17684: PPUSH
// result = GameEnded ;
17685: LD_ADDR_VAR 0 1
17689: PUSH
17690: LD_LOC 29
17694: ST_TO_ADDR
// end ;
17695: LD_VAR 0 1
17699: RET
