// export def_tree_function ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , respawning_time_min , respawning_time_max , siberite_bomb_Delay , amount_of_apemen , tree_function , def_win_rules , buildUpTime_Delay ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export Position_Sides ; export depot_def , breastworks_def , start_def , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 141
// begin Your_Side := mp_player_side ;
  79: LD_ADDR_OWVAR 2
  83: PUSH
  84: LD_OWVAR 7
  88: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  89: LD_ADDR_EXP 20
  93: PUSH
  94: LD_OWVAR 17
  98: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  99: LD_ADDR_EXP 17
 103: PUSH
 104: LD_OWVAR 15
 108: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 109: LD_ADDR_EXP 21
 113: PUSH
 114: LD_OWVAR 16
 118: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 119: LD_ADDR_EXP 19
 123: PUSH
 124: CALL 0 0 0
 128: ST_TO_ADDR
// Teams := mp_teams ;
 129: LD_ADDR_EXP 18
 133: PUSH
 134: LD_OWVAR 12
 138: ST_TO_ADDR
// end else
 139: GO 334
// begin Your_Side := 5 ;
 141: LD_ADDR_OWVAR 2
 145: PUSH
 146: LD_INT 5
 148: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 0 , 0 , 0 ] ;
 149: LD_ADDR_EXP 20
 153: PUSH
 154: LD_INT 1
 156: PUSH
 157: LD_INT 2
 159: PUSH
 160: LD_INT 3
 162: PUSH
 163: LD_INT 4
 165: PUSH
 166: LD_INT 5
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 188: LD_ADDR_EXP 17
 192: PUSH
 193: LD_INT 1
 195: PUSH
 196: LD_INT 1
 198: PUSH
 199: LD_INT 2
 201: PUSH
 202: LD_INT 2
 204: PUSH
 205: LD_INT 0
 207: PUSH
 208: LD_INT 0
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 0 , 0 , 0 , 0 ] ;
 227: LD_ADDR_EXP 21
 231: PUSH
 232: LD_INT 1
 234: PUSH
 235: LD_INT 2
 237: PUSH
 238: LD_INT 3
 240: PUSH
 241: LD_INT 1
 243: PUSH
 244: LD_INT 0
 246: PUSH
 247: LD_INT 0
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 0
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: LIST
 264: LIST
 265: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 266: LD_ADDR_EXP 19
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: LD_INT 0
 279: PUSH
 280: LD_INT 0
 282: PUSH
 283: LD_INT 0
 285: PUSH
 286: LD_INT 0
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: LIST
 299: LIST
 300: LIST
 301: LIST
 302: LIST
 303: LIST
 304: ST_TO_ADDR
// Teams := [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 305: LD_ADDR_EXP 18
 309: PUSH
 310: LD_INT 1
 312: PUSH
 313: LD_INT 2
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: LD_INT 3
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: ST_TO_ADDR
// end ; for i := 1 to 8 do
 334: LD_ADDR_VAR 0 2
 338: PUSH
 339: DOUBLE
 340: LD_INT 1
 342: DEC
 343: ST_TO_ADDR
 344: LD_INT 8
 346: PUSH
 347: FOR_TO
 348: IFFALSE 451
// if Multiplayer_GetPlayerIsSpec ( i ) or Side_Positions [ i ] = 5 then
 350: LD_VAR 0 2
 354: PPUSH
 355: CALL_OW 530
 359: PUSH
 360: LD_EXP 20
 364: PUSH
 365: LD_VAR 0 2
 369: ARRAY
 370: PUSH
 371: LD_INT 5
 373: EQUAL
 374: OR
 375: IFFALSE 449
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 377: LD_ADDR_EXP 20
 381: PUSH
 382: LD_EXP 20
 386: PPUSH
 387: LD_VAR 0 2
 391: PPUSH
 392: LD_INT 0
 394: PPUSH
 395: CALL_OW 1
 399: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 400: LD_ADDR_EXP 18
 404: PUSH
 405: LD_EXP 18
 409: PPUSH
 410: LD_EXP 17
 414: PUSH
 415: LD_VAR 0 2
 419: ARRAY
 420: PPUSH
 421: LD_EXP 18
 425: PUSH
 426: LD_EXP 17
 430: PUSH
 431: LD_VAR 0 2
 435: ARRAY
 436: ARRAY
 437: PUSH
 438: LD_VAR 0 2
 442: DIFF
 443: PPUSH
 444: CALL_OW 1
 448: ST_TO_ADDR
// end ;
 449: GO 347
 451: POP
 452: POP
// Position_Sides := [ 0 , 0 , 0 , 0 ] ;
 453: LD_ADDR_EXP 23
 457: PUSH
 458: LD_INT 0
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 0
 466: PUSH
 467: LD_INT 0
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: LIST
 474: LIST
 475: ST_TO_ADDR
// for i := 1 to 8 do
 476: LD_ADDR_VAR 0 2
 480: PUSH
 481: DOUBLE
 482: LD_INT 1
 484: DEC
 485: ST_TO_ADDR
 486: LD_INT 8
 488: PUSH
 489: FOR_TO
 490: IFFALSE 537
// if Side_Positions [ i ] then
 492: LD_EXP 20
 496: PUSH
 497: LD_VAR 0 2
 501: ARRAY
 502: IFFALSE 535
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 504: LD_ADDR_EXP 23
 508: PUSH
 509: LD_EXP 23
 513: PPUSH
 514: LD_EXP 20
 518: PUSH
 519: LD_VAR 0 2
 523: ARRAY
 524: PPUSH
 525: LD_VAR 0 2
 529: PPUSH
 530: CALL_OW 1
 534: ST_TO_ADDR
 535: GO 489
 537: POP
 538: POP
// Team_Game := Side_Teams [ your_side ] ;
 539: LD_ADDR_EXP 22
 543: PUSH
 544: LD_EXP 17
 548: PUSH
 549: LD_OWVAR 2
 553: ARRAY
 554: ST_TO_ADDR
// if Multiplayer then
 555: LD_OWVAR 4
 559: IFFALSE 766
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 561: LD_ADDR_EXP 38
 565: PUSH
 566: LD_INT 0
 568: PPUSH
 569: CALL_OW 426
 573: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 574: LD_ADDR_EXP 39
 578: PUSH
 579: LD_INT 1
 581: PPUSH
 582: CALL_OW 426
 586: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 587: LD_ADDR_EXP 40
 591: PUSH
 592: LD_INT 2
 594: PPUSH
 595: CALL_OW 426
 599: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 600: LD_ADDR_EXP 41
 604: PUSH
 605: LD_INT 3
 607: PPUSH
 608: CALL_OW 426
 612: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 613: LD_ADDR_EXP 42
 617: PUSH
 618: LD_INT 4
 620: PPUSH
 621: CALL_OW 426
 625: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 626: LD_ADDR_EXP 43
 630: PUSH
 631: LD_INT 5
 633: PPUSH
 634: CALL_OW 426
 638: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 639: LD_ADDR_EXP 45
 643: PUSH
 644: LD_INT 10
 646: PPUSH
 647: CALL_OW 426
 651: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 652: LD_ADDR_EXP 46
 656: PUSH
 657: LD_INT 11
 659: PPUSH
 660: CALL_OW 426
 664: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 665: LD_ADDR_EXP 47
 669: PUSH
 670: LD_INT 12
 672: PPUSH
 673: CALL_OW 426
 677: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 13 ) ;
 678: LD_ADDR_EXP 49
 682: PUSH
 683: LD_INT 13
 685: PPUSH
 686: CALL_OW 426
 690: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 14 ) ;
 691: LD_ADDR_EXP 48
 695: PUSH
 696: LD_INT 14
 698: PPUSH
 699: CALL_OW 426
 703: ST_TO_ADDR
// def_tree_function := GetMultiplayerSetting ( 15 ) ;
 704: LD_ADDR_EXP 1
 708: PUSH
 709: LD_INT 15
 711: PPUSH
 712: CALL_OW 426
 716: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 717: LD_ADDR_EXP 50
 721: PUSH
 722: LD_INT 17
 724: PPUSH
 725: CALL_OW 426
 729: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 730: LD_ADDR_EXP 51
 734: PUSH
 735: LD_INT 20
 737: PPUSH
 738: CALL_OW 426
 742: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 743: LD_ADDR_VAR 0 3
 747: PUSH
 748: LD_INT 22
 750: PPUSH
 751: CALL_OW 426
 755: ST_TO_ADDR
// def_win_rules = 0 ;
 756: LD_ADDR_EXP 15
 760: PUSH
 761: LD_INT 0
 763: ST_TO_ADDR
// end else
 764: GO 898
// begin Randomize ;
 766: CALL_OW 10
// def_base_level := 2 ;
 770: LD_ADDR_EXP 38
 774: PUSH
 775: LD_INT 2
 777: ST_TO_ADDR
// def_amount_of_people := 1 ;
 778: LD_ADDR_EXP 39
 782: PUSH
 783: LD_INT 1
 785: ST_TO_ADDR
// def_skill_level := 1 ;
 786: LD_ADDR_EXP 40
 790: PUSH
 791: LD_INT 1
 793: ST_TO_ADDR
// def_starting_resources := 2 ;
 794: LD_ADDR_EXP 41
 798: PUSH
 799: LD_INT 2
 801: ST_TO_ADDR
// def_shipments_density := 1 ;
 802: LD_ADDR_EXP 42
 806: PUSH
 807: LD_INT 1
 809: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 810: LD_ADDR_EXP 43
 814: PUSH
 815: LD_INT 0
 817: ST_TO_ADDR
// def_shared_vision := 1 ;
 818: LD_ADDR_EXP 45
 822: PUSH
 823: LD_INT 1
 825: ST_TO_ADDR
// def_morale_flags := 1 ;
 826: LD_ADDR_EXP 46
 830: PUSH
 831: LD_INT 1
 833: ST_TO_ADDR
// def_siberite_detection := 1 ;
 834: LD_ADDR_EXP 47
 838: PUSH
 839: LD_INT 1
 841: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 842: LD_ADDR_EXP 49
 846: PUSH
 847: LD_INT 3
 849: ST_TO_ADDR
// def_people_respawning := 2 ;
 850: LD_ADDR_EXP 48
 854: PUSH
 855: LD_INT 2
 857: ST_TO_ADDR
// def_tree_function := 7 ;
 858: LD_ADDR_EXP 1
 862: PUSH
 863: LD_INT 7
 865: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 866: LD_ADDR_EXP 50
 870: PUSH
 871: LD_INT 0
 873: ST_TO_ADDR
// def_builduptime := 1 ;
 874: LD_ADDR_EXP 51
 878: PUSH
 879: LD_INT 1
 881: ST_TO_ADDR
// tech_level = 4 ;
 882: LD_ADDR_VAR 0 3
 886: PUSH
 887: LD_INT 4
 889: ST_TO_ADDR
// def_win_rules = 0 ;
 890: LD_ADDR_EXP 15
 894: PUSH
 895: LD_INT 0
 897: ST_TO_ADDR
// end ; if def_tree_function = 7 then
 898: LD_EXP 1
 902: PUSH
 903: LD_INT 7
 905: EQUAL
 906: IFFALSE 924
// def_tree_function := Rand ( 1 , 5 ) ;
 908: LD_ADDR_EXP 1
 912: PUSH
 913: LD_INT 1
 915: PPUSH
 916: LD_INT 5
 918: PPUSH
 919: CALL_OW 12
 923: ST_TO_ADDR
// InitGameRules ;
 924: CALL 7842 0 0
// if def_game_rules = 0 then
 928: LD_EXP 37
 932: PUSH
 933: LD_INT 0
 935: EQUAL
 936: IFFALSE 963
// begin if isSGUI then
 938: LD_OWVAR 83
 942: IFFALSE 950
// setMpTechs ( ) else
 944: CALL 11985 0 0
 948: GO 963
// begin SetMpTechLevel ( tech_level + 1 ) ;
 950: LD_VAR 0 3
 954: PUSH
 955: LD_INT 1
 957: PLUS
 958: PPUSH
 959: CALL 12132 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 963: LD_ADDR_EXP 2
 967: PUSH
 968: LD_INT 0
 970: PUSH
 971: LD_INT 1
 973: PUSH
 974: LD_INT 1
 976: PUSH
 977: LD_INT 1
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: LIST
 984: LIST
 985: PUSH
 986: LD_EXP 38
 990: PUSH
 991: LD_INT 1
 993: PLUS
 994: ARRAY
 995: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 , 3 ] [ def_base_level + 1 ] ;
 996: LD_ADDR_EXP 3
1000: PUSH
1001: LD_INT 0
1003: PUSH
1004: LD_INT 0
1006: PUSH
1007: LD_INT 2
1009: PUSH
1010: LD_INT 3
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: LIST
1017: LIST
1018: PUSH
1019: LD_EXP 38
1023: PUSH
1024: LD_INT 1
1026: PLUS
1027: ARRAY
1028: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1029: LD_ADDR_EXP 5
1033: PUSH
1034: LD_INT 2
1036: PUSH
1037: LD_INT 3
1039: PUSH
1040: LD_INT 4
1042: PUSH
1043: LD_INT 5
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: PUSH
1052: LD_EXP 40
1056: PUSH
1057: LD_INT 1
1059: PLUS
1060: ARRAY
1061: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1062: LD_ADDR_EXP 7
1066: PUSH
1067: LD_INT 0
1069: PUSH
1070: LD_INT 0
1072: PUSH
1073: LD_INT 0
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: LIST
1080: PUSH
1081: LD_INT 30
1083: PUSH
1084: LD_INT 0
1086: PUSH
1087: LD_INT 0
1089: PUSH
1090: EMPTY
1091: LIST
1092: LIST
1093: LIST
1094: PUSH
1095: LD_INT 50
1097: PUSH
1098: LD_INT 20
1100: PUSH
1101: LD_INT 0
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: LIST
1108: PUSH
1109: LD_INT 80
1111: PUSH
1112: LD_INT 40
1114: PUSH
1115: LD_INT 20
1117: PUSH
1118: EMPTY
1119: LIST
1120: LIST
1121: LIST
1122: PUSH
1123: EMPTY
1124: LIST
1125: LIST
1126: LIST
1127: LIST
1128: PUSH
1129: LD_EXP 41
1133: PUSH
1134: LD_INT 1
1136: PLUS
1137: ARRAY
1138: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1139: LD_ADDR_EXP 6
1143: PUSH
1144: LD_INT 10
1146: PUSH
1147: EMPTY
1148: LIST
1149: PUSH
1150: LD_INT 7
1152: PUSH
1153: LD_INT 14
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: PUSH
1160: LD_INT 6
1162: PUSH
1163: LD_INT 12
1165: PUSH
1166: LD_INT 18
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: LIST
1173: PUSH
1174: LD_INT 5
1176: PUSH
1177: LD_INT 10
1179: PUSH
1180: LD_INT 15
1182: PUSH
1183: LD_INT 20
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: LIST
1196: LIST
1197: PUSH
1198: LD_EXP 41
1202: PUSH
1203: LD_INT 1
1205: PLUS
1206: ARRAY
1207: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1208: LD_ADDR_EXP 4
1212: PUSH
1213: LD_EXP 39
1217: PUSH
1218: LD_INT 4
1220: PLUS
1221: ST_TO_ADDR
// shipments_density := 20 + ( def_shipments_density ) * 20 ;
1222: LD_ADDR_EXP 8
1226: PUSH
1227: LD_INT 20
1229: PUSH
1230: LD_EXP 42
1234: PUSH
1235: LD_INT 20
1237: MUL
1238: PLUS
1239: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1240: LD_ADDR_EXP 13
1244: PUSH
1245: LD_INT 0
1247: PUSH
1248: LD_INT 1
1250: PUSH
1251: LD_INT 2
1253: PUSH
1254: LD_INT 3
1256: PUSH
1257: EMPTY
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: PUSH
1263: LD_EXP 49
1267: PUSH
1268: LD_INT 1
1270: PLUS
1271: ARRAY
1272: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1273: LD_ADDR_EXP 10
1277: PUSH
1278: LD_INT 0
1280: PUSH
1281: LD_INT 8400
1283: PUSH
1284: LD_INT 1750
1286: PUSH
1287: EMPTY
1288: LIST
1289: LIST
1290: LIST
1291: PUSH
1292: LD_EXP 48
1296: PUSH
1297: LD_INT 1
1299: PLUS
1300: ARRAY
1301: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1302: LD_ADDR_EXP 11
1306: PUSH
1307: LD_INT 0
1309: PUSH
1310: LD_INT 21000
1312: PUSH
1313: LD_INT 4200
1315: PUSH
1316: EMPTY
1317: LIST
1318: LIST
1319: LIST
1320: PUSH
1321: LD_EXP 48
1325: PUSH
1326: LD_INT 1
1328: PLUS
1329: ARRAY
1330: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1331: LD_ADDR_EXP 9
1335: PUSH
1336: LD_INT 1
1338: NEG
1339: PUSH
1340: LD_INT 350
1342: PUSH
1343: LD_INT 700
1345: PUSH
1346: LD_INT 1400
1348: PUSH
1349: LD_INT 0
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: PUSH
1359: LD_EXP 46
1363: PUSH
1364: LD_INT 1
1366: PLUS
1367: ARRAY
1368: ST_TO_ADDR
// battle_flags_id := [ ] ;
1369: LD_ADDR_EXP 27
1373: PUSH
1374: EMPTY
1375: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1376: LD_ADDR_EXP 12
1380: PUSH
1381: LD_INT 0
1383: PUSH
1384: LD_INT 1
1386: PUSH
1387: LD_INT 63000
1389: PUSH
1390: LD_INT 126000
1392: PUSH
1393: LD_INT 189000
1395: PUSH
1396: LD_INT 252000
1398: PUSH
1399: EMPTY
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: PUSH
1407: LD_EXP 50
1411: PUSH
1412: LD_INT 1
1414: PLUS
1415: ARRAY
1416: ST_TO_ADDR
// tree_function := [ [ 0 , 0 , 0 , 0 , 0 ] , [ 2 , 0 , 0 , 0 , 0 ] , [ 0 , 4 , 0 , 0 , 0 ] , [ 0 , 0 , 2 , 0 , 0 ] , [ 0 , 0 , 0 , 3 , 0 ] , [ 1 , 2 , 1 , 2 , 2 ] , [ 0 , 0 , 0 , 0 , 3 ] ] [ def_tree_function + 1 ] ;
1417: LD_ADDR_EXP 14
1421: PUSH
1422: LD_INT 0
1424: PUSH
1425: LD_INT 0
1427: PUSH
1428: LD_INT 0
1430: PUSH
1431: LD_INT 0
1433: PUSH
1434: LD_INT 0
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: PUSH
1444: LD_INT 2
1446: PUSH
1447: LD_INT 0
1449: PUSH
1450: LD_INT 0
1452: PUSH
1453: LD_INT 0
1455: PUSH
1456: LD_INT 0
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: LIST
1463: LIST
1464: LIST
1465: PUSH
1466: LD_INT 0
1468: PUSH
1469: LD_INT 4
1471: PUSH
1472: LD_INT 0
1474: PUSH
1475: LD_INT 0
1477: PUSH
1478: LD_INT 0
1480: PUSH
1481: EMPTY
1482: LIST
1483: LIST
1484: LIST
1485: LIST
1486: LIST
1487: PUSH
1488: LD_INT 0
1490: PUSH
1491: LD_INT 0
1493: PUSH
1494: LD_INT 2
1496: PUSH
1497: LD_INT 0
1499: PUSH
1500: LD_INT 0
1502: PUSH
1503: EMPTY
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: PUSH
1510: LD_INT 0
1512: PUSH
1513: LD_INT 0
1515: PUSH
1516: LD_INT 0
1518: PUSH
1519: LD_INT 3
1521: PUSH
1522: LD_INT 0
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: LIST
1531: PUSH
1532: LD_INT 1
1534: PUSH
1535: LD_INT 2
1537: PUSH
1538: LD_INT 1
1540: PUSH
1541: LD_INT 2
1543: PUSH
1544: LD_INT 2
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: PUSH
1554: LD_INT 0
1556: PUSH
1557: LD_INT 0
1559: PUSH
1560: LD_INT 0
1562: PUSH
1563: LD_INT 0
1565: PUSH
1566: LD_INT 3
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: PUSH
1576: EMPTY
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: PUSH
1585: LD_EXP 1
1589: PUSH
1590: LD_INT 1
1592: PLUS
1593: ARRAY
1594: ST_TO_ADDR
// buildUpTime_Delay := [ 0 , 5 5$00 , 10 10$00 , 15 15$00 ] [ def_builduptime + 1 ] ;
1595: LD_ADDR_EXP 16
1599: PUSH
1600: LD_INT 0
1602: PUSH
1603: LD_INT 10500
1605: PUSH
1606: LD_INT 21000
1608: PUSH
1609: LD_INT 31500
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: LIST
1616: LIST
1617: PUSH
1618: LD_EXP 51
1622: PUSH
1623: LD_INT 1
1625: PLUS
1626: ARRAY
1627: ST_TO_ADDR
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] ;
1628: LD_ADDR_EXP 55
1632: PUSH
1633: LD_INT 8
1635: PUSH
1636: LD_INT 11
1638: PUSH
1639: LD_INT 9
1641: PUSH
1642: LD_INT 10
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: ST_TO_ADDR
// end ;
1651: LD_VAR 0 1
1655: RET
// function prepare_map_coordinates ; var side , dep , br1 , br2 , br3 , un , i ; begin
1656: LD_INT 0
1658: PPUSH
1659: PPUSH
1660: PPUSH
1661: PPUSH
1662: PPUSH
1663: PPUSH
1664: PPUSH
1665: PPUSH
// depot_def = [ ] ;
1666: LD_ADDR_EXP 24
1670: PUSH
1671: EMPTY
1672: ST_TO_ADDR
// breastworks_def = [ ] ;
1673: LD_ADDR_EXP 25
1677: PUSH
1678: EMPTY
1679: ST_TO_ADDR
// for side := 1 to 4 do
1680: LD_ADDR_VAR 0 2
1684: PUSH
1685: DOUBLE
1686: LD_INT 1
1688: DEC
1689: ST_TO_ADDR
1690: LD_INT 4
1692: PUSH
1693: FOR_TO
1694: IFFALSE 2049
// begin dep := side * 4 - 3 ;
1696: LD_ADDR_VAR 0 3
1700: PUSH
1701: LD_VAR 0 2
1705: PUSH
1706: LD_INT 4
1708: MUL
1709: PUSH
1710: LD_INT 3
1712: MINUS
1713: ST_TO_ADDR
// br1 := side * 4 - 2 ;
1714: LD_ADDR_VAR 0 4
1718: PUSH
1719: LD_VAR 0 2
1723: PUSH
1724: LD_INT 4
1726: MUL
1727: PUSH
1728: LD_INT 2
1730: MINUS
1731: ST_TO_ADDR
// br2 := side * 4 - 1 ;
1732: LD_ADDR_VAR 0 5
1736: PUSH
1737: LD_VAR 0 2
1741: PUSH
1742: LD_INT 4
1744: MUL
1745: PUSH
1746: LD_INT 1
1748: MINUS
1749: ST_TO_ADDR
// br3 := side * 4 ;
1750: LD_ADDR_VAR 0 6
1754: PUSH
1755: LD_VAR 0 2
1759: PUSH
1760: LD_INT 4
1762: MUL
1763: ST_TO_ADDR
// depot_def := depot_def ^ [ [ GetX ( dep ) , GetY ( dep ) , GetDir ( dep ) ] ] ;
1764: LD_ADDR_EXP 24
1768: PUSH
1769: LD_EXP 24
1773: PUSH
1774: LD_VAR 0 3
1778: PPUSH
1779: CALL_OW 250
1783: PUSH
1784: LD_VAR 0 3
1788: PPUSH
1789: CALL_OW 251
1793: PUSH
1794: LD_VAR 0 3
1798: PPUSH
1799: CALL_OW 254
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: LIST
1808: PUSH
1809: EMPTY
1810: LIST
1811: ADD
1812: ST_TO_ADDR
// start_def := start_def ^ [ [ ShiftX ( GetX ( Dep ) , GetDir ( Dep ) , 6 ) , ShiftY ( GetY ( Dep ) , GetDir ( Dep ) , 6 ) ] ] ;
1813: LD_ADDR_EXP 26
1817: PUSH
1818: LD_EXP 26
1822: PUSH
1823: LD_VAR 0 3
1827: PPUSH
1828: CALL_OW 250
1832: PPUSH
1833: LD_VAR 0 3
1837: PPUSH
1838: CALL_OW 254
1842: PPUSH
1843: LD_INT 6
1845: PPUSH
1846: CALL_OW 272
1850: PUSH
1851: LD_VAR 0 3
1855: PPUSH
1856: CALL_OW 251
1860: PPUSH
1861: LD_VAR 0 3
1865: PPUSH
1866: CALL_OW 254
1870: PPUSH
1871: LD_INT 6
1873: PPUSH
1874: CALL_OW 273
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: PUSH
1883: EMPTY
1884: LIST
1885: ADD
1886: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ GetX ( br1 ) , GetY ( br1 ) , GetDir ( br1 ) ] , [ GetX ( br2 ) , GetY ( br2 ) , GetDir ( br2 ) ] , [ GetX ( br3 ) , GetY ( br3 ) , GetDir ( br3 ) ] ] ] ;
1887: LD_ADDR_EXP 25
1891: PUSH
1892: LD_EXP 25
1896: PUSH
1897: LD_VAR 0 4
1901: PPUSH
1902: CALL_OW 250
1906: PUSH
1907: LD_VAR 0 4
1911: PPUSH
1912: CALL_OW 251
1916: PUSH
1917: LD_VAR 0 4
1921: PPUSH
1922: CALL_OW 254
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: LIST
1931: PUSH
1932: LD_VAR 0 5
1936: PPUSH
1937: CALL_OW 250
1941: PUSH
1942: LD_VAR 0 5
1946: PPUSH
1947: CALL_OW 251
1951: PUSH
1952: LD_VAR 0 5
1956: PPUSH
1957: CALL_OW 254
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: LIST
1966: PUSH
1967: LD_VAR 0 6
1971: PPUSH
1972: CALL_OW 250
1976: PUSH
1977: LD_VAR 0 6
1981: PPUSH
1982: CALL_OW 251
1986: PUSH
1987: LD_VAR 0 6
1991: PPUSH
1992: CALL_OW 254
1996: PUSH
1997: EMPTY
1998: LIST
1999: LIST
2000: LIST
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: LIST
2006: PUSH
2007: EMPTY
2008: LIST
2009: ADD
2010: ST_TO_ADDR
// DestroyUnit ( dep ) ;
2011: LD_VAR 0 3
2015: PPUSH
2016: CALL_OW 65
// DestroyUnit ( br1 ) ;
2020: LD_VAR 0 4
2024: PPUSH
2025: CALL_OW 65
// DestroyUnit ( br2 ) ;
2029: LD_VAR 0 5
2033: PPUSH
2034: CALL_OW 65
// DestroyUnit ( br3 ) ;
2038: LD_VAR 0 6
2042: PPUSH
2043: CALL_OW 65
// end ;
2047: GO 1693
2049: POP
2050: POP
// if not def_extra_oil_deposits then
2051: LD_EXP 43
2055: NOT
2056: IFFALSE 2138
// for i in [ [ 52 , 44 ] , [ 84 , 37 ] , [ 74 , 81 ] , [ 106 , 77 ] ] do
2058: LD_ADDR_VAR 0 8
2062: PUSH
2063: LD_INT 52
2065: PUSH
2066: LD_INT 44
2068: PUSH
2069: EMPTY
2070: LIST
2071: LIST
2072: PUSH
2073: LD_INT 84
2075: PUSH
2076: LD_INT 37
2078: PUSH
2079: EMPTY
2080: LIST
2081: LIST
2082: PUSH
2083: LD_INT 74
2085: PUSH
2086: LD_INT 81
2088: PUSH
2089: EMPTY
2090: LIST
2091: LIST
2092: PUSH
2093: LD_INT 106
2095: PUSH
2096: LD_INT 77
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: PUSH
2109: FOR_IN
2110: IFFALSE 2136
// begin RemoveDepositXY ( i [ 1 ] , i [ 2 ] ) ;
2112: LD_VAR 0 8
2116: PUSH
2117: LD_INT 1
2119: ARRAY
2120: PPUSH
2121: LD_VAR 0 8
2125: PUSH
2126: LD_INT 2
2128: ARRAY
2129: PPUSH
2130: CALL_OW 63
// end ;
2134: GO 2109
2136: POP
2137: POP
// end ;
2138: LD_VAR 0 1
2142: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2143: LD_INT 0
2145: PPUSH
2146: PPUSH
2147: PPUSH
// if not Team_Game then
2148: LD_EXP 22
2152: NOT
2153: IFFALSE 2251
// begin for i = 1 to 8 do
2155: LD_ADDR_VAR 0 2
2159: PUSH
2160: DOUBLE
2161: LD_INT 1
2163: DEC
2164: ST_TO_ADDR
2165: LD_INT 8
2167: PUSH
2168: FOR_TO
2169: IFFALSE 2247
// for j = 1 to 8 do
2171: LD_ADDR_VAR 0 3
2175: PUSH
2176: DOUBLE
2177: LD_INT 1
2179: DEC
2180: ST_TO_ADDR
2181: LD_INT 8
2183: PUSH
2184: FOR_TO
2185: IFFALSE 2243
// if i <> j then
2187: LD_VAR 0 2
2191: PUSH
2192: LD_VAR 0 3
2196: NONEQUAL
2197: IFFALSE 2221
// SetAttitude ( i , j , att_neutral , true ) else
2199: LD_VAR 0 2
2203: PPUSH
2204: LD_VAR 0 3
2208: PPUSH
2209: LD_INT 0
2211: PPUSH
2212: LD_INT 1
2214: PPUSH
2215: CALL_OW 80
2219: GO 2241
// SetAttitude ( i , j , att_friend , true ) ;
2221: LD_VAR 0 2
2225: PPUSH
2226: LD_VAR 0 3
2230: PPUSH
2231: LD_INT 1
2233: PPUSH
2234: LD_INT 1
2236: PPUSH
2237: CALL_OW 80
2241: GO 2184
2243: POP
2244: POP
2245: GO 2168
2247: POP
2248: POP
// end else
2249: GO 2426
// begin if def_shared_vision then
2251: LD_EXP 45
2255: IFFALSE 2320
// begin for i in Teams do
2257: LD_ADDR_VAR 0 2
2261: PUSH
2262: LD_EXP 18
2266: PUSH
2267: FOR_IN
2268: IFFALSE 2318
// for j = 2 to i do
2270: LD_ADDR_VAR 0 3
2274: PUSH
2275: DOUBLE
2276: LD_INT 2
2278: DEC
2279: ST_TO_ADDR
2280: LD_VAR 0 2
2284: PUSH
2285: FOR_TO
2286: IFFALSE 2314
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2288: LD_VAR 0 2
2292: PUSH
2293: LD_VAR 0 3
2297: ARRAY
2298: PPUSH
2299: LD_VAR 0 2
2303: PUSH
2304: LD_INT 1
2306: ARRAY
2307: PPUSH
2308: CALL_OW 343
2312: GO 2285
2314: POP
2315: POP
2316: GO 2267
2318: POP
2319: POP
// end ; for i = 1 to 8 do
2320: LD_ADDR_VAR 0 2
2324: PUSH
2325: DOUBLE
2326: LD_INT 1
2328: DEC
2329: ST_TO_ADDR
2330: LD_INT 8
2332: PUSH
2333: FOR_TO
2334: IFFALSE 2424
// for j = 1 to 8 do
2336: LD_ADDR_VAR 0 3
2340: PUSH
2341: DOUBLE
2342: LD_INT 1
2344: DEC
2345: ST_TO_ADDR
2346: LD_INT 8
2348: PUSH
2349: FOR_TO
2350: IFFALSE 2420
// if Side_Teams [ i ] = Side_Teams [ j ] then
2352: LD_EXP 17
2356: PUSH
2357: LD_VAR 0 2
2361: ARRAY
2362: PUSH
2363: LD_EXP 17
2367: PUSH
2368: LD_VAR 0 3
2372: ARRAY
2373: EQUAL
2374: IFFALSE 2398
// SetAttitude ( i , j , att_friend , true ) else
2376: LD_VAR 0 2
2380: PPUSH
2381: LD_VAR 0 3
2385: PPUSH
2386: LD_INT 1
2388: PPUSH
2389: LD_INT 1
2391: PPUSH
2392: CALL_OW 80
2396: GO 2418
// SetAttitude ( i , j , att_enemy , true ) ;
2398: LD_VAR 0 2
2402: PPUSH
2403: LD_VAR 0 3
2407: PPUSH
2408: LD_INT 2
2410: PPUSH
2411: LD_INT 1
2413: PPUSH
2414: CALL_OW 80
2418: GO 2349
2420: POP
2421: POP
2422: GO 2333
2424: POP
2425: POP
// end ; end ;
2426: LD_VAR 0 1
2430: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2431: LD_INT 0
2433: PPUSH
2434: PPUSH
2435: PPUSH
2436: PPUSH
// result := [ ] ;
2437: LD_ADDR_VAR 0 7
2441: PUSH
2442: EMPTY
2443: ST_TO_ADDR
// for i := 1 to count do
2444: LD_ADDR_VAR 0 8
2448: PUSH
2449: DOUBLE
2450: LD_INT 1
2452: DEC
2453: ST_TO_ADDR
2454: LD_VAR 0 1
2458: PUSH
2459: FOR_TO
2460: IFFALSE 2878
// begin uc_direction := Rand ( 0 , 5 ) ;
2462: LD_ADDR_OWVAR 24
2466: PUSH
2467: LD_INT 0
2469: PPUSH
2470: LD_INT 5
2472: PPUSH
2473: CALL_OW 12
2477: ST_TO_ADDR
// if commander then
2478: LD_LOC 1
2482: IFFALSE 2591
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2484: LD_ADDR_OWVAR 26
2488: PUSH
2489: LD_OWVAR 19
2493: PUSH
2494: LD_OWVAR 20
2498: ARRAY
2499: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2500: LD_INT 1
2502: PPUSH
2503: LD_INT 2
2505: PPUSH
2506: CALL_OW 12
2510: PPUSH
2511: LD_VAR 0 2
2515: PPUSH
2516: LD_EXP 5
2520: PUSH
2521: LD_INT 2
2523: PLUS
2524: PPUSH
2525: CALL_OW 380
// hc_importance := 105 ;
2529: LD_ADDR_OWVAR 32
2533: PUSH
2534: LD_INT 105
2536: ST_TO_ADDR
// commander := false ;
2537: LD_ADDR_LOC 1
2541: PUSH
2542: LD_INT 0
2544: ST_TO_ADDR
// if Multiplayer then
2545: LD_OWVAR 4
2549: IFFALSE 2589
// begin hc_gallery := MULTIAVATARS ;
2551: LD_ADDR_OWVAR 33
2555: PUSH
2556: LD_STRING MULTIAVATARS
2558: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2559: LD_ADDR_OWVAR 34
2563: PUSH
2564: LD_OWVAR 20
2568: PPUSH
2569: CALL_OW 525
2573: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2574: LD_ADDR_OWVAR 27
2578: PUSH
2579: LD_OWVAR 20
2583: PPUSH
2584: CALL_OW 526
2588: ST_TO_ADDR
// end ; end else
2589: GO 2654
// begin hc_name :=  ;
2591: LD_ADDR_OWVAR 26
2595: PUSH
2596: LD_STRING 
2598: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2599: LD_INT 1
2601: PPUSH
2602: LD_INT 2
2604: PPUSH
2605: CALL_OW 12
2609: PPUSH
2610: LD_VAR 0 2
2614: PPUSH
2615: LD_EXP 5
2619: PPUSH
2620: CALL_OW 380
// hc_importance := 0 ;
2624: LD_ADDR_OWVAR 32
2628: PUSH
2629: LD_INT 0
2631: ST_TO_ADDR
// if Multiplayer then
2632: LD_OWVAR 4
2636: IFFALSE 2654
// begin hc_gallery :=  ;
2638: LD_ADDR_OWVAR 33
2642: PUSH
2643: LD_STRING 
2645: ST_TO_ADDR
// hc_face_number := 0 ;
2646: LD_ADDR_OWVAR 34
2650: PUSH
2651: LD_INT 0
2653: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2654: LD_ADDR_VAR 0 10
2658: PUSH
2659: CALL_OW 44
2663: ST_TO_ADDR
// if global_defined then
2664: LD_LOC 3
2668: IFFALSE 2808
// begin if ( cl = class_soldier ) then
2670: LD_VAR 0 2
2674: PUSH
2675: LD_INT 1
2677: EQUAL
2678: IFFALSE 2698
// j := i + soldiers_created else
2680: LD_ADDR_VAR 0 9
2684: PUSH
2685: LD_VAR 0 8
2689: PUSH
2690: LD_LOC 4
2694: PLUS
2695: ST_TO_ADDR
2696: GO 2708
// j := i ;
2698: LD_ADDR_VAR 0 9
2702: PUSH
2703: LD_VAR 0 8
2707: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2708: LD_LOC 2
2712: PUSH
2713: LD_VAR 0 2
2717: ARRAY
2718: PUSH
2719: LD_VAR 0 9
2723: ARRAY
2724: PPUSH
2725: LD_VAR 0 10
2729: PPUSH
2730: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2734: LD_VAR 0 10
2738: PPUSH
2739: LD_INT 2
2741: PPUSH
2742: LD_LOC 2
2746: PUSH
2747: LD_VAR 0 2
2751: ARRAY
2752: PUSH
2753: LD_VAR 0 9
2757: ARRAY
2758: PPUSH
2759: LD_INT 2
2761: PPUSH
2762: CALL_OW 260
2766: PPUSH
2767: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2771: LD_VAR 0 10
2775: PPUSH
2776: LD_INT 1
2778: PPUSH
2779: LD_LOC 2
2783: PUSH
2784: LD_VAR 0 2
2788: ARRAY
2789: PUSH
2790: LD_VAR 0 9
2794: ARRAY
2795: PPUSH
2796: LD_INT 1
2798: PPUSH
2799: CALL_OW 260
2803: PPUSH
2804: CALL_OW 239
// end ; if building then
2808: LD_VAR 0 6
2812: IFFALSE 2830
// PlaceHumanInUnit ( un , building ) else
2814: LD_VAR 0 10
2818: PPUSH
2819: LD_VAR 0 6
2823: PPUSH
2824: CALL_OW 52
2828: GO 2857
// PlaceUnitXYR ( un , x , y , r , false ) ;
2830: LD_VAR 0 10
2834: PPUSH
2835: LD_VAR 0 3
2839: PPUSH
2840: LD_VAR 0 4
2844: PPUSH
2845: LD_VAR 0 5
2849: PPUSH
2850: LD_INT 0
2852: PPUSH
2853: CALL_OW 50
// result := result ^ [ un ] ;
2857: LD_ADDR_VAR 0 7
2861: PUSH
2862: LD_VAR 0 7
2866: PUSH
2867: LD_VAR 0 10
2871: PUSH
2872: EMPTY
2873: LIST
2874: ADD
2875: ST_TO_ADDR
// end ;
2876: GO 2459
2878: POP
2879: POP
// if not global_defined then
2880: LD_LOC 3
2884: NOT
2885: IFFALSE 2963
// if ( global_units >= cl ) then
2887: LD_LOC 2
2891: PUSH
2892: LD_VAR 0 2
2896: GREATEREQUAL
2897: IFFALSE 2938
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2899: LD_ADDR_LOC 2
2903: PUSH
2904: LD_LOC 2
2908: PPUSH
2909: LD_VAR 0 2
2913: PPUSH
2914: LD_LOC 2
2918: PUSH
2919: LD_VAR 0 2
2923: ARRAY
2924: PUSH
2925: LD_VAR 0 7
2929: ADD
2930: PPUSH
2931: CALL_OW 1
2935: ST_TO_ADDR
2936: GO 2963
// global_units := Replace ( global_units , cl , result ) ;
2938: LD_ADDR_LOC 2
2942: PUSH
2943: LD_LOC 2
2947: PPUSH
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_VAR 0 7
2957: PPUSH
2958: CALL_OW 1
2962: ST_TO_ADDR
// if commander then
2963: LD_LOC 1
2967: IFFALSE 3014
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2969: LD_ADDR_EXP 28
2973: PUSH
2974: LD_EXP 28
2978: PPUSH
2979: LD_OWVAR 20
2983: PPUSH
2984: LD_EXP 28
2988: PUSH
2989: LD_OWVAR 20
2993: ARRAY
2994: PUSH
2995: LD_VAR 0 10
2999: ADD
3000: PPUSH
3001: CALL_OW 1
3005: ST_TO_ADDR
// commander := false ;
3006: LD_ADDR_LOC 1
3010: PUSH
3011: LD_INT 0
3013: ST_TO_ADDR
// end ; end ;
3014: LD_VAR 0 7
3018: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3019: LD_INT 0
3021: PPUSH
3022: PPUSH
3023: PPUSH
3024: PPUSH
3025: PPUSH
3026: PPUSH
3027: PPUSH
3028: PPUSH
3029: PPUSH
// pos := Side_Positions [ side ] ;
3030: LD_ADDR_VAR 0 3
3034: PUSH
3035: LD_EXP 20
3039: PUSH
3040: LD_VAR 0 1
3044: ARRAY
3045: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3046: LD_ADDR_OWVAR 21
3050: PUSH
3051: LD_EXP 21
3055: PUSH
3056: LD_VAR 0 1
3060: ARRAY
3061: ST_TO_ADDR
// uc_side := side ;
3062: LD_ADDR_OWVAR 20
3066: PUSH
3067: LD_VAR 0 1
3071: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3072: LD_ADDR_VAR 0 4
3076: PUSH
3077: LD_EXP 24
3081: PUSH
3082: LD_VAR 0 3
3086: ARRAY
3087: PUSH
3088: LD_INT 1
3090: ARRAY
3091: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3092: LD_ADDR_VAR 0 5
3096: PUSH
3097: LD_EXP 24
3101: PUSH
3102: LD_VAR 0 3
3106: ARRAY
3107: PUSH
3108: LD_INT 2
3110: ARRAY
3111: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3112: LD_ADDR_VAR 0 6
3116: PUSH
3117: LD_EXP 24
3121: PUSH
3122: LD_VAR 0 3
3126: ARRAY
3127: PUSH
3128: LD_INT 3
3130: ARRAY
3131: ST_TO_ADDR
// if is_depot then
3132: LD_EXP 2
3136: IFFALSE 3269
// begin bc_type = b_depot ;
3138: LD_ADDR_OWVAR 42
3142: PUSH
3143: LD_INT 0
3145: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3146: LD_ADDR_VAR 0 10
3150: PUSH
3151: LD_VAR 0 4
3155: PPUSH
3156: LD_VAR 0 5
3160: PPUSH
3161: LD_VAR 0 6
3165: PPUSH
3166: CALL_OW 47
3170: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3171: LD_VAR 0 10
3175: PPUSH
3176: LD_STRING @
3178: PUSH
3179: LD_VAR 0 1
3183: STR
3184: PPUSH
3185: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3189: LD_VAR 0 10
3193: PPUSH
3194: CALL_OW 274
3198: PPUSH
3199: LD_INT 1
3201: PPUSH
3202: LD_EXP 7
3206: PUSH
3207: LD_INT 1
3209: ARRAY
3210: PPUSH
3211: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3215: LD_VAR 0 10
3219: PPUSH
3220: CALL_OW 274
3224: PPUSH
3225: LD_INT 2
3227: PPUSH
3228: LD_EXP 7
3232: PUSH
3233: LD_INT 2
3235: ARRAY
3236: PPUSH
3237: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3241: LD_VAR 0 10
3245: PPUSH
3246: CALL_OW 274
3250: PPUSH
3251: LD_INT 3
3253: PPUSH
3254: LD_EXP 7
3258: PUSH
3259: LD_INT 3
3261: ARRAY
3262: PPUSH
3263: CALL_OW 277
// end else
3267: GO 3413
// begin for i := 1 to 3 do
3269: LD_ADDR_VAR 0 7
3273: PUSH
3274: DOUBLE
3275: LD_INT 1
3277: DEC
3278: ST_TO_ADDR
3279: LD_INT 3
3281: PUSH
3282: FOR_TO
3283: IFFALSE 3411
// begin r := starting_resources [ i ] ;
3285: LD_ADDR_VAR 0 8
3289: PUSH
3290: LD_EXP 7
3294: PUSH
3295: LD_VAR 0 7
3299: ARRAY
3300: ST_TO_ADDR
// while r >= 10 do
3301: LD_VAR 0 8
3305: PUSH
3306: LD_INT 10
3308: GREATEREQUAL
3309: IFFALSE 3409
// if r > 50 then
3311: LD_VAR 0 8
3315: PUSH
3316: LD_INT 50
3318: GREATER
3319: IFFALSE 3365
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3321: LD_VAR 0 7
3325: PPUSH
3326: LD_INT 5
3328: PPUSH
3329: LD_VAR 0 4
3333: PPUSH
3334: LD_VAR 0 5
3338: PPUSH
3339: LD_INT 4
3341: PPUSH
3342: LD_INT 0
3344: PPUSH
3345: CALL_OW 60
// r := r - 50 ;
3349: LD_ADDR_VAR 0 8
3353: PUSH
3354: LD_VAR 0 8
3358: PUSH
3359: LD_INT 50
3361: MINUS
3362: ST_TO_ADDR
// end else
3363: GO 3407
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3365: LD_VAR 0 7
3369: PPUSH
3370: LD_VAR 0 8
3374: PUSH
3375: LD_INT 10
3377: DIV
3378: PPUSH
3379: LD_VAR 0 4
3383: PPUSH
3384: LD_VAR 0 5
3388: PPUSH
3389: LD_INT 4
3391: PPUSH
3392: LD_INT 0
3394: PPUSH
3395: CALL_OW 60
// r := 0 ;
3399: LD_ADDR_VAR 0 8
3403: PUSH
3404: LD_INT 0
3406: ST_TO_ADDR
// end ;
3407: GO 3301
// end ;
3409: GO 3282
3411: POP
3412: POP
// end ; for r in starting_crates do
3413: LD_ADDR_VAR 0 8
3417: PUSH
3418: LD_EXP 6
3422: PUSH
3423: FOR_IN
3424: IFFALSE 3456
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3426: LD_INT 1
3428: PPUSH
3429: LD_INT 5
3431: PPUSH
3432: LD_VAR 0 4
3436: PPUSH
3437: LD_VAR 0 5
3441: PPUSH
3442: LD_VAR 0 8
3446: PPUSH
3447: LD_INT 0
3449: PPUSH
3450: CALL_OW 60
3454: GO 3423
3456: POP
3457: POP
// if def_morale_flags then
3458: LD_EXP 46
3462: IFFALSE 3601
// begin x := start_def [ pos ] [ 1 ] ;
3464: LD_ADDR_VAR 0 4
3468: PUSH
3469: LD_EXP 26
3473: PUSH
3474: LD_VAR 0 3
3478: ARRAY
3479: PUSH
3480: LD_INT 1
3482: ARRAY
3483: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3484: LD_ADDR_VAR 0 5
3488: PUSH
3489: LD_EXP 26
3493: PUSH
3494: LD_VAR 0 3
3498: ARRAY
3499: PUSH
3500: LD_INT 2
3502: ARRAY
3503: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3504: LD_VAR 0 4
3508: PPUSH
3509: LD_VAR 0 5
3513: PPUSH
3514: LD_INT 12
3516: PPUSH
3517: LD_INT 2
3519: PPUSH
3520: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3524: LD_ADDR_EXP 27
3528: PUSH
3529: LD_EXP 27
3533: PUSH
3534: LD_VAR 0 1
3538: PPUSH
3539: LD_VAR 0 4
3543: PPUSH
3544: LD_VAR 0 5
3548: PPUSH
3549: LD_INT 1
3551: PUSH
3552: LD_INT 100
3554: PUSH
3555: EMPTY
3556: LIST
3557: LIST
3558: PUSH
3559: LD_INT 2
3561: PUSH
3562: LD_INT 50
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: PUSH
3569: LD_INT 3
3571: PUSH
3572: LD_INT 20
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: PUSH
3579: LD_INT 20
3581: PUSH
3582: LD_INT 100
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: PUSH
3589: EMPTY
3590: LIST
3591: LIST
3592: LIST
3593: LIST
3594: PPUSH
3595: CALL_OW 418
3599: ADD
3600: ST_TO_ADDR
// end ; commander := true ;
3601: LD_ADDR_LOC 1
3605: PUSH
3606: LD_INT 1
3608: ST_TO_ADDR
// soldiers_created := 0 ;
3609: LD_ADDR_LOC 4
3613: PUSH
3614: LD_INT 0
3616: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3617: LD_ADDR_VAR 0 7
3621: PUSH
3622: DOUBLE
3623: LD_INT 1
3625: DEC
3626: ST_TO_ADDR
3627: LD_EXP 3
3631: PUSH
3632: FOR_TO
3633: IFFALSE 3786
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3635: LD_ADDR_VAR 0 4
3639: PUSH
3640: LD_EXP 25
3644: PUSH
3645: LD_VAR 0 3
3649: ARRAY
3650: PUSH
3651: LD_VAR 0 7
3655: ARRAY
3656: PUSH
3657: LD_INT 1
3659: ARRAY
3660: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3661: LD_ADDR_VAR 0 5
3665: PUSH
3666: LD_EXP 25
3670: PUSH
3671: LD_VAR 0 3
3675: ARRAY
3676: PUSH
3677: LD_VAR 0 7
3681: ARRAY
3682: PUSH
3683: LD_INT 2
3685: ARRAY
3686: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3687: LD_ADDR_VAR 0 6
3691: PUSH
3692: LD_EXP 25
3696: PUSH
3697: LD_VAR 0 3
3701: ARRAY
3702: PUSH
3703: LD_VAR 0 7
3707: ARRAY
3708: PUSH
3709: LD_INT 3
3711: ARRAY
3712: ST_TO_ADDR
// bc_type := b_breastwork ;
3713: LD_ADDR_OWVAR 42
3717: PUSH
3718: LD_INT 31
3720: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3721: LD_ADDR_VAR 0 9
3725: PUSH
3726: LD_VAR 0 4
3730: PPUSH
3731: LD_VAR 0 5
3735: PPUSH
3736: LD_VAR 0 6
3740: PPUSH
3741: CALL_OW 47
3745: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3746: LD_INT 1
3748: PPUSH
3749: LD_INT 1
3751: PPUSH
3752: LD_INT 0
3754: PPUSH
3755: LD_INT 0
3757: PPUSH
3758: LD_INT 0
3760: PPUSH
3761: LD_VAR 0 9
3765: PPUSH
3766: CALL 2431 0 6
// soldiers_created := soldiers_created + 1 ;
3770: LD_ADDR_LOC 4
3774: PUSH
3775: LD_LOC 4
3779: PUSH
3780: LD_INT 1
3782: PLUS
3783: ST_TO_ADDR
// end ;
3784: GO 3632
3786: POP
3787: POP
// x := start_def [ pos ] [ 1 ] ;
3788: LD_ADDR_VAR 0 4
3792: PUSH
3793: LD_EXP 26
3797: PUSH
3798: LD_VAR 0 3
3802: ARRAY
3803: PUSH
3804: LD_INT 1
3806: ARRAY
3807: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3808: LD_ADDR_VAR 0 5
3812: PUSH
3813: LD_EXP 26
3817: PUSH
3818: LD_VAR 0 3
3822: ARRAY
3823: PUSH
3824: LD_INT 2
3826: ARRAY
3827: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3828: LD_LOC 8
3832: PUSH
3833: LD_EXP 3
3837: MINUS
3838: PPUSH
3839: LD_INT 1
3841: PPUSH
3842: LD_VAR 0 4
3846: PPUSH
3847: LD_VAR 0 5
3851: PPUSH
3852: LD_INT 5
3854: PPUSH
3855: LD_INT 0
3857: PPUSH
3858: CALL 2431 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3862: LD_LOC 5
3866: PPUSH
3867: LD_INT 2
3869: PPUSH
3870: LD_VAR 0 4
3874: PPUSH
3875: LD_VAR 0 5
3879: PPUSH
3880: LD_INT 5
3882: PPUSH
3883: LD_INT 0
3885: PPUSH
3886: CALL 2431 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3890: LD_LOC 7
3894: PPUSH
3895: LD_INT 3
3897: PPUSH
3898: LD_VAR 0 4
3902: PPUSH
3903: LD_VAR 0 5
3907: PPUSH
3908: LD_INT 5
3910: PPUSH
3911: LD_INT 0
3913: PPUSH
3914: CALL 2431 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3918: LD_LOC 6
3922: PPUSH
3923: LD_INT 4
3925: PPUSH
3926: LD_VAR 0 4
3930: PPUSH
3931: LD_VAR 0 5
3935: PPUSH
3936: LD_INT 5
3938: PPUSH
3939: LD_INT 0
3941: PPUSH
3942: CALL 2431 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3946: LD_EXP 47
3950: PUSH
3951: LD_INT 20
3953: PPUSH
3954: LD_VAR 0 1
3958: PPUSH
3959: CALL_OW 321
3963: PUSH
3964: LD_INT 1
3966: EQUAL
3967: AND
3968: IFFALSE 3985
// SetTech ( tech_SibDet , side , state_researched ) ;
3970: LD_INT 20
3972: PPUSH
3973: LD_VAR 0 1
3977: PPUSH
3978: LD_INT 2
3980: PPUSH
3981: CALL_OW 322
// if def_siberite_bomb = 1 then
3985: LD_EXP 50
3989: PUSH
3990: LD_INT 1
3992: EQUAL
3993: IFFALSE 4027
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3995: LD_INT 25
3997: PPUSH
3998: LD_VAR 0 1
4002: PPUSH
4003: LD_INT 1
4005: PPUSH
4006: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4010: LD_INT 73
4012: PPUSH
4013: LD_VAR 0 1
4017: PPUSH
4018: LD_INT 1
4020: PPUSH
4021: CALL_OW 322
// end else
4025: GO 4057
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4027: LD_INT 25
4029: PPUSH
4030: LD_VAR 0 1
4034: PPUSH
4035: LD_INT 0
4037: PPUSH
4038: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4042: LD_INT 73
4044: PPUSH
4045: LD_VAR 0 1
4049: PPUSH
4050: LD_INT 0
4052: PPUSH
4053: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4057: LD_INT 24
4059: PPUSH
4060: LD_VAR 0 1
4064: PPUSH
4065: LD_INT 0
4067: PPUSH
4068: CALL_OW 322
// global_defined := true ;
4072: LD_ADDR_LOC 3
4076: PUSH
4077: LD_INT 1
4079: ST_TO_ADDR
// end ;
4080: LD_VAR 0 2
4084: RET
// every 0 0$1 do
4085: GO 4087
4087: DISABLE
// if ( def_siberite_bomb > 1 ) then
4088: LD_EXP 50
4092: PUSH
4093: LD_INT 1
4095: GREATER
4096: IFFALSE 4111
// begin wait ( siberite_bomb_Delay ) ;
4098: LD_EXP 12
4102: PPUSH
4103: CALL_OW 67
// EnableSibFiss ;
4107: CALL 4112 0 0
// end ;
4111: END
// function EnableSibFiss ; var i ; begin
4112: LD_INT 0
4114: PPUSH
4115: PPUSH
// for i := 1 to 8 do
4116: LD_ADDR_VAR 0 2
4120: PUSH
4121: DOUBLE
4122: LD_INT 1
4124: DEC
4125: ST_TO_ADDR
4126: LD_INT 8
4128: PUSH
4129: FOR_TO
4130: IFFALSE 4176
// if Side_Positions [ i ] then
4132: LD_EXP 20
4136: PUSH
4137: LD_VAR 0 2
4141: ARRAY
4142: IFFALSE 4174
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4144: LD_INT 25
4146: PPUSH
4147: LD_VAR 0 2
4151: PPUSH
4152: LD_INT 1
4154: PPUSH
4155: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4159: LD_INT 73
4161: PPUSH
4162: LD_VAR 0 2
4166: PPUSH
4167: LD_INT 1
4169: PPUSH
4170: CALL_OW 322
// end ;
4174: GO 4129
4176: POP
4177: POP
// end ;
4178: LD_VAR 0 1
4182: RET
// function prepare_sides ; var i ; begin
4183: LD_INT 0
4185: PPUSH
4186: PPUSH
// global_units := [ ] ;
4187: LD_ADDR_LOC 2
4191: PUSH
4192: EMPTY
4193: ST_TO_ADDR
// global_defined := false ;
4194: LD_ADDR_LOC 3
4198: PUSH
4199: LD_INT 0
4201: ST_TO_ADDR
// CountClassMembers ;
4202: CALL 4252 0 0
// for i := 1 to 8 do
4206: LD_ADDR_VAR 0 2
4210: PUSH
4211: DOUBLE
4212: LD_INT 1
4214: DEC
4215: ST_TO_ADDR
4216: LD_INT 8
4218: PUSH
4219: FOR_TO
4220: IFFALSE 4245
// if Side_Positions [ i ] then
4222: LD_EXP 20
4226: PUSH
4227: LD_VAR 0 2
4231: ARRAY
4232: IFFALSE 4243
// prepare_side ( i ) ;
4234: LD_VAR 0 2
4238: PPUSH
4239: CALL 3019 0 1
4243: GO 4219
4245: POP
4246: POP
// end ;
4247: LD_VAR 0 1
4251: RET
// function CountClassMembers ; var Mode ; begin
4252: LD_INT 0
4254: PPUSH
4255: PPUSH
// if No_Mechs then
4256: LD_EXP 52
4260: IFFALSE 4272
// Mode := 2 else
4262: LD_ADDR_VAR 0 2
4266: PUSH
4267: LD_INT 2
4269: ST_TO_ADDR
4270: GO 4280
// Mode := 1 ;
4272: LD_ADDR_VAR 0 2
4276: PUSH
4277: LD_INT 1
4279: ST_TO_ADDR
// neng := number_of_people ;
4280: LD_ADDR_LOC 5
4284: PUSH
4285: LD_EXP 4
4289: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4290: LD_ADDR_LOC 8
4294: PUSH
4295: LD_LOC 5
4299: PUSH
4300: LD_INT 4
4302: PUSH
4303: LD_INT 3
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: PUSH
4310: LD_VAR 0 2
4314: ARRAY
4315: DIV
4316: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4317: LD_LOC 8
4321: PUSH
4322: LD_EXP 3
4326: LESS
4327: IFFALSE 4339
// nsol := number_of_breastworks ;
4329: LD_ADDR_LOC 8
4333: PUSH
4334: LD_EXP 3
4338: ST_TO_ADDR
// neng := neng - nsol ;
4339: LD_ADDR_LOC 5
4343: PUSH
4344: LD_LOC 5
4348: PUSH
4349: LD_LOC 8
4353: MINUS
4354: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4355: LD_ADDR_LOC 6
4359: PUSH
4360: LD_LOC 5
4364: PUSH
4365: LD_INT 3
4367: PUSH
4368: LD_INT 2
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: PUSH
4375: LD_VAR 0 2
4379: ARRAY
4380: DIV
4381: ST_TO_ADDR
// if ( nsci < 1 ) then
4382: LD_LOC 6
4386: PUSH
4387: LD_INT 1
4389: LESS
4390: IFFALSE 4400
// nsci := 1 ;
4392: LD_ADDR_LOC 6
4396: PUSH
4397: LD_INT 1
4399: ST_TO_ADDR
// neng := neng - nsci ;
4400: LD_ADDR_LOC 5
4404: PUSH
4405: LD_LOC 5
4409: PUSH
4410: LD_LOC 6
4414: MINUS
4415: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4416: LD_ADDR_LOC 7
4420: PUSH
4421: LD_LOC 5
4425: PUSH
4426: LD_INT 2
4428: DIV
4429: PUSH
4430: LD_INT 0
4432: PUSH
4433: EMPTY
4434: LIST
4435: LIST
4436: PUSH
4437: LD_VAR 0 2
4441: ARRAY
4442: ST_TO_ADDR
// neng := neng - nmech ;
4443: LD_ADDR_LOC 5
4447: PUSH
4448: LD_LOC 5
4452: PUSH
4453: LD_LOC 7
4457: MINUS
4458: ST_TO_ADDR
// if ( neng < 1 ) then
4459: LD_LOC 5
4463: PUSH
4464: LD_INT 1
4466: LESS
4467: IFFALSE 4477
// neng := 1 ;
4469: LD_ADDR_LOC 5
4473: PUSH
4474: LD_INT 1
4476: ST_TO_ADDR
// end ;
4477: LD_VAR 0 1
4481: RET
// starting begin disable ( 98 ) ;
4482: LD_INT 98
4484: DISABLE_MARKED
// disable ( 99 ) ;
4485: LD_INT 99
4487: DISABLE_MARKED
// disable ( 400 ) ;
4488: LD_INT 400
4490: DISABLE_MARKED
// disable ( 401 ) ;
4491: LD_INT 401
4493: DISABLE_MARKED
// disable ( 600 ) ;
4494: LD_INT 600
4496: DISABLE_MARKED
// mp_selectmsg := true ;
4497: LD_ADDR_OWVAR 13
4501: PUSH
4502: LD_INT 1
4504: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4505: CALL 68 0 0
// prepare_map_coordinates ;
4509: CALL 1656 0 0
// set_shared_visions_and_alliances ;
4513: CALL 2143 0 0
// ResetFog ;
4517: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4521: LD_OWVAR 2
4525: PPUSH
4526: CALL_OW 520
// prepare_sides ;
4530: CALL 4183 0 0
// Init_Win_Condition ;
4534: CALL 16154 0 0
// InitLimits ;
4538: CALL 9974 0 0
// ShowTimer ;
4542: CALL 10911 0 0
// init_shipments_and_respawning ;
4546: CALL 5671 0 0
// music_nat := Side_Nations [ your_side ] ;
4550: LD_ADDR_OWVAR 71
4554: PUSH
4555: LD_EXP 21
4559: PUSH
4560: LD_OWVAR 2
4564: ARRAY
4565: ST_TO_ADDR
// if IAmSpec then
4566: CALL_OW 531
4570: IFFALSE 4594
// begin fogoff ( true ) ;
4572: LD_INT 1
4574: PPUSH
4575: CALL_OW 344
// CenterNowOnXY ( 79 , 59 ) ;
4579: LD_INT 79
4581: PPUSH
4582: LD_INT 59
4584: PPUSH
4585: CALL_OW 86
// enable ( 400 ) ;
4589: LD_INT 400
4591: ENABLE_MARKED
// end else
4592: GO 4640
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4594: LD_EXP 26
4598: PUSH
4599: LD_EXP 20
4603: PUSH
4604: LD_OWVAR 2
4608: ARRAY
4609: ARRAY
4610: PUSH
4611: LD_INT 1
4613: ARRAY
4614: PPUSH
4615: LD_EXP 26
4619: PUSH
4620: LD_EXP 20
4624: PUSH
4625: LD_OWVAR 2
4629: ARRAY
4630: ARRAY
4631: PUSH
4632: LD_INT 2
4634: ARRAY
4635: PPUSH
4636: CALL_OW 86
// end ; InitApeman ;
4640: CALL 4846 0 0
// if def_builduptime then
4644: LD_EXP 51
4648: IFFALSE 4654
// BeginBuildUp ;
4650: CALL 11359 0 0
// end ; end_of_file
4654: END
// every 20 20$00 trigger apemanNumber do
4655: LD_EXP 29
4659: IFFALSE 4692
4661: GO 4663
4663: DISABLE
// begin enable ;
4664: ENABLE
// if apeLevel >= 8 then
4665: LD_EXP 34
4669: PUSH
4670: LD_INT 8
4672: GREATEREQUAL
4673: IFFALSE 4678
// disable else
4675: DISABLE
4676: GO 4692
// apeLevel := apeLevel + 1 ;
4678: LD_ADDR_EXP 34
4682: PUSH
4683: LD_EXP 34
4687: PUSH
4688: LD_INT 1
4690: PLUS
4691: ST_TO_ADDR
// end ;
4692: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
4693: LD_EXP 29
4697: PUSH
4698: LD_EXP 30
4702: LESS
4703: IFFALSE 4843
4705: GO 4707
4707: DISABLE
4708: LD_INT 0
4710: PPUSH
4711: PPUSH
4712: PPUSH
4713: PPUSH
// begin enable ;
4714: ENABLE
// for i := 1 to apemanPos do
4715: LD_ADDR_VAR 0 1
4719: PUSH
4720: DOUBLE
4721: LD_INT 1
4723: DEC
4724: ST_TO_ADDR
4725: LD_EXP 32
4729: PUSH
4730: FOR_TO
4731: IFFALSE 4841
// begin if apemanPlayerCount [ i ] then
4733: LD_EXP 33
4737: PUSH
4738: LD_VAR 0 1
4742: ARRAY
4743: IFFALSE 4839
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
4745: LD_EXP 33
4749: PUSH
4750: LD_VAR 0 1
4754: ARRAY
4755: PUSH
4756: LD_EXP 32
4760: PUSH
4761: LD_VAR 0 1
4765: ARRAY
4766: GREATER
4767: IFFALSE 4839
// begin ape := PrepareApeman ;
4769: LD_ADDR_VAR 0 2
4773: PUSH
4774: CALL 5346 0 0
4778: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
4779: LD_VAR 0 2
4783: PPUSH
4784: LD_EXP 35
4788: PUSH
4789: LD_VAR 0 1
4793: ARRAY
4794: PPUSH
4795: LD_INT 0
4797: PPUSH
4798: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
4802: LD_ADDR_EXP 32
4806: PUSH
4807: LD_EXP 32
4811: PPUSH
4812: LD_VAR 0 1
4816: PPUSH
4817: LD_EXP 32
4821: PUSH
4822: LD_VAR 0 1
4826: ARRAY
4827: PUSH
4828: LD_VAR 0 2
4832: UNION
4833: PPUSH
4834: CALL_OW 1
4838: ST_TO_ADDR
// end ; end ; end ;
4839: GO 4730
4841: POP
4842: POP
// end ;
4843: PPOPN 4
4845: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
4846: LD_INT 0
4848: PPUSH
4849: PPUSH
4850: PPUSH
4851: PPUSH
4852: PPUSH
4853: PPUSH
4854: PPUSH
// playersAmount := 0 ;
4855: LD_ADDR_VAR 0 3
4859: PUSH
4860: LD_INT 0
4862: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , ] ;
4863: LD_ADDR_VAR 0 7
4867: PUSH
4868: LD_INT 13
4870: PUSH
4871: LD_INT 14
4873: PUSH
4874: LD_INT 15
4876: PUSH
4877: LD_INT 16
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4886: LD_ADDR_EXP 35
4890: PUSH
4891: LD_INT 0
4893: PUSH
4894: LD_INT 0
4896: PUSH
4897: LD_INT 0
4899: PUSH
4900: LD_INT 0
4902: PUSH
4903: LD_INT 0
4905: PUSH
4906: LD_INT 0
4908: PUSH
4909: LD_INT 0
4911: PUSH
4912: LD_INT 0
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: ST_TO_ADDR
// for j = 1 to Side_Positions do
4925: LD_ADDR_VAR 0 4
4929: PUSH
4930: DOUBLE
4931: LD_INT 1
4933: DEC
4934: ST_TO_ADDR
4935: LD_EXP 20
4939: PUSH
4940: FOR_TO
4941: IFFALSE 5008
// if Side_Positions [ j ] then
4943: LD_EXP 20
4947: PUSH
4948: LD_VAR 0 4
4952: ARRAY
4953: IFFALSE 5006
// begin playersAmount := playersAmount + 1 ;
4955: LD_ADDR_VAR 0 3
4959: PUSH
4960: LD_VAR 0 3
4964: PUSH
4965: LD_INT 1
4967: PLUS
4968: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
4969: LD_ADDR_EXP 35
4973: PUSH
4974: LD_EXP 35
4978: PPUSH
4979: LD_VAR 0 4
4983: PPUSH
4984: LD_VAR 0 7
4988: PUSH
4989: LD_EXP 20
4993: PUSH
4994: LD_VAR 0 4
4998: ARRAY
4999: ARRAY
5000: PPUSH
5001: CALL_OW 1
5005: ST_TO_ADDR
// end ;
5006: GO 4940
5008: POP
5009: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5010: LD_ADDR_EXP 31
5014: PUSH
5015: LD_INT 3
5017: PUSH
5018: LD_EXP 13
5022: MUL
5023: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5024: LD_ADDR_EXP 29
5028: PUSH
5029: LD_VAR 0 3
5033: PUSH
5034: LD_EXP 31
5038: MUL
5039: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5040: LD_ADDR_EXP 30
5044: PUSH
5045: LD_EXP 29
5049: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5050: LD_ADDR_EXP 32
5054: PUSH
5055: LD_INT 0
5057: PUSH
5058: LD_INT 0
5060: PUSH
5061: LD_INT 0
5063: PUSH
5064: LD_INT 0
5066: PUSH
5067: LD_INT 0
5069: PUSH
5070: LD_INT 0
5072: PUSH
5073: LD_INT 0
5075: PUSH
5076: LD_INT 0
5078: PUSH
5079: EMPTY
5080: LIST
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5089: LD_ADDR_EXP 33
5093: PUSH
5094: LD_INT 0
5096: PUSH
5097: LD_INT 0
5099: PUSH
5100: LD_INT 0
5102: PUSH
5103: LD_INT 0
5105: PUSH
5106: LD_INT 0
5108: PUSH
5109: LD_INT 0
5111: PUSH
5112: LD_INT 0
5114: PUSH
5115: LD_INT 0
5117: PUSH
5118: EMPTY
5119: LIST
5120: LIST
5121: LIST
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: ST_TO_ADDR
// apeLevel := 1 ;
5128: LD_ADDR_EXP 34
5132: PUSH
5133: LD_INT 1
5135: ST_TO_ADDR
// if not apemanNumber then
5136: LD_EXP 29
5140: NOT
5141: IFFALSE 5145
// exit ;
5143: GO 5341
// for i := 1 to apemanPerPlayer do
5145: LD_ADDR_VAR 0 2
5149: PUSH
5150: DOUBLE
5151: LD_INT 1
5153: DEC
5154: ST_TO_ADDR
5155: LD_EXP 31
5159: PUSH
5160: FOR_TO
5161: IFFALSE 5339
// begin for j := 1 to Side_Positions do
5163: LD_ADDR_VAR 0 4
5167: PUSH
5168: DOUBLE
5169: LD_INT 1
5171: DEC
5172: ST_TO_ADDR
5173: LD_EXP 20
5177: PUSH
5178: FOR_TO
5179: IFFALSE 5335
// if Side_Positions [ j ] then
5181: LD_EXP 20
5185: PUSH
5186: LD_VAR 0 4
5190: ARRAY
5191: IFFALSE 5333
// begin pos := Side_Positions [ j ] ;
5193: LD_ADDR_VAR 0 6
5197: PUSH
5198: LD_EXP 20
5202: PUSH
5203: LD_VAR 0 4
5207: ARRAY
5208: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5209: LD_ADDR_EXP 33
5213: PUSH
5214: LD_EXP 33
5218: PPUSH
5219: LD_VAR 0 4
5223: PPUSH
5224: LD_EXP 33
5228: PUSH
5229: LD_VAR 0 4
5233: ARRAY
5234: PUSH
5235: LD_INT 1
5237: PLUS
5238: PPUSH
5239: CALL_OW 1
5243: ST_TO_ADDR
// ape := PrepareApeman ;
5244: LD_ADDR_VAR 0 5
5248: PUSH
5249: CALL 5346 0 0
5253: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5254: LD_ADDR_EXP 32
5258: PUSH
5259: LD_EXP 32
5263: PPUSH
5264: LD_VAR 0 4
5268: PPUSH
5269: LD_EXP 32
5273: PUSH
5274: LD_VAR 0 4
5278: ARRAY
5279: PPUSH
5280: LD_EXP 32
5284: PUSH
5285: LD_VAR 0 4
5289: ARRAY
5290: PUSH
5291: LD_INT 1
5293: PLUS
5294: PPUSH
5295: LD_VAR 0 5
5299: PPUSH
5300: CALL_OW 1
5304: PPUSH
5305: CALL_OW 1
5309: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5310: LD_VAR 0 5
5314: PPUSH
5315: LD_EXP 35
5319: PUSH
5320: LD_VAR 0 4
5324: ARRAY
5325: PPUSH
5326: LD_INT 0
5328: PPUSH
5329: CALL_OW 49
// end ;
5333: GO 5178
5335: POP
5336: POP
// end ;
5337: GO 5160
5339: POP
5340: POP
// end ;
5341: LD_VAR 0 1
5345: RET
// export function PrepareApeman ; var bonus ; begin
5346: LD_INT 0
5348: PPUSH
5349: PPUSH
// uc_side := 0 ;
5350: LD_ADDR_OWVAR 20
5354: PUSH
5355: LD_INT 0
5357: ST_TO_ADDR
// uc_nation := 0 ;
5358: LD_ADDR_OWVAR 21
5362: PUSH
5363: LD_INT 0
5365: ST_TO_ADDR
// InitHc ;
5366: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
5370: LD_ADDR_VAR 0 2
5374: PUSH
5375: LD_INT 1
5377: NEG
5378: PUSH
5379: LD_INT 0
5381: PUSH
5382: LD_INT 1
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: LIST
5389: PUSH
5390: LD_OWVAR 1
5394: PUSH
5395: LD_INT 3
5397: MOD
5398: PUSH
5399: LD_INT 1
5401: PLUS
5402: ARRAY
5403: ST_TO_ADDR
// hc_class := class_apeman ;
5404: LD_ADDR_OWVAR 28
5408: PUSH
5409: LD_INT 12
5411: ST_TO_ADDR
// hc_gallery :=  ;
5412: LD_ADDR_OWVAR 33
5416: PUSH
5417: LD_STRING 
5419: ST_TO_ADDR
// hc_name :=  ;
5420: LD_ADDR_OWVAR 26
5424: PUSH
5425: LD_STRING 
5427: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
5428: LD_ADDR_OWVAR 31
5432: PUSH
5433: LD_EXP 34
5437: PUSH
5438: LD_VAR 0 2
5442: PLUS
5443: PUSH
5444: LD_EXP 34
5448: PUSH
5449: LD_VAR 0 2
5453: PLUS
5454: PUSH
5455: LD_EXP 34
5459: PUSH
5460: LD_VAR 0 2
5464: PLUS
5465: PUSH
5466: LD_EXP 34
5470: PUSH
5471: LD_VAR 0 2
5475: PLUS
5476: PUSH
5477: EMPTY
5478: LIST
5479: LIST
5480: LIST
5481: LIST
5482: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
5483: LD_ADDR_OWVAR 35
5487: PUSH
5488: LD_INT 10
5490: PUSH
5491: LD_VAR 0 2
5495: MUL
5496: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5497: LD_ADDR_OWVAR 29
5501: PUSH
5502: LD_INT 12
5504: PUSH
5505: LD_INT 10
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: ST_TO_ADDR
// result := CreateHuman ;
5512: LD_ADDR_VAR 0 1
5516: PUSH
5517: CALL_OW 44
5521: ST_TO_ADDR
// end ;
5522: LD_VAR 0 1
5526: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
5527: LD_INT 0
5529: PPUSH
5530: PPUSH
5531: PPUSH
// if not ape then
5532: LD_VAR 0 1
5536: NOT
5537: IFFALSE 5541
// exit ;
5539: GO 5666
// side := GetSide ( ape ) ;
5541: LD_ADDR_VAR 0 3
5545: PUSH
5546: LD_VAR 0 1
5550: PPUSH
5551: CALL_OW 255
5555: ST_TO_ADDR
// if not side then
5556: LD_VAR 0 3
5560: NOT
5561: IFFALSE 5615
// begin for i = 1 to apemanPos do
5563: LD_ADDR_VAR 0 4
5567: PUSH
5568: DOUBLE
5569: LD_INT 1
5571: DEC
5572: ST_TO_ADDR
5573: LD_EXP 32
5577: PUSH
5578: FOR_TO
5579: IFFALSE 5613
// if ape in apemanPos [ i ] then
5581: LD_VAR 0 1
5585: PUSH
5586: LD_EXP 32
5590: PUSH
5591: LD_VAR 0 4
5595: ARRAY
5596: IN
5597: IFFALSE 5611
// begin side := i ;
5599: LD_ADDR_VAR 0 3
5603: PUSH
5604: LD_VAR 0 4
5608: ST_TO_ADDR
// break ;
5609: GO 5613
// end ;
5611: GO 5578
5613: POP
5614: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
5615: LD_ADDR_EXP 32
5619: PUSH
5620: LD_EXP 32
5624: PPUSH
5625: LD_VAR 0 3
5629: PPUSH
5630: LD_EXP 32
5634: PUSH
5635: LD_VAR 0 3
5639: ARRAY
5640: PUSH
5641: LD_VAR 0 1
5645: DIFF
5646: PPUSH
5647: CALL_OW 1
5651: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
5652: LD_ADDR_EXP 29
5656: PUSH
5657: LD_EXP 29
5661: PUSH
5662: LD_INT 1
5664: MINUS
5665: ST_TO_ADDR
// end ; end_of_file
5666: LD_VAR 0 2
5670: RET
// var shipment , respawn , inqueue ; export function init_shipments_and_respawning ; begin
5671: LD_INT 0
5673: PPUSH
// shipment := Rand ( 0 , 3 ) ;
5674: LD_ADDR_LOC 9
5678: PUSH
5679: LD_INT 0
5681: PPUSH
5682: LD_INT 3
5684: PPUSH
5685: CALL_OW 12
5689: ST_TO_ADDR
// respawn := Rand ( 1 , 8 ) ;
5690: LD_ADDR_LOC 10
5694: PUSH
5695: LD_INT 1
5697: PPUSH
5698: LD_INT 8
5700: PPUSH
5701: CALL_OW 12
5705: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5706: LD_ADDR_LOC 11
5710: PUSH
5711: LD_INT 0
5713: PUSH
5714: LD_INT 0
5716: PUSH
5717: LD_INT 0
5719: PUSH
5720: LD_INT 0
5722: PUSH
5723: LD_INT 0
5725: PUSH
5726: LD_INT 0
5728: PUSH
5729: LD_INT 0
5731: PUSH
5732: LD_INT 0
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: LIST
5743: LIST
5744: ST_TO_ADDR
// end ;
5745: LD_VAR 0 1
5749: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
5750: GO 5752
5752: DISABLE
5753: LD_INT 0
5755: PPUSH
5756: PPUSH
5757: PPUSH
5758: PPUSH
// begin if respawning_time_max = 0 then
5759: LD_EXP 11
5763: PUSH
5764: LD_INT 0
5766: EQUAL
5767: IFFALSE 5771
// exit ;
5769: GO 6278
// if respawn = 8 then
5771: LD_LOC 10
5775: PUSH
5776: LD_INT 8
5778: EQUAL
5779: IFFALSE 5791
// respawn := 1 else
5781: LD_ADDR_LOC 10
5785: PUSH
5786: LD_INT 1
5788: ST_TO_ADDR
5789: GO 5805
// respawn := respawn + 1 ;
5791: LD_ADDR_LOC 10
5795: PUSH
5796: LD_LOC 10
5800: PUSH
5801: LD_INT 1
5803: PLUS
5804: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
5805: LD_EXP 20
5809: PUSH
5810: LD_LOC 10
5814: ARRAY
5815: PUSH
5816: LD_LOC 11
5820: PUSH
5821: LD_LOC 10
5825: ARRAY
5826: NOT
5827: AND
5828: IFFALSE 6277
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
5830: LD_ADDR_VAR 0 1
5834: PUSH
5835: LD_INT 21
5837: PUSH
5838: LD_INT 1
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: PUSH
5845: LD_INT 22
5847: PUSH
5848: LD_LOC 10
5852: PUSH
5853: EMPTY
5854: LIST
5855: LIST
5856: PUSH
5857: LD_INT 3
5859: PUSH
5860: LD_INT 23
5862: PUSH
5863: LD_INT 0
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: LIST
5874: LIST
5875: PPUSH
5876: CALL_OW 69
5880: ST_TO_ADDR
// if n < number_of_people then
5881: LD_VAR 0 1
5885: PUSH
5886: LD_EXP 4
5890: LESS
5891: IFFALSE 6274
// begin aktresp := respawn ;
5893: LD_ADDR_VAR 0 3
5897: PUSH
5898: LD_LOC 10
5902: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
5903: LD_ADDR_LOC 11
5907: PUSH
5908: LD_LOC 11
5912: PPUSH
5913: LD_VAR 0 3
5917: PPUSH
5918: LD_INT 1
5920: PPUSH
5921: CALL_OW 1
5925: ST_TO_ADDR
// enable ;
5926: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
5927: LD_EXP 10
5931: PPUSH
5932: LD_EXP 11
5936: PPUSH
5937: CALL_OW 12
5941: PPUSH
5942: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
5946: LD_ADDR_LOC 11
5950: PUSH
5951: LD_LOC 11
5955: PPUSH
5956: LD_VAR 0 3
5960: PPUSH
5961: LD_INT 0
5963: PPUSH
5964: CALL_OW 1
5968: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
5969: LD_ADDR_VAR 0 2
5973: PUSH
5974: LD_INT 21
5976: PUSH
5977: LD_INT 3
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: PUSH
5984: LD_INT 2
5986: PUSH
5987: LD_INT 30
5989: PUSH
5990: LD_INT 0
5992: PUSH
5993: EMPTY
5994: LIST
5995: LIST
5996: PUSH
5997: LD_INT 30
5999: PUSH
6000: LD_INT 1
6002: PUSH
6003: EMPTY
6004: LIST
6005: LIST
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: LIST
6011: PUSH
6012: LD_INT 50
6014: PUSH
6015: EMPTY
6016: LIST
6017: PUSH
6018: LD_INT 22
6020: PUSH
6021: LD_VAR 0 3
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: PPUSH
6036: CALL_OW 69
6040: ST_TO_ADDR
// if building_list = 0 then
6041: LD_VAR 0 2
6045: PUSH
6046: LD_INT 0
6048: EQUAL
6049: IFFALSE 6094
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
6051: LD_ADDR_VAR 0 2
6055: PUSH
6056: LD_INT 21
6058: PUSH
6059: LD_INT 3
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: PUSH
6066: LD_INT 50
6068: PUSH
6069: EMPTY
6070: LIST
6071: PUSH
6072: LD_INT 22
6074: PUSH
6075: LD_VAR 0 3
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: LIST
6088: PPUSH
6089: CALL_OW 69
6093: ST_TO_ADDR
// if building_list = 0 then
6094: LD_VAR 0 2
6098: PUSH
6099: LD_INT 0
6101: EQUAL
6102: IFFALSE 6106
// exit ;
6104: GO 6278
// hc_name :=  ;
6106: LD_ADDR_OWVAR 26
6110: PUSH
6111: LD_STRING 
6113: ST_TO_ADDR
// hc_importance := 0 ;
6114: LD_ADDR_OWVAR 32
6118: PUSH
6119: LD_INT 0
6121: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6122: LD_INT 0
6124: PPUSH
6125: LD_INT 0
6127: PPUSH
6128: LD_EXP 5
6132: PUSH
6133: LD_INT 2
6135: DIV
6136: PPUSH
6137: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
6141: LD_ADDR_OWVAR 21
6145: PUSH
6146: LD_EXP 21
6150: PUSH
6151: LD_VAR 0 3
6155: ARRAY
6156: ST_TO_ADDR
// uc_side := aktresp ;
6157: LD_ADDR_OWVAR 20
6161: PUSH
6162: LD_VAR 0 3
6166: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
6167: LD_ADDR_VAR 0 4
6171: PUSH
6172: LD_VAR 0 2
6176: PUSH
6177: LD_INT 1
6179: PPUSH
6180: LD_VAR 0 2
6184: PUSH
6185: LD_INT 0
6187: PLUS
6188: PPUSH
6189: CALL_OW 12
6193: ARRAY
6194: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
6195: LD_VAR 0 4
6199: PPUSH
6200: CALL_OW 266
6204: PUSH
6205: LD_INT 0
6207: PUSH
6208: LD_INT 1
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: IN
6215: IFFALSE 6227
// n = 25 else
6217: LD_ADDR_VAR 0 1
6221: PUSH
6222: LD_INT 25
6224: ST_TO_ADDR
6225: GO 6235
// n = 10 ;
6227: LD_ADDR_VAR 0 1
6231: PUSH
6232: LD_INT 10
6234: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
6235: CALL_OW 44
6239: PPUSH
6240: LD_VAR 0 4
6244: PPUSH
6245: CALL_OW 250
6249: PPUSH
6250: LD_VAR 0 4
6254: PPUSH
6255: CALL_OW 251
6259: PPUSH
6260: LD_VAR 0 1
6264: PPUSH
6265: LD_INT 1
6267: PPUSH
6268: CALL_OW 50
// end else
6272: GO 6275
// enable ;
6274: ENABLE
// end else
6275: GO 6278
// enable ;
6277: ENABLE
// end ;
6278: PPOPN 4
6280: END
// every 0 0$5 + 0 0$1.1 do var d ;
6281: GO 6283
6283: DISABLE
6284: LD_INT 0
6286: PPUSH
// begin case tick of 1 .. 1 1$0 :
6287: LD_OWVAR 1
6291: PUSH
6292: LD_INT 1
6294: DOUBLE
6295: GREATEREQUAL
6296: IFFALSE 6304
6298: LD_INT 2100
6300: DOUBLE
6301: LESSEQUAL
6302: IFTRUE 6306
6304: GO 6317
6306: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
6307: LD_ADDR_VAR 0 1
6311: PUSH
6312: LD_INT 150
6314: ST_TO_ADDR
6315: GO 6500
6317: LD_INT 2100
6319: PUSH
6320: LD_INT 1
6322: PLUS
6323: DOUBLE
6324: GREATEREQUAL
6325: IFFALSE 6333
6327: LD_INT 10500
6329: DOUBLE
6330: LESSEQUAL
6331: IFTRUE 6335
6333: GO 6346
6335: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
6336: LD_ADDR_VAR 0 1
6340: PUSH
6341: LD_INT 100
6343: ST_TO_ADDR
6344: GO 6500
6346: LD_INT 10500
6348: PUSH
6349: LD_INT 1
6351: PLUS
6352: DOUBLE
6353: GREATEREQUAL
6354: IFFALSE 6362
6356: LD_INT 21000
6358: DOUBLE
6359: LESSEQUAL
6360: IFTRUE 6364
6362: GO 6375
6364: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
6365: LD_ADDR_VAR 0 1
6369: PUSH
6370: LD_INT 90
6372: ST_TO_ADDR
6373: GO 6500
6375: LD_INT 21000
6377: PUSH
6378: LD_INT 1
6380: PLUS
6381: DOUBLE
6382: GREATEREQUAL
6383: IFFALSE 6391
6385: LD_INT 42000
6387: DOUBLE
6388: LESSEQUAL
6389: IFTRUE 6393
6391: GO 6404
6393: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
6394: LD_ADDR_VAR 0 1
6398: PUSH
6399: LD_INT 70
6401: ST_TO_ADDR
6402: GO 6500
6404: LD_INT 42000
6406: PUSH
6407: LD_INT 1
6409: PLUS
6410: DOUBLE
6411: GREATEREQUAL
6412: IFFALSE 6420
6414: LD_INT 63000
6416: DOUBLE
6417: LESSEQUAL
6418: IFTRUE 6422
6420: GO 6433
6422: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
6423: LD_ADDR_VAR 0 1
6427: PUSH
6428: LD_INT 60
6430: ST_TO_ADDR
6431: GO 6500
6433: LD_INT 63000
6435: PUSH
6436: LD_INT 1
6438: PLUS
6439: DOUBLE
6440: GREATEREQUAL
6441: IFFALSE 6449
6443: LD_INT 105000
6445: DOUBLE
6446: LESSEQUAL
6447: IFTRUE 6451
6449: GO 6462
6451: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
6452: LD_ADDR_VAR 0 1
6456: PUSH
6457: LD_INT 35
6459: ST_TO_ADDR
6460: GO 6500
6462: LD_INT 105000
6464: PUSH
6465: LD_INT 1
6467: PLUS
6468: DOUBLE
6469: GREATEREQUAL
6470: IFFALSE 6478
6472: LD_INT 630000
6474: DOUBLE
6475: LESSEQUAL
6476: IFTRUE 6480
6478: GO 6491
6480: POP
// d := 20 ; else
6481: LD_ADDR_VAR 0 1
6485: PUSH
6486: LD_INT 20
6488: ST_TO_ADDR
6489: GO 6500
6491: POP
// d := 0 ; end ;
6492: LD_ADDR_VAR 0 1
6496: PUSH
6497: LD_INT 0
6499: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
6500: LD_INT 1
6502: PPUSH
6503: LD_INT 10000
6505: PPUSH
6506: CALL_OW 12
6510: PUSH
6511: LD_VAR 0 1
6515: PUSH
6516: LD_EXP 8
6520: MUL
6521: LESSEQUAL
6522: IFFALSE 6576
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
6524: LD_INT 1
6526: PPUSH
6527: LD_INT 140
6529: PPUSH
6530: CALL_OW 12
6534: PPUSH
6535: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
6539: LD_ADDR_LOC 9
6543: PUSH
6544: LD_LOC 9
6548: PUSH
6549: LD_INT 1
6551: PLUS
6552: PUSH
6553: LD_INT 4
6555: MOD
6556: ST_TO_ADDR
// CreateCratesArea ( 5 , q1 + shipment , true ) ;
6557: LD_INT 5
6559: PPUSH
6560: LD_INT 4
6562: PUSH
6563: LD_LOC 9
6567: PLUS
6568: PPUSH
6569: LD_INT 1
6571: PPUSH
6572: CALL_OW 55
// end ; enable ;
6576: ENABLE
// end ; end_of_file
6577: PPOPN 1
6579: END
// var activated ; var hadziove ; every 0 0$1 do
6580: GO 6582
6582: DISABLE
// begin wait ( Rand ( 3 3$0 , 10 10$0 ) ) ;
6583: LD_INT 6300
6585: PPUSH
6586: LD_INT 21000
6588: PPUSH
6589: CALL_OW 12
6593: PPUSH
6594: CALL_OW 67
// SetAreaMapShow ( Tree , 1 ) ;
6598: LD_INT 3
6600: PPUSH
6601: LD_INT 1
6603: PPUSH
6604: CALL_OW 424
// activated := true ;
6608: LD_ADDR_LOC 12
6612: PUSH
6613: LD_INT 1
6615: ST_TO_ADDR
// end ;
6616: END
// every 0 0$1 trigger activated do var i , un ;
6617: LD_LOC 12
6621: IFFALSE 6866
6623: GO 6625
6625: DISABLE
6626: LD_INT 0
6628: PPUSH
6629: PPUSH
// begin if not def_tree_function then
6630: LD_EXP 1
6634: NOT
6635: IFFALSE 6639
// exit ;
6637: GO 6866
// ExtraStrings := [ #MultiSmall-Tree & def_tree_function ] ;
6639: LD_ADDR_EXP 53
6643: PUSH
6644: LD_STRING #MultiSmall-Tree
6646: PUSH
6647: LD_EXP 1
6651: STR
6652: PUSH
6653: EMPTY
6654: LIST
6655: ST_TO_ADDR
// for un in FilterUnitsInArea ( Tree , [ f_type , unit_human ] ) diff hadziove do
6656: LD_ADDR_VAR 0 2
6660: PUSH
6661: LD_INT 3
6663: PPUSH
6664: LD_INT 21
6666: PUSH
6667: LD_INT 1
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: PPUSH
6674: CALL_OW 70
6678: PUSH
6679: LD_LOC 13
6683: DIFF
6684: PUSH
6685: FOR_IN
6686: IFFALSE 6847
// begin if GetClass ( un ) in [ class_soldier , class_engineer , class_mechanic , class_scientistic , class_sniper , class_bazooker , class_mortar ] then
6688: LD_VAR 0 2
6692: PPUSH
6693: CALL_OW 257
6697: PUSH
6698: LD_INT 1
6700: PUSH
6701: LD_INT 2
6703: PUSH
6704: LD_INT 3
6706: PUSH
6707: LD_INT 4
6709: PUSH
6710: LD_INT 5
6712: PUSH
6713: LD_INT 9
6715: PUSH
6716: LD_INT 8
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: IN
6728: IFFALSE 6777
// for i := 1 to 4 do
6730: LD_ADDR_VAR 0 1
6734: PUSH
6735: DOUBLE
6736: LD_INT 1
6738: DEC
6739: ST_TO_ADDR
6740: LD_INT 4
6742: PUSH
6743: FOR_TO
6744: IFFALSE 6773
// GiveSkillBonus ( un , i , tree_function [ i ] ) else
6746: LD_VAR 0 2
6750: PPUSH
6751: LD_VAR 0 1
6755: PPUSH
6756: LD_EXP 14
6760: PUSH
6761: LD_VAR 0 1
6765: ARRAY
6766: PPUSH
6767: CALL_OW 238
6771: GO 6743
6773: POP
6774: POP
6775: GO 6845
// if un in [ class_apeman , class_apeman_engineer , class_apeman_kamikaze , class_apeman_soldier ] then
6777: LD_VAR 0 2
6781: PUSH
6782: LD_INT 12
6784: PUSH
6785: LD_INT 16
6787: PUSH
6788: LD_INT 17
6790: PUSH
6791: LD_INT 15
6793: PUSH
6794: EMPTY
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: IN
6800: IFFALSE 6845
// for i := 1 to 4 do
6802: LD_ADDR_VAR 0 1
6806: PUSH
6807: DOUBLE
6808: LD_INT 1
6810: DEC
6811: ST_TO_ADDR
6812: LD_INT 4
6814: PUSH
6815: FOR_TO
6816: IFFALSE 6843
// GiveSkillBonus ( un , i , tree_function [ 5 ] ) ;
6818: LD_VAR 0 2
6822: PPUSH
6823: LD_VAR 0 1
6827: PPUSH
6828: LD_EXP 14
6832: PUSH
6833: LD_INT 5
6835: ARRAY
6836: PPUSH
6837: CALL_OW 238
6841: GO 6815
6843: POP
6844: POP
// end ;
6845: GO 6685
6847: POP
6848: POP
// hadziove := hadziove ^ un ;
6849: LD_ADDR_LOC 13
6853: PUSH
6854: LD_LOC 13
6858: PUSH
6859: LD_VAR 0 2
6863: ADD
6864: ST_TO_ADDR
// enable ;
6865: ENABLE
// end ; end_of_file
6866: PPOPN 2
6868: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6869: LD_VAR 0 1
6873: PPUSH
6874: CALL_OW 266
6878: PUSH
6879: LD_INT 0
6881: PUSH
6882: LD_INT 1
6884: PUSH
6885: EMPTY
6886: LIST
6887: LIST
6888: IN
6889: IFFALSE 6914
// SetBName ( b , @ & GetSide ( b ) ) ;
6891: LD_VAR 0 1
6895: PPUSH
6896: LD_STRING @
6898: PUSH
6899: LD_VAR 0 1
6903: PPUSH
6904: CALL_OW 255
6908: STR
6909: PPUSH
6910: CALL_OW 500
// if def_game_rules then
6914: LD_EXP 37
6918: IFFALSE 6955
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
6920: LD_VAR 0 1
6924: PPUSH
6925: LD_VAR 0 1
6929: PPUSH
6930: CALL_OW 266
6934: PPUSH
6935: LD_VAR 0 1
6939: PPUSH
6940: CALL_OW 255
6944: PPUSH
6945: LD_INT 0
6947: PPUSH
6948: LD_INT 1
6950: PPUSH
6951: CALL 10375 0 5
// end ;
6955: PPOPN 2
6957: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6958: LD_VAR 0 1
6962: PPUSH
6963: CALL_OW 266
6967: PUSH
6968: LD_INT 0
6970: PUSH
6971: LD_INT 1
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: IN
6978: IFFALSE 7003
// SetBName ( b , @ & GetSide ( b ) ) ;
6980: LD_VAR 0 1
6984: PPUSH
6985: LD_STRING @
6987: PUSH
6988: LD_VAR 0 1
6992: PPUSH
6993: CALL_OW 255
6997: STR
6998: PPUSH
6999: CALL_OW 500
// if def_game_rules then
7003: LD_EXP 37
7007: IFFALSE 7046
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7009: LD_VAR 0 1
7013: PPUSH
7014: LD_VAR 0 1
7018: PPUSH
7019: CALL_OW 266
7023: PPUSH
7024: LD_VAR 0 1
7028: PPUSH
7029: CALL_OW 255
7033: PPUSH
7034: LD_VAR 0 2
7038: PPUSH
7039: LD_INT 1
7041: PPUSH
7042: CALL 10375 0 5
// end ;
7046: PPOPN 3
7048: END
// on VehicleConstructed ( veh , fac ) do var side ;
7049: LD_INT 0
7051: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7052: LD_VAR 0 1
7056: PPUSH
7057: CALL_OW 263
7061: PUSH
7062: LD_INT 5
7064: EQUAL
7065: IFFALSE 7207
// begin side := GetSide ( veh ) ;
7067: LD_ADDR_VAR 0 3
7071: PUSH
7072: LD_VAR 0 1
7076: PPUSH
7077: CALL_OW 255
7081: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7082: LD_ADDR_EXP 32
7086: PUSH
7087: LD_EXP 32
7091: PPUSH
7092: LD_VAR 0 3
7096: PPUSH
7097: LD_EXP 32
7101: PUSH
7102: LD_VAR 0 3
7106: ARRAY
7107: PPUSH
7108: LD_INT 52
7110: PUSH
7111: EMPTY
7112: LIST
7113: PPUSH
7114: CALL_OW 72
7118: PUSH
7119: LD_INT 22
7121: PUSH
7122: LD_VAR 0 3
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: PUSH
7131: LD_INT 2
7133: PUSH
7134: LD_INT 33
7136: PUSH
7137: LD_INT 5
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PUSH
7144: LD_INT 25
7146: PUSH
7147: LD_INT 12
7149: PUSH
7150: EMPTY
7151: LIST
7152: LIST
7153: PUSH
7154: LD_INT 25
7156: PUSH
7157: LD_INT 15
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: PUSH
7164: LD_INT 25
7166: PUSH
7167: LD_INT 16
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: PUSH
7174: LD_INT 25
7176: PUSH
7177: LD_INT 17
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: PPUSH
7196: CALL_OW 69
7200: UNION
7201: PPUSH
7202: CALL_OW 1
7206: ST_TO_ADDR
// end ; end ;
7207: PPOPN 3
7209: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7210: LD_INT 0
7212: PPUSH
7213: PPUSH
7214: PPUSH
7215: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7216: LD_VAR 0 1
7220: PPUSH
7221: CALL_OW 257
7225: PUSH
7226: LD_INT 12
7228: PUSH
7229: LD_INT 15
7231: PUSH
7232: LD_INT 17
7234: PUSH
7235: LD_INT 16
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: LIST
7242: LIST
7243: IN
7244: PUSH
7245: LD_VAR 0 1
7249: PPUSH
7250: CALL_OW 263
7254: PUSH
7255: LD_INT 5
7257: EQUAL
7258: OR
7259: IFFALSE 7270
// ApeKilled ( j ) ;
7261: LD_VAR 0 1
7265: PPUSH
7266: CALL 5527 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7270: LD_VAR 0 1
7274: PPUSH
7275: CALL_OW 266
7279: PUSH
7280: LD_INT 0
7282: PUSH
7283: LD_INT 1
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: IN
7290: IFFALSE 7372
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7292: LD_ADDR_VAR 0 4
7296: PUSH
7297: LD_EXP 20
7301: PUSH
7302: LD_VAR 0 1
7306: PPUSH
7307: CALL_OW 255
7311: ARRAY
7312: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7313: LD_ADDR_VAR 0 2
7317: PUSH
7318: LD_EXP 26
7322: PUSH
7323: LD_VAR 0 4
7327: ARRAY
7328: PUSH
7329: LD_INT 1
7331: ARRAY
7332: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7333: LD_ADDR_VAR 0 3
7337: PUSH
7338: LD_EXP 26
7342: PUSH
7343: LD_VAR 0 4
7347: ARRAY
7348: PUSH
7349: LD_INT 2
7351: ARRAY
7352: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7353: LD_VAR 0 2
7357: PPUSH
7358: LD_VAR 0 3
7362: PPUSH
7363: CALL_OW 420
7367: PPUSH
7368: CALL_OW 419
// end ; if def_game_rules then
7372: LD_EXP 37
7376: IFFALSE 7475
// if ( GetType ( j ) = 3 ) then
7378: LD_VAR 0 1
7382: PPUSH
7383: CALL_OW 247
7387: PUSH
7388: LD_INT 3
7390: EQUAL
7391: IFFALSE 7431
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7393: LD_VAR 0 1
7397: PPUSH
7398: LD_VAR 0 1
7402: PPUSH
7403: CALL_OW 266
7407: PPUSH
7408: LD_VAR 0 1
7412: PPUSH
7413: CALL_OW 255
7417: PPUSH
7418: LD_INT 0
7420: PPUSH
7421: LD_INT 1
7423: NEG
7424: PPUSH
7425: CALL 10375 0 5
7429: GO 7475
// if ( GetChassis ( j ) = 25 ) then
7431: LD_VAR 0 1
7435: PPUSH
7436: CALL_OW 265
7440: PUSH
7441: LD_INT 25
7443: EQUAL
7444: IFFALSE 7475
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7446: LD_VAR 0 1
7450: PPUSH
7451: LD_INT 37
7453: PPUSH
7454: LD_VAR 0 1
7458: PPUSH
7459: CALL_OW 255
7463: PPUSH
7464: LD_INT 0
7466: PPUSH
7467: LD_INT 1
7469: NEG
7470: PPUSH
7471: CALL 10375 0 5
// end ;
7475: PPOPN 5
7477: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7478: LD_EXP 37
7482: PUSH
7483: LD_VAR 0 1
7487: PPUSH
7488: CALL_OW 265
7492: PUSH
7493: LD_INT 25
7495: EQUAL
7496: AND
7497: IFFALSE 7529
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
7499: LD_VAR 0 1
7503: PPUSH
7504: LD_INT 37
7506: PPUSH
7507: LD_VAR 0 1
7511: PPUSH
7512: CALL_OW 255
7516: PPUSH
7517: LD_VAR 0 3
7521: PPUSH
7522: LD_INT 1
7524: PPUSH
7525: CALL 10375 0 5
// end ;
7529: PPOPN 4
7531: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7532: LD_VAR 0 1
7536: PPUSH
7537: LD_VAR 0 2
7541: PPUSH
7542: LD_VAR 0 3
7546: PPUSH
7547: LD_OWVAR 2
7551: PPUSH
7552: CALL 11120 0 4
7556: PPOPN 3
7558: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7559: LD_INT 0
7561: PPUSH
7562: PPUSH
// for un in battle_flags_id do
7563: LD_ADDR_VAR 0 2
7567: PUSH
7568: LD_EXP 27
7572: PUSH
7573: FOR_IN
7574: IFFALSE 7649
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7576: LD_VAR 0 2
7580: PPUSH
7581: LD_INT 1
7583: PUSH
7584: LD_LOC 14
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: PUSH
7593: LD_INT 2
7595: PUSH
7596: LD_LOC 14
7600: PUSH
7601: LD_INT 2
7603: DIV
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: PUSH
7609: LD_INT 3
7611: PUSH
7612: LD_LOC 14
7616: PUSH
7617: LD_INT 5
7619: DIV
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: PUSH
7625: LD_INT 20
7627: PUSH
7628: LD_LOC 14
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: PPUSH
7643: CALL_OW 423
7647: GO 7573
7649: POP
7650: POP
// end ;
7651: LD_VAR 0 1
7655: RET
// every 0 0$0.1 do var un ;
7656: GO 7658
7658: DISABLE
7659: LD_INT 0
7661: PPUSH
// begin if not def_morale_flags then
7662: LD_EXP 46
7666: NOT
7667: IFFALSE 7671
// exit ;
7669: GO 7748
// if not morale_decreasing_time then
7671: LD_EXP 9
7675: NOT
7676: IFFALSE 7680
// exit ;
7678: GO 7748
// strength = 100 ;
7680: LD_ADDR_LOC 14
7684: PUSH
7685: LD_INT 100
7687: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7688: LD_EXP 9
7692: PPUSH
7693: CALL_OW 67
// strength := strength - 1 ;
7697: LD_ADDR_LOC 14
7701: PUSH
7702: LD_LOC 14
7706: PUSH
7707: LD_INT 1
7709: MINUS
7710: ST_TO_ADDR
// Update_Flags ;
7711: CALL 7559 0 0
// until not strength ;
7715: LD_LOC 14
7719: NOT
7720: IFFALSE 7688
// for un in battle_flags_id do
7722: LD_ADDR_VAR 0 1
7726: PUSH
7727: LD_EXP 27
7731: PUSH
7732: FOR_IN
7733: IFFALSE 7746
// KillBattleFlag ( un ) ;
7735: LD_VAR 0 1
7739: PPUSH
7740: CALL_OW 419
7744: GO 7732
7746: POP
7747: POP
// end ; end_of_file
7748: PPOPN 1
7750: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
7751: LD_INT 0
7753: PPUSH
7754: PPUSH
// if ( not IAmSpec ) then
7755: CALL_OW 531
7759: NOT
7760: IFFALSE 7776
// Result := Limits_Info ^  ;
7762: LD_ADDR_VAR 0 1
7766: PUSH
7767: LD_LOC 26
7771: PUSH
7772: LD_STRING 
7774: ADD
7775: ST_TO_ADDR
// for i := 1 to 8 do
7776: LD_ADDR_VAR 0 2
7780: PUSH
7781: DOUBLE
7782: LD_INT 1
7784: DEC
7785: ST_TO_ADDR
7786: LD_INT 8
7788: PUSH
7789: FOR_TO
7790: IFFALSE 7835
// if Cheaters [ i ] then
7792: LD_LOC 27
7796: PUSH
7797: LD_VAR 0 2
7801: ARRAY
7802: IFFALSE 7833
// Result := Result ^ [ #Cheater , i , i ] ;
7804: LD_ADDR_VAR 0 1
7808: PUSH
7809: LD_VAR 0 1
7813: PUSH
7814: LD_STRING #Cheater
7816: PUSH
7817: LD_VAR 0 2
7821: PUSH
7822: LD_VAR 0 2
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: LIST
7831: ADD
7832: ST_TO_ADDR
7833: GO 7789
7835: POP
7836: POP
// end ;
7837: LD_VAR 0 1
7841: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
7842: LD_INT 0
7844: PPUSH
7845: PPUSH
7846: PPUSH
7847: PPUSH
7848: PPUSH
// case Game_Type of 10 :
7849: LD_EXP 36
7853: PUSH
7854: LD_INT 10
7856: DOUBLE
7857: EQUAL
7858: IFTRUE 7862
7860: GO 7873
7862: POP
// def_game_rules := 1 ; 11 :
7863: LD_ADDR_EXP 37
7867: PUSH
7868: LD_INT 1
7870: ST_TO_ADDR
7871: GO 7893
7873: LD_INT 11
7875: DOUBLE
7876: EQUAL
7877: IFTRUE 7881
7879: GO 7892
7881: POP
// def_game_rules := 3 ; end ;
7882: LD_ADDR_EXP 37
7886: PUSH
7887: LD_INT 3
7889: ST_TO_ADDR
7890: GO 7893
7892: POP
// case def_game_rules of 0 :
7893: LD_EXP 37
7897: PUSH
7898: LD_INT 0
7900: DOUBLE
7901: EQUAL
7902: IFTRUE 7906
7904: GO 7911
7906: POP
// exit ; 1 :
7907: GO 9969
7909: GO 9869
7911: LD_INT 1
7913: DOUBLE
7914: EQUAL
7915: IFTRUE 7919
7917: GO 8135
7919: POP
// begin def_base_level := 2 ;
7920: LD_ADDR_EXP 38
7924: PUSH
7925: LD_INT 2
7927: ST_TO_ADDR
// def_amount_of_people := 2 ;
7928: LD_ADDR_EXP 39
7932: PUSH
7933: LD_INT 2
7935: ST_TO_ADDR
// def_skill_level := 1 ;
7936: LD_ADDR_EXP 40
7940: PUSH
7941: LD_INT 1
7943: ST_TO_ADDR
// def_starting_resources := 2 ;
7944: LD_ADDR_EXP 41
7948: PUSH
7949: LD_INT 2
7951: ST_TO_ADDR
// def_shipments_density := 1 ;
7952: LD_ADDR_EXP 42
7956: PUSH
7957: LD_INT 1
7959: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
7960: LD_ADDR_EXP 43
7964: PUSH
7965: LD_INT 0
7967: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
7968: LD_ADDR_EXP 44
7972: PUSH
7973: LD_INT 1
7975: ST_TO_ADDR
// def_shared_vision := 1 ;
7976: LD_ADDR_EXP 45
7980: PUSH
7981: LD_INT 1
7983: ST_TO_ADDR
// def_morale_flags := 3 ;
7984: LD_ADDR_EXP 46
7988: PUSH
7989: LD_INT 3
7991: ST_TO_ADDR
// def_siberite_detection := 1 ;
7992: LD_ADDR_EXP 47
7996: PUSH
7997: LD_INT 1
7999: ST_TO_ADDR
// def_people_respawning := 1 ;
8000: LD_ADDR_EXP 48
8004: PUSH
8005: LD_INT 1
8007: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
8008: LD_ADDR_EXP 49
8012: PUSH
8013: LD_INT 1
8015: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8016: LD_ADDR_EXP 50
8020: PUSH
8021: LD_INT 0
8023: ST_TO_ADDR
// def_builduptime := 2 ;
8024: LD_ADDR_EXP 51
8028: PUSH
8029: LD_INT 2
8031: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
8032: LD_ADDR_VAR 0 2
8036: PUSH
8037: EMPTY
8038: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8039: LD_ADDR_VAR 0 3
8043: PUSH
8044: EMPTY
8045: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8046: LD_ADDR_LOC 21
8050: PUSH
8051: EMPTY
8052: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8053: LD_ADDR_LOC 22
8057: PUSH
8058: EMPTY
8059: ST_TO_ADDR
// Banned_Controls := [ ] ;
8060: LD_ADDR_LOC 23
8064: PUSH
8065: EMPTY
8066: ST_TO_ADDR
// Banned_Engines := [ ] ;
8067: LD_ADDR_LOC 24
8071: PUSH
8072: EMPTY
8073: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
8074: LD_ADDR_LOC 19
8078: PUSH
8079: LD_INT 37
8081: PUSH
8082: EMPTY
8083: LIST
8084: PUSH
8085: LD_INT 4
8087: PUSH
8088: LD_INT 5
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: PUSH
8095: LD_INT 31
8097: PUSH
8098: LD_INT 32
8100: PUSH
8101: LD_INT 33
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: LIST
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: LIST
8113: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
8114: LD_ADDR_LOC 20
8118: PUSH
8119: LD_INT 2
8121: PUSH
8122: LD_INT 2
8124: PUSH
8125: LD_INT 4
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: LIST
8132: ST_TO_ADDR
// end ; 2 :
8133: GO 9869
8135: LD_INT 2
8137: DOUBLE
8138: EQUAL
8139: IFTRUE 8143
8141: GO 8352
8143: POP
// begin def_base_level := 1 ;
8144: LD_ADDR_EXP 38
8148: PUSH
8149: LD_INT 1
8151: ST_TO_ADDR
// def_amount_of_people := 2 ;
8152: LD_ADDR_EXP 39
8156: PUSH
8157: LD_INT 2
8159: ST_TO_ADDR
// def_skill_level := 3 ;
8160: LD_ADDR_EXP 40
8164: PUSH
8165: LD_INT 3
8167: ST_TO_ADDR
// def_starting_resources := 3 ;
8168: LD_ADDR_EXP 41
8172: PUSH
8173: LD_INT 3
8175: ST_TO_ADDR
// def_shipments_density := 2 ;
8176: LD_ADDR_EXP 42
8180: PUSH
8181: LD_INT 2
8183: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8184: LD_ADDR_EXP 43
8188: PUSH
8189: LD_INT 1
8191: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8192: LD_ADDR_EXP 44
8196: PUSH
8197: LD_INT 2
8199: ST_TO_ADDR
// def_shared_vision := 1 ;
8200: LD_ADDR_EXP 45
8204: PUSH
8205: LD_INT 1
8207: ST_TO_ADDR
// def_morale_flags := 0 ;
8208: LD_ADDR_EXP 46
8212: PUSH
8213: LD_INT 0
8215: ST_TO_ADDR
// def_siberite_detection := 1 ;
8216: LD_ADDR_EXP 47
8220: PUSH
8221: LD_INT 1
8223: ST_TO_ADDR
// def_people_respawning := 0 ;
8224: LD_ADDR_EXP 48
8228: PUSH
8229: LD_INT 0
8231: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
8232: LD_ADDR_EXP 49
8236: PUSH
8237: LD_INT 0
8239: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8240: LD_ADDR_EXP 50
8244: PUSH
8245: LD_INT 0
8247: ST_TO_ADDR
// def_builduptime := 2 ;
8248: LD_ADDR_EXP 51
8252: PUSH
8253: LD_INT 2
8255: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
8256: LD_ADDR_VAR 0 2
8260: PUSH
8261: LD_INT 1
8263: PUSH
8264: EMPTY
8265: LIST
8266: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8267: LD_ADDR_VAR 0 3
8271: PUSH
8272: EMPTY
8273: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8274: LD_ADDR_LOC 21
8278: PUSH
8279: EMPTY
8280: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8281: LD_ADDR_LOC 22
8285: PUSH
8286: EMPTY
8287: ST_TO_ADDR
// Banned_Controls := [ ] ;
8288: LD_ADDR_LOC 23
8292: PUSH
8293: EMPTY
8294: ST_TO_ADDR
// Banned_Engines := [ ] ;
8295: LD_ADDR_LOC 24
8299: PUSH
8300: EMPTY
8301: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
8302: LD_ADDR_LOC 19
8306: PUSH
8307: LD_INT 4
8309: PUSH
8310: LD_INT 5
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: PUSH
8317: LD_INT 31
8319: PUSH
8320: LD_INT 32
8322: PUSH
8323: LD_INT 33
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: LIST
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
8335: LD_ADDR_LOC 20
8339: PUSH
8340: LD_INT 1
8342: PUSH
8343: LD_INT 2
8345: PUSH
8346: EMPTY
8347: LIST
8348: LIST
8349: ST_TO_ADDR
// end ; 3 :
8350: GO 9869
8352: LD_INT 3
8354: DOUBLE
8355: EQUAL
8356: IFTRUE 8360
8358: GO 8603
8360: POP
// begin def_base_level := 1 ;
8361: LD_ADDR_EXP 38
8365: PUSH
8366: LD_INT 1
8368: ST_TO_ADDR
// def_amount_of_people := 2 ;
8369: LD_ADDR_EXP 39
8373: PUSH
8374: LD_INT 2
8376: ST_TO_ADDR
// def_skill_level := 3 ;
8377: LD_ADDR_EXP 40
8381: PUSH
8382: LD_INT 3
8384: ST_TO_ADDR
// def_starting_resources := 3 ;
8385: LD_ADDR_EXP 41
8389: PUSH
8390: LD_INT 3
8392: ST_TO_ADDR
// def_shipments_density := 1 ;
8393: LD_ADDR_EXP 42
8397: PUSH
8398: LD_INT 1
8400: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8401: LD_ADDR_EXP 43
8405: PUSH
8406: LD_INT 0
8408: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
8409: LD_ADDR_EXP 44
8413: PUSH
8414: LD_INT 1
8416: ST_TO_ADDR
// def_shared_vision := 1 ;
8417: LD_ADDR_EXP 45
8421: PUSH
8422: LD_INT 1
8424: ST_TO_ADDR
// def_morale_flags := 0 ;
8425: LD_ADDR_EXP 46
8429: PUSH
8430: LD_INT 0
8432: ST_TO_ADDR
// def_siberite_detection := 1 ;
8433: LD_ADDR_EXP 47
8437: PUSH
8438: LD_INT 1
8440: ST_TO_ADDR
// def_people_respawning := 0 ;
8441: LD_ADDR_EXP 48
8445: PUSH
8446: LD_INT 0
8448: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
8449: LD_ADDR_EXP 49
8453: PUSH
8454: LD_INT 2
8456: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8457: LD_ADDR_EXP 50
8461: PUSH
8462: LD_INT 0
8464: ST_TO_ADDR
// def_builduptime := 1 ;
8465: LD_ADDR_EXP 51
8469: PUSH
8470: LD_INT 1
8472: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
8473: LD_ADDR_VAR 0 2
8477: PUSH
8478: LD_INT 23
8480: PUSH
8481: EMPTY
8482: LIST
8483: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
8484: LD_ADDR_VAR 0 3
8488: PUSH
8489: LD_INT 2
8491: PUSH
8492: LD_INT 37
8494: PUSH
8495: LD_INT 32
8497: PUSH
8498: LD_INT 33
8500: PUSH
8501: LD_INT 36
8503: PUSH
8504: LD_INT 16
8506: PUSH
8507: LD_INT 23
8509: PUSH
8510: LD_INT 21
8512: PUSH
8513: LD_INT 18
8515: PUSH
8516: LD_INT 22
8518: PUSH
8519: LD_INT 20
8521: PUSH
8522: LD_INT 19
8524: PUSH
8525: LD_INT 25
8527: PUSH
8528: LD_INT 17
8530: PUSH
8531: LD_INT 24
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8551: LD_ADDR_LOC 21
8555: PUSH
8556: EMPTY
8557: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8558: LD_ADDR_LOC 22
8562: PUSH
8563: EMPTY
8564: ST_TO_ADDR
// Banned_Controls := [ ] ;
8565: LD_ADDR_LOC 23
8569: PUSH
8570: EMPTY
8571: ST_TO_ADDR
// Banned_Engines := [ ] ;
8572: LD_ADDR_LOC 24
8576: PUSH
8577: EMPTY
8578: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8579: LD_ADDR_LOC 19
8583: PUSH
8584: EMPTY
8585: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8586: LD_ADDR_LOC 20
8590: PUSH
8591: EMPTY
8592: ST_TO_ADDR
// No_Mechs := true ;
8593: LD_ADDR_EXP 52
8597: PUSH
8598: LD_INT 1
8600: ST_TO_ADDR
// end ; 4 :
8601: GO 9869
8603: LD_INT 4
8605: DOUBLE
8606: EQUAL
8607: IFTRUE 8611
8609: GO 8786
8611: POP
// begin def_base_level := 1 ;
8612: LD_ADDR_EXP 38
8616: PUSH
8617: LD_INT 1
8619: ST_TO_ADDR
// def_amount_of_people := 2 ;
8620: LD_ADDR_EXP 39
8624: PUSH
8625: LD_INT 2
8627: ST_TO_ADDR
// def_skill_level := 3 ;
8628: LD_ADDR_EXP 40
8632: PUSH
8633: LD_INT 3
8635: ST_TO_ADDR
// def_starting_resources := 3 ;
8636: LD_ADDR_EXP 41
8640: PUSH
8641: LD_INT 3
8643: ST_TO_ADDR
// def_shipments_density := 2 ;
8644: LD_ADDR_EXP 42
8648: PUSH
8649: LD_INT 2
8651: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8652: LD_ADDR_EXP 43
8656: PUSH
8657: LD_INT 1
8659: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8660: LD_ADDR_EXP 44
8664: PUSH
8665: LD_INT 2
8667: ST_TO_ADDR
// def_shared_vision := 1 ;
8668: LD_ADDR_EXP 45
8672: PUSH
8673: LD_INT 1
8675: ST_TO_ADDR
// def_morale_flags := 0 ;
8676: LD_ADDR_EXP 46
8680: PUSH
8681: LD_INT 0
8683: ST_TO_ADDR
// def_siberite_detection := 1 ;
8684: LD_ADDR_EXP 47
8688: PUSH
8689: LD_INT 1
8691: ST_TO_ADDR
// def_people_respawning := 0 ;
8692: LD_ADDR_EXP 48
8696: PUSH
8697: LD_INT 0
8699: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
8700: LD_ADDR_EXP 49
8704: PUSH
8705: LD_INT 0
8707: ST_TO_ADDR
// def_siberite_bomb := 1 ;
8708: LD_ADDR_EXP 50
8712: PUSH
8713: LD_INT 1
8715: ST_TO_ADDR
// def_builduptime := 3 ;
8716: LD_ADDR_EXP 51
8720: PUSH
8721: LD_INT 3
8723: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
8724: LD_ADDR_VAR 0 2
8728: PUSH
8729: LD_INT 1
8731: PUSH
8732: EMPTY
8733: LIST
8734: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8735: LD_ADDR_VAR 0 3
8739: PUSH
8740: EMPTY
8741: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8742: LD_ADDR_LOC 21
8746: PUSH
8747: EMPTY
8748: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8749: LD_ADDR_LOC 22
8753: PUSH
8754: EMPTY
8755: ST_TO_ADDR
// Banned_Controls := [ ] ;
8756: LD_ADDR_LOC 23
8760: PUSH
8761: EMPTY
8762: ST_TO_ADDR
// Banned_Engines := [ ] ;
8763: LD_ADDR_LOC 24
8767: PUSH
8768: EMPTY
8769: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8770: LD_ADDR_LOC 19
8774: PUSH
8775: EMPTY
8776: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8777: LD_ADDR_LOC 20
8781: PUSH
8782: EMPTY
8783: ST_TO_ADDR
// end ; 5 :
8784: GO 9869
8786: LD_INT 5
8788: DOUBLE
8789: EQUAL
8790: IFTRUE 8794
8792: GO 9043
8794: POP
// begin def_base_level := 0 ;
8795: LD_ADDR_EXP 38
8799: PUSH
8800: LD_INT 0
8802: ST_TO_ADDR
// def_amount_of_people := 0 ;
8803: LD_ADDR_EXP 39
8807: PUSH
8808: LD_INT 0
8810: ST_TO_ADDR
// def_skill_level := 0 ;
8811: LD_ADDR_EXP 40
8815: PUSH
8816: LD_INT 0
8818: ST_TO_ADDR
// def_starting_resources := 0 ;
8819: LD_ADDR_EXP 41
8823: PUSH
8824: LD_INT 0
8826: ST_TO_ADDR
// def_shipments_density := 0 ;
8827: LD_ADDR_EXP 42
8831: PUSH
8832: LD_INT 0
8834: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8835: LD_ADDR_EXP 43
8839: PUSH
8840: LD_INT 0
8842: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
8843: LD_ADDR_EXP 44
8847: PUSH
8848: LD_INT 0
8850: ST_TO_ADDR
// def_shared_vision := 1 ;
8851: LD_ADDR_EXP 45
8855: PUSH
8856: LD_INT 1
8858: ST_TO_ADDR
// def_morale_flags := 0 ;
8859: LD_ADDR_EXP 46
8863: PUSH
8864: LD_INT 0
8866: ST_TO_ADDR
// def_siberite_detection := 0 ;
8867: LD_ADDR_EXP 47
8871: PUSH
8872: LD_INT 0
8874: ST_TO_ADDR
// def_people_respawning := 1 ;
8875: LD_ADDR_EXP 48
8879: PUSH
8880: LD_INT 1
8882: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
8883: LD_ADDR_EXP 49
8887: PUSH
8888: LD_INT 1
8890: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8891: LD_ADDR_EXP 50
8895: PUSH
8896: LD_INT 0
8898: ST_TO_ADDR
// def_builduptime := 0 ;
8899: LD_ADDR_EXP 51
8903: PUSH
8904: LD_INT 0
8906: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
8907: LD_ADDR_VAR 0 2
8911: PUSH
8912: LD_INT 10
8914: PUSH
8915: LD_INT 3
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
8922: LD_ADDR_VAR 0 3
8926: PUSH
8927: LD_INT 12
8929: PUSH
8930: LD_INT 11
8932: PUSH
8933: LD_INT 14
8935: PUSH
8936: LD_INT 13
8938: PUSH
8939: LD_INT 5
8941: PUSH
8942: LD_INT 24
8944: PUSH
8945: LD_INT 21
8947: PUSH
8948: LD_INT 33
8950: PUSH
8951: LD_INT 36
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
8965: LD_ADDR_LOC 21
8969: PUSH
8970: LD_INT 31
8972: PUSH
8973: EMPTY
8974: LIST
8975: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8976: LD_ADDR_LOC 22
8980: PUSH
8981: EMPTY
8982: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
8983: LD_ADDR_LOC 23
8987: PUSH
8988: LD_INT 2
8990: PUSH
8991: EMPTY
8992: LIST
8993: ST_TO_ADDR
// Banned_Engines := [ ] ;
8994: LD_ADDR_LOC 24
8998: PUSH
8999: EMPTY
9000: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
9001: LD_ADDR_LOC 19
9005: PUSH
9006: LD_INT 4
9008: PUSH
9009: EMPTY
9010: LIST
9011: PUSH
9012: LD_INT 31
9014: PUSH
9015: LD_INT 32
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
9026: LD_ADDR_LOC 20
9030: PUSH
9031: LD_INT 1
9033: PUSH
9034: LD_INT 1
9036: PUSH
9037: EMPTY
9038: LIST
9039: LIST
9040: ST_TO_ADDR
// end ; 6 :
9041: GO 9869
9043: LD_INT 6
9045: DOUBLE
9046: EQUAL
9047: IFTRUE 9051
9049: GO 9254
9051: POP
// begin def_base_level := 1 ;
9052: LD_ADDR_EXP 38
9056: PUSH
9057: LD_INT 1
9059: ST_TO_ADDR
// def_amount_of_people := 2 ;
9060: LD_ADDR_EXP 39
9064: PUSH
9065: LD_INT 2
9067: ST_TO_ADDR
// def_skill_level := 3 ;
9068: LD_ADDR_EXP 40
9072: PUSH
9073: LD_INT 3
9075: ST_TO_ADDR
// def_starting_resources := 3 ;
9076: LD_ADDR_EXP 41
9080: PUSH
9081: LD_INT 3
9083: ST_TO_ADDR
// def_shipments_density := 1 ;
9084: LD_ADDR_EXP 42
9088: PUSH
9089: LD_INT 1
9091: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9092: LD_ADDR_EXP 43
9096: PUSH
9097: LD_INT 0
9099: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9100: LD_ADDR_EXP 44
9104: PUSH
9105: LD_INT 1
9107: ST_TO_ADDR
// def_shared_vision := 1 ;
9108: LD_ADDR_EXP 45
9112: PUSH
9113: LD_INT 1
9115: ST_TO_ADDR
// def_morale_flags := 0 ;
9116: LD_ADDR_EXP 46
9120: PUSH
9121: LD_INT 0
9123: ST_TO_ADDR
// def_siberite_detection := 1 ;
9124: LD_ADDR_EXP 47
9128: PUSH
9129: LD_INT 1
9131: ST_TO_ADDR
// def_people_respawning := 2 ;
9132: LD_ADDR_EXP 48
9136: PUSH
9137: LD_INT 2
9139: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9140: LD_ADDR_EXP 49
9144: PUSH
9145: LD_INT 1
9147: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9148: LD_ADDR_EXP 50
9152: PUSH
9153: LD_INT 0
9155: ST_TO_ADDR
// def_builduptime := 1 ;
9156: LD_ADDR_EXP 51
9160: PUSH
9161: LD_INT 1
9163: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9164: LD_ADDR_VAR 0 2
9168: PUSH
9169: LD_INT 23
9171: PUSH
9172: EMPTY
9173: LIST
9174: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
9175: LD_ADDR_VAR 0 3
9179: PUSH
9180: LD_INT 2
9182: PUSH
9183: LD_INT 37
9185: PUSH
9186: LD_INT 31
9188: PUSH
9189: LD_INT 32
9191: PUSH
9192: LD_INT 33
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9202: LD_ADDR_LOC 21
9206: PUSH
9207: EMPTY
9208: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9209: LD_ADDR_LOC 22
9213: PUSH
9214: EMPTY
9215: ST_TO_ADDR
// Banned_Controls := [ ] ;
9216: LD_ADDR_LOC 23
9220: PUSH
9221: EMPTY
9222: ST_TO_ADDR
// Banned_Engines := [ ] ;
9223: LD_ADDR_LOC 24
9227: PUSH
9228: EMPTY
9229: ST_TO_ADDR
// Restricted_Builds := [ ] ;
9230: LD_ADDR_LOC 19
9234: PUSH
9235: EMPTY
9236: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
9237: LD_ADDR_LOC 20
9241: PUSH
9242: EMPTY
9243: ST_TO_ADDR
// No_Mechs := true ;
9244: LD_ADDR_EXP 52
9248: PUSH
9249: LD_INT 1
9251: ST_TO_ADDR
// end ; 7 :
9252: GO 9869
9254: LD_INT 7
9256: DOUBLE
9257: EQUAL
9258: IFTRUE 9262
9260: GO 9460
9262: POP
// begin def_base_level := 1 ;
9263: LD_ADDR_EXP 38
9267: PUSH
9268: LD_INT 1
9270: ST_TO_ADDR
// def_amount_of_people := 2 ;
9271: LD_ADDR_EXP 39
9275: PUSH
9276: LD_INT 2
9278: ST_TO_ADDR
// def_skill_level := 3 ;
9279: LD_ADDR_EXP 40
9283: PUSH
9284: LD_INT 3
9286: ST_TO_ADDR
// def_starting_resources := 3 ;
9287: LD_ADDR_EXP 41
9291: PUSH
9292: LD_INT 3
9294: ST_TO_ADDR
// def_shipments_density := 1 ;
9295: LD_ADDR_EXP 42
9299: PUSH
9300: LD_INT 1
9302: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9303: LD_ADDR_EXP 43
9307: PUSH
9308: LD_INT 1
9310: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9311: LD_ADDR_EXP 44
9315: PUSH
9316: LD_INT 2
9318: ST_TO_ADDR
// def_shared_vision := 1 ;
9319: LD_ADDR_EXP 45
9323: PUSH
9324: LD_INT 1
9326: ST_TO_ADDR
// def_morale_flags := 0 ;
9327: LD_ADDR_EXP 46
9331: PUSH
9332: LD_INT 0
9334: ST_TO_ADDR
// def_siberite_detection := 1 ;
9335: LD_ADDR_EXP 47
9339: PUSH
9340: LD_INT 1
9342: ST_TO_ADDR
// def_people_respawning := 0 ;
9343: LD_ADDR_EXP 48
9347: PUSH
9348: LD_INT 0
9350: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9351: LD_ADDR_EXP 49
9355: PUSH
9356: LD_INT 1
9358: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9359: LD_ADDR_EXP 50
9363: PUSH
9364: LD_INT 0
9366: ST_TO_ADDR
// def_builduptime := 3 ;
9367: LD_ADDR_EXP 51
9371: PUSH
9372: LD_INT 3
9374: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9375: LD_ADDR_VAR 0 2
9379: PUSH
9380: LD_INT 23
9382: PUSH
9383: EMPTY
9384: LIST
9385: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
9386: LD_ADDR_VAR 0 3
9390: PUSH
9391: LD_INT 37
9393: PUSH
9394: EMPTY
9395: LIST
9396: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9397: LD_ADDR_LOC 21
9401: PUSH
9402: EMPTY
9403: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9404: LD_ADDR_LOC 22
9408: PUSH
9409: EMPTY
9410: ST_TO_ADDR
// Banned_Controls := [ ] ;
9411: LD_ADDR_LOC 23
9415: PUSH
9416: EMPTY
9417: ST_TO_ADDR
// Banned_Engines := [ ] ;
9418: LD_ADDR_LOC 24
9422: PUSH
9423: EMPTY
9424: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9425: LD_ADDR_LOC 19
9429: PUSH
9430: LD_INT 31
9432: PUSH
9433: LD_INT 32
9435: PUSH
9436: LD_INT 33
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: LIST
9443: PUSH
9444: EMPTY
9445: LIST
9446: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
9447: LD_ADDR_LOC 20
9451: PUSH
9452: LD_INT 10
9454: PUSH
9455: EMPTY
9456: LIST
9457: ST_TO_ADDR
// end ; 8 :
9458: GO 9869
9460: LD_INT 8
9462: DOUBLE
9463: EQUAL
9464: IFTRUE 9468
9466: GO 9868
9468: POP
// begin def_base_level := 0 ;
9469: LD_ADDR_EXP 38
9473: PUSH
9474: LD_INT 0
9476: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
9477: LD_ADDR_EXP 39
9481: PUSH
9482: LD_INT 0
9484: PPUSH
9485: LD_INT 1
9487: PPUSH
9488: CALL_OW 12
9492: ST_TO_ADDR
// def_skill_level := 0 ;
9493: LD_ADDR_EXP 40
9497: PUSH
9498: LD_INT 0
9500: ST_TO_ADDR
// def_starting_resources := 2 ;
9501: LD_ADDR_EXP 41
9505: PUSH
9506: LD_INT 2
9508: ST_TO_ADDR
// def_shipments_density := 1 ;
9509: LD_ADDR_EXP 42
9513: PUSH
9514: LD_INT 1
9516: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9517: LD_ADDR_EXP 43
9521: PUSH
9522: LD_INT 0
9524: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
9525: LD_ADDR_EXP 44
9529: PUSH
9530: LD_INT 0
9532: ST_TO_ADDR
// def_shared_vision := 1 ;
9533: LD_ADDR_EXP 45
9537: PUSH
9538: LD_INT 1
9540: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
9541: LD_ADDR_EXP 46
9545: PUSH
9546: LD_INT 0
9548: PPUSH
9549: LD_INT 2
9551: PPUSH
9552: CALL_OW 12
9556: ST_TO_ADDR
// def_siberite_detection := 0 ;
9557: LD_ADDR_EXP 47
9561: PUSH
9562: LD_INT 0
9564: ST_TO_ADDR
// def_people_respawning := 0 ;
9565: LD_ADDR_EXP 48
9569: PUSH
9570: LD_INT 0
9572: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
9573: LD_ADDR_EXP 49
9577: PUSH
9578: LD_INT 2
9580: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9581: LD_ADDR_EXP 50
9585: PUSH
9586: LD_INT 0
9588: ST_TO_ADDR
// def_builduptime := 0 ;
9589: LD_ADDR_EXP 51
9593: PUSH
9594: LD_INT 0
9596: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
9597: LD_ADDR_VAR 0 2
9601: PUSH
9602: LD_INT 23
9604: PUSH
9605: LD_INT 20
9607: PUSH
9608: LD_INT 40
9610: PUSH
9611: LD_INT 47
9613: PUSH
9614: LD_INT 46
9616: PUSH
9617: LD_INT 39
9619: PUSH
9620: LD_INT 71
9622: PUSH
9623: LD_INT 34
9625: PUSH
9626: LD_INT 41
9628: PUSH
9629: LD_INT 44
9631: PUSH
9632: LD_INT 17
9634: PUSH
9635: LD_INT 16
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
9652: LD_ADDR_VAR 0 3
9656: PUSH
9657: LD_INT 37
9659: PUSH
9660: LD_INT 5
9662: PUSH
9663: LD_INT 13
9665: PUSH
9666: LD_INT 34
9668: PUSH
9669: LD_INT 12
9671: PUSH
9672: LD_INT 15
9674: PUSH
9675: LD_INT 11
9677: PUSH
9678: LD_INT 14
9680: PUSH
9681: LD_INT 29
9683: PUSH
9684: LD_INT 30
9686: PUSH
9687: LD_INT 28
9689: PUSH
9690: LD_INT 24
9692: PUSH
9693: LD_INT 25
9695: PUSH
9696: LD_INT 20
9698: PUSH
9699: LD_INT 21
9701: PUSH
9702: LD_INT 22
9704: PUSH
9705: LD_INT 36
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9727: LD_ADDR_LOC 21
9731: PUSH
9732: EMPTY
9733: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
9734: LD_ADDR_LOC 22
9738: PUSH
9739: LD_INT 14
9741: PUSH
9742: EMPTY
9743: LIST
9744: ST_TO_ADDR
// Banned_Controls := [ ] ;
9745: LD_ADDR_LOC 23
9749: PUSH
9750: EMPTY
9751: ST_TO_ADDR
// Banned_Engines := [ ] ;
9752: LD_ADDR_LOC 24
9756: PUSH
9757: EMPTY
9758: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
9759: LD_ADDR_LOC 19
9763: PUSH
9764: LD_INT 31
9766: PUSH
9767: LD_INT 32
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: PUSH
9774: LD_INT 4
9776: PUSH
9777: EMPTY
9778: LIST
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
9784: LD_ADDR_LOC 20
9788: PUSH
9789: LD_INT 2
9791: PUSH
9792: LD_INT 1
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: ST_TO_ADDR
// for i := 1 to 8 do
9799: LD_ADDR_VAR 0 4
9803: PUSH
9804: DOUBLE
9805: LD_INT 1
9807: DEC
9808: ST_TO_ADDR
9809: LD_INT 8
9811: PUSH
9812: FOR_TO
9813: IFFALSE 9864
// if ( Side_Nations [ i ] = 3 ) then
9815: LD_EXP 21
9819: PUSH
9820: LD_VAR 0 4
9824: ARRAY
9825: PUSH
9826: LD_INT 3
9828: EQUAL
9829: IFFALSE 9862
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
9831: LD_ADDR_EXP 21
9835: PUSH
9836: LD_EXP 21
9840: PPUSH
9841: LD_VAR 0 4
9845: PPUSH
9846: LD_INT 1
9848: PPUSH
9849: LD_INT 2
9851: PPUSH
9852: CALL_OW 12
9856: PPUSH
9857: CALL_OW 1
9861: ST_TO_ADDR
9862: GO 9812
9864: POP
9865: POP
// end ; end ;
9866: GO 9869
9868: POP
// for i := 1 to 8 do
9869: LD_ADDR_VAR 0 4
9873: PUSH
9874: DOUBLE
9875: LD_INT 1
9877: DEC
9878: ST_TO_ADDR
9879: LD_INT 8
9881: PUSH
9882: FOR_TO
9883: IFFALSE 9967
// if Side_Positions [ i ] then
9885: LD_EXP 20
9889: PUSH
9890: LD_VAR 0 4
9894: ARRAY
9895: IFFALSE 9965
// begin for j in Unavailable_Techs do
9897: LD_ADDR_VAR 0 5
9901: PUSH
9902: LD_VAR 0 2
9906: PUSH
9907: FOR_IN
9908: IFFALSE 9929
// SetTech ( j , i , 0 ) ;
9910: LD_VAR 0 5
9914: PPUSH
9915: LD_VAR 0 4
9919: PPUSH
9920: LD_INT 0
9922: PPUSH
9923: CALL_OW 322
9927: GO 9907
9929: POP
9930: POP
// for j in Unavailable_Builds do
9931: LD_ADDR_VAR 0 5
9935: PUSH
9936: LD_VAR 0 3
9940: PUSH
9941: FOR_IN
9942: IFFALSE 9963
// SetRestrict ( j , i , 0 ) ;
9944: LD_VAR 0 5
9948: PPUSH
9949: LD_VAR 0 4
9953: PPUSH
9954: LD_INT 0
9956: PPUSH
9957: CALL_OW 324
9961: GO 9941
9963: POP
9964: POP
// end ;
9965: GO 9882
9967: POP
9968: POP
// end ;
9969: LD_VAR 0 1
9973: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
9974: LD_INT 0
9976: PPUSH
9977: PPUSH
9978: PPUSH
9979: PPUSH
9980: PPUSH
9981: PPUSH
9982: PPUSH
// for i := 1 to Restricted_Builds do
9983: LD_ADDR_VAR 0 2
9987: PUSH
9988: DOUBLE
9989: LD_INT 1
9991: DEC
9992: ST_TO_ADDR
9993: LD_LOC 19
9997: PUSH
9998: FOR_TO
9999: IFFALSE 10309
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
10001: LD_LOC 19
10005: PUSH
10006: LD_VAR 0 2
10010: ARRAY
10011: PUSH
10012: LD_INT 1
10014: ARRAY
10015: PUSH
10016: LD_INT 31
10018: DOUBLE
10019: EQUAL
10020: IFTRUE 10036
10022: LD_INT 32
10024: DOUBLE
10025: EQUAL
10026: IFTRUE 10036
10028: LD_INT 33
10030: DOUBLE
10031: EQUAL
10032: IFTRUE 10036
10034: GO 10047
10036: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
10037: LD_ADDR_VAR 0 6
10041: PUSH
10042: LD_STRING #Turrets
10044: ST_TO_ADDR
10045: GO 10092
10047: LD_INT 4
10049: DOUBLE
10050: EQUAL
10051: IFTRUE 10061
10053: LD_INT 5
10055: DOUBLE
10056: EQUAL
10057: IFTRUE 10061
10059: GO 10072
10061: POP
// btype := #Armouries ; b_Behemoth :
10062: LD_ADDR_VAR 0 6
10066: PUSH
10067: LD_STRING #Armouries
10069: ST_TO_ADDR
10070: GO 10092
10072: LD_INT 37
10074: DOUBLE
10075: EQUAL
10076: IFTRUE 10080
10078: GO 10091
10080: POP
// btype := #Behemoths ; end ;
10081: LD_ADDR_VAR 0 6
10085: PUSH
10086: LD_STRING #Behemoths
10088: ST_TO_ADDR
10089: GO 10092
10091: POP
// list := [ ] ;
10092: LD_ADDR_VAR 0 7
10096: PUSH
10097: EMPTY
10098: ST_TO_ADDR
// for j := 1 to 8 do
10099: LD_ADDR_VAR 0 3
10103: PUSH
10104: DOUBLE
10105: LD_INT 1
10107: DEC
10108: ST_TO_ADDR
10109: LD_INT 8
10111: PUSH
10112: FOR_TO
10113: IFFALSE 10206
// if Side_Positions [ j ] then
10115: LD_EXP 20
10119: PUSH
10120: LD_VAR 0 3
10124: ARRAY
10125: IFFALSE 10204
// begin amount := 0 ;
10127: LD_ADDR_VAR 0 5
10131: PUSH
10132: LD_INT 0
10134: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
10135: LD_ADDR_VAR 0 4
10139: PUSH
10140: LD_LOC 19
10144: PUSH
10145: LD_VAR 0 2
10149: ARRAY
10150: PUSH
10151: FOR_IN
10152: IFFALSE 10200
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
10154: LD_ADDR_VAR 0 5
10158: PUSH
10159: LD_VAR 0 5
10163: PUSH
10164: LD_INT 22
10166: PUSH
10167: LD_VAR 0 3
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: PUSH
10176: LD_INT 30
10178: PUSH
10179: LD_VAR 0 4
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: PPUSH
10192: CALL_OW 69
10196: PLUS
10197: ST_TO_ADDR
10198: GO 10151
10200: POP
10201: POP
// break ;
10202: GO 10206
// end ;
10204: GO 10112
10206: POP
10207: POP
// list := [ ] ;
10208: LD_ADDR_VAR 0 7
10212: PUSH
10213: EMPTY
10214: ST_TO_ADDR
// for j := 1 to 8 do
10215: LD_ADDR_VAR 0 3
10219: PUSH
10220: DOUBLE
10221: LD_INT 1
10223: DEC
10224: ST_TO_ADDR
10225: LD_INT 8
10227: PUSH
10228: FOR_TO
10229: IFFALSE 10249
// list := list ^ amount ;
10231: LD_ADDR_VAR 0 7
10235: PUSH
10236: LD_VAR 0 7
10240: PUSH
10241: LD_VAR 0 5
10245: ADD
10246: ST_TO_ADDR
10247: GO 10228
10249: POP
10250: POP
// Already_Built := Already_Built ^ [ list ] ;
10251: LD_ADDR_LOC 25
10255: PUSH
10256: LD_LOC 25
10260: PUSH
10261: LD_VAR 0 7
10265: PUSH
10266: EMPTY
10267: LIST
10268: ADD
10269: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
10270: LD_ADDR_LOC 26
10274: PUSH
10275: LD_LOC 26
10279: PUSH
10280: LD_VAR 0 6
10284: PUSH
10285: LD_VAR 0 5
10289: PUSH
10290: LD_LOC 20
10294: PUSH
10295: LD_VAR 0 2
10299: ARRAY
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: LIST
10305: ADD
10306: ST_TO_ADDR
// end ;
10307: GO 9998
10309: POP
10310: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10311: LD_ADDR_LOC 27
10315: PUSH
10316: LD_INT 0
10318: PUSH
10319: LD_INT 0
10321: PUSH
10322: LD_INT 0
10324: PUSH
10325: LD_INT 0
10327: PUSH
10328: LD_INT 0
10330: PUSH
10331: LD_INT 0
10333: PUSH
10334: LD_INT 0
10336: PUSH
10337: LD_INT 0
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: ST_TO_ADDR
// if Limits_Info then
10350: LD_LOC 26
10354: IFFALSE 10370
// Limits_Info := #Limits ^ Limits_Info ;
10356: LD_ADDR_LOC 26
10360: PUSH
10361: LD_STRING #Limits
10363: PUSH
10364: LD_LOC 26
10368: ADD
10369: ST_TO_ADDR
// end ;
10370: LD_VAR 0 1
10374: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
10375: LD_INT 0
10377: PPUSH
10378: PPUSH
10379: PPUSH
10380: PPUSH
// for i := 1 to Restricted_Builds do
10381: LD_ADDR_VAR 0 7
10385: PUSH
10386: DOUBLE
10387: LD_INT 1
10389: DEC
10390: ST_TO_ADDR
10391: LD_LOC 19
10395: PUSH
10396: FOR_TO
10397: IFFALSE 10820
// if BType in Restricted_Builds [ i ] then
10399: LD_VAR 0 2
10403: PUSH
10404: LD_LOC 19
10408: PUSH
10409: LD_VAR 0 7
10413: ARRAY
10414: IN
10415: IFFALSE 10818
// begin if old_side then
10417: LD_VAR 0 4
10421: IFFALSE 10547
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
10423: LD_LOC 25
10427: PUSH
10428: LD_VAR 0 7
10432: ARRAY
10433: PUSH
10434: LD_VAR 0 3
10438: ARRAY
10439: PUSH
10440: LD_VAR 0 5
10444: PLUS
10445: PUSH
10446: LD_LOC 20
10450: PUSH
10451: LD_VAR 0 7
10455: ARRAY
10456: GREATER
10457: IFFALSE 10483
// begin SetSide ( un , old_side ) ;
10459: LD_VAR 0 1
10463: PPUSH
10464: LD_VAR 0 4
10468: PPUSH
10469: CALL_OW 235
// count := 0 ;
10473: LD_ADDR_VAR 0 5
10477: PUSH
10478: LD_INT 0
10480: ST_TO_ADDR
// end else
10481: GO 10547
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
10483: LD_ADDR_LOC 25
10487: PUSH
10488: LD_LOC 25
10492: PPUSH
10493: LD_VAR 0 7
10497: PPUSH
10498: LD_LOC 25
10502: PUSH
10503: LD_VAR 0 7
10507: ARRAY
10508: PPUSH
10509: LD_VAR 0 4
10513: PPUSH
10514: LD_LOC 25
10518: PUSH
10519: LD_VAR 0 7
10523: ARRAY
10524: PUSH
10525: LD_VAR 0 4
10529: ARRAY
10530: PUSH
10531: LD_VAR 0 5
10535: MINUS
10536: PPUSH
10537: CALL_OW 1
10541: PPUSH
10542: CALL_OW 1
10546: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
10547: LD_ADDR_LOC 25
10551: PUSH
10552: LD_LOC 25
10556: PPUSH
10557: LD_VAR 0 7
10561: PPUSH
10562: LD_LOC 25
10566: PUSH
10567: LD_VAR 0 7
10571: ARRAY
10572: PPUSH
10573: LD_VAR 0 3
10577: PPUSH
10578: LD_LOC 25
10582: PUSH
10583: LD_VAR 0 7
10587: ARRAY
10588: PUSH
10589: LD_VAR 0 3
10593: ARRAY
10594: PUSH
10595: LD_VAR 0 5
10599: PLUS
10600: PPUSH
10601: CALL_OW 1
10605: PPUSH
10606: CALL_OW 1
10610: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
10611: LD_VAR 0 5
10615: PUSH
10616: LD_INT 0
10618: NONEQUAL
10619: PUSH
10620: LD_VAR 0 3
10624: PUSH
10625: LD_OWVAR 2
10629: EQUAL
10630: AND
10631: IFFALSE 10674
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
10633: LD_ADDR_LOC 26
10637: PUSH
10638: LD_LOC 26
10642: PPUSH
10643: LD_INT 3
10645: PUSH
10646: LD_VAR 0 7
10650: MUL
10651: PPUSH
10652: LD_LOC 25
10656: PUSH
10657: LD_VAR 0 7
10661: ARRAY
10662: PUSH
10663: LD_VAR 0 3
10667: ARRAY
10668: PPUSH
10669: CALL_OW 1
10673: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
10674: LD_LOC 25
10678: PUSH
10679: LD_VAR 0 7
10683: ARRAY
10684: PUSH
10685: LD_VAR 0 3
10689: ARRAY
10690: PUSH
10691: LD_LOC 20
10695: PUSH
10696: LD_VAR 0 7
10700: ARRAY
10701: GREATER
10702: IFFALSE 10729
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
10704: LD_ADDR_LOC 27
10708: PUSH
10709: LD_LOC 27
10713: PPUSH
10714: LD_VAR 0 3
10718: PPUSH
10719: LD_INT 1
10721: PPUSH
10722: CALL_OW 1
10726: ST_TO_ADDR
// end else
10727: GO 10816
// begin for j := 1 to Restricted_Builds do
10729: LD_ADDR_VAR 0 8
10733: PUSH
10734: DOUBLE
10735: LD_INT 1
10737: DEC
10738: ST_TO_ADDR
10739: LD_LOC 19
10743: PUSH
10744: FOR_TO
10745: IFFALSE 10789
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
10747: LD_LOC 25
10751: PUSH
10752: LD_VAR 0 8
10756: ARRAY
10757: PUSH
10758: LD_VAR 0 3
10762: ARRAY
10763: PUSH
10764: LD_LOC 20
10768: PUSH
10769: LD_VAR 0 8
10773: ARRAY
10774: GREATER
10775: IFFALSE 10787
// begin Is_Cheater := true ;
10777: LD_ADDR_VAR 0 9
10781: PUSH
10782: LD_INT 1
10784: ST_TO_ADDR
// break ;
10785: GO 10789
// end ;
10787: GO 10744
10789: POP
10790: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
10791: LD_ADDR_LOC 27
10795: PUSH
10796: LD_LOC 27
10800: PPUSH
10801: LD_VAR 0 3
10805: PPUSH
10806: LD_VAR 0 9
10810: PPUSH
10811: CALL_OW 1
10815: ST_TO_ADDR
// end ; break ;
10816: GO 10820
// end ;
10818: GO 10396
10820: POP
10821: POP
// end ;
10822: LD_VAR 0 6
10826: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
10827: LD_VAR 0 5
10831: PUSH
10832: LD_LOC 21
10836: IN
10837: PUSH
10838: LD_VAR 0 2
10842: PUSH
10843: LD_LOC 22
10847: IN
10848: OR
10849: PUSH
10850: LD_VAR 0 4
10854: PUSH
10855: LD_LOC 23
10859: IN
10860: OR
10861: PUSH
10862: LD_VAR 0 3
10866: PUSH
10867: LD_LOC 24
10871: IN
10872: OR
10873: IFFALSE 10884
// ComCancel ( factory ) ;
10875: LD_VAR 0 1
10879: PPUSH
10880: CALL_OW 127
// end ;
10884: PPOPN 5
10886: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
10887: LD_VAR 0 2
10891: PUSH
10892: LD_LOC 21
10896: IN
10897: IFFALSE 10908
// ComCancel ( building ) ;
10899: LD_VAR 0 1
10903: PPUSH
10904: CALL_OW 127
// end ; end_of_file
10908: PPOPN 2
10910: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
10911: LD_INT 0
10913: PPUSH
10914: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
10915: LD_ADDR_VAR 0 2
10919: PUSH
10920: LD_STRING #Multi1x1-Time
10922: PUSH
10923: LD_OWVAR 1
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: ST_TO_ADDR
// if WaitServerStrings then
10932: LD_EXP 54
10936: IFFALSE 10954
// AllStrings = AllStrings ^ WaitServerStrings ;
10938: LD_ADDR_VAR 0 2
10942: PUSH
10943: LD_VAR 0 2
10947: PUSH
10948: LD_EXP 54
10952: ADD
10953: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
10954: LD_INT 0
10956: PUSH
10957: LD_EXP 12
10961: PUSH
10962: LD_OWVAR 1
10966: MINUS
10967: LESSEQUAL
10968: IFFALSE 10999
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
10970: LD_ADDR_VAR 0 2
10974: PUSH
10975: LD_VAR 0 2
10979: PUSH
10980: LD_STRING #allowedsibbomb
10982: PUSH
10983: LD_EXP 12
10987: PUSH
10988: LD_OWVAR 1
10992: MINUS
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: ADD
10998: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
10999: LD_INT 0
11001: PUSH
11002: LD_EXP 16
11006: PUSH
11007: LD_OWVAR 1
11011: MINUS
11012: LESSEQUAL
11013: IFFALSE 11044
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
11015: LD_ADDR_VAR 0 2
11019: PUSH
11020: LD_VAR 0 2
11024: PUSH
11025: LD_STRING #builduptime
11027: PUSH
11028: LD_EXP 16
11032: PUSH
11033: LD_OWVAR 1
11037: MINUS
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: ADD
11043: ST_TO_ADDR
// if ( ExtraStrings ) then
11044: LD_EXP 53
11048: IFFALSE 11070
// AllStrings := AllStrings ^  ^ ExtraStrings ;
11050: LD_ADDR_VAR 0 2
11054: PUSH
11055: LD_VAR 0 2
11059: PUSH
11060: LD_STRING 
11062: ADD
11063: PUSH
11064: LD_EXP 53
11068: ADD
11069: ST_TO_ADDR
// if ( LimitsStrings ) then
11070: CALL 7751 0 0
11074: IFFALSE 11096
// AllStrings := AllStrings ^  ^ LimitsStrings ;
11076: LD_ADDR_VAR 0 2
11080: PUSH
11081: LD_VAR 0 2
11085: PUSH
11086: LD_STRING 
11088: ADD
11089: PUSH
11090: CALL 7751 0 0
11094: ADD
11095: ST_TO_ADDR
// Display_Strings := AllStrings ;
11096: LD_ADDR_OWVAR 47
11100: PUSH
11101: LD_VAR 0 2
11105: ST_TO_ADDR
// end ;
11106: LD_VAR 0 1
11110: RET
// every 0 0$1 do
11111: GO 11113
11113: DISABLE
// begin ShowTimer ;
11114: CALL 10911 0 0
// enable ;
11118: ENABLE
// end ; end_of_file
11119: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
11120: LD_INT 0
11122: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
11123: LD_VAR 0 1
11127: PPUSH
11128: CALL_OW 255
11132: PUSH
11133: LD_VAR 0 4
11137: EQUAL
11138: IFFALSE 11157
// begin SetAchievement ( ACH_RAD ) ;
11140: LD_STRING ACH_RAD
11142: PPUSH
11143: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
11147: LD_STRING ACH_NL
11149: PPUSH
11150: LD_INT 1
11152: PPUSH
11153: CALL_OW 564
// end end ;
11157: LD_VAR 0 5
11161: RET
// export function SA_Win ( side ) ; begin
11162: LD_INT 0
11164: PPUSH
// case side of 1 :
11165: LD_VAR 0 1
11169: PUSH
11170: LD_INT 1
11172: DOUBLE
11173: EQUAL
11174: IFTRUE 11178
11176: GO 11191
11178: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
11179: LD_STRING ACH_AH
11181: PPUSH
11182: LD_INT 1
11184: PPUSH
11185: CALL_OW 564
11189: GO 11354
11191: LD_INT 2
11193: DOUBLE
11194: EQUAL
11195: IFTRUE 11199
11197: GO 11212
11199: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
11200: LD_STRING ACH_E
11202: PPUSH
11203: LD_INT 1
11205: PPUSH
11206: CALL_OW 564
11210: GO 11354
11212: LD_INT 3
11214: DOUBLE
11215: EQUAL
11216: IFTRUE 11220
11218: GO 11233
11220: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
11221: LD_STRING ACH_OOL
11223: PPUSH
11224: LD_INT 1
11226: PPUSH
11227: CALL_OW 564
11231: GO 11354
11233: LD_INT 1
11235: PUSH
11236: LD_INT 2
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: DOUBLE
11243: EQUAL
11244: IFTRUE 11248
11246: GO 11273
11248: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
11249: LD_STRING ACH_AH
11251: PPUSH
11252: LD_REAL  5.00000000000000E-0001
11255: PPUSH
11256: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
11260: LD_STRING ACH_E
11262: PPUSH
11263: LD_REAL  5.00000000000000E-0001
11266: PPUSH
11267: CALL_OW 564
// end ; [ 2 , 3 ] :
11271: GO 11354
11273: LD_INT 2
11275: PUSH
11276: LD_INT 3
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: DOUBLE
11283: EQUAL
11284: IFTRUE 11288
11286: GO 11313
11288: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
11289: LD_STRING ACH_OOL
11291: PPUSH
11292: LD_REAL  5.00000000000000E-0001
11295: PPUSH
11296: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
11300: LD_STRING ACH_E
11302: PPUSH
11303: LD_REAL  5.00000000000000E-0001
11306: PPUSH
11307: CALL_OW 564
// end ; [ 3 , 1 ] :
11311: GO 11354
11313: LD_INT 3
11315: PUSH
11316: LD_INT 1
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: DOUBLE
11323: EQUAL
11324: IFTRUE 11328
11326: GO 11353
11328: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
11329: LD_STRING ACH_AH
11331: PPUSH
11332: LD_REAL  5.00000000000000E-0001
11335: PPUSH
11336: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
11340: LD_STRING ACH_OOL
11342: PPUSH
11343: LD_REAL  5.00000000000000E-0001
11346: PPUSH
11347: CALL_OW 564
// end ; end ;
11351: GO 11354
11353: POP
// end ; end_of_file
11354: LD_VAR 0 2
11358: RET
// export BuildUpAreas , BuildUp ; export function BeginBuildUp ; var i , j ; begin
11359: LD_INT 0
11361: PPUSH
11362: PPUSH
11363: PPUSH
// enable ( 600 ) ;
11364: LD_INT 600
11366: ENABLE_MARKED
// BuildUp = true ;
11367: LD_ADDR_EXP 56
11371: PUSH
11372: LD_INT 1
11374: ST_TO_ADDR
// for i := 1 to BuildUpAreas do
11375: LD_ADDR_VAR 0 2
11379: PUSH
11380: DOUBLE
11381: LD_INT 1
11383: DEC
11384: ST_TO_ADDR
11385: LD_EXP 55
11389: PUSH
11390: FOR_TO
11391: IFFALSE 11546
// if Position_Sides [ i ] then
11393: LD_EXP 23
11397: PUSH
11398: LD_VAR 0 2
11402: ARRAY
11403: IFFALSE 11544
// for j := 1 to 8 do
11405: LD_ADDR_VAR 0 3
11409: PUSH
11410: DOUBLE
11411: LD_INT 1
11413: DEC
11414: ST_TO_ADDR
11415: LD_INT 8
11417: PUSH
11418: FOR_TO
11419: IFFALSE 11542
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
11421: LD_EXP 20
11425: PUSH
11426: LD_VAR 0 3
11430: ARRAY
11431: PUSH
11432: LD_EXP 17
11436: PUSH
11437: LD_EXP 23
11441: PUSH
11442: LD_VAR 0 2
11446: ARRAY
11447: ARRAY
11448: PUSH
11449: LD_EXP 17
11453: PUSH
11454: LD_VAR 0 3
11458: ARRAY
11459: NONEQUAL
11460: PUSH
11461: LD_EXP 22
11465: NOT
11466: PUSH
11467: LD_EXP 23
11471: PUSH
11472: LD_VAR 0 2
11476: ARRAY
11477: PUSH
11478: LD_VAR 0 3
11482: NONEQUAL
11483: AND
11484: OR
11485: AND
11486: IFFALSE 11510
// HideArea ( j , BuildUpAreas [ i ] ) else
11488: LD_VAR 0 3
11492: PPUSH
11493: LD_EXP 55
11497: PUSH
11498: LD_VAR 0 2
11502: ARRAY
11503: PPUSH
11504: CALL_OW 333
11508: GO 11540
// if ( j = your_side ) then
11510: LD_VAR 0 3
11514: PUSH
11515: LD_OWVAR 2
11519: EQUAL
11520: IFFALSE 11540
// SetAreaMapShow ( BuildUpAreas [ i ] , 3 ) ;
11522: LD_EXP 55
11526: PUSH
11527: LD_VAR 0 2
11531: ARRAY
11532: PPUSH
11533: LD_INT 3
11535: PPUSH
11536: CALL_OW 424
11540: GO 11418
11542: POP
11543: POP
11544: GO 11390
11546: POP
11547: POP
// end ;
11548: LD_VAR 0 1
11552: RET
// export function EndBuildUp ; var i , j ; begin
11553: LD_INT 0
11555: PPUSH
11556: PPUSH
11557: PPUSH
// disable ( 600 ) ;
11558: LD_INT 600
11560: DISABLE_MARKED
// BuildUp = false ;
11561: LD_ADDR_EXP 56
11565: PUSH
11566: LD_INT 0
11568: ST_TO_ADDR
// for i := 1 to BuildUpAreas do
11569: LD_ADDR_VAR 0 2
11573: PUSH
11574: DOUBLE
11575: LD_INT 1
11577: DEC
11578: ST_TO_ADDR
11579: LD_EXP 55
11583: PUSH
11584: FOR_TO
11585: IFFALSE 11740
// if Position_Sides [ i ] then
11587: LD_EXP 23
11591: PUSH
11592: LD_VAR 0 2
11596: ARRAY
11597: IFFALSE 11738
// for j := 1 to 8 do
11599: LD_ADDR_VAR 0 3
11603: PUSH
11604: DOUBLE
11605: LD_INT 1
11607: DEC
11608: ST_TO_ADDR
11609: LD_INT 8
11611: PUSH
11612: FOR_TO
11613: IFFALSE 11736
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
11615: LD_EXP 20
11619: PUSH
11620: LD_VAR 0 3
11624: ARRAY
11625: PUSH
11626: LD_EXP 17
11630: PUSH
11631: LD_EXP 23
11635: PUSH
11636: LD_VAR 0 2
11640: ARRAY
11641: ARRAY
11642: PUSH
11643: LD_EXP 17
11647: PUSH
11648: LD_VAR 0 3
11652: ARRAY
11653: NONEQUAL
11654: PUSH
11655: LD_EXP 22
11659: NOT
11660: PUSH
11661: LD_EXP 23
11665: PUSH
11666: LD_VAR 0 2
11670: ARRAY
11671: PUSH
11672: LD_VAR 0 3
11676: NONEQUAL
11677: AND
11678: OR
11679: AND
11680: IFFALSE 11704
// ShowArea ( j , BuildUpAreas [ i ] ) else
11682: LD_VAR 0 3
11686: PPUSH
11687: LD_EXP 55
11691: PUSH
11692: LD_VAR 0 2
11696: ARRAY
11697: PPUSH
11698: CALL_OW 334
11702: GO 11734
// if ( j = your_side ) then
11704: LD_VAR 0 3
11708: PUSH
11709: LD_OWVAR 2
11713: EQUAL
11714: IFFALSE 11734
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
11716: LD_EXP 55
11720: PUSH
11721: LD_VAR 0 2
11725: ARRAY
11726: PPUSH
11727: LD_INT 0
11729: PPUSH
11730: CALL_OW 424
11734: GO 11612
11736: POP
11737: POP
11738: GO 11584
11740: POP
11741: POP
// end ;
11742: LD_VAR 0 1
11746: RET
// every 1 marked 600 do var i , un ;
11747: GO 11749
11749: DISABLE
11750: LD_INT 0
11752: PPUSH
11753: PPUSH
// begin for i := 1 to BuildUpAreas do
11754: LD_ADDR_VAR 0 1
11758: PUSH
11759: DOUBLE
11760: LD_INT 1
11762: DEC
11763: ST_TO_ADDR
11764: LD_EXP 55
11768: PUSH
11769: FOR_TO
11770: IFFALSE 11940
// if Position_Sides [ i ] then
11772: LD_EXP 23
11776: PUSH
11777: LD_VAR 0 1
11781: ARRAY
11782: IFFALSE 11938
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_not , [ f_side , 0 ] ] ] ) do
11784: LD_ADDR_VAR 0 2
11788: PUSH
11789: LD_EXP 55
11793: PUSH
11794: LD_VAR 0 1
11798: ARRAY
11799: PPUSH
11800: LD_INT 2
11802: PUSH
11803: LD_INT 21
11805: PUSH
11806: LD_INT 1
11808: PUSH
11809: EMPTY
11810: LIST
11811: LIST
11812: PUSH
11813: LD_INT 21
11815: PUSH
11816: LD_INT 2
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: LIST
11827: PUSH
11828: LD_INT 3
11830: PUSH
11831: LD_INT 22
11833: PUSH
11834: LD_INT 0
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: PUSH
11845: EMPTY
11846: LIST
11847: LIST
11848: PPUSH
11849: CALL_OW 70
11853: PUSH
11854: FOR_IN
11855: IFFALSE 11936
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ GetSide ( un ) ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> GetSide ( un ) ) ) then
11857: LD_EXP 17
11861: PUSH
11862: LD_EXP 23
11866: PUSH
11867: LD_VAR 0 1
11871: ARRAY
11872: ARRAY
11873: PUSH
11874: LD_EXP 17
11878: PUSH
11879: LD_VAR 0 2
11883: PPUSH
11884: CALL_OW 255
11888: ARRAY
11889: NONEQUAL
11890: PUSH
11891: LD_EXP 22
11895: NOT
11896: PUSH
11897: LD_EXP 23
11901: PUSH
11902: LD_VAR 0 1
11906: ARRAY
11907: PUSH
11908: LD_VAR 0 2
11912: PPUSH
11913: CALL_OW 255
11917: NONEQUAL
11918: AND
11919: OR
11920: IFFALSE 11934
// ComMoveToArea ( un , BuildUpEscape ) ;
11922: LD_VAR 0 2
11926: PPUSH
11927: LD_INT 12
11929: PPUSH
11930: CALL_OW 113
11934: GO 11854
11936: POP
11937: POP
11938: GO 11769
11940: POP
11941: POP
// if BuildUp then
11942: LD_EXP 56
11946: IFFALSE 11949
// enable ;
11948: ENABLE
// end ;
11949: PPOPN 2
11951: END
// every 1 do
11952: GO 11954
11954: DISABLE
// if ( def_builduptime > 0 ) then
11955: LD_EXP 51
11959: PUSH
11960: LD_INT 0
11962: GREATER
11963: IFFALSE 11984
// begin if buildUpTime_Delay then
11965: LD_EXP 16
11969: IFFALSE 11980
// wait ( buildUpTime_Delay ) ;
11971: LD_EXP 16
11975: PPUSH
11976: CALL_OW 67
// EndBuildUp ;
11980: CALL 11553 0 0
// end ; end_of_file
11984: END
// export function SetMpTechs ( ) ; var side , i ; begin
11985: LD_INT 0
11987: PPUSH
11988: PPUSH
11989: PPUSH
// for side = 1 to 8 do
11990: LD_ADDR_VAR 0 2
11994: PUSH
11995: DOUBLE
11996: LD_INT 1
11998: DEC
11999: ST_TO_ADDR
12000: LD_INT 8
12002: PUSH
12003: FOR_TO
12004: IFFALSE 12125
// begin for i = 1 to 72 do
12006: LD_ADDR_VAR 0 3
12010: PUSH
12011: DOUBLE
12012: LD_INT 1
12014: DEC
12015: ST_TO_ADDR
12016: LD_INT 72
12018: PUSH
12019: FOR_TO
12020: IFFALSE 12051
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
12022: LD_VAR 0 3
12026: PPUSH
12027: LD_VAR 0 2
12031: PPUSH
12032: LD_INT 0
12034: PPUSH
12035: LD_VAR 0 3
12039: PPUSH
12040: CALL_OW 565
12044: PPUSH
12045: CALL_OW 322
12049: GO 12019
12051: POP
12052: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
12053: LD_INT 73
12055: PPUSH
12056: LD_VAR 0 2
12060: PPUSH
12061: LD_INT 0
12063: PPUSH
12064: LD_INT 25
12066: PPUSH
12067: CALL_OW 565
12071: PPUSH
12072: CALL_OW 322
// for i = 0 to 40 do
12076: LD_ADDR_VAR 0 3
12080: PUSH
12081: DOUBLE
12082: LD_INT 0
12084: DEC
12085: ST_TO_ADDR
12086: LD_INT 40
12088: PUSH
12089: FOR_TO
12090: IFFALSE 12121
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
12092: LD_VAR 0 3
12096: PPUSH
12097: LD_VAR 0 2
12101: PPUSH
12102: LD_INT 1
12104: PPUSH
12105: LD_VAR 0 3
12109: PPUSH
12110: CALL_OW 565
12114: PPUSH
12115: CALL_OW 324
12119: GO 12089
12121: POP
12122: POP
// end ;
12123: GO 12003
12125: POP
12126: POP
// end ;
12127: LD_VAR 0 1
12131: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
12132: LD_INT 0
12134: PPUSH
12135: PPUSH
12136: PPUSH
// for side = 1 to 8 do
12137: LD_ADDR_VAR 0 3
12141: PUSH
12142: DOUBLE
12143: LD_INT 1
12145: DEC
12146: ST_TO_ADDR
12147: LD_INT 8
12149: PUSH
12150: FOR_TO
12151: IFFALSE 16147
// begin for i = 1 to 73 do
12153: LD_ADDR_VAR 0 4
12157: PUSH
12158: DOUBLE
12159: LD_INT 1
12161: DEC
12162: ST_TO_ADDR
12163: LD_INT 73
12165: PUSH
12166: FOR_TO
12167: IFFALSE 12188
// SetTech ( i , side , state_disabled ) ;
12169: LD_VAR 0 4
12173: PPUSH
12174: LD_VAR 0 3
12178: PPUSH
12179: LD_INT 0
12181: PPUSH
12182: CALL_OW 322
12186: GO 12166
12188: POP
12189: POP
// for i = 0 to 40 do
12190: LD_ADDR_VAR 0 4
12194: PUSH
12195: DOUBLE
12196: LD_INT 0
12198: DEC
12199: ST_TO_ADDR
12200: LD_INT 40
12202: PUSH
12203: FOR_TO
12204: IFFALSE 12225
// SetRestrict ( i , side , false ) ;
12206: LD_VAR 0 4
12210: PPUSH
12211: LD_VAR 0 3
12215: PPUSH
12216: LD_INT 0
12218: PPUSH
12219: CALL_OW 324
12223: GO 12203
12225: POP
12226: POP
// case level of 1 :
12227: LD_VAR 0 1
12231: PUSH
12232: LD_INT 1
12234: DOUBLE
12235: EQUAL
12236: IFTRUE 12240
12238: GO 12393
12240: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12241: LD_INT 35
12243: PPUSH
12244: LD_VAR 0 3
12248: PPUSH
12249: LD_INT 1
12251: PPUSH
12252: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12256: LD_INT 45
12258: PPUSH
12259: LD_VAR 0 3
12263: PPUSH
12264: LD_INT 1
12266: PPUSH
12267: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12271: LD_INT 46
12273: PPUSH
12274: LD_VAR 0 3
12278: PPUSH
12279: LD_INT 1
12281: PPUSH
12282: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12286: LD_INT 47
12288: PPUSH
12289: LD_VAR 0 3
12293: PPUSH
12294: LD_INT 1
12296: PPUSH
12297: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12301: LD_INT 0
12303: PPUSH
12304: LD_VAR 0 3
12308: PPUSH
12309: LD_INT 1
12311: PPUSH
12312: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12316: LD_INT 2
12318: PPUSH
12319: LD_VAR 0 3
12323: PPUSH
12324: LD_INT 1
12326: PPUSH
12327: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12331: LD_INT 4
12333: PPUSH
12334: LD_VAR 0 3
12338: PPUSH
12339: LD_INT 1
12341: PPUSH
12342: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12346: LD_INT 6
12348: PPUSH
12349: LD_VAR 0 3
12353: PPUSH
12354: LD_INT 1
12356: PPUSH
12357: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12361: LD_INT 29
12363: PPUSH
12364: LD_VAR 0 3
12368: PPUSH
12369: LD_INT 1
12371: PPUSH
12372: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12376: LD_INT 31
12378: PPUSH
12379: LD_VAR 0 3
12383: PPUSH
12384: LD_INT 1
12386: PPUSH
12387: CALL_OW 324
// end ; 2 :
12391: GO 16145
12393: LD_INT 2
12395: DOUBLE
12396: EQUAL
12397: IFTRUE 12401
12399: GO 12599
12401: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12402: LD_INT 35
12404: PPUSH
12405: LD_VAR 0 3
12409: PPUSH
12410: LD_INT 1
12412: PPUSH
12413: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12417: LD_INT 45
12419: PPUSH
12420: LD_VAR 0 3
12424: PPUSH
12425: LD_INT 1
12427: PPUSH
12428: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12432: LD_INT 46
12434: PPUSH
12435: LD_VAR 0 3
12439: PPUSH
12440: LD_INT 1
12442: PPUSH
12443: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12447: LD_INT 47
12449: PPUSH
12450: LD_VAR 0 3
12454: PPUSH
12455: LD_INT 1
12457: PPUSH
12458: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12462: LD_INT 1
12464: PPUSH
12465: LD_VAR 0 3
12469: PPUSH
12470: LD_INT 1
12472: PPUSH
12473: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12477: LD_INT 2
12479: PPUSH
12480: LD_VAR 0 3
12484: PPUSH
12485: LD_INT 1
12487: PPUSH
12488: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12492: LD_INT 11
12494: PPUSH
12495: LD_VAR 0 3
12499: PPUSH
12500: LD_INT 1
12502: PPUSH
12503: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12507: LD_INT 0
12509: PPUSH
12510: LD_VAR 0 3
12514: PPUSH
12515: LD_INT 1
12517: PPUSH
12518: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12522: LD_INT 2
12524: PPUSH
12525: LD_VAR 0 3
12529: PPUSH
12530: LD_INT 1
12532: PPUSH
12533: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12537: LD_INT 4
12539: PPUSH
12540: LD_VAR 0 3
12544: PPUSH
12545: LD_INT 1
12547: PPUSH
12548: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12552: LD_INT 6
12554: PPUSH
12555: LD_VAR 0 3
12559: PPUSH
12560: LD_INT 1
12562: PPUSH
12563: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12567: LD_INT 29
12569: PPUSH
12570: LD_VAR 0 3
12574: PPUSH
12575: LD_INT 1
12577: PPUSH
12578: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12582: LD_INT 31
12584: PPUSH
12585: LD_VAR 0 3
12589: PPUSH
12590: LD_INT 1
12592: PPUSH
12593: CALL_OW 324
// end ; 3 :
12597: GO 16145
12599: LD_INT 3
12601: DOUBLE
12602: EQUAL
12603: IFTRUE 12607
12605: GO 13060
12607: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12608: LD_INT 35
12610: PPUSH
12611: LD_VAR 0 3
12615: PPUSH
12616: LD_INT 1
12618: PPUSH
12619: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12623: LD_INT 45
12625: PPUSH
12626: LD_VAR 0 3
12630: PPUSH
12631: LD_INT 1
12633: PPUSH
12634: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12638: LD_INT 46
12640: PPUSH
12641: LD_VAR 0 3
12645: PPUSH
12646: LD_INT 1
12648: PPUSH
12649: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12653: LD_INT 47
12655: PPUSH
12656: LD_VAR 0 3
12660: PPUSH
12661: LD_INT 1
12663: PPUSH
12664: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12668: LD_INT 1
12670: PPUSH
12671: LD_VAR 0 3
12675: PPUSH
12676: LD_INT 1
12678: PPUSH
12679: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12683: LD_INT 2
12685: PPUSH
12686: LD_VAR 0 3
12690: PPUSH
12691: LD_INT 1
12693: PPUSH
12694: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12698: LD_INT 11
12700: PPUSH
12701: LD_VAR 0 3
12705: PPUSH
12706: LD_INT 1
12708: PPUSH
12709: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12713: LD_INT 48
12715: PPUSH
12716: LD_VAR 0 3
12720: PPUSH
12721: LD_INT 1
12723: PPUSH
12724: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12728: LD_INT 69
12730: PPUSH
12731: LD_VAR 0 3
12735: PPUSH
12736: LD_INT 1
12738: PPUSH
12739: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12743: LD_INT 39
12745: PPUSH
12746: LD_VAR 0 3
12750: PPUSH
12751: LD_INT 1
12753: PPUSH
12754: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12758: LD_INT 43
12760: PPUSH
12761: LD_VAR 0 3
12765: PPUSH
12766: LD_INT 1
12768: PPUSH
12769: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12773: LD_INT 51
12775: PPUSH
12776: LD_VAR 0 3
12780: PPUSH
12781: LD_INT 1
12783: PPUSH
12784: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12788: LD_INT 6
12790: PPUSH
12791: LD_VAR 0 3
12795: PPUSH
12796: LD_INT 1
12798: PPUSH
12799: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12803: LD_INT 0
12805: PPUSH
12806: LD_VAR 0 3
12810: PPUSH
12811: LD_INT 1
12813: PPUSH
12814: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12818: LD_INT 2
12820: PPUSH
12821: LD_VAR 0 3
12825: PPUSH
12826: LD_INT 1
12828: PPUSH
12829: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12833: LD_INT 3
12835: PPUSH
12836: LD_VAR 0 3
12840: PPUSH
12841: LD_INT 1
12843: PPUSH
12844: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12848: LD_INT 4
12850: PPUSH
12851: LD_VAR 0 3
12855: PPUSH
12856: LD_INT 1
12858: PPUSH
12859: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12863: LD_INT 6
12865: PPUSH
12866: LD_VAR 0 3
12870: PPUSH
12871: LD_INT 1
12873: PPUSH
12874: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12878: LD_INT 7
12880: PPUSH
12881: LD_VAR 0 3
12885: PPUSH
12886: LD_INT 1
12888: PPUSH
12889: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12893: LD_INT 8
12895: PPUSH
12896: LD_VAR 0 3
12900: PPUSH
12901: LD_INT 1
12903: PPUSH
12904: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12908: LD_INT 10
12910: PPUSH
12911: LD_VAR 0 3
12915: PPUSH
12916: LD_INT 1
12918: PPUSH
12919: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12923: LD_INT 15
12925: PPUSH
12926: LD_VAR 0 3
12930: PPUSH
12931: LD_INT 1
12933: PPUSH
12934: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12938: LD_INT 16
12940: PPUSH
12941: LD_VAR 0 3
12945: PPUSH
12946: LD_INT 1
12948: PPUSH
12949: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12953: LD_INT 17
12955: PPUSH
12956: LD_VAR 0 3
12960: PPUSH
12961: LD_INT 1
12963: PPUSH
12964: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12968: LD_INT 20
12970: PPUSH
12971: LD_VAR 0 3
12975: PPUSH
12976: LD_INT 1
12978: PPUSH
12979: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12983: LD_INT 26
12985: PPUSH
12986: LD_VAR 0 3
12990: PPUSH
12991: LD_INT 1
12993: PPUSH
12994: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12998: LD_INT 27
13000: PPUSH
13001: LD_VAR 0 3
13005: PPUSH
13006: LD_INT 1
13008: PPUSH
13009: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13013: LD_INT 29
13015: PPUSH
13016: LD_VAR 0 3
13020: PPUSH
13021: LD_INT 1
13023: PPUSH
13024: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13028: LD_INT 31
13030: PPUSH
13031: LD_VAR 0 3
13035: PPUSH
13036: LD_INT 1
13038: PPUSH
13039: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13043: LD_INT 32
13045: PPUSH
13046: LD_VAR 0 3
13050: PPUSH
13051: LD_INT 1
13053: PPUSH
13054: CALL_OW 324
// end ; 4 :
13058: GO 16145
13060: LD_INT 4
13062: DOUBLE
13063: EQUAL
13064: IFTRUE 13068
13066: GO 14016
13068: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13069: LD_INT 35
13071: PPUSH
13072: LD_VAR 0 3
13076: PPUSH
13077: LD_INT 1
13079: PPUSH
13080: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13084: LD_INT 45
13086: PPUSH
13087: LD_VAR 0 3
13091: PPUSH
13092: LD_INT 1
13094: PPUSH
13095: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13099: LD_INT 46
13101: PPUSH
13102: LD_VAR 0 3
13106: PPUSH
13107: LD_INT 1
13109: PPUSH
13110: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13114: LD_INT 47
13116: PPUSH
13117: LD_VAR 0 3
13121: PPUSH
13122: LD_INT 1
13124: PPUSH
13125: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13129: LD_INT 1
13131: PPUSH
13132: LD_VAR 0 3
13136: PPUSH
13137: LD_INT 1
13139: PPUSH
13140: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13144: LD_INT 2
13146: PPUSH
13147: LD_VAR 0 3
13151: PPUSH
13152: LD_INT 1
13154: PPUSH
13155: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13159: LD_INT 11
13161: PPUSH
13162: LD_VAR 0 3
13166: PPUSH
13167: LD_INT 1
13169: PPUSH
13170: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13174: LD_INT 20
13176: PPUSH
13177: LD_VAR 0 3
13181: PPUSH
13182: LD_INT 1
13184: PPUSH
13185: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13189: LD_INT 48
13191: PPUSH
13192: LD_VAR 0 3
13196: PPUSH
13197: LD_INT 1
13199: PPUSH
13200: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13204: LD_INT 49
13206: PPUSH
13207: LD_VAR 0 3
13211: PPUSH
13212: LD_INT 1
13214: PPUSH
13215: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13219: LD_INT 69
13221: PPUSH
13222: LD_VAR 0 3
13226: PPUSH
13227: LD_INT 1
13229: PPUSH
13230: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13234: LD_INT 39
13236: PPUSH
13237: LD_VAR 0 3
13241: PPUSH
13242: LD_INT 1
13244: PPUSH
13245: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13249: LD_INT 34
13251: PPUSH
13252: LD_VAR 0 3
13256: PPUSH
13257: LD_INT 1
13259: PPUSH
13260: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13264: LD_INT 42
13266: PPUSH
13267: LD_VAR 0 3
13271: PPUSH
13272: LD_INT 1
13274: PPUSH
13275: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13279: LD_INT 44
13281: PPUSH
13282: LD_VAR 0 3
13286: PPUSH
13287: LD_INT 1
13289: PPUSH
13290: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13294: LD_INT 41
13296: PPUSH
13297: LD_VAR 0 3
13301: PPUSH
13302: LD_INT 1
13304: PPUSH
13305: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13309: LD_INT 43
13311: PPUSH
13312: LD_VAR 0 3
13316: PPUSH
13317: LD_INT 1
13319: PPUSH
13320: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13324: LD_INT 70
13326: PPUSH
13327: LD_VAR 0 3
13331: PPUSH
13332: LD_INT 1
13334: PPUSH
13335: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13339: LD_INT 51
13341: PPUSH
13342: LD_VAR 0 3
13346: PPUSH
13347: LD_INT 1
13349: PPUSH
13350: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13354: LD_INT 52
13356: PPUSH
13357: LD_VAR 0 3
13361: PPUSH
13362: LD_INT 1
13364: PPUSH
13365: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13369: LD_INT 6
13371: PPUSH
13372: LD_VAR 0 3
13376: PPUSH
13377: LD_INT 1
13379: PPUSH
13380: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13384: LD_INT 15
13386: PPUSH
13387: LD_VAR 0 3
13391: PPUSH
13392: LD_INT 1
13394: PPUSH
13395: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13399: LD_INT 7
13401: PPUSH
13402: LD_VAR 0 3
13406: PPUSH
13407: LD_INT 1
13409: PPUSH
13410: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13414: LD_INT 12
13416: PPUSH
13417: LD_VAR 0 3
13421: PPUSH
13422: LD_INT 1
13424: PPUSH
13425: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13429: LD_INT 18
13431: PPUSH
13432: LD_VAR 0 3
13436: PPUSH
13437: LD_INT 1
13439: PPUSH
13440: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13444: LD_INT 60
13446: PPUSH
13447: LD_VAR 0 3
13451: PPUSH
13452: LD_INT 1
13454: PPUSH
13455: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13459: LD_INT 9
13461: PPUSH
13462: LD_VAR 0 3
13466: PPUSH
13467: LD_INT 1
13469: PPUSH
13470: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13474: LD_INT 30
13476: PPUSH
13477: LD_VAR 0 3
13481: PPUSH
13482: LD_INT 1
13484: PPUSH
13485: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13489: LD_INT 37
13491: PPUSH
13492: LD_VAR 0 3
13496: PPUSH
13497: LD_INT 1
13499: PPUSH
13500: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13504: LD_INT 5
13506: PPUSH
13507: LD_VAR 0 3
13511: PPUSH
13512: LD_INT 1
13514: PPUSH
13515: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13519: LD_INT 66
13521: PPUSH
13522: LD_VAR 0 3
13526: PPUSH
13527: LD_INT 1
13529: PPUSH
13530: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13534: LD_INT 21
13536: PPUSH
13537: LD_VAR 0 3
13541: PPUSH
13542: LD_INT 1
13544: PPUSH
13545: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13549: LD_INT 22
13551: PPUSH
13552: LD_VAR 0 3
13556: PPUSH
13557: LD_INT 1
13559: PPUSH
13560: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13564: LD_INT 54
13566: PPUSH
13567: LD_VAR 0 3
13571: PPUSH
13572: LD_INT 1
13574: PPUSH
13575: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13579: LD_INT 0
13581: PPUSH
13582: LD_VAR 0 3
13586: PPUSH
13587: LD_INT 1
13589: PPUSH
13590: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
13594: LD_INT 1
13596: PPUSH
13597: LD_VAR 0 3
13601: PPUSH
13602: LD_INT 1
13604: PPUSH
13605: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13609: LD_INT 2
13611: PPUSH
13612: LD_VAR 0 3
13616: PPUSH
13617: LD_INT 1
13619: PPUSH
13620: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
13624: LD_INT 3
13626: PPUSH
13627: LD_VAR 0 3
13631: PPUSH
13632: LD_INT 1
13634: PPUSH
13635: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13639: LD_INT 4
13641: PPUSH
13642: LD_VAR 0 3
13646: PPUSH
13647: LD_INT 1
13649: PPUSH
13650: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
13654: LD_INT 5
13656: PPUSH
13657: LD_VAR 0 3
13661: PPUSH
13662: LD_INT 1
13664: PPUSH
13665: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13669: LD_INT 6
13671: PPUSH
13672: LD_VAR 0 3
13676: PPUSH
13677: LD_INT 1
13679: PPUSH
13680: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13684: LD_INT 7
13686: PPUSH
13687: LD_VAR 0 3
13691: PPUSH
13692: LD_INT 1
13694: PPUSH
13695: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13699: LD_INT 8
13701: PPUSH
13702: LD_VAR 0 3
13706: PPUSH
13707: LD_INT 1
13709: PPUSH
13710: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13714: LD_INT 10
13716: PPUSH
13717: LD_VAR 0 3
13721: PPUSH
13722: LD_INT 1
13724: PPUSH
13725: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
13729: LD_INT 11
13731: PPUSH
13732: LD_VAR 0 3
13736: PPUSH
13737: LD_INT 1
13739: PPUSH
13740: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
13744: LD_INT 12
13746: PPUSH
13747: LD_VAR 0 3
13751: PPUSH
13752: LD_INT 1
13754: PPUSH
13755: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
13759: LD_INT 13
13761: PPUSH
13762: LD_VAR 0 3
13766: PPUSH
13767: LD_INT 1
13769: PPUSH
13770: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
13774: LD_INT 14
13776: PPUSH
13777: LD_VAR 0 3
13781: PPUSH
13782: LD_INT 1
13784: PPUSH
13785: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13789: LD_INT 15
13791: PPUSH
13792: LD_VAR 0 3
13796: PPUSH
13797: LD_INT 1
13799: PPUSH
13800: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13804: LD_INT 16
13806: PPUSH
13807: LD_VAR 0 3
13811: PPUSH
13812: LD_INT 1
13814: PPUSH
13815: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13819: LD_INT 17
13821: PPUSH
13822: LD_VAR 0 3
13826: PPUSH
13827: LD_INT 1
13829: PPUSH
13830: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
13834: LD_INT 19
13836: PPUSH
13837: LD_VAR 0 3
13841: PPUSH
13842: LD_INT 1
13844: PPUSH
13845: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13849: LD_INT 20
13851: PPUSH
13852: LD_VAR 0 3
13856: PPUSH
13857: LD_INT 1
13859: PPUSH
13860: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
13864: LD_INT 21
13866: PPUSH
13867: LD_VAR 0 3
13871: PPUSH
13872: LD_INT 1
13874: PPUSH
13875: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
13879: LD_INT 23
13881: PPUSH
13882: LD_VAR 0 3
13886: PPUSH
13887: LD_INT 1
13889: PPUSH
13890: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13894: LD_INT 26
13896: PPUSH
13897: LD_VAR 0 3
13901: PPUSH
13902: LD_INT 1
13904: PPUSH
13905: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13909: LD_INT 27
13911: PPUSH
13912: LD_VAR 0 3
13916: PPUSH
13917: LD_INT 1
13919: PPUSH
13920: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
13924: LD_INT 28
13926: PPUSH
13927: LD_VAR 0 3
13931: PPUSH
13932: LD_INT 1
13934: PPUSH
13935: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13939: LD_INT 29
13941: PPUSH
13942: LD_VAR 0 3
13946: PPUSH
13947: LD_INT 1
13949: PPUSH
13950: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
13954: LD_INT 30
13956: PPUSH
13957: LD_VAR 0 3
13961: PPUSH
13962: LD_INT 1
13964: PPUSH
13965: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13969: LD_INT 31
13971: PPUSH
13972: LD_VAR 0 3
13976: PPUSH
13977: LD_INT 1
13979: PPUSH
13980: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13984: LD_INT 32
13986: PPUSH
13987: LD_VAR 0 3
13991: PPUSH
13992: LD_INT 1
13994: PPUSH
13995: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
13999: LD_INT 36
14001: PPUSH
14002: LD_VAR 0 3
14006: PPUSH
14007: LD_INT 1
14009: PPUSH
14010: CALL_OW 324
// end ; 5 :
14014: GO 16145
14016: LD_INT 5
14018: DOUBLE
14019: EQUAL
14020: IFTRUE 14024
14022: GO 15137
14024: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14025: LD_INT 35
14027: PPUSH
14028: LD_VAR 0 3
14032: PPUSH
14033: LD_INT 1
14035: PPUSH
14036: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14040: LD_INT 45
14042: PPUSH
14043: LD_VAR 0 3
14047: PPUSH
14048: LD_INT 1
14050: PPUSH
14051: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14055: LD_INT 46
14057: PPUSH
14058: LD_VAR 0 3
14062: PPUSH
14063: LD_INT 1
14065: PPUSH
14066: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14070: LD_INT 47
14072: PPUSH
14073: LD_VAR 0 3
14077: PPUSH
14078: LD_INT 1
14080: PPUSH
14081: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14085: LD_INT 1
14087: PPUSH
14088: LD_VAR 0 3
14092: PPUSH
14093: LD_INT 1
14095: PPUSH
14096: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14100: LD_INT 2
14102: PPUSH
14103: LD_VAR 0 3
14107: PPUSH
14108: LD_INT 1
14110: PPUSH
14111: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14115: LD_INT 11
14117: PPUSH
14118: LD_VAR 0 3
14122: PPUSH
14123: LD_INT 1
14125: PPUSH
14126: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
14130: LD_INT 20
14132: PPUSH
14133: LD_VAR 0 3
14137: PPUSH
14138: LD_INT 1
14140: PPUSH
14141: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14145: LD_INT 48
14147: PPUSH
14148: LD_VAR 0 3
14152: PPUSH
14153: LD_INT 1
14155: PPUSH
14156: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
14160: LD_INT 49
14162: PPUSH
14163: LD_VAR 0 3
14167: PPUSH
14168: LD_INT 1
14170: PPUSH
14171: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14175: LD_INT 69
14177: PPUSH
14178: LD_VAR 0 3
14182: PPUSH
14183: LD_INT 1
14185: PPUSH
14186: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14190: LD_INT 39
14192: PPUSH
14193: LD_VAR 0 3
14197: PPUSH
14198: LD_INT 1
14200: PPUSH
14201: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
14205: LD_INT 34
14207: PPUSH
14208: LD_VAR 0 3
14212: PPUSH
14213: LD_INT 1
14215: PPUSH
14216: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
14220: LD_INT 42
14222: PPUSH
14223: LD_VAR 0 3
14227: PPUSH
14228: LD_INT 1
14230: PPUSH
14231: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
14235: LD_INT 44
14237: PPUSH
14238: LD_VAR 0 3
14242: PPUSH
14243: LD_INT 1
14245: PPUSH
14246: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
14250: LD_INT 41
14252: PPUSH
14253: LD_VAR 0 3
14257: PPUSH
14258: LD_INT 1
14260: PPUSH
14261: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
14265: LD_INT 40
14267: PPUSH
14268: LD_VAR 0 3
14272: PPUSH
14273: LD_INT 1
14275: PPUSH
14276: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14280: LD_INT 43
14282: PPUSH
14283: LD_VAR 0 3
14287: PPUSH
14288: LD_INT 1
14290: PPUSH
14291: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
14295: LD_INT 70
14297: PPUSH
14298: LD_VAR 0 3
14302: PPUSH
14303: LD_INT 1
14305: PPUSH
14306: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14310: LD_INT 51
14312: PPUSH
14313: LD_VAR 0 3
14317: PPUSH
14318: LD_INT 1
14320: PPUSH
14321: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
14325: LD_INT 52
14327: PPUSH
14328: LD_VAR 0 3
14332: PPUSH
14333: LD_INT 1
14335: PPUSH
14336: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14340: LD_INT 6
14342: PPUSH
14343: LD_VAR 0 3
14347: PPUSH
14348: LD_INT 1
14350: PPUSH
14351: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
14355: LD_INT 15
14357: PPUSH
14358: LD_VAR 0 3
14362: PPUSH
14363: LD_INT 1
14365: PPUSH
14366: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
14370: LD_INT 7
14372: PPUSH
14373: LD_VAR 0 3
14377: PPUSH
14378: LD_INT 1
14380: PPUSH
14381: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
14385: LD_INT 12
14387: PPUSH
14388: LD_VAR 0 3
14392: PPUSH
14393: LD_INT 1
14395: PPUSH
14396: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
14400: LD_INT 17
14402: PPUSH
14403: LD_VAR 0 3
14407: PPUSH
14408: LD_INT 1
14410: PPUSH
14411: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
14415: LD_INT 18
14417: PPUSH
14418: LD_VAR 0 3
14422: PPUSH
14423: LD_INT 1
14425: PPUSH
14426: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
14430: LD_INT 60
14432: PPUSH
14433: LD_VAR 0 3
14437: PPUSH
14438: LD_INT 1
14440: PPUSH
14441: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
14445: LD_INT 32
14447: PPUSH
14448: LD_VAR 0 3
14452: PPUSH
14453: LD_INT 1
14455: PPUSH
14456: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
14460: LD_INT 9
14462: PPUSH
14463: LD_VAR 0 3
14467: PPUSH
14468: LD_INT 1
14470: PPUSH
14471: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
14475: LD_INT 57
14477: PPUSH
14478: LD_VAR 0 3
14482: PPUSH
14483: LD_INT 1
14485: PPUSH
14486: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
14490: LD_INT 30
14492: PPUSH
14493: LD_VAR 0 3
14497: PPUSH
14498: LD_INT 1
14500: PPUSH
14501: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
14505: LD_INT 37
14507: PPUSH
14508: LD_VAR 0 3
14512: PPUSH
14513: LD_INT 1
14515: PPUSH
14516: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
14520: LD_INT 63
14522: PPUSH
14523: LD_VAR 0 3
14527: PPUSH
14528: LD_INT 1
14530: PPUSH
14531: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
14535: LD_INT 3
14537: PPUSH
14538: LD_VAR 0 3
14542: PPUSH
14543: LD_INT 1
14545: PPUSH
14546: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
14550: LD_INT 4
14552: PPUSH
14553: LD_VAR 0 3
14557: PPUSH
14558: LD_INT 1
14560: PPUSH
14561: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14565: LD_INT 5
14567: PPUSH
14568: LD_VAR 0 3
14572: PPUSH
14573: LD_INT 1
14575: PPUSH
14576: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14580: LD_INT 66
14582: PPUSH
14583: LD_VAR 0 3
14587: PPUSH
14588: LD_INT 1
14590: PPUSH
14591: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14595: LD_INT 21
14597: PPUSH
14598: LD_VAR 0 3
14602: PPUSH
14603: LD_INT 1
14605: PPUSH
14606: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14610: LD_INT 22
14612: PPUSH
14613: LD_VAR 0 3
14617: PPUSH
14618: LD_INT 1
14620: PPUSH
14621: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
14625: LD_INT 19
14627: PPUSH
14628: LD_VAR 0 3
14632: PPUSH
14633: LD_INT 1
14635: PPUSH
14636: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
14640: LD_INT 54
14642: PPUSH
14643: LD_VAR 0 3
14647: PPUSH
14648: LD_INT 1
14650: PPUSH
14651: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
14655: LD_INT 55
14657: PPUSH
14658: LD_VAR 0 3
14662: PPUSH
14663: LD_INT 1
14665: PPUSH
14666: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14670: LD_INT 0
14672: PPUSH
14673: LD_VAR 0 3
14677: PPUSH
14678: LD_INT 1
14680: PPUSH
14681: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
14685: LD_INT 1
14687: PPUSH
14688: LD_VAR 0 3
14692: PPUSH
14693: LD_INT 1
14695: PPUSH
14696: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14700: LD_INT 2
14702: PPUSH
14703: LD_VAR 0 3
14707: PPUSH
14708: LD_INT 1
14710: PPUSH
14711: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
14715: LD_INT 3
14717: PPUSH
14718: LD_VAR 0 3
14722: PPUSH
14723: LD_INT 1
14725: PPUSH
14726: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14730: LD_INT 4
14732: PPUSH
14733: LD_VAR 0 3
14737: PPUSH
14738: LD_INT 1
14740: PPUSH
14741: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
14745: LD_INT 5
14747: PPUSH
14748: LD_VAR 0 3
14752: PPUSH
14753: LD_INT 1
14755: PPUSH
14756: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14760: LD_INT 6
14762: PPUSH
14763: LD_VAR 0 3
14767: PPUSH
14768: LD_INT 1
14770: PPUSH
14771: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
14775: LD_INT 7
14777: PPUSH
14778: LD_VAR 0 3
14782: PPUSH
14783: LD_INT 1
14785: PPUSH
14786: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
14790: LD_INT 8
14792: PPUSH
14793: LD_VAR 0 3
14797: PPUSH
14798: LD_INT 1
14800: PPUSH
14801: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
14805: LD_INT 10
14807: PPUSH
14808: LD_VAR 0 3
14812: PPUSH
14813: LD_INT 1
14815: PPUSH
14816: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
14820: LD_INT 11
14822: PPUSH
14823: LD_VAR 0 3
14827: PPUSH
14828: LD_INT 1
14830: PPUSH
14831: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
14835: LD_INT 12
14837: PPUSH
14838: LD_VAR 0 3
14842: PPUSH
14843: LD_INT 1
14845: PPUSH
14846: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
14850: LD_INT 13
14852: PPUSH
14853: LD_VAR 0 3
14857: PPUSH
14858: LD_INT 1
14860: PPUSH
14861: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
14865: LD_INT 14
14867: PPUSH
14868: LD_VAR 0 3
14872: PPUSH
14873: LD_INT 1
14875: PPUSH
14876: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
14880: LD_INT 15
14882: PPUSH
14883: LD_VAR 0 3
14887: PPUSH
14888: LD_INT 1
14890: PPUSH
14891: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
14895: LD_INT 16
14897: PPUSH
14898: LD_VAR 0 3
14902: PPUSH
14903: LD_INT 1
14905: PPUSH
14906: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
14910: LD_INT 17
14912: PPUSH
14913: LD_VAR 0 3
14917: PPUSH
14918: LD_INT 1
14920: PPUSH
14921: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
14925: LD_INT 18
14927: PPUSH
14928: LD_VAR 0 3
14932: PPUSH
14933: LD_INT 1
14935: PPUSH
14936: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
14940: LD_INT 19
14942: PPUSH
14943: LD_VAR 0 3
14947: PPUSH
14948: LD_INT 1
14950: PPUSH
14951: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
14955: LD_INT 20
14957: PPUSH
14958: LD_VAR 0 3
14962: PPUSH
14963: LD_INT 1
14965: PPUSH
14966: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
14970: LD_INT 21
14972: PPUSH
14973: LD_VAR 0 3
14977: PPUSH
14978: LD_INT 1
14980: PPUSH
14981: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
14985: LD_INT 23
14987: PPUSH
14988: LD_VAR 0 3
14992: PPUSH
14993: LD_INT 1
14995: PPUSH
14996: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
15000: LD_INT 26
15002: PPUSH
15003: LD_VAR 0 3
15007: PPUSH
15008: LD_INT 1
15010: PPUSH
15011: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15015: LD_INT 27
15017: PPUSH
15018: LD_VAR 0 3
15022: PPUSH
15023: LD_INT 1
15025: PPUSH
15026: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
15030: LD_INT 28
15032: PPUSH
15033: LD_VAR 0 3
15037: PPUSH
15038: LD_INT 1
15040: PPUSH
15041: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15045: LD_INT 29
15047: PPUSH
15048: LD_VAR 0 3
15052: PPUSH
15053: LD_INT 1
15055: PPUSH
15056: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
15060: LD_INT 30
15062: PPUSH
15063: LD_VAR 0 3
15067: PPUSH
15068: LD_INT 1
15070: PPUSH
15071: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15075: LD_INT 31
15077: PPUSH
15078: LD_VAR 0 3
15082: PPUSH
15083: LD_INT 1
15085: PPUSH
15086: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15090: LD_INT 32
15092: PPUSH
15093: LD_VAR 0 3
15097: PPUSH
15098: LD_INT 1
15100: PPUSH
15101: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
15105: LD_INT 33
15107: PPUSH
15108: LD_VAR 0 3
15112: PPUSH
15113: LD_INT 1
15115: PPUSH
15116: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
15120: LD_INT 36
15122: PPUSH
15123: LD_VAR 0 3
15127: PPUSH
15128: LD_INT 1
15130: PPUSH
15131: CALL_OW 324
// end ; 6 :
15135: GO 16145
15137: LD_INT 6
15139: DOUBLE
15140: EQUAL
15141: IFTRUE 15145
15143: GO 16070
15145: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15146: LD_INT 35
15148: PPUSH
15149: LD_VAR 0 3
15153: PPUSH
15154: LD_INT 1
15156: PPUSH
15157: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15161: LD_INT 45
15163: PPUSH
15164: LD_VAR 0 3
15168: PPUSH
15169: LD_INT 1
15171: PPUSH
15172: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15176: LD_INT 46
15178: PPUSH
15179: LD_VAR 0 3
15183: PPUSH
15184: LD_INT 1
15186: PPUSH
15187: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15191: LD_INT 47
15193: PPUSH
15194: LD_VAR 0 3
15198: PPUSH
15199: LD_INT 1
15201: PPUSH
15202: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15206: LD_INT 1
15208: PPUSH
15209: LD_VAR 0 3
15213: PPUSH
15214: LD_INT 1
15216: PPUSH
15217: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15221: LD_INT 2
15223: PPUSH
15224: LD_VAR 0 3
15228: PPUSH
15229: LD_INT 1
15231: PPUSH
15232: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15236: LD_INT 11
15238: PPUSH
15239: LD_VAR 0 3
15243: PPUSH
15244: LD_INT 1
15246: PPUSH
15247: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15251: LD_INT 20
15253: PPUSH
15254: LD_VAR 0 3
15258: PPUSH
15259: LD_INT 1
15261: PPUSH
15262: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15266: LD_INT 48
15268: PPUSH
15269: LD_VAR 0 3
15273: PPUSH
15274: LD_INT 1
15276: PPUSH
15277: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15281: LD_INT 49
15283: PPUSH
15284: LD_VAR 0 3
15288: PPUSH
15289: LD_INT 1
15291: PPUSH
15292: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
15296: LD_INT 50
15298: PPUSH
15299: LD_VAR 0 3
15303: PPUSH
15304: LD_INT 1
15306: PPUSH
15307: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15311: LD_INT 69
15313: PPUSH
15314: LD_VAR 0 3
15318: PPUSH
15319: LD_INT 1
15321: PPUSH
15322: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15326: LD_INT 39
15328: PPUSH
15329: LD_VAR 0 3
15333: PPUSH
15334: LD_INT 1
15336: PPUSH
15337: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15341: LD_INT 34
15343: PPUSH
15344: LD_VAR 0 3
15348: PPUSH
15349: LD_INT 1
15351: PPUSH
15352: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15356: LD_INT 42
15358: PPUSH
15359: LD_VAR 0 3
15363: PPUSH
15364: LD_INT 1
15366: PPUSH
15367: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15371: LD_INT 44
15373: PPUSH
15374: LD_VAR 0 3
15378: PPUSH
15379: LD_INT 1
15381: PPUSH
15382: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15386: LD_INT 41
15388: PPUSH
15389: LD_VAR 0 3
15393: PPUSH
15394: LD_INT 1
15396: PPUSH
15397: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
15401: LD_INT 13
15403: PPUSH
15404: LD_VAR 0 3
15408: PPUSH
15409: LD_INT 1
15411: PPUSH
15412: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
15416: LD_INT 40
15418: PPUSH
15419: LD_VAR 0 3
15423: PPUSH
15424: LD_INT 1
15426: PPUSH
15427: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15431: LD_INT 43
15433: PPUSH
15434: LD_VAR 0 3
15438: PPUSH
15439: LD_INT 1
15441: PPUSH
15442: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15446: LD_INT 70
15448: PPUSH
15449: LD_VAR 0 3
15453: PPUSH
15454: LD_INT 1
15456: PPUSH
15457: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
15461: LD_INT 23
15463: PPUSH
15464: LD_VAR 0 3
15468: PPUSH
15469: LD_INT 1
15471: PPUSH
15472: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15476: LD_INT 51
15478: PPUSH
15479: LD_VAR 0 3
15483: PPUSH
15484: LD_INT 1
15486: PPUSH
15487: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15491: LD_INT 52
15493: PPUSH
15494: LD_VAR 0 3
15498: PPUSH
15499: LD_INT 1
15501: PPUSH
15502: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15506: LD_INT 6
15508: PPUSH
15509: LD_VAR 0 3
15513: PPUSH
15514: LD_INT 1
15516: PPUSH
15517: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
15521: LD_INT 15
15523: PPUSH
15524: LD_VAR 0 3
15528: PPUSH
15529: LD_INT 1
15531: PPUSH
15532: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
15536: LD_INT 7
15538: PPUSH
15539: LD_VAR 0 3
15543: PPUSH
15544: LD_INT 1
15546: PPUSH
15547: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
15551: LD_INT 12
15553: PPUSH
15554: LD_VAR 0 3
15558: PPUSH
15559: LD_INT 1
15561: PPUSH
15562: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
15566: LD_INT 10
15568: PPUSH
15569: LD_VAR 0 3
15573: PPUSH
15574: LD_INT 1
15576: PPUSH
15577: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
15581: LD_INT 17
15583: PPUSH
15584: LD_VAR 0 3
15588: PPUSH
15589: LD_INT 1
15591: PPUSH
15592: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
15596: LD_INT 18
15598: PPUSH
15599: LD_VAR 0 3
15603: PPUSH
15604: LD_INT 1
15606: PPUSH
15607: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
15611: LD_INT 60
15613: PPUSH
15614: LD_VAR 0 3
15618: PPUSH
15619: LD_INT 1
15621: PPUSH
15622: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
15626: LD_INT 61
15628: PPUSH
15629: LD_VAR 0 3
15633: PPUSH
15634: LD_INT 1
15636: PPUSH
15637: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
15641: LD_INT 32
15643: PPUSH
15644: LD_VAR 0 3
15648: PPUSH
15649: LD_INT 1
15651: PPUSH
15652: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
15656: LD_INT 27
15658: PPUSH
15659: LD_VAR 0 3
15663: PPUSH
15664: LD_INT 1
15666: PPUSH
15667: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
15671: LD_INT 36
15673: PPUSH
15674: LD_VAR 0 3
15678: PPUSH
15679: LD_INT 1
15681: PPUSH
15682: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
15686: LD_INT 33
15688: PPUSH
15689: LD_VAR 0 3
15693: PPUSH
15694: LD_INT 1
15696: PPUSH
15697: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
15701: LD_INT 9
15703: PPUSH
15704: LD_VAR 0 3
15708: PPUSH
15709: LD_INT 1
15711: PPUSH
15712: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
15716: LD_INT 38
15718: PPUSH
15719: LD_VAR 0 3
15723: PPUSH
15724: LD_INT 1
15726: PPUSH
15727: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
15731: LD_INT 57
15733: PPUSH
15734: LD_VAR 0 3
15738: PPUSH
15739: LD_INT 1
15741: PPUSH
15742: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
15746: LD_INT 58
15748: PPUSH
15749: LD_VAR 0 3
15753: PPUSH
15754: LD_INT 1
15756: PPUSH
15757: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
15761: LD_INT 28
15763: PPUSH
15764: LD_VAR 0 3
15768: PPUSH
15769: LD_INT 1
15771: PPUSH
15772: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
15776: LD_INT 29
15778: PPUSH
15779: LD_VAR 0 3
15783: PPUSH
15784: LD_INT 1
15786: PPUSH
15787: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
15791: LD_INT 30
15793: PPUSH
15794: LD_VAR 0 3
15798: PPUSH
15799: LD_INT 1
15801: PPUSH
15802: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
15806: LD_INT 37
15808: PPUSH
15809: LD_VAR 0 3
15813: PPUSH
15814: LD_INT 1
15816: PPUSH
15817: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
15821: LD_INT 63
15823: PPUSH
15824: LD_VAR 0 3
15828: PPUSH
15829: LD_INT 1
15831: PPUSH
15832: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
15836: LD_INT 64
15838: PPUSH
15839: LD_VAR 0 3
15843: PPUSH
15844: LD_INT 1
15846: PPUSH
15847: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
15851: LD_INT 3
15853: PPUSH
15854: LD_VAR 0 3
15858: PPUSH
15859: LD_INT 1
15861: PPUSH
15862: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
15866: LD_INT 4
15868: PPUSH
15869: LD_VAR 0 3
15873: PPUSH
15874: LD_INT 1
15876: PPUSH
15877: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
15881: LD_INT 5
15883: PPUSH
15884: LD_VAR 0 3
15888: PPUSH
15889: LD_INT 1
15891: PPUSH
15892: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
15896: LD_INT 8
15898: PPUSH
15899: LD_VAR 0 3
15903: PPUSH
15904: LD_INT 1
15906: PPUSH
15907: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
15911: LD_INT 66
15913: PPUSH
15914: LD_VAR 0 3
15918: PPUSH
15919: LD_INT 1
15921: PPUSH
15922: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
15926: LD_INT 67
15928: PPUSH
15929: LD_VAR 0 3
15933: PPUSH
15934: LD_INT 1
15936: PPUSH
15937: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
15941: LD_INT 21
15943: PPUSH
15944: LD_VAR 0 3
15948: PPUSH
15949: LD_INT 1
15951: PPUSH
15952: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
15956: LD_INT 22
15958: PPUSH
15959: LD_VAR 0 3
15963: PPUSH
15964: LD_INT 1
15966: PPUSH
15967: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
15971: LD_INT 19
15973: PPUSH
15974: LD_VAR 0 3
15978: PPUSH
15979: LD_INT 1
15981: PPUSH
15982: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
15986: LD_INT 26
15988: PPUSH
15989: LD_VAR 0 3
15993: PPUSH
15994: LD_INT 1
15996: PPUSH
15997: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
16001: LD_INT 54
16003: PPUSH
16004: LD_VAR 0 3
16008: PPUSH
16009: LD_INT 1
16011: PPUSH
16012: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
16016: LD_INT 55
16018: PPUSH
16019: LD_VAR 0 3
16023: PPUSH
16024: LD_INT 1
16026: PPUSH
16027: CALL_OW 322
// for i = 0 to 39 do
16031: LD_ADDR_VAR 0 4
16035: PUSH
16036: DOUBLE
16037: LD_INT 0
16039: DEC
16040: ST_TO_ADDR
16041: LD_INT 39
16043: PUSH
16044: FOR_TO
16045: IFFALSE 16066
// SetRestrict ( i , side , true ) ;
16047: LD_VAR 0 4
16051: PPUSH
16052: LD_VAR 0 3
16056: PPUSH
16057: LD_INT 1
16059: PPUSH
16060: CALL_OW 324
16064: GO 16044
16066: POP
16067: POP
// end ; else
16068: GO 16145
16070: POP
// begin for i = 1 to 73 do
16071: LD_ADDR_VAR 0 4
16075: PUSH
16076: DOUBLE
16077: LD_INT 1
16079: DEC
16080: ST_TO_ADDR
16081: LD_INT 73
16083: PUSH
16084: FOR_TO
16085: IFFALSE 16106
// SetTech ( i , side , state_enabled ) ;
16087: LD_VAR 0 4
16091: PPUSH
16092: LD_VAR 0 3
16096: PPUSH
16097: LD_INT 1
16099: PPUSH
16100: CALL_OW 322
16104: GO 16084
16106: POP
16107: POP
// for i = 0 to 39 do
16108: LD_ADDR_VAR 0 4
16112: PUSH
16113: DOUBLE
16114: LD_INT 0
16116: DEC
16117: ST_TO_ADDR
16118: LD_INT 39
16120: PUSH
16121: FOR_TO
16122: IFFALSE 16143
// SetRestrict ( i , side , true ) ;
16124: LD_VAR 0 4
16128: PPUSH
16129: LD_VAR 0 3
16133: PPUSH
16134: LD_INT 1
16136: PPUSH
16137: CALL_OW 324
16141: GO 16121
16143: POP
16144: POP
// end ; end ; end ;
16145: GO 12150
16147: POP
16148: POP
// end ; end_of_file
16149: LD_VAR 0 2
16153: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
16154: LD_INT 0
16156: PPUSH
16157: PPUSH
// enable ( 98 ) ;
16158: LD_INT 98
16160: ENABLE_MARKED
// GameEnded = false ;
16161: LD_ADDR_LOC 29
16165: PUSH
16166: LD_INT 0
16168: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
16169: LD_ADDR_LOC 28
16173: PUSH
16174: LD_INT 0
16176: PUSH
16177: LD_INT 0
16179: PUSH
16180: LD_INT 0
16182: PUSH
16183: LD_INT 0
16185: PUSH
16186: LD_INT 0
16188: PUSH
16189: LD_INT 0
16191: PUSH
16192: LD_INT 0
16194: PUSH
16195: LD_INT 0
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: ST_TO_ADDR
// unfoged = false ;
16208: LD_ADDR_LOC 30
16212: PUSH
16213: LD_INT 0
16215: ST_TO_ADDR
// for i = 1 to side_positions do
16216: LD_ADDR_VAR 0 2
16220: PUSH
16221: DOUBLE
16222: LD_INT 1
16224: DEC
16225: ST_TO_ADDR
16226: LD_EXP 20
16230: PUSH
16231: FOR_TO
16232: IFFALSE 16272
// if not side_positions [ i ] then
16234: LD_EXP 20
16238: PUSH
16239: LD_VAR 0 2
16243: ARRAY
16244: NOT
16245: IFFALSE 16270
// defaited = replace ( defaited , i , true ) ;
16247: LD_ADDR_LOC 28
16251: PUSH
16252: LD_LOC 28
16256: PPUSH
16257: LD_VAR 0 2
16261: PPUSH
16262: LD_INT 1
16264: PPUSH
16265: CALL_OW 1
16269: ST_TO_ADDR
16270: GO 16231
16272: POP
16273: POP
// end ;
16274: LD_VAR 0 1
16278: RET
// function CanWinLoose ; begin
16279: LD_INT 0
16281: PPUSH
// Result := true ;
16282: LD_ADDR_VAR 0 1
16286: PUSH
16287: LD_INT 1
16289: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
16290: CALL_OW 518
16294: PUSH
16295: CALL_OW 519
16299: PUSH
16300: LD_INT 0
16302: GREATER
16303: AND
16304: IFFALSE 16314
// Result := false ;
16306: LD_ADDR_VAR 0 1
16310: PUSH
16311: LD_INT 0
16313: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
16314: CALL_OW 531
16318: PUSH
16319: CALL_OW 519
16323: PUSH
16324: LD_INT 1
16326: GREATER
16327: AND
16328: IFFALSE 16338
// Result := false ;
16330: LD_ADDR_VAR 0 1
16334: PUSH
16335: LD_INT 0
16337: ST_TO_ADDR
// end ;
16338: LD_VAR 0 1
16342: RET
// export function HasPower ( i ) ; var k , h ; begin
16343: LD_INT 0
16345: PPUSH
16346: PPUSH
16347: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
16348: LD_VAR 0 1
16352: PPUSH
16353: CALL_OW 108
16357: NOT
16358: PUSH
16359: LD_EXP 19
16363: PUSH
16364: LD_VAR 0 1
16368: ARRAY
16369: NOT
16370: AND
16371: PUSH
16372: LD_OWVAR 4
16376: AND
16377: IFFALSE 16389
// begin result = false ;
16379: LD_ADDR_VAR 0 2
16383: PUSH
16384: LD_INT 0
16386: ST_TO_ADDR
// end else
16387: GO 16684
// case def_win_rules of 0 :
16389: LD_EXP 15
16393: PUSH
16394: LD_INT 0
16396: DOUBLE
16397: EQUAL
16398: IFTRUE 16402
16400: GO 16565
16402: POP
// if def_people_respawning then
16403: LD_EXP 48
16407: IFFALSE 16498
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
16409: LD_ADDR_VAR 0 2
16413: PUSH
16414: LD_INT 22
16416: PUSH
16417: LD_VAR 0 1
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: PUSH
16426: LD_INT 2
16428: PUSH
16429: LD_INT 21
16431: PUSH
16432: LD_INT 1
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: PUSH
16439: LD_INT 33
16441: PUSH
16442: LD_INT 3
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: PUSH
16449: LD_INT 33
16451: PUSH
16452: LD_INT 5
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PUSH
16459: LD_INT 30
16461: PUSH
16462: LD_INT 0
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 30
16471: PUSH
16472: LD_INT 1
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: EMPTY
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PPUSH
16491: CALL_OW 69
16495: ST_TO_ADDR
16496: GO 16563
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
16498: LD_ADDR_VAR 0 2
16502: PUSH
16503: LD_INT 22
16505: PUSH
16506: LD_VAR 0 1
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PUSH
16515: LD_INT 2
16517: PUSH
16518: LD_INT 21
16520: PUSH
16521: LD_INT 1
16523: PUSH
16524: EMPTY
16525: LIST
16526: LIST
16527: PUSH
16528: LD_INT 33
16530: PUSH
16531: LD_INT 3
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: PUSH
16538: LD_INT 33
16540: PUSH
16541: LD_INT 5
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: PUSH
16554: EMPTY
16555: LIST
16556: LIST
16557: PPUSH
16558: CALL_OW 69
16562: ST_TO_ADDR
16563: GO 16684
16565: LD_INT 1
16567: DOUBLE
16568: EQUAL
16569: IFTRUE 16573
16571: GO 16612
16573: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
16574: LD_ADDR_VAR 0 2
16578: PUSH
16579: LD_INT 22
16581: PUSH
16582: LD_VAR 0 1
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: PUSH
16591: LD_INT 21
16593: PUSH
16594: LD_INT 1
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PPUSH
16605: CALL_OW 69
16609: ST_TO_ADDR
16610: GO 16684
16612: LD_INT 2
16614: DOUBLE
16615: EQUAL
16616: IFTRUE 16620
16618: GO 16683
16620: POP
// begin h = false ;
16621: LD_ADDR_VAR 0 4
16625: PUSH
16626: LD_INT 0
16628: ST_TO_ADDR
// for k in heroes [ i ] do
16629: LD_ADDR_VAR 0 3
16633: PUSH
16634: LD_EXP 28
16638: PUSH
16639: LD_VAR 0 1
16643: ARRAY
16644: PUSH
16645: FOR_IN
16646: IFFALSE 16669
// if IsLive ( k ) then
16648: LD_VAR 0 3
16652: PPUSH
16653: CALL_OW 300
16657: IFFALSE 16667
// h = true ;
16659: LD_ADDR_VAR 0 4
16663: PUSH
16664: LD_INT 1
16666: ST_TO_ADDR
16667: GO 16645
16669: POP
16670: POP
// Result := h ;
16671: LD_ADDR_VAR 0 2
16675: PUSH
16676: LD_VAR 0 4
16680: ST_TO_ADDR
// end ; end ;
16681: GO 16684
16683: POP
// end ;
16684: LD_VAR 0 2
16688: RET
// function AlliedSides ( i , j ) ; begin
16689: LD_INT 0
16691: PPUSH
// Result := false ;
16692: LD_ADDR_VAR 0 3
16696: PUSH
16697: LD_INT 0
16699: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
16700: LD_VAR 0 1
16704: PPUSH
16705: LD_VAR 0 2
16709: PPUSH
16710: CALL_OW 81
16714: PUSH
16715: LD_INT 1
16717: EQUAL
16718: PUSH
16719: LD_VAR 0 2
16723: PPUSH
16724: LD_VAR 0 1
16728: PPUSH
16729: CALL_OW 81
16733: PUSH
16734: LD_INT 1
16736: EQUAL
16737: AND
16738: PUSH
16739: LD_VAR 0 1
16743: PPUSH
16744: CALL_OW 83
16748: AND
16749: PUSH
16750: LD_VAR 0 2
16754: PPUSH
16755: CALL_OW 83
16759: AND
16760: IFFALSE 16770
// Result := true ;
16762: LD_ADDR_VAR 0 3
16766: PUSH
16767: LD_INT 1
16769: ST_TO_ADDR
// end ;
16770: LD_VAR 0 3
16774: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
16775: CALL 16279 0 0
16779: PUSH
16780: LD_LOC 29
16784: NOT
16785: AND
16786: IFFALSE 16802
16788: GO 16790
16790: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
16791: LD_ADDR_EXP 54
16795: PUSH
16796: LD_STRING #Player-Ended
16798: PUSH
16799: EMPTY
16800: LIST
16801: ST_TO_ADDR
16802: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
16803: CALL 16279 0 0
16807: PUSH
16808: LD_LOC 29
16812: AND
16813: IFFALSE 16822
16815: GO 16817
16817: DISABLE
// YouLostInMultiplayer ;
16818: CALL_OW 107
16822: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
16823: CALL 16279 0 0
16827: NOT
16828: PUSH
16829: CALL_OW 531
16833: NOT
16834: AND
16835: IFFALSE 16851
16837: GO 16839
16839: DISABLE
// WaitServerStrings = [ #server-wait ] ;
16840: LD_ADDR_EXP 54
16844: PUSH
16845: LD_STRING #server-wait
16847: PUSH
16848: EMPTY
16849: LIST
16850: ST_TO_ADDR
16851: END
// every 100 trigger IAmSpec do
16852: CALL_OW 531
16856: IFFALSE 16872
16858: GO 16860
16860: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
16861: LD_ADDR_EXP 54
16865: PUSH
16866: LD_STRING #Player-IAmSpec
16868: PUSH
16869: EMPTY
16870: LIST
16871: ST_TO_ADDR
16872: END
// every 100 trigger GameEnded and IAmSpec do
16873: LD_LOC 29
16877: PUSH
16878: CALL_OW 531
16882: AND
16883: IFFALSE 16892
16885: GO 16887
16887: DISABLE
// YouLostInMultiplayer ;
16888: CALL_OW 107
16892: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
16893: CALL 16279 0 0
16897: PUSH
16898: LD_LOC 29
16902: NOT
16903: AND
16904: IFFALSE 16920
16906: GO 16908
16908: DISABLE
// WaitServerStrings = [ $player-win ] ;
16909: LD_ADDR_EXP 54
16913: PUSH
16914: LD_STRING $player-win
16916: PUSH
16917: EMPTY
16918: LIST
16919: ST_TO_ADDR
16920: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
16921: CALL 16279 0 0
16925: PUSH
16926: LD_LOC 29
16930: AND
16931: IFFALSE 16955
16933: GO 16935
16935: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
16936: LD_EXP 21
16940: PUSH
16941: LD_OWVAR 2
16945: ARRAY
16946: PPUSH
16947: CALL 11162 0 1
// YouWinInMultiplayer ;
16951: CALL_OW 106
// end ;
16955: END
// every 100 trigger isEditor marked 401 do
16956: LD_OWVAR 84
16960: IFFALSE 16976
16962: GO 16964
16964: DISABLE
// Debug_Strings = [ You won ] ;
16965: LD_ADDR_OWVAR 48
16969: PUSH
16970: LD_STRING You won
16972: PUSH
16973: EMPTY
16974: LIST
16975: ST_TO_ADDR
16976: END
// every 100 trigger isEditor marked 400 do
16977: LD_OWVAR 84
16981: IFFALSE 16997
16983: GO 16985
16985: DISABLE
// Debug_Strings = [ You loss ] ;
16986: LD_ADDR_OWVAR 48
16990: PUSH
16991: LD_STRING You loss
16993: PUSH
16994: EMPTY
16995: LIST
16996: ST_TO_ADDR
16997: END
// every 100 marked 98 do var i , un ;
16998: GO 17000
17000: DISABLE
17001: LD_INT 0
17003: PPUSH
17004: PPUSH
// begin for i = 1 to side_positions do
17005: LD_ADDR_VAR 0 1
17009: PUSH
17010: DOUBLE
17011: LD_INT 1
17013: DEC
17014: ST_TO_ADDR
17015: LD_EXP 20
17019: PUSH
17020: FOR_TO
17021: IFFALSE 17144
// if side_positions [ i ] then
17023: LD_EXP 20
17027: PUSH
17028: LD_VAR 0 1
17032: ARRAY
17033: IFFALSE 17142
// if not HasPower ( i ) and not Defaited [ i ] then
17035: LD_VAR 0 1
17039: PPUSH
17040: CALL 16343 0 1
17044: NOT
17045: PUSH
17046: LD_LOC 28
17050: PUSH
17051: LD_VAR 0 1
17055: ARRAY
17056: NOT
17057: AND
17058: IFFALSE 17142
// begin un = filterallunits ( [ f_side , i ] ) ;
17060: LD_ADDR_VAR 0 2
17064: PUSH
17065: LD_INT 22
17067: PUSH
17068: LD_VAR 0 1
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: PPUSH
17077: CALL_OW 69
17081: ST_TO_ADDR
// if un then
17082: LD_VAR 0 2
17086: IFFALSE 17100
// SetSide ( un , 0 ) ;
17088: LD_VAR 0 2
17092: PPUSH
17093: LD_INT 0
17095: PPUSH
17096: CALL_OW 235
// Defaited = replace ( Defaited , i , true ) ;
17100: LD_ADDR_LOC 28
17104: PUSH
17105: LD_LOC 28
17109: PPUSH
17110: LD_VAR 0 1
17114: PPUSH
17115: LD_INT 1
17117: PPUSH
17118: CALL_OW 1
17122: ST_TO_ADDR
// if i = your_side then
17123: LD_VAR 0 1
17127: PUSH
17128: LD_OWVAR 2
17132: EQUAL
17133: IFFALSE 17142
// begin Multiplayer_Loose_Message ;
17135: CALL_OW 521
// enable ( 400 ) ;
17139: LD_INT 400
17141: ENABLE_MARKED
// end ; end ;
17142: GO 17020
17144: POP
17145: POP
// if not Unfoged and defaited [ your_side ] then
17146: LD_LOC 30
17150: NOT
17151: PUSH
17152: LD_LOC 28
17156: PUSH
17157: LD_OWVAR 2
17161: ARRAY
17162: AND
17163: IFFALSE 17169
// Unfog ;
17165: CALL 17355 0 0
// DidGameEnd ;
17169: CALL 17184 0 0
// if not GameEnded then
17173: LD_LOC 29
17177: NOT
17178: IFFALSE 17181
// enable ;
17180: ENABLE
// end ;
17181: PPOPN 2
17183: END
// function DidGameEnd ; var i , k , enemy ; begin
17184: LD_INT 0
17186: PPUSH
17187: PPUSH
17188: PPUSH
17189: PPUSH
// enemy = [ ] ;
17190: LD_ADDR_VAR 0 4
17194: PUSH
17195: EMPTY
17196: ST_TO_ADDR
// for i = 1 to side_positions do
17197: LD_ADDR_VAR 0 2
17201: PUSH
17202: DOUBLE
17203: LD_INT 1
17205: DEC
17206: ST_TO_ADDR
17207: LD_EXP 20
17211: PUSH
17212: FOR_TO
17213: IFFALSE 17317
// if not defaited [ i ] then
17215: LD_LOC 28
17219: PUSH
17220: LD_VAR 0 2
17224: ARRAY
17225: NOT
17226: IFFALSE 17315
// for k = 1 to side_positions do
17228: LD_ADDR_VAR 0 3
17232: PUSH
17233: DOUBLE
17234: LD_INT 1
17236: DEC
17237: ST_TO_ADDR
17238: LD_EXP 20
17242: PUSH
17243: FOR_TO
17244: IFFALSE 17313
// if not defaited [ k ] then
17246: LD_LOC 28
17250: PUSH
17251: LD_VAR 0 3
17255: ARRAY
17256: NOT
17257: IFFALSE 17311
// if GetAttitude ( i , k ) in [ att_enemy , att_neutral ] then
17259: LD_VAR 0 2
17263: PPUSH
17264: LD_VAR 0 3
17268: PPUSH
17269: CALL_OW 81
17273: PUSH
17274: LD_INT 2
17276: PUSH
17277: LD_INT 0
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: IN
17284: IFFALSE 17311
// enemy = enemy ^ [ i , k ] ;
17286: LD_ADDR_VAR 0 4
17290: PUSH
17291: LD_VAR 0 4
17295: PUSH
17296: LD_VAR 0 2
17300: PUSH
17301: LD_VAR 0 3
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: ADD
17310: ST_TO_ADDR
17311: GO 17243
17313: POP
17314: POP
17315: GO 17212
17317: POP
17318: POP
// if not enemy then
17319: LD_VAR 0 4
17323: NOT
17324: IFFALSE 17350
// begin GameEnded = true ;
17326: LD_ADDR_LOC 29
17330: PUSH
17331: LD_INT 1
17333: ST_TO_ADDR
// if not defaited [ your_side ] then
17334: LD_LOC 28
17338: PUSH
17339: LD_OWVAR 2
17343: ARRAY
17344: NOT
17345: IFFALSE 17350
// enable ( 401 ) ;
17347: LD_INT 401
17349: ENABLE_MARKED
// end ; end ;
17350: LD_VAR 0 1
17354: RET
// function unfog ; var k , friends ; begin
17355: LD_INT 0
17357: PPUSH
17358: PPUSH
17359: PPUSH
// for k = 1 to side_positions do
17360: LD_ADDR_VAR 0 2
17364: PUSH
17365: DOUBLE
17366: LD_INT 1
17368: DEC
17369: ST_TO_ADDR
17370: LD_EXP 20
17374: PUSH
17375: FOR_TO
17376: IFFALSE 17432
// if not defaited [ k ] then
17378: LD_LOC 28
17382: PUSH
17383: LD_VAR 0 2
17387: ARRAY
17388: NOT
17389: IFFALSE 17430
// if GetAttitude ( your_side , k ) in [ att_friend ] then
17391: LD_OWVAR 2
17395: PPUSH
17396: LD_VAR 0 2
17400: PPUSH
17401: CALL_OW 81
17405: PUSH
17406: LD_INT 1
17408: PUSH
17409: EMPTY
17410: LIST
17411: IN
17412: IFFALSE 17430
// friends = friends ^ k ;
17414: LD_ADDR_VAR 0 3
17418: PUSH
17419: LD_VAR 0 3
17423: PUSH
17424: LD_VAR 0 2
17428: ADD
17429: ST_TO_ADDR
17430: GO 17375
17432: POP
17433: POP
// if not friends then
17434: LD_VAR 0 3
17438: NOT
17439: IFFALSE 17456
// begin fogoff ( true ) ;
17441: LD_INT 1
17443: PPUSH
17444: CALL_OW 344
// unfoged = true ;
17448: LD_ADDR_LOC 30
17452: PUSH
17453: LD_INT 1
17455: ST_TO_ADDR
// end ; end ;
17456: LD_VAR 0 1
17460: RET
// export function MakeGameEnd ; begin
17461: LD_INT 0
17463: PPUSH
// fogoff ( true ) ;
17464: LD_INT 1
17466: PPUSH
17467: CALL_OW 344
// unfoged = true ;
17471: LD_ADDR_LOC 30
17475: PUSH
17476: LD_INT 1
17478: ST_TO_ADDR
// wait ( 0 0$5 ) ;
17479: LD_INT 175
17481: PPUSH
17482: CALL_OW 67
// GameEnded = true ;
17486: LD_ADDR_LOC 29
17490: PUSH
17491: LD_INT 1
17493: ST_TO_ADDR
// end ;
17494: LD_VAR 0 1
17498: RET
// export function GetGameEnded ; begin
17499: LD_INT 0
17501: PPUSH
// result = GameEnded ;
17502: LD_ADDR_VAR 0 1
17506: PUSH
17507: LD_LOC 29
17511: ST_TO_ADDR
// end ;
17512: LD_VAR 0 1
17516: RET
