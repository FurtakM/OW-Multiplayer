// export def_tree_function ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , respawning_time_min , respawning_time_max , siberite_bomb_Delay , amount_of_apemen , tree_function , def_win_rules , bonus_gained , activated ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , battle_flags_id ; export normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 141
// begin Your_Side := mp_player_side ;
  79: LD_ADDR_OWVAR 2
  83: PUSH
  84: LD_OWVAR 7
  88: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  89: LD_ADDR_EXP 21
  93: PUSH
  94: LD_OWVAR 17
  98: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  99: LD_ADDR_EXP 18
 103: PUSH
 104: LD_OWVAR 15
 108: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 109: LD_ADDR_EXP 22
 113: PUSH
 114: LD_OWVAR 16
 118: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 119: LD_ADDR_EXP 20
 123: PUSH
 124: CALL 0 0 0
 128: ST_TO_ADDR
// Teams := mp_teams ;
 129: LD_ADDR_EXP 19
 133: PUSH
 134: LD_OWVAR 12
 138: ST_TO_ADDR
// end else
 139: GO 334
// begin Your_Side := 1 ;
 141: LD_ADDR_OWVAR 2
 145: PUSH
 146: LD_INT 1
 148: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 149: LD_ADDR_EXP 21
 153: PUSH
 154: LD_INT 1
 156: PUSH
 157: LD_INT 2
 159: PUSH
 160: LD_INT 3
 162: PUSH
 163: LD_INT 4
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 188: LD_ADDR_EXP 18
 192: PUSH
 193: LD_INT 1
 195: PUSH
 196: LD_INT 1
 198: PUSH
 199: LD_INT 2
 201: PUSH
 202: LD_INT 2
 204: PUSH
 205: LD_INT 0
 207: PUSH
 208: LD_INT 0
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 0 , 0 , 0 , 0 ] ;
 227: LD_ADDR_EXP 22
 231: PUSH
 232: LD_INT 1
 234: PUSH
 235: LD_INT 2
 237: PUSH
 238: LD_INT 3
 240: PUSH
 241: LD_INT 1
 243: PUSH
 244: LD_INT 0
 246: PUSH
 247: LD_INT 0
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 0
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: LIST
 264: LIST
 265: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 266: LD_ADDR_EXP 20
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: LD_INT 0
 279: PUSH
 280: LD_INT 0
 282: PUSH
 283: LD_INT 0
 285: PUSH
 286: LD_INT 0
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: LIST
 299: LIST
 300: LIST
 301: LIST
 302: LIST
 303: LIST
 304: ST_TO_ADDR
// Teams := [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 305: LD_ADDR_EXP 19
 309: PUSH
 310: LD_INT 1
 312: PUSH
 313: LD_INT 2
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: LD_INT 3
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 334: LD_ADDR_EXP 23
 338: PUSH
 339: LD_EXP 18
 343: PUSH
 344: LD_INT 0
 346: PUSH
 347: EMPTY
 348: LIST
 349: DIFF
 350: PUSH
 351: LD_INT 1
 353: GREATER
 354: ST_TO_ADDR
// if Multiplayer then
 355: LD_OWVAR 4
 359: IFFALSE 566
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 361: LD_ADDR_EXP 41
 365: PUSH
 366: LD_INT 0
 368: PPUSH
 369: CALL_OW 426
 373: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 374: LD_ADDR_EXP 42
 378: PUSH
 379: LD_INT 1
 381: PPUSH
 382: CALL_OW 426
 386: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 387: LD_ADDR_EXP 43
 391: PUSH
 392: LD_INT 2
 394: PPUSH
 395: CALL_OW 426
 399: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 400: LD_ADDR_EXP 44
 404: PUSH
 405: LD_INT 3
 407: PPUSH
 408: CALL_OW 426
 412: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 413: LD_ADDR_EXP 45
 417: PUSH
 418: LD_INT 4
 420: PPUSH
 421: CALL_OW 426
 425: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 426: LD_ADDR_EXP 46
 430: PUSH
 431: LD_INT 5
 433: PPUSH
 434: CALL_OW 426
 438: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 439: LD_ADDR_EXP 48
 443: PUSH
 444: LD_INT 10
 446: PPUSH
 447: CALL_OW 426
 451: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 452: LD_ADDR_EXP 49
 456: PUSH
 457: LD_INT 11
 459: PPUSH
 460: CALL_OW 426
 464: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 465: LD_ADDR_EXP 50
 469: PUSH
 470: LD_INT 12
 472: PPUSH
 473: CALL_OW 426
 477: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 13 ) ;
 478: LD_ADDR_EXP 52
 482: PUSH
 483: LD_INT 13
 485: PPUSH
 486: CALL_OW 426
 490: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 14 ) ;
 491: LD_ADDR_EXP 51
 495: PUSH
 496: LD_INT 14
 498: PPUSH
 499: CALL_OW 426
 503: ST_TO_ADDR
// def_tree_function := GetMultiplayerSetting ( 15 ) ;
 504: LD_ADDR_EXP 1
 508: PUSH
 509: LD_INT 15
 511: PPUSH
 512: CALL_OW 426
 516: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 517: LD_ADDR_EXP 53
 521: PUSH
 522: LD_INT 17
 524: PPUSH
 525: CALL_OW 426
 529: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 530: LD_ADDR_EXP 54
 534: PUSH
 535: LD_INT 20
 537: PPUSH
 538: CALL_OW 426
 542: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 543: LD_ADDR_VAR 0 3
 547: PUSH
 548: LD_INT 22
 550: PPUSH
 551: CALL_OW 426
 555: ST_TO_ADDR
// def_win_rules = 0 ;
 556: LD_ADDR_EXP 15
 560: PUSH
 561: LD_INT 0
 563: ST_TO_ADDR
// end else
 564: GO 698
// begin Randomize ;
 566: CALL_OW 10
// def_base_level := 2 ;
 570: LD_ADDR_EXP 41
 574: PUSH
 575: LD_INT 2
 577: ST_TO_ADDR
// def_amount_of_people := 1 ;
 578: LD_ADDR_EXP 42
 582: PUSH
 583: LD_INT 1
 585: ST_TO_ADDR
// def_skill_level := 1 ;
 586: LD_ADDR_EXP 43
 590: PUSH
 591: LD_INT 1
 593: ST_TO_ADDR
// def_starting_resources := 2 ;
 594: LD_ADDR_EXP 44
 598: PUSH
 599: LD_INT 2
 601: ST_TO_ADDR
// def_shipments_density := 50 ;
 602: LD_ADDR_EXP 45
 606: PUSH
 607: LD_INT 50
 609: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 610: LD_ADDR_EXP 46
 614: PUSH
 615: LD_INT 0
 617: ST_TO_ADDR
// def_shared_vision := 1 ;
 618: LD_ADDR_EXP 48
 622: PUSH
 623: LD_INT 1
 625: ST_TO_ADDR
// def_morale_flags := 1 ;
 626: LD_ADDR_EXP 49
 630: PUSH
 631: LD_INT 1
 633: ST_TO_ADDR
// def_siberite_detection := 1 ;
 634: LD_ADDR_EXP 50
 638: PUSH
 639: LD_INT 1
 641: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 642: LD_ADDR_EXP 52
 646: PUSH
 647: LD_INT 3
 649: ST_TO_ADDR
// def_people_respawning := 2 ;
 650: LD_ADDR_EXP 51
 654: PUSH
 655: LD_INT 2
 657: ST_TO_ADDR
// def_tree_function := 7 ;
 658: LD_ADDR_EXP 1
 662: PUSH
 663: LD_INT 7
 665: ST_TO_ADDR
// def_siberite_bomb := 2 ;
 666: LD_ADDR_EXP 53
 670: PUSH
 671: LD_INT 2
 673: ST_TO_ADDR
// def_builduptime := 1 ;
 674: LD_ADDR_EXP 54
 678: PUSH
 679: LD_INT 1
 681: ST_TO_ADDR
// tech_level = 4 ;
 682: LD_ADDR_VAR 0 3
 686: PUSH
 687: LD_INT 4
 689: ST_TO_ADDR
// def_win_rules = 0 ;
 690: LD_ADDR_EXP 15
 694: PUSH
 695: LD_INT 0
 697: ST_TO_ADDR
// end ; if def_tree_function = 7 then
 698: LD_EXP 1
 702: PUSH
 703: LD_INT 7
 705: EQUAL
 706: IFFALSE 724
// def_tree_function := Rand ( 1 , 5 ) ;
 708: LD_ADDR_EXP 1
 712: PUSH
 713: LD_INT 1
 715: PPUSH
 716: LD_INT 5
 718: PPUSH
 719: CALL_OW 12
 723: ST_TO_ADDR
// InitGameRules ;
 724: CALL 7546 0 0
// if def_game_rules = 0 then
 728: LD_EXP 40
 732: PUSH
 733: LD_INT 0
 735: EQUAL
 736: IFFALSE 763
// begin if isSGUI then
 738: LD_OWVAR 83
 742: IFFALSE 750
// setMpTechs ( ) else
 744: CALL 11063 0 0
 748: GO 763
// begin SetMpTechLevel ( tech_level + 1 ) ;
 750: LD_VAR 0 3
 754: PUSH
 755: LD_INT 1
 757: PLUS
 758: PPUSH
 759: CALL 11210 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 763: LD_ADDR_EXP 2
 767: PUSH
 768: LD_INT 0
 770: PUSH
 771: LD_INT 1
 773: PUSH
 774: LD_INT 1
 776: PUSH
 777: LD_INT 1
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: LIST
 784: LIST
 785: PUSH
 786: LD_EXP 41
 790: PUSH
 791: LD_INT 1
 793: PLUS
 794: ARRAY
 795: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 , 3 ] [ def_base_level + 1 ] ;
 796: LD_ADDR_EXP 3
 800: PUSH
 801: LD_INT 0
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: LD_INT 2
 809: PUSH
 810: LD_INT 3
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: LIST
 817: LIST
 818: PUSH
 819: LD_EXP 41
 823: PUSH
 824: LD_INT 1
 826: PLUS
 827: ARRAY
 828: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 829: LD_ADDR_EXP 5
 833: PUSH
 834: LD_INT 2
 836: PUSH
 837: LD_INT 3
 839: PUSH
 840: LD_INT 4
 842: PUSH
 843: LD_INT 5
 845: PUSH
 846: EMPTY
 847: LIST
 848: LIST
 849: LIST
 850: LIST
 851: PUSH
 852: LD_EXP 43
 856: PUSH
 857: LD_INT 1
 859: PLUS
 860: ARRAY
 861: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 862: LD_ADDR_EXP 7
 866: PUSH
 867: LD_INT 0
 869: PUSH
 870: LD_INT 0
 872: PUSH
 873: LD_INT 0
 875: PUSH
 876: EMPTY
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_INT 30
 883: PUSH
 884: LD_INT 0
 886: PUSH
 887: LD_INT 0
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: LIST
 894: PUSH
 895: LD_INT 50
 897: PUSH
 898: LD_INT 20
 900: PUSH
 901: LD_INT 0
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: LIST
 908: PUSH
 909: LD_INT 80
 911: PUSH
 912: LD_INT 40
 914: PUSH
 915: LD_INT 20
 917: PUSH
 918: EMPTY
 919: LIST
 920: LIST
 921: LIST
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: LIST
 928: PUSH
 929: LD_EXP 44
 933: PUSH
 934: LD_INT 1
 936: PLUS
 937: ARRAY
 938: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 939: LD_ADDR_EXP 6
 943: PUSH
 944: LD_INT 10
 946: PUSH
 947: EMPTY
 948: LIST
 949: PUSH
 950: LD_INT 7
 952: PUSH
 953: LD_INT 14
 955: PUSH
 956: EMPTY
 957: LIST
 958: LIST
 959: PUSH
 960: LD_INT 6
 962: PUSH
 963: LD_INT 12
 965: PUSH
 966: LD_INT 18
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: LIST
 973: PUSH
 974: LD_INT 5
 976: PUSH
 977: LD_INT 10
 979: PUSH
 980: LD_INT 15
 982: PUSH
 983: LD_INT 20
 985: PUSH
 986: EMPTY
 987: LIST
 988: LIST
 989: LIST
 990: LIST
 991: PUSH
 992: EMPTY
 993: LIST
 994: LIST
 995: LIST
 996: LIST
 997: PUSH
 998: LD_EXP 44
1002: PUSH
1003: LD_INT 1
1005: PLUS
1006: ARRAY
1007: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1008: LD_ADDR_EXP 4
1012: PUSH
1013: LD_EXP 42
1017: PUSH
1018: LD_INT 4
1020: PLUS
1021: ST_TO_ADDR
// shipments_density := 150 - ( def_shipments_density + 1 ) ;
1022: LD_ADDR_EXP 8
1026: PUSH
1027: LD_INT 150
1029: PUSH
1030: LD_EXP 45
1034: PUSH
1035: LD_INT 1
1037: PLUS
1038: MINUS
1039: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1040: LD_ADDR_EXP 13
1044: PUSH
1045: LD_INT 0
1047: PUSH
1048: LD_INT 1
1050: PUSH
1051: LD_INT 2
1053: PUSH
1054: LD_INT 3
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: LIST
1061: LIST
1062: PUSH
1063: LD_EXP 52
1067: PUSH
1068: LD_INT 1
1070: PLUS
1071: ARRAY
1072: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1073: LD_ADDR_EXP 10
1077: PUSH
1078: LD_INT 0
1080: PUSH
1081: LD_INT 8400
1083: PUSH
1084: LD_INT 1750
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: LD_EXP 51
1096: PUSH
1097: LD_INT 1
1099: PLUS
1100: ARRAY
1101: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1102: LD_ADDR_EXP 11
1106: PUSH
1107: LD_INT 0
1109: PUSH
1110: LD_INT 21000
1112: PUSH
1113: LD_INT 4200
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: LIST
1120: PUSH
1121: LD_EXP 51
1125: PUSH
1126: LD_INT 1
1128: PLUS
1129: ARRAY
1130: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1131: LD_ADDR_EXP 9
1135: PUSH
1136: LD_INT 1
1138: NEG
1139: PUSH
1140: LD_INT 350
1142: PUSH
1143: LD_INT 700
1145: PUSH
1146: LD_INT 1400
1148: PUSH
1149: LD_INT 0
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: PUSH
1159: LD_EXP 49
1163: PUSH
1164: LD_INT 1
1166: PLUS
1167: ARRAY
1168: ST_TO_ADDR
// battle_flags_id := [ ] ;
1169: LD_ADDR_EXP 27
1173: PUSH
1174: EMPTY
1175: ST_TO_ADDR
// tree_function := [ [ 0 , 0 , 0 , 0 , 0 ] , [ 2 , 0 , 0 , 0 , 0 ] , [ 0 , 4 , 0 , 0 , 0 ] , [ 0 , 0 , 2 , 0 , 0 ] , [ 0 , 0 , 0 , 3 , 0 ] , [ 1 , 2 , 1 , 2 , 2 ] , [ 0 , 0 , 0 , 0 , 3 ] ] [ def_tree_function + 1 ] ;
1176: LD_ADDR_EXP 14
1180: PUSH
1181: LD_INT 0
1183: PUSH
1184: LD_INT 0
1186: PUSH
1187: LD_INT 0
1189: PUSH
1190: LD_INT 0
1192: PUSH
1193: LD_INT 0
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: LIST
1201: LIST
1202: PUSH
1203: LD_INT 2
1205: PUSH
1206: LD_INT 0
1208: PUSH
1209: LD_INT 0
1211: PUSH
1212: LD_INT 0
1214: PUSH
1215: LD_INT 0
1217: PUSH
1218: EMPTY
1219: LIST
1220: LIST
1221: LIST
1222: LIST
1223: LIST
1224: PUSH
1225: LD_INT 0
1227: PUSH
1228: LD_INT 4
1230: PUSH
1231: LD_INT 0
1233: PUSH
1234: LD_INT 0
1236: PUSH
1237: LD_INT 0
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: PUSH
1247: LD_INT 0
1249: PUSH
1250: LD_INT 0
1252: PUSH
1253: LD_INT 2
1255: PUSH
1256: LD_INT 0
1258: PUSH
1259: LD_INT 0
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: PUSH
1269: LD_INT 0
1271: PUSH
1272: LD_INT 0
1274: PUSH
1275: LD_INT 0
1277: PUSH
1278: LD_INT 3
1280: PUSH
1281: LD_INT 0
1283: PUSH
1284: EMPTY
1285: LIST
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: PUSH
1291: LD_INT 1
1293: PUSH
1294: LD_INT 2
1296: PUSH
1297: LD_INT 1
1299: PUSH
1300: LD_INT 2
1302: PUSH
1303: LD_INT 2
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: PUSH
1313: LD_INT 0
1315: PUSH
1316: LD_INT 0
1318: PUSH
1319: LD_INT 0
1321: PUSH
1322: LD_INT 0
1324: PUSH
1325: LD_INT 3
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: LIST
1341: LIST
1342: LIST
1343: PUSH
1344: LD_EXP 1
1348: PUSH
1349: LD_INT 1
1351: PLUS
1352: ARRAY
1353: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1354: LD_EXP 53
1358: PUSH
1359: LD_INT 0
1361: EQUAL
1362: IFFALSE 1374
// siberite_bomb_Delay = 0 else
1364: LD_ADDR_EXP 12
1368: PUSH
1369: LD_INT 0
1371: ST_TO_ADDR
1372: GO 1396
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1374: LD_ADDR_EXP 12
1378: PUSH
1379: LD_EXP 53
1383: PUSH
1384: LD_INT 1
1386: MINUS
1387: PUSH
1388: LD_INT 21000
1390: MUL
1391: PUSH
1392: LD_INT 1
1394: PLUS
1395: ST_TO_ADDR
// end ;
1396: LD_VAR 0 1
1400: RET
// function prepare_map_coordinates ; var side , dep , br1 , br2 , br3 , un , i , j ; begin
1401: LD_INT 0
1403: PPUSH
1404: PPUSH
1405: PPUSH
1406: PPUSH
1407: PPUSH
1408: PPUSH
1409: PPUSH
1410: PPUSH
1411: PPUSH
// depot_def = [ ] ;
1412: LD_ADDR_EXP 24
1416: PUSH
1417: EMPTY
1418: ST_TO_ADDR
// breastworks_def = [ ] ;
1419: LD_ADDR_EXP 25
1423: PUSH
1424: EMPTY
1425: ST_TO_ADDR
// for side := 1 to 4 do
1426: LD_ADDR_VAR 0 2
1430: PUSH
1431: DOUBLE
1432: LD_INT 1
1434: DEC
1435: ST_TO_ADDR
1436: LD_INT 4
1438: PUSH
1439: FOR_TO
1440: IFFALSE 1795
// begin dep := side * 4 - 3 ;
1442: LD_ADDR_VAR 0 3
1446: PUSH
1447: LD_VAR 0 2
1451: PUSH
1452: LD_INT 4
1454: MUL
1455: PUSH
1456: LD_INT 3
1458: MINUS
1459: ST_TO_ADDR
// br1 := side * 4 - 2 ;
1460: LD_ADDR_VAR 0 4
1464: PUSH
1465: LD_VAR 0 2
1469: PUSH
1470: LD_INT 4
1472: MUL
1473: PUSH
1474: LD_INT 2
1476: MINUS
1477: ST_TO_ADDR
// br2 := side * 4 - 1 ;
1478: LD_ADDR_VAR 0 5
1482: PUSH
1483: LD_VAR 0 2
1487: PUSH
1488: LD_INT 4
1490: MUL
1491: PUSH
1492: LD_INT 1
1494: MINUS
1495: ST_TO_ADDR
// br3 := side * 4 ;
1496: LD_ADDR_VAR 0 6
1500: PUSH
1501: LD_VAR 0 2
1505: PUSH
1506: LD_INT 4
1508: MUL
1509: ST_TO_ADDR
// depot_def := depot_def ^ [ [ GetX ( dep ) , GetY ( dep ) , GetDir ( dep ) ] ] ;
1510: LD_ADDR_EXP 24
1514: PUSH
1515: LD_EXP 24
1519: PUSH
1520: LD_VAR 0 3
1524: PPUSH
1525: CALL_OW 250
1529: PUSH
1530: LD_VAR 0 3
1534: PPUSH
1535: CALL_OW 251
1539: PUSH
1540: LD_VAR 0 3
1544: PPUSH
1545: CALL_OW 254
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: LIST
1554: PUSH
1555: EMPTY
1556: LIST
1557: ADD
1558: ST_TO_ADDR
// start_def := start_def ^ [ [ ShiftX ( GetX ( Dep ) , GetDir ( Dep ) , 6 ) , ShiftY ( GetY ( Dep ) , GetDir ( Dep ) , 6 ) ] ] ;
1559: LD_ADDR_EXP 26
1563: PUSH
1564: LD_EXP 26
1568: PUSH
1569: LD_VAR 0 3
1573: PPUSH
1574: CALL_OW 250
1578: PPUSH
1579: LD_VAR 0 3
1583: PPUSH
1584: CALL_OW 254
1588: PPUSH
1589: LD_INT 6
1591: PPUSH
1592: CALL_OW 272
1596: PUSH
1597: LD_VAR 0 3
1601: PPUSH
1602: CALL_OW 251
1606: PPUSH
1607: LD_VAR 0 3
1611: PPUSH
1612: CALL_OW 254
1616: PPUSH
1617: LD_INT 6
1619: PPUSH
1620: CALL_OW 273
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: PUSH
1629: EMPTY
1630: LIST
1631: ADD
1632: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ GetX ( br1 ) , GetY ( br1 ) , GetDir ( br1 ) ] , [ GetX ( br2 ) , GetY ( br2 ) , GetDir ( br2 ) ] , [ GetX ( br3 ) , GetY ( br3 ) , GetDir ( br3 ) ] ] ] ;
1633: LD_ADDR_EXP 25
1637: PUSH
1638: LD_EXP 25
1642: PUSH
1643: LD_VAR 0 4
1647: PPUSH
1648: CALL_OW 250
1652: PUSH
1653: LD_VAR 0 4
1657: PPUSH
1658: CALL_OW 251
1662: PUSH
1663: LD_VAR 0 4
1667: PPUSH
1668: CALL_OW 254
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: LIST
1677: PUSH
1678: LD_VAR 0 5
1682: PPUSH
1683: CALL_OW 250
1687: PUSH
1688: LD_VAR 0 5
1692: PPUSH
1693: CALL_OW 251
1697: PUSH
1698: LD_VAR 0 5
1702: PPUSH
1703: CALL_OW 254
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: LIST
1712: PUSH
1713: LD_VAR 0 6
1717: PPUSH
1718: CALL_OW 250
1722: PUSH
1723: LD_VAR 0 6
1727: PPUSH
1728: CALL_OW 251
1732: PUSH
1733: LD_VAR 0 6
1737: PPUSH
1738: CALL_OW 254
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: LIST
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: LIST
1752: PUSH
1753: EMPTY
1754: LIST
1755: ADD
1756: ST_TO_ADDR
// DestroyUnit ( dep ) ;
1757: LD_VAR 0 3
1761: PPUSH
1762: CALL_OW 65
// DestroyUnit ( br1 ) ;
1766: LD_VAR 0 4
1770: PPUSH
1771: CALL_OW 65
// DestroyUnit ( br2 ) ;
1775: LD_VAR 0 5
1779: PPUSH
1780: CALL_OW 65
// DestroyUnit ( br3 ) ;
1784: LD_VAR 0 6
1788: PPUSH
1789: CALL_OW 65
// end ;
1793: GO 1439
1795: POP
1796: POP
// normal_oil_deposits_locations := [ [ 28 , 15 ] , [ 102 , 17 ] , [ 50 , 84 ] , [ 143 , 111 ] ] ;
1797: LD_ADDR_EXP 28
1801: PUSH
1802: LD_INT 28
1804: PUSH
1805: LD_INT 15
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: PUSH
1812: LD_INT 102
1814: PUSH
1815: LD_INT 17
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: PUSH
1822: LD_INT 50
1824: PUSH
1825: LD_INT 84
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: LD_INT 143
1834: PUSH
1835: LD_INT 111
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PUSH
1842: EMPTY
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 28 , 15 ] , [ 52 , 44 ] ] , [ [ 102 , 17 ] , [ 84 , 37 ] ] , [ [ 50 , 84 ] , [ 74 , 81 ] ] , [ [ 143 , 111 ] , [ 106 , 77 ] ] , ] ;
1848: LD_ADDR_EXP 29
1852: PUSH
1853: LD_INT 28
1855: PUSH
1856: LD_INT 15
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: PUSH
1863: LD_INT 52
1865: PUSH
1866: LD_INT 44
1868: PUSH
1869: EMPTY
1870: LIST
1871: LIST
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 102
1879: PUSH
1880: LD_INT 17
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: LD_INT 84
1889: PUSH
1890: LD_INT 37
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: PUSH
1897: EMPTY
1898: LIST
1899: LIST
1900: PUSH
1901: LD_INT 50
1903: PUSH
1904: LD_INT 84
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: PUSH
1911: LD_INT 74
1913: PUSH
1914: LD_INT 81
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: PUSH
1925: LD_INT 143
1927: PUSH
1928: LD_INT 111
1930: PUSH
1931: EMPTY
1932: LIST
1933: LIST
1934: PUSH
1935: LD_INT 106
1937: PUSH
1938: LD_INT 77
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: PUSH
1945: EMPTY
1946: LIST
1947: LIST
1948: PUSH
1949: EMPTY
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 45 , 25 ] , [ 75 , 22 ] , [ 87 , 105 ] , [ 117 , 99 ] ] ;
1955: LD_ADDR_EXP 30
1959: PUSH
1960: LD_INT 45
1962: PUSH
1963: LD_INT 25
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: PUSH
1970: LD_INT 75
1972: PUSH
1973: LD_INT 22
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PUSH
1980: LD_INT 87
1982: PUSH
1983: LD_INT 105
1985: PUSH
1986: EMPTY
1987: LIST
1988: LIST
1989: PUSH
1990: LD_INT 117
1992: PUSH
1993: LD_INT 99
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: PUSH
2000: EMPTY
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: ST_TO_ADDR
// for i = 1 to Side_Positions do
2006: LD_ADDR_VAR 0 8
2010: PUSH
2011: DOUBLE
2012: LD_INT 1
2014: DEC
2015: ST_TO_ADDR
2016: LD_EXP 21
2020: PUSH
2021: FOR_TO
2022: IFFALSE 2201
// begin if not Side_Positions [ i ] then
2024: LD_EXP 21
2028: PUSH
2029: LD_VAR 0 8
2033: ARRAY
2034: NOT
2035: IFFALSE 2039
// continue ;
2037: GO 2021
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2039: LD_EXP 30
2043: PUSH
2044: LD_EXP 21
2048: PUSH
2049: LD_VAR 0 8
2053: ARRAY
2054: ARRAY
2055: PUSH
2056: LD_INT 1
2058: ARRAY
2059: PPUSH
2060: LD_EXP 30
2064: PUSH
2065: LD_EXP 21
2069: PUSH
2070: LD_VAR 0 8
2074: ARRAY
2075: ARRAY
2076: PUSH
2077: LD_INT 2
2079: ARRAY
2080: PPUSH
2081: LD_INT 3
2083: PPUSH
2084: CALL_OW 62
// if def_extra_oil_deposits then
2088: LD_EXP 46
2092: IFFALSE 2150
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2094: LD_ADDR_VAR 0 9
2098: PUSH
2099: LD_EXP 29
2103: PUSH
2104: LD_EXP 21
2108: PUSH
2109: LD_VAR 0 8
2113: ARRAY
2114: ARRAY
2115: PUSH
2116: FOR_IN
2117: IFFALSE 2146
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2119: LD_VAR 0 9
2123: PUSH
2124: LD_INT 1
2126: ARRAY
2127: PPUSH
2128: LD_VAR 0 9
2132: PUSH
2133: LD_INT 2
2135: ARRAY
2136: PPUSH
2137: LD_INT 2
2139: PPUSH
2140: CALL_OW 62
2144: GO 2116
2146: POP
2147: POP
2148: GO 2199
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2150: LD_EXP 28
2154: PUSH
2155: LD_EXP 21
2159: PUSH
2160: LD_VAR 0 8
2164: ARRAY
2165: ARRAY
2166: PUSH
2167: LD_INT 1
2169: ARRAY
2170: PPUSH
2171: LD_EXP 28
2175: PUSH
2176: LD_EXP 21
2180: PUSH
2181: LD_VAR 0 8
2185: ARRAY
2186: ARRAY
2187: PUSH
2188: LD_INT 2
2190: ARRAY
2191: PPUSH
2192: LD_INT 2
2194: PPUSH
2195: CALL_OW 62
// end ;
2199: GO 2021
2201: POP
2202: POP
// end ;
2203: LD_VAR 0 1
2207: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2208: LD_INT 0
2210: PPUSH
2211: PPUSH
2212: PPUSH
// if not Team_Game then
2213: LD_EXP 23
2217: NOT
2218: IFFALSE 2316
// begin for i = 1 to 8 do
2220: LD_ADDR_VAR 0 2
2224: PUSH
2225: DOUBLE
2226: LD_INT 1
2228: DEC
2229: ST_TO_ADDR
2230: LD_INT 8
2232: PUSH
2233: FOR_TO
2234: IFFALSE 2312
// for j = 1 to 8 do
2236: LD_ADDR_VAR 0 3
2240: PUSH
2241: DOUBLE
2242: LD_INT 1
2244: DEC
2245: ST_TO_ADDR
2246: LD_INT 8
2248: PUSH
2249: FOR_TO
2250: IFFALSE 2308
// if i <> j then
2252: LD_VAR 0 2
2256: PUSH
2257: LD_VAR 0 3
2261: NONEQUAL
2262: IFFALSE 2286
// SetAttitude ( i , j , att_neutral , true ) else
2264: LD_VAR 0 2
2268: PPUSH
2269: LD_VAR 0 3
2273: PPUSH
2274: LD_INT 0
2276: PPUSH
2277: LD_INT 1
2279: PPUSH
2280: CALL_OW 80
2284: GO 2306
// SetAttitude ( i , j , att_friend , true ) ;
2286: LD_VAR 0 2
2290: PPUSH
2291: LD_VAR 0 3
2295: PPUSH
2296: LD_INT 1
2298: PPUSH
2299: LD_INT 1
2301: PPUSH
2302: CALL_OW 80
2306: GO 2249
2308: POP
2309: POP
2310: GO 2233
2312: POP
2313: POP
// end else
2314: GO 2491
// begin if def_shared_vision then
2316: LD_EXP 48
2320: IFFALSE 2385
// begin for i in Teams do
2322: LD_ADDR_VAR 0 2
2326: PUSH
2327: LD_EXP 19
2331: PUSH
2332: FOR_IN
2333: IFFALSE 2383
// for j = 2 to i do
2335: LD_ADDR_VAR 0 3
2339: PUSH
2340: DOUBLE
2341: LD_INT 2
2343: DEC
2344: ST_TO_ADDR
2345: LD_VAR 0 2
2349: PUSH
2350: FOR_TO
2351: IFFALSE 2379
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2353: LD_VAR 0 2
2357: PUSH
2358: LD_VAR 0 3
2362: ARRAY
2363: PPUSH
2364: LD_VAR 0 2
2368: PUSH
2369: LD_INT 1
2371: ARRAY
2372: PPUSH
2373: CALL_OW 343
2377: GO 2350
2379: POP
2380: POP
2381: GO 2332
2383: POP
2384: POP
// end ; for i = 1 to 8 do
2385: LD_ADDR_VAR 0 2
2389: PUSH
2390: DOUBLE
2391: LD_INT 1
2393: DEC
2394: ST_TO_ADDR
2395: LD_INT 8
2397: PUSH
2398: FOR_TO
2399: IFFALSE 2489
// for j = 1 to 8 do
2401: LD_ADDR_VAR 0 3
2405: PUSH
2406: DOUBLE
2407: LD_INT 1
2409: DEC
2410: ST_TO_ADDR
2411: LD_INT 8
2413: PUSH
2414: FOR_TO
2415: IFFALSE 2485
// if Side_Teams [ i ] = Side_Teams [ j ] then
2417: LD_EXP 18
2421: PUSH
2422: LD_VAR 0 2
2426: ARRAY
2427: PUSH
2428: LD_EXP 18
2432: PUSH
2433: LD_VAR 0 3
2437: ARRAY
2438: EQUAL
2439: IFFALSE 2463
// SetAttitude ( i , j , att_friend , true ) else
2441: LD_VAR 0 2
2445: PPUSH
2446: LD_VAR 0 3
2450: PPUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 1
2456: PPUSH
2457: CALL_OW 80
2461: GO 2483
// SetAttitude ( i , j , att_enemy , true ) ;
2463: LD_VAR 0 2
2467: PPUSH
2468: LD_VAR 0 3
2472: PPUSH
2473: LD_INT 2
2475: PPUSH
2476: LD_INT 1
2478: PPUSH
2479: CALL_OW 80
2483: GO 2414
2485: POP
2486: POP
2487: GO 2398
2489: POP
2490: POP
// end ; end ;
2491: LD_VAR 0 1
2495: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2496: LD_INT 0
2498: PPUSH
2499: PPUSH
2500: PPUSH
2501: PPUSH
// result := [ ] ;
2502: LD_ADDR_VAR 0 7
2506: PUSH
2507: EMPTY
2508: ST_TO_ADDR
// for i := 1 to count do
2509: LD_ADDR_VAR 0 8
2513: PUSH
2514: DOUBLE
2515: LD_INT 1
2517: DEC
2518: ST_TO_ADDR
2519: LD_VAR 0 1
2523: PUSH
2524: FOR_TO
2525: IFFALSE 2943
// begin uc_direction := Rand ( 0 , 5 ) ;
2527: LD_ADDR_OWVAR 24
2531: PUSH
2532: LD_INT 0
2534: PPUSH
2535: LD_INT 5
2537: PPUSH
2538: CALL_OW 12
2542: ST_TO_ADDR
// if commander then
2543: LD_LOC 1
2547: IFFALSE 2656
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2549: LD_ADDR_OWVAR 26
2553: PUSH
2554: LD_OWVAR 19
2558: PUSH
2559: LD_OWVAR 20
2563: ARRAY
2564: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2565: LD_INT 1
2567: PPUSH
2568: LD_INT 2
2570: PPUSH
2571: CALL_OW 12
2575: PPUSH
2576: LD_VAR 0 2
2580: PPUSH
2581: LD_EXP 5
2585: PUSH
2586: LD_INT 2
2588: PLUS
2589: PPUSH
2590: CALL_OW 380
// hc_importance := 105 ;
2594: LD_ADDR_OWVAR 32
2598: PUSH
2599: LD_INT 105
2601: ST_TO_ADDR
// commander := false ;
2602: LD_ADDR_LOC 1
2606: PUSH
2607: LD_INT 0
2609: ST_TO_ADDR
// if Multiplayer then
2610: LD_OWVAR 4
2614: IFFALSE 2654
// begin hc_gallery := MULTIAVATARS ;
2616: LD_ADDR_OWVAR 33
2620: PUSH
2621: LD_STRING MULTIAVATARS
2623: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2624: LD_ADDR_OWVAR 34
2628: PUSH
2629: LD_OWVAR 20
2633: PPUSH
2634: CALL_OW 525
2638: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2639: LD_ADDR_OWVAR 27
2643: PUSH
2644: LD_OWVAR 20
2648: PPUSH
2649: CALL_OW 526
2653: ST_TO_ADDR
// end ; end else
2654: GO 2719
// begin hc_name :=  ;
2656: LD_ADDR_OWVAR 26
2660: PUSH
2661: LD_STRING 
2663: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2664: LD_INT 1
2666: PPUSH
2667: LD_INT 2
2669: PPUSH
2670: CALL_OW 12
2674: PPUSH
2675: LD_VAR 0 2
2679: PPUSH
2680: LD_EXP 5
2684: PPUSH
2685: CALL_OW 380
// hc_importance := 0 ;
2689: LD_ADDR_OWVAR 32
2693: PUSH
2694: LD_INT 0
2696: ST_TO_ADDR
// if Multiplayer then
2697: LD_OWVAR 4
2701: IFFALSE 2719
// begin hc_gallery :=  ;
2703: LD_ADDR_OWVAR 33
2707: PUSH
2708: LD_STRING 
2710: ST_TO_ADDR
// hc_face_number := 0 ;
2711: LD_ADDR_OWVAR 34
2715: PUSH
2716: LD_INT 0
2718: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2719: LD_ADDR_VAR 0 10
2723: PUSH
2724: CALL_OW 44
2728: ST_TO_ADDR
// if global_defined then
2729: LD_LOC 3
2733: IFFALSE 2873
// begin if ( cl = class_soldier ) then
2735: LD_VAR 0 2
2739: PUSH
2740: LD_INT 1
2742: EQUAL
2743: IFFALSE 2763
// j := i + soldiers_created else
2745: LD_ADDR_VAR 0 9
2749: PUSH
2750: LD_VAR 0 8
2754: PUSH
2755: LD_LOC 4
2759: PLUS
2760: ST_TO_ADDR
2761: GO 2773
// j := i ;
2763: LD_ADDR_VAR 0 9
2767: PUSH
2768: LD_VAR 0 8
2772: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2773: LD_LOC 2
2777: PUSH
2778: LD_VAR 0 2
2782: ARRAY
2783: PUSH
2784: LD_VAR 0 9
2788: ARRAY
2789: PPUSH
2790: LD_VAR 0 10
2794: PPUSH
2795: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2799: LD_VAR 0 10
2803: PPUSH
2804: LD_INT 2
2806: PPUSH
2807: LD_LOC 2
2811: PUSH
2812: LD_VAR 0 2
2816: ARRAY
2817: PUSH
2818: LD_VAR 0 9
2822: ARRAY
2823: PPUSH
2824: LD_INT 2
2826: PPUSH
2827: CALL_OW 260
2831: PPUSH
2832: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2836: LD_VAR 0 10
2840: PPUSH
2841: LD_INT 1
2843: PPUSH
2844: LD_LOC 2
2848: PUSH
2849: LD_VAR 0 2
2853: ARRAY
2854: PUSH
2855: LD_VAR 0 9
2859: ARRAY
2860: PPUSH
2861: LD_INT 1
2863: PPUSH
2864: CALL_OW 260
2868: PPUSH
2869: CALL_OW 239
// end ; if building then
2873: LD_VAR 0 6
2877: IFFALSE 2895
// PlaceHumanInUnit ( un , building ) else
2879: LD_VAR 0 10
2883: PPUSH
2884: LD_VAR 0 6
2888: PPUSH
2889: CALL_OW 52
2893: GO 2922
// PlaceUnitXYR ( un , x , y , r , false ) ;
2895: LD_VAR 0 10
2899: PPUSH
2900: LD_VAR 0 3
2904: PPUSH
2905: LD_VAR 0 4
2909: PPUSH
2910: LD_VAR 0 5
2914: PPUSH
2915: LD_INT 0
2917: PPUSH
2918: CALL_OW 50
// result := result ^ [ un ] ;
2922: LD_ADDR_VAR 0 7
2926: PUSH
2927: LD_VAR 0 7
2931: PUSH
2932: LD_VAR 0 10
2936: PUSH
2937: EMPTY
2938: LIST
2939: ADD
2940: ST_TO_ADDR
// end ;
2941: GO 2524
2943: POP
2944: POP
// if not global_defined then
2945: LD_LOC 3
2949: NOT
2950: IFFALSE 3028
// if ( global_units >= cl ) then
2952: LD_LOC 2
2956: PUSH
2957: LD_VAR 0 2
2961: GREATEREQUAL
2962: IFFALSE 3003
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2964: LD_ADDR_LOC 2
2968: PUSH
2969: LD_LOC 2
2973: PPUSH
2974: LD_VAR 0 2
2978: PPUSH
2979: LD_LOC 2
2983: PUSH
2984: LD_VAR 0 2
2988: ARRAY
2989: PUSH
2990: LD_VAR 0 7
2994: ADD
2995: PPUSH
2996: CALL_OW 1
3000: ST_TO_ADDR
3001: GO 3028
// global_units := Replace ( global_units , cl , result ) ;
3003: LD_ADDR_LOC 2
3007: PUSH
3008: LD_LOC 2
3012: PPUSH
3013: LD_VAR 0 2
3017: PPUSH
3018: LD_VAR 0 7
3022: PPUSH
3023: CALL_OW 1
3027: ST_TO_ADDR
// if commander then
3028: LD_LOC 1
3032: IFFALSE 3079
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3034: LD_ADDR_EXP 31
3038: PUSH
3039: LD_EXP 31
3043: PPUSH
3044: LD_OWVAR 20
3048: PPUSH
3049: LD_EXP 31
3053: PUSH
3054: LD_OWVAR 20
3058: ARRAY
3059: PUSH
3060: LD_VAR 0 10
3064: ADD
3065: PPUSH
3066: CALL_OW 1
3070: ST_TO_ADDR
// commander := false ;
3071: LD_ADDR_LOC 1
3075: PUSH
3076: LD_INT 0
3078: ST_TO_ADDR
// end ; end ;
3079: LD_VAR 0 7
3083: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3084: LD_INT 0
3086: PPUSH
3087: PPUSH
3088: PPUSH
3089: PPUSH
3090: PPUSH
3091: PPUSH
3092: PPUSH
3093: PPUSH
3094: PPUSH
// if side in [ 0 , 9 ] then
3095: LD_VAR 0 1
3099: PUSH
3100: LD_INT 0
3102: PUSH
3103: LD_INT 9
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: IN
3110: IFFALSE 3114
// exit ;
3112: GO 4164
// pos := Side_Positions [ side ] ;
3114: LD_ADDR_VAR 0 3
3118: PUSH
3119: LD_EXP 21
3123: PUSH
3124: LD_VAR 0 1
3128: ARRAY
3129: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3130: LD_ADDR_OWVAR 21
3134: PUSH
3135: LD_EXP 22
3139: PUSH
3140: LD_VAR 0 1
3144: ARRAY
3145: ST_TO_ADDR
// uc_side := side ;
3146: LD_ADDR_OWVAR 20
3150: PUSH
3151: LD_VAR 0 1
3155: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3156: LD_ADDR_VAR 0 4
3160: PUSH
3161: LD_EXP 24
3165: PUSH
3166: LD_VAR 0 3
3170: ARRAY
3171: PUSH
3172: LD_INT 1
3174: ARRAY
3175: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3176: LD_ADDR_VAR 0 5
3180: PUSH
3181: LD_EXP 24
3185: PUSH
3186: LD_VAR 0 3
3190: ARRAY
3191: PUSH
3192: LD_INT 2
3194: ARRAY
3195: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3196: LD_ADDR_VAR 0 6
3200: PUSH
3201: LD_EXP 24
3205: PUSH
3206: LD_VAR 0 3
3210: ARRAY
3211: PUSH
3212: LD_INT 3
3214: ARRAY
3215: ST_TO_ADDR
// if is_depot then
3216: LD_EXP 2
3220: IFFALSE 3353
// begin bc_type = b_depot ;
3222: LD_ADDR_OWVAR 42
3226: PUSH
3227: LD_INT 0
3229: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3230: LD_ADDR_VAR 0 10
3234: PUSH
3235: LD_VAR 0 4
3239: PPUSH
3240: LD_VAR 0 5
3244: PPUSH
3245: LD_VAR 0 6
3249: PPUSH
3250: CALL_OW 47
3254: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3255: LD_VAR 0 10
3259: PPUSH
3260: LD_STRING @
3262: PUSH
3263: LD_VAR 0 1
3267: STR
3268: PPUSH
3269: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3273: LD_VAR 0 10
3277: PPUSH
3278: CALL_OW 274
3282: PPUSH
3283: LD_INT 1
3285: PPUSH
3286: LD_EXP 7
3290: PUSH
3291: LD_INT 1
3293: ARRAY
3294: PPUSH
3295: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3299: LD_VAR 0 10
3303: PPUSH
3304: CALL_OW 274
3308: PPUSH
3309: LD_INT 2
3311: PPUSH
3312: LD_EXP 7
3316: PUSH
3317: LD_INT 2
3319: ARRAY
3320: PPUSH
3321: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3325: LD_VAR 0 10
3329: PPUSH
3330: CALL_OW 274
3334: PPUSH
3335: LD_INT 3
3337: PPUSH
3338: LD_EXP 7
3342: PUSH
3343: LD_INT 3
3345: ARRAY
3346: PPUSH
3347: CALL_OW 277
// end else
3351: GO 3497
// begin for i := 1 to 3 do
3353: LD_ADDR_VAR 0 7
3357: PUSH
3358: DOUBLE
3359: LD_INT 1
3361: DEC
3362: ST_TO_ADDR
3363: LD_INT 3
3365: PUSH
3366: FOR_TO
3367: IFFALSE 3495
// begin r := starting_resources [ i ] ;
3369: LD_ADDR_VAR 0 8
3373: PUSH
3374: LD_EXP 7
3378: PUSH
3379: LD_VAR 0 7
3383: ARRAY
3384: ST_TO_ADDR
// while r >= 10 do
3385: LD_VAR 0 8
3389: PUSH
3390: LD_INT 10
3392: GREATEREQUAL
3393: IFFALSE 3493
// if r > 50 then
3395: LD_VAR 0 8
3399: PUSH
3400: LD_INT 50
3402: GREATER
3403: IFFALSE 3449
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3405: LD_VAR 0 7
3409: PPUSH
3410: LD_INT 5
3412: PPUSH
3413: LD_VAR 0 4
3417: PPUSH
3418: LD_VAR 0 5
3422: PPUSH
3423: LD_INT 4
3425: PPUSH
3426: LD_INT 0
3428: PPUSH
3429: CALL_OW 60
// r := r - 50 ;
3433: LD_ADDR_VAR 0 8
3437: PUSH
3438: LD_VAR 0 8
3442: PUSH
3443: LD_INT 50
3445: MINUS
3446: ST_TO_ADDR
// end else
3447: GO 3491
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3449: LD_VAR 0 7
3453: PPUSH
3454: LD_VAR 0 8
3458: PUSH
3459: LD_INT 10
3461: DIV
3462: PPUSH
3463: LD_VAR 0 4
3467: PPUSH
3468: LD_VAR 0 5
3472: PPUSH
3473: LD_INT 4
3475: PPUSH
3476: LD_INT 0
3478: PPUSH
3479: CALL_OW 60
// r := 0 ;
3483: LD_ADDR_VAR 0 8
3487: PUSH
3488: LD_INT 0
3490: ST_TO_ADDR
// end ;
3491: GO 3385
// end ;
3493: GO 3366
3495: POP
3496: POP
// end ; for r in starting_crates do
3497: LD_ADDR_VAR 0 8
3501: PUSH
3502: LD_EXP 6
3506: PUSH
3507: FOR_IN
3508: IFFALSE 3540
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3510: LD_INT 1
3512: PPUSH
3513: LD_INT 5
3515: PPUSH
3516: LD_VAR 0 4
3520: PPUSH
3521: LD_VAR 0 5
3525: PPUSH
3526: LD_VAR 0 8
3530: PPUSH
3531: LD_INT 0
3533: PPUSH
3534: CALL_OW 60
3538: GO 3507
3540: POP
3541: POP
// if def_morale_flags then
3542: LD_EXP 49
3546: IFFALSE 3685
// begin x := start_def [ pos ] [ 1 ] ;
3548: LD_ADDR_VAR 0 4
3552: PUSH
3553: LD_EXP 26
3557: PUSH
3558: LD_VAR 0 3
3562: ARRAY
3563: PUSH
3564: LD_INT 1
3566: ARRAY
3567: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3568: LD_ADDR_VAR 0 5
3572: PUSH
3573: LD_EXP 26
3577: PUSH
3578: LD_VAR 0 3
3582: ARRAY
3583: PUSH
3584: LD_INT 2
3586: ARRAY
3587: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3588: LD_VAR 0 4
3592: PPUSH
3593: LD_VAR 0 5
3597: PPUSH
3598: LD_INT 12
3600: PPUSH
3601: LD_INT 2
3603: PPUSH
3604: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3608: LD_ADDR_EXP 27
3612: PUSH
3613: LD_EXP 27
3617: PUSH
3618: LD_VAR 0 1
3622: PPUSH
3623: LD_VAR 0 4
3627: PPUSH
3628: LD_VAR 0 5
3632: PPUSH
3633: LD_INT 1
3635: PUSH
3636: LD_INT 100
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: PUSH
3643: LD_INT 2
3645: PUSH
3646: LD_INT 50
3648: PUSH
3649: EMPTY
3650: LIST
3651: LIST
3652: PUSH
3653: LD_INT 3
3655: PUSH
3656: LD_INT 20
3658: PUSH
3659: EMPTY
3660: LIST
3661: LIST
3662: PUSH
3663: LD_INT 20
3665: PUSH
3666: LD_INT 100
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: LIST
3677: LIST
3678: PPUSH
3679: CALL_OW 418
3683: ADD
3684: ST_TO_ADDR
// end ; commander := true ;
3685: LD_ADDR_LOC 1
3689: PUSH
3690: LD_INT 1
3692: ST_TO_ADDR
// soldiers_created := 0 ;
3693: LD_ADDR_LOC 4
3697: PUSH
3698: LD_INT 0
3700: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3701: LD_ADDR_VAR 0 7
3705: PUSH
3706: DOUBLE
3707: LD_INT 1
3709: DEC
3710: ST_TO_ADDR
3711: LD_EXP 3
3715: PUSH
3716: FOR_TO
3717: IFFALSE 3870
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3719: LD_ADDR_VAR 0 4
3723: PUSH
3724: LD_EXP 25
3728: PUSH
3729: LD_VAR 0 3
3733: ARRAY
3734: PUSH
3735: LD_VAR 0 7
3739: ARRAY
3740: PUSH
3741: LD_INT 1
3743: ARRAY
3744: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3745: LD_ADDR_VAR 0 5
3749: PUSH
3750: LD_EXP 25
3754: PUSH
3755: LD_VAR 0 3
3759: ARRAY
3760: PUSH
3761: LD_VAR 0 7
3765: ARRAY
3766: PUSH
3767: LD_INT 2
3769: ARRAY
3770: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3771: LD_ADDR_VAR 0 6
3775: PUSH
3776: LD_EXP 25
3780: PUSH
3781: LD_VAR 0 3
3785: ARRAY
3786: PUSH
3787: LD_VAR 0 7
3791: ARRAY
3792: PUSH
3793: LD_INT 3
3795: ARRAY
3796: ST_TO_ADDR
// bc_type := b_breastwork ;
3797: LD_ADDR_OWVAR 42
3801: PUSH
3802: LD_INT 31
3804: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3805: LD_ADDR_VAR 0 9
3809: PUSH
3810: LD_VAR 0 4
3814: PPUSH
3815: LD_VAR 0 5
3819: PPUSH
3820: LD_VAR 0 6
3824: PPUSH
3825: CALL_OW 47
3829: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3830: LD_INT 1
3832: PPUSH
3833: LD_INT 1
3835: PPUSH
3836: LD_INT 0
3838: PPUSH
3839: LD_INT 0
3841: PPUSH
3842: LD_INT 0
3844: PPUSH
3845: LD_VAR 0 9
3849: PPUSH
3850: CALL 2496 0 6
// soldiers_created := soldiers_created + 1 ;
3854: LD_ADDR_LOC 4
3858: PUSH
3859: LD_LOC 4
3863: PUSH
3864: LD_INT 1
3866: PLUS
3867: ST_TO_ADDR
// end ;
3868: GO 3716
3870: POP
3871: POP
// x := start_def [ pos ] [ 1 ] ;
3872: LD_ADDR_VAR 0 4
3876: PUSH
3877: LD_EXP 26
3881: PUSH
3882: LD_VAR 0 3
3886: ARRAY
3887: PUSH
3888: LD_INT 1
3890: ARRAY
3891: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3892: LD_ADDR_VAR 0 5
3896: PUSH
3897: LD_EXP 26
3901: PUSH
3902: LD_VAR 0 3
3906: ARRAY
3907: PUSH
3908: LD_INT 2
3910: ARRAY
3911: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3912: LD_LOC 8
3916: PUSH
3917: LD_EXP 3
3921: MINUS
3922: PPUSH
3923: LD_INT 1
3925: PPUSH
3926: LD_VAR 0 4
3930: PPUSH
3931: LD_VAR 0 5
3935: PPUSH
3936: LD_INT 5
3938: PPUSH
3939: LD_INT 0
3941: PPUSH
3942: CALL 2496 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3946: LD_LOC 5
3950: PPUSH
3951: LD_INT 2
3953: PPUSH
3954: LD_VAR 0 4
3958: PPUSH
3959: LD_VAR 0 5
3963: PPUSH
3964: LD_INT 5
3966: PPUSH
3967: LD_INT 0
3969: PPUSH
3970: CALL 2496 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3974: LD_LOC 7
3978: PPUSH
3979: LD_INT 3
3981: PPUSH
3982: LD_VAR 0 4
3986: PPUSH
3987: LD_VAR 0 5
3991: PPUSH
3992: LD_INT 5
3994: PPUSH
3995: LD_INT 0
3997: PPUSH
3998: CALL 2496 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4002: LD_LOC 6
4006: PPUSH
4007: LD_INT 4
4009: PPUSH
4010: LD_VAR 0 4
4014: PPUSH
4015: LD_VAR 0 5
4019: PPUSH
4020: LD_INT 5
4022: PPUSH
4023: LD_INT 0
4025: PPUSH
4026: CALL 2496 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4030: LD_EXP 50
4034: PUSH
4035: LD_INT 20
4037: PPUSH
4038: LD_VAR 0 1
4042: PPUSH
4043: CALL_OW 321
4047: PUSH
4048: LD_INT 1
4050: EQUAL
4051: AND
4052: IFFALSE 4069
// SetTech ( tech_SibDet , side , state_researched ) ;
4054: LD_INT 20
4056: PPUSH
4057: LD_VAR 0 1
4061: PPUSH
4062: LD_INT 2
4064: PPUSH
4065: CALL_OW 322
// if def_siberite_bomb = 1 then
4069: LD_EXP 53
4073: PUSH
4074: LD_INT 1
4076: EQUAL
4077: IFFALSE 4111
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4079: LD_INT 25
4081: PPUSH
4082: LD_VAR 0 1
4086: PPUSH
4087: LD_INT 1
4089: PPUSH
4090: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4094: LD_INT 73
4096: PPUSH
4097: LD_VAR 0 1
4101: PPUSH
4102: LD_INT 1
4104: PPUSH
4105: CALL_OW 322
// end else
4109: GO 4141
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4111: LD_INT 25
4113: PPUSH
4114: LD_VAR 0 1
4118: PPUSH
4119: LD_INT 0
4121: PPUSH
4122: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4126: LD_INT 73
4128: PPUSH
4129: LD_VAR 0 1
4133: PPUSH
4134: LD_INT 0
4136: PPUSH
4137: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4141: LD_INT 24
4143: PPUSH
4144: LD_VAR 0 1
4148: PPUSH
4149: LD_INT 0
4151: PPUSH
4152: CALL_OW 322
// global_defined := true ;
4156: LD_ADDR_LOC 3
4160: PUSH
4161: LD_INT 1
4163: ST_TO_ADDR
// end ;
4164: LD_VAR 0 2
4168: RET
// every 0 0$1 do
4169: GO 4171
4171: DISABLE
// if ( def_siberite_bomb > 1 ) then
4172: LD_EXP 53
4176: PUSH
4177: LD_INT 1
4179: GREATER
4180: IFFALSE 4195
// begin wait ( siberite_bomb_Delay ) ;
4182: LD_EXP 12
4186: PPUSH
4187: CALL_OW 67
// EnableSibFiss ;
4191: CALL 4196 0 0
// end ;
4195: END
// function EnableSibFiss ; var i ; begin
4196: LD_INT 0
4198: PPUSH
4199: PPUSH
// for i := 1 to 8 do
4200: LD_ADDR_VAR 0 2
4204: PUSH
4205: DOUBLE
4206: LD_INT 1
4208: DEC
4209: ST_TO_ADDR
4210: LD_INT 8
4212: PUSH
4213: FOR_TO
4214: IFFALSE 4260
// if Side_Positions [ i ] then
4216: LD_EXP 21
4220: PUSH
4221: LD_VAR 0 2
4225: ARRAY
4226: IFFALSE 4258
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4228: LD_INT 25
4230: PPUSH
4231: LD_VAR 0 2
4235: PPUSH
4236: LD_INT 1
4238: PPUSH
4239: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4243: LD_INT 73
4245: PPUSH
4246: LD_VAR 0 2
4250: PPUSH
4251: LD_INT 1
4253: PPUSH
4254: CALL_OW 322
// end ;
4258: GO 4213
4260: POP
4261: POP
// end ;
4262: LD_VAR 0 1
4266: RET
// function prepare_sides ; var i ; begin
4267: LD_INT 0
4269: PPUSH
4270: PPUSH
// global_units := [ ] ;
4271: LD_ADDR_LOC 2
4275: PUSH
4276: EMPTY
4277: ST_TO_ADDR
// global_defined := false ;
4278: LD_ADDR_LOC 3
4282: PUSH
4283: LD_INT 0
4285: ST_TO_ADDR
// CountClassMembers ;
4286: CALL 4336 0 0
// for i := 1 to 8 do
4290: LD_ADDR_VAR 0 2
4294: PUSH
4295: DOUBLE
4296: LD_INT 1
4298: DEC
4299: ST_TO_ADDR
4300: LD_INT 8
4302: PUSH
4303: FOR_TO
4304: IFFALSE 4329
// if Side_Positions [ i ] then
4306: LD_EXP 21
4310: PUSH
4311: LD_VAR 0 2
4315: ARRAY
4316: IFFALSE 4327
// prepare_side ( i ) ;
4318: LD_VAR 0 2
4322: PPUSH
4323: CALL 3084 0 1
4327: GO 4303
4329: POP
4330: POP
// end ;
4331: LD_VAR 0 1
4335: RET
// function CountClassMembers ; var Mode ; begin
4336: LD_INT 0
4338: PPUSH
4339: PPUSH
// if No_Mechs then
4340: LD_EXP 55
4344: IFFALSE 4356
// Mode := 2 else
4346: LD_ADDR_VAR 0 2
4350: PUSH
4351: LD_INT 2
4353: ST_TO_ADDR
4354: GO 4364
// Mode := 1 ;
4356: LD_ADDR_VAR 0 2
4360: PUSH
4361: LD_INT 1
4363: ST_TO_ADDR
// neng := number_of_people ;
4364: LD_ADDR_LOC 5
4368: PUSH
4369: LD_EXP 4
4373: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4374: LD_ADDR_LOC 8
4378: PUSH
4379: LD_LOC 5
4383: PUSH
4384: LD_INT 4
4386: PUSH
4387: LD_INT 3
4389: PUSH
4390: EMPTY
4391: LIST
4392: LIST
4393: PUSH
4394: LD_VAR 0 2
4398: ARRAY
4399: DIV
4400: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4401: LD_LOC 8
4405: PUSH
4406: LD_EXP 3
4410: LESS
4411: IFFALSE 4423
// nsol := number_of_breastworks ;
4413: LD_ADDR_LOC 8
4417: PUSH
4418: LD_EXP 3
4422: ST_TO_ADDR
// neng := neng - nsol ;
4423: LD_ADDR_LOC 5
4427: PUSH
4428: LD_LOC 5
4432: PUSH
4433: LD_LOC 8
4437: MINUS
4438: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4439: LD_ADDR_LOC 6
4443: PUSH
4444: LD_LOC 5
4448: PUSH
4449: LD_INT 3
4451: PUSH
4452: LD_INT 2
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: PUSH
4459: LD_VAR 0 2
4463: ARRAY
4464: DIV
4465: ST_TO_ADDR
// if ( nsci < 1 ) then
4466: LD_LOC 6
4470: PUSH
4471: LD_INT 1
4473: LESS
4474: IFFALSE 4484
// nsci := 1 ;
4476: LD_ADDR_LOC 6
4480: PUSH
4481: LD_INT 1
4483: ST_TO_ADDR
// neng := neng - nsci ;
4484: LD_ADDR_LOC 5
4488: PUSH
4489: LD_LOC 5
4493: PUSH
4494: LD_LOC 6
4498: MINUS
4499: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4500: LD_ADDR_LOC 7
4504: PUSH
4505: LD_LOC 5
4509: PUSH
4510: LD_INT 2
4512: DIV
4513: PUSH
4514: LD_INT 0
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: PUSH
4521: LD_VAR 0 2
4525: ARRAY
4526: ST_TO_ADDR
// neng := neng - nmech ;
4527: LD_ADDR_LOC 5
4531: PUSH
4532: LD_LOC 5
4536: PUSH
4537: LD_LOC 7
4541: MINUS
4542: ST_TO_ADDR
// if ( neng < 1 ) then
4543: LD_LOC 5
4547: PUSH
4548: LD_INT 1
4550: LESS
4551: IFFALSE 4561
// neng := 1 ;
4553: LD_ADDR_LOC 5
4557: PUSH
4558: LD_INT 1
4560: ST_TO_ADDR
// end ;
4561: LD_VAR 0 1
4565: RET
// starting begin disable ( 98 ) ;
4566: LD_INT 98
4568: DISABLE_MARKED
// disable ( 99 ) ;
4569: LD_INT 99
4571: DISABLE_MARKED
// disable ( 400 ) ;
4572: LD_INT 400
4574: DISABLE_MARKED
// disable ( 401 ) ;
4575: LD_INT 401
4577: DISABLE_MARKED
// disable ( 600 ) ;
4578: LD_INT 600
4580: DISABLE_MARKED
// mp_selectmsg := true ;
4581: LD_ADDR_OWVAR 13
4585: PUSH
4586: LD_INT 1
4588: ST_TO_ADDR
// bonus_gained := [ ] ;
4589: LD_ADDR_EXP 16
4593: PUSH
4594: EMPTY
4595: ST_TO_ADDR
// activated := false ;
4596: LD_ADDR_EXP 17
4600: PUSH
4601: LD_INT 0
4603: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4604: CALL 68 0 0
// prepare_map_coordinates ;
4608: CALL 1401 0 0
// set_shared_visions_and_alliances ;
4612: CALL 2208 0 0
// ResetFog ;
4616: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4620: LD_OWVAR 2
4624: PPUSH
4625: CALL_OW 520
// prepare_sides ;
4629: CALL 4267 0 0
// init_respawning ;
4633: CALL 17082 0 0
// Init_Win_Condition ;
4637: CALL 15232 0 0
// InitLimits ;
4641: CALL 9678 0 0
// ShowTimer ;
4645: CALL 10615 0 0
// music_nat := Side_Nations [ your_side ] ;
4649: LD_ADDR_OWVAR 71
4653: PUSH
4654: LD_EXP 22
4658: PUSH
4659: LD_OWVAR 2
4663: ARRAY
4664: ST_TO_ADDR
// if IAmSpec then
4665: CALL_OW 531
4669: IFFALSE 4693
// begin fogoff ( true ) ;
4671: LD_INT 1
4673: PPUSH
4674: CALL_OW 344
// CenterNowOnXY ( 79 , 59 ) ;
4678: LD_INT 79
4680: PPUSH
4681: LD_INT 59
4683: PPUSH
4684: CALL_OW 86
// enable ( 400 ) ;
4688: LD_INT 400
4690: ENABLE_MARKED
// end else
4691: GO 4739
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4693: LD_EXP 26
4697: PUSH
4698: LD_EXP 21
4702: PUSH
4703: LD_OWVAR 2
4707: ARRAY
4708: ARRAY
4709: PUSH
4710: LD_INT 1
4712: ARRAY
4713: PPUSH
4714: LD_EXP 26
4718: PUSH
4719: LD_EXP 21
4723: PUSH
4724: LD_OWVAR 2
4728: ARRAY
4729: ARRAY
4730: PUSH
4731: LD_INT 2
4733: ARRAY
4734: PPUSH
4735: CALL_OW 86
// end ; AnimateTrees ( true ) ;
4739: LD_INT 1
4741: PPUSH
4742: CALL_OW 573
// InitApeman ;
4746: CALL 4969 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] ;
4750: LD_ADDR_EXP 58
4754: PUSH
4755: LD_INT 8
4757: PUSH
4758: LD_INT 11
4760: PUSH
4761: LD_INT 9
4763: PUSH
4764: LD_INT 10
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: ST_TO_ADDR
// BeginBuildUp ;
4773: CALL 17576 0 0
// end ; end_of_file
4777: END
// every 20 20$00 trigger apemanNumber do
4778: LD_EXP 32
4782: IFFALSE 4815
4784: GO 4786
4786: DISABLE
// begin enable ;
4787: ENABLE
// if apeLevel >= 8 then
4788: LD_EXP 37
4792: PUSH
4793: LD_INT 8
4795: GREATEREQUAL
4796: IFFALSE 4801
// disable else
4798: DISABLE
4799: GO 4815
// apeLevel := apeLevel + 1 ;
4801: LD_ADDR_EXP 37
4805: PUSH
4806: LD_EXP 37
4810: PUSH
4811: LD_INT 1
4813: PLUS
4814: ST_TO_ADDR
// end ;
4815: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
4816: LD_EXP 32
4820: PUSH
4821: LD_EXP 33
4825: LESS
4826: IFFALSE 4966
4828: GO 4830
4830: DISABLE
4831: LD_INT 0
4833: PPUSH
4834: PPUSH
4835: PPUSH
4836: PPUSH
// begin enable ;
4837: ENABLE
// for i := 1 to apemanPos do
4838: LD_ADDR_VAR 0 1
4842: PUSH
4843: DOUBLE
4844: LD_INT 1
4846: DEC
4847: ST_TO_ADDR
4848: LD_EXP 35
4852: PUSH
4853: FOR_TO
4854: IFFALSE 4964
// begin if apemanPlayerCount [ i ] then
4856: LD_EXP 36
4860: PUSH
4861: LD_VAR 0 1
4865: ARRAY
4866: IFFALSE 4962
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
4868: LD_EXP 36
4872: PUSH
4873: LD_VAR 0 1
4877: ARRAY
4878: PUSH
4879: LD_EXP 35
4883: PUSH
4884: LD_VAR 0 1
4888: ARRAY
4889: GREATER
4890: IFFALSE 4962
// begin ape := PrepareApeman ;
4892: LD_ADDR_VAR 0 2
4896: PUSH
4897: CALL 5469 0 0
4901: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
4902: LD_VAR 0 2
4906: PPUSH
4907: LD_EXP 38
4911: PUSH
4912: LD_VAR 0 1
4916: ARRAY
4917: PPUSH
4918: LD_INT 0
4920: PPUSH
4921: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
4925: LD_ADDR_EXP 35
4929: PUSH
4930: LD_EXP 35
4934: PPUSH
4935: LD_VAR 0 1
4939: PPUSH
4940: LD_EXP 35
4944: PUSH
4945: LD_VAR 0 1
4949: ARRAY
4950: PUSH
4951: LD_VAR 0 2
4955: UNION
4956: PPUSH
4957: CALL_OW 1
4961: ST_TO_ADDR
// end ; end ; end ;
4962: GO 4853
4964: POP
4965: POP
// end ;
4966: PPOPN 4
4968: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
4969: LD_INT 0
4971: PPUSH
4972: PPUSH
4973: PPUSH
4974: PPUSH
4975: PPUSH
4976: PPUSH
4977: PPUSH
// playersAmount := 0 ;
4978: LD_ADDR_VAR 0 3
4982: PUSH
4983: LD_INT 0
4985: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , ] ;
4986: LD_ADDR_VAR 0 7
4990: PUSH
4991: LD_INT 13
4993: PUSH
4994: LD_INT 14
4996: PUSH
4997: LD_INT 15
4999: PUSH
5000: LD_INT 16
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5009: LD_ADDR_EXP 38
5013: PUSH
5014: LD_INT 0
5016: PUSH
5017: LD_INT 0
5019: PUSH
5020: LD_INT 0
5022: PUSH
5023: LD_INT 0
5025: PUSH
5026: LD_INT 0
5028: PUSH
5029: LD_INT 0
5031: PUSH
5032: LD_INT 0
5034: PUSH
5035: LD_INT 0
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: LIST
5042: LIST
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: ST_TO_ADDR
// for j = 1 to Side_Positions do
5048: LD_ADDR_VAR 0 4
5052: PUSH
5053: DOUBLE
5054: LD_INT 1
5056: DEC
5057: ST_TO_ADDR
5058: LD_EXP 21
5062: PUSH
5063: FOR_TO
5064: IFFALSE 5131
// if Side_Positions [ j ] then
5066: LD_EXP 21
5070: PUSH
5071: LD_VAR 0 4
5075: ARRAY
5076: IFFALSE 5129
// begin playersAmount := playersAmount + 1 ;
5078: LD_ADDR_VAR 0 3
5082: PUSH
5083: LD_VAR 0 3
5087: PUSH
5088: LD_INT 1
5090: PLUS
5091: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5092: LD_ADDR_EXP 38
5096: PUSH
5097: LD_EXP 38
5101: PPUSH
5102: LD_VAR 0 4
5106: PPUSH
5107: LD_VAR 0 7
5111: PUSH
5112: LD_EXP 21
5116: PUSH
5117: LD_VAR 0 4
5121: ARRAY
5122: ARRAY
5123: PPUSH
5124: CALL_OW 1
5128: ST_TO_ADDR
// end ;
5129: GO 5063
5131: POP
5132: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5133: LD_ADDR_EXP 34
5137: PUSH
5138: LD_INT 3
5140: PUSH
5141: LD_EXP 13
5145: MUL
5146: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5147: LD_ADDR_EXP 32
5151: PUSH
5152: LD_VAR 0 3
5156: PUSH
5157: LD_EXP 34
5161: MUL
5162: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5163: LD_ADDR_EXP 33
5167: PUSH
5168: LD_EXP 32
5172: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5173: LD_ADDR_EXP 35
5177: PUSH
5178: LD_INT 0
5180: PUSH
5181: LD_INT 0
5183: PUSH
5184: LD_INT 0
5186: PUSH
5187: LD_INT 0
5189: PUSH
5190: LD_INT 0
5192: PUSH
5193: LD_INT 0
5195: PUSH
5196: LD_INT 0
5198: PUSH
5199: LD_INT 0
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5212: LD_ADDR_EXP 36
5216: PUSH
5217: LD_INT 0
5219: PUSH
5220: LD_INT 0
5222: PUSH
5223: LD_INT 0
5225: PUSH
5226: LD_INT 0
5228: PUSH
5229: LD_INT 0
5231: PUSH
5232: LD_INT 0
5234: PUSH
5235: LD_INT 0
5237: PUSH
5238: LD_INT 0
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: ST_TO_ADDR
// apeLevel := 1 ;
5251: LD_ADDR_EXP 37
5255: PUSH
5256: LD_INT 1
5258: ST_TO_ADDR
// if not apemanNumber then
5259: LD_EXP 32
5263: NOT
5264: IFFALSE 5268
// exit ;
5266: GO 5464
// for i := 1 to apemanPerPlayer do
5268: LD_ADDR_VAR 0 2
5272: PUSH
5273: DOUBLE
5274: LD_INT 1
5276: DEC
5277: ST_TO_ADDR
5278: LD_EXP 34
5282: PUSH
5283: FOR_TO
5284: IFFALSE 5462
// begin for j := 1 to Side_Positions do
5286: LD_ADDR_VAR 0 4
5290: PUSH
5291: DOUBLE
5292: LD_INT 1
5294: DEC
5295: ST_TO_ADDR
5296: LD_EXP 21
5300: PUSH
5301: FOR_TO
5302: IFFALSE 5458
// if Side_Positions [ j ] then
5304: LD_EXP 21
5308: PUSH
5309: LD_VAR 0 4
5313: ARRAY
5314: IFFALSE 5456
// begin pos := Side_Positions [ j ] ;
5316: LD_ADDR_VAR 0 6
5320: PUSH
5321: LD_EXP 21
5325: PUSH
5326: LD_VAR 0 4
5330: ARRAY
5331: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5332: LD_ADDR_EXP 36
5336: PUSH
5337: LD_EXP 36
5341: PPUSH
5342: LD_VAR 0 4
5346: PPUSH
5347: LD_EXP 36
5351: PUSH
5352: LD_VAR 0 4
5356: ARRAY
5357: PUSH
5358: LD_INT 1
5360: PLUS
5361: PPUSH
5362: CALL_OW 1
5366: ST_TO_ADDR
// ape := PrepareApeman ;
5367: LD_ADDR_VAR 0 5
5371: PUSH
5372: CALL 5469 0 0
5376: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5377: LD_ADDR_EXP 35
5381: PUSH
5382: LD_EXP 35
5386: PPUSH
5387: LD_VAR 0 4
5391: PPUSH
5392: LD_EXP 35
5396: PUSH
5397: LD_VAR 0 4
5401: ARRAY
5402: PPUSH
5403: LD_EXP 35
5407: PUSH
5408: LD_VAR 0 4
5412: ARRAY
5413: PUSH
5414: LD_INT 1
5416: PLUS
5417: PPUSH
5418: LD_VAR 0 5
5422: PPUSH
5423: CALL_OW 1
5427: PPUSH
5428: CALL_OW 1
5432: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5433: LD_VAR 0 5
5437: PPUSH
5438: LD_EXP 38
5442: PUSH
5443: LD_VAR 0 4
5447: ARRAY
5448: PPUSH
5449: LD_INT 0
5451: PPUSH
5452: CALL_OW 49
// end ;
5456: GO 5301
5458: POP
5459: POP
// end ;
5460: GO 5283
5462: POP
5463: POP
// end ;
5464: LD_VAR 0 1
5468: RET
// export function PrepareApeman ; var bonus ; begin
5469: LD_INT 0
5471: PPUSH
5472: PPUSH
// uc_side := 0 ;
5473: LD_ADDR_OWVAR 20
5477: PUSH
5478: LD_INT 0
5480: ST_TO_ADDR
// uc_nation := 0 ;
5481: LD_ADDR_OWVAR 21
5485: PUSH
5486: LD_INT 0
5488: ST_TO_ADDR
// InitHc ;
5489: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
5493: LD_ADDR_VAR 0 2
5497: PUSH
5498: LD_INT 1
5500: NEG
5501: PUSH
5502: LD_INT 0
5504: PUSH
5505: LD_INT 1
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: LIST
5512: PUSH
5513: LD_OWVAR 1
5517: PUSH
5518: LD_INT 3
5520: MOD
5521: PUSH
5522: LD_INT 1
5524: PLUS
5525: ARRAY
5526: ST_TO_ADDR
// hc_class := class_apeman ;
5527: LD_ADDR_OWVAR 28
5531: PUSH
5532: LD_INT 12
5534: ST_TO_ADDR
// hc_gallery :=  ;
5535: LD_ADDR_OWVAR 33
5539: PUSH
5540: LD_STRING 
5542: ST_TO_ADDR
// hc_name :=  ;
5543: LD_ADDR_OWVAR 26
5547: PUSH
5548: LD_STRING 
5550: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
5551: LD_ADDR_OWVAR 31
5555: PUSH
5556: LD_EXP 37
5560: PUSH
5561: LD_VAR 0 2
5565: PLUS
5566: PUSH
5567: LD_EXP 37
5571: PUSH
5572: LD_VAR 0 2
5576: PLUS
5577: PUSH
5578: LD_EXP 37
5582: PUSH
5583: LD_VAR 0 2
5587: PLUS
5588: PUSH
5589: LD_EXP 37
5593: PUSH
5594: LD_VAR 0 2
5598: PLUS
5599: PUSH
5600: EMPTY
5601: LIST
5602: LIST
5603: LIST
5604: LIST
5605: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
5606: LD_ADDR_OWVAR 35
5610: PUSH
5611: LD_INT 10
5613: PUSH
5614: LD_VAR 0 2
5618: MUL
5619: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5620: LD_ADDR_OWVAR 29
5624: PUSH
5625: LD_INT 12
5627: PUSH
5628: LD_INT 10
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: ST_TO_ADDR
// result := CreateHuman ;
5635: LD_ADDR_VAR 0 1
5639: PUSH
5640: CALL_OW 44
5644: ST_TO_ADDR
// end ;
5645: LD_VAR 0 1
5649: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
5650: LD_INT 0
5652: PPUSH
5653: PPUSH
5654: PPUSH
// if not ape then
5655: LD_VAR 0 1
5659: NOT
5660: IFFALSE 5664
// exit ;
5662: GO 5789
// side := GetSide ( ape ) ;
5664: LD_ADDR_VAR 0 3
5668: PUSH
5669: LD_VAR 0 1
5673: PPUSH
5674: CALL_OW 255
5678: ST_TO_ADDR
// if not side then
5679: LD_VAR 0 3
5683: NOT
5684: IFFALSE 5738
// begin for i = 1 to apemanPos do
5686: LD_ADDR_VAR 0 4
5690: PUSH
5691: DOUBLE
5692: LD_INT 1
5694: DEC
5695: ST_TO_ADDR
5696: LD_EXP 35
5700: PUSH
5701: FOR_TO
5702: IFFALSE 5736
// if ape in apemanPos [ i ] then
5704: LD_VAR 0 1
5708: PUSH
5709: LD_EXP 35
5713: PUSH
5714: LD_VAR 0 4
5718: ARRAY
5719: IN
5720: IFFALSE 5734
// begin side := i ;
5722: LD_ADDR_VAR 0 3
5726: PUSH
5727: LD_VAR 0 4
5731: ST_TO_ADDR
// break ;
5732: GO 5736
// end ;
5734: GO 5701
5736: POP
5737: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
5738: LD_ADDR_EXP 35
5742: PUSH
5743: LD_EXP 35
5747: PPUSH
5748: LD_VAR 0 3
5752: PPUSH
5753: LD_EXP 35
5757: PUSH
5758: LD_VAR 0 3
5762: ARRAY
5763: PUSH
5764: LD_VAR 0 1
5768: DIFF
5769: PPUSH
5770: CALL_OW 1
5774: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
5775: LD_ADDR_EXP 32
5779: PUSH
5780: LD_EXP 32
5784: PUSH
5785: LD_INT 1
5787: MINUS
5788: ST_TO_ADDR
// end ; end_of_file
5789: LD_VAR 0 2
5793: RET
// every 1 1$0 + 0 0$0.3 do
5794: GO 5796
5796: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5797: LD_INT 4
5799: PPUSH
5800: LD_INT 5
5802: PPUSH
5803: CALL_OW 12
5807: PPUSH
5808: LD_INT 1
5810: PPUSH
5811: CALL_OW 57
// enable ;
5815: ENABLE
// end ;
5816: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5817: GO 5819
5819: DISABLE
5820: LD_INT 0
5822: PPUSH
5823: PPUSH
// begin case tick of 1 .. 1 1$0 :
5824: LD_OWVAR 1
5828: PUSH
5829: LD_INT 1
5831: DOUBLE
5832: GREATEREQUAL
5833: IFFALSE 5841
5835: LD_INT 2100
5837: DOUBLE
5838: LESSEQUAL
5839: IFTRUE 5843
5841: GO 5871
5843: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5844: LD_EXP 8
5848: PUSH
5849: LD_INT 100
5851: DIVREAL
5852: PUSH
5853: LD_INT 525
5855: PPUSH
5856: LD_INT 1050
5858: PPUSH
5859: CALL_OW 12
5863: MUL
5864: PPUSH
5865: CALL_OW 67
5869: GO 6173
5871: LD_INT 2100
5873: PUSH
5874: LD_INT 1
5876: PLUS
5877: DOUBLE
5878: GREATEREQUAL
5879: IFFALSE 5887
5881: LD_INT 10500
5883: DOUBLE
5884: LESSEQUAL
5885: IFTRUE 5889
5887: GO 5917
5889: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5890: LD_EXP 8
5894: PUSH
5895: LD_INT 100
5897: DIVREAL
5898: PUSH
5899: LD_INT 1050
5901: PPUSH
5902: LD_INT 1750
5904: PPUSH
5905: CALL_OW 12
5909: MUL
5910: PPUSH
5911: CALL_OW 67
5915: GO 6173
5917: LD_INT 10500
5919: PUSH
5920: LD_INT 1
5922: PLUS
5923: DOUBLE
5924: GREATEREQUAL
5925: IFFALSE 5933
5927: LD_INT 21000
5929: DOUBLE
5930: LESSEQUAL
5931: IFTRUE 5935
5933: GO 5963
5935: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5936: LD_EXP 8
5940: PUSH
5941: LD_INT 100
5943: DIVREAL
5944: PUSH
5945: LD_INT 1750
5947: PPUSH
5948: LD_INT 2100
5950: PPUSH
5951: CALL_OW 12
5955: MUL
5956: PPUSH
5957: CALL_OW 67
5961: GO 6173
5963: LD_INT 21000
5965: PUSH
5966: LD_INT 1
5968: PLUS
5969: DOUBLE
5970: GREATEREQUAL
5971: IFFALSE 5979
5973: LD_INT 42000
5975: DOUBLE
5976: LESSEQUAL
5977: IFTRUE 5981
5979: GO 6009
5981: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5982: LD_EXP 8
5986: PUSH
5987: LD_INT 100
5989: DIVREAL
5990: PUSH
5991: LD_INT 2100
5993: PPUSH
5994: LD_INT 2275
5996: PPUSH
5997: CALL_OW 12
6001: MUL
6002: PPUSH
6003: CALL_OW 67
6007: GO 6173
6009: LD_INT 42000
6011: PUSH
6012: LD_INT 1
6014: PLUS
6015: DOUBLE
6016: GREATEREQUAL
6017: IFFALSE 6025
6019: LD_INT 63000
6021: DOUBLE
6022: LESSEQUAL
6023: IFTRUE 6027
6025: GO 6055
6027: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
6028: LD_EXP 8
6032: PUSH
6033: LD_INT 100
6035: DIVREAL
6036: PUSH
6037: LD_INT 2275
6039: PPUSH
6040: LD_INT 2450
6042: PPUSH
6043: CALL_OW 12
6047: MUL
6048: PPUSH
6049: CALL_OW 67
6053: GO 6173
6055: LD_INT 63000
6057: PUSH
6058: LD_INT 1
6060: PLUS
6061: DOUBLE
6062: GREATEREQUAL
6063: IFFALSE 6071
6065: LD_INT 105000
6067: DOUBLE
6068: LESSEQUAL
6069: IFTRUE 6073
6071: GO 6101
6073: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
6074: LD_EXP 8
6078: PUSH
6079: LD_INT 100
6081: DIVREAL
6082: PUSH
6083: LD_INT 2450
6085: PPUSH
6086: LD_INT 2800
6088: PPUSH
6089: CALL_OW 12
6093: MUL
6094: PPUSH
6095: CALL_OW 67
6099: GO 6173
6101: LD_INT 105000
6103: PUSH
6104: LD_INT 1
6106: PLUS
6107: DOUBLE
6108: GREATEREQUAL
6109: IFFALSE 6117
6111: LD_INT 630000
6113: DOUBLE
6114: LESSEQUAL
6115: IFTRUE 6119
6117: GO 6147
6119: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
6120: LD_EXP 8
6124: PUSH
6125: LD_INT 100
6127: DIVREAL
6128: PUSH
6129: LD_INT 2800
6131: PPUSH
6132: LD_INT 3500
6134: PPUSH
6135: CALL_OW 12
6139: MUL
6140: PPUSH
6141: CALL_OW 67
6145: GO 6173
6147: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
6148: LD_EXP 8
6152: PUSH
6153: LD_INT 100
6155: DIVREAL
6156: PUSH
6157: LD_INT 3500
6159: PPUSH
6160: LD_INT 3850
6162: PPUSH
6163: CALL_OW 12
6167: MUL
6168: PPUSH
6169: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
6173: LD_ADDR_VAR 0 2
6177: PUSH
6178: LD_INT 3
6180: PPUSH
6181: LD_INT 5
6183: PPUSH
6184: CALL_OW 12
6188: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
6189: LD_ADDR_VAR 0 1
6193: PUSH
6194: LD_EXP 21
6198: PUSH
6199: LD_INT 0
6201: PUSH
6202: EMPTY
6203: LIST
6204: DIFF
6205: PUSH
6206: FOR_IN
6207: IFFALSE 6247
// CreateCratesArea ( amount , [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] [ i ] , true ) ;
6209: LD_VAR 0 2
6213: PPUSH
6214: LD_INT 8
6216: PUSH
6217: LD_INT 11
6219: PUSH
6220: LD_INT 9
6222: PUSH
6223: LD_INT 10
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: LIST
6230: LIST
6231: PUSH
6232: LD_VAR 0 1
6236: ARRAY
6237: PPUSH
6238: LD_INT 1
6240: PPUSH
6241: CALL_OW 55
6245: GO 6206
6247: POP
6248: POP
// enable ;
6249: ENABLE
// end ; end_of_file
6250: PPOPN 2
6252: END
// every 0 0$1 trigger def_tree_function do
6253: LD_EXP 1
6257: IFFALSE 6295
6259: GO 6261
6261: DISABLE
// begin wait ( rand ( 3 3$0 , 10 10$0 ) ) ;
6262: LD_INT 6300
6264: PPUSH
6265: LD_INT 21000
6267: PPUSH
6268: CALL_OW 12
6272: PPUSH
6273: CALL_OW 67
// SetAreaMapShow ( Tree , 1 ) ;
6277: LD_INT 3
6279: PPUSH
6280: LD_INT 1
6282: PPUSH
6283: CALL_OW 424
// activated := true ;
6287: LD_ADDR_EXP 17
6291: PUSH
6292: LD_INT 1
6294: ST_TO_ADDR
// end ;
6295: END
// every 0 0$2 trigger activated and def_tree_function do var i , un , tmp ;
6296: LD_EXP 17
6300: PUSH
6301: LD_EXP 1
6305: AND
6306: IFFALSE 6570
6308: GO 6310
6310: DISABLE
6311: LD_INT 0
6313: PPUSH
6314: PPUSH
6315: PPUSH
// begin enable ;
6316: ENABLE
// ExtraStrings := [ #MultiSmall-Tree & def_tree_function ] ;
6317: LD_ADDR_EXP 56
6321: PUSH
6322: LD_STRING #MultiSmall-Tree
6324: PUSH
6325: LD_EXP 1
6329: STR
6330: PUSH
6331: EMPTY
6332: LIST
6333: ST_TO_ADDR
// tmp := FilterUnitsInArea ( Tree , [ f_type , unit_human ] ) ;
6334: LD_ADDR_VAR 0 3
6338: PUSH
6339: LD_INT 3
6341: PPUSH
6342: LD_INT 21
6344: PUSH
6345: LD_INT 1
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PPUSH
6352: CALL_OW 70
6356: ST_TO_ADDR
// if not tmp then
6357: LD_VAR 0 3
6361: NOT
6362: IFFALSE 6366
// exit ;
6364: GO 6570
// for un in tmp do
6366: LD_ADDR_VAR 0 2
6370: PUSH
6371: LD_VAR 0 3
6375: PUSH
6376: FOR_IN
6377: IFFALSE 6568
// begin if un in bonus_gained then
6379: LD_VAR 0 2
6383: PUSH
6384: LD_EXP 16
6388: IN
6389: IFFALSE 6393
// continue ;
6391: GO 6376
// bonus_gained := bonus_gained ^ un ;
6393: LD_ADDR_EXP 16
6397: PUSH
6398: LD_EXP 16
6402: PUSH
6403: LD_VAR 0 2
6407: ADD
6408: ST_TO_ADDR
// if GetClass ( un ) in [ class_soldier , class_engineer , class_mechanic , class_scientistic , class_sniper , class_bazooker , class_mortar ] then
6409: LD_VAR 0 2
6413: PPUSH
6414: CALL_OW 257
6418: PUSH
6419: LD_INT 1
6421: PUSH
6422: LD_INT 2
6424: PUSH
6425: LD_INT 3
6427: PUSH
6428: LD_INT 4
6430: PUSH
6431: LD_INT 5
6433: PUSH
6434: LD_INT 9
6436: PUSH
6437: LD_INT 8
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: IN
6449: IFFALSE 6498
// begin for i := 1 to 4 do
6451: LD_ADDR_VAR 0 1
6455: PUSH
6456: DOUBLE
6457: LD_INT 1
6459: DEC
6460: ST_TO_ADDR
6461: LD_INT 4
6463: PUSH
6464: FOR_TO
6465: IFFALSE 6494
// GiveSkillBonus ( un , i , tree_function [ i ] ) ;
6467: LD_VAR 0 2
6471: PPUSH
6472: LD_VAR 0 1
6476: PPUSH
6477: LD_EXP 14
6481: PUSH
6482: LD_VAR 0 1
6486: ARRAY
6487: PPUSH
6488: CALL_OW 238
6492: GO 6464
6494: POP
6495: POP
// end else
6496: GO 6566
// if un in [ class_apeman , class_apeman_engineer , class_apeman_kamikaze , class_apeman_soldier ] then
6498: LD_VAR 0 2
6502: PUSH
6503: LD_INT 12
6505: PUSH
6506: LD_INT 16
6508: PUSH
6509: LD_INT 17
6511: PUSH
6512: LD_INT 15
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: IN
6521: IFFALSE 6566
// begin for i := 1 to 4 do
6523: LD_ADDR_VAR 0 1
6527: PUSH
6528: DOUBLE
6529: LD_INT 1
6531: DEC
6532: ST_TO_ADDR
6533: LD_INT 4
6535: PUSH
6536: FOR_TO
6537: IFFALSE 6564
// GiveSkillBonus ( un , i , tree_function [ 5 ] ) ;
6539: LD_VAR 0 2
6543: PPUSH
6544: LD_VAR 0 1
6548: PPUSH
6549: LD_EXP 14
6553: PUSH
6554: LD_INT 5
6556: ARRAY
6557: PPUSH
6558: CALL_OW 238
6562: GO 6536
6564: POP
6565: POP
// end ; end ;
6566: GO 6376
6568: POP
6569: POP
// end ; end_of_file
6570: PPOPN 3
6572: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6573: LD_VAR 0 1
6577: PPUSH
6578: CALL_OW 266
6582: PUSH
6583: LD_INT 0
6585: PUSH
6586: LD_INT 1
6588: PUSH
6589: EMPTY
6590: LIST
6591: LIST
6592: IN
6593: IFFALSE 6618
// SetBName ( b , @ & GetSide ( b ) ) ;
6595: LD_VAR 0 1
6599: PPUSH
6600: LD_STRING @
6602: PUSH
6603: LD_VAR 0 1
6607: PPUSH
6608: CALL_OW 255
6612: STR
6613: PPUSH
6614: CALL_OW 500
// if def_game_rules then
6618: LD_EXP 40
6622: IFFALSE 6659
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
6624: LD_VAR 0 1
6628: PPUSH
6629: LD_VAR 0 1
6633: PPUSH
6634: CALL_OW 266
6638: PPUSH
6639: LD_VAR 0 1
6643: PPUSH
6644: CALL_OW 255
6648: PPUSH
6649: LD_INT 0
6651: PPUSH
6652: LD_INT 1
6654: PPUSH
6655: CALL 10079 0 5
// end ;
6659: PPOPN 2
6661: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6662: LD_VAR 0 1
6666: PPUSH
6667: CALL_OW 266
6671: PUSH
6672: LD_INT 0
6674: PUSH
6675: LD_INT 1
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: IN
6682: IFFALSE 6707
// SetBName ( b , @ & GetSide ( b ) ) ;
6684: LD_VAR 0 1
6688: PPUSH
6689: LD_STRING @
6691: PUSH
6692: LD_VAR 0 1
6696: PPUSH
6697: CALL_OW 255
6701: STR
6702: PPUSH
6703: CALL_OW 500
// if def_game_rules then
6707: LD_EXP 40
6711: IFFALSE 6750
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
6713: LD_VAR 0 1
6717: PPUSH
6718: LD_VAR 0 1
6722: PPUSH
6723: CALL_OW 266
6727: PPUSH
6728: LD_VAR 0 1
6732: PPUSH
6733: CALL_OW 255
6737: PPUSH
6738: LD_VAR 0 2
6742: PPUSH
6743: LD_INT 1
6745: PPUSH
6746: CALL 10079 0 5
// end ;
6750: PPOPN 3
6752: END
// on VehicleConstructed ( veh , fac ) do var side ;
6753: LD_INT 0
6755: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6756: LD_VAR 0 1
6760: PPUSH
6761: CALL_OW 263
6765: PUSH
6766: LD_INT 5
6768: EQUAL
6769: IFFALSE 6911
// begin side := GetSide ( veh ) ;
6771: LD_ADDR_VAR 0 3
6775: PUSH
6776: LD_VAR 0 1
6780: PPUSH
6781: CALL_OW 255
6785: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6786: LD_ADDR_EXP 35
6790: PUSH
6791: LD_EXP 35
6795: PPUSH
6796: LD_VAR 0 3
6800: PPUSH
6801: LD_EXP 35
6805: PUSH
6806: LD_VAR 0 3
6810: ARRAY
6811: PPUSH
6812: LD_INT 52
6814: PUSH
6815: EMPTY
6816: LIST
6817: PPUSH
6818: CALL_OW 72
6822: PUSH
6823: LD_INT 22
6825: PUSH
6826: LD_VAR 0 3
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: PUSH
6835: LD_INT 2
6837: PUSH
6838: LD_INT 33
6840: PUSH
6841: LD_INT 5
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: PUSH
6848: LD_INT 25
6850: PUSH
6851: LD_INT 12
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PUSH
6858: LD_INT 25
6860: PUSH
6861: LD_INT 15
6863: PUSH
6864: EMPTY
6865: LIST
6866: LIST
6867: PUSH
6868: LD_INT 25
6870: PUSH
6871: LD_INT 16
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: PUSH
6878: LD_INT 25
6880: PUSH
6881: LD_INT 17
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: PUSH
6888: EMPTY
6889: LIST
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: PPUSH
6900: CALL_OW 69
6904: UNION
6905: PPUSH
6906: CALL_OW 1
6910: ST_TO_ADDR
// end ; end ;
6911: PPOPN 3
6913: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6914: LD_INT 0
6916: PPUSH
6917: PPUSH
6918: PPUSH
6919: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6920: LD_VAR 0 1
6924: PPUSH
6925: CALL_OW 257
6929: PUSH
6930: LD_INT 12
6932: PUSH
6933: LD_INT 15
6935: PUSH
6936: LD_INT 17
6938: PUSH
6939: LD_INT 16
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: LIST
6946: LIST
6947: IN
6948: PUSH
6949: LD_VAR 0 1
6953: PPUSH
6954: CALL_OW 263
6958: PUSH
6959: LD_INT 5
6961: EQUAL
6962: OR
6963: IFFALSE 6974
// ApeKilled ( j ) ;
6965: LD_VAR 0 1
6969: PPUSH
6970: CALL 5650 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6974: LD_VAR 0 1
6978: PPUSH
6979: CALL_OW 266
6983: PUSH
6984: LD_INT 0
6986: PUSH
6987: LD_INT 1
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: IN
6994: IFFALSE 7076
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6996: LD_ADDR_VAR 0 4
7000: PUSH
7001: LD_EXP 21
7005: PUSH
7006: LD_VAR 0 1
7010: PPUSH
7011: CALL_OW 255
7015: ARRAY
7016: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7017: LD_ADDR_VAR 0 2
7021: PUSH
7022: LD_EXP 26
7026: PUSH
7027: LD_VAR 0 4
7031: ARRAY
7032: PUSH
7033: LD_INT 1
7035: ARRAY
7036: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7037: LD_ADDR_VAR 0 3
7041: PUSH
7042: LD_EXP 26
7046: PUSH
7047: LD_VAR 0 4
7051: ARRAY
7052: PUSH
7053: LD_INT 2
7055: ARRAY
7056: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7057: LD_VAR 0 2
7061: PPUSH
7062: LD_VAR 0 3
7066: PPUSH
7067: CALL_OW 420
7071: PPUSH
7072: CALL_OW 419
// end ; if def_game_rules then
7076: LD_EXP 40
7080: IFFALSE 7179
// if ( GetType ( j ) = 3 ) then
7082: LD_VAR 0 1
7086: PPUSH
7087: CALL_OW 247
7091: PUSH
7092: LD_INT 3
7094: EQUAL
7095: IFFALSE 7135
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7097: LD_VAR 0 1
7101: PPUSH
7102: LD_VAR 0 1
7106: PPUSH
7107: CALL_OW 266
7111: PPUSH
7112: LD_VAR 0 1
7116: PPUSH
7117: CALL_OW 255
7121: PPUSH
7122: LD_INT 0
7124: PPUSH
7125: LD_INT 1
7127: NEG
7128: PPUSH
7129: CALL 10079 0 5
7133: GO 7179
// if ( GetChassis ( j ) = 25 ) then
7135: LD_VAR 0 1
7139: PPUSH
7140: CALL_OW 265
7144: PUSH
7145: LD_INT 25
7147: EQUAL
7148: IFFALSE 7179
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7150: LD_VAR 0 1
7154: PPUSH
7155: LD_INT 37
7157: PPUSH
7158: LD_VAR 0 1
7162: PPUSH
7163: CALL_OW 255
7167: PPUSH
7168: LD_INT 0
7170: PPUSH
7171: LD_INT 1
7173: NEG
7174: PPUSH
7175: CALL 10079 0 5
// end ;
7179: PPOPN 5
7181: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7182: LD_EXP 40
7186: PUSH
7187: LD_VAR 0 1
7191: PPUSH
7192: CALL_OW 265
7196: PUSH
7197: LD_INT 25
7199: EQUAL
7200: AND
7201: IFFALSE 7233
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
7203: LD_VAR 0 1
7207: PPUSH
7208: LD_INT 37
7210: PPUSH
7211: LD_VAR 0 1
7215: PPUSH
7216: CALL_OW 255
7220: PPUSH
7221: LD_VAR 0 3
7225: PPUSH
7226: LD_INT 1
7228: PPUSH
7229: CALL 10079 0 5
// end ;
7233: PPOPN 4
7235: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7236: LD_VAR 0 1
7240: PPUSH
7241: LD_VAR 0 2
7245: PPUSH
7246: LD_VAR 0 3
7250: PPUSH
7251: LD_OWVAR 2
7255: PPUSH
7256: CALL 10824 0 4
7260: PPOPN 3
7262: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7263: LD_INT 0
7265: PPUSH
7266: PPUSH
// for un in battle_flags_id do
7267: LD_ADDR_VAR 0 2
7271: PUSH
7272: LD_EXP 27
7276: PUSH
7277: FOR_IN
7278: IFFALSE 7353
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7280: LD_VAR 0 2
7284: PPUSH
7285: LD_INT 1
7287: PUSH
7288: LD_LOC 9
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: PUSH
7297: LD_INT 2
7299: PUSH
7300: LD_LOC 9
7304: PUSH
7305: LD_INT 2
7307: DIV
7308: PUSH
7309: EMPTY
7310: LIST
7311: LIST
7312: PUSH
7313: LD_INT 3
7315: PUSH
7316: LD_LOC 9
7320: PUSH
7321: LD_INT 5
7323: DIV
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PUSH
7329: LD_INT 20
7331: PUSH
7332: LD_LOC 9
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: PPUSH
7347: CALL_OW 423
7351: GO 7277
7353: POP
7354: POP
// end ;
7355: LD_VAR 0 1
7359: RET
// every 0 0$0.1 do var un ;
7360: GO 7362
7362: DISABLE
7363: LD_INT 0
7365: PPUSH
// begin if not def_morale_flags then
7366: LD_EXP 49
7370: NOT
7371: IFFALSE 7375
// exit ;
7373: GO 7452
// if not morale_decreasing_time then
7375: LD_EXP 9
7379: NOT
7380: IFFALSE 7384
// exit ;
7382: GO 7452
// strength = 100 ;
7384: LD_ADDR_LOC 9
7388: PUSH
7389: LD_INT 100
7391: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7392: LD_EXP 9
7396: PPUSH
7397: CALL_OW 67
// strength := strength - 1 ;
7401: LD_ADDR_LOC 9
7405: PUSH
7406: LD_LOC 9
7410: PUSH
7411: LD_INT 1
7413: MINUS
7414: ST_TO_ADDR
// Update_Flags ;
7415: CALL 7263 0 0
// until not strength ;
7419: LD_LOC 9
7423: NOT
7424: IFFALSE 7392
// for un in battle_flags_id do
7426: LD_ADDR_VAR 0 1
7430: PUSH
7431: LD_EXP 27
7435: PUSH
7436: FOR_IN
7437: IFFALSE 7450
// KillBattleFlag ( un ) ;
7439: LD_VAR 0 1
7443: PPUSH
7444: CALL_OW 419
7448: GO 7436
7450: POP
7451: POP
// end ; end_of_file
7452: PPOPN 1
7454: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
7455: LD_INT 0
7457: PPUSH
7458: PPUSH
// if ( not IAmSpec ) then
7459: CALL_OW 531
7463: NOT
7464: IFFALSE 7480
// Result := Limits_Info ^  ;
7466: LD_ADDR_VAR 0 1
7470: PUSH
7471: LD_LOC 21
7475: PUSH
7476: LD_STRING 
7478: ADD
7479: ST_TO_ADDR
// for i := 1 to 8 do
7480: LD_ADDR_VAR 0 2
7484: PUSH
7485: DOUBLE
7486: LD_INT 1
7488: DEC
7489: ST_TO_ADDR
7490: LD_INT 8
7492: PUSH
7493: FOR_TO
7494: IFFALSE 7539
// if Cheaters [ i ] then
7496: LD_LOC 22
7500: PUSH
7501: LD_VAR 0 2
7505: ARRAY
7506: IFFALSE 7537
// Result := Result ^ [ #Cheater , i , i ] ;
7508: LD_ADDR_VAR 0 1
7512: PUSH
7513: LD_VAR 0 1
7517: PUSH
7518: LD_STRING #Cheater
7520: PUSH
7521: LD_VAR 0 2
7525: PUSH
7526: LD_VAR 0 2
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: LIST
7535: ADD
7536: ST_TO_ADDR
7537: GO 7493
7539: POP
7540: POP
// end ;
7541: LD_VAR 0 1
7545: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
7546: LD_INT 0
7548: PPUSH
7549: PPUSH
7550: PPUSH
7551: PPUSH
7552: PPUSH
// case Game_Type of 10 :
7553: LD_EXP 39
7557: PUSH
7558: LD_INT 10
7560: DOUBLE
7561: EQUAL
7562: IFTRUE 7566
7564: GO 7577
7566: POP
// def_game_rules := 1 ; 11 :
7567: LD_ADDR_EXP 40
7571: PUSH
7572: LD_INT 1
7574: ST_TO_ADDR
7575: GO 7597
7577: LD_INT 11
7579: DOUBLE
7580: EQUAL
7581: IFTRUE 7585
7583: GO 7596
7585: POP
// def_game_rules := 3 ; end ;
7586: LD_ADDR_EXP 40
7590: PUSH
7591: LD_INT 3
7593: ST_TO_ADDR
7594: GO 7597
7596: POP
// case def_game_rules of 0 :
7597: LD_EXP 40
7601: PUSH
7602: LD_INT 0
7604: DOUBLE
7605: EQUAL
7606: IFTRUE 7610
7608: GO 7615
7610: POP
// exit ; 1 :
7611: GO 9673
7613: GO 9573
7615: LD_INT 1
7617: DOUBLE
7618: EQUAL
7619: IFTRUE 7623
7621: GO 7839
7623: POP
// begin def_base_level := 2 ;
7624: LD_ADDR_EXP 41
7628: PUSH
7629: LD_INT 2
7631: ST_TO_ADDR
// def_amount_of_people := 2 ;
7632: LD_ADDR_EXP 42
7636: PUSH
7637: LD_INT 2
7639: ST_TO_ADDR
// def_skill_level := 1 ;
7640: LD_ADDR_EXP 43
7644: PUSH
7645: LD_INT 1
7647: ST_TO_ADDR
// def_starting_resources := 2 ;
7648: LD_ADDR_EXP 44
7652: PUSH
7653: LD_INT 2
7655: ST_TO_ADDR
// def_shipments_density := 1 ;
7656: LD_ADDR_EXP 45
7660: PUSH
7661: LD_INT 1
7663: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
7664: LD_ADDR_EXP 46
7668: PUSH
7669: LD_INT 0
7671: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
7672: LD_ADDR_EXP 47
7676: PUSH
7677: LD_INT 1
7679: ST_TO_ADDR
// def_shared_vision := 1 ;
7680: LD_ADDR_EXP 48
7684: PUSH
7685: LD_INT 1
7687: ST_TO_ADDR
// def_morale_flags := 3 ;
7688: LD_ADDR_EXP 49
7692: PUSH
7693: LD_INT 3
7695: ST_TO_ADDR
// def_siberite_detection := 1 ;
7696: LD_ADDR_EXP 50
7700: PUSH
7701: LD_INT 1
7703: ST_TO_ADDR
// def_people_respawning := 1 ;
7704: LD_ADDR_EXP 51
7708: PUSH
7709: LD_INT 1
7711: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
7712: LD_ADDR_EXP 52
7716: PUSH
7717: LD_INT 1
7719: ST_TO_ADDR
// def_siberite_bomb := 0 ;
7720: LD_ADDR_EXP 53
7724: PUSH
7725: LD_INT 0
7727: ST_TO_ADDR
// def_builduptime := 2 ;
7728: LD_ADDR_EXP 54
7732: PUSH
7733: LD_INT 2
7735: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
7736: LD_ADDR_VAR 0 2
7740: PUSH
7741: EMPTY
7742: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
7743: LD_ADDR_VAR 0 3
7747: PUSH
7748: EMPTY
7749: ST_TO_ADDR
// Banned_Weapons := [ ] ;
7750: LD_ADDR_LOC 16
7754: PUSH
7755: EMPTY
7756: ST_TO_ADDR
// Banned_Chassis := [ ] ;
7757: LD_ADDR_LOC 17
7761: PUSH
7762: EMPTY
7763: ST_TO_ADDR
// Banned_Controls := [ ] ;
7764: LD_ADDR_LOC 18
7768: PUSH
7769: EMPTY
7770: ST_TO_ADDR
// Banned_Engines := [ ] ;
7771: LD_ADDR_LOC 19
7775: PUSH
7776: EMPTY
7777: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
7778: LD_ADDR_LOC 14
7782: PUSH
7783: LD_INT 37
7785: PUSH
7786: EMPTY
7787: LIST
7788: PUSH
7789: LD_INT 4
7791: PUSH
7792: LD_INT 5
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: PUSH
7799: LD_INT 31
7801: PUSH
7802: LD_INT 32
7804: PUSH
7805: LD_INT 33
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: LIST
7812: PUSH
7813: EMPTY
7814: LIST
7815: LIST
7816: LIST
7817: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
7818: LD_ADDR_LOC 15
7822: PUSH
7823: LD_INT 2
7825: PUSH
7826: LD_INT 2
7828: PUSH
7829: LD_INT 4
7831: PUSH
7832: EMPTY
7833: LIST
7834: LIST
7835: LIST
7836: ST_TO_ADDR
// end ; 2 :
7837: GO 9573
7839: LD_INT 2
7841: DOUBLE
7842: EQUAL
7843: IFTRUE 7847
7845: GO 8056
7847: POP
// begin def_base_level := 1 ;
7848: LD_ADDR_EXP 41
7852: PUSH
7853: LD_INT 1
7855: ST_TO_ADDR
// def_amount_of_people := 2 ;
7856: LD_ADDR_EXP 42
7860: PUSH
7861: LD_INT 2
7863: ST_TO_ADDR
// def_skill_level := 3 ;
7864: LD_ADDR_EXP 43
7868: PUSH
7869: LD_INT 3
7871: ST_TO_ADDR
// def_starting_resources := 3 ;
7872: LD_ADDR_EXP 44
7876: PUSH
7877: LD_INT 3
7879: ST_TO_ADDR
// def_shipments_density := 2 ;
7880: LD_ADDR_EXP 45
7884: PUSH
7885: LD_INT 2
7887: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
7888: LD_ADDR_EXP 46
7892: PUSH
7893: LD_INT 1
7895: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
7896: LD_ADDR_EXP 47
7900: PUSH
7901: LD_INT 2
7903: ST_TO_ADDR
// def_shared_vision := 1 ;
7904: LD_ADDR_EXP 48
7908: PUSH
7909: LD_INT 1
7911: ST_TO_ADDR
// def_morale_flags := 0 ;
7912: LD_ADDR_EXP 49
7916: PUSH
7917: LD_INT 0
7919: ST_TO_ADDR
// def_siberite_detection := 1 ;
7920: LD_ADDR_EXP 50
7924: PUSH
7925: LD_INT 1
7927: ST_TO_ADDR
// def_people_respawning := 0 ;
7928: LD_ADDR_EXP 51
7932: PUSH
7933: LD_INT 0
7935: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
7936: LD_ADDR_EXP 52
7940: PUSH
7941: LD_INT 0
7943: ST_TO_ADDR
// def_siberite_bomb := 0 ;
7944: LD_ADDR_EXP 53
7948: PUSH
7949: LD_INT 0
7951: ST_TO_ADDR
// def_builduptime := 2 ;
7952: LD_ADDR_EXP 54
7956: PUSH
7957: LD_INT 2
7959: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
7960: LD_ADDR_VAR 0 2
7964: PUSH
7965: LD_INT 1
7967: PUSH
7968: EMPTY
7969: LIST
7970: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
7971: LD_ADDR_VAR 0 3
7975: PUSH
7976: EMPTY
7977: ST_TO_ADDR
// Banned_Weapons := [ ] ;
7978: LD_ADDR_LOC 16
7982: PUSH
7983: EMPTY
7984: ST_TO_ADDR
// Banned_Chassis := [ ] ;
7985: LD_ADDR_LOC 17
7989: PUSH
7990: EMPTY
7991: ST_TO_ADDR
// Banned_Controls := [ ] ;
7992: LD_ADDR_LOC 18
7996: PUSH
7997: EMPTY
7998: ST_TO_ADDR
// Banned_Engines := [ ] ;
7999: LD_ADDR_LOC 19
8003: PUSH
8004: EMPTY
8005: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
8006: LD_ADDR_LOC 14
8010: PUSH
8011: LD_INT 4
8013: PUSH
8014: LD_INT 5
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: PUSH
8021: LD_INT 31
8023: PUSH
8024: LD_INT 32
8026: PUSH
8027: LD_INT 33
8029: PUSH
8030: EMPTY
8031: LIST
8032: LIST
8033: LIST
8034: PUSH
8035: EMPTY
8036: LIST
8037: LIST
8038: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
8039: LD_ADDR_LOC 15
8043: PUSH
8044: LD_INT 1
8046: PUSH
8047: LD_INT 2
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: ST_TO_ADDR
// end ; 3 :
8054: GO 9573
8056: LD_INT 3
8058: DOUBLE
8059: EQUAL
8060: IFTRUE 8064
8062: GO 8307
8064: POP
// begin def_base_level := 1 ;
8065: LD_ADDR_EXP 41
8069: PUSH
8070: LD_INT 1
8072: ST_TO_ADDR
// def_amount_of_people := 2 ;
8073: LD_ADDR_EXP 42
8077: PUSH
8078: LD_INT 2
8080: ST_TO_ADDR
// def_skill_level := 3 ;
8081: LD_ADDR_EXP 43
8085: PUSH
8086: LD_INT 3
8088: ST_TO_ADDR
// def_starting_resources := 3 ;
8089: LD_ADDR_EXP 44
8093: PUSH
8094: LD_INT 3
8096: ST_TO_ADDR
// def_shipments_density := 1 ;
8097: LD_ADDR_EXP 45
8101: PUSH
8102: LD_INT 1
8104: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8105: LD_ADDR_EXP 46
8109: PUSH
8110: LD_INT 0
8112: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
8113: LD_ADDR_EXP 47
8117: PUSH
8118: LD_INT 1
8120: ST_TO_ADDR
// def_shared_vision := 1 ;
8121: LD_ADDR_EXP 48
8125: PUSH
8126: LD_INT 1
8128: ST_TO_ADDR
// def_morale_flags := 0 ;
8129: LD_ADDR_EXP 49
8133: PUSH
8134: LD_INT 0
8136: ST_TO_ADDR
// def_siberite_detection := 1 ;
8137: LD_ADDR_EXP 50
8141: PUSH
8142: LD_INT 1
8144: ST_TO_ADDR
// def_people_respawning := 0 ;
8145: LD_ADDR_EXP 51
8149: PUSH
8150: LD_INT 0
8152: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
8153: LD_ADDR_EXP 52
8157: PUSH
8158: LD_INT 2
8160: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8161: LD_ADDR_EXP 53
8165: PUSH
8166: LD_INT 0
8168: ST_TO_ADDR
// def_builduptime := 1 ;
8169: LD_ADDR_EXP 54
8173: PUSH
8174: LD_INT 1
8176: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
8177: LD_ADDR_VAR 0 2
8181: PUSH
8182: LD_INT 23
8184: PUSH
8185: EMPTY
8186: LIST
8187: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
8188: LD_ADDR_VAR 0 3
8192: PUSH
8193: LD_INT 2
8195: PUSH
8196: LD_INT 37
8198: PUSH
8199: LD_INT 32
8201: PUSH
8202: LD_INT 33
8204: PUSH
8205: LD_INT 36
8207: PUSH
8208: LD_INT 16
8210: PUSH
8211: LD_INT 23
8213: PUSH
8214: LD_INT 21
8216: PUSH
8217: LD_INT 18
8219: PUSH
8220: LD_INT 22
8222: PUSH
8223: LD_INT 20
8225: PUSH
8226: LD_INT 19
8228: PUSH
8229: LD_INT 25
8231: PUSH
8232: LD_INT 17
8234: PUSH
8235: LD_INT 24
8237: PUSH
8238: EMPTY
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8255: LD_ADDR_LOC 16
8259: PUSH
8260: EMPTY
8261: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8262: LD_ADDR_LOC 17
8266: PUSH
8267: EMPTY
8268: ST_TO_ADDR
// Banned_Controls := [ ] ;
8269: LD_ADDR_LOC 18
8273: PUSH
8274: EMPTY
8275: ST_TO_ADDR
// Banned_Engines := [ ] ;
8276: LD_ADDR_LOC 19
8280: PUSH
8281: EMPTY
8282: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8283: LD_ADDR_LOC 14
8287: PUSH
8288: EMPTY
8289: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8290: LD_ADDR_LOC 15
8294: PUSH
8295: EMPTY
8296: ST_TO_ADDR
// No_Mechs := true ;
8297: LD_ADDR_EXP 55
8301: PUSH
8302: LD_INT 1
8304: ST_TO_ADDR
// end ; 4 :
8305: GO 9573
8307: LD_INT 4
8309: DOUBLE
8310: EQUAL
8311: IFTRUE 8315
8313: GO 8490
8315: POP
// begin def_base_level := 1 ;
8316: LD_ADDR_EXP 41
8320: PUSH
8321: LD_INT 1
8323: ST_TO_ADDR
// def_amount_of_people := 2 ;
8324: LD_ADDR_EXP 42
8328: PUSH
8329: LD_INT 2
8331: ST_TO_ADDR
// def_skill_level := 3 ;
8332: LD_ADDR_EXP 43
8336: PUSH
8337: LD_INT 3
8339: ST_TO_ADDR
// def_starting_resources := 3 ;
8340: LD_ADDR_EXP 44
8344: PUSH
8345: LD_INT 3
8347: ST_TO_ADDR
// def_shipments_density := 2 ;
8348: LD_ADDR_EXP 45
8352: PUSH
8353: LD_INT 2
8355: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8356: LD_ADDR_EXP 46
8360: PUSH
8361: LD_INT 1
8363: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8364: LD_ADDR_EXP 47
8368: PUSH
8369: LD_INT 2
8371: ST_TO_ADDR
// def_shared_vision := 1 ;
8372: LD_ADDR_EXP 48
8376: PUSH
8377: LD_INT 1
8379: ST_TO_ADDR
// def_morale_flags := 0 ;
8380: LD_ADDR_EXP 49
8384: PUSH
8385: LD_INT 0
8387: ST_TO_ADDR
// def_siberite_detection := 1 ;
8388: LD_ADDR_EXP 50
8392: PUSH
8393: LD_INT 1
8395: ST_TO_ADDR
// def_people_respawning := 0 ;
8396: LD_ADDR_EXP 51
8400: PUSH
8401: LD_INT 0
8403: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
8404: LD_ADDR_EXP 52
8408: PUSH
8409: LD_INT 0
8411: ST_TO_ADDR
// def_siberite_bomb := 1 ;
8412: LD_ADDR_EXP 53
8416: PUSH
8417: LD_INT 1
8419: ST_TO_ADDR
// def_builduptime := 3 ;
8420: LD_ADDR_EXP 54
8424: PUSH
8425: LD_INT 3
8427: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
8428: LD_ADDR_VAR 0 2
8432: PUSH
8433: LD_INT 1
8435: PUSH
8436: EMPTY
8437: LIST
8438: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8439: LD_ADDR_VAR 0 3
8443: PUSH
8444: EMPTY
8445: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8446: LD_ADDR_LOC 16
8450: PUSH
8451: EMPTY
8452: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8453: LD_ADDR_LOC 17
8457: PUSH
8458: EMPTY
8459: ST_TO_ADDR
// Banned_Controls := [ ] ;
8460: LD_ADDR_LOC 18
8464: PUSH
8465: EMPTY
8466: ST_TO_ADDR
// Banned_Engines := [ ] ;
8467: LD_ADDR_LOC 19
8471: PUSH
8472: EMPTY
8473: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8474: LD_ADDR_LOC 14
8478: PUSH
8479: EMPTY
8480: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8481: LD_ADDR_LOC 15
8485: PUSH
8486: EMPTY
8487: ST_TO_ADDR
// end ; 5 :
8488: GO 9573
8490: LD_INT 5
8492: DOUBLE
8493: EQUAL
8494: IFTRUE 8498
8496: GO 8747
8498: POP
// begin def_base_level := 0 ;
8499: LD_ADDR_EXP 41
8503: PUSH
8504: LD_INT 0
8506: ST_TO_ADDR
// def_amount_of_people := 0 ;
8507: LD_ADDR_EXP 42
8511: PUSH
8512: LD_INT 0
8514: ST_TO_ADDR
// def_skill_level := 0 ;
8515: LD_ADDR_EXP 43
8519: PUSH
8520: LD_INT 0
8522: ST_TO_ADDR
// def_starting_resources := 0 ;
8523: LD_ADDR_EXP 44
8527: PUSH
8528: LD_INT 0
8530: ST_TO_ADDR
// def_shipments_density := 0 ;
8531: LD_ADDR_EXP 45
8535: PUSH
8536: LD_INT 0
8538: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8539: LD_ADDR_EXP 46
8543: PUSH
8544: LD_INT 0
8546: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
8547: LD_ADDR_EXP 47
8551: PUSH
8552: LD_INT 0
8554: ST_TO_ADDR
// def_shared_vision := 1 ;
8555: LD_ADDR_EXP 48
8559: PUSH
8560: LD_INT 1
8562: ST_TO_ADDR
// def_morale_flags := 0 ;
8563: LD_ADDR_EXP 49
8567: PUSH
8568: LD_INT 0
8570: ST_TO_ADDR
// def_siberite_detection := 0 ;
8571: LD_ADDR_EXP 50
8575: PUSH
8576: LD_INT 0
8578: ST_TO_ADDR
// def_people_respawning := 1 ;
8579: LD_ADDR_EXP 51
8583: PUSH
8584: LD_INT 1
8586: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
8587: LD_ADDR_EXP 52
8591: PUSH
8592: LD_INT 1
8594: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8595: LD_ADDR_EXP 53
8599: PUSH
8600: LD_INT 0
8602: ST_TO_ADDR
// def_builduptime := 0 ;
8603: LD_ADDR_EXP 54
8607: PUSH
8608: LD_INT 0
8610: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
8611: LD_ADDR_VAR 0 2
8615: PUSH
8616: LD_INT 10
8618: PUSH
8619: LD_INT 3
8621: PUSH
8622: EMPTY
8623: LIST
8624: LIST
8625: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
8626: LD_ADDR_VAR 0 3
8630: PUSH
8631: LD_INT 12
8633: PUSH
8634: LD_INT 11
8636: PUSH
8637: LD_INT 14
8639: PUSH
8640: LD_INT 13
8642: PUSH
8643: LD_INT 5
8645: PUSH
8646: LD_INT 24
8648: PUSH
8649: LD_INT 21
8651: PUSH
8652: LD_INT 33
8654: PUSH
8655: LD_INT 36
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
8669: LD_ADDR_LOC 16
8673: PUSH
8674: LD_INT 31
8676: PUSH
8677: EMPTY
8678: LIST
8679: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8680: LD_ADDR_LOC 17
8684: PUSH
8685: EMPTY
8686: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
8687: LD_ADDR_LOC 18
8691: PUSH
8692: LD_INT 2
8694: PUSH
8695: EMPTY
8696: LIST
8697: ST_TO_ADDR
// Banned_Engines := [ ] ;
8698: LD_ADDR_LOC 19
8702: PUSH
8703: EMPTY
8704: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
8705: LD_ADDR_LOC 14
8709: PUSH
8710: LD_INT 4
8712: PUSH
8713: EMPTY
8714: LIST
8715: PUSH
8716: LD_INT 31
8718: PUSH
8719: LD_INT 32
8721: PUSH
8722: EMPTY
8723: LIST
8724: LIST
8725: PUSH
8726: EMPTY
8727: LIST
8728: LIST
8729: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
8730: LD_ADDR_LOC 15
8734: PUSH
8735: LD_INT 1
8737: PUSH
8738: LD_INT 1
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: ST_TO_ADDR
// end ; 6 :
8745: GO 9573
8747: LD_INT 6
8749: DOUBLE
8750: EQUAL
8751: IFTRUE 8755
8753: GO 8958
8755: POP
// begin def_base_level := 1 ;
8756: LD_ADDR_EXP 41
8760: PUSH
8761: LD_INT 1
8763: ST_TO_ADDR
// def_amount_of_people := 2 ;
8764: LD_ADDR_EXP 42
8768: PUSH
8769: LD_INT 2
8771: ST_TO_ADDR
// def_skill_level := 3 ;
8772: LD_ADDR_EXP 43
8776: PUSH
8777: LD_INT 3
8779: ST_TO_ADDR
// def_starting_resources := 3 ;
8780: LD_ADDR_EXP 44
8784: PUSH
8785: LD_INT 3
8787: ST_TO_ADDR
// def_shipments_density := 1 ;
8788: LD_ADDR_EXP 45
8792: PUSH
8793: LD_INT 1
8795: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8796: LD_ADDR_EXP 46
8800: PUSH
8801: LD_INT 0
8803: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
8804: LD_ADDR_EXP 47
8808: PUSH
8809: LD_INT 1
8811: ST_TO_ADDR
// def_shared_vision := 1 ;
8812: LD_ADDR_EXP 48
8816: PUSH
8817: LD_INT 1
8819: ST_TO_ADDR
// def_morale_flags := 0 ;
8820: LD_ADDR_EXP 49
8824: PUSH
8825: LD_INT 0
8827: ST_TO_ADDR
// def_siberite_detection := 1 ;
8828: LD_ADDR_EXP 50
8832: PUSH
8833: LD_INT 1
8835: ST_TO_ADDR
// def_people_respawning := 2 ;
8836: LD_ADDR_EXP 51
8840: PUSH
8841: LD_INT 2
8843: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
8844: LD_ADDR_EXP 52
8848: PUSH
8849: LD_INT 1
8851: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8852: LD_ADDR_EXP 53
8856: PUSH
8857: LD_INT 0
8859: ST_TO_ADDR
// def_builduptime := 1 ;
8860: LD_ADDR_EXP 54
8864: PUSH
8865: LD_INT 1
8867: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
8868: LD_ADDR_VAR 0 2
8872: PUSH
8873: LD_INT 23
8875: PUSH
8876: EMPTY
8877: LIST
8878: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
8879: LD_ADDR_VAR 0 3
8883: PUSH
8884: LD_INT 2
8886: PUSH
8887: LD_INT 37
8889: PUSH
8890: LD_INT 31
8892: PUSH
8893: LD_INT 32
8895: PUSH
8896: LD_INT 33
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8906: LD_ADDR_LOC 16
8910: PUSH
8911: EMPTY
8912: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8913: LD_ADDR_LOC 17
8917: PUSH
8918: EMPTY
8919: ST_TO_ADDR
// Banned_Controls := [ ] ;
8920: LD_ADDR_LOC 18
8924: PUSH
8925: EMPTY
8926: ST_TO_ADDR
// Banned_Engines := [ ] ;
8927: LD_ADDR_LOC 19
8931: PUSH
8932: EMPTY
8933: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8934: LD_ADDR_LOC 14
8938: PUSH
8939: EMPTY
8940: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8941: LD_ADDR_LOC 15
8945: PUSH
8946: EMPTY
8947: ST_TO_ADDR
// No_Mechs := true ;
8948: LD_ADDR_EXP 55
8952: PUSH
8953: LD_INT 1
8955: ST_TO_ADDR
// end ; 7 :
8956: GO 9573
8958: LD_INT 7
8960: DOUBLE
8961: EQUAL
8962: IFTRUE 8966
8964: GO 9164
8966: POP
// begin def_base_level := 1 ;
8967: LD_ADDR_EXP 41
8971: PUSH
8972: LD_INT 1
8974: ST_TO_ADDR
// def_amount_of_people := 2 ;
8975: LD_ADDR_EXP 42
8979: PUSH
8980: LD_INT 2
8982: ST_TO_ADDR
// def_skill_level := 3 ;
8983: LD_ADDR_EXP 43
8987: PUSH
8988: LD_INT 3
8990: ST_TO_ADDR
// def_starting_resources := 3 ;
8991: LD_ADDR_EXP 44
8995: PUSH
8996: LD_INT 3
8998: ST_TO_ADDR
// def_shipments_density := 1 ;
8999: LD_ADDR_EXP 45
9003: PUSH
9004: LD_INT 1
9006: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9007: LD_ADDR_EXP 46
9011: PUSH
9012: LD_INT 1
9014: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9015: LD_ADDR_EXP 47
9019: PUSH
9020: LD_INT 2
9022: ST_TO_ADDR
// def_shared_vision := 1 ;
9023: LD_ADDR_EXP 48
9027: PUSH
9028: LD_INT 1
9030: ST_TO_ADDR
// def_morale_flags := 0 ;
9031: LD_ADDR_EXP 49
9035: PUSH
9036: LD_INT 0
9038: ST_TO_ADDR
// def_siberite_detection := 1 ;
9039: LD_ADDR_EXP 50
9043: PUSH
9044: LD_INT 1
9046: ST_TO_ADDR
// def_people_respawning := 0 ;
9047: LD_ADDR_EXP 51
9051: PUSH
9052: LD_INT 0
9054: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9055: LD_ADDR_EXP 52
9059: PUSH
9060: LD_INT 1
9062: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9063: LD_ADDR_EXP 53
9067: PUSH
9068: LD_INT 0
9070: ST_TO_ADDR
// def_builduptime := 3 ;
9071: LD_ADDR_EXP 54
9075: PUSH
9076: LD_INT 3
9078: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9079: LD_ADDR_VAR 0 2
9083: PUSH
9084: LD_INT 23
9086: PUSH
9087: EMPTY
9088: LIST
9089: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
9090: LD_ADDR_VAR 0 3
9094: PUSH
9095: LD_INT 37
9097: PUSH
9098: EMPTY
9099: LIST
9100: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9101: LD_ADDR_LOC 16
9105: PUSH
9106: EMPTY
9107: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9108: LD_ADDR_LOC 17
9112: PUSH
9113: EMPTY
9114: ST_TO_ADDR
// Banned_Controls := [ ] ;
9115: LD_ADDR_LOC 18
9119: PUSH
9120: EMPTY
9121: ST_TO_ADDR
// Banned_Engines := [ ] ;
9122: LD_ADDR_LOC 19
9126: PUSH
9127: EMPTY
9128: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9129: LD_ADDR_LOC 14
9133: PUSH
9134: LD_INT 31
9136: PUSH
9137: LD_INT 32
9139: PUSH
9140: LD_INT 33
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: LIST
9147: PUSH
9148: EMPTY
9149: LIST
9150: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
9151: LD_ADDR_LOC 15
9155: PUSH
9156: LD_INT 10
9158: PUSH
9159: EMPTY
9160: LIST
9161: ST_TO_ADDR
// end ; 8 :
9162: GO 9573
9164: LD_INT 8
9166: DOUBLE
9167: EQUAL
9168: IFTRUE 9172
9170: GO 9572
9172: POP
// begin def_base_level := 0 ;
9173: LD_ADDR_EXP 41
9177: PUSH
9178: LD_INT 0
9180: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
9181: LD_ADDR_EXP 42
9185: PUSH
9186: LD_INT 0
9188: PPUSH
9189: LD_INT 1
9191: PPUSH
9192: CALL_OW 12
9196: ST_TO_ADDR
// def_skill_level := 0 ;
9197: LD_ADDR_EXP 43
9201: PUSH
9202: LD_INT 0
9204: ST_TO_ADDR
// def_starting_resources := 2 ;
9205: LD_ADDR_EXP 44
9209: PUSH
9210: LD_INT 2
9212: ST_TO_ADDR
// def_shipments_density := 1 ;
9213: LD_ADDR_EXP 45
9217: PUSH
9218: LD_INT 1
9220: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9221: LD_ADDR_EXP 46
9225: PUSH
9226: LD_INT 0
9228: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
9229: LD_ADDR_EXP 47
9233: PUSH
9234: LD_INT 0
9236: ST_TO_ADDR
// def_shared_vision := 1 ;
9237: LD_ADDR_EXP 48
9241: PUSH
9242: LD_INT 1
9244: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
9245: LD_ADDR_EXP 49
9249: PUSH
9250: LD_INT 0
9252: PPUSH
9253: LD_INT 2
9255: PPUSH
9256: CALL_OW 12
9260: ST_TO_ADDR
// def_siberite_detection := 0 ;
9261: LD_ADDR_EXP 50
9265: PUSH
9266: LD_INT 0
9268: ST_TO_ADDR
// def_people_respawning := 0 ;
9269: LD_ADDR_EXP 51
9273: PUSH
9274: LD_INT 0
9276: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
9277: LD_ADDR_EXP 52
9281: PUSH
9282: LD_INT 2
9284: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9285: LD_ADDR_EXP 53
9289: PUSH
9290: LD_INT 0
9292: ST_TO_ADDR
// def_builduptime := 0 ;
9293: LD_ADDR_EXP 54
9297: PUSH
9298: LD_INT 0
9300: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
9301: LD_ADDR_VAR 0 2
9305: PUSH
9306: LD_INT 23
9308: PUSH
9309: LD_INT 20
9311: PUSH
9312: LD_INT 40
9314: PUSH
9315: LD_INT 47
9317: PUSH
9318: LD_INT 46
9320: PUSH
9321: LD_INT 39
9323: PUSH
9324: LD_INT 71
9326: PUSH
9327: LD_INT 34
9329: PUSH
9330: LD_INT 41
9332: PUSH
9333: LD_INT 44
9335: PUSH
9336: LD_INT 17
9338: PUSH
9339: LD_INT 16
9341: PUSH
9342: EMPTY
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
9356: LD_ADDR_VAR 0 3
9360: PUSH
9361: LD_INT 37
9363: PUSH
9364: LD_INT 5
9366: PUSH
9367: LD_INT 13
9369: PUSH
9370: LD_INT 34
9372: PUSH
9373: LD_INT 12
9375: PUSH
9376: LD_INT 15
9378: PUSH
9379: LD_INT 11
9381: PUSH
9382: LD_INT 14
9384: PUSH
9385: LD_INT 29
9387: PUSH
9388: LD_INT 30
9390: PUSH
9391: LD_INT 28
9393: PUSH
9394: LD_INT 24
9396: PUSH
9397: LD_INT 25
9399: PUSH
9400: LD_INT 20
9402: PUSH
9403: LD_INT 21
9405: PUSH
9406: LD_INT 22
9408: PUSH
9409: LD_INT 36
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9431: LD_ADDR_LOC 16
9435: PUSH
9436: EMPTY
9437: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
9438: LD_ADDR_LOC 17
9442: PUSH
9443: LD_INT 14
9445: PUSH
9446: EMPTY
9447: LIST
9448: ST_TO_ADDR
// Banned_Controls := [ ] ;
9449: LD_ADDR_LOC 18
9453: PUSH
9454: EMPTY
9455: ST_TO_ADDR
// Banned_Engines := [ ] ;
9456: LD_ADDR_LOC 19
9460: PUSH
9461: EMPTY
9462: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
9463: LD_ADDR_LOC 14
9467: PUSH
9468: LD_INT 31
9470: PUSH
9471: LD_INT 32
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: PUSH
9478: LD_INT 4
9480: PUSH
9481: EMPTY
9482: LIST
9483: PUSH
9484: EMPTY
9485: LIST
9486: LIST
9487: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
9488: LD_ADDR_LOC 15
9492: PUSH
9493: LD_INT 2
9495: PUSH
9496: LD_INT 1
9498: PUSH
9499: EMPTY
9500: LIST
9501: LIST
9502: ST_TO_ADDR
// for i := 1 to 8 do
9503: LD_ADDR_VAR 0 4
9507: PUSH
9508: DOUBLE
9509: LD_INT 1
9511: DEC
9512: ST_TO_ADDR
9513: LD_INT 8
9515: PUSH
9516: FOR_TO
9517: IFFALSE 9568
// if ( Side_Nations [ i ] = 3 ) then
9519: LD_EXP 22
9523: PUSH
9524: LD_VAR 0 4
9528: ARRAY
9529: PUSH
9530: LD_INT 3
9532: EQUAL
9533: IFFALSE 9566
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
9535: LD_ADDR_EXP 22
9539: PUSH
9540: LD_EXP 22
9544: PPUSH
9545: LD_VAR 0 4
9549: PPUSH
9550: LD_INT 1
9552: PPUSH
9553: LD_INT 2
9555: PPUSH
9556: CALL_OW 12
9560: PPUSH
9561: CALL_OW 1
9565: ST_TO_ADDR
9566: GO 9516
9568: POP
9569: POP
// end ; end ;
9570: GO 9573
9572: POP
// for i := 1 to 8 do
9573: LD_ADDR_VAR 0 4
9577: PUSH
9578: DOUBLE
9579: LD_INT 1
9581: DEC
9582: ST_TO_ADDR
9583: LD_INT 8
9585: PUSH
9586: FOR_TO
9587: IFFALSE 9671
// if Side_Positions [ i ] then
9589: LD_EXP 21
9593: PUSH
9594: LD_VAR 0 4
9598: ARRAY
9599: IFFALSE 9669
// begin for j in Unavailable_Techs do
9601: LD_ADDR_VAR 0 5
9605: PUSH
9606: LD_VAR 0 2
9610: PUSH
9611: FOR_IN
9612: IFFALSE 9633
// SetTech ( j , i , 0 ) ;
9614: LD_VAR 0 5
9618: PPUSH
9619: LD_VAR 0 4
9623: PPUSH
9624: LD_INT 0
9626: PPUSH
9627: CALL_OW 322
9631: GO 9611
9633: POP
9634: POP
// for j in Unavailable_Builds do
9635: LD_ADDR_VAR 0 5
9639: PUSH
9640: LD_VAR 0 3
9644: PUSH
9645: FOR_IN
9646: IFFALSE 9667
// SetRestrict ( j , i , 0 ) ;
9648: LD_VAR 0 5
9652: PPUSH
9653: LD_VAR 0 4
9657: PPUSH
9658: LD_INT 0
9660: PPUSH
9661: CALL_OW 324
9665: GO 9645
9667: POP
9668: POP
// end ;
9669: GO 9586
9671: POP
9672: POP
// end ;
9673: LD_VAR 0 1
9677: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
9678: LD_INT 0
9680: PPUSH
9681: PPUSH
9682: PPUSH
9683: PPUSH
9684: PPUSH
9685: PPUSH
9686: PPUSH
// for i := 1 to Restricted_Builds do
9687: LD_ADDR_VAR 0 2
9691: PUSH
9692: DOUBLE
9693: LD_INT 1
9695: DEC
9696: ST_TO_ADDR
9697: LD_LOC 14
9701: PUSH
9702: FOR_TO
9703: IFFALSE 10013
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
9705: LD_LOC 14
9709: PUSH
9710: LD_VAR 0 2
9714: ARRAY
9715: PUSH
9716: LD_INT 1
9718: ARRAY
9719: PUSH
9720: LD_INT 31
9722: DOUBLE
9723: EQUAL
9724: IFTRUE 9740
9726: LD_INT 32
9728: DOUBLE
9729: EQUAL
9730: IFTRUE 9740
9732: LD_INT 33
9734: DOUBLE
9735: EQUAL
9736: IFTRUE 9740
9738: GO 9751
9740: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
9741: LD_ADDR_VAR 0 6
9745: PUSH
9746: LD_STRING #Turrets
9748: ST_TO_ADDR
9749: GO 9796
9751: LD_INT 4
9753: DOUBLE
9754: EQUAL
9755: IFTRUE 9765
9757: LD_INT 5
9759: DOUBLE
9760: EQUAL
9761: IFTRUE 9765
9763: GO 9776
9765: POP
// btype := #Armouries ; b_Behemoth :
9766: LD_ADDR_VAR 0 6
9770: PUSH
9771: LD_STRING #Armouries
9773: ST_TO_ADDR
9774: GO 9796
9776: LD_INT 37
9778: DOUBLE
9779: EQUAL
9780: IFTRUE 9784
9782: GO 9795
9784: POP
// btype := #Behemoths ; end ;
9785: LD_ADDR_VAR 0 6
9789: PUSH
9790: LD_STRING #Behemoths
9792: ST_TO_ADDR
9793: GO 9796
9795: POP
// list := [ ] ;
9796: LD_ADDR_VAR 0 7
9800: PUSH
9801: EMPTY
9802: ST_TO_ADDR
// for j := 1 to 8 do
9803: LD_ADDR_VAR 0 3
9807: PUSH
9808: DOUBLE
9809: LD_INT 1
9811: DEC
9812: ST_TO_ADDR
9813: LD_INT 8
9815: PUSH
9816: FOR_TO
9817: IFFALSE 9910
// if Side_Positions [ j ] then
9819: LD_EXP 21
9823: PUSH
9824: LD_VAR 0 3
9828: ARRAY
9829: IFFALSE 9908
// begin amount := 0 ;
9831: LD_ADDR_VAR 0 5
9835: PUSH
9836: LD_INT 0
9838: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
9839: LD_ADDR_VAR 0 4
9843: PUSH
9844: LD_LOC 14
9848: PUSH
9849: LD_VAR 0 2
9853: ARRAY
9854: PUSH
9855: FOR_IN
9856: IFFALSE 9904
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
9858: LD_ADDR_VAR 0 5
9862: PUSH
9863: LD_VAR 0 5
9867: PUSH
9868: LD_INT 22
9870: PUSH
9871: LD_VAR 0 3
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: PUSH
9880: LD_INT 30
9882: PUSH
9883: LD_VAR 0 4
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: PUSH
9892: EMPTY
9893: LIST
9894: LIST
9895: PPUSH
9896: CALL_OW 69
9900: PLUS
9901: ST_TO_ADDR
9902: GO 9855
9904: POP
9905: POP
// break ;
9906: GO 9910
// end ;
9908: GO 9816
9910: POP
9911: POP
// list := [ ] ;
9912: LD_ADDR_VAR 0 7
9916: PUSH
9917: EMPTY
9918: ST_TO_ADDR
// for j := 1 to 8 do
9919: LD_ADDR_VAR 0 3
9923: PUSH
9924: DOUBLE
9925: LD_INT 1
9927: DEC
9928: ST_TO_ADDR
9929: LD_INT 8
9931: PUSH
9932: FOR_TO
9933: IFFALSE 9953
// list := list ^ amount ;
9935: LD_ADDR_VAR 0 7
9939: PUSH
9940: LD_VAR 0 7
9944: PUSH
9945: LD_VAR 0 5
9949: ADD
9950: ST_TO_ADDR
9951: GO 9932
9953: POP
9954: POP
// Already_Built := Already_Built ^ [ list ] ;
9955: LD_ADDR_LOC 20
9959: PUSH
9960: LD_LOC 20
9964: PUSH
9965: LD_VAR 0 7
9969: PUSH
9970: EMPTY
9971: LIST
9972: ADD
9973: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
9974: LD_ADDR_LOC 21
9978: PUSH
9979: LD_LOC 21
9983: PUSH
9984: LD_VAR 0 6
9988: PUSH
9989: LD_VAR 0 5
9993: PUSH
9994: LD_LOC 15
9998: PUSH
9999: LD_VAR 0 2
10003: ARRAY
10004: PUSH
10005: EMPTY
10006: LIST
10007: LIST
10008: LIST
10009: ADD
10010: ST_TO_ADDR
// end ;
10011: GO 9702
10013: POP
10014: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10015: LD_ADDR_LOC 22
10019: PUSH
10020: LD_INT 0
10022: PUSH
10023: LD_INT 0
10025: PUSH
10026: LD_INT 0
10028: PUSH
10029: LD_INT 0
10031: PUSH
10032: LD_INT 0
10034: PUSH
10035: LD_INT 0
10037: PUSH
10038: LD_INT 0
10040: PUSH
10041: LD_INT 0
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: ST_TO_ADDR
// if Limits_Info then
10054: LD_LOC 21
10058: IFFALSE 10074
// Limits_Info := #Limits ^ Limits_Info ;
10060: LD_ADDR_LOC 21
10064: PUSH
10065: LD_STRING #Limits
10067: PUSH
10068: LD_LOC 21
10072: ADD
10073: ST_TO_ADDR
// end ;
10074: LD_VAR 0 1
10078: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
10079: LD_INT 0
10081: PPUSH
10082: PPUSH
10083: PPUSH
10084: PPUSH
// for i := 1 to Restricted_Builds do
10085: LD_ADDR_VAR 0 7
10089: PUSH
10090: DOUBLE
10091: LD_INT 1
10093: DEC
10094: ST_TO_ADDR
10095: LD_LOC 14
10099: PUSH
10100: FOR_TO
10101: IFFALSE 10524
// if BType in Restricted_Builds [ i ] then
10103: LD_VAR 0 2
10107: PUSH
10108: LD_LOC 14
10112: PUSH
10113: LD_VAR 0 7
10117: ARRAY
10118: IN
10119: IFFALSE 10522
// begin if old_side then
10121: LD_VAR 0 4
10125: IFFALSE 10251
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
10127: LD_LOC 20
10131: PUSH
10132: LD_VAR 0 7
10136: ARRAY
10137: PUSH
10138: LD_VAR 0 3
10142: ARRAY
10143: PUSH
10144: LD_VAR 0 5
10148: PLUS
10149: PUSH
10150: LD_LOC 15
10154: PUSH
10155: LD_VAR 0 7
10159: ARRAY
10160: GREATER
10161: IFFALSE 10187
// begin SetSide ( un , old_side ) ;
10163: LD_VAR 0 1
10167: PPUSH
10168: LD_VAR 0 4
10172: PPUSH
10173: CALL_OW 235
// count := 0 ;
10177: LD_ADDR_VAR 0 5
10181: PUSH
10182: LD_INT 0
10184: ST_TO_ADDR
// end else
10185: GO 10251
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
10187: LD_ADDR_LOC 20
10191: PUSH
10192: LD_LOC 20
10196: PPUSH
10197: LD_VAR 0 7
10201: PPUSH
10202: LD_LOC 20
10206: PUSH
10207: LD_VAR 0 7
10211: ARRAY
10212: PPUSH
10213: LD_VAR 0 4
10217: PPUSH
10218: LD_LOC 20
10222: PUSH
10223: LD_VAR 0 7
10227: ARRAY
10228: PUSH
10229: LD_VAR 0 4
10233: ARRAY
10234: PUSH
10235: LD_VAR 0 5
10239: MINUS
10240: PPUSH
10241: CALL_OW 1
10245: PPUSH
10246: CALL_OW 1
10250: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
10251: LD_ADDR_LOC 20
10255: PUSH
10256: LD_LOC 20
10260: PPUSH
10261: LD_VAR 0 7
10265: PPUSH
10266: LD_LOC 20
10270: PUSH
10271: LD_VAR 0 7
10275: ARRAY
10276: PPUSH
10277: LD_VAR 0 3
10281: PPUSH
10282: LD_LOC 20
10286: PUSH
10287: LD_VAR 0 7
10291: ARRAY
10292: PUSH
10293: LD_VAR 0 3
10297: ARRAY
10298: PUSH
10299: LD_VAR 0 5
10303: PLUS
10304: PPUSH
10305: CALL_OW 1
10309: PPUSH
10310: CALL_OW 1
10314: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
10315: LD_VAR 0 5
10319: PUSH
10320: LD_INT 0
10322: NONEQUAL
10323: PUSH
10324: LD_VAR 0 3
10328: PUSH
10329: LD_OWVAR 2
10333: EQUAL
10334: AND
10335: IFFALSE 10378
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
10337: LD_ADDR_LOC 21
10341: PUSH
10342: LD_LOC 21
10346: PPUSH
10347: LD_INT 3
10349: PUSH
10350: LD_VAR 0 7
10354: MUL
10355: PPUSH
10356: LD_LOC 20
10360: PUSH
10361: LD_VAR 0 7
10365: ARRAY
10366: PUSH
10367: LD_VAR 0 3
10371: ARRAY
10372: PPUSH
10373: CALL_OW 1
10377: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
10378: LD_LOC 20
10382: PUSH
10383: LD_VAR 0 7
10387: ARRAY
10388: PUSH
10389: LD_VAR 0 3
10393: ARRAY
10394: PUSH
10395: LD_LOC 15
10399: PUSH
10400: LD_VAR 0 7
10404: ARRAY
10405: GREATER
10406: IFFALSE 10433
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
10408: LD_ADDR_LOC 22
10412: PUSH
10413: LD_LOC 22
10417: PPUSH
10418: LD_VAR 0 3
10422: PPUSH
10423: LD_INT 1
10425: PPUSH
10426: CALL_OW 1
10430: ST_TO_ADDR
// end else
10431: GO 10520
// begin for j := 1 to Restricted_Builds do
10433: LD_ADDR_VAR 0 8
10437: PUSH
10438: DOUBLE
10439: LD_INT 1
10441: DEC
10442: ST_TO_ADDR
10443: LD_LOC 14
10447: PUSH
10448: FOR_TO
10449: IFFALSE 10493
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
10451: LD_LOC 20
10455: PUSH
10456: LD_VAR 0 8
10460: ARRAY
10461: PUSH
10462: LD_VAR 0 3
10466: ARRAY
10467: PUSH
10468: LD_LOC 15
10472: PUSH
10473: LD_VAR 0 8
10477: ARRAY
10478: GREATER
10479: IFFALSE 10491
// begin Is_Cheater := true ;
10481: LD_ADDR_VAR 0 9
10485: PUSH
10486: LD_INT 1
10488: ST_TO_ADDR
// break ;
10489: GO 10493
// end ;
10491: GO 10448
10493: POP
10494: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
10495: LD_ADDR_LOC 22
10499: PUSH
10500: LD_LOC 22
10504: PPUSH
10505: LD_VAR 0 3
10509: PPUSH
10510: LD_VAR 0 9
10514: PPUSH
10515: CALL_OW 1
10519: ST_TO_ADDR
// end ; break ;
10520: GO 10524
// end ;
10522: GO 10100
10524: POP
10525: POP
// end ;
10526: LD_VAR 0 6
10530: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
10531: LD_VAR 0 5
10535: PUSH
10536: LD_LOC 16
10540: IN
10541: PUSH
10542: LD_VAR 0 2
10546: PUSH
10547: LD_LOC 17
10551: IN
10552: OR
10553: PUSH
10554: LD_VAR 0 4
10558: PUSH
10559: LD_LOC 18
10563: IN
10564: OR
10565: PUSH
10566: LD_VAR 0 3
10570: PUSH
10571: LD_LOC 19
10575: IN
10576: OR
10577: IFFALSE 10588
// ComCancel ( factory ) ;
10579: LD_VAR 0 1
10583: PPUSH
10584: CALL_OW 127
// end ;
10588: PPOPN 5
10590: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
10591: LD_VAR 0 2
10595: PUSH
10596: LD_LOC 16
10600: IN
10601: IFFALSE 10612
// ComCancel ( building ) ;
10603: LD_VAR 0 1
10607: PPUSH
10608: CALL_OW 127
// end ; end_of_file
10612: PPOPN 2
10614: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
10615: LD_INT 0
10617: PPUSH
10618: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
10619: LD_ADDR_VAR 0 2
10623: PUSH
10624: LD_STRING #Multi1x1-Time
10626: PUSH
10627: LD_OWVAR 1
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: ST_TO_ADDR
// if WaitServerStrings then
10636: LD_EXP 57
10640: IFFALSE 10658
// AllStrings = AllStrings ^ WaitServerStrings ;
10642: LD_ADDR_VAR 0 2
10646: PUSH
10647: LD_VAR 0 2
10651: PUSH
10652: LD_EXP 57
10656: ADD
10657: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
10658: LD_INT 0
10660: PUSH
10661: LD_EXP 12
10665: PUSH
10666: LD_OWVAR 1
10670: MINUS
10671: LESSEQUAL
10672: IFFALSE 10703
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
10674: LD_ADDR_VAR 0 2
10678: PUSH
10679: LD_VAR 0 2
10683: PUSH
10684: LD_STRING #allowedsibbomb
10686: PUSH
10687: LD_EXP 12
10691: PUSH
10692: LD_OWVAR 1
10696: MINUS
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: ADD
10702: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
10703: LD_INT 0
10705: PUSH
10706: LD_EXP 60
10710: PUSH
10711: LD_OWVAR 1
10715: MINUS
10716: LESSEQUAL
10717: IFFALSE 10748
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
10719: LD_ADDR_VAR 0 2
10723: PUSH
10724: LD_VAR 0 2
10728: PUSH
10729: LD_STRING #builduptime
10731: PUSH
10732: LD_EXP 60
10736: PUSH
10737: LD_OWVAR 1
10741: MINUS
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: ADD
10747: ST_TO_ADDR
// if ( ExtraStrings ) then
10748: LD_EXP 56
10752: IFFALSE 10774
// AllStrings := AllStrings ^  ^ ExtraStrings ;
10754: LD_ADDR_VAR 0 2
10758: PUSH
10759: LD_VAR 0 2
10763: PUSH
10764: LD_STRING 
10766: ADD
10767: PUSH
10768: LD_EXP 56
10772: ADD
10773: ST_TO_ADDR
// if ( LimitsStrings ) then
10774: CALL 7455 0 0
10778: IFFALSE 10800
// AllStrings := AllStrings ^  ^ LimitsStrings ;
10780: LD_ADDR_VAR 0 2
10784: PUSH
10785: LD_VAR 0 2
10789: PUSH
10790: LD_STRING 
10792: ADD
10793: PUSH
10794: CALL 7455 0 0
10798: ADD
10799: ST_TO_ADDR
// Display_Strings := AllStrings ;
10800: LD_ADDR_OWVAR 47
10804: PUSH
10805: LD_VAR 0 2
10809: ST_TO_ADDR
// end ;
10810: LD_VAR 0 1
10814: RET
// every 0 0$1 do
10815: GO 10817
10817: DISABLE
// begin ShowTimer ;
10818: CALL 10615 0 0
// enable ;
10822: ENABLE
// end ; end_of_file
10823: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
10824: LD_INT 0
10826: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
10827: LD_VAR 0 1
10831: PPUSH
10832: CALL_OW 255
10836: PUSH
10837: LD_VAR 0 4
10841: EQUAL
10842: IFFALSE 10861
// begin SetAchievement ( ACH_RAD ) ;
10844: LD_STRING ACH_RAD
10846: PPUSH
10847: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
10851: LD_STRING ACH_NL
10853: PPUSH
10854: LD_INT 1
10856: PPUSH
10857: CALL_OW 564
// end end ;
10861: LD_VAR 0 5
10865: RET
// export function SA_Win ( side ) ; begin
10866: LD_INT 0
10868: PPUSH
// case side of 1 :
10869: LD_VAR 0 1
10873: PUSH
10874: LD_INT 1
10876: DOUBLE
10877: EQUAL
10878: IFTRUE 10882
10880: GO 10895
10882: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
10883: LD_STRING ACH_AH
10885: PPUSH
10886: LD_INT 1
10888: PPUSH
10889: CALL_OW 564
10893: GO 11058
10895: LD_INT 2
10897: DOUBLE
10898: EQUAL
10899: IFTRUE 10903
10901: GO 10916
10903: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
10904: LD_STRING ACH_E
10906: PPUSH
10907: LD_INT 1
10909: PPUSH
10910: CALL_OW 564
10914: GO 11058
10916: LD_INT 3
10918: DOUBLE
10919: EQUAL
10920: IFTRUE 10924
10922: GO 10937
10924: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
10925: LD_STRING ACH_OOL
10927: PPUSH
10928: LD_INT 1
10930: PPUSH
10931: CALL_OW 564
10935: GO 11058
10937: LD_INT 1
10939: PUSH
10940: LD_INT 2
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: DOUBLE
10947: EQUAL
10948: IFTRUE 10952
10950: GO 10977
10952: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
10953: LD_STRING ACH_AH
10955: PPUSH
10956: LD_REAL  5.00000000000000E-0001
10959: PPUSH
10960: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
10964: LD_STRING ACH_E
10966: PPUSH
10967: LD_REAL  5.00000000000000E-0001
10970: PPUSH
10971: CALL_OW 564
// end ; [ 2 , 3 ] :
10975: GO 11058
10977: LD_INT 2
10979: PUSH
10980: LD_INT 3
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: DOUBLE
10987: EQUAL
10988: IFTRUE 10992
10990: GO 11017
10992: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
10993: LD_STRING ACH_OOL
10995: PPUSH
10996: LD_REAL  5.00000000000000E-0001
10999: PPUSH
11000: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
11004: LD_STRING ACH_E
11006: PPUSH
11007: LD_REAL  5.00000000000000E-0001
11010: PPUSH
11011: CALL_OW 564
// end ; [ 3 , 1 ] :
11015: GO 11058
11017: LD_INT 3
11019: PUSH
11020: LD_INT 1
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: DOUBLE
11027: EQUAL
11028: IFTRUE 11032
11030: GO 11057
11032: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
11033: LD_STRING ACH_AH
11035: PPUSH
11036: LD_REAL  5.00000000000000E-0001
11039: PPUSH
11040: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
11044: LD_STRING ACH_OOL
11046: PPUSH
11047: LD_REAL  5.00000000000000E-0001
11050: PPUSH
11051: CALL_OW 564
// end ; end ;
11055: GO 11058
11057: POP
// end ; end_of_file
11058: LD_VAR 0 2
11062: RET
// export function SetMpTechs ( ) ; var side , i ; begin
11063: LD_INT 0
11065: PPUSH
11066: PPUSH
11067: PPUSH
// for side = 1 to 8 do
11068: LD_ADDR_VAR 0 2
11072: PUSH
11073: DOUBLE
11074: LD_INT 1
11076: DEC
11077: ST_TO_ADDR
11078: LD_INT 8
11080: PUSH
11081: FOR_TO
11082: IFFALSE 11203
// begin for i = 1 to 72 do
11084: LD_ADDR_VAR 0 3
11088: PUSH
11089: DOUBLE
11090: LD_INT 1
11092: DEC
11093: ST_TO_ADDR
11094: LD_INT 72
11096: PUSH
11097: FOR_TO
11098: IFFALSE 11129
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
11100: LD_VAR 0 3
11104: PPUSH
11105: LD_VAR 0 2
11109: PPUSH
11110: LD_INT 0
11112: PPUSH
11113: LD_VAR 0 3
11117: PPUSH
11118: CALL_OW 565
11122: PPUSH
11123: CALL_OW 322
11127: GO 11097
11129: POP
11130: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
11131: LD_INT 73
11133: PPUSH
11134: LD_VAR 0 2
11138: PPUSH
11139: LD_INT 0
11141: PPUSH
11142: LD_INT 25
11144: PPUSH
11145: CALL_OW 565
11149: PPUSH
11150: CALL_OW 322
// for i = 0 to 40 do
11154: LD_ADDR_VAR 0 3
11158: PUSH
11159: DOUBLE
11160: LD_INT 0
11162: DEC
11163: ST_TO_ADDR
11164: LD_INT 40
11166: PUSH
11167: FOR_TO
11168: IFFALSE 11199
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
11170: LD_VAR 0 3
11174: PPUSH
11175: LD_VAR 0 2
11179: PPUSH
11180: LD_INT 1
11182: PPUSH
11183: LD_VAR 0 3
11187: PPUSH
11188: CALL_OW 565
11192: PPUSH
11193: CALL_OW 324
11197: GO 11167
11199: POP
11200: POP
// end ;
11201: GO 11081
11203: POP
11204: POP
// end ;
11205: LD_VAR 0 1
11209: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
11210: LD_INT 0
11212: PPUSH
11213: PPUSH
11214: PPUSH
// for side = 1 to 8 do
11215: LD_ADDR_VAR 0 3
11219: PUSH
11220: DOUBLE
11221: LD_INT 1
11223: DEC
11224: ST_TO_ADDR
11225: LD_INT 8
11227: PUSH
11228: FOR_TO
11229: IFFALSE 15225
// begin for i = 1 to 73 do
11231: LD_ADDR_VAR 0 4
11235: PUSH
11236: DOUBLE
11237: LD_INT 1
11239: DEC
11240: ST_TO_ADDR
11241: LD_INT 73
11243: PUSH
11244: FOR_TO
11245: IFFALSE 11266
// SetTech ( i , side , state_disabled ) ;
11247: LD_VAR 0 4
11251: PPUSH
11252: LD_VAR 0 3
11256: PPUSH
11257: LD_INT 0
11259: PPUSH
11260: CALL_OW 322
11264: GO 11244
11266: POP
11267: POP
// for i = 0 to 40 do
11268: LD_ADDR_VAR 0 4
11272: PUSH
11273: DOUBLE
11274: LD_INT 0
11276: DEC
11277: ST_TO_ADDR
11278: LD_INT 40
11280: PUSH
11281: FOR_TO
11282: IFFALSE 11303
// SetRestrict ( i , side , false ) ;
11284: LD_VAR 0 4
11288: PPUSH
11289: LD_VAR 0 3
11293: PPUSH
11294: LD_INT 0
11296: PPUSH
11297: CALL_OW 324
11301: GO 11281
11303: POP
11304: POP
// case level of 1 :
11305: LD_VAR 0 1
11309: PUSH
11310: LD_INT 1
11312: DOUBLE
11313: EQUAL
11314: IFTRUE 11318
11316: GO 11471
11318: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11319: LD_INT 35
11321: PPUSH
11322: LD_VAR 0 3
11326: PPUSH
11327: LD_INT 1
11329: PPUSH
11330: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11334: LD_INT 45
11336: PPUSH
11337: LD_VAR 0 3
11341: PPUSH
11342: LD_INT 1
11344: PPUSH
11345: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11349: LD_INT 46
11351: PPUSH
11352: LD_VAR 0 3
11356: PPUSH
11357: LD_INT 1
11359: PPUSH
11360: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11364: LD_INT 47
11366: PPUSH
11367: LD_VAR 0 3
11371: PPUSH
11372: LD_INT 1
11374: PPUSH
11375: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11379: LD_INT 0
11381: PPUSH
11382: LD_VAR 0 3
11386: PPUSH
11387: LD_INT 1
11389: PPUSH
11390: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11394: LD_INT 2
11396: PPUSH
11397: LD_VAR 0 3
11401: PPUSH
11402: LD_INT 1
11404: PPUSH
11405: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11409: LD_INT 4
11411: PPUSH
11412: LD_VAR 0 3
11416: PPUSH
11417: LD_INT 1
11419: PPUSH
11420: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11424: LD_INT 6
11426: PPUSH
11427: LD_VAR 0 3
11431: PPUSH
11432: LD_INT 1
11434: PPUSH
11435: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11439: LD_INT 29
11441: PPUSH
11442: LD_VAR 0 3
11446: PPUSH
11447: LD_INT 1
11449: PPUSH
11450: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11454: LD_INT 31
11456: PPUSH
11457: LD_VAR 0 3
11461: PPUSH
11462: LD_INT 1
11464: PPUSH
11465: CALL_OW 324
// end ; 2 :
11469: GO 15223
11471: LD_INT 2
11473: DOUBLE
11474: EQUAL
11475: IFTRUE 11479
11477: GO 11677
11479: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11480: LD_INT 35
11482: PPUSH
11483: LD_VAR 0 3
11487: PPUSH
11488: LD_INT 1
11490: PPUSH
11491: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11495: LD_INT 45
11497: PPUSH
11498: LD_VAR 0 3
11502: PPUSH
11503: LD_INT 1
11505: PPUSH
11506: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11510: LD_INT 46
11512: PPUSH
11513: LD_VAR 0 3
11517: PPUSH
11518: LD_INT 1
11520: PPUSH
11521: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11525: LD_INT 47
11527: PPUSH
11528: LD_VAR 0 3
11532: PPUSH
11533: LD_INT 1
11535: PPUSH
11536: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11540: LD_INT 1
11542: PPUSH
11543: LD_VAR 0 3
11547: PPUSH
11548: LD_INT 1
11550: PPUSH
11551: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11555: LD_INT 2
11557: PPUSH
11558: LD_VAR 0 3
11562: PPUSH
11563: LD_INT 1
11565: PPUSH
11566: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11570: LD_INT 11
11572: PPUSH
11573: LD_VAR 0 3
11577: PPUSH
11578: LD_INT 1
11580: PPUSH
11581: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11585: LD_INT 0
11587: PPUSH
11588: LD_VAR 0 3
11592: PPUSH
11593: LD_INT 1
11595: PPUSH
11596: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11600: LD_INT 2
11602: PPUSH
11603: LD_VAR 0 3
11607: PPUSH
11608: LD_INT 1
11610: PPUSH
11611: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11615: LD_INT 4
11617: PPUSH
11618: LD_VAR 0 3
11622: PPUSH
11623: LD_INT 1
11625: PPUSH
11626: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11630: LD_INT 6
11632: PPUSH
11633: LD_VAR 0 3
11637: PPUSH
11638: LD_INT 1
11640: PPUSH
11641: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11645: LD_INT 29
11647: PPUSH
11648: LD_VAR 0 3
11652: PPUSH
11653: LD_INT 1
11655: PPUSH
11656: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11660: LD_INT 31
11662: PPUSH
11663: LD_VAR 0 3
11667: PPUSH
11668: LD_INT 1
11670: PPUSH
11671: CALL_OW 324
// end ; 3 :
11675: GO 15223
11677: LD_INT 3
11679: DOUBLE
11680: EQUAL
11681: IFTRUE 11685
11683: GO 12138
11685: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11686: LD_INT 35
11688: PPUSH
11689: LD_VAR 0 3
11693: PPUSH
11694: LD_INT 1
11696: PPUSH
11697: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11701: LD_INT 45
11703: PPUSH
11704: LD_VAR 0 3
11708: PPUSH
11709: LD_INT 1
11711: PPUSH
11712: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11716: LD_INT 46
11718: PPUSH
11719: LD_VAR 0 3
11723: PPUSH
11724: LD_INT 1
11726: PPUSH
11727: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11731: LD_INT 47
11733: PPUSH
11734: LD_VAR 0 3
11738: PPUSH
11739: LD_INT 1
11741: PPUSH
11742: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11746: LD_INT 1
11748: PPUSH
11749: LD_VAR 0 3
11753: PPUSH
11754: LD_INT 1
11756: PPUSH
11757: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11761: LD_INT 2
11763: PPUSH
11764: LD_VAR 0 3
11768: PPUSH
11769: LD_INT 1
11771: PPUSH
11772: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11776: LD_INT 11
11778: PPUSH
11779: LD_VAR 0 3
11783: PPUSH
11784: LD_INT 1
11786: PPUSH
11787: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11791: LD_INT 48
11793: PPUSH
11794: LD_VAR 0 3
11798: PPUSH
11799: LD_INT 1
11801: PPUSH
11802: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11806: LD_INT 69
11808: PPUSH
11809: LD_VAR 0 3
11813: PPUSH
11814: LD_INT 1
11816: PPUSH
11817: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11821: LD_INT 39
11823: PPUSH
11824: LD_VAR 0 3
11828: PPUSH
11829: LD_INT 1
11831: PPUSH
11832: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11836: LD_INT 43
11838: PPUSH
11839: LD_VAR 0 3
11843: PPUSH
11844: LD_INT 1
11846: PPUSH
11847: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11851: LD_INT 51
11853: PPUSH
11854: LD_VAR 0 3
11858: PPUSH
11859: LD_INT 1
11861: PPUSH
11862: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11866: LD_INT 6
11868: PPUSH
11869: LD_VAR 0 3
11873: PPUSH
11874: LD_INT 1
11876: PPUSH
11877: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11881: LD_INT 0
11883: PPUSH
11884: LD_VAR 0 3
11888: PPUSH
11889: LD_INT 1
11891: PPUSH
11892: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11896: LD_INT 2
11898: PPUSH
11899: LD_VAR 0 3
11903: PPUSH
11904: LD_INT 1
11906: PPUSH
11907: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11911: LD_INT 3
11913: PPUSH
11914: LD_VAR 0 3
11918: PPUSH
11919: LD_INT 1
11921: PPUSH
11922: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11926: LD_INT 4
11928: PPUSH
11929: LD_VAR 0 3
11933: PPUSH
11934: LD_INT 1
11936: PPUSH
11937: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11941: LD_INT 6
11943: PPUSH
11944: LD_VAR 0 3
11948: PPUSH
11949: LD_INT 1
11951: PPUSH
11952: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11956: LD_INT 7
11958: PPUSH
11959: LD_VAR 0 3
11963: PPUSH
11964: LD_INT 1
11966: PPUSH
11967: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11971: LD_INT 8
11973: PPUSH
11974: LD_VAR 0 3
11978: PPUSH
11979: LD_INT 1
11981: PPUSH
11982: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11986: LD_INT 10
11988: PPUSH
11989: LD_VAR 0 3
11993: PPUSH
11994: LD_INT 1
11996: PPUSH
11997: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12001: LD_INT 15
12003: PPUSH
12004: LD_VAR 0 3
12008: PPUSH
12009: LD_INT 1
12011: PPUSH
12012: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12016: LD_INT 16
12018: PPUSH
12019: LD_VAR 0 3
12023: PPUSH
12024: LD_INT 1
12026: PPUSH
12027: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12031: LD_INT 17
12033: PPUSH
12034: LD_VAR 0 3
12038: PPUSH
12039: LD_INT 1
12041: PPUSH
12042: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12046: LD_INT 20
12048: PPUSH
12049: LD_VAR 0 3
12053: PPUSH
12054: LD_INT 1
12056: PPUSH
12057: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12061: LD_INT 26
12063: PPUSH
12064: LD_VAR 0 3
12068: PPUSH
12069: LD_INT 1
12071: PPUSH
12072: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12076: LD_INT 27
12078: PPUSH
12079: LD_VAR 0 3
12083: PPUSH
12084: LD_INT 1
12086: PPUSH
12087: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12091: LD_INT 29
12093: PPUSH
12094: LD_VAR 0 3
12098: PPUSH
12099: LD_INT 1
12101: PPUSH
12102: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12106: LD_INT 31
12108: PPUSH
12109: LD_VAR 0 3
12113: PPUSH
12114: LD_INT 1
12116: PPUSH
12117: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12121: LD_INT 32
12123: PPUSH
12124: LD_VAR 0 3
12128: PPUSH
12129: LD_INT 1
12131: PPUSH
12132: CALL_OW 324
// end ; 4 :
12136: GO 15223
12138: LD_INT 4
12140: DOUBLE
12141: EQUAL
12142: IFTRUE 12146
12144: GO 13094
12146: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12147: LD_INT 35
12149: PPUSH
12150: LD_VAR 0 3
12154: PPUSH
12155: LD_INT 1
12157: PPUSH
12158: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12162: LD_INT 45
12164: PPUSH
12165: LD_VAR 0 3
12169: PPUSH
12170: LD_INT 1
12172: PPUSH
12173: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12177: LD_INT 46
12179: PPUSH
12180: LD_VAR 0 3
12184: PPUSH
12185: LD_INT 1
12187: PPUSH
12188: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12192: LD_INT 47
12194: PPUSH
12195: LD_VAR 0 3
12199: PPUSH
12200: LD_INT 1
12202: PPUSH
12203: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12207: LD_INT 1
12209: PPUSH
12210: LD_VAR 0 3
12214: PPUSH
12215: LD_INT 1
12217: PPUSH
12218: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12222: LD_INT 2
12224: PPUSH
12225: LD_VAR 0 3
12229: PPUSH
12230: LD_INT 1
12232: PPUSH
12233: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12237: LD_INT 11
12239: PPUSH
12240: LD_VAR 0 3
12244: PPUSH
12245: LD_INT 1
12247: PPUSH
12248: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12252: LD_INT 20
12254: PPUSH
12255: LD_VAR 0 3
12259: PPUSH
12260: LD_INT 1
12262: PPUSH
12263: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12267: LD_INT 48
12269: PPUSH
12270: LD_VAR 0 3
12274: PPUSH
12275: LD_INT 1
12277: PPUSH
12278: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12282: LD_INT 49
12284: PPUSH
12285: LD_VAR 0 3
12289: PPUSH
12290: LD_INT 1
12292: PPUSH
12293: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12297: LD_INT 69
12299: PPUSH
12300: LD_VAR 0 3
12304: PPUSH
12305: LD_INT 1
12307: PPUSH
12308: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12312: LD_INT 39
12314: PPUSH
12315: LD_VAR 0 3
12319: PPUSH
12320: LD_INT 1
12322: PPUSH
12323: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12327: LD_INT 34
12329: PPUSH
12330: LD_VAR 0 3
12334: PPUSH
12335: LD_INT 1
12337: PPUSH
12338: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12342: LD_INT 42
12344: PPUSH
12345: LD_VAR 0 3
12349: PPUSH
12350: LD_INT 1
12352: PPUSH
12353: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12357: LD_INT 44
12359: PPUSH
12360: LD_VAR 0 3
12364: PPUSH
12365: LD_INT 1
12367: PPUSH
12368: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12372: LD_INT 41
12374: PPUSH
12375: LD_VAR 0 3
12379: PPUSH
12380: LD_INT 1
12382: PPUSH
12383: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12387: LD_INT 43
12389: PPUSH
12390: LD_VAR 0 3
12394: PPUSH
12395: LD_INT 1
12397: PPUSH
12398: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12402: LD_INT 70
12404: PPUSH
12405: LD_VAR 0 3
12409: PPUSH
12410: LD_INT 1
12412: PPUSH
12413: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12417: LD_INT 51
12419: PPUSH
12420: LD_VAR 0 3
12424: PPUSH
12425: LD_INT 1
12427: PPUSH
12428: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12432: LD_INT 52
12434: PPUSH
12435: LD_VAR 0 3
12439: PPUSH
12440: LD_INT 1
12442: PPUSH
12443: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12447: LD_INT 6
12449: PPUSH
12450: LD_VAR 0 3
12454: PPUSH
12455: LD_INT 1
12457: PPUSH
12458: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12462: LD_INT 15
12464: PPUSH
12465: LD_VAR 0 3
12469: PPUSH
12470: LD_INT 1
12472: PPUSH
12473: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12477: LD_INT 7
12479: PPUSH
12480: LD_VAR 0 3
12484: PPUSH
12485: LD_INT 1
12487: PPUSH
12488: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12492: LD_INT 12
12494: PPUSH
12495: LD_VAR 0 3
12499: PPUSH
12500: LD_INT 1
12502: PPUSH
12503: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12507: LD_INT 18
12509: PPUSH
12510: LD_VAR 0 3
12514: PPUSH
12515: LD_INT 1
12517: PPUSH
12518: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12522: LD_INT 60
12524: PPUSH
12525: LD_VAR 0 3
12529: PPUSH
12530: LD_INT 1
12532: PPUSH
12533: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12537: LD_INT 9
12539: PPUSH
12540: LD_VAR 0 3
12544: PPUSH
12545: LD_INT 1
12547: PPUSH
12548: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12552: LD_INT 30
12554: PPUSH
12555: LD_VAR 0 3
12559: PPUSH
12560: LD_INT 1
12562: PPUSH
12563: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12567: LD_INT 37
12569: PPUSH
12570: LD_VAR 0 3
12574: PPUSH
12575: LD_INT 1
12577: PPUSH
12578: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12582: LD_INT 5
12584: PPUSH
12585: LD_VAR 0 3
12589: PPUSH
12590: LD_INT 1
12592: PPUSH
12593: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12597: LD_INT 66
12599: PPUSH
12600: LD_VAR 0 3
12604: PPUSH
12605: LD_INT 1
12607: PPUSH
12608: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12612: LD_INT 21
12614: PPUSH
12615: LD_VAR 0 3
12619: PPUSH
12620: LD_INT 1
12622: PPUSH
12623: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12627: LD_INT 22
12629: PPUSH
12630: LD_VAR 0 3
12634: PPUSH
12635: LD_INT 1
12637: PPUSH
12638: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12642: LD_INT 54
12644: PPUSH
12645: LD_VAR 0 3
12649: PPUSH
12650: LD_INT 1
12652: PPUSH
12653: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12657: LD_INT 0
12659: PPUSH
12660: LD_VAR 0 3
12664: PPUSH
12665: LD_INT 1
12667: PPUSH
12668: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12672: LD_INT 1
12674: PPUSH
12675: LD_VAR 0 3
12679: PPUSH
12680: LD_INT 1
12682: PPUSH
12683: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12687: LD_INT 2
12689: PPUSH
12690: LD_VAR 0 3
12694: PPUSH
12695: LD_INT 1
12697: PPUSH
12698: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12702: LD_INT 3
12704: PPUSH
12705: LD_VAR 0 3
12709: PPUSH
12710: LD_INT 1
12712: PPUSH
12713: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12717: LD_INT 4
12719: PPUSH
12720: LD_VAR 0 3
12724: PPUSH
12725: LD_INT 1
12727: PPUSH
12728: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12732: LD_INT 5
12734: PPUSH
12735: LD_VAR 0 3
12739: PPUSH
12740: LD_INT 1
12742: PPUSH
12743: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12747: LD_INT 6
12749: PPUSH
12750: LD_VAR 0 3
12754: PPUSH
12755: LD_INT 1
12757: PPUSH
12758: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12762: LD_INT 7
12764: PPUSH
12765: LD_VAR 0 3
12769: PPUSH
12770: LD_INT 1
12772: PPUSH
12773: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12777: LD_INT 8
12779: PPUSH
12780: LD_VAR 0 3
12784: PPUSH
12785: LD_INT 1
12787: PPUSH
12788: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12792: LD_INT 10
12794: PPUSH
12795: LD_VAR 0 3
12799: PPUSH
12800: LD_INT 1
12802: PPUSH
12803: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12807: LD_INT 11
12809: PPUSH
12810: LD_VAR 0 3
12814: PPUSH
12815: LD_INT 1
12817: PPUSH
12818: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12822: LD_INT 12
12824: PPUSH
12825: LD_VAR 0 3
12829: PPUSH
12830: LD_INT 1
12832: PPUSH
12833: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12837: LD_INT 13
12839: PPUSH
12840: LD_VAR 0 3
12844: PPUSH
12845: LD_INT 1
12847: PPUSH
12848: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12852: LD_INT 14
12854: PPUSH
12855: LD_VAR 0 3
12859: PPUSH
12860: LD_INT 1
12862: PPUSH
12863: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12867: LD_INT 15
12869: PPUSH
12870: LD_VAR 0 3
12874: PPUSH
12875: LD_INT 1
12877: PPUSH
12878: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12882: LD_INT 16
12884: PPUSH
12885: LD_VAR 0 3
12889: PPUSH
12890: LD_INT 1
12892: PPUSH
12893: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12897: LD_INT 17
12899: PPUSH
12900: LD_VAR 0 3
12904: PPUSH
12905: LD_INT 1
12907: PPUSH
12908: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12912: LD_INT 19
12914: PPUSH
12915: LD_VAR 0 3
12919: PPUSH
12920: LD_INT 1
12922: PPUSH
12923: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12927: LD_INT 20
12929: PPUSH
12930: LD_VAR 0 3
12934: PPUSH
12935: LD_INT 1
12937: PPUSH
12938: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12942: LD_INT 21
12944: PPUSH
12945: LD_VAR 0 3
12949: PPUSH
12950: LD_INT 1
12952: PPUSH
12953: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12957: LD_INT 23
12959: PPUSH
12960: LD_VAR 0 3
12964: PPUSH
12965: LD_INT 1
12967: PPUSH
12968: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12972: LD_INT 26
12974: PPUSH
12975: LD_VAR 0 3
12979: PPUSH
12980: LD_INT 1
12982: PPUSH
12983: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12987: LD_INT 27
12989: PPUSH
12990: LD_VAR 0 3
12994: PPUSH
12995: LD_INT 1
12997: PPUSH
12998: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
13002: LD_INT 28
13004: PPUSH
13005: LD_VAR 0 3
13009: PPUSH
13010: LD_INT 1
13012: PPUSH
13013: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13017: LD_INT 29
13019: PPUSH
13020: LD_VAR 0 3
13024: PPUSH
13025: LD_INT 1
13027: PPUSH
13028: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
13032: LD_INT 30
13034: PPUSH
13035: LD_VAR 0 3
13039: PPUSH
13040: LD_INT 1
13042: PPUSH
13043: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13047: LD_INT 31
13049: PPUSH
13050: LD_VAR 0 3
13054: PPUSH
13055: LD_INT 1
13057: PPUSH
13058: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13062: LD_INT 32
13064: PPUSH
13065: LD_VAR 0 3
13069: PPUSH
13070: LD_INT 1
13072: PPUSH
13073: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
13077: LD_INT 36
13079: PPUSH
13080: LD_VAR 0 3
13084: PPUSH
13085: LD_INT 1
13087: PPUSH
13088: CALL_OW 324
// end ; 5 :
13092: GO 15223
13094: LD_INT 5
13096: DOUBLE
13097: EQUAL
13098: IFTRUE 13102
13100: GO 14215
13102: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13103: LD_INT 35
13105: PPUSH
13106: LD_VAR 0 3
13110: PPUSH
13111: LD_INT 1
13113: PPUSH
13114: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13118: LD_INT 45
13120: PPUSH
13121: LD_VAR 0 3
13125: PPUSH
13126: LD_INT 1
13128: PPUSH
13129: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13133: LD_INT 46
13135: PPUSH
13136: LD_VAR 0 3
13140: PPUSH
13141: LD_INT 1
13143: PPUSH
13144: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13148: LD_INT 47
13150: PPUSH
13151: LD_VAR 0 3
13155: PPUSH
13156: LD_INT 1
13158: PPUSH
13159: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13163: LD_INT 1
13165: PPUSH
13166: LD_VAR 0 3
13170: PPUSH
13171: LD_INT 1
13173: PPUSH
13174: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13178: LD_INT 2
13180: PPUSH
13181: LD_VAR 0 3
13185: PPUSH
13186: LD_INT 1
13188: PPUSH
13189: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13193: LD_INT 11
13195: PPUSH
13196: LD_VAR 0 3
13200: PPUSH
13201: LD_INT 1
13203: PPUSH
13204: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13208: LD_INT 20
13210: PPUSH
13211: LD_VAR 0 3
13215: PPUSH
13216: LD_INT 1
13218: PPUSH
13219: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13223: LD_INT 48
13225: PPUSH
13226: LD_VAR 0 3
13230: PPUSH
13231: LD_INT 1
13233: PPUSH
13234: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13238: LD_INT 49
13240: PPUSH
13241: LD_VAR 0 3
13245: PPUSH
13246: LD_INT 1
13248: PPUSH
13249: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13253: LD_INT 69
13255: PPUSH
13256: LD_VAR 0 3
13260: PPUSH
13261: LD_INT 1
13263: PPUSH
13264: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13268: LD_INT 39
13270: PPUSH
13271: LD_VAR 0 3
13275: PPUSH
13276: LD_INT 1
13278: PPUSH
13279: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13283: LD_INT 34
13285: PPUSH
13286: LD_VAR 0 3
13290: PPUSH
13291: LD_INT 1
13293: PPUSH
13294: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13298: LD_INT 42
13300: PPUSH
13301: LD_VAR 0 3
13305: PPUSH
13306: LD_INT 1
13308: PPUSH
13309: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13313: LD_INT 44
13315: PPUSH
13316: LD_VAR 0 3
13320: PPUSH
13321: LD_INT 1
13323: PPUSH
13324: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13328: LD_INT 41
13330: PPUSH
13331: LD_VAR 0 3
13335: PPUSH
13336: LD_INT 1
13338: PPUSH
13339: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
13343: LD_INT 40
13345: PPUSH
13346: LD_VAR 0 3
13350: PPUSH
13351: LD_INT 1
13353: PPUSH
13354: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13358: LD_INT 43
13360: PPUSH
13361: LD_VAR 0 3
13365: PPUSH
13366: LD_INT 1
13368: PPUSH
13369: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13373: LD_INT 70
13375: PPUSH
13376: LD_VAR 0 3
13380: PPUSH
13381: LD_INT 1
13383: PPUSH
13384: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13388: LD_INT 51
13390: PPUSH
13391: LD_VAR 0 3
13395: PPUSH
13396: LD_INT 1
13398: PPUSH
13399: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13403: LD_INT 52
13405: PPUSH
13406: LD_VAR 0 3
13410: PPUSH
13411: LD_INT 1
13413: PPUSH
13414: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13418: LD_INT 6
13420: PPUSH
13421: LD_VAR 0 3
13425: PPUSH
13426: LD_INT 1
13428: PPUSH
13429: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13433: LD_INT 15
13435: PPUSH
13436: LD_VAR 0 3
13440: PPUSH
13441: LD_INT 1
13443: PPUSH
13444: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13448: LD_INT 7
13450: PPUSH
13451: LD_VAR 0 3
13455: PPUSH
13456: LD_INT 1
13458: PPUSH
13459: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13463: LD_INT 12
13465: PPUSH
13466: LD_VAR 0 3
13470: PPUSH
13471: LD_INT 1
13473: PPUSH
13474: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
13478: LD_INT 17
13480: PPUSH
13481: LD_VAR 0 3
13485: PPUSH
13486: LD_INT 1
13488: PPUSH
13489: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13493: LD_INT 18
13495: PPUSH
13496: LD_VAR 0 3
13500: PPUSH
13501: LD_INT 1
13503: PPUSH
13504: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13508: LD_INT 60
13510: PPUSH
13511: LD_VAR 0 3
13515: PPUSH
13516: LD_INT 1
13518: PPUSH
13519: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13523: LD_INT 32
13525: PPUSH
13526: LD_VAR 0 3
13530: PPUSH
13531: LD_INT 1
13533: PPUSH
13534: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13538: LD_INT 9
13540: PPUSH
13541: LD_VAR 0 3
13545: PPUSH
13546: LD_INT 1
13548: PPUSH
13549: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13553: LD_INT 57
13555: PPUSH
13556: LD_VAR 0 3
13560: PPUSH
13561: LD_INT 1
13563: PPUSH
13564: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13568: LD_INT 30
13570: PPUSH
13571: LD_VAR 0 3
13575: PPUSH
13576: LD_INT 1
13578: PPUSH
13579: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13583: LD_INT 37
13585: PPUSH
13586: LD_VAR 0 3
13590: PPUSH
13591: LD_INT 1
13593: PPUSH
13594: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13598: LD_INT 63
13600: PPUSH
13601: LD_VAR 0 3
13605: PPUSH
13606: LD_INT 1
13608: PPUSH
13609: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13613: LD_INT 3
13615: PPUSH
13616: LD_VAR 0 3
13620: PPUSH
13621: LD_INT 1
13623: PPUSH
13624: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13628: LD_INT 4
13630: PPUSH
13631: LD_VAR 0 3
13635: PPUSH
13636: LD_INT 1
13638: PPUSH
13639: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13643: LD_INT 5
13645: PPUSH
13646: LD_VAR 0 3
13650: PPUSH
13651: LD_INT 1
13653: PPUSH
13654: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13658: LD_INT 66
13660: PPUSH
13661: LD_VAR 0 3
13665: PPUSH
13666: LD_INT 1
13668: PPUSH
13669: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13673: LD_INT 21
13675: PPUSH
13676: LD_VAR 0 3
13680: PPUSH
13681: LD_INT 1
13683: PPUSH
13684: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13688: LD_INT 22
13690: PPUSH
13691: LD_VAR 0 3
13695: PPUSH
13696: LD_INT 1
13698: PPUSH
13699: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13703: LD_INT 19
13705: PPUSH
13706: LD_VAR 0 3
13710: PPUSH
13711: LD_INT 1
13713: PPUSH
13714: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13718: LD_INT 54
13720: PPUSH
13721: LD_VAR 0 3
13725: PPUSH
13726: LD_INT 1
13728: PPUSH
13729: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13733: LD_INT 55
13735: PPUSH
13736: LD_VAR 0 3
13740: PPUSH
13741: LD_INT 1
13743: PPUSH
13744: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13748: LD_INT 0
13750: PPUSH
13751: LD_VAR 0 3
13755: PPUSH
13756: LD_INT 1
13758: PPUSH
13759: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
13763: LD_INT 1
13765: PPUSH
13766: LD_VAR 0 3
13770: PPUSH
13771: LD_INT 1
13773: PPUSH
13774: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13778: LD_INT 2
13780: PPUSH
13781: LD_VAR 0 3
13785: PPUSH
13786: LD_INT 1
13788: PPUSH
13789: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
13793: LD_INT 3
13795: PPUSH
13796: LD_VAR 0 3
13800: PPUSH
13801: LD_INT 1
13803: PPUSH
13804: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13808: LD_INT 4
13810: PPUSH
13811: LD_VAR 0 3
13815: PPUSH
13816: LD_INT 1
13818: PPUSH
13819: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
13823: LD_INT 5
13825: PPUSH
13826: LD_VAR 0 3
13830: PPUSH
13831: LD_INT 1
13833: PPUSH
13834: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13838: LD_INT 6
13840: PPUSH
13841: LD_VAR 0 3
13845: PPUSH
13846: LD_INT 1
13848: PPUSH
13849: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13853: LD_INT 7
13855: PPUSH
13856: LD_VAR 0 3
13860: PPUSH
13861: LD_INT 1
13863: PPUSH
13864: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13868: LD_INT 8
13870: PPUSH
13871: LD_VAR 0 3
13875: PPUSH
13876: LD_INT 1
13878: PPUSH
13879: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13883: LD_INT 10
13885: PPUSH
13886: LD_VAR 0 3
13890: PPUSH
13891: LD_INT 1
13893: PPUSH
13894: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
13898: LD_INT 11
13900: PPUSH
13901: LD_VAR 0 3
13905: PPUSH
13906: LD_INT 1
13908: PPUSH
13909: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
13913: LD_INT 12
13915: PPUSH
13916: LD_VAR 0 3
13920: PPUSH
13921: LD_INT 1
13923: PPUSH
13924: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
13928: LD_INT 13
13930: PPUSH
13931: LD_VAR 0 3
13935: PPUSH
13936: LD_INT 1
13938: PPUSH
13939: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
13943: LD_INT 14
13945: PPUSH
13946: LD_VAR 0 3
13950: PPUSH
13951: LD_INT 1
13953: PPUSH
13954: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13958: LD_INT 15
13960: PPUSH
13961: LD_VAR 0 3
13965: PPUSH
13966: LD_INT 1
13968: PPUSH
13969: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13973: LD_INT 16
13975: PPUSH
13976: LD_VAR 0 3
13980: PPUSH
13981: LD_INT 1
13983: PPUSH
13984: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13988: LD_INT 17
13990: PPUSH
13991: LD_VAR 0 3
13995: PPUSH
13996: LD_INT 1
13998: PPUSH
13999: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
14003: LD_INT 18
14005: PPUSH
14006: LD_VAR 0 3
14010: PPUSH
14011: LD_INT 1
14013: PPUSH
14014: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
14018: LD_INT 19
14020: PPUSH
14021: LD_VAR 0 3
14025: PPUSH
14026: LD_INT 1
14028: PPUSH
14029: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
14033: LD_INT 20
14035: PPUSH
14036: LD_VAR 0 3
14040: PPUSH
14041: LD_INT 1
14043: PPUSH
14044: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
14048: LD_INT 21
14050: PPUSH
14051: LD_VAR 0 3
14055: PPUSH
14056: LD_INT 1
14058: PPUSH
14059: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
14063: LD_INT 23
14065: PPUSH
14066: LD_VAR 0 3
14070: PPUSH
14071: LD_INT 1
14073: PPUSH
14074: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
14078: LD_INT 26
14080: PPUSH
14081: LD_VAR 0 3
14085: PPUSH
14086: LD_INT 1
14088: PPUSH
14089: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
14093: LD_INT 27
14095: PPUSH
14096: LD_VAR 0 3
14100: PPUSH
14101: LD_INT 1
14103: PPUSH
14104: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
14108: LD_INT 28
14110: PPUSH
14111: LD_VAR 0 3
14115: PPUSH
14116: LD_INT 1
14118: PPUSH
14119: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14123: LD_INT 29
14125: PPUSH
14126: LD_VAR 0 3
14130: PPUSH
14131: LD_INT 1
14133: PPUSH
14134: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
14138: LD_INT 30
14140: PPUSH
14141: LD_VAR 0 3
14145: PPUSH
14146: LD_INT 1
14148: PPUSH
14149: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14153: LD_INT 31
14155: PPUSH
14156: LD_VAR 0 3
14160: PPUSH
14161: LD_INT 1
14163: PPUSH
14164: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
14168: LD_INT 32
14170: PPUSH
14171: LD_VAR 0 3
14175: PPUSH
14176: LD_INT 1
14178: PPUSH
14179: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
14183: LD_INT 33
14185: PPUSH
14186: LD_VAR 0 3
14190: PPUSH
14191: LD_INT 1
14193: PPUSH
14194: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
14198: LD_INT 36
14200: PPUSH
14201: LD_VAR 0 3
14205: PPUSH
14206: LD_INT 1
14208: PPUSH
14209: CALL_OW 324
// end ; 6 :
14213: GO 15223
14215: LD_INT 6
14217: DOUBLE
14218: EQUAL
14219: IFTRUE 14223
14221: GO 15148
14223: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14224: LD_INT 35
14226: PPUSH
14227: LD_VAR 0 3
14231: PPUSH
14232: LD_INT 1
14234: PPUSH
14235: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14239: LD_INT 45
14241: PPUSH
14242: LD_VAR 0 3
14246: PPUSH
14247: LD_INT 1
14249: PPUSH
14250: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14254: LD_INT 46
14256: PPUSH
14257: LD_VAR 0 3
14261: PPUSH
14262: LD_INT 1
14264: PPUSH
14265: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14269: LD_INT 47
14271: PPUSH
14272: LD_VAR 0 3
14276: PPUSH
14277: LD_INT 1
14279: PPUSH
14280: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14284: LD_INT 1
14286: PPUSH
14287: LD_VAR 0 3
14291: PPUSH
14292: LD_INT 1
14294: PPUSH
14295: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14299: LD_INT 2
14301: PPUSH
14302: LD_VAR 0 3
14306: PPUSH
14307: LD_INT 1
14309: PPUSH
14310: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14314: LD_INT 11
14316: PPUSH
14317: LD_VAR 0 3
14321: PPUSH
14322: LD_INT 1
14324: PPUSH
14325: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
14329: LD_INT 20
14331: PPUSH
14332: LD_VAR 0 3
14336: PPUSH
14337: LD_INT 1
14339: PPUSH
14340: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14344: LD_INT 48
14346: PPUSH
14347: LD_VAR 0 3
14351: PPUSH
14352: LD_INT 1
14354: PPUSH
14355: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
14359: LD_INT 49
14361: PPUSH
14362: LD_VAR 0 3
14366: PPUSH
14367: LD_INT 1
14369: PPUSH
14370: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
14374: LD_INT 50
14376: PPUSH
14377: LD_VAR 0 3
14381: PPUSH
14382: LD_INT 1
14384: PPUSH
14385: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14389: LD_INT 69
14391: PPUSH
14392: LD_VAR 0 3
14396: PPUSH
14397: LD_INT 1
14399: PPUSH
14400: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14404: LD_INT 39
14406: PPUSH
14407: LD_VAR 0 3
14411: PPUSH
14412: LD_INT 1
14414: PPUSH
14415: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
14419: LD_INT 34
14421: PPUSH
14422: LD_VAR 0 3
14426: PPUSH
14427: LD_INT 1
14429: PPUSH
14430: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
14434: LD_INT 42
14436: PPUSH
14437: LD_VAR 0 3
14441: PPUSH
14442: LD_INT 1
14444: PPUSH
14445: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
14449: LD_INT 44
14451: PPUSH
14452: LD_VAR 0 3
14456: PPUSH
14457: LD_INT 1
14459: PPUSH
14460: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
14464: LD_INT 41
14466: PPUSH
14467: LD_VAR 0 3
14471: PPUSH
14472: LD_INT 1
14474: PPUSH
14475: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
14479: LD_INT 13
14481: PPUSH
14482: LD_VAR 0 3
14486: PPUSH
14487: LD_INT 1
14489: PPUSH
14490: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
14494: LD_INT 40
14496: PPUSH
14497: LD_VAR 0 3
14501: PPUSH
14502: LD_INT 1
14504: PPUSH
14505: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14509: LD_INT 43
14511: PPUSH
14512: LD_VAR 0 3
14516: PPUSH
14517: LD_INT 1
14519: PPUSH
14520: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
14524: LD_INT 70
14526: PPUSH
14527: LD_VAR 0 3
14531: PPUSH
14532: LD_INT 1
14534: PPUSH
14535: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
14539: LD_INT 23
14541: PPUSH
14542: LD_VAR 0 3
14546: PPUSH
14547: LD_INT 1
14549: PPUSH
14550: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14554: LD_INT 51
14556: PPUSH
14557: LD_VAR 0 3
14561: PPUSH
14562: LD_INT 1
14564: PPUSH
14565: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
14569: LD_INT 52
14571: PPUSH
14572: LD_VAR 0 3
14576: PPUSH
14577: LD_INT 1
14579: PPUSH
14580: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14584: LD_INT 6
14586: PPUSH
14587: LD_VAR 0 3
14591: PPUSH
14592: LD_INT 1
14594: PPUSH
14595: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
14599: LD_INT 15
14601: PPUSH
14602: LD_VAR 0 3
14606: PPUSH
14607: LD_INT 1
14609: PPUSH
14610: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
14614: LD_INT 7
14616: PPUSH
14617: LD_VAR 0 3
14621: PPUSH
14622: LD_INT 1
14624: PPUSH
14625: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
14629: LD_INT 12
14631: PPUSH
14632: LD_VAR 0 3
14636: PPUSH
14637: LD_INT 1
14639: PPUSH
14640: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
14644: LD_INT 10
14646: PPUSH
14647: LD_VAR 0 3
14651: PPUSH
14652: LD_INT 1
14654: PPUSH
14655: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
14659: LD_INT 17
14661: PPUSH
14662: LD_VAR 0 3
14666: PPUSH
14667: LD_INT 1
14669: PPUSH
14670: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
14674: LD_INT 18
14676: PPUSH
14677: LD_VAR 0 3
14681: PPUSH
14682: LD_INT 1
14684: PPUSH
14685: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
14689: LD_INT 60
14691: PPUSH
14692: LD_VAR 0 3
14696: PPUSH
14697: LD_INT 1
14699: PPUSH
14700: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
14704: LD_INT 61
14706: PPUSH
14707: LD_VAR 0 3
14711: PPUSH
14712: LD_INT 1
14714: PPUSH
14715: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
14719: LD_INT 32
14721: PPUSH
14722: LD_VAR 0 3
14726: PPUSH
14727: LD_INT 1
14729: PPUSH
14730: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
14734: LD_INT 27
14736: PPUSH
14737: LD_VAR 0 3
14741: PPUSH
14742: LD_INT 1
14744: PPUSH
14745: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
14749: LD_INT 36
14751: PPUSH
14752: LD_VAR 0 3
14756: PPUSH
14757: LD_INT 1
14759: PPUSH
14760: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
14764: LD_INT 33
14766: PPUSH
14767: LD_VAR 0 3
14771: PPUSH
14772: LD_INT 1
14774: PPUSH
14775: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
14779: LD_INT 9
14781: PPUSH
14782: LD_VAR 0 3
14786: PPUSH
14787: LD_INT 1
14789: PPUSH
14790: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
14794: LD_INT 38
14796: PPUSH
14797: LD_VAR 0 3
14801: PPUSH
14802: LD_INT 1
14804: PPUSH
14805: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
14809: LD_INT 57
14811: PPUSH
14812: LD_VAR 0 3
14816: PPUSH
14817: LD_INT 1
14819: PPUSH
14820: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
14824: LD_INT 58
14826: PPUSH
14827: LD_VAR 0 3
14831: PPUSH
14832: LD_INT 1
14834: PPUSH
14835: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
14839: LD_INT 28
14841: PPUSH
14842: LD_VAR 0 3
14846: PPUSH
14847: LD_INT 1
14849: PPUSH
14850: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
14854: LD_INT 29
14856: PPUSH
14857: LD_VAR 0 3
14861: PPUSH
14862: LD_INT 1
14864: PPUSH
14865: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
14869: LD_INT 30
14871: PPUSH
14872: LD_VAR 0 3
14876: PPUSH
14877: LD_INT 1
14879: PPUSH
14880: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
14884: LD_INT 37
14886: PPUSH
14887: LD_VAR 0 3
14891: PPUSH
14892: LD_INT 1
14894: PPUSH
14895: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
14899: LD_INT 63
14901: PPUSH
14902: LD_VAR 0 3
14906: PPUSH
14907: LD_INT 1
14909: PPUSH
14910: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
14914: LD_INT 64
14916: PPUSH
14917: LD_VAR 0 3
14921: PPUSH
14922: LD_INT 1
14924: PPUSH
14925: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
14929: LD_INT 3
14931: PPUSH
14932: LD_VAR 0 3
14936: PPUSH
14937: LD_INT 1
14939: PPUSH
14940: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
14944: LD_INT 4
14946: PPUSH
14947: LD_VAR 0 3
14951: PPUSH
14952: LD_INT 1
14954: PPUSH
14955: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14959: LD_INT 5
14961: PPUSH
14962: LD_VAR 0 3
14966: PPUSH
14967: LD_INT 1
14969: PPUSH
14970: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
14974: LD_INT 8
14976: PPUSH
14977: LD_VAR 0 3
14981: PPUSH
14982: LD_INT 1
14984: PPUSH
14985: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14989: LD_INT 66
14991: PPUSH
14992: LD_VAR 0 3
14996: PPUSH
14997: LD_INT 1
14999: PPUSH
15000: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
15004: LD_INT 67
15006: PPUSH
15007: LD_VAR 0 3
15011: PPUSH
15012: LD_INT 1
15014: PPUSH
15015: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
15019: LD_INT 21
15021: PPUSH
15022: LD_VAR 0 3
15026: PPUSH
15027: LD_INT 1
15029: PPUSH
15030: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
15034: LD_INT 22
15036: PPUSH
15037: LD_VAR 0 3
15041: PPUSH
15042: LD_INT 1
15044: PPUSH
15045: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
15049: LD_INT 19
15051: PPUSH
15052: LD_VAR 0 3
15056: PPUSH
15057: LD_INT 1
15059: PPUSH
15060: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
15064: LD_INT 26
15066: PPUSH
15067: LD_VAR 0 3
15071: PPUSH
15072: LD_INT 1
15074: PPUSH
15075: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
15079: LD_INT 54
15081: PPUSH
15082: LD_VAR 0 3
15086: PPUSH
15087: LD_INT 1
15089: PPUSH
15090: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
15094: LD_INT 55
15096: PPUSH
15097: LD_VAR 0 3
15101: PPUSH
15102: LD_INT 1
15104: PPUSH
15105: CALL_OW 322
// for i = 0 to 39 do
15109: LD_ADDR_VAR 0 4
15113: PUSH
15114: DOUBLE
15115: LD_INT 0
15117: DEC
15118: ST_TO_ADDR
15119: LD_INT 39
15121: PUSH
15122: FOR_TO
15123: IFFALSE 15144
// SetRestrict ( i , side , true ) ;
15125: LD_VAR 0 4
15129: PPUSH
15130: LD_VAR 0 3
15134: PPUSH
15135: LD_INT 1
15137: PPUSH
15138: CALL_OW 324
15142: GO 15122
15144: POP
15145: POP
// end ; else
15146: GO 15223
15148: POP
// begin for i = 1 to 73 do
15149: LD_ADDR_VAR 0 4
15153: PUSH
15154: DOUBLE
15155: LD_INT 1
15157: DEC
15158: ST_TO_ADDR
15159: LD_INT 73
15161: PUSH
15162: FOR_TO
15163: IFFALSE 15184
// SetTech ( i , side , state_enabled ) ;
15165: LD_VAR 0 4
15169: PPUSH
15170: LD_VAR 0 3
15174: PPUSH
15175: LD_INT 1
15177: PPUSH
15178: CALL_OW 322
15182: GO 15162
15184: POP
15185: POP
// for i = 0 to 39 do
15186: LD_ADDR_VAR 0 4
15190: PUSH
15191: DOUBLE
15192: LD_INT 0
15194: DEC
15195: ST_TO_ADDR
15196: LD_INT 39
15198: PUSH
15199: FOR_TO
15200: IFFALSE 15221
// SetRestrict ( i , side , true ) ;
15202: LD_VAR 0 4
15206: PPUSH
15207: LD_VAR 0 3
15211: PPUSH
15212: LD_INT 1
15214: PPUSH
15215: CALL_OW 324
15219: GO 15199
15221: POP
15222: POP
// end ; end ; end ;
15223: GO 11228
15225: POP
15226: POP
// end ; end_of_file
15227: LD_VAR 0 2
15231: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
15232: LD_INT 0
15234: PPUSH
15235: PPUSH
// enable ( 98 ) ;
15236: LD_INT 98
15238: ENABLE_MARKED
// GameEnded = false ;
15239: LD_ADDR_LOC 24
15243: PUSH
15244: LD_INT 0
15246: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
15247: LD_ADDR_LOC 23
15251: PUSH
15252: LD_INT 0
15254: PUSH
15255: LD_INT 0
15257: PUSH
15258: LD_INT 0
15260: PUSH
15261: LD_INT 0
15263: PUSH
15264: LD_INT 0
15266: PUSH
15267: LD_INT 0
15269: PUSH
15270: LD_INT 0
15272: PUSH
15273: LD_INT 0
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: ST_TO_ADDR
// unfoged = false ;
15286: LD_ADDR_LOC 25
15290: PUSH
15291: LD_INT 0
15293: ST_TO_ADDR
// defeated_specs := [ ] ;
15294: LD_ADDR_LOC 26
15298: PUSH
15299: EMPTY
15300: ST_TO_ADDR
// for i = 1 to side_positions do
15301: LD_ADDR_VAR 0 2
15305: PUSH
15306: DOUBLE
15307: LD_INT 1
15309: DEC
15310: ST_TO_ADDR
15311: LD_EXP 21
15315: PUSH
15316: FOR_TO
15317: IFFALSE 15357
// if not side_positions [ i ] then
15319: LD_EXP 21
15323: PUSH
15324: LD_VAR 0 2
15328: ARRAY
15329: NOT
15330: IFFALSE 15355
// defeated = replace ( defeated , i , true ) ;
15332: LD_ADDR_LOC 23
15336: PUSH
15337: LD_LOC 23
15341: PPUSH
15342: LD_VAR 0 2
15346: PPUSH
15347: LD_INT 1
15349: PPUSH
15350: CALL_OW 1
15354: ST_TO_ADDR
15355: GO 15316
15357: POP
15358: POP
// end ;
15359: LD_VAR 0 1
15363: RET
// function CanWinLoose ; begin
15364: LD_INT 0
15366: PPUSH
// Result := true ;
15367: LD_ADDR_VAR 0 1
15371: PUSH
15372: LD_INT 1
15374: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
15375: CALL_OW 518
15379: PUSH
15380: CALL_OW 519
15384: PUSH
15385: LD_INT 0
15387: GREATER
15388: AND
15389: IFFALSE 15399
// Result := false ;
15391: LD_ADDR_VAR 0 1
15395: PUSH
15396: LD_INT 0
15398: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
15399: CALL_OW 531
15403: PUSH
15404: CALL_OW 519
15408: PUSH
15409: LD_INT 1
15411: GREATER
15412: AND
15413: IFFALSE 15423
// Result := false ;
15415: LD_ADDR_VAR 0 1
15419: PUSH
15420: LD_INT 0
15422: ST_TO_ADDR
// end ;
15423: LD_VAR 0 1
15427: RET
// export function HasPower ( i ) ; var k , h ; begin
15428: LD_INT 0
15430: PPUSH
15431: PPUSH
15432: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
15433: LD_VAR 0 1
15437: PPUSH
15438: CALL_OW 108
15442: NOT
15443: PUSH
15444: LD_EXP 20
15448: PUSH
15449: LD_VAR 0 1
15453: ARRAY
15454: NOT
15455: AND
15456: PUSH
15457: LD_OWVAR 4
15461: AND
15462: IFFALSE 15474
// begin result = false ;
15464: LD_ADDR_VAR 0 2
15468: PUSH
15469: LD_INT 0
15471: ST_TO_ADDR
// end else
15472: GO 15769
// case def_win_rules of 0 :
15474: LD_EXP 15
15478: PUSH
15479: LD_INT 0
15481: DOUBLE
15482: EQUAL
15483: IFTRUE 15487
15485: GO 15650
15487: POP
// if def_people_respawning then
15488: LD_EXP 51
15492: IFFALSE 15583
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
15494: LD_ADDR_VAR 0 2
15498: PUSH
15499: LD_INT 22
15501: PUSH
15502: LD_VAR 0 1
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: LD_INT 2
15513: PUSH
15514: LD_INT 21
15516: PUSH
15517: LD_INT 1
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: PUSH
15524: LD_INT 33
15526: PUSH
15527: LD_INT 3
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PUSH
15534: LD_INT 33
15536: PUSH
15537: LD_INT 5
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: PUSH
15544: LD_INT 30
15546: PUSH
15547: LD_INT 0
15549: PUSH
15550: EMPTY
15551: LIST
15552: LIST
15553: PUSH
15554: LD_INT 30
15556: PUSH
15557: LD_INT 1
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PPUSH
15576: CALL_OW 69
15580: ST_TO_ADDR
15581: GO 15648
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
15583: LD_ADDR_VAR 0 2
15587: PUSH
15588: LD_INT 22
15590: PUSH
15591: LD_VAR 0 1
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: PUSH
15600: LD_INT 2
15602: PUSH
15603: LD_INT 21
15605: PUSH
15606: LD_INT 1
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: PUSH
15613: LD_INT 33
15615: PUSH
15616: LD_INT 3
15618: PUSH
15619: EMPTY
15620: LIST
15621: LIST
15622: PUSH
15623: LD_INT 33
15625: PUSH
15626: LD_INT 5
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PUSH
15633: EMPTY
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: PPUSH
15643: CALL_OW 69
15647: ST_TO_ADDR
15648: GO 15769
15650: LD_INT 1
15652: DOUBLE
15653: EQUAL
15654: IFTRUE 15658
15656: GO 15697
15658: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
15659: LD_ADDR_VAR 0 2
15663: PUSH
15664: LD_INT 22
15666: PUSH
15667: LD_VAR 0 1
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: PUSH
15676: LD_INT 21
15678: PUSH
15679: LD_INT 1
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PPUSH
15690: CALL_OW 69
15694: ST_TO_ADDR
15695: GO 15769
15697: LD_INT 2
15699: DOUBLE
15700: EQUAL
15701: IFTRUE 15705
15703: GO 15768
15705: POP
// begin h = false ;
15706: LD_ADDR_VAR 0 4
15710: PUSH
15711: LD_INT 0
15713: ST_TO_ADDR
// for k in heroes [ i ] do
15714: LD_ADDR_VAR 0 3
15718: PUSH
15719: LD_EXP 31
15723: PUSH
15724: LD_VAR 0 1
15728: ARRAY
15729: PUSH
15730: FOR_IN
15731: IFFALSE 15754
// if IsLive ( k ) then
15733: LD_VAR 0 3
15737: PPUSH
15738: CALL_OW 300
15742: IFFALSE 15752
// h = true ;
15744: LD_ADDR_VAR 0 4
15748: PUSH
15749: LD_INT 1
15751: ST_TO_ADDR
15752: GO 15730
15754: POP
15755: POP
// Result := h ;
15756: LD_ADDR_VAR 0 2
15760: PUSH
15761: LD_VAR 0 4
15765: ST_TO_ADDR
// end ; end ;
15766: GO 15769
15768: POP
// end ;
15769: LD_VAR 0 2
15773: RET
// function AlliedSides ( i , j ) ; begin
15774: LD_INT 0
15776: PPUSH
// Result := false ;
15777: LD_ADDR_VAR 0 3
15781: PUSH
15782: LD_INT 0
15784: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
15785: LD_VAR 0 1
15789: PPUSH
15790: LD_VAR 0 2
15794: PPUSH
15795: CALL_OW 81
15799: PUSH
15800: LD_INT 1
15802: EQUAL
15803: PUSH
15804: LD_VAR 0 2
15808: PPUSH
15809: LD_VAR 0 1
15813: PPUSH
15814: CALL_OW 81
15818: PUSH
15819: LD_INT 1
15821: EQUAL
15822: AND
15823: PUSH
15824: LD_VAR 0 1
15828: PPUSH
15829: CALL_OW 83
15833: AND
15834: PUSH
15835: LD_VAR 0 2
15839: PPUSH
15840: CALL_OW 83
15844: AND
15845: IFFALSE 15855
// Result := true ;
15847: LD_ADDR_VAR 0 3
15851: PUSH
15852: LD_INT 1
15854: ST_TO_ADDR
// end ;
15855: LD_VAR 0 3
15859: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
15860: CALL 15364 0 0
15864: PUSH
15865: LD_LOC 24
15869: NOT
15870: AND
15871: IFFALSE 15887
15873: GO 15875
15875: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
15876: LD_ADDR_EXP 57
15880: PUSH
15881: LD_STRING #Player-Ended
15883: PUSH
15884: EMPTY
15885: LIST
15886: ST_TO_ADDR
15887: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
15888: CALL 15364 0 0
15892: PUSH
15893: LD_LOC 24
15897: AND
15898: IFFALSE 15907
15900: GO 15902
15902: DISABLE
// YouLostInMultiplayer ;
15903: CALL_OW 107
15907: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
15908: CALL 15364 0 0
15912: NOT
15913: PUSH
15914: CALL_OW 531
15918: NOT
15919: AND
15920: IFFALSE 15936
15922: GO 15924
15924: DISABLE
// WaitServerStrings = [ #server-wait ] ;
15925: LD_ADDR_EXP 57
15929: PUSH
15930: LD_STRING #server-wait
15932: PUSH
15933: EMPTY
15934: LIST
15935: ST_TO_ADDR
15936: END
// every 100 trigger IAmSpec do
15937: CALL_OW 531
15941: IFFALSE 15957
15943: GO 15945
15945: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
15946: LD_ADDR_EXP 57
15950: PUSH
15951: LD_STRING #Player-IAmSpec
15953: PUSH
15954: EMPTY
15955: LIST
15956: ST_TO_ADDR
15957: END
// every 100 trigger GameEnded and IAmSpec do
15958: LD_LOC 24
15962: PUSH
15963: CALL_OW 531
15967: AND
15968: IFFALSE 15977
15970: GO 15972
15972: DISABLE
// YouLostInMultiplayer ;
15973: CALL_OW 107
15977: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
15978: CALL 15364 0 0
15982: PUSH
15983: LD_LOC 24
15987: NOT
15988: AND
15989: IFFALSE 16005
15991: GO 15993
15993: DISABLE
// WaitServerStrings = [ $player-win ] ;
15994: LD_ADDR_EXP 57
15998: PUSH
15999: LD_STRING $player-win
16001: PUSH
16002: EMPTY
16003: LIST
16004: ST_TO_ADDR
16005: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
16006: CALL 15364 0 0
16010: PUSH
16011: LD_LOC 24
16015: AND
16016: IFFALSE 16040
16018: GO 16020
16020: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
16021: LD_EXP 22
16025: PUSH
16026: LD_OWVAR 7
16030: ARRAY
16031: PPUSH
16032: CALL 10866 0 1
// YouWinInMultiplayer ;
16036: CALL_OW 106
// end ;
16040: END
// every 100 trigger isEditor marked 401 do
16041: LD_OWVAR 84
16045: IFFALSE 16061
16047: GO 16049
16049: DISABLE
// Debug_Strings = [ You won ] ;
16050: LD_ADDR_OWVAR 48
16054: PUSH
16055: LD_STRING You won
16057: PUSH
16058: EMPTY
16059: LIST
16060: ST_TO_ADDR
16061: END
// every 100 trigger isEditor marked 400 do
16062: LD_OWVAR 84
16066: IFFALSE 16082
16068: GO 16070
16070: DISABLE
// Debug_Strings = [ You loss ] ;
16071: LD_ADDR_OWVAR 48
16075: PUSH
16076: LD_STRING You loss
16078: PUSH
16079: EMPTY
16080: LIST
16081: ST_TO_ADDR
16082: END
// every 100 marked 98 do var i , un ;
16083: GO 16085
16085: DISABLE
16086: LD_INT 0
16088: PPUSH
16089: PPUSH
// begin for i = 1 to side_positions do
16090: LD_ADDR_VAR 0 1
16094: PUSH
16095: DOUBLE
16096: LD_INT 1
16098: DEC
16099: ST_TO_ADDR
16100: LD_EXP 21
16104: PUSH
16105: FOR_TO
16106: IFFALSE 16193
// begin if side_positions [ i ] then
16108: LD_EXP 21
16112: PUSH
16113: LD_VAR 0 1
16117: ARRAY
16118: IFFALSE 16191
// if not HasPower ( i ) and not defeated [ i ] then
16120: LD_VAR 0 1
16124: PPUSH
16125: CALL 15428 0 1
16129: NOT
16130: PUSH
16131: LD_LOC 23
16135: PUSH
16136: LD_VAR 0 1
16140: ARRAY
16141: NOT
16142: AND
16143: IFFALSE 16191
// begin defeated = replace ( defeated , i , true ) ;
16145: LD_ADDR_LOC 23
16149: PUSH
16150: LD_LOC 23
16154: PPUSH
16155: LD_VAR 0 1
16159: PPUSH
16160: LD_INT 1
16162: PPUSH
16163: CALL_OW 1
16167: ST_TO_ADDR
// if i = mp_player_side then
16168: LD_VAR 0 1
16172: PUSH
16173: LD_OWVAR 7
16177: EQUAL
16178: IFFALSE 16191
// begin Multiplayer_Loose_Message ;
16180: CALL_OW 521
// SetPlayerSpectator ( ) ;
16184: CALL_OW 572
// enable ( 400 ) ;
16188: LD_INT 400
16190: ENABLE_MARKED
// end ; end ; end ;
16191: GO 16105
16193: POP
16194: POP
// DidGameEnd ;
16195: CALL 16210 0 0
// if not GameEnded then
16199: LD_LOC 24
16203: NOT
16204: IFFALSE 16207
// enable ;
16206: ENABLE
// end ;
16207: PPOPN 2
16209: END
// function DidGameEnd ; var i , k , enemy ; begin
16210: LD_INT 0
16212: PPUSH
16213: PPUSH
16214: PPUSH
16215: PPUSH
// enemy = [ ] ;
16216: LD_ADDR_VAR 0 4
16220: PUSH
16221: EMPTY
16222: ST_TO_ADDR
// for i = 1 to side_positions do
16223: LD_ADDR_VAR 0 2
16227: PUSH
16228: DOUBLE
16229: LD_INT 1
16231: DEC
16232: ST_TO_ADDR
16233: LD_EXP 21
16237: PUSH
16238: FOR_TO
16239: IFFALSE 16333
// if not defeated [ i ] then
16241: LD_LOC 23
16245: PUSH
16246: LD_VAR 0 2
16250: ARRAY
16251: NOT
16252: IFFALSE 16331
// for k = 1 to side_positions do
16254: LD_ADDR_VAR 0 3
16258: PUSH
16259: DOUBLE
16260: LD_INT 1
16262: DEC
16263: ST_TO_ADDR
16264: LD_EXP 21
16268: PUSH
16269: FOR_TO
16270: IFFALSE 16329
// if not defeated [ k ] then
16272: LD_LOC 23
16276: PUSH
16277: LD_VAR 0 3
16281: ARRAY
16282: NOT
16283: IFFALSE 16327
// if not AlliedSides ( i , k ) then
16285: LD_VAR 0 2
16289: PPUSH
16290: LD_VAR 0 3
16294: PPUSH
16295: CALL 15774 0 2
16299: NOT
16300: IFFALSE 16327
// enemy = enemy ^ [ i , k ] ;
16302: LD_ADDR_VAR 0 4
16306: PUSH
16307: LD_VAR 0 4
16311: PUSH
16312: LD_VAR 0 2
16316: PUSH
16317: LD_VAR 0 3
16321: PUSH
16322: EMPTY
16323: LIST
16324: LIST
16325: ADD
16326: ST_TO_ADDR
16327: GO 16269
16329: POP
16330: POP
16331: GO 16238
16333: POP
16334: POP
// if not enemy then
16335: LD_VAR 0 4
16339: NOT
16340: IFFALSE 16366
// begin GameEnded = true ;
16342: LD_ADDR_LOC 24
16346: PUSH
16347: LD_INT 1
16349: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
16350: LD_LOC 23
16354: PUSH
16355: LD_OWVAR 7
16359: ARRAY
16360: NOT
16361: IFFALSE 16366
// enable ( 401 ) ;
16363: LD_INT 401
16365: ENABLE_MARKED
// end ; end ;
16366: LD_VAR 0 1
16370: RET
// function unfog ; var k , friends ; begin
16371: LD_INT 0
16373: PPUSH
16374: PPUSH
16375: PPUSH
// for k = 1 to side_positions do
16376: LD_ADDR_VAR 0 2
16380: PUSH
16381: DOUBLE
16382: LD_INT 1
16384: DEC
16385: ST_TO_ADDR
16386: LD_EXP 21
16390: PUSH
16391: FOR_TO
16392: IFFALSE 16448
// if not defeated [ k ] then
16394: LD_LOC 23
16398: PUSH
16399: LD_VAR 0 2
16403: ARRAY
16404: NOT
16405: IFFALSE 16446
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
16407: LD_OWVAR 7
16411: PPUSH
16412: LD_VAR 0 2
16416: PPUSH
16417: CALL_OW 81
16421: PUSH
16422: LD_INT 1
16424: PUSH
16425: EMPTY
16426: LIST
16427: IN
16428: IFFALSE 16446
// friends = friends ^ k ;
16430: LD_ADDR_VAR 0 3
16434: PUSH
16435: LD_VAR 0 3
16439: PUSH
16440: LD_VAR 0 2
16444: ADD
16445: ST_TO_ADDR
16446: GO 16391
16448: POP
16449: POP
// if not friends then
16450: LD_VAR 0 3
16454: NOT
16455: IFFALSE 16469
// begin SetPlayerSpectator ( ) ;
16457: CALL_OW 572
// unfoged = true ;
16461: LD_ADDR_LOC 25
16465: PUSH
16466: LD_INT 1
16468: ST_TO_ADDR
// end ; end ;
16469: LD_VAR 0 1
16473: RET
// export function MakeGameEnd ; begin
16474: LD_INT 0
16476: PPUSH
// SetPlayerSpectator ( ) ;
16477: CALL_OW 572
// unfoged = true ;
16481: LD_ADDR_LOC 25
16485: PUSH
16486: LD_INT 1
16488: ST_TO_ADDR
// wait ( 0 0$5 ) ;
16489: LD_INT 175
16491: PPUSH
16492: CALL_OW 67
// GameEnded = true ;
16496: LD_ADDR_LOC 24
16500: PUSH
16501: LD_INT 1
16503: ST_TO_ADDR
// end ;
16504: LD_VAR 0 1
16508: RET
// export function GetGameEnded ; begin
16509: LD_INT 0
16511: PPUSH
// result = GameEnded ;
16512: LD_ADDR_VAR 0 1
16516: PUSH
16517: LD_LOC 24
16521: ST_TO_ADDR
// end ; end_of_file
16522: LD_VAR 0 1
16526: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
16527: LD_INT 0
16529: PPUSH
16530: PPUSH
16531: PPUSH
16532: PPUSH
16533: PPUSH
16534: PPUSH
16535: PPUSH
16536: PPUSH
16537: PPUSH
// for i := 1 to 8 do
16538: LD_ADDR_VAR 0 2
16542: PUSH
16543: DOUBLE
16544: LD_INT 1
16546: DEC
16547: ST_TO_ADDR
16548: LD_INT 8
16550: PUSH
16551: FOR_TO
16552: IFFALSE 16936
// begin if Side_Positions [ i ] then
16554: LD_EXP 21
16558: PUSH
16559: LD_VAR 0 2
16563: ARRAY
16564: IFFALSE 16934
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
16566: LD_ADDR_VAR 0 7
16570: PUSH
16571: LD_INT 22
16573: PUSH
16574: LD_VAR 0 2
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: PUSH
16583: LD_INT 21
16585: PUSH
16586: LD_INT 1
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: PPUSH
16597: CALL_OW 69
16601: PUSH
16602: LD_INT 0
16604: PLUS
16605: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16606: LD_ADDR_VAR 0 9
16610: PUSH
16611: LD_INT 22
16613: PUSH
16614: LD_VAR 0 2
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: PUSH
16623: LD_INT 2
16625: PUSH
16626: LD_INT 30
16628: PUSH
16629: LD_INT 0
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: PUSH
16636: LD_INT 30
16638: PUSH
16639: LD_INT 1
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: PUSH
16646: EMPTY
16647: LIST
16648: LIST
16649: LIST
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: PPUSH
16655: CALL_OW 69
16659: ST_TO_ADDR
// crates := 0 ;
16660: LD_ADDR_VAR 0 4
16664: PUSH
16665: LD_INT 0
16667: ST_TO_ADDR
// oil := 0 ;
16668: LD_ADDR_VAR 0 5
16672: PUSH
16673: LD_INT 0
16675: ST_TO_ADDR
// sib := 0 ;
16676: LD_ADDR_VAR 0 6
16680: PUSH
16681: LD_INT 0
16683: ST_TO_ADDR
// if bases then
16684: LD_VAR 0 9
16688: IFFALSE 16794
// begin for j in bases do
16690: LD_ADDR_VAR 0 3
16694: PUSH
16695: LD_VAR 0 9
16699: PUSH
16700: FOR_IN
16701: IFFALSE 16792
// begin base := GetBase ( j ) ;
16703: LD_ADDR_VAR 0 8
16707: PUSH
16708: LD_VAR 0 3
16712: PPUSH
16713: CALL_OW 274
16717: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
16718: LD_ADDR_VAR 0 4
16722: PUSH
16723: LD_VAR 0 4
16727: PUSH
16728: LD_VAR 0 8
16732: PPUSH
16733: LD_INT 1
16735: PPUSH
16736: CALL_OW 275
16740: PLUS
16741: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
16742: LD_ADDR_VAR 0 5
16746: PUSH
16747: LD_VAR 0 5
16751: PUSH
16752: LD_VAR 0 8
16756: PPUSH
16757: LD_INT 2
16759: PPUSH
16760: CALL_OW 275
16764: PLUS
16765: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
16766: LD_ADDR_VAR 0 6
16770: PUSH
16771: LD_VAR 0 6
16775: PUSH
16776: LD_VAR 0 8
16780: PPUSH
16781: LD_INT 3
16783: PPUSH
16784: CALL_OW 275
16788: PLUS
16789: ST_TO_ADDR
// end ;
16790: GO 16700
16792: POP
16793: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
16794: LD_STRING setSpecText(
16796: PUSH
16797: LD_VAR 0 2
16801: STR
16802: PUSH
16803: LD_STRING ,
16805: STR
16806: PUSH
16807: LD_INT 2
16809: STR
16810: PUSH
16811: LD_STRING ,
16813: STR
16814: PUSH
16815: LD_VAR 0 4
16819: STR
16820: PUSH
16821: LD_STRING )
16823: STR
16824: PPUSH
16825: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
16829: LD_STRING setSpecText(
16831: PUSH
16832: LD_VAR 0 2
16836: STR
16837: PUSH
16838: LD_STRING ,
16840: STR
16841: PUSH
16842: LD_INT 3
16844: STR
16845: PUSH
16846: LD_STRING ,
16848: STR
16849: PUSH
16850: LD_VAR 0 5
16854: STR
16855: PUSH
16856: LD_STRING )
16858: STR
16859: PPUSH
16860: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
16864: LD_STRING setSpecText(
16866: PUSH
16867: LD_VAR 0 2
16871: STR
16872: PUSH
16873: LD_STRING ,
16875: STR
16876: PUSH
16877: LD_INT 4
16879: STR
16880: PUSH
16881: LD_STRING ,
16883: STR
16884: PUSH
16885: LD_VAR 0 6
16889: STR
16890: PUSH
16891: LD_STRING )
16893: STR
16894: PPUSH
16895: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
16899: LD_STRING setSpecText(
16901: PUSH
16902: LD_VAR 0 2
16906: STR
16907: PUSH
16908: LD_STRING ,
16910: STR
16911: PUSH
16912: LD_INT 5
16914: STR
16915: PUSH
16916: LD_STRING ,
16918: STR
16919: PUSH
16920: LD_VAR 0 7
16924: STR
16925: PUSH
16926: LD_STRING )
16928: STR
16929: PPUSH
16930: CALL_OW 559
// end ; end ;
16934: GO 16551
16936: POP
16937: POP
// end ;
16938: LD_VAR 0 1
16942: RET
// every 0 0$1 do
16943: GO 16945
16945: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
16946: LD_STRING setSpecLogoNumber(
16948: PUSH
16949: LD_INT 2
16951: STR
16952: PUSH
16953: LD_STRING ,
16955: STR
16956: PUSH
16957: LD_INT 1
16959: STR
16960: PUSH
16961: LD_STRING )
16963: STR
16964: PPUSH
16965: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
16969: LD_STRING setSpecLogoNumber(
16971: PUSH
16972: LD_INT 3
16974: STR
16975: PUSH
16976: LD_STRING ,
16978: STR
16979: PUSH
16980: LD_INT 2
16982: STR
16983: PUSH
16984: LD_STRING )
16986: STR
16987: PPUSH
16988: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
16992: LD_STRING setSpecLogoNumber(
16994: PUSH
16995: LD_INT 4
16997: STR
16998: PUSH
16999: LD_STRING ,
17001: STR
17002: PUSH
17003: LD_INT 3
17005: STR
17006: PUSH
17007: LD_STRING )
17009: STR
17010: PPUSH
17011: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
17015: LD_STRING setSpecLogoNumber(
17017: PUSH
17018: LD_INT 5
17020: STR
17021: PUSH
17022: LD_STRING ,
17024: STR
17025: PUSH
17026: LD_INT 4
17028: STR
17029: PUSH
17030: LD_STRING )
17032: STR
17033: PPUSH
17034: CALL_OW 559
// end ;
17038: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
17039: LD_INT 2
17041: PUSH
17042: LD_INT 30
17044: PUSH
17045: LD_INT 0
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: PUSH
17052: LD_INT 30
17054: PUSH
17055: LD_INT 1
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: LIST
17066: PPUSH
17067: CALL_OW 69
17071: IFFALSE 17081
17073: GO 17075
17075: DISABLE
// begin enable ;
17076: ENABLE
// UpdateSpectatorBar ;
17077: CALL 16527 0 0
// end ; end_of_file
17081: END
// var respawn , inqueue ; export function init_respawning ; begin
17082: LD_INT 0
17084: PPUSH
// respawn := Rand ( 1 , 8 ) ;
17085: LD_ADDR_LOC 27
17089: PUSH
17090: LD_INT 1
17092: PPUSH
17093: LD_INT 8
17095: PPUSH
17096: CALL_OW 12
17100: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
17101: LD_ADDR_LOC 28
17105: PUSH
17106: LD_INT 0
17108: PUSH
17109: LD_INT 0
17111: PUSH
17112: LD_INT 0
17114: PUSH
17115: LD_INT 0
17117: PUSH
17118: LD_INT 0
17120: PUSH
17121: LD_INT 0
17123: PUSH
17124: LD_INT 0
17126: PUSH
17127: LD_INT 0
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: ST_TO_ADDR
// end ;
17140: LD_VAR 0 1
17144: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
17145: GO 17147
17147: DISABLE
17148: LD_INT 0
17150: PPUSH
17151: PPUSH
17152: PPUSH
// begin if respawning_time_max = 0 then
17153: LD_EXP 11
17157: PUSH
17158: LD_INT 0
17160: EQUAL
17161: IFFALSE 17165
// exit ;
17163: GO 17573
// if respawn = 8 then
17165: LD_LOC 27
17169: PUSH
17170: LD_INT 8
17172: EQUAL
17173: IFFALSE 17185
// respawn := 1 else
17175: LD_ADDR_LOC 27
17179: PUSH
17180: LD_INT 1
17182: ST_TO_ADDR
17183: GO 17199
// respawn := respawn + 1 ;
17185: LD_ADDR_LOC 27
17189: PUSH
17190: LD_LOC 27
17194: PUSH
17195: LD_INT 1
17197: PLUS
17198: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
17199: LD_EXP 21
17203: PUSH
17204: LD_LOC 27
17208: ARRAY
17209: PUSH
17210: LD_LOC 28
17214: PUSH
17215: LD_LOC 27
17219: ARRAY
17220: NOT
17221: AND
17222: IFFALSE 17572
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
17224: LD_ADDR_VAR 0 1
17228: PUSH
17229: LD_INT 21
17231: PUSH
17232: LD_INT 1
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: PUSH
17239: LD_INT 22
17241: PUSH
17242: LD_LOC 27
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: PUSH
17251: LD_INT 3
17253: PUSH
17254: LD_INT 23
17256: PUSH
17257: LD_INT 0
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: PPUSH
17270: CALL_OW 69
17274: ST_TO_ADDR
// if n < number_of_people then
17275: LD_VAR 0 1
17279: PUSH
17280: LD_EXP 4
17284: LESS
17285: IFFALSE 17569
// begin aktresp := respawn ;
17287: LD_ADDR_VAR 0 3
17291: PUSH
17292: LD_LOC 27
17296: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
17297: LD_ADDR_LOC 28
17301: PUSH
17302: LD_LOC 28
17306: PPUSH
17307: LD_VAR 0 3
17311: PPUSH
17312: LD_INT 1
17314: PPUSH
17315: CALL_OW 1
17319: ST_TO_ADDR
// enable ;
17320: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
17321: LD_EXP 10
17325: PPUSH
17326: LD_EXP 11
17330: PPUSH
17331: CALL_OW 12
17335: PPUSH
17336: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
17340: LD_ADDR_LOC 28
17344: PUSH
17345: LD_LOC 28
17349: PPUSH
17350: LD_VAR 0 3
17354: PPUSH
17355: LD_INT 0
17357: PPUSH
17358: CALL_OW 1
17362: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
17363: LD_ADDR_VAR 0 2
17367: PUSH
17368: LD_INT 21
17370: PUSH
17371: LD_INT 3
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: PUSH
17378: LD_INT 2
17380: PUSH
17381: LD_INT 30
17383: PUSH
17384: LD_INT 0
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: PUSH
17391: LD_INT 30
17393: PUSH
17394: LD_INT 1
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: LIST
17405: PUSH
17406: LD_INT 50
17408: PUSH
17409: EMPTY
17410: LIST
17411: PUSH
17412: LD_INT 22
17414: PUSH
17415: LD_VAR 0 3
17419: PUSH
17420: EMPTY
17421: LIST
17422: LIST
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: PPUSH
17430: CALL_OW 69
17434: ST_TO_ADDR
// if dep = 0 then
17435: LD_VAR 0 2
17439: PUSH
17440: LD_INT 0
17442: EQUAL
17443: IFFALSE 17447
// exit ;
17445: GO 17573
// hc_name :=  ;
17447: LD_ADDR_OWVAR 26
17451: PUSH
17452: LD_STRING 
17454: ST_TO_ADDR
// hc_importance := 0 ;
17455: LD_ADDR_OWVAR 32
17459: PUSH
17460: LD_INT 0
17462: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
17463: LD_INT 0
17465: PPUSH
17466: LD_INT 0
17468: PPUSH
17469: LD_EXP 5
17473: PUSH
17474: LD_INT 2
17476: DIV
17477: PPUSH
17478: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
17482: LD_ADDR_OWVAR 21
17486: PUSH
17487: LD_EXP 22
17491: PUSH
17492: LD_VAR 0 3
17496: ARRAY
17497: ST_TO_ADDR
// uc_side := aktresp ;
17498: LD_ADDR_OWVAR 20
17502: PUSH
17503: LD_VAR 0 3
17507: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
17508: LD_ADDR_VAR 0 2
17512: PUSH
17513: LD_VAR 0 2
17517: PUSH
17518: LD_INT 1
17520: PPUSH
17521: LD_VAR 0 2
17525: PPUSH
17526: CALL_OW 12
17530: ARRAY
17531: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
17532: CALL_OW 44
17536: PPUSH
17537: LD_VAR 0 2
17541: PPUSH
17542: CALL_OW 250
17546: PPUSH
17547: LD_VAR 0 2
17551: PPUSH
17552: CALL_OW 251
17556: PPUSH
17557: LD_INT 7
17559: PPUSH
17560: LD_INT 1
17562: PPUSH
17563: CALL_OW 50
// end else
17567: GO 17570
// enable ;
17569: ENABLE
// end else
17570: GO 17573
// enable ;
17572: ENABLE
// end ; end_of_file
17573: PPOPN 3
17575: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
17576: LD_INT 0
17578: PPUSH
17579: PPUSH
17580: PPUSH
// BuildUpTime_Delay = 0 ;
17581: LD_ADDR_EXP 60
17585: PUSH
17586: LD_INT 0
17588: ST_TO_ADDR
// if not def_builduptime then
17589: LD_EXP 54
17593: NOT
17594: IFFALSE 17598
// exit ;
17596: GO 17781
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
17598: LD_ADDR_EXP 60
17602: PUSH
17603: LD_INT 8400
17605: PUSH
17606: LD_INT 2100
17608: PUSH
17609: LD_EXP 54
17613: MUL
17614: PLUS
17615: ST_TO_ADDR
// BuildUpTimeActive := true ;
17616: LD_ADDR_EXP 59
17620: PUSH
17621: LD_INT 1
17623: ST_TO_ADDR
// for i := 1 to 8 do
17624: LD_ADDR_VAR 0 2
17628: PUSH
17629: DOUBLE
17630: LD_INT 1
17632: DEC
17633: ST_TO_ADDR
17634: LD_INT 8
17636: PUSH
17637: FOR_TO
17638: IFFALSE 17779
// if Side_Positions [ i ] then
17640: LD_EXP 21
17644: PUSH
17645: LD_VAR 0 2
17649: ARRAY
17650: IFFALSE 17777
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
17652: LD_EXP 58
17656: PUSH
17657: LD_EXP 21
17661: PUSH
17662: LD_VAR 0 2
17666: ARRAY
17667: ARRAY
17668: PPUSH
17669: LD_INT 5
17671: PPUSH
17672: CALL_OW 424
// for j := 1 to 8 do
17676: LD_ADDR_VAR 0 3
17680: PUSH
17681: DOUBLE
17682: LD_INT 1
17684: DEC
17685: ST_TO_ADDR
17686: LD_INT 8
17688: PUSH
17689: FOR_TO
17690: IFFALSE 17775
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
17692: LD_EXP 21
17696: PUSH
17697: LD_VAR 0 3
17701: ARRAY
17702: PUSH
17703: LD_EXP 18
17707: PUSH
17708: LD_VAR 0 2
17712: ARRAY
17713: PUSH
17714: LD_EXP 18
17718: PUSH
17719: LD_VAR 0 3
17723: ARRAY
17724: NONEQUAL
17725: PUSH
17726: LD_EXP 23
17730: NOT
17731: PUSH
17732: LD_VAR 0 2
17736: PUSH
17737: LD_VAR 0 3
17741: NONEQUAL
17742: AND
17743: OR
17744: AND
17745: IFFALSE 17773
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
17747: LD_VAR 0 3
17751: PPUSH
17752: LD_EXP 58
17756: PUSH
17757: LD_EXP 21
17761: PUSH
17762: LD_VAR 0 2
17766: ARRAY
17767: ARRAY
17768: PPUSH
17769: CALL_OW 333
17773: GO 17689
17775: POP
17776: POP
// end ;
17777: GO 17637
17779: POP
17780: POP
// end ;
17781: LD_VAR 0 1
17785: RET
// export function EndBuildUp ; var i , j ; begin
17786: LD_INT 0
17788: PPUSH
17789: PPUSH
17790: PPUSH
// BuildUpTimeActive := false ;
17791: LD_ADDR_EXP 59
17795: PUSH
17796: LD_INT 0
17798: ST_TO_ADDR
// for i := 1 to 8 do
17799: LD_ADDR_VAR 0 2
17803: PUSH
17804: DOUBLE
17805: LD_INT 1
17807: DEC
17808: ST_TO_ADDR
17809: LD_INT 8
17811: PUSH
17812: FOR_TO
17813: IFFALSE 17954
// if Side_Positions [ i ] then
17815: LD_EXP 21
17819: PUSH
17820: LD_VAR 0 2
17824: ARRAY
17825: IFFALSE 17952
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
17827: LD_EXP 58
17831: PUSH
17832: LD_EXP 21
17836: PUSH
17837: LD_VAR 0 2
17841: ARRAY
17842: ARRAY
17843: PPUSH
17844: LD_INT 0
17846: PPUSH
17847: CALL_OW 424
// for j := 1 to 8 do
17851: LD_ADDR_VAR 0 3
17855: PUSH
17856: DOUBLE
17857: LD_INT 1
17859: DEC
17860: ST_TO_ADDR
17861: LD_INT 8
17863: PUSH
17864: FOR_TO
17865: IFFALSE 17950
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
17867: LD_EXP 21
17871: PUSH
17872: LD_VAR 0 3
17876: ARRAY
17877: PUSH
17878: LD_EXP 18
17882: PUSH
17883: LD_VAR 0 2
17887: ARRAY
17888: PUSH
17889: LD_EXP 18
17893: PUSH
17894: LD_VAR 0 3
17898: ARRAY
17899: NONEQUAL
17900: PUSH
17901: LD_EXP 23
17905: NOT
17906: PUSH
17907: LD_VAR 0 2
17911: PUSH
17912: LD_VAR 0 3
17916: NONEQUAL
17917: AND
17918: OR
17919: AND
17920: IFFALSE 17948
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
17922: LD_VAR 0 3
17926: PPUSH
17927: LD_EXP 58
17931: PUSH
17932: LD_EXP 21
17936: PUSH
17937: LD_VAR 0 2
17941: ARRAY
17942: ARRAY
17943: PPUSH
17944: CALL_OW 334
17948: GO 17864
17950: POP
17951: POP
// end ;
17952: GO 17812
17954: POP
17955: POP
// end ;
17956: LD_VAR 0 1
17960: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
17961: LD_EXP 59
17965: IFFALSE 18140
17967: GO 17969
17969: DISABLE
17970: LD_INT 0
17972: PPUSH
17973: PPUSH
// begin for i := 1 to 8 do
17974: LD_ADDR_VAR 0 1
17978: PUSH
17979: DOUBLE
17980: LD_INT 1
17982: DEC
17983: ST_TO_ADDR
17984: LD_INT 8
17986: PUSH
17987: FOR_TO
17988: IFFALSE 18137
// if Side_Positions [ i ] then
17990: LD_EXP 21
17994: PUSH
17995: LD_VAR 0 1
17999: ARRAY
18000: IFFALSE 18135
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
18002: LD_ADDR_VAR 0 2
18006: PUSH
18007: LD_EXP 58
18011: PUSH
18012: LD_EXP 21
18016: PUSH
18017: LD_VAR 0 1
18021: ARRAY
18022: ARRAY
18023: PPUSH
18024: LD_INT 2
18026: PUSH
18027: LD_INT 21
18029: PUSH
18030: LD_INT 1
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: LD_INT 21
18039: PUSH
18040: LD_INT 2
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: LIST
18051: PUSH
18052: LD_INT 22
18054: PUSH
18055: LD_OWVAR 2
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PPUSH
18068: CALL_OW 70
18072: PUSH
18073: FOR_IN
18074: IFFALSE 18133
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
18076: LD_EXP 18
18080: PUSH
18081: LD_VAR 0 1
18085: ARRAY
18086: PUSH
18087: LD_EXP 18
18091: PUSH
18092: LD_OWVAR 2
18096: ARRAY
18097: NONEQUAL
18098: PUSH
18099: LD_EXP 23
18103: NOT
18104: PUSH
18105: LD_VAR 0 1
18109: PUSH
18110: LD_OWVAR 2
18114: NONEQUAL
18115: AND
18116: OR
18117: IFFALSE 18131
// ComMoveToArea ( un , BuildUpEscape ) ;
18119: LD_VAR 0 2
18123: PPUSH
18124: LD_INT 12
18126: PPUSH
18127: CALL_OW 113
18131: GO 18073
18133: POP
18134: POP
18135: GO 17987
18137: POP
18138: POP
// enable ;
18139: ENABLE
// end ;
18140: PPOPN 2
18142: END
// every 0 0$1 trigger def_builduptime do
18143: LD_EXP 54
18147: IFFALSE 18173
18149: GO 18151
18151: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
18152: LD_INT 8400
18154: PUSH
18155: LD_EXP 54
18159: PUSH
18160: LD_INT 2100
18162: MUL
18163: PLUS
18164: PPUSH
18165: CALL_OW 67
// EndBuildUp ;
18169: CALL 17786 0 0
// end ;
18173: END
