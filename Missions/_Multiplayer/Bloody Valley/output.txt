// export def_tree_function ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , respawning_time_min , respawning_time_max , siberite_bomb_Delay , amount_of_apemen , tree_function , def_win_rules , buildUpTime_Delay ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export Position_Sides ; export customSpectator ; export depot_def , breastworks_def , start_def , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 141
// begin Your_Side := mp_player_side ;
  79: LD_ADDR_OWVAR 2
  83: PUSH
  84: LD_OWVAR 7
  88: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  89: LD_ADDR_EXP 20
  93: PUSH
  94: LD_OWVAR 17
  98: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  99: LD_ADDR_EXP 17
 103: PUSH
 104: LD_OWVAR 15
 108: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 109: LD_ADDR_EXP 21
 113: PUSH
 114: LD_OWVAR 16
 118: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 119: LD_ADDR_EXP 19
 123: PUSH
 124: CALL 0 0 0
 128: ST_TO_ADDR
// Teams := mp_teams ;
 129: LD_ADDR_EXP 18
 133: PUSH
 134: LD_OWVAR 12
 138: ST_TO_ADDR
// end else
 139: GO 334
// begin Your_Side := 5 ;
 141: LD_ADDR_OWVAR 2
 145: PUSH
 146: LD_INT 5
 148: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 0 , 0 , 0 ] ;
 149: LD_ADDR_EXP 20
 153: PUSH
 154: LD_INT 1
 156: PUSH
 157: LD_INT 2
 159: PUSH
 160: LD_INT 3
 162: PUSH
 163: LD_INT 4
 165: PUSH
 166: LD_INT 5
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 188: LD_ADDR_EXP 17
 192: PUSH
 193: LD_INT 1
 195: PUSH
 196: LD_INT 1
 198: PUSH
 199: LD_INT 2
 201: PUSH
 202: LD_INT 2
 204: PUSH
 205: LD_INT 0
 207: PUSH
 208: LD_INT 0
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 0 , 0 , 0 , 0 ] ;
 227: LD_ADDR_EXP 21
 231: PUSH
 232: LD_INT 1
 234: PUSH
 235: LD_INT 2
 237: PUSH
 238: LD_INT 3
 240: PUSH
 241: LD_INT 1
 243: PUSH
 244: LD_INT 0
 246: PUSH
 247: LD_INT 0
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 0
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: LIST
 264: LIST
 265: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 266: LD_ADDR_EXP 19
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: LD_INT 0
 279: PUSH
 280: LD_INT 0
 282: PUSH
 283: LD_INT 0
 285: PUSH
 286: LD_INT 0
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: LIST
 299: LIST
 300: LIST
 301: LIST
 302: LIST
 303: LIST
 304: ST_TO_ADDR
// Teams := [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 305: LD_ADDR_EXP 18
 309: PUSH
 310: LD_INT 1
 312: PUSH
 313: LD_INT 2
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: LD_INT 3
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: ST_TO_ADDR
// end ; customSpectator := [ ] ;
 334: LD_ADDR_EXP 24
 338: PUSH
 339: EMPTY
 340: ST_TO_ADDR
// for i := 1 to 8 do
 341: LD_ADDR_VAR 0 2
 345: PUSH
 346: DOUBLE
 347: LD_INT 1
 349: DEC
 350: ST_TO_ADDR
 351: LD_INT 8
 353: PUSH
 354: FOR_TO
 355: IFFALSE 503
// if Multiplayer_GetPlayerIsSpec ( i ) or Side_Positions [ i ] = 5 then
 357: LD_VAR 0 2
 361: PPUSH
 362: CALL_OW 530
 366: PUSH
 367: LD_EXP 20
 371: PUSH
 372: LD_VAR 0 2
 376: ARRAY
 377: PUSH
 378: LD_INT 5
 380: EQUAL
 381: OR
 382: IFFALSE 501
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 384: LD_ADDR_EXP 20
 388: PUSH
 389: LD_EXP 20
 393: PPUSH
 394: LD_VAR 0 2
 398: PPUSH
 399: LD_INT 0
 401: PPUSH
 402: CALL_OW 1
 406: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 407: LD_ADDR_EXP 18
 411: PUSH
 412: LD_EXP 18
 416: PPUSH
 417: LD_EXP 17
 421: PUSH
 422: LD_VAR 0 2
 426: ARRAY
 427: PPUSH
 428: LD_EXP 18
 432: PUSH
 433: LD_EXP 17
 437: PUSH
 438: LD_VAR 0 2
 442: ARRAY
 443: ARRAY
 444: PUSH
 445: LD_VAR 0 2
 449: DIFF
 450: PPUSH
 451: CALL_OW 1
 455: ST_TO_ADDR
// if Side_Positions [ i ] = 5 then
 456: LD_EXP 20
 460: PUSH
 461: LD_VAR 0 2
 465: ARRAY
 466: PUSH
 467: LD_INT 5
 469: EQUAL
 470: IFFALSE 501
// customSpectator := Replace ( customSpectator , customSpectator + 1 , i ) ;
 472: LD_ADDR_EXP 24
 476: PUSH
 477: LD_EXP 24
 481: PPUSH
 482: LD_EXP 24
 486: PUSH
 487: LD_INT 1
 489: PLUS
 490: PPUSH
 491: LD_VAR 0 2
 495: PPUSH
 496: CALL_OW 1
 500: ST_TO_ADDR
// end ;
 501: GO 354
 503: POP
 504: POP
// Position_Sides := [ 0 , 0 , 0 , 0 ] ;
 505: LD_ADDR_EXP 23
 509: PUSH
 510: LD_INT 0
 512: PUSH
 513: LD_INT 0
 515: PUSH
 516: LD_INT 0
 518: PUSH
 519: LD_INT 0
 521: PUSH
 522: EMPTY
 523: LIST
 524: LIST
 525: LIST
 526: LIST
 527: ST_TO_ADDR
// for i := 1 to 8 do
 528: LD_ADDR_VAR 0 2
 532: PUSH
 533: DOUBLE
 534: LD_INT 1
 536: DEC
 537: ST_TO_ADDR
 538: LD_INT 8
 540: PUSH
 541: FOR_TO
 542: IFFALSE 589
// if Side_Positions [ i ] then
 544: LD_EXP 20
 548: PUSH
 549: LD_VAR 0 2
 553: ARRAY
 554: IFFALSE 587
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 556: LD_ADDR_EXP 23
 560: PUSH
 561: LD_EXP 23
 565: PPUSH
 566: LD_EXP 20
 570: PUSH
 571: LD_VAR 0 2
 575: ARRAY
 576: PPUSH
 577: LD_VAR 0 2
 581: PPUSH
 582: CALL_OW 1
 586: ST_TO_ADDR
 587: GO 541
 589: POP
 590: POP
// if not your_side in customSpectator then
 591: LD_OWVAR 2
 595: PUSH
 596: LD_EXP 24
 600: IN
 601: NOT
 602: IFFALSE 620
// Team_Game := Side_Teams [ your_side ] ;
 604: LD_ADDR_EXP 22
 608: PUSH
 609: LD_EXP 17
 613: PUSH
 614: LD_OWVAR 2
 618: ARRAY
 619: ST_TO_ADDR
// if Multiplayer then
 620: LD_OWVAR 4
 624: IFFALSE 831
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 626: LD_ADDR_EXP 39
 630: PUSH
 631: LD_INT 0
 633: PPUSH
 634: CALL_OW 426
 638: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 639: LD_ADDR_EXP 40
 643: PUSH
 644: LD_INT 1
 646: PPUSH
 647: CALL_OW 426
 651: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 652: LD_ADDR_EXP 41
 656: PUSH
 657: LD_INT 2
 659: PPUSH
 660: CALL_OW 426
 664: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 665: LD_ADDR_EXP 42
 669: PUSH
 670: LD_INT 3
 672: PPUSH
 673: CALL_OW 426
 677: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 678: LD_ADDR_EXP 43
 682: PUSH
 683: LD_INT 4
 685: PPUSH
 686: CALL_OW 426
 690: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 691: LD_ADDR_EXP 44
 695: PUSH
 696: LD_INT 5
 698: PPUSH
 699: CALL_OW 426
 703: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 704: LD_ADDR_EXP 46
 708: PUSH
 709: LD_INT 10
 711: PPUSH
 712: CALL_OW 426
 716: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 717: LD_ADDR_EXP 47
 721: PUSH
 722: LD_INT 11
 724: PPUSH
 725: CALL_OW 426
 729: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 730: LD_ADDR_EXP 48
 734: PUSH
 735: LD_INT 12
 737: PPUSH
 738: CALL_OW 426
 742: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 13 ) ;
 743: LD_ADDR_EXP 50
 747: PUSH
 748: LD_INT 13
 750: PPUSH
 751: CALL_OW 426
 755: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 14 ) ;
 756: LD_ADDR_EXP 49
 760: PUSH
 761: LD_INT 14
 763: PPUSH
 764: CALL_OW 426
 768: ST_TO_ADDR
// def_tree_function := GetMultiplayerSetting ( 15 ) ;
 769: LD_ADDR_EXP 1
 773: PUSH
 774: LD_INT 15
 776: PPUSH
 777: CALL_OW 426
 781: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 782: LD_ADDR_EXP 51
 786: PUSH
 787: LD_INT 17
 789: PPUSH
 790: CALL_OW 426
 794: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 795: LD_ADDR_EXP 52
 799: PUSH
 800: LD_INT 20
 802: PPUSH
 803: CALL_OW 426
 807: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 808: LD_ADDR_VAR 0 3
 812: PUSH
 813: LD_INT 22
 815: PPUSH
 816: CALL_OW 426
 820: ST_TO_ADDR
// def_win_rules = 0 ;
 821: LD_ADDR_EXP 15
 825: PUSH
 826: LD_INT 0
 828: ST_TO_ADDR
// end else
 829: GO 963
// begin Randomize ;
 831: CALL_OW 10
// def_base_level := 2 ;
 835: LD_ADDR_EXP 39
 839: PUSH
 840: LD_INT 2
 842: ST_TO_ADDR
// def_amount_of_people := 1 ;
 843: LD_ADDR_EXP 40
 847: PUSH
 848: LD_INT 1
 850: ST_TO_ADDR
// def_skill_level := 1 ;
 851: LD_ADDR_EXP 41
 855: PUSH
 856: LD_INT 1
 858: ST_TO_ADDR
// def_starting_resources := 2 ;
 859: LD_ADDR_EXP 42
 863: PUSH
 864: LD_INT 2
 866: ST_TO_ADDR
// def_shipments_density := 1 ;
 867: LD_ADDR_EXP 43
 871: PUSH
 872: LD_INT 1
 874: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 875: LD_ADDR_EXP 44
 879: PUSH
 880: LD_INT 0
 882: ST_TO_ADDR
// def_shared_vision := 1 ;
 883: LD_ADDR_EXP 46
 887: PUSH
 888: LD_INT 1
 890: ST_TO_ADDR
// def_morale_flags := 1 ;
 891: LD_ADDR_EXP 47
 895: PUSH
 896: LD_INT 1
 898: ST_TO_ADDR
// def_siberite_detection := 1 ;
 899: LD_ADDR_EXP 48
 903: PUSH
 904: LD_INT 1
 906: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 907: LD_ADDR_EXP 50
 911: PUSH
 912: LD_INT 3
 914: ST_TO_ADDR
// def_people_respawning := 2 ;
 915: LD_ADDR_EXP 49
 919: PUSH
 920: LD_INT 2
 922: ST_TO_ADDR
// def_tree_function := 7 ;
 923: LD_ADDR_EXP 1
 927: PUSH
 928: LD_INT 7
 930: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 931: LD_ADDR_EXP 51
 935: PUSH
 936: LD_INT 0
 938: ST_TO_ADDR
// def_builduptime := 1 ;
 939: LD_ADDR_EXP 52
 943: PUSH
 944: LD_INT 1
 946: ST_TO_ADDR
// tech_level = 4 ;
 947: LD_ADDR_VAR 0 3
 951: PUSH
 952: LD_INT 4
 954: ST_TO_ADDR
// def_win_rules = 0 ;
 955: LD_ADDR_EXP 15
 959: PUSH
 960: LD_INT 0
 962: ST_TO_ADDR
// end ; if def_tree_function = 7 then
 963: LD_EXP 1
 967: PUSH
 968: LD_INT 7
 970: EQUAL
 971: IFFALSE 989
// def_tree_function := Rand ( 1 , 5 ) ;
 973: LD_ADDR_EXP 1
 977: PUSH
 978: LD_INT 1
 980: PPUSH
 981: LD_INT 5
 983: PPUSH
 984: CALL_OW 12
 988: ST_TO_ADDR
// InitGameRules ;
 989: CALL 9306 0 0
// if def_game_rules = 0 then
 993: LD_EXP 38
 997: PUSH
 998: LD_INT 0
1000: EQUAL
1001: IFFALSE 1028
// begin if isSGUI then
1003: LD_OWVAR 83
1007: IFFALSE 1015
// setMpTechs ( ) else
1009: CALL 13449 0 0
1013: GO 1028
// begin SetMpTechLevel ( tech_level + 1 ) ;
1015: LD_VAR 0 3
1019: PUSH
1020: LD_INT 1
1022: PLUS
1023: PPUSH
1024: CALL 13596 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1028: LD_ADDR_EXP 2
1032: PUSH
1033: LD_INT 0
1035: PUSH
1036: LD_INT 1
1038: PUSH
1039: LD_INT 1
1041: PUSH
1042: LD_INT 1
1044: PUSH
1045: EMPTY
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: PUSH
1051: LD_EXP 39
1055: PUSH
1056: LD_INT 1
1058: PLUS
1059: ARRAY
1060: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 , 3 ] [ def_base_level + 1 ] ;
1061: LD_ADDR_EXP 3
1065: PUSH
1066: LD_INT 0
1068: PUSH
1069: LD_INT 0
1071: PUSH
1072: LD_INT 2
1074: PUSH
1075: LD_INT 3
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: LIST
1082: LIST
1083: PUSH
1084: LD_EXP 39
1088: PUSH
1089: LD_INT 1
1091: PLUS
1092: ARRAY
1093: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1094: LD_ADDR_EXP 5
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: LD_INT 3
1104: PUSH
1105: LD_INT 4
1107: PUSH
1108: LD_INT 5
1110: PUSH
1111: EMPTY
1112: LIST
1113: LIST
1114: LIST
1115: LIST
1116: PUSH
1117: LD_EXP 41
1121: PUSH
1122: LD_INT 1
1124: PLUS
1125: ARRAY
1126: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1127: LD_ADDR_EXP 7
1131: PUSH
1132: LD_INT 0
1134: PUSH
1135: LD_INT 0
1137: PUSH
1138: LD_INT 0
1140: PUSH
1141: EMPTY
1142: LIST
1143: LIST
1144: LIST
1145: PUSH
1146: LD_INT 30
1148: PUSH
1149: LD_INT 0
1151: PUSH
1152: LD_INT 0
1154: PUSH
1155: EMPTY
1156: LIST
1157: LIST
1158: LIST
1159: PUSH
1160: LD_INT 50
1162: PUSH
1163: LD_INT 20
1165: PUSH
1166: LD_INT 0
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: LIST
1173: PUSH
1174: LD_INT 80
1176: PUSH
1177: LD_INT 40
1179: PUSH
1180: LD_INT 20
1182: PUSH
1183: EMPTY
1184: LIST
1185: LIST
1186: LIST
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: LIST
1193: PUSH
1194: LD_EXP 42
1198: PUSH
1199: LD_INT 1
1201: PLUS
1202: ARRAY
1203: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1204: LD_ADDR_EXP 6
1208: PUSH
1209: LD_INT 10
1211: PUSH
1212: EMPTY
1213: LIST
1214: PUSH
1215: LD_INT 7
1217: PUSH
1218: LD_INT 14
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PUSH
1225: LD_INT 6
1227: PUSH
1228: LD_INT 12
1230: PUSH
1231: LD_INT 18
1233: PUSH
1234: EMPTY
1235: LIST
1236: LIST
1237: LIST
1238: PUSH
1239: LD_INT 5
1241: PUSH
1242: LD_INT 10
1244: PUSH
1245: LD_INT 15
1247: PUSH
1248: LD_INT 20
1250: PUSH
1251: EMPTY
1252: LIST
1253: LIST
1254: LIST
1255: LIST
1256: PUSH
1257: EMPTY
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: PUSH
1263: LD_EXP 42
1267: PUSH
1268: LD_INT 1
1270: PLUS
1271: ARRAY
1272: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1273: LD_ADDR_EXP 4
1277: PUSH
1278: LD_EXP 40
1282: PUSH
1283: LD_INT 4
1285: PLUS
1286: ST_TO_ADDR
// shipments_density := 20 + ( def_shipments_density ) * 20 ;
1287: LD_ADDR_EXP 8
1291: PUSH
1292: LD_INT 20
1294: PUSH
1295: LD_EXP 43
1299: PUSH
1300: LD_INT 20
1302: MUL
1303: PLUS
1304: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1305: LD_ADDR_EXP 13
1309: PUSH
1310: LD_INT 0
1312: PUSH
1313: LD_INT 1
1315: PUSH
1316: LD_INT 2
1318: PUSH
1319: LD_INT 3
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: PUSH
1328: LD_EXP 50
1332: PUSH
1333: LD_INT 1
1335: PLUS
1336: ARRAY
1337: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1338: LD_ADDR_EXP 10
1342: PUSH
1343: LD_INT 0
1345: PUSH
1346: LD_INT 8400
1348: PUSH
1349: LD_INT 1750
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: LIST
1356: PUSH
1357: LD_EXP 49
1361: PUSH
1362: LD_INT 1
1364: PLUS
1365: ARRAY
1366: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1367: LD_ADDR_EXP 11
1371: PUSH
1372: LD_INT 0
1374: PUSH
1375: LD_INT 21000
1377: PUSH
1378: LD_INT 4200
1380: PUSH
1381: EMPTY
1382: LIST
1383: LIST
1384: LIST
1385: PUSH
1386: LD_EXP 49
1390: PUSH
1391: LD_INT 1
1393: PLUS
1394: ARRAY
1395: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1396: LD_ADDR_EXP 9
1400: PUSH
1401: LD_INT 1
1403: NEG
1404: PUSH
1405: LD_INT 350
1407: PUSH
1408: LD_INT 700
1410: PUSH
1411: LD_INT 1400
1413: PUSH
1414: LD_INT 0
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: PUSH
1424: LD_EXP 47
1428: PUSH
1429: LD_INT 1
1431: PLUS
1432: ARRAY
1433: ST_TO_ADDR
// battle_flags_id := [ ] ;
1434: LD_ADDR_EXP 28
1438: PUSH
1439: EMPTY
1440: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1441: LD_ADDR_EXP 12
1445: PUSH
1446: LD_INT 0
1448: PUSH
1449: LD_INT 1
1451: PUSH
1452: LD_INT 63000
1454: PUSH
1455: LD_INT 126000
1457: PUSH
1458: LD_INT 189000
1460: PUSH
1461: LD_INT 252000
1463: PUSH
1464: EMPTY
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: PUSH
1472: LD_EXP 51
1476: PUSH
1477: LD_INT 1
1479: PLUS
1480: ARRAY
1481: ST_TO_ADDR
// tree_function := [ [ 0 , 0 , 0 , 0 , 0 ] , [ 2 , 0 , 0 , 0 , 0 ] , [ 0 , 4 , 0 , 0 , 0 ] , [ 0 , 0 , 2 , 0 , 0 ] , [ 0 , 0 , 0 , 3 , 0 ] , [ 1 , 2 , 1 , 2 , 2 ] , [ 0 , 0 , 0 , 0 , 3 ] ] [ def_tree_function + 1 ] ;
1482: LD_ADDR_EXP 14
1486: PUSH
1487: LD_INT 0
1489: PUSH
1490: LD_INT 0
1492: PUSH
1493: LD_INT 0
1495: PUSH
1496: LD_INT 0
1498: PUSH
1499: LD_INT 0
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: PUSH
1509: LD_INT 2
1511: PUSH
1512: LD_INT 0
1514: PUSH
1515: LD_INT 0
1517: PUSH
1518: LD_INT 0
1520: PUSH
1521: LD_INT 0
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: PUSH
1531: LD_INT 0
1533: PUSH
1534: LD_INT 4
1536: PUSH
1537: LD_INT 0
1539: PUSH
1540: LD_INT 0
1542: PUSH
1543: LD_INT 0
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: PUSH
1553: LD_INT 0
1555: PUSH
1556: LD_INT 0
1558: PUSH
1559: LD_INT 2
1561: PUSH
1562: LD_INT 0
1564: PUSH
1565: LD_INT 0
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: PUSH
1575: LD_INT 0
1577: PUSH
1578: LD_INT 0
1580: PUSH
1581: LD_INT 0
1583: PUSH
1584: LD_INT 3
1586: PUSH
1587: LD_INT 0
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: PUSH
1597: LD_INT 1
1599: PUSH
1600: LD_INT 2
1602: PUSH
1603: LD_INT 1
1605: PUSH
1606: LD_INT 2
1608: PUSH
1609: LD_INT 2
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: LIST
1616: LIST
1617: LIST
1618: PUSH
1619: LD_INT 0
1621: PUSH
1622: LD_INT 0
1624: PUSH
1625: LD_INT 0
1627: PUSH
1628: LD_INT 0
1630: PUSH
1631: LD_INT 3
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: PUSH
1650: LD_EXP 1
1654: PUSH
1655: LD_INT 1
1657: PLUS
1658: ARRAY
1659: ST_TO_ADDR
// buildUpTime_Delay := [ 0 , 5 5$00 , 10 10$00 , 15 15$00 ] [ def_builduptime + 1 ] ;
1660: LD_ADDR_EXP 16
1664: PUSH
1665: LD_INT 0
1667: PUSH
1668: LD_INT 10500
1670: PUSH
1671: LD_INT 21000
1673: PUSH
1674: LD_INT 31500
1676: PUSH
1677: EMPTY
1678: LIST
1679: LIST
1680: LIST
1681: LIST
1682: PUSH
1683: LD_EXP 52
1687: PUSH
1688: LD_INT 1
1690: PLUS
1691: ARRAY
1692: ST_TO_ADDR
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] ;
1693: LD_ADDR_EXP 56
1697: PUSH
1698: LD_INT 8
1700: PUSH
1701: LD_INT 11
1703: PUSH
1704: LD_INT 9
1706: PUSH
1707: LD_INT 10
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: ST_TO_ADDR
// end ;
1716: LD_VAR 0 1
1720: RET
// function prepare_map_coordinates ; var side , dep , br1 , br2 , br3 , un , i ; begin
1721: LD_INT 0
1723: PPUSH
1724: PPUSH
1725: PPUSH
1726: PPUSH
1727: PPUSH
1728: PPUSH
1729: PPUSH
1730: PPUSH
// depot_def = [ ] ;
1731: LD_ADDR_EXP 25
1735: PUSH
1736: EMPTY
1737: ST_TO_ADDR
// breastworks_def = [ ] ;
1738: LD_ADDR_EXP 26
1742: PUSH
1743: EMPTY
1744: ST_TO_ADDR
// for side := 1 to 4 do
1745: LD_ADDR_VAR 0 2
1749: PUSH
1750: DOUBLE
1751: LD_INT 1
1753: DEC
1754: ST_TO_ADDR
1755: LD_INT 4
1757: PUSH
1758: FOR_TO
1759: IFFALSE 2114
// begin dep := side * 4 - 3 ;
1761: LD_ADDR_VAR 0 3
1765: PUSH
1766: LD_VAR 0 2
1770: PUSH
1771: LD_INT 4
1773: MUL
1774: PUSH
1775: LD_INT 3
1777: MINUS
1778: ST_TO_ADDR
// br1 := side * 4 - 2 ;
1779: LD_ADDR_VAR 0 4
1783: PUSH
1784: LD_VAR 0 2
1788: PUSH
1789: LD_INT 4
1791: MUL
1792: PUSH
1793: LD_INT 2
1795: MINUS
1796: ST_TO_ADDR
// br2 := side * 4 - 1 ;
1797: LD_ADDR_VAR 0 5
1801: PUSH
1802: LD_VAR 0 2
1806: PUSH
1807: LD_INT 4
1809: MUL
1810: PUSH
1811: LD_INT 1
1813: MINUS
1814: ST_TO_ADDR
// br3 := side * 4 ;
1815: LD_ADDR_VAR 0 6
1819: PUSH
1820: LD_VAR 0 2
1824: PUSH
1825: LD_INT 4
1827: MUL
1828: ST_TO_ADDR
// depot_def := depot_def ^ [ [ GetX ( dep ) , GetY ( dep ) , GetDir ( dep ) ] ] ;
1829: LD_ADDR_EXP 25
1833: PUSH
1834: LD_EXP 25
1838: PUSH
1839: LD_VAR 0 3
1843: PPUSH
1844: CALL_OW 250
1848: PUSH
1849: LD_VAR 0 3
1853: PPUSH
1854: CALL_OW 251
1858: PUSH
1859: LD_VAR 0 3
1863: PPUSH
1864: CALL_OW 254
1868: PUSH
1869: EMPTY
1870: LIST
1871: LIST
1872: LIST
1873: PUSH
1874: EMPTY
1875: LIST
1876: ADD
1877: ST_TO_ADDR
// start_def := start_def ^ [ [ ShiftX ( GetX ( Dep ) , GetDir ( Dep ) , 6 ) , ShiftY ( GetY ( Dep ) , GetDir ( Dep ) , 6 ) ] ] ;
1878: LD_ADDR_EXP 27
1882: PUSH
1883: LD_EXP 27
1887: PUSH
1888: LD_VAR 0 3
1892: PPUSH
1893: CALL_OW 250
1897: PPUSH
1898: LD_VAR 0 3
1902: PPUSH
1903: CALL_OW 254
1907: PPUSH
1908: LD_INT 6
1910: PPUSH
1911: CALL_OW 272
1915: PUSH
1916: LD_VAR 0 3
1920: PPUSH
1921: CALL_OW 251
1925: PPUSH
1926: LD_VAR 0 3
1930: PPUSH
1931: CALL_OW 254
1935: PPUSH
1936: LD_INT 6
1938: PPUSH
1939: CALL_OW 273
1943: PUSH
1944: EMPTY
1945: LIST
1946: LIST
1947: PUSH
1948: EMPTY
1949: LIST
1950: ADD
1951: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ GetX ( br1 ) , GetY ( br1 ) , GetDir ( br1 ) ] , [ GetX ( br2 ) , GetY ( br2 ) , GetDir ( br2 ) ] , [ GetX ( br3 ) , GetY ( br3 ) , GetDir ( br3 ) ] ] ] ;
1952: LD_ADDR_EXP 26
1956: PUSH
1957: LD_EXP 26
1961: PUSH
1962: LD_VAR 0 4
1966: PPUSH
1967: CALL_OW 250
1971: PUSH
1972: LD_VAR 0 4
1976: PPUSH
1977: CALL_OW 251
1981: PUSH
1982: LD_VAR 0 4
1986: PPUSH
1987: CALL_OW 254
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: LIST
1996: PUSH
1997: LD_VAR 0 5
2001: PPUSH
2002: CALL_OW 250
2006: PUSH
2007: LD_VAR 0 5
2011: PPUSH
2012: CALL_OW 251
2016: PUSH
2017: LD_VAR 0 5
2021: PPUSH
2022: CALL_OW 254
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: LIST
2031: PUSH
2032: LD_VAR 0 6
2036: PPUSH
2037: CALL_OW 250
2041: PUSH
2042: LD_VAR 0 6
2046: PPUSH
2047: CALL_OW 251
2051: PUSH
2052: LD_VAR 0 6
2056: PPUSH
2057: CALL_OW 254
2061: PUSH
2062: EMPTY
2063: LIST
2064: LIST
2065: LIST
2066: PUSH
2067: EMPTY
2068: LIST
2069: LIST
2070: LIST
2071: PUSH
2072: EMPTY
2073: LIST
2074: ADD
2075: ST_TO_ADDR
// DestroyUnit ( dep ) ;
2076: LD_VAR 0 3
2080: PPUSH
2081: CALL_OW 65
// DestroyUnit ( br1 ) ;
2085: LD_VAR 0 4
2089: PPUSH
2090: CALL_OW 65
// DestroyUnit ( br2 ) ;
2094: LD_VAR 0 5
2098: PPUSH
2099: CALL_OW 65
// DestroyUnit ( br3 ) ;
2103: LD_VAR 0 6
2107: PPUSH
2108: CALL_OW 65
// end ;
2112: GO 1758
2114: POP
2115: POP
// if not def_extra_oil_deposits then
2116: LD_EXP 44
2120: NOT
2121: IFFALSE 2203
// for i in [ [ 52 , 44 ] , [ 84 , 37 ] , [ 74 , 81 ] , [ 106 , 77 ] ] do
2123: LD_ADDR_VAR 0 8
2127: PUSH
2128: LD_INT 52
2130: PUSH
2131: LD_INT 44
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: PUSH
2138: LD_INT 84
2140: PUSH
2141: LD_INT 37
2143: PUSH
2144: EMPTY
2145: LIST
2146: LIST
2147: PUSH
2148: LD_INT 74
2150: PUSH
2151: LD_INT 81
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: PUSH
2158: LD_INT 106
2160: PUSH
2161: LD_INT 77
2163: PUSH
2164: EMPTY
2165: LIST
2166: LIST
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: PUSH
2174: FOR_IN
2175: IFFALSE 2201
// begin RemoveDepositXY ( i [ 1 ] , i [ 2 ] ) ;
2177: LD_VAR 0 8
2181: PUSH
2182: LD_INT 1
2184: ARRAY
2185: PPUSH
2186: LD_VAR 0 8
2190: PUSH
2191: LD_INT 2
2193: ARRAY
2194: PPUSH
2195: CALL_OW 63
// end ;
2199: GO 2174
2201: POP
2202: POP
// end ;
2203: LD_VAR 0 1
2207: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2208: LD_INT 0
2210: PPUSH
2211: PPUSH
2212: PPUSH
// if not Team_Game then
2213: LD_EXP 22
2217: NOT
2218: IFFALSE 2316
// begin for i = 1 to 8 do
2220: LD_ADDR_VAR 0 2
2224: PUSH
2225: DOUBLE
2226: LD_INT 1
2228: DEC
2229: ST_TO_ADDR
2230: LD_INT 8
2232: PUSH
2233: FOR_TO
2234: IFFALSE 2312
// for j = 1 to 8 do
2236: LD_ADDR_VAR 0 3
2240: PUSH
2241: DOUBLE
2242: LD_INT 1
2244: DEC
2245: ST_TO_ADDR
2246: LD_INT 8
2248: PUSH
2249: FOR_TO
2250: IFFALSE 2308
// if i <> j then
2252: LD_VAR 0 2
2256: PUSH
2257: LD_VAR 0 3
2261: NONEQUAL
2262: IFFALSE 2286
// SetAttitude ( i , j , att_neutral , true ) else
2264: LD_VAR 0 2
2268: PPUSH
2269: LD_VAR 0 3
2273: PPUSH
2274: LD_INT 0
2276: PPUSH
2277: LD_INT 1
2279: PPUSH
2280: CALL_OW 80
2284: GO 2306
// SetAttitude ( i , j , att_friend , true ) ;
2286: LD_VAR 0 2
2290: PPUSH
2291: LD_VAR 0 3
2295: PPUSH
2296: LD_INT 1
2298: PPUSH
2299: LD_INT 1
2301: PPUSH
2302: CALL_OW 80
2306: GO 2249
2308: POP
2309: POP
2310: GO 2233
2312: POP
2313: POP
// end else
2314: GO 2491
// begin if def_shared_vision then
2316: LD_EXP 46
2320: IFFALSE 2385
// begin for i in Teams do
2322: LD_ADDR_VAR 0 2
2326: PUSH
2327: LD_EXP 18
2331: PUSH
2332: FOR_IN
2333: IFFALSE 2383
// for j = 2 to i do
2335: LD_ADDR_VAR 0 3
2339: PUSH
2340: DOUBLE
2341: LD_INT 2
2343: DEC
2344: ST_TO_ADDR
2345: LD_VAR 0 2
2349: PUSH
2350: FOR_TO
2351: IFFALSE 2379
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2353: LD_VAR 0 2
2357: PUSH
2358: LD_VAR 0 3
2362: ARRAY
2363: PPUSH
2364: LD_VAR 0 2
2368: PUSH
2369: LD_INT 1
2371: ARRAY
2372: PPUSH
2373: CALL_OW 343
2377: GO 2350
2379: POP
2380: POP
2381: GO 2332
2383: POP
2384: POP
// end ; for i = 1 to 8 do
2385: LD_ADDR_VAR 0 2
2389: PUSH
2390: DOUBLE
2391: LD_INT 1
2393: DEC
2394: ST_TO_ADDR
2395: LD_INT 8
2397: PUSH
2398: FOR_TO
2399: IFFALSE 2489
// for j = 1 to 8 do
2401: LD_ADDR_VAR 0 3
2405: PUSH
2406: DOUBLE
2407: LD_INT 1
2409: DEC
2410: ST_TO_ADDR
2411: LD_INT 8
2413: PUSH
2414: FOR_TO
2415: IFFALSE 2485
// if Side_Teams [ i ] = Side_Teams [ j ] then
2417: LD_EXP 17
2421: PUSH
2422: LD_VAR 0 2
2426: ARRAY
2427: PUSH
2428: LD_EXP 17
2432: PUSH
2433: LD_VAR 0 3
2437: ARRAY
2438: EQUAL
2439: IFFALSE 2463
// SetAttitude ( i , j , att_friend , true ) else
2441: LD_VAR 0 2
2445: PPUSH
2446: LD_VAR 0 3
2450: PPUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 1
2456: PPUSH
2457: CALL_OW 80
2461: GO 2483
// SetAttitude ( i , j , att_enemy , true ) ;
2463: LD_VAR 0 2
2467: PPUSH
2468: LD_VAR 0 3
2472: PPUSH
2473: LD_INT 2
2475: PPUSH
2476: LD_INT 1
2478: PPUSH
2479: CALL_OW 80
2483: GO 2414
2485: POP
2486: POP
2487: GO 2398
2489: POP
2490: POP
// end ; end ;
2491: LD_VAR 0 1
2495: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2496: LD_INT 0
2498: PPUSH
2499: PPUSH
2500: PPUSH
2501: PPUSH
// result := [ ] ;
2502: LD_ADDR_VAR 0 7
2506: PUSH
2507: EMPTY
2508: ST_TO_ADDR
// for i := 1 to count do
2509: LD_ADDR_VAR 0 8
2513: PUSH
2514: DOUBLE
2515: LD_INT 1
2517: DEC
2518: ST_TO_ADDR
2519: LD_VAR 0 1
2523: PUSH
2524: FOR_TO
2525: IFFALSE 2943
// begin uc_direction := Rand ( 0 , 5 ) ;
2527: LD_ADDR_OWVAR 24
2531: PUSH
2532: LD_INT 0
2534: PPUSH
2535: LD_INT 5
2537: PPUSH
2538: CALL_OW 12
2542: ST_TO_ADDR
// if commander then
2543: LD_LOC 1
2547: IFFALSE 2656
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2549: LD_ADDR_OWVAR 26
2553: PUSH
2554: LD_OWVAR 19
2558: PUSH
2559: LD_OWVAR 20
2563: ARRAY
2564: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2565: LD_INT 1
2567: PPUSH
2568: LD_INT 2
2570: PPUSH
2571: CALL_OW 12
2575: PPUSH
2576: LD_VAR 0 2
2580: PPUSH
2581: LD_EXP 5
2585: PUSH
2586: LD_INT 2
2588: PLUS
2589: PPUSH
2590: CALL_OW 380
// hc_importance := 105 ;
2594: LD_ADDR_OWVAR 32
2598: PUSH
2599: LD_INT 105
2601: ST_TO_ADDR
// commander := false ;
2602: LD_ADDR_LOC 1
2606: PUSH
2607: LD_INT 0
2609: ST_TO_ADDR
// if Multiplayer then
2610: LD_OWVAR 4
2614: IFFALSE 2654
// begin hc_gallery := MULTIAVATARS ;
2616: LD_ADDR_OWVAR 33
2620: PUSH
2621: LD_STRING MULTIAVATARS
2623: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2624: LD_ADDR_OWVAR 34
2628: PUSH
2629: LD_OWVAR 20
2633: PPUSH
2634: CALL_OW 525
2638: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2639: LD_ADDR_OWVAR 27
2643: PUSH
2644: LD_OWVAR 20
2648: PPUSH
2649: CALL_OW 526
2653: ST_TO_ADDR
// end ; end else
2654: GO 2719
// begin hc_name :=  ;
2656: LD_ADDR_OWVAR 26
2660: PUSH
2661: LD_STRING 
2663: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2664: LD_INT 1
2666: PPUSH
2667: LD_INT 2
2669: PPUSH
2670: CALL_OW 12
2674: PPUSH
2675: LD_VAR 0 2
2679: PPUSH
2680: LD_EXP 5
2684: PPUSH
2685: CALL_OW 380
// hc_importance := 0 ;
2689: LD_ADDR_OWVAR 32
2693: PUSH
2694: LD_INT 0
2696: ST_TO_ADDR
// if Multiplayer then
2697: LD_OWVAR 4
2701: IFFALSE 2719
// begin hc_gallery :=  ;
2703: LD_ADDR_OWVAR 33
2707: PUSH
2708: LD_STRING 
2710: ST_TO_ADDR
// hc_face_number := 0 ;
2711: LD_ADDR_OWVAR 34
2715: PUSH
2716: LD_INT 0
2718: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2719: LD_ADDR_VAR 0 10
2723: PUSH
2724: CALL_OW 44
2728: ST_TO_ADDR
// if global_defined then
2729: LD_LOC 3
2733: IFFALSE 2873
// begin if ( cl = class_soldier ) then
2735: LD_VAR 0 2
2739: PUSH
2740: LD_INT 1
2742: EQUAL
2743: IFFALSE 2763
// j := i + soldiers_created else
2745: LD_ADDR_VAR 0 9
2749: PUSH
2750: LD_VAR 0 8
2754: PUSH
2755: LD_LOC 4
2759: PLUS
2760: ST_TO_ADDR
2761: GO 2773
// j := i ;
2763: LD_ADDR_VAR 0 9
2767: PUSH
2768: LD_VAR 0 8
2772: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2773: LD_LOC 2
2777: PUSH
2778: LD_VAR 0 2
2782: ARRAY
2783: PUSH
2784: LD_VAR 0 9
2788: ARRAY
2789: PPUSH
2790: LD_VAR 0 10
2794: PPUSH
2795: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2799: LD_VAR 0 10
2803: PPUSH
2804: LD_INT 2
2806: PPUSH
2807: LD_LOC 2
2811: PUSH
2812: LD_VAR 0 2
2816: ARRAY
2817: PUSH
2818: LD_VAR 0 9
2822: ARRAY
2823: PPUSH
2824: LD_INT 2
2826: PPUSH
2827: CALL_OW 260
2831: PPUSH
2832: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2836: LD_VAR 0 10
2840: PPUSH
2841: LD_INT 1
2843: PPUSH
2844: LD_LOC 2
2848: PUSH
2849: LD_VAR 0 2
2853: ARRAY
2854: PUSH
2855: LD_VAR 0 9
2859: ARRAY
2860: PPUSH
2861: LD_INT 1
2863: PPUSH
2864: CALL_OW 260
2868: PPUSH
2869: CALL_OW 239
// end ; if building then
2873: LD_VAR 0 6
2877: IFFALSE 2895
// PlaceHumanInUnit ( un , building ) else
2879: LD_VAR 0 10
2883: PPUSH
2884: LD_VAR 0 6
2888: PPUSH
2889: CALL_OW 52
2893: GO 2922
// PlaceUnitXYR ( un , x , y , r , false ) ;
2895: LD_VAR 0 10
2899: PPUSH
2900: LD_VAR 0 3
2904: PPUSH
2905: LD_VAR 0 4
2909: PPUSH
2910: LD_VAR 0 5
2914: PPUSH
2915: LD_INT 0
2917: PPUSH
2918: CALL_OW 50
// result := result ^ [ un ] ;
2922: LD_ADDR_VAR 0 7
2926: PUSH
2927: LD_VAR 0 7
2931: PUSH
2932: LD_VAR 0 10
2936: PUSH
2937: EMPTY
2938: LIST
2939: ADD
2940: ST_TO_ADDR
// end ;
2941: GO 2524
2943: POP
2944: POP
// if not global_defined then
2945: LD_LOC 3
2949: NOT
2950: IFFALSE 3028
// if ( global_units >= cl ) then
2952: LD_LOC 2
2956: PUSH
2957: LD_VAR 0 2
2961: GREATEREQUAL
2962: IFFALSE 3003
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2964: LD_ADDR_LOC 2
2968: PUSH
2969: LD_LOC 2
2973: PPUSH
2974: LD_VAR 0 2
2978: PPUSH
2979: LD_LOC 2
2983: PUSH
2984: LD_VAR 0 2
2988: ARRAY
2989: PUSH
2990: LD_VAR 0 7
2994: ADD
2995: PPUSH
2996: CALL_OW 1
3000: ST_TO_ADDR
3001: GO 3028
// global_units := Replace ( global_units , cl , result ) ;
3003: LD_ADDR_LOC 2
3007: PUSH
3008: LD_LOC 2
3012: PPUSH
3013: LD_VAR 0 2
3017: PPUSH
3018: LD_VAR 0 7
3022: PPUSH
3023: CALL_OW 1
3027: ST_TO_ADDR
// if commander then
3028: LD_LOC 1
3032: IFFALSE 3079
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3034: LD_ADDR_EXP 29
3038: PUSH
3039: LD_EXP 29
3043: PPUSH
3044: LD_OWVAR 20
3048: PPUSH
3049: LD_EXP 29
3053: PUSH
3054: LD_OWVAR 20
3058: ARRAY
3059: PUSH
3060: LD_VAR 0 10
3064: ADD
3065: PPUSH
3066: CALL_OW 1
3070: ST_TO_ADDR
// commander := false ;
3071: LD_ADDR_LOC 1
3075: PUSH
3076: LD_INT 0
3078: ST_TO_ADDR
// end ; end ;
3079: LD_VAR 0 7
3083: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3084: LD_INT 0
3086: PPUSH
3087: PPUSH
3088: PPUSH
3089: PPUSH
3090: PPUSH
3091: PPUSH
3092: PPUSH
3093: PPUSH
3094: PPUSH
// pos := Side_Positions [ side ] ;
3095: LD_ADDR_VAR 0 3
3099: PUSH
3100: LD_EXP 20
3104: PUSH
3105: LD_VAR 0 1
3109: ARRAY
3110: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3111: LD_ADDR_OWVAR 21
3115: PUSH
3116: LD_EXP 21
3120: PUSH
3121: LD_VAR 0 1
3125: ARRAY
3126: ST_TO_ADDR
// uc_side := side ;
3127: LD_ADDR_OWVAR 20
3131: PUSH
3132: LD_VAR 0 1
3136: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3137: LD_ADDR_VAR 0 4
3141: PUSH
3142: LD_EXP 25
3146: PUSH
3147: LD_VAR 0 3
3151: ARRAY
3152: PUSH
3153: LD_INT 1
3155: ARRAY
3156: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3157: LD_ADDR_VAR 0 5
3161: PUSH
3162: LD_EXP 25
3166: PUSH
3167: LD_VAR 0 3
3171: ARRAY
3172: PUSH
3173: LD_INT 2
3175: ARRAY
3176: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3177: LD_ADDR_VAR 0 6
3181: PUSH
3182: LD_EXP 25
3186: PUSH
3187: LD_VAR 0 3
3191: ARRAY
3192: PUSH
3193: LD_INT 3
3195: ARRAY
3196: ST_TO_ADDR
// if is_depot then
3197: LD_EXP 2
3201: IFFALSE 3334
// begin bc_type = b_depot ;
3203: LD_ADDR_OWVAR 42
3207: PUSH
3208: LD_INT 0
3210: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3211: LD_ADDR_VAR 0 10
3215: PUSH
3216: LD_VAR 0 4
3220: PPUSH
3221: LD_VAR 0 5
3225: PPUSH
3226: LD_VAR 0 6
3230: PPUSH
3231: CALL_OW 47
3235: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3236: LD_VAR 0 10
3240: PPUSH
3241: LD_STRING @
3243: PUSH
3244: LD_VAR 0 1
3248: STR
3249: PPUSH
3250: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3254: LD_VAR 0 10
3258: PPUSH
3259: CALL_OW 274
3263: PPUSH
3264: LD_INT 1
3266: PPUSH
3267: LD_EXP 7
3271: PUSH
3272: LD_INT 1
3274: ARRAY
3275: PPUSH
3276: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3280: LD_VAR 0 10
3284: PPUSH
3285: CALL_OW 274
3289: PPUSH
3290: LD_INT 2
3292: PPUSH
3293: LD_EXP 7
3297: PUSH
3298: LD_INT 2
3300: ARRAY
3301: PPUSH
3302: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3306: LD_VAR 0 10
3310: PPUSH
3311: CALL_OW 274
3315: PPUSH
3316: LD_INT 3
3318: PPUSH
3319: LD_EXP 7
3323: PUSH
3324: LD_INT 3
3326: ARRAY
3327: PPUSH
3328: CALL_OW 277
// end else
3332: GO 3478
// begin for i := 1 to 3 do
3334: LD_ADDR_VAR 0 7
3338: PUSH
3339: DOUBLE
3340: LD_INT 1
3342: DEC
3343: ST_TO_ADDR
3344: LD_INT 3
3346: PUSH
3347: FOR_TO
3348: IFFALSE 3476
// begin r := starting_resources [ i ] ;
3350: LD_ADDR_VAR 0 8
3354: PUSH
3355: LD_EXP 7
3359: PUSH
3360: LD_VAR 0 7
3364: ARRAY
3365: ST_TO_ADDR
// while r >= 10 do
3366: LD_VAR 0 8
3370: PUSH
3371: LD_INT 10
3373: GREATEREQUAL
3374: IFFALSE 3474
// if r > 50 then
3376: LD_VAR 0 8
3380: PUSH
3381: LD_INT 50
3383: GREATER
3384: IFFALSE 3430
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3386: LD_VAR 0 7
3390: PPUSH
3391: LD_INT 5
3393: PPUSH
3394: LD_VAR 0 4
3398: PPUSH
3399: LD_VAR 0 5
3403: PPUSH
3404: LD_INT 4
3406: PPUSH
3407: LD_INT 0
3409: PPUSH
3410: CALL_OW 60
// r := r - 50 ;
3414: LD_ADDR_VAR 0 8
3418: PUSH
3419: LD_VAR 0 8
3423: PUSH
3424: LD_INT 50
3426: MINUS
3427: ST_TO_ADDR
// end else
3428: GO 3472
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3430: LD_VAR 0 7
3434: PPUSH
3435: LD_VAR 0 8
3439: PUSH
3440: LD_INT 10
3442: DIV
3443: PPUSH
3444: LD_VAR 0 4
3448: PPUSH
3449: LD_VAR 0 5
3453: PPUSH
3454: LD_INT 4
3456: PPUSH
3457: LD_INT 0
3459: PPUSH
3460: CALL_OW 60
// r := 0 ;
3464: LD_ADDR_VAR 0 8
3468: PUSH
3469: LD_INT 0
3471: ST_TO_ADDR
// end ;
3472: GO 3366
// end ;
3474: GO 3347
3476: POP
3477: POP
// end ; for r in starting_crates do
3478: LD_ADDR_VAR 0 8
3482: PUSH
3483: LD_EXP 6
3487: PUSH
3488: FOR_IN
3489: IFFALSE 3521
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3491: LD_INT 1
3493: PPUSH
3494: LD_INT 5
3496: PPUSH
3497: LD_VAR 0 4
3501: PPUSH
3502: LD_VAR 0 5
3506: PPUSH
3507: LD_VAR 0 8
3511: PPUSH
3512: LD_INT 0
3514: PPUSH
3515: CALL_OW 60
3519: GO 3488
3521: POP
3522: POP
// if def_morale_flags then
3523: LD_EXP 47
3527: IFFALSE 3666
// begin x := start_def [ pos ] [ 1 ] ;
3529: LD_ADDR_VAR 0 4
3533: PUSH
3534: LD_EXP 27
3538: PUSH
3539: LD_VAR 0 3
3543: ARRAY
3544: PUSH
3545: LD_INT 1
3547: ARRAY
3548: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3549: LD_ADDR_VAR 0 5
3553: PUSH
3554: LD_EXP 27
3558: PUSH
3559: LD_VAR 0 3
3563: ARRAY
3564: PUSH
3565: LD_INT 2
3567: ARRAY
3568: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3569: LD_VAR 0 4
3573: PPUSH
3574: LD_VAR 0 5
3578: PPUSH
3579: LD_INT 12
3581: PPUSH
3582: LD_INT 2
3584: PPUSH
3585: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3589: LD_ADDR_EXP 28
3593: PUSH
3594: LD_EXP 28
3598: PUSH
3599: LD_VAR 0 1
3603: PPUSH
3604: LD_VAR 0 4
3608: PPUSH
3609: LD_VAR 0 5
3613: PPUSH
3614: LD_INT 1
3616: PUSH
3617: LD_INT 100
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: PUSH
3624: LD_INT 2
3626: PUSH
3627: LD_INT 50
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: PUSH
3634: LD_INT 3
3636: PUSH
3637: LD_INT 20
3639: PUSH
3640: EMPTY
3641: LIST
3642: LIST
3643: PUSH
3644: LD_INT 20
3646: PUSH
3647: LD_INT 100
3649: PUSH
3650: EMPTY
3651: LIST
3652: LIST
3653: PUSH
3654: EMPTY
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: PPUSH
3660: CALL_OW 418
3664: ADD
3665: ST_TO_ADDR
// end ; commander := true ;
3666: LD_ADDR_LOC 1
3670: PUSH
3671: LD_INT 1
3673: ST_TO_ADDR
// soldiers_created := 0 ;
3674: LD_ADDR_LOC 4
3678: PUSH
3679: LD_INT 0
3681: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3682: LD_ADDR_VAR 0 7
3686: PUSH
3687: DOUBLE
3688: LD_INT 1
3690: DEC
3691: ST_TO_ADDR
3692: LD_EXP 3
3696: PUSH
3697: FOR_TO
3698: IFFALSE 3851
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3700: LD_ADDR_VAR 0 4
3704: PUSH
3705: LD_EXP 26
3709: PUSH
3710: LD_VAR 0 3
3714: ARRAY
3715: PUSH
3716: LD_VAR 0 7
3720: ARRAY
3721: PUSH
3722: LD_INT 1
3724: ARRAY
3725: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3726: LD_ADDR_VAR 0 5
3730: PUSH
3731: LD_EXP 26
3735: PUSH
3736: LD_VAR 0 3
3740: ARRAY
3741: PUSH
3742: LD_VAR 0 7
3746: ARRAY
3747: PUSH
3748: LD_INT 2
3750: ARRAY
3751: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3752: LD_ADDR_VAR 0 6
3756: PUSH
3757: LD_EXP 26
3761: PUSH
3762: LD_VAR 0 3
3766: ARRAY
3767: PUSH
3768: LD_VAR 0 7
3772: ARRAY
3773: PUSH
3774: LD_INT 3
3776: ARRAY
3777: ST_TO_ADDR
// bc_type := b_breastwork ;
3778: LD_ADDR_OWVAR 42
3782: PUSH
3783: LD_INT 31
3785: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3786: LD_ADDR_VAR 0 9
3790: PUSH
3791: LD_VAR 0 4
3795: PPUSH
3796: LD_VAR 0 5
3800: PPUSH
3801: LD_VAR 0 6
3805: PPUSH
3806: CALL_OW 47
3810: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3811: LD_INT 1
3813: PPUSH
3814: LD_INT 1
3816: PPUSH
3817: LD_INT 0
3819: PPUSH
3820: LD_INT 0
3822: PPUSH
3823: LD_INT 0
3825: PPUSH
3826: LD_VAR 0 9
3830: PPUSH
3831: CALL 2496 0 6
// soldiers_created := soldiers_created + 1 ;
3835: LD_ADDR_LOC 4
3839: PUSH
3840: LD_LOC 4
3844: PUSH
3845: LD_INT 1
3847: PLUS
3848: ST_TO_ADDR
// end ;
3849: GO 3697
3851: POP
3852: POP
// x := start_def [ pos ] [ 1 ] ;
3853: LD_ADDR_VAR 0 4
3857: PUSH
3858: LD_EXP 27
3862: PUSH
3863: LD_VAR 0 3
3867: ARRAY
3868: PUSH
3869: LD_INT 1
3871: ARRAY
3872: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3873: LD_ADDR_VAR 0 5
3877: PUSH
3878: LD_EXP 27
3882: PUSH
3883: LD_VAR 0 3
3887: ARRAY
3888: PUSH
3889: LD_INT 2
3891: ARRAY
3892: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3893: LD_LOC 8
3897: PUSH
3898: LD_EXP 3
3902: MINUS
3903: PPUSH
3904: LD_INT 1
3906: PPUSH
3907: LD_VAR 0 4
3911: PPUSH
3912: LD_VAR 0 5
3916: PPUSH
3917: LD_INT 5
3919: PPUSH
3920: LD_INT 0
3922: PPUSH
3923: CALL 2496 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3927: LD_LOC 5
3931: PPUSH
3932: LD_INT 2
3934: PPUSH
3935: LD_VAR 0 4
3939: PPUSH
3940: LD_VAR 0 5
3944: PPUSH
3945: LD_INT 5
3947: PPUSH
3948: LD_INT 0
3950: PPUSH
3951: CALL 2496 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3955: LD_LOC 7
3959: PPUSH
3960: LD_INT 3
3962: PPUSH
3963: LD_VAR 0 4
3967: PPUSH
3968: LD_VAR 0 5
3972: PPUSH
3973: LD_INT 5
3975: PPUSH
3976: LD_INT 0
3978: PPUSH
3979: CALL 2496 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3983: LD_LOC 6
3987: PPUSH
3988: LD_INT 4
3990: PPUSH
3991: LD_VAR 0 4
3995: PPUSH
3996: LD_VAR 0 5
4000: PPUSH
4001: LD_INT 5
4003: PPUSH
4004: LD_INT 0
4006: PPUSH
4007: CALL 2496 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4011: LD_EXP 48
4015: PUSH
4016: LD_INT 20
4018: PPUSH
4019: LD_VAR 0 1
4023: PPUSH
4024: CALL_OW 321
4028: PUSH
4029: LD_INT 1
4031: EQUAL
4032: AND
4033: IFFALSE 4050
// SetTech ( tech_SibDet , side , state_researched ) ;
4035: LD_INT 20
4037: PPUSH
4038: LD_VAR 0 1
4042: PPUSH
4043: LD_INT 2
4045: PPUSH
4046: CALL_OW 322
// if def_siberite_bomb = 1 then
4050: LD_EXP 51
4054: PUSH
4055: LD_INT 1
4057: EQUAL
4058: IFFALSE 4092
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4060: LD_INT 25
4062: PPUSH
4063: LD_VAR 0 1
4067: PPUSH
4068: LD_INT 1
4070: PPUSH
4071: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4075: LD_INT 73
4077: PPUSH
4078: LD_VAR 0 1
4082: PPUSH
4083: LD_INT 1
4085: PPUSH
4086: CALL_OW 322
// end else
4090: GO 4122
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4092: LD_INT 25
4094: PPUSH
4095: LD_VAR 0 1
4099: PPUSH
4100: LD_INT 0
4102: PPUSH
4103: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4107: LD_INT 73
4109: PPUSH
4110: LD_VAR 0 1
4114: PPUSH
4115: LD_INT 0
4117: PPUSH
4118: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4122: LD_INT 24
4124: PPUSH
4125: LD_VAR 0 1
4129: PPUSH
4130: LD_INT 0
4132: PPUSH
4133: CALL_OW 322
// global_defined := true ;
4137: LD_ADDR_LOC 3
4141: PUSH
4142: LD_INT 1
4144: ST_TO_ADDR
// end ;
4145: LD_VAR 0 2
4149: RET
// every 0 0$1 do
4150: GO 4152
4152: DISABLE
// if ( def_siberite_bomb > 1 ) then
4153: LD_EXP 51
4157: PUSH
4158: LD_INT 1
4160: GREATER
4161: IFFALSE 4176
// begin wait ( siberite_bomb_Delay ) ;
4163: LD_EXP 12
4167: PPUSH
4168: CALL_OW 67
// EnableSibFiss ;
4172: CALL 4177 0 0
// end ;
4176: END
// function EnableSibFiss ; var i ; begin
4177: LD_INT 0
4179: PPUSH
4180: PPUSH
// for i := 1 to 8 do
4181: LD_ADDR_VAR 0 2
4185: PUSH
4186: DOUBLE
4187: LD_INT 1
4189: DEC
4190: ST_TO_ADDR
4191: LD_INT 8
4193: PUSH
4194: FOR_TO
4195: IFFALSE 4241
// if Side_Positions [ i ] then
4197: LD_EXP 20
4201: PUSH
4202: LD_VAR 0 2
4206: ARRAY
4207: IFFALSE 4239
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4209: LD_INT 25
4211: PPUSH
4212: LD_VAR 0 2
4216: PPUSH
4217: LD_INT 1
4219: PPUSH
4220: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4224: LD_INT 73
4226: PPUSH
4227: LD_VAR 0 2
4231: PPUSH
4232: LD_INT 1
4234: PPUSH
4235: CALL_OW 322
// end ;
4239: GO 4194
4241: POP
4242: POP
// end ;
4243: LD_VAR 0 1
4247: RET
// function prepare_sides ; var i ; begin
4248: LD_INT 0
4250: PPUSH
4251: PPUSH
// global_units := [ ] ;
4252: LD_ADDR_LOC 2
4256: PUSH
4257: EMPTY
4258: ST_TO_ADDR
// global_defined := false ;
4259: LD_ADDR_LOC 3
4263: PUSH
4264: LD_INT 0
4266: ST_TO_ADDR
// CountClassMembers ;
4267: CALL 4317 0 0
// for i := 1 to 8 do
4271: LD_ADDR_VAR 0 2
4275: PUSH
4276: DOUBLE
4277: LD_INT 1
4279: DEC
4280: ST_TO_ADDR
4281: LD_INT 8
4283: PUSH
4284: FOR_TO
4285: IFFALSE 4310
// if Side_Positions [ i ] then
4287: LD_EXP 20
4291: PUSH
4292: LD_VAR 0 2
4296: ARRAY
4297: IFFALSE 4308
// prepare_side ( i ) ;
4299: LD_VAR 0 2
4303: PPUSH
4304: CALL 3084 0 1
4308: GO 4284
4310: POP
4311: POP
// end ;
4312: LD_VAR 0 1
4316: RET
// function CountClassMembers ; var Mode ; begin
4317: LD_INT 0
4319: PPUSH
4320: PPUSH
// if No_Mechs then
4321: LD_EXP 53
4325: IFFALSE 4337
// Mode := 2 else
4327: LD_ADDR_VAR 0 2
4331: PUSH
4332: LD_INT 2
4334: ST_TO_ADDR
4335: GO 4345
// Mode := 1 ;
4337: LD_ADDR_VAR 0 2
4341: PUSH
4342: LD_INT 1
4344: ST_TO_ADDR
// neng := number_of_people ;
4345: LD_ADDR_LOC 5
4349: PUSH
4350: LD_EXP 4
4354: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4355: LD_ADDR_LOC 8
4359: PUSH
4360: LD_LOC 5
4364: PUSH
4365: LD_INT 4
4367: PUSH
4368: LD_INT 3
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: PUSH
4375: LD_VAR 0 2
4379: ARRAY
4380: DIV
4381: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4382: LD_LOC 8
4386: PUSH
4387: LD_EXP 3
4391: LESS
4392: IFFALSE 4404
// nsol := number_of_breastworks ;
4394: LD_ADDR_LOC 8
4398: PUSH
4399: LD_EXP 3
4403: ST_TO_ADDR
// neng := neng - nsol ;
4404: LD_ADDR_LOC 5
4408: PUSH
4409: LD_LOC 5
4413: PUSH
4414: LD_LOC 8
4418: MINUS
4419: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4420: LD_ADDR_LOC 6
4424: PUSH
4425: LD_LOC 5
4429: PUSH
4430: LD_INT 3
4432: PUSH
4433: LD_INT 2
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: PUSH
4440: LD_VAR 0 2
4444: ARRAY
4445: DIV
4446: ST_TO_ADDR
// if ( nsci < 1 ) then
4447: LD_LOC 6
4451: PUSH
4452: LD_INT 1
4454: LESS
4455: IFFALSE 4465
// nsci := 1 ;
4457: LD_ADDR_LOC 6
4461: PUSH
4462: LD_INT 1
4464: ST_TO_ADDR
// neng := neng - nsci ;
4465: LD_ADDR_LOC 5
4469: PUSH
4470: LD_LOC 5
4474: PUSH
4475: LD_LOC 6
4479: MINUS
4480: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4481: LD_ADDR_LOC 7
4485: PUSH
4486: LD_LOC 5
4490: PUSH
4491: LD_INT 2
4493: DIV
4494: PUSH
4495: LD_INT 0
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PUSH
4502: LD_VAR 0 2
4506: ARRAY
4507: ST_TO_ADDR
// neng := neng - nmech ;
4508: LD_ADDR_LOC 5
4512: PUSH
4513: LD_LOC 5
4517: PUSH
4518: LD_LOC 7
4522: MINUS
4523: ST_TO_ADDR
// if ( neng < 1 ) then
4524: LD_LOC 5
4528: PUSH
4529: LD_INT 1
4531: LESS
4532: IFFALSE 4542
// neng := 1 ;
4534: LD_ADDR_LOC 5
4538: PUSH
4539: LD_INT 1
4541: ST_TO_ADDR
// end ;
4542: LD_VAR 0 1
4546: RET
// starting begin disable ( 98 ) ;
4547: LD_INT 98
4549: DISABLE_MARKED
// disable ( 99 ) ;
4550: LD_INT 99
4552: DISABLE_MARKED
// disable ( 400 ) ;
4553: LD_INT 400
4555: DISABLE_MARKED
// disable ( 401 ) ;
4556: LD_INT 401
4558: DISABLE_MARKED
// disable ( 600 ) ;
4559: LD_INT 600
4561: DISABLE_MARKED
// mp_selectmsg := true ;
4562: LD_ADDR_OWVAR 13
4566: PUSH
4567: LD_INT 1
4569: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4570: CALL 68 0 0
// prepare_map_coordinates ;
4574: CALL 1721 0 0
// set_shared_visions_and_alliances ;
4578: CALL 2208 0 0
// ResetFog ;
4582: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4586: LD_OWVAR 2
4590: PPUSH
4591: CALL_OW 520
// prepare_sides ;
4595: CALL 4248 0 0
// Init_Win_Condition ;
4599: CALL 6946 0 0
// InitLimits ;
4603: CALL 11438 0 0
// ShowTimer ;
4607: CALL 12375 0 0
// init_shipments_and_respawning ;
4611: CALL 5748 0 0
// music_nat := Side_Nations [ your_side ] ;
4615: LD_ADDR_OWVAR 71
4619: PUSH
4620: LD_EXP 21
4624: PUSH
4625: LD_OWVAR 2
4629: ARRAY
4630: ST_TO_ADDR
// if IAmSpec or your_side in customSpectator then
4631: CALL_OW 531
4635: PUSH
4636: LD_OWVAR 2
4640: PUSH
4641: LD_EXP 24
4645: IN
4646: OR
4647: IFFALSE 4671
// begin fogoff ( true ) ;
4649: LD_INT 1
4651: PPUSH
4652: CALL_OW 344
// CenterNowOnXY ( 79 , 59 ) ;
4656: LD_INT 79
4658: PPUSH
4659: LD_INT 59
4661: PPUSH
4662: CALL_OW 86
// enable ( 400 ) ;
4666: LD_INT 400
4668: ENABLE_MARKED
// end else
4669: GO 4717
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4671: LD_EXP 27
4675: PUSH
4676: LD_EXP 20
4680: PUSH
4681: LD_OWVAR 2
4685: ARRAY
4686: ARRAY
4687: PUSH
4688: LD_INT 1
4690: ARRAY
4691: PPUSH
4692: LD_EXP 27
4696: PUSH
4697: LD_EXP 20
4701: PUSH
4702: LD_OWVAR 2
4706: ARRAY
4707: ARRAY
4708: PUSH
4709: LD_INT 2
4711: ARRAY
4712: PPUSH
4713: CALL_OW 86
// end ; InitApeman ;
4717: CALL 4923 0 0
// if def_builduptime then
4721: LD_EXP 52
4725: IFFALSE 4731
// BeginBuildUp ;
4727: CALL 12823 0 0
// end ; end_of_file
4731: END
// every 20 20$00 trigger apemanNumber do
4732: LD_EXP 30
4736: IFFALSE 4769
4738: GO 4740
4740: DISABLE
// begin enable ;
4741: ENABLE
// if apeLevel >= 8 then
4742: LD_EXP 35
4746: PUSH
4747: LD_INT 8
4749: GREATEREQUAL
4750: IFFALSE 4755
// disable else
4752: DISABLE
4753: GO 4769
// apeLevel := apeLevel + 1 ;
4755: LD_ADDR_EXP 35
4759: PUSH
4760: LD_EXP 35
4764: PUSH
4765: LD_INT 1
4767: PLUS
4768: ST_TO_ADDR
// end ;
4769: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
4770: LD_EXP 30
4774: PUSH
4775: LD_EXP 31
4779: LESS
4780: IFFALSE 4920
4782: GO 4784
4784: DISABLE
4785: LD_INT 0
4787: PPUSH
4788: PPUSH
4789: PPUSH
4790: PPUSH
// begin enable ;
4791: ENABLE
// for i := 1 to apemanPos do
4792: LD_ADDR_VAR 0 1
4796: PUSH
4797: DOUBLE
4798: LD_INT 1
4800: DEC
4801: ST_TO_ADDR
4802: LD_EXP 33
4806: PUSH
4807: FOR_TO
4808: IFFALSE 4918
// begin if apemanPlayerCount [ i ] then
4810: LD_EXP 34
4814: PUSH
4815: LD_VAR 0 1
4819: ARRAY
4820: IFFALSE 4916
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
4822: LD_EXP 34
4826: PUSH
4827: LD_VAR 0 1
4831: ARRAY
4832: PUSH
4833: LD_EXP 33
4837: PUSH
4838: LD_VAR 0 1
4842: ARRAY
4843: GREATER
4844: IFFALSE 4916
// begin ape := PrepareApeman ;
4846: LD_ADDR_VAR 0 2
4850: PUSH
4851: CALL 5423 0 0
4855: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
4856: LD_VAR 0 2
4860: PPUSH
4861: LD_EXP 36
4865: PUSH
4866: LD_VAR 0 1
4870: ARRAY
4871: PPUSH
4872: LD_INT 0
4874: PPUSH
4875: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
4879: LD_ADDR_EXP 33
4883: PUSH
4884: LD_EXP 33
4888: PPUSH
4889: LD_VAR 0 1
4893: PPUSH
4894: LD_EXP 33
4898: PUSH
4899: LD_VAR 0 1
4903: ARRAY
4904: PUSH
4905: LD_VAR 0 2
4909: UNION
4910: PPUSH
4911: CALL_OW 1
4915: ST_TO_ADDR
// end ; end ; end ;
4916: GO 4807
4918: POP
4919: POP
// end ;
4920: PPOPN 4
4922: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
4923: LD_INT 0
4925: PPUSH
4926: PPUSH
4927: PPUSH
4928: PPUSH
4929: PPUSH
4930: PPUSH
4931: PPUSH
// playersAmount := 0 ;
4932: LD_ADDR_VAR 0 3
4936: PUSH
4937: LD_INT 0
4939: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , ] ;
4940: LD_ADDR_VAR 0 7
4944: PUSH
4945: LD_INT 13
4947: PUSH
4948: LD_INT 14
4950: PUSH
4951: LD_INT 15
4953: PUSH
4954: LD_INT 16
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: LIST
4961: LIST
4962: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4963: LD_ADDR_EXP 36
4967: PUSH
4968: LD_INT 0
4970: PUSH
4971: LD_INT 0
4973: PUSH
4974: LD_INT 0
4976: PUSH
4977: LD_INT 0
4979: PUSH
4980: LD_INT 0
4982: PUSH
4983: LD_INT 0
4985: PUSH
4986: LD_INT 0
4988: PUSH
4989: LD_INT 0
4991: PUSH
4992: EMPTY
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: ST_TO_ADDR
// for j = 1 to Side_Positions do
5002: LD_ADDR_VAR 0 4
5006: PUSH
5007: DOUBLE
5008: LD_INT 1
5010: DEC
5011: ST_TO_ADDR
5012: LD_EXP 20
5016: PUSH
5017: FOR_TO
5018: IFFALSE 5085
// if Side_Positions [ j ] then
5020: LD_EXP 20
5024: PUSH
5025: LD_VAR 0 4
5029: ARRAY
5030: IFFALSE 5083
// begin playersAmount := playersAmount + 1 ;
5032: LD_ADDR_VAR 0 3
5036: PUSH
5037: LD_VAR 0 3
5041: PUSH
5042: LD_INT 1
5044: PLUS
5045: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5046: LD_ADDR_EXP 36
5050: PUSH
5051: LD_EXP 36
5055: PPUSH
5056: LD_VAR 0 4
5060: PPUSH
5061: LD_VAR 0 7
5065: PUSH
5066: LD_EXP 20
5070: PUSH
5071: LD_VAR 0 4
5075: ARRAY
5076: ARRAY
5077: PPUSH
5078: CALL_OW 1
5082: ST_TO_ADDR
// end ;
5083: GO 5017
5085: POP
5086: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5087: LD_ADDR_EXP 32
5091: PUSH
5092: LD_INT 3
5094: PUSH
5095: LD_EXP 13
5099: MUL
5100: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5101: LD_ADDR_EXP 30
5105: PUSH
5106: LD_VAR 0 3
5110: PUSH
5111: LD_EXP 32
5115: MUL
5116: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5117: LD_ADDR_EXP 31
5121: PUSH
5122: LD_EXP 30
5126: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5127: LD_ADDR_EXP 33
5131: PUSH
5132: LD_INT 0
5134: PUSH
5135: LD_INT 0
5137: PUSH
5138: LD_INT 0
5140: PUSH
5141: LD_INT 0
5143: PUSH
5144: LD_INT 0
5146: PUSH
5147: LD_INT 0
5149: PUSH
5150: LD_INT 0
5152: PUSH
5153: LD_INT 0
5155: PUSH
5156: EMPTY
5157: LIST
5158: LIST
5159: LIST
5160: LIST
5161: LIST
5162: LIST
5163: LIST
5164: LIST
5165: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5166: LD_ADDR_EXP 34
5170: PUSH
5171: LD_INT 0
5173: PUSH
5174: LD_INT 0
5176: PUSH
5177: LD_INT 0
5179: PUSH
5180: LD_INT 0
5182: PUSH
5183: LD_INT 0
5185: PUSH
5186: LD_INT 0
5188: PUSH
5189: LD_INT 0
5191: PUSH
5192: LD_INT 0
5194: PUSH
5195: EMPTY
5196: LIST
5197: LIST
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: ST_TO_ADDR
// apeLevel := 1 ;
5205: LD_ADDR_EXP 35
5209: PUSH
5210: LD_INT 1
5212: ST_TO_ADDR
// if not apemanNumber then
5213: LD_EXP 30
5217: NOT
5218: IFFALSE 5222
// exit ;
5220: GO 5418
// for i := 1 to apemanPerPlayer do
5222: LD_ADDR_VAR 0 2
5226: PUSH
5227: DOUBLE
5228: LD_INT 1
5230: DEC
5231: ST_TO_ADDR
5232: LD_EXP 32
5236: PUSH
5237: FOR_TO
5238: IFFALSE 5416
// begin for j := 1 to Side_Positions do
5240: LD_ADDR_VAR 0 4
5244: PUSH
5245: DOUBLE
5246: LD_INT 1
5248: DEC
5249: ST_TO_ADDR
5250: LD_EXP 20
5254: PUSH
5255: FOR_TO
5256: IFFALSE 5412
// if Side_Positions [ j ] then
5258: LD_EXP 20
5262: PUSH
5263: LD_VAR 0 4
5267: ARRAY
5268: IFFALSE 5410
// begin pos := Side_Positions [ j ] ;
5270: LD_ADDR_VAR 0 6
5274: PUSH
5275: LD_EXP 20
5279: PUSH
5280: LD_VAR 0 4
5284: ARRAY
5285: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5286: LD_ADDR_EXP 34
5290: PUSH
5291: LD_EXP 34
5295: PPUSH
5296: LD_VAR 0 4
5300: PPUSH
5301: LD_EXP 34
5305: PUSH
5306: LD_VAR 0 4
5310: ARRAY
5311: PUSH
5312: LD_INT 1
5314: PLUS
5315: PPUSH
5316: CALL_OW 1
5320: ST_TO_ADDR
// ape := PrepareApeman ;
5321: LD_ADDR_VAR 0 5
5325: PUSH
5326: CALL 5423 0 0
5330: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5331: LD_ADDR_EXP 33
5335: PUSH
5336: LD_EXP 33
5340: PPUSH
5341: LD_VAR 0 4
5345: PPUSH
5346: LD_EXP 33
5350: PUSH
5351: LD_VAR 0 4
5355: ARRAY
5356: PPUSH
5357: LD_EXP 33
5361: PUSH
5362: LD_VAR 0 4
5366: ARRAY
5367: PUSH
5368: LD_INT 1
5370: PLUS
5371: PPUSH
5372: LD_VAR 0 5
5376: PPUSH
5377: CALL_OW 1
5381: PPUSH
5382: CALL_OW 1
5386: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5387: LD_VAR 0 5
5391: PPUSH
5392: LD_EXP 36
5396: PUSH
5397: LD_VAR 0 4
5401: ARRAY
5402: PPUSH
5403: LD_INT 0
5405: PPUSH
5406: CALL_OW 49
// end ;
5410: GO 5255
5412: POP
5413: POP
// end ;
5414: GO 5237
5416: POP
5417: POP
// end ;
5418: LD_VAR 0 1
5422: RET
// export function PrepareApeman ; var bonus ; begin
5423: LD_INT 0
5425: PPUSH
5426: PPUSH
// uc_side := 0 ;
5427: LD_ADDR_OWVAR 20
5431: PUSH
5432: LD_INT 0
5434: ST_TO_ADDR
// uc_nation := 0 ;
5435: LD_ADDR_OWVAR 21
5439: PUSH
5440: LD_INT 0
5442: ST_TO_ADDR
// InitHc ;
5443: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
5447: LD_ADDR_VAR 0 2
5451: PUSH
5452: LD_INT 1
5454: NEG
5455: PUSH
5456: LD_INT 0
5458: PUSH
5459: LD_INT 1
5461: PUSH
5462: EMPTY
5463: LIST
5464: LIST
5465: LIST
5466: PUSH
5467: LD_OWVAR 1
5471: PUSH
5472: LD_INT 3
5474: MOD
5475: PUSH
5476: LD_INT 1
5478: PLUS
5479: ARRAY
5480: ST_TO_ADDR
// hc_class := class_apeman ;
5481: LD_ADDR_OWVAR 28
5485: PUSH
5486: LD_INT 12
5488: ST_TO_ADDR
// hc_gallery :=  ;
5489: LD_ADDR_OWVAR 33
5493: PUSH
5494: LD_STRING 
5496: ST_TO_ADDR
// hc_name :=  ;
5497: LD_ADDR_OWVAR 26
5501: PUSH
5502: LD_STRING 
5504: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
5505: LD_ADDR_OWVAR 31
5509: PUSH
5510: LD_EXP 35
5514: PUSH
5515: LD_VAR 0 2
5519: PLUS
5520: PUSH
5521: LD_EXP 35
5525: PUSH
5526: LD_VAR 0 2
5530: PLUS
5531: PUSH
5532: LD_EXP 35
5536: PUSH
5537: LD_VAR 0 2
5541: PLUS
5542: PUSH
5543: LD_EXP 35
5547: PUSH
5548: LD_VAR 0 2
5552: PLUS
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
5560: LD_ADDR_OWVAR 35
5564: PUSH
5565: LD_INT 10
5567: PUSH
5568: LD_VAR 0 2
5572: MUL
5573: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5574: LD_ADDR_OWVAR 29
5578: PUSH
5579: LD_INT 12
5581: PUSH
5582: LD_INT 10
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: ST_TO_ADDR
// result := CreateHuman ;
5589: LD_ADDR_VAR 0 1
5593: PUSH
5594: CALL_OW 44
5598: ST_TO_ADDR
// end ;
5599: LD_VAR 0 1
5603: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
5604: LD_INT 0
5606: PPUSH
5607: PPUSH
5608: PPUSH
// if not ape then
5609: LD_VAR 0 1
5613: NOT
5614: IFFALSE 5618
// exit ;
5616: GO 5743
// side := GetSide ( ape ) ;
5618: LD_ADDR_VAR 0 3
5622: PUSH
5623: LD_VAR 0 1
5627: PPUSH
5628: CALL_OW 255
5632: ST_TO_ADDR
// if not side then
5633: LD_VAR 0 3
5637: NOT
5638: IFFALSE 5692
// begin for i = 1 to apemanPos do
5640: LD_ADDR_VAR 0 4
5644: PUSH
5645: DOUBLE
5646: LD_INT 1
5648: DEC
5649: ST_TO_ADDR
5650: LD_EXP 33
5654: PUSH
5655: FOR_TO
5656: IFFALSE 5690
// if ape in apemanPos [ i ] then
5658: LD_VAR 0 1
5662: PUSH
5663: LD_EXP 33
5667: PUSH
5668: LD_VAR 0 4
5672: ARRAY
5673: IN
5674: IFFALSE 5688
// begin side := i ;
5676: LD_ADDR_VAR 0 3
5680: PUSH
5681: LD_VAR 0 4
5685: ST_TO_ADDR
// break ;
5686: GO 5690
// end ;
5688: GO 5655
5690: POP
5691: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
5692: LD_ADDR_EXP 33
5696: PUSH
5697: LD_EXP 33
5701: PPUSH
5702: LD_VAR 0 3
5706: PPUSH
5707: LD_EXP 33
5711: PUSH
5712: LD_VAR 0 3
5716: ARRAY
5717: PUSH
5718: LD_VAR 0 1
5722: DIFF
5723: PPUSH
5724: CALL_OW 1
5728: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
5729: LD_ADDR_EXP 30
5733: PUSH
5734: LD_EXP 30
5738: PUSH
5739: LD_INT 1
5741: MINUS
5742: ST_TO_ADDR
// end ; end_of_file
5743: LD_VAR 0 2
5747: RET
// var shipment , respawn , inqueue ; export function init_shipments_and_respawning ; begin
5748: LD_INT 0
5750: PPUSH
// shipment := Rand ( 0 , 3 ) ;
5751: LD_ADDR_LOC 9
5755: PUSH
5756: LD_INT 0
5758: PPUSH
5759: LD_INT 3
5761: PPUSH
5762: CALL_OW 12
5766: ST_TO_ADDR
// respawn := Rand ( 1 , 8 ) ;
5767: LD_ADDR_LOC 10
5771: PUSH
5772: LD_INT 1
5774: PPUSH
5775: LD_INT 8
5777: PPUSH
5778: CALL_OW 12
5782: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5783: LD_ADDR_LOC 11
5787: PUSH
5788: LD_INT 0
5790: PUSH
5791: LD_INT 0
5793: PUSH
5794: LD_INT 0
5796: PUSH
5797: LD_INT 0
5799: PUSH
5800: LD_INT 0
5802: PUSH
5803: LD_INT 0
5805: PUSH
5806: LD_INT 0
5808: PUSH
5809: LD_INT 0
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: LIST
5816: LIST
5817: LIST
5818: LIST
5819: LIST
5820: LIST
5821: ST_TO_ADDR
// end ;
5822: LD_VAR 0 1
5826: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
5827: GO 5829
5829: DISABLE
5830: LD_INT 0
5832: PPUSH
5833: PPUSH
5834: PPUSH
5835: PPUSH
// begin if respawning_time_max = 0 then
5836: LD_EXP 11
5840: PUSH
5841: LD_INT 0
5843: EQUAL
5844: IFFALSE 5848
// exit ;
5846: GO 6355
// if respawn = 8 then
5848: LD_LOC 10
5852: PUSH
5853: LD_INT 8
5855: EQUAL
5856: IFFALSE 5868
// respawn := 1 else
5858: LD_ADDR_LOC 10
5862: PUSH
5863: LD_INT 1
5865: ST_TO_ADDR
5866: GO 5882
// respawn := respawn + 1 ;
5868: LD_ADDR_LOC 10
5872: PUSH
5873: LD_LOC 10
5877: PUSH
5878: LD_INT 1
5880: PLUS
5881: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
5882: LD_EXP 20
5886: PUSH
5887: LD_LOC 10
5891: ARRAY
5892: PUSH
5893: LD_LOC 11
5897: PUSH
5898: LD_LOC 10
5902: ARRAY
5903: NOT
5904: AND
5905: IFFALSE 6354
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
5907: LD_ADDR_VAR 0 1
5911: PUSH
5912: LD_INT 21
5914: PUSH
5915: LD_INT 1
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: PUSH
5922: LD_INT 22
5924: PUSH
5925: LD_LOC 10
5929: PUSH
5930: EMPTY
5931: LIST
5932: LIST
5933: PUSH
5934: LD_INT 3
5936: PUSH
5937: LD_INT 23
5939: PUSH
5940: LD_INT 0
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PUSH
5947: EMPTY
5948: LIST
5949: LIST
5950: LIST
5951: LIST
5952: PPUSH
5953: CALL_OW 69
5957: ST_TO_ADDR
// if n < number_of_people then
5958: LD_VAR 0 1
5962: PUSH
5963: LD_EXP 4
5967: LESS
5968: IFFALSE 6351
// begin aktresp := respawn ;
5970: LD_ADDR_VAR 0 3
5974: PUSH
5975: LD_LOC 10
5979: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
5980: LD_ADDR_LOC 11
5984: PUSH
5985: LD_LOC 11
5989: PPUSH
5990: LD_VAR 0 3
5994: PPUSH
5995: LD_INT 1
5997: PPUSH
5998: CALL_OW 1
6002: ST_TO_ADDR
// enable ;
6003: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
6004: LD_EXP 10
6008: PPUSH
6009: LD_EXP 11
6013: PPUSH
6014: CALL_OW 12
6018: PPUSH
6019: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
6023: LD_ADDR_LOC 11
6027: PUSH
6028: LD_LOC 11
6032: PPUSH
6033: LD_VAR 0 3
6037: PPUSH
6038: LD_INT 0
6040: PPUSH
6041: CALL_OW 1
6045: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
6046: LD_ADDR_VAR 0 2
6050: PUSH
6051: LD_INT 21
6053: PUSH
6054: LD_INT 3
6056: PUSH
6057: EMPTY
6058: LIST
6059: LIST
6060: PUSH
6061: LD_INT 2
6063: PUSH
6064: LD_INT 30
6066: PUSH
6067: LD_INT 0
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PUSH
6074: LD_INT 30
6076: PUSH
6077: LD_INT 1
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: LIST
6088: PUSH
6089: LD_INT 50
6091: PUSH
6092: EMPTY
6093: LIST
6094: PUSH
6095: LD_INT 22
6097: PUSH
6098: LD_VAR 0 3
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: PPUSH
6113: CALL_OW 69
6117: ST_TO_ADDR
// if building_list = 0 then
6118: LD_VAR 0 2
6122: PUSH
6123: LD_INT 0
6125: EQUAL
6126: IFFALSE 6171
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
6128: LD_ADDR_VAR 0 2
6132: PUSH
6133: LD_INT 21
6135: PUSH
6136: LD_INT 3
6138: PUSH
6139: EMPTY
6140: LIST
6141: LIST
6142: PUSH
6143: LD_INT 50
6145: PUSH
6146: EMPTY
6147: LIST
6148: PUSH
6149: LD_INT 22
6151: PUSH
6152: LD_VAR 0 3
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: LIST
6165: PPUSH
6166: CALL_OW 69
6170: ST_TO_ADDR
// if building_list = 0 then
6171: LD_VAR 0 2
6175: PUSH
6176: LD_INT 0
6178: EQUAL
6179: IFFALSE 6183
// exit ;
6181: GO 6355
// hc_name :=  ;
6183: LD_ADDR_OWVAR 26
6187: PUSH
6188: LD_STRING 
6190: ST_TO_ADDR
// hc_importance := 0 ;
6191: LD_ADDR_OWVAR 32
6195: PUSH
6196: LD_INT 0
6198: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6199: LD_INT 0
6201: PPUSH
6202: LD_INT 0
6204: PPUSH
6205: LD_EXP 5
6209: PUSH
6210: LD_INT 2
6212: DIV
6213: PPUSH
6214: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
6218: LD_ADDR_OWVAR 21
6222: PUSH
6223: LD_EXP 21
6227: PUSH
6228: LD_VAR 0 3
6232: ARRAY
6233: ST_TO_ADDR
// uc_side := aktresp ;
6234: LD_ADDR_OWVAR 20
6238: PUSH
6239: LD_VAR 0 3
6243: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
6244: LD_ADDR_VAR 0 4
6248: PUSH
6249: LD_VAR 0 2
6253: PUSH
6254: LD_INT 1
6256: PPUSH
6257: LD_VAR 0 2
6261: PUSH
6262: LD_INT 0
6264: PLUS
6265: PPUSH
6266: CALL_OW 12
6270: ARRAY
6271: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
6272: LD_VAR 0 4
6276: PPUSH
6277: CALL_OW 266
6281: PUSH
6282: LD_INT 0
6284: PUSH
6285: LD_INT 1
6287: PUSH
6288: EMPTY
6289: LIST
6290: LIST
6291: IN
6292: IFFALSE 6304
// n = 25 else
6294: LD_ADDR_VAR 0 1
6298: PUSH
6299: LD_INT 25
6301: ST_TO_ADDR
6302: GO 6312
// n = 10 ;
6304: LD_ADDR_VAR 0 1
6308: PUSH
6309: LD_INT 10
6311: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
6312: CALL_OW 44
6316: PPUSH
6317: LD_VAR 0 4
6321: PPUSH
6322: CALL_OW 250
6326: PPUSH
6327: LD_VAR 0 4
6331: PPUSH
6332: CALL_OW 251
6336: PPUSH
6337: LD_VAR 0 1
6341: PPUSH
6342: LD_INT 1
6344: PPUSH
6345: CALL_OW 50
// end else
6349: GO 6352
// enable ;
6351: ENABLE
// end else
6352: GO 6355
// enable ;
6354: ENABLE
// end ;
6355: PPOPN 4
6357: END
// every 0 0$5 + 0 0$1.1 do var d ;
6358: GO 6360
6360: DISABLE
6361: LD_INT 0
6363: PPUSH
// begin case tick of 1 .. 1 1$0 :
6364: LD_OWVAR 1
6368: PUSH
6369: LD_INT 1
6371: DOUBLE
6372: GREATEREQUAL
6373: IFFALSE 6381
6375: LD_INT 2100
6377: DOUBLE
6378: LESSEQUAL
6379: IFTRUE 6383
6381: GO 6394
6383: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
6384: LD_ADDR_VAR 0 1
6388: PUSH
6389: LD_INT 150
6391: ST_TO_ADDR
6392: GO 6577
6394: LD_INT 2100
6396: PUSH
6397: LD_INT 1
6399: PLUS
6400: DOUBLE
6401: GREATEREQUAL
6402: IFFALSE 6410
6404: LD_INT 10500
6406: DOUBLE
6407: LESSEQUAL
6408: IFTRUE 6412
6410: GO 6423
6412: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
6413: LD_ADDR_VAR 0 1
6417: PUSH
6418: LD_INT 100
6420: ST_TO_ADDR
6421: GO 6577
6423: LD_INT 10500
6425: PUSH
6426: LD_INT 1
6428: PLUS
6429: DOUBLE
6430: GREATEREQUAL
6431: IFFALSE 6439
6433: LD_INT 21000
6435: DOUBLE
6436: LESSEQUAL
6437: IFTRUE 6441
6439: GO 6452
6441: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
6442: LD_ADDR_VAR 0 1
6446: PUSH
6447: LD_INT 90
6449: ST_TO_ADDR
6450: GO 6577
6452: LD_INT 21000
6454: PUSH
6455: LD_INT 1
6457: PLUS
6458: DOUBLE
6459: GREATEREQUAL
6460: IFFALSE 6468
6462: LD_INT 42000
6464: DOUBLE
6465: LESSEQUAL
6466: IFTRUE 6470
6468: GO 6481
6470: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
6471: LD_ADDR_VAR 0 1
6475: PUSH
6476: LD_INT 70
6478: ST_TO_ADDR
6479: GO 6577
6481: LD_INT 42000
6483: PUSH
6484: LD_INT 1
6486: PLUS
6487: DOUBLE
6488: GREATEREQUAL
6489: IFFALSE 6497
6491: LD_INT 63000
6493: DOUBLE
6494: LESSEQUAL
6495: IFTRUE 6499
6497: GO 6510
6499: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
6500: LD_ADDR_VAR 0 1
6504: PUSH
6505: LD_INT 60
6507: ST_TO_ADDR
6508: GO 6577
6510: LD_INT 63000
6512: PUSH
6513: LD_INT 1
6515: PLUS
6516: DOUBLE
6517: GREATEREQUAL
6518: IFFALSE 6526
6520: LD_INT 105000
6522: DOUBLE
6523: LESSEQUAL
6524: IFTRUE 6528
6526: GO 6539
6528: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
6529: LD_ADDR_VAR 0 1
6533: PUSH
6534: LD_INT 35
6536: ST_TO_ADDR
6537: GO 6577
6539: LD_INT 105000
6541: PUSH
6542: LD_INT 1
6544: PLUS
6545: DOUBLE
6546: GREATEREQUAL
6547: IFFALSE 6555
6549: LD_INT 630000
6551: DOUBLE
6552: LESSEQUAL
6553: IFTRUE 6557
6555: GO 6568
6557: POP
// d := 20 ; else
6558: LD_ADDR_VAR 0 1
6562: PUSH
6563: LD_INT 20
6565: ST_TO_ADDR
6566: GO 6577
6568: POP
// d := 0 ; end ;
6569: LD_ADDR_VAR 0 1
6573: PUSH
6574: LD_INT 0
6576: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
6577: LD_INT 1
6579: PPUSH
6580: LD_INT 10000
6582: PPUSH
6583: CALL_OW 12
6587: PUSH
6588: LD_VAR 0 1
6592: PUSH
6593: LD_EXP 8
6597: MUL
6598: LESSEQUAL
6599: IFFALSE 6653
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
6601: LD_INT 1
6603: PPUSH
6604: LD_INT 140
6606: PPUSH
6607: CALL_OW 12
6611: PPUSH
6612: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
6616: LD_ADDR_LOC 9
6620: PUSH
6621: LD_LOC 9
6625: PUSH
6626: LD_INT 1
6628: PLUS
6629: PUSH
6630: LD_INT 4
6632: MOD
6633: ST_TO_ADDR
// CreateCratesArea ( 5 , q1 + shipment , true ) ;
6634: LD_INT 5
6636: PPUSH
6637: LD_INT 4
6639: PUSH
6640: LD_LOC 9
6644: PLUS
6645: PPUSH
6646: LD_INT 1
6648: PPUSH
6649: CALL_OW 55
// end ; enable ;
6653: ENABLE
// end ; end_of_file
6654: PPOPN 1
6656: END
// var activated ; var hadziove ; every 0 0$1 do
6657: GO 6659
6659: DISABLE
// begin wait ( Rand ( 3 3$0 , 10 10$0 ) ) ;
6660: LD_INT 6300
6662: PPUSH
6663: LD_INT 21000
6665: PPUSH
6666: CALL_OW 12
6670: PPUSH
6671: CALL_OW 67
// SetAreaMapShow ( Tree , 1 ) ;
6675: LD_INT 3
6677: PPUSH
6678: LD_INT 1
6680: PPUSH
6681: CALL_OW 424
// activated := true ;
6685: LD_ADDR_LOC 12
6689: PUSH
6690: LD_INT 1
6692: ST_TO_ADDR
// end ;
6693: END
// every 0 0$1 trigger activated do var i , un ;
6694: LD_LOC 12
6698: IFFALSE 6943
6700: GO 6702
6702: DISABLE
6703: LD_INT 0
6705: PPUSH
6706: PPUSH
// begin if not def_tree_function then
6707: LD_EXP 1
6711: NOT
6712: IFFALSE 6716
// exit ;
6714: GO 6943
// ExtraStrings := [ #MultiSmall-Tree & def_tree_function ] ;
6716: LD_ADDR_EXP 54
6720: PUSH
6721: LD_STRING #MultiSmall-Tree
6723: PUSH
6724: LD_EXP 1
6728: STR
6729: PUSH
6730: EMPTY
6731: LIST
6732: ST_TO_ADDR
// for un in FilterUnitsInArea ( Tree , [ f_type , unit_human ] ) diff hadziove do
6733: LD_ADDR_VAR 0 2
6737: PUSH
6738: LD_INT 3
6740: PPUSH
6741: LD_INT 21
6743: PUSH
6744: LD_INT 1
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: PPUSH
6751: CALL_OW 70
6755: PUSH
6756: LD_LOC 13
6760: DIFF
6761: PUSH
6762: FOR_IN
6763: IFFALSE 6924
// begin if GetClass ( un ) in [ class_soldier , class_engineer , class_mechanic , class_scientistic , class_sniper , class_bazooker , class_mortar ] then
6765: LD_VAR 0 2
6769: PPUSH
6770: CALL_OW 257
6774: PUSH
6775: LD_INT 1
6777: PUSH
6778: LD_INT 2
6780: PUSH
6781: LD_INT 3
6783: PUSH
6784: LD_INT 4
6786: PUSH
6787: LD_INT 5
6789: PUSH
6790: LD_INT 9
6792: PUSH
6793: LD_INT 8
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: LIST
6800: LIST
6801: LIST
6802: LIST
6803: LIST
6804: IN
6805: IFFALSE 6854
// for i := 1 to 4 do
6807: LD_ADDR_VAR 0 1
6811: PUSH
6812: DOUBLE
6813: LD_INT 1
6815: DEC
6816: ST_TO_ADDR
6817: LD_INT 4
6819: PUSH
6820: FOR_TO
6821: IFFALSE 6850
// GiveSkillBonus ( un , i , tree_function [ i ] ) else
6823: LD_VAR 0 2
6827: PPUSH
6828: LD_VAR 0 1
6832: PPUSH
6833: LD_EXP 14
6837: PUSH
6838: LD_VAR 0 1
6842: ARRAY
6843: PPUSH
6844: CALL_OW 238
6848: GO 6820
6850: POP
6851: POP
6852: GO 6922
// if un in [ class_apeman , class_apeman_engineer , class_apeman_kamikaze , class_apeman_soldier ] then
6854: LD_VAR 0 2
6858: PUSH
6859: LD_INT 12
6861: PUSH
6862: LD_INT 16
6864: PUSH
6865: LD_INT 17
6867: PUSH
6868: LD_INT 15
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: IN
6877: IFFALSE 6922
// for i := 1 to 4 do
6879: LD_ADDR_VAR 0 1
6883: PUSH
6884: DOUBLE
6885: LD_INT 1
6887: DEC
6888: ST_TO_ADDR
6889: LD_INT 4
6891: PUSH
6892: FOR_TO
6893: IFFALSE 6920
// GiveSkillBonus ( un , i , tree_function [ 5 ] ) ;
6895: LD_VAR 0 2
6899: PPUSH
6900: LD_VAR 0 1
6904: PPUSH
6905: LD_EXP 14
6909: PUSH
6910: LD_INT 5
6912: ARRAY
6913: PPUSH
6914: CALL_OW 238
6918: GO 6892
6920: POP
6921: POP
// end ;
6922: GO 6762
6924: POP
6925: POP
// hadziove := hadziove ^ un ;
6926: LD_ADDR_LOC 13
6930: PUSH
6931: LD_LOC 13
6935: PUSH
6936: LD_VAR 0 2
6940: ADD
6941: ST_TO_ADDR
// enable ;
6942: ENABLE
// end ; end_of_file
6943: PPOPN 2
6945: END
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
6946: LD_INT 0
6948: PPUSH
6949: PPUSH
// enable ( 98 ) ;
6950: LD_INT 98
6952: ENABLE_MARKED
// GameEnded = false ;
6953: LD_ADDR_LOC 15
6957: PUSH
6958: LD_INT 0
6960: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6961: LD_ADDR_LOC 14
6965: PUSH
6966: LD_INT 0
6968: PUSH
6969: LD_INT 0
6971: PUSH
6972: LD_INT 0
6974: PUSH
6975: LD_INT 0
6977: PUSH
6978: LD_INT 0
6980: PUSH
6981: LD_INT 0
6983: PUSH
6984: LD_INT 0
6986: PUSH
6987: LD_INT 0
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: ST_TO_ADDR
// unfoged = false ;
7000: LD_ADDR_LOC 16
7004: PUSH
7005: LD_INT 0
7007: ST_TO_ADDR
// for i = 1 to side_positions do
7008: LD_ADDR_VAR 0 2
7012: PUSH
7013: DOUBLE
7014: LD_INT 1
7016: DEC
7017: ST_TO_ADDR
7018: LD_EXP 20
7022: PUSH
7023: FOR_TO
7024: IFFALSE 7064
// if not side_positions [ i ] then
7026: LD_EXP 20
7030: PUSH
7031: LD_VAR 0 2
7035: ARRAY
7036: NOT
7037: IFFALSE 7062
// defaited = replace ( defaited , i , true ) ;
7039: LD_ADDR_LOC 14
7043: PUSH
7044: LD_LOC 14
7048: PPUSH
7049: LD_VAR 0 2
7053: PPUSH
7054: LD_INT 1
7056: PPUSH
7057: CALL_OW 1
7061: ST_TO_ADDR
7062: GO 7023
7064: POP
7065: POP
// end ;
7066: LD_VAR 0 1
7070: RET
// function CanWinLoose ; begin
7071: LD_INT 0
7073: PPUSH
// Result := true ;
7074: LD_ADDR_VAR 0 1
7078: PUSH
7079: LD_INT 1
7081: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
7082: CALL_OW 518
7086: PUSH
7087: CALL_OW 519
7091: PUSH
7092: LD_INT 0
7094: GREATER
7095: AND
7096: IFFALSE 7106
// Result := false ;
7098: LD_ADDR_VAR 0 1
7102: PUSH
7103: LD_INT 0
7105: ST_TO_ADDR
// if IAmSpec or your_side in customSpectator and PlayerCount > 1 then
7106: CALL_OW 531
7110: PUSH
7111: LD_OWVAR 2
7115: PUSH
7116: LD_EXP 24
7120: IN
7121: PUSH
7122: CALL_OW 519
7126: PUSH
7127: LD_INT 1
7129: GREATER
7130: AND
7131: OR
7132: IFFALSE 7142
// Result := false ;
7134: LD_ADDR_VAR 0 1
7138: PUSH
7139: LD_INT 0
7141: ST_TO_ADDR
// end ;
7142: LD_VAR 0 1
7146: RET
// export function HasPower ( i ) ; var k , h ; begin
7147: LD_INT 0
7149: PPUSH
7150: PPUSH
7151: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
7152: LD_VAR 0 1
7156: PPUSH
7157: CALL_OW 108
7161: NOT
7162: PUSH
7163: LD_EXP 19
7167: PUSH
7168: LD_VAR 0 1
7172: ARRAY
7173: NOT
7174: AND
7175: PUSH
7176: LD_OWVAR 4
7180: AND
7181: IFFALSE 7193
// begin result = false ;
7183: LD_ADDR_VAR 0 2
7187: PUSH
7188: LD_INT 0
7190: ST_TO_ADDR
// end else
7191: GO 7488
// case def_win_rules of 0 :
7193: LD_EXP 15
7197: PUSH
7198: LD_INT 0
7200: DOUBLE
7201: EQUAL
7202: IFTRUE 7206
7204: GO 7369
7206: POP
// if def_people_respawning then
7207: LD_EXP 49
7211: IFFALSE 7302
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
7213: LD_ADDR_VAR 0 2
7217: PUSH
7218: LD_INT 22
7220: PUSH
7221: LD_VAR 0 1
7225: PUSH
7226: EMPTY
7227: LIST
7228: LIST
7229: PUSH
7230: LD_INT 2
7232: PUSH
7233: LD_INT 21
7235: PUSH
7236: LD_INT 1
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 33
7245: PUSH
7246: LD_INT 3
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: LD_INT 33
7255: PUSH
7256: LD_INT 5
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: PUSH
7263: LD_INT 30
7265: PUSH
7266: LD_INT 0
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: PUSH
7273: LD_INT 30
7275: PUSH
7276: LD_INT 1
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PPUSH
7295: CALL_OW 69
7299: ST_TO_ADDR
7300: GO 7367
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
7302: LD_ADDR_VAR 0 2
7306: PUSH
7307: LD_INT 22
7309: PUSH
7310: LD_VAR 0 1
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: PUSH
7319: LD_INT 2
7321: PUSH
7322: LD_INT 21
7324: PUSH
7325: LD_INT 1
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PUSH
7332: LD_INT 33
7334: PUSH
7335: LD_INT 3
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: PUSH
7342: LD_INT 33
7344: PUSH
7345: LD_INT 5
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: PUSH
7352: EMPTY
7353: LIST
7354: LIST
7355: LIST
7356: LIST
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PPUSH
7362: CALL_OW 69
7366: ST_TO_ADDR
7367: GO 7488
7369: LD_INT 1
7371: DOUBLE
7372: EQUAL
7373: IFTRUE 7377
7375: GO 7416
7377: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
7378: LD_ADDR_VAR 0 2
7382: PUSH
7383: LD_INT 22
7385: PUSH
7386: LD_VAR 0 1
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: PUSH
7395: LD_INT 21
7397: PUSH
7398: LD_INT 1
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: PPUSH
7409: CALL_OW 69
7413: ST_TO_ADDR
7414: GO 7488
7416: LD_INT 2
7418: DOUBLE
7419: EQUAL
7420: IFTRUE 7424
7422: GO 7487
7424: POP
// begin h = false ;
7425: LD_ADDR_VAR 0 4
7429: PUSH
7430: LD_INT 0
7432: ST_TO_ADDR
// for k in heroes [ i ] do
7433: LD_ADDR_VAR 0 3
7437: PUSH
7438: LD_EXP 29
7442: PUSH
7443: LD_VAR 0 1
7447: ARRAY
7448: PUSH
7449: FOR_IN
7450: IFFALSE 7473
// if IsLive ( k ) then
7452: LD_VAR 0 3
7456: PPUSH
7457: CALL_OW 300
7461: IFFALSE 7471
// h = true ;
7463: LD_ADDR_VAR 0 4
7467: PUSH
7468: LD_INT 1
7470: ST_TO_ADDR
7471: GO 7449
7473: POP
7474: POP
// Result := h ;
7475: LD_ADDR_VAR 0 2
7479: PUSH
7480: LD_VAR 0 4
7484: ST_TO_ADDR
// end ; end ;
7485: GO 7488
7487: POP
// end ;
7488: LD_VAR 0 2
7492: RET
// function AlliedSides ( i , j ) ; begin
7493: LD_INT 0
7495: PPUSH
// Result := false ;
7496: LD_ADDR_VAR 0 3
7500: PUSH
7501: LD_INT 0
7503: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
7504: LD_VAR 0 1
7508: PPUSH
7509: LD_VAR 0 2
7513: PPUSH
7514: CALL_OW 81
7518: PUSH
7519: LD_INT 1
7521: EQUAL
7522: PUSH
7523: LD_VAR 0 2
7527: PPUSH
7528: LD_VAR 0 1
7532: PPUSH
7533: CALL_OW 81
7537: PUSH
7538: LD_INT 1
7540: EQUAL
7541: AND
7542: PUSH
7543: LD_VAR 0 1
7547: PPUSH
7548: CALL_OW 83
7552: AND
7553: PUSH
7554: LD_VAR 0 2
7558: PPUSH
7559: CALL_OW 83
7563: AND
7564: IFFALSE 7574
// Result := true ;
7566: LD_ADDR_VAR 0 3
7570: PUSH
7571: LD_INT 1
7573: ST_TO_ADDR
// end ;
7574: LD_VAR 0 3
7578: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
7579: CALL 7071 0 0
7583: PUSH
7584: LD_LOC 15
7588: NOT
7589: AND
7590: IFFALSE 7606
7592: GO 7594
7594: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
7595: LD_ADDR_EXP 55
7599: PUSH
7600: LD_STRING #Player-Ended
7602: PUSH
7603: EMPTY
7604: LIST
7605: ST_TO_ADDR
7606: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
7607: CALL 7071 0 0
7611: PUSH
7612: LD_LOC 15
7616: AND
7617: IFFALSE 7626
7619: GO 7621
7621: DISABLE
// YouLostInMultiplayer ;
7622: CALL_OW 107
7626: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
7627: CALL 7071 0 0
7631: NOT
7632: PUSH
7633: CALL_OW 531
7637: NOT
7638: AND
7639: IFFALSE 7655
7641: GO 7643
7643: DISABLE
// WaitServerStrings = [ #server-wait ] ;
7644: LD_ADDR_EXP 55
7648: PUSH
7649: LD_STRING #server-wait
7651: PUSH
7652: EMPTY
7653: LIST
7654: ST_TO_ADDR
7655: END
// every 100 trigger IAmSpec do
7656: CALL_OW 531
7660: IFFALSE 7676
7662: GO 7664
7664: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
7665: LD_ADDR_EXP 55
7669: PUSH
7670: LD_STRING #Player-IAmSpec
7672: PUSH
7673: EMPTY
7674: LIST
7675: ST_TO_ADDR
7676: END
// every 100 trigger GameEnded and ( IAmSpec or your_side in customSpectator ) do
7677: LD_LOC 15
7681: PUSH
7682: CALL_OW 531
7686: PUSH
7687: LD_OWVAR 2
7691: PUSH
7692: LD_EXP 24
7696: IN
7697: OR
7698: AND
7699: IFFALSE 7708
7701: GO 7703
7703: DISABLE
// YouLostInMultiplayer ;
7704: CALL_OW 107
7708: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
7709: CALL 7071 0 0
7713: PUSH
7714: LD_LOC 15
7718: NOT
7719: AND
7720: IFFALSE 7736
7722: GO 7724
7724: DISABLE
// WaitServerStrings = [ $player-win ] ;
7725: LD_ADDR_EXP 55
7729: PUSH
7730: LD_STRING $player-win
7732: PUSH
7733: EMPTY
7734: LIST
7735: ST_TO_ADDR
7736: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
7737: CALL 7071 0 0
7741: PUSH
7742: LD_LOC 15
7746: AND
7747: IFFALSE 7771
7749: GO 7751
7751: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
7752: LD_EXP 21
7756: PUSH
7757: LD_OWVAR 2
7761: ARRAY
7762: PPUSH
7763: CALL 12626 0 1
// YouWinInMultiplayer ;
7767: CALL_OW 106
// end ;
7771: END
// every 100 trigger isEditor marked 401 do
7772: LD_OWVAR 84
7776: IFFALSE 7792
7778: GO 7780
7780: DISABLE
// Debug_Strings = [ You won ] ;
7781: LD_ADDR_OWVAR 48
7785: PUSH
7786: LD_STRING You won
7788: PUSH
7789: EMPTY
7790: LIST
7791: ST_TO_ADDR
7792: END
// every 100 trigger isEditor marked 400 do
7793: LD_OWVAR 84
7797: IFFALSE 7813
7799: GO 7801
7801: DISABLE
// Debug_Strings = [ You loss ] ;
7802: LD_ADDR_OWVAR 48
7806: PUSH
7807: LD_STRING You loss
7809: PUSH
7810: EMPTY
7811: LIST
7812: ST_TO_ADDR
7813: END
// every 100 marked 98 do var i , un ;
7814: GO 7816
7816: DISABLE
7817: LD_INT 0
7819: PPUSH
7820: PPUSH
// begin for i = 1 to side_positions do
7821: LD_ADDR_VAR 0 1
7825: PUSH
7826: DOUBLE
7827: LD_INT 1
7829: DEC
7830: ST_TO_ADDR
7831: LD_EXP 20
7835: PUSH
7836: FOR_TO
7837: IFFALSE 7960
// if side_positions [ i ] then
7839: LD_EXP 20
7843: PUSH
7844: LD_VAR 0 1
7848: ARRAY
7849: IFFALSE 7958
// if not HasPower ( i ) and not Defaited [ i ] then
7851: LD_VAR 0 1
7855: PPUSH
7856: CALL 7147 0 1
7860: NOT
7861: PUSH
7862: LD_LOC 14
7866: PUSH
7867: LD_VAR 0 1
7871: ARRAY
7872: NOT
7873: AND
7874: IFFALSE 7958
// begin un = filterallunits ( [ f_side , i ] ) ;
7876: LD_ADDR_VAR 0 2
7880: PUSH
7881: LD_INT 22
7883: PUSH
7884: LD_VAR 0 1
7888: PUSH
7889: EMPTY
7890: LIST
7891: LIST
7892: PPUSH
7893: CALL_OW 69
7897: ST_TO_ADDR
// if un then
7898: LD_VAR 0 2
7902: IFFALSE 7916
// SetSide ( un , 0 ) ;
7904: LD_VAR 0 2
7908: PPUSH
7909: LD_INT 0
7911: PPUSH
7912: CALL_OW 235
// Defaited = replace ( Defaited , i , true ) ;
7916: LD_ADDR_LOC 14
7920: PUSH
7921: LD_LOC 14
7925: PPUSH
7926: LD_VAR 0 1
7930: PPUSH
7931: LD_INT 1
7933: PPUSH
7934: CALL_OW 1
7938: ST_TO_ADDR
// if i = your_side then
7939: LD_VAR 0 1
7943: PUSH
7944: LD_OWVAR 2
7948: EQUAL
7949: IFFALSE 7958
// begin Multiplayer_Loose_Message ;
7951: CALL_OW 521
// enable ( 400 ) ;
7955: LD_INT 400
7957: ENABLE_MARKED
// end ; end ;
7958: GO 7836
7960: POP
7961: POP
// if not Unfoged and defaited [ your_side ] then
7962: LD_LOC 16
7966: NOT
7967: PUSH
7968: LD_LOC 14
7972: PUSH
7973: LD_OWVAR 2
7977: ARRAY
7978: AND
7979: IFFALSE 7985
// Unfog ;
7981: CALL 8171 0 0
// DidGameEnd ;
7985: CALL 8000 0 0
// if not GameEnded then
7989: LD_LOC 15
7993: NOT
7994: IFFALSE 7997
// enable ;
7996: ENABLE
// end ;
7997: PPOPN 2
7999: END
// function DidGameEnd ; var i , k , enemy ; begin
8000: LD_INT 0
8002: PPUSH
8003: PPUSH
8004: PPUSH
8005: PPUSH
// enemy = [ ] ;
8006: LD_ADDR_VAR 0 4
8010: PUSH
8011: EMPTY
8012: ST_TO_ADDR
// for i = 1 to side_positions do
8013: LD_ADDR_VAR 0 2
8017: PUSH
8018: DOUBLE
8019: LD_INT 1
8021: DEC
8022: ST_TO_ADDR
8023: LD_EXP 20
8027: PUSH
8028: FOR_TO
8029: IFFALSE 8133
// if not defaited [ i ] then
8031: LD_LOC 14
8035: PUSH
8036: LD_VAR 0 2
8040: ARRAY
8041: NOT
8042: IFFALSE 8131
// for k = 1 to side_positions do
8044: LD_ADDR_VAR 0 3
8048: PUSH
8049: DOUBLE
8050: LD_INT 1
8052: DEC
8053: ST_TO_ADDR
8054: LD_EXP 20
8058: PUSH
8059: FOR_TO
8060: IFFALSE 8129
// if not defaited [ k ] then
8062: LD_LOC 14
8066: PUSH
8067: LD_VAR 0 3
8071: ARRAY
8072: NOT
8073: IFFALSE 8127
// if GetAttitude ( i , k ) in [ att_enemy , att_neutral ] then
8075: LD_VAR 0 2
8079: PPUSH
8080: LD_VAR 0 3
8084: PPUSH
8085: CALL_OW 81
8089: PUSH
8090: LD_INT 2
8092: PUSH
8093: LD_INT 0
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: IN
8100: IFFALSE 8127
// enemy = enemy ^ [ i , k ] ;
8102: LD_ADDR_VAR 0 4
8106: PUSH
8107: LD_VAR 0 4
8111: PUSH
8112: LD_VAR 0 2
8116: PUSH
8117: LD_VAR 0 3
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: ADD
8126: ST_TO_ADDR
8127: GO 8059
8129: POP
8130: POP
8131: GO 8028
8133: POP
8134: POP
// if not enemy then
8135: LD_VAR 0 4
8139: NOT
8140: IFFALSE 8166
// begin GameEnded = true ;
8142: LD_ADDR_LOC 15
8146: PUSH
8147: LD_INT 1
8149: ST_TO_ADDR
// if not defaited [ your_side ] then
8150: LD_LOC 14
8154: PUSH
8155: LD_OWVAR 2
8159: ARRAY
8160: NOT
8161: IFFALSE 8166
// enable ( 401 ) ;
8163: LD_INT 401
8165: ENABLE_MARKED
// end ; end ;
8166: LD_VAR 0 1
8170: RET
// function unfog ; var k , friends ; begin
8171: LD_INT 0
8173: PPUSH
8174: PPUSH
8175: PPUSH
// for k = 1 to side_positions do
8176: LD_ADDR_VAR 0 2
8180: PUSH
8181: DOUBLE
8182: LD_INT 1
8184: DEC
8185: ST_TO_ADDR
8186: LD_EXP 20
8190: PUSH
8191: FOR_TO
8192: IFFALSE 8248
// if not defaited [ k ] then
8194: LD_LOC 14
8198: PUSH
8199: LD_VAR 0 2
8203: ARRAY
8204: NOT
8205: IFFALSE 8246
// if GetAttitude ( your_side , k ) in [ att_friend ] then
8207: LD_OWVAR 2
8211: PPUSH
8212: LD_VAR 0 2
8216: PPUSH
8217: CALL_OW 81
8221: PUSH
8222: LD_INT 1
8224: PUSH
8225: EMPTY
8226: LIST
8227: IN
8228: IFFALSE 8246
// friends = friends ^ k ;
8230: LD_ADDR_VAR 0 3
8234: PUSH
8235: LD_VAR 0 3
8239: PUSH
8240: LD_VAR 0 2
8244: ADD
8245: ST_TO_ADDR
8246: GO 8191
8248: POP
8249: POP
// if not friends then
8250: LD_VAR 0 3
8254: NOT
8255: IFFALSE 8272
// begin fogoff ( true ) ;
8257: LD_INT 1
8259: PPUSH
8260: CALL_OW 344
// unfoged = true ;
8264: LD_ADDR_LOC 16
8268: PUSH
8269: LD_INT 1
8271: ST_TO_ADDR
// end ; end ;
8272: LD_VAR 0 1
8276: RET
// export function MakeGameEnd ; begin
8277: LD_INT 0
8279: PPUSH
// fogoff ( true ) ;
8280: LD_INT 1
8282: PPUSH
8283: CALL_OW 344
// unfoged = true ;
8287: LD_ADDR_LOC 16
8291: PUSH
8292: LD_INT 1
8294: ST_TO_ADDR
// wait ( 0 0$5 ) ;
8295: LD_INT 175
8297: PPUSH
8298: CALL_OW 67
// GameEnded = true ;
8302: LD_ADDR_LOC 15
8306: PUSH
8307: LD_INT 1
8309: ST_TO_ADDR
// end ;
8310: LD_VAR 0 1
8314: RET
// export function GetGameEnded ; begin
8315: LD_INT 0
8317: PPUSH
// result = GameEnded ;
8318: LD_ADDR_VAR 0 1
8322: PUSH
8323: LD_LOC 15
8327: ST_TO_ADDR
// end ; end_of_file
8328: LD_VAR 0 1
8332: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
8333: LD_VAR 0 1
8337: PPUSH
8338: CALL_OW 266
8342: PUSH
8343: LD_INT 0
8345: PUSH
8346: LD_INT 1
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: IN
8353: IFFALSE 8378
// SetBName ( b , @ & GetSide ( b ) ) ;
8355: LD_VAR 0 1
8359: PPUSH
8360: LD_STRING @
8362: PUSH
8363: LD_VAR 0 1
8367: PPUSH
8368: CALL_OW 255
8372: STR
8373: PPUSH
8374: CALL_OW 500
// if def_game_rules then
8378: LD_EXP 38
8382: IFFALSE 8419
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
8384: LD_VAR 0 1
8388: PPUSH
8389: LD_VAR 0 1
8393: PPUSH
8394: CALL_OW 266
8398: PPUSH
8399: LD_VAR 0 1
8403: PPUSH
8404: CALL_OW 255
8408: PPUSH
8409: LD_INT 0
8411: PPUSH
8412: LD_INT 1
8414: PPUSH
8415: CALL 11839 0 5
// end ;
8419: PPOPN 2
8421: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
8422: LD_VAR 0 1
8426: PPUSH
8427: CALL_OW 266
8431: PUSH
8432: LD_INT 0
8434: PUSH
8435: LD_INT 1
8437: PUSH
8438: EMPTY
8439: LIST
8440: LIST
8441: IN
8442: IFFALSE 8467
// SetBName ( b , @ & GetSide ( b ) ) ;
8444: LD_VAR 0 1
8448: PPUSH
8449: LD_STRING @
8451: PUSH
8452: LD_VAR 0 1
8456: PPUSH
8457: CALL_OW 255
8461: STR
8462: PPUSH
8463: CALL_OW 500
// if def_game_rules then
8467: LD_EXP 38
8471: IFFALSE 8510
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
8473: LD_VAR 0 1
8477: PPUSH
8478: LD_VAR 0 1
8482: PPUSH
8483: CALL_OW 266
8487: PPUSH
8488: LD_VAR 0 1
8492: PPUSH
8493: CALL_OW 255
8497: PPUSH
8498: LD_VAR 0 2
8502: PPUSH
8503: LD_INT 1
8505: PPUSH
8506: CALL 11839 0 5
// end ;
8510: PPOPN 3
8512: END
// on VehicleConstructed ( veh , fac ) do var side ;
8513: LD_INT 0
8515: PPUSH
// begin if GetControl ( veh ) = control_apeman then
8516: LD_VAR 0 1
8520: PPUSH
8521: CALL_OW 263
8525: PUSH
8526: LD_INT 5
8528: EQUAL
8529: IFFALSE 8671
// begin side := GetSide ( veh ) ;
8531: LD_ADDR_VAR 0 3
8535: PUSH
8536: LD_VAR 0 1
8540: PPUSH
8541: CALL_OW 255
8545: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
8546: LD_ADDR_EXP 33
8550: PUSH
8551: LD_EXP 33
8555: PPUSH
8556: LD_VAR 0 3
8560: PPUSH
8561: LD_EXP 33
8565: PUSH
8566: LD_VAR 0 3
8570: ARRAY
8571: PPUSH
8572: LD_INT 52
8574: PUSH
8575: EMPTY
8576: LIST
8577: PPUSH
8578: CALL_OW 72
8582: PUSH
8583: LD_INT 22
8585: PUSH
8586: LD_VAR 0 3
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: PUSH
8595: LD_INT 2
8597: PUSH
8598: LD_INT 33
8600: PUSH
8601: LD_INT 5
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: PUSH
8608: LD_INT 25
8610: PUSH
8611: LD_INT 12
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: PUSH
8618: LD_INT 25
8620: PUSH
8621: LD_INT 15
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: PUSH
8628: LD_INT 25
8630: PUSH
8631: LD_INT 16
8633: PUSH
8634: EMPTY
8635: LIST
8636: LIST
8637: PUSH
8638: LD_INT 25
8640: PUSH
8641: LD_INT 17
8643: PUSH
8644: EMPTY
8645: LIST
8646: LIST
8647: PUSH
8648: EMPTY
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: PPUSH
8660: CALL_OW 69
8664: UNION
8665: PPUSH
8666: CALL_OW 1
8670: ST_TO_ADDR
// end ; end ;
8671: PPOPN 3
8673: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
8674: LD_INT 0
8676: PPUSH
8677: PPUSH
8678: PPUSH
8679: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
8680: LD_VAR 0 1
8684: PPUSH
8685: CALL_OW 257
8689: PUSH
8690: LD_INT 12
8692: PUSH
8693: LD_INT 15
8695: PUSH
8696: LD_INT 17
8698: PUSH
8699: LD_INT 16
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: IN
8708: PUSH
8709: LD_VAR 0 1
8713: PPUSH
8714: CALL_OW 263
8718: PUSH
8719: LD_INT 5
8721: EQUAL
8722: OR
8723: IFFALSE 8734
// ApeKilled ( j ) ;
8725: LD_VAR 0 1
8729: PPUSH
8730: CALL 5604 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
8734: LD_VAR 0 1
8738: PPUSH
8739: CALL_OW 266
8743: PUSH
8744: LD_INT 0
8746: PUSH
8747: LD_INT 1
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: IN
8754: IFFALSE 8836
// begin pos := Side_Positions [ GetSide ( j ) ] ;
8756: LD_ADDR_VAR 0 4
8760: PUSH
8761: LD_EXP 20
8765: PUSH
8766: LD_VAR 0 1
8770: PPUSH
8771: CALL_OW 255
8775: ARRAY
8776: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
8777: LD_ADDR_VAR 0 2
8781: PUSH
8782: LD_EXP 27
8786: PUSH
8787: LD_VAR 0 4
8791: ARRAY
8792: PUSH
8793: LD_INT 1
8795: ARRAY
8796: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
8797: LD_ADDR_VAR 0 3
8801: PUSH
8802: LD_EXP 27
8806: PUSH
8807: LD_VAR 0 4
8811: ARRAY
8812: PUSH
8813: LD_INT 2
8815: ARRAY
8816: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
8817: LD_VAR 0 2
8821: PPUSH
8822: LD_VAR 0 3
8826: PPUSH
8827: CALL_OW 420
8831: PPUSH
8832: CALL_OW 419
// end ; if def_game_rules then
8836: LD_EXP 38
8840: IFFALSE 8939
// if ( GetType ( j ) = 3 ) then
8842: LD_VAR 0 1
8846: PPUSH
8847: CALL_OW 247
8851: PUSH
8852: LD_INT 3
8854: EQUAL
8855: IFFALSE 8895
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
8857: LD_VAR 0 1
8861: PPUSH
8862: LD_VAR 0 1
8866: PPUSH
8867: CALL_OW 266
8871: PPUSH
8872: LD_VAR 0 1
8876: PPUSH
8877: CALL_OW 255
8881: PPUSH
8882: LD_INT 0
8884: PPUSH
8885: LD_INT 1
8887: NEG
8888: PPUSH
8889: CALL 11839 0 5
8893: GO 8939
// if ( GetChassis ( j ) = 25 ) then
8895: LD_VAR 0 1
8899: PPUSH
8900: CALL_OW 265
8904: PUSH
8905: LD_INT 25
8907: EQUAL
8908: IFFALSE 8939
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
8910: LD_VAR 0 1
8914: PPUSH
8915: LD_INT 37
8917: PPUSH
8918: LD_VAR 0 1
8922: PPUSH
8923: CALL_OW 255
8927: PPUSH
8928: LD_INT 0
8930: PPUSH
8931: LD_INT 1
8933: NEG
8934: PPUSH
8935: CALL 11839 0 5
// end ;
8939: PPOPN 5
8941: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
8942: LD_EXP 38
8946: PUSH
8947: LD_VAR 0 1
8951: PPUSH
8952: CALL_OW 265
8956: PUSH
8957: LD_INT 25
8959: EQUAL
8960: AND
8961: IFFALSE 8993
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
8963: LD_VAR 0 1
8967: PPUSH
8968: LD_INT 37
8970: PPUSH
8971: LD_VAR 0 1
8975: PPUSH
8976: CALL_OW 255
8980: PPUSH
8981: LD_VAR 0 3
8985: PPUSH
8986: LD_INT 1
8988: PPUSH
8989: CALL 11839 0 5
// end ;
8993: PPOPN 4
8995: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
8996: LD_VAR 0 1
9000: PPUSH
9001: LD_VAR 0 2
9005: PPUSH
9006: LD_VAR 0 3
9010: PPUSH
9011: LD_OWVAR 2
9015: PPUSH
9016: CALL 12584 0 4
9020: PPOPN 3
9022: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
9023: LD_INT 0
9025: PPUSH
9026: PPUSH
// for un in battle_flags_id do
9027: LD_ADDR_VAR 0 2
9031: PUSH
9032: LD_EXP 28
9036: PUSH
9037: FOR_IN
9038: IFFALSE 9113
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
9040: LD_VAR 0 2
9044: PPUSH
9045: LD_INT 1
9047: PUSH
9048: LD_LOC 17
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: PUSH
9057: LD_INT 2
9059: PUSH
9060: LD_LOC 17
9064: PUSH
9065: LD_INT 2
9067: DIV
9068: PUSH
9069: EMPTY
9070: LIST
9071: LIST
9072: PUSH
9073: LD_INT 3
9075: PUSH
9076: LD_LOC 17
9080: PUSH
9081: LD_INT 5
9083: DIV
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: PUSH
9089: LD_INT 20
9091: PUSH
9092: LD_LOC 17
9096: PUSH
9097: EMPTY
9098: LIST
9099: LIST
9100: PUSH
9101: EMPTY
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: PPUSH
9107: CALL_OW 423
9111: GO 9037
9113: POP
9114: POP
// end ;
9115: LD_VAR 0 1
9119: RET
// every 0 0$0.1 do var un ;
9120: GO 9122
9122: DISABLE
9123: LD_INT 0
9125: PPUSH
// begin if not def_morale_flags then
9126: LD_EXP 47
9130: NOT
9131: IFFALSE 9135
// exit ;
9133: GO 9212
// if not morale_decreasing_time then
9135: LD_EXP 9
9139: NOT
9140: IFFALSE 9144
// exit ;
9142: GO 9212
// strength = 100 ;
9144: LD_ADDR_LOC 17
9148: PUSH
9149: LD_INT 100
9151: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
9152: LD_EXP 9
9156: PPUSH
9157: CALL_OW 67
// strength := strength - 1 ;
9161: LD_ADDR_LOC 17
9165: PUSH
9166: LD_LOC 17
9170: PUSH
9171: LD_INT 1
9173: MINUS
9174: ST_TO_ADDR
// Update_Flags ;
9175: CALL 9023 0 0
// until not strength ;
9179: LD_LOC 17
9183: NOT
9184: IFFALSE 9152
// for un in battle_flags_id do
9186: LD_ADDR_VAR 0 1
9190: PUSH
9191: LD_EXP 28
9195: PUSH
9196: FOR_IN
9197: IFFALSE 9210
// KillBattleFlag ( un ) ;
9199: LD_VAR 0 1
9203: PPUSH
9204: CALL_OW 419
9208: GO 9196
9210: POP
9211: POP
// end ; end_of_file
9212: PPOPN 1
9214: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
9215: LD_INT 0
9217: PPUSH
9218: PPUSH
// if ( not IAmSpec ) then
9219: CALL_OW 531
9223: NOT
9224: IFFALSE 9240
// Result := Limits_Info ^  ;
9226: LD_ADDR_VAR 0 1
9230: PUSH
9231: LD_LOC 29
9235: PUSH
9236: LD_STRING 
9238: ADD
9239: ST_TO_ADDR
// for i := 1 to 8 do
9240: LD_ADDR_VAR 0 2
9244: PUSH
9245: DOUBLE
9246: LD_INT 1
9248: DEC
9249: ST_TO_ADDR
9250: LD_INT 8
9252: PUSH
9253: FOR_TO
9254: IFFALSE 9299
// if Cheaters [ i ] then
9256: LD_LOC 30
9260: PUSH
9261: LD_VAR 0 2
9265: ARRAY
9266: IFFALSE 9297
// Result := Result ^ [ #Cheater , i , i ] ;
9268: LD_ADDR_VAR 0 1
9272: PUSH
9273: LD_VAR 0 1
9277: PUSH
9278: LD_STRING #Cheater
9280: PUSH
9281: LD_VAR 0 2
9285: PUSH
9286: LD_VAR 0 2
9290: PUSH
9291: EMPTY
9292: LIST
9293: LIST
9294: LIST
9295: ADD
9296: ST_TO_ADDR
9297: GO 9253
9299: POP
9300: POP
// end ;
9301: LD_VAR 0 1
9305: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
9306: LD_INT 0
9308: PPUSH
9309: PPUSH
9310: PPUSH
9311: PPUSH
9312: PPUSH
// case Game_Type of 10 :
9313: LD_EXP 37
9317: PUSH
9318: LD_INT 10
9320: DOUBLE
9321: EQUAL
9322: IFTRUE 9326
9324: GO 9337
9326: POP
// def_game_rules := 1 ; 11 :
9327: LD_ADDR_EXP 38
9331: PUSH
9332: LD_INT 1
9334: ST_TO_ADDR
9335: GO 9357
9337: LD_INT 11
9339: DOUBLE
9340: EQUAL
9341: IFTRUE 9345
9343: GO 9356
9345: POP
// def_game_rules := 3 ; end ;
9346: LD_ADDR_EXP 38
9350: PUSH
9351: LD_INT 3
9353: ST_TO_ADDR
9354: GO 9357
9356: POP
// case def_game_rules of 0 :
9357: LD_EXP 38
9361: PUSH
9362: LD_INT 0
9364: DOUBLE
9365: EQUAL
9366: IFTRUE 9370
9368: GO 9375
9370: POP
// exit ; 1 :
9371: GO 11433
9373: GO 11333
9375: LD_INT 1
9377: DOUBLE
9378: EQUAL
9379: IFTRUE 9383
9381: GO 9599
9383: POP
// begin def_base_level := 2 ;
9384: LD_ADDR_EXP 39
9388: PUSH
9389: LD_INT 2
9391: ST_TO_ADDR
// def_amount_of_people := 2 ;
9392: LD_ADDR_EXP 40
9396: PUSH
9397: LD_INT 2
9399: ST_TO_ADDR
// def_skill_level := 1 ;
9400: LD_ADDR_EXP 41
9404: PUSH
9405: LD_INT 1
9407: ST_TO_ADDR
// def_starting_resources := 2 ;
9408: LD_ADDR_EXP 42
9412: PUSH
9413: LD_INT 2
9415: ST_TO_ADDR
// def_shipments_density := 1 ;
9416: LD_ADDR_EXP 43
9420: PUSH
9421: LD_INT 1
9423: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9424: LD_ADDR_EXP 44
9428: PUSH
9429: LD_INT 0
9431: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9432: LD_ADDR_EXP 45
9436: PUSH
9437: LD_INT 1
9439: ST_TO_ADDR
// def_shared_vision := 1 ;
9440: LD_ADDR_EXP 46
9444: PUSH
9445: LD_INT 1
9447: ST_TO_ADDR
// def_morale_flags := 3 ;
9448: LD_ADDR_EXP 47
9452: PUSH
9453: LD_INT 3
9455: ST_TO_ADDR
// def_siberite_detection := 1 ;
9456: LD_ADDR_EXP 48
9460: PUSH
9461: LD_INT 1
9463: ST_TO_ADDR
// def_people_respawning := 1 ;
9464: LD_ADDR_EXP 49
9468: PUSH
9469: LD_INT 1
9471: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9472: LD_ADDR_EXP 50
9476: PUSH
9477: LD_INT 1
9479: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9480: LD_ADDR_EXP 51
9484: PUSH
9485: LD_INT 0
9487: ST_TO_ADDR
// def_builduptime := 2 ;
9488: LD_ADDR_EXP 52
9492: PUSH
9493: LD_INT 2
9495: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
9496: LD_ADDR_VAR 0 2
9500: PUSH
9501: EMPTY
9502: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9503: LD_ADDR_VAR 0 3
9507: PUSH
9508: EMPTY
9509: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9510: LD_ADDR_LOC 24
9514: PUSH
9515: EMPTY
9516: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9517: LD_ADDR_LOC 25
9521: PUSH
9522: EMPTY
9523: ST_TO_ADDR
// Banned_Controls := [ ] ;
9524: LD_ADDR_LOC 26
9528: PUSH
9529: EMPTY
9530: ST_TO_ADDR
// Banned_Engines := [ ] ;
9531: LD_ADDR_LOC 27
9535: PUSH
9536: EMPTY
9537: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9538: LD_ADDR_LOC 22
9542: PUSH
9543: LD_INT 37
9545: PUSH
9546: EMPTY
9547: LIST
9548: PUSH
9549: LD_INT 4
9551: PUSH
9552: LD_INT 5
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PUSH
9559: LD_INT 31
9561: PUSH
9562: LD_INT 32
9564: PUSH
9565: LD_INT 33
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: LIST
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: LIST
9577: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
9578: LD_ADDR_LOC 23
9582: PUSH
9583: LD_INT 2
9585: PUSH
9586: LD_INT 2
9588: PUSH
9589: LD_INT 4
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: LIST
9596: ST_TO_ADDR
// end ; 2 :
9597: GO 11333
9599: LD_INT 2
9601: DOUBLE
9602: EQUAL
9603: IFTRUE 9607
9605: GO 9816
9607: POP
// begin def_base_level := 1 ;
9608: LD_ADDR_EXP 39
9612: PUSH
9613: LD_INT 1
9615: ST_TO_ADDR
// def_amount_of_people := 2 ;
9616: LD_ADDR_EXP 40
9620: PUSH
9621: LD_INT 2
9623: ST_TO_ADDR
// def_skill_level := 3 ;
9624: LD_ADDR_EXP 41
9628: PUSH
9629: LD_INT 3
9631: ST_TO_ADDR
// def_starting_resources := 3 ;
9632: LD_ADDR_EXP 42
9636: PUSH
9637: LD_INT 3
9639: ST_TO_ADDR
// def_shipments_density := 2 ;
9640: LD_ADDR_EXP 43
9644: PUSH
9645: LD_INT 2
9647: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9648: LD_ADDR_EXP 44
9652: PUSH
9653: LD_INT 1
9655: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9656: LD_ADDR_EXP 45
9660: PUSH
9661: LD_INT 2
9663: ST_TO_ADDR
// def_shared_vision := 1 ;
9664: LD_ADDR_EXP 46
9668: PUSH
9669: LD_INT 1
9671: ST_TO_ADDR
// def_morale_flags := 0 ;
9672: LD_ADDR_EXP 47
9676: PUSH
9677: LD_INT 0
9679: ST_TO_ADDR
// def_siberite_detection := 1 ;
9680: LD_ADDR_EXP 48
9684: PUSH
9685: LD_INT 1
9687: ST_TO_ADDR
// def_people_respawning := 0 ;
9688: LD_ADDR_EXP 49
9692: PUSH
9693: LD_INT 0
9695: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
9696: LD_ADDR_EXP 50
9700: PUSH
9701: LD_INT 0
9703: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9704: LD_ADDR_EXP 51
9708: PUSH
9709: LD_INT 0
9711: ST_TO_ADDR
// def_builduptime := 2 ;
9712: LD_ADDR_EXP 52
9716: PUSH
9717: LD_INT 2
9719: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
9720: LD_ADDR_VAR 0 2
9724: PUSH
9725: LD_INT 1
9727: PUSH
9728: EMPTY
9729: LIST
9730: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9731: LD_ADDR_VAR 0 3
9735: PUSH
9736: EMPTY
9737: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9738: LD_ADDR_LOC 24
9742: PUSH
9743: EMPTY
9744: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9745: LD_ADDR_LOC 25
9749: PUSH
9750: EMPTY
9751: ST_TO_ADDR
// Banned_Controls := [ ] ;
9752: LD_ADDR_LOC 26
9756: PUSH
9757: EMPTY
9758: ST_TO_ADDR
// Banned_Engines := [ ] ;
9759: LD_ADDR_LOC 27
9763: PUSH
9764: EMPTY
9765: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9766: LD_ADDR_LOC 22
9770: PUSH
9771: LD_INT 4
9773: PUSH
9774: LD_INT 5
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: PUSH
9781: LD_INT 31
9783: PUSH
9784: LD_INT 32
9786: PUSH
9787: LD_INT 33
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: LIST
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
9799: LD_ADDR_LOC 23
9803: PUSH
9804: LD_INT 1
9806: PUSH
9807: LD_INT 2
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: ST_TO_ADDR
// end ; 3 :
9814: GO 11333
9816: LD_INT 3
9818: DOUBLE
9819: EQUAL
9820: IFTRUE 9824
9822: GO 10067
9824: POP
// begin def_base_level := 1 ;
9825: LD_ADDR_EXP 39
9829: PUSH
9830: LD_INT 1
9832: ST_TO_ADDR
// def_amount_of_people := 2 ;
9833: LD_ADDR_EXP 40
9837: PUSH
9838: LD_INT 2
9840: ST_TO_ADDR
// def_skill_level := 3 ;
9841: LD_ADDR_EXP 41
9845: PUSH
9846: LD_INT 3
9848: ST_TO_ADDR
// def_starting_resources := 3 ;
9849: LD_ADDR_EXP 42
9853: PUSH
9854: LD_INT 3
9856: ST_TO_ADDR
// def_shipments_density := 1 ;
9857: LD_ADDR_EXP 43
9861: PUSH
9862: LD_INT 1
9864: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9865: LD_ADDR_EXP 44
9869: PUSH
9870: LD_INT 0
9872: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9873: LD_ADDR_EXP 45
9877: PUSH
9878: LD_INT 1
9880: ST_TO_ADDR
// def_shared_vision := 1 ;
9881: LD_ADDR_EXP 46
9885: PUSH
9886: LD_INT 1
9888: ST_TO_ADDR
// def_morale_flags := 0 ;
9889: LD_ADDR_EXP 47
9893: PUSH
9894: LD_INT 0
9896: ST_TO_ADDR
// def_siberite_detection := 1 ;
9897: LD_ADDR_EXP 48
9901: PUSH
9902: LD_INT 1
9904: ST_TO_ADDR
// def_people_respawning := 0 ;
9905: LD_ADDR_EXP 49
9909: PUSH
9910: LD_INT 0
9912: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
9913: LD_ADDR_EXP 50
9917: PUSH
9918: LD_INT 2
9920: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9921: LD_ADDR_EXP 51
9925: PUSH
9926: LD_INT 0
9928: ST_TO_ADDR
// def_builduptime := 1 ;
9929: LD_ADDR_EXP 52
9933: PUSH
9934: LD_INT 1
9936: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9937: LD_ADDR_VAR 0 2
9941: PUSH
9942: LD_INT 23
9944: PUSH
9945: EMPTY
9946: LIST
9947: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
9948: LD_ADDR_VAR 0 3
9952: PUSH
9953: LD_INT 2
9955: PUSH
9956: LD_INT 37
9958: PUSH
9959: LD_INT 32
9961: PUSH
9962: LD_INT 33
9964: PUSH
9965: LD_INT 36
9967: PUSH
9968: LD_INT 16
9970: PUSH
9971: LD_INT 23
9973: PUSH
9974: LD_INT 21
9976: PUSH
9977: LD_INT 18
9979: PUSH
9980: LD_INT 22
9982: PUSH
9983: LD_INT 20
9985: PUSH
9986: LD_INT 19
9988: PUSH
9989: LD_INT 25
9991: PUSH
9992: LD_INT 17
9994: PUSH
9995: LD_INT 24
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10015: LD_ADDR_LOC 24
10019: PUSH
10020: EMPTY
10021: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10022: LD_ADDR_LOC 25
10026: PUSH
10027: EMPTY
10028: ST_TO_ADDR
// Banned_Controls := [ ] ;
10029: LD_ADDR_LOC 26
10033: PUSH
10034: EMPTY
10035: ST_TO_ADDR
// Banned_Engines := [ ] ;
10036: LD_ADDR_LOC 27
10040: PUSH
10041: EMPTY
10042: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10043: LD_ADDR_LOC 22
10047: PUSH
10048: EMPTY
10049: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10050: LD_ADDR_LOC 23
10054: PUSH
10055: EMPTY
10056: ST_TO_ADDR
// No_Mechs := true ;
10057: LD_ADDR_EXP 53
10061: PUSH
10062: LD_INT 1
10064: ST_TO_ADDR
// end ; 4 :
10065: GO 11333
10067: LD_INT 4
10069: DOUBLE
10070: EQUAL
10071: IFTRUE 10075
10073: GO 10250
10075: POP
// begin def_base_level := 1 ;
10076: LD_ADDR_EXP 39
10080: PUSH
10081: LD_INT 1
10083: ST_TO_ADDR
// def_amount_of_people := 2 ;
10084: LD_ADDR_EXP 40
10088: PUSH
10089: LD_INT 2
10091: ST_TO_ADDR
// def_skill_level := 3 ;
10092: LD_ADDR_EXP 41
10096: PUSH
10097: LD_INT 3
10099: ST_TO_ADDR
// def_starting_resources := 3 ;
10100: LD_ADDR_EXP 42
10104: PUSH
10105: LD_INT 3
10107: ST_TO_ADDR
// def_shipments_density := 2 ;
10108: LD_ADDR_EXP 43
10112: PUSH
10113: LD_INT 2
10115: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10116: LD_ADDR_EXP 44
10120: PUSH
10121: LD_INT 1
10123: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10124: LD_ADDR_EXP 45
10128: PUSH
10129: LD_INT 2
10131: ST_TO_ADDR
// def_shared_vision := 1 ;
10132: LD_ADDR_EXP 46
10136: PUSH
10137: LD_INT 1
10139: ST_TO_ADDR
// def_morale_flags := 0 ;
10140: LD_ADDR_EXP 47
10144: PUSH
10145: LD_INT 0
10147: ST_TO_ADDR
// def_siberite_detection := 1 ;
10148: LD_ADDR_EXP 48
10152: PUSH
10153: LD_INT 1
10155: ST_TO_ADDR
// def_people_respawning := 0 ;
10156: LD_ADDR_EXP 49
10160: PUSH
10161: LD_INT 0
10163: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
10164: LD_ADDR_EXP 50
10168: PUSH
10169: LD_INT 0
10171: ST_TO_ADDR
// def_siberite_bomb := 1 ;
10172: LD_ADDR_EXP 51
10176: PUSH
10177: LD_INT 1
10179: ST_TO_ADDR
// def_builduptime := 3 ;
10180: LD_ADDR_EXP 52
10184: PUSH
10185: LD_INT 3
10187: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
10188: LD_ADDR_VAR 0 2
10192: PUSH
10193: LD_INT 1
10195: PUSH
10196: EMPTY
10197: LIST
10198: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
10199: LD_ADDR_VAR 0 3
10203: PUSH
10204: EMPTY
10205: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10206: LD_ADDR_LOC 24
10210: PUSH
10211: EMPTY
10212: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10213: LD_ADDR_LOC 25
10217: PUSH
10218: EMPTY
10219: ST_TO_ADDR
// Banned_Controls := [ ] ;
10220: LD_ADDR_LOC 26
10224: PUSH
10225: EMPTY
10226: ST_TO_ADDR
// Banned_Engines := [ ] ;
10227: LD_ADDR_LOC 27
10231: PUSH
10232: EMPTY
10233: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10234: LD_ADDR_LOC 22
10238: PUSH
10239: EMPTY
10240: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10241: LD_ADDR_LOC 23
10245: PUSH
10246: EMPTY
10247: ST_TO_ADDR
// end ; 5 :
10248: GO 11333
10250: LD_INT 5
10252: DOUBLE
10253: EQUAL
10254: IFTRUE 10258
10256: GO 10507
10258: POP
// begin def_base_level := 0 ;
10259: LD_ADDR_EXP 39
10263: PUSH
10264: LD_INT 0
10266: ST_TO_ADDR
// def_amount_of_people := 0 ;
10267: LD_ADDR_EXP 40
10271: PUSH
10272: LD_INT 0
10274: ST_TO_ADDR
// def_skill_level := 0 ;
10275: LD_ADDR_EXP 41
10279: PUSH
10280: LD_INT 0
10282: ST_TO_ADDR
// def_starting_resources := 0 ;
10283: LD_ADDR_EXP 42
10287: PUSH
10288: LD_INT 0
10290: ST_TO_ADDR
// def_shipments_density := 0 ;
10291: LD_ADDR_EXP 43
10295: PUSH
10296: LD_INT 0
10298: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10299: LD_ADDR_EXP 44
10303: PUSH
10304: LD_INT 0
10306: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
10307: LD_ADDR_EXP 45
10311: PUSH
10312: LD_INT 0
10314: ST_TO_ADDR
// def_shared_vision := 1 ;
10315: LD_ADDR_EXP 46
10319: PUSH
10320: LD_INT 1
10322: ST_TO_ADDR
// def_morale_flags := 0 ;
10323: LD_ADDR_EXP 47
10327: PUSH
10328: LD_INT 0
10330: ST_TO_ADDR
// def_siberite_detection := 0 ;
10331: LD_ADDR_EXP 48
10335: PUSH
10336: LD_INT 0
10338: ST_TO_ADDR
// def_people_respawning := 1 ;
10339: LD_ADDR_EXP 49
10343: PUSH
10344: LD_INT 1
10346: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10347: LD_ADDR_EXP 50
10351: PUSH
10352: LD_INT 1
10354: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10355: LD_ADDR_EXP 51
10359: PUSH
10360: LD_INT 0
10362: ST_TO_ADDR
// def_builduptime := 0 ;
10363: LD_ADDR_EXP 52
10367: PUSH
10368: LD_INT 0
10370: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
10371: LD_ADDR_VAR 0 2
10375: PUSH
10376: LD_INT 10
10378: PUSH
10379: LD_INT 3
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
10386: LD_ADDR_VAR 0 3
10390: PUSH
10391: LD_INT 12
10393: PUSH
10394: LD_INT 11
10396: PUSH
10397: LD_INT 14
10399: PUSH
10400: LD_INT 13
10402: PUSH
10403: LD_INT 5
10405: PUSH
10406: LD_INT 24
10408: PUSH
10409: LD_INT 21
10411: PUSH
10412: LD_INT 33
10414: PUSH
10415: LD_INT 36
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
10429: LD_ADDR_LOC 24
10433: PUSH
10434: LD_INT 31
10436: PUSH
10437: EMPTY
10438: LIST
10439: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10440: LD_ADDR_LOC 25
10444: PUSH
10445: EMPTY
10446: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
10447: LD_ADDR_LOC 26
10451: PUSH
10452: LD_INT 2
10454: PUSH
10455: EMPTY
10456: LIST
10457: ST_TO_ADDR
// Banned_Engines := [ ] ;
10458: LD_ADDR_LOC 27
10462: PUSH
10463: EMPTY
10464: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
10465: LD_ADDR_LOC 22
10469: PUSH
10470: LD_INT 4
10472: PUSH
10473: EMPTY
10474: LIST
10475: PUSH
10476: LD_INT 31
10478: PUSH
10479: LD_INT 32
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
10490: LD_ADDR_LOC 23
10494: PUSH
10495: LD_INT 1
10497: PUSH
10498: LD_INT 1
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: ST_TO_ADDR
// end ; 6 :
10505: GO 11333
10507: LD_INT 6
10509: DOUBLE
10510: EQUAL
10511: IFTRUE 10515
10513: GO 10718
10515: POP
// begin def_base_level := 1 ;
10516: LD_ADDR_EXP 39
10520: PUSH
10521: LD_INT 1
10523: ST_TO_ADDR
// def_amount_of_people := 2 ;
10524: LD_ADDR_EXP 40
10528: PUSH
10529: LD_INT 2
10531: ST_TO_ADDR
// def_skill_level := 3 ;
10532: LD_ADDR_EXP 41
10536: PUSH
10537: LD_INT 3
10539: ST_TO_ADDR
// def_starting_resources := 3 ;
10540: LD_ADDR_EXP 42
10544: PUSH
10545: LD_INT 3
10547: ST_TO_ADDR
// def_shipments_density := 1 ;
10548: LD_ADDR_EXP 43
10552: PUSH
10553: LD_INT 1
10555: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10556: LD_ADDR_EXP 44
10560: PUSH
10561: LD_INT 0
10563: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
10564: LD_ADDR_EXP 45
10568: PUSH
10569: LD_INT 1
10571: ST_TO_ADDR
// def_shared_vision := 1 ;
10572: LD_ADDR_EXP 46
10576: PUSH
10577: LD_INT 1
10579: ST_TO_ADDR
// def_morale_flags := 0 ;
10580: LD_ADDR_EXP 47
10584: PUSH
10585: LD_INT 0
10587: ST_TO_ADDR
// def_siberite_detection := 1 ;
10588: LD_ADDR_EXP 48
10592: PUSH
10593: LD_INT 1
10595: ST_TO_ADDR
// def_people_respawning := 2 ;
10596: LD_ADDR_EXP 49
10600: PUSH
10601: LD_INT 2
10603: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10604: LD_ADDR_EXP 50
10608: PUSH
10609: LD_INT 1
10611: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10612: LD_ADDR_EXP 51
10616: PUSH
10617: LD_INT 0
10619: ST_TO_ADDR
// def_builduptime := 1 ;
10620: LD_ADDR_EXP 52
10624: PUSH
10625: LD_INT 1
10627: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
10628: LD_ADDR_VAR 0 2
10632: PUSH
10633: LD_INT 23
10635: PUSH
10636: EMPTY
10637: LIST
10638: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
10639: LD_ADDR_VAR 0 3
10643: PUSH
10644: LD_INT 2
10646: PUSH
10647: LD_INT 37
10649: PUSH
10650: LD_INT 31
10652: PUSH
10653: LD_INT 32
10655: PUSH
10656: LD_INT 33
10658: PUSH
10659: EMPTY
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10666: LD_ADDR_LOC 24
10670: PUSH
10671: EMPTY
10672: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10673: LD_ADDR_LOC 25
10677: PUSH
10678: EMPTY
10679: ST_TO_ADDR
// Banned_Controls := [ ] ;
10680: LD_ADDR_LOC 26
10684: PUSH
10685: EMPTY
10686: ST_TO_ADDR
// Banned_Engines := [ ] ;
10687: LD_ADDR_LOC 27
10691: PUSH
10692: EMPTY
10693: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10694: LD_ADDR_LOC 22
10698: PUSH
10699: EMPTY
10700: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10701: LD_ADDR_LOC 23
10705: PUSH
10706: EMPTY
10707: ST_TO_ADDR
// No_Mechs := true ;
10708: LD_ADDR_EXP 53
10712: PUSH
10713: LD_INT 1
10715: ST_TO_ADDR
// end ; 7 :
10716: GO 11333
10718: LD_INT 7
10720: DOUBLE
10721: EQUAL
10722: IFTRUE 10726
10724: GO 10924
10726: POP
// begin def_base_level := 1 ;
10727: LD_ADDR_EXP 39
10731: PUSH
10732: LD_INT 1
10734: ST_TO_ADDR
// def_amount_of_people := 2 ;
10735: LD_ADDR_EXP 40
10739: PUSH
10740: LD_INT 2
10742: ST_TO_ADDR
// def_skill_level := 3 ;
10743: LD_ADDR_EXP 41
10747: PUSH
10748: LD_INT 3
10750: ST_TO_ADDR
// def_starting_resources := 3 ;
10751: LD_ADDR_EXP 42
10755: PUSH
10756: LD_INT 3
10758: ST_TO_ADDR
// def_shipments_density := 1 ;
10759: LD_ADDR_EXP 43
10763: PUSH
10764: LD_INT 1
10766: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10767: LD_ADDR_EXP 44
10771: PUSH
10772: LD_INT 1
10774: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10775: LD_ADDR_EXP 45
10779: PUSH
10780: LD_INT 2
10782: ST_TO_ADDR
// def_shared_vision := 1 ;
10783: LD_ADDR_EXP 46
10787: PUSH
10788: LD_INT 1
10790: ST_TO_ADDR
// def_morale_flags := 0 ;
10791: LD_ADDR_EXP 47
10795: PUSH
10796: LD_INT 0
10798: ST_TO_ADDR
// def_siberite_detection := 1 ;
10799: LD_ADDR_EXP 48
10803: PUSH
10804: LD_INT 1
10806: ST_TO_ADDR
// def_people_respawning := 0 ;
10807: LD_ADDR_EXP 49
10811: PUSH
10812: LD_INT 0
10814: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10815: LD_ADDR_EXP 50
10819: PUSH
10820: LD_INT 1
10822: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10823: LD_ADDR_EXP 51
10827: PUSH
10828: LD_INT 0
10830: ST_TO_ADDR
// def_builduptime := 3 ;
10831: LD_ADDR_EXP 52
10835: PUSH
10836: LD_INT 3
10838: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
10839: LD_ADDR_VAR 0 2
10843: PUSH
10844: LD_INT 23
10846: PUSH
10847: EMPTY
10848: LIST
10849: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
10850: LD_ADDR_VAR 0 3
10854: PUSH
10855: LD_INT 37
10857: PUSH
10858: EMPTY
10859: LIST
10860: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10861: LD_ADDR_LOC 24
10865: PUSH
10866: EMPTY
10867: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10868: LD_ADDR_LOC 25
10872: PUSH
10873: EMPTY
10874: ST_TO_ADDR
// Banned_Controls := [ ] ;
10875: LD_ADDR_LOC 26
10879: PUSH
10880: EMPTY
10881: ST_TO_ADDR
// Banned_Engines := [ ] ;
10882: LD_ADDR_LOC 27
10886: PUSH
10887: EMPTY
10888: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
10889: LD_ADDR_LOC 22
10893: PUSH
10894: LD_INT 31
10896: PUSH
10897: LD_INT 32
10899: PUSH
10900: LD_INT 33
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: LIST
10907: PUSH
10908: EMPTY
10909: LIST
10910: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
10911: LD_ADDR_LOC 23
10915: PUSH
10916: LD_INT 10
10918: PUSH
10919: EMPTY
10920: LIST
10921: ST_TO_ADDR
// end ; 8 :
10922: GO 11333
10924: LD_INT 8
10926: DOUBLE
10927: EQUAL
10928: IFTRUE 10932
10930: GO 11332
10932: POP
// begin def_base_level := 0 ;
10933: LD_ADDR_EXP 39
10937: PUSH
10938: LD_INT 0
10940: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
10941: LD_ADDR_EXP 40
10945: PUSH
10946: LD_INT 0
10948: PPUSH
10949: LD_INT 1
10951: PPUSH
10952: CALL_OW 12
10956: ST_TO_ADDR
// def_skill_level := 0 ;
10957: LD_ADDR_EXP 41
10961: PUSH
10962: LD_INT 0
10964: ST_TO_ADDR
// def_starting_resources := 2 ;
10965: LD_ADDR_EXP 42
10969: PUSH
10970: LD_INT 2
10972: ST_TO_ADDR
// def_shipments_density := 1 ;
10973: LD_ADDR_EXP 43
10977: PUSH
10978: LD_INT 1
10980: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10981: LD_ADDR_EXP 44
10985: PUSH
10986: LD_INT 0
10988: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
10989: LD_ADDR_EXP 45
10993: PUSH
10994: LD_INT 0
10996: ST_TO_ADDR
// def_shared_vision := 1 ;
10997: LD_ADDR_EXP 46
11001: PUSH
11002: LD_INT 1
11004: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
11005: LD_ADDR_EXP 47
11009: PUSH
11010: LD_INT 0
11012: PPUSH
11013: LD_INT 2
11015: PPUSH
11016: CALL_OW 12
11020: ST_TO_ADDR
// def_siberite_detection := 0 ;
11021: LD_ADDR_EXP 48
11025: PUSH
11026: LD_INT 0
11028: ST_TO_ADDR
// def_people_respawning := 0 ;
11029: LD_ADDR_EXP 49
11033: PUSH
11034: LD_INT 0
11036: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
11037: LD_ADDR_EXP 50
11041: PUSH
11042: LD_INT 2
11044: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11045: LD_ADDR_EXP 51
11049: PUSH
11050: LD_INT 0
11052: ST_TO_ADDR
// def_builduptime := 0 ;
11053: LD_ADDR_EXP 52
11057: PUSH
11058: LD_INT 0
11060: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
11061: LD_ADDR_VAR 0 2
11065: PUSH
11066: LD_INT 23
11068: PUSH
11069: LD_INT 20
11071: PUSH
11072: LD_INT 40
11074: PUSH
11075: LD_INT 47
11077: PUSH
11078: LD_INT 46
11080: PUSH
11081: LD_INT 39
11083: PUSH
11084: LD_INT 71
11086: PUSH
11087: LD_INT 34
11089: PUSH
11090: LD_INT 41
11092: PUSH
11093: LD_INT 44
11095: PUSH
11096: LD_INT 17
11098: PUSH
11099: LD_INT 16
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
11116: LD_ADDR_VAR 0 3
11120: PUSH
11121: LD_INT 37
11123: PUSH
11124: LD_INT 5
11126: PUSH
11127: LD_INT 13
11129: PUSH
11130: LD_INT 34
11132: PUSH
11133: LD_INT 12
11135: PUSH
11136: LD_INT 15
11138: PUSH
11139: LD_INT 11
11141: PUSH
11142: LD_INT 14
11144: PUSH
11145: LD_INT 29
11147: PUSH
11148: LD_INT 30
11150: PUSH
11151: LD_INT 28
11153: PUSH
11154: LD_INT 24
11156: PUSH
11157: LD_INT 25
11159: PUSH
11160: LD_INT 20
11162: PUSH
11163: LD_INT 21
11165: PUSH
11166: LD_INT 22
11168: PUSH
11169: LD_INT 36
11171: PUSH
11172: EMPTY
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11191: LD_ADDR_LOC 24
11195: PUSH
11196: EMPTY
11197: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
11198: LD_ADDR_LOC 25
11202: PUSH
11203: LD_INT 14
11205: PUSH
11206: EMPTY
11207: LIST
11208: ST_TO_ADDR
// Banned_Controls := [ ] ;
11209: LD_ADDR_LOC 26
11213: PUSH
11214: EMPTY
11215: ST_TO_ADDR
// Banned_Engines := [ ] ;
11216: LD_ADDR_LOC 27
11220: PUSH
11221: EMPTY
11222: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
11223: LD_ADDR_LOC 22
11227: PUSH
11228: LD_INT 31
11230: PUSH
11231: LD_INT 32
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: PUSH
11238: LD_INT 4
11240: PUSH
11241: EMPTY
11242: LIST
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
11248: LD_ADDR_LOC 23
11252: PUSH
11253: LD_INT 2
11255: PUSH
11256: LD_INT 1
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: ST_TO_ADDR
// for i := 1 to 8 do
11263: LD_ADDR_VAR 0 4
11267: PUSH
11268: DOUBLE
11269: LD_INT 1
11271: DEC
11272: ST_TO_ADDR
11273: LD_INT 8
11275: PUSH
11276: FOR_TO
11277: IFFALSE 11328
// if ( Side_Nations [ i ] = 3 ) then
11279: LD_EXP 21
11283: PUSH
11284: LD_VAR 0 4
11288: ARRAY
11289: PUSH
11290: LD_INT 3
11292: EQUAL
11293: IFFALSE 11326
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
11295: LD_ADDR_EXP 21
11299: PUSH
11300: LD_EXP 21
11304: PPUSH
11305: LD_VAR 0 4
11309: PPUSH
11310: LD_INT 1
11312: PPUSH
11313: LD_INT 2
11315: PPUSH
11316: CALL_OW 12
11320: PPUSH
11321: CALL_OW 1
11325: ST_TO_ADDR
11326: GO 11276
11328: POP
11329: POP
// end ; end ;
11330: GO 11333
11332: POP
// for i := 1 to 8 do
11333: LD_ADDR_VAR 0 4
11337: PUSH
11338: DOUBLE
11339: LD_INT 1
11341: DEC
11342: ST_TO_ADDR
11343: LD_INT 8
11345: PUSH
11346: FOR_TO
11347: IFFALSE 11431
// if Side_Positions [ i ] then
11349: LD_EXP 20
11353: PUSH
11354: LD_VAR 0 4
11358: ARRAY
11359: IFFALSE 11429
// begin for j in Unavailable_Techs do
11361: LD_ADDR_VAR 0 5
11365: PUSH
11366: LD_VAR 0 2
11370: PUSH
11371: FOR_IN
11372: IFFALSE 11393
// SetTech ( j , i , 0 ) ;
11374: LD_VAR 0 5
11378: PPUSH
11379: LD_VAR 0 4
11383: PPUSH
11384: LD_INT 0
11386: PPUSH
11387: CALL_OW 322
11391: GO 11371
11393: POP
11394: POP
// for j in Unavailable_Builds do
11395: LD_ADDR_VAR 0 5
11399: PUSH
11400: LD_VAR 0 3
11404: PUSH
11405: FOR_IN
11406: IFFALSE 11427
// SetRestrict ( j , i , 0 ) ;
11408: LD_VAR 0 5
11412: PPUSH
11413: LD_VAR 0 4
11417: PPUSH
11418: LD_INT 0
11420: PPUSH
11421: CALL_OW 324
11425: GO 11405
11427: POP
11428: POP
// end ;
11429: GO 11346
11431: POP
11432: POP
// end ;
11433: LD_VAR 0 1
11437: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
11438: LD_INT 0
11440: PPUSH
11441: PPUSH
11442: PPUSH
11443: PPUSH
11444: PPUSH
11445: PPUSH
11446: PPUSH
// for i := 1 to Restricted_Builds do
11447: LD_ADDR_VAR 0 2
11451: PUSH
11452: DOUBLE
11453: LD_INT 1
11455: DEC
11456: ST_TO_ADDR
11457: LD_LOC 22
11461: PUSH
11462: FOR_TO
11463: IFFALSE 11773
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
11465: LD_LOC 22
11469: PUSH
11470: LD_VAR 0 2
11474: ARRAY
11475: PUSH
11476: LD_INT 1
11478: ARRAY
11479: PUSH
11480: LD_INT 31
11482: DOUBLE
11483: EQUAL
11484: IFTRUE 11500
11486: LD_INT 32
11488: DOUBLE
11489: EQUAL
11490: IFTRUE 11500
11492: LD_INT 33
11494: DOUBLE
11495: EQUAL
11496: IFTRUE 11500
11498: GO 11511
11500: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
11501: LD_ADDR_VAR 0 6
11505: PUSH
11506: LD_STRING #Turrets
11508: ST_TO_ADDR
11509: GO 11556
11511: LD_INT 4
11513: DOUBLE
11514: EQUAL
11515: IFTRUE 11525
11517: LD_INT 5
11519: DOUBLE
11520: EQUAL
11521: IFTRUE 11525
11523: GO 11536
11525: POP
// btype := #Armouries ; b_Behemoth :
11526: LD_ADDR_VAR 0 6
11530: PUSH
11531: LD_STRING #Armouries
11533: ST_TO_ADDR
11534: GO 11556
11536: LD_INT 37
11538: DOUBLE
11539: EQUAL
11540: IFTRUE 11544
11542: GO 11555
11544: POP
// btype := #Behemoths ; end ;
11545: LD_ADDR_VAR 0 6
11549: PUSH
11550: LD_STRING #Behemoths
11552: ST_TO_ADDR
11553: GO 11556
11555: POP
// list := [ ] ;
11556: LD_ADDR_VAR 0 7
11560: PUSH
11561: EMPTY
11562: ST_TO_ADDR
// for j := 1 to 8 do
11563: LD_ADDR_VAR 0 3
11567: PUSH
11568: DOUBLE
11569: LD_INT 1
11571: DEC
11572: ST_TO_ADDR
11573: LD_INT 8
11575: PUSH
11576: FOR_TO
11577: IFFALSE 11670
// if Side_Positions [ j ] then
11579: LD_EXP 20
11583: PUSH
11584: LD_VAR 0 3
11588: ARRAY
11589: IFFALSE 11668
// begin amount := 0 ;
11591: LD_ADDR_VAR 0 5
11595: PUSH
11596: LD_INT 0
11598: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
11599: LD_ADDR_VAR 0 4
11603: PUSH
11604: LD_LOC 22
11608: PUSH
11609: LD_VAR 0 2
11613: ARRAY
11614: PUSH
11615: FOR_IN
11616: IFFALSE 11664
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
11618: LD_ADDR_VAR 0 5
11622: PUSH
11623: LD_VAR 0 5
11627: PUSH
11628: LD_INT 22
11630: PUSH
11631: LD_VAR 0 3
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PUSH
11640: LD_INT 30
11642: PUSH
11643: LD_VAR 0 4
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: PUSH
11652: EMPTY
11653: LIST
11654: LIST
11655: PPUSH
11656: CALL_OW 69
11660: PLUS
11661: ST_TO_ADDR
11662: GO 11615
11664: POP
11665: POP
// break ;
11666: GO 11670
// end ;
11668: GO 11576
11670: POP
11671: POP
// list := [ ] ;
11672: LD_ADDR_VAR 0 7
11676: PUSH
11677: EMPTY
11678: ST_TO_ADDR
// for j := 1 to 8 do
11679: LD_ADDR_VAR 0 3
11683: PUSH
11684: DOUBLE
11685: LD_INT 1
11687: DEC
11688: ST_TO_ADDR
11689: LD_INT 8
11691: PUSH
11692: FOR_TO
11693: IFFALSE 11713
// list := list ^ amount ;
11695: LD_ADDR_VAR 0 7
11699: PUSH
11700: LD_VAR 0 7
11704: PUSH
11705: LD_VAR 0 5
11709: ADD
11710: ST_TO_ADDR
11711: GO 11692
11713: POP
11714: POP
// Already_Built := Already_Built ^ [ list ] ;
11715: LD_ADDR_LOC 28
11719: PUSH
11720: LD_LOC 28
11724: PUSH
11725: LD_VAR 0 7
11729: PUSH
11730: EMPTY
11731: LIST
11732: ADD
11733: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
11734: LD_ADDR_LOC 29
11738: PUSH
11739: LD_LOC 29
11743: PUSH
11744: LD_VAR 0 6
11748: PUSH
11749: LD_VAR 0 5
11753: PUSH
11754: LD_LOC 23
11758: PUSH
11759: LD_VAR 0 2
11763: ARRAY
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: LIST
11769: ADD
11770: ST_TO_ADDR
// end ;
11771: GO 11462
11773: POP
11774: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
11775: LD_ADDR_LOC 30
11779: PUSH
11780: LD_INT 0
11782: PUSH
11783: LD_INT 0
11785: PUSH
11786: LD_INT 0
11788: PUSH
11789: LD_INT 0
11791: PUSH
11792: LD_INT 0
11794: PUSH
11795: LD_INT 0
11797: PUSH
11798: LD_INT 0
11800: PUSH
11801: LD_INT 0
11803: PUSH
11804: EMPTY
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: ST_TO_ADDR
// if Limits_Info then
11814: LD_LOC 29
11818: IFFALSE 11834
// Limits_Info := #Limits ^ Limits_Info ;
11820: LD_ADDR_LOC 29
11824: PUSH
11825: LD_STRING #Limits
11827: PUSH
11828: LD_LOC 29
11832: ADD
11833: ST_TO_ADDR
// end ;
11834: LD_VAR 0 1
11838: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
11839: LD_INT 0
11841: PPUSH
11842: PPUSH
11843: PPUSH
11844: PPUSH
// for i := 1 to Restricted_Builds do
11845: LD_ADDR_VAR 0 7
11849: PUSH
11850: DOUBLE
11851: LD_INT 1
11853: DEC
11854: ST_TO_ADDR
11855: LD_LOC 22
11859: PUSH
11860: FOR_TO
11861: IFFALSE 12284
// if BType in Restricted_Builds [ i ] then
11863: LD_VAR 0 2
11867: PUSH
11868: LD_LOC 22
11872: PUSH
11873: LD_VAR 0 7
11877: ARRAY
11878: IN
11879: IFFALSE 12282
// begin if old_side then
11881: LD_VAR 0 4
11885: IFFALSE 12011
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
11887: LD_LOC 28
11891: PUSH
11892: LD_VAR 0 7
11896: ARRAY
11897: PUSH
11898: LD_VAR 0 3
11902: ARRAY
11903: PUSH
11904: LD_VAR 0 5
11908: PLUS
11909: PUSH
11910: LD_LOC 23
11914: PUSH
11915: LD_VAR 0 7
11919: ARRAY
11920: GREATER
11921: IFFALSE 11947
// begin SetSide ( un , old_side ) ;
11923: LD_VAR 0 1
11927: PPUSH
11928: LD_VAR 0 4
11932: PPUSH
11933: CALL_OW 235
// count := 0 ;
11937: LD_ADDR_VAR 0 5
11941: PUSH
11942: LD_INT 0
11944: ST_TO_ADDR
// end else
11945: GO 12011
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
11947: LD_ADDR_LOC 28
11951: PUSH
11952: LD_LOC 28
11956: PPUSH
11957: LD_VAR 0 7
11961: PPUSH
11962: LD_LOC 28
11966: PUSH
11967: LD_VAR 0 7
11971: ARRAY
11972: PPUSH
11973: LD_VAR 0 4
11977: PPUSH
11978: LD_LOC 28
11982: PUSH
11983: LD_VAR 0 7
11987: ARRAY
11988: PUSH
11989: LD_VAR 0 4
11993: ARRAY
11994: PUSH
11995: LD_VAR 0 5
11999: MINUS
12000: PPUSH
12001: CALL_OW 1
12005: PPUSH
12006: CALL_OW 1
12010: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
12011: LD_ADDR_LOC 28
12015: PUSH
12016: LD_LOC 28
12020: PPUSH
12021: LD_VAR 0 7
12025: PPUSH
12026: LD_LOC 28
12030: PUSH
12031: LD_VAR 0 7
12035: ARRAY
12036: PPUSH
12037: LD_VAR 0 3
12041: PPUSH
12042: LD_LOC 28
12046: PUSH
12047: LD_VAR 0 7
12051: ARRAY
12052: PUSH
12053: LD_VAR 0 3
12057: ARRAY
12058: PUSH
12059: LD_VAR 0 5
12063: PLUS
12064: PPUSH
12065: CALL_OW 1
12069: PPUSH
12070: CALL_OW 1
12074: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
12075: LD_VAR 0 5
12079: PUSH
12080: LD_INT 0
12082: NONEQUAL
12083: PUSH
12084: LD_VAR 0 3
12088: PUSH
12089: LD_OWVAR 2
12093: EQUAL
12094: AND
12095: IFFALSE 12138
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
12097: LD_ADDR_LOC 29
12101: PUSH
12102: LD_LOC 29
12106: PPUSH
12107: LD_INT 3
12109: PUSH
12110: LD_VAR 0 7
12114: MUL
12115: PPUSH
12116: LD_LOC 28
12120: PUSH
12121: LD_VAR 0 7
12125: ARRAY
12126: PUSH
12127: LD_VAR 0 3
12131: ARRAY
12132: PPUSH
12133: CALL_OW 1
12137: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
12138: LD_LOC 28
12142: PUSH
12143: LD_VAR 0 7
12147: ARRAY
12148: PUSH
12149: LD_VAR 0 3
12153: ARRAY
12154: PUSH
12155: LD_LOC 23
12159: PUSH
12160: LD_VAR 0 7
12164: ARRAY
12165: GREATER
12166: IFFALSE 12193
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
12168: LD_ADDR_LOC 30
12172: PUSH
12173: LD_LOC 30
12177: PPUSH
12178: LD_VAR 0 3
12182: PPUSH
12183: LD_INT 1
12185: PPUSH
12186: CALL_OW 1
12190: ST_TO_ADDR
// end else
12191: GO 12280
// begin for j := 1 to Restricted_Builds do
12193: LD_ADDR_VAR 0 8
12197: PUSH
12198: DOUBLE
12199: LD_INT 1
12201: DEC
12202: ST_TO_ADDR
12203: LD_LOC 22
12207: PUSH
12208: FOR_TO
12209: IFFALSE 12253
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
12211: LD_LOC 28
12215: PUSH
12216: LD_VAR 0 8
12220: ARRAY
12221: PUSH
12222: LD_VAR 0 3
12226: ARRAY
12227: PUSH
12228: LD_LOC 23
12232: PUSH
12233: LD_VAR 0 8
12237: ARRAY
12238: GREATER
12239: IFFALSE 12251
// begin Is_Cheater := true ;
12241: LD_ADDR_VAR 0 9
12245: PUSH
12246: LD_INT 1
12248: ST_TO_ADDR
// break ;
12249: GO 12253
// end ;
12251: GO 12208
12253: POP
12254: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
12255: LD_ADDR_LOC 30
12259: PUSH
12260: LD_LOC 30
12264: PPUSH
12265: LD_VAR 0 3
12269: PPUSH
12270: LD_VAR 0 9
12274: PPUSH
12275: CALL_OW 1
12279: ST_TO_ADDR
// end ; break ;
12280: GO 12284
// end ;
12282: GO 11860
12284: POP
12285: POP
// end ;
12286: LD_VAR 0 6
12290: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
12291: LD_VAR 0 5
12295: PUSH
12296: LD_LOC 24
12300: IN
12301: PUSH
12302: LD_VAR 0 2
12306: PUSH
12307: LD_LOC 25
12311: IN
12312: OR
12313: PUSH
12314: LD_VAR 0 4
12318: PUSH
12319: LD_LOC 26
12323: IN
12324: OR
12325: PUSH
12326: LD_VAR 0 3
12330: PUSH
12331: LD_LOC 27
12335: IN
12336: OR
12337: IFFALSE 12348
// ComCancel ( factory ) ;
12339: LD_VAR 0 1
12343: PPUSH
12344: CALL_OW 127
// end ;
12348: PPOPN 5
12350: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
12351: LD_VAR 0 2
12355: PUSH
12356: LD_LOC 24
12360: IN
12361: IFFALSE 12372
// ComCancel ( building ) ;
12363: LD_VAR 0 1
12367: PPUSH
12368: CALL_OW 127
// end ; end_of_file
12372: PPOPN 2
12374: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
12375: LD_INT 0
12377: PPUSH
12378: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
12379: LD_ADDR_VAR 0 2
12383: PUSH
12384: LD_STRING #Multi1x1-Time
12386: PUSH
12387: LD_OWVAR 1
12391: PUSH
12392: EMPTY
12393: LIST
12394: LIST
12395: ST_TO_ADDR
// if WaitServerStrings then
12396: LD_EXP 55
12400: IFFALSE 12418
// AllStrings = AllStrings ^ WaitServerStrings ;
12402: LD_ADDR_VAR 0 2
12406: PUSH
12407: LD_VAR 0 2
12411: PUSH
12412: LD_EXP 55
12416: ADD
12417: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
12418: LD_INT 0
12420: PUSH
12421: LD_EXP 12
12425: PUSH
12426: LD_OWVAR 1
12430: MINUS
12431: LESSEQUAL
12432: IFFALSE 12463
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
12434: LD_ADDR_VAR 0 2
12438: PUSH
12439: LD_VAR 0 2
12443: PUSH
12444: LD_STRING #allowedsibbomb
12446: PUSH
12447: LD_EXP 12
12451: PUSH
12452: LD_OWVAR 1
12456: MINUS
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: ADD
12462: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
12463: LD_INT 0
12465: PUSH
12466: LD_EXP 16
12470: PUSH
12471: LD_OWVAR 1
12475: MINUS
12476: LESSEQUAL
12477: IFFALSE 12508
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
12479: LD_ADDR_VAR 0 2
12483: PUSH
12484: LD_VAR 0 2
12488: PUSH
12489: LD_STRING #builduptime
12491: PUSH
12492: LD_EXP 16
12496: PUSH
12497: LD_OWVAR 1
12501: MINUS
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: ADD
12507: ST_TO_ADDR
// if ( ExtraStrings ) then
12508: LD_EXP 54
12512: IFFALSE 12534
// AllStrings := AllStrings ^  ^ ExtraStrings ;
12514: LD_ADDR_VAR 0 2
12518: PUSH
12519: LD_VAR 0 2
12523: PUSH
12524: LD_STRING 
12526: ADD
12527: PUSH
12528: LD_EXP 54
12532: ADD
12533: ST_TO_ADDR
// if ( LimitsStrings ) then
12534: CALL 9215 0 0
12538: IFFALSE 12560
// AllStrings := AllStrings ^  ^ LimitsStrings ;
12540: LD_ADDR_VAR 0 2
12544: PUSH
12545: LD_VAR 0 2
12549: PUSH
12550: LD_STRING 
12552: ADD
12553: PUSH
12554: CALL 9215 0 0
12558: ADD
12559: ST_TO_ADDR
// Display_Strings := AllStrings ;
12560: LD_ADDR_OWVAR 47
12564: PUSH
12565: LD_VAR 0 2
12569: ST_TO_ADDR
// end ;
12570: LD_VAR 0 1
12574: RET
// every 0 0$1 do
12575: GO 12577
12577: DISABLE
// begin ShowTimer ;
12578: CALL 12375 0 0
// enable ;
12582: ENABLE
// end ; end_of_file
12583: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
12584: LD_INT 0
12586: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
12587: LD_VAR 0 1
12591: PPUSH
12592: CALL_OW 255
12596: PUSH
12597: LD_VAR 0 4
12601: EQUAL
12602: IFFALSE 12621
// begin SetAchievement ( ACH_RAD ) ;
12604: LD_STRING ACH_RAD
12606: PPUSH
12607: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
12611: LD_STRING ACH_NL
12613: PPUSH
12614: LD_INT 1
12616: PPUSH
12617: CALL_OW 564
// end end ;
12621: LD_VAR 0 5
12625: RET
// export function SA_Win ( side ) ; begin
12626: LD_INT 0
12628: PPUSH
// case side of 1 :
12629: LD_VAR 0 1
12633: PUSH
12634: LD_INT 1
12636: DOUBLE
12637: EQUAL
12638: IFTRUE 12642
12640: GO 12655
12642: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
12643: LD_STRING ACH_AH
12645: PPUSH
12646: LD_INT 1
12648: PPUSH
12649: CALL_OW 564
12653: GO 12818
12655: LD_INT 2
12657: DOUBLE
12658: EQUAL
12659: IFTRUE 12663
12661: GO 12676
12663: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
12664: LD_STRING ACH_E
12666: PPUSH
12667: LD_INT 1
12669: PPUSH
12670: CALL_OW 564
12674: GO 12818
12676: LD_INT 3
12678: DOUBLE
12679: EQUAL
12680: IFTRUE 12684
12682: GO 12697
12684: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
12685: LD_STRING ACH_OOL
12687: PPUSH
12688: LD_INT 1
12690: PPUSH
12691: CALL_OW 564
12695: GO 12818
12697: LD_INT 1
12699: PUSH
12700: LD_INT 2
12702: PUSH
12703: EMPTY
12704: LIST
12705: LIST
12706: DOUBLE
12707: EQUAL
12708: IFTRUE 12712
12710: GO 12737
12712: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12713: LD_STRING ACH_AH
12715: PPUSH
12716: LD_REAL  5.00000000000000E-0001
12719: PPUSH
12720: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
12724: LD_STRING ACH_E
12726: PPUSH
12727: LD_REAL  5.00000000000000E-0001
12730: PPUSH
12731: CALL_OW 564
// end ; [ 2 , 3 ] :
12735: GO 12818
12737: LD_INT 2
12739: PUSH
12740: LD_INT 3
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: DOUBLE
12747: EQUAL
12748: IFTRUE 12752
12750: GO 12777
12752: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
12753: LD_STRING ACH_OOL
12755: PPUSH
12756: LD_REAL  5.00000000000000E-0001
12759: PPUSH
12760: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
12764: LD_STRING ACH_E
12766: PPUSH
12767: LD_REAL  5.00000000000000E-0001
12770: PPUSH
12771: CALL_OW 564
// end ; [ 3 , 1 ] :
12775: GO 12818
12777: LD_INT 3
12779: PUSH
12780: LD_INT 1
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: DOUBLE
12787: EQUAL
12788: IFTRUE 12792
12790: GO 12817
12792: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12793: LD_STRING ACH_AH
12795: PPUSH
12796: LD_REAL  5.00000000000000E-0001
12799: PPUSH
12800: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
12804: LD_STRING ACH_OOL
12806: PPUSH
12807: LD_REAL  5.00000000000000E-0001
12810: PPUSH
12811: CALL_OW 564
// end ; end ;
12815: GO 12818
12817: POP
// end ; end_of_file
12818: LD_VAR 0 2
12822: RET
// export BuildUpAreas , BuildUp ; export function BeginBuildUp ; var i , j ; begin
12823: LD_INT 0
12825: PPUSH
12826: PPUSH
12827: PPUSH
// enable ( 600 ) ;
12828: LD_INT 600
12830: ENABLE_MARKED
// BuildUp = true ;
12831: LD_ADDR_EXP 57
12835: PUSH
12836: LD_INT 1
12838: ST_TO_ADDR
// for i := 1 to BuildUpAreas do
12839: LD_ADDR_VAR 0 2
12843: PUSH
12844: DOUBLE
12845: LD_INT 1
12847: DEC
12848: ST_TO_ADDR
12849: LD_EXP 56
12853: PUSH
12854: FOR_TO
12855: IFFALSE 13010
// if Position_Sides [ i ] then
12857: LD_EXP 23
12861: PUSH
12862: LD_VAR 0 2
12866: ARRAY
12867: IFFALSE 13008
// for j := 1 to 8 do
12869: LD_ADDR_VAR 0 3
12873: PUSH
12874: DOUBLE
12875: LD_INT 1
12877: DEC
12878: ST_TO_ADDR
12879: LD_INT 8
12881: PUSH
12882: FOR_TO
12883: IFFALSE 13006
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
12885: LD_EXP 20
12889: PUSH
12890: LD_VAR 0 3
12894: ARRAY
12895: PUSH
12896: LD_EXP 17
12900: PUSH
12901: LD_EXP 23
12905: PUSH
12906: LD_VAR 0 2
12910: ARRAY
12911: ARRAY
12912: PUSH
12913: LD_EXP 17
12917: PUSH
12918: LD_VAR 0 3
12922: ARRAY
12923: NONEQUAL
12924: PUSH
12925: LD_EXP 22
12929: NOT
12930: PUSH
12931: LD_EXP 23
12935: PUSH
12936: LD_VAR 0 2
12940: ARRAY
12941: PUSH
12942: LD_VAR 0 3
12946: NONEQUAL
12947: AND
12948: OR
12949: AND
12950: IFFALSE 12974
// HideArea ( j , BuildUpAreas [ i ] ) else
12952: LD_VAR 0 3
12956: PPUSH
12957: LD_EXP 56
12961: PUSH
12962: LD_VAR 0 2
12966: ARRAY
12967: PPUSH
12968: CALL_OW 333
12972: GO 13004
// if ( j = your_side ) then
12974: LD_VAR 0 3
12978: PUSH
12979: LD_OWVAR 2
12983: EQUAL
12984: IFFALSE 13004
// SetAreaMapShow ( BuildUpAreas [ i ] , 3 ) ;
12986: LD_EXP 56
12990: PUSH
12991: LD_VAR 0 2
12995: ARRAY
12996: PPUSH
12997: LD_INT 3
12999: PPUSH
13000: CALL_OW 424
13004: GO 12882
13006: POP
13007: POP
13008: GO 12854
13010: POP
13011: POP
// end ;
13012: LD_VAR 0 1
13016: RET
// export function EndBuildUp ; var i , j ; begin
13017: LD_INT 0
13019: PPUSH
13020: PPUSH
13021: PPUSH
// disable ( 600 ) ;
13022: LD_INT 600
13024: DISABLE_MARKED
// BuildUp = false ;
13025: LD_ADDR_EXP 57
13029: PUSH
13030: LD_INT 0
13032: ST_TO_ADDR
// for i := 1 to BuildUpAreas do
13033: LD_ADDR_VAR 0 2
13037: PUSH
13038: DOUBLE
13039: LD_INT 1
13041: DEC
13042: ST_TO_ADDR
13043: LD_EXP 56
13047: PUSH
13048: FOR_TO
13049: IFFALSE 13204
// if Position_Sides [ i ] then
13051: LD_EXP 23
13055: PUSH
13056: LD_VAR 0 2
13060: ARRAY
13061: IFFALSE 13202
// for j := 1 to 8 do
13063: LD_ADDR_VAR 0 3
13067: PUSH
13068: DOUBLE
13069: LD_INT 1
13071: DEC
13072: ST_TO_ADDR
13073: LD_INT 8
13075: PUSH
13076: FOR_TO
13077: IFFALSE 13200
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
13079: LD_EXP 20
13083: PUSH
13084: LD_VAR 0 3
13088: ARRAY
13089: PUSH
13090: LD_EXP 17
13094: PUSH
13095: LD_EXP 23
13099: PUSH
13100: LD_VAR 0 2
13104: ARRAY
13105: ARRAY
13106: PUSH
13107: LD_EXP 17
13111: PUSH
13112: LD_VAR 0 3
13116: ARRAY
13117: NONEQUAL
13118: PUSH
13119: LD_EXP 22
13123: NOT
13124: PUSH
13125: LD_EXP 23
13129: PUSH
13130: LD_VAR 0 2
13134: ARRAY
13135: PUSH
13136: LD_VAR 0 3
13140: NONEQUAL
13141: AND
13142: OR
13143: AND
13144: IFFALSE 13168
// ShowArea ( j , BuildUpAreas [ i ] ) else
13146: LD_VAR 0 3
13150: PPUSH
13151: LD_EXP 56
13155: PUSH
13156: LD_VAR 0 2
13160: ARRAY
13161: PPUSH
13162: CALL_OW 334
13166: GO 13198
// if ( j = your_side ) then
13168: LD_VAR 0 3
13172: PUSH
13173: LD_OWVAR 2
13177: EQUAL
13178: IFFALSE 13198
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
13180: LD_EXP 56
13184: PUSH
13185: LD_VAR 0 2
13189: ARRAY
13190: PPUSH
13191: LD_INT 0
13193: PPUSH
13194: CALL_OW 424
13198: GO 13076
13200: POP
13201: POP
13202: GO 13048
13204: POP
13205: POP
// end ;
13206: LD_VAR 0 1
13210: RET
// every 1 marked 600 do var i , un ;
13211: GO 13213
13213: DISABLE
13214: LD_INT 0
13216: PPUSH
13217: PPUSH
// begin for i := 1 to BuildUpAreas do
13218: LD_ADDR_VAR 0 1
13222: PUSH
13223: DOUBLE
13224: LD_INT 1
13226: DEC
13227: ST_TO_ADDR
13228: LD_EXP 56
13232: PUSH
13233: FOR_TO
13234: IFFALSE 13404
// if Position_Sides [ i ] then
13236: LD_EXP 23
13240: PUSH
13241: LD_VAR 0 1
13245: ARRAY
13246: IFFALSE 13402
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_not , [ f_side , 0 ] ] ] ) do
13248: LD_ADDR_VAR 0 2
13252: PUSH
13253: LD_EXP 56
13257: PUSH
13258: LD_VAR 0 1
13262: ARRAY
13263: PPUSH
13264: LD_INT 2
13266: PUSH
13267: LD_INT 21
13269: PUSH
13270: LD_INT 1
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: PUSH
13277: LD_INT 21
13279: PUSH
13280: LD_INT 2
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: LIST
13291: PUSH
13292: LD_INT 3
13294: PUSH
13295: LD_INT 22
13297: PUSH
13298: LD_INT 0
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: PUSH
13305: EMPTY
13306: LIST
13307: LIST
13308: PUSH
13309: EMPTY
13310: LIST
13311: LIST
13312: PPUSH
13313: CALL_OW 70
13317: PUSH
13318: FOR_IN
13319: IFFALSE 13400
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ GetSide ( un ) ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> GetSide ( un ) ) ) then
13321: LD_EXP 17
13325: PUSH
13326: LD_EXP 23
13330: PUSH
13331: LD_VAR 0 1
13335: ARRAY
13336: ARRAY
13337: PUSH
13338: LD_EXP 17
13342: PUSH
13343: LD_VAR 0 2
13347: PPUSH
13348: CALL_OW 255
13352: ARRAY
13353: NONEQUAL
13354: PUSH
13355: LD_EXP 22
13359: NOT
13360: PUSH
13361: LD_EXP 23
13365: PUSH
13366: LD_VAR 0 1
13370: ARRAY
13371: PUSH
13372: LD_VAR 0 2
13376: PPUSH
13377: CALL_OW 255
13381: NONEQUAL
13382: AND
13383: OR
13384: IFFALSE 13398
// ComMoveToArea ( un , BuildUpEscape ) ;
13386: LD_VAR 0 2
13390: PPUSH
13391: LD_INT 12
13393: PPUSH
13394: CALL_OW 113
13398: GO 13318
13400: POP
13401: POP
13402: GO 13233
13404: POP
13405: POP
// if BuildUp then
13406: LD_EXP 57
13410: IFFALSE 13413
// enable ;
13412: ENABLE
// end ;
13413: PPOPN 2
13415: END
// every 1 do
13416: GO 13418
13418: DISABLE
// if ( def_builduptime > 0 ) then
13419: LD_EXP 52
13423: PUSH
13424: LD_INT 0
13426: GREATER
13427: IFFALSE 13448
// begin if buildUpTime_Delay then
13429: LD_EXP 16
13433: IFFALSE 13444
// wait ( buildUpTime_Delay ) ;
13435: LD_EXP 16
13439: PPUSH
13440: CALL_OW 67
// EndBuildUp ;
13444: CALL 13017 0 0
// end ; end_of_file
13448: END
// export function SetMpTechs ( ) ; var side , i ; begin
13449: LD_INT 0
13451: PPUSH
13452: PPUSH
13453: PPUSH
// for side = 1 to 8 do
13454: LD_ADDR_VAR 0 2
13458: PUSH
13459: DOUBLE
13460: LD_INT 1
13462: DEC
13463: ST_TO_ADDR
13464: LD_INT 8
13466: PUSH
13467: FOR_TO
13468: IFFALSE 13589
// begin for i = 1 to 72 do
13470: LD_ADDR_VAR 0 3
13474: PUSH
13475: DOUBLE
13476: LD_INT 1
13478: DEC
13479: ST_TO_ADDR
13480: LD_INT 72
13482: PUSH
13483: FOR_TO
13484: IFFALSE 13515
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
13486: LD_VAR 0 3
13490: PPUSH
13491: LD_VAR 0 2
13495: PPUSH
13496: LD_INT 0
13498: PPUSH
13499: LD_VAR 0 3
13503: PPUSH
13504: CALL_OW 565
13508: PPUSH
13509: CALL_OW 322
13513: GO 13483
13515: POP
13516: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
13517: LD_INT 73
13519: PPUSH
13520: LD_VAR 0 2
13524: PPUSH
13525: LD_INT 0
13527: PPUSH
13528: LD_INT 25
13530: PPUSH
13531: CALL_OW 565
13535: PPUSH
13536: CALL_OW 322
// for i = 0 to 40 do
13540: LD_ADDR_VAR 0 3
13544: PUSH
13545: DOUBLE
13546: LD_INT 0
13548: DEC
13549: ST_TO_ADDR
13550: LD_INT 40
13552: PUSH
13553: FOR_TO
13554: IFFALSE 13585
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
13556: LD_VAR 0 3
13560: PPUSH
13561: LD_VAR 0 2
13565: PPUSH
13566: LD_INT 1
13568: PPUSH
13569: LD_VAR 0 3
13573: PPUSH
13574: CALL_OW 565
13578: PPUSH
13579: CALL_OW 324
13583: GO 13553
13585: POP
13586: POP
// end ;
13587: GO 13467
13589: POP
13590: POP
// end ;
13591: LD_VAR 0 1
13595: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
13596: LD_INT 0
13598: PPUSH
13599: PPUSH
13600: PPUSH
// for side = 1 to 8 do
13601: LD_ADDR_VAR 0 3
13605: PUSH
13606: DOUBLE
13607: LD_INT 1
13609: DEC
13610: ST_TO_ADDR
13611: LD_INT 8
13613: PUSH
13614: FOR_TO
13615: IFFALSE 17611
// begin for i = 1 to 73 do
13617: LD_ADDR_VAR 0 4
13621: PUSH
13622: DOUBLE
13623: LD_INT 1
13625: DEC
13626: ST_TO_ADDR
13627: LD_INT 73
13629: PUSH
13630: FOR_TO
13631: IFFALSE 13652
// SetTech ( i , side , state_disabled ) ;
13633: LD_VAR 0 4
13637: PPUSH
13638: LD_VAR 0 3
13642: PPUSH
13643: LD_INT 0
13645: PPUSH
13646: CALL_OW 322
13650: GO 13630
13652: POP
13653: POP
// for i = 0 to 40 do
13654: LD_ADDR_VAR 0 4
13658: PUSH
13659: DOUBLE
13660: LD_INT 0
13662: DEC
13663: ST_TO_ADDR
13664: LD_INT 40
13666: PUSH
13667: FOR_TO
13668: IFFALSE 13689
// SetRestrict ( i , side , false ) ;
13670: LD_VAR 0 4
13674: PPUSH
13675: LD_VAR 0 3
13679: PPUSH
13680: LD_INT 0
13682: PPUSH
13683: CALL_OW 324
13687: GO 13667
13689: POP
13690: POP
// case level of 1 :
13691: LD_VAR 0 1
13695: PUSH
13696: LD_INT 1
13698: DOUBLE
13699: EQUAL
13700: IFTRUE 13704
13702: GO 13857
13704: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13705: LD_INT 35
13707: PPUSH
13708: LD_VAR 0 3
13712: PPUSH
13713: LD_INT 1
13715: PPUSH
13716: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13720: LD_INT 45
13722: PPUSH
13723: LD_VAR 0 3
13727: PPUSH
13728: LD_INT 1
13730: PPUSH
13731: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13735: LD_INT 46
13737: PPUSH
13738: LD_VAR 0 3
13742: PPUSH
13743: LD_INT 1
13745: PPUSH
13746: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13750: LD_INT 47
13752: PPUSH
13753: LD_VAR 0 3
13757: PPUSH
13758: LD_INT 1
13760: PPUSH
13761: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13765: LD_INT 0
13767: PPUSH
13768: LD_VAR 0 3
13772: PPUSH
13773: LD_INT 1
13775: PPUSH
13776: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13780: LD_INT 2
13782: PPUSH
13783: LD_VAR 0 3
13787: PPUSH
13788: LD_INT 1
13790: PPUSH
13791: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13795: LD_INT 4
13797: PPUSH
13798: LD_VAR 0 3
13802: PPUSH
13803: LD_INT 1
13805: PPUSH
13806: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13810: LD_INT 6
13812: PPUSH
13813: LD_VAR 0 3
13817: PPUSH
13818: LD_INT 1
13820: PPUSH
13821: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13825: LD_INT 29
13827: PPUSH
13828: LD_VAR 0 3
13832: PPUSH
13833: LD_INT 1
13835: PPUSH
13836: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13840: LD_INT 31
13842: PPUSH
13843: LD_VAR 0 3
13847: PPUSH
13848: LD_INT 1
13850: PPUSH
13851: CALL_OW 324
// end ; 2 :
13855: GO 17609
13857: LD_INT 2
13859: DOUBLE
13860: EQUAL
13861: IFTRUE 13865
13863: GO 14063
13865: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13866: LD_INT 35
13868: PPUSH
13869: LD_VAR 0 3
13873: PPUSH
13874: LD_INT 1
13876: PPUSH
13877: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13881: LD_INT 45
13883: PPUSH
13884: LD_VAR 0 3
13888: PPUSH
13889: LD_INT 1
13891: PPUSH
13892: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13896: LD_INT 46
13898: PPUSH
13899: LD_VAR 0 3
13903: PPUSH
13904: LD_INT 1
13906: PPUSH
13907: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13911: LD_INT 47
13913: PPUSH
13914: LD_VAR 0 3
13918: PPUSH
13919: LD_INT 1
13921: PPUSH
13922: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13926: LD_INT 1
13928: PPUSH
13929: LD_VAR 0 3
13933: PPUSH
13934: LD_INT 1
13936: PPUSH
13937: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13941: LD_INT 2
13943: PPUSH
13944: LD_VAR 0 3
13948: PPUSH
13949: LD_INT 1
13951: PPUSH
13952: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13956: LD_INT 11
13958: PPUSH
13959: LD_VAR 0 3
13963: PPUSH
13964: LD_INT 1
13966: PPUSH
13967: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13971: LD_INT 0
13973: PPUSH
13974: LD_VAR 0 3
13978: PPUSH
13979: LD_INT 1
13981: PPUSH
13982: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13986: LD_INT 2
13988: PPUSH
13989: LD_VAR 0 3
13993: PPUSH
13994: LD_INT 1
13996: PPUSH
13997: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14001: LD_INT 4
14003: PPUSH
14004: LD_VAR 0 3
14008: PPUSH
14009: LD_INT 1
14011: PPUSH
14012: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14016: LD_INT 6
14018: PPUSH
14019: LD_VAR 0 3
14023: PPUSH
14024: LD_INT 1
14026: PPUSH
14027: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14031: LD_INT 29
14033: PPUSH
14034: LD_VAR 0 3
14038: PPUSH
14039: LD_INT 1
14041: PPUSH
14042: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14046: LD_INT 31
14048: PPUSH
14049: LD_VAR 0 3
14053: PPUSH
14054: LD_INT 1
14056: PPUSH
14057: CALL_OW 324
// end ; 3 :
14061: GO 17609
14063: LD_INT 3
14065: DOUBLE
14066: EQUAL
14067: IFTRUE 14071
14069: GO 14524
14071: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14072: LD_INT 35
14074: PPUSH
14075: LD_VAR 0 3
14079: PPUSH
14080: LD_INT 1
14082: PPUSH
14083: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14087: LD_INT 45
14089: PPUSH
14090: LD_VAR 0 3
14094: PPUSH
14095: LD_INT 1
14097: PPUSH
14098: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14102: LD_INT 46
14104: PPUSH
14105: LD_VAR 0 3
14109: PPUSH
14110: LD_INT 1
14112: PPUSH
14113: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14117: LD_INT 47
14119: PPUSH
14120: LD_VAR 0 3
14124: PPUSH
14125: LD_INT 1
14127: PPUSH
14128: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14132: LD_INT 1
14134: PPUSH
14135: LD_VAR 0 3
14139: PPUSH
14140: LD_INT 1
14142: PPUSH
14143: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14147: LD_INT 2
14149: PPUSH
14150: LD_VAR 0 3
14154: PPUSH
14155: LD_INT 1
14157: PPUSH
14158: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14162: LD_INT 11
14164: PPUSH
14165: LD_VAR 0 3
14169: PPUSH
14170: LD_INT 1
14172: PPUSH
14173: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14177: LD_INT 48
14179: PPUSH
14180: LD_VAR 0 3
14184: PPUSH
14185: LD_INT 1
14187: PPUSH
14188: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14192: LD_INT 69
14194: PPUSH
14195: LD_VAR 0 3
14199: PPUSH
14200: LD_INT 1
14202: PPUSH
14203: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14207: LD_INT 39
14209: PPUSH
14210: LD_VAR 0 3
14214: PPUSH
14215: LD_INT 1
14217: PPUSH
14218: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14222: LD_INT 43
14224: PPUSH
14225: LD_VAR 0 3
14229: PPUSH
14230: LD_INT 1
14232: PPUSH
14233: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14237: LD_INT 51
14239: PPUSH
14240: LD_VAR 0 3
14244: PPUSH
14245: LD_INT 1
14247: PPUSH
14248: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14252: LD_INT 6
14254: PPUSH
14255: LD_VAR 0 3
14259: PPUSH
14260: LD_INT 1
14262: PPUSH
14263: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14267: LD_INT 0
14269: PPUSH
14270: LD_VAR 0 3
14274: PPUSH
14275: LD_INT 1
14277: PPUSH
14278: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14282: LD_INT 2
14284: PPUSH
14285: LD_VAR 0 3
14289: PPUSH
14290: LD_INT 1
14292: PPUSH
14293: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
14297: LD_INT 3
14299: PPUSH
14300: LD_VAR 0 3
14304: PPUSH
14305: LD_INT 1
14307: PPUSH
14308: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14312: LD_INT 4
14314: PPUSH
14315: LD_VAR 0 3
14319: PPUSH
14320: LD_INT 1
14322: PPUSH
14323: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14327: LD_INT 6
14329: PPUSH
14330: LD_VAR 0 3
14334: PPUSH
14335: LD_INT 1
14337: PPUSH
14338: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
14342: LD_INT 7
14344: PPUSH
14345: LD_VAR 0 3
14349: PPUSH
14350: LD_INT 1
14352: PPUSH
14353: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
14357: LD_INT 8
14359: PPUSH
14360: LD_VAR 0 3
14364: PPUSH
14365: LD_INT 1
14367: PPUSH
14368: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
14372: LD_INT 10
14374: PPUSH
14375: LD_VAR 0 3
14379: PPUSH
14380: LD_INT 1
14382: PPUSH
14383: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
14387: LD_INT 15
14389: PPUSH
14390: LD_VAR 0 3
14394: PPUSH
14395: LD_INT 1
14397: PPUSH
14398: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
14402: LD_INT 16
14404: PPUSH
14405: LD_VAR 0 3
14409: PPUSH
14410: LD_INT 1
14412: PPUSH
14413: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
14417: LD_INT 17
14419: PPUSH
14420: LD_VAR 0 3
14424: PPUSH
14425: LD_INT 1
14427: PPUSH
14428: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
14432: LD_INT 20
14434: PPUSH
14435: LD_VAR 0 3
14439: PPUSH
14440: LD_INT 1
14442: PPUSH
14443: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
14447: LD_INT 26
14449: PPUSH
14450: LD_VAR 0 3
14454: PPUSH
14455: LD_INT 1
14457: PPUSH
14458: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
14462: LD_INT 27
14464: PPUSH
14465: LD_VAR 0 3
14469: PPUSH
14470: LD_INT 1
14472: PPUSH
14473: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14477: LD_INT 29
14479: PPUSH
14480: LD_VAR 0 3
14484: PPUSH
14485: LD_INT 1
14487: PPUSH
14488: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14492: LD_INT 31
14494: PPUSH
14495: LD_VAR 0 3
14499: PPUSH
14500: LD_INT 1
14502: PPUSH
14503: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
14507: LD_INT 32
14509: PPUSH
14510: LD_VAR 0 3
14514: PPUSH
14515: LD_INT 1
14517: PPUSH
14518: CALL_OW 324
// end ; 4 :
14522: GO 17609
14524: LD_INT 4
14526: DOUBLE
14527: EQUAL
14528: IFTRUE 14532
14530: GO 15480
14532: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14533: LD_INT 35
14535: PPUSH
14536: LD_VAR 0 3
14540: PPUSH
14541: LD_INT 1
14543: PPUSH
14544: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14548: LD_INT 45
14550: PPUSH
14551: LD_VAR 0 3
14555: PPUSH
14556: LD_INT 1
14558: PPUSH
14559: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14563: LD_INT 46
14565: PPUSH
14566: LD_VAR 0 3
14570: PPUSH
14571: LD_INT 1
14573: PPUSH
14574: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14578: LD_INT 47
14580: PPUSH
14581: LD_VAR 0 3
14585: PPUSH
14586: LD_INT 1
14588: PPUSH
14589: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14593: LD_INT 1
14595: PPUSH
14596: LD_VAR 0 3
14600: PPUSH
14601: LD_INT 1
14603: PPUSH
14604: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14608: LD_INT 2
14610: PPUSH
14611: LD_VAR 0 3
14615: PPUSH
14616: LD_INT 1
14618: PPUSH
14619: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14623: LD_INT 11
14625: PPUSH
14626: LD_VAR 0 3
14630: PPUSH
14631: LD_INT 1
14633: PPUSH
14634: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
14638: LD_INT 20
14640: PPUSH
14641: LD_VAR 0 3
14645: PPUSH
14646: LD_INT 1
14648: PPUSH
14649: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14653: LD_INT 48
14655: PPUSH
14656: LD_VAR 0 3
14660: PPUSH
14661: LD_INT 1
14663: PPUSH
14664: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
14668: LD_INT 49
14670: PPUSH
14671: LD_VAR 0 3
14675: PPUSH
14676: LD_INT 1
14678: PPUSH
14679: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14683: LD_INT 69
14685: PPUSH
14686: LD_VAR 0 3
14690: PPUSH
14691: LD_INT 1
14693: PPUSH
14694: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14698: LD_INT 39
14700: PPUSH
14701: LD_VAR 0 3
14705: PPUSH
14706: LD_INT 1
14708: PPUSH
14709: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
14713: LD_INT 34
14715: PPUSH
14716: LD_VAR 0 3
14720: PPUSH
14721: LD_INT 1
14723: PPUSH
14724: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
14728: LD_INT 42
14730: PPUSH
14731: LD_VAR 0 3
14735: PPUSH
14736: LD_INT 1
14738: PPUSH
14739: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
14743: LD_INT 44
14745: PPUSH
14746: LD_VAR 0 3
14750: PPUSH
14751: LD_INT 1
14753: PPUSH
14754: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
14758: LD_INT 41
14760: PPUSH
14761: LD_VAR 0 3
14765: PPUSH
14766: LD_INT 1
14768: PPUSH
14769: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14773: LD_INT 43
14775: PPUSH
14776: LD_VAR 0 3
14780: PPUSH
14781: LD_INT 1
14783: PPUSH
14784: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
14788: LD_INT 70
14790: PPUSH
14791: LD_VAR 0 3
14795: PPUSH
14796: LD_INT 1
14798: PPUSH
14799: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14803: LD_INT 51
14805: PPUSH
14806: LD_VAR 0 3
14810: PPUSH
14811: LD_INT 1
14813: PPUSH
14814: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
14818: LD_INT 52
14820: PPUSH
14821: LD_VAR 0 3
14825: PPUSH
14826: LD_INT 1
14828: PPUSH
14829: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14833: LD_INT 6
14835: PPUSH
14836: LD_VAR 0 3
14840: PPUSH
14841: LD_INT 1
14843: PPUSH
14844: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
14848: LD_INT 15
14850: PPUSH
14851: LD_VAR 0 3
14855: PPUSH
14856: LD_INT 1
14858: PPUSH
14859: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
14863: LD_INT 7
14865: PPUSH
14866: LD_VAR 0 3
14870: PPUSH
14871: LD_INT 1
14873: PPUSH
14874: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
14878: LD_INT 12
14880: PPUSH
14881: LD_VAR 0 3
14885: PPUSH
14886: LD_INT 1
14888: PPUSH
14889: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
14893: LD_INT 18
14895: PPUSH
14896: LD_VAR 0 3
14900: PPUSH
14901: LD_INT 1
14903: PPUSH
14904: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
14908: LD_INT 60
14910: PPUSH
14911: LD_VAR 0 3
14915: PPUSH
14916: LD_INT 1
14918: PPUSH
14919: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
14923: LD_INT 9
14925: PPUSH
14926: LD_VAR 0 3
14930: PPUSH
14931: LD_INT 1
14933: PPUSH
14934: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
14938: LD_INT 30
14940: PPUSH
14941: LD_VAR 0 3
14945: PPUSH
14946: LD_INT 1
14948: PPUSH
14949: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
14953: LD_INT 37
14955: PPUSH
14956: LD_VAR 0 3
14960: PPUSH
14961: LD_INT 1
14963: PPUSH
14964: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14968: LD_INT 5
14970: PPUSH
14971: LD_VAR 0 3
14975: PPUSH
14976: LD_INT 1
14978: PPUSH
14979: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14983: LD_INT 66
14985: PPUSH
14986: LD_VAR 0 3
14990: PPUSH
14991: LD_INT 1
14993: PPUSH
14994: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14998: LD_INT 21
15000: PPUSH
15001: LD_VAR 0 3
15005: PPUSH
15006: LD_INT 1
15008: PPUSH
15009: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
15013: LD_INT 22
15015: PPUSH
15016: LD_VAR 0 3
15020: PPUSH
15021: LD_INT 1
15023: PPUSH
15024: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
15028: LD_INT 54
15030: PPUSH
15031: LD_VAR 0 3
15035: PPUSH
15036: LD_INT 1
15038: PPUSH
15039: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15043: LD_INT 0
15045: PPUSH
15046: LD_VAR 0 3
15050: PPUSH
15051: LD_INT 1
15053: PPUSH
15054: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
15058: LD_INT 1
15060: PPUSH
15061: LD_VAR 0 3
15065: PPUSH
15066: LD_INT 1
15068: PPUSH
15069: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15073: LD_INT 2
15075: PPUSH
15076: LD_VAR 0 3
15080: PPUSH
15081: LD_INT 1
15083: PPUSH
15084: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
15088: LD_INT 3
15090: PPUSH
15091: LD_VAR 0 3
15095: PPUSH
15096: LD_INT 1
15098: PPUSH
15099: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15103: LD_INT 4
15105: PPUSH
15106: LD_VAR 0 3
15110: PPUSH
15111: LD_INT 1
15113: PPUSH
15114: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
15118: LD_INT 5
15120: PPUSH
15121: LD_VAR 0 3
15125: PPUSH
15126: LD_INT 1
15128: PPUSH
15129: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15133: LD_INT 6
15135: PPUSH
15136: LD_VAR 0 3
15140: PPUSH
15141: LD_INT 1
15143: PPUSH
15144: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
15148: LD_INT 7
15150: PPUSH
15151: LD_VAR 0 3
15155: PPUSH
15156: LD_INT 1
15158: PPUSH
15159: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
15163: LD_INT 8
15165: PPUSH
15166: LD_VAR 0 3
15170: PPUSH
15171: LD_INT 1
15173: PPUSH
15174: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
15178: LD_INT 10
15180: PPUSH
15181: LD_VAR 0 3
15185: PPUSH
15186: LD_INT 1
15188: PPUSH
15189: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
15193: LD_INT 11
15195: PPUSH
15196: LD_VAR 0 3
15200: PPUSH
15201: LD_INT 1
15203: PPUSH
15204: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
15208: LD_INT 12
15210: PPUSH
15211: LD_VAR 0 3
15215: PPUSH
15216: LD_INT 1
15218: PPUSH
15219: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
15223: LD_INT 13
15225: PPUSH
15226: LD_VAR 0 3
15230: PPUSH
15231: LD_INT 1
15233: PPUSH
15234: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
15238: LD_INT 14
15240: PPUSH
15241: LD_VAR 0 3
15245: PPUSH
15246: LD_INT 1
15248: PPUSH
15249: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
15253: LD_INT 15
15255: PPUSH
15256: LD_VAR 0 3
15260: PPUSH
15261: LD_INT 1
15263: PPUSH
15264: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
15268: LD_INT 16
15270: PPUSH
15271: LD_VAR 0 3
15275: PPUSH
15276: LD_INT 1
15278: PPUSH
15279: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
15283: LD_INT 17
15285: PPUSH
15286: LD_VAR 0 3
15290: PPUSH
15291: LD_INT 1
15293: PPUSH
15294: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
15298: LD_INT 19
15300: PPUSH
15301: LD_VAR 0 3
15305: PPUSH
15306: LD_INT 1
15308: PPUSH
15309: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
15313: LD_INT 20
15315: PPUSH
15316: LD_VAR 0 3
15320: PPUSH
15321: LD_INT 1
15323: PPUSH
15324: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
15328: LD_INT 21
15330: PPUSH
15331: LD_VAR 0 3
15335: PPUSH
15336: LD_INT 1
15338: PPUSH
15339: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
15343: LD_INT 23
15345: PPUSH
15346: LD_VAR 0 3
15350: PPUSH
15351: LD_INT 1
15353: PPUSH
15354: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
15358: LD_INT 26
15360: PPUSH
15361: LD_VAR 0 3
15365: PPUSH
15366: LD_INT 1
15368: PPUSH
15369: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15373: LD_INT 27
15375: PPUSH
15376: LD_VAR 0 3
15380: PPUSH
15381: LD_INT 1
15383: PPUSH
15384: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
15388: LD_INT 28
15390: PPUSH
15391: LD_VAR 0 3
15395: PPUSH
15396: LD_INT 1
15398: PPUSH
15399: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15403: LD_INT 29
15405: PPUSH
15406: LD_VAR 0 3
15410: PPUSH
15411: LD_INT 1
15413: PPUSH
15414: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
15418: LD_INT 30
15420: PPUSH
15421: LD_VAR 0 3
15425: PPUSH
15426: LD_INT 1
15428: PPUSH
15429: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15433: LD_INT 31
15435: PPUSH
15436: LD_VAR 0 3
15440: PPUSH
15441: LD_INT 1
15443: PPUSH
15444: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15448: LD_INT 32
15450: PPUSH
15451: LD_VAR 0 3
15455: PPUSH
15456: LD_INT 1
15458: PPUSH
15459: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
15463: LD_INT 36
15465: PPUSH
15466: LD_VAR 0 3
15470: PPUSH
15471: LD_INT 1
15473: PPUSH
15474: CALL_OW 324
// end ; 5 :
15478: GO 17609
15480: LD_INT 5
15482: DOUBLE
15483: EQUAL
15484: IFTRUE 15488
15486: GO 16601
15488: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15489: LD_INT 35
15491: PPUSH
15492: LD_VAR 0 3
15496: PPUSH
15497: LD_INT 1
15499: PPUSH
15500: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15504: LD_INT 45
15506: PPUSH
15507: LD_VAR 0 3
15511: PPUSH
15512: LD_INT 1
15514: PPUSH
15515: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15519: LD_INT 46
15521: PPUSH
15522: LD_VAR 0 3
15526: PPUSH
15527: LD_INT 1
15529: PPUSH
15530: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15534: LD_INT 47
15536: PPUSH
15537: LD_VAR 0 3
15541: PPUSH
15542: LD_INT 1
15544: PPUSH
15545: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15549: LD_INT 1
15551: PPUSH
15552: LD_VAR 0 3
15556: PPUSH
15557: LD_INT 1
15559: PPUSH
15560: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15564: LD_INT 2
15566: PPUSH
15567: LD_VAR 0 3
15571: PPUSH
15572: LD_INT 1
15574: PPUSH
15575: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15579: LD_INT 11
15581: PPUSH
15582: LD_VAR 0 3
15586: PPUSH
15587: LD_INT 1
15589: PPUSH
15590: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15594: LD_INT 20
15596: PPUSH
15597: LD_VAR 0 3
15601: PPUSH
15602: LD_INT 1
15604: PPUSH
15605: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15609: LD_INT 48
15611: PPUSH
15612: LD_VAR 0 3
15616: PPUSH
15617: LD_INT 1
15619: PPUSH
15620: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15624: LD_INT 49
15626: PPUSH
15627: LD_VAR 0 3
15631: PPUSH
15632: LD_INT 1
15634: PPUSH
15635: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15639: LD_INT 69
15641: PPUSH
15642: LD_VAR 0 3
15646: PPUSH
15647: LD_INT 1
15649: PPUSH
15650: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15654: LD_INT 39
15656: PPUSH
15657: LD_VAR 0 3
15661: PPUSH
15662: LD_INT 1
15664: PPUSH
15665: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15669: LD_INT 34
15671: PPUSH
15672: LD_VAR 0 3
15676: PPUSH
15677: LD_INT 1
15679: PPUSH
15680: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15684: LD_INT 42
15686: PPUSH
15687: LD_VAR 0 3
15691: PPUSH
15692: LD_INT 1
15694: PPUSH
15695: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15699: LD_INT 44
15701: PPUSH
15702: LD_VAR 0 3
15706: PPUSH
15707: LD_INT 1
15709: PPUSH
15710: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15714: LD_INT 41
15716: PPUSH
15717: LD_VAR 0 3
15721: PPUSH
15722: LD_INT 1
15724: PPUSH
15725: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
15729: LD_INT 40
15731: PPUSH
15732: LD_VAR 0 3
15736: PPUSH
15737: LD_INT 1
15739: PPUSH
15740: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15744: LD_INT 43
15746: PPUSH
15747: LD_VAR 0 3
15751: PPUSH
15752: LD_INT 1
15754: PPUSH
15755: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15759: LD_INT 70
15761: PPUSH
15762: LD_VAR 0 3
15766: PPUSH
15767: LD_INT 1
15769: PPUSH
15770: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15774: LD_INT 51
15776: PPUSH
15777: LD_VAR 0 3
15781: PPUSH
15782: LD_INT 1
15784: PPUSH
15785: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15789: LD_INT 52
15791: PPUSH
15792: LD_VAR 0 3
15796: PPUSH
15797: LD_INT 1
15799: PPUSH
15800: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15804: LD_INT 6
15806: PPUSH
15807: LD_VAR 0 3
15811: PPUSH
15812: LD_INT 1
15814: PPUSH
15815: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
15819: LD_INT 15
15821: PPUSH
15822: LD_VAR 0 3
15826: PPUSH
15827: LD_INT 1
15829: PPUSH
15830: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
15834: LD_INT 7
15836: PPUSH
15837: LD_VAR 0 3
15841: PPUSH
15842: LD_INT 1
15844: PPUSH
15845: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
15849: LD_INT 12
15851: PPUSH
15852: LD_VAR 0 3
15856: PPUSH
15857: LD_INT 1
15859: PPUSH
15860: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
15864: LD_INT 17
15866: PPUSH
15867: LD_VAR 0 3
15871: PPUSH
15872: LD_INT 1
15874: PPUSH
15875: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
15879: LD_INT 18
15881: PPUSH
15882: LD_VAR 0 3
15886: PPUSH
15887: LD_INT 1
15889: PPUSH
15890: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
15894: LD_INT 60
15896: PPUSH
15897: LD_VAR 0 3
15901: PPUSH
15902: LD_INT 1
15904: PPUSH
15905: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
15909: LD_INT 32
15911: PPUSH
15912: LD_VAR 0 3
15916: PPUSH
15917: LD_INT 1
15919: PPUSH
15920: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
15924: LD_INT 9
15926: PPUSH
15927: LD_VAR 0 3
15931: PPUSH
15932: LD_INT 1
15934: PPUSH
15935: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
15939: LD_INT 57
15941: PPUSH
15942: LD_VAR 0 3
15946: PPUSH
15947: LD_INT 1
15949: PPUSH
15950: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
15954: LD_INT 30
15956: PPUSH
15957: LD_VAR 0 3
15961: PPUSH
15962: LD_INT 1
15964: PPUSH
15965: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
15969: LD_INT 37
15971: PPUSH
15972: LD_VAR 0 3
15976: PPUSH
15977: LD_INT 1
15979: PPUSH
15980: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
15984: LD_INT 63
15986: PPUSH
15987: LD_VAR 0 3
15991: PPUSH
15992: LD_INT 1
15994: PPUSH
15995: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
15999: LD_INT 3
16001: PPUSH
16002: LD_VAR 0 3
16006: PPUSH
16007: LD_INT 1
16009: PPUSH
16010: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
16014: LD_INT 4
16016: PPUSH
16017: LD_VAR 0 3
16021: PPUSH
16022: LD_INT 1
16024: PPUSH
16025: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
16029: LD_INT 5
16031: PPUSH
16032: LD_VAR 0 3
16036: PPUSH
16037: LD_INT 1
16039: PPUSH
16040: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
16044: LD_INT 66
16046: PPUSH
16047: LD_VAR 0 3
16051: PPUSH
16052: LD_INT 1
16054: PPUSH
16055: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
16059: LD_INT 21
16061: PPUSH
16062: LD_VAR 0 3
16066: PPUSH
16067: LD_INT 1
16069: PPUSH
16070: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
16074: LD_INT 22
16076: PPUSH
16077: LD_VAR 0 3
16081: PPUSH
16082: LD_INT 1
16084: PPUSH
16085: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
16089: LD_INT 19
16091: PPUSH
16092: LD_VAR 0 3
16096: PPUSH
16097: LD_INT 1
16099: PPUSH
16100: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
16104: LD_INT 54
16106: PPUSH
16107: LD_VAR 0 3
16111: PPUSH
16112: LD_INT 1
16114: PPUSH
16115: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
16119: LD_INT 55
16121: PPUSH
16122: LD_VAR 0 3
16126: PPUSH
16127: LD_INT 1
16129: PPUSH
16130: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16134: LD_INT 0
16136: PPUSH
16137: LD_VAR 0 3
16141: PPUSH
16142: LD_INT 1
16144: PPUSH
16145: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
16149: LD_INT 1
16151: PPUSH
16152: LD_VAR 0 3
16156: PPUSH
16157: LD_INT 1
16159: PPUSH
16160: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16164: LD_INT 2
16166: PPUSH
16167: LD_VAR 0 3
16171: PPUSH
16172: LD_INT 1
16174: PPUSH
16175: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
16179: LD_INT 3
16181: PPUSH
16182: LD_VAR 0 3
16186: PPUSH
16187: LD_INT 1
16189: PPUSH
16190: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16194: LD_INT 4
16196: PPUSH
16197: LD_VAR 0 3
16201: PPUSH
16202: LD_INT 1
16204: PPUSH
16205: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
16209: LD_INT 5
16211: PPUSH
16212: LD_VAR 0 3
16216: PPUSH
16217: LD_INT 1
16219: PPUSH
16220: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16224: LD_INT 6
16226: PPUSH
16227: LD_VAR 0 3
16231: PPUSH
16232: LD_INT 1
16234: PPUSH
16235: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
16239: LD_INT 7
16241: PPUSH
16242: LD_VAR 0 3
16246: PPUSH
16247: LD_INT 1
16249: PPUSH
16250: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
16254: LD_INT 8
16256: PPUSH
16257: LD_VAR 0 3
16261: PPUSH
16262: LD_INT 1
16264: PPUSH
16265: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
16269: LD_INT 10
16271: PPUSH
16272: LD_VAR 0 3
16276: PPUSH
16277: LD_INT 1
16279: PPUSH
16280: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
16284: LD_INT 11
16286: PPUSH
16287: LD_VAR 0 3
16291: PPUSH
16292: LD_INT 1
16294: PPUSH
16295: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
16299: LD_INT 12
16301: PPUSH
16302: LD_VAR 0 3
16306: PPUSH
16307: LD_INT 1
16309: PPUSH
16310: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
16314: LD_INT 13
16316: PPUSH
16317: LD_VAR 0 3
16321: PPUSH
16322: LD_INT 1
16324: PPUSH
16325: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
16329: LD_INT 14
16331: PPUSH
16332: LD_VAR 0 3
16336: PPUSH
16337: LD_INT 1
16339: PPUSH
16340: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
16344: LD_INT 15
16346: PPUSH
16347: LD_VAR 0 3
16351: PPUSH
16352: LD_INT 1
16354: PPUSH
16355: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
16359: LD_INT 16
16361: PPUSH
16362: LD_VAR 0 3
16366: PPUSH
16367: LD_INT 1
16369: PPUSH
16370: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
16374: LD_INT 17
16376: PPUSH
16377: LD_VAR 0 3
16381: PPUSH
16382: LD_INT 1
16384: PPUSH
16385: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
16389: LD_INT 18
16391: PPUSH
16392: LD_VAR 0 3
16396: PPUSH
16397: LD_INT 1
16399: PPUSH
16400: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
16404: LD_INT 19
16406: PPUSH
16407: LD_VAR 0 3
16411: PPUSH
16412: LD_INT 1
16414: PPUSH
16415: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
16419: LD_INT 20
16421: PPUSH
16422: LD_VAR 0 3
16426: PPUSH
16427: LD_INT 1
16429: PPUSH
16430: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
16434: LD_INT 21
16436: PPUSH
16437: LD_VAR 0 3
16441: PPUSH
16442: LD_INT 1
16444: PPUSH
16445: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
16449: LD_INT 23
16451: PPUSH
16452: LD_VAR 0 3
16456: PPUSH
16457: LD_INT 1
16459: PPUSH
16460: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
16464: LD_INT 26
16466: PPUSH
16467: LD_VAR 0 3
16471: PPUSH
16472: LD_INT 1
16474: PPUSH
16475: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16479: LD_INT 27
16481: PPUSH
16482: LD_VAR 0 3
16486: PPUSH
16487: LD_INT 1
16489: PPUSH
16490: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
16494: LD_INT 28
16496: PPUSH
16497: LD_VAR 0 3
16501: PPUSH
16502: LD_INT 1
16504: PPUSH
16505: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16509: LD_INT 29
16511: PPUSH
16512: LD_VAR 0 3
16516: PPUSH
16517: LD_INT 1
16519: PPUSH
16520: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
16524: LD_INT 30
16526: PPUSH
16527: LD_VAR 0 3
16531: PPUSH
16532: LD_INT 1
16534: PPUSH
16535: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16539: LD_INT 31
16541: PPUSH
16542: LD_VAR 0 3
16546: PPUSH
16547: LD_INT 1
16549: PPUSH
16550: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16554: LD_INT 32
16556: PPUSH
16557: LD_VAR 0 3
16561: PPUSH
16562: LD_INT 1
16564: PPUSH
16565: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
16569: LD_INT 33
16571: PPUSH
16572: LD_VAR 0 3
16576: PPUSH
16577: LD_INT 1
16579: PPUSH
16580: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
16584: LD_INT 36
16586: PPUSH
16587: LD_VAR 0 3
16591: PPUSH
16592: LD_INT 1
16594: PPUSH
16595: CALL_OW 324
// end ; 6 :
16599: GO 17609
16601: LD_INT 6
16603: DOUBLE
16604: EQUAL
16605: IFTRUE 16609
16607: GO 17534
16609: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16610: LD_INT 35
16612: PPUSH
16613: LD_VAR 0 3
16617: PPUSH
16618: LD_INT 1
16620: PPUSH
16621: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16625: LD_INT 45
16627: PPUSH
16628: LD_VAR 0 3
16632: PPUSH
16633: LD_INT 1
16635: PPUSH
16636: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16640: LD_INT 46
16642: PPUSH
16643: LD_VAR 0 3
16647: PPUSH
16648: LD_INT 1
16650: PPUSH
16651: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16655: LD_INT 47
16657: PPUSH
16658: LD_VAR 0 3
16662: PPUSH
16663: LD_INT 1
16665: PPUSH
16666: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16670: LD_INT 1
16672: PPUSH
16673: LD_VAR 0 3
16677: PPUSH
16678: LD_INT 1
16680: PPUSH
16681: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16685: LD_INT 2
16687: PPUSH
16688: LD_VAR 0 3
16692: PPUSH
16693: LD_INT 1
16695: PPUSH
16696: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16700: LD_INT 11
16702: PPUSH
16703: LD_VAR 0 3
16707: PPUSH
16708: LD_INT 1
16710: PPUSH
16711: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
16715: LD_INT 20
16717: PPUSH
16718: LD_VAR 0 3
16722: PPUSH
16723: LD_INT 1
16725: PPUSH
16726: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16730: LD_INT 48
16732: PPUSH
16733: LD_VAR 0 3
16737: PPUSH
16738: LD_INT 1
16740: PPUSH
16741: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16745: LD_INT 49
16747: PPUSH
16748: LD_VAR 0 3
16752: PPUSH
16753: LD_INT 1
16755: PPUSH
16756: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
16760: LD_INT 50
16762: PPUSH
16763: LD_VAR 0 3
16767: PPUSH
16768: LD_INT 1
16770: PPUSH
16771: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16775: LD_INT 69
16777: PPUSH
16778: LD_VAR 0 3
16782: PPUSH
16783: LD_INT 1
16785: PPUSH
16786: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16790: LD_INT 39
16792: PPUSH
16793: LD_VAR 0 3
16797: PPUSH
16798: LD_INT 1
16800: PPUSH
16801: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16805: LD_INT 34
16807: PPUSH
16808: LD_VAR 0 3
16812: PPUSH
16813: LD_INT 1
16815: PPUSH
16816: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16820: LD_INT 42
16822: PPUSH
16823: LD_VAR 0 3
16827: PPUSH
16828: LD_INT 1
16830: PPUSH
16831: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16835: LD_INT 44
16837: PPUSH
16838: LD_VAR 0 3
16842: PPUSH
16843: LD_INT 1
16845: PPUSH
16846: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16850: LD_INT 41
16852: PPUSH
16853: LD_VAR 0 3
16857: PPUSH
16858: LD_INT 1
16860: PPUSH
16861: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
16865: LD_INT 13
16867: PPUSH
16868: LD_VAR 0 3
16872: PPUSH
16873: LD_INT 1
16875: PPUSH
16876: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
16880: LD_INT 40
16882: PPUSH
16883: LD_VAR 0 3
16887: PPUSH
16888: LD_INT 1
16890: PPUSH
16891: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16895: LD_INT 43
16897: PPUSH
16898: LD_VAR 0 3
16902: PPUSH
16903: LD_INT 1
16905: PPUSH
16906: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16910: LD_INT 70
16912: PPUSH
16913: LD_VAR 0 3
16917: PPUSH
16918: LD_INT 1
16920: PPUSH
16921: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
16925: LD_INT 23
16927: PPUSH
16928: LD_VAR 0 3
16932: PPUSH
16933: LD_INT 1
16935: PPUSH
16936: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16940: LD_INT 51
16942: PPUSH
16943: LD_VAR 0 3
16947: PPUSH
16948: LD_INT 1
16950: PPUSH
16951: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16955: LD_INT 52
16957: PPUSH
16958: LD_VAR 0 3
16962: PPUSH
16963: LD_INT 1
16965: PPUSH
16966: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16970: LD_INT 6
16972: PPUSH
16973: LD_VAR 0 3
16977: PPUSH
16978: LD_INT 1
16980: PPUSH
16981: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16985: LD_INT 15
16987: PPUSH
16988: LD_VAR 0 3
16992: PPUSH
16993: LD_INT 1
16995: PPUSH
16996: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
17000: LD_INT 7
17002: PPUSH
17003: LD_VAR 0 3
17007: PPUSH
17008: LD_INT 1
17010: PPUSH
17011: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17015: LD_INT 12
17017: PPUSH
17018: LD_VAR 0 3
17022: PPUSH
17023: LD_INT 1
17025: PPUSH
17026: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
17030: LD_INT 10
17032: PPUSH
17033: LD_VAR 0 3
17037: PPUSH
17038: LD_INT 1
17040: PPUSH
17041: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
17045: LD_INT 17
17047: PPUSH
17048: LD_VAR 0 3
17052: PPUSH
17053: LD_INT 1
17055: PPUSH
17056: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17060: LD_INT 18
17062: PPUSH
17063: LD_VAR 0 3
17067: PPUSH
17068: LD_INT 1
17070: PPUSH
17071: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17075: LD_INT 60
17077: PPUSH
17078: LD_VAR 0 3
17082: PPUSH
17083: LD_INT 1
17085: PPUSH
17086: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
17090: LD_INT 61
17092: PPUSH
17093: LD_VAR 0 3
17097: PPUSH
17098: LD_INT 1
17100: PPUSH
17101: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
17105: LD_INT 32
17107: PPUSH
17108: LD_VAR 0 3
17112: PPUSH
17113: LD_INT 1
17115: PPUSH
17116: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
17120: LD_INT 27
17122: PPUSH
17123: LD_VAR 0 3
17127: PPUSH
17128: LD_INT 1
17130: PPUSH
17131: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
17135: LD_INT 36
17137: PPUSH
17138: LD_VAR 0 3
17142: PPUSH
17143: LD_INT 1
17145: PPUSH
17146: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
17150: LD_INT 33
17152: PPUSH
17153: LD_VAR 0 3
17157: PPUSH
17158: LD_INT 1
17160: PPUSH
17161: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
17165: LD_INT 9
17167: PPUSH
17168: LD_VAR 0 3
17172: PPUSH
17173: LD_INT 1
17175: PPUSH
17176: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
17180: LD_INT 38
17182: PPUSH
17183: LD_VAR 0 3
17187: PPUSH
17188: LD_INT 1
17190: PPUSH
17191: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
17195: LD_INT 57
17197: PPUSH
17198: LD_VAR 0 3
17202: PPUSH
17203: LD_INT 1
17205: PPUSH
17206: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
17210: LD_INT 58
17212: PPUSH
17213: LD_VAR 0 3
17217: PPUSH
17218: LD_INT 1
17220: PPUSH
17221: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
17225: LD_INT 28
17227: PPUSH
17228: LD_VAR 0 3
17232: PPUSH
17233: LD_INT 1
17235: PPUSH
17236: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
17240: LD_INT 29
17242: PPUSH
17243: LD_VAR 0 3
17247: PPUSH
17248: LD_INT 1
17250: PPUSH
17251: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
17255: LD_INT 30
17257: PPUSH
17258: LD_VAR 0 3
17262: PPUSH
17263: LD_INT 1
17265: PPUSH
17266: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
17270: LD_INT 37
17272: PPUSH
17273: LD_VAR 0 3
17277: PPUSH
17278: LD_INT 1
17280: PPUSH
17281: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
17285: LD_INT 63
17287: PPUSH
17288: LD_VAR 0 3
17292: PPUSH
17293: LD_INT 1
17295: PPUSH
17296: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
17300: LD_INT 64
17302: PPUSH
17303: LD_VAR 0 3
17307: PPUSH
17308: LD_INT 1
17310: PPUSH
17311: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
17315: LD_INT 3
17317: PPUSH
17318: LD_VAR 0 3
17322: PPUSH
17323: LD_INT 1
17325: PPUSH
17326: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
17330: LD_INT 4
17332: PPUSH
17333: LD_VAR 0 3
17337: PPUSH
17338: LD_INT 1
17340: PPUSH
17341: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
17345: LD_INT 5
17347: PPUSH
17348: LD_VAR 0 3
17352: PPUSH
17353: LD_INT 1
17355: PPUSH
17356: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
17360: LD_INT 8
17362: PPUSH
17363: LD_VAR 0 3
17367: PPUSH
17368: LD_INT 1
17370: PPUSH
17371: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
17375: LD_INT 66
17377: PPUSH
17378: LD_VAR 0 3
17382: PPUSH
17383: LD_INT 1
17385: PPUSH
17386: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
17390: LD_INT 67
17392: PPUSH
17393: LD_VAR 0 3
17397: PPUSH
17398: LD_INT 1
17400: PPUSH
17401: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
17405: LD_INT 21
17407: PPUSH
17408: LD_VAR 0 3
17412: PPUSH
17413: LD_INT 1
17415: PPUSH
17416: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
17420: LD_INT 22
17422: PPUSH
17423: LD_VAR 0 3
17427: PPUSH
17428: LD_INT 1
17430: PPUSH
17431: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
17435: LD_INT 19
17437: PPUSH
17438: LD_VAR 0 3
17442: PPUSH
17443: LD_INT 1
17445: PPUSH
17446: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
17450: LD_INT 26
17452: PPUSH
17453: LD_VAR 0 3
17457: PPUSH
17458: LD_INT 1
17460: PPUSH
17461: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
17465: LD_INT 54
17467: PPUSH
17468: LD_VAR 0 3
17472: PPUSH
17473: LD_INT 1
17475: PPUSH
17476: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
17480: LD_INT 55
17482: PPUSH
17483: LD_VAR 0 3
17487: PPUSH
17488: LD_INT 1
17490: PPUSH
17491: CALL_OW 322
// for i = 0 to 39 do
17495: LD_ADDR_VAR 0 4
17499: PUSH
17500: DOUBLE
17501: LD_INT 0
17503: DEC
17504: ST_TO_ADDR
17505: LD_INT 39
17507: PUSH
17508: FOR_TO
17509: IFFALSE 17530
// SetRestrict ( i , side , true ) ;
17511: LD_VAR 0 4
17515: PPUSH
17516: LD_VAR 0 3
17520: PPUSH
17521: LD_INT 1
17523: PPUSH
17524: CALL_OW 324
17528: GO 17508
17530: POP
17531: POP
// end ; else
17532: GO 17609
17534: POP
// begin for i = 1 to 73 do
17535: LD_ADDR_VAR 0 4
17539: PUSH
17540: DOUBLE
17541: LD_INT 1
17543: DEC
17544: ST_TO_ADDR
17545: LD_INT 73
17547: PUSH
17548: FOR_TO
17549: IFFALSE 17570
// SetTech ( i , side , state_enabled ) ;
17551: LD_VAR 0 4
17555: PPUSH
17556: LD_VAR 0 3
17560: PPUSH
17561: LD_INT 1
17563: PPUSH
17564: CALL_OW 322
17568: GO 17548
17570: POP
17571: POP
// for i = 0 to 39 do
17572: LD_ADDR_VAR 0 4
17576: PUSH
17577: DOUBLE
17578: LD_INT 0
17580: DEC
17581: ST_TO_ADDR
17582: LD_INT 39
17584: PUSH
17585: FOR_TO
17586: IFFALSE 17607
// SetRestrict ( i , side , true ) ;
17588: LD_VAR 0 4
17592: PPUSH
17593: LD_VAR 0 3
17597: PPUSH
17598: LD_INT 1
17600: PPUSH
17601: CALL_OW 324
17605: GO 17585
17607: POP
17608: POP
// end ; end ; end ;
17609: GO 13614
17611: POP
17612: POP
// end ;
17613: LD_VAR 0 2
17617: RET
