// export def_tree_function ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , respawning_time_min , respawning_time_max , siberite_bomb_Delay , amount_of_apemen , tree_function , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , battle_flags_id ; export normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 141
// begin Your_Side := mp_player_side ;
  79: LD_ADDR_OWVAR 2
  83: PUSH
  84: LD_OWVAR 7
  88: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  89: LD_ADDR_EXP 19
  93: PUSH
  94: LD_OWVAR 17
  98: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  99: LD_ADDR_EXP 16
 103: PUSH
 104: LD_OWVAR 15
 108: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 109: LD_ADDR_EXP 20
 113: PUSH
 114: LD_OWVAR 16
 118: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 119: LD_ADDR_EXP 18
 123: PUSH
 124: CALL 0 0 0
 128: ST_TO_ADDR
// Teams := mp_teams ;
 129: LD_ADDR_EXP 17
 133: PUSH
 134: LD_OWVAR 12
 138: ST_TO_ADDR
// end else
 139: GO 334
// begin Your_Side := 1 ;
 141: LD_ADDR_OWVAR 2
 145: PUSH
 146: LD_INT 1
 148: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 149: LD_ADDR_EXP 19
 153: PUSH
 154: LD_INT 1
 156: PUSH
 157: LD_INT 2
 159: PUSH
 160: LD_INT 3
 162: PUSH
 163: LD_INT 4
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 188: LD_ADDR_EXP 16
 192: PUSH
 193: LD_INT 1
 195: PUSH
 196: LD_INT 1
 198: PUSH
 199: LD_INT 2
 201: PUSH
 202: LD_INT 2
 204: PUSH
 205: LD_INT 0
 207: PUSH
 208: LD_INT 0
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 0 , 0 , 0 , 0 ] ;
 227: LD_ADDR_EXP 20
 231: PUSH
 232: LD_INT 1
 234: PUSH
 235: LD_INT 2
 237: PUSH
 238: LD_INT 3
 240: PUSH
 241: LD_INT 1
 243: PUSH
 244: LD_INT 0
 246: PUSH
 247: LD_INT 0
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 0
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: LIST
 264: LIST
 265: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 266: LD_ADDR_EXP 18
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: LD_INT 0
 279: PUSH
 280: LD_INT 0
 282: PUSH
 283: LD_INT 0
 285: PUSH
 286: LD_INT 0
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: LIST
 299: LIST
 300: LIST
 301: LIST
 302: LIST
 303: LIST
 304: ST_TO_ADDR
// Teams := [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 305: LD_ADDR_EXP 17
 309: PUSH
 310: LD_INT 1
 312: PUSH
 313: LD_INT 2
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: LD_INT 3
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 334: LD_ADDR_EXP 21
 338: PUSH
 339: LD_EXP 16
 343: PUSH
 344: LD_INT 0
 346: PUSH
 347: EMPTY
 348: LIST
 349: DIFF
 350: PUSH
 351: LD_INT 1
 353: GREATER
 354: ST_TO_ADDR
// if Multiplayer then
 355: LD_OWVAR 4
 359: IFFALSE 566
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 361: LD_ADDR_EXP 39
 365: PUSH
 366: LD_INT 0
 368: PPUSH
 369: CALL_OW 426
 373: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 374: LD_ADDR_EXP 40
 378: PUSH
 379: LD_INT 1
 381: PPUSH
 382: CALL_OW 426
 386: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 387: LD_ADDR_EXP 41
 391: PUSH
 392: LD_INT 2
 394: PPUSH
 395: CALL_OW 426
 399: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 400: LD_ADDR_EXP 42
 404: PUSH
 405: LD_INT 3
 407: PPUSH
 408: CALL_OW 426
 412: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 413: LD_ADDR_EXP 43
 417: PUSH
 418: LD_INT 4
 420: PPUSH
 421: CALL_OW 426
 425: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 426: LD_ADDR_EXP 44
 430: PUSH
 431: LD_INT 5
 433: PPUSH
 434: CALL_OW 426
 438: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 439: LD_ADDR_EXP 46
 443: PUSH
 444: LD_INT 10
 446: PPUSH
 447: CALL_OW 426
 451: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 452: LD_ADDR_EXP 47
 456: PUSH
 457: LD_INT 11
 459: PPUSH
 460: CALL_OW 426
 464: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 465: LD_ADDR_EXP 48
 469: PUSH
 470: LD_INT 12
 472: PPUSH
 473: CALL_OW 426
 477: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 13 ) ;
 478: LD_ADDR_EXP 50
 482: PUSH
 483: LD_INT 13
 485: PPUSH
 486: CALL_OW 426
 490: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 14 ) ;
 491: LD_ADDR_EXP 49
 495: PUSH
 496: LD_INT 14
 498: PPUSH
 499: CALL_OW 426
 503: ST_TO_ADDR
// def_tree_function := GetMultiplayerSetting ( 15 ) ;
 504: LD_ADDR_EXP 1
 508: PUSH
 509: LD_INT 15
 511: PPUSH
 512: CALL_OW 426
 516: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 517: LD_ADDR_EXP 51
 521: PUSH
 522: LD_INT 17
 524: PPUSH
 525: CALL_OW 426
 529: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 530: LD_ADDR_EXP 52
 534: PUSH
 535: LD_INT 20
 537: PPUSH
 538: CALL_OW 426
 542: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 543: LD_ADDR_VAR 0 3
 547: PUSH
 548: LD_INT 22
 550: PPUSH
 551: CALL_OW 426
 555: ST_TO_ADDR
// def_win_rules = 0 ;
 556: LD_ADDR_EXP 15
 560: PUSH
 561: LD_INT 0
 563: ST_TO_ADDR
// end else
 564: GO 698
// begin Randomize ;
 566: CALL_OW 10
// def_base_level := 2 ;
 570: LD_ADDR_EXP 39
 574: PUSH
 575: LD_INT 2
 577: ST_TO_ADDR
// def_amount_of_people := 1 ;
 578: LD_ADDR_EXP 40
 582: PUSH
 583: LD_INT 1
 585: ST_TO_ADDR
// def_skill_level := 1 ;
 586: LD_ADDR_EXP 41
 590: PUSH
 591: LD_INT 1
 593: ST_TO_ADDR
// def_starting_resources := 2 ;
 594: LD_ADDR_EXP 42
 598: PUSH
 599: LD_INT 2
 601: ST_TO_ADDR
// def_shipments_density := 50 ;
 602: LD_ADDR_EXP 43
 606: PUSH
 607: LD_INT 50
 609: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 610: LD_ADDR_EXP 44
 614: PUSH
 615: LD_INT 0
 617: ST_TO_ADDR
// def_shared_vision := 1 ;
 618: LD_ADDR_EXP 46
 622: PUSH
 623: LD_INT 1
 625: ST_TO_ADDR
// def_morale_flags := 1 ;
 626: LD_ADDR_EXP 47
 630: PUSH
 631: LD_INT 1
 633: ST_TO_ADDR
// def_siberite_detection := 1 ;
 634: LD_ADDR_EXP 48
 638: PUSH
 639: LD_INT 1
 641: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 642: LD_ADDR_EXP 50
 646: PUSH
 647: LD_INT 3
 649: ST_TO_ADDR
// def_people_respawning := 2 ;
 650: LD_ADDR_EXP 49
 654: PUSH
 655: LD_INT 2
 657: ST_TO_ADDR
// def_tree_function := 7 ;
 658: LD_ADDR_EXP 1
 662: PUSH
 663: LD_INT 7
 665: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 666: LD_ADDR_EXP 51
 670: PUSH
 671: LD_INT 0
 673: ST_TO_ADDR
// def_builduptime := 1 ;
 674: LD_ADDR_EXP 52
 678: PUSH
 679: LD_INT 1
 681: ST_TO_ADDR
// tech_level = 4 ;
 682: LD_ADDR_VAR 0 3
 686: PUSH
 687: LD_INT 4
 689: ST_TO_ADDR
// def_win_rules = 0 ;
 690: LD_ADDR_EXP 15
 694: PUSH
 695: LD_INT 0
 697: ST_TO_ADDR
// end ; if def_tree_function = 7 then
 698: LD_EXP 1
 702: PUSH
 703: LD_INT 7
 705: EQUAL
 706: IFFALSE 724
// def_tree_function := Rand ( 1 , 5 ) ;
 708: LD_ADDR_EXP 1
 712: PUSH
 713: LD_INT 1
 715: PPUSH
 716: LD_INT 5
 718: PPUSH
 719: CALL_OW 12
 723: ST_TO_ADDR
// InitGameRules ;
 724: CALL 8037 0 0
// if def_game_rules = 0 then
 728: LD_EXP 38
 732: PUSH
 733: LD_INT 0
 735: EQUAL
 736: IFFALSE 763
// begin if isSGUI then
 738: LD_OWVAR 83
 742: IFFALSE 750
// setMpTechs ( ) else
 744: CALL 12152 0 0
 748: GO 763
// begin SetMpTechLevel ( tech_level + 1 ) ;
 750: LD_VAR 0 3
 754: PUSH
 755: LD_INT 1
 757: PLUS
 758: PPUSH
 759: CALL 12299 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 763: LD_ADDR_EXP 2
 767: PUSH
 768: LD_INT 0
 770: PUSH
 771: LD_INT 1
 773: PUSH
 774: LD_INT 1
 776: PUSH
 777: LD_INT 1
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: LIST
 784: LIST
 785: PUSH
 786: LD_EXP 39
 790: PUSH
 791: LD_INT 1
 793: PLUS
 794: ARRAY
 795: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 , 3 ] [ def_base_level + 1 ] ;
 796: LD_ADDR_EXP 3
 800: PUSH
 801: LD_INT 0
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: LD_INT 2
 809: PUSH
 810: LD_INT 3
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: LIST
 817: LIST
 818: PUSH
 819: LD_EXP 39
 823: PUSH
 824: LD_INT 1
 826: PLUS
 827: ARRAY
 828: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 829: LD_ADDR_EXP 5
 833: PUSH
 834: LD_INT 2
 836: PUSH
 837: LD_INT 3
 839: PUSH
 840: LD_INT 4
 842: PUSH
 843: LD_INT 5
 845: PUSH
 846: EMPTY
 847: LIST
 848: LIST
 849: LIST
 850: LIST
 851: PUSH
 852: LD_EXP 41
 856: PUSH
 857: LD_INT 1
 859: PLUS
 860: ARRAY
 861: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 862: LD_ADDR_EXP 7
 866: PUSH
 867: LD_INT 0
 869: PUSH
 870: LD_INT 0
 872: PUSH
 873: LD_INT 0
 875: PUSH
 876: EMPTY
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_INT 30
 883: PUSH
 884: LD_INT 0
 886: PUSH
 887: LD_INT 0
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: LIST
 894: PUSH
 895: LD_INT 50
 897: PUSH
 898: LD_INT 20
 900: PUSH
 901: LD_INT 0
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: LIST
 908: PUSH
 909: LD_INT 80
 911: PUSH
 912: LD_INT 40
 914: PUSH
 915: LD_INT 20
 917: PUSH
 918: EMPTY
 919: LIST
 920: LIST
 921: LIST
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: LIST
 928: PUSH
 929: LD_EXP 42
 933: PUSH
 934: LD_INT 1
 936: PLUS
 937: ARRAY
 938: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 939: LD_ADDR_EXP 6
 943: PUSH
 944: LD_INT 10
 946: PUSH
 947: EMPTY
 948: LIST
 949: PUSH
 950: LD_INT 7
 952: PUSH
 953: LD_INT 14
 955: PUSH
 956: EMPTY
 957: LIST
 958: LIST
 959: PUSH
 960: LD_INT 6
 962: PUSH
 963: LD_INT 12
 965: PUSH
 966: LD_INT 18
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: LIST
 973: PUSH
 974: LD_INT 5
 976: PUSH
 977: LD_INT 10
 979: PUSH
 980: LD_INT 15
 982: PUSH
 983: LD_INT 20
 985: PUSH
 986: EMPTY
 987: LIST
 988: LIST
 989: LIST
 990: LIST
 991: PUSH
 992: EMPTY
 993: LIST
 994: LIST
 995: LIST
 996: LIST
 997: PUSH
 998: LD_EXP 42
1002: PUSH
1003: LD_INT 1
1005: PLUS
1006: ARRAY
1007: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1008: LD_ADDR_EXP 4
1012: PUSH
1013: LD_EXP 40
1017: PUSH
1018: LD_INT 4
1020: PLUS
1021: ST_TO_ADDR
// shipments_density := 150 - ( def_shipments_density + 1 ) ;
1022: LD_ADDR_EXP 8
1026: PUSH
1027: LD_INT 150
1029: PUSH
1030: LD_EXP 43
1034: PUSH
1035: LD_INT 1
1037: PLUS
1038: MINUS
1039: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1040: LD_ADDR_EXP 13
1044: PUSH
1045: LD_INT 0
1047: PUSH
1048: LD_INT 1
1050: PUSH
1051: LD_INT 2
1053: PUSH
1054: LD_INT 3
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: LIST
1061: LIST
1062: PUSH
1063: LD_EXP 50
1067: PUSH
1068: LD_INT 1
1070: PLUS
1071: ARRAY
1072: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1073: LD_ADDR_EXP 10
1077: PUSH
1078: LD_INT 0
1080: PUSH
1081: LD_INT 8400
1083: PUSH
1084: LD_INT 1750
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: LD_EXP 49
1096: PUSH
1097: LD_INT 1
1099: PLUS
1100: ARRAY
1101: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1102: LD_ADDR_EXP 11
1106: PUSH
1107: LD_INT 0
1109: PUSH
1110: LD_INT 21000
1112: PUSH
1113: LD_INT 4200
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: LIST
1120: PUSH
1121: LD_EXP 49
1125: PUSH
1126: LD_INT 1
1128: PLUS
1129: ARRAY
1130: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1131: LD_ADDR_EXP 9
1135: PUSH
1136: LD_INT 1
1138: NEG
1139: PUSH
1140: LD_INT 350
1142: PUSH
1143: LD_INT 700
1145: PUSH
1146: LD_INT 1400
1148: PUSH
1149: LD_INT 0
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: PUSH
1159: LD_EXP 47
1163: PUSH
1164: LD_INT 1
1166: PLUS
1167: ARRAY
1168: ST_TO_ADDR
// battle_flags_id := [ ] ;
1169: LD_ADDR_EXP 25
1173: PUSH
1174: EMPTY
1175: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1176: LD_ADDR_EXP 12
1180: PUSH
1181: LD_INT 0
1183: PUSH
1184: LD_INT 1
1186: PUSH
1187: LD_INT 63000
1189: PUSH
1190: LD_INT 126000
1192: PUSH
1193: LD_INT 189000
1195: PUSH
1196: LD_INT 252000
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: LIST
1203: LIST
1204: LIST
1205: LIST
1206: PUSH
1207: LD_EXP 51
1211: PUSH
1212: LD_INT 1
1214: PLUS
1215: ARRAY
1216: ST_TO_ADDR
// tree_function := [ [ 0 , 0 , 0 , 0 , 0 ] , [ 2 , 0 , 0 , 0 , 0 ] , [ 0 , 4 , 0 , 0 , 0 ] , [ 0 , 0 , 2 , 0 , 0 ] , [ 0 , 0 , 0 , 3 , 0 ] , [ 1 , 2 , 1 , 2 , 2 ] , [ 0 , 0 , 0 , 0 , 3 ] ] [ def_tree_function + 1 ] ;
1217: LD_ADDR_EXP 14
1221: PUSH
1222: LD_INT 0
1224: PUSH
1225: LD_INT 0
1227: PUSH
1228: LD_INT 0
1230: PUSH
1231: LD_INT 0
1233: PUSH
1234: LD_INT 0
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: PUSH
1244: LD_INT 2
1246: PUSH
1247: LD_INT 0
1249: PUSH
1250: LD_INT 0
1252: PUSH
1253: LD_INT 0
1255: PUSH
1256: LD_INT 0
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: PUSH
1266: LD_INT 0
1268: PUSH
1269: LD_INT 4
1271: PUSH
1272: LD_INT 0
1274: PUSH
1275: LD_INT 0
1277: PUSH
1278: LD_INT 0
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: LIST
1287: PUSH
1288: LD_INT 0
1290: PUSH
1291: LD_INT 0
1293: PUSH
1294: LD_INT 2
1296: PUSH
1297: LD_INT 0
1299: PUSH
1300: LD_INT 0
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: LIST
1307: LIST
1308: LIST
1309: PUSH
1310: LD_INT 0
1312: PUSH
1313: LD_INT 0
1315: PUSH
1316: LD_INT 0
1318: PUSH
1319: LD_INT 3
1321: PUSH
1322: LD_INT 0
1324: PUSH
1325: EMPTY
1326: LIST
1327: LIST
1328: LIST
1329: LIST
1330: LIST
1331: PUSH
1332: LD_INT 1
1334: PUSH
1335: LD_INT 2
1337: PUSH
1338: LD_INT 1
1340: PUSH
1341: LD_INT 2
1343: PUSH
1344: LD_INT 2
1346: PUSH
1347: EMPTY
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: PUSH
1354: LD_INT 0
1356: PUSH
1357: LD_INT 0
1359: PUSH
1360: LD_INT 0
1362: PUSH
1363: LD_INT 0
1365: PUSH
1366: LD_INT 3
1368: PUSH
1369: EMPTY
1370: LIST
1371: LIST
1372: LIST
1373: LIST
1374: LIST
1375: PUSH
1376: EMPTY
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: PUSH
1385: LD_EXP 1
1389: PUSH
1390: LD_INT 1
1392: PLUS
1393: ARRAY
1394: ST_TO_ADDR
// end ;
1395: LD_VAR 0 1
1399: RET
// function prepare_map_coordinates ; var side , dep , br1 , br2 , br3 , un , i , j ; begin
1400: LD_INT 0
1402: PPUSH
1403: PPUSH
1404: PPUSH
1405: PPUSH
1406: PPUSH
1407: PPUSH
1408: PPUSH
1409: PPUSH
1410: PPUSH
// depot_def = [ ] ;
1411: LD_ADDR_EXP 22
1415: PUSH
1416: EMPTY
1417: ST_TO_ADDR
// breastworks_def = [ ] ;
1418: LD_ADDR_EXP 23
1422: PUSH
1423: EMPTY
1424: ST_TO_ADDR
// for side := 1 to 4 do
1425: LD_ADDR_VAR 0 2
1429: PUSH
1430: DOUBLE
1431: LD_INT 1
1433: DEC
1434: ST_TO_ADDR
1435: LD_INT 4
1437: PUSH
1438: FOR_TO
1439: IFFALSE 1794
// begin dep := side * 4 - 3 ;
1441: LD_ADDR_VAR 0 3
1445: PUSH
1446: LD_VAR 0 2
1450: PUSH
1451: LD_INT 4
1453: MUL
1454: PUSH
1455: LD_INT 3
1457: MINUS
1458: ST_TO_ADDR
// br1 := side * 4 - 2 ;
1459: LD_ADDR_VAR 0 4
1463: PUSH
1464: LD_VAR 0 2
1468: PUSH
1469: LD_INT 4
1471: MUL
1472: PUSH
1473: LD_INT 2
1475: MINUS
1476: ST_TO_ADDR
// br2 := side * 4 - 1 ;
1477: LD_ADDR_VAR 0 5
1481: PUSH
1482: LD_VAR 0 2
1486: PUSH
1487: LD_INT 4
1489: MUL
1490: PUSH
1491: LD_INT 1
1493: MINUS
1494: ST_TO_ADDR
// br3 := side * 4 ;
1495: LD_ADDR_VAR 0 6
1499: PUSH
1500: LD_VAR 0 2
1504: PUSH
1505: LD_INT 4
1507: MUL
1508: ST_TO_ADDR
// depot_def := depot_def ^ [ [ GetX ( dep ) , GetY ( dep ) , GetDir ( dep ) ] ] ;
1509: LD_ADDR_EXP 22
1513: PUSH
1514: LD_EXP 22
1518: PUSH
1519: LD_VAR 0 3
1523: PPUSH
1524: CALL_OW 250
1528: PUSH
1529: LD_VAR 0 3
1533: PPUSH
1534: CALL_OW 251
1538: PUSH
1539: LD_VAR 0 3
1543: PPUSH
1544: CALL_OW 254
1548: PUSH
1549: EMPTY
1550: LIST
1551: LIST
1552: LIST
1553: PUSH
1554: EMPTY
1555: LIST
1556: ADD
1557: ST_TO_ADDR
// start_def := start_def ^ [ [ ShiftX ( GetX ( Dep ) , GetDir ( Dep ) , 6 ) , ShiftY ( GetY ( Dep ) , GetDir ( Dep ) , 6 ) ] ] ;
1558: LD_ADDR_EXP 24
1562: PUSH
1563: LD_EXP 24
1567: PUSH
1568: LD_VAR 0 3
1572: PPUSH
1573: CALL_OW 250
1577: PPUSH
1578: LD_VAR 0 3
1582: PPUSH
1583: CALL_OW 254
1587: PPUSH
1588: LD_INT 6
1590: PPUSH
1591: CALL_OW 272
1595: PUSH
1596: LD_VAR 0 3
1600: PPUSH
1601: CALL_OW 251
1605: PPUSH
1606: LD_VAR 0 3
1610: PPUSH
1611: CALL_OW 254
1615: PPUSH
1616: LD_INT 6
1618: PPUSH
1619: CALL_OW 273
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PUSH
1628: EMPTY
1629: LIST
1630: ADD
1631: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ GetX ( br1 ) , GetY ( br1 ) , GetDir ( br1 ) ] , [ GetX ( br2 ) , GetY ( br2 ) , GetDir ( br2 ) ] , [ GetX ( br3 ) , GetY ( br3 ) , GetDir ( br3 ) ] ] ] ;
1632: LD_ADDR_EXP 23
1636: PUSH
1637: LD_EXP 23
1641: PUSH
1642: LD_VAR 0 4
1646: PPUSH
1647: CALL_OW 250
1651: PUSH
1652: LD_VAR 0 4
1656: PPUSH
1657: CALL_OW 251
1661: PUSH
1662: LD_VAR 0 4
1666: PPUSH
1667: CALL_OW 254
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: LIST
1676: PUSH
1677: LD_VAR 0 5
1681: PPUSH
1682: CALL_OW 250
1686: PUSH
1687: LD_VAR 0 5
1691: PPUSH
1692: CALL_OW 251
1696: PUSH
1697: LD_VAR 0 5
1701: PPUSH
1702: CALL_OW 254
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: LIST
1711: PUSH
1712: LD_VAR 0 6
1716: PPUSH
1717: CALL_OW 250
1721: PUSH
1722: LD_VAR 0 6
1726: PPUSH
1727: CALL_OW 251
1731: PUSH
1732: LD_VAR 0 6
1736: PPUSH
1737: CALL_OW 254
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: LIST
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: LIST
1751: PUSH
1752: EMPTY
1753: LIST
1754: ADD
1755: ST_TO_ADDR
// DestroyUnit ( dep ) ;
1756: LD_VAR 0 3
1760: PPUSH
1761: CALL_OW 65
// DestroyUnit ( br1 ) ;
1765: LD_VAR 0 4
1769: PPUSH
1770: CALL_OW 65
// DestroyUnit ( br2 ) ;
1774: LD_VAR 0 5
1778: PPUSH
1779: CALL_OW 65
// DestroyUnit ( br3 ) ;
1783: LD_VAR 0 6
1787: PPUSH
1788: CALL_OW 65
// end ;
1792: GO 1438
1794: POP
1795: POP
// normal_oil_deposits_locations := [ [ 28 , 15 ] , [ 102 , 17 ] , [ 50 , 84 ] , [ 143 , 111 ] ] ;
1796: LD_ADDR_EXP 26
1800: PUSH
1801: LD_INT 28
1803: PUSH
1804: LD_INT 15
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: PUSH
1811: LD_INT 102
1813: PUSH
1814: LD_INT 17
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: PUSH
1821: LD_INT 50
1823: PUSH
1824: LD_INT 84
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: PUSH
1831: LD_INT 143
1833: PUSH
1834: LD_INT 111
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: PUSH
1841: EMPTY
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 28 , 15 ] , [ 52 , 44 ] ] , [ [ 102 , 17 ] , [ 84 , 37 ] ] , [ [ 50 , 84 ] , [ 74 , 81 ] ] , [ [ 143 , 111 ] , [ 106 , 77 ] ] , ] ;
1847: LD_ADDR_EXP 27
1851: PUSH
1852: LD_INT 28
1854: PUSH
1855: LD_INT 15
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 52
1864: PUSH
1865: LD_INT 44
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: PUSH
1872: EMPTY
1873: LIST
1874: LIST
1875: PUSH
1876: LD_INT 102
1878: PUSH
1879: LD_INT 17
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: PUSH
1886: LD_INT 84
1888: PUSH
1889: LD_INT 37
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: PUSH
1900: LD_INT 50
1902: PUSH
1903: LD_INT 84
1905: PUSH
1906: EMPTY
1907: LIST
1908: LIST
1909: PUSH
1910: LD_INT 74
1912: PUSH
1913: LD_INT 81
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 143
1926: PUSH
1927: LD_INT 111
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: PUSH
1934: LD_INT 106
1936: PUSH
1937: LD_INT 77
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: PUSH
1944: EMPTY
1945: LIST
1946: LIST
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 45 , 25 ] , [ 75 , 22 ] , [ 87 , 105 ] , [ 117 , 99 ] ] ;
1954: LD_ADDR_EXP 28
1958: PUSH
1959: LD_INT 45
1961: PUSH
1962: LD_INT 25
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: PUSH
1969: LD_INT 75
1971: PUSH
1972: LD_INT 22
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: PUSH
1979: LD_INT 87
1981: PUSH
1982: LD_INT 105
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: PUSH
1989: LD_INT 117
1991: PUSH
1992: LD_INT 99
1994: PUSH
1995: EMPTY
1996: LIST
1997: LIST
1998: PUSH
1999: EMPTY
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: ST_TO_ADDR
// for i = 1 to Side_Positions do
2005: LD_ADDR_VAR 0 8
2009: PUSH
2010: DOUBLE
2011: LD_INT 1
2013: DEC
2014: ST_TO_ADDR
2015: LD_EXP 19
2019: PUSH
2020: FOR_TO
2021: IFFALSE 2200
// begin if not Side_Positions [ i ] then
2023: LD_EXP 19
2027: PUSH
2028: LD_VAR 0 8
2032: ARRAY
2033: NOT
2034: IFFALSE 2038
// continue ;
2036: GO 2020
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2038: LD_EXP 28
2042: PUSH
2043: LD_EXP 19
2047: PUSH
2048: LD_VAR 0 8
2052: ARRAY
2053: ARRAY
2054: PUSH
2055: LD_INT 1
2057: ARRAY
2058: PPUSH
2059: LD_EXP 28
2063: PUSH
2064: LD_EXP 19
2068: PUSH
2069: LD_VAR 0 8
2073: ARRAY
2074: ARRAY
2075: PUSH
2076: LD_INT 2
2078: ARRAY
2079: PPUSH
2080: LD_INT 3
2082: PPUSH
2083: CALL_OW 62
// if def_extra_oil_deposits then
2087: LD_EXP 44
2091: IFFALSE 2149
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2093: LD_ADDR_VAR 0 9
2097: PUSH
2098: LD_EXP 27
2102: PUSH
2103: LD_EXP 19
2107: PUSH
2108: LD_VAR 0 8
2112: ARRAY
2113: ARRAY
2114: PUSH
2115: FOR_IN
2116: IFFALSE 2145
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2118: LD_VAR 0 9
2122: PUSH
2123: LD_INT 1
2125: ARRAY
2126: PPUSH
2127: LD_VAR 0 9
2131: PUSH
2132: LD_INT 2
2134: ARRAY
2135: PPUSH
2136: LD_INT 2
2138: PPUSH
2139: CALL_OW 62
2143: GO 2115
2145: POP
2146: POP
2147: GO 2198
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2149: LD_EXP 26
2153: PUSH
2154: LD_EXP 19
2158: PUSH
2159: LD_VAR 0 8
2163: ARRAY
2164: ARRAY
2165: PUSH
2166: LD_INT 1
2168: ARRAY
2169: PPUSH
2170: LD_EXP 26
2174: PUSH
2175: LD_EXP 19
2179: PUSH
2180: LD_VAR 0 8
2184: ARRAY
2185: ARRAY
2186: PUSH
2187: LD_INT 2
2189: ARRAY
2190: PPUSH
2191: LD_INT 2
2193: PPUSH
2194: CALL_OW 62
// end ;
2198: GO 2020
2200: POP
2201: POP
// end ;
2202: LD_VAR 0 1
2206: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2207: LD_INT 0
2209: PPUSH
2210: PPUSH
2211: PPUSH
// if not Team_Game then
2212: LD_EXP 21
2216: NOT
2217: IFFALSE 2315
// begin for i = 1 to 8 do
2219: LD_ADDR_VAR 0 2
2223: PUSH
2224: DOUBLE
2225: LD_INT 1
2227: DEC
2228: ST_TO_ADDR
2229: LD_INT 8
2231: PUSH
2232: FOR_TO
2233: IFFALSE 2311
// for j = 1 to 8 do
2235: LD_ADDR_VAR 0 3
2239: PUSH
2240: DOUBLE
2241: LD_INT 1
2243: DEC
2244: ST_TO_ADDR
2245: LD_INT 8
2247: PUSH
2248: FOR_TO
2249: IFFALSE 2307
// if i <> j then
2251: LD_VAR 0 2
2255: PUSH
2256: LD_VAR 0 3
2260: NONEQUAL
2261: IFFALSE 2285
// SetAttitude ( i , j , att_neutral , true ) else
2263: LD_VAR 0 2
2267: PPUSH
2268: LD_VAR 0 3
2272: PPUSH
2273: LD_INT 0
2275: PPUSH
2276: LD_INT 1
2278: PPUSH
2279: CALL_OW 80
2283: GO 2305
// SetAttitude ( i , j , att_friend , true ) ;
2285: LD_VAR 0 2
2289: PPUSH
2290: LD_VAR 0 3
2294: PPUSH
2295: LD_INT 1
2297: PPUSH
2298: LD_INT 1
2300: PPUSH
2301: CALL_OW 80
2305: GO 2248
2307: POP
2308: POP
2309: GO 2232
2311: POP
2312: POP
// end else
2313: GO 2490
// begin if def_shared_vision then
2315: LD_EXP 46
2319: IFFALSE 2384
// begin for i in Teams do
2321: LD_ADDR_VAR 0 2
2325: PUSH
2326: LD_EXP 17
2330: PUSH
2331: FOR_IN
2332: IFFALSE 2382
// for j = 2 to i do
2334: LD_ADDR_VAR 0 3
2338: PUSH
2339: DOUBLE
2340: LD_INT 2
2342: DEC
2343: ST_TO_ADDR
2344: LD_VAR 0 2
2348: PUSH
2349: FOR_TO
2350: IFFALSE 2378
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2352: LD_VAR 0 2
2356: PUSH
2357: LD_VAR 0 3
2361: ARRAY
2362: PPUSH
2363: LD_VAR 0 2
2367: PUSH
2368: LD_INT 1
2370: ARRAY
2371: PPUSH
2372: CALL_OW 343
2376: GO 2349
2378: POP
2379: POP
2380: GO 2331
2382: POP
2383: POP
// end ; for i = 1 to 8 do
2384: LD_ADDR_VAR 0 2
2388: PUSH
2389: DOUBLE
2390: LD_INT 1
2392: DEC
2393: ST_TO_ADDR
2394: LD_INT 8
2396: PUSH
2397: FOR_TO
2398: IFFALSE 2488
// for j = 1 to 8 do
2400: LD_ADDR_VAR 0 3
2404: PUSH
2405: DOUBLE
2406: LD_INT 1
2408: DEC
2409: ST_TO_ADDR
2410: LD_INT 8
2412: PUSH
2413: FOR_TO
2414: IFFALSE 2484
// if Side_Teams [ i ] = Side_Teams [ j ] then
2416: LD_EXP 16
2420: PUSH
2421: LD_VAR 0 2
2425: ARRAY
2426: PUSH
2427: LD_EXP 16
2431: PUSH
2432: LD_VAR 0 3
2436: ARRAY
2437: EQUAL
2438: IFFALSE 2462
// SetAttitude ( i , j , att_friend , true ) else
2440: LD_VAR 0 2
2444: PPUSH
2445: LD_VAR 0 3
2449: PPUSH
2450: LD_INT 1
2452: PPUSH
2453: LD_INT 1
2455: PPUSH
2456: CALL_OW 80
2460: GO 2482
// SetAttitude ( i , j , att_enemy , true ) ;
2462: LD_VAR 0 2
2466: PPUSH
2467: LD_VAR 0 3
2471: PPUSH
2472: LD_INT 2
2474: PPUSH
2475: LD_INT 1
2477: PPUSH
2478: CALL_OW 80
2482: GO 2413
2484: POP
2485: POP
2486: GO 2397
2488: POP
2489: POP
// end ; end ;
2490: LD_VAR 0 1
2494: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2495: LD_INT 0
2497: PPUSH
2498: PPUSH
2499: PPUSH
2500: PPUSH
// result := [ ] ;
2501: LD_ADDR_VAR 0 7
2505: PUSH
2506: EMPTY
2507: ST_TO_ADDR
// for i := 1 to count do
2508: LD_ADDR_VAR 0 8
2512: PUSH
2513: DOUBLE
2514: LD_INT 1
2516: DEC
2517: ST_TO_ADDR
2518: LD_VAR 0 1
2522: PUSH
2523: FOR_TO
2524: IFFALSE 2942
// begin uc_direction := Rand ( 0 , 5 ) ;
2526: LD_ADDR_OWVAR 24
2530: PUSH
2531: LD_INT 0
2533: PPUSH
2534: LD_INT 5
2536: PPUSH
2537: CALL_OW 12
2541: ST_TO_ADDR
// if commander then
2542: LD_LOC 1
2546: IFFALSE 2655
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2548: LD_ADDR_OWVAR 26
2552: PUSH
2553: LD_OWVAR 19
2557: PUSH
2558: LD_OWVAR 20
2562: ARRAY
2563: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2564: LD_INT 1
2566: PPUSH
2567: LD_INT 2
2569: PPUSH
2570: CALL_OW 12
2574: PPUSH
2575: LD_VAR 0 2
2579: PPUSH
2580: LD_EXP 5
2584: PUSH
2585: LD_INT 2
2587: PLUS
2588: PPUSH
2589: CALL_OW 380
// hc_importance := 105 ;
2593: LD_ADDR_OWVAR 32
2597: PUSH
2598: LD_INT 105
2600: ST_TO_ADDR
// commander := false ;
2601: LD_ADDR_LOC 1
2605: PUSH
2606: LD_INT 0
2608: ST_TO_ADDR
// if Multiplayer then
2609: LD_OWVAR 4
2613: IFFALSE 2653
// begin hc_gallery := MULTIAVATARS ;
2615: LD_ADDR_OWVAR 33
2619: PUSH
2620: LD_STRING MULTIAVATARS
2622: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2623: LD_ADDR_OWVAR 34
2627: PUSH
2628: LD_OWVAR 20
2632: PPUSH
2633: CALL_OW 525
2637: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2638: LD_ADDR_OWVAR 27
2642: PUSH
2643: LD_OWVAR 20
2647: PPUSH
2648: CALL_OW 526
2652: ST_TO_ADDR
// end ; end else
2653: GO 2718
// begin hc_name :=  ;
2655: LD_ADDR_OWVAR 26
2659: PUSH
2660: LD_STRING 
2662: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2663: LD_INT 1
2665: PPUSH
2666: LD_INT 2
2668: PPUSH
2669: CALL_OW 12
2673: PPUSH
2674: LD_VAR 0 2
2678: PPUSH
2679: LD_EXP 5
2683: PPUSH
2684: CALL_OW 380
// hc_importance := 0 ;
2688: LD_ADDR_OWVAR 32
2692: PUSH
2693: LD_INT 0
2695: ST_TO_ADDR
// if Multiplayer then
2696: LD_OWVAR 4
2700: IFFALSE 2718
// begin hc_gallery :=  ;
2702: LD_ADDR_OWVAR 33
2706: PUSH
2707: LD_STRING 
2709: ST_TO_ADDR
// hc_face_number := 0 ;
2710: LD_ADDR_OWVAR 34
2714: PUSH
2715: LD_INT 0
2717: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2718: LD_ADDR_VAR 0 10
2722: PUSH
2723: CALL_OW 44
2727: ST_TO_ADDR
// if global_defined then
2728: LD_LOC 3
2732: IFFALSE 2872
// begin if ( cl = class_soldier ) then
2734: LD_VAR 0 2
2738: PUSH
2739: LD_INT 1
2741: EQUAL
2742: IFFALSE 2762
// j := i + soldiers_created else
2744: LD_ADDR_VAR 0 9
2748: PUSH
2749: LD_VAR 0 8
2753: PUSH
2754: LD_LOC 4
2758: PLUS
2759: ST_TO_ADDR
2760: GO 2772
// j := i ;
2762: LD_ADDR_VAR 0 9
2766: PUSH
2767: LD_VAR 0 8
2771: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2772: LD_LOC 2
2776: PUSH
2777: LD_VAR 0 2
2781: ARRAY
2782: PUSH
2783: LD_VAR 0 9
2787: ARRAY
2788: PPUSH
2789: LD_VAR 0 10
2793: PPUSH
2794: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2798: LD_VAR 0 10
2802: PPUSH
2803: LD_INT 2
2805: PPUSH
2806: LD_LOC 2
2810: PUSH
2811: LD_VAR 0 2
2815: ARRAY
2816: PUSH
2817: LD_VAR 0 9
2821: ARRAY
2822: PPUSH
2823: LD_INT 2
2825: PPUSH
2826: CALL_OW 260
2830: PPUSH
2831: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2835: LD_VAR 0 10
2839: PPUSH
2840: LD_INT 1
2842: PPUSH
2843: LD_LOC 2
2847: PUSH
2848: LD_VAR 0 2
2852: ARRAY
2853: PUSH
2854: LD_VAR 0 9
2858: ARRAY
2859: PPUSH
2860: LD_INT 1
2862: PPUSH
2863: CALL_OW 260
2867: PPUSH
2868: CALL_OW 239
// end ; if building then
2872: LD_VAR 0 6
2876: IFFALSE 2894
// PlaceHumanInUnit ( un , building ) else
2878: LD_VAR 0 10
2882: PPUSH
2883: LD_VAR 0 6
2887: PPUSH
2888: CALL_OW 52
2892: GO 2921
// PlaceUnitXYR ( un , x , y , r , false ) ;
2894: LD_VAR 0 10
2898: PPUSH
2899: LD_VAR 0 3
2903: PPUSH
2904: LD_VAR 0 4
2908: PPUSH
2909: LD_VAR 0 5
2913: PPUSH
2914: LD_INT 0
2916: PPUSH
2917: CALL_OW 50
// result := result ^ [ un ] ;
2921: LD_ADDR_VAR 0 7
2925: PUSH
2926: LD_VAR 0 7
2930: PUSH
2931: LD_VAR 0 10
2935: PUSH
2936: EMPTY
2937: LIST
2938: ADD
2939: ST_TO_ADDR
// end ;
2940: GO 2523
2942: POP
2943: POP
// if not global_defined then
2944: LD_LOC 3
2948: NOT
2949: IFFALSE 3027
// if ( global_units >= cl ) then
2951: LD_LOC 2
2955: PUSH
2956: LD_VAR 0 2
2960: GREATEREQUAL
2961: IFFALSE 3002
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2963: LD_ADDR_LOC 2
2967: PUSH
2968: LD_LOC 2
2972: PPUSH
2973: LD_VAR 0 2
2977: PPUSH
2978: LD_LOC 2
2982: PUSH
2983: LD_VAR 0 2
2987: ARRAY
2988: PUSH
2989: LD_VAR 0 7
2993: ADD
2994: PPUSH
2995: CALL_OW 1
2999: ST_TO_ADDR
3000: GO 3027
// global_units := Replace ( global_units , cl , result ) ;
3002: LD_ADDR_LOC 2
3006: PUSH
3007: LD_LOC 2
3011: PPUSH
3012: LD_VAR 0 2
3016: PPUSH
3017: LD_VAR 0 7
3021: PPUSH
3022: CALL_OW 1
3026: ST_TO_ADDR
// if commander then
3027: LD_LOC 1
3031: IFFALSE 3078
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3033: LD_ADDR_EXP 29
3037: PUSH
3038: LD_EXP 29
3042: PPUSH
3043: LD_OWVAR 20
3047: PPUSH
3048: LD_EXP 29
3052: PUSH
3053: LD_OWVAR 20
3057: ARRAY
3058: PUSH
3059: LD_VAR 0 10
3063: ADD
3064: PPUSH
3065: CALL_OW 1
3069: ST_TO_ADDR
// commander := false ;
3070: LD_ADDR_LOC 1
3074: PUSH
3075: LD_INT 0
3077: ST_TO_ADDR
// end ; end ;
3078: LD_VAR 0 7
3082: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3083: LD_INT 0
3085: PPUSH
3086: PPUSH
3087: PPUSH
3088: PPUSH
3089: PPUSH
3090: PPUSH
3091: PPUSH
3092: PPUSH
3093: PPUSH
// if side in [ 0 , 9 ] then
3094: LD_VAR 0 1
3098: PUSH
3099: LD_INT 0
3101: PUSH
3102: LD_INT 9
3104: PUSH
3105: EMPTY
3106: LIST
3107: LIST
3108: IN
3109: IFFALSE 3113
// exit ;
3111: GO 4163
// pos := Side_Positions [ side ] ;
3113: LD_ADDR_VAR 0 3
3117: PUSH
3118: LD_EXP 19
3122: PUSH
3123: LD_VAR 0 1
3127: ARRAY
3128: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3129: LD_ADDR_OWVAR 21
3133: PUSH
3134: LD_EXP 20
3138: PUSH
3139: LD_VAR 0 1
3143: ARRAY
3144: ST_TO_ADDR
// uc_side := side ;
3145: LD_ADDR_OWVAR 20
3149: PUSH
3150: LD_VAR 0 1
3154: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3155: LD_ADDR_VAR 0 4
3159: PUSH
3160: LD_EXP 22
3164: PUSH
3165: LD_VAR 0 3
3169: ARRAY
3170: PUSH
3171: LD_INT 1
3173: ARRAY
3174: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3175: LD_ADDR_VAR 0 5
3179: PUSH
3180: LD_EXP 22
3184: PUSH
3185: LD_VAR 0 3
3189: ARRAY
3190: PUSH
3191: LD_INT 2
3193: ARRAY
3194: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3195: LD_ADDR_VAR 0 6
3199: PUSH
3200: LD_EXP 22
3204: PUSH
3205: LD_VAR 0 3
3209: ARRAY
3210: PUSH
3211: LD_INT 3
3213: ARRAY
3214: ST_TO_ADDR
// if is_depot then
3215: LD_EXP 2
3219: IFFALSE 3352
// begin bc_type = b_depot ;
3221: LD_ADDR_OWVAR 42
3225: PUSH
3226: LD_INT 0
3228: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3229: LD_ADDR_VAR 0 10
3233: PUSH
3234: LD_VAR 0 4
3238: PPUSH
3239: LD_VAR 0 5
3243: PPUSH
3244: LD_VAR 0 6
3248: PPUSH
3249: CALL_OW 47
3253: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3254: LD_VAR 0 10
3258: PPUSH
3259: LD_STRING @
3261: PUSH
3262: LD_VAR 0 1
3266: STR
3267: PPUSH
3268: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3272: LD_VAR 0 10
3276: PPUSH
3277: CALL_OW 274
3281: PPUSH
3282: LD_INT 1
3284: PPUSH
3285: LD_EXP 7
3289: PUSH
3290: LD_INT 1
3292: ARRAY
3293: PPUSH
3294: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3298: LD_VAR 0 10
3302: PPUSH
3303: CALL_OW 274
3307: PPUSH
3308: LD_INT 2
3310: PPUSH
3311: LD_EXP 7
3315: PUSH
3316: LD_INT 2
3318: ARRAY
3319: PPUSH
3320: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3324: LD_VAR 0 10
3328: PPUSH
3329: CALL_OW 274
3333: PPUSH
3334: LD_INT 3
3336: PPUSH
3337: LD_EXP 7
3341: PUSH
3342: LD_INT 3
3344: ARRAY
3345: PPUSH
3346: CALL_OW 277
// end else
3350: GO 3496
// begin for i := 1 to 3 do
3352: LD_ADDR_VAR 0 7
3356: PUSH
3357: DOUBLE
3358: LD_INT 1
3360: DEC
3361: ST_TO_ADDR
3362: LD_INT 3
3364: PUSH
3365: FOR_TO
3366: IFFALSE 3494
// begin r := starting_resources [ i ] ;
3368: LD_ADDR_VAR 0 8
3372: PUSH
3373: LD_EXP 7
3377: PUSH
3378: LD_VAR 0 7
3382: ARRAY
3383: ST_TO_ADDR
// while r >= 10 do
3384: LD_VAR 0 8
3388: PUSH
3389: LD_INT 10
3391: GREATEREQUAL
3392: IFFALSE 3492
// if r > 50 then
3394: LD_VAR 0 8
3398: PUSH
3399: LD_INT 50
3401: GREATER
3402: IFFALSE 3448
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3404: LD_VAR 0 7
3408: PPUSH
3409: LD_INT 5
3411: PPUSH
3412: LD_VAR 0 4
3416: PPUSH
3417: LD_VAR 0 5
3421: PPUSH
3422: LD_INT 4
3424: PPUSH
3425: LD_INT 0
3427: PPUSH
3428: CALL_OW 60
// r := r - 50 ;
3432: LD_ADDR_VAR 0 8
3436: PUSH
3437: LD_VAR 0 8
3441: PUSH
3442: LD_INT 50
3444: MINUS
3445: ST_TO_ADDR
// end else
3446: GO 3490
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3448: LD_VAR 0 7
3452: PPUSH
3453: LD_VAR 0 8
3457: PUSH
3458: LD_INT 10
3460: DIV
3461: PPUSH
3462: LD_VAR 0 4
3466: PPUSH
3467: LD_VAR 0 5
3471: PPUSH
3472: LD_INT 4
3474: PPUSH
3475: LD_INT 0
3477: PPUSH
3478: CALL_OW 60
// r := 0 ;
3482: LD_ADDR_VAR 0 8
3486: PUSH
3487: LD_INT 0
3489: ST_TO_ADDR
// end ;
3490: GO 3384
// end ;
3492: GO 3365
3494: POP
3495: POP
// end ; for r in starting_crates do
3496: LD_ADDR_VAR 0 8
3500: PUSH
3501: LD_EXP 6
3505: PUSH
3506: FOR_IN
3507: IFFALSE 3539
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3509: LD_INT 1
3511: PPUSH
3512: LD_INT 5
3514: PPUSH
3515: LD_VAR 0 4
3519: PPUSH
3520: LD_VAR 0 5
3524: PPUSH
3525: LD_VAR 0 8
3529: PPUSH
3530: LD_INT 0
3532: PPUSH
3533: CALL_OW 60
3537: GO 3506
3539: POP
3540: POP
// if def_morale_flags then
3541: LD_EXP 47
3545: IFFALSE 3684
// begin x := start_def [ pos ] [ 1 ] ;
3547: LD_ADDR_VAR 0 4
3551: PUSH
3552: LD_EXP 24
3556: PUSH
3557: LD_VAR 0 3
3561: ARRAY
3562: PUSH
3563: LD_INT 1
3565: ARRAY
3566: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3567: LD_ADDR_VAR 0 5
3571: PUSH
3572: LD_EXP 24
3576: PUSH
3577: LD_VAR 0 3
3581: ARRAY
3582: PUSH
3583: LD_INT 2
3585: ARRAY
3586: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3587: LD_VAR 0 4
3591: PPUSH
3592: LD_VAR 0 5
3596: PPUSH
3597: LD_INT 12
3599: PPUSH
3600: LD_INT 2
3602: PPUSH
3603: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3607: LD_ADDR_EXP 25
3611: PUSH
3612: LD_EXP 25
3616: PUSH
3617: LD_VAR 0 1
3621: PPUSH
3622: LD_VAR 0 4
3626: PPUSH
3627: LD_VAR 0 5
3631: PPUSH
3632: LD_INT 1
3634: PUSH
3635: LD_INT 100
3637: PUSH
3638: EMPTY
3639: LIST
3640: LIST
3641: PUSH
3642: LD_INT 2
3644: PUSH
3645: LD_INT 50
3647: PUSH
3648: EMPTY
3649: LIST
3650: LIST
3651: PUSH
3652: LD_INT 3
3654: PUSH
3655: LD_INT 20
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: PUSH
3662: LD_INT 20
3664: PUSH
3665: LD_INT 100
3667: PUSH
3668: EMPTY
3669: LIST
3670: LIST
3671: PUSH
3672: EMPTY
3673: LIST
3674: LIST
3675: LIST
3676: LIST
3677: PPUSH
3678: CALL_OW 418
3682: ADD
3683: ST_TO_ADDR
// end ; commander := true ;
3684: LD_ADDR_LOC 1
3688: PUSH
3689: LD_INT 1
3691: ST_TO_ADDR
// soldiers_created := 0 ;
3692: LD_ADDR_LOC 4
3696: PUSH
3697: LD_INT 0
3699: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3700: LD_ADDR_VAR 0 7
3704: PUSH
3705: DOUBLE
3706: LD_INT 1
3708: DEC
3709: ST_TO_ADDR
3710: LD_EXP 3
3714: PUSH
3715: FOR_TO
3716: IFFALSE 3869
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3718: LD_ADDR_VAR 0 4
3722: PUSH
3723: LD_EXP 23
3727: PUSH
3728: LD_VAR 0 3
3732: ARRAY
3733: PUSH
3734: LD_VAR 0 7
3738: ARRAY
3739: PUSH
3740: LD_INT 1
3742: ARRAY
3743: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3744: LD_ADDR_VAR 0 5
3748: PUSH
3749: LD_EXP 23
3753: PUSH
3754: LD_VAR 0 3
3758: ARRAY
3759: PUSH
3760: LD_VAR 0 7
3764: ARRAY
3765: PUSH
3766: LD_INT 2
3768: ARRAY
3769: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3770: LD_ADDR_VAR 0 6
3774: PUSH
3775: LD_EXP 23
3779: PUSH
3780: LD_VAR 0 3
3784: ARRAY
3785: PUSH
3786: LD_VAR 0 7
3790: ARRAY
3791: PUSH
3792: LD_INT 3
3794: ARRAY
3795: ST_TO_ADDR
// bc_type := b_breastwork ;
3796: LD_ADDR_OWVAR 42
3800: PUSH
3801: LD_INT 31
3803: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3804: LD_ADDR_VAR 0 9
3808: PUSH
3809: LD_VAR 0 4
3813: PPUSH
3814: LD_VAR 0 5
3818: PPUSH
3819: LD_VAR 0 6
3823: PPUSH
3824: CALL_OW 47
3828: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3829: LD_INT 1
3831: PPUSH
3832: LD_INT 1
3834: PPUSH
3835: LD_INT 0
3837: PPUSH
3838: LD_INT 0
3840: PPUSH
3841: LD_INT 0
3843: PPUSH
3844: LD_VAR 0 9
3848: PPUSH
3849: CALL 2495 0 6
// soldiers_created := soldiers_created + 1 ;
3853: LD_ADDR_LOC 4
3857: PUSH
3858: LD_LOC 4
3862: PUSH
3863: LD_INT 1
3865: PLUS
3866: ST_TO_ADDR
// end ;
3867: GO 3715
3869: POP
3870: POP
// x := start_def [ pos ] [ 1 ] ;
3871: LD_ADDR_VAR 0 4
3875: PUSH
3876: LD_EXP 24
3880: PUSH
3881: LD_VAR 0 3
3885: ARRAY
3886: PUSH
3887: LD_INT 1
3889: ARRAY
3890: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3891: LD_ADDR_VAR 0 5
3895: PUSH
3896: LD_EXP 24
3900: PUSH
3901: LD_VAR 0 3
3905: ARRAY
3906: PUSH
3907: LD_INT 2
3909: ARRAY
3910: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3911: LD_LOC 8
3915: PUSH
3916: LD_EXP 3
3920: MINUS
3921: PPUSH
3922: LD_INT 1
3924: PPUSH
3925: LD_VAR 0 4
3929: PPUSH
3930: LD_VAR 0 5
3934: PPUSH
3935: LD_INT 5
3937: PPUSH
3938: LD_INT 0
3940: PPUSH
3941: CALL 2495 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3945: LD_LOC 5
3949: PPUSH
3950: LD_INT 2
3952: PPUSH
3953: LD_VAR 0 4
3957: PPUSH
3958: LD_VAR 0 5
3962: PPUSH
3963: LD_INT 5
3965: PPUSH
3966: LD_INT 0
3968: PPUSH
3969: CALL 2495 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3973: LD_LOC 7
3977: PPUSH
3978: LD_INT 3
3980: PPUSH
3981: LD_VAR 0 4
3985: PPUSH
3986: LD_VAR 0 5
3990: PPUSH
3991: LD_INT 5
3993: PPUSH
3994: LD_INT 0
3996: PPUSH
3997: CALL 2495 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4001: LD_LOC 6
4005: PPUSH
4006: LD_INT 4
4008: PPUSH
4009: LD_VAR 0 4
4013: PPUSH
4014: LD_VAR 0 5
4018: PPUSH
4019: LD_INT 5
4021: PPUSH
4022: LD_INT 0
4024: PPUSH
4025: CALL 2495 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4029: LD_EXP 48
4033: PUSH
4034: LD_INT 20
4036: PPUSH
4037: LD_VAR 0 1
4041: PPUSH
4042: CALL_OW 321
4046: PUSH
4047: LD_INT 1
4049: EQUAL
4050: AND
4051: IFFALSE 4068
// SetTech ( tech_SibDet , side , state_researched ) ;
4053: LD_INT 20
4055: PPUSH
4056: LD_VAR 0 1
4060: PPUSH
4061: LD_INT 2
4063: PPUSH
4064: CALL_OW 322
// if def_siberite_bomb = 1 then
4068: LD_EXP 51
4072: PUSH
4073: LD_INT 1
4075: EQUAL
4076: IFFALSE 4110
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4078: LD_INT 25
4080: PPUSH
4081: LD_VAR 0 1
4085: PPUSH
4086: LD_INT 1
4088: PPUSH
4089: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4093: LD_INT 73
4095: PPUSH
4096: LD_VAR 0 1
4100: PPUSH
4101: LD_INT 1
4103: PPUSH
4104: CALL_OW 322
// end else
4108: GO 4140
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4110: LD_INT 25
4112: PPUSH
4113: LD_VAR 0 1
4117: PPUSH
4118: LD_INT 0
4120: PPUSH
4121: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4125: LD_INT 73
4127: PPUSH
4128: LD_VAR 0 1
4132: PPUSH
4133: LD_INT 0
4135: PPUSH
4136: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4140: LD_INT 24
4142: PPUSH
4143: LD_VAR 0 1
4147: PPUSH
4148: LD_INT 0
4150: PPUSH
4151: CALL_OW 322
// global_defined := true ;
4155: LD_ADDR_LOC 3
4159: PUSH
4160: LD_INT 1
4162: ST_TO_ADDR
// end ;
4163: LD_VAR 0 2
4167: RET
// every 0 0$1 do
4168: GO 4170
4170: DISABLE
// if ( def_siberite_bomb > 1 ) then
4171: LD_EXP 51
4175: PUSH
4176: LD_INT 1
4178: GREATER
4179: IFFALSE 4194
// begin wait ( siberite_bomb_Delay ) ;
4181: LD_EXP 12
4185: PPUSH
4186: CALL_OW 67
// EnableSibFiss ;
4190: CALL 4195 0 0
// end ;
4194: END
// function EnableSibFiss ; var i ; begin
4195: LD_INT 0
4197: PPUSH
4198: PPUSH
// for i := 1 to 8 do
4199: LD_ADDR_VAR 0 2
4203: PUSH
4204: DOUBLE
4205: LD_INT 1
4207: DEC
4208: ST_TO_ADDR
4209: LD_INT 8
4211: PUSH
4212: FOR_TO
4213: IFFALSE 4259
// if Side_Positions [ i ] then
4215: LD_EXP 19
4219: PUSH
4220: LD_VAR 0 2
4224: ARRAY
4225: IFFALSE 4257
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4227: LD_INT 25
4229: PPUSH
4230: LD_VAR 0 2
4234: PPUSH
4235: LD_INT 1
4237: PPUSH
4238: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4242: LD_INT 73
4244: PPUSH
4245: LD_VAR 0 2
4249: PPUSH
4250: LD_INT 1
4252: PPUSH
4253: CALL_OW 322
// end ;
4257: GO 4212
4259: POP
4260: POP
// end ;
4261: LD_VAR 0 1
4265: RET
// function prepare_sides ; var i ; begin
4266: LD_INT 0
4268: PPUSH
4269: PPUSH
// global_units := [ ] ;
4270: LD_ADDR_LOC 2
4274: PUSH
4275: EMPTY
4276: ST_TO_ADDR
// global_defined := false ;
4277: LD_ADDR_LOC 3
4281: PUSH
4282: LD_INT 0
4284: ST_TO_ADDR
// CountClassMembers ;
4285: CALL 4335 0 0
// for i := 1 to 8 do
4289: LD_ADDR_VAR 0 2
4293: PUSH
4294: DOUBLE
4295: LD_INT 1
4297: DEC
4298: ST_TO_ADDR
4299: LD_INT 8
4301: PUSH
4302: FOR_TO
4303: IFFALSE 4328
// if Side_Positions [ i ] then
4305: LD_EXP 19
4309: PUSH
4310: LD_VAR 0 2
4314: ARRAY
4315: IFFALSE 4326
// prepare_side ( i ) ;
4317: LD_VAR 0 2
4321: PPUSH
4322: CALL 3083 0 1
4326: GO 4302
4328: POP
4329: POP
// end ;
4330: LD_VAR 0 1
4334: RET
// function CountClassMembers ; var Mode ; begin
4335: LD_INT 0
4337: PPUSH
4338: PPUSH
// if No_Mechs then
4339: LD_EXP 53
4343: IFFALSE 4355
// Mode := 2 else
4345: LD_ADDR_VAR 0 2
4349: PUSH
4350: LD_INT 2
4352: ST_TO_ADDR
4353: GO 4363
// Mode := 1 ;
4355: LD_ADDR_VAR 0 2
4359: PUSH
4360: LD_INT 1
4362: ST_TO_ADDR
// neng := number_of_people ;
4363: LD_ADDR_LOC 5
4367: PUSH
4368: LD_EXP 4
4372: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4373: LD_ADDR_LOC 8
4377: PUSH
4378: LD_LOC 5
4382: PUSH
4383: LD_INT 4
4385: PUSH
4386: LD_INT 3
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: PUSH
4393: LD_VAR 0 2
4397: ARRAY
4398: DIV
4399: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4400: LD_LOC 8
4404: PUSH
4405: LD_EXP 3
4409: LESS
4410: IFFALSE 4422
// nsol := number_of_breastworks ;
4412: LD_ADDR_LOC 8
4416: PUSH
4417: LD_EXP 3
4421: ST_TO_ADDR
// neng := neng - nsol ;
4422: LD_ADDR_LOC 5
4426: PUSH
4427: LD_LOC 5
4431: PUSH
4432: LD_LOC 8
4436: MINUS
4437: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4438: LD_ADDR_LOC 6
4442: PUSH
4443: LD_LOC 5
4447: PUSH
4448: LD_INT 3
4450: PUSH
4451: LD_INT 2
4453: PUSH
4454: EMPTY
4455: LIST
4456: LIST
4457: PUSH
4458: LD_VAR 0 2
4462: ARRAY
4463: DIV
4464: ST_TO_ADDR
// if ( nsci < 1 ) then
4465: LD_LOC 6
4469: PUSH
4470: LD_INT 1
4472: LESS
4473: IFFALSE 4483
// nsci := 1 ;
4475: LD_ADDR_LOC 6
4479: PUSH
4480: LD_INT 1
4482: ST_TO_ADDR
// neng := neng - nsci ;
4483: LD_ADDR_LOC 5
4487: PUSH
4488: LD_LOC 5
4492: PUSH
4493: LD_LOC 6
4497: MINUS
4498: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4499: LD_ADDR_LOC 7
4503: PUSH
4504: LD_LOC 5
4508: PUSH
4509: LD_INT 2
4511: DIV
4512: PUSH
4513: LD_INT 0
4515: PUSH
4516: EMPTY
4517: LIST
4518: LIST
4519: PUSH
4520: LD_VAR 0 2
4524: ARRAY
4525: ST_TO_ADDR
// neng := neng - nmech ;
4526: LD_ADDR_LOC 5
4530: PUSH
4531: LD_LOC 5
4535: PUSH
4536: LD_LOC 7
4540: MINUS
4541: ST_TO_ADDR
// if ( neng < 1 ) then
4542: LD_LOC 5
4546: PUSH
4547: LD_INT 1
4549: LESS
4550: IFFALSE 4560
// neng := 1 ;
4552: LD_ADDR_LOC 5
4556: PUSH
4557: LD_INT 1
4559: ST_TO_ADDR
// end ;
4560: LD_VAR 0 1
4564: RET
// starting begin disable ( 98 ) ;
4565: LD_INT 98
4567: DISABLE_MARKED
// disable ( 99 ) ;
4568: LD_INT 99
4570: DISABLE_MARKED
// disable ( 400 ) ;
4571: LD_INT 400
4573: DISABLE_MARKED
// disable ( 401 ) ;
4574: LD_INT 401
4576: DISABLE_MARKED
// disable ( 600 ) ;
4577: LD_INT 600
4579: DISABLE_MARKED
// mp_selectmsg := true ;
4580: LD_ADDR_OWVAR 13
4584: PUSH
4585: LD_INT 1
4587: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4588: CALL 68 0 0
// prepare_map_coordinates ;
4592: CALL 1400 0 0
// set_shared_visions_and_alliances ;
4596: CALL 2207 0 0
// ResetFog ;
4600: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4604: LD_OWVAR 2
4608: PPUSH
4609: CALL_OW 520
// prepare_sides ;
4613: CALL 4266 0 0
// Init_Win_Condition ;
4617: CALL 16321 0 0
// InitLimits ;
4621: CALL 10169 0 0
// ShowTimer ;
4625: CALL 11106 0 0
// init_shipments_and_respawning ;
4629: CALL 5778 0 0
// music_nat := Side_Nations [ your_side ] ;
4633: LD_ADDR_OWVAR 71
4637: PUSH
4638: LD_EXP 20
4642: PUSH
4643: LD_OWVAR 2
4647: ARRAY
4648: ST_TO_ADDR
// if IAmSpec then
4649: CALL_OW 531
4653: IFFALSE 4677
// begin fogoff ( true ) ;
4655: LD_INT 1
4657: PPUSH
4658: CALL_OW 344
// CenterNowOnXY ( 79 , 59 ) ;
4662: LD_INT 79
4664: PPUSH
4665: LD_INT 59
4667: PPUSH
4668: CALL_OW 86
// enable ( 400 ) ;
4672: LD_INT 400
4674: ENABLE_MARKED
// end else
4675: GO 4723
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4677: LD_EXP 24
4681: PUSH
4682: LD_EXP 19
4686: PUSH
4687: LD_OWVAR 2
4691: ARRAY
4692: ARRAY
4693: PUSH
4694: LD_INT 1
4696: ARRAY
4697: PPUSH
4698: LD_EXP 24
4702: PUSH
4703: LD_EXP 19
4707: PUSH
4708: LD_OWVAR 2
4712: ARRAY
4713: ARRAY
4714: PUSH
4715: LD_INT 2
4717: ARRAY
4718: PPUSH
4719: CALL_OW 86
// end ; AnimateTrees ( true ) ;
4723: LD_INT 1
4725: PPUSH
4726: CALL_OW 573
// InitApeman ;
4730: CALL 4953 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] ;
4734: LD_ADDR_EXP 56
4738: PUSH
4739: LD_INT 8
4741: PUSH
4742: LD_INT 11
4744: PUSH
4745: LD_INT 9
4747: PUSH
4748: LD_INT 10
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: ST_TO_ADDR
// BeginBuildUp ;
4757: CALL 11315 0 0
// end ; end_of_file
4761: END
// every 20 20$00 trigger apemanNumber do
4762: LD_EXP 30
4766: IFFALSE 4799
4768: GO 4770
4770: DISABLE
// begin enable ;
4771: ENABLE
// if apeLevel >= 8 then
4772: LD_EXP 35
4776: PUSH
4777: LD_INT 8
4779: GREATEREQUAL
4780: IFFALSE 4785
// disable else
4782: DISABLE
4783: GO 4799
// apeLevel := apeLevel + 1 ;
4785: LD_ADDR_EXP 35
4789: PUSH
4790: LD_EXP 35
4794: PUSH
4795: LD_INT 1
4797: PLUS
4798: ST_TO_ADDR
// end ;
4799: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
4800: LD_EXP 30
4804: PUSH
4805: LD_EXP 31
4809: LESS
4810: IFFALSE 4950
4812: GO 4814
4814: DISABLE
4815: LD_INT 0
4817: PPUSH
4818: PPUSH
4819: PPUSH
4820: PPUSH
// begin enable ;
4821: ENABLE
// for i := 1 to apemanPos do
4822: LD_ADDR_VAR 0 1
4826: PUSH
4827: DOUBLE
4828: LD_INT 1
4830: DEC
4831: ST_TO_ADDR
4832: LD_EXP 33
4836: PUSH
4837: FOR_TO
4838: IFFALSE 4948
// begin if apemanPlayerCount [ i ] then
4840: LD_EXP 34
4844: PUSH
4845: LD_VAR 0 1
4849: ARRAY
4850: IFFALSE 4946
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
4852: LD_EXP 34
4856: PUSH
4857: LD_VAR 0 1
4861: ARRAY
4862: PUSH
4863: LD_EXP 33
4867: PUSH
4868: LD_VAR 0 1
4872: ARRAY
4873: GREATER
4874: IFFALSE 4946
// begin ape := PrepareApeman ;
4876: LD_ADDR_VAR 0 2
4880: PUSH
4881: CALL 5453 0 0
4885: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
4886: LD_VAR 0 2
4890: PPUSH
4891: LD_EXP 36
4895: PUSH
4896: LD_VAR 0 1
4900: ARRAY
4901: PPUSH
4902: LD_INT 0
4904: PPUSH
4905: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
4909: LD_ADDR_EXP 33
4913: PUSH
4914: LD_EXP 33
4918: PPUSH
4919: LD_VAR 0 1
4923: PPUSH
4924: LD_EXP 33
4928: PUSH
4929: LD_VAR 0 1
4933: ARRAY
4934: PUSH
4935: LD_VAR 0 2
4939: UNION
4940: PPUSH
4941: CALL_OW 1
4945: ST_TO_ADDR
// end ; end ; end ;
4946: GO 4837
4948: POP
4949: POP
// end ;
4950: PPOPN 4
4952: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
4953: LD_INT 0
4955: PPUSH
4956: PPUSH
4957: PPUSH
4958: PPUSH
4959: PPUSH
4960: PPUSH
4961: PPUSH
// playersAmount := 0 ;
4962: LD_ADDR_VAR 0 3
4966: PUSH
4967: LD_INT 0
4969: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , ] ;
4970: LD_ADDR_VAR 0 7
4974: PUSH
4975: LD_INT 13
4977: PUSH
4978: LD_INT 14
4980: PUSH
4981: LD_INT 15
4983: PUSH
4984: LD_INT 16
4986: PUSH
4987: EMPTY
4988: LIST
4989: LIST
4990: LIST
4991: LIST
4992: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4993: LD_ADDR_EXP 36
4997: PUSH
4998: LD_INT 0
5000: PUSH
5001: LD_INT 0
5003: PUSH
5004: LD_INT 0
5006: PUSH
5007: LD_INT 0
5009: PUSH
5010: LD_INT 0
5012: PUSH
5013: LD_INT 0
5015: PUSH
5016: LD_INT 0
5018: PUSH
5019: LD_INT 0
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: ST_TO_ADDR
// for j = 1 to Side_Positions do
5032: LD_ADDR_VAR 0 4
5036: PUSH
5037: DOUBLE
5038: LD_INT 1
5040: DEC
5041: ST_TO_ADDR
5042: LD_EXP 19
5046: PUSH
5047: FOR_TO
5048: IFFALSE 5115
// if Side_Positions [ j ] then
5050: LD_EXP 19
5054: PUSH
5055: LD_VAR 0 4
5059: ARRAY
5060: IFFALSE 5113
// begin playersAmount := playersAmount + 1 ;
5062: LD_ADDR_VAR 0 3
5066: PUSH
5067: LD_VAR 0 3
5071: PUSH
5072: LD_INT 1
5074: PLUS
5075: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5076: LD_ADDR_EXP 36
5080: PUSH
5081: LD_EXP 36
5085: PPUSH
5086: LD_VAR 0 4
5090: PPUSH
5091: LD_VAR 0 7
5095: PUSH
5096: LD_EXP 19
5100: PUSH
5101: LD_VAR 0 4
5105: ARRAY
5106: ARRAY
5107: PPUSH
5108: CALL_OW 1
5112: ST_TO_ADDR
// end ;
5113: GO 5047
5115: POP
5116: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5117: LD_ADDR_EXP 32
5121: PUSH
5122: LD_INT 3
5124: PUSH
5125: LD_EXP 13
5129: MUL
5130: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5131: LD_ADDR_EXP 30
5135: PUSH
5136: LD_VAR 0 3
5140: PUSH
5141: LD_EXP 32
5145: MUL
5146: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5147: LD_ADDR_EXP 31
5151: PUSH
5152: LD_EXP 30
5156: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5157: LD_ADDR_EXP 33
5161: PUSH
5162: LD_INT 0
5164: PUSH
5165: LD_INT 0
5167: PUSH
5168: LD_INT 0
5170: PUSH
5171: LD_INT 0
5173: PUSH
5174: LD_INT 0
5176: PUSH
5177: LD_INT 0
5179: PUSH
5180: LD_INT 0
5182: PUSH
5183: LD_INT 0
5185: PUSH
5186: EMPTY
5187: LIST
5188: LIST
5189: LIST
5190: LIST
5191: LIST
5192: LIST
5193: LIST
5194: LIST
5195: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5196: LD_ADDR_EXP 34
5200: PUSH
5201: LD_INT 0
5203: PUSH
5204: LD_INT 0
5206: PUSH
5207: LD_INT 0
5209: PUSH
5210: LD_INT 0
5212: PUSH
5213: LD_INT 0
5215: PUSH
5216: LD_INT 0
5218: PUSH
5219: LD_INT 0
5221: PUSH
5222: LD_INT 0
5224: PUSH
5225: EMPTY
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: ST_TO_ADDR
// apeLevel := 1 ;
5235: LD_ADDR_EXP 35
5239: PUSH
5240: LD_INT 1
5242: ST_TO_ADDR
// if not apemanNumber then
5243: LD_EXP 30
5247: NOT
5248: IFFALSE 5252
// exit ;
5250: GO 5448
// for i := 1 to apemanPerPlayer do
5252: LD_ADDR_VAR 0 2
5256: PUSH
5257: DOUBLE
5258: LD_INT 1
5260: DEC
5261: ST_TO_ADDR
5262: LD_EXP 32
5266: PUSH
5267: FOR_TO
5268: IFFALSE 5446
// begin for j := 1 to Side_Positions do
5270: LD_ADDR_VAR 0 4
5274: PUSH
5275: DOUBLE
5276: LD_INT 1
5278: DEC
5279: ST_TO_ADDR
5280: LD_EXP 19
5284: PUSH
5285: FOR_TO
5286: IFFALSE 5442
// if Side_Positions [ j ] then
5288: LD_EXP 19
5292: PUSH
5293: LD_VAR 0 4
5297: ARRAY
5298: IFFALSE 5440
// begin pos := Side_Positions [ j ] ;
5300: LD_ADDR_VAR 0 6
5304: PUSH
5305: LD_EXP 19
5309: PUSH
5310: LD_VAR 0 4
5314: ARRAY
5315: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5316: LD_ADDR_EXP 34
5320: PUSH
5321: LD_EXP 34
5325: PPUSH
5326: LD_VAR 0 4
5330: PPUSH
5331: LD_EXP 34
5335: PUSH
5336: LD_VAR 0 4
5340: ARRAY
5341: PUSH
5342: LD_INT 1
5344: PLUS
5345: PPUSH
5346: CALL_OW 1
5350: ST_TO_ADDR
// ape := PrepareApeman ;
5351: LD_ADDR_VAR 0 5
5355: PUSH
5356: CALL 5453 0 0
5360: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5361: LD_ADDR_EXP 33
5365: PUSH
5366: LD_EXP 33
5370: PPUSH
5371: LD_VAR 0 4
5375: PPUSH
5376: LD_EXP 33
5380: PUSH
5381: LD_VAR 0 4
5385: ARRAY
5386: PPUSH
5387: LD_EXP 33
5391: PUSH
5392: LD_VAR 0 4
5396: ARRAY
5397: PUSH
5398: LD_INT 1
5400: PLUS
5401: PPUSH
5402: LD_VAR 0 5
5406: PPUSH
5407: CALL_OW 1
5411: PPUSH
5412: CALL_OW 1
5416: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5417: LD_VAR 0 5
5421: PPUSH
5422: LD_EXP 36
5426: PUSH
5427: LD_VAR 0 4
5431: ARRAY
5432: PPUSH
5433: LD_INT 0
5435: PPUSH
5436: CALL_OW 49
// end ;
5440: GO 5285
5442: POP
5443: POP
// end ;
5444: GO 5267
5446: POP
5447: POP
// end ;
5448: LD_VAR 0 1
5452: RET
// export function PrepareApeman ; var bonus ; begin
5453: LD_INT 0
5455: PPUSH
5456: PPUSH
// uc_side := 0 ;
5457: LD_ADDR_OWVAR 20
5461: PUSH
5462: LD_INT 0
5464: ST_TO_ADDR
// uc_nation := 0 ;
5465: LD_ADDR_OWVAR 21
5469: PUSH
5470: LD_INT 0
5472: ST_TO_ADDR
// InitHc ;
5473: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
5477: LD_ADDR_VAR 0 2
5481: PUSH
5482: LD_INT 1
5484: NEG
5485: PUSH
5486: LD_INT 0
5488: PUSH
5489: LD_INT 1
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: LIST
5496: PUSH
5497: LD_OWVAR 1
5501: PUSH
5502: LD_INT 3
5504: MOD
5505: PUSH
5506: LD_INT 1
5508: PLUS
5509: ARRAY
5510: ST_TO_ADDR
// hc_class := class_apeman ;
5511: LD_ADDR_OWVAR 28
5515: PUSH
5516: LD_INT 12
5518: ST_TO_ADDR
// hc_gallery :=  ;
5519: LD_ADDR_OWVAR 33
5523: PUSH
5524: LD_STRING 
5526: ST_TO_ADDR
// hc_name :=  ;
5527: LD_ADDR_OWVAR 26
5531: PUSH
5532: LD_STRING 
5534: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
5535: LD_ADDR_OWVAR 31
5539: PUSH
5540: LD_EXP 35
5544: PUSH
5545: LD_VAR 0 2
5549: PLUS
5550: PUSH
5551: LD_EXP 35
5555: PUSH
5556: LD_VAR 0 2
5560: PLUS
5561: PUSH
5562: LD_EXP 35
5566: PUSH
5567: LD_VAR 0 2
5571: PLUS
5572: PUSH
5573: LD_EXP 35
5577: PUSH
5578: LD_VAR 0 2
5582: PLUS
5583: PUSH
5584: EMPTY
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
5590: LD_ADDR_OWVAR 35
5594: PUSH
5595: LD_INT 10
5597: PUSH
5598: LD_VAR 0 2
5602: MUL
5603: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5604: LD_ADDR_OWVAR 29
5608: PUSH
5609: LD_INT 12
5611: PUSH
5612: LD_INT 10
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: ST_TO_ADDR
// result := CreateHuman ;
5619: LD_ADDR_VAR 0 1
5623: PUSH
5624: CALL_OW 44
5628: ST_TO_ADDR
// end ;
5629: LD_VAR 0 1
5633: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
5634: LD_INT 0
5636: PPUSH
5637: PPUSH
5638: PPUSH
// if not ape then
5639: LD_VAR 0 1
5643: NOT
5644: IFFALSE 5648
// exit ;
5646: GO 5773
// side := GetSide ( ape ) ;
5648: LD_ADDR_VAR 0 3
5652: PUSH
5653: LD_VAR 0 1
5657: PPUSH
5658: CALL_OW 255
5662: ST_TO_ADDR
// if not side then
5663: LD_VAR 0 3
5667: NOT
5668: IFFALSE 5722
// begin for i = 1 to apemanPos do
5670: LD_ADDR_VAR 0 4
5674: PUSH
5675: DOUBLE
5676: LD_INT 1
5678: DEC
5679: ST_TO_ADDR
5680: LD_EXP 33
5684: PUSH
5685: FOR_TO
5686: IFFALSE 5720
// if ape in apemanPos [ i ] then
5688: LD_VAR 0 1
5692: PUSH
5693: LD_EXP 33
5697: PUSH
5698: LD_VAR 0 4
5702: ARRAY
5703: IN
5704: IFFALSE 5718
// begin side := i ;
5706: LD_ADDR_VAR 0 3
5710: PUSH
5711: LD_VAR 0 4
5715: ST_TO_ADDR
// break ;
5716: GO 5720
// end ;
5718: GO 5685
5720: POP
5721: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
5722: LD_ADDR_EXP 33
5726: PUSH
5727: LD_EXP 33
5731: PPUSH
5732: LD_VAR 0 3
5736: PPUSH
5737: LD_EXP 33
5741: PUSH
5742: LD_VAR 0 3
5746: ARRAY
5747: PUSH
5748: LD_VAR 0 1
5752: DIFF
5753: PPUSH
5754: CALL_OW 1
5758: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
5759: LD_ADDR_EXP 30
5763: PUSH
5764: LD_EXP 30
5768: PUSH
5769: LD_INT 1
5771: MINUS
5772: ST_TO_ADDR
// end ; end_of_file
5773: LD_VAR 0 2
5777: RET
// var shipment , respawn , inqueue ; export function init_shipments_and_respawning ; begin
5778: LD_INT 0
5780: PPUSH
// respawn := Rand ( 1 , 8 ) ;
5781: LD_ADDR_LOC 10
5785: PUSH
5786: LD_INT 1
5788: PPUSH
5789: LD_INT 8
5791: PPUSH
5792: CALL_OW 12
5796: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5797: LD_ADDR_LOC 11
5801: PUSH
5802: LD_INT 0
5804: PUSH
5805: LD_INT 0
5807: PUSH
5808: LD_INT 0
5810: PUSH
5811: LD_INT 0
5813: PUSH
5814: LD_INT 0
5816: PUSH
5817: LD_INT 0
5819: PUSH
5820: LD_INT 0
5822: PUSH
5823: LD_INT 0
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: LIST
5830: LIST
5831: LIST
5832: LIST
5833: LIST
5834: LIST
5835: ST_TO_ADDR
// end ;
5836: LD_VAR 0 1
5840: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
5841: GO 5843
5843: DISABLE
5844: LD_INT 0
5846: PPUSH
5847: PPUSH
5848: PPUSH
5849: PPUSH
// begin if respawning_time_max = 0 then
5850: LD_EXP 11
5854: PUSH
5855: LD_INT 0
5857: EQUAL
5858: IFFALSE 5862
// exit ;
5860: GO 6316
// if respawn = 8 then
5862: LD_LOC 10
5866: PUSH
5867: LD_INT 8
5869: EQUAL
5870: IFFALSE 5882
// respawn := 1 else
5872: LD_ADDR_LOC 10
5876: PUSH
5877: LD_INT 1
5879: ST_TO_ADDR
5880: GO 5896
// respawn := respawn + 1 ;
5882: LD_ADDR_LOC 10
5886: PUSH
5887: LD_LOC 10
5891: PUSH
5892: LD_INT 1
5894: PLUS
5895: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
5896: LD_EXP 19
5900: PUSH
5901: LD_LOC 10
5905: ARRAY
5906: PUSH
5907: LD_LOC 11
5911: PUSH
5912: LD_LOC 10
5916: ARRAY
5917: NOT
5918: AND
5919: IFFALSE 6315
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
5921: LD_ADDR_VAR 0 1
5925: PUSH
5926: LD_INT 21
5928: PUSH
5929: LD_INT 1
5931: PUSH
5932: EMPTY
5933: LIST
5934: LIST
5935: PUSH
5936: LD_INT 22
5938: PUSH
5939: LD_LOC 10
5943: PUSH
5944: EMPTY
5945: LIST
5946: LIST
5947: PUSH
5948: LD_INT 3
5950: PUSH
5951: LD_INT 23
5953: PUSH
5954: LD_INT 0
5956: PUSH
5957: EMPTY
5958: LIST
5959: LIST
5960: PUSH
5961: EMPTY
5962: LIST
5963: LIST
5964: LIST
5965: LIST
5966: PPUSH
5967: CALL_OW 69
5971: ST_TO_ADDR
// if n < number_of_people then
5972: LD_VAR 0 1
5976: PUSH
5977: LD_EXP 4
5981: LESS
5982: IFFALSE 6312
// begin aktresp := respawn ;
5984: LD_ADDR_VAR 0 3
5988: PUSH
5989: LD_LOC 10
5993: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
5994: LD_ADDR_LOC 11
5998: PUSH
5999: LD_LOC 11
6003: PPUSH
6004: LD_VAR 0 3
6008: PPUSH
6009: LD_INT 1
6011: PPUSH
6012: CALL_OW 1
6016: ST_TO_ADDR
// enable ;
6017: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
6018: LD_EXP 10
6022: PPUSH
6023: LD_EXP 11
6027: PPUSH
6028: CALL_OW 12
6032: PPUSH
6033: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
6037: LD_ADDR_LOC 11
6041: PUSH
6042: LD_LOC 11
6046: PPUSH
6047: LD_VAR 0 3
6051: PPUSH
6052: LD_INT 0
6054: PPUSH
6055: CALL_OW 1
6059: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
6060: LD_ADDR_VAR 0 2
6064: PUSH
6065: LD_INT 21
6067: PUSH
6068: LD_INT 3
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: PUSH
6075: LD_INT 2
6077: PUSH
6078: LD_INT 30
6080: PUSH
6081: LD_INT 0
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: PUSH
6088: LD_INT 30
6090: PUSH
6091: LD_INT 1
6093: PUSH
6094: EMPTY
6095: LIST
6096: LIST
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: LIST
6102: PUSH
6103: LD_INT 50
6105: PUSH
6106: EMPTY
6107: LIST
6108: PUSH
6109: LD_INT 22
6111: PUSH
6112: LD_VAR 0 3
6116: PUSH
6117: EMPTY
6118: LIST
6119: LIST
6120: PUSH
6121: EMPTY
6122: LIST
6123: LIST
6124: LIST
6125: LIST
6126: PPUSH
6127: CALL_OW 69
6131: ST_TO_ADDR
// if building_list = 0 then
6132: LD_VAR 0 2
6136: PUSH
6137: LD_INT 0
6139: EQUAL
6140: IFFALSE 6144
// exit ;
6142: GO 6316
// hc_name :=  ;
6144: LD_ADDR_OWVAR 26
6148: PUSH
6149: LD_STRING 
6151: ST_TO_ADDR
// hc_importance := 0 ;
6152: LD_ADDR_OWVAR 32
6156: PUSH
6157: LD_INT 0
6159: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6160: LD_INT 0
6162: PPUSH
6163: LD_INT 0
6165: PPUSH
6166: LD_EXP 5
6170: PUSH
6171: LD_INT 2
6173: DIV
6174: PPUSH
6175: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
6179: LD_ADDR_OWVAR 21
6183: PUSH
6184: LD_EXP 20
6188: PUSH
6189: LD_VAR 0 3
6193: ARRAY
6194: ST_TO_ADDR
// uc_side := aktresp ;
6195: LD_ADDR_OWVAR 20
6199: PUSH
6200: LD_VAR 0 3
6204: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
6205: LD_ADDR_VAR 0 4
6209: PUSH
6210: LD_VAR 0 2
6214: PUSH
6215: LD_INT 1
6217: PPUSH
6218: LD_VAR 0 2
6222: PUSH
6223: LD_INT 0
6225: PLUS
6226: PPUSH
6227: CALL_OW 12
6231: ARRAY
6232: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
6233: LD_VAR 0 4
6237: PPUSH
6238: CALL_OW 266
6242: PUSH
6243: LD_INT 0
6245: PUSH
6246: LD_INT 1
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: IN
6253: IFFALSE 6265
// n = 25 else
6255: LD_ADDR_VAR 0 1
6259: PUSH
6260: LD_INT 25
6262: ST_TO_ADDR
6263: GO 6273
// n = 10 ;
6265: LD_ADDR_VAR 0 1
6269: PUSH
6270: LD_INT 10
6272: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
6273: CALL_OW 44
6277: PPUSH
6278: LD_VAR 0 4
6282: PPUSH
6283: CALL_OW 250
6287: PPUSH
6288: LD_VAR 0 4
6292: PPUSH
6293: CALL_OW 251
6297: PPUSH
6298: LD_VAR 0 1
6302: PPUSH
6303: LD_INT 1
6305: PPUSH
6306: CALL_OW 50
// end else
6310: GO 6313
// enable ;
6312: ENABLE
// end else
6313: GO 6316
// enable ;
6315: ENABLE
// end ;
6316: PPOPN 4
6318: END
// every 1 1$0 + 0 0$0.3 do
6319: GO 6321
6321: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
6322: LD_INT 4
6324: PPUSH
6325: LD_INT 5
6327: PPUSH
6328: CALL_OW 12
6332: PPUSH
6333: LD_INT 1
6335: PPUSH
6336: CALL_OW 57
// enable ;
6340: ENABLE
// end ;
6341: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
6342: GO 6344
6344: DISABLE
6345: LD_INT 0
6347: PPUSH
6348: PPUSH
// begin case tick of 1 .. 1 1$0 :
6349: LD_OWVAR 1
6353: PUSH
6354: LD_INT 1
6356: DOUBLE
6357: GREATEREQUAL
6358: IFFALSE 6366
6360: LD_INT 2100
6362: DOUBLE
6363: LESSEQUAL
6364: IFTRUE 6368
6366: GO 6396
6368: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
6369: LD_EXP 8
6373: PUSH
6374: LD_INT 100
6376: DIVREAL
6377: PUSH
6378: LD_INT 350
6380: PPUSH
6381: LD_INT 1050
6383: PPUSH
6384: CALL_OW 12
6388: MUL
6389: PPUSH
6390: CALL_OW 67
6394: GO 6698
6396: LD_INT 2100
6398: PUSH
6399: LD_INT 1
6401: PLUS
6402: DOUBLE
6403: GREATEREQUAL
6404: IFFALSE 6412
6406: LD_INT 10500
6408: DOUBLE
6409: LESSEQUAL
6410: IFTRUE 6414
6412: GO 6442
6414: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
6415: LD_EXP 8
6419: PUSH
6420: LD_INT 100
6422: DIVREAL
6423: PUSH
6424: LD_INT 1050
6426: PPUSH
6427: LD_INT 1575
6429: PPUSH
6430: CALL_OW 12
6434: MUL
6435: PPUSH
6436: CALL_OW 67
6440: GO 6698
6442: LD_INT 10500
6444: PUSH
6445: LD_INT 1
6447: PLUS
6448: DOUBLE
6449: GREATEREQUAL
6450: IFFALSE 6458
6452: LD_INT 21000
6454: DOUBLE
6455: LESSEQUAL
6456: IFTRUE 6460
6458: GO 6488
6460: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
6461: LD_EXP 8
6465: PUSH
6466: LD_INT 100
6468: DIVREAL
6469: PUSH
6470: LD_INT 1575
6472: PPUSH
6473: LD_INT 2100
6475: PPUSH
6476: CALL_OW 12
6480: MUL
6481: PPUSH
6482: CALL_OW 67
6486: GO 6698
6488: LD_INT 21000
6490: PUSH
6491: LD_INT 1
6493: PLUS
6494: DOUBLE
6495: GREATEREQUAL
6496: IFFALSE 6504
6498: LD_INT 42000
6500: DOUBLE
6501: LESSEQUAL
6502: IFTRUE 6506
6504: GO 6534
6506: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
6507: LD_EXP 8
6511: PUSH
6512: LD_INT 100
6514: DIVREAL
6515: PUSH
6516: LD_INT 2100
6518: PPUSH
6519: LD_INT 2625
6521: PPUSH
6522: CALL_OW 12
6526: MUL
6527: PPUSH
6528: CALL_OW 67
6532: GO 6698
6534: LD_INT 42000
6536: PUSH
6537: LD_INT 1
6539: PLUS
6540: DOUBLE
6541: GREATEREQUAL
6542: IFFALSE 6550
6544: LD_INT 63000
6546: DOUBLE
6547: LESSEQUAL
6548: IFTRUE 6552
6550: GO 6580
6552: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
6553: LD_EXP 8
6557: PUSH
6558: LD_INT 100
6560: DIVREAL
6561: PUSH
6562: LD_INT 2625
6564: PPUSH
6565: LD_INT 3150
6567: PPUSH
6568: CALL_OW 12
6572: MUL
6573: PPUSH
6574: CALL_OW 67
6578: GO 6698
6580: LD_INT 63000
6582: PUSH
6583: LD_INT 1
6585: PLUS
6586: DOUBLE
6587: GREATEREQUAL
6588: IFFALSE 6596
6590: LD_INT 105000
6592: DOUBLE
6593: LESSEQUAL
6594: IFTRUE 6598
6596: GO 6626
6598: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
6599: LD_EXP 8
6603: PUSH
6604: LD_INT 100
6606: DIVREAL
6607: PUSH
6608: LD_INT 3150
6610: PPUSH
6611: LD_INT 3675
6613: PPUSH
6614: CALL_OW 12
6618: MUL
6619: PPUSH
6620: CALL_OW 67
6624: GO 6698
6626: LD_INT 105000
6628: PUSH
6629: LD_INT 1
6631: PLUS
6632: DOUBLE
6633: GREATEREQUAL
6634: IFFALSE 6642
6636: LD_INT 630000
6638: DOUBLE
6639: LESSEQUAL
6640: IFTRUE 6644
6642: GO 6672
6644: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
6645: LD_EXP 8
6649: PUSH
6650: LD_INT 100
6652: DIVREAL
6653: PUSH
6654: LD_INT 3675
6656: PPUSH
6657: LD_INT 4200
6659: PPUSH
6660: CALL_OW 12
6664: MUL
6665: PPUSH
6666: CALL_OW 67
6670: GO 6698
6672: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
6673: LD_EXP 8
6677: PUSH
6678: LD_INT 100
6680: DIVREAL
6681: PUSH
6682: LD_INT 4200
6684: PPUSH
6685: LD_INT 5250
6687: PPUSH
6688: CALL_OW 12
6692: MUL
6693: PPUSH
6694: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
6698: LD_ADDR_VAR 0 2
6702: PUSH
6703: LD_INT 3
6705: PPUSH
6706: LD_INT 5
6708: PPUSH
6709: CALL_OW 12
6713: ST_TO_ADDR
// for i = 1 to Side_Positions do
6714: LD_ADDR_VAR 0 1
6718: PUSH
6719: DOUBLE
6720: LD_INT 1
6722: DEC
6723: ST_TO_ADDR
6724: LD_EXP 19
6728: PUSH
6729: FOR_TO
6730: IFFALSE 6769
// if Side_Positions [ i ] then
6732: LD_EXP 19
6736: PUSH
6737: LD_VAR 0 1
6741: ARRAY
6742: IFFALSE 6767
// CreateCratesArea ( amount , BuildUpAreas [ i ] , true ) ;
6744: LD_VAR 0 2
6748: PPUSH
6749: LD_EXP 56
6753: PUSH
6754: LD_VAR 0 1
6758: ARRAY
6759: PPUSH
6760: LD_INT 1
6762: PPUSH
6763: CALL_OW 55
6767: GO 6729
6769: POP
6770: POP
// enable ;
6771: ENABLE
// end ; end_of_file
6772: PPOPN 2
6774: END
// var activated ; var hadziove ; every 0 0$1 do
6775: GO 6777
6777: DISABLE
// begin wait ( Rand ( 3 3$0 , 10 10$0 ) ) ;
6778: LD_INT 6300
6780: PPUSH
6781: LD_INT 21000
6783: PPUSH
6784: CALL_OW 12
6788: PPUSH
6789: CALL_OW 67
// SetAreaMapShow ( Tree , 1 ) ;
6793: LD_INT 3
6795: PPUSH
6796: LD_INT 1
6798: PPUSH
6799: CALL_OW 424
// activated := true ;
6803: LD_ADDR_LOC 12
6807: PUSH
6808: LD_INT 1
6810: ST_TO_ADDR
// end ;
6811: END
// every 0 0$1 trigger activated do var i , un ;
6812: LD_LOC 12
6816: IFFALSE 7061
6818: GO 6820
6820: DISABLE
6821: LD_INT 0
6823: PPUSH
6824: PPUSH
// begin if not def_tree_function then
6825: LD_EXP 1
6829: NOT
6830: IFFALSE 6834
// exit ;
6832: GO 7061
// ExtraStrings := [ #MultiSmall-Tree & def_tree_function ] ;
6834: LD_ADDR_EXP 54
6838: PUSH
6839: LD_STRING #MultiSmall-Tree
6841: PUSH
6842: LD_EXP 1
6846: STR
6847: PUSH
6848: EMPTY
6849: LIST
6850: ST_TO_ADDR
// for un in FilterUnitsInArea ( Tree , [ f_type , unit_human ] ) diff hadziove do
6851: LD_ADDR_VAR 0 2
6855: PUSH
6856: LD_INT 3
6858: PPUSH
6859: LD_INT 21
6861: PUSH
6862: LD_INT 1
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: PPUSH
6869: CALL_OW 70
6873: PUSH
6874: LD_LOC 13
6878: DIFF
6879: PUSH
6880: FOR_IN
6881: IFFALSE 7042
// begin if GetClass ( un ) in [ class_soldier , class_engineer , class_mechanic , class_scientistic , class_sniper , class_bazooker , class_mortar ] then
6883: LD_VAR 0 2
6887: PPUSH
6888: CALL_OW 257
6892: PUSH
6893: LD_INT 1
6895: PUSH
6896: LD_INT 2
6898: PUSH
6899: LD_INT 3
6901: PUSH
6902: LD_INT 4
6904: PUSH
6905: LD_INT 5
6907: PUSH
6908: LD_INT 9
6910: PUSH
6911: LD_INT 8
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: IN
6923: IFFALSE 6972
// for i := 1 to 4 do
6925: LD_ADDR_VAR 0 1
6929: PUSH
6930: DOUBLE
6931: LD_INT 1
6933: DEC
6934: ST_TO_ADDR
6935: LD_INT 4
6937: PUSH
6938: FOR_TO
6939: IFFALSE 6968
// GiveSkillBonus ( un , i , tree_function [ i ] ) else
6941: LD_VAR 0 2
6945: PPUSH
6946: LD_VAR 0 1
6950: PPUSH
6951: LD_EXP 14
6955: PUSH
6956: LD_VAR 0 1
6960: ARRAY
6961: PPUSH
6962: CALL_OW 238
6966: GO 6938
6968: POP
6969: POP
6970: GO 7040
// if un in [ class_apeman , class_apeman_engineer , class_apeman_kamikaze , class_apeman_soldier ] then
6972: LD_VAR 0 2
6976: PUSH
6977: LD_INT 12
6979: PUSH
6980: LD_INT 16
6982: PUSH
6983: LD_INT 17
6985: PUSH
6986: LD_INT 15
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: LIST
6993: LIST
6994: IN
6995: IFFALSE 7040
// for i := 1 to 4 do
6997: LD_ADDR_VAR 0 1
7001: PUSH
7002: DOUBLE
7003: LD_INT 1
7005: DEC
7006: ST_TO_ADDR
7007: LD_INT 4
7009: PUSH
7010: FOR_TO
7011: IFFALSE 7038
// GiveSkillBonus ( un , i , tree_function [ 5 ] ) ;
7013: LD_VAR 0 2
7017: PPUSH
7018: LD_VAR 0 1
7022: PPUSH
7023: LD_EXP 14
7027: PUSH
7028: LD_INT 5
7030: ARRAY
7031: PPUSH
7032: CALL_OW 238
7036: GO 7010
7038: POP
7039: POP
// end ;
7040: GO 6880
7042: POP
7043: POP
// hadziove := hadziove ^ un ;
7044: LD_ADDR_LOC 13
7048: PUSH
7049: LD_LOC 13
7053: PUSH
7054: LD_VAR 0 2
7058: ADD
7059: ST_TO_ADDR
// enable ;
7060: ENABLE
// end ; end_of_file
7061: PPOPN 2
7063: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7064: LD_VAR 0 1
7068: PPUSH
7069: CALL_OW 266
7073: PUSH
7074: LD_INT 0
7076: PUSH
7077: LD_INT 1
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: IN
7084: IFFALSE 7109
// SetBName ( b , @ & GetSide ( b ) ) ;
7086: LD_VAR 0 1
7090: PPUSH
7091: LD_STRING @
7093: PUSH
7094: LD_VAR 0 1
7098: PPUSH
7099: CALL_OW 255
7103: STR
7104: PPUSH
7105: CALL_OW 500
// if def_game_rules then
7109: LD_EXP 38
7113: IFFALSE 7150
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
7115: LD_VAR 0 1
7119: PPUSH
7120: LD_VAR 0 1
7124: PPUSH
7125: CALL_OW 266
7129: PPUSH
7130: LD_VAR 0 1
7134: PPUSH
7135: CALL_OW 255
7139: PPUSH
7140: LD_INT 0
7142: PPUSH
7143: LD_INT 1
7145: PPUSH
7146: CALL 10570 0 5
// end ;
7150: PPOPN 2
7152: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7153: LD_VAR 0 1
7157: PPUSH
7158: CALL_OW 266
7162: PUSH
7163: LD_INT 0
7165: PUSH
7166: LD_INT 1
7168: PUSH
7169: EMPTY
7170: LIST
7171: LIST
7172: IN
7173: IFFALSE 7198
// SetBName ( b , @ & GetSide ( b ) ) ;
7175: LD_VAR 0 1
7179: PPUSH
7180: LD_STRING @
7182: PUSH
7183: LD_VAR 0 1
7187: PPUSH
7188: CALL_OW 255
7192: STR
7193: PPUSH
7194: CALL_OW 500
// if def_game_rules then
7198: LD_EXP 38
7202: IFFALSE 7241
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7204: LD_VAR 0 1
7208: PPUSH
7209: LD_VAR 0 1
7213: PPUSH
7214: CALL_OW 266
7218: PPUSH
7219: LD_VAR 0 1
7223: PPUSH
7224: CALL_OW 255
7228: PPUSH
7229: LD_VAR 0 2
7233: PPUSH
7234: LD_INT 1
7236: PPUSH
7237: CALL 10570 0 5
// end ;
7241: PPOPN 3
7243: END
// on VehicleConstructed ( veh , fac ) do var side ;
7244: LD_INT 0
7246: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7247: LD_VAR 0 1
7251: PPUSH
7252: CALL_OW 263
7256: PUSH
7257: LD_INT 5
7259: EQUAL
7260: IFFALSE 7402
// begin side := GetSide ( veh ) ;
7262: LD_ADDR_VAR 0 3
7266: PUSH
7267: LD_VAR 0 1
7271: PPUSH
7272: CALL_OW 255
7276: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7277: LD_ADDR_EXP 33
7281: PUSH
7282: LD_EXP 33
7286: PPUSH
7287: LD_VAR 0 3
7291: PPUSH
7292: LD_EXP 33
7296: PUSH
7297: LD_VAR 0 3
7301: ARRAY
7302: PPUSH
7303: LD_INT 52
7305: PUSH
7306: EMPTY
7307: LIST
7308: PPUSH
7309: CALL_OW 72
7313: PUSH
7314: LD_INT 22
7316: PUSH
7317: LD_VAR 0 3
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: PUSH
7326: LD_INT 2
7328: PUSH
7329: LD_INT 33
7331: PUSH
7332: LD_INT 5
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: PUSH
7339: LD_INT 25
7341: PUSH
7342: LD_INT 12
7344: PUSH
7345: EMPTY
7346: LIST
7347: LIST
7348: PUSH
7349: LD_INT 25
7351: PUSH
7352: LD_INT 15
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: PUSH
7359: LD_INT 25
7361: PUSH
7362: LD_INT 16
7364: PUSH
7365: EMPTY
7366: LIST
7367: LIST
7368: PUSH
7369: LD_INT 25
7371: PUSH
7372: LD_INT 17
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: PPUSH
7391: CALL_OW 69
7395: UNION
7396: PPUSH
7397: CALL_OW 1
7401: ST_TO_ADDR
// end ; end ;
7402: PPOPN 3
7404: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7405: LD_INT 0
7407: PPUSH
7408: PPUSH
7409: PPUSH
7410: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7411: LD_VAR 0 1
7415: PPUSH
7416: CALL_OW 257
7420: PUSH
7421: LD_INT 12
7423: PUSH
7424: LD_INT 15
7426: PUSH
7427: LD_INT 17
7429: PUSH
7430: LD_INT 16
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: IN
7439: PUSH
7440: LD_VAR 0 1
7444: PPUSH
7445: CALL_OW 263
7449: PUSH
7450: LD_INT 5
7452: EQUAL
7453: OR
7454: IFFALSE 7465
// ApeKilled ( j ) ;
7456: LD_VAR 0 1
7460: PPUSH
7461: CALL 5634 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7465: LD_VAR 0 1
7469: PPUSH
7470: CALL_OW 266
7474: PUSH
7475: LD_INT 0
7477: PUSH
7478: LD_INT 1
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: IN
7485: IFFALSE 7567
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7487: LD_ADDR_VAR 0 4
7491: PUSH
7492: LD_EXP 19
7496: PUSH
7497: LD_VAR 0 1
7501: PPUSH
7502: CALL_OW 255
7506: ARRAY
7507: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7508: LD_ADDR_VAR 0 2
7512: PUSH
7513: LD_EXP 24
7517: PUSH
7518: LD_VAR 0 4
7522: ARRAY
7523: PUSH
7524: LD_INT 1
7526: ARRAY
7527: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7528: LD_ADDR_VAR 0 3
7532: PUSH
7533: LD_EXP 24
7537: PUSH
7538: LD_VAR 0 4
7542: ARRAY
7543: PUSH
7544: LD_INT 2
7546: ARRAY
7547: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7548: LD_VAR 0 2
7552: PPUSH
7553: LD_VAR 0 3
7557: PPUSH
7558: CALL_OW 420
7562: PPUSH
7563: CALL_OW 419
// end ; if def_game_rules then
7567: LD_EXP 38
7571: IFFALSE 7670
// if ( GetType ( j ) = 3 ) then
7573: LD_VAR 0 1
7577: PPUSH
7578: CALL_OW 247
7582: PUSH
7583: LD_INT 3
7585: EQUAL
7586: IFFALSE 7626
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7588: LD_VAR 0 1
7592: PPUSH
7593: LD_VAR 0 1
7597: PPUSH
7598: CALL_OW 266
7602: PPUSH
7603: LD_VAR 0 1
7607: PPUSH
7608: CALL_OW 255
7612: PPUSH
7613: LD_INT 0
7615: PPUSH
7616: LD_INT 1
7618: NEG
7619: PPUSH
7620: CALL 10570 0 5
7624: GO 7670
// if ( GetChassis ( j ) = 25 ) then
7626: LD_VAR 0 1
7630: PPUSH
7631: CALL_OW 265
7635: PUSH
7636: LD_INT 25
7638: EQUAL
7639: IFFALSE 7670
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7641: LD_VAR 0 1
7645: PPUSH
7646: LD_INT 37
7648: PPUSH
7649: LD_VAR 0 1
7653: PPUSH
7654: CALL_OW 255
7658: PPUSH
7659: LD_INT 0
7661: PPUSH
7662: LD_INT 1
7664: NEG
7665: PPUSH
7666: CALL 10570 0 5
// end ;
7670: PPOPN 5
7672: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7673: LD_EXP 38
7677: PUSH
7678: LD_VAR 0 1
7682: PPUSH
7683: CALL_OW 265
7687: PUSH
7688: LD_INT 25
7690: EQUAL
7691: AND
7692: IFFALSE 7724
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
7694: LD_VAR 0 1
7698: PPUSH
7699: LD_INT 37
7701: PPUSH
7702: LD_VAR 0 1
7706: PPUSH
7707: CALL_OW 255
7711: PPUSH
7712: LD_VAR 0 3
7716: PPUSH
7717: LD_INT 1
7719: PPUSH
7720: CALL 10570 0 5
// end ;
7724: PPOPN 4
7726: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7727: LD_VAR 0 1
7731: PPUSH
7732: LD_VAR 0 2
7736: PPUSH
7737: LD_VAR 0 3
7741: PPUSH
7742: LD_OWVAR 2
7746: PPUSH
7747: CALL 11913 0 4
7751: PPOPN 3
7753: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7754: LD_INT 0
7756: PPUSH
7757: PPUSH
// for un in battle_flags_id do
7758: LD_ADDR_VAR 0 2
7762: PUSH
7763: LD_EXP 25
7767: PUSH
7768: FOR_IN
7769: IFFALSE 7844
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7771: LD_VAR 0 2
7775: PPUSH
7776: LD_INT 1
7778: PUSH
7779: LD_LOC 14
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: PUSH
7788: LD_INT 2
7790: PUSH
7791: LD_LOC 14
7795: PUSH
7796: LD_INT 2
7798: DIV
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: PUSH
7804: LD_INT 3
7806: PUSH
7807: LD_LOC 14
7811: PUSH
7812: LD_INT 5
7814: DIV
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: PUSH
7820: LD_INT 20
7822: PUSH
7823: LD_LOC 14
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: PUSH
7832: EMPTY
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: PPUSH
7838: CALL_OW 423
7842: GO 7768
7844: POP
7845: POP
// end ;
7846: LD_VAR 0 1
7850: RET
// every 0 0$0.1 do var un ;
7851: GO 7853
7853: DISABLE
7854: LD_INT 0
7856: PPUSH
// begin if not def_morale_flags then
7857: LD_EXP 47
7861: NOT
7862: IFFALSE 7866
// exit ;
7864: GO 7943
// if not morale_decreasing_time then
7866: LD_EXP 9
7870: NOT
7871: IFFALSE 7875
// exit ;
7873: GO 7943
// strength = 100 ;
7875: LD_ADDR_LOC 14
7879: PUSH
7880: LD_INT 100
7882: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7883: LD_EXP 9
7887: PPUSH
7888: CALL_OW 67
// strength := strength - 1 ;
7892: LD_ADDR_LOC 14
7896: PUSH
7897: LD_LOC 14
7901: PUSH
7902: LD_INT 1
7904: MINUS
7905: ST_TO_ADDR
// Update_Flags ;
7906: CALL 7754 0 0
// until not strength ;
7910: LD_LOC 14
7914: NOT
7915: IFFALSE 7883
// for un in battle_flags_id do
7917: LD_ADDR_VAR 0 1
7921: PUSH
7922: LD_EXP 25
7926: PUSH
7927: FOR_IN
7928: IFFALSE 7941
// KillBattleFlag ( un ) ;
7930: LD_VAR 0 1
7934: PPUSH
7935: CALL_OW 419
7939: GO 7927
7941: POP
7942: POP
// end ; end_of_file
7943: PPOPN 1
7945: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
7946: LD_INT 0
7948: PPUSH
7949: PPUSH
// if ( not IAmSpec ) then
7950: CALL_OW 531
7954: NOT
7955: IFFALSE 7971
// Result := Limits_Info ^  ;
7957: LD_ADDR_VAR 0 1
7961: PUSH
7962: LD_LOC 26
7966: PUSH
7967: LD_STRING 
7969: ADD
7970: ST_TO_ADDR
// for i := 1 to 8 do
7971: LD_ADDR_VAR 0 2
7975: PUSH
7976: DOUBLE
7977: LD_INT 1
7979: DEC
7980: ST_TO_ADDR
7981: LD_INT 8
7983: PUSH
7984: FOR_TO
7985: IFFALSE 8030
// if Cheaters [ i ] then
7987: LD_LOC 27
7991: PUSH
7992: LD_VAR 0 2
7996: ARRAY
7997: IFFALSE 8028
// Result := Result ^ [ #Cheater , i , i ] ;
7999: LD_ADDR_VAR 0 1
8003: PUSH
8004: LD_VAR 0 1
8008: PUSH
8009: LD_STRING #Cheater
8011: PUSH
8012: LD_VAR 0 2
8016: PUSH
8017: LD_VAR 0 2
8021: PUSH
8022: EMPTY
8023: LIST
8024: LIST
8025: LIST
8026: ADD
8027: ST_TO_ADDR
8028: GO 7984
8030: POP
8031: POP
// end ;
8032: LD_VAR 0 1
8036: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
8037: LD_INT 0
8039: PPUSH
8040: PPUSH
8041: PPUSH
8042: PPUSH
8043: PPUSH
// case Game_Type of 10 :
8044: LD_EXP 37
8048: PUSH
8049: LD_INT 10
8051: DOUBLE
8052: EQUAL
8053: IFTRUE 8057
8055: GO 8068
8057: POP
// def_game_rules := 1 ; 11 :
8058: LD_ADDR_EXP 38
8062: PUSH
8063: LD_INT 1
8065: ST_TO_ADDR
8066: GO 8088
8068: LD_INT 11
8070: DOUBLE
8071: EQUAL
8072: IFTRUE 8076
8074: GO 8087
8076: POP
// def_game_rules := 3 ; end ;
8077: LD_ADDR_EXP 38
8081: PUSH
8082: LD_INT 3
8084: ST_TO_ADDR
8085: GO 8088
8087: POP
// case def_game_rules of 0 :
8088: LD_EXP 38
8092: PUSH
8093: LD_INT 0
8095: DOUBLE
8096: EQUAL
8097: IFTRUE 8101
8099: GO 8106
8101: POP
// exit ; 1 :
8102: GO 10164
8104: GO 10064
8106: LD_INT 1
8108: DOUBLE
8109: EQUAL
8110: IFTRUE 8114
8112: GO 8330
8114: POP
// begin def_base_level := 2 ;
8115: LD_ADDR_EXP 39
8119: PUSH
8120: LD_INT 2
8122: ST_TO_ADDR
// def_amount_of_people := 2 ;
8123: LD_ADDR_EXP 40
8127: PUSH
8128: LD_INT 2
8130: ST_TO_ADDR
// def_skill_level := 1 ;
8131: LD_ADDR_EXP 41
8135: PUSH
8136: LD_INT 1
8138: ST_TO_ADDR
// def_starting_resources := 2 ;
8139: LD_ADDR_EXP 42
8143: PUSH
8144: LD_INT 2
8146: ST_TO_ADDR
// def_shipments_density := 1 ;
8147: LD_ADDR_EXP 43
8151: PUSH
8152: LD_INT 1
8154: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8155: LD_ADDR_EXP 44
8159: PUSH
8160: LD_INT 0
8162: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
8163: LD_ADDR_EXP 45
8167: PUSH
8168: LD_INT 1
8170: ST_TO_ADDR
// def_shared_vision := 1 ;
8171: LD_ADDR_EXP 46
8175: PUSH
8176: LD_INT 1
8178: ST_TO_ADDR
// def_morale_flags := 3 ;
8179: LD_ADDR_EXP 47
8183: PUSH
8184: LD_INT 3
8186: ST_TO_ADDR
// def_siberite_detection := 1 ;
8187: LD_ADDR_EXP 48
8191: PUSH
8192: LD_INT 1
8194: ST_TO_ADDR
// def_people_respawning := 1 ;
8195: LD_ADDR_EXP 49
8199: PUSH
8200: LD_INT 1
8202: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
8203: LD_ADDR_EXP 50
8207: PUSH
8208: LD_INT 1
8210: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8211: LD_ADDR_EXP 51
8215: PUSH
8216: LD_INT 0
8218: ST_TO_ADDR
// def_builduptime := 2 ;
8219: LD_ADDR_EXP 52
8223: PUSH
8224: LD_INT 2
8226: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
8227: LD_ADDR_VAR 0 2
8231: PUSH
8232: EMPTY
8233: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8234: LD_ADDR_VAR 0 3
8238: PUSH
8239: EMPTY
8240: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8241: LD_ADDR_LOC 21
8245: PUSH
8246: EMPTY
8247: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8248: LD_ADDR_LOC 22
8252: PUSH
8253: EMPTY
8254: ST_TO_ADDR
// Banned_Controls := [ ] ;
8255: LD_ADDR_LOC 23
8259: PUSH
8260: EMPTY
8261: ST_TO_ADDR
// Banned_Engines := [ ] ;
8262: LD_ADDR_LOC 24
8266: PUSH
8267: EMPTY
8268: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
8269: LD_ADDR_LOC 19
8273: PUSH
8274: LD_INT 37
8276: PUSH
8277: EMPTY
8278: LIST
8279: PUSH
8280: LD_INT 4
8282: PUSH
8283: LD_INT 5
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PUSH
8290: LD_INT 31
8292: PUSH
8293: LD_INT 32
8295: PUSH
8296: LD_INT 33
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: LIST
8303: PUSH
8304: EMPTY
8305: LIST
8306: LIST
8307: LIST
8308: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
8309: LD_ADDR_LOC 20
8313: PUSH
8314: LD_INT 2
8316: PUSH
8317: LD_INT 2
8319: PUSH
8320: LD_INT 4
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: LIST
8327: ST_TO_ADDR
// end ; 2 :
8328: GO 10064
8330: LD_INT 2
8332: DOUBLE
8333: EQUAL
8334: IFTRUE 8338
8336: GO 8547
8338: POP
// begin def_base_level := 1 ;
8339: LD_ADDR_EXP 39
8343: PUSH
8344: LD_INT 1
8346: ST_TO_ADDR
// def_amount_of_people := 2 ;
8347: LD_ADDR_EXP 40
8351: PUSH
8352: LD_INT 2
8354: ST_TO_ADDR
// def_skill_level := 3 ;
8355: LD_ADDR_EXP 41
8359: PUSH
8360: LD_INT 3
8362: ST_TO_ADDR
// def_starting_resources := 3 ;
8363: LD_ADDR_EXP 42
8367: PUSH
8368: LD_INT 3
8370: ST_TO_ADDR
// def_shipments_density := 2 ;
8371: LD_ADDR_EXP 43
8375: PUSH
8376: LD_INT 2
8378: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8379: LD_ADDR_EXP 44
8383: PUSH
8384: LD_INT 1
8386: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8387: LD_ADDR_EXP 45
8391: PUSH
8392: LD_INT 2
8394: ST_TO_ADDR
// def_shared_vision := 1 ;
8395: LD_ADDR_EXP 46
8399: PUSH
8400: LD_INT 1
8402: ST_TO_ADDR
// def_morale_flags := 0 ;
8403: LD_ADDR_EXP 47
8407: PUSH
8408: LD_INT 0
8410: ST_TO_ADDR
// def_siberite_detection := 1 ;
8411: LD_ADDR_EXP 48
8415: PUSH
8416: LD_INT 1
8418: ST_TO_ADDR
// def_people_respawning := 0 ;
8419: LD_ADDR_EXP 49
8423: PUSH
8424: LD_INT 0
8426: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
8427: LD_ADDR_EXP 50
8431: PUSH
8432: LD_INT 0
8434: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8435: LD_ADDR_EXP 51
8439: PUSH
8440: LD_INT 0
8442: ST_TO_ADDR
// def_builduptime := 2 ;
8443: LD_ADDR_EXP 52
8447: PUSH
8448: LD_INT 2
8450: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
8451: LD_ADDR_VAR 0 2
8455: PUSH
8456: LD_INT 1
8458: PUSH
8459: EMPTY
8460: LIST
8461: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8462: LD_ADDR_VAR 0 3
8466: PUSH
8467: EMPTY
8468: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8469: LD_ADDR_LOC 21
8473: PUSH
8474: EMPTY
8475: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8476: LD_ADDR_LOC 22
8480: PUSH
8481: EMPTY
8482: ST_TO_ADDR
// Banned_Controls := [ ] ;
8483: LD_ADDR_LOC 23
8487: PUSH
8488: EMPTY
8489: ST_TO_ADDR
// Banned_Engines := [ ] ;
8490: LD_ADDR_LOC 24
8494: PUSH
8495: EMPTY
8496: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
8497: LD_ADDR_LOC 19
8501: PUSH
8502: LD_INT 4
8504: PUSH
8505: LD_INT 5
8507: PUSH
8508: EMPTY
8509: LIST
8510: LIST
8511: PUSH
8512: LD_INT 31
8514: PUSH
8515: LD_INT 32
8517: PUSH
8518: LD_INT 33
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: LIST
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
8530: LD_ADDR_LOC 20
8534: PUSH
8535: LD_INT 1
8537: PUSH
8538: LD_INT 2
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: ST_TO_ADDR
// end ; 3 :
8545: GO 10064
8547: LD_INT 3
8549: DOUBLE
8550: EQUAL
8551: IFTRUE 8555
8553: GO 8798
8555: POP
// begin def_base_level := 1 ;
8556: LD_ADDR_EXP 39
8560: PUSH
8561: LD_INT 1
8563: ST_TO_ADDR
// def_amount_of_people := 2 ;
8564: LD_ADDR_EXP 40
8568: PUSH
8569: LD_INT 2
8571: ST_TO_ADDR
// def_skill_level := 3 ;
8572: LD_ADDR_EXP 41
8576: PUSH
8577: LD_INT 3
8579: ST_TO_ADDR
// def_starting_resources := 3 ;
8580: LD_ADDR_EXP 42
8584: PUSH
8585: LD_INT 3
8587: ST_TO_ADDR
// def_shipments_density := 1 ;
8588: LD_ADDR_EXP 43
8592: PUSH
8593: LD_INT 1
8595: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8596: LD_ADDR_EXP 44
8600: PUSH
8601: LD_INT 0
8603: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
8604: LD_ADDR_EXP 45
8608: PUSH
8609: LD_INT 1
8611: ST_TO_ADDR
// def_shared_vision := 1 ;
8612: LD_ADDR_EXP 46
8616: PUSH
8617: LD_INT 1
8619: ST_TO_ADDR
// def_morale_flags := 0 ;
8620: LD_ADDR_EXP 47
8624: PUSH
8625: LD_INT 0
8627: ST_TO_ADDR
// def_siberite_detection := 1 ;
8628: LD_ADDR_EXP 48
8632: PUSH
8633: LD_INT 1
8635: ST_TO_ADDR
// def_people_respawning := 0 ;
8636: LD_ADDR_EXP 49
8640: PUSH
8641: LD_INT 0
8643: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
8644: LD_ADDR_EXP 50
8648: PUSH
8649: LD_INT 2
8651: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8652: LD_ADDR_EXP 51
8656: PUSH
8657: LD_INT 0
8659: ST_TO_ADDR
// def_builduptime := 1 ;
8660: LD_ADDR_EXP 52
8664: PUSH
8665: LD_INT 1
8667: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
8668: LD_ADDR_VAR 0 2
8672: PUSH
8673: LD_INT 23
8675: PUSH
8676: EMPTY
8677: LIST
8678: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
8679: LD_ADDR_VAR 0 3
8683: PUSH
8684: LD_INT 2
8686: PUSH
8687: LD_INT 37
8689: PUSH
8690: LD_INT 32
8692: PUSH
8693: LD_INT 33
8695: PUSH
8696: LD_INT 36
8698: PUSH
8699: LD_INT 16
8701: PUSH
8702: LD_INT 23
8704: PUSH
8705: LD_INT 21
8707: PUSH
8708: LD_INT 18
8710: PUSH
8711: LD_INT 22
8713: PUSH
8714: LD_INT 20
8716: PUSH
8717: LD_INT 19
8719: PUSH
8720: LD_INT 25
8722: PUSH
8723: LD_INT 17
8725: PUSH
8726: LD_INT 24
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8746: LD_ADDR_LOC 21
8750: PUSH
8751: EMPTY
8752: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8753: LD_ADDR_LOC 22
8757: PUSH
8758: EMPTY
8759: ST_TO_ADDR
// Banned_Controls := [ ] ;
8760: LD_ADDR_LOC 23
8764: PUSH
8765: EMPTY
8766: ST_TO_ADDR
// Banned_Engines := [ ] ;
8767: LD_ADDR_LOC 24
8771: PUSH
8772: EMPTY
8773: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8774: LD_ADDR_LOC 19
8778: PUSH
8779: EMPTY
8780: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8781: LD_ADDR_LOC 20
8785: PUSH
8786: EMPTY
8787: ST_TO_ADDR
// No_Mechs := true ;
8788: LD_ADDR_EXP 53
8792: PUSH
8793: LD_INT 1
8795: ST_TO_ADDR
// end ; 4 :
8796: GO 10064
8798: LD_INT 4
8800: DOUBLE
8801: EQUAL
8802: IFTRUE 8806
8804: GO 8981
8806: POP
// begin def_base_level := 1 ;
8807: LD_ADDR_EXP 39
8811: PUSH
8812: LD_INT 1
8814: ST_TO_ADDR
// def_amount_of_people := 2 ;
8815: LD_ADDR_EXP 40
8819: PUSH
8820: LD_INT 2
8822: ST_TO_ADDR
// def_skill_level := 3 ;
8823: LD_ADDR_EXP 41
8827: PUSH
8828: LD_INT 3
8830: ST_TO_ADDR
// def_starting_resources := 3 ;
8831: LD_ADDR_EXP 42
8835: PUSH
8836: LD_INT 3
8838: ST_TO_ADDR
// def_shipments_density := 2 ;
8839: LD_ADDR_EXP 43
8843: PUSH
8844: LD_INT 2
8846: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8847: LD_ADDR_EXP 44
8851: PUSH
8852: LD_INT 1
8854: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8855: LD_ADDR_EXP 45
8859: PUSH
8860: LD_INT 2
8862: ST_TO_ADDR
// def_shared_vision := 1 ;
8863: LD_ADDR_EXP 46
8867: PUSH
8868: LD_INT 1
8870: ST_TO_ADDR
// def_morale_flags := 0 ;
8871: LD_ADDR_EXP 47
8875: PUSH
8876: LD_INT 0
8878: ST_TO_ADDR
// def_siberite_detection := 1 ;
8879: LD_ADDR_EXP 48
8883: PUSH
8884: LD_INT 1
8886: ST_TO_ADDR
// def_people_respawning := 0 ;
8887: LD_ADDR_EXP 49
8891: PUSH
8892: LD_INT 0
8894: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
8895: LD_ADDR_EXP 50
8899: PUSH
8900: LD_INT 0
8902: ST_TO_ADDR
// def_siberite_bomb := 1 ;
8903: LD_ADDR_EXP 51
8907: PUSH
8908: LD_INT 1
8910: ST_TO_ADDR
// def_builduptime := 3 ;
8911: LD_ADDR_EXP 52
8915: PUSH
8916: LD_INT 3
8918: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
8919: LD_ADDR_VAR 0 2
8923: PUSH
8924: LD_INT 1
8926: PUSH
8927: EMPTY
8928: LIST
8929: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8930: LD_ADDR_VAR 0 3
8934: PUSH
8935: EMPTY
8936: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8937: LD_ADDR_LOC 21
8941: PUSH
8942: EMPTY
8943: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8944: LD_ADDR_LOC 22
8948: PUSH
8949: EMPTY
8950: ST_TO_ADDR
// Banned_Controls := [ ] ;
8951: LD_ADDR_LOC 23
8955: PUSH
8956: EMPTY
8957: ST_TO_ADDR
// Banned_Engines := [ ] ;
8958: LD_ADDR_LOC 24
8962: PUSH
8963: EMPTY
8964: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8965: LD_ADDR_LOC 19
8969: PUSH
8970: EMPTY
8971: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8972: LD_ADDR_LOC 20
8976: PUSH
8977: EMPTY
8978: ST_TO_ADDR
// end ; 5 :
8979: GO 10064
8981: LD_INT 5
8983: DOUBLE
8984: EQUAL
8985: IFTRUE 8989
8987: GO 9238
8989: POP
// begin def_base_level := 0 ;
8990: LD_ADDR_EXP 39
8994: PUSH
8995: LD_INT 0
8997: ST_TO_ADDR
// def_amount_of_people := 0 ;
8998: LD_ADDR_EXP 40
9002: PUSH
9003: LD_INT 0
9005: ST_TO_ADDR
// def_skill_level := 0 ;
9006: LD_ADDR_EXP 41
9010: PUSH
9011: LD_INT 0
9013: ST_TO_ADDR
// def_starting_resources := 0 ;
9014: LD_ADDR_EXP 42
9018: PUSH
9019: LD_INT 0
9021: ST_TO_ADDR
// def_shipments_density := 0 ;
9022: LD_ADDR_EXP 43
9026: PUSH
9027: LD_INT 0
9029: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9030: LD_ADDR_EXP 44
9034: PUSH
9035: LD_INT 0
9037: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
9038: LD_ADDR_EXP 45
9042: PUSH
9043: LD_INT 0
9045: ST_TO_ADDR
// def_shared_vision := 1 ;
9046: LD_ADDR_EXP 46
9050: PUSH
9051: LD_INT 1
9053: ST_TO_ADDR
// def_morale_flags := 0 ;
9054: LD_ADDR_EXP 47
9058: PUSH
9059: LD_INT 0
9061: ST_TO_ADDR
// def_siberite_detection := 0 ;
9062: LD_ADDR_EXP 48
9066: PUSH
9067: LD_INT 0
9069: ST_TO_ADDR
// def_people_respawning := 1 ;
9070: LD_ADDR_EXP 49
9074: PUSH
9075: LD_INT 1
9077: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9078: LD_ADDR_EXP 50
9082: PUSH
9083: LD_INT 1
9085: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9086: LD_ADDR_EXP 51
9090: PUSH
9091: LD_INT 0
9093: ST_TO_ADDR
// def_builduptime := 0 ;
9094: LD_ADDR_EXP 52
9098: PUSH
9099: LD_INT 0
9101: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
9102: LD_ADDR_VAR 0 2
9106: PUSH
9107: LD_INT 10
9109: PUSH
9110: LD_INT 3
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
9117: LD_ADDR_VAR 0 3
9121: PUSH
9122: LD_INT 12
9124: PUSH
9125: LD_INT 11
9127: PUSH
9128: LD_INT 14
9130: PUSH
9131: LD_INT 13
9133: PUSH
9134: LD_INT 5
9136: PUSH
9137: LD_INT 24
9139: PUSH
9140: LD_INT 21
9142: PUSH
9143: LD_INT 33
9145: PUSH
9146: LD_INT 36
9148: PUSH
9149: EMPTY
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
9160: LD_ADDR_LOC 21
9164: PUSH
9165: LD_INT 31
9167: PUSH
9168: EMPTY
9169: LIST
9170: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9171: LD_ADDR_LOC 22
9175: PUSH
9176: EMPTY
9177: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
9178: LD_ADDR_LOC 23
9182: PUSH
9183: LD_INT 2
9185: PUSH
9186: EMPTY
9187: LIST
9188: ST_TO_ADDR
// Banned_Engines := [ ] ;
9189: LD_ADDR_LOC 24
9193: PUSH
9194: EMPTY
9195: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
9196: LD_ADDR_LOC 19
9200: PUSH
9201: LD_INT 4
9203: PUSH
9204: EMPTY
9205: LIST
9206: PUSH
9207: LD_INT 31
9209: PUSH
9210: LD_INT 32
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
9221: LD_ADDR_LOC 20
9225: PUSH
9226: LD_INT 1
9228: PUSH
9229: LD_INT 1
9231: PUSH
9232: EMPTY
9233: LIST
9234: LIST
9235: ST_TO_ADDR
// end ; 6 :
9236: GO 10064
9238: LD_INT 6
9240: DOUBLE
9241: EQUAL
9242: IFTRUE 9246
9244: GO 9449
9246: POP
// begin def_base_level := 1 ;
9247: LD_ADDR_EXP 39
9251: PUSH
9252: LD_INT 1
9254: ST_TO_ADDR
// def_amount_of_people := 2 ;
9255: LD_ADDR_EXP 40
9259: PUSH
9260: LD_INT 2
9262: ST_TO_ADDR
// def_skill_level := 3 ;
9263: LD_ADDR_EXP 41
9267: PUSH
9268: LD_INT 3
9270: ST_TO_ADDR
// def_starting_resources := 3 ;
9271: LD_ADDR_EXP 42
9275: PUSH
9276: LD_INT 3
9278: ST_TO_ADDR
// def_shipments_density := 1 ;
9279: LD_ADDR_EXP 43
9283: PUSH
9284: LD_INT 1
9286: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9287: LD_ADDR_EXP 44
9291: PUSH
9292: LD_INT 0
9294: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9295: LD_ADDR_EXP 45
9299: PUSH
9300: LD_INT 1
9302: ST_TO_ADDR
// def_shared_vision := 1 ;
9303: LD_ADDR_EXP 46
9307: PUSH
9308: LD_INT 1
9310: ST_TO_ADDR
// def_morale_flags := 0 ;
9311: LD_ADDR_EXP 47
9315: PUSH
9316: LD_INT 0
9318: ST_TO_ADDR
// def_siberite_detection := 1 ;
9319: LD_ADDR_EXP 48
9323: PUSH
9324: LD_INT 1
9326: ST_TO_ADDR
// def_people_respawning := 2 ;
9327: LD_ADDR_EXP 49
9331: PUSH
9332: LD_INT 2
9334: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9335: LD_ADDR_EXP 50
9339: PUSH
9340: LD_INT 1
9342: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9343: LD_ADDR_EXP 51
9347: PUSH
9348: LD_INT 0
9350: ST_TO_ADDR
// def_builduptime := 1 ;
9351: LD_ADDR_EXP 52
9355: PUSH
9356: LD_INT 1
9358: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9359: LD_ADDR_VAR 0 2
9363: PUSH
9364: LD_INT 23
9366: PUSH
9367: EMPTY
9368: LIST
9369: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
9370: LD_ADDR_VAR 0 3
9374: PUSH
9375: LD_INT 2
9377: PUSH
9378: LD_INT 37
9380: PUSH
9381: LD_INT 31
9383: PUSH
9384: LD_INT 32
9386: PUSH
9387: LD_INT 33
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9397: LD_ADDR_LOC 21
9401: PUSH
9402: EMPTY
9403: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9404: LD_ADDR_LOC 22
9408: PUSH
9409: EMPTY
9410: ST_TO_ADDR
// Banned_Controls := [ ] ;
9411: LD_ADDR_LOC 23
9415: PUSH
9416: EMPTY
9417: ST_TO_ADDR
// Banned_Engines := [ ] ;
9418: LD_ADDR_LOC 24
9422: PUSH
9423: EMPTY
9424: ST_TO_ADDR
// Restricted_Builds := [ ] ;
9425: LD_ADDR_LOC 19
9429: PUSH
9430: EMPTY
9431: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
9432: LD_ADDR_LOC 20
9436: PUSH
9437: EMPTY
9438: ST_TO_ADDR
// No_Mechs := true ;
9439: LD_ADDR_EXP 53
9443: PUSH
9444: LD_INT 1
9446: ST_TO_ADDR
// end ; 7 :
9447: GO 10064
9449: LD_INT 7
9451: DOUBLE
9452: EQUAL
9453: IFTRUE 9457
9455: GO 9655
9457: POP
// begin def_base_level := 1 ;
9458: LD_ADDR_EXP 39
9462: PUSH
9463: LD_INT 1
9465: ST_TO_ADDR
// def_amount_of_people := 2 ;
9466: LD_ADDR_EXP 40
9470: PUSH
9471: LD_INT 2
9473: ST_TO_ADDR
// def_skill_level := 3 ;
9474: LD_ADDR_EXP 41
9478: PUSH
9479: LD_INT 3
9481: ST_TO_ADDR
// def_starting_resources := 3 ;
9482: LD_ADDR_EXP 42
9486: PUSH
9487: LD_INT 3
9489: ST_TO_ADDR
// def_shipments_density := 1 ;
9490: LD_ADDR_EXP 43
9494: PUSH
9495: LD_INT 1
9497: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9498: LD_ADDR_EXP 44
9502: PUSH
9503: LD_INT 1
9505: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9506: LD_ADDR_EXP 45
9510: PUSH
9511: LD_INT 2
9513: ST_TO_ADDR
// def_shared_vision := 1 ;
9514: LD_ADDR_EXP 46
9518: PUSH
9519: LD_INT 1
9521: ST_TO_ADDR
// def_morale_flags := 0 ;
9522: LD_ADDR_EXP 47
9526: PUSH
9527: LD_INT 0
9529: ST_TO_ADDR
// def_siberite_detection := 1 ;
9530: LD_ADDR_EXP 48
9534: PUSH
9535: LD_INT 1
9537: ST_TO_ADDR
// def_people_respawning := 0 ;
9538: LD_ADDR_EXP 49
9542: PUSH
9543: LD_INT 0
9545: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9546: LD_ADDR_EXP 50
9550: PUSH
9551: LD_INT 1
9553: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9554: LD_ADDR_EXP 51
9558: PUSH
9559: LD_INT 0
9561: ST_TO_ADDR
// def_builduptime := 3 ;
9562: LD_ADDR_EXP 52
9566: PUSH
9567: LD_INT 3
9569: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9570: LD_ADDR_VAR 0 2
9574: PUSH
9575: LD_INT 23
9577: PUSH
9578: EMPTY
9579: LIST
9580: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
9581: LD_ADDR_VAR 0 3
9585: PUSH
9586: LD_INT 37
9588: PUSH
9589: EMPTY
9590: LIST
9591: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9592: LD_ADDR_LOC 21
9596: PUSH
9597: EMPTY
9598: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9599: LD_ADDR_LOC 22
9603: PUSH
9604: EMPTY
9605: ST_TO_ADDR
// Banned_Controls := [ ] ;
9606: LD_ADDR_LOC 23
9610: PUSH
9611: EMPTY
9612: ST_TO_ADDR
// Banned_Engines := [ ] ;
9613: LD_ADDR_LOC 24
9617: PUSH
9618: EMPTY
9619: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9620: LD_ADDR_LOC 19
9624: PUSH
9625: LD_INT 31
9627: PUSH
9628: LD_INT 32
9630: PUSH
9631: LD_INT 33
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: LIST
9638: PUSH
9639: EMPTY
9640: LIST
9641: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
9642: LD_ADDR_LOC 20
9646: PUSH
9647: LD_INT 10
9649: PUSH
9650: EMPTY
9651: LIST
9652: ST_TO_ADDR
// end ; 8 :
9653: GO 10064
9655: LD_INT 8
9657: DOUBLE
9658: EQUAL
9659: IFTRUE 9663
9661: GO 10063
9663: POP
// begin def_base_level := 0 ;
9664: LD_ADDR_EXP 39
9668: PUSH
9669: LD_INT 0
9671: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
9672: LD_ADDR_EXP 40
9676: PUSH
9677: LD_INT 0
9679: PPUSH
9680: LD_INT 1
9682: PPUSH
9683: CALL_OW 12
9687: ST_TO_ADDR
// def_skill_level := 0 ;
9688: LD_ADDR_EXP 41
9692: PUSH
9693: LD_INT 0
9695: ST_TO_ADDR
// def_starting_resources := 2 ;
9696: LD_ADDR_EXP 42
9700: PUSH
9701: LD_INT 2
9703: ST_TO_ADDR
// def_shipments_density := 1 ;
9704: LD_ADDR_EXP 43
9708: PUSH
9709: LD_INT 1
9711: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9712: LD_ADDR_EXP 44
9716: PUSH
9717: LD_INT 0
9719: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
9720: LD_ADDR_EXP 45
9724: PUSH
9725: LD_INT 0
9727: ST_TO_ADDR
// def_shared_vision := 1 ;
9728: LD_ADDR_EXP 46
9732: PUSH
9733: LD_INT 1
9735: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
9736: LD_ADDR_EXP 47
9740: PUSH
9741: LD_INT 0
9743: PPUSH
9744: LD_INT 2
9746: PPUSH
9747: CALL_OW 12
9751: ST_TO_ADDR
// def_siberite_detection := 0 ;
9752: LD_ADDR_EXP 48
9756: PUSH
9757: LD_INT 0
9759: ST_TO_ADDR
// def_people_respawning := 0 ;
9760: LD_ADDR_EXP 49
9764: PUSH
9765: LD_INT 0
9767: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
9768: LD_ADDR_EXP 50
9772: PUSH
9773: LD_INT 2
9775: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9776: LD_ADDR_EXP 51
9780: PUSH
9781: LD_INT 0
9783: ST_TO_ADDR
// def_builduptime := 0 ;
9784: LD_ADDR_EXP 52
9788: PUSH
9789: LD_INT 0
9791: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
9792: LD_ADDR_VAR 0 2
9796: PUSH
9797: LD_INT 23
9799: PUSH
9800: LD_INT 20
9802: PUSH
9803: LD_INT 40
9805: PUSH
9806: LD_INT 47
9808: PUSH
9809: LD_INT 46
9811: PUSH
9812: LD_INT 39
9814: PUSH
9815: LD_INT 71
9817: PUSH
9818: LD_INT 34
9820: PUSH
9821: LD_INT 41
9823: PUSH
9824: LD_INT 44
9826: PUSH
9827: LD_INT 17
9829: PUSH
9830: LD_INT 16
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
9847: LD_ADDR_VAR 0 3
9851: PUSH
9852: LD_INT 37
9854: PUSH
9855: LD_INT 5
9857: PUSH
9858: LD_INT 13
9860: PUSH
9861: LD_INT 34
9863: PUSH
9864: LD_INT 12
9866: PUSH
9867: LD_INT 15
9869: PUSH
9870: LD_INT 11
9872: PUSH
9873: LD_INT 14
9875: PUSH
9876: LD_INT 29
9878: PUSH
9879: LD_INT 30
9881: PUSH
9882: LD_INT 28
9884: PUSH
9885: LD_INT 24
9887: PUSH
9888: LD_INT 25
9890: PUSH
9891: LD_INT 20
9893: PUSH
9894: LD_INT 21
9896: PUSH
9897: LD_INT 22
9899: PUSH
9900: LD_INT 36
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9922: LD_ADDR_LOC 21
9926: PUSH
9927: EMPTY
9928: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
9929: LD_ADDR_LOC 22
9933: PUSH
9934: LD_INT 14
9936: PUSH
9937: EMPTY
9938: LIST
9939: ST_TO_ADDR
// Banned_Controls := [ ] ;
9940: LD_ADDR_LOC 23
9944: PUSH
9945: EMPTY
9946: ST_TO_ADDR
// Banned_Engines := [ ] ;
9947: LD_ADDR_LOC 24
9951: PUSH
9952: EMPTY
9953: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
9954: LD_ADDR_LOC 19
9958: PUSH
9959: LD_INT 31
9961: PUSH
9962: LD_INT 32
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: PUSH
9969: LD_INT 4
9971: PUSH
9972: EMPTY
9973: LIST
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
9979: LD_ADDR_LOC 20
9983: PUSH
9984: LD_INT 2
9986: PUSH
9987: LD_INT 1
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: ST_TO_ADDR
// for i := 1 to 8 do
9994: LD_ADDR_VAR 0 4
9998: PUSH
9999: DOUBLE
10000: LD_INT 1
10002: DEC
10003: ST_TO_ADDR
10004: LD_INT 8
10006: PUSH
10007: FOR_TO
10008: IFFALSE 10059
// if ( Side_Nations [ i ] = 3 ) then
10010: LD_EXP 20
10014: PUSH
10015: LD_VAR 0 4
10019: ARRAY
10020: PUSH
10021: LD_INT 3
10023: EQUAL
10024: IFFALSE 10057
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
10026: LD_ADDR_EXP 20
10030: PUSH
10031: LD_EXP 20
10035: PPUSH
10036: LD_VAR 0 4
10040: PPUSH
10041: LD_INT 1
10043: PPUSH
10044: LD_INT 2
10046: PPUSH
10047: CALL_OW 12
10051: PPUSH
10052: CALL_OW 1
10056: ST_TO_ADDR
10057: GO 10007
10059: POP
10060: POP
// end ; end ;
10061: GO 10064
10063: POP
// for i := 1 to 8 do
10064: LD_ADDR_VAR 0 4
10068: PUSH
10069: DOUBLE
10070: LD_INT 1
10072: DEC
10073: ST_TO_ADDR
10074: LD_INT 8
10076: PUSH
10077: FOR_TO
10078: IFFALSE 10162
// if Side_Positions [ i ] then
10080: LD_EXP 19
10084: PUSH
10085: LD_VAR 0 4
10089: ARRAY
10090: IFFALSE 10160
// begin for j in Unavailable_Techs do
10092: LD_ADDR_VAR 0 5
10096: PUSH
10097: LD_VAR 0 2
10101: PUSH
10102: FOR_IN
10103: IFFALSE 10124
// SetTech ( j , i , 0 ) ;
10105: LD_VAR 0 5
10109: PPUSH
10110: LD_VAR 0 4
10114: PPUSH
10115: LD_INT 0
10117: PPUSH
10118: CALL_OW 322
10122: GO 10102
10124: POP
10125: POP
// for j in Unavailable_Builds do
10126: LD_ADDR_VAR 0 5
10130: PUSH
10131: LD_VAR 0 3
10135: PUSH
10136: FOR_IN
10137: IFFALSE 10158
// SetRestrict ( j , i , 0 ) ;
10139: LD_VAR 0 5
10143: PPUSH
10144: LD_VAR 0 4
10148: PPUSH
10149: LD_INT 0
10151: PPUSH
10152: CALL_OW 324
10156: GO 10136
10158: POP
10159: POP
// end ;
10160: GO 10077
10162: POP
10163: POP
// end ;
10164: LD_VAR 0 1
10168: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
10169: LD_INT 0
10171: PPUSH
10172: PPUSH
10173: PPUSH
10174: PPUSH
10175: PPUSH
10176: PPUSH
10177: PPUSH
// for i := 1 to Restricted_Builds do
10178: LD_ADDR_VAR 0 2
10182: PUSH
10183: DOUBLE
10184: LD_INT 1
10186: DEC
10187: ST_TO_ADDR
10188: LD_LOC 19
10192: PUSH
10193: FOR_TO
10194: IFFALSE 10504
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
10196: LD_LOC 19
10200: PUSH
10201: LD_VAR 0 2
10205: ARRAY
10206: PUSH
10207: LD_INT 1
10209: ARRAY
10210: PUSH
10211: LD_INT 31
10213: DOUBLE
10214: EQUAL
10215: IFTRUE 10231
10217: LD_INT 32
10219: DOUBLE
10220: EQUAL
10221: IFTRUE 10231
10223: LD_INT 33
10225: DOUBLE
10226: EQUAL
10227: IFTRUE 10231
10229: GO 10242
10231: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
10232: LD_ADDR_VAR 0 6
10236: PUSH
10237: LD_STRING #Turrets
10239: ST_TO_ADDR
10240: GO 10287
10242: LD_INT 4
10244: DOUBLE
10245: EQUAL
10246: IFTRUE 10256
10248: LD_INT 5
10250: DOUBLE
10251: EQUAL
10252: IFTRUE 10256
10254: GO 10267
10256: POP
// btype := #Armouries ; b_Behemoth :
10257: LD_ADDR_VAR 0 6
10261: PUSH
10262: LD_STRING #Armouries
10264: ST_TO_ADDR
10265: GO 10287
10267: LD_INT 37
10269: DOUBLE
10270: EQUAL
10271: IFTRUE 10275
10273: GO 10286
10275: POP
// btype := #Behemoths ; end ;
10276: LD_ADDR_VAR 0 6
10280: PUSH
10281: LD_STRING #Behemoths
10283: ST_TO_ADDR
10284: GO 10287
10286: POP
// list := [ ] ;
10287: LD_ADDR_VAR 0 7
10291: PUSH
10292: EMPTY
10293: ST_TO_ADDR
// for j := 1 to 8 do
10294: LD_ADDR_VAR 0 3
10298: PUSH
10299: DOUBLE
10300: LD_INT 1
10302: DEC
10303: ST_TO_ADDR
10304: LD_INT 8
10306: PUSH
10307: FOR_TO
10308: IFFALSE 10401
// if Side_Positions [ j ] then
10310: LD_EXP 19
10314: PUSH
10315: LD_VAR 0 3
10319: ARRAY
10320: IFFALSE 10399
// begin amount := 0 ;
10322: LD_ADDR_VAR 0 5
10326: PUSH
10327: LD_INT 0
10329: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
10330: LD_ADDR_VAR 0 4
10334: PUSH
10335: LD_LOC 19
10339: PUSH
10340: LD_VAR 0 2
10344: ARRAY
10345: PUSH
10346: FOR_IN
10347: IFFALSE 10395
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
10349: LD_ADDR_VAR 0 5
10353: PUSH
10354: LD_VAR 0 5
10358: PUSH
10359: LD_INT 22
10361: PUSH
10362: LD_VAR 0 3
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PUSH
10371: LD_INT 30
10373: PUSH
10374: LD_VAR 0 4
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PPUSH
10387: CALL_OW 69
10391: PLUS
10392: ST_TO_ADDR
10393: GO 10346
10395: POP
10396: POP
// break ;
10397: GO 10401
// end ;
10399: GO 10307
10401: POP
10402: POP
// list := [ ] ;
10403: LD_ADDR_VAR 0 7
10407: PUSH
10408: EMPTY
10409: ST_TO_ADDR
// for j := 1 to 8 do
10410: LD_ADDR_VAR 0 3
10414: PUSH
10415: DOUBLE
10416: LD_INT 1
10418: DEC
10419: ST_TO_ADDR
10420: LD_INT 8
10422: PUSH
10423: FOR_TO
10424: IFFALSE 10444
// list := list ^ amount ;
10426: LD_ADDR_VAR 0 7
10430: PUSH
10431: LD_VAR 0 7
10435: PUSH
10436: LD_VAR 0 5
10440: ADD
10441: ST_TO_ADDR
10442: GO 10423
10444: POP
10445: POP
// Already_Built := Already_Built ^ [ list ] ;
10446: LD_ADDR_LOC 25
10450: PUSH
10451: LD_LOC 25
10455: PUSH
10456: LD_VAR 0 7
10460: PUSH
10461: EMPTY
10462: LIST
10463: ADD
10464: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
10465: LD_ADDR_LOC 26
10469: PUSH
10470: LD_LOC 26
10474: PUSH
10475: LD_VAR 0 6
10479: PUSH
10480: LD_VAR 0 5
10484: PUSH
10485: LD_LOC 20
10489: PUSH
10490: LD_VAR 0 2
10494: ARRAY
10495: PUSH
10496: EMPTY
10497: LIST
10498: LIST
10499: LIST
10500: ADD
10501: ST_TO_ADDR
// end ;
10502: GO 10193
10504: POP
10505: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10506: LD_ADDR_LOC 27
10510: PUSH
10511: LD_INT 0
10513: PUSH
10514: LD_INT 0
10516: PUSH
10517: LD_INT 0
10519: PUSH
10520: LD_INT 0
10522: PUSH
10523: LD_INT 0
10525: PUSH
10526: LD_INT 0
10528: PUSH
10529: LD_INT 0
10531: PUSH
10532: LD_INT 0
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: ST_TO_ADDR
// if Limits_Info then
10545: LD_LOC 26
10549: IFFALSE 10565
// Limits_Info := #Limits ^ Limits_Info ;
10551: LD_ADDR_LOC 26
10555: PUSH
10556: LD_STRING #Limits
10558: PUSH
10559: LD_LOC 26
10563: ADD
10564: ST_TO_ADDR
// end ;
10565: LD_VAR 0 1
10569: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
10570: LD_INT 0
10572: PPUSH
10573: PPUSH
10574: PPUSH
10575: PPUSH
// for i := 1 to Restricted_Builds do
10576: LD_ADDR_VAR 0 7
10580: PUSH
10581: DOUBLE
10582: LD_INT 1
10584: DEC
10585: ST_TO_ADDR
10586: LD_LOC 19
10590: PUSH
10591: FOR_TO
10592: IFFALSE 11015
// if BType in Restricted_Builds [ i ] then
10594: LD_VAR 0 2
10598: PUSH
10599: LD_LOC 19
10603: PUSH
10604: LD_VAR 0 7
10608: ARRAY
10609: IN
10610: IFFALSE 11013
// begin if old_side then
10612: LD_VAR 0 4
10616: IFFALSE 10742
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
10618: LD_LOC 25
10622: PUSH
10623: LD_VAR 0 7
10627: ARRAY
10628: PUSH
10629: LD_VAR 0 3
10633: ARRAY
10634: PUSH
10635: LD_VAR 0 5
10639: PLUS
10640: PUSH
10641: LD_LOC 20
10645: PUSH
10646: LD_VAR 0 7
10650: ARRAY
10651: GREATER
10652: IFFALSE 10678
// begin SetSide ( un , old_side ) ;
10654: LD_VAR 0 1
10658: PPUSH
10659: LD_VAR 0 4
10663: PPUSH
10664: CALL_OW 235
// count := 0 ;
10668: LD_ADDR_VAR 0 5
10672: PUSH
10673: LD_INT 0
10675: ST_TO_ADDR
// end else
10676: GO 10742
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
10678: LD_ADDR_LOC 25
10682: PUSH
10683: LD_LOC 25
10687: PPUSH
10688: LD_VAR 0 7
10692: PPUSH
10693: LD_LOC 25
10697: PUSH
10698: LD_VAR 0 7
10702: ARRAY
10703: PPUSH
10704: LD_VAR 0 4
10708: PPUSH
10709: LD_LOC 25
10713: PUSH
10714: LD_VAR 0 7
10718: ARRAY
10719: PUSH
10720: LD_VAR 0 4
10724: ARRAY
10725: PUSH
10726: LD_VAR 0 5
10730: MINUS
10731: PPUSH
10732: CALL_OW 1
10736: PPUSH
10737: CALL_OW 1
10741: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
10742: LD_ADDR_LOC 25
10746: PUSH
10747: LD_LOC 25
10751: PPUSH
10752: LD_VAR 0 7
10756: PPUSH
10757: LD_LOC 25
10761: PUSH
10762: LD_VAR 0 7
10766: ARRAY
10767: PPUSH
10768: LD_VAR 0 3
10772: PPUSH
10773: LD_LOC 25
10777: PUSH
10778: LD_VAR 0 7
10782: ARRAY
10783: PUSH
10784: LD_VAR 0 3
10788: ARRAY
10789: PUSH
10790: LD_VAR 0 5
10794: PLUS
10795: PPUSH
10796: CALL_OW 1
10800: PPUSH
10801: CALL_OW 1
10805: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
10806: LD_VAR 0 5
10810: PUSH
10811: LD_INT 0
10813: NONEQUAL
10814: PUSH
10815: LD_VAR 0 3
10819: PUSH
10820: LD_OWVAR 2
10824: EQUAL
10825: AND
10826: IFFALSE 10869
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
10828: LD_ADDR_LOC 26
10832: PUSH
10833: LD_LOC 26
10837: PPUSH
10838: LD_INT 3
10840: PUSH
10841: LD_VAR 0 7
10845: MUL
10846: PPUSH
10847: LD_LOC 25
10851: PUSH
10852: LD_VAR 0 7
10856: ARRAY
10857: PUSH
10858: LD_VAR 0 3
10862: ARRAY
10863: PPUSH
10864: CALL_OW 1
10868: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
10869: LD_LOC 25
10873: PUSH
10874: LD_VAR 0 7
10878: ARRAY
10879: PUSH
10880: LD_VAR 0 3
10884: ARRAY
10885: PUSH
10886: LD_LOC 20
10890: PUSH
10891: LD_VAR 0 7
10895: ARRAY
10896: GREATER
10897: IFFALSE 10924
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
10899: LD_ADDR_LOC 27
10903: PUSH
10904: LD_LOC 27
10908: PPUSH
10909: LD_VAR 0 3
10913: PPUSH
10914: LD_INT 1
10916: PPUSH
10917: CALL_OW 1
10921: ST_TO_ADDR
// end else
10922: GO 11011
// begin for j := 1 to Restricted_Builds do
10924: LD_ADDR_VAR 0 8
10928: PUSH
10929: DOUBLE
10930: LD_INT 1
10932: DEC
10933: ST_TO_ADDR
10934: LD_LOC 19
10938: PUSH
10939: FOR_TO
10940: IFFALSE 10984
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
10942: LD_LOC 25
10946: PUSH
10947: LD_VAR 0 8
10951: ARRAY
10952: PUSH
10953: LD_VAR 0 3
10957: ARRAY
10958: PUSH
10959: LD_LOC 20
10963: PUSH
10964: LD_VAR 0 8
10968: ARRAY
10969: GREATER
10970: IFFALSE 10982
// begin Is_Cheater := true ;
10972: LD_ADDR_VAR 0 9
10976: PUSH
10977: LD_INT 1
10979: ST_TO_ADDR
// break ;
10980: GO 10984
// end ;
10982: GO 10939
10984: POP
10985: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
10986: LD_ADDR_LOC 27
10990: PUSH
10991: LD_LOC 27
10995: PPUSH
10996: LD_VAR 0 3
11000: PPUSH
11001: LD_VAR 0 9
11005: PPUSH
11006: CALL_OW 1
11010: ST_TO_ADDR
// end ; break ;
11011: GO 11015
// end ;
11013: GO 10591
11015: POP
11016: POP
// end ;
11017: LD_VAR 0 6
11021: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
11022: LD_VAR 0 5
11026: PUSH
11027: LD_LOC 21
11031: IN
11032: PUSH
11033: LD_VAR 0 2
11037: PUSH
11038: LD_LOC 22
11042: IN
11043: OR
11044: PUSH
11045: LD_VAR 0 4
11049: PUSH
11050: LD_LOC 23
11054: IN
11055: OR
11056: PUSH
11057: LD_VAR 0 3
11061: PUSH
11062: LD_LOC 24
11066: IN
11067: OR
11068: IFFALSE 11079
// ComCancel ( factory ) ;
11070: LD_VAR 0 1
11074: PPUSH
11075: CALL_OW 127
// end ;
11079: PPOPN 5
11081: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
11082: LD_VAR 0 2
11086: PUSH
11087: LD_LOC 21
11091: IN
11092: IFFALSE 11103
// ComCancel ( building ) ;
11094: LD_VAR 0 1
11098: PPUSH
11099: CALL_OW 127
// end ; end_of_file
11103: PPOPN 2
11105: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
11106: LD_INT 0
11108: PPUSH
11109: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
11110: LD_ADDR_VAR 0 2
11114: PUSH
11115: LD_STRING #Multi1x1-Time
11117: PUSH
11118: LD_OWVAR 1
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: ST_TO_ADDR
// if WaitServerStrings then
11127: LD_EXP 55
11131: IFFALSE 11149
// AllStrings = AllStrings ^ WaitServerStrings ;
11133: LD_ADDR_VAR 0 2
11137: PUSH
11138: LD_VAR 0 2
11142: PUSH
11143: LD_EXP 55
11147: ADD
11148: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
11149: LD_INT 0
11151: PUSH
11152: LD_EXP 12
11156: PUSH
11157: LD_OWVAR 1
11161: MINUS
11162: LESSEQUAL
11163: IFFALSE 11194
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
11165: LD_ADDR_VAR 0 2
11169: PUSH
11170: LD_VAR 0 2
11174: PUSH
11175: LD_STRING #allowedsibbomb
11177: PUSH
11178: LD_EXP 12
11182: PUSH
11183: LD_OWVAR 1
11187: MINUS
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: ADD
11193: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
11194: LD_INT 0
11196: PUSH
11197: LD_EXP 58
11201: PUSH
11202: LD_OWVAR 1
11206: MINUS
11207: LESSEQUAL
11208: IFFALSE 11239
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
11210: LD_ADDR_VAR 0 2
11214: PUSH
11215: LD_VAR 0 2
11219: PUSH
11220: LD_STRING #builduptime
11222: PUSH
11223: LD_EXP 58
11227: PUSH
11228: LD_OWVAR 1
11232: MINUS
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: ADD
11238: ST_TO_ADDR
// if ( ExtraStrings ) then
11239: LD_EXP 54
11243: IFFALSE 11265
// AllStrings := AllStrings ^  ^ ExtraStrings ;
11245: LD_ADDR_VAR 0 2
11249: PUSH
11250: LD_VAR 0 2
11254: PUSH
11255: LD_STRING 
11257: ADD
11258: PUSH
11259: LD_EXP 54
11263: ADD
11264: ST_TO_ADDR
// if ( LimitsStrings ) then
11265: CALL 7946 0 0
11269: IFFALSE 11291
// AllStrings := AllStrings ^  ^ LimitsStrings ;
11271: LD_ADDR_VAR 0 2
11275: PUSH
11276: LD_VAR 0 2
11280: PUSH
11281: LD_STRING 
11283: ADD
11284: PUSH
11285: CALL 7946 0 0
11289: ADD
11290: ST_TO_ADDR
// Display_Strings := AllStrings ;
11291: LD_ADDR_OWVAR 47
11295: PUSH
11296: LD_VAR 0 2
11300: ST_TO_ADDR
// end ;
11301: LD_VAR 0 1
11305: RET
// every 0 0$1 do
11306: GO 11308
11308: DISABLE
// begin ShowTimer ;
11309: CALL 11106 0 0
// enable ;
11313: ENABLE
// end ; end_of_file
11314: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
11315: LD_INT 0
11317: PPUSH
11318: PPUSH
11319: PPUSH
// BuildUpTime_Delay = 0 ;
11320: LD_ADDR_EXP 58
11324: PUSH
11325: LD_INT 0
11327: ST_TO_ADDR
// if not def_builduptime then
11328: LD_EXP 52
11332: NOT
11333: IFFALSE 11337
// exit ;
11335: GO 11520
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
11337: LD_ADDR_EXP 58
11341: PUSH
11342: LD_INT 8400
11344: PUSH
11345: LD_INT 2100
11347: PUSH
11348: LD_EXP 52
11352: MUL
11353: PLUS
11354: ST_TO_ADDR
// BuildUpTimeActive := true ;
11355: LD_ADDR_EXP 57
11359: PUSH
11360: LD_INT 1
11362: ST_TO_ADDR
// for i := 1 to 8 do
11363: LD_ADDR_VAR 0 2
11367: PUSH
11368: DOUBLE
11369: LD_INT 1
11371: DEC
11372: ST_TO_ADDR
11373: LD_INT 8
11375: PUSH
11376: FOR_TO
11377: IFFALSE 11518
// if Side_Positions [ i ] then
11379: LD_EXP 19
11383: PUSH
11384: LD_VAR 0 2
11388: ARRAY
11389: IFFALSE 11516
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
11391: LD_EXP 56
11395: PUSH
11396: LD_EXP 19
11400: PUSH
11401: LD_VAR 0 2
11405: ARRAY
11406: ARRAY
11407: PPUSH
11408: LD_INT 5
11410: PPUSH
11411: CALL_OW 424
// for j := 1 to 8 do
11415: LD_ADDR_VAR 0 3
11419: PUSH
11420: DOUBLE
11421: LD_INT 1
11423: DEC
11424: ST_TO_ADDR
11425: LD_INT 8
11427: PUSH
11428: FOR_TO
11429: IFFALSE 11514
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
11431: LD_EXP 19
11435: PUSH
11436: LD_VAR 0 3
11440: ARRAY
11441: PUSH
11442: LD_EXP 16
11446: PUSH
11447: LD_VAR 0 2
11451: ARRAY
11452: PUSH
11453: LD_EXP 16
11457: PUSH
11458: LD_VAR 0 3
11462: ARRAY
11463: NONEQUAL
11464: PUSH
11465: LD_EXP 21
11469: NOT
11470: PUSH
11471: LD_VAR 0 2
11475: PUSH
11476: LD_VAR 0 3
11480: NONEQUAL
11481: AND
11482: OR
11483: AND
11484: IFFALSE 11512
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
11486: LD_VAR 0 3
11490: PPUSH
11491: LD_EXP 56
11495: PUSH
11496: LD_EXP 19
11500: PUSH
11501: LD_VAR 0 2
11505: ARRAY
11506: ARRAY
11507: PPUSH
11508: CALL_OW 333
11512: GO 11428
11514: POP
11515: POP
// end ;
11516: GO 11376
11518: POP
11519: POP
// end ;
11520: LD_VAR 0 1
11524: RET
// export function EndBuildUp ; var i , j ; begin
11525: LD_INT 0
11527: PPUSH
11528: PPUSH
11529: PPUSH
// BuildUpTimeActive := false ;
11530: LD_ADDR_EXP 57
11534: PUSH
11535: LD_INT 0
11537: ST_TO_ADDR
// for i := 1 to 8 do
11538: LD_ADDR_VAR 0 2
11542: PUSH
11543: DOUBLE
11544: LD_INT 1
11546: DEC
11547: ST_TO_ADDR
11548: LD_INT 8
11550: PUSH
11551: FOR_TO
11552: IFFALSE 11693
// if Side_Positions [ i ] then
11554: LD_EXP 19
11558: PUSH
11559: LD_VAR 0 2
11563: ARRAY
11564: IFFALSE 11691
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
11566: LD_EXP 56
11570: PUSH
11571: LD_EXP 19
11575: PUSH
11576: LD_VAR 0 2
11580: ARRAY
11581: ARRAY
11582: PPUSH
11583: LD_INT 0
11585: PPUSH
11586: CALL_OW 424
// for j := 1 to 8 do
11590: LD_ADDR_VAR 0 3
11594: PUSH
11595: DOUBLE
11596: LD_INT 1
11598: DEC
11599: ST_TO_ADDR
11600: LD_INT 8
11602: PUSH
11603: FOR_TO
11604: IFFALSE 11689
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
11606: LD_EXP 19
11610: PUSH
11611: LD_VAR 0 3
11615: ARRAY
11616: PUSH
11617: LD_EXP 16
11621: PUSH
11622: LD_VAR 0 2
11626: ARRAY
11627: PUSH
11628: LD_EXP 16
11632: PUSH
11633: LD_VAR 0 3
11637: ARRAY
11638: NONEQUAL
11639: PUSH
11640: LD_EXP 21
11644: NOT
11645: PUSH
11646: LD_VAR 0 2
11650: PUSH
11651: LD_VAR 0 3
11655: NONEQUAL
11656: AND
11657: OR
11658: AND
11659: IFFALSE 11687
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
11661: LD_VAR 0 3
11665: PPUSH
11666: LD_EXP 56
11670: PUSH
11671: LD_EXP 19
11675: PUSH
11676: LD_VAR 0 2
11680: ARRAY
11681: ARRAY
11682: PPUSH
11683: CALL_OW 334
11687: GO 11603
11689: POP
11690: POP
// end ;
11691: GO 11551
11693: POP
11694: POP
// end ;
11695: LD_VAR 0 1
11699: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
11700: LD_EXP 57
11704: IFFALSE 11879
11706: GO 11708
11708: DISABLE
11709: LD_INT 0
11711: PPUSH
11712: PPUSH
// begin for i := 1 to 8 do
11713: LD_ADDR_VAR 0 1
11717: PUSH
11718: DOUBLE
11719: LD_INT 1
11721: DEC
11722: ST_TO_ADDR
11723: LD_INT 8
11725: PUSH
11726: FOR_TO
11727: IFFALSE 11876
// if Side_Positions [ i ] then
11729: LD_EXP 19
11733: PUSH
11734: LD_VAR 0 1
11738: ARRAY
11739: IFFALSE 11874
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
11741: LD_ADDR_VAR 0 2
11745: PUSH
11746: LD_EXP 56
11750: PUSH
11751: LD_EXP 19
11755: PUSH
11756: LD_VAR 0 1
11760: ARRAY
11761: ARRAY
11762: PPUSH
11763: LD_INT 2
11765: PUSH
11766: LD_INT 21
11768: PUSH
11769: LD_INT 1
11771: PUSH
11772: EMPTY
11773: LIST
11774: LIST
11775: PUSH
11776: LD_INT 21
11778: PUSH
11779: LD_INT 2
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: PUSH
11786: EMPTY
11787: LIST
11788: LIST
11789: LIST
11790: PUSH
11791: LD_INT 22
11793: PUSH
11794: LD_OWVAR 2
11798: PUSH
11799: EMPTY
11800: LIST
11801: LIST
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: PPUSH
11807: CALL_OW 70
11811: PUSH
11812: FOR_IN
11813: IFFALSE 11872
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
11815: LD_EXP 16
11819: PUSH
11820: LD_VAR 0 1
11824: ARRAY
11825: PUSH
11826: LD_EXP 16
11830: PUSH
11831: LD_OWVAR 2
11835: ARRAY
11836: NONEQUAL
11837: PUSH
11838: LD_EXP 21
11842: NOT
11843: PUSH
11844: LD_VAR 0 1
11848: PUSH
11849: LD_OWVAR 2
11853: NONEQUAL
11854: AND
11855: OR
11856: IFFALSE 11870
// ComMoveToArea ( un , BuildUpEscape ) ;
11858: LD_VAR 0 2
11862: PPUSH
11863: LD_INT 12
11865: PPUSH
11866: CALL_OW 113
11870: GO 11812
11872: POP
11873: POP
11874: GO 11726
11876: POP
11877: POP
// enable ;
11878: ENABLE
// end ;
11879: PPOPN 2
11881: END
// every 0 0$1 trigger def_builduptime do
11882: LD_EXP 52
11886: IFFALSE 11912
11888: GO 11890
11890: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
11891: LD_INT 8400
11893: PUSH
11894: LD_EXP 52
11898: PUSH
11899: LD_INT 2100
11901: MUL
11902: PLUS
11903: PPUSH
11904: CALL_OW 67
// EndBuildUp ;
11908: CALL 11525 0 0
// end ; end_of_file
11912: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
11913: LD_INT 0
11915: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
11916: LD_VAR 0 1
11920: PPUSH
11921: CALL_OW 255
11925: PUSH
11926: LD_VAR 0 4
11930: EQUAL
11931: IFFALSE 11950
// begin SetAchievement ( ACH_RAD ) ;
11933: LD_STRING ACH_RAD
11935: PPUSH
11936: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
11940: LD_STRING ACH_NL
11942: PPUSH
11943: LD_INT 1
11945: PPUSH
11946: CALL_OW 564
// end end ;
11950: LD_VAR 0 5
11954: RET
// export function SA_Win ( side ) ; begin
11955: LD_INT 0
11957: PPUSH
// case side of 1 :
11958: LD_VAR 0 1
11962: PUSH
11963: LD_INT 1
11965: DOUBLE
11966: EQUAL
11967: IFTRUE 11971
11969: GO 11984
11971: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
11972: LD_STRING ACH_AH
11974: PPUSH
11975: LD_INT 1
11977: PPUSH
11978: CALL_OW 564
11982: GO 12147
11984: LD_INT 2
11986: DOUBLE
11987: EQUAL
11988: IFTRUE 11992
11990: GO 12005
11992: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
11993: LD_STRING ACH_E
11995: PPUSH
11996: LD_INT 1
11998: PPUSH
11999: CALL_OW 564
12003: GO 12147
12005: LD_INT 3
12007: DOUBLE
12008: EQUAL
12009: IFTRUE 12013
12011: GO 12026
12013: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
12014: LD_STRING ACH_OOL
12016: PPUSH
12017: LD_INT 1
12019: PPUSH
12020: CALL_OW 564
12024: GO 12147
12026: LD_INT 1
12028: PUSH
12029: LD_INT 2
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: DOUBLE
12036: EQUAL
12037: IFTRUE 12041
12039: GO 12066
12041: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12042: LD_STRING ACH_AH
12044: PPUSH
12045: LD_REAL  5.00000000000000E-0001
12048: PPUSH
12049: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
12053: LD_STRING ACH_E
12055: PPUSH
12056: LD_REAL  5.00000000000000E-0001
12059: PPUSH
12060: CALL_OW 564
// end ; [ 2 , 3 ] :
12064: GO 12147
12066: LD_INT 2
12068: PUSH
12069: LD_INT 3
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: DOUBLE
12076: EQUAL
12077: IFTRUE 12081
12079: GO 12106
12081: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
12082: LD_STRING ACH_OOL
12084: PPUSH
12085: LD_REAL  5.00000000000000E-0001
12088: PPUSH
12089: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
12093: LD_STRING ACH_E
12095: PPUSH
12096: LD_REAL  5.00000000000000E-0001
12099: PPUSH
12100: CALL_OW 564
// end ; [ 3 , 1 ] :
12104: GO 12147
12106: LD_INT 3
12108: PUSH
12109: LD_INT 1
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: DOUBLE
12116: EQUAL
12117: IFTRUE 12121
12119: GO 12146
12121: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12122: LD_STRING ACH_AH
12124: PPUSH
12125: LD_REAL  5.00000000000000E-0001
12128: PPUSH
12129: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
12133: LD_STRING ACH_OOL
12135: PPUSH
12136: LD_REAL  5.00000000000000E-0001
12139: PPUSH
12140: CALL_OW 564
// end ; end ;
12144: GO 12147
12146: POP
// end ; end_of_file
12147: LD_VAR 0 2
12151: RET
// export function SetMpTechs ( ) ; var side , i ; begin
12152: LD_INT 0
12154: PPUSH
12155: PPUSH
12156: PPUSH
// for side = 1 to 8 do
12157: LD_ADDR_VAR 0 2
12161: PUSH
12162: DOUBLE
12163: LD_INT 1
12165: DEC
12166: ST_TO_ADDR
12167: LD_INT 8
12169: PUSH
12170: FOR_TO
12171: IFFALSE 12292
// begin for i = 1 to 72 do
12173: LD_ADDR_VAR 0 3
12177: PUSH
12178: DOUBLE
12179: LD_INT 1
12181: DEC
12182: ST_TO_ADDR
12183: LD_INT 72
12185: PUSH
12186: FOR_TO
12187: IFFALSE 12218
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
12189: LD_VAR 0 3
12193: PPUSH
12194: LD_VAR 0 2
12198: PPUSH
12199: LD_INT 0
12201: PPUSH
12202: LD_VAR 0 3
12206: PPUSH
12207: CALL_OW 565
12211: PPUSH
12212: CALL_OW 322
12216: GO 12186
12218: POP
12219: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
12220: LD_INT 73
12222: PPUSH
12223: LD_VAR 0 2
12227: PPUSH
12228: LD_INT 0
12230: PPUSH
12231: LD_INT 25
12233: PPUSH
12234: CALL_OW 565
12238: PPUSH
12239: CALL_OW 322
// for i = 0 to 40 do
12243: LD_ADDR_VAR 0 3
12247: PUSH
12248: DOUBLE
12249: LD_INT 0
12251: DEC
12252: ST_TO_ADDR
12253: LD_INT 40
12255: PUSH
12256: FOR_TO
12257: IFFALSE 12288
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
12259: LD_VAR 0 3
12263: PPUSH
12264: LD_VAR 0 2
12268: PPUSH
12269: LD_INT 1
12271: PPUSH
12272: LD_VAR 0 3
12276: PPUSH
12277: CALL_OW 565
12281: PPUSH
12282: CALL_OW 324
12286: GO 12256
12288: POP
12289: POP
// end ;
12290: GO 12170
12292: POP
12293: POP
// end ;
12294: LD_VAR 0 1
12298: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
12299: LD_INT 0
12301: PPUSH
12302: PPUSH
12303: PPUSH
// for side = 1 to 8 do
12304: LD_ADDR_VAR 0 3
12308: PUSH
12309: DOUBLE
12310: LD_INT 1
12312: DEC
12313: ST_TO_ADDR
12314: LD_INT 8
12316: PUSH
12317: FOR_TO
12318: IFFALSE 16314
// begin for i = 1 to 73 do
12320: LD_ADDR_VAR 0 4
12324: PUSH
12325: DOUBLE
12326: LD_INT 1
12328: DEC
12329: ST_TO_ADDR
12330: LD_INT 73
12332: PUSH
12333: FOR_TO
12334: IFFALSE 12355
// SetTech ( i , side , state_disabled ) ;
12336: LD_VAR 0 4
12340: PPUSH
12341: LD_VAR 0 3
12345: PPUSH
12346: LD_INT 0
12348: PPUSH
12349: CALL_OW 322
12353: GO 12333
12355: POP
12356: POP
// for i = 0 to 40 do
12357: LD_ADDR_VAR 0 4
12361: PUSH
12362: DOUBLE
12363: LD_INT 0
12365: DEC
12366: ST_TO_ADDR
12367: LD_INT 40
12369: PUSH
12370: FOR_TO
12371: IFFALSE 12392
// SetRestrict ( i , side , false ) ;
12373: LD_VAR 0 4
12377: PPUSH
12378: LD_VAR 0 3
12382: PPUSH
12383: LD_INT 0
12385: PPUSH
12386: CALL_OW 324
12390: GO 12370
12392: POP
12393: POP
// case level of 1 :
12394: LD_VAR 0 1
12398: PUSH
12399: LD_INT 1
12401: DOUBLE
12402: EQUAL
12403: IFTRUE 12407
12405: GO 12560
12407: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12408: LD_INT 35
12410: PPUSH
12411: LD_VAR 0 3
12415: PPUSH
12416: LD_INT 1
12418: PPUSH
12419: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12423: LD_INT 45
12425: PPUSH
12426: LD_VAR 0 3
12430: PPUSH
12431: LD_INT 1
12433: PPUSH
12434: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12438: LD_INT 46
12440: PPUSH
12441: LD_VAR 0 3
12445: PPUSH
12446: LD_INT 1
12448: PPUSH
12449: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12453: LD_INT 47
12455: PPUSH
12456: LD_VAR 0 3
12460: PPUSH
12461: LD_INT 1
12463: PPUSH
12464: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12468: LD_INT 0
12470: PPUSH
12471: LD_VAR 0 3
12475: PPUSH
12476: LD_INT 1
12478: PPUSH
12479: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12483: LD_INT 2
12485: PPUSH
12486: LD_VAR 0 3
12490: PPUSH
12491: LD_INT 1
12493: PPUSH
12494: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12498: LD_INT 4
12500: PPUSH
12501: LD_VAR 0 3
12505: PPUSH
12506: LD_INT 1
12508: PPUSH
12509: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12513: LD_INT 6
12515: PPUSH
12516: LD_VAR 0 3
12520: PPUSH
12521: LD_INT 1
12523: PPUSH
12524: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12528: LD_INT 29
12530: PPUSH
12531: LD_VAR 0 3
12535: PPUSH
12536: LD_INT 1
12538: PPUSH
12539: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12543: LD_INT 31
12545: PPUSH
12546: LD_VAR 0 3
12550: PPUSH
12551: LD_INT 1
12553: PPUSH
12554: CALL_OW 324
// end ; 2 :
12558: GO 16312
12560: LD_INT 2
12562: DOUBLE
12563: EQUAL
12564: IFTRUE 12568
12566: GO 12766
12568: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12569: LD_INT 35
12571: PPUSH
12572: LD_VAR 0 3
12576: PPUSH
12577: LD_INT 1
12579: PPUSH
12580: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12584: LD_INT 45
12586: PPUSH
12587: LD_VAR 0 3
12591: PPUSH
12592: LD_INT 1
12594: PPUSH
12595: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12599: LD_INT 46
12601: PPUSH
12602: LD_VAR 0 3
12606: PPUSH
12607: LD_INT 1
12609: PPUSH
12610: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12614: LD_INT 47
12616: PPUSH
12617: LD_VAR 0 3
12621: PPUSH
12622: LD_INT 1
12624: PPUSH
12625: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12629: LD_INT 1
12631: PPUSH
12632: LD_VAR 0 3
12636: PPUSH
12637: LD_INT 1
12639: PPUSH
12640: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12644: LD_INT 2
12646: PPUSH
12647: LD_VAR 0 3
12651: PPUSH
12652: LD_INT 1
12654: PPUSH
12655: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12659: LD_INT 11
12661: PPUSH
12662: LD_VAR 0 3
12666: PPUSH
12667: LD_INT 1
12669: PPUSH
12670: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12674: LD_INT 0
12676: PPUSH
12677: LD_VAR 0 3
12681: PPUSH
12682: LD_INT 1
12684: PPUSH
12685: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12689: LD_INT 2
12691: PPUSH
12692: LD_VAR 0 3
12696: PPUSH
12697: LD_INT 1
12699: PPUSH
12700: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12704: LD_INT 4
12706: PPUSH
12707: LD_VAR 0 3
12711: PPUSH
12712: LD_INT 1
12714: PPUSH
12715: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12719: LD_INT 6
12721: PPUSH
12722: LD_VAR 0 3
12726: PPUSH
12727: LD_INT 1
12729: PPUSH
12730: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12734: LD_INT 29
12736: PPUSH
12737: LD_VAR 0 3
12741: PPUSH
12742: LD_INT 1
12744: PPUSH
12745: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12749: LD_INT 31
12751: PPUSH
12752: LD_VAR 0 3
12756: PPUSH
12757: LD_INT 1
12759: PPUSH
12760: CALL_OW 324
// end ; 3 :
12764: GO 16312
12766: LD_INT 3
12768: DOUBLE
12769: EQUAL
12770: IFTRUE 12774
12772: GO 13227
12774: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12775: LD_INT 35
12777: PPUSH
12778: LD_VAR 0 3
12782: PPUSH
12783: LD_INT 1
12785: PPUSH
12786: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12790: LD_INT 45
12792: PPUSH
12793: LD_VAR 0 3
12797: PPUSH
12798: LD_INT 1
12800: PPUSH
12801: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12805: LD_INT 46
12807: PPUSH
12808: LD_VAR 0 3
12812: PPUSH
12813: LD_INT 1
12815: PPUSH
12816: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12820: LD_INT 47
12822: PPUSH
12823: LD_VAR 0 3
12827: PPUSH
12828: LD_INT 1
12830: PPUSH
12831: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12835: LD_INT 1
12837: PPUSH
12838: LD_VAR 0 3
12842: PPUSH
12843: LD_INT 1
12845: PPUSH
12846: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12850: LD_INT 2
12852: PPUSH
12853: LD_VAR 0 3
12857: PPUSH
12858: LD_INT 1
12860: PPUSH
12861: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12865: LD_INT 11
12867: PPUSH
12868: LD_VAR 0 3
12872: PPUSH
12873: LD_INT 1
12875: PPUSH
12876: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12880: LD_INT 48
12882: PPUSH
12883: LD_VAR 0 3
12887: PPUSH
12888: LD_INT 1
12890: PPUSH
12891: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12895: LD_INT 69
12897: PPUSH
12898: LD_VAR 0 3
12902: PPUSH
12903: LD_INT 1
12905: PPUSH
12906: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12910: LD_INT 39
12912: PPUSH
12913: LD_VAR 0 3
12917: PPUSH
12918: LD_INT 1
12920: PPUSH
12921: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12925: LD_INT 43
12927: PPUSH
12928: LD_VAR 0 3
12932: PPUSH
12933: LD_INT 1
12935: PPUSH
12936: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12940: LD_INT 51
12942: PPUSH
12943: LD_VAR 0 3
12947: PPUSH
12948: LD_INT 1
12950: PPUSH
12951: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12955: LD_INT 6
12957: PPUSH
12958: LD_VAR 0 3
12962: PPUSH
12963: LD_INT 1
12965: PPUSH
12966: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12970: LD_INT 0
12972: PPUSH
12973: LD_VAR 0 3
12977: PPUSH
12978: LD_INT 1
12980: PPUSH
12981: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12985: LD_INT 2
12987: PPUSH
12988: LD_VAR 0 3
12992: PPUSH
12993: LD_INT 1
12995: PPUSH
12996: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
13000: LD_INT 3
13002: PPUSH
13003: LD_VAR 0 3
13007: PPUSH
13008: LD_INT 1
13010: PPUSH
13011: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13015: LD_INT 4
13017: PPUSH
13018: LD_VAR 0 3
13022: PPUSH
13023: LD_INT 1
13025: PPUSH
13026: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13030: LD_INT 6
13032: PPUSH
13033: LD_VAR 0 3
13037: PPUSH
13038: LD_INT 1
13040: PPUSH
13041: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13045: LD_INT 7
13047: PPUSH
13048: LD_VAR 0 3
13052: PPUSH
13053: LD_INT 1
13055: PPUSH
13056: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13060: LD_INT 8
13062: PPUSH
13063: LD_VAR 0 3
13067: PPUSH
13068: LD_INT 1
13070: PPUSH
13071: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13075: LD_INT 10
13077: PPUSH
13078: LD_VAR 0 3
13082: PPUSH
13083: LD_INT 1
13085: PPUSH
13086: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13090: LD_INT 15
13092: PPUSH
13093: LD_VAR 0 3
13097: PPUSH
13098: LD_INT 1
13100: PPUSH
13101: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13105: LD_INT 16
13107: PPUSH
13108: LD_VAR 0 3
13112: PPUSH
13113: LD_INT 1
13115: PPUSH
13116: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13120: LD_INT 17
13122: PPUSH
13123: LD_VAR 0 3
13127: PPUSH
13128: LD_INT 1
13130: PPUSH
13131: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13135: LD_INT 20
13137: PPUSH
13138: LD_VAR 0 3
13142: PPUSH
13143: LD_INT 1
13145: PPUSH
13146: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13150: LD_INT 26
13152: PPUSH
13153: LD_VAR 0 3
13157: PPUSH
13158: LD_INT 1
13160: PPUSH
13161: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13165: LD_INT 27
13167: PPUSH
13168: LD_VAR 0 3
13172: PPUSH
13173: LD_INT 1
13175: PPUSH
13176: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13180: LD_INT 29
13182: PPUSH
13183: LD_VAR 0 3
13187: PPUSH
13188: LD_INT 1
13190: PPUSH
13191: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13195: LD_INT 31
13197: PPUSH
13198: LD_VAR 0 3
13202: PPUSH
13203: LD_INT 1
13205: PPUSH
13206: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13210: LD_INT 32
13212: PPUSH
13213: LD_VAR 0 3
13217: PPUSH
13218: LD_INT 1
13220: PPUSH
13221: CALL_OW 324
// end ; 4 :
13225: GO 16312
13227: LD_INT 4
13229: DOUBLE
13230: EQUAL
13231: IFTRUE 13235
13233: GO 14183
13235: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13236: LD_INT 35
13238: PPUSH
13239: LD_VAR 0 3
13243: PPUSH
13244: LD_INT 1
13246: PPUSH
13247: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13251: LD_INT 45
13253: PPUSH
13254: LD_VAR 0 3
13258: PPUSH
13259: LD_INT 1
13261: PPUSH
13262: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13266: LD_INT 46
13268: PPUSH
13269: LD_VAR 0 3
13273: PPUSH
13274: LD_INT 1
13276: PPUSH
13277: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13281: LD_INT 47
13283: PPUSH
13284: LD_VAR 0 3
13288: PPUSH
13289: LD_INT 1
13291: PPUSH
13292: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13296: LD_INT 1
13298: PPUSH
13299: LD_VAR 0 3
13303: PPUSH
13304: LD_INT 1
13306: PPUSH
13307: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13311: LD_INT 2
13313: PPUSH
13314: LD_VAR 0 3
13318: PPUSH
13319: LD_INT 1
13321: PPUSH
13322: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13326: LD_INT 11
13328: PPUSH
13329: LD_VAR 0 3
13333: PPUSH
13334: LD_INT 1
13336: PPUSH
13337: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13341: LD_INT 20
13343: PPUSH
13344: LD_VAR 0 3
13348: PPUSH
13349: LD_INT 1
13351: PPUSH
13352: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13356: LD_INT 48
13358: PPUSH
13359: LD_VAR 0 3
13363: PPUSH
13364: LD_INT 1
13366: PPUSH
13367: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13371: LD_INT 49
13373: PPUSH
13374: LD_VAR 0 3
13378: PPUSH
13379: LD_INT 1
13381: PPUSH
13382: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13386: LD_INT 69
13388: PPUSH
13389: LD_VAR 0 3
13393: PPUSH
13394: LD_INT 1
13396: PPUSH
13397: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13401: LD_INT 39
13403: PPUSH
13404: LD_VAR 0 3
13408: PPUSH
13409: LD_INT 1
13411: PPUSH
13412: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13416: LD_INT 34
13418: PPUSH
13419: LD_VAR 0 3
13423: PPUSH
13424: LD_INT 1
13426: PPUSH
13427: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13431: LD_INT 42
13433: PPUSH
13434: LD_VAR 0 3
13438: PPUSH
13439: LD_INT 1
13441: PPUSH
13442: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13446: LD_INT 44
13448: PPUSH
13449: LD_VAR 0 3
13453: PPUSH
13454: LD_INT 1
13456: PPUSH
13457: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13461: LD_INT 41
13463: PPUSH
13464: LD_VAR 0 3
13468: PPUSH
13469: LD_INT 1
13471: PPUSH
13472: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13476: LD_INT 43
13478: PPUSH
13479: LD_VAR 0 3
13483: PPUSH
13484: LD_INT 1
13486: PPUSH
13487: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13491: LD_INT 70
13493: PPUSH
13494: LD_VAR 0 3
13498: PPUSH
13499: LD_INT 1
13501: PPUSH
13502: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13506: LD_INT 51
13508: PPUSH
13509: LD_VAR 0 3
13513: PPUSH
13514: LD_INT 1
13516: PPUSH
13517: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13521: LD_INT 52
13523: PPUSH
13524: LD_VAR 0 3
13528: PPUSH
13529: LD_INT 1
13531: PPUSH
13532: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13536: LD_INT 6
13538: PPUSH
13539: LD_VAR 0 3
13543: PPUSH
13544: LD_INT 1
13546: PPUSH
13547: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13551: LD_INT 15
13553: PPUSH
13554: LD_VAR 0 3
13558: PPUSH
13559: LD_INT 1
13561: PPUSH
13562: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13566: LD_INT 7
13568: PPUSH
13569: LD_VAR 0 3
13573: PPUSH
13574: LD_INT 1
13576: PPUSH
13577: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13581: LD_INT 12
13583: PPUSH
13584: LD_VAR 0 3
13588: PPUSH
13589: LD_INT 1
13591: PPUSH
13592: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13596: LD_INT 18
13598: PPUSH
13599: LD_VAR 0 3
13603: PPUSH
13604: LD_INT 1
13606: PPUSH
13607: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13611: LD_INT 60
13613: PPUSH
13614: LD_VAR 0 3
13618: PPUSH
13619: LD_INT 1
13621: PPUSH
13622: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13626: LD_INT 9
13628: PPUSH
13629: LD_VAR 0 3
13633: PPUSH
13634: LD_INT 1
13636: PPUSH
13637: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13641: LD_INT 30
13643: PPUSH
13644: LD_VAR 0 3
13648: PPUSH
13649: LD_INT 1
13651: PPUSH
13652: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13656: LD_INT 37
13658: PPUSH
13659: LD_VAR 0 3
13663: PPUSH
13664: LD_INT 1
13666: PPUSH
13667: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13671: LD_INT 5
13673: PPUSH
13674: LD_VAR 0 3
13678: PPUSH
13679: LD_INT 1
13681: PPUSH
13682: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13686: LD_INT 66
13688: PPUSH
13689: LD_VAR 0 3
13693: PPUSH
13694: LD_INT 1
13696: PPUSH
13697: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13701: LD_INT 21
13703: PPUSH
13704: LD_VAR 0 3
13708: PPUSH
13709: LD_INT 1
13711: PPUSH
13712: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13716: LD_INT 22
13718: PPUSH
13719: LD_VAR 0 3
13723: PPUSH
13724: LD_INT 1
13726: PPUSH
13727: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13731: LD_INT 54
13733: PPUSH
13734: LD_VAR 0 3
13738: PPUSH
13739: LD_INT 1
13741: PPUSH
13742: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13746: LD_INT 0
13748: PPUSH
13749: LD_VAR 0 3
13753: PPUSH
13754: LD_INT 1
13756: PPUSH
13757: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
13761: LD_INT 1
13763: PPUSH
13764: LD_VAR 0 3
13768: PPUSH
13769: LD_INT 1
13771: PPUSH
13772: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13776: LD_INT 2
13778: PPUSH
13779: LD_VAR 0 3
13783: PPUSH
13784: LD_INT 1
13786: PPUSH
13787: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
13791: LD_INT 3
13793: PPUSH
13794: LD_VAR 0 3
13798: PPUSH
13799: LD_INT 1
13801: PPUSH
13802: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13806: LD_INT 4
13808: PPUSH
13809: LD_VAR 0 3
13813: PPUSH
13814: LD_INT 1
13816: PPUSH
13817: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
13821: LD_INT 5
13823: PPUSH
13824: LD_VAR 0 3
13828: PPUSH
13829: LD_INT 1
13831: PPUSH
13832: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13836: LD_INT 6
13838: PPUSH
13839: LD_VAR 0 3
13843: PPUSH
13844: LD_INT 1
13846: PPUSH
13847: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13851: LD_INT 7
13853: PPUSH
13854: LD_VAR 0 3
13858: PPUSH
13859: LD_INT 1
13861: PPUSH
13862: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13866: LD_INT 8
13868: PPUSH
13869: LD_VAR 0 3
13873: PPUSH
13874: LD_INT 1
13876: PPUSH
13877: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13881: LD_INT 10
13883: PPUSH
13884: LD_VAR 0 3
13888: PPUSH
13889: LD_INT 1
13891: PPUSH
13892: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
13896: LD_INT 11
13898: PPUSH
13899: LD_VAR 0 3
13903: PPUSH
13904: LD_INT 1
13906: PPUSH
13907: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
13911: LD_INT 12
13913: PPUSH
13914: LD_VAR 0 3
13918: PPUSH
13919: LD_INT 1
13921: PPUSH
13922: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
13926: LD_INT 13
13928: PPUSH
13929: LD_VAR 0 3
13933: PPUSH
13934: LD_INT 1
13936: PPUSH
13937: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
13941: LD_INT 14
13943: PPUSH
13944: LD_VAR 0 3
13948: PPUSH
13949: LD_INT 1
13951: PPUSH
13952: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13956: LD_INT 15
13958: PPUSH
13959: LD_VAR 0 3
13963: PPUSH
13964: LD_INT 1
13966: PPUSH
13967: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13971: LD_INT 16
13973: PPUSH
13974: LD_VAR 0 3
13978: PPUSH
13979: LD_INT 1
13981: PPUSH
13982: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13986: LD_INT 17
13988: PPUSH
13989: LD_VAR 0 3
13993: PPUSH
13994: LD_INT 1
13996: PPUSH
13997: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
14001: LD_INT 19
14003: PPUSH
14004: LD_VAR 0 3
14008: PPUSH
14009: LD_INT 1
14011: PPUSH
14012: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
14016: LD_INT 20
14018: PPUSH
14019: LD_VAR 0 3
14023: PPUSH
14024: LD_INT 1
14026: PPUSH
14027: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
14031: LD_INT 21
14033: PPUSH
14034: LD_VAR 0 3
14038: PPUSH
14039: LD_INT 1
14041: PPUSH
14042: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
14046: LD_INT 23
14048: PPUSH
14049: LD_VAR 0 3
14053: PPUSH
14054: LD_INT 1
14056: PPUSH
14057: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
14061: LD_INT 26
14063: PPUSH
14064: LD_VAR 0 3
14068: PPUSH
14069: LD_INT 1
14071: PPUSH
14072: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
14076: LD_INT 27
14078: PPUSH
14079: LD_VAR 0 3
14083: PPUSH
14084: LD_INT 1
14086: PPUSH
14087: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
14091: LD_INT 28
14093: PPUSH
14094: LD_VAR 0 3
14098: PPUSH
14099: LD_INT 1
14101: PPUSH
14102: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14106: LD_INT 29
14108: PPUSH
14109: LD_VAR 0 3
14113: PPUSH
14114: LD_INT 1
14116: PPUSH
14117: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
14121: LD_INT 30
14123: PPUSH
14124: LD_VAR 0 3
14128: PPUSH
14129: LD_INT 1
14131: PPUSH
14132: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14136: LD_INT 31
14138: PPUSH
14139: LD_VAR 0 3
14143: PPUSH
14144: LD_INT 1
14146: PPUSH
14147: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
14151: LD_INT 32
14153: PPUSH
14154: LD_VAR 0 3
14158: PPUSH
14159: LD_INT 1
14161: PPUSH
14162: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
14166: LD_INT 36
14168: PPUSH
14169: LD_VAR 0 3
14173: PPUSH
14174: LD_INT 1
14176: PPUSH
14177: CALL_OW 324
// end ; 5 :
14181: GO 16312
14183: LD_INT 5
14185: DOUBLE
14186: EQUAL
14187: IFTRUE 14191
14189: GO 15304
14191: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14192: LD_INT 35
14194: PPUSH
14195: LD_VAR 0 3
14199: PPUSH
14200: LD_INT 1
14202: PPUSH
14203: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14207: LD_INT 45
14209: PPUSH
14210: LD_VAR 0 3
14214: PPUSH
14215: LD_INT 1
14217: PPUSH
14218: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14222: LD_INT 46
14224: PPUSH
14225: LD_VAR 0 3
14229: PPUSH
14230: LD_INT 1
14232: PPUSH
14233: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14237: LD_INT 47
14239: PPUSH
14240: LD_VAR 0 3
14244: PPUSH
14245: LD_INT 1
14247: PPUSH
14248: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14252: LD_INT 1
14254: PPUSH
14255: LD_VAR 0 3
14259: PPUSH
14260: LD_INT 1
14262: PPUSH
14263: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14267: LD_INT 2
14269: PPUSH
14270: LD_VAR 0 3
14274: PPUSH
14275: LD_INT 1
14277: PPUSH
14278: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14282: LD_INT 11
14284: PPUSH
14285: LD_VAR 0 3
14289: PPUSH
14290: LD_INT 1
14292: PPUSH
14293: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
14297: LD_INT 20
14299: PPUSH
14300: LD_VAR 0 3
14304: PPUSH
14305: LD_INT 1
14307: PPUSH
14308: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14312: LD_INT 48
14314: PPUSH
14315: LD_VAR 0 3
14319: PPUSH
14320: LD_INT 1
14322: PPUSH
14323: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
14327: LD_INT 49
14329: PPUSH
14330: LD_VAR 0 3
14334: PPUSH
14335: LD_INT 1
14337: PPUSH
14338: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14342: LD_INT 69
14344: PPUSH
14345: LD_VAR 0 3
14349: PPUSH
14350: LD_INT 1
14352: PPUSH
14353: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14357: LD_INT 39
14359: PPUSH
14360: LD_VAR 0 3
14364: PPUSH
14365: LD_INT 1
14367: PPUSH
14368: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
14372: LD_INT 34
14374: PPUSH
14375: LD_VAR 0 3
14379: PPUSH
14380: LD_INT 1
14382: PPUSH
14383: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
14387: LD_INT 42
14389: PPUSH
14390: LD_VAR 0 3
14394: PPUSH
14395: LD_INT 1
14397: PPUSH
14398: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
14402: LD_INT 44
14404: PPUSH
14405: LD_VAR 0 3
14409: PPUSH
14410: LD_INT 1
14412: PPUSH
14413: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
14417: LD_INT 41
14419: PPUSH
14420: LD_VAR 0 3
14424: PPUSH
14425: LD_INT 1
14427: PPUSH
14428: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
14432: LD_INT 40
14434: PPUSH
14435: LD_VAR 0 3
14439: PPUSH
14440: LD_INT 1
14442: PPUSH
14443: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14447: LD_INT 43
14449: PPUSH
14450: LD_VAR 0 3
14454: PPUSH
14455: LD_INT 1
14457: PPUSH
14458: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
14462: LD_INT 70
14464: PPUSH
14465: LD_VAR 0 3
14469: PPUSH
14470: LD_INT 1
14472: PPUSH
14473: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14477: LD_INT 51
14479: PPUSH
14480: LD_VAR 0 3
14484: PPUSH
14485: LD_INT 1
14487: PPUSH
14488: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
14492: LD_INT 52
14494: PPUSH
14495: LD_VAR 0 3
14499: PPUSH
14500: LD_INT 1
14502: PPUSH
14503: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14507: LD_INT 6
14509: PPUSH
14510: LD_VAR 0 3
14514: PPUSH
14515: LD_INT 1
14517: PPUSH
14518: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
14522: LD_INT 15
14524: PPUSH
14525: LD_VAR 0 3
14529: PPUSH
14530: LD_INT 1
14532: PPUSH
14533: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
14537: LD_INT 7
14539: PPUSH
14540: LD_VAR 0 3
14544: PPUSH
14545: LD_INT 1
14547: PPUSH
14548: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
14552: LD_INT 12
14554: PPUSH
14555: LD_VAR 0 3
14559: PPUSH
14560: LD_INT 1
14562: PPUSH
14563: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
14567: LD_INT 17
14569: PPUSH
14570: LD_VAR 0 3
14574: PPUSH
14575: LD_INT 1
14577: PPUSH
14578: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
14582: LD_INT 18
14584: PPUSH
14585: LD_VAR 0 3
14589: PPUSH
14590: LD_INT 1
14592: PPUSH
14593: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
14597: LD_INT 60
14599: PPUSH
14600: LD_VAR 0 3
14604: PPUSH
14605: LD_INT 1
14607: PPUSH
14608: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
14612: LD_INT 32
14614: PPUSH
14615: LD_VAR 0 3
14619: PPUSH
14620: LD_INT 1
14622: PPUSH
14623: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
14627: LD_INT 9
14629: PPUSH
14630: LD_VAR 0 3
14634: PPUSH
14635: LD_INT 1
14637: PPUSH
14638: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
14642: LD_INT 57
14644: PPUSH
14645: LD_VAR 0 3
14649: PPUSH
14650: LD_INT 1
14652: PPUSH
14653: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
14657: LD_INT 30
14659: PPUSH
14660: LD_VAR 0 3
14664: PPUSH
14665: LD_INT 1
14667: PPUSH
14668: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
14672: LD_INT 37
14674: PPUSH
14675: LD_VAR 0 3
14679: PPUSH
14680: LD_INT 1
14682: PPUSH
14683: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
14687: LD_INT 63
14689: PPUSH
14690: LD_VAR 0 3
14694: PPUSH
14695: LD_INT 1
14697: PPUSH
14698: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
14702: LD_INT 3
14704: PPUSH
14705: LD_VAR 0 3
14709: PPUSH
14710: LD_INT 1
14712: PPUSH
14713: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
14717: LD_INT 4
14719: PPUSH
14720: LD_VAR 0 3
14724: PPUSH
14725: LD_INT 1
14727: PPUSH
14728: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14732: LD_INT 5
14734: PPUSH
14735: LD_VAR 0 3
14739: PPUSH
14740: LD_INT 1
14742: PPUSH
14743: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14747: LD_INT 66
14749: PPUSH
14750: LD_VAR 0 3
14754: PPUSH
14755: LD_INT 1
14757: PPUSH
14758: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14762: LD_INT 21
14764: PPUSH
14765: LD_VAR 0 3
14769: PPUSH
14770: LD_INT 1
14772: PPUSH
14773: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14777: LD_INT 22
14779: PPUSH
14780: LD_VAR 0 3
14784: PPUSH
14785: LD_INT 1
14787: PPUSH
14788: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
14792: LD_INT 19
14794: PPUSH
14795: LD_VAR 0 3
14799: PPUSH
14800: LD_INT 1
14802: PPUSH
14803: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
14807: LD_INT 54
14809: PPUSH
14810: LD_VAR 0 3
14814: PPUSH
14815: LD_INT 1
14817: PPUSH
14818: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
14822: LD_INT 55
14824: PPUSH
14825: LD_VAR 0 3
14829: PPUSH
14830: LD_INT 1
14832: PPUSH
14833: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14837: LD_INT 0
14839: PPUSH
14840: LD_VAR 0 3
14844: PPUSH
14845: LD_INT 1
14847: PPUSH
14848: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
14852: LD_INT 1
14854: PPUSH
14855: LD_VAR 0 3
14859: PPUSH
14860: LD_INT 1
14862: PPUSH
14863: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14867: LD_INT 2
14869: PPUSH
14870: LD_VAR 0 3
14874: PPUSH
14875: LD_INT 1
14877: PPUSH
14878: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
14882: LD_INT 3
14884: PPUSH
14885: LD_VAR 0 3
14889: PPUSH
14890: LD_INT 1
14892: PPUSH
14893: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14897: LD_INT 4
14899: PPUSH
14900: LD_VAR 0 3
14904: PPUSH
14905: LD_INT 1
14907: PPUSH
14908: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
14912: LD_INT 5
14914: PPUSH
14915: LD_VAR 0 3
14919: PPUSH
14920: LD_INT 1
14922: PPUSH
14923: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14927: LD_INT 6
14929: PPUSH
14930: LD_VAR 0 3
14934: PPUSH
14935: LD_INT 1
14937: PPUSH
14938: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
14942: LD_INT 7
14944: PPUSH
14945: LD_VAR 0 3
14949: PPUSH
14950: LD_INT 1
14952: PPUSH
14953: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
14957: LD_INT 8
14959: PPUSH
14960: LD_VAR 0 3
14964: PPUSH
14965: LD_INT 1
14967: PPUSH
14968: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
14972: LD_INT 10
14974: PPUSH
14975: LD_VAR 0 3
14979: PPUSH
14980: LD_INT 1
14982: PPUSH
14983: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
14987: LD_INT 11
14989: PPUSH
14990: LD_VAR 0 3
14994: PPUSH
14995: LD_INT 1
14997: PPUSH
14998: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
15002: LD_INT 12
15004: PPUSH
15005: LD_VAR 0 3
15009: PPUSH
15010: LD_INT 1
15012: PPUSH
15013: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
15017: LD_INT 13
15019: PPUSH
15020: LD_VAR 0 3
15024: PPUSH
15025: LD_INT 1
15027: PPUSH
15028: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
15032: LD_INT 14
15034: PPUSH
15035: LD_VAR 0 3
15039: PPUSH
15040: LD_INT 1
15042: PPUSH
15043: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
15047: LD_INT 15
15049: PPUSH
15050: LD_VAR 0 3
15054: PPUSH
15055: LD_INT 1
15057: PPUSH
15058: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
15062: LD_INT 16
15064: PPUSH
15065: LD_VAR 0 3
15069: PPUSH
15070: LD_INT 1
15072: PPUSH
15073: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
15077: LD_INT 17
15079: PPUSH
15080: LD_VAR 0 3
15084: PPUSH
15085: LD_INT 1
15087: PPUSH
15088: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
15092: LD_INT 18
15094: PPUSH
15095: LD_VAR 0 3
15099: PPUSH
15100: LD_INT 1
15102: PPUSH
15103: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
15107: LD_INT 19
15109: PPUSH
15110: LD_VAR 0 3
15114: PPUSH
15115: LD_INT 1
15117: PPUSH
15118: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
15122: LD_INT 20
15124: PPUSH
15125: LD_VAR 0 3
15129: PPUSH
15130: LD_INT 1
15132: PPUSH
15133: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
15137: LD_INT 21
15139: PPUSH
15140: LD_VAR 0 3
15144: PPUSH
15145: LD_INT 1
15147: PPUSH
15148: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
15152: LD_INT 23
15154: PPUSH
15155: LD_VAR 0 3
15159: PPUSH
15160: LD_INT 1
15162: PPUSH
15163: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
15167: LD_INT 26
15169: PPUSH
15170: LD_VAR 0 3
15174: PPUSH
15175: LD_INT 1
15177: PPUSH
15178: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15182: LD_INT 27
15184: PPUSH
15185: LD_VAR 0 3
15189: PPUSH
15190: LD_INT 1
15192: PPUSH
15193: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
15197: LD_INT 28
15199: PPUSH
15200: LD_VAR 0 3
15204: PPUSH
15205: LD_INT 1
15207: PPUSH
15208: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15212: LD_INT 29
15214: PPUSH
15215: LD_VAR 0 3
15219: PPUSH
15220: LD_INT 1
15222: PPUSH
15223: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
15227: LD_INT 30
15229: PPUSH
15230: LD_VAR 0 3
15234: PPUSH
15235: LD_INT 1
15237: PPUSH
15238: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15242: LD_INT 31
15244: PPUSH
15245: LD_VAR 0 3
15249: PPUSH
15250: LD_INT 1
15252: PPUSH
15253: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15257: LD_INT 32
15259: PPUSH
15260: LD_VAR 0 3
15264: PPUSH
15265: LD_INT 1
15267: PPUSH
15268: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
15272: LD_INT 33
15274: PPUSH
15275: LD_VAR 0 3
15279: PPUSH
15280: LD_INT 1
15282: PPUSH
15283: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
15287: LD_INT 36
15289: PPUSH
15290: LD_VAR 0 3
15294: PPUSH
15295: LD_INT 1
15297: PPUSH
15298: CALL_OW 324
// end ; 6 :
15302: GO 16312
15304: LD_INT 6
15306: DOUBLE
15307: EQUAL
15308: IFTRUE 15312
15310: GO 16237
15312: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15313: LD_INT 35
15315: PPUSH
15316: LD_VAR 0 3
15320: PPUSH
15321: LD_INT 1
15323: PPUSH
15324: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15328: LD_INT 45
15330: PPUSH
15331: LD_VAR 0 3
15335: PPUSH
15336: LD_INT 1
15338: PPUSH
15339: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15343: LD_INT 46
15345: PPUSH
15346: LD_VAR 0 3
15350: PPUSH
15351: LD_INT 1
15353: PPUSH
15354: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15358: LD_INT 47
15360: PPUSH
15361: LD_VAR 0 3
15365: PPUSH
15366: LD_INT 1
15368: PPUSH
15369: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15373: LD_INT 1
15375: PPUSH
15376: LD_VAR 0 3
15380: PPUSH
15381: LD_INT 1
15383: PPUSH
15384: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15388: LD_INT 2
15390: PPUSH
15391: LD_VAR 0 3
15395: PPUSH
15396: LD_INT 1
15398: PPUSH
15399: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15403: LD_INT 11
15405: PPUSH
15406: LD_VAR 0 3
15410: PPUSH
15411: LD_INT 1
15413: PPUSH
15414: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15418: LD_INT 20
15420: PPUSH
15421: LD_VAR 0 3
15425: PPUSH
15426: LD_INT 1
15428: PPUSH
15429: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15433: LD_INT 48
15435: PPUSH
15436: LD_VAR 0 3
15440: PPUSH
15441: LD_INT 1
15443: PPUSH
15444: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15448: LD_INT 49
15450: PPUSH
15451: LD_VAR 0 3
15455: PPUSH
15456: LD_INT 1
15458: PPUSH
15459: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
15463: LD_INT 50
15465: PPUSH
15466: LD_VAR 0 3
15470: PPUSH
15471: LD_INT 1
15473: PPUSH
15474: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15478: LD_INT 69
15480: PPUSH
15481: LD_VAR 0 3
15485: PPUSH
15486: LD_INT 1
15488: PPUSH
15489: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15493: LD_INT 39
15495: PPUSH
15496: LD_VAR 0 3
15500: PPUSH
15501: LD_INT 1
15503: PPUSH
15504: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15508: LD_INT 34
15510: PPUSH
15511: LD_VAR 0 3
15515: PPUSH
15516: LD_INT 1
15518: PPUSH
15519: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15523: LD_INT 42
15525: PPUSH
15526: LD_VAR 0 3
15530: PPUSH
15531: LD_INT 1
15533: PPUSH
15534: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15538: LD_INT 44
15540: PPUSH
15541: LD_VAR 0 3
15545: PPUSH
15546: LD_INT 1
15548: PPUSH
15549: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15553: LD_INT 41
15555: PPUSH
15556: LD_VAR 0 3
15560: PPUSH
15561: LD_INT 1
15563: PPUSH
15564: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
15568: LD_INT 13
15570: PPUSH
15571: LD_VAR 0 3
15575: PPUSH
15576: LD_INT 1
15578: PPUSH
15579: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
15583: LD_INT 40
15585: PPUSH
15586: LD_VAR 0 3
15590: PPUSH
15591: LD_INT 1
15593: PPUSH
15594: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15598: LD_INT 43
15600: PPUSH
15601: LD_VAR 0 3
15605: PPUSH
15606: LD_INT 1
15608: PPUSH
15609: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15613: LD_INT 70
15615: PPUSH
15616: LD_VAR 0 3
15620: PPUSH
15621: LD_INT 1
15623: PPUSH
15624: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
15628: LD_INT 23
15630: PPUSH
15631: LD_VAR 0 3
15635: PPUSH
15636: LD_INT 1
15638: PPUSH
15639: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15643: LD_INT 51
15645: PPUSH
15646: LD_VAR 0 3
15650: PPUSH
15651: LD_INT 1
15653: PPUSH
15654: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15658: LD_INT 52
15660: PPUSH
15661: LD_VAR 0 3
15665: PPUSH
15666: LD_INT 1
15668: PPUSH
15669: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15673: LD_INT 6
15675: PPUSH
15676: LD_VAR 0 3
15680: PPUSH
15681: LD_INT 1
15683: PPUSH
15684: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
15688: LD_INT 15
15690: PPUSH
15691: LD_VAR 0 3
15695: PPUSH
15696: LD_INT 1
15698: PPUSH
15699: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
15703: LD_INT 7
15705: PPUSH
15706: LD_VAR 0 3
15710: PPUSH
15711: LD_INT 1
15713: PPUSH
15714: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
15718: LD_INT 12
15720: PPUSH
15721: LD_VAR 0 3
15725: PPUSH
15726: LD_INT 1
15728: PPUSH
15729: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
15733: LD_INT 10
15735: PPUSH
15736: LD_VAR 0 3
15740: PPUSH
15741: LD_INT 1
15743: PPUSH
15744: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
15748: LD_INT 17
15750: PPUSH
15751: LD_VAR 0 3
15755: PPUSH
15756: LD_INT 1
15758: PPUSH
15759: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
15763: LD_INT 18
15765: PPUSH
15766: LD_VAR 0 3
15770: PPUSH
15771: LD_INT 1
15773: PPUSH
15774: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
15778: LD_INT 60
15780: PPUSH
15781: LD_VAR 0 3
15785: PPUSH
15786: LD_INT 1
15788: PPUSH
15789: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
15793: LD_INT 61
15795: PPUSH
15796: LD_VAR 0 3
15800: PPUSH
15801: LD_INT 1
15803: PPUSH
15804: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
15808: LD_INT 32
15810: PPUSH
15811: LD_VAR 0 3
15815: PPUSH
15816: LD_INT 1
15818: PPUSH
15819: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
15823: LD_INT 27
15825: PPUSH
15826: LD_VAR 0 3
15830: PPUSH
15831: LD_INT 1
15833: PPUSH
15834: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
15838: LD_INT 36
15840: PPUSH
15841: LD_VAR 0 3
15845: PPUSH
15846: LD_INT 1
15848: PPUSH
15849: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
15853: LD_INT 33
15855: PPUSH
15856: LD_VAR 0 3
15860: PPUSH
15861: LD_INT 1
15863: PPUSH
15864: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
15868: LD_INT 9
15870: PPUSH
15871: LD_VAR 0 3
15875: PPUSH
15876: LD_INT 1
15878: PPUSH
15879: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
15883: LD_INT 38
15885: PPUSH
15886: LD_VAR 0 3
15890: PPUSH
15891: LD_INT 1
15893: PPUSH
15894: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
15898: LD_INT 57
15900: PPUSH
15901: LD_VAR 0 3
15905: PPUSH
15906: LD_INT 1
15908: PPUSH
15909: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
15913: LD_INT 58
15915: PPUSH
15916: LD_VAR 0 3
15920: PPUSH
15921: LD_INT 1
15923: PPUSH
15924: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
15928: LD_INT 28
15930: PPUSH
15931: LD_VAR 0 3
15935: PPUSH
15936: LD_INT 1
15938: PPUSH
15939: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
15943: LD_INT 29
15945: PPUSH
15946: LD_VAR 0 3
15950: PPUSH
15951: LD_INT 1
15953: PPUSH
15954: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
15958: LD_INT 30
15960: PPUSH
15961: LD_VAR 0 3
15965: PPUSH
15966: LD_INT 1
15968: PPUSH
15969: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
15973: LD_INT 37
15975: PPUSH
15976: LD_VAR 0 3
15980: PPUSH
15981: LD_INT 1
15983: PPUSH
15984: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
15988: LD_INT 63
15990: PPUSH
15991: LD_VAR 0 3
15995: PPUSH
15996: LD_INT 1
15998: PPUSH
15999: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
16003: LD_INT 64
16005: PPUSH
16006: LD_VAR 0 3
16010: PPUSH
16011: LD_INT 1
16013: PPUSH
16014: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
16018: LD_INT 3
16020: PPUSH
16021: LD_VAR 0 3
16025: PPUSH
16026: LD_INT 1
16028: PPUSH
16029: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
16033: LD_INT 4
16035: PPUSH
16036: LD_VAR 0 3
16040: PPUSH
16041: LD_INT 1
16043: PPUSH
16044: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
16048: LD_INT 5
16050: PPUSH
16051: LD_VAR 0 3
16055: PPUSH
16056: LD_INT 1
16058: PPUSH
16059: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
16063: LD_INT 8
16065: PPUSH
16066: LD_VAR 0 3
16070: PPUSH
16071: LD_INT 1
16073: PPUSH
16074: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
16078: LD_INT 66
16080: PPUSH
16081: LD_VAR 0 3
16085: PPUSH
16086: LD_INT 1
16088: PPUSH
16089: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
16093: LD_INT 67
16095: PPUSH
16096: LD_VAR 0 3
16100: PPUSH
16101: LD_INT 1
16103: PPUSH
16104: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
16108: LD_INT 21
16110: PPUSH
16111: LD_VAR 0 3
16115: PPUSH
16116: LD_INT 1
16118: PPUSH
16119: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
16123: LD_INT 22
16125: PPUSH
16126: LD_VAR 0 3
16130: PPUSH
16131: LD_INT 1
16133: PPUSH
16134: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
16138: LD_INT 19
16140: PPUSH
16141: LD_VAR 0 3
16145: PPUSH
16146: LD_INT 1
16148: PPUSH
16149: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
16153: LD_INT 26
16155: PPUSH
16156: LD_VAR 0 3
16160: PPUSH
16161: LD_INT 1
16163: PPUSH
16164: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
16168: LD_INT 54
16170: PPUSH
16171: LD_VAR 0 3
16175: PPUSH
16176: LD_INT 1
16178: PPUSH
16179: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
16183: LD_INT 55
16185: PPUSH
16186: LD_VAR 0 3
16190: PPUSH
16191: LD_INT 1
16193: PPUSH
16194: CALL_OW 322
// for i = 0 to 39 do
16198: LD_ADDR_VAR 0 4
16202: PUSH
16203: DOUBLE
16204: LD_INT 0
16206: DEC
16207: ST_TO_ADDR
16208: LD_INT 39
16210: PUSH
16211: FOR_TO
16212: IFFALSE 16233
// SetRestrict ( i , side , true ) ;
16214: LD_VAR 0 4
16218: PPUSH
16219: LD_VAR 0 3
16223: PPUSH
16224: LD_INT 1
16226: PPUSH
16227: CALL_OW 324
16231: GO 16211
16233: POP
16234: POP
// end ; else
16235: GO 16312
16237: POP
// begin for i = 1 to 73 do
16238: LD_ADDR_VAR 0 4
16242: PUSH
16243: DOUBLE
16244: LD_INT 1
16246: DEC
16247: ST_TO_ADDR
16248: LD_INT 73
16250: PUSH
16251: FOR_TO
16252: IFFALSE 16273
// SetTech ( i , side , state_enabled ) ;
16254: LD_VAR 0 4
16258: PPUSH
16259: LD_VAR 0 3
16263: PPUSH
16264: LD_INT 1
16266: PPUSH
16267: CALL_OW 322
16271: GO 16251
16273: POP
16274: POP
// for i = 0 to 39 do
16275: LD_ADDR_VAR 0 4
16279: PUSH
16280: DOUBLE
16281: LD_INT 0
16283: DEC
16284: ST_TO_ADDR
16285: LD_INT 39
16287: PUSH
16288: FOR_TO
16289: IFFALSE 16310
// SetRestrict ( i , side , true ) ;
16291: LD_VAR 0 4
16295: PPUSH
16296: LD_VAR 0 3
16300: PPUSH
16301: LD_INT 1
16303: PPUSH
16304: CALL_OW 324
16308: GO 16288
16310: POP
16311: POP
// end ; end ; end ;
16312: GO 12317
16314: POP
16315: POP
// end ; end_of_file
16316: LD_VAR 0 2
16320: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
16321: LD_INT 0
16323: PPUSH
16324: PPUSH
// enable ( 98 ) ;
16325: LD_INT 98
16327: ENABLE_MARKED
// GameEnded = false ;
16328: LD_ADDR_LOC 29
16332: PUSH
16333: LD_INT 0
16335: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
16336: LD_ADDR_LOC 28
16340: PUSH
16341: LD_INT 0
16343: PUSH
16344: LD_INT 0
16346: PUSH
16347: LD_INT 0
16349: PUSH
16350: LD_INT 0
16352: PUSH
16353: LD_INT 0
16355: PUSH
16356: LD_INT 0
16358: PUSH
16359: LD_INT 0
16361: PUSH
16362: LD_INT 0
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: ST_TO_ADDR
// unfoged = false ;
16375: LD_ADDR_LOC 30
16379: PUSH
16380: LD_INT 0
16382: ST_TO_ADDR
// defeated_specs := [ ] ;
16383: LD_ADDR_LOC 31
16387: PUSH
16388: EMPTY
16389: ST_TO_ADDR
// for i = 1 to side_positions do
16390: LD_ADDR_VAR 0 2
16394: PUSH
16395: DOUBLE
16396: LD_INT 1
16398: DEC
16399: ST_TO_ADDR
16400: LD_EXP 19
16404: PUSH
16405: FOR_TO
16406: IFFALSE 16446
// if not side_positions [ i ] then
16408: LD_EXP 19
16412: PUSH
16413: LD_VAR 0 2
16417: ARRAY
16418: NOT
16419: IFFALSE 16444
// defeated = replace ( defeated , i , true ) ;
16421: LD_ADDR_LOC 28
16425: PUSH
16426: LD_LOC 28
16430: PPUSH
16431: LD_VAR 0 2
16435: PPUSH
16436: LD_INT 1
16438: PPUSH
16439: CALL_OW 1
16443: ST_TO_ADDR
16444: GO 16405
16446: POP
16447: POP
// end ;
16448: LD_VAR 0 1
16452: RET
// function CanWinLoose ; begin
16453: LD_INT 0
16455: PPUSH
// Result := true ;
16456: LD_ADDR_VAR 0 1
16460: PUSH
16461: LD_INT 1
16463: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
16464: CALL_OW 518
16468: PUSH
16469: CALL_OW 519
16473: PUSH
16474: LD_INT 0
16476: GREATER
16477: AND
16478: IFFALSE 16488
// Result := false ;
16480: LD_ADDR_VAR 0 1
16484: PUSH
16485: LD_INT 0
16487: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
16488: CALL_OW 531
16492: PUSH
16493: CALL_OW 519
16497: PUSH
16498: LD_INT 1
16500: GREATER
16501: AND
16502: IFFALSE 16512
// Result := false ;
16504: LD_ADDR_VAR 0 1
16508: PUSH
16509: LD_INT 0
16511: ST_TO_ADDR
// end ;
16512: LD_VAR 0 1
16516: RET
// export function HasPower ( i ) ; var k , h ; begin
16517: LD_INT 0
16519: PPUSH
16520: PPUSH
16521: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
16522: LD_VAR 0 1
16526: PPUSH
16527: CALL_OW 108
16531: NOT
16532: PUSH
16533: LD_EXP 18
16537: PUSH
16538: LD_VAR 0 1
16542: ARRAY
16543: NOT
16544: AND
16545: PUSH
16546: LD_OWVAR 4
16550: AND
16551: IFFALSE 16563
// begin result = false ;
16553: LD_ADDR_VAR 0 2
16557: PUSH
16558: LD_INT 0
16560: ST_TO_ADDR
// end else
16561: GO 16858
// case def_win_rules of 0 :
16563: LD_EXP 15
16567: PUSH
16568: LD_INT 0
16570: DOUBLE
16571: EQUAL
16572: IFTRUE 16576
16574: GO 16739
16576: POP
// if def_people_respawning then
16577: LD_EXP 49
16581: IFFALSE 16672
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
16583: LD_ADDR_VAR 0 2
16587: PUSH
16588: LD_INT 22
16590: PUSH
16591: LD_VAR 0 1
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: PUSH
16600: LD_INT 2
16602: PUSH
16603: LD_INT 21
16605: PUSH
16606: LD_INT 1
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PUSH
16613: LD_INT 33
16615: PUSH
16616: LD_INT 3
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: PUSH
16623: LD_INT 33
16625: PUSH
16626: LD_INT 5
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: PUSH
16633: LD_INT 30
16635: PUSH
16636: LD_INT 0
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: PUSH
16643: LD_INT 30
16645: PUSH
16646: LD_INT 1
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: PPUSH
16665: CALL_OW 69
16669: ST_TO_ADDR
16670: GO 16737
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
16672: LD_ADDR_VAR 0 2
16676: PUSH
16677: LD_INT 22
16679: PUSH
16680: LD_VAR 0 1
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PUSH
16689: LD_INT 2
16691: PUSH
16692: LD_INT 21
16694: PUSH
16695: LD_INT 1
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: PUSH
16702: LD_INT 33
16704: PUSH
16705: LD_INT 3
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: PUSH
16712: LD_INT 33
16714: PUSH
16715: LD_INT 5
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: PPUSH
16732: CALL_OW 69
16736: ST_TO_ADDR
16737: GO 16858
16739: LD_INT 1
16741: DOUBLE
16742: EQUAL
16743: IFTRUE 16747
16745: GO 16786
16747: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
16748: LD_ADDR_VAR 0 2
16752: PUSH
16753: LD_INT 22
16755: PUSH
16756: LD_VAR 0 1
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: PUSH
16765: LD_INT 21
16767: PUSH
16768: LD_INT 1
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: PPUSH
16779: CALL_OW 69
16783: ST_TO_ADDR
16784: GO 16858
16786: LD_INT 2
16788: DOUBLE
16789: EQUAL
16790: IFTRUE 16794
16792: GO 16857
16794: POP
// begin h = false ;
16795: LD_ADDR_VAR 0 4
16799: PUSH
16800: LD_INT 0
16802: ST_TO_ADDR
// for k in heroes [ i ] do
16803: LD_ADDR_VAR 0 3
16807: PUSH
16808: LD_EXP 29
16812: PUSH
16813: LD_VAR 0 1
16817: ARRAY
16818: PUSH
16819: FOR_IN
16820: IFFALSE 16843
// if IsLive ( k ) then
16822: LD_VAR 0 3
16826: PPUSH
16827: CALL_OW 300
16831: IFFALSE 16841
// h = true ;
16833: LD_ADDR_VAR 0 4
16837: PUSH
16838: LD_INT 1
16840: ST_TO_ADDR
16841: GO 16819
16843: POP
16844: POP
// Result := h ;
16845: LD_ADDR_VAR 0 2
16849: PUSH
16850: LD_VAR 0 4
16854: ST_TO_ADDR
// end ; end ;
16855: GO 16858
16857: POP
// end ;
16858: LD_VAR 0 2
16862: RET
// function AlliedSides ( i , j ) ; begin
16863: LD_INT 0
16865: PPUSH
// Result := false ;
16866: LD_ADDR_VAR 0 3
16870: PUSH
16871: LD_INT 0
16873: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
16874: LD_VAR 0 1
16878: PPUSH
16879: LD_VAR 0 2
16883: PPUSH
16884: CALL_OW 81
16888: PUSH
16889: LD_INT 1
16891: EQUAL
16892: PUSH
16893: LD_VAR 0 2
16897: PPUSH
16898: LD_VAR 0 1
16902: PPUSH
16903: CALL_OW 81
16907: PUSH
16908: LD_INT 1
16910: EQUAL
16911: AND
16912: PUSH
16913: LD_VAR 0 1
16917: PPUSH
16918: CALL_OW 83
16922: AND
16923: PUSH
16924: LD_VAR 0 2
16928: PPUSH
16929: CALL_OW 83
16933: AND
16934: IFFALSE 16944
// Result := true ;
16936: LD_ADDR_VAR 0 3
16940: PUSH
16941: LD_INT 1
16943: ST_TO_ADDR
// end ;
16944: LD_VAR 0 3
16948: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
16949: CALL 16453 0 0
16953: PUSH
16954: LD_LOC 29
16958: NOT
16959: AND
16960: IFFALSE 16976
16962: GO 16964
16964: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
16965: LD_ADDR_EXP 55
16969: PUSH
16970: LD_STRING #Player-Ended
16972: PUSH
16973: EMPTY
16974: LIST
16975: ST_TO_ADDR
16976: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
16977: CALL 16453 0 0
16981: PUSH
16982: LD_LOC 29
16986: AND
16987: IFFALSE 16996
16989: GO 16991
16991: DISABLE
// YouLostInMultiplayer ;
16992: CALL_OW 107
16996: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
16997: CALL 16453 0 0
17001: NOT
17002: PUSH
17003: CALL_OW 531
17007: NOT
17008: AND
17009: IFFALSE 17025
17011: GO 17013
17013: DISABLE
// WaitServerStrings = [ #server-wait ] ;
17014: LD_ADDR_EXP 55
17018: PUSH
17019: LD_STRING #server-wait
17021: PUSH
17022: EMPTY
17023: LIST
17024: ST_TO_ADDR
17025: END
// every 100 trigger IAmSpec do
17026: CALL_OW 531
17030: IFFALSE 17046
17032: GO 17034
17034: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
17035: LD_ADDR_EXP 55
17039: PUSH
17040: LD_STRING #Player-IAmSpec
17042: PUSH
17043: EMPTY
17044: LIST
17045: ST_TO_ADDR
17046: END
// every 100 trigger GameEnded and IAmSpec do
17047: LD_LOC 29
17051: PUSH
17052: CALL_OW 531
17056: AND
17057: IFFALSE 17066
17059: GO 17061
17061: DISABLE
// YouLostInMultiplayer ;
17062: CALL_OW 107
17066: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
17067: CALL 16453 0 0
17071: PUSH
17072: LD_LOC 29
17076: NOT
17077: AND
17078: IFFALSE 17094
17080: GO 17082
17082: DISABLE
// WaitServerStrings = [ $player-win ] ;
17083: LD_ADDR_EXP 55
17087: PUSH
17088: LD_STRING $player-win
17090: PUSH
17091: EMPTY
17092: LIST
17093: ST_TO_ADDR
17094: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
17095: CALL 16453 0 0
17099: PUSH
17100: LD_LOC 29
17104: AND
17105: IFFALSE 17129
17107: GO 17109
17109: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
17110: LD_EXP 20
17114: PUSH
17115: LD_OWVAR 7
17119: ARRAY
17120: PPUSH
17121: CALL 11955 0 1
// YouWinInMultiplayer ;
17125: CALL_OW 106
// end ;
17129: END
// every 100 trigger isEditor marked 401 do
17130: LD_OWVAR 84
17134: IFFALSE 17150
17136: GO 17138
17138: DISABLE
// Debug_Strings = [ You won ] ;
17139: LD_ADDR_OWVAR 48
17143: PUSH
17144: LD_STRING You won
17146: PUSH
17147: EMPTY
17148: LIST
17149: ST_TO_ADDR
17150: END
// every 100 trigger isEditor marked 400 do
17151: LD_OWVAR 84
17155: IFFALSE 17171
17157: GO 17159
17159: DISABLE
// Debug_Strings = [ You loss ] ;
17160: LD_ADDR_OWVAR 48
17164: PUSH
17165: LD_STRING You loss
17167: PUSH
17168: EMPTY
17169: LIST
17170: ST_TO_ADDR
17171: END
// every 100 marked 98 do var i , un ;
17172: GO 17174
17174: DISABLE
17175: LD_INT 0
17177: PPUSH
17178: PPUSH
// begin for i = 1 to side_positions do
17179: LD_ADDR_VAR 0 1
17183: PUSH
17184: DOUBLE
17185: LD_INT 1
17187: DEC
17188: ST_TO_ADDR
17189: LD_EXP 19
17193: PUSH
17194: FOR_TO
17195: IFFALSE 17282
// begin if side_positions [ i ] then
17197: LD_EXP 19
17201: PUSH
17202: LD_VAR 0 1
17206: ARRAY
17207: IFFALSE 17280
// if not HasPower ( i ) and not defeated [ i ] then
17209: LD_VAR 0 1
17213: PPUSH
17214: CALL 16517 0 1
17218: NOT
17219: PUSH
17220: LD_LOC 28
17224: PUSH
17225: LD_VAR 0 1
17229: ARRAY
17230: NOT
17231: AND
17232: IFFALSE 17280
// begin defeated = replace ( defeated , i , true ) ;
17234: LD_ADDR_LOC 28
17238: PUSH
17239: LD_LOC 28
17243: PPUSH
17244: LD_VAR 0 1
17248: PPUSH
17249: LD_INT 1
17251: PPUSH
17252: CALL_OW 1
17256: ST_TO_ADDR
// if i = mp_player_side then
17257: LD_VAR 0 1
17261: PUSH
17262: LD_OWVAR 7
17266: EQUAL
17267: IFFALSE 17280
// begin Multiplayer_Loose_Message ;
17269: CALL_OW 521
// SetPlayerSpectator ( ) ;
17273: CALL_OW 572
// enable ( 400 ) ;
17277: LD_INT 400
17279: ENABLE_MARKED
// end ; end ; end ;
17280: GO 17194
17282: POP
17283: POP
// DidGameEnd ;
17284: CALL 17299 0 0
// if not GameEnded then
17288: LD_LOC 29
17292: NOT
17293: IFFALSE 17296
// enable ;
17295: ENABLE
// end ;
17296: PPOPN 2
17298: END
// function DidGameEnd ; var i , k , enemy ; begin
17299: LD_INT 0
17301: PPUSH
17302: PPUSH
17303: PPUSH
17304: PPUSH
// enemy = [ ] ;
17305: LD_ADDR_VAR 0 4
17309: PUSH
17310: EMPTY
17311: ST_TO_ADDR
// for i = 1 to side_positions do
17312: LD_ADDR_VAR 0 2
17316: PUSH
17317: DOUBLE
17318: LD_INT 1
17320: DEC
17321: ST_TO_ADDR
17322: LD_EXP 19
17326: PUSH
17327: FOR_TO
17328: IFFALSE 17422
// if not defeated [ i ] then
17330: LD_LOC 28
17334: PUSH
17335: LD_VAR 0 2
17339: ARRAY
17340: NOT
17341: IFFALSE 17420
// for k = 1 to side_positions do
17343: LD_ADDR_VAR 0 3
17347: PUSH
17348: DOUBLE
17349: LD_INT 1
17351: DEC
17352: ST_TO_ADDR
17353: LD_EXP 19
17357: PUSH
17358: FOR_TO
17359: IFFALSE 17418
// if not defeated [ k ] then
17361: LD_LOC 28
17365: PUSH
17366: LD_VAR 0 3
17370: ARRAY
17371: NOT
17372: IFFALSE 17416
// if not AlliedSides ( i , k ) then
17374: LD_VAR 0 2
17378: PPUSH
17379: LD_VAR 0 3
17383: PPUSH
17384: CALL 16863 0 2
17388: NOT
17389: IFFALSE 17416
// enemy = enemy ^ [ i , k ] ;
17391: LD_ADDR_VAR 0 4
17395: PUSH
17396: LD_VAR 0 4
17400: PUSH
17401: LD_VAR 0 2
17405: PUSH
17406: LD_VAR 0 3
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: ADD
17415: ST_TO_ADDR
17416: GO 17358
17418: POP
17419: POP
17420: GO 17327
17422: POP
17423: POP
// if not enemy then
17424: LD_VAR 0 4
17428: NOT
17429: IFFALSE 17455
// begin GameEnded = true ;
17431: LD_ADDR_LOC 29
17435: PUSH
17436: LD_INT 1
17438: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
17439: LD_LOC 28
17443: PUSH
17444: LD_OWVAR 7
17448: ARRAY
17449: NOT
17450: IFFALSE 17455
// enable ( 401 ) ;
17452: LD_INT 401
17454: ENABLE_MARKED
// end ; end ;
17455: LD_VAR 0 1
17459: RET
// function unfog ; var k , friends ; begin
17460: LD_INT 0
17462: PPUSH
17463: PPUSH
17464: PPUSH
// for k = 1 to side_positions do
17465: LD_ADDR_VAR 0 2
17469: PUSH
17470: DOUBLE
17471: LD_INT 1
17473: DEC
17474: ST_TO_ADDR
17475: LD_EXP 19
17479: PUSH
17480: FOR_TO
17481: IFFALSE 17537
// if not defeated [ k ] then
17483: LD_LOC 28
17487: PUSH
17488: LD_VAR 0 2
17492: ARRAY
17493: NOT
17494: IFFALSE 17535
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
17496: LD_OWVAR 7
17500: PPUSH
17501: LD_VAR 0 2
17505: PPUSH
17506: CALL_OW 81
17510: PUSH
17511: LD_INT 1
17513: PUSH
17514: EMPTY
17515: LIST
17516: IN
17517: IFFALSE 17535
// friends = friends ^ k ;
17519: LD_ADDR_VAR 0 3
17523: PUSH
17524: LD_VAR 0 3
17528: PUSH
17529: LD_VAR 0 2
17533: ADD
17534: ST_TO_ADDR
17535: GO 17480
17537: POP
17538: POP
// if not friends then
17539: LD_VAR 0 3
17543: NOT
17544: IFFALSE 17558
// begin SetPlayerSpectator ( ) ;
17546: CALL_OW 572
// unfoged = true ;
17550: LD_ADDR_LOC 30
17554: PUSH
17555: LD_INT 1
17557: ST_TO_ADDR
// end ; end ;
17558: LD_VAR 0 1
17562: RET
// export function MakeGameEnd ; begin
17563: LD_INT 0
17565: PPUSH
// SetPlayerSpectator ( ) ;
17566: CALL_OW 572
// unfoged = true ;
17570: LD_ADDR_LOC 30
17574: PUSH
17575: LD_INT 1
17577: ST_TO_ADDR
// wait ( 0 0$5 ) ;
17578: LD_INT 175
17580: PPUSH
17581: CALL_OW 67
// GameEnded = true ;
17585: LD_ADDR_LOC 29
17589: PUSH
17590: LD_INT 1
17592: ST_TO_ADDR
// end ;
17593: LD_VAR 0 1
17597: RET
// export function GetGameEnded ; begin
17598: LD_INT 0
17600: PPUSH
// result = GameEnded ;
17601: LD_ADDR_VAR 0 1
17605: PUSH
17606: LD_LOC 29
17610: ST_TO_ADDR
// end ; end_of_file
17611: LD_VAR 0 1
17615: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
17616: LD_INT 0
17618: PPUSH
17619: PPUSH
17620: PPUSH
17621: PPUSH
17622: PPUSH
17623: PPUSH
17624: PPUSH
17625: PPUSH
17626: PPUSH
// for i := 1 to 8 do
17627: LD_ADDR_VAR 0 2
17631: PUSH
17632: DOUBLE
17633: LD_INT 1
17635: DEC
17636: ST_TO_ADDR
17637: LD_INT 8
17639: PUSH
17640: FOR_TO
17641: IFFALSE 18025
// begin if Side_Positions [ i ] then
17643: LD_EXP 19
17647: PUSH
17648: LD_VAR 0 2
17652: ARRAY
17653: IFFALSE 18023
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
17655: LD_ADDR_VAR 0 7
17659: PUSH
17660: LD_INT 22
17662: PUSH
17663: LD_VAR 0 2
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: PUSH
17672: LD_INT 21
17674: PUSH
17675: LD_INT 1
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: PUSH
17682: EMPTY
17683: LIST
17684: LIST
17685: PPUSH
17686: CALL_OW 69
17690: PUSH
17691: LD_INT 0
17693: PLUS
17694: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17695: LD_ADDR_VAR 0 9
17699: PUSH
17700: LD_INT 22
17702: PUSH
17703: LD_VAR 0 2
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PUSH
17712: LD_INT 2
17714: PUSH
17715: LD_INT 30
17717: PUSH
17718: LD_INT 0
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: PUSH
17725: LD_INT 30
17727: PUSH
17728: LD_INT 1
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: LIST
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: PPUSH
17744: CALL_OW 69
17748: ST_TO_ADDR
// crates := 0 ;
17749: LD_ADDR_VAR 0 4
17753: PUSH
17754: LD_INT 0
17756: ST_TO_ADDR
// oil := 0 ;
17757: LD_ADDR_VAR 0 5
17761: PUSH
17762: LD_INT 0
17764: ST_TO_ADDR
// sib := 0 ;
17765: LD_ADDR_VAR 0 6
17769: PUSH
17770: LD_INT 0
17772: ST_TO_ADDR
// if bases then
17773: LD_VAR 0 9
17777: IFFALSE 17883
// begin for j in bases do
17779: LD_ADDR_VAR 0 3
17783: PUSH
17784: LD_VAR 0 9
17788: PUSH
17789: FOR_IN
17790: IFFALSE 17881
// begin base := GetBase ( j ) ;
17792: LD_ADDR_VAR 0 8
17796: PUSH
17797: LD_VAR 0 3
17801: PPUSH
17802: CALL_OW 274
17806: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
17807: LD_ADDR_VAR 0 4
17811: PUSH
17812: LD_VAR 0 4
17816: PUSH
17817: LD_VAR 0 8
17821: PPUSH
17822: LD_INT 1
17824: PPUSH
17825: CALL_OW 275
17829: PLUS
17830: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
17831: LD_ADDR_VAR 0 5
17835: PUSH
17836: LD_VAR 0 5
17840: PUSH
17841: LD_VAR 0 8
17845: PPUSH
17846: LD_INT 2
17848: PPUSH
17849: CALL_OW 275
17853: PLUS
17854: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
17855: LD_ADDR_VAR 0 6
17859: PUSH
17860: LD_VAR 0 6
17864: PUSH
17865: LD_VAR 0 8
17869: PPUSH
17870: LD_INT 3
17872: PPUSH
17873: CALL_OW 275
17877: PLUS
17878: ST_TO_ADDR
// end ;
17879: GO 17789
17881: POP
17882: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
17883: LD_STRING setSpecText(
17885: PUSH
17886: LD_VAR 0 2
17890: STR
17891: PUSH
17892: LD_STRING ,
17894: STR
17895: PUSH
17896: LD_INT 2
17898: STR
17899: PUSH
17900: LD_STRING ,
17902: STR
17903: PUSH
17904: LD_VAR 0 4
17908: STR
17909: PUSH
17910: LD_STRING )
17912: STR
17913: PPUSH
17914: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
17918: LD_STRING setSpecText(
17920: PUSH
17921: LD_VAR 0 2
17925: STR
17926: PUSH
17927: LD_STRING ,
17929: STR
17930: PUSH
17931: LD_INT 3
17933: STR
17934: PUSH
17935: LD_STRING ,
17937: STR
17938: PUSH
17939: LD_VAR 0 5
17943: STR
17944: PUSH
17945: LD_STRING )
17947: STR
17948: PPUSH
17949: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
17953: LD_STRING setSpecText(
17955: PUSH
17956: LD_VAR 0 2
17960: STR
17961: PUSH
17962: LD_STRING ,
17964: STR
17965: PUSH
17966: LD_INT 4
17968: STR
17969: PUSH
17970: LD_STRING ,
17972: STR
17973: PUSH
17974: LD_VAR 0 6
17978: STR
17979: PUSH
17980: LD_STRING )
17982: STR
17983: PPUSH
17984: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
17988: LD_STRING setSpecText(
17990: PUSH
17991: LD_VAR 0 2
17995: STR
17996: PUSH
17997: LD_STRING ,
17999: STR
18000: PUSH
18001: LD_INT 5
18003: STR
18004: PUSH
18005: LD_STRING ,
18007: STR
18008: PUSH
18009: LD_VAR 0 7
18013: STR
18014: PUSH
18015: LD_STRING )
18017: STR
18018: PPUSH
18019: CALL_OW 559
// end ; end ;
18023: GO 17640
18025: POP
18026: POP
// end ;
18027: LD_VAR 0 1
18031: RET
// every 0 0$1 do
18032: GO 18034
18034: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
18035: LD_STRING setSpecLogoNumber(
18037: PUSH
18038: LD_INT 2
18040: STR
18041: PUSH
18042: LD_STRING ,
18044: STR
18045: PUSH
18046: LD_INT 1
18048: STR
18049: PUSH
18050: LD_STRING )
18052: STR
18053: PPUSH
18054: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
18058: LD_STRING setSpecLogoNumber(
18060: PUSH
18061: LD_INT 3
18063: STR
18064: PUSH
18065: LD_STRING ,
18067: STR
18068: PUSH
18069: LD_INT 2
18071: STR
18072: PUSH
18073: LD_STRING )
18075: STR
18076: PPUSH
18077: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
18081: LD_STRING setSpecLogoNumber(
18083: PUSH
18084: LD_INT 4
18086: STR
18087: PUSH
18088: LD_STRING ,
18090: STR
18091: PUSH
18092: LD_INT 3
18094: STR
18095: PUSH
18096: LD_STRING )
18098: STR
18099: PPUSH
18100: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
18104: LD_STRING setSpecLogoNumber(
18106: PUSH
18107: LD_INT 5
18109: STR
18110: PUSH
18111: LD_STRING ,
18113: STR
18114: PUSH
18115: LD_INT 4
18117: STR
18118: PUSH
18119: LD_STRING )
18121: STR
18122: PPUSH
18123: CALL_OW 559
// end ;
18127: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
18128: LD_INT 2
18130: PUSH
18131: LD_INT 30
18133: PUSH
18134: LD_INT 0
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: PUSH
18141: LD_INT 30
18143: PUSH
18144: LD_INT 1
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: LIST
18155: PPUSH
18156: CALL_OW 69
18160: IFFALSE 18170
18162: GO 18164
18164: DISABLE
// begin enable ;
18165: ENABLE
// UpdateSpectatorBar ;
18166: CALL 17616 0 0
// end ;
18170: END
