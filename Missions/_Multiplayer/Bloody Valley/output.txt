// export def_tree_function ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , respawning_time_min , respawning_time_max , siberite_bomb_Delay , amount_of_apemen , tree_function , def_win_rules , buildUpTime_Delay ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export Position_Sides ; export depot_def , breastworks_def , start_def , battle_flags_id ; export normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 141
// begin Your_Side := mp_player_side ;
  79: LD_ADDR_OWVAR 2
  83: PUSH
  84: LD_OWVAR 7
  88: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  89: LD_ADDR_EXP 20
  93: PUSH
  94: LD_OWVAR 17
  98: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  99: LD_ADDR_EXP 17
 103: PUSH
 104: LD_OWVAR 15
 108: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 109: LD_ADDR_EXP 21
 113: PUSH
 114: LD_OWVAR 16
 118: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 119: LD_ADDR_EXP 19
 123: PUSH
 124: CALL 0 0 0
 128: ST_TO_ADDR
// Teams := mp_teams ;
 129: LD_ADDR_EXP 18
 133: PUSH
 134: LD_OWVAR 12
 138: ST_TO_ADDR
// end else
 139: GO 334
// begin Your_Side := 1 ;
 141: LD_ADDR_OWVAR 2
 145: PUSH
 146: LD_INT 1
 148: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 149: LD_ADDR_EXP 20
 153: PUSH
 154: LD_INT 1
 156: PUSH
 157: LD_INT 2
 159: PUSH
 160: LD_INT 3
 162: PUSH
 163: LD_INT 4
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 188: LD_ADDR_EXP 17
 192: PUSH
 193: LD_INT 1
 195: PUSH
 196: LD_INT 1
 198: PUSH
 199: LD_INT 2
 201: PUSH
 202: LD_INT 2
 204: PUSH
 205: LD_INT 0
 207: PUSH
 208: LD_INT 0
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 0 , 0 , 0 , 0 ] ;
 227: LD_ADDR_EXP 21
 231: PUSH
 232: LD_INT 1
 234: PUSH
 235: LD_INT 2
 237: PUSH
 238: LD_INT 3
 240: PUSH
 241: LD_INT 1
 243: PUSH
 244: LD_INT 0
 246: PUSH
 247: LD_INT 0
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 0
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: LIST
 264: LIST
 265: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 266: LD_ADDR_EXP 19
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: LD_INT 0
 279: PUSH
 280: LD_INT 0
 282: PUSH
 283: LD_INT 0
 285: PUSH
 286: LD_INT 0
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: LIST
 299: LIST
 300: LIST
 301: LIST
 302: LIST
 303: LIST
 304: ST_TO_ADDR
// Teams := [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 305: LD_ADDR_EXP 18
 309: PUSH
 310: LD_INT 1
 312: PUSH
 313: LD_INT 2
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: LD_INT 3
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: ST_TO_ADDR
// end ; for i := 1 to 8 do
 334: LD_ADDR_VAR 0 2
 338: PUSH
 339: DOUBLE
 340: LD_INT 1
 342: DEC
 343: ST_TO_ADDR
 344: LD_INT 8
 346: PUSH
 347: FOR_TO
 348: IFFALSE 435
// if Multiplayer_GetPlayerIsSpec ( i ) then
 350: LD_VAR 0 2
 354: PPUSH
 355: CALL_OW 530
 359: IFFALSE 433
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 361: LD_ADDR_EXP 20
 365: PUSH
 366: LD_EXP 20
 370: PPUSH
 371: LD_VAR 0 2
 375: PPUSH
 376: LD_INT 0
 378: PPUSH
 379: CALL_OW 1
 383: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 384: LD_ADDR_EXP 18
 388: PUSH
 389: LD_EXP 18
 393: PPUSH
 394: LD_EXP 17
 398: PUSH
 399: LD_VAR 0 2
 403: ARRAY
 404: PPUSH
 405: LD_EXP 18
 409: PUSH
 410: LD_EXP 17
 414: PUSH
 415: LD_VAR 0 2
 419: ARRAY
 420: ARRAY
 421: PUSH
 422: LD_VAR 0 2
 426: DIFF
 427: PPUSH
 428: CALL_OW 1
 432: ST_TO_ADDR
// end ;
 433: GO 347
 435: POP
 436: POP
// Position_Sides := [ 0 , 0 , 0 , 0 ] ;
 437: LD_ADDR_EXP 23
 441: PUSH
 442: LD_INT 0
 444: PUSH
 445: LD_INT 0
 447: PUSH
 448: LD_INT 0
 450: PUSH
 451: LD_INT 0
 453: PUSH
 454: EMPTY
 455: LIST
 456: LIST
 457: LIST
 458: LIST
 459: ST_TO_ADDR
// for i := 1 to 8 do
 460: LD_ADDR_VAR 0 2
 464: PUSH
 465: DOUBLE
 466: LD_INT 1
 468: DEC
 469: ST_TO_ADDR
 470: LD_INT 8
 472: PUSH
 473: FOR_TO
 474: IFFALSE 521
// if Side_Positions [ i ] then
 476: LD_EXP 20
 480: PUSH
 481: LD_VAR 0 2
 485: ARRAY
 486: IFFALSE 519
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 488: LD_ADDR_EXP 23
 492: PUSH
 493: LD_EXP 23
 497: PPUSH
 498: LD_EXP 20
 502: PUSH
 503: LD_VAR 0 2
 507: ARRAY
 508: PPUSH
 509: LD_VAR 0 2
 513: PPUSH
 514: CALL_OW 1
 518: ST_TO_ADDR
 519: GO 473
 521: POP
 522: POP
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 523: LD_ADDR_EXP 22
 527: PUSH
 528: LD_EXP 17
 532: PUSH
 533: LD_INT 0
 535: PUSH
 536: EMPTY
 537: LIST
 538: DIFF
 539: PUSH
 540: LD_INT 1
 542: GREATER
 543: ST_TO_ADDR
// if Multiplayer then
 544: LD_OWVAR 4
 548: IFFALSE 755
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 550: LD_ADDR_EXP 43
 554: PUSH
 555: LD_INT 0
 557: PPUSH
 558: CALL_OW 426
 562: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 563: LD_ADDR_EXP 44
 567: PUSH
 568: LD_INT 1
 570: PPUSH
 571: CALL_OW 426
 575: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 576: LD_ADDR_EXP 45
 580: PUSH
 581: LD_INT 2
 583: PPUSH
 584: CALL_OW 426
 588: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 589: LD_ADDR_EXP 46
 593: PUSH
 594: LD_INT 3
 596: PPUSH
 597: CALL_OW 426
 601: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 602: LD_ADDR_EXP 47
 606: PUSH
 607: LD_INT 4
 609: PPUSH
 610: CALL_OW 426
 614: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 615: LD_ADDR_EXP 48
 619: PUSH
 620: LD_INT 5
 622: PPUSH
 623: CALL_OW 426
 627: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 628: LD_ADDR_EXP 50
 632: PUSH
 633: LD_INT 10
 635: PPUSH
 636: CALL_OW 426
 640: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 641: LD_ADDR_EXP 51
 645: PUSH
 646: LD_INT 11
 648: PPUSH
 649: CALL_OW 426
 653: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 654: LD_ADDR_EXP 52
 658: PUSH
 659: LD_INT 12
 661: PPUSH
 662: CALL_OW 426
 666: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 13 ) ;
 667: LD_ADDR_EXP 54
 671: PUSH
 672: LD_INT 13
 674: PPUSH
 675: CALL_OW 426
 679: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 14 ) ;
 680: LD_ADDR_EXP 53
 684: PUSH
 685: LD_INT 14
 687: PPUSH
 688: CALL_OW 426
 692: ST_TO_ADDR
// def_tree_function := GetMultiplayerSetting ( 15 ) ;
 693: LD_ADDR_EXP 1
 697: PUSH
 698: LD_INT 15
 700: PPUSH
 701: CALL_OW 426
 705: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 706: LD_ADDR_EXP 55
 710: PUSH
 711: LD_INT 17
 713: PPUSH
 714: CALL_OW 426
 718: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 719: LD_ADDR_EXP 56
 723: PUSH
 724: LD_INT 20
 726: PPUSH
 727: CALL_OW 426
 731: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 732: LD_ADDR_VAR 0 3
 736: PUSH
 737: LD_INT 22
 739: PPUSH
 740: CALL_OW 426
 744: ST_TO_ADDR
// def_win_rules = 0 ;
 745: LD_ADDR_EXP 15
 749: PUSH
 750: LD_INT 0
 752: ST_TO_ADDR
// end else
 753: GO 887
// begin Randomize ;
 755: CALL_OW 10
// def_base_level := 2 ;
 759: LD_ADDR_EXP 43
 763: PUSH
 764: LD_INT 2
 766: ST_TO_ADDR
// def_amount_of_people := 1 ;
 767: LD_ADDR_EXP 44
 771: PUSH
 772: LD_INT 1
 774: ST_TO_ADDR
// def_skill_level := 1 ;
 775: LD_ADDR_EXP 45
 779: PUSH
 780: LD_INT 1
 782: ST_TO_ADDR
// def_starting_resources := 2 ;
 783: LD_ADDR_EXP 46
 787: PUSH
 788: LD_INT 2
 790: ST_TO_ADDR
// def_shipments_density := 71 ;
 791: LD_ADDR_EXP 47
 795: PUSH
 796: LD_INT 71
 798: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 799: LD_ADDR_EXP 48
 803: PUSH
 804: LD_INT 0
 806: ST_TO_ADDR
// def_shared_vision := 1 ;
 807: LD_ADDR_EXP 50
 811: PUSH
 812: LD_INT 1
 814: ST_TO_ADDR
// def_morale_flags := 1 ;
 815: LD_ADDR_EXP 51
 819: PUSH
 820: LD_INT 1
 822: ST_TO_ADDR
// def_siberite_detection := 1 ;
 823: LD_ADDR_EXP 52
 827: PUSH
 828: LD_INT 1
 830: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 831: LD_ADDR_EXP 54
 835: PUSH
 836: LD_INT 3
 838: ST_TO_ADDR
// def_people_respawning := 2 ;
 839: LD_ADDR_EXP 53
 843: PUSH
 844: LD_INT 2
 846: ST_TO_ADDR
// def_tree_function := 7 ;
 847: LD_ADDR_EXP 1
 851: PUSH
 852: LD_INT 7
 854: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 855: LD_ADDR_EXP 55
 859: PUSH
 860: LD_INT 0
 862: ST_TO_ADDR
// def_builduptime := 1 ;
 863: LD_ADDR_EXP 56
 867: PUSH
 868: LD_INT 1
 870: ST_TO_ADDR
// tech_level = 4 ;
 871: LD_ADDR_VAR 0 3
 875: PUSH
 876: LD_INT 4
 878: ST_TO_ADDR
// def_win_rules = 0 ;
 879: LD_ADDR_EXP 15
 883: PUSH
 884: LD_INT 0
 886: ST_TO_ADDR
// end ; if def_tree_function = 7 then
 887: LD_EXP 1
 891: PUSH
 892: LD_INT 7
 894: EQUAL
 895: IFFALSE 913
// def_tree_function := Rand ( 1 , 5 ) ;
 897: LD_ADDR_EXP 1
 901: PUSH
 902: LD_INT 1
 904: PPUSH
 905: LD_INT 5
 907: PPUSH
 908: CALL_OW 12
 912: ST_TO_ADDR
// InitGameRules ;
 913: CALL 8962 0 0
// if def_game_rules = 0 then
 917: LD_EXP 42
 921: PUSH
 922: LD_INT 0
 924: EQUAL
 925: IFFALSE 952
// begin if isSGUI then
 927: LD_OWVAR 83
 931: IFFALSE 939
// setMpTechs ( ) else
 933: CALL 12479 0 0
 937: GO 952
// begin SetMpTechLevel ( tech_level + 1 ) ;
 939: LD_VAR 0 3
 943: PUSH
 944: LD_INT 1
 946: PLUS
 947: PPUSH
 948: CALL 12626 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 952: LD_ADDR_EXP 2
 956: PUSH
 957: LD_INT 0
 959: PUSH
 960: LD_INT 1
 962: PUSH
 963: LD_INT 1
 965: PUSH
 966: LD_INT 1
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: LIST
 973: LIST
 974: PUSH
 975: LD_EXP 43
 979: PUSH
 980: LD_INT 1
 982: PLUS
 983: ARRAY
 984: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 , 3 ] [ def_base_level + 1 ] ;
 985: LD_ADDR_EXP 3
 989: PUSH
 990: LD_INT 0
 992: PUSH
 993: LD_INT 0
 995: PUSH
 996: LD_INT 2
 998: PUSH
 999: LD_INT 3
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: PUSH
1008: LD_EXP 43
1012: PUSH
1013: LD_INT 1
1015: PLUS
1016: ARRAY
1017: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1018: LD_ADDR_EXP 5
1022: PUSH
1023: LD_INT 2
1025: PUSH
1026: LD_INT 3
1028: PUSH
1029: LD_INT 4
1031: PUSH
1032: LD_INT 5
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: PUSH
1041: LD_EXP 45
1045: PUSH
1046: LD_INT 1
1048: PLUS
1049: ARRAY
1050: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1051: LD_ADDR_EXP 7
1055: PUSH
1056: LD_INT 0
1058: PUSH
1059: LD_INT 0
1061: PUSH
1062: LD_INT 0
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: PUSH
1070: LD_INT 30
1072: PUSH
1073: LD_INT 0
1075: PUSH
1076: LD_INT 0
1078: PUSH
1079: EMPTY
1080: LIST
1081: LIST
1082: LIST
1083: PUSH
1084: LD_INT 50
1086: PUSH
1087: LD_INT 20
1089: PUSH
1090: LD_INT 0
1092: PUSH
1093: EMPTY
1094: LIST
1095: LIST
1096: LIST
1097: PUSH
1098: LD_INT 80
1100: PUSH
1101: LD_INT 40
1103: PUSH
1104: LD_INT 20
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: LIST
1116: LIST
1117: PUSH
1118: LD_EXP 46
1122: PUSH
1123: LD_INT 1
1125: PLUS
1126: ARRAY
1127: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1128: LD_ADDR_EXP 6
1132: PUSH
1133: LD_INT 10
1135: PUSH
1136: EMPTY
1137: LIST
1138: PUSH
1139: LD_INT 7
1141: PUSH
1142: LD_INT 14
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: PUSH
1149: LD_INT 6
1151: PUSH
1152: LD_INT 12
1154: PUSH
1155: LD_INT 18
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: LIST
1162: PUSH
1163: LD_INT 5
1165: PUSH
1166: LD_INT 10
1168: PUSH
1169: LD_INT 15
1171: PUSH
1172: LD_INT 20
1174: PUSH
1175: EMPTY
1176: LIST
1177: LIST
1178: LIST
1179: LIST
1180: PUSH
1181: EMPTY
1182: LIST
1183: LIST
1184: LIST
1185: LIST
1186: PUSH
1187: LD_EXP 46
1191: PUSH
1192: LD_INT 1
1194: PLUS
1195: ARRAY
1196: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1197: LD_ADDR_EXP 4
1201: PUSH
1202: LD_EXP 44
1206: PUSH
1207: LD_INT 4
1209: PLUS
1210: ST_TO_ADDR
// shipments_density := 350 - ( def_shipments_density * 2 ) ;
1211: LD_ADDR_EXP 8
1215: PUSH
1216: LD_INT 350
1218: PUSH
1219: LD_EXP 47
1223: PUSH
1224: LD_INT 2
1226: MUL
1227: MINUS
1228: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1229: LD_ADDR_EXP 13
1233: PUSH
1234: LD_INT 0
1236: PUSH
1237: LD_INT 1
1239: PUSH
1240: LD_INT 2
1242: PUSH
1243: LD_INT 3
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: PUSH
1252: LD_EXP 54
1256: PUSH
1257: LD_INT 1
1259: PLUS
1260: ARRAY
1261: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1262: LD_ADDR_EXP 10
1266: PUSH
1267: LD_INT 0
1269: PUSH
1270: LD_INT 8400
1272: PUSH
1273: LD_INT 1750
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: LIST
1280: PUSH
1281: LD_EXP 53
1285: PUSH
1286: LD_INT 1
1288: PLUS
1289: ARRAY
1290: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1291: LD_ADDR_EXP 11
1295: PUSH
1296: LD_INT 0
1298: PUSH
1299: LD_INT 21000
1301: PUSH
1302: LD_INT 4200
1304: PUSH
1305: EMPTY
1306: LIST
1307: LIST
1308: LIST
1309: PUSH
1310: LD_EXP 53
1314: PUSH
1315: LD_INT 1
1317: PLUS
1318: ARRAY
1319: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1320: LD_ADDR_EXP 9
1324: PUSH
1325: LD_INT 1
1327: NEG
1328: PUSH
1329: LD_INT 350
1331: PUSH
1332: LD_INT 700
1334: PUSH
1335: LD_INT 1400
1337: PUSH
1338: LD_INT 0
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: PUSH
1348: LD_EXP 51
1352: PUSH
1353: LD_INT 1
1355: PLUS
1356: ARRAY
1357: ST_TO_ADDR
// battle_flags_id := [ ] ;
1358: LD_ADDR_EXP 27
1362: PUSH
1363: EMPTY
1364: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1365: LD_ADDR_EXP 12
1369: PUSH
1370: LD_INT 0
1372: PUSH
1373: LD_INT 1
1375: PUSH
1376: LD_INT 63000
1378: PUSH
1379: LD_INT 126000
1381: PUSH
1382: LD_INT 189000
1384: PUSH
1385: LD_INT 252000
1387: PUSH
1388: EMPTY
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: PUSH
1396: LD_EXP 55
1400: PUSH
1401: LD_INT 1
1403: PLUS
1404: ARRAY
1405: ST_TO_ADDR
// tree_function := [ [ 0 , 0 , 0 , 0 , 0 ] , [ 2 , 0 , 0 , 0 , 0 ] , [ 0 , 4 , 0 , 0 , 0 ] , [ 0 , 0 , 2 , 0 , 0 ] , [ 0 , 0 , 0 , 3 , 0 ] , [ 1 , 2 , 1 , 2 , 2 ] , [ 0 , 0 , 0 , 0 , 3 ] ] [ def_tree_function + 1 ] ;
1406: LD_ADDR_EXP 14
1410: PUSH
1411: LD_INT 0
1413: PUSH
1414: LD_INT 0
1416: PUSH
1417: LD_INT 0
1419: PUSH
1420: LD_INT 0
1422: PUSH
1423: LD_INT 0
1425: PUSH
1426: EMPTY
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: PUSH
1433: LD_INT 2
1435: PUSH
1436: LD_INT 0
1438: PUSH
1439: LD_INT 0
1441: PUSH
1442: LD_INT 0
1444: PUSH
1445: LD_INT 0
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: PUSH
1455: LD_INT 0
1457: PUSH
1458: LD_INT 4
1460: PUSH
1461: LD_INT 0
1463: PUSH
1464: LD_INT 0
1466: PUSH
1467: LD_INT 0
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: LIST
1474: LIST
1475: LIST
1476: PUSH
1477: LD_INT 0
1479: PUSH
1480: LD_INT 0
1482: PUSH
1483: LD_INT 2
1485: PUSH
1486: LD_INT 0
1488: PUSH
1489: LD_INT 0
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: PUSH
1499: LD_INT 0
1501: PUSH
1502: LD_INT 0
1504: PUSH
1505: LD_INT 0
1507: PUSH
1508: LD_INT 3
1510: PUSH
1511: LD_INT 0
1513: PUSH
1514: EMPTY
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: LIST
1520: PUSH
1521: LD_INT 1
1523: PUSH
1524: LD_INT 2
1526: PUSH
1527: LD_INT 1
1529: PUSH
1530: LD_INT 2
1532: PUSH
1533: LD_INT 2
1535: PUSH
1536: EMPTY
1537: LIST
1538: LIST
1539: LIST
1540: LIST
1541: LIST
1542: PUSH
1543: LD_INT 0
1545: PUSH
1546: LD_INT 0
1548: PUSH
1549: LD_INT 0
1551: PUSH
1552: LD_INT 0
1554: PUSH
1555: LD_INT 3
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: LIST
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: PUSH
1574: LD_EXP 1
1578: PUSH
1579: LD_INT 1
1581: PLUS
1582: ARRAY
1583: ST_TO_ADDR
// buildUpTime_Delay := [ 0 , 5 5$00 , 6 6$00 , 7 7$00 , 8 8$00 , 9 9$00 , 10 10$00 , 11 11$00 , 12 12$00 , 13 13$00 , 14 14$00 , 15 15$00 ] [ def_builduptime + 1 ] ;
1584: LD_ADDR_EXP 16
1588: PUSH
1589: LD_INT 0
1591: PUSH
1592: LD_INT 10500
1594: PUSH
1595: LD_INT 12600
1597: PUSH
1598: LD_INT 14700
1600: PUSH
1601: LD_INT 16800
1603: PUSH
1604: LD_INT 18900
1606: PUSH
1607: LD_INT 21000
1609: PUSH
1610: LD_INT 23100
1612: PUSH
1613: LD_INT 25200
1615: PUSH
1616: LD_INT 27300
1618: PUSH
1619: LD_INT 29400
1621: PUSH
1622: LD_INT 31500
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: PUSH
1639: LD_EXP 56
1643: PUSH
1644: LD_INT 1
1646: PLUS
1647: ARRAY
1648: ST_TO_ADDR
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] ;
1649: LD_ADDR_EXP 39
1653: PUSH
1654: LD_INT 8
1656: PUSH
1657: LD_INT 11
1659: PUSH
1660: LD_INT 9
1662: PUSH
1663: LD_INT 10
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: ST_TO_ADDR
// end ;
1672: LD_VAR 0 1
1676: RET
// function prepare_map_coordinates ; var side , dep , br1 , br2 , br3 , un , i , j ; begin
1677: LD_INT 0
1679: PPUSH
1680: PPUSH
1681: PPUSH
1682: PPUSH
1683: PPUSH
1684: PPUSH
1685: PPUSH
1686: PPUSH
1687: PPUSH
// depot_def = [ ] ;
1688: LD_ADDR_EXP 24
1692: PUSH
1693: EMPTY
1694: ST_TO_ADDR
// breastworks_def = [ ] ;
1695: LD_ADDR_EXP 25
1699: PUSH
1700: EMPTY
1701: ST_TO_ADDR
// for side := 1 to 4 do
1702: LD_ADDR_VAR 0 2
1706: PUSH
1707: DOUBLE
1708: LD_INT 1
1710: DEC
1711: ST_TO_ADDR
1712: LD_INT 4
1714: PUSH
1715: FOR_TO
1716: IFFALSE 2071
// begin dep := side * 4 - 3 ;
1718: LD_ADDR_VAR 0 3
1722: PUSH
1723: LD_VAR 0 2
1727: PUSH
1728: LD_INT 4
1730: MUL
1731: PUSH
1732: LD_INT 3
1734: MINUS
1735: ST_TO_ADDR
// br1 := side * 4 - 2 ;
1736: LD_ADDR_VAR 0 4
1740: PUSH
1741: LD_VAR 0 2
1745: PUSH
1746: LD_INT 4
1748: MUL
1749: PUSH
1750: LD_INT 2
1752: MINUS
1753: ST_TO_ADDR
// br2 := side * 4 - 1 ;
1754: LD_ADDR_VAR 0 5
1758: PUSH
1759: LD_VAR 0 2
1763: PUSH
1764: LD_INT 4
1766: MUL
1767: PUSH
1768: LD_INT 1
1770: MINUS
1771: ST_TO_ADDR
// br3 := side * 4 ;
1772: LD_ADDR_VAR 0 6
1776: PUSH
1777: LD_VAR 0 2
1781: PUSH
1782: LD_INT 4
1784: MUL
1785: ST_TO_ADDR
// depot_def := depot_def ^ [ [ GetX ( dep ) , GetY ( dep ) , GetDir ( dep ) ] ] ;
1786: LD_ADDR_EXP 24
1790: PUSH
1791: LD_EXP 24
1795: PUSH
1796: LD_VAR 0 3
1800: PPUSH
1801: CALL_OW 250
1805: PUSH
1806: LD_VAR 0 3
1810: PPUSH
1811: CALL_OW 251
1815: PUSH
1816: LD_VAR 0 3
1820: PPUSH
1821: CALL_OW 254
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: LIST
1830: PUSH
1831: EMPTY
1832: LIST
1833: ADD
1834: ST_TO_ADDR
// start_def := start_def ^ [ [ ShiftX ( GetX ( Dep ) , GetDir ( Dep ) , 6 ) , ShiftY ( GetY ( Dep ) , GetDir ( Dep ) , 6 ) ] ] ;
1835: LD_ADDR_EXP 26
1839: PUSH
1840: LD_EXP 26
1844: PUSH
1845: LD_VAR 0 3
1849: PPUSH
1850: CALL_OW 250
1854: PPUSH
1855: LD_VAR 0 3
1859: PPUSH
1860: CALL_OW 254
1864: PPUSH
1865: LD_INT 6
1867: PPUSH
1868: CALL_OW 272
1872: PUSH
1873: LD_VAR 0 3
1877: PPUSH
1878: CALL_OW 251
1882: PPUSH
1883: LD_VAR 0 3
1887: PPUSH
1888: CALL_OW 254
1892: PPUSH
1893: LD_INT 6
1895: PPUSH
1896: CALL_OW 273
1900: PUSH
1901: EMPTY
1902: LIST
1903: LIST
1904: PUSH
1905: EMPTY
1906: LIST
1907: ADD
1908: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ GetX ( br1 ) , GetY ( br1 ) , GetDir ( br1 ) ] , [ GetX ( br2 ) , GetY ( br2 ) , GetDir ( br2 ) ] , [ GetX ( br3 ) , GetY ( br3 ) , GetDir ( br3 ) ] ] ] ;
1909: LD_ADDR_EXP 25
1913: PUSH
1914: LD_EXP 25
1918: PUSH
1919: LD_VAR 0 4
1923: PPUSH
1924: CALL_OW 250
1928: PUSH
1929: LD_VAR 0 4
1933: PPUSH
1934: CALL_OW 251
1938: PUSH
1939: LD_VAR 0 4
1943: PPUSH
1944: CALL_OW 254
1948: PUSH
1949: EMPTY
1950: LIST
1951: LIST
1952: LIST
1953: PUSH
1954: LD_VAR 0 5
1958: PPUSH
1959: CALL_OW 250
1963: PUSH
1964: LD_VAR 0 5
1968: PPUSH
1969: CALL_OW 251
1973: PUSH
1974: LD_VAR 0 5
1978: PPUSH
1979: CALL_OW 254
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: LIST
1988: PUSH
1989: LD_VAR 0 6
1993: PPUSH
1994: CALL_OW 250
1998: PUSH
1999: LD_VAR 0 6
2003: PPUSH
2004: CALL_OW 251
2008: PUSH
2009: LD_VAR 0 6
2013: PPUSH
2014: CALL_OW 254
2018: PUSH
2019: EMPTY
2020: LIST
2021: LIST
2022: LIST
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: LIST
2028: PUSH
2029: EMPTY
2030: LIST
2031: ADD
2032: ST_TO_ADDR
// DestroyUnit ( dep ) ;
2033: LD_VAR 0 3
2037: PPUSH
2038: CALL_OW 65
// DestroyUnit ( br1 ) ;
2042: LD_VAR 0 4
2046: PPUSH
2047: CALL_OW 65
// DestroyUnit ( br2 ) ;
2051: LD_VAR 0 5
2055: PPUSH
2056: CALL_OW 65
// DestroyUnit ( br3 ) ;
2060: LD_VAR 0 6
2064: PPUSH
2065: CALL_OW 65
// end ;
2069: GO 1715
2071: POP
2072: POP
// normal_oil_deposits_locations := [ [ 28 , 15 ] , [ 102 , 17 ] , [ 50 , 84 ] , [ 143 , 111 ] ] ;
2073: LD_ADDR_EXP 28
2077: PUSH
2078: LD_INT 28
2080: PUSH
2081: LD_INT 15
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 102
2090: PUSH
2091: LD_INT 17
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: PUSH
2098: LD_INT 50
2100: PUSH
2101: LD_INT 84
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: PUSH
2108: LD_INT 143
2110: PUSH
2111: LD_INT 111
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 28 , 15 ] , [ 52 , 44 ] ] , [ [ 102 , 17 ] , [ 84 , 37 ] ] , [ [ 50 , 84 ] , [ 74 , 81 ] ] , [ [ 143 , 111 ] , [ 106 , 77 ] ] , ] ;
2124: LD_ADDR_EXP 29
2128: PUSH
2129: LD_INT 28
2131: PUSH
2132: LD_INT 15
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: PUSH
2139: LD_INT 52
2141: PUSH
2142: LD_INT 44
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: PUSH
2153: LD_INT 102
2155: PUSH
2156: LD_INT 17
2158: PUSH
2159: EMPTY
2160: LIST
2161: LIST
2162: PUSH
2163: LD_INT 84
2165: PUSH
2166: LD_INT 37
2168: PUSH
2169: EMPTY
2170: LIST
2171: LIST
2172: PUSH
2173: EMPTY
2174: LIST
2175: LIST
2176: PUSH
2177: LD_INT 50
2179: PUSH
2180: LD_INT 84
2182: PUSH
2183: EMPTY
2184: LIST
2185: LIST
2186: PUSH
2187: LD_INT 74
2189: PUSH
2190: LD_INT 81
2192: PUSH
2193: EMPTY
2194: LIST
2195: LIST
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 143
2203: PUSH
2204: LD_INT 111
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: PUSH
2211: LD_INT 106
2213: PUSH
2214: LD_INT 77
2216: PUSH
2217: EMPTY
2218: LIST
2219: LIST
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: PUSH
2225: EMPTY
2226: LIST
2227: LIST
2228: LIST
2229: LIST
2230: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 45 , 25 ] , [ 75 , 22 ] , [ 87 , 105 ] , [ 117 , 99 ] ] ;
2231: LD_ADDR_EXP 30
2235: PUSH
2236: LD_INT 45
2238: PUSH
2239: LD_INT 25
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: PUSH
2246: LD_INT 75
2248: PUSH
2249: LD_INT 22
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: PUSH
2256: LD_INT 87
2258: PUSH
2259: LD_INT 105
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: PUSH
2266: LD_INT 117
2268: PUSH
2269: LD_INT 99
2271: PUSH
2272: EMPTY
2273: LIST
2274: LIST
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: LIST
2280: LIST
2281: ST_TO_ADDR
// for i = 1 to Side_Positions do
2282: LD_ADDR_VAR 0 8
2286: PUSH
2287: DOUBLE
2288: LD_INT 1
2290: DEC
2291: ST_TO_ADDR
2292: LD_EXP 20
2296: PUSH
2297: FOR_TO
2298: IFFALSE 2477
// begin if not Side_Positions [ i ] then
2300: LD_EXP 20
2304: PUSH
2305: LD_VAR 0 8
2309: ARRAY
2310: NOT
2311: IFFALSE 2315
// continue ;
2313: GO 2297
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2315: LD_EXP 30
2319: PUSH
2320: LD_EXP 20
2324: PUSH
2325: LD_VAR 0 8
2329: ARRAY
2330: ARRAY
2331: PUSH
2332: LD_INT 1
2334: ARRAY
2335: PPUSH
2336: LD_EXP 30
2340: PUSH
2341: LD_EXP 20
2345: PUSH
2346: LD_VAR 0 8
2350: ARRAY
2351: ARRAY
2352: PUSH
2353: LD_INT 2
2355: ARRAY
2356: PPUSH
2357: LD_INT 3
2359: PPUSH
2360: CALL_OW 62
// if def_extra_oil_deposits then
2364: LD_EXP 48
2368: IFFALSE 2426
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2370: LD_ADDR_VAR 0 9
2374: PUSH
2375: LD_EXP 29
2379: PUSH
2380: LD_EXP 20
2384: PUSH
2385: LD_VAR 0 8
2389: ARRAY
2390: ARRAY
2391: PUSH
2392: FOR_IN
2393: IFFALSE 2422
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2395: LD_VAR 0 9
2399: PUSH
2400: LD_INT 1
2402: ARRAY
2403: PPUSH
2404: LD_VAR 0 9
2408: PUSH
2409: LD_INT 2
2411: ARRAY
2412: PPUSH
2413: LD_INT 2
2415: PPUSH
2416: CALL_OW 62
2420: GO 2392
2422: POP
2423: POP
2424: GO 2475
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2426: LD_EXP 28
2430: PUSH
2431: LD_EXP 20
2435: PUSH
2436: LD_VAR 0 8
2440: ARRAY
2441: ARRAY
2442: PUSH
2443: LD_INT 1
2445: ARRAY
2446: PPUSH
2447: LD_EXP 28
2451: PUSH
2452: LD_EXP 20
2456: PUSH
2457: LD_VAR 0 8
2461: ARRAY
2462: ARRAY
2463: PUSH
2464: LD_INT 2
2466: ARRAY
2467: PPUSH
2468: LD_INT 2
2470: PPUSH
2471: CALL_OW 62
// end ;
2475: GO 2297
2477: POP
2478: POP
// end ;
2479: LD_VAR 0 1
2483: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2484: LD_INT 0
2486: PPUSH
2487: PPUSH
2488: PPUSH
// if not Team_Game then
2489: LD_EXP 22
2493: NOT
2494: IFFALSE 2592
// begin for i = 1 to 8 do
2496: LD_ADDR_VAR 0 2
2500: PUSH
2501: DOUBLE
2502: LD_INT 1
2504: DEC
2505: ST_TO_ADDR
2506: LD_INT 8
2508: PUSH
2509: FOR_TO
2510: IFFALSE 2588
// for j = 1 to 8 do
2512: LD_ADDR_VAR 0 3
2516: PUSH
2517: DOUBLE
2518: LD_INT 1
2520: DEC
2521: ST_TO_ADDR
2522: LD_INT 8
2524: PUSH
2525: FOR_TO
2526: IFFALSE 2584
// if i <> j then
2528: LD_VAR 0 2
2532: PUSH
2533: LD_VAR 0 3
2537: NONEQUAL
2538: IFFALSE 2562
// SetAttitude ( i , j , att_neutral , true ) else
2540: LD_VAR 0 2
2544: PPUSH
2545: LD_VAR 0 3
2549: PPUSH
2550: LD_INT 0
2552: PPUSH
2553: LD_INT 1
2555: PPUSH
2556: CALL_OW 80
2560: GO 2582
// SetAttitude ( i , j , att_friend , true ) ;
2562: LD_VAR 0 2
2566: PPUSH
2567: LD_VAR 0 3
2571: PPUSH
2572: LD_INT 1
2574: PPUSH
2575: LD_INT 1
2577: PPUSH
2578: CALL_OW 80
2582: GO 2525
2584: POP
2585: POP
2586: GO 2509
2588: POP
2589: POP
// end else
2590: GO 2767
// begin if def_shared_vision then
2592: LD_EXP 50
2596: IFFALSE 2661
// begin for i in Teams do
2598: LD_ADDR_VAR 0 2
2602: PUSH
2603: LD_EXP 18
2607: PUSH
2608: FOR_IN
2609: IFFALSE 2659
// for j = 2 to i do
2611: LD_ADDR_VAR 0 3
2615: PUSH
2616: DOUBLE
2617: LD_INT 2
2619: DEC
2620: ST_TO_ADDR
2621: LD_VAR 0 2
2625: PUSH
2626: FOR_TO
2627: IFFALSE 2655
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2629: LD_VAR 0 2
2633: PUSH
2634: LD_VAR 0 3
2638: ARRAY
2639: PPUSH
2640: LD_VAR 0 2
2644: PUSH
2645: LD_INT 1
2647: ARRAY
2648: PPUSH
2649: CALL_OW 343
2653: GO 2626
2655: POP
2656: POP
2657: GO 2608
2659: POP
2660: POP
// end ; for i = 1 to 8 do
2661: LD_ADDR_VAR 0 2
2665: PUSH
2666: DOUBLE
2667: LD_INT 1
2669: DEC
2670: ST_TO_ADDR
2671: LD_INT 8
2673: PUSH
2674: FOR_TO
2675: IFFALSE 2765
// for j = 1 to 8 do
2677: LD_ADDR_VAR 0 3
2681: PUSH
2682: DOUBLE
2683: LD_INT 1
2685: DEC
2686: ST_TO_ADDR
2687: LD_INT 8
2689: PUSH
2690: FOR_TO
2691: IFFALSE 2761
// if Side_Teams [ i ] = Side_Teams [ j ] then
2693: LD_EXP 17
2697: PUSH
2698: LD_VAR 0 2
2702: ARRAY
2703: PUSH
2704: LD_EXP 17
2708: PUSH
2709: LD_VAR 0 3
2713: ARRAY
2714: EQUAL
2715: IFFALSE 2739
// SetAttitude ( i , j , att_friend , true ) else
2717: LD_VAR 0 2
2721: PPUSH
2722: LD_VAR 0 3
2726: PPUSH
2727: LD_INT 1
2729: PPUSH
2730: LD_INT 1
2732: PPUSH
2733: CALL_OW 80
2737: GO 2759
// SetAttitude ( i , j , att_enemy , true ) ;
2739: LD_VAR 0 2
2743: PPUSH
2744: LD_VAR 0 3
2748: PPUSH
2749: LD_INT 2
2751: PPUSH
2752: LD_INT 1
2754: PPUSH
2755: CALL_OW 80
2759: GO 2690
2761: POP
2762: POP
2763: GO 2674
2765: POP
2766: POP
// end ; end ;
2767: LD_VAR 0 1
2771: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2772: LD_INT 0
2774: PPUSH
2775: PPUSH
2776: PPUSH
2777: PPUSH
// result := [ ] ;
2778: LD_ADDR_VAR 0 7
2782: PUSH
2783: EMPTY
2784: ST_TO_ADDR
// for i := 1 to count do
2785: LD_ADDR_VAR 0 8
2789: PUSH
2790: DOUBLE
2791: LD_INT 1
2793: DEC
2794: ST_TO_ADDR
2795: LD_VAR 0 1
2799: PUSH
2800: FOR_TO
2801: IFFALSE 3219
// begin uc_direction := Rand ( 0 , 5 ) ;
2803: LD_ADDR_OWVAR 24
2807: PUSH
2808: LD_INT 0
2810: PPUSH
2811: LD_INT 5
2813: PPUSH
2814: CALL_OW 12
2818: ST_TO_ADDR
// if commander then
2819: LD_LOC 1
2823: IFFALSE 2932
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2825: LD_ADDR_OWVAR 26
2829: PUSH
2830: LD_OWVAR 19
2834: PUSH
2835: LD_OWVAR 20
2839: ARRAY
2840: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2841: LD_INT 1
2843: PPUSH
2844: LD_INT 2
2846: PPUSH
2847: CALL_OW 12
2851: PPUSH
2852: LD_VAR 0 2
2856: PPUSH
2857: LD_EXP 5
2861: PUSH
2862: LD_INT 2
2864: PLUS
2865: PPUSH
2866: CALL_OW 380
// hc_importance := 105 ;
2870: LD_ADDR_OWVAR 32
2874: PUSH
2875: LD_INT 105
2877: ST_TO_ADDR
// commander := false ;
2878: LD_ADDR_LOC 1
2882: PUSH
2883: LD_INT 0
2885: ST_TO_ADDR
// if Multiplayer then
2886: LD_OWVAR 4
2890: IFFALSE 2930
// begin hc_gallery := MULTIAVATARS ;
2892: LD_ADDR_OWVAR 33
2896: PUSH
2897: LD_STRING MULTIAVATARS
2899: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2900: LD_ADDR_OWVAR 34
2904: PUSH
2905: LD_OWVAR 20
2909: PPUSH
2910: CALL_OW 525
2914: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2915: LD_ADDR_OWVAR 27
2919: PUSH
2920: LD_OWVAR 20
2924: PPUSH
2925: CALL_OW 526
2929: ST_TO_ADDR
// end ; end else
2930: GO 2995
// begin hc_name :=  ;
2932: LD_ADDR_OWVAR 26
2936: PUSH
2937: LD_STRING 
2939: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2940: LD_INT 1
2942: PPUSH
2943: LD_INT 2
2945: PPUSH
2946: CALL_OW 12
2950: PPUSH
2951: LD_VAR 0 2
2955: PPUSH
2956: LD_EXP 5
2960: PPUSH
2961: CALL_OW 380
// hc_importance := 0 ;
2965: LD_ADDR_OWVAR 32
2969: PUSH
2970: LD_INT 0
2972: ST_TO_ADDR
// if Multiplayer then
2973: LD_OWVAR 4
2977: IFFALSE 2995
// begin hc_gallery :=  ;
2979: LD_ADDR_OWVAR 33
2983: PUSH
2984: LD_STRING 
2986: ST_TO_ADDR
// hc_face_number := 0 ;
2987: LD_ADDR_OWVAR 34
2991: PUSH
2992: LD_INT 0
2994: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2995: LD_ADDR_VAR 0 10
2999: PUSH
3000: CALL_OW 44
3004: ST_TO_ADDR
// if global_defined then
3005: LD_LOC 3
3009: IFFALSE 3149
// begin if ( cl = class_soldier ) then
3011: LD_VAR 0 2
3015: PUSH
3016: LD_INT 1
3018: EQUAL
3019: IFFALSE 3039
// j := i + soldiers_created else
3021: LD_ADDR_VAR 0 9
3025: PUSH
3026: LD_VAR 0 8
3030: PUSH
3031: LD_LOC 4
3035: PLUS
3036: ST_TO_ADDR
3037: GO 3049
// j := i ;
3039: LD_ADDR_VAR 0 9
3043: PUSH
3044: LD_VAR 0 8
3048: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3049: LD_LOC 2
3053: PUSH
3054: LD_VAR 0 2
3058: ARRAY
3059: PUSH
3060: LD_VAR 0 9
3064: ARRAY
3065: PPUSH
3066: LD_VAR 0 10
3070: PPUSH
3071: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3075: LD_VAR 0 10
3079: PPUSH
3080: LD_INT 2
3082: PPUSH
3083: LD_LOC 2
3087: PUSH
3088: LD_VAR 0 2
3092: ARRAY
3093: PUSH
3094: LD_VAR 0 9
3098: ARRAY
3099: PPUSH
3100: LD_INT 2
3102: PPUSH
3103: CALL_OW 260
3107: PPUSH
3108: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3112: LD_VAR 0 10
3116: PPUSH
3117: LD_INT 1
3119: PPUSH
3120: LD_LOC 2
3124: PUSH
3125: LD_VAR 0 2
3129: ARRAY
3130: PUSH
3131: LD_VAR 0 9
3135: ARRAY
3136: PPUSH
3137: LD_INT 1
3139: PPUSH
3140: CALL_OW 260
3144: PPUSH
3145: CALL_OW 239
// end ; if building then
3149: LD_VAR 0 6
3153: IFFALSE 3171
// PlaceHumanInUnit ( un , building ) else
3155: LD_VAR 0 10
3159: PPUSH
3160: LD_VAR 0 6
3164: PPUSH
3165: CALL_OW 52
3169: GO 3198
// PlaceUnitXYR ( un , x , y , r , false ) ;
3171: LD_VAR 0 10
3175: PPUSH
3176: LD_VAR 0 3
3180: PPUSH
3181: LD_VAR 0 4
3185: PPUSH
3186: LD_VAR 0 5
3190: PPUSH
3191: LD_INT 0
3193: PPUSH
3194: CALL_OW 50
// result := result ^ [ un ] ;
3198: LD_ADDR_VAR 0 7
3202: PUSH
3203: LD_VAR 0 7
3207: PUSH
3208: LD_VAR 0 10
3212: PUSH
3213: EMPTY
3214: LIST
3215: ADD
3216: ST_TO_ADDR
// end ;
3217: GO 2800
3219: POP
3220: POP
// if not global_defined then
3221: LD_LOC 3
3225: NOT
3226: IFFALSE 3304
// if ( global_units >= cl ) then
3228: LD_LOC 2
3232: PUSH
3233: LD_VAR 0 2
3237: GREATEREQUAL
3238: IFFALSE 3279
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3240: LD_ADDR_LOC 2
3244: PUSH
3245: LD_LOC 2
3249: PPUSH
3250: LD_VAR 0 2
3254: PPUSH
3255: LD_LOC 2
3259: PUSH
3260: LD_VAR 0 2
3264: ARRAY
3265: PUSH
3266: LD_VAR 0 7
3270: ADD
3271: PPUSH
3272: CALL_OW 1
3276: ST_TO_ADDR
3277: GO 3304
// global_units := Replace ( global_units , cl , result ) ;
3279: LD_ADDR_LOC 2
3283: PUSH
3284: LD_LOC 2
3288: PPUSH
3289: LD_VAR 0 2
3293: PPUSH
3294: LD_VAR 0 7
3298: PPUSH
3299: CALL_OW 1
3303: ST_TO_ADDR
// if commander then
3304: LD_LOC 1
3308: IFFALSE 3355
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3310: LD_ADDR_EXP 31
3314: PUSH
3315: LD_EXP 31
3319: PPUSH
3320: LD_OWVAR 20
3324: PPUSH
3325: LD_EXP 31
3329: PUSH
3330: LD_OWVAR 20
3334: ARRAY
3335: PUSH
3336: LD_VAR 0 10
3340: ADD
3341: PPUSH
3342: CALL_OW 1
3346: ST_TO_ADDR
// commander := false ;
3347: LD_ADDR_LOC 1
3351: PUSH
3352: LD_INT 0
3354: ST_TO_ADDR
// end ; end ;
3355: LD_VAR 0 7
3359: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3360: LD_INT 0
3362: PPUSH
3363: PPUSH
3364: PPUSH
3365: PPUSH
3366: PPUSH
3367: PPUSH
3368: PPUSH
3369: PPUSH
3370: PPUSH
// if side in [ 0 , 9 ] then
3371: LD_VAR 0 1
3375: PUSH
3376: LD_INT 0
3378: PUSH
3379: LD_INT 9
3381: PUSH
3382: EMPTY
3383: LIST
3384: LIST
3385: IN
3386: IFFALSE 3390
// exit ;
3388: GO 4440
// pos := Side_Positions [ side ] ;
3390: LD_ADDR_VAR 0 3
3394: PUSH
3395: LD_EXP 20
3399: PUSH
3400: LD_VAR 0 1
3404: ARRAY
3405: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3406: LD_ADDR_OWVAR 21
3410: PUSH
3411: LD_EXP 21
3415: PUSH
3416: LD_VAR 0 1
3420: ARRAY
3421: ST_TO_ADDR
// uc_side := side ;
3422: LD_ADDR_OWVAR 20
3426: PUSH
3427: LD_VAR 0 1
3431: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3432: LD_ADDR_VAR 0 4
3436: PUSH
3437: LD_EXP 24
3441: PUSH
3442: LD_VAR 0 3
3446: ARRAY
3447: PUSH
3448: LD_INT 1
3450: ARRAY
3451: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3452: LD_ADDR_VAR 0 5
3456: PUSH
3457: LD_EXP 24
3461: PUSH
3462: LD_VAR 0 3
3466: ARRAY
3467: PUSH
3468: LD_INT 2
3470: ARRAY
3471: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3472: LD_ADDR_VAR 0 6
3476: PUSH
3477: LD_EXP 24
3481: PUSH
3482: LD_VAR 0 3
3486: ARRAY
3487: PUSH
3488: LD_INT 3
3490: ARRAY
3491: ST_TO_ADDR
// if is_depot then
3492: LD_EXP 2
3496: IFFALSE 3629
// begin bc_type = b_depot ;
3498: LD_ADDR_OWVAR 42
3502: PUSH
3503: LD_INT 0
3505: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3506: LD_ADDR_VAR 0 10
3510: PUSH
3511: LD_VAR 0 4
3515: PPUSH
3516: LD_VAR 0 5
3520: PPUSH
3521: LD_VAR 0 6
3525: PPUSH
3526: CALL_OW 47
3530: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3531: LD_VAR 0 10
3535: PPUSH
3536: LD_STRING @
3538: PUSH
3539: LD_VAR 0 1
3543: STR
3544: PPUSH
3545: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3549: LD_VAR 0 10
3553: PPUSH
3554: CALL_OW 274
3558: PPUSH
3559: LD_INT 1
3561: PPUSH
3562: LD_EXP 7
3566: PUSH
3567: LD_INT 1
3569: ARRAY
3570: PPUSH
3571: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3575: LD_VAR 0 10
3579: PPUSH
3580: CALL_OW 274
3584: PPUSH
3585: LD_INT 2
3587: PPUSH
3588: LD_EXP 7
3592: PUSH
3593: LD_INT 2
3595: ARRAY
3596: PPUSH
3597: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3601: LD_VAR 0 10
3605: PPUSH
3606: CALL_OW 274
3610: PPUSH
3611: LD_INT 3
3613: PPUSH
3614: LD_EXP 7
3618: PUSH
3619: LD_INT 3
3621: ARRAY
3622: PPUSH
3623: CALL_OW 277
// end else
3627: GO 3773
// begin for i := 1 to 3 do
3629: LD_ADDR_VAR 0 7
3633: PUSH
3634: DOUBLE
3635: LD_INT 1
3637: DEC
3638: ST_TO_ADDR
3639: LD_INT 3
3641: PUSH
3642: FOR_TO
3643: IFFALSE 3771
// begin r := starting_resources [ i ] ;
3645: LD_ADDR_VAR 0 8
3649: PUSH
3650: LD_EXP 7
3654: PUSH
3655: LD_VAR 0 7
3659: ARRAY
3660: ST_TO_ADDR
// while r >= 10 do
3661: LD_VAR 0 8
3665: PUSH
3666: LD_INT 10
3668: GREATEREQUAL
3669: IFFALSE 3769
// if r > 50 then
3671: LD_VAR 0 8
3675: PUSH
3676: LD_INT 50
3678: GREATER
3679: IFFALSE 3725
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3681: LD_VAR 0 7
3685: PPUSH
3686: LD_INT 5
3688: PPUSH
3689: LD_VAR 0 4
3693: PPUSH
3694: LD_VAR 0 5
3698: PPUSH
3699: LD_INT 4
3701: PPUSH
3702: LD_INT 0
3704: PPUSH
3705: CALL_OW 60
// r := r - 50 ;
3709: LD_ADDR_VAR 0 8
3713: PUSH
3714: LD_VAR 0 8
3718: PUSH
3719: LD_INT 50
3721: MINUS
3722: ST_TO_ADDR
// end else
3723: GO 3767
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3725: LD_VAR 0 7
3729: PPUSH
3730: LD_VAR 0 8
3734: PUSH
3735: LD_INT 10
3737: DIV
3738: PPUSH
3739: LD_VAR 0 4
3743: PPUSH
3744: LD_VAR 0 5
3748: PPUSH
3749: LD_INT 4
3751: PPUSH
3752: LD_INT 0
3754: PPUSH
3755: CALL_OW 60
// r := 0 ;
3759: LD_ADDR_VAR 0 8
3763: PUSH
3764: LD_INT 0
3766: ST_TO_ADDR
// end ;
3767: GO 3661
// end ;
3769: GO 3642
3771: POP
3772: POP
// end ; for r in starting_crates do
3773: LD_ADDR_VAR 0 8
3777: PUSH
3778: LD_EXP 6
3782: PUSH
3783: FOR_IN
3784: IFFALSE 3816
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3786: LD_INT 1
3788: PPUSH
3789: LD_INT 5
3791: PPUSH
3792: LD_VAR 0 4
3796: PPUSH
3797: LD_VAR 0 5
3801: PPUSH
3802: LD_VAR 0 8
3806: PPUSH
3807: LD_INT 0
3809: PPUSH
3810: CALL_OW 60
3814: GO 3783
3816: POP
3817: POP
// if def_morale_flags then
3818: LD_EXP 51
3822: IFFALSE 3961
// begin x := start_def [ pos ] [ 1 ] ;
3824: LD_ADDR_VAR 0 4
3828: PUSH
3829: LD_EXP 26
3833: PUSH
3834: LD_VAR 0 3
3838: ARRAY
3839: PUSH
3840: LD_INT 1
3842: ARRAY
3843: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3844: LD_ADDR_VAR 0 5
3848: PUSH
3849: LD_EXP 26
3853: PUSH
3854: LD_VAR 0 3
3858: ARRAY
3859: PUSH
3860: LD_INT 2
3862: ARRAY
3863: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3864: LD_VAR 0 4
3868: PPUSH
3869: LD_VAR 0 5
3873: PPUSH
3874: LD_INT 12
3876: PPUSH
3877: LD_INT 2
3879: PPUSH
3880: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3884: LD_ADDR_EXP 27
3888: PUSH
3889: LD_EXP 27
3893: PUSH
3894: LD_VAR 0 1
3898: PPUSH
3899: LD_VAR 0 4
3903: PPUSH
3904: LD_VAR 0 5
3908: PPUSH
3909: LD_INT 1
3911: PUSH
3912: LD_INT 100
3914: PUSH
3915: EMPTY
3916: LIST
3917: LIST
3918: PUSH
3919: LD_INT 2
3921: PUSH
3922: LD_INT 50
3924: PUSH
3925: EMPTY
3926: LIST
3927: LIST
3928: PUSH
3929: LD_INT 3
3931: PUSH
3932: LD_INT 20
3934: PUSH
3935: EMPTY
3936: LIST
3937: LIST
3938: PUSH
3939: LD_INT 20
3941: PUSH
3942: LD_INT 100
3944: PUSH
3945: EMPTY
3946: LIST
3947: LIST
3948: PUSH
3949: EMPTY
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: PPUSH
3955: CALL_OW 418
3959: ADD
3960: ST_TO_ADDR
// end ; commander := true ;
3961: LD_ADDR_LOC 1
3965: PUSH
3966: LD_INT 1
3968: ST_TO_ADDR
// soldiers_created := 0 ;
3969: LD_ADDR_LOC 4
3973: PUSH
3974: LD_INT 0
3976: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3977: LD_ADDR_VAR 0 7
3981: PUSH
3982: DOUBLE
3983: LD_INT 1
3985: DEC
3986: ST_TO_ADDR
3987: LD_EXP 3
3991: PUSH
3992: FOR_TO
3993: IFFALSE 4146
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3995: LD_ADDR_VAR 0 4
3999: PUSH
4000: LD_EXP 25
4004: PUSH
4005: LD_VAR 0 3
4009: ARRAY
4010: PUSH
4011: LD_VAR 0 7
4015: ARRAY
4016: PUSH
4017: LD_INT 1
4019: ARRAY
4020: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4021: LD_ADDR_VAR 0 5
4025: PUSH
4026: LD_EXP 25
4030: PUSH
4031: LD_VAR 0 3
4035: ARRAY
4036: PUSH
4037: LD_VAR 0 7
4041: ARRAY
4042: PUSH
4043: LD_INT 2
4045: ARRAY
4046: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4047: LD_ADDR_VAR 0 6
4051: PUSH
4052: LD_EXP 25
4056: PUSH
4057: LD_VAR 0 3
4061: ARRAY
4062: PUSH
4063: LD_VAR 0 7
4067: ARRAY
4068: PUSH
4069: LD_INT 3
4071: ARRAY
4072: ST_TO_ADDR
// bc_type := b_breastwork ;
4073: LD_ADDR_OWVAR 42
4077: PUSH
4078: LD_INT 31
4080: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4081: LD_ADDR_VAR 0 9
4085: PUSH
4086: LD_VAR 0 4
4090: PPUSH
4091: LD_VAR 0 5
4095: PPUSH
4096: LD_VAR 0 6
4100: PPUSH
4101: CALL_OW 47
4105: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4106: LD_INT 1
4108: PPUSH
4109: LD_INT 1
4111: PPUSH
4112: LD_INT 0
4114: PPUSH
4115: LD_INT 0
4117: PPUSH
4118: LD_INT 0
4120: PPUSH
4121: LD_VAR 0 9
4125: PPUSH
4126: CALL 2772 0 6
// soldiers_created := soldiers_created + 1 ;
4130: LD_ADDR_LOC 4
4134: PUSH
4135: LD_LOC 4
4139: PUSH
4140: LD_INT 1
4142: PLUS
4143: ST_TO_ADDR
// end ;
4144: GO 3992
4146: POP
4147: POP
// x := start_def [ pos ] [ 1 ] ;
4148: LD_ADDR_VAR 0 4
4152: PUSH
4153: LD_EXP 26
4157: PUSH
4158: LD_VAR 0 3
4162: ARRAY
4163: PUSH
4164: LD_INT 1
4166: ARRAY
4167: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4168: LD_ADDR_VAR 0 5
4172: PUSH
4173: LD_EXP 26
4177: PUSH
4178: LD_VAR 0 3
4182: ARRAY
4183: PUSH
4184: LD_INT 2
4186: ARRAY
4187: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4188: LD_LOC 8
4192: PUSH
4193: LD_EXP 3
4197: MINUS
4198: PPUSH
4199: LD_INT 1
4201: PPUSH
4202: LD_VAR 0 4
4206: PPUSH
4207: LD_VAR 0 5
4211: PPUSH
4212: LD_INT 5
4214: PPUSH
4215: LD_INT 0
4217: PPUSH
4218: CALL 2772 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4222: LD_LOC 5
4226: PPUSH
4227: LD_INT 2
4229: PPUSH
4230: LD_VAR 0 4
4234: PPUSH
4235: LD_VAR 0 5
4239: PPUSH
4240: LD_INT 5
4242: PPUSH
4243: LD_INT 0
4245: PPUSH
4246: CALL 2772 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4250: LD_LOC 7
4254: PPUSH
4255: LD_INT 3
4257: PPUSH
4258: LD_VAR 0 4
4262: PPUSH
4263: LD_VAR 0 5
4267: PPUSH
4268: LD_INT 5
4270: PPUSH
4271: LD_INT 0
4273: PPUSH
4274: CALL 2772 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4278: LD_LOC 6
4282: PPUSH
4283: LD_INT 4
4285: PPUSH
4286: LD_VAR 0 4
4290: PPUSH
4291: LD_VAR 0 5
4295: PPUSH
4296: LD_INT 5
4298: PPUSH
4299: LD_INT 0
4301: PPUSH
4302: CALL 2772 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4306: LD_EXP 52
4310: PUSH
4311: LD_INT 20
4313: PPUSH
4314: LD_VAR 0 1
4318: PPUSH
4319: CALL_OW 321
4323: PUSH
4324: LD_INT 1
4326: EQUAL
4327: AND
4328: IFFALSE 4345
// SetTech ( tech_SibDet , side , state_researched ) ;
4330: LD_INT 20
4332: PPUSH
4333: LD_VAR 0 1
4337: PPUSH
4338: LD_INT 2
4340: PPUSH
4341: CALL_OW 322
// if def_siberite_bomb = 1 then
4345: LD_EXP 55
4349: PUSH
4350: LD_INT 1
4352: EQUAL
4353: IFFALSE 4387
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4355: LD_INT 25
4357: PPUSH
4358: LD_VAR 0 1
4362: PPUSH
4363: LD_INT 1
4365: PPUSH
4366: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4370: LD_INT 73
4372: PPUSH
4373: LD_VAR 0 1
4377: PPUSH
4378: LD_INT 1
4380: PPUSH
4381: CALL_OW 322
// end else
4385: GO 4417
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4387: LD_INT 25
4389: PPUSH
4390: LD_VAR 0 1
4394: PPUSH
4395: LD_INT 0
4397: PPUSH
4398: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4402: LD_INT 73
4404: PPUSH
4405: LD_VAR 0 1
4409: PPUSH
4410: LD_INT 0
4412: PPUSH
4413: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4417: LD_INT 24
4419: PPUSH
4420: LD_VAR 0 1
4424: PPUSH
4425: LD_INT 0
4427: PPUSH
4428: CALL_OW 322
// global_defined := true ;
4432: LD_ADDR_LOC 3
4436: PUSH
4437: LD_INT 1
4439: ST_TO_ADDR
// end ;
4440: LD_VAR 0 2
4444: RET
// every 0 0$1 do
4445: GO 4447
4447: DISABLE
// if ( def_siberite_bomb > 1 ) then
4448: LD_EXP 55
4452: PUSH
4453: LD_INT 1
4455: GREATER
4456: IFFALSE 4471
// begin wait ( siberite_bomb_Delay ) ;
4458: LD_EXP 12
4462: PPUSH
4463: CALL_OW 67
// EnableSibFiss ;
4467: CALL 4472 0 0
// end ;
4471: END
// function EnableSibFiss ; var i ; begin
4472: LD_INT 0
4474: PPUSH
4475: PPUSH
// for i := 1 to 8 do
4476: LD_ADDR_VAR 0 2
4480: PUSH
4481: DOUBLE
4482: LD_INT 1
4484: DEC
4485: ST_TO_ADDR
4486: LD_INT 8
4488: PUSH
4489: FOR_TO
4490: IFFALSE 4536
// if Side_Positions [ i ] then
4492: LD_EXP 20
4496: PUSH
4497: LD_VAR 0 2
4501: ARRAY
4502: IFFALSE 4534
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4504: LD_INT 25
4506: PPUSH
4507: LD_VAR 0 2
4511: PPUSH
4512: LD_INT 1
4514: PPUSH
4515: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4519: LD_INT 73
4521: PPUSH
4522: LD_VAR 0 2
4526: PPUSH
4527: LD_INT 1
4529: PPUSH
4530: CALL_OW 322
// end ;
4534: GO 4489
4536: POP
4537: POP
// end ;
4538: LD_VAR 0 1
4542: RET
// function prepare_sides ; var i ; begin
4543: LD_INT 0
4545: PPUSH
4546: PPUSH
// global_units := [ ] ;
4547: LD_ADDR_LOC 2
4551: PUSH
4552: EMPTY
4553: ST_TO_ADDR
// global_defined := false ;
4554: LD_ADDR_LOC 3
4558: PUSH
4559: LD_INT 0
4561: ST_TO_ADDR
// CountClassMembers ;
4562: CALL 4612 0 0
// for i := 1 to 8 do
4566: LD_ADDR_VAR 0 2
4570: PUSH
4571: DOUBLE
4572: LD_INT 1
4574: DEC
4575: ST_TO_ADDR
4576: LD_INT 8
4578: PUSH
4579: FOR_TO
4580: IFFALSE 4605
// if Side_Positions [ i ] then
4582: LD_EXP 20
4586: PUSH
4587: LD_VAR 0 2
4591: ARRAY
4592: IFFALSE 4603
// prepare_side ( i ) ;
4594: LD_VAR 0 2
4598: PPUSH
4599: CALL 3360 0 1
4603: GO 4579
4605: POP
4606: POP
// end ;
4607: LD_VAR 0 1
4611: RET
// function CountClassMembers ; var Mode ; begin
4612: LD_INT 0
4614: PPUSH
4615: PPUSH
// if No_Mechs then
4616: LD_EXP 57
4620: IFFALSE 4632
// Mode := 2 else
4622: LD_ADDR_VAR 0 2
4626: PUSH
4627: LD_INT 2
4629: ST_TO_ADDR
4630: GO 4640
// Mode := 1 ;
4632: LD_ADDR_VAR 0 2
4636: PUSH
4637: LD_INT 1
4639: ST_TO_ADDR
// neng := number_of_people ;
4640: LD_ADDR_LOC 5
4644: PUSH
4645: LD_EXP 4
4649: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4650: LD_ADDR_LOC 8
4654: PUSH
4655: LD_LOC 5
4659: PUSH
4660: LD_INT 4
4662: PUSH
4663: LD_INT 3
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: PUSH
4670: LD_VAR 0 2
4674: ARRAY
4675: DIV
4676: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4677: LD_LOC 8
4681: PUSH
4682: LD_EXP 3
4686: LESS
4687: IFFALSE 4699
// nsol := number_of_breastworks ;
4689: LD_ADDR_LOC 8
4693: PUSH
4694: LD_EXP 3
4698: ST_TO_ADDR
// neng := neng - nsol ;
4699: LD_ADDR_LOC 5
4703: PUSH
4704: LD_LOC 5
4708: PUSH
4709: LD_LOC 8
4713: MINUS
4714: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4715: LD_ADDR_LOC 6
4719: PUSH
4720: LD_LOC 5
4724: PUSH
4725: LD_INT 3
4727: PUSH
4728: LD_INT 2
4730: PUSH
4731: EMPTY
4732: LIST
4733: LIST
4734: PUSH
4735: LD_VAR 0 2
4739: ARRAY
4740: DIV
4741: ST_TO_ADDR
// if ( nsci < 1 ) then
4742: LD_LOC 6
4746: PUSH
4747: LD_INT 1
4749: LESS
4750: IFFALSE 4760
// nsci := 1 ;
4752: LD_ADDR_LOC 6
4756: PUSH
4757: LD_INT 1
4759: ST_TO_ADDR
// neng := neng - nsci ;
4760: LD_ADDR_LOC 5
4764: PUSH
4765: LD_LOC 5
4769: PUSH
4770: LD_LOC 6
4774: MINUS
4775: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4776: LD_ADDR_LOC 7
4780: PUSH
4781: LD_LOC 5
4785: PUSH
4786: LD_INT 2
4788: DIV
4789: PUSH
4790: LD_INT 0
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: PUSH
4797: LD_VAR 0 2
4801: ARRAY
4802: ST_TO_ADDR
// neng := neng - nmech ;
4803: LD_ADDR_LOC 5
4807: PUSH
4808: LD_LOC 5
4812: PUSH
4813: LD_LOC 7
4817: MINUS
4818: ST_TO_ADDR
// if ( neng < 1 ) then
4819: LD_LOC 5
4823: PUSH
4824: LD_INT 1
4826: LESS
4827: IFFALSE 4837
// neng := 1 ;
4829: LD_ADDR_LOC 5
4833: PUSH
4834: LD_INT 1
4836: ST_TO_ADDR
// end ;
4837: LD_VAR 0 1
4841: RET
// starting begin disable ( 98 ) ;
4842: LD_INT 98
4844: DISABLE_MARKED
// disable ( 99 ) ;
4845: LD_INT 99
4847: DISABLE_MARKED
// disable ( 400 ) ;
4848: LD_INT 400
4850: DISABLE_MARKED
// disable ( 401 ) ;
4851: LD_INT 401
4853: DISABLE_MARKED
// disable ( 600 ) ;
4854: LD_INT 600
4856: DISABLE_MARKED
// mp_selectmsg := true ;
4857: LD_ADDR_OWVAR 13
4861: PUSH
4862: LD_INT 1
4864: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4865: CALL 68 0 0
// prepare_map_coordinates ;
4869: CALL 1677 0 0
// set_shared_visions_and_alliances ;
4873: CALL 2484 0 0
// ResetFog ;
4877: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4881: LD_OWVAR 2
4885: PPUSH
4886: CALL_OW 520
// prepare_sides ;
4890: CALL 4543 0 0
// Init_Win_Condition ;
4894: CALL 16648 0 0
// InitLimits ;
4898: CALL 11094 0 0
// ShowTimer ;
4902: CALL 12031 0 0
// init_shipments_and_respawning ;
4906: CALL 6031 0 0
// music_nat := Side_Nations [ your_side ] ;
4910: LD_ADDR_OWVAR 71
4914: PUSH
4915: LD_EXP 21
4919: PUSH
4920: LD_OWVAR 2
4924: ARRAY
4925: ST_TO_ADDR
// if IAmSpec then
4926: CALL_OW 531
4930: IFFALSE 4954
// begin fogoff ( true ) ;
4932: LD_INT 1
4934: PPUSH
4935: CALL_OW 344
// CenterNowOnXY ( 79 , 59 ) ;
4939: LD_INT 79
4941: PPUSH
4942: LD_INT 59
4944: PPUSH
4945: CALL_OW 86
// enable ( 400 ) ;
4949: LD_INT 400
4951: ENABLE_MARKED
// end else
4952: GO 5000
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4954: LD_EXP 26
4958: PUSH
4959: LD_EXP 20
4963: PUSH
4964: LD_OWVAR 2
4968: ARRAY
4969: ARRAY
4970: PUSH
4971: LD_INT 1
4973: ARRAY
4974: PPUSH
4975: LD_EXP 26
4979: PUSH
4980: LD_EXP 20
4984: PUSH
4985: LD_OWVAR 2
4989: ARRAY
4990: ARRAY
4991: PUSH
4992: LD_INT 2
4994: ARRAY
4995: PPUSH
4996: CALL_OW 86
// end ; InitApeman ;
5000: CALL 5206 0 0
// if def_builduptime then
5004: LD_EXP 56
5008: IFFALSE 5014
// BeginBuildUp ;
5010: CALL 8268 0 0
// end ; end_of_file
5014: END
// every 20 20$00 trigger apemanNumber do
5015: LD_EXP 32
5019: IFFALSE 5052
5021: GO 5023
5023: DISABLE
// begin enable ;
5024: ENABLE
// if apeLevel >= 8 then
5025: LD_EXP 37
5029: PUSH
5030: LD_INT 8
5032: GREATEREQUAL
5033: IFFALSE 5038
// disable else
5035: DISABLE
5036: GO 5052
// apeLevel := apeLevel + 1 ;
5038: LD_ADDR_EXP 37
5042: PUSH
5043: LD_EXP 37
5047: PUSH
5048: LD_INT 1
5050: PLUS
5051: ST_TO_ADDR
// end ;
5052: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5053: LD_EXP 32
5057: PUSH
5058: LD_EXP 33
5062: LESS
5063: IFFALSE 5203
5065: GO 5067
5067: DISABLE
5068: LD_INT 0
5070: PPUSH
5071: PPUSH
5072: PPUSH
5073: PPUSH
// begin enable ;
5074: ENABLE
// for i := 1 to apemanPos do
5075: LD_ADDR_VAR 0 1
5079: PUSH
5080: DOUBLE
5081: LD_INT 1
5083: DEC
5084: ST_TO_ADDR
5085: LD_EXP 35
5089: PUSH
5090: FOR_TO
5091: IFFALSE 5201
// begin if apemanPlayerCount [ i ] then
5093: LD_EXP 36
5097: PUSH
5098: LD_VAR 0 1
5102: ARRAY
5103: IFFALSE 5199
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5105: LD_EXP 36
5109: PUSH
5110: LD_VAR 0 1
5114: ARRAY
5115: PUSH
5116: LD_EXP 35
5120: PUSH
5121: LD_VAR 0 1
5125: ARRAY
5126: GREATER
5127: IFFALSE 5199
// begin ape := PrepareApeman ;
5129: LD_ADDR_VAR 0 2
5133: PUSH
5134: CALL 5706 0 0
5138: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5139: LD_VAR 0 2
5143: PPUSH
5144: LD_EXP 38
5148: PUSH
5149: LD_VAR 0 1
5153: ARRAY
5154: PPUSH
5155: LD_INT 0
5157: PPUSH
5158: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5162: LD_ADDR_EXP 35
5166: PUSH
5167: LD_EXP 35
5171: PPUSH
5172: LD_VAR 0 1
5176: PPUSH
5177: LD_EXP 35
5181: PUSH
5182: LD_VAR 0 1
5186: ARRAY
5187: PUSH
5188: LD_VAR 0 2
5192: UNION
5193: PPUSH
5194: CALL_OW 1
5198: ST_TO_ADDR
// end ; end ; end ;
5199: GO 5090
5201: POP
5202: POP
// end ;
5203: PPOPN 4
5205: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5206: LD_INT 0
5208: PPUSH
5209: PPUSH
5210: PPUSH
5211: PPUSH
5212: PPUSH
5213: PPUSH
5214: PPUSH
// playersAmount := 0 ;
5215: LD_ADDR_VAR 0 3
5219: PUSH
5220: LD_INT 0
5222: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , ] ;
5223: LD_ADDR_VAR 0 7
5227: PUSH
5228: LD_INT 13
5230: PUSH
5231: LD_INT 14
5233: PUSH
5234: LD_INT 15
5236: PUSH
5237: LD_INT 16
5239: PUSH
5240: EMPTY
5241: LIST
5242: LIST
5243: LIST
5244: LIST
5245: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5246: LD_ADDR_EXP 38
5250: PUSH
5251: LD_INT 0
5253: PUSH
5254: LD_INT 0
5256: PUSH
5257: LD_INT 0
5259: PUSH
5260: LD_INT 0
5262: PUSH
5263: LD_INT 0
5265: PUSH
5266: LD_INT 0
5268: PUSH
5269: LD_INT 0
5271: PUSH
5272: LD_INT 0
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: LIST
5283: LIST
5284: ST_TO_ADDR
// for j = 1 to Side_Positions do
5285: LD_ADDR_VAR 0 4
5289: PUSH
5290: DOUBLE
5291: LD_INT 1
5293: DEC
5294: ST_TO_ADDR
5295: LD_EXP 20
5299: PUSH
5300: FOR_TO
5301: IFFALSE 5368
// if Side_Positions [ j ] then
5303: LD_EXP 20
5307: PUSH
5308: LD_VAR 0 4
5312: ARRAY
5313: IFFALSE 5366
// begin playersAmount := playersAmount + 1 ;
5315: LD_ADDR_VAR 0 3
5319: PUSH
5320: LD_VAR 0 3
5324: PUSH
5325: LD_INT 1
5327: PLUS
5328: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5329: LD_ADDR_EXP 38
5333: PUSH
5334: LD_EXP 38
5338: PPUSH
5339: LD_VAR 0 4
5343: PPUSH
5344: LD_VAR 0 7
5348: PUSH
5349: LD_EXP 20
5353: PUSH
5354: LD_VAR 0 4
5358: ARRAY
5359: ARRAY
5360: PPUSH
5361: CALL_OW 1
5365: ST_TO_ADDR
// end ;
5366: GO 5300
5368: POP
5369: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5370: LD_ADDR_EXP 34
5374: PUSH
5375: LD_INT 3
5377: PUSH
5378: LD_EXP 13
5382: MUL
5383: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5384: LD_ADDR_EXP 32
5388: PUSH
5389: LD_VAR 0 3
5393: PUSH
5394: LD_EXP 34
5398: MUL
5399: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5400: LD_ADDR_EXP 33
5404: PUSH
5405: LD_EXP 32
5409: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5410: LD_ADDR_EXP 35
5414: PUSH
5415: LD_INT 0
5417: PUSH
5418: LD_INT 0
5420: PUSH
5421: LD_INT 0
5423: PUSH
5424: LD_INT 0
5426: PUSH
5427: LD_INT 0
5429: PUSH
5430: LD_INT 0
5432: PUSH
5433: LD_INT 0
5435: PUSH
5436: LD_INT 0
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5449: LD_ADDR_EXP 36
5453: PUSH
5454: LD_INT 0
5456: PUSH
5457: LD_INT 0
5459: PUSH
5460: LD_INT 0
5462: PUSH
5463: LD_INT 0
5465: PUSH
5466: LD_INT 0
5468: PUSH
5469: LD_INT 0
5471: PUSH
5472: LD_INT 0
5474: PUSH
5475: LD_INT 0
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: LIST
5482: LIST
5483: LIST
5484: LIST
5485: LIST
5486: LIST
5487: ST_TO_ADDR
// apeLevel := 1 ;
5488: LD_ADDR_EXP 37
5492: PUSH
5493: LD_INT 1
5495: ST_TO_ADDR
// if not apemanNumber then
5496: LD_EXP 32
5500: NOT
5501: IFFALSE 5505
// exit ;
5503: GO 5701
// for i := 1 to apemanPerPlayer do
5505: LD_ADDR_VAR 0 2
5509: PUSH
5510: DOUBLE
5511: LD_INT 1
5513: DEC
5514: ST_TO_ADDR
5515: LD_EXP 34
5519: PUSH
5520: FOR_TO
5521: IFFALSE 5699
// begin for j := 1 to Side_Positions do
5523: LD_ADDR_VAR 0 4
5527: PUSH
5528: DOUBLE
5529: LD_INT 1
5531: DEC
5532: ST_TO_ADDR
5533: LD_EXP 20
5537: PUSH
5538: FOR_TO
5539: IFFALSE 5695
// if Side_Positions [ j ] then
5541: LD_EXP 20
5545: PUSH
5546: LD_VAR 0 4
5550: ARRAY
5551: IFFALSE 5693
// begin pos := Side_Positions [ j ] ;
5553: LD_ADDR_VAR 0 6
5557: PUSH
5558: LD_EXP 20
5562: PUSH
5563: LD_VAR 0 4
5567: ARRAY
5568: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5569: LD_ADDR_EXP 36
5573: PUSH
5574: LD_EXP 36
5578: PPUSH
5579: LD_VAR 0 4
5583: PPUSH
5584: LD_EXP 36
5588: PUSH
5589: LD_VAR 0 4
5593: ARRAY
5594: PUSH
5595: LD_INT 1
5597: PLUS
5598: PPUSH
5599: CALL_OW 1
5603: ST_TO_ADDR
// ape := PrepareApeman ;
5604: LD_ADDR_VAR 0 5
5608: PUSH
5609: CALL 5706 0 0
5613: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5614: LD_ADDR_EXP 35
5618: PUSH
5619: LD_EXP 35
5623: PPUSH
5624: LD_VAR 0 4
5628: PPUSH
5629: LD_EXP 35
5633: PUSH
5634: LD_VAR 0 4
5638: ARRAY
5639: PPUSH
5640: LD_EXP 35
5644: PUSH
5645: LD_VAR 0 4
5649: ARRAY
5650: PUSH
5651: LD_INT 1
5653: PLUS
5654: PPUSH
5655: LD_VAR 0 5
5659: PPUSH
5660: CALL_OW 1
5664: PPUSH
5665: CALL_OW 1
5669: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5670: LD_VAR 0 5
5674: PPUSH
5675: LD_EXP 38
5679: PUSH
5680: LD_VAR 0 4
5684: ARRAY
5685: PPUSH
5686: LD_INT 0
5688: PPUSH
5689: CALL_OW 49
// end ;
5693: GO 5538
5695: POP
5696: POP
// end ;
5697: GO 5520
5699: POP
5700: POP
// end ;
5701: LD_VAR 0 1
5705: RET
// export function PrepareApeman ; var bonus ; begin
5706: LD_INT 0
5708: PPUSH
5709: PPUSH
// uc_side := 0 ;
5710: LD_ADDR_OWVAR 20
5714: PUSH
5715: LD_INT 0
5717: ST_TO_ADDR
// uc_nation := 0 ;
5718: LD_ADDR_OWVAR 21
5722: PUSH
5723: LD_INT 0
5725: ST_TO_ADDR
// InitHc ;
5726: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
5730: LD_ADDR_VAR 0 2
5734: PUSH
5735: LD_INT 1
5737: NEG
5738: PUSH
5739: LD_INT 0
5741: PUSH
5742: LD_INT 1
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: LIST
5749: PUSH
5750: LD_OWVAR 1
5754: PUSH
5755: LD_INT 3
5757: MOD
5758: PUSH
5759: LD_INT 1
5761: PLUS
5762: ARRAY
5763: ST_TO_ADDR
// hc_class := class_apeman ;
5764: LD_ADDR_OWVAR 28
5768: PUSH
5769: LD_INT 12
5771: ST_TO_ADDR
// hc_gallery :=  ;
5772: LD_ADDR_OWVAR 33
5776: PUSH
5777: LD_STRING 
5779: ST_TO_ADDR
// hc_name :=  ;
5780: LD_ADDR_OWVAR 26
5784: PUSH
5785: LD_STRING 
5787: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
5788: LD_ADDR_OWVAR 31
5792: PUSH
5793: LD_EXP 37
5797: PUSH
5798: LD_VAR 0 2
5802: PLUS
5803: PUSH
5804: LD_EXP 37
5808: PUSH
5809: LD_VAR 0 2
5813: PLUS
5814: PUSH
5815: LD_EXP 37
5819: PUSH
5820: LD_VAR 0 2
5824: PLUS
5825: PUSH
5826: LD_EXP 37
5830: PUSH
5831: LD_VAR 0 2
5835: PLUS
5836: PUSH
5837: EMPTY
5838: LIST
5839: LIST
5840: LIST
5841: LIST
5842: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
5843: LD_ADDR_OWVAR 35
5847: PUSH
5848: LD_INT 10
5850: PUSH
5851: LD_VAR 0 2
5855: MUL
5856: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5857: LD_ADDR_OWVAR 29
5861: PUSH
5862: LD_INT 12
5864: PUSH
5865: LD_INT 10
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: ST_TO_ADDR
// result := CreateHuman ;
5872: LD_ADDR_VAR 0 1
5876: PUSH
5877: CALL_OW 44
5881: ST_TO_ADDR
// end ;
5882: LD_VAR 0 1
5886: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
5887: LD_INT 0
5889: PPUSH
5890: PPUSH
5891: PPUSH
// if not ape then
5892: LD_VAR 0 1
5896: NOT
5897: IFFALSE 5901
// exit ;
5899: GO 6026
// side := GetSide ( ape ) ;
5901: LD_ADDR_VAR 0 3
5905: PUSH
5906: LD_VAR 0 1
5910: PPUSH
5911: CALL_OW 255
5915: ST_TO_ADDR
// if not side then
5916: LD_VAR 0 3
5920: NOT
5921: IFFALSE 5975
// begin for i = 1 to apemanPos do
5923: LD_ADDR_VAR 0 4
5927: PUSH
5928: DOUBLE
5929: LD_INT 1
5931: DEC
5932: ST_TO_ADDR
5933: LD_EXP 35
5937: PUSH
5938: FOR_TO
5939: IFFALSE 5973
// if ape in apemanPos [ i ] then
5941: LD_VAR 0 1
5945: PUSH
5946: LD_EXP 35
5950: PUSH
5951: LD_VAR 0 4
5955: ARRAY
5956: IN
5957: IFFALSE 5971
// begin side := i ;
5959: LD_ADDR_VAR 0 3
5963: PUSH
5964: LD_VAR 0 4
5968: ST_TO_ADDR
// break ;
5969: GO 5973
// end ;
5971: GO 5938
5973: POP
5974: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
5975: LD_ADDR_EXP 35
5979: PUSH
5980: LD_EXP 35
5984: PPUSH
5985: LD_VAR 0 3
5989: PPUSH
5990: LD_EXP 35
5994: PUSH
5995: LD_VAR 0 3
5999: ARRAY
6000: PUSH
6001: LD_VAR 0 1
6005: DIFF
6006: PPUSH
6007: CALL_OW 1
6011: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6012: LD_ADDR_EXP 32
6016: PUSH
6017: LD_EXP 32
6021: PUSH
6022: LD_INT 1
6024: MINUS
6025: ST_TO_ADDR
// end ; end_of_file
6026: LD_VAR 0 2
6030: RET
// var shipment , respawn , inqueue ; export function init_shipments_and_respawning ; begin
6031: LD_INT 0
6033: PPUSH
// shipment := Rand ( 0 , 3 ) ;
6034: LD_ADDR_LOC 9
6038: PUSH
6039: LD_INT 0
6041: PPUSH
6042: LD_INT 3
6044: PPUSH
6045: CALL_OW 12
6049: ST_TO_ADDR
// respawn := Rand ( 1 , 8 ) ;
6050: LD_ADDR_LOC 10
6054: PUSH
6055: LD_INT 1
6057: PPUSH
6058: LD_INT 8
6060: PPUSH
6061: CALL_OW 12
6065: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6066: LD_ADDR_LOC 11
6070: PUSH
6071: LD_INT 0
6073: PUSH
6074: LD_INT 0
6076: PUSH
6077: LD_INT 0
6079: PUSH
6080: LD_INT 0
6082: PUSH
6083: LD_INT 0
6085: PUSH
6086: LD_INT 0
6088: PUSH
6089: LD_INT 0
6091: PUSH
6092: LD_INT 0
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: ST_TO_ADDR
// end ;
6105: LD_VAR 0 1
6109: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
6110: GO 6112
6112: DISABLE
6113: LD_INT 0
6115: PPUSH
6116: PPUSH
6117: PPUSH
6118: PPUSH
// begin if respawning_time_max = 0 then
6119: LD_EXP 11
6123: PUSH
6124: LD_INT 0
6126: EQUAL
6127: IFFALSE 6131
// exit ;
6129: GO 6638
// if respawn = 8 then
6131: LD_LOC 10
6135: PUSH
6136: LD_INT 8
6138: EQUAL
6139: IFFALSE 6151
// respawn := 1 else
6141: LD_ADDR_LOC 10
6145: PUSH
6146: LD_INT 1
6148: ST_TO_ADDR
6149: GO 6165
// respawn := respawn + 1 ;
6151: LD_ADDR_LOC 10
6155: PUSH
6156: LD_LOC 10
6160: PUSH
6161: LD_INT 1
6163: PLUS
6164: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
6165: LD_EXP 20
6169: PUSH
6170: LD_LOC 10
6174: ARRAY
6175: PUSH
6176: LD_LOC 11
6180: PUSH
6181: LD_LOC 10
6185: ARRAY
6186: NOT
6187: AND
6188: IFFALSE 6637
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
6190: LD_ADDR_VAR 0 1
6194: PUSH
6195: LD_INT 21
6197: PUSH
6198: LD_INT 1
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: PUSH
6205: LD_INT 22
6207: PUSH
6208: LD_LOC 10
6212: PUSH
6213: EMPTY
6214: LIST
6215: LIST
6216: PUSH
6217: LD_INT 3
6219: PUSH
6220: LD_INT 23
6222: PUSH
6223: LD_INT 0
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: PPUSH
6236: CALL_OW 69
6240: ST_TO_ADDR
// if n < number_of_people then
6241: LD_VAR 0 1
6245: PUSH
6246: LD_EXP 4
6250: LESS
6251: IFFALSE 6634
// begin aktresp := respawn ;
6253: LD_ADDR_VAR 0 3
6257: PUSH
6258: LD_LOC 10
6262: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
6263: LD_ADDR_LOC 11
6267: PUSH
6268: LD_LOC 11
6272: PPUSH
6273: LD_VAR 0 3
6277: PPUSH
6278: LD_INT 1
6280: PPUSH
6281: CALL_OW 1
6285: ST_TO_ADDR
// enable ;
6286: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
6287: LD_EXP 10
6291: PPUSH
6292: LD_EXP 11
6296: PPUSH
6297: CALL_OW 12
6301: PPUSH
6302: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
6306: LD_ADDR_LOC 11
6310: PUSH
6311: LD_LOC 11
6315: PPUSH
6316: LD_VAR 0 3
6320: PPUSH
6321: LD_INT 0
6323: PPUSH
6324: CALL_OW 1
6328: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
6329: LD_ADDR_VAR 0 2
6333: PUSH
6334: LD_INT 21
6336: PUSH
6337: LD_INT 3
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: PUSH
6344: LD_INT 2
6346: PUSH
6347: LD_INT 30
6349: PUSH
6350: LD_INT 0
6352: PUSH
6353: EMPTY
6354: LIST
6355: LIST
6356: PUSH
6357: LD_INT 30
6359: PUSH
6360: LD_INT 1
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 50
6374: PUSH
6375: EMPTY
6376: LIST
6377: PUSH
6378: LD_INT 22
6380: PUSH
6381: LD_VAR 0 3
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 69
6400: ST_TO_ADDR
// if building_list = 0 then
6401: LD_VAR 0 2
6405: PUSH
6406: LD_INT 0
6408: EQUAL
6409: IFFALSE 6454
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
6411: LD_ADDR_VAR 0 2
6415: PUSH
6416: LD_INT 21
6418: PUSH
6419: LD_INT 3
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: PUSH
6426: LD_INT 50
6428: PUSH
6429: EMPTY
6430: LIST
6431: PUSH
6432: LD_INT 22
6434: PUSH
6435: LD_VAR 0 3
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: LIST
6448: PPUSH
6449: CALL_OW 69
6453: ST_TO_ADDR
// if building_list = 0 then
6454: LD_VAR 0 2
6458: PUSH
6459: LD_INT 0
6461: EQUAL
6462: IFFALSE 6466
// exit ;
6464: GO 6638
// hc_name :=  ;
6466: LD_ADDR_OWVAR 26
6470: PUSH
6471: LD_STRING 
6473: ST_TO_ADDR
// hc_importance := 0 ;
6474: LD_ADDR_OWVAR 32
6478: PUSH
6479: LD_INT 0
6481: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6482: LD_INT 0
6484: PPUSH
6485: LD_INT 0
6487: PPUSH
6488: LD_EXP 5
6492: PUSH
6493: LD_INT 2
6495: DIV
6496: PPUSH
6497: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
6501: LD_ADDR_OWVAR 21
6505: PUSH
6506: LD_EXP 21
6510: PUSH
6511: LD_VAR 0 3
6515: ARRAY
6516: ST_TO_ADDR
// uc_side := aktresp ;
6517: LD_ADDR_OWVAR 20
6521: PUSH
6522: LD_VAR 0 3
6526: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
6527: LD_ADDR_VAR 0 4
6531: PUSH
6532: LD_VAR 0 2
6536: PUSH
6537: LD_INT 1
6539: PPUSH
6540: LD_VAR 0 2
6544: PUSH
6545: LD_INT 0
6547: PLUS
6548: PPUSH
6549: CALL_OW 12
6553: ARRAY
6554: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
6555: LD_VAR 0 4
6559: PPUSH
6560: CALL_OW 266
6564: PUSH
6565: LD_INT 0
6567: PUSH
6568: LD_INT 1
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: IN
6575: IFFALSE 6587
// n = 25 else
6577: LD_ADDR_VAR 0 1
6581: PUSH
6582: LD_INT 25
6584: ST_TO_ADDR
6585: GO 6595
// n = 10 ;
6587: LD_ADDR_VAR 0 1
6591: PUSH
6592: LD_INT 10
6594: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
6595: CALL_OW 44
6599: PPUSH
6600: LD_VAR 0 4
6604: PPUSH
6605: CALL_OW 250
6609: PPUSH
6610: LD_VAR 0 4
6614: PPUSH
6615: CALL_OW 251
6619: PPUSH
6620: LD_VAR 0 1
6624: PPUSH
6625: LD_INT 1
6627: PPUSH
6628: CALL_OW 50
// end else
6632: GO 6635
// enable ;
6634: ENABLE
// end else
6635: GO 6638
// enable ;
6637: ENABLE
// end ;
6638: PPOPN 4
6640: END
// every 1 1$0 + 0 0$0.3 do
6641: GO 6643
6643: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
6644: LD_INT 4
6646: PPUSH
6647: LD_INT 5
6649: PPUSH
6650: CALL_OW 12
6654: PPUSH
6655: LD_INT 1
6657: PPUSH
6658: CALL_OW 57
// enable ;
6662: ENABLE
// end ;
6663: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
6664: GO 6666
6666: DISABLE
6667: LD_INT 0
6669: PPUSH
6670: PPUSH
// begin case tick of 1 .. 1 1$0 :
6671: LD_OWVAR 1
6675: PUSH
6676: LD_INT 1
6678: DOUBLE
6679: GREATEREQUAL
6680: IFFALSE 6688
6682: LD_INT 2100
6684: DOUBLE
6685: LESSEQUAL
6686: IFTRUE 6690
6688: GO 6718
6690: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$20 ) ) ; 1 1$0 + 1 .. 5 5$0 :
6691: LD_EXP 8
6695: PUSH
6696: LD_INT 100
6698: DIVREAL
6699: PUSH
6700: LD_INT 350
6702: PPUSH
6703: LD_INT 700
6705: PPUSH
6706: CALL_OW 12
6710: MUL
6711: PPUSH
6712: CALL_OW 67
6716: GO 7020
6718: LD_INT 2100
6720: PUSH
6721: LD_INT 1
6723: PLUS
6724: DOUBLE
6725: GREATEREQUAL
6726: IFFALSE 6734
6728: LD_INT 10500
6730: DOUBLE
6731: LESSEQUAL
6732: IFTRUE 6736
6734: GO 6764
6736: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$20 , 0 0$35 ) ) ; 5 5$0 + 1 .. 10 10$0 :
6737: LD_EXP 8
6741: PUSH
6742: LD_INT 100
6744: DIVREAL
6745: PUSH
6746: LD_INT 700
6748: PPUSH
6749: LD_INT 1225
6751: PPUSH
6752: CALL_OW 12
6756: MUL
6757: PPUSH
6758: CALL_OW 67
6762: GO 7020
6764: LD_INT 10500
6766: PUSH
6767: LD_INT 1
6769: PLUS
6770: DOUBLE
6771: GREATEREQUAL
6772: IFFALSE 6780
6774: LD_INT 21000
6776: DOUBLE
6777: LESSEQUAL
6778: IFTRUE 6782
6780: GO 6810
6782: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$35 , 0 0$50 ) ) ; 10 10$0 + 1 .. 20 20$0 :
6783: LD_EXP 8
6787: PUSH
6788: LD_INT 100
6790: DIVREAL
6791: PUSH
6792: LD_INT 1225
6794: PPUSH
6795: LD_INT 1750
6797: PPUSH
6798: CALL_OW 12
6802: MUL
6803: PPUSH
6804: CALL_OW 67
6808: GO 7020
6810: LD_INT 21000
6812: PUSH
6813: LD_INT 1
6815: PLUS
6816: DOUBLE
6817: GREATEREQUAL
6818: IFFALSE 6826
6820: LD_INT 42000
6822: DOUBLE
6823: LESSEQUAL
6824: IFTRUE 6828
6826: GO 6856
6828: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$10 ) ) ; 20 20$0 + 1 .. 30 30$0 :
6829: LD_EXP 8
6833: PUSH
6834: LD_INT 100
6836: DIVREAL
6837: PUSH
6838: LD_INT 1750
6840: PPUSH
6841: LD_INT 2450
6843: PPUSH
6844: CALL_OW 12
6848: MUL
6849: PPUSH
6850: CALL_OW 67
6854: GO 7020
6856: LD_INT 42000
6858: PUSH
6859: LD_INT 1
6861: PLUS
6862: DOUBLE
6863: GREATEREQUAL
6864: IFFALSE 6872
6866: LD_INT 63000
6868: DOUBLE
6869: LESSEQUAL
6870: IFTRUE 6874
6872: GO 6902
6874: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 30 30$0 + 1 .. 50 50$0 :
6875: LD_EXP 8
6879: PUSH
6880: LD_INT 100
6882: DIVREAL
6883: PUSH
6884: LD_INT 2450
6886: PPUSH
6887: LD_INT 2800
6889: PPUSH
6890: CALL_OW 12
6894: MUL
6895: PPUSH
6896: CALL_OW 67
6900: GO 7020
6902: LD_INT 63000
6904: PUSH
6905: LD_INT 1
6907: PLUS
6908: DOUBLE
6909: GREATEREQUAL
6910: IFFALSE 6918
6912: LD_INT 105000
6914: DOUBLE
6915: LESSEQUAL
6916: IFTRUE 6920
6918: GO 6948
6920: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$35 ) ) ; 50 50$0 + 1 .. 300 300$0 :
6921: LD_EXP 8
6925: PUSH
6926: LD_INT 100
6928: DIVREAL
6929: PUSH
6930: LD_INT 2800
6932: PPUSH
6933: LD_INT 3325
6935: PPUSH
6936: CALL_OW 12
6940: MUL
6941: PPUSH
6942: CALL_OW 67
6946: GO 7020
6948: LD_INT 105000
6950: PUSH
6951: LD_INT 1
6953: PLUS
6954: DOUBLE
6955: GREATEREQUAL
6956: IFFALSE 6964
6958: LD_INT 630000
6960: DOUBLE
6961: LESSEQUAL
6962: IFTRUE 6966
6964: GO 6994
6966: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$35 , 2 2$0 ) ) ; else
6967: LD_EXP 8
6971: PUSH
6972: LD_INT 100
6974: DIVREAL
6975: PUSH
6976: LD_INT 3325
6978: PPUSH
6979: LD_INT 4200
6981: PPUSH
6982: CALL_OW 12
6986: MUL
6987: PPUSH
6988: CALL_OW 67
6992: GO 7020
6994: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
6995: LD_EXP 8
6999: PUSH
7000: LD_INT 100
7002: DIVREAL
7003: PUSH
7004: LD_INT 4200
7006: PPUSH
7007: LD_INT 5250
7009: PPUSH
7010: CALL_OW 12
7014: MUL
7015: PPUSH
7016: CALL_OW 67
// amount := Rand ( 1 , 5 ) ;
7020: LD_ADDR_VAR 0 2
7024: PUSH
7025: LD_INT 1
7027: PPUSH
7028: LD_INT 5
7030: PPUSH
7031: CALL_OW 12
7035: ST_TO_ADDR
// for i = 1 to Side_Positions do
7036: LD_ADDR_VAR 0 1
7040: PUSH
7041: DOUBLE
7042: LD_INT 1
7044: DEC
7045: ST_TO_ADDR
7046: LD_EXP 20
7050: PUSH
7051: FOR_TO
7052: IFFALSE 7091
// if Side_Positions [ i ] then
7054: LD_EXP 20
7058: PUSH
7059: LD_VAR 0 1
7063: ARRAY
7064: IFFALSE 7089
// CreateCratesArea ( amount , BuildUpAreas [ i ] , true ) ;
7066: LD_VAR 0 2
7070: PPUSH
7071: LD_EXP 39
7075: PUSH
7076: LD_VAR 0 1
7080: ARRAY
7081: PPUSH
7082: LD_INT 1
7084: PPUSH
7085: CALL_OW 55
7089: GO 7051
7091: POP
7092: POP
// enable ;
7093: ENABLE
// end ; end_of_file
7094: PPOPN 2
7096: END
// var activated ; var hadziove ; every 0 0$1 do
7097: GO 7099
7099: DISABLE
// begin wait ( Rand ( 3 3$0 , 10 10$0 ) ) ;
7100: LD_INT 6300
7102: PPUSH
7103: LD_INT 21000
7105: PPUSH
7106: CALL_OW 12
7110: PPUSH
7111: CALL_OW 67
// SetAreaMapShow ( Tree , 1 ) ;
7115: LD_INT 3
7117: PPUSH
7118: LD_INT 1
7120: PPUSH
7121: CALL_OW 424
// activated := true ;
7125: LD_ADDR_LOC 12
7129: PUSH
7130: LD_INT 1
7132: ST_TO_ADDR
// end ;
7133: END
// every 0 0$1 trigger activated do var i , un ;
7134: LD_LOC 12
7138: IFFALSE 7383
7140: GO 7142
7142: DISABLE
7143: LD_INT 0
7145: PPUSH
7146: PPUSH
// begin if not def_tree_function then
7147: LD_EXP 1
7151: NOT
7152: IFFALSE 7156
// exit ;
7154: GO 7383
// ExtraStrings := [ #MultiSmall-Tree & def_tree_function ] ;
7156: LD_ADDR_EXP 58
7160: PUSH
7161: LD_STRING #MultiSmall-Tree
7163: PUSH
7164: LD_EXP 1
7168: STR
7169: PUSH
7170: EMPTY
7171: LIST
7172: ST_TO_ADDR
// for un in FilterUnitsInArea ( Tree , [ f_type , unit_human ] ) diff hadziove do
7173: LD_ADDR_VAR 0 2
7177: PUSH
7178: LD_INT 3
7180: PPUSH
7181: LD_INT 21
7183: PUSH
7184: LD_INT 1
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: PPUSH
7191: CALL_OW 70
7195: PUSH
7196: LD_LOC 13
7200: DIFF
7201: PUSH
7202: FOR_IN
7203: IFFALSE 7364
// begin if GetClass ( un ) in [ class_soldier , class_engineer , class_mechanic , class_scientistic , class_sniper , class_bazooker , class_mortar ] then
7205: LD_VAR 0 2
7209: PPUSH
7210: CALL_OW 257
7214: PUSH
7215: LD_INT 1
7217: PUSH
7218: LD_INT 2
7220: PUSH
7221: LD_INT 3
7223: PUSH
7224: LD_INT 4
7226: PUSH
7227: LD_INT 5
7229: PUSH
7230: LD_INT 9
7232: PUSH
7233: LD_INT 8
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: IN
7245: IFFALSE 7294
// for i := 1 to 4 do
7247: LD_ADDR_VAR 0 1
7251: PUSH
7252: DOUBLE
7253: LD_INT 1
7255: DEC
7256: ST_TO_ADDR
7257: LD_INT 4
7259: PUSH
7260: FOR_TO
7261: IFFALSE 7290
// GiveSkillBonus ( un , i , tree_function [ i ] ) else
7263: LD_VAR 0 2
7267: PPUSH
7268: LD_VAR 0 1
7272: PPUSH
7273: LD_EXP 14
7277: PUSH
7278: LD_VAR 0 1
7282: ARRAY
7283: PPUSH
7284: CALL_OW 238
7288: GO 7260
7290: POP
7291: POP
7292: GO 7362
// if un in [ class_apeman , class_apeman_engineer , class_apeman_kamikaze , class_apeman_soldier ] then
7294: LD_VAR 0 2
7298: PUSH
7299: LD_INT 12
7301: PUSH
7302: LD_INT 16
7304: PUSH
7305: LD_INT 17
7307: PUSH
7308: LD_INT 15
7310: PUSH
7311: EMPTY
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: IN
7317: IFFALSE 7362
// for i := 1 to 4 do
7319: LD_ADDR_VAR 0 1
7323: PUSH
7324: DOUBLE
7325: LD_INT 1
7327: DEC
7328: ST_TO_ADDR
7329: LD_INT 4
7331: PUSH
7332: FOR_TO
7333: IFFALSE 7360
// GiveSkillBonus ( un , i , tree_function [ 5 ] ) ;
7335: LD_VAR 0 2
7339: PPUSH
7340: LD_VAR 0 1
7344: PPUSH
7345: LD_EXP 14
7349: PUSH
7350: LD_INT 5
7352: ARRAY
7353: PPUSH
7354: CALL_OW 238
7358: GO 7332
7360: POP
7361: POP
// end ;
7362: GO 7202
7364: POP
7365: POP
// hadziove := hadziove ^ un ;
7366: LD_ADDR_LOC 13
7370: PUSH
7371: LD_LOC 13
7375: PUSH
7376: LD_VAR 0 2
7380: ADD
7381: ST_TO_ADDR
// enable ;
7382: ENABLE
// end ; end_of_file
7383: PPOPN 2
7385: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7386: LD_VAR 0 1
7390: PPUSH
7391: CALL_OW 266
7395: PUSH
7396: LD_INT 0
7398: PUSH
7399: LD_INT 1
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: IN
7406: IFFALSE 7431
// SetBName ( b , @ & GetSide ( b ) ) ;
7408: LD_VAR 0 1
7412: PPUSH
7413: LD_STRING @
7415: PUSH
7416: LD_VAR 0 1
7420: PPUSH
7421: CALL_OW 255
7425: STR
7426: PPUSH
7427: CALL_OW 500
// if def_game_rules then
7431: LD_EXP 42
7435: IFFALSE 7472
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
7437: LD_VAR 0 1
7441: PPUSH
7442: LD_VAR 0 1
7446: PPUSH
7447: CALL_OW 266
7451: PPUSH
7452: LD_VAR 0 1
7456: PPUSH
7457: CALL_OW 255
7461: PPUSH
7462: LD_INT 0
7464: PPUSH
7465: LD_INT 1
7467: PPUSH
7468: CALL 11495 0 5
// end ;
7472: PPOPN 2
7474: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7475: LD_VAR 0 1
7479: PPUSH
7480: CALL_OW 266
7484: PUSH
7485: LD_INT 0
7487: PUSH
7488: LD_INT 1
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: IN
7495: IFFALSE 7520
// SetBName ( b , @ & GetSide ( b ) ) ;
7497: LD_VAR 0 1
7501: PPUSH
7502: LD_STRING @
7504: PUSH
7505: LD_VAR 0 1
7509: PPUSH
7510: CALL_OW 255
7514: STR
7515: PPUSH
7516: CALL_OW 500
// if def_game_rules then
7520: LD_EXP 42
7524: IFFALSE 7563
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7526: LD_VAR 0 1
7530: PPUSH
7531: LD_VAR 0 1
7535: PPUSH
7536: CALL_OW 266
7540: PPUSH
7541: LD_VAR 0 1
7545: PPUSH
7546: CALL_OW 255
7550: PPUSH
7551: LD_VAR 0 2
7555: PPUSH
7556: LD_INT 1
7558: PPUSH
7559: CALL 11495 0 5
// end ;
7563: PPOPN 3
7565: END
// on VehicleConstructed ( veh , fac ) do var side ;
7566: LD_INT 0
7568: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7569: LD_VAR 0 1
7573: PPUSH
7574: CALL_OW 263
7578: PUSH
7579: LD_INT 5
7581: EQUAL
7582: IFFALSE 7724
// begin side := GetSide ( veh ) ;
7584: LD_ADDR_VAR 0 3
7588: PUSH
7589: LD_VAR 0 1
7593: PPUSH
7594: CALL_OW 255
7598: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7599: LD_ADDR_EXP 35
7603: PUSH
7604: LD_EXP 35
7608: PPUSH
7609: LD_VAR 0 3
7613: PPUSH
7614: LD_EXP 35
7618: PUSH
7619: LD_VAR 0 3
7623: ARRAY
7624: PPUSH
7625: LD_INT 52
7627: PUSH
7628: EMPTY
7629: LIST
7630: PPUSH
7631: CALL_OW 72
7635: PUSH
7636: LD_INT 22
7638: PUSH
7639: LD_VAR 0 3
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: PUSH
7648: LD_INT 2
7650: PUSH
7651: LD_INT 33
7653: PUSH
7654: LD_INT 5
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PUSH
7661: LD_INT 25
7663: PUSH
7664: LD_INT 12
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: PUSH
7671: LD_INT 25
7673: PUSH
7674: LD_INT 15
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PUSH
7681: LD_INT 25
7683: PUSH
7684: LD_INT 16
7686: PUSH
7687: EMPTY
7688: LIST
7689: LIST
7690: PUSH
7691: LD_INT 25
7693: PUSH
7694: LD_INT 17
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: PUSH
7701: EMPTY
7702: LIST
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PPUSH
7713: CALL_OW 69
7717: UNION
7718: PPUSH
7719: CALL_OW 1
7723: ST_TO_ADDR
// end ; end ;
7724: PPOPN 3
7726: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7727: LD_INT 0
7729: PPUSH
7730: PPUSH
7731: PPUSH
7732: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7733: LD_VAR 0 1
7737: PPUSH
7738: CALL_OW 257
7742: PUSH
7743: LD_INT 12
7745: PUSH
7746: LD_INT 15
7748: PUSH
7749: LD_INT 17
7751: PUSH
7752: LD_INT 16
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: IN
7761: PUSH
7762: LD_VAR 0 1
7766: PPUSH
7767: CALL_OW 263
7771: PUSH
7772: LD_INT 5
7774: EQUAL
7775: OR
7776: IFFALSE 7787
// ApeKilled ( j ) ;
7778: LD_VAR 0 1
7782: PPUSH
7783: CALL 5887 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7787: LD_VAR 0 1
7791: PPUSH
7792: CALL_OW 266
7796: PUSH
7797: LD_INT 0
7799: PUSH
7800: LD_INT 1
7802: PUSH
7803: EMPTY
7804: LIST
7805: LIST
7806: IN
7807: IFFALSE 7889
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7809: LD_ADDR_VAR 0 4
7813: PUSH
7814: LD_EXP 20
7818: PUSH
7819: LD_VAR 0 1
7823: PPUSH
7824: CALL_OW 255
7828: ARRAY
7829: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7830: LD_ADDR_VAR 0 2
7834: PUSH
7835: LD_EXP 26
7839: PUSH
7840: LD_VAR 0 4
7844: ARRAY
7845: PUSH
7846: LD_INT 1
7848: ARRAY
7849: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7850: LD_ADDR_VAR 0 3
7854: PUSH
7855: LD_EXP 26
7859: PUSH
7860: LD_VAR 0 4
7864: ARRAY
7865: PUSH
7866: LD_INT 2
7868: ARRAY
7869: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7870: LD_VAR 0 2
7874: PPUSH
7875: LD_VAR 0 3
7879: PPUSH
7880: CALL_OW 420
7884: PPUSH
7885: CALL_OW 419
// end ; if def_game_rules then
7889: LD_EXP 42
7893: IFFALSE 7992
// if ( GetType ( j ) = 3 ) then
7895: LD_VAR 0 1
7899: PPUSH
7900: CALL_OW 247
7904: PUSH
7905: LD_INT 3
7907: EQUAL
7908: IFFALSE 7948
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7910: LD_VAR 0 1
7914: PPUSH
7915: LD_VAR 0 1
7919: PPUSH
7920: CALL_OW 266
7924: PPUSH
7925: LD_VAR 0 1
7929: PPUSH
7930: CALL_OW 255
7934: PPUSH
7935: LD_INT 0
7937: PPUSH
7938: LD_INT 1
7940: NEG
7941: PPUSH
7942: CALL 11495 0 5
7946: GO 7992
// if ( GetChassis ( j ) = 25 ) then
7948: LD_VAR 0 1
7952: PPUSH
7953: CALL_OW 265
7957: PUSH
7958: LD_INT 25
7960: EQUAL
7961: IFFALSE 7992
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7963: LD_VAR 0 1
7967: PPUSH
7968: LD_INT 37
7970: PPUSH
7971: LD_VAR 0 1
7975: PPUSH
7976: CALL_OW 255
7980: PPUSH
7981: LD_INT 0
7983: PPUSH
7984: LD_INT 1
7986: NEG
7987: PPUSH
7988: CALL 11495 0 5
// end ;
7992: PPOPN 5
7994: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7995: LD_EXP 42
7999: PUSH
8000: LD_VAR 0 1
8004: PPUSH
8005: CALL_OW 265
8009: PUSH
8010: LD_INT 25
8012: EQUAL
8013: AND
8014: IFFALSE 8046
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
8016: LD_VAR 0 1
8020: PPUSH
8021: LD_INT 37
8023: PPUSH
8024: LD_VAR 0 1
8028: PPUSH
8029: CALL_OW 255
8033: PPUSH
8034: LD_VAR 0 3
8038: PPUSH
8039: LD_INT 1
8041: PPUSH
8042: CALL 11495 0 5
// end ;
8046: PPOPN 4
8048: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
8049: LD_VAR 0 1
8053: PPUSH
8054: LD_VAR 0 2
8058: PPUSH
8059: LD_VAR 0 3
8063: PPUSH
8064: LD_OWVAR 2
8068: PPUSH
8069: CALL 12240 0 4
8073: PPOPN 3
8075: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
8076: LD_INT 0
8078: PPUSH
8079: PPUSH
// for un in battle_flags_id do
8080: LD_ADDR_VAR 0 2
8084: PUSH
8085: LD_EXP 27
8089: PUSH
8090: FOR_IN
8091: IFFALSE 8166
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
8093: LD_VAR 0 2
8097: PPUSH
8098: LD_INT 1
8100: PUSH
8101: LD_LOC 14
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: PUSH
8110: LD_INT 2
8112: PUSH
8113: LD_LOC 14
8117: PUSH
8118: LD_INT 2
8120: DIV
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: PUSH
8126: LD_INT 3
8128: PUSH
8129: LD_LOC 14
8133: PUSH
8134: LD_INT 5
8136: DIV
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: PUSH
8142: LD_INT 20
8144: PUSH
8145: LD_LOC 14
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: PPUSH
8160: CALL_OW 423
8164: GO 8090
8166: POP
8167: POP
// end ;
8168: LD_VAR 0 1
8172: RET
// every 0 0$0.1 do var un ;
8173: GO 8175
8175: DISABLE
8176: LD_INT 0
8178: PPUSH
// begin if not def_morale_flags then
8179: LD_EXP 51
8183: NOT
8184: IFFALSE 8188
// exit ;
8186: GO 8265
// if not morale_decreasing_time then
8188: LD_EXP 9
8192: NOT
8193: IFFALSE 8197
// exit ;
8195: GO 8265
// strength = 100 ;
8197: LD_ADDR_LOC 14
8201: PUSH
8202: LD_INT 100
8204: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8205: LD_EXP 9
8209: PPUSH
8210: CALL_OW 67
// strength := strength - 1 ;
8214: LD_ADDR_LOC 14
8218: PUSH
8219: LD_LOC 14
8223: PUSH
8224: LD_INT 1
8226: MINUS
8227: ST_TO_ADDR
// Update_Flags ;
8228: CALL 8076 0 0
// until not strength ;
8232: LD_LOC 14
8236: NOT
8237: IFFALSE 8205
// for un in battle_flags_id do
8239: LD_ADDR_VAR 0 1
8243: PUSH
8244: LD_EXP 27
8248: PUSH
8249: FOR_IN
8250: IFFALSE 8263
// KillBattleFlag ( un ) ;
8252: LD_VAR 0 1
8256: PPUSH
8257: CALL_OW 419
8261: GO 8249
8263: POP
8264: POP
// end ; end_of_file
8265: PPOPN 1
8267: END
// export BuildUpAreas ; export buildUpTimeActive ; export function BeginBuildUp ; var i , j ; begin
8268: LD_INT 0
8270: PPUSH
8271: PPUSH
8272: PPUSH
// buildUpTimeActive := true ;
8273: LD_ADDR_EXP 40
8277: PUSH
8278: LD_INT 1
8280: ST_TO_ADDR
// for i := 1 to BuildUpAreas do
8281: LD_ADDR_VAR 0 2
8285: PUSH
8286: DOUBLE
8287: LD_INT 1
8289: DEC
8290: ST_TO_ADDR
8291: LD_EXP 39
8295: PUSH
8296: FOR_TO
8297: IFFALSE 8452
// if Position_Sides [ i ] then
8299: LD_EXP 23
8303: PUSH
8304: LD_VAR 0 2
8308: ARRAY
8309: IFFALSE 8450
// for j := 1 to 8 do
8311: LD_ADDR_VAR 0 3
8315: PUSH
8316: DOUBLE
8317: LD_INT 1
8319: DEC
8320: ST_TO_ADDR
8321: LD_INT 8
8323: PUSH
8324: FOR_TO
8325: IFFALSE 8448
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
8327: LD_EXP 20
8331: PUSH
8332: LD_VAR 0 3
8336: ARRAY
8337: PUSH
8338: LD_EXP 17
8342: PUSH
8343: LD_EXP 23
8347: PUSH
8348: LD_VAR 0 2
8352: ARRAY
8353: ARRAY
8354: PUSH
8355: LD_EXP 17
8359: PUSH
8360: LD_VAR 0 3
8364: ARRAY
8365: NONEQUAL
8366: PUSH
8367: LD_EXP 22
8371: NOT
8372: PUSH
8373: LD_EXP 23
8377: PUSH
8378: LD_VAR 0 2
8382: ARRAY
8383: PUSH
8384: LD_VAR 0 3
8388: NONEQUAL
8389: AND
8390: OR
8391: AND
8392: IFFALSE 8416
// HideArea ( j , BuildUpAreas [ i ] ) else
8394: LD_VAR 0 3
8398: PPUSH
8399: LD_EXP 39
8403: PUSH
8404: LD_VAR 0 2
8408: ARRAY
8409: PPUSH
8410: CALL_OW 333
8414: GO 8446
// if ( j = your_side ) then
8416: LD_VAR 0 3
8420: PUSH
8421: LD_OWVAR 2
8425: EQUAL
8426: IFFALSE 8446
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
8428: LD_EXP 39
8432: PUSH
8433: LD_VAR 0 2
8437: ARRAY
8438: PPUSH
8439: LD_INT 5
8441: PPUSH
8442: CALL_OW 424
8446: GO 8324
8448: POP
8449: POP
8450: GO 8296
8452: POP
8453: POP
// end ;
8454: LD_VAR 0 1
8458: RET
// export function EndBuildUp ; var i , j ; begin
8459: LD_INT 0
8461: PPUSH
8462: PPUSH
8463: PPUSH
// buildUpTimeActive := false ;
8464: LD_ADDR_EXP 40
8468: PUSH
8469: LD_INT 0
8471: ST_TO_ADDR
// for i := 1 to BuildUpAreas do
8472: LD_ADDR_VAR 0 2
8476: PUSH
8477: DOUBLE
8478: LD_INT 1
8480: DEC
8481: ST_TO_ADDR
8482: LD_EXP 39
8486: PUSH
8487: FOR_TO
8488: IFFALSE 8643
// if Position_Sides [ i ] then
8490: LD_EXP 23
8494: PUSH
8495: LD_VAR 0 2
8499: ARRAY
8500: IFFALSE 8641
// for j := 1 to 8 do
8502: LD_ADDR_VAR 0 3
8506: PUSH
8507: DOUBLE
8508: LD_INT 1
8510: DEC
8511: ST_TO_ADDR
8512: LD_INT 8
8514: PUSH
8515: FOR_TO
8516: IFFALSE 8639
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
8518: LD_EXP 20
8522: PUSH
8523: LD_VAR 0 3
8527: ARRAY
8528: PUSH
8529: LD_EXP 17
8533: PUSH
8534: LD_EXP 23
8538: PUSH
8539: LD_VAR 0 2
8543: ARRAY
8544: ARRAY
8545: PUSH
8546: LD_EXP 17
8550: PUSH
8551: LD_VAR 0 3
8555: ARRAY
8556: NONEQUAL
8557: PUSH
8558: LD_EXP 22
8562: NOT
8563: PUSH
8564: LD_EXP 23
8568: PUSH
8569: LD_VAR 0 2
8573: ARRAY
8574: PUSH
8575: LD_VAR 0 3
8579: NONEQUAL
8580: AND
8581: OR
8582: AND
8583: IFFALSE 8607
// ShowArea ( j , BuildUpAreas [ i ] ) else
8585: LD_VAR 0 3
8589: PPUSH
8590: LD_EXP 39
8594: PUSH
8595: LD_VAR 0 2
8599: ARRAY
8600: PPUSH
8601: CALL_OW 334
8605: GO 8637
// if ( j = your_side ) then
8607: LD_VAR 0 3
8611: PUSH
8612: LD_OWVAR 2
8616: EQUAL
8617: IFFALSE 8637
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
8619: LD_EXP 39
8623: PUSH
8624: LD_VAR 0 2
8628: ARRAY
8629: PPUSH
8630: LD_INT 0
8632: PPUSH
8633: CALL_OW 424
8637: GO 8515
8639: POP
8640: POP
8641: GO 8487
8643: POP
8644: POP
// end ;
8645: LD_VAR 0 1
8649: RET
// every 5 trigger buildUpTimeActive do var i , un ;
8650: LD_EXP 40
8654: IFFALSE 8837
8656: GO 8658
8658: DISABLE
8659: LD_INT 0
8661: PPUSH
8662: PPUSH
// begin for i := 1 to BuildUpAreas do
8663: LD_ADDR_VAR 0 1
8667: PUSH
8668: DOUBLE
8669: LD_INT 1
8671: DEC
8672: ST_TO_ADDR
8673: LD_EXP 39
8677: PUSH
8678: FOR_TO
8679: IFFALSE 8834
// if Position_Sides [ i ] then
8681: LD_EXP 23
8685: PUSH
8686: LD_VAR 0 1
8690: ARRAY
8691: IFFALSE 8832
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
8693: LD_ADDR_VAR 0 2
8697: PUSH
8698: LD_EXP 39
8702: PUSH
8703: LD_VAR 0 1
8707: ARRAY
8708: PPUSH
8709: LD_INT 2
8711: PUSH
8712: LD_INT 21
8714: PUSH
8715: LD_INT 1
8717: PUSH
8718: EMPTY
8719: LIST
8720: LIST
8721: PUSH
8722: LD_INT 21
8724: PUSH
8725: LD_INT 2
8727: PUSH
8728: EMPTY
8729: LIST
8730: LIST
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: LIST
8736: PUSH
8737: LD_INT 22
8739: PUSH
8740: LD_OWVAR 2
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: PPUSH
8753: CALL_OW 70
8757: PUSH
8758: FOR_IN
8759: IFFALSE 8830
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
8761: LD_EXP 17
8765: PUSH
8766: LD_EXP 23
8770: PUSH
8771: LD_VAR 0 1
8775: ARRAY
8776: ARRAY
8777: PUSH
8778: LD_EXP 17
8782: PUSH
8783: LD_OWVAR 2
8787: ARRAY
8788: NONEQUAL
8789: PUSH
8790: LD_EXP 22
8794: NOT
8795: PUSH
8796: LD_EXP 23
8800: PUSH
8801: LD_VAR 0 1
8805: ARRAY
8806: PUSH
8807: LD_OWVAR 2
8811: NONEQUAL
8812: AND
8813: OR
8814: IFFALSE 8828
// ComMoveToArea ( un , BuildUpEscape ) ;
8816: LD_VAR 0 2
8820: PPUSH
8821: LD_INT 12
8823: PPUSH
8824: CALL_OW 113
8828: GO 8758
8830: POP
8831: POP
8832: GO 8678
8834: POP
8835: POP
// enable ;
8836: ENABLE
// end ;
8837: PPOPN 2
8839: END
// every 0 0$1 trigger def_builduptime do
8840: LD_EXP 56
8844: IFFALSE 8870
8846: GO 8848
8848: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
8849: LD_INT 8400
8851: PUSH
8852: LD_EXP 56
8856: PUSH
8857: LD_INT 2100
8859: MUL
8860: PLUS
8861: PPUSH
8862: CALL_OW 67
// EndBuildUp ;
8866: CALL 8459 0 0
// end ; end_of_file
8870: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
8871: LD_INT 0
8873: PPUSH
8874: PPUSH
// if ( not IAmSpec ) then
8875: CALL_OW 531
8879: NOT
8880: IFFALSE 8896
// Result := Limits_Info ^  ;
8882: LD_ADDR_VAR 0 1
8886: PUSH
8887: LD_LOC 26
8891: PUSH
8892: LD_STRING 
8894: ADD
8895: ST_TO_ADDR
// for i := 1 to 8 do
8896: LD_ADDR_VAR 0 2
8900: PUSH
8901: DOUBLE
8902: LD_INT 1
8904: DEC
8905: ST_TO_ADDR
8906: LD_INT 8
8908: PUSH
8909: FOR_TO
8910: IFFALSE 8955
// if Cheaters [ i ] then
8912: LD_LOC 27
8916: PUSH
8917: LD_VAR 0 2
8921: ARRAY
8922: IFFALSE 8953
// Result := Result ^ [ #Cheater , i , i ] ;
8924: LD_ADDR_VAR 0 1
8928: PUSH
8929: LD_VAR 0 1
8933: PUSH
8934: LD_STRING #Cheater
8936: PUSH
8937: LD_VAR 0 2
8941: PUSH
8942: LD_VAR 0 2
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: LIST
8951: ADD
8952: ST_TO_ADDR
8953: GO 8909
8955: POP
8956: POP
// end ;
8957: LD_VAR 0 1
8961: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
8962: LD_INT 0
8964: PPUSH
8965: PPUSH
8966: PPUSH
8967: PPUSH
8968: PPUSH
// case Game_Type of 10 :
8969: LD_EXP 41
8973: PUSH
8974: LD_INT 10
8976: DOUBLE
8977: EQUAL
8978: IFTRUE 8982
8980: GO 8993
8982: POP
// def_game_rules := 1 ; 11 :
8983: LD_ADDR_EXP 42
8987: PUSH
8988: LD_INT 1
8990: ST_TO_ADDR
8991: GO 9013
8993: LD_INT 11
8995: DOUBLE
8996: EQUAL
8997: IFTRUE 9001
8999: GO 9012
9001: POP
// def_game_rules := 3 ; end ;
9002: LD_ADDR_EXP 42
9006: PUSH
9007: LD_INT 3
9009: ST_TO_ADDR
9010: GO 9013
9012: POP
// case def_game_rules of 0 :
9013: LD_EXP 42
9017: PUSH
9018: LD_INT 0
9020: DOUBLE
9021: EQUAL
9022: IFTRUE 9026
9024: GO 9031
9026: POP
// exit ; 1 :
9027: GO 11089
9029: GO 10989
9031: LD_INT 1
9033: DOUBLE
9034: EQUAL
9035: IFTRUE 9039
9037: GO 9255
9039: POP
// begin def_base_level := 2 ;
9040: LD_ADDR_EXP 43
9044: PUSH
9045: LD_INT 2
9047: ST_TO_ADDR
// def_amount_of_people := 2 ;
9048: LD_ADDR_EXP 44
9052: PUSH
9053: LD_INT 2
9055: ST_TO_ADDR
// def_skill_level := 1 ;
9056: LD_ADDR_EXP 45
9060: PUSH
9061: LD_INT 1
9063: ST_TO_ADDR
// def_starting_resources := 2 ;
9064: LD_ADDR_EXP 46
9068: PUSH
9069: LD_INT 2
9071: ST_TO_ADDR
// def_shipments_density := 1 ;
9072: LD_ADDR_EXP 47
9076: PUSH
9077: LD_INT 1
9079: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9080: LD_ADDR_EXP 48
9084: PUSH
9085: LD_INT 0
9087: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9088: LD_ADDR_EXP 49
9092: PUSH
9093: LD_INT 1
9095: ST_TO_ADDR
// def_shared_vision := 1 ;
9096: LD_ADDR_EXP 50
9100: PUSH
9101: LD_INT 1
9103: ST_TO_ADDR
// def_morale_flags := 3 ;
9104: LD_ADDR_EXP 51
9108: PUSH
9109: LD_INT 3
9111: ST_TO_ADDR
// def_siberite_detection := 1 ;
9112: LD_ADDR_EXP 52
9116: PUSH
9117: LD_INT 1
9119: ST_TO_ADDR
// def_people_respawning := 1 ;
9120: LD_ADDR_EXP 53
9124: PUSH
9125: LD_INT 1
9127: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9128: LD_ADDR_EXP 54
9132: PUSH
9133: LD_INT 1
9135: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9136: LD_ADDR_EXP 55
9140: PUSH
9141: LD_INT 0
9143: ST_TO_ADDR
// def_builduptime := 2 ;
9144: LD_ADDR_EXP 56
9148: PUSH
9149: LD_INT 2
9151: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
9152: LD_ADDR_VAR 0 2
9156: PUSH
9157: EMPTY
9158: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9159: LD_ADDR_VAR 0 3
9163: PUSH
9164: EMPTY
9165: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9166: LD_ADDR_LOC 21
9170: PUSH
9171: EMPTY
9172: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9173: LD_ADDR_LOC 22
9177: PUSH
9178: EMPTY
9179: ST_TO_ADDR
// Banned_Controls := [ ] ;
9180: LD_ADDR_LOC 23
9184: PUSH
9185: EMPTY
9186: ST_TO_ADDR
// Banned_Engines := [ ] ;
9187: LD_ADDR_LOC 24
9191: PUSH
9192: EMPTY
9193: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9194: LD_ADDR_LOC 19
9198: PUSH
9199: LD_INT 37
9201: PUSH
9202: EMPTY
9203: LIST
9204: PUSH
9205: LD_INT 4
9207: PUSH
9208: LD_INT 5
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: PUSH
9215: LD_INT 31
9217: PUSH
9218: LD_INT 32
9220: PUSH
9221: LD_INT 33
9223: PUSH
9224: EMPTY
9225: LIST
9226: LIST
9227: LIST
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: LIST
9233: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
9234: LD_ADDR_LOC 20
9238: PUSH
9239: LD_INT 2
9241: PUSH
9242: LD_INT 2
9244: PUSH
9245: LD_INT 4
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: LIST
9252: ST_TO_ADDR
// end ; 2 :
9253: GO 10989
9255: LD_INT 2
9257: DOUBLE
9258: EQUAL
9259: IFTRUE 9263
9261: GO 9472
9263: POP
// begin def_base_level := 1 ;
9264: LD_ADDR_EXP 43
9268: PUSH
9269: LD_INT 1
9271: ST_TO_ADDR
// def_amount_of_people := 2 ;
9272: LD_ADDR_EXP 44
9276: PUSH
9277: LD_INT 2
9279: ST_TO_ADDR
// def_skill_level := 3 ;
9280: LD_ADDR_EXP 45
9284: PUSH
9285: LD_INT 3
9287: ST_TO_ADDR
// def_starting_resources := 3 ;
9288: LD_ADDR_EXP 46
9292: PUSH
9293: LD_INT 3
9295: ST_TO_ADDR
// def_shipments_density := 2 ;
9296: LD_ADDR_EXP 47
9300: PUSH
9301: LD_INT 2
9303: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9304: LD_ADDR_EXP 48
9308: PUSH
9309: LD_INT 1
9311: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9312: LD_ADDR_EXP 49
9316: PUSH
9317: LD_INT 2
9319: ST_TO_ADDR
// def_shared_vision := 1 ;
9320: LD_ADDR_EXP 50
9324: PUSH
9325: LD_INT 1
9327: ST_TO_ADDR
// def_morale_flags := 0 ;
9328: LD_ADDR_EXP 51
9332: PUSH
9333: LD_INT 0
9335: ST_TO_ADDR
// def_siberite_detection := 1 ;
9336: LD_ADDR_EXP 52
9340: PUSH
9341: LD_INT 1
9343: ST_TO_ADDR
// def_people_respawning := 0 ;
9344: LD_ADDR_EXP 53
9348: PUSH
9349: LD_INT 0
9351: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
9352: LD_ADDR_EXP 54
9356: PUSH
9357: LD_INT 0
9359: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9360: LD_ADDR_EXP 55
9364: PUSH
9365: LD_INT 0
9367: ST_TO_ADDR
// def_builduptime := 2 ;
9368: LD_ADDR_EXP 56
9372: PUSH
9373: LD_INT 2
9375: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
9376: LD_ADDR_VAR 0 2
9380: PUSH
9381: LD_INT 1
9383: PUSH
9384: EMPTY
9385: LIST
9386: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9387: LD_ADDR_VAR 0 3
9391: PUSH
9392: EMPTY
9393: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9394: LD_ADDR_LOC 21
9398: PUSH
9399: EMPTY
9400: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9401: LD_ADDR_LOC 22
9405: PUSH
9406: EMPTY
9407: ST_TO_ADDR
// Banned_Controls := [ ] ;
9408: LD_ADDR_LOC 23
9412: PUSH
9413: EMPTY
9414: ST_TO_ADDR
// Banned_Engines := [ ] ;
9415: LD_ADDR_LOC 24
9419: PUSH
9420: EMPTY
9421: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9422: LD_ADDR_LOC 19
9426: PUSH
9427: LD_INT 4
9429: PUSH
9430: LD_INT 5
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: PUSH
9437: LD_INT 31
9439: PUSH
9440: LD_INT 32
9442: PUSH
9443: LD_INT 33
9445: PUSH
9446: EMPTY
9447: LIST
9448: LIST
9449: LIST
9450: PUSH
9451: EMPTY
9452: LIST
9453: LIST
9454: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
9455: LD_ADDR_LOC 20
9459: PUSH
9460: LD_INT 1
9462: PUSH
9463: LD_INT 2
9465: PUSH
9466: EMPTY
9467: LIST
9468: LIST
9469: ST_TO_ADDR
// end ; 3 :
9470: GO 10989
9472: LD_INT 3
9474: DOUBLE
9475: EQUAL
9476: IFTRUE 9480
9478: GO 9723
9480: POP
// begin def_base_level := 1 ;
9481: LD_ADDR_EXP 43
9485: PUSH
9486: LD_INT 1
9488: ST_TO_ADDR
// def_amount_of_people := 2 ;
9489: LD_ADDR_EXP 44
9493: PUSH
9494: LD_INT 2
9496: ST_TO_ADDR
// def_skill_level := 3 ;
9497: LD_ADDR_EXP 45
9501: PUSH
9502: LD_INT 3
9504: ST_TO_ADDR
// def_starting_resources := 3 ;
9505: LD_ADDR_EXP 46
9509: PUSH
9510: LD_INT 3
9512: ST_TO_ADDR
// def_shipments_density := 1 ;
9513: LD_ADDR_EXP 47
9517: PUSH
9518: LD_INT 1
9520: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9521: LD_ADDR_EXP 48
9525: PUSH
9526: LD_INT 0
9528: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9529: LD_ADDR_EXP 49
9533: PUSH
9534: LD_INT 1
9536: ST_TO_ADDR
// def_shared_vision := 1 ;
9537: LD_ADDR_EXP 50
9541: PUSH
9542: LD_INT 1
9544: ST_TO_ADDR
// def_morale_flags := 0 ;
9545: LD_ADDR_EXP 51
9549: PUSH
9550: LD_INT 0
9552: ST_TO_ADDR
// def_siberite_detection := 1 ;
9553: LD_ADDR_EXP 52
9557: PUSH
9558: LD_INT 1
9560: ST_TO_ADDR
// def_people_respawning := 0 ;
9561: LD_ADDR_EXP 53
9565: PUSH
9566: LD_INT 0
9568: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
9569: LD_ADDR_EXP 54
9573: PUSH
9574: LD_INT 2
9576: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9577: LD_ADDR_EXP 55
9581: PUSH
9582: LD_INT 0
9584: ST_TO_ADDR
// def_builduptime := 1 ;
9585: LD_ADDR_EXP 56
9589: PUSH
9590: LD_INT 1
9592: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9593: LD_ADDR_VAR 0 2
9597: PUSH
9598: LD_INT 23
9600: PUSH
9601: EMPTY
9602: LIST
9603: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
9604: LD_ADDR_VAR 0 3
9608: PUSH
9609: LD_INT 2
9611: PUSH
9612: LD_INT 37
9614: PUSH
9615: LD_INT 32
9617: PUSH
9618: LD_INT 33
9620: PUSH
9621: LD_INT 36
9623: PUSH
9624: LD_INT 16
9626: PUSH
9627: LD_INT 23
9629: PUSH
9630: LD_INT 21
9632: PUSH
9633: LD_INT 18
9635: PUSH
9636: LD_INT 22
9638: PUSH
9639: LD_INT 20
9641: PUSH
9642: LD_INT 19
9644: PUSH
9645: LD_INT 25
9647: PUSH
9648: LD_INT 17
9650: PUSH
9651: LD_INT 24
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9671: LD_ADDR_LOC 21
9675: PUSH
9676: EMPTY
9677: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9678: LD_ADDR_LOC 22
9682: PUSH
9683: EMPTY
9684: ST_TO_ADDR
// Banned_Controls := [ ] ;
9685: LD_ADDR_LOC 23
9689: PUSH
9690: EMPTY
9691: ST_TO_ADDR
// Banned_Engines := [ ] ;
9692: LD_ADDR_LOC 24
9696: PUSH
9697: EMPTY
9698: ST_TO_ADDR
// Restricted_Builds := [ ] ;
9699: LD_ADDR_LOC 19
9703: PUSH
9704: EMPTY
9705: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
9706: LD_ADDR_LOC 20
9710: PUSH
9711: EMPTY
9712: ST_TO_ADDR
// No_Mechs := true ;
9713: LD_ADDR_EXP 57
9717: PUSH
9718: LD_INT 1
9720: ST_TO_ADDR
// end ; 4 :
9721: GO 10989
9723: LD_INT 4
9725: DOUBLE
9726: EQUAL
9727: IFTRUE 9731
9729: GO 9906
9731: POP
// begin def_base_level := 1 ;
9732: LD_ADDR_EXP 43
9736: PUSH
9737: LD_INT 1
9739: ST_TO_ADDR
// def_amount_of_people := 2 ;
9740: LD_ADDR_EXP 44
9744: PUSH
9745: LD_INT 2
9747: ST_TO_ADDR
// def_skill_level := 3 ;
9748: LD_ADDR_EXP 45
9752: PUSH
9753: LD_INT 3
9755: ST_TO_ADDR
// def_starting_resources := 3 ;
9756: LD_ADDR_EXP 46
9760: PUSH
9761: LD_INT 3
9763: ST_TO_ADDR
// def_shipments_density := 2 ;
9764: LD_ADDR_EXP 47
9768: PUSH
9769: LD_INT 2
9771: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9772: LD_ADDR_EXP 48
9776: PUSH
9777: LD_INT 1
9779: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9780: LD_ADDR_EXP 49
9784: PUSH
9785: LD_INT 2
9787: ST_TO_ADDR
// def_shared_vision := 1 ;
9788: LD_ADDR_EXP 50
9792: PUSH
9793: LD_INT 1
9795: ST_TO_ADDR
// def_morale_flags := 0 ;
9796: LD_ADDR_EXP 51
9800: PUSH
9801: LD_INT 0
9803: ST_TO_ADDR
// def_siberite_detection := 1 ;
9804: LD_ADDR_EXP 52
9808: PUSH
9809: LD_INT 1
9811: ST_TO_ADDR
// def_people_respawning := 0 ;
9812: LD_ADDR_EXP 53
9816: PUSH
9817: LD_INT 0
9819: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
9820: LD_ADDR_EXP 54
9824: PUSH
9825: LD_INT 0
9827: ST_TO_ADDR
// def_siberite_bomb := 1 ;
9828: LD_ADDR_EXP 55
9832: PUSH
9833: LD_INT 1
9835: ST_TO_ADDR
// def_builduptime := 3 ;
9836: LD_ADDR_EXP 56
9840: PUSH
9841: LD_INT 3
9843: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
9844: LD_ADDR_VAR 0 2
9848: PUSH
9849: LD_INT 1
9851: PUSH
9852: EMPTY
9853: LIST
9854: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9855: LD_ADDR_VAR 0 3
9859: PUSH
9860: EMPTY
9861: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9862: LD_ADDR_LOC 21
9866: PUSH
9867: EMPTY
9868: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9869: LD_ADDR_LOC 22
9873: PUSH
9874: EMPTY
9875: ST_TO_ADDR
// Banned_Controls := [ ] ;
9876: LD_ADDR_LOC 23
9880: PUSH
9881: EMPTY
9882: ST_TO_ADDR
// Banned_Engines := [ ] ;
9883: LD_ADDR_LOC 24
9887: PUSH
9888: EMPTY
9889: ST_TO_ADDR
// Restricted_Builds := [ ] ;
9890: LD_ADDR_LOC 19
9894: PUSH
9895: EMPTY
9896: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
9897: LD_ADDR_LOC 20
9901: PUSH
9902: EMPTY
9903: ST_TO_ADDR
// end ; 5 :
9904: GO 10989
9906: LD_INT 5
9908: DOUBLE
9909: EQUAL
9910: IFTRUE 9914
9912: GO 10163
9914: POP
// begin def_base_level := 0 ;
9915: LD_ADDR_EXP 43
9919: PUSH
9920: LD_INT 0
9922: ST_TO_ADDR
// def_amount_of_people := 0 ;
9923: LD_ADDR_EXP 44
9927: PUSH
9928: LD_INT 0
9930: ST_TO_ADDR
// def_skill_level := 0 ;
9931: LD_ADDR_EXP 45
9935: PUSH
9936: LD_INT 0
9938: ST_TO_ADDR
// def_starting_resources := 0 ;
9939: LD_ADDR_EXP 46
9943: PUSH
9944: LD_INT 0
9946: ST_TO_ADDR
// def_shipments_density := 0 ;
9947: LD_ADDR_EXP 47
9951: PUSH
9952: LD_INT 0
9954: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9955: LD_ADDR_EXP 48
9959: PUSH
9960: LD_INT 0
9962: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
9963: LD_ADDR_EXP 49
9967: PUSH
9968: LD_INT 0
9970: ST_TO_ADDR
// def_shared_vision := 1 ;
9971: LD_ADDR_EXP 50
9975: PUSH
9976: LD_INT 1
9978: ST_TO_ADDR
// def_morale_flags := 0 ;
9979: LD_ADDR_EXP 51
9983: PUSH
9984: LD_INT 0
9986: ST_TO_ADDR
// def_siberite_detection := 0 ;
9987: LD_ADDR_EXP 52
9991: PUSH
9992: LD_INT 0
9994: ST_TO_ADDR
// def_people_respawning := 1 ;
9995: LD_ADDR_EXP 53
9999: PUSH
10000: LD_INT 1
10002: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10003: LD_ADDR_EXP 54
10007: PUSH
10008: LD_INT 1
10010: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10011: LD_ADDR_EXP 55
10015: PUSH
10016: LD_INT 0
10018: ST_TO_ADDR
// def_builduptime := 0 ;
10019: LD_ADDR_EXP 56
10023: PUSH
10024: LD_INT 0
10026: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
10027: LD_ADDR_VAR 0 2
10031: PUSH
10032: LD_INT 10
10034: PUSH
10035: LD_INT 3
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
10042: LD_ADDR_VAR 0 3
10046: PUSH
10047: LD_INT 12
10049: PUSH
10050: LD_INT 11
10052: PUSH
10053: LD_INT 14
10055: PUSH
10056: LD_INT 13
10058: PUSH
10059: LD_INT 5
10061: PUSH
10062: LD_INT 24
10064: PUSH
10065: LD_INT 21
10067: PUSH
10068: LD_INT 33
10070: PUSH
10071: LD_INT 36
10073: PUSH
10074: EMPTY
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: LIST
10081: LIST
10082: LIST
10083: LIST
10084: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
10085: LD_ADDR_LOC 21
10089: PUSH
10090: LD_INT 31
10092: PUSH
10093: EMPTY
10094: LIST
10095: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10096: LD_ADDR_LOC 22
10100: PUSH
10101: EMPTY
10102: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
10103: LD_ADDR_LOC 23
10107: PUSH
10108: LD_INT 2
10110: PUSH
10111: EMPTY
10112: LIST
10113: ST_TO_ADDR
// Banned_Engines := [ ] ;
10114: LD_ADDR_LOC 24
10118: PUSH
10119: EMPTY
10120: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
10121: LD_ADDR_LOC 19
10125: PUSH
10126: LD_INT 4
10128: PUSH
10129: EMPTY
10130: LIST
10131: PUSH
10132: LD_INT 31
10134: PUSH
10135: LD_INT 32
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
10146: LD_ADDR_LOC 20
10150: PUSH
10151: LD_INT 1
10153: PUSH
10154: LD_INT 1
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: ST_TO_ADDR
// end ; 6 :
10161: GO 10989
10163: LD_INT 6
10165: DOUBLE
10166: EQUAL
10167: IFTRUE 10171
10169: GO 10374
10171: POP
// begin def_base_level := 1 ;
10172: LD_ADDR_EXP 43
10176: PUSH
10177: LD_INT 1
10179: ST_TO_ADDR
// def_amount_of_people := 2 ;
10180: LD_ADDR_EXP 44
10184: PUSH
10185: LD_INT 2
10187: ST_TO_ADDR
// def_skill_level := 3 ;
10188: LD_ADDR_EXP 45
10192: PUSH
10193: LD_INT 3
10195: ST_TO_ADDR
// def_starting_resources := 3 ;
10196: LD_ADDR_EXP 46
10200: PUSH
10201: LD_INT 3
10203: ST_TO_ADDR
// def_shipments_density := 1 ;
10204: LD_ADDR_EXP 47
10208: PUSH
10209: LD_INT 1
10211: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10212: LD_ADDR_EXP 48
10216: PUSH
10217: LD_INT 0
10219: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
10220: LD_ADDR_EXP 49
10224: PUSH
10225: LD_INT 1
10227: ST_TO_ADDR
// def_shared_vision := 1 ;
10228: LD_ADDR_EXP 50
10232: PUSH
10233: LD_INT 1
10235: ST_TO_ADDR
// def_morale_flags := 0 ;
10236: LD_ADDR_EXP 51
10240: PUSH
10241: LD_INT 0
10243: ST_TO_ADDR
// def_siberite_detection := 1 ;
10244: LD_ADDR_EXP 52
10248: PUSH
10249: LD_INT 1
10251: ST_TO_ADDR
// def_people_respawning := 2 ;
10252: LD_ADDR_EXP 53
10256: PUSH
10257: LD_INT 2
10259: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10260: LD_ADDR_EXP 54
10264: PUSH
10265: LD_INT 1
10267: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10268: LD_ADDR_EXP 55
10272: PUSH
10273: LD_INT 0
10275: ST_TO_ADDR
// def_builduptime := 1 ;
10276: LD_ADDR_EXP 56
10280: PUSH
10281: LD_INT 1
10283: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
10284: LD_ADDR_VAR 0 2
10288: PUSH
10289: LD_INT 23
10291: PUSH
10292: EMPTY
10293: LIST
10294: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
10295: LD_ADDR_VAR 0 3
10299: PUSH
10300: LD_INT 2
10302: PUSH
10303: LD_INT 37
10305: PUSH
10306: LD_INT 31
10308: PUSH
10309: LD_INT 32
10311: PUSH
10312: LD_INT 33
10314: PUSH
10315: EMPTY
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10322: LD_ADDR_LOC 21
10326: PUSH
10327: EMPTY
10328: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10329: LD_ADDR_LOC 22
10333: PUSH
10334: EMPTY
10335: ST_TO_ADDR
// Banned_Controls := [ ] ;
10336: LD_ADDR_LOC 23
10340: PUSH
10341: EMPTY
10342: ST_TO_ADDR
// Banned_Engines := [ ] ;
10343: LD_ADDR_LOC 24
10347: PUSH
10348: EMPTY
10349: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10350: LD_ADDR_LOC 19
10354: PUSH
10355: EMPTY
10356: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10357: LD_ADDR_LOC 20
10361: PUSH
10362: EMPTY
10363: ST_TO_ADDR
// No_Mechs := true ;
10364: LD_ADDR_EXP 57
10368: PUSH
10369: LD_INT 1
10371: ST_TO_ADDR
// end ; 7 :
10372: GO 10989
10374: LD_INT 7
10376: DOUBLE
10377: EQUAL
10378: IFTRUE 10382
10380: GO 10580
10382: POP
// begin def_base_level := 1 ;
10383: LD_ADDR_EXP 43
10387: PUSH
10388: LD_INT 1
10390: ST_TO_ADDR
// def_amount_of_people := 2 ;
10391: LD_ADDR_EXP 44
10395: PUSH
10396: LD_INT 2
10398: ST_TO_ADDR
// def_skill_level := 3 ;
10399: LD_ADDR_EXP 45
10403: PUSH
10404: LD_INT 3
10406: ST_TO_ADDR
// def_starting_resources := 3 ;
10407: LD_ADDR_EXP 46
10411: PUSH
10412: LD_INT 3
10414: ST_TO_ADDR
// def_shipments_density := 1 ;
10415: LD_ADDR_EXP 47
10419: PUSH
10420: LD_INT 1
10422: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10423: LD_ADDR_EXP 48
10427: PUSH
10428: LD_INT 1
10430: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10431: LD_ADDR_EXP 49
10435: PUSH
10436: LD_INT 2
10438: ST_TO_ADDR
// def_shared_vision := 1 ;
10439: LD_ADDR_EXP 50
10443: PUSH
10444: LD_INT 1
10446: ST_TO_ADDR
// def_morale_flags := 0 ;
10447: LD_ADDR_EXP 51
10451: PUSH
10452: LD_INT 0
10454: ST_TO_ADDR
// def_siberite_detection := 1 ;
10455: LD_ADDR_EXP 52
10459: PUSH
10460: LD_INT 1
10462: ST_TO_ADDR
// def_people_respawning := 0 ;
10463: LD_ADDR_EXP 53
10467: PUSH
10468: LD_INT 0
10470: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10471: LD_ADDR_EXP 54
10475: PUSH
10476: LD_INT 1
10478: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10479: LD_ADDR_EXP 55
10483: PUSH
10484: LD_INT 0
10486: ST_TO_ADDR
// def_builduptime := 3 ;
10487: LD_ADDR_EXP 56
10491: PUSH
10492: LD_INT 3
10494: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
10495: LD_ADDR_VAR 0 2
10499: PUSH
10500: LD_INT 23
10502: PUSH
10503: EMPTY
10504: LIST
10505: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
10506: LD_ADDR_VAR 0 3
10510: PUSH
10511: LD_INT 37
10513: PUSH
10514: EMPTY
10515: LIST
10516: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10517: LD_ADDR_LOC 21
10521: PUSH
10522: EMPTY
10523: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10524: LD_ADDR_LOC 22
10528: PUSH
10529: EMPTY
10530: ST_TO_ADDR
// Banned_Controls := [ ] ;
10531: LD_ADDR_LOC 23
10535: PUSH
10536: EMPTY
10537: ST_TO_ADDR
// Banned_Engines := [ ] ;
10538: LD_ADDR_LOC 24
10542: PUSH
10543: EMPTY
10544: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
10545: LD_ADDR_LOC 19
10549: PUSH
10550: LD_INT 31
10552: PUSH
10553: LD_INT 32
10555: PUSH
10556: LD_INT 33
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: LIST
10563: PUSH
10564: EMPTY
10565: LIST
10566: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
10567: LD_ADDR_LOC 20
10571: PUSH
10572: LD_INT 10
10574: PUSH
10575: EMPTY
10576: LIST
10577: ST_TO_ADDR
// end ; 8 :
10578: GO 10989
10580: LD_INT 8
10582: DOUBLE
10583: EQUAL
10584: IFTRUE 10588
10586: GO 10988
10588: POP
// begin def_base_level := 0 ;
10589: LD_ADDR_EXP 43
10593: PUSH
10594: LD_INT 0
10596: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
10597: LD_ADDR_EXP 44
10601: PUSH
10602: LD_INT 0
10604: PPUSH
10605: LD_INT 1
10607: PPUSH
10608: CALL_OW 12
10612: ST_TO_ADDR
// def_skill_level := 0 ;
10613: LD_ADDR_EXP 45
10617: PUSH
10618: LD_INT 0
10620: ST_TO_ADDR
// def_starting_resources := 2 ;
10621: LD_ADDR_EXP 46
10625: PUSH
10626: LD_INT 2
10628: ST_TO_ADDR
// def_shipments_density := 1 ;
10629: LD_ADDR_EXP 47
10633: PUSH
10634: LD_INT 1
10636: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10637: LD_ADDR_EXP 48
10641: PUSH
10642: LD_INT 0
10644: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
10645: LD_ADDR_EXP 49
10649: PUSH
10650: LD_INT 0
10652: ST_TO_ADDR
// def_shared_vision := 1 ;
10653: LD_ADDR_EXP 50
10657: PUSH
10658: LD_INT 1
10660: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
10661: LD_ADDR_EXP 51
10665: PUSH
10666: LD_INT 0
10668: PPUSH
10669: LD_INT 2
10671: PPUSH
10672: CALL_OW 12
10676: ST_TO_ADDR
// def_siberite_detection := 0 ;
10677: LD_ADDR_EXP 52
10681: PUSH
10682: LD_INT 0
10684: ST_TO_ADDR
// def_people_respawning := 0 ;
10685: LD_ADDR_EXP 53
10689: PUSH
10690: LD_INT 0
10692: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
10693: LD_ADDR_EXP 54
10697: PUSH
10698: LD_INT 2
10700: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10701: LD_ADDR_EXP 55
10705: PUSH
10706: LD_INT 0
10708: ST_TO_ADDR
// def_builduptime := 0 ;
10709: LD_ADDR_EXP 56
10713: PUSH
10714: LD_INT 0
10716: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
10717: LD_ADDR_VAR 0 2
10721: PUSH
10722: LD_INT 23
10724: PUSH
10725: LD_INT 20
10727: PUSH
10728: LD_INT 40
10730: PUSH
10731: LD_INT 47
10733: PUSH
10734: LD_INT 46
10736: PUSH
10737: LD_INT 39
10739: PUSH
10740: LD_INT 71
10742: PUSH
10743: LD_INT 34
10745: PUSH
10746: LD_INT 41
10748: PUSH
10749: LD_INT 44
10751: PUSH
10752: LD_INT 17
10754: PUSH
10755: LD_INT 16
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
10772: LD_ADDR_VAR 0 3
10776: PUSH
10777: LD_INT 37
10779: PUSH
10780: LD_INT 5
10782: PUSH
10783: LD_INT 13
10785: PUSH
10786: LD_INT 34
10788: PUSH
10789: LD_INT 12
10791: PUSH
10792: LD_INT 15
10794: PUSH
10795: LD_INT 11
10797: PUSH
10798: LD_INT 14
10800: PUSH
10801: LD_INT 29
10803: PUSH
10804: LD_INT 30
10806: PUSH
10807: LD_INT 28
10809: PUSH
10810: LD_INT 24
10812: PUSH
10813: LD_INT 25
10815: PUSH
10816: LD_INT 20
10818: PUSH
10819: LD_INT 21
10821: PUSH
10822: LD_INT 22
10824: PUSH
10825: LD_INT 36
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10847: LD_ADDR_LOC 21
10851: PUSH
10852: EMPTY
10853: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
10854: LD_ADDR_LOC 22
10858: PUSH
10859: LD_INT 14
10861: PUSH
10862: EMPTY
10863: LIST
10864: ST_TO_ADDR
// Banned_Controls := [ ] ;
10865: LD_ADDR_LOC 23
10869: PUSH
10870: EMPTY
10871: ST_TO_ADDR
// Banned_Engines := [ ] ;
10872: LD_ADDR_LOC 24
10876: PUSH
10877: EMPTY
10878: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
10879: LD_ADDR_LOC 19
10883: PUSH
10884: LD_INT 31
10886: PUSH
10887: LD_INT 32
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: PUSH
10894: LD_INT 4
10896: PUSH
10897: EMPTY
10898: LIST
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
10904: LD_ADDR_LOC 20
10908: PUSH
10909: LD_INT 2
10911: PUSH
10912: LD_INT 1
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: ST_TO_ADDR
// for i := 1 to 8 do
10919: LD_ADDR_VAR 0 4
10923: PUSH
10924: DOUBLE
10925: LD_INT 1
10927: DEC
10928: ST_TO_ADDR
10929: LD_INT 8
10931: PUSH
10932: FOR_TO
10933: IFFALSE 10984
// if ( Side_Nations [ i ] = 3 ) then
10935: LD_EXP 21
10939: PUSH
10940: LD_VAR 0 4
10944: ARRAY
10945: PUSH
10946: LD_INT 3
10948: EQUAL
10949: IFFALSE 10982
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
10951: LD_ADDR_EXP 21
10955: PUSH
10956: LD_EXP 21
10960: PPUSH
10961: LD_VAR 0 4
10965: PPUSH
10966: LD_INT 1
10968: PPUSH
10969: LD_INT 2
10971: PPUSH
10972: CALL_OW 12
10976: PPUSH
10977: CALL_OW 1
10981: ST_TO_ADDR
10982: GO 10932
10984: POP
10985: POP
// end ; end ;
10986: GO 10989
10988: POP
// for i := 1 to 8 do
10989: LD_ADDR_VAR 0 4
10993: PUSH
10994: DOUBLE
10995: LD_INT 1
10997: DEC
10998: ST_TO_ADDR
10999: LD_INT 8
11001: PUSH
11002: FOR_TO
11003: IFFALSE 11087
// if Side_Positions [ i ] then
11005: LD_EXP 20
11009: PUSH
11010: LD_VAR 0 4
11014: ARRAY
11015: IFFALSE 11085
// begin for j in Unavailable_Techs do
11017: LD_ADDR_VAR 0 5
11021: PUSH
11022: LD_VAR 0 2
11026: PUSH
11027: FOR_IN
11028: IFFALSE 11049
// SetTech ( j , i , 0 ) ;
11030: LD_VAR 0 5
11034: PPUSH
11035: LD_VAR 0 4
11039: PPUSH
11040: LD_INT 0
11042: PPUSH
11043: CALL_OW 322
11047: GO 11027
11049: POP
11050: POP
// for j in Unavailable_Builds do
11051: LD_ADDR_VAR 0 5
11055: PUSH
11056: LD_VAR 0 3
11060: PUSH
11061: FOR_IN
11062: IFFALSE 11083
// SetRestrict ( j , i , 0 ) ;
11064: LD_VAR 0 5
11068: PPUSH
11069: LD_VAR 0 4
11073: PPUSH
11074: LD_INT 0
11076: PPUSH
11077: CALL_OW 324
11081: GO 11061
11083: POP
11084: POP
// end ;
11085: GO 11002
11087: POP
11088: POP
// end ;
11089: LD_VAR 0 1
11093: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
11094: LD_INT 0
11096: PPUSH
11097: PPUSH
11098: PPUSH
11099: PPUSH
11100: PPUSH
11101: PPUSH
11102: PPUSH
// for i := 1 to Restricted_Builds do
11103: LD_ADDR_VAR 0 2
11107: PUSH
11108: DOUBLE
11109: LD_INT 1
11111: DEC
11112: ST_TO_ADDR
11113: LD_LOC 19
11117: PUSH
11118: FOR_TO
11119: IFFALSE 11429
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
11121: LD_LOC 19
11125: PUSH
11126: LD_VAR 0 2
11130: ARRAY
11131: PUSH
11132: LD_INT 1
11134: ARRAY
11135: PUSH
11136: LD_INT 31
11138: DOUBLE
11139: EQUAL
11140: IFTRUE 11156
11142: LD_INT 32
11144: DOUBLE
11145: EQUAL
11146: IFTRUE 11156
11148: LD_INT 33
11150: DOUBLE
11151: EQUAL
11152: IFTRUE 11156
11154: GO 11167
11156: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
11157: LD_ADDR_VAR 0 6
11161: PUSH
11162: LD_STRING #Turrets
11164: ST_TO_ADDR
11165: GO 11212
11167: LD_INT 4
11169: DOUBLE
11170: EQUAL
11171: IFTRUE 11181
11173: LD_INT 5
11175: DOUBLE
11176: EQUAL
11177: IFTRUE 11181
11179: GO 11192
11181: POP
// btype := #Armouries ; b_Behemoth :
11182: LD_ADDR_VAR 0 6
11186: PUSH
11187: LD_STRING #Armouries
11189: ST_TO_ADDR
11190: GO 11212
11192: LD_INT 37
11194: DOUBLE
11195: EQUAL
11196: IFTRUE 11200
11198: GO 11211
11200: POP
// btype := #Behemoths ; end ;
11201: LD_ADDR_VAR 0 6
11205: PUSH
11206: LD_STRING #Behemoths
11208: ST_TO_ADDR
11209: GO 11212
11211: POP
// list := [ ] ;
11212: LD_ADDR_VAR 0 7
11216: PUSH
11217: EMPTY
11218: ST_TO_ADDR
// for j := 1 to 8 do
11219: LD_ADDR_VAR 0 3
11223: PUSH
11224: DOUBLE
11225: LD_INT 1
11227: DEC
11228: ST_TO_ADDR
11229: LD_INT 8
11231: PUSH
11232: FOR_TO
11233: IFFALSE 11326
// if Side_Positions [ j ] then
11235: LD_EXP 20
11239: PUSH
11240: LD_VAR 0 3
11244: ARRAY
11245: IFFALSE 11324
// begin amount := 0 ;
11247: LD_ADDR_VAR 0 5
11251: PUSH
11252: LD_INT 0
11254: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
11255: LD_ADDR_VAR 0 4
11259: PUSH
11260: LD_LOC 19
11264: PUSH
11265: LD_VAR 0 2
11269: ARRAY
11270: PUSH
11271: FOR_IN
11272: IFFALSE 11320
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
11274: LD_ADDR_VAR 0 5
11278: PUSH
11279: LD_VAR 0 5
11283: PUSH
11284: LD_INT 22
11286: PUSH
11287: LD_VAR 0 3
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: PUSH
11296: LD_INT 30
11298: PUSH
11299: LD_VAR 0 4
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: PPUSH
11312: CALL_OW 69
11316: PLUS
11317: ST_TO_ADDR
11318: GO 11271
11320: POP
11321: POP
// break ;
11322: GO 11326
// end ;
11324: GO 11232
11326: POP
11327: POP
// list := [ ] ;
11328: LD_ADDR_VAR 0 7
11332: PUSH
11333: EMPTY
11334: ST_TO_ADDR
// for j := 1 to 8 do
11335: LD_ADDR_VAR 0 3
11339: PUSH
11340: DOUBLE
11341: LD_INT 1
11343: DEC
11344: ST_TO_ADDR
11345: LD_INT 8
11347: PUSH
11348: FOR_TO
11349: IFFALSE 11369
// list := list ^ amount ;
11351: LD_ADDR_VAR 0 7
11355: PUSH
11356: LD_VAR 0 7
11360: PUSH
11361: LD_VAR 0 5
11365: ADD
11366: ST_TO_ADDR
11367: GO 11348
11369: POP
11370: POP
// Already_Built := Already_Built ^ [ list ] ;
11371: LD_ADDR_LOC 25
11375: PUSH
11376: LD_LOC 25
11380: PUSH
11381: LD_VAR 0 7
11385: PUSH
11386: EMPTY
11387: LIST
11388: ADD
11389: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
11390: LD_ADDR_LOC 26
11394: PUSH
11395: LD_LOC 26
11399: PUSH
11400: LD_VAR 0 6
11404: PUSH
11405: LD_VAR 0 5
11409: PUSH
11410: LD_LOC 20
11414: PUSH
11415: LD_VAR 0 2
11419: ARRAY
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: LIST
11425: ADD
11426: ST_TO_ADDR
// end ;
11427: GO 11118
11429: POP
11430: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
11431: LD_ADDR_LOC 27
11435: PUSH
11436: LD_INT 0
11438: PUSH
11439: LD_INT 0
11441: PUSH
11442: LD_INT 0
11444: PUSH
11445: LD_INT 0
11447: PUSH
11448: LD_INT 0
11450: PUSH
11451: LD_INT 0
11453: PUSH
11454: LD_INT 0
11456: PUSH
11457: LD_INT 0
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: ST_TO_ADDR
// if Limits_Info then
11470: LD_LOC 26
11474: IFFALSE 11490
// Limits_Info := #Limits ^ Limits_Info ;
11476: LD_ADDR_LOC 26
11480: PUSH
11481: LD_STRING #Limits
11483: PUSH
11484: LD_LOC 26
11488: ADD
11489: ST_TO_ADDR
// end ;
11490: LD_VAR 0 1
11494: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
11495: LD_INT 0
11497: PPUSH
11498: PPUSH
11499: PPUSH
11500: PPUSH
// for i := 1 to Restricted_Builds do
11501: LD_ADDR_VAR 0 7
11505: PUSH
11506: DOUBLE
11507: LD_INT 1
11509: DEC
11510: ST_TO_ADDR
11511: LD_LOC 19
11515: PUSH
11516: FOR_TO
11517: IFFALSE 11940
// if BType in Restricted_Builds [ i ] then
11519: LD_VAR 0 2
11523: PUSH
11524: LD_LOC 19
11528: PUSH
11529: LD_VAR 0 7
11533: ARRAY
11534: IN
11535: IFFALSE 11938
// begin if old_side then
11537: LD_VAR 0 4
11541: IFFALSE 11667
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
11543: LD_LOC 25
11547: PUSH
11548: LD_VAR 0 7
11552: ARRAY
11553: PUSH
11554: LD_VAR 0 3
11558: ARRAY
11559: PUSH
11560: LD_VAR 0 5
11564: PLUS
11565: PUSH
11566: LD_LOC 20
11570: PUSH
11571: LD_VAR 0 7
11575: ARRAY
11576: GREATER
11577: IFFALSE 11603
// begin SetSide ( un , old_side ) ;
11579: LD_VAR 0 1
11583: PPUSH
11584: LD_VAR 0 4
11588: PPUSH
11589: CALL_OW 235
// count := 0 ;
11593: LD_ADDR_VAR 0 5
11597: PUSH
11598: LD_INT 0
11600: ST_TO_ADDR
// end else
11601: GO 11667
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
11603: LD_ADDR_LOC 25
11607: PUSH
11608: LD_LOC 25
11612: PPUSH
11613: LD_VAR 0 7
11617: PPUSH
11618: LD_LOC 25
11622: PUSH
11623: LD_VAR 0 7
11627: ARRAY
11628: PPUSH
11629: LD_VAR 0 4
11633: PPUSH
11634: LD_LOC 25
11638: PUSH
11639: LD_VAR 0 7
11643: ARRAY
11644: PUSH
11645: LD_VAR 0 4
11649: ARRAY
11650: PUSH
11651: LD_VAR 0 5
11655: MINUS
11656: PPUSH
11657: CALL_OW 1
11661: PPUSH
11662: CALL_OW 1
11666: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
11667: LD_ADDR_LOC 25
11671: PUSH
11672: LD_LOC 25
11676: PPUSH
11677: LD_VAR 0 7
11681: PPUSH
11682: LD_LOC 25
11686: PUSH
11687: LD_VAR 0 7
11691: ARRAY
11692: PPUSH
11693: LD_VAR 0 3
11697: PPUSH
11698: LD_LOC 25
11702: PUSH
11703: LD_VAR 0 7
11707: ARRAY
11708: PUSH
11709: LD_VAR 0 3
11713: ARRAY
11714: PUSH
11715: LD_VAR 0 5
11719: PLUS
11720: PPUSH
11721: CALL_OW 1
11725: PPUSH
11726: CALL_OW 1
11730: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
11731: LD_VAR 0 5
11735: PUSH
11736: LD_INT 0
11738: NONEQUAL
11739: PUSH
11740: LD_VAR 0 3
11744: PUSH
11745: LD_OWVAR 2
11749: EQUAL
11750: AND
11751: IFFALSE 11794
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
11753: LD_ADDR_LOC 26
11757: PUSH
11758: LD_LOC 26
11762: PPUSH
11763: LD_INT 3
11765: PUSH
11766: LD_VAR 0 7
11770: MUL
11771: PPUSH
11772: LD_LOC 25
11776: PUSH
11777: LD_VAR 0 7
11781: ARRAY
11782: PUSH
11783: LD_VAR 0 3
11787: ARRAY
11788: PPUSH
11789: CALL_OW 1
11793: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
11794: LD_LOC 25
11798: PUSH
11799: LD_VAR 0 7
11803: ARRAY
11804: PUSH
11805: LD_VAR 0 3
11809: ARRAY
11810: PUSH
11811: LD_LOC 20
11815: PUSH
11816: LD_VAR 0 7
11820: ARRAY
11821: GREATER
11822: IFFALSE 11849
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
11824: LD_ADDR_LOC 27
11828: PUSH
11829: LD_LOC 27
11833: PPUSH
11834: LD_VAR 0 3
11838: PPUSH
11839: LD_INT 1
11841: PPUSH
11842: CALL_OW 1
11846: ST_TO_ADDR
// end else
11847: GO 11936
// begin for j := 1 to Restricted_Builds do
11849: LD_ADDR_VAR 0 8
11853: PUSH
11854: DOUBLE
11855: LD_INT 1
11857: DEC
11858: ST_TO_ADDR
11859: LD_LOC 19
11863: PUSH
11864: FOR_TO
11865: IFFALSE 11909
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
11867: LD_LOC 25
11871: PUSH
11872: LD_VAR 0 8
11876: ARRAY
11877: PUSH
11878: LD_VAR 0 3
11882: ARRAY
11883: PUSH
11884: LD_LOC 20
11888: PUSH
11889: LD_VAR 0 8
11893: ARRAY
11894: GREATER
11895: IFFALSE 11907
// begin Is_Cheater := true ;
11897: LD_ADDR_VAR 0 9
11901: PUSH
11902: LD_INT 1
11904: ST_TO_ADDR
// break ;
11905: GO 11909
// end ;
11907: GO 11864
11909: POP
11910: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
11911: LD_ADDR_LOC 27
11915: PUSH
11916: LD_LOC 27
11920: PPUSH
11921: LD_VAR 0 3
11925: PPUSH
11926: LD_VAR 0 9
11930: PPUSH
11931: CALL_OW 1
11935: ST_TO_ADDR
// end ; break ;
11936: GO 11940
// end ;
11938: GO 11516
11940: POP
11941: POP
// end ;
11942: LD_VAR 0 6
11946: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
11947: LD_VAR 0 5
11951: PUSH
11952: LD_LOC 21
11956: IN
11957: PUSH
11958: LD_VAR 0 2
11962: PUSH
11963: LD_LOC 22
11967: IN
11968: OR
11969: PUSH
11970: LD_VAR 0 4
11974: PUSH
11975: LD_LOC 23
11979: IN
11980: OR
11981: PUSH
11982: LD_VAR 0 3
11986: PUSH
11987: LD_LOC 24
11991: IN
11992: OR
11993: IFFALSE 12004
// ComCancel ( factory ) ;
11995: LD_VAR 0 1
11999: PPUSH
12000: CALL_OW 127
// end ;
12004: PPOPN 5
12006: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
12007: LD_VAR 0 2
12011: PUSH
12012: LD_LOC 21
12016: IN
12017: IFFALSE 12028
// ComCancel ( building ) ;
12019: LD_VAR 0 1
12023: PPUSH
12024: CALL_OW 127
// end ; end_of_file
12028: PPOPN 2
12030: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
12031: LD_INT 0
12033: PPUSH
12034: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
12035: LD_ADDR_VAR 0 2
12039: PUSH
12040: LD_STRING #Multi1x1-Time
12042: PUSH
12043: LD_OWVAR 1
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: ST_TO_ADDR
// if WaitServerStrings then
12052: LD_EXP 59
12056: IFFALSE 12074
// AllStrings = AllStrings ^ WaitServerStrings ;
12058: LD_ADDR_VAR 0 2
12062: PUSH
12063: LD_VAR 0 2
12067: PUSH
12068: LD_EXP 59
12072: ADD
12073: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
12074: LD_INT 0
12076: PUSH
12077: LD_EXP 12
12081: PUSH
12082: LD_OWVAR 1
12086: MINUS
12087: LESSEQUAL
12088: IFFALSE 12119
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
12090: LD_ADDR_VAR 0 2
12094: PUSH
12095: LD_VAR 0 2
12099: PUSH
12100: LD_STRING #allowedsibbomb
12102: PUSH
12103: LD_EXP 12
12107: PUSH
12108: LD_OWVAR 1
12112: MINUS
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: ADD
12118: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
12119: LD_INT 0
12121: PUSH
12122: LD_EXP 16
12126: PUSH
12127: LD_OWVAR 1
12131: MINUS
12132: LESSEQUAL
12133: IFFALSE 12164
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
12135: LD_ADDR_VAR 0 2
12139: PUSH
12140: LD_VAR 0 2
12144: PUSH
12145: LD_STRING #builduptime
12147: PUSH
12148: LD_EXP 16
12152: PUSH
12153: LD_OWVAR 1
12157: MINUS
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: ADD
12163: ST_TO_ADDR
// if ( ExtraStrings ) then
12164: LD_EXP 58
12168: IFFALSE 12190
// AllStrings := AllStrings ^  ^ ExtraStrings ;
12170: LD_ADDR_VAR 0 2
12174: PUSH
12175: LD_VAR 0 2
12179: PUSH
12180: LD_STRING 
12182: ADD
12183: PUSH
12184: LD_EXP 58
12188: ADD
12189: ST_TO_ADDR
// if ( LimitsStrings ) then
12190: CALL 8871 0 0
12194: IFFALSE 12216
// AllStrings := AllStrings ^  ^ LimitsStrings ;
12196: LD_ADDR_VAR 0 2
12200: PUSH
12201: LD_VAR 0 2
12205: PUSH
12206: LD_STRING 
12208: ADD
12209: PUSH
12210: CALL 8871 0 0
12214: ADD
12215: ST_TO_ADDR
// Display_Strings := AllStrings ;
12216: LD_ADDR_OWVAR 47
12220: PUSH
12221: LD_VAR 0 2
12225: ST_TO_ADDR
// end ;
12226: LD_VAR 0 1
12230: RET
// every 0 0$1 do
12231: GO 12233
12233: DISABLE
// begin ShowTimer ;
12234: CALL 12031 0 0
// enable ;
12238: ENABLE
// end ; end_of_file
12239: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
12240: LD_INT 0
12242: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
12243: LD_VAR 0 1
12247: PPUSH
12248: CALL_OW 255
12252: PUSH
12253: LD_VAR 0 4
12257: EQUAL
12258: IFFALSE 12277
// begin SetAchievement ( ACH_RAD ) ;
12260: LD_STRING ACH_RAD
12262: PPUSH
12263: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
12267: LD_STRING ACH_NL
12269: PPUSH
12270: LD_INT 1
12272: PPUSH
12273: CALL_OW 564
// end end ;
12277: LD_VAR 0 5
12281: RET
// export function SA_Win ( side ) ; begin
12282: LD_INT 0
12284: PPUSH
// case side of 1 :
12285: LD_VAR 0 1
12289: PUSH
12290: LD_INT 1
12292: DOUBLE
12293: EQUAL
12294: IFTRUE 12298
12296: GO 12311
12298: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
12299: LD_STRING ACH_AH
12301: PPUSH
12302: LD_INT 1
12304: PPUSH
12305: CALL_OW 564
12309: GO 12474
12311: LD_INT 2
12313: DOUBLE
12314: EQUAL
12315: IFTRUE 12319
12317: GO 12332
12319: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
12320: LD_STRING ACH_E
12322: PPUSH
12323: LD_INT 1
12325: PPUSH
12326: CALL_OW 564
12330: GO 12474
12332: LD_INT 3
12334: DOUBLE
12335: EQUAL
12336: IFTRUE 12340
12338: GO 12353
12340: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
12341: LD_STRING ACH_OOL
12343: PPUSH
12344: LD_INT 1
12346: PPUSH
12347: CALL_OW 564
12351: GO 12474
12353: LD_INT 1
12355: PUSH
12356: LD_INT 2
12358: PUSH
12359: EMPTY
12360: LIST
12361: LIST
12362: DOUBLE
12363: EQUAL
12364: IFTRUE 12368
12366: GO 12393
12368: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12369: LD_STRING ACH_AH
12371: PPUSH
12372: LD_REAL  5.00000000000000E-0001
12375: PPUSH
12376: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
12380: LD_STRING ACH_E
12382: PPUSH
12383: LD_REAL  5.00000000000000E-0001
12386: PPUSH
12387: CALL_OW 564
// end ; [ 2 , 3 ] :
12391: GO 12474
12393: LD_INT 2
12395: PUSH
12396: LD_INT 3
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: DOUBLE
12403: EQUAL
12404: IFTRUE 12408
12406: GO 12433
12408: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
12409: LD_STRING ACH_OOL
12411: PPUSH
12412: LD_REAL  5.00000000000000E-0001
12415: PPUSH
12416: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
12420: LD_STRING ACH_E
12422: PPUSH
12423: LD_REAL  5.00000000000000E-0001
12426: PPUSH
12427: CALL_OW 564
// end ; [ 3 , 1 ] :
12431: GO 12474
12433: LD_INT 3
12435: PUSH
12436: LD_INT 1
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: DOUBLE
12443: EQUAL
12444: IFTRUE 12448
12446: GO 12473
12448: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12449: LD_STRING ACH_AH
12451: PPUSH
12452: LD_REAL  5.00000000000000E-0001
12455: PPUSH
12456: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
12460: LD_STRING ACH_OOL
12462: PPUSH
12463: LD_REAL  5.00000000000000E-0001
12466: PPUSH
12467: CALL_OW 564
// end ; end ;
12471: GO 12474
12473: POP
// end ; end_of_file
12474: LD_VAR 0 2
12478: RET
// export function SetMpTechs ( ) ; var side , i ; begin
12479: LD_INT 0
12481: PPUSH
12482: PPUSH
12483: PPUSH
// for side = 1 to 8 do
12484: LD_ADDR_VAR 0 2
12488: PUSH
12489: DOUBLE
12490: LD_INT 1
12492: DEC
12493: ST_TO_ADDR
12494: LD_INT 8
12496: PUSH
12497: FOR_TO
12498: IFFALSE 12619
// begin for i = 1 to 72 do
12500: LD_ADDR_VAR 0 3
12504: PUSH
12505: DOUBLE
12506: LD_INT 1
12508: DEC
12509: ST_TO_ADDR
12510: LD_INT 72
12512: PUSH
12513: FOR_TO
12514: IFFALSE 12545
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
12516: LD_VAR 0 3
12520: PPUSH
12521: LD_VAR 0 2
12525: PPUSH
12526: LD_INT 0
12528: PPUSH
12529: LD_VAR 0 3
12533: PPUSH
12534: CALL_OW 565
12538: PPUSH
12539: CALL_OW 322
12543: GO 12513
12545: POP
12546: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
12547: LD_INT 73
12549: PPUSH
12550: LD_VAR 0 2
12554: PPUSH
12555: LD_INT 0
12557: PPUSH
12558: LD_INT 25
12560: PPUSH
12561: CALL_OW 565
12565: PPUSH
12566: CALL_OW 322
// for i = 0 to 40 do
12570: LD_ADDR_VAR 0 3
12574: PUSH
12575: DOUBLE
12576: LD_INT 0
12578: DEC
12579: ST_TO_ADDR
12580: LD_INT 40
12582: PUSH
12583: FOR_TO
12584: IFFALSE 12615
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
12586: LD_VAR 0 3
12590: PPUSH
12591: LD_VAR 0 2
12595: PPUSH
12596: LD_INT 1
12598: PPUSH
12599: LD_VAR 0 3
12603: PPUSH
12604: CALL_OW 565
12608: PPUSH
12609: CALL_OW 324
12613: GO 12583
12615: POP
12616: POP
// end ;
12617: GO 12497
12619: POP
12620: POP
// end ;
12621: LD_VAR 0 1
12625: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
12626: LD_INT 0
12628: PPUSH
12629: PPUSH
12630: PPUSH
// for side = 1 to 8 do
12631: LD_ADDR_VAR 0 3
12635: PUSH
12636: DOUBLE
12637: LD_INT 1
12639: DEC
12640: ST_TO_ADDR
12641: LD_INT 8
12643: PUSH
12644: FOR_TO
12645: IFFALSE 16641
// begin for i = 1 to 73 do
12647: LD_ADDR_VAR 0 4
12651: PUSH
12652: DOUBLE
12653: LD_INT 1
12655: DEC
12656: ST_TO_ADDR
12657: LD_INT 73
12659: PUSH
12660: FOR_TO
12661: IFFALSE 12682
// SetTech ( i , side , state_disabled ) ;
12663: LD_VAR 0 4
12667: PPUSH
12668: LD_VAR 0 3
12672: PPUSH
12673: LD_INT 0
12675: PPUSH
12676: CALL_OW 322
12680: GO 12660
12682: POP
12683: POP
// for i = 0 to 40 do
12684: LD_ADDR_VAR 0 4
12688: PUSH
12689: DOUBLE
12690: LD_INT 0
12692: DEC
12693: ST_TO_ADDR
12694: LD_INT 40
12696: PUSH
12697: FOR_TO
12698: IFFALSE 12719
// SetRestrict ( i , side , false ) ;
12700: LD_VAR 0 4
12704: PPUSH
12705: LD_VAR 0 3
12709: PPUSH
12710: LD_INT 0
12712: PPUSH
12713: CALL_OW 324
12717: GO 12697
12719: POP
12720: POP
// case level of 1 :
12721: LD_VAR 0 1
12725: PUSH
12726: LD_INT 1
12728: DOUBLE
12729: EQUAL
12730: IFTRUE 12734
12732: GO 12887
12734: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12735: LD_INT 35
12737: PPUSH
12738: LD_VAR 0 3
12742: PPUSH
12743: LD_INT 1
12745: PPUSH
12746: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12750: LD_INT 45
12752: PPUSH
12753: LD_VAR 0 3
12757: PPUSH
12758: LD_INT 1
12760: PPUSH
12761: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12765: LD_INT 46
12767: PPUSH
12768: LD_VAR 0 3
12772: PPUSH
12773: LD_INT 1
12775: PPUSH
12776: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12780: LD_INT 47
12782: PPUSH
12783: LD_VAR 0 3
12787: PPUSH
12788: LD_INT 1
12790: PPUSH
12791: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12795: LD_INT 0
12797: PPUSH
12798: LD_VAR 0 3
12802: PPUSH
12803: LD_INT 1
12805: PPUSH
12806: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12810: LD_INT 2
12812: PPUSH
12813: LD_VAR 0 3
12817: PPUSH
12818: LD_INT 1
12820: PPUSH
12821: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12825: LD_INT 4
12827: PPUSH
12828: LD_VAR 0 3
12832: PPUSH
12833: LD_INT 1
12835: PPUSH
12836: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12840: LD_INT 6
12842: PPUSH
12843: LD_VAR 0 3
12847: PPUSH
12848: LD_INT 1
12850: PPUSH
12851: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12855: LD_INT 29
12857: PPUSH
12858: LD_VAR 0 3
12862: PPUSH
12863: LD_INT 1
12865: PPUSH
12866: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12870: LD_INT 31
12872: PPUSH
12873: LD_VAR 0 3
12877: PPUSH
12878: LD_INT 1
12880: PPUSH
12881: CALL_OW 324
// end ; 2 :
12885: GO 16639
12887: LD_INT 2
12889: DOUBLE
12890: EQUAL
12891: IFTRUE 12895
12893: GO 13093
12895: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12896: LD_INT 35
12898: PPUSH
12899: LD_VAR 0 3
12903: PPUSH
12904: LD_INT 1
12906: PPUSH
12907: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12911: LD_INT 45
12913: PPUSH
12914: LD_VAR 0 3
12918: PPUSH
12919: LD_INT 1
12921: PPUSH
12922: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12926: LD_INT 46
12928: PPUSH
12929: LD_VAR 0 3
12933: PPUSH
12934: LD_INT 1
12936: PPUSH
12937: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12941: LD_INT 47
12943: PPUSH
12944: LD_VAR 0 3
12948: PPUSH
12949: LD_INT 1
12951: PPUSH
12952: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12956: LD_INT 1
12958: PPUSH
12959: LD_VAR 0 3
12963: PPUSH
12964: LD_INT 1
12966: PPUSH
12967: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12971: LD_INT 2
12973: PPUSH
12974: LD_VAR 0 3
12978: PPUSH
12979: LD_INT 1
12981: PPUSH
12982: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12986: LD_INT 11
12988: PPUSH
12989: LD_VAR 0 3
12993: PPUSH
12994: LD_INT 1
12996: PPUSH
12997: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13001: LD_INT 0
13003: PPUSH
13004: LD_VAR 0 3
13008: PPUSH
13009: LD_INT 1
13011: PPUSH
13012: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13016: LD_INT 2
13018: PPUSH
13019: LD_VAR 0 3
13023: PPUSH
13024: LD_INT 1
13026: PPUSH
13027: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13031: LD_INT 4
13033: PPUSH
13034: LD_VAR 0 3
13038: PPUSH
13039: LD_INT 1
13041: PPUSH
13042: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13046: LD_INT 6
13048: PPUSH
13049: LD_VAR 0 3
13053: PPUSH
13054: LD_INT 1
13056: PPUSH
13057: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13061: LD_INT 29
13063: PPUSH
13064: LD_VAR 0 3
13068: PPUSH
13069: LD_INT 1
13071: PPUSH
13072: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13076: LD_INT 31
13078: PPUSH
13079: LD_VAR 0 3
13083: PPUSH
13084: LD_INT 1
13086: PPUSH
13087: CALL_OW 324
// end ; 3 :
13091: GO 16639
13093: LD_INT 3
13095: DOUBLE
13096: EQUAL
13097: IFTRUE 13101
13099: GO 13554
13101: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13102: LD_INT 35
13104: PPUSH
13105: LD_VAR 0 3
13109: PPUSH
13110: LD_INT 1
13112: PPUSH
13113: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13117: LD_INT 45
13119: PPUSH
13120: LD_VAR 0 3
13124: PPUSH
13125: LD_INT 1
13127: PPUSH
13128: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13132: LD_INT 46
13134: PPUSH
13135: LD_VAR 0 3
13139: PPUSH
13140: LD_INT 1
13142: PPUSH
13143: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13147: LD_INT 47
13149: PPUSH
13150: LD_VAR 0 3
13154: PPUSH
13155: LD_INT 1
13157: PPUSH
13158: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13162: LD_INT 1
13164: PPUSH
13165: LD_VAR 0 3
13169: PPUSH
13170: LD_INT 1
13172: PPUSH
13173: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13177: LD_INT 2
13179: PPUSH
13180: LD_VAR 0 3
13184: PPUSH
13185: LD_INT 1
13187: PPUSH
13188: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13192: LD_INT 11
13194: PPUSH
13195: LD_VAR 0 3
13199: PPUSH
13200: LD_INT 1
13202: PPUSH
13203: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13207: LD_INT 48
13209: PPUSH
13210: LD_VAR 0 3
13214: PPUSH
13215: LD_INT 1
13217: PPUSH
13218: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13222: LD_INT 69
13224: PPUSH
13225: LD_VAR 0 3
13229: PPUSH
13230: LD_INT 1
13232: PPUSH
13233: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13237: LD_INT 39
13239: PPUSH
13240: LD_VAR 0 3
13244: PPUSH
13245: LD_INT 1
13247: PPUSH
13248: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13252: LD_INT 43
13254: PPUSH
13255: LD_VAR 0 3
13259: PPUSH
13260: LD_INT 1
13262: PPUSH
13263: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13267: LD_INT 51
13269: PPUSH
13270: LD_VAR 0 3
13274: PPUSH
13275: LD_INT 1
13277: PPUSH
13278: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13282: LD_INT 6
13284: PPUSH
13285: LD_VAR 0 3
13289: PPUSH
13290: LD_INT 1
13292: PPUSH
13293: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13297: LD_INT 0
13299: PPUSH
13300: LD_VAR 0 3
13304: PPUSH
13305: LD_INT 1
13307: PPUSH
13308: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13312: LD_INT 2
13314: PPUSH
13315: LD_VAR 0 3
13319: PPUSH
13320: LD_INT 1
13322: PPUSH
13323: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
13327: LD_INT 3
13329: PPUSH
13330: LD_VAR 0 3
13334: PPUSH
13335: LD_INT 1
13337: PPUSH
13338: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13342: LD_INT 4
13344: PPUSH
13345: LD_VAR 0 3
13349: PPUSH
13350: LD_INT 1
13352: PPUSH
13353: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13357: LD_INT 6
13359: PPUSH
13360: LD_VAR 0 3
13364: PPUSH
13365: LD_INT 1
13367: PPUSH
13368: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13372: LD_INT 7
13374: PPUSH
13375: LD_VAR 0 3
13379: PPUSH
13380: LD_INT 1
13382: PPUSH
13383: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13387: LD_INT 8
13389: PPUSH
13390: LD_VAR 0 3
13394: PPUSH
13395: LD_INT 1
13397: PPUSH
13398: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13402: LD_INT 10
13404: PPUSH
13405: LD_VAR 0 3
13409: PPUSH
13410: LD_INT 1
13412: PPUSH
13413: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13417: LD_INT 15
13419: PPUSH
13420: LD_VAR 0 3
13424: PPUSH
13425: LD_INT 1
13427: PPUSH
13428: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13432: LD_INT 16
13434: PPUSH
13435: LD_VAR 0 3
13439: PPUSH
13440: LD_INT 1
13442: PPUSH
13443: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13447: LD_INT 17
13449: PPUSH
13450: LD_VAR 0 3
13454: PPUSH
13455: LD_INT 1
13457: PPUSH
13458: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13462: LD_INT 20
13464: PPUSH
13465: LD_VAR 0 3
13469: PPUSH
13470: LD_INT 1
13472: PPUSH
13473: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13477: LD_INT 26
13479: PPUSH
13480: LD_VAR 0 3
13484: PPUSH
13485: LD_INT 1
13487: PPUSH
13488: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13492: LD_INT 27
13494: PPUSH
13495: LD_VAR 0 3
13499: PPUSH
13500: LD_INT 1
13502: PPUSH
13503: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13507: LD_INT 29
13509: PPUSH
13510: LD_VAR 0 3
13514: PPUSH
13515: LD_INT 1
13517: PPUSH
13518: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13522: LD_INT 31
13524: PPUSH
13525: LD_VAR 0 3
13529: PPUSH
13530: LD_INT 1
13532: PPUSH
13533: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13537: LD_INT 32
13539: PPUSH
13540: LD_VAR 0 3
13544: PPUSH
13545: LD_INT 1
13547: PPUSH
13548: CALL_OW 324
// end ; 4 :
13552: GO 16639
13554: LD_INT 4
13556: DOUBLE
13557: EQUAL
13558: IFTRUE 13562
13560: GO 14510
13562: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13563: LD_INT 35
13565: PPUSH
13566: LD_VAR 0 3
13570: PPUSH
13571: LD_INT 1
13573: PPUSH
13574: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13578: LD_INT 45
13580: PPUSH
13581: LD_VAR 0 3
13585: PPUSH
13586: LD_INT 1
13588: PPUSH
13589: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13593: LD_INT 46
13595: PPUSH
13596: LD_VAR 0 3
13600: PPUSH
13601: LD_INT 1
13603: PPUSH
13604: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13608: LD_INT 47
13610: PPUSH
13611: LD_VAR 0 3
13615: PPUSH
13616: LD_INT 1
13618: PPUSH
13619: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13623: LD_INT 1
13625: PPUSH
13626: LD_VAR 0 3
13630: PPUSH
13631: LD_INT 1
13633: PPUSH
13634: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13638: LD_INT 2
13640: PPUSH
13641: LD_VAR 0 3
13645: PPUSH
13646: LD_INT 1
13648: PPUSH
13649: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13653: LD_INT 11
13655: PPUSH
13656: LD_VAR 0 3
13660: PPUSH
13661: LD_INT 1
13663: PPUSH
13664: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13668: LD_INT 20
13670: PPUSH
13671: LD_VAR 0 3
13675: PPUSH
13676: LD_INT 1
13678: PPUSH
13679: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13683: LD_INT 48
13685: PPUSH
13686: LD_VAR 0 3
13690: PPUSH
13691: LD_INT 1
13693: PPUSH
13694: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13698: LD_INT 49
13700: PPUSH
13701: LD_VAR 0 3
13705: PPUSH
13706: LD_INT 1
13708: PPUSH
13709: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13713: LD_INT 69
13715: PPUSH
13716: LD_VAR 0 3
13720: PPUSH
13721: LD_INT 1
13723: PPUSH
13724: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13728: LD_INT 39
13730: PPUSH
13731: LD_VAR 0 3
13735: PPUSH
13736: LD_INT 1
13738: PPUSH
13739: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13743: LD_INT 34
13745: PPUSH
13746: LD_VAR 0 3
13750: PPUSH
13751: LD_INT 1
13753: PPUSH
13754: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13758: LD_INT 42
13760: PPUSH
13761: LD_VAR 0 3
13765: PPUSH
13766: LD_INT 1
13768: PPUSH
13769: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13773: LD_INT 44
13775: PPUSH
13776: LD_VAR 0 3
13780: PPUSH
13781: LD_INT 1
13783: PPUSH
13784: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13788: LD_INT 41
13790: PPUSH
13791: LD_VAR 0 3
13795: PPUSH
13796: LD_INT 1
13798: PPUSH
13799: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13803: LD_INT 43
13805: PPUSH
13806: LD_VAR 0 3
13810: PPUSH
13811: LD_INT 1
13813: PPUSH
13814: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13818: LD_INT 70
13820: PPUSH
13821: LD_VAR 0 3
13825: PPUSH
13826: LD_INT 1
13828: PPUSH
13829: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13833: LD_INT 51
13835: PPUSH
13836: LD_VAR 0 3
13840: PPUSH
13841: LD_INT 1
13843: PPUSH
13844: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13848: LD_INT 52
13850: PPUSH
13851: LD_VAR 0 3
13855: PPUSH
13856: LD_INT 1
13858: PPUSH
13859: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13863: LD_INT 6
13865: PPUSH
13866: LD_VAR 0 3
13870: PPUSH
13871: LD_INT 1
13873: PPUSH
13874: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13878: LD_INT 15
13880: PPUSH
13881: LD_VAR 0 3
13885: PPUSH
13886: LD_INT 1
13888: PPUSH
13889: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13893: LD_INT 7
13895: PPUSH
13896: LD_VAR 0 3
13900: PPUSH
13901: LD_INT 1
13903: PPUSH
13904: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13908: LD_INT 12
13910: PPUSH
13911: LD_VAR 0 3
13915: PPUSH
13916: LD_INT 1
13918: PPUSH
13919: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13923: LD_INT 18
13925: PPUSH
13926: LD_VAR 0 3
13930: PPUSH
13931: LD_INT 1
13933: PPUSH
13934: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13938: LD_INT 60
13940: PPUSH
13941: LD_VAR 0 3
13945: PPUSH
13946: LD_INT 1
13948: PPUSH
13949: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13953: LD_INT 9
13955: PPUSH
13956: LD_VAR 0 3
13960: PPUSH
13961: LD_INT 1
13963: PPUSH
13964: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13968: LD_INT 30
13970: PPUSH
13971: LD_VAR 0 3
13975: PPUSH
13976: LD_INT 1
13978: PPUSH
13979: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13983: LD_INT 37
13985: PPUSH
13986: LD_VAR 0 3
13990: PPUSH
13991: LD_INT 1
13993: PPUSH
13994: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13998: LD_INT 5
14000: PPUSH
14001: LD_VAR 0 3
14005: PPUSH
14006: LD_INT 1
14008: PPUSH
14009: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14013: LD_INT 66
14015: PPUSH
14016: LD_VAR 0 3
14020: PPUSH
14021: LD_INT 1
14023: PPUSH
14024: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14028: LD_INT 21
14030: PPUSH
14031: LD_VAR 0 3
14035: PPUSH
14036: LD_INT 1
14038: PPUSH
14039: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14043: LD_INT 22
14045: PPUSH
14046: LD_VAR 0 3
14050: PPUSH
14051: LD_INT 1
14053: PPUSH
14054: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
14058: LD_INT 54
14060: PPUSH
14061: LD_VAR 0 3
14065: PPUSH
14066: LD_INT 1
14068: PPUSH
14069: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14073: LD_INT 0
14075: PPUSH
14076: LD_VAR 0 3
14080: PPUSH
14081: LD_INT 1
14083: PPUSH
14084: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
14088: LD_INT 1
14090: PPUSH
14091: LD_VAR 0 3
14095: PPUSH
14096: LD_INT 1
14098: PPUSH
14099: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14103: LD_INT 2
14105: PPUSH
14106: LD_VAR 0 3
14110: PPUSH
14111: LD_INT 1
14113: PPUSH
14114: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
14118: LD_INT 3
14120: PPUSH
14121: LD_VAR 0 3
14125: PPUSH
14126: LD_INT 1
14128: PPUSH
14129: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14133: LD_INT 4
14135: PPUSH
14136: LD_VAR 0 3
14140: PPUSH
14141: LD_INT 1
14143: PPUSH
14144: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
14148: LD_INT 5
14150: PPUSH
14151: LD_VAR 0 3
14155: PPUSH
14156: LD_INT 1
14158: PPUSH
14159: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14163: LD_INT 6
14165: PPUSH
14166: LD_VAR 0 3
14170: PPUSH
14171: LD_INT 1
14173: PPUSH
14174: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
14178: LD_INT 7
14180: PPUSH
14181: LD_VAR 0 3
14185: PPUSH
14186: LD_INT 1
14188: PPUSH
14189: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
14193: LD_INT 8
14195: PPUSH
14196: LD_VAR 0 3
14200: PPUSH
14201: LD_INT 1
14203: PPUSH
14204: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
14208: LD_INT 10
14210: PPUSH
14211: LD_VAR 0 3
14215: PPUSH
14216: LD_INT 1
14218: PPUSH
14219: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
14223: LD_INT 11
14225: PPUSH
14226: LD_VAR 0 3
14230: PPUSH
14231: LD_INT 1
14233: PPUSH
14234: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
14238: LD_INT 12
14240: PPUSH
14241: LD_VAR 0 3
14245: PPUSH
14246: LD_INT 1
14248: PPUSH
14249: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
14253: LD_INT 13
14255: PPUSH
14256: LD_VAR 0 3
14260: PPUSH
14261: LD_INT 1
14263: PPUSH
14264: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
14268: LD_INT 14
14270: PPUSH
14271: LD_VAR 0 3
14275: PPUSH
14276: LD_INT 1
14278: PPUSH
14279: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
14283: LD_INT 15
14285: PPUSH
14286: LD_VAR 0 3
14290: PPUSH
14291: LD_INT 1
14293: PPUSH
14294: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
14298: LD_INT 16
14300: PPUSH
14301: LD_VAR 0 3
14305: PPUSH
14306: LD_INT 1
14308: PPUSH
14309: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
14313: LD_INT 17
14315: PPUSH
14316: LD_VAR 0 3
14320: PPUSH
14321: LD_INT 1
14323: PPUSH
14324: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
14328: LD_INT 19
14330: PPUSH
14331: LD_VAR 0 3
14335: PPUSH
14336: LD_INT 1
14338: PPUSH
14339: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
14343: LD_INT 20
14345: PPUSH
14346: LD_VAR 0 3
14350: PPUSH
14351: LD_INT 1
14353: PPUSH
14354: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
14358: LD_INT 21
14360: PPUSH
14361: LD_VAR 0 3
14365: PPUSH
14366: LD_INT 1
14368: PPUSH
14369: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
14373: LD_INT 23
14375: PPUSH
14376: LD_VAR 0 3
14380: PPUSH
14381: LD_INT 1
14383: PPUSH
14384: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
14388: LD_INT 26
14390: PPUSH
14391: LD_VAR 0 3
14395: PPUSH
14396: LD_INT 1
14398: PPUSH
14399: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
14403: LD_INT 27
14405: PPUSH
14406: LD_VAR 0 3
14410: PPUSH
14411: LD_INT 1
14413: PPUSH
14414: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
14418: LD_INT 28
14420: PPUSH
14421: LD_VAR 0 3
14425: PPUSH
14426: LD_INT 1
14428: PPUSH
14429: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14433: LD_INT 29
14435: PPUSH
14436: LD_VAR 0 3
14440: PPUSH
14441: LD_INT 1
14443: PPUSH
14444: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
14448: LD_INT 30
14450: PPUSH
14451: LD_VAR 0 3
14455: PPUSH
14456: LD_INT 1
14458: PPUSH
14459: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14463: LD_INT 31
14465: PPUSH
14466: LD_VAR 0 3
14470: PPUSH
14471: LD_INT 1
14473: PPUSH
14474: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
14478: LD_INT 32
14480: PPUSH
14481: LD_VAR 0 3
14485: PPUSH
14486: LD_INT 1
14488: PPUSH
14489: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
14493: LD_INT 36
14495: PPUSH
14496: LD_VAR 0 3
14500: PPUSH
14501: LD_INT 1
14503: PPUSH
14504: CALL_OW 324
// end ; 5 :
14508: GO 16639
14510: LD_INT 5
14512: DOUBLE
14513: EQUAL
14514: IFTRUE 14518
14516: GO 15631
14518: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14519: LD_INT 35
14521: PPUSH
14522: LD_VAR 0 3
14526: PPUSH
14527: LD_INT 1
14529: PPUSH
14530: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14534: LD_INT 45
14536: PPUSH
14537: LD_VAR 0 3
14541: PPUSH
14542: LD_INT 1
14544: PPUSH
14545: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14549: LD_INT 46
14551: PPUSH
14552: LD_VAR 0 3
14556: PPUSH
14557: LD_INT 1
14559: PPUSH
14560: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14564: LD_INT 47
14566: PPUSH
14567: LD_VAR 0 3
14571: PPUSH
14572: LD_INT 1
14574: PPUSH
14575: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14579: LD_INT 1
14581: PPUSH
14582: LD_VAR 0 3
14586: PPUSH
14587: LD_INT 1
14589: PPUSH
14590: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14594: LD_INT 2
14596: PPUSH
14597: LD_VAR 0 3
14601: PPUSH
14602: LD_INT 1
14604: PPUSH
14605: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14609: LD_INT 11
14611: PPUSH
14612: LD_VAR 0 3
14616: PPUSH
14617: LD_INT 1
14619: PPUSH
14620: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
14624: LD_INT 20
14626: PPUSH
14627: LD_VAR 0 3
14631: PPUSH
14632: LD_INT 1
14634: PPUSH
14635: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14639: LD_INT 48
14641: PPUSH
14642: LD_VAR 0 3
14646: PPUSH
14647: LD_INT 1
14649: PPUSH
14650: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
14654: LD_INT 49
14656: PPUSH
14657: LD_VAR 0 3
14661: PPUSH
14662: LD_INT 1
14664: PPUSH
14665: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14669: LD_INT 69
14671: PPUSH
14672: LD_VAR 0 3
14676: PPUSH
14677: LD_INT 1
14679: PPUSH
14680: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14684: LD_INT 39
14686: PPUSH
14687: LD_VAR 0 3
14691: PPUSH
14692: LD_INT 1
14694: PPUSH
14695: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
14699: LD_INT 34
14701: PPUSH
14702: LD_VAR 0 3
14706: PPUSH
14707: LD_INT 1
14709: PPUSH
14710: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
14714: LD_INT 42
14716: PPUSH
14717: LD_VAR 0 3
14721: PPUSH
14722: LD_INT 1
14724: PPUSH
14725: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
14729: LD_INT 44
14731: PPUSH
14732: LD_VAR 0 3
14736: PPUSH
14737: LD_INT 1
14739: PPUSH
14740: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
14744: LD_INT 41
14746: PPUSH
14747: LD_VAR 0 3
14751: PPUSH
14752: LD_INT 1
14754: PPUSH
14755: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
14759: LD_INT 40
14761: PPUSH
14762: LD_VAR 0 3
14766: PPUSH
14767: LD_INT 1
14769: PPUSH
14770: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14774: LD_INT 43
14776: PPUSH
14777: LD_VAR 0 3
14781: PPUSH
14782: LD_INT 1
14784: PPUSH
14785: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
14789: LD_INT 70
14791: PPUSH
14792: LD_VAR 0 3
14796: PPUSH
14797: LD_INT 1
14799: PPUSH
14800: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14804: LD_INT 51
14806: PPUSH
14807: LD_VAR 0 3
14811: PPUSH
14812: LD_INT 1
14814: PPUSH
14815: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
14819: LD_INT 52
14821: PPUSH
14822: LD_VAR 0 3
14826: PPUSH
14827: LD_INT 1
14829: PPUSH
14830: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14834: LD_INT 6
14836: PPUSH
14837: LD_VAR 0 3
14841: PPUSH
14842: LD_INT 1
14844: PPUSH
14845: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
14849: LD_INT 15
14851: PPUSH
14852: LD_VAR 0 3
14856: PPUSH
14857: LD_INT 1
14859: PPUSH
14860: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
14864: LD_INT 7
14866: PPUSH
14867: LD_VAR 0 3
14871: PPUSH
14872: LD_INT 1
14874: PPUSH
14875: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
14879: LD_INT 12
14881: PPUSH
14882: LD_VAR 0 3
14886: PPUSH
14887: LD_INT 1
14889: PPUSH
14890: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
14894: LD_INT 17
14896: PPUSH
14897: LD_VAR 0 3
14901: PPUSH
14902: LD_INT 1
14904: PPUSH
14905: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
14909: LD_INT 18
14911: PPUSH
14912: LD_VAR 0 3
14916: PPUSH
14917: LD_INT 1
14919: PPUSH
14920: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
14924: LD_INT 60
14926: PPUSH
14927: LD_VAR 0 3
14931: PPUSH
14932: LD_INT 1
14934: PPUSH
14935: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
14939: LD_INT 32
14941: PPUSH
14942: LD_VAR 0 3
14946: PPUSH
14947: LD_INT 1
14949: PPUSH
14950: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
14954: LD_INT 9
14956: PPUSH
14957: LD_VAR 0 3
14961: PPUSH
14962: LD_INT 1
14964: PPUSH
14965: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
14969: LD_INT 57
14971: PPUSH
14972: LD_VAR 0 3
14976: PPUSH
14977: LD_INT 1
14979: PPUSH
14980: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
14984: LD_INT 30
14986: PPUSH
14987: LD_VAR 0 3
14991: PPUSH
14992: LD_INT 1
14994: PPUSH
14995: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
14999: LD_INT 37
15001: PPUSH
15002: LD_VAR 0 3
15006: PPUSH
15007: LD_INT 1
15009: PPUSH
15010: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
15014: LD_INT 63
15016: PPUSH
15017: LD_VAR 0 3
15021: PPUSH
15022: LD_INT 1
15024: PPUSH
15025: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
15029: LD_INT 3
15031: PPUSH
15032: LD_VAR 0 3
15036: PPUSH
15037: LD_INT 1
15039: PPUSH
15040: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
15044: LD_INT 4
15046: PPUSH
15047: LD_VAR 0 3
15051: PPUSH
15052: LD_INT 1
15054: PPUSH
15055: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
15059: LD_INT 5
15061: PPUSH
15062: LD_VAR 0 3
15066: PPUSH
15067: LD_INT 1
15069: PPUSH
15070: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
15074: LD_INT 66
15076: PPUSH
15077: LD_VAR 0 3
15081: PPUSH
15082: LD_INT 1
15084: PPUSH
15085: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
15089: LD_INT 21
15091: PPUSH
15092: LD_VAR 0 3
15096: PPUSH
15097: LD_INT 1
15099: PPUSH
15100: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
15104: LD_INT 22
15106: PPUSH
15107: LD_VAR 0 3
15111: PPUSH
15112: LD_INT 1
15114: PPUSH
15115: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
15119: LD_INT 19
15121: PPUSH
15122: LD_VAR 0 3
15126: PPUSH
15127: LD_INT 1
15129: PPUSH
15130: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
15134: LD_INT 54
15136: PPUSH
15137: LD_VAR 0 3
15141: PPUSH
15142: LD_INT 1
15144: PPUSH
15145: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
15149: LD_INT 55
15151: PPUSH
15152: LD_VAR 0 3
15156: PPUSH
15157: LD_INT 1
15159: PPUSH
15160: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15164: LD_INT 0
15166: PPUSH
15167: LD_VAR 0 3
15171: PPUSH
15172: LD_INT 1
15174: PPUSH
15175: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
15179: LD_INT 1
15181: PPUSH
15182: LD_VAR 0 3
15186: PPUSH
15187: LD_INT 1
15189: PPUSH
15190: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15194: LD_INT 2
15196: PPUSH
15197: LD_VAR 0 3
15201: PPUSH
15202: LD_INT 1
15204: PPUSH
15205: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
15209: LD_INT 3
15211: PPUSH
15212: LD_VAR 0 3
15216: PPUSH
15217: LD_INT 1
15219: PPUSH
15220: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15224: LD_INT 4
15226: PPUSH
15227: LD_VAR 0 3
15231: PPUSH
15232: LD_INT 1
15234: PPUSH
15235: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
15239: LD_INT 5
15241: PPUSH
15242: LD_VAR 0 3
15246: PPUSH
15247: LD_INT 1
15249: PPUSH
15250: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15254: LD_INT 6
15256: PPUSH
15257: LD_VAR 0 3
15261: PPUSH
15262: LD_INT 1
15264: PPUSH
15265: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
15269: LD_INT 7
15271: PPUSH
15272: LD_VAR 0 3
15276: PPUSH
15277: LD_INT 1
15279: PPUSH
15280: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
15284: LD_INT 8
15286: PPUSH
15287: LD_VAR 0 3
15291: PPUSH
15292: LD_INT 1
15294: PPUSH
15295: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
15299: LD_INT 10
15301: PPUSH
15302: LD_VAR 0 3
15306: PPUSH
15307: LD_INT 1
15309: PPUSH
15310: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
15314: LD_INT 11
15316: PPUSH
15317: LD_VAR 0 3
15321: PPUSH
15322: LD_INT 1
15324: PPUSH
15325: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
15329: LD_INT 12
15331: PPUSH
15332: LD_VAR 0 3
15336: PPUSH
15337: LD_INT 1
15339: PPUSH
15340: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
15344: LD_INT 13
15346: PPUSH
15347: LD_VAR 0 3
15351: PPUSH
15352: LD_INT 1
15354: PPUSH
15355: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
15359: LD_INT 14
15361: PPUSH
15362: LD_VAR 0 3
15366: PPUSH
15367: LD_INT 1
15369: PPUSH
15370: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
15374: LD_INT 15
15376: PPUSH
15377: LD_VAR 0 3
15381: PPUSH
15382: LD_INT 1
15384: PPUSH
15385: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
15389: LD_INT 16
15391: PPUSH
15392: LD_VAR 0 3
15396: PPUSH
15397: LD_INT 1
15399: PPUSH
15400: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
15404: LD_INT 17
15406: PPUSH
15407: LD_VAR 0 3
15411: PPUSH
15412: LD_INT 1
15414: PPUSH
15415: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
15419: LD_INT 18
15421: PPUSH
15422: LD_VAR 0 3
15426: PPUSH
15427: LD_INT 1
15429: PPUSH
15430: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
15434: LD_INT 19
15436: PPUSH
15437: LD_VAR 0 3
15441: PPUSH
15442: LD_INT 1
15444: PPUSH
15445: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
15449: LD_INT 20
15451: PPUSH
15452: LD_VAR 0 3
15456: PPUSH
15457: LD_INT 1
15459: PPUSH
15460: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
15464: LD_INT 21
15466: PPUSH
15467: LD_VAR 0 3
15471: PPUSH
15472: LD_INT 1
15474: PPUSH
15475: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
15479: LD_INT 23
15481: PPUSH
15482: LD_VAR 0 3
15486: PPUSH
15487: LD_INT 1
15489: PPUSH
15490: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
15494: LD_INT 26
15496: PPUSH
15497: LD_VAR 0 3
15501: PPUSH
15502: LD_INT 1
15504: PPUSH
15505: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15509: LD_INT 27
15511: PPUSH
15512: LD_VAR 0 3
15516: PPUSH
15517: LD_INT 1
15519: PPUSH
15520: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
15524: LD_INT 28
15526: PPUSH
15527: LD_VAR 0 3
15531: PPUSH
15532: LD_INT 1
15534: PPUSH
15535: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15539: LD_INT 29
15541: PPUSH
15542: LD_VAR 0 3
15546: PPUSH
15547: LD_INT 1
15549: PPUSH
15550: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
15554: LD_INT 30
15556: PPUSH
15557: LD_VAR 0 3
15561: PPUSH
15562: LD_INT 1
15564: PPUSH
15565: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15569: LD_INT 31
15571: PPUSH
15572: LD_VAR 0 3
15576: PPUSH
15577: LD_INT 1
15579: PPUSH
15580: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15584: LD_INT 32
15586: PPUSH
15587: LD_VAR 0 3
15591: PPUSH
15592: LD_INT 1
15594: PPUSH
15595: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
15599: LD_INT 33
15601: PPUSH
15602: LD_VAR 0 3
15606: PPUSH
15607: LD_INT 1
15609: PPUSH
15610: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
15614: LD_INT 36
15616: PPUSH
15617: LD_VAR 0 3
15621: PPUSH
15622: LD_INT 1
15624: PPUSH
15625: CALL_OW 324
// end ; 6 :
15629: GO 16639
15631: LD_INT 6
15633: DOUBLE
15634: EQUAL
15635: IFTRUE 15639
15637: GO 16564
15639: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15640: LD_INT 35
15642: PPUSH
15643: LD_VAR 0 3
15647: PPUSH
15648: LD_INT 1
15650: PPUSH
15651: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15655: LD_INT 45
15657: PPUSH
15658: LD_VAR 0 3
15662: PPUSH
15663: LD_INT 1
15665: PPUSH
15666: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15670: LD_INT 46
15672: PPUSH
15673: LD_VAR 0 3
15677: PPUSH
15678: LD_INT 1
15680: PPUSH
15681: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15685: LD_INT 47
15687: PPUSH
15688: LD_VAR 0 3
15692: PPUSH
15693: LD_INT 1
15695: PPUSH
15696: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15700: LD_INT 1
15702: PPUSH
15703: LD_VAR 0 3
15707: PPUSH
15708: LD_INT 1
15710: PPUSH
15711: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15715: LD_INT 2
15717: PPUSH
15718: LD_VAR 0 3
15722: PPUSH
15723: LD_INT 1
15725: PPUSH
15726: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15730: LD_INT 11
15732: PPUSH
15733: LD_VAR 0 3
15737: PPUSH
15738: LD_INT 1
15740: PPUSH
15741: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15745: LD_INT 20
15747: PPUSH
15748: LD_VAR 0 3
15752: PPUSH
15753: LD_INT 1
15755: PPUSH
15756: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15760: LD_INT 48
15762: PPUSH
15763: LD_VAR 0 3
15767: PPUSH
15768: LD_INT 1
15770: PPUSH
15771: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15775: LD_INT 49
15777: PPUSH
15778: LD_VAR 0 3
15782: PPUSH
15783: LD_INT 1
15785: PPUSH
15786: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
15790: LD_INT 50
15792: PPUSH
15793: LD_VAR 0 3
15797: PPUSH
15798: LD_INT 1
15800: PPUSH
15801: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15805: LD_INT 69
15807: PPUSH
15808: LD_VAR 0 3
15812: PPUSH
15813: LD_INT 1
15815: PPUSH
15816: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15820: LD_INT 39
15822: PPUSH
15823: LD_VAR 0 3
15827: PPUSH
15828: LD_INT 1
15830: PPUSH
15831: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15835: LD_INT 34
15837: PPUSH
15838: LD_VAR 0 3
15842: PPUSH
15843: LD_INT 1
15845: PPUSH
15846: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15850: LD_INT 42
15852: PPUSH
15853: LD_VAR 0 3
15857: PPUSH
15858: LD_INT 1
15860: PPUSH
15861: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15865: LD_INT 44
15867: PPUSH
15868: LD_VAR 0 3
15872: PPUSH
15873: LD_INT 1
15875: PPUSH
15876: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15880: LD_INT 41
15882: PPUSH
15883: LD_VAR 0 3
15887: PPUSH
15888: LD_INT 1
15890: PPUSH
15891: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
15895: LD_INT 13
15897: PPUSH
15898: LD_VAR 0 3
15902: PPUSH
15903: LD_INT 1
15905: PPUSH
15906: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
15910: LD_INT 40
15912: PPUSH
15913: LD_VAR 0 3
15917: PPUSH
15918: LD_INT 1
15920: PPUSH
15921: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15925: LD_INT 43
15927: PPUSH
15928: LD_VAR 0 3
15932: PPUSH
15933: LD_INT 1
15935: PPUSH
15936: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15940: LD_INT 70
15942: PPUSH
15943: LD_VAR 0 3
15947: PPUSH
15948: LD_INT 1
15950: PPUSH
15951: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
15955: LD_INT 23
15957: PPUSH
15958: LD_VAR 0 3
15962: PPUSH
15963: LD_INT 1
15965: PPUSH
15966: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15970: LD_INT 51
15972: PPUSH
15973: LD_VAR 0 3
15977: PPUSH
15978: LD_INT 1
15980: PPUSH
15981: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15985: LD_INT 52
15987: PPUSH
15988: LD_VAR 0 3
15992: PPUSH
15993: LD_INT 1
15995: PPUSH
15996: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16000: LD_INT 6
16002: PPUSH
16003: LD_VAR 0 3
16007: PPUSH
16008: LD_INT 1
16010: PPUSH
16011: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16015: LD_INT 15
16017: PPUSH
16018: LD_VAR 0 3
16022: PPUSH
16023: LD_INT 1
16025: PPUSH
16026: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16030: LD_INT 7
16032: PPUSH
16033: LD_VAR 0 3
16037: PPUSH
16038: LD_INT 1
16040: PPUSH
16041: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16045: LD_INT 12
16047: PPUSH
16048: LD_VAR 0 3
16052: PPUSH
16053: LD_INT 1
16055: PPUSH
16056: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
16060: LD_INT 10
16062: PPUSH
16063: LD_VAR 0 3
16067: PPUSH
16068: LD_INT 1
16070: PPUSH
16071: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
16075: LD_INT 17
16077: PPUSH
16078: LD_VAR 0 3
16082: PPUSH
16083: LD_INT 1
16085: PPUSH
16086: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
16090: LD_INT 18
16092: PPUSH
16093: LD_VAR 0 3
16097: PPUSH
16098: LD_INT 1
16100: PPUSH
16101: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
16105: LD_INT 60
16107: PPUSH
16108: LD_VAR 0 3
16112: PPUSH
16113: LD_INT 1
16115: PPUSH
16116: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
16120: LD_INT 61
16122: PPUSH
16123: LD_VAR 0 3
16127: PPUSH
16128: LD_INT 1
16130: PPUSH
16131: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
16135: LD_INT 32
16137: PPUSH
16138: LD_VAR 0 3
16142: PPUSH
16143: LD_INT 1
16145: PPUSH
16146: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
16150: LD_INT 27
16152: PPUSH
16153: LD_VAR 0 3
16157: PPUSH
16158: LD_INT 1
16160: PPUSH
16161: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
16165: LD_INT 36
16167: PPUSH
16168: LD_VAR 0 3
16172: PPUSH
16173: LD_INT 1
16175: PPUSH
16176: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
16180: LD_INT 33
16182: PPUSH
16183: LD_VAR 0 3
16187: PPUSH
16188: LD_INT 1
16190: PPUSH
16191: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
16195: LD_INT 9
16197: PPUSH
16198: LD_VAR 0 3
16202: PPUSH
16203: LD_INT 1
16205: PPUSH
16206: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
16210: LD_INT 38
16212: PPUSH
16213: LD_VAR 0 3
16217: PPUSH
16218: LD_INT 1
16220: PPUSH
16221: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
16225: LD_INT 57
16227: PPUSH
16228: LD_VAR 0 3
16232: PPUSH
16233: LD_INT 1
16235: PPUSH
16236: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
16240: LD_INT 58
16242: PPUSH
16243: LD_VAR 0 3
16247: PPUSH
16248: LD_INT 1
16250: PPUSH
16251: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
16255: LD_INT 28
16257: PPUSH
16258: LD_VAR 0 3
16262: PPUSH
16263: LD_INT 1
16265: PPUSH
16266: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
16270: LD_INT 29
16272: PPUSH
16273: LD_VAR 0 3
16277: PPUSH
16278: LD_INT 1
16280: PPUSH
16281: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
16285: LD_INT 30
16287: PPUSH
16288: LD_VAR 0 3
16292: PPUSH
16293: LD_INT 1
16295: PPUSH
16296: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
16300: LD_INT 37
16302: PPUSH
16303: LD_VAR 0 3
16307: PPUSH
16308: LD_INT 1
16310: PPUSH
16311: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
16315: LD_INT 63
16317: PPUSH
16318: LD_VAR 0 3
16322: PPUSH
16323: LD_INT 1
16325: PPUSH
16326: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
16330: LD_INT 64
16332: PPUSH
16333: LD_VAR 0 3
16337: PPUSH
16338: LD_INT 1
16340: PPUSH
16341: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
16345: LD_INT 3
16347: PPUSH
16348: LD_VAR 0 3
16352: PPUSH
16353: LD_INT 1
16355: PPUSH
16356: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
16360: LD_INT 4
16362: PPUSH
16363: LD_VAR 0 3
16367: PPUSH
16368: LD_INT 1
16370: PPUSH
16371: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
16375: LD_INT 5
16377: PPUSH
16378: LD_VAR 0 3
16382: PPUSH
16383: LD_INT 1
16385: PPUSH
16386: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
16390: LD_INT 8
16392: PPUSH
16393: LD_VAR 0 3
16397: PPUSH
16398: LD_INT 1
16400: PPUSH
16401: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
16405: LD_INT 66
16407: PPUSH
16408: LD_VAR 0 3
16412: PPUSH
16413: LD_INT 1
16415: PPUSH
16416: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
16420: LD_INT 67
16422: PPUSH
16423: LD_VAR 0 3
16427: PPUSH
16428: LD_INT 1
16430: PPUSH
16431: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
16435: LD_INT 21
16437: PPUSH
16438: LD_VAR 0 3
16442: PPUSH
16443: LD_INT 1
16445: PPUSH
16446: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
16450: LD_INT 22
16452: PPUSH
16453: LD_VAR 0 3
16457: PPUSH
16458: LD_INT 1
16460: PPUSH
16461: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
16465: LD_INT 19
16467: PPUSH
16468: LD_VAR 0 3
16472: PPUSH
16473: LD_INT 1
16475: PPUSH
16476: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
16480: LD_INT 26
16482: PPUSH
16483: LD_VAR 0 3
16487: PPUSH
16488: LD_INT 1
16490: PPUSH
16491: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
16495: LD_INT 54
16497: PPUSH
16498: LD_VAR 0 3
16502: PPUSH
16503: LD_INT 1
16505: PPUSH
16506: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
16510: LD_INT 55
16512: PPUSH
16513: LD_VAR 0 3
16517: PPUSH
16518: LD_INT 1
16520: PPUSH
16521: CALL_OW 322
// for i = 0 to 39 do
16525: LD_ADDR_VAR 0 4
16529: PUSH
16530: DOUBLE
16531: LD_INT 0
16533: DEC
16534: ST_TO_ADDR
16535: LD_INT 39
16537: PUSH
16538: FOR_TO
16539: IFFALSE 16560
// SetRestrict ( i , side , true ) ;
16541: LD_VAR 0 4
16545: PPUSH
16546: LD_VAR 0 3
16550: PPUSH
16551: LD_INT 1
16553: PPUSH
16554: CALL_OW 324
16558: GO 16538
16560: POP
16561: POP
// end ; else
16562: GO 16639
16564: POP
// begin for i = 1 to 73 do
16565: LD_ADDR_VAR 0 4
16569: PUSH
16570: DOUBLE
16571: LD_INT 1
16573: DEC
16574: ST_TO_ADDR
16575: LD_INT 73
16577: PUSH
16578: FOR_TO
16579: IFFALSE 16600
// SetTech ( i , side , state_enabled ) ;
16581: LD_VAR 0 4
16585: PPUSH
16586: LD_VAR 0 3
16590: PPUSH
16591: LD_INT 1
16593: PPUSH
16594: CALL_OW 322
16598: GO 16578
16600: POP
16601: POP
// for i = 0 to 39 do
16602: LD_ADDR_VAR 0 4
16606: PUSH
16607: DOUBLE
16608: LD_INT 0
16610: DEC
16611: ST_TO_ADDR
16612: LD_INT 39
16614: PUSH
16615: FOR_TO
16616: IFFALSE 16637
// SetRestrict ( i , side , true ) ;
16618: LD_VAR 0 4
16622: PPUSH
16623: LD_VAR 0 3
16627: PPUSH
16628: LD_INT 1
16630: PPUSH
16631: CALL_OW 324
16635: GO 16615
16637: POP
16638: POP
// end ; end ; end ;
16639: GO 12644
16641: POP
16642: POP
// end ; end_of_file
16643: LD_VAR 0 2
16647: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
16648: LD_INT 0
16650: PPUSH
16651: PPUSH
// enable ( 98 ) ;
16652: LD_INT 98
16654: ENABLE_MARKED
// GameEnded = false ;
16655: LD_ADDR_LOC 29
16659: PUSH
16660: LD_INT 0
16662: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
16663: LD_ADDR_LOC 28
16667: PUSH
16668: LD_INT 0
16670: PUSH
16671: LD_INT 0
16673: PUSH
16674: LD_INT 0
16676: PUSH
16677: LD_INT 0
16679: PUSH
16680: LD_INT 0
16682: PUSH
16683: LD_INT 0
16685: PUSH
16686: LD_INT 0
16688: PUSH
16689: LD_INT 0
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: ST_TO_ADDR
// unfoged = false ;
16702: LD_ADDR_LOC 30
16706: PUSH
16707: LD_INT 0
16709: ST_TO_ADDR
// for i = 1 to side_positions do
16710: LD_ADDR_VAR 0 2
16714: PUSH
16715: DOUBLE
16716: LD_INT 1
16718: DEC
16719: ST_TO_ADDR
16720: LD_EXP 20
16724: PUSH
16725: FOR_TO
16726: IFFALSE 16766
// if not side_positions [ i ] then
16728: LD_EXP 20
16732: PUSH
16733: LD_VAR 0 2
16737: ARRAY
16738: NOT
16739: IFFALSE 16764
// defaited = replace ( defaited , i , true ) ;
16741: LD_ADDR_LOC 28
16745: PUSH
16746: LD_LOC 28
16750: PPUSH
16751: LD_VAR 0 2
16755: PPUSH
16756: LD_INT 1
16758: PPUSH
16759: CALL_OW 1
16763: ST_TO_ADDR
16764: GO 16725
16766: POP
16767: POP
// end ;
16768: LD_VAR 0 1
16772: RET
// function CanWinLoose ; begin
16773: LD_INT 0
16775: PPUSH
// Result := true ;
16776: LD_ADDR_VAR 0 1
16780: PUSH
16781: LD_INT 1
16783: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
16784: CALL_OW 518
16788: PUSH
16789: CALL_OW 519
16793: PUSH
16794: LD_INT 0
16796: GREATER
16797: AND
16798: IFFALSE 16808
// Result := false ;
16800: LD_ADDR_VAR 0 1
16804: PUSH
16805: LD_INT 0
16807: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
16808: CALL_OW 531
16812: PUSH
16813: CALL_OW 519
16817: PUSH
16818: LD_INT 1
16820: GREATER
16821: AND
16822: IFFALSE 16832
// Result := false ;
16824: LD_ADDR_VAR 0 1
16828: PUSH
16829: LD_INT 0
16831: ST_TO_ADDR
// end ;
16832: LD_VAR 0 1
16836: RET
// export function HasPower ( i ) ; var k , h ; begin
16837: LD_INT 0
16839: PPUSH
16840: PPUSH
16841: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
16842: LD_VAR 0 1
16846: PPUSH
16847: CALL_OW 108
16851: NOT
16852: PUSH
16853: LD_EXP 19
16857: PUSH
16858: LD_VAR 0 1
16862: ARRAY
16863: NOT
16864: AND
16865: PUSH
16866: LD_OWVAR 4
16870: AND
16871: IFFALSE 16883
// begin result = false ;
16873: LD_ADDR_VAR 0 2
16877: PUSH
16878: LD_INT 0
16880: ST_TO_ADDR
// end else
16881: GO 17178
// case def_win_rules of 0 :
16883: LD_EXP 15
16887: PUSH
16888: LD_INT 0
16890: DOUBLE
16891: EQUAL
16892: IFTRUE 16896
16894: GO 17059
16896: POP
// if def_people_respawning then
16897: LD_EXP 53
16901: IFFALSE 16992
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
16903: LD_ADDR_VAR 0 2
16907: PUSH
16908: LD_INT 22
16910: PUSH
16911: LD_VAR 0 1
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: PUSH
16920: LD_INT 2
16922: PUSH
16923: LD_INT 21
16925: PUSH
16926: LD_INT 1
16928: PUSH
16929: EMPTY
16930: LIST
16931: LIST
16932: PUSH
16933: LD_INT 33
16935: PUSH
16936: LD_INT 3
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PUSH
16943: LD_INT 33
16945: PUSH
16946: LD_INT 5
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: PUSH
16953: LD_INT 30
16955: PUSH
16956: LD_INT 0
16958: PUSH
16959: EMPTY
16960: LIST
16961: LIST
16962: PUSH
16963: LD_INT 30
16965: PUSH
16966: LD_INT 1
16968: PUSH
16969: EMPTY
16970: LIST
16971: LIST
16972: PUSH
16973: EMPTY
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: PPUSH
16985: CALL_OW 69
16989: ST_TO_ADDR
16990: GO 17057
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
16992: LD_ADDR_VAR 0 2
16996: PUSH
16997: LD_INT 22
16999: PUSH
17000: LD_VAR 0 1
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: PUSH
17009: LD_INT 2
17011: PUSH
17012: LD_INT 21
17014: PUSH
17015: LD_INT 1
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: PUSH
17022: LD_INT 33
17024: PUSH
17025: LD_INT 3
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: PUSH
17032: LD_INT 33
17034: PUSH
17035: LD_INT 5
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: PPUSH
17052: CALL_OW 69
17056: ST_TO_ADDR
17057: GO 17178
17059: LD_INT 1
17061: DOUBLE
17062: EQUAL
17063: IFTRUE 17067
17065: GO 17106
17067: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
17068: LD_ADDR_VAR 0 2
17072: PUSH
17073: LD_INT 22
17075: PUSH
17076: LD_VAR 0 1
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PUSH
17085: LD_INT 21
17087: PUSH
17088: LD_INT 1
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PPUSH
17099: CALL_OW 69
17103: ST_TO_ADDR
17104: GO 17178
17106: LD_INT 2
17108: DOUBLE
17109: EQUAL
17110: IFTRUE 17114
17112: GO 17177
17114: POP
// begin h = false ;
17115: LD_ADDR_VAR 0 4
17119: PUSH
17120: LD_INT 0
17122: ST_TO_ADDR
// for k in heroes [ i ] do
17123: LD_ADDR_VAR 0 3
17127: PUSH
17128: LD_EXP 31
17132: PUSH
17133: LD_VAR 0 1
17137: ARRAY
17138: PUSH
17139: FOR_IN
17140: IFFALSE 17163
// if IsLive ( k ) then
17142: LD_VAR 0 3
17146: PPUSH
17147: CALL_OW 300
17151: IFFALSE 17161
// h = true ;
17153: LD_ADDR_VAR 0 4
17157: PUSH
17158: LD_INT 1
17160: ST_TO_ADDR
17161: GO 17139
17163: POP
17164: POP
// Result := h ;
17165: LD_ADDR_VAR 0 2
17169: PUSH
17170: LD_VAR 0 4
17174: ST_TO_ADDR
// end ; end ;
17175: GO 17178
17177: POP
// end ;
17178: LD_VAR 0 2
17182: RET
// function AlliedSides ( i , j ) ; begin
17183: LD_INT 0
17185: PPUSH
// Result := false ;
17186: LD_ADDR_VAR 0 3
17190: PUSH
17191: LD_INT 0
17193: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
17194: LD_VAR 0 1
17198: PPUSH
17199: LD_VAR 0 2
17203: PPUSH
17204: CALL_OW 81
17208: PUSH
17209: LD_INT 1
17211: EQUAL
17212: PUSH
17213: LD_VAR 0 2
17217: PPUSH
17218: LD_VAR 0 1
17222: PPUSH
17223: CALL_OW 81
17227: PUSH
17228: LD_INT 1
17230: EQUAL
17231: AND
17232: PUSH
17233: LD_VAR 0 1
17237: PPUSH
17238: CALL_OW 83
17242: AND
17243: PUSH
17244: LD_VAR 0 2
17248: PPUSH
17249: CALL_OW 83
17253: AND
17254: IFFALSE 17264
// Result := true ;
17256: LD_ADDR_VAR 0 3
17260: PUSH
17261: LD_INT 1
17263: ST_TO_ADDR
// end ;
17264: LD_VAR 0 3
17268: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
17269: CALL 16773 0 0
17273: PUSH
17274: LD_LOC 29
17278: NOT
17279: AND
17280: IFFALSE 17296
17282: GO 17284
17284: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
17285: LD_ADDR_EXP 59
17289: PUSH
17290: LD_STRING #Player-Ended
17292: PUSH
17293: EMPTY
17294: LIST
17295: ST_TO_ADDR
17296: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
17297: CALL 16773 0 0
17301: PUSH
17302: LD_LOC 29
17306: AND
17307: IFFALSE 17316
17309: GO 17311
17311: DISABLE
// YouLostInMultiplayer ;
17312: CALL_OW 107
17316: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
17317: CALL 16773 0 0
17321: NOT
17322: PUSH
17323: CALL_OW 531
17327: NOT
17328: AND
17329: IFFALSE 17345
17331: GO 17333
17333: DISABLE
// WaitServerStrings = [ #server-wait ] ;
17334: LD_ADDR_EXP 59
17338: PUSH
17339: LD_STRING #server-wait
17341: PUSH
17342: EMPTY
17343: LIST
17344: ST_TO_ADDR
17345: END
// every 100 trigger IAmSpec do
17346: CALL_OW 531
17350: IFFALSE 17366
17352: GO 17354
17354: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
17355: LD_ADDR_EXP 59
17359: PUSH
17360: LD_STRING #Player-IAmSpec
17362: PUSH
17363: EMPTY
17364: LIST
17365: ST_TO_ADDR
17366: END
// every 100 trigger GameEnded and IAmSpec do
17367: LD_LOC 29
17371: PUSH
17372: CALL_OW 531
17376: AND
17377: IFFALSE 17386
17379: GO 17381
17381: DISABLE
// YouLostInMultiplayer ;
17382: CALL_OW 107
17386: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
17387: CALL 16773 0 0
17391: PUSH
17392: LD_LOC 29
17396: NOT
17397: AND
17398: IFFALSE 17414
17400: GO 17402
17402: DISABLE
// WaitServerStrings = [ $player-win ] ;
17403: LD_ADDR_EXP 59
17407: PUSH
17408: LD_STRING $player-win
17410: PUSH
17411: EMPTY
17412: LIST
17413: ST_TO_ADDR
17414: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
17415: CALL 16773 0 0
17419: PUSH
17420: LD_LOC 29
17424: AND
17425: IFFALSE 17449
17427: GO 17429
17429: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
17430: LD_EXP 21
17434: PUSH
17435: LD_OWVAR 2
17439: ARRAY
17440: PPUSH
17441: CALL 12282 0 1
// YouWinInMultiplayer ;
17445: CALL_OW 106
// end ;
17449: END
// every 100 trigger isEditor marked 401 do
17450: LD_OWVAR 84
17454: IFFALSE 17470
17456: GO 17458
17458: DISABLE
// Debug_Strings = [ You won ] ;
17459: LD_ADDR_OWVAR 48
17463: PUSH
17464: LD_STRING You won
17466: PUSH
17467: EMPTY
17468: LIST
17469: ST_TO_ADDR
17470: END
// every 100 trigger isEditor marked 400 do
17471: LD_OWVAR 84
17475: IFFALSE 17491
17477: GO 17479
17479: DISABLE
// Debug_Strings = [ You loss ] ;
17480: LD_ADDR_OWVAR 48
17484: PUSH
17485: LD_STRING You loss
17487: PUSH
17488: EMPTY
17489: LIST
17490: ST_TO_ADDR
17491: END
// every 100 marked 98 do var i , un ;
17492: GO 17494
17494: DISABLE
17495: LD_INT 0
17497: PPUSH
17498: PPUSH
// begin for i = 1 to side_positions do
17499: LD_ADDR_VAR 0 1
17503: PUSH
17504: DOUBLE
17505: LD_INT 1
17507: DEC
17508: ST_TO_ADDR
17509: LD_EXP 20
17513: PUSH
17514: FOR_TO
17515: IFFALSE 17598
// if side_positions [ i ] then
17517: LD_EXP 20
17521: PUSH
17522: LD_VAR 0 1
17526: ARRAY
17527: IFFALSE 17596
// if not HasPower ( i ) and not Defaited [ i ] then
17529: LD_VAR 0 1
17533: PPUSH
17534: CALL 16837 0 1
17538: NOT
17539: PUSH
17540: LD_LOC 28
17544: PUSH
17545: LD_VAR 0 1
17549: ARRAY
17550: NOT
17551: AND
17552: IFFALSE 17596
// begin Defaited = replace ( Defaited , i , true ) ;
17554: LD_ADDR_LOC 28
17558: PUSH
17559: LD_LOC 28
17563: PPUSH
17564: LD_VAR 0 1
17568: PPUSH
17569: LD_INT 1
17571: PPUSH
17572: CALL_OW 1
17576: ST_TO_ADDR
// if i = your_side then
17577: LD_VAR 0 1
17581: PUSH
17582: LD_OWVAR 2
17586: EQUAL
17587: IFFALSE 17596
// begin Multiplayer_Loose_Message ;
17589: CALL_OW 521
// enable ( 400 ) ;
17593: LD_INT 400
17595: ENABLE_MARKED
// end ; end ;
17596: GO 17514
17598: POP
17599: POP
// if not Unfoged and defaited [ your_side ] then
17600: LD_LOC 30
17604: NOT
17605: PUSH
17606: LD_LOC 28
17610: PUSH
17611: LD_OWVAR 2
17615: ARRAY
17616: AND
17617: IFFALSE 17623
// Unfog ;
17619: CALL 17799 0 0
// DidGameEnd ;
17623: CALL 17638 0 0
// if not GameEnded then
17627: LD_LOC 29
17631: NOT
17632: IFFALSE 17635
// enable ;
17634: ENABLE
// end ;
17635: PPOPN 2
17637: END
// function DidGameEnd ; var i , k , enemy ; begin
17638: LD_INT 0
17640: PPUSH
17641: PPUSH
17642: PPUSH
17643: PPUSH
// enemy = [ ] ;
17644: LD_ADDR_VAR 0 4
17648: PUSH
17649: EMPTY
17650: ST_TO_ADDR
// for i = 1 to side_positions do
17651: LD_ADDR_VAR 0 2
17655: PUSH
17656: DOUBLE
17657: LD_INT 1
17659: DEC
17660: ST_TO_ADDR
17661: LD_EXP 20
17665: PUSH
17666: FOR_TO
17667: IFFALSE 17761
// if not defaited [ i ] then
17669: LD_LOC 28
17673: PUSH
17674: LD_VAR 0 2
17678: ARRAY
17679: NOT
17680: IFFALSE 17759
// for k = 1 to side_positions do
17682: LD_ADDR_VAR 0 3
17686: PUSH
17687: DOUBLE
17688: LD_INT 1
17690: DEC
17691: ST_TO_ADDR
17692: LD_EXP 20
17696: PUSH
17697: FOR_TO
17698: IFFALSE 17757
// if not defaited [ k ] then
17700: LD_LOC 28
17704: PUSH
17705: LD_VAR 0 3
17709: ARRAY
17710: NOT
17711: IFFALSE 17755
// if not AlliedSides ( i , k ) then
17713: LD_VAR 0 2
17717: PPUSH
17718: LD_VAR 0 3
17722: PPUSH
17723: CALL 17183 0 2
17727: NOT
17728: IFFALSE 17755
// enemy = enemy ^ [ i , k ] ;
17730: LD_ADDR_VAR 0 4
17734: PUSH
17735: LD_VAR 0 4
17739: PUSH
17740: LD_VAR 0 2
17744: PUSH
17745: LD_VAR 0 3
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: ADD
17754: ST_TO_ADDR
17755: GO 17697
17757: POP
17758: POP
17759: GO 17666
17761: POP
17762: POP
// if not enemy then
17763: LD_VAR 0 4
17767: NOT
17768: IFFALSE 17794
// begin GameEnded = true ;
17770: LD_ADDR_LOC 29
17774: PUSH
17775: LD_INT 1
17777: ST_TO_ADDR
// if not defaited [ your_side ] then
17778: LD_LOC 28
17782: PUSH
17783: LD_OWVAR 2
17787: ARRAY
17788: NOT
17789: IFFALSE 17794
// enable ( 401 ) ;
17791: LD_INT 401
17793: ENABLE_MARKED
// end ; end ;
17794: LD_VAR 0 1
17798: RET
// function unfog ; var k , friends ; begin
17799: LD_INT 0
17801: PPUSH
17802: PPUSH
17803: PPUSH
// SetPlayerSpectator ( ) ;
17804: CALL_OW 572
// unfoged = true ;
17808: LD_ADDR_LOC 30
17812: PUSH
17813: LD_INT 1
17815: ST_TO_ADDR
// end ;
17816: LD_VAR 0 1
17820: RET
// export function MakeGameEnd ; begin
17821: LD_INT 0
17823: PPUSH
// SetPlayerSpectator ( ) ;
17824: CALL_OW 572
// unfoged = true ;
17828: LD_ADDR_LOC 30
17832: PUSH
17833: LD_INT 1
17835: ST_TO_ADDR
// wait ( 0 0$5 ) ;
17836: LD_INT 175
17838: PPUSH
17839: CALL_OW 67
// GameEnded = true ;
17843: LD_ADDR_LOC 29
17847: PUSH
17848: LD_INT 1
17850: ST_TO_ADDR
// end ;
17851: LD_VAR 0 1
17855: RET
// export function GetGameEnded ; begin
17856: LD_INT 0
17858: PPUSH
// result = GameEnded ;
17859: LD_ADDR_VAR 0 1
17863: PUSH
17864: LD_LOC 29
17868: ST_TO_ADDR
// end ; end_of_file
17869: LD_VAR 0 1
17873: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , bases ; begin
17874: LD_INT 0
17876: PPUSH
17877: PPUSH
17878: PPUSH
17879: PPUSH
17880: PPUSH
17881: PPUSH
17882: PPUSH
17883: PPUSH
// for i := 1 to 8 do
17884: LD_ADDR_VAR 0 2
17888: PUSH
17889: DOUBLE
17890: LD_INT 1
17892: DEC
17893: ST_TO_ADDR
17894: LD_INT 8
17896: PUSH
17897: FOR_TO
17898: IFFALSE 18374
// begin if Side_Positions [ i ] then
17900: LD_EXP 20
17904: PUSH
17905: LD_VAR 0 2
17909: ARRAY
17910: IFFALSE 18372
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
17912: LD_ADDR_VAR 0 7
17916: PUSH
17917: LD_INT 22
17919: PUSH
17920: LD_VAR 0 2
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: PUSH
17929: LD_INT 21
17931: PUSH
17932: LD_INT 1
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PPUSH
17943: CALL_OW 69
17947: PUSH
17948: LD_INT 0
17950: PLUS
17951: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17952: LD_ADDR_VAR 0 8
17956: PUSH
17957: LD_INT 22
17959: PUSH
17960: LD_VAR 0 2
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PUSH
17969: LD_INT 2
17971: PUSH
17972: LD_INT 30
17974: PUSH
17975: LD_INT 0
17977: PUSH
17978: EMPTY
17979: LIST
17980: LIST
17981: PUSH
17982: LD_INT 30
17984: PUSH
17985: LD_INT 1
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: LIST
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: PPUSH
18001: CALL_OW 69
18005: ST_TO_ADDR
// crates := 0 ;
18006: LD_ADDR_VAR 0 4
18010: PUSH
18011: LD_INT 0
18013: ST_TO_ADDR
// oil := 0 ;
18014: LD_ADDR_VAR 0 5
18018: PUSH
18019: LD_INT 0
18021: ST_TO_ADDR
// sib := 0 ;
18022: LD_ADDR_VAR 0 6
18026: PUSH
18027: LD_INT 0
18029: ST_TO_ADDR
// if bases then
18030: LD_VAR 0 8
18034: IFFALSE 18140
// begin for j in bases do
18036: LD_ADDR_VAR 0 3
18040: PUSH
18041: LD_VAR 0 8
18045: PUSH
18046: FOR_IN
18047: IFFALSE 18138
// begin crates := crates + GetResourceType ( GetBase ( j ) , mat_cans ) ;
18049: LD_ADDR_VAR 0 4
18053: PUSH
18054: LD_VAR 0 4
18058: PUSH
18059: LD_VAR 0 3
18063: PPUSH
18064: CALL_OW 274
18068: PPUSH
18069: LD_INT 1
18071: PPUSH
18072: CALL_OW 275
18076: PLUS
18077: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( j ) , mat_oil ) ;
18078: LD_ADDR_VAR 0 5
18082: PUSH
18083: LD_VAR 0 5
18087: PUSH
18088: LD_VAR 0 3
18092: PPUSH
18093: CALL_OW 274
18097: PPUSH
18098: LD_INT 2
18100: PPUSH
18101: CALL_OW 275
18105: PLUS
18106: ST_TO_ADDR
// sib := sib + GetResourceType ( GetBase ( j ) , mat_siberit ) ;
18107: LD_ADDR_VAR 0 6
18111: PUSH
18112: LD_VAR 0 6
18116: PUSH
18117: LD_VAR 0 3
18121: PPUSH
18122: CALL_OW 274
18126: PPUSH
18127: LD_INT 3
18129: PPUSH
18130: CALL_OW 275
18134: PLUS
18135: ST_TO_ADDR
// end ;
18136: GO 18046
18138: POP
18139: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
18140: LD_STRING setSpecText(
18142: PUSH
18143: LD_VAR 0 2
18147: STR
18148: PUSH
18149: LD_STRING ,
18151: STR
18152: PUSH
18153: LD_INT 2
18155: STR
18156: PUSH
18157: LD_STRING ,
18159: STR
18160: PUSH
18161: LD_VAR 0 4
18165: STR
18166: PUSH
18167: LD_STRING )
18169: STR
18170: PPUSH
18171: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
18175: LD_STRING setSpecText(
18177: PUSH
18178: LD_VAR 0 2
18182: STR
18183: PUSH
18184: LD_STRING ,
18186: STR
18187: PUSH
18188: LD_INT 3
18190: STR
18191: PUSH
18192: LD_STRING ,
18194: STR
18195: PUSH
18196: LD_VAR 0 5
18200: STR
18201: PUSH
18202: LD_STRING )
18204: STR
18205: PPUSH
18206: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
18210: LD_STRING setSpecText(
18212: PUSH
18213: LD_VAR 0 2
18217: STR
18218: PUSH
18219: LD_STRING ,
18221: STR
18222: PUSH
18223: LD_INT 4
18225: STR
18226: PUSH
18227: LD_STRING ,
18229: STR
18230: PUSH
18231: LD_VAR 0 6
18235: STR
18236: PUSH
18237: LD_STRING )
18239: STR
18240: PPUSH
18241: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
18245: LD_STRING setSpecText(
18247: PUSH
18248: LD_VAR 0 2
18252: STR
18253: PUSH
18254: LD_STRING ,
18256: STR
18257: PUSH
18258: LD_INT 5
18260: STR
18261: PUSH
18262: LD_STRING ,
18264: STR
18265: PUSH
18266: LD_VAR 0 7
18270: STR
18271: PUSH
18272: LD_STRING )
18274: STR
18275: PPUSH
18276: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
18280: LD_STRING setSpecLogoNumber(
18282: PUSH
18283: LD_INT 2
18285: STR
18286: PUSH
18287: LD_STRING ,
18289: STR
18290: PUSH
18291: LD_INT 1
18293: STR
18294: PUSH
18295: LD_STRING )
18297: STR
18298: PPUSH
18299: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
18303: LD_STRING setSpecLogoNumber(
18305: PUSH
18306: LD_INT 3
18308: STR
18309: PUSH
18310: LD_STRING ,
18312: STR
18313: PUSH
18314: LD_INT 2
18316: STR
18317: PUSH
18318: LD_STRING )
18320: STR
18321: PPUSH
18322: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
18326: LD_STRING setSpecLogoNumber(
18328: PUSH
18329: LD_INT 4
18331: STR
18332: PUSH
18333: LD_STRING ,
18335: STR
18336: PUSH
18337: LD_INT 3
18339: STR
18340: PUSH
18341: LD_STRING )
18343: STR
18344: PPUSH
18345: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
18349: LD_STRING setSpecLogoNumber(
18351: PUSH
18352: LD_INT 5
18354: STR
18355: PUSH
18356: LD_STRING ,
18358: STR
18359: PUSH
18360: LD_INT 4
18362: STR
18363: PUSH
18364: LD_STRING )
18366: STR
18367: PPUSH
18368: CALL_OW 559
// end ; end ;
18372: GO 17897
18374: POP
18375: POP
// end ;
18376: LD_VAR 0 1
18380: RET
// every 20 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
18381: LD_INT 2
18383: PUSH
18384: LD_INT 30
18386: PUSH
18387: LD_INT 0
18389: PUSH
18390: EMPTY
18391: LIST
18392: LIST
18393: PUSH
18394: LD_INT 30
18396: PUSH
18397: LD_INT 1
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: LIST
18408: PPUSH
18409: CALL_OW 69
18413: IFFALSE 18423
18415: GO 18417
18417: DISABLE
// begin enable ;
18418: ENABLE
// UpdateSpectatorBar ;
18419: CALL 17874 0 0
// end ;
18423: END
