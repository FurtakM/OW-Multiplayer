// export def_tree_function ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , respawning_time_min , respawning_time_max , siberite_bomb_Delay , amount_of_apemen , tree_function , def_win_rules , bonus_gained , activated ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , battle_flags_id ; export normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 141
// begin Your_Side := mp_player_side ;
  79: LD_ADDR_OWVAR 2
  83: PUSH
  84: LD_OWVAR 7
  88: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  89: LD_ADDR_EXP 21
  93: PUSH
  94: LD_OWVAR 17
  98: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  99: LD_ADDR_EXP 18
 103: PUSH
 104: LD_OWVAR 15
 108: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 109: LD_ADDR_EXP 22
 113: PUSH
 114: LD_OWVAR 16
 118: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 119: LD_ADDR_EXP 20
 123: PUSH
 124: CALL 0 0 0
 128: ST_TO_ADDR
// Teams := mp_teams ;
 129: LD_ADDR_EXP 19
 133: PUSH
 134: LD_OWVAR 12
 138: ST_TO_ADDR
// end else
 139: GO 334
// begin Your_Side := 1 ;
 141: LD_ADDR_OWVAR 2
 145: PUSH
 146: LD_INT 1
 148: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 149: LD_ADDR_EXP 21
 153: PUSH
 154: LD_INT 1
 156: PUSH
 157: LD_INT 2
 159: PUSH
 160: LD_INT 3
 162: PUSH
 163: LD_INT 4
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 188: LD_ADDR_EXP 18
 192: PUSH
 193: LD_INT 1
 195: PUSH
 196: LD_INT 1
 198: PUSH
 199: LD_INT 2
 201: PUSH
 202: LD_INT 2
 204: PUSH
 205: LD_INT 0
 207: PUSH
 208: LD_INT 0
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 0 , 0 , 0 , 0 ] ;
 227: LD_ADDR_EXP 22
 231: PUSH
 232: LD_INT 1
 234: PUSH
 235: LD_INT 2
 237: PUSH
 238: LD_INT 3
 240: PUSH
 241: LD_INT 1
 243: PUSH
 244: LD_INT 0
 246: PUSH
 247: LD_INT 0
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 0
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: LIST
 264: LIST
 265: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 266: LD_ADDR_EXP 20
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: LD_INT 0
 279: PUSH
 280: LD_INT 0
 282: PUSH
 283: LD_INT 0
 285: PUSH
 286: LD_INT 0
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: LIST
 299: LIST
 300: LIST
 301: LIST
 302: LIST
 303: LIST
 304: ST_TO_ADDR
// Teams := [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 305: LD_ADDR_EXP 19
 309: PUSH
 310: LD_INT 1
 312: PUSH
 313: LD_INT 2
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: LD_INT 3
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 334: LD_ADDR_EXP 23
 338: PUSH
 339: LD_EXP 18
 343: PUSH
 344: LD_INT 0
 346: PUSH
 347: EMPTY
 348: LIST
 349: DIFF
 350: PUSH
 351: LD_INT 1
 353: GREATER
 354: ST_TO_ADDR
// if Multiplayer then
 355: LD_OWVAR 4
 359: IFFALSE 566
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 361: LD_ADDR_EXP 41
 365: PUSH
 366: LD_INT 0
 368: PPUSH
 369: CALL_OW 426
 373: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 374: LD_ADDR_EXP 42
 378: PUSH
 379: LD_INT 1
 381: PPUSH
 382: CALL_OW 426
 386: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 387: LD_ADDR_EXP 43
 391: PUSH
 392: LD_INT 2
 394: PPUSH
 395: CALL_OW 426
 399: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 400: LD_ADDR_EXP 44
 404: PUSH
 405: LD_INT 3
 407: PPUSH
 408: CALL_OW 426
 412: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 413: LD_ADDR_EXP 45
 417: PUSH
 418: LD_INT 4
 420: PPUSH
 421: CALL_OW 426
 425: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 426: LD_ADDR_EXP 46
 430: PUSH
 431: LD_INT 5
 433: PPUSH
 434: CALL_OW 426
 438: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 439: LD_ADDR_EXP 48
 443: PUSH
 444: LD_INT 10
 446: PPUSH
 447: CALL_OW 426
 451: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 452: LD_ADDR_EXP 49
 456: PUSH
 457: LD_INT 11
 459: PPUSH
 460: CALL_OW 426
 464: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 465: LD_ADDR_EXP 50
 469: PUSH
 470: LD_INT 12
 472: PPUSH
 473: CALL_OW 426
 477: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 13 ) ;
 478: LD_ADDR_EXP 52
 482: PUSH
 483: LD_INT 13
 485: PPUSH
 486: CALL_OW 426
 490: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 14 ) ;
 491: LD_ADDR_EXP 51
 495: PUSH
 496: LD_INT 14
 498: PPUSH
 499: CALL_OW 426
 503: ST_TO_ADDR
// def_tree_function := GetMultiplayerSetting ( 15 ) ;
 504: LD_ADDR_EXP 1
 508: PUSH
 509: LD_INT 15
 511: PPUSH
 512: CALL_OW 426
 516: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 517: LD_ADDR_EXP 53
 521: PUSH
 522: LD_INT 17
 524: PPUSH
 525: CALL_OW 426
 529: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 530: LD_ADDR_EXP 54
 534: PUSH
 535: LD_INT 20
 537: PPUSH
 538: CALL_OW 426
 542: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 543: LD_ADDR_VAR 0 3
 547: PUSH
 548: LD_INT 22
 550: PPUSH
 551: CALL_OW 426
 555: ST_TO_ADDR
// def_win_rules = 0 ;
 556: LD_ADDR_EXP 15
 560: PUSH
 561: LD_INT 0
 563: ST_TO_ADDR
// end else
 564: GO 698
// begin Randomize ;
 566: CALL_OW 10
// def_base_level := 2 ;
 570: LD_ADDR_EXP 41
 574: PUSH
 575: LD_INT 2
 577: ST_TO_ADDR
// def_amount_of_people := 1 ;
 578: LD_ADDR_EXP 42
 582: PUSH
 583: LD_INT 1
 585: ST_TO_ADDR
// def_skill_level := 1 ;
 586: LD_ADDR_EXP 43
 590: PUSH
 591: LD_INT 1
 593: ST_TO_ADDR
// def_starting_resources := 2 ;
 594: LD_ADDR_EXP 44
 598: PUSH
 599: LD_INT 2
 601: ST_TO_ADDR
// def_shipments_density := 50 ;
 602: LD_ADDR_EXP 45
 606: PUSH
 607: LD_INT 50
 609: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 610: LD_ADDR_EXP 46
 614: PUSH
 615: LD_INT 0
 617: ST_TO_ADDR
// def_shared_vision := 1 ;
 618: LD_ADDR_EXP 48
 622: PUSH
 623: LD_INT 1
 625: ST_TO_ADDR
// def_morale_flags := 1 ;
 626: LD_ADDR_EXP 49
 630: PUSH
 631: LD_INT 1
 633: ST_TO_ADDR
// def_siberite_detection := 1 ;
 634: LD_ADDR_EXP 50
 638: PUSH
 639: LD_INT 1
 641: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 642: LD_ADDR_EXP 52
 646: PUSH
 647: LD_INT 3
 649: ST_TO_ADDR
// def_people_respawning := 2 ;
 650: LD_ADDR_EXP 51
 654: PUSH
 655: LD_INT 2
 657: ST_TO_ADDR
// def_tree_function := 7 ;
 658: LD_ADDR_EXP 1
 662: PUSH
 663: LD_INT 7
 665: ST_TO_ADDR
// def_siberite_bomb := 2 ;
 666: LD_ADDR_EXP 53
 670: PUSH
 671: LD_INT 2
 673: ST_TO_ADDR
// def_builduptime := 1 ;
 674: LD_ADDR_EXP 54
 678: PUSH
 679: LD_INT 1
 681: ST_TO_ADDR
// tech_level = 4 ;
 682: LD_ADDR_VAR 0 3
 686: PUSH
 687: LD_INT 4
 689: ST_TO_ADDR
// def_win_rules = 0 ;
 690: LD_ADDR_EXP 15
 694: PUSH
 695: LD_INT 0
 697: ST_TO_ADDR
// end ; if def_tree_function = 7 then
 698: LD_EXP 1
 702: PUSH
 703: LD_INT 7
 705: EQUAL
 706: IFFALSE 724
// def_tree_function := Rand ( 1 , 5 ) ;
 708: LD_ADDR_EXP 1
 712: PUSH
 713: LD_INT 1
 715: PPUSH
 716: LD_INT 5
 718: PPUSH
 719: CALL_OW 12
 723: ST_TO_ADDR
// InitGameRules ;
 724: CALL 7534 0 0
// if def_game_rules = 0 then
 728: LD_EXP 40
 732: PUSH
 733: LD_INT 0
 735: EQUAL
 736: IFFALSE 763
// begin if isSGUI then
 738: LD_OWVAR 83
 742: IFFALSE 750
// setMpTechs ( ) else
 744: CALL 11051 0 0
 748: GO 763
// begin SetMpTechLevel ( tech_level + 1 ) ;
 750: LD_VAR 0 3
 754: PUSH
 755: LD_INT 1
 757: PLUS
 758: PPUSH
 759: CALL 11198 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 763: LD_ADDR_EXP 2
 767: PUSH
 768: LD_INT 0
 770: PUSH
 771: LD_INT 1
 773: PUSH
 774: LD_INT 1
 776: PUSH
 777: LD_INT 1
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: LIST
 784: LIST
 785: PUSH
 786: LD_EXP 41
 790: PUSH
 791: LD_INT 1
 793: PLUS
 794: ARRAY
 795: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 , 3 ] [ def_base_level + 1 ] ;
 796: LD_ADDR_EXP 3
 800: PUSH
 801: LD_INT 0
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: LD_INT 2
 809: PUSH
 810: LD_INT 3
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: LIST
 817: LIST
 818: PUSH
 819: LD_EXP 41
 823: PUSH
 824: LD_INT 1
 826: PLUS
 827: ARRAY
 828: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 829: LD_ADDR_EXP 5
 833: PUSH
 834: LD_INT 2
 836: PUSH
 837: LD_INT 3
 839: PUSH
 840: LD_INT 4
 842: PUSH
 843: LD_INT 5
 845: PUSH
 846: EMPTY
 847: LIST
 848: LIST
 849: LIST
 850: LIST
 851: PUSH
 852: LD_EXP 43
 856: PUSH
 857: LD_INT 1
 859: PLUS
 860: ARRAY
 861: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 862: LD_ADDR_EXP 7
 866: PUSH
 867: LD_INT 0
 869: PUSH
 870: LD_INT 0
 872: PUSH
 873: LD_INT 0
 875: PUSH
 876: EMPTY
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_INT 30
 883: PUSH
 884: LD_INT 0
 886: PUSH
 887: LD_INT 0
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: LIST
 894: PUSH
 895: LD_INT 50
 897: PUSH
 898: LD_INT 20
 900: PUSH
 901: LD_INT 0
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: LIST
 908: PUSH
 909: LD_INT 80
 911: PUSH
 912: LD_INT 40
 914: PUSH
 915: LD_INT 20
 917: PUSH
 918: EMPTY
 919: LIST
 920: LIST
 921: LIST
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: LIST
 928: PUSH
 929: LD_EXP 44
 933: PUSH
 934: LD_INT 1
 936: PLUS
 937: ARRAY
 938: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 939: LD_ADDR_EXP 6
 943: PUSH
 944: LD_INT 10
 946: PUSH
 947: EMPTY
 948: LIST
 949: PUSH
 950: LD_INT 7
 952: PUSH
 953: LD_INT 14
 955: PUSH
 956: EMPTY
 957: LIST
 958: LIST
 959: PUSH
 960: LD_INT 6
 962: PUSH
 963: LD_INT 12
 965: PUSH
 966: LD_INT 18
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: LIST
 973: PUSH
 974: LD_INT 5
 976: PUSH
 977: LD_INT 10
 979: PUSH
 980: LD_INT 15
 982: PUSH
 983: LD_INT 20
 985: PUSH
 986: EMPTY
 987: LIST
 988: LIST
 989: LIST
 990: LIST
 991: PUSH
 992: EMPTY
 993: LIST
 994: LIST
 995: LIST
 996: LIST
 997: PUSH
 998: LD_EXP 44
1002: PUSH
1003: LD_INT 1
1005: PLUS
1006: ARRAY
1007: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1008: LD_ADDR_EXP 4
1012: PUSH
1013: LD_EXP 42
1017: PUSH
1018: LD_INT 4
1020: PLUS
1021: ST_TO_ADDR
// shipments_density := 150 - ( def_shipments_density + 1 ) ;
1022: LD_ADDR_EXP 8
1026: PUSH
1027: LD_INT 150
1029: PUSH
1030: LD_EXP 45
1034: PUSH
1035: LD_INT 1
1037: PLUS
1038: MINUS
1039: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1040: LD_ADDR_EXP 13
1044: PUSH
1045: LD_INT 0
1047: PUSH
1048: LD_INT 1
1050: PUSH
1051: LD_INT 2
1053: PUSH
1054: LD_INT 3
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: LIST
1061: LIST
1062: PUSH
1063: LD_EXP 52
1067: PUSH
1068: LD_INT 1
1070: PLUS
1071: ARRAY
1072: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1073: LD_ADDR_EXP 10
1077: PUSH
1078: LD_INT 0
1080: PUSH
1081: LD_INT 8400
1083: PUSH
1084: LD_INT 1750
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: LD_EXP 51
1096: PUSH
1097: LD_INT 1
1099: PLUS
1100: ARRAY
1101: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1102: LD_ADDR_EXP 11
1106: PUSH
1107: LD_INT 0
1109: PUSH
1110: LD_INT 21000
1112: PUSH
1113: LD_INT 4200
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: LIST
1120: PUSH
1121: LD_EXP 51
1125: PUSH
1126: LD_INT 1
1128: PLUS
1129: ARRAY
1130: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1131: LD_ADDR_EXP 9
1135: PUSH
1136: LD_INT 1
1138: NEG
1139: PUSH
1140: LD_INT 350
1142: PUSH
1143: LD_INT 700
1145: PUSH
1146: LD_INT 1400
1148: PUSH
1149: LD_INT 0
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: PUSH
1159: LD_EXP 49
1163: PUSH
1164: LD_INT 1
1166: PLUS
1167: ARRAY
1168: ST_TO_ADDR
// battle_flags_id := [ ] ;
1169: LD_ADDR_EXP 27
1173: PUSH
1174: EMPTY
1175: ST_TO_ADDR
// tree_function := [ [ 0 , 0 , 0 , 0 , 0 ] , [ 2 , 0 , 0 , 0 , 0 ] , [ 0 , 4 , 0 , 0 , 0 ] , [ 0 , 0 , 2 , 0 , 0 ] , [ 0 , 0 , 0 , 3 , 0 ] , [ 1 , 2 , 1 , 2 , 2 ] , [ 0 , 0 , 0 , 0 , 3 ] ] [ def_tree_function + 1 ] ;
1176: LD_ADDR_EXP 14
1180: PUSH
1181: LD_INT 0
1183: PUSH
1184: LD_INT 0
1186: PUSH
1187: LD_INT 0
1189: PUSH
1190: LD_INT 0
1192: PUSH
1193: LD_INT 0
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: LIST
1201: LIST
1202: PUSH
1203: LD_INT 2
1205: PUSH
1206: LD_INT 0
1208: PUSH
1209: LD_INT 0
1211: PUSH
1212: LD_INT 0
1214: PUSH
1215: LD_INT 0
1217: PUSH
1218: EMPTY
1219: LIST
1220: LIST
1221: LIST
1222: LIST
1223: LIST
1224: PUSH
1225: LD_INT 0
1227: PUSH
1228: LD_INT 4
1230: PUSH
1231: LD_INT 0
1233: PUSH
1234: LD_INT 0
1236: PUSH
1237: LD_INT 0
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: PUSH
1247: LD_INT 0
1249: PUSH
1250: LD_INT 0
1252: PUSH
1253: LD_INT 2
1255: PUSH
1256: LD_INT 0
1258: PUSH
1259: LD_INT 0
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: PUSH
1269: LD_INT 0
1271: PUSH
1272: LD_INT 0
1274: PUSH
1275: LD_INT 0
1277: PUSH
1278: LD_INT 3
1280: PUSH
1281: LD_INT 0
1283: PUSH
1284: EMPTY
1285: LIST
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: PUSH
1291: LD_INT 1
1293: PUSH
1294: LD_INT 2
1296: PUSH
1297: LD_INT 1
1299: PUSH
1300: LD_INT 2
1302: PUSH
1303: LD_INT 2
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: PUSH
1313: LD_INT 0
1315: PUSH
1316: LD_INT 0
1318: PUSH
1319: LD_INT 0
1321: PUSH
1322: LD_INT 0
1324: PUSH
1325: LD_INT 3
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: LIST
1341: LIST
1342: LIST
1343: PUSH
1344: LD_EXP 1
1348: PUSH
1349: LD_INT 1
1351: PLUS
1352: ARRAY
1353: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1354: LD_EXP 53
1358: PUSH
1359: LD_INT 0
1361: EQUAL
1362: IFFALSE 1374
// siberite_bomb_Delay = 0 else
1364: LD_ADDR_EXP 12
1368: PUSH
1369: LD_INT 0
1371: ST_TO_ADDR
1372: GO 1396
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1374: LD_ADDR_EXP 12
1378: PUSH
1379: LD_EXP 53
1383: PUSH
1384: LD_INT 1
1386: MINUS
1387: PUSH
1388: LD_INT 21000
1390: MUL
1391: PUSH
1392: LD_INT 1
1394: PLUS
1395: ST_TO_ADDR
// end ;
1396: LD_VAR 0 1
1400: RET
// function prepare_map_coordinates ; var side , dep , br1 , br2 , br3 , un , i , j ; begin
1401: LD_INT 0
1403: PPUSH
1404: PPUSH
1405: PPUSH
1406: PPUSH
1407: PPUSH
1408: PPUSH
1409: PPUSH
1410: PPUSH
1411: PPUSH
// depot_def = [ ] ;
1412: LD_ADDR_EXP 24
1416: PUSH
1417: EMPTY
1418: ST_TO_ADDR
// breastworks_def = [ ] ;
1419: LD_ADDR_EXP 25
1423: PUSH
1424: EMPTY
1425: ST_TO_ADDR
// for side := 1 to 4 do
1426: LD_ADDR_VAR 0 2
1430: PUSH
1431: DOUBLE
1432: LD_INT 1
1434: DEC
1435: ST_TO_ADDR
1436: LD_INT 4
1438: PUSH
1439: FOR_TO
1440: IFFALSE 1795
// begin dep := side * 4 - 3 ;
1442: LD_ADDR_VAR 0 3
1446: PUSH
1447: LD_VAR 0 2
1451: PUSH
1452: LD_INT 4
1454: MUL
1455: PUSH
1456: LD_INT 3
1458: MINUS
1459: ST_TO_ADDR
// br1 := side * 4 - 2 ;
1460: LD_ADDR_VAR 0 4
1464: PUSH
1465: LD_VAR 0 2
1469: PUSH
1470: LD_INT 4
1472: MUL
1473: PUSH
1474: LD_INT 2
1476: MINUS
1477: ST_TO_ADDR
// br2 := side * 4 - 1 ;
1478: LD_ADDR_VAR 0 5
1482: PUSH
1483: LD_VAR 0 2
1487: PUSH
1488: LD_INT 4
1490: MUL
1491: PUSH
1492: LD_INT 1
1494: MINUS
1495: ST_TO_ADDR
// br3 := side * 4 ;
1496: LD_ADDR_VAR 0 6
1500: PUSH
1501: LD_VAR 0 2
1505: PUSH
1506: LD_INT 4
1508: MUL
1509: ST_TO_ADDR
// depot_def := depot_def ^ [ [ GetX ( dep ) , GetY ( dep ) , GetDir ( dep ) ] ] ;
1510: LD_ADDR_EXP 24
1514: PUSH
1515: LD_EXP 24
1519: PUSH
1520: LD_VAR 0 3
1524: PPUSH
1525: CALL_OW 250
1529: PUSH
1530: LD_VAR 0 3
1534: PPUSH
1535: CALL_OW 251
1539: PUSH
1540: LD_VAR 0 3
1544: PPUSH
1545: CALL_OW 254
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: LIST
1554: PUSH
1555: EMPTY
1556: LIST
1557: ADD
1558: ST_TO_ADDR
// start_def := start_def ^ [ [ ShiftX ( GetX ( Dep ) , GetDir ( Dep ) , 6 ) , ShiftY ( GetY ( Dep ) , GetDir ( Dep ) , 6 ) ] ] ;
1559: LD_ADDR_EXP 26
1563: PUSH
1564: LD_EXP 26
1568: PUSH
1569: LD_VAR 0 3
1573: PPUSH
1574: CALL_OW 250
1578: PPUSH
1579: LD_VAR 0 3
1583: PPUSH
1584: CALL_OW 254
1588: PPUSH
1589: LD_INT 6
1591: PPUSH
1592: CALL_OW 272
1596: PUSH
1597: LD_VAR 0 3
1601: PPUSH
1602: CALL_OW 251
1606: PPUSH
1607: LD_VAR 0 3
1611: PPUSH
1612: CALL_OW 254
1616: PPUSH
1617: LD_INT 6
1619: PPUSH
1620: CALL_OW 273
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: PUSH
1629: EMPTY
1630: LIST
1631: ADD
1632: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ GetX ( br1 ) , GetY ( br1 ) , GetDir ( br1 ) ] , [ GetX ( br2 ) , GetY ( br2 ) , GetDir ( br2 ) ] , [ GetX ( br3 ) , GetY ( br3 ) , GetDir ( br3 ) ] ] ] ;
1633: LD_ADDR_EXP 25
1637: PUSH
1638: LD_EXP 25
1642: PUSH
1643: LD_VAR 0 4
1647: PPUSH
1648: CALL_OW 250
1652: PUSH
1653: LD_VAR 0 4
1657: PPUSH
1658: CALL_OW 251
1662: PUSH
1663: LD_VAR 0 4
1667: PPUSH
1668: CALL_OW 254
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: LIST
1677: PUSH
1678: LD_VAR 0 5
1682: PPUSH
1683: CALL_OW 250
1687: PUSH
1688: LD_VAR 0 5
1692: PPUSH
1693: CALL_OW 251
1697: PUSH
1698: LD_VAR 0 5
1702: PPUSH
1703: CALL_OW 254
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: LIST
1712: PUSH
1713: LD_VAR 0 6
1717: PPUSH
1718: CALL_OW 250
1722: PUSH
1723: LD_VAR 0 6
1727: PPUSH
1728: CALL_OW 251
1732: PUSH
1733: LD_VAR 0 6
1737: PPUSH
1738: CALL_OW 254
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: LIST
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: LIST
1752: PUSH
1753: EMPTY
1754: LIST
1755: ADD
1756: ST_TO_ADDR
// DestroyUnit ( dep ) ;
1757: LD_VAR 0 3
1761: PPUSH
1762: CALL_OW 65
// DestroyUnit ( br1 ) ;
1766: LD_VAR 0 4
1770: PPUSH
1771: CALL_OW 65
// DestroyUnit ( br2 ) ;
1775: LD_VAR 0 5
1779: PPUSH
1780: CALL_OW 65
// DestroyUnit ( br3 ) ;
1784: LD_VAR 0 6
1788: PPUSH
1789: CALL_OW 65
// end ;
1793: GO 1439
1795: POP
1796: POP
// normal_oil_deposits_locations := [ [ 28 , 15 ] , [ 102 , 17 ] , [ 50 , 84 ] , [ 143 , 111 ] ] ;
1797: LD_ADDR_EXP 28
1801: PUSH
1802: LD_INT 28
1804: PUSH
1805: LD_INT 15
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: PUSH
1812: LD_INT 102
1814: PUSH
1815: LD_INT 17
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: PUSH
1822: LD_INT 50
1824: PUSH
1825: LD_INT 84
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: LD_INT 143
1834: PUSH
1835: LD_INT 111
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PUSH
1842: EMPTY
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 28 , 15 ] , [ 52 , 44 ] ] , [ [ 102 , 17 ] , [ 84 , 37 ] ] , [ [ 50 , 84 ] , [ 74 , 81 ] ] , [ [ 143 , 111 ] , [ 106 , 77 ] ] , ] ;
1848: LD_ADDR_EXP 29
1852: PUSH
1853: LD_INT 28
1855: PUSH
1856: LD_INT 15
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: PUSH
1863: LD_INT 52
1865: PUSH
1866: LD_INT 44
1868: PUSH
1869: EMPTY
1870: LIST
1871: LIST
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 102
1879: PUSH
1880: LD_INT 17
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: LD_INT 84
1889: PUSH
1890: LD_INT 37
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: PUSH
1897: EMPTY
1898: LIST
1899: LIST
1900: PUSH
1901: LD_INT 50
1903: PUSH
1904: LD_INT 84
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: PUSH
1911: LD_INT 74
1913: PUSH
1914: LD_INT 81
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: PUSH
1925: LD_INT 143
1927: PUSH
1928: LD_INT 111
1930: PUSH
1931: EMPTY
1932: LIST
1933: LIST
1934: PUSH
1935: LD_INT 106
1937: PUSH
1938: LD_INT 77
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: PUSH
1945: EMPTY
1946: LIST
1947: LIST
1948: PUSH
1949: EMPTY
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 45 , 25 ] , [ 75 , 22 ] , [ 87 , 105 ] , [ 117 , 99 ] ] ;
1955: LD_ADDR_EXP 30
1959: PUSH
1960: LD_INT 45
1962: PUSH
1963: LD_INT 25
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: PUSH
1970: LD_INT 75
1972: PUSH
1973: LD_INT 22
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PUSH
1980: LD_INT 87
1982: PUSH
1983: LD_INT 105
1985: PUSH
1986: EMPTY
1987: LIST
1988: LIST
1989: PUSH
1990: LD_INT 117
1992: PUSH
1993: LD_INT 99
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: PUSH
2000: EMPTY
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: ST_TO_ADDR
// for i = 1 to Side_Positions do
2006: LD_ADDR_VAR 0 8
2010: PUSH
2011: DOUBLE
2012: LD_INT 1
2014: DEC
2015: ST_TO_ADDR
2016: LD_EXP 21
2020: PUSH
2021: FOR_TO
2022: IFFALSE 2201
// begin if not Side_Positions [ i ] then
2024: LD_EXP 21
2028: PUSH
2029: LD_VAR 0 8
2033: ARRAY
2034: NOT
2035: IFFALSE 2039
// continue ;
2037: GO 2021
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2039: LD_EXP 30
2043: PUSH
2044: LD_EXP 21
2048: PUSH
2049: LD_VAR 0 8
2053: ARRAY
2054: ARRAY
2055: PUSH
2056: LD_INT 1
2058: ARRAY
2059: PPUSH
2060: LD_EXP 30
2064: PUSH
2065: LD_EXP 21
2069: PUSH
2070: LD_VAR 0 8
2074: ARRAY
2075: ARRAY
2076: PUSH
2077: LD_INT 2
2079: ARRAY
2080: PPUSH
2081: LD_INT 3
2083: PPUSH
2084: CALL_OW 62
// if def_extra_oil_deposits then
2088: LD_EXP 46
2092: IFFALSE 2150
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2094: LD_ADDR_VAR 0 9
2098: PUSH
2099: LD_EXP 29
2103: PUSH
2104: LD_EXP 21
2108: PUSH
2109: LD_VAR 0 8
2113: ARRAY
2114: ARRAY
2115: PUSH
2116: FOR_IN
2117: IFFALSE 2146
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2119: LD_VAR 0 9
2123: PUSH
2124: LD_INT 1
2126: ARRAY
2127: PPUSH
2128: LD_VAR 0 9
2132: PUSH
2133: LD_INT 2
2135: ARRAY
2136: PPUSH
2137: LD_INT 2
2139: PPUSH
2140: CALL_OW 62
2144: GO 2116
2146: POP
2147: POP
2148: GO 2199
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2150: LD_EXP 28
2154: PUSH
2155: LD_EXP 21
2159: PUSH
2160: LD_VAR 0 8
2164: ARRAY
2165: ARRAY
2166: PUSH
2167: LD_INT 1
2169: ARRAY
2170: PPUSH
2171: LD_EXP 28
2175: PUSH
2176: LD_EXP 21
2180: PUSH
2181: LD_VAR 0 8
2185: ARRAY
2186: ARRAY
2187: PUSH
2188: LD_INT 2
2190: ARRAY
2191: PPUSH
2192: LD_INT 2
2194: PPUSH
2195: CALL_OW 62
// end ;
2199: GO 2021
2201: POP
2202: POP
// end ;
2203: LD_VAR 0 1
2207: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2208: LD_INT 0
2210: PPUSH
2211: PPUSH
2212: PPUSH
// if not Team_Game then
2213: LD_EXP 23
2217: NOT
2218: IFFALSE 2316
// begin for i = 1 to 8 do
2220: LD_ADDR_VAR 0 2
2224: PUSH
2225: DOUBLE
2226: LD_INT 1
2228: DEC
2229: ST_TO_ADDR
2230: LD_INT 8
2232: PUSH
2233: FOR_TO
2234: IFFALSE 2312
// for j = 1 to 8 do
2236: LD_ADDR_VAR 0 3
2240: PUSH
2241: DOUBLE
2242: LD_INT 1
2244: DEC
2245: ST_TO_ADDR
2246: LD_INT 8
2248: PUSH
2249: FOR_TO
2250: IFFALSE 2308
// if i <> j then
2252: LD_VAR 0 2
2256: PUSH
2257: LD_VAR 0 3
2261: NONEQUAL
2262: IFFALSE 2286
// SetAttitude ( i , j , att_neutral , true ) else
2264: LD_VAR 0 2
2268: PPUSH
2269: LD_VAR 0 3
2273: PPUSH
2274: LD_INT 0
2276: PPUSH
2277: LD_INT 1
2279: PPUSH
2280: CALL_OW 80
2284: GO 2306
// SetAttitude ( i , j , att_friend , true ) ;
2286: LD_VAR 0 2
2290: PPUSH
2291: LD_VAR 0 3
2295: PPUSH
2296: LD_INT 1
2298: PPUSH
2299: LD_INT 1
2301: PPUSH
2302: CALL_OW 80
2306: GO 2249
2308: POP
2309: POP
2310: GO 2233
2312: POP
2313: POP
// end else
2314: GO 2491
// begin if def_shared_vision then
2316: LD_EXP 48
2320: IFFALSE 2385
// begin for i in Teams do
2322: LD_ADDR_VAR 0 2
2326: PUSH
2327: LD_EXP 19
2331: PUSH
2332: FOR_IN
2333: IFFALSE 2383
// for j = 2 to i do
2335: LD_ADDR_VAR 0 3
2339: PUSH
2340: DOUBLE
2341: LD_INT 2
2343: DEC
2344: ST_TO_ADDR
2345: LD_VAR 0 2
2349: PUSH
2350: FOR_TO
2351: IFFALSE 2379
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2353: LD_VAR 0 2
2357: PUSH
2358: LD_VAR 0 3
2362: ARRAY
2363: PPUSH
2364: LD_VAR 0 2
2368: PUSH
2369: LD_INT 1
2371: ARRAY
2372: PPUSH
2373: CALL_OW 343
2377: GO 2350
2379: POP
2380: POP
2381: GO 2332
2383: POP
2384: POP
// end ; for i = 1 to 8 do
2385: LD_ADDR_VAR 0 2
2389: PUSH
2390: DOUBLE
2391: LD_INT 1
2393: DEC
2394: ST_TO_ADDR
2395: LD_INT 8
2397: PUSH
2398: FOR_TO
2399: IFFALSE 2489
// for j = 1 to 8 do
2401: LD_ADDR_VAR 0 3
2405: PUSH
2406: DOUBLE
2407: LD_INT 1
2409: DEC
2410: ST_TO_ADDR
2411: LD_INT 8
2413: PUSH
2414: FOR_TO
2415: IFFALSE 2485
// if Side_Teams [ i ] = Side_Teams [ j ] then
2417: LD_EXP 18
2421: PUSH
2422: LD_VAR 0 2
2426: ARRAY
2427: PUSH
2428: LD_EXP 18
2432: PUSH
2433: LD_VAR 0 3
2437: ARRAY
2438: EQUAL
2439: IFFALSE 2463
// SetAttitude ( i , j , att_friend , true ) else
2441: LD_VAR 0 2
2445: PPUSH
2446: LD_VAR 0 3
2450: PPUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 1
2456: PPUSH
2457: CALL_OW 80
2461: GO 2483
// SetAttitude ( i , j , att_enemy , true ) ;
2463: LD_VAR 0 2
2467: PPUSH
2468: LD_VAR 0 3
2472: PPUSH
2473: LD_INT 2
2475: PPUSH
2476: LD_INT 1
2478: PPUSH
2479: CALL_OW 80
2483: GO 2414
2485: POP
2486: POP
2487: GO 2398
2489: POP
2490: POP
// end ; end ;
2491: LD_VAR 0 1
2495: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2496: LD_INT 0
2498: PPUSH
2499: PPUSH
2500: PPUSH
2501: PPUSH
// result := [ ] ;
2502: LD_ADDR_VAR 0 7
2506: PUSH
2507: EMPTY
2508: ST_TO_ADDR
// for i := 1 to count do
2509: LD_ADDR_VAR 0 8
2513: PUSH
2514: DOUBLE
2515: LD_INT 1
2517: DEC
2518: ST_TO_ADDR
2519: LD_VAR 0 1
2523: PUSH
2524: FOR_TO
2525: IFFALSE 2943
// begin uc_direction := Rand ( 0 , 5 ) ;
2527: LD_ADDR_OWVAR 24
2531: PUSH
2532: LD_INT 0
2534: PPUSH
2535: LD_INT 5
2537: PPUSH
2538: CALL_OW 12
2542: ST_TO_ADDR
// if commander then
2543: LD_LOC 1
2547: IFFALSE 2656
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2549: LD_ADDR_OWVAR 26
2553: PUSH
2554: LD_OWVAR 19
2558: PUSH
2559: LD_OWVAR 20
2563: ARRAY
2564: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2565: LD_INT 1
2567: PPUSH
2568: LD_INT 2
2570: PPUSH
2571: CALL_OW 12
2575: PPUSH
2576: LD_VAR 0 2
2580: PPUSH
2581: LD_EXP 5
2585: PUSH
2586: LD_INT 2
2588: PLUS
2589: PPUSH
2590: CALL_OW 380
// hc_importance := 105 ;
2594: LD_ADDR_OWVAR 32
2598: PUSH
2599: LD_INT 105
2601: ST_TO_ADDR
// commander := false ;
2602: LD_ADDR_LOC 1
2606: PUSH
2607: LD_INT 0
2609: ST_TO_ADDR
// if Multiplayer then
2610: LD_OWVAR 4
2614: IFFALSE 2654
// begin hc_gallery := MULTIAVATARS ;
2616: LD_ADDR_OWVAR 33
2620: PUSH
2621: LD_STRING MULTIAVATARS
2623: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2624: LD_ADDR_OWVAR 34
2628: PUSH
2629: LD_OWVAR 20
2633: PPUSH
2634: CALL_OW 525
2638: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2639: LD_ADDR_OWVAR 27
2643: PUSH
2644: LD_OWVAR 20
2648: PPUSH
2649: CALL_OW 526
2653: ST_TO_ADDR
// end ; end else
2654: GO 2719
// begin hc_name :=  ;
2656: LD_ADDR_OWVAR 26
2660: PUSH
2661: LD_STRING 
2663: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2664: LD_INT 1
2666: PPUSH
2667: LD_INT 2
2669: PPUSH
2670: CALL_OW 12
2674: PPUSH
2675: LD_VAR 0 2
2679: PPUSH
2680: LD_EXP 5
2684: PPUSH
2685: CALL_OW 380
// hc_importance := 0 ;
2689: LD_ADDR_OWVAR 32
2693: PUSH
2694: LD_INT 0
2696: ST_TO_ADDR
// if Multiplayer then
2697: LD_OWVAR 4
2701: IFFALSE 2719
// begin hc_gallery :=  ;
2703: LD_ADDR_OWVAR 33
2707: PUSH
2708: LD_STRING 
2710: ST_TO_ADDR
// hc_face_number := 0 ;
2711: LD_ADDR_OWVAR 34
2715: PUSH
2716: LD_INT 0
2718: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2719: LD_ADDR_VAR 0 10
2723: PUSH
2724: CALL_OW 44
2728: ST_TO_ADDR
// if global_defined then
2729: LD_LOC 3
2733: IFFALSE 2873
// begin if ( cl = class_soldier ) then
2735: LD_VAR 0 2
2739: PUSH
2740: LD_INT 1
2742: EQUAL
2743: IFFALSE 2763
// j := i + soldiers_created else
2745: LD_ADDR_VAR 0 9
2749: PUSH
2750: LD_VAR 0 8
2754: PUSH
2755: LD_LOC 4
2759: PLUS
2760: ST_TO_ADDR
2761: GO 2773
// j := i ;
2763: LD_ADDR_VAR 0 9
2767: PUSH
2768: LD_VAR 0 8
2772: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2773: LD_LOC 2
2777: PUSH
2778: LD_VAR 0 2
2782: ARRAY
2783: PUSH
2784: LD_VAR 0 9
2788: ARRAY
2789: PPUSH
2790: LD_VAR 0 10
2794: PPUSH
2795: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2799: LD_VAR 0 10
2803: PPUSH
2804: LD_INT 2
2806: PPUSH
2807: LD_LOC 2
2811: PUSH
2812: LD_VAR 0 2
2816: ARRAY
2817: PUSH
2818: LD_VAR 0 9
2822: ARRAY
2823: PPUSH
2824: LD_INT 2
2826: PPUSH
2827: CALL_OW 260
2831: PPUSH
2832: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2836: LD_VAR 0 10
2840: PPUSH
2841: LD_INT 1
2843: PPUSH
2844: LD_LOC 2
2848: PUSH
2849: LD_VAR 0 2
2853: ARRAY
2854: PUSH
2855: LD_VAR 0 9
2859: ARRAY
2860: PPUSH
2861: LD_INT 1
2863: PPUSH
2864: CALL_OW 260
2868: PPUSH
2869: CALL_OW 239
// end ; if building then
2873: LD_VAR 0 6
2877: IFFALSE 2895
// PlaceHumanInUnit ( un , building ) else
2879: LD_VAR 0 10
2883: PPUSH
2884: LD_VAR 0 6
2888: PPUSH
2889: CALL_OW 52
2893: GO 2922
// PlaceUnitXYR ( un , x , y , r , false ) ;
2895: LD_VAR 0 10
2899: PPUSH
2900: LD_VAR 0 3
2904: PPUSH
2905: LD_VAR 0 4
2909: PPUSH
2910: LD_VAR 0 5
2914: PPUSH
2915: LD_INT 0
2917: PPUSH
2918: CALL_OW 50
// result := result ^ [ un ] ;
2922: LD_ADDR_VAR 0 7
2926: PUSH
2927: LD_VAR 0 7
2931: PUSH
2932: LD_VAR 0 10
2936: PUSH
2937: EMPTY
2938: LIST
2939: ADD
2940: ST_TO_ADDR
// end ;
2941: GO 2524
2943: POP
2944: POP
// if not global_defined then
2945: LD_LOC 3
2949: NOT
2950: IFFALSE 3028
// if ( global_units >= cl ) then
2952: LD_LOC 2
2956: PUSH
2957: LD_VAR 0 2
2961: GREATEREQUAL
2962: IFFALSE 3003
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2964: LD_ADDR_LOC 2
2968: PUSH
2969: LD_LOC 2
2973: PPUSH
2974: LD_VAR 0 2
2978: PPUSH
2979: LD_LOC 2
2983: PUSH
2984: LD_VAR 0 2
2988: ARRAY
2989: PUSH
2990: LD_VAR 0 7
2994: ADD
2995: PPUSH
2996: CALL_OW 1
3000: ST_TO_ADDR
3001: GO 3028
// global_units := Replace ( global_units , cl , result ) ;
3003: LD_ADDR_LOC 2
3007: PUSH
3008: LD_LOC 2
3012: PPUSH
3013: LD_VAR 0 2
3017: PPUSH
3018: LD_VAR 0 7
3022: PPUSH
3023: CALL_OW 1
3027: ST_TO_ADDR
// if commander then
3028: LD_LOC 1
3032: IFFALSE 3079
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3034: LD_ADDR_EXP 31
3038: PUSH
3039: LD_EXP 31
3043: PPUSH
3044: LD_OWVAR 20
3048: PPUSH
3049: LD_EXP 31
3053: PUSH
3054: LD_OWVAR 20
3058: ARRAY
3059: PUSH
3060: LD_VAR 0 10
3064: ADD
3065: PPUSH
3066: CALL_OW 1
3070: ST_TO_ADDR
// commander := false ;
3071: LD_ADDR_LOC 1
3075: PUSH
3076: LD_INT 0
3078: ST_TO_ADDR
// end ; end ;
3079: LD_VAR 0 7
3083: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3084: LD_INT 0
3086: PPUSH
3087: PPUSH
3088: PPUSH
3089: PPUSH
3090: PPUSH
3091: PPUSH
3092: PPUSH
3093: PPUSH
3094: PPUSH
// if side in [ 0 , 9 ] then
3095: LD_VAR 0 1
3099: PUSH
3100: LD_INT 0
3102: PUSH
3103: LD_INT 9
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: IN
3110: IFFALSE 3114
// exit ;
3112: GO 4164
// pos := Side_Positions [ side ] ;
3114: LD_ADDR_VAR 0 3
3118: PUSH
3119: LD_EXP 21
3123: PUSH
3124: LD_VAR 0 1
3128: ARRAY
3129: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3130: LD_ADDR_OWVAR 21
3134: PUSH
3135: LD_EXP 22
3139: PUSH
3140: LD_VAR 0 1
3144: ARRAY
3145: ST_TO_ADDR
// uc_side := side ;
3146: LD_ADDR_OWVAR 20
3150: PUSH
3151: LD_VAR 0 1
3155: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3156: LD_ADDR_VAR 0 4
3160: PUSH
3161: LD_EXP 24
3165: PUSH
3166: LD_VAR 0 3
3170: ARRAY
3171: PUSH
3172: LD_INT 1
3174: ARRAY
3175: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3176: LD_ADDR_VAR 0 5
3180: PUSH
3181: LD_EXP 24
3185: PUSH
3186: LD_VAR 0 3
3190: ARRAY
3191: PUSH
3192: LD_INT 2
3194: ARRAY
3195: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3196: LD_ADDR_VAR 0 6
3200: PUSH
3201: LD_EXP 24
3205: PUSH
3206: LD_VAR 0 3
3210: ARRAY
3211: PUSH
3212: LD_INT 3
3214: ARRAY
3215: ST_TO_ADDR
// if is_depot then
3216: LD_EXP 2
3220: IFFALSE 3353
// begin bc_type = b_depot ;
3222: LD_ADDR_OWVAR 42
3226: PUSH
3227: LD_INT 0
3229: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3230: LD_ADDR_VAR 0 10
3234: PUSH
3235: LD_VAR 0 4
3239: PPUSH
3240: LD_VAR 0 5
3244: PPUSH
3245: LD_VAR 0 6
3249: PPUSH
3250: CALL_OW 47
3254: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3255: LD_VAR 0 10
3259: PPUSH
3260: LD_STRING @
3262: PUSH
3263: LD_VAR 0 1
3267: STR
3268: PPUSH
3269: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3273: LD_VAR 0 10
3277: PPUSH
3278: CALL_OW 274
3282: PPUSH
3283: LD_INT 1
3285: PPUSH
3286: LD_EXP 7
3290: PUSH
3291: LD_INT 1
3293: ARRAY
3294: PPUSH
3295: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3299: LD_VAR 0 10
3303: PPUSH
3304: CALL_OW 274
3308: PPUSH
3309: LD_INT 2
3311: PPUSH
3312: LD_EXP 7
3316: PUSH
3317: LD_INT 2
3319: ARRAY
3320: PPUSH
3321: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3325: LD_VAR 0 10
3329: PPUSH
3330: CALL_OW 274
3334: PPUSH
3335: LD_INT 3
3337: PPUSH
3338: LD_EXP 7
3342: PUSH
3343: LD_INT 3
3345: ARRAY
3346: PPUSH
3347: CALL_OW 277
// end else
3351: GO 3497
// begin for i := 1 to 3 do
3353: LD_ADDR_VAR 0 7
3357: PUSH
3358: DOUBLE
3359: LD_INT 1
3361: DEC
3362: ST_TO_ADDR
3363: LD_INT 3
3365: PUSH
3366: FOR_TO
3367: IFFALSE 3495
// begin r := starting_resources [ i ] ;
3369: LD_ADDR_VAR 0 8
3373: PUSH
3374: LD_EXP 7
3378: PUSH
3379: LD_VAR 0 7
3383: ARRAY
3384: ST_TO_ADDR
// while r >= 10 do
3385: LD_VAR 0 8
3389: PUSH
3390: LD_INT 10
3392: GREATEREQUAL
3393: IFFALSE 3493
// if r > 50 then
3395: LD_VAR 0 8
3399: PUSH
3400: LD_INT 50
3402: GREATER
3403: IFFALSE 3449
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3405: LD_VAR 0 7
3409: PPUSH
3410: LD_INT 5
3412: PPUSH
3413: LD_VAR 0 4
3417: PPUSH
3418: LD_VAR 0 5
3422: PPUSH
3423: LD_INT 4
3425: PPUSH
3426: LD_INT 0
3428: PPUSH
3429: CALL_OW 60
// r := r - 50 ;
3433: LD_ADDR_VAR 0 8
3437: PUSH
3438: LD_VAR 0 8
3442: PUSH
3443: LD_INT 50
3445: MINUS
3446: ST_TO_ADDR
// end else
3447: GO 3491
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3449: LD_VAR 0 7
3453: PPUSH
3454: LD_VAR 0 8
3458: PUSH
3459: LD_INT 10
3461: DIV
3462: PPUSH
3463: LD_VAR 0 4
3467: PPUSH
3468: LD_VAR 0 5
3472: PPUSH
3473: LD_INT 4
3475: PPUSH
3476: LD_INT 0
3478: PPUSH
3479: CALL_OW 60
// r := 0 ;
3483: LD_ADDR_VAR 0 8
3487: PUSH
3488: LD_INT 0
3490: ST_TO_ADDR
// end ;
3491: GO 3385
// end ;
3493: GO 3366
3495: POP
3496: POP
// end ; for r in starting_crates do
3497: LD_ADDR_VAR 0 8
3501: PUSH
3502: LD_EXP 6
3506: PUSH
3507: FOR_IN
3508: IFFALSE 3540
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3510: LD_INT 1
3512: PPUSH
3513: LD_INT 5
3515: PPUSH
3516: LD_VAR 0 4
3520: PPUSH
3521: LD_VAR 0 5
3525: PPUSH
3526: LD_VAR 0 8
3530: PPUSH
3531: LD_INT 0
3533: PPUSH
3534: CALL_OW 60
3538: GO 3507
3540: POP
3541: POP
// if def_morale_flags then
3542: LD_EXP 49
3546: IFFALSE 3685
// begin x := start_def [ pos ] [ 1 ] ;
3548: LD_ADDR_VAR 0 4
3552: PUSH
3553: LD_EXP 26
3557: PUSH
3558: LD_VAR 0 3
3562: ARRAY
3563: PUSH
3564: LD_INT 1
3566: ARRAY
3567: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3568: LD_ADDR_VAR 0 5
3572: PUSH
3573: LD_EXP 26
3577: PUSH
3578: LD_VAR 0 3
3582: ARRAY
3583: PUSH
3584: LD_INT 2
3586: ARRAY
3587: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3588: LD_VAR 0 4
3592: PPUSH
3593: LD_VAR 0 5
3597: PPUSH
3598: LD_INT 12
3600: PPUSH
3601: LD_INT 2
3603: PPUSH
3604: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3608: LD_ADDR_EXP 27
3612: PUSH
3613: LD_EXP 27
3617: PUSH
3618: LD_VAR 0 1
3622: PPUSH
3623: LD_VAR 0 4
3627: PPUSH
3628: LD_VAR 0 5
3632: PPUSH
3633: LD_INT 1
3635: PUSH
3636: LD_INT 100
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: PUSH
3643: LD_INT 2
3645: PUSH
3646: LD_INT 50
3648: PUSH
3649: EMPTY
3650: LIST
3651: LIST
3652: PUSH
3653: LD_INT 3
3655: PUSH
3656: LD_INT 20
3658: PUSH
3659: EMPTY
3660: LIST
3661: LIST
3662: PUSH
3663: LD_INT 20
3665: PUSH
3666: LD_INT 100
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: LIST
3677: LIST
3678: PPUSH
3679: CALL_OW 418
3683: ADD
3684: ST_TO_ADDR
// end ; commander := true ;
3685: LD_ADDR_LOC 1
3689: PUSH
3690: LD_INT 1
3692: ST_TO_ADDR
// soldiers_created := 0 ;
3693: LD_ADDR_LOC 4
3697: PUSH
3698: LD_INT 0
3700: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3701: LD_ADDR_VAR 0 7
3705: PUSH
3706: DOUBLE
3707: LD_INT 1
3709: DEC
3710: ST_TO_ADDR
3711: LD_EXP 3
3715: PUSH
3716: FOR_TO
3717: IFFALSE 3870
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3719: LD_ADDR_VAR 0 4
3723: PUSH
3724: LD_EXP 25
3728: PUSH
3729: LD_VAR 0 3
3733: ARRAY
3734: PUSH
3735: LD_VAR 0 7
3739: ARRAY
3740: PUSH
3741: LD_INT 1
3743: ARRAY
3744: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3745: LD_ADDR_VAR 0 5
3749: PUSH
3750: LD_EXP 25
3754: PUSH
3755: LD_VAR 0 3
3759: ARRAY
3760: PUSH
3761: LD_VAR 0 7
3765: ARRAY
3766: PUSH
3767: LD_INT 2
3769: ARRAY
3770: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3771: LD_ADDR_VAR 0 6
3775: PUSH
3776: LD_EXP 25
3780: PUSH
3781: LD_VAR 0 3
3785: ARRAY
3786: PUSH
3787: LD_VAR 0 7
3791: ARRAY
3792: PUSH
3793: LD_INT 3
3795: ARRAY
3796: ST_TO_ADDR
// bc_type := b_breastwork ;
3797: LD_ADDR_OWVAR 42
3801: PUSH
3802: LD_INT 31
3804: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3805: LD_ADDR_VAR 0 9
3809: PUSH
3810: LD_VAR 0 4
3814: PPUSH
3815: LD_VAR 0 5
3819: PPUSH
3820: LD_VAR 0 6
3824: PPUSH
3825: CALL_OW 47
3829: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3830: LD_INT 1
3832: PPUSH
3833: LD_INT 1
3835: PPUSH
3836: LD_INT 0
3838: PPUSH
3839: LD_INT 0
3841: PPUSH
3842: LD_INT 0
3844: PPUSH
3845: LD_VAR 0 9
3849: PPUSH
3850: CALL 2496 0 6
// soldiers_created := soldiers_created + 1 ;
3854: LD_ADDR_LOC 4
3858: PUSH
3859: LD_LOC 4
3863: PUSH
3864: LD_INT 1
3866: PLUS
3867: ST_TO_ADDR
// end ;
3868: GO 3716
3870: POP
3871: POP
// x := start_def [ pos ] [ 1 ] ;
3872: LD_ADDR_VAR 0 4
3876: PUSH
3877: LD_EXP 26
3881: PUSH
3882: LD_VAR 0 3
3886: ARRAY
3887: PUSH
3888: LD_INT 1
3890: ARRAY
3891: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3892: LD_ADDR_VAR 0 5
3896: PUSH
3897: LD_EXP 26
3901: PUSH
3902: LD_VAR 0 3
3906: ARRAY
3907: PUSH
3908: LD_INT 2
3910: ARRAY
3911: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3912: LD_LOC 8
3916: PUSH
3917: LD_EXP 3
3921: MINUS
3922: PPUSH
3923: LD_INT 1
3925: PPUSH
3926: LD_VAR 0 4
3930: PPUSH
3931: LD_VAR 0 5
3935: PPUSH
3936: LD_INT 5
3938: PPUSH
3939: LD_INT 0
3941: PPUSH
3942: CALL 2496 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3946: LD_LOC 5
3950: PPUSH
3951: LD_INT 2
3953: PPUSH
3954: LD_VAR 0 4
3958: PPUSH
3959: LD_VAR 0 5
3963: PPUSH
3964: LD_INT 5
3966: PPUSH
3967: LD_INT 0
3969: PPUSH
3970: CALL 2496 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3974: LD_LOC 7
3978: PPUSH
3979: LD_INT 3
3981: PPUSH
3982: LD_VAR 0 4
3986: PPUSH
3987: LD_VAR 0 5
3991: PPUSH
3992: LD_INT 5
3994: PPUSH
3995: LD_INT 0
3997: PPUSH
3998: CALL 2496 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4002: LD_LOC 6
4006: PPUSH
4007: LD_INT 4
4009: PPUSH
4010: LD_VAR 0 4
4014: PPUSH
4015: LD_VAR 0 5
4019: PPUSH
4020: LD_INT 5
4022: PPUSH
4023: LD_INT 0
4025: PPUSH
4026: CALL 2496 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4030: LD_EXP 50
4034: PUSH
4035: LD_INT 20
4037: PPUSH
4038: LD_VAR 0 1
4042: PPUSH
4043: CALL_OW 321
4047: PUSH
4048: LD_INT 1
4050: EQUAL
4051: AND
4052: IFFALSE 4069
// SetTech ( tech_SibDet , side , state_researched ) ;
4054: LD_INT 20
4056: PPUSH
4057: LD_VAR 0 1
4061: PPUSH
4062: LD_INT 2
4064: PPUSH
4065: CALL_OW 322
// if def_siberite_bomb = 1 then
4069: LD_EXP 53
4073: PUSH
4074: LD_INT 1
4076: EQUAL
4077: IFFALSE 4111
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4079: LD_INT 25
4081: PPUSH
4082: LD_VAR 0 1
4086: PPUSH
4087: LD_INT 1
4089: PPUSH
4090: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4094: LD_INT 73
4096: PPUSH
4097: LD_VAR 0 1
4101: PPUSH
4102: LD_INT 1
4104: PPUSH
4105: CALL_OW 322
// end else
4109: GO 4141
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4111: LD_INT 25
4113: PPUSH
4114: LD_VAR 0 1
4118: PPUSH
4119: LD_INT 0
4121: PPUSH
4122: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4126: LD_INT 73
4128: PPUSH
4129: LD_VAR 0 1
4133: PPUSH
4134: LD_INT 0
4136: PPUSH
4137: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4141: LD_INT 24
4143: PPUSH
4144: LD_VAR 0 1
4148: PPUSH
4149: LD_INT 0
4151: PPUSH
4152: CALL_OW 322
// global_defined := true ;
4156: LD_ADDR_LOC 3
4160: PUSH
4161: LD_INT 1
4163: ST_TO_ADDR
// end ;
4164: LD_VAR 0 2
4168: RET
// every 0 0$1 do
4169: GO 4171
4171: DISABLE
// if ( def_siberite_bomb > 1 ) then
4172: LD_EXP 53
4176: PUSH
4177: LD_INT 1
4179: GREATER
4180: IFFALSE 4195
// begin wait ( siberite_bomb_Delay ) ;
4182: LD_EXP 12
4186: PPUSH
4187: CALL_OW 67
// EnableSibFiss ;
4191: CALL 4196 0 0
// end ;
4195: END
// function EnableSibFiss ; var i ; begin
4196: LD_INT 0
4198: PPUSH
4199: PPUSH
// for i := 1 to 8 do
4200: LD_ADDR_VAR 0 2
4204: PUSH
4205: DOUBLE
4206: LD_INT 1
4208: DEC
4209: ST_TO_ADDR
4210: LD_INT 8
4212: PUSH
4213: FOR_TO
4214: IFFALSE 4260
// if Side_Positions [ i ] then
4216: LD_EXP 21
4220: PUSH
4221: LD_VAR 0 2
4225: ARRAY
4226: IFFALSE 4258
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4228: LD_INT 25
4230: PPUSH
4231: LD_VAR 0 2
4235: PPUSH
4236: LD_INT 1
4238: PPUSH
4239: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4243: LD_INT 73
4245: PPUSH
4246: LD_VAR 0 2
4250: PPUSH
4251: LD_INT 1
4253: PPUSH
4254: CALL_OW 322
// end ;
4258: GO 4213
4260: POP
4261: POP
// end ;
4262: LD_VAR 0 1
4266: RET
// function prepare_sides ; var i ; begin
4267: LD_INT 0
4269: PPUSH
4270: PPUSH
// global_units := [ ] ;
4271: LD_ADDR_LOC 2
4275: PUSH
4276: EMPTY
4277: ST_TO_ADDR
// global_defined := false ;
4278: LD_ADDR_LOC 3
4282: PUSH
4283: LD_INT 0
4285: ST_TO_ADDR
// CountClassMembers ;
4286: CALL 4336 0 0
// for i := 1 to 8 do
4290: LD_ADDR_VAR 0 2
4294: PUSH
4295: DOUBLE
4296: LD_INT 1
4298: DEC
4299: ST_TO_ADDR
4300: LD_INT 8
4302: PUSH
4303: FOR_TO
4304: IFFALSE 4329
// if Side_Positions [ i ] then
4306: LD_EXP 21
4310: PUSH
4311: LD_VAR 0 2
4315: ARRAY
4316: IFFALSE 4327
// prepare_side ( i ) ;
4318: LD_VAR 0 2
4322: PPUSH
4323: CALL 3084 0 1
4327: GO 4303
4329: POP
4330: POP
// end ;
4331: LD_VAR 0 1
4335: RET
// function CountClassMembers ; var Mode ; begin
4336: LD_INT 0
4338: PPUSH
4339: PPUSH
// if No_Mechs then
4340: LD_EXP 55
4344: IFFALSE 4356
// Mode := 2 else
4346: LD_ADDR_VAR 0 2
4350: PUSH
4351: LD_INT 2
4353: ST_TO_ADDR
4354: GO 4364
// Mode := 1 ;
4356: LD_ADDR_VAR 0 2
4360: PUSH
4361: LD_INT 1
4363: ST_TO_ADDR
// neng := number_of_people ;
4364: LD_ADDR_LOC 5
4368: PUSH
4369: LD_EXP 4
4373: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4374: LD_ADDR_LOC 8
4378: PUSH
4379: LD_LOC 5
4383: PUSH
4384: LD_INT 4
4386: PUSH
4387: LD_INT 3
4389: PUSH
4390: EMPTY
4391: LIST
4392: LIST
4393: PUSH
4394: LD_VAR 0 2
4398: ARRAY
4399: DIV
4400: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4401: LD_LOC 8
4405: PUSH
4406: LD_EXP 3
4410: LESS
4411: IFFALSE 4423
// nsol := number_of_breastworks ;
4413: LD_ADDR_LOC 8
4417: PUSH
4418: LD_EXP 3
4422: ST_TO_ADDR
// neng := neng - nsol ;
4423: LD_ADDR_LOC 5
4427: PUSH
4428: LD_LOC 5
4432: PUSH
4433: LD_LOC 8
4437: MINUS
4438: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4439: LD_ADDR_LOC 6
4443: PUSH
4444: LD_LOC 5
4448: PUSH
4449: LD_INT 3
4451: PUSH
4452: LD_INT 2
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: PUSH
4459: LD_VAR 0 2
4463: ARRAY
4464: DIV
4465: ST_TO_ADDR
// if ( nsci < 1 ) then
4466: LD_LOC 6
4470: PUSH
4471: LD_INT 1
4473: LESS
4474: IFFALSE 4484
// nsci := 1 ;
4476: LD_ADDR_LOC 6
4480: PUSH
4481: LD_INT 1
4483: ST_TO_ADDR
// neng := neng - nsci ;
4484: LD_ADDR_LOC 5
4488: PUSH
4489: LD_LOC 5
4493: PUSH
4494: LD_LOC 6
4498: MINUS
4499: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4500: LD_ADDR_LOC 7
4504: PUSH
4505: LD_LOC 5
4509: PUSH
4510: LD_INT 2
4512: DIV
4513: PUSH
4514: LD_INT 0
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: PUSH
4521: LD_VAR 0 2
4525: ARRAY
4526: ST_TO_ADDR
// neng := neng - nmech ;
4527: LD_ADDR_LOC 5
4531: PUSH
4532: LD_LOC 5
4536: PUSH
4537: LD_LOC 7
4541: MINUS
4542: ST_TO_ADDR
// if ( neng < 1 ) then
4543: LD_LOC 5
4547: PUSH
4548: LD_INT 1
4550: LESS
4551: IFFALSE 4561
// neng := 1 ;
4553: LD_ADDR_LOC 5
4557: PUSH
4558: LD_INT 1
4560: ST_TO_ADDR
// end ;
4561: LD_VAR 0 1
4565: RET
// starting begin disable ( 98 ) ;
4566: LD_INT 98
4568: DISABLE_MARKED
// disable ( 99 ) ;
4569: LD_INT 99
4571: DISABLE_MARKED
// disable ( 400 ) ;
4572: LD_INT 400
4574: DISABLE_MARKED
// disable ( 401 ) ;
4575: LD_INT 401
4577: DISABLE_MARKED
// disable ( 600 ) ;
4578: LD_INT 600
4580: DISABLE_MARKED
// mp_selectmsg := true ;
4581: LD_ADDR_OWVAR 13
4585: PUSH
4586: LD_INT 1
4588: ST_TO_ADDR
// bonus_gained := [ ] ;
4589: LD_ADDR_EXP 16
4593: PUSH
4594: EMPTY
4595: ST_TO_ADDR
// activated := false ;
4596: LD_ADDR_EXP 17
4600: PUSH
4601: LD_INT 0
4603: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4604: CALL 68 0 0
// prepare_map_coordinates ;
4608: CALL 1401 0 0
// set_shared_visions_and_alliances ;
4612: CALL 2208 0 0
// ResetFog ;
4616: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4620: LD_OWVAR 2
4624: PPUSH
4625: CALL_OW 520
// prepare_sides ;
4629: CALL 4267 0 0
// init_respawning ;
4633: CALL 17070 0 0
// Init_Win_Condition ;
4637: CALL 15220 0 0
// InitLimits ;
4641: CALL 9666 0 0
// ShowTimer ;
4645: CALL 10603 0 0
// music_nat := Side_Nations [ your_side ] ;
4649: LD_ADDR_OWVAR 71
4653: PUSH
4654: LD_EXP 22
4658: PUSH
4659: LD_OWVAR 2
4663: ARRAY
4664: ST_TO_ADDR
// if IAmSpec then
4665: CALL_OW 531
4669: IFFALSE 4693
// begin fogoff ( true ) ;
4671: LD_INT 1
4673: PPUSH
4674: CALL_OW 344
// CenterNowOnXY ( 79 , 59 ) ;
4678: LD_INT 79
4680: PPUSH
4681: LD_INT 59
4683: PPUSH
4684: CALL_OW 86
// enable ( 400 ) ;
4688: LD_INT 400
4690: ENABLE_MARKED
// end else
4691: GO 4739
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4693: LD_EXP 26
4697: PUSH
4698: LD_EXP 21
4702: PUSH
4703: LD_OWVAR 2
4707: ARRAY
4708: ARRAY
4709: PUSH
4710: LD_INT 1
4712: ARRAY
4713: PPUSH
4714: LD_EXP 26
4718: PUSH
4719: LD_EXP 21
4723: PUSH
4724: LD_OWVAR 2
4728: ARRAY
4729: ARRAY
4730: PUSH
4731: LD_INT 2
4733: ARRAY
4734: PPUSH
4735: CALL_OW 86
// end ; AnimateTrees ( true ) ;
4739: LD_INT 1
4741: PPUSH
4742: CALL_OW 573
// InitApeman ;
4746: CALL 4969 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] ;
4750: LD_ADDR_EXP 58
4754: PUSH
4755: LD_INT 8
4757: PUSH
4758: LD_INT 11
4760: PUSH
4761: LD_INT 9
4763: PUSH
4764: LD_INT 10
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: ST_TO_ADDR
// BeginBuildUp ;
4773: CALL 17564 0 0
// end ; end_of_file
4777: END
// every 20 20$00 trigger apemanNumber do
4778: LD_EXP 32
4782: IFFALSE 4815
4784: GO 4786
4786: DISABLE
// begin enable ;
4787: ENABLE
// if apeLevel >= 8 then
4788: LD_EXP 37
4792: PUSH
4793: LD_INT 8
4795: GREATEREQUAL
4796: IFFALSE 4801
// disable else
4798: DISABLE
4799: GO 4815
// apeLevel := apeLevel + 1 ;
4801: LD_ADDR_EXP 37
4805: PUSH
4806: LD_EXP 37
4810: PUSH
4811: LD_INT 1
4813: PLUS
4814: ST_TO_ADDR
// end ;
4815: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
4816: LD_EXP 32
4820: PUSH
4821: LD_EXP 33
4825: LESS
4826: IFFALSE 4966
4828: GO 4830
4830: DISABLE
4831: LD_INT 0
4833: PPUSH
4834: PPUSH
4835: PPUSH
4836: PPUSH
// begin enable ;
4837: ENABLE
// for i := 1 to apemanPos do
4838: LD_ADDR_VAR 0 1
4842: PUSH
4843: DOUBLE
4844: LD_INT 1
4846: DEC
4847: ST_TO_ADDR
4848: LD_EXP 35
4852: PUSH
4853: FOR_TO
4854: IFFALSE 4964
// begin if apemanPlayerCount [ i ] then
4856: LD_EXP 36
4860: PUSH
4861: LD_VAR 0 1
4865: ARRAY
4866: IFFALSE 4962
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
4868: LD_EXP 36
4872: PUSH
4873: LD_VAR 0 1
4877: ARRAY
4878: PUSH
4879: LD_EXP 35
4883: PUSH
4884: LD_VAR 0 1
4888: ARRAY
4889: GREATER
4890: IFFALSE 4962
// begin ape := PrepareApeman ;
4892: LD_ADDR_VAR 0 2
4896: PUSH
4897: CALL 5469 0 0
4901: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
4902: LD_VAR 0 2
4906: PPUSH
4907: LD_EXP 38
4911: PUSH
4912: LD_VAR 0 1
4916: ARRAY
4917: PPUSH
4918: LD_INT 0
4920: PPUSH
4921: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
4925: LD_ADDR_EXP 35
4929: PUSH
4930: LD_EXP 35
4934: PPUSH
4935: LD_VAR 0 1
4939: PPUSH
4940: LD_EXP 35
4944: PUSH
4945: LD_VAR 0 1
4949: ARRAY
4950: PUSH
4951: LD_VAR 0 2
4955: UNION
4956: PPUSH
4957: CALL_OW 1
4961: ST_TO_ADDR
// end ; end ; end ;
4962: GO 4853
4964: POP
4965: POP
// end ;
4966: PPOPN 4
4968: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
4969: LD_INT 0
4971: PPUSH
4972: PPUSH
4973: PPUSH
4974: PPUSH
4975: PPUSH
4976: PPUSH
4977: PPUSH
// playersAmount := 0 ;
4978: LD_ADDR_VAR 0 3
4982: PUSH
4983: LD_INT 0
4985: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , ] ;
4986: LD_ADDR_VAR 0 7
4990: PUSH
4991: LD_INT 13
4993: PUSH
4994: LD_INT 14
4996: PUSH
4997: LD_INT 15
4999: PUSH
5000: LD_INT 16
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5009: LD_ADDR_EXP 38
5013: PUSH
5014: LD_INT 0
5016: PUSH
5017: LD_INT 0
5019: PUSH
5020: LD_INT 0
5022: PUSH
5023: LD_INT 0
5025: PUSH
5026: LD_INT 0
5028: PUSH
5029: LD_INT 0
5031: PUSH
5032: LD_INT 0
5034: PUSH
5035: LD_INT 0
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: LIST
5042: LIST
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: ST_TO_ADDR
// for j = 1 to Side_Positions do
5048: LD_ADDR_VAR 0 4
5052: PUSH
5053: DOUBLE
5054: LD_INT 1
5056: DEC
5057: ST_TO_ADDR
5058: LD_EXP 21
5062: PUSH
5063: FOR_TO
5064: IFFALSE 5131
// if Side_Positions [ j ] then
5066: LD_EXP 21
5070: PUSH
5071: LD_VAR 0 4
5075: ARRAY
5076: IFFALSE 5129
// begin playersAmount := playersAmount + 1 ;
5078: LD_ADDR_VAR 0 3
5082: PUSH
5083: LD_VAR 0 3
5087: PUSH
5088: LD_INT 1
5090: PLUS
5091: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5092: LD_ADDR_EXP 38
5096: PUSH
5097: LD_EXP 38
5101: PPUSH
5102: LD_VAR 0 4
5106: PPUSH
5107: LD_VAR 0 7
5111: PUSH
5112: LD_EXP 21
5116: PUSH
5117: LD_VAR 0 4
5121: ARRAY
5122: ARRAY
5123: PPUSH
5124: CALL_OW 1
5128: ST_TO_ADDR
// end ;
5129: GO 5063
5131: POP
5132: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5133: LD_ADDR_EXP 34
5137: PUSH
5138: LD_INT 3
5140: PUSH
5141: LD_EXP 13
5145: MUL
5146: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5147: LD_ADDR_EXP 32
5151: PUSH
5152: LD_VAR 0 3
5156: PUSH
5157: LD_EXP 34
5161: MUL
5162: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5163: LD_ADDR_EXP 33
5167: PUSH
5168: LD_EXP 32
5172: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5173: LD_ADDR_EXP 35
5177: PUSH
5178: LD_INT 0
5180: PUSH
5181: LD_INT 0
5183: PUSH
5184: LD_INT 0
5186: PUSH
5187: LD_INT 0
5189: PUSH
5190: LD_INT 0
5192: PUSH
5193: LD_INT 0
5195: PUSH
5196: LD_INT 0
5198: PUSH
5199: LD_INT 0
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5212: LD_ADDR_EXP 36
5216: PUSH
5217: LD_INT 0
5219: PUSH
5220: LD_INT 0
5222: PUSH
5223: LD_INT 0
5225: PUSH
5226: LD_INT 0
5228: PUSH
5229: LD_INT 0
5231: PUSH
5232: LD_INT 0
5234: PUSH
5235: LD_INT 0
5237: PUSH
5238: LD_INT 0
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: ST_TO_ADDR
// apeLevel := 1 ;
5251: LD_ADDR_EXP 37
5255: PUSH
5256: LD_INT 1
5258: ST_TO_ADDR
// if not apemanNumber then
5259: LD_EXP 32
5263: NOT
5264: IFFALSE 5268
// exit ;
5266: GO 5464
// for i := 1 to apemanPerPlayer do
5268: LD_ADDR_VAR 0 2
5272: PUSH
5273: DOUBLE
5274: LD_INT 1
5276: DEC
5277: ST_TO_ADDR
5278: LD_EXP 34
5282: PUSH
5283: FOR_TO
5284: IFFALSE 5462
// begin for j := 1 to Side_Positions do
5286: LD_ADDR_VAR 0 4
5290: PUSH
5291: DOUBLE
5292: LD_INT 1
5294: DEC
5295: ST_TO_ADDR
5296: LD_EXP 21
5300: PUSH
5301: FOR_TO
5302: IFFALSE 5458
// if Side_Positions [ j ] then
5304: LD_EXP 21
5308: PUSH
5309: LD_VAR 0 4
5313: ARRAY
5314: IFFALSE 5456
// begin pos := Side_Positions [ j ] ;
5316: LD_ADDR_VAR 0 6
5320: PUSH
5321: LD_EXP 21
5325: PUSH
5326: LD_VAR 0 4
5330: ARRAY
5331: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5332: LD_ADDR_EXP 36
5336: PUSH
5337: LD_EXP 36
5341: PPUSH
5342: LD_VAR 0 4
5346: PPUSH
5347: LD_EXP 36
5351: PUSH
5352: LD_VAR 0 4
5356: ARRAY
5357: PUSH
5358: LD_INT 1
5360: PLUS
5361: PPUSH
5362: CALL_OW 1
5366: ST_TO_ADDR
// ape := PrepareApeman ;
5367: LD_ADDR_VAR 0 5
5371: PUSH
5372: CALL 5469 0 0
5376: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5377: LD_ADDR_EXP 35
5381: PUSH
5382: LD_EXP 35
5386: PPUSH
5387: LD_VAR 0 4
5391: PPUSH
5392: LD_EXP 35
5396: PUSH
5397: LD_VAR 0 4
5401: ARRAY
5402: PPUSH
5403: LD_EXP 35
5407: PUSH
5408: LD_VAR 0 4
5412: ARRAY
5413: PUSH
5414: LD_INT 1
5416: PLUS
5417: PPUSH
5418: LD_VAR 0 5
5422: PPUSH
5423: CALL_OW 1
5427: PPUSH
5428: CALL_OW 1
5432: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5433: LD_VAR 0 5
5437: PPUSH
5438: LD_EXP 38
5442: PUSH
5443: LD_VAR 0 4
5447: ARRAY
5448: PPUSH
5449: LD_INT 0
5451: PPUSH
5452: CALL_OW 49
// end ;
5456: GO 5301
5458: POP
5459: POP
// end ;
5460: GO 5283
5462: POP
5463: POP
// end ;
5464: LD_VAR 0 1
5468: RET
// export function PrepareApeman ; var bonus ; begin
5469: LD_INT 0
5471: PPUSH
5472: PPUSH
// uc_side := 0 ;
5473: LD_ADDR_OWVAR 20
5477: PUSH
5478: LD_INT 0
5480: ST_TO_ADDR
// uc_nation := 0 ;
5481: LD_ADDR_OWVAR 21
5485: PUSH
5486: LD_INT 0
5488: ST_TO_ADDR
// InitHc ;
5489: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
5493: LD_ADDR_VAR 0 2
5497: PUSH
5498: LD_INT 1
5500: NEG
5501: PUSH
5502: LD_INT 0
5504: PUSH
5505: LD_INT 1
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: LIST
5512: PUSH
5513: LD_INT 25
5515: PUSH
5516: LD_INT 12
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: PPUSH
5523: CALL_OW 69
5527: PUSH
5528: LD_INT 3
5530: MOD
5531: PUSH
5532: LD_INT 1
5534: PLUS
5535: ARRAY
5536: ST_TO_ADDR
// hc_class := class_apeman ;
5537: LD_ADDR_OWVAR 28
5541: PUSH
5542: LD_INT 12
5544: ST_TO_ADDR
// hc_gallery :=  ;
5545: LD_ADDR_OWVAR 33
5549: PUSH
5550: LD_STRING 
5552: ST_TO_ADDR
// hc_name :=  ;
5553: LD_ADDR_OWVAR 26
5557: PUSH
5558: LD_STRING 
5560: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
5561: LD_ADDR_OWVAR 31
5565: PUSH
5566: LD_EXP 37
5570: PUSH
5571: LD_VAR 0 2
5575: PLUS
5576: PUSH
5577: LD_EXP 37
5581: PUSH
5582: LD_VAR 0 2
5586: PLUS
5587: PUSH
5588: LD_EXP 37
5592: PUSH
5593: LD_VAR 0 2
5597: PLUS
5598: PUSH
5599: LD_EXP 37
5603: PUSH
5604: LD_VAR 0 2
5608: PLUS
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: LIST
5614: LIST
5615: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
5616: LD_ADDR_OWVAR 35
5620: PUSH
5621: LD_INT 10
5623: PUSH
5624: LD_VAR 0 2
5628: MUL
5629: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
5630: LD_ADDR_OWVAR 29
5634: PUSH
5635: LD_INT 12
5637: PUSH
5638: LD_INT 12
5640: PUSH
5641: EMPTY
5642: LIST
5643: LIST
5644: ST_TO_ADDR
// result := CreateHuman ;
5645: LD_ADDR_VAR 0 1
5649: PUSH
5650: CALL_OW 44
5654: ST_TO_ADDR
// end ;
5655: LD_VAR 0 1
5659: RET
// export function ApeKilled ( ape ) ; var s , i ; begin
5660: LD_INT 0
5662: PPUSH
5663: PPUSH
5664: PPUSH
// if not ape then
5665: LD_VAR 0 1
5669: NOT
5670: IFFALSE 5674
// exit ;
5672: GO 5777
// for i = 1 to apemanPos do
5674: LD_ADDR_VAR 0 4
5678: PUSH
5679: DOUBLE
5680: LD_INT 1
5682: DEC
5683: ST_TO_ADDR
5684: LD_EXP 35
5688: PUSH
5689: FOR_TO
5690: IFFALSE 5724
// if ape in apemanPos [ i ] then
5692: LD_VAR 0 1
5696: PUSH
5697: LD_EXP 35
5701: PUSH
5702: LD_VAR 0 4
5706: ARRAY
5707: IN
5708: IFFALSE 5722
// begin s := i ;
5710: LD_ADDR_VAR 0 3
5714: PUSH
5715: LD_VAR 0 4
5719: ST_TO_ADDR
// break ;
5720: GO 5724
// end ;
5722: GO 5689
5724: POP
5725: POP
// apemanPos := Replace ( apemanPos , s , apemanPos [ s ] diff ape ) ;
5726: LD_ADDR_EXP 35
5730: PUSH
5731: LD_EXP 35
5735: PPUSH
5736: LD_VAR 0 3
5740: PPUSH
5741: LD_EXP 35
5745: PUSH
5746: LD_VAR 0 3
5750: ARRAY
5751: PUSH
5752: LD_VAR 0 1
5756: DIFF
5757: PPUSH
5758: CALL_OW 1
5762: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
5763: LD_ADDR_EXP 32
5767: PUSH
5768: LD_EXP 32
5772: PUSH
5773: LD_INT 1
5775: MINUS
5776: ST_TO_ADDR
// end ; end_of_file
5777: LD_VAR 0 2
5781: RET
// every 1 1$0 + 0 0$0.3 do
5782: GO 5784
5784: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5785: LD_INT 4
5787: PPUSH
5788: LD_INT 5
5790: PPUSH
5791: CALL_OW 12
5795: PPUSH
5796: LD_INT 1
5798: PPUSH
5799: CALL_OW 57
// enable ;
5803: ENABLE
// end ;
5804: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5805: GO 5807
5807: DISABLE
5808: LD_INT 0
5810: PPUSH
5811: PPUSH
// begin case tick of 1 .. 1 1$0 :
5812: LD_OWVAR 1
5816: PUSH
5817: LD_INT 1
5819: DOUBLE
5820: GREATEREQUAL
5821: IFFALSE 5829
5823: LD_INT 2100
5825: DOUBLE
5826: LESSEQUAL
5827: IFTRUE 5831
5829: GO 5859
5831: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5832: LD_EXP 8
5836: PUSH
5837: LD_INT 100
5839: DIVREAL
5840: PUSH
5841: LD_INT 525
5843: PPUSH
5844: LD_INT 1050
5846: PPUSH
5847: CALL_OW 12
5851: MUL
5852: PPUSH
5853: CALL_OW 67
5857: GO 6161
5859: LD_INT 2100
5861: PUSH
5862: LD_INT 1
5864: PLUS
5865: DOUBLE
5866: GREATEREQUAL
5867: IFFALSE 5875
5869: LD_INT 10500
5871: DOUBLE
5872: LESSEQUAL
5873: IFTRUE 5877
5875: GO 5905
5877: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5878: LD_EXP 8
5882: PUSH
5883: LD_INT 100
5885: DIVREAL
5886: PUSH
5887: LD_INT 1050
5889: PPUSH
5890: LD_INT 1750
5892: PPUSH
5893: CALL_OW 12
5897: MUL
5898: PPUSH
5899: CALL_OW 67
5903: GO 6161
5905: LD_INT 10500
5907: PUSH
5908: LD_INT 1
5910: PLUS
5911: DOUBLE
5912: GREATEREQUAL
5913: IFFALSE 5921
5915: LD_INT 21000
5917: DOUBLE
5918: LESSEQUAL
5919: IFTRUE 5923
5921: GO 5951
5923: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5924: LD_EXP 8
5928: PUSH
5929: LD_INT 100
5931: DIVREAL
5932: PUSH
5933: LD_INT 1750
5935: PPUSH
5936: LD_INT 2100
5938: PPUSH
5939: CALL_OW 12
5943: MUL
5944: PPUSH
5945: CALL_OW 67
5949: GO 6161
5951: LD_INT 21000
5953: PUSH
5954: LD_INT 1
5956: PLUS
5957: DOUBLE
5958: GREATEREQUAL
5959: IFFALSE 5967
5961: LD_INT 42000
5963: DOUBLE
5964: LESSEQUAL
5965: IFTRUE 5969
5967: GO 5997
5969: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5970: LD_EXP 8
5974: PUSH
5975: LD_INT 100
5977: DIVREAL
5978: PUSH
5979: LD_INT 2100
5981: PPUSH
5982: LD_INT 2275
5984: PPUSH
5985: CALL_OW 12
5989: MUL
5990: PPUSH
5991: CALL_OW 67
5995: GO 6161
5997: LD_INT 42000
5999: PUSH
6000: LD_INT 1
6002: PLUS
6003: DOUBLE
6004: GREATEREQUAL
6005: IFFALSE 6013
6007: LD_INT 63000
6009: DOUBLE
6010: LESSEQUAL
6011: IFTRUE 6015
6013: GO 6043
6015: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
6016: LD_EXP 8
6020: PUSH
6021: LD_INT 100
6023: DIVREAL
6024: PUSH
6025: LD_INT 2275
6027: PPUSH
6028: LD_INT 2450
6030: PPUSH
6031: CALL_OW 12
6035: MUL
6036: PPUSH
6037: CALL_OW 67
6041: GO 6161
6043: LD_INT 63000
6045: PUSH
6046: LD_INT 1
6048: PLUS
6049: DOUBLE
6050: GREATEREQUAL
6051: IFFALSE 6059
6053: LD_INT 105000
6055: DOUBLE
6056: LESSEQUAL
6057: IFTRUE 6061
6059: GO 6089
6061: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
6062: LD_EXP 8
6066: PUSH
6067: LD_INT 100
6069: DIVREAL
6070: PUSH
6071: LD_INT 2450
6073: PPUSH
6074: LD_INT 2800
6076: PPUSH
6077: CALL_OW 12
6081: MUL
6082: PPUSH
6083: CALL_OW 67
6087: GO 6161
6089: LD_INT 105000
6091: PUSH
6092: LD_INT 1
6094: PLUS
6095: DOUBLE
6096: GREATEREQUAL
6097: IFFALSE 6105
6099: LD_INT 630000
6101: DOUBLE
6102: LESSEQUAL
6103: IFTRUE 6107
6105: GO 6135
6107: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
6108: LD_EXP 8
6112: PUSH
6113: LD_INT 100
6115: DIVREAL
6116: PUSH
6117: LD_INT 2800
6119: PPUSH
6120: LD_INT 3500
6122: PPUSH
6123: CALL_OW 12
6127: MUL
6128: PPUSH
6129: CALL_OW 67
6133: GO 6161
6135: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
6136: LD_EXP 8
6140: PUSH
6141: LD_INT 100
6143: DIVREAL
6144: PUSH
6145: LD_INT 3500
6147: PPUSH
6148: LD_INT 3850
6150: PPUSH
6151: CALL_OW 12
6155: MUL
6156: PPUSH
6157: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
6161: LD_ADDR_VAR 0 2
6165: PUSH
6166: LD_INT 3
6168: PPUSH
6169: LD_INT 5
6171: PPUSH
6172: CALL_OW 12
6176: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
6177: LD_ADDR_VAR 0 1
6181: PUSH
6182: LD_EXP 21
6186: PUSH
6187: LD_INT 0
6189: PUSH
6190: EMPTY
6191: LIST
6192: DIFF
6193: PUSH
6194: FOR_IN
6195: IFFALSE 6235
// CreateCratesArea ( amount , [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] [ i ] , true ) ;
6197: LD_VAR 0 2
6201: PPUSH
6202: LD_INT 8
6204: PUSH
6205: LD_INT 11
6207: PUSH
6208: LD_INT 9
6210: PUSH
6211: LD_INT 10
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: LIST
6218: LIST
6219: PUSH
6220: LD_VAR 0 1
6224: ARRAY
6225: PPUSH
6226: LD_INT 1
6228: PPUSH
6229: CALL_OW 55
6233: GO 6194
6235: POP
6236: POP
// enable ;
6237: ENABLE
// end ; end_of_file
6238: PPOPN 2
6240: END
// every 0 0$1 trigger def_tree_function do
6241: LD_EXP 1
6245: IFFALSE 6283
6247: GO 6249
6249: DISABLE
// begin wait ( rand ( 3 3$0 , 10 10$0 ) ) ;
6250: LD_INT 6300
6252: PPUSH
6253: LD_INT 21000
6255: PPUSH
6256: CALL_OW 12
6260: PPUSH
6261: CALL_OW 67
// SetAreaMapShow ( Tree , 1 ) ;
6265: LD_INT 3
6267: PPUSH
6268: LD_INT 1
6270: PPUSH
6271: CALL_OW 424
// activated := true ;
6275: LD_ADDR_EXP 17
6279: PUSH
6280: LD_INT 1
6282: ST_TO_ADDR
// end ;
6283: END
// every 0 0$2 trigger activated and def_tree_function do var i , un , tmp ;
6284: LD_EXP 17
6288: PUSH
6289: LD_EXP 1
6293: AND
6294: IFFALSE 6558
6296: GO 6298
6298: DISABLE
6299: LD_INT 0
6301: PPUSH
6302: PPUSH
6303: PPUSH
// begin enable ;
6304: ENABLE
// ExtraStrings := [ #MultiSmall-Tree & def_tree_function ] ;
6305: LD_ADDR_EXP 56
6309: PUSH
6310: LD_STRING #MultiSmall-Tree
6312: PUSH
6313: LD_EXP 1
6317: STR
6318: PUSH
6319: EMPTY
6320: LIST
6321: ST_TO_ADDR
// tmp := FilterUnitsInArea ( Tree , [ f_type , unit_human ] ) ;
6322: LD_ADDR_VAR 0 3
6326: PUSH
6327: LD_INT 3
6329: PPUSH
6330: LD_INT 21
6332: PUSH
6333: LD_INT 1
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: PPUSH
6340: CALL_OW 70
6344: ST_TO_ADDR
// if not tmp then
6345: LD_VAR 0 3
6349: NOT
6350: IFFALSE 6354
// exit ;
6352: GO 6558
// for un in tmp do
6354: LD_ADDR_VAR 0 2
6358: PUSH
6359: LD_VAR 0 3
6363: PUSH
6364: FOR_IN
6365: IFFALSE 6556
// begin if un in bonus_gained then
6367: LD_VAR 0 2
6371: PUSH
6372: LD_EXP 16
6376: IN
6377: IFFALSE 6381
// continue ;
6379: GO 6364
// bonus_gained := bonus_gained ^ un ;
6381: LD_ADDR_EXP 16
6385: PUSH
6386: LD_EXP 16
6390: PUSH
6391: LD_VAR 0 2
6395: ADD
6396: ST_TO_ADDR
// if GetClass ( un ) in [ class_soldier , class_engineer , class_mechanic , class_scientistic , class_sniper , class_bazooker , class_mortar ] then
6397: LD_VAR 0 2
6401: PPUSH
6402: CALL_OW 257
6406: PUSH
6407: LD_INT 1
6409: PUSH
6410: LD_INT 2
6412: PUSH
6413: LD_INT 3
6415: PUSH
6416: LD_INT 4
6418: PUSH
6419: LD_INT 5
6421: PUSH
6422: LD_INT 9
6424: PUSH
6425: LD_INT 8
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: IN
6437: IFFALSE 6486
// begin for i := 1 to 4 do
6439: LD_ADDR_VAR 0 1
6443: PUSH
6444: DOUBLE
6445: LD_INT 1
6447: DEC
6448: ST_TO_ADDR
6449: LD_INT 4
6451: PUSH
6452: FOR_TO
6453: IFFALSE 6482
// GiveSkillBonus ( un , i , tree_function [ i ] ) ;
6455: LD_VAR 0 2
6459: PPUSH
6460: LD_VAR 0 1
6464: PPUSH
6465: LD_EXP 14
6469: PUSH
6470: LD_VAR 0 1
6474: ARRAY
6475: PPUSH
6476: CALL_OW 238
6480: GO 6452
6482: POP
6483: POP
// end else
6484: GO 6554
// if un in [ class_apeman , class_apeman_engineer , class_apeman_kamikaze , class_apeman_soldier ] then
6486: LD_VAR 0 2
6490: PUSH
6491: LD_INT 12
6493: PUSH
6494: LD_INT 16
6496: PUSH
6497: LD_INT 17
6499: PUSH
6500: LD_INT 15
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: LIST
6507: LIST
6508: IN
6509: IFFALSE 6554
// begin for i := 1 to 4 do
6511: LD_ADDR_VAR 0 1
6515: PUSH
6516: DOUBLE
6517: LD_INT 1
6519: DEC
6520: ST_TO_ADDR
6521: LD_INT 4
6523: PUSH
6524: FOR_TO
6525: IFFALSE 6552
// GiveSkillBonus ( un , i , tree_function [ 5 ] ) ;
6527: LD_VAR 0 2
6531: PPUSH
6532: LD_VAR 0 1
6536: PPUSH
6537: LD_EXP 14
6541: PUSH
6542: LD_INT 5
6544: ARRAY
6545: PPUSH
6546: CALL_OW 238
6550: GO 6524
6552: POP
6553: POP
// end ; end ;
6554: GO 6364
6556: POP
6557: POP
// end ; end_of_file
6558: PPOPN 3
6560: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6561: LD_VAR 0 1
6565: PPUSH
6566: CALL_OW 266
6570: PUSH
6571: LD_INT 0
6573: PUSH
6574: LD_INT 1
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: IN
6581: IFFALSE 6606
// SetBName ( b , @ & GetSide ( b ) ) ;
6583: LD_VAR 0 1
6587: PPUSH
6588: LD_STRING @
6590: PUSH
6591: LD_VAR 0 1
6595: PPUSH
6596: CALL_OW 255
6600: STR
6601: PPUSH
6602: CALL_OW 500
// if def_game_rules then
6606: LD_EXP 40
6610: IFFALSE 6647
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
6612: LD_VAR 0 1
6616: PPUSH
6617: LD_VAR 0 1
6621: PPUSH
6622: CALL_OW 266
6626: PPUSH
6627: LD_VAR 0 1
6631: PPUSH
6632: CALL_OW 255
6636: PPUSH
6637: LD_INT 0
6639: PPUSH
6640: LD_INT 1
6642: PPUSH
6643: CALL 10067 0 5
// end ;
6647: PPOPN 2
6649: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6650: LD_VAR 0 1
6654: PPUSH
6655: CALL_OW 266
6659: PUSH
6660: LD_INT 0
6662: PUSH
6663: LD_INT 1
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: IN
6670: IFFALSE 6695
// SetBName ( b , @ & GetSide ( b ) ) ;
6672: LD_VAR 0 1
6676: PPUSH
6677: LD_STRING @
6679: PUSH
6680: LD_VAR 0 1
6684: PPUSH
6685: CALL_OW 255
6689: STR
6690: PPUSH
6691: CALL_OW 500
// if def_game_rules then
6695: LD_EXP 40
6699: IFFALSE 6738
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
6701: LD_VAR 0 1
6705: PPUSH
6706: LD_VAR 0 1
6710: PPUSH
6711: CALL_OW 266
6715: PPUSH
6716: LD_VAR 0 1
6720: PPUSH
6721: CALL_OW 255
6725: PPUSH
6726: LD_VAR 0 2
6730: PPUSH
6731: LD_INT 1
6733: PPUSH
6734: CALL 10067 0 5
// end ;
6738: PPOPN 3
6740: END
// on VehicleConstructed ( veh , fac ) do var side ;
6741: LD_INT 0
6743: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6744: LD_VAR 0 1
6748: PPUSH
6749: CALL_OW 263
6753: PUSH
6754: LD_INT 5
6756: EQUAL
6757: IFFALSE 6899
// begin side := GetSide ( veh ) ;
6759: LD_ADDR_VAR 0 3
6763: PUSH
6764: LD_VAR 0 1
6768: PPUSH
6769: CALL_OW 255
6773: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6774: LD_ADDR_EXP 35
6778: PUSH
6779: LD_EXP 35
6783: PPUSH
6784: LD_VAR 0 3
6788: PPUSH
6789: LD_EXP 35
6793: PUSH
6794: LD_VAR 0 3
6798: ARRAY
6799: PPUSH
6800: LD_INT 52
6802: PUSH
6803: EMPTY
6804: LIST
6805: PPUSH
6806: CALL_OW 72
6810: PUSH
6811: LD_INT 22
6813: PUSH
6814: LD_VAR 0 3
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PUSH
6823: LD_INT 2
6825: PUSH
6826: LD_INT 33
6828: PUSH
6829: LD_INT 5
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: PUSH
6836: LD_INT 25
6838: PUSH
6839: LD_INT 12
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: PUSH
6846: LD_INT 25
6848: PUSH
6849: LD_INT 15
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: PUSH
6856: LD_INT 25
6858: PUSH
6859: LD_INT 16
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: PUSH
6866: LD_INT 25
6868: PUSH
6869: LD_INT 17
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: PPUSH
6888: CALL_OW 69
6892: UNION
6893: PPUSH
6894: CALL_OW 1
6898: ST_TO_ADDR
// end ; end ;
6899: PPOPN 3
6901: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6902: LD_INT 0
6904: PPUSH
6905: PPUSH
6906: PPUSH
6907: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6908: LD_VAR 0 1
6912: PPUSH
6913: CALL_OW 257
6917: PUSH
6918: LD_INT 12
6920: PUSH
6921: LD_INT 15
6923: PUSH
6924: LD_INT 17
6926: PUSH
6927: LD_INT 16
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: IN
6936: PUSH
6937: LD_VAR 0 1
6941: PPUSH
6942: CALL_OW 263
6946: PUSH
6947: LD_INT 5
6949: EQUAL
6950: OR
6951: IFFALSE 6962
// ApeKilled ( j ) ;
6953: LD_VAR 0 1
6957: PPUSH
6958: CALL 5660 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6962: LD_VAR 0 1
6966: PPUSH
6967: CALL_OW 266
6971: PUSH
6972: LD_INT 0
6974: PUSH
6975: LD_INT 1
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: IN
6982: IFFALSE 7064
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6984: LD_ADDR_VAR 0 4
6988: PUSH
6989: LD_EXP 21
6993: PUSH
6994: LD_VAR 0 1
6998: PPUSH
6999: CALL_OW 255
7003: ARRAY
7004: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7005: LD_ADDR_VAR 0 2
7009: PUSH
7010: LD_EXP 26
7014: PUSH
7015: LD_VAR 0 4
7019: ARRAY
7020: PUSH
7021: LD_INT 1
7023: ARRAY
7024: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7025: LD_ADDR_VAR 0 3
7029: PUSH
7030: LD_EXP 26
7034: PUSH
7035: LD_VAR 0 4
7039: ARRAY
7040: PUSH
7041: LD_INT 2
7043: ARRAY
7044: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7045: LD_VAR 0 2
7049: PPUSH
7050: LD_VAR 0 3
7054: PPUSH
7055: CALL_OW 420
7059: PPUSH
7060: CALL_OW 419
// end ; if def_game_rules then
7064: LD_EXP 40
7068: IFFALSE 7167
// if ( GetType ( j ) = 3 ) then
7070: LD_VAR 0 1
7074: PPUSH
7075: CALL_OW 247
7079: PUSH
7080: LD_INT 3
7082: EQUAL
7083: IFFALSE 7123
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7085: LD_VAR 0 1
7089: PPUSH
7090: LD_VAR 0 1
7094: PPUSH
7095: CALL_OW 266
7099: PPUSH
7100: LD_VAR 0 1
7104: PPUSH
7105: CALL_OW 255
7109: PPUSH
7110: LD_INT 0
7112: PPUSH
7113: LD_INT 1
7115: NEG
7116: PPUSH
7117: CALL 10067 0 5
7121: GO 7167
// if ( GetChassis ( j ) = 25 ) then
7123: LD_VAR 0 1
7127: PPUSH
7128: CALL_OW 265
7132: PUSH
7133: LD_INT 25
7135: EQUAL
7136: IFFALSE 7167
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7138: LD_VAR 0 1
7142: PPUSH
7143: LD_INT 37
7145: PPUSH
7146: LD_VAR 0 1
7150: PPUSH
7151: CALL_OW 255
7155: PPUSH
7156: LD_INT 0
7158: PPUSH
7159: LD_INT 1
7161: NEG
7162: PPUSH
7163: CALL 10067 0 5
// end ;
7167: PPOPN 5
7169: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7170: LD_EXP 40
7174: PUSH
7175: LD_VAR 0 1
7179: PPUSH
7180: CALL_OW 265
7184: PUSH
7185: LD_INT 25
7187: EQUAL
7188: AND
7189: IFFALSE 7221
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
7191: LD_VAR 0 1
7195: PPUSH
7196: LD_INT 37
7198: PPUSH
7199: LD_VAR 0 1
7203: PPUSH
7204: CALL_OW 255
7208: PPUSH
7209: LD_VAR 0 3
7213: PPUSH
7214: LD_INT 1
7216: PPUSH
7217: CALL 10067 0 5
// end ;
7221: PPOPN 4
7223: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7224: LD_VAR 0 1
7228: PPUSH
7229: LD_VAR 0 2
7233: PPUSH
7234: LD_VAR 0 3
7238: PPUSH
7239: LD_OWVAR 2
7243: PPUSH
7244: CALL 10812 0 4
7248: PPOPN 3
7250: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7251: LD_INT 0
7253: PPUSH
7254: PPUSH
// for un in battle_flags_id do
7255: LD_ADDR_VAR 0 2
7259: PUSH
7260: LD_EXP 27
7264: PUSH
7265: FOR_IN
7266: IFFALSE 7341
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7268: LD_VAR 0 2
7272: PPUSH
7273: LD_INT 1
7275: PUSH
7276: LD_LOC 9
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: PUSH
7285: LD_INT 2
7287: PUSH
7288: LD_LOC 9
7292: PUSH
7293: LD_INT 2
7295: DIV
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: PUSH
7301: LD_INT 3
7303: PUSH
7304: LD_LOC 9
7308: PUSH
7309: LD_INT 5
7311: DIV
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: PUSH
7317: LD_INT 20
7319: PUSH
7320: LD_LOC 9
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: PPUSH
7335: CALL_OW 423
7339: GO 7265
7341: POP
7342: POP
// end ;
7343: LD_VAR 0 1
7347: RET
// every 0 0$0.1 do var un ;
7348: GO 7350
7350: DISABLE
7351: LD_INT 0
7353: PPUSH
// begin if not def_morale_flags then
7354: LD_EXP 49
7358: NOT
7359: IFFALSE 7363
// exit ;
7361: GO 7440
// if not morale_decreasing_time then
7363: LD_EXP 9
7367: NOT
7368: IFFALSE 7372
// exit ;
7370: GO 7440
// strength = 100 ;
7372: LD_ADDR_LOC 9
7376: PUSH
7377: LD_INT 100
7379: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7380: LD_EXP 9
7384: PPUSH
7385: CALL_OW 67
// strength := strength - 1 ;
7389: LD_ADDR_LOC 9
7393: PUSH
7394: LD_LOC 9
7398: PUSH
7399: LD_INT 1
7401: MINUS
7402: ST_TO_ADDR
// Update_Flags ;
7403: CALL 7251 0 0
// until not strength ;
7407: LD_LOC 9
7411: NOT
7412: IFFALSE 7380
// for un in battle_flags_id do
7414: LD_ADDR_VAR 0 1
7418: PUSH
7419: LD_EXP 27
7423: PUSH
7424: FOR_IN
7425: IFFALSE 7438
// KillBattleFlag ( un ) ;
7427: LD_VAR 0 1
7431: PPUSH
7432: CALL_OW 419
7436: GO 7424
7438: POP
7439: POP
// end ; end_of_file
7440: PPOPN 1
7442: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
7443: LD_INT 0
7445: PPUSH
7446: PPUSH
// if ( not IAmSpec ) then
7447: CALL_OW 531
7451: NOT
7452: IFFALSE 7468
// Result := Limits_Info ^  ;
7454: LD_ADDR_VAR 0 1
7458: PUSH
7459: LD_LOC 21
7463: PUSH
7464: LD_STRING 
7466: ADD
7467: ST_TO_ADDR
// for i := 1 to 8 do
7468: LD_ADDR_VAR 0 2
7472: PUSH
7473: DOUBLE
7474: LD_INT 1
7476: DEC
7477: ST_TO_ADDR
7478: LD_INT 8
7480: PUSH
7481: FOR_TO
7482: IFFALSE 7527
// if Cheaters [ i ] then
7484: LD_LOC 22
7488: PUSH
7489: LD_VAR 0 2
7493: ARRAY
7494: IFFALSE 7525
// Result := Result ^ [ #Cheater , i , i ] ;
7496: LD_ADDR_VAR 0 1
7500: PUSH
7501: LD_VAR 0 1
7505: PUSH
7506: LD_STRING #Cheater
7508: PUSH
7509: LD_VAR 0 2
7513: PUSH
7514: LD_VAR 0 2
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: LIST
7523: ADD
7524: ST_TO_ADDR
7525: GO 7481
7527: POP
7528: POP
// end ;
7529: LD_VAR 0 1
7533: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
7534: LD_INT 0
7536: PPUSH
7537: PPUSH
7538: PPUSH
7539: PPUSH
7540: PPUSH
// case Game_Type of 10 :
7541: LD_EXP 39
7545: PUSH
7546: LD_INT 10
7548: DOUBLE
7549: EQUAL
7550: IFTRUE 7554
7552: GO 7565
7554: POP
// def_game_rules := 1 ; 11 :
7555: LD_ADDR_EXP 40
7559: PUSH
7560: LD_INT 1
7562: ST_TO_ADDR
7563: GO 7585
7565: LD_INT 11
7567: DOUBLE
7568: EQUAL
7569: IFTRUE 7573
7571: GO 7584
7573: POP
// def_game_rules := 3 ; end ;
7574: LD_ADDR_EXP 40
7578: PUSH
7579: LD_INT 3
7581: ST_TO_ADDR
7582: GO 7585
7584: POP
// case def_game_rules of 0 :
7585: LD_EXP 40
7589: PUSH
7590: LD_INT 0
7592: DOUBLE
7593: EQUAL
7594: IFTRUE 7598
7596: GO 7603
7598: POP
// exit ; 1 :
7599: GO 9661
7601: GO 9561
7603: LD_INT 1
7605: DOUBLE
7606: EQUAL
7607: IFTRUE 7611
7609: GO 7827
7611: POP
// begin def_base_level := 2 ;
7612: LD_ADDR_EXP 41
7616: PUSH
7617: LD_INT 2
7619: ST_TO_ADDR
// def_amount_of_people := 2 ;
7620: LD_ADDR_EXP 42
7624: PUSH
7625: LD_INT 2
7627: ST_TO_ADDR
// def_skill_level := 1 ;
7628: LD_ADDR_EXP 43
7632: PUSH
7633: LD_INT 1
7635: ST_TO_ADDR
// def_starting_resources := 2 ;
7636: LD_ADDR_EXP 44
7640: PUSH
7641: LD_INT 2
7643: ST_TO_ADDR
// def_shipments_density := 1 ;
7644: LD_ADDR_EXP 45
7648: PUSH
7649: LD_INT 1
7651: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
7652: LD_ADDR_EXP 46
7656: PUSH
7657: LD_INT 0
7659: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
7660: LD_ADDR_EXP 47
7664: PUSH
7665: LD_INT 1
7667: ST_TO_ADDR
// def_shared_vision := 1 ;
7668: LD_ADDR_EXP 48
7672: PUSH
7673: LD_INT 1
7675: ST_TO_ADDR
// def_morale_flags := 3 ;
7676: LD_ADDR_EXP 49
7680: PUSH
7681: LD_INT 3
7683: ST_TO_ADDR
// def_siberite_detection := 1 ;
7684: LD_ADDR_EXP 50
7688: PUSH
7689: LD_INT 1
7691: ST_TO_ADDR
// def_people_respawning := 1 ;
7692: LD_ADDR_EXP 51
7696: PUSH
7697: LD_INT 1
7699: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
7700: LD_ADDR_EXP 52
7704: PUSH
7705: LD_INT 1
7707: ST_TO_ADDR
// def_siberite_bomb := 0 ;
7708: LD_ADDR_EXP 53
7712: PUSH
7713: LD_INT 0
7715: ST_TO_ADDR
// def_builduptime := 2 ;
7716: LD_ADDR_EXP 54
7720: PUSH
7721: LD_INT 2
7723: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
7724: LD_ADDR_VAR 0 2
7728: PUSH
7729: EMPTY
7730: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
7731: LD_ADDR_VAR 0 3
7735: PUSH
7736: EMPTY
7737: ST_TO_ADDR
// Banned_Weapons := [ ] ;
7738: LD_ADDR_LOC 16
7742: PUSH
7743: EMPTY
7744: ST_TO_ADDR
// Banned_Chassis := [ ] ;
7745: LD_ADDR_LOC 17
7749: PUSH
7750: EMPTY
7751: ST_TO_ADDR
// Banned_Controls := [ ] ;
7752: LD_ADDR_LOC 18
7756: PUSH
7757: EMPTY
7758: ST_TO_ADDR
// Banned_Engines := [ ] ;
7759: LD_ADDR_LOC 19
7763: PUSH
7764: EMPTY
7765: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
7766: LD_ADDR_LOC 14
7770: PUSH
7771: LD_INT 37
7773: PUSH
7774: EMPTY
7775: LIST
7776: PUSH
7777: LD_INT 4
7779: PUSH
7780: LD_INT 5
7782: PUSH
7783: EMPTY
7784: LIST
7785: LIST
7786: PUSH
7787: LD_INT 31
7789: PUSH
7790: LD_INT 32
7792: PUSH
7793: LD_INT 33
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: LIST
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: LIST
7805: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
7806: LD_ADDR_LOC 15
7810: PUSH
7811: LD_INT 2
7813: PUSH
7814: LD_INT 2
7816: PUSH
7817: LD_INT 4
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: LIST
7824: ST_TO_ADDR
// end ; 2 :
7825: GO 9561
7827: LD_INT 2
7829: DOUBLE
7830: EQUAL
7831: IFTRUE 7835
7833: GO 8044
7835: POP
// begin def_base_level := 1 ;
7836: LD_ADDR_EXP 41
7840: PUSH
7841: LD_INT 1
7843: ST_TO_ADDR
// def_amount_of_people := 2 ;
7844: LD_ADDR_EXP 42
7848: PUSH
7849: LD_INT 2
7851: ST_TO_ADDR
// def_skill_level := 3 ;
7852: LD_ADDR_EXP 43
7856: PUSH
7857: LD_INT 3
7859: ST_TO_ADDR
// def_starting_resources := 3 ;
7860: LD_ADDR_EXP 44
7864: PUSH
7865: LD_INT 3
7867: ST_TO_ADDR
// def_shipments_density := 2 ;
7868: LD_ADDR_EXP 45
7872: PUSH
7873: LD_INT 2
7875: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
7876: LD_ADDR_EXP 46
7880: PUSH
7881: LD_INT 1
7883: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
7884: LD_ADDR_EXP 47
7888: PUSH
7889: LD_INT 2
7891: ST_TO_ADDR
// def_shared_vision := 1 ;
7892: LD_ADDR_EXP 48
7896: PUSH
7897: LD_INT 1
7899: ST_TO_ADDR
// def_morale_flags := 0 ;
7900: LD_ADDR_EXP 49
7904: PUSH
7905: LD_INT 0
7907: ST_TO_ADDR
// def_siberite_detection := 1 ;
7908: LD_ADDR_EXP 50
7912: PUSH
7913: LD_INT 1
7915: ST_TO_ADDR
// def_people_respawning := 0 ;
7916: LD_ADDR_EXP 51
7920: PUSH
7921: LD_INT 0
7923: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
7924: LD_ADDR_EXP 52
7928: PUSH
7929: LD_INT 0
7931: ST_TO_ADDR
// def_siberite_bomb := 0 ;
7932: LD_ADDR_EXP 53
7936: PUSH
7937: LD_INT 0
7939: ST_TO_ADDR
// def_builduptime := 2 ;
7940: LD_ADDR_EXP 54
7944: PUSH
7945: LD_INT 2
7947: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
7948: LD_ADDR_VAR 0 2
7952: PUSH
7953: LD_INT 1
7955: PUSH
7956: EMPTY
7957: LIST
7958: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
7959: LD_ADDR_VAR 0 3
7963: PUSH
7964: EMPTY
7965: ST_TO_ADDR
// Banned_Weapons := [ ] ;
7966: LD_ADDR_LOC 16
7970: PUSH
7971: EMPTY
7972: ST_TO_ADDR
// Banned_Chassis := [ ] ;
7973: LD_ADDR_LOC 17
7977: PUSH
7978: EMPTY
7979: ST_TO_ADDR
// Banned_Controls := [ ] ;
7980: LD_ADDR_LOC 18
7984: PUSH
7985: EMPTY
7986: ST_TO_ADDR
// Banned_Engines := [ ] ;
7987: LD_ADDR_LOC 19
7991: PUSH
7992: EMPTY
7993: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
7994: LD_ADDR_LOC 14
7998: PUSH
7999: LD_INT 4
8001: PUSH
8002: LD_INT 5
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: PUSH
8009: LD_INT 31
8011: PUSH
8012: LD_INT 32
8014: PUSH
8015: LD_INT 33
8017: PUSH
8018: EMPTY
8019: LIST
8020: LIST
8021: LIST
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
8027: LD_ADDR_LOC 15
8031: PUSH
8032: LD_INT 1
8034: PUSH
8035: LD_INT 2
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: ST_TO_ADDR
// end ; 3 :
8042: GO 9561
8044: LD_INT 3
8046: DOUBLE
8047: EQUAL
8048: IFTRUE 8052
8050: GO 8295
8052: POP
// begin def_base_level := 1 ;
8053: LD_ADDR_EXP 41
8057: PUSH
8058: LD_INT 1
8060: ST_TO_ADDR
// def_amount_of_people := 2 ;
8061: LD_ADDR_EXP 42
8065: PUSH
8066: LD_INT 2
8068: ST_TO_ADDR
// def_skill_level := 3 ;
8069: LD_ADDR_EXP 43
8073: PUSH
8074: LD_INT 3
8076: ST_TO_ADDR
// def_starting_resources := 3 ;
8077: LD_ADDR_EXP 44
8081: PUSH
8082: LD_INT 3
8084: ST_TO_ADDR
// def_shipments_density := 1 ;
8085: LD_ADDR_EXP 45
8089: PUSH
8090: LD_INT 1
8092: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8093: LD_ADDR_EXP 46
8097: PUSH
8098: LD_INT 0
8100: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
8101: LD_ADDR_EXP 47
8105: PUSH
8106: LD_INT 1
8108: ST_TO_ADDR
// def_shared_vision := 1 ;
8109: LD_ADDR_EXP 48
8113: PUSH
8114: LD_INT 1
8116: ST_TO_ADDR
// def_morale_flags := 0 ;
8117: LD_ADDR_EXP 49
8121: PUSH
8122: LD_INT 0
8124: ST_TO_ADDR
// def_siberite_detection := 1 ;
8125: LD_ADDR_EXP 50
8129: PUSH
8130: LD_INT 1
8132: ST_TO_ADDR
// def_people_respawning := 0 ;
8133: LD_ADDR_EXP 51
8137: PUSH
8138: LD_INT 0
8140: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
8141: LD_ADDR_EXP 52
8145: PUSH
8146: LD_INT 2
8148: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8149: LD_ADDR_EXP 53
8153: PUSH
8154: LD_INT 0
8156: ST_TO_ADDR
// def_builduptime := 1 ;
8157: LD_ADDR_EXP 54
8161: PUSH
8162: LD_INT 1
8164: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
8165: LD_ADDR_VAR 0 2
8169: PUSH
8170: LD_INT 23
8172: PUSH
8173: EMPTY
8174: LIST
8175: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
8176: LD_ADDR_VAR 0 3
8180: PUSH
8181: LD_INT 2
8183: PUSH
8184: LD_INT 37
8186: PUSH
8187: LD_INT 32
8189: PUSH
8190: LD_INT 33
8192: PUSH
8193: LD_INT 36
8195: PUSH
8196: LD_INT 16
8198: PUSH
8199: LD_INT 23
8201: PUSH
8202: LD_INT 21
8204: PUSH
8205: LD_INT 18
8207: PUSH
8208: LD_INT 22
8210: PUSH
8211: LD_INT 20
8213: PUSH
8214: LD_INT 19
8216: PUSH
8217: LD_INT 25
8219: PUSH
8220: LD_INT 17
8222: PUSH
8223: LD_INT 24
8225: PUSH
8226: EMPTY
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8243: LD_ADDR_LOC 16
8247: PUSH
8248: EMPTY
8249: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8250: LD_ADDR_LOC 17
8254: PUSH
8255: EMPTY
8256: ST_TO_ADDR
// Banned_Controls := [ ] ;
8257: LD_ADDR_LOC 18
8261: PUSH
8262: EMPTY
8263: ST_TO_ADDR
// Banned_Engines := [ ] ;
8264: LD_ADDR_LOC 19
8268: PUSH
8269: EMPTY
8270: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8271: LD_ADDR_LOC 14
8275: PUSH
8276: EMPTY
8277: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8278: LD_ADDR_LOC 15
8282: PUSH
8283: EMPTY
8284: ST_TO_ADDR
// No_Mechs := true ;
8285: LD_ADDR_EXP 55
8289: PUSH
8290: LD_INT 1
8292: ST_TO_ADDR
// end ; 4 :
8293: GO 9561
8295: LD_INT 4
8297: DOUBLE
8298: EQUAL
8299: IFTRUE 8303
8301: GO 8478
8303: POP
// begin def_base_level := 1 ;
8304: LD_ADDR_EXP 41
8308: PUSH
8309: LD_INT 1
8311: ST_TO_ADDR
// def_amount_of_people := 2 ;
8312: LD_ADDR_EXP 42
8316: PUSH
8317: LD_INT 2
8319: ST_TO_ADDR
// def_skill_level := 3 ;
8320: LD_ADDR_EXP 43
8324: PUSH
8325: LD_INT 3
8327: ST_TO_ADDR
// def_starting_resources := 3 ;
8328: LD_ADDR_EXP 44
8332: PUSH
8333: LD_INT 3
8335: ST_TO_ADDR
// def_shipments_density := 2 ;
8336: LD_ADDR_EXP 45
8340: PUSH
8341: LD_INT 2
8343: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8344: LD_ADDR_EXP 46
8348: PUSH
8349: LD_INT 1
8351: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8352: LD_ADDR_EXP 47
8356: PUSH
8357: LD_INT 2
8359: ST_TO_ADDR
// def_shared_vision := 1 ;
8360: LD_ADDR_EXP 48
8364: PUSH
8365: LD_INT 1
8367: ST_TO_ADDR
// def_morale_flags := 0 ;
8368: LD_ADDR_EXP 49
8372: PUSH
8373: LD_INT 0
8375: ST_TO_ADDR
// def_siberite_detection := 1 ;
8376: LD_ADDR_EXP 50
8380: PUSH
8381: LD_INT 1
8383: ST_TO_ADDR
// def_people_respawning := 0 ;
8384: LD_ADDR_EXP 51
8388: PUSH
8389: LD_INT 0
8391: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
8392: LD_ADDR_EXP 52
8396: PUSH
8397: LD_INT 0
8399: ST_TO_ADDR
// def_siberite_bomb := 1 ;
8400: LD_ADDR_EXP 53
8404: PUSH
8405: LD_INT 1
8407: ST_TO_ADDR
// def_builduptime := 3 ;
8408: LD_ADDR_EXP 54
8412: PUSH
8413: LD_INT 3
8415: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
8416: LD_ADDR_VAR 0 2
8420: PUSH
8421: LD_INT 1
8423: PUSH
8424: EMPTY
8425: LIST
8426: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8427: LD_ADDR_VAR 0 3
8431: PUSH
8432: EMPTY
8433: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8434: LD_ADDR_LOC 16
8438: PUSH
8439: EMPTY
8440: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8441: LD_ADDR_LOC 17
8445: PUSH
8446: EMPTY
8447: ST_TO_ADDR
// Banned_Controls := [ ] ;
8448: LD_ADDR_LOC 18
8452: PUSH
8453: EMPTY
8454: ST_TO_ADDR
// Banned_Engines := [ ] ;
8455: LD_ADDR_LOC 19
8459: PUSH
8460: EMPTY
8461: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8462: LD_ADDR_LOC 14
8466: PUSH
8467: EMPTY
8468: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8469: LD_ADDR_LOC 15
8473: PUSH
8474: EMPTY
8475: ST_TO_ADDR
// end ; 5 :
8476: GO 9561
8478: LD_INT 5
8480: DOUBLE
8481: EQUAL
8482: IFTRUE 8486
8484: GO 8735
8486: POP
// begin def_base_level := 0 ;
8487: LD_ADDR_EXP 41
8491: PUSH
8492: LD_INT 0
8494: ST_TO_ADDR
// def_amount_of_people := 0 ;
8495: LD_ADDR_EXP 42
8499: PUSH
8500: LD_INT 0
8502: ST_TO_ADDR
// def_skill_level := 0 ;
8503: LD_ADDR_EXP 43
8507: PUSH
8508: LD_INT 0
8510: ST_TO_ADDR
// def_starting_resources := 0 ;
8511: LD_ADDR_EXP 44
8515: PUSH
8516: LD_INT 0
8518: ST_TO_ADDR
// def_shipments_density := 0 ;
8519: LD_ADDR_EXP 45
8523: PUSH
8524: LD_INT 0
8526: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8527: LD_ADDR_EXP 46
8531: PUSH
8532: LD_INT 0
8534: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
8535: LD_ADDR_EXP 47
8539: PUSH
8540: LD_INT 0
8542: ST_TO_ADDR
// def_shared_vision := 1 ;
8543: LD_ADDR_EXP 48
8547: PUSH
8548: LD_INT 1
8550: ST_TO_ADDR
// def_morale_flags := 0 ;
8551: LD_ADDR_EXP 49
8555: PUSH
8556: LD_INT 0
8558: ST_TO_ADDR
// def_siberite_detection := 0 ;
8559: LD_ADDR_EXP 50
8563: PUSH
8564: LD_INT 0
8566: ST_TO_ADDR
// def_people_respawning := 1 ;
8567: LD_ADDR_EXP 51
8571: PUSH
8572: LD_INT 1
8574: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
8575: LD_ADDR_EXP 52
8579: PUSH
8580: LD_INT 1
8582: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8583: LD_ADDR_EXP 53
8587: PUSH
8588: LD_INT 0
8590: ST_TO_ADDR
// def_builduptime := 0 ;
8591: LD_ADDR_EXP 54
8595: PUSH
8596: LD_INT 0
8598: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
8599: LD_ADDR_VAR 0 2
8603: PUSH
8604: LD_INT 10
8606: PUSH
8607: LD_INT 3
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
8614: LD_ADDR_VAR 0 3
8618: PUSH
8619: LD_INT 12
8621: PUSH
8622: LD_INT 11
8624: PUSH
8625: LD_INT 14
8627: PUSH
8628: LD_INT 13
8630: PUSH
8631: LD_INT 5
8633: PUSH
8634: LD_INT 24
8636: PUSH
8637: LD_INT 21
8639: PUSH
8640: LD_INT 33
8642: PUSH
8643: LD_INT 36
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
8657: LD_ADDR_LOC 16
8661: PUSH
8662: LD_INT 31
8664: PUSH
8665: EMPTY
8666: LIST
8667: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8668: LD_ADDR_LOC 17
8672: PUSH
8673: EMPTY
8674: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
8675: LD_ADDR_LOC 18
8679: PUSH
8680: LD_INT 2
8682: PUSH
8683: EMPTY
8684: LIST
8685: ST_TO_ADDR
// Banned_Engines := [ ] ;
8686: LD_ADDR_LOC 19
8690: PUSH
8691: EMPTY
8692: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
8693: LD_ADDR_LOC 14
8697: PUSH
8698: LD_INT 4
8700: PUSH
8701: EMPTY
8702: LIST
8703: PUSH
8704: LD_INT 31
8706: PUSH
8707: LD_INT 32
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
8718: LD_ADDR_LOC 15
8722: PUSH
8723: LD_INT 1
8725: PUSH
8726: LD_INT 1
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: ST_TO_ADDR
// end ; 6 :
8733: GO 9561
8735: LD_INT 6
8737: DOUBLE
8738: EQUAL
8739: IFTRUE 8743
8741: GO 8946
8743: POP
// begin def_base_level := 1 ;
8744: LD_ADDR_EXP 41
8748: PUSH
8749: LD_INT 1
8751: ST_TO_ADDR
// def_amount_of_people := 2 ;
8752: LD_ADDR_EXP 42
8756: PUSH
8757: LD_INT 2
8759: ST_TO_ADDR
// def_skill_level := 3 ;
8760: LD_ADDR_EXP 43
8764: PUSH
8765: LD_INT 3
8767: ST_TO_ADDR
// def_starting_resources := 3 ;
8768: LD_ADDR_EXP 44
8772: PUSH
8773: LD_INT 3
8775: ST_TO_ADDR
// def_shipments_density := 1 ;
8776: LD_ADDR_EXP 45
8780: PUSH
8781: LD_INT 1
8783: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8784: LD_ADDR_EXP 46
8788: PUSH
8789: LD_INT 0
8791: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
8792: LD_ADDR_EXP 47
8796: PUSH
8797: LD_INT 1
8799: ST_TO_ADDR
// def_shared_vision := 1 ;
8800: LD_ADDR_EXP 48
8804: PUSH
8805: LD_INT 1
8807: ST_TO_ADDR
// def_morale_flags := 0 ;
8808: LD_ADDR_EXP 49
8812: PUSH
8813: LD_INT 0
8815: ST_TO_ADDR
// def_siberite_detection := 1 ;
8816: LD_ADDR_EXP 50
8820: PUSH
8821: LD_INT 1
8823: ST_TO_ADDR
// def_people_respawning := 2 ;
8824: LD_ADDR_EXP 51
8828: PUSH
8829: LD_INT 2
8831: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
8832: LD_ADDR_EXP 52
8836: PUSH
8837: LD_INT 1
8839: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8840: LD_ADDR_EXP 53
8844: PUSH
8845: LD_INT 0
8847: ST_TO_ADDR
// def_builduptime := 1 ;
8848: LD_ADDR_EXP 54
8852: PUSH
8853: LD_INT 1
8855: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
8856: LD_ADDR_VAR 0 2
8860: PUSH
8861: LD_INT 23
8863: PUSH
8864: EMPTY
8865: LIST
8866: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
8867: LD_ADDR_VAR 0 3
8871: PUSH
8872: LD_INT 2
8874: PUSH
8875: LD_INT 37
8877: PUSH
8878: LD_INT 31
8880: PUSH
8881: LD_INT 32
8883: PUSH
8884: LD_INT 33
8886: PUSH
8887: EMPTY
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8894: LD_ADDR_LOC 16
8898: PUSH
8899: EMPTY
8900: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8901: LD_ADDR_LOC 17
8905: PUSH
8906: EMPTY
8907: ST_TO_ADDR
// Banned_Controls := [ ] ;
8908: LD_ADDR_LOC 18
8912: PUSH
8913: EMPTY
8914: ST_TO_ADDR
// Banned_Engines := [ ] ;
8915: LD_ADDR_LOC 19
8919: PUSH
8920: EMPTY
8921: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8922: LD_ADDR_LOC 14
8926: PUSH
8927: EMPTY
8928: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8929: LD_ADDR_LOC 15
8933: PUSH
8934: EMPTY
8935: ST_TO_ADDR
// No_Mechs := true ;
8936: LD_ADDR_EXP 55
8940: PUSH
8941: LD_INT 1
8943: ST_TO_ADDR
// end ; 7 :
8944: GO 9561
8946: LD_INT 7
8948: DOUBLE
8949: EQUAL
8950: IFTRUE 8954
8952: GO 9152
8954: POP
// begin def_base_level := 1 ;
8955: LD_ADDR_EXP 41
8959: PUSH
8960: LD_INT 1
8962: ST_TO_ADDR
// def_amount_of_people := 2 ;
8963: LD_ADDR_EXP 42
8967: PUSH
8968: LD_INT 2
8970: ST_TO_ADDR
// def_skill_level := 3 ;
8971: LD_ADDR_EXP 43
8975: PUSH
8976: LD_INT 3
8978: ST_TO_ADDR
// def_starting_resources := 3 ;
8979: LD_ADDR_EXP 44
8983: PUSH
8984: LD_INT 3
8986: ST_TO_ADDR
// def_shipments_density := 1 ;
8987: LD_ADDR_EXP 45
8991: PUSH
8992: LD_INT 1
8994: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8995: LD_ADDR_EXP 46
8999: PUSH
9000: LD_INT 1
9002: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9003: LD_ADDR_EXP 47
9007: PUSH
9008: LD_INT 2
9010: ST_TO_ADDR
// def_shared_vision := 1 ;
9011: LD_ADDR_EXP 48
9015: PUSH
9016: LD_INT 1
9018: ST_TO_ADDR
// def_morale_flags := 0 ;
9019: LD_ADDR_EXP 49
9023: PUSH
9024: LD_INT 0
9026: ST_TO_ADDR
// def_siberite_detection := 1 ;
9027: LD_ADDR_EXP 50
9031: PUSH
9032: LD_INT 1
9034: ST_TO_ADDR
// def_people_respawning := 0 ;
9035: LD_ADDR_EXP 51
9039: PUSH
9040: LD_INT 0
9042: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9043: LD_ADDR_EXP 52
9047: PUSH
9048: LD_INT 1
9050: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9051: LD_ADDR_EXP 53
9055: PUSH
9056: LD_INT 0
9058: ST_TO_ADDR
// def_builduptime := 3 ;
9059: LD_ADDR_EXP 54
9063: PUSH
9064: LD_INT 3
9066: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9067: LD_ADDR_VAR 0 2
9071: PUSH
9072: LD_INT 23
9074: PUSH
9075: EMPTY
9076: LIST
9077: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
9078: LD_ADDR_VAR 0 3
9082: PUSH
9083: LD_INT 37
9085: PUSH
9086: EMPTY
9087: LIST
9088: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9089: LD_ADDR_LOC 16
9093: PUSH
9094: EMPTY
9095: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9096: LD_ADDR_LOC 17
9100: PUSH
9101: EMPTY
9102: ST_TO_ADDR
// Banned_Controls := [ ] ;
9103: LD_ADDR_LOC 18
9107: PUSH
9108: EMPTY
9109: ST_TO_ADDR
// Banned_Engines := [ ] ;
9110: LD_ADDR_LOC 19
9114: PUSH
9115: EMPTY
9116: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9117: LD_ADDR_LOC 14
9121: PUSH
9122: LD_INT 31
9124: PUSH
9125: LD_INT 32
9127: PUSH
9128: LD_INT 33
9130: PUSH
9131: EMPTY
9132: LIST
9133: LIST
9134: LIST
9135: PUSH
9136: EMPTY
9137: LIST
9138: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
9139: LD_ADDR_LOC 15
9143: PUSH
9144: LD_INT 10
9146: PUSH
9147: EMPTY
9148: LIST
9149: ST_TO_ADDR
// end ; 8 :
9150: GO 9561
9152: LD_INT 8
9154: DOUBLE
9155: EQUAL
9156: IFTRUE 9160
9158: GO 9560
9160: POP
// begin def_base_level := 0 ;
9161: LD_ADDR_EXP 41
9165: PUSH
9166: LD_INT 0
9168: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
9169: LD_ADDR_EXP 42
9173: PUSH
9174: LD_INT 0
9176: PPUSH
9177: LD_INT 1
9179: PPUSH
9180: CALL_OW 12
9184: ST_TO_ADDR
// def_skill_level := 0 ;
9185: LD_ADDR_EXP 43
9189: PUSH
9190: LD_INT 0
9192: ST_TO_ADDR
// def_starting_resources := 2 ;
9193: LD_ADDR_EXP 44
9197: PUSH
9198: LD_INT 2
9200: ST_TO_ADDR
// def_shipments_density := 1 ;
9201: LD_ADDR_EXP 45
9205: PUSH
9206: LD_INT 1
9208: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9209: LD_ADDR_EXP 46
9213: PUSH
9214: LD_INT 0
9216: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
9217: LD_ADDR_EXP 47
9221: PUSH
9222: LD_INT 0
9224: ST_TO_ADDR
// def_shared_vision := 1 ;
9225: LD_ADDR_EXP 48
9229: PUSH
9230: LD_INT 1
9232: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
9233: LD_ADDR_EXP 49
9237: PUSH
9238: LD_INT 0
9240: PPUSH
9241: LD_INT 2
9243: PPUSH
9244: CALL_OW 12
9248: ST_TO_ADDR
// def_siberite_detection := 0 ;
9249: LD_ADDR_EXP 50
9253: PUSH
9254: LD_INT 0
9256: ST_TO_ADDR
// def_people_respawning := 0 ;
9257: LD_ADDR_EXP 51
9261: PUSH
9262: LD_INT 0
9264: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
9265: LD_ADDR_EXP 52
9269: PUSH
9270: LD_INT 2
9272: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9273: LD_ADDR_EXP 53
9277: PUSH
9278: LD_INT 0
9280: ST_TO_ADDR
// def_builduptime := 0 ;
9281: LD_ADDR_EXP 54
9285: PUSH
9286: LD_INT 0
9288: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
9289: LD_ADDR_VAR 0 2
9293: PUSH
9294: LD_INT 23
9296: PUSH
9297: LD_INT 20
9299: PUSH
9300: LD_INT 40
9302: PUSH
9303: LD_INT 47
9305: PUSH
9306: LD_INT 46
9308: PUSH
9309: LD_INT 39
9311: PUSH
9312: LD_INT 71
9314: PUSH
9315: LD_INT 34
9317: PUSH
9318: LD_INT 41
9320: PUSH
9321: LD_INT 44
9323: PUSH
9324: LD_INT 17
9326: PUSH
9327: LD_INT 16
9329: PUSH
9330: EMPTY
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
9344: LD_ADDR_VAR 0 3
9348: PUSH
9349: LD_INT 37
9351: PUSH
9352: LD_INT 5
9354: PUSH
9355: LD_INT 13
9357: PUSH
9358: LD_INT 34
9360: PUSH
9361: LD_INT 12
9363: PUSH
9364: LD_INT 15
9366: PUSH
9367: LD_INT 11
9369: PUSH
9370: LD_INT 14
9372: PUSH
9373: LD_INT 29
9375: PUSH
9376: LD_INT 30
9378: PUSH
9379: LD_INT 28
9381: PUSH
9382: LD_INT 24
9384: PUSH
9385: LD_INT 25
9387: PUSH
9388: LD_INT 20
9390: PUSH
9391: LD_INT 21
9393: PUSH
9394: LD_INT 22
9396: PUSH
9397: LD_INT 36
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9419: LD_ADDR_LOC 16
9423: PUSH
9424: EMPTY
9425: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
9426: LD_ADDR_LOC 17
9430: PUSH
9431: LD_INT 14
9433: PUSH
9434: EMPTY
9435: LIST
9436: ST_TO_ADDR
// Banned_Controls := [ ] ;
9437: LD_ADDR_LOC 18
9441: PUSH
9442: EMPTY
9443: ST_TO_ADDR
// Banned_Engines := [ ] ;
9444: LD_ADDR_LOC 19
9448: PUSH
9449: EMPTY
9450: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
9451: LD_ADDR_LOC 14
9455: PUSH
9456: LD_INT 31
9458: PUSH
9459: LD_INT 32
9461: PUSH
9462: EMPTY
9463: LIST
9464: LIST
9465: PUSH
9466: LD_INT 4
9468: PUSH
9469: EMPTY
9470: LIST
9471: PUSH
9472: EMPTY
9473: LIST
9474: LIST
9475: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
9476: LD_ADDR_LOC 15
9480: PUSH
9481: LD_INT 2
9483: PUSH
9484: LD_INT 1
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: ST_TO_ADDR
// for i := 1 to 8 do
9491: LD_ADDR_VAR 0 4
9495: PUSH
9496: DOUBLE
9497: LD_INT 1
9499: DEC
9500: ST_TO_ADDR
9501: LD_INT 8
9503: PUSH
9504: FOR_TO
9505: IFFALSE 9556
// if ( Side_Nations [ i ] = 3 ) then
9507: LD_EXP 22
9511: PUSH
9512: LD_VAR 0 4
9516: ARRAY
9517: PUSH
9518: LD_INT 3
9520: EQUAL
9521: IFFALSE 9554
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
9523: LD_ADDR_EXP 22
9527: PUSH
9528: LD_EXP 22
9532: PPUSH
9533: LD_VAR 0 4
9537: PPUSH
9538: LD_INT 1
9540: PPUSH
9541: LD_INT 2
9543: PPUSH
9544: CALL_OW 12
9548: PPUSH
9549: CALL_OW 1
9553: ST_TO_ADDR
9554: GO 9504
9556: POP
9557: POP
// end ; end ;
9558: GO 9561
9560: POP
// for i := 1 to 8 do
9561: LD_ADDR_VAR 0 4
9565: PUSH
9566: DOUBLE
9567: LD_INT 1
9569: DEC
9570: ST_TO_ADDR
9571: LD_INT 8
9573: PUSH
9574: FOR_TO
9575: IFFALSE 9659
// if Side_Positions [ i ] then
9577: LD_EXP 21
9581: PUSH
9582: LD_VAR 0 4
9586: ARRAY
9587: IFFALSE 9657
// begin for j in Unavailable_Techs do
9589: LD_ADDR_VAR 0 5
9593: PUSH
9594: LD_VAR 0 2
9598: PUSH
9599: FOR_IN
9600: IFFALSE 9621
// SetTech ( j , i , 0 ) ;
9602: LD_VAR 0 5
9606: PPUSH
9607: LD_VAR 0 4
9611: PPUSH
9612: LD_INT 0
9614: PPUSH
9615: CALL_OW 322
9619: GO 9599
9621: POP
9622: POP
// for j in Unavailable_Builds do
9623: LD_ADDR_VAR 0 5
9627: PUSH
9628: LD_VAR 0 3
9632: PUSH
9633: FOR_IN
9634: IFFALSE 9655
// SetRestrict ( j , i , 0 ) ;
9636: LD_VAR 0 5
9640: PPUSH
9641: LD_VAR 0 4
9645: PPUSH
9646: LD_INT 0
9648: PPUSH
9649: CALL_OW 324
9653: GO 9633
9655: POP
9656: POP
// end ;
9657: GO 9574
9659: POP
9660: POP
// end ;
9661: LD_VAR 0 1
9665: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
9666: LD_INT 0
9668: PPUSH
9669: PPUSH
9670: PPUSH
9671: PPUSH
9672: PPUSH
9673: PPUSH
9674: PPUSH
// for i := 1 to Restricted_Builds do
9675: LD_ADDR_VAR 0 2
9679: PUSH
9680: DOUBLE
9681: LD_INT 1
9683: DEC
9684: ST_TO_ADDR
9685: LD_LOC 14
9689: PUSH
9690: FOR_TO
9691: IFFALSE 10001
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
9693: LD_LOC 14
9697: PUSH
9698: LD_VAR 0 2
9702: ARRAY
9703: PUSH
9704: LD_INT 1
9706: ARRAY
9707: PUSH
9708: LD_INT 31
9710: DOUBLE
9711: EQUAL
9712: IFTRUE 9728
9714: LD_INT 32
9716: DOUBLE
9717: EQUAL
9718: IFTRUE 9728
9720: LD_INT 33
9722: DOUBLE
9723: EQUAL
9724: IFTRUE 9728
9726: GO 9739
9728: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
9729: LD_ADDR_VAR 0 6
9733: PUSH
9734: LD_STRING #Turrets
9736: ST_TO_ADDR
9737: GO 9784
9739: LD_INT 4
9741: DOUBLE
9742: EQUAL
9743: IFTRUE 9753
9745: LD_INT 5
9747: DOUBLE
9748: EQUAL
9749: IFTRUE 9753
9751: GO 9764
9753: POP
// btype := #Armouries ; b_Behemoth :
9754: LD_ADDR_VAR 0 6
9758: PUSH
9759: LD_STRING #Armouries
9761: ST_TO_ADDR
9762: GO 9784
9764: LD_INT 37
9766: DOUBLE
9767: EQUAL
9768: IFTRUE 9772
9770: GO 9783
9772: POP
// btype := #Behemoths ; end ;
9773: LD_ADDR_VAR 0 6
9777: PUSH
9778: LD_STRING #Behemoths
9780: ST_TO_ADDR
9781: GO 9784
9783: POP
// list := [ ] ;
9784: LD_ADDR_VAR 0 7
9788: PUSH
9789: EMPTY
9790: ST_TO_ADDR
// for j := 1 to 8 do
9791: LD_ADDR_VAR 0 3
9795: PUSH
9796: DOUBLE
9797: LD_INT 1
9799: DEC
9800: ST_TO_ADDR
9801: LD_INT 8
9803: PUSH
9804: FOR_TO
9805: IFFALSE 9898
// if Side_Positions [ j ] then
9807: LD_EXP 21
9811: PUSH
9812: LD_VAR 0 3
9816: ARRAY
9817: IFFALSE 9896
// begin amount := 0 ;
9819: LD_ADDR_VAR 0 5
9823: PUSH
9824: LD_INT 0
9826: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
9827: LD_ADDR_VAR 0 4
9831: PUSH
9832: LD_LOC 14
9836: PUSH
9837: LD_VAR 0 2
9841: ARRAY
9842: PUSH
9843: FOR_IN
9844: IFFALSE 9892
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
9846: LD_ADDR_VAR 0 5
9850: PUSH
9851: LD_VAR 0 5
9855: PUSH
9856: LD_INT 22
9858: PUSH
9859: LD_VAR 0 3
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: PUSH
9868: LD_INT 30
9870: PUSH
9871: LD_VAR 0 4
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PPUSH
9884: CALL_OW 69
9888: PLUS
9889: ST_TO_ADDR
9890: GO 9843
9892: POP
9893: POP
// break ;
9894: GO 9898
// end ;
9896: GO 9804
9898: POP
9899: POP
// list := [ ] ;
9900: LD_ADDR_VAR 0 7
9904: PUSH
9905: EMPTY
9906: ST_TO_ADDR
// for j := 1 to 8 do
9907: LD_ADDR_VAR 0 3
9911: PUSH
9912: DOUBLE
9913: LD_INT 1
9915: DEC
9916: ST_TO_ADDR
9917: LD_INT 8
9919: PUSH
9920: FOR_TO
9921: IFFALSE 9941
// list := list ^ amount ;
9923: LD_ADDR_VAR 0 7
9927: PUSH
9928: LD_VAR 0 7
9932: PUSH
9933: LD_VAR 0 5
9937: ADD
9938: ST_TO_ADDR
9939: GO 9920
9941: POP
9942: POP
// Already_Built := Already_Built ^ [ list ] ;
9943: LD_ADDR_LOC 20
9947: PUSH
9948: LD_LOC 20
9952: PUSH
9953: LD_VAR 0 7
9957: PUSH
9958: EMPTY
9959: LIST
9960: ADD
9961: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
9962: LD_ADDR_LOC 21
9966: PUSH
9967: LD_LOC 21
9971: PUSH
9972: LD_VAR 0 6
9976: PUSH
9977: LD_VAR 0 5
9981: PUSH
9982: LD_LOC 15
9986: PUSH
9987: LD_VAR 0 2
9991: ARRAY
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: LIST
9997: ADD
9998: ST_TO_ADDR
// end ;
9999: GO 9690
10001: POP
10002: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10003: LD_ADDR_LOC 22
10007: PUSH
10008: LD_INT 0
10010: PUSH
10011: LD_INT 0
10013: PUSH
10014: LD_INT 0
10016: PUSH
10017: LD_INT 0
10019: PUSH
10020: LD_INT 0
10022: PUSH
10023: LD_INT 0
10025: PUSH
10026: LD_INT 0
10028: PUSH
10029: LD_INT 0
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: ST_TO_ADDR
// if Limits_Info then
10042: LD_LOC 21
10046: IFFALSE 10062
// Limits_Info := #Limits ^ Limits_Info ;
10048: LD_ADDR_LOC 21
10052: PUSH
10053: LD_STRING #Limits
10055: PUSH
10056: LD_LOC 21
10060: ADD
10061: ST_TO_ADDR
// end ;
10062: LD_VAR 0 1
10066: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
10067: LD_INT 0
10069: PPUSH
10070: PPUSH
10071: PPUSH
10072: PPUSH
// for i := 1 to Restricted_Builds do
10073: LD_ADDR_VAR 0 7
10077: PUSH
10078: DOUBLE
10079: LD_INT 1
10081: DEC
10082: ST_TO_ADDR
10083: LD_LOC 14
10087: PUSH
10088: FOR_TO
10089: IFFALSE 10512
// if BType in Restricted_Builds [ i ] then
10091: LD_VAR 0 2
10095: PUSH
10096: LD_LOC 14
10100: PUSH
10101: LD_VAR 0 7
10105: ARRAY
10106: IN
10107: IFFALSE 10510
// begin if old_side then
10109: LD_VAR 0 4
10113: IFFALSE 10239
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
10115: LD_LOC 20
10119: PUSH
10120: LD_VAR 0 7
10124: ARRAY
10125: PUSH
10126: LD_VAR 0 3
10130: ARRAY
10131: PUSH
10132: LD_VAR 0 5
10136: PLUS
10137: PUSH
10138: LD_LOC 15
10142: PUSH
10143: LD_VAR 0 7
10147: ARRAY
10148: GREATER
10149: IFFALSE 10175
// begin SetSide ( un , old_side ) ;
10151: LD_VAR 0 1
10155: PPUSH
10156: LD_VAR 0 4
10160: PPUSH
10161: CALL_OW 235
// count := 0 ;
10165: LD_ADDR_VAR 0 5
10169: PUSH
10170: LD_INT 0
10172: ST_TO_ADDR
// end else
10173: GO 10239
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
10175: LD_ADDR_LOC 20
10179: PUSH
10180: LD_LOC 20
10184: PPUSH
10185: LD_VAR 0 7
10189: PPUSH
10190: LD_LOC 20
10194: PUSH
10195: LD_VAR 0 7
10199: ARRAY
10200: PPUSH
10201: LD_VAR 0 4
10205: PPUSH
10206: LD_LOC 20
10210: PUSH
10211: LD_VAR 0 7
10215: ARRAY
10216: PUSH
10217: LD_VAR 0 4
10221: ARRAY
10222: PUSH
10223: LD_VAR 0 5
10227: MINUS
10228: PPUSH
10229: CALL_OW 1
10233: PPUSH
10234: CALL_OW 1
10238: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
10239: LD_ADDR_LOC 20
10243: PUSH
10244: LD_LOC 20
10248: PPUSH
10249: LD_VAR 0 7
10253: PPUSH
10254: LD_LOC 20
10258: PUSH
10259: LD_VAR 0 7
10263: ARRAY
10264: PPUSH
10265: LD_VAR 0 3
10269: PPUSH
10270: LD_LOC 20
10274: PUSH
10275: LD_VAR 0 7
10279: ARRAY
10280: PUSH
10281: LD_VAR 0 3
10285: ARRAY
10286: PUSH
10287: LD_VAR 0 5
10291: PLUS
10292: PPUSH
10293: CALL_OW 1
10297: PPUSH
10298: CALL_OW 1
10302: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
10303: LD_VAR 0 5
10307: PUSH
10308: LD_INT 0
10310: NONEQUAL
10311: PUSH
10312: LD_VAR 0 3
10316: PUSH
10317: LD_OWVAR 2
10321: EQUAL
10322: AND
10323: IFFALSE 10366
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
10325: LD_ADDR_LOC 21
10329: PUSH
10330: LD_LOC 21
10334: PPUSH
10335: LD_INT 3
10337: PUSH
10338: LD_VAR 0 7
10342: MUL
10343: PPUSH
10344: LD_LOC 20
10348: PUSH
10349: LD_VAR 0 7
10353: ARRAY
10354: PUSH
10355: LD_VAR 0 3
10359: ARRAY
10360: PPUSH
10361: CALL_OW 1
10365: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
10366: LD_LOC 20
10370: PUSH
10371: LD_VAR 0 7
10375: ARRAY
10376: PUSH
10377: LD_VAR 0 3
10381: ARRAY
10382: PUSH
10383: LD_LOC 15
10387: PUSH
10388: LD_VAR 0 7
10392: ARRAY
10393: GREATER
10394: IFFALSE 10421
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
10396: LD_ADDR_LOC 22
10400: PUSH
10401: LD_LOC 22
10405: PPUSH
10406: LD_VAR 0 3
10410: PPUSH
10411: LD_INT 1
10413: PPUSH
10414: CALL_OW 1
10418: ST_TO_ADDR
// end else
10419: GO 10508
// begin for j := 1 to Restricted_Builds do
10421: LD_ADDR_VAR 0 8
10425: PUSH
10426: DOUBLE
10427: LD_INT 1
10429: DEC
10430: ST_TO_ADDR
10431: LD_LOC 14
10435: PUSH
10436: FOR_TO
10437: IFFALSE 10481
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
10439: LD_LOC 20
10443: PUSH
10444: LD_VAR 0 8
10448: ARRAY
10449: PUSH
10450: LD_VAR 0 3
10454: ARRAY
10455: PUSH
10456: LD_LOC 15
10460: PUSH
10461: LD_VAR 0 8
10465: ARRAY
10466: GREATER
10467: IFFALSE 10479
// begin Is_Cheater := true ;
10469: LD_ADDR_VAR 0 9
10473: PUSH
10474: LD_INT 1
10476: ST_TO_ADDR
// break ;
10477: GO 10481
// end ;
10479: GO 10436
10481: POP
10482: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
10483: LD_ADDR_LOC 22
10487: PUSH
10488: LD_LOC 22
10492: PPUSH
10493: LD_VAR 0 3
10497: PPUSH
10498: LD_VAR 0 9
10502: PPUSH
10503: CALL_OW 1
10507: ST_TO_ADDR
// end ; break ;
10508: GO 10512
// end ;
10510: GO 10088
10512: POP
10513: POP
// end ;
10514: LD_VAR 0 6
10518: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
10519: LD_VAR 0 5
10523: PUSH
10524: LD_LOC 16
10528: IN
10529: PUSH
10530: LD_VAR 0 2
10534: PUSH
10535: LD_LOC 17
10539: IN
10540: OR
10541: PUSH
10542: LD_VAR 0 4
10546: PUSH
10547: LD_LOC 18
10551: IN
10552: OR
10553: PUSH
10554: LD_VAR 0 3
10558: PUSH
10559: LD_LOC 19
10563: IN
10564: OR
10565: IFFALSE 10576
// ComCancel ( factory ) ;
10567: LD_VAR 0 1
10571: PPUSH
10572: CALL_OW 127
// end ;
10576: PPOPN 5
10578: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
10579: LD_VAR 0 2
10583: PUSH
10584: LD_LOC 16
10588: IN
10589: IFFALSE 10600
// ComCancel ( building ) ;
10591: LD_VAR 0 1
10595: PPUSH
10596: CALL_OW 127
// end ; end_of_file
10600: PPOPN 2
10602: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
10603: LD_INT 0
10605: PPUSH
10606: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
10607: LD_ADDR_VAR 0 2
10611: PUSH
10612: LD_STRING #Multi1x1-Time
10614: PUSH
10615: LD_OWVAR 1
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: ST_TO_ADDR
// if WaitServerStrings then
10624: LD_EXP 57
10628: IFFALSE 10646
// AllStrings = AllStrings ^ WaitServerStrings ;
10630: LD_ADDR_VAR 0 2
10634: PUSH
10635: LD_VAR 0 2
10639: PUSH
10640: LD_EXP 57
10644: ADD
10645: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
10646: LD_INT 0
10648: PUSH
10649: LD_EXP 12
10653: PUSH
10654: LD_OWVAR 1
10658: MINUS
10659: LESSEQUAL
10660: IFFALSE 10691
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
10662: LD_ADDR_VAR 0 2
10666: PUSH
10667: LD_VAR 0 2
10671: PUSH
10672: LD_STRING #allowedsibbomb
10674: PUSH
10675: LD_EXP 12
10679: PUSH
10680: LD_OWVAR 1
10684: MINUS
10685: PUSH
10686: EMPTY
10687: LIST
10688: LIST
10689: ADD
10690: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
10691: LD_INT 0
10693: PUSH
10694: LD_EXP 60
10698: PUSH
10699: LD_OWVAR 1
10703: MINUS
10704: LESSEQUAL
10705: IFFALSE 10736
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
10707: LD_ADDR_VAR 0 2
10711: PUSH
10712: LD_VAR 0 2
10716: PUSH
10717: LD_STRING #builduptime
10719: PUSH
10720: LD_EXP 60
10724: PUSH
10725: LD_OWVAR 1
10729: MINUS
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: ADD
10735: ST_TO_ADDR
// if ( ExtraStrings ) then
10736: LD_EXP 56
10740: IFFALSE 10762
// AllStrings := AllStrings ^  ^ ExtraStrings ;
10742: LD_ADDR_VAR 0 2
10746: PUSH
10747: LD_VAR 0 2
10751: PUSH
10752: LD_STRING 
10754: ADD
10755: PUSH
10756: LD_EXP 56
10760: ADD
10761: ST_TO_ADDR
// if ( LimitsStrings ) then
10762: CALL 7443 0 0
10766: IFFALSE 10788
// AllStrings := AllStrings ^  ^ LimitsStrings ;
10768: LD_ADDR_VAR 0 2
10772: PUSH
10773: LD_VAR 0 2
10777: PUSH
10778: LD_STRING 
10780: ADD
10781: PUSH
10782: CALL 7443 0 0
10786: ADD
10787: ST_TO_ADDR
// Display_Strings := AllStrings ;
10788: LD_ADDR_OWVAR 47
10792: PUSH
10793: LD_VAR 0 2
10797: ST_TO_ADDR
// end ;
10798: LD_VAR 0 1
10802: RET
// every 0 0$1 do
10803: GO 10805
10805: DISABLE
// begin ShowTimer ;
10806: CALL 10603 0 0
// enable ;
10810: ENABLE
// end ; end_of_file
10811: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
10812: LD_INT 0
10814: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
10815: LD_VAR 0 1
10819: PPUSH
10820: CALL_OW 255
10824: PUSH
10825: LD_VAR 0 4
10829: EQUAL
10830: IFFALSE 10849
// begin SetAchievement ( ACH_RAD ) ;
10832: LD_STRING ACH_RAD
10834: PPUSH
10835: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
10839: LD_STRING ACH_NL
10841: PPUSH
10842: LD_INT 1
10844: PPUSH
10845: CALL_OW 564
// end end ;
10849: LD_VAR 0 5
10853: RET
// export function SA_Win ( side ) ; begin
10854: LD_INT 0
10856: PPUSH
// case side of 1 :
10857: LD_VAR 0 1
10861: PUSH
10862: LD_INT 1
10864: DOUBLE
10865: EQUAL
10866: IFTRUE 10870
10868: GO 10883
10870: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
10871: LD_STRING ACH_AH
10873: PPUSH
10874: LD_INT 1
10876: PPUSH
10877: CALL_OW 564
10881: GO 11046
10883: LD_INT 2
10885: DOUBLE
10886: EQUAL
10887: IFTRUE 10891
10889: GO 10904
10891: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
10892: LD_STRING ACH_E
10894: PPUSH
10895: LD_INT 1
10897: PPUSH
10898: CALL_OW 564
10902: GO 11046
10904: LD_INT 3
10906: DOUBLE
10907: EQUAL
10908: IFTRUE 10912
10910: GO 10925
10912: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
10913: LD_STRING ACH_OOL
10915: PPUSH
10916: LD_INT 1
10918: PPUSH
10919: CALL_OW 564
10923: GO 11046
10925: LD_INT 1
10927: PUSH
10928: LD_INT 2
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: DOUBLE
10935: EQUAL
10936: IFTRUE 10940
10938: GO 10965
10940: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
10941: LD_STRING ACH_AH
10943: PPUSH
10944: LD_REAL  5.00000000000000E-0001
10947: PPUSH
10948: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
10952: LD_STRING ACH_E
10954: PPUSH
10955: LD_REAL  5.00000000000000E-0001
10958: PPUSH
10959: CALL_OW 564
// end ; [ 2 , 3 ] :
10963: GO 11046
10965: LD_INT 2
10967: PUSH
10968: LD_INT 3
10970: PUSH
10971: EMPTY
10972: LIST
10973: LIST
10974: DOUBLE
10975: EQUAL
10976: IFTRUE 10980
10978: GO 11005
10980: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
10981: LD_STRING ACH_OOL
10983: PPUSH
10984: LD_REAL  5.00000000000000E-0001
10987: PPUSH
10988: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
10992: LD_STRING ACH_E
10994: PPUSH
10995: LD_REAL  5.00000000000000E-0001
10998: PPUSH
10999: CALL_OW 564
// end ; [ 3 , 1 ] :
11003: GO 11046
11005: LD_INT 3
11007: PUSH
11008: LD_INT 1
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: DOUBLE
11015: EQUAL
11016: IFTRUE 11020
11018: GO 11045
11020: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
11021: LD_STRING ACH_AH
11023: PPUSH
11024: LD_REAL  5.00000000000000E-0001
11027: PPUSH
11028: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
11032: LD_STRING ACH_OOL
11034: PPUSH
11035: LD_REAL  5.00000000000000E-0001
11038: PPUSH
11039: CALL_OW 564
// end ; end ;
11043: GO 11046
11045: POP
// end ; end_of_file
11046: LD_VAR 0 2
11050: RET
// export function SetMpTechs ( ) ; var side , i ; begin
11051: LD_INT 0
11053: PPUSH
11054: PPUSH
11055: PPUSH
// for side = 1 to 8 do
11056: LD_ADDR_VAR 0 2
11060: PUSH
11061: DOUBLE
11062: LD_INT 1
11064: DEC
11065: ST_TO_ADDR
11066: LD_INT 8
11068: PUSH
11069: FOR_TO
11070: IFFALSE 11191
// begin for i = 1 to 72 do
11072: LD_ADDR_VAR 0 3
11076: PUSH
11077: DOUBLE
11078: LD_INT 1
11080: DEC
11081: ST_TO_ADDR
11082: LD_INT 72
11084: PUSH
11085: FOR_TO
11086: IFFALSE 11117
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
11088: LD_VAR 0 3
11092: PPUSH
11093: LD_VAR 0 2
11097: PPUSH
11098: LD_INT 0
11100: PPUSH
11101: LD_VAR 0 3
11105: PPUSH
11106: CALL_OW 565
11110: PPUSH
11111: CALL_OW 322
11115: GO 11085
11117: POP
11118: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
11119: LD_INT 73
11121: PPUSH
11122: LD_VAR 0 2
11126: PPUSH
11127: LD_INT 0
11129: PPUSH
11130: LD_INT 25
11132: PPUSH
11133: CALL_OW 565
11137: PPUSH
11138: CALL_OW 322
// for i = 0 to 40 do
11142: LD_ADDR_VAR 0 3
11146: PUSH
11147: DOUBLE
11148: LD_INT 0
11150: DEC
11151: ST_TO_ADDR
11152: LD_INT 40
11154: PUSH
11155: FOR_TO
11156: IFFALSE 11187
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
11158: LD_VAR 0 3
11162: PPUSH
11163: LD_VAR 0 2
11167: PPUSH
11168: LD_INT 1
11170: PPUSH
11171: LD_VAR 0 3
11175: PPUSH
11176: CALL_OW 565
11180: PPUSH
11181: CALL_OW 324
11185: GO 11155
11187: POP
11188: POP
// end ;
11189: GO 11069
11191: POP
11192: POP
// end ;
11193: LD_VAR 0 1
11197: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
11198: LD_INT 0
11200: PPUSH
11201: PPUSH
11202: PPUSH
// for side = 1 to 8 do
11203: LD_ADDR_VAR 0 3
11207: PUSH
11208: DOUBLE
11209: LD_INT 1
11211: DEC
11212: ST_TO_ADDR
11213: LD_INT 8
11215: PUSH
11216: FOR_TO
11217: IFFALSE 15213
// begin for i = 1 to 73 do
11219: LD_ADDR_VAR 0 4
11223: PUSH
11224: DOUBLE
11225: LD_INT 1
11227: DEC
11228: ST_TO_ADDR
11229: LD_INT 73
11231: PUSH
11232: FOR_TO
11233: IFFALSE 11254
// SetTech ( i , side , state_disabled ) ;
11235: LD_VAR 0 4
11239: PPUSH
11240: LD_VAR 0 3
11244: PPUSH
11245: LD_INT 0
11247: PPUSH
11248: CALL_OW 322
11252: GO 11232
11254: POP
11255: POP
// for i = 0 to 40 do
11256: LD_ADDR_VAR 0 4
11260: PUSH
11261: DOUBLE
11262: LD_INT 0
11264: DEC
11265: ST_TO_ADDR
11266: LD_INT 40
11268: PUSH
11269: FOR_TO
11270: IFFALSE 11291
// SetRestrict ( i , side , false ) ;
11272: LD_VAR 0 4
11276: PPUSH
11277: LD_VAR 0 3
11281: PPUSH
11282: LD_INT 0
11284: PPUSH
11285: CALL_OW 324
11289: GO 11269
11291: POP
11292: POP
// case level of 1 :
11293: LD_VAR 0 1
11297: PUSH
11298: LD_INT 1
11300: DOUBLE
11301: EQUAL
11302: IFTRUE 11306
11304: GO 11459
11306: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11307: LD_INT 35
11309: PPUSH
11310: LD_VAR 0 3
11314: PPUSH
11315: LD_INT 1
11317: PPUSH
11318: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11322: LD_INT 45
11324: PPUSH
11325: LD_VAR 0 3
11329: PPUSH
11330: LD_INT 1
11332: PPUSH
11333: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11337: LD_INT 46
11339: PPUSH
11340: LD_VAR 0 3
11344: PPUSH
11345: LD_INT 1
11347: PPUSH
11348: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11352: LD_INT 47
11354: PPUSH
11355: LD_VAR 0 3
11359: PPUSH
11360: LD_INT 1
11362: PPUSH
11363: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11367: LD_INT 0
11369: PPUSH
11370: LD_VAR 0 3
11374: PPUSH
11375: LD_INT 1
11377: PPUSH
11378: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11382: LD_INT 2
11384: PPUSH
11385: LD_VAR 0 3
11389: PPUSH
11390: LD_INT 1
11392: PPUSH
11393: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11397: LD_INT 4
11399: PPUSH
11400: LD_VAR 0 3
11404: PPUSH
11405: LD_INT 1
11407: PPUSH
11408: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11412: LD_INT 6
11414: PPUSH
11415: LD_VAR 0 3
11419: PPUSH
11420: LD_INT 1
11422: PPUSH
11423: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11427: LD_INT 29
11429: PPUSH
11430: LD_VAR 0 3
11434: PPUSH
11435: LD_INT 1
11437: PPUSH
11438: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11442: LD_INT 31
11444: PPUSH
11445: LD_VAR 0 3
11449: PPUSH
11450: LD_INT 1
11452: PPUSH
11453: CALL_OW 324
// end ; 2 :
11457: GO 15211
11459: LD_INT 2
11461: DOUBLE
11462: EQUAL
11463: IFTRUE 11467
11465: GO 11665
11467: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11468: LD_INT 35
11470: PPUSH
11471: LD_VAR 0 3
11475: PPUSH
11476: LD_INT 1
11478: PPUSH
11479: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11483: LD_INT 45
11485: PPUSH
11486: LD_VAR 0 3
11490: PPUSH
11491: LD_INT 1
11493: PPUSH
11494: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11498: LD_INT 46
11500: PPUSH
11501: LD_VAR 0 3
11505: PPUSH
11506: LD_INT 1
11508: PPUSH
11509: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11513: LD_INT 47
11515: PPUSH
11516: LD_VAR 0 3
11520: PPUSH
11521: LD_INT 1
11523: PPUSH
11524: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11528: LD_INT 1
11530: PPUSH
11531: LD_VAR 0 3
11535: PPUSH
11536: LD_INT 1
11538: PPUSH
11539: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11543: LD_INT 2
11545: PPUSH
11546: LD_VAR 0 3
11550: PPUSH
11551: LD_INT 1
11553: PPUSH
11554: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11558: LD_INT 11
11560: PPUSH
11561: LD_VAR 0 3
11565: PPUSH
11566: LD_INT 1
11568: PPUSH
11569: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11573: LD_INT 0
11575: PPUSH
11576: LD_VAR 0 3
11580: PPUSH
11581: LD_INT 1
11583: PPUSH
11584: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11588: LD_INT 2
11590: PPUSH
11591: LD_VAR 0 3
11595: PPUSH
11596: LD_INT 1
11598: PPUSH
11599: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11603: LD_INT 4
11605: PPUSH
11606: LD_VAR 0 3
11610: PPUSH
11611: LD_INT 1
11613: PPUSH
11614: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11618: LD_INT 6
11620: PPUSH
11621: LD_VAR 0 3
11625: PPUSH
11626: LD_INT 1
11628: PPUSH
11629: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11633: LD_INT 29
11635: PPUSH
11636: LD_VAR 0 3
11640: PPUSH
11641: LD_INT 1
11643: PPUSH
11644: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11648: LD_INT 31
11650: PPUSH
11651: LD_VAR 0 3
11655: PPUSH
11656: LD_INT 1
11658: PPUSH
11659: CALL_OW 324
// end ; 3 :
11663: GO 15211
11665: LD_INT 3
11667: DOUBLE
11668: EQUAL
11669: IFTRUE 11673
11671: GO 12126
11673: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11674: LD_INT 35
11676: PPUSH
11677: LD_VAR 0 3
11681: PPUSH
11682: LD_INT 1
11684: PPUSH
11685: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11689: LD_INT 45
11691: PPUSH
11692: LD_VAR 0 3
11696: PPUSH
11697: LD_INT 1
11699: PPUSH
11700: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11704: LD_INT 46
11706: PPUSH
11707: LD_VAR 0 3
11711: PPUSH
11712: LD_INT 1
11714: PPUSH
11715: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11719: LD_INT 47
11721: PPUSH
11722: LD_VAR 0 3
11726: PPUSH
11727: LD_INT 1
11729: PPUSH
11730: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11734: LD_INT 1
11736: PPUSH
11737: LD_VAR 0 3
11741: PPUSH
11742: LD_INT 1
11744: PPUSH
11745: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11749: LD_INT 2
11751: PPUSH
11752: LD_VAR 0 3
11756: PPUSH
11757: LD_INT 1
11759: PPUSH
11760: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11764: LD_INT 11
11766: PPUSH
11767: LD_VAR 0 3
11771: PPUSH
11772: LD_INT 1
11774: PPUSH
11775: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11779: LD_INT 48
11781: PPUSH
11782: LD_VAR 0 3
11786: PPUSH
11787: LD_INT 1
11789: PPUSH
11790: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11794: LD_INT 69
11796: PPUSH
11797: LD_VAR 0 3
11801: PPUSH
11802: LD_INT 1
11804: PPUSH
11805: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11809: LD_INT 39
11811: PPUSH
11812: LD_VAR 0 3
11816: PPUSH
11817: LD_INT 1
11819: PPUSH
11820: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11824: LD_INT 43
11826: PPUSH
11827: LD_VAR 0 3
11831: PPUSH
11832: LD_INT 1
11834: PPUSH
11835: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11839: LD_INT 51
11841: PPUSH
11842: LD_VAR 0 3
11846: PPUSH
11847: LD_INT 1
11849: PPUSH
11850: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11854: LD_INT 6
11856: PPUSH
11857: LD_VAR 0 3
11861: PPUSH
11862: LD_INT 1
11864: PPUSH
11865: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11869: LD_INT 0
11871: PPUSH
11872: LD_VAR 0 3
11876: PPUSH
11877: LD_INT 1
11879: PPUSH
11880: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11884: LD_INT 2
11886: PPUSH
11887: LD_VAR 0 3
11891: PPUSH
11892: LD_INT 1
11894: PPUSH
11895: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11899: LD_INT 3
11901: PPUSH
11902: LD_VAR 0 3
11906: PPUSH
11907: LD_INT 1
11909: PPUSH
11910: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11914: LD_INT 4
11916: PPUSH
11917: LD_VAR 0 3
11921: PPUSH
11922: LD_INT 1
11924: PPUSH
11925: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11929: LD_INT 6
11931: PPUSH
11932: LD_VAR 0 3
11936: PPUSH
11937: LD_INT 1
11939: PPUSH
11940: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11944: LD_INT 7
11946: PPUSH
11947: LD_VAR 0 3
11951: PPUSH
11952: LD_INT 1
11954: PPUSH
11955: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11959: LD_INT 8
11961: PPUSH
11962: LD_VAR 0 3
11966: PPUSH
11967: LD_INT 1
11969: PPUSH
11970: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11974: LD_INT 10
11976: PPUSH
11977: LD_VAR 0 3
11981: PPUSH
11982: LD_INT 1
11984: PPUSH
11985: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11989: LD_INT 15
11991: PPUSH
11992: LD_VAR 0 3
11996: PPUSH
11997: LD_INT 1
11999: PPUSH
12000: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12004: LD_INT 16
12006: PPUSH
12007: LD_VAR 0 3
12011: PPUSH
12012: LD_INT 1
12014: PPUSH
12015: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12019: LD_INT 17
12021: PPUSH
12022: LD_VAR 0 3
12026: PPUSH
12027: LD_INT 1
12029: PPUSH
12030: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12034: LD_INT 20
12036: PPUSH
12037: LD_VAR 0 3
12041: PPUSH
12042: LD_INT 1
12044: PPUSH
12045: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12049: LD_INT 26
12051: PPUSH
12052: LD_VAR 0 3
12056: PPUSH
12057: LD_INT 1
12059: PPUSH
12060: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12064: LD_INT 27
12066: PPUSH
12067: LD_VAR 0 3
12071: PPUSH
12072: LD_INT 1
12074: PPUSH
12075: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12079: LD_INT 29
12081: PPUSH
12082: LD_VAR 0 3
12086: PPUSH
12087: LD_INT 1
12089: PPUSH
12090: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12094: LD_INT 31
12096: PPUSH
12097: LD_VAR 0 3
12101: PPUSH
12102: LD_INT 1
12104: PPUSH
12105: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12109: LD_INT 32
12111: PPUSH
12112: LD_VAR 0 3
12116: PPUSH
12117: LD_INT 1
12119: PPUSH
12120: CALL_OW 324
// end ; 4 :
12124: GO 15211
12126: LD_INT 4
12128: DOUBLE
12129: EQUAL
12130: IFTRUE 12134
12132: GO 13082
12134: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12135: LD_INT 35
12137: PPUSH
12138: LD_VAR 0 3
12142: PPUSH
12143: LD_INT 1
12145: PPUSH
12146: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12150: LD_INT 45
12152: PPUSH
12153: LD_VAR 0 3
12157: PPUSH
12158: LD_INT 1
12160: PPUSH
12161: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12165: LD_INT 46
12167: PPUSH
12168: LD_VAR 0 3
12172: PPUSH
12173: LD_INT 1
12175: PPUSH
12176: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12180: LD_INT 47
12182: PPUSH
12183: LD_VAR 0 3
12187: PPUSH
12188: LD_INT 1
12190: PPUSH
12191: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12195: LD_INT 1
12197: PPUSH
12198: LD_VAR 0 3
12202: PPUSH
12203: LD_INT 1
12205: PPUSH
12206: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12210: LD_INT 2
12212: PPUSH
12213: LD_VAR 0 3
12217: PPUSH
12218: LD_INT 1
12220: PPUSH
12221: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12225: LD_INT 11
12227: PPUSH
12228: LD_VAR 0 3
12232: PPUSH
12233: LD_INT 1
12235: PPUSH
12236: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12240: LD_INT 20
12242: PPUSH
12243: LD_VAR 0 3
12247: PPUSH
12248: LD_INT 1
12250: PPUSH
12251: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12255: LD_INT 48
12257: PPUSH
12258: LD_VAR 0 3
12262: PPUSH
12263: LD_INT 1
12265: PPUSH
12266: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12270: LD_INT 49
12272: PPUSH
12273: LD_VAR 0 3
12277: PPUSH
12278: LD_INT 1
12280: PPUSH
12281: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12285: LD_INT 69
12287: PPUSH
12288: LD_VAR 0 3
12292: PPUSH
12293: LD_INT 1
12295: PPUSH
12296: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12300: LD_INT 39
12302: PPUSH
12303: LD_VAR 0 3
12307: PPUSH
12308: LD_INT 1
12310: PPUSH
12311: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12315: LD_INT 34
12317: PPUSH
12318: LD_VAR 0 3
12322: PPUSH
12323: LD_INT 1
12325: PPUSH
12326: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12330: LD_INT 42
12332: PPUSH
12333: LD_VAR 0 3
12337: PPUSH
12338: LD_INT 1
12340: PPUSH
12341: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12345: LD_INT 44
12347: PPUSH
12348: LD_VAR 0 3
12352: PPUSH
12353: LD_INT 1
12355: PPUSH
12356: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12360: LD_INT 41
12362: PPUSH
12363: LD_VAR 0 3
12367: PPUSH
12368: LD_INT 1
12370: PPUSH
12371: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12375: LD_INT 43
12377: PPUSH
12378: LD_VAR 0 3
12382: PPUSH
12383: LD_INT 1
12385: PPUSH
12386: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12390: LD_INT 70
12392: PPUSH
12393: LD_VAR 0 3
12397: PPUSH
12398: LD_INT 1
12400: PPUSH
12401: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12405: LD_INT 51
12407: PPUSH
12408: LD_VAR 0 3
12412: PPUSH
12413: LD_INT 1
12415: PPUSH
12416: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12420: LD_INT 52
12422: PPUSH
12423: LD_VAR 0 3
12427: PPUSH
12428: LD_INT 1
12430: PPUSH
12431: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12435: LD_INT 6
12437: PPUSH
12438: LD_VAR 0 3
12442: PPUSH
12443: LD_INT 1
12445: PPUSH
12446: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12450: LD_INT 15
12452: PPUSH
12453: LD_VAR 0 3
12457: PPUSH
12458: LD_INT 1
12460: PPUSH
12461: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12465: LD_INT 7
12467: PPUSH
12468: LD_VAR 0 3
12472: PPUSH
12473: LD_INT 1
12475: PPUSH
12476: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12480: LD_INT 12
12482: PPUSH
12483: LD_VAR 0 3
12487: PPUSH
12488: LD_INT 1
12490: PPUSH
12491: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12495: LD_INT 18
12497: PPUSH
12498: LD_VAR 0 3
12502: PPUSH
12503: LD_INT 1
12505: PPUSH
12506: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12510: LD_INT 60
12512: PPUSH
12513: LD_VAR 0 3
12517: PPUSH
12518: LD_INT 1
12520: PPUSH
12521: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12525: LD_INT 9
12527: PPUSH
12528: LD_VAR 0 3
12532: PPUSH
12533: LD_INT 1
12535: PPUSH
12536: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12540: LD_INT 30
12542: PPUSH
12543: LD_VAR 0 3
12547: PPUSH
12548: LD_INT 1
12550: PPUSH
12551: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12555: LD_INT 37
12557: PPUSH
12558: LD_VAR 0 3
12562: PPUSH
12563: LD_INT 1
12565: PPUSH
12566: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12570: LD_INT 5
12572: PPUSH
12573: LD_VAR 0 3
12577: PPUSH
12578: LD_INT 1
12580: PPUSH
12581: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12585: LD_INT 66
12587: PPUSH
12588: LD_VAR 0 3
12592: PPUSH
12593: LD_INT 1
12595: PPUSH
12596: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12600: LD_INT 21
12602: PPUSH
12603: LD_VAR 0 3
12607: PPUSH
12608: LD_INT 1
12610: PPUSH
12611: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12615: LD_INT 22
12617: PPUSH
12618: LD_VAR 0 3
12622: PPUSH
12623: LD_INT 1
12625: PPUSH
12626: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12630: LD_INT 54
12632: PPUSH
12633: LD_VAR 0 3
12637: PPUSH
12638: LD_INT 1
12640: PPUSH
12641: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12645: LD_INT 0
12647: PPUSH
12648: LD_VAR 0 3
12652: PPUSH
12653: LD_INT 1
12655: PPUSH
12656: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12660: LD_INT 1
12662: PPUSH
12663: LD_VAR 0 3
12667: PPUSH
12668: LD_INT 1
12670: PPUSH
12671: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12675: LD_INT 2
12677: PPUSH
12678: LD_VAR 0 3
12682: PPUSH
12683: LD_INT 1
12685: PPUSH
12686: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12690: LD_INT 3
12692: PPUSH
12693: LD_VAR 0 3
12697: PPUSH
12698: LD_INT 1
12700: PPUSH
12701: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12705: LD_INT 4
12707: PPUSH
12708: LD_VAR 0 3
12712: PPUSH
12713: LD_INT 1
12715: PPUSH
12716: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12720: LD_INT 5
12722: PPUSH
12723: LD_VAR 0 3
12727: PPUSH
12728: LD_INT 1
12730: PPUSH
12731: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12735: LD_INT 6
12737: PPUSH
12738: LD_VAR 0 3
12742: PPUSH
12743: LD_INT 1
12745: PPUSH
12746: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12750: LD_INT 7
12752: PPUSH
12753: LD_VAR 0 3
12757: PPUSH
12758: LD_INT 1
12760: PPUSH
12761: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12765: LD_INT 8
12767: PPUSH
12768: LD_VAR 0 3
12772: PPUSH
12773: LD_INT 1
12775: PPUSH
12776: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12780: LD_INT 10
12782: PPUSH
12783: LD_VAR 0 3
12787: PPUSH
12788: LD_INT 1
12790: PPUSH
12791: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12795: LD_INT 11
12797: PPUSH
12798: LD_VAR 0 3
12802: PPUSH
12803: LD_INT 1
12805: PPUSH
12806: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12810: LD_INT 12
12812: PPUSH
12813: LD_VAR 0 3
12817: PPUSH
12818: LD_INT 1
12820: PPUSH
12821: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12825: LD_INT 13
12827: PPUSH
12828: LD_VAR 0 3
12832: PPUSH
12833: LD_INT 1
12835: PPUSH
12836: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12840: LD_INT 14
12842: PPUSH
12843: LD_VAR 0 3
12847: PPUSH
12848: LD_INT 1
12850: PPUSH
12851: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12855: LD_INT 15
12857: PPUSH
12858: LD_VAR 0 3
12862: PPUSH
12863: LD_INT 1
12865: PPUSH
12866: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12870: LD_INT 16
12872: PPUSH
12873: LD_VAR 0 3
12877: PPUSH
12878: LD_INT 1
12880: PPUSH
12881: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12885: LD_INT 17
12887: PPUSH
12888: LD_VAR 0 3
12892: PPUSH
12893: LD_INT 1
12895: PPUSH
12896: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12900: LD_INT 19
12902: PPUSH
12903: LD_VAR 0 3
12907: PPUSH
12908: LD_INT 1
12910: PPUSH
12911: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12915: LD_INT 20
12917: PPUSH
12918: LD_VAR 0 3
12922: PPUSH
12923: LD_INT 1
12925: PPUSH
12926: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12930: LD_INT 21
12932: PPUSH
12933: LD_VAR 0 3
12937: PPUSH
12938: LD_INT 1
12940: PPUSH
12941: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12945: LD_INT 23
12947: PPUSH
12948: LD_VAR 0 3
12952: PPUSH
12953: LD_INT 1
12955: PPUSH
12956: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12960: LD_INT 26
12962: PPUSH
12963: LD_VAR 0 3
12967: PPUSH
12968: LD_INT 1
12970: PPUSH
12971: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12975: LD_INT 27
12977: PPUSH
12978: LD_VAR 0 3
12982: PPUSH
12983: LD_INT 1
12985: PPUSH
12986: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12990: LD_INT 28
12992: PPUSH
12993: LD_VAR 0 3
12997: PPUSH
12998: LD_INT 1
13000: PPUSH
13001: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13005: LD_INT 29
13007: PPUSH
13008: LD_VAR 0 3
13012: PPUSH
13013: LD_INT 1
13015: PPUSH
13016: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
13020: LD_INT 30
13022: PPUSH
13023: LD_VAR 0 3
13027: PPUSH
13028: LD_INT 1
13030: PPUSH
13031: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13035: LD_INT 31
13037: PPUSH
13038: LD_VAR 0 3
13042: PPUSH
13043: LD_INT 1
13045: PPUSH
13046: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13050: LD_INT 32
13052: PPUSH
13053: LD_VAR 0 3
13057: PPUSH
13058: LD_INT 1
13060: PPUSH
13061: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
13065: LD_INT 36
13067: PPUSH
13068: LD_VAR 0 3
13072: PPUSH
13073: LD_INT 1
13075: PPUSH
13076: CALL_OW 324
// end ; 5 :
13080: GO 15211
13082: LD_INT 5
13084: DOUBLE
13085: EQUAL
13086: IFTRUE 13090
13088: GO 14203
13090: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13091: LD_INT 35
13093: PPUSH
13094: LD_VAR 0 3
13098: PPUSH
13099: LD_INT 1
13101: PPUSH
13102: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13106: LD_INT 45
13108: PPUSH
13109: LD_VAR 0 3
13113: PPUSH
13114: LD_INT 1
13116: PPUSH
13117: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13121: LD_INT 46
13123: PPUSH
13124: LD_VAR 0 3
13128: PPUSH
13129: LD_INT 1
13131: PPUSH
13132: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13136: LD_INT 47
13138: PPUSH
13139: LD_VAR 0 3
13143: PPUSH
13144: LD_INT 1
13146: PPUSH
13147: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13151: LD_INT 1
13153: PPUSH
13154: LD_VAR 0 3
13158: PPUSH
13159: LD_INT 1
13161: PPUSH
13162: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13166: LD_INT 2
13168: PPUSH
13169: LD_VAR 0 3
13173: PPUSH
13174: LD_INT 1
13176: PPUSH
13177: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13181: LD_INT 11
13183: PPUSH
13184: LD_VAR 0 3
13188: PPUSH
13189: LD_INT 1
13191: PPUSH
13192: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13196: LD_INT 20
13198: PPUSH
13199: LD_VAR 0 3
13203: PPUSH
13204: LD_INT 1
13206: PPUSH
13207: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13211: LD_INT 48
13213: PPUSH
13214: LD_VAR 0 3
13218: PPUSH
13219: LD_INT 1
13221: PPUSH
13222: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13226: LD_INT 49
13228: PPUSH
13229: LD_VAR 0 3
13233: PPUSH
13234: LD_INT 1
13236: PPUSH
13237: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13241: LD_INT 69
13243: PPUSH
13244: LD_VAR 0 3
13248: PPUSH
13249: LD_INT 1
13251: PPUSH
13252: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13256: LD_INT 39
13258: PPUSH
13259: LD_VAR 0 3
13263: PPUSH
13264: LD_INT 1
13266: PPUSH
13267: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13271: LD_INT 34
13273: PPUSH
13274: LD_VAR 0 3
13278: PPUSH
13279: LD_INT 1
13281: PPUSH
13282: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13286: LD_INT 42
13288: PPUSH
13289: LD_VAR 0 3
13293: PPUSH
13294: LD_INT 1
13296: PPUSH
13297: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13301: LD_INT 44
13303: PPUSH
13304: LD_VAR 0 3
13308: PPUSH
13309: LD_INT 1
13311: PPUSH
13312: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13316: LD_INT 41
13318: PPUSH
13319: LD_VAR 0 3
13323: PPUSH
13324: LD_INT 1
13326: PPUSH
13327: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
13331: LD_INT 40
13333: PPUSH
13334: LD_VAR 0 3
13338: PPUSH
13339: LD_INT 1
13341: PPUSH
13342: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13346: LD_INT 43
13348: PPUSH
13349: LD_VAR 0 3
13353: PPUSH
13354: LD_INT 1
13356: PPUSH
13357: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13361: LD_INT 70
13363: PPUSH
13364: LD_VAR 0 3
13368: PPUSH
13369: LD_INT 1
13371: PPUSH
13372: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13376: LD_INT 51
13378: PPUSH
13379: LD_VAR 0 3
13383: PPUSH
13384: LD_INT 1
13386: PPUSH
13387: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13391: LD_INT 52
13393: PPUSH
13394: LD_VAR 0 3
13398: PPUSH
13399: LD_INT 1
13401: PPUSH
13402: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13406: LD_INT 6
13408: PPUSH
13409: LD_VAR 0 3
13413: PPUSH
13414: LD_INT 1
13416: PPUSH
13417: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13421: LD_INT 15
13423: PPUSH
13424: LD_VAR 0 3
13428: PPUSH
13429: LD_INT 1
13431: PPUSH
13432: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13436: LD_INT 7
13438: PPUSH
13439: LD_VAR 0 3
13443: PPUSH
13444: LD_INT 1
13446: PPUSH
13447: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13451: LD_INT 12
13453: PPUSH
13454: LD_VAR 0 3
13458: PPUSH
13459: LD_INT 1
13461: PPUSH
13462: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
13466: LD_INT 17
13468: PPUSH
13469: LD_VAR 0 3
13473: PPUSH
13474: LD_INT 1
13476: PPUSH
13477: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13481: LD_INT 18
13483: PPUSH
13484: LD_VAR 0 3
13488: PPUSH
13489: LD_INT 1
13491: PPUSH
13492: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13496: LD_INT 60
13498: PPUSH
13499: LD_VAR 0 3
13503: PPUSH
13504: LD_INT 1
13506: PPUSH
13507: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13511: LD_INT 32
13513: PPUSH
13514: LD_VAR 0 3
13518: PPUSH
13519: LD_INT 1
13521: PPUSH
13522: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13526: LD_INT 9
13528: PPUSH
13529: LD_VAR 0 3
13533: PPUSH
13534: LD_INT 1
13536: PPUSH
13537: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13541: LD_INT 57
13543: PPUSH
13544: LD_VAR 0 3
13548: PPUSH
13549: LD_INT 1
13551: PPUSH
13552: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13556: LD_INT 30
13558: PPUSH
13559: LD_VAR 0 3
13563: PPUSH
13564: LD_INT 1
13566: PPUSH
13567: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13571: LD_INT 37
13573: PPUSH
13574: LD_VAR 0 3
13578: PPUSH
13579: LD_INT 1
13581: PPUSH
13582: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13586: LD_INT 63
13588: PPUSH
13589: LD_VAR 0 3
13593: PPUSH
13594: LD_INT 1
13596: PPUSH
13597: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13601: LD_INT 3
13603: PPUSH
13604: LD_VAR 0 3
13608: PPUSH
13609: LD_INT 1
13611: PPUSH
13612: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13616: LD_INT 4
13618: PPUSH
13619: LD_VAR 0 3
13623: PPUSH
13624: LD_INT 1
13626: PPUSH
13627: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13631: LD_INT 5
13633: PPUSH
13634: LD_VAR 0 3
13638: PPUSH
13639: LD_INT 1
13641: PPUSH
13642: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13646: LD_INT 66
13648: PPUSH
13649: LD_VAR 0 3
13653: PPUSH
13654: LD_INT 1
13656: PPUSH
13657: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13661: LD_INT 21
13663: PPUSH
13664: LD_VAR 0 3
13668: PPUSH
13669: LD_INT 1
13671: PPUSH
13672: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13676: LD_INT 22
13678: PPUSH
13679: LD_VAR 0 3
13683: PPUSH
13684: LD_INT 1
13686: PPUSH
13687: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13691: LD_INT 19
13693: PPUSH
13694: LD_VAR 0 3
13698: PPUSH
13699: LD_INT 1
13701: PPUSH
13702: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13706: LD_INT 54
13708: PPUSH
13709: LD_VAR 0 3
13713: PPUSH
13714: LD_INT 1
13716: PPUSH
13717: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13721: LD_INT 55
13723: PPUSH
13724: LD_VAR 0 3
13728: PPUSH
13729: LD_INT 1
13731: PPUSH
13732: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13736: LD_INT 0
13738: PPUSH
13739: LD_VAR 0 3
13743: PPUSH
13744: LD_INT 1
13746: PPUSH
13747: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
13751: LD_INT 1
13753: PPUSH
13754: LD_VAR 0 3
13758: PPUSH
13759: LD_INT 1
13761: PPUSH
13762: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13766: LD_INT 2
13768: PPUSH
13769: LD_VAR 0 3
13773: PPUSH
13774: LD_INT 1
13776: PPUSH
13777: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
13781: LD_INT 3
13783: PPUSH
13784: LD_VAR 0 3
13788: PPUSH
13789: LD_INT 1
13791: PPUSH
13792: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13796: LD_INT 4
13798: PPUSH
13799: LD_VAR 0 3
13803: PPUSH
13804: LD_INT 1
13806: PPUSH
13807: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
13811: LD_INT 5
13813: PPUSH
13814: LD_VAR 0 3
13818: PPUSH
13819: LD_INT 1
13821: PPUSH
13822: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13826: LD_INT 6
13828: PPUSH
13829: LD_VAR 0 3
13833: PPUSH
13834: LD_INT 1
13836: PPUSH
13837: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13841: LD_INT 7
13843: PPUSH
13844: LD_VAR 0 3
13848: PPUSH
13849: LD_INT 1
13851: PPUSH
13852: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13856: LD_INT 8
13858: PPUSH
13859: LD_VAR 0 3
13863: PPUSH
13864: LD_INT 1
13866: PPUSH
13867: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13871: LD_INT 10
13873: PPUSH
13874: LD_VAR 0 3
13878: PPUSH
13879: LD_INT 1
13881: PPUSH
13882: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
13886: LD_INT 11
13888: PPUSH
13889: LD_VAR 0 3
13893: PPUSH
13894: LD_INT 1
13896: PPUSH
13897: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
13901: LD_INT 12
13903: PPUSH
13904: LD_VAR 0 3
13908: PPUSH
13909: LD_INT 1
13911: PPUSH
13912: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
13916: LD_INT 13
13918: PPUSH
13919: LD_VAR 0 3
13923: PPUSH
13924: LD_INT 1
13926: PPUSH
13927: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
13931: LD_INT 14
13933: PPUSH
13934: LD_VAR 0 3
13938: PPUSH
13939: LD_INT 1
13941: PPUSH
13942: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13946: LD_INT 15
13948: PPUSH
13949: LD_VAR 0 3
13953: PPUSH
13954: LD_INT 1
13956: PPUSH
13957: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13961: LD_INT 16
13963: PPUSH
13964: LD_VAR 0 3
13968: PPUSH
13969: LD_INT 1
13971: PPUSH
13972: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13976: LD_INT 17
13978: PPUSH
13979: LD_VAR 0 3
13983: PPUSH
13984: LD_INT 1
13986: PPUSH
13987: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
13991: LD_INT 18
13993: PPUSH
13994: LD_VAR 0 3
13998: PPUSH
13999: LD_INT 1
14001: PPUSH
14002: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
14006: LD_INT 19
14008: PPUSH
14009: LD_VAR 0 3
14013: PPUSH
14014: LD_INT 1
14016: PPUSH
14017: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
14021: LD_INT 20
14023: PPUSH
14024: LD_VAR 0 3
14028: PPUSH
14029: LD_INT 1
14031: PPUSH
14032: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
14036: LD_INT 21
14038: PPUSH
14039: LD_VAR 0 3
14043: PPUSH
14044: LD_INT 1
14046: PPUSH
14047: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
14051: LD_INT 23
14053: PPUSH
14054: LD_VAR 0 3
14058: PPUSH
14059: LD_INT 1
14061: PPUSH
14062: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
14066: LD_INT 26
14068: PPUSH
14069: LD_VAR 0 3
14073: PPUSH
14074: LD_INT 1
14076: PPUSH
14077: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
14081: LD_INT 27
14083: PPUSH
14084: LD_VAR 0 3
14088: PPUSH
14089: LD_INT 1
14091: PPUSH
14092: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
14096: LD_INT 28
14098: PPUSH
14099: LD_VAR 0 3
14103: PPUSH
14104: LD_INT 1
14106: PPUSH
14107: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14111: LD_INT 29
14113: PPUSH
14114: LD_VAR 0 3
14118: PPUSH
14119: LD_INT 1
14121: PPUSH
14122: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
14126: LD_INT 30
14128: PPUSH
14129: LD_VAR 0 3
14133: PPUSH
14134: LD_INT 1
14136: PPUSH
14137: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14141: LD_INT 31
14143: PPUSH
14144: LD_VAR 0 3
14148: PPUSH
14149: LD_INT 1
14151: PPUSH
14152: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
14156: LD_INT 32
14158: PPUSH
14159: LD_VAR 0 3
14163: PPUSH
14164: LD_INT 1
14166: PPUSH
14167: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
14171: LD_INT 33
14173: PPUSH
14174: LD_VAR 0 3
14178: PPUSH
14179: LD_INT 1
14181: PPUSH
14182: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
14186: LD_INT 36
14188: PPUSH
14189: LD_VAR 0 3
14193: PPUSH
14194: LD_INT 1
14196: PPUSH
14197: CALL_OW 324
// end ; 6 :
14201: GO 15211
14203: LD_INT 6
14205: DOUBLE
14206: EQUAL
14207: IFTRUE 14211
14209: GO 15136
14211: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14212: LD_INT 35
14214: PPUSH
14215: LD_VAR 0 3
14219: PPUSH
14220: LD_INT 1
14222: PPUSH
14223: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14227: LD_INT 45
14229: PPUSH
14230: LD_VAR 0 3
14234: PPUSH
14235: LD_INT 1
14237: PPUSH
14238: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14242: LD_INT 46
14244: PPUSH
14245: LD_VAR 0 3
14249: PPUSH
14250: LD_INT 1
14252: PPUSH
14253: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14257: LD_INT 47
14259: PPUSH
14260: LD_VAR 0 3
14264: PPUSH
14265: LD_INT 1
14267: PPUSH
14268: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14272: LD_INT 1
14274: PPUSH
14275: LD_VAR 0 3
14279: PPUSH
14280: LD_INT 1
14282: PPUSH
14283: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14287: LD_INT 2
14289: PPUSH
14290: LD_VAR 0 3
14294: PPUSH
14295: LD_INT 1
14297: PPUSH
14298: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14302: LD_INT 11
14304: PPUSH
14305: LD_VAR 0 3
14309: PPUSH
14310: LD_INT 1
14312: PPUSH
14313: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
14317: LD_INT 20
14319: PPUSH
14320: LD_VAR 0 3
14324: PPUSH
14325: LD_INT 1
14327: PPUSH
14328: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14332: LD_INT 48
14334: PPUSH
14335: LD_VAR 0 3
14339: PPUSH
14340: LD_INT 1
14342: PPUSH
14343: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
14347: LD_INT 49
14349: PPUSH
14350: LD_VAR 0 3
14354: PPUSH
14355: LD_INT 1
14357: PPUSH
14358: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
14362: LD_INT 50
14364: PPUSH
14365: LD_VAR 0 3
14369: PPUSH
14370: LD_INT 1
14372: PPUSH
14373: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14377: LD_INT 69
14379: PPUSH
14380: LD_VAR 0 3
14384: PPUSH
14385: LD_INT 1
14387: PPUSH
14388: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14392: LD_INT 39
14394: PPUSH
14395: LD_VAR 0 3
14399: PPUSH
14400: LD_INT 1
14402: PPUSH
14403: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
14407: LD_INT 34
14409: PPUSH
14410: LD_VAR 0 3
14414: PPUSH
14415: LD_INT 1
14417: PPUSH
14418: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
14422: LD_INT 42
14424: PPUSH
14425: LD_VAR 0 3
14429: PPUSH
14430: LD_INT 1
14432: PPUSH
14433: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
14437: LD_INT 44
14439: PPUSH
14440: LD_VAR 0 3
14444: PPUSH
14445: LD_INT 1
14447: PPUSH
14448: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
14452: LD_INT 41
14454: PPUSH
14455: LD_VAR 0 3
14459: PPUSH
14460: LD_INT 1
14462: PPUSH
14463: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
14467: LD_INT 13
14469: PPUSH
14470: LD_VAR 0 3
14474: PPUSH
14475: LD_INT 1
14477: PPUSH
14478: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
14482: LD_INT 40
14484: PPUSH
14485: LD_VAR 0 3
14489: PPUSH
14490: LD_INT 1
14492: PPUSH
14493: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14497: LD_INT 43
14499: PPUSH
14500: LD_VAR 0 3
14504: PPUSH
14505: LD_INT 1
14507: PPUSH
14508: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
14512: LD_INT 70
14514: PPUSH
14515: LD_VAR 0 3
14519: PPUSH
14520: LD_INT 1
14522: PPUSH
14523: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
14527: LD_INT 23
14529: PPUSH
14530: LD_VAR 0 3
14534: PPUSH
14535: LD_INT 1
14537: PPUSH
14538: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14542: LD_INT 51
14544: PPUSH
14545: LD_VAR 0 3
14549: PPUSH
14550: LD_INT 1
14552: PPUSH
14553: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
14557: LD_INT 52
14559: PPUSH
14560: LD_VAR 0 3
14564: PPUSH
14565: LD_INT 1
14567: PPUSH
14568: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14572: LD_INT 6
14574: PPUSH
14575: LD_VAR 0 3
14579: PPUSH
14580: LD_INT 1
14582: PPUSH
14583: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
14587: LD_INT 15
14589: PPUSH
14590: LD_VAR 0 3
14594: PPUSH
14595: LD_INT 1
14597: PPUSH
14598: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
14602: LD_INT 7
14604: PPUSH
14605: LD_VAR 0 3
14609: PPUSH
14610: LD_INT 1
14612: PPUSH
14613: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
14617: LD_INT 12
14619: PPUSH
14620: LD_VAR 0 3
14624: PPUSH
14625: LD_INT 1
14627: PPUSH
14628: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
14632: LD_INT 10
14634: PPUSH
14635: LD_VAR 0 3
14639: PPUSH
14640: LD_INT 1
14642: PPUSH
14643: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
14647: LD_INT 17
14649: PPUSH
14650: LD_VAR 0 3
14654: PPUSH
14655: LD_INT 1
14657: PPUSH
14658: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
14662: LD_INT 18
14664: PPUSH
14665: LD_VAR 0 3
14669: PPUSH
14670: LD_INT 1
14672: PPUSH
14673: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
14677: LD_INT 60
14679: PPUSH
14680: LD_VAR 0 3
14684: PPUSH
14685: LD_INT 1
14687: PPUSH
14688: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
14692: LD_INT 61
14694: PPUSH
14695: LD_VAR 0 3
14699: PPUSH
14700: LD_INT 1
14702: PPUSH
14703: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
14707: LD_INT 32
14709: PPUSH
14710: LD_VAR 0 3
14714: PPUSH
14715: LD_INT 1
14717: PPUSH
14718: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
14722: LD_INT 27
14724: PPUSH
14725: LD_VAR 0 3
14729: PPUSH
14730: LD_INT 1
14732: PPUSH
14733: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
14737: LD_INT 36
14739: PPUSH
14740: LD_VAR 0 3
14744: PPUSH
14745: LD_INT 1
14747: PPUSH
14748: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
14752: LD_INT 33
14754: PPUSH
14755: LD_VAR 0 3
14759: PPUSH
14760: LD_INT 1
14762: PPUSH
14763: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
14767: LD_INT 9
14769: PPUSH
14770: LD_VAR 0 3
14774: PPUSH
14775: LD_INT 1
14777: PPUSH
14778: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
14782: LD_INT 38
14784: PPUSH
14785: LD_VAR 0 3
14789: PPUSH
14790: LD_INT 1
14792: PPUSH
14793: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
14797: LD_INT 57
14799: PPUSH
14800: LD_VAR 0 3
14804: PPUSH
14805: LD_INT 1
14807: PPUSH
14808: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
14812: LD_INT 58
14814: PPUSH
14815: LD_VAR 0 3
14819: PPUSH
14820: LD_INT 1
14822: PPUSH
14823: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
14827: LD_INT 28
14829: PPUSH
14830: LD_VAR 0 3
14834: PPUSH
14835: LD_INT 1
14837: PPUSH
14838: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
14842: LD_INT 29
14844: PPUSH
14845: LD_VAR 0 3
14849: PPUSH
14850: LD_INT 1
14852: PPUSH
14853: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
14857: LD_INT 30
14859: PPUSH
14860: LD_VAR 0 3
14864: PPUSH
14865: LD_INT 1
14867: PPUSH
14868: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
14872: LD_INT 37
14874: PPUSH
14875: LD_VAR 0 3
14879: PPUSH
14880: LD_INT 1
14882: PPUSH
14883: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
14887: LD_INT 63
14889: PPUSH
14890: LD_VAR 0 3
14894: PPUSH
14895: LD_INT 1
14897: PPUSH
14898: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
14902: LD_INT 64
14904: PPUSH
14905: LD_VAR 0 3
14909: PPUSH
14910: LD_INT 1
14912: PPUSH
14913: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
14917: LD_INT 3
14919: PPUSH
14920: LD_VAR 0 3
14924: PPUSH
14925: LD_INT 1
14927: PPUSH
14928: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
14932: LD_INT 4
14934: PPUSH
14935: LD_VAR 0 3
14939: PPUSH
14940: LD_INT 1
14942: PPUSH
14943: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14947: LD_INT 5
14949: PPUSH
14950: LD_VAR 0 3
14954: PPUSH
14955: LD_INT 1
14957: PPUSH
14958: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
14962: LD_INT 8
14964: PPUSH
14965: LD_VAR 0 3
14969: PPUSH
14970: LD_INT 1
14972: PPUSH
14973: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14977: LD_INT 66
14979: PPUSH
14980: LD_VAR 0 3
14984: PPUSH
14985: LD_INT 1
14987: PPUSH
14988: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
14992: LD_INT 67
14994: PPUSH
14995: LD_VAR 0 3
14999: PPUSH
15000: LD_INT 1
15002: PPUSH
15003: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
15007: LD_INT 21
15009: PPUSH
15010: LD_VAR 0 3
15014: PPUSH
15015: LD_INT 1
15017: PPUSH
15018: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
15022: LD_INT 22
15024: PPUSH
15025: LD_VAR 0 3
15029: PPUSH
15030: LD_INT 1
15032: PPUSH
15033: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
15037: LD_INT 19
15039: PPUSH
15040: LD_VAR 0 3
15044: PPUSH
15045: LD_INT 1
15047: PPUSH
15048: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
15052: LD_INT 26
15054: PPUSH
15055: LD_VAR 0 3
15059: PPUSH
15060: LD_INT 1
15062: PPUSH
15063: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
15067: LD_INT 54
15069: PPUSH
15070: LD_VAR 0 3
15074: PPUSH
15075: LD_INT 1
15077: PPUSH
15078: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
15082: LD_INT 55
15084: PPUSH
15085: LD_VAR 0 3
15089: PPUSH
15090: LD_INT 1
15092: PPUSH
15093: CALL_OW 322
// for i = 0 to 39 do
15097: LD_ADDR_VAR 0 4
15101: PUSH
15102: DOUBLE
15103: LD_INT 0
15105: DEC
15106: ST_TO_ADDR
15107: LD_INT 39
15109: PUSH
15110: FOR_TO
15111: IFFALSE 15132
// SetRestrict ( i , side , true ) ;
15113: LD_VAR 0 4
15117: PPUSH
15118: LD_VAR 0 3
15122: PPUSH
15123: LD_INT 1
15125: PPUSH
15126: CALL_OW 324
15130: GO 15110
15132: POP
15133: POP
// end ; else
15134: GO 15211
15136: POP
// begin for i = 1 to 73 do
15137: LD_ADDR_VAR 0 4
15141: PUSH
15142: DOUBLE
15143: LD_INT 1
15145: DEC
15146: ST_TO_ADDR
15147: LD_INT 73
15149: PUSH
15150: FOR_TO
15151: IFFALSE 15172
// SetTech ( i , side , state_enabled ) ;
15153: LD_VAR 0 4
15157: PPUSH
15158: LD_VAR 0 3
15162: PPUSH
15163: LD_INT 1
15165: PPUSH
15166: CALL_OW 322
15170: GO 15150
15172: POP
15173: POP
// for i = 0 to 39 do
15174: LD_ADDR_VAR 0 4
15178: PUSH
15179: DOUBLE
15180: LD_INT 0
15182: DEC
15183: ST_TO_ADDR
15184: LD_INT 39
15186: PUSH
15187: FOR_TO
15188: IFFALSE 15209
// SetRestrict ( i , side , true ) ;
15190: LD_VAR 0 4
15194: PPUSH
15195: LD_VAR 0 3
15199: PPUSH
15200: LD_INT 1
15202: PPUSH
15203: CALL_OW 324
15207: GO 15187
15209: POP
15210: POP
// end ; end ; end ;
15211: GO 11216
15213: POP
15214: POP
// end ; end_of_file
15215: LD_VAR 0 2
15219: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
15220: LD_INT 0
15222: PPUSH
15223: PPUSH
// enable ( 98 ) ;
15224: LD_INT 98
15226: ENABLE_MARKED
// GameEnded = false ;
15227: LD_ADDR_LOC 24
15231: PUSH
15232: LD_INT 0
15234: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
15235: LD_ADDR_LOC 23
15239: PUSH
15240: LD_INT 0
15242: PUSH
15243: LD_INT 0
15245: PUSH
15246: LD_INT 0
15248: PUSH
15249: LD_INT 0
15251: PUSH
15252: LD_INT 0
15254: PUSH
15255: LD_INT 0
15257: PUSH
15258: LD_INT 0
15260: PUSH
15261: LD_INT 0
15263: PUSH
15264: EMPTY
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: ST_TO_ADDR
// unfoged = false ;
15274: LD_ADDR_LOC 25
15278: PUSH
15279: LD_INT 0
15281: ST_TO_ADDR
// defeated_specs := [ ] ;
15282: LD_ADDR_LOC 26
15286: PUSH
15287: EMPTY
15288: ST_TO_ADDR
// for i = 1 to side_positions do
15289: LD_ADDR_VAR 0 2
15293: PUSH
15294: DOUBLE
15295: LD_INT 1
15297: DEC
15298: ST_TO_ADDR
15299: LD_EXP 21
15303: PUSH
15304: FOR_TO
15305: IFFALSE 15345
// if not side_positions [ i ] then
15307: LD_EXP 21
15311: PUSH
15312: LD_VAR 0 2
15316: ARRAY
15317: NOT
15318: IFFALSE 15343
// defeated = replace ( defeated , i , true ) ;
15320: LD_ADDR_LOC 23
15324: PUSH
15325: LD_LOC 23
15329: PPUSH
15330: LD_VAR 0 2
15334: PPUSH
15335: LD_INT 1
15337: PPUSH
15338: CALL_OW 1
15342: ST_TO_ADDR
15343: GO 15304
15345: POP
15346: POP
// end ;
15347: LD_VAR 0 1
15351: RET
// function CanWinLoose ; begin
15352: LD_INT 0
15354: PPUSH
// Result := true ;
15355: LD_ADDR_VAR 0 1
15359: PUSH
15360: LD_INT 1
15362: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
15363: CALL_OW 518
15367: PUSH
15368: CALL_OW 519
15372: PUSH
15373: LD_INT 0
15375: GREATER
15376: AND
15377: IFFALSE 15387
// Result := false ;
15379: LD_ADDR_VAR 0 1
15383: PUSH
15384: LD_INT 0
15386: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
15387: CALL_OW 531
15391: PUSH
15392: CALL_OW 519
15396: PUSH
15397: LD_INT 1
15399: GREATER
15400: AND
15401: IFFALSE 15411
// Result := false ;
15403: LD_ADDR_VAR 0 1
15407: PUSH
15408: LD_INT 0
15410: ST_TO_ADDR
// end ;
15411: LD_VAR 0 1
15415: RET
// export function HasPower ( i ) ; var k , h ; begin
15416: LD_INT 0
15418: PPUSH
15419: PPUSH
15420: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
15421: LD_VAR 0 1
15425: PPUSH
15426: CALL_OW 108
15430: NOT
15431: PUSH
15432: LD_EXP 20
15436: PUSH
15437: LD_VAR 0 1
15441: ARRAY
15442: NOT
15443: AND
15444: PUSH
15445: LD_OWVAR 4
15449: AND
15450: IFFALSE 15462
// begin result = false ;
15452: LD_ADDR_VAR 0 2
15456: PUSH
15457: LD_INT 0
15459: ST_TO_ADDR
// end else
15460: GO 15757
// case def_win_rules of 0 :
15462: LD_EXP 15
15466: PUSH
15467: LD_INT 0
15469: DOUBLE
15470: EQUAL
15471: IFTRUE 15475
15473: GO 15638
15475: POP
// if def_people_respawning then
15476: LD_EXP 51
15480: IFFALSE 15571
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
15482: LD_ADDR_VAR 0 2
15486: PUSH
15487: LD_INT 22
15489: PUSH
15490: LD_VAR 0 1
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PUSH
15499: LD_INT 2
15501: PUSH
15502: LD_INT 21
15504: PUSH
15505: LD_INT 1
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: PUSH
15512: LD_INT 33
15514: PUSH
15515: LD_INT 3
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: PUSH
15522: LD_INT 33
15524: PUSH
15525: LD_INT 5
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PUSH
15532: LD_INT 30
15534: PUSH
15535: LD_INT 0
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PUSH
15542: LD_INT 30
15544: PUSH
15545: LD_INT 1
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PPUSH
15564: CALL_OW 69
15568: ST_TO_ADDR
15569: GO 15636
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
15571: LD_ADDR_VAR 0 2
15575: PUSH
15576: LD_INT 22
15578: PUSH
15579: LD_VAR 0 1
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: PUSH
15588: LD_INT 2
15590: PUSH
15591: LD_INT 21
15593: PUSH
15594: LD_INT 1
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: PUSH
15601: LD_INT 33
15603: PUSH
15604: LD_INT 3
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: PUSH
15611: LD_INT 33
15613: PUSH
15614: LD_INT 5
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: PUSH
15621: EMPTY
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PPUSH
15631: CALL_OW 69
15635: ST_TO_ADDR
15636: GO 15757
15638: LD_INT 1
15640: DOUBLE
15641: EQUAL
15642: IFTRUE 15646
15644: GO 15685
15646: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
15647: LD_ADDR_VAR 0 2
15651: PUSH
15652: LD_INT 22
15654: PUSH
15655: LD_VAR 0 1
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: PUSH
15664: LD_INT 21
15666: PUSH
15667: LD_INT 1
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PUSH
15674: EMPTY
15675: LIST
15676: LIST
15677: PPUSH
15678: CALL_OW 69
15682: ST_TO_ADDR
15683: GO 15757
15685: LD_INT 2
15687: DOUBLE
15688: EQUAL
15689: IFTRUE 15693
15691: GO 15756
15693: POP
// begin h = false ;
15694: LD_ADDR_VAR 0 4
15698: PUSH
15699: LD_INT 0
15701: ST_TO_ADDR
// for k in heroes [ i ] do
15702: LD_ADDR_VAR 0 3
15706: PUSH
15707: LD_EXP 31
15711: PUSH
15712: LD_VAR 0 1
15716: ARRAY
15717: PUSH
15718: FOR_IN
15719: IFFALSE 15742
// if IsLive ( k ) then
15721: LD_VAR 0 3
15725: PPUSH
15726: CALL_OW 300
15730: IFFALSE 15740
// h = true ;
15732: LD_ADDR_VAR 0 4
15736: PUSH
15737: LD_INT 1
15739: ST_TO_ADDR
15740: GO 15718
15742: POP
15743: POP
// Result := h ;
15744: LD_ADDR_VAR 0 2
15748: PUSH
15749: LD_VAR 0 4
15753: ST_TO_ADDR
// end ; end ;
15754: GO 15757
15756: POP
// end ;
15757: LD_VAR 0 2
15761: RET
// function AlliedSides ( i , j ) ; begin
15762: LD_INT 0
15764: PPUSH
// Result := false ;
15765: LD_ADDR_VAR 0 3
15769: PUSH
15770: LD_INT 0
15772: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
15773: LD_VAR 0 1
15777: PPUSH
15778: LD_VAR 0 2
15782: PPUSH
15783: CALL_OW 81
15787: PUSH
15788: LD_INT 1
15790: EQUAL
15791: PUSH
15792: LD_VAR 0 2
15796: PPUSH
15797: LD_VAR 0 1
15801: PPUSH
15802: CALL_OW 81
15806: PUSH
15807: LD_INT 1
15809: EQUAL
15810: AND
15811: PUSH
15812: LD_VAR 0 1
15816: PPUSH
15817: CALL_OW 83
15821: AND
15822: PUSH
15823: LD_VAR 0 2
15827: PPUSH
15828: CALL_OW 83
15832: AND
15833: IFFALSE 15843
// Result := true ;
15835: LD_ADDR_VAR 0 3
15839: PUSH
15840: LD_INT 1
15842: ST_TO_ADDR
// end ;
15843: LD_VAR 0 3
15847: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
15848: CALL 15352 0 0
15852: PUSH
15853: LD_LOC 24
15857: NOT
15858: AND
15859: IFFALSE 15875
15861: GO 15863
15863: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
15864: LD_ADDR_EXP 57
15868: PUSH
15869: LD_STRING #Player-Ended
15871: PUSH
15872: EMPTY
15873: LIST
15874: ST_TO_ADDR
15875: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
15876: CALL 15352 0 0
15880: PUSH
15881: LD_LOC 24
15885: AND
15886: IFFALSE 15895
15888: GO 15890
15890: DISABLE
// YouLostInMultiplayer ;
15891: CALL_OW 107
15895: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
15896: CALL 15352 0 0
15900: NOT
15901: PUSH
15902: CALL_OW 531
15906: NOT
15907: AND
15908: IFFALSE 15924
15910: GO 15912
15912: DISABLE
// WaitServerStrings = [ #server-wait ] ;
15913: LD_ADDR_EXP 57
15917: PUSH
15918: LD_STRING #server-wait
15920: PUSH
15921: EMPTY
15922: LIST
15923: ST_TO_ADDR
15924: END
// every 100 trigger IAmSpec do
15925: CALL_OW 531
15929: IFFALSE 15945
15931: GO 15933
15933: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
15934: LD_ADDR_EXP 57
15938: PUSH
15939: LD_STRING #Player-IAmSpec
15941: PUSH
15942: EMPTY
15943: LIST
15944: ST_TO_ADDR
15945: END
// every 100 trigger GameEnded and IAmSpec do
15946: LD_LOC 24
15950: PUSH
15951: CALL_OW 531
15955: AND
15956: IFFALSE 15965
15958: GO 15960
15960: DISABLE
// YouLostInMultiplayer ;
15961: CALL_OW 107
15965: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
15966: CALL 15352 0 0
15970: PUSH
15971: LD_LOC 24
15975: NOT
15976: AND
15977: IFFALSE 15993
15979: GO 15981
15981: DISABLE
// WaitServerStrings = [ $player-win ] ;
15982: LD_ADDR_EXP 57
15986: PUSH
15987: LD_STRING $player-win
15989: PUSH
15990: EMPTY
15991: LIST
15992: ST_TO_ADDR
15993: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
15994: CALL 15352 0 0
15998: PUSH
15999: LD_LOC 24
16003: AND
16004: IFFALSE 16028
16006: GO 16008
16008: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
16009: LD_EXP 22
16013: PUSH
16014: LD_OWVAR 7
16018: ARRAY
16019: PPUSH
16020: CALL 10854 0 1
// YouWinInMultiplayer ;
16024: CALL_OW 106
// end ;
16028: END
// every 100 trigger isEditor marked 401 do
16029: LD_OWVAR 84
16033: IFFALSE 16049
16035: GO 16037
16037: DISABLE
// Debug_Strings = [ You won ] ;
16038: LD_ADDR_OWVAR 48
16042: PUSH
16043: LD_STRING You won
16045: PUSH
16046: EMPTY
16047: LIST
16048: ST_TO_ADDR
16049: END
// every 100 trigger isEditor marked 400 do
16050: LD_OWVAR 84
16054: IFFALSE 16070
16056: GO 16058
16058: DISABLE
// Debug_Strings = [ You loss ] ;
16059: LD_ADDR_OWVAR 48
16063: PUSH
16064: LD_STRING You loss
16066: PUSH
16067: EMPTY
16068: LIST
16069: ST_TO_ADDR
16070: END
// every 100 marked 98 do var i , un ;
16071: GO 16073
16073: DISABLE
16074: LD_INT 0
16076: PPUSH
16077: PPUSH
// begin for i = 1 to side_positions do
16078: LD_ADDR_VAR 0 1
16082: PUSH
16083: DOUBLE
16084: LD_INT 1
16086: DEC
16087: ST_TO_ADDR
16088: LD_EXP 21
16092: PUSH
16093: FOR_TO
16094: IFFALSE 16181
// begin if side_positions [ i ] then
16096: LD_EXP 21
16100: PUSH
16101: LD_VAR 0 1
16105: ARRAY
16106: IFFALSE 16179
// if not HasPower ( i ) and not defeated [ i ] then
16108: LD_VAR 0 1
16112: PPUSH
16113: CALL 15416 0 1
16117: NOT
16118: PUSH
16119: LD_LOC 23
16123: PUSH
16124: LD_VAR 0 1
16128: ARRAY
16129: NOT
16130: AND
16131: IFFALSE 16179
// begin defeated = replace ( defeated , i , true ) ;
16133: LD_ADDR_LOC 23
16137: PUSH
16138: LD_LOC 23
16142: PPUSH
16143: LD_VAR 0 1
16147: PPUSH
16148: LD_INT 1
16150: PPUSH
16151: CALL_OW 1
16155: ST_TO_ADDR
// if i = mp_player_side then
16156: LD_VAR 0 1
16160: PUSH
16161: LD_OWVAR 7
16165: EQUAL
16166: IFFALSE 16179
// begin Multiplayer_Loose_Message ;
16168: CALL_OW 521
// SetPlayerSpectator ( ) ;
16172: CALL_OW 572
// enable ( 400 ) ;
16176: LD_INT 400
16178: ENABLE_MARKED
// end ; end ; end ;
16179: GO 16093
16181: POP
16182: POP
// DidGameEnd ;
16183: CALL 16198 0 0
// if not GameEnded then
16187: LD_LOC 24
16191: NOT
16192: IFFALSE 16195
// enable ;
16194: ENABLE
// end ;
16195: PPOPN 2
16197: END
// function DidGameEnd ; var i , k , enemy ; begin
16198: LD_INT 0
16200: PPUSH
16201: PPUSH
16202: PPUSH
16203: PPUSH
// enemy = [ ] ;
16204: LD_ADDR_VAR 0 4
16208: PUSH
16209: EMPTY
16210: ST_TO_ADDR
// for i = 1 to side_positions do
16211: LD_ADDR_VAR 0 2
16215: PUSH
16216: DOUBLE
16217: LD_INT 1
16219: DEC
16220: ST_TO_ADDR
16221: LD_EXP 21
16225: PUSH
16226: FOR_TO
16227: IFFALSE 16321
// if not defeated [ i ] then
16229: LD_LOC 23
16233: PUSH
16234: LD_VAR 0 2
16238: ARRAY
16239: NOT
16240: IFFALSE 16319
// for k = 1 to side_positions do
16242: LD_ADDR_VAR 0 3
16246: PUSH
16247: DOUBLE
16248: LD_INT 1
16250: DEC
16251: ST_TO_ADDR
16252: LD_EXP 21
16256: PUSH
16257: FOR_TO
16258: IFFALSE 16317
// if not defeated [ k ] then
16260: LD_LOC 23
16264: PUSH
16265: LD_VAR 0 3
16269: ARRAY
16270: NOT
16271: IFFALSE 16315
// if not AlliedSides ( i , k ) then
16273: LD_VAR 0 2
16277: PPUSH
16278: LD_VAR 0 3
16282: PPUSH
16283: CALL 15762 0 2
16287: NOT
16288: IFFALSE 16315
// enemy = enemy ^ [ i , k ] ;
16290: LD_ADDR_VAR 0 4
16294: PUSH
16295: LD_VAR 0 4
16299: PUSH
16300: LD_VAR 0 2
16304: PUSH
16305: LD_VAR 0 3
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: ADD
16314: ST_TO_ADDR
16315: GO 16257
16317: POP
16318: POP
16319: GO 16226
16321: POP
16322: POP
// if not enemy then
16323: LD_VAR 0 4
16327: NOT
16328: IFFALSE 16354
// begin GameEnded = true ;
16330: LD_ADDR_LOC 24
16334: PUSH
16335: LD_INT 1
16337: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
16338: LD_LOC 23
16342: PUSH
16343: LD_OWVAR 7
16347: ARRAY
16348: NOT
16349: IFFALSE 16354
// enable ( 401 ) ;
16351: LD_INT 401
16353: ENABLE_MARKED
// end ; end ;
16354: LD_VAR 0 1
16358: RET
// function unfog ; var k , friends ; begin
16359: LD_INT 0
16361: PPUSH
16362: PPUSH
16363: PPUSH
// for k = 1 to side_positions do
16364: LD_ADDR_VAR 0 2
16368: PUSH
16369: DOUBLE
16370: LD_INT 1
16372: DEC
16373: ST_TO_ADDR
16374: LD_EXP 21
16378: PUSH
16379: FOR_TO
16380: IFFALSE 16436
// if not defeated [ k ] then
16382: LD_LOC 23
16386: PUSH
16387: LD_VAR 0 2
16391: ARRAY
16392: NOT
16393: IFFALSE 16434
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
16395: LD_OWVAR 7
16399: PPUSH
16400: LD_VAR 0 2
16404: PPUSH
16405: CALL_OW 81
16409: PUSH
16410: LD_INT 1
16412: PUSH
16413: EMPTY
16414: LIST
16415: IN
16416: IFFALSE 16434
// friends = friends ^ k ;
16418: LD_ADDR_VAR 0 3
16422: PUSH
16423: LD_VAR 0 3
16427: PUSH
16428: LD_VAR 0 2
16432: ADD
16433: ST_TO_ADDR
16434: GO 16379
16436: POP
16437: POP
// if not friends then
16438: LD_VAR 0 3
16442: NOT
16443: IFFALSE 16457
// begin SetPlayerSpectator ( ) ;
16445: CALL_OW 572
// unfoged = true ;
16449: LD_ADDR_LOC 25
16453: PUSH
16454: LD_INT 1
16456: ST_TO_ADDR
// end ; end ;
16457: LD_VAR 0 1
16461: RET
// export function MakeGameEnd ; begin
16462: LD_INT 0
16464: PPUSH
// SetPlayerSpectator ( ) ;
16465: CALL_OW 572
// unfoged = true ;
16469: LD_ADDR_LOC 25
16473: PUSH
16474: LD_INT 1
16476: ST_TO_ADDR
// wait ( 0 0$5 ) ;
16477: LD_INT 175
16479: PPUSH
16480: CALL_OW 67
// GameEnded = true ;
16484: LD_ADDR_LOC 24
16488: PUSH
16489: LD_INT 1
16491: ST_TO_ADDR
// end ;
16492: LD_VAR 0 1
16496: RET
// export function GetGameEnded ; begin
16497: LD_INT 0
16499: PPUSH
// result = GameEnded ;
16500: LD_ADDR_VAR 0 1
16504: PUSH
16505: LD_LOC 24
16509: ST_TO_ADDR
// end ; end_of_file
16510: LD_VAR 0 1
16514: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
16515: LD_INT 0
16517: PPUSH
16518: PPUSH
16519: PPUSH
16520: PPUSH
16521: PPUSH
16522: PPUSH
16523: PPUSH
16524: PPUSH
16525: PPUSH
// for i := 1 to 8 do
16526: LD_ADDR_VAR 0 2
16530: PUSH
16531: DOUBLE
16532: LD_INT 1
16534: DEC
16535: ST_TO_ADDR
16536: LD_INT 8
16538: PUSH
16539: FOR_TO
16540: IFFALSE 16924
// begin if Side_Positions [ i ] then
16542: LD_EXP 21
16546: PUSH
16547: LD_VAR 0 2
16551: ARRAY
16552: IFFALSE 16922
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
16554: LD_ADDR_VAR 0 7
16558: PUSH
16559: LD_INT 22
16561: PUSH
16562: LD_VAR 0 2
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PUSH
16571: LD_INT 21
16573: PUSH
16574: LD_INT 1
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: PPUSH
16585: CALL_OW 69
16589: PUSH
16590: LD_INT 0
16592: PLUS
16593: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16594: LD_ADDR_VAR 0 9
16598: PUSH
16599: LD_INT 22
16601: PUSH
16602: LD_VAR 0 2
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: PUSH
16611: LD_INT 2
16613: PUSH
16614: LD_INT 30
16616: PUSH
16617: LD_INT 0
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: PUSH
16624: LD_INT 30
16626: PUSH
16627: LD_INT 1
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: LIST
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: PPUSH
16643: CALL_OW 69
16647: ST_TO_ADDR
// crates := 0 ;
16648: LD_ADDR_VAR 0 4
16652: PUSH
16653: LD_INT 0
16655: ST_TO_ADDR
// oil := 0 ;
16656: LD_ADDR_VAR 0 5
16660: PUSH
16661: LD_INT 0
16663: ST_TO_ADDR
// sib := 0 ;
16664: LD_ADDR_VAR 0 6
16668: PUSH
16669: LD_INT 0
16671: ST_TO_ADDR
// if bases then
16672: LD_VAR 0 9
16676: IFFALSE 16782
// begin for j in bases do
16678: LD_ADDR_VAR 0 3
16682: PUSH
16683: LD_VAR 0 9
16687: PUSH
16688: FOR_IN
16689: IFFALSE 16780
// begin base := GetBase ( j ) ;
16691: LD_ADDR_VAR 0 8
16695: PUSH
16696: LD_VAR 0 3
16700: PPUSH
16701: CALL_OW 274
16705: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
16706: LD_ADDR_VAR 0 4
16710: PUSH
16711: LD_VAR 0 4
16715: PUSH
16716: LD_VAR 0 8
16720: PPUSH
16721: LD_INT 1
16723: PPUSH
16724: CALL_OW 275
16728: PLUS
16729: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
16730: LD_ADDR_VAR 0 5
16734: PUSH
16735: LD_VAR 0 5
16739: PUSH
16740: LD_VAR 0 8
16744: PPUSH
16745: LD_INT 2
16747: PPUSH
16748: CALL_OW 275
16752: PLUS
16753: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
16754: LD_ADDR_VAR 0 6
16758: PUSH
16759: LD_VAR 0 6
16763: PUSH
16764: LD_VAR 0 8
16768: PPUSH
16769: LD_INT 3
16771: PPUSH
16772: CALL_OW 275
16776: PLUS
16777: ST_TO_ADDR
// end ;
16778: GO 16688
16780: POP
16781: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
16782: LD_STRING setSpecText(
16784: PUSH
16785: LD_VAR 0 2
16789: STR
16790: PUSH
16791: LD_STRING ,
16793: STR
16794: PUSH
16795: LD_INT 2
16797: STR
16798: PUSH
16799: LD_STRING ,
16801: STR
16802: PUSH
16803: LD_VAR 0 4
16807: STR
16808: PUSH
16809: LD_STRING )
16811: STR
16812: PPUSH
16813: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
16817: LD_STRING setSpecText(
16819: PUSH
16820: LD_VAR 0 2
16824: STR
16825: PUSH
16826: LD_STRING ,
16828: STR
16829: PUSH
16830: LD_INT 3
16832: STR
16833: PUSH
16834: LD_STRING ,
16836: STR
16837: PUSH
16838: LD_VAR 0 5
16842: STR
16843: PUSH
16844: LD_STRING )
16846: STR
16847: PPUSH
16848: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
16852: LD_STRING setSpecText(
16854: PUSH
16855: LD_VAR 0 2
16859: STR
16860: PUSH
16861: LD_STRING ,
16863: STR
16864: PUSH
16865: LD_INT 4
16867: STR
16868: PUSH
16869: LD_STRING ,
16871: STR
16872: PUSH
16873: LD_VAR 0 6
16877: STR
16878: PUSH
16879: LD_STRING )
16881: STR
16882: PPUSH
16883: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
16887: LD_STRING setSpecText(
16889: PUSH
16890: LD_VAR 0 2
16894: STR
16895: PUSH
16896: LD_STRING ,
16898: STR
16899: PUSH
16900: LD_INT 5
16902: STR
16903: PUSH
16904: LD_STRING ,
16906: STR
16907: PUSH
16908: LD_VAR 0 7
16912: STR
16913: PUSH
16914: LD_STRING )
16916: STR
16917: PPUSH
16918: CALL_OW 559
// end ; end ;
16922: GO 16539
16924: POP
16925: POP
// end ;
16926: LD_VAR 0 1
16930: RET
// every 0 0$1 do
16931: GO 16933
16933: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
16934: LD_STRING setSpecLogoNumber(
16936: PUSH
16937: LD_INT 2
16939: STR
16940: PUSH
16941: LD_STRING ,
16943: STR
16944: PUSH
16945: LD_INT 1
16947: STR
16948: PUSH
16949: LD_STRING )
16951: STR
16952: PPUSH
16953: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
16957: LD_STRING setSpecLogoNumber(
16959: PUSH
16960: LD_INT 3
16962: STR
16963: PUSH
16964: LD_STRING ,
16966: STR
16967: PUSH
16968: LD_INT 2
16970: STR
16971: PUSH
16972: LD_STRING )
16974: STR
16975: PPUSH
16976: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
16980: LD_STRING setSpecLogoNumber(
16982: PUSH
16983: LD_INT 4
16985: STR
16986: PUSH
16987: LD_STRING ,
16989: STR
16990: PUSH
16991: LD_INT 3
16993: STR
16994: PUSH
16995: LD_STRING )
16997: STR
16998: PPUSH
16999: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
17003: LD_STRING setSpecLogoNumber(
17005: PUSH
17006: LD_INT 5
17008: STR
17009: PUSH
17010: LD_STRING ,
17012: STR
17013: PUSH
17014: LD_INT 4
17016: STR
17017: PUSH
17018: LD_STRING )
17020: STR
17021: PPUSH
17022: CALL_OW 559
// end ;
17026: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
17027: LD_INT 2
17029: PUSH
17030: LD_INT 30
17032: PUSH
17033: LD_INT 0
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PUSH
17040: LD_INT 30
17042: PUSH
17043: LD_INT 1
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: LIST
17054: PPUSH
17055: CALL_OW 69
17059: IFFALSE 17069
17061: GO 17063
17063: DISABLE
// begin enable ;
17064: ENABLE
// UpdateSpectatorBar ;
17065: CALL 16515 0 0
// end ; end_of_file
17069: END
// var respawn , inqueue ; export function init_respawning ; begin
17070: LD_INT 0
17072: PPUSH
// respawn := Rand ( 1 , 8 ) ;
17073: LD_ADDR_LOC 27
17077: PUSH
17078: LD_INT 1
17080: PPUSH
17081: LD_INT 8
17083: PPUSH
17084: CALL_OW 12
17088: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
17089: LD_ADDR_LOC 28
17093: PUSH
17094: LD_INT 0
17096: PUSH
17097: LD_INT 0
17099: PUSH
17100: LD_INT 0
17102: PUSH
17103: LD_INT 0
17105: PUSH
17106: LD_INT 0
17108: PUSH
17109: LD_INT 0
17111: PUSH
17112: LD_INT 0
17114: PUSH
17115: LD_INT 0
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: ST_TO_ADDR
// end ;
17128: LD_VAR 0 1
17132: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
17133: GO 17135
17135: DISABLE
17136: LD_INT 0
17138: PPUSH
17139: PPUSH
17140: PPUSH
// begin if respawning_time_max = 0 then
17141: LD_EXP 11
17145: PUSH
17146: LD_INT 0
17148: EQUAL
17149: IFFALSE 17153
// exit ;
17151: GO 17561
// if respawn = 8 then
17153: LD_LOC 27
17157: PUSH
17158: LD_INT 8
17160: EQUAL
17161: IFFALSE 17173
// respawn := 1 else
17163: LD_ADDR_LOC 27
17167: PUSH
17168: LD_INT 1
17170: ST_TO_ADDR
17171: GO 17187
// respawn := respawn + 1 ;
17173: LD_ADDR_LOC 27
17177: PUSH
17178: LD_LOC 27
17182: PUSH
17183: LD_INT 1
17185: PLUS
17186: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
17187: LD_EXP 21
17191: PUSH
17192: LD_LOC 27
17196: ARRAY
17197: PUSH
17198: LD_LOC 28
17202: PUSH
17203: LD_LOC 27
17207: ARRAY
17208: NOT
17209: AND
17210: IFFALSE 17560
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
17212: LD_ADDR_VAR 0 1
17216: PUSH
17217: LD_INT 21
17219: PUSH
17220: LD_INT 1
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 22
17229: PUSH
17230: LD_LOC 27
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: PUSH
17239: LD_INT 3
17241: PUSH
17242: LD_INT 23
17244: PUSH
17245: LD_INT 0
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: PPUSH
17258: CALL_OW 69
17262: ST_TO_ADDR
// if n < number_of_people then
17263: LD_VAR 0 1
17267: PUSH
17268: LD_EXP 4
17272: LESS
17273: IFFALSE 17557
// begin aktresp := respawn ;
17275: LD_ADDR_VAR 0 3
17279: PUSH
17280: LD_LOC 27
17284: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
17285: LD_ADDR_LOC 28
17289: PUSH
17290: LD_LOC 28
17294: PPUSH
17295: LD_VAR 0 3
17299: PPUSH
17300: LD_INT 1
17302: PPUSH
17303: CALL_OW 1
17307: ST_TO_ADDR
// enable ;
17308: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
17309: LD_EXP 10
17313: PPUSH
17314: LD_EXP 11
17318: PPUSH
17319: CALL_OW 12
17323: PPUSH
17324: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
17328: LD_ADDR_LOC 28
17332: PUSH
17333: LD_LOC 28
17337: PPUSH
17338: LD_VAR 0 3
17342: PPUSH
17343: LD_INT 0
17345: PPUSH
17346: CALL_OW 1
17350: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
17351: LD_ADDR_VAR 0 2
17355: PUSH
17356: LD_INT 21
17358: PUSH
17359: LD_INT 3
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: PUSH
17366: LD_INT 2
17368: PUSH
17369: LD_INT 30
17371: PUSH
17372: LD_INT 0
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: PUSH
17379: LD_INT 30
17381: PUSH
17382: LD_INT 1
17384: PUSH
17385: EMPTY
17386: LIST
17387: LIST
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: LIST
17393: PUSH
17394: LD_INT 50
17396: PUSH
17397: EMPTY
17398: LIST
17399: PUSH
17400: LD_INT 22
17402: PUSH
17403: LD_VAR 0 3
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: PPUSH
17418: CALL_OW 69
17422: ST_TO_ADDR
// if dep = 0 then
17423: LD_VAR 0 2
17427: PUSH
17428: LD_INT 0
17430: EQUAL
17431: IFFALSE 17435
// exit ;
17433: GO 17561
// hc_name :=  ;
17435: LD_ADDR_OWVAR 26
17439: PUSH
17440: LD_STRING 
17442: ST_TO_ADDR
// hc_importance := 0 ;
17443: LD_ADDR_OWVAR 32
17447: PUSH
17448: LD_INT 0
17450: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
17451: LD_INT 0
17453: PPUSH
17454: LD_INT 0
17456: PPUSH
17457: LD_EXP 5
17461: PUSH
17462: LD_INT 2
17464: DIV
17465: PPUSH
17466: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
17470: LD_ADDR_OWVAR 21
17474: PUSH
17475: LD_EXP 22
17479: PUSH
17480: LD_VAR 0 3
17484: ARRAY
17485: ST_TO_ADDR
// uc_side := aktresp ;
17486: LD_ADDR_OWVAR 20
17490: PUSH
17491: LD_VAR 0 3
17495: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
17496: LD_ADDR_VAR 0 2
17500: PUSH
17501: LD_VAR 0 2
17505: PUSH
17506: LD_INT 1
17508: PPUSH
17509: LD_VAR 0 2
17513: PPUSH
17514: CALL_OW 12
17518: ARRAY
17519: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
17520: CALL_OW 44
17524: PPUSH
17525: LD_VAR 0 2
17529: PPUSH
17530: CALL_OW 250
17534: PPUSH
17535: LD_VAR 0 2
17539: PPUSH
17540: CALL_OW 251
17544: PPUSH
17545: LD_INT 7
17547: PPUSH
17548: LD_INT 1
17550: PPUSH
17551: CALL_OW 50
// end else
17555: GO 17558
// enable ;
17557: ENABLE
// end else
17558: GO 17561
// enable ;
17560: ENABLE
// end ; end_of_file
17561: PPOPN 3
17563: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
17564: LD_INT 0
17566: PPUSH
17567: PPUSH
17568: PPUSH
// BuildUpTime_Delay = 0 ;
17569: LD_ADDR_EXP 60
17573: PUSH
17574: LD_INT 0
17576: ST_TO_ADDR
// if not def_builduptime then
17577: LD_EXP 54
17581: NOT
17582: IFFALSE 17586
// exit ;
17584: GO 17769
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
17586: LD_ADDR_EXP 60
17590: PUSH
17591: LD_INT 8400
17593: PUSH
17594: LD_INT 2100
17596: PUSH
17597: LD_EXP 54
17601: MUL
17602: PLUS
17603: ST_TO_ADDR
// BuildUpTimeActive := true ;
17604: LD_ADDR_EXP 59
17608: PUSH
17609: LD_INT 1
17611: ST_TO_ADDR
// for i := 1 to 8 do
17612: LD_ADDR_VAR 0 2
17616: PUSH
17617: DOUBLE
17618: LD_INT 1
17620: DEC
17621: ST_TO_ADDR
17622: LD_INT 8
17624: PUSH
17625: FOR_TO
17626: IFFALSE 17767
// if Side_Positions [ i ] then
17628: LD_EXP 21
17632: PUSH
17633: LD_VAR 0 2
17637: ARRAY
17638: IFFALSE 17765
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
17640: LD_EXP 58
17644: PUSH
17645: LD_EXP 21
17649: PUSH
17650: LD_VAR 0 2
17654: ARRAY
17655: ARRAY
17656: PPUSH
17657: LD_INT 5
17659: PPUSH
17660: CALL_OW 424
// for j := 1 to 8 do
17664: LD_ADDR_VAR 0 3
17668: PUSH
17669: DOUBLE
17670: LD_INT 1
17672: DEC
17673: ST_TO_ADDR
17674: LD_INT 8
17676: PUSH
17677: FOR_TO
17678: IFFALSE 17763
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
17680: LD_EXP 21
17684: PUSH
17685: LD_VAR 0 3
17689: ARRAY
17690: PUSH
17691: LD_EXP 18
17695: PUSH
17696: LD_VAR 0 2
17700: ARRAY
17701: PUSH
17702: LD_EXP 18
17706: PUSH
17707: LD_VAR 0 3
17711: ARRAY
17712: NONEQUAL
17713: PUSH
17714: LD_EXP 23
17718: NOT
17719: PUSH
17720: LD_VAR 0 2
17724: PUSH
17725: LD_VAR 0 3
17729: NONEQUAL
17730: AND
17731: OR
17732: AND
17733: IFFALSE 17761
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
17735: LD_VAR 0 3
17739: PPUSH
17740: LD_EXP 58
17744: PUSH
17745: LD_EXP 21
17749: PUSH
17750: LD_VAR 0 2
17754: ARRAY
17755: ARRAY
17756: PPUSH
17757: CALL_OW 333
17761: GO 17677
17763: POP
17764: POP
// end ;
17765: GO 17625
17767: POP
17768: POP
// end ;
17769: LD_VAR 0 1
17773: RET
// export function EndBuildUp ; var i , j ; begin
17774: LD_INT 0
17776: PPUSH
17777: PPUSH
17778: PPUSH
// BuildUpTimeActive := false ;
17779: LD_ADDR_EXP 59
17783: PUSH
17784: LD_INT 0
17786: ST_TO_ADDR
// for i := 1 to 8 do
17787: LD_ADDR_VAR 0 2
17791: PUSH
17792: DOUBLE
17793: LD_INT 1
17795: DEC
17796: ST_TO_ADDR
17797: LD_INT 8
17799: PUSH
17800: FOR_TO
17801: IFFALSE 17942
// if Side_Positions [ i ] then
17803: LD_EXP 21
17807: PUSH
17808: LD_VAR 0 2
17812: ARRAY
17813: IFFALSE 17940
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
17815: LD_EXP 58
17819: PUSH
17820: LD_EXP 21
17824: PUSH
17825: LD_VAR 0 2
17829: ARRAY
17830: ARRAY
17831: PPUSH
17832: LD_INT 0
17834: PPUSH
17835: CALL_OW 424
// for j := 1 to 8 do
17839: LD_ADDR_VAR 0 3
17843: PUSH
17844: DOUBLE
17845: LD_INT 1
17847: DEC
17848: ST_TO_ADDR
17849: LD_INT 8
17851: PUSH
17852: FOR_TO
17853: IFFALSE 17938
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
17855: LD_EXP 21
17859: PUSH
17860: LD_VAR 0 3
17864: ARRAY
17865: PUSH
17866: LD_EXP 18
17870: PUSH
17871: LD_VAR 0 2
17875: ARRAY
17876: PUSH
17877: LD_EXP 18
17881: PUSH
17882: LD_VAR 0 3
17886: ARRAY
17887: NONEQUAL
17888: PUSH
17889: LD_EXP 23
17893: NOT
17894: PUSH
17895: LD_VAR 0 2
17899: PUSH
17900: LD_VAR 0 3
17904: NONEQUAL
17905: AND
17906: OR
17907: AND
17908: IFFALSE 17936
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
17910: LD_VAR 0 3
17914: PPUSH
17915: LD_EXP 58
17919: PUSH
17920: LD_EXP 21
17924: PUSH
17925: LD_VAR 0 2
17929: ARRAY
17930: ARRAY
17931: PPUSH
17932: CALL_OW 334
17936: GO 17852
17938: POP
17939: POP
// end ;
17940: GO 17800
17942: POP
17943: POP
// end ;
17944: LD_VAR 0 1
17948: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
17949: LD_EXP 59
17953: IFFALSE 18128
17955: GO 17957
17957: DISABLE
17958: LD_INT 0
17960: PPUSH
17961: PPUSH
// begin for i := 1 to 8 do
17962: LD_ADDR_VAR 0 1
17966: PUSH
17967: DOUBLE
17968: LD_INT 1
17970: DEC
17971: ST_TO_ADDR
17972: LD_INT 8
17974: PUSH
17975: FOR_TO
17976: IFFALSE 18125
// if Side_Positions [ i ] then
17978: LD_EXP 21
17982: PUSH
17983: LD_VAR 0 1
17987: ARRAY
17988: IFFALSE 18123
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
17990: LD_ADDR_VAR 0 2
17994: PUSH
17995: LD_EXP 58
17999: PUSH
18000: LD_EXP 21
18004: PUSH
18005: LD_VAR 0 1
18009: ARRAY
18010: ARRAY
18011: PPUSH
18012: LD_INT 2
18014: PUSH
18015: LD_INT 21
18017: PUSH
18018: LD_INT 1
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: PUSH
18025: LD_INT 21
18027: PUSH
18028: LD_INT 2
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: LIST
18039: PUSH
18040: LD_INT 22
18042: PUSH
18043: LD_OWVAR 2
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: PPUSH
18056: CALL_OW 70
18060: PUSH
18061: FOR_IN
18062: IFFALSE 18121
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
18064: LD_EXP 18
18068: PUSH
18069: LD_VAR 0 1
18073: ARRAY
18074: PUSH
18075: LD_EXP 18
18079: PUSH
18080: LD_OWVAR 2
18084: ARRAY
18085: NONEQUAL
18086: PUSH
18087: LD_EXP 23
18091: NOT
18092: PUSH
18093: LD_VAR 0 1
18097: PUSH
18098: LD_OWVAR 2
18102: NONEQUAL
18103: AND
18104: OR
18105: IFFALSE 18119
// ComMoveToArea ( un , BuildUpEscape ) ;
18107: LD_VAR 0 2
18111: PPUSH
18112: LD_INT 12
18114: PPUSH
18115: CALL_OW 113
18119: GO 18061
18121: POP
18122: POP
18123: GO 17975
18125: POP
18126: POP
// enable ;
18127: ENABLE
// end ;
18128: PPOPN 2
18130: END
// every 0 0$1 trigger def_builduptime do
18131: LD_EXP 54
18135: IFFALSE 18161
18137: GO 18139
18139: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
18140: LD_INT 8400
18142: PUSH
18143: LD_EXP 54
18147: PUSH
18148: LD_INT 2100
18150: MUL
18151: PLUS
18152: PPUSH
18153: CALL_OW 67
// EndBuildUp ;
18157: CALL 17774 0 0
// end ;
18161: END
