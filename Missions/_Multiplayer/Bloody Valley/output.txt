// export def_tree_function ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , respawning_time_min , respawning_time_max , siberite_bomb_Delay , amount_of_apemen , tree_function , def_win_rules , buildUpTime_Delay ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export Position_Sides ; export depot_def , breastworks_def , start_def , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 141
// begin Your_Side := mp_player_side ;
  79: LD_ADDR_OWVAR 2
  83: PUSH
  84: LD_OWVAR 7
  88: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  89: LD_ADDR_EXP 20
  93: PUSH
  94: LD_OWVAR 17
  98: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  99: LD_ADDR_EXP 17
 103: PUSH
 104: LD_OWVAR 15
 108: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 109: LD_ADDR_EXP 21
 113: PUSH
 114: LD_OWVAR 16
 118: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 119: LD_ADDR_EXP 19
 123: PUSH
 124: CALL 0 0 0
 128: ST_TO_ADDR
// Teams := mp_teams ;
 129: LD_ADDR_EXP 18
 133: PUSH
 134: LD_OWVAR 12
 138: ST_TO_ADDR
// end else
 139: GO 334
// begin Your_Side := 1 ;
 141: LD_ADDR_OWVAR 2
 145: PUSH
 146: LD_INT 1
 148: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 149: LD_ADDR_EXP 20
 153: PUSH
 154: LD_INT 1
 156: PUSH
 157: LD_INT 2
 159: PUSH
 160: LD_INT 3
 162: PUSH
 163: LD_INT 4
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 188: LD_ADDR_EXP 17
 192: PUSH
 193: LD_INT 1
 195: PUSH
 196: LD_INT 1
 198: PUSH
 199: LD_INT 2
 201: PUSH
 202: LD_INT 2
 204: PUSH
 205: LD_INT 0
 207: PUSH
 208: LD_INT 0
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 0 , 0 , 0 , 0 ] ;
 227: LD_ADDR_EXP 21
 231: PUSH
 232: LD_INT 1
 234: PUSH
 235: LD_INT 2
 237: PUSH
 238: LD_INT 3
 240: PUSH
 241: LD_INT 1
 243: PUSH
 244: LD_INT 0
 246: PUSH
 247: LD_INT 0
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 0
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: LIST
 264: LIST
 265: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 266: LD_ADDR_EXP 19
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: LD_INT 0
 279: PUSH
 280: LD_INT 0
 282: PUSH
 283: LD_INT 0
 285: PUSH
 286: LD_INT 0
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: LIST
 299: LIST
 300: LIST
 301: LIST
 302: LIST
 303: LIST
 304: ST_TO_ADDR
// Teams := [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 305: LD_ADDR_EXP 18
 309: PUSH
 310: LD_INT 1
 312: PUSH
 313: LD_INT 2
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: LD_INT 3
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: ST_TO_ADDR
// end ; for i := 1 to 8 do
 334: LD_ADDR_VAR 0 2
 338: PUSH
 339: DOUBLE
 340: LD_INT 1
 342: DEC
 343: ST_TO_ADDR
 344: LD_INT 8
 346: PUSH
 347: FOR_TO
 348: IFFALSE 435
// if Multiplayer_GetPlayerIsSpec ( i ) then
 350: LD_VAR 0 2
 354: PPUSH
 355: CALL_OW 530
 359: IFFALSE 433
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 361: LD_ADDR_EXP 20
 365: PUSH
 366: LD_EXP 20
 370: PPUSH
 371: LD_VAR 0 2
 375: PPUSH
 376: LD_INT 0
 378: PPUSH
 379: CALL_OW 1
 383: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 384: LD_ADDR_EXP 18
 388: PUSH
 389: LD_EXP 18
 393: PPUSH
 394: LD_EXP 17
 398: PUSH
 399: LD_VAR 0 2
 403: ARRAY
 404: PPUSH
 405: LD_EXP 18
 409: PUSH
 410: LD_EXP 17
 414: PUSH
 415: LD_VAR 0 2
 419: ARRAY
 420: ARRAY
 421: PUSH
 422: LD_VAR 0 2
 426: DIFF
 427: PPUSH
 428: CALL_OW 1
 432: ST_TO_ADDR
// end ;
 433: GO 347
 435: POP
 436: POP
// Position_Sides := [ 0 , 0 , 0 , 0 ] ;
 437: LD_ADDR_EXP 23
 441: PUSH
 442: LD_INT 0
 444: PUSH
 445: LD_INT 0
 447: PUSH
 448: LD_INT 0
 450: PUSH
 451: LD_INT 0
 453: PUSH
 454: EMPTY
 455: LIST
 456: LIST
 457: LIST
 458: LIST
 459: ST_TO_ADDR
// for i := 1 to 8 do
 460: LD_ADDR_VAR 0 2
 464: PUSH
 465: DOUBLE
 466: LD_INT 1
 468: DEC
 469: ST_TO_ADDR
 470: LD_INT 8
 472: PUSH
 473: FOR_TO
 474: IFFALSE 521
// if Side_Positions [ i ] then
 476: LD_EXP 20
 480: PUSH
 481: LD_VAR 0 2
 485: ARRAY
 486: IFFALSE 519
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 488: LD_ADDR_EXP 23
 492: PUSH
 493: LD_EXP 23
 497: PPUSH
 498: LD_EXP 20
 502: PUSH
 503: LD_VAR 0 2
 507: ARRAY
 508: PPUSH
 509: LD_VAR 0 2
 513: PPUSH
 514: CALL_OW 1
 518: ST_TO_ADDR
 519: GO 473
 521: POP
 522: POP
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 523: LD_ADDR_EXP 22
 527: PUSH
 528: LD_EXP 17
 532: PUSH
 533: LD_INT 0
 535: PUSH
 536: EMPTY
 537: LIST
 538: DIFF
 539: PUSH
 540: LD_INT 1
 542: GREATER
 543: ST_TO_ADDR
// if Multiplayer then
 544: LD_OWVAR 4
 548: IFFALSE 755
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 550: LD_ADDR_EXP 38
 554: PUSH
 555: LD_INT 0
 557: PPUSH
 558: CALL_OW 426
 562: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 563: LD_ADDR_EXP 39
 567: PUSH
 568: LD_INT 1
 570: PPUSH
 571: CALL_OW 426
 575: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 576: LD_ADDR_EXP 40
 580: PUSH
 581: LD_INT 2
 583: PPUSH
 584: CALL_OW 426
 588: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 589: LD_ADDR_EXP 41
 593: PUSH
 594: LD_INT 3
 596: PPUSH
 597: CALL_OW 426
 601: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 602: LD_ADDR_EXP 42
 606: PUSH
 607: LD_INT 4
 609: PPUSH
 610: CALL_OW 426
 614: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 615: LD_ADDR_EXP 43
 619: PUSH
 620: LD_INT 5
 622: PPUSH
 623: CALL_OW 426
 627: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 628: LD_ADDR_EXP 45
 632: PUSH
 633: LD_INT 10
 635: PPUSH
 636: CALL_OW 426
 640: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 641: LD_ADDR_EXP 46
 645: PUSH
 646: LD_INT 11
 648: PPUSH
 649: CALL_OW 426
 653: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 654: LD_ADDR_EXP 47
 658: PUSH
 659: LD_INT 12
 661: PPUSH
 662: CALL_OW 426
 666: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 13 ) ;
 667: LD_ADDR_EXP 49
 671: PUSH
 672: LD_INT 13
 674: PPUSH
 675: CALL_OW 426
 679: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 14 ) ;
 680: LD_ADDR_EXP 48
 684: PUSH
 685: LD_INT 14
 687: PPUSH
 688: CALL_OW 426
 692: ST_TO_ADDR
// def_tree_function := GetMultiplayerSetting ( 15 ) ;
 693: LD_ADDR_EXP 1
 697: PUSH
 698: LD_INT 15
 700: PPUSH
 701: CALL_OW 426
 705: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 706: LD_ADDR_EXP 50
 710: PUSH
 711: LD_INT 17
 713: PPUSH
 714: CALL_OW 426
 718: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 719: LD_ADDR_EXP 51
 723: PUSH
 724: LD_INT 20
 726: PPUSH
 727: CALL_OW 426
 731: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 732: LD_ADDR_VAR 0 3
 736: PUSH
 737: LD_INT 22
 739: PPUSH
 740: CALL_OW 426
 744: ST_TO_ADDR
// def_win_rules = 0 ;
 745: LD_ADDR_EXP 15
 749: PUSH
 750: LD_INT 0
 752: ST_TO_ADDR
// end else
 753: GO 887
// begin Randomize ;
 755: CALL_OW 10
// def_base_level := 2 ;
 759: LD_ADDR_EXP 38
 763: PUSH
 764: LD_INT 2
 766: ST_TO_ADDR
// def_amount_of_people := 1 ;
 767: LD_ADDR_EXP 39
 771: PUSH
 772: LD_INT 1
 774: ST_TO_ADDR
// def_skill_level := 1 ;
 775: LD_ADDR_EXP 40
 779: PUSH
 780: LD_INT 1
 782: ST_TO_ADDR
// def_starting_resources := 2 ;
 783: LD_ADDR_EXP 41
 787: PUSH
 788: LD_INT 2
 790: ST_TO_ADDR
// def_shipments_density := 1 ;
 791: LD_ADDR_EXP 42
 795: PUSH
 796: LD_INT 1
 798: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 799: LD_ADDR_EXP 43
 803: PUSH
 804: LD_INT 0
 806: ST_TO_ADDR
// def_shared_vision := 1 ;
 807: LD_ADDR_EXP 45
 811: PUSH
 812: LD_INT 1
 814: ST_TO_ADDR
// def_morale_flags := 1 ;
 815: LD_ADDR_EXP 46
 819: PUSH
 820: LD_INT 1
 822: ST_TO_ADDR
// def_siberite_detection := 1 ;
 823: LD_ADDR_EXP 47
 827: PUSH
 828: LD_INT 1
 830: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 831: LD_ADDR_EXP 49
 835: PUSH
 836: LD_INT 3
 838: ST_TO_ADDR
// def_people_respawning := 2 ;
 839: LD_ADDR_EXP 48
 843: PUSH
 844: LD_INT 2
 846: ST_TO_ADDR
// def_tree_function := 7 ;
 847: LD_ADDR_EXP 1
 851: PUSH
 852: LD_INT 7
 854: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 855: LD_ADDR_EXP 50
 859: PUSH
 860: LD_INT 0
 862: ST_TO_ADDR
// def_builduptime := 1 ;
 863: LD_ADDR_EXP 51
 867: PUSH
 868: LD_INT 1
 870: ST_TO_ADDR
// tech_level = 4 ;
 871: LD_ADDR_VAR 0 3
 875: PUSH
 876: LD_INT 4
 878: ST_TO_ADDR
// def_win_rules = 0 ;
 879: LD_ADDR_EXP 15
 883: PUSH
 884: LD_INT 0
 886: ST_TO_ADDR
// end ; if def_tree_function = 7 then
 887: LD_EXP 1
 891: PUSH
 892: LD_INT 7
 894: EQUAL
 895: IFFALSE 913
// def_tree_function := Rand ( 1 , 5 ) ;
 897: LD_ADDR_EXP 1
 901: PUSH
 902: LD_INT 1
 904: PPUSH
 905: LD_INT 5
 907: PPUSH
 908: CALL_OW 12
 912: ST_TO_ADDR
// InitGameRules ;
 913: CALL 8006 0 0
// if def_game_rules = 0 then
 917: LD_EXP 37
 921: PUSH
 922: LD_INT 0
 924: EQUAL
 925: IFFALSE 952
// begin if isSGUI then
 927: LD_OWVAR 83
 931: IFFALSE 939
// setMpTechs ( ) else
 933: CALL 12149 0 0
 937: GO 952
// begin SetMpTechLevel ( tech_level + 1 ) ;
 939: LD_VAR 0 3
 943: PUSH
 944: LD_INT 1
 946: PLUS
 947: PPUSH
 948: CALL 12296 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 952: LD_ADDR_EXP 2
 956: PUSH
 957: LD_INT 0
 959: PUSH
 960: LD_INT 1
 962: PUSH
 963: LD_INT 1
 965: PUSH
 966: LD_INT 1
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: LIST
 973: LIST
 974: PUSH
 975: LD_EXP 38
 979: PUSH
 980: LD_INT 1
 982: PLUS
 983: ARRAY
 984: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 , 3 ] [ def_base_level + 1 ] ;
 985: LD_ADDR_EXP 3
 989: PUSH
 990: LD_INT 0
 992: PUSH
 993: LD_INT 0
 995: PUSH
 996: LD_INT 2
 998: PUSH
 999: LD_INT 3
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: PUSH
1008: LD_EXP 38
1012: PUSH
1013: LD_INT 1
1015: PLUS
1016: ARRAY
1017: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1018: LD_ADDR_EXP 5
1022: PUSH
1023: LD_INT 2
1025: PUSH
1026: LD_INT 3
1028: PUSH
1029: LD_INT 4
1031: PUSH
1032: LD_INT 5
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: PUSH
1041: LD_EXP 40
1045: PUSH
1046: LD_INT 1
1048: PLUS
1049: ARRAY
1050: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1051: LD_ADDR_EXP 7
1055: PUSH
1056: LD_INT 0
1058: PUSH
1059: LD_INT 0
1061: PUSH
1062: LD_INT 0
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: PUSH
1070: LD_INT 30
1072: PUSH
1073: LD_INT 0
1075: PUSH
1076: LD_INT 0
1078: PUSH
1079: EMPTY
1080: LIST
1081: LIST
1082: LIST
1083: PUSH
1084: LD_INT 50
1086: PUSH
1087: LD_INT 20
1089: PUSH
1090: LD_INT 0
1092: PUSH
1093: EMPTY
1094: LIST
1095: LIST
1096: LIST
1097: PUSH
1098: LD_INT 80
1100: PUSH
1101: LD_INT 40
1103: PUSH
1104: LD_INT 20
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: LIST
1116: LIST
1117: PUSH
1118: LD_EXP 41
1122: PUSH
1123: LD_INT 1
1125: PLUS
1126: ARRAY
1127: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1128: LD_ADDR_EXP 6
1132: PUSH
1133: LD_INT 10
1135: PUSH
1136: EMPTY
1137: LIST
1138: PUSH
1139: LD_INT 7
1141: PUSH
1142: LD_INT 14
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: PUSH
1149: LD_INT 6
1151: PUSH
1152: LD_INT 12
1154: PUSH
1155: LD_INT 18
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: LIST
1162: PUSH
1163: LD_INT 5
1165: PUSH
1166: LD_INT 10
1168: PUSH
1169: LD_INT 15
1171: PUSH
1172: LD_INT 20
1174: PUSH
1175: EMPTY
1176: LIST
1177: LIST
1178: LIST
1179: LIST
1180: PUSH
1181: EMPTY
1182: LIST
1183: LIST
1184: LIST
1185: LIST
1186: PUSH
1187: LD_EXP 41
1191: PUSH
1192: LD_INT 1
1194: PLUS
1195: ARRAY
1196: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1197: LD_ADDR_EXP 4
1201: PUSH
1202: LD_EXP 39
1206: PUSH
1207: LD_INT 4
1209: PLUS
1210: ST_TO_ADDR
// shipments_density := 360 - ( def_shipments_density * 2 ) ;
1211: LD_ADDR_EXP 8
1215: PUSH
1216: LD_INT 360
1218: PUSH
1219: LD_EXP 42
1223: PUSH
1224: LD_INT 2
1226: MUL
1227: MINUS
1228: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1229: LD_ADDR_EXP 13
1233: PUSH
1234: LD_INT 0
1236: PUSH
1237: LD_INT 1
1239: PUSH
1240: LD_INT 2
1242: PUSH
1243: LD_INT 3
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: PUSH
1252: LD_EXP 49
1256: PUSH
1257: LD_INT 1
1259: PLUS
1260: ARRAY
1261: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1262: LD_ADDR_EXP 10
1266: PUSH
1267: LD_INT 0
1269: PUSH
1270: LD_INT 8400
1272: PUSH
1273: LD_INT 1750
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: LIST
1280: PUSH
1281: LD_EXP 48
1285: PUSH
1286: LD_INT 1
1288: PLUS
1289: ARRAY
1290: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1291: LD_ADDR_EXP 11
1295: PUSH
1296: LD_INT 0
1298: PUSH
1299: LD_INT 21000
1301: PUSH
1302: LD_INT 4200
1304: PUSH
1305: EMPTY
1306: LIST
1307: LIST
1308: LIST
1309: PUSH
1310: LD_EXP 48
1314: PUSH
1315: LD_INT 1
1317: PLUS
1318: ARRAY
1319: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1320: LD_ADDR_EXP 9
1324: PUSH
1325: LD_INT 1
1327: NEG
1328: PUSH
1329: LD_INT 350
1331: PUSH
1332: LD_INT 700
1334: PUSH
1335: LD_INT 1400
1337: PUSH
1338: LD_INT 0
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: PUSH
1348: LD_EXP 46
1352: PUSH
1353: LD_INT 1
1355: PLUS
1356: ARRAY
1357: ST_TO_ADDR
// battle_flags_id := [ ] ;
1358: LD_ADDR_EXP 27
1362: PUSH
1363: EMPTY
1364: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1365: LD_ADDR_EXP 12
1369: PUSH
1370: LD_INT 0
1372: PUSH
1373: LD_INT 1
1375: PUSH
1376: LD_INT 63000
1378: PUSH
1379: LD_INT 126000
1381: PUSH
1382: LD_INT 189000
1384: PUSH
1385: LD_INT 252000
1387: PUSH
1388: EMPTY
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: PUSH
1396: LD_EXP 50
1400: PUSH
1401: LD_INT 1
1403: PLUS
1404: ARRAY
1405: ST_TO_ADDR
// tree_function := [ [ 0 , 0 , 0 , 0 , 0 ] , [ 2 , 0 , 0 , 0 , 0 ] , [ 0 , 4 , 0 , 0 , 0 ] , [ 0 , 0 , 2 , 0 , 0 ] , [ 0 , 0 , 0 , 3 , 0 ] , [ 1 , 2 , 1 , 2 , 2 ] , [ 0 , 0 , 0 , 0 , 3 ] ] [ def_tree_function + 1 ] ;
1406: LD_ADDR_EXP 14
1410: PUSH
1411: LD_INT 0
1413: PUSH
1414: LD_INT 0
1416: PUSH
1417: LD_INT 0
1419: PUSH
1420: LD_INT 0
1422: PUSH
1423: LD_INT 0
1425: PUSH
1426: EMPTY
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: PUSH
1433: LD_INT 2
1435: PUSH
1436: LD_INT 0
1438: PUSH
1439: LD_INT 0
1441: PUSH
1442: LD_INT 0
1444: PUSH
1445: LD_INT 0
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: PUSH
1455: LD_INT 0
1457: PUSH
1458: LD_INT 4
1460: PUSH
1461: LD_INT 0
1463: PUSH
1464: LD_INT 0
1466: PUSH
1467: LD_INT 0
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: LIST
1474: LIST
1475: LIST
1476: PUSH
1477: LD_INT 0
1479: PUSH
1480: LD_INT 0
1482: PUSH
1483: LD_INT 2
1485: PUSH
1486: LD_INT 0
1488: PUSH
1489: LD_INT 0
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: PUSH
1499: LD_INT 0
1501: PUSH
1502: LD_INT 0
1504: PUSH
1505: LD_INT 0
1507: PUSH
1508: LD_INT 3
1510: PUSH
1511: LD_INT 0
1513: PUSH
1514: EMPTY
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: LIST
1520: PUSH
1521: LD_INT 1
1523: PUSH
1524: LD_INT 2
1526: PUSH
1527: LD_INT 1
1529: PUSH
1530: LD_INT 2
1532: PUSH
1533: LD_INT 2
1535: PUSH
1536: EMPTY
1537: LIST
1538: LIST
1539: LIST
1540: LIST
1541: LIST
1542: PUSH
1543: LD_INT 0
1545: PUSH
1546: LD_INT 0
1548: PUSH
1549: LD_INT 0
1551: PUSH
1552: LD_INT 0
1554: PUSH
1555: LD_INT 3
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: LIST
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: PUSH
1574: LD_EXP 1
1578: PUSH
1579: LD_INT 1
1581: PLUS
1582: ARRAY
1583: ST_TO_ADDR
// buildUpTime_Delay := [ 0 , 5 5$00 , 6 6$00 , 7 7$00 , 8 8$00 , 9 9$00 , 10 10$00 , 11 11$00 , 12 12$00 , 13 13$00 , 14 14$00 , 15 15$00 ] [ def_builduptime + 1 ] ;
1584: LD_ADDR_EXP 16
1588: PUSH
1589: LD_INT 0
1591: PUSH
1592: LD_INT 10500
1594: PUSH
1595: LD_INT 12600
1597: PUSH
1598: LD_INT 14700
1600: PUSH
1601: LD_INT 16800
1603: PUSH
1604: LD_INT 18900
1606: PUSH
1607: LD_INT 21000
1609: PUSH
1610: LD_INT 23100
1612: PUSH
1613: LD_INT 25200
1615: PUSH
1616: LD_INT 27300
1618: PUSH
1619: LD_INT 29400
1621: PUSH
1622: LD_INT 31500
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: PUSH
1639: LD_EXP 51
1643: PUSH
1644: LD_INT 1
1646: PLUS
1647: ARRAY
1648: ST_TO_ADDR
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] ;
1649: LD_ADDR_EXP 55
1653: PUSH
1654: LD_INT 8
1656: PUSH
1657: LD_INT 11
1659: PUSH
1660: LD_INT 9
1662: PUSH
1663: LD_INT 10
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: ST_TO_ADDR
// end ;
1672: LD_VAR 0 1
1676: RET
// function prepare_map_coordinates ; var side , dep , br1 , br2 , br3 , un , i ; begin
1677: LD_INT 0
1679: PPUSH
1680: PPUSH
1681: PPUSH
1682: PPUSH
1683: PPUSH
1684: PPUSH
1685: PPUSH
1686: PPUSH
// depot_def = [ ] ;
1687: LD_ADDR_EXP 24
1691: PUSH
1692: EMPTY
1693: ST_TO_ADDR
// breastworks_def = [ ] ;
1694: LD_ADDR_EXP 25
1698: PUSH
1699: EMPTY
1700: ST_TO_ADDR
// for side := 1 to 4 do
1701: LD_ADDR_VAR 0 2
1705: PUSH
1706: DOUBLE
1707: LD_INT 1
1709: DEC
1710: ST_TO_ADDR
1711: LD_INT 4
1713: PUSH
1714: FOR_TO
1715: IFFALSE 2070
// begin dep := side * 4 - 3 ;
1717: LD_ADDR_VAR 0 3
1721: PUSH
1722: LD_VAR 0 2
1726: PUSH
1727: LD_INT 4
1729: MUL
1730: PUSH
1731: LD_INT 3
1733: MINUS
1734: ST_TO_ADDR
// br1 := side * 4 - 2 ;
1735: LD_ADDR_VAR 0 4
1739: PUSH
1740: LD_VAR 0 2
1744: PUSH
1745: LD_INT 4
1747: MUL
1748: PUSH
1749: LD_INT 2
1751: MINUS
1752: ST_TO_ADDR
// br2 := side * 4 - 1 ;
1753: LD_ADDR_VAR 0 5
1757: PUSH
1758: LD_VAR 0 2
1762: PUSH
1763: LD_INT 4
1765: MUL
1766: PUSH
1767: LD_INT 1
1769: MINUS
1770: ST_TO_ADDR
// br3 := side * 4 ;
1771: LD_ADDR_VAR 0 6
1775: PUSH
1776: LD_VAR 0 2
1780: PUSH
1781: LD_INT 4
1783: MUL
1784: ST_TO_ADDR
// depot_def := depot_def ^ [ [ GetX ( dep ) , GetY ( dep ) , GetDir ( dep ) ] ] ;
1785: LD_ADDR_EXP 24
1789: PUSH
1790: LD_EXP 24
1794: PUSH
1795: LD_VAR 0 3
1799: PPUSH
1800: CALL_OW 250
1804: PUSH
1805: LD_VAR 0 3
1809: PPUSH
1810: CALL_OW 251
1814: PUSH
1815: LD_VAR 0 3
1819: PPUSH
1820: CALL_OW 254
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: LIST
1829: PUSH
1830: EMPTY
1831: LIST
1832: ADD
1833: ST_TO_ADDR
// start_def := start_def ^ [ [ ShiftX ( GetX ( Dep ) , GetDir ( Dep ) , 6 ) , ShiftY ( GetY ( Dep ) , GetDir ( Dep ) , 6 ) ] ] ;
1834: LD_ADDR_EXP 26
1838: PUSH
1839: LD_EXP 26
1843: PUSH
1844: LD_VAR 0 3
1848: PPUSH
1849: CALL_OW 250
1853: PPUSH
1854: LD_VAR 0 3
1858: PPUSH
1859: CALL_OW 254
1863: PPUSH
1864: LD_INT 6
1866: PPUSH
1867: CALL_OW 272
1871: PUSH
1872: LD_VAR 0 3
1876: PPUSH
1877: CALL_OW 251
1881: PPUSH
1882: LD_VAR 0 3
1886: PPUSH
1887: CALL_OW 254
1891: PPUSH
1892: LD_INT 6
1894: PPUSH
1895: CALL_OW 273
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: PUSH
1904: EMPTY
1905: LIST
1906: ADD
1907: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ GetX ( br1 ) , GetY ( br1 ) , GetDir ( br1 ) ] , [ GetX ( br2 ) , GetY ( br2 ) , GetDir ( br2 ) ] , [ GetX ( br3 ) , GetY ( br3 ) , GetDir ( br3 ) ] ] ] ;
1908: LD_ADDR_EXP 25
1912: PUSH
1913: LD_EXP 25
1917: PUSH
1918: LD_VAR 0 4
1922: PPUSH
1923: CALL_OW 250
1927: PUSH
1928: LD_VAR 0 4
1932: PPUSH
1933: CALL_OW 251
1937: PUSH
1938: LD_VAR 0 4
1942: PPUSH
1943: CALL_OW 254
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: LD_VAR 0 5
1957: PPUSH
1958: CALL_OW 250
1962: PUSH
1963: LD_VAR 0 5
1967: PPUSH
1968: CALL_OW 251
1972: PUSH
1973: LD_VAR 0 5
1977: PPUSH
1978: CALL_OW 254
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: LIST
1987: PUSH
1988: LD_VAR 0 6
1992: PPUSH
1993: CALL_OW 250
1997: PUSH
1998: LD_VAR 0 6
2002: PPUSH
2003: CALL_OW 251
2007: PUSH
2008: LD_VAR 0 6
2012: PPUSH
2013: CALL_OW 254
2017: PUSH
2018: EMPTY
2019: LIST
2020: LIST
2021: LIST
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: LIST
2027: PUSH
2028: EMPTY
2029: LIST
2030: ADD
2031: ST_TO_ADDR
// DestroyUnit ( dep ) ;
2032: LD_VAR 0 3
2036: PPUSH
2037: CALL_OW 65
// DestroyUnit ( br1 ) ;
2041: LD_VAR 0 4
2045: PPUSH
2046: CALL_OW 65
// DestroyUnit ( br2 ) ;
2050: LD_VAR 0 5
2054: PPUSH
2055: CALL_OW 65
// DestroyUnit ( br3 ) ;
2059: LD_VAR 0 6
2063: PPUSH
2064: CALL_OW 65
// end ;
2068: GO 1714
2070: POP
2071: POP
// if not def_extra_oil_deposits then
2072: LD_EXP 43
2076: NOT
2077: IFFALSE 2159
// for i in [ [ 52 , 44 ] , [ 84 , 37 ] , [ 74 , 81 ] , [ 106 , 77 ] ] do
2079: LD_ADDR_VAR 0 8
2083: PUSH
2084: LD_INT 52
2086: PUSH
2087: LD_INT 44
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: PUSH
2094: LD_INT 84
2096: PUSH
2097: LD_INT 37
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 74
2106: PUSH
2107: LD_INT 81
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: PUSH
2114: LD_INT 106
2116: PUSH
2117: LD_INT 77
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: PUSH
2124: EMPTY
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: PUSH
2130: FOR_IN
2131: IFFALSE 2157
// begin RemoveDepositXY ( i [ 1 ] , i [ 2 ] ) ;
2133: LD_VAR 0 8
2137: PUSH
2138: LD_INT 1
2140: ARRAY
2141: PPUSH
2142: LD_VAR 0 8
2146: PUSH
2147: LD_INT 2
2149: ARRAY
2150: PPUSH
2151: CALL_OW 63
// end ;
2155: GO 2130
2157: POP
2158: POP
// end ;
2159: LD_VAR 0 1
2163: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2164: LD_INT 0
2166: PPUSH
2167: PPUSH
2168: PPUSH
// if not Team_Game then
2169: LD_EXP 22
2173: NOT
2174: IFFALSE 2272
// begin for i = 1 to 8 do
2176: LD_ADDR_VAR 0 2
2180: PUSH
2181: DOUBLE
2182: LD_INT 1
2184: DEC
2185: ST_TO_ADDR
2186: LD_INT 8
2188: PUSH
2189: FOR_TO
2190: IFFALSE 2268
// for j = 1 to 8 do
2192: LD_ADDR_VAR 0 3
2196: PUSH
2197: DOUBLE
2198: LD_INT 1
2200: DEC
2201: ST_TO_ADDR
2202: LD_INT 8
2204: PUSH
2205: FOR_TO
2206: IFFALSE 2264
// if i <> j then
2208: LD_VAR 0 2
2212: PUSH
2213: LD_VAR 0 3
2217: NONEQUAL
2218: IFFALSE 2242
// SetAttitude ( i , j , att_neutral , true ) else
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_VAR 0 3
2229: PPUSH
2230: LD_INT 0
2232: PPUSH
2233: LD_INT 1
2235: PPUSH
2236: CALL_OW 80
2240: GO 2262
// SetAttitude ( i , j , att_friend , true ) ;
2242: LD_VAR 0 2
2246: PPUSH
2247: LD_VAR 0 3
2251: PPUSH
2252: LD_INT 1
2254: PPUSH
2255: LD_INT 1
2257: PPUSH
2258: CALL_OW 80
2262: GO 2205
2264: POP
2265: POP
2266: GO 2189
2268: POP
2269: POP
// end else
2270: GO 2447
// begin if def_shared_vision then
2272: LD_EXP 45
2276: IFFALSE 2341
// begin for i in Teams do
2278: LD_ADDR_VAR 0 2
2282: PUSH
2283: LD_EXP 18
2287: PUSH
2288: FOR_IN
2289: IFFALSE 2339
// for j = 2 to i do
2291: LD_ADDR_VAR 0 3
2295: PUSH
2296: DOUBLE
2297: LD_INT 2
2299: DEC
2300: ST_TO_ADDR
2301: LD_VAR 0 2
2305: PUSH
2306: FOR_TO
2307: IFFALSE 2335
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2309: LD_VAR 0 2
2313: PUSH
2314: LD_VAR 0 3
2318: ARRAY
2319: PPUSH
2320: LD_VAR 0 2
2324: PUSH
2325: LD_INT 1
2327: ARRAY
2328: PPUSH
2329: CALL_OW 343
2333: GO 2306
2335: POP
2336: POP
2337: GO 2288
2339: POP
2340: POP
// end ; for i = 1 to 8 do
2341: LD_ADDR_VAR 0 2
2345: PUSH
2346: DOUBLE
2347: LD_INT 1
2349: DEC
2350: ST_TO_ADDR
2351: LD_INT 8
2353: PUSH
2354: FOR_TO
2355: IFFALSE 2445
// for j = 1 to 8 do
2357: LD_ADDR_VAR 0 3
2361: PUSH
2362: DOUBLE
2363: LD_INT 1
2365: DEC
2366: ST_TO_ADDR
2367: LD_INT 8
2369: PUSH
2370: FOR_TO
2371: IFFALSE 2441
// if Side_Teams [ i ] = Side_Teams [ j ] then
2373: LD_EXP 17
2377: PUSH
2378: LD_VAR 0 2
2382: ARRAY
2383: PUSH
2384: LD_EXP 17
2388: PUSH
2389: LD_VAR 0 3
2393: ARRAY
2394: EQUAL
2395: IFFALSE 2419
// SetAttitude ( i , j , att_friend , true ) else
2397: LD_VAR 0 2
2401: PPUSH
2402: LD_VAR 0 3
2406: PPUSH
2407: LD_INT 1
2409: PPUSH
2410: LD_INT 1
2412: PPUSH
2413: CALL_OW 80
2417: GO 2439
// SetAttitude ( i , j , att_enemy , true ) ;
2419: LD_VAR 0 2
2423: PPUSH
2424: LD_VAR 0 3
2428: PPUSH
2429: LD_INT 2
2431: PPUSH
2432: LD_INT 1
2434: PPUSH
2435: CALL_OW 80
2439: GO 2370
2441: POP
2442: POP
2443: GO 2354
2445: POP
2446: POP
// end ; end ;
2447: LD_VAR 0 1
2451: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2452: LD_INT 0
2454: PPUSH
2455: PPUSH
2456: PPUSH
2457: PPUSH
// result := [ ] ;
2458: LD_ADDR_VAR 0 7
2462: PUSH
2463: EMPTY
2464: ST_TO_ADDR
// for i := 1 to count do
2465: LD_ADDR_VAR 0 8
2469: PUSH
2470: DOUBLE
2471: LD_INT 1
2473: DEC
2474: ST_TO_ADDR
2475: LD_VAR 0 1
2479: PUSH
2480: FOR_TO
2481: IFFALSE 2899
// begin uc_direction := Rand ( 0 , 5 ) ;
2483: LD_ADDR_OWVAR 24
2487: PUSH
2488: LD_INT 0
2490: PPUSH
2491: LD_INT 5
2493: PPUSH
2494: CALL_OW 12
2498: ST_TO_ADDR
// if commander then
2499: LD_LOC 1
2503: IFFALSE 2612
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2505: LD_ADDR_OWVAR 26
2509: PUSH
2510: LD_OWVAR 19
2514: PUSH
2515: LD_OWVAR 20
2519: ARRAY
2520: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2521: LD_INT 1
2523: PPUSH
2524: LD_INT 2
2526: PPUSH
2527: CALL_OW 12
2531: PPUSH
2532: LD_VAR 0 2
2536: PPUSH
2537: LD_EXP 5
2541: PUSH
2542: LD_INT 2
2544: PLUS
2545: PPUSH
2546: CALL_OW 380
// hc_importance := 105 ;
2550: LD_ADDR_OWVAR 32
2554: PUSH
2555: LD_INT 105
2557: ST_TO_ADDR
// commander := false ;
2558: LD_ADDR_LOC 1
2562: PUSH
2563: LD_INT 0
2565: ST_TO_ADDR
// if Multiplayer then
2566: LD_OWVAR 4
2570: IFFALSE 2610
// begin hc_gallery := MULTIAVATARS ;
2572: LD_ADDR_OWVAR 33
2576: PUSH
2577: LD_STRING MULTIAVATARS
2579: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2580: LD_ADDR_OWVAR 34
2584: PUSH
2585: LD_OWVAR 20
2589: PPUSH
2590: CALL_OW 525
2594: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2595: LD_ADDR_OWVAR 27
2599: PUSH
2600: LD_OWVAR 20
2604: PPUSH
2605: CALL_OW 526
2609: ST_TO_ADDR
// end ; end else
2610: GO 2675
// begin hc_name :=  ;
2612: LD_ADDR_OWVAR 26
2616: PUSH
2617: LD_STRING 
2619: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2620: LD_INT 1
2622: PPUSH
2623: LD_INT 2
2625: PPUSH
2626: CALL_OW 12
2630: PPUSH
2631: LD_VAR 0 2
2635: PPUSH
2636: LD_EXP 5
2640: PPUSH
2641: CALL_OW 380
// hc_importance := 0 ;
2645: LD_ADDR_OWVAR 32
2649: PUSH
2650: LD_INT 0
2652: ST_TO_ADDR
// if Multiplayer then
2653: LD_OWVAR 4
2657: IFFALSE 2675
// begin hc_gallery :=  ;
2659: LD_ADDR_OWVAR 33
2663: PUSH
2664: LD_STRING 
2666: ST_TO_ADDR
// hc_face_number := 0 ;
2667: LD_ADDR_OWVAR 34
2671: PUSH
2672: LD_INT 0
2674: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2675: LD_ADDR_VAR 0 10
2679: PUSH
2680: CALL_OW 44
2684: ST_TO_ADDR
// if global_defined then
2685: LD_LOC 3
2689: IFFALSE 2829
// begin if ( cl = class_soldier ) then
2691: LD_VAR 0 2
2695: PUSH
2696: LD_INT 1
2698: EQUAL
2699: IFFALSE 2719
// j := i + soldiers_created else
2701: LD_ADDR_VAR 0 9
2705: PUSH
2706: LD_VAR 0 8
2710: PUSH
2711: LD_LOC 4
2715: PLUS
2716: ST_TO_ADDR
2717: GO 2729
// j := i ;
2719: LD_ADDR_VAR 0 9
2723: PUSH
2724: LD_VAR 0 8
2728: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2729: LD_LOC 2
2733: PUSH
2734: LD_VAR 0 2
2738: ARRAY
2739: PUSH
2740: LD_VAR 0 9
2744: ARRAY
2745: PPUSH
2746: LD_VAR 0 10
2750: PPUSH
2751: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2755: LD_VAR 0 10
2759: PPUSH
2760: LD_INT 2
2762: PPUSH
2763: LD_LOC 2
2767: PUSH
2768: LD_VAR 0 2
2772: ARRAY
2773: PUSH
2774: LD_VAR 0 9
2778: ARRAY
2779: PPUSH
2780: LD_INT 2
2782: PPUSH
2783: CALL_OW 260
2787: PPUSH
2788: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2792: LD_VAR 0 10
2796: PPUSH
2797: LD_INT 1
2799: PPUSH
2800: LD_LOC 2
2804: PUSH
2805: LD_VAR 0 2
2809: ARRAY
2810: PUSH
2811: LD_VAR 0 9
2815: ARRAY
2816: PPUSH
2817: LD_INT 1
2819: PPUSH
2820: CALL_OW 260
2824: PPUSH
2825: CALL_OW 239
// end ; if building then
2829: LD_VAR 0 6
2833: IFFALSE 2851
// PlaceHumanInUnit ( un , building ) else
2835: LD_VAR 0 10
2839: PPUSH
2840: LD_VAR 0 6
2844: PPUSH
2845: CALL_OW 52
2849: GO 2878
// PlaceUnitXYR ( un , x , y , r , false ) ;
2851: LD_VAR 0 10
2855: PPUSH
2856: LD_VAR 0 3
2860: PPUSH
2861: LD_VAR 0 4
2865: PPUSH
2866: LD_VAR 0 5
2870: PPUSH
2871: LD_INT 0
2873: PPUSH
2874: CALL_OW 50
// result := result ^ [ un ] ;
2878: LD_ADDR_VAR 0 7
2882: PUSH
2883: LD_VAR 0 7
2887: PUSH
2888: LD_VAR 0 10
2892: PUSH
2893: EMPTY
2894: LIST
2895: ADD
2896: ST_TO_ADDR
// end ;
2897: GO 2480
2899: POP
2900: POP
// if not global_defined then
2901: LD_LOC 3
2905: NOT
2906: IFFALSE 2984
// if ( global_units >= cl ) then
2908: LD_LOC 2
2912: PUSH
2913: LD_VAR 0 2
2917: GREATEREQUAL
2918: IFFALSE 2959
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2920: LD_ADDR_LOC 2
2924: PUSH
2925: LD_LOC 2
2929: PPUSH
2930: LD_VAR 0 2
2934: PPUSH
2935: LD_LOC 2
2939: PUSH
2940: LD_VAR 0 2
2944: ARRAY
2945: PUSH
2946: LD_VAR 0 7
2950: ADD
2951: PPUSH
2952: CALL_OW 1
2956: ST_TO_ADDR
2957: GO 2984
// global_units := Replace ( global_units , cl , result ) ;
2959: LD_ADDR_LOC 2
2963: PUSH
2964: LD_LOC 2
2968: PPUSH
2969: LD_VAR 0 2
2973: PPUSH
2974: LD_VAR 0 7
2978: PPUSH
2979: CALL_OW 1
2983: ST_TO_ADDR
// if commander then
2984: LD_LOC 1
2988: IFFALSE 3035
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2990: LD_ADDR_EXP 28
2994: PUSH
2995: LD_EXP 28
2999: PPUSH
3000: LD_OWVAR 20
3004: PPUSH
3005: LD_EXP 28
3009: PUSH
3010: LD_OWVAR 20
3014: ARRAY
3015: PUSH
3016: LD_VAR 0 10
3020: ADD
3021: PPUSH
3022: CALL_OW 1
3026: ST_TO_ADDR
// commander := false ;
3027: LD_ADDR_LOC 1
3031: PUSH
3032: LD_INT 0
3034: ST_TO_ADDR
// end ; end ;
3035: LD_VAR 0 7
3039: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3040: LD_INT 0
3042: PPUSH
3043: PPUSH
3044: PPUSH
3045: PPUSH
3046: PPUSH
3047: PPUSH
3048: PPUSH
3049: PPUSH
3050: PPUSH
// pos := Side_Positions [ side ] ;
3051: LD_ADDR_VAR 0 3
3055: PUSH
3056: LD_EXP 20
3060: PUSH
3061: LD_VAR 0 1
3065: ARRAY
3066: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3067: LD_ADDR_OWVAR 21
3071: PUSH
3072: LD_EXP 21
3076: PUSH
3077: LD_VAR 0 1
3081: ARRAY
3082: ST_TO_ADDR
// uc_side := side ;
3083: LD_ADDR_OWVAR 20
3087: PUSH
3088: LD_VAR 0 1
3092: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3093: LD_ADDR_VAR 0 4
3097: PUSH
3098: LD_EXP 24
3102: PUSH
3103: LD_VAR 0 3
3107: ARRAY
3108: PUSH
3109: LD_INT 1
3111: ARRAY
3112: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3113: LD_ADDR_VAR 0 5
3117: PUSH
3118: LD_EXP 24
3122: PUSH
3123: LD_VAR 0 3
3127: ARRAY
3128: PUSH
3129: LD_INT 2
3131: ARRAY
3132: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3133: LD_ADDR_VAR 0 6
3137: PUSH
3138: LD_EXP 24
3142: PUSH
3143: LD_VAR 0 3
3147: ARRAY
3148: PUSH
3149: LD_INT 3
3151: ARRAY
3152: ST_TO_ADDR
// if is_depot then
3153: LD_EXP 2
3157: IFFALSE 3290
// begin bc_type = b_depot ;
3159: LD_ADDR_OWVAR 42
3163: PUSH
3164: LD_INT 0
3166: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3167: LD_ADDR_VAR 0 10
3171: PUSH
3172: LD_VAR 0 4
3176: PPUSH
3177: LD_VAR 0 5
3181: PPUSH
3182: LD_VAR 0 6
3186: PPUSH
3187: CALL_OW 47
3191: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3192: LD_VAR 0 10
3196: PPUSH
3197: LD_STRING @
3199: PUSH
3200: LD_VAR 0 1
3204: STR
3205: PPUSH
3206: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3210: LD_VAR 0 10
3214: PPUSH
3215: CALL_OW 274
3219: PPUSH
3220: LD_INT 1
3222: PPUSH
3223: LD_EXP 7
3227: PUSH
3228: LD_INT 1
3230: ARRAY
3231: PPUSH
3232: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3236: LD_VAR 0 10
3240: PPUSH
3241: CALL_OW 274
3245: PPUSH
3246: LD_INT 2
3248: PPUSH
3249: LD_EXP 7
3253: PUSH
3254: LD_INT 2
3256: ARRAY
3257: PPUSH
3258: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3262: LD_VAR 0 10
3266: PPUSH
3267: CALL_OW 274
3271: PPUSH
3272: LD_INT 3
3274: PPUSH
3275: LD_EXP 7
3279: PUSH
3280: LD_INT 3
3282: ARRAY
3283: PPUSH
3284: CALL_OW 277
// end else
3288: GO 3434
// begin for i := 1 to 3 do
3290: LD_ADDR_VAR 0 7
3294: PUSH
3295: DOUBLE
3296: LD_INT 1
3298: DEC
3299: ST_TO_ADDR
3300: LD_INT 3
3302: PUSH
3303: FOR_TO
3304: IFFALSE 3432
// begin r := starting_resources [ i ] ;
3306: LD_ADDR_VAR 0 8
3310: PUSH
3311: LD_EXP 7
3315: PUSH
3316: LD_VAR 0 7
3320: ARRAY
3321: ST_TO_ADDR
// while r >= 10 do
3322: LD_VAR 0 8
3326: PUSH
3327: LD_INT 10
3329: GREATEREQUAL
3330: IFFALSE 3430
// if r > 50 then
3332: LD_VAR 0 8
3336: PUSH
3337: LD_INT 50
3339: GREATER
3340: IFFALSE 3386
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3342: LD_VAR 0 7
3346: PPUSH
3347: LD_INT 5
3349: PPUSH
3350: LD_VAR 0 4
3354: PPUSH
3355: LD_VAR 0 5
3359: PPUSH
3360: LD_INT 4
3362: PPUSH
3363: LD_INT 0
3365: PPUSH
3366: CALL_OW 60
// r := r - 50 ;
3370: LD_ADDR_VAR 0 8
3374: PUSH
3375: LD_VAR 0 8
3379: PUSH
3380: LD_INT 50
3382: MINUS
3383: ST_TO_ADDR
// end else
3384: GO 3428
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3386: LD_VAR 0 7
3390: PPUSH
3391: LD_VAR 0 8
3395: PUSH
3396: LD_INT 10
3398: DIV
3399: PPUSH
3400: LD_VAR 0 4
3404: PPUSH
3405: LD_VAR 0 5
3409: PPUSH
3410: LD_INT 4
3412: PPUSH
3413: LD_INT 0
3415: PPUSH
3416: CALL_OW 60
// r := 0 ;
3420: LD_ADDR_VAR 0 8
3424: PUSH
3425: LD_INT 0
3427: ST_TO_ADDR
// end ;
3428: GO 3322
// end ;
3430: GO 3303
3432: POP
3433: POP
// end ; for r in starting_crates do
3434: LD_ADDR_VAR 0 8
3438: PUSH
3439: LD_EXP 6
3443: PUSH
3444: FOR_IN
3445: IFFALSE 3477
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3447: LD_INT 1
3449: PPUSH
3450: LD_INT 5
3452: PPUSH
3453: LD_VAR 0 4
3457: PPUSH
3458: LD_VAR 0 5
3462: PPUSH
3463: LD_VAR 0 8
3467: PPUSH
3468: LD_INT 0
3470: PPUSH
3471: CALL_OW 60
3475: GO 3444
3477: POP
3478: POP
// if def_morale_flags then
3479: LD_EXP 46
3483: IFFALSE 3622
// begin x := start_def [ pos ] [ 1 ] ;
3485: LD_ADDR_VAR 0 4
3489: PUSH
3490: LD_EXP 26
3494: PUSH
3495: LD_VAR 0 3
3499: ARRAY
3500: PUSH
3501: LD_INT 1
3503: ARRAY
3504: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3505: LD_ADDR_VAR 0 5
3509: PUSH
3510: LD_EXP 26
3514: PUSH
3515: LD_VAR 0 3
3519: ARRAY
3520: PUSH
3521: LD_INT 2
3523: ARRAY
3524: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3525: LD_VAR 0 4
3529: PPUSH
3530: LD_VAR 0 5
3534: PPUSH
3535: LD_INT 12
3537: PPUSH
3538: LD_INT 2
3540: PPUSH
3541: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3545: LD_ADDR_EXP 27
3549: PUSH
3550: LD_EXP 27
3554: PUSH
3555: LD_VAR 0 1
3559: PPUSH
3560: LD_VAR 0 4
3564: PPUSH
3565: LD_VAR 0 5
3569: PPUSH
3570: LD_INT 1
3572: PUSH
3573: LD_INT 100
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: PUSH
3580: LD_INT 2
3582: PUSH
3583: LD_INT 50
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: PUSH
3590: LD_INT 3
3592: PUSH
3593: LD_INT 20
3595: PUSH
3596: EMPTY
3597: LIST
3598: LIST
3599: PUSH
3600: LD_INT 20
3602: PUSH
3603: LD_INT 100
3605: PUSH
3606: EMPTY
3607: LIST
3608: LIST
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: PPUSH
3616: CALL_OW 418
3620: ADD
3621: ST_TO_ADDR
// end ; commander := true ;
3622: LD_ADDR_LOC 1
3626: PUSH
3627: LD_INT 1
3629: ST_TO_ADDR
// soldiers_created := 0 ;
3630: LD_ADDR_LOC 4
3634: PUSH
3635: LD_INT 0
3637: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3638: LD_ADDR_VAR 0 7
3642: PUSH
3643: DOUBLE
3644: LD_INT 1
3646: DEC
3647: ST_TO_ADDR
3648: LD_EXP 3
3652: PUSH
3653: FOR_TO
3654: IFFALSE 3807
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3656: LD_ADDR_VAR 0 4
3660: PUSH
3661: LD_EXP 25
3665: PUSH
3666: LD_VAR 0 3
3670: ARRAY
3671: PUSH
3672: LD_VAR 0 7
3676: ARRAY
3677: PUSH
3678: LD_INT 1
3680: ARRAY
3681: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3682: LD_ADDR_VAR 0 5
3686: PUSH
3687: LD_EXP 25
3691: PUSH
3692: LD_VAR 0 3
3696: ARRAY
3697: PUSH
3698: LD_VAR 0 7
3702: ARRAY
3703: PUSH
3704: LD_INT 2
3706: ARRAY
3707: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3708: LD_ADDR_VAR 0 6
3712: PUSH
3713: LD_EXP 25
3717: PUSH
3718: LD_VAR 0 3
3722: ARRAY
3723: PUSH
3724: LD_VAR 0 7
3728: ARRAY
3729: PUSH
3730: LD_INT 3
3732: ARRAY
3733: ST_TO_ADDR
// bc_type := b_breastwork ;
3734: LD_ADDR_OWVAR 42
3738: PUSH
3739: LD_INT 31
3741: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3742: LD_ADDR_VAR 0 9
3746: PUSH
3747: LD_VAR 0 4
3751: PPUSH
3752: LD_VAR 0 5
3756: PPUSH
3757: LD_VAR 0 6
3761: PPUSH
3762: CALL_OW 47
3766: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3767: LD_INT 1
3769: PPUSH
3770: LD_INT 1
3772: PPUSH
3773: LD_INT 0
3775: PPUSH
3776: LD_INT 0
3778: PPUSH
3779: LD_INT 0
3781: PPUSH
3782: LD_VAR 0 9
3786: PPUSH
3787: CALL 2452 0 6
// soldiers_created := soldiers_created + 1 ;
3791: LD_ADDR_LOC 4
3795: PUSH
3796: LD_LOC 4
3800: PUSH
3801: LD_INT 1
3803: PLUS
3804: ST_TO_ADDR
// end ;
3805: GO 3653
3807: POP
3808: POP
// x := start_def [ pos ] [ 1 ] ;
3809: LD_ADDR_VAR 0 4
3813: PUSH
3814: LD_EXP 26
3818: PUSH
3819: LD_VAR 0 3
3823: ARRAY
3824: PUSH
3825: LD_INT 1
3827: ARRAY
3828: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3829: LD_ADDR_VAR 0 5
3833: PUSH
3834: LD_EXP 26
3838: PUSH
3839: LD_VAR 0 3
3843: ARRAY
3844: PUSH
3845: LD_INT 2
3847: ARRAY
3848: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3849: LD_LOC 8
3853: PUSH
3854: LD_EXP 3
3858: MINUS
3859: PPUSH
3860: LD_INT 1
3862: PPUSH
3863: LD_VAR 0 4
3867: PPUSH
3868: LD_VAR 0 5
3872: PPUSH
3873: LD_INT 5
3875: PPUSH
3876: LD_INT 0
3878: PPUSH
3879: CALL 2452 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3883: LD_LOC 5
3887: PPUSH
3888: LD_INT 2
3890: PPUSH
3891: LD_VAR 0 4
3895: PPUSH
3896: LD_VAR 0 5
3900: PPUSH
3901: LD_INT 5
3903: PPUSH
3904: LD_INT 0
3906: PPUSH
3907: CALL 2452 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3911: LD_LOC 7
3915: PPUSH
3916: LD_INT 3
3918: PPUSH
3919: LD_VAR 0 4
3923: PPUSH
3924: LD_VAR 0 5
3928: PPUSH
3929: LD_INT 5
3931: PPUSH
3932: LD_INT 0
3934: PPUSH
3935: CALL 2452 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3939: LD_LOC 6
3943: PPUSH
3944: LD_INT 4
3946: PPUSH
3947: LD_VAR 0 4
3951: PPUSH
3952: LD_VAR 0 5
3956: PPUSH
3957: LD_INT 5
3959: PPUSH
3960: LD_INT 0
3962: PPUSH
3963: CALL 2452 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3967: LD_EXP 47
3971: PUSH
3972: LD_INT 20
3974: PPUSH
3975: LD_VAR 0 1
3979: PPUSH
3980: CALL_OW 321
3984: PUSH
3985: LD_INT 1
3987: EQUAL
3988: AND
3989: IFFALSE 4006
// SetTech ( tech_SibDet , side , state_researched ) ;
3991: LD_INT 20
3993: PPUSH
3994: LD_VAR 0 1
3998: PPUSH
3999: LD_INT 2
4001: PPUSH
4002: CALL_OW 322
// if def_siberite_bomb = 1 then
4006: LD_EXP 50
4010: PUSH
4011: LD_INT 1
4013: EQUAL
4014: IFFALSE 4048
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4016: LD_INT 25
4018: PPUSH
4019: LD_VAR 0 1
4023: PPUSH
4024: LD_INT 1
4026: PPUSH
4027: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4031: LD_INT 73
4033: PPUSH
4034: LD_VAR 0 1
4038: PPUSH
4039: LD_INT 1
4041: PPUSH
4042: CALL_OW 322
// end else
4046: GO 4078
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4048: LD_INT 25
4050: PPUSH
4051: LD_VAR 0 1
4055: PPUSH
4056: LD_INT 0
4058: PPUSH
4059: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4063: LD_INT 73
4065: PPUSH
4066: LD_VAR 0 1
4070: PPUSH
4071: LD_INT 0
4073: PPUSH
4074: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4078: LD_INT 24
4080: PPUSH
4081: LD_VAR 0 1
4085: PPUSH
4086: LD_INT 0
4088: PPUSH
4089: CALL_OW 322
// global_defined := true ;
4093: LD_ADDR_LOC 3
4097: PUSH
4098: LD_INT 1
4100: ST_TO_ADDR
// end ;
4101: LD_VAR 0 2
4105: RET
// every 0 0$1 do
4106: GO 4108
4108: DISABLE
// if ( def_siberite_bomb > 1 ) then
4109: LD_EXP 50
4113: PUSH
4114: LD_INT 1
4116: GREATER
4117: IFFALSE 4132
// begin wait ( siberite_bomb_Delay ) ;
4119: LD_EXP 12
4123: PPUSH
4124: CALL_OW 67
// EnableSibFiss ;
4128: CALL 4133 0 0
// end ;
4132: END
// function EnableSibFiss ; var i ; begin
4133: LD_INT 0
4135: PPUSH
4136: PPUSH
// for i := 1 to 8 do
4137: LD_ADDR_VAR 0 2
4141: PUSH
4142: DOUBLE
4143: LD_INT 1
4145: DEC
4146: ST_TO_ADDR
4147: LD_INT 8
4149: PUSH
4150: FOR_TO
4151: IFFALSE 4197
// if Side_Positions [ i ] then
4153: LD_EXP 20
4157: PUSH
4158: LD_VAR 0 2
4162: ARRAY
4163: IFFALSE 4195
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4165: LD_INT 25
4167: PPUSH
4168: LD_VAR 0 2
4172: PPUSH
4173: LD_INT 1
4175: PPUSH
4176: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4180: LD_INT 73
4182: PPUSH
4183: LD_VAR 0 2
4187: PPUSH
4188: LD_INT 1
4190: PPUSH
4191: CALL_OW 322
// end ;
4195: GO 4150
4197: POP
4198: POP
// end ;
4199: LD_VAR 0 1
4203: RET
// function prepare_sides ; var i ; begin
4204: LD_INT 0
4206: PPUSH
4207: PPUSH
// global_units := [ ] ;
4208: LD_ADDR_LOC 2
4212: PUSH
4213: EMPTY
4214: ST_TO_ADDR
// global_defined := false ;
4215: LD_ADDR_LOC 3
4219: PUSH
4220: LD_INT 0
4222: ST_TO_ADDR
// CountClassMembers ;
4223: CALL 4273 0 0
// for i := 1 to 8 do
4227: LD_ADDR_VAR 0 2
4231: PUSH
4232: DOUBLE
4233: LD_INT 1
4235: DEC
4236: ST_TO_ADDR
4237: LD_INT 8
4239: PUSH
4240: FOR_TO
4241: IFFALSE 4266
// if Side_Positions [ i ] then
4243: LD_EXP 20
4247: PUSH
4248: LD_VAR 0 2
4252: ARRAY
4253: IFFALSE 4264
// prepare_side ( i ) ;
4255: LD_VAR 0 2
4259: PPUSH
4260: CALL 3040 0 1
4264: GO 4240
4266: POP
4267: POP
// end ;
4268: LD_VAR 0 1
4272: RET
// function CountClassMembers ; var Mode ; begin
4273: LD_INT 0
4275: PPUSH
4276: PPUSH
// if No_Mechs then
4277: LD_EXP 52
4281: IFFALSE 4293
// Mode := 2 else
4283: LD_ADDR_VAR 0 2
4287: PUSH
4288: LD_INT 2
4290: ST_TO_ADDR
4291: GO 4301
// Mode := 1 ;
4293: LD_ADDR_VAR 0 2
4297: PUSH
4298: LD_INT 1
4300: ST_TO_ADDR
// neng := number_of_people ;
4301: LD_ADDR_LOC 5
4305: PUSH
4306: LD_EXP 4
4310: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4311: LD_ADDR_LOC 8
4315: PUSH
4316: LD_LOC 5
4320: PUSH
4321: LD_INT 4
4323: PUSH
4324: LD_INT 3
4326: PUSH
4327: EMPTY
4328: LIST
4329: LIST
4330: PUSH
4331: LD_VAR 0 2
4335: ARRAY
4336: DIV
4337: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4338: LD_LOC 8
4342: PUSH
4343: LD_EXP 3
4347: LESS
4348: IFFALSE 4360
// nsol := number_of_breastworks ;
4350: LD_ADDR_LOC 8
4354: PUSH
4355: LD_EXP 3
4359: ST_TO_ADDR
// neng := neng - nsol ;
4360: LD_ADDR_LOC 5
4364: PUSH
4365: LD_LOC 5
4369: PUSH
4370: LD_LOC 8
4374: MINUS
4375: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4376: LD_ADDR_LOC 6
4380: PUSH
4381: LD_LOC 5
4385: PUSH
4386: LD_INT 3
4388: PUSH
4389: LD_INT 2
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: PUSH
4396: LD_VAR 0 2
4400: ARRAY
4401: DIV
4402: ST_TO_ADDR
// if ( nsci < 1 ) then
4403: LD_LOC 6
4407: PUSH
4408: LD_INT 1
4410: LESS
4411: IFFALSE 4421
// nsci := 1 ;
4413: LD_ADDR_LOC 6
4417: PUSH
4418: LD_INT 1
4420: ST_TO_ADDR
// neng := neng - nsci ;
4421: LD_ADDR_LOC 5
4425: PUSH
4426: LD_LOC 5
4430: PUSH
4431: LD_LOC 6
4435: MINUS
4436: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4437: LD_ADDR_LOC 7
4441: PUSH
4442: LD_LOC 5
4446: PUSH
4447: LD_INT 2
4449: DIV
4450: PUSH
4451: LD_INT 0
4453: PUSH
4454: EMPTY
4455: LIST
4456: LIST
4457: PUSH
4458: LD_VAR 0 2
4462: ARRAY
4463: ST_TO_ADDR
// neng := neng - nmech ;
4464: LD_ADDR_LOC 5
4468: PUSH
4469: LD_LOC 5
4473: PUSH
4474: LD_LOC 7
4478: MINUS
4479: ST_TO_ADDR
// if ( neng < 1 ) then
4480: LD_LOC 5
4484: PUSH
4485: LD_INT 1
4487: LESS
4488: IFFALSE 4498
// neng := 1 ;
4490: LD_ADDR_LOC 5
4494: PUSH
4495: LD_INT 1
4497: ST_TO_ADDR
// end ;
4498: LD_VAR 0 1
4502: RET
// starting begin disable ( 98 ) ;
4503: LD_INT 98
4505: DISABLE_MARKED
// disable ( 99 ) ;
4506: LD_INT 99
4508: DISABLE_MARKED
// disable ( 400 ) ;
4509: LD_INT 400
4511: DISABLE_MARKED
// disable ( 401 ) ;
4512: LD_INT 401
4514: DISABLE_MARKED
// disable ( 600 ) ;
4515: LD_INT 600
4517: DISABLE_MARKED
// mp_selectmsg := true ;
4518: LD_ADDR_OWVAR 13
4522: PUSH
4523: LD_INT 1
4525: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4526: CALL 68 0 0
// prepare_map_coordinates ;
4530: CALL 1677 0 0
// set_shared_visions_and_alliances ;
4534: CALL 2164 0 0
// ResetFog ;
4538: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4542: LD_OWVAR 2
4546: PPUSH
4547: CALL_OW 520
// prepare_sides ;
4551: CALL 4204 0 0
// Init_Win_Condition ;
4555: CALL 16318 0 0
// InitLimits ;
4559: CALL 10138 0 0
// ShowTimer ;
4563: CALL 11075 0 0
// init_shipments_and_respawning ;
4567: CALL 5692 0 0
// music_nat := Side_Nations [ your_side ] ;
4571: LD_ADDR_OWVAR 71
4575: PUSH
4576: LD_EXP 21
4580: PUSH
4581: LD_OWVAR 2
4585: ARRAY
4586: ST_TO_ADDR
// if IAmSpec then
4587: CALL_OW 531
4591: IFFALSE 4615
// begin fogoff ( true ) ;
4593: LD_INT 1
4595: PPUSH
4596: CALL_OW 344
// CenterNowOnXY ( 79 , 59 ) ;
4600: LD_INT 79
4602: PPUSH
4603: LD_INT 59
4605: PPUSH
4606: CALL_OW 86
// enable ( 400 ) ;
4610: LD_INT 400
4612: ENABLE_MARKED
// end else
4613: GO 4661
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4615: LD_EXP 26
4619: PUSH
4620: LD_EXP 20
4624: PUSH
4625: LD_OWVAR 2
4629: ARRAY
4630: ARRAY
4631: PUSH
4632: LD_INT 1
4634: ARRAY
4635: PPUSH
4636: LD_EXP 26
4640: PUSH
4641: LD_EXP 20
4645: PUSH
4646: LD_OWVAR 2
4650: ARRAY
4651: ARRAY
4652: PUSH
4653: LD_INT 2
4655: ARRAY
4656: PPUSH
4657: CALL_OW 86
// end ; InitApeman ;
4661: CALL 4867 0 0
// if def_builduptime then
4665: LD_EXP 51
4669: IFFALSE 4675
// BeginBuildUp ;
4671: CALL 11523 0 0
// end ; end_of_file
4675: END
// every 20 20$00 trigger apemanNumber do
4676: LD_EXP 29
4680: IFFALSE 4713
4682: GO 4684
4684: DISABLE
// begin enable ;
4685: ENABLE
// if apeLevel >= 8 then
4686: LD_EXP 34
4690: PUSH
4691: LD_INT 8
4693: GREATEREQUAL
4694: IFFALSE 4699
// disable else
4696: DISABLE
4697: GO 4713
// apeLevel := apeLevel + 1 ;
4699: LD_ADDR_EXP 34
4703: PUSH
4704: LD_EXP 34
4708: PUSH
4709: LD_INT 1
4711: PLUS
4712: ST_TO_ADDR
// end ;
4713: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
4714: LD_EXP 29
4718: PUSH
4719: LD_EXP 30
4723: LESS
4724: IFFALSE 4864
4726: GO 4728
4728: DISABLE
4729: LD_INT 0
4731: PPUSH
4732: PPUSH
4733: PPUSH
4734: PPUSH
// begin enable ;
4735: ENABLE
// for i := 1 to apemanPos do
4736: LD_ADDR_VAR 0 1
4740: PUSH
4741: DOUBLE
4742: LD_INT 1
4744: DEC
4745: ST_TO_ADDR
4746: LD_EXP 32
4750: PUSH
4751: FOR_TO
4752: IFFALSE 4862
// begin if apemanPlayerCount [ i ] then
4754: LD_EXP 33
4758: PUSH
4759: LD_VAR 0 1
4763: ARRAY
4764: IFFALSE 4860
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
4766: LD_EXP 33
4770: PUSH
4771: LD_VAR 0 1
4775: ARRAY
4776: PUSH
4777: LD_EXP 32
4781: PUSH
4782: LD_VAR 0 1
4786: ARRAY
4787: GREATER
4788: IFFALSE 4860
// begin ape := PrepareApeman ;
4790: LD_ADDR_VAR 0 2
4794: PUSH
4795: CALL 5367 0 0
4799: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
4800: LD_VAR 0 2
4804: PPUSH
4805: LD_EXP 35
4809: PUSH
4810: LD_VAR 0 1
4814: ARRAY
4815: PPUSH
4816: LD_INT 0
4818: PPUSH
4819: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
4823: LD_ADDR_EXP 32
4827: PUSH
4828: LD_EXP 32
4832: PPUSH
4833: LD_VAR 0 1
4837: PPUSH
4838: LD_EXP 32
4842: PUSH
4843: LD_VAR 0 1
4847: ARRAY
4848: PUSH
4849: LD_VAR 0 2
4853: UNION
4854: PPUSH
4855: CALL_OW 1
4859: ST_TO_ADDR
// end ; end ; end ;
4860: GO 4751
4862: POP
4863: POP
// end ;
4864: PPOPN 4
4866: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
4867: LD_INT 0
4869: PPUSH
4870: PPUSH
4871: PPUSH
4872: PPUSH
4873: PPUSH
4874: PPUSH
4875: PPUSH
// playersAmount := 0 ;
4876: LD_ADDR_VAR 0 3
4880: PUSH
4881: LD_INT 0
4883: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , ] ;
4884: LD_ADDR_VAR 0 7
4888: PUSH
4889: LD_INT 13
4891: PUSH
4892: LD_INT 14
4894: PUSH
4895: LD_INT 15
4897: PUSH
4898: LD_INT 16
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4907: LD_ADDR_EXP 35
4911: PUSH
4912: LD_INT 0
4914: PUSH
4915: LD_INT 0
4917: PUSH
4918: LD_INT 0
4920: PUSH
4921: LD_INT 0
4923: PUSH
4924: LD_INT 0
4926: PUSH
4927: LD_INT 0
4929: PUSH
4930: LD_INT 0
4932: PUSH
4933: LD_INT 0
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: LIST
4944: LIST
4945: ST_TO_ADDR
// for j = 1 to Side_Positions do
4946: LD_ADDR_VAR 0 4
4950: PUSH
4951: DOUBLE
4952: LD_INT 1
4954: DEC
4955: ST_TO_ADDR
4956: LD_EXP 20
4960: PUSH
4961: FOR_TO
4962: IFFALSE 5029
// if Side_Positions [ j ] then
4964: LD_EXP 20
4968: PUSH
4969: LD_VAR 0 4
4973: ARRAY
4974: IFFALSE 5027
// begin playersAmount := playersAmount + 1 ;
4976: LD_ADDR_VAR 0 3
4980: PUSH
4981: LD_VAR 0 3
4985: PUSH
4986: LD_INT 1
4988: PLUS
4989: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
4990: LD_ADDR_EXP 35
4994: PUSH
4995: LD_EXP 35
4999: PPUSH
5000: LD_VAR 0 4
5004: PPUSH
5005: LD_VAR 0 7
5009: PUSH
5010: LD_EXP 20
5014: PUSH
5015: LD_VAR 0 4
5019: ARRAY
5020: ARRAY
5021: PPUSH
5022: CALL_OW 1
5026: ST_TO_ADDR
// end ;
5027: GO 4961
5029: POP
5030: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5031: LD_ADDR_EXP 31
5035: PUSH
5036: LD_INT 3
5038: PUSH
5039: LD_EXP 13
5043: MUL
5044: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5045: LD_ADDR_EXP 29
5049: PUSH
5050: LD_VAR 0 3
5054: PUSH
5055: LD_EXP 31
5059: MUL
5060: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5061: LD_ADDR_EXP 30
5065: PUSH
5066: LD_EXP 29
5070: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5071: LD_ADDR_EXP 32
5075: PUSH
5076: LD_INT 0
5078: PUSH
5079: LD_INT 0
5081: PUSH
5082: LD_INT 0
5084: PUSH
5085: LD_INT 0
5087: PUSH
5088: LD_INT 0
5090: PUSH
5091: LD_INT 0
5093: PUSH
5094: LD_INT 0
5096: PUSH
5097: LD_INT 0
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: LIST
5109: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5110: LD_ADDR_EXP 33
5114: PUSH
5115: LD_INT 0
5117: PUSH
5118: LD_INT 0
5120: PUSH
5121: LD_INT 0
5123: PUSH
5124: LD_INT 0
5126: PUSH
5127: LD_INT 0
5129: PUSH
5130: LD_INT 0
5132: PUSH
5133: LD_INT 0
5135: PUSH
5136: LD_INT 0
5138: PUSH
5139: EMPTY
5140: LIST
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: LIST
5146: LIST
5147: LIST
5148: ST_TO_ADDR
// apeLevel := 1 ;
5149: LD_ADDR_EXP 34
5153: PUSH
5154: LD_INT 1
5156: ST_TO_ADDR
// if not apemanNumber then
5157: LD_EXP 29
5161: NOT
5162: IFFALSE 5166
// exit ;
5164: GO 5362
// for i := 1 to apemanPerPlayer do
5166: LD_ADDR_VAR 0 2
5170: PUSH
5171: DOUBLE
5172: LD_INT 1
5174: DEC
5175: ST_TO_ADDR
5176: LD_EXP 31
5180: PUSH
5181: FOR_TO
5182: IFFALSE 5360
// begin for j := 1 to Side_Positions do
5184: LD_ADDR_VAR 0 4
5188: PUSH
5189: DOUBLE
5190: LD_INT 1
5192: DEC
5193: ST_TO_ADDR
5194: LD_EXP 20
5198: PUSH
5199: FOR_TO
5200: IFFALSE 5356
// if Side_Positions [ j ] then
5202: LD_EXP 20
5206: PUSH
5207: LD_VAR 0 4
5211: ARRAY
5212: IFFALSE 5354
// begin pos := Side_Positions [ j ] ;
5214: LD_ADDR_VAR 0 6
5218: PUSH
5219: LD_EXP 20
5223: PUSH
5224: LD_VAR 0 4
5228: ARRAY
5229: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5230: LD_ADDR_EXP 33
5234: PUSH
5235: LD_EXP 33
5239: PPUSH
5240: LD_VAR 0 4
5244: PPUSH
5245: LD_EXP 33
5249: PUSH
5250: LD_VAR 0 4
5254: ARRAY
5255: PUSH
5256: LD_INT 1
5258: PLUS
5259: PPUSH
5260: CALL_OW 1
5264: ST_TO_ADDR
// ape := PrepareApeman ;
5265: LD_ADDR_VAR 0 5
5269: PUSH
5270: CALL 5367 0 0
5274: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5275: LD_ADDR_EXP 32
5279: PUSH
5280: LD_EXP 32
5284: PPUSH
5285: LD_VAR 0 4
5289: PPUSH
5290: LD_EXP 32
5294: PUSH
5295: LD_VAR 0 4
5299: ARRAY
5300: PPUSH
5301: LD_EXP 32
5305: PUSH
5306: LD_VAR 0 4
5310: ARRAY
5311: PUSH
5312: LD_INT 1
5314: PLUS
5315: PPUSH
5316: LD_VAR 0 5
5320: PPUSH
5321: CALL_OW 1
5325: PPUSH
5326: CALL_OW 1
5330: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5331: LD_VAR 0 5
5335: PPUSH
5336: LD_EXP 35
5340: PUSH
5341: LD_VAR 0 4
5345: ARRAY
5346: PPUSH
5347: LD_INT 0
5349: PPUSH
5350: CALL_OW 49
// end ;
5354: GO 5199
5356: POP
5357: POP
// end ;
5358: GO 5181
5360: POP
5361: POP
// end ;
5362: LD_VAR 0 1
5366: RET
// export function PrepareApeman ; var bonus ; begin
5367: LD_INT 0
5369: PPUSH
5370: PPUSH
// uc_side := 0 ;
5371: LD_ADDR_OWVAR 20
5375: PUSH
5376: LD_INT 0
5378: ST_TO_ADDR
// uc_nation := 0 ;
5379: LD_ADDR_OWVAR 21
5383: PUSH
5384: LD_INT 0
5386: ST_TO_ADDR
// InitHc ;
5387: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
5391: LD_ADDR_VAR 0 2
5395: PUSH
5396: LD_INT 1
5398: NEG
5399: PUSH
5400: LD_INT 0
5402: PUSH
5403: LD_INT 1
5405: PUSH
5406: EMPTY
5407: LIST
5408: LIST
5409: LIST
5410: PUSH
5411: LD_OWVAR 1
5415: PUSH
5416: LD_INT 3
5418: MOD
5419: PUSH
5420: LD_INT 1
5422: PLUS
5423: ARRAY
5424: ST_TO_ADDR
// hc_class := class_apeman ;
5425: LD_ADDR_OWVAR 28
5429: PUSH
5430: LD_INT 12
5432: ST_TO_ADDR
// hc_gallery :=  ;
5433: LD_ADDR_OWVAR 33
5437: PUSH
5438: LD_STRING 
5440: ST_TO_ADDR
// hc_name :=  ;
5441: LD_ADDR_OWVAR 26
5445: PUSH
5446: LD_STRING 
5448: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
5449: LD_ADDR_OWVAR 31
5453: PUSH
5454: LD_EXP 34
5458: PUSH
5459: LD_VAR 0 2
5463: PLUS
5464: PUSH
5465: LD_EXP 34
5469: PUSH
5470: LD_VAR 0 2
5474: PLUS
5475: PUSH
5476: LD_EXP 34
5480: PUSH
5481: LD_VAR 0 2
5485: PLUS
5486: PUSH
5487: LD_EXP 34
5491: PUSH
5492: LD_VAR 0 2
5496: PLUS
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: LIST
5502: LIST
5503: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
5504: LD_ADDR_OWVAR 35
5508: PUSH
5509: LD_INT 10
5511: PUSH
5512: LD_VAR 0 2
5516: MUL
5517: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5518: LD_ADDR_OWVAR 29
5522: PUSH
5523: LD_INT 12
5525: PUSH
5526: LD_INT 10
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: ST_TO_ADDR
// result := CreateHuman ;
5533: LD_ADDR_VAR 0 1
5537: PUSH
5538: CALL_OW 44
5542: ST_TO_ADDR
// end ;
5543: LD_VAR 0 1
5547: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
5548: LD_INT 0
5550: PPUSH
5551: PPUSH
5552: PPUSH
// if not ape then
5553: LD_VAR 0 1
5557: NOT
5558: IFFALSE 5562
// exit ;
5560: GO 5687
// side := GetSide ( ape ) ;
5562: LD_ADDR_VAR 0 3
5566: PUSH
5567: LD_VAR 0 1
5571: PPUSH
5572: CALL_OW 255
5576: ST_TO_ADDR
// if not side then
5577: LD_VAR 0 3
5581: NOT
5582: IFFALSE 5636
// begin for i = 1 to apemanPos do
5584: LD_ADDR_VAR 0 4
5588: PUSH
5589: DOUBLE
5590: LD_INT 1
5592: DEC
5593: ST_TO_ADDR
5594: LD_EXP 32
5598: PUSH
5599: FOR_TO
5600: IFFALSE 5634
// if ape in apemanPos [ i ] then
5602: LD_VAR 0 1
5606: PUSH
5607: LD_EXP 32
5611: PUSH
5612: LD_VAR 0 4
5616: ARRAY
5617: IN
5618: IFFALSE 5632
// begin side := i ;
5620: LD_ADDR_VAR 0 3
5624: PUSH
5625: LD_VAR 0 4
5629: ST_TO_ADDR
// break ;
5630: GO 5634
// end ;
5632: GO 5599
5634: POP
5635: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
5636: LD_ADDR_EXP 32
5640: PUSH
5641: LD_EXP 32
5645: PPUSH
5646: LD_VAR 0 3
5650: PPUSH
5651: LD_EXP 32
5655: PUSH
5656: LD_VAR 0 3
5660: ARRAY
5661: PUSH
5662: LD_VAR 0 1
5666: DIFF
5667: PPUSH
5668: CALL_OW 1
5672: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
5673: LD_ADDR_EXP 29
5677: PUSH
5678: LD_EXP 29
5682: PUSH
5683: LD_INT 1
5685: MINUS
5686: ST_TO_ADDR
// end ; end_of_file
5687: LD_VAR 0 2
5691: RET
// var shipment , respawn , inqueue ; export function init_shipments_and_respawning ; begin
5692: LD_INT 0
5694: PPUSH
// shipment := Rand ( 0 , 3 ) ;
5695: LD_ADDR_LOC 9
5699: PUSH
5700: LD_INT 0
5702: PPUSH
5703: LD_INT 3
5705: PPUSH
5706: CALL_OW 12
5710: ST_TO_ADDR
// respawn := Rand ( 1 , 8 ) ;
5711: LD_ADDR_LOC 10
5715: PUSH
5716: LD_INT 1
5718: PPUSH
5719: LD_INT 8
5721: PPUSH
5722: CALL_OW 12
5726: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5727: LD_ADDR_LOC 11
5731: PUSH
5732: LD_INT 0
5734: PUSH
5735: LD_INT 0
5737: PUSH
5738: LD_INT 0
5740: PUSH
5741: LD_INT 0
5743: PUSH
5744: LD_INT 0
5746: PUSH
5747: LD_INT 0
5749: PUSH
5750: LD_INT 0
5752: PUSH
5753: LD_INT 0
5755: PUSH
5756: EMPTY
5757: LIST
5758: LIST
5759: LIST
5760: LIST
5761: LIST
5762: LIST
5763: LIST
5764: LIST
5765: ST_TO_ADDR
// end ;
5766: LD_VAR 0 1
5770: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
5771: GO 5773
5773: DISABLE
5774: LD_INT 0
5776: PPUSH
5777: PPUSH
5778: PPUSH
5779: PPUSH
// begin if respawning_time_max = 0 then
5780: LD_EXP 11
5784: PUSH
5785: LD_INT 0
5787: EQUAL
5788: IFFALSE 5792
// exit ;
5790: GO 6299
// if respawn = 8 then
5792: LD_LOC 10
5796: PUSH
5797: LD_INT 8
5799: EQUAL
5800: IFFALSE 5812
// respawn := 1 else
5802: LD_ADDR_LOC 10
5806: PUSH
5807: LD_INT 1
5809: ST_TO_ADDR
5810: GO 5826
// respawn := respawn + 1 ;
5812: LD_ADDR_LOC 10
5816: PUSH
5817: LD_LOC 10
5821: PUSH
5822: LD_INT 1
5824: PLUS
5825: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
5826: LD_EXP 20
5830: PUSH
5831: LD_LOC 10
5835: ARRAY
5836: PUSH
5837: LD_LOC 11
5841: PUSH
5842: LD_LOC 10
5846: ARRAY
5847: NOT
5848: AND
5849: IFFALSE 6298
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
5851: LD_ADDR_VAR 0 1
5855: PUSH
5856: LD_INT 21
5858: PUSH
5859: LD_INT 1
5861: PUSH
5862: EMPTY
5863: LIST
5864: LIST
5865: PUSH
5866: LD_INT 22
5868: PUSH
5869: LD_LOC 10
5873: PUSH
5874: EMPTY
5875: LIST
5876: LIST
5877: PUSH
5878: LD_INT 3
5880: PUSH
5881: LD_INT 23
5883: PUSH
5884: LD_INT 0
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: PPUSH
5897: CALL_OW 69
5901: ST_TO_ADDR
// if n < number_of_people then
5902: LD_VAR 0 1
5906: PUSH
5907: LD_EXP 4
5911: LESS
5912: IFFALSE 6295
// begin aktresp := respawn ;
5914: LD_ADDR_VAR 0 3
5918: PUSH
5919: LD_LOC 10
5923: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
5924: LD_ADDR_LOC 11
5928: PUSH
5929: LD_LOC 11
5933: PPUSH
5934: LD_VAR 0 3
5938: PPUSH
5939: LD_INT 1
5941: PPUSH
5942: CALL_OW 1
5946: ST_TO_ADDR
// enable ;
5947: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
5948: LD_EXP 10
5952: PPUSH
5953: LD_EXP 11
5957: PPUSH
5958: CALL_OW 12
5962: PPUSH
5963: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
5967: LD_ADDR_LOC 11
5971: PUSH
5972: LD_LOC 11
5976: PPUSH
5977: LD_VAR 0 3
5981: PPUSH
5982: LD_INT 0
5984: PPUSH
5985: CALL_OW 1
5989: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
5990: LD_ADDR_VAR 0 2
5994: PUSH
5995: LD_INT 21
5997: PUSH
5998: LD_INT 3
6000: PUSH
6001: EMPTY
6002: LIST
6003: LIST
6004: PUSH
6005: LD_INT 2
6007: PUSH
6008: LD_INT 30
6010: PUSH
6011: LD_INT 0
6013: PUSH
6014: EMPTY
6015: LIST
6016: LIST
6017: PUSH
6018: LD_INT 30
6020: PUSH
6021: LD_INT 1
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: PUSH
6028: EMPTY
6029: LIST
6030: LIST
6031: LIST
6032: PUSH
6033: LD_INT 50
6035: PUSH
6036: EMPTY
6037: LIST
6038: PUSH
6039: LD_INT 22
6041: PUSH
6042: LD_VAR 0 3
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: PPUSH
6057: CALL_OW 69
6061: ST_TO_ADDR
// if building_list = 0 then
6062: LD_VAR 0 2
6066: PUSH
6067: LD_INT 0
6069: EQUAL
6070: IFFALSE 6115
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
6072: LD_ADDR_VAR 0 2
6076: PUSH
6077: LD_INT 21
6079: PUSH
6080: LD_INT 3
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: PUSH
6087: LD_INT 50
6089: PUSH
6090: EMPTY
6091: LIST
6092: PUSH
6093: LD_INT 22
6095: PUSH
6096: LD_VAR 0 3
6100: PUSH
6101: EMPTY
6102: LIST
6103: LIST
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: LIST
6109: PPUSH
6110: CALL_OW 69
6114: ST_TO_ADDR
// if building_list = 0 then
6115: LD_VAR 0 2
6119: PUSH
6120: LD_INT 0
6122: EQUAL
6123: IFFALSE 6127
// exit ;
6125: GO 6299
// hc_name :=  ;
6127: LD_ADDR_OWVAR 26
6131: PUSH
6132: LD_STRING 
6134: ST_TO_ADDR
// hc_importance := 0 ;
6135: LD_ADDR_OWVAR 32
6139: PUSH
6140: LD_INT 0
6142: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6143: LD_INT 0
6145: PPUSH
6146: LD_INT 0
6148: PPUSH
6149: LD_EXP 5
6153: PUSH
6154: LD_INT 2
6156: DIV
6157: PPUSH
6158: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
6162: LD_ADDR_OWVAR 21
6166: PUSH
6167: LD_EXP 21
6171: PUSH
6172: LD_VAR 0 3
6176: ARRAY
6177: ST_TO_ADDR
// uc_side := aktresp ;
6178: LD_ADDR_OWVAR 20
6182: PUSH
6183: LD_VAR 0 3
6187: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
6188: LD_ADDR_VAR 0 4
6192: PUSH
6193: LD_VAR 0 2
6197: PUSH
6198: LD_INT 1
6200: PPUSH
6201: LD_VAR 0 2
6205: PUSH
6206: LD_INT 0
6208: PLUS
6209: PPUSH
6210: CALL_OW 12
6214: ARRAY
6215: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
6216: LD_VAR 0 4
6220: PPUSH
6221: CALL_OW 266
6225: PUSH
6226: LD_INT 0
6228: PUSH
6229: LD_INT 1
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: IN
6236: IFFALSE 6248
// n = 25 else
6238: LD_ADDR_VAR 0 1
6242: PUSH
6243: LD_INT 25
6245: ST_TO_ADDR
6246: GO 6256
// n = 10 ;
6248: LD_ADDR_VAR 0 1
6252: PUSH
6253: LD_INT 10
6255: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
6256: CALL_OW 44
6260: PPUSH
6261: LD_VAR 0 4
6265: PPUSH
6266: CALL_OW 250
6270: PPUSH
6271: LD_VAR 0 4
6275: PPUSH
6276: CALL_OW 251
6280: PPUSH
6281: LD_VAR 0 1
6285: PPUSH
6286: LD_INT 1
6288: PPUSH
6289: CALL_OW 50
// end else
6293: GO 6296
// enable ;
6295: ENABLE
// end else
6296: GO 6299
// enable ;
6298: ENABLE
// end ;
6299: PPOPN 4
6301: END
// every 1 1$0 + 0 0$0.3 do
6302: GO 6304
6304: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
6305: LD_INT 4
6307: PPUSH
6308: LD_INT 5
6310: PPUSH
6311: CALL_OW 12
6315: PPUSH
6316: LD_INT 1
6318: PPUSH
6319: CALL_OW 57
// enable ;
6323: ENABLE
// end ;
6324: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
6325: GO 6327
6327: DISABLE
6328: LD_INT 0
6330: PPUSH
6331: PPUSH
// begin case tick of 1 .. 1 1$0 :
6332: LD_OWVAR 1
6336: PUSH
6337: LD_INT 1
6339: DOUBLE
6340: GREATEREQUAL
6341: IFFALSE 6349
6343: LD_INT 2100
6345: DOUBLE
6346: LESSEQUAL
6347: IFTRUE 6351
6349: GO 6379
6351: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$20 ) ) ; 1 1$0 + 1 .. 5 5$0 :
6352: LD_EXP 8
6356: PUSH
6357: LD_INT 100
6359: DIVREAL
6360: PUSH
6361: LD_INT 350
6363: PPUSH
6364: LD_INT 700
6366: PPUSH
6367: CALL_OW 12
6371: MUL
6372: PPUSH
6373: CALL_OW 67
6377: GO 6681
6379: LD_INT 2100
6381: PUSH
6382: LD_INT 1
6384: PLUS
6385: DOUBLE
6386: GREATEREQUAL
6387: IFFALSE 6395
6389: LD_INT 10500
6391: DOUBLE
6392: LESSEQUAL
6393: IFTRUE 6397
6395: GO 6425
6397: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$20 , 0 0$35 ) ) ; 5 5$0 + 1 .. 10 10$0 :
6398: LD_EXP 8
6402: PUSH
6403: LD_INT 100
6405: DIVREAL
6406: PUSH
6407: LD_INT 700
6409: PPUSH
6410: LD_INT 1225
6412: PPUSH
6413: CALL_OW 12
6417: MUL
6418: PPUSH
6419: CALL_OW 67
6423: GO 6681
6425: LD_INT 10500
6427: PUSH
6428: LD_INT 1
6430: PLUS
6431: DOUBLE
6432: GREATEREQUAL
6433: IFFALSE 6441
6435: LD_INT 21000
6437: DOUBLE
6438: LESSEQUAL
6439: IFTRUE 6443
6441: GO 6471
6443: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$35 , 0 0$50 ) ) ; 10 10$0 + 1 .. 20 20$0 :
6444: LD_EXP 8
6448: PUSH
6449: LD_INT 100
6451: DIVREAL
6452: PUSH
6453: LD_INT 1225
6455: PPUSH
6456: LD_INT 1750
6458: PPUSH
6459: CALL_OW 12
6463: MUL
6464: PPUSH
6465: CALL_OW 67
6469: GO 6681
6471: LD_INT 21000
6473: PUSH
6474: LD_INT 1
6476: PLUS
6477: DOUBLE
6478: GREATEREQUAL
6479: IFFALSE 6487
6481: LD_INT 42000
6483: DOUBLE
6484: LESSEQUAL
6485: IFTRUE 6489
6487: GO 6517
6489: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$10 ) ) ; 20 20$0 + 1 .. 30 30$0 :
6490: LD_EXP 8
6494: PUSH
6495: LD_INT 100
6497: DIVREAL
6498: PUSH
6499: LD_INT 1750
6501: PPUSH
6502: LD_INT 2450
6504: PPUSH
6505: CALL_OW 12
6509: MUL
6510: PPUSH
6511: CALL_OW 67
6515: GO 6681
6517: LD_INT 42000
6519: PUSH
6520: LD_INT 1
6522: PLUS
6523: DOUBLE
6524: GREATEREQUAL
6525: IFFALSE 6533
6527: LD_INT 63000
6529: DOUBLE
6530: LESSEQUAL
6531: IFTRUE 6535
6533: GO 6563
6535: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 30 30$0 + 1 .. 50 50$0 :
6536: LD_EXP 8
6540: PUSH
6541: LD_INT 100
6543: DIVREAL
6544: PUSH
6545: LD_INT 2450
6547: PPUSH
6548: LD_INT 2800
6550: PPUSH
6551: CALL_OW 12
6555: MUL
6556: PPUSH
6557: CALL_OW 67
6561: GO 6681
6563: LD_INT 63000
6565: PUSH
6566: LD_INT 1
6568: PLUS
6569: DOUBLE
6570: GREATEREQUAL
6571: IFFALSE 6579
6573: LD_INT 105000
6575: DOUBLE
6576: LESSEQUAL
6577: IFTRUE 6581
6579: GO 6609
6581: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$35 ) ) ; 50 50$0 + 1 .. 300 300$0 :
6582: LD_EXP 8
6586: PUSH
6587: LD_INT 100
6589: DIVREAL
6590: PUSH
6591: LD_INT 2800
6593: PPUSH
6594: LD_INT 3325
6596: PPUSH
6597: CALL_OW 12
6601: MUL
6602: PPUSH
6603: CALL_OW 67
6607: GO 6681
6609: LD_INT 105000
6611: PUSH
6612: LD_INT 1
6614: PLUS
6615: DOUBLE
6616: GREATEREQUAL
6617: IFFALSE 6625
6619: LD_INT 630000
6621: DOUBLE
6622: LESSEQUAL
6623: IFTRUE 6627
6625: GO 6655
6627: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$35 , 2 2$0 ) ) ; else
6628: LD_EXP 8
6632: PUSH
6633: LD_INT 100
6635: DIVREAL
6636: PUSH
6637: LD_INT 3325
6639: PPUSH
6640: LD_INT 4200
6642: PPUSH
6643: CALL_OW 12
6647: MUL
6648: PPUSH
6649: CALL_OW 67
6653: GO 6681
6655: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
6656: LD_EXP 8
6660: PUSH
6661: LD_INT 100
6663: DIVREAL
6664: PUSH
6665: LD_INT 4200
6667: PPUSH
6668: LD_INT 5250
6670: PPUSH
6671: CALL_OW 12
6675: MUL
6676: PPUSH
6677: CALL_OW 67
// amount := Rand ( 1 , 5 ) ;
6681: LD_ADDR_VAR 0 2
6685: PUSH
6686: LD_INT 1
6688: PPUSH
6689: LD_INT 5
6691: PPUSH
6692: CALL_OW 12
6696: ST_TO_ADDR
// for i = 1 to 2 do
6697: LD_ADDR_VAR 0 1
6701: PUSH
6702: DOUBLE
6703: LD_INT 1
6705: DEC
6706: ST_TO_ADDR
6707: LD_INT 2
6709: PUSH
6710: FOR_TO
6711: IFFALSE 6738
// CreateCratesArea ( amount , BuildUpAreas [ i ] , true ) ;
6713: LD_VAR 0 2
6717: PPUSH
6718: LD_EXP 55
6722: PUSH
6723: LD_VAR 0 1
6727: ARRAY
6728: PPUSH
6729: LD_INT 1
6731: PPUSH
6732: CALL_OW 55
6736: GO 6710
6738: POP
6739: POP
// enable ;
6740: ENABLE
// end ; end_of_file
6741: PPOPN 2
6743: END
// var activated ; var hadziove ; every 0 0$1 do
6744: GO 6746
6746: DISABLE
// begin wait ( Rand ( 3 3$0 , 10 10$0 ) ) ;
6747: LD_INT 6300
6749: PPUSH
6750: LD_INT 21000
6752: PPUSH
6753: CALL_OW 12
6757: PPUSH
6758: CALL_OW 67
// SetAreaMapShow ( Tree , 1 ) ;
6762: LD_INT 3
6764: PPUSH
6765: LD_INT 1
6767: PPUSH
6768: CALL_OW 424
// activated := true ;
6772: LD_ADDR_LOC 12
6776: PUSH
6777: LD_INT 1
6779: ST_TO_ADDR
// end ;
6780: END
// every 0 0$1 trigger activated do var i , un ;
6781: LD_LOC 12
6785: IFFALSE 7030
6787: GO 6789
6789: DISABLE
6790: LD_INT 0
6792: PPUSH
6793: PPUSH
// begin if not def_tree_function then
6794: LD_EXP 1
6798: NOT
6799: IFFALSE 6803
// exit ;
6801: GO 7030
// ExtraStrings := [ #MultiSmall-Tree & def_tree_function ] ;
6803: LD_ADDR_EXP 53
6807: PUSH
6808: LD_STRING #MultiSmall-Tree
6810: PUSH
6811: LD_EXP 1
6815: STR
6816: PUSH
6817: EMPTY
6818: LIST
6819: ST_TO_ADDR
// for un in FilterUnitsInArea ( Tree , [ f_type , unit_human ] ) diff hadziove do
6820: LD_ADDR_VAR 0 2
6824: PUSH
6825: LD_INT 3
6827: PPUSH
6828: LD_INT 21
6830: PUSH
6831: LD_INT 1
6833: PUSH
6834: EMPTY
6835: LIST
6836: LIST
6837: PPUSH
6838: CALL_OW 70
6842: PUSH
6843: LD_LOC 13
6847: DIFF
6848: PUSH
6849: FOR_IN
6850: IFFALSE 7011
// begin if GetClass ( un ) in [ class_soldier , class_engineer , class_mechanic , class_scientistic , class_sniper , class_bazooker , class_mortar ] then
6852: LD_VAR 0 2
6856: PPUSH
6857: CALL_OW 257
6861: PUSH
6862: LD_INT 1
6864: PUSH
6865: LD_INT 2
6867: PUSH
6868: LD_INT 3
6870: PUSH
6871: LD_INT 4
6873: PUSH
6874: LD_INT 5
6876: PUSH
6877: LD_INT 9
6879: PUSH
6880: LD_INT 8
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: IN
6892: IFFALSE 6941
// for i := 1 to 4 do
6894: LD_ADDR_VAR 0 1
6898: PUSH
6899: DOUBLE
6900: LD_INT 1
6902: DEC
6903: ST_TO_ADDR
6904: LD_INT 4
6906: PUSH
6907: FOR_TO
6908: IFFALSE 6937
// GiveSkillBonus ( un , i , tree_function [ i ] ) else
6910: LD_VAR 0 2
6914: PPUSH
6915: LD_VAR 0 1
6919: PPUSH
6920: LD_EXP 14
6924: PUSH
6925: LD_VAR 0 1
6929: ARRAY
6930: PPUSH
6931: CALL_OW 238
6935: GO 6907
6937: POP
6938: POP
6939: GO 7009
// if un in [ class_apeman , class_apeman_engineer , class_apeman_kamikaze , class_apeman_soldier ] then
6941: LD_VAR 0 2
6945: PUSH
6946: LD_INT 12
6948: PUSH
6949: LD_INT 16
6951: PUSH
6952: LD_INT 17
6954: PUSH
6955: LD_INT 15
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: IN
6964: IFFALSE 7009
// for i := 1 to 4 do
6966: LD_ADDR_VAR 0 1
6970: PUSH
6971: DOUBLE
6972: LD_INT 1
6974: DEC
6975: ST_TO_ADDR
6976: LD_INT 4
6978: PUSH
6979: FOR_TO
6980: IFFALSE 7007
// GiveSkillBonus ( un , i , tree_function [ 5 ] ) ;
6982: LD_VAR 0 2
6986: PPUSH
6987: LD_VAR 0 1
6991: PPUSH
6992: LD_EXP 14
6996: PUSH
6997: LD_INT 5
6999: ARRAY
7000: PPUSH
7001: CALL_OW 238
7005: GO 6979
7007: POP
7008: POP
// end ;
7009: GO 6849
7011: POP
7012: POP
// hadziove := hadziove ^ un ;
7013: LD_ADDR_LOC 13
7017: PUSH
7018: LD_LOC 13
7022: PUSH
7023: LD_VAR 0 2
7027: ADD
7028: ST_TO_ADDR
// enable ;
7029: ENABLE
// end ; end_of_file
7030: PPOPN 2
7032: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7033: LD_VAR 0 1
7037: PPUSH
7038: CALL_OW 266
7042: PUSH
7043: LD_INT 0
7045: PUSH
7046: LD_INT 1
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: IN
7053: IFFALSE 7078
// SetBName ( b , @ & GetSide ( b ) ) ;
7055: LD_VAR 0 1
7059: PPUSH
7060: LD_STRING @
7062: PUSH
7063: LD_VAR 0 1
7067: PPUSH
7068: CALL_OW 255
7072: STR
7073: PPUSH
7074: CALL_OW 500
// if def_game_rules then
7078: LD_EXP 37
7082: IFFALSE 7119
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
7084: LD_VAR 0 1
7088: PPUSH
7089: LD_VAR 0 1
7093: PPUSH
7094: CALL_OW 266
7098: PPUSH
7099: LD_VAR 0 1
7103: PPUSH
7104: CALL_OW 255
7108: PPUSH
7109: LD_INT 0
7111: PPUSH
7112: LD_INT 1
7114: PPUSH
7115: CALL 10539 0 5
// end ;
7119: PPOPN 2
7121: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7122: LD_VAR 0 1
7126: PPUSH
7127: CALL_OW 266
7131: PUSH
7132: LD_INT 0
7134: PUSH
7135: LD_INT 1
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: IN
7142: IFFALSE 7167
// SetBName ( b , @ & GetSide ( b ) ) ;
7144: LD_VAR 0 1
7148: PPUSH
7149: LD_STRING @
7151: PUSH
7152: LD_VAR 0 1
7156: PPUSH
7157: CALL_OW 255
7161: STR
7162: PPUSH
7163: CALL_OW 500
// if def_game_rules then
7167: LD_EXP 37
7171: IFFALSE 7210
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7173: LD_VAR 0 1
7177: PPUSH
7178: LD_VAR 0 1
7182: PPUSH
7183: CALL_OW 266
7187: PPUSH
7188: LD_VAR 0 1
7192: PPUSH
7193: CALL_OW 255
7197: PPUSH
7198: LD_VAR 0 2
7202: PPUSH
7203: LD_INT 1
7205: PPUSH
7206: CALL 10539 0 5
// end ;
7210: PPOPN 3
7212: END
// on VehicleConstructed ( veh , fac ) do var side ;
7213: LD_INT 0
7215: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7216: LD_VAR 0 1
7220: PPUSH
7221: CALL_OW 263
7225: PUSH
7226: LD_INT 5
7228: EQUAL
7229: IFFALSE 7371
// begin side := GetSide ( veh ) ;
7231: LD_ADDR_VAR 0 3
7235: PUSH
7236: LD_VAR 0 1
7240: PPUSH
7241: CALL_OW 255
7245: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7246: LD_ADDR_EXP 32
7250: PUSH
7251: LD_EXP 32
7255: PPUSH
7256: LD_VAR 0 3
7260: PPUSH
7261: LD_EXP 32
7265: PUSH
7266: LD_VAR 0 3
7270: ARRAY
7271: PPUSH
7272: LD_INT 52
7274: PUSH
7275: EMPTY
7276: LIST
7277: PPUSH
7278: CALL_OW 72
7282: PUSH
7283: LD_INT 22
7285: PUSH
7286: LD_VAR 0 3
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PUSH
7295: LD_INT 2
7297: PUSH
7298: LD_INT 33
7300: PUSH
7301: LD_INT 5
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: PUSH
7308: LD_INT 25
7310: PUSH
7311: LD_INT 12
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: PUSH
7318: LD_INT 25
7320: PUSH
7321: LD_INT 15
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: PUSH
7328: LD_INT 25
7330: PUSH
7331: LD_INT 16
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: PUSH
7338: LD_INT 25
7340: PUSH
7341: LD_INT 17
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: PUSH
7356: EMPTY
7357: LIST
7358: LIST
7359: PPUSH
7360: CALL_OW 69
7364: UNION
7365: PPUSH
7366: CALL_OW 1
7370: ST_TO_ADDR
// end ; end ;
7371: PPOPN 3
7373: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7374: LD_INT 0
7376: PPUSH
7377: PPUSH
7378: PPUSH
7379: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7380: LD_VAR 0 1
7384: PPUSH
7385: CALL_OW 257
7389: PUSH
7390: LD_INT 12
7392: PUSH
7393: LD_INT 15
7395: PUSH
7396: LD_INT 17
7398: PUSH
7399: LD_INT 16
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: LIST
7406: LIST
7407: IN
7408: PUSH
7409: LD_VAR 0 1
7413: PPUSH
7414: CALL_OW 263
7418: PUSH
7419: LD_INT 5
7421: EQUAL
7422: OR
7423: IFFALSE 7434
// ApeKilled ( j ) ;
7425: LD_VAR 0 1
7429: PPUSH
7430: CALL 5548 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7434: LD_VAR 0 1
7438: PPUSH
7439: CALL_OW 266
7443: PUSH
7444: LD_INT 0
7446: PUSH
7447: LD_INT 1
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: IN
7454: IFFALSE 7536
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7456: LD_ADDR_VAR 0 4
7460: PUSH
7461: LD_EXP 20
7465: PUSH
7466: LD_VAR 0 1
7470: PPUSH
7471: CALL_OW 255
7475: ARRAY
7476: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7477: LD_ADDR_VAR 0 2
7481: PUSH
7482: LD_EXP 26
7486: PUSH
7487: LD_VAR 0 4
7491: ARRAY
7492: PUSH
7493: LD_INT 1
7495: ARRAY
7496: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7497: LD_ADDR_VAR 0 3
7501: PUSH
7502: LD_EXP 26
7506: PUSH
7507: LD_VAR 0 4
7511: ARRAY
7512: PUSH
7513: LD_INT 2
7515: ARRAY
7516: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7517: LD_VAR 0 2
7521: PPUSH
7522: LD_VAR 0 3
7526: PPUSH
7527: CALL_OW 420
7531: PPUSH
7532: CALL_OW 419
// end ; if def_game_rules then
7536: LD_EXP 37
7540: IFFALSE 7639
// if ( GetType ( j ) = 3 ) then
7542: LD_VAR 0 1
7546: PPUSH
7547: CALL_OW 247
7551: PUSH
7552: LD_INT 3
7554: EQUAL
7555: IFFALSE 7595
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7557: LD_VAR 0 1
7561: PPUSH
7562: LD_VAR 0 1
7566: PPUSH
7567: CALL_OW 266
7571: PPUSH
7572: LD_VAR 0 1
7576: PPUSH
7577: CALL_OW 255
7581: PPUSH
7582: LD_INT 0
7584: PPUSH
7585: LD_INT 1
7587: NEG
7588: PPUSH
7589: CALL 10539 0 5
7593: GO 7639
// if ( GetChassis ( j ) = 25 ) then
7595: LD_VAR 0 1
7599: PPUSH
7600: CALL_OW 265
7604: PUSH
7605: LD_INT 25
7607: EQUAL
7608: IFFALSE 7639
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7610: LD_VAR 0 1
7614: PPUSH
7615: LD_INT 37
7617: PPUSH
7618: LD_VAR 0 1
7622: PPUSH
7623: CALL_OW 255
7627: PPUSH
7628: LD_INT 0
7630: PPUSH
7631: LD_INT 1
7633: NEG
7634: PPUSH
7635: CALL 10539 0 5
// end ;
7639: PPOPN 5
7641: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7642: LD_EXP 37
7646: PUSH
7647: LD_VAR 0 1
7651: PPUSH
7652: CALL_OW 265
7656: PUSH
7657: LD_INT 25
7659: EQUAL
7660: AND
7661: IFFALSE 7693
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
7663: LD_VAR 0 1
7667: PPUSH
7668: LD_INT 37
7670: PPUSH
7671: LD_VAR 0 1
7675: PPUSH
7676: CALL_OW 255
7680: PPUSH
7681: LD_VAR 0 3
7685: PPUSH
7686: LD_INT 1
7688: PPUSH
7689: CALL 10539 0 5
// end ;
7693: PPOPN 4
7695: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7696: LD_VAR 0 1
7700: PPUSH
7701: LD_VAR 0 2
7705: PPUSH
7706: LD_VAR 0 3
7710: PPUSH
7711: LD_OWVAR 2
7715: PPUSH
7716: CALL 11284 0 4
7720: PPOPN 3
7722: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7723: LD_INT 0
7725: PPUSH
7726: PPUSH
// for un in battle_flags_id do
7727: LD_ADDR_VAR 0 2
7731: PUSH
7732: LD_EXP 27
7736: PUSH
7737: FOR_IN
7738: IFFALSE 7813
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7740: LD_VAR 0 2
7744: PPUSH
7745: LD_INT 1
7747: PUSH
7748: LD_LOC 14
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: PUSH
7757: LD_INT 2
7759: PUSH
7760: LD_LOC 14
7764: PUSH
7765: LD_INT 2
7767: DIV
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: PUSH
7773: LD_INT 3
7775: PUSH
7776: LD_LOC 14
7780: PUSH
7781: LD_INT 5
7783: DIV
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: PUSH
7789: LD_INT 20
7791: PUSH
7792: LD_LOC 14
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: PPUSH
7807: CALL_OW 423
7811: GO 7737
7813: POP
7814: POP
// end ;
7815: LD_VAR 0 1
7819: RET
// every 0 0$0.1 do var un ;
7820: GO 7822
7822: DISABLE
7823: LD_INT 0
7825: PPUSH
// begin if not def_morale_flags then
7826: LD_EXP 46
7830: NOT
7831: IFFALSE 7835
// exit ;
7833: GO 7912
// if not morale_decreasing_time then
7835: LD_EXP 9
7839: NOT
7840: IFFALSE 7844
// exit ;
7842: GO 7912
// strength = 100 ;
7844: LD_ADDR_LOC 14
7848: PUSH
7849: LD_INT 100
7851: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7852: LD_EXP 9
7856: PPUSH
7857: CALL_OW 67
// strength := strength - 1 ;
7861: LD_ADDR_LOC 14
7865: PUSH
7866: LD_LOC 14
7870: PUSH
7871: LD_INT 1
7873: MINUS
7874: ST_TO_ADDR
// Update_Flags ;
7875: CALL 7723 0 0
// until not strength ;
7879: LD_LOC 14
7883: NOT
7884: IFFALSE 7852
// for un in battle_flags_id do
7886: LD_ADDR_VAR 0 1
7890: PUSH
7891: LD_EXP 27
7895: PUSH
7896: FOR_IN
7897: IFFALSE 7910
// KillBattleFlag ( un ) ;
7899: LD_VAR 0 1
7903: PPUSH
7904: CALL_OW 419
7908: GO 7896
7910: POP
7911: POP
// end ; end_of_file
7912: PPOPN 1
7914: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
7915: LD_INT 0
7917: PPUSH
7918: PPUSH
// if ( not IAmSpec ) then
7919: CALL_OW 531
7923: NOT
7924: IFFALSE 7940
// Result := Limits_Info ^  ;
7926: LD_ADDR_VAR 0 1
7930: PUSH
7931: LD_LOC 26
7935: PUSH
7936: LD_STRING 
7938: ADD
7939: ST_TO_ADDR
// for i := 1 to 8 do
7940: LD_ADDR_VAR 0 2
7944: PUSH
7945: DOUBLE
7946: LD_INT 1
7948: DEC
7949: ST_TO_ADDR
7950: LD_INT 8
7952: PUSH
7953: FOR_TO
7954: IFFALSE 7999
// if Cheaters [ i ] then
7956: LD_LOC 27
7960: PUSH
7961: LD_VAR 0 2
7965: ARRAY
7966: IFFALSE 7997
// Result := Result ^ [ #Cheater , i , i ] ;
7968: LD_ADDR_VAR 0 1
7972: PUSH
7973: LD_VAR 0 1
7977: PUSH
7978: LD_STRING #Cheater
7980: PUSH
7981: LD_VAR 0 2
7985: PUSH
7986: LD_VAR 0 2
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: LIST
7995: ADD
7996: ST_TO_ADDR
7997: GO 7953
7999: POP
8000: POP
// end ;
8001: LD_VAR 0 1
8005: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
8006: LD_INT 0
8008: PPUSH
8009: PPUSH
8010: PPUSH
8011: PPUSH
8012: PPUSH
// case Game_Type of 10 :
8013: LD_EXP 36
8017: PUSH
8018: LD_INT 10
8020: DOUBLE
8021: EQUAL
8022: IFTRUE 8026
8024: GO 8037
8026: POP
// def_game_rules := 1 ; 11 :
8027: LD_ADDR_EXP 37
8031: PUSH
8032: LD_INT 1
8034: ST_TO_ADDR
8035: GO 8057
8037: LD_INT 11
8039: DOUBLE
8040: EQUAL
8041: IFTRUE 8045
8043: GO 8056
8045: POP
// def_game_rules := 3 ; end ;
8046: LD_ADDR_EXP 37
8050: PUSH
8051: LD_INT 3
8053: ST_TO_ADDR
8054: GO 8057
8056: POP
// case def_game_rules of 0 :
8057: LD_EXP 37
8061: PUSH
8062: LD_INT 0
8064: DOUBLE
8065: EQUAL
8066: IFTRUE 8070
8068: GO 8075
8070: POP
// exit ; 1 :
8071: GO 10133
8073: GO 10033
8075: LD_INT 1
8077: DOUBLE
8078: EQUAL
8079: IFTRUE 8083
8081: GO 8299
8083: POP
// begin def_base_level := 2 ;
8084: LD_ADDR_EXP 38
8088: PUSH
8089: LD_INT 2
8091: ST_TO_ADDR
// def_amount_of_people := 2 ;
8092: LD_ADDR_EXP 39
8096: PUSH
8097: LD_INT 2
8099: ST_TO_ADDR
// def_skill_level := 1 ;
8100: LD_ADDR_EXP 40
8104: PUSH
8105: LD_INT 1
8107: ST_TO_ADDR
// def_starting_resources := 2 ;
8108: LD_ADDR_EXP 41
8112: PUSH
8113: LD_INT 2
8115: ST_TO_ADDR
// def_shipments_density := 1 ;
8116: LD_ADDR_EXP 42
8120: PUSH
8121: LD_INT 1
8123: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8124: LD_ADDR_EXP 43
8128: PUSH
8129: LD_INT 0
8131: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
8132: LD_ADDR_EXP 44
8136: PUSH
8137: LD_INT 1
8139: ST_TO_ADDR
// def_shared_vision := 1 ;
8140: LD_ADDR_EXP 45
8144: PUSH
8145: LD_INT 1
8147: ST_TO_ADDR
// def_morale_flags := 3 ;
8148: LD_ADDR_EXP 46
8152: PUSH
8153: LD_INT 3
8155: ST_TO_ADDR
// def_siberite_detection := 1 ;
8156: LD_ADDR_EXP 47
8160: PUSH
8161: LD_INT 1
8163: ST_TO_ADDR
// def_people_respawning := 1 ;
8164: LD_ADDR_EXP 48
8168: PUSH
8169: LD_INT 1
8171: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
8172: LD_ADDR_EXP 49
8176: PUSH
8177: LD_INT 1
8179: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8180: LD_ADDR_EXP 50
8184: PUSH
8185: LD_INT 0
8187: ST_TO_ADDR
// def_builduptime := 2 ;
8188: LD_ADDR_EXP 51
8192: PUSH
8193: LD_INT 2
8195: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
8196: LD_ADDR_VAR 0 2
8200: PUSH
8201: EMPTY
8202: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8203: LD_ADDR_VAR 0 3
8207: PUSH
8208: EMPTY
8209: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8210: LD_ADDR_LOC 21
8214: PUSH
8215: EMPTY
8216: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8217: LD_ADDR_LOC 22
8221: PUSH
8222: EMPTY
8223: ST_TO_ADDR
// Banned_Controls := [ ] ;
8224: LD_ADDR_LOC 23
8228: PUSH
8229: EMPTY
8230: ST_TO_ADDR
// Banned_Engines := [ ] ;
8231: LD_ADDR_LOC 24
8235: PUSH
8236: EMPTY
8237: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
8238: LD_ADDR_LOC 19
8242: PUSH
8243: LD_INT 37
8245: PUSH
8246: EMPTY
8247: LIST
8248: PUSH
8249: LD_INT 4
8251: PUSH
8252: LD_INT 5
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: PUSH
8259: LD_INT 31
8261: PUSH
8262: LD_INT 32
8264: PUSH
8265: LD_INT 33
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: LIST
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: LIST
8277: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
8278: LD_ADDR_LOC 20
8282: PUSH
8283: LD_INT 2
8285: PUSH
8286: LD_INT 2
8288: PUSH
8289: LD_INT 4
8291: PUSH
8292: EMPTY
8293: LIST
8294: LIST
8295: LIST
8296: ST_TO_ADDR
// end ; 2 :
8297: GO 10033
8299: LD_INT 2
8301: DOUBLE
8302: EQUAL
8303: IFTRUE 8307
8305: GO 8516
8307: POP
// begin def_base_level := 1 ;
8308: LD_ADDR_EXP 38
8312: PUSH
8313: LD_INT 1
8315: ST_TO_ADDR
// def_amount_of_people := 2 ;
8316: LD_ADDR_EXP 39
8320: PUSH
8321: LD_INT 2
8323: ST_TO_ADDR
// def_skill_level := 3 ;
8324: LD_ADDR_EXP 40
8328: PUSH
8329: LD_INT 3
8331: ST_TO_ADDR
// def_starting_resources := 3 ;
8332: LD_ADDR_EXP 41
8336: PUSH
8337: LD_INT 3
8339: ST_TO_ADDR
// def_shipments_density := 2 ;
8340: LD_ADDR_EXP 42
8344: PUSH
8345: LD_INT 2
8347: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8348: LD_ADDR_EXP 43
8352: PUSH
8353: LD_INT 1
8355: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8356: LD_ADDR_EXP 44
8360: PUSH
8361: LD_INT 2
8363: ST_TO_ADDR
// def_shared_vision := 1 ;
8364: LD_ADDR_EXP 45
8368: PUSH
8369: LD_INT 1
8371: ST_TO_ADDR
// def_morale_flags := 0 ;
8372: LD_ADDR_EXP 46
8376: PUSH
8377: LD_INT 0
8379: ST_TO_ADDR
// def_siberite_detection := 1 ;
8380: LD_ADDR_EXP 47
8384: PUSH
8385: LD_INT 1
8387: ST_TO_ADDR
// def_people_respawning := 0 ;
8388: LD_ADDR_EXP 48
8392: PUSH
8393: LD_INT 0
8395: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
8396: LD_ADDR_EXP 49
8400: PUSH
8401: LD_INT 0
8403: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8404: LD_ADDR_EXP 50
8408: PUSH
8409: LD_INT 0
8411: ST_TO_ADDR
// def_builduptime := 2 ;
8412: LD_ADDR_EXP 51
8416: PUSH
8417: LD_INT 2
8419: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
8420: LD_ADDR_VAR 0 2
8424: PUSH
8425: LD_INT 1
8427: PUSH
8428: EMPTY
8429: LIST
8430: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8431: LD_ADDR_VAR 0 3
8435: PUSH
8436: EMPTY
8437: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8438: LD_ADDR_LOC 21
8442: PUSH
8443: EMPTY
8444: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8445: LD_ADDR_LOC 22
8449: PUSH
8450: EMPTY
8451: ST_TO_ADDR
// Banned_Controls := [ ] ;
8452: LD_ADDR_LOC 23
8456: PUSH
8457: EMPTY
8458: ST_TO_ADDR
// Banned_Engines := [ ] ;
8459: LD_ADDR_LOC 24
8463: PUSH
8464: EMPTY
8465: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
8466: LD_ADDR_LOC 19
8470: PUSH
8471: LD_INT 4
8473: PUSH
8474: LD_INT 5
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: PUSH
8481: LD_INT 31
8483: PUSH
8484: LD_INT 32
8486: PUSH
8487: LD_INT 33
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: LIST
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
8499: LD_ADDR_LOC 20
8503: PUSH
8504: LD_INT 1
8506: PUSH
8507: LD_INT 2
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: ST_TO_ADDR
// end ; 3 :
8514: GO 10033
8516: LD_INT 3
8518: DOUBLE
8519: EQUAL
8520: IFTRUE 8524
8522: GO 8767
8524: POP
// begin def_base_level := 1 ;
8525: LD_ADDR_EXP 38
8529: PUSH
8530: LD_INT 1
8532: ST_TO_ADDR
// def_amount_of_people := 2 ;
8533: LD_ADDR_EXP 39
8537: PUSH
8538: LD_INT 2
8540: ST_TO_ADDR
// def_skill_level := 3 ;
8541: LD_ADDR_EXP 40
8545: PUSH
8546: LD_INT 3
8548: ST_TO_ADDR
// def_starting_resources := 3 ;
8549: LD_ADDR_EXP 41
8553: PUSH
8554: LD_INT 3
8556: ST_TO_ADDR
// def_shipments_density := 1 ;
8557: LD_ADDR_EXP 42
8561: PUSH
8562: LD_INT 1
8564: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8565: LD_ADDR_EXP 43
8569: PUSH
8570: LD_INT 0
8572: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
8573: LD_ADDR_EXP 44
8577: PUSH
8578: LD_INT 1
8580: ST_TO_ADDR
// def_shared_vision := 1 ;
8581: LD_ADDR_EXP 45
8585: PUSH
8586: LD_INT 1
8588: ST_TO_ADDR
// def_morale_flags := 0 ;
8589: LD_ADDR_EXP 46
8593: PUSH
8594: LD_INT 0
8596: ST_TO_ADDR
// def_siberite_detection := 1 ;
8597: LD_ADDR_EXP 47
8601: PUSH
8602: LD_INT 1
8604: ST_TO_ADDR
// def_people_respawning := 0 ;
8605: LD_ADDR_EXP 48
8609: PUSH
8610: LD_INT 0
8612: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
8613: LD_ADDR_EXP 49
8617: PUSH
8618: LD_INT 2
8620: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8621: LD_ADDR_EXP 50
8625: PUSH
8626: LD_INT 0
8628: ST_TO_ADDR
// def_builduptime := 1 ;
8629: LD_ADDR_EXP 51
8633: PUSH
8634: LD_INT 1
8636: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
8637: LD_ADDR_VAR 0 2
8641: PUSH
8642: LD_INT 23
8644: PUSH
8645: EMPTY
8646: LIST
8647: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
8648: LD_ADDR_VAR 0 3
8652: PUSH
8653: LD_INT 2
8655: PUSH
8656: LD_INT 37
8658: PUSH
8659: LD_INT 32
8661: PUSH
8662: LD_INT 33
8664: PUSH
8665: LD_INT 36
8667: PUSH
8668: LD_INT 16
8670: PUSH
8671: LD_INT 23
8673: PUSH
8674: LD_INT 21
8676: PUSH
8677: LD_INT 18
8679: PUSH
8680: LD_INT 22
8682: PUSH
8683: LD_INT 20
8685: PUSH
8686: LD_INT 19
8688: PUSH
8689: LD_INT 25
8691: PUSH
8692: LD_INT 17
8694: PUSH
8695: LD_INT 24
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8715: LD_ADDR_LOC 21
8719: PUSH
8720: EMPTY
8721: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8722: LD_ADDR_LOC 22
8726: PUSH
8727: EMPTY
8728: ST_TO_ADDR
// Banned_Controls := [ ] ;
8729: LD_ADDR_LOC 23
8733: PUSH
8734: EMPTY
8735: ST_TO_ADDR
// Banned_Engines := [ ] ;
8736: LD_ADDR_LOC 24
8740: PUSH
8741: EMPTY
8742: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8743: LD_ADDR_LOC 19
8747: PUSH
8748: EMPTY
8749: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8750: LD_ADDR_LOC 20
8754: PUSH
8755: EMPTY
8756: ST_TO_ADDR
// No_Mechs := true ;
8757: LD_ADDR_EXP 52
8761: PUSH
8762: LD_INT 1
8764: ST_TO_ADDR
// end ; 4 :
8765: GO 10033
8767: LD_INT 4
8769: DOUBLE
8770: EQUAL
8771: IFTRUE 8775
8773: GO 8950
8775: POP
// begin def_base_level := 1 ;
8776: LD_ADDR_EXP 38
8780: PUSH
8781: LD_INT 1
8783: ST_TO_ADDR
// def_amount_of_people := 2 ;
8784: LD_ADDR_EXP 39
8788: PUSH
8789: LD_INT 2
8791: ST_TO_ADDR
// def_skill_level := 3 ;
8792: LD_ADDR_EXP 40
8796: PUSH
8797: LD_INT 3
8799: ST_TO_ADDR
// def_starting_resources := 3 ;
8800: LD_ADDR_EXP 41
8804: PUSH
8805: LD_INT 3
8807: ST_TO_ADDR
// def_shipments_density := 2 ;
8808: LD_ADDR_EXP 42
8812: PUSH
8813: LD_INT 2
8815: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8816: LD_ADDR_EXP 43
8820: PUSH
8821: LD_INT 1
8823: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8824: LD_ADDR_EXP 44
8828: PUSH
8829: LD_INT 2
8831: ST_TO_ADDR
// def_shared_vision := 1 ;
8832: LD_ADDR_EXP 45
8836: PUSH
8837: LD_INT 1
8839: ST_TO_ADDR
// def_morale_flags := 0 ;
8840: LD_ADDR_EXP 46
8844: PUSH
8845: LD_INT 0
8847: ST_TO_ADDR
// def_siberite_detection := 1 ;
8848: LD_ADDR_EXP 47
8852: PUSH
8853: LD_INT 1
8855: ST_TO_ADDR
// def_people_respawning := 0 ;
8856: LD_ADDR_EXP 48
8860: PUSH
8861: LD_INT 0
8863: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
8864: LD_ADDR_EXP 49
8868: PUSH
8869: LD_INT 0
8871: ST_TO_ADDR
// def_siberite_bomb := 1 ;
8872: LD_ADDR_EXP 50
8876: PUSH
8877: LD_INT 1
8879: ST_TO_ADDR
// def_builduptime := 3 ;
8880: LD_ADDR_EXP 51
8884: PUSH
8885: LD_INT 3
8887: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
8888: LD_ADDR_VAR 0 2
8892: PUSH
8893: LD_INT 1
8895: PUSH
8896: EMPTY
8897: LIST
8898: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8899: LD_ADDR_VAR 0 3
8903: PUSH
8904: EMPTY
8905: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8906: LD_ADDR_LOC 21
8910: PUSH
8911: EMPTY
8912: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8913: LD_ADDR_LOC 22
8917: PUSH
8918: EMPTY
8919: ST_TO_ADDR
// Banned_Controls := [ ] ;
8920: LD_ADDR_LOC 23
8924: PUSH
8925: EMPTY
8926: ST_TO_ADDR
// Banned_Engines := [ ] ;
8927: LD_ADDR_LOC 24
8931: PUSH
8932: EMPTY
8933: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8934: LD_ADDR_LOC 19
8938: PUSH
8939: EMPTY
8940: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8941: LD_ADDR_LOC 20
8945: PUSH
8946: EMPTY
8947: ST_TO_ADDR
// end ; 5 :
8948: GO 10033
8950: LD_INT 5
8952: DOUBLE
8953: EQUAL
8954: IFTRUE 8958
8956: GO 9207
8958: POP
// begin def_base_level := 0 ;
8959: LD_ADDR_EXP 38
8963: PUSH
8964: LD_INT 0
8966: ST_TO_ADDR
// def_amount_of_people := 0 ;
8967: LD_ADDR_EXP 39
8971: PUSH
8972: LD_INT 0
8974: ST_TO_ADDR
// def_skill_level := 0 ;
8975: LD_ADDR_EXP 40
8979: PUSH
8980: LD_INT 0
8982: ST_TO_ADDR
// def_starting_resources := 0 ;
8983: LD_ADDR_EXP 41
8987: PUSH
8988: LD_INT 0
8990: ST_TO_ADDR
// def_shipments_density := 0 ;
8991: LD_ADDR_EXP 42
8995: PUSH
8996: LD_INT 0
8998: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8999: LD_ADDR_EXP 43
9003: PUSH
9004: LD_INT 0
9006: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
9007: LD_ADDR_EXP 44
9011: PUSH
9012: LD_INT 0
9014: ST_TO_ADDR
// def_shared_vision := 1 ;
9015: LD_ADDR_EXP 45
9019: PUSH
9020: LD_INT 1
9022: ST_TO_ADDR
// def_morale_flags := 0 ;
9023: LD_ADDR_EXP 46
9027: PUSH
9028: LD_INT 0
9030: ST_TO_ADDR
// def_siberite_detection := 0 ;
9031: LD_ADDR_EXP 47
9035: PUSH
9036: LD_INT 0
9038: ST_TO_ADDR
// def_people_respawning := 1 ;
9039: LD_ADDR_EXP 48
9043: PUSH
9044: LD_INT 1
9046: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9047: LD_ADDR_EXP 49
9051: PUSH
9052: LD_INT 1
9054: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9055: LD_ADDR_EXP 50
9059: PUSH
9060: LD_INT 0
9062: ST_TO_ADDR
// def_builduptime := 0 ;
9063: LD_ADDR_EXP 51
9067: PUSH
9068: LD_INT 0
9070: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
9071: LD_ADDR_VAR 0 2
9075: PUSH
9076: LD_INT 10
9078: PUSH
9079: LD_INT 3
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
9086: LD_ADDR_VAR 0 3
9090: PUSH
9091: LD_INT 12
9093: PUSH
9094: LD_INT 11
9096: PUSH
9097: LD_INT 14
9099: PUSH
9100: LD_INT 13
9102: PUSH
9103: LD_INT 5
9105: PUSH
9106: LD_INT 24
9108: PUSH
9109: LD_INT 21
9111: PUSH
9112: LD_INT 33
9114: PUSH
9115: LD_INT 36
9117: PUSH
9118: EMPTY
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
9129: LD_ADDR_LOC 21
9133: PUSH
9134: LD_INT 31
9136: PUSH
9137: EMPTY
9138: LIST
9139: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9140: LD_ADDR_LOC 22
9144: PUSH
9145: EMPTY
9146: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
9147: LD_ADDR_LOC 23
9151: PUSH
9152: LD_INT 2
9154: PUSH
9155: EMPTY
9156: LIST
9157: ST_TO_ADDR
// Banned_Engines := [ ] ;
9158: LD_ADDR_LOC 24
9162: PUSH
9163: EMPTY
9164: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
9165: LD_ADDR_LOC 19
9169: PUSH
9170: LD_INT 4
9172: PUSH
9173: EMPTY
9174: LIST
9175: PUSH
9176: LD_INT 31
9178: PUSH
9179: LD_INT 32
9181: PUSH
9182: EMPTY
9183: LIST
9184: LIST
9185: PUSH
9186: EMPTY
9187: LIST
9188: LIST
9189: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
9190: LD_ADDR_LOC 20
9194: PUSH
9195: LD_INT 1
9197: PUSH
9198: LD_INT 1
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: ST_TO_ADDR
// end ; 6 :
9205: GO 10033
9207: LD_INT 6
9209: DOUBLE
9210: EQUAL
9211: IFTRUE 9215
9213: GO 9418
9215: POP
// begin def_base_level := 1 ;
9216: LD_ADDR_EXP 38
9220: PUSH
9221: LD_INT 1
9223: ST_TO_ADDR
// def_amount_of_people := 2 ;
9224: LD_ADDR_EXP 39
9228: PUSH
9229: LD_INT 2
9231: ST_TO_ADDR
// def_skill_level := 3 ;
9232: LD_ADDR_EXP 40
9236: PUSH
9237: LD_INT 3
9239: ST_TO_ADDR
// def_starting_resources := 3 ;
9240: LD_ADDR_EXP 41
9244: PUSH
9245: LD_INT 3
9247: ST_TO_ADDR
// def_shipments_density := 1 ;
9248: LD_ADDR_EXP 42
9252: PUSH
9253: LD_INT 1
9255: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9256: LD_ADDR_EXP 43
9260: PUSH
9261: LD_INT 0
9263: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9264: LD_ADDR_EXP 44
9268: PUSH
9269: LD_INT 1
9271: ST_TO_ADDR
// def_shared_vision := 1 ;
9272: LD_ADDR_EXP 45
9276: PUSH
9277: LD_INT 1
9279: ST_TO_ADDR
// def_morale_flags := 0 ;
9280: LD_ADDR_EXP 46
9284: PUSH
9285: LD_INT 0
9287: ST_TO_ADDR
// def_siberite_detection := 1 ;
9288: LD_ADDR_EXP 47
9292: PUSH
9293: LD_INT 1
9295: ST_TO_ADDR
// def_people_respawning := 2 ;
9296: LD_ADDR_EXP 48
9300: PUSH
9301: LD_INT 2
9303: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9304: LD_ADDR_EXP 49
9308: PUSH
9309: LD_INT 1
9311: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9312: LD_ADDR_EXP 50
9316: PUSH
9317: LD_INT 0
9319: ST_TO_ADDR
// def_builduptime := 1 ;
9320: LD_ADDR_EXP 51
9324: PUSH
9325: LD_INT 1
9327: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9328: LD_ADDR_VAR 0 2
9332: PUSH
9333: LD_INT 23
9335: PUSH
9336: EMPTY
9337: LIST
9338: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
9339: LD_ADDR_VAR 0 3
9343: PUSH
9344: LD_INT 2
9346: PUSH
9347: LD_INT 37
9349: PUSH
9350: LD_INT 31
9352: PUSH
9353: LD_INT 32
9355: PUSH
9356: LD_INT 33
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9366: LD_ADDR_LOC 21
9370: PUSH
9371: EMPTY
9372: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9373: LD_ADDR_LOC 22
9377: PUSH
9378: EMPTY
9379: ST_TO_ADDR
// Banned_Controls := [ ] ;
9380: LD_ADDR_LOC 23
9384: PUSH
9385: EMPTY
9386: ST_TO_ADDR
// Banned_Engines := [ ] ;
9387: LD_ADDR_LOC 24
9391: PUSH
9392: EMPTY
9393: ST_TO_ADDR
// Restricted_Builds := [ ] ;
9394: LD_ADDR_LOC 19
9398: PUSH
9399: EMPTY
9400: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
9401: LD_ADDR_LOC 20
9405: PUSH
9406: EMPTY
9407: ST_TO_ADDR
// No_Mechs := true ;
9408: LD_ADDR_EXP 52
9412: PUSH
9413: LD_INT 1
9415: ST_TO_ADDR
// end ; 7 :
9416: GO 10033
9418: LD_INT 7
9420: DOUBLE
9421: EQUAL
9422: IFTRUE 9426
9424: GO 9624
9426: POP
// begin def_base_level := 1 ;
9427: LD_ADDR_EXP 38
9431: PUSH
9432: LD_INT 1
9434: ST_TO_ADDR
// def_amount_of_people := 2 ;
9435: LD_ADDR_EXP 39
9439: PUSH
9440: LD_INT 2
9442: ST_TO_ADDR
// def_skill_level := 3 ;
9443: LD_ADDR_EXP 40
9447: PUSH
9448: LD_INT 3
9450: ST_TO_ADDR
// def_starting_resources := 3 ;
9451: LD_ADDR_EXP 41
9455: PUSH
9456: LD_INT 3
9458: ST_TO_ADDR
// def_shipments_density := 1 ;
9459: LD_ADDR_EXP 42
9463: PUSH
9464: LD_INT 1
9466: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9467: LD_ADDR_EXP 43
9471: PUSH
9472: LD_INT 1
9474: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9475: LD_ADDR_EXP 44
9479: PUSH
9480: LD_INT 2
9482: ST_TO_ADDR
// def_shared_vision := 1 ;
9483: LD_ADDR_EXP 45
9487: PUSH
9488: LD_INT 1
9490: ST_TO_ADDR
// def_morale_flags := 0 ;
9491: LD_ADDR_EXP 46
9495: PUSH
9496: LD_INT 0
9498: ST_TO_ADDR
// def_siberite_detection := 1 ;
9499: LD_ADDR_EXP 47
9503: PUSH
9504: LD_INT 1
9506: ST_TO_ADDR
// def_people_respawning := 0 ;
9507: LD_ADDR_EXP 48
9511: PUSH
9512: LD_INT 0
9514: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9515: LD_ADDR_EXP 49
9519: PUSH
9520: LD_INT 1
9522: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9523: LD_ADDR_EXP 50
9527: PUSH
9528: LD_INT 0
9530: ST_TO_ADDR
// def_builduptime := 3 ;
9531: LD_ADDR_EXP 51
9535: PUSH
9536: LD_INT 3
9538: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9539: LD_ADDR_VAR 0 2
9543: PUSH
9544: LD_INT 23
9546: PUSH
9547: EMPTY
9548: LIST
9549: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
9550: LD_ADDR_VAR 0 3
9554: PUSH
9555: LD_INT 37
9557: PUSH
9558: EMPTY
9559: LIST
9560: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9561: LD_ADDR_LOC 21
9565: PUSH
9566: EMPTY
9567: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9568: LD_ADDR_LOC 22
9572: PUSH
9573: EMPTY
9574: ST_TO_ADDR
// Banned_Controls := [ ] ;
9575: LD_ADDR_LOC 23
9579: PUSH
9580: EMPTY
9581: ST_TO_ADDR
// Banned_Engines := [ ] ;
9582: LD_ADDR_LOC 24
9586: PUSH
9587: EMPTY
9588: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9589: LD_ADDR_LOC 19
9593: PUSH
9594: LD_INT 31
9596: PUSH
9597: LD_INT 32
9599: PUSH
9600: LD_INT 33
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: LIST
9607: PUSH
9608: EMPTY
9609: LIST
9610: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
9611: LD_ADDR_LOC 20
9615: PUSH
9616: LD_INT 10
9618: PUSH
9619: EMPTY
9620: LIST
9621: ST_TO_ADDR
// end ; 8 :
9622: GO 10033
9624: LD_INT 8
9626: DOUBLE
9627: EQUAL
9628: IFTRUE 9632
9630: GO 10032
9632: POP
// begin def_base_level := 0 ;
9633: LD_ADDR_EXP 38
9637: PUSH
9638: LD_INT 0
9640: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
9641: LD_ADDR_EXP 39
9645: PUSH
9646: LD_INT 0
9648: PPUSH
9649: LD_INT 1
9651: PPUSH
9652: CALL_OW 12
9656: ST_TO_ADDR
// def_skill_level := 0 ;
9657: LD_ADDR_EXP 40
9661: PUSH
9662: LD_INT 0
9664: ST_TO_ADDR
// def_starting_resources := 2 ;
9665: LD_ADDR_EXP 41
9669: PUSH
9670: LD_INT 2
9672: ST_TO_ADDR
// def_shipments_density := 1 ;
9673: LD_ADDR_EXP 42
9677: PUSH
9678: LD_INT 1
9680: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9681: LD_ADDR_EXP 43
9685: PUSH
9686: LD_INT 0
9688: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
9689: LD_ADDR_EXP 44
9693: PUSH
9694: LD_INT 0
9696: ST_TO_ADDR
// def_shared_vision := 1 ;
9697: LD_ADDR_EXP 45
9701: PUSH
9702: LD_INT 1
9704: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
9705: LD_ADDR_EXP 46
9709: PUSH
9710: LD_INT 0
9712: PPUSH
9713: LD_INT 2
9715: PPUSH
9716: CALL_OW 12
9720: ST_TO_ADDR
// def_siberite_detection := 0 ;
9721: LD_ADDR_EXP 47
9725: PUSH
9726: LD_INT 0
9728: ST_TO_ADDR
// def_people_respawning := 0 ;
9729: LD_ADDR_EXP 48
9733: PUSH
9734: LD_INT 0
9736: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
9737: LD_ADDR_EXP 49
9741: PUSH
9742: LD_INT 2
9744: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9745: LD_ADDR_EXP 50
9749: PUSH
9750: LD_INT 0
9752: ST_TO_ADDR
// def_builduptime := 0 ;
9753: LD_ADDR_EXP 51
9757: PUSH
9758: LD_INT 0
9760: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
9761: LD_ADDR_VAR 0 2
9765: PUSH
9766: LD_INT 23
9768: PUSH
9769: LD_INT 20
9771: PUSH
9772: LD_INT 40
9774: PUSH
9775: LD_INT 47
9777: PUSH
9778: LD_INT 46
9780: PUSH
9781: LD_INT 39
9783: PUSH
9784: LD_INT 71
9786: PUSH
9787: LD_INT 34
9789: PUSH
9790: LD_INT 41
9792: PUSH
9793: LD_INT 44
9795: PUSH
9796: LD_INT 17
9798: PUSH
9799: LD_INT 16
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
9816: LD_ADDR_VAR 0 3
9820: PUSH
9821: LD_INT 37
9823: PUSH
9824: LD_INT 5
9826: PUSH
9827: LD_INT 13
9829: PUSH
9830: LD_INT 34
9832: PUSH
9833: LD_INT 12
9835: PUSH
9836: LD_INT 15
9838: PUSH
9839: LD_INT 11
9841: PUSH
9842: LD_INT 14
9844: PUSH
9845: LD_INT 29
9847: PUSH
9848: LD_INT 30
9850: PUSH
9851: LD_INT 28
9853: PUSH
9854: LD_INT 24
9856: PUSH
9857: LD_INT 25
9859: PUSH
9860: LD_INT 20
9862: PUSH
9863: LD_INT 21
9865: PUSH
9866: LD_INT 22
9868: PUSH
9869: LD_INT 36
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9891: LD_ADDR_LOC 21
9895: PUSH
9896: EMPTY
9897: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
9898: LD_ADDR_LOC 22
9902: PUSH
9903: LD_INT 14
9905: PUSH
9906: EMPTY
9907: LIST
9908: ST_TO_ADDR
// Banned_Controls := [ ] ;
9909: LD_ADDR_LOC 23
9913: PUSH
9914: EMPTY
9915: ST_TO_ADDR
// Banned_Engines := [ ] ;
9916: LD_ADDR_LOC 24
9920: PUSH
9921: EMPTY
9922: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
9923: LD_ADDR_LOC 19
9927: PUSH
9928: LD_INT 31
9930: PUSH
9931: LD_INT 32
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: PUSH
9938: LD_INT 4
9940: PUSH
9941: EMPTY
9942: LIST
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
9948: LD_ADDR_LOC 20
9952: PUSH
9953: LD_INT 2
9955: PUSH
9956: LD_INT 1
9958: PUSH
9959: EMPTY
9960: LIST
9961: LIST
9962: ST_TO_ADDR
// for i := 1 to 8 do
9963: LD_ADDR_VAR 0 4
9967: PUSH
9968: DOUBLE
9969: LD_INT 1
9971: DEC
9972: ST_TO_ADDR
9973: LD_INT 8
9975: PUSH
9976: FOR_TO
9977: IFFALSE 10028
// if ( Side_Nations [ i ] = 3 ) then
9979: LD_EXP 21
9983: PUSH
9984: LD_VAR 0 4
9988: ARRAY
9989: PUSH
9990: LD_INT 3
9992: EQUAL
9993: IFFALSE 10026
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
9995: LD_ADDR_EXP 21
9999: PUSH
10000: LD_EXP 21
10004: PPUSH
10005: LD_VAR 0 4
10009: PPUSH
10010: LD_INT 1
10012: PPUSH
10013: LD_INT 2
10015: PPUSH
10016: CALL_OW 12
10020: PPUSH
10021: CALL_OW 1
10025: ST_TO_ADDR
10026: GO 9976
10028: POP
10029: POP
// end ; end ;
10030: GO 10033
10032: POP
// for i := 1 to 8 do
10033: LD_ADDR_VAR 0 4
10037: PUSH
10038: DOUBLE
10039: LD_INT 1
10041: DEC
10042: ST_TO_ADDR
10043: LD_INT 8
10045: PUSH
10046: FOR_TO
10047: IFFALSE 10131
// if Side_Positions [ i ] then
10049: LD_EXP 20
10053: PUSH
10054: LD_VAR 0 4
10058: ARRAY
10059: IFFALSE 10129
// begin for j in Unavailable_Techs do
10061: LD_ADDR_VAR 0 5
10065: PUSH
10066: LD_VAR 0 2
10070: PUSH
10071: FOR_IN
10072: IFFALSE 10093
// SetTech ( j , i , 0 ) ;
10074: LD_VAR 0 5
10078: PPUSH
10079: LD_VAR 0 4
10083: PPUSH
10084: LD_INT 0
10086: PPUSH
10087: CALL_OW 322
10091: GO 10071
10093: POP
10094: POP
// for j in Unavailable_Builds do
10095: LD_ADDR_VAR 0 5
10099: PUSH
10100: LD_VAR 0 3
10104: PUSH
10105: FOR_IN
10106: IFFALSE 10127
// SetRestrict ( j , i , 0 ) ;
10108: LD_VAR 0 5
10112: PPUSH
10113: LD_VAR 0 4
10117: PPUSH
10118: LD_INT 0
10120: PPUSH
10121: CALL_OW 324
10125: GO 10105
10127: POP
10128: POP
// end ;
10129: GO 10046
10131: POP
10132: POP
// end ;
10133: LD_VAR 0 1
10137: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
10138: LD_INT 0
10140: PPUSH
10141: PPUSH
10142: PPUSH
10143: PPUSH
10144: PPUSH
10145: PPUSH
10146: PPUSH
// for i := 1 to Restricted_Builds do
10147: LD_ADDR_VAR 0 2
10151: PUSH
10152: DOUBLE
10153: LD_INT 1
10155: DEC
10156: ST_TO_ADDR
10157: LD_LOC 19
10161: PUSH
10162: FOR_TO
10163: IFFALSE 10473
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
10165: LD_LOC 19
10169: PUSH
10170: LD_VAR 0 2
10174: ARRAY
10175: PUSH
10176: LD_INT 1
10178: ARRAY
10179: PUSH
10180: LD_INT 31
10182: DOUBLE
10183: EQUAL
10184: IFTRUE 10200
10186: LD_INT 32
10188: DOUBLE
10189: EQUAL
10190: IFTRUE 10200
10192: LD_INT 33
10194: DOUBLE
10195: EQUAL
10196: IFTRUE 10200
10198: GO 10211
10200: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
10201: LD_ADDR_VAR 0 6
10205: PUSH
10206: LD_STRING #Turrets
10208: ST_TO_ADDR
10209: GO 10256
10211: LD_INT 4
10213: DOUBLE
10214: EQUAL
10215: IFTRUE 10225
10217: LD_INT 5
10219: DOUBLE
10220: EQUAL
10221: IFTRUE 10225
10223: GO 10236
10225: POP
// btype := #Armouries ; b_Behemoth :
10226: LD_ADDR_VAR 0 6
10230: PUSH
10231: LD_STRING #Armouries
10233: ST_TO_ADDR
10234: GO 10256
10236: LD_INT 37
10238: DOUBLE
10239: EQUAL
10240: IFTRUE 10244
10242: GO 10255
10244: POP
// btype := #Behemoths ; end ;
10245: LD_ADDR_VAR 0 6
10249: PUSH
10250: LD_STRING #Behemoths
10252: ST_TO_ADDR
10253: GO 10256
10255: POP
// list := [ ] ;
10256: LD_ADDR_VAR 0 7
10260: PUSH
10261: EMPTY
10262: ST_TO_ADDR
// for j := 1 to 8 do
10263: LD_ADDR_VAR 0 3
10267: PUSH
10268: DOUBLE
10269: LD_INT 1
10271: DEC
10272: ST_TO_ADDR
10273: LD_INT 8
10275: PUSH
10276: FOR_TO
10277: IFFALSE 10370
// if Side_Positions [ j ] then
10279: LD_EXP 20
10283: PUSH
10284: LD_VAR 0 3
10288: ARRAY
10289: IFFALSE 10368
// begin amount := 0 ;
10291: LD_ADDR_VAR 0 5
10295: PUSH
10296: LD_INT 0
10298: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
10299: LD_ADDR_VAR 0 4
10303: PUSH
10304: LD_LOC 19
10308: PUSH
10309: LD_VAR 0 2
10313: ARRAY
10314: PUSH
10315: FOR_IN
10316: IFFALSE 10364
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
10318: LD_ADDR_VAR 0 5
10322: PUSH
10323: LD_VAR 0 5
10327: PUSH
10328: LD_INT 22
10330: PUSH
10331: LD_VAR 0 3
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: PUSH
10340: LD_INT 30
10342: PUSH
10343: LD_VAR 0 4
10347: PUSH
10348: EMPTY
10349: LIST
10350: LIST
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PPUSH
10356: CALL_OW 69
10360: PLUS
10361: ST_TO_ADDR
10362: GO 10315
10364: POP
10365: POP
// break ;
10366: GO 10370
// end ;
10368: GO 10276
10370: POP
10371: POP
// list := [ ] ;
10372: LD_ADDR_VAR 0 7
10376: PUSH
10377: EMPTY
10378: ST_TO_ADDR
// for j := 1 to 8 do
10379: LD_ADDR_VAR 0 3
10383: PUSH
10384: DOUBLE
10385: LD_INT 1
10387: DEC
10388: ST_TO_ADDR
10389: LD_INT 8
10391: PUSH
10392: FOR_TO
10393: IFFALSE 10413
// list := list ^ amount ;
10395: LD_ADDR_VAR 0 7
10399: PUSH
10400: LD_VAR 0 7
10404: PUSH
10405: LD_VAR 0 5
10409: ADD
10410: ST_TO_ADDR
10411: GO 10392
10413: POP
10414: POP
// Already_Built := Already_Built ^ [ list ] ;
10415: LD_ADDR_LOC 25
10419: PUSH
10420: LD_LOC 25
10424: PUSH
10425: LD_VAR 0 7
10429: PUSH
10430: EMPTY
10431: LIST
10432: ADD
10433: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
10434: LD_ADDR_LOC 26
10438: PUSH
10439: LD_LOC 26
10443: PUSH
10444: LD_VAR 0 6
10448: PUSH
10449: LD_VAR 0 5
10453: PUSH
10454: LD_LOC 20
10458: PUSH
10459: LD_VAR 0 2
10463: ARRAY
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: LIST
10469: ADD
10470: ST_TO_ADDR
// end ;
10471: GO 10162
10473: POP
10474: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10475: LD_ADDR_LOC 27
10479: PUSH
10480: LD_INT 0
10482: PUSH
10483: LD_INT 0
10485: PUSH
10486: LD_INT 0
10488: PUSH
10489: LD_INT 0
10491: PUSH
10492: LD_INT 0
10494: PUSH
10495: LD_INT 0
10497: PUSH
10498: LD_INT 0
10500: PUSH
10501: LD_INT 0
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: ST_TO_ADDR
// if Limits_Info then
10514: LD_LOC 26
10518: IFFALSE 10534
// Limits_Info := #Limits ^ Limits_Info ;
10520: LD_ADDR_LOC 26
10524: PUSH
10525: LD_STRING #Limits
10527: PUSH
10528: LD_LOC 26
10532: ADD
10533: ST_TO_ADDR
// end ;
10534: LD_VAR 0 1
10538: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
10539: LD_INT 0
10541: PPUSH
10542: PPUSH
10543: PPUSH
10544: PPUSH
// for i := 1 to Restricted_Builds do
10545: LD_ADDR_VAR 0 7
10549: PUSH
10550: DOUBLE
10551: LD_INT 1
10553: DEC
10554: ST_TO_ADDR
10555: LD_LOC 19
10559: PUSH
10560: FOR_TO
10561: IFFALSE 10984
// if BType in Restricted_Builds [ i ] then
10563: LD_VAR 0 2
10567: PUSH
10568: LD_LOC 19
10572: PUSH
10573: LD_VAR 0 7
10577: ARRAY
10578: IN
10579: IFFALSE 10982
// begin if old_side then
10581: LD_VAR 0 4
10585: IFFALSE 10711
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
10587: LD_LOC 25
10591: PUSH
10592: LD_VAR 0 7
10596: ARRAY
10597: PUSH
10598: LD_VAR 0 3
10602: ARRAY
10603: PUSH
10604: LD_VAR 0 5
10608: PLUS
10609: PUSH
10610: LD_LOC 20
10614: PUSH
10615: LD_VAR 0 7
10619: ARRAY
10620: GREATER
10621: IFFALSE 10647
// begin SetSide ( un , old_side ) ;
10623: LD_VAR 0 1
10627: PPUSH
10628: LD_VAR 0 4
10632: PPUSH
10633: CALL_OW 235
// count := 0 ;
10637: LD_ADDR_VAR 0 5
10641: PUSH
10642: LD_INT 0
10644: ST_TO_ADDR
// end else
10645: GO 10711
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
10647: LD_ADDR_LOC 25
10651: PUSH
10652: LD_LOC 25
10656: PPUSH
10657: LD_VAR 0 7
10661: PPUSH
10662: LD_LOC 25
10666: PUSH
10667: LD_VAR 0 7
10671: ARRAY
10672: PPUSH
10673: LD_VAR 0 4
10677: PPUSH
10678: LD_LOC 25
10682: PUSH
10683: LD_VAR 0 7
10687: ARRAY
10688: PUSH
10689: LD_VAR 0 4
10693: ARRAY
10694: PUSH
10695: LD_VAR 0 5
10699: MINUS
10700: PPUSH
10701: CALL_OW 1
10705: PPUSH
10706: CALL_OW 1
10710: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
10711: LD_ADDR_LOC 25
10715: PUSH
10716: LD_LOC 25
10720: PPUSH
10721: LD_VAR 0 7
10725: PPUSH
10726: LD_LOC 25
10730: PUSH
10731: LD_VAR 0 7
10735: ARRAY
10736: PPUSH
10737: LD_VAR 0 3
10741: PPUSH
10742: LD_LOC 25
10746: PUSH
10747: LD_VAR 0 7
10751: ARRAY
10752: PUSH
10753: LD_VAR 0 3
10757: ARRAY
10758: PUSH
10759: LD_VAR 0 5
10763: PLUS
10764: PPUSH
10765: CALL_OW 1
10769: PPUSH
10770: CALL_OW 1
10774: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
10775: LD_VAR 0 5
10779: PUSH
10780: LD_INT 0
10782: NONEQUAL
10783: PUSH
10784: LD_VAR 0 3
10788: PUSH
10789: LD_OWVAR 2
10793: EQUAL
10794: AND
10795: IFFALSE 10838
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
10797: LD_ADDR_LOC 26
10801: PUSH
10802: LD_LOC 26
10806: PPUSH
10807: LD_INT 3
10809: PUSH
10810: LD_VAR 0 7
10814: MUL
10815: PPUSH
10816: LD_LOC 25
10820: PUSH
10821: LD_VAR 0 7
10825: ARRAY
10826: PUSH
10827: LD_VAR 0 3
10831: ARRAY
10832: PPUSH
10833: CALL_OW 1
10837: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
10838: LD_LOC 25
10842: PUSH
10843: LD_VAR 0 7
10847: ARRAY
10848: PUSH
10849: LD_VAR 0 3
10853: ARRAY
10854: PUSH
10855: LD_LOC 20
10859: PUSH
10860: LD_VAR 0 7
10864: ARRAY
10865: GREATER
10866: IFFALSE 10893
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
10868: LD_ADDR_LOC 27
10872: PUSH
10873: LD_LOC 27
10877: PPUSH
10878: LD_VAR 0 3
10882: PPUSH
10883: LD_INT 1
10885: PPUSH
10886: CALL_OW 1
10890: ST_TO_ADDR
// end else
10891: GO 10980
// begin for j := 1 to Restricted_Builds do
10893: LD_ADDR_VAR 0 8
10897: PUSH
10898: DOUBLE
10899: LD_INT 1
10901: DEC
10902: ST_TO_ADDR
10903: LD_LOC 19
10907: PUSH
10908: FOR_TO
10909: IFFALSE 10953
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
10911: LD_LOC 25
10915: PUSH
10916: LD_VAR 0 8
10920: ARRAY
10921: PUSH
10922: LD_VAR 0 3
10926: ARRAY
10927: PUSH
10928: LD_LOC 20
10932: PUSH
10933: LD_VAR 0 8
10937: ARRAY
10938: GREATER
10939: IFFALSE 10951
// begin Is_Cheater := true ;
10941: LD_ADDR_VAR 0 9
10945: PUSH
10946: LD_INT 1
10948: ST_TO_ADDR
// break ;
10949: GO 10953
// end ;
10951: GO 10908
10953: POP
10954: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
10955: LD_ADDR_LOC 27
10959: PUSH
10960: LD_LOC 27
10964: PPUSH
10965: LD_VAR 0 3
10969: PPUSH
10970: LD_VAR 0 9
10974: PPUSH
10975: CALL_OW 1
10979: ST_TO_ADDR
// end ; break ;
10980: GO 10984
// end ;
10982: GO 10560
10984: POP
10985: POP
// end ;
10986: LD_VAR 0 6
10990: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
10991: LD_VAR 0 5
10995: PUSH
10996: LD_LOC 21
11000: IN
11001: PUSH
11002: LD_VAR 0 2
11006: PUSH
11007: LD_LOC 22
11011: IN
11012: OR
11013: PUSH
11014: LD_VAR 0 4
11018: PUSH
11019: LD_LOC 23
11023: IN
11024: OR
11025: PUSH
11026: LD_VAR 0 3
11030: PUSH
11031: LD_LOC 24
11035: IN
11036: OR
11037: IFFALSE 11048
// ComCancel ( factory ) ;
11039: LD_VAR 0 1
11043: PPUSH
11044: CALL_OW 127
// end ;
11048: PPOPN 5
11050: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
11051: LD_VAR 0 2
11055: PUSH
11056: LD_LOC 21
11060: IN
11061: IFFALSE 11072
// ComCancel ( building ) ;
11063: LD_VAR 0 1
11067: PPUSH
11068: CALL_OW 127
// end ; end_of_file
11072: PPOPN 2
11074: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
11075: LD_INT 0
11077: PPUSH
11078: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
11079: LD_ADDR_VAR 0 2
11083: PUSH
11084: LD_STRING #Multi1x1-Time
11086: PUSH
11087: LD_OWVAR 1
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: ST_TO_ADDR
// if WaitServerStrings then
11096: LD_EXP 54
11100: IFFALSE 11118
// AllStrings = AllStrings ^ WaitServerStrings ;
11102: LD_ADDR_VAR 0 2
11106: PUSH
11107: LD_VAR 0 2
11111: PUSH
11112: LD_EXP 54
11116: ADD
11117: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
11118: LD_INT 0
11120: PUSH
11121: LD_EXP 12
11125: PUSH
11126: LD_OWVAR 1
11130: MINUS
11131: LESSEQUAL
11132: IFFALSE 11163
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
11134: LD_ADDR_VAR 0 2
11138: PUSH
11139: LD_VAR 0 2
11143: PUSH
11144: LD_STRING #allowedsibbomb
11146: PUSH
11147: LD_EXP 12
11151: PUSH
11152: LD_OWVAR 1
11156: MINUS
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: ADD
11162: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
11163: LD_INT 0
11165: PUSH
11166: LD_EXP 16
11170: PUSH
11171: LD_OWVAR 1
11175: MINUS
11176: LESSEQUAL
11177: IFFALSE 11208
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
11179: LD_ADDR_VAR 0 2
11183: PUSH
11184: LD_VAR 0 2
11188: PUSH
11189: LD_STRING #builduptime
11191: PUSH
11192: LD_EXP 16
11196: PUSH
11197: LD_OWVAR 1
11201: MINUS
11202: PUSH
11203: EMPTY
11204: LIST
11205: LIST
11206: ADD
11207: ST_TO_ADDR
// if ( ExtraStrings ) then
11208: LD_EXP 53
11212: IFFALSE 11234
// AllStrings := AllStrings ^  ^ ExtraStrings ;
11214: LD_ADDR_VAR 0 2
11218: PUSH
11219: LD_VAR 0 2
11223: PUSH
11224: LD_STRING 
11226: ADD
11227: PUSH
11228: LD_EXP 53
11232: ADD
11233: ST_TO_ADDR
// if ( LimitsStrings ) then
11234: CALL 7915 0 0
11238: IFFALSE 11260
// AllStrings := AllStrings ^  ^ LimitsStrings ;
11240: LD_ADDR_VAR 0 2
11244: PUSH
11245: LD_VAR 0 2
11249: PUSH
11250: LD_STRING 
11252: ADD
11253: PUSH
11254: CALL 7915 0 0
11258: ADD
11259: ST_TO_ADDR
// Display_Strings := AllStrings ;
11260: LD_ADDR_OWVAR 47
11264: PUSH
11265: LD_VAR 0 2
11269: ST_TO_ADDR
// end ;
11270: LD_VAR 0 1
11274: RET
// every 0 0$1 do
11275: GO 11277
11277: DISABLE
// begin ShowTimer ;
11278: CALL 11075 0 0
// enable ;
11282: ENABLE
// end ; end_of_file
11283: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
11284: LD_INT 0
11286: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
11287: LD_VAR 0 1
11291: PPUSH
11292: CALL_OW 255
11296: PUSH
11297: LD_VAR 0 4
11301: EQUAL
11302: IFFALSE 11321
// begin SetAchievement ( ACH_RAD ) ;
11304: LD_STRING ACH_RAD
11306: PPUSH
11307: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
11311: LD_STRING ACH_NL
11313: PPUSH
11314: LD_INT 1
11316: PPUSH
11317: CALL_OW 564
// end end ;
11321: LD_VAR 0 5
11325: RET
// export function SA_Win ( side ) ; begin
11326: LD_INT 0
11328: PPUSH
// case side of 1 :
11329: LD_VAR 0 1
11333: PUSH
11334: LD_INT 1
11336: DOUBLE
11337: EQUAL
11338: IFTRUE 11342
11340: GO 11355
11342: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
11343: LD_STRING ACH_AH
11345: PPUSH
11346: LD_INT 1
11348: PPUSH
11349: CALL_OW 564
11353: GO 11518
11355: LD_INT 2
11357: DOUBLE
11358: EQUAL
11359: IFTRUE 11363
11361: GO 11376
11363: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
11364: LD_STRING ACH_E
11366: PPUSH
11367: LD_INT 1
11369: PPUSH
11370: CALL_OW 564
11374: GO 11518
11376: LD_INT 3
11378: DOUBLE
11379: EQUAL
11380: IFTRUE 11384
11382: GO 11397
11384: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
11385: LD_STRING ACH_OOL
11387: PPUSH
11388: LD_INT 1
11390: PPUSH
11391: CALL_OW 564
11395: GO 11518
11397: LD_INT 1
11399: PUSH
11400: LD_INT 2
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: DOUBLE
11407: EQUAL
11408: IFTRUE 11412
11410: GO 11437
11412: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
11413: LD_STRING ACH_AH
11415: PPUSH
11416: LD_REAL  5.00000000000000E-0001
11419: PPUSH
11420: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
11424: LD_STRING ACH_E
11426: PPUSH
11427: LD_REAL  5.00000000000000E-0001
11430: PPUSH
11431: CALL_OW 564
// end ; [ 2 , 3 ] :
11435: GO 11518
11437: LD_INT 2
11439: PUSH
11440: LD_INT 3
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: DOUBLE
11447: EQUAL
11448: IFTRUE 11452
11450: GO 11477
11452: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
11453: LD_STRING ACH_OOL
11455: PPUSH
11456: LD_REAL  5.00000000000000E-0001
11459: PPUSH
11460: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
11464: LD_STRING ACH_E
11466: PPUSH
11467: LD_REAL  5.00000000000000E-0001
11470: PPUSH
11471: CALL_OW 564
// end ; [ 3 , 1 ] :
11475: GO 11518
11477: LD_INT 3
11479: PUSH
11480: LD_INT 1
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: DOUBLE
11487: EQUAL
11488: IFTRUE 11492
11490: GO 11517
11492: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
11493: LD_STRING ACH_AH
11495: PPUSH
11496: LD_REAL  5.00000000000000E-0001
11499: PPUSH
11500: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
11504: LD_STRING ACH_OOL
11506: PPUSH
11507: LD_REAL  5.00000000000000E-0001
11510: PPUSH
11511: CALL_OW 564
// end ; end ;
11515: GO 11518
11517: POP
// end ; end_of_file
11518: LD_VAR 0 2
11522: RET
// export BuildUpAreas , BuildUp ; export function BeginBuildUp ; var i , j ; begin
11523: LD_INT 0
11525: PPUSH
11526: PPUSH
11527: PPUSH
// enable ( 600 ) ;
11528: LD_INT 600
11530: ENABLE_MARKED
// BuildUp = true ;
11531: LD_ADDR_EXP 56
11535: PUSH
11536: LD_INT 1
11538: ST_TO_ADDR
// for i := 1 to BuildUpAreas do
11539: LD_ADDR_VAR 0 2
11543: PUSH
11544: DOUBLE
11545: LD_INT 1
11547: DEC
11548: ST_TO_ADDR
11549: LD_EXP 55
11553: PUSH
11554: FOR_TO
11555: IFFALSE 11710
// if Position_Sides [ i ] then
11557: LD_EXP 23
11561: PUSH
11562: LD_VAR 0 2
11566: ARRAY
11567: IFFALSE 11708
// for j := 1 to 8 do
11569: LD_ADDR_VAR 0 3
11573: PUSH
11574: DOUBLE
11575: LD_INT 1
11577: DEC
11578: ST_TO_ADDR
11579: LD_INT 8
11581: PUSH
11582: FOR_TO
11583: IFFALSE 11706
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
11585: LD_EXP 20
11589: PUSH
11590: LD_VAR 0 3
11594: ARRAY
11595: PUSH
11596: LD_EXP 17
11600: PUSH
11601: LD_EXP 23
11605: PUSH
11606: LD_VAR 0 2
11610: ARRAY
11611: ARRAY
11612: PUSH
11613: LD_EXP 17
11617: PUSH
11618: LD_VAR 0 3
11622: ARRAY
11623: NONEQUAL
11624: PUSH
11625: LD_EXP 22
11629: NOT
11630: PUSH
11631: LD_EXP 23
11635: PUSH
11636: LD_VAR 0 2
11640: ARRAY
11641: PUSH
11642: LD_VAR 0 3
11646: NONEQUAL
11647: AND
11648: OR
11649: AND
11650: IFFALSE 11674
// HideArea ( j , BuildUpAreas [ i ] ) else
11652: LD_VAR 0 3
11656: PPUSH
11657: LD_EXP 55
11661: PUSH
11662: LD_VAR 0 2
11666: ARRAY
11667: PPUSH
11668: CALL_OW 333
11672: GO 11704
// if ( j = your_side ) then
11674: LD_VAR 0 3
11678: PUSH
11679: LD_OWVAR 2
11683: EQUAL
11684: IFFALSE 11704
// SetAreaMapShow ( BuildUpAreas [ i ] , 3 ) ;
11686: LD_EXP 55
11690: PUSH
11691: LD_VAR 0 2
11695: ARRAY
11696: PPUSH
11697: LD_INT 3
11699: PPUSH
11700: CALL_OW 424
11704: GO 11582
11706: POP
11707: POP
11708: GO 11554
11710: POP
11711: POP
// end ;
11712: LD_VAR 0 1
11716: RET
// export function EndBuildUp ; var i , j ; begin
11717: LD_INT 0
11719: PPUSH
11720: PPUSH
11721: PPUSH
// disable ( 600 ) ;
11722: LD_INT 600
11724: DISABLE_MARKED
// BuildUp = false ;
11725: LD_ADDR_EXP 56
11729: PUSH
11730: LD_INT 0
11732: ST_TO_ADDR
// for i := 1 to BuildUpAreas do
11733: LD_ADDR_VAR 0 2
11737: PUSH
11738: DOUBLE
11739: LD_INT 1
11741: DEC
11742: ST_TO_ADDR
11743: LD_EXP 55
11747: PUSH
11748: FOR_TO
11749: IFFALSE 11904
// if Position_Sides [ i ] then
11751: LD_EXP 23
11755: PUSH
11756: LD_VAR 0 2
11760: ARRAY
11761: IFFALSE 11902
// for j := 1 to 8 do
11763: LD_ADDR_VAR 0 3
11767: PUSH
11768: DOUBLE
11769: LD_INT 1
11771: DEC
11772: ST_TO_ADDR
11773: LD_INT 8
11775: PUSH
11776: FOR_TO
11777: IFFALSE 11900
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
11779: LD_EXP 20
11783: PUSH
11784: LD_VAR 0 3
11788: ARRAY
11789: PUSH
11790: LD_EXP 17
11794: PUSH
11795: LD_EXP 23
11799: PUSH
11800: LD_VAR 0 2
11804: ARRAY
11805: ARRAY
11806: PUSH
11807: LD_EXP 17
11811: PUSH
11812: LD_VAR 0 3
11816: ARRAY
11817: NONEQUAL
11818: PUSH
11819: LD_EXP 22
11823: NOT
11824: PUSH
11825: LD_EXP 23
11829: PUSH
11830: LD_VAR 0 2
11834: ARRAY
11835: PUSH
11836: LD_VAR 0 3
11840: NONEQUAL
11841: AND
11842: OR
11843: AND
11844: IFFALSE 11868
// ShowArea ( j , BuildUpAreas [ i ] ) else
11846: LD_VAR 0 3
11850: PPUSH
11851: LD_EXP 55
11855: PUSH
11856: LD_VAR 0 2
11860: ARRAY
11861: PPUSH
11862: CALL_OW 334
11866: GO 11898
// if ( j = your_side ) then
11868: LD_VAR 0 3
11872: PUSH
11873: LD_OWVAR 2
11877: EQUAL
11878: IFFALSE 11898
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
11880: LD_EXP 55
11884: PUSH
11885: LD_VAR 0 2
11889: ARRAY
11890: PPUSH
11891: LD_INT 0
11893: PPUSH
11894: CALL_OW 424
11898: GO 11776
11900: POP
11901: POP
11902: GO 11748
11904: POP
11905: POP
// end ;
11906: LD_VAR 0 1
11910: RET
// every 1 marked 600 do var i , un ;
11911: GO 11913
11913: DISABLE
11914: LD_INT 0
11916: PPUSH
11917: PPUSH
// begin for i := 1 to BuildUpAreas do
11918: LD_ADDR_VAR 0 1
11922: PUSH
11923: DOUBLE
11924: LD_INT 1
11926: DEC
11927: ST_TO_ADDR
11928: LD_EXP 55
11932: PUSH
11933: FOR_TO
11934: IFFALSE 12104
// if Position_Sides [ i ] then
11936: LD_EXP 23
11940: PUSH
11941: LD_VAR 0 1
11945: ARRAY
11946: IFFALSE 12102
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_not , [ f_side , 0 ] ] ] ) do
11948: LD_ADDR_VAR 0 2
11952: PUSH
11953: LD_EXP 55
11957: PUSH
11958: LD_VAR 0 1
11962: ARRAY
11963: PPUSH
11964: LD_INT 2
11966: PUSH
11967: LD_INT 21
11969: PUSH
11970: LD_INT 1
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: PUSH
11977: LD_INT 21
11979: PUSH
11980: LD_INT 2
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: PUSH
11987: EMPTY
11988: LIST
11989: LIST
11990: LIST
11991: PUSH
11992: LD_INT 3
11994: PUSH
11995: LD_INT 22
11997: PUSH
11998: LD_INT 0
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: PPUSH
12013: CALL_OW 70
12017: PUSH
12018: FOR_IN
12019: IFFALSE 12100
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ GetSide ( un ) ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> GetSide ( un ) ) ) then
12021: LD_EXP 17
12025: PUSH
12026: LD_EXP 23
12030: PUSH
12031: LD_VAR 0 1
12035: ARRAY
12036: ARRAY
12037: PUSH
12038: LD_EXP 17
12042: PUSH
12043: LD_VAR 0 2
12047: PPUSH
12048: CALL_OW 255
12052: ARRAY
12053: NONEQUAL
12054: PUSH
12055: LD_EXP 22
12059: NOT
12060: PUSH
12061: LD_EXP 23
12065: PUSH
12066: LD_VAR 0 1
12070: ARRAY
12071: PUSH
12072: LD_VAR 0 2
12076: PPUSH
12077: CALL_OW 255
12081: NONEQUAL
12082: AND
12083: OR
12084: IFFALSE 12098
// ComMoveToArea ( un , BuildUpEscape ) ;
12086: LD_VAR 0 2
12090: PPUSH
12091: LD_INT 12
12093: PPUSH
12094: CALL_OW 113
12098: GO 12018
12100: POP
12101: POP
12102: GO 11933
12104: POP
12105: POP
// if BuildUp then
12106: LD_EXP 56
12110: IFFALSE 12113
// enable ;
12112: ENABLE
// end ;
12113: PPOPN 2
12115: END
// every 1 do
12116: GO 12118
12118: DISABLE
// if ( def_builduptime > 0 ) then
12119: LD_EXP 51
12123: PUSH
12124: LD_INT 0
12126: GREATER
12127: IFFALSE 12148
// begin if buildUpTime_Delay then
12129: LD_EXP 16
12133: IFFALSE 12144
// wait ( buildUpTime_Delay ) ;
12135: LD_EXP 16
12139: PPUSH
12140: CALL_OW 67
// EndBuildUp ;
12144: CALL 11717 0 0
// end ; end_of_file
12148: END
// export function SetMpTechs ( ) ; var side , i ; begin
12149: LD_INT 0
12151: PPUSH
12152: PPUSH
12153: PPUSH
// for side = 1 to 8 do
12154: LD_ADDR_VAR 0 2
12158: PUSH
12159: DOUBLE
12160: LD_INT 1
12162: DEC
12163: ST_TO_ADDR
12164: LD_INT 8
12166: PUSH
12167: FOR_TO
12168: IFFALSE 12289
// begin for i = 1 to 72 do
12170: LD_ADDR_VAR 0 3
12174: PUSH
12175: DOUBLE
12176: LD_INT 1
12178: DEC
12179: ST_TO_ADDR
12180: LD_INT 72
12182: PUSH
12183: FOR_TO
12184: IFFALSE 12215
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
12186: LD_VAR 0 3
12190: PPUSH
12191: LD_VAR 0 2
12195: PPUSH
12196: LD_INT 0
12198: PPUSH
12199: LD_VAR 0 3
12203: PPUSH
12204: CALL_OW 565
12208: PPUSH
12209: CALL_OW 322
12213: GO 12183
12215: POP
12216: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
12217: LD_INT 73
12219: PPUSH
12220: LD_VAR 0 2
12224: PPUSH
12225: LD_INT 0
12227: PPUSH
12228: LD_INT 25
12230: PPUSH
12231: CALL_OW 565
12235: PPUSH
12236: CALL_OW 322
// for i = 0 to 40 do
12240: LD_ADDR_VAR 0 3
12244: PUSH
12245: DOUBLE
12246: LD_INT 0
12248: DEC
12249: ST_TO_ADDR
12250: LD_INT 40
12252: PUSH
12253: FOR_TO
12254: IFFALSE 12285
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
12256: LD_VAR 0 3
12260: PPUSH
12261: LD_VAR 0 2
12265: PPUSH
12266: LD_INT 1
12268: PPUSH
12269: LD_VAR 0 3
12273: PPUSH
12274: CALL_OW 565
12278: PPUSH
12279: CALL_OW 324
12283: GO 12253
12285: POP
12286: POP
// end ;
12287: GO 12167
12289: POP
12290: POP
// end ;
12291: LD_VAR 0 1
12295: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
12296: LD_INT 0
12298: PPUSH
12299: PPUSH
12300: PPUSH
// for side = 1 to 8 do
12301: LD_ADDR_VAR 0 3
12305: PUSH
12306: DOUBLE
12307: LD_INT 1
12309: DEC
12310: ST_TO_ADDR
12311: LD_INT 8
12313: PUSH
12314: FOR_TO
12315: IFFALSE 16311
// begin for i = 1 to 73 do
12317: LD_ADDR_VAR 0 4
12321: PUSH
12322: DOUBLE
12323: LD_INT 1
12325: DEC
12326: ST_TO_ADDR
12327: LD_INT 73
12329: PUSH
12330: FOR_TO
12331: IFFALSE 12352
// SetTech ( i , side , state_disabled ) ;
12333: LD_VAR 0 4
12337: PPUSH
12338: LD_VAR 0 3
12342: PPUSH
12343: LD_INT 0
12345: PPUSH
12346: CALL_OW 322
12350: GO 12330
12352: POP
12353: POP
// for i = 0 to 40 do
12354: LD_ADDR_VAR 0 4
12358: PUSH
12359: DOUBLE
12360: LD_INT 0
12362: DEC
12363: ST_TO_ADDR
12364: LD_INT 40
12366: PUSH
12367: FOR_TO
12368: IFFALSE 12389
// SetRestrict ( i , side , false ) ;
12370: LD_VAR 0 4
12374: PPUSH
12375: LD_VAR 0 3
12379: PPUSH
12380: LD_INT 0
12382: PPUSH
12383: CALL_OW 324
12387: GO 12367
12389: POP
12390: POP
// case level of 1 :
12391: LD_VAR 0 1
12395: PUSH
12396: LD_INT 1
12398: DOUBLE
12399: EQUAL
12400: IFTRUE 12404
12402: GO 12557
12404: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12405: LD_INT 35
12407: PPUSH
12408: LD_VAR 0 3
12412: PPUSH
12413: LD_INT 1
12415: PPUSH
12416: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12420: LD_INT 45
12422: PPUSH
12423: LD_VAR 0 3
12427: PPUSH
12428: LD_INT 1
12430: PPUSH
12431: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12435: LD_INT 46
12437: PPUSH
12438: LD_VAR 0 3
12442: PPUSH
12443: LD_INT 1
12445: PPUSH
12446: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12450: LD_INT 47
12452: PPUSH
12453: LD_VAR 0 3
12457: PPUSH
12458: LD_INT 1
12460: PPUSH
12461: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12465: LD_INT 0
12467: PPUSH
12468: LD_VAR 0 3
12472: PPUSH
12473: LD_INT 1
12475: PPUSH
12476: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12480: LD_INT 2
12482: PPUSH
12483: LD_VAR 0 3
12487: PPUSH
12488: LD_INT 1
12490: PPUSH
12491: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12495: LD_INT 4
12497: PPUSH
12498: LD_VAR 0 3
12502: PPUSH
12503: LD_INT 1
12505: PPUSH
12506: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12510: LD_INT 6
12512: PPUSH
12513: LD_VAR 0 3
12517: PPUSH
12518: LD_INT 1
12520: PPUSH
12521: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12525: LD_INT 29
12527: PPUSH
12528: LD_VAR 0 3
12532: PPUSH
12533: LD_INT 1
12535: PPUSH
12536: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12540: LD_INT 31
12542: PPUSH
12543: LD_VAR 0 3
12547: PPUSH
12548: LD_INT 1
12550: PPUSH
12551: CALL_OW 324
// end ; 2 :
12555: GO 16309
12557: LD_INT 2
12559: DOUBLE
12560: EQUAL
12561: IFTRUE 12565
12563: GO 12763
12565: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12566: LD_INT 35
12568: PPUSH
12569: LD_VAR 0 3
12573: PPUSH
12574: LD_INT 1
12576: PPUSH
12577: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12581: LD_INT 45
12583: PPUSH
12584: LD_VAR 0 3
12588: PPUSH
12589: LD_INT 1
12591: PPUSH
12592: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12596: LD_INT 46
12598: PPUSH
12599: LD_VAR 0 3
12603: PPUSH
12604: LD_INT 1
12606: PPUSH
12607: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12611: LD_INT 47
12613: PPUSH
12614: LD_VAR 0 3
12618: PPUSH
12619: LD_INT 1
12621: PPUSH
12622: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12626: LD_INT 1
12628: PPUSH
12629: LD_VAR 0 3
12633: PPUSH
12634: LD_INT 1
12636: PPUSH
12637: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12641: LD_INT 2
12643: PPUSH
12644: LD_VAR 0 3
12648: PPUSH
12649: LD_INT 1
12651: PPUSH
12652: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12656: LD_INT 11
12658: PPUSH
12659: LD_VAR 0 3
12663: PPUSH
12664: LD_INT 1
12666: PPUSH
12667: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12671: LD_INT 0
12673: PPUSH
12674: LD_VAR 0 3
12678: PPUSH
12679: LD_INT 1
12681: PPUSH
12682: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12686: LD_INT 2
12688: PPUSH
12689: LD_VAR 0 3
12693: PPUSH
12694: LD_INT 1
12696: PPUSH
12697: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12701: LD_INT 4
12703: PPUSH
12704: LD_VAR 0 3
12708: PPUSH
12709: LD_INT 1
12711: PPUSH
12712: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12716: LD_INT 6
12718: PPUSH
12719: LD_VAR 0 3
12723: PPUSH
12724: LD_INT 1
12726: PPUSH
12727: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12731: LD_INT 29
12733: PPUSH
12734: LD_VAR 0 3
12738: PPUSH
12739: LD_INT 1
12741: PPUSH
12742: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12746: LD_INT 31
12748: PPUSH
12749: LD_VAR 0 3
12753: PPUSH
12754: LD_INT 1
12756: PPUSH
12757: CALL_OW 324
// end ; 3 :
12761: GO 16309
12763: LD_INT 3
12765: DOUBLE
12766: EQUAL
12767: IFTRUE 12771
12769: GO 13224
12771: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12772: LD_INT 35
12774: PPUSH
12775: LD_VAR 0 3
12779: PPUSH
12780: LD_INT 1
12782: PPUSH
12783: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12787: LD_INT 45
12789: PPUSH
12790: LD_VAR 0 3
12794: PPUSH
12795: LD_INT 1
12797: PPUSH
12798: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12802: LD_INT 46
12804: PPUSH
12805: LD_VAR 0 3
12809: PPUSH
12810: LD_INT 1
12812: PPUSH
12813: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12817: LD_INT 47
12819: PPUSH
12820: LD_VAR 0 3
12824: PPUSH
12825: LD_INT 1
12827: PPUSH
12828: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12832: LD_INT 1
12834: PPUSH
12835: LD_VAR 0 3
12839: PPUSH
12840: LD_INT 1
12842: PPUSH
12843: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12847: LD_INT 2
12849: PPUSH
12850: LD_VAR 0 3
12854: PPUSH
12855: LD_INT 1
12857: PPUSH
12858: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12862: LD_INT 11
12864: PPUSH
12865: LD_VAR 0 3
12869: PPUSH
12870: LD_INT 1
12872: PPUSH
12873: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12877: LD_INT 48
12879: PPUSH
12880: LD_VAR 0 3
12884: PPUSH
12885: LD_INT 1
12887: PPUSH
12888: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12892: LD_INT 69
12894: PPUSH
12895: LD_VAR 0 3
12899: PPUSH
12900: LD_INT 1
12902: PPUSH
12903: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12907: LD_INT 39
12909: PPUSH
12910: LD_VAR 0 3
12914: PPUSH
12915: LD_INT 1
12917: PPUSH
12918: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12922: LD_INT 43
12924: PPUSH
12925: LD_VAR 0 3
12929: PPUSH
12930: LD_INT 1
12932: PPUSH
12933: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12937: LD_INT 51
12939: PPUSH
12940: LD_VAR 0 3
12944: PPUSH
12945: LD_INT 1
12947: PPUSH
12948: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12952: LD_INT 6
12954: PPUSH
12955: LD_VAR 0 3
12959: PPUSH
12960: LD_INT 1
12962: PPUSH
12963: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12967: LD_INT 0
12969: PPUSH
12970: LD_VAR 0 3
12974: PPUSH
12975: LD_INT 1
12977: PPUSH
12978: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12982: LD_INT 2
12984: PPUSH
12985: LD_VAR 0 3
12989: PPUSH
12990: LD_INT 1
12992: PPUSH
12993: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12997: LD_INT 3
12999: PPUSH
13000: LD_VAR 0 3
13004: PPUSH
13005: LD_INT 1
13007: PPUSH
13008: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13012: LD_INT 4
13014: PPUSH
13015: LD_VAR 0 3
13019: PPUSH
13020: LD_INT 1
13022: PPUSH
13023: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13027: LD_INT 6
13029: PPUSH
13030: LD_VAR 0 3
13034: PPUSH
13035: LD_INT 1
13037: PPUSH
13038: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13042: LD_INT 7
13044: PPUSH
13045: LD_VAR 0 3
13049: PPUSH
13050: LD_INT 1
13052: PPUSH
13053: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13057: LD_INT 8
13059: PPUSH
13060: LD_VAR 0 3
13064: PPUSH
13065: LD_INT 1
13067: PPUSH
13068: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13072: LD_INT 10
13074: PPUSH
13075: LD_VAR 0 3
13079: PPUSH
13080: LD_INT 1
13082: PPUSH
13083: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13087: LD_INT 15
13089: PPUSH
13090: LD_VAR 0 3
13094: PPUSH
13095: LD_INT 1
13097: PPUSH
13098: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13102: LD_INT 16
13104: PPUSH
13105: LD_VAR 0 3
13109: PPUSH
13110: LD_INT 1
13112: PPUSH
13113: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13117: LD_INT 17
13119: PPUSH
13120: LD_VAR 0 3
13124: PPUSH
13125: LD_INT 1
13127: PPUSH
13128: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13132: LD_INT 20
13134: PPUSH
13135: LD_VAR 0 3
13139: PPUSH
13140: LD_INT 1
13142: PPUSH
13143: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13147: LD_INT 26
13149: PPUSH
13150: LD_VAR 0 3
13154: PPUSH
13155: LD_INT 1
13157: PPUSH
13158: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13162: LD_INT 27
13164: PPUSH
13165: LD_VAR 0 3
13169: PPUSH
13170: LD_INT 1
13172: PPUSH
13173: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13177: LD_INT 29
13179: PPUSH
13180: LD_VAR 0 3
13184: PPUSH
13185: LD_INT 1
13187: PPUSH
13188: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13192: LD_INT 31
13194: PPUSH
13195: LD_VAR 0 3
13199: PPUSH
13200: LD_INT 1
13202: PPUSH
13203: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13207: LD_INT 32
13209: PPUSH
13210: LD_VAR 0 3
13214: PPUSH
13215: LD_INT 1
13217: PPUSH
13218: CALL_OW 324
// end ; 4 :
13222: GO 16309
13224: LD_INT 4
13226: DOUBLE
13227: EQUAL
13228: IFTRUE 13232
13230: GO 14180
13232: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13233: LD_INT 35
13235: PPUSH
13236: LD_VAR 0 3
13240: PPUSH
13241: LD_INT 1
13243: PPUSH
13244: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13248: LD_INT 45
13250: PPUSH
13251: LD_VAR 0 3
13255: PPUSH
13256: LD_INT 1
13258: PPUSH
13259: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13263: LD_INT 46
13265: PPUSH
13266: LD_VAR 0 3
13270: PPUSH
13271: LD_INT 1
13273: PPUSH
13274: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13278: LD_INT 47
13280: PPUSH
13281: LD_VAR 0 3
13285: PPUSH
13286: LD_INT 1
13288: PPUSH
13289: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13293: LD_INT 1
13295: PPUSH
13296: LD_VAR 0 3
13300: PPUSH
13301: LD_INT 1
13303: PPUSH
13304: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13308: LD_INT 2
13310: PPUSH
13311: LD_VAR 0 3
13315: PPUSH
13316: LD_INT 1
13318: PPUSH
13319: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13323: LD_INT 11
13325: PPUSH
13326: LD_VAR 0 3
13330: PPUSH
13331: LD_INT 1
13333: PPUSH
13334: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13338: LD_INT 20
13340: PPUSH
13341: LD_VAR 0 3
13345: PPUSH
13346: LD_INT 1
13348: PPUSH
13349: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13353: LD_INT 48
13355: PPUSH
13356: LD_VAR 0 3
13360: PPUSH
13361: LD_INT 1
13363: PPUSH
13364: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13368: LD_INT 49
13370: PPUSH
13371: LD_VAR 0 3
13375: PPUSH
13376: LD_INT 1
13378: PPUSH
13379: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13383: LD_INT 69
13385: PPUSH
13386: LD_VAR 0 3
13390: PPUSH
13391: LD_INT 1
13393: PPUSH
13394: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13398: LD_INT 39
13400: PPUSH
13401: LD_VAR 0 3
13405: PPUSH
13406: LD_INT 1
13408: PPUSH
13409: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13413: LD_INT 34
13415: PPUSH
13416: LD_VAR 0 3
13420: PPUSH
13421: LD_INT 1
13423: PPUSH
13424: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13428: LD_INT 42
13430: PPUSH
13431: LD_VAR 0 3
13435: PPUSH
13436: LD_INT 1
13438: PPUSH
13439: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13443: LD_INT 44
13445: PPUSH
13446: LD_VAR 0 3
13450: PPUSH
13451: LD_INT 1
13453: PPUSH
13454: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13458: LD_INT 41
13460: PPUSH
13461: LD_VAR 0 3
13465: PPUSH
13466: LD_INT 1
13468: PPUSH
13469: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13473: LD_INT 43
13475: PPUSH
13476: LD_VAR 0 3
13480: PPUSH
13481: LD_INT 1
13483: PPUSH
13484: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13488: LD_INT 70
13490: PPUSH
13491: LD_VAR 0 3
13495: PPUSH
13496: LD_INT 1
13498: PPUSH
13499: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13503: LD_INT 51
13505: PPUSH
13506: LD_VAR 0 3
13510: PPUSH
13511: LD_INT 1
13513: PPUSH
13514: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13518: LD_INT 52
13520: PPUSH
13521: LD_VAR 0 3
13525: PPUSH
13526: LD_INT 1
13528: PPUSH
13529: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13533: LD_INT 6
13535: PPUSH
13536: LD_VAR 0 3
13540: PPUSH
13541: LD_INT 1
13543: PPUSH
13544: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13548: LD_INT 15
13550: PPUSH
13551: LD_VAR 0 3
13555: PPUSH
13556: LD_INT 1
13558: PPUSH
13559: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13563: LD_INT 7
13565: PPUSH
13566: LD_VAR 0 3
13570: PPUSH
13571: LD_INT 1
13573: PPUSH
13574: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13578: LD_INT 12
13580: PPUSH
13581: LD_VAR 0 3
13585: PPUSH
13586: LD_INT 1
13588: PPUSH
13589: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13593: LD_INT 18
13595: PPUSH
13596: LD_VAR 0 3
13600: PPUSH
13601: LD_INT 1
13603: PPUSH
13604: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13608: LD_INT 60
13610: PPUSH
13611: LD_VAR 0 3
13615: PPUSH
13616: LD_INT 1
13618: PPUSH
13619: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13623: LD_INT 9
13625: PPUSH
13626: LD_VAR 0 3
13630: PPUSH
13631: LD_INT 1
13633: PPUSH
13634: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13638: LD_INT 30
13640: PPUSH
13641: LD_VAR 0 3
13645: PPUSH
13646: LD_INT 1
13648: PPUSH
13649: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13653: LD_INT 37
13655: PPUSH
13656: LD_VAR 0 3
13660: PPUSH
13661: LD_INT 1
13663: PPUSH
13664: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13668: LD_INT 5
13670: PPUSH
13671: LD_VAR 0 3
13675: PPUSH
13676: LD_INT 1
13678: PPUSH
13679: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13683: LD_INT 66
13685: PPUSH
13686: LD_VAR 0 3
13690: PPUSH
13691: LD_INT 1
13693: PPUSH
13694: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13698: LD_INT 21
13700: PPUSH
13701: LD_VAR 0 3
13705: PPUSH
13706: LD_INT 1
13708: PPUSH
13709: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13713: LD_INT 22
13715: PPUSH
13716: LD_VAR 0 3
13720: PPUSH
13721: LD_INT 1
13723: PPUSH
13724: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13728: LD_INT 54
13730: PPUSH
13731: LD_VAR 0 3
13735: PPUSH
13736: LD_INT 1
13738: PPUSH
13739: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13743: LD_INT 0
13745: PPUSH
13746: LD_VAR 0 3
13750: PPUSH
13751: LD_INT 1
13753: PPUSH
13754: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
13758: LD_INT 1
13760: PPUSH
13761: LD_VAR 0 3
13765: PPUSH
13766: LD_INT 1
13768: PPUSH
13769: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13773: LD_INT 2
13775: PPUSH
13776: LD_VAR 0 3
13780: PPUSH
13781: LD_INT 1
13783: PPUSH
13784: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
13788: LD_INT 3
13790: PPUSH
13791: LD_VAR 0 3
13795: PPUSH
13796: LD_INT 1
13798: PPUSH
13799: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13803: LD_INT 4
13805: PPUSH
13806: LD_VAR 0 3
13810: PPUSH
13811: LD_INT 1
13813: PPUSH
13814: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
13818: LD_INT 5
13820: PPUSH
13821: LD_VAR 0 3
13825: PPUSH
13826: LD_INT 1
13828: PPUSH
13829: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13833: LD_INT 6
13835: PPUSH
13836: LD_VAR 0 3
13840: PPUSH
13841: LD_INT 1
13843: PPUSH
13844: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13848: LD_INT 7
13850: PPUSH
13851: LD_VAR 0 3
13855: PPUSH
13856: LD_INT 1
13858: PPUSH
13859: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13863: LD_INT 8
13865: PPUSH
13866: LD_VAR 0 3
13870: PPUSH
13871: LD_INT 1
13873: PPUSH
13874: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13878: LD_INT 10
13880: PPUSH
13881: LD_VAR 0 3
13885: PPUSH
13886: LD_INT 1
13888: PPUSH
13889: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
13893: LD_INT 11
13895: PPUSH
13896: LD_VAR 0 3
13900: PPUSH
13901: LD_INT 1
13903: PPUSH
13904: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
13908: LD_INT 12
13910: PPUSH
13911: LD_VAR 0 3
13915: PPUSH
13916: LD_INT 1
13918: PPUSH
13919: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
13923: LD_INT 13
13925: PPUSH
13926: LD_VAR 0 3
13930: PPUSH
13931: LD_INT 1
13933: PPUSH
13934: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
13938: LD_INT 14
13940: PPUSH
13941: LD_VAR 0 3
13945: PPUSH
13946: LD_INT 1
13948: PPUSH
13949: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13953: LD_INT 15
13955: PPUSH
13956: LD_VAR 0 3
13960: PPUSH
13961: LD_INT 1
13963: PPUSH
13964: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13968: LD_INT 16
13970: PPUSH
13971: LD_VAR 0 3
13975: PPUSH
13976: LD_INT 1
13978: PPUSH
13979: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13983: LD_INT 17
13985: PPUSH
13986: LD_VAR 0 3
13990: PPUSH
13991: LD_INT 1
13993: PPUSH
13994: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
13998: LD_INT 19
14000: PPUSH
14001: LD_VAR 0 3
14005: PPUSH
14006: LD_INT 1
14008: PPUSH
14009: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
14013: LD_INT 20
14015: PPUSH
14016: LD_VAR 0 3
14020: PPUSH
14021: LD_INT 1
14023: PPUSH
14024: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
14028: LD_INT 21
14030: PPUSH
14031: LD_VAR 0 3
14035: PPUSH
14036: LD_INT 1
14038: PPUSH
14039: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
14043: LD_INT 23
14045: PPUSH
14046: LD_VAR 0 3
14050: PPUSH
14051: LD_INT 1
14053: PPUSH
14054: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
14058: LD_INT 26
14060: PPUSH
14061: LD_VAR 0 3
14065: PPUSH
14066: LD_INT 1
14068: PPUSH
14069: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
14073: LD_INT 27
14075: PPUSH
14076: LD_VAR 0 3
14080: PPUSH
14081: LD_INT 1
14083: PPUSH
14084: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
14088: LD_INT 28
14090: PPUSH
14091: LD_VAR 0 3
14095: PPUSH
14096: LD_INT 1
14098: PPUSH
14099: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14103: LD_INT 29
14105: PPUSH
14106: LD_VAR 0 3
14110: PPUSH
14111: LD_INT 1
14113: PPUSH
14114: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
14118: LD_INT 30
14120: PPUSH
14121: LD_VAR 0 3
14125: PPUSH
14126: LD_INT 1
14128: PPUSH
14129: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14133: LD_INT 31
14135: PPUSH
14136: LD_VAR 0 3
14140: PPUSH
14141: LD_INT 1
14143: PPUSH
14144: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
14148: LD_INT 32
14150: PPUSH
14151: LD_VAR 0 3
14155: PPUSH
14156: LD_INT 1
14158: PPUSH
14159: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
14163: LD_INT 36
14165: PPUSH
14166: LD_VAR 0 3
14170: PPUSH
14171: LD_INT 1
14173: PPUSH
14174: CALL_OW 324
// end ; 5 :
14178: GO 16309
14180: LD_INT 5
14182: DOUBLE
14183: EQUAL
14184: IFTRUE 14188
14186: GO 15301
14188: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14189: LD_INT 35
14191: PPUSH
14192: LD_VAR 0 3
14196: PPUSH
14197: LD_INT 1
14199: PPUSH
14200: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14204: LD_INT 45
14206: PPUSH
14207: LD_VAR 0 3
14211: PPUSH
14212: LD_INT 1
14214: PPUSH
14215: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14219: LD_INT 46
14221: PPUSH
14222: LD_VAR 0 3
14226: PPUSH
14227: LD_INT 1
14229: PPUSH
14230: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14234: LD_INT 47
14236: PPUSH
14237: LD_VAR 0 3
14241: PPUSH
14242: LD_INT 1
14244: PPUSH
14245: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14249: LD_INT 1
14251: PPUSH
14252: LD_VAR 0 3
14256: PPUSH
14257: LD_INT 1
14259: PPUSH
14260: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14264: LD_INT 2
14266: PPUSH
14267: LD_VAR 0 3
14271: PPUSH
14272: LD_INT 1
14274: PPUSH
14275: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14279: LD_INT 11
14281: PPUSH
14282: LD_VAR 0 3
14286: PPUSH
14287: LD_INT 1
14289: PPUSH
14290: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
14294: LD_INT 20
14296: PPUSH
14297: LD_VAR 0 3
14301: PPUSH
14302: LD_INT 1
14304: PPUSH
14305: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14309: LD_INT 48
14311: PPUSH
14312: LD_VAR 0 3
14316: PPUSH
14317: LD_INT 1
14319: PPUSH
14320: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
14324: LD_INT 49
14326: PPUSH
14327: LD_VAR 0 3
14331: PPUSH
14332: LD_INT 1
14334: PPUSH
14335: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14339: LD_INT 69
14341: PPUSH
14342: LD_VAR 0 3
14346: PPUSH
14347: LD_INT 1
14349: PPUSH
14350: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14354: LD_INT 39
14356: PPUSH
14357: LD_VAR 0 3
14361: PPUSH
14362: LD_INT 1
14364: PPUSH
14365: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
14369: LD_INT 34
14371: PPUSH
14372: LD_VAR 0 3
14376: PPUSH
14377: LD_INT 1
14379: PPUSH
14380: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
14384: LD_INT 42
14386: PPUSH
14387: LD_VAR 0 3
14391: PPUSH
14392: LD_INT 1
14394: PPUSH
14395: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
14399: LD_INT 44
14401: PPUSH
14402: LD_VAR 0 3
14406: PPUSH
14407: LD_INT 1
14409: PPUSH
14410: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
14414: LD_INT 41
14416: PPUSH
14417: LD_VAR 0 3
14421: PPUSH
14422: LD_INT 1
14424: PPUSH
14425: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
14429: LD_INT 40
14431: PPUSH
14432: LD_VAR 0 3
14436: PPUSH
14437: LD_INT 1
14439: PPUSH
14440: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14444: LD_INT 43
14446: PPUSH
14447: LD_VAR 0 3
14451: PPUSH
14452: LD_INT 1
14454: PPUSH
14455: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
14459: LD_INT 70
14461: PPUSH
14462: LD_VAR 0 3
14466: PPUSH
14467: LD_INT 1
14469: PPUSH
14470: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14474: LD_INT 51
14476: PPUSH
14477: LD_VAR 0 3
14481: PPUSH
14482: LD_INT 1
14484: PPUSH
14485: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
14489: LD_INT 52
14491: PPUSH
14492: LD_VAR 0 3
14496: PPUSH
14497: LD_INT 1
14499: PPUSH
14500: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14504: LD_INT 6
14506: PPUSH
14507: LD_VAR 0 3
14511: PPUSH
14512: LD_INT 1
14514: PPUSH
14515: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
14519: LD_INT 15
14521: PPUSH
14522: LD_VAR 0 3
14526: PPUSH
14527: LD_INT 1
14529: PPUSH
14530: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
14534: LD_INT 7
14536: PPUSH
14537: LD_VAR 0 3
14541: PPUSH
14542: LD_INT 1
14544: PPUSH
14545: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
14549: LD_INT 12
14551: PPUSH
14552: LD_VAR 0 3
14556: PPUSH
14557: LD_INT 1
14559: PPUSH
14560: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
14564: LD_INT 17
14566: PPUSH
14567: LD_VAR 0 3
14571: PPUSH
14572: LD_INT 1
14574: PPUSH
14575: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
14579: LD_INT 18
14581: PPUSH
14582: LD_VAR 0 3
14586: PPUSH
14587: LD_INT 1
14589: PPUSH
14590: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
14594: LD_INT 60
14596: PPUSH
14597: LD_VAR 0 3
14601: PPUSH
14602: LD_INT 1
14604: PPUSH
14605: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
14609: LD_INT 32
14611: PPUSH
14612: LD_VAR 0 3
14616: PPUSH
14617: LD_INT 1
14619: PPUSH
14620: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
14624: LD_INT 9
14626: PPUSH
14627: LD_VAR 0 3
14631: PPUSH
14632: LD_INT 1
14634: PPUSH
14635: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
14639: LD_INT 57
14641: PPUSH
14642: LD_VAR 0 3
14646: PPUSH
14647: LD_INT 1
14649: PPUSH
14650: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
14654: LD_INT 30
14656: PPUSH
14657: LD_VAR 0 3
14661: PPUSH
14662: LD_INT 1
14664: PPUSH
14665: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
14669: LD_INT 37
14671: PPUSH
14672: LD_VAR 0 3
14676: PPUSH
14677: LD_INT 1
14679: PPUSH
14680: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
14684: LD_INT 63
14686: PPUSH
14687: LD_VAR 0 3
14691: PPUSH
14692: LD_INT 1
14694: PPUSH
14695: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
14699: LD_INT 3
14701: PPUSH
14702: LD_VAR 0 3
14706: PPUSH
14707: LD_INT 1
14709: PPUSH
14710: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
14714: LD_INT 4
14716: PPUSH
14717: LD_VAR 0 3
14721: PPUSH
14722: LD_INT 1
14724: PPUSH
14725: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14729: LD_INT 5
14731: PPUSH
14732: LD_VAR 0 3
14736: PPUSH
14737: LD_INT 1
14739: PPUSH
14740: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14744: LD_INT 66
14746: PPUSH
14747: LD_VAR 0 3
14751: PPUSH
14752: LD_INT 1
14754: PPUSH
14755: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14759: LD_INT 21
14761: PPUSH
14762: LD_VAR 0 3
14766: PPUSH
14767: LD_INT 1
14769: PPUSH
14770: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14774: LD_INT 22
14776: PPUSH
14777: LD_VAR 0 3
14781: PPUSH
14782: LD_INT 1
14784: PPUSH
14785: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
14789: LD_INT 19
14791: PPUSH
14792: LD_VAR 0 3
14796: PPUSH
14797: LD_INT 1
14799: PPUSH
14800: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
14804: LD_INT 54
14806: PPUSH
14807: LD_VAR 0 3
14811: PPUSH
14812: LD_INT 1
14814: PPUSH
14815: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
14819: LD_INT 55
14821: PPUSH
14822: LD_VAR 0 3
14826: PPUSH
14827: LD_INT 1
14829: PPUSH
14830: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14834: LD_INT 0
14836: PPUSH
14837: LD_VAR 0 3
14841: PPUSH
14842: LD_INT 1
14844: PPUSH
14845: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
14849: LD_INT 1
14851: PPUSH
14852: LD_VAR 0 3
14856: PPUSH
14857: LD_INT 1
14859: PPUSH
14860: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14864: LD_INT 2
14866: PPUSH
14867: LD_VAR 0 3
14871: PPUSH
14872: LD_INT 1
14874: PPUSH
14875: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
14879: LD_INT 3
14881: PPUSH
14882: LD_VAR 0 3
14886: PPUSH
14887: LD_INT 1
14889: PPUSH
14890: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14894: LD_INT 4
14896: PPUSH
14897: LD_VAR 0 3
14901: PPUSH
14902: LD_INT 1
14904: PPUSH
14905: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
14909: LD_INT 5
14911: PPUSH
14912: LD_VAR 0 3
14916: PPUSH
14917: LD_INT 1
14919: PPUSH
14920: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14924: LD_INT 6
14926: PPUSH
14927: LD_VAR 0 3
14931: PPUSH
14932: LD_INT 1
14934: PPUSH
14935: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
14939: LD_INT 7
14941: PPUSH
14942: LD_VAR 0 3
14946: PPUSH
14947: LD_INT 1
14949: PPUSH
14950: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
14954: LD_INT 8
14956: PPUSH
14957: LD_VAR 0 3
14961: PPUSH
14962: LD_INT 1
14964: PPUSH
14965: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
14969: LD_INT 10
14971: PPUSH
14972: LD_VAR 0 3
14976: PPUSH
14977: LD_INT 1
14979: PPUSH
14980: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
14984: LD_INT 11
14986: PPUSH
14987: LD_VAR 0 3
14991: PPUSH
14992: LD_INT 1
14994: PPUSH
14995: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
14999: LD_INT 12
15001: PPUSH
15002: LD_VAR 0 3
15006: PPUSH
15007: LD_INT 1
15009: PPUSH
15010: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
15014: LD_INT 13
15016: PPUSH
15017: LD_VAR 0 3
15021: PPUSH
15022: LD_INT 1
15024: PPUSH
15025: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
15029: LD_INT 14
15031: PPUSH
15032: LD_VAR 0 3
15036: PPUSH
15037: LD_INT 1
15039: PPUSH
15040: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
15044: LD_INT 15
15046: PPUSH
15047: LD_VAR 0 3
15051: PPUSH
15052: LD_INT 1
15054: PPUSH
15055: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
15059: LD_INT 16
15061: PPUSH
15062: LD_VAR 0 3
15066: PPUSH
15067: LD_INT 1
15069: PPUSH
15070: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
15074: LD_INT 17
15076: PPUSH
15077: LD_VAR 0 3
15081: PPUSH
15082: LD_INT 1
15084: PPUSH
15085: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
15089: LD_INT 18
15091: PPUSH
15092: LD_VAR 0 3
15096: PPUSH
15097: LD_INT 1
15099: PPUSH
15100: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
15104: LD_INT 19
15106: PPUSH
15107: LD_VAR 0 3
15111: PPUSH
15112: LD_INT 1
15114: PPUSH
15115: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
15119: LD_INT 20
15121: PPUSH
15122: LD_VAR 0 3
15126: PPUSH
15127: LD_INT 1
15129: PPUSH
15130: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
15134: LD_INT 21
15136: PPUSH
15137: LD_VAR 0 3
15141: PPUSH
15142: LD_INT 1
15144: PPUSH
15145: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
15149: LD_INT 23
15151: PPUSH
15152: LD_VAR 0 3
15156: PPUSH
15157: LD_INT 1
15159: PPUSH
15160: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
15164: LD_INT 26
15166: PPUSH
15167: LD_VAR 0 3
15171: PPUSH
15172: LD_INT 1
15174: PPUSH
15175: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15179: LD_INT 27
15181: PPUSH
15182: LD_VAR 0 3
15186: PPUSH
15187: LD_INT 1
15189: PPUSH
15190: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
15194: LD_INT 28
15196: PPUSH
15197: LD_VAR 0 3
15201: PPUSH
15202: LD_INT 1
15204: PPUSH
15205: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15209: LD_INT 29
15211: PPUSH
15212: LD_VAR 0 3
15216: PPUSH
15217: LD_INT 1
15219: PPUSH
15220: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
15224: LD_INT 30
15226: PPUSH
15227: LD_VAR 0 3
15231: PPUSH
15232: LD_INT 1
15234: PPUSH
15235: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15239: LD_INT 31
15241: PPUSH
15242: LD_VAR 0 3
15246: PPUSH
15247: LD_INT 1
15249: PPUSH
15250: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15254: LD_INT 32
15256: PPUSH
15257: LD_VAR 0 3
15261: PPUSH
15262: LD_INT 1
15264: PPUSH
15265: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
15269: LD_INT 33
15271: PPUSH
15272: LD_VAR 0 3
15276: PPUSH
15277: LD_INT 1
15279: PPUSH
15280: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
15284: LD_INT 36
15286: PPUSH
15287: LD_VAR 0 3
15291: PPUSH
15292: LD_INT 1
15294: PPUSH
15295: CALL_OW 324
// end ; 6 :
15299: GO 16309
15301: LD_INT 6
15303: DOUBLE
15304: EQUAL
15305: IFTRUE 15309
15307: GO 16234
15309: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15310: LD_INT 35
15312: PPUSH
15313: LD_VAR 0 3
15317: PPUSH
15318: LD_INT 1
15320: PPUSH
15321: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15325: LD_INT 45
15327: PPUSH
15328: LD_VAR 0 3
15332: PPUSH
15333: LD_INT 1
15335: PPUSH
15336: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15340: LD_INT 46
15342: PPUSH
15343: LD_VAR 0 3
15347: PPUSH
15348: LD_INT 1
15350: PPUSH
15351: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15355: LD_INT 47
15357: PPUSH
15358: LD_VAR 0 3
15362: PPUSH
15363: LD_INT 1
15365: PPUSH
15366: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15370: LD_INT 1
15372: PPUSH
15373: LD_VAR 0 3
15377: PPUSH
15378: LD_INT 1
15380: PPUSH
15381: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15385: LD_INT 2
15387: PPUSH
15388: LD_VAR 0 3
15392: PPUSH
15393: LD_INT 1
15395: PPUSH
15396: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15400: LD_INT 11
15402: PPUSH
15403: LD_VAR 0 3
15407: PPUSH
15408: LD_INT 1
15410: PPUSH
15411: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15415: LD_INT 20
15417: PPUSH
15418: LD_VAR 0 3
15422: PPUSH
15423: LD_INT 1
15425: PPUSH
15426: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15430: LD_INT 48
15432: PPUSH
15433: LD_VAR 0 3
15437: PPUSH
15438: LD_INT 1
15440: PPUSH
15441: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15445: LD_INT 49
15447: PPUSH
15448: LD_VAR 0 3
15452: PPUSH
15453: LD_INT 1
15455: PPUSH
15456: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
15460: LD_INT 50
15462: PPUSH
15463: LD_VAR 0 3
15467: PPUSH
15468: LD_INT 1
15470: PPUSH
15471: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15475: LD_INT 69
15477: PPUSH
15478: LD_VAR 0 3
15482: PPUSH
15483: LD_INT 1
15485: PPUSH
15486: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15490: LD_INT 39
15492: PPUSH
15493: LD_VAR 0 3
15497: PPUSH
15498: LD_INT 1
15500: PPUSH
15501: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15505: LD_INT 34
15507: PPUSH
15508: LD_VAR 0 3
15512: PPUSH
15513: LD_INT 1
15515: PPUSH
15516: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15520: LD_INT 42
15522: PPUSH
15523: LD_VAR 0 3
15527: PPUSH
15528: LD_INT 1
15530: PPUSH
15531: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15535: LD_INT 44
15537: PPUSH
15538: LD_VAR 0 3
15542: PPUSH
15543: LD_INT 1
15545: PPUSH
15546: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15550: LD_INT 41
15552: PPUSH
15553: LD_VAR 0 3
15557: PPUSH
15558: LD_INT 1
15560: PPUSH
15561: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
15565: LD_INT 13
15567: PPUSH
15568: LD_VAR 0 3
15572: PPUSH
15573: LD_INT 1
15575: PPUSH
15576: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
15580: LD_INT 40
15582: PPUSH
15583: LD_VAR 0 3
15587: PPUSH
15588: LD_INT 1
15590: PPUSH
15591: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15595: LD_INT 43
15597: PPUSH
15598: LD_VAR 0 3
15602: PPUSH
15603: LD_INT 1
15605: PPUSH
15606: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15610: LD_INT 70
15612: PPUSH
15613: LD_VAR 0 3
15617: PPUSH
15618: LD_INT 1
15620: PPUSH
15621: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
15625: LD_INT 23
15627: PPUSH
15628: LD_VAR 0 3
15632: PPUSH
15633: LD_INT 1
15635: PPUSH
15636: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15640: LD_INT 51
15642: PPUSH
15643: LD_VAR 0 3
15647: PPUSH
15648: LD_INT 1
15650: PPUSH
15651: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15655: LD_INT 52
15657: PPUSH
15658: LD_VAR 0 3
15662: PPUSH
15663: LD_INT 1
15665: PPUSH
15666: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15670: LD_INT 6
15672: PPUSH
15673: LD_VAR 0 3
15677: PPUSH
15678: LD_INT 1
15680: PPUSH
15681: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
15685: LD_INT 15
15687: PPUSH
15688: LD_VAR 0 3
15692: PPUSH
15693: LD_INT 1
15695: PPUSH
15696: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
15700: LD_INT 7
15702: PPUSH
15703: LD_VAR 0 3
15707: PPUSH
15708: LD_INT 1
15710: PPUSH
15711: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
15715: LD_INT 12
15717: PPUSH
15718: LD_VAR 0 3
15722: PPUSH
15723: LD_INT 1
15725: PPUSH
15726: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
15730: LD_INT 10
15732: PPUSH
15733: LD_VAR 0 3
15737: PPUSH
15738: LD_INT 1
15740: PPUSH
15741: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
15745: LD_INT 17
15747: PPUSH
15748: LD_VAR 0 3
15752: PPUSH
15753: LD_INT 1
15755: PPUSH
15756: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
15760: LD_INT 18
15762: PPUSH
15763: LD_VAR 0 3
15767: PPUSH
15768: LD_INT 1
15770: PPUSH
15771: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
15775: LD_INT 60
15777: PPUSH
15778: LD_VAR 0 3
15782: PPUSH
15783: LD_INT 1
15785: PPUSH
15786: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
15790: LD_INT 61
15792: PPUSH
15793: LD_VAR 0 3
15797: PPUSH
15798: LD_INT 1
15800: PPUSH
15801: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
15805: LD_INT 32
15807: PPUSH
15808: LD_VAR 0 3
15812: PPUSH
15813: LD_INT 1
15815: PPUSH
15816: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
15820: LD_INT 27
15822: PPUSH
15823: LD_VAR 0 3
15827: PPUSH
15828: LD_INT 1
15830: PPUSH
15831: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
15835: LD_INT 36
15837: PPUSH
15838: LD_VAR 0 3
15842: PPUSH
15843: LD_INT 1
15845: PPUSH
15846: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
15850: LD_INT 33
15852: PPUSH
15853: LD_VAR 0 3
15857: PPUSH
15858: LD_INT 1
15860: PPUSH
15861: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
15865: LD_INT 9
15867: PPUSH
15868: LD_VAR 0 3
15872: PPUSH
15873: LD_INT 1
15875: PPUSH
15876: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
15880: LD_INT 38
15882: PPUSH
15883: LD_VAR 0 3
15887: PPUSH
15888: LD_INT 1
15890: PPUSH
15891: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
15895: LD_INT 57
15897: PPUSH
15898: LD_VAR 0 3
15902: PPUSH
15903: LD_INT 1
15905: PPUSH
15906: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
15910: LD_INT 58
15912: PPUSH
15913: LD_VAR 0 3
15917: PPUSH
15918: LD_INT 1
15920: PPUSH
15921: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
15925: LD_INT 28
15927: PPUSH
15928: LD_VAR 0 3
15932: PPUSH
15933: LD_INT 1
15935: PPUSH
15936: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
15940: LD_INT 29
15942: PPUSH
15943: LD_VAR 0 3
15947: PPUSH
15948: LD_INT 1
15950: PPUSH
15951: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
15955: LD_INT 30
15957: PPUSH
15958: LD_VAR 0 3
15962: PPUSH
15963: LD_INT 1
15965: PPUSH
15966: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
15970: LD_INT 37
15972: PPUSH
15973: LD_VAR 0 3
15977: PPUSH
15978: LD_INT 1
15980: PPUSH
15981: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
15985: LD_INT 63
15987: PPUSH
15988: LD_VAR 0 3
15992: PPUSH
15993: LD_INT 1
15995: PPUSH
15996: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
16000: LD_INT 64
16002: PPUSH
16003: LD_VAR 0 3
16007: PPUSH
16008: LD_INT 1
16010: PPUSH
16011: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
16015: LD_INT 3
16017: PPUSH
16018: LD_VAR 0 3
16022: PPUSH
16023: LD_INT 1
16025: PPUSH
16026: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
16030: LD_INT 4
16032: PPUSH
16033: LD_VAR 0 3
16037: PPUSH
16038: LD_INT 1
16040: PPUSH
16041: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
16045: LD_INT 5
16047: PPUSH
16048: LD_VAR 0 3
16052: PPUSH
16053: LD_INT 1
16055: PPUSH
16056: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
16060: LD_INT 8
16062: PPUSH
16063: LD_VAR 0 3
16067: PPUSH
16068: LD_INT 1
16070: PPUSH
16071: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
16075: LD_INT 66
16077: PPUSH
16078: LD_VAR 0 3
16082: PPUSH
16083: LD_INT 1
16085: PPUSH
16086: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
16090: LD_INT 67
16092: PPUSH
16093: LD_VAR 0 3
16097: PPUSH
16098: LD_INT 1
16100: PPUSH
16101: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
16105: LD_INT 21
16107: PPUSH
16108: LD_VAR 0 3
16112: PPUSH
16113: LD_INT 1
16115: PPUSH
16116: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
16120: LD_INT 22
16122: PPUSH
16123: LD_VAR 0 3
16127: PPUSH
16128: LD_INT 1
16130: PPUSH
16131: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
16135: LD_INT 19
16137: PPUSH
16138: LD_VAR 0 3
16142: PPUSH
16143: LD_INT 1
16145: PPUSH
16146: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
16150: LD_INT 26
16152: PPUSH
16153: LD_VAR 0 3
16157: PPUSH
16158: LD_INT 1
16160: PPUSH
16161: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
16165: LD_INT 54
16167: PPUSH
16168: LD_VAR 0 3
16172: PPUSH
16173: LD_INT 1
16175: PPUSH
16176: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
16180: LD_INT 55
16182: PPUSH
16183: LD_VAR 0 3
16187: PPUSH
16188: LD_INT 1
16190: PPUSH
16191: CALL_OW 322
// for i = 0 to 39 do
16195: LD_ADDR_VAR 0 4
16199: PUSH
16200: DOUBLE
16201: LD_INT 0
16203: DEC
16204: ST_TO_ADDR
16205: LD_INT 39
16207: PUSH
16208: FOR_TO
16209: IFFALSE 16230
// SetRestrict ( i , side , true ) ;
16211: LD_VAR 0 4
16215: PPUSH
16216: LD_VAR 0 3
16220: PPUSH
16221: LD_INT 1
16223: PPUSH
16224: CALL_OW 324
16228: GO 16208
16230: POP
16231: POP
// end ; else
16232: GO 16309
16234: POP
// begin for i = 1 to 73 do
16235: LD_ADDR_VAR 0 4
16239: PUSH
16240: DOUBLE
16241: LD_INT 1
16243: DEC
16244: ST_TO_ADDR
16245: LD_INT 73
16247: PUSH
16248: FOR_TO
16249: IFFALSE 16270
// SetTech ( i , side , state_enabled ) ;
16251: LD_VAR 0 4
16255: PPUSH
16256: LD_VAR 0 3
16260: PPUSH
16261: LD_INT 1
16263: PPUSH
16264: CALL_OW 322
16268: GO 16248
16270: POP
16271: POP
// for i = 0 to 39 do
16272: LD_ADDR_VAR 0 4
16276: PUSH
16277: DOUBLE
16278: LD_INT 0
16280: DEC
16281: ST_TO_ADDR
16282: LD_INT 39
16284: PUSH
16285: FOR_TO
16286: IFFALSE 16307
// SetRestrict ( i , side , true ) ;
16288: LD_VAR 0 4
16292: PPUSH
16293: LD_VAR 0 3
16297: PPUSH
16298: LD_INT 1
16300: PPUSH
16301: CALL_OW 324
16305: GO 16285
16307: POP
16308: POP
// end ; end ; end ;
16309: GO 12314
16311: POP
16312: POP
// end ; end_of_file
16313: LD_VAR 0 2
16317: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
16318: LD_INT 0
16320: PPUSH
16321: PPUSH
// enable ( 98 ) ;
16322: LD_INT 98
16324: ENABLE_MARKED
// GameEnded = false ;
16325: LD_ADDR_LOC 29
16329: PUSH
16330: LD_INT 0
16332: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
16333: LD_ADDR_LOC 28
16337: PUSH
16338: LD_INT 0
16340: PUSH
16341: LD_INT 0
16343: PUSH
16344: LD_INT 0
16346: PUSH
16347: LD_INT 0
16349: PUSH
16350: LD_INT 0
16352: PUSH
16353: LD_INT 0
16355: PUSH
16356: LD_INT 0
16358: PUSH
16359: LD_INT 0
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: ST_TO_ADDR
// unfoged = false ;
16372: LD_ADDR_LOC 30
16376: PUSH
16377: LD_INT 0
16379: ST_TO_ADDR
// for i = 1 to side_positions do
16380: LD_ADDR_VAR 0 2
16384: PUSH
16385: DOUBLE
16386: LD_INT 1
16388: DEC
16389: ST_TO_ADDR
16390: LD_EXP 20
16394: PUSH
16395: FOR_TO
16396: IFFALSE 16436
// if not side_positions [ i ] then
16398: LD_EXP 20
16402: PUSH
16403: LD_VAR 0 2
16407: ARRAY
16408: NOT
16409: IFFALSE 16434
// defaited = replace ( defaited , i , true ) ;
16411: LD_ADDR_LOC 28
16415: PUSH
16416: LD_LOC 28
16420: PPUSH
16421: LD_VAR 0 2
16425: PPUSH
16426: LD_INT 1
16428: PPUSH
16429: CALL_OW 1
16433: ST_TO_ADDR
16434: GO 16395
16436: POP
16437: POP
// end ;
16438: LD_VAR 0 1
16442: RET
// function CanWinLoose ; begin
16443: LD_INT 0
16445: PPUSH
// Result := true ;
16446: LD_ADDR_VAR 0 1
16450: PUSH
16451: LD_INT 1
16453: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
16454: CALL_OW 518
16458: PUSH
16459: CALL_OW 519
16463: PUSH
16464: LD_INT 0
16466: GREATER
16467: AND
16468: IFFALSE 16478
// Result := false ;
16470: LD_ADDR_VAR 0 1
16474: PUSH
16475: LD_INT 0
16477: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
16478: CALL_OW 531
16482: PUSH
16483: CALL_OW 519
16487: PUSH
16488: LD_INT 1
16490: GREATER
16491: AND
16492: IFFALSE 16502
// Result := false ;
16494: LD_ADDR_VAR 0 1
16498: PUSH
16499: LD_INT 0
16501: ST_TO_ADDR
// end ;
16502: LD_VAR 0 1
16506: RET
// export function HasPower ( i ) ; var k , h ; begin
16507: LD_INT 0
16509: PPUSH
16510: PPUSH
16511: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
16512: LD_VAR 0 1
16516: PPUSH
16517: CALL_OW 108
16521: NOT
16522: PUSH
16523: LD_EXP 19
16527: PUSH
16528: LD_VAR 0 1
16532: ARRAY
16533: NOT
16534: AND
16535: PUSH
16536: LD_OWVAR 4
16540: AND
16541: IFFALSE 16553
// begin result = false ;
16543: LD_ADDR_VAR 0 2
16547: PUSH
16548: LD_INT 0
16550: ST_TO_ADDR
// end else
16551: GO 16848
// case def_win_rules of 0 :
16553: LD_EXP 15
16557: PUSH
16558: LD_INT 0
16560: DOUBLE
16561: EQUAL
16562: IFTRUE 16566
16564: GO 16729
16566: POP
// if def_people_respawning then
16567: LD_EXP 48
16571: IFFALSE 16662
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
16573: LD_ADDR_VAR 0 2
16577: PUSH
16578: LD_INT 22
16580: PUSH
16581: LD_VAR 0 1
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PUSH
16590: LD_INT 2
16592: PUSH
16593: LD_INT 21
16595: PUSH
16596: LD_INT 1
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PUSH
16603: LD_INT 33
16605: PUSH
16606: LD_INT 3
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PUSH
16613: LD_INT 33
16615: PUSH
16616: LD_INT 5
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: PUSH
16623: LD_INT 30
16625: PUSH
16626: LD_INT 0
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: PUSH
16633: LD_INT 30
16635: PUSH
16636: LD_INT 1
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: LIST
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: PPUSH
16655: CALL_OW 69
16659: ST_TO_ADDR
16660: GO 16727
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
16662: LD_ADDR_VAR 0 2
16666: PUSH
16667: LD_INT 22
16669: PUSH
16670: LD_VAR 0 1
16674: PUSH
16675: EMPTY
16676: LIST
16677: LIST
16678: PUSH
16679: LD_INT 2
16681: PUSH
16682: LD_INT 21
16684: PUSH
16685: LD_INT 1
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: PUSH
16692: LD_INT 33
16694: PUSH
16695: LD_INT 3
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: PUSH
16702: LD_INT 33
16704: PUSH
16705: LD_INT 5
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: PPUSH
16722: CALL_OW 69
16726: ST_TO_ADDR
16727: GO 16848
16729: LD_INT 1
16731: DOUBLE
16732: EQUAL
16733: IFTRUE 16737
16735: GO 16776
16737: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
16738: LD_ADDR_VAR 0 2
16742: PUSH
16743: LD_INT 22
16745: PUSH
16746: LD_VAR 0 1
16750: PUSH
16751: EMPTY
16752: LIST
16753: LIST
16754: PUSH
16755: LD_INT 21
16757: PUSH
16758: LD_INT 1
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: PPUSH
16769: CALL_OW 69
16773: ST_TO_ADDR
16774: GO 16848
16776: LD_INT 2
16778: DOUBLE
16779: EQUAL
16780: IFTRUE 16784
16782: GO 16847
16784: POP
// begin h = false ;
16785: LD_ADDR_VAR 0 4
16789: PUSH
16790: LD_INT 0
16792: ST_TO_ADDR
// for k in heroes [ i ] do
16793: LD_ADDR_VAR 0 3
16797: PUSH
16798: LD_EXP 28
16802: PUSH
16803: LD_VAR 0 1
16807: ARRAY
16808: PUSH
16809: FOR_IN
16810: IFFALSE 16833
// if IsLive ( k ) then
16812: LD_VAR 0 3
16816: PPUSH
16817: CALL_OW 300
16821: IFFALSE 16831
// h = true ;
16823: LD_ADDR_VAR 0 4
16827: PUSH
16828: LD_INT 1
16830: ST_TO_ADDR
16831: GO 16809
16833: POP
16834: POP
// Result := h ;
16835: LD_ADDR_VAR 0 2
16839: PUSH
16840: LD_VAR 0 4
16844: ST_TO_ADDR
// end ; end ;
16845: GO 16848
16847: POP
// end ;
16848: LD_VAR 0 2
16852: RET
// function AlliedSides ( i , j ) ; begin
16853: LD_INT 0
16855: PPUSH
// Result := false ;
16856: LD_ADDR_VAR 0 3
16860: PUSH
16861: LD_INT 0
16863: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
16864: LD_VAR 0 1
16868: PPUSH
16869: LD_VAR 0 2
16873: PPUSH
16874: CALL_OW 81
16878: PUSH
16879: LD_INT 1
16881: EQUAL
16882: PUSH
16883: LD_VAR 0 2
16887: PPUSH
16888: LD_VAR 0 1
16892: PPUSH
16893: CALL_OW 81
16897: PUSH
16898: LD_INT 1
16900: EQUAL
16901: AND
16902: PUSH
16903: LD_VAR 0 1
16907: PPUSH
16908: CALL_OW 83
16912: AND
16913: PUSH
16914: LD_VAR 0 2
16918: PPUSH
16919: CALL_OW 83
16923: AND
16924: IFFALSE 16934
// Result := true ;
16926: LD_ADDR_VAR 0 3
16930: PUSH
16931: LD_INT 1
16933: ST_TO_ADDR
// end ;
16934: LD_VAR 0 3
16938: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
16939: CALL 16443 0 0
16943: PUSH
16944: LD_LOC 29
16948: NOT
16949: AND
16950: IFFALSE 16966
16952: GO 16954
16954: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
16955: LD_ADDR_EXP 54
16959: PUSH
16960: LD_STRING #Player-Ended
16962: PUSH
16963: EMPTY
16964: LIST
16965: ST_TO_ADDR
16966: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
16967: CALL 16443 0 0
16971: PUSH
16972: LD_LOC 29
16976: AND
16977: IFFALSE 16986
16979: GO 16981
16981: DISABLE
// YouLostInMultiplayer ;
16982: CALL_OW 107
16986: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
16987: CALL 16443 0 0
16991: NOT
16992: PUSH
16993: CALL_OW 531
16997: NOT
16998: AND
16999: IFFALSE 17015
17001: GO 17003
17003: DISABLE
// WaitServerStrings = [ #server-wait ] ;
17004: LD_ADDR_EXP 54
17008: PUSH
17009: LD_STRING #server-wait
17011: PUSH
17012: EMPTY
17013: LIST
17014: ST_TO_ADDR
17015: END
// every 100 trigger IAmSpec do
17016: CALL_OW 531
17020: IFFALSE 17036
17022: GO 17024
17024: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
17025: LD_ADDR_EXP 54
17029: PUSH
17030: LD_STRING #Player-IAmSpec
17032: PUSH
17033: EMPTY
17034: LIST
17035: ST_TO_ADDR
17036: END
// every 100 trigger GameEnded and IAmSpec do
17037: LD_LOC 29
17041: PUSH
17042: CALL_OW 531
17046: AND
17047: IFFALSE 17056
17049: GO 17051
17051: DISABLE
// YouLostInMultiplayer ;
17052: CALL_OW 107
17056: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
17057: CALL 16443 0 0
17061: PUSH
17062: LD_LOC 29
17066: NOT
17067: AND
17068: IFFALSE 17084
17070: GO 17072
17072: DISABLE
// WaitServerStrings = [ $player-win ] ;
17073: LD_ADDR_EXP 54
17077: PUSH
17078: LD_STRING $player-win
17080: PUSH
17081: EMPTY
17082: LIST
17083: ST_TO_ADDR
17084: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
17085: CALL 16443 0 0
17089: PUSH
17090: LD_LOC 29
17094: AND
17095: IFFALSE 17119
17097: GO 17099
17099: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
17100: LD_EXP 21
17104: PUSH
17105: LD_OWVAR 2
17109: ARRAY
17110: PPUSH
17111: CALL 11326 0 1
// YouWinInMultiplayer ;
17115: CALL_OW 106
// end ;
17119: END
// every 100 trigger isEditor marked 401 do
17120: LD_OWVAR 84
17124: IFFALSE 17140
17126: GO 17128
17128: DISABLE
// Debug_Strings = [ You won ] ;
17129: LD_ADDR_OWVAR 48
17133: PUSH
17134: LD_STRING You won
17136: PUSH
17137: EMPTY
17138: LIST
17139: ST_TO_ADDR
17140: END
// every 100 trigger isEditor marked 400 do
17141: LD_OWVAR 84
17145: IFFALSE 17161
17147: GO 17149
17149: DISABLE
// Debug_Strings = [ You loss ] ;
17150: LD_ADDR_OWVAR 48
17154: PUSH
17155: LD_STRING You loss
17157: PUSH
17158: EMPTY
17159: LIST
17160: ST_TO_ADDR
17161: END
// every 100 marked 98 do var i , un ;
17162: GO 17164
17164: DISABLE
17165: LD_INT 0
17167: PPUSH
17168: PPUSH
// begin for i = 1 to side_positions do
17169: LD_ADDR_VAR 0 1
17173: PUSH
17174: DOUBLE
17175: LD_INT 1
17177: DEC
17178: ST_TO_ADDR
17179: LD_EXP 20
17183: PUSH
17184: FOR_TO
17185: IFFALSE 17308
// if side_positions [ i ] then
17187: LD_EXP 20
17191: PUSH
17192: LD_VAR 0 1
17196: ARRAY
17197: IFFALSE 17306
// if not HasPower ( i ) and not Defaited [ i ] then
17199: LD_VAR 0 1
17203: PPUSH
17204: CALL 16507 0 1
17208: NOT
17209: PUSH
17210: LD_LOC 28
17214: PUSH
17215: LD_VAR 0 1
17219: ARRAY
17220: NOT
17221: AND
17222: IFFALSE 17306
// begin un = filterallunits ( [ f_side , i ] ) ;
17224: LD_ADDR_VAR 0 2
17228: PUSH
17229: LD_INT 22
17231: PUSH
17232: LD_VAR 0 1
17236: PUSH
17237: EMPTY
17238: LIST
17239: LIST
17240: PPUSH
17241: CALL_OW 69
17245: ST_TO_ADDR
// if un then
17246: LD_VAR 0 2
17250: IFFALSE 17264
// SetSide ( un , 0 ) ;
17252: LD_VAR 0 2
17256: PPUSH
17257: LD_INT 0
17259: PPUSH
17260: CALL_OW 235
// Defaited = replace ( Defaited , i , true ) ;
17264: LD_ADDR_LOC 28
17268: PUSH
17269: LD_LOC 28
17273: PPUSH
17274: LD_VAR 0 1
17278: PPUSH
17279: LD_INT 1
17281: PPUSH
17282: CALL_OW 1
17286: ST_TO_ADDR
// if i = your_side then
17287: LD_VAR 0 1
17291: PUSH
17292: LD_OWVAR 2
17296: EQUAL
17297: IFFALSE 17306
// begin Multiplayer_Loose_Message ;
17299: CALL_OW 521
// enable ( 400 ) ;
17303: LD_INT 400
17305: ENABLE_MARKED
// end ; end ;
17306: GO 17184
17308: POP
17309: POP
// if not Unfoged and defaited [ your_side ] then
17310: LD_LOC 30
17314: NOT
17315: PUSH
17316: LD_LOC 28
17320: PUSH
17321: LD_OWVAR 2
17325: ARRAY
17326: AND
17327: IFFALSE 17333
// Unfog ;
17329: CALL 17519 0 0
// DidGameEnd ;
17333: CALL 17348 0 0
// if not GameEnded then
17337: LD_LOC 29
17341: NOT
17342: IFFALSE 17345
// enable ;
17344: ENABLE
// end ;
17345: PPOPN 2
17347: END
// function DidGameEnd ; var i , k , enemy ; begin
17348: LD_INT 0
17350: PPUSH
17351: PPUSH
17352: PPUSH
17353: PPUSH
// enemy = [ ] ;
17354: LD_ADDR_VAR 0 4
17358: PUSH
17359: EMPTY
17360: ST_TO_ADDR
// for i = 1 to side_positions do
17361: LD_ADDR_VAR 0 2
17365: PUSH
17366: DOUBLE
17367: LD_INT 1
17369: DEC
17370: ST_TO_ADDR
17371: LD_EXP 20
17375: PUSH
17376: FOR_TO
17377: IFFALSE 17481
// if not defaited [ i ] then
17379: LD_LOC 28
17383: PUSH
17384: LD_VAR 0 2
17388: ARRAY
17389: NOT
17390: IFFALSE 17479
// for k = 1 to side_positions do
17392: LD_ADDR_VAR 0 3
17396: PUSH
17397: DOUBLE
17398: LD_INT 1
17400: DEC
17401: ST_TO_ADDR
17402: LD_EXP 20
17406: PUSH
17407: FOR_TO
17408: IFFALSE 17477
// if not defaited [ k ] then
17410: LD_LOC 28
17414: PUSH
17415: LD_VAR 0 3
17419: ARRAY
17420: NOT
17421: IFFALSE 17475
// if GetAttitude ( i , k ) in [ att_enemy , att_neutral ] then
17423: LD_VAR 0 2
17427: PPUSH
17428: LD_VAR 0 3
17432: PPUSH
17433: CALL_OW 81
17437: PUSH
17438: LD_INT 2
17440: PUSH
17441: LD_INT 0
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: IN
17448: IFFALSE 17475
// enemy = enemy ^ [ i , k ] ;
17450: LD_ADDR_VAR 0 4
17454: PUSH
17455: LD_VAR 0 4
17459: PUSH
17460: LD_VAR 0 2
17464: PUSH
17465: LD_VAR 0 3
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: ADD
17474: ST_TO_ADDR
17475: GO 17407
17477: POP
17478: POP
17479: GO 17376
17481: POP
17482: POP
// if not enemy then
17483: LD_VAR 0 4
17487: NOT
17488: IFFALSE 17514
// begin GameEnded = true ;
17490: LD_ADDR_LOC 29
17494: PUSH
17495: LD_INT 1
17497: ST_TO_ADDR
// if not defaited [ your_side ] then
17498: LD_LOC 28
17502: PUSH
17503: LD_OWVAR 2
17507: ARRAY
17508: NOT
17509: IFFALSE 17514
// enable ( 401 ) ;
17511: LD_INT 401
17513: ENABLE_MARKED
// end ; end ;
17514: LD_VAR 0 1
17518: RET
// function unfog ; var k , friends ; begin
17519: LD_INT 0
17521: PPUSH
17522: PPUSH
17523: PPUSH
// for k = 1 to side_positions do
17524: LD_ADDR_VAR 0 2
17528: PUSH
17529: DOUBLE
17530: LD_INT 1
17532: DEC
17533: ST_TO_ADDR
17534: LD_EXP 20
17538: PUSH
17539: FOR_TO
17540: IFFALSE 17596
// if not defaited [ k ] then
17542: LD_LOC 28
17546: PUSH
17547: LD_VAR 0 2
17551: ARRAY
17552: NOT
17553: IFFALSE 17594
// if GetAttitude ( your_side , k ) in [ att_friend ] then
17555: LD_OWVAR 2
17559: PPUSH
17560: LD_VAR 0 2
17564: PPUSH
17565: CALL_OW 81
17569: PUSH
17570: LD_INT 1
17572: PUSH
17573: EMPTY
17574: LIST
17575: IN
17576: IFFALSE 17594
// friends = friends ^ k ;
17578: LD_ADDR_VAR 0 3
17582: PUSH
17583: LD_VAR 0 3
17587: PUSH
17588: LD_VAR 0 2
17592: ADD
17593: ST_TO_ADDR
17594: GO 17539
17596: POP
17597: POP
// if not friends then
17598: LD_VAR 0 3
17602: NOT
17603: IFFALSE 17620
// begin fogoff ( true ) ;
17605: LD_INT 1
17607: PPUSH
17608: CALL_OW 344
// unfoged = true ;
17612: LD_ADDR_LOC 30
17616: PUSH
17617: LD_INT 1
17619: ST_TO_ADDR
// end ; end ;
17620: LD_VAR 0 1
17624: RET
// export function MakeGameEnd ; begin
17625: LD_INT 0
17627: PPUSH
// fogoff ( true ) ;
17628: LD_INT 1
17630: PPUSH
17631: CALL_OW 344
// unfoged = true ;
17635: LD_ADDR_LOC 30
17639: PUSH
17640: LD_INT 1
17642: ST_TO_ADDR
// wait ( 0 0$5 ) ;
17643: LD_INT 175
17645: PPUSH
17646: CALL_OW 67
// GameEnded = true ;
17650: LD_ADDR_LOC 29
17654: PUSH
17655: LD_INT 1
17657: ST_TO_ADDR
// end ;
17658: LD_VAR 0 1
17662: RET
// export function GetGameEnded ; begin
17663: LD_INT 0
17665: PPUSH
// result = GameEnded ;
17666: LD_ADDR_VAR 0 1
17670: PUSH
17671: LD_LOC 29
17675: ST_TO_ADDR
// end ;
17676: LD_VAR 0 1
17680: RET
