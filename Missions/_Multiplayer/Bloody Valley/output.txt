// export def_tree_function ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , respawning_time_min , respawning_time_max , siberite_bomb_Delay , amount_of_apemen , tree_function , def_win_rules , buildUpTime_Delay ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export Position_Sides ; export depot_def , breastworks_def , start_def , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 141
// begin Your_Side := mp_player_side ;
  79: LD_ADDR_OWVAR 2
  83: PUSH
  84: LD_OWVAR 7
  88: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  89: LD_ADDR_EXP 20
  93: PUSH
  94: LD_OWVAR 17
  98: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  99: LD_ADDR_EXP 17
 103: PUSH
 104: LD_OWVAR 15
 108: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 109: LD_ADDR_EXP 21
 113: PUSH
 114: LD_OWVAR 16
 118: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 119: LD_ADDR_EXP 19
 123: PUSH
 124: CALL 0 0 0
 128: ST_TO_ADDR
// Teams := mp_teams ;
 129: LD_ADDR_EXP 18
 133: PUSH
 134: LD_OWVAR 12
 138: ST_TO_ADDR
// end else
 139: GO 334
// begin Your_Side := 4 ;
 141: LD_ADDR_OWVAR 2
 145: PUSH
 146: LD_INT 4
 148: ST_TO_ADDR
// Side_Positions := [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 149: LD_ADDR_EXP 20
 153: PUSH
 154: LD_INT 0
 156: PUSH
 157: LD_INT 3
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: LD_INT 1
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 2
 171: PUSH
 172: LD_INT 4
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: ST_TO_ADDR
// Side_Teams := [ 0 , 1 , 0 , 2 , 0 , 1 , 2 , 0 ] ;
 188: LD_ADDR_EXP 17
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: LD_INT 1
 198: PUSH
 199: LD_INT 0
 201: PUSH
 202: LD_INT 2
 204: PUSH
 205: LD_INT 0
 207: PUSH
 208: LD_INT 1
 210: PUSH
 211: LD_INT 2
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: ST_TO_ADDR
// Side_Nations := [ 0 , 3 , 0 , 1 , 0 , 1 , 3 , 0 ] ;
 227: LD_ADDR_EXP 21
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: LD_INT 0
 240: PUSH
 241: LD_INT 1
 243: PUSH
 244: LD_INT 0
 246: PUSH
 247: LD_INT 1
 249: PUSH
 250: LD_INT 3
 252: PUSH
 253: LD_INT 0
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: LIST
 264: LIST
 265: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 266: LD_ADDR_EXP 19
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: LD_INT 0
 279: PUSH
 280: LD_INT 0
 282: PUSH
 283: LD_INT 0
 285: PUSH
 286: LD_INT 0
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: LIST
 299: LIST
 300: LIST
 301: LIST
 302: LIST
 303: LIST
 304: ST_TO_ADDR
// Teams := [ [ 2 , 7 ] , [ 6 , 4 ] ] ;
 305: LD_ADDR_EXP 18
 309: PUSH
 310: LD_INT 2
 312: PUSH
 313: LD_INT 7
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: LD_INT 6
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: ST_TO_ADDR
// end ; for i := 1 to 8 do
 334: LD_ADDR_VAR 0 2
 338: PUSH
 339: DOUBLE
 340: LD_INT 1
 342: DEC
 343: ST_TO_ADDR
 344: LD_INT 8
 346: PUSH
 347: FOR_TO
 348: IFFALSE 435
// if Multiplayer_GetPlayerIsSpec ( i ) then
 350: LD_VAR 0 2
 354: PPUSH
 355: CALL_OW 530
 359: IFFALSE 433
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 361: LD_ADDR_EXP 20
 365: PUSH
 366: LD_EXP 20
 370: PPUSH
 371: LD_VAR 0 2
 375: PPUSH
 376: LD_INT 0
 378: PPUSH
 379: CALL_OW 1
 383: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 384: LD_ADDR_EXP 18
 388: PUSH
 389: LD_EXP 18
 393: PPUSH
 394: LD_EXP 17
 398: PUSH
 399: LD_VAR 0 2
 403: ARRAY
 404: PPUSH
 405: LD_EXP 18
 409: PUSH
 410: LD_EXP 17
 414: PUSH
 415: LD_VAR 0 2
 419: ARRAY
 420: ARRAY
 421: PUSH
 422: LD_VAR 0 2
 426: DIFF
 427: PPUSH
 428: CALL_OW 1
 432: ST_TO_ADDR
// end ;
 433: GO 347
 435: POP
 436: POP
// Position_Sides := [ 0 , 0 , 0 , 0 ] ;
 437: LD_ADDR_EXP 23
 441: PUSH
 442: LD_INT 0
 444: PUSH
 445: LD_INT 0
 447: PUSH
 448: LD_INT 0
 450: PUSH
 451: LD_INT 0
 453: PUSH
 454: EMPTY
 455: LIST
 456: LIST
 457: LIST
 458: LIST
 459: ST_TO_ADDR
// for i := 1 to 8 do
 460: LD_ADDR_VAR 0 2
 464: PUSH
 465: DOUBLE
 466: LD_INT 1
 468: DEC
 469: ST_TO_ADDR
 470: LD_INT 8
 472: PUSH
 473: FOR_TO
 474: IFFALSE 521
// if Side_Positions [ i ] then
 476: LD_EXP 20
 480: PUSH
 481: LD_VAR 0 2
 485: ARRAY
 486: IFFALSE 519
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 488: LD_ADDR_EXP 23
 492: PUSH
 493: LD_EXP 23
 497: PPUSH
 498: LD_EXP 20
 502: PUSH
 503: LD_VAR 0 2
 507: ARRAY
 508: PPUSH
 509: LD_VAR 0 2
 513: PPUSH
 514: CALL_OW 1
 518: ST_TO_ADDR
 519: GO 473
 521: POP
 522: POP
// Team_Game := Side_Teams [ your_side ] ;
 523: LD_ADDR_EXP 22
 527: PUSH
 528: LD_EXP 17
 532: PUSH
 533: LD_OWVAR 2
 537: ARRAY
 538: ST_TO_ADDR
// if Multiplayer then
 539: LD_OWVAR 4
 543: IFFALSE 750
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 545: LD_ADDR_EXP 31
 549: PUSH
 550: LD_INT 0
 552: PPUSH
 553: CALL_OW 426
 557: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 558: LD_ADDR_EXP 32
 562: PUSH
 563: LD_INT 1
 565: PPUSH
 566: CALL_OW 426
 570: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 571: LD_ADDR_EXP 33
 575: PUSH
 576: LD_INT 2
 578: PPUSH
 579: CALL_OW 426
 583: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 584: LD_ADDR_EXP 34
 588: PUSH
 589: LD_INT 3
 591: PPUSH
 592: CALL_OW 426
 596: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 597: LD_ADDR_EXP 35
 601: PUSH
 602: LD_INT 4
 604: PPUSH
 605: CALL_OW 426
 609: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 610: LD_ADDR_EXP 36
 614: PUSH
 615: LD_INT 5
 617: PPUSH
 618: CALL_OW 426
 622: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 623: LD_ADDR_EXP 38
 627: PUSH
 628: LD_INT 10
 630: PPUSH
 631: CALL_OW 426
 635: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 636: LD_ADDR_EXP 39
 640: PUSH
 641: LD_INT 11
 643: PPUSH
 644: CALL_OW 426
 648: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 649: LD_ADDR_EXP 40
 653: PUSH
 654: LD_INT 12
 656: PPUSH
 657: CALL_OW 426
 661: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 13 ) ;
 662: LD_ADDR_EXP 42
 666: PUSH
 667: LD_INT 13
 669: PPUSH
 670: CALL_OW 426
 674: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 14 ) ;
 675: LD_ADDR_EXP 41
 679: PUSH
 680: LD_INT 14
 682: PPUSH
 683: CALL_OW 426
 687: ST_TO_ADDR
// def_tree_function := GetMultiplayerSetting ( 15 ) ;
 688: LD_ADDR_EXP 1
 692: PUSH
 693: LD_INT 15
 695: PPUSH
 696: CALL_OW 426
 700: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 701: LD_ADDR_EXP 43
 705: PUSH
 706: LD_INT 17
 708: PPUSH
 709: CALL_OW 426
 713: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 714: LD_ADDR_EXP 44
 718: PUSH
 719: LD_INT 20
 721: PPUSH
 722: CALL_OW 426
 726: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 727: LD_ADDR_VAR 0 3
 731: PUSH
 732: LD_INT 22
 734: PPUSH
 735: CALL_OW 426
 739: ST_TO_ADDR
// def_win_rules = 0 ;
 740: LD_ADDR_EXP 15
 744: PUSH
 745: LD_INT 0
 747: ST_TO_ADDR
// end else
 748: GO 882
// begin Randomize ;
 750: CALL_OW 10
// def_base_level := 2 ;
 754: LD_ADDR_EXP 31
 758: PUSH
 759: LD_INT 2
 761: ST_TO_ADDR
// def_amount_of_people := 1 ;
 762: LD_ADDR_EXP 32
 766: PUSH
 767: LD_INT 1
 769: ST_TO_ADDR
// def_skill_level := 1 ;
 770: LD_ADDR_EXP 33
 774: PUSH
 775: LD_INT 1
 777: ST_TO_ADDR
// def_starting_resources := 2 ;
 778: LD_ADDR_EXP 34
 782: PUSH
 783: LD_INT 2
 785: ST_TO_ADDR
// def_shipments_density := 1 ;
 786: LD_ADDR_EXP 35
 790: PUSH
 791: LD_INT 1
 793: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 794: LD_ADDR_EXP 36
 798: PUSH
 799: LD_INT 0
 801: ST_TO_ADDR
// def_shared_vision := 1 ;
 802: LD_ADDR_EXP 38
 806: PUSH
 807: LD_INT 1
 809: ST_TO_ADDR
// def_morale_flags := 1 ;
 810: LD_ADDR_EXP 39
 814: PUSH
 815: LD_INT 1
 817: ST_TO_ADDR
// def_siberite_detection := 1 ;
 818: LD_ADDR_EXP 40
 822: PUSH
 823: LD_INT 1
 825: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 826: LD_ADDR_EXP 42
 830: PUSH
 831: LD_INT 3
 833: ST_TO_ADDR
// def_people_respawning := 2 ;
 834: LD_ADDR_EXP 41
 838: PUSH
 839: LD_INT 2
 841: ST_TO_ADDR
// def_tree_function := 7 ;
 842: LD_ADDR_EXP 1
 846: PUSH
 847: LD_INT 7
 849: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 850: LD_ADDR_EXP 43
 854: PUSH
 855: LD_INT 0
 857: ST_TO_ADDR
// def_builduptime := 1 ;
 858: LD_ADDR_EXP 44
 862: PUSH
 863: LD_INT 1
 865: ST_TO_ADDR
// tech_level = 4 ;
 866: LD_ADDR_VAR 0 3
 870: PUSH
 871: LD_INT 4
 873: ST_TO_ADDR
// def_win_rules = 0 ;
 874: LD_ADDR_EXP 15
 878: PUSH
 879: LD_INT 0
 881: ST_TO_ADDR
// end ; if def_tree_function = 7 then
 882: LD_EXP 1
 886: PUSH
 887: LD_INT 7
 889: EQUAL
 890: IFFALSE 908
// def_tree_function := Rand ( 1 , 5 ) ;
 892: LD_ADDR_EXP 1
 896: PUSH
 897: LD_INT 1
 899: PPUSH
 900: LD_INT 5
 902: PPUSH
 903: CALL_OW 12
 907: ST_TO_ADDR
// InitGameRules ;
 908: CALL 7202 0 0
// if def_game_rules = 0 then
 912: LD_EXP 30
 916: PUSH
 917: LD_INT 0
 919: EQUAL
 920: IFFALSE 947
// begin if isSGUI then
 922: LD_OWVAR 83
 926: IFFALSE 934
// setMpTechs ( ) else
 928: CALL 12708 0 0
 932: GO 947
// begin SetMpTechLevel ( tech_level + 1 ) ;
 934: LD_VAR 0 3
 938: PUSH
 939: LD_INT 1
 941: PLUS
 942: PPUSH
 943: CALL 12855 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 947: LD_ADDR_EXP 2
 951: PUSH
 952: LD_INT 0
 954: PUSH
 955: LD_INT 1
 957: PUSH
 958: LD_INT 1
 960: PUSH
 961: LD_INT 1
 963: PUSH
 964: EMPTY
 965: LIST
 966: LIST
 967: LIST
 968: LIST
 969: PUSH
 970: LD_EXP 31
 974: PUSH
 975: LD_INT 1
 977: PLUS
 978: ARRAY
 979: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 , 3 ] [ def_base_level + 1 ] ;
 980: LD_ADDR_EXP 3
 984: PUSH
 985: LD_INT 0
 987: PUSH
 988: LD_INT 0
 990: PUSH
 991: LD_INT 2
 993: PUSH
 994: LD_INT 3
 996: PUSH
 997: EMPTY
 998: LIST
 999: LIST
1000: LIST
1001: LIST
1002: PUSH
1003: LD_EXP 31
1007: PUSH
1008: LD_INT 1
1010: PLUS
1011: ARRAY
1012: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1013: LD_ADDR_EXP 5
1017: PUSH
1018: LD_INT 2
1020: PUSH
1021: LD_INT 3
1023: PUSH
1024: LD_INT 4
1026: PUSH
1027: LD_INT 5
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: PUSH
1036: LD_EXP 33
1040: PUSH
1041: LD_INT 1
1043: PLUS
1044: ARRAY
1045: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1046: LD_ADDR_EXP 7
1050: PUSH
1051: LD_INT 0
1053: PUSH
1054: LD_INT 0
1056: PUSH
1057: LD_INT 0
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: LIST
1064: PUSH
1065: LD_INT 30
1067: PUSH
1068: LD_INT 0
1070: PUSH
1071: LD_INT 0
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: LIST
1078: PUSH
1079: LD_INT 50
1081: PUSH
1082: LD_INT 20
1084: PUSH
1085: LD_INT 0
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: PUSH
1093: LD_INT 80
1095: PUSH
1096: LD_INT 40
1098: PUSH
1099: LD_INT 20
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: LIST
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_EXP 34
1117: PUSH
1118: LD_INT 1
1120: PLUS
1121: ARRAY
1122: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1123: LD_ADDR_EXP 6
1127: PUSH
1128: LD_INT 10
1130: PUSH
1131: EMPTY
1132: LIST
1133: PUSH
1134: LD_INT 7
1136: PUSH
1137: LD_INT 14
1139: PUSH
1140: EMPTY
1141: LIST
1142: LIST
1143: PUSH
1144: LD_INT 6
1146: PUSH
1147: LD_INT 12
1149: PUSH
1150: LD_INT 18
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: LIST
1157: PUSH
1158: LD_INT 5
1160: PUSH
1161: LD_INT 10
1163: PUSH
1164: LD_INT 15
1166: PUSH
1167: LD_INT 20
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: LIST
1180: LIST
1181: PUSH
1182: LD_EXP 34
1186: PUSH
1187: LD_INT 1
1189: PLUS
1190: ARRAY
1191: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1192: LD_ADDR_EXP 4
1196: PUSH
1197: LD_EXP 32
1201: PUSH
1202: LD_INT 4
1204: PLUS
1205: ST_TO_ADDR
// shipments_density := 20 + ( def_shipments_density ) * 28 ;
1206: LD_ADDR_EXP 8
1210: PUSH
1211: LD_INT 20
1213: PUSH
1214: LD_EXP 35
1218: PUSH
1219: LD_INT 28
1221: MUL
1222: PLUS
1223: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
1224: LD_ADDR_EXP 13
1228: PUSH
1229: LD_INT 0
1231: PUSH
1232: LD_INT 3
1234: PUSH
1235: LD_INT 6
1237: PUSH
1238: LD_INT 9
1240: PUSH
1241: EMPTY
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: PUSH
1247: LD_EXP 42
1251: PUSH
1252: LD_INT 1
1254: PLUS
1255: ARRAY
1256: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1257: LD_ADDR_EXP 10
1261: PUSH
1262: LD_INT 0
1264: PUSH
1265: LD_INT 8400
1267: PUSH
1268: LD_INT 1750
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: LIST
1275: PUSH
1276: LD_EXP 41
1280: PUSH
1281: LD_INT 1
1283: PLUS
1284: ARRAY
1285: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1286: LD_ADDR_EXP 11
1290: PUSH
1291: LD_INT 0
1293: PUSH
1294: LD_INT 21000
1296: PUSH
1297: LD_INT 4200
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: LIST
1304: PUSH
1305: LD_EXP 41
1309: PUSH
1310: LD_INT 1
1312: PLUS
1313: ARRAY
1314: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1315: LD_ADDR_EXP 9
1319: PUSH
1320: LD_INT 1
1322: NEG
1323: PUSH
1324: LD_INT 350
1326: PUSH
1327: LD_INT 700
1329: PUSH
1330: LD_INT 1400
1332: PUSH
1333: LD_INT 0
1335: PUSH
1336: EMPTY
1337: LIST
1338: LIST
1339: LIST
1340: LIST
1341: LIST
1342: PUSH
1343: LD_EXP 39
1347: PUSH
1348: LD_INT 1
1350: PLUS
1351: ARRAY
1352: ST_TO_ADDR
// battle_flags_id := [ ] ;
1353: LD_ADDR_EXP 27
1357: PUSH
1358: EMPTY
1359: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1360: LD_ADDR_EXP 12
1364: PUSH
1365: LD_INT 0
1367: PUSH
1368: LD_INT 1
1370: PUSH
1371: LD_INT 63000
1373: PUSH
1374: LD_INT 126000
1376: PUSH
1377: LD_INT 189000
1379: PUSH
1380: LD_INT 252000
1382: PUSH
1383: EMPTY
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: PUSH
1391: LD_EXP 43
1395: PUSH
1396: LD_INT 1
1398: PLUS
1399: ARRAY
1400: ST_TO_ADDR
// tree_function := [ [ 0 , 0 , 0 , 0 , 0 ] , [ 2 , 0 , 0 , 0 , 0 ] , [ 0 , 4 , 0 , 0 , 0 ] , [ 0 , 0 , 2 , 0 , 0 ] , [ 0 , 0 , 0 , 3 , 0 ] , [ 1 , 2 , 1 , 2 , 2 ] , [ 0 , 0 , 0 , 0 , 3 ] ] [ def_tree_function + 1 ] ;
1401: LD_ADDR_EXP 14
1405: PUSH
1406: LD_INT 0
1408: PUSH
1409: LD_INT 0
1411: PUSH
1412: LD_INT 0
1414: PUSH
1415: LD_INT 0
1417: PUSH
1418: LD_INT 0
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: PUSH
1428: LD_INT 2
1430: PUSH
1431: LD_INT 0
1433: PUSH
1434: LD_INT 0
1436: PUSH
1437: LD_INT 0
1439: PUSH
1440: LD_INT 0
1442: PUSH
1443: EMPTY
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: LIST
1449: PUSH
1450: LD_INT 0
1452: PUSH
1453: LD_INT 4
1455: PUSH
1456: LD_INT 0
1458: PUSH
1459: LD_INT 0
1461: PUSH
1462: LD_INT 0
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: PUSH
1472: LD_INT 0
1474: PUSH
1475: LD_INT 0
1477: PUSH
1478: LD_INT 2
1480: PUSH
1481: LD_INT 0
1483: PUSH
1484: LD_INT 0
1486: PUSH
1487: EMPTY
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 0
1496: PUSH
1497: LD_INT 0
1499: PUSH
1500: LD_INT 0
1502: PUSH
1503: LD_INT 3
1505: PUSH
1506: LD_INT 0
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: PUSH
1516: LD_INT 1
1518: PUSH
1519: LD_INT 2
1521: PUSH
1522: LD_INT 1
1524: PUSH
1525: LD_INT 2
1527: PUSH
1528: LD_INT 2
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: PUSH
1538: LD_INT 0
1540: PUSH
1541: LD_INT 0
1543: PUSH
1544: LD_INT 0
1546: PUSH
1547: LD_INT 0
1549: PUSH
1550: LD_INT 3
1552: PUSH
1553: EMPTY
1554: LIST
1555: LIST
1556: LIST
1557: LIST
1558: LIST
1559: PUSH
1560: EMPTY
1561: LIST
1562: LIST
1563: LIST
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: PUSH
1569: LD_EXP 1
1573: PUSH
1574: LD_INT 1
1576: PLUS
1577: ARRAY
1578: ST_TO_ADDR
// buildUpTime_Delay := [ 0 , 5 5$00 , 10 10$00 , 15 15$00 ] [ def_builduptime + 1 ] ;
1579: LD_ADDR_EXP 16
1583: PUSH
1584: LD_INT 0
1586: PUSH
1587: LD_INT 10500
1589: PUSH
1590: LD_INT 21000
1592: PUSH
1593: LD_INT 31500
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: PUSH
1602: LD_EXP 44
1606: PUSH
1607: LD_INT 1
1609: PLUS
1610: ARRAY
1611: ST_TO_ADDR
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] ;
1612: LD_ADDR_EXP 48
1616: PUSH
1617: LD_INT 10
1619: PUSH
1620: LD_INT 13
1622: PUSH
1623: LD_INT 11
1625: PUSH
1626: LD_INT 12
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: ST_TO_ADDR
// end ;
1635: LD_VAR 0 1
1639: RET
// function prepare_map_coordinates ; var side , dep , br1 , br2 , br3 , un , i ; begin
1640: LD_INT 0
1642: PPUSH
1643: PPUSH
1644: PPUSH
1645: PPUSH
1646: PPUSH
1647: PPUSH
1648: PPUSH
1649: PPUSH
// depot_def = [ ] ;
1650: LD_ADDR_EXP 24
1654: PUSH
1655: EMPTY
1656: ST_TO_ADDR
// breastworks_def = [ ] ;
1657: LD_ADDR_EXP 25
1661: PUSH
1662: EMPTY
1663: ST_TO_ADDR
// for side := 1 to 4 do
1664: LD_ADDR_VAR 0 2
1668: PUSH
1669: DOUBLE
1670: LD_INT 1
1672: DEC
1673: ST_TO_ADDR
1674: LD_INT 4
1676: PUSH
1677: FOR_TO
1678: IFFALSE 2033
// begin dep := side * 4 - 3 ;
1680: LD_ADDR_VAR 0 3
1684: PUSH
1685: LD_VAR 0 2
1689: PUSH
1690: LD_INT 4
1692: MUL
1693: PUSH
1694: LD_INT 3
1696: MINUS
1697: ST_TO_ADDR
// br1 := side * 4 - 2 ;
1698: LD_ADDR_VAR 0 4
1702: PUSH
1703: LD_VAR 0 2
1707: PUSH
1708: LD_INT 4
1710: MUL
1711: PUSH
1712: LD_INT 2
1714: MINUS
1715: ST_TO_ADDR
// br2 := side * 4 - 1 ;
1716: LD_ADDR_VAR 0 5
1720: PUSH
1721: LD_VAR 0 2
1725: PUSH
1726: LD_INT 4
1728: MUL
1729: PUSH
1730: LD_INT 1
1732: MINUS
1733: ST_TO_ADDR
// br3 := side * 4 ;
1734: LD_ADDR_VAR 0 6
1738: PUSH
1739: LD_VAR 0 2
1743: PUSH
1744: LD_INT 4
1746: MUL
1747: ST_TO_ADDR
// depot_def := depot_def ^ [ [ GetX ( dep ) , GetY ( dep ) , GetDir ( dep ) ] ] ;
1748: LD_ADDR_EXP 24
1752: PUSH
1753: LD_EXP 24
1757: PUSH
1758: LD_VAR 0 3
1762: PPUSH
1763: CALL_OW 250
1767: PUSH
1768: LD_VAR 0 3
1772: PPUSH
1773: CALL_OW 251
1777: PUSH
1778: LD_VAR 0 3
1782: PPUSH
1783: CALL_OW 254
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: LIST
1792: PUSH
1793: EMPTY
1794: LIST
1795: ADD
1796: ST_TO_ADDR
// start_def := start_def ^ [ [ ShiftX ( GetX ( Dep ) , GetDir ( Dep ) , 6 ) , ShiftY ( GetY ( Dep ) , GetDir ( Dep ) , 6 ) ] ] ;
1797: LD_ADDR_EXP 26
1801: PUSH
1802: LD_EXP 26
1806: PUSH
1807: LD_VAR 0 3
1811: PPUSH
1812: CALL_OW 250
1816: PPUSH
1817: LD_VAR 0 3
1821: PPUSH
1822: CALL_OW 254
1826: PPUSH
1827: LD_INT 6
1829: PPUSH
1830: CALL_OW 272
1834: PUSH
1835: LD_VAR 0 3
1839: PPUSH
1840: CALL_OW 251
1844: PPUSH
1845: LD_VAR 0 3
1849: PPUSH
1850: CALL_OW 254
1854: PPUSH
1855: LD_INT 6
1857: PPUSH
1858: CALL_OW 273
1862: PUSH
1863: EMPTY
1864: LIST
1865: LIST
1866: PUSH
1867: EMPTY
1868: LIST
1869: ADD
1870: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ GetX ( br1 ) , GetY ( br1 ) , GetDir ( br1 ) ] , [ GetX ( br2 ) , GetY ( br2 ) , GetDir ( br2 ) ] , [ GetX ( br3 ) , GetY ( br3 ) , GetDir ( br3 ) ] ] ] ;
1871: LD_ADDR_EXP 25
1875: PUSH
1876: LD_EXP 25
1880: PUSH
1881: LD_VAR 0 4
1885: PPUSH
1886: CALL_OW 250
1890: PUSH
1891: LD_VAR 0 4
1895: PPUSH
1896: CALL_OW 251
1900: PUSH
1901: LD_VAR 0 4
1905: PPUSH
1906: CALL_OW 254
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: LIST
1915: PUSH
1916: LD_VAR 0 5
1920: PPUSH
1921: CALL_OW 250
1925: PUSH
1926: LD_VAR 0 5
1930: PPUSH
1931: CALL_OW 251
1935: PUSH
1936: LD_VAR 0 5
1940: PPUSH
1941: CALL_OW 254
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: PUSH
1951: LD_VAR 0 6
1955: PPUSH
1956: CALL_OW 250
1960: PUSH
1961: LD_VAR 0 6
1965: PPUSH
1966: CALL_OW 251
1970: PUSH
1971: LD_VAR 0 6
1975: PPUSH
1976: CALL_OW 254
1980: PUSH
1981: EMPTY
1982: LIST
1983: LIST
1984: LIST
1985: PUSH
1986: EMPTY
1987: LIST
1988: LIST
1989: LIST
1990: PUSH
1991: EMPTY
1992: LIST
1993: ADD
1994: ST_TO_ADDR
// DestroyUnit ( dep ) ;
1995: LD_VAR 0 3
1999: PPUSH
2000: CALL_OW 65
// DestroyUnit ( br1 ) ;
2004: LD_VAR 0 4
2008: PPUSH
2009: CALL_OW 65
// DestroyUnit ( br2 ) ;
2013: LD_VAR 0 5
2017: PPUSH
2018: CALL_OW 65
// DestroyUnit ( br3 ) ;
2022: LD_VAR 0 6
2026: PPUSH
2027: CALL_OW 65
// end ;
2031: GO 1677
2033: POP
2034: POP
// if not def_extra_oil_deposits then
2035: LD_EXP 36
2039: NOT
2040: IFFALSE 2122
// for i in [ [ 52 , 44 ] , [ 84 , 37 ] , [ 74 , 81 ] , [ 106 , 77 ] ] do
2042: LD_ADDR_VAR 0 8
2046: PUSH
2047: LD_INT 52
2049: PUSH
2050: LD_INT 44
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: PUSH
2057: LD_INT 84
2059: PUSH
2060: LD_INT 37
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: PUSH
2067: LD_INT 74
2069: PUSH
2070: LD_INT 81
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: PUSH
2077: LD_INT 106
2079: PUSH
2080: LD_INT 77
2082: PUSH
2083: EMPTY
2084: LIST
2085: LIST
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: PUSH
2093: FOR_IN
2094: IFFALSE 2120
// begin RemoveDepositXY ( i [ 1 ] , i [ 2 ] ) ;
2096: LD_VAR 0 8
2100: PUSH
2101: LD_INT 1
2103: ARRAY
2104: PPUSH
2105: LD_VAR 0 8
2109: PUSH
2110: LD_INT 2
2112: ARRAY
2113: PPUSH
2114: CALL_OW 63
// end ;
2118: GO 2093
2120: POP
2121: POP
// end ;
2122: LD_VAR 0 1
2126: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2127: LD_INT 0
2129: PPUSH
2130: PPUSH
2131: PPUSH
// if not Team_Game then
2132: LD_EXP 22
2136: NOT
2137: IFFALSE 2235
// begin for i = 1 to 8 do
2139: LD_ADDR_VAR 0 2
2143: PUSH
2144: DOUBLE
2145: LD_INT 1
2147: DEC
2148: ST_TO_ADDR
2149: LD_INT 8
2151: PUSH
2152: FOR_TO
2153: IFFALSE 2231
// for j = 1 to 8 do
2155: LD_ADDR_VAR 0 3
2159: PUSH
2160: DOUBLE
2161: LD_INT 1
2163: DEC
2164: ST_TO_ADDR
2165: LD_INT 8
2167: PUSH
2168: FOR_TO
2169: IFFALSE 2227
// if i <> j then
2171: LD_VAR 0 2
2175: PUSH
2176: LD_VAR 0 3
2180: NONEQUAL
2181: IFFALSE 2205
// SetAttitude ( i , j , att_neutral , true ) else
2183: LD_VAR 0 2
2187: PPUSH
2188: LD_VAR 0 3
2192: PPUSH
2193: LD_INT 0
2195: PPUSH
2196: LD_INT 1
2198: PPUSH
2199: CALL_OW 80
2203: GO 2225
// SetAttitude ( i , j , att_friend , true ) ;
2205: LD_VAR 0 2
2209: PPUSH
2210: LD_VAR 0 3
2214: PPUSH
2215: LD_INT 1
2217: PPUSH
2218: LD_INT 1
2220: PPUSH
2221: CALL_OW 80
2225: GO 2168
2227: POP
2228: POP
2229: GO 2152
2231: POP
2232: POP
// end else
2233: GO 2410
// begin if def_shared_vision then
2235: LD_EXP 38
2239: IFFALSE 2304
// begin for i in Teams do
2241: LD_ADDR_VAR 0 2
2245: PUSH
2246: LD_EXP 18
2250: PUSH
2251: FOR_IN
2252: IFFALSE 2302
// for j = 2 to i do
2254: LD_ADDR_VAR 0 3
2258: PUSH
2259: DOUBLE
2260: LD_INT 2
2262: DEC
2263: ST_TO_ADDR
2264: LD_VAR 0 2
2268: PUSH
2269: FOR_TO
2270: IFFALSE 2298
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2272: LD_VAR 0 2
2276: PUSH
2277: LD_VAR 0 3
2281: ARRAY
2282: PPUSH
2283: LD_VAR 0 2
2287: PUSH
2288: LD_INT 1
2290: ARRAY
2291: PPUSH
2292: CALL_OW 343
2296: GO 2269
2298: POP
2299: POP
2300: GO 2251
2302: POP
2303: POP
// end ; for i = 1 to 8 do
2304: LD_ADDR_VAR 0 2
2308: PUSH
2309: DOUBLE
2310: LD_INT 1
2312: DEC
2313: ST_TO_ADDR
2314: LD_INT 8
2316: PUSH
2317: FOR_TO
2318: IFFALSE 2408
// for j = 1 to 8 do
2320: LD_ADDR_VAR 0 3
2324: PUSH
2325: DOUBLE
2326: LD_INT 1
2328: DEC
2329: ST_TO_ADDR
2330: LD_INT 8
2332: PUSH
2333: FOR_TO
2334: IFFALSE 2404
// if Side_Teams [ i ] = Side_Teams [ j ] then
2336: LD_EXP 17
2340: PUSH
2341: LD_VAR 0 2
2345: ARRAY
2346: PUSH
2347: LD_EXP 17
2351: PUSH
2352: LD_VAR 0 3
2356: ARRAY
2357: EQUAL
2358: IFFALSE 2382
// SetAttitude ( i , j , att_friend , true ) else
2360: LD_VAR 0 2
2364: PPUSH
2365: LD_VAR 0 3
2369: PPUSH
2370: LD_INT 1
2372: PPUSH
2373: LD_INT 1
2375: PPUSH
2376: CALL_OW 80
2380: GO 2402
// SetAttitude ( i , j , att_enemy , true ) ;
2382: LD_VAR 0 2
2386: PPUSH
2387: LD_VAR 0 3
2391: PPUSH
2392: LD_INT 2
2394: PPUSH
2395: LD_INT 1
2397: PPUSH
2398: CALL_OW 80
2402: GO 2333
2404: POP
2405: POP
2406: GO 2317
2408: POP
2409: POP
// end ; end ;
2410: LD_VAR 0 1
2414: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2415: LD_INT 0
2417: PPUSH
2418: PPUSH
2419: PPUSH
2420: PPUSH
// result := [ ] ;
2421: LD_ADDR_VAR 0 7
2425: PUSH
2426: EMPTY
2427: ST_TO_ADDR
// for i := 1 to count do
2428: LD_ADDR_VAR 0 8
2432: PUSH
2433: DOUBLE
2434: LD_INT 1
2436: DEC
2437: ST_TO_ADDR
2438: LD_VAR 0 1
2442: PUSH
2443: FOR_TO
2444: IFFALSE 2862
// begin uc_direction := Rand ( 0 , 5 ) ;
2446: LD_ADDR_OWVAR 24
2450: PUSH
2451: LD_INT 0
2453: PPUSH
2454: LD_INT 5
2456: PPUSH
2457: CALL_OW 12
2461: ST_TO_ADDR
// if commander then
2462: LD_LOC 1
2466: IFFALSE 2575
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2468: LD_ADDR_OWVAR 26
2472: PUSH
2473: LD_OWVAR 19
2477: PUSH
2478: LD_OWVAR 20
2482: ARRAY
2483: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2484: LD_INT 1
2486: PPUSH
2487: LD_INT 2
2489: PPUSH
2490: CALL_OW 12
2494: PPUSH
2495: LD_VAR 0 2
2499: PPUSH
2500: LD_EXP 5
2504: PUSH
2505: LD_INT 2
2507: PLUS
2508: PPUSH
2509: CALL_OW 380
// hc_importance := 105 ;
2513: LD_ADDR_OWVAR 32
2517: PUSH
2518: LD_INT 105
2520: ST_TO_ADDR
// commander := false ;
2521: LD_ADDR_LOC 1
2525: PUSH
2526: LD_INT 0
2528: ST_TO_ADDR
// if Multiplayer then
2529: LD_OWVAR 4
2533: IFFALSE 2573
// begin hc_gallery := MULTIAVATARS ;
2535: LD_ADDR_OWVAR 33
2539: PUSH
2540: LD_STRING MULTIAVATARS
2542: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2543: LD_ADDR_OWVAR 34
2547: PUSH
2548: LD_OWVAR 20
2552: PPUSH
2553: CALL_OW 525
2557: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2558: LD_ADDR_OWVAR 27
2562: PUSH
2563: LD_OWVAR 20
2567: PPUSH
2568: CALL_OW 526
2572: ST_TO_ADDR
// end ; end else
2573: GO 2638
// begin hc_name :=  ;
2575: LD_ADDR_OWVAR 26
2579: PUSH
2580: LD_STRING 
2582: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2583: LD_INT 1
2585: PPUSH
2586: LD_INT 2
2588: PPUSH
2589: CALL_OW 12
2593: PPUSH
2594: LD_VAR 0 2
2598: PPUSH
2599: LD_EXP 5
2603: PPUSH
2604: CALL_OW 380
// hc_importance := 0 ;
2608: LD_ADDR_OWVAR 32
2612: PUSH
2613: LD_INT 0
2615: ST_TO_ADDR
// if Multiplayer then
2616: LD_OWVAR 4
2620: IFFALSE 2638
// begin hc_gallery :=  ;
2622: LD_ADDR_OWVAR 33
2626: PUSH
2627: LD_STRING 
2629: ST_TO_ADDR
// hc_face_number := 0 ;
2630: LD_ADDR_OWVAR 34
2634: PUSH
2635: LD_INT 0
2637: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2638: LD_ADDR_VAR 0 10
2642: PUSH
2643: CALL_OW 44
2647: ST_TO_ADDR
// if global_defined then
2648: LD_LOC 3
2652: IFFALSE 2792
// begin if ( cl = class_soldier ) then
2654: LD_VAR 0 2
2658: PUSH
2659: LD_INT 1
2661: EQUAL
2662: IFFALSE 2682
// j := i + soldiers_created else
2664: LD_ADDR_VAR 0 9
2668: PUSH
2669: LD_VAR 0 8
2673: PUSH
2674: LD_LOC 4
2678: PLUS
2679: ST_TO_ADDR
2680: GO 2692
// j := i ;
2682: LD_ADDR_VAR 0 9
2686: PUSH
2687: LD_VAR 0 8
2691: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2692: LD_LOC 2
2696: PUSH
2697: LD_VAR 0 2
2701: ARRAY
2702: PUSH
2703: LD_VAR 0 9
2707: ARRAY
2708: PPUSH
2709: LD_VAR 0 10
2713: PPUSH
2714: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2718: LD_VAR 0 10
2722: PPUSH
2723: LD_INT 2
2725: PPUSH
2726: LD_LOC 2
2730: PUSH
2731: LD_VAR 0 2
2735: ARRAY
2736: PUSH
2737: LD_VAR 0 9
2741: ARRAY
2742: PPUSH
2743: LD_INT 2
2745: PPUSH
2746: CALL_OW 260
2750: PPUSH
2751: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2755: LD_VAR 0 10
2759: PPUSH
2760: LD_INT 1
2762: PPUSH
2763: LD_LOC 2
2767: PUSH
2768: LD_VAR 0 2
2772: ARRAY
2773: PUSH
2774: LD_VAR 0 9
2778: ARRAY
2779: PPUSH
2780: LD_INT 1
2782: PPUSH
2783: CALL_OW 260
2787: PPUSH
2788: CALL_OW 239
// end ; if building then
2792: LD_VAR 0 6
2796: IFFALSE 2814
// PlaceHumanInUnit ( un , building ) else
2798: LD_VAR 0 10
2802: PPUSH
2803: LD_VAR 0 6
2807: PPUSH
2808: CALL_OW 52
2812: GO 2841
// PlaceUnitXYR ( un , x , y , r , false ) ;
2814: LD_VAR 0 10
2818: PPUSH
2819: LD_VAR 0 3
2823: PPUSH
2824: LD_VAR 0 4
2828: PPUSH
2829: LD_VAR 0 5
2833: PPUSH
2834: LD_INT 0
2836: PPUSH
2837: CALL_OW 50
// result := result ^ [ un ] ;
2841: LD_ADDR_VAR 0 7
2845: PUSH
2846: LD_VAR 0 7
2850: PUSH
2851: LD_VAR 0 10
2855: PUSH
2856: EMPTY
2857: LIST
2858: ADD
2859: ST_TO_ADDR
// end ;
2860: GO 2443
2862: POP
2863: POP
// if not global_defined then
2864: LD_LOC 3
2868: NOT
2869: IFFALSE 2947
// if ( global_units >= cl ) then
2871: LD_LOC 2
2875: PUSH
2876: LD_VAR 0 2
2880: GREATEREQUAL
2881: IFFALSE 2922
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2883: LD_ADDR_LOC 2
2887: PUSH
2888: LD_LOC 2
2892: PPUSH
2893: LD_VAR 0 2
2897: PPUSH
2898: LD_LOC 2
2902: PUSH
2903: LD_VAR 0 2
2907: ARRAY
2908: PUSH
2909: LD_VAR 0 7
2913: ADD
2914: PPUSH
2915: CALL_OW 1
2919: ST_TO_ADDR
2920: GO 2947
// global_units := Replace ( global_units , cl , result ) ;
2922: LD_ADDR_LOC 2
2926: PUSH
2927: LD_LOC 2
2931: PPUSH
2932: LD_VAR 0 2
2936: PPUSH
2937: LD_VAR 0 7
2941: PPUSH
2942: CALL_OW 1
2946: ST_TO_ADDR
// if commander then
2947: LD_LOC 1
2951: IFFALSE 2998
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2953: LD_ADDR_EXP 28
2957: PUSH
2958: LD_EXP 28
2962: PPUSH
2963: LD_OWVAR 20
2967: PPUSH
2968: LD_EXP 28
2972: PUSH
2973: LD_OWVAR 20
2977: ARRAY
2978: PUSH
2979: LD_VAR 0 10
2983: ADD
2984: PPUSH
2985: CALL_OW 1
2989: ST_TO_ADDR
// commander := false ;
2990: LD_ADDR_LOC 1
2994: PUSH
2995: LD_INT 0
2997: ST_TO_ADDR
// end ; end ;
2998: LD_VAR 0 7
3002: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3003: LD_INT 0
3005: PPUSH
3006: PPUSH
3007: PPUSH
3008: PPUSH
3009: PPUSH
3010: PPUSH
3011: PPUSH
3012: PPUSH
3013: PPUSH
// pos := Side_Positions [ side ] ;
3014: LD_ADDR_VAR 0 3
3018: PUSH
3019: LD_EXP 20
3023: PUSH
3024: LD_VAR 0 1
3028: ARRAY
3029: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3030: LD_ADDR_OWVAR 21
3034: PUSH
3035: LD_EXP 21
3039: PUSH
3040: LD_VAR 0 1
3044: ARRAY
3045: ST_TO_ADDR
// uc_side := side ;
3046: LD_ADDR_OWVAR 20
3050: PUSH
3051: LD_VAR 0 1
3055: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3056: LD_ADDR_VAR 0 4
3060: PUSH
3061: LD_EXP 24
3065: PUSH
3066: LD_VAR 0 3
3070: ARRAY
3071: PUSH
3072: LD_INT 1
3074: ARRAY
3075: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3076: LD_ADDR_VAR 0 5
3080: PUSH
3081: LD_EXP 24
3085: PUSH
3086: LD_VAR 0 3
3090: ARRAY
3091: PUSH
3092: LD_INT 2
3094: ARRAY
3095: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3096: LD_ADDR_VAR 0 6
3100: PUSH
3101: LD_EXP 24
3105: PUSH
3106: LD_VAR 0 3
3110: ARRAY
3111: PUSH
3112: LD_INT 3
3114: ARRAY
3115: ST_TO_ADDR
// if is_depot then
3116: LD_EXP 2
3120: IFFALSE 3253
// begin bc_type = b_depot ;
3122: LD_ADDR_OWVAR 42
3126: PUSH
3127: LD_INT 0
3129: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3130: LD_ADDR_VAR 0 10
3134: PUSH
3135: LD_VAR 0 4
3139: PPUSH
3140: LD_VAR 0 5
3144: PPUSH
3145: LD_VAR 0 6
3149: PPUSH
3150: CALL_OW 47
3154: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3155: LD_VAR 0 10
3159: PPUSH
3160: LD_STRING @
3162: PUSH
3163: LD_VAR 0 1
3167: STR
3168: PPUSH
3169: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3173: LD_VAR 0 10
3177: PPUSH
3178: CALL_OW 274
3182: PPUSH
3183: LD_INT 1
3185: PPUSH
3186: LD_EXP 7
3190: PUSH
3191: LD_INT 1
3193: ARRAY
3194: PPUSH
3195: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3199: LD_VAR 0 10
3203: PPUSH
3204: CALL_OW 274
3208: PPUSH
3209: LD_INT 2
3211: PPUSH
3212: LD_EXP 7
3216: PUSH
3217: LD_INT 2
3219: ARRAY
3220: PPUSH
3221: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3225: LD_VAR 0 10
3229: PPUSH
3230: CALL_OW 274
3234: PPUSH
3235: LD_INT 3
3237: PPUSH
3238: LD_EXP 7
3242: PUSH
3243: LD_INT 3
3245: ARRAY
3246: PPUSH
3247: CALL_OW 277
// end else
3251: GO 3397
// begin for i := 1 to 3 do
3253: LD_ADDR_VAR 0 7
3257: PUSH
3258: DOUBLE
3259: LD_INT 1
3261: DEC
3262: ST_TO_ADDR
3263: LD_INT 3
3265: PUSH
3266: FOR_TO
3267: IFFALSE 3395
// begin r := starting_resources [ i ] ;
3269: LD_ADDR_VAR 0 8
3273: PUSH
3274: LD_EXP 7
3278: PUSH
3279: LD_VAR 0 7
3283: ARRAY
3284: ST_TO_ADDR
// while r >= 10 do
3285: LD_VAR 0 8
3289: PUSH
3290: LD_INT 10
3292: GREATEREQUAL
3293: IFFALSE 3393
// if r > 50 then
3295: LD_VAR 0 8
3299: PUSH
3300: LD_INT 50
3302: GREATER
3303: IFFALSE 3349
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3305: LD_VAR 0 7
3309: PPUSH
3310: LD_INT 5
3312: PPUSH
3313: LD_VAR 0 4
3317: PPUSH
3318: LD_VAR 0 5
3322: PPUSH
3323: LD_INT 4
3325: PPUSH
3326: LD_INT 0
3328: PPUSH
3329: CALL_OW 60
// r := r - 50 ;
3333: LD_ADDR_VAR 0 8
3337: PUSH
3338: LD_VAR 0 8
3342: PUSH
3343: LD_INT 50
3345: MINUS
3346: ST_TO_ADDR
// end else
3347: GO 3391
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3349: LD_VAR 0 7
3353: PPUSH
3354: LD_VAR 0 8
3358: PUSH
3359: LD_INT 10
3361: DIV
3362: PPUSH
3363: LD_VAR 0 4
3367: PPUSH
3368: LD_VAR 0 5
3372: PPUSH
3373: LD_INT 4
3375: PPUSH
3376: LD_INT 0
3378: PPUSH
3379: CALL_OW 60
// r := 0 ;
3383: LD_ADDR_VAR 0 8
3387: PUSH
3388: LD_INT 0
3390: ST_TO_ADDR
// end ;
3391: GO 3285
// end ;
3393: GO 3266
3395: POP
3396: POP
// end ; for r in starting_crates do
3397: LD_ADDR_VAR 0 8
3401: PUSH
3402: LD_EXP 6
3406: PUSH
3407: FOR_IN
3408: IFFALSE 3440
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3410: LD_INT 1
3412: PPUSH
3413: LD_INT 5
3415: PPUSH
3416: LD_VAR 0 4
3420: PPUSH
3421: LD_VAR 0 5
3425: PPUSH
3426: LD_VAR 0 8
3430: PPUSH
3431: LD_INT 0
3433: PPUSH
3434: CALL_OW 60
3438: GO 3407
3440: POP
3441: POP
// if def_morale_flags then
3442: LD_EXP 39
3446: IFFALSE 3585
// begin x := start_def [ pos ] [ 1 ] ;
3448: LD_ADDR_VAR 0 4
3452: PUSH
3453: LD_EXP 26
3457: PUSH
3458: LD_VAR 0 3
3462: ARRAY
3463: PUSH
3464: LD_INT 1
3466: ARRAY
3467: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3468: LD_ADDR_VAR 0 5
3472: PUSH
3473: LD_EXP 26
3477: PUSH
3478: LD_VAR 0 3
3482: ARRAY
3483: PUSH
3484: LD_INT 2
3486: ARRAY
3487: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3488: LD_VAR 0 4
3492: PPUSH
3493: LD_VAR 0 5
3497: PPUSH
3498: LD_INT 12
3500: PPUSH
3501: LD_INT 2
3503: PPUSH
3504: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3508: LD_ADDR_EXP 27
3512: PUSH
3513: LD_EXP 27
3517: PUSH
3518: LD_VAR 0 1
3522: PPUSH
3523: LD_VAR 0 4
3527: PPUSH
3528: LD_VAR 0 5
3532: PPUSH
3533: LD_INT 1
3535: PUSH
3536: LD_INT 100
3538: PUSH
3539: EMPTY
3540: LIST
3541: LIST
3542: PUSH
3543: LD_INT 2
3545: PUSH
3546: LD_INT 50
3548: PUSH
3549: EMPTY
3550: LIST
3551: LIST
3552: PUSH
3553: LD_INT 3
3555: PUSH
3556: LD_INT 20
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: PUSH
3563: LD_INT 20
3565: PUSH
3566: LD_INT 100
3568: PUSH
3569: EMPTY
3570: LIST
3571: LIST
3572: PUSH
3573: EMPTY
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: PPUSH
3579: CALL_OW 418
3583: ADD
3584: ST_TO_ADDR
// end ; commander := true ;
3585: LD_ADDR_LOC 1
3589: PUSH
3590: LD_INT 1
3592: ST_TO_ADDR
// soldiers_created := 0 ;
3593: LD_ADDR_LOC 4
3597: PUSH
3598: LD_INT 0
3600: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3601: LD_ADDR_VAR 0 7
3605: PUSH
3606: DOUBLE
3607: LD_INT 1
3609: DEC
3610: ST_TO_ADDR
3611: LD_EXP 3
3615: PUSH
3616: FOR_TO
3617: IFFALSE 3770
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3619: LD_ADDR_VAR 0 4
3623: PUSH
3624: LD_EXP 25
3628: PUSH
3629: LD_VAR 0 3
3633: ARRAY
3634: PUSH
3635: LD_VAR 0 7
3639: ARRAY
3640: PUSH
3641: LD_INT 1
3643: ARRAY
3644: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3645: LD_ADDR_VAR 0 5
3649: PUSH
3650: LD_EXP 25
3654: PUSH
3655: LD_VAR 0 3
3659: ARRAY
3660: PUSH
3661: LD_VAR 0 7
3665: ARRAY
3666: PUSH
3667: LD_INT 2
3669: ARRAY
3670: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3671: LD_ADDR_VAR 0 6
3675: PUSH
3676: LD_EXP 25
3680: PUSH
3681: LD_VAR 0 3
3685: ARRAY
3686: PUSH
3687: LD_VAR 0 7
3691: ARRAY
3692: PUSH
3693: LD_INT 3
3695: ARRAY
3696: ST_TO_ADDR
// bc_type := b_breastwork ;
3697: LD_ADDR_OWVAR 42
3701: PUSH
3702: LD_INT 31
3704: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3705: LD_ADDR_VAR 0 9
3709: PUSH
3710: LD_VAR 0 4
3714: PPUSH
3715: LD_VAR 0 5
3719: PPUSH
3720: LD_VAR 0 6
3724: PPUSH
3725: CALL_OW 47
3729: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3730: LD_INT 1
3732: PPUSH
3733: LD_INT 1
3735: PPUSH
3736: LD_INT 0
3738: PPUSH
3739: LD_INT 0
3741: PPUSH
3742: LD_INT 0
3744: PPUSH
3745: LD_VAR 0 9
3749: PPUSH
3750: CALL 2415 0 6
// soldiers_created := soldiers_created + 1 ;
3754: LD_ADDR_LOC 4
3758: PUSH
3759: LD_LOC 4
3763: PUSH
3764: LD_INT 1
3766: PLUS
3767: ST_TO_ADDR
// end ;
3768: GO 3616
3770: POP
3771: POP
// x := start_def [ pos ] [ 1 ] ;
3772: LD_ADDR_VAR 0 4
3776: PUSH
3777: LD_EXP 26
3781: PUSH
3782: LD_VAR 0 3
3786: ARRAY
3787: PUSH
3788: LD_INT 1
3790: ARRAY
3791: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3792: LD_ADDR_VAR 0 5
3796: PUSH
3797: LD_EXP 26
3801: PUSH
3802: LD_VAR 0 3
3806: ARRAY
3807: PUSH
3808: LD_INT 2
3810: ARRAY
3811: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3812: LD_LOC 8
3816: PUSH
3817: LD_EXP 3
3821: MINUS
3822: PPUSH
3823: LD_INT 1
3825: PPUSH
3826: LD_VAR 0 4
3830: PPUSH
3831: LD_VAR 0 5
3835: PPUSH
3836: LD_INT 5
3838: PPUSH
3839: LD_INT 0
3841: PPUSH
3842: CALL 2415 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3846: LD_LOC 5
3850: PPUSH
3851: LD_INT 2
3853: PPUSH
3854: LD_VAR 0 4
3858: PPUSH
3859: LD_VAR 0 5
3863: PPUSH
3864: LD_INT 5
3866: PPUSH
3867: LD_INT 0
3869: PPUSH
3870: CALL 2415 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3874: LD_LOC 7
3878: PPUSH
3879: LD_INT 3
3881: PPUSH
3882: LD_VAR 0 4
3886: PPUSH
3887: LD_VAR 0 5
3891: PPUSH
3892: LD_INT 5
3894: PPUSH
3895: LD_INT 0
3897: PPUSH
3898: CALL 2415 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3902: LD_LOC 6
3906: PPUSH
3907: LD_INT 4
3909: PPUSH
3910: LD_VAR 0 4
3914: PPUSH
3915: LD_VAR 0 5
3919: PPUSH
3920: LD_INT 5
3922: PPUSH
3923: LD_INT 0
3925: PPUSH
3926: CALL 2415 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3930: LD_EXP 40
3934: PUSH
3935: LD_INT 20
3937: PPUSH
3938: LD_VAR 0 1
3942: PPUSH
3943: CALL_OW 321
3947: PUSH
3948: LD_INT 1
3950: EQUAL
3951: AND
3952: IFFALSE 3969
// SetTech ( tech_SibDet , side , state_researched ) ;
3954: LD_INT 20
3956: PPUSH
3957: LD_VAR 0 1
3961: PPUSH
3962: LD_INT 2
3964: PPUSH
3965: CALL_OW 322
// if def_siberite_bomb = 1 then
3969: LD_EXP 43
3973: PUSH
3974: LD_INT 1
3976: EQUAL
3977: IFFALSE 4011
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3979: LD_INT 25
3981: PPUSH
3982: LD_VAR 0 1
3986: PPUSH
3987: LD_INT 1
3989: PPUSH
3990: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3994: LD_INT 73
3996: PPUSH
3997: LD_VAR 0 1
4001: PPUSH
4002: LD_INT 1
4004: PPUSH
4005: CALL_OW 322
// end else
4009: GO 4041
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4011: LD_INT 25
4013: PPUSH
4014: LD_VAR 0 1
4018: PPUSH
4019: LD_INT 0
4021: PPUSH
4022: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4026: LD_INT 73
4028: PPUSH
4029: LD_VAR 0 1
4033: PPUSH
4034: LD_INT 0
4036: PPUSH
4037: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4041: LD_INT 24
4043: PPUSH
4044: LD_VAR 0 1
4048: PPUSH
4049: LD_INT 0
4051: PPUSH
4052: CALL_OW 322
// global_defined := true ;
4056: LD_ADDR_LOC 3
4060: PUSH
4061: LD_INT 1
4063: ST_TO_ADDR
// end ;
4064: LD_VAR 0 2
4068: RET
// every 0 0$1 do
4069: GO 4071
4071: DISABLE
// if ( def_siberite_bomb > 1 ) then
4072: LD_EXP 43
4076: PUSH
4077: LD_INT 1
4079: GREATER
4080: IFFALSE 4095
// begin wait ( siberite_bomb_Delay ) ;
4082: LD_EXP 12
4086: PPUSH
4087: CALL_OW 67
// EnableSibFiss ;
4091: CALL 4096 0 0
// end ;
4095: END
// function EnableSibFiss ; var i ; begin
4096: LD_INT 0
4098: PPUSH
4099: PPUSH
// for i := 1 to 8 do
4100: LD_ADDR_VAR 0 2
4104: PUSH
4105: DOUBLE
4106: LD_INT 1
4108: DEC
4109: ST_TO_ADDR
4110: LD_INT 8
4112: PUSH
4113: FOR_TO
4114: IFFALSE 4160
// if Side_Positions [ i ] then
4116: LD_EXP 20
4120: PUSH
4121: LD_VAR 0 2
4125: ARRAY
4126: IFFALSE 4158
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4128: LD_INT 25
4130: PPUSH
4131: LD_VAR 0 2
4135: PPUSH
4136: LD_INT 1
4138: PPUSH
4139: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4143: LD_INT 73
4145: PPUSH
4146: LD_VAR 0 2
4150: PPUSH
4151: LD_INT 1
4153: PPUSH
4154: CALL_OW 322
// end ;
4158: GO 4113
4160: POP
4161: POP
// end ;
4162: LD_VAR 0 1
4166: RET
// function prepare_sides ; var i ; begin
4167: LD_INT 0
4169: PPUSH
4170: PPUSH
// global_units := [ ] ;
4171: LD_ADDR_LOC 2
4175: PUSH
4176: EMPTY
4177: ST_TO_ADDR
// global_defined := false ;
4178: LD_ADDR_LOC 3
4182: PUSH
4183: LD_INT 0
4185: ST_TO_ADDR
// CountClassMembers ;
4186: CALL 4236 0 0
// for i := 1 to 8 do
4190: LD_ADDR_VAR 0 2
4194: PUSH
4195: DOUBLE
4196: LD_INT 1
4198: DEC
4199: ST_TO_ADDR
4200: LD_INT 8
4202: PUSH
4203: FOR_TO
4204: IFFALSE 4229
// if Side_Positions [ i ] then
4206: LD_EXP 20
4210: PUSH
4211: LD_VAR 0 2
4215: ARRAY
4216: IFFALSE 4227
// prepare_side ( i ) ;
4218: LD_VAR 0 2
4222: PPUSH
4223: CALL 3003 0 1
4227: GO 4203
4229: POP
4230: POP
// end ;
4231: LD_VAR 0 1
4235: RET
// function CountClassMembers ; var Mode ; begin
4236: LD_INT 0
4238: PPUSH
4239: PPUSH
// if No_Mechs then
4240: LD_EXP 45
4244: IFFALSE 4256
// Mode := 2 else
4246: LD_ADDR_VAR 0 2
4250: PUSH
4251: LD_INT 2
4253: ST_TO_ADDR
4254: GO 4264
// Mode := 1 ;
4256: LD_ADDR_VAR 0 2
4260: PUSH
4261: LD_INT 1
4263: ST_TO_ADDR
// neng := number_of_people ;
4264: LD_ADDR_LOC 5
4268: PUSH
4269: LD_EXP 4
4273: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4274: LD_ADDR_LOC 8
4278: PUSH
4279: LD_LOC 5
4283: PUSH
4284: LD_INT 4
4286: PUSH
4287: LD_INT 3
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: PUSH
4294: LD_VAR 0 2
4298: ARRAY
4299: DIV
4300: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4301: LD_LOC 8
4305: PUSH
4306: LD_EXP 3
4310: LESS
4311: IFFALSE 4323
// nsol := number_of_breastworks ;
4313: LD_ADDR_LOC 8
4317: PUSH
4318: LD_EXP 3
4322: ST_TO_ADDR
// neng := neng - nsol ;
4323: LD_ADDR_LOC 5
4327: PUSH
4328: LD_LOC 5
4332: PUSH
4333: LD_LOC 8
4337: MINUS
4338: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4339: LD_ADDR_LOC 6
4343: PUSH
4344: LD_LOC 5
4348: PUSH
4349: LD_INT 3
4351: PUSH
4352: LD_INT 2
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: PUSH
4359: LD_VAR 0 2
4363: ARRAY
4364: DIV
4365: ST_TO_ADDR
// if ( nsci < 1 ) then
4366: LD_LOC 6
4370: PUSH
4371: LD_INT 1
4373: LESS
4374: IFFALSE 4384
// nsci := 1 ;
4376: LD_ADDR_LOC 6
4380: PUSH
4381: LD_INT 1
4383: ST_TO_ADDR
// neng := neng - nsci ;
4384: LD_ADDR_LOC 5
4388: PUSH
4389: LD_LOC 5
4393: PUSH
4394: LD_LOC 6
4398: MINUS
4399: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4400: LD_ADDR_LOC 7
4404: PUSH
4405: LD_LOC 5
4409: PUSH
4410: LD_INT 2
4412: DIV
4413: PUSH
4414: LD_INT 0
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: PUSH
4421: LD_VAR 0 2
4425: ARRAY
4426: ST_TO_ADDR
// neng := neng - nmech ;
4427: LD_ADDR_LOC 5
4431: PUSH
4432: LD_LOC 5
4436: PUSH
4437: LD_LOC 7
4441: MINUS
4442: ST_TO_ADDR
// if ( neng < 1 ) then
4443: LD_LOC 5
4447: PUSH
4448: LD_INT 1
4450: LESS
4451: IFFALSE 4461
// neng := 1 ;
4453: LD_ADDR_LOC 5
4457: PUSH
4458: LD_INT 1
4460: ST_TO_ADDR
// end ;
4461: LD_VAR 0 1
4465: RET
// starting begin disable ( 98 ) ;
4466: LD_INT 98
4468: DISABLE_MARKED
// disable ( 99 ) ;
4469: LD_INT 99
4471: DISABLE_MARKED
// disable ( 400 ) ;
4472: LD_INT 400
4474: DISABLE_MARKED
// disable ( 401 ) ;
4475: LD_INT 401
4477: DISABLE_MARKED
// disable ( 600 ) ;
4478: LD_INT 600
4480: DISABLE_MARKED
// mp_selectmsg := true ;
4481: LD_ADDR_OWVAR 13
4485: PUSH
4486: LD_INT 1
4488: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4489: CALL 68 0 0
// prepare_map_coordinates ;
4493: CALL 1640 0 0
// set_shared_visions_and_alliances ;
4497: CALL 2127 0 0
// ResetFog ;
4501: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4505: LD_OWVAR 2
4509: PPUSH
4510: CALL_OW 520
// prepare_sides ;
4514: CALL 4167 0 0
// Init_Win_Condition ;
4518: CALL 10719 0 0
// InitLimits ;
4522: CALL 9334 0 0
// ShowTimer ;
4526: CALL 10271 0 0
// init_shipments_and_respawning ;
4530: CALL 5212 0 0
// music_nat := Side_Nations [ your_side ] ;
4534: LD_ADDR_OWVAR 71
4538: PUSH
4539: LD_EXP 21
4543: PUSH
4544: LD_OWVAR 2
4548: ARRAY
4549: ST_TO_ADDR
// if IAmSpec then
4550: CALL_OW 531
4554: IFFALSE 4578
// begin fogoff ( true ) ;
4556: LD_INT 1
4558: PPUSH
4559: CALL_OW 344
// CenterNowOnXY ( 79 , 59 ) ;
4563: LD_INT 79
4565: PPUSH
4566: LD_INT 59
4568: PPUSH
4569: CALL_OW 86
// enable ( 400 ) ;
4573: LD_INT 400
4575: ENABLE_MARKED
// end else
4576: GO 4624
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4578: LD_EXP 26
4582: PUSH
4583: LD_EXP 20
4587: PUSH
4588: LD_OWVAR 2
4592: ARRAY
4593: ARRAY
4594: PUSH
4595: LD_INT 1
4597: ARRAY
4598: PPUSH
4599: LD_EXP 26
4603: PUSH
4604: LD_EXP 20
4608: PUSH
4609: LD_OWVAR 2
4613: ARRAY
4614: ARRAY
4615: PUSH
4616: LD_INT 2
4618: ARRAY
4619: PPUSH
4620: CALL_OW 86
// end ; if def_builduptime then
4624: LD_EXP 44
4628: IFFALSE 4634
// BeginBuildUp ;
4630: CALL 12082 0 0
// end ; end_of_file
4634: END
// var _apemenIncrement , _apemenMaximum , _apemenSkillLevel , _apemenThreshold , _isSpawning , _wildApemenAmount ; every 0 0$15 do var i ;
4635: GO 4637
4637: DISABLE
4638: LD_INT 0
4640: PPUSH
// begin _apemenIncrement := 0 ;
4641: LD_ADDR_LOC 9
4645: PUSH
4646: LD_INT 0
4648: ST_TO_ADDR
// _apemenSkillLevel := 0 ;
4649: LD_ADDR_LOC 11
4653: PUSH
4654: LD_INT 0
4656: ST_TO_ADDR
// _isSpawning := true ;
4657: LD_ADDR_LOC 13
4661: PUSH
4662: LD_INT 1
4664: ST_TO_ADDR
// _wildApemenAmount := 0 ;
4665: LD_ADDR_LOC 14
4669: PUSH
4670: LD_INT 0
4672: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
4673: LD_ADDR_VAR 0 1
4677: PUSH
4678: LD_EXP 20
4682: PUSH
4683: LD_INT 0
4685: PUSH
4686: EMPTY
4687: LIST
4688: DIFF
4689: PUSH
4690: FOR_IN
4691: IFFALSE 4709
// _apemenIncrement := _apemenIncrement + 1 ;
4693: LD_ADDR_LOC 9
4697: PUSH
4698: LD_LOC 9
4702: PUSH
4703: LD_INT 1
4705: PLUS
4706: ST_TO_ADDR
4707: GO 4690
4709: POP
4710: POP
// _apemenMaximum := _apemenIncrement * amount_of_apemen ;
4711: LD_ADDR_LOC 10
4715: PUSH
4716: LD_LOC 9
4720: PUSH
4721: LD_EXP 13
4725: MUL
4726: ST_TO_ADDR
// _apemenThreshold := _apemenMaximum / 2 ;
4727: LD_ADDR_LOC 12
4731: PUSH
4732: LD_LOC 10
4736: PUSH
4737: LD_INT 2
4739: DIVREAL
4740: ST_TO_ADDR
// prepare_apemen ;
4741: CALL 4833 0 0
// end ;
4745: PPOPN 1
4747: END
// on ApemanTamed ( tamedApeman , tamerUnit ) do begin CheckApemenAmount ;
4748: CALL 4755 0 0
// end ;
4752: PPOPN 2
4754: END
// export function CheckApemenAmount ; begin
4755: LD_INT 0
4757: PPUSH
// _wildApemenAmount := _wildApemenAmount - 1 ;
4758: LD_ADDR_LOC 14
4762: PUSH
4763: LD_LOC 14
4767: PUSH
4768: LD_INT 1
4770: MINUS
4771: ST_TO_ADDR
// if _isSpawning then
4772: LD_LOC 13
4776: IFFALSE 4780
// exit ;
4778: GO 4828
// if _wildApemenAmount <= ( _apemenThreshold ) then
4780: LD_LOC 14
4784: PUSH
4785: LD_LOC 12
4789: LESSEQUAL
4790: IFFALSE 4828
// begin if _apemenSkillLevel < 8 then
4792: LD_LOC 11
4796: PUSH
4797: LD_INT 8
4799: LESS
4800: IFFALSE 4816
// _apemenSkillLevel := _apemenSkillLevel + 1 ;
4802: LD_ADDR_LOC 11
4806: PUSH
4807: LD_LOC 11
4811: PUSH
4812: LD_INT 1
4814: PLUS
4815: ST_TO_ADDR
// _isSpawning := true ;
4816: LD_ADDR_LOC 13
4820: PUSH
4821: LD_INT 1
4823: ST_TO_ADDR
// prepare_apemen ;
4824: CALL 4833 0 0
// end ; end ;
4828: LD_VAR 0 1
4832: RET
// function prepare_apemen ; var i ; begin
4833: LD_INT 0
4835: PPUSH
4836: PPUSH
// if not amount_of_apemen then
4837: LD_EXP 13
4841: NOT
4842: IFFALSE 4846
// exit ;
4844: GO 5025
// repeat Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
4846: LD_INT 1050
4848: PPUSH
4849: LD_INT 3150
4851: PPUSH
4852: CALL_OW 12
4856: PPUSH
4857: CALL_OW 67
// apeman_init ;
4861: CALL 5030 0 0
// for i in ( Side_Positions diff [ 0 ] ) do
4865: LD_ADDR_VAR 0 2
4869: PUSH
4870: LD_EXP 20
4874: PUSH
4875: LD_INT 0
4877: PUSH
4878: EMPTY
4879: LIST
4880: DIFF
4881: PUSH
4882: FOR_IN
4883: IFFALSE 4987
// begin if i = 1 then
4885: LD_VAR 0 2
4889: PUSH
4890: LD_INT 1
4892: EQUAL
4893: IFFALSE 4910
// PlaceUnitArea ( CreateHuman , NorthApes , false ) ;
4895: CALL_OW 44
4899: PPUSH
4900: LD_INT 9
4902: PPUSH
4903: LD_INT 0
4905: PPUSH
4906: CALL_OW 49
// if i = 2 then
4910: LD_VAR 0 2
4914: PUSH
4915: LD_INT 2
4917: EQUAL
4918: IFFALSE 4935
// PlaceUnitArea ( CreateHuman , NorthApes , false ) ;
4920: CALL_OW 44
4924: PPUSH
4925: LD_INT 9
4927: PPUSH
4928: LD_INT 0
4930: PPUSH
4931: CALL_OW 49
// if i = 3 then
4935: LD_VAR 0 2
4939: PUSH
4940: LD_INT 3
4942: EQUAL
4943: IFFALSE 4960
// PlaceUnitArea ( CreateHuman , southapes , false ) ;
4945: CALL_OW 44
4949: PPUSH
4950: LD_INT 8
4952: PPUSH
4953: LD_INT 0
4955: PPUSH
4956: CALL_OW 49
// if i = 4 then
4960: LD_VAR 0 2
4964: PUSH
4965: LD_INT 4
4967: EQUAL
4968: IFFALSE 4985
// PlaceUnitArea ( CreateHuman , southapes , false ) ;
4970: CALL_OW 44
4974: PPUSH
4975: LD_INT 8
4977: PPUSH
4978: LD_INT 0
4980: PPUSH
4981: CALL_OW 49
// end ;
4985: GO 4882
4987: POP
4988: POP
// _wildApemenAmount := _wildApemenAmount + _apemenIncrement ;
4989: LD_ADDR_LOC 14
4993: PUSH
4994: LD_LOC 14
4998: PUSH
4999: LD_LOC 9
5003: PLUS
5004: ST_TO_ADDR
// until _wildApemenAmount >= _apemenMaximum ;
5005: LD_LOC 14
5009: PUSH
5010: LD_LOC 10
5014: GREATEREQUAL
5015: IFFALSE 4846
// _isSpawning := false ;
5017: LD_ADDR_LOC 13
5021: PUSH
5022: LD_INT 0
5024: ST_TO_ADDR
// end ;
5025: LD_VAR 0 1
5029: RET
// function apeman_init ; begin
5030: LD_INT 0
5032: PPUSH
// uc_side := 0 ;
5033: LD_ADDR_OWVAR 20
5037: PUSH
5038: LD_INT 0
5040: ST_TO_ADDR
// uc_nation := nation_nature ;
5041: LD_ADDR_OWVAR 21
5045: PUSH
5046: LD_INT 0
5048: ST_TO_ADDR
// hc_class := class_apeman ;
5049: LD_ADDR_OWVAR 28
5053: PUSH
5054: LD_INT 12
5056: ST_TO_ADDR
// hc_basic_skills := [ 2 , 2 , 2 , 2 ] ;
5057: LD_ADDR_OWVAR 30
5061: PUSH
5062: LD_INT 2
5064: PUSH
5065: LD_INT 2
5067: PUSH
5068: LD_INT 2
5070: PUSH
5071: LD_INT 2
5073: PUSH
5074: EMPTY
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: ST_TO_ADDR
// hc_skills := [ Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel ] ;
5080: LD_ADDR_OWVAR 31
5084: PUSH
5085: LD_INT 0
5087: PPUSH
5088: LD_INT 2
5090: PPUSH
5091: CALL_OW 12
5095: PUSH
5096: LD_LOC 11
5100: PLUS
5101: PUSH
5102: LD_INT 0
5104: PPUSH
5105: LD_INT 2
5107: PPUSH
5108: CALL_OW 12
5112: PUSH
5113: LD_LOC 11
5117: PLUS
5118: PUSH
5119: LD_INT 0
5121: PPUSH
5122: LD_INT 2
5124: PPUSH
5125: CALL_OW 12
5129: PUSH
5130: LD_LOC 11
5134: PLUS
5135: PUSH
5136: LD_INT 0
5138: PPUSH
5139: LD_INT 2
5141: PPUSH
5142: CALL_OW 12
5146: PUSH
5147: LD_LOC 11
5151: PLUS
5152: PUSH
5153: EMPTY
5154: LIST
5155: LIST
5156: LIST
5157: LIST
5158: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
5159: LD_ADDR_OWVAR 29
5163: PUSH
5164: LD_INT 10
5166: PUSH
5167: LD_INT 12
5169: PUSH
5170: EMPTY
5171: LIST
5172: LIST
5173: ST_TO_ADDR
// hc_sex := sex_male ;
5174: LD_ADDR_OWVAR 27
5178: PUSH
5179: LD_INT 1
5181: ST_TO_ADDR
// hc_importance := 0 ;
5182: LD_ADDR_OWVAR 32
5186: PUSH
5187: LD_INT 0
5189: ST_TO_ADDR
// hc_agressivity := Rand ( - 20 , 20 ) ;
5190: LD_ADDR_OWVAR 35
5194: PUSH
5195: LD_INT 20
5197: NEG
5198: PPUSH
5199: LD_INT 20
5201: PPUSH
5202: CALL_OW 12
5206: ST_TO_ADDR
// end ; end_of_file
5207: LD_VAR 0 1
5211: RET
// var shipment , respawn , inqueue ; export function init_shipments_and_respawning ; begin
5212: LD_INT 0
5214: PPUSH
// shipment := Rand ( 0 , 3 ) ;
5215: LD_ADDR_LOC 15
5219: PUSH
5220: LD_INT 0
5222: PPUSH
5223: LD_INT 3
5225: PPUSH
5226: CALL_OW 12
5230: ST_TO_ADDR
// respawn := Rand ( 1 , 8 ) ;
5231: LD_ADDR_LOC 16
5235: PUSH
5236: LD_INT 1
5238: PPUSH
5239: LD_INT 8
5241: PPUSH
5242: CALL_OW 12
5246: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5247: LD_ADDR_LOC 17
5251: PUSH
5252: LD_INT 0
5254: PUSH
5255: LD_INT 0
5257: PUSH
5258: LD_INT 0
5260: PUSH
5261: LD_INT 0
5263: PUSH
5264: LD_INT 0
5266: PUSH
5267: LD_INT 0
5269: PUSH
5270: LD_INT 0
5272: PUSH
5273: LD_INT 0
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: LIST
5283: LIST
5284: LIST
5285: ST_TO_ADDR
// end ;
5286: LD_VAR 0 1
5290: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
5291: GO 5293
5293: DISABLE
5294: LD_INT 0
5296: PPUSH
5297: PPUSH
5298: PPUSH
5299: PPUSH
// begin if respawning_time_max = 0 then
5300: LD_EXP 11
5304: PUSH
5305: LD_INT 0
5307: EQUAL
5308: IFFALSE 5312
// exit ;
5310: GO 5819
// if respawn = 8 then
5312: LD_LOC 16
5316: PUSH
5317: LD_INT 8
5319: EQUAL
5320: IFFALSE 5332
// respawn := 1 else
5322: LD_ADDR_LOC 16
5326: PUSH
5327: LD_INT 1
5329: ST_TO_ADDR
5330: GO 5346
// respawn := respawn + 1 ;
5332: LD_ADDR_LOC 16
5336: PUSH
5337: LD_LOC 16
5341: PUSH
5342: LD_INT 1
5344: PLUS
5345: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
5346: LD_EXP 20
5350: PUSH
5351: LD_LOC 16
5355: ARRAY
5356: PUSH
5357: LD_LOC 17
5361: PUSH
5362: LD_LOC 16
5366: ARRAY
5367: NOT
5368: AND
5369: IFFALSE 5818
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
5371: LD_ADDR_VAR 0 1
5375: PUSH
5376: LD_INT 21
5378: PUSH
5379: LD_INT 1
5381: PUSH
5382: EMPTY
5383: LIST
5384: LIST
5385: PUSH
5386: LD_INT 22
5388: PUSH
5389: LD_LOC 16
5393: PUSH
5394: EMPTY
5395: LIST
5396: LIST
5397: PUSH
5398: LD_INT 3
5400: PUSH
5401: LD_INT 23
5403: PUSH
5404: LD_INT 0
5406: PUSH
5407: EMPTY
5408: LIST
5409: LIST
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: PPUSH
5417: CALL_OW 69
5421: ST_TO_ADDR
// if n < number_of_people then
5422: LD_VAR 0 1
5426: PUSH
5427: LD_EXP 4
5431: LESS
5432: IFFALSE 5815
// begin aktresp := respawn ;
5434: LD_ADDR_VAR 0 3
5438: PUSH
5439: LD_LOC 16
5443: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
5444: LD_ADDR_LOC 17
5448: PUSH
5449: LD_LOC 17
5453: PPUSH
5454: LD_VAR 0 3
5458: PPUSH
5459: LD_INT 1
5461: PPUSH
5462: CALL_OW 1
5466: ST_TO_ADDR
// enable ;
5467: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
5468: LD_EXP 10
5472: PPUSH
5473: LD_EXP 11
5477: PPUSH
5478: CALL_OW 12
5482: PPUSH
5483: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
5487: LD_ADDR_LOC 17
5491: PUSH
5492: LD_LOC 17
5496: PPUSH
5497: LD_VAR 0 3
5501: PPUSH
5502: LD_INT 0
5504: PPUSH
5505: CALL_OW 1
5509: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
5510: LD_ADDR_VAR 0 2
5514: PUSH
5515: LD_INT 21
5517: PUSH
5518: LD_INT 3
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: PUSH
5525: LD_INT 2
5527: PUSH
5528: LD_INT 30
5530: PUSH
5531: LD_INT 0
5533: PUSH
5534: EMPTY
5535: LIST
5536: LIST
5537: PUSH
5538: LD_INT 30
5540: PUSH
5541: LD_INT 1
5543: PUSH
5544: EMPTY
5545: LIST
5546: LIST
5547: PUSH
5548: EMPTY
5549: LIST
5550: LIST
5551: LIST
5552: PUSH
5553: LD_INT 50
5555: PUSH
5556: EMPTY
5557: LIST
5558: PUSH
5559: LD_INT 22
5561: PUSH
5562: LD_VAR 0 3
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: LIST
5575: LIST
5576: PPUSH
5577: CALL_OW 69
5581: ST_TO_ADDR
// if building_list = 0 then
5582: LD_VAR 0 2
5586: PUSH
5587: LD_INT 0
5589: EQUAL
5590: IFFALSE 5635
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
5592: LD_ADDR_VAR 0 2
5596: PUSH
5597: LD_INT 21
5599: PUSH
5600: LD_INT 3
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: PUSH
5607: LD_INT 50
5609: PUSH
5610: EMPTY
5611: LIST
5612: PUSH
5613: LD_INT 22
5615: PUSH
5616: LD_VAR 0 3
5620: PUSH
5621: EMPTY
5622: LIST
5623: LIST
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: LIST
5629: PPUSH
5630: CALL_OW 69
5634: ST_TO_ADDR
// if building_list = 0 then
5635: LD_VAR 0 2
5639: PUSH
5640: LD_INT 0
5642: EQUAL
5643: IFFALSE 5647
// exit ;
5645: GO 5819
// hc_name :=  ;
5647: LD_ADDR_OWVAR 26
5651: PUSH
5652: LD_STRING 
5654: ST_TO_ADDR
// hc_importance := 0 ;
5655: LD_ADDR_OWVAR 32
5659: PUSH
5660: LD_INT 0
5662: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
5663: LD_INT 0
5665: PPUSH
5666: LD_INT 0
5668: PPUSH
5669: LD_EXP 5
5673: PUSH
5674: LD_INT 2
5676: DIV
5677: PPUSH
5678: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
5682: LD_ADDR_OWVAR 21
5686: PUSH
5687: LD_EXP 21
5691: PUSH
5692: LD_VAR 0 3
5696: ARRAY
5697: ST_TO_ADDR
// uc_side := aktresp ;
5698: LD_ADDR_OWVAR 20
5702: PUSH
5703: LD_VAR 0 3
5707: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
5708: LD_ADDR_VAR 0 4
5712: PUSH
5713: LD_VAR 0 2
5717: PUSH
5718: LD_INT 1
5720: PPUSH
5721: LD_VAR 0 2
5725: PUSH
5726: LD_INT 0
5728: PLUS
5729: PPUSH
5730: CALL_OW 12
5734: ARRAY
5735: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
5736: LD_VAR 0 4
5740: PPUSH
5741: CALL_OW 266
5745: PUSH
5746: LD_INT 0
5748: PUSH
5749: LD_INT 1
5751: PUSH
5752: EMPTY
5753: LIST
5754: LIST
5755: IN
5756: IFFALSE 5768
// n = 25 else
5758: LD_ADDR_VAR 0 1
5762: PUSH
5763: LD_INT 25
5765: ST_TO_ADDR
5766: GO 5776
// n = 10 ;
5768: LD_ADDR_VAR 0 1
5772: PUSH
5773: LD_INT 10
5775: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
5776: CALL_OW 44
5780: PPUSH
5781: LD_VAR 0 4
5785: PPUSH
5786: CALL_OW 250
5790: PPUSH
5791: LD_VAR 0 4
5795: PPUSH
5796: CALL_OW 251
5800: PPUSH
5801: LD_VAR 0 1
5805: PPUSH
5806: LD_INT 1
5808: PPUSH
5809: CALL_OW 50
// end else
5813: GO 5816
// enable ;
5815: ENABLE
// end else
5816: GO 5819
// enable ;
5818: ENABLE
// end ;
5819: PPOPN 4
5821: END
// every 0 0$5 + 0 0$1.1 do var d ;
5822: GO 5824
5824: DISABLE
5825: LD_INT 0
5827: PPUSH
// begin case tick of 1 .. 1 1$0 :
5828: LD_OWVAR 1
5832: PUSH
5833: LD_INT 1
5835: DOUBLE
5836: GREATEREQUAL
5837: IFFALSE 5845
5839: LD_INT 2100
5841: DOUBLE
5842: LESSEQUAL
5843: IFTRUE 5847
5845: GO 5858
5847: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5848: LD_ADDR_VAR 0 1
5852: PUSH
5853: LD_INT 150
5855: ST_TO_ADDR
5856: GO 6041
5858: LD_INT 2100
5860: PUSH
5861: LD_INT 1
5863: PLUS
5864: DOUBLE
5865: GREATEREQUAL
5866: IFFALSE 5874
5868: LD_INT 10500
5870: DOUBLE
5871: LESSEQUAL
5872: IFTRUE 5876
5874: GO 5887
5876: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5877: LD_ADDR_VAR 0 1
5881: PUSH
5882: LD_INT 100
5884: ST_TO_ADDR
5885: GO 6041
5887: LD_INT 10500
5889: PUSH
5890: LD_INT 1
5892: PLUS
5893: DOUBLE
5894: GREATEREQUAL
5895: IFFALSE 5903
5897: LD_INT 21000
5899: DOUBLE
5900: LESSEQUAL
5901: IFTRUE 5905
5903: GO 5916
5905: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5906: LD_ADDR_VAR 0 1
5910: PUSH
5911: LD_INT 90
5913: ST_TO_ADDR
5914: GO 6041
5916: LD_INT 21000
5918: PUSH
5919: LD_INT 1
5921: PLUS
5922: DOUBLE
5923: GREATEREQUAL
5924: IFFALSE 5932
5926: LD_INT 42000
5928: DOUBLE
5929: LESSEQUAL
5930: IFTRUE 5934
5932: GO 5945
5934: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5935: LD_ADDR_VAR 0 1
5939: PUSH
5940: LD_INT 70
5942: ST_TO_ADDR
5943: GO 6041
5945: LD_INT 42000
5947: PUSH
5948: LD_INT 1
5950: PLUS
5951: DOUBLE
5952: GREATEREQUAL
5953: IFFALSE 5961
5955: LD_INT 63000
5957: DOUBLE
5958: LESSEQUAL
5959: IFTRUE 5963
5961: GO 5974
5963: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5964: LD_ADDR_VAR 0 1
5968: PUSH
5969: LD_INT 60
5971: ST_TO_ADDR
5972: GO 6041
5974: LD_INT 63000
5976: PUSH
5977: LD_INT 1
5979: PLUS
5980: DOUBLE
5981: GREATEREQUAL
5982: IFFALSE 5990
5984: LD_INT 105000
5986: DOUBLE
5987: LESSEQUAL
5988: IFTRUE 5992
5990: GO 6003
5992: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5993: LD_ADDR_VAR 0 1
5997: PUSH
5998: LD_INT 35
6000: ST_TO_ADDR
6001: GO 6041
6003: LD_INT 105000
6005: PUSH
6006: LD_INT 1
6008: PLUS
6009: DOUBLE
6010: GREATEREQUAL
6011: IFFALSE 6019
6013: LD_INT 630000
6015: DOUBLE
6016: LESSEQUAL
6017: IFTRUE 6021
6019: GO 6032
6021: POP
// d := 20 ; else
6022: LD_ADDR_VAR 0 1
6026: PUSH
6027: LD_INT 20
6029: ST_TO_ADDR
6030: GO 6041
6032: POP
// d := 0 ; end ;
6033: LD_ADDR_VAR 0 1
6037: PUSH
6038: LD_INT 0
6040: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
6041: LD_INT 1
6043: PPUSH
6044: LD_INT 10000
6046: PPUSH
6047: CALL_OW 12
6051: PUSH
6052: LD_VAR 0 1
6056: PUSH
6057: LD_EXP 8
6061: MUL
6062: LESSEQUAL
6063: IFFALSE 6117
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
6065: LD_INT 1
6067: PPUSH
6068: LD_INT 140
6070: PPUSH
6071: CALL_OW 12
6075: PPUSH
6076: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
6080: LD_ADDR_LOC 15
6084: PUSH
6085: LD_LOC 15
6089: PUSH
6090: LD_INT 1
6092: PLUS
6093: PUSH
6094: LD_INT 4
6096: MOD
6097: ST_TO_ADDR
// CreateCratesArea ( 5 , q1 + shipment , true ) ;
6098: LD_INT 5
6100: PPUSH
6101: LD_INT 4
6103: PUSH
6104: LD_LOC 15
6108: PLUS
6109: PPUSH
6110: LD_INT 1
6112: PPUSH
6113: CALL_OW 55
// end ; enable ;
6117: ENABLE
// end ; end_of_file
6118: PPOPN 1
6120: END
// var activated ; var hadziove ; every 0 0$1 do
6121: GO 6123
6123: DISABLE
// begin wait ( Rand ( 3 3$0 , 10 10$0 ) ) ;
6124: LD_INT 6300
6126: PPUSH
6127: LD_INT 21000
6129: PPUSH
6130: CALL_OW 12
6134: PPUSH
6135: CALL_OW 67
// SetAreaMapShow ( Tree , 1 ) ;
6139: LD_INT 3
6141: PPUSH
6142: LD_INT 1
6144: PPUSH
6145: CALL_OW 424
// activated := true ;
6149: LD_ADDR_LOC 18
6153: PUSH
6154: LD_INT 1
6156: ST_TO_ADDR
// end ;
6157: END
// every 0 0$1 trigger activated do var i , un ;
6158: LD_LOC 18
6162: IFFALSE 6407
6164: GO 6166
6166: DISABLE
6167: LD_INT 0
6169: PPUSH
6170: PPUSH
// begin if not def_tree_function then
6171: LD_EXP 1
6175: NOT
6176: IFFALSE 6180
// exit ;
6178: GO 6407
// ExtraStrings := [ #MultiSmall-Tree & def_tree_function ] ;
6180: LD_ADDR_EXP 46
6184: PUSH
6185: LD_STRING #MultiSmall-Tree
6187: PUSH
6188: LD_EXP 1
6192: STR
6193: PUSH
6194: EMPTY
6195: LIST
6196: ST_TO_ADDR
// for un in FilterUnitsInArea ( Tree , [ f_type , unit_human ] ) diff hadziove do
6197: LD_ADDR_VAR 0 2
6201: PUSH
6202: LD_INT 3
6204: PPUSH
6205: LD_INT 21
6207: PUSH
6208: LD_INT 1
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: PPUSH
6215: CALL_OW 70
6219: PUSH
6220: LD_LOC 19
6224: DIFF
6225: PUSH
6226: FOR_IN
6227: IFFALSE 6388
// begin if GetClass ( un ) in [ class_soldier , class_engineer , class_mechanic , class_scientistic , class_sniper , class_bazooker , class_mortar ] then
6229: LD_VAR 0 2
6233: PPUSH
6234: CALL_OW 257
6238: PUSH
6239: LD_INT 1
6241: PUSH
6242: LD_INT 2
6244: PUSH
6245: LD_INT 3
6247: PUSH
6248: LD_INT 4
6250: PUSH
6251: LD_INT 5
6253: PUSH
6254: LD_INT 9
6256: PUSH
6257: LD_INT 8
6259: PUSH
6260: EMPTY
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: LIST
6267: LIST
6268: IN
6269: IFFALSE 6318
// for i := 1 to 4 do
6271: LD_ADDR_VAR 0 1
6275: PUSH
6276: DOUBLE
6277: LD_INT 1
6279: DEC
6280: ST_TO_ADDR
6281: LD_INT 4
6283: PUSH
6284: FOR_TO
6285: IFFALSE 6314
// GiveSkillBonus ( un , i , tree_function [ i ] ) else
6287: LD_VAR 0 2
6291: PPUSH
6292: LD_VAR 0 1
6296: PPUSH
6297: LD_EXP 14
6301: PUSH
6302: LD_VAR 0 1
6306: ARRAY
6307: PPUSH
6308: CALL_OW 238
6312: GO 6284
6314: POP
6315: POP
6316: GO 6386
// if un in [ class_apeman , class_apeman_engineer , class_apeman_kamikaze , class_apeman_soldier ] then
6318: LD_VAR 0 2
6322: PUSH
6323: LD_INT 12
6325: PUSH
6326: LD_INT 16
6328: PUSH
6329: LD_INT 17
6331: PUSH
6332: LD_INT 15
6334: PUSH
6335: EMPTY
6336: LIST
6337: LIST
6338: LIST
6339: LIST
6340: IN
6341: IFFALSE 6386
// for i := 1 to 4 do
6343: LD_ADDR_VAR 0 1
6347: PUSH
6348: DOUBLE
6349: LD_INT 1
6351: DEC
6352: ST_TO_ADDR
6353: LD_INT 4
6355: PUSH
6356: FOR_TO
6357: IFFALSE 6384
// GiveSkillBonus ( un , i , tree_function [ 5 ] ) ;
6359: LD_VAR 0 2
6363: PPUSH
6364: LD_VAR 0 1
6368: PPUSH
6369: LD_EXP 14
6373: PUSH
6374: LD_INT 5
6376: ARRAY
6377: PPUSH
6378: CALL_OW 238
6382: GO 6356
6384: POP
6385: POP
// end ;
6386: GO 6226
6388: POP
6389: POP
// hadziove := hadziove ^ un ;
6390: LD_ADDR_LOC 19
6394: PUSH
6395: LD_LOC 19
6399: PUSH
6400: LD_VAR 0 2
6404: ADD
6405: ST_TO_ADDR
// enable ;
6406: ENABLE
// end ; end_of_file
6407: PPOPN 2
6409: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6410: LD_VAR 0 1
6414: PPUSH
6415: CALL_OW 266
6419: PUSH
6420: LD_INT 0
6422: PUSH
6423: LD_INT 1
6425: PUSH
6426: EMPTY
6427: LIST
6428: LIST
6429: IN
6430: IFFALSE 6455
// SetBName ( b , @ & GetSide ( b ) ) ;
6432: LD_VAR 0 1
6436: PPUSH
6437: LD_STRING @
6439: PUSH
6440: LD_VAR 0 1
6444: PPUSH
6445: CALL_OW 255
6449: STR
6450: PPUSH
6451: CALL_OW 500
// if def_game_rules then
6455: LD_EXP 30
6459: IFFALSE 6496
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
6461: LD_VAR 0 1
6465: PPUSH
6466: LD_VAR 0 1
6470: PPUSH
6471: CALL_OW 266
6475: PPUSH
6476: LD_VAR 0 1
6480: PPUSH
6481: CALL_OW 255
6485: PPUSH
6486: LD_INT 0
6488: PPUSH
6489: LD_INT 1
6491: PPUSH
6492: CALL 9735 0 5
// end ;
6496: PPOPN 2
6498: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6499: LD_VAR 0 1
6503: PPUSH
6504: CALL_OW 266
6508: PUSH
6509: LD_INT 0
6511: PUSH
6512: LD_INT 1
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: IN
6519: IFFALSE 6544
// SetBName ( b , @ & GetSide ( b ) ) ;
6521: LD_VAR 0 1
6525: PPUSH
6526: LD_STRING @
6528: PUSH
6529: LD_VAR 0 1
6533: PPUSH
6534: CALL_OW 255
6538: STR
6539: PPUSH
6540: CALL_OW 500
// if def_game_rules then
6544: LD_EXP 30
6548: IFFALSE 6587
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
6550: LD_VAR 0 1
6554: PPUSH
6555: LD_VAR 0 1
6559: PPUSH
6560: CALL_OW 266
6564: PPUSH
6565: LD_VAR 0 1
6569: PPUSH
6570: CALL_OW 255
6574: PPUSH
6575: LD_VAR 0 2
6579: PPUSH
6580: LD_INT 1
6582: PPUSH
6583: CALL 9735 0 5
// end ;
6587: PPOPN 3
6589: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6590: LD_INT 0
6592: PPUSH
6593: PPUSH
6594: PPUSH
6595: PPUSH
// begin if GetSide ( j ) = 0 and GetClass ( j ) = class_apeman then
6596: LD_VAR 0 1
6600: PPUSH
6601: CALL_OW 255
6605: PUSH
6606: LD_INT 0
6608: EQUAL
6609: PUSH
6610: LD_VAR 0 1
6614: PPUSH
6615: CALL_OW 257
6619: PUSH
6620: LD_INT 12
6622: EQUAL
6623: AND
6624: IFFALSE 6630
// CheckApemenAmount ;
6626: CALL 4755 0 0
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6630: LD_VAR 0 1
6634: PPUSH
6635: CALL_OW 266
6639: PUSH
6640: LD_INT 0
6642: PUSH
6643: LD_INT 1
6645: PUSH
6646: EMPTY
6647: LIST
6648: LIST
6649: IN
6650: IFFALSE 6732
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6652: LD_ADDR_VAR 0 4
6656: PUSH
6657: LD_EXP 20
6661: PUSH
6662: LD_VAR 0 1
6666: PPUSH
6667: CALL_OW 255
6671: ARRAY
6672: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6673: LD_ADDR_VAR 0 2
6677: PUSH
6678: LD_EXP 26
6682: PUSH
6683: LD_VAR 0 4
6687: ARRAY
6688: PUSH
6689: LD_INT 1
6691: ARRAY
6692: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6693: LD_ADDR_VAR 0 3
6697: PUSH
6698: LD_EXP 26
6702: PUSH
6703: LD_VAR 0 4
6707: ARRAY
6708: PUSH
6709: LD_INT 2
6711: ARRAY
6712: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
6713: LD_VAR 0 2
6717: PPUSH
6718: LD_VAR 0 3
6722: PPUSH
6723: CALL_OW 420
6727: PPUSH
6728: CALL_OW 419
// end ; if def_game_rules then
6732: LD_EXP 30
6736: IFFALSE 6835
// if ( GetType ( j ) = 3 ) then
6738: LD_VAR 0 1
6742: PPUSH
6743: CALL_OW 247
6747: PUSH
6748: LD_INT 3
6750: EQUAL
6751: IFFALSE 6791
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
6753: LD_VAR 0 1
6757: PPUSH
6758: LD_VAR 0 1
6762: PPUSH
6763: CALL_OW 266
6767: PPUSH
6768: LD_VAR 0 1
6772: PPUSH
6773: CALL_OW 255
6777: PPUSH
6778: LD_INT 0
6780: PPUSH
6781: LD_INT 1
6783: NEG
6784: PPUSH
6785: CALL 9735 0 5
6789: GO 6835
// if ( GetChassis ( j ) = 25 ) then
6791: LD_VAR 0 1
6795: PPUSH
6796: CALL_OW 265
6800: PUSH
6801: LD_INT 25
6803: EQUAL
6804: IFFALSE 6835
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
6806: LD_VAR 0 1
6810: PPUSH
6811: LD_INT 37
6813: PPUSH
6814: LD_VAR 0 1
6818: PPUSH
6819: CALL_OW 255
6823: PPUSH
6824: LD_INT 0
6826: PPUSH
6827: LD_INT 1
6829: NEG
6830: PPUSH
6831: CALL 9735 0 5
// end ;
6835: PPOPN 5
6837: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
6838: LD_EXP 30
6842: PUSH
6843: LD_VAR 0 1
6847: PPUSH
6848: CALL_OW 265
6852: PUSH
6853: LD_INT 25
6855: EQUAL
6856: AND
6857: IFFALSE 6889
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
6859: LD_VAR 0 1
6863: PPUSH
6864: LD_INT 37
6866: PPUSH
6867: LD_VAR 0 1
6871: PPUSH
6872: CALL_OW 255
6876: PPUSH
6877: LD_VAR 0 3
6881: PPUSH
6882: LD_INT 1
6884: PPUSH
6885: CALL 9735 0 5
// end ;
6889: PPOPN 4
6891: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
6892: LD_VAR 0 1
6896: PPUSH
6897: LD_VAR 0 2
6901: PPUSH
6902: LD_VAR 0 3
6906: PPUSH
6907: LD_OWVAR 2
6911: PPUSH
6912: CALL 10480 0 4
6916: PPOPN 3
6918: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
6919: LD_INT 0
6921: PPUSH
6922: PPUSH
// for un in battle_flags_id do
6923: LD_ADDR_VAR 0 2
6927: PUSH
6928: LD_EXP 27
6932: PUSH
6933: FOR_IN
6934: IFFALSE 7009
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6936: LD_VAR 0 2
6940: PPUSH
6941: LD_INT 1
6943: PUSH
6944: LD_LOC 20
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PUSH
6953: LD_INT 2
6955: PUSH
6956: LD_LOC 20
6960: PUSH
6961: LD_INT 2
6963: DIV
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PUSH
6969: LD_INT 3
6971: PUSH
6972: LD_LOC 20
6976: PUSH
6977: LD_INT 5
6979: DIV
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: PUSH
6985: LD_INT 20
6987: PUSH
6988: LD_LOC 20
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: PPUSH
7003: CALL_OW 423
7007: GO 6933
7009: POP
7010: POP
// end ;
7011: LD_VAR 0 1
7015: RET
// every 0 0$0.1 do var un ;
7016: GO 7018
7018: DISABLE
7019: LD_INT 0
7021: PPUSH
// begin if not def_morale_flags then
7022: LD_EXP 39
7026: NOT
7027: IFFALSE 7031
// exit ;
7029: GO 7108
// if not morale_decreasing_time then
7031: LD_EXP 9
7035: NOT
7036: IFFALSE 7040
// exit ;
7038: GO 7108
// strength = 100 ;
7040: LD_ADDR_LOC 20
7044: PUSH
7045: LD_INT 100
7047: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7048: LD_EXP 9
7052: PPUSH
7053: CALL_OW 67
// strength := strength - 1 ;
7057: LD_ADDR_LOC 20
7061: PUSH
7062: LD_LOC 20
7066: PUSH
7067: LD_INT 1
7069: MINUS
7070: ST_TO_ADDR
// Update_Flags ;
7071: CALL 6919 0 0
// until not strength ;
7075: LD_LOC 20
7079: NOT
7080: IFFALSE 7048
// for un in battle_flags_id do
7082: LD_ADDR_VAR 0 1
7086: PUSH
7087: LD_EXP 27
7091: PUSH
7092: FOR_IN
7093: IFFALSE 7106
// KillBattleFlag ( un ) ;
7095: LD_VAR 0 1
7099: PPUSH
7100: CALL_OW 419
7104: GO 7092
7106: POP
7107: POP
// end ; end_of_file
7108: PPOPN 1
7110: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
7111: LD_INT 0
7113: PPUSH
7114: PPUSH
// if ( not IAmSpec ) then
7115: CALL_OW 531
7119: NOT
7120: IFFALSE 7136
// Result := Limits_Info ^  ;
7122: LD_ADDR_VAR 0 1
7126: PUSH
7127: LD_LOC 32
7131: PUSH
7132: LD_STRING 
7134: ADD
7135: ST_TO_ADDR
// for i := 1 to 8 do
7136: LD_ADDR_VAR 0 2
7140: PUSH
7141: DOUBLE
7142: LD_INT 1
7144: DEC
7145: ST_TO_ADDR
7146: LD_INT 8
7148: PUSH
7149: FOR_TO
7150: IFFALSE 7195
// if Cheaters [ i ] then
7152: LD_LOC 33
7156: PUSH
7157: LD_VAR 0 2
7161: ARRAY
7162: IFFALSE 7193
// Result := Result ^ [ #Cheater , i , i ] ;
7164: LD_ADDR_VAR 0 1
7168: PUSH
7169: LD_VAR 0 1
7173: PUSH
7174: LD_STRING #Cheater
7176: PUSH
7177: LD_VAR 0 2
7181: PUSH
7182: LD_VAR 0 2
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: LIST
7191: ADD
7192: ST_TO_ADDR
7193: GO 7149
7195: POP
7196: POP
// end ;
7197: LD_VAR 0 1
7201: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
7202: LD_INT 0
7204: PPUSH
7205: PPUSH
7206: PPUSH
7207: PPUSH
7208: PPUSH
// case Game_Type of 10 :
7209: LD_EXP 29
7213: PUSH
7214: LD_INT 10
7216: DOUBLE
7217: EQUAL
7218: IFTRUE 7222
7220: GO 7233
7222: POP
// def_game_rules := 1 ; 11 :
7223: LD_ADDR_EXP 30
7227: PUSH
7228: LD_INT 1
7230: ST_TO_ADDR
7231: GO 7253
7233: LD_INT 11
7235: DOUBLE
7236: EQUAL
7237: IFTRUE 7241
7239: GO 7252
7241: POP
// def_game_rules := 3 ; end ;
7242: LD_ADDR_EXP 30
7246: PUSH
7247: LD_INT 3
7249: ST_TO_ADDR
7250: GO 7253
7252: POP
// case def_game_rules of 0 :
7253: LD_EXP 30
7257: PUSH
7258: LD_INT 0
7260: DOUBLE
7261: EQUAL
7262: IFTRUE 7266
7264: GO 7271
7266: POP
// exit ; 1 :
7267: GO 9329
7269: GO 9229
7271: LD_INT 1
7273: DOUBLE
7274: EQUAL
7275: IFTRUE 7279
7277: GO 7495
7279: POP
// begin def_base_level := 2 ;
7280: LD_ADDR_EXP 31
7284: PUSH
7285: LD_INT 2
7287: ST_TO_ADDR
// def_amount_of_people := 2 ;
7288: LD_ADDR_EXP 32
7292: PUSH
7293: LD_INT 2
7295: ST_TO_ADDR
// def_skill_level := 1 ;
7296: LD_ADDR_EXP 33
7300: PUSH
7301: LD_INT 1
7303: ST_TO_ADDR
// def_starting_resources := 2 ;
7304: LD_ADDR_EXP 34
7308: PUSH
7309: LD_INT 2
7311: ST_TO_ADDR
// def_shipments_density := 1 ;
7312: LD_ADDR_EXP 35
7316: PUSH
7317: LD_INT 1
7319: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
7320: LD_ADDR_EXP 36
7324: PUSH
7325: LD_INT 0
7327: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
7328: LD_ADDR_EXP 37
7332: PUSH
7333: LD_INT 1
7335: ST_TO_ADDR
// def_shared_vision := 1 ;
7336: LD_ADDR_EXP 38
7340: PUSH
7341: LD_INT 1
7343: ST_TO_ADDR
// def_morale_flags := 3 ;
7344: LD_ADDR_EXP 39
7348: PUSH
7349: LD_INT 3
7351: ST_TO_ADDR
// def_siberite_detection := 1 ;
7352: LD_ADDR_EXP 40
7356: PUSH
7357: LD_INT 1
7359: ST_TO_ADDR
// def_people_respawning := 1 ;
7360: LD_ADDR_EXP 41
7364: PUSH
7365: LD_INT 1
7367: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
7368: LD_ADDR_EXP 42
7372: PUSH
7373: LD_INT 1
7375: ST_TO_ADDR
// def_siberite_bomb := 0 ;
7376: LD_ADDR_EXP 43
7380: PUSH
7381: LD_INT 0
7383: ST_TO_ADDR
// def_builduptime := 2 ;
7384: LD_ADDR_EXP 44
7388: PUSH
7389: LD_INT 2
7391: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
7392: LD_ADDR_VAR 0 2
7396: PUSH
7397: EMPTY
7398: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
7399: LD_ADDR_VAR 0 3
7403: PUSH
7404: EMPTY
7405: ST_TO_ADDR
// Banned_Weapons := [ ] ;
7406: LD_ADDR_LOC 27
7410: PUSH
7411: EMPTY
7412: ST_TO_ADDR
// Banned_Chassis := [ ] ;
7413: LD_ADDR_LOC 28
7417: PUSH
7418: EMPTY
7419: ST_TO_ADDR
// Banned_Controls := [ ] ;
7420: LD_ADDR_LOC 29
7424: PUSH
7425: EMPTY
7426: ST_TO_ADDR
// Banned_Engines := [ ] ;
7427: LD_ADDR_LOC 30
7431: PUSH
7432: EMPTY
7433: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
7434: LD_ADDR_LOC 25
7438: PUSH
7439: LD_INT 37
7441: PUSH
7442: EMPTY
7443: LIST
7444: PUSH
7445: LD_INT 4
7447: PUSH
7448: LD_INT 5
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: PUSH
7455: LD_INT 31
7457: PUSH
7458: LD_INT 32
7460: PUSH
7461: LD_INT 33
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: LIST
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: LIST
7473: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
7474: LD_ADDR_LOC 26
7478: PUSH
7479: LD_INT 2
7481: PUSH
7482: LD_INT 2
7484: PUSH
7485: LD_INT 4
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: LIST
7492: ST_TO_ADDR
// end ; 2 :
7493: GO 9229
7495: LD_INT 2
7497: DOUBLE
7498: EQUAL
7499: IFTRUE 7503
7501: GO 7712
7503: POP
// begin def_base_level := 1 ;
7504: LD_ADDR_EXP 31
7508: PUSH
7509: LD_INT 1
7511: ST_TO_ADDR
// def_amount_of_people := 2 ;
7512: LD_ADDR_EXP 32
7516: PUSH
7517: LD_INT 2
7519: ST_TO_ADDR
// def_skill_level := 3 ;
7520: LD_ADDR_EXP 33
7524: PUSH
7525: LD_INT 3
7527: ST_TO_ADDR
// def_starting_resources := 3 ;
7528: LD_ADDR_EXP 34
7532: PUSH
7533: LD_INT 3
7535: ST_TO_ADDR
// def_shipments_density := 2 ;
7536: LD_ADDR_EXP 35
7540: PUSH
7541: LD_INT 2
7543: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
7544: LD_ADDR_EXP 36
7548: PUSH
7549: LD_INT 1
7551: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
7552: LD_ADDR_EXP 37
7556: PUSH
7557: LD_INT 2
7559: ST_TO_ADDR
// def_shared_vision := 1 ;
7560: LD_ADDR_EXP 38
7564: PUSH
7565: LD_INT 1
7567: ST_TO_ADDR
// def_morale_flags := 0 ;
7568: LD_ADDR_EXP 39
7572: PUSH
7573: LD_INT 0
7575: ST_TO_ADDR
// def_siberite_detection := 1 ;
7576: LD_ADDR_EXP 40
7580: PUSH
7581: LD_INT 1
7583: ST_TO_ADDR
// def_people_respawning := 0 ;
7584: LD_ADDR_EXP 41
7588: PUSH
7589: LD_INT 0
7591: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
7592: LD_ADDR_EXP 42
7596: PUSH
7597: LD_INT 0
7599: ST_TO_ADDR
// def_siberite_bomb := 0 ;
7600: LD_ADDR_EXP 43
7604: PUSH
7605: LD_INT 0
7607: ST_TO_ADDR
// def_builduptime := 2 ;
7608: LD_ADDR_EXP 44
7612: PUSH
7613: LD_INT 2
7615: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
7616: LD_ADDR_VAR 0 2
7620: PUSH
7621: LD_INT 1
7623: PUSH
7624: EMPTY
7625: LIST
7626: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
7627: LD_ADDR_VAR 0 3
7631: PUSH
7632: EMPTY
7633: ST_TO_ADDR
// Banned_Weapons := [ ] ;
7634: LD_ADDR_LOC 27
7638: PUSH
7639: EMPTY
7640: ST_TO_ADDR
// Banned_Chassis := [ ] ;
7641: LD_ADDR_LOC 28
7645: PUSH
7646: EMPTY
7647: ST_TO_ADDR
// Banned_Controls := [ ] ;
7648: LD_ADDR_LOC 29
7652: PUSH
7653: EMPTY
7654: ST_TO_ADDR
// Banned_Engines := [ ] ;
7655: LD_ADDR_LOC 30
7659: PUSH
7660: EMPTY
7661: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
7662: LD_ADDR_LOC 25
7666: PUSH
7667: LD_INT 4
7669: PUSH
7670: LD_INT 5
7672: PUSH
7673: EMPTY
7674: LIST
7675: LIST
7676: PUSH
7677: LD_INT 31
7679: PUSH
7680: LD_INT 32
7682: PUSH
7683: LD_INT 33
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: LIST
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
7695: LD_ADDR_LOC 26
7699: PUSH
7700: LD_INT 1
7702: PUSH
7703: LD_INT 2
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: ST_TO_ADDR
// end ; 3 :
7710: GO 9229
7712: LD_INT 3
7714: DOUBLE
7715: EQUAL
7716: IFTRUE 7720
7718: GO 7963
7720: POP
// begin def_base_level := 1 ;
7721: LD_ADDR_EXP 31
7725: PUSH
7726: LD_INT 1
7728: ST_TO_ADDR
// def_amount_of_people := 2 ;
7729: LD_ADDR_EXP 32
7733: PUSH
7734: LD_INT 2
7736: ST_TO_ADDR
// def_skill_level := 3 ;
7737: LD_ADDR_EXP 33
7741: PUSH
7742: LD_INT 3
7744: ST_TO_ADDR
// def_starting_resources := 3 ;
7745: LD_ADDR_EXP 34
7749: PUSH
7750: LD_INT 3
7752: ST_TO_ADDR
// def_shipments_density := 1 ;
7753: LD_ADDR_EXP 35
7757: PUSH
7758: LD_INT 1
7760: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
7761: LD_ADDR_EXP 36
7765: PUSH
7766: LD_INT 0
7768: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
7769: LD_ADDR_EXP 37
7773: PUSH
7774: LD_INT 1
7776: ST_TO_ADDR
// def_shared_vision := 1 ;
7777: LD_ADDR_EXP 38
7781: PUSH
7782: LD_INT 1
7784: ST_TO_ADDR
// def_morale_flags := 0 ;
7785: LD_ADDR_EXP 39
7789: PUSH
7790: LD_INT 0
7792: ST_TO_ADDR
// def_siberite_detection := 1 ;
7793: LD_ADDR_EXP 40
7797: PUSH
7798: LD_INT 1
7800: ST_TO_ADDR
// def_people_respawning := 0 ;
7801: LD_ADDR_EXP 41
7805: PUSH
7806: LD_INT 0
7808: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
7809: LD_ADDR_EXP 42
7813: PUSH
7814: LD_INT 2
7816: ST_TO_ADDR
// def_siberite_bomb := 0 ;
7817: LD_ADDR_EXP 43
7821: PUSH
7822: LD_INT 0
7824: ST_TO_ADDR
// def_builduptime := 1 ;
7825: LD_ADDR_EXP 44
7829: PUSH
7830: LD_INT 1
7832: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
7833: LD_ADDR_VAR 0 2
7837: PUSH
7838: LD_INT 23
7840: PUSH
7841: EMPTY
7842: LIST
7843: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
7844: LD_ADDR_VAR 0 3
7848: PUSH
7849: LD_INT 2
7851: PUSH
7852: LD_INT 37
7854: PUSH
7855: LD_INT 32
7857: PUSH
7858: LD_INT 33
7860: PUSH
7861: LD_INT 36
7863: PUSH
7864: LD_INT 16
7866: PUSH
7867: LD_INT 23
7869: PUSH
7870: LD_INT 21
7872: PUSH
7873: LD_INT 18
7875: PUSH
7876: LD_INT 22
7878: PUSH
7879: LD_INT 20
7881: PUSH
7882: LD_INT 19
7884: PUSH
7885: LD_INT 25
7887: PUSH
7888: LD_INT 17
7890: PUSH
7891: LD_INT 24
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: ST_TO_ADDR
// Banned_Weapons := [ ] ;
7911: LD_ADDR_LOC 27
7915: PUSH
7916: EMPTY
7917: ST_TO_ADDR
// Banned_Chassis := [ ] ;
7918: LD_ADDR_LOC 28
7922: PUSH
7923: EMPTY
7924: ST_TO_ADDR
// Banned_Controls := [ ] ;
7925: LD_ADDR_LOC 29
7929: PUSH
7930: EMPTY
7931: ST_TO_ADDR
// Banned_Engines := [ ] ;
7932: LD_ADDR_LOC 30
7936: PUSH
7937: EMPTY
7938: ST_TO_ADDR
// Restricted_Builds := [ ] ;
7939: LD_ADDR_LOC 25
7943: PUSH
7944: EMPTY
7945: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
7946: LD_ADDR_LOC 26
7950: PUSH
7951: EMPTY
7952: ST_TO_ADDR
// No_Mechs := true ;
7953: LD_ADDR_EXP 45
7957: PUSH
7958: LD_INT 1
7960: ST_TO_ADDR
// end ; 4 :
7961: GO 9229
7963: LD_INT 4
7965: DOUBLE
7966: EQUAL
7967: IFTRUE 7971
7969: GO 8146
7971: POP
// begin def_base_level := 1 ;
7972: LD_ADDR_EXP 31
7976: PUSH
7977: LD_INT 1
7979: ST_TO_ADDR
// def_amount_of_people := 2 ;
7980: LD_ADDR_EXP 32
7984: PUSH
7985: LD_INT 2
7987: ST_TO_ADDR
// def_skill_level := 3 ;
7988: LD_ADDR_EXP 33
7992: PUSH
7993: LD_INT 3
7995: ST_TO_ADDR
// def_starting_resources := 3 ;
7996: LD_ADDR_EXP 34
8000: PUSH
8001: LD_INT 3
8003: ST_TO_ADDR
// def_shipments_density := 2 ;
8004: LD_ADDR_EXP 35
8008: PUSH
8009: LD_INT 2
8011: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8012: LD_ADDR_EXP 36
8016: PUSH
8017: LD_INT 1
8019: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8020: LD_ADDR_EXP 37
8024: PUSH
8025: LD_INT 2
8027: ST_TO_ADDR
// def_shared_vision := 1 ;
8028: LD_ADDR_EXP 38
8032: PUSH
8033: LD_INT 1
8035: ST_TO_ADDR
// def_morale_flags := 0 ;
8036: LD_ADDR_EXP 39
8040: PUSH
8041: LD_INT 0
8043: ST_TO_ADDR
// def_siberite_detection := 1 ;
8044: LD_ADDR_EXP 40
8048: PUSH
8049: LD_INT 1
8051: ST_TO_ADDR
// def_people_respawning := 0 ;
8052: LD_ADDR_EXP 41
8056: PUSH
8057: LD_INT 0
8059: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
8060: LD_ADDR_EXP 42
8064: PUSH
8065: LD_INT 0
8067: ST_TO_ADDR
// def_siberite_bomb := 1 ;
8068: LD_ADDR_EXP 43
8072: PUSH
8073: LD_INT 1
8075: ST_TO_ADDR
// def_builduptime := 3 ;
8076: LD_ADDR_EXP 44
8080: PUSH
8081: LD_INT 3
8083: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
8084: LD_ADDR_VAR 0 2
8088: PUSH
8089: LD_INT 1
8091: PUSH
8092: EMPTY
8093: LIST
8094: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8095: LD_ADDR_VAR 0 3
8099: PUSH
8100: EMPTY
8101: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8102: LD_ADDR_LOC 27
8106: PUSH
8107: EMPTY
8108: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8109: LD_ADDR_LOC 28
8113: PUSH
8114: EMPTY
8115: ST_TO_ADDR
// Banned_Controls := [ ] ;
8116: LD_ADDR_LOC 29
8120: PUSH
8121: EMPTY
8122: ST_TO_ADDR
// Banned_Engines := [ ] ;
8123: LD_ADDR_LOC 30
8127: PUSH
8128: EMPTY
8129: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8130: LD_ADDR_LOC 25
8134: PUSH
8135: EMPTY
8136: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8137: LD_ADDR_LOC 26
8141: PUSH
8142: EMPTY
8143: ST_TO_ADDR
// end ; 5 :
8144: GO 9229
8146: LD_INT 5
8148: DOUBLE
8149: EQUAL
8150: IFTRUE 8154
8152: GO 8403
8154: POP
// begin def_base_level := 0 ;
8155: LD_ADDR_EXP 31
8159: PUSH
8160: LD_INT 0
8162: ST_TO_ADDR
// def_amount_of_people := 0 ;
8163: LD_ADDR_EXP 32
8167: PUSH
8168: LD_INT 0
8170: ST_TO_ADDR
// def_skill_level := 0 ;
8171: LD_ADDR_EXP 33
8175: PUSH
8176: LD_INT 0
8178: ST_TO_ADDR
// def_starting_resources := 0 ;
8179: LD_ADDR_EXP 34
8183: PUSH
8184: LD_INT 0
8186: ST_TO_ADDR
// def_shipments_density := 0 ;
8187: LD_ADDR_EXP 35
8191: PUSH
8192: LD_INT 0
8194: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8195: LD_ADDR_EXP 36
8199: PUSH
8200: LD_INT 0
8202: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
8203: LD_ADDR_EXP 37
8207: PUSH
8208: LD_INT 0
8210: ST_TO_ADDR
// def_shared_vision := 1 ;
8211: LD_ADDR_EXP 38
8215: PUSH
8216: LD_INT 1
8218: ST_TO_ADDR
// def_morale_flags := 0 ;
8219: LD_ADDR_EXP 39
8223: PUSH
8224: LD_INT 0
8226: ST_TO_ADDR
// def_siberite_detection := 0 ;
8227: LD_ADDR_EXP 40
8231: PUSH
8232: LD_INT 0
8234: ST_TO_ADDR
// def_people_respawning := 1 ;
8235: LD_ADDR_EXP 41
8239: PUSH
8240: LD_INT 1
8242: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
8243: LD_ADDR_EXP 42
8247: PUSH
8248: LD_INT 1
8250: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8251: LD_ADDR_EXP 43
8255: PUSH
8256: LD_INT 0
8258: ST_TO_ADDR
// def_builduptime := 0 ;
8259: LD_ADDR_EXP 44
8263: PUSH
8264: LD_INT 0
8266: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
8267: LD_ADDR_VAR 0 2
8271: PUSH
8272: LD_INT 10
8274: PUSH
8275: LD_INT 3
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
8282: LD_ADDR_VAR 0 3
8286: PUSH
8287: LD_INT 12
8289: PUSH
8290: LD_INT 11
8292: PUSH
8293: LD_INT 14
8295: PUSH
8296: LD_INT 13
8298: PUSH
8299: LD_INT 5
8301: PUSH
8302: LD_INT 24
8304: PUSH
8305: LD_INT 21
8307: PUSH
8308: LD_INT 33
8310: PUSH
8311: LD_INT 36
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
8325: LD_ADDR_LOC 27
8329: PUSH
8330: LD_INT 31
8332: PUSH
8333: EMPTY
8334: LIST
8335: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8336: LD_ADDR_LOC 28
8340: PUSH
8341: EMPTY
8342: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
8343: LD_ADDR_LOC 29
8347: PUSH
8348: LD_INT 2
8350: PUSH
8351: EMPTY
8352: LIST
8353: ST_TO_ADDR
// Banned_Engines := [ ] ;
8354: LD_ADDR_LOC 30
8358: PUSH
8359: EMPTY
8360: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
8361: LD_ADDR_LOC 25
8365: PUSH
8366: LD_INT 4
8368: PUSH
8369: EMPTY
8370: LIST
8371: PUSH
8372: LD_INT 31
8374: PUSH
8375: LD_INT 32
8377: PUSH
8378: EMPTY
8379: LIST
8380: LIST
8381: PUSH
8382: EMPTY
8383: LIST
8384: LIST
8385: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
8386: LD_ADDR_LOC 26
8390: PUSH
8391: LD_INT 1
8393: PUSH
8394: LD_INT 1
8396: PUSH
8397: EMPTY
8398: LIST
8399: LIST
8400: ST_TO_ADDR
// end ; 6 :
8401: GO 9229
8403: LD_INT 6
8405: DOUBLE
8406: EQUAL
8407: IFTRUE 8411
8409: GO 8614
8411: POP
// begin def_base_level := 1 ;
8412: LD_ADDR_EXP 31
8416: PUSH
8417: LD_INT 1
8419: ST_TO_ADDR
// def_amount_of_people := 2 ;
8420: LD_ADDR_EXP 32
8424: PUSH
8425: LD_INT 2
8427: ST_TO_ADDR
// def_skill_level := 3 ;
8428: LD_ADDR_EXP 33
8432: PUSH
8433: LD_INT 3
8435: ST_TO_ADDR
// def_starting_resources := 3 ;
8436: LD_ADDR_EXP 34
8440: PUSH
8441: LD_INT 3
8443: ST_TO_ADDR
// def_shipments_density := 1 ;
8444: LD_ADDR_EXP 35
8448: PUSH
8449: LD_INT 1
8451: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8452: LD_ADDR_EXP 36
8456: PUSH
8457: LD_INT 0
8459: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
8460: LD_ADDR_EXP 37
8464: PUSH
8465: LD_INT 1
8467: ST_TO_ADDR
// def_shared_vision := 1 ;
8468: LD_ADDR_EXP 38
8472: PUSH
8473: LD_INT 1
8475: ST_TO_ADDR
// def_morale_flags := 0 ;
8476: LD_ADDR_EXP 39
8480: PUSH
8481: LD_INT 0
8483: ST_TO_ADDR
// def_siberite_detection := 1 ;
8484: LD_ADDR_EXP 40
8488: PUSH
8489: LD_INT 1
8491: ST_TO_ADDR
// def_people_respawning := 2 ;
8492: LD_ADDR_EXP 41
8496: PUSH
8497: LD_INT 2
8499: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
8500: LD_ADDR_EXP 42
8504: PUSH
8505: LD_INT 1
8507: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8508: LD_ADDR_EXP 43
8512: PUSH
8513: LD_INT 0
8515: ST_TO_ADDR
// def_builduptime := 1 ;
8516: LD_ADDR_EXP 44
8520: PUSH
8521: LD_INT 1
8523: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
8524: LD_ADDR_VAR 0 2
8528: PUSH
8529: LD_INT 23
8531: PUSH
8532: EMPTY
8533: LIST
8534: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
8535: LD_ADDR_VAR 0 3
8539: PUSH
8540: LD_INT 2
8542: PUSH
8543: LD_INT 37
8545: PUSH
8546: LD_INT 31
8548: PUSH
8549: LD_INT 32
8551: PUSH
8552: LD_INT 33
8554: PUSH
8555: EMPTY
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8562: LD_ADDR_LOC 27
8566: PUSH
8567: EMPTY
8568: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8569: LD_ADDR_LOC 28
8573: PUSH
8574: EMPTY
8575: ST_TO_ADDR
// Banned_Controls := [ ] ;
8576: LD_ADDR_LOC 29
8580: PUSH
8581: EMPTY
8582: ST_TO_ADDR
// Banned_Engines := [ ] ;
8583: LD_ADDR_LOC 30
8587: PUSH
8588: EMPTY
8589: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8590: LD_ADDR_LOC 25
8594: PUSH
8595: EMPTY
8596: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8597: LD_ADDR_LOC 26
8601: PUSH
8602: EMPTY
8603: ST_TO_ADDR
// No_Mechs := true ;
8604: LD_ADDR_EXP 45
8608: PUSH
8609: LD_INT 1
8611: ST_TO_ADDR
// end ; 7 :
8612: GO 9229
8614: LD_INT 7
8616: DOUBLE
8617: EQUAL
8618: IFTRUE 8622
8620: GO 8820
8622: POP
// begin def_base_level := 1 ;
8623: LD_ADDR_EXP 31
8627: PUSH
8628: LD_INT 1
8630: ST_TO_ADDR
// def_amount_of_people := 2 ;
8631: LD_ADDR_EXP 32
8635: PUSH
8636: LD_INT 2
8638: ST_TO_ADDR
// def_skill_level := 3 ;
8639: LD_ADDR_EXP 33
8643: PUSH
8644: LD_INT 3
8646: ST_TO_ADDR
// def_starting_resources := 3 ;
8647: LD_ADDR_EXP 34
8651: PUSH
8652: LD_INT 3
8654: ST_TO_ADDR
// def_shipments_density := 1 ;
8655: LD_ADDR_EXP 35
8659: PUSH
8660: LD_INT 1
8662: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8663: LD_ADDR_EXP 36
8667: PUSH
8668: LD_INT 1
8670: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8671: LD_ADDR_EXP 37
8675: PUSH
8676: LD_INT 2
8678: ST_TO_ADDR
// def_shared_vision := 1 ;
8679: LD_ADDR_EXP 38
8683: PUSH
8684: LD_INT 1
8686: ST_TO_ADDR
// def_morale_flags := 0 ;
8687: LD_ADDR_EXP 39
8691: PUSH
8692: LD_INT 0
8694: ST_TO_ADDR
// def_siberite_detection := 1 ;
8695: LD_ADDR_EXP 40
8699: PUSH
8700: LD_INT 1
8702: ST_TO_ADDR
// def_people_respawning := 0 ;
8703: LD_ADDR_EXP 41
8707: PUSH
8708: LD_INT 0
8710: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
8711: LD_ADDR_EXP 42
8715: PUSH
8716: LD_INT 1
8718: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8719: LD_ADDR_EXP 43
8723: PUSH
8724: LD_INT 0
8726: ST_TO_ADDR
// def_builduptime := 3 ;
8727: LD_ADDR_EXP 44
8731: PUSH
8732: LD_INT 3
8734: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
8735: LD_ADDR_VAR 0 2
8739: PUSH
8740: LD_INT 23
8742: PUSH
8743: EMPTY
8744: LIST
8745: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
8746: LD_ADDR_VAR 0 3
8750: PUSH
8751: LD_INT 37
8753: PUSH
8754: EMPTY
8755: LIST
8756: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8757: LD_ADDR_LOC 27
8761: PUSH
8762: EMPTY
8763: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8764: LD_ADDR_LOC 28
8768: PUSH
8769: EMPTY
8770: ST_TO_ADDR
// Banned_Controls := [ ] ;
8771: LD_ADDR_LOC 29
8775: PUSH
8776: EMPTY
8777: ST_TO_ADDR
// Banned_Engines := [ ] ;
8778: LD_ADDR_LOC 30
8782: PUSH
8783: EMPTY
8784: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
8785: LD_ADDR_LOC 25
8789: PUSH
8790: LD_INT 31
8792: PUSH
8793: LD_INT 32
8795: PUSH
8796: LD_INT 33
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: LIST
8803: PUSH
8804: EMPTY
8805: LIST
8806: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
8807: LD_ADDR_LOC 26
8811: PUSH
8812: LD_INT 10
8814: PUSH
8815: EMPTY
8816: LIST
8817: ST_TO_ADDR
// end ; 8 :
8818: GO 9229
8820: LD_INT 8
8822: DOUBLE
8823: EQUAL
8824: IFTRUE 8828
8826: GO 9228
8828: POP
// begin def_base_level := 0 ;
8829: LD_ADDR_EXP 31
8833: PUSH
8834: LD_INT 0
8836: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
8837: LD_ADDR_EXP 32
8841: PUSH
8842: LD_INT 0
8844: PPUSH
8845: LD_INT 1
8847: PPUSH
8848: CALL_OW 12
8852: ST_TO_ADDR
// def_skill_level := 0 ;
8853: LD_ADDR_EXP 33
8857: PUSH
8858: LD_INT 0
8860: ST_TO_ADDR
// def_starting_resources := 2 ;
8861: LD_ADDR_EXP 34
8865: PUSH
8866: LD_INT 2
8868: ST_TO_ADDR
// def_shipments_density := 1 ;
8869: LD_ADDR_EXP 35
8873: PUSH
8874: LD_INT 1
8876: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8877: LD_ADDR_EXP 36
8881: PUSH
8882: LD_INT 0
8884: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
8885: LD_ADDR_EXP 37
8889: PUSH
8890: LD_INT 0
8892: ST_TO_ADDR
// def_shared_vision := 1 ;
8893: LD_ADDR_EXP 38
8897: PUSH
8898: LD_INT 1
8900: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
8901: LD_ADDR_EXP 39
8905: PUSH
8906: LD_INT 0
8908: PPUSH
8909: LD_INT 2
8911: PPUSH
8912: CALL_OW 12
8916: ST_TO_ADDR
// def_siberite_detection := 0 ;
8917: LD_ADDR_EXP 40
8921: PUSH
8922: LD_INT 0
8924: ST_TO_ADDR
// def_people_respawning := 0 ;
8925: LD_ADDR_EXP 41
8929: PUSH
8930: LD_INT 0
8932: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
8933: LD_ADDR_EXP 42
8937: PUSH
8938: LD_INT 2
8940: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8941: LD_ADDR_EXP 43
8945: PUSH
8946: LD_INT 0
8948: ST_TO_ADDR
// def_builduptime := 0 ;
8949: LD_ADDR_EXP 44
8953: PUSH
8954: LD_INT 0
8956: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
8957: LD_ADDR_VAR 0 2
8961: PUSH
8962: LD_INT 23
8964: PUSH
8965: LD_INT 20
8967: PUSH
8968: LD_INT 40
8970: PUSH
8971: LD_INT 47
8973: PUSH
8974: LD_INT 46
8976: PUSH
8977: LD_INT 39
8979: PUSH
8980: LD_INT 71
8982: PUSH
8983: LD_INT 34
8985: PUSH
8986: LD_INT 41
8988: PUSH
8989: LD_INT 44
8991: PUSH
8992: LD_INT 17
8994: PUSH
8995: LD_INT 16
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
9012: LD_ADDR_VAR 0 3
9016: PUSH
9017: LD_INT 37
9019: PUSH
9020: LD_INT 5
9022: PUSH
9023: LD_INT 13
9025: PUSH
9026: LD_INT 34
9028: PUSH
9029: LD_INT 12
9031: PUSH
9032: LD_INT 15
9034: PUSH
9035: LD_INT 11
9037: PUSH
9038: LD_INT 14
9040: PUSH
9041: LD_INT 29
9043: PUSH
9044: LD_INT 30
9046: PUSH
9047: LD_INT 28
9049: PUSH
9050: LD_INT 24
9052: PUSH
9053: LD_INT 25
9055: PUSH
9056: LD_INT 20
9058: PUSH
9059: LD_INT 21
9061: PUSH
9062: LD_INT 22
9064: PUSH
9065: LD_INT 36
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9087: LD_ADDR_LOC 27
9091: PUSH
9092: EMPTY
9093: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
9094: LD_ADDR_LOC 28
9098: PUSH
9099: LD_INT 14
9101: PUSH
9102: EMPTY
9103: LIST
9104: ST_TO_ADDR
// Banned_Controls := [ ] ;
9105: LD_ADDR_LOC 29
9109: PUSH
9110: EMPTY
9111: ST_TO_ADDR
// Banned_Engines := [ ] ;
9112: LD_ADDR_LOC 30
9116: PUSH
9117: EMPTY
9118: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
9119: LD_ADDR_LOC 25
9123: PUSH
9124: LD_INT 31
9126: PUSH
9127: LD_INT 32
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: PUSH
9134: LD_INT 4
9136: PUSH
9137: EMPTY
9138: LIST
9139: PUSH
9140: EMPTY
9141: LIST
9142: LIST
9143: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
9144: LD_ADDR_LOC 26
9148: PUSH
9149: LD_INT 2
9151: PUSH
9152: LD_INT 1
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: ST_TO_ADDR
// for i := 1 to 8 do
9159: LD_ADDR_VAR 0 4
9163: PUSH
9164: DOUBLE
9165: LD_INT 1
9167: DEC
9168: ST_TO_ADDR
9169: LD_INT 8
9171: PUSH
9172: FOR_TO
9173: IFFALSE 9224
// if ( Side_Nations [ i ] = 3 ) then
9175: LD_EXP 21
9179: PUSH
9180: LD_VAR 0 4
9184: ARRAY
9185: PUSH
9186: LD_INT 3
9188: EQUAL
9189: IFFALSE 9222
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
9191: LD_ADDR_EXP 21
9195: PUSH
9196: LD_EXP 21
9200: PPUSH
9201: LD_VAR 0 4
9205: PPUSH
9206: LD_INT 1
9208: PPUSH
9209: LD_INT 2
9211: PPUSH
9212: CALL_OW 12
9216: PPUSH
9217: CALL_OW 1
9221: ST_TO_ADDR
9222: GO 9172
9224: POP
9225: POP
// end ; end ;
9226: GO 9229
9228: POP
// for i := 1 to 8 do
9229: LD_ADDR_VAR 0 4
9233: PUSH
9234: DOUBLE
9235: LD_INT 1
9237: DEC
9238: ST_TO_ADDR
9239: LD_INT 8
9241: PUSH
9242: FOR_TO
9243: IFFALSE 9327
// if Side_Positions [ i ] then
9245: LD_EXP 20
9249: PUSH
9250: LD_VAR 0 4
9254: ARRAY
9255: IFFALSE 9325
// begin for j in Unavailable_Techs do
9257: LD_ADDR_VAR 0 5
9261: PUSH
9262: LD_VAR 0 2
9266: PUSH
9267: FOR_IN
9268: IFFALSE 9289
// SetTech ( j , i , 0 ) ;
9270: LD_VAR 0 5
9274: PPUSH
9275: LD_VAR 0 4
9279: PPUSH
9280: LD_INT 0
9282: PPUSH
9283: CALL_OW 322
9287: GO 9267
9289: POP
9290: POP
// for j in Unavailable_Builds do
9291: LD_ADDR_VAR 0 5
9295: PUSH
9296: LD_VAR 0 3
9300: PUSH
9301: FOR_IN
9302: IFFALSE 9323
// SetRestrict ( j , i , 0 ) ;
9304: LD_VAR 0 5
9308: PPUSH
9309: LD_VAR 0 4
9313: PPUSH
9314: LD_INT 0
9316: PPUSH
9317: CALL_OW 324
9321: GO 9301
9323: POP
9324: POP
// end ;
9325: GO 9242
9327: POP
9328: POP
// end ;
9329: LD_VAR 0 1
9333: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
9334: LD_INT 0
9336: PPUSH
9337: PPUSH
9338: PPUSH
9339: PPUSH
9340: PPUSH
9341: PPUSH
9342: PPUSH
// for i := 1 to Restricted_Builds do
9343: LD_ADDR_VAR 0 2
9347: PUSH
9348: DOUBLE
9349: LD_INT 1
9351: DEC
9352: ST_TO_ADDR
9353: LD_LOC 25
9357: PUSH
9358: FOR_TO
9359: IFFALSE 9669
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
9361: LD_LOC 25
9365: PUSH
9366: LD_VAR 0 2
9370: ARRAY
9371: PUSH
9372: LD_INT 1
9374: ARRAY
9375: PUSH
9376: LD_INT 31
9378: DOUBLE
9379: EQUAL
9380: IFTRUE 9396
9382: LD_INT 32
9384: DOUBLE
9385: EQUAL
9386: IFTRUE 9396
9388: LD_INT 33
9390: DOUBLE
9391: EQUAL
9392: IFTRUE 9396
9394: GO 9407
9396: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
9397: LD_ADDR_VAR 0 6
9401: PUSH
9402: LD_STRING #Turrets
9404: ST_TO_ADDR
9405: GO 9452
9407: LD_INT 4
9409: DOUBLE
9410: EQUAL
9411: IFTRUE 9421
9413: LD_INT 5
9415: DOUBLE
9416: EQUAL
9417: IFTRUE 9421
9419: GO 9432
9421: POP
// btype := #Armouries ; b_Behemoth :
9422: LD_ADDR_VAR 0 6
9426: PUSH
9427: LD_STRING #Armouries
9429: ST_TO_ADDR
9430: GO 9452
9432: LD_INT 37
9434: DOUBLE
9435: EQUAL
9436: IFTRUE 9440
9438: GO 9451
9440: POP
// btype := #Behemoths ; end ;
9441: LD_ADDR_VAR 0 6
9445: PUSH
9446: LD_STRING #Behemoths
9448: ST_TO_ADDR
9449: GO 9452
9451: POP
// list := [ ] ;
9452: LD_ADDR_VAR 0 7
9456: PUSH
9457: EMPTY
9458: ST_TO_ADDR
// for j := 1 to 8 do
9459: LD_ADDR_VAR 0 3
9463: PUSH
9464: DOUBLE
9465: LD_INT 1
9467: DEC
9468: ST_TO_ADDR
9469: LD_INT 8
9471: PUSH
9472: FOR_TO
9473: IFFALSE 9566
// if Side_Positions [ j ] then
9475: LD_EXP 20
9479: PUSH
9480: LD_VAR 0 3
9484: ARRAY
9485: IFFALSE 9564
// begin amount := 0 ;
9487: LD_ADDR_VAR 0 5
9491: PUSH
9492: LD_INT 0
9494: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
9495: LD_ADDR_VAR 0 4
9499: PUSH
9500: LD_LOC 25
9504: PUSH
9505: LD_VAR 0 2
9509: ARRAY
9510: PUSH
9511: FOR_IN
9512: IFFALSE 9560
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
9514: LD_ADDR_VAR 0 5
9518: PUSH
9519: LD_VAR 0 5
9523: PUSH
9524: LD_INT 22
9526: PUSH
9527: LD_VAR 0 3
9531: PUSH
9532: EMPTY
9533: LIST
9534: LIST
9535: PUSH
9536: LD_INT 30
9538: PUSH
9539: LD_VAR 0 4
9543: PUSH
9544: EMPTY
9545: LIST
9546: LIST
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: PPUSH
9552: CALL_OW 69
9556: PLUS
9557: ST_TO_ADDR
9558: GO 9511
9560: POP
9561: POP
// break ;
9562: GO 9566
// end ;
9564: GO 9472
9566: POP
9567: POP
// list := [ ] ;
9568: LD_ADDR_VAR 0 7
9572: PUSH
9573: EMPTY
9574: ST_TO_ADDR
// for j := 1 to 8 do
9575: LD_ADDR_VAR 0 3
9579: PUSH
9580: DOUBLE
9581: LD_INT 1
9583: DEC
9584: ST_TO_ADDR
9585: LD_INT 8
9587: PUSH
9588: FOR_TO
9589: IFFALSE 9609
// list := list ^ amount ;
9591: LD_ADDR_VAR 0 7
9595: PUSH
9596: LD_VAR 0 7
9600: PUSH
9601: LD_VAR 0 5
9605: ADD
9606: ST_TO_ADDR
9607: GO 9588
9609: POP
9610: POP
// Already_Built := Already_Built ^ [ list ] ;
9611: LD_ADDR_LOC 31
9615: PUSH
9616: LD_LOC 31
9620: PUSH
9621: LD_VAR 0 7
9625: PUSH
9626: EMPTY
9627: LIST
9628: ADD
9629: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
9630: LD_ADDR_LOC 32
9634: PUSH
9635: LD_LOC 32
9639: PUSH
9640: LD_VAR 0 6
9644: PUSH
9645: LD_VAR 0 5
9649: PUSH
9650: LD_LOC 26
9654: PUSH
9655: LD_VAR 0 2
9659: ARRAY
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: LIST
9665: ADD
9666: ST_TO_ADDR
// end ;
9667: GO 9358
9669: POP
9670: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9671: LD_ADDR_LOC 33
9675: PUSH
9676: LD_INT 0
9678: PUSH
9679: LD_INT 0
9681: PUSH
9682: LD_INT 0
9684: PUSH
9685: LD_INT 0
9687: PUSH
9688: LD_INT 0
9690: PUSH
9691: LD_INT 0
9693: PUSH
9694: LD_INT 0
9696: PUSH
9697: LD_INT 0
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: ST_TO_ADDR
// if Limits_Info then
9710: LD_LOC 32
9714: IFFALSE 9730
// Limits_Info := #Limits ^ Limits_Info ;
9716: LD_ADDR_LOC 32
9720: PUSH
9721: LD_STRING #Limits
9723: PUSH
9724: LD_LOC 32
9728: ADD
9729: ST_TO_ADDR
// end ;
9730: LD_VAR 0 1
9734: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
9735: LD_INT 0
9737: PPUSH
9738: PPUSH
9739: PPUSH
9740: PPUSH
// for i := 1 to Restricted_Builds do
9741: LD_ADDR_VAR 0 7
9745: PUSH
9746: DOUBLE
9747: LD_INT 1
9749: DEC
9750: ST_TO_ADDR
9751: LD_LOC 25
9755: PUSH
9756: FOR_TO
9757: IFFALSE 10180
// if BType in Restricted_Builds [ i ] then
9759: LD_VAR 0 2
9763: PUSH
9764: LD_LOC 25
9768: PUSH
9769: LD_VAR 0 7
9773: ARRAY
9774: IN
9775: IFFALSE 10178
// begin if old_side then
9777: LD_VAR 0 4
9781: IFFALSE 9907
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
9783: LD_LOC 31
9787: PUSH
9788: LD_VAR 0 7
9792: ARRAY
9793: PUSH
9794: LD_VAR 0 3
9798: ARRAY
9799: PUSH
9800: LD_VAR 0 5
9804: PLUS
9805: PUSH
9806: LD_LOC 26
9810: PUSH
9811: LD_VAR 0 7
9815: ARRAY
9816: GREATER
9817: IFFALSE 9843
// begin SetSide ( un , old_side ) ;
9819: LD_VAR 0 1
9823: PPUSH
9824: LD_VAR 0 4
9828: PPUSH
9829: CALL_OW 235
// count := 0 ;
9833: LD_ADDR_VAR 0 5
9837: PUSH
9838: LD_INT 0
9840: ST_TO_ADDR
// end else
9841: GO 9907
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
9843: LD_ADDR_LOC 31
9847: PUSH
9848: LD_LOC 31
9852: PPUSH
9853: LD_VAR 0 7
9857: PPUSH
9858: LD_LOC 31
9862: PUSH
9863: LD_VAR 0 7
9867: ARRAY
9868: PPUSH
9869: LD_VAR 0 4
9873: PPUSH
9874: LD_LOC 31
9878: PUSH
9879: LD_VAR 0 7
9883: ARRAY
9884: PUSH
9885: LD_VAR 0 4
9889: ARRAY
9890: PUSH
9891: LD_VAR 0 5
9895: MINUS
9896: PPUSH
9897: CALL_OW 1
9901: PPUSH
9902: CALL_OW 1
9906: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
9907: LD_ADDR_LOC 31
9911: PUSH
9912: LD_LOC 31
9916: PPUSH
9917: LD_VAR 0 7
9921: PPUSH
9922: LD_LOC 31
9926: PUSH
9927: LD_VAR 0 7
9931: ARRAY
9932: PPUSH
9933: LD_VAR 0 3
9937: PPUSH
9938: LD_LOC 31
9942: PUSH
9943: LD_VAR 0 7
9947: ARRAY
9948: PUSH
9949: LD_VAR 0 3
9953: ARRAY
9954: PUSH
9955: LD_VAR 0 5
9959: PLUS
9960: PPUSH
9961: CALL_OW 1
9965: PPUSH
9966: CALL_OW 1
9970: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
9971: LD_VAR 0 5
9975: PUSH
9976: LD_INT 0
9978: NONEQUAL
9979: PUSH
9980: LD_VAR 0 3
9984: PUSH
9985: LD_OWVAR 2
9989: EQUAL
9990: AND
9991: IFFALSE 10034
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
9993: LD_ADDR_LOC 32
9997: PUSH
9998: LD_LOC 32
10002: PPUSH
10003: LD_INT 3
10005: PUSH
10006: LD_VAR 0 7
10010: MUL
10011: PPUSH
10012: LD_LOC 31
10016: PUSH
10017: LD_VAR 0 7
10021: ARRAY
10022: PUSH
10023: LD_VAR 0 3
10027: ARRAY
10028: PPUSH
10029: CALL_OW 1
10033: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
10034: LD_LOC 31
10038: PUSH
10039: LD_VAR 0 7
10043: ARRAY
10044: PUSH
10045: LD_VAR 0 3
10049: ARRAY
10050: PUSH
10051: LD_LOC 26
10055: PUSH
10056: LD_VAR 0 7
10060: ARRAY
10061: GREATER
10062: IFFALSE 10089
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
10064: LD_ADDR_LOC 33
10068: PUSH
10069: LD_LOC 33
10073: PPUSH
10074: LD_VAR 0 3
10078: PPUSH
10079: LD_INT 1
10081: PPUSH
10082: CALL_OW 1
10086: ST_TO_ADDR
// end else
10087: GO 10176
// begin for j := 1 to Restricted_Builds do
10089: LD_ADDR_VAR 0 8
10093: PUSH
10094: DOUBLE
10095: LD_INT 1
10097: DEC
10098: ST_TO_ADDR
10099: LD_LOC 25
10103: PUSH
10104: FOR_TO
10105: IFFALSE 10149
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
10107: LD_LOC 31
10111: PUSH
10112: LD_VAR 0 8
10116: ARRAY
10117: PUSH
10118: LD_VAR 0 3
10122: ARRAY
10123: PUSH
10124: LD_LOC 26
10128: PUSH
10129: LD_VAR 0 8
10133: ARRAY
10134: GREATER
10135: IFFALSE 10147
// begin Is_Cheater := true ;
10137: LD_ADDR_VAR 0 9
10141: PUSH
10142: LD_INT 1
10144: ST_TO_ADDR
// break ;
10145: GO 10149
// end ;
10147: GO 10104
10149: POP
10150: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
10151: LD_ADDR_LOC 33
10155: PUSH
10156: LD_LOC 33
10160: PPUSH
10161: LD_VAR 0 3
10165: PPUSH
10166: LD_VAR 0 9
10170: PPUSH
10171: CALL_OW 1
10175: ST_TO_ADDR
// end ; break ;
10176: GO 10180
// end ;
10178: GO 9756
10180: POP
10181: POP
// end ;
10182: LD_VAR 0 6
10186: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
10187: LD_VAR 0 5
10191: PUSH
10192: LD_LOC 27
10196: IN
10197: PUSH
10198: LD_VAR 0 2
10202: PUSH
10203: LD_LOC 28
10207: IN
10208: OR
10209: PUSH
10210: LD_VAR 0 4
10214: PUSH
10215: LD_LOC 29
10219: IN
10220: OR
10221: PUSH
10222: LD_VAR 0 3
10226: PUSH
10227: LD_LOC 30
10231: IN
10232: OR
10233: IFFALSE 10244
// ComCancel ( factory ) ;
10235: LD_VAR 0 1
10239: PPUSH
10240: CALL_OW 127
// end ;
10244: PPOPN 5
10246: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
10247: LD_VAR 0 2
10251: PUSH
10252: LD_LOC 27
10256: IN
10257: IFFALSE 10268
// ComCancel ( building ) ;
10259: LD_VAR 0 1
10263: PPUSH
10264: CALL_OW 127
// end ; end_of_file
10268: PPOPN 2
10270: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
10271: LD_INT 0
10273: PPUSH
10274: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
10275: LD_ADDR_VAR 0 2
10279: PUSH
10280: LD_STRING #Multi1x1-Time
10282: PUSH
10283: LD_OWVAR 1
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: ST_TO_ADDR
// if WaitServerStrings then
10292: LD_EXP 47
10296: IFFALSE 10314
// AllStrings = AllStrings ^ WaitServerStrings ;
10298: LD_ADDR_VAR 0 2
10302: PUSH
10303: LD_VAR 0 2
10307: PUSH
10308: LD_EXP 47
10312: ADD
10313: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
10314: LD_INT 0
10316: PUSH
10317: LD_EXP 12
10321: PUSH
10322: LD_OWVAR 1
10326: MINUS
10327: LESSEQUAL
10328: IFFALSE 10359
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
10330: LD_ADDR_VAR 0 2
10334: PUSH
10335: LD_VAR 0 2
10339: PUSH
10340: LD_STRING #allowedsibbomb
10342: PUSH
10343: LD_EXP 12
10347: PUSH
10348: LD_OWVAR 1
10352: MINUS
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: ADD
10358: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
10359: LD_INT 0
10361: PUSH
10362: LD_EXP 16
10366: PUSH
10367: LD_OWVAR 1
10371: MINUS
10372: LESSEQUAL
10373: IFFALSE 10404
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
10375: LD_ADDR_VAR 0 2
10379: PUSH
10380: LD_VAR 0 2
10384: PUSH
10385: LD_STRING #builduptime
10387: PUSH
10388: LD_EXP 16
10392: PUSH
10393: LD_OWVAR 1
10397: MINUS
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: ADD
10403: ST_TO_ADDR
// if ( ExtraStrings ) then
10404: LD_EXP 46
10408: IFFALSE 10430
// AllStrings := AllStrings ^  ^ ExtraStrings ;
10410: LD_ADDR_VAR 0 2
10414: PUSH
10415: LD_VAR 0 2
10419: PUSH
10420: LD_STRING 
10422: ADD
10423: PUSH
10424: LD_EXP 46
10428: ADD
10429: ST_TO_ADDR
// if ( LimitsStrings ) then
10430: CALL 7111 0 0
10434: IFFALSE 10456
// AllStrings := AllStrings ^  ^ LimitsStrings ;
10436: LD_ADDR_VAR 0 2
10440: PUSH
10441: LD_VAR 0 2
10445: PUSH
10446: LD_STRING 
10448: ADD
10449: PUSH
10450: CALL 7111 0 0
10454: ADD
10455: ST_TO_ADDR
// Display_Strings := AllStrings ;
10456: LD_ADDR_OWVAR 47
10460: PUSH
10461: LD_VAR 0 2
10465: ST_TO_ADDR
// end ;
10466: LD_VAR 0 1
10470: RET
// every 0 0$1 do
10471: GO 10473
10473: DISABLE
// begin ShowTimer ;
10474: CALL 10271 0 0
// enable ;
10478: ENABLE
// end ; end_of_file
10479: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
10480: LD_INT 0
10482: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
10483: LD_VAR 0 1
10487: PPUSH
10488: CALL_OW 255
10492: PUSH
10493: LD_VAR 0 4
10497: EQUAL
10498: IFFALSE 10517
// begin SetAchievement ( ACH_RAD ) ;
10500: LD_STRING ACH_RAD
10502: PPUSH
10503: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
10507: LD_STRING ACH_NL
10509: PPUSH
10510: LD_INT 1
10512: PPUSH
10513: CALL_OW 564
// end end ;
10517: LD_VAR 0 5
10521: RET
// export function SA_Win ( side ) ; begin
10522: LD_INT 0
10524: PPUSH
// case side of 1 :
10525: LD_VAR 0 1
10529: PUSH
10530: LD_INT 1
10532: DOUBLE
10533: EQUAL
10534: IFTRUE 10538
10536: GO 10551
10538: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
10539: LD_STRING ACH_AH
10541: PPUSH
10542: LD_INT 1
10544: PPUSH
10545: CALL_OW 564
10549: GO 10714
10551: LD_INT 2
10553: DOUBLE
10554: EQUAL
10555: IFTRUE 10559
10557: GO 10572
10559: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
10560: LD_STRING ACH_E
10562: PPUSH
10563: LD_INT 1
10565: PPUSH
10566: CALL_OW 564
10570: GO 10714
10572: LD_INT 3
10574: DOUBLE
10575: EQUAL
10576: IFTRUE 10580
10578: GO 10593
10580: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
10581: LD_STRING ACH_OOL
10583: PPUSH
10584: LD_INT 1
10586: PPUSH
10587: CALL_OW 564
10591: GO 10714
10593: LD_INT 1
10595: PUSH
10596: LD_INT 2
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: DOUBLE
10603: EQUAL
10604: IFTRUE 10608
10606: GO 10633
10608: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
10609: LD_STRING ACH_AH
10611: PPUSH
10612: LD_REAL  5.00000000000000E-0001
10615: PPUSH
10616: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
10620: LD_STRING ACH_E
10622: PPUSH
10623: LD_REAL  5.00000000000000E-0001
10626: PPUSH
10627: CALL_OW 564
// end ; [ 2 , 3 ] :
10631: GO 10714
10633: LD_INT 2
10635: PUSH
10636: LD_INT 3
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: DOUBLE
10643: EQUAL
10644: IFTRUE 10648
10646: GO 10673
10648: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
10649: LD_STRING ACH_OOL
10651: PPUSH
10652: LD_REAL  5.00000000000000E-0001
10655: PPUSH
10656: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
10660: LD_STRING ACH_E
10662: PPUSH
10663: LD_REAL  5.00000000000000E-0001
10666: PPUSH
10667: CALL_OW 564
// end ; [ 3 , 1 ] :
10671: GO 10714
10673: LD_INT 3
10675: PUSH
10676: LD_INT 1
10678: PUSH
10679: EMPTY
10680: LIST
10681: LIST
10682: DOUBLE
10683: EQUAL
10684: IFTRUE 10688
10686: GO 10713
10688: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
10689: LD_STRING ACH_AH
10691: PPUSH
10692: LD_REAL  5.00000000000000E-0001
10695: PPUSH
10696: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
10700: LD_STRING ACH_OOL
10702: PPUSH
10703: LD_REAL  5.00000000000000E-0001
10706: PPUSH
10707: CALL_OW 564
// end ; end ;
10711: GO 10714
10713: POP
// end ; end_of_file
10714: LD_VAR 0 2
10718: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
10719: LD_INT 0
10721: PPUSH
10722: PPUSH
// enable ( 98 ) ;
10723: LD_INT 98
10725: ENABLE_MARKED
// GameEnded = false ;
10726: LD_ADDR_LOC 35
10730: PUSH
10731: LD_INT 0
10733: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10734: LD_ADDR_LOC 34
10738: PUSH
10739: LD_INT 0
10741: PUSH
10742: LD_INT 0
10744: PUSH
10745: LD_INT 0
10747: PUSH
10748: LD_INT 0
10750: PUSH
10751: LD_INT 0
10753: PUSH
10754: LD_INT 0
10756: PUSH
10757: LD_INT 0
10759: PUSH
10760: LD_INT 0
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: ST_TO_ADDR
// unfoged = false ;
10773: LD_ADDR_LOC 36
10777: PUSH
10778: LD_INT 0
10780: ST_TO_ADDR
// for i = 1 to side_positions do
10781: LD_ADDR_VAR 0 2
10785: PUSH
10786: DOUBLE
10787: LD_INT 1
10789: DEC
10790: ST_TO_ADDR
10791: LD_EXP 20
10795: PUSH
10796: FOR_TO
10797: IFFALSE 10837
// if not side_positions [ i ] then
10799: LD_EXP 20
10803: PUSH
10804: LD_VAR 0 2
10808: ARRAY
10809: NOT
10810: IFFALSE 10835
// defaited = replace ( defaited , i , true ) ;
10812: LD_ADDR_LOC 34
10816: PUSH
10817: LD_LOC 34
10821: PPUSH
10822: LD_VAR 0 2
10826: PPUSH
10827: LD_INT 1
10829: PPUSH
10830: CALL_OW 1
10834: ST_TO_ADDR
10835: GO 10796
10837: POP
10838: POP
// end ;
10839: LD_VAR 0 1
10843: RET
// function CanWinLoose ; begin
10844: LD_INT 0
10846: PPUSH
// Result := true ;
10847: LD_ADDR_VAR 0 1
10851: PUSH
10852: LD_INT 1
10854: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
10855: CALL_OW 518
10859: PUSH
10860: CALL_OW 519
10864: PUSH
10865: LD_INT 0
10867: GREATER
10868: AND
10869: IFFALSE 10879
// Result := false ;
10871: LD_ADDR_VAR 0 1
10875: PUSH
10876: LD_INT 0
10878: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10879: CALL_OW 531
10883: PUSH
10884: CALL_OW 519
10888: PUSH
10889: LD_INT 1
10891: GREATER
10892: AND
10893: IFFALSE 10903
// Result := false ;
10895: LD_ADDR_VAR 0 1
10899: PUSH
10900: LD_INT 0
10902: ST_TO_ADDR
// end ;
10903: LD_VAR 0 1
10907: RET
// export function HasPower ( i ) ; var k , h ; begin
10908: LD_INT 0
10910: PPUSH
10911: PPUSH
10912: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
10913: LD_VAR 0 1
10917: PPUSH
10918: CALL_OW 108
10922: NOT
10923: PUSH
10924: LD_EXP 19
10928: PUSH
10929: LD_VAR 0 1
10933: ARRAY
10934: NOT
10935: AND
10936: PUSH
10937: LD_OWVAR 4
10941: AND
10942: IFFALSE 10954
// begin result = false ;
10944: LD_ADDR_VAR 0 2
10948: PUSH
10949: LD_INT 0
10951: ST_TO_ADDR
// end else
10952: GO 11249
// case def_win_rules of 0 :
10954: LD_EXP 15
10958: PUSH
10959: LD_INT 0
10961: DOUBLE
10962: EQUAL
10963: IFTRUE 10967
10965: GO 11130
10967: POP
// if def_people_respawning then
10968: LD_EXP 41
10972: IFFALSE 11063
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
10974: LD_ADDR_VAR 0 2
10978: PUSH
10979: LD_INT 22
10981: PUSH
10982: LD_VAR 0 1
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: PUSH
10991: LD_INT 2
10993: PUSH
10994: LD_INT 21
10996: PUSH
10997: LD_INT 1
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: PUSH
11004: LD_INT 33
11006: PUSH
11007: LD_INT 3
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: PUSH
11014: LD_INT 33
11016: PUSH
11017: LD_INT 5
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: PUSH
11024: LD_INT 30
11026: PUSH
11027: LD_INT 0
11029: PUSH
11030: EMPTY
11031: LIST
11032: LIST
11033: PUSH
11034: LD_INT 30
11036: PUSH
11037: LD_INT 1
11039: PUSH
11040: EMPTY
11041: LIST
11042: LIST
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: PUSH
11052: EMPTY
11053: LIST
11054: LIST
11055: PPUSH
11056: CALL_OW 69
11060: ST_TO_ADDR
11061: GO 11128
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
11063: LD_ADDR_VAR 0 2
11067: PUSH
11068: LD_INT 22
11070: PUSH
11071: LD_VAR 0 1
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: PUSH
11080: LD_INT 2
11082: PUSH
11083: LD_INT 21
11085: PUSH
11086: LD_INT 1
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: PUSH
11093: LD_INT 33
11095: PUSH
11096: LD_INT 3
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: PUSH
11103: LD_INT 33
11105: PUSH
11106: LD_INT 5
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: PUSH
11113: EMPTY
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: PPUSH
11123: CALL_OW 69
11127: ST_TO_ADDR
11128: GO 11249
11130: LD_INT 1
11132: DOUBLE
11133: EQUAL
11134: IFTRUE 11138
11136: GO 11177
11138: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
11139: LD_ADDR_VAR 0 2
11143: PUSH
11144: LD_INT 22
11146: PUSH
11147: LD_VAR 0 1
11151: PUSH
11152: EMPTY
11153: LIST
11154: LIST
11155: PUSH
11156: LD_INT 21
11158: PUSH
11159: LD_INT 1
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: PPUSH
11170: CALL_OW 69
11174: ST_TO_ADDR
11175: GO 11249
11177: LD_INT 2
11179: DOUBLE
11180: EQUAL
11181: IFTRUE 11185
11183: GO 11248
11185: POP
// begin h = false ;
11186: LD_ADDR_VAR 0 4
11190: PUSH
11191: LD_INT 0
11193: ST_TO_ADDR
// for k in heroes [ i ] do
11194: LD_ADDR_VAR 0 3
11198: PUSH
11199: LD_EXP 28
11203: PUSH
11204: LD_VAR 0 1
11208: ARRAY
11209: PUSH
11210: FOR_IN
11211: IFFALSE 11234
// if IsLive ( k ) then
11213: LD_VAR 0 3
11217: PPUSH
11218: CALL_OW 300
11222: IFFALSE 11232
// h = true ;
11224: LD_ADDR_VAR 0 4
11228: PUSH
11229: LD_INT 1
11231: ST_TO_ADDR
11232: GO 11210
11234: POP
11235: POP
// Result := h ;
11236: LD_ADDR_VAR 0 2
11240: PUSH
11241: LD_VAR 0 4
11245: ST_TO_ADDR
// end ; end ;
11246: GO 11249
11248: POP
// end ;
11249: LD_VAR 0 2
11253: RET
// function AlliedSides ( i , j ) ; begin
11254: LD_INT 0
11256: PPUSH
// Result := false ;
11257: LD_ADDR_VAR 0 3
11261: PUSH
11262: LD_INT 0
11264: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
11265: LD_VAR 0 1
11269: PPUSH
11270: LD_VAR 0 2
11274: PPUSH
11275: CALL_OW 81
11279: PUSH
11280: LD_INT 1
11282: EQUAL
11283: PUSH
11284: LD_VAR 0 2
11288: PPUSH
11289: LD_VAR 0 1
11293: PPUSH
11294: CALL_OW 81
11298: PUSH
11299: LD_INT 1
11301: EQUAL
11302: AND
11303: PUSH
11304: LD_VAR 0 1
11308: PPUSH
11309: CALL_OW 83
11313: AND
11314: PUSH
11315: LD_VAR 0 2
11319: PPUSH
11320: CALL_OW 83
11324: AND
11325: IFFALSE 11335
// Result := true ;
11327: LD_ADDR_VAR 0 3
11331: PUSH
11332: LD_INT 1
11334: ST_TO_ADDR
// end ;
11335: LD_VAR 0 3
11339: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
11340: CALL 10844 0 0
11344: PUSH
11345: LD_LOC 35
11349: NOT
11350: AND
11351: IFFALSE 11367
11353: GO 11355
11355: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
11356: LD_ADDR_EXP 47
11360: PUSH
11361: LD_STRING #Player-Ended
11363: PUSH
11364: EMPTY
11365: LIST
11366: ST_TO_ADDR
11367: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
11368: CALL 10844 0 0
11372: PUSH
11373: LD_LOC 35
11377: AND
11378: IFFALSE 11387
11380: GO 11382
11382: DISABLE
// YouLostInMultiplayer ;
11383: CALL_OW 107
11387: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
11388: CALL 10844 0 0
11392: NOT
11393: PUSH
11394: CALL_OW 531
11398: NOT
11399: AND
11400: IFFALSE 11416
11402: GO 11404
11404: DISABLE
// WaitServerStrings = [ #server-wait ] ;
11405: LD_ADDR_EXP 47
11409: PUSH
11410: LD_STRING #server-wait
11412: PUSH
11413: EMPTY
11414: LIST
11415: ST_TO_ADDR
11416: END
// every 100 trigger IAmSpec do
11417: CALL_OW 531
11421: IFFALSE 11437
11423: GO 11425
11425: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
11426: LD_ADDR_EXP 47
11430: PUSH
11431: LD_STRING #Player-IAmSpec
11433: PUSH
11434: EMPTY
11435: LIST
11436: ST_TO_ADDR
11437: END
// every 100 trigger GameEnded and IAmSpec do
11438: LD_LOC 35
11442: PUSH
11443: CALL_OW 531
11447: AND
11448: IFFALSE 11457
11450: GO 11452
11452: DISABLE
// YouLostInMultiplayer ;
11453: CALL_OW 107
11457: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
11458: CALL 10844 0 0
11462: PUSH
11463: LD_LOC 35
11467: NOT
11468: AND
11469: IFFALSE 11485
11471: GO 11473
11473: DISABLE
// WaitServerStrings = [ $player-win ] ;
11474: LD_ADDR_EXP 47
11478: PUSH
11479: LD_STRING $player-win
11481: PUSH
11482: EMPTY
11483: LIST
11484: ST_TO_ADDR
11485: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
11486: CALL 10844 0 0
11490: PUSH
11491: LD_LOC 35
11495: AND
11496: IFFALSE 11520
11498: GO 11500
11500: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
11501: LD_EXP 21
11505: PUSH
11506: LD_OWVAR 2
11510: ARRAY
11511: PPUSH
11512: CALL 10522 0 1
// YouWinInMultiplayer ;
11516: CALL_OW 106
// end ;
11520: END
// every 100 trigger isEditor marked 401 do
11521: LD_OWVAR 84
11525: IFFALSE 11541
11527: GO 11529
11529: DISABLE
// Debug_Strings = [ You won ] ;
11530: LD_ADDR_OWVAR 48
11534: PUSH
11535: LD_STRING You won
11537: PUSH
11538: EMPTY
11539: LIST
11540: ST_TO_ADDR
11541: END
// every 100 trigger isEditor marked 400 do
11542: LD_OWVAR 84
11546: IFFALSE 11562
11548: GO 11550
11550: DISABLE
// Debug_Strings = [ You loss ] ;
11551: LD_ADDR_OWVAR 48
11555: PUSH
11556: LD_STRING You loss
11558: PUSH
11559: EMPTY
11560: LIST
11561: ST_TO_ADDR
11562: END
// every 100 marked 98 do var i , un ;
11563: GO 11565
11565: DISABLE
11566: LD_INT 0
11568: PPUSH
11569: PPUSH
// begin for i = 1 to side_positions do
11570: LD_ADDR_VAR 0 1
11574: PUSH
11575: DOUBLE
11576: LD_INT 1
11578: DEC
11579: ST_TO_ADDR
11580: LD_EXP 20
11584: PUSH
11585: FOR_TO
11586: IFFALSE 11709
// if side_positions [ i ] then
11588: LD_EXP 20
11592: PUSH
11593: LD_VAR 0 1
11597: ARRAY
11598: IFFALSE 11707
// if not HasPower ( i ) and not Defaited [ i ] then
11600: LD_VAR 0 1
11604: PPUSH
11605: CALL 10908 0 1
11609: NOT
11610: PUSH
11611: LD_LOC 34
11615: PUSH
11616: LD_VAR 0 1
11620: ARRAY
11621: NOT
11622: AND
11623: IFFALSE 11707
// begin un = filterallunits ( [ f_side , i ] ) ;
11625: LD_ADDR_VAR 0 2
11629: PUSH
11630: LD_INT 22
11632: PUSH
11633: LD_VAR 0 1
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: PPUSH
11642: CALL_OW 69
11646: ST_TO_ADDR
// if un then
11647: LD_VAR 0 2
11651: IFFALSE 11665
// SetSide ( un , 0 ) ;
11653: LD_VAR 0 2
11657: PPUSH
11658: LD_INT 0
11660: PPUSH
11661: CALL_OW 235
// Defaited = replace ( Defaited , i , true ) ;
11665: LD_ADDR_LOC 34
11669: PUSH
11670: LD_LOC 34
11674: PPUSH
11675: LD_VAR 0 1
11679: PPUSH
11680: LD_INT 1
11682: PPUSH
11683: CALL_OW 1
11687: ST_TO_ADDR
// if i = your_side then
11688: LD_VAR 0 1
11692: PUSH
11693: LD_OWVAR 2
11697: EQUAL
11698: IFFALSE 11707
// begin Multiplayer_Loose_Message ;
11700: CALL_OW 521
// enable ( 400 ) ;
11704: LD_INT 400
11706: ENABLE_MARKED
// end ; end ;
11707: GO 11585
11709: POP
11710: POP
// if not Unfoged and defaited [ your_side ] then
11711: LD_LOC 36
11715: NOT
11716: PUSH
11717: LD_LOC 34
11721: PUSH
11722: LD_OWVAR 2
11726: ARRAY
11727: AND
11728: IFFALSE 11734
// Unfog ;
11730: CALL 11920 0 0
// DidGameEnd ;
11734: CALL 11749 0 0
// if not GameEnded then
11738: LD_LOC 35
11742: NOT
11743: IFFALSE 11746
// enable ;
11745: ENABLE
// end ;
11746: PPOPN 2
11748: END
// function DidGameEnd ; var i , k , enemy ; begin
11749: LD_INT 0
11751: PPUSH
11752: PPUSH
11753: PPUSH
11754: PPUSH
// enemy = [ ] ;
11755: LD_ADDR_VAR 0 4
11759: PUSH
11760: EMPTY
11761: ST_TO_ADDR
// for i = 1 to side_positions do
11762: LD_ADDR_VAR 0 2
11766: PUSH
11767: DOUBLE
11768: LD_INT 1
11770: DEC
11771: ST_TO_ADDR
11772: LD_EXP 20
11776: PUSH
11777: FOR_TO
11778: IFFALSE 11882
// if not defaited [ i ] then
11780: LD_LOC 34
11784: PUSH
11785: LD_VAR 0 2
11789: ARRAY
11790: NOT
11791: IFFALSE 11880
// for k = 1 to side_positions do
11793: LD_ADDR_VAR 0 3
11797: PUSH
11798: DOUBLE
11799: LD_INT 1
11801: DEC
11802: ST_TO_ADDR
11803: LD_EXP 20
11807: PUSH
11808: FOR_TO
11809: IFFALSE 11878
// if not defaited [ k ] then
11811: LD_LOC 34
11815: PUSH
11816: LD_VAR 0 3
11820: ARRAY
11821: NOT
11822: IFFALSE 11876
// if GetAttitude ( i , k ) in [ att_enemy , att_neutral ] then
11824: LD_VAR 0 2
11828: PPUSH
11829: LD_VAR 0 3
11833: PPUSH
11834: CALL_OW 81
11838: PUSH
11839: LD_INT 2
11841: PUSH
11842: LD_INT 0
11844: PUSH
11845: EMPTY
11846: LIST
11847: LIST
11848: IN
11849: IFFALSE 11876
// enemy = enemy ^ [ i , k ] ;
11851: LD_ADDR_VAR 0 4
11855: PUSH
11856: LD_VAR 0 4
11860: PUSH
11861: LD_VAR 0 2
11865: PUSH
11866: LD_VAR 0 3
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: ADD
11875: ST_TO_ADDR
11876: GO 11808
11878: POP
11879: POP
11880: GO 11777
11882: POP
11883: POP
// if not enemy then
11884: LD_VAR 0 4
11888: NOT
11889: IFFALSE 11915
// begin GameEnded = true ;
11891: LD_ADDR_LOC 35
11895: PUSH
11896: LD_INT 1
11898: ST_TO_ADDR
// if not defaited [ your_side ] then
11899: LD_LOC 34
11903: PUSH
11904: LD_OWVAR 2
11908: ARRAY
11909: NOT
11910: IFFALSE 11915
// enable ( 401 ) ;
11912: LD_INT 401
11914: ENABLE_MARKED
// end ; end ;
11915: LD_VAR 0 1
11919: RET
// function unfog ; var k , friends ; begin
11920: LD_INT 0
11922: PPUSH
11923: PPUSH
11924: PPUSH
// for k = 1 to side_positions do
11925: LD_ADDR_VAR 0 2
11929: PUSH
11930: DOUBLE
11931: LD_INT 1
11933: DEC
11934: ST_TO_ADDR
11935: LD_EXP 20
11939: PUSH
11940: FOR_TO
11941: IFFALSE 11997
// if not defaited [ k ] then
11943: LD_LOC 34
11947: PUSH
11948: LD_VAR 0 2
11952: ARRAY
11953: NOT
11954: IFFALSE 11995
// if GetAttitude ( your_side , k ) in [ att_friend ] then
11956: LD_OWVAR 2
11960: PPUSH
11961: LD_VAR 0 2
11965: PPUSH
11966: CALL_OW 81
11970: PUSH
11971: LD_INT 1
11973: PUSH
11974: EMPTY
11975: LIST
11976: IN
11977: IFFALSE 11995
// friends = friends ^ k ;
11979: LD_ADDR_VAR 0 3
11983: PUSH
11984: LD_VAR 0 3
11988: PUSH
11989: LD_VAR 0 2
11993: ADD
11994: ST_TO_ADDR
11995: GO 11940
11997: POP
11998: POP
// if not friends then
11999: LD_VAR 0 3
12003: NOT
12004: IFFALSE 12021
// begin fogoff ( true ) ;
12006: LD_INT 1
12008: PPUSH
12009: CALL_OW 344
// unfoged = true ;
12013: LD_ADDR_LOC 36
12017: PUSH
12018: LD_INT 1
12020: ST_TO_ADDR
// end ; end ;
12021: LD_VAR 0 1
12025: RET
// export function MakeGameEnd ; begin
12026: LD_INT 0
12028: PPUSH
// fogoff ( true ) ;
12029: LD_INT 1
12031: PPUSH
12032: CALL_OW 344
// unfoged = true ;
12036: LD_ADDR_LOC 36
12040: PUSH
12041: LD_INT 1
12043: ST_TO_ADDR
// wait ( 0 0$5 ) ;
12044: LD_INT 175
12046: PPUSH
12047: CALL_OW 67
// GameEnded = true ;
12051: LD_ADDR_LOC 35
12055: PUSH
12056: LD_INT 1
12058: ST_TO_ADDR
// end ;
12059: LD_VAR 0 1
12063: RET
// export function GetGameEnded ; begin
12064: LD_INT 0
12066: PPUSH
// result = GameEnded ;
12067: LD_ADDR_VAR 0 1
12071: PUSH
12072: LD_LOC 35
12076: ST_TO_ADDR
// end ; end_of_file
12077: LD_VAR 0 1
12081: RET
// export BuildUpAreas , BuildUp ; export function BeginBuildUp ; var i , j ; begin
12082: LD_INT 0
12084: PPUSH
12085: PPUSH
12086: PPUSH
// enable ( 600 ) ;
12087: LD_INT 600
12089: ENABLE_MARKED
// BuildUp = true ;
12090: LD_ADDR_EXP 49
12094: PUSH
12095: LD_INT 1
12097: ST_TO_ADDR
// for i := 1 to BuildUpAreas do
12098: LD_ADDR_VAR 0 2
12102: PUSH
12103: DOUBLE
12104: LD_INT 1
12106: DEC
12107: ST_TO_ADDR
12108: LD_EXP 48
12112: PUSH
12113: FOR_TO
12114: IFFALSE 12269
// if Position_Sides [ i ] then
12116: LD_EXP 23
12120: PUSH
12121: LD_VAR 0 2
12125: ARRAY
12126: IFFALSE 12267
// for j := 1 to 8 do
12128: LD_ADDR_VAR 0 3
12132: PUSH
12133: DOUBLE
12134: LD_INT 1
12136: DEC
12137: ST_TO_ADDR
12138: LD_INT 8
12140: PUSH
12141: FOR_TO
12142: IFFALSE 12265
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
12144: LD_EXP 20
12148: PUSH
12149: LD_VAR 0 3
12153: ARRAY
12154: PUSH
12155: LD_EXP 17
12159: PUSH
12160: LD_EXP 23
12164: PUSH
12165: LD_VAR 0 2
12169: ARRAY
12170: ARRAY
12171: PUSH
12172: LD_EXP 17
12176: PUSH
12177: LD_VAR 0 3
12181: ARRAY
12182: NONEQUAL
12183: PUSH
12184: LD_EXP 22
12188: NOT
12189: PUSH
12190: LD_EXP 23
12194: PUSH
12195: LD_VAR 0 2
12199: ARRAY
12200: PUSH
12201: LD_VAR 0 3
12205: NONEQUAL
12206: AND
12207: OR
12208: AND
12209: IFFALSE 12233
// HideArea ( j , BuildUpAreas [ i ] ) else
12211: LD_VAR 0 3
12215: PPUSH
12216: LD_EXP 48
12220: PUSH
12221: LD_VAR 0 2
12225: ARRAY
12226: PPUSH
12227: CALL_OW 333
12231: GO 12263
// if ( j = your_side ) then
12233: LD_VAR 0 3
12237: PUSH
12238: LD_OWVAR 2
12242: EQUAL
12243: IFFALSE 12263
// SetAreaMapShow ( BuildUpAreas [ i ] , 3 ) ;
12245: LD_EXP 48
12249: PUSH
12250: LD_VAR 0 2
12254: ARRAY
12255: PPUSH
12256: LD_INT 3
12258: PPUSH
12259: CALL_OW 424
12263: GO 12141
12265: POP
12266: POP
12267: GO 12113
12269: POP
12270: POP
// end ;
12271: LD_VAR 0 1
12275: RET
// export function EndBuildUp ; var i , j ; begin
12276: LD_INT 0
12278: PPUSH
12279: PPUSH
12280: PPUSH
// disable ( 600 ) ;
12281: LD_INT 600
12283: DISABLE_MARKED
// BuildUp = false ;
12284: LD_ADDR_EXP 49
12288: PUSH
12289: LD_INT 0
12291: ST_TO_ADDR
// for i := 1 to BuildUpAreas do
12292: LD_ADDR_VAR 0 2
12296: PUSH
12297: DOUBLE
12298: LD_INT 1
12300: DEC
12301: ST_TO_ADDR
12302: LD_EXP 48
12306: PUSH
12307: FOR_TO
12308: IFFALSE 12463
// if Position_Sides [ i ] then
12310: LD_EXP 23
12314: PUSH
12315: LD_VAR 0 2
12319: ARRAY
12320: IFFALSE 12461
// for j := 1 to 8 do
12322: LD_ADDR_VAR 0 3
12326: PUSH
12327: DOUBLE
12328: LD_INT 1
12330: DEC
12331: ST_TO_ADDR
12332: LD_INT 8
12334: PUSH
12335: FOR_TO
12336: IFFALSE 12459
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
12338: LD_EXP 20
12342: PUSH
12343: LD_VAR 0 3
12347: ARRAY
12348: PUSH
12349: LD_EXP 17
12353: PUSH
12354: LD_EXP 23
12358: PUSH
12359: LD_VAR 0 2
12363: ARRAY
12364: ARRAY
12365: PUSH
12366: LD_EXP 17
12370: PUSH
12371: LD_VAR 0 3
12375: ARRAY
12376: NONEQUAL
12377: PUSH
12378: LD_EXP 22
12382: NOT
12383: PUSH
12384: LD_EXP 23
12388: PUSH
12389: LD_VAR 0 2
12393: ARRAY
12394: PUSH
12395: LD_VAR 0 3
12399: NONEQUAL
12400: AND
12401: OR
12402: AND
12403: IFFALSE 12427
// ShowArea ( j , BuildUpAreas [ i ] ) else
12405: LD_VAR 0 3
12409: PPUSH
12410: LD_EXP 48
12414: PUSH
12415: LD_VAR 0 2
12419: ARRAY
12420: PPUSH
12421: CALL_OW 334
12425: GO 12457
// if ( j = your_side ) then
12427: LD_VAR 0 3
12431: PUSH
12432: LD_OWVAR 2
12436: EQUAL
12437: IFFALSE 12457
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
12439: LD_EXP 48
12443: PUSH
12444: LD_VAR 0 2
12448: ARRAY
12449: PPUSH
12450: LD_INT 0
12452: PPUSH
12453: CALL_OW 424
12457: GO 12335
12459: POP
12460: POP
12461: GO 12307
12463: POP
12464: POP
// end ;
12465: LD_VAR 0 1
12469: RET
// every 1 marked 600 do var i , un ;
12470: GO 12472
12472: DISABLE
12473: LD_INT 0
12475: PPUSH
12476: PPUSH
// begin for i := 1 to BuildUpAreas do
12477: LD_ADDR_VAR 0 1
12481: PUSH
12482: DOUBLE
12483: LD_INT 1
12485: DEC
12486: ST_TO_ADDR
12487: LD_EXP 48
12491: PUSH
12492: FOR_TO
12493: IFFALSE 12663
// if Position_Sides [ i ] then
12495: LD_EXP 23
12499: PUSH
12500: LD_VAR 0 1
12504: ARRAY
12505: IFFALSE 12661
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_not , [ f_side , 0 ] ] ] ) do
12507: LD_ADDR_VAR 0 2
12511: PUSH
12512: LD_EXP 48
12516: PUSH
12517: LD_VAR 0 1
12521: ARRAY
12522: PPUSH
12523: LD_INT 2
12525: PUSH
12526: LD_INT 21
12528: PUSH
12529: LD_INT 1
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: LD_INT 21
12538: PUSH
12539: LD_INT 2
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: PUSH
12551: LD_INT 3
12553: PUSH
12554: LD_INT 22
12556: PUSH
12557: LD_INT 0
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: PPUSH
12572: CALL_OW 70
12576: PUSH
12577: FOR_IN
12578: IFFALSE 12659
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ GetSide ( un ) ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> GetSide ( un ) ) ) then
12580: LD_EXP 17
12584: PUSH
12585: LD_EXP 23
12589: PUSH
12590: LD_VAR 0 1
12594: ARRAY
12595: ARRAY
12596: PUSH
12597: LD_EXP 17
12601: PUSH
12602: LD_VAR 0 2
12606: PPUSH
12607: CALL_OW 255
12611: ARRAY
12612: NONEQUAL
12613: PUSH
12614: LD_EXP 22
12618: NOT
12619: PUSH
12620: LD_EXP 23
12624: PUSH
12625: LD_VAR 0 1
12629: ARRAY
12630: PUSH
12631: LD_VAR 0 2
12635: PPUSH
12636: CALL_OW 255
12640: NONEQUAL
12641: AND
12642: OR
12643: IFFALSE 12657
// ComMoveToArea ( un , BuildUpEscape ) ;
12645: LD_VAR 0 2
12649: PPUSH
12650: LD_INT 14
12652: PPUSH
12653: CALL_OW 113
12657: GO 12577
12659: POP
12660: POP
12661: GO 12492
12663: POP
12664: POP
// if BuildUp then
12665: LD_EXP 49
12669: IFFALSE 12672
// enable ;
12671: ENABLE
// end ;
12672: PPOPN 2
12674: END
// every 1 do
12675: GO 12677
12677: DISABLE
// if ( def_builduptime > 0 ) then
12678: LD_EXP 44
12682: PUSH
12683: LD_INT 0
12685: GREATER
12686: IFFALSE 12707
// begin if buildUpTime_Delay then
12688: LD_EXP 16
12692: IFFALSE 12703
// wait ( buildUpTime_Delay ) ;
12694: LD_EXP 16
12698: PPUSH
12699: CALL_OW 67
// EndBuildUp ;
12703: CALL 12276 0 0
// end ; end_of_file
12707: END
// export function SetMpTechs ( ) ; var side , i ; begin
12708: LD_INT 0
12710: PPUSH
12711: PPUSH
12712: PPUSH
// for side = 1 to 8 do
12713: LD_ADDR_VAR 0 2
12717: PUSH
12718: DOUBLE
12719: LD_INT 1
12721: DEC
12722: ST_TO_ADDR
12723: LD_INT 8
12725: PUSH
12726: FOR_TO
12727: IFFALSE 12848
// begin for i = 1 to 72 do
12729: LD_ADDR_VAR 0 3
12733: PUSH
12734: DOUBLE
12735: LD_INT 1
12737: DEC
12738: ST_TO_ADDR
12739: LD_INT 72
12741: PUSH
12742: FOR_TO
12743: IFFALSE 12774
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
12745: LD_VAR 0 3
12749: PPUSH
12750: LD_VAR 0 2
12754: PPUSH
12755: LD_INT 0
12757: PPUSH
12758: LD_VAR 0 3
12762: PPUSH
12763: CALL_OW 565
12767: PPUSH
12768: CALL_OW 322
12772: GO 12742
12774: POP
12775: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
12776: LD_INT 73
12778: PPUSH
12779: LD_VAR 0 2
12783: PPUSH
12784: LD_INT 0
12786: PPUSH
12787: LD_INT 25
12789: PPUSH
12790: CALL_OW 565
12794: PPUSH
12795: CALL_OW 322
// for i = 0 to 40 do
12799: LD_ADDR_VAR 0 3
12803: PUSH
12804: DOUBLE
12805: LD_INT 0
12807: DEC
12808: ST_TO_ADDR
12809: LD_INT 40
12811: PUSH
12812: FOR_TO
12813: IFFALSE 12844
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
12815: LD_VAR 0 3
12819: PPUSH
12820: LD_VAR 0 2
12824: PPUSH
12825: LD_INT 1
12827: PPUSH
12828: LD_VAR 0 3
12832: PPUSH
12833: CALL_OW 565
12837: PPUSH
12838: CALL_OW 324
12842: GO 12812
12844: POP
12845: POP
// end ;
12846: GO 12726
12848: POP
12849: POP
// end ;
12850: LD_VAR 0 1
12854: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
12855: LD_INT 0
12857: PPUSH
12858: PPUSH
12859: PPUSH
// for side = 1 to 8 do
12860: LD_ADDR_VAR 0 3
12864: PUSH
12865: DOUBLE
12866: LD_INT 1
12868: DEC
12869: ST_TO_ADDR
12870: LD_INT 8
12872: PUSH
12873: FOR_TO
12874: IFFALSE 16870
// begin for i = 1 to 73 do
12876: LD_ADDR_VAR 0 4
12880: PUSH
12881: DOUBLE
12882: LD_INT 1
12884: DEC
12885: ST_TO_ADDR
12886: LD_INT 73
12888: PUSH
12889: FOR_TO
12890: IFFALSE 12911
// SetTech ( i , side , state_disabled ) ;
12892: LD_VAR 0 4
12896: PPUSH
12897: LD_VAR 0 3
12901: PPUSH
12902: LD_INT 0
12904: PPUSH
12905: CALL_OW 322
12909: GO 12889
12911: POP
12912: POP
// for i = 0 to 40 do
12913: LD_ADDR_VAR 0 4
12917: PUSH
12918: DOUBLE
12919: LD_INT 0
12921: DEC
12922: ST_TO_ADDR
12923: LD_INT 40
12925: PUSH
12926: FOR_TO
12927: IFFALSE 12948
// SetRestrict ( i , side , false ) ;
12929: LD_VAR 0 4
12933: PPUSH
12934: LD_VAR 0 3
12938: PPUSH
12939: LD_INT 0
12941: PPUSH
12942: CALL_OW 324
12946: GO 12926
12948: POP
12949: POP
// case level of 1 :
12950: LD_VAR 0 1
12954: PUSH
12955: LD_INT 1
12957: DOUBLE
12958: EQUAL
12959: IFTRUE 12963
12961: GO 13116
12963: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12964: LD_INT 35
12966: PPUSH
12967: LD_VAR 0 3
12971: PPUSH
12972: LD_INT 1
12974: PPUSH
12975: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12979: LD_INT 45
12981: PPUSH
12982: LD_VAR 0 3
12986: PPUSH
12987: LD_INT 1
12989: PPUSH
12990: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12994: LD_INT 46
12996: PPUSH
12997: LD_VAR 0 3
13001: PPUSH
13002: LD_INT 1
13004: PPUSH
13005: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13009: LD_INT 47
13011: PPUSH
13012: LD_VAR 0 3
13016: PPUSH
13017: LD_INT 1
13019: PPUSH
13020: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13024: LD_INT 0
13026: PPUSH
13027: LD_VAR 0 3
13031: PPUSH
13032: LD_INT 1
13034: PPUSH
13035: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13039: LD_INT 2
13041: PPUSH
13042: LD_VAR 0 3
13046: PPUSH
13047: LD_INT 1
13049: PPUSH
13050: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13054: LD_INT 4
13056: PPUSH
13057: LD_VAR 0 3
13061: PPUSH
13062: LD_INT 1
13064: PPUSH
13065: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13069: LD_INT 6
13071: PPUSH
13072: LD_VAR 0 3
13076: PPUSH
13077: LD_INT 1
13079: PPUSH
13080: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13084: LD_INT 29
13086: PPUSH
13087: LD_VAR 0 3
13091: PPUSH
13092: LD_INT 1
13094: PPUSH
13095: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13099: LD_INT 31
13101: PPUSH
13102: LD_VAR 0 3
13106: PPUSH
13107: LD_INT 1
13109: PPUSH
13110: CALL_OW 324
// end ; 2 :
13114: GO 16868
13116: LD_INT 2
13118: DOUBLE
13119: EQUAL
13120: IFTRUE 13124
13122: GO 13322
13124: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13125: LD_INT 35
13127: PPUSH
13128: LD_VAR 0 3
13132: PPUSH
13133: LD_INT 1
13135: PPUSH
13136: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13140: LD_INT 45
13142: PPUSH
13143: LD_VAR 0 3
13147: PPUSH
13148: LD_INT 1
13150: PPUSH
13151: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13155: LD_INT 46
13157: PPUSH
13158: LD_VAR 0 3
13162: PPUSH
13163: LD_INT 1
13165: PPUSH
13166: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13170: LD_INT 47
13172: PPUSH
13173: LD_VAR 0 3
13177: PPUSH
13178: LD_INT 1
13180: PPUSH
13181: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13185: LD_INT 1
13187: PPUSH
13188: LD_VAR 0 3
13192: PPUSH
13193: LD_INT 1
13195: PPUSH
13196: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13200: LD_INT 2
13202: PPUSH
13203: LD_VAR 0 3
13207: PPUSH
13208: LD_INT 1
13210: PPUSH
13211: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13215: LD_INT 11
13217: PPUSH
13218: LD_VAR 0 3
13222: PPUSH
13223: LD_INT 1
13225: PPUSH
13226: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13230: LD_INT 0
13232: PPUSH
13233: LD_VAR 0 3
13237: PPUSH
13238: LD_INT 1
13240: PPUSH
13241: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13245: LD_INT 2
13247: PPUSH
13248: LD_VAR 0 3
13252: PPUSH
13253: LD_INT 1
13255: PPUSH
13256: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13260: LD_INT 4
13262: PPUSH
13263: LD_VAR 0 3
13267: PPUSH
13268: LD_INT 1
13270: PPUSH
13271: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13275: LD_INT 6
13277: PPUSH
13278: LD_VAR 0 3
13282: PPUSH
13283: LD_INT 1
13285: PPUSH
13286: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13290: LD_INT 29
13292: PPUSH
13293: LD_VAR 0 3
13297: PPUSH
13298: LD_INT 1
13300: PPUSH
13301: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13305: LD_INT 31
13307: PPUSH
13308: LD_VAR 0 3
13312: PPUSH
13313: LD_INT 1
13315: PPUSH
13316: CALL_OW 324
// end ; 3 :
13320: GO 16868
13322: LD_INT 3
13324: DOUBLE
13325: EQUAL
13326: IFTRUE 13330
13328: GO 13783
13330: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13331: LD_INT 35
13333: PPUSH
13334: LD_VAR 0 3
13338: PPUSH
13339: LD_INT 1
13341: PPUSH
13342: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13346: LD_INT 45
13348: PPUSH
13349: LD_VAR 0 3
13353: PPUSH
13354: LD_INT 1
13356: PPUSH
13357: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13361: LD_INT 46
13363: PPUSH
13364: LD_VAR 0 3
13368: PPUSH
13369: LD_INT 1
13371: PPUSH
13372: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13376: LD_INT 47
13378: PPUSH
13379: LD_VAR 0 3
13383: PPUSH
13384: LD_INT 1
13386: PPUSH
13387: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13391: LD_INT 1
13393: PPUSH
13394: LD_VAR 0 3
13398: PPUSH
13399: LD_INT 1
13401: PPUSH
13402: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13406: LD_INT 2
13408: PPUSH
13409: LD_VAR 0 3
13413: PPUSH
13414: LD_INT 1
13416: PPUSH
13417: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13421: LD_INT 11
13423: PPUSH
13424: LD_VAR 0 3
13428: PPUSH
13429: LD_INT 1
13431: PPUSH
13432: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13436: LD_INT 48
13438: PPUSH
13439: LD_VAR 0 3
13443: PPUSH
13444: LD_INT 1
13446: PPUSH
13447: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13451: LD_INT 69
13453: PPUSH
13454: LD_VAR 0 3
13458: PPUSH
13459: LD_INT 1
13461: PPUSH
13462: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13466: LD_INT 39
13468: PPUSH
13469: LD_VAR 0 3
13473: PPUSH
13474: LD_INT 1
13476: PPUSH
13477: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13481: LD_INT 43
13483: PPUSH
13484: LD_VAR 0 3
13488: PPUSH
13489: LD_INT 1
13491: PPUSH
13492: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13496: LD_INT 51
13498: PPUSH
13499: LD_VAR 0 3
13503: PPUSH
13504: LD_INT 1
13506: PPUSH
13507: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13511: LD_INT 6
13513: PPUSH
13514: LD_VAR 0 3
13518: PPUSH
13519: LD_INT 1
13521: PPUSH
13522: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13526: LD_INT 0
13528: PPUSH
13529: LD_VAR 0 3
13533: PPUSH
13534: LD_INT 1
13536: PPUSH
13537: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13541: LD_INT 2
13543: PPUSH
13544: LD_VAR 0 3
13548: PPUSH
13549: LD_INT 1
13551: PPUSH
13552: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
13556: LD_INT 3
13558: PPUSH
13559: LD_VAR 0 3
13563: PPUSH
13564: LD_INT 1
13566: PPUSH
13567: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13571: LD_INT 4
13573: PPUSH
13574: LD_VAR 0 3
13578: PPUSH
13579: LD_INT 1
13581: PPUSH
13582: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13586: LD_INT 6
13588: PPUSH
13589: LD_VAR 0 3
13593: PPUSH
13594: LD_INT 1
13596: PPUSH
13597: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13601: LD_INT 7
13603: PPUSH
13604: LD_VAR 0 3
13608: PPUSH
13609: LD_INT 1
13611: PPUSH
13612: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13616: LD_INT 8
13618: PPUSH
13619: LD_VAR 0 3
13623: PPUSH
13624: LD_INT 1
13626: PPUSH
13627: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13631: LD_INT 10
13633: PPUSH
13634: LD_VAR 0 3
13638: PPUSH
13639: LD_INT 1
13641: PPUSH
13642: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13646: LD_INT 15
13648: PPUSH
13649: LD_VAR 0 3
13653: PPUSH
13654: LD_INT 1
13656: PPUSH
13657: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13661: LD_INT 16
13663: PPUSH
13664: LD_VAR 0 3
13668: PPUSH
13669: LD_INT 1
13671: PPUSH
13672: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13676: LD_INT 17
13678: PPUSH
13679: LD_VAR 0 3
13683: PPUSH
13684: LD_INT 1
13686: PPUSH
13687: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13691: LD_INT 20
13693: PPUSH
13694: LD_VAR 0 3
13698: PPUSH
13699: LD_INT 1
13701: PPUSH
13702: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13706: LD_INT 26
13708: PPUSH
13709: LD_VAR 0 3
13713: PPUSH
13714: LD_INT 1
13716: PPUSH
13717: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13721: LD_INT 27
13723: PPUSH
13724: LD_VAR 0 3
13728: PPUSH
13729: LD_INT 1
13731: PPUSH
13732: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13736: LD_INT 29
13738: PPUSH
13739: LD_VAR 0 3
13743: PPUSH
13744: LD_INT 1
13746: PPUSH
13747: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13751: LD_INT 31
13753: PPUSH
13754: LD_VAR 0 3
13758: PPUSH
13759: LD_INT 1
13761: PPUSH
13762: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13766: LD_INT 32
13768: PPUSH
13769: LD_VAR 0 3
13773: PPUSH
13774: LD_INT 1
13776: PPUSH
13777: CALL_OW 324
// end ; 4 :
13781: GO 16868
13783: LD_INT 4
13785: DOUBLE
13786: EQUAL
13787: IFTRUE 13791
13789: GO 14739
13791: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13792: LD_INT 35
13794: PPUSH
13795: LD_VAR 0 3
13799: PPUSH
13800: LD_INT 1
13802: PPUSH
13803: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13807: LD_INT 45
13809: PPUSH
13810: LD_VAR 0 3
13814: PPUSH
13815: LD_INT 1
13817: PPUSH
13818: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13822: LD_INT 46
13824: PPUSH
13825: LD_VAR 0 3
13829: PPUSH
13830: LD_INT 1
13832: PPUSH
13833: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13837: LD_INT 47
13839: PPUSH
13840: LD_VAR 0 3
13844: PPUSH
13845: LD_INT 1
13847: PPUSH
13848: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13852: LD_INT 1
13854: PPUSH
13855: LD_VAR 0 3
13859: PPUSH
13860: LD_INT 1
13862: PPUSH
13863: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13867: LD_INT 2
13869: PPUSH
13870: LD_VAR 0 3
13874: PPUSH
13875: LD_INT 1
13877: PPUSH
13878: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13882: LD_INT 11
13884: PPUSH
13885: LD_VAR 0 3
13889: PPUSH
13890: LD_INT 1
13892: PPUSH
13893: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13897: LD_INT 20
13899: PPUSH
13900: LD_VAR 0 3
13904: PPUSH
13905: LD_INT 1
13907: PPUSH
13908: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13912: LD_INT 48
13914: PPUSH
13915: LD_VAR 0 3
13919: PPUSH
13920: LD_INT 1
13922: PPUSH
13923: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13927: LD_INT 49
13929: PPUSH
13930: LD_VAR 0 3
13934: PPUSH
13935: LD_INT 1
13937: PPUSH
13938: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13942: LD_INT 69
13944: PPUSH
13945: LD_VAR 0 3
13949: PPUSH
13950: LD_INT 1
13952: PPUSH
13953: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13957: LD_INT 39
13959: PPUSH
13960: LD_VAR 0 3
13964: PPUSH
13965: LD_INT 1
13967: PPUSH
13968: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13972: LD_INT 34
13974: PPUSH
13975: LD_VAR 0 3
13979: PPUSH
13980: LD_INT 1
13982: PPUSH
13983: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13987: LD_INT 42
13989: PPUSH
13990: LD_VAR 0 3
13994: PPUSH
13995: LD_INT 1
13997: PPUSH
13998: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
14002: LD_INT 44
14004: PPUSH
14005: LD_VAR 0 3
14009: PPUSH
14010: LD_INT 1
14012: PPUSH
14013: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
14017: LD_INT 41
14019: PPUSH
14020: LD_VAR 0 3
14024: PPUSH
14025: LD_INT 1
14027: PPUSH
14028: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14032: LD_INT 43
14034: PPUSH
14035: LD_VAR 0 3
14039: PPUSH
14040: LD_INT 1
14042: PPUSH
14043: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
14047: LD_INT 70
14049: PPUSH
14050: LD_VAR 0 3
14054: PPUSH
14055: LD_INT 1
14057: PPUSH
14058: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14062: LD_INT 51
14064: PPUSH
14065: LD_VAR 0 3
14069: PPUSH
14070: LD_INT 1
14072: PPUSH
14073: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
14077: LD_INT 52
14079: PPUSH
14080: LD_VAR 0 3
14084: PPUSH
14085: LD_INT 1
14087: PPUSH
14088: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14092: LD_INT 6
14094: PPUSH
14095: LD_VAR 0 3
14099: PPUSH
14100: LD_INT 1
14102: PPUSH
14103: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
14107: LD_INT 15
14109: PPUSH
14110: LD_VAR 0 3
14114: PPUSH
14115: LD_INT 1
14117: PPUSH
14118: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
14122: LD_INT 7
14124: PPUSH
14125: LD_VAR 0 3
14129: PPUSH
14130: LD_INT 1
14132: PPUSH
14133: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
14137: LD_INT 12
14139: PPUSH
14140: LD_VAR 0 3
14144: PPUSH
14145: LD_INT 1
14147: PPUSH
14148: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
14152: LD_INT 18
14154: PPUSH
14155: LD_VAR 0 3
14159: PPUSH
14160: LD_INT 1
14162: PPUSH
14163: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
14167: LD_INT 60
14169: PPUSH
14170: LD_VAR 0 3
14174: PPUSH
14175: LD_INT 1
14177: PPUSH
14178: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
14182: LD_INT 9
14184: PPUSH
14185: LD_VAR 0 3
14189: PPUSH
14190: LD_INT 1
14192: PPUSH
14193: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
14197: LD_INT 30
14199: PPUSH
14200: LD_VAR 0 3
14204: PPUSH
14205: LD_INT 1
14207: PPUSH
14208: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
14212: LD_INT 37
14214: PPUSH
14215: LD_VAR 0 3
14219: PPUSH
14220: LD_INT 1
14222: PPUSH
14223: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14227: LD_INT 5
14229: PPUSH
14230: LD_VAR 0 3
14234: PPUSH
14235: LD_INT 1
14237: PPUSH
14238: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14242: LD_INT 66
14244: PPUSH
14245: LD_VAR 0 3
14249: PPUSH
14250: LD_INT 1
14252: PPUSH
14253: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14257: LD_INT 21
14259: PPUSH
14260: LD_VAR 0 3
14264: PPUSH
14265: LD_INT 1
14267: PPUSH
14268: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14272: LD_INT 22
14274: PPUSH
14275: LD_VAR 0 3
14279: PPUSH
14280: LD_INT 1
14282: PPUSH
14283: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
14287: LD_INT 54
14289: PPUSH
14290: LD_VAR 0 3
14294: PPUSH
14295: LD_INT 1
14297: PPUSH
14298: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14302: LD_INT 0
14304: PPUSH
14305: LD_VAR 0 3
14309: PPUSH
14310: LD_INT 1
14312: PPUSH
14313: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
14317: LD_INT 1
14319: PPUSH
14320: LD_VAR 0 3
14324: PPUSH
14325: LD_INT 1
14327: PPUSH
14328: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14332: LD_INT 2
14334: PPUSH
14335: LD_VAR 0 3
14339: PPUSH
14340: LD_INT 1
14342: PPUSH
14343: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
14347: LD_INT 3
14349: PPUSH
14350: LD_VAR 0 3
14354: PPUSH
14355: LD_INT 1
14357: PPUSH
14358: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14362: LD_INT 4
14364: PPUSH
14365: LD_VAR 0 3
14369: PPUSH
14370: LD_INT 1
14372: PPUSH
14373: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
14377: LD_INT 5
14379: PPUSH
14380: LD_VAR 0 3
14384: PPUSH
14385: LD_INT 1
14387: PPUSH
14388: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14392: LD_INT 6
14394: PPUSH
14395: LD_VAR 0 3
14399: PPUSH
14400: LD_INT 1
14402: PPUSH
14403: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
14407: LD_INT 7
14409: PPUSH
14410: LD_VAR 0 3
14414: PPUSH
14415: LD_INT 1
14417: PPUSH
14418: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
14422: LD_INT 8
14424: PPUSH
14425: LD_VAR 0 3
14429: PPUSH
14430: LD_INT 1
14432: PPUSH
14433: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
14437: LD_INT 10
14439: PPUSH
14440: LD_VAR 0 3
14444: PPUSH
14445: LD_INT 1
14447: PPUSH
14448: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
14452: LD_INT 11
14454: PPUSH
14455: LD_VAR 0 3
14459: PPUSH
14460: LD_INT 1
14462: PPUSH
14463: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
14467: LD_INT 12
14469: PPUSH
14470: LD_VAR 0 3
14474: PPUSH
14475: LD_INT 1
14477: PPUSH
14478: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
14482: LD_INT 13
14484: PPUSH
14485: LD_VAR 0 3
14489: PPUSH
14490: LD_INT 1
14492: PPUSH
14493: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
14497: LD_INT 14
14499: PPUSH
14500: LD_VAR 0 3
14504: PPUSH
14505: LD_INT 1
14507: PPUSH
14508: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
14512: LD_INT 15
14514: PPUSH
14515: LD_VAR 0 3
14519: PPUSH
14520: LD_INT 1
14522: PPUSH
14523: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
14527: LD_INT 16
14529: PPUSH
14530: LD_VAR 0 3
14534: PPUSH
14535: LD_INT 1
14537: PPUSH
14538: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
14542: LD_INT 17
14544: PPUSH
14545: LD_VAR 0 3
14549: PPUSH
14550: LD_INT 1
14552: PPUSH
14553: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
14557: LD_INT 19
14559: PPUSH
14560: LD_VAR 0 3
14564: PPUSH
14565: LD_INT 1
14567: PPUSH
14568: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
14572: LD_INT 20
14574: PPUSH
14575: LD_VAR 0 3
14579: PPUSH
14580: LD_INT 1
14582: PPUSH
14583: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
14587: LD_INT 21
14589: PPUSH
14590: LD_VAR 0 3
14594: PPUSH
14595: LD_INT 1
14597: PPUSH
14598: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
14602: LD_INT 23
14604: PPUSH
14605: LD_VAR 0 3
14609: PPUSH
14610: LD_INT 1
14612: PPUSH
14613: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
14617: LD_INT 26
14619: PPUSH
14620: LD_VAR 0 3
14624: PPUSH
14625: LD_INT 1
14627: PPUSH
14628: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
14632: LD_INT 27
14634: PPUSH
14635: LD_VAR 0 3
14639: PPUSH
14640: LD_INT 1
14642: PPUSH
14643: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
14647: LD_INT 28
14649: PPUSH
14650: LD_VAR 0 3
14654: PPUSH
14655: LD_INT 1
14657: PPUSH
14658: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14662: LD_INT 29
14664: PPUSH
14665: LD_VAR 0 3
14669: PPUSH
14670: LD_INT 1
14672: PPUSH
14673: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
14677: LD_INT 30
14679: PPUSH
14680: LD_VAR 0 3
14684: PPUSH
14685: LD_INT 1
14687: PPUSH
14688: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14692: LD_INT 31
14694: PPUSH
14695: LD_VAR 0 3
14699: PPUSH
14700: LD_INT 1
14702: PPUSH
14703: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
14707: LD_INT 32
14709: PPUSH
14710: LD_VAR 0 3
14714: PPUSH
14715: LD_INT 1
14717: PPUSH
14718: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
14722: LD_INT 36
14724: PPUSH
14725: LD_VAR 0 3
14729: PPUSH
14730: LD_INT 1
14732: PPUSH
14733: CALL_OW 324
// end ; 5 :
14737: GO 16868
14739: LD_INT 5
14741: DOUBLE
14742: EQUAL
14743: IFTRUE 14747
14745: GO 15860
14747: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14748: LD_INT 35
14750: PPUSH
14751: LD_VAR 0 3
14755: PPUSH
14756: LD_INT 1
14758: PPUSH
14759: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14763: LD_INT 45
14765: PPUSH
14766: LD_VAR 0 3
14770: PPUSH
14771: LD_INT 1
14773: PPUSH
14774: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14778: LD_INT 46
14780: PPUSH
14781: LD_VAR 0 3
14785: PPUSH
14786: LD_INT 1
14788: PPUSH
14789: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14793: LD_INT 47
14795: PPUSH
14796: LD_VAR 0 3
14800: PPUSH
14801: LD_INT 1
14803: PPUSH
14804: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14808: LD_INT 1
14810: PPUSH
14811: LD_VAR 0 3
14815: PPUSH
14816: LD_INT 1
14818: PPUSH
14819: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14823: LD_INT 2
14825: PPUSH
14826: LD_VAR 0 3
14830: PPUSH
14831: LD_INT 1
14833: PPUSH
14834: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14838: LD_INT 11
14840: PPUSH
14841: LD_VAR 0 3
14845: PPUSH
14846: LD_INT 1
14848: PPUSH
14849: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
14853: LD_INT 20
14855: PPUSH
14856: LD_VAR 0 3
14860: PPUSH
14861: LD_INT 1
14863: PPUSH
14864: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14868: LD_INT 48
14870: PPUSH
14871: LD_VAR 0 3
14875: PPUSH
14876: LD_INT 1
14878: PPUSH
14879: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
14883: LD_INT 49
14885: PPUSH
14886: LD_VAR 0 3
14890: PPUSH
14891: LD_INT 1
14893: PPUSH
14894: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14898: LD_INT 69
14900: PPUSH
14901: LD_VAR 0 3
14905: PPUSH
14906: LD_INT 1
14908: PPUSH
14909: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14913: LD_INT 39
14915: PPUSH
14916: LD_VAR 0 3
14920: PPUSH
14921: LD_INT 1
14923: PPUSH
14924: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
14928: LD_INT 34
14930: PPUSH
14931: LD_VAR 0 3
14935: PPUSH
14936: LD_INT 1
14938: PPUSH
14939: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
14943: LD_INT 42
14945: PPUSH
14946: LD_VAR 0 3
14950: PPUSH
14951: LD_INT 1
14953: PPUSH
14954: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
14958: LD_INT 44
14960: PPUSH
14961: LD_VAR 0 3
14965: PPUSH
14966: LD_INT 1
14968: PPUSH
14969: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
14973: LD_INT 41
14975: PPUSH
14976: LD_VAR 0 3
14980: PPUSH
14981: LD_INT 1
14983: PPUSH
14984: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
14988: LD_INT 40
14990: PPUSH
14991: LD_VAR 0 3
14995: PPUSH
14996: LD_INT 1
14998: PPUSH
14999: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15003: LD_INT 43
15005: PPUSH
15006: LD_VAR 0 3
15010: PPUSH
15011: LD_INT 1
15013: PPUSH
15014: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15018: LD_INT 70
15020: PPUSH
15021: LD_VAR 0 3
15025: PPUSH
15026: LD_INT 1
15028: PPUSH
15029: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15033: LD_INT 51
15035: PPUSH
15036: LD_VAR 0 3
15040: PPUSH
15041: LD_INT 1
15043: PPUSH
15044: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15048: LD_INT 52
15050: PPUSH
15051: LD_VAR 0 3
15055: PPUSH
15056: LD_INT 1
15058: PPUSH
15059: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15063: LD_INT 6
15065: PPUSH
15066: LD_VAR 0 3
15070: PPUSH
15071: LD_INT 1
15073: PPUSH
15074: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
15078: LD_INT 15
15080: PPUSH
15081: LD_VAR 0 3
15085: PPUSH
15086: LD_INT 1
15088: PPUSH
15089: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
15093: LD_INT 7
15095: PPUSH
15096: LD_VAR 0 3
15100: PPUSH
15101: LD_INT 1
15103: PPUSH
15104: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
15108: LD_INT 12
15110: PPUSH
15111: LD_VAR 0 3
15115: PPUSH
15116: LD_INT 1
15118: PPUSH
15119: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
15123: LD_INT 17
15125: PPUSH
15126: LD_VAR 0 3
15130: PPUSH
15131: LD_INT 1
15133: PPUSH
15134: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
15138: LD_INT 18
15140: PPUSH
15141: LD_VAR 0 3
15145: PPUSH
15146: LD_INT 1
15148: PPUSH
15149: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
15153: LD_INT 60
15155: PPUSH
15156: LD_VAR 0 3
15160: PPUSH
15161: LD_INT 1
15163: PPUSH
15164: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
15168: LD_INT 32
15170: PPUSH
15171: LD_VAR 0 3
15175: PPUSH
15176: LD_INT 1
15178: PPUSH
15179: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
15183: LD_INT 9
15185: PPUSH
15186: LD_VAR 0 3
15190: PPUSH
15191: LD_INT 1
15193: PPUSH
15194: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
15198: LD_INT 57
15200: PPUSH
15201: LD_VAR 0 3
15205: PPUSH
15206: LD_INT 1
15208: PPUSH
15209: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
15213: LD_INT 30
15215: PPUSH
15216: LD_VAR 0 3
15220: PPUSH
15221: LD_INT 1
15223: PPUSH
15224: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
15228: LD_INT 37
15230: PPUSH
15231: LD_VAR 0 3
15235: PPUSH
15236: LD_INT 1
15238: PPUSH
15239: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
15243: LD_INT 63
15245: PPUSH
15246: LD_VAR 0 3
15250: PPUSH
15251: LD_INT 1
15253: PPUSH
15254: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
15258: LD_INT 3
15260: PPUSH
15261: LD_VAR 0 3
15265: PPUSH
15266: LD_INT 1
15268: PPUSH
15269: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
15273: LD_INT 4
15275: PPUSH
15276: LD_VAR 0 3
15280: PPUSH
15281: LD_INT 1
15283: PPUSH
15284: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
15288: LD_INT 5
15290: PPUSH
15291: LD_VAR 0 3
15295: PPUSH
15296: LD_INT 1
15298: PPUSH
15299: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
15303: LD_INT 66
15305: PPUSH
15306: LD_VAR 0 3
15310: PPUSH
15311: LD_INT 1
15313: PPUSH
15314: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
15318: LD_INT 21
15320: PPUSH
15321: LD_VAR 0 3
15325: PPUSH
15326: LD_INT 1
15328: PPUSH
15329: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
15333: LD_INT 22
15335: PPUSH
15336: LD_VAR 0 3
15340: PPUSH
15341: LD_INT 1
15343: PPUSH
15344: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
15348: LD_INT 19
15350: PPUSH
15351: LD_VAR 0 3
15355: PPUSH
15356: LD_INT 1
15358: PPUSH
15359: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
15363: LD_INT 54
15365: PPUSH
15366: LD_VAR 0 3
15370: PPUSH
15371: LD_INT 1
15373: PPUSH
15374: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
15378: LD_INT 55
15380: PPUSH
15381: LD_VAR 0 3
15385: PPUSH
15386: LD_INT 1
15388: PPUSH
15389: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15393: LD_INT 0
15395: PPUSH
15396: LD_VAR 0 3
15400: PPUSH
15401: LD_INT 1
15403: PPUSH
15404: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
15408: LD_INT 1
15410: PPUSH
15411: LD_VAR 0 3
15415: PPUSH
15416: LD_INT 1
15418: PPUSH
15419: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15423: LD_INT 2
15425: PPUSH
15426: LD_VAR 0 3
15430: PPUSH
15431: LD_INT 1
15433: PPUSH
15434: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
15438: LD_INT 3
15440: PPUSH
15441: LD_VAR 0 3
15445: PPUSH
15446: LD_INT 1
15448: PPUSH
15449: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15453: LD_INT 4
15455: PPUSH
15456: LD_VAR 0 3
15460: PPUSH
15461: LD_INT 1
15463: PPUSH
15464: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
15468: LD_INT 5
15470: PPUSH
15471: LD_VAR 0 3
15475: PPUSH
15476: LD_INT 1
15478: PPUSH
15479: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15483: LD_INT 6
15485: PPUSH
15486: LD_VAR 0 3
15490: PPUSH
15491: LD_INT 1
15493: PPUSH
15494: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
15498: LD_INT 7
15500: PPUSH
15501: LD_VAR 0 3
15505: PPUSH
15506: LD_INT 1
15508: PPUSH
15509: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
15513: LD_INT 8
15515: PPUSH
15516: LD_VAR 0 3
15520: PPUSH
15521: LD_INT 1
15523: PPUSH
15524: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
15528: LD_INT 10
15530: PPUSH
15531: LD_VAR 0 3
15535: PPUSH
15536: LD_INT 1
15538: PPUSH
15539: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
15543: LD_INT 11
15545: PPUSH
15546: LD_VAR 0 3
15550: PPUSH
15551: LD_INT 1
15553: PPUSH
15554: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
15558: LD_INT 12
15560: PPUSH
15561: LD_VAR 0 3
15565: PPUSH
15566: LD_INT 1
15568: PPUSH
15569: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
15573: LD_INT 13
15575: PPUSH
15576: LD_VAR 0 3
15580: PPUSH
15581: LD_INT 1
15583: PPUSH
15584: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
15588: LD_INT 14
15590: PPUSH
15591: LD_VAR 0 3
15595: PPUSH
15596: LD_INT 1
15598: PPUSH
15599: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
15603: LD_INT 15
15605: PPUSH
15606: LD_VAR 0 3
15610: PPUSH
15611: LD_INT 1
15613: PPUSH
15614: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
15618: LD_INT 16
15620: PPUSH
15621: LD_VAR 0 3
15625: PPUSH
15626: LD_INT 1
15628: PPUSH
15629: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
15633: LD_INT 17
15635: PPUSH
15636: LD_VAR 0 3
15640: PPUSH
15641: LD_INT 1
15643: PPUSH
15644: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
15648: LD_INT 18
15650: PPUSH
15651: LD_VAR 0 3
15655: PPUSH
15656: LD_INT 1
15658: PPUSH
15659: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
15663: LD_INT 19
15665: PPUSH
15666: LD_VAR 0 3
15670: PPUSH
15671: LD_INT 1
15673: PPUSH
15674: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
15678: LD_INT 20
15680: PPUSH
15681: LD_VAR 0 3
15685: PPUSH
15686: LD_INT 1
15688: PPUSH
15689: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
15693: LD_INT 21
15695: PPUSH
15696: LD_VAR 0 3
15700: PPUSH
15701: LD_INT 1
15703: PPUSH
15704: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
15708: LD_INT 23
15710: PPUSH
15711: LD_VAR 0 3
15715: PPUSH
15716: LD_INT 1
15718: PPUSH
15719: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
15723: LD_INT 26
15725: PPUSH
15726: LD_VAR 0 3
15730: PPUSH
15731: LD_INT 1
15733: PPUSH
15734: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15738: LD_INT 27
15740: PPUSH
15741: LD_VAR 0 3
15745: PPUSH
15746: LD_INT 1
15748: PPUSH
15749: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
15753: LD_INT 28
15755: PPUSH
15756: LD_VAR 0 3
15760: PPUSH
15761: LD_INT 1
15763: PPUSH
15764: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15768: LD_INT 29
15770: PPUSH
15771: LD_VAR 0 3
15775: PPUSH
15776: LD_INT 1
15778: PPUSH
15779: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
15783: LD_INT 30
15785: PPUSH
15786: LD_VAR 0 3
15790: PPUSH
15791: LD_INT 1
15793: PPUSH
15794: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15798: LD_INT 31
15800: PPUSH
15801: LD_VAR 0 3
15805: PPUSH
15806: LD_INT 1
15808: PPUSH
15809: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15813: LD_INT 32
15815: PPUSH
15816: LD_VAR 0 3
15820: PPUSH
15821: LD_INT 1
15823: PPUSH
15824: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
15828: LD_INT 33
15830: PPUSH
15831: LD_VAR 0 3
15835: PPUSH
15836: LD_INT 1
15838: PPUSH
15839: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
15843: LD_INT 36
15845: PPUSH
15846: LD_VAR 0 3
15850: PPUSH
15851: LD_INT 1
15853: PPUSH
15854: CALL_OW 324
// end ; 6 :
15858: GO 16868
15860: LD_INT 6
15862: DOUBLE
15863: EQUAL
15864: IFTRUE 15868
15866: GO 16793
15868: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15869: LD_INT 35
15871: PPUSH
15872: LD_VAR 0 3
15876: PPUSH
15877: LD_INT 1
15879: PPUSH
15880: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15884: LD_INT 45
15886: PPUSH
15887: LD_VAR 0 3
15891: PPUSH
15892: LD_INT 1
15894: PPUSH
15895: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15899: LD_INT 46
15901: PPUSH
15902: LD_VAR 0 3
15906: PPUSH
15907: LD_INT 1
15909: PPUSH
15910: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15914: LD_INT 47
15916: PPUSH
15917: LD_VAR 0 3
15921: PPUSH
15922: LD_INT 1
15924: PPUSH
15925: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15929: LD_INT 1
15931: PPUSH
15932: LD_VAR 0 3
15936: PPUSH
15937: LD_INT 1
15939: PPUSH
15940: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15944: LD_INT 2
15946: PPUSH
15947: LD_VAR 0 3
15951: PPUSH
15952: LD_INT 1
15954: PPUSH
15955: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15959: LD_INT 11
15961: PPUSH
15962: LD_VAR 0 3
15966: PPUSH
15967: LD_INT 1
15969: PPUSH
15970: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15974: LD_INT 20
15976: PPUSH
15977: LD_VAR 0 3
15981: PPUSH
15982: LD_INT 1
15984: PPUSH
15985: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15989: LD_INT 48
15991: PPUSH
15992: LD_VAR 0 3
15996: PPUSH
15997: LD_INT 1
15999: PPUSH
16000: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16004: LD_INT 49
16006: PPUSH
16007: LD_VAR 0 3
16011: PPUSH
16012: LD_INT 1
16014: PPUSH
16015: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
16019: LD_INT 50
16021: PPUSH
16022: LD_VAR 0 3
16026: PPUSH
16027: LD_INT 1
16029: PPUSH
16030: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16034: LD_INT 69
16036: PPUSH
16037: LD_VAR 0 3
16041: PPUSH
16042: LD_INT 1
16044: PPUSH
16045: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16049: LD_INT 39
16051: PPUSH
16052: LD_VAR 0 3
16056: PPUSH
16057: LD_INT 1
16059: PPUSH
16060: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16064: LD_INT 34
16066: PPUSH
16067: LD_VAR 0 3
16071: PPUSH
16072: LD_INT 1
16074: PPUSH
16075: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16079: LD_INT 42
16081: PPUSH
16082: LD_VAR 0 3
16086: PPUSH
16087: LD_INT 1
16089: PPUSH
16090: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16094: LD_INT 44
16096: PPUSH
16097: LD_VAR 0 3
16101: PPUSH
16102: LD_INT 1
16104: PPUSH
16105: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16109: LD_INT 41
16111: PPUSH
16112: LD_VAR 0 3
16116: PPUSH
16117: LD_INT 1
16119: PPUSH
16120: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
16124: LD_INT 13
16126: PPUSH
16127: LD_VAR 0 3
16131: PPUSH
16132: LD_INT 1
16134: PPUSH
16135: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
16139: LD_INT 40
16141: PPUSH
16142: LD_VAR 0 3
16146: PPUSH
16147: LD_INT 1
16149: PPUSH
16150: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16154: LD_INT 43
16156: PPUSH
16157: LD_VAR 0 3
16161: PPUSH
16162: LD_INT 1
16164: PPUSH
16165: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16169: LD_INT 70
16171: PPUSH
16172: LD_VAR 0 3
16176: PPUSH
16177: LD_INT 1
16179: PPUSH
16180: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
16184: LD_INT 23
16186: PPUSH
16187: LD_VAR 0 3
16191: PPUSH
16192: LD_INT 1
16194: PPUSH
16195: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16199: LD_INT 51
16201: PPUSH
16202: LD_VAR 0 3
16206: PPUSH
16207: LD_INT 1
16209: PPUSH
16210: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16214: LD_INT 52
16216: PPUSH
16217: LD_VAR 0 3
16221: PPUSH
16222: LD_INT 1
16224: PPUSH
16225: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16229: LD_INT 6
16231: PPUSH
16232: LD_VAR 0 3
16236: PPUSH
16237: LD_INT 1
16239: PPUSH
16240: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16244: LD_INT 15
16246: PPUSH
16247: LD_VAR 0 3
16251: PPUSH
16252: LD_INT 1
16254: PPUSH
16255: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16259: LD_INT 7
16261: PPUSH
16262: LD_VAR 0 3
16266: PPUSH
16267: LD_INT 1
16269: PPUSH
16270: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16274: LD_INT 12
16276: PPUSH
16277: LD_VAR 0 3
16281: PPUSH
16282: LD_INT 1
16284: PPUSH
16285: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
16289: LD_INT 10
16291: PPUSH
16292: LD_VAR 0 3
16296: PPUSH
16297: LD_INT 1
16299: PPUSH
16300: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
16304: LD_INT 17
16306: PPUSH
16307: LD_VAR 0 3
16311: PPUSH
16312: LD_INT 1
16314: PPUSH
16315: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
16319: LD_INT 18
16321: PPUSH
16322: LD_VAR 0 3
16326: PPUSH
16327: LD_INT 1
16329: PPUSH
16330: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
16334: LD_INT 60
16336: PPUSH
16337: LD_VAR 0 3
16341: PPUSH
16342: LD_INT 1
16344: PPUSH
16345: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
16349: LD_INT 61
16351: PPUSH
16352: LD_VAR 0 3
16356: PPUSH
16357: LD_INT 1
16359: PPUSH
16360: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
16364: LD_INT 32
16366: PPUSH
16367: LD_VAR 0 3
16371: PPUSH
16372: LD_INT 1
16374: PPUSH
16375: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
16379: LD_INT 27
16381: PPUSH
16382: LD_VAR 0 3
16386: PPUSH
16387: LD_INT 1
16389: PPUSH
16390: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
16394: LD_INT 36
16396: PPUSH
16397: LD_VAR 0 3
16401: PPUSH
16402: LD_INT 1
16404: PPUSH
16405: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
16409: LD_INT 33
16411: PPUSH
16412: LD_VAR 0 3
16416: PPUSH
16417: LD_INT 1
16419: PPUSH
16420: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
16424: LD_INT 9
16426: PPUSH
16427: LD_VAR 0 3
16431: PPUSH
16432: LD_INT 1
16434: PPUSH
16435: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
16439: LD_INT 38
16441: PPUSH
16442: LD_VAR 0 3
16446: PPUSH
16447: LD_INT 1
16449: PPUSH
16450: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
16454: LD_INT 57
16456: PPUSH
16457: LD_VAR 0 3
16461: PPUSH
16462: LD_INT 1
16464: PPUSH
16465: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
16469: LD_INT 58
16471: PPUSH
16472: LD_VAR 0 3
16476: PPUSH
16477: LD_INT 1
16479: PPUSH
16480: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
16484: LD_INT 28
16486: PPUSH
16487: LD_VAR 0 3
16491: PPUSH
16492: LD_INT 1
16494: PPUSH
16495: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
16499: LD_INT 29
16501: PPUSH
16502: LD_VAR 0 3
16506: PPUSH
16507: LD_INT 1
16509: PPUSH
16510: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
16514: LD_INT 30
16516: PPUSH
16517: LD_VAR 0 3
16521: PPUSH
16522: LD_INT 1
16524: PPUSH
16525: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
16529: LD_INT 37
16531: PPUSH
16532: LD_VAR 0 3
16536: PPUSH
16537: LD_INT 1
16539: PPUSH
16540: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
16544: LD_INT 63
16546: PPUSH
16547: LD_VAR 0 3
16551: PPUSH
16552: LD_INT 1
16554: PPUSH
16555: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
16559: LD_INT 64
16561: PPUSH
16562: LD_VAR 0 3
16566: PPUSH
16567: LD_INT 1
16569: PPUSH
16570: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
16574: LD_INT 3
16576: PPUSH
16577: LD_VAR 0 3
16581: PPUSH
16582: LD_INT 1
16584: PPUSH
16585: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
16589: LD_INT 4
16591: PPUSH
16592: LD_VAR 0 3
16596: PPUSH
16597: LD_INT 1
16599: PPUSH
16600: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
16604: LD_INT 5
16606: PPUSH
16607: LD_VAR 0 3
16611: PPUSH
16612: LD_INT 1
16614: PPUSH
16615: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
16619: LD_INT 8
16621: PPUSH
16622: LD_VAR 0 3
16626: PPUSH
16627: LD_INT 1
16629: PPUSH
16630: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
16634: LD_INT 66
16636: PPUSH
16637: LD_VAR 0 3
16641: PPUSH
16642: LD_INT 1
16644: PPUSH
16645: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
16649: LD_INT 67
16651: PPUSH
16652: LD_VAR 0 3
16656: PPUSH
16657: LD_INT 1
16659: PPUSH
16660: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
16664: LD_INT 21
16666: PPUSH
16667: LD_VAR 0 3
16671: PPUSH
16672: LD_INT 1
16674: PPUSH
16675: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
16679: LD_INT 22
16681: PPUSH
16682: LD_VAR 0 3
16686: PPUSH
16687: LD_INT 1
16689: PPUSH
16690: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
16694: LD_INT 19
16696: PPUSH
16697: LD_VAR 0 3
16701: PPUSH
16702: LD_INT 1
16704: PPUSH
16705: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
16709: LD_INT 26
16711: PPUSH
16712: LD_VAR 0 3
16716: PPUSH
16717: LD_INT 1
16719: PPUSH
16720: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
16724: LD_INT 54
16726: PPUSH
16727: LD_VAR 0 3
16731: PPUSH
16732: LD_INT 1
16734: PPUSH
16735: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
16739: LD_INT 55
16741: PPUSH
16742: LD_VAR 0 3
16746: PPUSH
16747: LD_INT 1
16749: PPUSH
16750: CALL_OW 322
// for i = 0 to 39 do
16754: LD_ADDR_VAR 0 4
16758: PUSH
16759: DOUBLE
16760: LD_INT 0
16762: DEC
16763: ST_TO_ADDR
16764: LD_INT 39
16766: PUSH
16767: FOR_TO
16768: IFFALSE 16789
// SetRestrict ( i , side , true ) ;
16770: LD_VAR 0 4
16774: PPUSH
16775: LD_VAR 0 3
16779: PPUSH
16780: LD_INT 1
16782: PPUSH
16783: CALL_OW 324
16787: GO 16767
16789: POP
16790: POP
// end ; else
16791: GO 16868
16793: POP
// begin for i = 1 to 73 do
16794: LD_ADDR_VAR 0 4
16798: PUSH
16799: DOUBLE
16800: LD_INT 1
16802: DEC
16803: ST_TO_ADDR
16804: LD_INT 73
16806: PUSH
16807: FOR_TO
16808: IFFALSE 16829
// SetTech ( i , side , state_enabled ) ;
16810: LD_VAR 0 4
16814: PPUSH
16815: LD_VAR 0 3
16819: PPUSH
16820: LD_INT 1
16822: PPUSH
16823: CALL_OW 322
16827: GO 16807
16829: POP
16830: POP
// for i = 0 to 39 do
16831: LD_ADDR_VAR 0 4
16835: PUSH
16836: DOUBLE
16837: LD_INT 0
16839: DEC
16840: ST_TO_ADDR
16841: LD_INT 39
16843: PUSH
16844: FOR_TO
16845: IFFALSE 16866
// SetRestrict ( i , side , true ) ;
16847: LD_VAR 0 4
16851: PPUSH
16852: LD_VAR 0 3
16856: PPUSH
16857: LD_INT 1
16859: PPUSH
16860: CALL_OW 324
16864: GO 16844
16866: POP
16867: POP
// end ; end ; end ;
16868: GO 12873
16870: POP
16871: POP
// end ;
16872: LD_VAR 0 2
16876: RET
